Title: CppCon 2017: Stephen Spann “Cross-Platform Apps with Dropbox’s Djinni...”
Publication date: 2017-10-13
Playlist: CppCon 2017
Description: 
	Cross-Platform Apps with Dropbox’s Djinni: In-Production Architecture Examples

http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Djinni is a tool developed by Dropbox for cross-platform C++ development. This session will give an overview of mobile cross-platform C++ development, an explanation of what Djinni does and why it is useful, and details on several Djinni-based app architectures I have used.

Agenda:
- Mobile C++ Architecture Overview
- What is Djinni?
- Example 1: "Hello World"
- Example 2: User Preferences
- Example 3: Google Analytics
- Challenges Encountered
- Additional Resources
— 
Stephen Spann: Owner/Developer, demic apps LLC

I am an app developer building progressive web apps and cross-platform iOS and Android apps both independently and for clients. My session covers developing apps for iOS and Android utilizing C++ and Dropbox's Djinni tool.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:01,250 --> 00:00:08,099
just quick overview what we're gonna

00:00:03,179 --> 00:00:10,200
talk about kind of first give an

00:00:08,099 --> 00:00:13,139
architectural overview about all the

00:00:10,200 --> 00:00:17,550
moving parts involved with using C++ on

00:00:13,139 --> 00:00:20,039
iPhone and Android all the language is

00:00:17,550 --> 00:00:22,140
involved that kind of thing I'm going to

00:00:20,039 --> 00:00:25,560
introduce you to the Dropbox tool Genie

00:00:22,140 --> 00:00:28,250
and kind of go over what it does the

00:00:25,560 --> 00:00:31,520
workflow involved and that kind of thing

00:00:28,250 --> 00:00:35,130
then we're going to go into the examples

00:00:31,520 --> 00:00:37,140
there are mostly high-level architecture

00:00:35,130 --> 00:00:39,600
examples there will be some code on the

00:00:37,140 --> 00:00:42,960
screen try to keep that to the mountain

00:00:39,600 --> 00:00:44,850
but and I also tried to keep the

00:00:42,960 --> 00:00:47,010
functionality to an absolute absolute

00:00:44,850 --> 00:00:48,329
minimum which is gonna be strange

00:00:47,010 --> 00:00:50,460
because we're going to a lot of trouble

00:00:48,329 --> 00:00:53,670
for a minimal functionality but the idea

00:00:50,460 --> 00:00:55,340
is you can expand the base little

00:00:53,670 --> 00:00:59,300
architecture into a much more complex

00:00:55,340 --> 00:01:02,160
yeah combine some of these not dates and

00:00:59,300 --> 00:01:03,979
the first three examples are all

00:01:02,160 --> 00:01:07,860
demonstrating in the different ways that

00:01:03,979 --> 00:01:10,500
Java C++ and Objective C talk to each

00:01:07,860 --> 00:01:12,330
other the last example goes and more

00:01:10,500 --> 00:01:13,830
into data structures and passing passing

00:01:12,330 --> 00:01:18,000
data objects around between the

00:01:13,830 --> 00:01:19,710
languages to wrap up just going to go

00:01:18,000 --> 00:01:23,509
through some random challenges I've

00:01:19,710 --> 00:01:26,070
encountered and how I resolved them and

00:01:23,509 --> 00:01:27,090
point you to some additional places on

00:01:26,070 --> 00:01:37,979
the Internet you can go for more

00:01:27,090 --> 00:01:39,900
information so let's get started so high

00:01:37,979 --> 00:01:45,450
level goal we want an iPhone app an

00:01:39,900 --> 00:01:48,860
Android app they use a C++ library why

00:01:45,450 --> 00:01:48,860
why do we want to do this to begin with

00:01:48,950 --> 00:01:56,729
what of it my main reason is the for try

00:01:53,700 --> 00:01:58,320
philosophy don't repeat yourself there's

00:01:56,729 --> 00:02:00,360
a lot of code that goes into apps that

00:01:58,320 --> 00:02:02,939
doesn't need to be coded in Objective C

00:02:00,360 --> 00:02:06,930
and Java we can abstract that into C++

00:02:02,939 --> 00:02:10,479
and reuse it for both platforms and kind

00:02:06,930 --> 00:02:15,670
of just concentrate on UI for Java and

00:02:10,479 --> 00:02:18,310
objective-c development another reason

00:02:15,670 --> 00:02:21,340
if you're in a unit testing you can you

00:02:18,310 --> 00:02:24,069
know test once all your C++ code before

00:02:21,340 --> 00:02:26,080
it goes to the different platforms so

00:02:24,069 --> 00:02:28,950
let's delve a little bit into that and

00:02:26,080 --> 00:02:28,950
it's worked out pretty well

00:02:29,670 --> 00:02:35,260
performance C++ is known for performance

00:02:32,140 --> 00:02:38,140
so depending on what your app does it

00:02:35,260 --> 00:02:41,620
may benefit from using some C++

00:02:38,140 --> 00:02:47,650
libraries instead of the Objective C or

00:02:41,620 --> 00:02:49,299
Java equivalents and that just the sheer

00:02:47,650 --> 00:02:51,819
amount of open-source libraries

00:02:49,299 --> 00:02:59,829
available in C++ is somewhat of a

00:02:51,819 --> 00:03:03,129
motivation like for example boost okay

00:02:59,829 --> 00:03:05,410
so what are our goals here where I

00:03:03,129 --> 00:03:08,739
talked about a little bit when an iPhone

00:03:05,410 --> 00:03:11,920
app and we're gonna code all our UI and

00:03:08,739 --> 00:03:14,260
objective-c or Swift I'm gonna focus on

00:03:11,920 --> 00:03:16,870
objective-c for this talk but it is

00:03:14,260 --> 00:03:18,940
possible with Swift as well we also want

00:03:16,870 --> 00:03:22,419
to enjoy that which we're gonna code in

00:03:18,940 --> 00:03:24,730
Java they just announced Portland which

00:03:22,419 --> 00:03:26,950
I have zero experience with but in

00:03:24,730 --> 00:03:28,540
theory that would work if if you can

00:03:26,950 --> 00:03:30,639
have a project with Java and Kotlin you

00:03:28,540 --> 00:03:35,829
should be able to do this but I can't

00:03:30,639 --> 00:03:40,000
guarantee that and finally a C++ library

00:03:35,829 --> 00:03:44,139
that talks to both and kind of other

00:03:40,000 --> 00:03:46,120
goals move anything we can to C++ so we

00:03:44,139 --> 00:03:50,169
we only manage it in one place and

00:03:46,120 --> 00:03:54,750
update it in one place and utilize that

00:03:50,169 --> 00:03:54,750
library on both iPhone and Android write

00:03:55,470 --> 00:04:00,040
just a kind of a quick little few bullet

00:03:58,450 --> 00:04:05,019
points about what should and should not

00:04:00,040 --> 00:04:08,169
go into C++ so if you have your cloudy

00:04:05,019 --> 00:04:09,819
API requests and responses it's a good

00:04:08,169 --> 00:04:11,699
opportunity for sequel supposed to do

00:04:09,819 --> 00:04:16,389
that once and then send data to

00:04:11,699 --> 00:04:19,090
Objective C and Java any sort of sequel

00:04:16,389 --> 00:04:21,430
like database logic I found in Android

00:04:19,090 --> 00:04:22,630
both have access to sequel Lite so we

00:04:21,430 --> 00:04:25,260
can handle all that and C as well as

00:04:22,630 --> 00:04:25,260
false if we want to

00:04:25,670 --> 00:04:29,480
if you have really complicated

00:04:27,250 --> 00:04:32,300
calculations or algorithms or anything

00:04:29,480 --> 00:04:34,760
like that that isn't you know it happens

00:04:32,300 --> 00:04:37,580
behind the scenes behind the UI C++

00:04:34,760 --> 00:04:39,080
might be a good opportunity for that and

00:04:37,580 --> 00:04:41,900
pretty much anything we can do with a

00:04:39,080 --> 00:04:47,840
C++ library OpenCV is a good example

00:04:41,900 --> 00:04:54,470
that kind of thing so now what doesn't

00:04:47,840 --> 00:04:55,910
belong in C++ sort of my opinion I know

00:04:54,470 --> 00:05:00,140
that some of these things could go there

00:04:55,910 --> 00:05:06,410
but okay so user interface on animations

00:05:00,140 --> 00:05:08,030
I I actually like to use the native you

00:05:06,410 --> 00:05:11,480
know iPhone tables and the Android

00:05:08,030 --> 00:05:13,220
tables this platform spend a lot of time

00:05:11,480 --> 00:05:15,470
making those really smooth animated and

00:05:13,220 --> 00:05:17,600
I just just keep that there are some

00:05:15,470 --> 00:05:19,040
platforms that you know you you render

00:05:17,600 --> 00:05:21,020
the whole happen JavaScript and then

00:05:19,040 --> 00:05:23,720
your animations and that kind of thing

00:05:21,020 --> 00:05:26,870
that's a little wonky so this technique

00:05:23,720 --> 00:05:30,400
we get to use apples table to use and

00:05:26,870 --> 00:05:30,400
that kind of thing so I like that

00:05:32,740 --> 00:05:37,460
Apsara like it's obviously going to be

00:05:35,060 --> 00:05:40,010
different for Android and iPhone you can

00:05:37,460 --> 00:05:41,570
do a little bit in C++ like unlocking

00:05:40,010 --> 00:05:44,030
content that kind of thing but for the

00:05:41,570 --> 00:05:45,910
most part we have to go back to iPhone

00:05:44,030 --> 00:05:49,130
Android to save a lot kind of thing

00:05:45,910 --> 00:05:51,680
sensor or camera input some of that you

00:05:49,130 --> 00:05:55,100
can get through C++ but it's a lot

00:05:51,680 --> 00:05:57,920
smoother to just use the input from

00:05:55,100 --> 00:05:59,060
Objective C and Java and then process

00:05:57,920 --> 00:06:05,540
the data or whatever you need to do in

00:05:59,060 --> 00:06:08,480
C++ okay let's go through an overview of

00:06:05,540 --> 00:06:13,460
all the languages of alt or he talked

00:06:08,480 --> 00:06:17,750
about three C++ I found put it in

00:06:13,460 --> 00:06:19,220
Objective C Android Kannada Java so

00:06:17,750 --> 00:06:22,940
those things don't talk to each other by

00:06:19,220 --> 00:06:24,770
themselves you can't instantiate just I

00:06:22,940 --> 00:06:26,720
don't believe a C++ object and start

00:06:24,770 --> 00:06:29,510
calling methods in either Java or

00:06:26,720 --> 00:06:31,490
Objective C but there are what we call

00:06:29,510 --> 00:06:33,770
bridge languages which is what we're

00:06:31,490 --> 00:06:35,990
going to use so on the iPhone side of

00:06:33,770 --> 00:06:39,090
things we have

00:06:35,990 --> 00:06:43,970
an objective-c bridge built with a

00:06:39,090 --> 00:06:48,990
language called objective C++ Java side

00:06:43,970 --> 00:06:52,200
a Java bridge built with j'ni so this

00:06:48,990 --> 00:06:54,480
kind of on my favorite questions show

00:06:52,200 --> 00:06:58,410
fans has anyone had to ever deal with

00:06:54,480 --> 00:07:04,350
objective C++ or J and I hurt people

00:06:58,410 --> 00:07:06,210
okay sooo how many of you had an awesome

00:07:04,350 --> 00:07:07,200
time with that yeah that was like your

00:07:06,210 --> 00:07:09,600
favorite thing you've ever done with a

00:07:07,200 --> 00:07:16,470
computer okay

00:07:09,600 --> 00:07:21,210
maybe yeah either one okay all right

00:07:16,470 --> 00:07:23,820
so Jane I'm not so good I can only speak

00:07:21,210 --> 00:07:27,270
for objective C++ and I was trying to

00:07:23,820 --> 00:07:29,610
use a the opencv library on iphone and

00:07:27,270 --> 00:07:32,250
it was before I kind of discovered

00:07:29,610 --> 00:07:32,730
Dropbox it's too little and it was a

00:07:32,250 --> 00:07:35,520
mess

00:07:32,730 --> 00:07:37,080
I had go down because of weird places I

00:07:35,520 --> 00:07:41,100
couldn't tell where objective-c ended

00:07:37,080 --> 00:07:41,760
and C++ begin so I was renaming files to

00:07:41,100 --> 00:07:44,100
make them work

00:07:41,760 --> 00:07:49,770
so it was it was pretty gross I didn't

00:07:44,100 --> 00:07:51,570
like it so that's pretty much common

00:07:49,770 --> 00:07:56,880
theme is people don't like these

00:07:51,570 --> 00:07:59,820
languages so they said there are very

00:07:56,880 --> 00:08:02,490
error-prone they're difficult to

00:07:59,820 --> 00:08:04,170
troubleshoot if you get this crazy stack

00:08:02,490 --> 00:08:07,350
trace and somewhere in the middle you

00:08:04,170 --> 00:08:09,810
have this nonsense Java function name

00:08:07,350 --> 00:08:11,790
that has a package in it there's there's

00:08:09,810 --> 00:08:13,920
a lot of stuff that can happen trying to

00:08:11,790 --> 00:08:18,420
troubleshoot this there's little to no

00:08:13,920 --> 00:08:21,090
documentation feel like the objective

00:08:18,420 --> 00:08:23,340
C++ documentation was removed or

00:08:21,090 --> 00:08:25,290
something cuz I don't really find much

00:08:23,340 --> 00:08:28,500
about it online other than Stack

00:08:25,290 --> 00:08:30,150
Overflow and whatnot and it just it

00:08:28,500 --> 00:08:31,740
looks gross we're we're nice tidy

00:08:30,150 --> 00:08:35,610
programmers we don't we don't want to

00:08:31,740 --> 00:08:39,270
deal with gross code so so we don't want

00:08:35,610 --> 00:08:41,250
to lose heart yet though so we have this

00:08:39,270 --> 00:08:43,590
architecture with a sprinkling Bruce

00:08:41,250 --> 00:08:47,310
languages and what we're going to do is

00:08:43,590 --> 00:08:48,579
we're going to remove them from a

00:08:47,310 --> 00:08:50,110
situation

00:08:48,579 --> 00:08:53,199
they'll they'll still be there but we're

00:08:50,110 --> 00:08:59,579
gonna generate them automatically using

00:08:53,199 --> 00:09:02,019
a cool tool called G so just for like a

00:08:59,579 --> 00:09:04,420
developer team standpoint this is a lot

00:09:02,019 --> 00:09:05,920
more appealing because all the languages

00:09:04,420 --> 00:09:06,939
are going to use our languages that

00:09:05,920 --> 00:09:09,670
people actually want to put on the

00:09:06,939 --> 00:09:12,930
resume I don't know about you but I

00:09:09,670 --> 00:09:12,930
wouldn't put the other two on my resume

00:09:13,800 --> 00:09:20,110
okay so let's go over Jeannie well first

00:09:16,930 --> 00:09:22,329
of all any questions so far

00:09:20,110 --> 00:09:25,560
okay so let's go over Jeannie and what

00:09:22,329 --> 00:09:31,660
it does and how we can help us

00:09:25,560 --> 00:09:33,939
what is it takes an a this is a

00:09:31,660 --> 00:09:36,879
configuration file called a IDL

00:09:33,939 --> 00:09:38,829
interface definition languages we can

00:09:36,879 --> 00:09:43,509
define interfaces in our genomes like

00:09:38,829 --> 00:09:45,459
I've been as it may be the main reason

00:09:43,509 --> 00:09:47,709
we want it is it generates interfaces

00:09:45,459 --> 00:09:48,399
for us for each of the languages that we

00:09:47,709 --> 00:09:51,490
care about

00:09:48,399 --> 00:09:53,529
objective-c Java C++ it gives us a

00:09:51,490 --> 00:09:55,149
interface for that that we just fill in

00:09:53,529 --> 00:09:56,170
the methods and that's all we need to

00:09:55,149 --> 00:10:01,839
worry about as far as our language

00:09:56,170 --> 00:10:03,040
bridge is concerned and it automatically

00:10:01,839 --> 00:10:04,689
generates all the stuff that happens

00:10:03,040 --> 00:10:10,899
between those so we don't even we don't

00:10:04,689 --> 00:10:15,389
ever have to see it so Genie deals with

00:10:10,899 --> 00:10:15,389
three types kind of a higher level

00:10:16,350 --> 00:10:21,850
things like the top-level types of

00:10:20,009 --> 00:10:26,470
things that will generate so

00:10:21,850 --> 00:10:28,569
enumerations records and records can

00:10:26,470 --> 00:10:31,019
have name properties everything you

00:10:28,569 --> 00:10:36,819
would expect boolean rules and strings

00:10:31,019 --> 00:10:38,470
lists Maps and other records as well so

00:10:36,819 --> 00:10:42,879
you can get a pretty complicated data

00:10:38,470 --> 00:10:44,529
structure what you need generalizes

00:10:42,879 --> 00:10:46,449
interfaces which is mostly what we're

00:10:44,529 --> 00:10:48,250
interested in so this is going to allow

00:10:46,449 --> 00:10:51,279
us to send methods back and forth

00:10:48,250 --> 00:10:53,470
between these three languages you can

00:10:51,279 --> 00:10:56,679
add constants as well the main thing

00:10:53,470 --> 00:10:57,850
missing here is properties we're not

00:10:56,679 --> 00:10:59,410
going to be we're not going to really be

00:10:57,850 --> 00:11:01,430
able to build an interface with

00:10:59,410 --> 00:11:03,620
properties unless we go

00:11:01,430 --> 00:11:06,080
methods to get inside though you can get

00:11:03,620 --> 00:11:08,330
around that by using private members and

00:11:06,080 --> 00:11:14,150
your various implementations of the

00:11:08,330 --> 00:11:16,130
interface and so the your methods can

00:11:14,150 --> 00:11:18,260
have arguments or entering values of all

00:11:16,130 --> 00:11:22,100
the same types that the record scan the

00:11:18,260 --> 00:11:24,650
record properties quick little

00:11:22,100 --> 00:11:28,010
clarification so there's another tool

00:11:24,650 --> 00:11:29,270
that deals with IDL files and generating

00:11:28,010 --> 00:11:31,310
code for all these languages called

00:11:29,270 --> 00:11:33,710
protobuf it's all I'm gonna kind of

00:11:31,310 --> 00:11:37,310
compare these two things real quick so

00:11:33,710 --> 00:11:39,980
they have different purposes overall

00:11:37,310 --> 00:11:41,560
Jeanie's really focused on iPhone

00:11:39,980 --> 00:11:43,910
Android development

00:11:41,560 --> 00:11:46,040
it was just languages of all they're

00:11:43,910 --> 00:11:47,900
part above has so what's a whole ton

00:11:46,040 --> 00:11:49,430
other languages PHP Ruby and it's more

00:11:47,900 --> 00:11:51,800
focused on the data structures

00:11:49,430 --> 00:11:54,800
themselves so they both do data

00:11:51,800 --> 00:11:56,990
structures part of F actually generates

00:11:54,800 --> 00:12:00,170
the getters and setters for you so you

00:11:56,990 --> 00:12:02,360
kind of get that member feel but it's

00:12:00,170 --> 00:12:06,140
not an interface though so you can't you

00:12:02,360 --> 00:12:07,640
can't make methods with protobuf genie

00:12:06,140 --> 00:12:11,650
that's primarily what we're gonna be

00:12:07,640 --> 00:12:11,650
doing is calling methods back and forth

00:12:20,140 --> 00:12:29,810
so first example again I'm trying to

00:12:27,220 --> 00:12:33,830
make the functionality as minimal as

00:12:29,810 --> 00:12:35,390
possible just to keep things simple we

00:12:33,830 --> 00:12:37,490
would there's no reason you would need

00:12:35,390 --> 00:12:40,550
to do all this to say hello world app

00:12:37,490 --> 00:12:42,920
but we're gonna do it but you can kind

00:12:40,550 --> 00:12:46,790
of extrapolate this architecture into a

00:12:42,920 --> 00:12:50,930
more complicated app so we're our goals

00:12:46,790 --> 00:12:54,010
here we're gonna build the hello world

00:12:50,930 --> 00:12:54,010
logic and C++

00:12:55,190 --> 00:13:01,430
I'm gonna get the class for an

00:12:56,600 --> 00:13:03,170
objective-c and call the method we're

00:13:01,430 --> 00:13:05,389
gonna click and it the class from Java

00:13:03,170 --> 00:13:16,389
and call the same method so we use the

00:13:05,389 --> 00:13:20,629
library get a hello world architecture

00:13:16,389 --> 00:13:23,810
start with iPhone get the iPhone UI -

00:13:20,629 --> 00:13:28,220
we're going to automatically generate

00:13:23,810 --> 00:13:31,850
the C++ bridge when I pass through the

00:13:28,220 --> 00:13:35,720
bridge we can call a function on V C++

00:13:31,850 --> 00:13:39,050
library Android the same thing j'ni

00:13:35,720 --> 00:13:41,389
bridge C++ library so the important

00:13:39,050 --> 00:13:41,600
thing here is the arrow is one way right

00:13:41,389 --> 00:13:44,029
now

00:13:41,600 --> 00:13:47,779
all we're doing is from objective-c

00:13:44,029 --> 00:13:52,310
enough Java calling a C++ method

00:13:47,779 --> 00:13:59,120
we're not C++ is not calling Java or

00:13:52,310 --> 00:14:01,040
Objective C yet one of the clarify cuz

00:13:59,120 --> 00:14:04,310
I'm gonna use the word interface a lot

00:14:01,040 --> 00:14:06,439
and that's not it's more of a high-level

00:14:04,310 --> 00:14:09,410
architecture kind of perspective it's

00:14:06,439 --> 00:14:11,300
not what they actually are so when I say

00:14:09,410 --> 00:14:14,029
C++ interface I'm talking about an

00:14:11,300 --> 00:14:16,819
abstract class class with virtual

00:14:14,029 --> 00:14:20,180
methods it's the only way I think got

00:14:16,819 --> 00:14:21,949
the virtual keyword equals 0 kind of a

00:14:20,180 --> 00:14:24,430
typical interface sort of situation let

00:14:21,949 --> 00:14:28,910
us see flows post developer would expect

00:14:24,430 --> 00:14:33,500
Objective C is a delegate much like a UI

00:14:28,910 --> 00:14:36,500
tableview delegate and UI tableview

00:14:33,500 --> 00:14:38,449
datasource again something that an

00:14:36,500 --> 00:14:42,620
objective-c developer is really used to

00:14:38,449 --> 00:14:47,290
seeing finally Java is another abstract

00:14:42,620 --> 00:14:49,670
class so when you extend that class

00:14:47,290 --> 00:14:52,160
Android studio is going to complain and

00:14:49,670 --> 00:14:56,029
want us to implement all the abstract

00:14:52,160 --> 00:14:59,079
methods so for now I'm just going to

00:14:56,029 --> 00:14:59,079
call all those things interfaces

00:14:59,950 --> 00:15:07,970
so let's get into our first IDL file

00:15:04,780 --> 00:15:12,530
pretty pretty simple syntax looks

00:15:07,970 --> 00:15:28,580
vaguely like JSON or something a couple

00:15:12,530 --> 00:15:33,170
of notes here so we're so we're creating

00:15:28,580 --> 00:15:35,390
an interface that plus C indicates what

00:15:33,170 --> 00:15:37,460
language we want the interface to exist

00:15:35,390 --> 00:15:43,300
in so right now we're just telling it to

00:15:37,460 --> 00:15:46,490
build a C++ interface this create method

00:15:43,300 --> 00:15:49,610
we it's kind of it's getting around lack

00:15:46,490 --> 00:15:51,680
of constructors kind of so as a static

00:15:49,610 --> 00:15:55,450
method that returns itself that we're

00:15:51,680 --> 00:15:55,450
gonna call from addictive C in Java

00:15:55,570 --> 00:16:01,070
finally our method it's gonna we're

00:15:58,400 --> 00:16:03,890
going to call from both Objective C and

00:16:01,070 --> 00:16:09,230
Java or it turns a string pretty

00:16:03,890 --> 00:16:11,840
straightforward now the fun part we're

00:16:09,230 --> 00:16:13,070
gonna run Jeannie Giannini it's a

00:16:11,840 --> 00:16:16,130
command line tool

00:16:13,070 --> 00:16:17,900
just open up console type in the command

00:16:16,130 --> 00:16:19,370
I usually pick a shell script because

00:16:17,900 --> 00:16:21,410
there's actually a lot more arguments

00:16:19,370 --> 00:16:23,660
evolved you can specify all kinds of

00:16:21,410 --> 00:16:26,510
things like what directories you want

00:16:23,660 --> 00:16:28,520
the different languages to go in what if

00:16:26,510 --> 00:16:31,880
you want camel case or snake case that

00:16:28,520 --> 00:16:33,590
kind of thing and more importantly you

00:16:31,880 --> 00:16:36,170
can specify namespaces you can specify

00:16:33,590 --> 00:16:38,690
the java package name getting specify

00:16:36,170 --> 00:16:41,840
the objective-c kind of prefix that's

00:16:38,690 --> 00:16:45,170
common with Objective C okay so we run

00:16:41,840 --> 00:16:47,660
this script and what do we get we get

00:16:45,170 --> 00:16:50,180
her bridge code it goes in a directory

00:16:47,660 --> 00:16:52,700
we're never gonna look at it it can just

00:16:50,180 --> 00:16:53,780
stay there and the one thing they do

00:16:52,700 --> 00:16:57,730
care about is is going to generate the

00:16:53,780 --> 00:16:57,730
C++ interface there you have to implode

00:17:00,940 --> 00:17:07,700
quick Cody slide okay so on the left is

00:17:04,310 --> 00:17:09,290
the auto-generated interface so you can

00:17:07,700 --> 00:17:12,110
see the virtual methods that we have to

00:17:09,290 --> 00:17:17,900
implement the kind of

00:17:12,110 --> 00:17:21,390
the so our implementation files the

00:17:17,900 --> 00:17:23,610
header imports that interface implements

00:17:21,390 --> 00:17:29,150
it and declares we're actually going to

00:17:23,610 --> 00:17:33,270
implement the world the implemented the

00:17:29,150 --> 00:17:35,010
CPP file has a couple things going on

00:17:33,270 --> 00:17:36,140
and so it has it implements the method

00:17:35,010 --> 00:17:38,370
hello from C++

00:17:36,140 --> 00:17:40,590
we're cool there and also has that

00:17:38,370 --> 00:17:44,760
create method it's a little strange

00:17:40,590 --> 00:17:46,890
because it adds it to the interface but

00:17:44,760 --> 00:17:49,200
I can't really explain how all that

00:17:46,890 --> 00:17:51,990
works but it does work and that's that's

00:17:49,200 --> 00:18:02,100
the thing that will call from Java and

00:17:51,990 --> 00:18:04,760
objective-c okay so now we're in iPhone

00:18:02,100 --> 00:18:08,550
world and this is our view controller

00:18:04,760 --> 00:18:11,250
the controller is kind of the thing that

00:18:08,550 --> 00:18:14,070
represents each view and more where a

00:18:11,250 --> 00:18:15,390
lot of your logic exists for all kinds

00:18:14,070 --> 00:18:17,820
of things

00:18:15,390 --> 00:18:21,810
the viewdidload that's kind of the init

00:18:17,820 --> 00:18:27,860
method up there at the top we so the HW

00:18:21,810 --> 00:18:31,410
CPP API H is also a class generate by G

00:18:27,860 --> 00:18:33,960
it is a full-blown objective-c class and

00:18:31,410 --> 00:18:39,210
we can do it behaves exactly like we

00:18:33,960 --> 00:18:40,020
would expect so we have a a private

00:18:39,210 --> 00:18:42,450
property for it

00:18:40,020 --> 00:18:45,060
and the viewdidload we create it and

00:18:42,450 --> 00:18:49,940
then we call github or go get hello

00:18:45,060 --> 00:18:53,730
world and send it to the console Java

00:18:49,940 --> 00:18:55,200
similar situation we don't have to

00:18:53,730 --> 00:18:59,400
import anything because it's in the our

00:18:55,200 --> 00:19:01,320
hello world package to you which we

00:18:59,400 --> 00:19:03,510
would convey configured in our Genie

00:19:01,320 --> 00:19:05,690
commands I didn't show that but that's

00:19:03,510 --> 00:19:08,970
that's what that would end up doing

00:19:05,690 --> 00:19:11,910
private variable for the API and then

00:19:08,970 --> 00:19:18,660
our on create method which is similar to

00:19:11,910 --> 00:19:21,930
the objective you see we create the API

00:19:18,660 --> 00:19:24,530
and then call up Godot world and should

00:19:21,930 --> 00:19:24,530
go out to the console

00:19:26,169 --> 00:19:34,130
how's everyone feeling about that so far

00:19:29,480 --> 00:19:36,799
so good okay okay so these examples are

00:19:34,130 --> 00:19:40,250
kind of build on each other and I'm

00:19:36,799 --> 00:19:45,409
gonna void repeating any of that so let

00:19:40,250 --> 00:19:48,679
me show you the new things from now okay

00:19:45,409 --> 00:19:53,600
so example two our goal here is going to

00:19:48,679 --> 00:19:57,769
be to do to access this bridge and logic

00:19:53,600 --> 00:20:01,460
in Java and objective-c from C++ this

00:19:57,769 --> 00:20:03,769
comes up a lot and the example we're

00:20:01,460 --> 00:20:07,070
going to use here is Android and iOS

00:20:03,769 --> 00:20:09,320
both have a separate API for setting a

00:20:07,070 --> 00:20:12,080
quick and dirty user preference just a

00:20:09,320 --> 00:20:13,700
key value pair different data types that

00:20:12,080 --> 00:20:16,039
kind of thing we're gonna store a string

00:20:13,700 --> 00:20:23,659
or no we're gonna retrieve a string from

00:20:16,039 --> 00:20:26,240
Objective C and Java so recap call a

00:20:23,659 --> 00:20:29,690
function from call a Java function from

00:20:26,240 --> 00:20:37,490
C++ call an objective-c function from

00:20:29,690 --> 00:20:39,350
C++ so what's that gonna look like it

00:20:37,490 --> 00:20:42,529
starts out pretty similar to our hello

00:20:39,350 --> 00:20:46,490
world the UI passes through the bridge

00:20:42,529 --> 00:20:51,350
and calls off a curb and it instantiates

00:20:46,490 --> 00:20:53,720
the C++ class that kind of thing so when

00:20:51,350 --> 00:20:57,649
our library wants to go back over the

00:20:53,720 --> 00:21:00,309
bridge it's going to go through the

00:20:57,649 --> 00:21:04,940
objective-c interface or the delegate

00:21:00,309 --> 00:21:08,570
and also job interface so these are

00:21:04,940 --> 00:21:11,169
things that Genie is going to render for

00:21:08,570 --> 00:21:17,510
us and we just implement it in our apps

00:21:11,169 --> 00:21:21,500
verbally or receive it so how do we

00:21:17,510 --> 00:21:24,559
actually do that so previously in

00:21:21,500 --> 00:21:26,570
objective-c in Java we instantiate

00:21:24,559 --> 00:21:28,010
basically instantiated a C++ class

00:21:26,570 --> 00:21:31,100
that's not really a great way to say it

00:21:28,010 --> 00:21:34,540
but from from our perception that's what

00:21:31,100 --> 00:21:36,730
we did or can't do that

00:21:34,540 --> 00:21:41,170
backwards right so if we're in C++ we

00:21:36,730 --> 00:21:42,100
can't create a Java object because we

00:21:41,170 --> 00:21:46,900
don't we don't know if we're gonna be in

00:21:42,100 --> 00:21:52,360
Android or iPhone so we do something

00:21:46,900 --> 00:21:54,640
with it and I call a listener so this is

00:21:52,360 --> 00:22:00,240
from javis perspective we create a

00:21:54,640 --> 00:22:04,390
listener object first we pass it to our

00:22:00,240 --> 00:22:07,210
C++ object with create method so

00:22:04,390 --> 00:22:10,830
listener is now there's no an argument

00:22:07,210 --> 00:22:14,920
listener that we instantiated in Java

00:22:10,830 --> 00:22:16,570
and finally we in C++ on our create

00:22:14,920 --> 00:22:18,550
method we would save that listener as a

00:22:16,570 --> 00:22:20,710
private variable and throughout that

00:22:18,550 --> 00:22:25,240
whole our whole API class we can call

00:22:20,710 --> 00:22:26,680
our get preferences function and C++

00:22:25,240 --> 00:22:29,970
doesn't care if it's Java or Objective C

00:22:26,680 --> 00:22:29,970
it works out really well

00:22:32,130 --> 00:22:36,970
so let's write our ID I'll file this

00:22:34,780 --> 00:22:39,940
time it's a few different things look

00:22:36,970 --> 00:22:43,870
out here we have two interfaces first of

00:22:39,940 --> 00:22:47,530
all so we've added an argument to our

00:22:43,870 --> 00:22:53,350
create that actually the value which is

00:22:47,530 --> 00:22:55,450
our listener and or listener now has

00:22:53,350 --> 00:22:57,100
different we're talking do you need to

00:22:55,450 --> 00:22:58,600
make it in different languages so we're

00:22:57,100 --> 00:23:05,020
telling it to make an interface in both

00:22:58,600 --> 00:23:06,660
Objective C and Java slightly run our DG

00:23:05,020 --> 00:23:10,900
Jeannie can add again the fun part and

00:23:06,660 --> 00:23:14,410
where we go get abridge good goes in a

00:23:10,900 --> 00:23:17,310
folder never look at it we get our API

00:23:14,410 --> 00:23:19,960
interface again for C++ and now we get

00:23:17,310 --> 00:23:24,090
Java interface and Objective C interface

00:23:19,960 --> 00:23:24,090
from the Preferences listener

00:23:27,239 --> 00:23:35,979
ok so now we're going to implement this

00:23:29,769 --> 00:23:39,789
in Objective C above so we can port the

00:23:35,979 --> 00:23:42,749
listener interface or we create a NS

00:23:39,789 --> 00:23:45,460
object that conforms to that delegate

00:23:42,749 --> 00:23:48,729
and then down below an implementation we

00:23:45,460 --> 00:23:51,820
just we we implement the get preferences

00:23:48,729 --> 00:23:54,220
function so below that the NS user

00:23:51,820 --> 00:23:57,639
defaults that's the iOS way to get that

00:23:54,220 --> 00:23:59,529
quick and dirty key value pair so then

00:23:57,639 --> 00:24:12,249
we just we got to get the value in

00:23:59,529 --> 00:24:13,389
return so jonald pretty similar gonna

00:24:12,249 --> 00:24:17,619
have to import anything because it's the

00:24:13,389 --> 00:24:20,470
package so we're extending that prefs

00:24:17,619 --> 00:24:24,570
listener which is a Java interface and

00:24:20,470 --> 00:24:27,820
our implementation implements get proof

00:24:24,570 --> 00:24:30,309
so the shared preferences or get shared

00:24:27,820 --> 00:24:32,859
preferences is javo'''s way of sorry

00:24:30,309 --> 00:24:37,479
androids way of getting a quick and

00:24:32,859 --> 00:24:40,029
dirty key value pair so we get that

00:24:37,479 --> 00:24:43,059
return it we're done there's the app

00:24:40,029 --> 00:24:44,710
context is another thing for there you

00:24:43,059 --> 00:24:47,619
have to deal with for Android since

00:24:44,710 --> 00:24:50,139
we're not extending an activity but you

00:24:47,619 --> 00:24:55,269
can just pass in a contacts and call all

00:24:50,139 --> 00:24:59,320
the methods you need okay so that was

00:24:55,269 --> 00:25:02,039
the user preferences example questions

00:24:59,320 --> 00:25:02,039
anyone

00:25:05,540 --> 00:25:15,950
okay sorry there's one more slide okay

00:25:09,960 --> 00:25:15,950
so su + + interface now has an argument

00:25:17,030 --> 00:25:23,670
so our crate method takes a the

00:25:20,900 --> 00:25:26,250
interface argument so it could be

00:25:23,670 --> 00:25:29,610
Objective C or Java it passes it on to

00:25:26,250 --> 00:25:31,679
its constructor we save it and then

00:25:29,610 --> 00:25:33,270
later we can call get preferences and we

00:25:31,679 --> 00:25:42,750
can do that pretty much anywhere in this

00:25:33,270 --> 00:25:48,150
class so this is just showing creating

00:25:42,750 --> 00:25:51,300
with a object real quick so very similar

00:25:48,150 --> 00:25:54,960
to before except with the c++ create

00:25:51,300 --> 00:25:57,450
method but now as we instantiate either

00:25:54,960 --> 00:26:00,809
an objective c or java object to send to

00:25:57,450 --> 00:26:03,690
c++ it's worth noting that we're using

00:26:00,809 --> 00:26:07,050
holic in it and new so because we're a

00:26:03,690 --> 00:26:08,790
initiative initializing objective c from

00:26:07,050 --> 00:26:10,050
ID ecstasy and java from java so we can

00:26:08,790 --> 00:26:17,910
just do it the normal way we could

00:26:10,050 --> 00:26:19,350
always do it okay next is simple now

00:26:17,910 --> 00:26:22,679
we're gonna get more into something that

00:26:19,350 --> 00:26:26,190
might actually want to build we went to

00:26:22,679 --> 00:26:36,179
a pulmonic allow likes on all of our

00:26:26,190 --> 00:26:40,170
platforms so we're gonna add TVs here so

00:26:36,179 --> 00:26:44,420
we're gonna do I pad iPhone Android and

00:26:40,170 --> 00:26:44,420
then Android TV and Apple TV

00:26:46,190 --> 00:26:52,920
so let's we're gonna kind of pretend

00:26:51,030 --> 00:26:55,740
that we have a really complicated app

00:26:52,920 --> 00:26:59,280
API and at some point we do something

00:26:55,740 --> 00:27:01,350
like we call our Web API it returns some

00:26:59,280 --> 00:27:04,920
user data and we set some values like

00:27:01,350 --> 00:27:07,320
you know is are they a subscriber what

00:27:04,920 --> 00:27:08,760
what tier of subscription are they that

00:27:07,320 --> 00:27:11,790
kind of thing are they paid are they

00:27:08,760 --> 00:27:13,730
free whatever kind of something we would

00:27:11,790 --> 00:27:17,620
want to tell Google Analytics as a

00:27:13,730 --> 00:27:20,950
dimension so two separate users

00:27:17,620 --> 00:27:24,370
and this logic is so I've been somewhere

00:27:20,950 --> 00:27:26,440
in C++ so we need C++ to tell Google

00:27:24,370 --> 00:27:30,850
likes a custom dimension or something

00:27:26,440 --> 00:27:34,710
like that we're gonna use Google's

00:27:30,850 --> 00:27:37,000
libraries if we can so there's already a

00:27:34,710 --> 00:27:38,350
Android library for Google Analytics and

00:27:37,000 --> 00:27:42,669
an objective-c library for Google

00:27:38,350 --> 00:27:44,679
Analytics and finally the reason for

00:27:42,669 --> 00:27:46,750
this example is so I can demonstrate a

00:27:44,679 --> 00:27:53,470
use case for generating all three

00:27:46,750 --> 00:27:57,490
interfaces so let's take a first stab at

00:27:53,470 --> 00:28:00,510
this architecture Android we're going to

00:27:57,490 --> 00:28:04,720
separate the TV UI from the Android UI

00:28:00,510 --> 00:28:08,500
across the bridge and talk to our AP app

00:28:04,720 --> 00:28:09,789
library give me it's saying that this

00:28:08,500 --> 00:28:10,690
app library is not going to change its

00:28:09,789 --> 00:28:11,520
going to be the same for all these

00:28:10,690 --> 00:28:15,460
things

00:28:11,520 --> 00:28:17,700
it's our C++ library I'm gonna go back

00:28:15,460 --> 00:28:21,809
across the bridge to our Java interface

00:28:17,700 --> 00:28:25,990
which is going to talk to Google's

00:28:21,809 --> 00:28:28,779
official library all right pretty cool

00:28:25,990 --> 00:28:31,990
so far so let's try to do the same thing

00:28:28,779 --> 00:28:35,110
with the Apple TV and the iPhone and

00:28:31,990 --> 00:28:38,289
iPad so separate tablet and phone UI

00:28:35,110 --> 00:28:42,159
from the TV UI across our bridge talk to

00:28:38,289 --> 00:28:44,380
C++ come back a cross the bridge to our

00:28:42,159 --> 00:28:45,730
objective-c interface also the Java

00:28:44,380 --> 00:28:47,409
interface in the objective-c interface

00:28:45,730 --> 00:28:51,929
when we implement those those could be

00:28:47,409 --> 00:28:54,340
the same on both the TVs and the iPhone

00:28:51,929 --> 00:28:58,960
and now we're gonna talk to your Google

00:28:54,340 --> 00:29:00,970
annex for iOS but there's a problem if

00:28:58,960 --> 00:29:03,250
you try to import Google ionics for iOS

00:29:00,970 --> 00:29:05,529
into L TV you will get an error you

00:29:03,250 --> 00:29:08,529
can't publish because of it doesn't

00:29:05,529 --> 00:29:11,640
support UI webview so now we have to

00:29:08,529 --> 00:29:13,779
kind of think of something else to do

00:29:11,640 --> 00:29:17,380
first thing we're gonna try is just keep

00:29:13,779 --> 00:29:19,809
everything in C++ so got all our you

00:29:17,380 --> 00:29:22,600
eyes crossing the bridge talk to our C++

00:29:19,809 --> 00:29:25,600
library a C++ library I can just talk to

00:29:22,600 --> 00:29:27,309
Google there's a there's a reporting API

00:29:25,600 --> 00:29:30,039
you just send request to you and it'll

00:29:27,309 --> 00:29:31,340
blog everything and you can you can send

00:29:30,039 --> 00:29:36,080
it all kinds of parameters like

00:29:31,340 --> 00:29:37,759
opening your Java her version you can

00:29:36,080 --> 00:29:41,570
set custom dimensions you can do pretty

00:29:37,759 --> 00:29:43,789
much not quite everything but a lot of

00:29:41,570 --> 00:29:45,950
what you might want to do I think it was

00:29:43,789 --> 00:29:48,049
originally intended for things like

00:29:45,950 --> 00:29:52,730
raspberry pies and stuff that don't have

00:29:48,049 --> 00:29:55,850
a web browser so this makes programmer

00:29:52,730 --> 00:29:58,070
Steven pretty happy you're reusing

00:29:55,850 --> 00:30:01,190
everything everything's talking the same

00:29:58,070 --> 00:30:03,049
way but it doesn't make businessman

00:30:01,190 --> 00:30:06,350
Steven happy so when you go into Google

00:30:03,049 --> 00:30:07,580
Analytics and start poking around at you

00:30:06,350 --> 00:30:12,499
know device information and that kind of

00:30:07,580 --> 00:30:15,200
stuff it's not some stuffs missing so we

00:30:12,499 --> 00:30:21,080
want to go back and try to use the

00:30:15,200 --> 00:30:22,809
Google libraries wherever we can so

00:30:21,080 --> 00:30:25,730
we're going to combine the two things

00:30:22,809 --> 00:30:29,539
Android Android was always fine so keep

00:30:25,730 --> 00:30:32,029
it exactly like it was Apple side of

00:30:29,539 --> 00:30:34,220
things so I've got an iPad separated

00:30:32,029 --> 00:30:35,419
from TV they're both crossing the roads

00:30:34,220 --> 00:30:40,100
it's the same library but I just

00:30:35,419 --> 00:30:42,139
separate them for just aesthetics so

00:30:40,100 --> 00:30:46,639
iPhone iPad back across the bridge

00:30:42,139 --> 00:30:50,809
interface gnu/linux for iOS library and

00:30:46,639 --> 00:30:53,690
now Apple TV what would you there we

00:30:50,809 --> 00:30:55,299
eventually get to the reporting API we

00:30:53,690 --> 00:30:58,309
were just talking about what the C++

00:30:55,299 --> 00:31:01,700
solution but now we've included another

00:30:58,309 --> 00:31:03,559
interface so in between our library and

00:31:01,700 --> 00:31:06,169
the API we're going to build out an

00:31:03,559 --> 00:31:10,820
interface that matches all the other

00:31:06,169 --> 00:31:12,110
interfaces and as you guessed Jeannie is

00:31:10,820 --> 00:31:14,840
gonna do this for us they'll have all

00:31:12,110 --> 00:31:16,610
the same methods and as far as C++

00:31:14,840 --> 00:31:21,559
concern is concerned they're all going

00:31:16,610 --> 00:31:25,700
to be the same type of object so what

00:31:21,559 --> 00:31:27,980
does the IDL file looks like for this so

00:31:25,700 --> 00:31:32,299
down below we have the API that we've

00:31:27,980 --> 00:31:37,190
been creating there one difference here

00:31:32,299 --> 00:31:39,049
we see so the top part so our listener

00:31:37,190 --> 00:31:40,279
now has all three objects so it's going

00:31:39,049 --> 00:31:42,320
to create a simple closing our first

00:31:40,279 --> 00:31:44,630
objective CF interface and a Java

00:31:42,320 --> 00:31:47,810
interface they're all going to come form

00:31:44,630 --> 00:31:50,210
to this interface which has the overly

00:31:47,810 --> 00:31:55,520
simplified tracks for you takes a screen

00:31:50,210 --> 00:31:59,210
name and then our interface now has wait

00:31:55,520 --> 00:32:01,820
okay sorry oh yeah so the listener we

00:31:59,210 --> 00:32:04,190
don't actually need that create method

00:32:01,820 --> 00:32:06,950
weirdness because what's going to happen

00:32:04,190 --> 00:32:09,290
is we're going to instantiate the C++

00:32:06,950 --> 00:32:11,440
object in C++ so we can just do it

00:32:09,290 --> 00:32:14,600
normal way we would always do it

00:32:11,440 --> 00:32:18,950
finally you notice our API has two

00:32:14,600 --> 00:32:21,080
different create methods now this is we

00:32:18,950 --> 00:32:24,080
can't really do overloading so we kind

00:32:21,080 --> 00:32:27,470
of have to rename things so one takes an

00:32:24,080 --> 00:32:30,230
argument one does not so the top one

00:32:27,470 --> 00:32:32,480
would be for iPhone Android and whatnot

00:32:30,230 --> 00:32:37,580
the bottom line would be Apple TV which

00:32:32,480 --> 00:32:41,360
is going to default to two plus one or

00:32:37,580 --> 00:32:45,290
command similar to last time so bridge

00:32:41,360 --> 00:32:48,800
could never look at it again c-plus well

00:32:45,290 --> 00:32:50,840
center vise that we implement and then

00:32:48,800 --> 00:32:53,300
finally for our listeners we have three

00:32:50,840 --> 00:32:54,980
different listeners which always have

00:32:53,300 --> 00:33:01,910
the truck screen method that we have to

00:32:54,980 --> 00:33:05,830
implement on each platform so right now

00:33:01,910 --> 00:33:08,570
let's this is one of the C++ API

00:33:05,830 --> 00:33:12,500
implementation and how we handle the

00:33:08,570 --> 00:33:16,310
listener so now we have two of the

00:33:12,500 --> 00:33:19,580
create methods that return the API

00:33:16,310 --> 00:33:24,380
itself the top one is for Apple TV so we

00:33:19,580 --> 00:33:28,130
instantiate our listener as a shared

00:33:24,380 --> 00:33:32,120
pointer pass that to our second create

00:33:28,130 --> 00:33:36,110
function create with listener and that

00:33:32,120 --> 00:33:38,090
in our constructor error saves the

00:33:36,110 --> 00:33:39,590
listener like we did before and now that

00:33:38,090 --> 00:33:42,760
listen our trap screen can happen

00:33:39,590 --> 00:33:42,760
anywhere in that API

00:33:47,450 --> 00:33:52,250
and it wasn't about Google Analytics

00:33:53,060 --> 00:34:02,070
okay so this is gonna be the last

00:33:57,780 --> 00:34:03,540
example so right now we're so far we've

00:34:02,070 --> 00:34:07,250
only talked about interfaces and methods

00:34:03,540 --> 00:34:09,270
yeah talking to each other with methods

00:34:07,250 --> 00:34:10,860
map pans is going to talk more about

00:34:09,270 --> 00:34:13,860
data structures which we can also do a

00:34:10,860 --> 00:34:19,800
genie thankfully it's a lot more simple

00:34:13,860 --> 00:34:21,330
so our goals here are we're gonna arts

00:34:19,800 --> 00:34:24,870
architect the data structure with you

00:34:21,330 --> 00:34:28,100
but in our IDL file we're going to pass

00:34:24,870 --> 00:34:30,750
data objects between C++ and Objective C

00:34:28,100 --> 00:34:39,960
and pass data objects between seats will

00:34:30,750 --> 00:34:41,909
close in Java so our architecture we

00:34:39,960 --> 00:34:43,740
don't it's pretty similar to the hello

00:34:41,909 --> 00:34:51,169
world we don't need to go back to

00:34:43,740 --> 00:34:54,629
Android or iPhone at this point IDL file

00:34:51,169 --> 00:34:57,030
so we have our API much like we did

00:34:54,629 --> 00:35:00,090
before or create and we have two methods

00:34:57,030 --> 00:35:03,420
get pins and add them get pins returns a

00:35:00,090 --> 00:35:09,300
list of pins and add pin takes an

00:35:03,420 --> 00:35:11,520
argument of a pin so down below is we

00:35:09,300 --> 00:35:12,780
haven't seen this yet this is Jeannie's

00:35:11,520 --> 00:35:15,900
other one of doing these other types

00:35:12,780 --> 00:35:19,650
which is a record it's basically just a

00:35:15,900 --> 00:35:22,220
list of values and sorry names and their

00:35:19,650 --> 00:35:30,690
types so from that pin we have a label

00:35:22,220 --> 00:35:32,880
longitude and latitude oh right

00:35:30,690 --> 00:35:36,840
so record we didn't have to specify what

00:35:32,880 --> 00:35:38,820
language because no matter which method

00:35:36,840 --> 00:35:40,050
we call above get pins or head pins

00:35:38,820 --> 00:35:41,310
we're gonna need it we're going to

00:35:40,050 --> 00:35:48,230
either enter them all languages

00:35:41,310 --> 00:35:50,670
Objective C Java and C++ more commands

00:35:48,230 --> 00:35:54,150
bridge good took it away

00:35:50,670 --> 00:35:56,130
never look at it our CTL + API which

00:35:54,150 --> 00:36:00,480
have to implement

00:35:56,130 --> 00:36:03,900
different data objects so C++ is going

00:36:00,480 --> 00:36:05,280
to be a structure or struct and Java and

00:36:03,900 --> 00:36:07,170
objective-c are both going to give us

00:36:05,280 --> 00:36:09,630
objects which we can handle just like

00:36:07,170 --> 00:36:11,840
any other data objects on those

00:36:09,630 --> 00:36:11,840
platforms

00:36:12,680 --> 00:36:19,170
spare a bunch of code here and just show

00:36:15,480 --> 00:36:21,180
you what it kind of looks like creating

00:36:19,170 --> 00:36:21,600
objects in each platform so there's our

00:36:21,180 --> 00:36:26,490
struts

00:36:21,600 --> 00:36:28,590
there's our objective-c in it a data

00:36:26,490 --> 00:36:31,770
object with the arguments and Java

00:36:28,590 --> 00:36:33,630
initiating no no Jackson and back to

00:36:31,770 --> 00:36:35,850
kind of one of the good things I like

00:36:33,630 --> 00:36:37,620
about Genie is all three of these things

00:36:35,850 --> 00:36:38,310
are very familiar to these different

00:36:37,620 --> 00:36:39,930
like if you had three different

00:36:38,310 --> 00:36:42,390
developers all those things would be

00:36:39,930 --> 00:36:44,040
very familiar to them it's crazy so Doug

00:36:42,390 --> 00:36:54,120
does seal it looks like that's how you

00:36:44,040 --> 00:36:57,200
initialize things okay so now those all

00:36:54,120 --> 00:36:59,850
the exams Hey any questions no questions

00:36:57,200 --> 00:37:01,500
so I'm gonna kind of talk over some

00:36:59,850 --> 00:37:06,090
challenges I've encountered in doing

00:37:01,500 --> 00:37:08,370
this and my solutions to them and

00:37:06,090 --> 00:37:10,290
possibly maybe get feedback for you guys

00:37:08,370 --> 00:37:12,450
maybe there's better ways maybe there's

00:37:10,290 --> 00:37:13,680
something I'm not thinking of I got

00:37:12,450 --> 00:37:16,290
really tired of bullet points at this

00:37:13,680 --> 00:37:21,510
point so it's just gonna be titles me

00:37:16,290 --> 00:37:26,850
talking and some monsters from D&D right

00:37:21,510 --> 00:37:28,560
so namespaces I ran in this problem so

00:37:26,850 --> 00:37:31,770
Genie allows importing other Genie files

00:37:28,560 --> 00:37:34,650
I ran in this problem when I say like

00:37:31,770 --> 00:37:36,000
the analytics library I wanted to have

00:37:34,650 --> 00:37:38,700
that separate and use it in two

00:37:36,000 --> 00:37:40,620
different halves you would think you

00:37:38,700 --> 00:37:43,560
would want a namespace for your library

00:37:40,620 --> 00:37:46,410
I mean C++ namespace for your library a

00:37:43,560 --> 00:37:48,420
C++ game space for your Java alright

00:37:46,410 --> 00:37:50,180
sorry your your first app and a

00:37:48,420 --> 00:37:54,480
different name space for your second 1/2

00:37:50,180 --> 00:37:56,730
that didn't work out so well because

00:37:54,480 --> 00:37:59,580
when you want to start doing the

00:37:56,730 --> 00:38:01,980
listener type stuff and we use some

00:37:59,580 --> 00:38:04,970
things the different namespaces can get

00:38:01,980 --> 00:38:07,650
a little messed up so my solution was to

00:38:04,970 --> 00:38:09,509
just stick with app one namespace an app

00:38:07,650 --> 00:38:11,899
to namespace and a library

00:38:09,509 --> 00:38:14,399
just gets either namespaced it needs

00:38:11,899 --> 00:38:16,709
it's all generated automatically so it

00:38:14,399 --> 00:38:19,349
doesn't really matter it might be a

00:38:16,709 --> 00:38:26,609
better way to do that so that was one of

00:38:19,349 --> 00:38:29,009
my issues so architecture was it gets

00:38:26,609 --> 00:38:31,949
complicated when you try to separate

00:38:29,009 --> 00:38:34,679
things much like the libraries or just

00:38:31,949 --> 00:38:36,659
functionality on one app how do how do

00:38:34,679 --> 00:38:39,149
all these things talk to each other so

00:38:36,659 --> 00:38:42,089
you can have a gigantic app API with all

00:38:39,149 --> 00:38:43,649
these methods and you could constan she

00:38:42,089 --> 00:38:45,959
ate other people's clothes things inside

00:38:43,649 --> 00:38:51,839
of that but again you have that gigantic

00:38:45,959 --> 00:38:52,799
API to deal with you can also have

00:38:51,839 --> 00:38:55,549
multiple

00:38:52,799 --> 00:38:58,259
api's so in Java instead of just

00:38:55,549 --> 00:38:59,909
initiating that one API you can have two

00:38:58,259 --> 00:39:02,219
or three different ones if you could

00:38:59,909 --> 00:39:03,479
separate your app logic like that but

00:39:02,219 --> 00:39:04,949
then when it comes time for them all to

00:39:03,479 --> 00:39:08,489
talk to each other where does that

00:39:04,949 --> 00:39:12,569
responsibility go I would prefer to be

00:39:08,489 --> 00:39:15,509
in C++ but I usually end up with it most

00:39:12,569 --> 00:39:18,419
someone in C++ some in on the native

00:39:15,509 --> 00:39:22,289
side but it's it's just one challenge do

00:39:18,419 --> 00:39:24,769
you kind of have to think through first

00:39:22,289 --> 00:39:28,169
I'm like genie is awesome like kind of

00:39:24,769 --> 00:39:32,909
Architects for me but there are more

00:39:28,169 --> 00:39:35,369
problems database ideas I never liked

00:39:32,909 --> 00:39:37,769
this was kind of frustrating to me when

00:39:35,369 --> 00:39:43,409
I was using the data objects like the

00:39:37,769 --> 00:39:46,349
map pin example so if you make you're

00:39:43,409 --> 00:39:49,679
like crud interface that create record

00:39:46,349 --> 00:39:52,529
and all that kind of stuff you well the

00:39:49,679 --> 00:39:54,149
new record you don't have an ID so I

00:39:52,529 --> 00:39:55,949
ended up having to kind of do two

00:39:54,149 --> 00:39:57,389
different structures which I wasn't

00:39:55,949 --> 00:40:02,359
totally happy with one with an ID

00:39:57,389 --> 00:40:05,279
without one without an ID but I mean

00:40:02,359 --> 00:40:11,309
some possibilities are passing like null

00:40:05,279 --> 00:40:12,599
or zero or something but so multiple

00:40:11,309 --> 00:40:15,269
implementations this isn't really a

00:40:12,599 --> 00:40:18,889
problem but it is something that kind of

00:40:15,269 --> 00:40:21,740
helps so back to the Google Analytics

00:40:18,889 --> 00:40:24,690
example

00:40:21,740 --> 00:40:26,820
say you wanted different things to

00:40:24,690 --> 00:40:29,790
happen on different platforms so you're

00:40:26,820 --> 00:40:32,280
like so you need to go back to Android

00:40:29,790 --> 00:40:34,860
and iPhone to get user agent string of

00:40:32,280 --> 00:40:37,740
the browser well Apple TV you can't do

00:40:34,860 --> 00:40:39,420
that so you can create a separate and

00:40:37,740 --> 00:40:41,730
you can't even have like the way to get

00:40:39,420 --> 00:40:43,830
the user agent string is to on I

00:40:41,730 --> 00:40:47,000
objective-c instantiate a web browser

00:40:43,830 --> 00:40:49,830
you kind of get that property out of it

00:40:47,000 --> 00:40:51,720
so you can't do that on Apple TV so the

00:40:49,830 --> 00:40:53,280
solution there is to have just a

00:40:51,720 --> 00:40:54,750
separate implementation they can they

00:40:53,280 --> 00:40:57,810
can actually extend another

00:40:54,750 --> 00:41:02,040
implementation and just yeah you can

00:40:57,810 --> 00:41:03,990
have several layers there and for Apple

00:41:02,040 --> 00:41:10,170
TV the solution there was just return a

00:41:03,990 --> 00:41:13,590
string that isn't user agent string so

00:41:10,170 --> 00:41:17,130
boost file size so I mean this might be

00:41:13,590 --> 00:41:20,070
our even our motivation to use geni and

00:41:17,130 --> 00:41:21,000
a C++ in our app is so much

00:41:20,070 --> 00:41:23,730
functionality with these third-party

00:41:21,000 --> 00:41:24,900
libraries particularly boost boost is

00:41:23,730 --> 00:41:28,970
huge

00:41:24,900 --> 00:41:31,500
and I ran into this when I was trying to

00:41:28,970 --> 00:41:35,160
convert one of my apps into an Android

00:41:31,500 --> 00:41:37,170
instant app so Android instant apps you

00:41:35,160 --> 00:41:40,110
break apart your Android app into little

00:41:37,170 --> 00:41:41,880
pieces components and then in theory the

00:41:40,110 --> 00:41:43,590
user doesn't have to go through the App

00:41:41,880 --> 00:41:45,330
Store to get your app they can just

00:41:43,590 --> 00:41:47,040
click a web link they download a little

00:41:45,330 --> 00:41:48,630
piece of the app there in the app with

00:41:47,040 --> 00:41:51,090
functionality and then later they're

00:41:48,630 --> 00:41:52,410
prompted to download the whole house so

00:41:51,090 --> 00:41:54,540
one of the requirements to do this is

00:41:52,410 --> 00:41:58,350
each piece of the app has to be under

00:41:54,540 --> 00:41:59,580
five megabytes so when you get into c

00:41:58,350 --> 00:42:02,250
plus plus world with that you're already

00:41:59,580 --> 00:42:04,440
have some name so not some file size

00:42:02,250 --> 00:42:06,870
just from going to the native language

00:42:04,440 --> 00:42:08,940
and then boost on top of that was like a

00:42:06,870 --> 00:42:12,090
megabyte or two i wanted to say so that

00:42:08,940 --> 00:42:13,860
just wasn't space for it but if you're

00:42:12,090 --> 00:42:14,910
you're doing like a larger app that you

00:42:13,860 --> 00:42:23,300
don't need to worry about instant apps

00:42:14,910 --> 00:42:23,300
then probably okay so main thread

00:42:24,270 --> 00:42:29,670
arrange this just kind of calling the

00:42:26,580 --> 00:42:31,830
C++ actually a timer was a good example

00:42:29,670 --> 00:42:35,300
so calling a timer for seem so close and

00:42:31,830 --> 00:42:37,500
then timer ends in C++ goes back to

00:42:35,300 --> 00:42:39,240
iPhone and changes something on the UI

00:42:37,500 --> 00:42:40,650
you have to be careful to call things

00:42:39,240 --> 00:43:00,390
asynchronously and not on the main

00:42:40,650 --> 00:43:04,950
thread yep I don't know that I can

00:43:00,390 --> 00:43:07,140
answer that question perfectly but I so

00:43:04,950 --> 00:43:09,630
Bustos ASIO has several different

00:43:07,140 --> 00:43:12,060
writing libraries and on the kind of

00:43:09,630 --> 00:43:15,330
native iphone side of things I can speak

00:43:12,060 --> 00:43:18,270
to you can specify when you call C++

00:43:15,330 --> 00:43:19,890
what's right it's on so you wouldn't you

00:43:18,270 --> 00:43:23,040
wouldn't do that in C++ we would do it

00:43:19,890 --> 00:43:25,020
before you called C++ so it'd make sense

00:43:23,040 --> 00:43:27,960
and you can also do that around the

00:43:25,020 --> 00:43:30,090
responses from C++ so actually a better

00:43:27,960 --> 00:43:31,710
thing to do is when you get the response

00:43:30,090 --> 00:43:35,030
from C++ and you're going to change the

00:43:31,710 --> 00:43:35,030
UI then put that on a different thread

00:43:36,560 --> 00:43:45,030
okay so some additional resources case

00:43:43,770 --> 00:43:47,150
you're interested in when I get into

00:43:45,030 --> 00:43:47,150
this

00:43:47,880 --> 00:43:52,980
so getting boost into all this stuff can

00:43:50,580 --> 00:43:55,860
be a little bit of a challenge there are

00:43:52,980 --> 00:43:57,690
four OS X and iOS there is a pretty good

00:43:55,860 --> 00:43:59,270
gold script that just builds libraries

00:43:57,690 --> 00:44:03,570
and they drop them into your Xcode

00:43:59,270 --> 00:44:05,460
projects CVS at the time so this was a

00:44:03,570 --> 00:44:07,440
maybe a year and a half ago when I was

00:44:05,460 --> 00:44:09,600
trying to do all this on TV iOS there

00:44:07,440 --> 00:44:12,660
wasn't it was kind of pointing story I

00:44:09,600 --> 00:44:13,290
spent like a couple days like Thursday

00:44:12,660 --> 00:44:16,620
and Friday

00:44:13,290 --> 00:44:21,360
one week working my tail off trying to

00:44:16,620 --> 00:44:23,550
get boost into TV OS cools a laptop on

00:44:21,360 --> 00:44:26,040
Friday had my weekend came back Monday

00:44:23,550 --> 00:44:29,790
did another Google search and this thing

00:44:26,040 --> 00:44:32,760
approached so it was this was like right

00:44:29,790 --> 00:44:34,560
after Apple TV vs. 2 which is kind of

00:44:32,760 --> 00:44:37,230
one of the things I didn't know to you

00:44:34,560 --> 00:44:39,710
about why I do this is I can be on a

00:44:37,230 --> 00:44:42,090
platform as

00:44:39,710 --> 00:44:43,560
if you were doing something like xamarin

00:44:42,090 --> 00:44:47,850
you might have to wait for as a Marin to

00:44:43,560 --> 00:44:54,690
update so that last link is actually an

00:44:47,850 --> 00:44:57,510
alternate ndk for Android I have several

00:44:54,690 --> 00:45:00,360
useful things going on with it has just

00:44:57,510 --> 00:45:03,330
basically better C++ support in general

00:45:00,360 --> 00:45:07,320
although now Android has come a long way

00:45:03,330 --> 00:45:09,060
as far as our support and it's pretty

00:45:07,320 --> 00:45:10,710
easy I think even comes with boost

00:45:09,060 --> 00:45:12,600
there's a little bit more configuration

00:45:10,710 --> 00:45:20,100
you have to do but it's now all packaged

00:45:12,600 --> 00:45:21,930
up in the UK so other links there are

00:45:20,100 --> 00:45:24,000
two github repositories up there there's

00:45:21,930 --> 00:45:27,150
the official genie one and there's also

00:45:24,000 --> 00:45:29,040
this project called mx3 it's a little

00:45:27,150 --> 00:45:30,630
out of date at this point but it does

00:45:29,040 --> 00:45:32,580
have some pretty good examples of that

00:45:30,630 --> 00:45:38,670
listener architecture I was talking

00:45:32,580 --> 00:45:40,200
about and just kind of good practices in

00:45:38,670 --> 00:45:43,800
general a lot of what you saw today was

00:45:40,200 --> 00:45:46,080
based on that repository mobile C++

00:45:43,800 --> 00:45:49,440
tutorials so my website it has tutorials

00:45:46,080 --> 00:45:51,420
I want to check them out there's also a

00:45:49,440 --> 00:45:56,010
really good selection mobile C++

00:45:51,420 --> 00:45:58,230
selectional one of the drop back up guys

00:45:56,010 --> 00:46:09,150
hang out there and answer questions and

00:45:58,230 --> 00:46:12,269
all kinds of stuff so I have questions

00:46:09,150 --> 00:46:12,269
[Music]

00:46:31,610 --> 00:46:38,370
right so that as a result of the actual

00:46:36,090 --> 00:46:40,650
interface that Jenny generates for us

00:46:38,370 --> 00:46:44,100
like already has that create method with

00:46:40,650 --> 00:46:48,330
shared port so it's kind of enforced

00:46:44,100 --> 00:46:49,710
binding as to passing around other

00:46:48,330 --> 00:47:05,630
objects you could do it exactly like we

00:46:49,710 --> 00:47:05,630
do our listener right Oh a C++ object

00:47:09,350 --> 00:47:14,760
yeah so I never needed to do that but I

00:47:12,870 --> 00:47:16,170
think if you just felt if you do the

00:47:14,760 --> 00:47:17,730
same thing we did with the Google

00:47:16,170 --> 00:47:19,560
Analytics example and make the interface

00:47:17,730 --> 00:47:21,720
and all three languages you can pass it

00:47:19,560 --> 00:47:39,630
the other way as well that's a good

00:47:21,720 --> 00:47:41,010
point that I got right I remember tested

00:47:39,630 --> 00:47:42,630
the limits but it can kind of get as

00:47:41,010 --> 00:47:45,750
gnarly as you want again you have all

00:47:42,630 --> 00:47:50,540
all kinds of data types you have lists

00:47:45,750 --> 00:47:54,600
you have maps and the one weird thing is

00:47:50,540 --> 00:47:56,490
there are only one level deep so if you

00:47:54,600 --> 00:48:00,390
had a property that's another record

00:47:56,490 --> 00:48:02,820
like so you had so you had an

00:48:00,390 --> 00:48:05,250
enumeration that was a job title and he

00:48:02,820 --> 00:48:06,660
had a record that was an employee like

00:48:05,250 --> 00:48:07,920
you couldn't declare those things inside

00:48:06,660 --> 00:48:10,380
of each other that was about example

00:48:07,920 --> 00:48:13,140
like if you have another record there

00:48:10,380 --> 00:48:14,910
there's just one level deep so so we had

00:48:13,140 --> 00:48:17,280
a really complicated record it would

00:48:14,910 --> 00:48:19,640
actually be a long file with separate

00:48:17,280 --> 00:48:19,640
records

00:48:27,520 --> 00:48:41,720
right I think so that's something I got

00:48:32,480 --> 00:48:45,430
to try okay well I guess there are no

00:48:41,720 --> 00:48:45,430
more questions we can wrap up early

00:48:46,180 --> 00:48:51,660

YouTube URL: https://www.youtube.com/watch?v=ssqhz_1pPI4


