Title: CppCon 2017: Bjarne Stroustrup “Learning and Teaching Modern C++”
Publication date: 2017-09-26
Playlist: CppCon 2017
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
We – attendees at CppCon – are all teachers. Some teach for a living; many occasionally teach a course or give a lecture; essentially all give advice about how to learn C++ or how to use C++. The communities we address are incredibly diverse.

What do we teach, and why? Who do we teach, and how? What is “modern C++”? How do we avoid pushing our own mistakes onto innocent learners?

Teaching C++ implies a view of what C++ is; there is no value-neutral teaching. What teaching tools and support do we need? Consider libraries, compiler support, and tools for learners. This talk asks a lot of questions and offers a few answers. Its aim is to start a discussion, so the Q&A will be relatively long.
— 
Bjarne Stroustrup - Managing Director,, Morgan Stanley
C++: history, design, use, standardization, future; performance, reliability; software developer education; | distributed systems
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,584 --> 00:00:04,434
- I want to get to introducing our opening keynote speaker.

00:00:04,434 --> 00:00:08,201
I want to say just a few words about him.

00:00:08,201 --> 00:00:10,987
A lot of you know that Bjarne is the guy that created

00:00:10,987 --> 00:00:14,585
C++ but what a lot of people don't know is that he is very

00:00:14,585 --> 00:00:16,969
very interested in education.

00:00:16,969 --> 00:00:19,486
When he left his position as a corporate researcher

00:00:19,486 --> 00:00:20,991
to become an academic researcher

00:00:20,991 --> 00:00:23,875
he also took on the responsibility of educating

00:00:23,875 --> 00:00:27,020
undergraduate engineers in how to program.

00:00:27,020 --> 00:00:31,926
Not in how to program in C++ but how to program using C++

00:00:31,926 --> 00:00:34,378
and he took those insights and those lessons learned

00:00:34,378 --> 00:00:36,594
and turned them into a very very successful textbook,

00:00:36,594 --> 00:00:40,761
again, on how to program using C++ but how to program.

00:00:42,271 --> 00:00:45,176
And so I think that when we think about our role

00:00:45,176 --> 00:00:48,167
as engineers on a day to day basis, we spend some

00:00:48,167 --> 00:00:51,871
of our time as students and some of our time as teachers.

00:00:51,871 --> 00:00:53,889
And if we are going to be successful engineers,

00:00:53,889 --> 00:00:56,667
we are going to be successful as students and successful

00:00:56,667 --> 00:01:01,039
as teachers and so I'm very interested and very excited

00:01:01,039 --> 00:01:03,200
to hear what Bjarne has to say.

00:01:03,200 --> 00:01:05,297
I did say, however, that I have a special announcement

00:01:05,297 --> 00:01:07,530
for you today and I want to put that in, I forgot

00:01:07,530 --> 00:01:09,788
to cover that, we'll be announcing a lot of winners.

00:01:09,788 --> 00:01:12,759
I will announce the SCM challenge winners.

00:01:12,759 --> 00:01:14,851
We're gonna announce the Microsoft drawing winner

00:01:14,851 --> 00:01:17,446
and the poster competition winners.

00:01:17,446 --> 00:01:19,993
There's another winner I'm going to announce right now.

00:01:19,993 --> 00:01:21,306
This is announced today.

00:01:21,306 --> 00:01:24,587
It's not us, it's the Institute of Engineering Technology.

00:01:24,587 --> 00:01:26,996
Engineering and Technology.

00:01:26,996 --> 00:01:30,869
This is the oldest professional engineering society

00:01:30,869 --> 00:01:33,715
in the UK, possibly in the entire world.

00:01:33,715 --> 00:01:37,689
And they've announced today their Faraday award winner.

00:01:37,689 --> 00:01:40,196
The Faraday award is the most prestigious award

00:01:40,196 --> 00:01:43,765
that they give from the oldest professional engineering

00:01:43,765 --> 00:01:48,206
society, previous winners have included Maurice Wilkes,

00:01:48,206 --> 00:01:51,659
Tony Hoare, Roger Needham, Donald Knuth.

00:01:51,659 --> 00:01:54,958
Today they've announced the 2017 winner,

00:01:54,958 --> 00:01:57,759
who's Bjarne Stroustrup.

00:01:57,759 --> 00:02:00,509
(audience claps)

00:02:11,045 --> 00:02:15,212
So we thought we'd ask him to come up and say a few words.

00:02:22,086 --> 00:02:24,836
- Thanks, thanks, thanks, thanks.

00:02:29,271 --> 00:02:33,864
Very honored about that award and very pleased.

00:02:33,864 --> 00:02:38,380
If you read the list of people who have gotten that award,

00:02:38,380 --> 00:02:41,809
mostly they are not computer scientists.

00:02:41,809 --> 00:02:44,809
You see it's downright intimidating.

00:02:47,262 --> 00:02:48,095
Let's see.

00:02:51,583 --> 00:02:53,500
Am I pumping bits here?

00:03:00,870 --> 00:03:01,703
Ah, yes.

00:03:02,883 --> 00:03:06,966
So when I was asked to give this opening keynote,

00:03:08,408 --> 00:03:11,764
which I've done before, so I had a problem.

00:03:11,764 --> 00:03:14,097
It is what can I talk about?

00:03:15,307 --> 00:03:17,974
That is important to most of us,

00:03:20,004 --> 00:03:22,751
and that I know something about

00:03:22,751 --> 00:03:26,918
and that we haven't heard a million times at this conference

00:03:31,468 --> 00:03:35,222
Most of the time, we do what we always do.

00:03:35,222 --> 00:03:37,467
We do the reasonable rational thing.

00:03:37,467 --> 00:03:39,890
We don't fight any fights that can be avoided

00:03:39,890 --> 00:03:41,473
because we're busy.

00:03:42,564 --> 00:03:45,372
This is the way the world gets stuck

00:03:45,372 --> 00:03:48,773
and no progress happens, so I picked this quote

00:03:48,773 --> 00:03:50,856
from George Bernard Shaw.

00:03:52,320 --> 00:03:55,729
About how you have to do unreasonable things sometimes.

00:03:55,729 --> 00:03:59,835
And that's what lies behind a lot of what I'm going to

00:03:59,835 --> 00:04:04,002
say here, I mean, what should we do, what's not right

00:04:05,546 --> 00:04:07,916
and what can we do to fix it?

00:04:07,916 --> 00:04:12,083
This is in my opinion an immensely practical talk.

00:04:15,167 --> 00:04:17,890
And basically, I'm going to talk a little bit about

00:04:17,890 --> 00:04:21,237
teaching programming and then I'm going to go into

00:04:21,237 --> 00:04:24,404
something slightly more technical, not

00:04:25,547 --> 00:04:29,714
teaching technical, not how you organize a classroom or

00:04:31,015 --> 00:04:35,182
whether you, what particular tools you use to grade

00:04:36,407 --> 00:04:39,315
your students or find cheaters or things like that,

00:04:39,315 --> 00:04:41,817
none of that, that's not what I'm talking about.

00:04:41,817 --> 00:04:45,226
This is not really an education forum.

00:04:45,226 --> 00:04:50,073
This is a forum of professionals, people who develop stuff

00:04:50,073 --> 00:04:53,690
with a few teachers sprinkled around.

00:04:53,690 --> 00:04:57,696
So, then I'm going to go into some details

00:04:57,696 --> 00:05:01,560
about what we teach as opposed to how we do it.

00:05:01,560 --> 00:05:03,477
And we're all teachers,

00:05:04,446 --> 00:05:07,101
and we have some fundamental questions

00:05:07,101 --> 00:05:09,743
which is what do we teach and why?

00:05:09,743 --> 00:05:13,341
Well, what is it we want to achieve and who do we teach

00:05:13,341 --> 00:05:14,643
and how?

00:05:14,643 --> 00:05:18,151
Those are key questions and we're all students.

00:05:18,151 --> 00:05:19,725
The world is moving on.

00:05:19,725 --> 00:05:21,694
It's moving very, very fast.

00:05:21,694 --> 00:05:25,861
It's moving too fast for any of us to keep up on everything

00:05:27,063 --> 00:05:27,896
and so ...

00:05:29,502 --> 00:05:33,105
We have to be students, basically all the time,

00:05:33,105 --> 00:05:37,814
at least a little bit of the time all the time,

00:05:37,814 --> 00:05:42,023
otherwise we fall behind, and then we become

00:05:42,023 --> 00:05:46,083
part of the problem and it's a huge problem.

00:05:46,083 --> 00:05:50,701
If you've ever had a piece of 20 year old code dumped

00:05:50,701 --> 00:05:54,833
on you and had to look at this horrible mess

00:05:54,840 --> 00:05:59,440
of say, overgrown illogical class hierarchies

00:05:59,940 --> 00:06:01,360
littered with ...

00:06:04,420 --> 00:06:06,880
memory leaks and ...

00:06:07,300 --> 00:06:09,740
pointer spaghetti and such,

00:06:09,760 --> 00:06:12,800
you can usually thank some teacher somewhere.

00:06:12,800 --> 00:06:15,180
They don't get it right all the time

00:06:16,100 --> 00:06:20,200
and if you've ever gotten people in from ...

00:06:22,240 --> 00:06:24,860
a university, good university course

00:06:24,866 --> 00:06:27,978
and they couldn't program their way out of a paper bag,

00:06:27,978 --> 00:06:30,514
again, that's part of the problem

00:06:30,514 --> 00:06:32,924
and so I'm going to try and do a little bit

00:06:32,924 --> 00:06:36,591
of rabblerousing about we have to do better.

00:06:37,769 --> 00:06:40,979
Not because I'm criticizing anybody in particular,

00:06:40,979 --> 00:06:45,146
but I feel not only do we have to do better, we can.

00:06:46,440 --> 00:06:50,600
We're not all professors, as I said, and teaching

00:06:50,600 --> 00:06:52,837
occurs all the time.

00:06:52,837 --> 00:06:56,972
We have a colleague dropping in, talking about it

00:06:56,972 --> 00:07:00,852
or we give a little local course about the latest features

00:07:00,852 --> 00:07:03,019
and such, basically we ...

00:07:04,905 --> 00:07:06,155
We give advice.

00:07:07,601 --> 00:07:08,882
That's teaching.

00:07:08,882 --> 00:07:11,586
We better give good advice, we better give useful advice,

00:07:11,586 --> 00:07:15,477
we better give advice that brings the world forward a bit

00:07:15,477 --> 00:07:19,644
instead of stifling yet another innocent novice and ...

00:07:22,863 --> 00:07:27,249
One of the things that bothers me a lot is that

00:07:27,249 --> 00:07:31,301
sometimes people have the weirdest idea of what C++ is.

00:07:31,301 --> 00:07:32,722
I'll get back to that.

00:07:32,722 --> 00:07:36,139
But basically, when you're giving advice,

00:07:37,441 --> 00:07:40,128
when you're giving a short presentation,

00:07:40,128 --> 00:07:43,189
when you're giving a course, think about what it is

00:07:43,189 --> 00:07:46,707
you want to achieve and work backwards from that.

00:07:46,707 --> 00:07:50,124
Don't start with what have we always done

00:07:51,289 --> 00:07:53,545
and what is easy to get started

00:07:53,545 --> 00:07:56,553
or if you are a professor, what's easiest to set tests for?

00:07:56,553 --> 00:07:59,160
I mean, anything that can be tested by a multiple choice test

00:07:59,160 --> 00:08:00,820
is usually bad.

00:08:02,100 --> 00:08:05,660
All the interesting stuff is the stuff that is ...

00:08:05,920 --> 00:08:10,260
Sort of more real, harder to quantify specifically.

00:08:12,900 --> 00:08:13,940
And ...

00:08:17,280 --> 00:08:19,020
So who do we teach?

00:08:19,029 --> 00:08:21,266
Depends who we are, of course, there are students

00:08:21,266 --> 00:08:25,510
in which case you have some chance of knowing

00:08:25,510 --> 00:08:29,372
their background, though I've taught freshman

00:08:29,372 --> 00:08:32,106
and they come in from high school and they're all

00:08:32,106 --> 00:08:33,358
over the place.

00:08:33,358 --> 00:08:37,042
When I started teaching freshman, it was 60% electrical

00:08:37,042 --> 00:08:40,875
engineers and the rest was computer engineers.

00:08:42,166 --> 00:08:45,772
Computer science was being advanced and doing Java

00:08:45,772 --> 00:08:49,227
and I got the electrical engineers.

00:08:49,227 --> 00:08:51,917
Two years later, when my electrical engineers

00:08:51,917 --> 00:08:55,087
significantly outprogrammed the computer scientists

00:08:55,087 --> 00:08:58,851
the computer science department changed.

00:08:58,851 --> 00:09:02,785
But basically you have to look at the students,

00:09:02,785 --> 00:09:05,107
the people you talk to, the people you change

00:09:05,107 --> 00:09:07,609
and try and understand them.

00:09:07,609 --> 00:09:10,036
What's their background, what is it they know,

00:09:10,036 --> 00:09:12,826
what is they don't know and what it is that will do good

00:09:12,826 --> 00:09:15,418
for them in the future, and of course what do they want

00:09:15,418 --> 00:09:17,219
which may not be the same.

00:09:17,219 --> 00:09:20,550
Industrial programmers, again the same thing.

00:09:20,550 --> 00:09:23,800
Background, aims for the future and ...

00:09:25,949 --> 00:09:28,247
There's a lot of professional nonprogrammers

00:09:28,247 --> 00:09:30,002
that are using C++.

00:09:30,002 --> 00:09:32,831
People who are physicists, biologists, historians,

00:09:32,831 --> 00:09:36,998
they have a totally different view of what is important.

00:09:38,348 --> 00:09:41,415
A lot of them go for the thing that's easiest to pick up

00:09:41,415 --> 00:09:45,005
which these days usually is Python and then they run out

00:09:45,005 --> 00:09:46,708
of CPU power.

00:09:46,708 --> 00:09:50,708
I heard about a biologist that was running three

00:09:51,620 --> 00:09:55,340
month runs to get his data.

00:09:59,540 --> 00:10:02,520
It could be done in just over 10 minutes.

00:10:03,320 --> 00:10:07,854
We know that because that was done when he couldn't do it

00:10:07,854 --> 00:10:08,883
in three months anymore.

00:10:08,883 --> 00:10:10,992
We have to help those.

00:10:10,992 --> 00:10:13,627
There are so many in the world and they're doing

00:10:13,627 --> 00:10:15,896
so many important interesting things.

00:10:15,896 --> 00:10:20,242
They deserve our help, and basically the most fundamental

00:10:20,242 --> 00:10:24,662
thing about teaching I think is that the students are

00:10:24,662 --> 00:10:26,829
by and large not like you.

00:10:27,955 --> 00:10:30,800
On average they are not like you and on average

00:10:30,800 --> 00:10:33,101
we assume they are just like us.

00:10:33,101 --> 00:10:35,670
Hey, we've all been to school, so we know what it is

00:10:35,670 --> 00:10:36,919
to learn, right?

00:10:36,919 --> 00:10:41,464
We just do what we did 20 years ago in kindergarten?

00:10:41,464 --> 00:10:44,020
No, you have to think a little bit harder about these

00:10:44,020 --> 00:10:46,080
things, and you have to learn.

00:10:46,080 --> 00:10:49,037
Learn about the students, learn about their needs.

00:10:49,037 --> 00:10:53,204
And I think we did a really lousy job teaching C++

00:10:55,517 --> 00:10:58,267
before the first standard and ...

00:10:59,962 --> 00:11:01,795
Not much better later.

00:11:03,037 --> 00:11:04,826
We, that definitely includes me.

00:11:04,826 --> 00:11:08,756
Basically, the message about what C++ was

00:11:08,756 --> 00:11:12,655
was hijacked by everybody that wanted to hijack something.

00:11:12,655 --> 00:11:16,134
C++ wasn't supposed to succeed those days.

00:11:16,140 --> 00:11:19,560
There's always fashions and they will ...

00:11:20,500 --> 00:11:23,918
determine what people think is right.

00:11:23,918 --> 00:11:27,403
A lot of C++ got hijacked by people who thought

00:11:27,403 --> 00:11:31,293
it was C with a few knobs on the side and others

00:11:31,293 --> 00:11:35,400
got hijacked by people with the oh, rah rah rah,

00:11:35,400 --> 00:11:38,520
everything is a member function, virtual member function,

00:11:38,520 --> 00:11:42,253
preferably, and everything should be dynamic somehow.

00:11:42,253 --> 00:11:45,639
We have gotten a lot of really bad code out of

00:11:45,640 --> 00:11:48,660
that kind of stuff, and it's partly because ...

00:11:48,660 --> 00:11:53,980
me and others did not articulate clearly enough

00:11:53,980 --> 00:11:57,940
what C++ was and how it could be used well.

00:11:58,480 --> 00:12:02,240
And this got amplified through textbooks, through

00:12:02,242 --> 00:12:04,496
conferences and things like that.

00:12:04,496 --> 00:12:06,986
We just have to do better.

00:12:06,986 --> 00:12:10,211
People talk about getting the message out, messaging

00:12:10,211 --> 00:12:12,147
and all that kind of stuff.

00:12:12,147 --> 00:12:13,972
I used to think it was rubbish.

00:12:13,972 --> 00:12:15,501
No, it's right.

00:12:15,501 --> 00:12:19,222
You have to phrase the message, you have to repeat it

00:12:19,222 --> 00:12:21,684
and you have to get it right and then you have to

00:12:21,684 --> 00:12:25,742
get it out there, so I want to teach good modern C++

00:12:25,742 --> 00:12:29,921
which leaves us with a little problem of defining "modern",

00:12:29,921 --> 00:12:32,496
but I'll get to that.

00:12:32,496 --> 00:12:33,975
So I have a background in this.

00:12:33,975 --> 00:12:38,038
I hate talking about things that I don't know anything

00:12:38,038 --> 00:12:42,476
about and by and large don't know anything about

00:12:42,476 --> 00:12:45,203
I define as having not done it for real.

00:12:45,203 --> 00:12:48,813
One of the problems with education, by the way,

00:12:48,813 --> 00:12:52,509
is that the previous occupation of most professors

00:12:52,509 --> 00:12:55,592
was student, and that, I don't think,

00:12:56,959 --> 00:13:01,126
is just the right background for teaching people how to do

00:13:03,625 --> 00:13:05,833
good stuff in, say, industry.

00:13:05,833 --> 00:13:09,476
Fortunately, this is again, it's not universal.

00:13:09,476 --> 00:13:13,760
When I'm criticizing something with a broad brush,

00:13:13,760 --> 00:13:17,196
it's not because I think everybody has that problem.

00:13:17,200 --> 00:13:22,880
It's because I have to be brief and if I put all the caveats

00:13:23,060 --> 00:13:26,480
and exceptions in, it gets a little bit wooly

00:13:26,491 --> 00:13:28,747
but a lot of people have that problem,

00:13:28,747 --> 00:13:29,921
a lot of people don't.

00:13:29,921 --> 00:13:31,072
So I still teach.

00:13:31,072 --> 00:13:35,018
I give a course every spring at Columbia

00:13:35,020 --> 00:13:35,860
and I ...

00:13:37,960 --> 00:13:40,877
I talk to a lot of people, give talks,

00:13:40,880 --> 00:13:45,040
interact on specific projects so I do have some ...

00:13:48,120 --> 00:13:49,700
Experience in this.

00:13:50,340 --> 00:13:51,500
And I have ...

00:13:52,817 --> 00:13:55,144
I have written a couple of books that are in wide use.

00:13:55,144 --> 00:13:58,621
I think one thing you should note there is that they are

00:13:58,621 --> 00:14:01,320
different, they aim at different things.

00:14:01,320 --> 00:14:05,321
The swan book is aimed at people just learning to program.

00:14:05,321 --> 00:14:09,428
The tour book is meant for people who may have fallen

00:14:09,428 --> 00:14:13,595
five, 10, 15 years behind with C++ and need a refresher

00:14:15,993 --> 00:14:18,908
and are so busy that they only have a weekend to do it.

00:14:18,908 --> 00:14:22,194
That's the design criteria for that one

00:14:22,194 --> 00:14:25,352
and the thick book is well for people who need to know

00:14:25,352 --> 00:14:28,602
everything in quite some detail and ...

00:14:29,651 --> 00:14:32,732
Well, the standard is not a tutorial.

00:14:32,732 --> 00:14:35,976
So basically when you teach, figure out what it is

00:14:35,976 --> 00:14:38,861
that you want to achieve, work backwards from that

00:14:38,861 --> 00:14:42,759
and write it or say it or something like that.

00:14:42,759 --> 00:14:43,592
So ...

00:14:45,943 --> 00:14:48,924
Once I decided to give this talk,

00:14:48,924 --> 00:14:52,333
and promised to give it and still having no idea

00:14:52,333 --> 00:14:56,774
what I was going to say, I asked a few people

00:14:56,774 --> 00:14:58,857
and I got some responses.

00:15:00,783 --> 00:15:02,870
The thing that first surprised me was the industrialist

00:15:02,870 --> 00:15:07,037
ones, it was uniformly, great, we want better developers.

00:15:08,885 --> 00:15:10,418
Give 'em hell, this is good.

00:15:10,418 --> 00:15:12,501
Now the teachers were ...

00:15:14,398 --> 00:15:15,422
Different.

00:15:15,422 --> 00:15:18,827
Yeah, that's great, it really really needs attention,

00:15:18,827 --> 00:15:22,994
but you know, it's hard, I mean, we've failed so often.

00:15:24,809 --> 00:15:29,693
And what can you say that's in any way new or interesting?

00:15:29,693 --> 00:15:31,751
And I'm not sure, I'm trying.

00:15:31,751 --> 00:15:33,860
If nothing else, you are not the standard educators

00:15:33,860 --> 00:15:38,306
or audience so maybe some of the things I say are new

00:15:38,306 --> 00:15:42,238
and more helpful than they would be if you were worn down

00:15:42,238 --> 00:15:46,025
20 years veterans of the education system

00:15:46,025 --> 00:15:50,192
and me, I think it's very important but it's practical.

00:15:51,657 --> 00:15:55,244
It is not education theory or language theory.

00:15:55,244 --> 00:15:58,369
It is something that happens whether we want it or not

00:15:58,369 --> 00:16:02,536
every day in classrooms, in labs, in sort of development

00:16:03,744 --> 00:16:07,766
floors and we have to do it and we need to balance

00:16:07,766 --> 00:16:11,933
two things, principles, ideals, things that we would like

00:16:12,801 --> 00:16:17,085
to see done right, remember George Bernard Shaw?

00:16:17,085 --> 00:16:19,406
And then the practical skills that it takes

00:16:19,406 --> 00:16:21,395
to make positive change.

00:16:21,395 --> 00:16:23,908
You can't just go and talk about it.

00:16:23,908 --> 00:16:28,075
It has to actually work and you have to build it so ...

00:16:29,049 --> 00:16:30,185
That gets back to what we're doing.

00:16:30,185 --> 00:16:31,602
What do we teach?

00:16:33,289 --> 00:16:35,588
There are many, many ways of using C++.

00:16:35,588 --> 00:16:38,134
I mean, there's people going around saying things like

00:16:38,134 --> 00:16:42,183
C++ programmers do this or this is the way C++

00:16:42,183 --> 00:16:45,382
is written, and they're usually so darn certain.

00:16:45,382 --> 00:16:50,234
I'm not, I have seen enough C++, I have seen enough

00:16:50,234 --> 00:16:54,358
C++ programmers to know that generalizing

00:16:54,358 --> 00:16:58,333
over the whole group and then simplifying it to

00:16:58,333 --> 00:17:02,500
this is the one true right thing is just ridiculous.

00:17:03,761 --> 00:17:07,519
Nobody knows enough, nobody can be precise enough,

00:17:07,519 --> 00:17:11,268
nobody can give brief advice that is wide enough

00:17:11,268 --> 00:17:15,018
to actually help everybody so we must choose.

00:17:17,141 --> 00:17:19,808
We cannot just teach everything.

00:17:20,940 --> 00:17:22,829
There's too much, and anyway, we don't know everything

00:17:22,829 --> 00:17:26,912
and so one of the things that I recommend anybody

00:17:28,552 --> 00:17:32,502
who is in a position where they do teaching, advising,

00:17:32,502 --> 00:17:36,419
mentoring, such, is to think a little bit about

00:17:37,807 --> 00:17:40,661
what are your aims and try and write them down.

00:17:40,661 --> 00:17:45,053
I find writing things down is really really helpful.

00:17:45,053 --> 00:17:48,780
It's one of the things that makes us honest.

00:17:48,780 --> 00:17:51,563
And especially if you show it to some of your friends

00:17:51,563 --> 00:17:55,822
and victims or whatever, you can get something that is

00:17:55,822 --> 00:17:59,205
better than what you first thought of and you have

00:17:59,205 --> 00:18:03,602
to remember that the students will choose what's important.

00:18:03,602 --> 00:18:06,728
They will tune out a lot of what you say.

00:18:06,728 --> 00:18:10,354
They will listen to people who say exactly the opposite

00:18:10,354 --> 00:18:14,074
and they may believe them and they may not believe them.

00:18:14,074 --> 00:18:16,660
That depends how well you're doing the job and how

00:18:16,660 --> 00:18:19,743
convincing people on, say, Reddit is.

00:18:22,714 --> 00:18:23,547
And so ...

00:18:26,022 --> 00:18:30,674
You must choose because, well, everybody does,

00:18:30,674 --> 00:18:34,841
and so here, there are lots of aims, very reasonable aims

00:18:37,205 --> 00:18:40,931
for what you teach and from there comes some of it

00:18:40,931 --> 00:18:42,186
how you teach it.

00:18:42,186 --> 00:18:46,342
There are a lot of people talking about let's get people

00:18:46,342 --> 00:18:48,397
really excited about coding.

00:18:48,397 --> 00:18:52,564
That's very important, especially for the young ones.

00:18:54,124 --> 00:18:56,374
But it's not my main focus.

00:18:57,347 --> 00:18:59,623
Somebody else is better at it than I am.

00:18:59,623 --> 00:19:02,164
Not that I don't sometimes go and talk to high school

00:19:02,164 --> 00:19:04,808
students and middle school students where that's my job

00:19:04,808 --> 00:19:08,889
but it's when I talk, it's not what I'm thinking about

00:19:08,889 --> 00:19:10,310
most of the time.

00:19:10,310 --> 00:19:14,393
I'm thinking about how do we lay a foundation for

00:19:16,722 --> 00:19:19,953
careers in system development,

00:19:19,953 --> 00:19:22,370
whatever you want to call it.

00:19:23,333 --> 00:19:25,250
And also how do you ...

00:19:29,000 --> 00:19:30,160
How do you ...

00:19:31,660 --> 00:19:35,153
talk to people who are not actually going to be full time

00:19:35,153 --> 00:19:39,770
developers, full time computer scientists but are going

00:19:39,770 --> 00:19:41,501
to use a lot of that?

00:19:41,501 --> 00:19:44,028
Those are my two main focuses.

00:19:44,028 --> 00:19:48,180
There are people who say, well, let's get them to write

00:19:48,180 --> 00:19:50,825
a simple program and that's their aim,

00:19:50,825 --> 00:19:51,835
that's their whole aim.

00:19:51,835 --> 00:19:54,868
I think that very often leads them to teach things

00:19:54,868 --> 00:19:57,605
that convinces the best and the brightest

00:19:57,605 --> 00:19:59,812
that computer science is boring,

00:19:59,812 --> 00:20:01,635
that system development is boring because

00:20:01,635 --> 00:20:04,806
they can do simple things easy and then that's it.

00:20:04,806 --> 00:20:07,702
I worry about that, and then of course,

00:20:07,702 --> 00:20:11,212
there are people who just want to enroll more people

00:20:11,212 --> 00:20:14,251
so that they can get more ...

00:20:14,251 --> 00:20:17,980
funding for the teaching and that very often leads

00:20:17,980 --> 00:20:20,980
to bad teaching and to spoonfeeding.

00:20:21,900 --> 00:20:26,840
Okay, so have problems with C++ textbooks.

00:20:27,880 --> 00:20:32,734
They very often don't focus and if they do they don't say

00:20:32,734 --> 00:20:36,702
what the focus is supposed to be so it's hard for teachers

00:20:36,702 --> 00:20:39,842
and teaching assistants to actually know where

00:20:39,842 --> 00:20:44,009
to direct things and very often they are slow, bottom up

00:20:44,947 --> 00:20:48,864
focused on what can be tested, and teaching ...

00:20:50,307 --> 00:20:54,064
1990s C++ with C++ 11 syntax.

00:20:54,064 --> 00:20:57,851
If you find a book like that, I am not going to mention any

00:20:57,851 --> 00:21:01,665
but you will know them, that's not right.

00:21:01,665 --> 00:21:04,895
So basically, we have to teach programming.

00:21:04,895 --> 00:21:06,286
It's not just language features.

00:21:06,286 --> 00:21:10,567
It's programming techniques and it's not just what

00:21:10,567 --> 00:21:14,483
is valid, I mean, the tests are like how weird examples

00:21:14,483 --> 00:21:18,110
can you come up with for the conversion of an unsigned

00:21:18,110 --> 00:21:22,277
short to an signed int is basically uninteresting.

00:21:24,030 --> 00:21:25,987
That is not what the thing is about.

00:21:25,987 --> 00:21:28,037
That's debugging and reading the manual.

00:21:28,037 --> 00:21:29,975
You can do that once you manual but you have to

00:21:29,975 --> 00:21:33,578
give some advice about how to write code

00:21:33,578 --> 00:21:36,527
so that you don't get that question.

00:21:36,527 --> 00:21:38,740
If you write good code,

00:21:38,740 --> 00:21:40,303
if you have that question, you probably are doing something

00:21:40,303 --> 00:21:43,898
wrong, and we can't try and teach everything,

00:21:43,898 --> 00:21:45,323
at least not at once.

00:21:45,323 --> 00:21:46,642
We start from the beginning.

00:21:46,642 --> 00:21:49,736
There's far too much stuff we have to choose

00:21:49,736 --> 00:21:52,349
and we need great libraries.

00:21:52,349 --> 00:21:54,723
I think one of the things that's wrong with a lot of

00:21:54,723 --> 00:21:58,009
early C++ teaching is that they teach the language

00:21:58,009 --> 00:22:03,940
in isolation, you get to page 697 and you get vector

00:22:04,740 --> 00:22:07,900
and sort is mentioned 100 pages later.

00:22:09,140 --> 00:22:13,300
That teaches students that the standard library is

00:22:14,354 --> 00:22:18,949
boring, uninteresting, advanced, difficult stuff.

00:22:18,949 --> 00:22:21,468
Whereas it teaches them that if you write your own

00:22:21,468 --> 00:22:25,884
linked list, you're cool, if you write your own hash table

00:22:25,884 --> 00:22:29,976
it must be better than that standard stuff.

00:22:29,976 --> 00:22:33,528
This is wrong, wrong wrong wrong, exactly.

00:22:33,528 --> 00:22:35,465
So we need great libraries.

00:22:35,465 --> 00:22:39,214
There's nothing much to do with C++ there

00:22:39,214 --> 00:22:40,653
but that's a great library,

00:22:40,653 --> 00:22:43,486
that's Trinity Library in Cambridge.

00:22:45,482 --> 00:22:48,130
So another thing is when you teach, try not

00:22:48,130 --> 00:22:49,547
to be too clever.

00:22:50,637 --> 00:22:54,166
People always want to know the latest

00:22:54,166 --> 00:22:57,428
and we love to tell people the latest.

00:22:57,428 --> 00:23:02,243
The problem is that most people who ask for this

00:23:02,243 --> 00:23:05,255
haven't actually learned the foundational stuff

00:23:05,255 --> 00:23:07,842
so we have to sort of ...

00:23:07,842 --> 00:23:08,893
pull back.

00:23:08,893 --> 00:23:11,989
Teach people how to do basic things, teach people

00:23:11,989 --> 00:23:13,443
to do simple things.

00:23:13,443 --> 00:23:16,248
When you're illustrating a technique, don't use

00:23:16,248 --> 00:23:20,068
the most advanced algorithm you can find.

00:23:20,068 --> 00:23:24,050
I wouldn't pick bubble sort, but I wouldn't go

00:23:24,050 --> 00:23:28,278
to the full generality of everything the first class.

00:23:28,278 --> 00:23:29,945
And simplify things.

00:23:31,573 --> 00:23:34,370
The best example is the simplest example

00:23:34,370 --> 00:23:38,033
that illustrates a technique or a feature or something

00:23:38,033 --> 00:23:42,084
like that, simplification is a really important thing

00:23:42,084 --> 00:23:45,417
in teaching and always give a rationale.

00:23:46,673 --> 00:23:50,252
Don't just tell people, do this, it's good for you,

00:23:50,252 --> 00:23:53,424
it builds character and you might get an A

00:23:53,424 --> 00:23:55,716
if you answer it just right.

00:23:55,716 --> 00:23:58,133
Those are very short term ...

00:23:59,251 --> 00:24:03,570
Silly arguments and we need to do better than that.

00:24:03,570 --> 00:24:06,785
You have to say why people should follow the rules,

00:24:06,785 --> 00:24:08,322
the suggestions you're making.

00:24:08,322 --> 00:24:12,322
And the purpose of good teaching is to get ideas

00:24:13,560 --> 00:24:15,819
into people's heads.

00:24:15,819 --> 00:24:18,014
Sometimes you forget that.

00:24:18,014 --> 00:24:19,290
Teachers forget that.

00:24:19,290 --> 00:24:21,898
They focus on grading, they focus on techniques,

00:24:21,898 --> 00:24:25,827
they focus on the detailed subject matter

00:24:25,827 --> 00:24:29,670
and they forget that it's not just to show them something.

00:24:29,670 --> 00:24:31,855
They actually have to understand it.

00:24:31,855 --> 00:24:36,767
They have to explain what it is, why it is and what it's

00:24:36,767 --> 00:24:40,934
good for, not just one of the things and don't show off.

00:24:41,792 --> 00:24:46,288
I mean, it is so tempting to show off to our colleague,

00:24:46,288 --> 00:24:48,763
to stand in front of a group of people

00:24:48,763 --> 00:24:49,724
and show them something.

00:24:49,724 --> 00:24:53,557
Look, this is clever, you don't get it, right?

00:24:54,915 --> 00:24:56,691
That means I'm smart.

00:24:56,691 --> 00:24:58,858
That is not good teaching.

00:25:00,552 --> 00:25:02,542
It is really ...

00:25:02,542 --> 00:25:05,794
When you do it right, people come out and say, yeah,

00:25:05,794 --> 00:25:08,294
what's that, eh, simple, yeah.

00:25:09,311 --> 00:25:12,869
You've gotten it into their heads.

00:25:12,869 --> 00:25:15,706
Brian Kernighan had once told me, you know,

00:25:15,706 --> 00:25:18,789
if they notice you slip the knife in,

00:25:19,655 --> 00:25:20,972
you haven't done it right.

00:25:20,972 --> 00:25:23,398
(audience laughs)

00:25:23,398 --> 00:25:25,680
He's a superb teacher.

00:25:25,680 --> 00:25:29,735
I wish there was something like egoless teaching

00:25:29,735 --> 00:25:32,890
but I don't think there is but we have to keep

00:25:32,890 --> 00:25:36,600
our egos in control, remembering that the purpose

00:25:36,600 --> 00:25:41,200
of the exercise is to teach somebody else something useful.

00:25:41,200 --> 00:25:43,610
I mean, yeah, we learn something when we're teaching,

00:25:43,610 --> 00:25:44,607
but that's not the main point.

00:25:44,607 --> 00:25:47,949
By the way, that's William Occam, he of the great razor.

00:25:47,949 --> 00:25:50,889
Very good for use in teaching.

00:25:50,889 --> 00:25:54,462
So basically we have to use tools.

00:25:54,462 --> 00:25:58,629
We tend to focus on just the compiler and a few ...

00:26:02,280 --> 00:26:07,174
sort of statements and a very limited number of libraries,

00:26:07,174 --> 00:26:09,591
especially in early teaching.

00:26:10,802 --> 00:26:14,317
And then people are thrown into the real world

00:26:14,317 --> 00:26:18,319
where they drown in complicated tools and libraries.

00:26:18,319 --> 00:26:20,477
I do not know how to do this.

00:26:20,477 --> 00:26:23,856
There are so many things and so little time.

00:26:23,856 --> 00:26:27,565
But eventually people will learn about all of these things

00:26:27,565 --> 00:26:30,114
and it's a good idea if people at least knew

00:26:30,114 --> 00:26:32,748
what they didn't know and had some idea

00:26:32,748 --> 00:26:37,267
that someday when your program is more than 1000 lines long

00:26:37,267 --> 00:26:41,444
you may actually need some of these supports,

00:26:41,444 --> 00:26:43,789
and not just to make it easy to do simple things

00:26:43,789 --> 00:26:46,440
but something that scales to ...

00:26:48,120 --> 00:26:49,900
larger things.

00:26:50,480 --> 00:26:53,640
And again, principles and practice.

00:26:53,645 --> 00:26:57,757
You can't just lecture about programming.

00:26:57,757 --> 00:26:59,175
It's a practical skill.

00:26:59,175 --> 00:27:02,144
I mean, I sometimes say you think you can learn

00:27:02,144 --> 00:27:04,720
bicycling from a correspondence course?

00:27:04,720 --> 00:27:09,355
Do you think you can learn design without designing things,

00:27:09,355 --> 00:27:10,516
programming without writing code?

00:27:10,516 --> 00:27:13,258
Programming without reading somebody else's code?

00:27:13,258 --> 00:27:16,358
People do believe those things, and that's wrong.

00:27:16,358 --> 00:27:18,026
On the other hand, you shouldn't just hack.

00:27:18,026 --> 00:27:21,337
There's a lot of people that just learn from just looking at

00:27:21,337 --> 00:27:24,651
from what other people are doing and what other people

00:27:24,651 --> 00:27:28,365
are saying and they just throw code together.

00:27:28,365 --> 00:27:30,489
Cut and paste is the ultimate of that.

00:27:30,489 --> 00:27:33,438
Don't just hack, you have to have the principles also,

00:27:33,438 --> 00:27:36,685
but you have to have hands on thing, and it's not easy.

00:27:36,685 --> 00:27:39,072
It's not quick, nobody can do everything, but do something.

00:27:39,072 --> 00:27:43,260
I mean, throw in a robot or get people to use

00:27:43,260 --> 00:27:44,920
a Raspberry Pi or something.

00:27:44,920 --> 00:27:47,420
This is probably obvious here.

00:27:48,357 --> 00:27:50,569
It is not obvious to a lot of universities

00:27:50,569 --> 00:27:53,308
at the first couple of years.

00:27:53,308 --> 00:27:58,164
And complexity is the enemy of just about everything,

00:27:58,164 --> 00:27:59,795
including good teaching.

00:27:59,795 --> 00:28:03,673
Try and keep it simple, focus on simplicity,

00:28:03,673 --> 00:28:06,764
and don't throw all of C++ at people.

00:28:06,764 --> 00:28:09,879
They won't be able to understand it anyway.

00:28:09,879 --> 00:28:11,962
Basically, we tend to ...

00:28:16,410 --> 00:28:20,415
Focus the students on a few things and ...

00:28:20,415 --> 00:28:24,582
A lot of courses doesn't have graphics, GUI, web, email,

00:28:25,710 --> 00:28:28,751
database kind of libraries, that's some other course

00:28:28,751 --> 00:28:32,918
which most of them never take and they come out believing

00:28:35,581 --> 00:28:38,420
almost because they've almost been told it

00:28:38,420 --> 00:28:40,747
that there is no graphics, no GUI, no web, no email,

00:28:40,747 --> 00:28:41,783
et cetera.

00:28:41,783 --> 00:28:45,044
The fact that the whole world is run by C++

00:28:45,044 --> 00:28:48,440
using those features is completely missed.

00:28:48,440 --> 00:28:49,857
In the classroom.

00:28:52,404 --> 00:28:55,337
When I was teaching, I tended to use the first five minutes

00:28:55,337 --> 00:28:59,504
of every lecture to talk about some application so

00:29:02,580 --> 00:29:06,140
what does the software on the Mars rovers look like?

00:29:07,380 --> 00:29:10,720
And how do you think Google works?

00:29:10,780 --> 00:29:13,840
And things like that, good stuff, motivate people.

00:29:13,846 --> 00:29:15,695
Personally, the thing that keeps me going

00:29:15,700 --> 00:29:17,360
is the applications.

00:29:17,860 --> 00:29:18,700
And so ...

00:29:20,800 --> 00:29:24,060
Don't think there is one way.

00:29:24,060 --> 00:29:28,134
I really fear monocultures, single language,

00:29:28,134 --> 00:29:31,551
single operating system, single curriculum

00:29:31,551 --> 00:29:34,311
when everybody copies from each other

00:29:34,311 --> 00:29:36,722
and gets the same things from the web.

00:29:36,722 --> 00:29:39,257
There should be many ways.

00:29:39,257 --> 00:29:42,129
The argument, that's not the way other people do it

00:29:42,129 --> 00:29:45,169
or if they do it at Harvard, it must be right

00:29:45,169 --> 00:29:47,419
is not conclusive argument.

00:29:48,722 --> 00:29:51,077
You look at what others are doing,

00:29:51,077 --> 00:29:54,348
you try and learn from it, but is there an angle

00:29:54,348 --> 00:29:56,484
of your own that you can use?

00:29:56,484 --> 00:30:00,177
Are you a university next to a tractor factory?

00:30:00,177 --> 00:30:03,220
Maybe programming tractors would be a good idea.

00:30:03,220 --> 00:30:07,908
My hometown was into wind turbines and so there's

00:30:07,908 --> 00:30:12,210
an example there, something that can inspire people.

00:30:12,210 --> 00:30:13,460
And don't hype.

00:30:17,531 --> 00:30:21,987
I was criticized a lot in the early years for pointing out

00:30:21,987 --> 00:30:26,154
that in my opinion C++ could double your productivity.

00:30:27,675 --> 00:30:31,896
Everybody else promised orders of magnitude,

00:30:31,896 --> 00:30:33,729
transformative change.

00:30:35,234 --> 00:30:37,668
How do you get a transformative change?

00:30:37,668 --> 00:30:38,989
Little step at a time.

00:30:38,989 --> 00:30:41,873
I don't believe you have this great genius

00:30:41,873 --> 00:30:46,006
that just solves all your problems like that.

00:30:46,006 --> 00:30:50,371
That's not engineering, it may be certain branches of math

00:30:50,371 --> 00:30:53,117
but it is not when you have to actually build a large,

00:30:53,117 --> 00:30:57,581
complicated system, have all the pieces work together.

00:30:57,581 --> 00:30:58,748
So don't hype.

00:31:00,573 --> 00:31:03,713
And don't let people believe in magic.

00:31:03,713 --> 00:31:06,009
I mean, friends don't let friends believe in magic

00:31:06,009 --> 00:31:07,504
or something like that.

00:31:07,504 --> 00:31:11,087
I really try to explain people how it works

00:31:14,769 --> 00:31:16,784
so you explain the library, then you explain

00:31:16,784 --> 00:31:19,979
the techniques that the library is using,

00:31:19,979 --> 00:31:22,269
then you explain a little bit about how it interacts

00:31:22,269 --> 00:31:25,308
with the hardware and if you are really on a roll

00:31:25,308 --> 00:31:28,400
you can tell them a little bit about how the hardware works.

00:31:28,400 --> 00:31:31,169
I mean, it's abstractions all the way down

00:31:31,169 --> 00:31:33,158
and people should understand this.

00:31:33,158 --> 00:31:35,658
I meet too many people who ...

00:31:36,951 --> 00:31:40,507
Do one level of the system and then aren't interested in

00:31:40,507 --> 00:31:42,340
how it is really done.

00:31:43,720 --> 00:31:46,359
I mean, I'm frustrated if I don't understand what

00:31:46,359 --> 00:31:50,365
the next level down in the abstraction stack is.

00:31:50,365 --> 00:31:52,813
I can't not know everything, but at least I feel bad about

00:31:52,813 --> 00:31:56,980
it, if you feel proud that you don't understand hardware

00:31:58,860 --> 00:32:01,272
there's something fundamentally wrong.

00:32:01,272 --> 00:32:04,732
If you feel proud that you don't know how your library

00:32:04,732 --> 00:32:08,776
is interacting with the operating system and how often,

00:32:08,776 --> 00:32:10,215
one, you shouldn't be proud of it.

00:32:10,215 --> 00:32:13,791
Two, you will not write low latency software

00:32:13,791 --> 00:32:16,221
or high reliability software.

00:32:16,221 --> 00:32:18,204
This is practical.

00:32:18,204 --> 00:32:20,430
And basically we have to succeed.

00:32:20,430 --> 00:32:22,513
The main argument is that

00:32:23,352 --> 00:32:26,102
we will depend in our daily lives

00:32:27,372 --> 00:32:31,962
on the code written by the next generation of programmers.

00:32:31,962 --> 00:32:34,962
So if we screw up, we'll pay for it,

00:32:36,258 --> 00:32:38,927
some way or other, so we ...

00:32:38,927 --> 00:32:43,094
We should focus on this, and a certain amount of idealism

00:32:44,601 --> 00:32:47,632
is necessary, if people just have the attitude

00:32:47,632 --> 00:32:50,833
I do my job, I do my job in the simplest way,

00:32:50,833 --> 00:32:52,833
let's not rock the boat.

00:32:54,242 --> 00:32:55,965
Well, a lot of people do that.

00:32:55,965 --> 00:32:57,976
For some people that's the only strategy that makes

00:32:57,976 --> 00:33:02,143
any sense, however, some of us have to rock the boat

00:33:03,181 --> 00:33:05,661
and we have to make some change.

00:33:05,661 --> 00:33:09,799
That requires idealism, it requires you thinking about

00:33:09,799 --> 00:33:13,146
what you want to do, what would be good, what change

00:33:13,146 --> 00:33:15,880
is necessary and sometimes a lot of work on it.

00:33:15,880 --> 00:33:20,047
I have an idea along the lines of you know doctors

00:33:22,272 --> 00:33:25,177
have certain professionalism, there's things

00:33:25,177 --> 00:33:27,557
they just don't do, and if they do

00:33:27,557 --> 00:33:29,904
they get into real trouble.

00:33:29,904 --> 00:33:32,339
Same with engineers.

00:33:32,339 --> 00:33:36,004
We build things that are at least as essential for our world

00:33:36,004 --> 00:33:40,568
as the hardware engineers and the medical doctors.

00:33:40,568 --> 00:33:43,022
After all, what tools do they use?

00:33:43,022 --> 00:33:47,189
And we should hold ourselves to a very high standard there.

00:33:50,104 --> 00:33:53,056
So we have to do it better.

00:33:53,056 --> 00:33:57,455
And we have to start out right and then keep doing

00:33:57,455 --> 00:33:59,501
the right thing.

00:33:59,501 --> 00:34:02,148
Yeah, Lego's programming C++.

00:34:02,148 --> 00:34:05,731
So let's try first a little bit by analogy.

00:34:06,673 --> 00:34:10,431
How does other fields deal with the problem

00:34:10,431 --> 00:34:13,264
of getting people on board and ...

00:34:14,523 --> 00:34:17,380
Appropriate levels of complexity for them?

00:34:17,380 --> 00:34:20,181
And I like cameras and photography so I'm going

00:34:20,181 --> 00:34:23,014
to do an analogy with photography.

00:34:24,827 --> 00:34:27,873
Remember, proof by analogy is fraud

00:34:27,873 --> 00:34:31,358
so this is just an illustration, nothing more.

00:34:31,358 --> 00:34:35,525
You can't just copy it, but basically there are ...

00:34:37,008 --> 00:34:40,277
There are very great similarities.

00:34:40,277 --> 00:34:42,734
Results depend on the equipment we're using,

00:34:42,734 --> 00:34:46,000
it depends on the user, it's not an automated process

00:34:46,000 --> 00:34:47,250
that just runs.

00:34:49,266 --> 00:34:53,542
That means you need teaching, training, experience and such

00:34:53,542 --> 00:34:56,621
and there's lots and lots of components involved

00:34:56,621 --> 00:35:00,788
in both software and in photography and users differ

00:35:01,959 --> 00:35:05,984
dramatically, I mean, my main weakness in photography

00:35:05,984 --> 00:35:09,734
is that I never have the time to take the ...

00:35:11,374 --> 00:35:16,296
To take the necessary effort to learn my equipment

00:35:16,296 --> 00:35:20,570
and to spend the hours necessary for the light to be just

00:35:20,570 --> 00:35:23,355
right, I mean, you can't just pull the sun up and down

00:35:23,355 --> 00:35:25,766
as needed, you have patience.

00:35:25,766 --> 00:35:29,798
That's my weakness, I have it, that's what ...

00:35:29,798 --> 00:35:32,089
People have different skills, people have different

00:35:32,089 --> 00:35:36,483
course factors, individual needs, tastes and skills

00:35:36,483 --> 00:35:39,195
change over time, this is true for both

00:35:39,195 --> 00:35:42,953
photography and programming, this is why I think

00:35:42,953 --> 00:35:45,392
the analogy might be enlightening.

00:35:45,392 --> 00:35:46,725
And needs differ

00:35:48,143 --> 00:35:52,321
and a system, there's lots of parts to it.

00:35:52,321 --> 00:35:54,967
If you're programming in a programming environment,

00:35:54,967 --> 00:35:59,134
your libraries, language features and such is one system

00:36:00,270 --> 00:36:02,814
and you can't just start using something totally different

00:36:02,814 --> 00:36:05,064
similarly with photography.

00:36:06,033 --> 00:36:09,666
So basically, there's a professional level camera.

00:36:09,666 --> 00:36:13,833
It weighs a ton, that disqualifies it for me by the way.

00:36:15,352 --> 00:36:17,269
I like to travel light.

00:36:18,812 --> 00:36:22,979
It takes superb photographs if you know what you are doing

00:36:24,775 --> 00:36:28,505
and you take your time, I don't have that time,

00:36:28,505 --> 00:36:30,770
I don't have that patience.

00:36:30,770 --> 00:36:35,733
Furthermore, you can completely drown in equipment.

00:36:35,733 --> 00:36:36,983
Boy, I mean ...

00:36:38,000 --> 00:36:41,490
If you're a gearhead, there's no end to the number

00:36:41,490 --> 00:36:45,554
of gadgets you can attach to your system

00:36:45,554 --> 00:36:49,014
and similarly, there are people who never saw a library

00:36:49,014 --> 00:36:51,850
or a language feature that they didn't want to use

00:36:51,850 --> 00:36:53,850
in their latest project.

00:36:56,596 --> 00:36:58,072
Now.

00:36:58,072 --> 00:37:02,778
There are things that are geared for people with less skills

00:37:02,778 --> 00:37:03,778
and less ...

00:37:06,067 --> 00:37:06,900
Patience.

00:37:07,927 --> 00:37:11,481
A lot of work has gone in to designing these things

00:37:11,481 --> 00:37:12,398
so that ...

00:37:14,835 --> 00:37:17,002
Mistakes aren't really ...

00:37:18,142 --> 00:37:20,782
Disastrous, I mean, a slightly blurred picture

00:37:20,782 --> 00:37:24,532
is still a picture and a slightly off program

00:37:26,755 --> 00:37:28,339
is a good start.

00:37:28,339 --> 00:37:30,370
And they tend to be self contained.

00:37:30,370 --> 00:37:34,521
That is, you get a package, you use it, and

00:37:34,521 --> 00:37:36,615
we're not good at that in programming.

00:37:36,615 --> 00:37:40,055
I mean, people get the C++ compiler and then where's

00:37:40,055 --> 00:37:43,222
the GUI, where's the graphics library?

00:37:45,313 --> 00:37:48,769
The greatest problem when I was teaching undergrads

00:37:48,769 --> 00:37:51,852
was to get the GUI library installed.

00:37:53,668 --> 00:37:55,452
This is where the real world hits.

00:37:55,452 --> 00:37:58,497
It's painful and it doesn't integrate well

00:37:58,497 --> 00:38:02,414
and my students were using Macs and Linux boxes

00:38:03,679 --> 00:38:07,530
and Windows boxes and it's all different.

00:38:07,530 --> 00:38:10,866
Same library, all the code is portable but

00:38:10,866 --> 00:38:12,955
just getting it installed is painful.

00:38:12,955 --> 00:38:16,713
These packages are done to basically have everything

00:38:16,713 --> 00:38:20,147
in the box and it works right out of the box.

00:38:20,147 --> 00:38:23,230
And I think I would like to see that,

00:38:24,218 --> 00:38:28,385
but there's another aspect of these things is that ...

00:38:30,014 --> 00:38:34,181
The various manufacturers, Sony, those were Canons

00:38:36,735 --> 00:38:40,902
or some Olympuses, some Nikons, each has a system where

00:38:44,347 --> 00:38:47,837
you can learn and then upgrade to the next level,

00:38:47,837 --> 00:38:51,087
not totally painless but less painless.

00:38:52,002 --> 00:38:55,822
The user interfaces are sort of standard.

00:38:55,822 --> 00:38:58,614
I can pick up any camera and do a simple point and shoot

00:38:58,614 --> 00:39:02,001
kind of thing, it's standardized across there.

00:39:02,001 --> 00:39:06,105
And each has a way that makes it easier to go up

00:39:06,105 --> 00:39:09,014
if you need more or to go down if you are not in

00:39:09,014 --> 00:39:10,364
a professional mood.

00:39:10,364 --> 00:39:12,549
I mean, I make better pictures

00:39:12,549 --> 00:39:16,971
in the first two days if I use a point and shoot

00:39:16,971 --> 00:39:20,600
but if I have a vacation, the first two days

00:39:20,600 --> 00:39:23,162
I will screw up with the more advanced equipment

00:39:23,162 --> 00:39:25,487
but then I'll get better.

00:39:25,487 --> 00:39:28,186
You can move up and down these levels

00:39:28,186 --> 00:39:29,669
so I think we need a system.

00:39:29,669 --> 00:39:31,769
One system does not fit all.

00:39:31,769 --> 00:39:34,770
If we give the professional camera to an amateur,

00:39:34,770 --> 00:39:37,196
one, they won't be interested, two, they will make

00:39:37,196 --> 00:39:41,363
really bad results and we need some kind of idea about

00:39:42,654 --> 00:39:46,237
interchangeable parts and things like that.

00:39:47,410 --> 00:39:49,986
And there should be distributions.

00:39:49,986 --> 00:39:52,035
I should say, give me the amateur version

00:39:52,035 --> 00:39:55,572
and I should basically not have to say much more

00:39:55,572 --> 00:39:58,736
than I just did there, give me the enthusiast version.

00:39:58,736 --> 00:40:02,243
I come something with 10 times the number of knobs and dials

00:40:02,243 --> 00:40:05,410
and if you are a professional, you ask

00:40:06,618 --> 00:40:08,556
for the professional, it's going to be more painful

00:40:08,556 --> 00:40:10,687
but you are going to beat all the amateurs

00:40:10,687 --> 00:40:13,665
if you know what you are doing.

00:40:13,665 --> 00:40:14,498
And ...

00:40:15,928 --> 00:40:16,926
So why three?

00:40:16,926 --> 00:40:19,089
Why can't we just say here's the perfect system?

00:40:19,089 --> 00:40:22,233
Because there's no perfect person,

00:40:22,233 --> 00:40:25,463
there's no one person that ...

00:40:25,463 --> 00:40:27,212
Needs all of that kind of stuff.

00:40:27,212 --> 00:40:29,865
We have a tendency of throwing everything at it.

00:40:29,865 --> 00:40:33,418
Look at teaching, look at what you get out of the box

00:40:33,418 --> 00:40:37,585
with a standard, you get everything that you need to write

00:40:39,538 --> 00:40:42,079
the kernel of an operating system, more or less.

00:40:42,079 --> 00:40:45,829
And 99.99% of people don't ever see that

00:40:47,751 --> 00:40:50,467
and shouldn't see it because they're doing something else

00:40:50,467 --> 00:40:53,467
so basically we are doing something.

00:40:55,077 --> 00:40:56,550
We are doing something.

00:40:56,550 --> 00:40:58,607
We are moving in the right direction.

00:40:58,607 --> 00:41:00,107
Modules will help.

00:41:01,252 --> 00:41:05,063
This is the way I would like my code to look like.

00:41:05,063 --> 00:41:09,367
Give me the entry level bundle, that's all that's needed,

00:41:09,367 --> 00:41:12,401
and if I want the enthusiast level bundle, I want that

00:41:12,401 --> 00:41:15,285
instead, so I have the choice

00:41:15,285 --> 00:41:17,785
and it's a coarse granularity.

00:41:20,171 --> 00:41:23,953
Maybe I want to say give me the basic games package

00:41:23,953 --> 00:41:26,771
or something like that, but we have to limit

00:41:26,771 --> 00:41:30,438
the number of things that people can get ...

00:41:32,977 --> 00:41:36,644
So that they can not get lost in the details

00:41:37,686 --> 00:41:40,706
and then you can add things that's not part

00:41:40,706 --> 00:41:44,873
of the foundation, 2D graphics, 3D graphics, da da da da.

00:41:47,043 --> 00:41:51,344
Okay, and we need a better package and build system.

00:41:51,344 --> 00:41:54,170
There are package systems out there.

00:41:54,170 --> 00:41:56,329
They're improving, thanks to all of you that are

00:41:56,329 --> 00:41:59,873
working on that, but the average student,

00:41:59,873 --> 00:42:04,157
the average user gets lost in how do you download

00:42:04,157 --> 00:42:08,236
something, how do you install something?

00:42:08,236 --> 00:42:11,504
How do you know it works with the stuff I get from over

00:42:11,504 --> 00:42:14,163
there plus the stuff I'm getting from over there?

00:42:14,163 --> 00:42:15,579
We need to do better.

00:42:15,579 --> 00:42:19,783
I really want my operating system to say give me

00:42:19,783 --> 00:42:24,125
the GUI from XYZ, install it, and then I should be able

00:42:24,125 --> 00:42:25,821
to import it.

00:42:25,821 --> 00:42:27,887
If it's more complicated than that, it's probably

00:42:27,887 --> 00:42:29,503
too complicated.

00:42:29,503 --> 00:42:32,951
This is not just for the novices.

00:42:32,951 --> 00:42:35,887
It's not just for the first year students.

00:42:35,887 --> 00:42:39,800
It's for all of us when we're entering a new field

00:42:39,800 --> 00:42:42,067
that we're not experts in.

00:42:42,067 --> 00:42:44,650
I have this distinct feeling that in most fields

00:42:44,650 --> 00:42:45,925
I'm not an expert.

00:42:45,925 --> 00:42:49,415
In most fields I do things, I'm not an expert

00:42:49,415 --> 00:42:54,139
because I'm learning new things and I'm getting into

00:42:54,139 --> 00:42:57,770
new things and so I'm an amateur and I need

00:42:57,770 --> 00:43:00,028
all the help I can get.

00:43:00,028 --> 00:43:00,861
So ...

00:43:02,357 --> 00:43:04,505
Let's go to slightly more philosophical thing

00:43:04,505 --> 00:43:06,021
and then to some code.

00:43:06,021 --> 00:43:08,854
There's no value neutral teaching.

00:43:09,962 --> 00:43:12,068
When we teach, we say what's important

00:43:12,068 --> 00:43:16,957
and explicitly or implicitly we condemn something

00:43:16,957 --> 00:43:21,062
as bad, we decide what we would like the students to learn

00:43:21,062 --> 00:43:24,454
and if we teach well, they will believe us.

00:43:24,454 --> 00:43:26,604
If we teach badly, they won't.

00:43:26,604 --> 00:43:30,850
But we have to decide what it is we want people to get.

00:43:30,850 --> 00:43:35,522
In particular, if we are teaching C++ at some level,

00:43:35,522 --> 00:43:36,439
what is it?

00:43:37,454 --> 00:43:40,863
What's good about it, where do we want to go?

00:43:40,863 --> 00:43:43,166
What would you like your code to look like in five years

00:43:43,166 --> 00:43:44,166
or tomorrow?

00:43:45,259 --> 00:43:49,069
Do you want to write 1980s C++?

00:43:49,069 --> 00:43:52,113
Some people do, but I don't think they should

00:43:52,113 --> 00:43:55,196
so my primary interest, again, is ...

00:43:56,960 --> 00:44:01,487
Get a professional attitude, dependability, maintainability

00:44:01,487 --> 00:44:04,527
Performance is important in most of what I'm doing.

00:44:04,527 --> 00:44:07,124
It's not everybody's essential thing,

00:44:07,124 --> 00:44:10,930
but it's important in C++ and reasonable cost.

00:44:10,930 --> 00:44:13,478
These are sort of engineering concerns, not science

00:44:13,478 --> 00:44:14,895
concerns as such.

00:44:16,318 --> 00:44:17,151
And so ...

00:44:18,820 --> 00:44:22,273
Here's my summary of C++, as ever.

00:44:22,273 --> 00:44:27,016
I like static type safety, precisely specified interfaces.

00:44:27,016 --> 00:44:28,269
I need resource safety.

00:44:28,269 --> 00:44:32,436
People have to understand constructors, destructors, RAII.

00:44:33,588 --> 00:44:37,732
What is the value of abstraction, how do you use it?

00:44:37,732 --> 00:44:40,613
How do you do generic programming and use templates well

00:44:40,613 --> 00:44:42,770
as opposed to just use templates?

00:44:42,770 --> 00:44:45,664
And simplicity for most developers.

00:44:45,664 --> 00:44:47,497
This, I think, is key.

00:44:48,557 --> 00:44:50,807
I did a small survey of ...

00:44:52,341 --> 00:44:54,868
Textbooks about C++.

00:44:54,868 --> 00:44:58,578
While writing this, and it's a sorry result.

00:44:58,578 --> 00:45:03,281
Do you know a textbook that emphasizes these things?

00:45:03,281 --> 00:45:05,967
I think a lot of them don't even mention it.

00:45:05,967 --> 00:45:09,717
It's outside the scope and that's pretty bad.

00:45:11,310 --> 00:45:12,893
And change is hard.

00:45:14,248 --> 00:45:17,089
Modern C++ is not sort of in particular.

00:45:17,089 --> 00:45:20,132
It's the most effective way of using C++ today

00:45:20,132 --> 00:45:22,382
given the current standard,

00:45:24,253 --> 00:45:28,420
which is now C++ 17, it was formally approved a few days ago

00:45:29,792 --> 00:45:32,959
and inertia is the enemy of good code.

00:45:35,243 --> 00:45:38,847
I mean, professors, eh, that's not the way we do it,

00:45:38,847 --> 00:45:41,472
it doesn't fit into the curriculum.

00:45:41,472 --> 00:45:44,026
Maybe we can make a change in five years when

00:45:44,026 --> 00:45:46,587
the data structure course is willing to do

00:45:46,587 --> 00:45:49,670
a more modern thing, and students ...

00:45:50,539 --> 00:45:52,047
They reject what they didn't expect

00:45:52,047 --> 00:45:54,066
and they expect from the strangest places

00:45:54,066 --> 00:45:56,671
or from the web or from their friends

00:45:56,671 --> 00:46:00,569
and a lot of students, I find, are convinced

00:46:00,569 --> 00:46:03,350
they are smarter than their professors.

00:46:03,350 --> 00:46:06,970
And, you know, sometimes they're right.

00:46:06,970 --> 00:46:11,049
Especially a lot of high school teachers have been smarter

00:46:11,049 --> 00:46:14,206
than their high school teachers, especially in computing

00:46:14,206 --> 00:46:16,873
where computing has not been ...

00:46:18,472 --> 00:46:21,850
A key thing, where we don't have a good solid curriculum

00:46:21,850 --> 00:46:23,555
like they've got in calculus.

00:46:23,555 --> 00:46:27,667
Quite often the teachers are not as smart as the smartest

00:46:27,667 --> 00:46:29,770
student, so if you get the smartest students

00:46:29,770 --> 00:46:33,020
into a university course or into a job,

00:46:34,440 --> 00:46:37,868
they may have a slightly jaded opinion

00:46:37,868 --> 00:46:40,404
about their teachers.

00:46:40,404 --> 00:46:43,476
That will apply to you to because you are now

00:46:43,476 --> 00:46:44,645
in the role of the teacher

00:46:44,645 --> 00:46:48,068
and I have definitely had people,

00:46:48,068 --> 00:46:50,997
repeatedly every year in the course,

00:46:50,997 --> 00:46:53,629
freshman coming out of Texas high schools,

00:46:53,629 --> 00:46:57,122
who are absolutely convinced they're smarter than I am

00:46:57,122 --> 00:47:00,206
on the topic of programming.

00:47:00,206 --> 00:47:04,884
In this particular case, I'm reasonably sure they're wrong.

00:47:04,884 --> 00:47:05,777
(audience laughs)

00:47:05,777 --> 00:47:06,610
But ...

00:47:07,516 --> 00:47:09,915
It is something that has to be taken into account

00:47:09,915 --> 00:47:11,355
and dealt with.

00:47:11,355 --> 00:47:13,514
They don't take it just because you say it

00:47:13,514 --> 00:47:17,097
and we have to worry about current practice

00:47:18,576 --> 00:47:22,204
because it's very often what was fashionable 10, 20,

00:47:22,204 --> 00:47:24,345
or 30 years ago.

00:47:24,345 --> 00:47:28,137
By the way, this year, similar is 50 years old,

00:47:28,137 --> 00:47:32,170
so object oriented programming is now 50 years old.

00:47:32,170 --> 00:47:34,032
For somebody who thinks it was cool and modern,

00:47:34,032 --> 00:47:38,437
just remember, 50 years, we're that far into it.

00:47:38,437 --> 00:47:40,774
So modern C++.

00:47:40,774 --> 00:47:44,941
I define it as the best practices using the current standard

00:47:47,641 --> 00:47:49,474
possibly with two S's.

00:47:50,806 --> 00:47:54,803
And basically I aim for completely type safe

00:47:54,803 --> 00:47:57,443
and completely resource safe code

00:47:57,443 --> 00:48:00,591
and there's a project which I launched here two years ago

00:48:00,591 --> 00:48:03,953
about the C++ core guidelines

00:48:03,953 --> 00:48:06,870
that basically tries to codify this

00:48:08,596 --> 00:48:10,132
as a set of rules.

00:48:10,132 --> 00:48:12,252
This is not what C++ is.

00:48:12,252 --> 00:48:14,919
It's a kind of way of saying ...

00:48:15,860 --> 00:48:18,414
What are the good practices?

00:48:18,414 --> 00:48:20,714
How do you get started into this?

00:48:20,714 --> 00:48:24,790
I mean, it's not something that it's enforced

00:48:24,790 --> 00:48:27,375
by the compiler or everybody has to do just like that,

00:48:27,375 --> 00:48:29,494
but you really need a good reason to do something different

00:48:29,494 --> 00:48:31,411
is the way I define it.

00:48:32,639 --> 00:48:34,140
It's a very active project.

00:48:34,140 --> 00:48:35,223
There are ...

00:48:36,306 --> 00:48:40,473
Dozens of contributors every month and it's a very wide ...

00:48:42,940 --> 00:48:43,857
Sort of ...

00:48:46,292 --> 00:48:49,886
Set of contributors, I mean, where else do you find

00:48:49,886 --> 00:48:53,941
Microsoft and Redhat doing something together regularly?

00:48:53,941 --> 00:48:55,858
The world is improving.

00:48:58,285 --> 00:48:59,765
So ...

00:48:59,765 --> 00:49:00,795
Code examples.

00:49:00,795 --> 00:49:04,506
Programming has to do with code in the end, so good examples

00:49:04,506 --> 00:49:06,005
are key.

00:49:06,005 --> 00:49:07,665
I sweat blood trying to find good examples

00:49:07,665 --> 00:49:10,899
and I'm never as successful as I would like to be

00:49:10,899 --> 00:49:12,397
because they have to be simple,

00:49:12,397 --> 00:49:14,397
for teaching to a class,

00:49:16,720 --> 00:49:18,479
it has to fit on a slide or a couple of slides.

00:49:18,479 --> 00:49:21,869
If people show me this much code, the ideas

00:49:21,869 --> 00:49:24,619
are going to be lost in the code.

00:49:25,582 --> 00:49:27,682
You can't get the idea there.

00:49:27,682 --> 00:49:30,523
Yeah, if you're in a work environment,

00:49:30,523 --> 00:49:34,224
you can sit over a screen with a guy that walks you

00:49:34,224 --> 00:49:36,391
through it, great, but ...

00:49:38,132 --> 00:49:40,592
In many, many cases finding simple examples

00:49:40,592 --> 00:49:43,800
is really really hard and also the big examples

00:49:43,800 --> 00:49:46,860
sometimes aren't the greatest examples.

00:49:46,860 --> 00:49:50,388
They have all the warts that was necessary

00:49:50,388 --> 00:49:55,184
for compatibility, for the way we usually do here

00:49:55,184 --> 00:49:59,151
and the conventions that have grown up since the 90s

00:49:59,151 --> 00:50:01,957
so finding small examples are key.

00:50:01,957 --> 00:50:04,498
And don't separate code from explanation.

00:50:04,498 --> 00:50:09,076
If you just show the code, people will not get the idea

00:50:09,076 --> 00:50:13,262
and they will invent reasons why it looks like that

00:50:13,262 --> 00:50:17,262
and those reasons are sometimes seriously weird.

00:50:18,810 --> 00:50:20,251
If you give them just the explanation,

00:50:20,251 --> 00:50:23,663
that's sort of the standard lecture of what is good

00:50:23,663 --> 00:50:25,422
and proper and people go to sleep.

00:50:25,422 --> 00:50:27,711
They don't get the idea, so a tight integration

00:50:27,711 --> 00:50:31,544
between examples and explanation is essential.

00:50:33,055 --> 00:50:35,282
I learned that from Brian Kernighan.

00:50:35,282 --> 00:50:38,979
If you haven't, read the introduction, the tutorial

00:50:38,979 --> 00:50:41,751
the first chapter of KNR again.

00:50:41,751 --> 00:50:46,043
It's a beautiful example of how you can get ideas

00:50:46,043 --> 00:50:47,755
into people's heads.

00:50:47,755 --> 00:50:52,123
C would have been among the dozens of failed attempts

00:50:52,123 --> 00:50:55,974
to do what C did, if it wasn't for that book

00:50:55,974 --> 00:50:57,612
and that style of teaching.

00:50:57,612 --> 00:51:01,779
It's very important, Brian is, by the way, a really nice guy

00:51:03,122 --> 00:51:06,252
The fights between the C community and the C++ community

00:51:06,252 --> 00:51:10,419
did not happen between me and Brian and Dennis, that's fact.

00:51:13,035 --> 00:51:15,683
So let's look, I can't give a talk without code

00:51:15,683 --> 00:51:19,262
so I'm going to show you a few examples of what I think.

00:51:19,262 --> 00:51:21,853
So here are two ways of writing a loop.

00:51:21,853 --> 00:51:25,731
The first is the good old way which we have written

00:51:25,731 --> 00:51:29,148
more or less that way since the early 80s

00:51:30,940 --> 00:51:35,107
and then there is the new fancy way with the range for.

00:51:36,011 --> 00:51:39,042
And why is two better than one?

00:51:39,042 --> 00:51:43,400
Basically, two states what I want to do for all x and v.

00:51:43,400 --> 00:51:46,150
There's no i, I didn't need an i.

00:51:48,016 --> 00:51:50,654
There's no separation between finding the limit

00:51:50,654 --> 00:51:53,321
of my data structure and the ...

00:51:56,212 --> 00:52:00,897
Use of that variable, constant, whatever you want to call it

00:52:00,897 --> 00:52:05,064
so I can't make a mistake about getting the size wrong.

00:52:06,006 --> 00:52:06,839
And ...

00:52:07,845 --> 00:52:09,886
You can explain this, this is easy.

00:52:09,886 --> 00:52:13,760
So it's shorter, less opportunities for ...

00:52:13,760 --> 00:52:15,740
for mistakes.

00:52:15,740 --> 00:52:18,820
And you know, yeah, one is more general.

00:52:18,820 --> 00:52:21,080
You can express more cases.

00:52:22,440 --> 00:52:26,060
But that also means you can make more mistakes.

00:52:26,960 --> 00:52:30,011
So remember, goto is the simplest and most general

00:52:30,011 --> 00:52:33,511
control structure, at least non concurrent

00:52:35,213 --> 00:52:39,103
but you can't implement concurrency with a goto anyway.

00:52:39,103 --> 00:52:42,916
So basically just because you can do more

00:52:42,916 --> 00:52:44,423
doesn't mean it's better.

00:52:44,423 --> 00:52:46,153
Sometimes it means it's worse.

00:52:46,153 --> 00:52:47,962
The fact that goto can do everything

00:52:47,962 --> 00:52:51,343
is the fundamental reason why we don't use it.

00:52:51,343 --> 00:52:54,843
Except in machine generated code and such.

00:52:56,368 --> 00:52:57,371
Yes.

00:52:57,371 --> 00:53:00,664
Here's some example, slightly more modern example.

00:53:00,664 --> 00:53:01,497
I am ...

00:53:03,736 --> 00:53:08,514
Going to blink some LEDs and there are two ways of doing it.

00:53:08,514 --> 00:53:11,573
I can give an integer, and it blinks,

00:53:11,573 --> 00:53:13,073
and I can give ...

00:53:14,037 --> 00:53:17,310
A millisecond argument that says how many milliseconds

00:53:17,310 --> 00:53:18,815
that can blink.

00:53:18,815 --> 00:53:22,982
Now if you use integers, you have to guess about the unit.

00:53:25,222 --> 00:53:27,222
And so if you have blink

00:53:29,525 --> 00:53:33,976
number two and you just give it something without a unit

00:53:33,976 --> 00:53:36,807
the compiler says, well ...

00:53:36,807 --> 00:53:39,894
You didn't tell me what the unit was, so I won't compile

00:53:39,894 --> 00:53:42,481
this for you, this is good.

00:53:42,481 --> 00:53:45,664
And the reason it's good, my best example is that

00:53:45,664 --> 00:53:49,725
little spaceship there, the poor little Mars climate orbiter.

00:53:49,725 --> 00:53:51,992
It was sent up to Mars.

00:53:51,992 --> 00:53:54,053
And it was doing the final course corrections

00:53:54,053 --> 00:53:58,354
to get around Mars in a good orbit and it disappeared.

00:53:58,354 --> 00:54:00,952
My favorite theory at the time was that it had been

00:54:00,952 --> 00:54:03,417
kidnapped for ransom by the Martians.

00:54:03,417 --> 00:54:08,230
There's also people that claim it was a Yankee go home thing

00:54:08,230 --> 00:54:12,337
We don't want any stinking earthlings here.

00:54:12,337 --> 00:54:14,448
However, what happened was more relevant

00:54:14,448 --> 00:54:16,708
and less interesting.

00:54:16,708 --> 00:54:19,727
There were two groups of engineers

00:54:19,727 --> 00:54:23,922
and they were transmitting a power reading

00:54:23,922 --> 00:54:27,312
through an interface that took a double.

00:54:27,312 --> 00:54:30,645
On the one hand, they had SI system MKS,

00:54:31,909 --> 00:54:34,417
on the other side, they had the imperial system.

00:54:34,417 --> 00:54:37,840
As that double passed through the interface,

00:54:37,840 --> 00:54:42,007
it changed its meaning with a factor of exactly 4.65.

00:54:43,246 --> 00:54:47,251
And we never saw that little spaceship again.

00:54:47,251 --> 00:54:51,418
That means that about the lifetime's work of 200 good

00:54:52,321 --> 00:54:55,511
engineers just disappeared, basically,

00:54:55,511 --> 00:54:57,302
they'd all worked for nothing.

00:54:57,302 --> 00:55:00,441
They got the salary but didn't deliver anything of value

00:55:00,441 --> 00:55:01,524
to the world.

00:55:02,606 --> 00:55:05,414
All the scientists that were waiting for the data

00:55:05,414 --> 00:55:09,326
had to wait, lots of promotions didn't happen,

00:55:09,326 --> 00:55:13,867
lots of students didn't get their degrees, and ...

00:55:13,867 --> 00:55:16,099
Yeah, basically, we lost about 600 million dollars

00:55:16,099 --> 00:55:20,183
and it took 15 years more to get one up.

00:55:20,183 --> 00:55:24,500
That was the bug that you see there in ...

00:55:24,500 --> 00:55:27,340
The first use of blink_led2 1500.

00:55:28,540 --> 00:55:30,740
Some bugs can be really critical and we can do better

00:55:30,742 --> 00:55:34,159
than that, and if you want to be generic,

00:55:35,093 --> 00:55:36,760
you can do that too.

00:55:37,921 --> 00:55:41,045
Modern C++ is very flexible and you can use that flexibility

00:55:41,045 --> 00:55:45,212
to gain precision, so here we have some of the rules from

00:55:47,176 --> 00:55:51,437
the core guidelines, make interfaces precisely

00:55:51,437 --> 00:55:55,270
and strongly typed, that's an example of that.

00:55:56,815 --> 00:55:57,937
And we can go further.

00:55:57,937 --> 00:56:00,573
Always initialize an object.

00:56:00,573 --> 00:56:04,740
This is a saying that people break again and again and again

00:56:05,838 --> 00:56:10,004
They are so smart, they know they are going to initialize

00:56:10,004 --> 00:56:14,783
but they declare it up here and they initialize it down here

00:56:14,783 --> 00:56:17,047
and they get it right all the time because

00:56:17,047 --> 00:56:19,427
they are good clever programmers.

00:56:19,427 --> 00:56:20,644
No.

00:56:20,644 --> 00:56:22,749
Even if they get it right, somebody else

00:56:22,749 --> 00:56:25,815
is going to write code in there or you have handled

00:56:25,815 --> 00:56:28,102
all three possible cases and somebody invents

00:56:28,102 --> 00:56:32,306
a fourth case, so one of the rules is always initialize

00:56:32,306 --> 00:56:36,383
an object, and that always has some pressure

00:56:36,383 --> 00:56:38,968
because people have had other ways of doing things

00:56:38,968 --> 00:56:42,128
over the years, like I like to define all of my

00:56:42,128 --> 00:56:44,711
variables up top in the program

00:56:45,553 --> 00:56:49,194
and then I initialize them the way I always did

00:56:49,194 --> 00:56:51,493
in Pascal and other languages further down.

00:56:51,493 --> 00:56:55,660
After all, I would like to see what all of my variables are.

00:56:56,846 --> 00:56:59,319
That, by the way, is a sign that your function

00:56:59,319 --> 00:57:02,413
is too large, which is another rule.

00:57:02,413 --> 00:57:04,548
But here, always initialize the object.

00:57:04,548 --> 00:57:07,875
Now sometimes you can't do that, so you have to deal

00:57:07,875 --> 00:57:12,298
with exceptions like input buffers, and in particular

00:57:12,298 --> 00:57:15,864
multiple out values have been ...

00:57:15,864 --> 00:57:19,777
A problem over the years because, well, if you have

00:57:19,777 --> 00:57:22,167
to call a function to calculate the initial value

00:57:22,167 --> 00:57:23,667
of two or more ...

00:57:26,886 --> 00:57:30,030
Variables, then you end up having some things like

00:57:30,030 --> 00:57:31,459
that error code there.

00:57:31,459 --> 00:57:35,459
You call the channel, you pass the error code in

00:57:36,719 --> 00:57:39,952
uninitialized as an out parameter

00:57:39,952 --> 00:57:43,081
and you don't say so, the reader can guess it.

00:57:43,081 --> 00:57:47,248
No, and then you have to chase it, so in C++ 17 we have ...

00:57:50,253 --> 00:57:51,170
We have ...

00:57:52,790 --> 00:57:56,072
structured bindings where we can say I want to break

00:57:56,072 --> 00:58:00,239
the result of the channel open into its component parts

00:58:02,059 --> 00:58:06,059
and so we can now return n values and use them

00:58:07,183 --> 00:58:10,953
as individual variables instead of having them into

00:58:10,953 --> 00:58:15,719
an object and accessing the object in certain ways.

00:58:15,719 --> 00:58:19,886
So always initialize objects and return multiple out values

00:58:21,658 --> 00:58:24,991
as opposed to using out parameters which

00:58:26,431 --> 00:58:28,264
is a known bug source.

00:58:29,829 --> 00:58:33,996
One of the ways when we are developing this is to look at

00:58:35,809 --> 00:58:39,474
bug logs, what do people get wrong?

00:58:39,474 --> 00:58:41,947
What can do we do to fix it?

00:58:41,947 --> 00:58:43,460
Again, we are not trying to be clever here.

00:58:43,460 --> 00:58:46,832
We are actually trying to find out the least clever ways

00:58:46,832 --> 00:58:47,665
that work.

00:58:49,511 --> 00:58:50,344
Basically.

00:58:51,336 --> 00:58:55,092
Develop an error handling strategy early in the design.

00:58:55,092 --> 00:58:56,848
That's a rule, it's sort of philosophical,

00:58:56,848 --> 00:59:01,816
you can't have a static analyzer find it when you haven't.

00:59:01,816 --> 00:59:04,701
Some rules are high level, some rules are low level

00:59:04,701 --> 00:59:06,267
and checkable.

00:59:06,267 --> 00:59:09,427
Throw an exception to signal it.

00:59:09,427 --> 00:59:11,679
Exceptions are for error handling only.

00:59:11,679 --> 00:59:13,596
So if you look here ...

00:59:15,241 --> 00:59:19,259
I have gotten too far down here, yeah, I showed you ...

00:59:19,259 --> 00:59:21,929
No, I did not show you this.

00:59:21,929 --> 00:59:25,737
So first we start out with a classical style without

00:59:25,737 --> 00:59:27,987
parameters, then we use ...

00:59:29,960 --> 00:59:33,294
Structured bindings and finally we can start discussing

00:59:33,300 --> 00:59:36,128
should it have returned two values?

00:59:36,660 --> 00:59:40,180
Should it have thrown an exception?

00:59:40,920 --> 00:59:43,673
And this is where, the tricky bit is to say,

00:59:43,673 --> 00:59:46,735
when do you throw an exception, when do you have

00:59:46,735 --> 00:59:47,736
an error code?

00:59:47,736 --> 00:59:49,166
Is it normal to fail?

00:59:49,166 --> 00:59:51,083
Is it expected to fail?

00:59:52,212 --> 00:59:53,736
Then it's probably an error code.

00:59:53,736 --> 00:59:57,776
If it's considered a design failure of an extremely rare

00:59:57,776 --> 01:00:01,943
event that fails, it should be an exception is the answer

01:00:02,827 --> 01:00:04,744
in the core guidelines.

01:00:06,067 --> 01:00:09,304
And basically don't be too clever.

01:00:09,304 --> 01:00:13,460
In the context of using C++, clever is a swear word.

01:00:15,680 --> 01:00:17,460
Don't be clever.

01:00:18,605 --> 01:00:21,395
So here is some code, slightly simplified.

01:00:21,395 --> 01:00:23,895
It's got really bad bug in it,

01:00:26,300 --> 01:00:28,971
I don't know how many of you spotted it,

01:00:28,971 --> 01:00:31,029
how many of you would have spotted it

01:00:31,029 --> 01:00:35,587
if it had been in code that was a couple of screen fulls?

01:00:35,587 --> 01:00:37,670
It is trivial for the ...

01:00:38,582 --> 01:00:41,582
for a static analyzer to catch this.

01:00:42,576 --> 01:00:46,654
The problem is that people are messing with resource

01:00:46,654 --> 01:00:49,810
management, and there's some rules.

01:00:49,810 --> 01:00:51,971
Don't leak resources.

01:00:51,971 --> 01:00:56,453
Don't call new and delete explicitly in application code.

01:00:56,453 --> 01:01:00,582
It should be encapsulated into a resource manager.

01:01:00,582 --> 01:01:04,250
And a raw reference is non-owning, in other words,

01:01:04,250 --> 01:01:08,000
if I return *new of something as a reference,

01:01:09,873 --> 01:01:11,385
don't do it.

01:01:11,385 --> 01:01:15,331
Because not only have you now sent something out

01:01:15,331 --> 01:01:17,916
so that you know that it has to be a delete,

01:01:17,916 --> 01:01:20,315
but there's no pointer out there that gives you a hint

01:01:20,315 --> 01:01:23,645
that you deleted so a lot of the guidelines have to do

01:01:23,645 --> 01:01:27,812
with resource management and the analysis software,

01:01:28,720 --> 01:01:32,472
actually, the existing stuff that's shipping from Microsoft

01:01:32,472 --> 01:01:36,639
is actually catching this and I believe that other efforts

01:01:38,087 --> 01:01:41,920
are in place to catch things that has been ...

01:01:44,464 --> 01:01:47,214
Specified in the core guidelines.

01:01:48,938 --> 01:01:50,642
Lately I have found that people have learned

01:01:50,642 --> 01:01:54,709
to express things directly in code a little bit too well.

01:01:54,709 --> 01:01:57,277
I see a lot of code that has no comments in it

01:01:57,277 --> 01:02:01,008
because in the old days, people wrote comments,

01:02:01,008 --> 01:02:04,652
pages and pages of comments and they tended to be

01:02:04,652 --> 01:02:08,253
out of date and unreadable and imprecise and in

01:02:08,253 --> 01:02:11,795
a lot of places, people say, no, no, comments are bad,

01:02:11,795 --> 01:02:14,970
we won't have them, and now I can't see what it is

01:02:14,970 --> 01:02:16,579
you're trying to do.

01:02:16,579 --> 01:02:20,260
I can see what you do, but I can't see if you meant it

01:02:20,260 --> 01:02:23,340
and so basically the rules in the ...

01:02:24,760 --> 01:02:27,160
Core guidelines example here.

01:02:28,620 --> 01:02:29,906
You express things directly in code.

01:02:29,906 --> 01:02:32,076
But there's things you can't express directly in code

01:02:32,076 --> 01:02:36,221
and that is why is it there, what is it what you are trying

01:02:36,221 --> 01:02:39,694
to do, so basically intent should be in the comments and

01:02:39,694 --> 01:02:43,611
comments should be crisp, not hidden in sort of

01:02:45,011 --> 01:02:46,970
somebody trying to write War and Peace because

01:02:46,970 --> 01:02:51,150
they really wanted to be an English major.

01:02:51,150 --> 01:02:53,484
So things like that matter.

01:02:53,484 --> 01:02:57,651
And the old rule is if the comments and the code disagree

01:02:59,498 --> 01:03:01,539
both are probably wrong.

01:03:01,539 --> 01:03:05,254
And I actually applied that rule when I wrote the ARM,

01:03:05,254 --> 01:03:08,304
the document that started the standardization.

01:03:08,304 --> 01:03:11,721
I tried carefully to say everything twice

01:03:13,002 --> 01:03:15,588
because then if I screwed up, there was a high probability

01:03:15,588 --> 01:03:17,793
I would be caught.

01:03:17,793 --> 01:03:19,961
These days, when people write specifications,

01:03:19,961 --> 01:03:23,904
they try very hard to say things once only.

01:03:23,904 --> 01:03:27,439
Which is sort of fine except that I can't see if they meant it,

01:03:27,439 --> 01:03:30,801
so if I read a statement in the standard,

01:03:30,801 --> 01:03:33,936
I don't actually know if that was what they meant to say

01:03:33,936 --> 01:03:37,390
and I didn't quite understand it or ...

01:03:37,390 --> 01:03:41,849
They didn't quite understand it and I can't see it

01:03:41,849 --> 01:03:44,520
so comments are important.

01:03:44,520 --> 01:03:48,006
So there's a fair amount of philosophy rules there.

01:03:48,006 --> 01:03:50,979
I have chosen to illustrate this with Archimedes,

01:03:50,979 --> 01:03:54,312
arguably the world's greatest architect,

01:03:56,107 --> 01:04:00,305
sort of a philosophical view of things, a framework

01:04:00,305 --> 01:04:04,413
for your design, a set of all our rules is important.

01:04:04,413 --> 01:04:06,306
I'm not going to go into the details.

01:04:06,306 --> 01:04:10,920
I encourage you to go on GitHub, find the core guidelines.

01:04:10,920 --> 01:04:14,703
Look through it, if there's some you like or if some

01:04:14,703 --> 01:04:19,587
you don't like, send me an email or put in an issue

01:04:19,587 --> 01:04:24,331
or something so that we can improve these things.

01:04:24,331 --> 01:04:27,107
And basically, my aim is very simple.

01:04:27,107 --> 01:04:30,427
We can write type and resource safe C++.

01:04:30,427 --> 01:04:34,594
My first step is to make sure that I can do that reliably.

01:04:36,648 --> 01:04:38,456
That requires tool enforcement.

01:04:38,456 --> 01:04:42,283
The tool enforcement is incomplete now but we're improving.

01:04:42,283 --> 01:04:44,522
But basically, no leaks, no memory corruption,

01:04:44,522 --> 01:04:48,214
no garbage collector, no limitations of what you can say.

01:04:48,214 --> 01:04:51,054
No performance degradation.

01:04:51,054 --> 01:04:55,133
This is after all C++ and write in ISO C++.

01:04:55,133 --> 01:04:57,431
I am not a fan of proprietary extensions

01:04:57,431 --> 01:05:02,050
so this is happening and I think this is part of

01:05:02,050 --> 01:05:03,332
what it takes to teach.

01:05:03,332 --> 01:05:06,139
You have to figure out what is you teach.

01:05:06,139 --> 01:05:09,644
You have to articulate why that is a good thing to do

01:05:09,644 --> 01:05:12,367
and so teach for the future.

01:05:12,367 --> 01:05:13,591
You have to live in it

01:05:13,591 --> 01:05:17,738
and the world shouldn't continue to accept

01:05:17,738 --> 01:05:21,773
sort of unsafe bloatware and probably won't

01:05:21,773 --> 01:05:26,076
and if we don't improve, somebody else will try and improve

01:05:26,076 --> 01:05:28,010
it for us and we may very well not like

01:05:28,010 --> 01:05:30,546
what they come up with.

01:05:30,546 --> 01:05:33,614
So the proof of the pudding is in the good code

01:05:33,614 --> 01:05:36,936
and there's a lot of practical stuff that has to be done

01:05:36,936 --> 01:05:40,853
to do this, correct, maintainable, appropriate.

01:05:45,293 --> 01:05:49,790
Efficient is sort of my version of Vitruvius there

01:05:49,790 --> 01:05:53,407
and we need to work on curriculum development

01:05:53,407 --> 01:05:55,727
if we are in the education business

01:05:55,727 --> 01:05:58,992
and learners should build a portfolio, not just go

01:05:58,992 --> 01:06:02,238
for the grades, it's really, really hard to get

01:06:02,238 --> 01:06:06,532
current day students to learn as opposed to swot

01:06:06,532 --> 01:06:07,699
for the exams.

01:06:11,106 --> 01:06:12,273
Yes, it is ...

01:06:14,158 --> 01:06:14,991
So ...

01:06:16,239 --> 01:06:19,490
I come to the question area and I'd like to point out

01:06:19,490 --> 01:06:22,114
I know very well that I have not said everything

01:06:22,114 --> 01:06:24,151
that should be said about these subjects.

01:06:24,151 --> 01:06:26,734
There are several other things to do with learning,

01:06:26,734 --> 01:06:29,234
training, teaching at this ...

01:06:30,753 --> 01:06:33,538
conference, you can go there, there's in particular

01:06:33,538 --> 01:06:38,030
a panel tomorrow evening where we are talking about

01:06:38,030 --> 01:06:42,050
C++ in academia, I am a panelist and so are

01:06:42,050 --> 01:06:44,133
a couple of other people.

01:06:45,536 --> 01:06:47,679
Okay, questions.

01:06:47,679 --> 01:06:50,429
(audience claps)

01:07:00,689 --> 01:07:03,916
We have microphones up here, right?

01:07:03,916 --> 01:07:06,083
Is there one on each side?

01:07:07,508 --> 01:07:12,038
Please use them because I really can't hear if you don't.

01:07:12,038 --> 01:07:14,078
This is an awfully large room.

01:07:14,078 --> 01:07:16,262
There's so many more people than there was last year

01:07:16,262 --> 01:07:19,762
and last year it was large already, so ...

01:07:20,693 --> 01:07:24,003
- Hey, so the core guidelines, you mentioned them,

01:07:24,003 --> 01:07:25,336
you mentioned about teaching with them.

01:07:25,336 --> 01:07:27,820
They're quite large as they are

01:07:27,820 --> 01:07:32,093
and that can be quite overwhelming to students to take

01:07:32,093 --> 01:07:34,461
a look at the core guidelines directly.

01:07:34,461 --> 01:07:36,985
How would you recommend approaching teaching

01:07:36,985 --> 01:07:40,014
the core guidelines and getting students to take

01:07:40,014 --> 01:07:41,018
a look at them?

01:07:41,018 --> 01:07:45,101
- First, I suggest that you read the introduction

01:07:45,940 --> 01:07:49,181
to the core guidelines that says what's there and why,

01:07:49,181 --> 01:07:51,014
to have the rationale.

01:07:51,857 --> 01:07:54,940
Then look at the philosophy sections.

01:07:56,118 --> 01:08:00,285
Pick a couple of those and then pick some relevant rules

01:08:02,557 --> 01:08:04,101
to focus on.

01:08:04,101 --> 01:08:05,018
As ever ...

01:08:06,521 --> 01:08:08,821
You can't teach everything.

01:08:08,821 --> 01:08:12,592
The core guidelines were not attempting to be ...

01:08:12,592 --> 01:08:16,092
Everything for everybody or to be minimal.

01:08:18,596 --> 01:08:23,168
They are orthogonal, that is, if you look at a certain

01:08:23,168 --> 01:08:26,563
section, that section is reasonably complete

01:08:26,563 --> 01:08:28,677
for a lot of people and you have may have repetition

01:08:28,677 --> 01:08:30,712
on another area.

01:08:30,712 --> 01:08:32,504
I don't mind that, if we are inconsistent,

01:08:32,504 --> 01:08:36,202
which we have been repeatedly, people find it and tell us

01:08:36,202 --> 01:08:37,325
and we clean it up.

01:08:37,325 --> 01:08:38,158
Now ...

01:08:39,489 --> 01:08:42,351
Your colleagues or students will not need everything

01:08:42,351 --> 01:08:45,976
so you have to make up your mind where to focus them

01:08:45,976 --> 01:08:49,808
but begin with the philosophy that the general understanding

01:08:49,808 --> 01:08:52,685
of what we are trying to do and then focus on something

01:08:52,685 --> 01:08:54,162
important.

01:08:54,162 --> 01:08:57,156
I don't think we are going to be really successful

01:08:57,160 --> 01:08:59,580
on sort of a worldwide scale.

01:09:00,980 --> 01:09:04,960
Till we have better static analysis.

01:09:04,968 --> 01:09:09,200
I want to eliminate dangling pointers, full stop.

01:09:09,210 --> 01:09:12,995
I want guarantees that there's no dangling pointers

01:09:12,995 --> 01:09:14,533
in my code.

01:09:14,533 --> 01:09:17,224
After that, I can give you code safety and resource safety

01:09:17,224 --> 01:09:19,899
and things like that, but first we have to eliminate

01:09:19,899 --> 01:09:21,728
the dangling pointers.

01:09:21,728 --> 01:09:24,922
That is a thing that takes static analysis,

01:09:24,922 --> 01:09:28,411
some coding discipline, which is in the rules

01:09:28,411 --> 01:09:30,704
and some support libraries including the parts

01:09:30,704 --> 01:09:34,823
of the standard library and so as it is now

01:09:34,823 --> 01:09:38,205
we're still working up to that, but I want to scale this out

01:09:38,205 --> 01:09:40,830
to sort of four million programmers

01:09:40,830 --> 01:09:43,304
and you don't do that without tools.

01:09:43,304 --> 01:09:46,290
You cannot talk your way into that scale

01:09:46,290 --> 01:09:49,405
and currently I am doing more talking than deployment

01:09:49,405 --> 01:09:53,300
of tools, and that's unfortunate but we'll get there

01:09:53,300 --> 01:09:54,923
eventually.

01:09:54,923 --> 01:09:58,113
The team at Microsoft that started out with this is

01:09:58,113 --> 01:10:02,280
in a way, I think, I see Peter sitting down there in front.

01:10:03,432 --> 01:10:06,182
Are your guys getting on to this?

01:10:09,338 --> 01:10:11,311
Yeah, yeah, see?

01:10:11,311 --> 01:10:13,842
Other places are catching up too.

01:10:13,842 --> 01:10:16,040
I know some projects in China.

01:10:16,040 --> 01:10:19,171
I hope to see some more in Clang Tidy.

01:10:19,171 --> 01:10:20,004
So ...

01:10:21,463 --> 01:10:23,241
We need tools to get there

01:10:23,241 --> 01:10:24,924
and that will answer your question.

01:10:24,924 --> 01:10:26,798
People will not have to find the rule, the rule

01:10:26,798 --> 01:10:29,156
will find you, you give it the code,

01:10:29,156 --> 01:10:32,516
and it will drop you on the rule which has

01:10:32,516 --> 01:10:34,829
what is the rule, why is the rule there,

01:10:34,829 --> 01:10:38,437
what is an example of why the rule is there

01:10:38,437 --> 01:10:40,225
and what do you do instead?

01:10:40,225 --> 01:10:42,772
That's where I want to go.

01:10:42,772 --> 01:10:45,304
- Thank you. - I should take one

01:10:45,304 --> 01:10:46,793
from there.

01:10:46,793 --> 01:10:50,844
- All right, so in general, some people would like

01:10:50,844 --> 01:10:53,823
to see in the standards some solution that works

01:10:53,823 --> 01:10:57,758
better for beginners, I'm thinking for example of generating

01:10:57,758 --> 01:10:59,304
random numbers.

01:10:59,304 --> 01:11:01,742
The solution we have in the standard library is great

01:11:01,742 --> 01:11:03,979
for me, an expert, who can use them, but some people

01:11:03,979 --> 01:11:06,223
would like just a simple function and usually

01:11:06,223 --> 01:11:08,776
we can't get those in the standard because there are

01:11:08,776 --> 01:11:13,058
different, you know, needs for different people

01:11:13,058 --> 01:11:15,888
so do you think C++ could use ...

01:11:15,888 --> 01:11:20,040
Just a separate library that just adds some of these ...

01:11:21,220 --> 01:11:24,660
Simple solutions for beginners, new string formatting,

01:11:24,987 --> 01:11:25,820
new ...

01:11:27,278 --> 01:11:30,483
- Do you know the concept of a violent agreement?

01:11:30,483 --> 01:11:34,003
This is when people keep arguing long after they agree

01:11:34,003 --> 01:11:37,526
because they have to be so keen on saying that they agree.

01:11:37,526 --> 01:11:38,814
That's what I feel like now.

01:11:38,814 --> 01:11:41,712
I have been arguing for that for ages.

01:11:41,712 --> 01:11:43,121
I mean ...

01:11:43,121 --> 01:11:47,468
<random> is the random number library that every

01:11:47,468 --> 01:11:50,843
random number library wants to be when it grows up

01:11:50,843 --> 01:11:53,426
and as a result, people use ...

01:11:56,270 --> 01:11:59,437
rand, and they get really bad results.

01:12:01,391 --> 01:12:05,953
And I think, one, the standard committee would do well

01:12:05,953 --> 01:12:09,552
to remember that they should make simple things simple

01:12:09,552 --> 01:12:13,060
and they should put things in the ...

01:12:13,060 --> 01:12:15,060
Standard that help this.

01:12:16,109 --> 01:12:20,258
A very simple random number function, something that can

01:12:20,258 --> 01:12:23,841
compete with rand, should be there, and ...

01:12:25,272 --> 01:12:28,356
so should, say, split, not because I like split most

01:12:28,356 --> 01:12:31,159
but that's when people come in from Java and C#,

01:12:31,159 --> 01:12:32,698
that's what they try for.

01:12:32,698 --> 01:12:36,892
They don't understand how to get it out of iostreams

01:12:36,900 --> 01:12:39,900
so things like that should be there.

01:12:41,360 --> 01:12:44,400
Similarly, for the beginners, I think we should have

01:12:44,408 --> 01:12:48,182
a guaranteed range-checked set of containers

01:12:48,182 --> 01:12:51,728
and I want that portable across all implementations,

01:12:51,728 --> 01:12:52,731
by the way.

01:12:52,731 --> 01:12:54,731
And you can take the ...

01:12:55,808 --> 01:12:57,573
training wheels off later.

01:12:57,573 --> 01:12:59,956
That has something to do with the idea of a package

01:12:59,956 --> 01:13:01,123
for beginners.

01:13:03,091 --> 01:13:05,665
When I was teaching undergrads, there's always one

01:13:05,665 --> 01:13:07,821
smart aleck-y guy.

01:13:07,821 --> 01:13:09,186
It's always a guy.

01:13:09,186 --> 01:13:10,683
The women are smarter.

01:13:10,683 --> 01:13:12,350
Who wants to tell me

01:13:14,430 --> 01:13:16,196
and all of his friends in the class

01:13:16,196 --> 01:13:18,144
that really you don't use vector and string.

01:13:18,144 --> 01:13:20,263
You have to use pointers and malloc because it's

01:13:20,263 --> 01:13:21,513
more efficient.

01:13:22,511 --> 01:13:24,985
No, you shouldn't do that, and I would like to stop them

01:13:24,985 --> 01:13:27,875
from doing it because then they spent their nights

01:13:27,875 --> 01:13:32,860
debugging stuff that they should have finished at dinnertime

01:13:32,860 --> 01:13:37,780
and usually I find this guy and ask why are you doing this?

01:13:38,160 --> 01:13:39,680
Efficiency.

01:13:40,840 --> 01:13:44,740
What optimizer options do you use?

01:13:46,080 --> 01:13:49,100
And usually the answer is, optimizer?

01:13:49,101 --> 01:13:50,478
(audience laughs)

01:13:50,478 --> 01:13:53,712
Okay, so which system are you using?

01:13:53,712 --> 01:13:55,414
Let's pick clang.

01:13:55,414 --> 01:13:58,818
Which optimizer option do you use?

01:13:58,818 --> 01:13:59,848
I don't know.

01:13:59,848 --> 01:14:01,500
Do you use -O2?

01:14:01,980 --> 01:14:03,540
What's -O2?

01:14:04,045 --> 01:14:06,340
You are talking about efficiency and you haven't

01:14:06,340 --> 01:14:08,500
switched on the optimizer.

01:14:09,620 --> 01:14:12,631
Okay, so things like that is important, but I think

01:14:12,631 --> 01:14:14,749
we need a package for beginners

01:14:14,749 --> 01:14:16,962
and it should definitely have the random numbers.

01:14:16,962 --> 01:14:21,828
I love random numbers for getting semi-realistic programs

01:14:21,828 --> 01:14:22,661
to run.

01:14:23,949 --> 01:14:26,772
There are a few little things in the GSL,

01:14:26,772 --> 01:14:30,189
the guideline support library, that helps

01:14:31,215 --> 01:14:32,692
but we hope to put that out of business

01:14:32,692 --> 01:14:34,559
by putting it into the standard

01:14:34,559 --> 01:14:37,895
and that really is help for professionals

01:14:37,895 --> 01:14:39,022
as opposed to beginners.

01:14:39,022 --> 01:14:41,678
It would be nice if there was a beginners' library

01:14:41,678 --> 01:14:45,845
and by the way, don't teach, don't try and teach people

01:14:47,554 --> 01:14:49,971
today in high schools and ...

01:14:53,011 --> 01:14:55,649
early university without a little bit of graphics.

01:14:55,649 --> 01:14:57,196
They don't believe it's real computers

01:14:57,196 --> 01:15:01,724
and it's hard to do because we don't have that package

01:15:01,724 --> 01:15:05,131
that's just install this one, use this one.

01:15:05,131 --> 01:15:08,951
Random is a relatively easy example.

01:15:08,951 --> 01:15:10,735
I have a support library for my course.

01:15:10,735 --> 01:15:13,348
It has random like that in it.

01:15:13,348 --> 01:15:15,747
- [Man] All right, thank you.

01:15:15,747 --> 01:15:17,577
- Yeah, about those packages, the bundles

01:15:17,577 --> 01:15:20,064
that you proposed for beginners and intermediate

01:15:20,064 --> 01:15:24,184
and advanced, those libraries, I mean, they would get

01:15:24,184 --> 01:15:27,504
some extra standing as compared to other libraries,

01:15:27,504 --> 01:15:28,671
so is that ...

01:15:29,552 --> 01:15:30,972
Do you think that should be part of the standard

01:15:30,972 --> 01:15:34,278
or should be just libraries that are developed

01:15:34,278 --> 01:15:36,978
by the community and elevated into the status of being

01:15:36,978 --> 01:15:41,198
part of a bundle or how do you see that working?

01:15:41,198 --> 01:15:44,967
- The standard is and should be tiny compared with what's

01:15:44,967 --> 01:15:49,134
available in the greater world, so the way I imagine

01:15:50,920 --> 01:15:54,680
this system would be not the standard but ...

01:15:55,900 --> 01:15:57,680
packages that ...

01:15:58,360 --> 01:16:00,080
educators or ...

01:16:02,140 --> 01:16:06,320
early developers, junior developers, could use

01:16:06,320 --> 01:16:10,820
and I would hope that it would come out of the community.

01:16:11,180 --> 01:16:15,100
And there are two things we need for that to do.

01:16:15,112 --> 01:16:17,603
We need better package and build systems.

01:16:17,603 --> 01:16:20,052
I know they are being worked on.

01:16:20,052 --> 01:16:22,752
I'm putting this in to encourage people to do more.

01:16:22,752 --> 01:16:25,502
Not to criticize unconstructively

01:16:26,636 --> 01:16:29,642
and we need modules so that I can just grab things

01:16:29,642 --> 01:16:31,757
and be sure they don't interfere with each other.

01:16:31,757 --> 01:16:35,467
I mean, you have some things and you include a file

01:16:35,467 --> 01:16:36,467
and some ...

01:16:37,722 --> 01:16:38,972
Some idiots ...

01:16:40,213 --> 01:16:43,890
10, 15 years ago, defined a macro called min.

01:16:43,890 --> 01:16:45,754
(audience laughs)

01:16:45,754 --> 01:16:49,949
And your code stopped working and you of course will say,

01:16:49,949 --> 01:16:51,479
oh, God, not again.

01:16:51,479 --> 01:16:55,082
A novice would be completely floored.

01:16:55,082 --> 01:16:58,523
It comes out of nowhere, so I think package built systems,

01:16:58,523 --> 01:17:02,106
packages with related build systems and ...

01:17:04,314 --> 01:17:08,353
Modules are very essential for doing good teaching.

01:17:08,353 --> 01:17:10,657
They're essential for other things too.

01:17:10,657 --> 01:17:14,199
I don't see the standards committee doing it.

01:17:14,199 --> 01:17:16,399
The standards committee is a little bit too expert friendly

01:17:16,399 --> 01:17:17,480
in my opinion.

01:17:17,480 --> 01:17:21,124
You've heard me go on about making simple things simple.

01:17:21,124 --> 01:17:23,933
It's not the main focus of most people in the committee

01:17:23,933 --> 01:17:25,350
and so community.

01:17:27,791 --> 01:17:29,607
- [Man] So you would see there being options for, like,

01:17:29,607 --> 01:17:32,255
different bundles for, say graphic libraries, or ...

01:17:32,260 --> 01:17:36,420
- Something like that, yes, yes, but this is sort of ...

01:17:37,460 --> 01:17:39,560
I'm waving my hands here.

01:17:39,560 --> 01:17:42,180
It is not a precise specification.

01:17:43,580 --> 01:17:47,134
- I had a very specific situation not too long ago.

01:17:47,134 --> 01:17:49,005
I was working on a project with my daughter

01:17:49,005 --> 01:17:52,140
who has a very good aptitude for coding.

01:17:52,140 --> 01:17:54,556
But doesn't know C++.

01:17:54,556 --> 01:17:57,698
We were working on a thermostat project,

01:17:57,698 --> 01:18:00,104
has a little graphics, little robotics,

01:18:00,104 --> 01:18:04,381
kind of stuff to keep you interested, good stuff.

01:18:04,381 --> 01:18:06,837
I did what I thought was a good thing.

01:18:06,837 --> 01:18:09,990
I created a little abstraction for getting the temperature

01:18:09,990 --> 01:18:13,740
off the temperature sensor and I gave her a task to do

01:18:13,740 --> 01:18:16,081
with this and I found that the amount of C++ I needed

01:18:16,081 --> 01:18:18,331
to teach her was beyond ...

01:18:20,296 --> 01:18:24,582
And she's a college student, so it's not like she has no

01:18:24,582 --> 01:18:26,530
attention span, but it was beyond her attention span

01:18:26,530 --> 01:18:29,755
and I was wondering what your thoughts are on that

01:18:29,755 --> 01:18:31,887
in terms of getting started with something

01:18:31,887 --> 01:18:33,494
that's gonna do something concrete,

01:18:33,494 --> 01:18:37,318
it's gonna click some relays, it's gonna show something

01:18:37,318 --> 01:18:39,068
on a display, but ...

01:18:40,732 --> 01:18:44,102
It seems like even the simplest thing requires the first

01:18:44,102 --> 01:18:47,647
entire semester of C++ to do.

01:18:47,647 --> 01:18:50,730
- That is a major part of the problem

01:18:51,771 --> 01:18:55,252
and if you tell them to download the library that makes it

01:18:55,252 --> 01:18:58,071
easier to use and install it,

01:18:58,071 --> 01:19:00,571
that's beyond them too, so ...

01:19:03,669 --> 01:19:06,980
That's actually the deeper reason I was going on

01:19:06,980 --> 01:19:08,085
about packaging and modules.

01:19:08,085 --> 01:19:10,813
We badly, badly need modules and we badly, badly need

01:19:10,813 --> 01:19:14,980
modules that can do the simple clean things simply.

01:19:16,985 --> 01:19:19,232
- [Man] Right, but I'd even gone beyond that because

01:19:19,232 --> 01:19:20,739
we didn't need the modules, I already had ...

01:19:20,739 --> 01:19:24,010
- Wait, wait, wait, I'm just getting warmed up here.

01:19:24,010 --> 01:19:26,843
(audience laughs)

01:19:29,443 --> 01:19:32,837
Then we need libraries that are actually aimed at

01:19:32,837 --> 01:19:35,840
people who are not CS majors

01:19:35,840 --> 01:19:39,096
and a lot of our libraries are aimed at CS majors,

01:19:39,096 --> 01:19:44,007
written by and for CS majors, that's very, very limiting.

01:19:44,007 --> 01:19:47,699
You need things that go beyond that.

01:19:47,699 --> 01:19:50,103
I know that's a session at this conference on Friday

01:19:50,103 --> 01:19:52,360
that I would have gone to if I had been in town,

01:19:52,360 --> 01:19:53,984
but I have to be somewhere else.

01:19:53,984 --> 01:19:56,812
I think that addresses something.

01:19:56,812 --> 01:20:00,493
The people that are starting with young kids

01:20:00,493 --> 01:20:04,175
are actually getting some of the ideas that will apply

01:20:04,175 --> 01:20:06,925
to novices of all ages, and as I point out,

01:20:06,925 --> 01:20:10,716
I'm a novice in many fields most of the time, so ...

01:20:10,716 --> 01:20:14,620
I'm not being ... (sighs)

01:20:14,620 --> 01:20:16,037
Patronizing here.

01:20:17,876 --> 01:20:18,709
And ...

01:20:23,016 --> 01:20:26,716
For some people, something like Raspberry Pi is just

01:20:26,716 --> 01:20:27,549
wonderful.

01:20:29,206 --> 01:20:33,402
And that's an adult thing, too, not just for kids,

01:20:33,402 --> 01:20:37,409
so we need to do more and better, but I can't be concrete

01:20:37,409 --> 01:20:40,022
on your example, it's ...

01:20:40,022 --> 01:20:44,180
You're touching in the middle of a very hard problem.

01:20:46,040 --> 01:20:49,040
- Hey, there, I'm gonna switch gears a little bit

01:20:49,044 --> 01:20:50,468
from what we've been talking about, although I think

01:20:50,468 --> 01:20:51,467
you just touched on it.

01:20:51,467 --> 01:20:53,665
At the very beginning of your talk, you talked about

01:20:53,665 --> 01:20:56,893
how your aim is mostly towards students who are going

01:20:56,893 --> 01:20:59,686
to be professional software engineers in some sense,

01:20:59,686 --> 01:21:01,350
do some software work professionally,

01:21:01,350 --> 01:21:03,909
but how do you feel about programming also

01:21:03,909 --> 01:21:06,342
just as a way to teach rigorous critical thinking

01:21:06,342 --> 01:21:09,670
to anybody, like how we teach math to everyone,

01:21:09,670 --> 01:21:12,006
not just people who are gonna be technical,

01:21:12,006 --> 01:21:14,062
and how would that change your aims as a teacher?

01:21:14,062 --> 01:21:16,312
- I think that's important.

01:21:18,296 --> 01:21:20,429
Traditionally in our culture we have used mathematics

01:21:20,429 --> 01:21:21,846
for that, and ...

01:21:23,837 --> 01:21:25,953
people aren't getting enough mathematics in my opinion.

01:21:25,953 --> 01:21:30,075
You can do programming as a far more concrete

01:21:30,075 --> 01:21:34,116
and instant feedback form of learning critical thinking,

01:21:34,116 --> 01:21:36,283
learning precise thinking.

01:21:38,643 --> 01:21:41,551
Code is very good at hitting back where you are

01:21:41,551 --> 01:21:45,453
thinking in a wooly manner and for that

01:21:45,453 --> 01:21:47,964
I think the most important thing is that you don't make it

01:21:47,964 --> 01:21:51,843
too easy and in particular you don't make it fuzzy.

01:21:51,843 --> 01:21:55,176
There are a lot of work done so that ...

01:21:56,729 --> 01:22:00,729
If you say something, it'll do something and ...

01:22:01,758 --> 01:22:03,840
It's not too fuzzy about what it is.

01:22:03,840 --> 01:22:07,032
If what you are wanting to teach is precise,

01:22:07,032 --> 01:22:10,032
scientific thinking, precise things.

01:22:11,033 --> 01:22:15,200
The reason I focused more on the software developers

01:22:16,955 --> 01:22:19,426
was that's what I know best.

01:22:19,426 --> 01:22:22,506
I'm very reluctant to say precise things

01:22:22,506 --> 01:22:25,345
about things I haven't actually tried myself

01:22:25,345 --> 01:22:29,144
and so I mentioned it as an important area

01:22:29,144 --> 01:22:31,396
but I think it's an important area

01:22:31,396 --> 01:22:35,563
that takes some serious work by somebody who isn't me.

01:22:36,863 --> 01:22:38,363
- [Man] Thank you.

01:22:40,423 --> 01:22:44,260
- Yes, two comments, one is on the ...

01:22:44,260 --> 01:22:45,862
the guidelines themselves.

01:22:45,862 --> 01:22:48,609
I think that's probably one of the best things I've seen

01:22:48,609 --> 01:22:52,276
toward the language in the last two decades.

01:22:53,419 --> 01:22:55,977
A problem, though, is that ...

01:22:55,977 --> 01:22:59,604
I was trying to encourage a section of my company

01:22:59,604 --> 01:23:02,304
to use it and they happen to be in Germany

01:23:02,304 --> 01:23:06,417
and they didn't really understand the preamble.

01:23:06,417 --> 01:23:10,818
They didn't get the joke, actually, about it being

01:23:10,818 --> 01:23:13,175
incomplete and such ...

01:23:13,175 --> 01:23:16,842
- [Bjarne] Oh, that one, yes, yes, we're ...

01:23:18,052 --> 01:23:19,385
Okay, I mean ...

01:23:21,783 --> 01:23:24,663
There's a joke about Germans lurking here.

01:23:24,663 --> 01:23:26,049
(audience laughs)

01:23:26,049 --> 01:23:26,966
But the ...

01:23:30,602 --> 01:23:33,570
Yes, maybe it's time to take that one away.

01:23:33,570 --> 01:23:37,737
It's a saying that we're using in some of the drafts at ...

01:23:39,262 --> 01:23:42,681
In the standard documents and in the proposals,

01:23:42,681 --> 01:23:46,436
yes, you're right, that may have outlived its purpose

01:23:46,436 --> 01:23:49,768
and jokes don't travel culturally.

01:23:49,768 --> 01:23:53,310
I know that, and I think I slipped up there, thanks.

01:23:53,310 --> 01:23:57,570
- And the, one of the difficulties is that ...

01:23:57,570 --> 01:23:59,410
I work in a highly regulated industry

01:23:59,410 --> 01:24:01,908
in the medical devices industry,

01:24:01,908 --> 01:24:05,575
and getting GSL to be used as the library is

01:24:10,868 --> 01:24:14,145
difficult because there doesn't seem to be any

01:24:14,145 --> 01:24:18,780
stated direction as to when it's going to be proposed

01:24:18,780 --> 01:24:23,667
or entered and so having that guidance there as to ...

01:24:23,667 --> 01:24:27,040
You know, at what level it's going to be proposed into

01:24:27,040 --> 01:24:31,262
the main standard library or what track it's going to be on

01:24:31,262 --> 01:24:35,420
would be nice, especially since some of our code is ...

01:24:37,860 --> 01:24:39,260
vintage.

01:24:39,861 --> 01:24:40,700
- Yeah.

01:24:41,651 --> 01:24:45,131
There's always the inertia of old code and old think

01:24:45,131 --> 01:24:48,294
and that we have to fight in every industry.

01:24:48,294 --> 01:24:50,925
I work in a highly regulated industry.

01:24:50,925 --> 01:24:55,111
Well, people don't die if we screw up but they may

01:24:55,111 --> 01:24:57,175
jump out of windows with the same effect

01:24:57,175 --> 01:25:01,214
when they get ruined, so we have some of those problems

01:25:01,214 --> 01:25:05,297
and we have gotten permission from our regulators

01:25:07,520 --> 01:25:11,020
to use things like that so it can be done.

01:25:12,124 --> 01:25:12,957
But ...

01:25:13,896 --> 01:25:18,063
I hope I said it somewhere in the guideline preamble that

01:25:19,625 --> 01:25:23,794
we need specific guidelines for specific areas

01:25:23,794 --> 01:25:26,750
and we just haven't gotten there yet.

01:25:26,750 --> 01:25:30,083
It is still the core guidelines, but ...

01:25:31,170 --> 01:25:35,337
If you look forward 10 years time, I would expect there

01:25:36,570 --> 01:25:41,437
would be the medical appendix and the financial appendix

01:25:41,437 --> 01:25:45,604
that has specific rules, supports and restrictions

01:25:47,147 --> 01:25:49,230
suitable for an industry.

01:25:50,848 --> 01:25:53,642
I know most of us have to worry a lot about

01:25:53,642 --> 01:25:56,492
the next release and the next quarter.

01:25:56,492 --> 01:26:01,471
I try reasonably hard to think about sort of five years,

01:26:01,471 --> 01:26:05,579
10 years, out in the future because it is going to come

01:26:05,579 --> 01:26:08,522
incrementally from what we are doing today.

01:26:08,522 --> 01:26:12,689
The core guidelines is good and it'll be much better

01:26:13,799 --> 01:26:17,204
in the future but boy, do I wish it was moving faster

01:26:17,204 --> 01:26:20,193
and we had better support and better enforcement

01:26:20,193 --> 01:26:21,878
and things like that.

01:26:21,878 --> 01:26:26,552
I guess I'm somewhat impatient with a lot of things.

01:26:26,552 --> 01:26:28,843
- [Man] The one from Microsoft works for most things,

01:26:28,843 --> 01:26:33,464
but it's also nice that there's a single header

01:26:33,464 --> 01:26:37,960
GSL light one that actually goes back to more ancient code.

01:26:37,960 --> 01:26:38,793
- It's ...

01:26:40,858 --> 01:26:44,284
A lot of these things work together.

01:26:44,284 --> 01:26:47,534
I can't wait till I can say without ...

01:26:49,683 --> 01:26:50,600
Caveats ...

01:26:52,667 --> 01:26:57,026
Use concepts for all of your template arguments.

01:26:57,026 --> 01:27:00,220
If you want a fully generic ...

01:27:00,900 --> 01:27:04,040
piece of template argument,

01:27:05,140 --> 01:27:06,460
say so.

01:27:06,469 --> 01:27:07,902
Like ...

01:27:07,902 --> 01:27:09,410
Define the concept takes everything

01:27:09,410 --> 01:27:13,578
and use modules to make sure that you don't get

01:27:13,578 --> 01:27:16,908
infestation from other people's macros and type defs

01:27:16,908 --> 01:27:20,991
and that works together with the views in the ...

01:27:22,507 --> 01:27:23,944
Core guidelines.

01:27:23,944 --> 01:27:25,725
There are things that we can do much better

01:27:25,725 --> 01:27:29,180
with what in my opinion should have been 17,

01:27:29,180 --> 01:27:33,176
but not everything can be 17 so let's go for 20.

01:27:33,176 --> 01:27:35,850
And the guidelines will be better for it.

01:27:35,850 --> 01:27:40,286
And from my perspective, it's the same kind of thinking

01:27:40,286 --> 01:27:42,703
for getting us to the future.

01:27:45,819 --> 01:27:48,604
- He was talking about how using libraries is important

01:27:48,604 --> 01:27:51,943
and how writing around linked list is probably not

01:27:51,943 --> 01:27:53,775
the best idea and I can't agree more,

01:27:53,775 --> 01:27:57,942
but, say, like 10 years ago, when I was writing my first

01:27:59,091 --> 01:28:02,508
application, I invented my own atomic,

01:28:03,344 --> 01:28:05,796
so the bad news was it was actually used in production

01:28:05,796 --> 01:28:10,096
but the good news is that I learned a lot while doing this

01:28:10,096 --> 01:28:13,532
and you might have heard they say that you're not

01:28:13,532 --> 01:28:15,864
a real programmer if you didn't implement your own

01:28:15,864 --> 01:28:18,781
string class, so the question is...

01:28:19,720 --> 01:28:21,743
If we have a generation of software developers

01:28:21,743 --> 01:28:26,106
who didn't implement most of basic constructs

01:28:26,106 --> 01:28:29,592
but they already learned to use ready abstractions

01:28:29,592 --> 01:28:34,227
and libraries, should we miss something or maybe this

01:28:34,227 --> 01:28:35,375
is the right way to go?

01:28:35,375 --> 01:28:38,636
- If we don't teach people how to do lower level software

01:28:38,636 --> 01:28:42,047
we get a generation of programmers that only know

01:28:42,047 --> 01:28:45,214
how to use a library and that's wrong.

01:28:46,378 --> 01:28:48,503
When I teach people, when I teach freshman,

01:28:48,503 --> 01:28:50,313
I teach them how to implement vector

01:28:50,313 --> 01:28:54,376
because they need to know about pointers and freestore

01:28:54,376 --> 01:28:58,010
and they need to screw up so that they see it's good

01:28:58,010 --> 01:29:01,644
to encapsulate it and those problems don't happen anymore.

01:29:01,644 --> 01:29:02,980
When I teach ...

01:29:07,060 --> 01:29:08,900
Later on, I ...

01:29:10,360 --> 01:29:12,200
Very often have people

01:29:13,584 --> 01:29:15,667
design implement a string

01:29:16,566 --> 01:29:18,250
so that they can see how it's done

01:29:18,250 --> 01:29:22,228
and so I can show them how they could have done it better,

01:29:22,228 --> 01:29:26,395
so yes, we need to get down to at least the C++

01:29:28,273 --> 01:29:30,919
memory model at some point.

01:29:30,919 --> 01:29:32,415
Otherwise we teach people magic.

01:29:32,415 --> 01:29:35,117
So you have to get down there somewhere.

01:29:35,117 --> 01:29:36,402
I thoroughly agree with that.

01:29:36,402 --> 01:29:39,892
On the other hand, I don't think everybody needs to write

01:29:39,892 --> 01:29:41,106
a lock-free code.

01:29:41,106 --> 01:29:45,273
If you are a computer science major and if you are

01:29:46,340 --> 01:29:49,757
specializing in sort of engineering uses,

01:29:50,901 --> 01:29:53,981
yes you must do that, but not everybody.

01:29:53,981 --> 01:29:56,569
But yes, you have to reach some level of abstraction

01:29:56,569 --> 01:29:58,427
that is good for what you are doing

01:29:58,427 --> 01:30:00,522
and for computer scientists I really think

01:30:00,522 --> 01:30:03,087
they should know how vector is implemented

01:30:03,087 --> 01:30:04,254
in some extent

01:30:05,601 --> 01:30:07,693
and how the string is implemented.

01:30:07,693 --> 01:30:10,733
They should know how to do the short string optimization,

01:30:10,733 --> 01:30:13,650
for instance, then they understand.

01:30:14,581 --> 01:30:16,874
- That is great when you teach your students, right,

01:30:16,874 --> 01:30:18,732
and imagine that you have a junior, for example,

01:30:18,732 --> 01:30:21,636
in your company and you see that he's trying to implement

01:30:21,636 --> 01:30:24,073
some basic stuff, and you tell him, don't do this,

01:30:24,073 --> 01:30:25,957
it's already done, yeah, that's great.

01:30:25,957 --> 01:30:29,185
But perhaps he was trying to implement it

01:30:29,185 --> 01:30:31,392
because he don't actually get how it works

01:30:31,392 --> 01:30:33,506
and he don't want to be using magic.

01:30:33,506 --> 01:30:36,290
So from a practical point of view, I don't want him

01:30:36,290 --> 01:30:39,273
to write it, but from the education point of view it would

01:30:39,273 --> 01:30:41,632
be convenient to do this.

01:30:41,632 --> 01:30:45,799
- In a concrete way, look at chapters 17 and 18 of the

01:30:47,399 --> 01:30:48,232
swan book.

01:30:49,919 --> 01:30:51,531
I have done that for 10 years.

01:30:51,531 --> 01:30:54,298
That's the vector implementation.

01:30:54,298 --> 01:30:58,502
It's a way of trying to address your concern

01:30:58,502 --> 01:31:01,911
for first year students, people who have never seen

01:31:01,911 --> 01:31:04,969
a line of code before they started chapter one

01:31:04,969 --> 01:31:08,636
so I don't drift into just the stratosphere.

01:31:09,810 --> 01:31:12,560
That's not what I'm recommending.

01:31:18,362 --> 01:31:20,998
- So for, you're talking about Raspberry Pi.

01:31:20,998 --> 01:31:23,052
I ended up doing a summer project on one

01:31:23,052 --> 01:31:25,835
and I ended up doing it with Python, which was nasty,

01:31:25,835 --> 01:31:28,624
but so with your talk of modules,

01:31:28,624 --> 01:31:31,247
for the Raspberry Pi there's a lot of stuff

01:31:31,247 --> 01:31:32,399
with setting up I2C connections,

01:31:32,399 --> 01:31:34,180
for connecting different components,

01:31:34,180 --> 01:31:37,597
setting up the different PWMs on the pins

01:31:38,528 --> 01:31:41,293
so would you have like a module for Raspberry Pi

01:31:41,293 --> 01:31:44,535
that's specific for the Pi or ...

01:31:44,535 --> 01:31:47,597
- I think when you get to real hardware,

01:31:47,597 --> 01:31:50,473
you need dedicated facilities to make that hardware

01:31:50,473 --> 01:31:54,532
reasonable to use, yes, and so I would expect

01:31:54,532 --> 01:31:57,485
once we get modules in the language, C++ 20,

01:31:57,485 --> 01:31:59,652
that was not ready for 17,

01:32:00,660 --> 01:32:04,743
I would hope that Raspberry Pi would have a basic

01:32:06,252 --> 01:32:11,041
Raspberry Pi support module or something like that.

01:32:11,041 --> 01:32:12,796
- [Man] That'd be great because it's another thing

01:32:12,796 --> 01:32:15,447
like you said where it's good to have interfaces and stuff

01:32:15,447 --> 01:32:20,062
which Python has a very simple Windows 98 one.

01:32:20,062 --> 01:32:23,845
- I know, I know, I know, hence the talk about

01:32:23,845 --> 01:32:26,764
photography, I wish I could have done that talk

01:32:26,764 --> 01:32:31,308
for C++, but I can't, later. - Thank you.

01:32:31,308 --> 01:32:32,141
- Hello.

01:32:34,453 --> 01:32:36,741
So I volunteer teaching high school kids

01:32:36,741 --> 01:32:40,908
and there is always the question, I'll give an example.

01:32:41,803 --> 01:32:44,210
For example, when I teach operator overloading

01:32:44,210 --> 01:32:47,741
or stuff like that, so and I'm teaching them, like,

01:32:47,741 --> 01:32:50,326
copy constructors and operator equals,

01:32:50,326 --> 01:32:53,383
there will always be the student that will ask about

01:32:53,383 --> 01:32:56,658
move semantics and stuff like that because they are

01:32:56,658 --> 01:32:58,987
sitting with their laptops and they'll google it

01:32:58,987 --> 01:33:02,736
so how would you go about finding the golden ratio

01:33:02,736 --> 01:33:05,319
between what's essential to ...

01:33:06,621 --> 01:33:10,788
Like, teach them modern stuff but also not overwhelming?

01:33:12,014 --> 01:33:13,014
- I mean ...

01:33:14,589 --> 01:33:16,392
That's a very very hard question.

01:33:16,392 --> 01:33:18,059
I don't really know.

01:33:19,414 --> 01:33:22,089
I can point to the swan book.

01:33:22,089 --> 01:33:24,570
When I had the concrete problem, not for high school

01:33:24,570 --> 01:33:28,926
students but for freshman, that was my solution

01:33:28,926 --> 01:33:30,176
and I think ...

01:33:33,520 --> 01:33:36,437
Some of that is pretty fundamental.

01:33:37,361 --> 01:33:38,966
If you are dealing with people who want to be

01:33:38,966 --> 01:33:41,352
software developers, you have to go through

01:33:41,352 --> 01:33:43,741
the usual stuff, you have to show them what a loop is,

01:33:43,741 --> 01:33:45,986
what a function is, how to build a class,

01:33:45,986 --> 01:33:49,819
how to use a class and you will eventually ...

01:33:50,908 --> 01:33:55,075
Think it's chapter 10, get to move semantics and such.

01:33:55,938 --> 01:34:00,116
For high school students, you can't quite do that.

01:34:00,116 --> 01:34:03,229
One of the problems is that people always read ahead

01:34:03,229 --> 01:34:05,582
and they want to try something else.

01:34:05,582 --> 01:34:07,696
That was what I said these people that decided

01:34:07,696 --> 01:34:11,022
that pointers and malloc were cool.

01:34:11,022 --> 01:34:14,118
And they wanted to be the cool kids and corrupting

01:34:14,118 --> 01:34:15,035
the others.

01:34:16,878 --> 01:34:19,461
That's always a problem and ...

01:34:21,427 --> 01:34:23,651
I think a good teacher will find a way of handling

01:34:23,651 --> 01:34:27,195
the students, knowing the students and such.

01:34:27,195 --> 01:34:31,362
What you can do in preparation is to have a curriculum

01:34:32,538 --> 01:34:34,989
that provides abstractions that's relevant to what

01:34:34,989 --> 01:34:37,987
they're doing so that you can say, yeah, you can do that

01:34:37,987 --> 01:34:40,654
but if you use this one for now,

01:34:46,982 --> 01:34:49,436
you'll get to bed at a reasonable time.

01:34:49,436 --> 01:34:52,811
I mean, do you really want to stay up past midnight

01:34:52,811 --> 01:34:54,680
debugging all the time?

01:34:54,680 --> 01:34:57,732
And sometimes when this happened to me,

01:34:57,732 --> 01:35:01,076
somebody heard of move semantics just when I'm trying

01:35:01,076 --> 01:35:05,506
to teach them how to write a string out to ...

01:35:05,506 --> 01:35:06,339
to output.

01:35:07,493 --> 01:35:08,743
I say, well ...

01:35:11,905 --> 01:35:13,597
We'll get to it.

01:35:13,597 --> 01:35:15,590
They don't like that answer but sometimes it's the only

01:35:15,590 --> 01:35:18,573
answer, otherwise you end up doing bottom up

01:35:18,573 --> 01:35:21,719
and with bottom up you never reach where you want to get

01:35:21,719 --> 01:35:25,469
there, all the time is spent inventing macros

01:35:27,035 --> 01:35:29,055
for hiding malloc so that you can catch errors

01:35:29,055 --> 01:35:31,061
and things like that.

01:35:31,061 --> 01:35:32,237
You don't want to go there.

01:35:32,237 --> 01:35:33,070
So ...

01:35:35,604 --> 01:35:40,178
Try for suitable abstractions for your people

01:35:40,178 --> 01:35:43,379
and try and deal with what's ...

01:35:43,379 --> 01:35:44,879
What then happens.

01:35:47,322 --> 01:35:48,926
We are over time.

01:35:48,926 --> 01:35:50,401
So ...

01:35:50,401 --> 01:35:52,151
Maybe we should stop.

01:35:53,135 --> 01:35:57,755
I will be around today or tomorrow so try and catch me.

01:35:57,755 --> 01:36:00,159
There are people streaming out in the back,

01:36:00,159 --> 01:36:02,318
which is fair, since we're 10 minutes over,

01:36:02,318 --> 01:36:04,478
so I'd like to cut it now.

01:36:04,478 --> 01:36:07,083
Sorry for you standing up there, thank you.

01:36:07,083 --> 01:36:09,833
(audience claps)

01:36:18,163 --> 01:36:19,927
- Bash Films can shoot your event with multiple cameras,

01:36:19,927 --> 01:36:22,644
link to presentation slides, add titles

01:36:22,644 --> 01:36:26,085
and edit your event live for a full broadcast experience.

01:36:26,085 --> 01:36:27,541
- How is this even working?

01:36:27,541 --> 01:36:30,417
So this is an even more interesting program to, you know,

01:36:30,417 --> 01:36:32,500
look at in a lot of ways.

01:36:34,142 --> 01:36:36,189
So let's profile it.

01:36:36,189 --> 01:36:37,968
Give it a little bit of time to do a profile for us.

01:36:37,968 --> 01:36:42,292
See exactly what it is that's making this faster or slower

01:36:42,292 --> 01:36:43,676
based on the different inputs.

01:36:43,676 --> 01:36:45,813
You can really gain a lot of insight by looking

01:36:45,813 --> 01:36:48,330
at the profile like this.

01:36:48,330 --> 01:36:49,543
- I worked at Sesame Street.

01:36:49,543 --> 01:36:51,539
I got brought on to be a writer's assistant

01:36:51,539 --> 01:36:53,728
on a show called Sesame Street English,

01:36:53,728 --> 01:36:56,754
which was to teach English to kids in China and Japan.

01:36:56,754 --> 01:36:59,320
It seems very simple, the shows that they put together.

01:36:59,320 --> 01:37:02,601
But it's actually really hard to design a show

01:37:02,601 --> 01:37:07,379
that is not only for young kids but also the parents.

01:37:07,379 --> 01:37:09,446
- Confession like this is therapeutic.

01:37:09,446 --> 01:37:11,449
I hope you all get something out of this, but if you don't

01:37:11,449 --> 01:37:14,209
the therapy will have been good for me, so thank you.

01:37:14,209 --> 01:37:16,040
(audience laughs)

01:37:16,040 --> 01:37:19,240
Seven years ago I was working, I wasn't working at Google.

01:37:19,240 --> 01:37:21,776
It was for my previous employer, which was a large

01:37:21,776 --> 01:37:23,180
multinational investment bank.

01:37:23,180 --> 01:37:27,605
I had what was up to that point the worst day of my career.

01:37:27,605 --> 01:37:29,147
- And then came the anger.

01:37:29,147 --> 01:37:32,397
Anger at ourselves because we knew we were responsible

01:37:32,397 --> 01:37:35,314
for America's first space disaster.

01:37:36,187 --> 01:37:38,654
We wrote two more words into our vocabulary

01:37:38,654 --> 01:37:41,652
as mission controllers, tough and competent.

01:37:41,652 --> 01:37:43,538
Tough meaning we will never again shirk from our

01:37:43,538 --> 01:37:45,989
responsibilities because we are forever accountable

01:37:45,989 --> 01:37:47,135
for what we do.

01:37:47,135 --> 01:37:50,139
Competent, we'll never again take anything for granted.

01:37:50,139 --> 01:37:51,476
We will never stop learning.

01:37:51,476 --> 01:37:54,940
From now on the teams in mission control will be perfect.

01:37:54,940 --> 01:37:58,362
Because as a team, we must never fail.

01:37:58,362 --> 01:37:59,862
- One other thing.

01:38:01,738 --> 01:38:04,445
We're all in a very fortunate position,

01:38:04,445 --> 01:38:06,720
we've been very lucky in our lives and so forth

01:38:06,720 --> 01:38:11,453
and I think as part of the mission it's also good sometimes

01:38:11,453 --> 01:38:14,478
to take that fortune and give back.

01:38:14,478 --> 01:38:17,228
(audience claps)

01:38:19,004 --> 01:38:21,163
To make sure that we take this platform

01:38:21,163 --> 01:38:23,770
and use it towards worthy causes.

01:38:23,770 --> 01:38:25,262
That's good karma.

01:38:25,262 --> 01:38:27,972
That's good stuff in the universe.

01:38:27,972 --> 01:38:29,534
- We understand that your event will have needs

01:38:29,534 --> 01:38:31,231
that are specific to your organization.

01:38:31,231 --> 01:38:33,814
Please, email or call us directly to discuss

01:38:33,814 --> 01:38:35,563
your particular event.

01:38:35,563 --> 01:38:37,191
We look forward to discussing your goals

01:38:37,191 --> 01:38:40,358

YouTube URL: https://www.youtube.com/watch?v=fX2W3nNjJIo


