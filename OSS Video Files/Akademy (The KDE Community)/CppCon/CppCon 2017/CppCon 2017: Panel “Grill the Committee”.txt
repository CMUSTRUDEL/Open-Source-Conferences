Title: CppCon 2017: Panel “Grill the Committee”
Publication date: 2017-10-09
Playlist: CppCon 2017
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
What would you like to know about the C++ standard?

Join us for a panel discussion with the leaders of the C++ standards committee where the audience asks the questions.

This we've got the the chairs of the Core Evolution and Language Evolution working groups, joined by the primary authors of such major upcoming features as concepts, metaclasses, ranges, modules, coroutines, compile time programming, and the spaceship operator.
— 
Moderator: Jon Kalb
Panel: Louis Dionne, Eric Niebler, Gor Nishanov, Gabriel Dos Reis, Bjarne Stroustrup, Herb Sutter, Andrew Sutton, Ville Voutilainen, Titus Winters
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,060 --> 00:00:12,809
good evening hope everyone's having a

00:00:03,419 --> 00:00:14,519
good conference so far all right so

00:00:12,809 --> 00:00:16,890
tonight is grilled the committee this is

00:00:14,519 --> 00:00:19,680
your opportunity to ask questions of the

00:00:16,890 --> 00:00:21,480
people who are defining the the

00:00:19,680 --> 00:00:32,399
architecture the language of language

00:00:21,480 --> 00:00:35,610
moves but can you guys work on that if

00:00:32,399 --> 00:00:41,040
some kind of echo can you maybe take me

00:00:35,610 --> 00:00:42,030
down a little bit my wife could help you

00:00:41,040 --> 00:00:49,020
with that because she's been trying to

00:00:42,030 --> 00:00:50,670
take me down a lot anyway so this turns

00:00:49,020 --> 00:00:52,620
out to not be the entire committee

00:00:50,670 --> 00:00:56,460
I'm not certain we can put the entire

00:00:52,620 --> 00:00:58,649
committee on this stage but we we have a

00:00:56,460 --> 00:01:00,510
few individuals who are going to have to

00:00:58,649 --> 00:01:03,180
you know bear the brunt of the grilling

00:01:00,510 --> 00:01:05,580
for this evening I want to talk about

00:01:03,180 --> 00:01:10,770
why the particular individuals that are

00:01:05,580 --> 00:01:12,390
here are here so we have the tightest

00:01:10,770 --> 00:01:14,700
winners is the incoming

00:01:12,390 --> 00:01:16,170
I just asking this a second ago the gift

00:01:14,700 --> 00:01:19,490
will get the curve of the correct type

00:01:16,170 --> 00:01:22,470
the incoming library working group chair

00:01:19,490 --> 00:01:24,330
evolution library evolution all right

00:01:22,470 --> 00:01:25,759
so I managed to screw that one up let's

00:01:24,330 --> 00:01:26,880
see if I can screw it up for a veal a -

00:01:25,759 --> 00:01:28,439
okay

00:01:26,880 --> 00:01:29,520
he pointed I referred to it as core

00:01:28,439 --> 00:01:30,450
evolution of course they don't call it

00:01:29,520 --> 00:01:33,000
core evolution they just call it

00:01:30,450 --> 00:01:35,159
evolution so he is the chair of the

00:01:33,000 --> 00:01:37,920
evolution working group all right okay

00:01:35,159 --> 00:01:40,350
so other than these two and herb who is

00:01:37,920 --> 00:01:41,909
the convener of the of the committee

00:01:40,350 --> 00:01:44,280
everyone here is here because of a

00:01:41,909 --> 00:01:46,590
particular feature that they've been

00:01:44,280 --> 00:01:47,820
associated with champion so the first

00:01:46,590 --> 00:01:50,189
question I'm gonna ask you is to

00:01:47,820 --> 00:01:53,340
introduce yourself and talk about what

00:01:50,189 --> 00:01:55,799
that feature is what its status is how

00:01:53,340 --> 00:01:57,689
far along is it where we got and I think

00:01:55,799 --> 00:01:59,219
most people I hope most people know the

00:01:57,689 --> 00:02:00,509
details I don't think we have to go into

00:01:59,219 --> 00:02:03,350
that but just tell us a little bit about

00:02:00,509 --> 00:02:03,350
what the features about

00:02:05,770 --> 00:02:10,179
my name is Andrew Sutton I am the

00:02:07,840 --> 00:02:11,440
project editor will formerly the project

00:02:10,179 --> 00:02:15,460
editor for the concepts technical

00:02:11,440 --> 00:02:23,800
specification I helped bring concepts

00:02:15,460 --> 00:02:26,230
into C++ 20 half of it anyways an

00:02:23,800 --> 00:02:27,310
important subset got added to C++ we are

00:02:26,230 --> 00:02:29,440
we are still trying to work out the

00:02:27,310 --> 00:02:32,380
remainder of it but hopefully that'll

00:02:29,440 --> 00:02:36,160
happen by C++ 20 also so this so the

00:02:32,380 --> 00:02:38,010
status is it's in voted in the its

00:02:36,160 --> 00:02:40,030
voting the working draft for it for 20

00:02:38,010 --> 00:02:41,560
yes the working draft has been voted

00:02:40,030 --> 00:02:43,480
into C++ 20 okay

00:02:41,560 --> 00:02:46,510
although the working draft lost half of

00:02:43,480 --> 00:02:51,520
its weight in Toronto well trust me

00:02:46,510 --> 00:02:53,140
losing weight is not an easy okay you

00:02:51,520 --> 00:02:55,060
can pass I've already introduced new

00:02:53,140 --> 00:02:57,160
types there we go my name is Louie

00:02:55,060 --> 00:02:58,900
I represent Amazon and a Christmas

00:02:57,160 --> 00:03:02,020
committee I'm also a member of the

00:02:58,900 --> 00:03:03,790
Canadian delegation and I work mostly on

00:03:02,020 --> 00:03:04,300
language level support for meta

00:03:03,790 --> 00:03:07,120
programming

00:03:04,300 --> 00:03:09,489
so making template metaprogramming my

00:03:07,120 --> 00:03:12,310
sir I also do some tweaks to make

00:03:09,489 --> 00:03:20,769
lambdas better like template lambdas and

00:03:12,310 --> 00:03:22,750
stuff like that so my name is Dee Blair

00:03:20,769 --> 00:03:26,049
I work for Facebook

00:03:22,750 --> 00:03:28,030
I am the prime mover of the ranges

00:03:26,049 --> 00:03:31,150
technical specification and former

00:03:28,030 --> 00:03:32,890
project editor the range is technical

00:03:31,150 --> 00:03:34,660
specification was sent off for

00:03:32,890 --> 00:03:36,530
publication at the last committee

00:03:34,660 --> 00:03:40,300
meeting

00:03:36,530 --> 00:03:40,300
[Applause]

00:03:40,360 --> 00:03:44,690
super excited about that which means

00:03:43,220 --> 00:03:46,760
that I can you know stop having to

00:03:44,690 --> 00:03:50,930
process folk reports on the ranges

00:03:46,760 --> 00:03:55,190
technical specification and other than

00:03:50,930 --> 00:03:56,750
that the the ranges work is based on my

00:03:55,190 --> 00:03:58,430
my range for you three library the

00:03:56,750 --> 00:04:00,410
ranges technical specifications only a

00:03:58,430 --> 00:04:05,960
small subset of it so I still have

00:04:00,410 --> 00:04:09,260
plenty of work left to do Oh Gabriel dos

00:04:05,960 --> 00:04:12,590
tres I work for Microsoft on the C++

00:04:09,260 --> 00:04:15,430
team currently I'm the project editor

00:04:12,590 --> 00:04:18,170
for the modules technical specification

00:04:15,430 --> 00:04:22,610
at the last summer's meeting in Toronto

00:04:18,170 --> 00:04:25,310
it was sent out as PDT espera PDT s

00:04:22,610 --> 00:04:28,730
means proposed draft technical

00:04:25,310 --> 00:04:34,580
specification it's still on the ballots

00:04:28,730 --> 00:04:36,590
and I hope that by our pukaki meeting

00:04:34,580 --> 00:04:39,920
which is in November we'll get all the

00:04:36,590 --> 00:04:42,100
votes in and hopefully we will move on

00:04:39,920 --> 00:04:45,800
to the next stage which is we move to a

00:04:42,100 --> 00:04:52,210
publication assuming things work out

00:04:45,800 --> 00:04:55,550
properly modules from my perspective the

00:04:52,210 --> 00:04:57,860
they allow you to organize codes at

00:04:55,550 --> 00:04:59,930
large scale not as small scales mostly

00:04:57,860 --> 00:05:01,520
we have classes and then spaces to

00:04:59,930 --> 00:05:03,680
organize a code what we're talking about

00:05:01,520 --> 00:05:05,630
when you have large organization glad

00:05:03,680 --> 00:05:10,460
code base and you want to put some

00:05:05,630 --> 00:05:12,770
structure there the goals are no

00:05:10,460 --> 00:05:16,310
compromises ation better software

00:05:12,770 --> 00:05:20,810
architecture isolation no we allow

00:05:16,310 --> 00:05:24,080
better built reports and semantics there

00:05:20,810 --> 00:05:27,260
were software development tools do is I

00:05:24,080 --> 00:05:29,990
believe are very important we we we need

00:05:27,260 --> 00:05:33,380
to think more about the tools that will

00:05:29,990 --> 00:05:37,340
help us to be more productive and that

00:05:33,380 --> 00:05:40,960
requires of us to to be more picky but

00:05:37,340 --> 00:05:44,900
how we practice how we write programs

00:05:40,960 --> 00:05:47,480
code hygiene is very important the

00:05:44,900 --> 00:05:51,140
techniques that we've learned used in

00:05:47,480 --> 00:05:52,910
the past 30 or 40 years will need to

00:05:51,140 --> 00:05:56,000
take a hard look

00:05:52,910 --> 00:05:58,100
them I'm looking at you micros I know it

00:05:56,000 --> 00:06:00,110
is controversial issues but I would like

00:05:58,100 --> 00:06:02,300
to encourage the the entire

00:06:00,110 --> 00:06:17,180
super-stressed community to take heart

00:06:02,300 --> 00:06:21,820
but how we write code okay

00:06:17,180 --> 00:06:26,209
I'm peon I try I try

00:06:21,820 --> 00:06:26,209
[Applause]

00:06:28,010 --> 00:06:35,270
I try to think about the whole language

00:06:32,290 --> 00:06:38,720
including the library and where we're

00:06:35,270 --> 00:06:41,330
going over the next few years I was

00:06:38,720 --> 00:06:44,900
sitting here and thinking that the group

00:06:41,330 --> 00:06:46,870
in this room is roughly the size of the

00:06:44,900 --> 00:06:49,910
active members of the committee

00:06:46,870 --> 00:06:55,550
not everybody turns up at every meeting

00:06:49,910 --> 00:07:02,360
but this is the influential size of the

00:06:55,550 --> 00:07:04,600
group so how do you make a consensus for

00:07:02,360 --> 00:07:07,720
doing something new and interesting and

00:07:04,600 --> 00:07:12,020
forward-looking in a group this large

00:07:07,720 --> 00:07:17,420
where everybody has some old stuff they

00:07:12,020 --> 00:07:20,420
would like to protect that I think is

00:07:17,420 --> 00:07:23,990
the fundamental problem having a group

00:07:20,420 --> 00:07:29,750
like this agree and have a consensus is

00:07:23,990 --> 00:07:33,200
very very hard I'm in favor of some

00:07:29,750 --> 00:07:42,680
proposals usually proposals I have

00:07:33,200 --> 00:07:46,190
worked on for 5 10 20 years I would like

00:07:42,680 --> 00:07:49,880
to see concepts all of course it's not

00:07:46,190 --> 00:07:53,690
just the backward looking bits I would

00:07:49,880 --> 00:07:56,780
like to see simple static reflection

00:07:53,690 --> 00:07:57,650
very simple functional stuff nothing

00:07:56,780 --> 00:08:05,210
fancy

00:07:57,650 --> 00:08:08,650
I would like to see modules and as Gabby

00:08:05,210 --> 00:08:11,720
said modules that that really promote

00:08:08,650 --> 00:08:17,030
hygiene so we're not stacked stock back

00:08:11,720 --> 00:08:19,370
in the mid seventies with your macros

00:08:17,030 --> 00:08:23,060
affecting my code my type day is

00:08:19,370 --> 00:08:27,440
changing the meaning of your code these

00:08:23,060 --> 00:08:30,260
are hard hard things I would like to see

00:08:27,440 --> 00:08:32,630
the range proposal including the good

00:08:30,260 --> 00:08:34,779
bits that they haven't they're put in

00:08:32,630 --> 00:08:39,589
yet

00:08:34,779 --> 00:08:42,860
so I try to look look out for the the

00:08:39,589 --> 00:08:46,670
whole language it's hard briefly to talk

00:08:42,860 --> 00:08:52,820
about the whole language but let's move

00:08:46,670 --> 00:08:55,850
forward the community as a whole lives

00:08:52,820 --> 00:08:58,279
among other communities and there are

00:08:55,850 --> 00:09:02,180
strengths that we have in their strength

00:08:58,279 --> 00:09:04,910
than they have and we can't just rest on

00:09:02,180 --> 00:09:08,870
our laurels and assume the world isn't

00:09:04,910 --> 00:09:15,230
changing because it is and we have to

00:09:08,870 --> 00:09:17,750
face new challenges hi my name is Gordon

00:09:15,230 --> 00:09:19,339
Sheriff I work for Microsoft my official

00:09:17,750 --> 00:09:21,920
title in Hyattsville Committee is the

00:09:19,339 --> 00:09:25,810
project editor of coroutines yes that

00:09:21,920 --> 00:09:28,940
was sent for publication from Toronto

00:09:25,810 --> 00:09:28,940
[Music]

00:09:29,290 --> 00:09:35,120
correctly ts I think completes your

00:09:33,140 --> 00:09:37,010
mission of bringing stuff from similar

00:09:35,120 --> 00:09:39,950
to C++ because it's one of the features

00:09:37,010 --> 00:09:41,600
that was there and let me I think I know

00:09:39,950 --> 00:09:46,000
you were going to say and I will say it

00:09:41,600 --> 00:09:48,320
okay apologize for not mentioning

00:09:46,000 --> 00:09:50,029
co-routines and especially fast code

00:09:48,320 --> 00:09:52,580
change because they hadn't been

00:09:50,029 --> 00:09:56,270
mentioned this far sorry oh I was going

00:09:52,580 --> 00:09:58,250
to mention that actually Cephas bus had

00:09:56,270 --> 00:10:02,450
coroutines or more precisely there was

00:09:58,250 --> 00:10:04,580
an 18 T test library which funded see

00:10:02,450 --> 00:10:06,800
first class development and it was by

00:10:04,580 --> 00:10:07,910
Bernie and you can download the eighteen

00:10:06,800 --> 00:10:10,160
T does library at least the

00:10:07,910 --> 00:10:14,510
documentation I found it on the web it's

00:10:10,160 --> 00:10:18,589
it's awesome stored under history so

00:10:14,510 --> 00:10:21,230
Karate NTS comes naked it's purely naked

00:10:18,589 --> 00:10:24,589
facility for expert developers but

00:10:21,230 --> 00:10:27,200
before C++ to internships we will have

00:10:24,589 --> 00:10:29,690
great library types which make routines

00:10:27,200 --> 00:10:31,670
use easy and we have beautiful

00:10:29,690 --> 00:10:35,570
interactions with ranges and I think

00:10:31,670 --> 00:10:37,970
Eric was exploring recently and we had

00:10:35,570 --> 00:10:39,470
some fun and plus we have networking and

00:10:37,970 --> 00:10:43,779
all of those beautiful things will tie

00:10:39,470 --> 00:10:43,779
together and yeah

00:10:43,819 --> 00:10:48,779
I'm her by herps other I do some a lot

00:10:47,369 --> 00:10:50,160
of administrative things and running the

00:10:48,779 --> 00:10:52,170
committee in herding cats although

00:10:50,160 --> 00:10:53,879
people like Vela and Titus helped a lot

00:10:52,170 --> 00:10:56,220
with that they they pre Titus is

00:10:53,879 --> 00:10:57,749
Geoffrey ora Titus as the post Jeffrey

00:10:56,220 --> 00:11:00,629
we're sort of in that middle phase right

00:10:57,749 --> 00:11:02,549
now but I also have worked on a number

00:11:00,629 --> 00:11:05,489
of sea fossils proposals Don pointer

00:11:02,549 --> 00:11:06,809
lambda syntax eat in class a lot of

00:11:05,489 --> 00:11:08,669
those things you can blame on me or

00:11:06,809 --> 00:11:12,749
delegating constructors or partly on me

00:11:08,669 --> 00:11:14,759
and right now I am mostly interested in

00:11:12,749 --> 00:11:18,119
and I I dearly hope in my technical

00:11:14,759 --> 00:11:22,109
contribution to be able to I hope spend

00:11:18,119 --> 00:11:25,919
the next decade or so on making C++ code

00:11:22,109 --> 00:11:27,660
simpler even as we evolve the language

00:11:25,919 --> 00:11:29,970
which can only be done compatibly by

00:11:27,660 --> 00:11:32,699
adding to it and I think it is possible

00:11:29,970 --> 00:11:34,529
to make to add to the language to evolve

00:11:32,699 --> 00:11:36,569
it because it is a living language that

00:11:34,529 --> 00:11:40,259
is widely used will continue to be used

00:11:36,569 --> 00:11:43,169
and needs to continue evolving but also

00:11:40,259 --> 00:11:45,809
make see fossils code dramatically

00:11:43,169 --> 00:11:47,939
simpler so I think that's possible if I

00:11:45,809 --> 00:11:49,559
hope to continue working on that some of

00:11:47,939 --> 00:11:50,730
those effects are on a research stage

00:11:49,559 --> 00:11:53,459
right now and I'll talk about some of

00:11:50,730 --> 00:11:55,230
them on Wednesday but I think that that

00:11:53,459 --> 00:11:56,939
will be essential for the future of C++

00:11:55,230 --> 00:12:00,209
and I'd like to contribute a bit toward

00:11:56,939 --> 00:12:02,160
that all right thank you guys all right

00:12:00,209 --> 00:12:03,749
so the format this evening is for you

00:12:02,160 --> 00:12:05,669
guys to come down and ask questions and

00:12:03,749 --> 00:12:06,779
I'm gonna ask them a few questions kind

00:12:05,669 --> 00:12:08,910
of while you guys think about the

00:12:06,779 --> 00:12:11,669
questions you want to ask I'll tell you

00:12:08,910 --> 00:12:13,019
this probably be pushed for time at the

00:12:11,669 --> 00:12:14,879
end so if you think of your question you

00:12:13,019 --> 00:12:18,660
want to get down you're quick all right

00:12:14,879 --> 00:12:20,309
so first thing I want to ask is you guys

00:12:18,660 --> 00:12:22,079
particularly because URIs on your also

00:12:20,309 --> 00:12:24,809
suicide associated with something you

00:12:22,079 --> 00:12:26,639
working for but but in in the committee

00:12:24,809 --> 00:12:27,959
you could almost think of it as you wear

00:12:26,639 --> 00:12:30,149
two hats you wear a hat where you're

00:12:27,959 --> 00:12:31,169
trying to to push a particular proposal

00:12:30,149 --> 00:12:33,059
and you wear a hat where you're trying

00:12:31,169 --> 00:12:35,249
to push back on proposals right because

00:12:33,059 --> 00:12:37,470
that's that's the game right so I want

00:12:35,249 --> 00:12:39,329
to ask you to think about a situation

00:12:37,470 --> 00:12:40,439
and you don't all have to come up with

00:12:39,329 --> 00:12:41,369
this but if we had some interesting

00:12:40,439 --> 00:12:45,269
stories that's what we're going for

00:12:41,369 --> 00:12:47,279
tonight where you got pushback that you

00:12:45,269 --> 00:12:49,049
at first thought was kind of ridiculous

00:12:47,279 --> 00:12:52,619
okay I'll think about how to deal with

00:12:49,049 --> 00:12:54,720
that and then realize oh wow you know I

00:12:52,619 --> 00:12:56,459
this this proposal has we

00:12:54,720 --> 00:12:58,680
benefited because of something that I

00:12:56,459 --> 00:13:02,129
hadn't thought through well and at first

00:12:58,680 --> 00:13:06,750
wasn't oh wow really no at first is like

00:13:02,129 --> 00:13:08,459
oh but then but then he said no no now I

00:13:06,750 --> 00:13:11,180
realize what's going on and it's better

00:13:08,459 --> 00:13:18,990
anybody want to fess up to that

00:13:11,180 --> 00:13:20,279
microphone so the range is TS was born

00:13:18,990 --> 00:13:24,620
out of some early work that I had done

00:13:20,279 --> 00:13:26,459
on ranges and I floated it on the ranges

00:13:24,620 --> 00:13:29,310
discussion list there was a working

00:13:26,459 --> 00:13:31,259
group and I thought my ideas were

00:13:29,310 --> 00:13:31,980
terrific and everybody should listen to

00:13:31,259 --> 00:13:34,529
me

00:13:31,980 --> 00:13:38,899
and then this guy named Sean parent came

00:13:34,529 --> 00:13:41,819
along on the list and and corrected me

00:13:38,899 --> 00:13:44,689
that my ideas were not in fact all that

00:13:41,819 --> 00:13:49,769
great and and he had some better ideas

00:13:44,689 --> 00:13:52,920
so I was extremely resistant and so was

00:13:49,769 --> 00:13:56,939
Sean and he's a remarkably difficult

00:13:52,920 --> 00:14:01,230
person to convince and and so in the end

00:13:56,939 --> 00:14:04,139
I ended up changing my proposal and you

00:14:01,230 --> 00:14:05,639
know I would I would be generous to

00:14:04,139 --> 00:14:09,480
myself and say we met somewhere in the

00:14:05,639 --> 00:14:11,309
middle and and I think the proposal is

00:14:09,480 --> 00:14:12,990
infinitely better for Sean's feedback

00:14:11,309 --> 00:14:15,360
despite the fact that initially I I

00:14:12,990 --> 00:14:18,449
really didn't think very much of his

00:14:15,360 --> 00:14:29,459
ideas thank you thank you

00:14:18,449 --> 00:14:31,949
anyone else want to share from my

00:14:29,459 --> 00:14:39,209
perspective I think it's the wrong

00:14:31,949 --> 00:14:43,829
question okay because my ideal way of

00:14:39,209 --> 00:14:46,949
having a proposal develop is that you

00:14:43,829 --> 00:14:51,029
articulate a problem and then you

00:14:46,949 --> 00:14:54,259
articulate sort of a first idea of how

00:14:51,029 --> 00:15:02,250
to solve that problem and then you

00:14:54,259 --> 00:15:06,180
discuss in committee and outside ways of

00:15:02,250 --> 00:15:09,660
approaching this and discuss

00:15:06,180 --> 00:15:13,170
how you would like use-cases to be

00:15:09,660 --> 00:15:17,220
worked out and and what would look like

00:15:13,170 --> 00:15:21,300
good code once you have it and once that

00:15:17,220 --> 00:15:28,620
discussion is going on sort of proposal

00:15:21,300 --> 00:15:34,529
firms up with more precise syntax more

00:15:28,620 --> 00:15:37,050
work on edge cases and refinement and I

00:15:34,529 --> 00:15:39,680
find that one of the problems with the

00:15:37,050 --> 00:15:44,250
current committee is that people want

00:15:39,680 --> 00:15:51,320
finished proposals prepared put forward

00:15:44,250 --> 00:15:56,399
with exact semantics exact syntax and

00:15:51,320 --> 00:15:59,520
interests precise wording and we end up

00:15:56,399 --> 00:16:02,089
talking about technical details rather

00:15:59,520 --> 00:16:05,730
than what I consider fundamental

00:16:02,089 --> 00:16:07,890
language design problems which is

00:16:05,730 --> 00:16:10,260
basically what's the problem and what's

00:16:07,890 --> 00:16:12,690
the fundamental way of dealing with it

00:16:10,260 --> 00:16:14,850
and we spent into this time discussing

00:16:12,690 --> 00:16:19,410
of technical details before we have

00:16:14,850 --> 00:16:22,350
agreed if and what the problem is so do

00:16:19,410 --> 00:16:23,910
you do you believe that in general the

00:16:22,350 --> 00:16:26,550
proposals that are coming into committee

00:16:23,910 --> 00:16:28,980
are trying too hard to have a full

00:16:26,550 --> 00:16:33,209
solution and might be better better

00:16:28,980 --> 00:16:35,790
proposals if if they worked more on just

00:16:33,209 --> 00:16:37,860
you know the finding use cases defining

00:16:35,790 --> 00:16:40,200
edge cases and then giving much less

00:16:37,860 --> 00:16:41,490
thought to what the wording should be

00:16:40,200 --> 00:16:44,880
and that kind of thing

00:16:41,490 --> 00:16:47,430
I think so yes I think that the

00:16:44,880 --> 00:16:52,200
committee should be more collaborative

00:16:47,430 --> 00:16:54,690
in developing solutions I think that

00:16:52,200 --> 00:16:57,990
people come in with a proposal and they

00:16:54,690 --> 00:17:00,420
defend it as opposed to bringing a

00:16:57,990 --> 00:17:05,069
proposal and see how it works out and

00:17:00,420 --> 00:17:08,360
then jointly work towards a solution I

00:17:05,069 --> 00:17:12,630
think there are too much defensiveness

00:17:08,360 --> 00:17:15,050
too many demands of perfection before

00:17:12,630 --> 00:17:21,230
the time

00:17:15,050 --> 00:17:24,550
I think I have a pretty decent follow-up

00:17:21,230 --> 00:17:26,870
to this during a purpose or wax

00:17:24,550 --> 00:17:32,030
standardization there was this idea of

00:17:26,870 --> 00:17:35,990
having a no accept auto facility we

00:17:32,030 --> 00:17:39,710
didn't get consensus on it at the time I

00:17:35,990 --> 00:17:44,150
brought it back early in the c-plus past

00:17:39,710 --> 00:17:48,290
14 standardization phase and then beyond

00:17:44,150 --> 00:17:52,190
asked who's this for and where do you

00:17:48,290 --> 00:17:55,340
need it my response from a library

00:17:52,190 --> 00:17:59,390
vendor perspective was that oh let me

00:17:55,340 --> 00:18:03,680
count I need it in five places he asked

00:17:59,390 --> 00:18:07,220
do you really need it I said no he asked

00:18:03,680 --> 00:18:12,260
is it going to be a maintenance burden

00:18:07,220 --> 00:18:14,270
for you either way I said no so his

00:18:12,260 --> 00:18:18,830
follow-up was what are you going to do

00:18:14,270 --> 00:18:30,560
next and I said I am going to bury this

00:18:18,830 --> 00:18:32,420
paper and not advance it all right so

00:18:30,560 --> 00:18:34,490
I've actually got a few belt

00:18:32,420 --> 00:18:36,800
I'll make them quick so two years ago I

00:18:34,490 --> 00:18:38,780
sit on that side of the room and said

00:18:36,800 --> 00:18:40,280
that the committee when are we getting

00:18:38,780 --> 00:18:43,340
there was strict qualifier and I was

00:18:40,280 --> 00:18:46,120
told it's coming and it's been two years

00:18:43,340 --> 00:18:51,050
and it's still not here so where is it

00:18:46,120 --> 00:18:52,040
and then and then I think because

00:18:51,050 --> 00:18:53,060
there's a queue you should get one

00:18:52,040 --> 00:18:56,480
question each they're going to answer

00:18:53,060 --> 00:18:58,430
that one I talked to your colleague just

00:18:56,480 --> 00:18:59,540
before we started and he said he was

00:18:58,430 --> 00:19:01,640
going to have a proposal for the

00:18:59,540 --> 00:19:03,920
restricted qualifier so I assume it's

00:19:01,640 --> 00:19:07,760
coming from there the only kid vice I

00:19:03,920 --> 00:19:09,080
gave him was please PLEASE cleaning it

00:19:07,760 --> 00:19:12,260
up a little bit than toning it down

00:19:09,080 --> 00:19:13,580
don't make it just see 99 restrict

00:19:12,260 --> 00:19:17,120
because that's not enough and he said oh

00:19:13,580 --> 00:19:19,340
no of course not which is okay

00:19:17,120 --> 00:19:21,440
it seems as if the authors of that

00:19:19,340 --> 00:19:24,440
proposal have been busy with other

00:19:21,440 --> 00:19:28,300
things but you can find those authors

00:19:24,440 --> 00:19:28,300
their names are on that paper

00:19:29,860 --> 00:19:39,769
no alias must go this is non-negotiable

00:19:35,499 --> 00:19:45,799
this was Dennis Rich's answer to the

00:19:39,769 --> 00:19:49,039
father of restrict restrict has come up

00:19:45,799 --> 00:19:51,769
repeatedly and the reason it has failed

00:19:49,039 --> 00:19:56,269
is that it doesn't fit in the type

00:19:51,769 --> 00:20:03,019
system it means trust me it's a form of

00:19:56,269 --> 00:20:06,619
cost and we have repeatedly decided that

00:20:03,019 --> 00:20:10,759
this is a very useful cost in resist

00:20:06,619 --> 00:20:14,690
restricted environments where you can

00:20:10,759 --> 00:20:19,299
sort of trust this cost but we don't

00:20:14,690 --> 00:20:23,239
like trust me in the type system and

00:20:19,299 --> 00:20:27,019
therefore any proposal that proposes

00:20:23,239 --> 00:20:31,070
restrict is going to have an uphill

00:20:27,019 --> 00:20:33,769
battle because some of us has kept

00:20:31,070 --> 00:20:35,989
seeing it for almost 30 years since

00:20:33,769 --> 00:20:40,549
Dennis Ritchie came out stronger against

00:20:35,989 --> 00:20:43,429
it than I would ever do and we'll ask

00:20:40,549 --> 00:20:46,009
how does it fit in the type system how

00:20:43,429 --> 00:20:50,950
does it generalize how does it interact

00:20:46,009 --> 00:20:54,019
with types higher than raw pointers and

00:20:50,950 --> 00:20:56,899
why should this be a core language

00:20:54,019 --> 00:21:00,679
feature rather than a specialized high

00:20:56,899 --> 00:21:03,200
performance computing feature this is a

00:21:00,679 --> 00:21:15,200
firm prediction because I've seen it

00:21:03,200 --> 00:21:16,399
happen repeatedly I work in burn metal

00:21:15,200 --> 00:21:20,950
embedded but I have a very different

00:21:16,399 --> 00:21:27,080
question this is probably most prefer

00:21:20,950 --> 00:21:29,239
urban Louie but I've seen problems with

00:21:27,080 --> 00:21:30,649
debug ability of a lot of code

00:21:29,239 --> 00:21:36,440
generators because they're very common

00:21:30,649 --> 00:21:39,320
in my field and also in D the

00:21:36,440 --> 00:21:41,570
you know mix-ins are pretty impossible

00:21:39,320 --> 00:21:44,810
to debug and people already complain

00:21:41,570 --> 00:21:49,820
about stepping through my TMP isn't this

00:21:44,810 --> 00:21:51,830
a problem for meta classes and such that

00:21:49,820 --> 00:22:02,930
people are stepping throughout code that

00:21:51,830 --> 00:22:06,290
they did not write so I think he you

00:22:02,930 --> 00:22:07,970
basically outlined the you only said

00:22:06,290 --> 00:22:12,860
that it was a problem right now with TMP

00:22:07,970 --> 00:22:15,260
right is anything worse than TMP if you

00:22:12,860 --> 00:22:18,230
ask me I mean you know I like TMP but

00:22:15,260 --> 00:22:19,790
most people don't and so what I think is

00:22:18,230 --> 00:22:22,820
there's an interesting quality of

00:22:19,790 --> 00:22:26,270
implementation challenge for compilers

00:22:22,820 --> 00:22:28,280
to give us a way to you know debug the

00:22:26,270 --> 00:22:31,040
meta programs that we're gonna write but

00:22:28,280 --> 00:22:32,570
I think that if we're not abusing the

00:22:31,040 --> 00:22:34,940
the type system the way we are today

00:22:32,570 --> 00:22:36,830
they can actually provide us with with

00:22:34,940 --> 00:22:38,540
you know better ways of debugging

00:22:36,830 --> 00:22:40,700
automated programs so there was nothing

00:22:38,540 --> 00:22:45,370
more than the question is more to the

00:22:40,700 --> 00:22:49,130
user who said you know interface or

00:22:45,370 --> 00:22:51,200
whatever you know loaded yeah keyword

00:22:49,130 --> 00:22:54,890
Gary you're overloaded keyword you're

00:22:51,200 --> 00:22:56,840
using and you know writes a class that

00:22:54,890 --> 00:22:58,820
looks like the way he thinks about the

00:22:56,840 --> 00:23:01,640
problem and then steps through and sees

00:22:58,820 --> 00:23:02,900
this terrible template monster that he

00:23:01,640 --> 00:23:04,970
does not understand

00:23:02,900 --> 00:23:06,620
so you means tipping at runtime yeah at

00:23:04,970 --> 00:23:09,620
runtime you know somebody who's writing

00:23:06,620 --> 00:23:11,240
hello world and then steps into hmm so

00:23:09,620 --> 00:23:14,290
again I would say this is a quality of

00:23:11,240 --> 00:23:19,150
implementation like the your debugger

00:23:14,290 --> 00:23:21,890
should be free to you know a lot to jump

00:23:19,150 --> 00:23:23,420
you know through these things without

00:23:21,890 --> 00:23:28,340
showing them to you unless you maybe

00:23:23,420 --> 00:23:30,950
request it right so I'll answer in more

00:23:28,340 --> 00:23:33,230
detail in my talk on Wednesday okay as

00:23:30,950 --> 00:23:36,280
this is this is one of the questions

00:23:33,230 --> 00:23:39,440
about any code generation style approach

00:23:36,280 --> 00:23:41,630
the short answer spoiler alert is what

00:23:39,440 --> 00:23:43,820
Louis said but I'll expand on a little

00:23:41,630 --> 00:23:45,769
bit the first is look at what it's

00:23:43,820 --> 00:23:49,649
replacing

00:23:45,769 --> 00:23:51,179
no seriously so what are the tag lines

00:23:49,649 --> 00:23:52,799
that I thought I came up with and then I

00:23:51,179 --> 00:23:55,259
saw Louie in his meeting see fossils

00:23:52,799 --> 00:23:56,639
keynote last winter used the same

00:23:55,259 --> 00:23:58,169
tagline and I don't know if it's because

00:23:56,639 --> 00:24:00,479
we ever talked about it or scam up with

00:23:58,169 --> 00:24:01,529
it independently is we both want and I

00:24:00,479 --> 00:24:04,289
assume you're still there

00:24:01,529 --> 00:24:08,070
we both want more metaprogramming less

00:24:04,289 --> 00:24:10,859
template metaprogramming we're doing it

00:24:08,070 --> 00:24:12,690
already we should have a clearer way to

00:24:10,859 --> 00:24:14,219
write what we're writing already and it

00:24:12,690 --> 00:24:16,440
will be strictly better than what we are

00:24:14,219 --> 00:24:19,580
already doing that is undable and

00:24:16,440 --> 00:24:22,200
inscrutable today the second argument is

00:24:19,580 --> 00:24:24,690
especially with cogeneration we are

00:24:22,200 --> 00:24:26,129
already doing that too we generate

00:24:24,690 --> 00:24:28,080
special member functions when's the last

00:24:26,129 --> 00:24:30,450
time you tried to step into a compiler

00:24:28,080 --> 00:24:34,469
generate a copy constructor and nothing

00:24:30,450 --> 00:24:36,450
happened that problem needs to be solved

00:24:34,469 --> 00:24:38,369
already for the special member functions

00:24:36,450 --> 00:24:40,200
yes if you provide people a way to

00:24:38,369 --> 00:24:43,710
generate more of those programmatically

00:24:40,200 --> 00:24:45,589
yes but it's a degree not in a kind of a

00:24:43,710 --> 00:24:47,879
new problem and anything that

00:24:45,589 --> 00:24:49,289
implementations already do well for the

00:24:47,879 --> 00:24:50,849
special member functions will directly

00:24:49,289 --> 00:24:53,549
help the other generated functions and

00:24:50,849 --> 00:24:55,859
vice-versa in both cases I think the key

00:24:53,549 --> 00:24:57,419
thing is as long as we focus on trying

00:24:55,859 --> 00:25:00,989
to improve that things people are

00:24:57,419 --> 00:25:04,109
already doing with C++ but with great

00:25:00,989 --> 00:25:05,509
difficulty we're on the right path and

00:25:04,109 --> 00:25:07,849
we're certainly not making things worse

00:25:05,509 --> 00:25:13,139
longer answer to follow but that's the

00:25:07,849 --> 00:25:15,509
bare bones of the idea my suspicion is

00:25:13,139 --> 00:25:18,389
that before any of this actually gets

00:25:15,509 --> 00:25:20,849
approved or shortly after it gets

00:25:18,389 --> 00:25:23,929
approved there's going to be by

00:25:20,849 --> 00:25:30,690
necessity a ton of work in tooling

00:25:23,929 --> 00:25:35,099
because as sort of library lead for a

00:25:30,690 --> 00:25:38,899
large code base code review is sort of

00:25:35,099 --> 00:25:41,309
important and if you've hidden away any

00:25:38,899 --> 00:25:44,129
significant amount of stuff in

00:25:41,309 --> 00:25:47,639
metaclasses I'm gonna need a way to

00:25:44,129 --> 00:25:51,419
toggle between views in code review in

00:25:47,639 --> 00:25:53,249
browsing in everything and at the point

00:25:51,419 --> 00:25:54,659
that you've built that like it's not

00:25:53,249 --> 00:25:57,540
that much harder to bring that into your

00:25:54,659 --> 00:25:59,760
debugger I mean there's work there clear

00:25:57,540 --> 00:26:04,350
but like we have to solve these UI

00:25:59,760 --> 00:26:09,660
problems for many reasons and the end

00:26:04,350 --> 00:26:12,600
result is going to be well worth I think

00:26:09,660 --> 00:26:15,750
it's a very important question that you

00:26:12,600 --> 00:26:16,080
brought up anything we do at compile

00:26:15,750 --> 00:26:18,480
time

00:26:16,080 --> 00:26:21,240
which means it evaporates when the code

00:26:18,480 --> 00:26:24,570
is running pauses challenge so her

00:26:21,240 --> 00:26:26,280
points out correctly special member

00:26:24,570 --> 00:26:30,300
functions that I generated by a compiler

00:26:26,280 --> 00:26:33,090
that you do not see however when you go

00:26:30,300 --> 00:26:35,610
further than just these so many

00:26:33,090 --> 00:26:41,700
functions were you actually generates

00:26:35,610 --> 00:26:46,610
code or class it poses real challenges

00:26:41,700 --> 00:26:50,540
to tools and if the tools are not there

00:26:46,610 --> 00:26:53,370
you're going to have a very miserable

00:26:50,540 --> 00:26:55,260
reputation for for the facility I

00:26:53,370 --> 00:26:59,880
distinctly remember when I started

00:26:55,260 --> 00:27:03,750
writing templates back in 94 95 it's

00:26:59,880 --> 00:27:07,620
just miserable the the part that worries

00:27:03,750 --> 00:27:09,870
me is when we say oh we know about this

00:27:07,620 --> 00:27:12,630
problem we have this problem before and

00:27:09,870 --> 00:27:15,450
then it is the worse and now say oh

00:27:12,630 --> 00:27:18,990
actually it is worse by adding more so

00:27:15,450 --> 00:27:21,330
epsilon is epsilon but n times epsilon

00:27:18,990 --> 00:27:26,850
becomes very noticeable for big number

00:27:21,330 --> 00:27:29,130
of and so I'll be very cautious and and

00:27:26,850 --> 00:27:31,620
not only to oh we already know this

00:27:29,130 --> 00:27:33,830
forum so it's not making worse no we are

00:27:31,620 --> 00:27:38,760
adding to it so we must be very very

00:27:33,830 --> 00:27:42,360
cautious about that my friend here

00:27:38,760 --> 00:27:45,720
Xavier has reason least compilers and

00:27:42,360 --> 00:27:48,150
has some experience in in in that

00:27:45,720 --> 00:27:49,970
department I've written least myself and

00:27:48,150 --> 00:27:52,740
at least with this language were

00:27:49,970 --> 00:27:54,840
everything you have at wrong time you

00:27:52,740 --> 00:27:57,870
can lift it to compile time and we've

00:27:54,840 --> 00:28:00,270
even eval you an operator where you can

00:27:57,870 --> 00:28:01,950
specify or is it compile time is it load

00:28:00,270 --> 00:28:04,890
time is it execution time so you

00:28:01,950 --> 00:28:07,130
actually have fine-grained ways of doing

00:28:04,890 --> 00:28:07,130
this

00:28:07,509 --> 00:28:13,190
the full power of that is actually used

00:28:10,610 --> 00:28:15,740
in practice so there we have opportunity

00:28:13,190 --> 00:28:18,350
to learn as language designers what is

00:28:15,740 --> 00:28:20,090
actually really important right so you

00:28:18,350 --> 00:28:22,190
know we definitely we did study

00:28:20,090 --> 00:28:24,559
reflection that I think that's the

00:28:22,190 --> 00:28:27,590
current right when we go further we have

00:28:24,559 --> 00:28:30,470
to study how much of that is actually

00:28:27,590 --> 00:28:32,360
useful importance that we need to have

00:28:30,470 --> 00:28:34,669
in the language and then we need to

00:28:32,360 --> 00:28:38,149
bring the tool builders compiler writers

00:28:34,669 --> 00:28:41,539
not just compiler writers source code

00:28:38,149 --> 00:28:44,120
browsing things too new you need to do

00:28:41,539 --> 00:28:47,029
at review time at design time before

00:28:44,120 --> 00:28:49,549
even write the code to for for with you

00:28:47,029 --> 00:28:51,500
it is known through your challenge it is

00:28:49,549 --> 00:28:55,340
not what we already know what it is it's

00:28:51,500 --> 00:28:58,279
really not real I guess the the last

00:28:55,340 --> 00:29:01,309
thing we like to say is I really am a

00:28:58,279 --> 00:29:03,950
big proponent of compile time you know

00:29:01,309 --> 00:29:07,399
computation you know I was fed up with

00:29:03,950 --> 00:29:09,409
people writing functions with class

00:29:07,399 --> 00:29:11,269
visualizations you know in back in many

00:29:09,409 --> 00:29:12,980
aids how we used to write little

00:29:11,269 --> 00:29:15,350
programs you have to write a class and

00:29:12,980 --> 00:29:18,230
then specializations all that so we've

00:29:15,350 --> 00:29:21,049
been a we we introduced console extra

00:29:18,230 --> 00:29:24,080
functions which is just go back to what

00:29:21,049 --> 00:29:25,730
has been very successful understood by

00:29:24,080 --> 00:29:28,759
all programmers it is just simple

00:29:25,730 --> 00:29:32,149
function now ensure that you have the

00:29:28,759 --> 00:29:35,090
right condition that the compiler can

00:29:32,149 --> 00:29:37,460
develop those functional sites compile

00:29:35,090 --> 00:29:40,220
time and it is the same structure that

00:29:37,460 --> 00:29:42,049
programmers understand very well right

00:29:40,220 --> 00:29:43,279
wrong time functions and we also made

00:29:42,049 --> 00:29:45,379
sure that you don't actually have that

00:29:43,279 --> 00:29:47,299
much distinction between what is being

00:29:45,379 --> 00:29:49,639
evaluated at compile time what is being

00:29:47,299 --> 00:29:53,750
evaluated from time so that if needed

00:29:49,639 --> 00:29:56,990
you can actually place sufficiently

00:29:53,750 --> 00:29:59,570
small conditions to have this function

00:29:56,990 --> 00:30:01,220
drawn at runtime so it can put debugger

00:29:59,570 --> 00:30:03,500
and see what is going on it is going to

00:30:01,220 --> 00:30:05,480
be it is exactly the same experience

00:30:03,500 --> 00:30:08,120
that you have with no malfunction and

00:30:05,480 --> 00:30:09,830
that's just some form of engineering

00:30:08,120 --> 00:30:12,019
right is not it perfect we don't have

00:30:09,830 --> 00:30:13,850
the full power of in a compile time

00:30:12,019 --> 00:30:17,659
computation but it is the balance

00:30:13,850 --> 00:30:19,130
between the full abstracts power of

00:30:17,659 --> 00:30:20,630
language design and what

00:30:19,130 --> 00:30:27,980
is actually practically necessary and

00:30:20,630 --> 00:30:31,520
useful C++ has an awful reputation for

00:30:27,980 --> 00:30:36,920
being bright only incomprehensible to

00:30:31,520 --> 00:30:41,270
complex expert only and there are some

00:30:36,920 --> 00:30:44,330
major factors for giving this template

00:30:41,270 --> 00:30:48,380
metaprogramming is one of them the more

00:30:44,330 --> 00:30:50,960
advanced parts of boost is another one I

00:30:48,380 --> 00:30:56,420
don't know about any friends left in the

00:30:50,960 --> 00:30:59,690
room but this is a factory and some of

00:30:56,420 --> 00:31:04,700
us has been working for years on the

00:30:59,690 --> 00:31:08,360
theme of simplifying C++ as used by most

00:31:04,700 --> 00:31:10,340
users make simple things simple make

00:31:08,360 --> 00:31:13,400
sure that you can do the advanced stuff

00:31:10,340 --> 00:31:16,550
if you have to one of the things that

00:31:13,400 --> 00:31:19,190
got me with template metaprogramming was

00:31:16,550 --> 00:31:23,240
people writing templates defining types

00:31:19,190 --> 00:31:26,450
to calculate values if I want to compute

00:31:23,240 --> 00:31:30,380
the value sort of two or ten I want to

00:31:26,450 --> 00:31:33,560
call a function we got quantitative

00:31:30,380 --> 00:31:38,950
functions it cost a lot of blood and

00:31:33,560 --> 00:31:42,650
sweat and tears mostly Gabi's and the

00:31:38,950 --> 00:31:45,980
committee was very conservative it was

00:31:42,650 --> 00:31:48,800
deemed useless impossible to implement

00:31:45,980 --> 00:31:50,570
and a few other things like that but I

00:31:48,800 --> 00:31:54,560
think it takes away half of the

00:31:50,570 --> 00:31:57,170
complexity of template mode in

00:31:54,560 --> 00:31:59,390
programming which was a template

00:31:57,170 --> 00:32:02,660
mechanism being used for things it was

00:31:59,390 --> 00:32:06,950
meant to be used for and it wasn't good

00:32:02,660 --> 00:32:11,890
for another aspect is that we are having

00:32:06,950 --> 00:32:14,810
templates with compile time duck typing

00:32:11,890 --> 00:32:17,990
from every other place in the language

00:32:14,810 --> 00:32:22,990
we know that precisely specified

00:32:17,990 --> 00:32:25,970
interfaces is a great saver Savior for

00:32:22,990 --> 00:32:27,149
specifying things correctly for catching

00:32:25,970 --> 00:32:29,729
errors early

00:32:27,149 --> 00:32:31,529
from avoiding to write errors in the

00:32:29,729 --> 00:32:34,739
first place

00:32:31,529 --> 00:32:37,950
because we don't have to write against

00:32:34,739 --> 00:32:41,879
totally arbitrary things and my guess is

00:32:37,950 --> 00:32:47,269
that concepts properly done will take

00:32:41,879 --> 00:32:50,999
away another half of the problem now

00:32:47,269 --> 00:32:53,159
finally we come back to the meta

00:32:50,999 --> 00:32:57,359
programming that we were talking about

00:32:53,159 --> 00:32:59,700
and I think we need some fairly simple

00:32:57,359 --> 00:33:02,999
template metaprogramming we want to be

00:32:59,700 --> 00:33:05,749
able to walk through data structure and

00:33:02,999 --> 00:33:08,309
generate object Maps for it to generate

00:33:05,749 --> 00:33:10,950
serializers for it and things like that

00:33:08,309 --> 00:33:14,159
and in particular I want to make sure

00:33:10,950 --> 00:33:19,739
that if you do the object Maps for X and

00:33:14,159 --> 00:33:23,759
I do the serializers for X our programs

00:33:19,739 --> 00:33:27,779
can compose and if that's not the case

00:33:23,759 --> 00:33:31,349
we have a dialect generator one of the

00:33:27,779 --> 00:33:36,929
great advantages of C++ is there are too

00:33:31,349 --> 00:33:39,450
many dialects Lisp is more beautiful in

00:33:36,929 --> 00:33:43,080
some sense more flexible in some sense

00:33:39,450 --> 00:33:45,330
and has an implied plural you can't

00:33:43,080 --> 00:33:47,279
collaborate with other people in a

00:33:45,330 --> 00:33:54,509
language where everybody has their own

00:33:47,279 --> 00:33:57,509
dialect and so I think we have to keep

00:33:54,509 --> 00:34:00,450
improving the language both in terms of

00:33:57,509 --> 00:34:08,159
what we can do with it and especially in

00:34:00,450 --> 00:34:10,799
how easy we can do to writing using and

00:34:08,159 --> 00:34:13,619
debugging the stuff I have a colleague

00:34:10,799 --> 00:34:16,700
in Budapest who has written a really

00:34:13,619 --> 00:34:20,220
nice debug of a template metaprogramming

00:34:16,700 --> 00:34:24,379
the complexity is beyond belief

00:34:20,220 --> 00:34:26,839
nobody should have to learn that and so

00:34:24,379 --> 00:34:29,520
we need to think about the

00:34:26,839 --> 00:34:32,690
representation of C++ we need to think

00:34:29,520 --> 00:34:37,770
about how simply we can do simple things

00:34:32,690 --> 00:34:40,590
really if I want stream i/o of X I

00:34:37,770 --> 00:34:44,970
should say stream IO

00:34:40,590 --> 00:34:47,570
open-paren i-x close paren that's all I

00:34:44,970 --> 00:34:51,600
want to say and you should be able to

00:34:47,570 --> 00:34:54,860
write the code for it that's basically a

00:34:51,600 --> 00:34:58,470
simple for loop or the elements of

00:34:54,860 --> 00:35:01,200
structure we have three proposals for

00:34:58,470 --> 00:35:03,360
how to do that last time I counted are

00:35:01,200 --> 00:35:06,990
probably five and if you look at the

00:35:03,360 --> 00:35:09,300
details we need to pick one and the way

00:35:06,990 --> 00:35:12,270
we do that if we do it right in my

00:35:09,300 --> 00:35:17,450
opinion is we pick the important use

00:35:12,270 --> 00:35:21,810
cases there is about four to six no more

00:35:17,450 --> 00:35:23,870
we do those we do them well and then we

00:35:21,810 --> 00:35:27,210
see what happens what more do we need

00:35:23,870 --> 00:35:31,410
let's not build or try to build the

00:35:27,210 --> 00:35:36,390
perfect fully general metaprogramming

00:35:31,410 --> 00:35:37,640
system for starters that has never

00:35:36,390 --> 00:35:40,740
worked very well

00:35:37,640 --> 00:35:42,900
getting the simple cases working simply

00:35:40,740 --> 00:35:46,770
and well and with low compile time

00:35:42,900 --> 00:35:49,440
overheads that kind of strategy has

00:35:46,770 --> 00:35:51,840
worked over the years and if we don't

00:35:49,440 --> 00:35:54,660
get it quite right we have a chance of

00:35:51,840 --> 00:35:57,030
fixing it if we instead spend twice as

00:35:54,660 --> 00:35:59,430
long we have nothing to gain experience

00:35:57,030 --> 00:36:01,950
from and there's so much that we won't

00:35:59,430 --> 00:36:06,120
be able to fix it once we get it wrong

00:36:01,950 --> 00:36:08,100
which we sure will simple or complex but

00:36:06,120 --> 00:36:11,130
we are getting it more wrong with the

00:36:08,100 --> 00:36:14,400
complex more complete version so so my

00:36:11,130 --> 00:36:18,780
suggestion is work on simplification

00:36:14,400 --> 00:36:21,990
which is good concepts good context for

00:36:18,780 --> 00:36:26,210
functions and then good generator

00:36:21,990 --> 00:36:30,000
functions basically based on the idea of

00:36:26,210 --> 00:36:32,790
iterating or type doing appropriate

00:36:30,000 --> 00:36:36,930
things for it and let's start small and

00:36:32,790 --> 00:36:39,420
growing up couldn't agree more in

00:36:36,930 --> 00:36:40,980
something just a hopefully quick comment

00:36:39,420 --> 00:36:45,350
following on something you said to keep

00:36:40,980 --> 00:36:47,520
simple things simple so easy to say

00:36:45,350 --> 00:36:49,770
everybody in there kid brother and their

00:36:47,520 --> 00:36:53,160
dog gives lip service to that and they

00:36:49,770 --> 00:36:54,510
don't do it why there's at least three

00:36:53,160 --> 00:36:57,840
major ways to go wrong

00:36:54,510 --> 00:37:00,090
is not to try not to be aware of keep

00:36:57,840 --> 00:37:01,830
simple things simple another way to go

00:37:00,090 --> 00:37:04,080
wrong is to try to make complex things

00:37:01,830 --> 00:37:05,910
simple I have seen many proposals in

00:37:04,080 --> 00:37:07,470
committee for that we have this nice

00:37:05,910 --> 00:37:09,150
syntax for this cable is that the

00:37:07,470 --> 00:37:12,330
majority is that the common case well no

00:37:09,150 --> 00:37:14,310
but it's the case I like this today no

00:37:12,330 --> 00:37:16,560
we shouldn't waste the good syntax on a

00:37:14,310 --> 00:37:20,460
complex thing so if there's actually an

00:37:16,560 --> 00:37:23,460
art to keep making simple things simple

00:37:20,460 --> 00:37:24,980
a third way to go wrong is to make them

00:37:23,460 --> 00:37:27,390
simple to write but not to maintain

00:37:24,980 --> 00:37:28,350
which is exactly what we were talking

00:37:27,390 --> 00:37:30,300
about in what you were talking about

00:37:28,350 --> 00:37:31,530
with how do i D bug the code how do I

00:37:30,300 --> 00:37:36,119
know what it does how do I do

00:37:31,530 --> 00:37:37,320
my code reviews on it so the process

00:37:36,119 --> 00:37:39,390
like everything I'm going to talk about

00:37:37,320 --> 00:37:41,220
acceptable reporting other people's work

00:37:39,390 --> 00:37:43,680
which is more advanced on Wednesday is

00:37:41,220 --> 00:37:45,420
pure experimentation we're trying to

00:37:43,680 --> 00:37:47,359
solve a problem we're still defining the

00:37:45,420 --> 00:37:49,619
problem things are going to be mutable

00:37:47,359 --> 00:37:52,230
but here's a direction worth exploring

00:37:49,619 --> 00:37:54,300
maybe it'll work out maybe it won't but

00:37:52,230 --> 00:37:55,830
to do the things that the artist said a

00:37:54,300 --> 00:37:57,119
mat keeping simple thing simple make

00:37:55,830 --> 00:37:58,920
sure you're focusing on the actual

00:37:57,119 --> 00:38:02,460
simple things and not just to write but

00:37:58,920 --> 00:38:04,830
to maintain and being example derivative

00:38:02,460 --> 00:38:06,570
what are the use cases what are the

00:38:04,830 --> 00:38:09,119
things we want to say and how do we want

00:38:06,570 --> 00:38:11,550
to say them simply if we keep that

00:38:09,119 --> 00:38:15,720
mindset in mind it will help make all

00:38:11,550 --> 00:38:20,490
our proposals so much better and I would

00:38:15,720 --> 00:38:25,310
like it for 20 now wait wait like what

00:38:20,490 --> 00:38:34,590
for 20 the simple version of this

00:38:25,310 --> 00:38:38,369
basically my loop a very small feature

00:38:34,590 --> 00:38:44,340
yeah yeah the full reflection thing I

00:38:38,369 --> 00:38:47,280
hope to get all of concepts Krantz takes

00:38:44,340 --> 00:38:51,030
buzz almost there but but basically I

00:38:47,280 --> 00:38:54,330
hope all of this would be available soon

00:38:51,030 --> 00:38:56,670
like in 20 meaning we have to get things

00:38:54,330 --> 00:38:59,850
running and test it out for the next two

00:38:56,670 --> 00:39:06,450
years I don't want to go for the super

00:38:59,850 --> 00:39:09,560
general perfection in 2030 or some other

00:39:06,450 --> 00:39:09,560
scary thing like

00:39:10,430 --> 00:39:14,040
yeah so this I'll try to make this

00:39:12,780 --> 00:39:15,780
really quick

00:39:14,040 --> 00:39:20,070
sorry for all you people have been

00:39:15,780 --> 00:39:21,720
getting tired waiting so about the debug

00:39:20,070 --> 00:39:24,600
ability of template metaprogramming and

00:39:21,720 --> 00:39:26,970
metaclasses in particular I've had the

00:39:24,600 --> 00:39:28,560
same criticism levelled at my ranges

00:39:26,970 --> 00:39:31,260
work about range pipelines and the debug

00:39:28,560 --> 00:39:33,720
ability thereof and I think it's far

00:39:31,260 --> 00:39:35,730
more general than of ranges or template

00:39:33,720 --> 00:39:38,160
metaprogramming it's really about

00:39:35,730 --> 00:39:39,540
abstraction and if you are used to

00:39:38,160 --> 00:39:41,970
operating the certain level of

00:39:39,540 --> 00:39:44,640
abstraction and someone comes along with

00:39:41,970 --> 00:39:46,980
a higher level abstraction a better

00:39:44,640 --> 00:39:49,590
abstraction it's natural to feel

00:39:46,980 --> 00:39:51,270
resistance because I'm not used to

00:39:49,590 --> 00:39:53,250
operating at that level of abstraction

00:39:51,270 --> 00:39:54,840
that's not how I think about things I

00:39:53,250 --> 00:39:57,060
don't know how to debug that I can't

00:39:54,840 --> 00:39:58,890
reason about that or I'm gonna have to

00:39:57,060 --> 00:40:00,480
compile it in my head down to the lower

00:39:58,890 --> 00:40:04,140
level code just to understand what's

00:40:00,480 --> 00:40:05,730
going on but we do that all the time we

00:40:04,140 --> 00:40:13,500
don't think about how virtual functions

00:40:05,730 --> 00:40:14,880
are implemented right well the the

00:40:13,500 --> 00:40:16,290
important thing to ask about an

00:40:14,880 --> 00:40:19,980
abstraction is is is it a good

00:40:16,290 --> 00:40:23,400
abstraction can I write more code more

00:40:19,980 --> 00:40:25,560
efficiently with fewer bugs with this

00:40:23,400 --> 00:40:26,850
abstraction and then can I learn to

00:40:25,560 --> 00:40:29,210
think in terms of that extraction

00:40:26,850 --> 00:40:31,860
instead of the lower-level details and

00:40:29,210 --> 00:40:33,240
then maybe you find you're actually

00:40:31,860 --> 00:40:36,930
spending less time debugging because

00:40:33,240 --> 00:40:38,580
you're writing fewer bugs I will

00:40:36,930 --> 00:40:40,590
strongly agree with you but I think be

00:40:38,580 --> 00:40:43,320
earnest points are also good everything

00:40:40,590 --> 00:40:46,200
you said but the abstractions have to be

00:40:43,320 --> 00:40:48,570
usable not just write only so we have to

00:40:46,200 --> 00:40:50,550
make sure of that and for them to make

00:40:48,570 --> 00:40:53,190
sense in this language they had better

00:40:50,550 --> 00:40:55,380
huge who see fossils as pillar of zero

00:40:53,190 --> 00:40:57,960
overhead abstraction zero overhead

00:40:55,380 --> 00:40:59,760
principle machine near I can always open

00:40:57,960 --> 00:41:02,790
the hood and take control as long as you

00:40:59,760 --> 00:41:04,140
do those things then it's C++ otherwise

00:41:02,790 --> 00:41:09,000
we're just proposing a feature that

00:41:04,140 --> 00:41:10,080
belongs in some other language all right

00:41:09,000 --> 00:41:17,180
thank you

00:41:10,080 --> 00:41:17,180
let's call sat down yes

00:41:20,670 --> 00:41:24,960
so first of all I'd like to talk a

00:41:23,160 --> 00:41:26,279
little bit about restrict and then I'll

00:41:24,960 --> 00:41:28,859
get into my actual question which is

00:41:26,279 --> 00:41:30,479
like the whole know alias thing that

00:41:28,859 --> 00:41:34,559
feels like that thing where you're

00:41:30,479 --> 00:41:38,940
making the complex case symbol at the

00:41:34,559 --> 00:41:41,160
expense of the simple case which is you

00:41:38,940 --> 00:41:43,979
know I just have two pointers that I

00:41:41,160 --> 00:41:45,809
don't want to de leus and their

00:41:43,979 --> 00:41:47,489
parameters and like I don't I don't care

00:41:45,809 --> 00:41:51,029
about all this stuff I just want them to

00:41:47,489 --> 00:41:56,029
not alias which is why I like restrict

00:41:51,029 --> 00:41:58,979
and and why see restrict is terrible

00:41:56,029 --> 00:42:00,479
yeah and so the question that I actually

00:41:58,979 --> 00:42:02,910
had was about non-type template

00:42:00,479 --> 00:42:05,099
parameters first of all that's the worst

00:42:02,910 --> 00:42:07,680
name ever it should just be called value

00:42:05,099 --> 00:42:09,390
parameters because you also have like

00:42:07,680 --> 00:42:12,269
template template parameters which are

00:42:09,390 --> 00:42:14,369
also not types but like they're not non

00:42:12,269 --> 00:42:16,499
type template parameters so I'm gonna

00:42:14,369 --> 00:42:19,109
call them value parameters I would

00:42:16,499 --> 00:42:22,049
really love value parameters value

00:42:19,109 --> 00:42:24,569
template parameters of non integer or

00:42:22,049 --> 00:42:28,109
integral type I would love like literal

00:42:24,569 --> 00:42:29,329
type template value parameters when can

00:42:28,109 --> 00:42:33,690
I have hats

00:42:29,329 --> 00:42:36,089
well we designed them and you should

00:42:33,690 --> 00:42:37,890
just ask for them aloud or because it

00:42:36,089 --> 00:42:41,309
was really can't tell the difference

00:42:37,890 --> 00:42:45,660
between a user defined type and build

00:42:41,309 --> 00:42:48,630
inside right I'm saying yeah so and

00:42:45,660 --> 00:42:51,869
actually there have been several

00:42:48,630 --> 00:42:54,829
suggestions in that array and notably by

00:42:51,869 --> 00:42:57,089
me I think there is a paper that

00:42:54,829 --> 00:42:59,190
somewhere that proves that something was

00:42:57,089 --> 00:43:00,960
impossible I didn't have time to go

00:42:59,190 --> 00:43:02,999
through but usually when someone goes

00:43:00,960 --> 00:43:09,150
and prove that something is impossible

00:43:02,999 --> 00:43:13,650
to me I just say politely that I lose

00:43:09,150 --> 00:43:15,869
trust so it is one of these things we

00:43:13,650 --> 00:43:17,670
want to have the right now we have a lot

00:43:15,869 --> 00:43:20,960
of high-level stuff that we need to get

00:43:17,670 --> 00:43:23,640
true like you know modules covert sins

00:43:20,960 --> 00:43:27,089
studying reflections and network

00:43:23,640 --> 00:43:29,099
networking but at some point to make

00:43:27,089 --> 00:43:30,670
simple things simple this is one of

00:43:29,099 --> 00:43:33,820
those places were

00:43:30,670 --> 00:43:37,150
because everywhere else we don't see a

00:43:33,820 --> 00:43:39,940
distinction between int and and complex

00:43:37,150 --> 00:43:41,710
of double except this immense but from

00:43:39,940 --> 00:43:44,080
type perspective basically the same

00:43:41,710 --> 00:43:46,390
thing and and you should be able to use

00:43:44,080 --> 00:43:49,570
a template that way we did some progress

00:43:46,390 --> 00:43:52,960
to read yeah I think you have to

00:43:49,570 --> 00:43:56,860
demonstrate that there are some real use

00:43:52,960 --> 00:44:06,940
cases and it should be on my top 20 list

00:43:56,860 --> 00:44:11,380
of features so about when you can have

00:44:06,940 --> 00:44:15,490
it first you need to solve a bunch of

00:44:11,380 --> 00:44:17,560
obstacles you want to have a non type

00:44:15,490 --> 00:44:20,950
template parameter of a user-defined

00:44:17,560 --> 00:44:23,010
type so the question becomes whether you

00:44:20,950 --> 00:44:26,530
want that type to have a user-defined

00:44:23,010 --> 00:44:30,190
equality operator and where is that

00:44:26,530 --> 00:44:33,610
operator defined and how do you avoid

00:44:30,190 --> 00:44:37,060
ODR problems these are the things

00:44:33,610 --> 00:44:40,480
keeping that facility sort of back we

00:44:37,060 --> 00:44:44,440
haven't been able to find reasonable

00:44:40,480 --> 00:44:46,180
answers to those questions something it

00:44:44,440 --> 00:44:48,640
is not that we haven't found reasonable

00:44:46,180 --> 00:44:51,520
answers to those it is that we as a

00:44:48,640 --> 00:45:04,240
committee have not been able to agree on

00:44:51,520 --> 00:45:08,230
a solution which is very different the

00:45:04,240 --> 00:45:10,090
technical problems are not well this one

00:45:08,230 --> 00:45:12,400
is kind of hard but I think there is a

00:45:10,090 --> 00:45:14,380
solution especially if we get you know

00:45:12,400 --> 00:45:16,150
compiler generated comparison operators

00:45:14,380 --> 00:45:18,160
we could say that basically any type

00:45:16,150 --> 00:45:20,560
that is con sex / friendly and has

00:45:18,160 --> 00:45:25,480
default general compiler generated

00:45:20,560 --> 00:45:28,720
equality operators you know we're kind

00:45:25,480 --> 00:45:33,280
of able to you know to to link them and

00:45:28,720 --> 00:45:37,800
is Jeff Snyder in the in the room and so

00:45:33,280 --> 00:45:41,020
how's that proposal going no pressure

00:45:37,800 --> 00:45:45,190
I'll be ok so we've got some you know

00:45:41,020 --> 00:45:47,740
it's baking this might be a good example

00:45:45,190 --> 00:45:49,780
also of what we are in a cautioned

00:45:47,740 --> 00:45:52,390
against and Gaby cautioned against of

00:45:49,780 --> 00:45:54,340
jumping to a solution so start with you

00:45:52,390 --> 00:45:56,200
I would love to start with the use cases

00:45:54,340 --> 00:45:57,550
what are the things we're trying to do

00:45:56,200 --> 00:46:00,490
and then we can evaluate how common they

00:45:57,550 --> 00:46:03,220
are and so forth I have seen at least a

00:46:00,490 --> 00:46:06,610
few examples of people who wanted such a

00:46:03,220 --> 00:46:10,000
feature a general way to have non type

00:46:06,610 --> 00:46:12,790
template parameters on a template sorry

00:46:10,000 --> 00:46:15,430
just just pulling the chain there it's a

00:46:12,790 --> 00:46:17,280
bad before you can use that purpose for

00:46:15,430 --> 00:46:19,150
the purpose of computing something

00:46:17,280 --> 00:46:21,730
because they want to use per ten plate

00:46:19,150 --> 00:46:23,620
metaprogramming give them something

00:46:21,730 --> 00:46:26,080
completely different such as an actual

00:46:23,620 --> 00:46:28,240
compile time function they might find

00:46:26,080 --> 00:46:30,430
that that expresses what they want even

00:46:28,240 --> 00:46:32,650
more directly and the use case goes away

00:46:30,430 --> 00:46:35,020
and is better solved by a completely

00:46:32,650 --> 00:46:37,330
different approach and that's why it's

00:46:35,020 --> 00:46:39,670
so important to start with the use cases

00:46:37,330 --> 00:46:41,440
the problem to be solved how common is

00:46:39,670 --> 00:46:43,690
it was the code I want to write ideally

00:46:41,440 --> 00:46:46,480
and think outside the box and brainstorm

00:46:43,690 --> 00:46:48,220
early on before narrowing in on one

00:46:46,480 --> 00:46:49,510
particular solution because maybe in

00:46:48,220 --> 00:46:50,920
this case you actually don't want that

00:46:49,510 --> 00:46:52,840
feature maybe what you really want is

00:46:50,920 --> 00:46:55,480
compile time functions and Louis and

00:46:52,840 --> 00:46:57,280
friends will help you get those I just

00:46:55,480 --> 00:46:59,800
signed you up for work by the way I know

00:46:57,280 --> 00:47:01,210
um so I do think though that even if we

00:46:59,800 --> 00:47:03,790
get proper compile time programming

00:47:01,210 --> 00:47:04,960
there is a use case for that the I don't

00:47:03,790 --> 00:47:07,990
want to get too technical but the

00:47:04,960 --> 00:47:12,190
problem is that when you pass a concepts

00:47:07,990 --> 00:47:14,170
for object to a to a function from

00:47:12,190 --> 00:47:16,150
within the function you've lost the fact

00:47:14,170 --> 00:47:17,500
that it is a constant expression because

00:47:16,150 --> 00:47:19,350
it's just an argument you don't know

00:47:17,500 --> 00:47:21,400
whatever so we don't have a constant for

00:47:19,350 --> 00:47:23,050
function parameters basically that's

00:47:21,400 --> 00:47:25,360
that's kind of the problem that this is

00:47:23,050 --> 00:47:27,160
solving and so even if we get like super

00:47:25,360 --> 00:47:29,380
fancy you know standard vector standard

00:47:27,160 --> 00:47:33,310
string and constant expressions which

00:47:29,380 --> 00:47:35,380
we're working on we we still you know

00:47:33,310 --> 00:47:38,340
don't we still don't have a way to

00:47:35,380 --> 00:47:41,260
propagate this constant expressionist

00:47:38,340 --> 00:47:43,300
through a function called boundary and

00:47:41,260 --> 00:47:44,980
so that this is exactly what this gives

00:47:43,300 --> 00:47:47,760
us and the important thing with that is

00:47:44,980 --> 00:47:52,290
that you can have the return type to

00:47:47,760 --> 00:47:55,740
and on the like I want simplified

00:47:52,290 --> 00:47:58,680
dependent types in C++ and I only really

00:47:55,740 --> 00:48:00,180
get that when I have integrals so

00:47:58,680 --> 00:48:01,760
personally I think it's a valuable

00:48:00,180 --> 00:48:04,650
feature there are some technical

00:48:01,760 --> 00:48:06,690
challenges to be faced but we're we're

00:48:04,650 --> 00:48:09,410
kind of working on that and we'll see

00:48:06,690 --> 00:48:13,620
what the committee thinks about that

00:48:09,410 --> 00:48:17,300
clearly this is not my evening so make

00:48:13,620 --> 00:48:17,300
lots of friends by making promises

00:48:18,570 --> 00:48:24,990
what is the use case the answer that I

00:48:22,530 --> 00:48:27,360
can write more elegant template

00:48:24,990 --> 00:48:31,800
metaprogramming is not an answer I'll

00:48:27,360 --> 00:48:34,190
accept it is what can I do with the

00:48:31,800 --> 00:48:37,950
template motive made a programming that

00:48:34,190 --> 00:48:40,910
helps users solve real problems using

00:48:37,950 --> 00:48:43,740
that you have to go one step further and

00:48:40,910 --> 00:48:48,960
maybe you have it but I haven't heard it

00:48:43,740 --> 00:48:52,470
yet rust style format strings are what I

00:48:48,960 --> 00:48:57,810
want is like compile time checked format

00:48:52,470 --> 00:49:00,660
strings no way it Engram say that again

00:48:57,810 --> 00:49:02,400
sorry I didn't hear that no we are

00:49:00,660 --> 00:49:04,320
getting real yeah that that is what I

00:49:02,400 --> 00:49:08,190
want I want like a string view template

00:49:04,320 --> 00:49:13,680
parameter there are other ways to do

00:49:08,190 --> 00:49:19,290
that so what I'm doing is talk about it

00:49:13,680 --> 00:49:22,590
but there are other ways to do so deco

00:49:19,290 --> 00:49:25,260
type lambda expressions work because you

00:49:22,590 --> 00:49:28,710
can create a struct or a class inside a

00:49:25,260 --> 00:49:31,410
lambda expression and then you can deco

00:49:28,710 --> 00:49:34,410
type the return type of that lambda and

00:49:31,410 --> 00:49:37,710
so you create an anonymous struct type

00:49:34,410 --> 00:49:40,080
that has an operator open paren close

00:49:37,710 --> 00:49:42,870
paren that returns the value of the

00:49:40,080 --> 00:49:44,640
string as a context / how many years of

00:49:42,870 --> 00:49:51,570
computer science does it take to get

00:49:44,640 --> 00:49:53,880
that right a lot of problem yeah I'm you

00:49:51,570 --> 00:49:58,350
see why I'm pushing back for use cases

00:49:53,880 --> 00:50:01,600
that a majority of users can use

00:49:58,350 --> 00:50:03,760
before I push it up in my top 20 of

00:50:01,600 --> 00:50:06,070
things where we should spend a lot of

00:50:03,760 --> 00:50:09,160
effort oh yeah you have some work to do

00:50:06,070 --> 00:50:11,140
they're not hostile I understand what

00:50:09,160 --> 00:50:14,680
you're saying I understand the type

00:50:11,140 --> 00:50:18,600
algebra I pretty sure I know how to

00:50:14,680 --> 00:50:21,550
implement it but that's not the problem

00:50:18,600 --> 00:50:22,540
what he said I loved the compile time

00:50:21,550 --> 00:50:26,860
format strings

00:50:22,540 --> 00:50:28,690
kudos run with that the rest of it

00:50:26,860 --> 00:50:30,220
sounds like one of the pitfalls I just

00:50:28,690 --> 00:50:31,750
described a few minutes ago from keep

00:50:30,220 --> 00:50:34,060
simple things make simple things simple

00:50:31,750 --> 00:50:36,000
one of the ways to go wrong was to try

00:50:34,060 --> 00:50:43,870
to make complicated things simple I

00:50:36,000 --> 00:50:46,540
worried this might be that also a lot of

00:50:43,870 --> 00:50:50,980
the thoughts on format strings are

00:50:46,540 --> 00:50:52,180
informed from C format strings like you

00:50:50,980 --> 00:50:55,690
know varargs

00:50:52,180 --> 00:50:57,390
things where it was necessary to have a

00:50:55,690 --> 00:51:00,850
user-specified

00:50:57,390 --> 00:51:04,060
description of what type it was this is

00:51:00,850 --> 00:51:06,850
a language about types the compiler

00:51:04,060 --> 00:51:10,090
already knows all of those things we

00:51:06,850 --> 00:51:12,550
have no blank there's clearly room for

00:51:10,090 --> 00:51:17,320
better technology here we should not be

00:51:12,550 --> 00:51:20,350
trying to mimic the 70's style design we

00:51:17,320 --> 00:51:23,880
should just do something better there's

00:51:20,350 --> 00:51:29,040
things in the works all over the place

00:51:23,880 --> 00:51:31,000
all right so let's take a hi so I have a

00:51:29,040 --> 00:51:33,130
drastically different question

00:51:31,000 --> 00:51:34,270
when you have a large project that

00:51:33,130 --> 00:51:35,800
you're trying to propose to the

00:51:34,270 --> 00:51:38,170
committee something on the scale of

00:51:35,800 --> 00:51:41,160
years modules concepts all these other

00:51:38,170 --> 00:51:45,000
things how do you maintain momentum

00:51:41,160 --> 00:51:48,040
through all these years and actually

00:51:45,000 --> 00:51:51,850
make the project a reality and the

00:51:48,040 --> 00:51:57,160
standard first you try not to lose it

00:51:51,850 --> 00:51:59,920
which is very difficult you you keep

00:51:57,160 --> 00:52:08,140
making the cases right so we talked

00:51:59,920 --> 00:52:10,030
about the concept we explained what the

00:52:08,140 --> 00:52:10,850
programs were no everybody's running

00:52:10,030 --> 00:52:12,440
into the ends

00:52:10,850 --> 00:52:14,980
important for the community to get

00:52:12,440 --> 00:52:18,590
something like that into the language

00:52:14,980 --> 00:52:21,710
for modules who get similar problems

00:52:18,590 --> 00:52:24,290
right we worry suffering from lack of

00:52:21,710 --> 00:52:27,410
good high genes and macros getting and

00:52:24,290 --> 00:52:30,230
so you system you don't have a good

00:52:27,410 --> 00:52:33,490
sense of what your templates codes mean

00:52:30,230 --> 00:52:36,590
when you ship them you know build time

00:52:33,490 --> 00:52:39,770
most of our code this is living the

00:52:36,590 --> 00:52:41,780
headers right which we super um so you

00:52:39,770 --> 00:52:43,280
get to explain this to the community

00:52:41,780 --> 00:52:47,840
what the program is first defined

00:52:43,280 --> 00:52:50,870
problem and hen patiently worked through

00:52:47,840 --> 00:52:54,410
the possible solutions and eventually

00:52:50,870 --> 00:52:57,980
tries to correct replace were say let's

00:52:54,410 --> 00:52:59,660
try this to see if we have a good

00:52:57,980 --> 00:53:03,830
solution for these set of problems that

00:52:59,660 --> 00:53:07,100
we have but I guess the most important

00:53:03,830 --> 00:53:13,970
thing is try not to lose it head on over

00:53:07,100 --> 00:53:17,650
that yeah I didn't hear everything

00:53:13,970 --> 00:53:17,650
because I was thinking of something else

00:53:18,220 --> 00:53:25,840
so if I repeat you apologies what I was

00:53:22,610 --> 00:53:29,150
thinking about was sort of practically

00:53:25,840 --> 00:53:32,210
what can keep me working on a problem

00:53:29,150 --> 00:53:35,900
for twenty years which is definitely

00:53:32,210 --> 00:53:40,400
related and I think first of all it's

00:53:35,900 --> 00:53:43,310
individual what applies to me may or may

00:53:40,400 --> 00:53:46,700
not apply to others what applies to

00:53:43,310 --> 00:53:47,180
others sometimes applies to me but not

00:53:46,700 --> 00:53:49,610
always

00:53:47,180 --> 00:53:54,260
I've seen people motivated in different

00:53:49,610 --> 00:53:56,690
ways none of the motivation comes from

00:53:54,260 --> 00:54:00,560
the standards committee the standards

00:53:56,690 --> 00:54:04,880
committee feels like a huge barrier from

00:54:00,560 --> 00:54:07,070
getting your great ideas that will solve

00:54:04,880 --> 00:54:12,140
all the problems out into the real world

00:54:07,070 --> 00:54:15,620
and in that it does a rather important

00:54:12,140 --> 00:54:18,620
service because you are ideas aren't as

00:54:15,620 --> 00:54:21,630
great as you thought they were

00:54:18,620 --> 00:54:28,200
what keeps me going is the applications

00:54:21,630 --> 00:54:31,710
and I see people doing really important

00:54:28,200 --> 00:54:33,960
interesting stuff that I like I mean it

00:54:31,710 --> 00:54:36,930
may be a space probe it may be the

00:54:33,960 --> 00:54:43,470
brakes on your car that if you screw up

00:54:36,930 --> 00:54:46,860
you die it may be large distributed

00:54:43,470 --> 00:54:50,000
systems network systems and such and I

00:54:46,860 --> 00:54:52,580
look at those problems and I think wow

00:54:50,000 --> 00:54:55,590
this is important

00:54:52,580 --> 00:54:59,820
people's lives and livelihoods depend on

00:54:55,590 --> 00:55:04,080
it and boy it's Pago Glee we can do it

00:54:59,820 --> 00:55:07,590
better and so I look at problems

00:55:04,080 --> 00:55:11,310
starting from what are people doing out

00:55:07,590 --> 00:55:15,990
in the real world meaning things and

00:55:11,310 --> 00:55:18,330
people and such not not inside it and

00:55:15,990 --> 00:55:18,870
then I look at the code about how they

00:55:18,330 --> 00:55:21,810
do it

00:55:18,870 --> 00:55:26,040
and I wonder how could it be done easier

00:55:21,810 --> 00:55:28,530
how could it be done more economically

00:55:26,040 --> 00:55:30,900
how could it be done faster if speed

00:55:28,530 --> 00:55:33,930
matters how could it be done more

00:55:30,900 --> 00:55:37,260
reliably if reliability matters and

00:55:33,930 --> 00:55:43,200
these things often matter and from there

00:55:37,260 --> 00:55:45,840
I go to what I set of sort of candidate

00:55:43,200 --> 00:55:48,870
improvements it could be a library it

00:55:45,840 --> 00:55:50,820
could be a language feature it could be

00:55:48,870 --> 00:55:54,360
something that could be standardized or

00:55:50,820 --> 00:55:59,520
it could be specialized but I keep

00:55:54,360 --> 00:56:02,070
coming back so what does this actually

00:55:59,520 --> 00:56:06,030
do for people out there in the non

00:56:02,070 --> 00:56:09,570
computing world and I keep thinking that

00:56:06,030 --> 00:56:14,490
whenever I find the solution computer

00:56:09,570 --> 00:56:17,100
science is a really powerful tool we

00:56:14,490 --> 00:56:20,520
know how to do most things if we decide

00:56:17,100 --> 00:56:23,040
to do them I can read the academic

00:56:20,520 --> 00:56:25,260
papers I could see the experiments with

00:56:23,040 --> 00:56:27,900
all languages I can see the libraries

00:56:25,260 --> 00:56:29,780
used I don't worry too much about

00:56:27,900 --> 00:56:31,940
whether I can do it

00:56:29,780 --> 00:56:35,270
I worry about whether I have the right

00:56:31,940 --> 00:56:38,300
problem and once I decide that I have

00:56:35,270 --> 00:56:43,100
the right problem it hurts people when

00:56:38,300 --> 00:56:45,980
it's not there and then I start working

00:56:43,100 --> 00:56:48,350
on a right solution I try to talk to

00:56:45,980 --> 00:56:53,600
people who know more about it than me I

00:56:48,350 --> 00:56:54,770
try to talk to people that can help come

00:56:53,600 --> 00:56:56,930
up with a solution

00:56:54,770 --> 00:57:00,680
sometimes I compromise too much

00:56:56,930 --> 00:57:03,530
sometimes I compromise too little but we

00:57:00,680 --> 00:57:06,410
have to find a solution that that helps

00:57:03,530 --> 00:57:09,080
and that's what keeps me going

00:57:06,410 --> 00:57:12,980
arguing about a particular way to stick

00:57:09,080 --> 00:57:18,800
a comma can keep keeping me excited for

00:57:12,980 --> 00:57:21,140
at least a week about those things for

00:57:18,800 --> 00:57:24,440
at least a week but it doesn't keep me

00:57:21,140 --> 00:57:26,540
going for years for that you need some

00:57:24,440 --> 00:57:27,730
really fundamental problems that make a

00:57:26,540 --> 00:57:30,760
fundamental difference

00:57:27,730 --> 00:57:34,270
currently the ones we are looking at

00:57:30,760 --> 00:57:37,910
concepts some of concurrency parallels

00:57:34,270 --> 00:57:41,300
things some composition of libraries

00:57:37,910 --> 00:57:45,650
things the modularity to clean up your

00:57:41,300 --> 00:57:47,780
code and the static reflection things

00:57:45,650 --> 00:57:51,550
that allows us to compensate from the

00:57:47,780 --> 00:57:54,770
problems of not having other forms of

00:57:51,550 --> 00:57:58,100
reflection and these things in keeping

00:57:54,770 --> 00:58:02,770
me going for a longest time first

00:57:58,100 --> 00:58:02,770
concepts definitely since the late 80s

00:58:03,010 --> 00:58:10,280
impatient that's one reason so I started

00:58:08,540 --> 00:58:14,060
my range library four years ago as a

00:58:10,280 --> 00:58:17,780
weekend hacked and what's kept me going

00:58:14,060 --> 00:58:20,150
is that well two things really Oh an

00:58:17,780 --> 00:58:21,650
external and one internal the external

00:58:20,150 --> 00:58:25,660
thing is the feedback that I've gotten

00:58:21,650 --> 00:58:29,570
from its users and it's been

00:58:25,660 --> 00:58:29,960
overwhelmingly positive what keeps me

00:58:29,570 --> 00:58:32,810
going

00:58:29,960 --> 00:58:34,830
is that every once in a while I actually

00:58:32,810 --> 00:58:39,150
get a piece of fan mail

00:58:34,830 --> 00:58:42,720
some someone says like dude your range

00:58:39,150 --> 00:58:47,070
library help me do X Y or Z and it's

00:58:42,720 --> 00:58:49,230
really terrific and and you know coming

00:58:47,070 --> 00:58:51,090
to conferences like this and and and

00:58:49,230 --> 00:58:53,340
meeting people who know my stuff and use

00:58:51,090 --> 00:58:56,310
my stuff and I have encouraged me over

00:58:53,340 --> 00:58:59,880
the past four years to continue with the

00:58:56,310 --> 00:59:01,230
standardization of the library and then

00:58:59,880 --> 00:59:03,420
and then the other thing that keeps me

00:59:01,230 --> 00:59:06,510
going is more internal it's um you know

00:59:03,420 --> 00:59:08,910
I might you know surf around the

00:59:06,510 --> 00:59:14,490
Facebook's codebase and I think to

00:59:08,910 --> 00:59:16,680
myself oh my god or you know I would I

00:59:14,490 --> 00:59:19,830
would look at the code on github are

00:59:16,680 --> 00:59:21,900
people's solutions to problems and I

00:59:19,830 --> 00:59:26,490
think there's just too much complexity

00:59:21,900 --> 00:59:34,020
in software and and so what motivates me

00:59:26,490 --> 00:59:38,250
is my intense need to hack at the root

00:59:34,020 --> 00:59:42,630
of software complexity I can't not do

00:59:38,250 --> 00:59:44,130
something about it we have the project

00:59:42,630 --> 00:59:45,840
editors of two of the long-running

00:59:44,130 --> 00:59:48,060
projects you've talked about co-routines

00:59:45,840 --> 00:59:55,920
and concepts on stage I'd love to hear

00:59:48,060 --> 00:59:58,020
from gore and or enter pay avoidance yes

00:59:55,920 --> 00:59:59,730
so people are most motivated with

00:59:58,020 --> 01:00:03,270
they're trying to address the personal

00:59:59,730 --> 01:00:05,970
pain before joy in C++ team I was right

01:00:03,270 --> 01:00:09,330
in the scene code for 15 years in the OS

01:00:05,970 --> 01:00:13,100
division so it's a big personal pain to

01:00:09,330 --> 01:00:16,110
write a Cinco so I kind of want to help

01:00:13,100 --> 01:00:18,990
so you consider the process of

01:00:16,110 --> 01:00:21,900
standardizing code routines a lesser

01:00:18,990 --> 01:00:28,810
paid than not having them

01:00:21,900 --> 01:00:31,970
[Applause]

01:00:28,810 --> 01:00:40,970
which cheapest class team was the pain

01:00:31,970 --> 01:00:48,860
avoidance so I having worked on concepts

01:00:40,970 --> 01:00:52,130
for six years seven years it uh it

01:00:48,860 --> 01:00:53,510
always helps keep you focused when you

01:00:52,130 --> 01:00:55,910
feel like an working on something that's

01:00:53,510 --> 01:00:58,580
going to improve somebody else's job or

01:00:55,910 --> 01:01:01,060
life later on it's certainly one thing

01:00:58,580 --> 01:01:03,820
that helps keep you going on the project

01:01:01,060 --> 01:01:08,510
positive feedback from users is great

01:01:03,820 --> 01:01:10,790
bug reports maybe less so although they

01:01:08,510 --> 01:01:12,080
are a good measure of users so if you

01:01:10,790 --> 01:01:13,490
actually get bug reports that means you

01:01:12,080 --> 01:01:16,070
have users and therefore your work is at

01:01:13,490 --> 01:01:17,210
some level visible these things also

01:01:16,070 --> 01:01:19,820
kind of help you keep going

01:01:17,210 --> 01:01:22,820
but I Gaby's actually pretty right on

01:01:19,820 --> 01:01:25,460
this try not to go insane what you said

01:01:22,820 --> 01:01:28,790
yeah especially through committee its it

01:01:25,460 --> 01:01:31,010
can be a soul grinding task to push a

01:01:28,790 --> 01:01:35,210
large a large language feature through

01:01:31,010 --> 01:01:39,170
the Standards Committee and you will

01:01:35,210 --> 01:01:42,080
lose sleep over it okay thank you all

01:01:39,170 --> 01:01:44,060
right thank you very much guys I want to

01:01:42,080 --> 01:01:47,390
take a question from you but we are now

01:01:44,060 --> 01:01:49,460
going to introduce the new 2+2 rule we

01:01:47,390 --> 01:01:53,240
have two people respond no more than two

01:01:49,460 --> 01:01:55,070
sentences so think about your response

01:01:53,240 --> 01:01:56,690
is very careful easy what's your

01:01:55,070 --> 01:02:02,060
question okay that's nice because I was

01:01:56,690 --> 01:02:06,620
gonna ask Abby about modules so so I've

01:02:02,060 --> 01:02:08,390
been looking at them extensively and one

01:02:06,620 --> 01:02:10,790
of the things I've noticed is that with

01:02:08,390 --> 01:02:13,130
the current way that both clang and

01:02:10,790 --> 01:02:17,480
visual studio handle them is that if I

01:02:13,130 --> 01:02:20,420
have a module B and module a ma imports

01:02:17,480 --> 01:02:22,790
B and I try to compile module a first

01:02:20,420 --> 01:02:24,770
and B hasn't been built the compiler

01:02:22,790 --> 01:02:28,940
errors out because the module interface

01:02:24,770 --> 01:02:33,210
isn't there how is this solved without

01:02:28,940 --> 01:02:47,190
turning the compiler into a built system

01:02:33,210 --> 01:02:49,250
a lot of commas in make it a run-on

01:02:47,190 --> 01:02:54,330
sentence yeah

01:02:49,250 --> 01:02:57,360
deep breath yes so this is the problem

01:02:54,330 --> 01:03:08,040
for tool vendors it is not a problem in

01:02:57,360 --> 01:03:11,400
the language specification so I am also

01:03:08,040 --> 01:03:15,690
- vendor and the way we going to solve

01:03:11,400 --> 01:03:20,310
this is also to get your build system B

01:03:15,690 --> 01:03:22,530
module aware so that you actually have

01:03:20,310 --> 01:03:27,530
it complements not you don't bring the

01:03:22,530 --> 01:03:33,290
bills into the compile okay thank you

01:03:27,530 --> 01:03:37,800
and such a friendly operation sorry York

01:03:33,290 --> 01:03:39,960
yeah so my real question is what exactly

01:03:37,800 --> 01:03:42,120
determines what can be added to the

01:03:39,960 --> 01:03:45,090
language and not and outside what I see

01:03:42,120 --> 01:03:46,920
is two conflicting examples so back in

01:03:45,090 --> 01:03:49,410
the 90s there was a proposal to add the

01:03:46,920 --> 01:03:51,450
keyword inherited to the language so you

01:03:49,410 --> 01:03:54,510
could call your superclasses

01:03:51,450 --> 01:03:56,550
implementation of a function from

01:03:54,510 --> 01:03:59,160
subclasses implementation and the answer

01:03:56,550 --> 01:04:02,730
was this doesn't provide something new

01:03:59,160 --> 01:04:05,520
you can just simply type def your

01:04:02,730 --> 01:04:06,840
superclass to be inherited all the way

01:04:05,520 --> 01:04:08,840
down and you've already got the feature

01:04:06,840 --> 01:04:11,460
so why do we need the compiler to do it

01:04:08,840 --> 01:04:13,380
more recently I would see the counter

01:04:11,460 --> 01:04:18,180
example is we introduced the keywords

01:04:13,380 --> 01:04:19,530
and or not and those seem definitely

01:04:18,180 --> 01:04:22,320
something that the language could

01:04:19,530 --> 01:04:26,070
already do if nothing else you just use

01:04:22,320 --> 01:04:27,990
pound to find to do it so just trying to

01:04:26,070 --> 01:04:32,370
get a better feel for what makes it in

01:04:27,990 --> 01:04:37,010
what doesn't two sentences is not enough

01:04:32,370 --> 01:04:37,010
to answer this question that's one

01:04:39,359 --> 01:04:48,119
navigating large class hierarchies is

01:04:43,119 --> 01:04:48,119
not at the top of my priority list I

01:04:49,530 --> 01:04:55,030
could be wrong but weren't the end or

01:04:52,210 --> 01:04:56,170
not aliases already in see I thought

01:04:55,030 --> 01:04:59,020
they were at least in the see photos

01:04:56,170 --> 01:05:00,339
preprocessor since before the inherited

01:04:59,020 --> 01:05:00,910
keyword but I could be wrong in my

01:05:00,339 --> 01:05:02,680
history

01:05:00,910 --> 01:05:07,559
they've been there a long time bi mát

01:05:02,680 --> 01:05:07,559
cruising sea and air keywords in C 98

01:05:10,619 --> 01:05:15,520
alright I think we want to come back

01:05:12,520 --> 01:05:20,440
over here I'll try to format this for

01:05:15,520 --> 01:05:23,500
brevity should C++ have an explicit way

01:05:20,440 --> 01:05:25,630
of declaring an uninitialized variable

01:05:23,500 --> 01:05:27,960
so that we can get rid of doing it any

01:05:25,630 --> 01:05:27,960
other way

01:05:28,200 --> 01:05:36,720
no thank you

01:05:31,920 --> 01:05:36,720
you should initialize your variables

01:05:44,730 --> 01:05:53,220
maybe think about our paper Oh

01:05:54,369 --> 01:06:01,559
leave us hanging what a second sentence

01:05:56,799 --> 01:06:07,270
that was - you can talk about it later

01:06:01,559 --> 01:06:11,400
okay all right speaking about real-world

01:06:07,270 --> 01:06:14,140
use cases there is one a use case which

01:06:11,400 --> 01:06:18,190
everybody in this room uses regularly

01:06:14,140 --> 01:06:22,720
and the way it's currently implemented

01:06:18,190 --> 01:06:28,240
in C++ 88 at least 80% hate I am

01:06:22,720 --> 01:06:33,579
speaking about formatting in iostream

01:06:28,240 --> 01:06:41,290
using overloaded Chevron's the shift

01:06:33,579 --> 01:06:44,440
operator the question is how sacred this

01:06:41,290 --> 01:06:47,369
concept is for the committee and do we

01:06:44,440 --> 01:06:49,200
have a chance to have something more

01:06:47,369 --> 01:06:52,740
usable and more

01:06:49,200 --> 01:06:57,920
double as an overloaded shift operators

01:06:52,740 --> 01:07:01,620
for formatting in other words after

01:06:57,920 --> 01:07:06,870
those 30 years when each and every book

01:07:01,620 --> 01:07:10,770
on C++ uses AC out shift operator

01:07:06,870 --> 01:07:14,160
something can we finally have something

01:07:10,770 --> 01:07:20,940
more usable and readable or for real

01:07:14,160 --> 01:07:25,980
load my compiler people and my optimizer

01:07:20,940 --> 01:07:30,210
people and everybody else wants to get

01:07:25,980 --> 01:07:35,520
off of those however I can't speak for

01:07:30,210 --> 01:07:38,130
the committee everything is possible if

01:07:35,520 --> 01:07:49,500
you have a well written proposal with

01:07:38,130 --> 01:07:52,650
good rationale the iostream solution is

01:07:49,500 --> 01:07:55,470
an 8-year solution it is type safe and

01:07:52,650 --> 01:07:58,380
extensible what a lot of people want is

01:07:55,470 --> 01:08:01,200
the 70s solution that's type unsafe and

01:07:58,380 --> 01:08:05,580
unex 10 scible we have to do better than

01:08:01,200 --> 01:08:07,710
both to make any progress I believe

01:08:05,580 --> 01:08:10,650
there is an active proposal or soon will

01:08:07,710 --> 01:08:13,050
pay for fmt I don't know its status but

01:08:10,650 --> 01:08:18,000
I consider it better that wasn't my

01:08:13,050 --> 01:08:20,490
question though my question is what's so

01:08:18,000 --> 01:08:22,760
hard about standardizing atomic shared

01:08:20,490 --> 01:08:22,760
butter

01:08:29,440 --> 01:08:35,630
we're we're doing it it's going through

01:08:32,600 --> 01:08:37,700
library wording review and forend it's

01:08:35,630 --> 01:08:40,790
expected to come up for a plenary vote

01:08:37,700 --> 01:08:42,259
in to see Fussell's 20 it weren't you

01:08:40,790 --> 01:08:44,900
the same person who was just here

01:08:42,259 --> 01:08:47,540
you're now later in your own queue it's

01:08:44,900 --> 01:08:50,420
expected it is very likely to be part of

01:08:47,540 --> 01:08:53,240
to be part of c++ 20 in the next meeting

01:08:50,420 --> 01:08:54,500
or two unless something comes up it was

01:08:53,240 --> 01:08:56,569
published as a as part of the

01:08:54,500 --> 01:08:59,420
concurrence ETS first so it seems to be

01:08:56,569 --> 01:09:06,350
on track so the answer was nothing one

01:08:59,420 --> 01:09:08,420
word for a very large value of one but

01:09:06,350 --> 01:09:09,589
but also it comes back to motivating use

01:09:08,420 --> 01:09:11,900
cases

01:09:09,589 --> 01:09:16,120
it required convincing for people who

01:09:11,900 --> 01:09:16,120
were skeptical about the use cases

01:09:19,150 --> 01:09:25,839
okay what the hell is am honored

01:09:27,410 --> 01:09:35,819
[Applause]

01:09:32,089 --> 01:09:44,339
what is a a monad was the question and

01:09:35,819 --> 01:09:51,750
and this is the wrong committee it's we

01:09:44,339 --> 01:09:55,410
do have do me a warm fuzzy thing it's a

01:09:51,750 --> 01:09:55,900
mono in the category of endo functors

01:09:55,410 --> 01:09:59,120
[Applause]

01:09:55,900 --> 01:09:59,120
[Music]

01:10:02,630 --> 01:10:10,770
very good I watched a video from the

01:10:09,090 --> 01:10:14,010
grill the committee from I think it was

01:10:10,770 --> 01:10:17,010
last year maybe the year before it was

01:10:14,010 --> 01:10:20,330
pertaining to my field of you know bare

01:10:17,010 --> 01:10:22,280
metal stuff and why everybody uses C and

01:10:20,330 --> 01:10:25,980
[Music]

01:10:22,280 --> 01:10:30,810
the answer coming from the committee was

01:10:25,980 --> 01:10:33,989
mostly it's a marketing problem and I

01:10:30,810 --> 01:10:35,370
agree with you on core language like you

01:10:33,989 --> 01:10:37,920
know in our build system there are maybe

01:10:35,370 --> 01:10:39,360
20 compiler flags turning off absolutely

01:10:37,920 --> 01:10:42,930
everything we can turn off and then at

01:10:39,360 --> 01:10:44,520
that point we are more efficient than C

01:10:42,930 --> 01:10:47,820
so there's no problem there in my mind

01:10:44,520 --> 01:10:50,040
but when it comes to libraries do you

01:10:47,820 --> 01:10:53,070
still see it as only a marketing problem

01:10:50,040 --> 01:10:55,410
or have you used like interrupt service

01:10:53,070 --> 01:10:58,530
routines that interrupt a thread and use

01:10:55,410 --> 01:11:04,140
it stack and the implications of locks

01:10:58,530 --> 01:11:06,900
in that context and stuff well even

01:11:04,140 --> 01:11:10,710
c-plus in Windows NT kernel people use

01:11:06,900 --> 01:11:13,230
C++ but not the library yeah fart yes so

01:11:10,710 --> 01:11:16,170
that but there is s g14 group which

01:11:13,230 --> 01:11:18,960
right now is looking into those things

01:11:16,170 --> 01:11:23,370
and trying to address those bare bare

01:11:18,960 --> 01:11:25,380
metal people it's a marketing problem

01:11:23,370 --> 01:11:29,790
because she doesn't have anything there

01:11:25,380 --> 01:11:32,040
are either I agree yeah and if you look

01:11:29,790 --> 01:11:34,410
at the standard library you know the SEO

01:11:32,040 --> 01:11:39,630
part for example most of the algorithms

01:11:34,410 --> 01:11:41,140
I just find with you know they didn't

01:11:39,630 --> 01:11:45,020
require any these for around

01:11:41,140 --> 01:11:47,360
so I've seen them used scene practice so

01:11:45,020 --> 01:11:50,240
I agree it's not getting an educational

01:11:47,360 --> 01:11:51,800
problem um could I tie this back into

01:11:50,240 --> 01:11:54,050
Eric nibblers response to my last

01:11:51,800 --> 01:11:57,860
question about level of abstraction

01:11:54,050 --> 01:11:59,750
because there there is a certain level

01:11:57,860 --> 01:12:01,550
of trust that the person that wrote that

01:11:59,750 --> 01:12:03,170
level of abstraction in code and

01:12:01,550 --> 01:12:05,090
language that I cannot review because

01:12:03,170 --> 01:12:06,950
it's in a language you know part of the

01:12:05,090 --> 01:12:09,860
language that I don't speak that he was

01:12:06,950 --> 01:12:12,530
thinking about my problem and that the

01:12:09,860 --> 01:12:14,240
guarantees he's making for you know I

01:12:12,530 --> 01:12:17,590
don't know desktop development walls

01:12:14,240 --> 01:12:19,220
also hold in in another context yeah I I

01:12:17,590 --> 01:12:22,340
can't speak to that

01:12:19,220 --> 01:12:24,410
I have seen people very fearful of using

01:12:22,340 --> 01:12:27,920
stood sorts because they say oh it is

01:12:24,410 --> 01:12:30,170
the STL stuff and they were using bubble

01:12:27,920 --> 01:12:32,420
sort and I had to sit down with them and

01:12:30,170 --> 01:12:34,670
and and go through the code and convince

01:12:32,420 --> 01:12:36,380
them that if you just type stood sorts

01:12:34,670 --> 01:12:40,190
you give the first item in the second

01:12:36,380 --> 01:12:40,880
argument it'd go much faster than the

01:12:40,190 --> 01:12:42,530
bubble sort

01:12:40,880 --> 01:12:43,730
you just wrote yourself because you

01:12:42,530 --> 01:12:46,400
couldn't trust this other library

01:12:43,730 --> 01:12:54,620
because it has higher abstraction you

01:12:46,400 --> 01:12:58,940
know this is from real world I think you

01:12:54,620 --> 01:13:03,140
have to know how much to trust your

01:12:58,940 --> 01:13:06,050
librarians they have to be clear about

01:13:03,140 --> 01:13:12,850
what they're actually providing and what

01:13:06,050 --> 01:13:16,010
they aren't see my talk tomorrow there's

01:13:12,850 --> 01:13:19,820
plenty of room for improvement in order

01:13:16,010 --> 01:13:22,400
to make the library more useful for the

01:13:19,820 --> 01:13:24,940
use cases you care about but luckily

01:13:22,400 --> 01:13:27,590
there are people working on that problem

01:13:24,940 --> 01:13:29,120
okay so we're now at fifteen minutes so

01:13:27,590 --> 01:13:30,590
we're gonna stop the rule of two and two

01:13:29,120 --> 01:13:33,970
and we're gonna grow the rule of five

01:13:30,590 --> 01:13:33,970
you have five words

01:13:34,210 --> 01:13:39,260
all right well well mine was going to be

01:13:37,070 --> 01:13:42,050
difficult answer in two sentences and

01:13:39,260 --> 01:13:43,340
also kind of a repeat of evidence they

01:13:42,050 --> 01:13:44,630
know we've talked about this before I

01:13:43,340 --> 01:13:46,280
didn't know he was gonna ask that one

01:13:44,630 --> 01:13:47,720
but it's kind of shaded into this one

01:13:46,280 --> 01:13:50,630
which is and see if all supposed to be

01:13:47,720 --> 01:13:54,230
have a very well sort of core language a

01:13:50,630 --> 01:13:56,060
way of expressing certain properties

01:13:54,230 --> 01:13:57,920
about behaviors certain things like this

01:13:56,060 --> 01:13:59,270
this function doesn't throw and

01:13:57,920 --> 01:14:01,640
therefore things that call it don't

01:13:59,270 --> 01:14:04,280
throw and and that no except goes all

01:14:01,640 --> 01:14:07,160
the way yo context furnace can kind of

01:14:04,280 --> 01:14:08,600
be propagated now triviality can be

01:14:07,160 --> 01:14:11,390
propagated but certain other things

01:14:08,600 --> 01:14:13,100
pureness non memory allocation

01:14:11,390 --> 01:14:15,530
non-touching Global's touching only

01:14:13,100 --> 01:14:17,870
thread-local storage not taking new text

01:14:15,530 --> 01:14:18,800
locks not doing disk i/o many many

01:14:17,870 --> 01:14:20,360
different things there's kind of what

01:14:18,800 --> 01:14:22,040
Odin was saying right the high level

01:14:20,360 --> 01:14:23,900
code has certain things it wants to know

01:14:22,040 --> 01:14:27,140
about the low-level code in the way

01:14:23,900 --> 01:14:28,760
that's gonna use it is is you said some

01:14:27,140 --> 01:14:30,500
people are working on this who is

01:14:28,760 --> 01:14:34,250
working on this or what what progress is

01:14:30,500 --> 01:14:35,870
being made in not necessarily taxon

01:14:34,250 --> 01:14:37,040
amazing categorizing the different kinds

01:14:35,870 --> 01:14:39,860
of behaviors because they're infinite

01:14:37,040 --> 01:14:41,060
but allowing the high level code asks

01:14:39,860 --> 01:14:45,400
these questions with low-level code to

01:14:41,060 --> 01:14:45,400
make these guarantees five words or less

01:14:46,630 --> 01:14:56,860
try solving it with contract and I

01:14:52,640 --> 01:15:00,140
simply don't accept the five word things

01:14:56,860 --> 01:15:02,450
because you can't give it a really

01:15:00,140 --> 01:15:05,330
decent thoughtful answer to that and it

01:15:02,450 --> 01:15:08,270
deserves an answer first of all we

01:15:05,330 --> 01:15:11,240
should not litter the language with a

01:15:08,270 --> 01:15:14,690
key word and a property for everything

01:15:11,240 --> 01:15:16,640
anybody could possibly want the language

01:15:14,690 --> 01:15:18,860
says what is possible and what it means

01:15:16,640 --> 01:15:20,450
it doesn't say what you should do in

01:15:18,860 --> 01:15:22,760
particular it does not say what you

01:15:20,450 --> 01:15:26,270
should do in a particular sub field I

01:15:22,760 --> 01:15:30,980
write a lot of code we're calling malloc

01:15:26,270 --> 01:15:33,500
is a disaster it must not happen that

01:15:30,980 --> 01:15:35,870
should not be a library a language

01:15:33,500 --> 01:15:39,110
feature this should be a guidelines

01:15:35,870 --> 01:15:42,410
feature and what we need is a not so

01:15:39,110 --> 01:15:45,199
called guideline for say bare metal

01:15:42,410 --> 01:15:48,780
programming for

01:15:45,199 --> 01:15:51,540
low latency programming for programming

01:15:48,780 --> 01:15:54,020
where you are not allowed fragmentation

01:15:51,540 --> 01:15:56,280
and things like that well I think my

01:15:54,020 --> 01:15:58,679
problem with that is that in library

01:15:56,280 --> 01:16:00,030
code such as the STL where for example

01:15:58,679 --> 01:16:01,829
you have to know that stead sort is

01:16:00,030 --> 01:16:04,110
perfectly safe to use instead in place

01:16:01,829 --> 01:16:06,420
merge is not safe to use in exactly your

01:16:04,110 --> 01:16:08,280
use case but they don't expose that in

01:16:06,420 --> 01:16:11,900
any way in the type system is is their

01:16:08,280 --> 01:16:19,770
path is impossible to do that contracts

01:16:11,900 --> 01:16:26,579
concepts guidelines save them for next

01:16:19,770 --> 01:16:28,739
time so first of all the key word like

01:16:26,579 --> 01:16:31,380
the end or not keywords I looked it up

01:16:28,739 --> 01:16:33,420
it came from C 95 which was kind of the

01:16:31,380 --> 01:16:36,119
internationalization of the C 89

01:16:33,420 --> 01:16:38,309
standard for international keyboards

01:16:36,119 --> 01:16:40,679
that may not have those specific

01:16:38,309 --> 01:16:45,449
characters on them it's not true I did

01:16:40,679 --> 01:16:49,920
it before that that was the reasoning

01:16:45,449 --> 01:17:00,630
that the C standard gave anyways so what

01:16:49,920 --> 01:17:02,579
was my question something you can hear

01:17:00,630 --> 01:17:05,099
that comment when she takes something

01:17:02,579 --> 01:17:14,360
they never credits us and they always

01:17:05,099 --> 01:17:14,360
adopted in an incompatible fashion yeah

01:17:15,110 --> 01:17:23,960
slash slash maybe if anybody can

01:17:19,290 --> 01:17:23,960
understand that section of the standards

01:17:26,329 --> 01:17:30,690
may be more interesting to do in five

01:17:28,920 --> 01:17:33,869
words except for her who gets 7 because

01:17:30,690 --> 01:17:35,010
he saved to the other time and all of

01:17:33,869 --> 01:17:36,480
you guys were you know we were all

01:17:35,010 --> 01:17:38,639
introduced to all of you as being up

01:17:36,480 --> 01:17:40,020
here for like being associated with a

01:17:38,639 --> 01:17:42,179
specific thing you do or it suppose

01:17:40,020 --> 01:17:43,980
everything you're working on so it'd be

01:17:42,179 --> 01:17:45,750
really great if in five words or less

01:17:43,980 --> 01:17:48,719
people could talk about like some like

01:17:45,750 --> 01:17:50,550
describe how that idea came around like

01:17:48,719 --> 01:17:52,440
a Eureka moment or like how you got

01:17:50,550 --> 01:17:54,949
associated with the things that you're

01:17:52,440 --> 01:17:54,949
not working on

01:17:55,230 --> 01:18:02,980
except for here we get some this may be

01:17:59,139 --> 01:18:14,139
a CPP caste Thursday a little more

01:18:02,980 --> 01:18:18,000
important now than simplicity to boldly

01:18:14,139 --> 01:18:18,000
go this will not work

01:18:21,210 --> 01:18:44,369
boost range plus boost iterator equals

01:18:25,619 --> 01:18:44,369
adapters her wouldn't let me decline

01:18:50,920 --> 01:19:04,180
oh so many things I could say about

01:18:57,280 --> 01:19:13,300
concepts but I will decline right state

01:19:04,180 --> 01:19:19,210
machines as imperative code five words

01:19:13,300 --> 01:19:23,530
is also about fun boost MPL

01:19:19,210 --> 01:19:32,200
boost appeal well metaprogramming lots

01:19:23,530 --> 01:19:33,850
of pain alright so back to the thing I

01:19:32,200 --> 01:19:37,270
was talking about before I would really

01:19:33,850 --> 01:19:39,940
like it is good we may have to put a

01:19:37,270 --> 01:19:50,380
limit on the questioner as well I would

01:19:39,940 --> 01:19:53,950
like deco type lambda expressions when

01:19:50,380 --> 01:19:56,650
deco type lambda expressions so I'm

01:19:53,950 --> 01:19:58,450
working I'm working on the like fifth

01:19:56,650 --> 01:20:02,560
iteration of the wording it's just uh

01:19:58,450 --> 01:20:04,950
it's it's it's been true ewg it's just

01:20:02,560 --> 01:20:07,570
is this about getting the wording done

01:20:04,950 --> 01:20:09,130
actually if there is core people in a

01:20:07,570 --> 01:20:10,960
room please review the paper it as an

01:20:09,130 --> 01:20:20,380
amendment list because I want to be done

01:20:10,960 --> 01:20:22,690
in Albuquerque hopefully so what

01:20:20,380 --> 01:20:25,410
happened to unified call syntax and how

01:20:22,690 --> 01:20:25,410
to resurrect

01:20:25,810 --> 01:20:33,560
got cured with people far more concerned

01:20:29,000 --> 01:20:39,800
with the past in the future maybe it'll

01:20:33,560 --> 01:20:45,140
come back this is not completely unified

01:20:39,800 --> 01:20:51,520
opinion by everybody makes librarians

01:20:45,140 --> 01:20:54,350
jobs hard so let me try to provide a

01:20:51,520 --> 01:20:59,980
less inflammatory response than be

01:20:54,350 --> 01:21:03,920
honored it why because it's my job so

01:20:59,980 --> 01:21:09,080
there are major concerns about silent

01:21:03,920 --> 01:21:11,930
changes to what your code means have you

01:21:09,080 --> 01:21:14,030
thought about extension methods like let

01:21:11,930 --> 01:21:15,440
me give you a general answer because

01:21:14,030 --> 01:21:16,850
this is and I'm not gonna stick to five

01:21:15,440 --> 01:21:21,020
words because it's an instructive

01:21:16,850 --> 01:21:23,330
example the concern is that you're

01:21:21,020 --> 01:21:26,690
balancing compatibility so not changing

01:21:23,330 --> 01:21:29,840
the meaning of old code and also future

01:21:26,690 --> 01:21:32,360
usability if we don't change the meaning

01:21:29,840 --> 01:21:35,060
of old code we can't just make member

01:21:32,360 --> 01:21:37,370
non-member be equal because that would

01:21:35,060 --> 01:21:38,960
change the meaning of this call site to

01:21:37,370 --> 01:21:40,550
old code could suddenly call a better

01:21:38,960 --> 01:21:43,610
match that's the other thing right

01:21:40,550 --> 01:21:46,190
therefore and this is the key part you

01:21:43,610 --> 01:21:48,440
have to have a fallback anytime you have

01:21:46,190 --> 01:21:49,940
compatibility it involves a fallback in

01:21:48,440 --> 01:21:51,290
a language feature so you're falling

01:21:49,940 --> 01:21:54,320
that gives you the backward

01:21:51,290 --> 01:21:56,720
compatibility anytime you have a

01:21:54,320 --> 01:22:00,980
fallback it means you can in the future

01:21:56,720 --> 01:22:02,660
write code the compiled fine today but

01:22:00,980 --> 01:22:04,610
if somebody writes a better match that

01:22:02,660 --> 01:22:06,410
hits the non fallback case could change

01:22:04,610 --> 01:22:09,230
the meaning of that future code now this

01:22:06,410 --> 01:22:11,000
is code that does not exist today but

01:22:09,230 --> 01:22:12,770
this is where Titus and others are

01:22:11,000 --> 01:22:15,650
concerned about yes but now I'm writing

01:22:12,770 --> 01:22:17,120
code that doesn't exist today which I

01:22:15,650 --> 01:22:19,190
could make change meaning now some

01:22:17,120 --> 01:22:20,690
people figurative feel that will they'll

01:22:19,190 --> 01:22:22,040
get over it it's just like name hiding

01:22:20,690 --> 01:22:24,500
it's exactly the same thing with name

01:22:22,040 --> 01:22:25,670
hiding in class hierarchy and some

01:22:24,500 --> 01:22:26,960
people are more worried about it they

01:22:25,670 --> 01:22:28,520
don't want more of that in the language

01:22:26,960 --> 01:22:31,100
or they're concerned about it spreading

01:22:28,520 --> 01:22:33,020
further but this is a fundamental

01:22:31,100 --> 01:22:33,840
tension it's not just about unified call

01:22:33,020 --> 01:22:37,080
syntax

01:22:33,840 --> 01:22:38,790
backward compatibility you often resort

01:22:37,080 --> 01:22:40,770
to a fallback to maintain backward

01:22:38,790 --> 01:22:43,890
compatibility and then it creates a

01:22:40,770 --> 01:22:45,750
hiding situation where you can hide

01:22:43,890 --> 01:22:49,800
something by a new code that didn't

01:22:45,750 --> 01:22:51,540
exist before in the new cases think that

01:22:49,800 --> 01:22:52,680
through just with an example or two and

01:22:51,540 --> 01:22:54,750
you'll see what I mean but it's a very

01:22:52,680 --> 01:22:57,510
general problem not just is there any

01:22:54,750 --> 01:23:00,450
compatible extensions aren't we trying

01:22:57,510 --> 01:23:02,790
too hard we should keep simple things

01:23:00,450 --> 01:23:04,740
simple and there are languages that have

01:23:02,790 --> 01:23:07,950
solved this problem and we should learn

01:23:04,740 --> 01:23:09,540
from them and there are motifs the

01:23:07,950 --> 01:23:13,260
Python folks how they like their

01:23:09,540 --> 01:23:15,720
bifurcation just look at c-sharp and

01:23:13,260 --> 01:23:23,400
other languages that have extension

01:23:15,720 --> 01:23:26,850
methods it works c-sharp hasn't been in

01:23:23,400 --> 01:23:29,640
existence for multiple decades nor does

01:23:26,850 --> 01:23:32,400
it have existing code bases of multiple

01:23:29,640 --> 01:23:34,890
billions of lines of code it's a

01:23:32,400 --> 01:23:42,240
different problem from their perspective

01:23:34,890 --> 01:23:44,610
I mean we saw the compatibility problem

01:23:42,240 --> 01:23:47,300
it is the question of whether you add

01:23:44,610 --> 01:23:53,190
another overload and whether that is

01:23:47,300 --> 01:23:54,540
acceptable also it's very important to

01:23:53,190 --> 01:23:56,940
learn from other languages so the

01:23:54,540 --> 01:23:59,010
c-sharp experience was cited and yarnís

01:23:56,940 --> 01:24:00,780
and my papers we were the main authors

01:23:59,010 --> 01:24:03,420
of the unified function call syntax

01:24:00,780 --> 01:24:04,670
proposal but it's also important to

01:24:03,420 --> 01:24:08,610
understand where they're different

01:24:04,670 --> 01:24:11,100
c-sharp doesn't have free functions it's

01:24:08,610 --> 01:24:14,280
a different language their experience

01:24:11,100 --> 01:24:16,860
may may inform what we do or it may not

01:24:14,280 --> 01:24:19,080
and so it's important to keep eyes very

01:24:16,860 --> 01:24:21,900
wide open and see what are the valid

01:24:19,080 --> 01:24:23,310
learnings and what are the invalid

01:24:21,900 --> 01:24:31,560
learnings the MacGuffins that I can

01:24:23,310 --> 01:24:34,140
actually lead you astray thank you

01:24:31,560 --> 01:24:36,600
our metaclasses scheduled to be

01:24:34,140 --> 01:24:40,200
discussed by the committee if so when

01:24:36,600 --> 01:24:42,849
otherwise why not there was an initial

01:24:40,200 --> 01:24:46,510
presentation for the very first time

01:24:42,849 --> 01:24:48,129
two months ago very early days this is

01:24:46,510 --> 01:24:49,449
going to go on for years before we know

01:24:48,129 --> 01:24:52,539
whether it pans out or not

01:24:49,449 --> 01:24:54,159
so some said oh is this in C++ 20 oh my

01:24:52,539 --> 01:24:56,919
goodness we won't know if it works until

01:24:54,159 --> 01:24:58,959
that so like this is very long lead and

01:24:56,919 --> 01:25:01,139
experimental the things in this area

01:24:58,959 --> 01:25:06,429
that will come sooner our reflection

01:25:01,139 --> 01:25:09,010
compile time programming yeah we're

01:25:06,429 --> 01:25:18,929
going to keep pushing smaller parts of

01:25:09,010 --> 01:25:30,550
that through sg7 I think yes sg7 slowly

01:25:18,929 --> 01:25:32,889
very very slowly hi so forgetting return

01:25:30,550 --> 01:25:37,260
statement is an Hina Hitler inherited

01:25:32,889 --> 01:25:39,849
from C so why do we still have it in C++

01:25:37,260 --> 01:25:42,609
like why it is still undefined behavior

01:25:39,849 --> 01:25:44,639
if you forget a return statement in a

01:25:42,609 --> 01:25:44,639
function

01:25:45,239 --> 01:25:49,989
you're not initializing the return

01:25:47,379 --> 01:25:52,059
variable return object yeah but you

01:25:49,989 --> 01:25:54,760
could likely define it as like do not

01:25:52,059 --> 01:25:56,550
compile right like the comparator pretty

01:25:54,760 --> 01:26:01,300
good at finding those things and it is

01:25:56,550 --> 01:26:02,979
issuing a warning so this is actually

01:26:01,300 --> 01:26:07,989
something that the committee takes very

01:26:02,979 --> 01:26:10,749
seriously when we did concepts were one

01:26:07,989 --> 01:26:13,300
thing we made sure was that if youíve

01:26:10,749 --> 01:26:15,550
ever browny into an affine behavior it

01:26:13,300 --> 01:26:17,590
will be detected the compiler is

01:26:15,550 --> 01:26:18,129
required to detect it and report it back

01:26:17,590 --> 01:26:20,439
to you

01:26:18,129 --> 01:26:23,050
so the question is whether people have

01:26:20,439 --> 01:26:25,479
enough experience with that and feel

01:26:23,050 --> 01:26:28,840
comfortable and move that compile time

01:26:25,479 --> 01:26:32,139
currency to to runtime so it's always a

01:26:28,840 --> 01:26:35,079
matter of getting experience getting

01:26:32,139 --> 01:26:37,349
some familiarity to get into new

01:26:35,079 --> 01:26:37,349
territory

01:26:41,230 --> 01:26:50,390
what are your thoughts on a safe chain

01:26:43,730 --> 01:26:51,710
dereference operator a safe chain to

01:26:50,390 --> 01:26:55,870
dereference operator where you

01:26:51,710 --> 01:26:59,480
dereference if it's null it returns null

01:26:55,870 --> 01:27:03,830
that's an interesting idea but I think

01:26:59,480 --> 01:27:08,240
beyond E is going to call that Swift NV

01:27:03,830 --> 01:27:10,970
I think it's potentially so useful an

01:27:08,240 --> 01:27:13,820
idea that it would be worth proposing it

01:27:10,970 --> 01:27:15,740
and discussing it whether that

01:27:13,820 --> 01:27:19,870
discussion will lead to actual language

01:27:15,740 --> 01:27:19,870
extensions is a very different matter

01:27:27,970 --> 01:27:36,160
we're there and five words we do that

01:27:33,470 --> 01:27:36,160
with delete

01:27:43,019 --> 01:27:48,579
all right I think I think I think it's

01:27:46,959 --> 01:27:50,050
been very educational one of the things

01:27:48,579 --> 01:27:51,789
that we found is that some of the

01:27:50,050 --> 01:27:54,449
members on the committee can count to

01:27:51,789 --> 01:27:54,449
two or five

01:27:54,690 --> 01:27:59,350
[Applause]

01:28:09,139 --> 01:28:14,750
so we'll see you all again tomorrow I

01:28:11,730 --> 01:28:14,750
hope you're having a great time

01:28:15,090 --> 01:28:20,489

YouTube URL: https://www.youtube.com/watch?v=JYG5LFHkUuE


