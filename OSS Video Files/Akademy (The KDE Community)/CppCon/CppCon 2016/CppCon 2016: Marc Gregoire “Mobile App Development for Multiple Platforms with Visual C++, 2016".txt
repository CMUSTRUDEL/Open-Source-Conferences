Title: CppCon 2016: Marc Gregoire “Mobile App Development for Multiple Platforms with Visual C++, 2016"
Publication date: 2016-10-02
Playlist: CppCon 2016
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
Visual C++ supports mobile app development for Windows, Android, and iOS from a single code base, optionally with a thin platform-specific UI layer. The resulting binaries can be deployed to an emulator or to a real device and debugged on both, all from within Visual C++ . This presentation is a follow up to my session given at CppCon 2015, and as such the session will only briefly cover the basics of cross-platform mobile app development. Please view https://www.youtube.com/watch?v=2Y47g8xNE1o or https://channel9.msdn.com/events/CPP/CppCon-2015/CPPConD02V019 for this material in depth. In this follow up, we go over the new features added for cross-platform development since last year. Additionally, we continue where last year’s session ended, and will go deeper on how to write your applications to have a native look-and-feel UI on each of the different platforms.
— 
Marc Gregoire
Nikon Metrology
Software Architect
Belgium
Marc Gregoire has worked as a software engineer consultant for 6 years for Siemens and Nokia Siemens Networks on critical 2G and 3G software running on Solaris for telecom operators. This required working in international teams stretching from South America and USA to EMEA and Asia. Now, Marc is working for Nikon Metrology on 3D scanning software. His main expertise is C/C++, and specifically Microsoft VC++ and the MFC framework. Next to C/C++, Marc also likes C# and uses PHP for creating web pages. In addition to his main interest for Windows development, he also has experience in developing C++ programs running 24x7 on Linux platforms; for example, EIB/KNX home automation controlling and monitoring software. Since April 2007, he received the yearly Microsoft MVP (Most Valuable Professional) award for his Visual C++ expertise. Marc is the author of "Professional C++, Second and Third Edition", published by Wiley/Wrox, is the founder of the Belgian C++ Users Group (www.becpp.org), and has written a number of articles which have been published on CodeGuru and/or his personal blog. He also creates freeware and shareware programs that are distributed through his website at www.nuonsoft.com, and maintains a blog on www.nuonsoft.com/blog/. He is also passionate about traveling and gastronomic restaurants.m
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,659 --> 00:00:06,390
welcome everyone can everyone hear me I

00:00:04,130 --> 00:00:09,179
hope you had a great conference so far

00:00:06,390 --> 00:00:11,130
so my presentation will be about

00:00:09,179 --> 00:00:17,100
cross-platform mobile app development

00:00:11,130 --> 00:00:20,010
with visual C++ 2015 first a little bit

00:00:17,100 --> 00:00:23,100
about myself I'm from Belgium I'm a

00:00:20,010 --> 00:00:26,670
software architect working for Nikon I'm

00:00:23,100 --> 00:00:29,910
a Microsoft MVP in Visual C++ since 2007

00:00:26,670 --> 00:00:33,090
and also Microsoft extended expert team

00:00:29,910 --> 00:00:36,450
member I'm the author of professional

00:00:33,090 --> 00:00:38,489
C++ third edition and of C++ standard

00:00:36,450 --> 00:00:40,920
library quick reference both of the

00:00:38,489 --> 00:00:43,770
books are available in the university

00:00:40,920 --> 00:00:46,559
bookstore in the hall so feel free to go

00:00:43,770 --> 00:00:49,710
take a look and I'm also the founder of

00:00:46,559 --> 00:00:52,199
the Belgian C++ users group we try to uh

00:00:49,710 --> 00:00:59,489
place three or four times have a meeting

00:00:52,199 --> 00:01:02,280
about C++ in Belgium this is an overview

00:00:59,489 --> 00:01:04,530
of the topics that I will cover today so

00:01:02,280 --> 00:01:07,170
people that were here last year for cpp

00:01:04,530 --> 00:01:09,210
comm 2015 they might remember my

00:01:07,170 --> 00:01:11,119
presentation on cross-platform mobile

00:01:09,210 --> 00:01:14,250
app development

00:01:11,119 --> 00:01:16,860
this year's presentation is not a repeat

00:01:14,250 --> 00:01:18,770
of that one instead it will build on top

00:01:16,860 --> 00:01:22,140
of the previous year's presentation

00:01:18,770 --> 00:01:24,060
however some people probably didn't see

00:01:22,140 --> 00:01:26,360
that presentation of last year so I will

00:01:24,060 --> 00:01:29,100
give a quick overview overview of what I

00:01:26,360 --> 00:01:33,360
what what which topics that I mentioned

00:01:29,100 --> 00:01:35,610
last year then I will cover all the new

00:01:33,360 --> 00:01:38,310
features that have been added to the

00:01:35,610 --> 00:01:41,430
cross-platform mobile app story for

00:01:38,310 --> 00:01:43,799
Android for iOS I'll talk a little bit

00:01:41,430 --> 00:01:47,149
about game engine and then I will end

00:01:43,799 --> 00:01:53,210
with best practices for cross-platform

00:01:47,149 --> 00:01:56,520
UI where you have a platform specific UI

00:01:53,210 --> 00:01:58,320
so as you can see there will be a lot of

00:01:56,520 --> 00:02:00,770
demos actually I don't have that many

00:01:58,320 --> 00:02:03,450
slides so let's hope all the demos work

00:02:00,770 --> 00:02:06,740
and if you have any questions feel free

00:02:03,450 --> 00:02:06,740
to interrupt me

00:02:08,890 --> 00:02:43,420
let's start with a yes so those details

00:02:40,959 --> 00:02:46,420
I'm not sure you're corrected there is

00:02:43,420 --> 00:02:48,400
support for Linux but this presentation

00:02:46,420 --> 00:02:54,070
will only cover mobile app development

00:02:48,400 --> 00:02:55,870
so maybe we can talk about it offline so

00:02:54,070 --> 00:03:00,760
let's start with my last year's

00:02:55,870 --> 00:03:03,160
presentation a short overview you can

00:03:00,760 --> 00:03:06,489
watch it on YouTube or on channel 9 and

00:03:03,160 --> 00:03:08,410
what I discussed there was that a lot of

00:03:06,489 --> 00:03:10,750
the developers they want to target

00:03:08,410 --> 00:03:13,930
multiple platforms because that means

00:03:10,750 --> 00:03:16,900
they have access to a bigger market

00:03:13,930 --> 00:03:20,980
share and that means you can make more

00:03:16,900 --> 00:03:23,739
money but developers don't want to do

00:03:20,980 --> 00:03:28,630
that if it if it was too hard to support

00:03:23,739 --> 00:03:30,489
multiple platforms I also explained

00:03:28,630 --> 00:03:32,019
there are basically two ways to do

00:03:30,489 --> 00:03:34,299
cross-platform mobile app development

00:03:32,019 --> 00:03:37,000
you have the silo approach in which you

00:03:34,299 --> 00:03:39,970
use the dominant technology for your

00:03:37,000 --> 00:03:42,459
platform so for Android you will use

00:03:39,970 --> 00:03:45,730
Java for Windows Phone you will use C

00:03:42,459 --> 00:03:49,570
sharp or C++ C X and for iOS you will

00:03:45,730 --> 00:03:51,070
use objective-c or Swift of course those

00:03:49,570 --> 00:03:53,410
are three different languages so you

00:03:51,070 --> 00:03:55,720
have minimal code reuse if you implement

00:03:53,410 --> 00:03:58,000
one feature in Java you'll also have to

00:03:55,720 --> 00:04:02,470
implement it in C++ C X in c-sharp

00:03:58,000 --> 00:04:04,510
Objective C Swift and so on so that

00:04:02,470 --> 00:04:07,540
makes the development cost much higher

00:04:04,510 --> 00:04:09,250
and you also risk that one of the

00:04:07,540 --> 00:04:11,560
platforms will become the dominant

00:04:09,250 --> 00:04:13,540
platform and with that I mean that in

00:04:11,560 --> 00:04:15,700
the beginning you might support all

00:04:13,540 --> 00:04:18,060
three platforms but then you might

00:04:15,700 --> 00:04:21,010
notice that your Android application is

00:04:18,060 --> 00:04:22,630
giving you more money and then new

00:04:21,010 --> 00:04:25,180
features you might implement

00:04:22,630 --> 00:04:27,520
first in Android and then later you

00:04:25,180 --> 00:04:30,040
might port them to Windows Phone or to

00:04:27,520 --> 00:04:31,360
iOS or you might not do it in the case

00:04:30,040 --> 00:04:36,250
of the Windows Phone you will probably

00:04:31,360 --> 00:04:40,120
not do that and the the second approach

00:04:36,250 --> 00:04:43,810
is to use a cross-platform framework

00:04:40,120 --> 00:04:45,250
like PhoneGap or xamarin the problem

00:04:43,810 --> 00:04:47,350
there is that you don't have fast

00:04:45,250 --> 00:04:49,540
iterations so if you want to use new

00:04:47,350 --> 00:04:51,760
features of the latest SDK you have to

00:04:49,540 --> 00:04:58,660
wait till that framework supports that

00:04:51,760 --> 00:05:00,550
that new SDK we also discussed last year

00:04:58,660 --> 00:05:02,830
what is actually the common denominator

00:05:00,550 --> 00:05:04,840
and there is actually one C++ is the

00:05:02,830 --> 00:05:08,590
common denominator on the three major

00:05:04,840 --> 00:05:13,690
platforms so all three platforms they

00:05:08,590 --> 00:05:15,640
support native C++ the benefits are

00:05:13,690 --> 00:05:17,530
there are quite a few benefits of this

00:05:15,640 --> 00:05:19,810
so you have the full native experience

00:05:17,530 --> 00:05:22,540
you have full access to the device as

00:05:19,810 --> 00:05:24,310
long as the SDK supports it but you

00:05:22,540 --> 00:05:28,420
don't have if you want to use a new SDK

00:05:24,310 --> 00:05:30,820
you can use it immediately but code

00:05:28,420 --> 00:05:33,310
reuse is also much better you can reuse

00:05:30,820 --> 00:05:36,370
your own C++ code or you can reuse

00:05:33,310 --> 00:05:38,650
third-party C++ code so you can just

00:05:36,370 --> 00:05:41,140
take the boost C++ library plug it in

00:05:38,650 --> 00:05:44,200
and start using it or you can use the

00:05:41,140 --> 00:05:48,630
Unreal Engine or the frostbite EA engine

00:05:44,200 --> 00:05:51,490
and so on performance since it's running

00:05:48,630 --> 00:05:54,400
since it's C++ it's running directly on

00:05:51,490 --> 00:05:56,080
the hardware so it is performant that

00:05:54,400 --> 00:05:59,170
also means that your battery life is

00:05:56,080 --> 00:06:00,820
better because to get the job done it's

00:05:59,170 --> 00:06:03,940
faster to get the job done so you're

00:06:00,820 --> 00:06:06,910
using less battery and with the security

00:06:03,940 --> 00:06:10,150
I mean that if you have a compiled C++

00:06:06,910 --> 00:06:14,980
code it's much harder to 2d obfuscate

00:06:10,150 --> 00:06:18,070
your your code so that's that's one of

00:06:14,980 --> 00:06:20,710
the reasons why around 75 percent last

00:06:18,070 --> 00:06:22,720
year I didn't do the test again 75

00:06:20,710 --> 00:06:26,110
percent of the top 100 Android

00:06:22,720 --> 00:06:27,820
applications they are using C++ in one

00:06:26,110 --> 00:06:30,160
way or another so might be they are

00:06:27,820 --> 00:06:35,100
completely written in C char in C++ or

00:06:30,160 --> 00:06:35,100
they are using some native C++ library

00:06:35,460 --> 00:06:44,190
I also give a short overview of how you

00:06:40,169 --> 00:06:46,830
can do how your cross-platform mobile

00:06:44,190 --> 00:06:48,930
app architecture might look like so you

00:06:46,830 --> 00:06:51,630
see here that you have a big shared C++

00:06:48,930 --> 00:06:53,520
back-end in that on top of it you have a

00:06:51,630 --> 00:06:56,819
teen UI layer with this platform

00:06:53,520 --> 00:07:00,389
specific for Windows you will use Zama

00:06:56,819 --> 00:07:03,900
for your UI and code behind can be in

00:07:00,389 --> 00:07:05,580
c-sharp or in C++ CX and if you're using

00:07:03,900 --> 00:07:07,849
c-sharp you will use be invoke to

00:07:05,580 --> 00:07:10,889
connect it with the shared C++ back-end

00:07:07,849 --> 00:07:14,820
and if you use C++ CX you can just use

00:07:10,889 --> 00:07:18,570
C++ wrappers for the Java you're using

00:07:14,820 --> 00:07:20,099
XML for Android sorry you're using XML

00:07:18,570 --> 00:07:22,500
and Java for your UI and you're

00:07:20,099 --> 00:07:27,090
connected to it C++ using for example

00:07:22,500 --> 00:07:30,180
G&I wrappers and for iOS you can use

00:07:27,090 --> 00:07:35,490
cocoa touch and you use Objective C

00:07:30,180 --> 00:07:37,830
wrappers so this is the architecture

00:07:35,490 --> 00:07:40,349
that is used by quite a lot of

00:07:37,830 --> 00:07:43,560
applications like Bing Maps office Skype

00:07:40,349 --> 00:07:46,919
Facebook moments and so on in the case

00:07:43,560 --> 00:07:50,810
of office for example PowerPoint I think

00:07:46,919 --> 00:07:53,669
used 95 or even more 98%

00:07:50,810 --> 00:08:03,870
platform-independent shared C++ code

00:07:53,669 --> 00:08:06,360
with just a very thin layer last year we

00:08:03,870 --> 00:08:16,590
discussed the features of Visual Studio

00:08:06,360 --> 00:08:19,469
2015 RTM so it's an easy installation

00:08:16,590 --> 00:08:22,020
experience you just need to download one

00:08:19,469 --> 00:08:24,419
installer and that installs all the

00:08:22,020 --> 00:08:26,669
tools that you need otherwise you would

00:08:24,419 --> 00:08:29,039
have to install different kind of

00:08:26,669 --> 00:08:32,070
compilers you have to install visual C++

00:08:29,039 --> 00:08:33,870
compiler clang GCC and so on you would

00:08:32,070 --> 00:08:38,070
need to install different build systems

00:08:33,870 --> 00:08:39,659
like ant Gradle and so on and if you use

00:08:38,070 --> 00:08:42,479
Visual Studio it just installs

00:08:39,659 --> 00:08:45,029
everything for you that also means you

00:08:42,479 --> 00:08:48,470
only need to learn one C++ IDE for all

00:08:45,029 --> 00:08:51,260
your cross-platform development

00:08:48,470 --> 00:08:56,690
beat Windows Android iOS and here I also

00:08:51,260 --> 00:09:00,320
mention Linux visual C++ makes it very

00:08:56,690 --> 00:09:02,060
easy to write shared C++ code and reuse

00:09:00,320 --> 00:09:03,710
it in your different projects and I will

00:09:02,060 --> 00:09:08,540
show you how that works in one of the

00:09:03,710 --> 00:09:11,060
demos yeah the state of the art code

00:09:08,540 --> 00:09:15,130
editing features that you expect like

00:09:11,060 --> 00:09:17,750
refactoring and intelligence and so on

00:09:15,130 --> 00:09:20,420
the board of Visual C++ is rather

00:09:17,750 --> 00:09:23,540
powerful and you can use it to debug on

00:09:20,420 --> 00:09:30,710
your real Android devices and on your on

00:09:23,540 --> 00:09:33,230
your real iOS devices there is emulators

00:09:30,710 --> 00:09:36,140
that are shipped with visual c++ Android

00:09:33,230 --> 00:09:39,350
emulators that is and they are very fast

00:09:36,140 --> 00:09:41,690
they run on top of hyper-v there are no

00:09:39,350 --> 00:09:46,160
iOS emulators because Apple does not

00:09:41,690 --> 00:09:47,870
allow you to does not allow it and then

00:09:46,160 --> 00:09:50,870
there are a bunch of templates that you

00:09:47,870 --> 00:09:53,360
can use to start your cross-platform

00:09:50,870 --> 00:10:01,250
mobile app and I will show a few of them

00:09:53,360 --> 00:10:03,140
later on so what's new that was the

00:10:01,250 --> 00:10:06,470
overview of last year's presentation so

00:10:03,140 --> 00:10:08,690
let's get to the new content let's first

00:10:06,470 --> 00:10:10,910
start about let's talk a little bit

00:10:08,690 --> 00:10:15,500
about Android what's new for Android

00:10:10,910 --> 00:10:17,030
experience for story support for the

00:10:15,500 --> 00:10:21,350
latest Android NDK

00:10:17,030 --> 00:10:25,160
it's our 11 C and visual studio now

00:10:21,350 --> 00:10:27,110
support 64-bit Android NDK s-- and if

00:10:25,160 --> 00:10:28,970
you want to upgrade your NDK it's now

00:10:27,110 --> 00:10:31,130
much easier so if you have existing

00:10:28,970 --> 00:10:33,680
Android applications in Visual Studio

00:10:31,130 --> 00:10:43,190
you can retarget them to use the latest

00:10:33,680 --> 00:10:45,530
NDK next 2015 update 3 that's the Gradle

00:10:43,190 --> 00:10:47,150
build system Gradle is actually the

00:10:45,530 --> 00:10:49,490
default Android build system

00:10:47,150 --> 00:10:53,660
and it allows you to build Android

00:10:49,490 --> 00:10:57,890
artifacts like a a ours and apks ARS our

00:10:53,660 --> 00:11:02,000
Android libraries and EP apks are the

00:10:57,890 --> 00:11:04,360
actual Android application packages

00:11:02,000 --> 00:11:07,490
Gretl makes it also very easy to reuse

00:11:04,360 --> 00:11:12,880
existing Android libraries and I will

00:11:07,490 --> 00:11:12,880
show that with the Facebook Android SDK

00:11:13,510 --> 00:11:20,000
next there is this thing called Java

00:11:16,130 --> 00:11:22,880
language services for Android this is

00:11:20,000 --> 00:11:24,260
not this doesn't come out of the box but

00:11:22,880 --> 00:11:27,860
you can download it from Visual Studio

00:11:24,260 --> 00:11:30,500
Gallery I will also show you this later

00:11:27,860 --> 00:11:33,470
but basically what it does is it adds a

00:11:30,500 --> 00:11:36,610
lot of support for Java Java files so it

00:11:33,470 --> 00:11:39,440
adds colorization semantics highlighting

00:11:36,610 --> 00:11:44,980
support for squiggles autocomplete and

00:11:39,440 --> 00:11:44,980
so on so I'll I will show that later on

00:11:45,340 --> 00:11:54,050
there is full support for debugging Java

00:11:48,080 --> 00:11:58,130
now in Visual C++ 2015 update 3 but one

00:11:54,050 --> 00:12:01,310
caveat here is that you have to put your

00:11:58,130 --> 00:12:02,840
switch your debugger to Java only so you

00:12:01,310 --> 00:12:05,060
have to make a choice you can either

00:12:02,840 --> 00:12:07,520
debug your native code or your java code

00:12:05,060 --> 00:12:16,100
but at the moment you cannot do any mix

00:12:07,520 --> 00:12:17,960
debugging I will also demo this later if

00:12:16,100 --> 00:12:20,960
you download that package from Visual

00:12:17,960 --> 00:12:24,380
Studio Gallery what you also get is an

00:12:20,960 --> 00:12:26,210
eclipse Android project importer so once

00:12:24,380 --> 00:12:28,580
that is installed you can just do file

00:12:26,210 --> 00:12:31,550
new import Android project from eclipse

00:12:28,580 --> 00:12:34,610
you select your Eclipse project and then

00:12:31,550 --> 00:12:36,290
you you mark which of the projects from

00:12:34,610 --> 00:12:44,510
eclipse that you want to import into

00:12:36,290 --> 00:12:47,000
Visual C++ so those are basically most

00:12:44,510 --> 00:12:49,870
of slides so let's get into some of the

00:12:47,000 --> 00:12:49,870
demos

00:12:55,960 --> 00:12:58,960
okay

00:13:05,790 --> 00:13:15,160
so if you go to file new project then

00:13:13,180 --> 00:13:20,950
you will see that there is a bunch of

00:13:15,160 --> 00:13:28,300
cross-platform templates available once

00:13:20,950 --> 00:13:31,510
they appear there we go so you go to

00:13:28,300 --> 00:13:35,260
visual C++ and then there is a bunch of

00:13:31,510 --> 00:13:38,920
cross-platform templates for this first

00:13:35,260 --> 00:13:41,740
demo I will show the Gradle build system

00:13:38,920 --> 00:13:44,620
so if you go to Android you see there

00:13:41,740 --> 00:13:46,990
are two Gradle templates one to make an

00:13:44,620 --> 00:13:49,030
basic Android application using Gradle

00:13:46,990 --> 00:13:55,870
and the other one to make an Android

00:13:49,030 --> 00:14:08,710
library so let's start with the basic

00:13:55,870 --> 00:14:10,630
application we give it a name now you

00:14:08,710 --> 00:14:15,010
see it's a very tiny template so there

00:14:10,630 --> 00:14:18,010
is not much content here but here you

00:14:15,010 --> 00:14:21,040
see this is a Java file and you see that

00:14:18,010 --> 00:14:24,280
you have the syntax colouring like you

00:14:21,040 --> 00:14:25,750
would expect you have the squiggles if

00:14:24,280 --> 00:14:32,470
you make a mistake you will have a nice

00:14:25,750 --> 00:14:37,180
red red squiggle you have support for

00:14:32,470 --> 00:14:41,100
intelligence like here you get all the

00:14:37,180 --> 00:14:43,420
methods that I can apply to my textview

00:14:41,100 --> 00:14:45,550
so what this application does it

00:14:43,420 --> 00:14:49,650
basically just creates a simple textview

00:14:45,550 --> 00:14:49,650
put some text in it and then show it

00:14:50,040 --> 00:14:57,700
here you see your different platforms

00:14:54,610 --> 00:15:00,850
that are supported so you have RM 32-bit

00:14:57,700 --> 00:15:07,570
and 64-bit and then you have the x86 and

00:15:00,850 --> 00:15:11,830
x64 so for this demo I will use x64 and

00:15:07,570 --> 00:15:13,540
then here you see that those are the

00:15:11,830 --> 00:15:16,390
emulators that I talked about so it

00:15:13,540 --> 00:15:17,950
fills in it shows you all it shows you

00:15:16,390 --> 00:15:18,639
all the emulators that are installed on

00:15:17,950 --> 00:15:22,149
your machine

00:15:18,639 --> 00:15:24,540
and to manage that you go to tools and

00:15:22,149 --> 00:15:28,540
then Visual Studio emulator for Android

00:15:24,540 --> 00:15:30,339
and here basically you get a list of all

00:15:28,540 --> 00:15:32,799
the possible emulators that are

00:15:30,339 --> 00:15:36,160
available for example if you want to

00:15:32,799 --> 00:15:39,129
have an attempt point one inch

00:15:36,160 --> 00:15:42,879
marshmallow tablet you click just this

00:15:39,129 --> 00:15:44,589
download and install profile button and

00:15:42,879 --> 00:15:49,259
what it done basically does it will

00:15:44,589 --> 00:15:52,809
create you a hyper-v virtual machine

00:15:49,259 --> 00:15:58,480
here are two of them I have a KitKat

00:15:52,809 --> 00:16:00,519
Android and a marshmallow Android and so

00:15:58,480 --> 00:16:03,790
the list here shows shows you all the

00:16:00,519 --> 00:16:08,019
hyper-v virtual machines that have been

00:16:03,790 --> 00:16:12,699
installed so for the example let's take

00:16:08,019 --> 00:16:19,420
the Kit Kats emulator so if I build this

00:16:12,699 --> 00:16:24,639
project you see here that that Gradle is

00:16:19,420 --> 00:16:26,350
building everything since this is not

00:16:24,639 --> 00:16:33,189
doing too much it shouldn't take too

00:16:26,350 --> 00:16:34,660
long so in the meantime when it's

00:16:33,189 --> 00:16:36,519
finished building I will show you the

00:16:34,660 --> 00:16:38,169
debugging experience so as I mentioned

00:16:36,519 --> 00:16:40,809
you have to switch here to Java only

00:16:38,169 --> 00:16:44,049
otherwise your Java breakpoints you will

00:16:40,809 --> 00:16:47,139
not will not be hit so let's put it to

00:16:44,049 --> 00:16:51,069
Java only let's put a breakpoint in my

00:16:47,139 --> 00:16:55,299
java code so here you see compilation

00:16:51,069 --> 00:17:01,419
succeeded so now if I run this in my

00:16:55,299 --> 00:17:04,389
emulator this is the emulator which I

00:17:01,419 --> 00:17:05,949
already started before even if it hasn't

00:17:04,389 --> 00:17:08,470
been started yet Visual Studio will

00:17:05,949 --> 00:17:09,850
automatically start your emulator but

00:17:08,470 --> 00:17:14,620
then it takes a little bit longer so I

00:17:09,850 --> 00:17:16,949
started before already so now you see

00:17:14,620 --> 00:17:22,419
that my breakpoint is hit you have the

00:17:16,949 --> 00:17:24,850
low-cut window here yeah anyone that has

00:17:22,419 --> 00:17:26,709
done any Android development will will

00:17:24,850 --> 00:17:28,680
know what this low-cut is it's basically

00:17:26,709 --> 00:17:33,370
your

00:17:28,680 --> 00:17:36,750
yeah your debug messages and you can see

00:17:33,370 --> 00:17:40,810
that you have full support for

00:17:36,750 --> 00:17:42,550
inspecting your locals the different

00:17:40,810 --> 00:17:47,140
threats and so on so if you have the

00:17:42,550 --> 00:17:49,410
full visual studio debugger experience D

00:17:47,140 --> 00:17:52,150
by in your virtual Android application

00:17:49,410 --> 00:17:55,480
it also works with real devices so I

00:17:52,150 --> 00:17:57,670
will show that later on so if I continue

00:17:55,480 --> 00:18:00,640
here then you should see that we have a

00:17:57,670 --> 00:18:08,380
nice hello world application that was

00:18:00,640 --> 00:18:11,250
built using the Gradle build system so I

00:18:08,380 --> 00:18:15,010
mentioned that with Gradle it's easy to

00:18:11,250 --> 00:18:18,370
use other third-party Android libraries

00:18:15,010 --> 00:18:22,170
so let's demonstrate this basically you

00:18:18,370 --> 00:18:29,470
have here your Gradle configuration file

00:18:22,170 --> 00:18:32,200
which shows which configures things like

00:18:29,470 --> 00:18:34,720
the minimum as they get version that you

00:18:32,200 --> 00:18:36,730
target and so on the platform that your

00:18:34,720 --> 00:18:38,890
code supports and here you have

00:18:36,730 --> 00:18:42,790
dependencies and for example if you

00:18:38,890 --> 00:18:44,620
would like to use the Facebook SDK then

00:18:42,790 --> 00:18:47,110
basically you have to add one line not

00:18:44,620 --> 00:18:52,870
going to type it you're just going to

00:18:47,110 --> 00:18:54,340
copy it paste it so by adding this

00:18:52,870 --> 00:18:56,290
single line you say that you're

00:18:54,340 --> 00:18:58,750
interested in the Facebook Android SDK

00:18:56,290 --> 00:19:00,700
version four point seven or later and

00:18:58,750 --> 00:19:02,530
now when you build this for the first

00:19:00,700 --> 00:19:06,610
time the Gradle build system will

00:19:02,530 --> 00:19:09,070
automatically download this Facebook

00:19:06,610 --> 00:19:09,730
Android SDK and include it into your

00:19:09,070 --> 00:19:12,370
project

00:19:09,730 --> 00:19:15,550
so since I already did this it's not

00:19:12,370 --> 00:19:25,560
going to download anything but it should

00:19:15,550 --> 00:19:25,560
compile II no just compile

00:19:27,350 --> 00:19:34,520
yeah it does want to download something

00:19:29,600 --> 00:19:36,170
and I don't have internet here so trust

00:19:34,520 --> 00:19:38,900
me if you have an internet connection

00:19:36,170 --> 00:19:43,580
this will download the latest Facebook

00:19:38,900 --> 00:19:49,700
Android SDK and after that you can

00:19:43,580 --> 00:19:52,160
simply do something like import if it

00:19:49,700 --> 00:19:54,350
has downloaded it then you will see that

00:19:52,160 --> 00:19:56,870
it will populate this list with with the

00:19:54,350 --> 00:20:03,670
Facebook things and then you can start

00:19:56,870 --> 00:20:11,990
using it okay

00:20:03,670 --> 00:20:14,900
that's for Gradle so yeah what did I

00:20:11,990 --> 00:20:17,540
show I show you that you can edit Java

00:20:14,900 --> 00:20:21,280
code and of course C++ code it's visual

00:20:17,540 --> 00:20:23,270
C++ that you can debug your java code

00:20:21,280 --> 00:20:25,460
that you're using the Gradle build

00:20:23,270 --> 00:20:27,920
system and that it's easy to incorporate

00:20:25,460 --> 00:20:30,980
third-party libraries if you have an

00:20:27,920 --> 00:20:32,960
internet connection and thanks to the

00:20:30,980 --> 00:20:34,700
template it's rather easy to get started

00:20:32,960 --> 00:20:38,960
so it's just a couple of clicks and

00:20:34,700 --> 00:20:41,150
you're on your way there is a very

00:20:38,960 --> 00:20:44,200
interesting resource on the visual C++

00:20:41,150 --> 00:20:49,300
block if you're interested in in getting

00:20:44,200 --> 00:20:49,300
to start Gretl so here is the link

00:20:53,490 --> 00:21:05,320
next let's take a look at what's new for

00:20:56,650 --> 00:21:09,610
iOS development so update three makes it

00:21:05,320 --> 00:21:12,850
much easier to work both in Xcode and in

00:21:09,610 --> 00:21:14,860
visual C++ so there are basically a

00:21:12,850 --> 00:21:16,630
couple of features to support this kind

00:21:14,860 --> 00:21:18,400
of workflow the first one is that you

00:21:16,630 --> 00:21:21,850
can there is a wizard to import existing

00:21:18,400 --> 00:21:25,720
Xcode projects into Visual C++ I will

00:21:21,850 --> 00:21:29,520
demonstrate that and then on the other

00:21:25,720 --> 00:21:33,760
end there is also in Visual C++ you can

00:21:29,520 --> 00:21:35,710
open an existing iOS project back into

00:21:33,760 --> 00:21:37,540
Xcode to make certain changes for

00:21:35,710 --> 00:21:39,790
example if you want to make UI changes

00:21:37,540 --> 00:21:41,710
you will have to do that in Xcode there

00:21:39,790 --> 00:21:44,830
is no support in Visual Studio yet for

00:21:41,710 --> 00:21:46,570
that similarly if you want to modify

00:21:44,830 --> 00:21:48,760
your storyboard you have to do it in

00:21:46,570 --> 00:21:50,680
Xcode and if you want to sign your

00:21:48,760 --> 00:21:52,630
application for publishing it to the

00:21:50,680 --> 00:21:56,980
store again you have to do it in Xcode

00:21:52,630 --> 00:22:00,790
and the open in Xcode makes this kind of

00:21:56,980 --> 00:22:02,770
workflow is very easy there is a update

00:22:00,790 --> 00:22:05,890
3 adds a much-improved edit built and

00:22:02,770 --> 00:22:08,200
debug cycle and it makes it much easier

00:22:05,890 --> 00:22:10,060
for discovering devices if you

00:22:08,200 --> 00:22:13,480
disconnect and connect devices to your

00:22:10,060 --> 00:22:18,580
Mac it's much easier to discover those

00:22:13,480 --> 00:22:19,780
devices in Visual Studio so just like us

00:22:18,580 --> 00:22:22,630
was the case last year

00:22:19,780 --> 00:22:24,760
you still need a Mac for it for

00:22:22,630 --> 00:22:27,640
developing any iOS applications

00:22:24,760 --> 00:22:30,550
so Apple legally does not allow anyone

00:22:27,640 --> 00:22:32,860
to cross compile for iOS devices in

00:22:30,550 --> 00:22:34,630
principle there's it's not that hard

00:22:32,860 --> 00:22:37,030
it's it's possible but legally it's not

00:22:34,630 --> 00:22:39,460
allowed so that's why Visual Studio

00:22:37,030 --> 00:22:46,260
always has to connect to a Mac to do the

00:22:39,460 --> 00:22:46,260
compilation I will show that later now

00:22:46,590 --> 00:22:53,750
just make sure I don't forget anything

00:22:49,090 --> 00:22:56,150
more so let's

00:22:53,750 --> 00:23:01,250
demonstrate import from Xcode I have

00:22:56,150 --> 00:23:03,740
here an Xcode project where you have

00:23:01,250 --> 00:23:07,070
your project pbx brush file that's your

00:23:03,740 --> 00:23:09,290
Xcode project file and it's this one

00:23:07,070 --> 00:23:11,180
that you can import in Visual C++ so

00:23:09,290 --> 00:23:15,980
let's do that you go to new import

00:23:11,180 --> 00:23:18,740
import from Xcode then you'll get this

00:23:15,980 --> 00:23:23,180
nice little wizard you you browse to

00:23:18,740 --> 00:23:28,040
your Xcode project file

00:23:23,180 --> 00:23:29,450
this one and I'm basically most of the

00:23:28,040 --> 00:23:33,290
time you can just click Next Next Next

00:23:29,450 --> 00:23:35,930
Next finished import but let's just take

00:23:33,290 --> 00:23:38,060
a look what all the different windows

00:23:35,930 --> 00:23:39,980
show you so here you see that it

00:23:38,060 --> 00:23:43,550
discovered three projects that it's

00:23:39,980 --> 00:23:50,480
going to import and you see which files

00:23:43,550 --> 00:23:55,010
that it's going to import and then you

00:23:50,480 --> 00:23:57,530
there is also one native library inside

00:23:55,010 --> 00:23:59,870
my Xcode project and you see I have here

00:23:57,530 --> 00:24:03,830
my C file and my my header file it's

00:23:59,870 --> 00:24:06,530
also going to import them if you are

00:24:03,830 --> 00:24:10,430
using frameworks you can add some search

00:24:06,530 --> 00:24:12,290
part here for that some more settings

00:24:10,430 --> 00:24:15,680
for frameworks and none basically you

00:24:12,290 --> 00:24:19,370
just do import that should make a visual

00:24:15,680 --> 00:24:22,130
studio project there we go so let's take

00:24:19,370 --> 00:24:24,920
a look at what the wizard has created

00:24:22,130 --> 00:24:28,400
for us so here is a native flip dot

00:24:24,920 --> 00:24:33,230
shared project if I look under under

00:24:28,400 --> 00:24:38,480
this then you see my my add my my C code

00:24:33,230 --> 00:24:40,820
and my other file so this is in a shared

00:24:38,480 --> 00:24:42,710
project so basically that's not compiled

00:24:40,820 --> 00:24:44,840
on its own but that's something that you

00:24:42,710 --> 00:24:47,500
reference from another project and in

00:24:44,840 --> 00:24:50,270
this case there is a native flip iOS

00:24:47,500 --> 00:24:54,490
library if you go to properties you see

00:24:50,270 --> 00:24:57,560
that this will generate a static library

00:24:54,490 --> 00:24:59,360
there is no direct there is no code

00:24:57,560 --> 00:25:01,730
directly into this project the only

00:24:59,360 --> 00:25:04,820
thing it does it references my native

00:25:01,730 --> 00:25:06,710
little shared project and if I compile

00:25:04,820 --> 00:25:07,250
this I have a static library containing

00:25:06,710 --> 00:25:14,120
my

00:25:07,250 --> 00:25:16,429
my at my function then next I have here

00:25:14,120 --> 00:25:25,789
a sample native project this is my

00:25:16,429 --> 00:25:28,490
actual iOS application this generates my

00:25:25,789 --> 00:25:32,570
application and you see this one

00:25:28,490 --> 00:25:37,179
references references my static iOS

00:25:32,570 --> 00:25:41,030
library then you have here your

00:25:37,179 --> 00:25:44,210
objective-c code and if we take a look

00:25:41,030 --> 00:25:49,150
at my view controller what I'm doing

00:25:44,210 --> 00:25:52,400
here is I'm including my header file and

00:25:49,150 --> 00:25:58,460
then basically I can straight away I can

00:25:52,400 --> 00:26:02,929
use my my coat and this complicated ways

00:25:58,460 --> 00:26:04,700
to show a message box here I'm not a big

00:26:02,929 --> 00:26:07,549
fan of objective-c but this is the way

00:26:04,700 --> 00:26:10,370
how you convert an integer to a string

00:26:07,549 --> 00:26:17,299
and then I'm showing this in a message

00:26:10,370 --> 00:26:19,580
box so as I mentioned you need a Mac to

00:26:17,299 --> 00:26:21,799
compile this and to set up the

00:26:19,580 --> 00:26:24,350
connection between your visual C++ and

00:26:21,799 --> 00:26:27,770
your Mac you have to go to tools option

00:26:24,350 --> 00:26:30,860
and then under cross-platform there is

00:26:27,770 --> 00:26:32,900
an iOS pairing option here you have to

00:26:30,860 --> 00:26:37,250
specify the IP address or hostname of

00:26:32,900 --> 00:26:39,440
your Mac then you just click the power

00:26:37,250 --> 00:26:41,419
button and if this is green that means

00:26:39,440 --> 00:26:44,750
that you have a successful connection to

00:26:41,419 --> 00:26:49,940
your Mac so I have here a VNC connection

00:26:44,750 --> 00:26:51,710
to my to my Mac OS and on this machine

00:26:49,940 --> 00:26:54,620
you need to run something called VC

00:26:51,710 --> 00:26:56,840
remote later on I will show you a blog

00:26:54,620 --> 00:26:59,510
post that explains you how to set up all

00:26:56,840 --> 00:27:01,130
of this so you just have to run a couple

00:26:59,510 --> 00:27:06,020
of commands on your Mac and it installs

00:27:01,130 --> 00:27:08,690
VC remote and that the VC remote is

00:27:06,020 --> 00:27:15,130
responsible for the communication

00:27:08,690 --> 00:27:15,130
between the Mac and Visual C++ so if you

00:27:15,280 --> 00:27:18,230
if I do the

00:27:16,850 --> 00:27:20,270
barring again here then you will see

00:27:18,230 --> 00:27:27,340
there something will appear in the VC

00:27:20,270 --> 00:27:35,120
remote window there we go so let's

00:27:27,340 --> 00:27:37,940
switch to 64-bit let's compile this then

00:27:35,120 --> 00:27:40,610
you will see that basically my visual

00:27:37,940 --> 00:27:43,910
studio project is now zipped it's sent

00:27:40,610 --> 00:27:47,540
to my Mac which extracts it it's

00:27:43,910 --> 00:27:51,800
converted to an Xcode project and built

00:27:47,540 --> 00:27:53,570
on the Mac all progress reporting

00:27:51,800 --> 00:27:56,840
messages and so on errors and warnings

00:27:53,570 --> 00:28:00,470
and so on are marshaled from the from

00:27:56,840 --> 00:28:01,940
Xcode back to visual studio so you I'm

00:28:00,470 --> 00:28:03,770
just showing you this window now that

00:28:01,940 --> 00:28:06,110
you see that it's doing something but

00:28:03,770 --> 00:28:07,610
basically if it's running on a server or

00:28:06,110 --> 00:28:09,920
you don't have any connection that works

00:28:07,610 --> 00:28:14,360
fine you see everything here in your

00:28:09,920 --> 00:28:17,810
output window and we see it succeeded so

00:28:14,360 --> 00:28:20,000
that's good then here you have a bunch

00:28:17,810 --> 00:28:21,530
of emulators that those this is a list

00:28:20,000 --> 00:28:26,840
of all the emulators that are installed

00:28:21,530 --> 00:28:29,570
on my Mac so let's take the iPhone 6 and

00:28:26,840 --> 00:28:36,140
then if I take a look at my Mac it

00:28:29,570 --> 00:28:44,660
should start an iPhone 6 emulator there

00:28:36,140 --> 00:28:48,410
it goes takes a little while to start so

00:28:44,660 --> 00:28:50,630
this is my my application and now if you

00:28:48,410 --> 00:28:54,100
remember I have a button when I click it

00:28:50,630 --> 00:28:54,100
it will call my at me

00:28:54,400 --> 00:28:59,960
shared function and it will display it

00:28:57,350 --> 00:29:02,780
in a message box so let's hope this

00:28:59,960 --> 00:29:06,340
works and there we go it shows you the

00:29:02,780 --> 00:29:06,340
sum of 20 plus 30

00:29:11,260 --> 00:29:18,950
ok let's quit the simulator so the next

00:29:18,590 --> 00:29:21,380
thing

00:29:18,950 --> 00:29:23,389
I want to show is I would like to modify

00:29:21,380 --> 00:29:25,840
the UI a little bit so as you see now I

00:29:23,389 --> 00:29:28,850
had just at one button when I click it

00:29:25,840 --> 00:29:31,070
displaying a message box I would also

00:29:28,850 --> 00:29:33,230
like to see the result of my ad Michael

00:29:31,070 --> 00:29:36,110
in the label underneath my button so

00:29:33,230 --> 00:29:38,659
let's do that I said I cannot modify the

00:29:36,110 --> 00:29:42,080
UI on individual C++ so I have to use

00:29:38,659 --> 00:29:47,480
the open in Xcode feature to do that I

00:29:42,080 --> 00:29:50,350
simply click on my iOS application and

00:29:47,480 --> 00:29:54,710
there is a menu called remote machine

00:29:50,350 --> 00:29:56,360
and the first item is open in Xcode so

00:29:54,710 --> 00:29:58,669
what this does it packages up your

00:29:56,360 --> 00:30:01,820
project sends it to the Mac and opens it

00:29:58,669 --> 00:30:03,830
in Xcode it shows you a warning that

00:30:01,820 --> 00:30:06,919
once you're finished on the Mac side

00:30:03,830 --> 00:30:10,399
then you have to synchronize the changes

00:30:06,919 --> 00:30:13,100
back to a Visual Studio you also see it

00:30:10,399 --> 00:30:16,880
here it's it's mark this project is

00:30:13,100 --> 00:30:20,720
marked as being opened in Xcode so let's

00:30:16,880 --> 00:30:22,850
switch to the Mac you see here this is

00:30:20,720 --> 00:30:25,940
my Xcode that has been opened and here

00:30:22,850 --> 00:30:27,889
you have the project so for example we

00:30:25,940 --> 00:30:30,529
can take a look at this large green dot

00:30:27,889 --> 00:30:32,750
xib this is my splash screen I can

00:30:30,529 --> 00:30:38,690
modify it I can modify this however I

00:30:32,750 --> 00:30:48,380
want but for this demo let's look at my

00:30:38,690 --> 00:30:51,740
storyboard so this is my main UI let's

00:30:48,380 --> 00:30:55,690
add a label here so you go to the

00:30:51,740 --> 00:31:01,539
navigators here no utilities sorry

00:30:55,690 --> 00:31:04,130
object library let's search for a label

00:31:01,539 --> 00:31:06,529
and we can just drag this label here now

00:31:04,130 --> 00:31:10,850
I have a label now we need somewhere to

00:31:06,529 --> 00:31:17,240
connect this label up normally you would

00:31:10,850 --> 00:31:19,250
go to view assistant editor and then you

00:31:17,240 --> 00:31:21,580
go to your header file your view

00:31:19,250 --> 00:31:25,340
controller header file and basically now

00:31:21,580 --> 00:31:28,460
it's rather easy you just click control

00:31:25,340 --> 00:31:32,330
and you drag your label in between this

00:31:28,460 --> 00:31:34,100
interface and at end however a

00:31:32,330 --> 00:31:36,500
currently VNC does not allow me to

00:31:34,100 --> 00:31:39,289
control and drag something so I cannot

00:31:36,500 --> 00:31:43,700
demonstrate this so let's do it done

00:31:39,289 --> 00:31:45,380
with code directly in visual C++ so

00:31:43,700 --> 00:31:49,130
basically I'm finished here with Xcode

00:31:45,380 --> 00:31:51,950
so I just close this project I switch

00:31:49,130 --> 00:31:53,690
back to visual studio asset you need to

00:31:51,950 --> 00:31:56,390
synchronize everything back so you

00:31:53,690 --> 00:32:01,100
right-click remote machine pull from

00:31:56,390 --> 00:32:02,450
remote it has downloaded everything back

00:32:01,100 --> 00:32:04,580
from the Mac and it says that something

00:32:02,450 --> 00:32:07,760
has changed so it's it's asking me to

00:32:04,580 --> 00:32:18,289
reload so let's reload everything there

00:32:07,760 --> 00:32:21,620
we go then what we have to do is we go

00:32:18,289 --> 00:32:23,809
to our storyboard the storyboard is

00:32:21,620 --> 00:32:28,809
basically just an XML file so I'm going

00:32:23,809 --> 00:32:43,070
to open it with XML text editor

00:32:28,809 --> 00:32:46,779
so what think something went wrong let's

00:32:43,070 --> 00:32:46,779
try this again quickly

00:32:53,750 --> 00:33:00,680
for some reason it didn't save my my

00:32:57,480 --> 00:33:13,260
label okay

00:33:00,680 --> 00:33:19,590
do this that's at my level let's save it

00:33:13,260 --> 00:33:24,540
there we go now import the changes back

00:33:19,590 --> 00:33:28,920
into Visual Studio okay here we have my

00:33:24,540 --> 00:33:31,800
label so since the control dragging is

00:33:28,920 --> 00:33:35,400
not working in VNC I'm just going to add

00:33:31,800 --> 00:33:39,330
the connection myself but normally you

00:33:35,400 --> 00:33:51,110
will not have to do this that's let's

00:33:39,330 --> 00:33:51,110
make sure the ID is correct there we go

00:33:52,760 --> 00:33:58,350
that's one thing and the other thing is

00:33:56,130 --> 00:34:00,720
in your view controller header file you

00:33:58,350 --> 00:34:04,980
have to add a line here to make the link

00:34:00,720 --> 00:34:11,210
again this line and the XML changes are

00:34:04,980 --> 00:34:13,740
normally done automatically in Xcode so

00:34:11,210 --> 00:34:18,649
now that I have this now I can use my

00:34:13,740 --> 00:34:18,649
label and I can put some text in it

00:34:23,330 --> 00:34:30,440
there we go if I compile this hopefully

00:34:26,040 --> 00:34:30,440
it compiles without any errors

00:34:47,750 --> 00:34:53,230
saw some red stuff but maybe that's just

00:34:50,230 --> 00:34:53,230
highlighted

00:34:59,340 --> 00:35:14,960
maybe iPhone error here I pasted on the

00:35:09,360 --> 00:35:16,350
wrong place it has to be here yeah yep

00:35:14,960 --> 00:35:18,870
there we go

00:35:16,350 --> 00:35:21,810
zero field so let's see if it works

00:35:18,870 --> 00:35:29,810
let's run it on on my iPhone 6 ignore

00:35:21,810 --> 00:35:29,810
that error so normally might

00:35:41,880 --> 00:35:44,690
okay

00:35:45,960 --> 00:35:52,440
okay so this one's not seems not to be

00:35:48,839 --> 00:35:55,369
working I have to say something about

00:35:52,440 --> 00:35:58,710
iOS integration it's not very stable yet

00:35:55,369 --> 00:36:00,930
even though it's being shipped it is not

00:35:58,710 --> 00:36:02,730
so stable at the moment so they are

00:36:00,930 --> 00:36:05,000
aware of this and they are working on it

00:36:02,730 --> 00:36:05,000
okay

00:36:06,450 --> 00:36:23,520
so that's it for the iOS demo okay so

00:36:18,869 --> 00:36:25,290
next one what I showed you is how you

00:36:23,520 --> 00:36:28,650
can import an existing Xcode project

00:36:25,290 --> 00:36:33,119
individual C++ how you can open a Visual

00:36:28,650 --> 00:36:34,710
C++ iOS project in Xcode make URI write

00:36:33,119 --> 00:36:38,099
a and just import everything back into

00:36:34,710 --> 00:36:42,930
Visual Studio there are two resources

00:36:38,099 --> 00:36:48,440
here that are you have great help if you

00:36:42,930 --> 00:36:48,440
want to start to use this iOS workflow

00:36:52,010 --> 00:36:59,520
so next game engines Microsoft added

00:36:57,109 --> 00:37:03,299
jumpstart project for a game engine

00:36:59,520 --> 00:37:08,339
called cocos2d X this makes it easy to

00:37:03,299 --> 00:37:10,470
get started with this with this game

00:37:08,339 --> 00:37:13,950
engine and Visual C++ at the moment it's

00:37:10,470 --> 00:37:19,380
only for Android not yet for iOS so

00:37:13,950 --> 00:37:23,190
let's demonstrate this the first thing

00:37:19,380 --> 00:37:25,349
you have to do is yes this is the page

00:37:23,190 --> 00:37:27,359
where you can download the Java language

00:37:25,349 --> 00:37:31,559
services for Android that I mentioned

00:37:27,359 --> 00:37:34,520
before so for the cocos2d X you just go

00:37:31,559 --> 00:37:37,950
to their website and you download the

00:37:34,520 --> 00:37:40,020
their SDK for the Visual Studio

00:37:37,950 --> 00:37:42,390
jumpstart project you have to download

00:37:40,020 --> 00:37:43,950
to 3.2 versions so at the bottom here

00:37:42,390 --> 00:37:46,530
you have looking for an older version

00:37:43,950 --> 00:37:51,599
and then you download this one the

00:37:46,530 --> 00:37:56,130
version 3.2 3.12 sorry once you have

00:37:51,599 --> 00:37:59,099
that you unzip it wherever you want I've

00:37:56,130 --> 00:38:01,470
done that here

00:37:59,099 --> 00:38:03,359
and first you have to make sure that you

00:38:01,470 --> 00:38:07,339
have Python installed and the next thing

00:38:03,359 --> 00:38:11,519
you do is you open a command prompt here

00:38:07,339 --> 00:38:16,710
and you have to run this little setup

00:38:11,519 --> 00:38:18,900
script it will ask you a bunch of

00:38:16,710 --> 00:38:21,150
questions but you can all just use the

00:38:18,900 --> 00:38:23,700
default you just enter a few times enter

00:38:21,150 --> 00:38:25,279
and that's it and then if this is the

00:38:23,700 --> 00:38:28,220
first time you did this you have to

00:38:25,279 --> 00:38:31,499
close this this console application and

00:38:28,220 --> 00:38:35,460
start it again then when you want to

00:38:31,499 --> 00:38:40,259
start a new project you basically asked

00:38:35,460 --> 00:38:44,849
koco's to create a new game project you

00:38:40,259 --> 00:38:48,599
say that you want you want to use C++

00:38:44,849 --> 00:38:50,099
and you will say where you want to store

00:38:48,599 --> 00:38:52,979
your project in this case I'm just

00:38:50,099 --> 00:38:55,859
storing it in projects I already did

00:38:52,979 --> 00:38:57,420
this it takes a little bit so I'm not

00:38:55,859 --> 00:39:00,119
going to do that here but that's the

00:38:57,420 --> 00:39:03,680
syntax out how to get how you get

00:39:00,119 --> 00:39:06,210
started with this and once you run this

00:39:03,680 --> 00:39:09,089
Koko's executable then if you go to

00:39:06,210 --> 00:39:13,890
projects you have a my new game and then

00:39:09,089 --> 00:39:15,119
you have your jumpstart project there is

00:39:13,890 --> 00:39:16,769
support for all kinds of different

00:39:15,119 --> 00:39:19,319
projects but as you see there is no

00:39:16,769 --> 00:39:21,660
Visual Studio there yet so that's the

00:39:19,319 --> 00:39:25,410
Microsoft jumpstart project that I

00:39:21,660 --> 00:39:29,729
mentioned basically you download this

00:39:25,410 --> 00:39:31,440
file I'll put the link in my slides you

00:39:29,729 --> 00:39:33,479
download this from Microsoft and you

00:39:31,440 --> 00:39:38,309
just put it right next to the other

00:39:33,479 --> 00:39:40,589
projects here and you just extract it

00:39:38,309 --> 00:39:44,029
and then you will see there is a new

00:39:40,589 --> 00:39:46,829
project appearing for Visual Studio and

00:39:44,029 --> 00:39:50,059
this project there is a solution file

00:39:46,829 --> 00:39:50,059
which you can open

00:40:00,400 --> 00:40:08,960
there we go so I'm going to start

00:40:06,830 --> 00:40:18,340
compiling it immediately because it

00:40:08,960 --> 00:40:43,670
takes a little bit if I get control okay

00:40:18,340 --> 00:40:45,890
doesn't look good let's try it again so

00:40:43,670 --> 00:40:48,440
I'm going to build an AR M version and

00:40:45,890 --> 00:40:55,520
not an x86 as I did before for my

00:40:48,440 --> 00:40:57,500
androids plate work this time so I'm

00:40:55,520 --> 00:40:59,960
going to build ir m let's just start the

00:40:57,500 --> 00:41:06,830
build process why am i building an AR m

00:40:59,960 --> 00:41:08,360
because my emulators are x86 although

00:41:06,830 --> 00:41:10,400
they are fast they're running on hyper-v

00:41:08,360 --> 00:41:13,010
they are very fast emulators they do not

00:41:10,400 --> 00:41:14,990
support the full OpenGL advanced

00:41:13,010 --> 00:41:17,540
features and this game engine is using

00:41:14,990 --> 00:41:19,580
some advanced OpenGL features so if you

00:41:17,540 --> 00:41:22,070
try to run this on your emulator you

00:41:19,580 --> 00:41:24,410
will just get a black screen there are

00:41:22,070 --> 00:41:25,160
some other commercial emulators

00:41:24,410 --> 00:41:29,240
available

00:41:25,160 --> 00:41:31,760
maybe genymotion that might work but I

00:41:29,240 --> 00:41:35,030
didn't try that one so for this demo I

00:41:31,760 --> 00:41:37,700
will just use it will be hard to see but

00:41:35,030 --> 00:41:44,420
some people will see it I'm having a

00:41:37,700 --> 00:41:46,070
real device here so let's take a while

00:41:44,420 --> 00:41:48,800
it's compiling let's take a look at what

00:41:46,070 --> 00:41:50,990
the solution looks like I have here a

00:41:48,800 --> 00:41:54,140
Coco's to do 2d project which is

00:41:50,990 --> 00:42:00,800
basically a Java project and this is my

00:41:54,140 --> 00:42:04,480
actual Android application so so it's an

00:42:00,800 --> 00:42:06,820
Android activity application Java

00:42:04,480 --> 00:42:11,980
and there is one reference and just do a

00:42:06,820 --> 00:42:19,570
cocos2d cpp library and this is native

00:42:11,980 --> 00:42:22,420
android c++ dynamic library you also see

00:42:19,570 --> 00:42:24,910
that here in the java application you

00:42:22,420 --> 00:42:29,560
have some assets like phones and PNG

00:42:24,910 --> 00:42:36,400
files and these I can use from my from

00:42:29,560 --> 00:42:39,130
my C++ code so if I take a look here so

00:42:36,400 --> 00:42:42,190
this project is entirely C++ and this

00:42:39,130 --> 00:42:45,220
hello world scene file this one is

00:42:42,190 --> 00:42:49,119
basically setting up my single for my

00:42:45,220 --> 00:42:53,950
game and you see I'm using here assets

00:42:49,119 --> 00:42:58,000
that are defined in my Android assets

00:42:53,950 --> 00:43:00,760
folder so we see that everything

00:42:58,000 --> 00:43:11,619
compiled fine so now I should be able to

00:43:00,760 --> 00:43:14,920
run this on my device and if everything

00:43:11,619 --> 00:43:17,520
worked great then should start showing

00:43:14,920 --> 00:43:17,520
something soon

00:43:24,620 --> 00:43:29,070
almost there I have three big dots so

00:43:28,410 --> 00:43:30,770
there we go

00:43:29,070 --> 00:43:36,960
it's very small but there is a small

00:43:30,770 --> 00:43:38,970
cocos2d X logo probably don't see it

00:43:36,960 --> 00:43:41,130
from there a bit and it's running a

00:43:38,970 --> 00:43:43,410
visual studio so I could put breakpoints

00:43:41,130 --> 00:43:54,090
here and then I'm really debugging my

00:43:43,410 --> 00:43:57,620
real device here so if you are using is

00:43:54,090 --> 00:44:00,000
ignore this error if you're using this

00:43:57,620 --> 00:44:01,470
jumpstart project that I mentioned here

00:44:00,000 --> 00:44:04,800
this is the file that you can download

00:44:01,470 --> 00:44:07,650
from from a blog post that I will

00:44:04,800 --> 00:44:09,450
mention in my slides one thing to take

00:44:07,650 --> 00:44:11,280
care of is that basically the only

00:44:09,450 --> 00:44:13,980
configuration that is working out of the

00:44:11,280 --> 00:44:16,500
books is debug erm the other

00:44:13,980 --> 00:44:17,840
configurations like Deever x86 or

00:44:16,500 --> 00:44:20,340
release erm

00:44:17,840 --> 00:44:23,790
their project properties are not

00:44:20,340 --> 00:44:25,140
completely correct so it will not build

00:44:23,790 --> 00:44:26,850
out of the book so you might have to

00:44:25,140 --> 00:44:29,370
tweak those project properties a little

00:44:26,850 --> 00:44:31,740
bit by adding some extra include folders

00:44:29,370 --> 00:44:34,260
and some other settings so if you want

00:44:31,740 --> 00:44:42,000
to start playing with this just use

00:44:34,260 --> 00:44:44,840
debug Arum so that's it for the game

00:44:42,000 --> 00:44:44,840
engine demo

00:44:50,270 --> 00:44:57,510
so I basically mentioned everything

00:44:53,040 --> 00:45:00,840
what's on this slide you saw this was

00:44:57,510 --> 00:45:02,520
also a combination about Java code the

00:45:00,840 --> 00:45:05,610
main application is written in Java and

00:45:02,520 --> 00:45:07,170
then you have the real code that is

00:45:05,610 --> 00:45:11,730
setting up your game and so on it's

00:45:07,170 --> 00:45:13,740
written in pure C++ and in this case the

00:45:11,730 --> 00:45:15,570
project was using the add the build

00:45:13,740 --> 00:45:19,520
system not the gradual build system so

00:45:15,570 --> 00:45:23,670
you you have a lot of flexibility here

00:45:19,520 --> 00:45:26,310
this is the VC plus plus blog post that

00:45:23,670 --> 00:45:27,900
I mentioned if you go to this blog post

00:45:26,310 --> 00:45:35,610
there you will find the link to the

00:45:27,900 --> 00:45:38,700
jumpstart project okay so here is a

00:45:35,610 --> 00:45:42,000
small step by step guide what you have

00:45:38,700 --> 00:45:44,310
to do you have to download that SDK make

00:45:42,000 --> 00:45:47,400
sure python is installed run that setup

00:45:44,310 --> 00:45:49,440
script create your new game copy that

00:45:47,400 --> 00:45:51,870
Android targeting real studio project

00:45:49,440 --> 00:45:57,420
next to the other project unzip it open

00:45:51,870 --> 00:46:01,290
it and build it at the moment it's only

00:45:57,420 --> 00:46:04,650
available for version 3 point 12 of

00:46:01,290 --> 00:46:06,710
Coco's but yeah that might change in the

00:46:04,650 --> 00:46:06,710
future

00:46:08,390 --> 00:46:13,830
next let's see a little bit how you do

00:46:11,700 --> 00:46:16,470
cross-platform mobile UI so if you're

00:46:13,830 --> 00:46:18,890
making games your game is probably full

00:46:16,470 --> 00:46:21,780
screen and you probably have custom UI

00:46:18,890 --> 00:46:23,700
so then you can just use pure OpenGL or

00:46:21,780 --> 00:46:26,250
you can use this cocos2d

00:46:23,700 --> 00:46:30,720
x engine or the Unreal Engine or any

00:46:26,250 --> 00:46:34,350
engine you want and then it's rather

00:46:30,720 --> 00:46:37,560
easy to have done it's easy to have the

00:46:34,350 --> 00:46:39,510
same UI on different platforms for apps

00:46:37,560 --> 00:46:42,480
it's a little bit more complicated so if

00:46:39,510 --> 00:46:47,280
you want a custom UI for for your app

00:46:42,480 --> 00:46:48,810
then it can use the same mechanisms you

00:46:47,280 --> 00:46:52,680
use for games or you can use something

00:46:48,810 --> 00:46:54,630
like summer in which yeah then you do

00:46:52,680 --> 00:46:56,040
your UI layer in c-sharp and then you

00:46:54,630 --> 00:46:59,460
have support for all the platforms

00:46:56,040 --> 00:47:01,650
available or you can have a C++ back-end

00:46:59,460 --> 00:47:03,600
with a very thin platform specific UI

00:47:01,650 --> 00:47:05,460
layer so those are

00:47:03,600 --> 00:47:08,010
technology as I mentioned before on one

00:47:05,460 --> 00:47:12,360
of the slides so let's take a look how

00:47:08,010 --> 00:47:16,520
we go about making this didn't platform

00:47:12,360 --> 00:47:16,520
specific UI layer in visual C++

00:47:18,710 --> 00:47:25,730
what I did for this demo I started to it

00:47:22,580 --> 00:47:30,180
this project that you can download from

00:47:25,730 --> 00:47:33,330
from Amazon code just search for hello G

00:47:30,180 --> 00:47:40,110
and I Android application sample this

00:47:33,330 --> 00:47:43,110
one shows you how to use C++ from native

00:47:40,110 --> 00:47:45,900
java android application i started from

00:47:43,110 --> 00:47:50,820
this one and then added support for iOS

00:47:45,900 --> 00:48:00,870
and for universal Windows programs so

00:47:50,820 --> 00:48:06,120
let's take a look how it is done so here

00:48:00,870 --> 00:48:08,610
we go this is a shirt c++ step that i

00:48:06,120 --> 00:48:10,380
want to share with all my different

00:48:08,610 --> 00:48:13,920
platforms so in this case i just have a

00:48:10,380 --> 00:48:18,390
simple function that returns me some c++

00:48:13,920 --> 00:48:21,090
string and here is the implementation it

00:48:18,390 --> 00:48:23,880
just returns me on a utf-8 encoded

00:48:21,090 --> 00:48:27,780
string so it's this is really pure

00:48:23,880 --> 00:48:29,820
native C++ next step I want to use this

00:48:27,780 --> 00:48:34,320
in an Android application so I have to

00:48:29,820 --> 00:48:37,710
use this shared code inside a static

00:48:34,320 --> 00:48:39,210
library and Android static library you

00:48:37,710 --> 00:48:43,140
see there is a reference to my shared

00:48:39,210 --> 00:48:45,900
stuff and then here I have a gni wrapper

00:48:43,140 --> 00:48:49,800
that basically simply calls my C++

00:48:45,900 --> 00:48:52,920
function and then converse my c++ dead

00:48:49,800 --> 00:48:55,350
string to a Java string that's all what

00:48:52,920 --> 00:48:59,570
this is doing and then if I take a look

00:48:55,350 --> 00:49:03,210
at my java application in my java code i

00:48:59,570 --> 00:49:06,740
can simply call my string from gni and

00:49:03,210 --> 00:49:10,350
that one will call my C++ function

00:49:06,740 --> 00:49:13,260
marshall's the state string to a java

00:49:10,350 --> 00:49:16,670
string and then I can do whatever I want

00:49:13,260 --> 00:49:16,670
with it in my java code

00:49:16,800 --> 00:49:24,390
so that's for the Android part next we

00:49:21,540 --> 00:49:28,860
have I added support for a universal

00:49:24,390 --> 00:49:30,780
Windows application I used of course and

00:49:28,860 --> 00:49:33,750
a native C++ universal Windows

00:49:30,780 --> 00:49:36,990
application so using zama for DIY and

00:49:33,750 --> 00:49:39,660
it's using c++ the extra code behind and

00:49:36,990 --> 00:49:42,960
if i take a look at my main page is amol

00:49:39,660 --> 00:49:47,730
dot cpp what i can do is i can just

00:49:42,960 --> 00:49:50,250
include my header and call my my shared

00:49:47,730 --> 00:49:52,200
function and use it this is a function

00:49:50,250 --> 00:49:57,150
to convert my stood string into a

00:49:52,200 --> 00:49:59,400
platform string so it's very easy for

00:49:57,150 --> 00:50:05,340
the universal Windows project and then

00:49:59,400 --> 00:50:07,260
for for the iOS it's also rather easy if

00:50:05,340 --> 00:50:10,670
I take a look at my view controller dot

00:50:07,260 --> 00:50:14,580
M file so this is objective c plus plus

00:50:10,670 --> 00:50:18,180
here I'm calling my again I just include

00:50:14,580 --> 00:50:20,190
my header and I can directly call my C++

00:50:18,180 --> 00:50:24,150
function which returns me a straight

00:50:20,190 --> 00:50:28,970
string and then with this thing I can

00:50:24,150 --> 00:50:32,820
convert this into an objective-c string

00:50:28,970 --> 00:50:34,440
so let's take a look if all this works

00:50:32,820 --> 00:50:39,960
so let's start with an Android

00:50:34,440 --> 00:50:45,300
application let's build this one there

00:50:39,960 --> 00:50:47,460
we go and let's set it as the default of

00:50:45,300 --> 00:50:53,760
course and now let's run it on my Kit

00:50:47,460 --> 00:50:57,140
Kat emulator so hopefully I see

00:50:53,760 --> 00:51:03,090
something here there we go

00:50:57,140 --> 00:51:06,390
of my breakpoint let's disable this so I

00:51:03,090 --> 00:51:07,980
have a native UI here just a label the

00:51:06,390 --> 00:51:12,000
content of that label is coming from

00:51:07,980 --> 00:51:14,640
native C++ and I have some text editor

00:51:12,000 --> 00:51:22,130
and I added some button but so the UI is

00:51:14,640 --> 00:51:22,130
done completely in XML and Java next

00:51:31,750 --> 00:51:36,620
let's take a look at the universal

00:51:34,550 --> 00:51:43,880
Windows project let's put this as the

00:51:36,620 --> 00:51:45,440
startup project and let's build it it's

00:51:43,880 --> 00:51:48,020
already built before so that's why it's

00:51:45,440 --> 00:51:49,880
so quick for Windows Phone there are

00:51:48,020 --> 00:51:53,120
also a bunch of emulators available so I

00:51:49,880 --> 00:52:01,190
have one running here so I can just

00:51:53,120 --> 00:52:04,160
deploy it to this emulator and run it so

00:52:01,190 --> 00:52:08,240
this application uses sam'l for the UI

00:52:04,160 --> 00:52:12,440
and C++ the X for the code-behind

00:52:08,240 --> 00:52:15,470
and you see it looks almost the same but

00:52:12,440 --> 00:52:17,270
it's it's it's specific for winner so

00:52:15,470 --> 00:52:20,420
the buttons look like all the buttons on

00:52:17,270 --> 00:52:24,130
Windows Phone look and my string again

00:52:20,420 --> 00:52:26,330
comes from my shared C++ back-end code

00:52:24,130 --> 00:52:30,020
since this is a universal Windows

00:52:26,330 --> 00:52:33,230
application I can also run it on my

00:52:30,020 --> 00:52:34,910
desktop there we go so now I have an

00:52:33,230 --> 00:52:37,310
Android version running a Windows Phone

00:52:34,910 --> 00:52:40,070
version running and a Windows desktop

00:52:37,310 --> 00:52:45,320
version running and then the last one is

00:52:40,070 --> 00:52:48,070
the iOS version let's build this build

00:52:45,320 --> 00:52:52,840
before as well and let's deploy it to my

00:52:48,070 --> 00:52:52,840
to my iOS let's hope it works this time

00:52:57,460 --> 00:53:02,200
there we go

00:52:58,910 --> 00:53:02,200
it's launching my

00:53:14,500 --> 00:53:26,080
take some time there we go so now

00:53:21,970 --> 00:53:30,040
basically we have shared C++ code that

00:53:26,080 --> 00:53:34,090
is running on Android with a native

00:53:30,040 --> 00:53:34,690
Android UI we're running on Windows

00:53:34,090 --> 00:53:36,220
Phone

00:53:34,690 --> 00:53:46,680
we are running on the Windows desktop

00:53:36,220 --> 00:53:48,790
and we are running on an iPhone so I

00:53:46,680 --> 00:53:51,190
mentioned everything here you have an

00:53:48,790 --> 00:53:54,450
Android specific UI and iOS specific UI

00:53:51,190 --> 00:53:57,430
and I windows universal app specific UI

00:53:54,450 --> 00:54:00,370
and I think that's it

00:53:57,430 --> 00:54:02,500
I have some resources you can go to the

00:54:00,370 --> 00:54:04,930
visual C++ cross-platform mobile

00:54:02,500 --> 00:54:06,400
documentation the link is there there is

00:54:04,930 --> 00:54:09,310
a lot of interesting content on the

00:54:06,400 --> 00:54:12,940
visual C++ blog you can always contact

00:54:09,310 --> 00:54:14,320
me you can also contact ANCA - Donna is

00:54:12,940 --> 00:54:16,960
the program manager for the close

00:54:14,320 --> 00:54:22,680
cross-platform mobile development story

00:54:16,960 --> 00:54:56,590
so that's it there are any questions

00:54:22,680 --> 00:55:02,070
like five minutes for questions so the

00:54:56,590 --> 00:55:04,750
question is if there is if there is any

00:55:02,070 --> 00:55:09,490
framework coming for a cross-platform UI

00:55:04,750 --> 00:55:14,470
just develop it once well that's you can

00:55:09,490 --> 00:55:17,140
use the xamarin for that as I think it

00:55:14,470 --> 00:55:18,760
was here yep so you can use the summer

00:55:17,140 --> 00:55:21,490
and UI layer then you have to use C

00:55:18,760 --> 00:55:24,190
sharp so it's not in C++ but then you

00:55:21,490 --> 00:55:26,710
make your UI once you write it in

00:55:24,190 --> 00:55:28,330
xamarin in c-sharp and then it runs on

00:55:26,710 --> 00:55:30,640
all the available platforms

00:55:28,330 --> 00:55:32,170
you can still combine this the summer in

00:55:30,640 --> 00:55:57,850
your eyelid you can still combine it

00:55:32,170 --> 00:56:00,640
with native C++ good yep so the question

00:55:57,850 --> 00:56:04,750
is about can we use QT to manage the

00:56:00,640 --> 00:56:08,740
cross-platform UI most likely but so my

00:56:04,750 --> 00:56:12,190
presentation is only about what visual

00:56:08,740 --> 00:56:19,500
C++ provides out of the box so I don't

00:56:12,190 --> 00:56:19,500
have experience with the Qt workflow yep

00:56:21,810 --> 00:56:26,800
and this example I did manually so the

00:56:25,360 --> 00:56:31,780
question is if there is a tool to make

00:56:26,800 --> 00:56:33,490
the G&I bindings automatically in this

00:56:31,780 --> 00:56:39,670
case I did it manually but I think there

00:56:33,490 --> 00:56:46,540
is remember the name sorry Jeannie

00:56:39,670 --> 00:57:17,180
okay okay so there is a tool that makes

00:56:46,540 --> 00:57:19,789
it easy really yes

00:57:17,180 --> 00:57:24,970
sure also the question is if you can use

00:57:19,789 --> 00:57:28,220
Visual Studio to debug either an remote

00:57:24,970 --> 00:57:31,099
iPhone right or a remote device yes

00:57:28,220 --> 00:57:34,010
that's definitely possible so I always

00:57:31,099 --> 00:57:37,609
use control f5 now to run my my demos

00:57:34,010 --> 00:57:39,410
but if you just hit f5 it will set up a

00:57:37,609 --> 00:57:47,930
deeper connection and you can put

00:57:39,410 --> 00:57:50,210
breakpoints and so on you can put

00:57:47,930 --> 00:57:54,880
breakpoints you know Objective C you can

00:57:50,210 --> 00:57:54,880
yeah I can see you I can get it to work

00:57:56,319 --> 00:58:04,730
where is my few controller let's put a

00:58:00,980 --> 00:58:07,339
breakpoint here that's right but as my

00:58:04,730 --> 00:58:09,410
mentioned iOS integration is not

00:58:07,339 --> 00:58:12,410
entirely stable yet so that's why I

00:58:09,410 --> 00:58:18,369
always used a control f5 for my demos

00:58:12,410 --> 00:58:18,369
but it should work so let's let's see

00:58:20,380 --> 00:58:26,299
it's starting up here so it always start

00:58:24,440 --> 00:58:30,069
even though there is already an iPhone

00:58:26,299 --> 00:58:35,420
emulator running it starts a second one

00:58:30,069 --> 00:58:47,020
wait didn't break no it's not working

00:58:35,420 --> 00:58:47,020
but supposed to work yep okay

00:59:01,559 --> 00:59:07,930
so the question is what exactly happens

00:59:05,260 --> 00:59:09,940
when what if you can open up a visual

00:59:07,930 --> 00:59:12,900
studio project directly in Android or

00:59:09,940 --> 00:59:12,900
Xcode

00:59:23,400 --> 00:59:29,260
no it's it is so if you do an open in

00:59:27,400 --> 00:59:34,720
Xcode it really generates you an Xcode

00:59:29,260 --> 00:59:36,130
project and so there is no support in

00:59:34,720 --> 00:59:38,589
Xcode to open visual studio project

00:59:36,130 --> 00:59:41,230
Visual Studio will convert it to an

00:59:38,589 --> 00:59:45,300
Xcode project and then you can open it

00:59:41,230 --> 00:59:45,300
in Xcode or save it or whatever you want

01:00:00,569 --> 01:00:08,440
yeah that um I'm not sure so there is

01:00:05,200 --> 01:00:10,750
support to to import to open Android

01:00:08,440 --> 01:00:12,790
projects you can just go file open

01:00:10,750 --> 01:00:15,069
Android project but I'm not sure if in

01:00:12,790 --> 01:00:17,410
the other way it also works I'm not sure

01:00:15,069 --> 01:00:20,349
about that definitely definitely for

01:00:17,410 --> 01:00:22,180
Xcode because you always have to convert

01:00:20,349 --> 01:00:24,069
it back to Xcode because there you have

01:00:22,180 --> 01:00:44,200
to do the compilation it's for Android

01:00:24,069 --> 01:00:49,480
I'm not sure I think you can do pretty

01:00:44,200 --> 01:00:51,700
much everything you want question is why

01:00:49,480 --> 01:01:01,560
would you want to edit your native code

01:00:51,700 --> 01:01:05,010
on a Mac if so no seems not know

01:01:01,560 --> 01:01:08,070
so it seems that my share C++ code is

01:01:05,010 --> 01:01:11,130
not being transferred no keep using

01:01:08,070 --> 01:01:13,200
Visual Studio to edit that so basically

01:01:11,130 --> 01:01:16,170
just use it to modify your storyboards

01:01:13,200 --> 01:01:44,490
your UI signing it when you want to

01:01:16,170 --> 01:01:46,950
publish it to the store and so on so a

01:01:44,490 --> 01:01:49,440
question is if you look at those logos

01:01:46,950 --> 01:01:53,150
here who of them are actually using this

01:01:49,440 --> 01:02:10,860
Visual C++ cross-platform mobile app

01:01:53,150 --> 01:02:12,840
workflow that I don't know yeah well if

01:02:10,860 --> 01:02:16,680
you want to target the other platforms

01:02:12,840 --> 01:02:24,020
then maybe it makes it easier if you if

01:02:16,680 --> 01:02:24,020
you start using this workflow yep

01:02:25,220 --> 01:02:37,440
for sorry so the question is if there's

01:02:32,750 --> 01:02:39,890
any plan to support web applications I'm

01:02:37,440 --> 01:02:39,890
not sure

01:03:14,890 --> 01:03:34,150
yeah can use JavaScript no that's true

01:03:35,109 --> 01:03:42,400

YouTube URL: https://www.youtube.com/watch?v=AuWCrdxNCgM


