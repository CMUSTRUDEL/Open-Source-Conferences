Title: C++ Dependency Management the Meson Way - Jussi Pakkanen - CppCon 2020
Publication date: 2020-10-15
Playlist: CppCon 2020 Lightning Talks
Description: 
	https://cppcon.org/
https://github.com/CppCon/CppCon2020
---
One of the most common things heard in this year's CppCon presentations is that C++ needs an easy way to use external libraries. In this talk we'll examine the Meson build system's approach for this problem. Includes a demo of building a multiplatform SDL 2 application with automatic dependency downloading.

---
Jussi Pakkanen is the creator and project lead of the Meson build system. He is currently working as a consultant. He has experience in many different fields of computing ranging from slot machines to mail sorting, computer security, Linux desktop development and gaming. His free time has been equally colorful, including things such as comics and illustration, directing movies, music and electronics. When not working on projects he might be found watching bad movies, especially sci-fi and the finest of trash from the 80s.

---
Streamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:09,040 --> 00:00:13,040
all right

00:00:09,920 --> 00:00:15,519
so uh here and welcome and uh i

00:00:13,040 --> 00:00:17,039
said i'm just gonna talk about siblings

00:00:15,519 --> 00:00:18,480
plus dependency management the mezzan

00:00:17,039 --> 00:00:20,560
way

00:00:18,480 --> 00:00:22,320
one thing which we have heard several

00:00:20,560 --> 00:00:24,320
times in this conference already for

00:00:22,320 --> 00:00:26,480
uh is that c plus really is a package

00:00:24,320 --> 00:00:28,800
manager and biara has said this

00:00:26,480 --> 00:00:30,800
this multiple times on multiple

00:00:28,800 --> 00:00:32,480
occasions so so brna if you're out there

00:00:30,800 --> 00:00:34,399
somewhere in cyberspace watching this

00:00:32,480 --> 00:00:36,320
one is for you

00:00:34,399 --> 00:00:37,600
so when you're using any sort of

00:00:36,320 --> 00:00:39,440
external dependencies

00:00:37,600 --> 00:00:40,719
uh you need to get it somehow and there

00:00:39,440 --> 00:00:42,640
are usually three ways

00:00:40,719 --> 00:00:44,000
of getting maths now in medicine we

00:00:42,640 --> 00:00:45,360
support all of these different ways

00:00:44,000 --> 00:00:48,480
transparently so that like the same

00:00:45,360 --> 00:00:49,760
build definition gets you all free

00:00:48,480 --> 00:00:52,800
most of the time usually you don't need

00:00:49,760 --> 00:00:54,239
to do any definition sometimes you might

00:00:52,800 --> 00:00:56,000
the first one is that when you're

00:00:54,239 --> 00:00:57,600
building you also kill call your

00:00:56,000 --> 00:00:58,559
dependencies build system which is like

00:00:57,600 --> 00:01:01,039
make or

00:00:58,559 --> 00:01:02,320
or cargo or cmake or auto tools or

00:01:01,039 --> 00:01:04,479
whatever

00:01:02,320 --> 00:01:05,519
and this kind of works but it only works

00:01:04,479 --> 00:01:07,760
for simple cases

00:01:05,519 --> 00:01:09,760
and and it's extremely fragile because

00:01:07,760 --> 00:01:12,720
you have two things competing and

00:01:09,760 --> 00:01:13,360
things can fail in interesting ways the

00:01:12,720 --> 00:01:15,040
second way

00:01:13,360 --> 00:01:16,799
is that you can have dependencies come

00:01:15,040 --> 00:01:18,240
from the system somehow this is the

00:01:16,799 --> 00:01:19,200
traditional linux way of doing things

00:01:18,240 --> 00:01:21,200
when you install

00:01:19,200 --> 00:01:22,880
things for id package uh this is

00:01:21,200 --> 00:01:23,840
extremely convenient when it works

00:01:22,880 --> 00:01:25,680
you don't have to compile your

00:01:23,840 --> 00:01:27,520
dependencies and and other people have

00:01:25,680 --> 00:01:28,880
done the q a it's really nice

00:01:27,520 --> 00:01:30,720
uh but there are many cases where this

00:01:28,880 --> 00:01:31,280
doesn't work or you can't actually use

00:01:30,720 --> 00:01:32,880
it but then

00:01:31,280 --> 00:01:36,560
there are other cases where you must use

00:01:32,880 --> 00:01:38,560
it like due to regulatory reasons

00:01:36,560 --> 00:01:40,720
and third way is that you have sort of a

00:01:38,560 --> 00:01:42,960
mono repo where you take all of your

00:01:40,720 --> 00:01:43,840
dependencies put them in one single

00:01:42,960 --> 00:01:45,280
build system

00:01:43,840 --> 00:01:47,200
like convert all the build systems that

00:01:45,280 --> 00:01:48,799
are there and then you just build them

00:01:47,200 --> 00:01:51,200
as it was your own code

00:01:48,799 --> 00:01:52,079
this is highly convenient the problem is

00:01:51,200 --> 00:01:53,759
that your favorite

00:01:52,079 --> 00:01:55,280
dependency probably won't build with

00:01:53,759 --> 00:01:56,399
your favorite build system so you have

00:01:55,280 --> 00:01:58,159
to do this work

00:01:56,399 --> 00:02:00,399
and everyone has to do the work again to

00:01:58,159 --> 00:02:03,200
get things working

00:02:00,399 --> 00:02:05,360
so in mess and what we do is that we

00:02:03,200 --> 00:02:07,600
have devised a way of converting

00:02:05,360 --> 00:02:09,039
the third kind of dependencies second

00:02:07,600 --> 00:02:10,879
kind of dependency the third one

00:02:09,039 --> 00:02:12,480
so there's this service called wrap

00:02:10,879 --> 00:02:14,480
database

00:02:12,480 --> 00:02:15,680
basically what it does is that there are

00:02:14,480 --> 00:02:17,920
dependencies which have

00:02:15,680 --> 00:02:20,000
links to the upstream source tarbles and

00:02:17,920 --> 00:02:21,760
then you have a patch of of the mess and

00:02:20,000 --> 00:02:23,360
build files that you need to build it

00:02:21,760 --> 00:02:26,560
and use it as a dependency

00:02:23,360 --> 00:02:29,680
and then you can just download these

00:02:26,560 --> 00:02:31,920
transparently so

00:02:29,680 --> 00:02:32,800
let's do an example we have an sdl2

00:02:31,920 --> 00:02:35,840
application

00:02:32,800 --> 00:02:37,519
use some graphics play some sound and

00:02:35,840 --> 00:02:40,800
see how that would work

00:02:37,519 --> 00:02:43,040
uh so on a raspberry pi uh you just

00:02:40,800 --> 00:02:44,319
install this dl2 and then you run the

00:02:43,040 --> 00:02:45,920
thing and it just builds

00:02:44,319 --> 00:02:48,080
the whole thing and links and everything

00:02:45,920 --> 00:02:51,360
works as you can tell till here

00:02:48,080 --> 00:02:54,000
it has found the system dependencies

00:02:51,360 --> 00:02:55,840
then if you are on windows what happens

00:02:54,000 --> 00:02:57,280
is that it automatically downloads the

00:02:55,840 --> 00:02:59,519
dependencies for you

00:02:57,280 --> 00:03:00,560
so here we can see uh at the bottom is

00:02:59,519 --> 00:03:04,480
that it's downloading

00:03:00,560 --> 00:03:06,319
sdl2 from sdl upstream and then the

00:03:04,480 --> 00:03:08,319
additional patch on top of that

00:03:06,319 --> 00:03:10,159
so you could build it as a sub project

00:03:08,319 --> 00:03:13,200
because sdl2 doesn't have

00:03:10,159 --> 00:03:14,959
mess and build files by default

00:03:13,200 --> 00:03:17,200
and here it is running on windows like

00:03:14,959 --> 00:03:19,280
as you can tell the massive graphical

00:03:17,200 --> 00:03:21,120
outputs and there's also sound but it's

00:03:19,280 --> 00:03:24,000
not not in this picture

00:03:21,120 --> 00:03:24,319
so it works on all three platforms and

00:03:24,000 --> 00:03:26,640
and

00:03:24,319 --> 00:03:28,640
others as well now this all seems quite

00:03:26,640 --> 00:03:31,280
nice but i know what you're thinking

00:03:28,640 --> 00:03:33,519
so could we reduce this massive amounts

00:03:31,280 --> 00:03:35,680
of information into a single number

00:03:33,519 --> 00:03:39,120
and turns out the answer is yes we can

00:03:35,680 --> 00:03:41,760
and that number is actually 33

00:03:39,120 --> 00:03:43,680
and 33 is the number of lines in the

00:03:41,760 --> 00:03:45,760
build definition for this project

00:03:43,680 --> 00:03:47,360
so this 33 lines of code does everything

00:03:45,760 --> 00:03:48,080
it does the build it deals with the

00:03:47,360 --> 00:03:49,760
graphics it

00:03:48,080 --> 00:03:51,680
does all the dependency downloads all

00:03:49,760 --> 00:03:52,959
the things and that's all you need to

00:03:51,680 --> 00:03:56,080
write

00:03:52,959 --> 00:03:59,040
and that's that's a bit convenient

00:03:56,080 --> 00:03:59,680
so this is this is our way of of solving

00:03:59,040 --> 00:04:02,159
solving

00:03:59,680 --> 00:04:02,720
or one way of solving the dependency

00:04:02,159 --> 00:04:04,959
problem

00:04:02,720 --> 00:04:06,000
and it works today you can you could

00:04:04,959 --> 00:04:08,080
already download things

00:04:06,000 --> 00:04:09,680
you can install things with one command

00:04:08,080 --> 00:04:11,360
it's it's fairly convenient and anyone

00:04:09,680 --> 00:04:11,840
everyone is is welcome to submit their

00:04:11,360 --> 00:04:14,080
own

00:04:11,840 --> 00:04:16,880
own things into the wrap database so it

00:04:14,080 --> 00:04:20,160
gets more and more things

00:04:16,880 --> 00:04:22,000
um and then as a like a commercial

00:04:20,160 --> 00:04:24,240
puff piece there's also this thing

00:04:22,000 --> 00:04:24,880
called a manual for the mess and build

00:04:24,240 --> 00:04:27,919
system

00:04:24,880 --> 00:04:29,280
which you can buy online and if you use

00:04:27,919 --> 00:04:32,160
the discount code

00:04:29,280 --> 00:04:33,120
cpcon 2020 you will get five euros of

00:04:32,160 --> 00:04:36,320
the price and this

00:04:33,120 --> 00:04:37,199
offer is valid for one week but that's

00:04:36,320 --> 00:04:39,360
that's my talk

00:04:37,199 --> 00:04:43,840
and i'll give the stage the next person

00:04:39,360 --> 00:04:43,840
thank you

00:04:59,280 --> 00:05:01,360

YouTube URL: https://www.youtube.com/watch?v=NUxgbXEXAoU


