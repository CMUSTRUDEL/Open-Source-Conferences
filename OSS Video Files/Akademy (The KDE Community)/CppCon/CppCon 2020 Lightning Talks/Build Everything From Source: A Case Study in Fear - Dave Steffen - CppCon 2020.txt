Title: Build Everything From Source: A Case Study in Fear - Dave Steffen - CppCon 2020
Publication date: 2020-10-14
Playlist: CppCon 2020 Lightning Talks
Description: 
	https://cppcon.org/
https://github.com/CppCon/CppCon2020
---
Two years ago Titus Winters gave a talk at Pacific++ called "C++ Past vs. Future" where he described the perils of linking files compiled at different times in different ways, which can easily lead to One-Definition-Rule violations and undefined behavior. This is not an abstract or theoretical problem, nor one restricted to C++, but is a present menace waiting in our build systems and in our operating system's prebuilt libraries. As a public service, I present a case study of a compiler upgrade, a deeply mysterious bug, and a popular open-source project with a C interface that cannot be delivered as a pre-built library without putting users in peril.

---
Dave Steffen completed his Ph.D. in theoretical physics at Colorado State University in 2003, and promptly changed course for a career in software engineering. He has worked primarily in defence and aerospace, and is currently a technical lead at SciTec Inc.'s Boulder office. For reasons unknown, he has turned out to be the expert, champion, and occasional street-corner evangelist for unit testing at most of the companies he has ever worked at.

---
Streamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:09,679 --> 00:00:12,559
so

00:00:10,160 --> 00:00:13,519
this is a public service announcement to

00:00:12,559 --> 00:00:16,640
build everything

00:00:13,519 --> 00:00:18,560
from scr uh source all the time this is

00:00:16,640 --> 00:00:22,880
a case study in fear

00:00:18,560 --> 00:00:26,080
and if that sounds like click bait

00:00:22,880 --> 00:00:27,599
it probably is actually click bait

00:00:26,080 --> 00:00:30,000
or let me put another way i hope it's

00:00:27,599 --> 00:00:32,640
click bait okay because it might not

00:00:30,000 --> 00:00:34,000
be um this is actually something that

00:00:32,640 --> 00:00:36,719
bit my team

00:00:34,000 --> 00:00:37,440
three weeks ago and i thought i it was

00:00:36,719 --> 00:00:39,600
worth

00:00:37,440 --> 00:00:41,680
coming down and giving everyone a little

00:00:39,600 --> 00:00:44,160
public service announcement about this

00:00:41,680 --> 00:00:44,719
um in a truly terrifying talk a few

00:00:44,160 --> 00:00:47,760
years back

00:00:44,719 --> 00:00:50,320
titus winters uh discussed the

00:00:47,760 --> 00:00:52,160
difficulties in maintaining api and abi

00:00:50,320 --> 00:00:53,600
compatibility in a large code base over

00:00:52,160 --> 00:00:55,360
a long period of time

00:00:53,600 --> 00:00:57,039
and all the horrifying ways that

00:00:55,360 --> 00:01:01,199
seemingly innocent changes can break

00:00:57,039 --> 00:01:05,119
everything um it's a detailed uh

00:01:01,199 --> 00:01:07,600
talk very abstract lots of of kind of

00:01:05,119 --> 00:01:08,240
lower gut c plus plus stuff and it's

00:01:07,600 --> 00:01:09,840
easy for

00:01:08,240 --> 00:01:11,360
i think a lot of people well programmers

00:01:09,840 --> 00:01:14,000
will just ignore it and

00:01:11,360 --> 00:01:15,520
other people might not ignore it but

00:01:14,000 --> 00:01:16,720
even team leads like ah

00:01:15,520 --> 00:01:17,840
that's just the google guys have to

00:01:16,720 --> 00:01:19,920
worry about that i don't have to worry

00:01:17,840 --> 00:01:23,280
about that but i'm here to tell you

00:01:19,920 --> 00:01:27,840
that we all have to worry about this so

00:01:23,280 --> 00:01:31,600
um uh-oh

00:01:27,840 --> 00:01:31,600
my slides are not advancing

00:01:31,759 --> 00:01:37,280
oh no oh hang on

00:01:34,960 --> 00:01:38,479
ah there we go okay good we're all is

00:01:37,280 --> 00:01:40,400
safe all right so

00:01:38,479 --> 00:01:42,000
this is the simplest example i can come

00:01:40,400 --> 00:01:44,479
up with um

00:01:42,000 --> 00:01:45,520
you've got a header file with an inline

00:01:44,479 --> 00:01:47,200
function

00:01:45,520 --> 00:01:48,960
that has an assert statement in it right

00:01:47,200 --> 00:01:51,119
so compiled in debug mode

00:01:48,960 --> 00:01:52,640
this stops the program compiled in

00:01:51,119 --> 00:01:53,520
release mode that assert goes away and

00:01:52,640 --> 00:01:56,079
it does nothing

00:01:53,520 --> 00:01:57,680
right so we include this into a couple

00:01:56,079 --> 00:01:59,520
of implementation files

00:01:57,680 --> 00:02:01,439
right which both call it or do something

00:01:59,520 --> 00:02:03,360
with it we then link them

00:02:01,439 --> 00:02:05,520
into object files but in one case we

00:02:03,360 --> 00:02:07,200
link it in debug mode in the other case

00:02:05,520 --> 00:02:08,800
we link it in release mode

00:02:07,200 --> 00:02:10,239
and then when we link these together we

00:02:08,800 --> 00:02:13,520
get something that should only

00:02:10,239 --> 00:02:16,319
really be called odrviolation.exe

00:02:13,520 --> 00:02:17,280
okay this is undefined behavior rising

00:02:16,319 --> 00:02:19,360
from the depths

00:02:17,280 --> 00:02:21,440
and if i had more time we would be

00:02:19,360 --> 00:02:23,440
putting in some jaws music at this point

00:02:21,440 --> 00:02:24,959
all right

00:02:23,440 --> 00:02:26,239
now the solution to this kind of thing

00:02:24,959 --> 00:02:27,599
and that's just the simplest case

00:02:26,239 --> 00:02:29,680
there's much more

00:02:27,599 --> 00:02:31,120
uh worrying and subtle ways that that

00:02:29,680 --> 00:02:34,319
kind of thing can happen

00:02:31,120 --> 00:02:35,920
so titus's advice very strongly stated

00:02:34,319 --> 00:02:36,640
at the time was to build everything from

00:02:35,920 --> 00:02:38,879
source

00:02:36,640 --> 00:02:39,680
with the same flags at the same time if

00:02:38,879 --> 00:02:41,120
possible

00:02:39,680 --> 00:02:44,720
and he jumps up and down about that

00:02:41,120 --> 00:02:44,720
point a little bit um

00:02:45,519 --> 00:02:50,640
and so again if that seems like

00:02:49,200 --> 00:02:51,920
it's kind of an abstract thing or it

00:02:50,640 --> 00:02:52,879
doesn't happen to me we don't have these

00:02:51,920 --> 00:02:56,640
problems

00:02:52,879 --> 00:02:58,879
but honestly it's not okay and you can

00:02:56,640 --> 00:03:00,879
end up with extraordinarily strange

00:02:58,879 --> 00:03:02,560
bugs that are very difficult to track

00:03:00,879 --> 00:03:04,400
down and it happened to us

00:03:02,560 --> 00:03:06,080
so for one brave team here at scitec the

00:03:04,400 --> 00:03:08,400
nightmare was just beginning

00:03:06,080 --> 00:03:09,200
and this is our story very very

00:03:08,400 --> 00:03:11,599
condensed

00:03:09,200 --> 00:03:13,920
so we have an extremely legacy system

00:03:11,599 --> 00:03:15,440
it's a legacy in every way shape or form

00:03:13,920 --> 00:03:18,000
some of the code is decades old we've

00:03:15,440 --> 00:03:20,000
got fortran 77 we've got old k n r style

00:03:18,000 --> 00:03:22,640
c where the function arguments didn't

00:03:20,000 --> 00:03:22,640
have types

00:03:22,879 --> 00:03:27,200
it runs on red hat enterprise linux 7

00:03:25,120 --> 00:03:29,440
servers so all the dependencies

00:03:27,200 --> 00:03:31,519
for the thing come in as rpm files right

00:03:29,440 --> 00:03:33,120
red hat package manager files these are

00:03:31,519 --> 00:03:35,360
what you install to put stuff in the

00:03:33,120 --> 00:03:35,920
operating system and it turns out that

00:03:35,360 --> 00:03:38,000
we use

00:03:35,920 --> 00:03:39,920
uh something called the hdfi file format

00:03:38,000 --> 00:03:41,599
it's a very sophisticated way of packing

00:03:39,920 --> 00:03:43,120
data into files

00:03:41,599 --> 00:03:44,720
it's an open source project it's very

00:03:43,120 --> 00:03:46,560
common in my industry

00:03:44,720 --> 00:03:48,480
it's curated by a there's a whole group

00:03:46,560 --> 00:03:49,280
to curate this and to develop in all

00:03:48,480 --> 00:03:51,920
this

00:03:49,280 --> 00:03:52,560
and in our case for reasons that are

00:03:51,920 --> 00:03:54,320
lost

00:03:52,560 --> 00:03:56,159
in time um

00:03:54,320 --> 00:03:58,799
[Music]

00:03:56,159 --> 00:04:00,799
we have a custom version of that rpm

00:03:58,799 --> 00:04:02,720
we've got a custom built rpm

00:04:00,799 --> 00:04:03,920
built we know not when we know not where

00:04:02,720 --> 00:04:07,760
we know not now

00:04:03,920 --> 00:04:09,280
uh how or why or wherefore this rpm

00:04:07,760 --> 00:04:10,319
was built but it has to go along with

00:04:09,280 --> 00:04:10,799
the rest of the system where nothing

00:04:10,319 --> 00:04:13,519
works

00:04:10,799 --> 00:04:14,000
okay which is fine until it's time to

00:04:13,519 --> 00:04:16,239
upgrade

00:04:14,000 --> 00:04:17,040
the compiler all right the system

00:04:16,239 --> 00:04:20,560
compiler

00:04:17,040 --> 00:04:23,759
on uh red hat 7 is gcc 485

00:04:20,560 --> 00:04:24,960
we're upgrading to nine um red hat says

00:04:23,759 --> 00:04:25,840
that everything ought to be compatible

00:04:24,960 --> 00:04:27,600
if you stick in c

00:04:25,840 --> 00:04:29,199
plus 11 mode and the good news is that

00:04:27,600 --> 00:04:30,479
we were successful with very little work

00:04:29,199 --> 00:04:32,560
we recompiled

00:04:30,479 --> 00:04:33,919
everything with a new compiler deployed

00:04:32,560 --> 00:04:35,759
it did our usual round of testing

00:04:33,919 --> 00:04:37,520
everything looked great

00:04:35,759 --> 00:04:39,280
until we let it run for a couple of days

00:04:37,520 --> 00:04:42,160
and every now and then one of our hdf5

00:04:39,280 --> 00:04:43,440
files was garbage

00:04:42,160 --> 00:04:45,440
and so this is where the nightmare

00:04:43,440 --> 00:04:46,400
begins did the compiler expose a latent

00:04:45,440 --> 00:04:50,400
bug in the code

00:04:46,400 --> 00:04:53,840
by the way this thing is 500 000 lines

00:04:50,400 --> 00:04:55,759
of code and we got it from another

00:04:53,840 --> 00:04:57,199
company so like most of that code we've

00:04:55,759 --> 00:04:59,120
never even looked at so

00:04:57,199 --> 00:05:00,880
how hard is it going to be to find this

00:04:59,120 --> 00:05:01,520
are we going to be hunting through the

00:05:00,880 --> 00:05:04,720
code

00:05:01,520 --> 00:05:09,360
for undefined behavior for weeks up late

00:05:04,720 --> 00:05:09,360
staring into debuggers right well

00:05:09,440 --> 00:05:13,759
i decided because i had heard titus's

00:05:11,759 --> 00:05:16,080
talk uh to be a coward and say well

00:05:13,759 --> 00:05:16,800
let's just try recompiling that old hdf5

00:05:16,080 --> 00:05:18,160
rpm

00:05:16,800 --> 00:05:20,639
with our new compiler to see what

00:05:18,160 --> 00:05:21,840
happens and hope it fixes things and

00:05:20,639 --> 00:05:22,960
hope we don't have to spend months

00:05:21,840 --> 00:05:24,880
tracking this down

00:05:22,960 --> 00:05:26,160
now that actually worked okay rebuilding

00:05:24,880 --> 00:05:28,320
the custom rpm

00:05:26,160 --> 00:05:30,080
with a new compiler and some correct

00:05:28,320 --> 00:05:31,280
settings that's a point

00:05:30,080 --> 00:05:34,240
that solved the problem everything's

00:05:31,280 --> 00:05:36,560
fine now here's the issue the hdf5

00:05:34,240 --> 00:05:38,080
library has two mutually incompatible

00:05:36,560 --> 00:05:39,919
build modes

00:05:38,080 --> 00:05:41,919
normal is single threaded only but it's

00:05:39,919 --> 00:05:44,000
got c plus plus bindings that work

00:05:41,919 --> 00:05:45,600
or you can build it in thread safe mode

00:05:44,000 --> 00:05:46,960
which means that you can use it in a

00:05:45,600 --> 00:05:47,360
multi-threaded program but it breaks the

00:05:46,960 --> 00:05:50,880
c

00:05:47,360 --> 00:05:52,320
plus bindings um there is a third mode

00:05:50,880 --> 00:05:53,600
that's called it's supposed to give you

00:05:52,320 --> 00:05:55,600
both of these at the same time but as

00:05:53,600 --> 00:05:57,120
far as we can tell it just crashes so

00:05:55,600 --> 00:05:59,039
the point is is that we specifically

00:05:57,120 --> 00:06:00,479
needed a library built with gcc nine and

00:05:59,039 --> 00:06:01,840
enabled thread safe

00:06:00,479 --> 00:06:04,000
building it with the old compiler and

00:06:01,840 --> 00:06:06,080
enable thread safe didn't work

00:06:04,000 --> 00:06:08,000
i'm not trying to come down on the hdf5

00:06:06,080 --> 00:06:11,120
group for this it's an open source

00:06:08,000 --> 00:06:12,720
library um it's the way it's evolved

00:06:11,120 --> 00:06:16,160
they don't have the resources

00:06:12,720 --> 00:06:18,000
to uh to clean this up and it's open

00:06:16,160 --> 00:06:19,280
source so you know packages are welcome

00:06:18,000 --> 00:06:21,440
now at the time we reached this

00:06:19,280 --> 00:06:23,759
conclusion which might be

00:06:21,440 --> 00:06:25,680
the click bait that all pre-built hdf5

00:06:23,759 --> 00:06:27,199
libraries are broken for someone

00:06:25,680 --> 00:06:29,280
but this is true given that there's two

00:06:27,199 --> 00:06:31,600
incompatible ways to build it

00:06:29,280 --> 00:06:33,520
if you manage to get one that isn't the

00:06:31,600 --> 00:06:35,360
way that you expect it to be

00:06:33,520 --> 00:06:37,360
your stuff is going to break and it may

00:06:35,360 --> 00:06:38,240
break in very strange and hard to

00:06:37,360 --> 00:06:41,600
diagnose

00:06:38,240 --> 00:06:43,199
uh ways so again build everything from

00:06:41,600 --> 00:06:43,680
source with the same flags at the same

00:06:43,199 --> 00:06:46,160
time

00:06:43,680 --> 00:06:47,440
if possible possibly including your open

00:06:46,160 --> 00:06:51,280
source dependencies

00:06:47,440 --> 00:06:51,280
and that's the thing that's really scary

00:06:51,840 --> 00:06:55,120
because how many open source libraries

00:06:53,680 --> 00:06:57,840
do you use

00:06:55,120 --> 00:06:58,240
do you know how they were built do you

00:06:57,840 --> 00:07:00,560
know

00:06:58,240 --> 00:07:02,080
if you can build with exactly the same

00:07:00,560 --> 00:07:03,120
build flags in exactly the same

00:07:02,080 --> 00:07:05,280
environment as

00:07:03,120 --> 00:07:06,240
all of those dependencies because

00:07:05,280 --> 00:07:08,560
remember even

00:07:06,240 --> 00:07:11,520
c has inline functions right so this

00:07:08,560 --> 00:07:14,960
isn't just c plus plus libraries

00:07:11,520 --> 00:07:17,039
are you safe are you sure you're safe

00:07:14,960 --> 00:07:18,479
keep watching the skies this has been a

00:07:17,039 --> 00:07:20,400
public service announcement

00:07:18,479 --> 00:07:21,520
to build all your dependencies from

00:07:20,400 --> 00:07:23,520
scratch from

00:07:21,520 --> 00:07:31,840
source with the same build flags all the

00:07:23,520 --> 00:07:31,840
time thank you

00:07:44,400 --> 00:07:46,479

YouTube URL: https://www.youtube.com/watch?v=54uVTkhinDE


