Title: Why is C++ so Slow? - Boris Kolpackov - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:09,059 --> 00:00:16,510
okay so why is C++ so slow but what kind

00:00:14,620 --> 00:00:21,310
of so do I mean right is it slow to

00:00:16,510 --> 00:00:24,210
execute no it slow to compile not really

00:00:21,310 --> 00:00:26,710
I want to talk about slow to develop in

00:00:24,210 --> 00:00:29,020
right and I think the three main

00:00:26,710 --> 00:00:31,990
contributing factors to that is let

00:00:29,020 --> 00:00:35,769
language itself our tooling build

00:00:31,990 --> 00:00:40,030
systems package managers build files and

00:00:35,769 --> 00:00:43,030
libraries or lack thereof so one thing

00:00:40,030 --> 00:00:48,550
we one of the key priorities in build 2

00:00:43,030 --> 00:00:51,850
is to make every C++ developer potential

00:00:48,550 --> 00:00:54,730
cross-platform library developer even if

00:00:51,850 --> 00:00:57,399
they only comfortable working in a

00:00:54,730 --> 00:00:59,590
single platform and one of the key

00:00:57,399 --> 00:01:03,640
metrics that we try to optimize is the

00:00:59,590 --> 00:01:05,530
time between nothing and a project that

00:01:03,640 --> 00:01:07,330
is C ID on all the platforms and

00:01:05,530 --> 00:01:08,710
compilers so this is basically the time

00:01:07,330 --> 00:01:11,140
between nothing and then you actually

00:01:08,710 --> 00:01:14,380
can do something useful right implement

00:01:11,140 --> 00:01:18,720
your logic so I have about 4 minutes

00:01:14,380 --> 00:01:18,720
left let's see if we can do it in for me

00:01:19,950 --> 00:01:26,740
so this is github I'm sure most of you

00:01:22,689 --> 00:01:28,689
have seen so against made a macro called

00:01:26,740 --> 00:01:32,380
lips VP I'm gonna make a library or

00:01:28,689 --> 00:01:39,970
called Lipsy pecan will give it a

00:01:32,380 --> 00:01:44,369
description nothing really new to the

00:01:39,970 --> 00:01:52,030
most of your hope so initializer it meow

00:01:44,369 --> 00:01:54,490
like MIT is a license we go it's created

00:01:52,030 --> 00:01:57,090
so now I'm gonna clone it to my local

00:01:54,490 --> 00:01:57,090
machine

00:01:59,650 --> 00:02:06,620
all right and if we look inside these

00:02:04,400 --> 00:02:08,630
are the files that github created for us

00:02:06,620 --> 00:02:12,680
so the next thing I'm gonna do I'm gonna

00:02:08,630 --> 00:02:15,170
actually feel it with some basic library

00:02:12,680 --> 00:02:18,020
templates so we use the PDF it's a

00:02:15,170 --> 00:02:22,100
project dependency manager in build two

00:02:18,020 --> 00:02:24,590
so we say it's a library in C++ so now

00:02:22,100 --> 00:02:26,390
it's create quite a bit more extra files

00:02:24,590 --> 00:02:28,280
there's some source file so essentially

00:02:26,390 --> 00:02:30,440
it's hello library that is rate that is

00:02:28,280 --> 00:02:32,990
set up to be a cross-platform library

00:02:30,440 --> 00:02:35,950
that's ready for you to fill in so one

00:02:32,990 --> 00:02:38,750
of the files there is the manifest file

00:02:35,950 --> 00:02:41,090
see if we look and that describes this

00:02:38,750 --> 00:02:43,880
library is a package we look at there we

00:02:41,090 --> 00:02:46,070
can see that the summary and the license

00:02:43,880 --> 00:02:48,530
were extracted from what github has

00:02:46,070 --> 00:02:51,350
generated so this saves us some time

00:02:48,530 --> 00:02:53,030
no need to copy and paste things next

00:02:51,350 --> 00:02:55,340
thing I'm gonna do I'm gonna initialize

00:02:53,030 --> 00:02:57,110
a build configuration so you can have as

00:02:55,340 --> 00:02:59,720
many as you want I'll just create one

00:02:57,110 --> 00:03:02,180
I'm on Linux I like GC so that's what

00:02:59,720 --> 00:03:04,190
I'm gonna use so they have great the

00:03:02,180 --> 00:03:06,739
build configuration so next I'm gonna go

00:03:04,190 --> 00:03:08,959
ahead and build it locally we can see

00:03:06,739 --> 00:03:12,290
there's even a test in this library so

00:03:08,959 --> 00:03:14,720
we can probably run a test okay

00:03:12,290 --> 00:03:22,850
so locally everything works so I'm gonna

00:03:14,720 --> 00:03:25,700
go ahead and commit it and push it so

00:03:22,850 --> 00:03:27,290
we've pasted it locally right but you

00:03:25,700 --> 00:03:28,549
know we haven't tasted quite a few

00:03:27,290 --> 00:03:32,540
platforms Linux

00:03:28,549 --> 00:03:35,330
I mean Mac OS Windows based companies so

00:03:32,540 --> 00:03:38,299
what we can do now is use the CI command

00:03:35,330 --> 00:03:40,730
- CI it on all the different platforms

00:03:38,299 --> 00:03:43,910
so this is quite a bit different to what

00:03:40,730 --> 00:03:46,820
you most of you I used to used to pull

00:03:43,910 --> 00:03:48,500
see I wear something you know checks

00:03:46,820 --> 00:03:50,630
your repository and builds it when it

00:03:48,500 --> 00:03:52,610
has time and resources so and we'll do

00:03:50,630 --> 00:03:55,310
it we do it differently we have pushed

00:03:52,610 --> 00:03:58,720
see is actually send your CI request

00:03:55,310 --> 00:04:01,880
explicitly and in return you get a link

00:03:58,720 --> 00:04:04,760
to the CI task which you can copy and

00:04:01,880 --> 00:04:07,360
paste into your browser so you can go

00:04:04,760 --> 00:04:07,360
take a look

00:04:09,590 --> 00:04:16,800
these gamaya beam so you can see already

00:04:14,040 --> 00:04:21,120
for build configurations are building

00:04:16,800 --> 00:04:24,120
some FreeBSD the Mac OS if we go and

00:04:21,120 --> 00:04:26,130
look at configurations lease that's

00:04:24,120 --> 00:04:29,370
what's available so it's basically Linux

00:04:26,130 --> 00:04:32,160
Mac OS Windows FreeBSD for good measure

00:04:29,370 --> 00:04:34,170
right to keep us honest and also all the

00:04:32,160 --> 00:04:36,600
all the major compilers of the versions

00:04:34,170 --> 00:04:38,910
that you would probably want to do so

00:04:36,600 --> 00:04:42,720
it's 35 build configurations and total

00:04:38,910 --> 00:04:47,040
currently so if we hit refresh now

00:04:42,720 --> 00:04:48,810
there's seven builds already going on so

00:04:47,040 --> 00:04:51,990
if you're interested you can if you want

00:04:48,810 --> 00:04:54,450
to see the end result so all 35 of them

00:04:51,990 --> 00:04:57,390
will be clean you can dig the logs and

00:04:54,450 --> 00:05:00,420
if you can if you want to go dig around

00:04:57,390 --> 00:05:03,360
go to see see I see the PDF dot org and

00:05:00,420 --> 00:05:06,780
you will see the first task pay is what

00:05:03,360 --> 00:05:09,230
I've just submitted okay three seconds

00:05:06,780 --> 00:05:09,230
to spare

00:05:10,500 --> 00:05:14,389

YouTube URL: https://www.youtube.com/watch?v=j-0_D4yLhj4


