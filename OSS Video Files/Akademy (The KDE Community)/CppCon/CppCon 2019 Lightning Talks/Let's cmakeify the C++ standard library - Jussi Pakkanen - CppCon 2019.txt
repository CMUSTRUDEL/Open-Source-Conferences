Title: Let's cmakeify the C++ standard library - Jussi Pakkanen - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:08,269 --> 00:00:13,879
hello my name is Karina and he talked to

00:00:12,049 --> 00:00:15,920
you about see magnifying the civil

00:00:13,879 --> 00:00:18,349
substandard library now specifically

00:00:15,920 --> 00:00:20,180
this talk is not about compiling the

00:00:18,349 --> 00:00:21,529
standard library with CMake like why

00:00:20,180 --> 00:00:24,380
would you do that don't do that

00:00:21,529 --> 00:00:26,359
instead what we find is that suppose

00:00:24,380 --> 00:00:28,519
fast has a lot of stuff in it

00:00:26,359 --> 00:00:30,410
there's integers that string priority

00:00:28,519 --> 00:00:32,150
queues and everything and what we need

00:00:30,410 --> 00:00:34,220
to realize is that all of this is

00:00:32,150 --> 00:00:37,160
unnecessary all of these things should

00:00:34,220 --> 00:00:40,299
be thrown away and replaced with the one

00:00:37,160 --> 00:00:42,440
true data structure that is a std string

00:00:40,299 --> 00:00:45,650
absolutely everything and this has

00:00:42,440 --> 00:00:47,720
massive benefits for example if you have

00:00:45,650 --> 00:00:50,239
integers you would have a string which

00:00:47,720 --> 00:00:53,299
says what the integer is very simple if

00:00:50,239 --> 00:00:55,760
you have a struct it would be separated

00:00:53,299 --> 00:00:57,769
by semicolon of the intents arrays are

00:00:55,760 --> 00:00:59,269
the same classes are the same they have

00:00:57,769 --> 00:01:01,119
the same representation you can change

00:00:59,269 --> 00:01:04,400
toggle between them

00:01:01,119 --> 00:01:07,820
STD vector value silicon valley

00:01:04,400 --> 00:01:10,520
semicolon also standard map you have key

00:01:07,820 --> 00:01:14,179
SEMICON values any konkey and so on and

00:01:10,520 --> 00:01:16,250
also even unordered map look how easy it

00:01:14,179 --> 00:01:17,960
is to remove things from this you just

00:01:16,250 --> 00:01:19,369
take it there there's no tombstones they

00:01:17,960 --> 00:01:23,240
don't do care about rehashing everything

00:01:19,369 --> 00:01:25,130
is so much simpler and there are other

00:01:23,240 --> 00:01:27,079
advantages as well

00:01:25,130 --> 00:01:29,509
you don't need name mangling because

00:01:27,079 --> 00:01:32,030
there's only one type ABI stability is

00:01:29,509 --> 00:01:35,840
trivial you don't have to do anything at

00:01:32,030 --> 00:01:37,759
all you get the small size optimization

00:01:35,840 --> 00:01:40,460
for all containers because there is only

00:01:37,759 --> 00:01:43,039
one container and even better you get it

00:01:40,460 --> 00:01:45,859
four types so if you have one single

00:01:43,039 --> 00:01:48,819
character it only takes 23 bytes to

00:01:45,859 --> 00:01:52,759
store it as opposed to 24 and malloc

00:01:48,819 --> 00:01:54,740
think about the savings you don't need

00:01:52,759 --> 00:01:57,170
templates because there is only one type

00:01:54,740 --> 00:01:59,030
templates have become unnecessary to

00:01:57,170 --> 00:02:00,979
sprite your algorithm for string and it

00:01:59,030 --> 00:02:03,200
works for everything and this des cuts

00:02:00,979 --> 00:02:05,240
down on compilation time there's no code

00:02:03,200 --> 00:02:06,700
block there's only one function for any

00:02:05,240 --> 00:02:09,619
piece of functionality

00:02:06,700 --> 00:02:11,600
you don't need reflection everything is

00:02:09,619 --> 00:02:14,090
serializable you just write it out two

00:02:11,600 --> 00:02:15,230
files right down to sockets it just you

00:02:14,090 --> 00:02:18,440
don't need to do anything this is so

00:02:15,230 --> 00:02:20,240
awesome for John Lakers you don't need

00:02:18,440 --> 00:02:22,250
allocators because everything is densely

00:02:20,240 --> 00:02:24,410
piped just one allocation

00:02:22,250 --> 00:02:25,250
for all everything it's just there you

00:02:24,410 --> 00:02:29,120
go

00:02:25,250 --> 00:02:30,560
no diffusion and nothing like that some

00:02:29,120 --> 00:02:32,390
people I'd say in the audience okay but

00:02:30,560 --> 00:02:34,280
this gonna cost performance problems no

00:02:32,390 --> 00:02:37,220
this actually will improve performance

00:02:34,280 --> 00:02:38,510
for example if you have an X vector of

00:02:37,220 --> 00:02:40,400
strings and want to convert it to a

00:02:38,510 --> 00:02:43,160
vector of integers that's an Aussie row

00:02:40,400 --> 00:02:48,110
operation which is formally optimal you

00:02:43,160 --> 00:02:49,730
cannot do this faster also you get to do

00:02:48,110 --> 00:02:51,410
things like this so if you have regular

00:02:49,730 --> 00:02:52,730
integers and you add them this is boring

00:02:51,410 --> 00:02:55,310
it's slow you can do it only at one of

00:02:52,730 --> 00:02:58,190
the time but if your integer is a string

00:02:55,310 --> 00:02:59,900
you get to do simply accelerated in to

00:02:58,190 --> 00:03:01,430
look at all the lanes you can have in

00:02:59,900 --> 00:03:03,290
here like every single one of these

00:03:01,430 --> 00:03:05,780
columns is a singing Lane but you can do

00:03:03,290 --> 00:03:07,730
and you can do addition with simply even

00:03:05,780 --> 00:03:11,420
with basic integers and you get all of

00:03:07,730 --> 00:03:13,160
the performance benefits and so in

00:03:11,420 --> 00:03:15,200
conclusion but if you think about it

00:03:13,160 --> 00:03:17,180
apart from readability performance lack

00:03:15,200 --> 00:03:18,740
of illumination architectural foundation

00:03:17,180 --> 00:03:21,290
and preventing your entire code base

00:03:18,740 --> 00:03:23,890
from collapsing what have types ever

00:03:21,290 --> 00:03:23,890
done for us

00:03:24,040 --> 00:03:29,110

YouTube URL: https://www.youtube.com/watch?v=YxortD9IxSc


