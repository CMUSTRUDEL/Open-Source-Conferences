Title: Making sense of terrible template errors with 'camomilla' - Vittorio Romeo - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:13,820 --> 00:00:19,590
okay so it is the script I wrote and I

00:00:17,910 --> 00:00:21,330
was inspired in showing this script to

00:00:19,590 --> 00:00:23,520
you from one of the talks lightning

00:00:21,330 --> 00:00:26,160
talks we had on the first session so

00:00:23,520 --> 00:00:28,380
somebody showed I think he was marching

00:00:26,160 --> 00:00:30,330
an arrow like this when you have some

00:00:28,380 --> 00:00:32,309
sort of code which is heavily templated

00:00:30,330 --> 00:00:33,570
and you're trying to do like two posts

00:00:32,309 --> 00:00:35,940
necessary order to post you get some

00:00:33,570 --> 00:00:37,470
stuff like that you can't read it

00:00:35,940 --> 00:00:38,790
but even if it was zoomed in you

00:00:37,470 --> 00:00:41,280
couldn't read it anyway and that's the

00:00:38,790 --> 00:00:43,500
main problem so what my script does is

00:00:41,280 --> 00:00:46,350
it basically goes through this kind of

00:00:43,500 --> 00:00:48,149
errors and collapses the templates for

00:00:46,350 --> 00:00:49,560
you so if you're something like a super

00:00:48,149 --> 00:00:51,360
NASA template a tuple instead of two

00:00:49,560 --> 00:00:53,280
prints at a tuple you can specify a

00:00:51,360 --> 00:00:55,140
depth and it's going to do some text

00:00:53,280 --> 00:00:57,210
pre-processing to collapse the template

00:00:55,140 --> 00:01:00,750
to something a little bit easier to read

00:00:57,210 --> 00:01:03,360
and the benefit of that is that then you

00:01:00,750 --> 00:01:06,149
can go up and down this depth because it

00:01:03,360 --> 00:01:07,170
caches whatever was collapsed like in

00:01:06,149 --> 00:01:09,210
this case over here

00:01:07,170 --> 00:01:11,880
and as an example if you are like this

00:01:09,210 --> 00:01:13,320
super super nested type if you go with

00:01:11,880 --> 00:01:15,450
depth zero is going to show you some

00:01:13,320 --> 00:01:16,920
only the top level type then if you want

00:01:15,450 --> 00:01:18,330
to keep going that you can do depth one

00:01:16,920 --> 00:01:19,950
and it's going to show you the second

00:01:18,330 --> 00:01:21,600
depth and so on which is quite useful to

00:01:19,950 --> 00:01:23,520
understand what is always happening or

00:01:21,600 --> 00:01:25,740
what's up or what's going on I've used

00:01:23,520 --> 00:01:27,060
this with boost Hana and Busan PL and it

00:01:25,740 --> 00:01:30,540
helps when you have this kind of very

00:01:27,060 --> 00:01:31,860
weird complicated template errors the

00:01:30,540 --> 00:01:34,080
other thing is you also specify some

00:01:31,860 --> 00:01:35,490
rejection so if your is very big and you

00:01:34,080 --> 00:01:38,130
don't want to see a city vector all over

00:01:35,490 --> 00:01:39,990
again you can ally this DB or alias

00:01:38,130 --> 00:01:42,479
boost Ana to be aged and stuff like that

00:01:39,990 --> 00:01:43,979
which also have the readability also

00:01:42,479 --> 00:01:45,810
have some rejects for stuff like forward

00:01:43,979 --> 00:01:48,150
on lambdas to make them shorter as well

00:01:45,810 --> 00:01:50,430
so the way you use it is that you just

00:01:48,150 --> 00:01:52,020
redirect your output into the script the

00:01:50,430 --> 00:01:53,880
script is going to cache the error

00:01:52,020 --> 00:01:55,950
message that you get and then you can

00:01:53,880 --> 00:01:57,180
run the script again reprocessing for

00:01:55,950 --> 00:01:59,040
example to play around with the depth

00:01:57,180 --> 00:02:00,450
without having to recompile your code so

00:01:59,040 --> 00:02:02,100
you start with depth zero you see the

00:02:00,450 --> 00:02:03,509
top level error and if you need more

00:02:02,100 --> 00:02:06,689
context you can increase the depth and

00:02:03,509 --> 00:02:09,119
go up and down the template stack

00:02:06,689 --> 00:02:10,610
basically a bunch of configuration stuff

00:02:09,119 --> 00:02:13,560
like that is just a simple Python script

00:02:10,610 --> 00:02:15,420
and in general the benefit of this it

00:02:13,560 --> 00:02:18,120
converts this huge mess into that one

00:02:15,420 --> 00:02:19,980
and the relative size change between the

00:02:18,120 --> 00:02:22,290
output of the compiler can be very

00:02:19,980 --> 00:02:23,880
significant so if you have end using

00:02:22,290 --> 00:02:25,320
boost Hanabusa fusion or stuff like that

00:02:23,880 --> 00:02:27,500
feel free to try it out it's called

00:02:25,320 --> 00:02:30,850
camera Mila and it's available on

00:02:27,500 --> 00:02:34,780
my github that's it

00:02:30,850 --> 00:02:34,780

YouTube URL: https://www.youtube.com/watch?v=3dUZn3eloWE


