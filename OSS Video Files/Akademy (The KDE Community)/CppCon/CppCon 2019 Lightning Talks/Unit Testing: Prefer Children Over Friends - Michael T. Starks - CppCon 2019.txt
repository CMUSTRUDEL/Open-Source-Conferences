Title: Unit Testing: Prefer Children Over Friends - Michael T. Starks - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:09,190 --> 00:00:14,570
hello how many people who here feel

00:00:13,039 --> 00:00:18,199
pretty good about the unit testing that

00:00:14,570 --> 00:00:20,090
you do okay not bad not bad

00:00:18,199 --> 00:00:27,800
that's great that's probably talking

00:00:20,090 --> 00:00:28,239
about today May gets high slides there

00:00:27,800 --> 00:00:32,689
we are

00:00:28,239 --> 00:00:35,860
alright so I am Michael Starks and I

00:00:32,689 --> 00:00:38,899
work at Tru a BCT we actually create

00:00:35,860 --> 00:00:42,560
devices that allow you to donate blood

00:00:38,899 --> 00:00:44,300
and also save lives it's a wonderful

00:00:42,560 --> 00:00:47,739
company to work for and I'm very excited

00:00:44,300 --> 00:00:52,790
to be here children and Friends I

00:00:47,739 --> 00:00:55,670
absolutely love my children and yeah I

00:00:52,790 --> 00:00:56,720
like my friends but sometimes friends

00:00:55,670 --> 00:01:00,739
can get you into trouble

00:00:56,720 --> 00:01:02,120
especially if your unit testing so let's

00:01:00,739 --> 00:01:06,170
take a look at a class that we might

00:01:02,120 --> 00:01:08,840
want to test in this case we have player

00:01:06,170 --> 00:01:10,579
stats I'm imagining a game whether you

00:01:08,840 --> 00:01:13,639
want to start this game with maximum

00:01:10,579 --> 00:01:17,840
health and zero currency and we want to

00:01:13,639 --> 00:01:20,719
check that you have that initial default

00:01:17,840 --> 00:01:22,429
construction what I will say is that

00:01:20,719 --> 00:01:25,369
this is a very simple example but it

00:01:22,429 --> 00:01:27,429
extends to very complicated examples if

00:01:25,369 --> 00:01:30,829
you have a database the user interface

00:01:27,429 --> 00:01:31,939
peril relativism anything you have you

00:01:30,829 --> 00:01:35,209
can still think about how you're going

00:01:31,939 --> 00:01:36,139
to test it with these ideas alright so

00:01:35,209 --> 00:01:40,159
the first thing I want to say is you

00:01:36,139 --> 00:01:43,700
want to avoid making members public just

00:01:40,159 --> 00:01:45,200
for the sake of testing you may have

00:01:43,700 --> 00:01:46,849
other reasons for making members public

00:01:45,200 --> 00:01:48,469
and that's fine but you don't want to

00:01:46,849 --> 00:01:51,799
change your code just for the sake of

00:01:48,469 --> 00:01:52,819
testing so here's an example and this is

00:01:51,799 --> 00:01:55,039
using cxx

00:01:52,819 --> 00:01:56,329
test you can use any testing framework

00:01:55,039 --> 00:01:58,039
whatsoever

00:01:56,329 --> 00:02:01,969
catch is another one that I like to use

00:01:58,039 --> 00:02:03,889
and that works fine except for the

00:02:01,969 --> 00:02:05,539
problem that we are trying to reach in

00:02:03,889 --> 00:02:08,959
and test something that's private or

00:02:05,539 --> 00:02:10,399
protected so instead you might have this

00:02:08,959 --> 00:02:13,069
idea that you're going to let your

00:02:10,399 --> 00:02:15,920
friend do the testing for you here's a

00:02:13,069 --> 00:02:18,350
helper class and this friend would have

00:02:15,920 --> 00:02:20,810
the capability of reaching in and

00:02:18,350 --> 00:02:21,980
dealing with your private data which you

00:02:20,810 --> 00:02:24,500
do not want the whole

00:02:21,980 --> 00:02:26,150
world to see so I would recommend don't

00:02:24,500 --> 00:02:28,099
do this if you don't want to make

00:02:26,150 --> 00:02:30,549
something public just for the sake of an

00:02:28,099 --> 00:02:35,750
example you don't want to have a friend

00:02:30,549 --> 00:02:37,580
effectively make it public for you do we

00:02:35,750 --> 00:02:40,370
need to test things that are not public

00:02:37,580 --> 00:02:41,810
that is debatable but if you find

00:02:40,370 --> 00:02:44,200
yourself in a situation with legacy code

00:02:41,810 --> 00:02:47,390
where you feel like you have to I

00:02:44,200 --> 00:02:48,860
recommend that you use children the way

00:02:47,390 --> 00:02:50,810
that you use a child is you would

00:02:48,860 --> 00:02:52,940
inherit from the class that you're

00:02:50,810 --> 00:02:56,290
testing in this case player stats and

00:02:52,940 --> 00:02:59,629
you would go ahead and implement a

00:02:56,290 --> 00:03:02,599
method to get whatever's private if you

00:02:59,629 --> 00:03:04,459
want to test it directly or you can have

00:03:02,599 --> 00:03:06,170
test methods that test the things you

00:03:04,459 --> 00:03:08,660
care about one thing I'll say about this

00:03:06,170 --> 00:03:12,049
is you definitely want to test your edge

00:03:08,660 --> 00:03:13,819
cases your unit test is only as good as

00:03:12,049 --> 00:03:15,970
the thought you put into it

00:03:13,819 --> 00:03:20,019
so be thinking about what's going to be

00:03:15,970 --> 00:03:23,680
important as you're designing your tests

00:03:20,019 --> 00:03:26,180
finally you may not want to test

00:03:23,680 --> 00:03:28,790
anything that's not public in your class

00:03:26,180 --> 00:03:30,139
and if you want to avoid testing

00:03:28,790 --> 00:03:33,440
anything that's private or protected

00:03:30,139 --> 00:03:34,940
I suggest you refactor your class the

00:03:33,440 --> 00:03:38,120
way that you would do it in this case is

00:03:34,940 --> 00:03:41,060
you might have a new class a health

00:03:38,120 --> 00:03:42,889
class and a currency class and with

00:03:41,060 --> 00:03:45,620
those two new classes they could each

00:03:42,889 --> 00:03:47,599
have a public way of giving the image

00:03:45,620 --> 00:03:50,180
representation that you're trying to

00:03:47,599 --> 00:03:53,180
test and so this way with player stats

00:03:50,180 --> 00:03:55,130
you don't need to touch it all you need

00:03:53,180 --> 00:03:56,780
to do in player stats is test the public

00:03:55,130 --> 00:03:59,329
interface and then when you test each of

00:03:56,780 --> 00:04:01,910
these other classes again you're testing

00:03:59,329 --> 00:04:04,639
their public interface like I said this

00:04:01,910 --> 00:04:06,950
extends to big complicated messes we saw

00:04:04,639 --> 00:04:08,030
earlier in the week that you can make an

00:04:06,950 --> 00:04:09,200
approval test

00:04:08,030 --> 00:04:12,379
Claire had a talk on the app that I

00:04:09,200 --> 00:04:14,540
really enjoyed and I would highly

00:04:12,379 --> 00:04:16,280
recommend this book if you have legacy

00:04:14,540 --> 00:04:18,349
code this tells you how to work

00:04:16,280 --> 00:04:19,489
effectively wick with it tells you how

00:04:18,349 --> 00:04:22,039
to pull it apart without breaking

00:04:19,489 --> 00:04:26,449
everything so you can get unit tests

00:04:22,039 --> 00:04:29,000
where you really need them finally what

00:04:26,449 --> 00:04:30,590
I learned first about really using unit

00:04:29,000 --> 00:04:32,630
testing it was by going through this

00:04:30,590 --> 00:04:35,750
test-driven development book it is not

00:04:32,630 --> 00:04:37,700
in C++ but all the same I hi

00:04:35,750 --> 00:04:39,470
recommended it's a good way to see how

00:04:37,700 --> 00:04:42,530
the test-driven development process

00:04:39,470 --> 00:04:46,480
works and from there you can decide how

00:04:42,530 --> 00:04:51,369
to be a more effective tester thank you

00:04:46,480 --> 00:04:51,369

YouTube URL: https://www.youtube.com/watch?v=dDD_W4A93Pg


