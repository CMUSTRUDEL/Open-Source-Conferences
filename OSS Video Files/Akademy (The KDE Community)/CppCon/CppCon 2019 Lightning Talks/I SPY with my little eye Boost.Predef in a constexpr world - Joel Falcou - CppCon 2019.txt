Title: I SPY with my little eye Boost.Predef in a constexpr world - Joel Falcou - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:08,410 --> 00:00:14,630
thank you well I'm glad I didn't put any

00:00:13,070 --> 00:00:18,680
stupid jokes it's my side because I

00:00:14,630 --> 00:00:25,869
think you just owned again so fine that

00:00:18,680 --> 00:00:28,250
is okay so this isn't talked about

00:00:25,869 --> 00:00:29,349
definitely getting rid of the

00:00:28,250 --> 00:00:34,070
preprocessor

00:00:29,349 --> 00:00:36,079
everywhere is try to I so the simplest

00:00:34,070 --> 00:00:40,640
preprocessor is on his way to be

00:00:36,079 --> 00:00:42,469
thinking of the best latitude so we

00:00:40,640 --> 00:00:44,719
don't have I mean we have modules which

00:00:42,469 --> 00:00:46,399
should get rid of includes right

00:00:44,719 --> 00:00:49,070
we have template functions and variables

00:00:46,399 --> 00:00:51,199
so that means that macros and macro

00:00:49,070 --> 00:00:53,179
function should not be used anymore and

00:00:51,199 --> 00:00:55,640
we have violet templates so that we

00:00:53,179 --> 00:00:57,679
don't have to sacrifice a goat to get

00:00:55,640 --> 00:01:01,219
your meta parameters function to work

00:00:57,679 --> 00:01:01,850
correctly so that's cool except for one

00:01:01,219 --> 00:01:04,070
little thing

00:01:01,850 --> 00:01:06,500
which is actually using if the offense

00:01:04,070 --> 00:01:09,520
defined for platform checks from pirate

00:01:06,500 --> 00:01:12,290
version overloading and so on and so on

00:01:09,520 --> 00:01:14,750
well that's it it would be death okay

00:01:12,290 --> 00:01:18,590
and it's very complicated to get

00:01:14,750 --> 00:01:22,040
something done nicely in post it was for

00:01:18,590 --> 00:01:22,610
17 we still need those things sometimes

00:01:22,040 --> 00:01:25,400
okay

00:01:22,610 --> 00:01:27,020
even as include which helped a lot so

00:01:25,400 --> 00:01:28,940
you would not have in to test for a

00:01:27,020 --> 00:01:33,530
platform or something before including

00:01:28,940 --> 00:01:34,850
something is not enough so well I spend

00:01:33,530 --> 00:01:37,310
quite a lot of time writing temperate

00:01:34,850 --> 00:01:39,590
without programming stuff and I thought

00:01:37,310 --> 00:01:41,570
you know what if Const expert which is

00:01:39,590 --> 00:01:42,020
probably the next thing Caesar sighs

00:01:41,570 --> 00:01:45,530
bread

00:01:42,020 --> 00:01:48,380
so what I wanted to do is have a way to

00:01:45,530 --> 00:01:50,750
not have if death in my if Const expert

00:01:48,380 --> 00:01:55,430
so I made a small library which is

00:01:50,750 --> 00:01:57,590
called spy which is basically a context

00:01:55,430 --> 00:02:00,130
were compatible three def library so you

00:01:57,590 --> 00:02:02,690
can actually write if Const exper around

00:02:00,130 --> 00:02:04,820
the version of your compiler is presence

00:02:02,690 --> 00:02:07,820
of forgiven features of your platform

00:02:04,820 --> 00:02:11,950
and so on so you can have a nicely if

00:02:07,820 --> 00:02:16,480
Const exper based thing also I thought

00:02:11,950 --> 00:02:19,850
so this is how it was supposed to work

00:02:16,480 --> 00:02:22,100
so we have a bunch of objects

00:02:19,850 --> 00:02:25,190
constants per object like spy

00:02:22,100 --> 00:02:27,020
by compiler spy BBC and so on

00:02:25,190 --> 00:02:28,850
and you can basically if context but

00:02:27,020 --> 00:02:32,720
test that I might actually on Linux for

00:02:28,850 --> 00:02:36,590
example or is my compiler GCC 1.2 or B

00:02:32,720 --> 00:02:39,800
or above stuff exists yeah so I said I

00:02:36,590 --> 00:02:42,500
was I fall in love with iPhone 6 / I

00:02:39,800 --> 00:02:44,570
think I also have an NSC relationship

00:02:42,500 --> 00:02:48,050
with user defined either works that well

00:02:44,570 --> 00:02:53,120
whatever so we can do that that's fine

00:02:48,050 --> 00:02:55,390
but can you see why it's not enough okay

00:02:53,120 --> 00:02:58,460
so if Const X / you know you put a

00:02:55,390 --> 00:03:00,470
constable condition you have a branch

00:02:58,460 --> 00:03:02,450
for example so if Const X plus something

00:03:00,470 --> 00:03:04,130
is true this is a call I want to write

00:03:02,450 --> 00:03:08,660
and if not this is a code I want to work

00:03:04,130 --> 00:03:10,340
instead except context / still checks at

00:03:08,660 --> 00:03:12,170
the contents of both branches is

00:03:10,340 --> 00:03:14,570
actually a very piece of code even if it

00:03:12,170 --> 00:03:17,960
doesn't compile it so you cannot write

00:03:14,570 --> 00:03:21,110
something like if Const x / spy OS equal

00:03:17,960 --> 00:03:23,240
equal Windows return win32 something

00:03:21,110 --> 00:03:24,890
something else return piece read

00:03:23,240 --> 00:03:27,560
something something because when you

00:03:24,890 --> 00:03:29,780
compile on Windows well you don't have

00:03:27,560 --> 00:03:32,330
the piece of things and vice versa so I

00:03:29,780 --> 00:03:33,890
want was miffed and so what I decided to

00:03:32,330 --> 00:03:37,520
do is to check what happens we see pass

00:03:33,890 --> 00:03:39,260
was 20 concepts that adds a bit so you

00:03:37,520 --> 00:03:42,320
can actually write that so you can

00:03:39,260 --> 00:03:44,570
requires your function to be true if

00:03:42,320 --> 00:03:48,770
onlys yeah you are actually combining on

00:03:44,570 --> 00:03:52,250
10 or on GCC and so you can shake you

00:03:48,770 --> 00:03:55,010
know you can select what's going on but

00:03:52,250 --> 00:03:57,470
what concept fine but what's the actual

00:03:55,010 --> 00:04:00,020
caveat you still need to have a template

00:03:57,470 --> 00:04:02,660
function because if the so call is

00:04:00,020 --> 00:04:05,690
actually a natural call to an ultimate

00:04:02,660 --> 00:04:07,160
function as the same issue still apply

00:04:05,690 --> 00:04:12,920
you are you are stuck with something

00:04:07,160 --> 00:04:15,620
that should not compile those so I have

00:04:12,920 --> 00:04:16,960
a question and more comment and a

00:04:15,620 --> 00:04:19,850
question

00:04:16,960 --> 00:04:22,430
should we think about changing the scene

00:04:19,850 --> 00:04:25,250
no so semantics of if Const exposure

00:04:22,430 --> 00:04:27,800
should be flexible steel check see also

00:04:25,250 --> 00:04:31,340
when she won't compile and if somebody

00:04:27,800 --> 00:04:32,690
actually has a reason for that well come

00:04:31,340 --> 00:04:35,030
over me I will pay you a coffee and we

00:04:32,690 --> 00:04:36,020
discuss about that because it could

00:04:35,030 --> 00:04:39,530
actually get rid of

00:04:36,020 --> 00:04:41,960
this even if this face is a fool you

00:04:39,530 --> 00:04:44,479
still have issues with that you can I

00:04:41,960 --> 00:04:47,210
mean you can play with that I'm trying

00:04:44,479 --> 00:04:49,270
to add more stuff on that like detecting

00:04:47,210 --> 00:04:52,250
information about my mother and so on

00:04:49,270 --> 00:04:53,840
and the questions actually be actually

00:04:52,250 --> 00:04:55,759
expanded to run time by having your

00:04:53,840 --> 00:05:00,800
natural potable wrapper for cpuid and

00:04:55,759 --> 00:05:02,449
similar function and maybe all my you

00:05:00,800 --> 00:05:04,039
know world could actually be solved by

00:05:02,449 --> 00:05:06,349
having distended eyes so the compiler

00:05:04,039 --> 00:05:07,490
can actually do its job so whatever so

00:05:06,349 --> 00:05:10,370
you can play with the thing

00:05:07,490 --> 00:05:12,050
it's rather rude and true but well it

00:05:10,370 --> 00:05:14,330
works so tell me if it actually solve

00:05:12,050 --> 00:05:14,870
issues and if not I can well achieve it

00:05:14,330 --> 00:05:17,890
or something

00:05:14,870 --> 00:05:22,560
same for attention

00:05:17,890 --> 00:05:22,560

YouTube URL: https://www.youtube.com/watch?v=t406o2EhG-A


