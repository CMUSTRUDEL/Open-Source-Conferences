Title: The Science of Unit Tests - Dave Steffen - CppCon 2020
Publication date: 2020-10-03
Playlist: CppCon 2020 Day 4
Description: 
	https://cppcon.org/
https://github.com/CppCon/CppCon2020/blob/main/Presentations/scientific_unit_testing/scientific_unit_testing__dave_steffen__cppcon_2020.pdf
---
Unit testing has emerged as one of the foundations of modern software development. There are plenty of good talks on how to write tests, full of good advice, guidelines, and procedures: "Test using only the public interface", "Use Test-Driven Development", "Write Behavior-Driven Tests".

But what are the fundamentals that lie beneath all the good advice? What principles should guide our testing?

This talk will start by reviewing the basics of good testing, and then explore the close relationship between unit testing and the scientific method. Unit tests are, in some sense, small scientific instruments to detect phenomena in our source code. When seen in this light, we can start to see *why* the good advice we've been getting is good, and how an empirical approach can help guide decisions about what, when, and how to test our code.

---
Dave Steffen completed his Ph.D. in theoretical physics at Colorado State University in 2003, and promptly changed course for a career in software engineering. He has worked primarily in defence and aerospace, and is currently a technical lead at SciTec Inc.'s Boulder office. For reasons unknown, he has turned out to be the expert, champion, and occasional street-corner evangelist for unit testing at most of the companies he has ever worked at.

---
Streamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:08,800 --> 00:00:13,040
all right

00:00:10,960 --> 00:00:14,960
thank you for coming uh welcome to

00:00:13,040 --> 00:00:17,520
scientific unit testing

00:00:14,960 --> 00:00:19,199
i'm dave steffen uh tech lead at scitec

00:00:17,520 --> 00:00:20,160
we are a small defense and aerospace

00:00:19,199 --> 00:00:22,480
contractor

00:00:20,160 --> 00:00:23,600
i work out of the boulder uh colorado

00:00:22,480 --> 00:00:26,080
office which is about

00:00:23,600 --> 00:00:27,119
an hour's drive north and west of where

00:00:26,080 --> 00:00:28,880
the conference was

00:00:27,119 --> 00:00:31,279
last year and where we hope it will be

00:00:28,880 --> 00:00:35,040
again next year

00:00:31,279 --> 00:00:36,559
the phd is in physics which is relevant

00:00:35,040 --> 00:00:39,280
uh because what i'd like to talk to you

00:00:36,559 --> 00:00:41,360
about is the close relationship

00:00:39,280 --> 00:00:42,800
between unit testing and experimental

00:00:41,360 --> 00:00:44,719
science

00:00:42,800 --> 00:00:46,239
and that's kind of an odd topic uh so

00:00:44,719 --> 00:00:47,920
we'll start out with some ideas that'll

00:00:46,239 --> 00:00:50,640
lead me down this rabbit hole

00:00:47,920 --> 00:00:52,399
um so i'll try and take questions as we

00:00:50,640 --> 00:00:53,840
go through but we probably won't have a

00:00:52,399 --> 00:00:57,120
lot of time

00:00:53,840 --> 00:00:58,239
um so i'll try and take questions at the

00:00:57,120 --> 00:01:01,359
end and i think

00:00:58,239 --> 00:01:03,680
uh we put up in the chat where we'll be

00:01:01,359 --> 00:01:06,880
afterwards uh so people can come find me

00:01:03,680 --> 00:01:10,479
and ask questions all right so

00:01:06,880 --> 00:01:12,479
um right first of all i'm a physicist

00:01:10,479 --> 00:01:14,320
uh i have to quote newton i'm not sure

00:01:12,479 --> 00:01:15,439
i've been standing on the shoulders of

00:01:14,320 --> 00:01:17,759
giants for this

00:01:15,439 --> 00:01:19,200
sitting on their shoulders maybe uh

00:01:17,759 --> 00:01:20,080
lying in a hammock that they're carrying

00:01:19,200 --> 00:01:21,680
around

00:01:20,080 --> 00:01:23,040
uh but my job is much easier because

00:01:21,680 --> 00:01:25,040
you've already heard a whole lot about

00:01:23,040 --> 00:01:26,720
unit tests this week

00:01:25,040 --> 00:01:28,080
and you've got a lot of good advice okay

00:01:26,720 --> 00:01:29,840
and if you look through previous cpp

00:01:28,080 --> 00:01:31,200
contacts and other conference talks

00:01:29,840 --> 00:01:33,200
there's a whole lot of good advice out

00:01:31,200 --> 00:01:35,600
there earlier this week

00:01:33,200 --> 00:01:36,640
you got test driven development from

00:01:35,600 --> 00:01:39,920
phil nash

00:01:36,640 --> 00:01:40,240
claire talked about acceptance testing

00:01:39,920 --> 00:01:43,280
for

00:01:40,240 --> 00:01:46,320
gui uh ben sacks did a

00:01:43,280 --> 00:01:49,520
a kind of getting started beginners

00:01:46,320 --> 00:01:51,759
uh uh back to basics talk yesterday um

00:01:49,520 --> 00:01:53,680
also let me call out because i'll refer

00:01:51,759 --> 00:01:55,840
back to this one of my favorite talks

00:01:53,680 --> 00:01:57,680
titus winters and hiram wright uh all

00:01:55,840 --> 00:01:58,799
your tests are terrible this is cppcon

00:01:57,680 --> 00:02:00,479
five years ago

00:01:58,799 --> 00:02:03,360
uh it's one of my favorites i make all

00:02:00,479 --> 00:02:06,240
my uh my my team members watch that

00:02:03,360 --> 00:02:07,200
and also i liked fedor pika's uh his

00:02:06,240 --> 00:02:09,759
back to basics talk

00:02:07,200 --> 00:02:11,280
last year very information dense if

00:02:09,759 --> 00:02:13,280
you're new to unit testing bite that one

00:02:11,280 --> 00:02:15,760
off in small pieces okay

00:02:13,280 --> 00:02:16,959
uh and also uh kevin henny uh gave these

00:02:15,760 --> 00:02:18,959
two talks

00:02:16,959 --> 00:02:20,800
which were my introduction to uh

00:02:18,959 --> 00:02:22,480
behavior driven testing i was late to

00:02:20,800 --> 00:02:23,840
that party um

00:02:22,480 --> 00:02:25,360
so these are a couple of talks and you

00:02:23,840 --> 00:02:27,520
can look all of these talks are up on

00:02:25,360 --> 00:02:29,520
youtube except the ones from cppcon

00:02:27,520 --> 00:02:32,400
which will be up on youtube in a month

00:02:29,520 --> 00:02:33,920
or so um

00:02:32,400 --> 00:02:36,000
and there's all kinds of other places

00:02:33,920 --> 00:02:38,319
there's talk after talk after

00:02:36,000 --> 00:02:39,360
talk up on youtube about unit testing

00:02:38,319 --> 00:02:41,360
blog posts

00:02:39,360 --> 00:02:42,720
books there's all kinds of great stuff

00:02:41,360 --> 00:02:46,400
out there

00:02:42,720 --> 00:02:47,760
so uh just kind of get started

00:02:46,400 --> 00:02:49,040
there are a lot of properties of unit

00:02:47,760 --> 00:02:50,480
tests different people have different

00:02:49,040 --> 00:02:52,640
lists this

00:02:50,480 --> 00:02:53,920
list was more or less uh i think

00:02:52,640 --> 00:02:56,319
proposed by uh

00:02:53,920 --> 00:02:56,959
titus in hyrum five years ago ben talked

00:02:56,319 --> 00:03:00,159
about this

00:02:56,959 --> 00:03:01,760
uh quite a bit yesterday um what you'd

00:03:00,159 --> 00:03:02,840
like in your unit test correctness and

00:03:01,760 --> 00:03:05,519
completeness

00:03:02,840 --> 00:03:07,280
readability unit tests typically don't

00:03:05,519 --> 00:03:08,400
get tested in and of themselves so how

00:03:07,280 --> 00:03:10,480
do you know they're right

00:03:08,400 --> 00:03:12,080
you declare them right by inspection

00:03:10,480 --> 00:03:13,680
which means they have to be inspectable

00:03:12,080 --> 00:03:15,280
demonstrability you want them to be able

00:03:13,680 --> 00:03:17,440
to demonstrate the proper use

00:03:15,280 --> 00:03:18,400
of your code resilience you don't want

00:03:17,440 --> 00:03:20,959
them to break under

00:03:18,400 --> 00:03:21,380
maintenance all these good things okay

00:03:20,959 --> 00:03:22,640
um

00:03:21,380 --> 00:03:24,560
[Music]

00:03:22,640 --> 00:03:26,159
but if you go look anywhere else there's

00:03:24,560 --> 00:03:27,760
all kinds of other good advice you want

00:03:26,159 --> 00:03:29,200
your tests to be easy to run

00:03:27,760 --> 00:03:30,640
you want them to be faster run so you

00:03:29,200 --> 00:03:31,680
don't slow down your teammates in your

00:03:30,640 --> 00:03:33,120
development cycle

00:03:31,680 --> 00:03:34,879
you should use test driven development

00:03:33,120 --> 00:03:36,239
go see phil nash's talk earlier this

00:03:34,879 --> 00:03:37,519
week and he's given a bunch of other

00:03:36,239 --> 00:03:39,280
talks on the subject

00:03:37,519 --> 00:03:41,040
you want your test to be deterministic

00:03:39,280 --> 00:03:42,640
okay you may have code coverage or

00:03:41,040 --> 00:03:44,480
regulatory requirements depending on

00:03:42,640 --> 00:03:47,200
what your industry is okay

00:03:44,480 --> 00:03:49,440
um and uh there's a couple of these that

00:03:47,200 --> 00:03:50,959
i want to drill into just kind of see

00:03:49,440 --> 00:03:52,640
if we can find what's sitting behind a

00:03:50,959 --> 00:03:54,000
lot of this good advice but before we do

00:03:52,640 --> 00:03:55,680
anything else

00:03:54,000 --> 00:03:58,560
the most important thing is rule zero

00:03:55,680 --> 00:04:01,120
existence your tests have to exist

00:03:58,560 --> 00:04:02,640
all right all of this advice that you've

00:04:01,120 --> 00:04:03,840
been hearing can be very intimidating

00:04:02,640 --> 00:04:05,120
especially if you haven't done unit

00:04:03,840 --> 00:04:06,720
testing before

00:04:05,120 --> 00:04:08,560
uh and you can never get all of it okay

00:04:06,720 --> 00:04:10,640
you can never meet all of these things

00:04:08,560 --> 00:04:12,720
you can probably mostly meet most of

00:04:10,640 --> 00:04:14,400
them but even if you can't meet

00:04:12,720 --> 00:04:16,880
very many of them write tests anyway

00:04:14,400 --> 00:04:18,400
okay bad tests are almost always a

00:04:16,880 --> 00:04:18,639
thousand percent better than no test at

00:04:18,400 --> 00:04:21,440
all

00:04:18,639 --> 00:04:23,520
i've seen negative value tests once in

00:04:21,440 --> 00:04:24,160
an extremely dysfunctional environment

00:04:23,520 --> 00:04:27,280
okay

00:04:24,160 --> 00:04:30,560
so write your tests all right

00:04:27,280 --> 00:04:32,960
um let's jump right in uh

00:04:30,560 --> 00:04:34,400
the most common advice for testing

00:04:32,960 --> 00:04:35,280
object-oriented code is just testing a

00:04:34,400 --> 00:04:37,759
class

00:04:35,280 --> 00:04:39,600
uh is to do uh so-called uh black box

00:04:37,759 --> 00:04:40,320
testing where you use only the public

00:04:39,600 --> 00:04:42,560
interface

00:04:40,320 --> 00:04:43,840
black box uh because you're not looking

00:04:42,560 --> 00:04:45,280
in to see how all the gears and the

00:04:43,840 --> 00:04:46,800
wires are laid out all right you're not

00:04:45,280 --> 00:04:49,440
looking at the implementation

00:04:46,800 --> 00:04:50,400
you're just looking at the external

00:04:49,440 --> 00:04:51,919
behavior of the thing

00:04:50,400 --> 00:04:53,199
and there's all kinds of reasons for

00:04:51,919 --> 00:04:55,120
this there's all kinds of talks and

00:04:53,199 --> 00:04:56,880
discussion about why you should do this

00:04:55,120 --> 00:04:58,479
it forces better design because you

00:04:56,880 --> 00:05:00,080
wouldn't have designed it that way if

00:04:58,479 --> 00:05:01,840
you've known you had to test it

00:05:00,080 --> 00:05:03,360
uh you avoid tight coupling to your

00:05:01,840 --> 00:05:05,280
implementation so you can

00:05:03,360 --> 00:05:08,080
you can refactor your code but you don't

00:05:05,280 --> 00:05:10,080
have to change your unit tests

00:05:08,080 --> 00:05:11,759
so fine so this is the good advice let's

00:05:10,080 --> 00:05:13,520
actually try and go do this and see how

00:05:11,759 --> 00:05:16,080
much trouble we can get into

00:05:13,520 --> 00:05:17,840
now this is an example uh i didn't so

00:05:16,080 --> 00:05:20,080
much borrow this from kevlin's talk

00:05:17,840 --> 00:05:20,880
uh this is kind of wholesale theft uh

00:05:20,080 --> 00:05:23,120
kevin i

00:05:20,880 --> 00:05:24,880
think i owe you lunch um so we have a

00:05:23,120 --> 00:05:26,560
binary cup class it's either empty or

00:05:24,880 --> 00:05:27,520
full the default constructor makes an

00:05:26,560 --> 00:05:29,199
empty cup

00:05:27,520 --> 00:05:31,199
there's an is empty member function so

00:05:29,199 --> 00:05:32,320
you can decide you can tell if it's

00:05:31,199 --> 00:05:34,000
after you're full

00:05:32,320 --> 00:05:35,360
uh filling an empty cup folds it

00:05:34,000 --> 00:05:37,440
drinking from a full cup

00:05:35,360 --> 00:05:38,960
uh empties it and you've already written

00:05:37,440 --> 00:05:40,720
the implementation for this in your head

00:05:38,960 --> 00:05:41,520
everyone knows exactly what's inside

00:05:40,720 --> 00:05:43,759
this

00:05:41,520 --> 00:05:46,400
class right it's trivial you couldn't

00:05:43,759 --> 00:05:50,320
think of a simpler class to try to test

00:05:46,400 --> 00:05:52,080
all right so let's actually go try and

00:05:50,320 --> 00:05:53,360
do black box testing on this like

00:05:52,080 --> 00:05:55,120
everyone tells us to

00:05:53,360 --> 00:05:57,840
now the old approach which i used to do

00:05:55,120 --> 00:06:00,639
before seeing kevin's talks

00:05:57,840 --> 00:06:01,919
was that for every member function i

00:06:00,639 --> 00:06:03,680
would have a test case

00:06:01,919 --> 00:06:05,120
right or maybe a couple if you want to

00:06:03,680 --> 00:06:06,479
separate out the error

00:06:05,120 --> 00:06:08,400
cases or you know something like that

00:06:06,479 --> 00:06:09,840
but generally you've got a default

00:06:08,400 --> 00:06:11,039
constructor so you have a test case for

00:06:09,840 --> 00:06:12,400
the default constructor

00:06:11,039 --> 00:06:13,680
you've got an empty member function

00:06:12,400 --> 00:06:14,160
you've got a test case for this empty

00:06:13,680 --> 00:06:16,160
all right

00:06:14,160 --> 00:06:17,680
now this is actually not a good idea and

00:06:16,160 --> 00:06:18,639
we'll find out why but this is the way i

00:06:17,680 --> 00:06:20,880
used to do things

00:06:18,639 --> 00:06:22,400
okay but let's actually go try and do

00:06:20,880 --> 00:06:24,960
this all right here we go

00:06:22,400 --> 00:06:26,560
so here's our test case for the default

00:06:24,960 --> 00:06:28,400
constructor what do we do

00:06:26,560 --> 00:06:30,240
we make a cup with the default

00:06:28,400 --> 00:06:31,039
constructor and then we use the is empty

00:06:30,240 --> 00:06:34,000
member function

00:06:31,039 --> 00:06:34,639
to see if it's empty great it passes

00:06:34,000 --> 00:06:37,440
we're done

00:06:34,639 --> 00:06:38,960
now we go on to test the is empty member

00:06:37,440 --> 00:06:41,199
function

00:06:38,960 --> 00:06:43,120
we make a cup which is supposed to be

00:06:41,199 --> 00:06:45,120
empty and then we call is empty and we

00:06:43,120 --> 00:06:46,720
say wait a minute

00:06:45,120 --> 00:06:49,840
there's something wrong here we just

00:06:46,720 --> 00:06:49,840
wrote the same code twice

00:06:49,919 --> 00:06:55,120
why did we write the same code twice and

00:06:52,639 --> 00:06:57,199
the answer

00:06:55,120 --> 00:06:58,400
is that you need each member function to

00:06:57,199 --> 00:07:00,639
test the other one

00:06:58,400 --> 00:07:02,639
okay you can't test either of these

00:07:00,639 --> 00:07:04,240
member functions in the absence of the

00:07:02,639 --> 00:07:05,599
other one because all you can do is use

00:07:04,240 --> 00:07:08,639
the public interface all right

00:07:05,599 --> 00:07:10,560
i call this the black box conundrum uh

00:07:08,639 --> 00:07:12,240
fundamentally if you test via the public

00:07:10,560 --> 00:07:14,319
interface you have a circular logic or

00:07:12,240 --> 00:07:15,680
at least a circular trust problem right

00:07:14,319 --> 00:07:17,520
in order to test this part of the

00:07:15,680 --> 00:07:19,039
interface you have to use this part of

00:07:17,520 --> 00:07:20,080
the interface you're basically assuming

00:07:19,039 --> 00:07:21,599
it already works

00:07:20,080 --> 00:07:23,360
at some point you'd like to trust to

00:07:21,599 --> 00:07:24,160
test this part of the interface but you

00:07:23,360 --> 00:07:26,000
probably

00:07:24,160 --> 00:07:28,080
use this part of the interface to test

00:07:26,000 --> 00:07:28,560
that so at no point do you ever really

00:07:28,080 --> 00:07:30,400
have an

00:07:28,560 --> 00:07:32,240
independent verification that any given

00:07:30,400 --> 00:07:34,160
part of this thing works

00:07:32,240 --> 00:07:35,919
okay for all you know there's just a

00:07:34,160 --> 00:07:37,840
bunch of bugs in it that happen

00:07:35,919 --> 00:07:39,039
to hide all the other bones right and if

00:07:37,840 --> 00:07:40,560
you've been around for long enough

00:07:39,039 --> 00:07:41,840
you've seen this kind of thing

00:07:40,560 --> 00:07:43,440
all right now there are many common

00:07:41,840 --> 00:07:44,800
solutions this isn't a new problem

00:07:43,440 --> 00:07:46,160
people have known about this for a long

00:07:44,800 --> 00:07:47,599
time and one of the most common is that

00:07:46,160 --> 00:07:49,280
people just ignore it

00:07:47,599 --> 00:07:50,800
and the joke is that actually that's not

00:07:49,280 --> 00:07:53,280
such a bad idea

00:07:50,800 --> 00:07:54,800
um you're supposed to test this way

00:07:53,280 --> 00:07:55,520
people go test this way they get on with

00:07:54,800 --> 00:07:57,360
their lives

00:07:55,520 --> 00:07:58,639
fine now there's another way that people

00:07:57,360 --> 00:08:00,160
try and handle this which is where you

00:07:58,639 --> 00:08:01,039
declare one member function correct by

00:08:00,160 --> 00:08:02,240
inspection

00:08:01,039 --> 00:08:03,680
and then you start from there and then

00:08:02,240 --> 00:08:04,879
you test everything in terms of that and

00:08:03,680 --> 00:08:08,560
then you build up

00:08:04,879 --> 00:08:10,479
a non-cyclic trust graph or something

00:08:08,560 --> 00:08:12,160
um for example is that the member

00:08:10,479 --> 00:08:13,440
function you know it's just a one-liner

00:08:12,160 --> 00:08:15,360
it's a simple getter

00:08:13,440 --> 00:08:17,520
that can't possibly go wrong so you look

00:08:15,360 --> 00:08:18,800
at it and fine

00:08:17,520 --> 00:08:20,000
at least philosophically there's a

00:08:18,800 --> 00:08:21,440
problem here because you have now

00:08:20,000 --> 00:08:23,120
introduced

00:08:21,440 --> 00:08:24,960
a manual step into what's supposed to be

00:08:23,120 --> 00:08:28,319
an automated system but

00:08:24,960 --> 00:08:29,759
okay um and a lot of people do this

00:08:28,319 --> 00:08:30,560
honestly they they look at this and they

00:08:29,759 --> 00:08:33,360
say well this is

00:08:30,560 --> 00:08:34,880
dumb right look i know perfectly well

00:08:33,360 --> 00:08:36,399
what i'm supposed to be testing

00:08:34,880 --> 00:08:38,159
okay i know perfectly well what i'm

00:08:36,399 --> 00:08:39,440
supposed to be testing i should just be

00:08:38,159 --> 00:08:40,640
able to reach in here and check the

00:08:39,440 --> 00:08:41,839
internal state to make sure that the

00:08:40,640 --> 00:08:42,159
internal state is what it's supposed to

00:08:41,839 --> 00:08:44,240
be

00:08:42,159 --> 00:08:46,000
then all these problems go away okay

00:08:44,240 --> 00:08:47,519
this is basically white box testing we

00:08:46,000 --> 00:08:48,959
somehow open up the class

00:08:47,519 --> 00:08:50,560
it should be clear box because you can

00:08:48,959 --> 00:08:51,920
see inside it but okay

00:08:50,560 --> 00:08:53,360
so you're looking inside the class at

00:08:51,920 --> 00:08:54,640
the implementation and all where you

00:08:53,360 --> 00:08:56,080
know the gears and the wheels and the

00:08:54,640 --> 00:08:58,160
belts and the wires

00:08:56,080 --> 00:08:59,120
to see what it's doing and making sure

00:08:58,160 --> 00:09:01,360
that that's correct

00:08:59,120 --> 00:09:02,880
okay um now you're not supposed to do

00:09:01,360 --> 00:09:03,760
this you're supposed to do black box

00:09:02,880 --> 00:09:05,760
testing

00:09:03,760 --> 00:09:07,440
but nevertheless a lot of people like to

00:09:05,760 --> 00:09:08,880
go do this now what we've got on screen

00:09:07,440 --> 00:09:11,600
here of course won't compile

00:09:08,880 --> 00:09:12,240
because m is empty is a private member

00:09:11,600 --> 00:09:13,760
function

00:09:12,240 --> 00:09:15,680
but that's no problem right everyone

00:09:13,760 --> 00:09:17,519
just does this right

00:09:15,680 --> 00:09:18,640
you find private public and this

00:09:17,519 --> 00:09:19,760
compiles and you can write all your

00:09:18,640 --> 00:09:22,000
tests

00:09:19,760 --> 00:09:24,880
please don't all right like really

00:09:22,000 --> 00:09:26,560
please don't do this

00:09:24,880 --> 00:09:28,080
this is formally undefined behavior

00:09:26,560 --> 00:09:29,680
there's actually a statement

00:09:28,080 --> 00:09:31,279
i think there's a sentence in the

00:09:29,680 --> 00:09:34,160
standard that says

00:09:31,279 --> 00:09:35,120
this is undefined behavior if your

00:09:34,160 --> 00:09:36,800
testing scheme

00:09:35,120 --> 00:09:38,560
involves invoking undefined behavior on

00:09:36,800 --> 00:09:42,160
the first line i think we have problems

00:09:38,560 --> 00:09:44,240
okay um but i do have to say about this

00:09:42,160 --> 00:09:46,080
i hate to say it that it works uh at

00:09:44,240 --> 00:09:48,000
least on a lot of compilers gcc i'm

00:09:46,080 --> 00:09:49,680
pretty sure it does i think clang

00:09:48,000 --> 00:09:51,200
for obscure reasons but this actually

00:09:49,680 --> 00:09:53,440
does work reliably

00:09:51,200 --> 00:09:54,880
and it's cheap right you can get right

00:09:53,440 --> 00:09:56,320
in write your test you don't have to

00:09:54,880 --> 00:09:57,920
change the original code you can just

00:09:56,320 --> 00:10:00,080
get on with your life

00:09:57,920 --> 00:10:01,600
but don't do this if you have to do

00:10:00,080 --> 00:10:02,959
white box testing and there are times

00:10:01,600 --> 00:10:04,560
when this is your only good option

00:10:02,959 --> 00:10:06,000
remember rule zero you have to write

00:10:04,560 --> 00:10:08,000
tests okay

00:10:06,000 --> 00:10:09,519
you break and caption encapsulation

00:10:08,000 --> 00:10:10,880
using a friend class so

00:10:09,519 --> 00:10:13,200
over here i don't know if you can

00:10:10,880 --> 00:10:16,240
actually see my cursor

00:10:13,200 --> 00:10:18,640
we had a friend declaration

00:10:16,240 --> 00:10:20,640
and then what we do is you define the

00:10:18,640 --> 00:10:22,560
friend the cup tester whatever it is

00:10:20,640 --> 00:10:24,240
you define that in your test suite and

00:10:22,560 --> 00:10:24,720
then because it's a friend you can get

00:10:24,240 --> 00:10:26,240
in and

00:10:24,720 --> 00:10:28,480
fiddle around with the guts of your cup

00:10:26,240 --> 00:10:29,680
class now you can do white box testing

00:10:28,480 --> 00:10:31,600
this is better than the other way

00:10:29,680 --> 00:10:33,200
because there's no undefined behavior

00:10:31,600 --> 00:10:35,360
i suppose you have to change your source

00:10:33,200 --> 00:10:38,160
code you had to add that friend

00:10:35,360 --> 00:10:39,440
class or friends struct but it's

00:10:38,160 --> 00:10:41,040
probably not important

00:10:39,440 --> 00:10:42,880
uh i don't think that changes things in

00:10:41,040 --> 00:10:44,880
any way that matters people debate this

00:10:42,880 --> 00:10:46,399
but never nevertheless i mean however

00:10:44,880 --> 00:10:47,920
you do it all right

00:10:46,399 --> 00:10:49,760
this is the better way to do white box

00:10:47,920 --> 00:10:50,480
testing but we'd still prefer not to do

00:10:49,760 --> 00:10:52,079
this

00:10:50,480 --> 00:10:54,399
but again realistically there are times

00:10:52,079 --> 00:10:57,680
when this is your only good option

00:10:54,399 --> 00:10:58,959
um example you got legacy code and

00:10:57,680 --> 00:11:00,880
the code is written in such a way that

00:10:58,959 --> 00:11:02,000
you can't write unit tests for it you'd

00:11:00,880 --> 00:11:03,360
like to refactor it

00:11:02,000 --> 00:11:04,880
so you can write unit tests but you

00:11:03,360 --> 00:11:05,760
can't refactor it until you've got unit

00:11:04,880 --> 00:11:07,200
tests

00:11:05,760 --> 00:11:09,040
so how do you break the gordian knot

00:11:07,200 --> 00:11:11,040
when you start with white box testing

00:11:09,040 --> 00:11:12,839
you get some tests around it then you

00:11:11,040 --> 00:11:14,959
can refactor it hopefully you can fix it

00:11:12,839 --> 00:11:16,800
later but you don't want to do this if

00:11:14,959 --> 00:11:18,399
you don't have to and it seems odd that

00:11:16,800 --> 00:11:19,839
we are incapable of

00:11:18,399 --> 00:11:21,680
actually following everyone's good

00:11:19,839 --> 00:11:23,920
advice to say not do

00:11:21,680 --> 00:11:24,800
not to do this what are we doing wrong

00:11:23,920 --> 00:11:26,240
okay why

00:11:24,800 --> 00:11:28,240
didn't this work when we tried to do it

00:11:26,240 --> 00:11:29,839
before now the answer is this thing

00:11:28,240 --> 00:11:32,320
called behavior driven development

00:11:29,839 --> 00:11:33,600
okay the idea is that we don't do this

00:11:32,320 --> 00:11:36,880
we don't have one

00:11:33,600 --> 00:11:38,800
test per member function all right

00:11:36,880 --> 00:11:40,560
what we do is we test the class as a

00:11:38,800 --> 00:11:41,360
whole and we have a unit test for each

00:11:40,560 --> 00:11:43,519
behavior

00:11:41,360 --> 00:11:44,800
so the behavior of the whole cup is that

00:11:43,519 --> 00:11:46,320
a new cup is empty

00:11:44,800 --> 00:11:47,760
and an empty cup can be filled and

00:11:46,320 --> 00:11:49,120
filling an empty cup makes it full and

00:11:47,760 --> 00:11:51,040
drinking from a full cup makes it empty

00:11:49,120 --> 00:11:53,200
and etcetera etcetera etcetera right

00:11:51,040 --> 00:11:54,959
these are what you're trying to test

00:11:53,200 --> 00:11:56,000
okay and if nothing else you'll notice

00:11:54,959 --> 00:11:59,680
that the names are now much

00:11:56,000 --> 00:12:01,120
much better because your unit test names

00:11:59,680 --> 00:12:02,800
now read like the design spec and i've

00:12:01,120 --> 00:12:05,200
seen that be

00:12:02,800 --> 00:12:06,160
very very useful in real situations all

00:12:05,200 --> 00:12:08,959
right

00:12:06,160 --> 00:12:10,639
so let's actually go do that and see how

00:12:08,959 --> 00:12:12,959
much trouble we can get into

00:12:10,639 --> 00:12:13,760
so here's our test case for a new cup is

00:12:12,959 --> 00:12:15,120
empty great

00:12:13,760 --> 00:12:17,519
we make a cup with the default

00:12:15,120 --> 00:12:19,760
constructor and we require it's empty

00:12:17,519 --> 00:12:21,600
okay that's what we're supposed to do

00:12:19,760 --> 00:12:23,600
great and we go on to

00:12:21,600 --> 00:12:25,040
an empty cup can be filled and now let's

00:12:23,600 --> 00:12:29,680
you say wait a minute

00:12:25,040 --> 00:12:32,880
back up didn't we just do this

00:12:29,680 --> 00:12:34,480
i think we had this exact code two or

00:12:32,880 --> 00:12:35,600
three slides back we actually wrote it

00:12:34,480 --> 00:12:37,200
twice

00:12:35,600 --> 00:12:39,760
and we didn't like it either time back

00:12:37,200 --> 00:12:43,760
then why is it okay now

00:12:39,760 --> 00:12:46,480
right all we've done is change the name

00:12:43,760 --> 00:12:48,800
all right why does behavior-driven

00:12:46,480 --> 00:12:50,320
testing solve this black box conundrum

00:12:48,800 --> 00:12:53,279
all right don't we still have that

00:12:50,320 --> 00:12:55,600
circular truss problem the answer

00:12:53,279 --> 00:12:56,800
is that we are testing the behavior not

00:12:55,600 --> 00:12:59,440
the implementation

00:12:56,800 --> 00:13:00,720
okay we're testing the consistency of

00:12:59,440 --> 00:13:01,680
the interface

00:13:00,720 --> 00:13:04,320
not the correctness of the

00:13:01,680 --> 00:13:05,920
implementation and i had to repeat this

00:13:04,320 --> 00:13:06,959
to myself for a day or two before it

00:13:05,920 --> 00:13:09,279
really sank in

00:13:06,959 --> 00:13:09,279
okay

00:13:11,600 --> 00:13:15,040
we're testing only the behavior that is

00:13:13,600 --> 00:13:16,720
visible from outside

00:13:15,040 --> 00:13:18,079
so look if the constructor is wrong

00:13:16,720 --> 00:13:19,920
because it gets the logic backwards it

00:13:18,079 --> 00:13:21,440
gets the sense of the internal movie and

00:13:19,920 --> 00:13:23,279
backwards right makes a full cup

00:13:21,440 --> 00:13:24,480
but his empty is also wrong and flips

00:13:23,279 --> 00:13:26,320
the logic and

00:13:24,480 --> 00:13:28,240
phil flips the logic and drake flips the

00:13:26,320 --> 00:13:30,959
logic and every other member function

00:13:28,240 --> 00:13:32,320
flips the logic in such a way that from

00:13:30,959 --> 00:13:34,880
the outside it actually looks like it

00:13:32,320 --> 00:13:38,639
does what it's supposed to do

00:13:34,880 --> 00:13:41,360
it's correct right even if internally

00:13:38,639 --> 00:13:43,519
it's just a flaming pile of bugs and

00:13:41,360 --> 00:13:45,040
it's incomprehensible and whatever

00:13:43,519 --> 00:13:46,480
you have to declare it correct like on

00:13:45,040 --> 00:13:47,440
what basis are you going to say it's

00:13:46,480 --> 00:13:50,560
wrong

00:13:47,440 --> 00:13:52,480
okay black box testing isn't asking

00:13:50,560 --> 00:13:54,240
whether you like the implementation

00:13:52,480 --> 00:13:56,880
that's what your code review process is

00:13:54,240 --> 00:13:57,360
for testing is just to see if it's

00:13:56,880 --> 00:14:00,160
correct

00:13:57,360 --> 00:14:01,680
and if everything it does is correct i

00:14:00,160 --> 00:14:02,560
think you have to declare it correct

00:14:01,680 --> 00:14:04,800
okay

00:14:02,560 --> 00:14:06,720
a bug that cannot under any conditions

00:14:04,800 --> 00:14:09,279
be observed

00:14:06,720 --> 00:14:11,199
isn't really a bug okay and now at this

00:14:09,279 --> 00:14:11,920
point the physicist gets interested and

00:14:11,199 --> 00:14:13,360
this is where

00:14:11,920 --> 00:14:15,279
the hole gets deeper and you've got like

00:14:13,360 --> 00:14:17,839
red pillar blue pill things going on

00:14:15,279 --> 00:14:17,839
okay

00:14:19,040 --> 00:14:22,480
if a bug that cannot be observed under

00:14:20,480 --> 00:14:25,600
any conditions is not a bug

00:14:22,480 --> 00:14:27,040
a physicist will remember

00:14:25,600 --> 00:14:28,560
that about a hundred years ago a little

00:14:27,040 --> 00:14:29,839
bit more we had a problem in physics

00:14:28,560 --> 00:14:31,040
you'll remember there was this guy named

00:14:29,839 --> 00:14:32,560
maxwell and he comes up with the

00:14:31,040 --> 00:14:33,600
equations that unify electricity and

00:14:32,560 --> 00:14:35,279
magnetism

00:14:33,600 --> 00:14:37,360
right and out of that comes the fact

00:14:35,279 --> 00:14:38,480
that electromagnetic radiation is a wave

00:14:37,360 --> 00:14:40,399
and that's light

00:14:38,480 --> 00:14:42,240
hey this is fantastic we now understand

00:14:40,399 --> 00:14:42,959
all these things but there's a problem

00:14:42,240 --> 00:14:44,880
all right

00:14:42,959 --> 00:14:46,320
waves in water have a speed with respect

00:14:44,880 --> 00:14:48,880
to the water sound

00:14:46,320 --> 00:14:49,600
in air has a resp speed with respect to

00:14:48,880 --> 00:14:51,440
the air

00:14:49,600 --> 00:14:53,279
but light goes through vacuum so what

00:14:51,440 --> 00:14:55,519
does it have a speed with respect to

00:14:53,279 --> 00:14:57,600
nothing that doesn't make any sense so

00:14:55,519 --> 00:14:59,440
at the time this is late 1800s earlier

00:14:57,600 --> 00:15:00,959
very early 1900s

00:14:59,440 --> 00:15:02,720
they came up with this new idea that

00:15:00,959 --> 00:15:04,160
there was some stuff out there that we

00:15:02,720 --> 00:15:06,160
just never noticed before they called it

00:15:04,160 --> 00:15:07,839
the luminiferous ether all right

00:15:06,160 --> 00:15:09,199
and this is some stuff that pervaded all

00:15:07,839 --> 00:15:10,800
the space and this is the stuff through

00:15:09,199 --> 00:15:13,120
which light propagated

00:15:10,800 --> 00:15:14,399
and they said okay we've got this theory

00:15:13,120 --> 00:15:14,880
that says there should be this stuff

00:15:14,399 --> 00:15:17,279
let's go

00:15:14,880 --> 00:15:19,120
measure its properties and every time

00:15:17,279 --> 00:15:20,800
they tried they failed and got zero

00:15:19,120 --> 00:15:22,320
right famous experiment tried to measure

00:15:20,800 --> 00:15:22,800
our velocity through the luminaires

00:15:22,320 --> 00:15:23,920
ether

00:15:22,800 --> 00:15:25,440
and every time they measure it this is

00:15:23,920 --> 00:15:27,040
the michaelson morley experiment i think

00:15:25,440 --> 00:15:28,639
they got the nobel prize for this

00:15:27,040 --> 00:15:29,759
they got a velocity of exactly zero

00:15:28,639 --> 00:15:31,279
despite the fact we know that our

00:15:29,759 --> 00:15:33,440
planet's spinning right

00:15:31,279 --> 00:15:34,880
what's up with this well the answer was

00:15:33,440 --> 00:15:36,480
that the luminiferous ether if you're

00:15:34,880 --> 00:15:38,000
moving through it does things it

00:15:36,480 --> 00:15:40,079
it shrinks your meter sticks and it

00:15:38,000 --> 00:15:41,440
changes angles in your experiment in

00:15:40,079 --> 00:15:44,480
exactly the right way

00:15:41,440 --> 00:15:46,079
such that you can never measure it

00:15:44,480 --> 00:15:47,600
and this kind of stumped everybody until

00:15:46,079 --> 00:15:50,320
this fella named einstein

00:15:47,600 --> 00:15:51,920
comes along and says wait a minute a

00:15:50,320 --> 00:15:54,320
physical phenomenon that cannot

00:15:51,920 --> 00:15:57,120
under any circumstances be measured

00:15:54,320 --> 00:15:57,120
doesn't exist

00:15:57,440 --> 00:16:01,120
unit tests the bugs that cannot be

00:15:59,600 --> 00:16:02,000
measured don't it's right it's the same

00:16:01,120 --> 00:16:03,759
argument right

00:16:02,000 --> 00:16:05,360
if you can't measure it whether it's

00:16:03,759 --> 00:16:08,000
there or not shouldn't matter all right

00:16:05,360 --> 00:16:08,800
so einstein throws that whole idea out

00:16:08,000 --> 00:16:10,800
comes up with

00:16:08,800 --> 00:16:12,399
the special theory of relativity stands

00:16:10,800 --> 00:16:14,000
science on its head and gets a nobel

00:16:12,399 --> 00:16:15,600
prize for something else

00:16:14,000 --> 00:16:16,959
which was actually getting quantum

00:16:15,600 --> 00:16:18,560
mechanics started which turned the rest

00:16:16,959 --> 00:16:20,000
of physics on ted okay because he was

00:16:18,560 --> 00:16:22,560
that kind of guy all right

00:16:20,000 --> 00:16:25,519
science has been here now aside from the

00:16:22,560 --> 00:16:26,959
revolution in physics

00:16:25,519 --> 00:16:28,959
everybody had to go back to the drawing

00:16:26,959 --> 00:16:31,920
board and revisit the underpinnings of

00:16:28,959 --> 00:16:33,519
physics what is the philosophical basis

00:16:31,920 --> 00:16:35,040
by which we decide that we know things

00:16:33,519 --> 00:16:36,000
we know what's true and out of that

00:16:35,040 --> 00:16:39,279
comes a stronger

00:16:36,000 --> 00:16:40,480
foundation for modern science and a lot

00:16:39,279 --> 00:16:43,600
of that rests on something called

00:16:40,480 --> 00:16:45,360
popper's falsifiability criteria

00:16:43,600 --> 00:16:47,600
what science would like to do is make

00:16:45,360 --> 00:16:49,279
statements that are true

00:16:47,600 --> 00:16:50,560
that can be proven true or be proven

00:16:49,279 --> 00:16:51,519
false then go prove them true or false

00:16:50,560 --> 00:16:53,440
and you're dumb

00:16:51,519 --> 00:16:54,720
but in general you actually can't do

00:16:53,440 --> 00:16:56,480
that think

00:16:54,720 --> 00:16:58,399
newton's theory of gravitation which

00:16:56,480 --> 00:16:59,759
says every object in the universe

00:16:58,399 --> 00:17:01,199
attracts every other object in the

00:16:59,759 --> 00:17:02,399
universe with a force proportional to a

00:17:01,199 --> 00:17:03,680
bunch of map

00:17:02,399 --> 00:17:06,240
and we're going to claim this is true of

00:17:03,680 --> 00:17:08,240
every object in the universe every

00:17:06,240 --> 00:17:10,480
object in the universe you can't go

00:17:08,240 --> 00:17:12,319
check every object in the universe right

00:17:10,480 --> 00:17:14,160
there's some object 44 billion light

00:17:12,319 --> 00:17:15,280
years away at the end at the edge of the

00:17:14,160 --> 00:17:17,120
observable universe

00:17:15,280 --> 00:17:18,640
we can't go look at it to see whether it

00:17:17,120 --> 00:17:21,199
obeys these rules okay

00:17:18,640 --> 00:17:22,480
it just can't be done so what science

00:17:21,199 --> 00:17:24,079
realized

00:17:22,480 --> 00:17:26,319
is that we have to do the next best

00:17:24,079 --> 00:17:26,720
thing all right we can't prove things

00:17:26,319 --> 00:17:29,840
true

00:17:26,720 --> 00:17:31,600
just in general very rare cases

00:17:29,840 --> 00:17:33,280
but you can do the next best thing which

00:17:31,600 --> 00:17:34,160
to make statements that can be proven

00:17:33,280 --> 00:17:36,720
false

00:17:34,160 --> 00:17:38,720
you try to prove them false and fail and

00:17:36,720 --> 00:17:40,799
the harder you try to prove them false

00:17:38,720 --> 00:17:42,960
and fail the more you think that they're

00:17:40,799 --> 00:17:44,400
true in other words your confidence that

00:17:42,960 --> 00:17:45,280
the statement is true tracks the

00:17:44,400 --> 00:17:47,679
thoroughness

00:17:45,280 --> 00:17:50,000
of the tests which didn't prove it false

00:17:47,679 --> 00:17:50,000
all right

00:17:50,960 --> 00:17:53,200
now

00:17:58,400 --> 00:18:01,280
if we apply this to unit tests and go

00:18:00,000 --> 00:18:02,160
back to where we started just a little

00:18:01,280 --> 00:18:03,679
while ago

00:18:02,160 --> 00:18:06,160
we were saying that if a class exhibits

00:18:03,679 --> 00:18:08,559
correct behavior in every

00:18:06,160 --> 00:18:10,320
circumstance you have to declare its

00:18:08,559 --> 00:18:11,919
implementation to be correct even if the

00:18:10,320 --> 00:18:13,360
innards are a flaming pile of

00:18:11,919 --> 00:18:15,679
self-contradictory bugs

00:18:13,360 --> 00:18:17,760
all right what we're doing is we're

00:18:15,679 --> 00:18:21,440
making a falsifiable hypothesis

00:18:17,760 --> 00:18:24,480
which is this code has no bug

00:18:21,440 --> 00:18:28,080
then we write tests to observe the bug

00:18:24,480 --> 00:18:30,160
we fail to observe the bug there's no

00:18:28,080 --> 00:18:31,440
bug and the confidence in the

00:18:30,160 --> 00:18:33,440
correctness of your code tracks the

00:18:31,440 --> 00:18:36,799
completeness of the testing of your code

00:18:33,440 --> 00:18:38,640
all right now

00:18:36,799 --> 00:18:40,240
what we just did is took something out

00:18:38,640 --> 00:18:41,840
of the philosophy of science

00:18:40,240 --> 00:18:43,600
and applied it to unit testing and

00:18:41,840 --> 00:18:44,880
learned something now if these are

00:18:43,600 --> 00:18:46,240
similar

00:18:44,880 --> 00:18:47,600
do we learn something by turning it

00:18:46,240 --> 00:18:49,280
around and seeing if the metaphor works

00:18:47,600 --> 00:18:51,520
the other way and actually

00:18:49,280 --> 00:18:53,120
we do if you think about what empirical

00:18:51,520 --> 00:18:54,799
science has been doing

00:18:53,120 --> 00:18:56,480
we are trying to reverse engineer the

00:18:54,799 --> 00:18:57,679
source code of the universe by writing

00:18:56,480 --> 00:19:00,720
unit tests against its

00:18:57,679 --> 00:19:02,000
observable behaviors right this is what

00:19:00,720 --> 00:19:04,320
an experiment is

00:19:02,000 --> 00:19:05,919
you observe something in the universe

00:19:04,320 --> 00:19:06,640
and then you try and figure out what's

00:19:05,919 --> 00:19:09,679
going on

00:19:06,640 --> 00:19:10,799
and scientists would love to white box

00:19:09,679 --> 00:19:12,240
test reality

00:19:10,799 --> 00:19:14,080
okay we'd love to know what's going on

00:19:12,240 --> 00:19:15,360
quantum mechanics is so bizarre

00:19:14,080 --> 00:19:17,280
the more you know about it the less you

00:19:15,360 --> 00:19:19,039
think you understand any of it okay

00:19:17,280 --> 00:19:21,120
we'd love to white box test reality but

00:19:19,039 --> 00:19:22,880
we can't because no one's figured out

00:19:21,120 --> 00:19:24,160
how to define private public before we

00:19:22,880 --> 00:19:28,240
include reality.h

00:19:24,160 --> 00:19:31,520
right we can't do this

00:19:28,240 --> 00:19:33,679
all right so what we do instead and have

00:19:31,520 --> 00:19:34,880
been really doing for the past 350 years

00:19:33,679 --> 00:19:37,039
or so

00:19:34,880 --> 00:19:39,200
is developing experience with the logic

00:19:37,039 --> 00:19:40,400
procedures and epistemology that is the

00:19:39,200 --> 00:19:41,919
philosophy of what do we know and we

00:19:40,400 --> 00:19:43,760
don't know and how we know it

00:19:41,919 --> 00:19:46,080
of black box testing that's what

00:19:43,760 --> 00:19:48,720
empirical science really is

00:19:46,080 --> 00:19:50,080
so the first result is that behavior

00:19:48,720 --> 00:19:52,640
driven black box testing

00:19:50,080 --> 00:19:54,160
is on sound philosophical foundations

00:19:52,640 --> 00:19:55,679
thank goodness for that i'm sure

00:19:54,160 --> 00:19:57,520
many of you out there were losing sleep

00:19:55,679 --> 00:20:00,000
at night worrying about this

00:19:57,520 --> 00:20:01,520
now we can actually get some sleep you

00:20:00,000 --> 00:20:02,320
guys won't break no one else worries

00:20:01,520 --> 00:20:04,559
about this

00:20:02,320 --> 00:20:06,720
but look can we get any practical

00:20:04,559 --> 00:20:09,360
results out of all this

00:20:06,720 --> 00:20:10,159
for example if you start to think about

00:20:09,360 --> 00:20:11,679
it

00:20:10,159 --> 00:20:12,880
your software is a system it's a

00:20:11,679 --> 00:20:14,480
physical system right i mean there's

00:20:12,880 --> 00:20:15,039
electrons getting pushed around at some

00:20:14,480 --> 00:20:16,880
level

00:20:15,039 --> 00:20:18,799
it's a physical system that you want to

00:20:16,880 --> 00:20:19,520
poke prod and study for the existence of

00:20:18,799 --> 00:20:22,080
bugs

00:20:19,520 --> 00:20:23,280
and your unit tests are the experimental

00:20:22,080 --> 00:20:25,760
apparatus

00:20:23,280 --> 00:20:27,360
to detect the bugs all right that's

00:20:25,760 --> 00:20:28,960
really what we're trying to do

00:20:27,360 --> 00:20:31,440
if this is the case maybe experimental

00:20:28,960 --> 00:20:35,520
science can give us a few pointers

00:20:31,440 --> 00:20:36,400
all right so here's the simplest example

00:20:35,520 --> 00:20:38,400
i could think of

00:20:36,400 --> 00:20:40,159
how do you measure something on a scale

00:20:38,400 --> 00:20:41,840
um

00:20:40,159 --> 00:20:44,400
alton we're fans of alton brown his

00:20:41,840 --> 00:20:46,400
formula for coffee is 28.5 grams of

00:20:44,400 --> 00:20:48,159
coffee to 400 grams of water

00:20:46,400 --> 00:20:50,480
my wife and i do 30 grams because we

00:20:48,159 --> 00:20:53,200
live on the edge do you think this is 30

00:20:50,480 --> 00:20:53,200
grams of coffee

00:20:53,840 --> 00:20:57,760
are you sure do you think maybe this is

00:20:56,320 --> 00:20:59,200
a trick question because i'm asking at

00:20:57,760 --> 00:21:01,120
the cppcon conference

00:20:59,200 --> 00:21:04,720
you should at least be thinking about

00:21:01,120 --> 00:21:04,720
what's whether or not pardon me

00:21:04,880 --> 00:21:10,400
whether or not the mass of the measuring

00:21:07,840 --> 00:21:12,240
cup is included in that 30 grams right

00:21:10,400 --> 00:21:13,679
in fact this measurement is completely

00:21:12,240 --> 00:21:15,120
meaningless i don't know if you can see

00:21:13,679 --> 00:21:16,640
it on your screen but that button right

00:21:15,120 --> 00:21:18,799
there is labeled zero

00:21:16,640 --> 00:21:20,400
all good scales have a way to zero them

00:21:18,799 --> 00:21:21,600
at some condition and then they measure

00:21:20,400 --> 00:21:24,480
relative to that

00:21:21,600 --> 00:21:26,240
if you don't know where this was zeroed

00:21:24,480 --> 00:21:29,520
you have no idea what this means

00:21:26,240 --> 00:21:30,400
okay and hint this is not 30 grams of

00:21:29,520 --> 00:21:32,799
coffee

00:21:30,400 --> 00:21:34,480
all right what do you do all right you

00:21:32,799 --> 00:21:35,600
zero the scale out but you do it under

00:21:34,480 --> 00:21:37,600
exactly the same

00:21:35,600 --> 00:21:38,720
conditions right there's a sample and

00:21:37,600 --> 00:21:40,400
you want to measure the mass of the

00:21:38,720 --> 00:21:41,520
sample so you set everything up

00:21:40,400 --> 00:21:44,000
exactly the way it's going to be but

00:21:41,520 --> 00:21:46,559
without the sample you zero it there

00:21:44,000 --> 00:21:48,159
then when you add the sample you have

00:21:46,559 --> 00:21:49,440
the reason to think that that 30 grams

00:21:48,159 --> 00:21:50,960
really means you've got 30 grams of

00:21:49,440 --> 00:21:54,640
stuff and by the way

00:21:50,960 --> 00:21:56,000
that really is 30 grams of coffee um

00:21:54,640 --> 00:21:57,120
i hope you've gotten enough coffee today

00:21:56,000 --> 00:21:58,720
i can't give you real coffee because

00:21:57,120 --> 00:22:00,960
it's a virtual conference but

00:21:58,720 --> 00:22:02,960
you know you got a picture of it and

00:22:00,960 --> 00:22:05,679
i've got news for you

00:22:02,960 --> 00:22:07,200
this is test driven development what do

00:22:05,679 --> 00:22:10,400
you do in test driven development

00:22:07,200 --> 00:22:13,440
okay you write a failing unit test

00:22:10,400 --> 00:22:15,760
to demonstrate the bug you

00:22:13,440 --> 00:22:17,679
fix the bug you rerun the unit test and

00:22:15,760 --> 00:22:21,200
watch them turn green

00:22:17,679 --> 00:22:22,320
right the sample you're measuring is

00:22:21,200 --> 00:22:25,200
your bug fix

00:22:22,320 --> 00:22:26,880
okay so first you measure the system

00:22:25,200 --> 00:22:28,240
without your sample without the sample

00:22:26,880 --> 00:22:30,799
which is without the bug fix

00:22:28,240 --> 00:22:31,760
so the test fails you introduce your bug

00:22:30,799 --> 00:22:33,039
fix

00:22:31,760 --> 00:22:35,520
all right which is introducing the

00:22:33,039 --> 00:22:38,480
sample and then you measure again

00:22:35,520 --> 00:22:40,000
and you measure the results of adding

00:22:38,480 --> 00:22:42,480
the sample in the presence of the bug

00:22:40,000 --> 00:22:43,840
fix the bug is not detected all right

00:22:42,480 --> 00:22:47,039
test driven development is

00:22:43,840 --> 00:22:48,799
just good lab technique it's not

00:22:47,039 --> 00:22:51,120
just all right there's no just there

00:22:48,799 --> 00:22:52,400
it's good lab technique exclamation

00:22:51,120 --> 00:22:53,919
point and honestly test driven

00:22:52,400 --> 00:22:54,880
development is a whole lot of other

00:22:53,919 --> 00:22:57,360
things

00:22:54,880 --> 00:22:57,919
go see phil nash's talk earlier this

00:22:57,360 --> 00:23:00,640
week or

00:22:57,919 --> 00:23:01,280
at previous conferences my favorite

00:23:00,640 --> 00:23:03,600
statement

00:23:01,280 --> 00:23:06,240
about test driven development came from

00:23:03,600 --> 00:23:09,520
fedor picos and his back to basics class

00:23:06,240 --> 00:23:11,200
last year um it's not so much about what

00:23:09,520 --> 00:23:12,880
it does to your code it's about what it

00:23:11,200 --> 00:23:14,799
does to your mind

00:23:12,880 --> 00:23:17,200
now this is a talk about science and i

00:23:14,799 --> 00:23:19,200
think fedor is talking religion

00:23:17,200 --> 00:23:20,320
but he's not wrong i love it this is

00:23:19,200 --> 00:23:22,640
absolutely true

00:23:20,320 --> 00:23:24,000
okay but this aspect of test driven

00:23:22,640 --> 00:23:26,960
development is basically

00:23:24,000 --> 00:23:29,200
just the discipline to make sure you're

00:23:26,960 --> 00:23:31,120
doing good lab technique

00:23:29,200 --> 00:23:32,640
now by the way something else you do if

00:23:31,120 --> 00:23:35,039
you need to measure things

00:23:32,640 --> 00:23:36,000
is you calibrate it you put a known

00:23:35,039 --> 00:23:37,120
weight on the scale

00:23:36,000 --> 00:23:38,559
and these are typically expensive

00:23:37,120 --> 00:23:39,760
because you have to trust them and then

00:23:38,559 --> 00:23:41,279
you make sure that your scale reads what

00:23:39,760 --> 00:23:42,960
it's supposed to read

00:23:41,279 --> 00:23:44,640
is there an equivalent in unit testing

00:23:42,960 --> 00:23:46,960
yes and actually ben talked about this

00:23:44,640 --> 00:23:48,320
uh quite a bit yesterday once you've got

00:23:46,960 --> 00:23:49,840
everything working you should go break

00:23:48,320 --> 00:23:51,520
your code and make sure your units has

00:23:49,840 --> 00:23:53,840
failed the right way

00:23:51,520 --> 00:23:55,679
all right introduce known bugs and watch

00:23:53,840 --> 00:23:58,320
your unit test tell you about them

00:23:55,679 --> 00:24:00,320
um most people don't do this much but i

00:23:58,320 --> 00:24:01,679
found this every now and then useful

00:24:00,320 --> 00:24:03,840
particularly for beginners it can be

00:24:01,679 --> 00:24:06,880
very confusing if you're writing

00:24:03,840 --> 00:24:07,760
unit tests to test failure modes right

00:24:06,880 --> 00:24:10,799
because the test

00:24:07,760 --> 00:24:12,240
succeeds if the code fails but only if

00:24:10,799 --> 00:24:14,159
it fails the right way and the test

00:24:12,240 --> 00:24:15,360
fails if the code succeeds what what

00:24:14,159 --> 00:24:16,640
well sometimes like if you've got a

00:24:15,360 --> 00:24:17,360
bunch of different exceptions that could

00:24:16,640 --> 00:24:18,799
be thrown

00:24:17,360 --> 00:24:20,400
it's really useful to go in and change

00:24:18,799 --> 00:24:21,760
the type of an exception watch your unit

00:24:20,400 --> 00:24:23,120
testing framework

00:24:21,760 --> 00:24:24,799
catch the fact that you just threw the

00:24:23,120 --> 00:24:29,120
wrong exception that kind of thing

00:24:24,799 --> 00:24:29,120
is basically just calibrating your scale

00:24:29,279 --> 00:24:34,240
okay let's go on to another example

00:24:32,400 --> 00:24:35,520
um this is a little bit more pernicious

00:24:34,240 --> 00:24:37,919
uh what is the definition of

00:24:35,520 --> 00:24:39,440
write okay so we've got some floating

00:24:37,919 --> 00:24:41,279
point code all right this is not

00:24:39,440 --> 00:24:42,880
interesting floating point code and it's

00:24:41,279 --> 00:24:44,480
a stupid example because it's a slide

00:24:42,880 --> 00:24:45,760
and i don't want to have to explain

00:24:44,480 --> 00:24:47,279
complicated floating point we're trying

00:24:45,760 --> 00:24:47,919
to compute some number which happens to

00:24:47,279 --> 00:24:49,520
be pi

00:24:47,919 --> 00:24:51,760
we compute it by taking the arc cosine

00:24:49,520 --> 00:24:54,960
of negative one notice that there's an

00:24:51,760 --> 00:24:59,120
f at the so up there somewhere

00:24:54,960 --> 00:25:01,039
uh a cos f right that's single precision

00:24:59,120 --> 00:25:02,480
floating point okay so the answer is

00:25:01,039 --> 00:25:04,279
only correct to seven decimal places

00:25:02,480 --> 00:25:07,440
about what you expect right

00:25:04,279 --> 00:25:09,440
3.141592 is correct that seven is wrong

00:25:07,440 --> 00:25:10,480
but if it's some real computation you

00:25:09,440 --> 00:25:11,840
don't know what the answer is this is

00:25:10,480 --> 00:25:15,200
probably good enough

00:25:11,840 --> 00:25:17,120
well maybe it's good enough all right

00:25:15,200 --> 00:25:18,880
if you were trying to measure this or

00:25:17,120 --> 00:25:20,480
compute the uh

00:25:18,880 --> 00:25:22,240
equatorial circumference of the earth

00:25:20,480 --> 00:25:23,360
based on this you're going to be off by

00:25:22,240 --> 00:25:25,679
at most a meter

00:25:23,360 --> 00:25:26,559
and i've got news for you but the

00:25:25,679 --> 00:25:28,240
earth's radius

00:25:26,559 --> 00:25:29,840
is only known about seven decimal places

00:25:28,240 --> 00:25:31,440
it doesn't have any more accurate one

00:25:29,840 --> 00:25:32,799
because we've got solid ties never mind

00:25:31,440 --> 00:25:35,600
the tides in the water

00:25:32,799 --> 00:25:37,200
the continents flex and at the equator

00:25:35,600 --> 00:25:38,880
the continents the rocks go up and down

00:25:37,200 --> 00:25:41,600
by about half a meter anyway

00:25:38,880 --> 00:25:43,039
this is fine all right your floating

00:25:41,600 --> 00:25:44,640
point computation works

00:25:43,039 --> 00:25:46,400
it's good enough for your answers your

00:25:44,640 --> 00:25:49,440
system is fine everybody's happy

00:25:46,400 --> 00:25:51,520
until someone comes along and takes that

00:25:49,440 --> 00:25:54,480
f off they improve your floating point

00:25:51,520 --> 00:25:56,000
computation now the result of this is

00:25:54,480 --> 00:25:57,840
good all the way out to 16 decimal

00:25:56,000 --> 00:25:59,919
places or whatever your machine supports

00:25:57,840 --> 00:26:02,960
but your unit test just broke

00:25:59,919 --> 00:26:04,799
because you've got extra digits

00:26:02,960 --> 00:26:06,480
there that are now wrong but you didn't

00:26:04,799 --> 00:26:08,159
need those digits right

00:26:06,480 --> 00:26:09,760
those were kind of garbage right they

00:26:08,159 --> 00:26:11,360
didn't matter because

00:26:09,760 --> 00:26:13,279
the rest of your computation was only

00:26:11,360 --> 00:26:14,880
good to seven decimal places anyway

00:26:13,279 --> 00:26:16,799
the point is that an incorrect right

00:26:14,880 --> 00:26:18,960
answer creates a brittle test

00:26:16,799 --> 00:26:20,640
breaks under maintenance because you've

00:26:18,960 --> 00:26:22,000
unnecessarily pinned your answer to a

00:26:20,640 --> 00:26:23,279
specific algorithm

00:26:22,000 --> 00:26:25,360
as opposed to the general thing you're

00:26:23,279 --> 00:26:27,360
trying to do

00:26:25,360 --> 00:26:29,279
this is just bad error propagation which

00:26:27,360 --> 00:26:30,640
is the bane of all freshman physics labs

00:26:29,279 --> 00:26:32,320
and i've taught many of physics lab

00:26:30,640 --> 00:26:33,840
nobody ever gets it right

00:26:32,320 --> 00:26:35,679
okay you've got your measurements the

00:26:33,840 --> 00:26:37,039
input okay and there's only so many

00:26:35,679 --> 00:26:38,960
important figures in there that actually

00:26:37,039 --> 00:26:40,159
mean anything anyway then

00:26:38,960 --> 00:26:42,400
as you go through your floating point

00:26:40,159 --> 00:26:43,840
computation you're gonna lose

00:26:42,400 --> 00:26:45,760
some of those significant figures due to

00:26:43,840 --> 00:26:48,960
round off and at the end

00:26:45,760 --> 00:26:50,480
you're gonna get something and it's

00:26:48,960 --> 00:26:52,159
right well we hope it's right but it's

00:26:50,480 --> 00:26:54,480
either right

00:26:52,159 --> 00:26:56,559
based on what you put in and you can say

00:26:54,480 --> 00:26:58,159
this is what we should get or it's right

00:26:56,559 --> 00:27:03,679
enough for what you're trying to do

00:26:58,159 --> 00:27:05,120
okay so the fact is

00:27:03,679 --> 00:27:06,559
oh by the way what should be done here

00:27:05,120 --> 00:27:08,159
is that you use something in your unit

00:27:06,559 --> 00:27:09,360
test framework to uh

00:27:08,159 --> 00:27:11,440
to do correct floating point

00:27:09,360 --> 00:27:12,799
computations all you good unit test

00:27:11,440 --> 00:27:16,480
frameworks have one

00:27:12,799 --> 00:27:19,120
um developing mathematical algorithms

00:27:16,480 --> 00:27:21,120
that's hard right characterizing the

00:27:19,120 --> 00:27:21,600
numerical stability and the round off

00:27:21,120 --> 00:27:24,000
error

00:27:21,600 --> 00:27:24,640
is even harder but it's actually part of

00:27:24,000 --> 00:27:27,840
the job

00:27:24,640 --> 00:27:29,200
right you don't really understand it you

00:27:27,840 --> 00:27:30,799
shouldn't rely on it

00:27:29,200 --> 00:27:32,240
you probably can't code it right and you

00:27:30,799 --> 00:27:33,600
might not be able to test it right

00:27:32,240 --> 00:27:36,480
unless you've actually done all that

00:27:33,600 --> 00:27:38,480
work all right you have to figure out

00:27:36,480 --> 00:27:40,559
what the error bars on the end are and

00:27:38,480 --> 00:27:42,799
then put those into your unit tests

00:27:40,559 --> 00:27:43,600
and this isn't just floating point okay

00:27:42,799 --> 00:27:45,600
um

00:27:43,600 --> 00:27:46,880
five years ago that talk all your tests

00:27:45,600 --> 00:27:48,799
are terrible

00:27:46,880 --> 00:27:50,159
titus and hiram make a lot of fun of

00:27:48,799 --> 00:27:50,960
someone who is testing a jpeg

00:27:50,159 --> 00:27:52,880
compression

00:27:50,960 --> 00:27:54,240
they take an image they jpeg compress it

00:27:52,880 --> 00:27:57,360
they get a result they put that

00:27:54,240 --> 00:27:58,559
into the unit test they run the unit

00:27:57,360 --> 00:28:00,399
test and they get the right answer

00:27:58,559 --> 00:28:01,279
hurrah it works no it doesn't because

00:28:00,399 --> 00:28:02,720
someone goes

00:28:01,279 --> 00:28:04,799
and approves the jpeg compression

00:28:02,720 --> 00:28:06,159
algorithm same thing happens the test

00:28:04,799 --> 00:28:10,640
fails although something else got

00:28:06,159 --> 00:28:12,559
better okay so even if you're not doing

00:28:10,640 --> 00:28:13,919
some fancy floating point computation

00:28:12,559 --> 00:28:14,960
you still have this problem what is the

00:28:13,919 --> 00:28:16,559
right answer

00:28:14,960 --> 00:28:18,799
i don't know how you decide whether a

00:28:16,559 --> 00:28:20,799
compression algorithm does a good job on

00:28:18,799 --> 00:28:22,799
on a picture is it good enough that the

00:28:20,799 --> 00:28:24,320
human eye can't detect it how sensitive

00:28:22,799 --> 00:28:25,840
is the human eye to green light i don't

00:28:24,320 --> 00:28:27,440
know how to do that that's hard

00:28:25,840 --> 00:28:28,640
but if you're writing jacob jpeg

00:28:27,440 --> 00:28:30,799
compression algorithms you probably need

00:28:28,640 --> 00:28:33,840
to think about it

00:28:30,799 --> 00:28:34,799
okay let me talk for just a second and

00:28:33,840 --> 00:28:37,520
check

00:28:34,799 --> 00:28:37,520
questions

00:28:39,919 --> 00:28:44,559
let's see i will just mention

00:28:43,279 --> 00:28:45,600
i'm talking about unit test yeah

00:28:44,559 --> 00:28:46,720
everything we're talking about is just

00:28:45,600 --> 00:28:48,960
testing in general

00:28:46,720 --> 00:28:50,159
unit testing was just kind of the was

00:28:48,960 --> 00:28:52,000
the hook maybe or

00:28:50,159 --> 00:28:52,960
it was it was the easy example to get

00:28:52,000 --> 00:28:54,799
started in because that's what

00:28:52,960 --> 00:28:58,640
everyone's worrying about right now

00:28:54,799 --> 00:29:01,120
okay let's get more general all right

00:28:58,640 --> 00:29:02,720
now we can't go into like the full

00:29:01,120 --> 00:29:04,559
theory of experimental setup right

00:29:02,720 --> 00:29:06,960
that's a big topic and by the way

00:29:04,559 --> 00:29:08,880
my phd was in theoretical physics right

00:29:06,960 --> 00:29:10,480
no one wanted me in their lab i walk in

00:29:08,880 --> 00:29:13,679
and things blow up right i

00:29:10,480 --> 00:29:14,559
stay away from the experiments um but

00:29:13,679 --> 00:29:16,559
roughly speaking

00:29:14,559 --> 00:29:18,080
for our purposes we can say that three

00:29:16,559 --> 00:29:18,960
things we want out of a good experiment

00:29:18,080 --> 00:29:21,120
is it's

00:29:18,960 --> 00:29:22,240
precise it's reproducible and it's

00:29:21,120 --> 00:29:25,600
accurate

00:29:22,240 --> 00:29:27,039
so let's talk about these all right now

00:29:25,600 --> 00:29:29,440
what precision means in

00:29:27,039 --> 00:29:31,200
this context is that any given

00:29:29,440 --> 00:29:32,799
measurement gives you a lot of data all

00:29:31,200 --> 00:29:34,559
right you get a lot of information from

00:29:32,799 --> 00:29:36,320
doing whatever it is you're doing

00:29:34,559 --> 00:29:38,320
so the most obvious thing here is just

00:29:36,320 --> 00:29:40,559
use a unit test framework that gives you

00:29:38,320 --> 00:29:42,240
good messages and make sure you're using

00:29:40,559 --> 00:29:42,720
it to give you good messages so that if

00:29:42,240 --> 00:29:46,000
something

00:29:42,720 --> 00:29:48,480
fails that is if you detect a bug right

00:29:46,000 --> 00:29:49,360
it tells you here's the file here's the

00:29:48,480 --> 00:29:50,720
test case

00:29:49,360 --> 00:29:53,360
here's the line number here's the

00:29:50,720 --> 00:29:54,159
assertion that failed we expected 49 we

00:29:53,360 --> 00:29:55,760
got 42

00:29:54,159 --> 00:29:57,679
whatever right you want a lot of

00:29:55,760 --> 00:29:58,880
information that points you directly

00:29:57,679 --> 00:29:59,760
towards what the problem is so you don't

00:29:58,880 --> 00:30:01,200
have to spend a lot of time

00:29:59,760 --> 00:30:01,840
understanding that you can get straight

00:30:01,200 --> 00:30:04,320
to

00:30:01,840 --> 00:30:06,559
understanding the real bug all right

00:30:04,320 --> 00:30:09,039
that's precision that's a precise

00:30:06,559 --> 00:30:10,720
experimental setup but here's another

00:30:09,039 --> 00:30:11,840
maybe more pernicious you will see this

00:30:10,720 --> 00:30:14,480
every now and then

00:30:11,840 --> 00:30:15,360
um you've got a test case for a widget i

00:30:14,480 --> 00:30:16,399
don't know what a widget is it's

00:30:15,360 --> 00:30:17,840
anything and as a part of that we're

00:30:16,399 --> 00:30:21,279
going to put some widgets in a vector

00:30:17,840 --> 00:30:23,679
so we make a standard vector

00:30:21,279 --> 00:30:25,039
of widgets and then we require that it's

00:30:23,679 --> 00:30:26,799
empty we test that

00:30:25,039 --> 00:30:28,799
right and then we push back in a widget

00:30:26,799 --> 00:30:30,880
and we make sure that it's got size one

00:30:28,799 --> 00:30:32,640
really now you'll actually see this out

00:30:30,880 --> 00:30:34,799
in the big wide world

00:30:32,640 --> 00:30:36,480
for all kinds of reasons the reason why

00:30:34,799 --> 00:30:38,000
this is bad isn't because it's silly to

00:30:36,480 --> 00:30:39,360
test standard vector

00:30:38,000 --> 00:30:41,279
someone's got to do it right you hope

00:30:39,360 --> 00:30:43,120
that the people who wrote it but

00:30:41,279 --> 00:30:45,200
change the example a little bit so that

00:30:43,120 --> 00:30:46,880
instead of standard vector

00:30:45,200 --> 00:30:48,320
it's some other thing it's some

00:30:46,880 --> 00:30:49,600
dependency that maybe it's developed by

00:30:48,320 --> 00:30:50,799
the other team down the hall

00:30:49,600 --> 00:30:52,799
who are a bunch of knuckleheads and they

00:30:50,799 --> 00:30:55,279
never write good unit tests right and so

00:30:52,799 --> 00:30:56,399
you want to make sure their stuff works

00:30:55,279 --> 00:30:57,679
so that you can make sure that your

00:30:56,399 --> 00:30:58,320
stuff works so you're going to write a

00:30:57,679 --> 00:31:01,440
test for it

00:30:58,320 --> 00:31:03,600
fine don't put it here

00:31:01,440 --> 00:31:04,720
the reason you don't want to test their

00:31:03,600 --> 00:31:06,399
code

00:31:04,720 --> 00:31:08,320
in your widget test case is that if they

00:31:06,399 --> 00:31:09,679
break something the widget test case

00:31:08,320 --> 00:31:11,440
turns red

00:31:09,679 --> 00:31:13,279
which means that at two in the morning

00:31:11,440 --> 00:31:14,559
when there's a production break

00:31:13,279 --> 00:31:16,320
or something goes wrong they're going to

00:31:14,559 --> 00:31:18,159
call you because

00:31:16,320 --> 00:31:20,080
the test report says something broke in

00:31:18,159 --> 00:31:21,120
widget test this if you want but put it

00:31:20,080 --> 00:31:22,320
somewhere else where it says we're

00:31:21,120 --> 00:31:24,320
testing standard vector

00:31:22,320 --> 00:31:25,760
so if it breaks they go they go bug the

00:31:24,320 --> 00:31:27,600
right people okay

00:31:25,760 --> 00:31:29,120
this gives you an imprecise result

00:31:27,600 --> 00:31:30,720
because it's pointing you

00:31:29,120 --> 00:31:32,799
at the wrong place don't put red

00:31:30,720 --> 00:31:36,799
herrings in your path

00:31:32,799 --> 00:31:38,000
okay um reproducibility this is a little

00:31:36,799 --> 00:31:39,679
bit more complicated

00:31:38,000 --> 00:31:41,039
all right most scientific experiments

00:31:39,679 --> 00:31:42,320
out in the real world have measurements

00:31:41,039 --> 00:31:43,440
or noise or whatever you do the same

00:31:42,320 --> 00:31:44,799
experiment

00:31:43,440 --> 00:31:46,559
multiple times you don't get exactly the

00:31:44,799 --> 00:31:47,200
same answer now most of the time that's

00:31:46,559 --> 00:31:48,480
just

00:31:47,200 --> 00:31:50,559
interference from the environment it's

00:31:48,480 --> 00:31:52,640
noise there's static on the line

00:31:50,559 --> 00:31:54,000
or someone bumps the table or whatever

00:31:52,640 --> 00:31:54,880
it is all right but sometimes it's

00:31:54,000 --> 00:31:57,039
because

00:31:54,880 --> 00:32:01,200
you're studying a complex system and you

00:31:57,039 --> 00:32:03,840
can't control for everything think um uh

00:32:01,200 --> 00:32:05,279
uh testing uh medical device or or uh or

00:32:03,840 --> 00:32:07,519
a new drug or a new therapy

00:32:05,279 --> 00:32:08,640
right you can't just do it on one person

00:32:07,519 --> 00:32:10,240
because

00:32:08,640 --> 00:32:11,519
biology is really complex you need to do

00:32:10,240 --> 00:32:12,159
it across a bunch of people to see

00:32:11,519 --> 00:32:13,840
whether

00:32:12,159 --> 00:32:15,440
the thing works or not all right or

00:32:13,840 --> 00:32:16,399
think about any psychological experiment

00:32:15,440 --> 00:32:18,159
where you're trying to tease out

00:32:16,399 --> 00:32:18,559
underlying things across human brains

00:32:18,159 --> 00:32:20,640
right

00:32:18,559 --> 00:32:22,240
we don't even know how many yeah we

00:32:20,640 --> 00:32:23,360
can't we can't even hope to characterize

00:32:22,240 --> 00:32:26,880
that right now

00:32:23,360 --> 00:32:28,080
um so it may be that you've got so many

00:32:26,880 --> 00:32:29,760
variables you can't eliminate

00:32:28,080 --> 00:32:31,679
them and so you have to put up with

00:32:29,760 --> 00:32:33,440
getting some randomness or something

00:32:31,679 --> 00:32:34,640
or maybe it's built into the system

00:32:33,440 --> 00:32:35,679
quantum mechanics is going to give you

00:32:34,640 --> 00:32:38,240
random numbers that

00:32:35,679 --> 00:32:39,120
are random answers that's why it's so

00:32:38,240 --> 00:32:41,760
weird okay

00:32:39,120 --> 00:32:43,039
so science has developed ways to handle

00:32:41,760 --> 00:32:43,919
this and the four obvious ones are that

00:32:43,039 --> 00:32:45,519
you either

00:32:43,919 --> 00:32:47,120
do a better job of isolating yourself

00:32:45,519 --> 00:32:50,240
from the real world

00:32:47,120 --> 00:32:51,679
you measure the signal you don't want

00:32:50,240 --> 00:32:52,480
and subtract it think noise canceling

00:32:51,679 --> 00:32:54,000
headsets

00:32:52,480 --> 00:32:56,240
right there's a signal you want there's

00:32:54,000 --> 00:32:57,519
a signal you want you have a separate

00:32:56,240 --> 00:32:59,600
thing to measure the signal you don't

00:32:57,519 --> 00:33:00,960
want and you subtract it

00:32:59,600 --> 00:33:02,640
if you can't do those maybe you can at

00:33:00,960 --> 00:33:04,159
least detect that there's a problem and

00:33:02,640 --> 00:33:05,679
eliminate the erroneous results mark

00:33:04,159 --> 00:33:08,000
those as hey that doesn't make any sense

00:33:05,679 --> 00:33:09,200
ignore this or the last case everyone's

00:33:08,000 --> 00:33:12,399
last ditch effort

00:33:09,200 --> 00:33:13,840
is statistics now this is about handling

00:33:12,399 --> 00:33:16,240
interactions between your test and the

00:33:13,840 --> 00:33:17,840
environment okay i'm not talking about

00:33:16,240 --> 00:33:19,760
code that's non-deterministic for good

00:33:17,840 --> 00:33:21,200
reasons if your code depends on a random

00:33:19,760 --> 00:33:22,720
number generator

00:33:21,200 --> 00:33:24,480
well you're going to get different

00:33:22,720 --> 00:33:26,480
answers every time you run it okay so

00:33:24,480 --> 00:33:28,159
what do you do about that well you see

00:33:26,480 --> 00:33:29,360
the random number generator to the same

00:33:28,159 --> 00:33:30,720
number every time before you run your

00:33:29,360 --> 00:33:32,240
unit tests or

00:33:30,720 --> 00:33:33,919
maybe you have to mock your random

00:33:32,240 --> 00:33:35,440
number generator so that it's

00:33:33,919 --> 00:33:36,080
deterministic and you don't have this

00:33:35,440 --> 00:33:37,600
problem

00:33:36,080 --> 00:33:38,960
but sometimes you can't get rid of it

00:33:37,600 --> 00:33:40,000
like what if your code is a random

00:33:38,960 --> 00:33:41,600
number generator

00:33:40,000 --> 00:33:43,279
or what if it's a driver for some piece

00:33:41,600 --> 00:33:44,000
of hardware that's an entropy source to

00:33:43,279 --> 00:33:46,000
generate

00:33:44,000 --> 00:33:47,440
random numbers right well in that case

00:33:46,000 --> 00:33:48,640
what you have to do this gets back to

00:33:47,440 --> 00:33:50,240
what we just talked about

00:33:48,640 --> 00:33:51,600
the correct definition of your answer

00:33:50,240 --> 00:33:53,039
isn't a given sequence of numbers

00:33:51,600 --> 00:33:54,880
because you can't rely on that

00:33:53,039 --> 00:33:56,159
your unit test has to do the statistics

00:33:54,880 --> 00:33:57,760
to make sure your random numbers are

00:33:56,159 --> 00:33:59,200
right

00:33:57,760 --> 00:34:00,880
but that's kind of a separate case what

00:33:59,200 --> 00:34:02,720
i want to talk about here is

00:34:00,880 --> 00:34:05,039
interference from the environment

00:34:02,720 --> 00:34:07,200
okay test should fail because the code

00:34:05,039 --> 00:34:09,119
under uh under test fails and for no

00:34:07,200 --> 00:34:11,679
other reason that's the ideal

00:34:09,119 --> 00:34:13,679
but we all have experience with

00:34:11,679 --> 00:34:14,320
unreliable or flaky tests they depend on

00:34:13,679 --> 00:34:16,000
timing

00:34:14,320 --> 00:34:18,079
or some external state there's a test

00:34:16,000 --> 00:34:18,639
server that's down there's a file system

00:34:18,079 --> 00:34:20,079
that's full

00:34:18,639 --> 00:34:21,839
something like that that leads to

00:34:20,079 --> 00:34:22,879
erroneous test failures

00:34:21,839 --> 00:34:25,440
and the first thing to do if you're

00:34:22,879 --> 00:34:26,720
tackling this is to make damn sure

00:34:25,440 --> 00:34:28,720
that the non-determinism really is

00:34:26,720 --> 00:34:30,240
external that it isn't your code broken

00:34:28,720 --> 00:34:30,879
all right we're assuming that as we go

00:34:30,240 --> 00:34:32,560
forward

00:34:30,879 --> 00:34:34,320
right you have to absolutely prove that

00:34:32,560 --> 00:34:36,159
these are false alarms from the external

00:34:34,320 --> 00:34:38,320
world so the first thing you do is

00:34:36,159 --> 00:34:40,240
isolation right

00:34:38,320 --> 00:34:41,599
that's easy unless your code is code

00:34:40,240 --> 00:34:42,800
that's explicitly supposed to go out and

00:34:41,599 --> 00:34:44,480
touch the real world

00:34:42,800 --> 00:34:46,240
connecting to a test server connecting

00:34:44,480 --> 00:34:47,599
to a database right into a file system

00:34:46,240 --> 00:34:49,839
all right

00:34:47,599 --> 00:34:51,760
what do you do if the code has to go uh

00:34:49,839 --> 00:34:53,520
interact with the external world

00:34:51,760 --> 00:34:54,639
um well you can mock the external thing

00:34:53,520 --> 00:34:55,679
so you're not really touching the

00:34:54,639 --> 00:34:57,040
external thing you're

00:34:55,679 --> 00:34:59,839
touching an internal thing that looks

00:34:57,040 --> 00:35:01,599
the same right um

00:34:59,839 --> 00:35:03,440
maybe you fork your process and create

00:35:01,599 --> 00:35:05,200
the external thing in in the other

00:35:03,440 --> 00:35:06,480
fork process but maybe you've got more

00:35:05,200 --> 00:35:08,079
control over it maybe

00:35:06,480 --> 00:35:09,680
that could work you know you fork a

00:35:08,079 --> 00:35:12,240
process that fires up the server and you

00:35:09,680 --> 00:35:14,000
communicate with it

00:35:12,240 --> 00:35:15,680
more likely you've got dedicated test

00:35:14,000 --> 00:35:16,000
servers or dedicated test databases or

00:35:15,680 --> 00:35:17,839
test

00:35:16,000 --> 00:35:19,280
dedicated file systems that are there

00:35:17,839 --> 00:35:20,880
just for the purposes of your testing

00:35:19,280 --> 00:35:23,119
that you can rely on

00:35:20,880 --> 00:35:24,320
okay if you're running on hardware

00:35:23,119 --> 00:35:25,040
hopefully you're running your tests on

00:35:24,320 --> 00:35:26,079
your hardware

00:35:25,040 --> 00:35:28,240
you might have to have a bunch of

00:35:26,079 --> 00:35:30,160
dedicated hardware instances

00:35:28,240 --> 00:35:31,680
for your ci pipeline to hit as it's

00:35:30,160 --> 00:35:34,000
running your unit test all right

00:35:31,680 --> 00:35:35,280
this can be expensive it's expensive in

00:35:34,000 --> 00:35:38,800
science too right people

00:35:35,280 --> 00:35:41,040
build physics labs 600 meters down

00:35:38,800 --> 00:35:42,560
in old disused salt mines to shield it

00:35:41,040 --> 00:35:44,720
from cosmic rays okay

00:35:42,560 --> 00:35:46,240
it's pricey but the alternative is that

00:35:44,720 --> 00:35:47,280
you've got tests you can't rely on so

00:35:46,240 --> 00:35:49,520
that's one option

00:35:47,280 --> 00:35:51,200
now if you can't do that maybe you can

00:35:49,520 --> 00:35:52,400
subtract out the problem all right

00:35:51,200 --> 00:35:55,119
i don't know that this is generally

00:35:52,400 --> 00:35:57,520
useful but at least in principle

00:35:55,119 --> 00:35:59,280
if you're supposed to connect say to a

00:35:57,520 --> 00:36:00,480
to a server that's and your unit test

00:35:59,280 --> 00:36:02,720
depends on this happening

00:36:00,480 --> 00:36:04,400
within a certain period of time you

00:36:02,720 --> 00:36:06,880
build some external sensor

00:36:04,400 --> 00:36:08,720
and you verify that independently all

00:36:06,880 --> 00:36:10,160
right and it's there just to measure the

00:36:08,720 --> 00:36:11,920
latency to the server

00:36:10,160 --> 00:36:13,520
and whatever it measures it cues your

00:36:11,920 --> 00:36:15,520
unit test framework or your test

00:36:13,520 --> 00:36:17,280
framework in general to say hey

00:36:15,520 --> 00:36:19,440
the server's slow today add two seconds

00:36:17,280 --> 00:36:21,599
onto everything so that your tests can

00:36:19,440 --> 00:36:23,440
adapt to the external situation

00:36:21,599 --> 00:36:25,119
and still give you answers that mean

00:36:23,440 --> 00:36:28,400
something might be useful

00:36:25,119 --> 00:36:30,240
might not be but it's an option okay

00:36:28,400 --> 00:36:32,160
now the other option if you can't do any

00:36:30,240 --> 00:36:33,520
of those is at least

00:36:32,160 --> 00:36:36,560
you can detect the problem right you've

00:36:33,520 --> 00:36:39,200
got your external sensor that detects

00:36:36,560 --> 00:36:41,280
hey the server's down the database isn't

00:36:39,200 --> 00:36:43,920
there the file system is full whatever

00:36:41,280 --> 00:36:45,280
and you use that to cue your unit tests

00:36:43,920 --> 00:36:47,520
that that test can't be run

00:36:45,280 --> 00:36:49,680
or the result you just got is invalid

00:36:47,520 --> 00:36:51,040
okay now you can do this but you also

00:36:49,680 --> 00:36:53,440
have to have the tools

00:36:51,040 --> 00:36:55,119
and the processes in your team to deal

00:36:53,440 --> 00:36:56,640
with what happens when it says hey i

00:36:55,119 --> 00:36:59,599
can't run the unit test

00:36:56,640 --> 00:37:01,200
okay if the environment invalidates the

00:36:59,599 --> 00:37:02,800
test hey the test server is down

00:37:01,200 --> 00:37:04,800
all these tests are going to fail but

00:37:02,800 --> 00:37:06,240
it's not the code's fault right

00:37:04,800 --> 00:37:07,760
what do you do maybe you mark them as

00:37:06,240 --> 00:37:08,079
pending and you run them later you hope

00:37:07,760 --> 00:37:10,560
that you

00:37:08,079 --> 00:37:12,000
the test server comes back up okay or

00:37:10,560 --> 00:37:13,440
you mark them as not run and then you

00:37:12,000 --> 00:37:14,880
have to decide in your team what to do

00:37:13,440 --> 00:37:16,960
about it right

00:37:14,880 --> 00:37:18,640
can we merge this pull request if it's

00:37:16,960 --> 00:37:19,760
got something marked as hey

00:37:18,640 --> 00:37:22,400
we couldn't run the test we're going to

00:37:19,760 --> 00:37:23,119
do it tomorrow if you can't do that

00:37:22,400 --> 00:37:25,440
you're going to have

00:37:23,119 --> 00:37:26,400
a whole bunch of pull requests piling up

00:37:25,440 --> 00:37:28,000
in your team

00:37:26,400 --> 00:37:30,240
waiting for test resources at which

00:37:28,000 --> 00:37:31,680
point haha it's always good to go to

00:37:30,240 --> 00:37:32,160
management with real numbers and you can

00:37:31,680 --> 00:37:33,680
say hey

00:37:32,160 --> 00:37:35,359
we need more resources for our test

00:37:33,680 --> 00:37:38,400
environment and i can show you exactly

00:37:35,359 --> 00:37:38,400
how much time it's costing

00:37:38,880 --> 00:37:42,320
all right finally if all else fails and

00:37:40,960 --> 00:37:44,079
your back's really up against the wall

00:37:42,320 --> 00:37:46,800
you can do statistics

00:37:44,079 --> 00:37:48,400
all right you can collect some samples

00:37:46,800 --> 00:37:50,640
and you might know hey this test fails

00:37:48,400 --> 00:37:51,920
one out of five times so you rig your

00:37:50,640 --> 00:37:53,200
test framework to say well it just

00:37:51,920 --> 00:37:54,240
failed let's run it four more times and

00:37:53,200 --> 00:37:56,720
see what happens i'm

00:37:54,240 --> 00:37:58,160
roughly speaking more than four right

00:37:56,720 --> 00:38:01,119
but you rig your test

00:37:58,160 --> 00:38:01,680
to know that hey it fails every thursday

00:38:01,119 --> 00:38:04,160
night

00:38:01,680 --> 00:38:05,599
okay so if it runs on a thursday night

00:38:04,160 --> 00:38:08,079
i'm gonna rerun it

00:38:05,599 --> 00:38:09,520
later or something um it's kind of a

00:38:08,079 --> 00:38:11,599
last-ditch effort

00:38:09,520 --> 00:38:13,520
but it does give you one very useful

00:38:11,599 --> 00:38:15,359
thing you're automating the ignore that

00:38:13,520 --> 00:38:16,800
flaky test failure

00:38:15,359 --> 00:38:18,960
because that way your engineers don't

00:38:16,800 --> 00:38:20,400
get desensitized to it right

00:38:18,960 --> 00:38:21,920
if you've got a test that just fails

00:38:20,400 --> 00:38:22,480
every now and then everyone gets used to

00:38:21,920 --> 00:38:24,000
looking over

00:38:22,480 --> 00:38:25,440
oh it's that test that just failed i

00:38:24,000 --> 00:38:26,480
don't care at some point it's going to

00:38:25,440 --> 00:38:28,160
be some other test but they're going to

00:38:26,480 --> 00:38:30,800
ignore it because it looks the same

00:38:28,160 --> 00:38:32,000
right don't desensitize your engineers

00:38:30,800 --> 00:38:36,160
to flaky tests

00:38:32,000 --> 00:38:39,839
if possible rig your testing system

00:38:36,160 --> 00:38:41,359
to handle that okay

00:38:39,839 --> 00:38:43,119
now this is the last thing we're going

00:38:41,359 --> 00:38:46,000
to talk about this is accuracy which is

00:38:43,119 --> 00:38:47,440
a bit more complex

00:38:46,000 --> 00:38:49,280
and what accuracy means is that the

00:38:47,440 --> 00:38:51,520
results of your experiment match

00:38:49,280 --> 00:38:52,880
reality so we have a truth table

00:38:51,520 --> 00:38:53,200
everyone likes truth tables right we've

00:38:52,880 --> 00:38:55,440
got

00:38:53,200 --> 00:38:56,720
two binary options your code is correct

00:38:55,440 --> 00:38:59,119
or it isn't

00:38:56,720 --> 00:39:00,880
your test results pass or that it's over

00:38:59,119 --> 00:39:03,920
here test results pass or they fail

00:39:00,880 --> 00:39:07,920
okay so the first thing

00:39:03,920 --> 00:39:08,800
is um we're thinking of our labs as test

00:39:07,920 --> 00:39:09,839
equipment to detect

00:39:08,800 --> 00:39:11,839
something the thing we're trying to

00:39:09,839 --> 00:39:13,760
detect is bugs but we're making

00:39:11,839 --> 00:39:16,079
a falsifiable hypothesis which is that

00:39:13,760 --> 00:39:18,480
our code is correct and we're trying to

00:39:16,079 --> 00:39:21,680
detect a signal that says otherwise

00:39:18,480 --> 00:39:23,200
right so positive in this context means

00:39:21,680 --> 00:39:24,079
you found a bug and negative means

00:39:23,200 --> 00:39:25,440
there's no bugs

00:39:24,079 --> 00:39:27,680
now that's the emotional opposite of

00:39:25,440 --> 00:39:29,760
what you want right no bugs is positive

00:39:27,680 --> 00:39:31,280
makes you happy you can go home you find

00:39:29,760 --> 00:39:31,760
a bug you're unhappy you have to stick

00:39:31,280 --> 00:39:33,359
around

00:39:31,760 --> 00:39:34,960
and it's late but you got to fix the bug

00:39:33,359 --> 00:39:35,760
all right so this isn't the emotional

00:39:34,960 --> 00:39:38,000
response

00:39:35,760 --> 00:39:39,440
okay this is is there a signal positive

00:39:38,000 --> 00:39:40,400
means there's a bug negative means there

00:39:39,440 --> 00:39:42,480
isn't a bug

00:39:40,400 --> 00:39:43,920
and in this table i've labeled two

00:39:42,480 --> 00:39:45,839
things in green and two things in red

00:39:43,920 --> 00:39:47,040
now the green ones are the high accuracy

00:39:45,839 --> 00:39:48,240
results

00:39:47,040 --> 00:39:49,760
your code is correct and your test

00:39:48,240 --> 00:39:51,040
results pass your code is incorrect and

00:39:49,760 --> 00:39:53,680
your test results fail

00:39:51,040 --> 00:39:54,960
those are the cases where your tests in

00:39:53,680 --> 00:39:56,720
reality match

00:39:54,960 --> 00:39:58,000
and those are green and the other two

00:39:56,720 --> 00:39:59,119
cases are red because that's what we

00:39:58,000 --> 00:40:02,079
don't want

00:39:59,119 --> 00:40:03,920
okay this isn't the same colors that

00:40:02,079 --> 00:40:05,200
your ci pipeline spits out if it finds a

00:40:03,920 --> 00:40:05,760
failing test those are the numbers over

00:40:05,200 --> 00:40:09,359
on the left

00:40:05,760 --> 00:40:10,319
okay so this is a little bit more

00:40:09,359 --> 00:40:11,760
complex

00:40:10,319 --> 00:40:13,680
let's go through each one of these in

00:40:11,760 --> 00:40:16,960
turn so upper left-hand corner

00:40:13,680 --> 00:40:18,000
um high accuracy the position we all

00:40:16,960 --> 00:40:19,440
want to be in

00:40:18,000 --> 00:40:22,079
your code is correct in your test pass

00:40:19,440 --> 00:40:23,440
hurrah success okay

00:40:22,079 --> 00:40:25,200
why have you gotten here because your

00:40:23,440 --> 00:40:26,240
tests are complete they're correct

00:40:25,200 --> 00:40:28,480
you've got the correct definition of the

00:40:26,240 --> 00:40:29,839
correct result all these good things

00:40:28,480 --> 00:40:31,599
that everyone's telling you to do you've

00:40:29,839 --> 00:40:32,960
done and your code is correct and your

00:40:31,599 --> 00:40:34,800
test results

00:40:32,960 --> 00:40:36,839
tell you that your code is correct this

00:40:34,800 --> 00:40:40,160
is a success ship it

00:40:36,839 --> 00:40:43,680
fantastic now let's go down

00:40:40,160 --> 00:40:44,960
to the false positive case all right

00:40:43,680 --> 00:40:47,359
false positive means your code is

00:40:44,960 --> 00:40:49,119
correct but your tests fail

00:40:47,359 --> 00:40:50,480
how does this happen brittle test

00:40:49,119 --> 00:40:51,760
someone fixed something

00:40:50,480 --> 00:40:53,200
and broke said this is the example

00:40:51,760 --> 00:40:54,720
before of the correct definition of the

00:40:53,200 --> 00:40:57,040
correct answer all right

00:40:54,720 --> 00:40:58,400
or you're depending on on non-guaranteed

00:40:57,040 --> 00:41:00,160
behavior depending on

00:40:58,400 --> 00:41:01,839
the order in which you iterate through

00:41:00,160 --> 00:41:02,480
something in a hash structure or

00:41:01,839 --> 00:41:04,720
something

00:41:02,480 --> 00:41:06,319
or it got broken under maintenance issue

00:41:04,720 --> 00:41:07,520
maintenance or you had insufficient test

00:41:06,319 --> 00:41:08,640
reviews or something the point is the

00:41:07,520 --> 00:41:11,280
code is correct

00:41:08,640 --> 00:41:13,200
the test is wrong this is a false alarm

00:41:11,280 --> 00:41:14,720
and the cost of this

00:41:13,200 --> 00:41:16,560
is wasted time because you have to go

00:41:14,720 --> 00:41:17,760
fix something

00:41:16,560 --> 00:41:19,599
although your code's correct and you

00:41:17,760 --> 00:41:21,680
could ship it so that's a false alarm

00:41:19,599 --> 00:41:23,280
okay now to contrast that let's go upper

00:41:21,680 --> 00:41:25,440
right this is the other

00:41:23,280 --> 00:41:27,280
low accuracy poor accuracy case which is

00:41:25,440 --> 00:41:29,119
your code isn't correct

00:41:27,280 --> 00:41:30,960
but your test pass what's this well your

00:41:29,119 --> 00:41:32,319
testing was incomplete

00:41:30,960 --> 00:41:33,599
some bugs were hiding someplace but you

00:41:32,319 --> 00:41:34,720
didn't shine the flashlight over there

00:41:33,599 --> 00:41:36,000
or you're testing in an unrealistic

00:41:34,720 --> 00:41:36,560
situation there's a whole area of the

00:41:36,000 --> 00:41:38,480
room

00:41:36,560 --> 00:41:40,000
that you didn't look in or you've got an

00:41:38,480 --> 00:41:41,599
overly generous definition right you

00:41:40,000 --> 00:41:42,880
opened up your error bars too much

00:41:41,599 --> 00:41:44,319
and you're looking right at a bug but

00:41:42,880 --> 00:41:45,280
you can't detect it all right you can't

00:41:44,319 --> 00:41:49,119
recognize it

00:41:45,280 --> 00:41:51,040
this is an undetected bug

00:41:49,119 --> 00:41:53,440
the risk here is that you ship something

00:41:51,040 --> 00:41:56,480
that isn't going to behave properly

00:41:53,440 --> 00:41:59,359
now just briefly let me point out

00:41:56,480 --> 00:42:00,640
that people are very rarely over in the

00:41:59,359 --> 00:42:02,000
upper left-hand corner where everyone

00:42:00,640 --> 00:42:03,680
wants to be i mean maybe you're there

00:42:02,000 --> 00:42:04,640
but at some point or another you're

00:42:03,680 --> 00:42:05,839
probably going to be in one of these

00:42:04,640 --> 00:42:08,560
other cases where you've either got a

00:42:05,839 --> 00:42:10,560
false alarm or an undetected bug

00:42:08,560 --> 00:42:11,920
fixing that's hard but at least you

00:42:10,560 --> 00:42:13,200
really ought to know which one of those

00:42:11,920 --> 00:42:16,880
is important for your

00:42:13,200 --> 00:42:18,560
industry okay if you're building a video

00:42:16,880 --> 00:42:20,160
game right shipping on time is important

00:42:18,560 --> 00:42:21,680
because you've had months of advertising

00:42:20,160 --> 00:42:23,359
and it cost you a lot of money

00:42:21,680 --> 00:42:24,880
if you don't ship if there's a bug on

00:42:23,359 --> 00:42:26,880
level 57 no one's gonna get there for

00:42:24,880 --> 00:42:30,720
weeks anyway you can patch it

00:42:26,880 --> 00:42:33,520
right no big deal so you'd much rather

00:42:30,720 --> 00:42:34,640
ship with bugs than miss a ship date all

00:42:33,520 --> 00:42:36,000
right

00:42:34,640 --> 00:42:38,160
on the other hand if you're building

00:42:36,000 --> 00:42:41,280
flight avionics or a medical device

00:42:38,160 --> 00:42:42,720
or something you're happy to miss a ship

00:42:41,280 --> 00:42:44,160
date well i don't know about happy but

00:42:42,720 --> 00:42:45,440
you're happier to miss a ship date

00:42:44,160 --> 00:42:47,200
than you are to ship something with a

00:42:45,440 --> 00:42:48,640
bug in it and if you start reading about

00:42:47,200 --> 00:42:50,720
this

00:42:48,640 --> 00:42:52,000
reading gets very grim all right uh go

00:42:50,720 --> 00:42:52,480
back and look at the patriot missile

00:42:52,000 --> 00:42:54,480
system

00:42:52,480 --> 00:42:55,760
in the second gulf war partly due to

00:42:54,480 --> 00:42:57,599
software errors

00:42:55,760 --> 00:42:59,040
we had two friendly fire incidents all

00:42:57,599 --> 00:43:00,720
right or if you really want something

00:42:59,040 --> 00:43:02,640
grim go look up the uh

00:43:00,720 --> 00:43:04,480
yeah it's the therak 25 computer

00:43:02,640 --> 00:43:06,400
controlled radiation therapy machine

00:43:04,480 --> 00:43:08,480
it's a cancer treatment machine and on

00:43:06,400 --> 00:43:10,319
several cases because of software issues

00:43:08,480 --> 00:43:12,160
it delivered massive overdoses of

00:43:10,319 --> 00:43:12,640
radiation cancer patients killing three

00:43:12,160 --> 00:43:15,680
people

00:43:12,640 --> 00:43:16,960
all right this is grim but those of us

00:43:15,680 --> 00:43:19,359
who work

00:43:16,960 --> 00:43:21,200
and that this absolutely has to work or

00:43:19,359 --> 00:43:22,560
someone dies

00:43:21,200 --> 00:43:24,319
you don't want to be in this situation

00:43:22,560 --> 00:43:26,560
now you may not be able to avoid

00:43:24,319 --> 00:43:28,160
having accuracy problems in fact

00:43:26,560 --> 00:43:30,240
everyone's going to hem at some point

00:43:28,160 --> 00:43:32,079
but knowing which position you'd rather

00:43:30,240 --> 00:43:33,359
be in tells you where you can spend

00:43:32,079 --> 00:43:36,560
those precious and scarce

00:43:33,359 --> 00:43:38,160
engineering resources to fix things

00:43:36,560 --> 00:43:39,839
okay it's very important to know which

00:43:38,160 --> 00:43:40,800
one you'd rather be in because you can

00:43:39,839 --> 00:43:42,800
spend

00:43:40,800 --> 00:43:45,280
money and time making sure you're in the

00:43:42,800 --> 00:43:47,520
one that you can live with

00:43:45,280 --> 00:43:48,319
all right finally let's go to that one

00:43:47,520 --> 00:43:50,640
down in

00:43:48,319 --> 00:43:53,440
in the lower corner there all right now

00:43:50,640 --> 00:43:53,440
this is in green

00:43:53,520 --> 00:43:56,560
although you may not be happy about it

00:43:55,280 --> 00:44:01,040
but this is a success

00:43:56,560 --> 00:44:02,640
your code is incorrect your tests fail

00:44:01,040 --> 00:44:04,240
that's a success all right your test

00:44:02,640 --> 00:44:04,960
just did what you wrote them to do they

00:44:04,240 --> 00:44:07,520
told you

00:44:04,960 --> 00:44:09,280
that you have a bug this is success now

00:44:07,520 --> 00:44:10,800
i'm not saying you're happy about it

00:44:09,280 --> 00:44:12,480
you may be very unhappy about this

00:44:10,800 --> 00:44:13,599
because you wanted to go home or you

00:44:12,480 --> 00:44:15,760
wanted to close the ticket

00:44:13,599 --> 00:44:18,079
but this is a success it needs to be

00:44:15,760 --> 00:44:20,000
celebrated as a success by the team

00:44:18,079 --> 00:44:22,720
it needs to be celebrated as a success

00:44:20,000 --> 00:44:25,040
by your management all right

00:44:22,720 --> 00:44:26,640
and if it isn't success treat it as a

00:44:25,040 --> 00:44:29,440
success by your management

00:44:26,640 --> 00:44:30,640
you might want to look elsewhere we're

00:44:29,440 --> 00:44:32,560
hiring okay

00:44:30,640 --> 00:44:34,160
um and i've been at places where this

00:44:32,560 --> 00:44:36,000
was a problem and it's like this is not

00:44:34,160 --> 00:44:37,440
going to lead to anywhere good if you

00:44:36,000 --> 00:44:39,760
are in some way punished or

00:44:37,440 --> 00:44:40,560
the results are bad that you found the

00:44:39,760 --> 00:44:43,119
test

00:44:40,560 --> 00:44:44,560
that is to say you found the signal from

00:44:43,119 --> 00:44:46,160
your experimental lab setup that you

00:44:44,560 --> 00:44:49,760
were trying to find with it

00:44:46,160 --> 00:44:52,160
now this is really where science

00:44:49,760 --> 00:44:54,960
gets interesting all right my favorite

00:44:52,160 --> 00:44:56,319
quote about science

00:44:54,960 --> 00:44:58,160
actually comes from randall monroe the

00:44:56,319 --> 00:44:59,119
guy who writes the xkcd comic and if you

00:44:58,160 --> 00:45:00,400
don't know about that

00:44:59,119 --> 00:45:01,839
go there because he's the only person

00:45:00,400 --> 00:45:03,280
who makes funny jokes about computer

00:45:01,839 --> 00:45:05,119
science

00:45:03,280 --> 00:45:07,359
but this is what he said you don't use

00:45:05,119 --> 00:45:10,480
science to show you're right

00:45:07,359 --> 00:45:12,160
you use science to become right this is

00:45:10,480 --> 00:45:13,760
a very profound statement and i can't

00:45:12,160 --> 00:45:16,240
tell you how true it is

00:45:13,760 --> 00:45:18,000
all right this is how science works and

00:45:16,240 --> 00:45:20,079
if we swap out science for unit

00:45:18,000 --> 00:45:21,920
tests we still get a very important

00:45:20,079 --> 00:45:22,560
statement you don't use unit tests to

00:45:21,920 --> 00:45:24,880
prove

00:45:22,560 --> 00:45:26,880
that you're well actually we do okay

00:45:24,880 --> 00:45:30,000
yeah well

00:45:26,880 --> 00:45:31,680
yeah we do but that's not

00:45:30,000 --> 00:45:33,280
really the point all right we use our

00:45:31,680 --> 00:45:36,240
unit tests

00:45:33,280 --> 00:45:37,920
to become correct right no one gets to

00:45:36,240 --> 00:45:39,680
that upper left-hand corner where we can

00:45:37,920 --> 00:45:41,599
ship it where everything's correct

00:45:39,680 --> 00:45:43,760
and your tests prove it and all that

00:45:41,599 --> 00:45:44,240
without having been down here a lot and

00:45:43,760 --> 00:45:45,599
finding

00:45:44,240 --> 00:45:47,760
all the bugs we didn't think about

00:45:45,599 --> 00:45:50,800
because you wrote good unit tests

00:45:47,760 --> 00:45:53,280
all right so if fedora can get

00:45:50,800 --> 00:45:54,720
religious about test-driven development

00:45:53,280 --> 00:45:56,400
i can get religious

00:45:54,720 --> 00:45:58,000
about this and say that this result is

00:45:56,400 --> 00:45:59,599
enlightenment you just learned something

00:45:58,000 --> 00:46:01,839
you needed to learn

00:45:59,599 --> 00:46:03,119
you're not happy about it but you

00:46:01,839 --> 00:46:06,240
learned it and that is

00:46:03,119 --> 00:46:08,400
absolutely crucial if you want to move

00:46:06,240 --> 00:46:09,760
from this form of accuracy to the other

00:46:08,400 --> 00:46:11,280
form of accuracy which is where

00:46:09,760 --> 00:46:15,839
everybody wants to be

00:46:11,280 --> 00:46:15,839
okay so

00:46:17,520 --> 00:46:22,319
that's accuracy let's try and wrap this

00:46:21,440 --> 00:46:24,480
up a little bit

00:46:22,319 --> 00:46:26,079
unit testing is science again it's a

00:46:24,480 --> 00:46:29,440
physical system

00:46:26,079 --> 00:46:31,839
and what you're doing is building a lab

00:46:29,440 --> 00:46:32,880
set up to measure a specific thing about

00:46:31,839 --> 00:46:35,680
that system

00:46:32,880 --> 00:46:36,319
which is do you have bugs not just unit

00:46:35,680 --> 00:46:38,960
testing

00:46:36,319 --> 00:46:41,599
all of your tests all right what you're

00:46:38,960 --> 00:46:43,280
doing is making a falsifiable hypothesis

00:46:41,599 --> 00:46:44,720
call it c all right that this code is

00:46:43,280 --> 00:46:47,920
correct

00:46:44,720 --> 00:46:48,880
you then write unit tests and attempt to

00:46:47,920 --> 00:46:50,880
show

00:46:48,880 --> 00:46:53,359
that it's wrong go find the bugs all

00:46:50,880 --> 00:46:54,720
right your confidence that c is true

00:46:53,359 --> 00:46:56,640
tracks the thoroughness of the test

00:46:54,720 --> 00:46:58,400
you've used to try to prove it false

00:46:56,640 --> 00:47:00,880
this is the scientific method as

00:46:58,400 --> 00:47:04,079
understood by modern philosophy

00:47:00,880 --> 00:47:05,680
okay now

00:47:04,079 --> 00:47:07,359
all of that advice you've been getting

00:47:05,680 --> 00:47:08,560
from all the other talks all that stuff

00:47:07,359 --> 00:47:10,720
put up that slide at the beginning with

00:47:08,560 --> 00:47:14,160
all the stuff on it uh you go listen to

00:47:10,720 --> 00:47:14,160
the other talks all the blog posts

00:47:14,800 --> 00:47:17,920
is there someplace kind of underneath

00:47:16,640 --> 00:47:19,200
that we can look to see where all that's

00:47:17,920 --> 00:47:20,640
coming from and i think there's two or

00:47:19,200 --> 00:47:22,480
maybe three places

00:47:20,640 --> 00:47:23,680
a lot of that advice comes from

00:47:22,480 --> 00:47:25,440
necessary process

00:47:23,680 --> 00:47:27,200
test driven development is a necessary

00:47:25,440 --> 00:47:30,240
process for a lot of reasons other than

00:47:27,200 --> 00:47:32,079
it makes you zero your scale okay making

00:47:30,240 --> 00:47:33,839
your test run fast you don't slow down

00:47:32,079 --> 00:47:36,319
your team's development cycle

00:47:33,839 --> 00:47:38,720
maybe your industry has regulatory

00:47:36,319 --> 00:47:40,559
requirements for unit test code coverage

00:47:38,720 --> 00:47:42,000
and so your company says look you must

00:47:40,559 --> 00:47:44,000
do it this way okay

00:47:42,000 --> 00:47:46,000
or it might be maintenance issues this

00:47:44,000 --> 00:47:47,599
is what uh the guys from google and the

00:47:46,000 --> 00:47:50,000
guys from bloomberg are usually talking

00:47:47,599 --> 00:47:52,480
about how do we write these tests

00:47:50,000 --> 00:47:53,839
so that they're still true and useful in

00:47:52,480 --> 00:47:57,359
five years and they don't

00:47:53,839 --> 00:47:59,839
represent an enormous maintenance burden

00:47:57,359 --> 00:48:01,599
on the development of our code okay

00:47:59,839 --> 00:48:03,200
that's really important to do all right

00:48:01,599 --> 00:48:05,440
most of black box testing is really

00:48:03,200 --> 00:48:08,400
about that okay but everything else

00:48:05,440 --> 00:48:09,760
i think this is an unproven hypothesis

00:48:08,400 --> 00:48:11,599
tell me wrong

00:48:09,760 --> 00:48:13,520
tell me if i'm wrong but everything else

00:48:11,599 --> 00:48:16,720
is about making

00:48:13,520 --> 00:48:18,000
good tests all right because we want to

00:48:16,720 --> 00:48:18,800
prove that our code is true and we know

00:48:18,000 --> 00:48:21,839
we can't really

00:48:18,800 --> 00:48:23,520
right i mean proving that your code is

00:48:21,839 --> 00:48:26,319
correct isn't that the halting

00:48:23,520 --> 00:48:28,000
problem right which is np hard i think

00:48:26,319 --> 00:48:29,599
someone with a phd in computer science

00:48:28,000 --> 00:48:29,920
can correct me on that i don't know that

00:48:29,599 --> 00:48:33,280
stuff

00:48:29,920 --> 00:48:36,400
i'm a physicist all right but

00:48:33,280 --> 00:48:39,599
you can't prove it true right

00:48:36,400 --> 00:48:42,960
but you can prove it false

00:48:39,599 --> 00:48:43,280
so what we are doing really is science

00:48:42,960 --> 00:48:45,599
in

00:48:43,280 --> 00:48:47,359
every way shape and form and given that

00:48:45,599 --> 00:48:48,960
we've got centuries of experience doing

00:48:47,359 --> 00:48:49,680
that whereas we've only got what 20 or

00:48:48,960 --> 00:48:52,640
00:48:49,680 --> 00:48:53,920
years of unit testing out of 20 years i

00:48:52,640 --> 00:48:55,920
don't know something like that

00:48:53,920 --> 00:48:56,960
right it isn't surprising that we might

00:48:55,920 --> 00:48:58,960
want to go look

00:48:56,960 --> 00:49:00,559
at what science has been up to since the

00:48:58,960 --> 00:49:02,400
late 1600s

00:49:00,559 --> 00:49:04,000
to see how they handle these problems

00:49:02,400 --> 00:49:05,119
okay

00:49:04,000 --> 00:49:06,240
a lot of this stuff has already been

00:49:05,119 --> 00:49:08,160
worked out we just have to figure out

00:49:06,240 --> 00:49:12,400
what it means for unit testing

00:49:08,160 --> 00:49:14,079
so to summarize

00:49:12,400 --> 00:49:16,480
what i'd like you to do with all of this

00:49:14,079 --> 00:49:19,119
is remember that you must test

00:49:16,480 --> 00:49:20,000
right even if you can't do all this go

00:49:19,119 --> 00:49:22,640
write your tests

00:49:20,000 --> 00:49:23,839
you're lost without having good tests go

00:49:22,640 --> 00:49:27,040
forth

00:49:23,839 --> 00:49:31,839
write good tests and do good science

00:49:27,040 --> 00:49:35,359
thank you

00:49:31,839 --> 00:49:37,280
now i'm looking over here and i've got

00:49:35,359 --> 00:49:38,960
question after question after question

00:49:37,280 --> 00:49:42,000
which isn't really surprising give me

00:49:38,960 --> 00:49:42,000
just a second here

00:49:42,800 --> 00:49:47,200
uh let's see not unit testing do we have

00:49:44,720 --> 00:49:49,200
to use the scientific method

00:49:47,200 --> 00:49:50,319
in testing highly complex systems ai

00:49:49,200 --> 00:49:53,760
that was

00:49:50,319 --> 00:49:55,280
learning for 10 years so

00:49:53,760 --> 00:49:56,880
okay you got an ai that's been learning

00:49:55,280 --> 00:49:58,000
for 10 years now how do you characterize

00:49:56,880 --> 00:49:59,920
what's true i think it gets

00:49:58,000 --> 00:50:02,800
back to that in part how do you know

00:49:59,920 --> 00:50:05,920
it's giving you good answers

00:50:02,800 --> 00:50:10,400
well you can argue that a sufficiently

00:50:05,920 --> 00:50:12,559
advanced ai is maybe more like

00:50:10,400 --> 00:50:13,839
asking a person than a computer program

00:50:12,559 --> 00:50:15,520
because

00:50:13,839 --> 00:50:17,040
i don't know anything about ai but my

00:50:15,520 --> 00:50:18,319
understanding is a lot of times you've

00:50:17,040 --> 00:50:19,920
trained to do something but you don't

00:50:18,319 --> 00:50:21,119
really know how it does what it does you

00:50:19,920 --> 00:50:22,240
just know it's trained and it gives you

00:50:21,119 --> 00:50:24,559
good answers

00:50:22,240 --> 00:50:26,480
well look you've got developers you work

00:50:24,559 --> 00:50:27,599
with they've been trained for years

00:50:26,480 --> 00:50:29,760
how do you know they give you good

00:50:27,599 --> 00:50:32,319
answers right uh

00:50:29,760 --> 00:50:34,160
you you might be at some point reduced

00:50:32,319 --> 00:50:35,119
to doing psychology on your ai to make

00:50:34,160 --> 00:50:36,640
sure that it actually knows what the

00:50:35,119 --> 00:50:38,800
hell it's talking about

00:50:36,640 --> 00:50:41,040
um that scares me and there are people

00:50:38,800 --> 00:50:42,960
at my company that do ai research and i

00:50:41,040 --> 00:50:44,640
i don't know that's that's a tough

00:50:42,960 --> 00:50:46,000
question that's a good one all right

00:50:44,640 --> 00:50:49,200
hang on here let's see

00:50:46,000 --> 00:50:49,680
uh let's see introducing bug checking

00:50:49,200 --> 00:50:51,599
units

00:50:49,680 --> 00:50:53,280
it's base of mutation yes mutation

00:50:51,599 --> 00:50:55,040
testing is

00:50:53,280 --> 00:50:56,880
kind of that calibration that i was

00:50:55,040 --> 00:50:58,559
talking about i had the picture of the

00:50:56,880 --> 00:51:00,240
the weight on the scale it's that

00:50:58,559 --> 00:51:01,440
written large and i know nothing about

00:51:00,240 --> 00:51:03,280
it but if it's something where you go

00:51:01,440 --> 00:51:04,319
and make sort of random changes to your

00:51:03,280 --> 00:51:06,800
code

00:51:04,319 --> 00:51:08,480
and watch it break yeah you are that's

00:51:06,800 --> 00:51:11,920
exactly an extremely

00:51:08,480 --> 00:51:12,720
thorough calibration exercise to make

00:51:11,920 --> 00:51:15,599
sure that

00:51:12,720 --> 00:51:16,880
your tests can catch all the stuff that

00:51:15,599 --> 00:51:19,200
they're supposed to catch right that's

00:51:16,880 --> 00:51:22,720
exactly what that is

00:51:19,200 --> 00:51:23,359
okay um yeah that's you're exactly right

00:51:22,720 --> 00:51:24,960
let's see

00:51:23,359 --> 00:51:26,400
how white box testing work with external

00:51:24,960 --> 00:51:28,319
dependencies like underlying private

00:51:26,400 --> 00:51:32,240
classes or external devices

00:51:28,319 --> 00:51:32,240
oof yeah so

00:51:32,720 --> 00:51:36,240
the black box testing is hard and it's

00:51:34,400 --> 00:51:37,119
way you have to mock things

00:51:36,240 --> 00:51:38,480
because it depends i mean it's

00:51:37,119 --> 00:51:40,000
complicated all right which there are a

00:51:38,480 --> 00:51:42,400
lot of other good thoughts about

00:51:40,000 --> 00:51:43,839
start by the talks previous this week go

00:51:42,400 --> 00:51:44,960
to some of those talks i put on my first

00:51:43,839 --> 00:51:46,240
slide and by the way i don't have them

00:51:44,960 --> 00:51:46,720
yet but when these slides go up i'll

00:51:46,240 --> 00:51:48,960
have

00:51:46,720 --> 00:51:50,400
uh more extensive links on this slide

00:51:48,960 --> 00:51:53,599
after the one that's up now

00:51:50,400 --> 00:51:55,440
um yeah

00:51:53,599 --> 00:51:56,800
so there are times when you're up

00:51:55,440 --> 00:51:58,160
against the wall and none of the good

00:51:56,800 --> 00:51:59,440
advice works and you have to go do the

00:51:58,160 --> 00:52:01,440
thing you're not supposed to do

00:51:59,440 --> 00:52:03,280
white box testing all right i've seen

00:52:01,440 --> 00:52:04,160
math code that's got a huge chunk of

00:52:03,280 --> 00:52:05,760
math

00:52:04,160 --> 00:52:07,200
and we'd love to break it apart and unit

00:52:05,760 --> 00:52:08,720
test it to make sure this coordinate

00:52:07,200 --> 00:52:10,160
transform works and this

00:52:08,720 --> 00:52:11,839
but we can't because breaking it apart

00:52:10,160 --> 00:52:13,119
makes the code worse

00:52:11,839 --> 00:52:15,680
and it slows it down because you can't

00:52:13,119 --> 00:52:17,599
hang on to your intermediate results

00:52:15,680 --> 00:52:20,480
white box test it's your best option my

00:52:17,599 --> 00:52:23,599
project right now is an extremely legacy

00:52:20,480 --> 00:52:26,720
uh uh thing half a million lines

00:52:23,599 --> 00:52:28,960
um there's 477 in there

00:52:26,720 --> 00:52:30,240
you know what white box testing is great

00:52:28,960 --> 00:52:32,640
we have unit tested

00:52:30,240 --> 00:52:33,440
0.1 of it and it's totally saved our

00:52:32,640 --> 00:52:36,240
butts

00:52:33,440 --> 00:52:37,280
but oh it's ugly tests but hey it's what

00:52:36,240 --> 00:52:40,400
you have to do

00:52:37,280 --> 00:52:42,720
um testing hardware drivers for

00:52:40,400 --> 00:52:44,240
hardware i don't know about that's

00:52:42,720 --> 00:52:47,599
that's a that's a good one

00:52:44,240 --> 00:52:49,280
can you mock it can you come up with a

00:52:47,599 --> 00:52:50,960
piece of hardware that isn't the real

00:52:49,280 --> 00:52:54,000
hardware but acts like it enough but

00:52:50,960 --> 00:52:56,640
gives you known results

00:52:54,000 --> 00:52:57,440
that's a good one that's tough that's a

00:52:56,640 --> 00:53:01,119
tough one

00:52:57,440 --> 00:53:02,880
uh let's see black box testing yeah

00:53:01,119 --> 00:53:04,160
black box testing has that worse white

00:53:02,880 --> 00:53:05,920
box testing still has it but at least

00:53:04,160 --> 00:53:08,880
you can go in and rewire something

00:53:05,920 --> 00:53:09,599
black box testing yeah mocks are your

00:53:08,880 --> 00:53:11,920
first

00:53:09,599 --> 00:53:11,920
guess

00:53:12,880 --> 00:53:16,720
i don't know how much time we've got

00:53:14,480 --> 00:53:19,119
left um

00:53:16,720 --> 00:53:20,960
there are some things you can do to your

00:53:19,119 --> 00:53:22,480
initial design to make it easier to mock

00:53:20,960 --> 00:53:23,359
or to easier to test and some people

00:53:22,480 --> 00:53:25,200
will argue

00:53:23,359 --> 00:53:26,960
oh i don't want to i've got this

00:53:25,200 --> 00:53:28,160
beautiful design i love my design but

00:53:26,960 --> 00:53:29,520
it's hard to test but i don't care i

00:53:28,160 --> 00:53:31,119
shouldn't have to test for design

00:53:29,520 --> 00:53:33,119
i will tell you i used to be in that way

00:53:31,119 --> 00:53:35,760
back when we had this beautiful

00:53:33,119 --> 00:53:37,280
uh uh software um that was very

00:53:35,760 --> 00:53:38,160
carefully designed it was beautiful and

00:53:37,280 --> 00:53:39,440
you liked it

00:53:38,160 --> 00:53:40,720
but you couldn't test it and then we

00:53:39,440 --> 00:53:42,400
started doing units back when i first

00:53:40,720 --> 00:53:44,079
started doing unit testing

00:53:42,400 --> 00:53:45,599
and we resisted we started doing the

00:53:44,079 --> 00:53:47,200
defined private public all right

00:53:45,599 --> 00:53:48,720
because like it's the only way we can't

00:53:47,200 --> 00:53:49,920
get in to look at what we want to get

00:53:48,720 --> 00:53:51,280
into

00:53:49,920 --> 00:53:52,800
and it took us a while to realize that

00:53:51,280 --> 00:53:53,280
every time we just bit the bullet and

00:53:52,800 --> 00:53:57,119
changed

00:53:53,280 --> 00:53:58,640
our design to let us test it

00:53:57,119 --> 00:54:01,040
the design got better in ways that

00:53:58,640 --> 00:54:04,000
totally surprised us

00:54:01,040 --> 00:54:04,559
design for testability that's a big

00:54:04,000 --> 00:54:05,599
design

00:54:04,559 --> 00:54:07,599
all the other things you're supposed to

00:54:05,599 --> 00:54:09,040
do do that too designed by testability

00:54:07,599 --> 00:54:10,960
isn't an afterthought

00:54:09,040 --> 00:54:12,240
if you can design it up front this makes

00:54:10,960 --> 00:54:13,520
this at least much easier to deal with

00:54:12,240 --> 00:54:15,200
but even then

00:54:13,520 --> 00:54:16,559
there are times okay there are times

00:54:15,200 --> 00:54:18,240
when you got to pull out the white box

00:54:16,559 --> 00:54:18,800
or or do something crazy all right it

00:54:18,240 --> 00:54:20,480
happens

00:54:18,800 --> 00:54:21,920
when your back's up against the wall all

00:54:20,480 --> 00:54:22,839
right you got to go do it all right let

00:54:21,920 --> 00:54:26,079
me see

00:54:22,839 --> 00:54:29,280
um okay that's all the questions i see

00:54:26,079 --> 00:54:30,880
right now um i

00:54:29,280 --> 00:54:32,880
don't know how much time we've got left

00:54:30,880 --> 00:54:35,200
so we'll call it good here

00:54:32,880 --> 00:54:37,599
um i'll meet you wherever we said we're

00:54:35,200 --> 00:54:39,440
gonna meet you in the virtual room

00:54:37,599 --> 00:54:40,799
and if you're watching this a month from

00:54:39,440 --> 00:54:43,040
now on youtube

00:54:40,799 --> 00:54:44,559
uh comments down below tell me i'm wrong

00:54:43,040 --> 00:54:46,079
tell me i'm right

00:54:44,559 --> 00:54:48,400
tell me that the halting problem is an

00:54:46,079 --> 00:54:53,839
np hard whatever you want to tell me

00:54:48,400 --> 00:54:53,839
all right thank you very much

00:55:10,160 --> 00:55:12,240

YouTube URL: https://www.youtube.com/watch?v=FjwayiHNI1w


