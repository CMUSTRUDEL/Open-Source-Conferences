Title: C++ Committee's Library Evolution Working Group - Hosted By Bryce Adelstein Lelbach - CppCon 2020
Publication date: 2020-10-05
Playlist: CppCon 2020 Day 4
Description: 
	https://cppcon.org/
https://github.com/CppCon/CppCon2020
---
Come join the leaders of the C++ Committee's Library Evolution Working Group to discuss the latest developments in and future of the C++ Standard Library.

---
Hosted By Bryce Adelstein Lelbach

Panel:

Bryce Adelstein Lelbach
NVIDIA
CUDA C++ Core Libraries Lead
San Francisco Bay Area

Inbal Levi
SolarEdge
Software Engineer

Fabio Fracassi
CODE University of Applied Sciences
Senior Lecturer
Berlin

Nevin Liber
Argonne National Laboratory
Computer Scientist
Chicago

---
Streamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:08,880 --> 00:00:13,360
hello everybody

00:00:10,000 --> 00:00:16,400
my name is bryce adelstein lolbach

00:00:13,360 --> 00:00:18,480
i am the chair of the c plus

00:00:16,400 --> 00:00:19,760
standard committee's library evolution

00:00:18,480 --> 00:00:23,039
working group

00:00:19,760 --> 00:00:26,240
and i work at nvidia

00:00:23,039 --> 00:00:27,039
on our hpc compiler team and i also lead

00:00:26,240 --> 00:00:30,640
our

00:00:27,039 --> 00:00:33,280
standard library team at nvidia

00:00:30,640 --> 00:00:35,200
so today i've got some of my colleagues

00:00:33,280 --> 00:00:37,680
from the library evolution

00:00:35,200 --> 00:00:41,280
leadership here with me to answer your

00:00:37,680 --> 00:00:43,760
questions about the standard library

00:00:41,280 --> 00:00:44,800
and the future of seatbelts plus um so

00:00:43,760 --> 00:00:46,480
first i'm going to have everybody go

00:00:44,800 --> 00:00:48,000
around and introduce themselves and then

00:00:46,480 --> 00:00:51,039
we'll get to your questions

00:00:48,000 --> 00:00:54,399
um inbol you want to go first sure

00:00:51,039 --> 00:00:58,000
thank you bryce my name is inval evie

00:00:54,399 --> 00:01:01,359
i'm the chair of national body in israel

00:00:58,000 --> 00:01:04,159
and i'm also participating in

00:01:01,359 --> 00:01:05,360
managing the mailing list for library

00:01:04,159 --> 00:01:09,040
revolution

00:01:05,360 --> 00:01:12,799
i think i'm probably the most recent

00:01:09,040 --> 00:01:16,799
member that is latest joints so

00:01:12,799 --> 00:01:16,799
i'm really enjoying this thank you

00:01:17,600 --> 00:01:20,960
all right fabia you want to go next yeah

00:01:20,479 --> 00:01:23,920
hi

00:01:20,960 --> 00:01:26,000
i'm fabio fragassi i'm a lecturer at

00:01:23,920 --> 00:01:27,040
code university of applied science in

00:01:26,000 --> 00:01:30,400
berlin

00:01:27,040 --> 00:01:30,960
i'm the chair of the german national

00:01:30,400 --> 00:01:34,479
body

00:01:30,960 --> 00:01:37,200
and together with bryce i started to

00:01:34,479 --> 00:01:41,360
i'm now the vice chair of the library

00:01:37,200 --> 00:01:44,640
evolution working group

00:01:41,360 --> 00:01:47,040
okay and uh evan you want to go sure

00:01:44,640 --> 00:01:48,720
i'm nevin lieber i work at argonne

00:01:47,040 --> 00:01:52,320
national laboratory

00:01:48,720 --> 00:01:54,640
on the cocos team i'm also on the

00:01:52,320 --> 00:01:56,079
sickle committee and for the plus

00:01:54,640 --> 00:01:58,880
committee i am the vice chair of the

00:01:56,079 --> 00:02:00,960
library evolution incubator group

00:01:58,880 --> 00:02:03,600
i've been doing standardization for a

00:02:00,960 --> 00:02:03,600
decade now

00:02:04,079 --> 00:02:10,800
okay cool all right we don't

00:02:08,319 --> 00:02:11,599
seem to have any questions yet in the q

00:02:10,800 --> 00:02:14,480
a so there's

00:02:11,599 --> 00:02:16,560
so if you have any questions go to the

00:02:14,480 --> 00:02:20,640
little q a box

00:02:16,560 --> 00:02:23,440
and go ahead and put them in there um

00:02:20,640 --> 00:02:24,480
i will start us all off with a question

00:02:23,440 --> 00:02:27,040
that almost always

00:02:24,480 --> 00:02:28,400
comes up in some way shape or form uh

00:02:27,040 --> 00:02:31,920
what belongs

00:02:28,400 --> 00:02:31,920
in the standard library

00:02:32,560 --> 00:02:37,840
who wants to wants to start

00:02:39,120 --> 00:02:45,360
nevin sure so i think things like common

00:02:42,800 --> 00:02:46,959
vocabulary types certainly belong

00:02:45,360 --> 00:02:48,640
things like you know interface types

00:02:46,959 --> 00:02:51,120
like string view and spam belong in the

00:02:48,640 --> 00:02:52,720
standard library

00:02:51,120 --> 00:02:54,319
common containers like vectors certainly

00:02:52,720 --> 00:02:55,920
belong in there as well because

00:02:54,319 --> 00:02:57,599
the kind of things most people need to

00:02:55,920 --> 00:03:01,120
use

00:02:57,599 --> 00:03:02,400
algorithms belong in there because again

00:03:01,120 --> 00:03:03,680
well not everybody you know jumps on

00:03:02,400 --> 00:03:05,120
board of algorithms eventually most

00:03:03,680 --> 00:03:07,360
people do come around to using them as

00:03:05,120 --> 00:03:07,360
well

00:03:08,080 --> 00:03:12,640
and so after that you know it gets too

00:03:11,200 --> 00:03:13,760
much more debate about you know whether

00:03:12,640 --> 00:03:14,640
something should be in the center

00:03:13,760 --> 00:03:16,319
library or not because it

00:03:14,640 --> 00:03:18,720
doesn't have enough of an audience for

00:03:16,319 --> 00:03:20,800
us to standardize it

00:03:18,720 --> 00:03:23,040
the downsides for standardizing things

00:03:20,800 --> 00:03:24,080
is it takes us a long time to change and

00:03:23,040 --> 00:03:26,640
it's very hard for us to make

00:03:24,080 --> 00:03:29,200
corrections because we have to maintain

00:03:26,640 --> 00:03:31,840
99 backwards compatibility so we can't

00:03:29,200 --> 00:03:35,040
respond as fast as

00:03:31,840 --> 00:03:35,040
as individuals we would like to

00:03:36,799 --> 00:03:42,640
fabio or enbol you wanna take a

00:03:39,840 --> 00:03:42,640
take a stab at it

00:03:44,159 --> 00:03:49,519
so i i would be a fan of

00:03:47,200 --> 00:03:50,799
having lots and lots of stuff in the

00:03:49,519 --> 00:03:53,680
standard library

00:03:50,799 --> 00:03:54,720
um simply for example for for

00:03:53,680 --> 00:03:57,760
teachability

00:03:54,720 --> 00:03:58,239
i i teach uh young students and and it's

00:03:57,760 --> 00:03:59,920
always

00:03:58,239 --> 00:04:02,000
easier to teach something if it's

00:03:59,920 --> 00:04:04,480
standardized because then i can

00:04:02,000 --> 00:04:06,319
count upon that being there that every

00:04:04,480 --> 00:04:08,239
compiler supports it

00:04:06,319 --> 00:04:09,360
and and that i don't have to teach

00:04:08,239 --> 00:04:12,319
additional stuff

00:04:09,360 --> 00:04:13,200
outside of the language um that helps a

00:04:12,319 --> 00:04:16,079
lot

00:04:13,200 --> 00:04:17,919
but on the other hand it's also very

00:04:16,079 --> 00:04:20,479
difficult and time consuming to

00:04:17,919 --> 00:04:22,400
standardize anything so

00:04:20,479 --> 00:04:24,240
first of course the thing that we want

00:04:22,400 --> 00:04:27,040
to standardize should be stable

00:04:24,240 --> 00:04:27,680
that means it it's not likely that it

00:04:27,040 --> 00:04:30,960
changes

00:04:27,680 --> 00:04:32,160
over the next 10 years or so if we have

00:04:30,960 --> 00:04:35,360
something like

00:04:32,160 --> 00:04:37,919
um like cryptography or so

00:04:35,360 --> 00:04:38,479
which is likely uh that it needs lots of

00:04:37,919 --> 00:04:40,960
updates

00:04:38,479 --> 00:04:42,639
over the next 10 years um that's

00:04:40,960 --> 00:04:44,400
probably not a good candidate for

00:04:42,639 --> 00:04:47,600
standardization even though it would be

00:04:44,400 --> 00:04:50,240
immensely useful to have it

00:04:47,600 --> 00:04:51,919
yeah so that's that's kind of the

00:04:50,240 --> 00:04:54,320
trade-off you always have

00:04:51,919 --> 00:04:55,120
but other than that yeah i totally agree

00:04:54,320 --> 00:04:58,880
with nevin

00:04:55,120 --> 00:05:01,280
like vocabulary types and generally

00:04:58,880 --> 00:05:02,560
also things that are very hard for users

00:05:01,280 --> 00:05:05,199
to get right

00:05:02,560 --> 00:05:06,800
um that's always a good point for

00:05:05,199 --> 00:05:08,960
standardization

00:05:06,800 --> 00:05:10,160
or that's so trivial that everyone

00:05:08,960 --> 00:05:12,560
writes it and has

00:05:10,160 --> 00:05:15,199
their own variant that's also a good

00:05:12,560 --> 00:05:15,199
candidate

00:05:15,919 --> 00:05:25,759
yeah sure uh so i

00:05:19,919 --> 00:05:25,759
really uh as i mentioned in the latest i

00:05:26,240 --> 00:05:32,400
really i think i was really

00:05:29,280 --> 00:05:35,440
a bit surprised about

00:05:32,400 --> 00:05:37,680
you know how do you

00:05:35,440 --> 00:05:40,320
how do you think of what should be part

00:05:37,680 --> 00:05:44,320
of the stun what standard can really

00:05:40,320 --> 00:05:46,639
do and not do when you

00:05:44,320 --> 00:05:48,160
and first of all clearly uh all the

00:05:46,639 --> 00:05:50,160
things that are important

00:05:48,160 --> 00:05:53,600
to the majority of simple splash

00:05:50,160 --> 00:05:56,080
developers this is an obvious answer but

00:05:53,600 --> 00:05:58,160
it's it's not that i think it's not that

00:05:56,080 --> 00:06:01,360
simple of an answer to

00:05:58,160 --> 00:06:05,280
a simple topic to answer because um

00:06:01,360 --> 00:06:08,720
just like a few recent surveys you

00:06:05,280 --> 00:06:11,759
you'd think that um some topics

00:06:08,720 --> 00:06:13,360
that like uh people don't use exceptions

00:06:11,759 --> 00:06:14,880
you would think that that's something

00:06:13,360 --> 00:06:16,720
that doesn't happen a lot but there's

00:06:14,880 --> 00:06:19,360
like over 50

00:06:16,720 --> 00:06:20,319
of the developers just you know just as

00:06:19,360 --> 00:06:24,639
an example

00:06:20,319 --> 00:06:27,759
for a topic that uh so so i think really

00:06:24,639 --> 00:06:28,639
whatever that needs to be addressed for

00:06:27,759 --> 00:06:31,840
the majority

00:06:28,639 --> 00:06:34,160
of the developers clearly and because

00:06:31,840 --> 00:06:35,120
once you you put something in your

00:06:34,160 --> 00:06:37,440
standard you get

00:06:35,120 --> 00:06:40,080
the support of the whole community of

00:06:37,440 --> 00:06:40,080
sql spots

00:06:40,400 --> 00:06:43,759
for me i think that it really comes down

00:06:42,479 --> 00:06:47,120
to

00:06:43,759 --> 00:06:50,639
what things cannot go anywhere else

00:06:47,120 --> 00:06:52,160
so vocabulary types it's it's really

00:06:50,639 --> 00:06:53,680
difficult for them to go anywhere else

00:06:52,160 --> 00:06:56,240
because the whole idea of vocabulary

00:06:53,680 --> 00:06:58,080
types is that it it's a it's a common

00:06:56,240 --> 00:07:00,000
type that you can use across multiple

00:06:58,080 --> 00:07:01,440
different libraries you know if

00:07:00,000 --> 00:07:03,280
three different libraries i use have a

00:07:01,440 --> 00:07:04,960
different string type it's really

00:07:03,280 --> 00:07:06,000
painful for me to have to deal with all

00:07:04,960 --> 00:07:07,599
of them

00:07:06,000 --> 00:07:09,280
and of course there's some library

00:07:07,599 --> 00:07:11,360
features that require

00:07:09,280 --> 00:07:13,039
compiler support or that are really just

00:07:11,360 --> 00:07:14,639
language features masquerading as

00:07:13,039 --> 00:07:16,639
library features and so obviously those

00:07:14,639 --> 00:07:18,479
have to go in and then there's a lot of

00:07:16,639 --> 00:07:19,360
things that are abstractions around the

00:07:18,479 --> 00:07:22,720
platform

00:07:19,360 --> 00:07:25,360
where the the only or the best

00:07:22,720 --> 00:07:27,280
provider of that implementation is the

00:07:25,360 --> 00:07:28,960
person who's providing your compiler so

00:07:27,280 --> 00:07:32,560
things like threads

00:07:28,960 --> 00:07:35,840
mutexes etc so we have a

00:07:32,560 --> 00:07:37,599
question that's sort of in that same uh

00:07:35,840 --> 00:07:40,000
on the same topic which is how do we

00:07:37,599 --> 00:07:42,160
prioritize making changes to the

00:07:40,000 --> 00:07:44,720
standard library

00:07:42,160 --> 00:07:47,039
does anybody want to take a stab at that

00:07:44,720 --> 00:07:47,039
first

00:07:48,879 --> 00:07:53,120
it's not easy because i mean everyone

00:07:51,280 --> 00:07:56,160
has their own priorities

00:07:53,120 --> 00:07:59,840
um and um yeah

00:07:56,160 --> 00:08:03,360
we we have a plan

00:07:59,840 --> 00:08:07,120
a document that all of the committee has

00:08:03,360 --> 00:08:08,800
voted on to prioritize so that came as a

00:08:07,120 --> 00:08:11,199
draft with

00:08:08,800 --> 00:08:14,000
writing down most of the priorities that

00:08:11,199 --> 00:08:16,720
everyone understood what we wanted to do

00:08:14,000 --> 00:08:19,120
and then we voted that we actually are

00:08:16,720 --> 00:08:22,560
sticking to those priorities

00:08:19,120 --> 00:08:26,720
um but in in the smaller

00:08:22,560 --> 00:08:29,039
um and yeah that's a very big and very

00:08:26,720 --> 00:08:32,240
cost plan but in in details

00:08:29,039 --> 00:08:35,760
we usually have also to to

00:08:32,240 --> 00:08:38,399
come to a compromise there and then

00:08:35,760 --> 00:08:39,440
we just um look at the different papers

00:08:38,399 --> 00:08:42,399
we have

00:08:39,440 --> 00:08:42,800
and if we have too many to to fit in

00:08:42,399 --> 00:08:45,760
then

00:08:42,800 --> 00:08:46,240
we prioritize them by by voting which

00:08:45,760 --> 00:08:49,279
one

00:08:46,240 --> 00:08:49,600
has a higher priority well to be fair i

00:08:49,279 --> 00:08:51,279
mean

00:08:49,600 --> 00:08:53,519
we didn't do a good job on that in cbs

00:08:51,279 --> 00:08:54,000
plus 20. there's a bunch of libraries

00:08:53,519 --> 00:08:57,040
that that

00:08:54,000 --> 00:08:58,640
got approved from library evolution

00:08:57,040 --> 00:09:01,120
that the library working group just ran

00:08:58,640 --> 00:09:02,399
out of time to get to

00:09:01,120 --> 00:09:04,399
and not necessarily you know on any

00:09:02,399 --> 00:09:05,120
priority order it's just they run out of

00:09:04,399 --> 00:09:07,120
time so

00:09:05,120 --> 00:09:08,560
they didn't chip and we know we need to

00:09:07,120 --> 00:09:11,200
get better at that

00:09:08,560 --> 00:09:12,160
and c plus plus 23 is so we developed

00:09:11,200 --> 00:09:14,640
this plan

00:09:12,160 --> 00:09:15,920
um for c plus plus 20 but it was later

00:09:14,640 --> 00:09:18,240
in the cycle c plus

00:09:15,920 --> 00:09:19,040
23 is the first standard where we've had

00:09:18,240 --> 00:09:22,480
this

00:09:19,040 --> 00:09:25,519
plan that has very concrete

00:09:22,480 --> 00:09:29,600
um goals and deliverables um in

00:09:25,519 --> 00:09:33,120
in buckets of of of um

00:09:29,600 --> 00:09:35,680
of priorities of work um and also

00:09:33,120 --> 00:09:37,839
fits within our um you know our train

00:09:35,680 --> 00:09:40,720
schedule you know c plus plus

00:09:37,839 --> 00:09:42,320
11 also sort of was feature driven this

00:09:40,720 --> 00:09:43,200
isn't to suggest that i'm not trying to

00:09:42,320 --> 00:09:44,640
suggest that

00:09:43,200 --> 00:09:46,240
us having a plan means we're feature

00:09:44,640 --> 00:09:47,440
driven we're still schedule driven

00:09:46,240 --> 00:09:49,440
but this is the first time we've really

00:09:47,440 --> 00:09:52,240
had a plan and so i think

00:09:49,440 --> 00:09:52,560
that's um it's really helped us focus

00:09:52,240 --> 00:09:56,160
for

00:09:52,560 --> 00:09:56,959
for seepless 23. um and we're actually

00:09:56,160 --> 00:10:01,040
uh

00:09:56,959 --> 00:10:02,560
next week um uh in the library evolution

00:10:01,040 --> 00:10:03,519
weekly meeting we're going to be talking

00:10:02,560 --> 00:10:05,920
a bit about

00:10:03,519 --> 00:10:07,440
how we can get better at prioritizing

00:10:05,920 --> 00:10:08,720
things there's a few different systems

00:10:07,440 --> 00:10:10,399
that we can have for it

00:10:08,720 --> 00:10:12,320
and one thing we're going to try to do

00:10:10,399 --> 00:10:13,120
going forward is make sure that every

00:10:12,320 --> 00:10:15,360
proposal

00:10:13,120 --> 00:10:17,519
when when we're reviewing it that we

00:10:15,360 --> 00:10:18,959
also try to assign a priority to it and

00:10:17,519 --> 00:10:22,720
we try to

00:10:18,959 --> 00:10:27,040
categorize it you know is it a bug fix

00:10:22,720 --> 00:10:28,800
um is it a new feature etc

00:10:27,040 --> 00:10:30,880
but um yeah it's certainly something

00:10:28,800 --> 00:10:31,440
that we we've had to learn to get better

00:10:30,880 --> 00:10:33,760
with as

00:10:31,440 --> 00:10:35,120
interest in c plus plus has really

00:10:33,760 --> 00:10:38,560
exploded in the past

00:10:35,120 --> 00:10:41,279
few years and as the committee has grown

00:10:38,560 --> 00:10:41,920
we have a limited amount of things we

00:10:41,279 --> 00:10:44,079
can get

00:10:41,920 --> 00:10:45,120
done we have to use our time very

00:10:44,079 --> 00:10:47,120
cautiously

00:10:45,120 --> 00:10:48,720
and we have to we have to learn how to

00:10:47,120 --> 00:10:50,880
say no to some things and that's

00:10:48,720 --> 00:10:54,160
that's very hard but we can't we can't

00:10:50,880 --> 00:10:54,160
do all of the things

00:10:54,399 --> 00:10:58,880
and i would just love to add that i

00:10:56,399 --> 00:11:02,720
think the pandemic really had a

00:10:58,880 --> 00:11:07,120
role in in helping reorganizing the

00:11:02,720 --> 00:11:10,399
um the the facilities or the

00:11:07,120 --> 00:11:11,040
the way they prioritize because i think

00:11:10,399 --> 00:11:13,519
that

00:11:11,040 --> 00:11:14,720
you know the the new situation have

00:11:13,519 --> 00:11:19,760
actually

00:11:14,720 --> 00:11:22,880
um affected what we can and can't do

00:11:19,760 --> 00:11:25,120
yeah one

00:11:22,880 --> 00:11:27,200
one of the one of the things that we're

00:11:25,120 --> 00:11:29,040
doing that i think has greatly helped us

00:11:27,200 --> 00:11:31,839
and will really help us going forward is

00:11:29,040 --> 00:11:33,360
previously there was more or less one

00:11:31,839 --> 00:11:35,680
person that was you know

00:11:33,360 --> 00:11:37,360
running each one of the groups and now

00:11:35,680 --> 00:11:39,600
we have multiple people and in fact

00:11:37,360 --> 00:11:41,600
library evolution has

00:11:39,600 --> 00:11:42,880
a group of sort of eight core people

00:11:41,600 --> 00:11:44,800
that are

00:11:42,880 --> 00:11:46,320
either chairs or that are running the

00:11:44,800 --> 00:11:48,160
mailing list reviews

00:11:46,320 --> 00:11:49,760
um and we've also got things like our

00:11:48,160 --> 00:11:52,560
incubator system

00:11:49,760 --> 00:11:54,399
um that we've been using to sort of help

00:11:52,560 --> 00:11:57,200
us

00:11:54,399 --> 00:11:58,880
develop new ideas and and make sure that

00:11:57,200 --> 00:11:59,920
we use our time as efficiently as

00:11:58,880 --> 00:12:01,279
possible and that we can

00:11:59,920 --> 00:12:02,959
we can bring you things you can either

00:12:01,279 --> 00:12:03,360
say no early or to get things in shape

00:12:02,959 --> 00:12:06,000
from

00:12:03,360 --> 00:12:06,000
the bigger groups

00:12:07,519 --> 00:12:13,920
all right let's take another question um

00:12:11,519 --> 00:12:15,680
could we get const expert versions of

00:12:13,920 --> 00:12:18,959
standard math functions

00:12:15,680 --> 00:12:20,959
like square root cosine etc so on i

00:12:18,959 --> 00:12:25,040
assume they forward directly to their c

00:12:20,959 --> 00:12:27,200
versions at the moment is that the issue

00:12:25,040 --> 00:12:28,720
so so what i've heard from the this is

00:12:27,200 --> 00:12:30,800
usually the library working group

00:12:28,720 --> 00:12:32,240
um pushes back on this and they didn't

00:12:30,800 --> 00:12:35,519
let us push back on this because c

00:12:32,240 --> 00:12:36,320
owns those not c plus so they tend to

00:12:35,519 --> 00:12:39,680
push back on

00:12:36,320 --> 00:12:42,560
making changes to see yeah so

00:12:39,680 --> 00:12:45,040
there's a fairly practical pro uh

00:12:42,560 --> 00:12:48,160
problem in the implementation space

00:12:45,040 --> 00:12:50,959
who who can fiddle with with the

00:12:48,160 --> 00:12:51,360
with the headers where do they belong um

00:12:50,959 --> 00:12:54,480
and

00:12:51,360 --> 00:12:57,519
they're not always in the same spaces

00:12:54,480 --> 00:12:58,079
and not even always like sometimes

00:12:57,519 --> 00:13:00,880
they're just

00:12:58,079 --> 00:13:03,279
imported so this is really fiddly but

00:13:00,880 --> 00:13:07,519
like from a design perspective

00:13:03,279 --> 00:13:10,880
we would like that yeah

00:13:07,519 --> 00:13:14,000
there is a proposal for this um

00:13:10,880 --> 00:13:17,760
that uh we've looked at

00:13:14,000 --> 00:13:20,959
recently um but one of the other issues

00:13:17,760 --> 00:13:24,560
is um around

00:13:20,959 --> 00:13:27,360
the accuracy and precision guarantees

00:13:24,560 --> 00:13:27,360
that we can make

00:13:27,440 --> 00:13:34,320
you it might be surprising to you

00:13:30,880 --> 00:13:37,440
if your const exper sign function

00:13:34,320 --> 00:13:40,480
gives you a different result than

00:13:37,440 --> 00:13:44,000
your runtime sign function and

00:13:40,480 --> 00:13:47,279
suppose that you're cross-compiling for

00:13:44,000 --> 00:13:50,720
some you know some embedded chip

00:13:47,279 --> 00:13:54,160
then your compiler has to uh

00:13:50,720 --> 00:13:54,720
emulate that the entire math environment

00:13:54,160 --> 00:13:57,199
of

00:13:54,720 --> 00:13:59,120
of your your target platform to be able

00:13:57,199 --> 00:14:02,480
to evaluate this function

00:13:59,120 --> 00:14:04,639
um in the same way at constexpr time

00:14:02,480 --> 00:14:07,040
um so there's a lot of uh there's a lot

00:14:04,639 --> 00:14:10,000
of challenges in providing these

00:14:07,040 --> 00:14:12,880
uh uh facilities but it is something

00:14:10,000 --> 00:14:12,880
that's on our radar

00:14:13,360 --> 00:14:17,279
um all right it's it's the top upvoted

00:14:16,720 --> 00:14:19,279
questions

00:14:17,279 --> 00:14:20,880
i think i've gotta i've gotta do it next

00:14:19,279 --> 00:14:24,480
why isn't there much talk about

00:14:20,880 --> 00:14:27,760
executors at cppcon this year um

00:14:24,480 --> 00:14:29,279
i'm not sure how well we'll be able to

00:14:27,760 --> 00:14:30,560
answer that i mean it's obviously

00:14:29,279 --> 00:14:33,760
something that uh

00:14:30,560 --> 00:14:37,600
is very popular topic on the committee

00:14:33,760 --> 00:14:39,120
um uh i i can't speak as to why

00:14:37,600 --> 00:14:41,040
people aren't talking about it but my

00:14:39,120 --> 00:14:43,279
guess would be

00:14:41,040 --> 00:14:44,240
that it's because all of the authors are

00:14:43,279 --> 00:14:47,279
busy trying

00:14:44,240 --> 00:14:49,839
to deliver executors to all of us

00:14:47,279 --> 00:14:51,040
um we've got a lot of telecons to talk

00:14:49,839 --> 00:14:54,079
about executives

00:14:51,040 --> 00:14:54,560
yeah it's a hierarchy for anything on

00:14:54,079 --> 00:14:57,440
the

00:14:54,560 --> 00:14:58,320
on the plan yeah it's one of executors

00:14:57,440 --> 00:15:01,600
is one of the

00:14:58,320 --> 00:15:05,199
um uh the

00:15:01,600 --> 00:15:08,399
uh what four things that we have is

00:15:05,199 --> 00:15:11,839
library objectives for c

00:15:08,399 --> 00:15:13,279
plus plus 23. we i put them on the

00:15:11,839 --> 00:15:14,560
screen a minute ago which is library

00:15:13,279 --> 00:15:16,720
support for career routines

00:15:14,560 --> 00:15:17,920
modular standard library executives

00:15:16,720 --> 00:15:20,959
networking

00:15:17,920 --> 00:15:23,519
and we've spent um

00:15:20,959 --> 00:15:25,360
a large chunk of our summer looking at

00:15:23,519 --> 00:15:27,680
the executor's proposal and we

00:15:25,360 --> 00:15:29,600
we formed small breakout groups that

00:15:27,680 --> 00:15:31,120
looked at different sections of it

00:15:29,600 --> 00:15:33,279
and we're just now starting to look at

00:15:31,120 --> 00:15:35,440
the results of those breakout reviews

00:15:33,279 --> 00:15:35,440
and

00:15:35,600 --> 00:15:39,680
give the authors guidance for the next

00:15:37,279 --> 00:15:41,199
revision so i think you'll hear a lot

00:15:39,680 --> 00:15:44,399
more about executors

00:15:41,199 --> 00:15:47,839
um uh at the next two or three

00:15:44,399 --> 00:15:49,519
cpp cons um i think it's it's still got

00:15:47,839 --> 00:15:51,600
a chance that that we'll be able to get

00:15:49,519 --> 00:15:53,360
it into c plus plus 23.

00:15:51,600 --> 00:15:54,880
um nothing's for certain especially with

00:15:53,360 --> 00:15:56,160
the pandemic

00:15:54,880 --> 00:15:58,000
but i think there will be a lot more

00:15:56,160 --> 00:15:58,320
excitement about it next year because i

00:15:58,000 --> 00:16:02,399
think

00:15:58,320 --> 00:16:06,079
um we'll have uh finalized the design

00:16:02,399 --> 00:16:08,240
by then and when i say that i should say

00:16:06,079 --> 00:16:09,920
well finalized design and work out most

00:16:08,240 --> 00:16:11,120
of the details and we'll be pretty

00:16:09,920 --> 00:16:14,480
confident about the

00:16:11,120 --> 00:16:18,160
exact shape that it'll take

00:16:14,480 --> 00:16:18,639
all right yeah good now i just wanted to

00:16:18,160 --> 00:16:20,560
add that

00:16:18,639 --> 00:16:22,480
there's a lot of very good people

00:16:20,560 --> 00:16:23,920
working on that and and

00:16:22,480 --> 00:16:27,040
don't worry it's on the table

00:16:23,920 --> 00:16:29,839
differently yeah

00:16:27,040 --> 00:16:30,160
um next question one of the frustrations

00:16:29,839 --> 00:16:32,000
when

00:16:30,160 --> 00:16:33,360
using multiple compilers is the

00:16:32,000 --> 00:16:35,839
differences between

00:16:33,360 --> 00:16:37,199
stl implementations would it poss would

00:16:35,839 --> 00:16:40,000
it be possible to have

00:16:37,199 --> 00:16:42,720
a reference stl implementation used by

00:16:40,000 --> 00:16:42,720
all vendors

00:16:46,560 --> 00:16:49,759
possible but i don't know i'm not even

00:16:48,880 --> 00:16:53,199
sure licensing

00:16:49,759 --> 00:16:53,199
between different vendors would work

00:16:54,000 --> 00:17:01,759
i mean we do see a lot more cooperation

00:16:57,839 --> 00:17:04,319
since now all of the major

00:17:01,759 --> 00:17:05,600
standard library implementations are

00:17:04,319 --> 00:17:09,120
open source

00:17:05,600 --> 00:17:12,240
and there's been lots of uh common work

00:17:09,120 --> 00:17:15,360
there's lots more uh talk between the

00:17:12,240 --> 00:17:17,760
the developers too sometimes some

00:17:15,360 --> 00:17:21,280
libraries get sponsored are

00:17:17,760 --> 00:17:25,520
incorporated in full which should

00:17:21,280 --> 00:17:26,079
help i i don't see any vendor giving up

00:17:25,520 --> 00:17:29,280
their

00:17:26,079 --> 00:17:32,559
library anytime soon

00:17:29,280 --> 00:17:34,080
yeah one one thing that we've started to

00:17:32,559 --> 00:17:38,080
see in the past few years

00:17:34,080 --> 00:17:39,919
is um shared

00:17:38,080 --> 00:17:41,120
is parts of the standard library being a

00:17:39,919 --> 00:17:45,520
shared implementation

00:17:41,120 --> 00:17:48,240
um for example apparel algorithms um

00:17:45,520 --> 00:17:49,360
gcc's standard library in clang is the

00:17:48,240 --> 00:17:53,200
standard library

00:17:49,360 --> 00:17:54,160
um are using the same back end for them

00:17:53,200 --> 00:17:57,840
and

00:17:54,160 --> 00:18:01,200
um i i believe

00:17:57,840 --> 00:18:03,760
my team has contributed implementations

00:18:01,200 --> 00:18:07,280
of the c plus plus 20 synchronization

00:18:03,760 --> 00:18:07,280
library facilities to both

00:18:08,559 --> 00:18:13,679
the clang standard library and the

00:18:11,760 --> 00:18:15,039
microsoft standard library

00:18:13,679 --> 00:18:17,440
which the microsoft standard library is

00:18:15,039 --> 00:18:18,480
now open source and i believe it's under

00:18:17,440 --> 00:18:21,200
the same

00:18:18,480 --> 00:18:22,000
license as the uh playing standard

00:18:21,200 --> 00:18:23,520
library

00:18:22,000 --> 00:18:25,840
i mean one of the reasons that the

00:18:23,520 --> 00:18:30,400
developers did that was to make it easy

00:18:25,840 --> 00:18:32,880
to um move code between the two

00:18:30,400 --> 00:18:34,400
um so there's some parts of standard

00:18:32,880 --> 00:18:36,960
library that are going to be specific

00:18:34,400 --> 00:18:38,880
to that platform or to the platforms and

00:18:36,960 --> 00:18:42,160
compilers that it supports

00:18:38,880 --> 00:18:44,960
um you know things like type traits etc

00:18:42,160 --> 00:18:47,280
or you know things that interact with

00:18:44,960 --> 00:18:51,200
the os

00:18:47,280 --> 00:18:51,200
but some of the things that are

00:18:51,600 --> 00:18:58,320
more libraries that build on top of that

00:18:55,120 --> 00:18:59,600
it's i think pretty feasible that you

00:18:58,320 --> 00:19:00,960
could have a single reference

00:18:59,600 --> 00:19:02,240
implementation and in fact

00:19:00,960 --> 00:19:04,240
you know there's a lot of people who

00:19:02,240 --> 00:19:04,799
want to have a bigger standard library

00:19:04,240 --> 00:19:07,120
in c

00:19:04,799 --> 00:19:08,480
plus and i think that this approach

00:19:07,120 --> 00:19:08,880
could be one way that we could get there

00:19:08,480 --> 00:19:12,320
i

00:19:08,880 --> 00:19:13,120
i tweeted the other day about this idea

00:19:12,320 --> 00:19:16,240
i've had

00:19:13,120 --> 00:19:19,600
for a while now which is if we

00:19:16,240 --> 00:19:21,679
were able to get all of the major

00:19:19,600 --> 00:19:23,600
supersupposed compiler vendors together

00:19:21,679 --> 00:19:24,559
and to get them on board with the idea

00:19:23,600 --> 00:19:26,960
of

00:19:24,559 --> 00:19:28,320
creating a set of curated libraries that

00:19:26,960 --> 00:19:30,160
all the vendors would ship

00:19:28,320 --> 00:19:31,520
there would be a single implementation

00:19:30,160 --> 00:19:34,240
of them

00:19:31,520 --> 00:19:35,200
and there would be some lighter weight

00:19:34,240 --> 00:19:37,600
review process

00:19:35,200 --> 00:19:39,360
than what is involved for the is it

00:19:37,600 --> 00:19:41,200
would still be something that we'd do

00:19:39,360 --> 00:19:42,960
through the standard c plus foundation

00:19:41,200 --> 00:19:46,160
maybe even through iso

00:19:42,960 --> 00:19:47,520
but to have some some tier of libraries

00:19:46,160 --> 00:19:48,559
that comes with your c plus plus

00:19:47,520 --> 00:19:52,080
compiler

00:19:48,559 --> 00:19:54,320
that's not the standard library not a

00:19:52,080 --> 00:19:55,520
sys not a specific implementation for

00:19:54,320 --> 00:19:56,880
each compiler but a shared

00:19:55,520 --> 00:20:00,320
implementation

00:19:56,880 --> 00:20:02,799
um uh i think that that might help us

00:20:00,320 --> 00:20:04,400
solve a lot of our a lot of the conflict

00:20:02,799 --> 00:20:06,000
that we have today between the folks who

00:20:04,400 --> 00:20:08,559
want a big standard librarian who want a

00:20:06,000 --> 00:20:10,559
smaller standard library

00:20:08,559 --> 00:20:12,400
and and we do get this you know we

00:20:10,559 --> 00:20:13,919
talked about vocabulary types but yeah

00:20:12,400 --> 00:20:15,520
it still kind of assumes you have the

00:20:13,919 --> 00:20:17,360
same compiler chain

00:20:15,520 --> 00:20:18,960
for whatever you're running like you

00:20:17,360 --> 00:20:20,159
know tuple under clang and two

00:20:18,960 --> 00:20:22,000
under religious equals plus lip

00:20:20,159 --> 00:20:23,440
standards plus are different

00:20:22,000 --> 00:20:25,200
and they may be different sizes they're

00:20:23,440 --> 00:20:28,000
doing different optimizations and we

00:20:25,200 --> 00:20:28,000
know that that's friction

00:20:32,000 --> 00:20:35,280
anybody else have anything else on this

00:20:33,600 --> 00:20:37,120
uh point on this

00:20:35,280 --> 00:20:39,120
question or we'll move on to the next

00:20:37,120 --> 00:20:42,320
one

00:20:39,120 --> 00:20:43,039
all right um from an educational point

00:20:42,320 --> 00:20:45,520
of view

00:20:43,039 --> 00:20:46,240
what are the most important concepts for

00:20:45,520 --> 00:20:48,799
using

00:20:46,240 --> 00:20:51,120
the uh standard library to get across

00:20:48,799 --> 00:20:51,120
first

00:20:55,039 --> 00:20:57,200
so

00:20:58,400 --> 00:21:05,440
i i always like um

00:21:01,760 --> 00:21:08,960
the parts that that enable um

00:21:05,440 --> 00:21:12,799
enable interoperability um

00:21:08,960 --> 00:21:16,400
like like the vocabulary type like

00:21:12,799 --> 00:21:19,600
a string view like span um

00:21:16,400 --> 00:21:23,360
like iterators um those

00:21:19,600 --> 00:21:26,240
uh help to to uh decouple

00:21:23,360 --> 00:21:26,960
the the data types from the algorithms

00:21:26,240 --> 00:21:30,080
and and

00:21:26,960 --> 00:21:33,039
that helps a lot and that's that's a

00:21:30,080 --> 00:21:33,679
one of the key concepts i like to teach

00:21:33,039 --> 00:21:38,080
because it

00:21:33,679 --> 00:21:45,840
it helps in in many ways to to

00:21:38,080 --> 00:21:45,840
improve your coding

00:21:50,159 --> 00:21:53,919
i just wanted to add that i think my

00:21:51,919 --> 00:21:54,960
favorite part is actually the titrates

00:21:53,919 --> 00:21:58,080
because

00:21:54,960 --> 00:22:01,600
you know makes you it's the reflection

00:21:58,080 --> 00:22:04,400
type part of of this uh that makes

00:22:01,600 --> 00:22:05,440
that i think that you have a very strong

00:22:04,400 --> 00:22:09,600
teachable

00:22:05,440 --> 00:22:12,559
um uh foundation and

00:22:09,600 --> 00:22:15,360
like i think that i i would love to have

00:22:12,559 --> 00:22:19,840
all the students learn that as an

00:22:15,360 --> 00:22:23,039
even uh quite a like initial topic or

00:22:19,840 --> 00:22:26,400
second topic i mean

00:22:23,039 --> 00:22:28,559
part of what makes standardizing hard is

00:22:26,400 --> 00:22:29,760
we know people copy what we do like the

00:22:28,559 --> 00:22:32,880
shape of containers

00:22:29,760 --> 00:22:34,400
you know people based on the stl

00:22:32,880 --> 00:22:36,400
and i think it's important that stuff

00:22:34,400 --> 00:22:37,840
get taught as well but it actually it

00:22:36,400 --> 00:22:38,240
makes our job very hard because we have

00:22:37,840 --> 00:22:39,919
to

00:22:38,240 --> 00:22:42,159
especially 3d language features we have

00:22:39,919 --> 00:22:45,120
to guess what you know what's the best

00:22:42,159 --> 00:22:45,120
practice for using it

00:22:45,919 --> 00:22:50,240
i i think the most important thing for

00:22:48,400 --> 00:22:53,520
people to understand

00:22:50,240 --> 00:22:56,799
about the design of the stl um

00:22:53,520 --> 00:22:58,960
like it's really the the the key design

00:22:56,799 --> 00:23:00,159
concept behind the stl is separation of

00:22:58,960 --> 00:23:04,159
concerns

00:23:00,159 --> 00:23:07,039
um there are a bunch of related

00:23:04,159 --> 00:23:08,480
but independent components in the

00:23:07,039 --> 00:23:11,919
standard library

00:23:08,480 --> 00:23:12,880
and when you add them together and

00:23:11,919 --> 00:23:16,159
combine them

00:23:12,880 --> 00:23:17,600
what you get is um more powerful than

00:23:16,159 --> 00:23:20,960
the sum of the parts

00:23:17,600 --> 00:23:23,679
of its parts so so one example of this

00:23:20,960 --> 00:23:24,640
in the c plus standard library um

00:23:23,679 --> 00:23:27,360
algorithms

00:23:24,640 --> 00:23:28,720
are decoupled from containers you know

00:23:27,360 --> 00:23:30,559
in some other languages

00:23:28,720 --> 00:23:32,159
every container has a whole bunch of

00:23:30,559 --> 00:23:33,840
different you know

00:23:32,159 --> 00:23:35,360
methods for various different algorithms

00:23:33,840 --> 00:23:36,880
we tend to avoid that we have very

00:23:35,360 --> 00:23:40,159
simple containers

00:23:36,880 --> 00:23:42,960
that provide iterator

00:23:40,159 --> 00:23:42,960
and range

00:23:44,240 --> 00:23:47,919
mechanisms to view their contents and

00:23:47,279 --> 00:23:49,840
then

00:23:47,919 --> 00:23:50,960
decoupled from that we have a set of

00:23:49,840 --> 00:23:54,400
algorithms

00:23:50,960 --> 00:23:58,480
that you can use those abstractions

00:23:54,400 --> 00:23:59,919
iterators and now ranges to apply those

00:23:58,480 --> 00:24:02,320
algorithms

00:23:59,919 --> 00:24:04,080
to your containers and there's a bunch

00:24:02,320 --> 00:24:07,120
of other places where we have this

00:24:04,080 --> 00:24:09,120
too um almost any time

00:24:07,120 --> 00:24:10,880
there's a customization point in the

00:24:09,120 --> 00:24:13,679
library it's the same thing you know

00:24:10,880 --> 00:24:16,480
we instead of having each container have

00:24:13,679 --> 00:24:18,799
a bunch of different options for how

00:24:16,480 --> 00:24:20,799
it's going to allocate memory we have

00:24:18,799 --> 00:24:21,360
allocators which completely abstract the

00:24:20,799 --> 00:24:24,080
notion

00:24:21,360 --> 00:24:25,919
of memory allocation um so i think

00:24:24,080 --> 00:24:27,360
that's the key

00:24:25,919 --> 00:24:29,440
thing to understand about the standard

00:24:27,360 --> 00:24:31,200
library design um both as

00:24:29,440 --> 00:24:33,919
somebody's using it and somebody who's

00:24:31,200 --> 00:24:36,320
thinking about contributing to it

00:24:33,919 --> 00:24:37,200
that often the best standard library

00:24:36,320 --> 00:24:40,240
components

00:24:37,200 --> 00:24:43,120
are the ones that are simple

00:24:40,240 --> 00:24:44,400
but compose with others and so one thing

00:24:43,120 --> 00:24:45,840
that i often think about

00:24:44,400 --> 00:24:47,919
when i'm reviewing something for the

00:24:45,840 --> 00:24:50,080
standard library is is this

00:24:47,919 --> 00:24:52,159
particular piece of functionality really

00:24:50,080 --> 00:24:52,960
absolutely necessary or is it something

00:24:52,159 --> 00:24:56,320
that

00:24:52,960 --> 00:24:58,799
um some other abstraction can provide

00:24:56,320 --> 00:25:00,480
um how can we make this as small as

00:24:58,799 --> 00:25:04,000
possible to be a

00:25:00,480 --> 00:25:05,120
uh a uh to give so really to the essence

00:25:04,000 --> 00:25:06,400
of this component

00:25:05,120 --> 00:25:07,840
and then we can use other building

00:25:06,400 --> 00:25:08,640
blocks to combine with it to make

00:25:07,840 --> 00:25:11,760
something

00:25:08,640 --> 00:25:12,960
you know greater when you need it people

00:25:11,760 --> 00:25:14,320
are really good at you know coming up

00:25:12,960 --> 00:25:15,679
with components but

00:25:14,320 --> 00:25:17,760
our job is to make sure that all fits

00:25:15,679 --> 00:25:21,440
together into one coherent library

00:25:17,760 --> 00:25:24,720
yeah and and we're like sometimes it's

00:25:21,440 --> 00:25:25,200
um the the most uh obvious way or the

00:25:24,720 --> 00:25:27,520
one

00:25:25,200 --> 00:25:29,440
that people reach out for first or

00:25:27,520 --> 00:25:32,240
things that should be the default

00:25:29,440 --> 00:25:34,320
um we sometimes don't provide that like

00:25:32,240 --> 00:25:36,159
we don't provide the easy default we

00:25:34,320 --> 00:25:38,080
just give you like the legos

00:25:36,159 --> 00:25:39,360
um to build something on the building

00:25:38,080 --> 00:25:42,080
blocks and

00:25:39,360 --> 00:25:44,159
we we fail to provide a nice facade for

00:25:42,080 --> 00:25:44,159
it

00:25:44,240 --> 00:25:48,400
we we could do better there i feel but

00:25:46,559 --> 00:25:51,200
it's also hard because

00:25:48,400 --> 00:25:53,279
we have so many users and and often when

00:25:51,200 --> 00:25:54,799
you ask people what is so obvious and

00:25:53,279 --> 00:25:56,640
what's the easy case

00:25:54,799 --> 00:25:58,559
they disagree they have totally

00:25:56,640 --> 00:26:00,400
different easy use cases that are

00:25:58,559 --> 00:26:04,960
totally obvious to them

00:26:00,400 --> 00:26:04,960
um so that's not always the same

00:26:05,039 --> 00:26:09,039
i'll give a concrete example of that for

00:26:07,360 --> 00:26:10,559
mutable for instance some people believe

00:26:09,039 --> 00:26:11,919
that's for caching and

00:26:10,559 --> 00:26:14,559
you know i tend to use it for things

00:26:11,919 --> 00:26:15,600
like mutexes because they're not part of

00:26:14,559 --> 00:26:18,320
the state of the object

00:26:15,600 --> 00:26:18,880
it's the only part of the object but

00:26:18,320 --> 00:26:20,640
they're both

00:26:18,880 --> 00:26:21,840
at viewpoints it's just it depends on

00:26:20,640 --> 00:26:24,159
your experience what you're going to

00:26:21,840 --> 00:26:24,159
value

00:26:24,720 --> 00:26:30,480
picking defaults that make everybody

00:26:27,120 --> 00:26:30,480
happy is very hard

00:26:31,520 --> 00:26:37,039
um i would i think that one of the

00:26:34,559 --> 00:26:38,720
like benefits of c plus plus is also one

00:26:37,039 --> 00:26:41,919
of the things that make it

00:26:38,720 --> 00:26:45,600
harder to teach because it's very

00:26:41,919 --> 00:26:49,200
um configurable and because it

00:26:45,600 --> 00:26:52,000
gives the developer huge freedom

00:26:49,200 --> 00:26:52,480
but but i think that once you grasp you

00:26:52,000 --> 00:26:54,480
know

00:26:52,480 --> 00:26:55,760
the abilities it's uh it's a very

00:26:54,480 --> 00:26:58,720
powerful tool so

00:26:55,760 --> 00:26:59,679
there's also the samsung on the language

00:26:58,720 --> 00:27:01,760
side it's it's

00:26:59,679 --> 00:27:03,760
how consistent do we want to be for

00:27:01,760 --> 00:27:05,360
instance you know lambdas

00:27:03,760 --> 00:27:07,360
the function call operator is a const

00:27:05,360 --> 00:27:08,880
member function

00:27:07,360 --> 00:27:10,080
that you know you would say immutable if

00:27:08,880 --> 00:27:11,600
you want to make it mutable which is the

00:27:10,080 --> 00:27:12,720
exact opposite of everything else in the

00:27:11,600 --> 00:27:13,840
language

00:27:12,720 --> 00:27:16,000
i mean i believe that was the right call

00:27:13,840 --> 00:27:18,559
for lambdas but

00:27:16,000 --> 00:27:19,679
you know we broke consistency by it and

00:27:18,559 --> 00:27:21,600
it's just tough

00:27:19,679 --> 00:27:22,799
these are you know it's all trade-offs

00:27:21,600 --> 00:27:24,480
and it's really tough making these

00:27:22,799 --> 00:27:27,279
decisions

00:27:24,480 --> 00:27:28,159
i think it's hard for people outside of

00:27:27,279 --> 00:27:31,279
the

00:27:28,159 --> 00:27:32,000
committee to understand just how much we

00:27:31,279 --> 00:27:35,200
care about

00:27:32,000 --> 00:27:38,159
um consistency um

00:27:35,200 --> 00:27:39,120
there there's uh there's two different

00:27:38,159 --> 00:27:40,720
types of

00:27:39,120 --> 00:27:42,159
legal i i like to use this analogy

00:27:40,720 --> 00:27:43,120
there's two different types of legal

00:27:42,159 --> 00:27:46,960
systems

00:27:43,120 --> 00:27:50,000
um there's the uh french

00:27:46,960 --> 00:27:53,279
type legal systems which are based on

00:27:50,000 --> 00:27:56,799
um a very uh

00:27:53,279 --> 00:27:58,960
uh extensive written down set of laws

00:27:56,799 --> 00:28:00,399
um and then there's the uh english

00:27:58,960 --> 00:28:03,679
system which is based on

00:28:00,399 --> 00:28:04,960
case law and precedence and uh the cpus

00:28:03,679 --> 00:28:08,159
with standard library

00:28:04,960 --> 00:28:09,600
is by and large follows the english

00:28:08,159 --> 00:28:12,559
system of case law that we don't

00:28:09,600 --> 00:28:15,520
necessarily have written down

00:28:12,559 --> 00:28:17,200
a concrete set of design guidelines and

00:28:15,520 --> 00:28:18,320
we say you must follow those rigidly

00:28:17,200 --> 00:28:21,600
instead

00:28:18,320 --> 00:28:24,159
what we often do is we look at well

00:28:21,600 --> 00:28:26,080
you know what what have we done in the

00:28:24,159 --> 00:28:27,200
past year what decisions did we make in

00:28:26,080 --> 00:28:30,480
the past here

00:28:27,200 --> 00:28:32,480
um uh and if we if we make

00:28:30,480 --> 00:28:33,840
this decision now will that be

00:28:32,480 --> 00:28:35,840
consistent with

00:28:33,840 --> 00:28:37,200
things that we did in the past how can

00:28:35,840 --> 00:28:39,679
we ensure that

00:28:37,200 --> 00:28:41,600
um we remain consistent and when should

00:28:39,679 --> 00:28:43,760
we break consistency

00:28:41,600 --> 00:28:46,080
so we we often end up looking at you

00:28:43,760 --> 00:28:47,600
know what have we done in the past

00:28:46,080 --> 00:28:51,279
when we're trying to figure out what

00:28:47,600 --> 00:28:51,279
makes sense to do going forward

00:28:51,440 --> 00:28:55,360
all right i got another question here in

00:28:53,919 --> 00:28:58,559
my university c

00:28:55,360 --> 00:28:59,600
plus course in 2017 the standard library

00:28:58,559 --> 00:29:01,440
was not taught

00:28:59,600 --> 00:29:02,799
is this usually the case why do you

00:29:01,440 --> 00:29:04,960
think some professors

00:29:02,799 --> 00:29:06,480
avoid teaching the standard library

00:29:04,960 --> 00:29:07,840
fabio is probably the right person for

00:29:06,480 --> 00:29:11,279
this question

00:29:07,840 --> 00:29:12,000
i mean it's it's hard um it's simply

00:29:11,279 --> 00:29:15,360
hard to

00:29:12,000 --> 00:29:18,640
to keep on track uh building a course is

00:29:15,360 --> 00:29:21,120
a lot of work um and and

00:29:18,640 --> 00:29:21,840
keeping up to date with with new stuff

00:29:21,120 --> 00:29:25,279
is also

00:29:21,840 --> 00:29:28,640
much work so um

00:29:25,279 --> 00:29:30,320
yeah if that's if c plus plus is just

00:29:28,640 --> 00:29:33,200
one of the courses you teach

00:29:30,320 --> 00:29:34,000
there's often very little time to to do

00:29:33,200 --> 00:29:37,120
this

00:29:34,000 --> 00:29:39,520
um and if you have no other venues uh

00:29:37,120 --> 00:29:41,120
to to keep up with it and if you're not

00:29:39,520 --> 00:29:44,720
not passionate about it

00:29:41,120 --> 00:29:45,600
it's it's really uh almost impossible to

00:29:44,720 --> 00:29:49,360
do this if you

00:29:45,600 --> 00:29:51,039
if you don't um we we have in the

00:29:49,360 --> 00:29:54,240
committee also now

00:29:51,039 --> 00:29:55,120
a working group sg20 um that deals with

00:29:54,240 --> 00:29:57,840
education

00:29:55,120 --> 00:30:00,720
where we want to present guidelines how

00:29:57,840 --> 00:30:02,720
to teach where we also

00:30:00,720 --> 00:30:04,720
build recommendations how to teach

00:30:02,720 --> 00:30:06,240
certain topics in which order to teach

00:30:04,720 --> 00:30:09,279
certain topics

00:30:06,240 --> 00:30:10,559
so that you can easier um form a a good

00:30:09,279 --> 00:30:13,840
curriculum

00:30:10,559 --> 00:30:16,880
um yeah education is

00:30:13,840 --> 00:30:17,600
one of one of c plus buzz's big problem

00:30:16,880 --> 00:30:21,200
if you

00:30:17,600 --> 00:30:22,240
like if i i teach my students if i give

00:30:21,200 --> 00:30:24,320
them out if

00:30:22,240 --> 00:30:26,399
they ask me for courses that they should

00:30:24,320 --> 00:30:28,960
do because at our university

00:30:26,399 --> 00:30:29,919
students learn very much self-driven and

00:30:28,960 --> 00:30:32,559
we as

00:30:29,919 --> 00:30:33,440
teachers only help them when they have

00:30:32,559 --> 00:30:36,000
questions

00:30:33,440 --> 00:30:37,600
and there are almost no good courses

00:30:36,000 --> 00:30:40,000
like video courses which

00:30:37,600 --> 00:30:42,480
most students nowadays prefer there are

00:30:40,000 --> 00:30:43,520
almost no good video courses out there

00:30:42,480 --> 00:30:45,679
that are free

00:30:43,520 --> 00:30:47,600
there are a few ones i can recommend

00:30:45,679 --> 00:30:50,799
personally which i know that are good

00:30:47,600 --> 00:30:54,080
but most of them are paid for

00:30:50,799 --> 00:30:57,600
and most of the free ones teach

00:30:54,080 --> 00:31:00,240
questionable uh c so

00:30:57,600 --> 00:31:02,240
that is that is a real problem um and

00:31:00,240 --> 00:31:05,519
the same with tutorials

00:31:02,240 --> 00:31:08,799
and stuff like that so

00:31:05,519 --> 00:31:09,760
yeah um we we have lots of work to do

00:31:08,799 --> 00:31:13,360
there and

00:31:09,760 --> 00:31:14,320
um yeah as uh study group 20 is very

00:31:13,360 --> 00:31:18,159
happy for

00:31:14,320 --> 00:31:21,600
help there and um this one you can join

00:31:18,159 --> 00:31:21,600
um easily

00:31:24,159 --> 00:31:30,720
all right next question

00:31:27,279 --> 00:31:47,519
um what parts of the standard library

00:31:30,720 --> 00:31:49,440
are the most misunderstood or misused

00:31:47,519 --> 00:31:51,760
what do we think there's there's so many

00:31:49,440 --> 00:31:53,679
options right yeah

00:31:51,760 --> 00:31:55,919
valerie i don't i don't use already so i

00:31:53,679 --> 00:31:57,760
can't actually comment on that

00:31:55,919 --> 00:32:00,159
yeah that's that's that's what i'm

00:31:57,760 --> 00:32:01,600
thinking like most of the ones that that

00:32:00,159 --> 00:32:06,480
come to mind are

00:32:01,600 --> 00:32:06,480
not that much in use or

00:32:06,799 --> 00:32:13,440
i i think i would say string um

00:32:10,399 --> 00:32:14,720
because and i think it's largely our

00:32:13,440 --> 00:32:17,760
fault in historical

00:32:14,720 --> 00:32:21,360
um very often

00:32:17,760 --> 00:32:25,279
when you write string in your code

00:32:21,360 --> 00:32:29,120
you really wanted to put string view

00:32:25,279 --> 00:32:32,799
and i remember when i first got started

00:32:29,120 --> 00:32:36,559
with c plus plus the single biggest

00:32:32,799 --> 00:32:38,640
um challenge that i had was

00:32:36,559 --> 00:32:40,080
um or the single like problem i

00:32:38,640 --> 00:32:42,240
encountered in my first like

00:32:40,080 --> 00:32:43,200
two months of programming c plus plus

00:32:42,240 --> 00:32:46,240
was

00:32:43,200 --> 00:32:46,880
um uh accidentally copying vectors and

00:32:46,240 --> 00:32:48,720
strings

00:32:46,880 --> 00:32:50,720
a billion times when i was you know

00:32:48,720 --> 00:32:53,840
passing them around between functions

00:32:50,720 --> 00:32:55,440
um so i think that's one of the um

00:32:53,840 --> 00:32:57,840
it's it's something that's that that's

00:32:55,440 --> 00:33:01,039
hard for newcomers it's also hard for

00:32:57,840 --> 00:33:02,240
all skill levels um yeah the stream you

00:33:01,039 --> 00:33:03,600
show when jeffrey asking for his

00:33:02,240 --> 00:33:05,200
proposed um

00:33:03,600 --> 00:33:06,720
string rap before was called streamview

00:33:05,200 --> 00:33:08,399
i looked at it and go

00:33:06,720 --> 00:33:10,559
man this solves my problems why didn't i

00:33:08,399 --> 00:33:13,440
think of it because

00:33:10,559 --> 00:33:16,480
it's actually very simple but yeah it

00:33:13,440 --> 00:33:16,480
was a need that you know

00:33:17,360 --> 00:33:23,600
an example um like many people were very

00:33:20,559 --> 00:33:26,080
um upset that c 17

00:33:23,600 --> 00:33:26,640
didn't have so much nice thing that it

00:33:26,080 --> 00:33:30,480
wasn't

00:33:26,640 --> 00:33:34,080
so um that that it wasn't such a huge

00:33:30,480 --> 00:33:35,360
release uh as others and for me it was

00:33:34,080 --> 00:33:38,640
great because with

00:33:35,360 --> 00:33:41,279
with string view we have like this this

00:33:38,640 --> 00:33:42,880
really big vocabulary type which changes

00:33:41,279 --> 00:33:46,399
so much of our code you can

00:33:42,880 --> 00:33:49,600
make use of it easily um you can also

00:33:46,399 --> 00:33:51,840
of course you can backfill it um and and

00:33:49,600 --> 00:33:54,240
you can use the library implementation

00:33:51,840 --> 00:33:55,840
of it but now having it as a vocabulary

00:33:54,240 --> 00:33:58,880
and making everyone aware

00:33:55,840 --> 00:34:01,360
everyone knows how to use it and now

00:33:58,880 --> 00:34:06,559
libraries can also use it that changes

00:34:01,360 --> 00:34:09,200
our interfaces immensely

00:34:06,559 --> 00:34:10,320
you know well i feel like that's the

00:34:09,200 --> 00:34:12,000
opposite question like you know what's

00:34:10,320 --> 00:34:12,960
really useful instead of what's not very

00:34:12,000 --> 00:34:16,320
useful

00:34:12,960 --> 00:34:20,000
yeah i i would also say that

00:34:16,320 --> 00:34:23,599
um probably i think

00:34:20,000 --> 00:34:27,520
a lot of concurrency primitives

00:34:23,599 --> 00:34:31,200
are are misused um like i think

00:34:27,520 --> 00:34:34,399
i think people tend to be a bit too

00:34:31,200 --> 00:34:35,599
liberal with their use of uh new texas

00:34:34,399 --> 00:34:38,720
and places where

00:34:35,599 --> 00:34:40,320
um they could probably use atomics

00:34:38,720 --> 00:34:42,320
um and i and i realized that's a

00:34:40,320 --> 00:34:44,639
controversial view

00:34:42,320 --> 00:34:45,359
um but if you're doing concurrency you

00:34:44,639 --> 00:34:48,879
may as well

00:34:45,359 --> 00:34:53,040
do it right and while yes atomics are

00:34:48,879 --> 00:34:56,000
more challenging to use correctly

00:34:53,040 --> 00:34:58,079
i've seen a lot of code bases including

00:34:56,000 --> 00:35:01,280
one i have to frequently

00:34:58,079 --> 00:35:03,680
deal with at work that

00:35:01,280 --> 00:35:04,480
their primary performance problem is

00:35:03,680 --> 00:35:08,079
excessive

00:35:04,480 --> 00:35:09,440
use of mutexes and uh people get afraid

00:35:08,079 --> 00:35:13,119
to take

00:35:09,440 --> 00:35:16,160
to people get afraid to correct overly

00:35:13,119 --> 00:35:17,839
um uh conservative synchronization later

00:35:16,160 --> 00:35:19,119
because they think that perhaps some

00:35:17,839 --> 00:35:20,880
other part of the

00:35:19,119 --> 00:35:24,160
code base relies on the overly

00:35:20,880 --> 00:35:27,520
conservative synchronization

00:35:24,160 --> 00:35:29,200
all right next we have what are the

00:35:27,520 --> 00:35:33,359
differences between

00:35:29,200 --> 00:35:37,680
luge and lwg what is the process for

00:35:33,359 --> 00:35:37,680
moving a proposal from one to the next

00:35:41,200 --> 00:35:49,119
yeah so um so basically

00:35:44,480 --> 00:35:52,880
uh lewg is a is a design group

00:35:49,119 --> 00:35:55,200
we we look at um what we want to have

00:35:52,880 --> 00:35:58,599
and how exactly

00:35:55,200 --> 00:36:02,000
it should work and uh

00:35:58,599 --> 00:36:04,320
lwg is the

00:36:02,000 --> 00:36:05,680
group that implements it in standard

00:36:04,320 --> 00:36:09,040
ease basically

00:36:05,680 --> 00:36:12,240
we we already look at at the wording

00:36:09,040 --> 00:36:16,079
to to see if the wording says

00:36:12,240 --> 00:36:19,359
what we what we designed

00:36:16,079 --> 00:36:21,040
but then lwg makes sure that it fits

00:36:19,359 --> 00:36:25,359
with all of the other things

00:36:21,040 --> 00:36:28,200
that it doesn't have any um

00:36:25,359 --> 00:36:30,720
yeah any problems in there any

00:36:28,200 --> 00:36:33,680
incompatibilities with other stuff

00:36:30,720 --> 00:36:36,000
um things like that yeah and it's a

00:36:33,680 --> 00:36:38,160
fuzzy line between the two

00:36:36,000 --> 00:36:39,440
and uh one of the things is a lot of

00:36:38,160 --> 00:36:40,240
implementers library student library

00:36:39,440 --> 00:36:42,079
influencers

00:36:40,240 --> 00:36:43,280
are spending their time in lwg so a lot

00:36:42,079 --> 00:36:44,640
of the time

00:36:43,280 --> 00:36:46,240
they'll either just push back or they'll

00:36:44,640 --> 00:36:46,960
just come you know did we consider

00:36:46,240 --> 00:36:49,440
so-and-so

00:36:46,960 --> 00:36:50,720
and it's it's not always clear from our

00:36:49,440 --> 00:36:52,560
you know we have scribes that take

00:36:50,720 --> 00:36:54,320
wonderful notes but

00:36:52,560 --> 00:36:55,680
that's also a hard job and it's not

00:36:54,320 --> 00:36:57,200
always clear if we've actually you know

00:36:55,680 --> 00:37:01,440
considered certain points that they

00:36:57,200 --> 00:37:04,480
they find important um

00:37:01,440 --> 00:37:06,000
sorry god yeah the example we had before

00:37:04,480 --> 00:37:08,880
with the constexpr

00:37:06,000 --> 00:37:10,640
mars things that's that's such an

00:37:08,880 --> 00:37:13,119
example where where there's

00:37:10,640 --> 00:37:14,160
some tension then because from from the

00:37:13,119 --> 00:37:16,079
design perspective

00:37:14,160 --> 00:37:17,280
it was clear yes it's useful to have

00:37:16,079 --> 00:37:21,200
those um

00:37:17,280 --> 00:37:24,400
seems simple enough um go for it do it

00:37:21,200 --> 00:37:26,640
wording seems simple too um and then

00:37:24,400 --> 00:37:28,160
lwg where all the implementers said

00:37:26,640 --> 00:37:31,040
tells us yeah well

00:37:28,160 --> 00:37:31,440
might be simple in in the design space

00:37:31,040 --> 00:37:32,960
but

00:37:31,440 --> 00:37:34,560
there's a few points you haven't

00:37:32,960 --> 00:37:38,400
considered like what bryce

00:37:34,560 --> 00:37:40,640
said for like the um accuracy

00:37:38,400 --> 00:37:42,480
problems and and that you have to

00:37:40,640 --> 00:37:45,599
re-implement everything for

00:37:42,480 --> 00:37:48,640
cross-compiling things like that um so

00:37:45,599 --> 00:37:50,640
then there's pushback and this is one of

00:37:48,640 --> 00:37:51,280
the reasons why we we place a lot of

00:37:50,640 --> 00:37:54,160
value

00:37:51,280 --> 00:37:54,560
in what we call field experience um

00:37:54,160 --> 00:37:57,359
which

00:37:54,560 --> 00:37:58,880
consists of really three parts um

00:37:57,359 --> 00:38:01,280
implementation experience

00:37:58,880 --> 00:38:03,839
has have has somebody implemented this

00:38:01,280 --> 00:38:03,839
proposal

00:38:07,520 --> 00:38:13,440
has and then there's usage experience

00:38:10,560 --> 00:38:14,000
has that implementation been used by

00:38:13,440 --> 00:38:16,320
people

00:38:14,000 --> 00:38:17,599
has been used widely you know what sort

00:38:16,320 --> 00:38:19,520
of feedback have we gotten

00:38:17,599 --> 00:38:21,280
and then finally there's deployment

00:38:19,520 --> 00:38:23,520
experience which is

00:38:21,280 --> 00:38:26,079
you know has it been used by people over

00:38:23,520 --> 00:38:30,079
long periods of time do we know

00:38:26,079 --> 00:38:31,599
what the um what will happen if we try

00:38:30,079 --> 00:38:33,520
to change parts of it

00:38:31,599 --> 00:38:36,960
can we change parts of it or will that

00:38:33,520 --> 00:38:39,599
you know break people in horrible ways

00:38:36,960 --> 00:38:41,200
um and so we often um you know we're

00:38:39,599 --> 00:38:43,200
looking for those sorts of things when

00:38:41,200 --> 00:38:46,240
we're reviewing proposals and

00:38:43,200 --> 00:38:48,800
uh admittedly we don't always have

00:38:46,240 --> 00:38:49,839
the amount of experience that we'd we'd

00:38:48,800 --> 00:38:52,160
want that

00:38:49,839 --> 00:38:53,599
we think we'd ideally want before we

00:38:52,160 --> 00:38:58,960
ship things

00:38:53,599 --> 00:38:58,960
but oftentimes it is impossible to get

00:38:59,040 --> 00:39:02,640
that experience until you've actually

00:39:01,680 --> 00:39:04,720
shipped it

00:39:02,640 --> 00:39:06,079
um there's only so much that we can that

00:39:04,720 --> 00:39:06,960
we can do before especially for new

00:39:06,079 --> 00:39:09,839
language speakers

00:39:06,960 --> 00:39:12,839
um like foreign deduction guides right

00:39:09,839 --> 00:39:15,680
no one had any field experience

00:39:12,839 --> 00:39:17,599
yeah yeah that was probably a case

00:39:15,680 --> 00:39:20,800
that's probably an example of a feature

00:39:17,599 --> 00:39:22,960
where we we could have given it

00:39:20,800 --> 00:39:23,920
a bit more time and we could have waited

00:39:22,960 --> 00:39:26,240
to have

00:39:23,920 --> 00:39:28,320
sure but i can you know for 11 it was it

00:39:26,240 --> 00:39:31,920
was no exception mean we you know it was

00:39:28,320 --> 00:39:35,040
final meetings where how we decided um

00:39:31,920 --> 00:39:35,920
the lakers rule um why contracts um

00:39:35,040 --> 00:39:38,000
contracts with no

00:39:35,920 --> 00:39:39,280
preconditions that those were exceptions

00:39:38,000 --> 00:39:40,880
could be marked no except

00:39:39,280 --> 00:39:42,480
but that all came from because we needed

00:39:40,880 --> 00:39:43,520
some kind of guidance for how do we mark

00:39:42,480 --> 00:39:45,200
this up

00:39:43,520 --> 00:39:49,359
in the standard library that we're about

00:39:45,200 --> 00:39:49,359
to ship as part of 11 at that meeting

00:39:50,880 --> 00:39:53,839
we pushed lots of things off the library

00:39:52,240 --> 00:39:56,320
at the last minute and it's it's hard

00:39:53,839 --> 00:40:00,320
we're trying not to do that anymore yeah

00:39:56,320 --> 00:40:03,440
and actually that's true yeah

00:40:00,320 --> 00:40:06,720
we have a new one thing that's happened

00:40:03,440 --> 00:40:08,480
um in the past two years

00:40:06,720 --> 00:40:11,359
and especially in the past six to eight

00:40:08,480 --> 00:40:12,720
months is because of the growth in the

00:40:11,359 --> 00:40:14,400
committee and the growth in the number

00:40:12,720 --> 00:40:16,400
of proposals that we're receiving

00:40:14,400 --> 00:40:18,400
we've made a lot of changes to how our

00:40:16,400 --> 00:40:21,520
process works

00:40:18,400 --> 00:40:23,920
and one

00:40:21,520 --> 00:40:25,200
part of that is is changing you know how

00:40:23,920 --> 00:40:26,319
things flow

00:40:25,200 --> 00:40:28,800
between the groups you know we've

00:40:26,319 --> 00:40:32,319
introduced these incubators and there's

00:40:28,800 --> 00:40:35,680
um a recent paper um that

00:40:32,319 --> 00:40:39,200
lays out some new um it's it's

00:40:35,680 --> 00:40:39,760
rules of design specification engagement

00:40:39,200 --> 00:40:44,079
so

00:40:39,760 --> 00:40:47,839
how how should luge interact with lwg

00:40:44,079 --> 00:40:50,240
and how can we make sure that we give

00:40:47,839 --> 00:40:50,880
the specification group enough time and

00:40:50,240 --> 00:40:53,920
that we

00:40:50,880 --> 00:40:57,359
avoid um we avoid

00:40:53,920 --> 00:40:58,800
late surprises um so we've we've added

00:40:57,359 --> 00:41:00,960
more process

00:40:58,800 --> 00:41:02,160
um and i think that's been a good thing

00:41:00,960 --> 00:41:04,400
and then we've also

00:41:02,160 --> 00:41:05,440
you know a lot of process changes have

00:41:04,400 --> 00:41:08,480
come about

00:41:05,440 --> 00:41:11,280
with the switch to virtual meetings

00:41:08,480 --> 00:41:11,839
and i think that uh the result of this

00:41:11,280 --> 00:41:14,240
is that

00:41:11,839 --> 00:41:15,599
in future standards i'm hopeful that

00:41:14,240 --> 00:41:18,319
we're going to have

00:41:15,599 --> 00:41:19,280
an even higher bar for quality and that

00:41:18,319 --> 00:41:22,640
will have less

00:41:19,280 --> 00:41:23,440
surprises and to expand on virtual

00:41:22,640 --> 00:41:26,160
meetings

00:41:23,440 --> 00:41:27,280
people who normally just sit in lwg have

00:41:26,160 --> 00:41:29,200
come to lewg

00:41:27,280 --> 00:41:30,640
and vice versa so we're getting the kind

00:41:29,200 --> 00:41:32,720
of cross-pollination that we just can't

00:41:30,640 --> 00:41:34,079
do at physical meetings because

00:41:32,720 --> 00:41:35,680
we have so much to get done and we're

00:41:34,079 --> 00:41:36,079
running what nine parallel sessions i

00:41:35,680 --> 00:41:39,680
think

00:41:36,079 --> 00:41:42,480
it's physical meetings and

00:41:39,680 --> 00:41:44,000
i would love to add about the process of

00:41:42,480 --> 00:41:47,280
the new proposal

00:41:44,000 --> 00:41:49,359
uh so the first thing is uh

00:41:47,280 --> 00:41:50,319
that if the proposal is related to one

00:41:49,359 --> 00:41:52,480
of things

00:41:50,319 --> 00:41:54,160
to other study groups then it would

00:41:52,480 --> 00:41:57,440
probably visit there

00:41:54,160 --> 00:41:59,040
and later on we'll reach the incubator

00:41:57,440 --> 00:42:01,200
as bryce have mentioned

00:41:59,040 --> 00:42:02,319
and i think i think that's a very

00:42:01,200 --> 00:42:04,960
important part

00:42:02,319 --> 00:42:06,800
um i'm really happy to be you know part

00:42:04,960 --> 00:42:10,000
of that with quarantine

00:42:06,800 --> 00:42:11,920
and with cartoons sorry and um

00:42:10,000 --> 00:42:14,000
and there you you're gonna get some

00:42:11,920 --> 00:42:17,760
feedback some initial feedback

00:42:14,000 --> 00:42:20,960
for that uh for that idea and

00:42:17,760 --> 00:42:23,200
later on as as bryce have mentioned uh

00:42:20,960 --> 00:42:24,240
the the continuation of the progress

00:42:23,200 --> 00:42:27,599
would be

00:42:24,240 --> 00:42:30,720
uh to get the design uh worked out

00:42:27,599 --> 00:42:32,400
as part of lewg and then the wording as

00:42:30,720 --> 00:42:36,079
part of lwg

00:42:32,400 --> 00:42:36,079
so i hope that makes sense

00:42:36,480 --> 00:42:42,640
one of the possibly bigger changes

00:42:39,599 --> 00:42:45,200
is um i i'm

00:42:42,640 --> 00:42:46,240
fairly confident that at least for the

00:42:45,200 --> 00:42:48,640
next year or so

00:42:46,240 --> 00:42:49,839
almost all new proposals that aren't

00:42:48,640 --> 00:42:53,119
related to

00:42:49,839 --> 00:42:54,400
one of the big features um are going to

00:42:53,119 --> 00:42:57,359
go through

00:42:54,400 --> 00:42:58,319
a mailing list review prior to any

00:42:57,359 --> 00:43:00,800
review at a

00:42:58,319 --> 00:43:02,960
telecon meeting or face-to-face meeting

00:43:00,800 --> 00:43:05,040
and um

00:43:02,960 --> 00:43:06,560
involves one of the ones who runs those

00:43:05,040 --> 00:43:09,760
mailing list reviews

00:43:06,560 --> 00:43:10,640
um we just don't have the processing

00:43:09,760 --> 00:43:13,920
bandwidth

00:43:10,640 --> 00:43:15,520
of telecons um uh

00:43:13,920 --> 00:43:17,280
and even with face-to-face meetings to

00:43:15,520 --> 00:43:18,960
be able to handle all the papers

00:43:17,280 --> 00:43:20,480
and so instead we're increasingly

00:43:18,960 --> 00:43:23,839
relying on

00:43:20,480 --> 00:43:25,359
um these these lightweight you know

00:43:23,839 --> 00:43:27,280
email reviews

00:43:25,359 --> 00:43:28,800
um and we might move to some you know

00:43:27,280 --> 00:43:31,280
more modern platform like

00:43:28,800 --> 00:43:32,319
discourse or something github based for

00:43:31,280 --> 00:43:34,880
this

00:43:32,319 --> 00:43:36,240
and this lets us get feedback to authors

00:43:34,880 --> 00:43:38,319
quicker

00:43:36,240 --> 00:43:41,119
and for proposals that are in the first

00:43:38,319 --> 00:43:43,040
you know the first draft of the proposal

00:43:41,119 --> 00:43:45,040
that's really all that they need um and

00:43:43,040 --> 00:43:48,240
i think this is also helping us get

00:43:45,040 --> 00:43:48,960
engagement from um larger uh chunks of

00:43:48,240 --> 00:43:50,720
the committee

00:43:48,960 --> 00:43:52,480
on on proposals you know you might get

00:43:50,720 --> 00:43:52,880
somebody who during a face-to-face

00:43:52,480 --> 00:43:54,319
meeting

00:43:52,880 --> 00:43:55,920
would never look at your paper they

00:43:54,319 --> 00:43:57,440
might you know be able to look at it in

00:43:55,920 --> 00:43:59,200
the mail in this review

00:43:57,440 --> 00:44:00,720
um so i think that's going to become a

00:43:59,200 --> 00:44:01,359
increasingly important part of our

00:44:00,720 --> 00:44:03,760
process

00:44:01,359 --> 00:44:05,119
um going forward and that process is

00:44:03,760 --> 00:44:06,880
also for committee members it's not just

00:44:05,119 --> 00:44:09,040
like for you know outside people who

00:44:06,880 --> 00:44:10,160
you know have more gates you know if i

00:44:09,040 --> 00:44:12,880
make a proposal i have to go through

00:44:10,160 --> 00:44:12,880
these computers too

00:44:13,040 --> 00:44:20,400
i expect to um

00:44:16,160 --> 00:44:22,960
let's see um next we got this one what

00:44:20,400 --> 00:44:26,400
is the story for async io

00:44:22,960 --> 00:44:30,720
as i understand async io would come

00:44:26,400 --> 00:44:30,720
to the standard library after executors

00:44:34,839 --> 00:44:40,000
land

00:44:36,160 --> 00:44:43,920
yeah yes and no um so um it is alway

00:44:40,000 --> 00:44:47,520
uh already in in this in the pipeline

00:44:43,920 --> 00:44:50,720
um and it's like

00:44:47,520 --> 00:44:52,800
it it has some overlap and so it's very

00:44:50,720 --> 00:44:56,720
important that

00:44:52,800 --> 00:45:00,880
once we that we finalize

00:44:56,720 --> 00:45:04,480
executors or almost finalize executors

00:45:00,880 --> 00:45:09,200
before we standardize fully

00:45:04,480 --> 00:45:09,200
the the networking proposal um

00:45:09,359 --> 00:45:15,920
or the asynchronous io proposal

00:45:12,800 --> 00:45:16,880
so because we we need those building

00:45:15,920 --> 00:45:20,480
blocks and

00:45:16,880 --> 00:45:23,520
we need them in a in a

00:45:20,480 --> 00:45:27,040
sufficiently stable form before we can

00:45:23,520 --> 00:45:27,040
can build anything upon them

00:45:27,359 --> 00:45:34,240
yeah i i i think

00:45:30,640 --> 00:45:37,280
if if i wrote down a 10-year plan for

00:45:34,240 --> 00:45:39,760
the standard library um maybe i do have

00:45:37,280 --> 00:45:41,680
a secret one

00:45:39,760 --> 00:45:43,440
if i wrote down a 10-year plan for the

00:45:41,680 --> 00:45:46,480
standard library

00:45:43,440 --> 00:45:49,680
it would largely revolve around um

00:45:46,480 --> 00:45:52,079
asynchrony and i o i think almost

00:45:49,680 --> 00:45:53,599
all the things that we're doing or that

00:45:52,079 --> 00:45:55,520
we want to be doing

00:45:53,599 --> 00:45:57,040
um and almost all the parts of the

00:45:55,520 --> 00:45:58,160
standard library that really need a

00:45:57,040 --> 00:46:01,119
modernization

00:45:58,160 --> 00:46:01,760
relate to that um you know executors is

00:46:01,119 --> 00:46:03,280
this

00:46:01,760 --> 00:46:05,839
basis that we're going to build up

00:46:03,280 --> 00:46:08,720
almost everything else on top of

00:46:05,839 --> 00:46:09,440
and there's networking of course um

00:46:08,720 --> 00:46:12,240
there's a

00:46:09,440 --> 00:46:13,839
desire and there's some proposals to

00:46:12,240 --> 00:46:17,040
modernize

00:46:13,839 --> 00:46:17,839
a file io there's an async file io

00:46:17,040 --> 00:46:20,960
proposal

00:46:17,839 --> 00:46:23,359
you know it's a it's around time that we

00:46:20,960 --> 00:46:26,079
really had a proper replacement for

00:46:23,359 --> 00:46:27,920
um uh i o streams and the other

00:46:26,079 --> 00:46:30,079
component of that is is unicode that

00:46:27,920 --> 00:46:33,040
almost all of our

00:46:30,079 --> 00:46:35,040
text textual i o facilities in the

00:46:33,040 --> 00:46:35,920
standard library today are not unicode

00:46:35,040 --> 00:46:38,400
aware

00:46:35,920 --> 00:46:40,079
and so we're going to need to introduce

00:46:38,400 --> 00:46:40,800
unicode aware versions of them and i

00:46:40,079 --> 00:46:44,960
imagine

00:46:40,800 --> 00:46:47,440
that a lot of those will be async

00:46:44,960 --> 00:46:47,440
friendly

00:46:47,520 --> 00:46:52,640
so yeah i think that's that's where

00:46:50,480 --> 00:46:56,000
we'll be delivering a lot of

00:46:52,640 --> 00:46:59,280
uh new features and a lot of value

00:46:56,000 --> 00:46:59,280
in the next few standards

00:47:00,960 --> 00:47:04,800
um all right let me see if we can find

00:47:03,680 --> 00:47:09,280
we're starting to get

00:47:04,800 --> 00:47:09,280
towards the end um uh

00:47:09,680 --> 00:47:12,800
uh somebody asked is there an example of

00:47:11,359 --> 00:47:13,839
something that has gone through the

00:47:12,800 --> 00:47:18,000
incubator

00:47:13,839 --> 00:47:21,200
and i'm i'm trying to think of

00:47:18,000 --> 00:47:22,839
a good or my favorite example um so

00:47:21,200 --> 00:47:25,440
here's a good example

00:47:22,839 --> 00:47:27,599
um uh and i'm not going to remember the

00:47:25,440 --> 00:47:30,000
paper number but

00:47:27,599 --> 00:47:32,960
on the first day of the library

00:47:30,000 --> 00:47:36,319
incubator we looked at a paper from

00:47:32,960 --> 00:47:40,559
uh quarantine proposing some

00:47:36,319 --> 00:47:44,559
changes to the uh

00:47:40,559 --> 00:47:48,640
the concepts for ranges

00:47:44,559 --> 00:47:52,079
to support move-only iterators

00:47:48,640 --> 00:47:54,079
if i'm recalling this correctly and um

00:47:52,079 --> 00:47:55,520
we looked at it we gave some feedback

00:47:54,079 --> 00:47:56,800
and we felt it was

00:47:55,520 --> 00:47:58,160
very important because it was the sort

00:47:56,800 --> 00:47:58,720
of thing that we would either do in c

00:47:58,160 --> 00:48:01,520
plus

00:47:58,720 --> 00:48:03,119
20 or we wouldn't do it all and so we

00:48:01,520 --> 00:48:04,640
sent it along

00:48:03,119 --> 00:48:06,480
it was like it was one of the only

00:48:04,640 --> 00:48:10,559
things that the incubator

00:48:06,480 --> 00:48:14,000
said sent to library evolution for c

00:48:10,559 --> 00:48:14,400
plus 20 and it ended up um getting into

00:48:14,000 --> 00:48:16,720
c

00:48:14,400 --> 00:48:18,559
plus 20. and i'm glad it did it i think

00:48:16,720 --> 00:48:22,160
it improved um

00:48:18,559 --> 00:48:23,680
uh ranges overall um

00:48:22,160 --> 00:48:25,200
i think steph curry's is this is the

00:48:23,680 --> 00:48:28,319
current one i think that yeah

00:48:25,200 --> 00:48:30,160
lwg just approved for

00:48:28,319 --> 00:48:33,119
attentively approved for 23. we haven't

00:48:30,160 --> 00:48:35,200
had an actual plenary vote but

00:48:33,119 --> 00:48:37,440
probably my favorite incubator paper

00:48:35,200 --> 00:48:41,040
right now is the process paper

00:48:37,440 --> 00:48:41,920
um it actually started at um at c plus

00:48:41,040 --> 00:48:44,240
plus now c

00:48:41,920 --> 00:48:44,960
plus plus now used to do these library

00:48:44,240 --> 00:48:46,640
in a week

00:48:44,960 --> 00:48:48,559
things where we try to design a boost

00:48:46,640 --> 00:48:50,400
library in a week and

00:48:48,559 --> 00:48:52,640
one or two years ago i suggested hey

00:48:50,400 --> 00:48:54,160
let's do a committee proposal in a week

00:48:52,640 --> 00:48:56,079
so a group of people got together and

00:48:54,160 --> 00:48:57,599
wrote a proposal standardized

00:48:56,079 --> 00:49:00,160
essentially boost process

00:48:57,599 --> 00:49:01,520
and it's a very well written proposal

00:49:00,160 --> 00:49:03,200
the authors are very

00:49:01,520 --> 00:49:05,280
responsive to feedback it's been through

00:49:03,200 --> 00:49:07,119
the incubator a few times and

00:49:05,280 --> 00:49:09,599
it's a really good example of how to do

00:49:07,119 --> 00:49:11,599
a paper properly and how to

00:49:09,599 --> 00:49:13,680
interact with the committee well that

00:49:11,599 --> 00:49:16,319
they've you know when they get feedback

00:49:13,680 --> 00:49:16,800
they take it and really to heart and

00:49:16,319 --> 00:49:19,200
they

00:49:16,800 --> 00:49:20,319
they go and apply it um and it's very

00:49:19,200 --> 00:49:23,119
well written

00:49:20,319 --> 00:49:24,559
um there's also a proposal for a uuid

00:49:23,119 --> 00:49:26,880
library which

00:49:24,559 --> 00:49:29,119
i kind of like it's a small thing but

00:49:26,880 --> 00:49:32,400
it's good

00:49:29,119 --> 00:49:35,440
all righty um i think we can maybe do

00:49:32,400 --> 00:49:35,440
one or two more

00:49:36,880 --> 00:49:40,559
uh there's a few fun ones i'll save for

00:49:39,680 --> 00:49:44,240
the last five

00:49:40,559 --> 00:49:46,079
five minutes um

00:49:44,240 --> 00:49:48,000
there's a compliment we've sort of

00:49:46,079 --> 00:49:49,119
already addressed what is the most

00:49:48,000 --> 00:49:51,680
helpful way

00:49:49,119 --> 00:49:52,319
i can provide feedback on which changes

00:49:51,680 --> 00:49:54,480
i believe

00:49:52,319 --> 00:49:59,839
should or should not be prioritized for

00:49:54,480 --> 00:49:59,839
the standard library

00:50:00,800 --> 00:50:07,839
i would think just said in the email um

00:50:04,079 --> 00:50:10,880
the mailing lists you know

00:50:07,839 --> 00:50:12,400
and and the the most important part

00:50:10,880 --> 00:50:16,079
there is

00:50:12,400 --> 00:50:18,000
give us reasons yes if you if you just

00:50:16,079 --> 00:50:20,319
send a list and and tell us

00:50:18,000 --> 00:50:23,200
this is the list this is the priorities

00:50:20,319 --> 00:50:26,480
this you have to do this or otherwise

00:50:23,200 --> 00:50:29,599
i'm going to be sad well

00:50:26,480 --> 00:50:31,839
that makes us sad too but um we really

00:50:29,599 --> 00:50:34,400
need good reasons so that you can

00:50:31,839 --> 00:50:34,880
that we can see why it is important and

00:50:34,400 --> 00:50:38,240
then

00:50:34,880 --> 00:50:40,720
uh that may makes us um see

00:50:38,240 --> 00:50:42,559
see those reasons and and um then

00:50:40,720 --> 00:50:44,960
shepherd it along and and

00:50:42,559 --> 00:50:46,319
um yeah prioritize things that should be

00:50:44,960 --> 00:50:48,000
prioritized

00:50:46,319 --> 00:50:49,359
yeah and the reasons are that's really

00:50:48,000 --> 00:50:49,839
yeah i totally agree that's what's

00:50:49,359 --> 00:50:51,280
important

00:50:49,839 --> 00:50:53,280
that's what's important in design i mean

00:50:51,280 --> 00:50:54,640
reasons do convince committee members to

00:50:53,280 --> 00:50:56,000
change their opinions

00:50:54,640 --> 00:50:57,839
yeah just saying you don't like

00:50:56,000 --> 00:50:59,599
something

00:50:57,839 --> 00:51:02,079
okay but that that's not enough

00:50:59,599 --> 00:51:03,440
information for us to go on

00:51:02,079 --> 00:51:05,280
this is also the best way to get

00:51:03,440 --> 00:51:06,640
involved in the committee um

00:51:05,280 --> 00:51:08,800
i originally got involved in the

00:51:06,640 --> 00:51:09,920
committee uh i

00:51:08,800 --> 00:51:11,839
i knew i'd known about the credit

00:51:09,920 --> 00:51:13,119
committee for a while i was you know

00:51:11,839 --> 00:51:15,119
i did a lot of stuff at sea plus

00:51:13,119 --> 00:51:16,960
conferences but the way i got involved

00:51:15,119 --> 00:51:17,680
was there was one particular paper that

00:51:16,960 --> 00:51:20,160
was

00:51:17,680 --> 00:51:21,599
in a subject area that it was very

00:51:20,160 --> 00:51:22,160
relevant to the work i was doing at the

00:51:21,599 --> 00:51:25,359
time

00:51:22,160 --> 00:51:26,720
it was a early version of

00:51:25,359 --> 00:51:28,720
it was a paper proposing something

00:51:26,720 --> 00:51:31,359
similar to mdspan

00:51:28,720 --> 00:51:33,359
and i had some you know thoughts and

00:51:31,359 --> 00:51:34,319
feedbacks and suggestions for the author

00:51:33,359 --> 00:51:36,079
and so i

00:51:34,319 --> 00:51:38,000
i reached out to them i sent them an

00:51:36,079 --> 00:51:40,559
email with you know a bunch of feedback

00:51:38,000 --> 00:51:41,119
and um i chatted with them a little bit

00:51:40,559 --> 00:51:42,559
and

00:51:41,119 --> 00:51:44,720
then they suggested that i should go to

00:51:42,559 --> 00:51:47,040
a committee meeting um

00:51:44,720 --> 00:51:49,040
so yeah i think the the best way to get

00:51:47,040 --> 00:51:50,960
to like

00:51:49,040 --> 00:51:52,720
to have your voice heard and to get

00:51:50,960 --> 00:51:53,440
involved in the committee is to go and

00:51:52,720 --> 00:51:56,160
provide

00:51:53,440 --> 00:51:57,119
feedback on you know some existing

00:51:56,160 --> 00:52:00,000
proposal

00:51:57,119 --> 00:52:01,920
um uh we are some people think the best

00:52:00,000 --> 00:52:06,000
way is to propose a new thing

00:52:01,920 --> 00:52:08,559
um we have many new things um the the

00:52:06,000 --> 00:52:09,440
the new things create work for us

00:52:08,559 --> 00:52:12,559
whereas

00:52:09,440 --> 00:52:13,760
providing review and feedback um does

00:52:12,559 --> 00:52:16,880
work for us

00:52:13,760 --> 00:52:18,240
um so if you're in if if you are someone

00:52:16,880 --> 00:52:19,359
who's not on the committee and you want

00:52:18,240 --> 00:52:22,079
to get started

00:52:19,359 --> 00:52:23,520
um the i think the way you do that is

00:52:22,079 --> 00:52:24,800
first you go and you find something that

00:52:23,520 --> 00:52:26,960
you have an opinion on

00:52:24,800 --> 00:52:28,160
you know some proposal or you know if

00:52:26,960 --> 00:52:29,760
you have opinions on the set of

00:52:28,160 --> 00:52:33,119
priorities for things

00:52:29,760 --> 00:52:35,200
and then you know write up your

00:52:33,119 --> 00:52:36,319
opinions in some way shape or form it

00:52:35,200 --> 00:52:37,760
doesn't have to be

00:52:36,319 --> 00:52:39,440
it doesn't have to look in its first

00:52:37,760 --> 00:52:41,920
draft like a committee paper

00:52:39,440 --> 00:52:43,280
um just provide some write-up and then i

00:52:41,920 --> 00:52:46,720
would reach out to

00:52:43,280 --> 00:52:49,760
you know any of us library chairs

00:52:46,720 --> 00:52:50,720
or to the proposal authors all papers

00:52:49,760 --> 00:52:52,960
are supposed to have

00:52:50,720 --> 00:52:54,079
the email of the contact person for the

00:52:52,960 --> 00:52:57,119
paper

00:52:54,079 --> 00:53:00,160
um and send us those thoughts

00:52:57,119 --> 00:53:02,800
and then we can help you

00:53:00,160 --> 00:53:03,680
you know get get that feedback in front

00:53:02,800 --> 00:53:05,599
of the right people

00:53:03,680 --> 00:53:07,200
we can help you even take that feedback

00:53:05,599 --> 00:53:08,960
and turn it into a paper

00:53:07,200 --> 00:53:10,559
sometimes we'll have papers that are not

00:53:08,960 --> 00:53:12,319
actually proposals themselves but our

00:53:10,559 --> 00:53:15,119
feedback on other papers

00:53:12,319 --> 00:53:15,839
um and uh then we can uh sort of use

00:53:15,119 --> 00:53:18,319
that as a way to

00:53:15,839 --> 00:53:19,920
onboard you into getting more involved i

00:53:18,319 --> 00:53:21,760
mean our goal really is no surprises you

00:53:19,920 --> 00:53:22,800
know we want more information especially

00:53:21,760 --> 00:53:24,720
information

00:53:22,800 --> 00:53:25,839
things we may not have thought about it

00:53:24,720 --> 00:53:27,839
it is important

00:53:25,839 --> 00:53:29,280
and that that includes prioritization of

00:53:27,839 --> 00:53:32,319
the stuff we do

00:53:29,280 --> 00:53:35,839
yeah yeah and i would recommend also

00:53:32,319 --> 00:53:39,359
uh of course read read proposals uh

00:53:35,839 --> 00:53:40,319
you know just it's not it's not a

00:53:39,359 --> 00:53:44,240
condition

00:53:40,319 --> 00:53:47,200
to um to to

00:53:44,240 --> 00:53:48,160
you know to you you can just focus on

00:53:47,200 --> 00:53:50,960
one proposal but

00:53:48,160 --> 00:53:53,200
i would recommend you know just to get

00:53:50,960 --> 00:53:54,480
the hunch get the feeling of how things

00:53:53,200 --> 00:53:56,880
are done and

00:53:54,480 --> 00:53:57,599
get more familiar with different topics

00:53:56,880 --> 00:54:00,559
that are

00:53:57,599 --> 00:54:01,359
are the top priority now or are being

00:54:00,559 --> 00:54:04,319
discussed

00:54:01,359 --> 00:54:06,079
and and even you know get some

00:54:04,319 --> 00:54:09,280
information about

00:54:06,079 --> 00:54:11,119
how how a certain proposal was

00:54:09,280 --> 00:54:13,760
considered i think

00:54:11,119 --> 00:54:15,520
it's it's a very interesting progress uh

00:54:13,760 --> 00:54:19,440
process in general and

00:54:15,520 --> 00:54:22,400
it's it's good to get familiar with it

00:54:19,440 --> 00:54:23,599
in in many ways it's very similar to

00:54:22,400 --> 00:54:26,559
what you would do

00:54:23,599 --> 00:54:27,520
if you want wanted to get involved in a

00:54:26,559 --> 00:54:30,960
in a large

00:54:27,520 --> 00:54:34,960
open source project that the first step

00:54:30,960 --> 00:54:37,599
is is that you want to build

00:54:34,960 --> 00:54:39,440
you know you want to you want to build

00:54:37,599 --> 00:54:40,880
some expertise yourself and you want to

00:54:39,440 --> 00:54:43,040
build some record of contributing to

00:54:40,880 --> 00:54:46,480
that project in some way

00:54:43,040 --> 00:54:48,960
and um uh as you start

00:54:46,480 --> 00:54:50,720
making some contributions you'll get

00:54:48,960 --> 00:54:52,160
more and more involved in that community

00:54:50,720 --> 00:54:53,119
and then you'll have more and more of an

00:54:52,160 --> 00:54:56,400
opportunity

00:54:53,119 --> 00:54:57,680
to provide your input um so yeah so i

00:54:56,400 --> 00:54:59,920
mean i guess essentially what

00:54:57,680 --> 00:55:01,280
what i'm saying is the best way like if

00:54:59,920 --> 00:55:04,240
you want to help set

00:55:01,280 --> 00:55:04,880
the you know priorities for what should

00:55:04,240 --> 00:55:08,240
go into c

00:55:04,880 --> 00:55:10,880
plus plus the the best thing is

00:55:08,240 --> 00:55:12,400
ultimately to get yourself a trajectory

00:55:10,880 --> 00:55:15,200
to join the committee

00:55:12,400 --> 00:55:16,160
um we do have you know some ways of

00:55:15,200 --> 00:55:19,599
getting

00:55:16,160 --> 00:55:20,079
uh data and input from the community

00:55:19,599 --> 00:55:23,839
like

00:55:20,079 --> 00:55:27,359
the standard foundations um

00:55:23,839 --> 00:55:29,920
surveys that we do um uh

00:55:27,359 --> 00:55:30,880
two or three times a year like putting

00:55:29,920 --> 00:55:32,640
your feed we

00:55:30,880 --> 00:55:34,400
the entire committee gets the results of

00:55:32,640 --> 00:55:36,079
that survey um

00:55:34,400 --> 00:55:37,680
but that's nowhere near as valuable as

00:55:36,079 --> 00:55:39,760
having a person

00:55:37,680 --> 00:55:41,280
that's on the committee that we can

00:55:39,760 --> 00:55:42,880
actually talk to and that can express

00:55:41,280 --> 00:55:45,359
their opinion like that's really

00:55:42,880 --> 00:55:47,119
that's very helpful yeah and i would

00:55:45,359 --> 00:55:50,240
just love to add that

00:55:47,119 --> 00:55:52,000
i'm also it's like at least the way i

00:55:50,240 --> 00:55:54,319
see it it's very important to me

00:55:52,000 --> 00:55:55,839
um personally to collect you know data

00:55:54,319 --> 00:55:59,040
to collect input so

00:55:55,839 --> 00:56:02,799
feel free to just email me with thoughts

00:55:59,040 --> 00:56:06,000
or i really i really think it's like

00:56:02,799 --> 00:56:10,079
that the standard is first of all

00:56:06,000 --> 00:56:10,079
is for the community so

00:56:12,400 --> 00:56:16,640
so all right we'll do some of the fun

00:56:14,400 --> 00:56:19,200
questions now um

00:56:16,640 --> 00:56:20,000
does bryce get tired of getting grief

00:56:19,200 --> 00:56:22,720
from people

00:56:20,000 --> 00:56:25,760
in the groups that he shares and this

00:56:22,720 --> 00:56:28,839
question is asked by one of the people

00:56:25,760 --> 00:56:30,400
who's in who's one of the other library

00:56:28,839 --> 00:56:33,599
evolution uh

00:56:30,400 --> 00:56:33,599
leadership um

00:56:34,079 --> 00:56:37,680
i i would say i don't get it's not the

00:56:36,000 --> 00:56:39,440
grief that i get from the library

00:56:37,680 --> 00:56:40,480
evolution people it's the grief that i

00:56:39,440 --> 00:56:44,880
get from

00:56:40,480 --> 00:56:48,000
jf and hannah that that gets to me

00:56:44,880 --> 00:56:52,000
um and then uh where

00:56:48,000 --> 00:56:54,079
nevin did you get the cppcon chef hat

00:56:52,000 --> 00:56:55,760
so for the first tvp con uh we had

00:56:54,079 --> 00:56:57,440
icebergs suggested to john kell we do

00:56:55,760 --> 00:56:58,960
building the seafood plus committee

00:56:57,440 --> 00:57:00,559
so i gave myself a hundred dollar budget

00:56:58,960 --> 00:57:01,200
to have this made i got the real logo

00:57:00,559 --> 00:57:02,720
and then

00:57:01,200 --> 00:57:04,640
it's like only like 30 bucks ended up

00:57:02,720 --> 00:57:06,160
getting like i have the whole chef's

00:57:04,640 --> 00:57:09,359
outfit for it too

00:57:06,160 --> 00:57:12,799
so this is one-of-a-kind

00:57:09,359 --> 00:57:14,480
i i have to say any more on any of the

00:57:12,799 --> 00:57:16,799
committee zoom calls

00:57:14,480 --> 00:57:18,319
nevin always he always has a great

00:57:16,799 --> 00:57:18,880
background and it's always something

00:57:18,319 --> 00:57:20,880
different

00:57:18,880 --> 00:57:22,319
that uh it brings it brings joy to my

00:57:20,880 --> 00:57:24,240
heart

00:57:22,319 --> 00:57:25,359
all right and then let's close on this

00:57:24,240 --> 00:57:28,160
uh question

00:57:25,359 --> 00:57:30,880
um what features are you most excited

00:57:28,160 --> 00:57:33,200
about that are in progress so let's um

00:57:30,880 --> 00:57:35,359
let's go around and do that and let's

00:57:33,200 --> 00:57:38,559
we'll start with inball

00:57:35,359 --> 00:57:42,799
sure so i think i'm a bit

00:57:38,559 --> 00:57:44,400
uh i mean executors i think are the most

00:57:42,799 --> 00:57:47,119
interesting thing that going on right

00:57:44,400 --> 00:57:51,359
now i mean i

00:57:47,119 --> 00:57:55,280
i really think that this is like a great

00:57:51,359 --> 00:57:57,040
um use case of how do you design

00:57:55,280 --> 00:57:58,559
something that is trying to help

00:57:57,040 --> 00:58:01,599
everyone and have

00:57:58,559 --> 00:58:03,359
different needs i mean different

00:58:01,599 --> 00:58:04,880
uh constraints and i think it's

00:58:03,359 --> 00:58:08,240
fascinating you know just to

00:58:04,880 --> 00:58:10,640
to see that in action i'm very excited

00:58:08,240 --> 00:58:10,640
about it

00:58:10,720 --> 00:58:13,920
neven how about you it would be a

00:58:12,480 --> 00:58:15,520
language it would be pattern matching

00:58:13,920 --> 00:58:18,240
because for me that makes

00:58:15,520 --> 00:58:19,520
varian much more usable yeah and i think

00:58:18,240 --> 00:58:23,359
we really need that

00:58:19,520 --> 00:58:26,799
i mean yeah

00:58:23,359 --> 00:58:27,119
fabio how about you yeah i can second

00:58:26,799 --> 00:58:29,520
what

00:58:27,119 --> 00:58:31,839
nevin just said i am also very excited

00:58:29,520 --> 00:58:33,599
about pattern matching even if it's not

00:58:31,839 --> 00:58:37,280
a library feature

00:58:33,599 --> 00:58:38,240
um on the library side probably and

00:58:37,280 --> 00:58:41,440
that's something that

00:58:38,240 --> 00:58:46,720
already left uh lewg um

00:58:41,440 --> 00:58:48,839
uh uh function ref is pretty interesting

00:58:46,720 --> 00:58:50,559
yeah i was i was thinking about any

00:58:48,839 --> 00:58:52,799
invocable um

00:58:50,559 --> 00:58:53,920
mostly because it's missed the last two

00:58:52,799 --> 00:58:56,960
standards just

00:58:53,920 --> 00:59:00,160
barely and it it's time

00:58:56,960 --> 00:59:01,839
it deserves it um that's just a like a

00:59:00,160 --> 00:59:05,680
type of racing wrapper for

00:59:01,839 --> 00:59:09,040
for um uh it's it's an improved version

00:59:05,680 --> 00:59:10,160
of uh stood function right it's a move

00:59:09,040 --> 00:59:12,960
only version

00:59:10,160 --> 00:59:13,599
yeah and i would say i think the thing

00:59:12,960 --> 00:59:17,359
that i'm

00:59:13,599 --> 00:59:21,040
probably most excited for is um

00:59:17,359 --> 00:59:24,640
the continued expansion of

00:59:21,040 --> 00:59:27,760
what is capable in constexpr and

00:59:24,640 --> 00:59:30,720
um reflection um

00:59:27,760 --> 00:59:32,799
reflection is a technology that's going

00:59:30,720 --> 00:59:36,480
to enable a lot of other

00:59:32,799 --> 00:59:36,480
library technologies for us

00:59:37,359 --> 00:59:42,720
for example during the fireside chat

00:59:40,079 --> 00:59:45,280
earlier in cppcon

00:59:42,720 --> 00:59:46,799
a logging library came up somebody was

00:59:45,280 --> 00:59:48,960
like oh yeah like you know a logging

00:59:46,799 --> 00:59:50,319
library if we had reflection

00:59:48,960 --> 00:59:51,680
we'd be able to build a really good one

00:59:50,319 --> 00:59:52,880
there's there's just so many different

00:59:51,680 --> 00:59:55,839
libraries that

00:59:52,880 --> 00:59:56,720
will benefit from that um obviously i'm

00:59:55,839 --> 01:00:01,040
i'm

00:59:56,720 --> 01:00:01,040
you know excited about executors um i'm

01:00:04,079 --> 01:00:09,520
um yeah um

01:00:07,440 --> 01:00:11,760
in terms of seatpostpost as a whole i

01:00:09,520 --> 01:00:11,760
think

01:00:11,920 --> 01:00:16,799
the possibilities that modules have and

01:00:15,359 --> 01:00:19,920
the possibilities of us

01:00:16,799 --> 01:00:22,240
doing a better job at um

01:00:19,920 --> 01:00:24,640
enabling package ecosystems are probably

01:00:22,240 --> 01:00:28,000
the best thing that we can do for

01:00:24,640 --> 01:00:31,280
c plus plus in the long term all right

01:00:28,000 --> 01:00:34,400
well um we are at the end of our time i

01:00:31,280 --> 01:00:38,000
want to uh thank uh

01:00:34,400 --> 01:00:39,440
all of my panelists and all of you for

01:00:38,000 --> 01:00:41,440
the great questions

01:00:39,440 --> 01:00:43,040
um and if you have any other questions

01:00:41,440 --> 01:00:44,960
uh

01:00:43,040 --> 01:00:46,319
just feel free to send us emails or

01:00:44,960 --> 01:00:49,599
tweet at us or

01:00:46,319 --> 01:00:50,559
ding us on slack we're all fairly

01:00:49,599 --> 01:00:53,920
accessible

01:00:50,559 --> 01:00:57,839
yeah all right thank you all bye-bye

01:00:53,920 --> 01:00:57,839
bye everyone

01:01:15,200 --> 01:01:17,280

YouTube URL: https://www.youtube.com/watch?v=Py1eVrJ2S88


