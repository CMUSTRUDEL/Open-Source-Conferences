Title: C++ Committee's Library Evolution Working Group Panel - Hosted by Ben Craig - CppCon 2020
Publication date: 2020-10-04
Playlist: CppCon 2020 Day 4
Description: 
	https://cppcon.org/
https://github.com/CppCon/CppCon2020
---
Come join the leaders of the C++ Committee's Library Evolution Working Group to discuss the latest developments in and future of the C++ Standard Library.

---
Hosted by Ben Craig

Panel:

Billy Baker
Software Architect, FlightSafety International

Tom Honermann
Sr Staff Software Engineer, Synopsys

Corentin Jabot
Corentin Jabot is a freelance developer and member of the C++ committee and is mainly interested in portability and API design.

---
Streamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:08,639 --> 00:00:12,559
hello

00:00:09,280 --> 00:00:13,280
everybody uh welcome to another edition

00:00:12,559 --> 00:00:16,320
of ask us

00:00:13,280 --> 00:00:17,840
anything at cppcon today you'll be

00:00:16,320 --> 00:00:20,640
asking questions

00:00:17,840 --> 00:00:22,160
in library evolution roles whatever you

00:00:20,640 --> 00:00:24,960
want

00:00:22,160 --> 00:00:27,039
uh you can ask us what we're thinking

00:00:24,960 --> 00:00:27,840
you can ask us what we were thinking you

00:00:27,039 --> 00:00:31,039
can ask us

00:00:27,840 --> 00:00:33,280
what were we thinking but i may not pick

00:00:31,039 --> 00:00:35,360
that question if it's in caps

00:00:33,280 --> 00:00:37,600
so uh before i continue with

00:00:35,360 --> 00:00:40,800
introductions a disclaimer

00:00:37,600 --> 00:00:42,480
so i am not john calb no one on this

00:00:40,800 --> 00:00:44,000
panel is john calb

00:00:42,480 --> 00:00:45,680
should this panel suddenly contain one

00:00:44,000 --> 00:00:46,879
or more john calves you should notify a

00:00:45,680 --> 00:00:50,079
substitute john calb

00:00:46,879 --> 00:00:51,680
aka bryce to correct the issue with

00:00:50,079 --> 00:00:53,120
that out of the way we will do the

00:00:51,680 --> 00:00:55,920
introductions so

00:00:53,120 --> 00:00:58,160
uh i am ben craig vice chair of library

00:00:55,920 --> 00:01:01,680
evolution and embedded domain lead of

00:00:58,160 --> 00:01:04,879
sg14 the low latency study group

00:01:01,680 --> 00:01:06,560
i work at ni and people may know me for

00:01:04,879 --> 00:01:09,760
my work on freestanding c

00:01:06,560 --> 00:01:12,320
plus uh quarantine europe

00:01:09,760 --> 00:01:14,400
hello my name is jabo i am a freelance

00:01:12,320 --> 00:01:17,360
developer a currently working

00:01:14,400 --> 00:01:18,640
in an audio company i am a committee

00:01:17,360 --> 00:01:22,400
member since

00:01:18,640 --> 00:01:24,880
2008 i write paper i

00:01:22,400 --> 00:01:27,280
am a member of library evolution the

00:01:24,880 --> 00:01:30,400
ag-16 unicode study group

00:01:27,280 --> 00:01:34,079
and currently managing along with

00:01:30,400 --> 00:01:36,479
uh invite levy the mailing list

00:01:34,079 --> 00:01:39,040
discussion on the labor evolution

00:01:36,479 --> 00:01:39,040
architecture

00:01:39,520 --> 00:01:44,079
uh tom hello everyone my name is tom

00:01:43,040 --> 00:01:46,799
hunterman

00:01:44,079 --> 00:01:48,960
i am the chair of the sg-16 text in

00:01:46,799 --> 00:01:53,040
unicode processing group

00:01:48,960 --> 00:01:55,280
along with corinton there i have been

00:01:53,040 --> 00:01:58,640
working with the committee since 2015

00:01:55,280 --> 00:02:00,799
lenexa was my my first wg21 meeting

00:01:58,640 --> 00:02:02,320
i currently work for synopsis on the

00:02:00,799 --> 00:02:07,600
coverity static analyzer

00:02:02,320 --> 00:02:10,720
where i focus on our cnc plus front ends

00:02:07,600 --> 00:02:14,560
and billy hello i'm billy baker

00:02:10,720 --> 00:02:16,959
i've been working with wg21 since 2013.

00:02:14,560 --> 00:02:18,400
uh after the prague meeting i uh

00:02:16,959 --> 00:02:20,959
accepted the position of

00:02:18,400 --> 00:02:22,000
sg18 library evolution working group

00:02:20,959 --> 00:02:24,800
incubator

00:02:22,000 --> 00:02:26,640
chair you'll see my co-chair this

00:02:24,800 --> 00:02:30,239
afternoon nevin lieber

00:02:26,640 --> 00:02:33,599
and i guess back to you ben okay

00:02:30,239 --> 00:02:34,959
so we're going to uh start with a

00:02:33,599 --> 00:02:37,840
question

00:02:34,959 --> 00:02:39,120
a warm-up question from me to the other

00:02:37,840 --> 00:02:42,160
people here

00:02:39,120 --> 00:02:43,840
after that i will be taking the highest

00:02:42,160 --> 00:02:45,360
voted questions out of the q

00:02:43,840 --> 00:02:47,040
a so i'm going to give a little bit of

00:02:45,360 --> 00:02:48,640
chance for that to build up and for

00:02:47,040 --> 00:02:51,760
people to vote on what they

00:02:48,640 --> 00:02:52,239
are interested in uh so the first

00:02:51,760 --> 00:02:55,440
question

00:02:52,239 --> 00:02:56,239
is going to be uh what is uh out of the

00:02:55,440 --> 00:02:59,280
library

00:02:56,239 --> 00:03:03,040
uh what is your favorite c plus plus

00:02:59,280 --> 00:03:05,760
20 feature uh so quarantine

00:03:03,040 --> 00:03:08,560
uh angie's i will go with that it's a

00:03:05,760 --> 00:03:10,319
big feature so there's a lot in there

00:03:08,560 --> 00:03:12,000
but i think it's really transformative

00:03:10,319 --> 00:03:16,959
in how we can write

00:03:12,000 --> 00:03:16,959
um simple postcode and algorithm

00:03:17,040 --> 00:03:21,360
tom what about you uh similarly i'm

00:03:19,840 --> 00:03:23,280
gonna go with concepts

00:03:21,360 --> 00:03:24,640
the the library concepts that have

00:03:23,280 --> 00:03:25,040
landed there i think are going to be

00:03:24,640 --> 00:03:27,360
just

00:03:25,040 --> 00:03:29,200
incredibly useful for writing generic

00:03:27,360 --> 00:03:32,159
code and they make it really fun

00:03:29,200 --> 00:03:33,599
um as well just how the code comes

00:03:32,159 --> 00:03:36,879
together now i started

00:03:33,599 --> 00:03:39,760
experimenting with uh using concepts

00:03:36,879 --> 00:03:42,080
um back when andrew sutton was was first

00:03:39,760 --> 00:03:45,599
putting together his origin library

00:03:42,080 --> 00:03:47,200
and it was it really helped

00:03:45,599 --> 00:03:49,280
unlock my brain in terms of how i

00:03:47,200 --> 00:03:49,760
thought about the code i was writing so

00:03:49,280 --> 00:03:51,760
i'm

00:03:49,760 --> 00:03:53,360
really interested to see how people

00:03:51,760 --> 00:03:56,480
start using all those fundamental

00:03:53,360 --> 00:03:56,480
concepts in their own code

00:03:58,319 --> 00:04:03,680
uh and billy well let's see here there's

00:04:02,080 --> 00:04:04,239
lots of great features but i'm going to

00:04:03,680 --> 00:04:06,480
pick

00:04:04,239 --> 00:04:08,080
a particularly small one we added the

00:04:06,480 --> 00:04:09,200
numbers header with mathematical

00:04:08,080 --> 00:04:11,200
constants

00:04:09,200 --> 00:04:13,760
and for someone who has seen code bases

00:04:11,200 --> 00:04:15,280
with 13 different versions of pi

00:04:13,760 --> 00:04:17,040
being able to point to one header and

00:04:15,280 --> 00:04:20,160
say there's pi for you

00:04:17,040 --> 00:04:22,400
uh to me is a great win

00:04:20,160 --> 00:04:23,919
uh and i think i'm gonna go with the

00:04:22,400 --> 00:04:27,040
format library

00:04:23,919 --> 00:04:30,240
uh i've always had the

00:04:27,040 --> 00:04:33,120
the been guilty of using print f

00:04:30,240 --> 00:04:33,759
in a c plus printf and family in a c

00:04:33,120 --> 00:04:37,520
plus

00:04:33,759 --> 00:04:39,440
17 code base and uh now i don't have to

00:04:37,520 --> 00:04:41,680
be guilty anymore and i can use

00:04:39,440 --> 00:04:43,919
format instead of uh dealing with i o

00:04:41,680 --> 00:04:46,800
streams

00:04:43,919 --> 00:04:47,280
uh okay well i was going to try to get

00:04:46,800 --> 00:04:49,680
something

00:04:47,280 --> 00:04:50,960
that was for somebody else first but the

00:04:49,680 --> 00:04:53,040
highest voted question

00:04:50,960 --> 00:04:54,960
so far is can you talk about the

00:04:53,040 --> 00:04:55,840
direction of freestanding features that

00:04:54,960 --> 00:04:59,360
will be included

00:04:55,840 --> 00:05:02,479
excluded etc uh

00:04:59,360 --> 00:05:05,680
so it's still in progress

00:05:02,479 --> 00:05:08,639
uh things may make make it into c plus

00:05:05,680 --> 00:05:09,280
23 uh the thing that is most likely to

00:05:08,639 --> 00:05:12,240
make it in the c

00:05:09,280 --> 00:05:14,080
plus 23 isn't even a library feature

00:05:12,240 --> 00:05:16,160
it's a language feature

00:05:14,080 --> 00:05:17,280
and it's the opposite of a feature it's

00:05:16,160 --> 00:05:19,039
not including

00:05:17,280 --> 00:05:20,880
not requiring operator new to be there

00:05:19,039 --> 00:05:22,320
by default

00:05:20,880 --> 00:05:24,720
but if you want to see a general

00:05:22,320 --> 00:05:27,680
direction of what kinds of library

00:05:24,720 --> 00:05:30,160
facilities will be there

00:05:27,680 --> 00:05:31,440
assuming my vision for freestanding goes

00:05:30,160 --> 00:05:36,160
through

00:05:31,440 --> 00:05:39,440
you can look at p0829

00:05:36,160 --> 00:05:41,440
that that paper um

00:05:39,440 --> 00:05:43,039
and it has the high level of what all

00:05:41,440 --> 00:05:43,919
things and what features are going to be

00:05:43,039 --> 00:05:46,000
there

00:05:43,919 --> 00:05:48,080
uh longer term there may be some other

00:05:46,000 --> 00:05:52,320
language features that disappear but

00:05:48,080 --> 00:05:55,759
uh that that's

00:05:52,320 --> 00:05:59,280
a not very deep answer

00:05:55,759 --> 00:06:03,440
on on what's going into freestanding

00:05:59,280 --> 00:06:07,840
uh commentary from other people and what

00:06:03,440 --> 00:06:07,840
they think on direction to freestanding

00:06:08,479 --> 00:06:15,120
okay i have to i hope we make progress

00:06:11,520 --> 00:06:18,720
because i think impressed us by better

00:06:15,120 --> 00:06:18,720
competitive platforms but

00:06:19,039 --> 00:06:23,919
no one in this chat and then

00:06:24,800 --> 00:06:28,560
okay so let's see oh this this one

00:06:27,039 --> 00:06:31,840
should be a good one for discussion

00:06:28,560 --> 00:06:34,800
so uh should

00:06:31,840 --> 00:06:36,639
we have the networking in c plus

00:06:34,800 --> 00:06:39,039
standard without encryption

00:06:36,639 --> 00:06:41,120
so the the the networking ts does not

00:06:39,039 --> 00:06:45,199
contain tls support

00:06:41,120 --> 00:06:46,000
uh so uh i think i am going to start

00:06:45,199 --> 00:06:49,440
with

00:06:46,000 --> 00:06:50,560
uh tom for now because billy's icon's

00:06:49,440 --> 00:06:52,960
got a

00:06:50,560 --> 00:06:55,520
swirl disconnect there it was nice

00:06:52,960 --> 00:06:58,639
talking with you billy

00:06:55,520 --> 00:07:00,880
what do you think about uh the

00:06:58,639 --> 00:07:02,560
networking ts especially if it does not

00:07:00,880 --> 00:07:03,680
have encryption do you think it belongs

00:07:02,560 --> 00:07:05,680
there or not

00:07:03,680 --> 00:07:06,880
yeah you know we had a great discussion

00:07:05,680 --> 00:07:10,400
on this

00:07:06,880 --> 00:07:12,319
at uh maybe it was probably i can't

00:07:10,400 --> 00:07:13,680
remember what no belfast

00:07:12,319 --> 00:07:15,680
uh in belfast there was a good

00:07:13,680 --> 00:07:19,919
discussion about this and

00:07:15,680 --> 00:07:22,319
um i'm i think i'm kind of undecided i

00:07:19,919 --> 00:07:23,039
i mean i think the security aspects and

00:07:22,319 --> 00:07:25,599
encryption

00:07:23,039 --> 00:07:26,319
are incredibly important to have in

00:07:25,599 --> 00:07:28,960
there

00:07:26,319 --> 00:07:30,319
um that's what's needed most of the time

00:07:28,960 --> 00:07:32,720
but on the other hand there

00:07:30,319 --> 00:07:33,919
there are use cases for you know just

00:07:32,720 --> 00:07:36,160
the most simple

00:07:33,919 --> 00:07:37,039
basic stuff and if that can make

00:07:36,160 --> 00:07:38,639
progress and

00:07:37,039 --> 00:07:40,319
we add the encryption later maybe that's

00:07:38,639 --> 00:07:42,720
okay um

00:07:40,319 --> 00:07:43,360
but i think networking is certainly not

00:07:42,720 --> 00:07:46,560
done

00:07:43,360 --> 00:07:49,840
until strong encryption support is

00:07:46,560 --> 00:07:51,680
is present uh

00:07:49,840 --> 00:07:53,280
quarantine do you have any opinions on

00:07:51,680 --> 00:07:57,919
this i do

00:07:53,280 --> 00:07:59,840
um so i always tell that

00:07:57,919 --> 00:08:01,840
encryption is really important and i

00:07:59,840 --> 00:08:05,280
will go so far as to say that

00:08:01,840 --> 00:08:08,400
networking without confession has a very

00:08:05,280 --> 00:08:10,960
dwelling number of use cases and

00:08:08,400 --> 00:08:12,560
people tend to assume that the committee

00:08:10,960 --> 00:08:14,479
um

00:08:12,560 --> 00:08:15,599
leads away and know what we are doing

00:08:14,479 --> 00:08:17,440
and so if we

00:08:15,599 --> 00:08:19,759
put networking in the standard without

00:08:17,440 --> 00:08:21,520
encryption uh we are sending a strong

00:08:19,759 --> 00:08:22,160
signal that we you don't actually need

00:08:21,520 --> 00:08:24,840
unconfirmed

00:08:22,160 --> 00:08:26,080
or maybe it's okay to not use encryption

00:08:24,840 --> 00:08:28,479
and

00:08:26,080 --> 00:08:29,919
it's there is very few use case where

00:08:28,479 --> 00:08:31,919
you you can go without

00:08:29,919 --> 00:08:33,360
encryption basically it's limited to

00:08:31,919 --> 00:08:36,640
private network

00:08:33,360 --> 00:08:37,919
in some cases so i really think any

00:08:36,640 --> 00:08:41,200
networking through the

00:08:37,919 --> 00:08:43,279
encryption and networking if you look at

00:08:41,200 --> 00:08:44,959
what it is it's actually mostly

00:08:43,279 --> 00:08:47,120
another synchronous model and we are

00:08:44,959 --> 00:08:48,880
also working on another asynchronous

00:08:47,120 --> 00:08:51,760
model which is standard receiver which

00:08:48,880 --> 00:08:53,279
is a really exciting escorting super

00:08:51,760 --> 00:08:55,680
and i don't think we should have

00:08:53,279 --> 00:08:57,040
multiple uh a synchronous model in the

00:08:55,680 --> 00:08:59,680
standard and so we should

00:08:57,040 --> 00:09:02,240
focus on getting executor right and this

00:08:59,680 --> 00:09:05,600
is the priority for superswitch23

00:09:02,240 --> 00:09:07,680
and once we get that done we can think

00:09:05,600 --> 00:09:09,360
about whether we want networking or

00:09:07,680 --> 00:09:13,360
whether we want a more general

00:09:09,360 --> 00:09:15,680
async io facility and so forth

00:09:13,360 --> 00:09:16,480
in the meantime you can use azure which

00:09:15,680 --> 00:09:18,560
is

00:09:16,480 --> 00:09:19,600
a superset of the networking test it's

00:09:18,560 --> 00:09:22,240
open source library

00:09:19,600 --> 00:09:23,040
it's maintained and it supports

00:09:22,240 --> 00:09:28,000
encryption

00:09:23,040 --> 00:09:31,120
and a lot of more features so use azure

00:09:28,000 --> 00:09:34,720
uh so uh i'll chime in on this as well

00:09:31,120 --> 00:09:35,440
is that uh there's substantial vendor

00:09:34,720 --> 00:09:38,640
concerns

00:09:35,440 --> 00:09:42,080
uh when dealing with uh

00:09:38,640 --> 00:09:46,320
with encryption in the networking ts so

00:09:42,080 --> 00:09:46,880
uh apple and microsoft in particular

00:09:46,320 --> 00:09:50,240
have

00:09:46,880 --> 00:09:53,519
uh their each of them have their

00:09:50,240 --> 00:09:55,519
c plus plus implementation and

00:09:53,519 --> 00:09:56,800
they tend to have uh corporate

00:09:55,519 --> 00:09:58,640
guidelines for

00:09:56,800 --> 00:10:00,399
these are the kinds of things that we

00:09:58,640 --> 00:10:02,640
can ship and

00:10:00,399 --> 00:10:03,519
i believe both of them say that okay you

00:10:02,640 --> 00:10:06,720
have to

00:10:03,519 --> 00:10:10,000
you can't ship unencrypted uh

00:10:06,720 --> 00:10:13,120
libraries that do unencrypted transport

00:10:10,000 --> 00:10:15,920
uh and so they would have to

00:10:13,120 --> 00:10:17,040
the the the c plus plus tool chains

00:10:15,920 --> 00:10:20,880
would have to get

00:10:17,040 --> 00:10:22,720
corporate exemptions for that which

00:10:20,880 --> 00:10:24,640
sends off a weird message at least

00:10:22,720 --> 00:10:28,959
internally to their companies

00:10:24,640 --> 00:10:29,680
uh that yes c plus plus is is so special

00:10:28,959 --> 00:10:31,120
that we can

00:10:29,680 --> 00:10:33,360
you know ship something that doesn't

00:10:31,120 --> 00:10:34,320
have encryption now there is definitely

00:10:33,360 --> 00:10:35,920
the argument of

00:10:34,320 --> 00:10:37,839
oh we need to make things that we can

00:10:35,920 --> 00:10:40,240
build upon you know what

00:10:37,839 --> 00:10:40,880
we the encryption stuff should be built

00:10:40,240 --> 00:10:43,279
on top

00:10:40,880 --> 00:10:44,800
of the unencrypted things and i i can

00:10:43,279 --> 00:10:47,920
definitely see that

00:10:44,800 --> 00:10:50,079
uh but uh i think there are

00:10:47,920 --> 00:10:51,120
some of these non-technical concerns

00:10:50,079 --> 00:10:54,000
that are going to

00:10:51,120 --> 00:10:54,399
that are going to make it challenging to

00:10:54,000 --> 00:10:58,240
ship

00:10:54,399 --> 00:10:59,279
without encryption uh so we've got a

00:10:58,240 --> 00:11:02,800
follow-on

00:10:59,279 --> 00:11:06,079
question uh and that

00:11:02,800 --> 00:11:09,040
is uh

00:11:06,079 --> 00:11:12,839
if we have networking encryption is it

00:11:09,040 --> 00:11:15,440
possible to have a standard encryption

00:11:12,839 --> 00:11:18,640
library uh

00:11:15,440 --> 00:11:21,920
let's start with quarantine this time so

00:11:18,640 --> 00:11:25,440
so this with encryption library

00:11:21,920 --> 00:11:25,920
and in general more complex libraries

00:11:25,440 --> 00:11:28,800
that

00:11:25,920 --> 00:11:30,320
are still active career of research and

00:11:28,800 --> 00:11:32,480
development

00:11:30,320 --> 00:11:33,680
is that at this point the standard is

00:11:32,480 --> 00:11:37,519
pretty committed to

00:11:33,680 --> 00:11:39,839
strong aba guarantee and

00:11:37,519 --> 00:11:42,000
that means we cannot remove things that

00:11:39,839 --> 00:11:45,440
gets deprecated for security

00:11:42,000 --> 00:11:48,320
reason and that make having

00:11:45,440 --> 00:11:50,240
cryptography in the standard library um

00:11:48,320 --> 00:11:52,959
very very challenging because

00:11:50,240 --> 00:11:57,120
what is considered good cryptographic

00:11:52,959 --> 00:11:58,880
algorithm change basically every year

00:11:57,120 --> 00:12:00,800
and then there's also the question of

00:11:58,880 --> 00:12:02,480
whether implementer

00:12:00,800 --> 00:12:03,920
has the boundaries to deal with

00:12:02,480 --> 00:12:06,959
cryptography and the

00:12:03,920 --> 00:12:08,720
competence to deal with cryptography and

00:12:06,959 --> 00:12:10,800
very few people have the expertise to do

00:12:08,720 --> 00:12:13,600
that and it's not something you we can

00:12:10,800 --> 00:12:16,240
afford to get wrong and that

00:12:13,600 --> 00:12:17,920
tend to uh prove that it's not something

00:12:16,240 --> 00:12:20,320
that we can easily do in the

00:12:17,920 --> 00:12:20,320
library

00:12:21,120 --> 00:12:24,880
okay billy now that you're back i'm

00:12:22,560 --> 00:12:28,079
going to uh to hit you with a question

00:12:24,880 --> 00:12:31,200
uh so uh if we have networking

00:12:28,079 --> 00:12:33,279
encryption uh in the networking ts

00:12:31,200 --> 00:12:34,639
we don't right now but if we have it is

00:12:33,279 --> 00:12:38,560
it possible to have a standard

00:12:34,639 --> 00:12:40,079
encryption library

00:12:38,560 --> 00:12:41,920
so that's interesting because we've

00:12:40,079 --> 00:12:42,800
talked about cryptography and other

00:12:41,920 --> 00:12:44,480
things

00:12:42,800 --> 00:12:46,240
in the standard library for a number of

00:12:44,480 --> 00:12:48,320
years i think uh

00:12:46,240 --> 00:12:49,600
uh one of the first ones that i remember

00:12:48,320 --> 00:12:52,800
was in uh

00:12:49,600 --> 00:12:53,120
champaign-urbana um i i think it would

00:12:52,800 --> 00:12:56,959
be

00:12:53,120 --> 00:12:57,600
hard um certainly working in an industry

00:12:56,959 --> 00:13:01,040
where

00:12:57,600 --> 00:13:02,079
we have to uh be very cognizant of

00:13:01,040 --> 00:13:07,200
export control

00:13:02,079 --> 00:13:09,040
it would probably be at some level um

00:13:07,200 --> 00:13:10,880
a good idea that we could point at our

00:13:09,040 --> 00:13:13,680
vendor-supplied libraries

00:13:10,880 --> 00:13:15,600
but at the same time as the committee

00:13:13,680 --> 00:13:18,720
trying to figure out what that means

00:13:15,600 --> 00:13:18,720
i think would be very difficult

00:13:19,279 --> 00:13:24,959
uh did you want to chime in on this tom

00:13:22,320 --> 00:13:25,760
um a little um yeah i think having

00:13:24,959 --> 00:13:28,480
support for the

00:13:25,760 --> 00:13:30,000
the various algorithms in the library is

00:13:28,480 --> 00:13:34,000
is reasonable

00:13:30,000 --> 00:13:36,480
you know the how things work with uh pki

00:13:34,000 --> 00:13:38,800
um yeah i i don't have a lot of

00:13:36,480 --> 00:13:42,160
particular thoughts about

00:13:38,800 --> 00:13:44,959
how we address things like that

00:13:42,160 --> 00:13:46,399
but in general you know have i think

00:13:44,959 --> 00:13:49,920
having the algorithms there

00:13:46,399 --> 00:13:50,800
is okay there's always potential for

00:13:49,920 --> 00:13:52,880
bugs

00:13:50,800 --> 00:13:54,560
but i think that potential is always

00:13:52,880 --> 00:13:57,760
going to exist no matter which vendor

00:13:54,560 --> 00:13:58,320
you get something from so so i guess

00:13:57,760 --> 00:13:59,519
i'll

00:13:58,320 --> 00:14:02,160
bring up one of the other you know

00:13:59,519 --> 00:14:05,760
challenges like i did before

00:14:02,160 --> 00:14:06,800
and that uh so open ssl is is a thing

00:14:05,760 --> 00:14:09,600
and it's got its

00:14:06,800 --> 00:14:10,320
cryptography libraries in there and one

00:14:09,600 --> 00:14:14,160
of the

00:14:10,320 --> 00:14:16,000
big uh selling points of the open ssl

00:14:14,160 --> 00:14:19,920
cryptography library

00:14:16,000 --> 00:14:21,199
is that it's got some important industry

00:14:19,920 --> 00:14:22,480
certification i don't remember the

00:14:21,199 --> 00:14:25,040
specific number

00:14:22,480 --> 00:14:27,519
specific group and that's an expensive

00:14:25,040 --> 00:14:30,880
and difficult certification to get

00:14:27,519 --> 00:14:34,240
and so we'd be competing against

00:14:30,880 --> 00:14:37,279
that and it

00:14:34,240 --> 00:14:39,360
maybe maybe the standard libraries and

00:14:37,279 --> 00:14:41,199
the uh the standard itself could get

00:14:39,360 --> 00:14:45,199
that chunk of the library

00:14:41,199 --> 00:14:48,480
to get that kind of certification but uh

00:14:45,199 --> 00:14:50,000
it would be a challenge uh i'm not sure

00:14:48,480 --> 00:14:52,160
that it would be necessary though right

00:14:50,000 --> 00:14:54,560
openssl won't go away

00:14:52,160 --> 00:14:56,880
so users can still opt into something

00:14:54,560 --> 00:15:01,519
that has a certification and

00:14:56,880 --> 00:15:05,519
you yeah competition is is good yep

00:15:01,519 --> 00:15:07,600
okay so now we've got

00:15:05,519 --> 00:15:08,720
something for the unicode people in the

00:15:07,600 --> 00:15:12,160
group

00:15:08,720 --> 00:15:14,560
is abi break does the api break if you

00:15:12,160 --> 00:15:17,279
add unicode support to strings and

00:15:14,560 --> 00:15:18,639
regex given the api stability decision

00:15:17,279 --> 00:15:22,720
in prague will it happen

00:15:18,639 --> 00:15:24,240
at all uh let's start with tom

00:15:22,720 --> 00:15:26,480
okay well i'm going to address the

00:15:24,240 --> 00:15:27,279
letter question first the the abi

00:15:26,480 --> 00:15:32,320
stability

00:15:27,279 --> 00:15:34,639
decision in prague is less of a decision

00:15:32,320 --> 00:15:35,519
it was more of a discussion and yeah

00:15:34,639 --> 00:15:39,040
there was a poll

00:15:35,519 --> 00:15:41,279
but the the takeaway is

00:15:39,040 --> 00:15:43,279
we should still consider api breaks on a

00:15:41,279 --> 00:15:46,240
case by case basis

00:15:43,279 --> 00:15:48,240
and you know and and i think we we will

00:15:46,240 --> 00:15:51,279
continue to do so

00:15:48,240 --> 00:15:53,920
um as for if it's an abi break

00:15:51,279 --> 00:15:55,680
uh for strings and regex yes

00:15:53,920 --> 00:15:58,240
particularly for regex we've had a

00:15:55,680 --> 00:16:00,480
couple of papers that have proposed

00:15:58,240 --> 00:16:01,759
ways of extending the current regex

00:16:00,480 --> 00:16:06,079
library

00:16:01,759 --> 00:16:07,920
and from talking to implementers

00:16:06,079 --> 00:16:10,560
there's just no way that they can do

00:16:07,920 --> 00:16:13,839
that without an api break

00:16:10,560 --> 00:16:16,959
even to just uh refreshing the

00:16:13,839 --> 00:16:18,720
um like support for a newer ecma regex

00:16:16,959 --> 00:16:20,880
you see my script drag x standard

00:16:18,720 --> 00:16:23,279
in there we can't do that without an abi

00:16:20,880 --> 00:16:25,839
break even additions we can't do

00:16:23,279 --> 00:16:27,920
so it's kind of frozen in time design

00:16:25,839 --> 00:16:30,720
right now

00:16:27,920 --> 00:16:32,720
um for for strings like the you know

00:16:30,720 --> 00:16:34,959
basic string we certainly add

00:16:32,720 --> 00:16:36,000
new new methods and such or new free

00:16:34,959 --> 00:16:38,880
functions and that's

00:16:36,000 --> 00:16:40,639
of course not a problem um but if we

00:16:38,880 --> 00:16:43,199
were to go back and try

00:16:40,639 --> 00:16:43,759
and legislate a certain encoding to be

00:16:43,199 --> 00:16:47,120
used

00:16:43,759 --> 00:16:49,360
by basic string that's not something

00:16:47,120 --> 00:16:51,680
that that we could do certainly not

00:16:49,360 --> 00:16:54,560
without an abi break and i'm sure not

00:16:51,680 --> 00:16:56,800
not really at all for compatibility

00:16:54,560 --> 00:17:00,639
reasons

00:16:56,800 --> 00:17:02,480
uh quarantine so uh i want to advise

00:17:00,639 --> 00:17:05,280
to swing specifically it's better to see

00:17:02,480 --> 00:17:07,760
his food string as

00:17:05,280 --> 00:17:09,039
a new terminated sequence of bytes or

00:17:07,760 --> 00:17:12,079
code units

00:17:09,039 --> 00:17:14,240
and it's really not designed to do text

00:17:12,079 --> 00:17:16,799
so if you have ascii it happened to work

00:17:14,240 --> 00:17:18,240
but it's better to use it

00:17:16,799 --> 00:17:19,919
when you use string you're basically

00:17:18,240 --> 00:17:23,360
comparing bytes rather than

00:17:19,919 --> 00:17:26,400
text and it's better to see it that way

00:17:23,360 --> 00:17:29,440
uh we we are certainly looking at adding

00:17:26,400 --> 00:17:31,360
a different type to handle uh text

00:17:29,440 --> 00:17:32,799
where you can actually compare character

00:17:31,360 --> 00:17:35,600
by character

00:17:32,799 --> 00:17:35,600
and so forth

00:17:36,640 --> 00:17:40,000
and i guess i'll add in that yeah abi

00:17:39,200 --> 00:17:43,120
for

00:17:40,000 --> 00:17:45,200
text things even comes up in in

00:17:43,120 --> 00:17:47,679
stranger places so we've had discussions

00:17:45,200 --> 00:17:50,720
about extended floating point types

00:17:47,679 --> 00:17:54,080
and how to format those

00:17:50,720 --> 00:17:58,160
and at least with i o streams formatting

00:17:54,080 --> 00:18:00,960
a 128-bit double

00:17:58,160 --> 00:18:02,000
runs into some api challenges along with

00:18:00,960 --> 00:18:05,120
other challenges too

00:18:02,000 --> 00:18:08,320
so uh yes abi

00:18:05,120 --> 00:18:12,000
and iostreams and regex

00:18:08,320 --> 00:18:15,520
all very very challenging

00:18:12,000 --> 00:18:17,679
uh okay so this one

00:18:15,520 --> 00:18:19,120
i'm not entirely sure if we're the best

00:18:17,679 --> 00:18:21,200
audience for this question but we're

00:18:19,120 --> 00:18:24,160
going to ask it anyway

00:18:21,200 --> 00:18:24,559
so what was the hardest decision due to

00:18:24,160 --> 00:18:28,160
the

00:18:24,559 --> 00:18:29,280
c plus 20 deadline so i'm going to start

00:18:28,160 --> 00:18:32,480
with this and say why

00:18:29,280 --> 00:18:36,400
it's not it's not entirely

00:18:32,480 --> 00:18:39,840
this group so uh lewg

00:18:36,400 --> 00:18:42,960
so uh in uh the c plus 24

00:18:39,840 --> 00:18:43,679
time frame forwarded lots and lots of

00:18:42,960 --> 00:18:48,480
papers

00:18:43,679 --> 00:18:51,919
to the specification group lwg

00:18:48,480 --> 00:18:53,840
and a lot of those papers didn't end up

00:18:51,919 --> 00:18:57,440
making it into the standard in time

00:18:53,840 --> 00:19:00,640
so lwg had a lot of the

00:18:57,440 --> 00:19:02,559
last minute c plus plus 20 decisions

00:19:00,640 --> 00:19:04,320
uh in terms of what goes in and what

00:19:02,559 --> 00:19:04,720
doesn't now that doesn't mean there

00:19:04,320 --> 00:19:06,960
weren't

00:19:04,720 --> 00:19:08,240
any there were still some decisions for

00:19:06,960 --> 00:19:10,400
lewg

00:19:08,240 --> 00:19:12,000
to decide okay what should we even

00:19:10,400 --> 00:19:15,120
attempt to make in

00:19:12,000 --> 00:19:17,120
uh so uh billy do you have any thoughts

00:19:15,120 --> 00:19:18,080
on this on the library evolution side of

00:19:17,120 --> 00:19:21,679
what were some of the

00:19:18,080 --> 00:19:23,280
difficult decisions to make um

00:19:21,679 --> 00:19:25,280
the hardest decisions were probably what

00:19:23,280 --> 00:19:27,120
not to forward

00:19:25,280 --> 00:19:28,480
we just talked about networking and

00:19:27,120 --> 00:19:29,600
certainly there were plenty of people

00:19:28,480 --> 00:19:30,559
that would have loved to have seen

00:19:29,600 --> 00:19:34,080
networking in c

00:19:30,559 --> 00:19:37,120
plus 20. um beyond that

00:19:34,080 --> 00:19:38,559
um yeah i probably agree with you that

00:19:37,120 --> 00:19:40,559
one of the reasons why we have lots of

00:19:38,559 --> 00:19:41,600
co-chairs now is because we're trying to

00:19:40,559 --> 00:19:43,760
address the problem

00:19:41,600 --> 00:19:46,480
of not being able to get as many papers

00:19:43,760 --> 00:19:46,480
through the process

00:19:48,799 --> 00:19:53,760
any comments from quarantine

00:19:51,850 --> 00:19:56,400
[Music]

00:19:53,760 --> 00:19:57,919
same thing as then we provided a lot of

00:19:56,400 --> 00:20:00,480
things that we really wanted to be

00:19:57,919 --> 00:20:02,080
in super space 20 and they were dropped

00:20:00,480 --> 00:20:02,400
on the floor because they didn't have

00:20:02,080 --> 00:20:06,320
time

00:20:02,400 --> 00:20:08,880
in the boarding group but this will

00:20:06,320 --> 00:20:10,960
this will probably be in 23 so there are

00:20:08,880 --> 00:20:13,360
like no clothes completely

00:20:10,960 --> 00:20:14,720
come back in first uh in the next

00:20:13,360 --> 00:20:16,960
television and fully

00:20:14,720 --> 00:20:18,080
uh one example of that that i was really

00:20:16,960 --> 00:20:21,039
looking forward to

00:20:18,080 --> 00:20:22,320
and miss the train was the spectres

00:20:21,039 --> 00:20:25,760
library

00:20:22,320 --> 00:20:29,200
um which was supposed to be in 20

00:20:25,760 --> 00:20:29,760
and uh will be in 23 or 3 we just

00:20:29,200 --> 00:20:34,880
finished

00:20:29,760 --> 00:20:38,000
boarding on that next week

00:20:34,880 --> 00:20:39,200
uh tom for me the

00:20:38,000 --> 00:20:40,799
maybe this is answering the question

00:20:39,200 --> 00:20:41,840
sort of backwards but for me the two

00:20:40,799 --> 00:20:44,880
hardest decisions

00:20:41,840 --> 00:20:48,000
were modules and co-routines because

00:20:44,880 --> 00:20:51,520
we did not have library adoption in

00:20:48,000 --> 00:20:53,600
them in c plus 20. and that made it

00:20:51,520 --> 00:20:55,520
difficult to really evaluate whether the

00:20:53,600 --> 00:20:57,200
design is what we need

00:20:55,520 --> 00:20:58,720
and what we're going to want going

00:20:57,200 --> 00:21:01,200
forward

00:20:58,720 --> 00:21:02,320
particularly with modules where we we

00:21:01,200 --> 00:21:05,840
really don't have much

00:21:02,320 --> 00:21:08,240
for deployment experience to draw on

00:21:05,840 --> 00:21:10,400
outside of a you know a few proprietary

00:21:08,240 --> 00:21:12,400
code bases

00:21:10,400 --> 00:21:14,640
you know for co-routines we did at least

00:21:12,400 --> 00:21:16,720
have very good reports

00:21:14,640 --> 00:21:17,679
from people using it that were able to

00:21:16,720 --> 00:21:20,880
provide their own

00:21:17,679 --> 00:21:23,679
library framework um on top of it and

00:21:20,880 --> 00:21:25,120
um were very successful with that so

00:21:23,679 --> 00:21:27,280
it'll be interesting to see

00:21:25,120 --> 00:21:29,039
you know what we do in c plus 23 time

00:21:27,280 --> 00:21:32,720
frame with those features in order to

00:21:29,039 --> 00:21:35,919
better enable library adoption of them

00:21:32,720 --> 00:21:39,840
and both of those things are in the plan

00:21:35,919 --> 00:21:44,159
uh the the paper is p0592

00:21:39,840 --> 00:21:46,799
that's the the plan for c plus 23.

00:21:44,159 --> 00:21:49,360
for getting standard library modules and

00:21:46,799 --> 00:21:52,320
co-routine library support so

00:21:49,360 --> 00:21:52,880
those are the things that this group is

00:21:52,320 --> 00:21:56,400
is

00:21:52,880 --> 00:21:58,720
working on possibly to the exclusion of

00:21:56,400 --> 00:22:03,919
other things

00:21:58,720 --> 00:22:08,480
uh so let's see uh the next question

00:22:03,919 --> 00:22:11,760
uh i like the proposed stood expected

00:22:08,480 --> 00:22:14,799
for certain use cases uh what are the

00:22:11,760 --> 00:22:17,440
odds on it of it making it in

00:22:14,799 --> 00:22:18,240
uh billy do you have comment uh thoughts

00:22:17,440 --> 00:22:20,480
on this

00:22:18,240 --> 00:22:21,440
so this came up in a table discussion

00:22:20,480 --> 00:22:24,640
earlier this week

00:22:21,440 --> 00:22:26,960
um we forward that for library

00:22:24,640 --> 00:22:30,159
fundamentals tsv3

00:22:26,960 --> 00:22:33,120
to lwg and

00:22:30,159 --> 00:22:34,159
right now the ts's are getting less

00:22:33,120 --> 00:22:37,039
attention

00:22:34,159 --> 00:22:37,039
at some level

00:22:37,440 --> 00:22:42,400
error handling um expected is just one

00:22:40,960 --> 00:22:46,080
of the things that we've looked at

00:22:42,400 --> 00:22:49,120
um i know bryce has some opinions on the

00:22:46,080 --> 00:22:50,000
technical specifications um you might

00:22:49,120 --> 00:22:52,840
want to ask this

00:22:50,000 --> 00:22:55,039
this afternoon if you want a different

00:22:52,840 --> 00:22:56,960
answer um right now it's

00:22:55,039 --> 00:22:58,640
probably just gonna uh go through the

00:22:56,960 --> 00:23:01,919
process and

00:22:58,640 --> 00:23:04,880
and uh the actual question was uh odds

00:23:01,919 --> 00:23:04,880
on it making it in

00:23:06,840 --> 00:23:10,720
um

00:23:08,400 --> 00:23:13,840
it's it's in the process i guess that's

00:23:10,720 --> 00:23:13,840
the best i can say right now

00:23:14,080 --> 00:23:18,080
uh so let's see i think i'm going to say

00:23:16,320 --> 00:23:20,400
that i think the

00:23:18,080 --> 00:23:22,080
odds of it making it into the

00:23:20,400 --> 00:23:26,240
international standard

00:23:22,080 --> 00:23:28,559
for c plus 23 are very low

00:23:26,240 --> 00:23:30,000
i think the odds of it making it into

00:23:28,559 --> 00:23:33,360
the international

00:23:30,000 --> 00:23:37,760
standard at some point

00:23:33,360 --> 00:23:40,480
most likely a 26 or so

00:23:37,760 --> 00:23:42,000
i'd say that's got about a 75 percent or

00:23:40,480 --> 00:23:43,200
so chance the main thing that i think

00:23:42,000 --> 00:23:46,000
would get it

00:23:43,200 --> 00:23:46,400
would make it not happen is if some

00:23:46,000 --> 00:23:50,000
other

00:23:46,400 --> 00:23:51,679
error handling mechanism comes along to

00:23:50,000 --> 00:23:55,679
where we decide we no longer want

00:23:51,679 --> 00:23:57,760
expected uh but yes the the topic of

00:23:55,679 --> 00:24:01,840
error handling is

00:23:57,760 --> 00:24:05,520
very deep and uh and contentious so

00:24:01,840 --> 00:24:06,880
uh okay i i didn't book quarantine last

00:24:05,520 --> 00:24:08,880
time because there's one

00:24:06,880 --> 00:24:10,159
there's a question in the queue just for

00:24:08,880 --> 00:24:12,240
you

00:24:10,159 --> 00:24:15,279
uh can you talk about the day the

00:24:12,240 --> 00:24:15,279
standard library

00:24:17,039 --> 00:24:24,480
so that died to a blog post i thought

00:24:21,039 --> 00:24:27,840
uh about abi

00:24:24,480 --> 00:24:29,679
after the prime meeting um

00:24:27,840 --> 00:24:32,880
and and to be fair right the standard

00:24:29,679 --> 00:24:36,320
library is not dead yet

00:24:32,880 --> 00:24:38,799
but ibi puts a lot of constraint

00:24:36,320 --> 00:24:39,840
on what we can add to the sound library

00:24:38,799 --> 00:24:42,799
and when we can

00:24:39,840 --> 00:24:44,480
transfer this on the library and that

00:24:42,799 --> 00:24:46,799
means that the standard library

00:24:44,480 --> 00:24:49,200
is leaving performance on the table for

00:24:46,799 --> 00:24:51,039
for the sake of fbi or is not fixing bug

00:24:49,200 --> 00:24:53,679
for the sake of fbi

00:24:51,039 --> 00:24:55,520
and the long-term effect of that is that

00:24:53,679 --> 00:24:56,960
the standard library is not competitive

00:24:55,520 --> 00:25:00,640
with other library

00:24:56,960 --> 00:25:03,840
and there's an analogy that uh titus

00:25:00,640 --> 00:25:05,919
uh winter um had at some point which is

00:25:03,840 --> 00:25:07,679
then the sun already basically became

00:25:05,919 --> 00:25:10,559
like mcdonald's right it's

00:25:07,679 --> 00:25:12,559
it's it's there it's everywhere you can

00:25:10,559 --> 00:25:14,480
use it you know how it is but it doesn't

00:25:12,559 --> 00:25:19,279
taste very good and

00:25:14,480 --> 00:25:21,200
ebi committing fabian stability poses

00:25:19,279 --> 00:25:23,440
the risk of the standard library

00:25:21,200 --> 00:25:24,400
becoming a bit like that something that

00:25:23,440 --> 00:25:27,840
is

00:25:24,400 --> 00:25:29,360
universally available but it doesn't

00:25:27,840 --> 00:25:30,960
necessarily fit you on it because it's

00:25:29,360 --> 00:25:33,200
not performance it's not uh

00:25:30,960 --> 00:25:34,880
it's not modern enough it doesn't have

00:25:33,200 --> 00:25:36,799
enough feature because

00:25:34,880 --> 00:25:39,440
we show you a way formatting feature

00:25:36,799 --> 00:25:42,000
because of api concern

00:25:39,440 --> 00:25:44,640
so that's basically what that title was

00:25:42,000 --> 00:25:44,640
referring to

00:25:45,600 --> 00:25:50,480
so let's see uh on reddit a while back i

00:25:49,679 --> 00:25:52,799
had a

00:25:50,480 --> 00:25:54,880
kind of counterpoint to a lot of the api

00:25:52,799 --> 00:25:58,240
discussions and so

00:25:54,880 --> 00:25:59,679
uh i don't disagree with a lot of what

00:25:58,240 --> 00:26:02,799
quarantine just said

00:25:59,679 --> 00:26:05,840
uh the the constraint of abi is real and

00:26:02,799 --> 00:26:07,679
uh it makes for challenging decisions uh

00:26:05,840 --> 00:26:09,200
and i think everyone in the committee

00:26:07,679 --> 00:26:12,559
understands that

00:26:09,200 --> 00:26:16,400
it makes things hard uh

00:26:12,559 --> 00:26:18,720
so uh my opinion is the way that

00:26:16,400 --> 00:26:19,440
the the the things should go forward is

00:26:18,720 --> 00:26:21,279
that

00:26:19,440 --> 00:26:23,679
we should do more things along the lines

00:26:21,279 --> 00:26:24,480
of uh auto putter to unique footer to

00:26:23,679 --> 00:26:26,880
where

00:26:24,480 --> 00:26:29,039
yes we make a new thing that looks

00:26:26,880 --> 00:26:32,240
almost exactly like the old thing

00:26:29,039 --> 00:26:33,760
but it's just a little bit better uh but

00:26:32,240 --> 00:26:35,600
right now we don't necessarily have

00:26:33,760 --> 00:26:38,960
consensus for that and it's

00:26:35,600 --> 00:26:41,919
a lot of work to go and say uh well

00:26:38,960 --> 00:26:42,960
making the first unordered map was

00:26:41,919 --> 00:26:45,520
expensive enough

00:26:42,960 --> 00:26:47,039
making a second unordered map it's it's

00:26:45,520 --> 00:26:49,919
a lot of time to go through

00:26:47,039 --> 00:26:51,679
and re-specify that stuff i think that's

00:26:49,919 --> 00:26:53,360
the right way to do things but it is a

00:26:51,679 --> 00:26:57,200
lot of work and

00:26:53,360 --> 00:26:59,200
none of us have uh have a full decision

00:26:57,200 --> 00:27:01,120
on the committee it all has to get

00:26:59,200 --> 00:27:03,039
consensus uh

00:27:01,120 --> 00:27:04,799
and someone would have to be the person

00:27:03,039 --> 00:27:08,400
to write the paper to make

00:27:04,799 --> 00:27:09,279
unordered map to uh to go through all of

00:27:08,400 --> 00:27:12,320
this

00:27:09,279 --> 00:27:13,600
and we haven't had a whole lot of new

00:27:12,320 --> 00:27:16,159
containers

00:27:13,600 --> 00:27:17,600
make it all the way through the uh the

00:27:16,159 --> 00:27:20,640
standard library

00:27:17,600 --> 00:27:21,200
through the process we have a flat map

00:27:20,640 --> 00:27:25,279
and flat

00:27:21,200 --> 00:27:28,399
sets which are in the queue

00:27:25,279 --> 00:27:31,279
that will hit whatever standard

00:27:28,399 --> 00:27:33,360
uh that the specification group can get

00:27:31,279 --> 00:27:36,880
them into

00:27:33,360 --> 00:27:40,000
but as far as like hashing that one's

00:27:36,880 --> 00:27:41,440
that that's a lot more difficult because

00:27:40,000 --> 00:27:43,039
there's still active research going on

00:27:41,440 --> 00:27:46,159
there and then there's things like

00:27:43,039 --> 00:27:48,720
regular expressions and io streams and

00:27:46,159 --> 00:27:51,520
all of these other things that often

00:27:48,720 --> 00:27:52,159
you know tie our hands with regards to

00:27:51,520 --> 00:27:55,120
abi

00:27:52,159 --> 00:27:55,919
and so it is tough i think there's a way

00:27:55,120 --> 00:27:59,840
forward it's

00:27:55,919 --> 00:28:01,840
not ideal but yeah you've now heard a

00:27:59,840 --> 00:28:03,760
a few different opinions on this and if

00:28:01,840 --> 00:28:05,279
you ask a bunch of other committee

00:28:03,760 --> 00:28:06,080
members they'll probably have other

00:28:05,279 --> 00:28:08,399
opinions on

00:28:06,080 --> 00:28:10,240
on this too but yes but there's a way

00:28:08,399 --> 00:28:11,679
forward and it's not ideal and that way

00:28:10,240 --> 00:28:14,080
forward is to pond current and into

00:28:11,679 --> 00:28:17,840
writing a paper on it

00:28:14,080 --> 00:28:20,000
i've had lots of success with that yeah

00:28:17,840 --> 00:28:21,440
what ben said in terms of having like

00:28:20,000 --> 00:28:22,960
another map too

00:28:21,440 --> 00:28:24,880
uh the issue with that if you have an

00:28:22,960 --> 00:28:26,320
old interface like another map and you

00:28:24,880 --> 00:28:28,480
have another map too then you need to

00:28:26,320 --> 00:28:30,559
convert your type and that is very

00:28:28,480 --> 00:28:32,240
complicated but i think there's like a

00:28:30,559 --> 00:28:35,919
glimmer of up there which is

00:28:32,240 --> 00:28:37,840
a concept because instead of having a

00:28:35,919 --> 00:28:39,279
concrete type in your interface you can

00:28:37,840 --> 00:28:42,080
just have

00:28:39,279 --> 00:28:43,840
a concept-driven interface that are

00:28:42,080 --> 00:28:46,640
compatible with

00:28:43,840 --> 00:28:48,159
anything that look like a map and that

00:28:46,640 --> 00:28:51,039
serve a lot of issue

00:28:48,159 --> 00:28:53,039
in how we can have like new type to

00:28:51,039 --> 00:28:59,279
replace these old things that we

00:28:53,039 --> 00:29:02,480
would like to break

00:28:59,279 --> 00:29:06,960
uh okay so uh next up

00:29:02,480 --> 00:29:09,520
is uh i'm gonna start

00:29:06,960 --> 00:29:12,080
this with billy but i think people want

00:29:09,520 --> 00:29:14,240
to hear my opinion on this too

00:29:12,080 --> 00:29:15,679
so i just wrote again lightweight

00:29:14,240 --> 00:29:17,440
elementary data structures for an

00:29:15,679 --> 00:29:19,279
embedded project what are the prospects

00:29:17,440 --> 00:29:20,320
for someday having embedded friendly

00:29:19,279 --> 00:29:26,000
alternatives

00:29:20,320 --> 00:29:29,120
to the stl

00:29:26,000 --> 00:29:32,640
go for it billy um

00:29:29,120 --> 00:29:35,520
a paper would be the starting point um

00:29:32,640 --> 00:29:36,880
if if it's something that's uh

00:29:35,520 --> 00:29:41,360
drastically different

00:29:36,880 --> 00:29:44,480
than what we have um

00:29:41,360 --> 00:29:46,559
embedded is a pretty big term um

00:29:44,480 --> 00:29:48,720
at some level where i work would be

00:29:46,559 --> 00:29:50,320
embedded uh but we have an almost

00:29:48,720 --> 00:29:53,760
complete execution environment

00:29:50,320 --> 00:29:55,679
so um ben

00:29:53,760 --> 00:29:58,320
with his freestanding work and other

00:29:55,679 --> 00:30:02,000
things is is more towards the

00:29:58,320 --> 00:30:03,870
no operating system uh type of embedded

00:30:02,000 --> 00:30:06,159
um yeah

00:30:03,870 --> 00:30:09,679
[Music]

00:30:06,159 --> 00:30:10,960
it's something that uh obviously we have

00:30:09,679 --> 00:30:14,880
a lot of people that

00:30:10,960 --> 00:30:18,399
uh desire to be able to use and um

00:30:14,880 --> 00:30:20,960
i i don't see us doing anything

00:30:18,399 --> 00:30:22,559
just because we have nothing else to do

00:30:20,960 --> 00:30:24,960
because we certainly have plenty to do

00:30:22,559 --> 00:30:28,320
right now

00:30:24,960 --> 00:30:32,000
uh so yeah the data structures are

00:30:28,320 --> 00:30:34,840
a a difficult thing because of

00:30:32,000 --> 00:30:37,200
heap allocations and because of error

00:30:34,840 --> 00:30:40,960
handling uh

00:30:37,200 --> 00:30:43,440
because in in an awful lot of embedded

00:30:40,960 --> 00:30:44,559
i i try to use the word microcontroller

00:30:43,440 --> 00:30:46,799
to you know

00:30:44,559 --> 00:30:48,480
scope it down more so in like

00:30:46,799 --> 00:30:50,880
microcontroller use cases you often

00:30:48,480 --> 00:30:53,200
don't have a heap and

00:30:50,880 --> 00:30:53,919
exceptions normally are too expensive to

00:30:53,200 --> 00:30:55,600
use so

00:30:53,919 --> 00:30:57,039
figuring out how to get the air handling

00:30:55,600 --> 00:30:59,360
on those containers is is

00:30:57,039 --> 00:31:00,960
is difficult you could just say okay

00:30:59,360 --> 00:31:01,760
well we'll terminate but even that's not

00:31:00,960 --> 00:31:05,760
an awesome

00:31:01,760 --> 00:31:08,399
option uh the stuff that i've got in

00:31:05,760 --> 00:31:09,840
uh my freestanding paper so far just has

00:31:08,399 --> 00:31:13,360
array

00:31:09,840 --> 00:31:16,000
uh there is a data structure and uh

00:31:13,360 --> 00:31:17,840
queued up for library fundamentals uh i

00:31:16,000 --> 00:31:19,519
think it's called like static vector or

00:31:17,840 --> 00:31:20,480
fixed capacity vector i don't remember

00:31:19,519 --> 00:31:23,519
exactly which name

00:31:20,480 --> 00:31:26,799
it was landed on uh

00:31:23,519 --> 00:31:27,919
that has some potential uh but that one

00:31:26,799 --> 00:31:30,559
also has

00:31:27,919 --> 00:31:31,919
error handling concerns that i'm i'm not

00:31:30,559 --> 00:31:35,200
thrilled with uh if you

00:31:31,919 --> 00:31:36,240
keep on pushing past the uh past your

00:31:35,200 --> 00:31:38,080
capacity

00:31:36,240 --> 00:31:39,360
uh you just get undefined behavior right

00:31:38,080 --> 00:31:40,080
now so i think that's one of the

00:31:39,360 --> 00:31:42,080
questions

00:31:40,080 --> 00:31:43,120
that we want to have answered for that

00:31:42,080 --> 00:31:46,399
container

00:31:43,120 --> 00:31:50,080
in the ts is

00:31:46,399 --> 00:31:53,760
is that behavior acceptable or not uh

00:31:50,080 --> 00:31:54,720
but there's the extra challenge to go

00:31:53,760 --> 00:31:56,640
with that is if we say

00:31:54,720 --> 00:31:58,320
okay undefined behavior there isn't

00:31:56,640 --> 00:31:59,919
acceptable well

00:31:58,320 --> 00:32:01,360
what error handling mechanisms do we

00:31:59,919 --> 00:32:04,399
have that would be acceptable

00:32:01,360 --> 00:32:05,840
and we don't have great answers for that

00:32:04,399 --> 00:32:09,120
question either

00:32:05,840 --> 00:32:12,159
uh so i think that someday

00:32:09,120 --> 00:32:15,679
we will have something uh

00:32:12,159 --> 00:32:19,360
right now i am uh my my hope for that

00:32:15,679 --> 00:32:22,240
is that uh herbs

00:32:19,360 --> 00:32:23,279
uh herb shutters static exceptions make

00:32:22,240 --> 00:32:26,960
it in

00:32:23,279 --> 00:32:29,360
and that we'd be able to have uh

00:32:26,960 --> 00:32:31,519
based off of what allocator you're using

00:32:29,360 --> 00:32:32,559
uh a different error handling model for

00:32:31,519 --> 00:32:34,320
the container

00:32:32,559 --> 00:32:37,039
so that you could say okay i'm using a

00:32:34,320 --> 00:32:39,360
static exceptions based allocator

00:32:37,039 --> 00:32:40,080
therefore vector is using static

00:32:39,360 --> 00:32:42,799
exceptions

00:32:40,080 --> 00:32:43,760
instead of uh today's c plus plus

00:32:42,799 --> 00:32:45,200
exceptions

00:32:43,760 --> 00:32:47,200
and then you could pass you know an

00:32:45,200 --> 00:32:51,039
embedded friendly allocator to

00:32:47,200 --> 00:32:52,960
uh stood vector and use that uh

00:32:51,039 --> 00:32:54,399
that's my hope but there's no paper for

00:32:52,960 --> 00:32:56,240
that and it has a whole bunch of

00:32:54,399 --> 00:32:57,200
dependencies on exist on other moving

00:32:56,240 --> 00:33:01,120
parts

00:32:57,200 --> 00:33:04,799
so the the bad news there is

00:33:01,120 --> 00:33:05,120
it's probably going to be 29 26 if

00:33:04,799 --> 00:33:08,320
you're

00:33:05,120 --> 00:33:12,480
if we're really lucky to have a

00:33:08,320 --> 00:33:14,240
dynamic array type uh

00:33:12,480 --> 00:33:15,760
maybe someone could come along with an

00:33:14,240 --> 00:33:17,760
intrusive list

00:33:15,760 --> 00:33:19,760
or an intrusive map or something like

00:33:17,760 --> 00:33:21,519
that that would be embedded friendly

00:33:19,760 --> 00:33:22,880
uh but i don't know of any work going on

00:33:21,519 --> 00:33:25,679
right now so if someone does have to

00:33:22,880 --> 00:33:27,200
write a paper

00:33:25,679 --> 00:33:29,279
perhaps some other work going on for

00:33:27,200 --> 00:33:32,480
accounts expert containers

00:33:29,279 --> 00:33:34,000
yes so const expert containers

00:33:32,480 --> 00:33:37,600
that is something to where at least to

00:33:34,000 --> 00:33:41,120
compile time we could do something

00:33:37,600 --> 00:33:43,519
and i do have plans there but i need

00:33:41,120 --> 00:33:45,360
an implementation that has that ready so

00:33:43,519 --> 00:33:48,399
i can prototype it

00:33:45,360 --> 00:33:49,519
uh before i say but before i make a

00:33:48,399 --> 00:33:51,120
proposal to say

00:33:49,519 --> 00:33:52,640
all the context for stuff is

00:33:51,120 --> 00:33:55,919
freestanding

00:33:52,640 --> 00:33:59,039
so long as it's done at compile time

00:33:55,919 --> 00:34:00,799
uh i i i need i need

00:33:59,039 --> 00:34:03,919
some amount of implementation experience

00:34:00,799 --> 00:34:03,919
before i write that paper

00:34:04,320 --> 00:34:10,240
okay uh next question

00:34:08,399 --> 00:34:13,119
and we've got a lot of people in here

00:34:10,240 --> 00:34:16,800
that were involved in the tooling group

00:34:13,119 --> 00:34:17,760
so uh any chance of having a standard

00:34:16,800 --> 00:34:20,800
tool

00:34:17,760 --> 00:34:22,639
such as recent languages

00:34:20,800 --> 00:34:24,159
or any chance for having a standard tool

00:34:22,639 --> 00:34:25,040
for fetching and working with external

00:34:24,159 --> 00:34:28,399
libraries

00:34:25,040 --> 00:34:31,440
so colloquially a package manager

00:34:28,399 --> 00:34:34,639
uh quarantine take a shot at this one

00:34:31,440 --> 00:34:37,200
okay um i think there is some

00:34:34,639 --> 00:34:38,320
contradiction in in the super special

00:34:37,200 --> 00:34:41,119
community

00:34:38,320 --> 00:34:43,200
where we really like um to be able to

00:34:41,119 --> 00:34:45,599
tweak our library with a lot of macro

00:34:43,200 --> 00:34:49,280
and have lots of different configuration

00:34:45,599 --> 00:34:52,480
and we might be using different library

00:34:49,280 --> 00:34:54,720
and different operating system trying to

00:34:52,480 --> 00:34:57,599
use it on our library and if not

00:34:54,720 --> 00:34:59,839
fall back to something else and we like

00:34:57,599 --> 00:35:01,280
to open other people name faces and

00:34:59,839 --> 00:35:03,599
prefer sensor first

00:35:01,280 --> 00:35:04,640
and all of this freedom that we like to

00:35:03,599 --> 00:35:06,720
have

00:35:04,640 --> 00:35:08,800
make it really difficult to actually

00:35:06,720 --> 00:35:11,200
have an ecosystem

00:35:08,800 --> 00:35:12,560
and i think we have to choose between do

00:35:11,200 --> 00:35:15,680
we want

00:35:12,560 --> 00:35:17,040
that unlimited freedom of be able to do

00:35:15,680 --> 00:35:21,599
whatever we want and

00:35:17,040 --> 00:35:22,800
um the ability to actually be part of an

00:35:21,599 --> 00:35:26,320
ecosystem these are

00:35:22,800 --> 00:35:29,599
a bit contradictory goals in my opinion

00:35:26,320 --> 00:35:30,320
so i think that the fundamental reason

00:35:29,599 --> 00:35:32,400
why

00:35:30,320 --> 00:35:34,800
a tool is difficult to make for super

00:35:32,400 --> 00:35:34,800
stress

00:35:38,880 --> 00:35:43,520
so let's see uh i'll pitch in my

00:35:41,760 --> 00:35:47,200
commentary there

00:35:43,520 --> 00:35:48,640
so the c

00:35:47,200 --> 00:35:50,880
plus committee doesn't produce

00:35:48,640 --> 00:35:54,960
implementations we don't produce

00:35:50,880 --> 00:35:58,000
tools we produce standards

00:35:54,960 --> 00:36:00,079
so in theory we could standardize

00:35:58,000 --> 00:36:02,000
something uh that says this is how a

00:36:00,079 --> 00:36:03,760
package manager should work

00:36:02,000 --> 00:36:05,119
uh but that doesn't mean that anyone's

00:36:03,760 --> 00:36:07,440
going to come and implement them

00:36:05,119 --> 00:36:08,560
uh typically we kind of go the other way

00:36:07,440 --> 00:36:10,640
around to where we have

00:36:08,560 --> 00:36:12,320
or we would like to go the other way

00:36:10,640 --> 00:36:13,839
around and say here's some existing

00:36:12,320 --> 00:36:15,760
practice

00:36:13,839 --> 00:36:18,720
let's make sure that multiple vendors

00:36:15,760 --> 00:36:22,079
can you know participate in this thing

00:36:18,720 --> 00:36:26,240
so to that end i would say the best shot

00:36:22,079 --> 00:36:28,160
for there to be a standard ecosystem

00:36:26,240 --> 00:36:30,320
is to support the ones that we've

00:36:28,160 --> 00:36:33,920
already got

00:36:30,320 --> 00:36:36,160
so figure out how to make

00:36:33,920 --> 00:36:37,760
the linux package managers that you're

00:36:36,160 --> 00:36:39,839
dealing with

00:36:37,760 --> 00:36:41,839
better suit your needs figure out how to

00:36:39,839 --> 00:36:44,480
make vc package and conan

00:36:41,839 --> 00:36:45,920
better suit your needs and then if you

00:36:44,480 --> 00:36:47,599
can figure out how to get those to

00:36:45,920 --> 00:36:49,040
interoperate

00:36:47,599 --> 00:36:52,400
then that's something that we can do

00:36:49,040 --> 00:36:52,400
more for standardizing

00:36:52,480 --> 00:36:57,359
now this is something that it's it's a

00:36:55,359 --> 00:36:59,839
high cost to make all of this work well

00:36:57,359 --> 00:37:01,440
but there's also a very high benefit

00:36:59,839 --> 00:37:03,119
and a lot of the people in the c plus

00:37:01,440 --> 00:37:05,599
plus community really want there to be a

00:37:03,119 --> 00:37:07,680
package manager but

00:37:05,599 --> 00:37:09,440
it's hard for like all the reasons that

00:37:07,680 --> 00:37:11,520
quarantine said and then just

00:37:09,440 --> 00:37:12,720
the infrastructure costs and the the

00:37:11,520 --> 00:37:16,400
network effects

00:37:12,720 --> 00:37:17,280
uh that go on uh if a new package

00:37:16,400 --> 00:37:20,560
manager showed up

00:37:17,280 --> 00:37:22,640
tomorrow then my employer

00:37:20,560 --> 00:37:24,400
probably wouldn't be able to use it for

00:37:22,640 --> 00:37:26,160
quite some time

00:37:24,400 --> 00:37:28,240
because we've got our own solution right

00:37:26,160 --> 00:37:31,280
now and i suspect a lot of other

00:37:28,240 --> 00:37:34,320
companies are in that same situation

00:37:31,280 --> 00:37:36,720
uh tom

00:37:34,320 --> 00:37:38,720
yeah i would add to that i don't think

00:37:36,720 --> 00:37:40,400
i'm not particularly in favor of a

00:37:38,720 --> 00:37:41,280
single package manager

00:37:40,400 --> 00:37:43,920
i'm getting out there i think

00:37:41,280 --> 00:37:46,000
competition is good um and i think there

00:37:43,920 --> 00:37:47,280
there is a lot of experimentation going

00:37:46,000 --> 00:37:49,520
on out there

00:37:47,280 --> 00:37:51,040
um today and we're getting some field

00:37:49,520 --> 00:37:52,079
experience there i think if we were to

00:37:51,040 --> 00:37:54,480
standardize

00:37:52,079 --> 00:37:56,720
something right now it likely would not

00:37:54,480 --> 00:37:59,520
be what we would end up wanting

00:37:56,720 --> 00:38:00,560
for the long term and doesn't so

00:37:59,520 --> 00:38:04,400
therefore it doesn't really

00:38:00,560 --> 00:38:06,640
solve the problem um i

00:38:04,400 --> 00:38:07,839
you know i i'm pretty mostly pretty

00:38:06,640 --> 00:38:09,280
happy with the way

00:38:07,839 --> 00:38:11,680
linux systems are doing package

00:38:09,280 --> 00:38:12,160
management uh these days and if we can

00:38:11,680 --> 00:38:15,520
stream

00:38:12,160 --> 00:38:17,599
more into that kind of environment

00:38:15,520 --> 00:38:19,359
and likewise you know vc package a lot

00:38:17,599 --> 00:38:22,079
of what what ben just said

00:38:19,359 --> 00:38:23,760
um i think is is the right way to go um

00:38:22,079 --> 00:38:26,560
there probably are

00:38:23,760 --> 00:38:27,440
some some ways that we can encourage

00:38:26,560 --> 00:38:29,440
design of

00:38:27,440 --> 00:38:30,960
our libraries to make them more

00:38:29,440 --> 00:38:32,320
packageable

00:38:30,960 --> 00:38:34,400
um going along with things like

00:38:32,320 --> 00:38:35,280
carrington said you know avoiding macros

00:38:34,400 --> 00:38:36,880
or

00:38:35,280 --> 00:38:38,640
coming up with better ways to manage the

00:38:36,880 --> 00:38:41,839
configuration

00:38:38,640 --> 00:38:43,839
but i know i don't have any specific

00:38:41,839 --> 00:38:47,839
ideas on how what we might improve in

00:38:43,839 --> 00:38:47,839
that regard

00:38:48,160 --> 00:38:55,520
okay our next question

00:38:51,680 --> 00:38:57,680
is more about uh abi but this one's a

00:38:55,520 --> 00:38:59,680
bit more concrete

00:38:57,680 --> 00:39:00,800
was there any significant abi breakage

00:38:59,680 --> 00:39:05,200
recently

00:39:00,800 --> 00:39:08,320
which is not string or list uh

00:39:05,200 --> 00:39:11,839
any thoughts on on this one

00:39:08,320 --> 00:39:15,119
i can think of one that wasn't

00:39:11,839 --> 00:39:18,640
big but uh some of the

00:39:15,119 --> 00:39:21,280
aligned alec and malek's stuff

00:39:18,640 --> 00:39:22,560
there was a there have been some notes

00:39:21,280 --> 00:39:25,599
on

00:39:22,560 --> 00:39:29,520
some of the visual studio

00:39:25,599 --> 00:39:32,400
uh release notes saying that

00:39:29,520 --> 00:39:33,200
getting those to have the the right

00:39:32,400 --> 00:39:35,920
properties

00:39:33,200 --> 00:39:37,119
would be an abi break in some cases does

00:39:35,920 --> 00:39:38,800
anyone have any

00:39:37,119 --> 00:39:40,839
thoughts on other things that possibly

00:39:38,800 --> 00:39:44,079
broke abi since

00:39:40,839 --> 00:39:47,040
11 there are pretty few but

00:39:44,079 --> 00:39:48,000
i think um people are using these two

00:39:47,040 --> 00:39:52,240
list

00:39:48,000 --> 00:39:53,760
abi breaks that might not have been um

00:39:52,240 --> 00:39:55,359
and all as well as it could have been at

00:39:53,760 --> 00:39:59,040
the time

00:39:55,359 --> 00:40:01,599
to make sure that no further beer breaks

00:39:59,040 --> 00:40:03,359
are made it serve as a bit of cautionary

00:40:01,599 --> 00:40:03,920
tale that maybe we shouldn't break abi

00:40:03,359 --> 00:40:06,960
because

00:40:03,920 --> 00:40:08,960
um as you said people are still

00:40:06,960 --> 00:40:10,079
dealing with good swings so we got a bit

00:40:08,960 --> 00:40:13,760
scared by

00:40:10,079 --> 00:40:16,640
abl break so that's why um

00:40:13,760 --> 00:40:17,920
aba has mostly remained stable since

00:40:16,640 --> 00:40:22,079
that but there have been a few

00:40:17,920 --> 00:40:23,920
i think nothing major

00:40:22,079 --> 00:40:25,920
uh and yeah i guess i'm thinking there

00:40:23,920 --> 00:40:28,400
are some

00:40:25,920 --> 00:40:28,960
technical abi breaks that have happened

00:40:28,400 --> 00:40:31,599
that

00:40:28,960 --> 00:40:33,440
haven't been an abi break in practice so

00:40:31,599 --> 00:40:36,800
i think like a

00:40:33,440 --> 00:40:37,440
push back uh on vector or maybe was in

00:40:36,800 --> 00:40:39,119
place back

00:40:37,440 --> 00:40:41,359
it now returned to reference to the

00:40:39,119 --> 00:40:44,640
thing in place that's technically an

00:40:41,359 --> 00:40:47,359
api break but implementations

00:40:44,640 --> 00:40:48,000
have ways of making that not actually be

00:40:47,359 --> 00:40:51,119
an

00:40:48,000 --> 00:40:53,760
abi break in practice uh

00:40:51,119 --> 00:40:54,319
by keeping the old implementation around

00:40:53,760 --> 00:40:57,440
uh in

00:40:54,319 --> 00:40:58,400
hidden in interesting ways uh so there's

00:40:57,440 --> 00:41:00,400
been little things

00:40:58,400 --> 00:41:01,440
but i think since eleven there hasn't

00:41:00,400 --> 00:41:05,359
been anything

00:41:01,440 --> 00:41:07,599
big uh

00:41:05,359 --> 00:41:08,800
we do keep it in mind though so i mean

00:41:07,599 --> 00:41:10,240
one of the discussion

00:41:08,800 --> 00:41:12,240
part of the discussions of standard

00:41:10,240 --> 00:41:14,400
library modules in the future is

00:41:12,240 --> 00:41:16,319
making sure that we can evolve the

00:41:14,400 --> 00:41:18,720
standard library modules without causing

00:41:16,319 --> 00:41:18,720
api

00:41:18,839 --> 00:41:22,640
problems think one of the

00:41:20,800 --> 00:41:25,520
abi breaks that did come in at c plus

00:41:22,640 --> 00:41:27,440
plus 20 uh was for stood file system and

00:41:25,520 --> 00:41:30,400
the the uh string

00:41:27,440 --> 00:41:32,560
um member function that it now returns a

00:41:30,400 --> 00:41:34,400
uh string rather than a string

00:41:32,560 --> 00:41:35,760
um i think though although the library

00:41:34,400 --> 00:41:37,920
implementers were able to

00:41:35,760 --> 00:41:39,680
avoid an abi break on that because they

00:41:37,920 --> 00:41:43,599
they knew about it and

00:41:39,680 --> 00:41:44,720
um sounded like somebody stopped maybe

00:41:43,599 --> 00:41:46,240
so

00:41:44,720 --> 00:41:49,839
it sounds like somebody's dog maybe saw

00:41:46,240 --> 00:41:49,839
a rust programmer go by

00:41:52,079 --> 00:41:56,079
let's see uh we've got a lighthearted

00:41:54,400 --> 00:41:57,599
one here

00:41:56,079 --> 00:41:59,680
it's quite common to see members of the

00:41:57,599 --> 00:42:00,079
committee with a hawaiian shirt corinton

00:41:59,680 --> 00:42:02,400
now

00:42:00,079 --> 00:42:04,800
herb on all of his talks uh what's up

00:42:02,400 --> 00:42:04,800
with that

00:42:06,720 --> 00:42:09,920
i'll just say that i was gonna use a

00:42:08,560 --> 00:42:14,400
hawaiian shirt today but

00:42:09,920 --> 00:42:17,200
chose the cppcon one instead um

00:42:14,400 --> 00:42:17,520
you know we get to go to hawaii and and

00:42:17,200 --> 00:42:20,720
sit

00:42:17,520 --> 00:42:23,040
in rooms and not see trees and surf

00:42:20,720 --> 00:42:24,079
and and talk about c plus plus for a

00:42:23,040 --> 00:42:25,680
week and

00:42:24,079 --> 00:42:27,440
and for some reason we all come back

00:42:25,680 --> 00:42:30,880
with t-shirts and

00:42:27,440 --> 00:42:33,440
um yeah so uh that's probably where

00:42:30,880 --> 00:42:35,200
you're seeing it

00:42:33,440 --> 00:42:38,480
maybe the new international symbol for c

00:42:35,200 --> 00:42:38,480
plus plus should be the pineapple

00:42:39,920 --> 00:42:44,000
uh and there is a i think the tradition

00:42:43,599 --> 00:42:46,160
is

00:42:44,000 --> 00:42:47,760
is is falling off at this point but

00:42:46,160 --> 00:42:49,280
there at least used to be the tradition

00:42:47,760 --> 00:42:51,920
of a ironic t-shirt

00:42:49,280 --> 00:42:54,000
wednesday or thursday or some someday of

00:42:51,920 --> 00:42:56,640
the face-to-face meetings to where

00:42:54,000 --> 00:42:57,119
people would often uh wear shirts from

00:42:56,640 --> 00:43:00,560
uh

00:42:57,119 --> 00:43:03,200
the the their competitors so you would

00:43:00,560 --> 00:43:04,400
uh you would see one chip maker wearing

00:43:03,200 --> 00:43:06,319
a t-shirt

00:43:04,400 --> 00:43:07,680
another chip maker and you know one

00:43:06,319 --> 00:43:09,280
compiler

00:43:07,680 --> 00:43:11,200
person wearing a t-shirt of a different

00:43:09,280 --> 00:43:13,839
compiler person being careful not to

00:43:11,200 --> 00:43:13,839
name names here

00:43:15,520 --> 00:43:19,599
let's see so

00:43:20,160 --> 00:43:24,400
if the posix standard can specify the

00:43:22,720 --> 00:43:25,200
basic command line interface for

00:43:24,400 --> 00:43:28,240
compilers

00:43:25,200 --> 00:43:31,200
why can't the committee uh anyone want

00:43:28,240 --> 00:43:31,200
to take a shot at this one

00:43:33,520 --> 00:43:41,040
sure i i can i can so

00:43:37,920 --> 00:43:45,200
we could specify it if we want to

00:43:41,040 --> 00:43:46,800
we to to some degree we get to

00:43:45,200 --> 00:43:48,319
we get to figure out the scope of our

00:43:46,800 --> 00:43:50,800
own efforts

00:43:48,319 --> 00:43:51,440
uh we decide what's in scope or not so

00:43:50,800 --> 00:43:53,599
it's

00:43:51,440 --> 00:43:55,119
largely a matter of having papers and

00:43:53,599 --> 00:43:58,720
having consensus

00:43:55,119 --> 00:44:00,960
now there's still the challenge of

00:43:58,720 --> 00:44:02,720
do we want to pick a winner and we try

00:44:00,960 --> 00:44:05,680
not to do that to say it's like

00:44:02,720 --> 00:44:07,680
okay all the gcc and clang style options

00:44:05,680 --> 00:44:10,560
we're gonna go with those and well

00:44:07,680 --> 00:44:11,440
msvc you're just gonna have to do what

00:44:10,560 --> 00:44:15,920
they did

00:44:11,440 --> 00:44:17,760
we try not to pick winners like that uh

00:44:15,920 --> 00:44:19,839
so that's gonna be one of the challenges

00:44:17,760 --> 00:44:20,560
now there has been a paper that tried to

00:44:19,839 --> 00:44:24,480
kind of

00:44:20,560 --> 00:44:28,160
back door standardized some of these uh

00:44:24,480 --> 00:44:28,160
command line options before

00:44:28,319 --> 00:44:35,440
rene rivera had a paper on having a

00:44:32,319 --> 00:44:38,400
function stood compile

00:44:35,440 --> 00:44:39,440
uh and it took a whole bunch of of

00:44:38,400 --> 00:44:43,200
string literals

00:44:39,440 --> 00:44:46,240
for the the the uh command line options

00:44:43,200 --> 00:44:47,599
and that was kind of a back door way uh

00:44:46,240 --> 00:44:48,880
one of the ways you could see that is a

00:44:47,599 --> 00:44:50,640
backdoor way of standardizing the

00:44:48,880 --> 00:44:52,640
command line options

00:44:50,640 --> 00:44:54,240
because presumably if stood compile

00:44:52,640 --> 00:44:56,160
supported those things

00:44:54,240 --> 00:44:58,000
then the command line would and then

00:44:56,160 --> 00:45:01,119
that may make it easier to

00:44:58,000 --> 00:45:01,599
write more it would make it easier to

00:45:01,119 --> 00:45:05,040
have a

00:45:01,599 --> 00:45:07,920
portable build in packaging system

00:45:05,040 --> 00:45:08,960
uh i don't recall what happened with

00:45:07,920 --> 00:45:11,680
that paper

00:45:08,960 --> 00:45:13,040
uh i know it hasn't gotten if i don't

00:45:11,680 --> 00:45:15,280
know if it's still active or not it

00:45:13,040 --> 00:45:19,040
hasn't gotten very far in the committee

00:45:15,280 --> 00:45:22,079
uh so we could do something

00:45:19,040 --> 00:45:24,000
so far we haven't and

00:45:22,079 --> 00:45:26,480
we've most at least the committee so far

00:45:24,000 --> 00:45:29,280
has been pretty

00:45:26,480 --> 00:45:31,200
narrowly focused on the language in the

00:45:29,280 --> 00:45:33,280
library if you call

00:45:31,200 --> 00:45:35,119
however many thousand pages of the

00:45:33,280 --> 00:45:39,280
standard narrow

00:45:35,119 --> 00:45:40,000
uh so it would uh require a bit of a

00:45:39,280 --> 00:45:43,119
shift

00:45:40,000 --> 00:45:43,920
of of the mentality of the committee to

00:45:43,119 --> 00:45:45,359
say

00:45:43,920 --> 00:45:47,359
these are extra things that we're

00:45:45,359 --> 00:45:49,520
willing to standardize

00:45:47,359 --> 00:45:52,480
yes and i i don't think c plus part

00:45:49,520 --> 00:45:54,640
actually requires a compiler

00:45:52,480 --> 00:45:55,520
there is a project from cern which is

00:45:54,640 --> 00:45:58,800
king which

00:45:55,520 --> 00:46:00,720
is interpreted separate first and then

00:45:58,800 --> 00:46:02,880
compiler flag don't mean the same thing

00:46:00,720 --> 00:46:05,440
right and you also have like this

00:46:02,880 --> 00:46:06,640
issue of what the semantic of the flag

00:46:05,440 --> 00:46:08,800
mean

00:46:06,640 --> 00:46:09,680
because implementation have a lot of

00:46:08,800 --> 00:46:13,200
difference

00:46:09,680 --> 00:46:16,960
and so what is a debug flag for

00:46:13,200 --> 00:46:19,280
or uh hollis optimization level

00:46:16,960 --> 00:46:20,960
might be completely different from msvc

00:46:19,280 --> 00:46:22,240
and llvm because they don't have the

00:46:20,960 --> 00:46:24,560
same

00:46:22,240 --> 00:46:26,800
infrastructure architecture and so forth

00:46:24,560 --> 00:46:28,480
so it's really hard to find semantic

00:46:26,800 --> 00:46:30,560
and i don't think it's really useful

00:46:28,480 --> 00:46:32,480
because

00:46:30,560 --> 00:46:34,000
having different compiler flags is not

00:46:32,480 --> 00:46:36,880
what makes build system

00:46:34,000 --> 00:46:36,880
difficult i think

00:46:37,119 --> 00:46:40,640
yeah so one one place where this i think

00:46:39,680 --> 00:46:42,880
becomes

00:46:40,640 --> 00:46:43,760
very relevant in the near future and

00:46:42,880 --> 00:46:47,359
it's not quite

00:46:43,760 --> 00:46:49,760
command line per se but in the

00:46:47,359 --> 00:46:51,520
for modules one of the things we've

00:46:49,760 --> 00:46:54,319
talked about in sg15

00:46:51,520 --> 00:46:56,480
is the idea of having a module manifest

00:46:54,319 --> 00:46:56,800
that goes with the module artifact files

00:46:56,480 --> 00:46:59,040
or

00:46:56,800 --> 00:47:00,640
bmi or cmi whatever however you've heard

00:46:59,040 --> 00:47:02,640
it described

00:47:00,640 --> 00:47:04,400
um that would that would have the the

00:47:02,640 --> 00:47:05,680
meta information about how the module

00:47:04,400 --> 00:47:08,000
was generated

00:47:05,680 --> 00:47:09,200
since the module artifacts themselves

00:47:08,000 --> 00:47:11,520
are not portable

00:47:09,200 --> 00:47:13,599
in any way not even between necessarily

00:47:11,520 --> 00:47:15,359
versions of the same compiler

00:47:13,599 --> 00:47:16,720
the idea behind a manifest is that it

00:47:15,359 --> 00:47:20,240
has all the information

00:47:16,720 --> 00:47:23,280
needed to reproduce that module

00:47:20,240 --> 00:47:24,800
using whatever compiler and such you

00:47:23,280 --> 00:47:27,760
might be using

00:47:24,800 --> 00:47:28,319
so having some standardized ability to

00:47:27,760 --> 00:47:31,680
state

00:47:28,319 --> 00:47:34,000
requirements for recompilation

00:47:31,680 --> 00:47:34,800
we do actually have a reasonably strong

00:47:34,000 --> 00:47:38,000
use case for

00:47:34,800 --> 00:47:40,640
these days whether that feeds back

00:47:38,000 --> 00:47:42,480
into an actual command line interfaces

00:47:40,640 --> 00:47:44,079
is perhaps a little different but

00:47:42,480 --> 00:47:46,079
maybe there will be some movement along

00:47:44,079 --> 00:47:48,400
these lines in the not too distant

00:47:46,079 --> 00:47:48,400
future

00:47:48,480 --> 00:47:51,680
and i've once again fallen into the trap

00:47:50,559 --> 00:47:53,359
of uh

00:47:51,680 --> 00:47:55,119
when thinking about tooling only

00:47:53,359 --> 00:47:57,359
thinking about build stuff

00:47:55,119 --> 00:47:58,960
and then almost all the time when i fall

00:47:57,359 --> 00:48:00,880
into that trap there's tom there it's

00:47:58,960 --> 00:48:05,119
like oh yeah static analyzer it's like

00:48:00,880 --> 00:48:05,119
dang it i was gonna remember this time

00:48:05,440 --> 00:48:11,119
uh okay more abi questions

00:48:09,040 --> 00:48:12,640
should someone create a new stl

00:48:11,119 --> 00:48:16,720
implementation that has no

00:48:12,640 --> 00:48:20,240
or practically no abi stability

00:48:16,720 --> 00:48:23,680
uh go for it quarantine yeah

00:48:20,240 --> 00:48:27,440
so a few weeks ago i was playing with

00:48:23,680 --> 00:48:28,960
um the stdc plus plus tuple

00:48:27,440 --> 00:48:31,520
implementation

00:48:28,960 --> 00:48:32,559
and that has existed since c plus plus

00:48:31,520 --> 00:48:35,760
00:48:32,559 --> 00:48:38,559
and just by using c plus plus 20

00:48:35,760 --> 00:48:40,559
i was able to remove two thirds of the

00:48:38,559 --> 00:48:42,480
code basically just because c prosperous

00:48:40,559 --> 00:48:45,280
has become a much more

00:48:42,480 --> 00:48:46,839
expressive language so there might be

00:48:45,280 --> 00:48:50,160
like some value in like

00:48:46,839 --> 00:48:51,920
um trying to make another standard

00:48:50,160 --> 00:48:55,040
library from scratch but

00:48:51,920 --> 00:48:58,640
in the other end it's so much work for

00:48:55,040 --> 00:49:01,200
so many people that it is disputable

00:48:58,640 --> 00:49:03,040
whether there would be value in that

00:49:01,200 --> 00:49:05,359
and i think at some point minister

00:49:03,040 --> 00:49:07,440
elizabeth didn't commit to abi

00:49:05,359 --> 00:49:09,839
and after a while they started to say

00:49:07,440 --> 00:49:11,839
okay we we care about abi because our

00:49:09,839 --> 00:49:14,720
user cares so

00:49:11,839 --> 00:49:16,480
it's not even that starting a new uh

00:49:14,720 --> 00:49:20,319
cpus first implementation

00:49:16,480 --> 00:49:21,680
with you from abi and because we already

00:49:20,319 --> 00:49:22,640
have three implementations as the

00:49:21,680 --> 00:49:25,680
standard care about

00:49:22,640 --> 00:49:26,720
or more even if your your own

00:49:25,680 --> 00:49:28,319
implementation

00:49:26,720 --> 00:49:30,319
doesn't care about ibi you are still

00:49:28,319 --> 00:49:33,520
constrained by what the community

00:49:30,319 --> 00:49:35,119
is willing to do so there are change of

00:49:33,520 --> 00:49:37,680
interface that will never happen

00:49:35,119 --> 00:49:37,680
regardless

00:49:38,000 --> 00:49:43,359
so yeah in the

00:49:41,440 --> 00:49:45,680
blogish post that i made a while back

00:49:43,359 --> 00:49:49,359
that was one thing that i've

00:49:45,680 --> 00:49:50,720
omitted to some degree is that abi so

00:49:49,359 --> 00:49:56,079
there's a lot of things that

00:49:50,720 --> 00:49:59,040
abi keeps that implementers

00:49:56,079 --> 00:50:00,720
could do if they didn't care about abi

00:49:59,040 --> 00:50:02,240
there's a lot of things that even the

00:50:00,720 --> 00:50:03,760
standards still wouldn't do even if we

00:50:02,240 --> 00:50:04,079
didn't care about api because it you

00:50:03,760 --> 00:50:06,319
know

00:50:04,079 --> 00:50:08,319
changes the semantics of code it would

00:50:06,319 --> 00:50:10,240
be an interface break as well as an api

00:50:08,319 --> 00:50:12,160
but there are still some things like

00:50:10,240 --> 00:50:15,760
that like strict additions

00:50:12,160 --> 00:50:16,559
from ecmascript to regex that maybe we

00:50:15,760 --> 00:50:19,599
could do

00:50:16,559 --> 00:50:21,359
uh if abi weren't concerned so

00:50:19,599 --> 00:50:22,800
yes the standard is still kind of

00:50:21,359 --> 00:50:25,520
restricted by whatever the

00:50:22,800 --> 00:50:26,960
lowest common denominator but to the

00:50:25,520 --> 00:50:28,880
question itself should someone create a

00:50:26,960 --> 00:50:31,839
new stl implementation that has no or

00:50:28,880 --> 00:50:34,720
practically no abi stability

00:50:31,839 --> 00:50:35,280
to some degree at least libc plus has an

00:50:34,720 --> 00:50:37,280
abi

00:50:35,280 --> 00:50:39,040
experimental flag to where you can use

00:50:37,280 --> 00:50:41,599
the latest greatest abi that doesn't

00:50:39,040 --> 00:50:44,160
care about compatibility at all

00:50:41,599 --> 00:50:46,319
and there are several abi breaks queued

00:50:44,160 --> 00:50:50,319
up in in that branch

00:50:46,319 --> 00:50:51,520
uh gcc has an abi unstable branch that

00:50:50,319 --> 00:50:54,480
almost no one tests

00:50:51,520 --> 00:50:54,880
or uses at least as of like six months

00:50:54,480 --> 00:50:58,559
or so

00:50:54,880 --> 00:51:01,839
ago uh and

00:50:58,559 --> 00:51:05,920
msvc their implementation has

00:51:01,839 --> 00:51:09,280
right now it's still in an old tfs

00:51:05,920 --> 00:51:12,640
uh repo somewhere allegedly of their abi

00:51:09,280 --> 00:51:14,000
breaking implementation that they uh

00:51:12,640 --> 00:51:15,520
they said that they want to you know

00:51:14,000 --> 00:51:16,960
update it and get it published and i

00:51:15,520 --> 00:51:18,400
believe at some point they will

00:51:16,960 --> 00:51:20,400
but for each of those you could take

00:51:18,400 --> 00:51:23,119
those build them and use them yourself

00:51:20,400 --> 00:51:24,000
and sure it's abi breaking you can do

00:51:23,119 --> 00:51:26,079
that

00:51:24,000 --> 00:51:27,040
uh and at least lip c plus plus is

00:51:26,079 --> 00:51:30,960
pretty easy

00:51:27,040 --> 00:51:32,800
to build uh it's not a hard it's not

00:51:30,960 --> 00:51:34,240
months of effort or even weeks of effort

00:51:32,800 --> 00:51:37,359
to figure out how to get that to build

00:51:34,240 --> 00:51:38,079
with the abi and stable flag so to some

00:51:37,359 --> 00:51:41,119
degree

00:51:38,079 --> 00:51:44,079
it's there it's not going to make it the

00:51:41,119 --> 00:51:47,119
the committee's job any easier

00:51:44,079 --> 00:51:47,760
but it could get you a little bit more

00:51:47,119 --> 00:51:50,640
efficient

00:51:47,760 --> 00:51:54,720
or better in some ways implementation

00:51:50,640 --> 00:51:54,720
than if you use the abi stable version

00:51:55,280 --> 00:51:58,400
and of course there are easy ways that

00:51:57,440 --> 00:52:00,319
you can avoid

00:51:58,400 --> 00:52:02,079
all abi problems and that's if you write

00:52:00,319 --> 00:52:05,839
your code so that it is only evaluated

00:52:02,079 --> 00:52:05,839
at compile time

00:52:08,559 --> 00:52:12,000
is this the point where i suggest people

00:52:10,640 --> 00:52:15,280
use a student bed

00:52:12,000 --> 00:52:16,880
on dev slash eth0 so they can get

00:52:15,280 --> 00:52:18,230
compile time

00:52:16,880 --> 00:52:22,559
ethernet networking

00:52:18,230 --> 00:52:25,920
[Laughter]

00:52:22,559 --> 00:52:27,280
let's see uh looking down for the next

00:52:25,920 --> 00:52:31,520
question

00:52:27,280 --> 00:52:35,200
uh okay

00:52:31,520 --> 00:52:37,040
let me get this one because we're

00:52:35,200 --> 00:52:38,800
we may have time for this one and maybe

00:52:37,040 --> 00:52:40,800
one more so what's the path forward for

00:52:38,800 --> 00:52:42,240
stability versus progress

00:52:40,800 --> 00:52:45,280
something goes in the standard library

00:52:42,240 --> 00:52:48,000
that gets outdated what should we do

00:52:45,280 --> 00:52:50,319
uh billy this time i'm gonna pick on you

00:52:48,000 --> 00:52:50,319
uh

00:52:50,800 --> 00:52:54,079
so there's been lots of discussions

00:52:52,240 --> 00:52:55,839
lately about our nxd where we've

00:52:54,079 --> 00:52:59,040
deprecated things and

00:52:55,839 --> 00:53:01,280
and uh stir stream being a a poster

00:52:59,040 --> 00:53:04,480
child of something that's gone

00:53:01,280 --> 00:53:06,079
deprecated but we've never removed um

00:53:04,480 --> 00:53:08,400
having written one of the papers on

00:53:06,079 --> 00:53:11,599
removal of auto pointer

00:53:08,400 --> 00:53:14,800
um i think we should embrace

00:53:11,599 --> 00:53:18,079
that sometimes we make mistakes and that

00:53:14,800 --> 00:53:20,640
things will disappear at some particular

00:53:18,079 --> 00:53:22,000
language level and uh we really

00:53:20,640 --> 00:53:23,920
shouldn't be afraid

00:53:22,000 --> 00:53:25,119
that something like auto pointer does

00:53:23,920 --> 00:53:26,960
disappear

00:53:25,119 --> 00:53:28,880
uh i know there are code bases that have

00:53:26,960 --> 00:53:31,599
used it

00:53:28,880 --> 00:53:32,640
but something goes in standard gets out

00:53:31,599 --> 00:53:36,720
here which we do

00:53:32,640 --> 00:53:38,880
um yeah so i i don't think it's a bad

00:53:36,720 --> 00:53:42,480
thing that something

00:53:38,880 --> 00:53:43,680
leaves the standard as far as outdated

00:53:42,480 --> 00:53:47,359
if it's

00:53:43,680 --> 00:53:49,359
outdated but not really broken um

00:53:47,359 --> 00:53:50,640
there's you know people that say maybe

00:53:49,359 --> 00:53:51,680
we should get rid of buying because we

00:53:50,640 --> 00:53:54,839
have lambdas

00:53:51,680 --> 00:53:57,760
but maybe not um

00:53:54,839 --> 00:54:00,480
i i i would say it

00:53:57,760 --> 00:54:01,200
for something to be uh removed from the

00:54:00,480 --> 00:54:02,640
library

00:54:01,200 --> 00:54:04,400
it really has to have a better

00:54:02,640 --> 00:54:06,800
replacement and

00:54:04,400 --> 00:54:10,400
uh a consensus that it's something that

00:54:06,800 --> 00:54:12,640
we really shouldn't be using anymore

00:54:10,400 --> 00:54:14,640
yeah i think i think ben answered this

00:54:12,640 --> 00:54:18,079
question very well earlier

00:54:14,640 --> 00:54:19,839
about how we provide something new um

00:54:18,079 --> 00:54:22,160
you know as much as we can provide make

00:54:19,839 --> 00:54:24,800
resources for migrating to it

00:54:22,160 --> 00:54:27,839
if we look at um other interface

00:54:24,800 --> 00:54:29,359
ecosystems if you look at the win32 api

00:54:27,839 --> 00:54:31,520
right that's how they've managed things

00:54:29,359 --> 00:54:34,559
you've you've seen function function ex

00:54:31,520 --> 00:54:37,839
function exex function exex2

00:54:34,559 --> 00:54:38,960
you know the the naming gets ugly but

00:54:37,839 --> 00:54:40,640
that does

00:54:38,960 --> 00:54:43,200
preserve both the path forward and

00:54:40,640 --> 00:54:44,880
stability

00:54:43,200 --> 00:54:47,200
and that's probably about the best that

00:54:44,880 --> 00:54:49,200
we can do

00:54:47,200 --> 00:54:50,640
so i do think there is room for the

00:54:49,200 --> 00:54:53,760
committee to improve here

00:54:50,640 --> 00:54:55,839
and that there are some places where

00:54:53,760 --> 00:54:57,920
in particular we use virtual functions

00:54:55,839 --> 00:54:59,680
or some other kind of dynamic dispatch

00:54:57,920 --> 00:55:02,000
so stood function has some dynamic

00:54:59,680 --> 00:55:03,520
dispatch and those virtual functions and

00:55:02,000 --> 00:55:07,520
dynamic dispatch

00:55:03,520 --> 00:55:10,160
are much harder to evolve than

00:55:07,520 --> 00:55:12,480
classes without it i think we could do a

00:55:10,160 --> 00:55:12,799
better job in the future of whenever we

00:55:12,480 --> 00:55:14,559
see

00:55:12,799 --> 00:55:16,400
something that's got this dynamic

00:55:14,559 --> 00:55:18,559
dispatch cooked in

00:55:16,400 --> 00:55:20,880
that we make sure to put some kind of

00:55:18,559 --> 00:55:22,240
versioning on it so that we can evolve

00:55:20,880 --> 00:55:24,559
it in the future

00:55:22,240 --> 00:55:26,319
uh we haven't had a great track record

00:55:24,559 --> 00:55:28,240
with that in the past i i think uh

00:55:26,319 --> 00:55:30,319
i heard titus say at one point that okay

00:55:28,240 --> 00:55:32,240
we got a

00:55:30,319 --> 00:55:33,599
we got some of the polymorphic memory

00:55:32,240 --> 00:55:35,920
resource stuff in

00:55:33,599 --> 00:55:37,119
c plus 17 and within a few meetings

00:55:35,920 --> 00:55:38,480
after that was done someone wanted to

00:55:37,119 --> 00:55:39,359
add another virtual function to it to

00:55:38,480 --> 00:55:41,839
break api

00:55:39,359 --> 00:55:43,040
so we didn't even get a full release use

00:55:41,839 --> 00:55:44,640
out of it

00:55:43,040 --> 00:55:46,319
and if you've already got virtual

00:55:44,640 --> 00:55:49,040
functions there

00:55:46,319 --> 00:55:50,720
it's not free to add versioning but it's

00:55:49,040 --> 00:55:54,000
extremely cheap

00:55:50,720 --> 00:55:55,680
compared to a container class so that's

00:55:54,000 --> 00:55:58,880
one of those places where we'd

00:55:55,680 --> 00:56:01,040
have to decide where our trade-offs are

00:55:58,880 --> 00:56:02,480
whether we want to be able to evolve it

00:56:01,040 --> 00:56:04,799
or whether we want to get

00:56:02,480 --> 00:56:07,839
the optimal version of what we have in

00:56:04,799 --> 00:56:10,960
front of us right this very moment

00:56:07,839 --> 00:56:14,559
so i think there's room for improvement

00:56:10,960 --> 00:56:17,680
but yeah that's where we are

00:56:14,559 --> 00:56:19,280
commentary quarantine uh yes i think

00:56:17,680 --> 00:56:22,559
there are real good arguments

00:56:19,280 --> 00:56:24,480
in both sides of this discussion i think

00:56:22,559 --> 00:56:26,880
it's a discussion we had for

00:56:24,480 --> 00:56:28,720
a few years i expect we will still have

00:56:26,880 --> 00:56:29,760
the same description in a few years and

00:56:28,720 --> 00:56:33,040
it's

00:56:29,760 --> 00:56:35,200
really hard to to resolve and

00:56:33,040 --> 00:56:37,520
i'm not sure that we will so there might

00:56:35,200 --> 00:56:40,799
always be this tension between stability

00:56:37,520 --> 00:56:40,799
and progress going forward

00:56:43,119 --> 00:56:50,240
okay so i think i will

00:56:46,799 --> 00:56:53,280
uh throw up uh one one

00:56:50,240 --> 00:56:56,480
last question or not not a question here

00:56:53,280 --> 00:56:58,799
uh to uh to close things off so

00:56:56,480 --> 00:57:00,720
i haven't been saying who's been asking

00:56:58,799 --> 00:57:04,880
these questions so far but

00:57:00,720 --> 00:57:08,079
this one i will because uh this one is

00:57:04,880 --> 00:57:09,440
uh hana is saying you're all heroes for

00:57:08,079 --> 00:57:12,720
us do you know

00:57:09,440 --> 00:57:15,760
and uh if you think so

00:57:12,720 --> 00:57:18,319
fine but i mean you're also on the the

00:57:15,760 --> 00:57:19,359
hana is also on the committee is as well

00:57:18,319 --> 00:57:22,400
and uh

00:57:19,359 --> 00:57:25,680
it's impressed a lot of us with uh

00:57:22,400 --> 00:57:29,200
the compile time skills and uh

00:57:25,680 --> 00:57:32,559
i i guess i'll say my my one brief story

00:57:29,200 --> 00:57:36,079
that uh i think i met her in

00:57:32,559 --> 00:57:39,119
kona the last kona that we had and

00:57:36,079 --> 00:57:40,000
uh she pitched some of her compile time

00:57:39,119 --> 00:57:43,920
run

00:57:40,000 --> 00:57:47,520
ctre stuff and then at

00:57:43,920 --> 00:57:49,599
after hours she was seeing

00:57:47,520 --> 00:57:51,200
oh can we do some of this compile time

00:57:49,599 --> 00:57:52,880
evaluation stuff for

00:57:51,200 --> 00:57:54,640
the format library which hadn't hit the

00:57:52,880 --> 00:57:56,400
library which hadn't uh

00:57:54,640 --> 00:57:58,640
been standardized yet and it's like yeah

00:57:56,400 --> 00:58:01,440
i got this working you know

00:57:58,640 --> 00:58:02,880
after the meeting and just getting it

00:58:01,440 --> 00:58:03,920
all you know evaluated and checked to

00:58:02,880 --> 00:58:06,160
compile time and

00:58:03,920 --> 00:58:08,559
i always thought that was amazing so

00:58:06,160 --> 00:58:09,839
it's you know the the shout out for

00:58:08,559 --> 00:58:12,880
other people of

00:58:09,839 --> 00:58:15,200
the committee uh it's a volunteer

00:58:12,880 --> 00:58:17,839
organization

00:58:15,200 --> 00:58:18,880
we do what we can but it requires other

00:58:17,839 --> 00:58:22,079
people to help

00:58:18,880 --> 00:58:24,480
so yeah that's i remember that

00:58:22,079 --> 00:58:25,680
uh that day in kona too i was really

00:58:24,480 --> 00:58:29,440
impressed

00:58:25,680 --> 00:58:31,839
um i've been uh sharing the i'm

00:58:29,440 --> 00:58:33,520
managing the mailing list discussion uh

00:58:31,839 --> 00:58:36,799
these past few months

00:58:33,520 --> 00:58:38,960
and that is a lot amount of work and it

00:58:36,799 --> 00:58:42,720
gave me a lot of respect for people that

00:58:38,960 --> 00:58:45,839
actually doing sharing um bryce

00:58:42,720 --> 00:58:48,160
tom nb there it's

00:58:45,839 --> 00:58:51,119
a lot of work so i think these people

00:58:48,160 --> 00:58:51,119
are the

00:58:52,160 --> 00:58:56,799
the reflections to the group which is

00:58:54,079 --> 00:59:00,000
really impressive

00:58:56,799 --> 00:59:02,640
yeah uh

00:59:00,000 --> 00:59:03,440
and yeah i guess i'll give one other

00:59:02,640 --> 00:59:06,160
shout out

00:59:03,440 --> 00:59:06,880
for people in the committee that you

00:59:06,160 --> 00:59:10,319
know

00:59:06,880 --> 00:59:11,839
are very uh that that

00:59:10,319 --> 00:59:14,319
really help things going on so yes you

00:59:11,839 --> 00:59:16,480
see a lot of work from the paper authors

00:59:14,319 --> 00:59:18,319
uh but then there are some people that

00:59:16,480 --> 00:59:20,240
don't necessarily write as many papers

00:59:18,319 --> 00:59:21,920
but actually go through and do the

00:59:20,240 --> 00:59:22,559
in-depth review provide really good

00:59:21,920 --> 00:59:25,839
feedback

00:59:22,559 --> 00:59:27,440
on those uh papers and one person in

00:59:25,839 --> 00:59:28,079
particular on the library front that

00:59:27,440 --> 00:59:31,200
well

00:59:28,079 --> 00:59:32,960
i guess i should say two so one that i

00:59:31,200 --> 00:59:33,359
see on the mailing list very active is

00:59:32,960 --> 00:59:36,240
uh

00:59:33,359 --> 00:59:37,920
tomasz kozinski i think is the last name

00:59:36,240 --> 00:59:41,680
i'm i'm hoping i pronounce

00:59:37,920 --> 00:59:44,720
kaminsky uh he almost always has

00:59:41,680 --> 00:59:46,079
in-depth feedback he will go and read

00:59:44,720 --> 00:59:48,799
through and

00:59:46,079 --> 00:59:50,400
have excellent feedback on papers and

00:59:48,799 --> 00:59:51,599
then one person that's helped me a lot

00:59:50,400 --> 00:59:54,720
with uh with uh

00:59:51,599 --> 00:59:56,400
my work recently has been a walter brown

00:59:54,720 --> 00:59:58,480
and reviewing and getting the wording

00:59:56,400 --> 01:00:01,440
and specifications uh

00:59:58,480 --> 01:00:03,760
uh solidified so that it can move

01:00:01,440 --> 01:00:07,359
forward to the specification groups

01:00:03,760 --> 01:00:10,480
uh and fix my

01:00:07,359 --> 01:00:13,520
terrible grammar in some cases uh so

01:00:10,480 --> 01:00:15,280
uh and not just sc walters walter is

01:00:13,520 --> 01:00:17,200
sort of our moral compass

01:00:15,280 --> 01:00:18,960
keeping us you know pointed in the right

01:00:17,200 --> 01:00:19,839
direction making sure we're thinking of

01:00:18,960 --> 01:00:24,000
the

01:00:19,839 --> 01:00:24,000
you know the bigger picture and yeah

01:00:24,160 --> 01:00:27,520
so i think we're out of time any closing

01:00:26,240 --> 01:00:31,119
comments uh

01:00:27,520 --> 01:00:32,799
billy corrinton uh i just say that i

01:00:31,119 --> 01:00:36,960
hope everyone's enjoying the conference

01:00:32,799 --> 01:00:39,760
and you've got another two days of

01:00:36,960 --> 01:00:41,359
plenary talks and chances to sit around

01:00:39,760 --> 01:00:44,799
tables and talk to people

01:00:41,359 --> 01:00:45,599
and take advantage of it and likewise i

01:00:44,799 --> 01:00:46,799
would say um

01:00:45,599 --> 01:00:48,319
you know if you want to get more

01:00:46,799 --> 01:00:49,040
involved there are ways to get more

01:00:48,319 --> 01:00:52,400
involved

01:00:49,040 --> 01:00:55,359
sg16 is an open study group

01:00:52,400 --> 01:00:57,280
if you just google or search for wg21s

01:00:55,359 --> 01:01:01,839
g16 you will find our page

01:00:57,280 --> 01:01:05,280
and that's got links to our open

01:01:01,839 --> 01:01:08,079
mailing list and our telecon schedules

01:01:05,280 --> 01:01:08,960
and slack and everything else so you can

01:01:08,079 --> 01:01:12,240
jump right in

01:01:08,960 --> 01:01:15,200
and offer your thoughts you know

01:01:12,240 --> 01:01:16,960
you can always take whatever paper off

01:01:15,200 --> 01:01:18,720
of the mailing and email the author with

01:01:16,960 --> 01:01:20,240
your commentary and feedback and they

01:01:18,720 --> 01:01:21,440
will generally appreciate it if it's

01:01:20,240 --> 01:01:24,720
well thought out

01:01:21,440 --> 01:01:28,079
yes that's very useful yeah

01:01:24,720 --> 01:01:30,480
okay uh i think we are out of time so uh

01:01:28,079 --> 01:01:31,920
thank uh everyone for coming and

01:01:30,480 --> 01:01:33,680
providing your questions there's another

01:01:31,920 --> 01:01:35,200
one of these with a different uh panel

01:01:33,680 --> 01:01:38,480
later on today

01:01:35,200 --> 01:01:53,839
uh so thanks thank you ben

01:01:38,480 --> 01:01:53,839
thank you ben

01:01:59,359 --> 01:02:01,440

YouTube URL: https://www.youtube.com/watch?v=udKNou797Zc


