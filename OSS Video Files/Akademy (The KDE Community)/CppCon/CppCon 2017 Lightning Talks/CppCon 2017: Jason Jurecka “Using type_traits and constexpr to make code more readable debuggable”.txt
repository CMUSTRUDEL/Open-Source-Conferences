Title: CppCon 2017: Jason Jurecka “Using type_traits and constexpr to make code more readable debuggable”
Publication date: 2017-10-28
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:05,120 --> 00:00:08,889
hi my name's Jason your ESCO I'm a

00:00:07,100 --> 00:00:11,150
senior engineer at was entertainment

00:00:08,889 --> 00:00:14,240
last year I gave a talk very quickly

00:00:11,150 --> 00:00:18,169
about game engine usage of new modern

00:00:14,240 --> 00:00:21,439
c++ features macro based reflection

00:00:18,169 --> 00:00:22,550
system which everyone hated people were

00:00:21,439 --> 00:00:23,989
complaining about it in the YouTube

00:00:22,550 --> 00:00:26,090
channel and I got some comments

00:00:23,989 --> 00:00:28,790
afterwards I'm sorry you get to start

00:00:26,090 --> 00:00:33,240
all over again because nobody can hear

00:00:28,790 --> 00:00:36,160
you hello hello

00:00:33,240 --> 00:00:40,600
[Music]

00:00:36,160 --> 00:00:51,499
alright ladies hold on to your hands

00:00:40,600 --> 00:00:53,059
this is gonna be really rough all right

00:00:51,499 --> 00:00:56,960
so let's do this where everyone can hear

00:00:53,059 --> 00:01:01,339
it so last year I gave a talk about game

00:00:56,960 --> 00:01:03,620
engine usage of C++ 11 features and the

00:01:01,339 --> 00:01:04,970
like mainly I was focusing on stuff that

00:01:03,620 --> 00:01:06,620
was practically available at the time

00:01:04,970 --> 00:01:09,290
which meant I was here a compiler that

00:01:06,620 --> 00:01:12,830
had some features from 14 some features

00:01:09,290 --> 00:01:15,470
from 11 and no experimental features so

00:01:12,830 --> 00:01:19,790
I built out a infrastructure that used a

00:01:15,470 --> 00:01:22,850
macro based system reflection system to

00:01:19,790 --> 00:01:23,900
generate resources and to generate this

00:01:22,850 --> 00:01:25,760
to automatically generate the

00:01:23,900 --> 00:01:29,270
serializers and D serializers for that

00:01:25,760 --> 00:01:32,480
data this caused me to have to go in and

00:01:29,270 --> 00:01:35,380
define some of the default types so that

00:01:32,480 --> 00:01:37,850
they would be evaluated properly and

00:01:35,380 --> 00:01:40,610
that created kind of a weird thing where

00:01:37,850 --> 00:01:43,430
you know I had to do this work when I

00:01:40,610 --> 00:01:46,040
probably shouldn't have so now with the

00:01:43,430 --> 00:01:48,590
new compiler 2017 I was able to go in

00:01:46,040 --> 00:01:51,410
and add type traits and this allowed me

00:01:48,590 --> 00:01:53,360
to remove all of those macros and then

00:01:51,410 --> 00:01:55,520
make the code debuggable because I no

00:01:53,360 --> 00:01:58,370
longer had just magic macro and then

00:01:55,520 --> 00:02:01,790
data comes out so now I had debuggable

00:01:58,370 --> 00:02:04,100
code well as you can see it is still a

00:02:01,790 --> 00:02:06,830
little bit tough to look at I'm using

00:02:04,100 --> 00:02:08,810
essentially an enable if to enable a

00:02:06,830 --> 00:02:10,399
template availability at compile time

00:02:08,810 --> 00:02:14,090
based on whether or not the type is

00:02:10,399 --> 00:02:15,950
considered trivially copyable I had to

00:02:14,090 --> 00:02:17,400
kind of put this on multiple instances

00:02:15,950 --> 00:02:20,069
of my my function

00:02:17,400 --> 00:02:23,040
to get it to just compile and work well

00:02:20,069 --> 00:02:25,769
I think that we can do better and so now

00:02:23,040 --> 00:02:27,209
I have this using if Kant's expert I now

00:02:25,769 --> 00:02:30,540
just have a single function where they

00:02:27,209 --> 00:02:32,099
interface is the same and I evaluate on

00:02:30,540 --> 00:02:34,620
based on the type which code is getting

00:02:32,099 --> 00:02:36,030
compiled so that that's pretty nice so

00:02:34,620 --> 00:02:38,310
now I removed all my macros that's

00:02:36,030 --> 00:02:39,510
awesome right well actually I have to

00:02:38,310 --> 00:02:41,400
handle the case where I have something

00:02:39,510 --> 00:02:45,090
that in my resource that is not trivial

00:02:41,400 --> 00:02:48,209
eCopy well from my resources I allowed a

00:02:45,090 --> 00:02:50,700
standard vector which typically isn't

00:02:48,209 --> 00:02:53,420
allowed in game resources but I'm trying

00:02:50,700 --> 00:02:56,549
to prove out some of the advancements in

00:02:53,420 --> 00:02:58,730
C++ for use in game engines and things

00:02:56,549 --> 00:03:01,920
like that so to allow for that

00:02:58,730 --> 00:03:05,489
essentially I have this macro evaluation

00:03:01,920 --> 00:03:07,109
that runs through and makes me less sad

00:03:05,489 --> 00:03:08,609
but essentially what it does is

00:03:07,109 --> 00:03:11,340
generates this so I have this definition

00:03:08,609 --> 00:03:14,189
at the top which is my resource in a

00:03:11,340 --> 00:03:16,170
header file and then when the macros

00:03:14,189 --> 00:03:19,079
processed it'll generate this template

00:03:16,170 --> 00:03:22,790
eyes override for the function of it

00:03:19,079 --> 00:03:27,629
essentially enumerates each of the types

00:03:22,790 --> 00:03:29,879
it will also go through and specialize

00:03:27,629 --> 00:03:33,419
the serialize for each type and if that

00:03:29,879 --> 00:03:35,430
type is a triplet copyable type then it

00:03:33,419 --> 00:03:37,409
will kind of automatically use my

00:03:35,430 --> 00:03:41,030
tributed copyable version of my

00:03:37,409 --> 00:03:43,709
serialize so this is a lot easier to

00:03:41,030 --> 00:03:45,780
have kind of be the magic thing that

00:03:43,709 --> 00:03:47,669
exists in the macros and the other stuff

00:03:45,780 --> 00:03:49,949
is much easier to debug so that makes me

00:03:47,669 --> 00:03:52,680
happy so another thing that i showed was

00:03:49,949 --> 00:03:54,659
a compile time usage of string hashing

00:03:52,680 --> 00:03:57,180
and what i had before which was

00:03:54,659 --> 00:03:59,430
available then was the original version

00:03:57,180 --> 00:04:01,799
of context burr which meant that you

00:03:59,430 --> 00:04:04,739
couldn't do loose and so I did recursion

00:04:01,799 --> 00:04:07,109
based string hashing so this was the

00:04:04,739 --> 00:04:09,049
original layout which isn't the easiest

00:04:07,109 --> 00:04:12,269
to debug because everything's in a

00:04:09,049 --> 00:04:13,829
question mark colon type setup this is

00:04:12,269 --> 00:04:15,569
the new layout which is a lot easier to

00:04:13,829 --> 00:04:17,159
deal with because it's now in loops I

00:04:15,569 --> 00:04:20,099
can step in and I can go through each

00:04:17,159 --> 00:04:26,350
item and check it and verify when I'm

00:04:20,099 --> 00:04:28,120
doing the evaluation at runtime when or

00:04:26,350 --> 00:04:30,010
have to have the have better knowledge

00:04:28,120 --> 00:04:31,240
I'm kind of what's going on when the

00:04:30,010 --> 00:04:33,850
compiler is running and running this

00:04:31,240 --> 00:04:36,460
code so can I get rid of more macros

00:04:33,850 --> 00:04:38,380
because it at one point I had this where

00:04:36,460 --> 00:04:42,340
it was kind of calling my concepts for

00:04:38,380 --> 00:04:43,660
function and then it would just evaluate

00:04:42,340 --> 00:04:47,830
everything at compile time if I needed

00:04:43,660 --> 00:04:51,940
to well kind of because we now have this

00:04:47,830 --> 00:04:52,360
which came in in 2011 but I found it

00:04:51,940 --> 00:04:54,610
later

00:04:52,360 --> 00:04:57,250
so I started using that which meant that

00:04:54,610 --> 00:04:58,900
I could now put this user-defined

00:04:57,250 --> 00:05:01,540
literal at the end of my string and that

00:04:58,900 --> 00:05:03,130
allowed me to go through and simplify a

00:05:01,540 --> 00:05:05,110
bunch of my code so then I didn't have

00:05:03,130 --> 00:05:07,510
macros all over the place and making

00:05:05,110 --> 00:05:08,610
everyone's sad who looked at it thank

00:05:07,510 --> 00:05:16,350
you very much

00:05:08,610 --> 00:05:16,350

YouTube URL: https://www.youtube.com/watch?v=dV0FTkEl0W4


