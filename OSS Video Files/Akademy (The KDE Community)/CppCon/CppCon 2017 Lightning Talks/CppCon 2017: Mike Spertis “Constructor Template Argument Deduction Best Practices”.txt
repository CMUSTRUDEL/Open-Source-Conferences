Title: CppCon 2017: Mike Spertis “Constructor Template Argument Deduction Best Practices”
Publication date: 2017-10-22
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:05,580
all right so I have a poster out on

00:00:03,360 --> 00:00:08,580
constructor template argument deduction

00:00:05,580 --> 00:00:11,429
best practice and one thing you may

00:00:08,580 --> 00:00:15,570
notice is it's the biggest poster in the

00:00:11,429 --> 00:00:17,580
thing and it is the smallest text of the

00:00:15,570 --> 00:00:20,310
all the posters and good things so I

00:00:17,580 --> 00:00:23,689
want to give you a little road map to

00:00:20,310 --> 00:00:26,279
the poster and the key ideas because

00:00:23,689 --> 00:00:28,590
even though there's a lot here this is a

00:00:26,279 --> 00:00:31,619
really simple and important feature in

00:00:28,590 --> 00:00:36,030
C++ seventeen that we think is gonna

00:00:31,619 --> 00:00:39,540
have a lot of impact so the elevator

00:00:36,030 --> 00:00:42,210
pitch is in C++ 14 whenever you create

00:00:39,540 --> 00:00:44,100
an argument from a class template you

00:00:42,210 --> 00:00:48,140
have to give the template parameters

00:00:44,100 --> 00:00:50,940
like those examples on top and it's

00:00:48,140 --> 00:00:52,649
really really painful even if they can

00:00:50,940 --> 00:00:54,660
be deduced from the constructor

00:00:52,649 --> 00:00:57,149
arguments so if I'm creating a lock

00:00:54,660 --> 00:01:00,180
guard I have to know is this shared

00:00:57,149 --> 00:01:05,670
mutex is that a shared time Bute X is it

00:01:00,180 --> 00:01:07,710
a unique unique lock a shared lock you

00:01:05,670 --> 00:01:10,470
name it and I don't care I'm just

00:01:07,710 --> 00:01:13,380
creating a critical section in my code

00:01:10,470 --> 00:01:15,960
and not only don't take care it's

00:01:13,380 --> 00:01:23,369
brittle my code breaks if somebody

00:01:15,960 --> 00:01:25,020
changes changes there so in C++ 17 if I

00:01:23,369 --> 00:01:27,360
want to create a vector from an

00:01:25,020 --> 00:01:30,360
initializer list if knows what type it

00:01:27,360 --> 00:01:35,130
is if I want to do a lot guard from a

00:01:30,360 --> 00:01:38,939
lock it's there right so this was one of

00:01:35,130 --> 00:01:43,140
Anthony Williams first slides is how you

00:01:38,939 --> 00:01:45,329
do walking C++ 17 so since people create

00:01:43,140 --> 00:01:48,689
objects from class templates all the

00:01:45,329 --> 00:01:51,680
time we think this will be a high-impact

00:01:48,689 --> 00:01:55,290
simple feature

00:01:51,680 --> 00:01:57,509
unfortunately no C++ feature simple

00:01:55,290 --> 00:02:01,979
enough that it does not require best

00:01:57,509 --> 00:02:04,140
practices so we before calling a

00:02:01,979 --> 00:02:08,129
complete we wanted a set of best

00:02:04,140 --> 00:02:12,540
practices on one other thing I should

00:02:08,129 --> 00:02:13,650
should say is let's try say I'm trying

00:02:12,540 --> 00:02:17,430
to create a back

00:02:13,650 --> 00:02:19,470
from two iterators the compiler isn't

00:02:17,430 --> 00:02:22,470
going to know how to do that from the

00:02:19,470 --> 00:02:24,510
constructor because it doesn't know that

00:02:22,470 --> 00:02:28,140
you're supposed to create a vector of

00:02:24,510 --> 00:02:32,069
the value types of the iterators so we

00:02:28,140 --> 00:02:35,579
allow you to specify a deduction rule

00:02:32,069 --> 00:02:39,060
which is the rule here the stuff is all

00:02:35,579 --> 00:02:42,390
on the poster to say if you've given two

00:02:39,060 --> 00:02:45,870
iterators create a vector of the

00:02:42,390 --> 00:02:49,799
iterators value type from them so this

00:02:45,870 --> 00:02:54,829
all works so we have some simple best

00:02:49,799 --> 00:02:57,239
practices that everyone should know like

00:02:54,829 --> 00:03:00,180
when should you use the feature

00:02:57,239 --> 00:03:04,109
what's use what's abuse can I get rid of

00:03:00,180 --> 00:03:06,989
all factory functions well not so fast

00:03:04,109 --> 00:03:10,799
some factory functions do funky stuff

00:03:06,989 --> 00:03:13,440
right like make tupple unwraps reference

00:03:10,799 --> 00:03:17,910
wrappers and using a factory function

00:03:13,440 --> 00:03:20,190
can help inform people that this factory

00:03:17,910 --> 00:03:24,630
function does some of its own processing

00:03:20,190 --> 00:03:27,329
so only use template argument deduction

00:03:24,630 --> 00:03:30,209
for constructors when that's really all

00:03:27,329 --> 00:03:33,540
you're doing and then not giving the

00:03:30,209 --> 00:03:35,340
factory function gets rid of visual

00:03:33,540 --> 00:03:38,310
noise and makes it clear to the user

00:03:35,340 --> 00:03:40,829
that there's nothing funky going on but

00:03:38,310 --> 00:03:44,400
if there is use a factory function so

00:03:40,829 --> 00:03:47,910
make tuples stays another thing that's a

00:03:44,400 --> 00:03:51,060
little bit tricky is when you call a

00:03:47,910 --> 00:03:53,609
function template you always do with

00:03:51,060 --> 00:04:00,840
parentheses but when you construct there

00:03:53,609 --> 00:04:04,019
may be braces so the result is we decide

00:04:00,840 --> 00:04:06,930
what to do then so if I construct brace

00:04:04,019 --> 00:04:09,959
initialize a vector from a vector by

00:04:06,930 --> 00:04:13,430
constructing a vector of vectors or I'm

00:04:09,959 --> 00:04:19,789
copying and the answer is you're copying

00:04:13,430 --> 00:04:23,039
because you can always explicitly

00:04:19,789 --> 00:04:26,099
specify you want to go with an

00:04:23,039 --> 00:04:26,490
initializer list and then it will create

00:04:26,099 --> 00:04:29,880
a

00:04:26,490 --> 00:04:33,680
from a vector but if I'm just copying I

00:04:29,880 --> 00:04:33,680
want the principle of least surprise

00:04:34,460 --> 00:04:42,720
one other thing worth mentioning is in

00:04:39,030 --> 00:04:44,520
your classes constructors and if

00:04:42,720 --> 00:04:46,440
parameter packs in the middle but

00:04:44,520 --> 00:04:49,500
function templates can only have

00:04:46,440 --> 00:04:51,449
parameter packs at the end since we're

00:04:49,500 --> 00:04:53,789
creating function templates from class

00:04:51,449 --> 00:04:59,849
templates that creates an impedance

00:04:53,789 --> 00:05:02,070
mismatch the other so the thing to do is

00:04:59,849 --> 00:05:03,840
in your classes when you create

00:05:02,070 --> 00:05:09,389
constructors if you have a parameter

00:05:03,840 --> 00:05:13,050
pack put it at the end so this five

00:05:09,389 --> 00:05:16,110
minutes I'm over I'm done okay so

00:05:13,050 --> 00:05:20,009
there's a lot more stuff on these slides

00:05:16,110 --> 00:05:23,009
I hope this whet your appetite and I

00:05:20,009 --> 00:05:25,139
encourage you to go and look at the

00:05:23,009 --> 00:05:26,230
poster or call me directly thank you

00:05:25,139 --> 00:05:32,859
very much

00:05:26,230 --> 00:05:32,859

YouTube URL: https://www.youtube.com/watch?v=TI2to07dfqI


