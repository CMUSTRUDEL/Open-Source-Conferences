Title: CppCon 2017: Jody Hagins “Throwing Exceptions for Fun and Profit”
Publication date: 2017-10-27
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:04,880 --> 00:00:11,850
all right so there's my title because

00:00:06,930 --> 00:00:14,280
naming things are hard but so we we have

00:00:11,850 --> 00:00:16,470
we do throat we do use exceptions in our

00:00:14,280 --> 00:00:20,789
code base even though we are very

00:00:16,470 --> 00:00:23,280
concerned about performance and I'll

00:00:20,789 --> 00:00:25,290
avoid the vault avoid the holy war about

00:00:23,280 --> 00:00:27,000
exceptions but the other night at dinner

00:00:25,290 --> 00:00:30,300
with some folks we were talking about it

00:00:27,000 --> 00:00:31,590
and we were discussing why we use it and

00:00:30,300 --> 00:00:35,629
some things that we did and our

00:00:31,590 --> 00:00:38,280
performance testing originally and so

00:00:35,629 --> 00:00:40,530
what I thought it might be interesting

00:00:38,280 --> 00:00:41,820
to share some list about I'm gonna make

00:00:40,530 --> 00:00:48,420
that bigger cuz that looks like it's too

00:00:41,820 --> 00:00:50,370
small there we go okay so this is

00:00:48,420 --> 00:00:53,130
basically this is on the left part is

00:00:50,370 --> 00:00:55,350
it's a function that we just made up but

00:00:53,130 --> 00:00:57,270
it's just a a function that uses a

00:00:55,350 --> 00:01:01,520
return code there you know you're just

00:00:57,270 --> 00:01:04,079
going to return a value from it and as

00:01:01,520 --> 00:01:06,149
normal status stuff right it's just a

00:01:04,079 --> 00:01:08,490
stupid function but it shows us what we

00:01:06,149 --> 00:01:09,930
want and this is the code that it

00:01:08,490 --> 00:01:12,930
generates so this is kind of what we

00:01:09,930 --> 00:01:15,210
want to get if we can if we can create

00:01:12,930 --> 00:01:16,320
our throwing of the exception a lot of

00:01:15,210 --> 00:01:18,299
times you talk about catching of

00:01:16,320 --> 00:01:20,190
exceptions we can get it to look similar

00:01:18,299 --> 00:01:24,440
to this then that's kind of where we

00:01:20,190 --> 00:01:24,440
want to be so let's see what we can do

00:01:25,640 --> 00:01:34,950
in this case we have we've replaced

00:01:32,280 --> 00:01:38,010
we've replaced the returns with throws

00:01:34,950 --> 00:01:42,030
and you can see here's the function and

00:01:38,010 --> 00:01:44,040
it has grown tremendously there's lots

00:01:42,030 --> 00:01:46,409
and lots of extra code there most of

00:01:44,040 --> 00:01:50,939
that is actually because when you call

00:01:46,409 --> 00:01:53,220
throw it's going to inline all that code

00:01:50,939 --> 00:01:55,470
to actually create the exception and

00:01:53,220 --> 00:01:59,700
throw it so let's try and get rid of

00:01:55,470 --> 00:02:07,770
that so what we can do is we can have a

00:01:59,700 --> 00:02:09,659
function that we can have like a runtime

00:02:07,770 --> 00:02:11,610
error in a logic error function that

00:02:09,659 --> 00:02:14,160
will just it's an it's an extern

00:02:11,610 --> 00:02:16,319
function that will actually that you run

00:02:14,160 --> 00:02:17,580
so it doesn't get in line and now we can

00:02:16,319 --> 00:02:19,380
see that the code is

00:02:17,580 --> 00:02:21,330
very similar to what we had before it's

00:02:19,380 --> 00:02:25,680
almost exactly it's almost exactly the

00:02:21,330 --> 00:02:26,790
same not you know give or take and so

00:02:25,680 --> 00:02:30,870
what this is gonna do it'll at least

00:02:26,790 --> 00:02:32,820
save save some so my cash for us but I

00:02:30,870 --> 00:02:34,410
don't like having these runtime and

00:02:32,820 --> 00:02:36,420
logic errors basically having a function

00:02:34,410 --> 00:02:38,970
for every type of exception so what can

00:02:36,420 --> 00:02:41,220
we do well let's try templates because

00:02:38,970 --> 00:02:46,380
that's what we always try anytime we

00:02:41,220 --> 00:02:51,660
have a problem and so we'll write we

00:02:46,380 --> 00:02:54,480
write a we write a template - oops

00:02:51,660 --> 00:02:58,410
did I not to go to the right one there

00:02:54,480 --> 00:02:59,910
we go so we have a template that raises

00:02:58,410 --> 00:03:02,400
the exception for us and so we call

00:02:59,910 --> 00:03:04,290
raise and what we do is we give it the

00:03:02,400 --> 00:03:05,400
type and it's perfect forwarding so we

00:03:04,290 --> 00:03:06,480
can give it all of its arguments and oh

00:03:05,400 --> 00:03:09,870
perfect for the arguments to the

00:03:06,480 --> 00:03:12,360
exception but we end up with all that

00:03:09,870 --> 00:03:14,610
same code again just it this basically

00:03:12,360 --> 00:03:18,690
looks just like the throat so what can

00:03:14,610 --> 00:03:23,580
we do well if we use the attributes we

00:03:18,690 --> 00:03:25,980
can then make this function be no inline

00:03:23,580 --> 00:03:28,739
cold and tell it that there's it's never

00:03:25,980 --> 00:03:32,280
going to return and the and the code

00:03:28,739 --> 00:03:34,500
gets generated looks just like the

00:03:32,280 --> 00:03:36,630
original stuff except for there's your

00:03:34,500 --> 00:03:40,320
functions for your templates and then

00:03:36,630 --> 00:03:48,660
but the code for the actual function is

00:03:40,320 --> 00:03:51,660
that right there so you can and to see

00:03:48,660 --> 00:03:53,730
the difference between the piece on the

00:03:51,660 --> 00:03:55,709
left I can't really explode this up but

00:03:53,730 --> 00:03:57,150
the piece on the left is the function

00:03:55,709 --> 00:03:59,130
that uses a status code and does a

00:03:57,150 --> 00:04:00,209
return of the status the function on the

00:03:59,130 --> 00:04:03,330
right is the one that throws the

00:04:00,209 --> 00:04:04,890
exceptions and there they're pretty much

00:04:03,330 --> 00:04:07,019
side by side you can see where they go

00:04:04,890 --> 00:04:09,390
so the idea is that we don't want to pay

00:04:07,019 --> 00:04:12,480
for what we don't use and that is both

00:04:09,390 --> 00:04:14,040
in execution instructions of what we're

00:04:12,480 --> 00:04:15,780
going to execute in the performance time

00:04:14,040 --> 00:04:17,519
but also we don't want to have a bunch

00:04:15,780 --> 00:04:19,440
of code sitting around that we're never

00:04:17,519 --> 00:04:22,229
going to use except in exceptional

00:04:19,440 --> 00:04:27,860
situations so there's a couple other

00:04:22,229 --> 00:04:27,860
things that we can do here we can have a

00:04:28,310 --> 00:04:31,470
we can take our source location and

00:04:30,660 --> 00:04:33,330
eventually there

00:04:31,470 --> 00:04:36,000
standard may or may not include this in

00:04:33,330 --> 00:04:38,280
some future version but for now what we

00:04:36,000 --> 00:04:39,810
can do is we can we can record our

00:04:38,280 --> 00:04:42,270
source location every time we throw an

00:04:39,810 --> 00:04:46,110
exception we can call our raise we have

00:04:42,270 --> 00:04:48,420
to use a macro but in this case if we

00:04:46,110 --> 00:04:51,210
raise if we call raise with the macro we

00:04:48,420 --> 00:04:53,430
can include the line function and file

00:04:51,210 --> 00:04:54,930
it will be set for every time we call a

00:04:53,430 --> 00:04:57,600
function every time we throw an

00:04:54,930 --> 00:05:01,290
exception and so then all we have to do

00:04:57,600 --> 00:05:03,240
is query and call current exception

00:05:01,290 --> 00:05:04,980
source location every time we get an

00:05:03,240 --> 00:05:07,350
exception and we'll actually get the

00:05:04,980 --> 00:05:09,120
file function and line from where the

00:05:07,350 --> 00:05:10,830
exception originated which may or not be

00:05:09,120 --> 00:05:14,580
helpful may or may not be helpful for

00:05:10,830 --> 00:05:24,810
you one last thing if I have time I

00:05:14,580 --> 00:05:27,330
think I do it was wrong one all right so

00:05:24,810 --> 00:05:29,400
this here down at the bottom if you see

00:05:27,330 --> 00:05:32,700
this is a loop if you're gonna if you're

00:05:29,400 --> 00:05:36,320
gonna be catching exceptions is not a

00:05:32,700 --> 00:05:40,140
good idea so just let your program crash

00:05:36,320 --> 00:05:42,150
not really but there is a small expense

00:05:40,140 --> 00:05:43,290
for caching so if you have a loop that's

00:05:42,150 --> 00:05:46,560
gonna be running things over and over

00:05:43,290 --> 00:05:48,180
and over again if you have your your if

00:05:46,560 --> 00:05:49,680
you have your catch inside of the tight

00:05:48,180 --> 00:05:52,350
loop you're gonna end up generating this

00:05:49,680 --> 00:05:54,630
code over here so what what I do is I

00:05:52,350 --> 00:05:56,880
have an external for loop and then a try

00:05:54,630 --> 00:05:58,590
and then inside of that my for loop that

00:05:56,880 --> 00:06:00,450
does the stuff so that the catch is

00:05:58,590 --> 00:06:02,040
outside of that for loop it'll throw an

00:06:00,450 --> 00:06:03,419
exception that will come out and then if

00:06:02,040 --> 00:06:05,190
I still need to loop back up I'll come

00:06:03,419 --> 00:06:11,100
back again but then I only have that

00:06:05,190 --> 00:06:14,000
code path once and there we go go make

00:06:11,100 --> 00:06:14,000

YouTube URL: https://www.youtube.com/watch?v=uRZZ8_d4nGM


