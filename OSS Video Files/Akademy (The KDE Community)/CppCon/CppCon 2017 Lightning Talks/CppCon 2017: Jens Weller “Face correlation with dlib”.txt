Title: CppCon 2017: Jens Weller “Face correlation with dlib”
Publication date: 2017-10-27
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,000 --> 00:00:04,049
wonderful here we are so I thought

00:00:02,310 --> 00:00:07,440
instead of doing boring spots I do a

00:00:04,049 --> 00:00:11,460
live demo and show you some code so my

00:00:07,440 --> 00:00:15,089
problem is I have like lots and lots and

00:00:11,460 --> 00:00:17,430
lots of pictures but don't know what is

00:00:15,089 --> 00:00:20,130
in them and that's why I was looking for

00:00:17,430 --> 00:00:25,650
some machine learning solution which

00:00:20,130 --> 00:00:27,900
lets me look into what is in the

00:00:25,650 --> 00:00:29,550
pictures and you know every conference

00:00:27,900 --> 00:00:31,410
lots of people so I decided to go for

00:00:29,550 --> 00:00:33,870
faces and dduba actually has pretty good

00:00:31,410 --> 00:00:37,320
support with that lead up notice the

00:00:33,870 --> 00:00:39,180
library which I'm using they have like a

00:00:37,320 --> 00:00:40,770
ton of features on machine learning and

00:00:39,180 --> 00:00:43,620
I'm just using like you know their face

00:00:40,770 --> 00:00:46,440
recognition and this is basically what

00:00:43,620 --> 00:00:48,960
got me started on where they you know

00:00:46,440 --> 00:00:53,460
can match the faces of these people to

00:00:48,960 --> 00:00:58,440
to group each and that is what my

00:00:53,460 --> 00:01:00,149
application is not doing with the

00:00:58,440 --> 00:01:01,949
conference photo so this is the the

00:01:00,149 --> 00:01:04,949
first runner which just goes for every

00:01:01,949 --> 00:01:07,200
picture and gets every every image out

00:01:04,949 --> 00:01:13,380
of there and just you know put that into

00:01:07,200 --> 00:01:17,430
a map etc and then later this goes into

00:01:13,380 --> 00:01:20,640
a cluster runner where we have a neural

00:01:17,430 --> 00:01:23,460
network which comes from develop from

00:01:20,640 --> 00:01:25,950
the example which just correlates those

00:01:23,460 --> 00:01:29,820
pictures and gives them the value and

00:01:25,950 --> 00:01:32,460
some an dimensional vector space and

00:01:29,820 --> 00:01:35,909
then matches those images and groups the

00:01:32,460 --> 00:01:42,299
pictures by a call to the Chinese

00:01:35,909 --> 00:01:47,040
whispers other ISM so but this is also

00:01:42,299 --> 00:01:51,810
you know kind of boring to see in code

00:01:47,040 --> 00:01:55,200
so let's do a little bit of presentation

00:01:51,810 --> 00:01:59,219
of the actual program so as you see here

00:01:55,200 --> 00:02:02,579
some pictures this other faces on it oh

00:01:59,219 --> 00:02:04,740
no pick so one thing you can see here is

00:02:02,579 --> 00:02:06,240
like if the faces are too small it

00:02:04,740 --> 00:02:09,720
doesn't find it and there is an

00:02:06,240 --> 00:02:11,190
optimization for it you just blow up the

00:02:09,720 --> 00:02:13,500
image by

00:02:11,190 --> 00:02:16,080
the factor of two or you have four times

00:02:13,500 --> 00:02:21,210
as much data and you can detect images

00:02:16,080 --> 00:02:24,660
in faces which are smaller and I can

00:02:21,210 --> 00:02:26,610
sort by by the number of faces as you

00:02:24,660 --> 00:02:29,160
see here so you also get only the

00:02:26,610 --> 00:02:32,640
pictures which a lot of faces on top or

00:02:29,160 --> 00:02:35,580
on bottom and I also can sort on the

00:02:32,640 --> 00:02:37,590
face area in the picture which already

00:02:35,580 --> 00:02:40,440
has some interesting results to you know

00:02:37,590 --> 00:02:42,810
to get either pictures to this one or

00:02:40,440 --> 00:02:43,980
the other group but actually if I have

00:02:42,810 --> 00:02:48,290
once I have the faces in the face

00:02:43,980 --> 00:02:50,640
correlation I can actually group the

00:02:48,290 --> 00:02:53,700
faces which are in one group and as does

00:02:50,640 --> 00:02:54,900
this usually the same person and as you

00:02:53,700 --> 00:02:56,520
have to play around a little bit of a

00:02:54,900 --> 00:03:00,360
service with each image set to get the

00:02:56,520 --> 00:03:06,180
perfect result but as you see it's

00:03:00,360 --> 00:03:08,160
pretty good with grouping people and one

00:03:06,180 --> 00:03:10,620
plan which I currently don't have

00:03:08,160 --> 00:03:12,930
I have no kind of this kind of gives it

00:03:10,620 --> 00:03:14,760
a social graph because I know every

00:03:12,930 --> 00:03:16,830
every face in every image and I know

00:03:14,760 --> 00:03:19,610
which faces are the should be the same

00:03:16,830 --> 00:03:22,140
person and then I could kind of draw a

00:03:19,610 --> 00:03:26,010
graph between connections between the

00:03:22,140 --> 00:03:28,410
images and I did that in the past in a

00:03:26,010 --> 00:03:31,260
similar fashion for the dependencies in

00:03:28,410 --> 00:03:32,790
boost and this is the whole application

00:03:31,260 --> 00:03:34,950
itself so you I use you see build was

00:03:32,790 --> 00:03:36,420
cute and I have still this framework I

00:03:34,950 --> 00:03:38,700
just have to teach it to display images

00:03:36,420 --> 00:03:40,590
and then I can basically get the graph

00:03:38,700 --> 00:03:42,600
which already currently have in the

00:03:40,590 --> 00:03:47,760
program and displays but I haven't done

00:03:42,600 --> 00:03:51,959
this yet and with that let's go quickly

00:03:47,760 --> 00:03:53,820
back to the code so I think you have

00:03:51,959 --> 00:03:56,670
heard a lot about cute this morning

00:03:53,820 --> 00:03:59,160
already and this is actually some code

00:03:56,670 --> 00:04:01,709
with which uses cutest as the front end

00:03:59,160 --> 00:04:03,239
for the UI because we still don't have a

00:04:01,709 --> 00:04:08,160
modern super special I wish as

00:04:03,239 --> 00:04:11,730
cross-platform and usable and one thing

00:04:08,160 --> 00:04:14,790
which cute really likes to do this it

00:04:11,730 --> 00:04:17,910
makes you subclass all kinds of things

00:04:14,790 --> 00:04:19,560
like this is a runner which is actually

00:04:17,910 --> 00:04:22,800
run over which runs in their school and

00:04:19,560 --> 00:04:25,080
you have the subclass for each runner

00:04:22,800 --> 00:04:27,720
the class and you you get to ride water

00:04:25,080 --> 00:04:32,460
read code that's exciting you all like

00:04:27,720 --> 00:04:34,740
that and then I thought well maybe I

00:04:32,460 --> 00:04:37,169
want to do this with a lambda so this is

00:04:34,740 --> 00:04:40,020
kind of the sed function currently

00:04:37,169 --> 00:04:42,630
probably can't improve on that but huge

00:04:40,020 --> 00:04:45,000
also has some some dependencies on this

00:04:42,630 --> 00:04:47,400
cannot be a template for example because

00:04:45,000 --> 00:04:49,460
of cute and so at the end I have the run

00:04:47,400 --> 00:04:51,990
function which takes a queue variant I

00:04:49,460 --> 00:04:54,569
assert that the task is actually there

00:04:51,990 --> 00:05:01,259
then I run the task I get the return

00:04:54,569 --> 00:05:04,590
value and I omit the finished car to to

00:05:01,259 --> 00:05:08,610
the user again if they subscribe to the

00:05:04,590 --> 00:05:13,380
signal or not and that's what I use now

00:05:08,610 --> 00:05:18,419
in my code for plugging in all kinds of

00:05:13,380 --> 00:05:20,699
runner births at the end this is a code

00:05:18,419 --> 00:05:22,380
which actually does some of the

00:05:20,699 --> 00:05:25,590
correlation I also tried to correlate

00:05:22,380 --> 00:05:27,960
this histogram data but that doesn't

00:05:25,590 --> 00:05:30,090
work currently as supposed as I wanted

00:05:27,960 --> 00:05:32,130
to work so faces are currently the way

00:05:30,090 --> 00:05:35,400
to go I have probably also gonna trying

00:05:32,130 --> 00:05:36,810
some image analyzers which one one thing

00:05:35,400 --> 00:05:38,699
I see is like the back of a head is

00:05:36,810 --> 00:05:40,229
interesting to retake detect it because

00:05:38,699 --> 00:05:41,820
a lot of images are like showing people

00:05:40,229 --> 00:05:45,060
looking at slides or something though

00:05:41,820 --> 00:05:48,860
you only see the back of the face and

00:05:45,060 --> 00:05:48,860

YouTube URL: https://www.youtube.com/watch?v=aZILzaUbDQE


