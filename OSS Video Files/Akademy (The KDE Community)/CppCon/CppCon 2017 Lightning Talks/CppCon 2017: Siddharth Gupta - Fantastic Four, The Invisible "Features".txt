Title: CppCon 2017: Siddharth Gupta - Fantastic Four, The Invisible "Features"
Publication date: 2017-10-27
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:04,460 --> 00:00:08,719
so I'm gonna be sharing some of the

00:00:07,279 --> 00:00:14,389
invisible features that I came across

00:00:08,719 --> 00:00:16,010
this summer um the good C++ so the

00:00:14,389 --> 00:00:17,210
reason I put the features in quotation

00:00:16,010 --> 00:00:19,340
marks is because these features are

00:00:17,210 --> 00:00:21,169
little confusing and there are very less

00:00:19,340 --> 00:00:25,220
cases that you might find it actually

00:00:21,169 --> 00:00:26,720
useful and most of these cases will lead

00:00:25,220 --> 00:00:30,019
to a lot of unreadable code that you

00:00:26,720 --> 00:00:31,130
don't want in your source so what are

00:00:30,019 --> 00:00:34,030
these features that I'm gonna talk about

00:00:31,130 --> 00:00:36,380
first of all case label placement

00:00:34,030 --> 00:00:39,530
assigning - turning ternary statement

00:00:36,380 --> 00:00:42,010
array operators associative and pure

00:00:39,530 --> 00:00:45,200
virtual functions with function boy so

00:00:42,010 --> 00:00:46,880
we all know go-to statement is able it's

00:00:45,200 --> 00:00:48,710
some of things that most of the

00:00:46,880 --> 00:00:54,380
programmers hate so this is example

00:00:48,710 --> 00:00:57,680
showing the go-to statement in this you

00:00:54,380 --> 00:00:59,570
can see that C++ still uses the go-to

00:00:57,680 --> 00:01:03,590
straight go-to statements and we can see

00:00:59,570 --> 00:01:06,380
in this example the next thing to ponder

00:01:03,590 --> 00:01:09,079
upon on this thing is the go-to

00:01:06,380 --> 00:01:11,420
statement is implemented similar to a

00:01:09,079 --> 00:01:12,679
switch statement as you can see the

00:01:11,420 --> 00:01:15,140
colon symbol used in the switch

00:01:12,679 --> 00:01:17,509
statements we use the argument of the

00:01:15,140 --> 00:01:21,770
switch States which statement to perform

00:01:17,509 --> 00:01:24,200
whichever case we want to perform so my

00:01:21,770 --> 00:01:26,509
point here is like switch statements

00:01:24,200 --> 00:01:28,130
have the same implementation as the

00:01:26,509 --> 00:01:30,170
go-to statements because they are

00:01:28,130 --> 00:01:31,850
implemented as jump tables and the

00:01:30,170 --> 00:01:35,090
argument in the switch statement is used

00:01:31,850 --> 00:01:36,289
to reference the position of the source

00:01:35,090 --> 00:01:38,119
code that you want to implement and

00:01:36,289 --> 00:01:39,679
that's the reason you have a break

00:01:38,119 --> 00:01:41,869
statement over there so you want to just

00:01:39,679 --> 00:01:45,679
break the code that you want to execute

00:01:41,869 --> 00:01:47,689
after that here's a fun fact you can

00:01:45,679 --> 00:01:50,990
also place an arbitrary URL into your

00:01:47,689 --> 00:01:54,439
source code the first HTTP would be the

00:01:50,990 --> 00:01:57,499
case name and the colon would be the

00:01:54,439 --> 00:02:00,859
case label and since it's double is

00:01:57,499 --> 00:02:03,170
forward slashes it'll be a comment so

00:02:00,859 --> 00:02:04,700
yeah so next thing about our talk about

00:02:03,170 --> 00:02:06,170
is assigning to turning ternary

00:02:04,700 --> 00:02:08,479
statement we all know about ternary

00:02:06,170 --> 00:02:10,150
statements so ternary statements

00:02:08,479 --> 00:02:13,159
evaluate to an l-value

00:02:10,150 --> 00:02:16,140
so here's an example where you can use

00:02:13,159 --> 00:02:17,940
the ternary statement to

00:02:16,140 --> 00:02:19,770
value and assign it to another variable

00:02:17,940 --> 00:02:22,110
in this case whatever value of the

00:02:19,770 --> 00:02:24,660
option will be you can assign it to

00:02:22,110 --> 00:02:28,319
either A or B depending the value of the

00:02:24,660 --> 00:02:30,450
option is greater than one or less you

00:02:28,319 --> 00:02:33,600
can also use it to select an object and

00:02:30,450 --> 00:02:35,070
call a method on that object so this is

00:02:33,600 --> 00:02:38,280
some something that I came across this

00:02:35,070 --> 00:02:40,260
summer that are never used array

00:02:38,280 --> 00:02:43,200
operators associated so we all know

00:02:40,260 --> 00:02:46,200
about pointer arithmetic in C and C++ we

00:02:43,200 --> 00:02:48,750
can use C style arrays as pointers and

00:02:46,200 --> 00:02:51,959
vice-versa sometimes it's useful but

00:02:48,750 --> 00:02:54,120
most of the times it isn't as we can as

00:02:51,959 --> 00:02:58,200
we can see like array 3 is synonymous to

00:02:54,120 --> 00:02:59,459
pointer array plus 3 but what's the what

00:02:58,200 --> 00:03:00,690
what's the new stuff that I learned

00:02:59,459 --> 00:03:02,970
about this summer is like you can

00:03:00,690 --> 00:03:06,600
actually represent it as the index

00:03:02,970 --> 00:03:08,130
number slash the array name so that's

00:03:06,600 --> 00:03:10,530
pretty interesting because you can do

00:03:08,130 --> 00:03:12,959
pointer arithmetic at that place as well

00:03:10,530 --> 00:03:15,720
and you can do some crazy stuff I don't

00:03:12,959 --> 00:03:18,060
know the last thing I talk about is like

00:03:15,720 --> 00:03:19,980
the pure bunch of virtual functions as

00:03:18,060 --> 00:03:22,799
far as I knew pure virtual functions

00:03:19,980 --> 00:03:25,230
didn't have a function body but true you

00:03:22,799 --> 00:03:28,140
it doesn't have a function body but you

00:03:25,230 --> 00:03:31,440
can you can instantiate an object with a

00:03:28,140 --> 00:03:32,940
pure virtual function these pure virtual

00:03:31,440 --> 00:03:35,220
functions can be implemented and call

00:03:32,940 --> 00:03:36,780
from derived classes as an example I

00:03:35,220 --> 00:03:37,230
have this base class that has to do

00:03:36,780 --> 00:03:39,690
something

00:03:37,230 --> 00:03:42,690
virtual function it is derived by the

00:03:39,690 --> 00:03:46,049
class to write and I am actually calling

00:03:42,690 --> 00:03:48,840
the virtual pure virtual function from

00:03:46,049 --> 00:03:52,650
the derived class so this is a statement

00:03:48,840 --> 00:03:54,150
about Scott Myers that this is actually

00:03:52,650 --> 00:03:57,410
a feature that is actually useful about

00:03:54,150 --> 00:03:59,549
all the four features I spoke about so

00:03:57,410 --> 00:04:00,630
derive classes that implement this pure

00:03:59,549 --> 00:04:02,160
virtual function may call this

00:04:00,630 --> 00:04:03,720
implementation somewhere in the code if

00:04:02,160 --> 00:04:05,220
part of the code of two different

00:04:03,720 --> 00:04:06,480
derived class is similar then it makes

00:04:05,220 --> 00:04:08,280
sense to move it up in the hierarchy

00:04:06,480 --> 00:04:12,500
even if the function should be pure

00:04:08,280 --> 00:04:12,500

YouTube URL: https://www.youtube.com/watch?v=offWPpfKtgU


