Title: CppCon 2017: John D. Woolverton “C Pointers”
Publication date: 2017-10-28
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:03,240 --> 00:00:11,370
oh here we go so I started out a long

00:00:08,460 --> 00:00:12,870
time ago getting used to see we didn't

00:00:11,370 --> 00:00:15,690
have containers but I had something very

00:00:12,870 --> 00:00:16,890
familiar we had something we didn't have

00:00:15,690 --> 00:00:18,810
string but we had something like a

00:00:16,890 --> 00:00:21,509
vector of care and vector care with a

00:00:18,810 --> 00:00:23,070
monotonic sequential allocator and then

00:00:21,509 --> 00:00:28,349
iterator for them but we called them

00:00:23,070 --> 00:00:30,239
malloc arrays and pointers and pointer

00:00:28,349 --> 00:00:32,850
operations were awesome if you look at

00:00:30,239 --> 00:00:36,600
the original source for Unix they were

00:00:32,850 --> 00:00:38,609
amazingly concise but they were amazing

00:00:36,600 --> 00:00:40,859
and horrifying I mean this little

00:00:38,609 --> 00:00:42,390
equation right here has two different

00:00:40,859 --> 00:00:44,940
pieces of state being modified on the

00:00:42,390 --> 00:00:47,250
left and one on the right you had to

00:00:44,940 --> 00:00:49,140
really pay attention was going on so I

00:00:47,250 --> 00:00:50,550
was writing a ray tracer and I had

00:00:49,140 --> 00:00:53,879
something was essentially a vector of

00:00:50,550 --> 00:00:56,249
vector polygons but it was pointed to

00:00:53,879 --> 00:00:57,780
pointers and I went through and count

00:00:56,249 --> 00:00:59,850
how many polygons ended up in each cell

00:00:57,780 --> 00:01:02,309
of my grid and allocate all cells and

00:00:59,850 --> 00:01:03,870
then I had to fill them in so the code

00:01:02,309 --> 00:01:06,930
did a whole bunch of three dimensional

00:01:03,870 --> 00:01:08,490
math scan converting the polygon and at

00:01:06,930 --> 00:01:10,860
the end that needed to fill the polygon

00:01:08,490 --> 00:01:13,259
corners into this data structure so

00:01:10,860 --> 00:01:15,149
using all my jetty pop Jedi powers and

00:01:13,259 --> 00:01:20,700
everything I've learned about pointers

00:01:15,149 --> 00:01:23,899
I wrote that three paces of state being

00:01:20,700 --> 00:01:29,759
modified on just the left hand side

00:01:23,899 --> 00:01:31,170
crash GCC at the time so they say

00:01:29,759 --> 00:01:32,430
there's supposed to be two audiences for

00:01:31,170 --> 00:01:35,670
your code well neither of them could

00:01:32,430 --> 00:01:38,939
read this yeah that was my was my first

00:01:35,670 --> 00:01:41,789
education I moved on to inheritance in

00:01:38,939 --> 00:01:44,430
C++ I was writing a proxy for instant

00:01:41,789 --> 00:01:46,140
messaging and I had a server and a

00:01:44,430 --> 00:01:48,329
client and I was in the middle there and

00:01:46,140 --> 00:01:51,090
messages come from the server and I

00:01:48,329 --> 00:01:52,740
would catch them and touch them and pass

00:01:51,090 --> 00:01:55,859
them on and message would come from the

00:01:52,740 --> 00:01:57,750
client you see a little symmetry here so

00:01:55,859 --> 00:01:59,159
I wrote a class socket everyone has the

00:01:57,750 --> 00:02:01,469
right one of those back in the 90s and

00:01:59,159 --> 00:02:03,450
the message processor to handle the

00:02:01,469 --> 00:02:03,840
particular protocol of the messaging

00:02:03,450 --> 00:02:06,570
system

00:02:03,840 --> 00:02:08,820
and it had a socket and I made one for

00:02:06,570 --> 00:02:09,440
the server side and one for the client

00:02:08,820 --> 00:02:18,170
side

00:02:09,440 --> 00:02:21,710
and the one you need to do together but

00:02:18,170 --> 00:02:27,170
words but I don't recommend it

00:02:21,710 --> 00:02:29,270
I was also needed to parse regular

00:02:27,170 --> 00:02:34,460
expressions what's the best place to get

00:02:29,270 --> 00:02:36,080
pro regulations good for Perl C++ and

00:02:34,460 --> 00:02:37,160
you know people Swit is great for

00:02:36,080 --> 00:02:39,410
managing resources

00:02:37,160 --> 00:02:43,040
thanks to D res or you might know it as

00:02:39,410 --> 00:02:45,410
REI there's a lot of ceremony so we'll

00:02:43,040 --> 00:02:46,670
use a code generator and we can write

00:02:45,410 --> 00:02:48,620
that in Perl and then we'll make a

00:02:46,670 --> 00:02:51,590
special well show how smart we are by

00:02:48,620 --> 00:02:53,840
writing a special make file rule and so

00:02:51,590 --> 00:02:56,870
I had this make file that turd see PPP

00:02:53,840 --> 00:02:58,280
files and turn them into CPP well I did

00:02:56,870 --> 00:03:02,860
the same directory as the original CPP

00:02:58,280 --> 00:03:05,180
file yeah I was really cooking

00:03:02,860 --> 00:03:09,170
now get the templates you can only get

00:03:05,180 --> 00:03:11,540
better right you know sto this is back

00:03:09,170 --> 00:03:13,220
in the days of Visual Studio 6 you

00:03:11,540 --> 00:03:14,990
didn't really use STL still so you wrote

00:03:13,220 --> 00:03:16,430
your own list class usually it was

00:03:14,990 --> 00:03:20,660
intrusive so you could use the curious

00:03:16,430 --> 00:03:22,550
recurring template pattern and in sort

00:03:20,660 --> 00:03:24,560
of the 98 style that you saw from STL

00:03:22,550 --> 00:03:26,959
even though you couldn't use it this

00:03:24,560 --> 00:03:29,750
doesn't look anything like I was used to

00:03:26,959 --> 00:03:32,959
when using pointers and see this just I

00:03:29,750 --> 00:03:34,220
would not call this concise what I

00:03:32,959 --> 00:03:36,800
wanted was something like I would do

00:03:34,220 --> 00:03:39,200
when I use pointers except that you know

00:03:36,800 --> 00:03:41,530
now you're making copies and you know

00:03:39,200 --> 00:03:44,959
putting increments just broken in C++

00:03:41,530 --> 00:03:46,160
you know maybe if the language had gone

00:03:44,959 --> 00:03:47,390
a different way we could declare a

00:03:46,160 --> 00:03:50,300
reference but you can't assign

00:03:47,390 --> 00:03:52,010
references and supposed to come in so I

00:03:50,300 --> 00:03:53,690
thought about this and I thought about

00:03:52,010 --> 00:03:56,630
this and I thought outside the box and

00:03:53,690 --> 00:03:59,830
in a way outside the box and then I

00:03:56,630 --> 00:04:03,050
thought like Alice in Wonderland style

00:03:59,830 --> 00:04:06,260
and I just created my own definition of

00:04:03,050 --> 00:04:09,080
what pre-increment meds and created this

00:04:06,260 --> 00:04:12,459
entire alternate reality where you could

00:04:09,080 --> 00:04:14,690
beautifully describe what you want to do

00:04:12,459 --> 00:04:17,380
as long as you didn't know what

00:04:14,690 --> 00:04:17,380
pre-increment meant

00:04:20,840 --> 00:04:27,150
don't be Humpty Dumpty so engineering we

00:04:25,830 --> 00:04:28,890
learn from our mistakes and we learn

00:04:27,150 --> 00:04:30,450
from the mistakes of others I encourage

00:04:28,890 --> 00:04:32,700
you to look at your own code as you

00:04:30,450 --> 00:04:34,380
progress in your career try to find

00:04:32,700 --> 00:04:35,850
times that you made a choice it and work

00:04:34,380 --> 00:04:37,560
and see if you can learn from them as

00:04:35,850 --> 00:04:37,780
well thank you

00:04:37,560 --> 00:04:40,940
[Applause]

00:04:37,780 --> 00:04:40,940

YouTube URL: https://www.youtube.com/watch?v=iJ1rwgCI1Xc


