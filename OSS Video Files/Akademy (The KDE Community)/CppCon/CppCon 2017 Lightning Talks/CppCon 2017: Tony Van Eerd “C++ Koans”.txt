Title: CppCon 2017: Tony Van Eerd “C++ Koans”
Publication date: 2017-10-27
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,100 --> 00:00:05,160
Okay, there's seven koans, and they're short stories.

00:00:05,160 --> 00:00:06,560
You should get enlightenment at the end of them.

00:00:06,790 --> 00:00:08,639
This is — I'm not gonna explain.

00:00:08,640 --> 00:00:12,300
You can't explain koans to people; you just have to understand them yourselves.

00:00:12,300 --> 00:00:21,920
Usually they take an hour or more to figure out, but there's 83 people here, so between us all we should be able to do each one in less than a minute.

00:00:22,560 --> 00:00:26,760
Like I said, I don't do mutexes and stuff. Just yell out thoughts as soon as you get them,

00:00:26,760 --> 00:00:29,129
and then we'll all be enlightened at the end of each one.

00:00:30,340 --> 00:00:31,830
Okay.

00:00:31,830 --> 00:00:36,960
"Must do X first." But why? And Master says, "check git."

00:00:37,140 --> 00:00:42,420
And you spend a week looking through the archives, and you find nothing. Nothing explains that comment.

00:00:42,420 --> 00:00:44,559
And then you are enlightened.

00:00:44,559 --> 00:00:48,749
Some of you heard a few of these things before this week, but there's some new ones, too.

00:00:48,749 --> 00:00:52,220
So come on — does anyone understand? how did we get enlightened?

00:00:52,220 --> 00:00:56,760
This one's really hard because you actually need to spend the week going through the pain...

00:00:56,760 --> 00:01:02,580
So what would happen if you spent a week trying to find why this thing, this comment, is there? How would you feel?

00:01:03,940 --> 00:01:09,000
[FROM AUDIENCE] There's no reason! Okay, there's no reason. —Come on. We have to answer quick here.

00:01:09,000 --> 00:01:13,120
[FROM AUDIENCE] Historical reasons! There's historical reasons. Okay, what are they?

00:01:13,860 --> 00:01:16,520
[AUDIENCE] Someone got fired! Well yeah. Someone got fired. Yeah.

00:01:17,460 --> 00:01:21,280
[AUDIENCE] The history got trimmed. Yeah, that's the thing — you spend a whole week and can't find it.

00:01:21,310 --> 00:01:23,310
But now what's the answer? Where's the enlightenment?

00:01:23,439 --> 00:01:25,439
What do you learn from this?

00:01:25,439 --> 00:01:27,439
[AUDIENCE] Well, now you've finally read the code for once.

00:01:27,700 --> 00:01:30,080
Nope. Got to go on. Can't be enlightened.

00:01:30,080 --> 00:01:33,500
Lock-Free Master! We need a queue! This happened, actually.

00:01:33,760 --> 00:01:38,520
And I searched the codebase — I was the master in this case — not usually.

00:01:38,580 --> 00:01:41,960
And gave them a queue which wasn't lock-free, and said, "there you go."

00:01:44,100 --> 00:01:47,480
Anyone enlightened by that?

00:01:48,300 --> 00:01:50,180
Am I already like two minutes in?—

00:01:50,180 --> 00:01:55,760
"Ah, Master, explain the Rule of Zero." I tell him, "Study the pointers of masters Hinnant and Dimov."

00:01:56,020 --> 00:02:03,820
"But they don't follow the Rule of Zero." So why would you study those pointers for the Rule of Zero?

00:02:05,140 --> 00:02:10,820
There we go — enlightenment! If you use those pointers, YOU can follow the Rule of Zero. We get a winner.

00:02:10,820 --> 00:02:16,560
All right. Near sprint end, Master found them arguing O(n) versus O(log n) on some algorithm they were writing.

00:02:17,580 --> 00:02:22,220
These are all 140 characters — they have to have exactly 140 characters.

00:02:22,220 --> 00:02:24,120
I have to kind of add some words every now and then.

00:02:24,120 --> 00:02:26,840
So the master typed the solution — which was O(n^2).

00:02:26,940 --> 00:02:33,520
So one of the people left in disgust at the O(n^2); the other was enlightened.

00:02:33,520 --> 00:02:34,880
[AUDIENCE] The O(n^2) was the fastest one!

00:02:34,880 --> 00:02:37,720
No, the O(n^2) algorithm wasn't the fastest one.

00:02:38,040 --> 00:02:41,040
[AUDIENCE] n is 10! The "n" was 10? Maybe.

00:02:41,680 --> 00:02:44,100
It was near the end of the sprint. Does that help?

00:02:46,030 --> 00:02:48,330
Done now is more important? Yes. There we go.

00:02:48,330 --> 00:02:49,540
[AUDIENCE] This one's done, open a new bug.

00:02:49,540 --> 00:02:53,900
Yeah, just — Was this solution good enough? Did anyone measure yet? right?

00:02:55,780 --> 00:03:04,120
So the junior dev said, "I went through all the code and changed all our std::lists to std::vectors, because that's usually a good thing."

00:03:04,120 --> 00:03:07,380
But one crashed, and then the Master said, "Who is to blame for that?"

00:03:07,660 --> 00:03:12,960
Templates need concepts, and headers need headers.

00:03:14,680 --> 00:03:21,580
What does — why do templates need — How are templates and concepts related?

00:03:22,000 --> 00:03:27,400
What? come on, loud. They constrain? Yes, but there's another word I'm looking for.

00:03:28,120 --> 00:03:32,980
Requirements? Yes! Templates, concepts, requirements. Now what's the "headers and headers" part about?

00:03:33,660 --> 00:03:37,380
You have a header... that requires another header...

00:03:37,380 --> 00:03:43,340
that has dependencies... So what's this? What happened to that one line of code?

00:03:44,220 --> 00:03:48,780
When choosing a container, remember vector is best! Leave a comment to explain if you choose from the rest!

00:03:52,189 --> 00:03:58,479
I'll just tell you — the blame goes to the person who wrote code that used std::list and didn't explain why a std::list was necessary.

00:03:58,480 --> 00:04:02,340
There was a hidden requirement that wasn't mentioned.

00:04:02,860 --> 00:04:07,360
"Master, I fixed all our leaks by using shared_ptr everywhere."

00:04:07,360 --> 00:04:13,160
"When you lead a plowhorse, who else holds the reins?"

00:04:13,900 --> 00:04:15,900
Is that clear?

00:04:15,980 --> 00:04:16,960
[AUDIENCE] The horse!

00:04:17,060 --> 00:04:22,100
The horse holds the reins? No, no — well, yeah, I guess the horse does actually hold the reins on the other end. But that's not my question.

00:04:22,160 --> 00:04:27,020
I like that. There's often more enlightenment than I planned.

00:04:27,020 --> 00:04:30,600
So I'll let you guys think on that one...

00:04:30,600 --> 00:04:31,900
[AUDIENCE INAUDIBLE]

00:04:31,900 --> 00:04:37,220
shared_ptrs for ownership, thank you. We're on the right track...

00:04:37,220 --> 00:04:40,620
[AUDIENCE] If you've got a guy on the horse who is holding the reins to the horse, he's gonna run off with your horse.

00:04:40,620 --> 00:04:43,200
How many people are holding the reins when you're, you know, using a plowhorse?

00:04:43,200 --> 00:04:46,700
And how many people are holding the reins when we use a shared_ptr?

00:04:48,660 --> 00:04:50,180
[AUDIENCE] The tractor belongs to everybody.

00:04:50,180 --> 00:04:54,260
/me drops the mic. This is my favorite one.

00:04:54,780 --> 00:04:59,400
[LAUGHTER]

00:04:59,400 --> 00:05:08,480
[APPLAUSE]

00:05:08,480 --> 00:05:12,100

YouTube URL: https://www.youtube.com/watch?v=Ft3QSbdhP3s


