Title: CppCon 2017: Mikhail Matrosov “Refactor or die”
Publication date: 2017-10-28
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:01,400 --> 00:00:07,410
like ego so this talk is not actually a

00:00:04,710 --> 00:00:09,630
specific for C++ but what you're going

00:00:07,410 --> 00:00:12,480
to stand up and leave I don't think so

00:00:09,630 --> 00:00:15,330
so let's go on this little story for you

00:00:12,480 --> 00:00:17,070
for starter it was a beautiful morning

00:00:15,330 --> 00:00:19,859
in the office when I check out my email

00:00:17,070 --> 00:00:21,720
and found out that most of our tests for

00:00:19,859 --> 00:00:25,470
the way this nightly build was failed

00:00:21,720 --> 00:00:26,909
and I was like what I think we found out

00:00:25,470 --> 00:00:28,589
the community was causing the troubles

00:00:26,909 --> 00:00:30,989
and it turned out there is a open area

00:00:28,589 --> 00:00:31,380
code review for this commit to work on

00:00:30,989 --> 00:00:34,260
it

00:00:31,380 --> 00:00:38,930
that's actually a legendary review in

00:00:34,260 --> 00:00:43,129
our company it contains 94 files it has

00:00:38,930 --> 00:00:46,289
94 files it has a thousand of reviewers

00:00:43,129 --> 00:00:48,769
169 comments 26 hours spent reviewing

00:00:46,289 --> 00:00:52,140
and a beautiful title which Manchus

00:00:48,769 --> 00:00:58,079
bug-fixing improvements and big changes

00:00:52,140 --> 00:00:59,940
so it is like what very impressive so we

00:00:58,079 --> 00:01:02,010
know that's not how you do changes right

00:00:59,940 --> 00:01:03,420
so I'm just going to clarify why and

00:01:02,010 --> 00:01:05,640
what to do instead

00:01:03,420 --> 00:01:07,409
so I mentioned your change in the

00:01:05,640 --> 00:01:09,150
behavior of your little tiny wobbly

00:01:07,409 --> 00:01:11,220
function which changes the behavior of a

00:01:09,150 --> 00:01:12,570
class using this function you change the

00:01:11,220 --> 00:01:13,829
behavior of a library isn't this class

00:01:12,570 --> 00:01:15,210
to change the behavior application is

00:01:13,829 --> 00:01:17,250
this library to change the behavior of

00:01:15,210 --> 00:01:19,470
the user who uses your application to

00:01:17,250 --> 00:01:22,409
change the business process builds a top

00:01:19,470 --> 00:01:25,470
of this user so what you can see here is

00:01:22,409 --> 00:01:28,979
the impact of your single change and the

00:01:25,470 --> 00:01:30,869
impact is the risk and the risk is the

00:01:28,979 --> 00:01:33,149
probability of you introducing a bug

00:01:30,869 --> 00:01:34,680
while for the sake of this talk now to

00:01:33,149 --> 00:01:37,259
make things more dramatic and to clarify

00:01:34,680 --> 00:01:40,290
its meaning let's say that if you

00:01:37,259 --> 00:01:42,570
introduce a bug you die so you want to

00:01:40,290 --> 00:01:45,270
avoid both of these things like equally

00:01:42,570 --> 00:01:48,780
right so what happened you made a change

00:01:45,270 --> 00:01:50,729
which is observable on each level of the

00:01:48,780 --> 00:01:53,250
tyrick so this change actually has an

00:01:50,729 --> 00:01:55,320
unlimited impact this is a functional

00:01:53,250 --> 00:01:58,109
change so if you might change this

00:01:55,320 --> 00:02:00,509
observable only on several lower levels

00:01:58,109 --> 00:02:02,280
of the hierarchy it has a limited impact

00:02:00,509 --> 00:02:04,619
and this is a refactoring change and

00:02:02,280 --> 00:02:06,689
that risk for functional change is much

00:02:04,619 --> 00:02:09,690
more than a risk for refactoring change

00:02:06,689 --> 00:02:11,970
now let's use this information on this

00:02:09,690 --> 00:02:13,680
graph graphs are awesome right so on

00:02:11,970 --> 00:02:14,410
x-axis you have lines of code touched

00:02:13,680 --> 00:02:16,300
and on

00:02:14,410 --> 00:02:19,030
y-axis you have the probability of being

00:02:16,300 --> 00:02:22,450
dead after touching this line of code so

00:02:19,030 --> 00:02:27,670
now let's place our review from the

00:02:22,450 --> 00:02:30,880
example on this graph you're dead

00:02:27,670 --> 00:02:34,150
right it's not really gonna be doing

00:02:30,880 --> 00:02:37,050
first what what you need to do is to do

00:02:34,150 --> 00:02:40,030
a preliminary refactoring which touches

00:02:37,050 --> 00:02:42,040
many lines of code but which is less

00:02:40,030 --> 00:02:44,950
risk and after you are ready you

00:02:42,040 --> 00:02:47,290
actually do your risky change but which

00:02:44,950 --> 00:02:51,370
touching much less lines of code and in

00:02:47,290 --> 00:02:53,710
this case hopefully it was alive well

00:02:51,370 --> 00:02:56,650
tests immedi I have tests I'm not afraid

00:02:53,710 --> 00:02:59,410
of touching my code right wrong first of

00:02:56,650 --> 00:03:01,990
all tests failed okay but if you touch

00:02:59,410 --> 00:03:04,090
many lines of code what exactly did you

00:03:01,990 --> 00:03:06,670
do wrong where exactly is your mistake

00:03:04,090 --> 00:03:08,260
not not nothing

00:03:06,670 --> 00:03:10,060
not every test can help you with that

00:03:08,260 --> 00:03:12,910
then you never have hundred percent

00:03:10,060 --> 00:03:15,310
coverage right and finally it's much

00:03:12,910 --> 00:03:17,110
easier to check that nothing has changed

00:03:15,310 --> 00:03:20,260
and then to check that the change that

00:03:17,110 --> 00:03:22,780
was made are actually correct that's why

00:03:20,260 --> 00:03:24,459
it is much easier to write a test for

00:03:22,780 --> 00:03:27,610
refactoring because with refactoring you

00:03:24,459 --> 00:03:29,410
changed nothing so in a nutshell when

00:03:27,610 --> 00:03:31,750
I'm going to fix a bug

00:03:29,410 --> 00:03:33,790
first of all refactor your code in such

00:03:31,750 --> 00:03:36,700
a way that the bug is obvious and easy

00:03:33,790 --> 00:03:39,010
to fix and only after that fix it with

00:03:36,700 --> 00:03:40,600
as little changes as possible if you're

00:03:39,010 --> 00:03:42,640
going to implement a new feature first

00:03:40,600 --> 00:03:45,880
refactor your current architecture in

00:03:42,640 --> 00:03:48,070
such a way that feature fits smoothly in

00:03:45,880 --> 00:03:50,110
this new architecture and only after

00:03:48,070 --> 00:03:52,840
that implement your feature with as

00:03:50,110 --> 00:03:55,060
little changes as possible and of course

00:03:52,840 --> 00:03:55,930
don't forget to separate those into

00:03:55,060 --> 00:04:00,850
several commands

00:03:55,930 --> 00:04:02,590
speaking of commits I recommend to each

00:04:00,850 --> 00:04:05,770
commit to have a particular kind of

00:04:02,590 --> 00:04:08,770
change and these changes are usually

00:04:05,770 --> 00:04:10,480
qualifications of changes with limited

00:04:08,770 --> 00:04:13,030
and unlimited impact that we were

00:04:10,480 --> 00:04:15,100
talking about and I recommend each kind

00:04:13,030 --> 00:04:18,510
of change to be marked with its sound

00:04:15,100 --> 00:04:21,669
mark you place this mark in the commit

00:04:18,510 --> 00:04:23,950
comment and if you look at something

00:04:21,669 --> 00:04:24,930
like git log you immediately realize

00:04:23,950 --> 00:04:29,370
what your look

00:04:24,930 --> 00:04:31,530
for looking at sorry and these kinds of

00:04:29,370 --> 00:04:33,750
changes they map smoothly on somewhere

00:04:31,530 --> 00:04:36,870
versioning and last but not the least

00:04:33,750 --> 00:04:40,620
they required different attention from

00:04:36,870 --> 00:04:43,500
the reviewer and attention of reviewers

00:04:40,620 --> 00:04:47,310
the precious resource and usually you

00:04:43,500 --> 00:04:50,220
want to spare this so refactoring is

00:04:47,310 --> 00:04:53,690
great preliminary refactoring is even

00:04:50,220 --> 00:04:56,120
better on do refactoring be a nice guy

00:04:53,690 --> 00:04:57,480
just like this one

00:04:56,120 --> 00:05:00,639
[Applause]

00:04:57,480 --> 00:05:00,639

YouTube URL: https://www.youtube.com/watch?v=fzmjXK9JZ9o


