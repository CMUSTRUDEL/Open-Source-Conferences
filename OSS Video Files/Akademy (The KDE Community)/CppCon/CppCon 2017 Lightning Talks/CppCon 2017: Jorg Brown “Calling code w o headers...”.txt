Title: CppCon 2017: Jorg Brown “Calling code w o headers...”
Publication date: 2017-10-27
Playlist: CppCon 2017 Lightning Talks
Description: 
	“Calling code w/o headers - How to use code from a header you might not have"

http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:04,660 --> 00:00:12,400
hello so this is a fairly common problem

00:00:08,530 --> 00:00:13,960
I think with a fairly obvious solution

00:00:12,400 --> 00:00:17,110
let's say that there's some project out

00:00:13,960 --> 00:00:18,700
there monorail just to give you an

00:00:17,110 --> 00:00:20,380
example of contact let's say you work on

00:00:18,700 --> 00:00:22,329
an open source project and the thing you

00:00:20,380 --> 00:00:24,939
want to call is a function in another

00:00:22,329 --> 00:00:26,529
open source project so you don't

00:00:24,939 --> 00:00:28,300
necessarily have their headers around

00:00:26,529 --> 00:00:31,380
but you want to be able to provide a

00:00:28,300 --> 00:00:33,670
function that calls that other routine

00:00:31,380 --> 00:00:35,980
so the obvious way to do is just say

00:00:33,670 --> 00:00:38,110
well main space monorail st hash and

00:00:35,980 --> 00:00:39,550
you're gonna have you know a little

00:00:38,110 --> 00:00:41,590
routine called monorail hash that takes

00:00:39,550 --> 00:00:44,410
a private value passes it to monorail

00:00:41,590 --> 00:00:46,570
hash and returns resolved nice and fine

00:00:44,410 --> 00:00:49,840
except there are two things that will

00:00:46,570 --> 00:00:53,010
break you and that's if monorail hash

00:00:49,840 --> 00:00:55,750
happens to add an extra default argument

00:00:53,010 --> 00:00:57,820
anybody calling that after including the

00:00:55,750 --> 00:00:59,020
appropriate header will work fine but

00:00:57,820 --> 00:01:00,310
you won't because you're calling the

00:00:59,020 --> 00:01:02,470
function with the wrong signature that

00:01:00,310 --> 00:01:04,320
doesn't exist anymore the other thing is

00:01:02,470 --> 00:01:07,439
if they call they say you know using

00:01:04,320 --> 00:01:10,060
some other hash and some other namespace

00:01:07,439 --> 00:01:12,880
then again if you include the header

00:01:10,060 --> 00:01:14,890
it'll know to call legacy rail hash but

00:01:12,880 --> 00:01:20,799
not in your code you're calling into the

00:01:14,890 --> 00:01:23,500
wrong namespace so if you don't mind

00:01:20,799 --> 00:01:25,960
modifying collars you can do this what I

00:01:23,500 --> 00:01:27,610
think is the right way which is I make a

00:01:25,960 --> 00:01:30,130
function called call hash and make it

00:01:27,610 --> 00:01:31,930
much more generic and then anybody that

00:01:30,130 --> 00:01:34,330
used to call you know your class about

00:01:31,930 --> 00:01:36,820
monorail hash now calls the generic

00:01:34,330 --> 00:01:39,190
version call hash with a pointer to the

00:01:36,820 --> 00:01:41,950
monorail hash but number one is ugly

00:01:39,190 --> 00:01:44,229
number two which is actually it happened

00:01:41,950 --> 00:01:47,159
in my case that might involve changing a

00:01:44,229 --> 00:01:49,720
lot of collars which can be problematic

00:01:47,159 --> 00:01:53,850
so let's have some fun let's try to work

00:01:49,720 --> 00:01:55,930
around this you may have heard that when

00:01:53,850 --> 00:01:58,150
because template instantiation is

00:01:55,930 --> 00:02:00,549
delayed you can sometimes have functions

00:01:58,150 --> 00:02:02,799
inside of templates that call things

00:02:00,549 --> 00:02:04,840
that don't yet exist so you might think

00:02:02,799 --> 00:02:07,600
I'll just declare this with a default -

00:02:04,840 --> 00:02:08,979
template parameter and the answer is

00:02:07,600 --> 00:02:10,299
well that actually still doesn't work

00:02:08,979 --> 00:02:12,930
because it doesn't know about the

00:02:10,299 --> 00:02:17,439
definition of hash in monorail

00:02:12,930 --> 00:02:19,420
so we'll get a little bit more tricky

00:02:17,439 --> 00:02:22,030
we'll declare the name space and then

00:02:19,420 --> 00:02:25,299
call hash and that way we can just fall

00:02:22,030 --> 00:02:26,439
through on it this almost works however

00:02:25,299 --> 00:02:30,489
there are no arguments to other

00:02:26,439 --> 00:02:36,189
functions a hash that turn a template

00:02:30,489 --> 00:02:38,260
parameter so okay let's let's make it

00:02:36,189 --> 00:02:40,239
depend on a template parameter we'll

00:02:38,260 --> 00:02:42,040
just for the default programmers still

00:02:40,239 --> 00:02:44,590
be int and then cast a value to that

00:02:42,040 --> 00:02:47,620
then it can't determine the call to hash

00:02:44,590 --> 00:02:51,639
until monorail hash is called this

00:02:47,620 --> 00:02:54,430
actually works all by itself it and

00:02:51,639 --> 00:02:56,260
people can call it but only if the

00:02:54,430 --> 00:02:58,329
monorail headers included before years

00:02:56,260 --> 00:03:00,639
if the modern realism headers include f

00:02:58,329 --> 00:03:02,950
words you get this word message saying

00:03:00,639 --> 00:03:06,010
well hey a hash wasn't declared in the

00:03:02,950 --> 00:03:10,540
scope at the time that your class was

00:03:06,010 --> 00:03:13,629
here and to make things worse MSV c has

00:03:10,540 --> 00:03:19,389
no problem with this but clang GCC do

00:03:13,629 --> 00:03:22,389
and then this is the hack to get around

00:03:19,389 --> 00:03:24,400
that you declare a school helper

00:03:22,389 --> 00:03:26,940
function in namespace monorail whose

00:03:24,400 --> 00:03:30,549
only job is to take him int and then

00:03:26,940 --> 00:03:34,169
construct in the end when asked and that

00:03:30,549 --> 00:03:38,139
way this helper function invokes

00:03:34,169 --> 00:03:39,760
argument deduction then it finds hash in

00:03:38,139 --> 00:03:42,790
the monorail header this works no matter

00:03:39,760 --> 00:03:46,659
what order the monorail header is

00:03:42,790 --> 00:03:49,810
included and just for the record you

00:03:46,659 --> 00:03:52,049
really should do this but just for an

00:03:49,810 --> 00:03:55,590
introduction into how template

00:03:52,049 --> 00:03:55,590

YouTube URL: https://www.youtube.com/watch?v=-AZE25CJK-A


