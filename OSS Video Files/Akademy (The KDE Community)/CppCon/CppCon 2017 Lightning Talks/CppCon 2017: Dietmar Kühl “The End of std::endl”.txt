Title: CppCon 2017: Dietmar Kühl “The End of std::endl”
Publication date: 2017-10-22
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,000 --> 00:00:06,020
Hello! So, I implemented I/O streams, and I left it and I came across endl.

00:00:06,280 --> 00:00:08,820
Everybody knows about endl. Who has used endl?

00:00:09,600 --> 00:00:11,600
Everybody has. Who's still using it?

00:00:12,280 --> 00:00:14,309
Everybody is, no? But some people.

00:00:14,860 --> 00:00:18,449
So everybody knows how to use it std::cout endl.

00:00:18,449 --> 00:00:23,489
That's great. Actually that is not really the biggest problem, because cout is not

00:00:24,400 --> 00:00:30,269
buffered, as much, but what people normally see is when you write endl, it's a new line.

00:00:30,789 --> 00:00:34,379
It kind of is a new line, but it actually happens to be slightly more.

00:00:35,560 --> 00:00:37,960
That's basically a new line and a flush.

00:00:39,160 --> 00:00:40,780
There's a tenna –

00:00:40,780 --> 00:00:46,920
Belief that actually also endl does something to the new line and basically translates it into an end of line sequence.

00:00:48,220 --> 00:00:50,220
Bullshit, it doesn't!

00:00:50,340 --> 00:00:58,160
The translation from new line into new line carriage return or carriage return new line depending on which system you are.

00:00:58,480 --> 00:01:04,320
Does happen on the file system level. It's basically if you open a file in text mode on some platforms

00:01:04,320 --> 00:01:08,940
it does translate that to that and it has no business on that. That's actually

00:01:09,660 --> 00:01:12,100
basically the reason that exists, it's

00:01:12,780 --> 00:01:19,580
mimicking the I/O stream's _IOLBF setting, which you can set in the setvbuf() stuff or something like that.

00:01:20,940 --> 00:01:23,720
But it does do a new line and a flush, and

00:01:25,960 --> 00:01:28,290
basically, if you do that a lot, it's like

00:01:28,840 --> 00:01:30,680
having a van with a little bit of load

00:01:30,680 --> 00:01:34,400
and you shovel that over and over. What you actually want to do is

00:01:34,720 --> 00:01:37,880
you want to have a van, which is like that – it's fully loaded.

00:01:38,140 --> 00:01:41,189
It's a big pile of things and every time that van is full,

00:01:41,189 --> 00:01:47,669
then you want to shovel things out. It makes a massive difference. The difference is, on a simple test...

00:01:47,979 --> 00:01:53,008
This is writing a 80 character lines. I think it's a million files or lines or something like that.

00:01:54,670 --> 00:02:00,299
Once with end line, once without end line. It's a performance difference of factor of six.

00:02:01,060 --> 00:02:06,899
It's not six percent, it's a factor of six and that is massive. I've actually worked in multiple places where

00:02:07,500 --> 00:02:12,220
people have problems with iostream performance and it was actually entirely down to endl.

00:02:12,920 --> 00:02:16,900
Iostream is actually not fast. It's actually fairly fast, sorry it's not slow.

00:02:16,900 --> 00:02:21,200
It's actually fairly fast, but if you misuse it, it becomes slow, so.

00:02:22,840 --> 00:02:27,210
What you really want to do is, if you really mean to write a flush, say flush.

00:02:27,580 --> 00:02:34,290
The reason endl is not useful for that anymore is people use it as an end line character, but it's not an end line.

00:02:34,290 --> 00:02:38,819
It's an end line and flush, so you don't know what they mean. If you use flush, you're very obvious –

00:02:39,459 --> 00:02:41,759
what it does. If you really like the

00:02:42,620 --> 00:02:44,380
funny

00:02:44,380 --> 00:02:49,120
manipulator, it's very easy to create a manipulator for yourself, if you want to write nl.

00:02:49,620 --> 00:02:50,560
Here's the code.

00:02:50,560 --> 00:02:53,729
This is all it takes and you can write an nl and you get a different

00:02:54,120 --> 00:02:58,800
manipulator. Name it whatever you want. So that's a general approach for writing manipulators.

00:02:59,000 --> 00:03:00,500
It works nicely.

00:03:00,840 --> 00:03:05,560
So in summary, express intent and don't use endl – it makes your program slow.

00:03:05,820 --> 00:03:08,900
And to just round things off, a picture of a cat.

00:03:09,000 --> 00:03:11,000

YouTube URL: https://www.youtube.com/watch?v=6WeEMlmrfOI


