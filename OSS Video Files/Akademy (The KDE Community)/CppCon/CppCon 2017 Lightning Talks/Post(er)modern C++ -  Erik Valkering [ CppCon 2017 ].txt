Title: Post(er)modern C++ -  Erik Valkering [ CppCon 2017 ]
Publication date: 2017-10-28
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:03,440 --> 00:00:10,530
talk to us Eric okay thank you so I want

00:00:07,470 --> 00:00:13,950
to discuss a simple toy example let's

00:00:10,530 --> 00:00:16,380
say we have this piece of code we have a

00:00:13,950 --> 00:00:20,039
factor of strings we push back several

00:00:16,380 --> 00:00:24,119
values we reassign the value we iterate

00:00:20,039 --> 00:00:27,570
through it and we print them very simple

00:00:24,119 --> 00:00:30,359
now this will be the output then we have

00:00:27,570 --> 00:00:34,140
an exercise we want to print an

00:00:30,359 --> 00:00:37,430
exclamation mark every time we existed

00:00:34,140 --> 00:00:41,040
member function so how can we do that

00:00:37,430 --> 00:00:45,269
one solution for that is by using smart

00:00:41,040 --> 00:00:48,030
pointer for example we can define the

00:00:45,269 --> 00:00:51,269
class template inspector in which we

00:00:48,030 --> 00:00:53,580
simply implement the operator arrow and

00:00:51,269 --> 00:00:56,610
the dereference operator we print the

00:00:53,580 --> 00:01:01,140
exclamation mark and we forward to the

00:00:56,610 --> 00:01:04,199
member function that gets the results we

00:01:01,140 --> 00:01:06,990
need to update our code a bit so this

00:01:04,199 --> 00:01:10,289
becomes the inspector of the factor then

00:01:06,990 --> 00:01:13,770
we use the arrows okay with your

00:01:10,289 --> 00:01:19,049
references couple of asterisk no problem

00:01:13,770 --> 00:01:21,509
and it gets our output but I don't like

00:01:19,049 --> 00:01:26,429
this code there are several problems

00:01:21,509 --> 00:01:28,250
with it it's basically a mess we add a

00:01:26,429 --> 00:01:34,289
lot of noise to it

00:01:28,250 --> 00:01:37,530
this is quite a few codes a couple of

00:01:34,289 --> 00:01:39,479
lines so yeah imagine you have a code

00:01:37,530 --> 00:01:41,670
base of million lines of code and you

00:01:39,479 --> 00:01:45,600
need to propagate these changes

00:01:41,670 --> 00:01:48,810
everywhere that won't work and yeah it's

00:01:45,600 --> 00:01:50,700
totally not generic because if this type

00:01:48,810 --> 00:01:53,189
would be a normal vector then you have

00:01:50,700 --> 00:01:55,439
value semantics and suddenly we have

00:01:53,189 --> 00:01:59,340
pointer semantics so yeah that's not a

00:01:55,439 --> 00:02:02,130
solution I would really recommend so

00:01:59,340 --> 00:02:05,999
what do we want we don't want pointer

00:02:02,130 --> 00:02:08,270
semantics but reference semantics so we

00:02:05,999 --> 00:02:11,239
don't want to operate the error over

00:02:08,270 --> 00:02:13,939
arrow operator but yeah

00:02:11,239 --> 00:02:14,590
the dot operator if that would be

00:02:13,939 --> 00:02:17,530
possible

00:02:14,590 --> 00:02:21,439
well it seems there are several

00:02:17,530 --> 00:02:26,599
proposals in the make one of them is the

00:02:21,439 --> 00:02:29,930
operated dot yeah technically it's very

00:02:26,599 --> 00:02:33,290
similar to the error operator instead of

00:02:29,930 --> 00:02:34,609
returning a pointer a reference is

00:02:33,290 --> 00:02:36,560
returned sorry

00:02:34,609 --> 00:02:40,400
also here we print the exclamation mark

00:02:36,560 --> 00:02:44,269
we return the object and the mem

00:02:40,400 --> 00:02:48,109
function is called another proposal is

00:02:44,269 --> 00:02:50,569
smart references to delegation which

00:02:48,109 --> 00:02:53,480
works a little bit different you start

00:02:50,569 --> 00:02:55,370
inheriting from the delegate object so

00:02:53,480 --> 00:03:00,310
in this guy is the STD vector of strings

00:02:55,370 --> 00:03:04,340
you only inherit the public interface

00:03:00,310 --> 00:03:07,310
when you call a member function then it

00:03:04,340 --> 00:03:09,829
tries to convert it to the delegate

00:03:07,310 --> 00:03:13,040
object the string of the vector of

00:03:09,829 --> 00:03:14,840
strings so it calls that function and

00:03:13,040 --> 00:03:17,299
then it prints the exclamation mark and

00:03:14,840 --> 00:03:21,139
returns the object and forwards to the

00:03:17,299 --> 00:03:25,419
member function so that those are two

00:03:21,139 --> 00:03:30,019
proposals that will address our use case

00:03:25,419 --> 00:03:33,889
but these are proposals okay they have

00:03:30,019 --> 00:03:38,829
many use cases so it will solve a lot of

00:03:33,889 --> 00:03:41,959
problems like rebind herbal references

00:03:38,829 --> 00:03:44,299
decorators properties we can implement a

00:03:41,959 --> 00:03:47,750
lot of it and probably this list is

00:03:44,299 --> 00:03:51,319
incomplete and I expect a lot of people

00:03:47,750 --> 00:03:55,340
who have other use cases for it so yeah

00:03:51,319 --> 00:03:57,530
you can let your creativity go but when

00:03:55,340 --> 00:04:00,590
will it be available and the question is

00:03:57,530 --> 00:04:06,949
will it ever become available we will

00:04:00,590 --> 00:04:10,459
now get metaclasses 20 maybe not even 23

00:04:06,949 --> 00:04:13,459
we don't know and then it might not even

00:04:10,459 --> 00:04:16,759
be necessary this feature so what should

00:04:13,459 --> 00:04:19,370
we do should we wait for it because I

00:04:16,759 --> 00:04:21,799
would like to use this now but we don't

00:04:19,370 --> 00:04:23,410
have this language feature so I was

00:04:21,799 --> 00:04:27,280
thinking about this

00:04:23,410 --> 00:04:30,660
so I took the design of this paper and I

00:04:27,280 --> 00:04:34,390
thought can I do this in a library so I

00:04:30,660 --> 00:04:36,700
tried several things and I created this

00:04:34,390 --> 00:04:42,040
library the smart read library

00:04:36,700 --> 00:04:44,230
it's a header only Sara ever had library

00:04:42,040 --> 00:04:46,990
for creating these smart references and

00:04:44,230 --> 00:04:50,410
the only difference is three characters

00:04:46,990 --> 00:04:53,260
here I highlight it you inherit from a

00:04:50,410 --> 00:04:55,950
class which provides exactly design

00:04:53,260 --> 00:04:55,950
functionality

00:04:57,940 --> 00:05:04,660

YouTube URL: https://www.youtube.com/watch?v=Z9JabkvQSi0


