Title: CppCon 2017: Gaspar Azman “(don't) Copy Paste All The Things”
Publication date: 2017-10-27
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:06,560 --> 00:00:13,549
so I'm gosh but I'm your friendly

00:00:10,219 --> 00:00:18,980
neighborhood pedants today because

00:00:13,549 --> 00:00:22,010
yesterday we saw this with the advice

00:00:18,980 --> 00:00:25,640
that we should copy and paste this into

00:00:22,010 --> 00:00:26,180
every class ever because it's what you

00:00:25,640 --> 00:00:29,210
want

00:00:26,180 --> 00:00:38,630
it's what plants crave and it has

00:00:29,210 --> 00:00:41,329
electrolytes and this was me so I mean

00:00:38,630 --> 00:00:46,340
we with a few changes this is actually

00:00:41,329 --> 00:00:49,340
fine that is if we add well please

00:00:46,340 --> 00:00:52,160
pretend that the move constructor is

00:00:49,340 --> 00:00:55,969
non-trivial so if we add these no

00:00:52,160 --> 00:00:59,180
accepts which are actually necessary and

00:00:55,969 --> 00:01:03,199
those things which strictly are not but

00:00:59,180 --> 00:01:08,570
will save your life and therefore this

00:01:03,199 --> 00:01:10,880
is correct this this is relatively safe

00:01:08,570 --> 00:01:12,560
to copy/paste because it will break if

00:01:10,880 --> 00:01:14,140
you do something wrong but then of

00:01:12,560 --> 00:01:21,500
course we all know people who will just

00:01:14,140 --> 00:01:25,689
delete the static assert so because

00:01:21,500 --> 00:01:25,689
without no accept exceptions do happen

00:01:25,790 --> 00:01:34,130
so the fun case number one is the

00:01:29,479 --> 00:01:35,900
throwing destructor of course now don't

00:01:34,130 --> 00:01:40,009
do this but sometimes you've got to do

00:01:35,900 --> 00:01:44,060
this so this is the our unchanged

00:01:40,009 --> 00:01:45,920
suggested move constructor and sorry

00:01:44,060 --> 00:01:49,490
like obviously this is not what you

00:01:45,920 --> 00:01:51,770
would do but somewhere along the line

00:01:49,490 --> 00:01:53,960
this might end up happening so this is

00:01:51,770 --> 00:01:59,810
for obvious in this sake so our test

00:01:53,960 --> 00:02:01,460
driver here is just this main and we

00:01:59,810 --> 00:02:04,180
want to catch this exception because we

00:02:01,460 --> 00:02:08,390
know that it's gonna happen right and

00:02:04,180 --> 00:02:10,580
that is in fact what happens we call

00:02:08,390 --> 00:02:14,090
operator movies

00:02:10,580 --> 00:02:16,970
and that calls the destructor and that

00:02:14,090 --> 00:02:21,530
throws and that unwinds the stack and

00:02:16,970 --> 00:02:26,240
Wade that throws and that's what

00:02:21,530 --> 00:02:28,640
actually happens which means we didn't

00:02:26,240 --> 00:02:31,580
actually catch the exception that we

00:02:28,640 --> 00:02:37,340
meant to catch and of course this would

00:02:31,580 --> 00:02:39,860
never pass code review right so of

00:02:37,340 --> 00:02:41,540
course the next fun case is exceptional

00:02:39,860 --> 00:02:44,810
construction which is slightly less

00:02:41,540 --> 00:02:47,720
contrived let's say we have this pointer

00:02:44,810 --> 00:02:52,970
which with a never empty guarantee this

00:02:47,720 --> 00:02:56,150
happens because we do construct it in

00:02:52,970 --> 00:02:58,100
every constructor but please pretend

00:02:56,150 --> 00:03:00,530
that's in the initializer list below

00:02:58,100 --> 00:03:02,870
because I just needed to insert that

00:03:00,530 --> 00:03:07,310
throw because bad Alex do happen but not

00:03:02,870 --> 00:03:09,620
always you know who did test we even

00:03:07,310 --> 00:03:11,390
haven't know except destructor and we

00:03:09,620 --> 00:03:16,280
clean up like good citizen like what

00:03:11,390 --> 00:03:20,450
could possibly go wrong here and we have

00:03:16,280 --> 00:03:22,280
this copy pasted move constructor well

00:03:20,450 --> 00:03:27,230
thankfully we were lucky and used

00:03:22,280 --> 00:03:30,019
address sanitizer because by the same

00:03:27,230 --> 00:03:34,760
mechanism as before except a few

00:03:30,019 --> 00:03:37,940
instructions later we end up double

00:03:34,760 --> 00:03:44,110
freeing which silently corrupts the heap

00:03:37,940 --> 00:03:49,570
and then makes your cat pregnant so

00:03:44,110 --> 00:03:49,570

YouTube URL: https://www.youtube.com/watch?v=VE8GnPg3q5I


