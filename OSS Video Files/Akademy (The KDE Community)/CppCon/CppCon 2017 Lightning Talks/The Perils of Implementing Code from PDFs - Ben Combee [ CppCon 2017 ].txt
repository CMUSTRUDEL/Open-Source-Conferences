Title: The Perils of Implementing Code from PDFs - Ben Combee [ CppCon 2017 ]
Publication date: 2017-10-22
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:00,269 --> 00:00:02,269
Hello everyone

00:00:02,620 --> 00:00:07,230
I'm Ben. I work on a lot of different streaming technologies at Roku.

00:00:07,899 --> 00:00:14,579
All sorts of stuff for our Smart TV platform. We have an office here in Austin, Texas, and we use lots of C++ in our code.

00:00:15,670 --> 00:00:18,809
So this talk, like every good lightning talk, started with a tweet.

00:00:19,689 --> 00:00:26,159
"Error: stray '\342' in program". This is what happens when you copy and paste from the h.265 spec.

00:00:26,800 --> 00:00:33,750
So, you have to ask why am I copying from this? Well, part of my job is dealing with a lot of closed captions.

00:00:34,780 --> 00:00:37,200
h.265 is the spec for 4k video.

00:00:38,170 --> 00:00:43,440
When you're doing closed captions, you have to get the order of the pictures right or else your captions look like

00:00:43,600 --> 00:00:45,840
"hili tkes" instead of "like this"

00:00:46,239 --> 00:00:50,849
This is a problem, which hopefully no one out there ever sees because we fix it before it gets to you

00:00:53,170 --> 00:00:57,780
The h.265 spec, much like the C++ spec, is a very complex beast.

00:00:58,540 --> 00:01:03,540
A lot of very smart PhD's working on this and

00:01:03,700 --> 00:01:07,429
it seems like their thought process is basically. I'm going to write all this code in C.

00:01:07,429 --> 00:01:08,700
Oh! I have to make it English.

00:01:08,700 --> 00:01:10,700
Let's convert it to English

00:01:11,860 --> 00:01:15,269
So, here's a quote from a section that I was having to deal with

00:01:16,420 --> 00:01:23,250
slice_pic_order_count_lsb specifies the picture count modulo MaxPicOrderCntLsb... okay. I'm getting tired reading this.

00:01:23,250 --> 00:01:25,250
I'll come back to this in a moment.

00:01:25,689 --> 00:01:29,309
So there's about 600 pages of this in the spec document.

00:01:30,220 --> 00:01:34,229
There's some tables. There are some nice figures, but it's a whole lot to deal with

00:01:34,840 --> 00:01:36,840
Fortunately I didn't have to deal with all of it.

00:01:36,880 --> 00:01:41,140
The general algorithm here is you go through, you find the data structures,

00:01:41,140 --> 00:01:46,140
you paste it into your editor, you start converting it back from this English-like form into code.

00:01:46,380 --> 00:01:51,580
Basically, it's a random access document; things get mentioned in one place,

00:01:51,610 --> 00:01:56,320
then get mentioned lots of other places and you have to find that one place to figure out.

00:01:56,320 --> 00:01:59,000
It kinda turns into this giant dependency graph.

00:01:59,000 --> 00:02:04,020
You know, kinda, have to build up. Okay. Do I resolve everything? It's like you're a human makefile at this point.

00:02:04,840 --> 00:02:10,460
so I get to this point and I compile and I get the '342' error.

00:02:10,920 --> 00:02:13,340
So some of you might know where the punch line is here.

00:02:14,080 --> 00:02:21,330
It's like, okay, what is this problem 342? Oh? That's in octal, OK, obviously convert that to hex and, wait...

00:02:22,090 --> 00:02:27,509
Where'd I get a circumflex a from? That's nowhere in the document. My code had a dash in it.

00:02:28,270 --> 00:02:35,430
Let me to take you back to the previous thing. If you look there in the max_pic_order_cnt_lsb - 1.

00:02:35,710 --> 00:02:37,380
That's where it came from

00:02:37,380 --> 00:02:38,900
Yes

00:02:39,120 --> 00:02:42,500
So, why did this is not match up?

00:02:42,940 --> 00:02:45,029
UTF-8! Thank you, Kernighan.

00:02:46,200 --> 00:02:54,560
Hyphen is Unicode U+2010. It's represented in 3 bytes and GCC doesn't understand UTF-8.

00:02:54,560 --> 00:02:58,080
It will gladly take it in comments and all, but if you try to use it, it goes 'ahh!'.

00:02:59,410 --> 00:03:02,730
So yeah, this was fairly easy to fix once I figured it out

00:03:03,550 --> 00:03:10,320
In my research I found lots of other characters to look for: curly quotes, single quotes, em dashes and en dashes.

00:03:10,690 --> 00:03:14,400
If you look at the end of the line with non-breaking spaces, I listed them all for you.

00:03:16,090 --> 00:03:20,160
The important thing is just be careful if ever someone edits your code in Microsoft Word

00:03:21,100 --> 00:03:26,820
None of you would ever do that, but I definitely have had JSON files sent back to me that someone edited in Word. It's a bad thing.

00:03:28,300 --> 00:03:31,410
In the end stray characters was just a very small problem.

00:03:31,780 --> 00:03:35,429
Getting the code working in a final form was a big thing.

00:03:35,590 --> 00:03:41,910
But it's working! We now have captions going for 4k content, and if you want to know more about the kind of fun stuff

00:03:41,910 --> 00:03:46,980
we're solving in C++ at Roku, please catch me in all the various usual channels: Slack and Twitter

00:03:47,590 --> 00:03:49,590

YouTube URL: https://www.youtube.com/watch?v=8KO0LobHZvY


