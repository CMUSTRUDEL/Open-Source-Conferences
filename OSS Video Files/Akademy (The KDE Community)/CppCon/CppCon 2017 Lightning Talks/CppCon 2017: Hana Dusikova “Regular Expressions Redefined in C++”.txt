Title: CppCon 2017: Hana Dusikova “Regular Expressions Redefined in C++”
Publication date: 2017-10-22
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:06,299
hello Esther day I was asked to do this

00:00:03,659 --> 00:00:08,790
lightning talk about too much personal

00:00:06,299 --> 00:00:13,230
projects it's about their lower

00:00:08,790 --> 00:00:16,430
expressions requires portions I think

00:00:13,230 --> 00:00:20,990
everybody here know how to write them

00:00:16,430 --> 00:00:24,000
yeah they are easy to write sometimes

00:00:20,990 --> 00:00:26,010
but I notice that usually your

00:00:24,000 --> 00:00:29,369
expressions in code it doesn't change

00:00:26,010 --> 00:00:32,160
much usually have only one in code in

00:00:29,369 --> 00:00:33,930
coat and it's done and if it's there if

00:00:32,160 --> 00:00:36,750
you are not too doing some text editor

00:00:33,930 --> 00:00:44,129
or something different something similar

00:00:36,750 --> 00:00:47,460
so by we are having started a string or

00:00:44,129 --> 00:00:50,489
different string representation of

00:00:47,460 --> 00:00:53,910
regular expression and their graduation

00:00:50,489 --> 00:00:55,770
are interpreted we have programming in

00:00:53,910 --> 00:01:03,210
C++ we don't like interpreted languages

00:00:55,770 --> 00:01:06,000
and it is usually so you can avoid this

00:01:03,210 --> 00:01:09,119
interpretation or by or I think you're

00:01:06,000 --> 00:01:14,450
all finished automata or or finish the

00:01:09,119 --> 00:01:18,119
automata or you can use some library

00:01:14,450 --> 00:01:22,409
anyway oh there is a quiet person I

00:01:18,119 --> 00:01:25,830
think everybody understands and I was

00:01:22,409 --> 00:01:29,220
thinking that it will it'll be nice to

00:01:25,830 --> 00:01:32,189
work with expression like with other

00:01:29,220 --> 00:01:34,590
types because every expression is doing

00:01:32,189 --> 00:01:41,640
something different so I did something

00:01:34,590 --> 00:01:47,430
like this it's exactly the same you can

00:01:41,640 --> 00:01:52,110
do things like this it's done during

00:01:47,430 --> 00:01:56,070
compile time optimist I can do a lot of

00:01:52,110 --> 00:01:59,640
things with it but you can do something

00:01:56,070 --> 00:02:01,469
like this you can take part of your

00:01:59,640 --> 00:02:06,390
expression and store it somewhere else

00:02:01,469 --> 00:02:12,660
and use on lot of places and you can do

00:02:06,390 --> 00:02:15,330
even things like this it's very easy

00:02:12,660 --> 00:02:17,070
but my friends and my colleagues doesn't

00:02:15,330 --> 00:02:19,200
like the syntax because they they are

00:02:17,070 --> 00:02:20,520
used to to all things and honorable

00:02:19,200 --> 00:02:26,130
expression in all the ways

00:02:20,520 --> 00:02:28,110
so yeah but here that is a proposal

00:02:26,130 --> 00:02:30,870
I don't know actual style but it's

00:02:28,110 --> 00:02:36,590
implemented in clunk and GCC which

00:02:30,870 --> 00:02:42,320
allows you to this effector this and

00:02:36,590 --> 00:02:45,660
actually it this I write a loved one or

00:02:42,320 --> 00:02:48,570
parser which transform this string into

00:02:45,660 --> 00:02:51,300
exactly the same type and if you provide

00:02:48,570 --> 00:02:56,670
me grammatic grammars for Jason I

00:02:51,300 --> 00:03:01,830
comparison there is an example here is a

00:02:56,670 --> 00:03:05,180
program I try to minimize a code and use

00:03:01,830 --> 00:03:08,130
boots because I don't want to use some

00:03:05,180 --> 00:03:10,350
streams they are regenerating very big

00:03:08,130 --> 00:03:14,420
goal and this is translated and

00:03:10,350 --> 00:03:17,520
optimized into this it's only as I think

00:03:14,420 --> 00:03:19,500
78 instruction no recursion and only one

00:03:17,520 --> 00:03:22,950
only two cause at the end if you are

00:03:19,500 --> 00:03:26,580
printing calling BOTS more information

00:03:22,950 --> 00:03:28,440
you can find on my web page and that's

00:03:26,580 --> 00:03:34,419
all and thank you

00:03:28,440 --> 00:03:34,419

YouTube URL: https://www.youtube.com/watch?v=3WGsN_Hp9QY


