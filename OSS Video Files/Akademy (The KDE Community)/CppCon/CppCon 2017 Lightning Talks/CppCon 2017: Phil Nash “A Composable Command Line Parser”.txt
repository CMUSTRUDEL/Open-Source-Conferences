Title: CppCon 2017: Phil Nash “A Composable Command Line Parser”
Publication date: 2017-10-27
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:05,560 --> 00:00:10,540
so what does composability you have to

00:00:08,110 --> 00:00:11,770
do we've come online pausing or will

00:00:10,540 --> 00:00:14,379
answer that question at the moment but

00:00:11,770 --> 00:00:18,250
first another question who here is

00:00:14,379 --> 00:00:19,740
actually used to catch so painful that's

00:00:18,250 --> 00:00:22,420
good the rest of you should be ashamed

00:00:19,740 --> 00:00:24,840
if you have used it you'll know that it

00:00:22,420 --> 00:00:27,820
has a fairly rich come online interface

00:00:24,840 --> 00:00:29,710
you can see there that's lots of options

00:00:27,820 --> 00:00:31,870
will nicely formatted in the usage

00:00:29,710 --> 00:00:34,329
strings even with some nice column

00:00:31,870 --> 00:00:36,250
wrapping on the right hand side it

00:00:34,329 --> 00:00:39,820
wasn't always that way fact if we look

00:00:36,250 --> 00:00:42,699
at a brief timeline okay though right

00:00:39,820 --> 00:00:44,890
the start just had a very basic ad hoc

00:00:42,699 --> 00:00:46,629
come online powers are just reference to

00:00:44,890 --> 00:00:49,420
our geography directly with some string

00:00:46,629 --> 00:00:51,100
matching if simple but he worked and of

00:00:49,420 --> 00:00:53,829
course over time they did more and more

00:00:51,100 --> 00:00:55,960
things more options string conversions

00:00:53,829 --> 00:00:58,569
error handling and those use of strings

00:00:55,960 --> 00:01:00,489
became more and more general to the

00:00:58,569 --> 00:01:02,710
point that actually found that I had a

00:01:00,489 --> 00:01:07,510
library within a library so even the

00:01:02,710 --> 00:01:09,430
libraries composable so what I did was I

00:01:07,510 --> 00:01:12,360
split that library out called it Clara

00:01:09,430 --> 00:01:14,409
for come online argument arranger and

00:01:12,360 --> 00:01:16,950
put that up on github as a separate

00:01:14,409 --> 00:01:19,540
library but I had a couple of problems

00:01:16,950 --> 00:01:22,750
one of which was that it was my catch

00:01:19,540 --> 00:01:24,670
itself constrained to C++ 98 I had a few

00:01:22,750 --> 00:01:26,110
limitations and a couple of sort of

00:01:24,670 --> 00:01:28,780
slightly dead end design decisions that

00:01:26,110 --> 00:01:32,380
meant to go back and revisit so

00:01:28,780 --> 00:01:35,140
eventually with catch two now imminently

00:01:32,380 --> 00:01:37,180
out really based on C++ 11 I took the

00:01:35,140 --> 00:01:41,409
opportunity to rewrite Clara from the

00:01:37,180 --> 00:01:44,979
ground up with C++ 11 but also revolving

00:01:41,409 --> 00:01:46,500
around this idea of composability so

00:01:44,979 --> 00:01:50,109
what does that really mean in practice

00:01:46,500 --> 00:01:54,789
let's take a look an example so this is

00:01:50,109 --> 00:01:58,179
a single option parser so despite a

00:01:54,789 --> 00:02:00,570
variable name there - - that variable

00:01:58,179 --> 00:02:02,770
combined to a variable or a lambda

00:02:00,570 --> 00:02:04,479
you've got the the usage string

00:02:02,770 --> 00:02:06,039
documentation in there and the options

00:02:04,479 --> 00:02:08,320
and cells so it's sort of like a little

00:02:06,039 --> 00:02:10,570
mini DSL but this is a complete

00:02:08,320 --> 00:02:13,330
standalone parser you can use this to

00:02:10,570 --> 00:02:16,120
power straight from accion on V you pass

00:02:13,330 --> 00:02:17,390
them in at the top by running them free

00:02:16,120 --> 00:02:20,990
a very simple lack so that

00:02:17,390 --> 00:02:24,200
lazily tokenizing the arguments and then

00:02:20,990 --> 00:02:26,870
what that returns is the series of

00:02:24,200 --> 00:02:29,210
remaining tokens and status to say

00:02:26,870 --> 00:02:31,190
whether there were there was an error

00:02:29,210 --> 00:02:34,070
and if there were was what the errors

00:02:31,190 --> 00:02:36,020
were and of course you can you can

00:02:34,070 --> 00:02:38,480
create additional pauses for additional

00:02:36,020 --> 00:02:41,000
options so here's another one

00:02:38,480 --> 00:02:41,750
once you've got more than one this array

00:02:41,000 --> 00:02:44,690
gets interesting

00:02:41,750 --> 00:02:47,030
you can then compose them by using in

00:02:44,690 --> 00:02:49,280
this case the pipe operator this is

00:02:47,030 --> 00:02:50,900
where the magic happens because remember

00:02:49,280 --> 00:02:53,180
I said that the the first option will

00:02:50,900 --> 00:02:55,190
return the remaining tokens so within

00:02:53,180 --> 00:02:57,650
the operator if there are no errors it

00:02:55,190 --> 00:03:00,440
will pass those tokens on to the next

00:02:57,650 --> 00:03:02,750
part so it's a bit of a monadic bind

00:03:00,440 --> 00:03:06,200
yeah so again you're now left with a

00:03:02,750 --> 00:03:07,520
combined part and of course we can I can

00:03:06,200 --> 00:03:11,480
do away with the intermediate variables

00:03:07,520 --> 00:03:12,950
just have a nice declarative set up off

00:03:11,480 --> 00:03:15,050
of your pauses and we can easily add

00:03:12,950 --> 00:03:16,310
more this is an argument rather than an

00:03:15,050 --> 00:03:18,650
option but it's basically the same sort

00:03:16,310 --> 00:03:21,200
of thing in fact this is exactly what

00:03:18,650 --> 00:03:23,570
catch no does this is the complaint

00:03:21,200 --> 00:03:26,000
command-line specification for catch

00:03:23,570 --> 00:03:27,920
it's all very regular and neat and an

00:03:26,000 --> 00:03:30,489
easy to follow you can see at the end

00:03:27,920 --> 00:03:33,860
there does return that combined part

00:03:30,489 --> 00:03:35,690
which is all well and good but what's

00:03:33,860 --> 00:03:38,870
the actual benefit to doing it this way

00:03:35,690 --> 00:03:41,720
what do we get out of it well if you're

00:03:38,870 --> 00:03:44,690
a user of catch you can clear your own

00:03:41,720 --> 00:03:46,190
main and the bit in the bit of

00:03:44,690 --> 00:03:49,670
highlighted code there what you might

00:03:46,190 --> 00:03:51,170
add to compose better command-line

00:03:49,670 --> 00:03:53,570
powers at the catch house and sessions

00:03:51,170 --> 00:03:55,610
what CLI with your own one very very

00:03:53,570 --> 00:03:57,140
simple it's read your own binding to

00:03:55,610 --> 00:03:59,720
your own variables and then you just

00:03:57,140 --> 00:04:01,910
pass that back it's a catch and it will

00:03:59,720 --> 00:04:03,410
use it to produce usage strings to pass

00:04:01,910 --> 00:04:07,250
the command-line into your variable

00:04:03,410 --> 00:04:08,480
where you can immediately use it and if

00:04:07,250 --> 00:04:11,120
you look at the beauty of string

00:04:08,480 --> 00:04:12,170
produced you can see the additional one

00:04:11,120 --> 00:04:14,230
ended on the end there

00:04:12,170 --> 00:04:16,880
and if you have your own applications

00:04:14,230 --> 00:04:18,109
with various content components that

00:04:16,880 --> 00:04:20,090
don't necessarily need to know about

00:04:18,109 --> 00:04:23,090
each other they can all expose their own

00:04:20,090 --> 00:04:25,610
command-line posit or partial pauses and

00:04:23,090 --> 00:04:28,400
they can then be composed at a top level

00:04:25,610 --> 00:04:30,349
and that they will benefit from that so

00:04:28,400 --> 00:04:30,919
that's been a composable command-line

00:04:30,349 --> 00:04:32,720
parser

00:04:30,919 --> 00:04:34,729
I've been Phil nurse you can reach me in

00:04:32,720 --> 00:04:37,370
these places or on the jetbrains booth

00:04:34,729 --> 00:04:40,129
tomorrow and also doing a talk on Friday

00:04:37,370 --> 00:04:42,300
on persistent hash trees so be there

00:04:40,129 --> 00:04:46,429
thank you

00:04:42,300 --> 00:04:46,429

YouTube URL: https://www.youtube.com/watch?v=Od4bjLfwI-A


