Title: CppCon 2015: Titus Winters "Lessons in Sustainability...”
Publication date: 2015-10-13
Playlist: CppCon 2015
Description: 
	http://www.Cppcon.org
—
Lessons in Sustainability: How to Maintain a C++ Codebase for Decades
--
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015
—
Google maintains (we believe) the largest monolithic C++ codebase in the world with over 100M lines of C++ code. Early commits to this repository date back to the late 1990s. About 4000 engineers submit at least one change in C++ every week. We’ve learned a few things about what it takes to maintain a codebase at this scale.

In this talk I’ll present some of the lessons we’ve learned over the years with respect to policies, technology, education, design, and maintenance of a long-lived monolithic codebase.
— 
Titus Winters has spent the past 4 years working on Google's core C++ libraries. He's particularly interested in issues of large scale software engineer and codebase maintenance: how do we keep a codebase of over 100M lines of code consistent and flexible for the next decade? Along the way he has helped Google teams pioneer techniques to perform automated code transformations on a massive scale, and helps maintain the Google C++ Style Guide.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,000 --> 00:00:04,350
good morning everyone and welcome it's a

00:00:02,580 --> 00:00:04,890
little early it's a little late in the

00:00:04,350 --> 00:00:07,290
week

00:00:04,890 --> 00:00:10,800
glad you were all able to make wake up

00:00:07,290 --> 00:00:15,480
for this I'm Titus winters I'm the head

00:00:10,800 --> 00:00:18,449
of C++ libraries at Google my team has

00:00:15,480 --> 00:00:21,539
been Gavin Cox here you've seen C++

00:00:18,449 --> 00:00:23,820
libraries team the kind of very brief

00:00:21,539 --> 00:00:27,689
overview of why I'm able to speak about

00:00:23,820 --> 00:00:29,880
these things we have about 5,000

00:00:27,689 --> 00:00:33,600
engineers that will make a change to our

00:00:29,880 --> 00:00:35,309
C++ code base this week our C++ code

00:00:33,600 --> 00:00:38,219
base is somewhere north of a hundred

00:00:35,309 --> 00:00:40,739
million lines of code and there are

00:00:38,219 --> 00:00:47,850
files in that code base that are now

00:00:40,739 --> 00:00:50,190
applying for college so we have some

00:00:47,850 --> 00:00:52,140
issues in scaling and thinking about how

00:00:50,190 --> 00:00:57,750
to how to manage all of this for the

00:00:52,140 --> 00:01:00,390
long term so disclaimer everything in

00:00:57,750 --> 00:01:03,600
here is based on my experiences over the

00:01:00,390 --> 00:01:06,810
last four and a half years of trying to

00:01:03,600 --> 00:01:09,810
figure out how to make sure that this

00:01:06,810 --> 00:01:14,130
massive ship stays afloat and misses all

00:01:09,810 --> 00:01:15,630
of the icebergs the comments and the

00:01:14,130 --> 00:01:17,720
suggestions in here are certainly not

00:01:15,630 --> 00:01:20,100
official Google company guidance because

00:01:17,720 --> 00:01:23,490
we're kind of making this up as we go

00:01:20,100 --> 00:01:26,610
along but they are good suggestions and

00:01:23,490 --> 00:01:29,390
you should listen to me and I will start

00:01:26,610 --> 00:01:33,090
with a very kind of abstract question a

00:01:29,390 --> 00:01:38,310
sales pitch for the audience and it is

00:01:33,090 --> 00:01:42,600
this I am in possession of a tool it is

00:01:38,310 --> 00:01:46,079
of course clang based that if I sell

00:01:42,600 --> 00:01:50,040
this tool to you you will have no

00:01:46,079 --> 00:01:53,909
worries about your C++ code base in

00:01:50,040 --> 00:01:56,490
perpetuity I will give you the following

00:01:53,909 --> 00:02:01,140
deal if the audience pulls all of their

00:01:56,490 --> 00:02:06,210
cash and gets me five million dollars I

00:02:01,140 --> 00:02:09,450
will sell you exclusive resell rights to

00:02:06,210 --> 00:02:12,910
this tool right if this is advert

00:02:09,450 --> 00:02:15,250
working as advertised I'm

00:02:12,910 --> 00:02:18,040
really confident that you can make your

00:02:15,250 --> 00:02:22,230
money back on this right who is

00:02:18,040 --> 00:02:29,020
interested some hands go up

00:02:22,230 --> 00:02:32,110
right nope US dollars some hands go up

00:02:29,020 --> 00:02:34,120
right the hands that don't go up is this

00:02:32,110 --> 00:02:37,290
because of the cost that I am

00:02:34,120 --> 00:02:39,880
advertising this for or is this because

00:02:37,290 --> 00:02:44,770
you don't believe that such a thing can

00:02:39,880 --> 00:02:47,130
exist I want 5 million because I can

00:02:44,770 --> 00:02:51,220
live on a beach somewhere nice in

00:02:47,130 --> 00:02:56,140
perpetuity for that I won't tell you

00:02:51,220 --> 00:02:58,390
which beach because as I'm sure you've

00:02:56,140 --> 00:03:01,690
kind of started to think like tits to

00:02:58,390 --> 00:03:04,060
realize right such a tool can't possibly

00:03:01,690 --> 00:03:06,760
exist right there's not a silver bullet

00:03:04,060 --> 00:03:09,850
here so if you come to the talk like

00:03:06,760 --> 00:03:10,780
looking for one slide that answers your

00:03:09,850 --> 00:03:14,970
question

00:03:10,780 --> 00:03:14,970
sorry clearly not gonna happen

00:03:15,420 --> 00:03:21,100
first off like how would such a tool

00:03:18,730 --> 00:03:23,140
what are you even measuring when you're

00:03:21,100 --> 00:03:24,580
talking about sustainability and it's

00:03:23,140 --> 00:03:27,220
actually going to take me a few minutes

00:03:24,580 --> 00:03:29,800
to get to being able to define what I

00:03:27,220 --> 00:03:32,800
think is a reasonable definition for

00:03:29,800 --> 00:03:34,480
sustainability so bear with me okay the

00:03:32,800 --> 00:03:36,490
first thing and I've mentioned this in a

00:03:34,480 --> 00:03:38,230
couple other talks the first thing that

00:03:36,490 --> 00:03:40,350
I really need you to think about is what

00:03:38,230 --> 00:03:45,070
is the expected lifespan of your code

00:03:40,350 --> 00:03:47,739
right because that is not a given that

00:03:45,070 --> 00:03:49,510
varies a lot depending on what sort of

00:03:47,739 --> 00:03:52,480
project you're working on alright the

00:03:49,510 --> 00:03:56,050
expected lifespan for code on a slide

00:03:52,480 --> 00:03:58,630
deck you know the weeks that you prepped

00:03:56,050 --> 00:04:00,130
that talk and then maybe you polish it

00:03:58,630 --> 00:04:02,430
up again if you run that talk again

00:04:00,130 --> 00:04:06,070
right the expected life span of a

00:04:02,430 --> 00:04:09,190
academic project is the three weeks that

00:04:06,070 --> 00:04:12,370
you were assigned that task expected

00:04:09,190 --> 00:04:15,430
lifespan of a startup you got an average

00:04:12,370 --> 00:04:17,919
of like two years right most startups

00:04:15,430 --> 00:04:19,890
die sorry to tell you all right the

00:04:17,919 --> 00:04:22,060
expected lifespan for Google's codebase

00:04:19,890 --> 00:04:25,340
right this is why I'm worried about

00:04:22,060 --> 00:04:29,440
things on that decades sort of timeframe

00:04:25,340 --> 00:04:29,440
right I don't think we're going anywhere

00:04:29,830 --> 00:04:36,169
then a secondary question and it seems

00:04:33,230 --> 00:04:39,130
kind of a non sequitur at first is this

00:04:36,169 --> 00:04:42,320
is your codebase per project or

00:04:39,130 --> 00:04:45,260
monolithic because this actually matters

00:04:42,320 --> 00:04:47,480
kind of quite a lot and I'll have to

00:04:45,260 --> 00:04:50,290
have another brief aside here on the

00:04:47,480 --> 00:04:52,639
question two monolithic code bases a

00:04:50,290 --> 00:04:54,830
monolithic code base that is one where

00:04:52,639 --> 00:04:57,800
all of the projects in your organization

00:04:54,830 --> 00:05:02,000
are checked into the same place has some

00:04:57,800 --> 00:05:04,250
upsides you get the upside of if you're

00:05:02,000 --> 00:05:06,410
doing it right the code base is largely

00:05:04,250 --> 00:05:08,930
consistent right you can have policies

00:05:06,410 --> 00:05:11,120
and practices and things to try to get

00:05:08,930 --> 00:05:13,400
people to be using the same stuff and

00:05:11,120 --> 00:05:16,790
writing in the same fashion and that

00:05:13,400 --> 00:05:19,550
that helps right it reduces the fact it

00:05:16,790 --> 00:05:21,260
reduces the potential for one lone wolf

00:05:19,550 --> 00:05:24,800
to be the only person that can maintain

00:05:21,260 --> 00:05:27,139
that right make sure that everyone is

00:05:24,800 --> 00:05:30,440
working in the same sandbox you share

00:05:27,139 --> 00:05:32,270
your toys infrastructure scales much

00:05:30,440 --> 00:05:34,550
much better when you're working in a

00:05:32,270 --> 00:05:36,950
monolithic code base right we have a

00:05:34,550 --> 00:05:41,150
dedicated compiler team they are the

00:05:36,950 --> 00:05:43,220
best right if we had a separate code

00:05:41,150 --> 00:05:45,440
base and a separate you know for every

00:05:43,220 --> 00:05:49,669
individual project a separate code base

00:05:45,440 --> 00:05:52,550
for drive and for search and for ads and

00:05:49,669 --> 00:05:55,190
for news and for all of the things right

00:05:52,550 --> 00:05:57,139
some of the larger teams might have one

00:05:55,190 --> 00:05:59,030
or two dedicated people unlike yeah this

00:05:57,139 --> 00:06:02,660
is we're gonna take care of the

00:05:59,030 --> 00:06:04,760
compilers but it doesn't scale well all

00:06:02,660 --> 00:06:07,400
right once you get everyone in the same

00:06:04,760 --> 00:06:10,130
place infrastructure scales write

00:06:07,400 --> 00:06:12,110
compilers and common libraries all right

00:06:10,130 --> 00:06:15,169
all of those things there's good scaling

00:06:12,110 --> 00:06:17,510
properties as someone on an

00:06:15,169 --> 00:06:20,000
infrastructure team one of the great

00:06:17,510 --> 00:06:23,120
upsides to a monolithic code base is

00:06:20,000 --> 00:06:25,010
that we get usage visibility right when

00:06:23,120 --> 00:06:28,669
I want to change a common API

00:06:25,010 --> 00:06:32,139
I have visibility into literally every

00:06:28,669 --> 00:06:34,970
place for that API is called so it is a

00:06:32,139 --> 00:06:38,620
doable and because we have practiced

00:06:34,970 --> 00:06:41,740
it's fairly tractable task to

00:06:38,620 --> 00:06:43,690
Doucette new better api change all of

00:06:41,740 --> 00:06:45,580
the colors of the old thing and delete

00:06:43,690 --> 00:06:47,949
the old one and this is a task that can

00:06:45,580 --> 00:06:51,220
be done in days or weeks instead of

00:06:47,949 --> 00:06:53,669
months and years if your deprecating

00:06:51,220 --> 00:06:55,660
things with a traditional release cycle

00:06:53,669 --> 00:06:59,199
but there are downsides to this

00:06:55,660 --> 00:07:02,080
monolithic idea as well right I've

00:06:59,199 --> 00:07:04,600
talked with people at the conference

00:07:02,080 --> 00:07:06,040
here about yeah our organization is

00:07:04,600 --> 00:07:09,580
getting bigger we've got fifty or a

00:07:06,040 --> 00:07:13,120
hundred people and just sinking our git

00:07:09,580 --> 00:07:16,750
repository is now taking too long

00:07:13,120 --> 00:07:19,449
right it is a meaningful overhead right

00:07:16,750 --> 00:07:21,220
when we have bring in new hires the

00:07:19,449 --> 00:07:23,800
amount of history that is coming along

00:07:21,220 --> 00:07:25,270
in our repository just like you have to

00:07:23,800 --> 00:07:28,720
tell them when they show up on the day

00:07:25,270 --> 00:07:30,400
one yeah start your repo sync let's go

00:07:28,720 --> 00:07:32,110
to coffee and talk about fill out your

00:07:30,400 --> 00:07:33,430
papers all that stuff because it's gonna

00:07:32,110 --> 00:07:37,690
take a little while right

00:07:33,430 --> 00:07:39,699
things like scaling will get work like

00:07:37,690 --> 00:07:42,370
this type of scaling will get worse if

00:07:39,699 --> 00:07:45,880
you don't dedicate resources to solving

00:07:42,370 --> 00:07:49,330
those problems right by consolidating

00:07:45,880 --> 00:07:52,810
you also give yourself bigger problems

00:07:49,330 --> 00:07:55,060
it's just that by consolidating it makes

00:07:52,810 --> 00:07:55,630
more sense to assign people to fix those

00:07:55,060 --> 00:07:59,520
problems

00:07:55,630 --> 00:08:02,110
so there's a trade-off there the biggest

00:07:59,520 --> 00:08:05,979
con to a monolithic code base in my

00:08:02,110 --> 00:08:12,550
opinion is that you cannot just throw it

00:08:05,979 --> 00:08:16,380
away and start clean so look at the I'll

00:08:12,550 --> 00:08:19,030
explain that um this is kind of

00:08:16,380 --> 00:08:20,620
hypothetical very simplified monolithic

00:08:19,030 --> 00:08:23,320
code base we have some utility code we

00:08:20,620 --> 00:08:24,940
have common RPC because we're in a model

00:08:23,320 --> 00:08:26,800
at the code base everyone can use the

00:08:24,940 --> 00:08:29,949
common things this helps this is nice

00:08:26,800 --> 00:08:33,370
and as you start to grow and you realize

00:08:29,949 --> 00:08:36,909
oh we need to add you know a common

00:08:33,370 --> 00:08:40,240
authorization system to our services

00:08:36,909 --> 00:08:43,270
there's a common place an easy single

00:08:40,240 --> 00:08:46,510
per single point like choke point to add

00:08:43,270 --> 00:08:49,959
that this is nice but as you start

00:08:46,510 --> 00:08:52,329
growing you start adding more and more

00:08:49,959 --> 00:08:54,339
edges to this graph

00:08:52,329 --> 00:08:57,069
this graph is always just going to be

00:08:54,339 --> 00:09:01,839
more and more complicated and sometimes

00:08:57,069 --> 00:09:03,639
even stop being a strict dag your builds

00:09:01,839 --> 00:09:07,749
get weird like things get complicated

00:09:03,639 --> 00:09:12,299
once you start having this graph there

00:09:07,749 --> 00:09:17,110
is no way that you can say oh no

00:09:12,299 --> 00:09:19,569
everything is gone to hell we have to

00:09:17,110 --> 00:09:23,769
throw it away and start over because you

00:09:19,569 --> 00:09:25,540
cannot take the good parts with you the

00:09:23,769 --> 00:09:27,129
good parts are dependent on the bad and

00:09:25,540 --> 00:09:29,529
the bad or dependent on the good right

00:09:27,129 --> 00:09:30,929
it just becomes a hairball I don't

00:09:29,529 --> 00:09:34,779
believe that there is any like

00:09:30,929 --> 00:09:37,989
principled way to grow to this scale and

00:09:34,779 --> 00:09:44,679
really avoid this problem and keep the

00:09:37,989 --> 00:09:46,360
ability to panic a per project culture

00:09:44,679 --> 00:09:49,029
means that you get the big red button

00:09:46,360 --> 00:09:52,420
option a monolithic culture means you

00:09:49,029 --> 00:09:55,329
have to get this right and that brings

00:09:52,420 --> 00:09:56,889
us back to lifespan right over the

00:09:55,329 --> 00:10:01,839
duration that your codebase is going to

00:09:56,889 --> 00:10:04,089
live right you may very expensively push

00:10:01,839 --> 00:10:07,089
the panic button on a per project

00:10:04,089 --> 00:10:08,980
repo but you will never be able to push

00:10:07,089 --> 00:10:14,470
the panic button on a sufficiently large

00:10:08,980 --> 00:10:18,540
monolith and so that's my thoughts on

00:10:14,470 --> 00:10:20,980
life span why do I care about life span

00:10:18,540 --> 00:10:26,410
care about life span for your projects

00:10:20,980 --> 00:10:28,929
because change is inevitable this is not

00:10:26,410 --> 00:10:32,499
surprising right if you were to ask

00:10:28,929 --> 00:10:34,299
anyone like is it safe to assume that

00:10:32,499 --> 00:10:36,610
we're never going to have to change any

00:10:34,299 --> 00:10:38,829
of the things we depend upon no one is

00:10:36,610 --> 00:10:40,629
going to say yes to that it's just that

00:10:38,829 --> 00:10:43,119
usually we are very concerned with

00:10:40,629 --> 00:10:45,610
getting to the next release in two weeks

00:10:43,119 --> 00:10:48,699
all right getting through the next QA

00:10:45,610 --> 00:10:51,669
cycle this quarter all right and we lose

00:10:48,699 --> 00:10:54,819
track of this bigger picture of you know

00:10:51,669 --> 00:10:57,129
at some point yeah we're going to have

00:10:54,819 --> 00:10:59,319
to update our compilers right we want

00:10:57,129 --> 00:11:01,089
the new language features or even if you

00:10:59,319 --> 00:11:03,429
don't want the new language features you

00:11:01,089 --> 00:11:05,440
want the new compiler because it fixes

00:11:03,429 --> 00:11:07,600
that miss compilation error that

00:11:05,440 --> 00:11:10,540
keeps triggering those random bugs right

00:11:07,600 --> 00:11:12,960
yes compilers have bugs right if you are

00:11:10,540 --> 00:11:15,610
fighting with the completely mysterious

00:11:12,960 --> 00:11:20,260
there does come a point where you have

00:11:15,610 --> 00:11:22,540
to mistrust the compiler tooling changes

00:11:20,260 --> 00:11:27,340
you have to be prepared for that at some

00:11:22,540 --> 00:11:32,200
point bugs will happen right it was

00:11:27,340 --> 00:11:36,370
heard of heartbleed who had a system

00:11:32,200 --> 00:11:38,230
that had some vulnerability to that who

00:11:36,370 --> 00:11:40,360
actually worked and made sure that it

00:11:38,230 --> 00:11:45,790
got fixed I hope those are the same

00:11:40,360 --> 00:11:47,920
hands right bugs are gonna happen right

00:11:45,790 --> 00:11:51,040
even if you attempt to never change

00:11:47,920 --> 00:11:54,130
anything at some point we are going to

00:11:51,040 --> 00:11:57,460
have bugs like heartbleed right you

00:11:54,130 --> 00:12:00,010
cannot pretend that everything you

00:11:57,460 --> 00:12:04,030
depend upon is completely static for all

00:12:00,010 --> 00:12:06,670
time not if you want to be a safe

00:12:04,030 --> 00:12:09,130
responsible citizen of the information

00:12:06,670 --> 00:12:11,920
technology world right you're gonna have

00:12:09,130 --> 00:12:14,080
to be able to at least patch OpenSSL if

00:12:11,920 --> 00:12:16,150
not update open ssl and all the

00:12:14,080 --> 00:12:17,560
libraries that it depends upon right and

00:12:16,150 --> 00:12:20,110
then you're changing a significant

00:12:17,560 --> 00:12:23,860
amount of your web surfing code right

00:12:20,110 --> 00:12:26,590
your change is inevitable and new

00:12:23,860 --> 00:12:30,550
attacks will emerge all right I'm going

00:12:26,590 --> 00:12:32,620
to talk a bit that kind of frame all of

00:12:30,550 --> 00:12:35,380
this a bit in terms of things like hash

00:12:32,620 --> 00:12:38,100
flooding hash flooding is terrifying

00:12:35,380 --> 00:12:40,750
right who's familiar with hash flooding

00:12:38,100 --> 00:12:43,380
not too much interesting

00:12:40,750 --> 00:12:46,480
so hash flooding is the notion that your

00:12:43,380 --> 00:12:49,150
hash containers your unordered maps your

00:12:46,480 --> 00:12:51,970
in ordered sets these are supposed to

00:12:49,150 --> 00:12:54,400
give you order one lookup all right this

00:12:51,970 --> 00:12:59,640
is this is what's you know advertised

00:12:54,400 --> 00:13:04,420
right what if your attacker knows that

00:12:59,640 --> 00:13:07,660
you are storing some part of your query

00:13:04,420 --> 00:13:09,430
in an or an ordered map they know that

00:13:07,660 --> 00:13:12,630
when they issue a query to your service

00:13:09,430 --> 00:13:16,510
it is going temporarily or for awhile

00:13:12,630 --> 00:13:17,660
into an unearned map that is keyed on a

00:13:16,510 --> 00:13:20,570
string

00:13:17,660 --> 00:13:23,390
that they passed in right they you say

00:13:20,570 --> 00:13:25,700
oh I need to do map storage for these

00:13:23,390 --> 00:13:28,400
things I'm gonna take the name of the

00:13:25,700 --> 00:13:30,710
person in this request and use that to

00:13:28,400 --> 00:13:33,680
keep track of you know state about this

00:13:30,710 --> 00:13:35,810
request right you're using an order to

00:13:33,680 --> 00:13:39,140
map odds are pretty good you're using

00:13:35,810 --> 00:13:42,560
standard hash how hard do you think it

00:13:39,140 --> 00:13:45,470
is to find collisions that is two inputs

00:13:42,560 --> 00:13:49,180
that hash to the same thing with

00:13:45,470 --> 00:13:52,250
standard hash on any input on any string

00:13:49,180 --> 00:13:53,660
all right this is purely a matter of

00:13:52,250 --> 00:13:54,890
just burn some CPU

00:13:53,660 --> 00:13:57,340
all right standard hash is not a

00:13:54,890 --> 00:14:01,070
cryptographic hash it is not intended to

00:13:57,340 --> 00:14:03,110
protect you against that so if they can

00:14:01,070 --> 00:14:06,140
calculate a whole bunch of inputs that

00:14:03,110 --> 00:14:07,940
all hash the same thing they can feed

00:14:06,140 --> 00:14:11,270
all of those inputs to your system and

00:14:07,940 --> 00:14:14,290
then your order one lookup becomes order

00:14:11,270 --> 00:14:17,600
n lookup as they flood you with this

00:14:14,290 --> 00:14:19,910
your nice quick I just need to go check

00:14:17,600 --> 00:14:22,640
this thing in my hash map becomes an

00:14:19,910 --> 00:14:25,940
order n operation and your service

00:14:22,640 --> 00:14:31,070
crawls to a halt this is an attack on

00:14:25,940 --> 00:14:34,970
your data structures if you are not

00:14:31,070 --> 00:14:38,270
terrified right now you need to get more

00:14:34,970 --> 00:14:41,240
coffee and come back okay you're not

00:14:38,270 --> 00:14:44,180
paying attention right if you cannot

00:14:41,240 --> 00:14:49,310
even trust the things like your data

00:14:44,180 --> 00:14:53,660
structures in perpetuity right you have

00:14:49,310 --> 00:14:55,880
to be prepared for change right you

00:14:53,660 --> 00:14:58,460
cannot assume a completely static

00:14:55,880 --> 00:15:00,530
infrastructure in the long term and I

00:14:58,460 --> 00:15:03,170
have weaseled a little bit you will

00:15:00,530 --> 00:15:05,870
notice usually appearing on this slide

00:15:03,170 --> 00:15:08,360
in a couple of places there are maybe

00:15:05,870 --> 00:15:11,960
exceptions I would say if you're working

00:15:08,360 --> 00:15:14,630
in government contracts I think there

00:15:11,960 --> 00:15:16,790
are some domains where it is probably

00:15:14,630 --> 00:15:18,830
not the best plan but actually may be

00:15:16,790 --> 00:15:21,380
legally mandated that nothing is ever

00:15:18,830 --> 00:15:23,690
going to change in which case this is

00:15:21,380 --> 00:15:26,460
probably not to talk for you because I

00:15:23,690 --> 00:15:29,460
am very concerned with change

00:15:26,460 --> 00:15:31,710
so if a change is necessary in the

00:15:29,460 --> 00:15:35,790
lifespan of your project do you have a

00:15:31,710 --> 00:15:40,500
plan to tackle it that is is it possible

00:15:35,790 --> 00:15:43,440
to make a change of that sort and maybe

00:15:40,500 --> 00:15:47,760
more interesting do you have practice in

00:15:43,440 --> 00:15:50,220
making those sorts of changes and now

00:15:47,760 --> 00:15:52,200
this actually gets me to I can I think

00:15:50,220 --> 00:15:55,709
provide a working definition for

00:15:52,200 --> 00:15:58,560
sustainability your organization's

00:15:55,709 --> 00:16:01,740
codebase is sustainable when you are

00:15:58,560 --> 00:16:04,980
able to change all of the things that

00:16:01,740 --> 00:16:06,810
you ought to change safely and can do

00:16:04,980 --> 00:16:10,560
folks do so for the lifetime of your

00:16:06,810 --> 00:16:13,020
codebase whether you choose to do so is

00:16:10,560 --> 00:16:14,850
your business alright I am NOT saying

00:16:13,020 --> 00:16:19,459
that everything that goes wrong needs to

00:16:14,850 --> 00:16:24,540
be fixed you totally have the option to

00:16:19,459 --> 00:16:26,760
note that this is a problem and choose

00:16:24,540 --> 00:16:29,880
to consciously take on that technical

00:16:26,760 --> 00:16:34,290
debt those risks that annoyance that

00:16:29,880 --> 00:16:36,959
long-term maintenance hassle and like if

00:16:34,290 --> 00:16:38,279
you do that with open eyes I have no

00:16:36,959 --> 00:16:41,040
problem with that I am NOT saying that

00:16:38,279 --> 00:16:43,200
your codebase is unsustainable what I am

00:16:41,040 --> 00:16:47,670
saying is if you do not have the ability

00:16:43,200 --> 00:16:49,709
to fix whatever problems are going to

00:16:47,670 --> 00:16:54,600
come up over the lifespan of your

00:16:49,709 --> 00:17:02,820
codebase then you have an issue that

00:16:54,600 --> 00:17:05,120
makes sense so in my experience to be

00:17:02,820 --> 00:17:09,030
sustainable you will need some or all of

00:17:05,120 --> 00:17:11,550
testing too if you're reacting to

00:17:09,030 --> 00:17:14,280
something if you're making a change how

00:17:11,550 --> 00:17:16,860
do you know that this change is safe you

00:17:14,280 --> 00:17:18,360
will very likely need policies right you

00:17:16,860 --> 00:17:21,420
will need policies to guide your

00:17:18,360 --> 00:17:23,750
engineers to guide release processes to

00:17:21,420 --> 00:17:26,160
guide all sorts of things because

00:17:23,750 --> 00:17:29,700
engineering is not a purely technical

00:17:26,160 --> 00:17:32,150
activity right it is also a social and

00:17:29,700 --> 00:17:33,750
enterprise right we are people

00:17:32,150 --> 00:17:36,450
communicating with each other

00:17:33,750 --> 00:17:40,340
and working out how to you know make

00:17:36,450 --> 00:17:43,409
progress as efficiently as possible

00:17:40,340 --> 00:17:45,299
you will need some policies there will

00:17:43,409 --> 00:17:49,139
definitely be technology that you will

00:17:45,299 --> 00:17:53,220
want to rely upon and then you will need

00:17:49,139 --> 00:17:56,249
to practice so I'm going to kind of

00:17:53,220 --> 00:17:59,519
motivate we'll just start with the

00:17:56,249 --> 00:18:01,049
notion okay so you have a problem you

00:17:59,519 --> 00:18:06,600
need to change how you're hashing works

00:18:01,049 --> 00:18:08,850
we'll start there for example I argue

00:18:06,600 --> 00:18:11,129
that you need testing right you need a

00:18:08,850 --> 00:18:13,109
culture of testing you may have been to

00:18:11,129 --> 00:18:16,340
my talk on testing earlier in the week I

00:18:13,109 --> 00:18:18,899
really think that this is important okay

00:18:16,340 --> 00:18:25,769
we were talking at lunch a couple days

00:18:18,899 --> 00:18:30,359
ago someone was pointing out you know 10

00:18:25,769 --> 00:18:32,940
15 years ago it was not completely rare

00:18:30,359 --> 00:18:35,549
to encounter engineering groups or

00:18:32,940 --> 00:18:37,919
so-called engineering groups that we're

00:18:35,549 --> 00:18:40,940
still kind of like shaky on yeah you

00:18:37,919 --> 00:18:43,979
should be using version control right

00:18:40,940 --> 00:18:46,440
right like if you think back like a

00:18:43,979 --> 00:18:49,919
decade or two like you may have worked

00:18:46,440 --> 00:18:51,989
for one right like a decade ago the

00:18:49,919 --> 00:18:54,090
place I worked for we were using version

00:18:51,989 --> 00:18:55,590
control it was very good but some of the

00:18:54,090 --> 00:18:57,960
contractors that we were working with

00:18:55,590 --> 00:19:00,179
did not and we have to get in big fights

00:18:57,960 --> 00:19:03,929
with them about like no guys grow up

00:19:00,179 --> 00:19:06,059
you're gonna do this I think these days

00:19:03,929 --> 00:19:07,229
it is pretty clear like yeah you're an

00:19:06,059 --> 00:19:08,690
engineering company you're gonna have

00:19:07,229 --> 00:19:10,979
version control right it's anyone

00:19:08,690 --> 00:19:13,169
disagree like is that not your

00:19:10,979 --> 00:19:18,359
experience right version control clearly

00:19:13,169 --> 00:19:20,669
right Marshall yeah there are small

00:19:18,359 --> 00:19:22,049
compelling at this point culturally like

00:19:20,669 --> 00:19:26,759
you run into small companies that don't

00:19:22,049 --> 00:19:28,529
you're like really great like it's not

00:19:26,759 --> 00:19:30,620
like well yeah I guess I see your point

00:19:28,529 --> 00:19:33,380
it's like really

00:19:30,620 --> 00:19:35,299
okay I think testing is gonna be the

00:19:33,380 --> 00:19:37,400
same thing right I think it's gonna take

00:19:35,299 --> 00:19:39,110
us probably another ten years before we

00:19:37,400 --> 00:19:42,890
get to the point that it's like really

00:19:39,110 --> 00:19:45,740
you're not testing we're you think we're

00:19:42,890 --> 00:19:49,220
on the forefront of this it's better

00:19:45,740 --> 00:19:53,029
over here trust me not least of which is

00:19:49,220 --> 00:19:57,070
because tests are your first line of

00:19:53,029 --> 00:19:59,150
defense when change is coming right

00:19:57,070 --> 00:20:01,400
tests are your first line of defense for

00:19:59,150 --> 00:20:04,309
enforcing the contracts of your code and

00:20:01,400 --> 00:20:06,830
the code that you depend upon right you

00:20:04,309 --> 00:20:09,500
being told you need to write tests is

00:20:06,830 --> 00:20:11,299
not necessarily about I don't think your

00:20:09,500 --> 00:20:13,549
code is correct I don't think you're

00:20:11,299 --> 00:20:16,250
good at coding right that is not what

00:20:13,549 --> 00:20:18,919
tests are implying tests are if you like

00:20:16,250 --> 00:20:21,830
implying the team that your code relies

00:20:18,919 --> 00:20:23,919
upon sometimes makes mistakes make sure

00:20:21,830 --> 00:20:27,350
that the way that your code functions

00:20:23,919 --> 00:20:29,840
with those dependencies in place is

00:20:27,350 --> 00:20:32,779
working properly it's only polite for

00:20:29,840 --> 00:20:35,120
the people above you and you get to

00:20:32,779 --> 00:20:36,710
exert some pressure on making sure the

00:20:35,120 --> 00:20:39,230
people below you who aren't to be

00:20:36,710 --> 00:20:40,909
trusted are doing the right thing right

00:20:39,230 --> 00:20:43,850
if you want to phrase it that way to

00:20:40,909 --> 00:20:46,640
like make it feel like this isn't we're

00:20:43,850 --> 00:20:48,770
watching you we don't trust you think of

00:20:46,640 --> 00:20:53,179
it this way right this is I think more

00:20:48,770 --> 00:20:56,299
palatable for some people and when you

00:20:53,179 --> 00:20:59,210
have tests everywhere for the whole code

00:20:56,299 --> 00:21:01,149
base it is much easier to tell like okay

00:20:59,210 --> 00:21:04,510
I made this change did the world explode

00:21:01,149 --> 00:21:08,929
no does that prove that change is safe

00:21:04,510 --> 00:21:13,480
no it's at most kind of an existence

00:21:08,929 --> 00:21:16,730
like yeah this is not provably unsafe

00:21:13,480 --> 00:21:18,799
right it's not quite the same the kind

00:21:16,730 --> 00:21:22,580
of web of trust by verification that you

00:21:18,799 --> 00:21:24,289
get from having tests everywhere is not

00:21:22,580 --> 00:21:29,480
a proof that the code base is working

00:21:24,289 --> 00:21:31,730
correctly it is at most good evidence

00:21:29,480 --> 00:21:35,240
kind of statistical evidence that you

00:21:31,730 --> 00:21:38,720
didn't destroy everything but it's the

00:21:35,240 --> 00:21:41,450
best we got I've said this in a couple

00:21:38,720 --> 00:21:43,710
places now I will say it again if you do

00:21:41,450 --> 00:21:48,480
not currently have a test in culture and

00:21:43,710 --> 00:21:52,830
need to get there you're gonna have to

00:21:48,480 --> 00:21:57,539
hold this line at some point no more

00:21:52,830 --> 00:22:00,510
changes go in without a test and no bugs

00:21:57,539 --> 00:22:01,980
can be marked as fixed without a test

00:22:00,510 --> 00:22:04,590
that demonstrates the bug and

00:22:01,980 --> 00:22:06,809
demonstrates that it's fixed right the

00:22:04,590 --> 00:22:10,380
right way to do that is to write a test

00:22:06,809 --> 00:22:12,809
that demonstrates the bug and then come

00:22:10,380 --> 00:22:14,580
up with the fix so that it's nice and

00:22:12,809 --> 00:22:17,610
quick to check to see if your fix was

00:22:14,580 --> 00:22:20,100
right it makes all of this debugging

00:22:17,610 --> 00:22:21,419
engineering stuff much much easier all

00:22:20,100 --> 00:22:24,360
right at some point you have to hold

00:22:21,419 --> 00:22:27,360
this line I will admit that if you have

00:22:24,360 --> 00:22:30,600
a large messy code base with no tests

00:22:27,360 --> 00:22:32,850
right now you will probably have a month

00:22:30,600 --> 00:22:36,539
or two where it feels like your velocity

00:22:32,850 --> 00:22:40,890
has been slowed it's a finite amount of

00:22:36,539 --> 00:22:43,500
time I promise and in the long term you

00:22:40,890 --> 00:22:47,130
will be much better off I have heard of

00:22:43,500 --> 00:22:50,220
zero instances of groups that had tests

00:22:47,130 --> 00:22:52,409
as a like part of their culture and said

00:22:50,220 --> 00:22:53,880
we are stopping the testing requirements

00:22:52,409 --> 00:22:58,799
so that we can sprint to this release

00:22:53,880 --> 00:23:01,919
and that that succeeded in all cases you

00:22:58,799 --> 00:23:04,590
drop velocity in all reported cases you

00:23:01,919 --> 00:23:06,840
drop velocity when you stop testing and

00:23:04,590 --> 00:23:11,010
you increase velocity when you start

00:23:06,840 --> 00:23:14,460
testing okay any variance than that is

00:23:11,010 --> 00:23:17,190
at most a short-term difference you will

00:23:14,460 --> 00:23:19,260
also if you have tons of tests that's a

00:23:17,190 --> 00:23:22,080
good first step but you also need test

00:23:19,260 --> 00:23:24,120
infrastructure it is if it's hard to run

00:23:22,080 --> 00:23:25,710
your tests nobody will do it and if no

00:23:24,120 --> 00:23:27,059
one is running the tests and they're not

00:23:25,710 --> 00:23:34,470
doing any good and no one's gonna write

00:23:27,059 --> 00:23:38,120
tests so compare this is pretty much

00:23:34,470 --> 00:23:38,120
what testing was like at my previous job

00:23:38,570 --> 00:23:45,330
it's like I think that this package that

00:23:42,419 --> 00:23:47,460
I'm trying to make a change to had tests

00:23:45,330 --> 00:23:49,049
some some other group wrote it how do i

00:23:47,460 --> 00:23:51,690
where are the tests I'll go check the

00:23:49,049 --> 00:23:53,700
readme oh those require me to install

00:23:51,690 --> 00:23:56,100
something oh but that other group has a

00:23:53,700 --> 00:23:56,970
different oh s so I need to install

00:23:56,100 --> 00:23:59,130
different packages

00:23:56,970 --> 00:24:00,960
oh there's a version mismatch you burn a

00:23:59,130 --> 00:24:03,840
couple days on it this is not the most

00:24:00,960 --> 00:24:05,220
fun you've ever had then you finally get

00:24:03,840 --> 00:24:06,750
to run the test the test doesn't pass

00:24:05,220 --> 00:24:08,669
now you're not sure if it's because you

00:24:06,750 --> 00:24:10,289
made some changes before you started

00:24:08,669 --> 00:24:11,820
running the tests or if your

00:24:10,289 --> 00:24:13,950
installation was wrong like this is no

00:24:11,820 --> 00:24:19,350
fun right you can easily burn time on

00:24:13,950 --> 00:24:21,750
this it's just it's Terry this is

00:24:19,350 --> 00:24:23,730
roughly how testing works for us and

00:24:21,750 --> 00:24:26,760
this is roughly what you should aim for

00:24:23,730 --> 00:24:30,000
right your tests are built into the

00:24:26,760 --> 00:24:31,890
build system the same thing that you use

00:24:30,000 --> 00:24:34,980
to run the tests or to built make the

00:24:31,890 --> 00:24:39,390
build run can run the tests all right we

00:24:34,980 --> 00:24:42,450
open sourced basil it is effectively a

00:24:39,390 --> 00:24:43,950
very small difference between the open

00:24:42,450 --> 00:24:46,590
source basil and what we use internally

00:24:43,950 --> 00:24:49,020
and this makes life much much easier

00:24:46,590 --> 00:24:51,659
right no one has to figure out how to

00:24:49,020 --> 00:24:54,990
build the test where the test lives any

00:24:51,659 --> 00:24:58,470
of those things you just spin it up it's

00:24:54,990 --> 00:25:01,590
the same in every project very very very

00:24:58,470 --> 00:25:03,840
much an important thing because your

00:25:01,590 --> 00:25:06,659
tests have to be quick reliable and

00:25:03,840 --> 00:25:08,280
consistent across the organization all

00:25:06,659 --> 00:25:10,650
right if an infrastructure team team

00:25:08,280 --> 00:25:13,860
needs to make a change to something that

00:25:10,650 --> 00:25:15,659
everyone relies upon it does not scale

00:25:13,860 --> 00:25:18,539
for them to have to learn a hundred

00:25:15,659 --> 00:25:21,990
different ways that tests get run and

00:25:18,539 --> 00:25:26,429
projects get built right does that make

00:25:21,990 --> 00:25:28,620
sense and you're gonna need policies my

00:25:26,429 --> 00:25:32,760
favorite policy on testing is what we

00:25:28,620 --> 00:25:34,559
call the Beyonce rule which is if you

00:25:32,760 --> 00:25:36,590
liked it you should have put a test on

00:25:34,559 --> 00:25:36,590
it

00:25:38,080 --> 00:25:44,720
I'm not joking

00:25:40,700 --> 00:25:46,400
it is official policy that if we make a

00:25:44,720 --> 00:25:47,780
change to succour libraries to court

00:25:46,400 --> 00:25:50,720
infrastructure to the compiler to

00:25:47,780 --> 00:25:54,350
anything and your project breaks like

00:25:50,720 --> 00:25:56,780
you start shipping on fire software to

00:25:54,350 --> 00:26:00,770
your customers as a result of this

00:25:56,780 --> 00:26:03,290
change if you didn't have a test it is

00:26:00,770 --> 00:26:06,470
not our fault we will not roll it back

00:26:03,290 --> 00:26:09,860
we are not responsible for you shirking

00:26:06,470 --> 00:26:11,810
your grown-up duties of like yeah you're

00:26:09,860 --> 00:26:13,030
gonna have to have a test for that all

00:26:11,810 --> 00:26:18,980
right not our fault

00:26:13,030 --> 00:26:20,810
Beyonce rule it's big fan and that's

00:26:18,980 --> 00:26:23,780
kind of one of many sorts of things that

00:26:20,810 --> 00:26:25,250
I think you need as policies for how to

00:26:23,780 --> 00:26:27,020
guide the code base

00:26:25,250 --> 00:26:32,570
right that one is very particular to

00:26:27,020 --> 00:26:34,490
testing and in general there's a lot of

00:26:32,570 --> 00:26:36,620
kind of policy and guidance sorts of

00:26:34,490 --> 00:26:38,360
things you can do to kind of encourage

00:26:36,620 --> 00:26:41,270
people to be moving in the right

00:26:38,360 --> 00:26:43,790
direction all right you need ways to

00:26:41,270 --> 00:26:45,860
guide the code base this is more

00:26:43,790 --> 00:26:48,470
important and more easier to do in a

00:26:45,860 --> 00:26:53,420
monolithic code base I am a big fan of

00:26:48,470 --> 00:26:55,850
the monolithic paradigm so going back to

00:26:53,420 --> 00:26:58,160
the hash question what if everyone wrote

00:26:55,850 --> 00:27:00,170
their own hashes but if everyone wrote

00:26:58,160 --> 00:27:01,880
their own hashers and what if everyone

00:27:00,170 --> 00:27:05,570
wrote their own containers like

00:27:01,880 --> 00:27:09,290
unordered containers right there is no

00:27:05,570 --> 00:27:12,530
way for you to fix and defend against

00:27:09,290 --> 00:27:15,350
hash flooding if everyone's got like

00:27:12,530 --> 00:27:21,320
spun up their own stuff right without

00:27:15,350 --> 00:27:23,390
having reuse and consistency the the

00:27:21,320 --> 00:27:24,200
problem is intractable right there's no

00:27:23,390 --> 00:27:26,660
way that you're going to be able to

00:27:24,200 --> 00:27:28,280
track down all of the various

00:27:26,660 --> 00:27:30,440
implementations and all of the various

00:27:28,280 --> 00:27:33,890
containers and all the things to make

00:27:30,440 --> 00:27:35,090
the same fix and test in all of these

00:27:33,890 --> 00:27:37,580
different places right you want

00:27:35,090 --> 00:27:39,710
consistency and so one of the things

00:27:37,580 --> 00:27:42,070
that I find very valuable and

00:27:39,710 --> 00:27:44,840
encouraging consistency is a style guide

00:27:42,070 --> 00:27:49,149
I gave a talk on style guides last year

00:27:44,840 --> 00:27:52,539
I don't particularly care about the

00:27:49,149 --> 00:27:53,830
formatting stuff in a style guide pick

00:27:52,539 --> 00:27:56,589
one and move on

00:27:53,830 --> 00:27:59,229
better yet like pick one encode it in

00:27:56,589 --> 00:28:01,389
clang format and move on right there are

00:27:59,229 --> 00:28:05,769
far more important things to use up your

00:28:01,389 --> 00:28:07,960
brain on then how many spaces to indent

00:28:05,769 --> 00:28:10,629
or whether to use tabs don't care

00:28:07,960 --> 00:28:12,399
argue about something important style

00:28:10,629 --> 00:28:17,830
guides are far more valuable for things

00:28:12,399 --> 00:28:20,679
like no in our code base because it's

00:28:17,830 --> 00:28:24,849
difficult to gather all of the threads

00:28:20,679 --> 00:28:31,499
and have a reliable shutdown sequence it

00:28:24,849 --> 00:28:34,119
is super important that you do not have

00:28:31,499 --> 00:28:37,479
namespace scoped variables with complex

00:28:34,119 --> 00:28:39,489
descriptors for instance because you

00:28:37,479 --> 00:28:41,559
know one thread is doing destruction of

00:28:39,489 --> 00:28:44,649
global variables and other threads

00:28:41,559 --> 00:28:46,539
continue like churning along right this

00:28:44,649 --> 00:28:48,609
means that at shutdown which is a very

00:28:46,539 --> 00:28:50,499
difficult time to debug things one

00:28:48,609 --> 00:28:52,989
thread can be accessing a string that's

00:28:50,499 --> 00:28:54,759
already been destructed or a complex

00:28:52,989 --> 00:28:56,589
object that's already been destructed

00:28:54,759 --> 00:28:57,879
and when you start accessing things that

00:28:56,589 --> 00:29:00,519
I've already been destructed you're off

00:28:57,879 --> 00:29:03,849
in an undefined behavior land alright

00:29:00,519 --> 00:29:06,700
and this can be arbitrarily bad right

00:29:03,849 --> 00:29:10,119
you can have horrible data persisted to

00:29:06,700 --> 00:29:12,639
your database right impossible to track

00:29:10,119 --> 00:29:15,399
down impossible to duplicate bugs a

00:29:12,639 --> 00:29:19,809
style guide is a good place to prevent I

00:29:15,399 --> 00:29:25,690
like to say no do not have complex

00:29:19,809 --> 00:29:28,059
Global's S style guides should be kind

00:29:25,690 --> 00:29:30,309
of interpreted almost with the force of

00:29:28,059 --> 00:29:32,889
law right if you choose to violate those

00:29:30,309 --> 00:29:35,499
things you should be doing do doing so

00:29:32,889 --> 00:29:38,559
with eyes open and that's part of why in

00:29:35,499 --> 00:29:40,950
my talk last year I was hammering on the

00:29:38,559 --> 00:29:43,570
rules in the style guide should both

00:29:40,950 --> 00:29:46,809
serve a purpose and that purpose should

00:29:43,570 --> 00:29:49,989
be made clear if someone knows why the

00:29:46,809 --> 00:29:52,179
rule is there then they can make an eyes

00:29:49,989 --> 00:29:55,149
open engineering decision that that

00:29:52,179 --> 00:29:56,499
doesn't apply or it's that's a lesser

00:29:55,149 --> 00:29:59,379
risk than what I'm fighting against

00:29:56,499 --> 00:30:01,330
right now but generally style guides

00:29:59,379 --> 00:30:06,830
should be kind of

00:30:01,330 --> 00:30:09,590
nearly law you also need code review I

00:30:06,830 --> 00:30:11,779
said earlier probably the number one

00:30:09,590 --> 00:30:15,559
important thing for making your codebase

00:30:11,779 --> 00:30:17,899
survivable is testing and the number two

00:30:15,559 --> 00:30:21,490
thing is code review code review and

00:30:17,899 --> 00:30:26,990
take it seriously right programming is

00:30:21,490 --> 00:30:30,230
freaking hard anyone want to disagree

00:30:26,990 --> 00:30:32,480
with that I would actually argue that

00:30:30,230 --> 00:30:37,009
all of the interesting software

00:30:32,480 --> 00:30:40,100
engineering is by definition about the

00:30:37,009 --> 00:30:44,570
hardest thing that we can do and I'll

00:30:40,100 --> 00:30:49,119
say why the issue is everything that is

00:30:44,570 --> 00:30:53,269
less complex like not on the bleeding

00:30:49,119 --> 00:30:56,570
difficult edge of we're about to fail to

00:30:53,269 --> 00:31:00,409
complexity everything that's safely back

00:30:56,570 --> 00:31:02,929
here this is easy there is probably

00:31:00,409 --> 00:31:06,230
existing solutions for this this has

00:31:02,929 --> 00:31:08,210
been solved all right there are open

00:31:06,230 --> 00:31:10,220
source solutions and there are solutions

00:31:08,210 --> 00:31:13,749
you know just all over the place

00:31:10,220 --> 00:31:17,720
trip over easy problem solved right

00:31:13,749 --> 00:31:20,269
right at the boundary this is where the

00:31:17,720 --> 00:31:23,570
interesting work is happening because

00:31:20,269 --> 00:31:26,600
anything further out here we can't solve

00:31:23,570 --> 00:31:29,409
all right software engineering is the

00:31:26,600 --> 00:31:31,610
act of balancing on this edge and

00:31:29,409 --> 00:31:34,519
software engineering practices are

00:31:31,610 --> 00:31:39,200
everything that we do to help you lean

00:31:34,519 --> 00:31:42,830
further out code review helps you lean

00:31:39,200 --> 00:31:46,159
further out in a big big way right

00:31:42,830 --> 00:31:48,350
because software engineering is hard if

00:31:46,159 --> 00:31:49,990
it wasn't hard we would be doing

00:31:48,350 --> 00:31:52,940
something else

00:31:49,990 --> 00:31:54,980
since software engineering is hard it

00:31:52,940 --> 00:31:59,480
makes sense to have more than one pair

00:31:54,980 --> 00:32:00,950
of eyes on it and this is not a it makes

00:31:59,480 --> 00:32:03,559
sense to have more than one pair of eyes

00:32:00,950 --> 00:32:06,499
on it because I'm only a junior

00:32:03,559 --> 00:32:08,149
programmer this is straight up it makes

00:32:06,499 --> 00:32:11,600
sense to have more than one pair of eyes

00:32:08,149 --> 00:32:13,420
on it I regularly do code reviews for

00:32:11,600 --> 00:32:17,590
some of the very best pro

00:32:13,420 --> 00:32:20,320
rumors in existence and it is never the

00:32:17,590 --> 00:32:22,750
case that on a meaningful chunk of

00:32:20,320 --> 00:32:25,840
functional change there isn't something

00:32:22,750 --> 00:32:27,370
that I catch it could be a perform like

00:32:25,840 --> 00:32:30,130
oh we could get slightly better

00:32:27,370 --> 00:32:33,900
performance if you did this or that

00:32:30,130 --> 00:32:37,060
looks like a copy instead of a move or

00:32:33,900 --> 00:32:38,110
often you know this needs to be

00:32:37,060 --> 00:32:40,270
documented better

00:32:38,110 --> 00:32:42,220
like I know mostly what you're doing and

00:32:40,270 --> 00:32:44,230
six months from now when we have to

00:32:42,220 --> 00:32:45,910
change this code again I don't want to

00:32:44,230 --> 00:32:48,640
have to refigure this out my comment

00:32:45,910 --> 00:32:50,410
that right code review

00:32:48,640 --> 00:32:52,960
like if code review works for thee and

00:32:50,410 --> 00:32:55,210
and is valuable for the very very very

00:32:52,960 --> 00:32:57,550
best programmers in the world it's

00:32:55,210 --> 00:32:58,260
valuable for you to write take it

00:32:57,550 --> 00:33:04,630
seriously

00:32:58,260 --> 00:33:08,110
please in addition to the style guides

00:33:04,630 --> 00:33:14,260
the force of law we have also found that

00:33:08,110 --> 00:33:16,180
there is some need for guidance like on

00:33:14,260 --> 00:33:18,310
average you really probably want to

00:33:16,180 --> 00:33:22,480
avoid doing this but it's stuff that

00:33:18,310 --> 00:33:26,170
it's a much lower bar I would draw the

00:33:22,480 --> 00:33:28,120
following comparison we get a lot of

00:33:26,170 --> 00:33:30,100
additional warnings and things added to

00:33:28,120 --> 00:33:33,910
our tool chains alright we add more

00:33:30,100 --> 00:33:36,310
warnings to clang and then make those

00:33:33,910 --> 00:33:37,450
into errors so that the build fails but

00:33:36,310 --> 00:33:39,460
you can only do that if you are a

00:33:37,450 --> 00:33:43,690
hundred percent certain that that is

00:33:39,460 --> 00:33:48,090
always an error or in the unlikely event

00:33:43,690 --> 00:33:50,380
it isn't an error there's an easy way to

00:33:48,090 --> 00:33:56,320
disambiguate it to the compiler right

00:33:50,380 --> 00:33:59,460
for example if foo equals five instead

00:33:56,320 --> 00:34:02,380
of if two equals equals five right

00:33:59,460 --> 00:34:05,710
you meant equals equals the compiler

00:34:02,380 --> 00:34:07,600
tells you that these days if you really

00:34:05,710 --> 00:34:10,720
meant single equals if you really meant

00:34:07,600 --> 00:34:12,460
assignment it says in the compiler

00:34:10,720 --> 00:34:14,320
message just add an extra set of parens

00:34:12,460 --> 00:34:18,640
there then I'll trust that that's what

00:34:14,320 --> 00:34:20,530
you meant right same thing here right

00:34:18,640 --> 00:34:23,200
the style guide is the things like the

00:34:20,530 --> 00:34:26,419
compiler and then we have best practices

00:34:23,200 --> 00:34:31,760
which is things like that are not quite

00:34:26,419 --> 00:34:35,500
as cut-and-dry one of the things that i

00:34:31,760 --> 00:34:43,639
cite a lot in our best practices series

00:34:35,500 --> 00:34:46,099
is things like use our string view

00:34:43,639 --> 00:34:49,970
equivalent in api's that are accepting

00:34:46,099 --> 00:34:52,540
strings unless you're trying to store it

00:34:49,970 --> 00:34:57,559
yourself then take that string by value

00:34:52,540 --> 00:35:00,559
or things like don't use G flags our

00:34:57,559 --> 00:35:02,530
library or flag library don't define

00:35:00,559 --> 00:35:07,549
flags in the middle of library code

00:35:02,530 --> 00:35:10,520
define flags in main because flags are

00:35:07,549 --> 00:35:12,650
Global's and it's just not good

00:35:10,520 --> 00:35:14,950
engineering practice to have all of your

00:35:12,650 --> 00:35:18,170
library behavior dependent on Global's

00:35:14,950 --> 00:35:22,760
these sorts of things you don't want

00:35:18,170 --> 00:35:28,520
like enforced by law but they're good

00:35:22,760 --> 00:35:31,329
advice one of the things we do is we

00:35:28,520 --> 00:35:35,480
have a process called readability

00:35:31,329 --> 00:35:38,329
readability started long long ago the

00:35:35,480 --> 00:35:43,030
first non-owner employee of the company

00:35:38,329 --> 00:35:45,859
employee ID number three made it his job

00:35:43,030 --> 00:35:51,109
whenever a new hire came on board he

00:35:45,859 --> 00:35:52,940
wanted to explain how Google works this

00:35:51,109 --> 00:35:58,130
obviously didn't scale after some point

00:35:52,940 --> 00:35:59,990
and so some volunteers kind of joined

00:35:58,130 --> 00:36:02,150
the effort like okay we want to make

00:35:59,990 --> 00:36:03,680
sure that you know how Google works this

00:36:02,150 --> 00:36:07,220
is back in the days when Google was one

00:36:03,680 --> 00:36:09,349
thing and it's made a lot of sense what

00:36:07,220 --> 00:36:12,920
they were really doing was providing

00:36:09,349 --> 00:36:14,900
mentorship all right we need to explain

00:36:12,920 --> 00:36:16,640
to you this is where the utility code

00:36:14,900 --> 00:36:18,770
goes this is where the library code goes

00:36:16,640 --> 00:36:19,220
these are this is how the style guide

00:36:18,770 --> 00:36:21,770
works

00:36:19,220 --> 00:36:24,380
these are whether you like like the the

00:36:21,770 --> 00:36:26,690
tools live right we need you not to

00:36:24,380 --> 00:36:29,059
rebuild all of those things just because

00:36:26,690 --> 00:36:32,150
you're new here we need you to know like

00:36:29,059 --> 00:36:33,589
how our stuff works right and then once

00:36:32,150 --> 00:36:38,119
you've demonstrated that you know that

00:36:33,589 --> 00:36:40,140
then we say okay now we trust you

00:36:38,119 --> 00:36:42,690
the way that we do this

00:36:40,140 --> 00:36:45,330
is every change that is sent out for

00:36:42,690 --> 00:36:49,770
review in addition to having to be code

00:36:45,330 --> 00:36:51,660
reviewed by someone has to be someone

00:36:49,770 --> 00:36:54,390
that has readability in that language

00:36:51,660 --> 00:36:56,760
it's kind of a badge someone that has

00:36:54,390 --> 00:36:58,320
readability in that language needs to

00:36:56,760 --> 00:37:01,350
sign off on it if it's the original

00:36:58,320 --> 00:37:03,900
author of the change that's fine if it's

00:37:01,350 --> 00:37:06,780
the primary reviewer on the change also

00:37:03,900 --> 00:37:09,720
fine if neither of those people actually

00:37:06,780 --> 00:37:12,030
has the readability badge for C++ they

00:37:09,720 --> 00:37:14,940
need to get a C++ reviewer to go to like

00:37:12,030 --> 00:37:18,150
check no no no that is not how you use

00:37:14,940 --> 00:37:20,640
Const or nope nope nope you are you're

00:37:18,150 --> 00:37:23,070
dangling memory there you need a

00:37:20,640 --> 00:37:26,580
language person to to check through

00:37:23,070 --> 00:37:28,710
things I don't know that you have to

00:37:26,580 --> 00:37:31,320
have something like that but I strongly

00:37:28,710 --> 00:37:35,550
suggest you come up with some way to

00:37:31,320 --> 00:37:40,770
mentor and on board your new hires right

00:37:35,550 --> 00:37:43,530
and the more the more heavily you invest

00:37:40,770 --> 00:37:46,380
in that mentorship the better your

00:37:43,530 --> 00:37:49,950
outcomes are going to be in my in my

00:37:46,380 --> 00:37:51,720
opinion because that like the point

00:37:49,950 --> 00:37:53,720
where you've just hired them is the

00:37:51,720 --> 00:37:56,580
point where you have the best ability to

00:37:53,720 --> 00:38:01,760
bring them in to consistency with how

00:37:56,580 --> 00:38:04,710
you want the organization to run and

00:38:01,760 --> 00:38:06,690
then you may I don't know it's

00:38:04,710 --> 00:38:08,370
definitely an order of importance you

00:38:06,690 --> 00:38:11,730
may want to have some sort of churn

00:38:08,370 --> 00:38:14,790
policy we added a rule at one point but

00:38:11,730 --> 00:38:17,580
still we obey that the infrastructure

00:38:14,790 --> 00:38:20,460
teams are not allowed to change things

00:38:17,580 --> 00:38:23,090
and push the work of reacting to that

00:38:20,460 --> 00:38:26,190
change off onto everyone else just

00:38:23,090 --> 00:38:28,440
willy-nilly right if they're changing

00:38:26,190 --> 00:38:33,840
things they should do the work of moving

00:38:28,440 --> 00:38:35,640
you from system a to system B and you

00:38:33,840 --> 00:38:38,430
may also want something about just

00:38:35,640 --> 00:38:42,450
making textual changes across the whole

00:38:38,430 --> 00:38:46,440
code base depending on if you're worried

00:38:42,450 --> 00:38:49,590
about people making silly changes at

00:38:46,440 --> 00:38:50,720
scale we occasionally have to tell

00:38:49,590 --> 00:38:53,230
people no

00:38:50,720 --> 00:38:56,840
I don't care if you go fix all the

00:38:53,230 --> 00:38:57,740
British Spelling's of grey it's not a

00:38:56,840 --> 00:39:04,070
good use of our time

00:38:57,740 --> 00:39:08,000
oh you'll also want technology clearly

00:39:04,070 --> 00:39:09,020
we're engineers we like technology where

00:39:08,000 --> 00:39:11,180
do you invest for long-term

00:39:09,020 --> 00:39:13,609
sustainability you're gonna probably

00:39:11,180 --> 00:39:15,020
want distributed building tests right

00:39:13,609 --> 00:39:16,340
you probably have some sort of

00:39:15,020 --> 00:39:19,310
distributed build system if you're

00:39:16,340 --> 00:39:22,190
starting to scale up I would strongly

00:39:19,310 --> 00:39:24,800
encourage that you consider using the

00:39:22,190 --> 00:39:26,840
same distributed building system to

00:39:24,800 --> 00:39:31,160
distribute running of your tests as well

00:39:26,840 --> 00:39:33,710
right because like I said earlier if it

00:39:31,160 --> 00:39:35,859
takes like two hours for your developers

00:39:33,710 --> 00:39:39,580
to run the tests and make sure that

00:39:35,859 --> 00:39:43,760
everything's okay that reduces their

00:39:39,580 --> 00:39:47,630
development like cycle usefulness quite

00:39:43,760 --> 00:39:49,190
a bit if you can distribute that if you

00:39:47,630 --> 00:39:52,310
can make the tests run nice and quick

00:39:49,190 --> 00:39:53,540
right they're gonna be much happier

00:39:52,310 --> 00:39:58,250
they're gonna run the tests more and

00:39:53,540 --> 00:40:00,200
your codebase will work better for

00:39:58,250 --> 00:40:03,470
consistency you probably want to pick a

00:40:00,200 --> 00:40:06,859
common test framework I like G test

00:40:03,470 --> 00:40:09,230
there are many find one be consistent

00:40:06,859 --> 00:40:11,119
don't let every team make individual

00:40:09,230 --> 00:40:13,790
changes to it and tweak their own copy

00:40:11,119 --> 00:40:17,450
like use one make it common make it

00:40:13,790 --> 00:40:19,280
consistent tests ought to be built into

00:40:17,450 --> 00:40:21,410
the build graphs as I kind of alluded to

00:40:19,280 --> 00:40:23,780
but your test should live right

00:40:21,410 --> 00:40:25,099
alongside the code should live in the

00:40:23,780 --> 00:40:28,369
same directory as the code that they're

00:40:25,099 --> 00:40:32,060
testing and should be easy for everyone

00:40:28,369 --> 00:40:33,589
to run in a common sort of way and you

00:40:32,060 --> 00:40:36,880
get into things like how do you actually

00:40:33,589 --> 00:40:39,530
generate a change at scale for hashing

00:40:36,880 --> 00:40:42,980
this is not really an issue right we're

00:40:39,530 --> 00:40:45,470
gonna go into the standard library we're

00:40:42,980 --> 00:40:47,000
going to go into our hash utilities

00:40:45,470 --> 00:40:48,890
we're going to go into a couple like

00:40:47,000 --> 00:40:52,790
known places and we're going to make

00:40:48,890 --> 00:40:55,130
very targeted changes there but there

00:40:52,790 --> 00:40:58,119
are other types of changes where you

00:40:55,130 --> 00:41:01,400
need to update the text of the code base

00:40:58,119 --> 00:41:02,890
we had a talk on this last year my

00:41:01,400 --> 00:41:05,980
colleague Hyrum

00:41:02,890 --> 00:41:09,519
talked about how we use clang mr and

00:41:05,980 --> 00:41:14,980
some other tools to generate the textual

00:41:09,519 --> 00:41:18,339
change and figure out how to test and

00:41:14,980 --> 00:41:23,289
get that the the massive change

00:41:18,339 --> 00:41:26,260
submitted clang mr we could give a whole

00:41:23,289 --> 00:41:30,250
talk we probably have on clang Ammar but

00:41:26,260 --> 00:41:33,130
very briefly this is clang Map Reduce

00:41:30,250 --> 00:41:36,400
and we are using the clang internals

00:41:33,130 --> 00:41:39,869
like take the abstract syntax tree after

00:41:36,400 --> 00:41:43,150
the code has been parsed and apply

00:41:39,869 --> 00:41:46,359
pattern matching to the syntax tree to

00:41:43,150 --> 00:41:48,299
find at every place where a call is

00:41:46,359 --> 00:41:52,000
being made to this particular function

00:41:48,299 --> 00:41:54,160
with a parameter of this sort of type

00:41:52,000 --> 00:41:57,700
and you can express arbitrarily

00:41:54,160 --> 00:42:00,369
complicated things in there it's far far

00:41:57,700 --> 00:42:04,359
far more powerful than regular

00:42:00,369 --> 00:42:06,069
expressions obviously and then once you

00:42:04,359 --> 00:42:10,210
have identified a piece of code like

00:42:06,069 --> 00:42:14,380
that generate an actual edit for that

00:42:10,210 --> 00:42:21,099
call then it's just a matter of checking

00:42:14,380 --> 00:42:22,329
in all of those 10,000 edits other

00:42:21,099 --> 00:42:24,339
things that are gonna be very useful for

00:42:22,329 --> 00:42:27,539
the maintainer zuv your code base are

00:42:24,339 --> 00:42:30,519
things for code base understanding I

00:42:27,539 --> 00:42:33,670
really really like that we have an

00:42:30,519 --> 00:42:35,859
indexer this is a new concept as far as

00:42:33,670 --> 00:42:39,160
I'm aware we have open sourced the

00:42:35,859 --> 00:42:41,440
indexer I recommend that you maybe

00:42:39,160 --> 00:42:43,029
figure out how to spin it up and index

00:42:41,440 --> 00:42:45,819
your code because you will find

00:42:43,029 --> 00:42:50,380
surprising new uses for this the indexer

00:42:45,819 --> 00:42:53,890
idea is C++ you cannot run search for

00:42:50,380 --> 00:42:57,960
get to find all of the places where a

00:42:53,890 --> 00:43:02,460
get method is called on your class foo

00:42:57,960 --> 00:43:06,309
but you can ask the indexer hey index I

00:43:02,460 --> 00:43:10,240
have class foo tell me everywhere that

00:43:06,309 --> 00:43:12,609
dot get for that class is called this is

00:43:10,240 --> 00:43:14,770
based on we did a build last night of

00:43:12,609 --> 00:43:18,400
the whole code base

00:43:14,770 --> 00:43:22,180
and just remember everything about the

00:43:18,400 --> 00:43:22,510
ast from the previous evening okay find

00:43:22,180 --> 00:43:25,630
me

00:43:22,510 --> 00:43:27,880
every file where that exact function on

00:43:25,630 --> 00:43:30,340
that exact class is being called and

00:43:27,880 --> 00:43:32,470
this will pierce through macros and

00:43:30,340 --> 00:43:34,210
templates and all sorts of things right

00:43:32,470 --> 00:43:36,550
to get you exactly the set of things

00:43:34,210 --> 00:43:39,160
that you need it's very handy for

00:43:36,550 --> 00:43:40,960
maintainer you probably also need a

00:43:39,160 --> 00:43:41,650
proper regular expression search and

00:43:40,960 --> 00:43:45,490
things like that

00:43:41,650 --> 00:43:47,260
I recommend investing there and you

00:43:45,490 --> 00:43:49,990
definitely need tooling for bug

00:43:47,260 --> 00:43:52,780
reduction because the easiest way to not

00:43:49,990 --> 00:43:54,580
have to like make a giant change is to

00:43:52,780 --> 00:43:57,310
prevent those problems from happening in

00:43:54,580 --> 00:44:00,160
the first place right you want a good

00:43:57,310 --> 00:44:02,800
healthy code base run continuous tests

00:44:00,160 --> 00:44:06,340
run continuous tests with the sanitizers

00:44:02,800 --> 00:44:08,560
turned on I am also a big fan of static

00:44:06,340 --> 00:44:11,110
annotations we use static annotations

00:44:08,560 --> 00:44:14,290
for thread safety this is available in

00:44:11,110 --> 00:44:17,110
clang and older GCC s I think we stopped

00:44:14,290 --> 00:44:19,510
maintaining it in GCC and the idea is

00:44:17,110 --> 00:44:22,210
basically this we're gonna have some

00:44:19,510 --> 00:44:27,180
class we can say there is data in this

00:44:22,210 --> 00:44:30,370
class that data is guarded by this lock

00:44:27,180 --> 00:44:33,520
nice and simple and then I will also say

00:44:30,370 --> 00:44:39,190
you cannot call the function update with

00:44:33,520 --> 00:44:42,340
that lock held just by saying guarded by

00:44:39,190 --> 00:44:45,730
lock it is now a compilation error if

00:44:42,340 --> 00:44:48,730
you touch data in a code path that

00:44:45,730 --> 00:44:53,770
doesn't have the lock held you can also

00:44:48,730 --> 00:44:57,240
prevent deadlocks and it also enhances

00:44:53,770 --> 00:45:00,550
the the analysis understanding of the

00:44:57,240 --> 00:45:03,160
control flow if you tagged things as you

00:45:00,550 --> 00:45:05,230
cannot call this function with the lock

00:45:03,160 --> 00:45:09,610
held and you must call this function

00:45:05,230 --> 00:45:11,620
with the lock held this is thread safety

00:45:09,610 --> 00:45:14,170
enforced by the compiler every time that

00:45:11,620 --> 00:45:16,120
I inherit a package kind of an orphaned

00:45:14,170 --> 00:45:18,070
package in our code base that has any

00:45:16,120 --> 00:45:20,680
threading behavior the very first thing

00:45:18,070 --> 00:45:24,580
I do is go annotate just the simple

00:45:20,680 --> 00:45:26,380
parts run the build build always fails

00:45:24,580 --> 00:45:29,310
there are always books

00:45:26,380 --> 00:45:33,570
all right this is super easy high-value

00:45:29,310 --> 00:45:33,570
raise your hand when you spot the book a

00:45:33,900 --> 00:45:39,700
couple hands starting to go up there we

00:45:36,160 --> 00:45:42,420
go 10 seconds for the quick ones a

00:45:39,700 --> 00:45:46,090
couple hands still haven't gone it

00:45:42,420 --> 00:45:48,580
clearly the bug is there's a path out of

00:45:46,090 --> 00:45:50,680
here where the lock is not released

00:45:48,580 --> 00:45:55,510
you should probably fix this by having

00:45:50,680 --> 00:45:58,390
REI like on your locks but not everyone

00:45:55,510 --> 00:46:01,480
does this by virtue of just having

00:45:58,390 --> 00:46:05,400
annotated the mutex class that

00:46:01,480 --> 00:46:08,350
annotation the the compiler now knows Oh

00:46:05,400 --> 00:46:11,020
unless I specifically said otherwise in

00:46:08,350 --> 00:46:13,440
this function every path out of this

00:46:11,020 --> 00:46:16,450
function better have the same

00:46:13,440 --> 00:46:18,700
characteristics on the lock specifically

00:46:16,450 --> 00:46:24,550
I took it I need to release it on every

00:46:18,700 --> 00:46:25,870
path those are great they don't catch

00:46:24,550 --> 00:46:30,220
everything but they certainly catch a

00:46:25,870 --> 00:46:32,590
lot we can do more complicated static

00:46:30,220 --> 00:46:34,450
analysis with things like clean tidy

00:46:32,590 --> 00:46:35,530
see also tricorder there's been talks

00:46:34,450 --> 00:46:37,420
about that in the last couple years

00:46:35,530 --> 00:46:40,510
tricorder is our general-purpose

00:46:37,420 --> 00:46:43,240
language agnostic platform for plugging

00:46:40,510 --> 00:46:45,070
in static analysis tools and having the

00:46:43,240 --> 00:46:48,340
results of those static analysis tools

00:46:45,070 --> 00:46:50,890
surfaced in our code review tool which

00:46:48,340 --> 00:46:52,960
is exactly the point well which is the

00:46:50,890 --> 00:46:54,640
latest point in the development workflow

00:46:52,960 --> 00:46:58,630
that you really want that information

00:46:54,640 --> 00:47:00,880
surfaced it'd be nice if you had that in

00:46:58,630 --> 00:47:02,320
your editor as you were going but

00:47:00,880 --> 00:47:04,090
sometimes the static analysis is a

00:47:02,320 --> 00:47:06,160
little too expensive for those things so

00:47:04,090 --> 00:47:10,030
at least trigger it so that it's there

00:47:06,160 --> 00:47:12,190
surfaced at code review time client ID

00:47:10,030 --> 00:47:15,640
in particular is automatic calm polite

00:47:12,190 --> 00:47:19,750
compiler based code understanding

00:47:15,640 --> 00:47:23,080
looking for particular anti patterns so

00:47:19,750 --> 00:47:29,700
you could have something like this who

00:47:23,080 --> 00:47:31,930
sees it couple yeah correct ID sees it

00:47:29,700 --> 00:47:35,020
and this is not particularly

00:47:31,930 --> 00:47:36,580
revolutionary but it's nice because the

00:47:35,020 --> 00:47:39,609
compilers are better at spotting this

00:47:36,580 --> 00:47:41,680
than the humans right this is easy quick

00:47:39,609 --> 00:47:44,200
Quinn right you can stop worrying about

00:47:41,680 --> 00:47:46,749
stuff like this and just offload to the

00:47:44,200 --> 00:47:48,279
compiler focus and code review on the

00:47:46,749 --> 00:47:50,109
higher-level things like is this

00:47:48,279 --> 00:47:53,349
documented properly is this a sensible

00:47:50,109 --> 00:47:55,569
design are you doing are you solving the

00:47:53,349 --> 00:47:58,029
right problem

00:47:55,569 --> 00:48:03,069
compilers not as good at that sort of

00:47:58,029 --> 00:48:05,319
thing and then this is kind of the most

00:48:03,069 --> 00:48:07,150
important part of all of this you can

00:48:05,319 --> 00:48:09,039
have practices in place you can have

00:48:07,150 --> 00:48:11,890
technology in place to try to prevent

00:48:09,039 --> 00:48:15,069
problems from coming in but you're gonna

00:48:11,890 --> 00:48:17,049
when it comes down to it if it is a

00:48:15,069 --> 00:48:18,940
crisis if you have to update your hash

00:48:17,049 --> 00:48:20,739
if you have to update your compiler if

00:48:18,940 --> 00:48:22,359
you have to update a open SSL and

00:48:20,739 --> 00:48:26,619
rebuild and deploy and all of those

00:48:22,359 --> 00:48:30,279
things do you have practice in actually

00:48:26,619 --> 00:48:32,979
doing that right because it's one thing

00:48:30,279 --> 00:48:35,499
to know in theory that you can make a

00:48:32,979 --> 00:48:38,789
change and it is quite another thing to

00:48:35,499 --> 00:48:44,619
know that you can actually get it pushed

00:48:38,789 --> 00:48:46,869
all right it turns out that fixing like

00:48:44,619 --> 00:48:50,019
doing low-level code based maintenance

00:48:46,869 --> 00:48:52,479
doing cross-cutting broad textual

00:48:50,019 --> 00:48:55,299
updates to the code making changes to

00:48:52,479 --> 00:48:57,670
core libraries all of those things are a

00:48:55,299 --> 00:48:59,469
skill like anything else it is a sub

00:48:57,670 --> 00:49:00,400
skill of the grater thing of being a

00:48:59,469 --> 00:49:02,619
software engineer

00:49:00,400 --> 00:49:05,799
I put there a skill and all skills get

00:49:02,619 --> 00:49:08,229
better with practice you will need

00:49:05,799 --> 00:49:12,489
practice you will need some sort of

00:49:08,229 --> 00:49:16,119
insight into like how is this all gonna

00:49:12,489 --> 00:49:19,059
work you like off the top of your head

00:49:16,119 --> 00:49:21,339
can anyone estimate what is the largest

00:49:19,059 --> 00:49:27,789
number of files that you could in your

00:49:21,339 --> 00:49:31,299
codebase submit in one change you might

00:49:27,789 --> 00:49:35,799
want to know that you might also want to

00:49:31,299 --> 00:49:37,749
know why not to do that right if you

00:49:35,799 --> 00:49:40,979
submit a change of that maximum sort of

00:49:37,749 --> 00:49:43,329
size will you be able to roll it back

00:49:40,979 --> 00:49:47,410
will you be able to roll it back two

00:49:43,329 --> 00:49:48,729
weeks from now without practice you will

00:49:47,410 --> 00:49:50,559
not know the answers to these questions

00:49:48,729 --> 00:49:51,940
and I cannot tell you the answers to

00:49:50,559 --> 00:49:53,210
these questions because it clearly

00:49:51,940 --> 00:49:56,270
depends on your codebase

00:49:53,210 --> 00:49:58,280
your organization right you'll need to

00:49:56,270 --> 00:50:01,400
figure out how to do those things on

00:49:58,280 --> 00:50:06,430
your own and you certainly don't want to

00:50:01,400 --> 00:50:09,800
do that while the thing is on fire I

00:50:06,430 --> 00:50:12,320
will revise I will revisit you're gonna

00:50:09,800 --> 00:50:15,590
need testing right you cannot know that

00:50:12,320 --> 00:50:21,070
something is safe without tests it is

00:50:15,590 --> 00:50:21,070
not sufficient but it is necessary

00:50:21,110 --> 00:50:26,510
you will need policies to mitigate the

00:50:23,600 --> 00:50:29,000
crazy because I guarantee that the one

00:50:26,510 --> 00:50:31,340
guy on that team that sits off in his

00:50:29,000 --> 00:50:34,070
own little corner and has built a whole

00:50:31,340 --> 00:50:36,530
domain-specific language is making

00:50:34,070 --> 00:50:39,260
trouble for your codebase guarantee it

00:50:36,530 --> 00:50:42,770
right you need to have some policies to

00:50:39,260 --> 00:50:46,460
like rain that stuff in you need

00:50:42,770 --> 00:50:49,610
technology technology can help avoid the

00:50:46,460 --> 00:50:53,060
necessity of like reacting in a panic

00:50:49,610 --> 00:50:55,700
and you need practice you need practice

00:50:53,060 --> 00:51:00,700
you really really really need practice

00:50:55,700 --> 00:51:00,700
you cannot do this live the first time

00:51:01,630 --> 00:51:07,730
over a long enough period change is

00:51:04,070 --> 00:51:09,220
inevitable think about how long your

00:51:07,730 --> 00:51:13,370
codebase is going to be with you and

00:51:09,220 --> 00:51:15,860
decide if you are prepared for a scary

00:51:13,370 --> 00:51:20,090
one if you are prepared for the big one

00:51:15,860 --> 00:51:21,530
in that period if the set of important

00:51:20,090 --> 00:51:24,620
changes that you know you ought to get

00:51:21,530 --> 00:51:28,940
to is only growing you are eventually

00:51:24,620 --> 00:51:31,150
going to fail if you cannot chip away at

00:51:28,940 --> 00:51:33,890
the list of yeah we should get to that

00:51:31,150 --> 00:51:35,780
eventually the technical debt is going

00:51:33,890 --> 00:51:39,050
to overwhelm you on a long enough time

00:51:35,780 --> 00:51:41,780
horizon right you might have 10 years

00:51:39,050 --> 00:51:45,320
before it starts to matter I hope you do

00:51:41,780 --> 00:51:47,950
good luck but eventually these things

00:51:45,320 --> 00:51:52,360
add up there are definitely problems

00:51:47,950 --> 00:51:55,490
that were introduced in our code base

00:51:52,360 --> 00:51:57,320
almost 10 years ago that we are just now

00:51:55,490 --> 00:52:02,330
getting around to like properly solving

00:51:57,320 --> 00:52:04,490
and unfortunately there are complicated

00:52:02,330 --> 00:52:06,050
reasons why they went from a low level

00:52:04,490 --> 00:52:08,390
annoyance

00:52:06,050 --> 00:52:09,920
yeah if we don't solve that in two years

00:52:08,390 --> 00:52:13,340
it is going to be a significant

00:52:09,920 --> 00:52:15,349
organizational problem now we have a

00:52:13,340 --> 00:52:18,650
time line like we cannot fix it

00:52:15,349 --> 00:52:22,630
leisurely we have to go do it now I wish

00:52:18,650 --> 00:52:22,630
that we had planned it slightly better

00:52:23,920 --> 00:52:31,570
technology coding standards policies

00:52:26,950 --> 00:52:35,900
more technology will make it possible to

00:52:31,570 --> 00:52:36,470
make changes safely and practice makes

00:52:35,900 --> 00:52:40,390
perfect

00:52:36,470 --> 00:52:40,390
okay good luck

00:52:58,580 --> 00:53:03,960
hello okay um I have a question or maybe

00:53:02,370 --> 00:53:07,350
try to get your thoughts on it you said

00:53:03,960 --> 00:53:09,150
something earlier about how ten years

00:53:07,350 --> 00:53:12,120
ago not a lot of startups or even small

00:53:09,150 --> 00:53:13,710
companies use source control but was

00:53:12,120 --> 00:53:15,330
that a consequence of it being more

00:53:13,710 --> 00:53:16,680
difficult to set up source control at

00:53:15,330 --> 00:53:18,570
that time and now it's very easy because

00:53:16,680 --> 00:53:21,780
we have great tools and things that help

00:53:18,570 --> 00:53:24,840
us out so is that why that changed and

00:53:21,780 --> 00:53:26,610
is testing getting that way where people

00:53:24,840 --> 00:53:28,080
don't do testing because it's difficult

00:53:26,610 --> 00:53:30,350
to do and are we getting better at

00:53:28,080 --> 00:53:33,780
testing I don't know that there's a

00:53:30,350 --> 00:53:36,150
definite yes or no to that I would argue

00:53:33,780 --> 00:53:38,310
that source control 10 years ago I mean

00:53:36,150 --> 00:53:41,370
we still had subversion that was fine it

00:53:38,310 --> 00:53:44,310
wasn't so bad I mean it's certainly

00:53:41,370 --> 00:53:46,980
better than RCS like if you go back to

00:53:44,310 --> 00:53:48,450
RCS then yeah like I can understand that

00:53:46,980 --> 00:53:52,980
you might not want your organization to

00:53:48,450 --> 00:53:55,080
pay that cost for source control yeah I

00:53:52,980 --> 00:53:56,820
think some of it was advancement in

00:53:55,080 --> 00:54:00,870
technology and I think a lot of it is

00:53:56,820 --> 00:54:02,790
the far simpler thing of as an industry

00:54:00,870 --> 00:54:05,430
we've gathered enough war stories and

00:54:02,790 --> 00:54:07,500
battle wounds to realize like no you

00:54:05,430 --> 00:54:10,380
have to do that

00:54:07,500 --> 00:54:15,960
I suspect the same as happening in

00:54:10,380 --> 00:54:17,970
testing I hope sorry do you have any

00:54:15,960 --> 00:54:20,400
suggestions for convincing co-workers

00:54:17,970 --> 00:54:30,240
and our management that testing and fast

00:54:20,400 --> 00:54:32,760
builds are a good idea yellow that's

00:54:30,240 --> 00:54:38,580
what I thought no like there's there's

00:54:32,760 --> 00:54:42,390
more you should make the case you know

00:54:38,580 --> 00:54:44,370
like if it's not you know clear by

00:54:42,390 --> 00:54:48,150
inspection that something would have

00:54:44,370 --> 00:54:52,020
been caught earlier start keeping a log

00:54:48,150 --> 00:54:55,320
right keep your secret log of like yeah

00:54:52,020 --> 00:54:57,540
we shipped this bug that bug was pretty

00:54:55,320 --> 00:55:00,330
clear that we could have caught it by a

00:54:57,540 --> 00:55:02,040
unit test we shipped this bug

00:55:00,330 --> 00:55:05,120
pretty clear that that would have been

00:55:02,040 --> 00:55:06,930
caught by a unit test shift this book

00:55:05,120 --> 00:55:09,510
integration test would have been better

00:55:06,930 --> 00:55:12,510
for that right and if you come to them

00:55:09,510 --> 00:55:14,970
with probably you know three months

00:55:12,510 --> 00:55:19,800
maybe six months worth of like log on

00:55:14,970 --> 00:55:23,070
that write estimate like took us two

00:55:19,800 --> 00:55:26,150
weeks to debug this right it takes a day

00:55:23,070 --> 00:55:28,910
tops to write a decent unit test tops

00:55:26,150 --> 00:55:33,630
right most the time is more like hours

00:55:28,910 --> 00:55:38,820
all right like that's a pure financial

00:55:33,630 --> 00:55:41,880
sort of trade-off right like the I think

00:55:38,820 --> 00:55:44,340
the hard part is a little bit of that

00:55:41,880 --> 00:55:46,590
like I certainly have met management

00:55:44,340 --> 00:55:49,170
that was unconvinced that tests were

00:55:46,590 --> 00:55:51,510
adding to the bottom line but I don't

00:55:49,170 --> 00:55:53,220
think it's a super hard case to make the

00:55:51,510 --> 00:55:56,670
thing that I think is usually harder is

00:55:53,220 --> 00:55:58,590
the engineers who don't like feeling

00:55:56,670 --> 00:56:01,560
like you're saying that they're not good

00:55:58,590 --> 00:56:04,800
at their job right and it's not about

00:56:01,560 --> 00:56:06,810
that it's about it's not about proving

00:56:04,800 --> 00:56:09,960
in the moment that your code was correct

00:56:06,810 --> 00:56:12,480
it is about proving for evermore so the

00:56:09,960 --> 00:56:16,320
code stays correct because change is

00:56:12,480 --> 00:56:18,390
coming right and without some sort of

00:56:16,320 --> 00:56:24,210
proof that the code stained correct

00:56:18,390 --> 00:56:27,120
in the face of change mm-hm so but it's

00:56:24,210 --> 00:56:28,620
it's hard we're gonna all have to we're

00:56:27,120 --> 00:56:32,190
gonna have to share stories of how we

00:56:28,620 --> 00:56:36,870
convinced our organizations to test next

00:56:32,190 --> 00:56:39,360
year yeah hi thanks for the talk could

00:56:36,870 --> 00:56:41,760
you share any best practices in how to

00:56:39,360 --> 00:56:44,070
handle avi stability or do you simply

00:56:41,760 --> 00:56:45,990
not care because he using monolithic big

00:56:44,070 --> 00:56:49,170
thing with everything so you could even

00:56:45,990 --> 00:56:51,720
change to STL did you say a bi or API

00:56:49,170 --> 00:56:53,400
well both right it's kind of related

00:56:51,720 --> 00:56:55,500
like if you change to avi you need to

00:56:53,400 --> 00:57:00,570
recompile everything and that takes a

00:56:55,500 --> 00:57:02,750
long time yeah in a monolithic codebase

00:57:00,570 --> 00:57:05,910
you worry a lot less about that

00:57:02,750 --> 00:57:09,030
ABI compatibility you definitely do have

00:57:05,910 --> 00:57:10,870
to work worried about because like we

00:57:09,030 --> 00:57:13,240
have third-party vendor code sometimes

00:57:10,870 --> 00:57:16,770
I'm like there are bits that just have

00:57:13,240 --> 00:57:19,660
to be precompiled you can't break that

00:57:16,770 --> 00:57:20,920
so you you will have like your tooling

00:57:19,660 --> 00:57:24,010
teams will have to worry about things

00:57:20,920 --> 00:57:27,640
like a bi compatibility for api

00:57:24,010 --> 00:57:31,210
compatibility having knowledge of how

00:57:27,640 --> 00:57:33,490
your code is being used is the big win

00:57:31,210 --> 00:57:35,740
right like we have a monolithic code

00:57:33,490 --> 00:57:38,260
base everyone builds from head the

00:57:35,740 --> 00:57:40,990
indexer is just indexing it head clang

00:57:38,260 --> 00:57:44,800
MapReduce runs basically a head right so

00:57:40,990 --> 00:57:46,660
I don't have to worry too much about API

00:57:44,800 --> 00:57:50,350
incompatibilities when I'm making a

00:57:46,660 --> 00:57:52,630
change because I can see where it's

00:57:50,350 --> 00:57:53,950
likely to break if I run it through all

00:57:52,630 --> 00:57:55,810
the tests I can see where the build

00:57:53,950 --> 00:57:59,560
broke or where the test is broke and

00:57:55,810 --> 00:58:03,040
then quickly make an edit to everybody

00:57:59,560 --> 00:58:06,030
to change them to the new thing I have

00:58:03,040 --> 00:58:09,940
hope that going forward this will become

00:58:06,030 --> 00:58:13,060
practical for domains that aren't

00:58:09,940 --> 00:58:15,340
monolithic by virtue of here's the API

00:58:13,060 --> 00:58:17,560
that you're depending on I changed it in

00:58:15,340 --> 00:58:20,400
this release here's a tool that updates

00:58:17,560 --> 00:58:26,440
you to use the new thing because this is

00:58:20,400 --> 00:58:28,090
totally practical we just have to get to

00:58:26,440 --> 00:58:34,360
the point that we trust that sort of

00:58:28,090 --> 00:58:35,470
tooling in a world where we build

00:58:34,360 --> 00:58:37,810
software for a lot of different

00:58:35,470 --> 00:58:40,960
platforms we need to have build tools

00:58:37,810 --> 00:58:43,570
that are able to handle all that you

00:58:40,960 --> 00:58:46,300
suggest that we use blaze well basil

00:58:43,570 --> 00:58:49,960
sorry but basil doesn't support Windows

00:58:46,300 --> 00:58:51,420
which is a pretty important platform so

00:58:49,960 --> 00:58:54,610
do you have any recommendation on how to

00:58:51,420 --> 00:58:57,180
manage all those tools in a big codebase

00:58:54,610 --> 00:58:59,710
where you have to build Windows Mac iOS

00:58:57,180 --> 00:59:06,370
Android and everything and everyone

00:58:59,710 --> 00:59:07,840
wants to use their own tool we have we

00:59:06,370 --> 00:59:09,520
have some of those problems because we

00:59:07,840 --> 00:59:11,240
do ship code for Windows and we do ship

00:59:09,520 --> 00:59:12,740
code for iOS and

00:59:11,240 --> 00:59:19,490
and Android and you know those things

00:59:12,740 --> 00:59:21,500
that there's the monolithic part of the

00:59:19,490 --> 00:59:24,170
codebase and then there's the little

00:59:21,500 --> 00:59:27,470
bits of the code base that fall into

00:59:24,170 --> 00:59:32,930
those cracks and mostly we're working

00:59:27,470 --> 00:59:38,570
for that right now kind of by groping

00:59:32,930 --> 00:59:40,130
blindly uh we actually just talk more we

00:59:38,570 --> 00:59:41,960
find the teams that have those sort of

00:59:40,130 --> 00:59:43,849
requirements and we ask what tool chains

00:59:41,960 --> 00:59:46,760
are you using what platform are you are

00:59:43,849 --> 00:59:48,830
actually building for how can we get

00:59:46,760 --> 00:59:52,630
those sorts of things automated into our

00:59:48,830 --> 00:59:56,440
system like either by a VMS or whatever

00:59:52,630 --> 00:59:59,030
so that we can get them back into the

00:59:56,440 --> 01:00:01,160
they'll be kind of a weird case but we

00:59:59,030 --> 01:00:04,040
can get them back into you know to as

01:00:01,160 --> 01:00:09,500
large as possible the main stream sort

01:00:04,040 --> 01:00:11,410
of development standard and the other

01:00:09,500 --> 01:00:15,830
part of that that's really important is

01:00:11,410 --> 01:00:17,900
once we know what tools they're using we

01:00:15,830 --> 01:00:21,230
have to also enforce minimum

01:00:17,900 --> 01:00:23,930
requirements right like I will not allow

01:00:21,230 --> 01:00:29,089
you to use a Windows compiler from 10

01:00:23,930 --> 01:00:32,450
years ago because that's holding back

01:00:29,089 --> 01:00:34,849
our ability to use more modern language

01:00:32,450 --> 01:00:37,490
features usually in the code that needs

01:00:34,849 --> 01:00:39,380
it most usually in the utility code

01:00:37,490 --> 01:00:42,950
right and that's really unfortunate

01:00:39,380 --> 01:00:44,060
right so getting a sense of like what

01:00:42,950 --> 01:00:47,180
are all the things you're using and then

01:00:44,060 --> 01:00:49,099
starting with just asserting minimum

01:00:47,180 --> 01:00:51,859
standards and best practices and trying

01:00:49,099 --> 01:00:56,720
to push those forward that starts to

01:00:51,859 --> 01:01:00,050
help we we're going through some of the

01:00:56,720 --> 01:01:04,760
same I expect that there will be there

01:01:00,050 --> 01:01:07,310
will be work in this area hi I have a

01:01:04,760 --> 01:01:09,980
question about code reviews yeah more so

01:01:07,310 --> 01:01:12,170
in the area of quality of them mmm we

01:01:09,980 --> 01:01:14,930
Institute a policy where every check-in

01:01:12,170 --> 01:01:16,930
requires a colleague to code review if

01:01:14,930 --> 01:01:18,560
you look at Cody views of the same code

01:01:16,930 --> 01:01:20,720
one might say

01:01:18,560 --> 01:01:22,880
looks great the other the other might

01:01:20,720 --> 01:01:25,040
have a page worth of things that they

01:01:22,880 --> 01:01:27,080
see wrong did you

01:01:25,040 --> 01:01:28,490
experience any of that and and how do

01:01:27,080 --> 01:01:31,070
you fix or and how did you go about

01:01:28,490 --> 01:01:33,650
fixing that you do absolutely experience

01:01:31,070 --> 01:01:36,800
that we do certainly have some of that

01:01:33,650 --> 01:01:41,680
there are certainly teams that take it

01:01:36,800 --> 01:01:46,010
less seriously than they probably should

01:01:41,680 --> 01:01:47,450
one thing is even if you send the change

01:01:46,010 --> 01:01:50,210
to two different reviewers and get two

01:01:47,450 --> 01:01:52,850
completely different answers that's not

01:01:50,210 --> 01:01:54,560
necessarily that isn't enough to prove

01:01:52,850 --> 01:01:56,840
that there's a problem right

01:01:54,560 --> 01:01:58,610
one person may say that is functionally

01:01:56,840 --> 01:02:00,710
correct and you wrote some of those

01:01:58,610 --> 01:02:03,530
things in Asian style differently than I

01:02:00,710 --> 01:02:07,130
would have but I don't care whereas the

01:02:03,530 --> 01:02:09,650
page of review notes may be you know

01:02:07,130 --> 01:02:14,690
just all nits about well I would have

01:02:09,650 --> 01:02:16,790
named this something else and we

01:02:14,690 --> 01:02:20,990
actually eventually got to the point we

01:02:16,790 --> 01:02:22,730
had to have policies on when it's okay

01:02:20,990 --> 01:02:24,470
for a code reviewer to like be putting

01:02:22,730 --> 01:02:27,260
down their foot and when it's not right

01:02:24,470 --> 01:02:30,020
like you can request that you make those

01:02:27,260 --> 01:02:32,030
sort of ancillary changes but if it's

01:02:30,020 --> 01:02:36,590
not actually important don't fight and

01:02:32,030 --> 01:02:39,910
die on that bridge the other thing like

01:02:36,590 --> 01:02:43,760
in readability actually is a big one I'm

01:02:39,910 --> 01:02:47,900
working on making that much more clearly

01:02:43,760 --> 01:02:50,120
a mentoring process and I'm I have kind

01:02:47,900 --> 01:02:56,210
of a pilot program running of a slightly

01:02:50,120 --> 01:02:59,390
new more long-form mentoring and one

01:02:56,210 --> 01:03:02,570
thing that I'm doing is lurking a lot of

01:02:59,390 --> 01:03:05,060
the code reviewers and sending them

01:03:02,570 --> 01:03:06,800
comments about oh you said this that's

01:03:05,060 --> 01:03:09,530
actually not what I would recommend or

01:03:06,800 --> 01:03:11,510
you said this here's a nice citation for

01:03:09,530 --> 01:03:13,130
that in the style guide because it's

01:03:11,510 --> 01:03:18,020
much more valuable for people when you

01:03:13,130 --> 01:03:19,730
say this is wrong it's much more

01:03:18,020 --> 01:03:23,570
valuable to say don't do this because

01:03:19,730 --> 01:03:26,420
and it's very nice when you say don't do

01:03:23,570 --> 01:03:30,110
this because and here's a citation right

01:03:26,420 --> 01:03:33,680
and so teaching the mentors to be better

01:03:30,110 --> 01:03:34,400
mentors scales very nicely so that's

01:03:33,680 --> 01:03:38,600
that's

01:03:34,400 --> 01:03:40,430
things I'm working so you gave an

01:03:38,600 --> 01:03:42,830
example earlier of a ten year old piece

01:03:40,430 --> 01:03:44,660
of code that that has now become

01:03:42,830 --> 01:03:46,370
critical that you need to change in the

01:03:44,660 --> 01:03:48,050
next kind of two years that would never

01:03:46,370 --> 01:03:49,730
happen well it happens to us all the

01:03:48,050 --> 01:03:53,620
time we have a very similar kind of

01:03:49,730 --> 01:03:57,470
legacy code base which is a similar size

01:03:53,620 --> 01:04:00,260
I guess have you developed any

01:03:57,470 --> 01:04:02,720
strategies for influencing or I guess

01:04:00,260 --> 01:04:05,000
relating to management the importance of

01:04:02,720 --> 01:04:06,740
investing in core infrastructure and

01:04:05,000 --> 01:04:08,780
modules so that we get the correct

01:04:06,740 --> 01:04:10,400
amount of people on it let's say a

01:04:08,780 --> 01:04:13,880
company that doesn't have infinite

01:04:10,400 --> 01:04:17,300
resources I cannot express how much of a

01:04:13,880 --> 01:04:19,540
failure I have been on this point so

01:04:17,300 --> 01:04:22,610
like high fives all around like it's

01:04:19,540 --> 01:04:24,470
it's we've had some success in the

01:04:22,610 --> 01:04:26,170
tooling stuff especially because those

01:04:24,470 --> 01:04:28,640
are nice easy things to kind of quantify

01:04:26,170 --> 01:04:30,620
like when you look at here is a graph of

01:04:28,640 --> 01:04:32,960
build times that is going in a bad

01:04:30,620 --> 01:04:35,600
direction then they're willing to throw

01:04:32,960 --> 01:04:38,240
some you know some effort at compilation

01:04:35,600 --> 01:04:42,260
times and things like that when it's a

01:04:38,240 --> 01:04:44,630
matter of hey guys these api's are bad

01:04:42,260 --> 01:04:46,730
and everyone's complaining they're like

01:04:44,630 --> 01:04:50,840
I don't know how to prioritize that

01:04:46,730 --> 01:04:55,430
versus dollars or traffic or QPS or

01:04:50,840 --> 01:04:58,460
whatever and so it is the hardest part

01:04:55,430 --> 01:05:01,520
of my role by far is figuring out

01:04:58,460 --> 01:05:04,310
compelling ways to make the case that no

01:05:01,520 --> 01:05:05,290
still got to do this nope this task is

01:05:04,310 --> 01:05:08,960
not going away

01:05:05,290 --> 01:05:12,500
nope as we scale up we we need more

01:05:08,960 --> 01:05:15,470
support not less so it's it's alright

01:05:12,500 --> 01:05:18,290
please someone come tell me how to

01:05:15,470 --> 01:05:20,500
convince management I will buy you

01:05:18,290 --> 01:05:20,500
dinner

01:05:27,190 --> 01:05:32,930
so the tasting is a central part of

01:05:30,170 --> 01:05:36,230
development process and sometimes you're

01:05:32,930 --> 01:05:40,820
faced with the problem but code base

01:05:36,230 --> 01:05:43,340
testing becomes the overnight period of

01:05:40,820 --> 01:05:45,890
execution how you solve this problem so

01:05:43,340 --> 01:05:49,630
if you push something in a base coat you

01:05:45,890 --> 01:05:53,750
need to pass through a lot of coverage

01:05:49,630 --> 01:05:55,700
so it's may require a lot of time and

01:05:53,750 --> 01:05:59,540
some time it's more than a day

01:05:55,700 --> 01:06:02,240
Howie also with us kind of young you'll

01:05:59,540 --> 01:06:03,970
note that I specifically said like work

01:06:02,240 --> 01:06:07,250
on distributed build and test

01:06:03,970 --> 01:06:09,260
environment because it is not gonna work

01:06:07,250 --> 01:06:12,290
to just have every developer running the

01:06:09,260 --> 01:06:15,110
tests locally right your tests are going

01:06:12,290 --> 01:06:17,870
to scale with the number of hours of

01:06:15,110 --> 01:06:20,780
effort that a suite has put into the

01:06:17,870 --> 01:06:24,620
codebase total right and we're looking

01:06:20,780 --> 01:06:27,980
at 30 Sui millennia in C++ or something

01:06:24,620 --> 01:06:30,210
like that software engineer millennia

01:06:27,980 --> 01:06:32,490
no one is going to be able to run

01:06:30,210 --> 01:06:34,980
sequentially you've been on all the

01:06:32,490 --> 01:06:37,380
cores on they're very nice desktops all

01:06:34,980 --> 01:06:42,020
of the tests clearly you have to have

01:06:37,380 --> 01:06:45,990
this distributed test environments so oh

01:06:42,020 --> 01:06:48,120
that's a minimum first step as to it

01:06:45,990 --> 01:06:52,260
still takes a while yeah it still takes

01:06:48,120 --> 01:06:53,970
a while we've learned too we are always

01:06:52,260 --> 01:06:56,520
working on probably six or seven

01:06:53,970 --> 01:06:58,980
different things because you just have

01:06:56,520 --> 01:07:01,650
to wait until it's done cooking and you

01:06:58,980 --> 01:07:05,880
also have to learn when to trust that

01:07:01,650 --> 01:07:09,720
this is safe enough in this move all

01:07:05,880 --> 01:07:12,990
right the last question just harking

01:07:09,720 --> 01:07:15,960
back to the previous question I mean the

01:07:12,990 --> 01:07:17,700
one before last one of the things I've

01:07:15,960 --> 01:07:21,170
noticed over a long period of time

01:07:17,700 --> 01:07:23,940
relates to the role of leadership in

01:07:21,170 --> 01:07:25,950
arranging for the kinds of things that

01:07:23,940 --> 01:07:29,070
you're talking about to actually happen

01:07:25,950 --> 01:07:31,320
and you alluded to some difficulties in

01:07:29,070 --> 01:07:33,090
getting some of those to happen and I

01:07:31,320 --> 01:07:36,230
wondered whether you had any thoughts

01:07:33,090 --> 01:07:39,810
about encouraging and nurturing and

01:07:36,230 --> 01:07:41,520
ensuring that such leadership and I mean

01:07:39,810 --> 01:07:42,900
the qualities of a leader to make these

01:07:41,520 --> 01:07:46,340
things happen

01:07:42,900 --> 01:07:48,780
actually present in the organization or

01:07:46,340 --> 01:07:49,050
whether it's just really the luck of the

01:07:48,780 --> 01:07:54,810
draw

01:07:49,050 --> 01:07:58,200
I think the hard part is that for a lot

01:07:54,810 --> 01:07:59,790
of these things unless unless your

01:07:58,200 --> 01:08:03,060
engineering leadership has been very

01:07:59,790 --> 01:08:06,990
forward-thinking it is going to be

01:08:03,060 --> 01:08:10,460
unclear who is responsible or authorized

01:08:06,990 --> 01:08:13,710
or anything to like take a given step

01:08:10,460 --> 01:08:15,000
right as you scale up like every way it

01:08:13,710 --> 01:08:19,830
becomes easier for everyone to look

01:08:15,000 --> 01:08:21,900
around be like not my problem and in the

01:08:19,830 --> 01:08:24,720
worst case everyone looks around and

01:08:21,900 --> 01:08:29,760
says I don't have the authority to solve

01:08:24,720 --> 01:08:31,589
this and if if that's the case like if

01:08:29,760 --> 01:08:34,410
everyone looks around like I don't think

01:08:31,589 --> 01:08:34,940
I have the authority to to approach this

01:08:34,410 --> 01:08:37,650
problem

01:08:34,940 --> 01:08:40,500
then your organization is doomed

01:08:37,650 --> 01:08:43,050
right and so one of the things that has

01:08:40,500 --> 01:08:48,020
been in Google's DNA very early on is

01:08:43,050 --> 01:08:52,080
the phrase act like an owner which is

01:08:48,020 --> 01:08:55,010
assume that you have that power it is in

01:08:52,080 --> 01:08:58,620
many cases especially for things like

01:08:55,010 --> 01:09:02,150
making organizational shifts and kind of

01:08:58,620 --> 01:09:04,740
policy shifts it is far better to

01:09:02,150 --> 01:09:09,530
pretend like you have that power and

01:09:04,740 --> 01:09:09,530
just do it and see if anyone says no

01:09:09,590 --> 01:09:18,840
then to let everything go bad and you're

01:09:17,310 --> 01:09:21,510
not necessarily going to make all the

01:09:18,840 --> 01:09:23,400
friends by doing that but you'd be

01:09:21,510 --> 01:09:27,210
surprised I think in practice that works

01:09:23,400 --> 01:09:30,470
pretty well so anyway thank you all very

01:09:27,210 --> 01:09:30,470

YouTube URL: https://www.youtube.com/watch?v=zW-i9eVGU_k


