Title: What's New in Visual C++ 2015 and Future Directions - Steve Carroll • Ayman Shoukry [ CppCon 2015 ]
Publication date: 2015-10-08
Playlist: CppCon 2015
Description: 
	http://www.Cppcon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015
—
In this talk, we'll discuss new features, optimizations, and scenarios in Visual Studio 2015. We'll cover new backend optimizations, improved build throughput, new productivity and diagnostics features, and give a detailed update on our conformance progress, as well as talk about cool new c++1y features that we are shipping from await to modules. 

Visual Studio isn't just for Microsoft platform developers. We'll also demonstrate our latest cross platform C++ development features for Android and iOS. We'll also give a sneak peak at our work on combining the Clang frontend with our existing backend to bring Clang support for Windows to Visual Studio.
— 
Ayman Shoukry has been with the Microsoft Developer Division product groups for close to 15 years. He is currently the Group Program Manager for the Visual C++ team at Microsoft. Ayman’s team is responsible for delivering the compilers, libraries, runtimes and IDE that enable developers to create great native applications using visual Studio. Prior to joining Microsoft, Ayman spent a year & half in Newcastle, Australia where he earned his Master degree in Software Engineering. In Addition, He holds a BSc. in Computer Science from the American University in Cairo. He currently lives in Seattle, WA with his wife and two daughters.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:00,000 --> 00:00:06,509
is how many people are actually on 2015

00:00:02,879 --> 00:00:11,759
already okay all right

00:00:06,509 --> 00:00:13,950
2013 all right okay good so so some of

00:00:11,759 --> 00:00:16,049
you or this is gonna be yeah it's gonna

00:00:13,950 --> 00:00:17,760
be like finding the cool tips you didn't

00:00:16,049 --> 00:00:19,619
know about and some of you it'll be like

00:00:17,760 --> 00:00:21,480
mmm I wonder if I need to do this and

00:00:19,619 --> 00:00:25,470
then I have to sell you two I got it

00:00:21,480 --> 00:00:29,039
all right my mission is clear actually

00:00:25,470 --> 00:00:33,180
one during 2010 I was afraid to ask

00:00:29,039 --> 00:00:38,010
oh all right so like no I know I don't

00:00:33,180 --> 00:00:41,660
know I even worked before 2010 well let

00:00:38,010 --> 00:00:41,660
me ask this one vc6

00:00:42,140 --> 00:00:47,399
okay so here's the deal

00:00:43,890 --> 00:00:51,690
three weeks ago me and andresa our test

00:00:47,399 --> 00:00:53,879
manager were in China and Taiwan and

00:00:51,690 --> 00:00:55,320
walky going around and meeting with a

00:00:53,879 --> 00:00:57,600
bunch of customers and trying to get

00:00:55,320 --> 00:01:00,329
them to upgrade to 2015 not so different

00:00:57,600 --> 00:01:01,289
than what I'm doing right now and when

00:01:00,329 --> 00:01:02,789
we would go in there we would see it's

00:01:01,289 --> 00:01:07,799
like modern laptops you know like this

00:01:02,789 --> 00:01:11,670
thing here which I love running video c6

00:01:07,799 --> 00:01:16,229
v c6 but it screams I mean I'll tell you

00:01:11,670 --> 00:01:19,890
that it's it's it's really fast yeah

00:01:16,229 --> 00:01:23,189
yeah running VC on on Windows v c6 on

00:01:19,890 --> 00:01:25,320
Windows XP yeah that's the thing most of

00:01:23,189 --> 00:01:31,500
them were actually not developing on XP

00:01:25,320 --> 00:01:35,939
at least so that was good we'll talk

00:01:31,500 --> 00:01:38,329
more about XP in a few minutes don't

00:01:35,939 --> 00:01:38,329
worry talk

00:01:46,430 --> 00:01:53,600
are you smoking yep okay

00:01:57,530 --> 00:02:00,960
okay I'm gonna break with tradition I'm

00:01:59,490 --> 00:02:02,310
gonna start on time but that's about to

00:02:00,960 --> 00:02:27,420
one minute from now

00:02:02,310 --> 00:02:28,530
that's what are you full of energy you

00:02:27,420 --> 00:02:31,319
have to be full of energy for these

00:02:28,530 --> 00:02:38,340
these people got up early to come see us

00:02:31,319 --> 00:02:40,440
do I feel all right and I will what

00:02:38,340 --> 00:02:42,269
we'll try to get the slides up real

00:02:40,440 --> 00:02:47,040
quickly so that you don't have to do the

00:02:42,269 --> 00:02:51,019
the phone thing and you'll if you'll

00:02:47,040 --> 00:02:51,019
hold me accountable for that right okay

00:02:53,359 --> 00:02:57,600
there there is actually a bunch of

00:02:55,859 --> 00:03:00,510
really nice discussions on on reddit

00:02:57,600 --> 00:03:04,350
last night for Stefan's talk and herbes

00:03:00,510 --> 00:03:06,890
talk and yeah it's tough the conference

00:03:04,350 --> 00:03:09,989
around the conference is super cool oh

00:03:06,890 --> 00:03:12,329
okay Wow so the clock is ticking and I'm

00:03:09,989 --> 00:03:13,980
gonna go then hi my name is Steve

00:03:12,329 --> 00:03:14,400
Carroll as we were discussing in the

00:03:13,980 --> 00:03:17,579
pre-show

00:03:14,400 --> 00:03:19,350
I'm the new debt manager for visual C++

00:03:17,579 --> 00:03:21,269
this fine gentleman over here

00:03:19,350 --> 00:03:23,370
yeah palm-trees myself I'm Aiman choukri

00:03:21,269 --> 00:03:25,680
I'm the group program manager for C++

00:03:23,370 --> 00:03:27,480
team so hopefully today we'll talk about

00:03:25,680 --> 00:03:29,190
a little bit about what's new there and

00:03:27,480 --> 00:03:30,569
tell you more of as well about where

00:03:29,190 --> 00:03:33,090
we're heading from a direction even

00:03:30,569 --> 00:03:36,150
afterwards so from that'll let you kick

00:03:33,090 --> 00:03:37,980
off C right so I'm gonna do a bunch of

00:03:36,150 --> 00:03:39,959
slides to show new things there's a

00:03:37,980 --> 00:03:43,440
bunch of demo in this I'm gonna go fast

00:03:39,959 --> 00:03:45,060
if I go too fast let me know I have a

00:03:43,440 --> 00:03:46,620
lot of stuff I want to kind of jam into

00:03:45,060 --> 00:03:48,989
40 minutes I want to make sure that this

00:03:46,620 --> 00:03:51,750
is actually a broad tour whoa what's

00:03:48,989 --> 00:03:56,160
going on that that's too fast all right

00:03:51,750 --> 00:03:57,750
so we've established think okay no

00:03:56,160 --> 00:03:59,490
seriously why is it doing that all right

00:03:57,750 --> 00:04:00,570
so that's gonna be fun all right

00:03:59,490 --> 00:04:01,950
to get started I want to talk a little

00:04:00,570 --> 00:04:03,840
bit about what we're trying to

00:04:01,950 --> 00:04:05,220
accomplish as a team just to motivate

00:04:03,840 --> 00:04:06,990
like the features that are in here and

00:04:05,220 --> 00:04:08,220
also the sort of future Direction stuff

00:04:06,990 --> 00:04:11,160
that I'm is going to talk about towards

00:04:08,220 --> 00:04:14,970
the end we want visual studio to be the

00:04:11,160 --> 00:04:17,100
best IDE for every C++ developer not

00:04:14,970 --> 00:04:19,290
just C++ developers on the windows

00:04:17,100 --> 00:04:21,660
platform although we still love you

00:04:19,290 --> 00:04:24,180
it's and in particular we're trying to

00:04:21,660 --> 00:04:25,830
focus on making it a more welcoming

00:04:24,180 --> 00:04:28,590
environment for people doing open source

00:04:25,830 --> 00:04:31,260
development continuing on with that

00:04:28,590 --> 00:04:34,170
trend we want this to be do we want to

00:04:31,260 --> 00:04:36,180
help make C++ the language for

00:04:34,170 --> 00:04:37,980
cross-platform development I'm going to

00:04:36,180 --> 00:04:40,050
show you guys a bunch of stuff about

00:04:37,980 --> 00:04:42,120
doing Android development and iOS

00:04:40,050 --> 00:04:44,310
development inside Visual Studio we have

00:04:42,120 --> 00:04:45,870
further and deeper ambitions in this

00:04:44,310 --> 00:04:49,560
direction which will we'll talk about

00:04:45,870 --> 00:04:52,110
later C++ development is on the uptick

00:04:49,560 --> 00:04:53,850
all of our telemetry tells us this I

00:04:52,110 --> 00:04:55,950
don't know if you've if you've read John

00:04:53,850 --> 00:04:57,810
Calvin's book Y C++ there's some good

00:04:55,950 --> 00:04:59,820
data in there but we get lots of

00:04:57,810 --> 00:05:01,920
telemetry streams that tell us that yes

00:04:59,820 --> 00:05:04,490
indeed the number of C++ developers is

00:05:01,920 --> 00:05:06,630
increasing and a lot of it is driven by

00:05:04,490 --> 00:05:08,280
Kross Platt and need for high

00:05:06,630 --> 00:05:11,220
performance on little tiny super

00:05:08,280 --> 00:05:14,460
computers in our pockets all right great

00:05:11,220 --> 00:05:16,590
so we believe that while C++ may not be

00:05:14,460 --> 00:05:18,330
known for its productivity as a language

00:05:16,590 --> 00:05:19,980
that there are a lot of things that

00:05:18,330 --> 00:05:21,570
tools can do to make your life more

00:05:19,980 --> 00:05:24,090
productive I'm going to show a lot of

00:05:21,570 --> 00:05:26,850
things in that area and we'll continue

00:05:24,090 --> 00:05:28,920
to invest in that area and finally no

00:05:26,850 --> 00:05:30,810
intro should be complete without us

00:05:28,920 --> 00:05:33,060
talking a little bit about our mission

00:05:30,810 --> 00:05:35,880
on conformance we have for a long time

00:05:33,060 --> 00:05:38,040
been behind on conformance I'm going to

00:05:35,880 --> 00:05:40,380
go through in some detail all the work

00:05:38,040 --> 00:05:42,330
that we did in 2015 to help catch up I

00:05:40,380 --> 00:05:44,610
want to talk and then we'll talk about

00:05:42,330 --> 00:05:46,170
our desire to participate in the

00:05:44,610 --> 00:05:48,240
standards body to make the language

00:05:46,170 --> 00:05:50,280
better I think you've seen some examples

00:05:48,240 --> 00:05:52,680
of that in this conference and then of

00:05:50,280 --> 00:05:53,730
course we will stay caught up all right

00:05:52,680 --> 00:05:56,850
now I'm going to push the button and see

00:05:53,730 --> 00:05:59,430
if I can go only one slide forward okay

00:05:56,850 --> 00:06:02,190
what no don't do that

00:05:59,430 --> 00:06:05,280
all right saving the best for first I

00:06:02,190 --> 00:06:07,140
would like to start by talking about but

00:06:05,280 --> 00:06:09,780
what is perhaps the best received new

00:06:07,140 --> 00:06:10,800
feature in Visual Studio 2013 and it's

00:06:09,780 --> 00:06:12,710
worth pointing out that I'm going to

00:06:10,800 --> 00:06:15,350
show you things in Visual Studio

00:06:12,710 --> 00:06:17,480
2015 that are great for C++ developers

00:06:15,350 --> 00:06:18,680
not just things that my team did a lot

00:06:17,480 --> 00:06:20,240
of this is going to be me taking credit

00:06:18,680 --> 00:06:22,340
for other people's great work this is an

00:06:20,240 --> 00:06:25,670
example of that first I'd like to start

00:06:22,340 --> 00:06:29,890
with my impression of the menu bar in

00:06:25,670 --> 00:06:32,870
Visual Studio 2013 violated you etc

00:06:29,890 --> 00:06:36,730
however we fixed that and in Visual

00:06:32,870 --> 00:06:40,700
Studio 2015 what one of the most

00:06:36,730 --> 00:06:43,820
well-liked features is we have camelcase

00:06:40,700 --> 00:06:46,610
or the menu bar so I simply stopped

00:06:43,820 --> 00:06:48,980
yelling at you so you know months and

00:06:46,610 --> 00:06:51,860
months of development work at last yeah

00:06:48,980 --> 00:06:53,240
yeah that was totally a plea for

00:06:51,860 --> 00:06:55,550
applause and I'm glad that you noticed

00:06:53,240 --> 00:06:56,810
that about me I'm desperate for

00:06:55,550 --> 00:06:58,820
validation thank you

00:06:56,810 --> 00:07:00,320
saving the worst for a second alright so

00:06:58,820 --> 00:07:02,990
this is kind of an anti feature so I

00:07:00,320 --> 00:07:04,790
thought I'd get it out of the way I'm

00:07:02,990 --> 00:07:06,290
gonna explain the why of this when you

00:07:04,790 --> 00:07:08,000
go to install we talked at the beginning

00:07:06,290 --> 00:07:10,940
some of you have not yet gotten to

00:07:08,000 --> 00:07:14,180
Visual Studio 2015 when you go and do

00:07:10,940 --> 00:07:18,200
that please at the installation thing

00:07:14,180 --> 00:07:19,820
select custom not typical I know what

00:07:18,200 --> 00:07:23,570
you do is a typical day-to-day kind of

00:07:19,820 --> 00:07:26,480
thing but on in Visual Studio 2015 C++

00:07:23,570 --> 00:07:28,850
does not install by default it is not

00:07:26,480 --> 00:07:30,590
because C++ is not important or we

00:07:28,850 --> 00:07:33,230
stopped caring about it it is because

00:07:30,590 --> 00:07:35,390
Visual Studio takes entirely too long to

00:07:33,230 --> 00:07:37,540
install for most people and we are

00:07:35,390 --> 00:07:40,610
making we are working our way through

00:07:37,540 --> 00:07:42,830
making it more modularized it turns out

00:07:40,610 --> 00:07:44,600
that we were in a pretty good shape in

00:07:42,830 --> 00:07:47,030
terms of modularization of our modules

00:07:44,600 --> 00:07:53,620
and so we were first all you have to do

00:07:47,030 --> 00:07:55,850
custom set C++ and yes I'm sorry okay uh

00:07:53,620 --> 00:07:58,070
that's really gonna be fun for the whole

00:07:55,850 --> 00:08:00,530
talk alright this is things that are not

00:07:58,070 --> 00:08:04,220
new these are things I hear all the time

00:08:00,530 --> 00:08:07,490
that are not true number one you can

00:08:04,220 --> 00:08:10,310
still target XP and visual studio 2015

00:08:07,490 --> 00:08:13,910
this causes poor stuff in kilala why

00:08:10,310 --> 00:08:15,710
much angst so you know please understand

00:08:13,910 --> 00:08:17,480
that that is actually in the product you

00:08:15,710 --> 00:08:18,830
go into the platform toolkit thing you

00:08:17,480 --> 00:08:21,830
drop it down and you select the XP

00:08:18,830 --> 00:08:23,120
toolkit it's it's always sad that we do

00:08:21,830 --> 00:08:25,700
that work and then many people don't

00:08:23,120 --> 00:08:26,540
know also at one point in the sort of

00:08:25,700 --> 00:08:29,120
CTP 2

00:08:26,540 --> 00:08:31,190
see time frame we talked about not

00:08:29,120 --> 00:08:34,070
having Apple local deployment for our

00:08:31,190 --> 00:08:35,390
CRT we changed that it's fine any way

00:08:34,070 --> 00:08:39,020
that you could have deployed your app

00:08:35,390 --> 00:08:41,510
with Visual Studio 2015 or 2013 is still

00:08:39,020 --> 00:08:43,550
available in Visual Studio 2015 please

00:08:41,510 --> 00:08:47,840
don't think that those are no longer

00:08:43,550 --> 00:08:50,210
available okay I'm gonna start I'm gonna

00:08:47,840 --> 00:08:52,910
start off I'm gonna do a bunch of demos

00:08:50,210 --> 00:08:54,680
of things that are sort of language

00:08:52,910 --> 00:09:02,260
agnostic and you can't see what I'm

00:08:54,680 --> 00:09:02,260
doing so I'm gonna go in here and Kate

00:09:02,890 --> 00:09:08,630
alright good beautiful alright first

00:09:05,990 --> 00:09:12,080
thing I want to show you are some simple

00:09:08,630 --> 00:09:15,110
like IDE wide kinds of things one of

00:09:12,080 --> 00:09:17,900
them is may seem silly but like let's

00:09:15,110 --> 00:09:19,160
imagine you are in a large auditorium

00:09:17,900 --> 00:09:21,080
and have to be able to make sure that

00:09:19,160 --> 00:09:22,760
people can read the code that you have

00:09:21,080 --> 00:09:25,400
there are a number of touchscreen

00:09:22,760 --> 00:09:28,490
enhancements inside Visual Studio 2015

00:09:25,400 --> 00:09:31,610
and if you have a laptop with touch you

00:09:28,490 --> 00:09:34,280
can do pinch to zoom you know no hands

00:09:31,610 --> 00:09:35,690
on my trackpad I promise all the scroll

00:09:34,280 --> 00:09:38,180
bars are actually lit up so that they

00:09:35,690 --> 00:09:39,650
work well with touch this this really

00:09:38,180 --> 00:09:41,900
does actually come in handy in some

00:09:39,650 --> 00:09:44,180
scenarios another one I want to show you

00:09:41,900 --> 00:09:47,930
really quick which is which is language

00:09:44,180 --> 00:09:49,820
agnostics is called manage window

00:09:47,930 --> 00:09:51,980
layouts or apply window layouts you can

00:09:49,820 --> 00:09:54,110
set the windows any way you like them

00:09:51,980 --> 00:09:56,540
and then quickly switch between them I'm

00:09:54,110 --> 00:09:59,150
show you an example here I have on mine

00:09:56,540 --> 00:10:01,420
sort of like what I call laptop mode and

00:09:59,150 --> 00:10:04,040
docked mode because I use this laptop

00:10:01,420 --> 00:10:06,650
for whatever development I actually do

00:10:04,040 --> 00:10:09,070
as a twenty haired manager and so when

00:10:06,650 --> 00:10:13,190
I'm in laptop mode I want to have the

00:10:09,070 --> 00:10:16,340
size of my code take up as much of the

00:10:13,190 --> 00:10:18,590
screen as possible so I smooth out the

00:10:16,340 --> 00:10:20,870
the solution Explorer over to the right

00:10:18,590 --> 00:10:22,510
there and make sure I give as much as I

00:10:20,870 --> 00:10:26,510
want to the code itself

00:10:22,510 --> 00:10:28,310
likewise you know when I'm docked I want

00:10:26,510 --> 00:10:30,710
to have that back and you can basically

00:10:28,310 --> 00:10:33,680
put any kind of arrangement of windows

00:10:30,710 --> 00:10:35,210
save it and then quickly apply it so

00:10:33,680 --> 00:10:36,830
there's a lot of uses for this if you've

00:10:35,210 --> 00:10:39,590
used like perspectives inside of Eclipse

00:10:36,830 --> 00:10:40,550
this is a kind of a powerful feature for

00:10:39,590 --> 00:10:42,529
allowing you to

00:10:40,550 --> 00:10:45,800
those things another thing I want to

00:10:42,529 --> 00:10:47,540
show really quick when you install

00:10:45,800 --> 00:10:49,220
Visual Studio and you go and you click

00:10:47,540 --> 00:10:52,339
custom one of the things that you can do

00:10:49,220 --> 00:10:56,180
is toss in the github extensions and

00:10:52,339 --> 00:10:58,760
what that allows you to do is who hasn't

00:10:56,180 --> 00:11:00,290
github account yeah okay so good I

00:10:58,760 --> 00:11:02,480
figured you guys might want to use this

00:11:00,290 --> 00:11:04,310
if you go in here and you click clone

00:11:02,480 --> 00:11:06,230
I've got this already wired up to my

00:11:04,310 --> 00:11:09,680
github account and you can see right

00:11:06,230 --> 00:11:12,079
here I've got the JSON 11 thing and I

00:11:09,680 --> 00:11:13,640
click clone with my finger and it will

00:11:12,079 --> 00:11:15,980
go ahead and as you can see I've already

00:11:13,640 --> 00:11:17,630
done that so it won't work but and we

00:11:15,980 --> 00:11:19,459
have full git integration Visual Studio

00:11:17,630 --> 00:11:22,130
it's dubbed development itself we're now

00:11:19,459 --> 00:11:24,200
doing on top of git and so this is some

00:11:22,130 --> 00:11:26,209
great way to do what I was saying

00:11:24,200 --> 00:11:27,649
earlier about bringing making easier to

00:11:26,209 --> 00:11:29,300
do open source development inside Visual

00:11:27,649 --> 00:11:34,430
Studio so I encourage you to go check

00:11:29,300 --> 00:11:39,350
that out pick up my slides ah

00:11:34,430 --> 00:11:40,850
send a smile so this thing yeah I know

00:11:39,350 --> 00:11:42,800
it's not much it's a picture of a smiley

00:11:40,850 --> 00:11:45,020
face but I want to actually like assure

00:11:42,800 --> 00:11:46,670
you that this is a situation where

00:11:45,020 --> 00:11:49,010
there's another person sitting on the

00:11:46,670 --> 00:11:51,200
other side of this I literally got

00:11:49,010 --> 00:11:53,630
yelled at by a VP yesterday for not

00:11:51,200 --> 00:11:56,690
having looked at this recently enough so

00:11:53,630 --> 00:11:58,490
please we're getting excellent feedback

00:11:56,690 --> 00:12:01,220
from the community on this we're taking

00:11:58,490 --> 00:12:04,459
it very seriously if you're seeing bugs

00:12:01,220 --> 00:12:05,930
if you're seeing other issues inside

00:12:04,459 --> 00:12:07,640
Visual Studio if you just want to send

00:12:05,930 --> 00:12:09,620
us a suggestion this is a really

00:12:07,640 --> 00:12:11,420
lightweight way of not having to file a

00:12:09,620 --> 00:12:13,370
connect bug and and we'll get that

00:12:11,420 --> 00:12:15,470
information and we will be looking for

00:12:13,370 --> 00:12:19,610
them I want to show you send a frown for

00:12:15,470 --> 00:12:21,829
a second so you can say you know you

00:12:19,610 --> 00:12:24,680
know what what happened here Steve you

00:12:21,829 --> 00:12:25,910
know broke in and actually give us some

00:12:24,680 --> 00:12:27,860
details because we'll get this string

00:12:25,910 --> 00:12:29,899
but then when you click this there's a

00:12:27,860 --> 00:12:31,820
number of record more info about these

00:12:29,899 --> 00:12:33,560
and and I want to really encourage you

00:12:31,820 --> 00:12:34,940
to do this when you go and do the Bucks

00:12:33,560 --> 00:12:36,769
it makes them much more actionable for

00:12:34,940 --> 00:12:40,699
us and easier for us to go and fix your

00:12:36,769 --> 00:12:43,370
issues so for instance you can replay

00:12:40,699 --> 00:12:44,930
the crash and get the dump and then have

00:12:43,370 --> 00:12:46,399
it upload to us you can report

00:12:44,930 --> 00:12:49,160
performance problems and we'll get a

00:12:46,399 --> 00:12:50,480
profile it's really helpful we'd really

00:12:49,160 --> 00:12:53,510
appreciate it if you would use this if

00:12:50,480 --> 00:12:54,420
you're seeing nastiness we're updating

00:12:53,510 --> 00:12:56,250
all the time

00:12:54,420 --> 00:12:58,470
you know so we have lots of

00:12:56,250 --> 00:13:00,870
opportunities to fix your bugs please by

00:12:58,470 --> 00:13:03,120
all means let us know about them ok so

00:13:00,870 --> 00:13:04,980
from that I want to switch in and start

00:13:03,120 --> 00:13:07,290
talking about productivity features in

00:13:04,980 --> 00:13:10,170
the IDE I'm going to show you both my

00:13:07,290 --> 00:13:11,730
favorite C++ a new language feature and

00:13:10,170 --> 00:13:13,800
my new favorite refactor and the tool

00:13:11,730 --> 00:13:16,310
all at once as you can see this string

00:13:13,800 --> 00:13:19,920
is obnoxious it's really long it has

00:13:16,310 --> 00:13:21,570
slash ends and slash T ones in it we've

00:13:19,920 --> 00:13:24,329
tried to add a bunch of newer factorings

00:13:21,570 --> 00:13:26,130
inside of Visual Studio and I'm going to

00:13:24,329 --> 00:13:28,860
do one right now see the little light

00:13:26,130 --> 00:13:30,510
bulb if you hit ctrl period it brings up

00:13:28,860 --> 00:13:31,860
possible fixes for that line of code

00:13:30,510 --> 00:13:34,639
next to the light bulb I'm gonna do

00:13:31,860 --> 00:13:39,029
convert to raw string literal uses the

00:13:34,639 --> 00:13:41,910
capital R thing ah it's so much nicer

00:13:39,029 --> 00:13:44,670
easier to read better in your code this

00:13:41,910 --> 00:13:46,889
is like lots of these little tiny reef

00:13:44,670 --> 00:13:49,620
actors can clean up code and make things

00:13:46,889 --> 00:13:51,990
much nicer this next one I've helpfully

00:13:49,620 --> 00:13:53,730
left myself a comment to remind me that

00:13:51,990 --> 00:13:56,250
this is a gallery extension that needs

00:13:53,730 --> 00:13:58,050
to be done but it's available up on vs

00:13:56,250 --> 00:14:00,240
gallery which if you've not done before

00:13:58,050 --> 00:14:02,190
you can get to from extensions and

00:14:00,240 --> 00:14:04,350
updates' in the tools window and this

00:14:02,190 --> 00:14:06,029
one is called extract function or

00:14:04,350 --> 00:14:08,070
extract method in the gallery if you

00:14:06,029 --> 00:14:11,220
search for it what it allows you to do

00:14:08,070 --> 00:14:14,339
is like let's imagine you really really

00:14:11,220 --> 00:14:16,140
really like pouring in

00:14:14,339 --> 00:14:17,519
together and so you want to extract this

00:14:16,140 --> 00:14:20,370
function out so it can be used in other

00:14:17,519 --> 00:14:22,320
places i right-clicked i select quick

00:14:20,370 --> 00:14:24,480
actions and I have extract function is

00:14:22,320 --> 00:14:26,519
one of my choices if I click on that I

00:14:24,480 --> 00:14:34,410
can give it a name which I'll call or

00:14:26,519 --> 00:14:36,209
all the intz and then for summary Oh the

00:14:34,410 --> 00:14:39,360
dot H file fell out of the project don't

00:14:36,209 --> 00:14:42,870
worry about it trust me it works no it

00:14:39,360 --> 00:14:47,339
does I will I will fix it I just screwed

00:14:42,870 --> 00:14:49,319
this up it's the stereotypical do the

00:14:47,339 --> 00:14:53,160
demo beforehand thereby screwing up the

00:14:49,319 --> 00:14:55,620
demo extract function new function seems

00:14:53,160 --> 00:14:57,569
like a fine name and then it it pulls it

00:14:55,620 --> 00:14:59,250
out puts the name of the function into

00:14:57,569 --> 00:15:01,769
the header a declaration into the header

00:14:59,250 --> 00:15:03,060
file and then plops it into the middle

00:15:01,769 --> 00:15:05,459
of the function so that and you can use

00:15:03,060 --> 00:15:06,700
it call it from other places and here's

00:15:05,459 --> 00:15:08,980
a new function

00:15:06,700 --> 00:15:11,020
here is a function with a terrible name

00:15:08,980 --> 00:15:14,470
it is called this is a terrible name for

00:15:11,020 --> 00:15:16,350
a function this is another very quick

00:15:14,470 --> 00:15:19,600
easy to use

00:15:16,350 --> 00:15:22,000
refactoring available in the tool we can

00:15:19,600 --> 00:15:26,470
right click on here choose rename or

00:15:22,000 --> 00:15:32,470
control RR and I'm gonna give it a much

00:15:26,470 --> 00:15:34,810
better name and now if I click preview

00:15:32,470 --> 00:15:37,780
I'll get the ability to first it will

00:15:34,810 --> 00:15:39,370
use a very precise intellisense based

00:15:37,780 --> 00:15:41,170
way of identifying all the places where

00:15:39,370 --> 00:15:42,760
it's use this is not just finding files

00:15:41,170 --> 00:15:44,080
this is actually using smarts to

00:15:42,760 --> 00:15:48,010
identify the places where it's being

00:15:44,080 --> 00:15:50,020
used and I can see it gets all the the

00:15:48,010 --> 00:15:51,910
roughs and the uses but it also gives me

00:15:50,020 --> 00:15:54,820
the option of finding it in any comment

00:15:51,910 --> 00:15:56,710
string and replacing it there or in

00:15:54,820 --> 00:15:59,110
actual strings themselves and then I can

00:15:56,710 --> 00:16:02,430
make fine grained control of them and

00:15:59,110 --> 00:16:03,580
and hit apply and have it fixed and

00:16:02,430 --> 00:16:06,160
voila

00:16:03,580 --> 00:16:09,550
a much better name okay continuing on

00:16:06,160 --> 00:16:12,550
with new refactorings in 2015 we have

00:16:09,550 --> 00:16:15,820
one for that we call move move

00:16:12,550 --> 00:16:20,050
declaration definition which will allow

00:16:15,820 --> 00:16:22,510
me to push this from the CPP file to the

00:16:20,050 --> 00:16:25,270
header file or from the header file to

00:16:22,510 --> 00:16:27,730
the CPP file cool thing about this is it

00:16:25,270 --> 00:16:28,960
will do it in the little peek window if

00:16:27,730 --> 00:16:31,000
you've never seen it before the idea

00:16:28,960 --> 00:16:32,650
behind the peek window is we want to

00:16:31,000 --> 00:16:35,170
kind of keep you code focused we want to

00:16:32,650 --> 00:16:36,790
drop you into a place and let you stay

00:16:35,170 --> 00:16:38,050
there and so for instance at this point

00:16:36,790 --> 00:16:40,110
I can go and make this an inline

00:16:38,050 --> 00:16:42,760
function directly and I never have to

00:16:40,110 --> 00:16:44,620
worry about this and I can just dismiss

00:16:42,760 --> 00:16:47,830
it when I'm done

00:16:44,620 --> 00:16:49,990
so that's that I'm gonna show you a

00:16:47,830 --> 00:16:54,760
couple more here's an abstract base

00:16:49,990 --> 00:16:57,100
class it has some pure virtual kinds of

00:16:54,760 --> 00:17:00,280
things so I'm first thing I'm gonna do

00:16:57,100 --> 00:17:02,860
is I'm going to right click on the

00:17:00,280 --> 00:17:05,079
abstract base class and I have quick

00:17:02,860 --> 00:17:07,570
actions again and what I can do is

00:17:05,079 --> 00:17:10,150
quickly implement all the pure virtuals

00:17:07,570 --> 00:17:11,949
for base my abstract base class save you

00:17:10,150 --> 00:17:14,530
some typing not have to override each of

00:17:11,949 --> 00:17:16,030
those and again it immediately pops up

00:17:14,530 --> 00:17:17,800
the peek window if you want to do some

00:17:16,030 --> 00:17:19,920
editing in the place where it's inserted

00:17:17,800 --> 00:17:22,440
them but it's it's

00:17:19,920 --> 00:17:24,990
the virtual overrides into both the

00:17:22,440 --> 00:17:26,850
header file and the class file likewise

00:17:24,990 --> 00:17:28,530
if you are specking out a class and you

00:17:26,850 --> 00:17:32,060
want to quickly generate stub functions

00:17:28,530 --> 00:17:34,020
I'm gonna go in here and I'm gonna

00:17:32,060 --> 00:17:37,140
uncomment those lines pretend I just

00:17:34,020 --> 00:17:43,860
wrote them now I can right click quick

00:17:37,140 --> 00:17:50,550
actions create definition and and what

00:17:43,860 --> 00:17:53,730
it will do is it will it will actually

00:17:50,550 --> 00:17:55,410
generate those into the CPP file so that

00:17:53,730 --> 00:17:56,880
then you can continue on with your work

00:17:55,410 --> 00:18:00,480
and it will build and you have a stub

00:17:56,880 --> 00:18:03,890
implementation so those are some new

00:18:00,480 --> 00:18:06,330
refactorings inside Visual Studio 2015

00:18:03,890 --> 00:18:09,600
peeking at my slides one more time

00:18:06,330 --> 00:18:11,520
we rename extract yes yes yes single

00:18:09,600 --> 00:18:12,630
file and tell us us all right so now

00:18:11,520 --> 00:18:18,870
what I'm going to do is I'm going to

00:18:12,630 --> 00:18:23,280
close my solution and I'm going to

00:18:18,870 --> 00:18:25,380
create a new file single file

00:18:23,280 --> 00:18:27,330
intellisense is part of our push in

00:18:25,380 --> 00:18:29,520
general to make it much easier to use

00:18:27,330 --> 00:18:31,950
Visual Studio in a place where you don't

00:18:29,520 --> 00:18:33,390
necessarily have a project file we want

00:18:31,950 --> 00:18:38,520
to make it so that you can go in and

00:18:33,390 --> 00:18:44,870
file new a CPP file and have it mostly

00:18:38,520 --> 00:18:49,220
just work so if I go in here and I go

00:18:44,870 --> 00:18:57,330
funny with my mouse pounding clued

00:18:49,220 --> 00:18:59,070
vector using namespace standard I very

00:18:57,330 --> 00:19:00,720
quickly actually get Intel a sense what

00:18:59,070 --> 00:19:02,640
we're doing it behind this thing behind

00:19:00,720 --> 00:19:04,500
the scenes is creating a sort of empty

00:19:02,640 --> 00:19:07,590
project that has all of the basic

00:19:04,500 --> 00:19:10,470
include files set up this also works for

00:19:07,590 --> 00:19:12,840
if you like go onto github using the

00:19:10,470 --> 00:19:15,150
github extension download some code and

00:19:12,840 --> 00:19:16,710
you just want to pop up one CPP file and

00:19:15,150 --> 00:19:19,050
look through it you can do it that way

00:19:16,710 --> 00:19:21,810
this is really great for just like very

00:19:19,050 --> 00:19:23,820
quick intellisense on code that doesn't

00:19:21,810 --> 00:19:26,010
yet build in Visual Studio and this is

00:19:23,820 --> 00:19:29,010
an area where we'll continue to to make

00:19:26,010 --> 00:19:30,510
it better so that's single file

00:19:29,010 --> 00:19:33,050
intellisense all right back to the

00:19:30,510 --> 00:19:33,050
finicky

00:19:35,150 --> 00:19:43,590
okay another really useful new feature

00:19:41,100 --> 00:19:45,060
is simplified template intellisense this

00:19:43,590 --> 00:19:48,510
is fit and finish kind of thing but if

00:19:45,060 --> 00:19:51,390
in Visual Studio 2013 if you hover over

00:19:48,510 --> 00:19:52,890
the after the parentheses for W string

00:19:51,390 --> 00:19:54,540
you get something that it actually

00:19:52,890 --> 00:19:56,610
doesn't even fit on the screen right it

00:19:54,540 --> 00:19:58,230
actually goes off to the side and all

00:19:56,610 --> 00:20:00,570
you wanted to know is what were the

00:19:58,230 --> 00:20:03,300
parameter names and what is the template

00:20:00,570 --> 00:20:04,770
and and now we've done some heuristics

00:20:03,300 --> 00:20:06,420
in order to make that better so I hope

00:20:04,770 --> 00:20:07,770
that that should just be a light up in

00:20:06,420 --> 00:20:11,250
your day-to-day work you should see

00:20:07,770 --> 00:20:14,670
improvements yes I actually did spend

00:20:11,250 --> 00:20:15,990
time going through the xkcd license page

00:20:14,670 --> 00:20:20,730
to make sure to use the thing I can yeah

00:20:15,990 --> 00:20:22,770
my favorite xkcd comic one of the things

00:20:20,730 --> 00:20:24,690
that we think we can do to make c++ more

00:20:22,770 --> 00:20:29,190
productive that just plain-old works is

00:20:24,690 --> 00:20:31,650
tune the edit compile debug cycle let's

00:20:29,190 --> 00:20:34,080
face it every day we spend way more time

00:20:31,650 --> 00:20:36,300
making small tweaks and debugging and

00:20:34,080 --> 00:20:38,850
and we want that cycle to be really

00:20:36,300 --> 00:20:41,670
tight as I said before I used to be the

00:20:38,850 --> 00:20:44,370
dev manager for the debugger and what I

00:20:41,670 --> 00:20:45,930
always learned was you know people say

00:20:44,370 --> 00:20:47,400
they write code all day if they talk to

00:20:45,930 --> 00:20:49,200
Grandma right but it's not really true

00:20:47,400 --> 00:20:50,370
you do stay all day is fixed you spend

00:20:49,200 --> 00:20:51,390
five minutes writing code and then you

00:20:50,370 --> 00:20:54,300
know the rest of the day trying to make

00:20:51,390 --> 00:20:57,390
it work and and so what we have done is

00:20:54,300 --> 00:20:59,940
tried to focus on build throughput for

00:20:57,390 --> 00:21:01,530
incremental builds in this release and

00:20:59,940 --> 00:21:03,810
so we went through the list of things

00:21:01,530 --> 00:21:05,550
that were blocking us from doing a great

00:21:03,810 --> 00:21:07,650
job on incremental builds and tried to

00:21:05,550 --> 00:21:09,060
fix them one by one some of the things

00:21:07,650 --> 00:21:12,050
are kind of global like one of the

00:21:09,060 --> 00:21:14,280
things we found was some some error some

00:21:12,050 --> 00:21:15,690
some inefficiencies in our template

00:21:14,280 --> 00:21:16,680
processing that we fixed and that

00:21:15,690 --> 00:21:18,540
actually made a big difference that

00:21:16,680 --> 00:21:20,730
works in full builds and incremental

00:21:18,540 --> 00:21:24,270
builds but we also found that we were

00:21:20,730 --> 00:21:25,590
mostly blocked on linker and on pvb

00:21:24,270 --> 00:21:28,710
generation those were the two big

00:21:25,590 --> 00:21:30,930
bottlenecks for our build throughput so

00:21:28,710 --> 00:21:33,720
we created the slash debug fast link

00:21:30,930 --> 00:21:35,430
switch this basically allows it to

00:21:33,720 --> 00:21:37,350
rather than having to wait at the end

00:21:35,430 --> 00:21:39,870
and elaborate all the PD B's there are

00:21:37,350 --> 00:21:41,910
links to the sub-q B's that get

00:21:39,870 --> 00:21:43,680
generated so that should make a big

00:21:41,910 --> 00:21:46,530
difference it's not on by default it's

00:21:43,680 --> 00:21:47,520
available in the project properties it

00:21:46,530 --> 00:21:50,610
conflicted with another

00:21:47,520 --> 00:21:52,440
feature so by all means if you're not

00:21:50,610 --> 00:21:54,870
seeing the gains that I want you to see

00:21:52,440 --> 00:21:57,210
and your incremental build go in and set

00:21:54,870 --> 00:22:00,900
that switch in the linker flags slash

00:21:57,210 --> 00:22:03,000
debug fast link also the linker is now

00:22:00,900 --> 00:22:05,730
capable of doing incremental links for

00:22:03,000 --> 00:22:08,250
static libraries this is actually what's

00:22:05,730 --> 00:22:11,280
largely - thanks for the gigantic

00:22:08,250 --> 00:22:12,930
increase in Kinect Sports rivals Kinect

00:22:11,280 --> 00:22:14,400
Sports rivals team came and came to us

00:22:12,930 --> 00:22:17,550
and said hey every time we make a change

00:22:14,400 --> 00:22:19,800
and rebuild it takes 958 seconds and

00:22:17,550 --> 00:22:21,120
we're like that ain't right so we really

00:22:19,800 --> 00:22:24,000
dug into that and we managed to get it

00:22:21,120 --> 00:22:27,780
down to basically 7% of what it used to

00:22:24,000 --> 00:22:32,040
be in addition we've made several

00:22:27,780 --> 00:22:34,410
improvements to incremental LTC gl TCG

00:22:32,040 --> 00:22:36,120
is link time code generation or what our

00:22:34,410 --> 00:22:39,480
claim friends call link time

00:22:36,120 --> 00:22:41,550
optimizations LTO if you've tried this

00:22:39,480 --> 00:22:44,190
in the past and rejected it because it

00:22:41,550 --> 00:22:47,040
was too slow please try it again we've

00:22:44,190 --> 00:22:49,020
we've made incremental LT CG much faster

00:22:47,040 --> 00:22:51,390
it should work better let me know if it

00:22:49,020 --> 00:22:54,030
doesn't and actually that's a meta point

00:22:51,390 --> 00:22:57,240
on this whole slide we want to know if

00:22:54,030 --> 00:22:58,440
you're seeing unusual build things if

00:22:57,240 --> 00:22:59,730
you go and you install this and you're

00:22:58,440 --> 00:23:01,650
not seeing any improvements an

00:22:59,730 --> 00:23:04,710
incremental link please let us know

00:23:01,650 --> 00:23:06,780
we've also published a auto PCH tool up

00:23:04,710 --> 00:23:08,040
on the gallery that you can use to go

00:23:06,780 --> 00:23:10,200
and look through your precompiled

00:23:08,040 --> 00:23:12,360
headers and make sure it's well targeted

00:23:10,200 --> 00:23:13,920
it goes and checks for things like you

00:23:12,360 --> 00:23:15,390
know hey you're compiling this header

00:23:13,920 --> 00:23:19,080
file a bunch of times why don't you move

00:23:15,390 --> 00:23:20,790
it into the PCH file and of course

00:23:19,080 --> 00:23:22,560
there's just a bunch of algorithmic

00:23:20,790 --> 00:23:24,450
improvements across the tools and also

00:23:22,560 --> 00:23:26,850
poco builds and instrumentation has been

00:23:24,450 --> 00:23:28,620
significantly improved so you know I

00:23:26,850 --> 00:23:30,900
don't expect everybody to go ninety

00:23:28,620 --> 00:23:32,070
seven percent faster but in incremental

00:23:30,900 --> 00:23:33,330
builds you should see significant

00:23:32,070 --> 00:23:35,700
improvement if you don't let me know

00:23:33,330 --> 00:23:37,800
full builds you can see we also saw some

00:23:35,700 --> 00:23:39,420
improvements based on our permits -

00:23:37,800 --> 00:23:42,530
template processing and we're going to

00:23:39,420 --> 00:23:45,750
keep going on this in the updates ok

00:23:42,530 --> 00:23:47,910
Diagnostics so back one more thing on

00:23:45,750 --> 00:23:50,340
productivity I want to show you some new

00:23:47,910 --> 00:23:54,350
Diagnostics figure features inside

00:23:50,340 --> 00:23:58,130
Visual Studio so I'm going to open up a

00:23:54,350 --> 00:23:58,130
Famicon tracker

00:23:58,810 --> 00:24:05,830
oh I got to do that again all right

00:24:01,480 --> 00:24:08,500
you're in charge of of that you can see

00:24:05,830 --> 00:24:13,390
me now great back to the start page I

00:24:08,500 --> 00:24:17,880
had all these pinned fami tracker open

00:24:13,390 --> 00:24:17,880
all right so I'm gonna launch the app

00:24:18,630 --> 00:24:25,170
all right so there are a bunch of new

00:24:21,970 --> 00:24:27,730
Diagnostics tools inside Visual Studio

00:24:25,170 --> 00:24:30,490
you can see one popping up right here

00:24:27,730 --> 00:24:32,830
this is the Diagnostics tools window the

00:24:30,490 --> 00:24:34,420
idea here is to get you live information

00:24:32,830 --> 00:24:36,790
about your application while it's

00:24:34,420 --> 00:24:38,830
running so for instance you can see I've

00:24:36,790 --> 00:24:40,090
got the CPU utilization which is quite

00:24:38,830 --> 00:24:41,620
low because I'm not touching it really

00:24:40,090 --> 00:24:44,620
you can see there's a little tiny lines

00:24:41,620 --> 00:24:47,650
at the bottom so let's say that we were

00:24:44,620 --> 00:24:50,620
getting reports in our Famicon music

00:24:47,650 --> 00:24:53,190
tracker application that we got leaks so

00:24:50,620 --> 00:24:55,810
here I'm gonna do is I'm gonna make this

00:24:53,190 --> 00:24:59,830
it you can see the the spike in the

00:24:55,810 --> 00:25:03,220
memory when I do this right right okay

00:24:59,830 --> 00:25:04,870
great so now I've got that report and I

00:25:03,220 --> 00:25:07,060
can see right in there so let's say I

00:25:04,870 --> 00:25:08,350
want to do something about that so what

00:25:07,060 --> 00:25:12,190
I'm gonna do is I'm gonna launch it

00:25:08,350 --> 00:25:14,410
under the debugger just the plain old

00:25:12,190 --> 00:25:20,560
debugger no special profilers or

00:25:14,410 --> 00:25:22,840
anything and in theory I'm gonna hit

00:25:20,560 --> 00:25:37,050
whoops didn't hit my breakpoint need to

00:25:22,840 --> 00:25:37,050
go back in the breakpoints are gone

00:25:37,650 --> 00:25:41,910
let's see if I can remember where it is

00:25:46,800 --> 00:25:54,340
doesn't matter what I'm gonna do is I'm

00:25:50,230 --> 00:25:56,050
gonna take a baseline I'm going to cause

00:25:54,340 --> 00:25:59,590
the leak to happen again

00:25:56,050 --> 00:26:04,780
and we'll see if we can find it I'm Way

00:25:59,590 --> 00:26:09,429
off script right now guys okay so I took

00:26:04,780 --> 00:26:11,410
a snapshot while this is executing that

00:26:09,429 --> 00:26:14,410
was weird okay good

00:26:11,410 --> 00:26:16,480
while this is executing what work what

00:26:14,410 --> 00:26:18,070
we're actually tracking is every

00:26:16,480 --> 00:26:22,900
allocation

00:26:18,070 --> 00:26:26,890
it's an ND allocation its size its type

00:26:22,900 --> 00:26:28,210
and its allocation stack the idea being

00:26:26,890 --> 00:26:31,059
that we want you to be able to go and do

00:26:28,210 --> 00:26:32,950
memory investigations of you know where

00:26:31,059 --> 00:26:36,030
the changes are coming from so you can

00:26:32,950 --> 00:26:38,470
see here it says plus 786 kilobytes so

00:26:36,030 --> 00:26:40,210
I'm gonna go here I'm gonna click on

00:26:38,470 --> 00:26:43,840
that it's going to take me over here to

00:26:40,210 --> 00:26:46,210
my heap view and I can see that there is

00:26:43,840 --> 00:26:49,420
a long array I should say there are two

00:26:46,210 --> 00:26:53,290
long arrays of total size of 400

00:26:49,420 --> 00:26:55,510
kilobytes that were created that were

00:26:53,290 --> 00:27:00,100
responsible for that increase in process

00:26:55,510 --> 00:27:01,870
memory so I'm gonna go in here I'm gonna

00:27:00,100 --> 00:27:03,910
drill into that I can see I've got two

00:27:01,870 --> 00:27:06,850
instances of this now remember I'm

00:27:03,910 --> 00:27:08,740
attached as a debugger what that allows

00:27:06,850 --> 00:27:11,410
me to do is have first of all really

00:27:08,740 --> 00:27:13,179
fine green control of where I take those

00:27:11,410 --> 00:27:14,650
snapshots so for instance if my

00:27:13,179 --> 00:27:16,030
breakpoints had been set properly I

00:27:14,650 --> 00:27:17,980
would have been able to stop at an exact

00:27:16,030 --> 00:27:19,750
line I wanted to take the before

00:27:17,980 --> 00:27:21,190
snapshot and then run to a different

00:27:19,750 --> 00:27:23,740
line where I wanted to take the after

00:27:21,190 --> 00:27:25,870
snapshot but then once I have that I

00:27:23,740 --> 00:27:29,020
can't even I can I can I can look at

00:27:25,870 --> 00:27:32,620
that instance in memory and I can also

00:27:29,020 --> 00:27:33,040
get the allocation stack that inserted

00:27:32,620 --> 00:27:35,530
that ah

00:27:33,040 --> 00:27:38,260
there's my function so if I go to insert

00:27:35,530 --> 00:27:40,750
pane I can get to the exact line where

00:27:38,260 --> 00:27:41,710
that was allocated and I can actually

00:27:40,750 --> 00:27:45,179
put the breakpoints that are missing

00:27:41,710 --> 00:27:49,080
back into the function which is great

00:27:45,179 --> 00:27:51,970
and so that's how you can very quickly

00:27:49,080 --> 00:27:54,940
investigate leaks and also the overall

00:27:51,970 --> 00:27:56,590
memory usage of your applique

00:27:54,940 --> 00:27:59,290
you can compare snapshots but you can

00:27:56,590 --> 00:28:01,840
also just go in if I click on simply

00:27:59,290 --> 00:28:03,190
heap size it will take me to a view

00:28:01,840 --> 00:28:05,290
where we're not comparing against the

00:28:03,190 --> 00:28:06,790
baseline we can just see what are all of

00:28:05,290 --> 00:28:09,700
the things that are currently in the

00:28:06,790 --> 00:28:11,170
heap and still my my long lungs are the

00:28:09,700 --> 00:28:14,650
highest thing and the next highest thing

00:28:11,170 --> 00:28:16,000
is this you can we have a stack view so

00:28:14,650 --> 00:28:18,490
that you can actually navigate the stack

00:28:16,000 --> 00:28:20,200
and see which call tree is the most

00:28:18,490 --> 00:28:22,030
allocating one this is a very useful

00:28:20,200 --> 00:28:24,910
feature we get feedback all the time

00:28:22,030 --> 00:28:28,809
that it's too hard to do memory tools

00:28:24,910 --> 00:28:30,940
and so this is our take at that very

00:28:28,809 --> 00:28:33,340
quickly the exception settings window

00:28:30,940 --> 00:28:35,490
has been completely revamped it is no

00:28:33,340 --> 00:28:38,470
longer a modal dialog which is huge

00:28:35,490 --> 00:28:40,660
you can go in here and you know fine

00:28:38,470 --> 00:28:42,429
grain selections on the types of

00:28:40,660 --> 00:28:44,530
exceptions you want to break on so if

00:28:42,429 --> 00:28:46,390
you want to skip all the standard

00:28:44,530 --> 00:28:47,919
exceptions or break on all the standard

00:28:46,390 --> 00:28:50,500
exceptions you just modify this settings

00:28:47,919 --> 00:28:54,780
dialog one last thing I want to show now

00:28:50,500 --> 00:28:58,510
that I've got my breakpoints back is is

00:28:54,780 --> 00:29:00,220
what we call perf tips I'm not sure if

00:28:58,510 --> 00:29:03,429
you noticed them during any of my demos

00:29:00,220 --> 00:29:06,730
but there's very small I'm gonna hit the

00:29:03,429 --> 00:29:08,410
breakpoint this time yay and as you saw

00:29:06,730 --> 00:29:10,270
I also set another breakpoint at the end

00:29:08,410 --> 00:29:12,460
of this I used to own the visual studio

00:29:10,270 --> 00:29:14,290
profiler for a long a lot of years and

00:29:12,460 --> 00:29:15,940
we always had trouble getting people to

00:29:14,290 --> 00:29:18,250
use the tool profiler so it's such an

00:29:15,940 --> 00:29:19,960
expert-level tool no matter how much we

00:29:18,250 --> 00:29:21,460
tried to make it simpler we always had

00:29:19,960 --> 00:29:23,320
trouble getting people to actually do

00:29:21,460 --> 00:29:24,970
profiling what inevitably people would

00:29:23,320 --> 00:29:26,770
do is go into the beginning of a

00:29:24,970 --> 00:29:30,190
function and write yes

00:29:26,770 --> 00:29:32,470
int a equals you know get timestamp and

00:29:30,190 --> 00:29:36,850
then at the end B equals get timestamp

00:29:32,470 --> 00:29:38,890
and then the magical B minus a and so we

00:29:36,850 --> 00:29:40,179
just came you know eventually like why

00:29:38,890 --> 00:29:42,370
don't we just give them what they want

00:29:40,179 --> 00:29:45,220
and and that's what this feature does

00:29:42,370 --> 00:29:48,040
when I run two to the second breakpoint

00:29:45,220 --> 00:29:49,570
you can see what it actually did was can

00:29:48,040 --> 00:29:51,610
you read that probably not it says less

00:29:49,570 --> 00:29:54,970
than or equal to 39 milliseconds elapsed

00:29:51,610 --> 00:29:56,679
we're actually timing between every step

00:29:54,970 --> 00:29:58,690
and every breakpoint so that you can

00:29:56,679 --> 00:30:00,520
find places where you can do those like

00:29:58,690 --> 00:30:05,140
quick investigations yes this works

00:30:00,520 --> 00:30:06,790
under release mode and and yes it also

00:30:05,140 --> 00:30:08,679
subtracts out any overhead the debugger

00:30:06,790 --> 00:30:09,010
itself is added the heuristics are

00:30:08,679 --> 00:30:11,380
pretty

00:30:09,010 --> 00:30:13,240
we think it's pretty accurate and all

00:30:11,380 --> 00:30:14,620
that stuff shows up in here you can see

00:30:13,240 --> 00:30:16,809
my breakpoints hit you can use this

00:30:14,620 --> 00:30:19,900
listings to navigate through the places

00:30:16,809 --> 00:30:21,490
and source that you've been recently one

00:30:19,900 --> 00:30:25,020
last thing in my diag thing and then I'm

00:30:21,490 --> 00:30:27,520
going to move back to the slides

00:30:25,020 --> 00:30:30,610
not viz I think is part of the secret

00:30:27,520 --> 00:30:34,890
sauce of our debugger nat vis is a

00:30:30,610 --> 00:30:34,890
format yeah sure whatever

00:30:36,000 --> 00:30:41,770
the nat vis format is totally public

00:30:38,799 --> 00:30:44,230
it's what we use to make standard vector

00:30:41,770 --> 00:30:46,929
look like a vector instead of what poor

00:30:44,230 --> 00:30:49,000
Steffen has to deal with when it has an

00:30:46,929 --> 00:30:51,130
implementer we do that using a

00:30:49,000 --> 00:30:54,160
completely documented well mostly

00:30:51,130 --> 00:30:55,690
documented a format for native

00:30:54,160 --> 00:30:58,390
visualizations and now what we're doing

00:30:55,690 --> 00:31:01,720
is there's if you add a dotnet this file

00:30:58,390 --> 00:31:03,100
to your project and you use the schema

00:31:01,720 --> 00:31:05,290
and you know edit it up and make it all

00:31:03,100 --> 00:31:07,690
nice the way you want your own objects

00:31:05,290 --> 00:31:10,090
to be done will actually take that nazma

00:31:07,690 --> 00:31:13,090
information sticking into the PDB and

00:31:10,090 --> 00:31:15,309
anybody who then goes and uses the

00:31:13,090 --> 00:31:17,590
debugger will get that view of the

00:31:15,309 --> 00:31:19,809
object so you can go and be a hero for

00:31:17,590 --> 00:31:22,360
your company go and you know take your

00:31:19,809 --> 00:31:24,010
nastiest gnarliest type putting that vis

00:31:22,360 --> 00:31:25,780
in there stick it in the project so it

00:31:24,010 --> 00:31:27,280
builds and suddenly debugging for every

00:31:25,780 --> 00:31:28,390
single person in your organs better it's

00:31:27,280 --> 00:31:30,460
totally worth it

00:31:28,390 --> 00:31:33,820
more quite a few have any questions grab

00:31:30,460 --> 00:31:35,679
me afterwards okay oh and I'm not going

00:31:33,820 --> 00:31:38,290
to demo it but we completely rewrote

00:31:35,679 --> 00:31:40,780
edit and continue it's completely new it

00:31:38,290 --> 00:31:43,120
works for 64-bit now as well as 32-bit

00:31:40,780 --> 00:31:46,960
it should be much more reliable if it's

00:31:43,120 --> 00:31:48,520
not send a frown okay

00:31:46,960 --> 00:31:52,330
let's talk about cross plan how am i

00:31:48,520 --> 00:31:54,700
doing on time half way okay we went we

00:31:52,330 --> 00:31:56,260
got the 100 top apps from the Android

00:31:54,700 --> 00:31:57,460
Play Store and we figured out and we

00:31:56,260 --> 00:31:59,890
cracked them and we said which ones of

00:31:57,460 --> 00:32:01,150
these have native code in them a lot of

00:31:59,890 --> 00:32:02,860
these you'd expect you know like

00:32:01,150 --> 00:32:04,600
Facebook has a native code and it

00:32:02,860 --> 00:32:05,890
minecraft s tomato a lot of games have

00:32:04,600 --> 00:32:07,270
native code in it some things are a

00:32:05,890 --> 00:32:10,059
little more surprising I was I was

00:32:07,270 --> 00:32:11,590
surprised to see tinder there but you

00:32:10,059 --> 00:32:15,549
you've got all of these applications

00:32:11,590 --> 00:32:17,590
using C++ why well C++ is the common

00:32:15,549 --> 00:32:19,990
denominator you can get a full native

00:32:17,590 --> 00:32:22,660
experience on your application you get

00:32:19,990 --> 00:32:24,760
complete access to the devices SDK

00:32:22,660 --> 00:32:26,470
not some library that you have to worry

00:32:24,760 --> 00:32:27,640
about if you know it is the lowest

00:32:26,470 --> 00:32:30,100
common denominator

00:32:27,640 --> 00:32:31,630
you've got code reuse you you that you

00:32:30,100 --> 00:32:35,800
can have code shared between the

00:32:31,630 --> 00:32:39,600
different and better performance and you

00:32:35,800 --> 00:32:42,580
know especially with safe C++ security

00:32:39,600 --> 00:32:44,680
so let's talk about architecting your

00:32:42,580 --> 00:32:47,560
app we're seeing more and more teams go

00:32:44,680 --> 00:32:50,380
ahead and architect their applications

00:32:47,560 --> 00:32:54,460
like this for instance the office team

00:32:50,380 --> 00:32:59,860
is has been structured so that you have

00:32:54,460 --> 00:33:02,020
a shared C++ back end and then platform

00:32:59,860 --> 00:33:04,570
specific UI and what we call platform

00:33:02,020 --> 00:33:07,210
abstract station abstraction layer code

00:33:04,570 --> 00:33:09,730
that is specific but in the case of

00:33:07,210 --> 00:33:11,050
PowerPoint for example they've managed

00:33:09,730 --> 00:33:12,850
to get to the point which they talked

00:33:11,050 --> 00:33:16,090
about it last year cpp con where they

00:33:12,850 --> 00:33:18,820
have like 97% of the code in PowerPoint

00:33:16,090 --> 00:33:21,310
is shared is one big shared library that

00:33:18,820 --> 00:33:23,950
they use on both Android and iOS and

00:33:21,310 --> 00:33:26,290
Windows but this is not just us the

00:33:23,950 --> 00:33:29,020
Skype app is the same the Bing Maps app

00:33:26,290 --> 00:33:30,250
is the same Dropbox has did a talk on

00:33:29,020 --> 00:33:31,600
this last year and I think they had

00:33:30,250 --> 00:33:35,170
another talk this year about their dude

00:33:31,600 --> 00:33:37,360
Ginny so I'm going to just put this into

00:33:35,170 --> 00:33:39,970
the IDE really quickly too because I

00:33:37,360 --> 00:33:41,290
find that it helps like really help

00:33:39,970 --> 00:33:43,570
people understand what you see the way

00:33:41,290 --> 00:33:45,550
the solutions are laid out so I'm gonna

00:33:43,570 --> 00:33:48,190
go in here I'm going to open up a simple

00:33:45,550 --> 00:33:50,350
cube rotating demo and while it's

00:33:48,190 --> 00:33:52,240
loading I want to show you this this is

00:33:50,350 --> 00:33:54,070
our Android emulator we are SuperDuper

00:33:52,240 --> 00:33:56,500
serious about this cross-platform mobile

00:33:54,070 --> 00:33:58,930
development stuff enough so that we went

00:33:56,500 --> 00:34:02,680
and we wrote our own emulator it's super

00:33:58,930 --> 00:34:04,390
fast it's fully featured you can you

00:34:02,680 --> 00:34:06,130
know it's got accelerometer support you

00:34:04,390 --> 00:34:07,870
can come in here and do this you can use

00:34:06,130 --> 00:34:11,169
your touch screen for it too

00:34:07,870 --> 00:34:13,179
got location support network support the

00:34:11,169 --> 00:34:15,340
startup is fast you can emulate

00:34:13,179 --> 00:34:17,889
batteries you can take screenshots

00:34:15,340 --> 00:34:21,159
emulate the camera emulate an SD card

00:34:17,889 --> 00:34:23,080
it's a fully functioning if you want you

00:34:21,159 --> 00:34:26,379
can even use this with Android studio

00:34:23,080 --> 00:34:30,429
like it just wires up to ADB and and

00:34:26,379 --> 00:34:34,679
all's well so here we are inside the app

00:34:30,429 --> 00:34:36,480
and so let me do a window layout huh

00:34:34,679 --> 00:34:39,240
so what you can see it here is I've got

00:34:36,480 --> 00:34:41,190
a library that's shared and to

00:34:39,240 --> 00:34:43,320
application heads on this this uses the

00:34:41,190 --> 00:34:45,030
same shared project stuff that we do for

00:34:43,320 --> 00:34:46,230
universal applications so it should look

00:34:45,030 --> 00:34:49,230
at least a little familiar if you've

00:34:46,230 --> 00:34:51,659
done any recent Windows work so we've

00:34:49,230 --> 00:34:53,850
got an Android application what this is

00:34:51,659 --> 00:34:56,070
like basically a packaging project and

00:34:53,850 --> 00:34:57,630
this is the native activity which is an

00:34:56,070 --> 00:35:00,600
android concept which is like where

00:34:57,630 --> 00:35:02,670
main.cpp lives and this is a Windows

00:35:00,600 --> 00:35:04,800
Universal Windows 10 application that

00:35:02,670 --> 00:35:07,350
has that same shared library so we have

00:35:04,800 --> 00:35:08,520
heads on on the shared library for

00:35:07,350 --> 00:35:13,200
instance if you come in here and you

00:35:08,520 --> 00:35:14,940
open up the properties you can see that

00:35:13,200 --> 00:35:17,220
here we're building with clanging 3.6

00:35:14,940 --> 00:35:19,110
but we also give you the ability to

00:35:17,220 --> 00:35:21,330
build your Android application with GCC

00:35:19,110 --> 00:35:23,820
4.9 we're just using the underlying NDK

00:35:21,330 --> 00:35:25,980
stuff here and we use the underlying NDK

00:35:23,820 --> 00:35:28,020
build and stuff as well you can choose

00:35:25,980 --> 00:35:29,730
the STL implementation you want you can

00:35:28,020 --> 00:35:33,330
see that this will build a dot a file on

00:35:29,730 --> 00:35:35,880
Android likewise in Windows Universal

00:35:33,330 --> 00:35:38,250
but these the shared is actually the

00:35:35,880 --> 00:35:39,810
magic this is where the shared code is

00:35:38,250 --> 00:35:43,230
there's not much shared code in this one

00:35:39,810 --> 00:35:44,790
but I wanted to show was if you take a

00:35:43,230 --> 00:35:47,730
look at simple dot renderer what we have

00:35:44,790 --> 00:35:49,980
is per platform intellisense so like

00:35:47,730 --> 00:35:51,030
here's a simple way of looking at it I'm

00:35:49,980 --> 00:35:53,250
going to go ahead and I'm gonna go open

00:35:51,030 --> 00:35:55,110
document now if you notice up here I'm

00:35:53,250 --> 00:35:58,530
I'm looking at it through the lens of

00:35:55,110 --> 00:36:00,570
OpenGL ES app 10 Android dot static lip

00:35:58,530 --> 00:36:02,880
so when I go to open document on this

00:36:00,570 --> 00:36:06,120
it's gonna go and it's going to grab the

00:36:02,880 --> 00:36:08,070
one from the NDK all of the definitions

00:36:06,120 --> 00:36:10,350
flow from there it'll match whatever

00:36:08,070 --> 00:36:12,570
intellisense you get for the STL will be

00:36:10,350 --> 00:36:16,230
based on the one that ships with the NDK

00:36:12,570 --> 00:36:17,460
and likewise if you go here and you go

00:36:16,230 --> 00:36:19,350
to Windows and then you do the same

00:36:17,460 --> 00:36:21,000
thing to go to the open the document for

00:36:19,350 --> 00:36:24,620
vector it'll take us to a more familiar

00:36:21,000 --> 00:36:27,210
one and and so this is true of

00:36:24,620 --> 00:36:29,790
intellisense you you get exactly what

00:36:27,210 --> 00:36:31,650
you're expecting it's actually even

00:36:29,790 --> 00:36:34,670
emulating under the covers the

00:36:31,650 --> 00:36:36,300
differences between em SVC and clang

00:36:34,670 --> 00:36:38,250
even when it comes to things like

00:36:36,300 --> 00:36:40,080
languages we actually throw a switch and

00:36:38,250 --> 00:36:43,470
intellisense that tells us to emulate

00:36:40,080 --> 00:36:48,230
claying versus emulate em SVC so that's

00:36:43,470 --> 00:36:48,230
sort of a high level on cross-platform

00:36:48,480 --> 00:36:56,010
okay great so in Android we support kik

00:36:53,520 --> 00:36:59,070
Kenton lollipop we have inside the

00:36:56,010 --> 00:37:00,599
emulator we support OpenGL ES 2.0 it

00:36:59,070 --> 00:37:02,430
does multi-touch we I showed you the

00:37:00,599 --> 00:37:08,390
camera and Wi-Fi and network simulation

00:37:02,430 --> 00:37:14,010
stuff oh oh you mean push the button

00:37:08,390 --> 00:37:15,359
okay kind of didn't want to so you can

00:37:14,010 --> 00:37:17,280
debug directly from visual studio and

00:37:15,359 --> 00:37:20,250
the line that I have bolded I really

00:37:17,280 --> 00:37:23,750
want to call out here which is that if

00:37:20,250 --> 00:37:25,680
you have an apk you don't think thing I

00:37:23,750 --> 00:37:27,480
actually figured out what it's doing

00:37:25,680 --> 00:37:29,910
it's running the rehearsal timings from

00:37:27,480 --> 00:37:33,930
before anyways was the means I'm going

00:37:29,910 --> 00:37:36,660
to slow so what it's you you can take an

00:37:33,930 --> 00:37:39,480
apk the the packaging thing you're

00:37:36,660 --> 00:37:42,420
killing me you're killing me outlook and

00:37:39,480 --> 00:37:45,720
and actually go and just launch just

00:37:42,420 --> 00:37:48,119
that you can like do project open on the

00:37:45,720 --> 00:37:49,829
apk and launch it so even if you never

00:37:48,119 --> 00:37:51,329
want to build but you just want to use

00:37:49,829 --> 00:37:53,369
our debugger just like you can only use

00:37:51,329 --> 00:37:55,410
our emulator there are all those entry

00:37:53,369 --> 00:37:57,270
points so you know we're happy to have

00:37:55,410 --> 00:38:01,050
you as a customer just use the part that

00:37:57,270 --> 00:38:04,710
makes sense for you we've heard a number

00:38:01,050 --> 00:38:07,680
of times that Android the debugging is

00:38:04,710 --> 00:38:09,300
is very fast and very reliable for folks

00:38:07,680 --> 00:38:11,790
we're using it internally inside Visual

00:38:09,300 --> 00:38:13,859
Studio as well I'm sorry inside of

00:38:11,790 --> 00:38:16,920
Microsoft we have many big teams oh

00:38:13,859 --> 00:38:19,829
using it including the Bing Maps team is

00:38:16,920 --> 00:38:21,150
on it or am I allowed to say minecraft

00:38:19,829 --> 00:38:24,810
uses it

00:38:21,150 --> 00:38:25,770
iOS feature sets a little bit less there

00:38:24,810 --> 00:38:27,480
you know what I'm gonna do I'm gonna

00:38:25,770 --> 00:38:28,589
actually stop this so that I don't have

00:38:27,480 --> 00:38:29,940
to fight it anymore and you guys are

00:38:28,589 --> 00:38:31,920
gonna look at slide sorter view because

00:38:29,940 --> 00:38:35,940
it's going to be easier for us to do

00:38:31,920 --> 00:38:41,670
this talk that's what I call quick fix

00:38:35,940 --> 00:38:44,160
engineering great all right iOS we have

00:38:41,670 --> 00:38:46,980
support 6 7 & 8 you can debug from

00:38:44,160 --> 00:38:51,420
visual studio you do need a Mac because

00:38:46,980 --> 00:38:55,500
of licensing and so you can still do

00:38:51,420 --> 00:38:59,730
debug against a device and the and the

00:38:55,500 --> 00:39:01,290
iOS emulator on the Mac Windows 10

00:38:59,730 --> 00:39:03,060
platform development completely

00:39:01,290 --> 00:39:06,840
supported individuals to

00:39:03,060 --> 00:39:08,609
uses that same shared project idea just

00:39:06,840 --> 00:39:11,250
going to go quickly to conformance

00:39:08,609 --> 00:39:13,380
alright let's talk about conformance we

00:39:11,250 --> 00:39:14,730
made a ton a ton a ton a ton a ton of

00:39:13,380 --> 00:39:16,830
progress on conformance and visual

00:39:14,730 --> 00:39:18,930
studio 2015 I put all these things on

00:39:16,830 --> 00:39:19,800
the slide not because I want you to not

00:39:18,930 --> 00:39:21,570
because I'm going to go through them in

00:39:19,800 --> 00:39:23,369
detail I just wanted to kind of give a

00:39:21,570 --> 00:39:26,490
sense of these are just the ones that

00:39:23,369 --> 00:39:27,930
are new from Visual Studio 2013 we've

00:39:26,490 --> 00:39:29,760
made a ton of progress you can see

00:39:27,930 --> 00:39:31,970
there's stuff in there from C++ 14

00:39:29,760 --> 00:39:35,160
there's even stuff up there from C++

00:39:31,970 --> 00:39:37,020
eleventeen maybe like our weight support

00:39:35,160 --> 00:39:38,430
you can see there's a couple of things

00:39:37,020 --> 00:39:40,890
that we're gonna even clean up a little

00:39:38,430 --> 00:39:44,520
bit for update 1 improved contacts /

00:39:40,890 --> 00:39:45,420
support a weight will get better so I

00:39:44,520 --> 00:39:48,450
actually want to look at this through

00:39:45,420 --> 00:39:50,550
the lens of what's still missing that's

00:39:48,450 --> 00:39:52,140
it that's that's the complete as far as

00:39:50,550 --> 00:39:53,940
I know lists of language conformance

00:39:52,140 --> 00:39:56,280
features of things that are missing we

00:39:53,940 --> 00:39:58,140
are working right now feverishly on

00:39:56,280 --> 00:40:00,869
making sure that we can get expressions

00:39:58,140 --> 00:40:03,210
Feeny that will get us to the end of C++

00:40:00,869 --> 00:40:05,070
11 we will have full C++ 11 support as

00:40:03,210 --> 00:40:07,230
soon as we complete expressions fini in

00:40:05,070 --> 00:40:10,140
ye olden times we would have made you

00:40:07,230 --> 00:40:12,630
wait until the the next version of

00:40:10,140 --> 00:40:14,790
Visual Studio for that loud and clear

00:40:12,630 --> 00:40:16,740
feedback that that is you know if we can

00:40:14,790 --> 00:40:18,780
keep the breaking changes to zero we

00:40:16,740 --> 00:40:20,940
that there's strong preference for us to

00:40:18,780 --> 00:40:23,010
be able to roll out these improvements

00:40:20,940 --> 00:40:25,560
so you'll see improvements to

00:40:23,010 --> 00:40:27,570
expressions Feeny in update 1 it's

00:40:25,560 --> 00:40:30,030
already a lot better but we will keep

00:40:27,570 --> 00:40:30,690
working and through the updates until we

00:40:30,030 --> 00:40:33,930
get it right

00:40:30,690 --> 00:40:36,210
I wanted to give you some flavor of the

00:40:33,930 --> 00:40:37,560
relative levels of difficulty or size of

00:40:36,210 --> 00:40:40,170
the remaining features obviously

00:40:37,560 --> 00:40:42,150
generalized Const expert is a really

00:40:40,170 --> 00:40:43,290
really big language feature and you

00:40:42,150 --> 00:40:45,599
shouldn't expect us to have that in

00:40:43,290 --> 00:40:48,060
update 1 for instance but we will be

00:40:45,599 --> 00:40:50,010
working on it soon NS DM eyes 4

00:40:48,060 --> 00:40:51,750
aggregates which is a C++ 14 feature we

00:40:50,010 --> 00:40:53,550
don't have is a small one that one

00:40:51,750 --> 00:40:55,560
you'll get sooner rather than later and

00:40:53,550 --> 00:40:58,109
variable templates is small and I think

00:40:55,560 --> 00:41:01,500
John is excited about checking that one

00:40:58,109 --> 00:41:03,420
in right to your face lookup is hard we

00:41:01,500 --> 00:41:05,220
will break the universe if we just you

00:41:03,420 --> 00:41:08,550
know mindlessly want to in and fix that

00:41:05,220 --> 00:41:11,190
we are continue to work on our

00:41:08,550 --> 00:41:14,130
rejuvenation of the compiler source base

00:41:11,190 --> 00:41:15,950
in order to make it more amenable to

00:41:14,130 --> 00:41:17,870
these types of things

00:41:15,950 --> 00:41:20,540
I'm not saying no I'm just saying that

00:41:17,870 --> 00:41:22,490
that's further down the line and c99

00:41:20,540 --> 00:41:25,520
preprocessor is still missing we will

00:41:22,490 --> 00:41:28,610
get these things let's talk about

00:41:25,520 --> 00:41:30,380
libraries this one I didn't even want to

00:41:28,610 --> 00:41:32,210
make a slide that had all the new stuff

00:41:30,380 --> 00:41:35,750
in it cuz Stefan's got a really good

00:41:32,210 --> 00:41:37,700
blog post and frankly it's a lot let's

00:41:35,750 --> 00:41:40,850
just talk about what's missing

00:41:37,700 --> 00:41:43,160
it's these these things C++ 14 we need

00:41:40,850 --> 00:41:45,590
ste name before we can do this one and

00:41:43,160 --> 00:41:49,270
then there are two new C++ 17 things

00:41:45,590 --> 00:41:54,950
that we'll get in as soon as we can okay

00:41:49,270 --> 00:41:57,590
library updates universal CRT CRT is now

00:41:54,950 --> 00:41:59,510
an OS component it ships it's still

00:41:57,590 --> 00:42:02,210
supported down to XP did I mention XP is

00:41:59,510 --> 00:42:05,210
still supported we will never break

00:42:02,210 --> 00:42:07,760
changes against the CRT again it is a

00:42:05,210 --> 00:42:10,250
stable OS component this will not be a

00:42:07,760 --> 00:42:11,600
you'll pay there are some refactorings

00:42:10,250 --> 00:42:14,120
that went into this one so there are

00:42:11,600 --> 00:42:16,370
some incompatibilities they're mostly

00:42:14,120 --> 00:42:18,230
manageable and from from then on no more

00:42:16,370 --> 00:42:20,300
breaking changes we did actually make a

00:42:18,230 --> 00:42:22,760
small MFC improvement if you are who has

00:42:20,300 --> 00:42:24,830
MS yep alright good

00:42:22,760 --> 00:42:26,870
Hey how would you like uh door resize

00:42:24,830 --> 00:42:28,640
for dialogues cuz that's that's a new

00:42:26,870 --> 00:42:30,650
update for MFC in there there was enough

00:42:28,640 --> 00:42:32,150
noise about us needing to make some

00:42:30,650 --> 00:42:33,980
small edits that we went and did that

00:42:32,150 --> 00:42:36,470
one if there are things like that you

00:42:33,980 --> 00:42:38,800
guys can come and yell at me later upon

00:42:36,470 --> 00:42:41,930
codeplex we have parallel STL

00:42:38,800 --> 00:42:44,000
implementation as well as the Casablanca

00:42:41,930 --> 00:42:46,190
C++ rest SDK and you can see we added

00:42:44,000 --> 00:42:48,500
some features there I know I'm running a

00:42:46,190 --> 00:42:51,410
minute or two late but I'm almost there

00:42:48,500 --> 00:42:52,460
introducing clang C to Jim did a talk on

00:42:51,410 --> 00:42:54,350
this on Monday I'm not going to go

00:42:52,460 --> 00:42:55,850
through a ton of detail on this we took

00:42:54,350 --> 00:42:58,130
the clang front-end and hooked it up to

00:42:55,850 --> 00:43:00,500
the Microsoft back-end we're going to

00:42:58,130 --> 00:43:02,060
ship this in an update why did we do

00:43:00,500 --> 00:43:03,590
this we want you to be able to use the

00:43:02,060 --> 00:43:04,880
same front-end to reduce the overhead of

00:43:03,590 --> 00:43:07,130
bringing cross-platform libraries and

00:43:04,880 --> 00:43:08,870
code to Windows basically my thing at

00:43:07,130 --> 00:43:10,700
the beginning about us making it much

00:43:08,870 --> 00:43:12,320
easier for to do cross-platform

00:43:10,700 --> 00:43:14,000
development this is totally on message

00:43:12,320 --> 00:43:15,230
for that by doing it the way we're doing

00:43:14,000 --> 00:43:17,210
it it allows us to bring you know

00:43:15,230 --> 00:43:20,290
compromises debugging and it allows you

00:43:17,210 --> 00:43:22,670
to link that with our existing libraries

00:43:20,290 --> 00:43:24,380
and I just want to make sure I'm

00:43:22,670 --> 00:43:26,960
absolutely clear on this and no that

00:43:24,380 --> 00:43:28,640
doesn't mean the code that you have that

00:43:26,960 --> 00:43:29,590
only works with our front-end is now

00:43:28,640 --> 00:43:31,390
abandoned

00:43:29,590 --> 00:43:32,950
we continue to make as you saw a Mobius

00:43:31,390 --> 00:43:36,550
slide I continued make investments on

00:43:32,950 --> 00:43:38,980
our existing front end hey we've been I

00:43:36,550 --> 00:43:42,910
the message that we've given you guys on

00:43:38,980 --> 00:43:44,740
uncie has been messy I find whenever we

00:43:42,910 --> 00:43:48,370
post basically any blog post the first

00:43:44,740 --> 00:43:51,340
piece of feedback is see and message

00:43:48,370 --> 00:43:53,140
heard we care about see they're actually

00:43:51,340 --> 00:43:55,330
as we went to go prep for the clang see

00:43:53,140 --> 00:43:57,040
to demo it was hard for me to find open

00:43:55,330 --> 00:43:59,860
source libraries where we didn't have

00:43:57,040 --> 00:44:01,270
enough c9e niden support to compile them

00:43:59,860 --> 00:44:06,340
i actually didn't find any if you know

00:44:01,270 --> 00:44:08,950
one let me know what ffmpeg works yeah

00:44:06,340 --> 00:44:12,760
that's a thump egg was works I couldn't

00:44:08,950 --> 00:44:14,770
live AV code yeah all good so these are

00:44:12,760 --> 00:44:16,720
the things that are missing we demoed on

00:44:14,770 --> 00:44:18,340
Monday the ability to use clang CG - to

00:44:16,720 --> 00:44:20,470
do this we did a Mandelbrot set thing

00:44:18,340 --> 00:44:25,000
with bunch of underscore complex in it

00:44:20,470 --> 00:44:27,190
yes C is coming we do a lot of work for

00:44:25,000 --> 00:44:29,230
graphics developers I'm gonna skip this

00:44:27,190 --> 00:44:31,830
for now I just want to make a couple of

00:44:29,230 --> 00:44:34,810
quick points about vectorization we have

00:44:31,830 --> 00:44:36,040
Jim covered this in his talk these are

00:44:34,810 --> 00:44:38,110
what we call our compiled and smile

00:44:36,040 --> 00:44:40,270
features we do a lot of work in the

00:44:38,110 --> 00:44:42,070
backend optimizations to make sure that

00:44:40,270 --> 00:44:44,080
all you have to do is recompile and get

00:44:42,070 --> 00:44:47,170
some benefits as you can see we've done

00:44:44,080 --> 00:44:48,760
some work on vectorization of loops to

00:44:47,170 --> 00:44:50,410
take into account control flow and still

00:44:48,760 --> 00:44:53,350
being able to vectorize in the presence

00:44:50,410 --> 00:44:55,240
of that that's better black Scholes 300%

00:44:53,350 --> 00:44:58,200
in our measurements so if you want to

00:44:55,240 --> 00:45:01,390
make money on Wall Street that's awesome

00:44:58,200 --> 00:45:02,980
the stall forward avoidance by doing a

00:45:01,390 --> 00:45:04,600
better job with standard complex floats

00:45:02,980 --> 00:45:07,780
and standard complex doubles is sped up

00:45:04,600 --> 00:45:09,880
eigen quaternion multiplication code and

00:45:07,780 --> 00:45:11,440
FFTs by a bunch again if these numerical

00:45:09,880 --> 00:45:15,160
methods matter to you by all means grab

00:45:11,440 --> 00:45:16,420
Visual Studio 2015 bit potestas I think

00:45:15,160 --> 00:45:19,420
this gets a laugh people like really

00:45:16,420 --> 00:45:22,240
seriously just that like but it actually

00:45:19,420 --> 00:45:24,700
this pops encode all the time and indeed

00:45:22,240 --> 00:45:26,740
I was happy to find after I did this

00:45:24,700 --> 00:45:27,940
this talk infront of my own team at one

00:45:26,740 --> 00:45:29,650
point one of the developers and the

00:45:27,940 --> 00:45:31,240
compiler team went and said yeah this

00:45:29,650 --> 00:45:33,490
actually fires all over the compiler

00:45:31,240 --> 00:45:36,460
front end as well so that was good you

00:45:33,490 --> 00:45:39,070
know what can you do for me right and

00:45:36,460 --> 00:45:41,050
loop a fun switching which is finding

00:45:39,070 --> 00:45:42,580
invariant conditions inside source code

00:45:41,050 --> 00:45:43,720
and then moving them outside

00:45:42,580 --> 00:45:47,430
again you'd say why would you write that

00:45:43,720 --> 00:45:49,780
code well in liners make that happen

00:45:47,430 --> 00:45:52,720
improved code genom standard min max

00:45:49,780 --> 00:45:55,270
lots of things particularly in STL

00:45:52,720 --> 00:45:58,300
constructs so go ahead and recompile and

00:45:55,270 --> 00:46:02,290
smile and at this point I'm gonna let

00:45:58,300 --> 00:46:04,590
this poor guy talk okay so Steve covered

00:46:02,290 --> 00:46:06,700
a little bit of what we have in 2015 I

00:46:04,590 --> 00:46:08,109
wanted to make sure we're very

00:46:06,700 --> 00:46:10,390
transparent with you where we're heading

00:46:08,109 --> 00:46:13,390
as well what's next

00:46:10,390 --> 00:46:16,030
whether it's 2017 16 or even the updates

00:46:13,390 --> 00:46:18,240
itself that we're gonna come and see the

00:46:16,030 --> 00:46:21,460
first one I wanted to cover is actually

00:46:18,240 --> 00:46:24,820
hearing me alright so the first one is

00:46:21,460 --> 00:46:26,109
we used to release what we call the CTP

00:46:24,820 --> 00:46:28,810
for some of the conformance features

00:46:26,109 --> 00:46:31,420
we're working at and we used to get it

00:46:28,810 --> 00:46:33,099
out there as a side by side the existing

00:46:31,420 --> 00:46:34,840
compiler and we only roll it into the

00:46:33,099 --> 00:46:37,480
main product in the next major version

00:46:34,840 --> 00:46:40,240
of vs that's changing we're actually

00:46:37,480 --> 00:46:42,220
going to roll it in the nvs 2015 so the

00:46:40,240 --> 00:46:44,109
updates itself will contain the newer

00:46:42,220 --> 00:46:45,520
features the compiler features

00:46:44,109 --> 00:46:47,710
specifically standard conformance ones

00:46:45,520 --> 00:46:50,140
which are fully supported in everything

00:46:47,710 --> 00:46:52,420
so you don't have to wait to the next

00:46:50,140 --> 00:46:54,760
major version of vs it's just similar of

00:46:52,420 --> 00:46:55,900
the updates part which includes some of

00:46:54,760 --> 00:46:58,150
the stuff we're working on right now

00:46:55,900 --> 00:46:59,740
like thanks c2 we're aiming to have that

00:46:58,150 --> 00:47:03,070
as one of the updates hopefully sometime

00:46:59,740 --> 00:47:04,839
this November modules and Gabi are

00:47:03,070 --> 00:47:06,160
speaking about it wait gore is here as

00:47:04,839 --> 00:47:08,470
well as part of the work that we're

00:47:06,160 --> 00:47:10,540
gonna more optimize the way the

00:47:08,470 --> 00:47:13,420
interesting part here we are obligated

00:47:10,540 --> 00:47:15,130
though still is if you install vs 2015

00:47:13,420 --> 00:47:16,570
and then installed one of the updates

00:47:15,130 --> 00:47:18,460
your existing code has to work as

00:47:16,570 --> 00:47:19,690
expected so there's not gonna be any

00:47:18,460 --> 00:47:22,810
breaking changes so some of the features

00:47:19,690 --> 00:47:26,080
will be an opt-in in most cases but it's

00:47:22,810 --> 00:47:28,420
still there fully supported one of the

00:47:26,080 --> 00:47:30,849
parts as well as a that's interesting is

00:47:28,420 --> 00:47:34,080
from build lab scenarios and others and

00:47:30,849 --> 00:47:37,390
I wanted mention this is the last one so

00:47:34,080 --> 00:47:39,880
we've heard lots of feedback about do I

00:47:37,390 --> 00:47:43,030
have to install vs to just use the

00:47:39,880 --> 00:47:45,070
compiler right and what we're doing

00:47:43,030 --> 00:47:46,660
right now we're thinking about and we

00:47:45,070 --> 00:47:47,740
actually almost close to releasing it

00:47:46,660 --> 00:47:49,750
and hopefully we have good news in

00:47:47,740 --> 00:47:52,540
sometime in November what we call the

00:47:49,750 --> 00:47:54,310
builds queue so basically you're gonna

00:47:52,540 --> 00:47:55,240
have you don't have to install vs you're

00:47:54,310 --> 00:47:56,080
gonna provide your wave just a

00:47:55,240 --> 00:47:57,610
standalone huge just

00:47:56,080 --> 00:47:59,080
stole their masai you got just the

00:47:57,610 --> 00:48:00,850
compiler and Emmas build you can just

00:47:59,080 --> 00:48:05,200
build from the command line you don't

00:48:00,850 --> 00:48:08,880
have to install the whole vs itself oh

00:48:05,200 --> 00:48:11,980
you'll miss the Installer when it's gone

00:48:08,880 --> 00:48:13,360
it's the same bit so that's been in the

00:48:11,980 --> 00:48:14,710
major one even updated as well than the

00:48:13,360 --> 00:48:16,330
quarter of the base is the same concept

00:48:14,710 --> 00:48:18,220
you just don't have to install it

00:48:16,330 --> 00:48:20,050
part of it is believe it or not we've

00:48:18,220 --> 00:48:21,730
heard from it I want from the Python

00:48:20,050 --> 00:48:23,650
guys I work from it from the build app

00:48:21,730 --> 00:48:26,740
scenario two runs in your build apps and

00:48:23,650 --> 00:48:28,360
as well some of developers itself we're

00:48:26,740 --> 00:48:30,760
gonna continue what Steve told spoke

00:48:28,360 --> 00:48:32,950
about and code refactoring whether

00:48:30,760 --> 00:48:34,810
that's actually in the vs gallery itself

00:48:32,950 --> 00:48:36,490
or it's actually built in the product as

00:48:34,810 --> 00:48:37,870
part of the updates as well so we can

00:48:36,490 --> 00:48:39,490
keep improving there

00:48:37,870 --> 00:48:42,160
the other part as well is build time

00:48:39,490 --> 00:48:44,430
improvements I think Steve's talked

00:48:42,160 --> 00:48:47,350
about the incremental build scenario

00:48:44,430 --> 00:48:49,120
that one with focus on 2015 will still

00:48:47,350 --> 00:48:51,100
gonna be updates there but we're gonna

00:48:49,120 --> 00:48:52,600
start focusing as well on the full build

00:48:51,100 --> 00:48:54,460
scenario as well how do we actually

00:48:52,600 --> 00:48:56,770
speed the full build and not just the

00:48:54,460 --> 00:48:58,000
incremental one that could be through us

00:48:56,770 --> 00:48:59,950
and through partnerships as well with

00:48:58,000 --> 00:49:01,810
other existing folks so we'll do that

00:48:59,950 --> 00:49:04,150
and as well as part of the November

00:49:01,810 --> 00:49:07,690
update so we're gonna have more details

00:49:04,150 --> 00:49:09,100
I think one of the key parts here is we

00:49:07,690 --> 00:49:09,790
will be more transparent about what

00:49:09,100 --> 00:49:11,170
we're doing

00:49:09,790 --> 00:49:13,270
we'll talk about it in public and

00:49:11,170 --> 00:49:16,540
everything the negative part of it in

00:49:13,270 --> 00:49:17,770
some cases will be to transparent that

00:49:16,540 --> 00:49:19,480
we might actually not hit the project

00:49:17,770 --> 00:49:21,250
isn't a time that we wanted to or we'll

00:49:19,480 --> 00:49:23,640
keep you updated as well of what's

00:49:21,250 --> 00:49:23,640
happening there

00:49:24,690 --> 00:49:29,080
yeah the other part as well is this is

00:49:27,670 --> 00:49:31,660
we have early thoughts here and we would

00:49:29,080 --> 00:49:33,520
love to talk to you about it as well we

00:49:31,660 --> 00:49:35,260
will continue right now we started

00:49:33,520 --> 00:49:38,140
investment into the cross-platform

00:49:35,260 --> 00:49:40,660
mobile which is Android iOS and Windows

00:49:38,140 --> 00:49:42,160
as well we are hitting as well the other

00:49:40,660 --> 00:49:43,480
platform is well not Windows and we're

00:49:42,160 --> 00:49:45,250
gonna start thinking about the IOT

00:49:43,480 --> 00:49:46,980
scenarios and Linux as well how to

00:49:45,250 --> 00:49:49,210
target those coming from Visual Studio

00:49:46,980 --> 00:49:50,350
we've heard the major pains for example

00:49:49,210 --> 00:49:52,620
from Linux developers and if you're

00:49:50,350 --> 00:49:56,650
really solve just raise your hand

00:49:52,620 --> 00:49:58,660
what example and one of the major pain

00:49:56,650 --> 00:50:00,850
points we've heard about is remote

00:49:58,660 --> 00:50:03,460
debugging can ID buggies in vs and debug

00:50:00,850 --> 00:50:05,200
on a linux and it's action error that

00:50:03,460 --> 00:50:06,070
we're actually investing in right now or

00:50:05,200 --> 00:50:07,060
investigating it

00:50:06,070 --> 00:50:09,190
we're actually building a prototype

00:50:07,060 --> 00:50:11,089
right now we don't hope to see to show

00:50:09,190 --> 00:50:13,609
you something very

00:50:11,089 --> 00:50:15,289
so and once we have it we will as well

00:50:13,609 --> 00:50:16,700
roll it as part of the vs updates you

00:50:15,289 --> 00:50:20,630
don't have to wait for major updates as

00:50:16,700 --> 00:50:25,880
well and for the other parts as well as

00:50:20,630 --> 00:50:29,559
you guys have heard the vs code okay we

00:50:25,880 --> 00:50:32,150
are thinking about that right now right

00:50:29,559 --> 00:50:33,859
now all the support that's in vs code is

00:50:32,150 --> 00:50:36,079
just for C++ is just basically sent

00:50:33,859 --> 00:50:37,400
expertise ation we are investigating

00:50:36,079 --> 00:50:40,489
right now what does it mean to support

00:50:37,400 --> 00:50:41,900
C++ development in vs code so we would

00:50:40,489 --> 00:50:43,819
love to hear your feedback about it

00:50:41,900 --> 00:50:47,089
right now because it's we're actively

00:50:43,819 --> 00:50:50,210
engaging right now in that area I guess

00:50:47,089 --> 00:50:52,269
I covered my stuff quickly so we'll

00:50:50,210 --> 00:51:00,680
probably open it for questions right now

00:50:52,269 --> 00:51:03,170
yeah it's 12 minutes so it's good Zac uh

00:51:00,680 --> 00:51:17,719
no as far as I know everything I showed

00:51:03,170 --> 00:51:19,910
is in community yes that gang's coming

00:51:17,719 --> 00:51:22,999
soon and that one's on our radar for

00:51:19,910 --> 00:51:27,140
sure yeah this one's definitely in one

00:51:22,999 --> 00:51:30,619
of the reports here okay so repeat the

00:51:27,140 --> 00:51:34,339
question Wow is there a way of updating

00:51:30,619 --> 00:51:35,989
the signature and it's not right now vs

00:51:34,339 --> 00:51:37,309
2015 but this actually one of the high

00:51:35,989 --> 00:51:38,869
parts which we were working on this

00:51:37,309 --> 00:51:40,519
being one of the updates and and the

00:51:38,869 --> 00:51:42,739
other question was are is everything I

00:51:40,519 --> 00:51:43,969
showed in only in some higher level ski

00:51:42,739 --> 00:51:53,539
you know it's it's all in the community

00:51:43,969 --> 00:51:55,150
yep restrictions on XP I'm looking at

00:51:53,539 --> 00:51:57,769
Stefan

00:51:55,150 --> 00:52:01,130
you heard Stefan you're physically

00:51:57,769 --> 00:52:03,349
harming Stefan but no as far as we know

00:52:01,130 --> 00:52:05,630
that it's no restrictions I mean it's

00:52:03,349 --> 00:52:10,450
not a design time platform it's a

00:52:05,630 --> 00:52:10,450
runtime target yeah visual studio next

00:52:15,420 --> 00:52:19,650
so there have many changes if there was

00:52:17,579 --> 00:52:24,210
a restriction in 2013 it rolled forward

00:52:19,650 --> 00:52:25,730
basically I I personally I would love to

00:52:24,210 --> 00:52:32,579
hear about whether what kind of

00:52:25,730 --> 00:52:34,289
restrictions were there I and that

00:52:32,579 --> 00:52:34,920
wouldn't surprise me if code analysis

00:52:34,289 --> 00:52:36,750
wasn't in there

00:52:34,920 --> 00:52:39,089
code analysis rules should mostly be the

00:52:36,750 --> 00:52:42,799
same one on the other one so flip it

00:52:39,089 --> 00:52:42,799
over and rebuild sorry about that though

00:52:48,200 --> 00:52:52,260
so yeah the question is what kind of

00:52:50,430 --> 00:52:54,990
improvements have been for testing tools

00:52:52,260 --> 00:52:57,990
for C++ I think there's been a major

00:52:54,990 --> 00:53:02,579
investment in that area not not that

00:52:57,990 --> 00:53:03,690
much major that's being honest but still

00:53:02,579 --> 00:53:04,769
we would love to hear about what the

00:53:03,690 --> 00:53:07,440
other tools you're using is well than

00:53:04,769 --> 00:53:09,539
that I was gonna say like who who you

00:53:07,440 --> 00:53:13,260
does anybody use the MS test stuff in

00:53:09,539 --> 00:53:15,089
the product yeah okay I actually

00:53:13,260 --> 00:53:16,950
sometimes I think we don't we we

00:53:15,089 --> 00:53:18,450
personally don't pay enough attention to

00:53:16,950 --> 00:53:25,200
that so that's really interesting thank

00:53:18,450 --> 00:53:26,759
you yeah yeah the the stuff that's so

00:53:25,200 --> 00:53:29,279
the question was is the old profiler

00:53:26,759 --> 00:53:31,619
still in the product yes it is

00:53:29,279 --> 00:53:33,029
and you get to it the same way and

00:53:31,619 --> 00:53:34,859
there's even I think a lot of

00:53:33,029 --> 00:53:37,650
improvements inside the individual tools

00:53:34,859 --> 00:53:38,970
of it I just didn't show them today we

00:53:37,650 --> 00:53:47,000
didn't take anything away we just sort

00:53:38,970 --> 00:53:47,000
of revamped the the UI yep yeah

00:53:49,319 --> 00:53:59,450
the refactorings do profiling is

00:53:52,170 --> 00:54:02,299
windows-only right now for for the

00:53:59,450 --> 00:54:04,190
see to toolchain say to me yes cause the

00:54:02,299 --> 00:54:05,809
idea is that's one of the reasons we

00:54:04,190 --> 00:54:07,369
actually hooked it to a blank c2 cause

00:54:05,809 --> 00:54:09,680
our back-end responsible for us format

00:54:07,369 --> 00:54:11,599
that are recognized by L profiler

00:54:09,680 --> 00:54:13,040
I won't we still have some testing work

00:54:11,599 --> 00:54:15,069
to do in that space but we don't see it

00:54:13,040 --> 00:54:23,329
that is the goal though yeah

00:54:15,069 --> 00:54:25,220
Kostya so the question is is the heap

00:54:23,329 --> 00:54:29,450
profiler accessible from the command

00:54:25,220 --> 00:54:31,099
line is Aiyappa here no I don't think so

00:54:29,450 --> 00:54:34,069
but that I'm guessing the next question

00:54:31,099 --> 00:54:35,030
would be well could it be right yeah one

00:54:34,069 --> 00:54:36,470
of the things that's nice about it

00:54:35,030 --> 00:54:38,210
though just one of the reasons why we

00:54:36,470 --> 00:54:39,440
it's designed the way it is is two is

00:54:38,210 --> 00:54:40,670
because of the fact that you can use the

00:54:39,440 --> 00:54:41,299
debugger to have that fine-grained level

00:54:40,670 --> 00:54:43,010
of control

00:54:41,299 --> 00:54:44,119
it's integrated into the debugger and so

00:54:43,010 --> 00:54:57,740
we're not really a command line debugger

00:54:44,119 --> 00:54:58,940
either so yes question the back ok so

00:54:57,740 --> 00:55:01,430
the question was have there been any

00:54:58,940 --> 00:55:05,420
improvements to intellisense the answer

00:55:01,430 --> 00:55:07,430
is yes and indeed one of the slides that

00:55:05,420 --> 00:55:09,140
I'm in said is that we've got what we

00:55:07,430 --> 00:55:10,730
think is a pretty big one coming an

00:55:09,140 --> 00:55:12,650
update but there were a bunch of things

00:55:10,730 --> 00:55:15,710
that we did what we did is we use the

00:55:12,650 --> 00:55:19,099
Unreal 4 engine code base in order to

00:55:15,710 --> 00:55:20,690
tune intellisense for scale and we got

00:55:19,099 --> 00:55:22,549
some pretty big wins there so I would

00:55:20,690 --> 00:55:25,640
ask that you try it out this is another

00:55:22,549 --> 00:55:27,500
one of those examples where we really

00:55:25,640 --> 00:55:29,540
really want to focus on making that

00:55:27,500 --> 00:55:31,490
better we know that sometimes we run

00:55:29,540 --> 00:55:32,930
into things at scale but to be honest we

00:55:31,490 --> 00:55:35,480
don't always run into things at scale

00:55:32,930 --> 00:55:36,380
it's very code based dependent so please

00:55:35,480 --> 00:55:38,299
by all means

00:55:36,380 --> 00:55:40,819
you know I'm s Carroll at Microsoft two

00:55:38,299 --> 00:55:45,109
hours two L's you can't see that two r's

00:55:40,819 --> 00:55:47,240
2 l's a see I don't know and-and-and-and

00:55:45,109 --> 00:55:48,530
let us know we'll grab profiles we've

00:55:47,240 --> 00:55:59,089
been working on that hard lately

00:55:48,530 --> 00:56:01,250
question here I don't think we have any

00:55:59,089 --> 00:56:03,500
extensibility at that point we track a

00:56:01,250 --> 00:56:05,119
number about oh oh right yeah always the

00:56:03,500 --> 00:56:07,190
question question was we're it's clear

00:56:05,119 --> 00:56:10,339
we're doing free and and and elite level

00:56:07,190 --> 00:56:12,579
and malloc stuff yeah stepping is not an

00:56:10,339 --> 00:56:12,579
answer

00:56:15,470 --> 00:56:19,410
this sounds like a good topic for a blog

00:56:17,849 --> 00:56:23,010
post I guess is gonna be my answer to

00:56:19,410 --> 00:56:24,329
that which is uh yeah by all means try

00:56:23,010 --> 00:56:26,220
it out give us feedback it's it's

00:56:24,329 --> 00:56:29,910
completely new they're updates to it

00:56:26,220 --> 00:56:31,530
coming in the in the update but yeah I'm

00:56:29,910 --> 00:56:33,329
not a hundred percent aware of that we

00:56:31,530 --> 00:56:34,680
we are definitely doing all sorts of

00:56:33,329 --> 00:56:36,809
work across the chain to do that there's

00:56:34,680 --> 00:56:38,040
information spit into the PDB about

00:56:36,809 --> 00:56:40,140
where the allocations are in their types

00:56:38,040 --> 00:56:46,020
in order to make it better so yeah by

00:56:40,140 --> 00:56:49,079
all means shoot me a mail question does

00:56:46,020 --> 00:56:50,940
the head does that I I don't want to say

00:56:49,079 --> 00:56:52,349
we've hit every possible user scenario

00:56:50,940 --> 00:56:53,970
that you can do with G flags question is

00:56:52,349 --> 00:56:57,839
that if I freed him from the tyranny of

00:56:53,970 --> 00:56:59,160
G flags and I but it I think it should

00:56:57,839 --> 00:57:04,280
reduce it it should definitely reduce

00:56:59,160 --> 00:57:04,280
your need to use it so so you know yes

00:57:05,599 --> 00:57:15,329
timeline for a big one yet okay I'm

00:57:11,339 --> 00:57:16,349
gonna say in our yes it usually it's

00:57:15,329 --> 00:57:18,180
every three month that's what we're

00:57:16,349 --> 00:57:20,339
targeting as updates so it's the range

00:57:18,180 --> 00:57:22,829
off around the November timeframe so

00:57:20,339 --> 00:57:25,950
that's the goal at least right now we

00:57:22,829 --> 00:57:29,660
want to have a happy Christmas we're

00:57:25,950 --> 00:57:29,660
working hard to make happen in November

00:57:31,640 --> 00:57:44,630
huh that's a good question I'm I I so

00:57:42,869 --> 00:57:46,650
the question was if we override the

00:57:44,630 --> 00:57:48,780
Natalie's file by sticking it in the

00:57:46,650 --> 00:57:51,000
project is it possible for somebody else

00:57:48,780 --> 00:57:52,980
to fight them I I don't know who would

00:57:51,000 --> 00:57:55,619
win in a battle between the NAT visit

00:57:52,980 --> 00:57:57,329
alder and the PDB I would imagine the

00:57:55,619 --> 00:57:59,940
PDB wins and so if you want that

00:57:57,329 --> 00:58:01,920
scenario you know stick with the ask

00:57:59,940 --> 00:58:03,630
people to copy it into the file or maybe

00:58:01,920 --> 00:58:04,650
like a post build stuff that copies it

00:58:03,630 --> 00:58:07,799
there I don't I'm just thinking out of

00:58:04,650 --> 00:58:13,369
the top of my head I don't know offhand

00:58:07,799 --> 00:58:13,369
though yep well here's the question

00:58:23,000 --> 00:58:26,970
you know that stuff is um is windows oh

00:58:25,770 --> 00:58:29,220
so the question was if I'm doing

00:58:26,970 --> 00:58:31,799
cross-platform development can I use the

00:58:29,220 --> 00:58:33,809
heap tool the answer is the heap tool is

00:58:31,799 --> 00:58:36,059
Windows only right now don't get me

00:58:33,809 --> 00:58:37,740
wrong you know we've been working on the

00:58:36,059 --> 00:58:38,880
cross plat stuff not actually that much

00:58:37,740 --> 00:58:41,490
amount of time I think realistically

00:58:38,880 --> 00:58:42,750
we've been working on it about a year we

00:58:41,490 --> 00:58:45,839
want to get to a place where

00:58:42,750 --> 00:58:47,250
everything's a plus right and so those

00:58:45,839 --> 00:58:50,369
things are on our map but they that

00:58:47,250 --> 00:58:54,119
today the really advanced debugging and

00:58:50,369 --> 00:58:55,260
diagnostics no sports yeah yeah if

00:58:54,119 --> 00:58:56,549
you're doing the crud you can you can

00:58:55,260 --> 00:58:58,319
profile the Windows part of the cross

00:58:56,549 --> 00:59:02,400
platted that will work but you can't

00:58:58,319 --> 00:59:03,809
profile on us I'm not saying you can't

00:59:02,400 --> 00:59:07,069
do that you just have to use the Android

00:59:03,809 --> 00:59:16,829
specific tools for doing it right yeah

00:59:07,069 --> 00:59:18,660
it's question in the back I think Eric

00:59:16,829 --> 00:59:20,490
did some work with the windbg guys to

00:59:18,660 --> 00:59:24,990
make it support that as I thank you I I

00:59:20,490 --> 00:59:27,359
I'm gonna go with 70% sure yes so try

00:59:24,990 --> 00:59:28,500
that out and it and we have a good

00:59:27,359 --> 00:59:31,380
relationship with the windows debugger

00:59:28,500 --> 00:59:36,619
team and so if it doesn't it may be a

00:59:31,380 --> 00:59:36,619
bug or we can try to convince them yes

00:59:41,089 --> 00:59:47,089
okay so so they do have some level of

00:59:44,609 --> 00:59:52,559
Napa's support andrew is saying for sure

00:59:47,089 --> 01:00:03,920
it's just not a hundred percent yep at

00:59:52,559 --> 01:00:07,440
this okay so this is so nat vis is a

01:00:03,920 --> 01:00:09,500
sort of revamp of the old Auto Expo at

01:00:07,440 --> 01:00:14,579
file he's asking about a particular

01:00:09,500 --> 01:00:17,039
formatting thing in that I will send me

01:00:14,579 --> 01:00:20,690
an email and I will put Eric in contact

01:00:17,039 --> 01:00:20,690
with youth our novice guy Zach

01:00:27,599 --> 01:00:41,319
okay okay so the feature request is make

01:00:38,079 --> 01:00:44,470
NAT vis powerful enough that you could

01:00:41,319 --> 01:00:54,309
write a date/time visualizer for it okay

01:00:44,470 --> 01:00:55,630
check so I would yeah okay so the

01:00:54,309 --> 01:00:58,599
question is is there any thought put

01:00:55,630 --> 01:01:00,460
into NAT step filters and handling them

01:00:58,599 --> 01:01:00,819
the same way we handle than at Miss

01:01:00,460 --> 01:01:02,230
files

01:01:00,819 --> 01:01:03,369
yeah we've certainly thought about it

01:01:02,230 --> 01:01:06,160
that's awesome I didn't know people

01:01:03,369 --> 01:01:08,170
actually knew about NAT step filters so

01:01:06,160 --> 01:01:12,869
we can definitely look at that going

01:01:08,170 --> 01:01:12,869
forwards great feedback any none that

01:01:14,940 --> 01:01:19,450
you do these big efforts you know all

01:01:17,440 --> 01:01:20,789
these developers is the thing off on the

01:01:19,450 --> 01:01:23,079
side that everybody gets excited about

01:01:20,789 --> 01:01:24,220
doesn't build tools one developer

01:01:23,079 --> 01:01:29,380
working for a few weeks

01:01:24,220 --> 01:01:36,339
NAT biz one developer yeah okay yes it's

01:01:29,380 --> 01:01:40,779
Kosta yeah we support and I think an

01:01:36,339 --> 01:01:42,250
update its armor the next 36 and the

01:01:40,779 --> 01:01:45,220
plan is for update one that's we

01:01:42,250 --> 01:01:48,339
actually add arm 64 what and the the

01:01:45,220 --> 01:01:50,829
emulator is x86 but if you plug in you

01:01:48,339 --> 01:01:52,420
know like like I have an Android phone

01:01:50,829 --> 01:01:55,059
in this pocket and a windows phone in

01:01:52,420 --> 01:01:59,140
this pocket if you put the Android phone

01:01:55,059 --> 01:02:02,579
in in there it'll work for arm or if you

01:01:59,140 --> 01:02:02,579
happen to have an x86 one that one yeah

01:02:06,750 --> 01:02:09,750
question

01:02:16,480 --> 01:02:20,440
yeah do you want to do that is another

01:02:19,000 --> 01:02:36,970
topic so the question was to make

01:02:20,440 --> 01:02:40,210
support right yeah okay awesome

01:02:36,970 --> 01:02:41,550
yeah so we love seeming to make a

01:02:40,210 --> 01:02:44,890
scenario that we were investigating

01:02:41,550 --> 01:02:46,600
getting better at for sure that is on

01:02:44,890 --> 01:02:47,920
the list of and because we're running

01:02:46,600 --> 01:02:50,290
out of time I just want to stress one

01:02:47,920 --> 01:02:53,140
thing again and so if you are interested

01:02:50,290 --> 01:02:56,470
in see make we want your email address

01:02:53,140 --> 01:02:59,080
if you are interested in visual I mean

01:02:56,470 --> 01:03:01,150
the the shorter short answer is yes we

01:02:59,080 --> 01:03:02,500
will do investments here yeah we have

01:03:01,150 --> 01:03:03,670
some actual prototypes building and we

01:03:02,500 --> 01:03:05,500
actually have some tools that I should

01:03:03,670 --> 01:03:06,790
do that seeming support we would love to

01:03:05,500 --> 01:03:08,080
get you address and we'll send it to you

01:03:06,790 --> 01:03:09,940
to try it out to give us feedback before

01:03:08,080 --> 01:03:10,990
we make it product wise for instance one

01:03:09,940 --> 01:03:12,700
thing that we're actually working on

01:03:10,990 --> 01:03:14,260
right now is the ability to make sure

01:03:12,700 --> 01:03:16,390
that when sea makes spits out a visual

01:03:14,260 --> 01:03:17,890
studio project for cross plot that it

01:03:16,390 --> 01:03:19,180
does it in the shared project form that

01:03:17,890 --> 01:03:21,100
I demonstrated instead of something

01:03:19,180 --> 01:03:22,330
flatter like it does today so that's

01:03:21,100 --> 01:03:25,330
something that will be will be trying to

01:03:22,330 --> 01:03:26,470
give back yeah but we want to do way

01:03:25,330 --> 01:03:28,600
more than that so if you're interested

01:03:26,470 --> 01:03:30,130
in that come grab us we seriously want

01:03:28,600 --> 01:03:35,140
to build up customer councils for these

01:03:30,130 --> 01:03:37,859
things and Linux IOT core sessions over

01:03:35,140 --> 01:03:37,859

YouTube URL: https://www.youtube.com/watch?v=UuwBG9f4ZiQ


