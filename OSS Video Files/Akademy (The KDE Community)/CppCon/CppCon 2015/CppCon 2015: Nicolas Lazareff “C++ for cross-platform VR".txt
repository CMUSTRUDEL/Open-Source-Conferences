Title: CppCon 2015: Nicolas Lazareff “C++ for cross-platform VR"
Publication date: 2015-10-10
Playlist: CppCon 2015
Description: 
	http://www.Cppcon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015
—
This talk is an overview of how C++ can be used to quickly create cross-platform virtual reality experiences while sharing one codebase. 

To support all major vendors, a VR experience has to span not only across operating systems, but also device types, hardware specs, manufacturers, and SDKs -- and so pitfalls and learnings from shipping on Oculus mobile and desktop, Google Cardboard, and soon Sony's Morpheus will be discussed.

We'll cover networking, graphics, SDK wrappers, and even abstracting language oddities (Android's Java layer for Oculus mobile).
— 
Nick is a VR/AR engineer who is passionate about bridging the interface between computers and humans. Currently he's VP of Software Development at OTOY focusing on VR and AR ("mixed/digital reality"). He was a cofounder of everyAir, a pioneering P2P game streaming application which was later acquired. Before that he worked at Microsoft on Office 2010 and 2013.

Feel free to talk to me about any rendering, real-time graphics, computer vision, and of course C++!
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,060 --> 00:00:05,279
so thanks everyone for coming as the

00:00:02,550 --> 00:00:09,599
slide says this is a C++ for

00:00:05,279 --> 00:00:10,860
cross-platform VR and I'm Nick it's

00:00:09,599 --> 00:00:12,630
great to be back here in the east side

00:00:10,860 --> 00:00:14,690
of Seattle they're being gone for a

00:00:12,630 --> 00:00:16,740
couple years I used to work at Microsoft

00:00:14,690 --> 00:00:18,449
and like we're just chatting a second

00:00:16,740 --> 00:00:22,289
ago so to get of idea how many of you

00:00:18,449 --> 00:00:24,990
guys have made VR apps or games all

00:00:22,289 --> 00:00:27,570
right so just the one loan guy in the

00:00:24,990 --> 00:00:29,400
back all right so I mean hopefully this

00:00:27,570 --> 00:00:31,890
is informative then I think it's

00:00:29,400 --> 00:00:33,210
relatively high level so everyone I'll

00:00:31,890 --> 00:00:35,730
be able to learn at least a little bit

00:00:33,210 --> 00:00:39,300
of something I know this is the last

00:00:35,730 --> 00:00:40,950
talk before the you know the dinner

00:00:39,300 --> 00:00:42,390
break and everyone wants probably to

00:00:40,950 --> 00:00:44,280
come back for the 8:30 grill the

00:00:42,390 --> 00:00:47,250
committee so I'll try to get through

00:00:44,280 --> 00:00:49,980
this quickly and also I'll pepper this

00:00:47,250 --> 00:00:53,430
with some food recommendations from my

00:00:49,980 --> 00:00:55,289
time here in the east side also as a

00:00:53,430 --> 00:00:57,539
bonus and I was just doing a second ago

00:00:55,289 --> 00:01:00,320
you can check out some demos in the qvr

00:00:57,539 --> 00:01:03,059
I brought it here this is a contest that

00:01:00,320 --> 00:01:04,979
oculus and Oh toy where I work ran

00:01:03,059 --> 00:01:06,330
called render the Metaverse there's some

00:01:04,979 --> 00:01:10,170
pretty cool scenes that give you a sense

00:01:06,330 --> 00:01:12,740
of what's capable on today's HM bees and

00:01:10,170 --> 00:01:15,330
feel free to check it out after the talk

00:01:12,740 --> 00:01:19,189
so we're all here to well I guess to

00:01:15,330 --> 00:01:22,619
learn but VR development isn't easy and

00:01:19,189 --> 00:01:24,740
the stakes are actually quite high and

00:01:22,619 --> 00:01:26,820
the reason the stakes are high is

00:01:24,740 --> 00:01:29,040
because getting it wrong causes nausea

00:01:26,820 --> 00:01:30,479
and it's not just a little bit of

00:01:29,040 --> 00:01:32,939
sickness you can actually leave someone

00:01:30,479 --> 00:01:34,860
six the whole day so with a normal

00:01:32,939 --> 00:01:38,009
application or with normal software if

00:01:34,860 --> 00:01:41,250
you have some performance issues the

00:01:38,009 --> 00:01:42,990
most you'll get is an annoyed person but

00:01:41,250 --> 00:01:46,530
in this case you can actually cause

00:01:42,990 --> 00:01:48,360
someone to throw up in addition there's

00:01:46,530 --> 00:01:51,420
actually kind of non-trivial technical

00:01:48,360 --> 00:01:54,740
challenges that support a variety of

00:01:51,420 --> 00:01:58,020
operating systems Windows Linux Android

00:01:54,740 --> 00:02:00,600
ps4 in addition there's a ton of devices

00:01:58,020 --> 00:02:03,530
they all have different capabilities CPU

00:02:00,600 --> 00:02:05,820
capabilities graphics and every SDK is

00:02:03,530 --> 00:02:08,610
different sometimes actually in

00:02:05,820 --> 00:02:11,700
different languages also and then

00:02:08,610 --> 00:02:14,010
finally really great VR experiences rely

00:02:11,700 --> 00:02:16,500
on some form of

00:02:14,010 --> 00:02:18,030
and the problem is all the vendors are

00:02:16,500 --> 00:02:20,550
kind of competing over what the

00:02:18,030 --> 00:02:23,070
controller of the future will be and to

00:02:20,550 --> 00:02:25,470
support all these input devices is quite

00:02:23,070 --> 00:02:27,330
a challenge and then finally and

00:02:25,470 --> 00:02:29,700
probably the most annoying thing of VR

00:02:27,330 --> 00:02:31,890
dev at the moment is these are just

00:02:29,700 --> 00:02:34,190
alpha and beta SDKs there's still tons

00:02:31,890 --> 00:02:36,600
and tons of bugs it crashes all the time

00:02:34,190 --> 00:02:42,090
so it's not exactly the smoothest

00:02:36,600 --> 00:02:44,610
development experience so poor latency

00:02:42,090 --> 00:02:46,320
leads to poor VR experiences

00:02:44,610 --> 00:02:49,110
it's a driver like I was saying of

00:02:46,320 --> 00:02:51,270
simulator sickness which is when someone

00:02:49,110 --> 00:02:55,320
experiences VR and they end up getting

00:02:51,270 --> 00:02:58,320
sick and the latency requirements for VR

00:02:55,320 --> 00:03:00,480
are quite high most games are ok with 30

00:02:58,320 --> 00:03:03,480
frames a second and some it may be go as

00:03:00,480 --> 00:03:06,060
high as 60 but certainly 30 is not good

00:03:03,480 --> 00:03:08,010
enough for VR and 60 starts to be just

00:03:06,060 --> 00:03:10,530
the borderline acceptable we want

00:03:08,010 --> 00:03:15,330
significantly higher frame rates than in

00:03:10,530 --> 00:03:18,270
30 or 60 in addition today's devices are

00:03:15,330 --> 00:03:20,160
also quite high resolution so the GPUs

00:03:18,270 --> 00:03:22,740
and the software has to push quite a lot

00:03:20,160 --> 00:03:25,350
of pixels games and apps today don't

00:03:22,740 --> 00:03:29,960
have to deal with these types of

00:03:25,350 --> 00:03:32,700
resolutions and VR apps and games do and

00:03:29,960 --> 00:03:34,740
actually to make things worse all the

00:03:32,700 --> 00:03:37,920
manufacturers are competing along

00:03:34,740 --> 00:03:40,230
resolution and frame rate axes so today

00:03:37,920 --> 00:03:42,540
basically everyone is around 1k for AI

00:03:40,230 --> 00:03:46,650
and around 75 Hertz some have more some

00:03:42,540 --> 00:03:50,310
have less but the ideal future and this

00:03:46,650 --> 00:03:52,380
is also courtesy of Michael Abrash is 16

00:03:50,310 --> 00:03:54,870
K 4 I at a thousand Hertz now

00:03:52,380 --> 00:04:00,390
these displays won't be around while

00:03:54,870 --> 00:04:01,860
we're alive but this you know endless

00:04:00,390 --> 00:04:03,930
march towards higher and higher

00:04:01,860 --> 00:04:05,630
resolutions and faster and faster frame

00:04:03,930 --> 00:04:08,760
rates will continue for quite some time

00:04:05,630 --> 00:04:13,080
it turns out that the bar for recreating

00:04:08,760 --> 00:04:16,620
reality is it's really high so all these

00:04:13,080 --> 00:04:20,100
things make c++ kind of a well-suited

00:04:16,620 --> 00:04:21,720
language for the job c plus one of its

00:04:20,100 --> 00:04:23,640
strengths and certainly one of the

00:04:21,720 --> 00:04:26,460
reasons is having its second Renaissance

00:04:23,640 --> 00:04:27,240
now is that it's cross-platform gives

00:04:26,460 --> 00:04:29,610
you really tight

00:04:27,240 --> 00:04:31,289
performance it's suitable as a library

00:04:29,610 --> 00:04:33,449
and then finally it has good interfaces

00:04:31,289 --> 00:04:37,289
to other languages which is important if

00:04:33,449 --> 00:04:39,539
you know you want to rapidly prototype

00:04:37,289 --> 00:04:43,169
or you want interface with designers and

00:04:39,539 --> 00:04:46,380
artists as a bonus almost all the SDKs

00:04:43,169 --> 00:04:48,660
are primarily C++ so this is probably a

00:04:46,380 --> 00:04:50,340
good sign that most of the kind of big

00:04:48,660 --> 00:04:52,050
minds in the in the industry are

00:04:50,340 --> 00:04:55,620
thinking C++ is the right language for

00:04:52,050 --> 00:04:56,970
the tool so like I was mentioning we'll

00:04:55,620 --> 00:05:00,090
take a quick breather here this is food

00:04:56,970 --> 00:05:02,220
tip number one so as many of farms right

00:05:00,090 --> 00:05:05,580
down the street they make really good

00:05:02,220 --> 00:05:08,330
apple juice it's worth checking out I

00:05:05,580 --> 00:05:14,280
can't recommend it enough

00:05:08,330 --> 00:05:15,570
yeah it's a it's worth it so like I've

00:05:14,280 --> 00:05:19,409
been saying the art velman is quite

00:05:15,570 --> 00:05:21,720
difficult so are there any solutions I

00:05:19,409 --> 00:05:23,240
don't really have any but instead what

00:05:21,720 --> 00:05:25,289
this talk is going to cover is

00:05:23,240 --> 00:05:27,060
approaches that I've tried over the last

00:05:25,289 --> 00:05:30,750
couple years on a variety of platforms

00:05:27,060 --> 00:05:31,830
and SDKs and you know some of the

00:05:30,750 --> 00:05:34,949
results have been good and some of the

00:05:31,830 --> 00:05:37,830
results not so good so how's this

00:05:34,949 --> 00:05:39,840
talking to progress I'll start with

00:05:37,830 --> 00:05:42,930
discussing the separate code based

00:05:39,840 --> 00:05:46,710
approach this will cover oculus mobile

00:05:42,930 --> 00:05:49,110
and cardboard then I'll discuss how to

00:05:46,710 --> 00:05:51,060
turn these two separate code bases in

00:05:49,110 --> 00:05:54,509
two separate languages into one shared

00:05:51,060 --> 00:05:58,289
code base that's entirely C++ and in the

00:05:54,509 --> 00:06:01,530
process cover oculus desktop open VR and

00:05:58,289 --> 00:06:04,699
PlayStation VR and then finally as a

00:06:01,530 --> 00:06:06,840
final note we'll discuss how to add

00:06:04,699 --> 00:06:09,750
quick little scripting layer on top of

00:06:06,840 --> 00:06:11,479
the C++ library will build up to see how

00:06:09,750 --> 00:06:18,270
to kind of rapidly prototype

00:06:11,479 --> 00:06:20,490
particularly UI experiments in VR so all

00:06:18,270 --> 00:06:22,409
the our apps effectively look the same

00:06:20,490 --> 00:06:26,550
and this actually looks similar to a

00:06:22,409 --> 00:06:28,949
game also the skeleton is you initialize

00:06:26,550 --> 00:06:31,530
some stuff and then you have some kind

00:06:28,949 --> 00:06:33,270
of run loop and you get frame callbacks

00:06:31,530 --> 00:06:35,400
or you write your own frame callbacks

00:06:33,270 --> 00:06:38,610
and then when you're done obviously

00:06:35,400 --> 00:06:44,189
you shut down and clean things up

00:06:38,610 --> 00:06:47,370
so on oculus mobile it's C++ cardboard

00:06:44,189 --> 00:06:49,620
is Java and when it comes to

00:06:47,370 --> 00:06:51,330
initialization since they're both on

00:06:49,620 --> 00:06:54,210
Android we have to do some Android

00:06:51,330 --> 00:06:55,710
lifecycle management we have to do

00:06:54,210 --> 00:06:58,169
obviously some of our own C

00:06:55,710 --> 00:07:01,139
initialization will leave the opengl

00:06:58,169 --> 00:07:04,590
stuff the details of it to the SDKs and

00:07:01,139 --> 00:07:06,210
then finally if our app needs it we'll

00:07:04,590 --> 00:07:12,000
have our own loaders resource managers

00:07:06,210 --> 00:07:15,780
etc inside of the run loop which for

00:07:12,000 --> 00:07:18,300
both oculus mobile and cardboard will

00:07:15,780 --> 00:07:21,240
let the sdk handle for us

00:07:18,300 --> 00:07:23,819
we'll handle input update our scenes as

00:07:21,240 --> 00:07:26,400
necessary based on user input or based

00:07:23,819 --> 00:07:29,879
on what the user is looking at and then

00:07:26,400 --> 00:07:31,590
finally we'll draw once for I and then

00:07:29,879 --> 00:07:35,219
unsurprisingly when the app is finished

00:07:31,590 --> 00:07:39,509
we have to tear it down and return to

00:07:35,219 --> 00:07:45,289
the US without any crashes so what does

00:07:39,509 --> 00:07:48,750
this look like for a oculus mobile app

00:07:45,289 --> 00:07:51,479
we subclass in this case from VR app

00:07:48,750 --> 00:07:56,180
interface and following the skeleton

00:07:51,479 --> 00:07:59,849
from before we have some initialization

00:07:56,180 --> 00:08:01,879
we have some drawing we get a frame

00:07:59,849 --> 00:08:06,629
callback and after the frame callback

00:08:01,879 --> 00:08:09,960
draw I view is called twice and then

00:08:06,629 --> 00:08:12,900
finally when it's time to shut down we

00:08:09,960 --> 00:08:14,789
shut down and of note here

00:08:12,900 --> 00:08:17,190
oculus also supports what are called

00:08:14,789 --> 00:08:19,740
hybrid apps which means apps that work

00:08:17,190 --> 00:08:23,729
in the AR mode which is when the phone

00:08:19,740 --> 00:08:26,190
is plugged into the hmd and also apps

00:08:23,729 --> 00:08:29,129
that work when the phone isn't plugged

00:08:26,190 --> 00:08:33,539
into the hmd so a library browser for

00:08:29,129 --> 00:08:34,979
example is an example of that so how

00:08:33,539 --> 00:08:36,479
does this look for or how does this look

00:08:34,979 --> 00:08:38,310
like with a cardboard app it looks

00:08:36,479 --> 00:08:42,300
basically the same this time obviously

00:08:38,310 --> 00:08:44,250
we're in Java we in it so one common

00:08:42,300 --> 00:08:47,699
theme with all the initialization we get

00:08:44,250 --> 00:08:49,590
some configuration parameters once again

00:08:47,699 --> 00:08:53,100
we have a frame callback and then

00:08:49,590 --> 00:08:54,660
- I callbacks and then when things are

00:08:53,100 --> 00:08:56,190
shut down we have to go and clean up so

00:08:54,660 --> 00:09:00,440
the app doesn't crash and returned

00:08:56,190 --> 00:09:00,440
successfully to the Android homescreen

00:09:00,800 --> 00:09:06,570
so what does this look like in practice

00:09:04,100 --> 00:09:09,810
one of the main things that all the SDKs

00:09:06,570 --> 00:09:12,390
provide is what's called tracking and

00:09:09,810 --> 00:09:15,120
that's the position of the head in space

00:09:12,390 --> 00:09:16,380
as long and along with the orientation

00:09:15,120 --> 00:09:19,620
of the head so it's what you're looking

00:09:16,380 --> 00:09:22,170
at and where your head is so in this

00:09:19,620 --> 00:09:27,870
case we're seeing what the oculus struck

00:09:22,170 --> 00:09:31,560
looks like this quaternion stores the

00:09:27,870 --> 00:09:34,710
orientation and this effect three stores

00:09:31,560 --> 00:09:37,800
the position and actually of note here

00:09:34,710 --> 00:09:39,720
when it comes to the mobile SDKs no

00:09:37,800 --> 00:09:42,090
mobile sdk at the moment provides the

00:09:39,720 --> 00:09:45,330
position of the head in space this is

00:09:42,090 --> 00:09:50,940
still a large open problem that no one

00:09:45,330 --> 00:09:52,890
has yet been able to to figure out so

00:09:50,940 --> 00:09:58,050
this is a kind of more in detail how are

00:09:52,890 --> 00:10:01,650
we going to use these frame callbacks to

00:09:58,050 --> 00:10:03,800
actually do some drawing so one of the

00:10:01,650 --> 00:10:08,310
key functions you have to implement in a

00:10:03,800 --> 00:10:10,410
oculus mobile app is this frame it hands

00:10:08,310 --> 00:10:14,640
you the VR frame and inside a VR frame

00:10:10,410 --> 00:10:17,460
we have the head pose so since frame is

00:10:14,640 --> 00:10:19,460
called unsurprisingly once per frame we

00:10:17,460 --> 00:10:21,690
might want to update our scene update UI

00:10:19,460 --> 00:10:24,150
but most importantly we want to store

00:10:21,690 --> 00:10:28,800
off what comes inside of the frame which

00:10:24,150 --> 00:10:31,860
is the orientation of the head and then

00:10:28,800 --> 00:10:34,080
after frame Drive you unsurprisingly it

00:10:31,860 --> 00:10:38,310
gets called twice also with some

00:10:34,080 --> 00:10:40,260
parameters and inside of draw I view is

00:10:38,310 --> 00:10:45,180
where we find the usual kind of OpenGL

00:10:40,260 --> 00:10:47,940
commands with the pose that we saved off

00:10:45,180 --> 00:10:50,400
a second ago we can calculate Model View

00:10:47,940 --> 00:10:52,920
and Model View projection matrices and

00:10:50,400 --> 00:10:55,760
then obviously do our drawing of our

00:10:52,920 --> 00:10:58,440
scene for eye

00:10:55,760 --> 00:11:00,630
another quick breather here I know I'm

00:10:58,440 --> 00:11:02,370
trying to go through this quickly here

00:11:00,630 --> 00:11:05,700
so that you guys have a chance to eat

00:11:02,370 --> 00:11:07,110
right down the street is a facing east

00:11:05,700 --> 00:11:09,529
this is walking distance both these

00:11:07,110 --> 00:11:11,940
restaurants are it's really good and

00:11:09,529 --> 00:11:14,610
Mediterranean kitchen also right down

00:11:11,940 --> 00:11:16,140
the street also really good I can't

00:11:14,610 --> 00:11:20,820
can't recommend either of these high

00:11:16,140 --> 00:11:24,060
enough it's better than McDonald's all

00:11:20,820 --> 00:11:25,320
right so back to back to our story here

00:11:24,060 --> 00:11:29,190
so the state of the world at the moment

00:11:25,320 --> 00:11:31,410
is we have two separate code bases we

00:11:29,190 --> 00:11:34,140
have oculus mobile and C++ and then we

00:11:31,410 --> 00:11:38,279
have cardboard and Java and it'd be nice

00:11:34,140 --> 00:11:42,750
to have one combined codebase and in

00:11:38,279 --> 00:11:43,709
addition the more code bases we have the

00:11:42,750 --> 00:11:45,779
more problems we're going to get into

00:11:43,709 --> 00:11:47,550
the more platforms you want to support

00:11:45,779 --> 00:11:50,940
if we have one code base for each

00:11:47,550 --> 00:11:53,250
platform things quickly can get out of

00:11:50,940 --> 00:11:55,890
control and like discussed a little

00:11:53,250 --> 00:12:00,180
earlier we have at least three more

00:11:55,890 --> 00:12:03,540
platforms to support open VR PlayStation

00:12:00,180 --> 00:12:08,339
VR and oculus desktop so how can we do

00:12:03,540 --> 00:12:11,579
this again we'll turn to to our VR app

00:12:08,339 --> 00:12:15,779
skeleton the concept of really all these

00:12:11,579 --> 00:12:18,720
VR apps we in it we have a run loop and

00:12:15,779 --> 00:12:22,579
then we shut down so in this case well I

00:12:18,720 --> 00:12:26,010
remove everything and two entirely C++

00:12:22,579 --> 00:12:29,010
one is appropriate we'll let the SDK and

00:12:26,010 --> 00:12:31,200
it the window OpenGL and i buffers so in

00:12:29,010 --> 00:12:33,870
the case of for example oculus mobile

00:12:31,200 --> 00:12:38,570
it's convenient to do so and then we'll

00:12:33,870 --> 00:12:42,000
do our own init and textures loaders etc

00:12:38,570 --> 00:12:44,550
so similarly we have our per frame

00:12:42,000 --> 00:12:47,490
callbacks will let the SDK do the buffer

00:12:44,550 --> 00:12:50,029
swap distortion and time warp that's a

00:12:47,490 --> 00:12:52,200
common theme across all the SDKs as

00:12:50,029 --> 00:12:54,890
usual we'll get the head pose from the

00:12:52,200 --> 00:12:58,589
SDK that's we use to draw our scene and

00:12:54,890 --> 00:13:01,529
respond to input a little side note here

00:12:58,589 --> 00:13:04,140
some of the SDKs manage or at least

00:13:01,529 --> 00:13:05,940
provide or run them for you and some

00:13:04,140 --> 00:13:06,550
don't and we'll see which ones do and

00:13:05,940 --> 00:13:10,480
don't a little bit

00:13:06,550 --> 00:13:12,430
that is in either case an option and

00:13:10,480 --> 00:13:15,750
then as usual nothing surprising here we

00:13:12,430 --> 00:13:19,990
just show down so how does our new

00:13:15,750 --> 00:13:24,459
cross-platform class look like following

00:13:19,990 --> 00:13:27,160
the same themes in it frame shut down we

00:13:24,459 --> 00:13:30,190
have a configure initialize and entered

00:13:27,160 --> 00:13:32,740
VR mode rather than having platform

00:13:30,190 --> 00:13:36,399
dependent types we have our own settings

00:13:32,740 --> 00:13:38,110
and launch config and since oculus

00:13:36,399 --> 00:13:40,000
mobile supports this notion of a hybrid

00:13:38,110 --> 00:13:43,360
app we'll also have this note you know

00:13:40,000 --> 00:13:46,440
enter VR mode and exit VR mode we'll

00:13:43,360 --> 00:13:49,649
have our frame and also we'll drop her I

00:13:46,440 --> 00:13:52,180
will handle input as it comes in and

00:13:49,649 --> 00:13:54,040
we'll leave the R mode when appropriate

00:13:52,180 --> 00:13:56,410
user takes the hmb off or will shut down

00:13:54,040 --> 00:13:59,769
when the user closes the app nothing

00:13:56,410 --> 00:14:03,640
surprising here so how can we do this

00:13:59,769 --> 00:14:07,720
structurally one suggestion is to rather

00:14:03,640 --> 00:14:09,399
than have if deaths inside of many many

00:14:07,720 --> 00:14:14,230
files instead will limit the if deaths

00:14:09,399 --> 00:14:15,910
to the header of VR application and for

00:14:14,230 --> 00:14:17,589
each one of the different platforms what

00:14:15,910 --> 00:14:20,230
we'll do is make a different translation

00:14:17,589 --> 00:14:22,390
unit so here we have oculus mobile with

00:14:20,230 --> 00:14:25,209
the oculus mobile specific types VR

00:14:22,390 --> 00:14:28,180
frame and in a separate translation unit

00:14:25,209 --> 00:14:31,180
we will define and you know use that

00:14:28,180 --> 00:14:34,020
function appropriately so what does

00:14:31,180 --> 00:14:37,029
cardboard look like since it's in Java

00:14:34,020 --> 00:14:41,100
we can't avoid using the J&I and you get

00:14:37,029 --> 00:14:41,100
these nasty looking functions like this

00:14:41,610 --> 00:14:46,390
sadly it's the only way to do things and

00:14:44,620 --> 00:14:50,589
actually I found a humorous comment on

00:14:46,390 --> 00:14:52,959
the oculus forums so the guy that's

00:14:50,589 --> 00:14:55,540
responding here is Chris Pruett which is

00:14:52,959 --> 00:14:58,570
kind of the face of oculus mobile

00:14:55,540 --> 00:15:00,250
developer relations and you can see some

00:14:58,570 --> 00:15:01,870
of that somebody asking them if there's

00:15:00,250 --> 00:15:04,779
going to be a Java API for the oculus

00:15:01,870 --> 00:15:07,769
mobile sdk and his response is you can

00:15:04,779 --> 00:15:11,699
use the J&I if you're brave I found that

00:15:07,769 --> 00:15:11,699
candid for a developer support

00:15:12,040 --> 00:15:15,880
so like I was saying a little bit

00:15:14,110 --> 00:15:18,940
earlier some of the SDKs provide you a

00:15:15,880 --> 00:15:21,070
run loop and some don't open VR is one

00:15:18,940 --> 00:15:23,560
of the ones that don't and so in this

00:15:21,070 --> 00:15:26,950
case our VR application is going to have

00:15:23,560 --> 00:15:28,540
to have its own name loop this will be a

00:15:26,950 --> 00:15:30,580
standard loop effectively looks like

00:15:28,540 --> 00:15:35,440
while the app is running go do some

00:15:30,580 --> 00:15:37,630
stuff so how do we get the kind of

00:15:35,440 --> 00:15:40,380
important VR things and this is a theme

00:15:37,630 --> 00:15:43,180
that we'll see across the open VR SDK

00:15:40,380 --> 00:15:45,820
oculus mobile and desktop SDKs placed it

00:15:43,180 --> 00:15:48,310
PlayStation VR really all of them it

00:15:45,820 --> 00:15:49,750
just comes down to cracking which is

00:15:48,310 --> 00:15:53,670
where is the head in space what's it

00:15:49,750 --> 00:15:58,390
looking at it'll provide distortion

00:15:53,670 --> 00:16:00,610
based on the optics and if the SDK

00:15:58,390 --> 00:16:02,790
supports some kind of input device like

00:16:00,610 --> 00:16:06,910
many of them do it will give you events

00:16:02,790 --> 00:16:09,750
to those in this case the open VR SDK

00:16:06,910 --> 00:16:12,460
does exactly that

00:16:09,750 --> 00:16:15,520
so the PlayStation VR SDK is the exact

00:16:12,460 --> 00:16:18,760
same we also have to implement our main

00:16:15,520 --> 00:16:20,230
loop and unsurprisingly it has its own

00:16:18,760 --> 00:16:21,580
little libraries that give you all the

00:16:20,230 --> 00:16:28,960
usual VR stuff that we've been talking

00:16:21,580 --> 00:16:31,560
about the whole time here so what does

00:16:28,960 --> 00:16:33,820
oculus desktop look like same deal

00:16:31,560 --> 00:16:36,480
what's interesting about oculus desktop

00:16:33,820 --> 00:16:40,900
is that it is quite different from

00:16:36,480 --> 00:16:43,690
oculus Mobile I'm not sure why that is

00:16:40,900 --> 00:16:45,490
but it certainly potentially points to

00:16:43,690 --> 00:16:48,310
the fact that it's not easy to get

00:16:45,490 --> 00:16:54,700
cross-platform SDKs cross-platform apps

00:16:48,310 --> 00:16:56,380
right the apps and the SDKs for oculus

00:16:54,700 --> 00:16:59,410
Mobile and oculus s up are almost

00:16:56,380 --> 00:17:02,200
incompatible but any rate the themes are

00:16:59,410 --> 00:17:06,210
the exact same we have a library here

00:17:02,200 --> 00:17:11,230
it's libo VR we have some initialization

00:17:06,210 --> 00:17:13,110
we get tracking and we submit a frame to

00:17:11,230 --> 00:17:17,290
the sdk which will then do the

00:17:13,110 --> 00:17:18,900
distortion for us and then finally and

00:17:17,290 --> 00:17:25,380
as usual we

00:17:18,900 --> 00:17:27,540
shut down so another common theme here

00:17:25,380 --> 00:17:31,050
is that all these platforms are really

00:17:27,540 --> 00:17:32,490
the same but they're all trying to do

00:17:31,050 --> 00:17:36,930
things in slightly different ways and

00:17:32,490 --> 00:17:40,160
this kind of is reminiscent of old

00:17:36,930 --> 00:17:42,330
platform kind of graphics API Wars

00:17:40,160 --> 00:17:44,790
ideally at some point there'll be some

00:17:42,330 --> 00:17:46,680
standardization I think that's part of

00:17:44,790 --> 00:17:49,980
what valve is trying to do with open VR

00:17:46,680 --> 00:17:52,740
there are some other efforts like OS VR

00:17:49,980 --> 00:17:57,830
as well though OS VR really hasn't

00:17:52,740 --> 00:18:00,330
gained any significant steam or traction

00:17:57,830 --> 00:18:04,560
so finally what we need to do or we'd

00:18:00,330 --> 00:18:09,830
like to do is add a scripting layer on

00:18:04,560 --> 00:18:12,390
top of on top of our C++ library and

00:18:09,830 --> 00:18:16,440
will appeal to the same concept as

00:18:12,390 --> 00:18:21,390
before which is an it frame and shut

00:18:16,440 --> 00:18:24,360
down so this time we'll have primarily

00:18:21,390 --> 00:18:26,700
C++ and we'll add an additional

00:18:24,360 --> 00:18:31,790
scripting layer the candidates at the

00:18:26,700 --> 00:18:36,330
moment are still up for debate at work

00:18:31,790 --> 00:18:37,830
at Oh toy we use Lua but I think

00:18:36,330 --> 00:18:40,170
potentially another good idea is Java

00:18:37,830 --> 00:18:42,030
Script just to appeal to developers and

00:18:40,170 --> 00:18:44,520
our web developers in a language that

00:18:42,030 --> 00:18:48,840
they're comfortable with and another

00:18:44,520 --> 00:18:51,750
candidate is scheme which Carmack is

00:18:48,840 --> 00:18:54,990
calling John Carmack the CTO of oculus

00:18:51,750 --> 00:18:57,680
is calling a VR script in a couple days

00:18:54,990 --> 00:19:01,800
apparently he will do be doing the demo

00:18:57,680 --> 00:19:03,870
using that at an oculus connect so some

00:19:01,800 --> 00:19:07,410
interesting experimentation happening

00:19:03,870 --> 00:19:09,120
and scripting and one of the reasons

00:19:07,410 --> 00:19:14,220
that the scripting layer is nice on top

00:19:09,120 --> 00:19:17,790
of C++ is that for apps that aren't

00:19:14,220 --> 00:19:21,950
super performance intensive and in

00:19:17,790 --> 00:19:24,240
addition for apps that are UI driven

00:19:21,950 --> 00:19:28,170
having a scripting layer makes it easy

00:19:24,240 --> 00:19:29,790
to prototype different UIs and also to

00:19:28,170 --> 00:19:32,130
separate the work between the people

00:19:29,790 --> 00:19:33,990
working on the C++ level stuff

00:19:32,130 --> 00:19:36,990
and designers and artists working on the

00:19:33,990 --> 00:19:41,610
higher levels so in the long term it's

00:19:36,990 --> 00:19:44,610
likely that some mix of C++ Plus

00:19:41,610 --> 00:19:48,590
scripting layer will be the way that

00:19:44,610 --> 00:19:51,330
most apps are developed and curiously or

00:19:48,590 --> 00:19:53,730
maybe unsurprisingly enough that's

00:19:51,330 --> 00:19:56,580
exactly what unity and unreal are

00:19:53,730 --> 00:19:59,700
heading towards unity primarily using

00:19:56,580 --> 00:20:02,640
c-sharp and unreal using their

00:19:59,700 --> 00:20:09,150
blueprints scripting whatever it is

00:20:02,640 --> 00:20:14,700
language / drag-and-drop UI so how do we

00:20:09,150 --> 00:20:18,420
do the scripting well it really depends

00:20:14,700 --> 00:20:21,200
on what we want to script and for the

00:20:18,420 --> 00:20:23,700
layers that our script kind of

00:20:21,200 --> 00:20:26,340
prohibitive which might be the core

00:20:23,700 --> 00:20:30,260
rendering loops will avoid that but for

00:20:26,340 --> 00:20:33,930
layers like may be responding to taps or

00:20:30,260 --> 00:20:35,840
creating objects in a scene or even for

00:20:33,930 --> 00:20:38,430
networking between these devices

00:20:35,840 --> 00:20:40,680
scripting is a good candidate and for

00:20:38,430 --> 00:20:44,940
all these things when we want to call

00:20:40,680 --> 00:20:47,430
from script into C++ we can set up some

00:20:44,940 --> 00:20:50,820
handlers for that and then similarly

00:20:47,430 --> 00:20:54,150
when we want to call from C++ into the

00:20:50,820 --> 00:20:57,840
script we can set up callbacks I found

00:20:54,150 --> 00:21:02,340
this to be most useful in initialization

00:20:57,840 --> 00:21:04,440
and like said are like mention a little

00:21:02,340 --> 00:21:11,070
bit earlier you know responding to UI

00:21:04,440 --> 00:21:12,930
events and so finally what are the

00:21:11,070 --> 00:21:17,970
frontiers here and kind of what are the

00:21:12,930 --> 00:21:20,510
lessons learned one of the problems is

00:21:17,970 --> 00:21:24,240
that there's no real standardized and

00:21:20,510 --> 00:21:29,040
uniform way of implementing these VR

00:21:24,240 --> 00:21:31,950
apps at a high level the init and frame

00:21:29,040 --> 00:21:33,720
and shutdown pattern it's common to them

00:21:31,950 --> 00:21:37,170
all but everybody does things slightly

00:21:33,720 --> 00:21:39,120
differently and as a result you actually

00:21:37,170 --> 00:21:41,190
end up with quite a bit of code for each

00:21:39,120 --> 00:21:42,660
platform that feels like you're doing

00:21:41,190 --> 00:21:47,110
the same thing but in slightly different

00:21:42,660 --> 00:21:50,620
ways one of the

00:21:47,110 --> 00:21:55,280
kind of next work items things that

00:21:50,620 --> 00:21:59,480
planning on trying next is having

00:21:55,280 --> 00:22:01,370
uniformity with the run loops so on

00:21:59,480 --> 00:22:04,220
oculus mobile and on cardboard you're

00:22:01,370 --> 00:22:08,740
relying on their SDK to manage the run

00:22:04,220 --> 00:22:11,180
loop for you and in an ideal world you

00:22:08,740 --> 00:22:13,250
either standardize on the SDK is doing

00:22:11,180 --> 00:22:16,220
that or you standardize on yourself

00:22:13,250 --> 00:22:18,350
doing that and it seems given the fact

00:22:16,220 --> 00:22:23,090
that most the SDKs don't give you a run

00:22:18,350 --> 00:22:24,590
loop writing a run loop for oculus

00:22:23,090 --> 00:22:29,680
mobile and for cardboard might be the

00:22:24,590 --> 00:22:32,930
way to go it would also be nice is to

00:22:29,680 --> 00:22:34,640
try out other scripting languages when

00:22:32,930 --> 00:22:38,330
talking with other developers I've heard

00:22:34,640 --> 00:22:41,840
suggestions of even C++ scripting it

00:22:38,330 --> 00:22:46,250
also be nice to make the C++ components

00:22:41,840 --> 00:22:49,550
increasingly modular right now the code

00:22:46,250 --> 00:22:52,460
is or as described the code is very

00:22:49,550 --> 00:22:55,040
heavily dependent on C++ and as a result

00:22:52,460 --> 00:22:57,500
it's difficult to separate things from

00:22:55,040 --> 00:22:59,780
one another one of the reasons that

00:22:57,500 --> 00:23:01,880
that's required and this is how the

00:22:59,780 --> 00:23:03,830
modular Ness is tangled in with the

00:23:01,880 --> 00:23:06,200
uniformity and all related to

00:23:03,830 --> 00:23:08,780
cross-platform is everyone's ultimately

00:23:06,200 --> 00:23:10,760
doing the same thing they're all

00:23:08,780 --> 00:23:14,990
effectively providing tracking

00:23:10,760 --> 00:23:18,110
information and providing some kind of

00:23:14,990 --> 00:23:23,000
distortion but everyone's doing it

00:23:18,110 --> 00:23:26,060
slightly differently so this is a common

00:23:23,000 --> 00:23:27,940
problem on mobile platforms which is

00:23:26,060 --> 00:23:30,260
each one of the mobile platforms

00:23:27,940 --> 00:23:32,690
provides their own kind of set of UI

00:23:30,260 --> 00:23:35,570
widgets and if you want an Android app

00:23:32,690 --> 00:23:38,600
to look like an Android app then you

00:23:35,570 --> 00:23:40,970
have to make sure that your C++ library

00:23:38,600 --> 00:23:44,540
interfaces properly with the Android OS

00:23:40,970 --> 00:23:46,310
and similarly with if you want an iOS

00:23:44,540 --> 00:23:49,550
app to look like an iOS app you have to

00:23:46,310 --> 00:23:51,470
use the iOS widgets and this quite is

00:23:49,550 --> 00:23:54,590
quite or this hasn't quite happened yet

00:23:51,470 --> 00:23:56,660
in VR but you can already see signs of

00:23:54,590 --> 00:23:59,450
it as these SDKs are starting to

00:23:56,660 --> 00:24:01,610
standardize so for example the

00:23:59,450 --> 00:24:03,019
Kilis mobile sdk has its own set of

00:24:01,610 --> 00:24:05,360
widgets and it encourages you to use

00:24:03,019 --> 00:24:08,389
those widgets and then I'm guessing over

00:24:05,360 --> 00:24:10,010
time an oculist mobile app will start to

00:24:08,389 --> 00:24:11,600
look like an oculus mobile app which

00:24:10,010 --> 00:24:18,919
won't look like a PlayStation app which

00:24:11,600 --> 00:24:21,080
won't look like oculus desktop app what

00:24:18,919 --> 00:24:24,710
that gives you or the problem that

00:24:21,080 --> 00:24:26,779
creates is it makes it harder to create

00:24:24,710 --> 00:24:29,750
cross-platform apps that look native to

00:24:26,779 --> 00:24:32,510
that platform so on the one hand you

00:24:29,750 --> 00:24:35,000
have the nicety of being able to use

00:24:32,510 --> 00:24:37,549
these widgets and on the other hand you

00:24:35,000 --> 00:24:40,100
have the hassle of having to deal with

00:24:37,549 --> 00:24:44,960
one standard interface to a whole bunch

00:24:40,100 --> 00:24:49,630
of different widget types and then

00:24:44,960 --> 00:24:56,269
finally all of these VR experiences and

00:24:49,630 --> 00:25:00,260
platforms are trying to create their own

00:24:56,269 --> 00:25:02,419
input devices and as a result it makes

00:25:00,260 --> 00:25:06,679
it very difficult to write code for all

00:25:02,419 --> 00:25:11,230
of them so perhaps in the long term

00:25:06,679 --> 00:25:13,279
there won't be uniform VR input device

00:25:11,230 --> 00:25:14,510
but in the short term what this leaves

00:25:13,279 --> 00:25:16,700
you is having to write code that deals

00:25:14,510 --> 00:25:18,590
with controllers that deals with certain

00:25:16,700 --> 00:25:20,990
kinds of wands that deals with the

00:25:18,590 --> 00:25:23,480
PlayStation Move the oculus touch there

00:25:20,990 --> 00:25:26,750
are rings the leap motion uses your

00:25:23,480 --> 00:25:28,490
hands so everyone has its own idea or

00:25:26,750 --> 00:25:32,059
everyone has their own idea on what the

00:25:28,490 --> 00:25:34,309
right model is for VR input and no one

00:25:32,059 --> 00:25:36,470
really has given any tremendous thought

00:25:34,309 --> 00:25:40,250
on kind of standardizing what that might

00:25:36,470 --> 00:25:44,029
be so an example of kind of what Michael

00:25:40,250 --> 00:25:45,950
poorly if there is no standardization or

00:25:44,029 --> 00:25:49,220
no attempt to come up with like what is

00:25:45,950 --> 00:25:51,380
the basic VR controller is you know

00:25:49,220 --> 00:25:53,630
imagine if Sony and Microsoft hadn't

00:25:51,380 --> 00:25:55,220
agreed and at a high level what what

00:25:53,630 --> 00:25:58,159
does a basic console controller look

00:25:55,220 --> 00:26:01,399
like you couldn't write games for both

00:25:58,159 --> 00:26:05,330
consoles you certainly couldn't design

00:26:01,399 --> 00:26:07,669
them and design them well so if there

00:26:05,330 --> 00:26:10,930
isn't some kind of this is what a

00:26:07,669 --> 00:26:16,300
general VR controller looks like

00:26:10,930 --> 00:26:18,040
the design of VR apps will suffer and

00:26:16,300 --> 00:26:23,530
then as I've talked with people the

00:26:18,040 --> 00:26:26,050
counter-argument is like sure while

00:26:23,530 --> 00:26:26,800
Microsoft and Sony have in principle

00:26:26,050 --> 00:26:28,870
agreed

00:26:26,800 --> 00:26:32,070
what a console controller should look

00:26:28,870 --> 00:26:34,540
like there are still a variety of

00:26:32,070 --> 00:26:36,790
devices that attach to consoles

00:26:34,540 --> 00:26:37,990
obviously Microsoft's got to connect but

00:26:36,790 --> 00:26:40,930
then even there's things like the rock

00:26:37,990 --> 00:26:42,880
band guitar and the drum set so it's

00:26:40,930 --> 00:26:46,150
possible that in the end what happens

00:26:42,880 --> 00:26:49,330
with VR is people decide there's a

00:26:46,150 --> 00:26:53,620
general kind of wand like what valve and

00:26:49,330 --> 00:26:55,240
Sony have and for each unique uuhh VR

00:26:53,620 --> 00:26:57,010
experience sometimes you'll have

00:26:55,240 --> 00:26:59,650
something different and maybe sometimes

00:26:57,010 --> 00:27:03,309
use your hands but ultimately when it

00:26:59,650 --> 00:27:06,100
comes down to designing the experiences

00:27:03,309 --> 00:27:09,840
for these things you'll have to design

00:27:06,100 --> 00:27:15,100
the experience with the input in mind

00:27:09,840 --> 00:27:17,770
and then finally as a the last little

00:27:15,100 --> 00:27:19,960
breather here so I don't know if you

00:27:17,770 --> 00:27:21,790
guys have noticed and almost not every

00:27:19,960 --> 00:27:23,710
one of his talks but a common theme in a

00:27:21,790 --> 00:27:27,700
Scott Myers talk is him asking about

00:27:23,710 --> 00:27:30,250
pizza so serious pie is my favorite

00:27:27,700 --> 00:27:31,750
pizza here in Seattle that one's not not

00:27:30,250 --> 00:27:34,270
super close to here but it's definitely

00:27:31,750 --> 00:27:36,400
worth the drive and I recommend the

00:27:34,270 --> 00:27:40,420
buffalo mozzarella pizza there it's

00:27:36,400 --> 00:27:42,600
quite good and so it looks like we got

00:27:40,420 --> 00:27:47,400
this got through this quite quickly and

00:27:42,600 --> 00:27:47,400
thanks for listening any questions

00:28:05,409 --> 00:28:15,429
yeah so there's no there's no great

00:28:13,940 --> 00:28:20,289
reason so you could have for example

00:28:15,429 --> 00:28:20,289
like if we go back a couple slides here

00:28:22,840 --> 00:28:27,440
so you could have I think what you're

00:28:24,980 --> 00:28:28,309
suggesting is so for like say

00:28:27,440 --> 00:28:30,679
PlayStation VR

00:28:28,309 --> 00:28:33,110
you'd subclass VR application and just

00:28:30,679 --> 00:28:33,440
say PlayStation VR app or something like

00:28:33,110 --> 00:28:37,070
that

00:28:33,440 --> 00:28:43,190
yeah there's no great reason what this

00:28:37,070 --> 00:28:44,960
gives you is the ability to so say you

00:28:43,190 --> 00:28:46,690
want to have like one global object like

00:28:44,960 --> 00:28:49,880
it's it's a design pattern called like a

00:28:46,690 --> 00:28:54,049
program global program

00:28:49,880 --> 00:28:56,000
I guess it's common in games and so say

00:28:54,049 --> 00:28:57,950
you want to have something simple like

00:28:56,000 --> 00:29:02,260
you have a global program object that's

00:28:57,950 --> 00:29:05,000
used in all the apps and for each

00:29:02,260 --> 00:29:06,289
platforms run loop you don't want to

00:29:05,000 --> 00:29:07,520
have a separate type so you say you

00:29:06,289 --> 00:29:10,580
wanna have it run loop in a standard

00:29:07,520 --> 00:29:14,059
file that is in a layer above your

00:29:10,580 --> 00:29:16,340
platform layer in that case you'd have

00:29:14,059 --> 00:29:17,539
to if def inside of the run loop in this

00:29:16,340 --> 00:29:20,450
case you could just go via our

00:29:17,539 --> 00:29:24,679
application dot frame and it handed some

00:29:20,450 --> 00:29:30,070
stuff will drop dry but it ultimately

00:29:24,679 --> 00:29:30,070
it's a design choice yep

00:29:33,650 --> 00:29:41,630
yeah so just like everything else

00:29:36,710 --> 00:29:42,800
Audio is SDK specific and everyone does

00:29:41,630 --> 00:29:46,760
things a little bit differently a

00:29:42,800 --> 00:29:49,340
because of differences in OSS and B

00:29:46,760 --> 00:29:51,320
because the industry is so new and C I

00:29:49,340 --> 00:29:53,000
think it's just some level of kind of

00:29:51,320 --> 00:29:55,370
everyone wants to build their own walled

00:29:53,000 --> 00:30:00,020
garden and everybody wants to be the

00:29:55,370 --> 00:30:04,460
dominant VR platform that said it is

00:30:00,020 --> 00:30:07,100
something that is I'm kind of under

00:30:04,460 --> 00:30:08,210
active research because like I was

00:30:07,100 --> 00:30:10,940
saying earlier or I was mentioning

00:30:08,210 --> 00:30:12,020
earlier about the simulator sickness one

00:30:10,940 --> 00:30:13,910
of the ways that you can prevent

00:30:12,020 --> 00:30:17,300
simulator sickness is by having

00:30:13,910 --> 00:30:19,940
positional audio it significantly for

00:30:17,300 --> 00:30:21,920
some reason impacts just how sick you

00:30:19,940 --> 00:30:25,250
get especially with things where you're

00:30:21,920 --> 00:30:26,510
moving quickly through space so I guess

00:30:25,250 --> 00:30:28,370
it's not a tremendously good answer

00:30:26,510 --> 00:30:30,080
other than you know it's under active

00:30:28,370 --> 00:30:32,140
development and everybody does it

00:30:30,080 --> 00:30:32,140
differently

00:30:35,890 --> 00:30:42,820
they all provide kind of I guess the

00:30:41,920 --> 00:30:45,160
best way to say it is they all provide

00:30:42,820 --> 00:30:46,960
in it an SDK or they provide a way for

00:30:45,160 --> 00:30:48,160
you to give like three 3d positional

00:30:46,960 --> 00:30:51,850
audio and everybody does it differently

00:30:48,160 --> 00:30:54,250
in some cases you'll provide a wave in

00:30:51,850 --> 00:30:57,370
some cases if you just say like a video

00:30:54,250 --> 00:30:58,900
for example a 360 video and in some

00:30:57,370 --> 00:31:01,180
cases you'll actually provide you know

00:30:58,900 --> 00:31:03,910
where the object is in space so that it

00:31:01,180 --> 00:31:09,960
can calculate properly you know what

00:31:03,910 --> 00:31:09,960
year to to play it on yep

00:31:27,140 --> 00:31:54,600
so you're asking on the Sony sorry can

00:31:31,680 --> 00:31:57,990
you okay so what you're asking is the

00:31:54,600 --> 00:32:00,140
Sony Morpheus display is inherently

00:31:57,990 --> 00:32:02,580
different than the rest of this place

00:32:00,140 --> 00:32:04,860
and aren't there any differences or are

00:32:02,580 --> 00:32:07,200
there any ways to optimize or you know

00:32:04,860 --> 00:32:09,330
take advantage of that that's a great

00:32:07,200 --> 00:32:16,410
question I'm not sure actually what I

00:32:09,330 --> 00:32:19,470
have heard and I don't know that it's an

00:32:16,410 --> 00:32:22,410
opinion that like I kind of strong it's

00:32:19,470 --> 00:32:23,850
not that I disagree with it it's that

00:32:22,410 --> 00:32:29,310
it's just something I've heard people

00:32:23,850 --> 00:32:31,560
are very kind of I say best people

00:32:29,310 --> 00:32:34,500
really like the Sony display and they

00:32:31,560 --> 00:32:35,670
really think it's the best one so maybe

00:32:34,500 --> 00:32:37,820
that's one of the reasons but I'm not

00:32:35,670 --> 00:32:37,820
sure

00:32:40,419 --> 00:32:48,070
yep can you go into a little bit what

00:32:45,380 --> 00:32:48,070
would be involved

00:32:51,970 --> 00:32:56,480
yeah I mean just like everything else oh

00:32:54,890 --> 00:32:58,580
so sorry the question was what would be

00:32:56,480 --> 00:33:00,350
involved in switching from Lua to

00:32:58,580 --> 00:33:04,540
JavaScript or you know to whatever

00:33:00,350 --> 00:33:06,800
language of choice and in some sense

00:33:04,540 --> 00:33:13,600
just like everything else is platform

00:33:06,800 --> 00:33:17,800
dependent so on Android you might use

00:33:13,600 --> 00:33:20,780
the Android OS javascript interpreters

00:33:17,800 --> 00:33:23,140
you could also add like some apps are

00:33:20,780 --> 00:33:23,140
doing today

00:33:23,650 --> 00:33:33,200
v8 directly into your app so the final

00:33:31,790 --> 00:33:34,610
kind of interesting component when it

00:33:33,200 --> 00:33:36,230
comes to that and especially in regards

00:33:34,610 --> 00:33:38,960
of loop in regards to Lua bridges

00:33:36,230 --> 00:33:41,330
scripting languages in general some of

00:33:38,960 --> 00:33:44,330
the platform vendors or some of the kind

00:33:41,330 --> 00:33:47,630
of VR vendors don't allow cheating on

00:33:44,330 --> 00:33:49,430
their platform presumably that's - they

00:33:47,630 --> 00:33:52,430
say it's because of security reasons but

00:33:49,430 --> 00:33:54,110
you know kind of a under that's what the

00:33:52,430 --> 00:33:56,120
underlined but maybe the real reason is

00:33:54,110 --> 00:33:59,380
that allows you to maybe put your own

00:33:56,120 --> 00:33:59,380
app store on their platforms

00:33:59,650 --> 00:34:03,110
so I guess hopefully the best way to

00:34:01,670 --> 00:34:05,540
answer your question is it depends just

00:34:03,110 --> 00:34:08,270
like everything else there's no great

00:34:05,540 --> 00:34:11,419
answers VR is kind of Wild West at the

00:34:08,270 --> 00:34:14,260
moment so if you're interested in it you

00:34:11,419 --> 00:34:14,260
should definitely work on it

00:34:16,240 --> 00:34:30,730
anyone else yeah actually

00:34:27,710 --> 00:34:34,460
so I'm not sure what the PlayStation

00:34:30,730 --> 00:34:37,430
uses for JavaScript yet although they do

00:34:34,460 --> 00:34:38,510
allow it I'm not sure what engine what

00:34:37,430 --> 00:34:52,370
they don't allow is they don't allow

00:34:38,510 --> 00:34:54,050
legit yeah yeah on the PlayStation hmm

00:34:52,370 --> 00:34:56,000
so a good example of that and this

00:34:54,050 --> 00:34:58,250
doesn't really have much to do with VR

00:34:56,000 --> 00:35:03,650
is for example like iOS doesn't allow

00:34:58,250 --> 00:35:07,450
 inside of an app if you embed a

00:35:03,650 --> 00:35:07,450
webview it does yeah but if if you

00:35:19,470 --> 00:35:42,490
yeah oh I see so we haven't tried this

00:35:39,760 --> 00:35:44,070
yet but I do remember reading somewhere

00:35:42,490 --> 00:35:46,750
in the documentation that they do allow

00:35:44,070 --> 00:35:51,910
JavaScript jet inside of a PlayStation

00:35:46,750 --> 00:35:53,710
app presumably yeah exactly because they

00:35:51,910 --> 00:35:55,810
use some engine of choice and maybe they

00:35:53,710 --> 00:35:57,370
run it through some like pre pass to

00:35:55,810 --> 00:35:59,320
make sure that you're not doing

00:35:57,370 --> 00:36:01,630
something they don't want you to do I'm

00:35:59,320 --> 00:36:04,050
not sure they definitely don't allow

00:36:01,630 --> 00:36:04,050
what would yet

00:36:22,420 --> 00:36:37,210
yeah so if we're not talking about VR

00:36:26,590 --> 00:36:40,410
anymore just mobile development so we

00:36:37,210 --> 00:36:44,050
were asking is just repeat the question

00:36:40,410 --> 00:36:45,490
does JIT or the ability to JIT on a

00:36:44,050 --> 00:36:46,990
mobile platform and particularly the

00:36:45,490 --> 00:36:48,460
phone which is what the Andes Android

00:36:46,990 --> 00:36:51,430
phones which are the only ones support

00:36:48,460 --> 00:36:52,960
at the moment give any like battery life

00:36:51,430 --> 00:36:57,550
or performance gains

00:36:52,960 --> 00:37:00,760
I haven't measured that but presumably

00:36:57,550 --> 00:37:05,170
yes and certainly there'd be performance

00:37:00,760 --> 00:37:06,730
implications so say you wanted to do

00:37:05,170 --> 00:37:10,390
things that aren't just responding to

00:37:06,730 --> 00:37:13,420
user events maybe you want to create a

00:37:10,390 --> 00:37:15,160
bunch of object or maybe you want to add

00:37:13,420 --> 00:37:19,000
some scripting into the kind of the main

00:37:15,160 --> 00:37:23,110
run loop you definitely want jitter in

00:37:19,000 --> 00:37:28,020
that case does that answer the question

00:37:23,110 --> 00:37:28,020
yeah anyone else

00:37:29,920 --> 00:37:34,020

YouTube URL: https://www.youtube.com/watch?v=EqD3FO2FRlc


