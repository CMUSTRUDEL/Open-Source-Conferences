Title: CppCon 2018: “C++ Dependency Management: from Package Consumption to Project Development”
Publication date: 2018-10-15
Playlist: CppCon 2018
Description: 
	http://CppCon.org
__
Boris Kolpackov “C++ Dependency Management: from Package Consumption to Project Development”
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
TL;DR: Want to see what Cargo for C++ looks like? Then this talk is for you. 

Existing C++ package managers focus primarily on consumption: there is a repository of released packages that we can download, build, and install. But what happens between releases of these packages? In other words, how are they developed, tested, and delivered? Currently, the answer is "painfully" (and rarely by mere mortals). 

Meantime, as languages competing with C++ have shown (see Rust's Cargo, Go's dep/vgo), the state of the art has moved on and a "consumption manager" alone is no longer sufficient: we need support for managing dependencies of a project over its entire development lifecycle -- a tool commonly referred to as a project dependency manager. 

In this talk I would like to show the C++ dependency management workflow focused on development as supported by the build2 toolchain. Specifically, we will create from scratch a cross-platform C++ project, add/manage a few dependencies (that can come both from a central package repository as well as individual git repositories), setup CI for all the major platform/compiler combinations, go through a couple of releases, and, finally, publish our package to a central repository and see how our users can reproduce the exact set of dependencies we used in our builds (the lockfile functionality). 

And this won't be an entirely toy example either: in the process we will touch on quite a few real-world challenges, including continuous versioning between releases, how to depend on unreleased revisions in version control repositories, dependency auto-synchronization through build system integration, as well as how the upcoming C++ Modules will likely affect packaging.
— 
Boris Kolpackov, Code Synthesis
Chief Hacking Officer

Boris Kolpackov is a founder and CHO (Chief Hacking Officer) at Code Synthesis, a company focusing on the development of open-source tools and libraries for C++. For the past 10 years Boris has been working on solving interesting problems in the context of C++ using domain-specific languages (DSL), C++ parsing, source-to-source translation, and code generation. His notable projects to date include ODB (ORM for C++), XSD and XSD/e (XML Schema to C++ compilers), as well as libstudxml (XML parser/serializer library for C++).
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,000 --> 00:00:05,990
morning welcome so today I'd like to

00:00:03,419 --> 00:00:09,480
talk about C++ dependency management

00:00:05,990 --> 00:00:11,630
some statistics to get us started so

00:00:09,480 --> 00:00:14,700
this is the number of packages in

00:00:11,630 --> 00:00:17,850
package reports of a couple of popular

00:00:14,700 --> 00:00:19,800
programming languages as you can see

00:00:17,850 --> 00:00:21,960
when it comes to C++ before we can

00:00:19,800 --> 00:00:24,300
answer the question how many bf we first

00:00:21,960 --> 00:00:25,230
need to decide which package manager we

00:00:24,300 --> 00:00:27,570
gonna talk about

00:00:25,230 --> 00:00:31,380
as always in C++ we have several

00:00:27,570 --> 00:00:34,469
alternatives I was told that the largest

00:00:31,380 --> 00:00:38,040
of them is apparently bc PKG and they

00:00:34,469 --> 00:00:40,770
have about 800 packages so this second

00:00:38,040 --> 00:00:43,590
number in the rostro is how many

00:00:40,770 --> 00:00:45,629
packages they had two months ago so just

00:00:43,590 --> 00:00:48,480
think about it in the last two months

00:00:45,629 --> 00:00:51,149
rust added almost three times as many

00:00:48,480 --> 00:00:55,559
packages as the largest package

00:00:51,149 --> 00:00:57,510
repository in c++ has in total thank you

00:00:55,559 --> 00:00:59,420
if this doesn't tear that we have a

00:00:57,510 --> 00:01:04,890
problem then I don't know what else will

00:00:59,420 --> 00:01:06,450
so what exactly is our problem well we

00:01:04,890 --> 00:01:08,430
have many right we don't have a standard

00:01:06,450 --> 00:01:10,470
build system but that's for another talk

00:01:08,430 --> 00:01:13,110
on Wednesday so we actually have a

00:01:10,470 --> 00:01:16,680
couple of package managers now in C++

00:01:13,110 --> 00:01:19,650
but the problem is that they are what I

00:01:16,680 --> 00:01:21,869
would call consumption managers they can

00:01:19,650 --> 00:01:24,060
download build and install your package

00:01:21,869 --> 00:01:25,590
in its dependencies but they don't

00:01:24,060 --> 00:01:29,009
concern themselves with how those

00:01:25,590 --> 00:01:32,970
packages actually develop and if you

00:01:29,009 --> 00:01:34,350
look inside how the sausage is actually

00:01:32,970 --> 00:01:37,439
made then the answer is usually

00:01:34,350 --> 00:01:39,990
painfully and really by mere mortals and

00:01:37,439 --> 00:01:41,909
that's that's I think the fundamental

00:01:39,990 --> 00:01:45,390
problem that prevents us from getting to

00:01:41,909 --> 00:01:47,759
the to thousands of packages in our

00:01:45,390 --> 00:01:50,630
repositories we need to handle the

00:01:47,759 --> 00:01:53,520
entire project development lifecycle

00:01:50,630 --> 00:01:57,060
starting from creation developing

00:01:53,520 --> 00:01:59,700
testing dependency management of course

00:01:57,060 --> 00:02:02,040
the central part and as well as

00:01:59,700 --> 00:02:04,020
delivering publishing packages to places

00:02:02,040 --> 00:02:07,390
where they can be easily accessed by the

00:02:04,020 --> 00:02:10,620
users in other words we need to turn we

00:02:07,390 --> 00:02:15,160
to turn every C++ development potential

00:02:10,620 --> 00:02:17,260
library water so today I would like to

00:02:15,160 --> 00:02:20,230
show you and there's no fundamental

00:02:17,260 --> 00:02:23,260
reason they should they should suck in

00:02:20,230 --> 00:02:24,940
C++ right there's no reason we cannot do

00:02:23,260 --> 00:02:28,780
it so they I would like to show you how

00:02:24,940 --> 00:02:31,660
we do it in build 2 which is a which is

00:02:28,780 --> 00:02:34,690
a build tool chain for C++ so if you

00:02:31,660 --> 00:02:36,850
look at language like rust they have a

00:02:34,690 --> 00:02:39,670
single tool they they have a model that

00:02:36,850 --> 00:02:42,100
call a build system this model where you

00:02:39,670 --> 00:02:44,860
just interact with this package manager

00:02:42,100 --> 00:02:48,370
sled build system I don't think this is

00:02:44,860 --> 00:02:50,400
going to scale to the C++ it doesn't

00:02:48,370 --> 00:02:53,230
actually scale to more complex trust

00:02:50,400 --> 00:02:55,239
project as well as they are finding out

00:02:53,230 --> 00:02:56,980
so instead o 2 is actually hierarchy of

00:02:55,239 --> 00:02:59,320
tools so at the bottom we have the build

00:02:56,980 --> 00:03:01,780
system in the middle we have the package

00:02:59,320 --> 00:03:03,459
manager which is the consumption manager

00:03:01,780 --> 00:03:05,200
sometimes you don't you just need to

00:03:03,459 --> 00:03:07,209
build a package you don't actually plan

00:03:05,200 --> 00:03:10,000
to develop it and then on top we have

00:03:07,209 --> 00:03:11,950
the project dependency management cool

00:03:10,000 --> 00:03:16,660
which is what you get I used to develop

00:03:11,950 --> 00:03:18,760
your project project and this this build

00:03:16,660 --> 00:03:20,560
total chain is complemented nicely by

00:03:18,760 --> 00:03:22,269
your version control system so together

00:03:20,560 --> 00:03:28,480
they will constitute the core of your

00:03:22,269 --> 00:03:30,070
development toolset okay so so gonna see

00:03:28,480 --> 00:03:33,489
how it works in build - we need an

00:03:30,070 --> 00:03:39,340
example who wants to write another hello

00:03:33,489 --> 00:03:41,560
world example not be enthusiastic how

00:03:39,340 --> 00:03:44,160
about we write something real how about

00:03:41,560 --> 00:03:47,290
we actually create a real library that

00:03:44,160 --> 00:03:48,850
can be that you know most of us might

00:03:47,290 --> 00:03:52,799
actually want to use at the end of this

00:03:48,850 --> 00:03:56,079
talk about a portable dependency free

00:03:52,799 --> 00:03:59,230
UUID generation library currently the

00:03:56,079 --> 00:04:00,519
only viable option is boost uie which is

00:03:59,230 --> 00:04:03,370
a good option if you already have a

00:04:00,519 --> 00:04:05,920
dependency on boost but to bringing it

00:04:03,370 --> 00:04:10,060
this dependency just to generate you IDs

00:04:05,920 --> 00:04:15,610
sounds a bit one like an overkill so

00:04:10,060 --> 00:04:18,070
that's what I'm gonna try to do but

00:04:15,610 --> 00:04:19,829
before we will actually dive in let's

00:04:18,070 --> 00:04:22,710
step back a bit then

00:04:19,829 --> 00:04:25,800
don't briefly how exactly a library is a

00:04:22,710 --> 00:04:29,490
develop what what actually makes someone

00:04:25,800 --> 00:04:31,889
create a line well one possibility is

00:04:29,490 --> 00:04:34,440
you know I woke up this morning there

00:04:31,889 --> 00:04:36,900
lies hey I'm gonna create this great new

00:04:34,440 --> 00:04:38,819
library it's gonna become popular in the

00:04:36,900 --> 00:04:42,330
morning and you know I'll become famous

00:04:38,819 --> 00:04:45,180
give city pecan talks think most of us

00:04:42,330 --> 00:04:47,909
by now developed a resistance to such

00:04:45,180 --> 00:04:50,159
marketing ploys so instead would much

00:04:47,909 --> 00:04:51,840
prefer to use a library that was born

00:04:50,159 --> 00:04:53,940
out of real need you know someone

00:04:51,840 --> 00:04:55,289
someone had a piece of functionality in

00:04:53,940 --> 00:04:57,419
their project and they wanted to use

00:04:55,289 --> 00:05:00,509
another project so they quickly factored

00:04:57,419 --> 00:05:03,330
into the library oh you know I published

00:05:00,509 --> 00:05:05,280
my application my program on github and

00:05:03,330 --> 00:05:07,800
someone saw it and said hey this this

00:05:05,280 --> 00:05:09,930
thing that does nifty I also want to do

00:05:07,800 --> 00:05:14,009
it in my application can be put it in

00:05:09,930 --> 00:05:16,469
the library so and these are some of the

00:05:14,009 --> 00:05:19,530
properties of or some of the guidelines

00:05:16,469 --> 00:05:23,250
when I you I use when I work on such

00:05:19,530 --> 00:05:25,199
organic libraries they are normally as I

00:05:23,250 --> 00:05:27,270
said born out of very you'll need the

00:05:25,199 --> 00:05:30,000
usually small libraries doing specific

00:05:27,270 --> 00:05:32,819
thing hopefully well I also try to

00:05:30,000 --> 00:05:35,190
resist over engineering things when I

00:05:32,819 --> 00:05:37,800
move a piece of code into a library

00:05:35,190 --> 00:05:41,819
because now you're starting to base it

00:05:37,800 --> 00:05:43,680
on some theoretical thoughts and I also

00:05:41,819 --> 00:05:47,490
like to have a test at least one in my

00:05:43,680 --> 00:05:49,020
library alright so in the spirit of this

00:05:47,490 --> 00:05:50,969
organic library development we're

00:05:49,020 --> 00:05:52,620
actually going to start with a with a

00:05:50,969 --> 00:05:54,629
program and then executable and then

00:05:52,620 --> 00:05:58,680
you'll see how we can how easily we can

00:05:54,629 --> 00:06:08,870
factor this UID generation functionality

00:05:58,680 --> 00:06:12,539
into into a library so the easiest way

00:06:08,870 --> 00:06:16,909
everyone can see right the industry to

00:06:12,539 --> 00:06:21,360
create a project in build two is using

00:06:16,909 --> 00:06:24,330
media new command so here we specify

00:06:21,360 --> 00:06:26,669
that the project type is executable land

00:06:24,330 --> 00:06:28,349
which is C++ all gonna call it Jenny UID

00:06:26,669 --> 00:06:30,690
so this is actually going to be very

00:06:28,349 --> 00:06:34,740
useful utility on its own

00:06:30,690 --> 00:06:36,720
because in not they're very really util

00:06:34,740 --> 00:06:38,040
is available on different platforms but

00:06:36,720 --> 00:06:39,600
sometimes they're not installed by

00:06:38,040 --> 00:06:52,680
default you know their format is

00:06:39,600 --> 00:06:56,520
different but so we've created so T is

00:06:52,680 --> 00:07:00,000
my alias for three if we look inside

00:06:56,520 --> 00:07:02,250
what we get is this is a hello world a

00:07:00,000 --> 00:07:04,200
project which can customize for our

00:07:02,250 --> 00:07:06,990
needs this is also some build and

00:07:04,200 --> 00:07:09,300
packaging infrastructure set up and

00:07:06,990 --> 00:07:10,980
you're not gonna spend half an hour

00:07:09,300 --> 00:07:13,680
explaining all of it not right now we'll

00:07:10,980 --> 00:07:18,090
just as we need bit bits and pieces

00:07:13,680 --> 00:07:20,700
we'll talk about them now this is also a

00:07:18,090 --> 00:07:23,190
good time to talk about build systems

00:07:20,700 --> 00:07:24,480
briefly if you look at the Ross for

00:07:23,190 --> 00:07:26,310
example they have what I would call a

00:07:24,480 --> 00:07:28,350
build system less smaller right you put

00:07:26,310 --> 00:07:29,910
things in certain place name it a

00:07:28,350 --> 00:07:33,240
certain way and then you'll get an

00:07:29,910 --> 00:07:37,680
executable or a library I don't believe

00:07:33,240 --> 00:07:39,720
this is gonna scale to C++ requirements

00:07:37,680 --> 00:07:42,810
we'll see a good example of that in a

00:07:39,720 --> 00:07:45,090
few minutes but what we can actually

00:07:42,810 --> 00:07:48,240
kind of women by accident we achieved in

00:07:45,090 --> 00:07:50,430
build to persist for simple projects you

00:07:48,240 --> 00:07:54,720
can actually approximate this build

00:07:50,430 --> 00:07:58,020
systems less flow people your source

00:07:54,720 --> 00:07:59,940
files in this project subdirectory in

00:07:58,020 --> 00:08:02,220
the source subdirectory you can add new

00:07:59,940 --> 00:08:03,360
source files you can rename them you can

00:08:02,220 --> 00:08:04,980
delete them and the build system

00:08:03,360 --> 00:08:07,320
automatically pick it up you actually

00:08:04,980 --> 00:08:09,600
don't need to touch build the build file

00:08:07,320 --> 00:08:11,669
when you're just adding or removing saw

00:08:09,600 --> 00:08:13,710
spots so I think this is kind of an a

00:08:11,669 --> 00:08:15,540
nice middle ground for simple things you

00:08:13,710 --> 00:08:17,640
really need to touch the build system

00:08:15,540 --> 00:08:20,790
but if you need it it's actually Deb and

00:08:17,640 --> 00:08:25,890
I we'll see now some we quite often you

00:08:20,790 --> 00:08:29,490
do need it ok so this is our source file

00:08:25,890 --> 00:08:32,280
we can already see it but before we

00:08:29,490 --> 00:08:35,580
gonna go hack on it let's first set up

00:08:32,280 --> 00:08:37,500
build infrastructure so in build tool we

00:08:35,580 --> 00:08:39,900
built normally out of source in

00:08:37,500 --> 00:08:42,219
directories called build configurations

00:08:39,900 --> 00:08:44,350
and the

00:08:42,219 --> 00:08:46,079
so we need to initialize our project in

00:08:44,350 --> 00:08:49,209
a couple of build configurations

00:08:46,079 --> 00:08:53,350
normally in C++ me ever several at least

00:08:49,209 --> 00:08:57,730
different compilers options and so on so

00:08:53,350 --> 00:08:59,620
we're gonna use the neat command so but

00:08:57,730 --> 00:09:01,060
the neat you can initialize your a

00:08:59,620 --> 00:09:02,740
project in an existing build

00:09:01,060 --> 00:09:05,019
configuration but we haven't created any

00:09:02,740 --> 00:09:08,740
so we're just gonna use its create mode

00:09:05,019 --> 00:09:27,310
so here we gave it a name GCC and we are

00:09:08,740 --> 00:09:32,250
using the C C++ compiler so yeah this is

00:09:27,310 --> 00:09:37,600
actually a good point to make the the

00:09:32,250 --> 00:09:40,360
workflow of PDF is made to match the

00:09:37,600 --> 00:09:43,000
workflow you'd normally or the

00:09:40,360 --> 00:09:45,160
development workflow that is dictated by

00:09:43,000 --> 00:09:46,630
a version control system normally you do

00:09:45,160 --> 00:09:48,850
things from your source directory of

00:09:46,630 --> 00:09:53,680
your project so build to kind of doesn't

00:09:48,850 --> 00:09:56,889
try to to change the way you do it okay

00:09:53,680 --> 00:10:00,370
so here's one for GCC let's do also for

00:09:56,889 --> 00:10:03,240
clang I have clang on my machine let's

00:10:00,370 --> 00:10:06,189
also do for interest sake to keep things

00:10:03,240 --> 00:10:08,050
interesting let's also do them in jelly

00:10:06,189 --> 00:10:14,620
so I mean here is a cross compiler it's

00:10:08,050 --> 00:10:17,560
GCC for Windows right so now if we look

00:10:14,620 --> 00:10:19,420
at the parent directory so they're not

00:10:17,560 --> 00:10:22,060
next our project we have the three

00:10:19,420 --> 00:10:28,149
directories appropriately named that

00:10:22,060 --> 00:10:30,399
contain our daughter George another way

00:10:28,149 --> 00:10:35,649
to check what we have which we build

00:10:30,399 --> 00:10:37,839
configurations we config list command so

00:10:35,649 --> 00:10:41,529
they're the stree again they're their

00:10:37,839 --> 00:10:43,269
names listed you might notice that the

00:10:41,529 --> 00:10:44,410
first build configuration is a little

00:10:43,269 --> 00:10:47,529
bit different a little bit different

00:10:44,410 --> 00:10:49,540
properties so you build two one one

00:10:47,529 --> 00:10:50,870
build configuration can be designated as

00:10:49,540 --> 00:10:53,660
the default and the

00:10:50,870 --> 00:10:55,640
has a couple of nice properties if

00:10:53,660 --> 00:10:57,730
you're on the build system in the source

00:10:55,640 --> 00:11:00,560
directory then it will automatically

00:10:57,730 --> 00:11:02,089
build in this default build

00:11:00,560 --> 00:11:04,460
configuration so you don't actually need

00:11:02,089 --> 00:11:06,950
to specify the directory explicitly of

00:11:04,460 --> 00:11:08,630
change directory and also some

00:11:06,950 --> 00:11:11,360
interesting targets um for example

00:11:08,630 --> 00:11:12,980
executables documentation test results

00:11:11,360 --> 00:11:15,140
they will automatically be back linked

00:11:12,980 --> 00:11:18,320
into your source directly so you can for

00:11:15,140 --> 00:11:22,370
example easily run them so let's see how

00:11:18,320 --> 00:11:28,339
that all works so they rerun the build

00:11:22,370 --> 00:11:31,070
system directly now source and if we

00:11:28,339 --> 00:11:35,150
look at the listing days our executable

00:11:31,070 --> 00:11:36,940
which is actually a symbolic link to do

00:11:35,150 --> 00:11:45,380
the executable in the default

00:11:36,940 --> 00:11:48,110
configuration or run it as promised it's

00:11:45,380 --> 00:11:50,990
a hollow world example it's also

00:11:48,110 --> 00:11:54,080
building our building all other build

00:11:50,990 --> 00:11:56,150
configurations that we've set up we can

00:11:54,080 --> 00:11:58,070
do it with a build system directly you

00:11:56,150 --> 00:12:00,560
just have to specify the long directory

00:11:58,070 --> 00:12:03,320
path explicitly a more convenient way to

00:12:00,560 --> 00:12:06,920
do it is the big-eared update command we

00:12:03,320 --> 00:12:08,630
can use the clang we can use names that

00:12:06,920 --> 00:12:11,990
we gave our build configurations for

00:12:08,630 --> 00:12:14,000
example clang or we can say update all

00:12:11,990 --> 00:12:16,970
build configurations quite a handy

00:12:14,000 --> 00:12:21,339
option so there the GCC was already up

00:12:16,970 --> 00:12:24,800
to date and the other two dated success

00:12:21,339 --> 00:12:28,640
okay so these are built infrastructure

00:12:24,800 --> 00:12:32,020
setup now we are ready to start changing

00:12:28,640 --> 00:12:34,940
our hello example text generate new IDs

00:12:32,020 --> 00:12:36,890
again there is our listing so we see the

00:12:34,940 --> 00:12:43,130
source file so without much thinking I

00:12:36,890 --> 00:12:45,860
just go and start messing with that so

00:12:43,130 --> 00:12:49,900
there is a hello world example font is a

00:12:45,860 --> 00:12:49,900
bit small right you cannot see all right

00:12:54,930 --> 00:12:58,300
[Music]

00:13:22,220 --> 00:13:28,760
okay so the hollow example is promised

00:13:24,830 --> 00:13:30,380
so I'm gonna replace it with a my UID

00:13:28,760 --> 00:13:33,740
generator as you can see attack very

00:13:30,380 --> 00:13:38,630
fast today I'm not gonna go into too

00:13:33,740 --> 00:13:40,520
much detail this type UID that has a

00:13:38,630 --> 00:13:42,440
generate function and as a string

00:13:40,520 --> 00:13:44,390
function it which is what I use in mind

00:13:42,440 --> 00:13:46,760
and then at the bottom there the gory

00:13:44,390 --> 00:13:51,320
details right how we actually do it on

00:13:46,760 --> 00:13:57,590
different platforms and so on okay so

00:13:51,320 --> 00:14:00,740
let's go try to build it run our build

00:13:57,590 --> 00:14:03,890
system that come files successfully but

00:14:00,740 --> 00:14:06,830
then the linking fails so turns out that

00:14:03,890 --> 00:14:08,900
the system function that we actually use

00:14:06,830 --> 00:14:11,150
on Linux generate you IDs

00:14:08,900 --> 00:14:13,310
it requires us to link a separate

00:14:11,150 --> 00:14:15,920
library this is a good example way a

00:14:13,310 --> 00:14:18,620
build system list model only takes us so

00:14:15,920 --> 00:14:20,810
far but we actually do need the build

00:14:18,620 --> 00:14:23,330
system need to link this library and

00:14:20,810 --> 00:14:28,790
only on this platform so we have to go

00:14:23,330 --> 00:14:31,850
look at this build file okay short

00:14:28,790 --> 00:14:34,850
little bit cryptic I'm not gonna go into

00:14:31,850 --> 00:14:36,880
detail on this day plays nice

00:14:34,850 --> 00:14:46,130
documentation if you are interested so

00:14:36,880 --> 00:14:47,750
I'm just gonna link the library so

00:14:46,130 --> 00:14:49,400
they'll be link it for Linux and I'm

00:14:47,750 --> 00:14:57,920
also anticipating some issues some

00:14:49,400 --> 00:15:03,290
windows are fix that as well so that

00:14:57,920 --> 00:15:09,250
worked human generates us than you is

00:15:03,290 --> 00:15:12,110
they even unique let's try to run tests

00:15:09,250 --> 00:15:13,550
that didn't work out very well well if

00:15:12,110 --> 00:15:15,770
you look at the diagnostic it kind of

00:15:13,550 --> 00:15:18,080
makes sense right if it was originally a

00:15:15,770 --> 00:15:23,420
hello world example now generates you

00:15:18,080 --> 00:15:25,610
IDs so that's me also feed step so there

00:15:23,420 --> 00:15:29,080
are two types of tests in go to the

00:15:25,610 --> 00:15:32,120
simple test name make an executable and

00:15:29,080 --> 00:15:33,680
run successfully and assumes the tests

00:15:32,120 --> 00:15:35,870
have passed

00:15:33,680 --> 00:15:38,450
they also scripted tests where you can

00:15:35,870 --> 00:15:40,370
analyze the input supply input analyze

00:15:38,450 --> 00:15:42,560
output with a regular expressions and so

00:15:40,370 --> 00:15:45,650
on and they also run in parallel quite

00:15:42,560 --> 00:15:47,930
nicely from from the same file so again

00:15:45,650 --> 00:15:51,050
there's a nice documentation for this

00:15:47,930 --> 00:15:52,880
I'm just gonna replace it so there are

00:15:51,050 --> 00:15:55,430
two tests first check that format is

00:15:52,880 --> 00:15:58,400
correct using a regular expression and

00:15:55,430 --> 00:16:02,810
the second one generates two new IDs and

00:15:58,400 --> 00:16:06,640
make sure that they are given just basic

00:16:02,810 --> 00:16:06,640
smog testing good enough for our needs

00:16:07,540 --> 00:16:14,660
this test succeeded just got a warning

00:16:10,910 --> 00:16:19,900
that the directory had some stuff in

00:16:14,660 --> 00:16:22,940
from the previous failed bill to test

00:16:19,900 --> 00:16:25,190
other build configurations we can use

00:16:22,940 --> 00:16:27,980
the similar to update there is the test

00:16:25,190 --> 00:16:30,850
command we can just do test all and test

00:16:27,980 --> 00:16:33,589
and all the configuration human even the

00:16:30,850 --> 00:16:35,330
windows test succeeded so if those of

00:16:33,589 --> 00:16:41,800
you are wondering this test is running

00:16:35,330 --> 00:16:44,360
on the wine emulation okay I think our

00:16:41,800 --> 00:16:48,470
little tool is in a good shape maybe we

00:16:44,360 --> 00:16:50,480
should commit it and push to github and

00:16:48,470 --> 00:17:11,329
before we do that though let's briefly

00:16:50,480 --> 00:17:14,120
talk about you referring to that test

00:17:11,329 --> 00:17:16,040
warning right well it does that it just

00:17:14,120 --> 00:17:19,240
warns you that there was some stuff

00:17:16,040 --> 00:17:19,240
there for safety

00:17:22,120 --> 00:17:27,140
okay so versions right so before we

00:17:25,640 --> 00:17:28,510
actually publish anything let's briefly

00:17:27,140 --> 00:17:30,830
talk about learning

00:17:28,510 --> 00:17:33,260
submersions our signaling mechanism

00:17:30,830 --> 00:17:35,210
right they tell our users what kind of

00:17:33,260 --> 00:17:37,220
changes they can expect to find in each

00:17:35,210 --> 00:17:39,309
release I'm sure most of you are

00:17:37,220 --> 00:17:41,150
familiar with versioning and the

00:17:39,309 --> 00:17:44,060
development world pretty much

00:17:41,150 --> 00:17:45,860
standardized on semantic versioning yes

00:17:44,060 --> 00:17:46,820
it's not perfect yes it has issues but

00:17:45,860 --> 00:17:48,769
you know

00:17:46,820 --> 00:17:51,320
seems to be the tool that does the job

00:17:48,769 --> 00:17:53,750
most of the time so the different ways

00:17:51,320 --> 00:17:56,299
to map it to C++ we have binary

00:17:53,750 --> 00:17:58,610
compatibility PF source compatibility

00:17:56,299 --> 00:18:01,159
the mapping that I prefer in the Gambian

00:17:58,610 --> 00:18:03,889
is to reserve patch versions for binary

00:18:01,159 --> 00:18:07,370
compatible changes mostly it's specific

00:18:03,889 --> 00:18:09,409
bug fixes use minor versions for source

00:18:07,370 --> 00:18:11,539
compatible changes and you know if

00:18:09,409 --> 00:18:13,549
you're not sure what what exactly that

00:18:11,539 --> 00:18:15,830
the effect of your changes just be safe

00:18:13,549 --> 00:18:19,850
and increment major hopefully there will

00:18:15,830 --> 00:18:23,029
be tools that will actually suggest or

00:18:19,850 --> 00:18:24,980
check for us which component we amend so

00:18:23,029 --> 00:18:30,169
if anyone wants to work on such a tool I

00:18:24,980 --> 00:18:32,539
would gladly music okay so easy so far

00:18:30,169 --> 00:18:35,299
I'm sure nothing I haven't told anything

00:18:32,539 --> 00:18:38,710
new to most of you so they are two

00:18:35,299 --> 00:18:41,929
releases right what happens in between

00:18:38,710 --> 00:18:44,960
what what if we want to publish an alpha

00:18:41,929 --> 00:18:47,210
beta release of our users test well it's

00:18:44,960 --> 00:18:49,159
actually handled by semantic versioning

00:18:47,210 --> 00:18:53,919
so they can be a pre-release component

00:18:49,159 --> 00:18:57,139
so there we have our first alpha ins

00:18:53,919 --> 00:18:58,850
okay what what happens in in between

00:18:57,139 --> 00:19:02,059
what what if we want to publish our

00:18:58,850 --> 00:19:04,909
version to our CI server or some of our

00:19:02,059 --> 00:19:06,500
users wants to test specific commits for

00:19:04,909 --> 00:19:09,230
example we implemented the feature for

00:19:06,500 --> 00:19:11,149
them and said hey test it for me how do

00:19:09,230 --> 00:19:13,279
we communicate we can specify a commit

00:19:11,149 --> 00:19:14,990
ID but that's not exactly the same you

00:19:13,279 --> 00:19:17,600
know if you if you don't change a

00:19:14,990 --> 00:19:20,750
version for each commit you might have

00:19:17,600 --> 00:19:22,759
the same version that signifies multiple

00:19:20,750 --> 00:19:25,250
states of your project and let's

00:19:22,759 --> 00:19:26,960
actually can be painful so in build two

00:19:25,250 --> 00:19:30,019
what we have it is called continuous

00:19:26,960 --> 00:19:32,889
version so in build to every commit of

00:19:30,019 --> 00:19:36,320
your project is assigned a unique

00:19:32,889 --> 00:19:38,149
properly ordered version so this is what

00:19:36,320 --> 00:19:41,389
it looks like so we for releases

00:19:38,149 --> 00:19:46,299
pre-releases nothing new here so those

00:19:41,389 --> 00:19:49,309
you manage yourself but in between four

00:19:46,299 --> 00:19:51,440
unreleased commits the bill to

00:19:49,309 --> 00:19:53,210
incorporation the version control system

00:19:51,440 --> 00:19:54,980
automatically assigns you a snapshot

00:19:53,210 --> 00:19:57,200
version so this is what it looks like

00:19:54,980 --> 00:20:00,690
for need for example so it's a commit

00:19:57,200 --> 00:20:03,550
timestamp plus and everybody that can

00:20:00,690 --> 00:20:06,370
sexually see how it works in reality

00:20:03,550 --> 00:20:09,520
this is all theory so if we another

00:20:06,370 --> 00:20:11,800
handy command status we're on bill yep

00:20:09,520 --> 00:20:14,710
status tells us what is the status of

00:20:11,800 --> 00:20:16,720
our project in in a build configuration

00:20:14,710 --> 00:20:18,070
in this case it's the default build

00:20:16,720 --> 00:20:21,490
configuration because we haven't

00:20:18,070 --> 00:20:24,490
specified one so this version doesn't

00:20:21,490 --> 00:20:26,230
look exactly as what I've shown in a

00:20:24,490 --> 00:20:27,880
slide the reason for that is because we

00:20:26,230 --> 00:20:29,110
don't have any comments right so if you

00:20:27,880 --> 00:20:34,270
don't have any commits you get the

00:20:29,110 --> 00:20:40,210
SPECIAL UNIX epoch word so let's go

00:20:34,270 --> 00:20:45,010
ahead and commit to commit and run

00:20:40,210 --> 00:20:46,570
status again okay so the the configured

00:20:45,010 --> 00:20:49,030
version is still the same but now we

00:20:46,570 --> 00:20:51,280
have a new available version so this is

00:20:49,030 --> 00:20:53,920
the example of where the build system

00:20:51,280 --> 00:20:57,930
noticed okay it queried the version

00:20:53,920 --> 00:21:00,070
control system you keep in this case and

00:20:57,930 --> 00:21:02,320
so that there's a new commit and it

00:21:00,070 --> 00:21:05,140
assigned a new world for us automatic so

00:21:02,320 --> 00:21:07,030
this is important I believe for this to

00:21:05,140 --> 00:21:11,260
work practically it has to be automatic

00:21:07,030 --> 00:21:15,210
you cannot be going and modifying your

00:21:11,260 --> 00:21:15,210
version file every time you make a can

00:21:17,490 --> 00:21:24,130
okay so if we're on the build system now

00:21:21,090 --> 00:21:26,020
to update our project the last line says

00:21:24,130 --> 00:21:27,580
that everything is up to date which

00:21:26,020 --> 00:21:30,310
makes sense we haven't really change

00:21:27,580 --> 00:21:33,130
anything first two lines actually what I

00:21:30,310 --> 00:21:34,870
want to draw your attention to what we

00:21:33,130 --> 00:21:37,150
have here is a automatic synchronization

00:21:34,870 --> 00:21:40,720
on build system invocation

00:21:37,150 --> 00:21:43,600
so in bill two if a metadata about of a

00:21:40,720 --> 00:21:47,050
project for example its version or set

00:21:43,600 --> 00:21:49,710
of dependencies changed then every time

00:21:47,050 --> 00:21:52,180
you invoke the build system this this

00:21:49,710 --> 00:21:54,730
changes are detected and automatically

00:21:52,180 --> 00:21:56,740
synchronized with a build configuration

00:21:54,730 --> 00:21:59,830
where you are building so this might not

00:21:56,740 --> 00:22:02,170
sound look very interesting after all

00:21:59,830 --> 00:22:03,910
you know has nothing changed but we'll

00:22:02,170 --> 00:22:08,620
see in a moment where it does make quite

00:22:03,910 --> 00:22:11,130
a big difference okay so we've made a

00:22:08,620 --> 00:22:14,790
commit I'm gonna go and create

00:22:11,130 --> 00:22:16,410
a repository on github and my personal

00:22:14,790 --> 00:22:17,010
account I'm sure most of you have done

00:22:16,410 --> 00:22:22,320
that before

00:22:17,010 --> 00:22:28,680
thousands of times so there is a new

00:22:22,320 --> 00:22:42,390
repository I'm going to go and add the

00:22:28,680 --> 00:22:43,340
remote and push my changes okay there

00:22:42,390 --> 00:22:49,940
they are

00:22:43,340 --> 00:22:52,350
nothing I hope for most of you so now

00:22:49,940 --> 00:22:57,690
little utilities published people can

00:22:52,350 --> 00:22:59,130
use it there is however one issue so we

00:22:57,690 --> 00:23:00,870
kind of called it portable but we

00:22:59,130 --> 00:23:03,000
haven't really tested on that many

00:23:00,870 --> 00:23:07,620
platforms and compiler combinations that

00:23:03,000 --> 00:23:11,010
we tested on Linux and we also tried it

00:23:07,620 --> 00:23:13,110
but this is really with me GV CCC for

00:23:11,010 --> 00:23:15,360
Windows ran it on the wine emulation but

00:23:13,110 --> 00:23:17,340
they're also Mac OS there's also Visual

00:23:15,360 --> 00:23:19,620
Studio on Windows there are also things

00:23:17,340 --> 00:23:22,140
like FreeBSD and so on we could be good

00:23:19,620 --> 00:23:24,240
testers manually right we can do some

00:23:22,140 --> 00:23:27,060
virtual machines for Mac OS you would

00:23:24,240 --> 00:23:29,930
need real hardware but that would be

00:23:27,060 --> 00:23:32,600
quite painful and tedious and especially

00:23:29,930 --> 00:23:35,370
it would be unfortunate if we don't

00:23:32,600 --> 00:23:37,860
ourselves key about this platform so I

00:23:35,370 --> 00:23:40,470
don't key about you know Mac OS or three

00:23:37,860 --> 00:23:41,130
BSD I probably not gonna do if it's

00:23:40,470 --> 00:23:42,810
painful

00:23:41,130 --> 00:23:46,380
so you build - we actually have a better

00:23:42,810 --> 00:23:49,530
way to do it so we know to be run a

00:23:46,380 --> 00:23:56,280
public CI service for open source

00:23:49,530 --> 00:23:59,700
projects so we can actually test our our

00:23:56,280 --> 00:24:01,440
project on all the major platforms and

00:23:59,700 --> 00:24:03,900
compilers without actually leaving our

00:24:01,440 --> 00:24:05,580
preferred development environment so

00:24:03,900 --> 00:24:08,340
let's see how that works so we use the

00:24:05,580 --> 00:24:11,850
BBFC I command so what it does it sends

00:24:08,340 --> 00:24:14,610
the this specific commit the specific

00:24:11,850 --> 00:24:18,030
version of our project for remote

00:24:14,610 --> 00:24:22,890
testing to the CI service let's say

00:24:18,030 --> 00:24:27,030
years here so in return we get a link

00:24:22,890 --> 00:24:34,530
a URL which we can go and take a look at

00:24:27,030 --> 00:24:37,680
the build results okay so it's already

00:24:34,530 --> 00:24:41,970
started building let me refresh the page

00:24:37,680 --> 00:24:50,730
a couple of times we'll see more builds

00:24:41,970 --> 00:24:52,260
hopefully so we can go take a look at

00:24:50,730 --> 00:24:56,580
what build configurations are available

00:24:52,260 --> 00:25:00,990
so currently we offer basically all the

00:24:56,580 --> 00:25:04,380
major mainstream platforms Linux Windows

00:25:00,990 --> 00:25:07,170
PC and Mac OS and the latest two

00:25:04,380 --> 00:25:09,990
versions of main compilers for each of

00:25:07,170 --> 00:25:12,120
them so Visual Studio clang GCC we also

00:25:09,990 --> 00:25:15,440
have some interesting combinations for

00:25:12,120 --> 00:25:18,330
example a clang with lip c++ on Linux or

00:25:15,440 --> 00:25:21,660
homebrew GCC on Mac OS and there is a

00:25:18,330 --> 00:25:24,000
mean GB o so I think this gives you a

00:25:21,660 --> 00:25:33,990
pretty good coverage for general-purpose

00:25:24,000 --> 00:25:39,170
platforms and compilers sorry not yet

00:25:33,990 --> 00:25:42,030
maybe in the fusion let's go back to our

00:25:39,170 --> 00:25:45,270
build so they'll actually 12 build

00:25:42,030 --> 00:25:47,460
configurations in this so you can see

00:25:45,270 --> 00:25:50,040
some some of them I still building some

00:25:47,460 --> 00:25:52,350
of them have finished solid let's take a

00:25:50,040 --> 00:25:54,710
look okay there's actually an error for

00:25:52,350 --> 00:25:57,600
Linux on Linux which is a bit surprising

00:25:54,710 --> 00:26:00,330
you can test it was our development

00:25:57,600 --> 00:26:03,230
machine so if we go look at the logs so

00:26:00,330 --> 00:26:06,000
what happens is the here that we include

00:26:03,230 --> 00:26:08,360
it actually comes from a separate

00:26:06,000 --> 00:26:11,610
package that is not installed by default

00:26:08,360 --> 00:26:13,980
so the platform that we probably the

00:26:11,610 --> 00:26:19,010
most sure but turns out to be actually

00:26:13,980 --> 00:26:22,320
not in not such a great shape oh well

00:26:19,010 --> 00:26:24,480
some surprises right let's take a look

00:26:22,320 --> 00:26:26,340
what else is there well the pleasant

00:26:24,480 --> 00:26:30,930
surprises that it works out nicely on

00:26:26,340 --> 00:26:37,920
Mac OS everything says Philippe what

00:26:30,930 --> 00:26:40,080
else the m3 BSD also failed we go look

00:26:37,920 --> 00:26:41,970
inside the same story except here we

00:26:40,080 --> 00:26:43,200
don't actually have a patch you know

00:26:41,970 --> 00:26:45,150
this this here they're just not

00:26:43,200 --> 00:26:47,700
available on on previously there's a

00:26:45,150 --> 00:26:52,290
completely different API that we use for

00:26:47,700 --> 00:27:01,530
generating new IDs let's also take a

00:26:52,290 --> 00:27:03,540
look at Windows what we're all studio ok

00:27:01,530 --> 00:27:07,470
so that looks good so there is a bit of

00:27:03,540 --> 00:27:12,690
studio 14 build successfully we wait a

00:27:07,470 --> 00:27:15,390
little bit longer yeah there we rose to

00:27:12,690 --> 00:27:17,910
the 15 also build successful all right

00:27:15,390 --> 00:27:20,670
somewhat a Miss mixbag right the

00:27:17,910 --> 00:27:25,520
platform whether you're masha but turned

00:27:20,670 --> 00:27:28,830
out to be pretty bad shape but otherwise

00:27:25,520 --> 00:27:32,730
some other little surprises and I think

00:27:28,830 --> 00:27:37,230
that's okay I think if we if we adopt

00:27:32,730 --> 00:27:39,990
this organic development mindset it's

00:27:37,230 --> 00:27:42,240
fine a published my project someone can

00:27:39,990 --> 00:27:45,810
come and if they're interested they can

00:27:42,240 --> 00:27:48,270
come and help and improve well speaking

00:27:45,810 --> 00:27:52,200
of help let's say we someone saw our

00:27:48,270 --> 00:27:54,150
project on github and they want to join

00:27:52,200 --> 00:27:57,740
the project you know help us develop it

00:27:54,150 --> 00:28:02,100
maybe fix some issues so one of the key

00:27:57,740 --> 00:28:04,290
goals of build 2 is to provide a uniform

00:28:02,100 --> 00:28:08,310
interface and consistent behavior across

00:28:04,290 --> 00:28:10,710
all the platforms and compilers so let's

00:28:08,310 --> 00:28:13,550
see how that actually translates to

00:28:10,710 --> 00:28:15,510
reality so here let's say our

00:28:13,550 --> 00:28:18,540
collaborator is actually on Windows

00:28:15,510 --> 00:28:22,140
right they're using a Windows for

00:28:18,540 --> 00:28:23,580
development let's see how difficult it

00:28:22,140 --> 00:28:26,370
is to actually for them to get started

00:28:23,580 --> 00:28:29,700
so this is the proper build you know git

00:28:26,370 --> 00:28:32,070
clone and now what question I want to

00:28:29,700 --> 00:28:34,100
clone and get to happiness as quickly as

00:28:32,070 --> 00:28:34,100
possible

00:28:36,020 --> 00:28:43,350
there is my clone so again we use video

00:28:40,650 --> 00:28:45,410
pin it to initialize

00:28:43,350 --> 00:28:51,200
and create configuration all in

00:28:45,410 --> 00:28:51,200
you just find it in history there it is

00:29:00,690 --> 00:29:07,099
and they did you can even try to run it

00:29:07,429 --> 00:29:16,379
generates even the test all right so

00:29:14,340 --> 00:29:20,629
that wasn't I think too painful I

00:29:16,379 --> 00:29:20,629
probably took me 30 seconds to get going

00:29:29,770 --> 00:29:35,570
okay so I think then not a bad shape

00:29:33,650 --> 00:29:38,510
some platforms don't work but hopefully

00:29:35,570 --> 00:29:41,390
someone will help fix us step so now

00:29:38,510 --> 00:29:43,640
let's let's say we want to generate UI

00:29:41,390 --> 00:29:45,980
this another project of us right so now

00:29:43,640 --> 00:29:47,540
it's that part where we take this

00:29:45,980 --> 00:29:49,730
functionality and put it in the library

00:29:47,540 --> 00:29:51,920
and this is I think is a critical part

00:29:49,730 --> 00:29:54,860
again to achieving these thousands of

00:29:51,920 --> 00:29:57,380
packages you know and making everyone a

00:29:54,860 --> 00:29:58,840
library develop will developer if this

00:29:57,380 --> 00:30:01,430
is at five ten minutes

00:29:58,840 --> 00:30:04,010
process fairly painless and frictionless

00:30:01,430 --> 00:30:05,630
then you know I might create couple of

00:30:04,010 --> 00:30:09,200
libraries so there's no issue with that

00:30:05,630 --> 00:30:13,190
but if instead it is now it's a

00:30:09,200 --> 00:30:16,550
multi-day painful process of testing

00:30:13,190 --> 00:30:18,860
things in different in different places

00:30:16,550 --> 00:30:20,810
different ways and I might as well just

00:30:18,860 --> 00:30:23,030
duplicate the code yeah there will be

00:30:20,810 --> 00:30:24,710
maintenance headache but you know it's

00:30:23,030 --> 00:30:28,520
gonna be later it's not gonna be now two

00:30:24,710 --> 00:30:34,490
days of pain so let's see how that all

00:30:28,520 --> 00:30:38,060
works out again we use the new PDF new

00:30:34,490 --> 00:30:40,690
comment to create new project instead

00:30:38,060 --> 00:30:43,490
now even executable we say it's a light

00:30:40,690 --> 00:30:46,100
so the type change to library I'm

00:30:43,490 --> 00:30:49,400
calling it lip study UID so I'm working

00:30:46,100 --> 00:30:52,570
on a family of small libraries called

00:30:49,400 --> 00:30:55,790
lip stud the name is a play on the

00:30:52,570 --> 00:30:57,560
pronunciation of namespace STD so the

00:30:55,790 --> 00:30:59,090
joke here is that most of this should

00:30:57,560 --> 00:31:04,190
have been in the standard library long

00:30:59,090 --> 00:31:07,790
ago but let's not go there so they we

00:31:04,190 --> 00:31:11,210
ran it if you look at out directory

00:31:07,790 --> 00:31:13,730
there's our executable right there's the

00:31:11,210 --> 00:31:19,550
3 build configurations and there is now

00:31:13,730 --> 00:31:21,920
our library and if we look inside again

00:31:19,550 --> 00:31:24,050
it's a hollow world library that is

00:31:21,920 --> 00:31:26,260
ready for us to be at customize to suit

00:31:24,050 --> 00:31:29,390
our needs a little bit more

00:31:26,260 --> 00:31:32,570
infrastructure there but otherwise it's

00:31:29,390 --> 00:31:35,059
pretty similar in suitable we always

00:31:32,570 --> 00:31:37,769
start modifying it let's

00:31:35,059 --> 00:31:39,720
again setup build infrastructure this

00:31:37,769 --> 00:31:41,489
time we're just gonna reuse our existing

00:31:39,720 --> 00:31:44,879
build configuration so there's no reason

00:31:41,489 --> 00:31:47,909
for us to create new ones so we're gonna

00:31:44,879 --> 00:31:57,419
use the add mode of BDD up in it so

00:31:47,909 --> 00:31:58,799
there is GCC this clang and this just to

00:31:57,419 --> 00:32:04,169
make sure everything is good

00:31:58,799 --> 00:32:06,210
that's buildin run everything in all

00:32:04,169 --> 00:32:10,409
build configurations I'd be the up test

00:32:06,210 --> 00:32:13,039
oh oh good ok so now is the point where

00:32:10,409 --> 00:32:16,019
we take the functionality from our

00:32:13,039 --> 00:32:18,840
executable and put it into a library I'm

00:32:16,019 --> 00:32:23,970
not gonna do it live I'm just gonna copy

00:32:18,840 --> 00:32:28,379
that code over it turns out was somewhat

00:32:23,970 --> 00:32:30,809
surprising to me that generating new

00:32:28,379 --> 00:32:32,970
idea for tably on different platforms is

00:32:30,809 --> 00:32:33,899
actually more difficult than one might

00:32:32,970 --> 00:32:37,200
think

00:32:33,899 --> 00:32:40,859
in fact in many platforms you might end

00:32:37,200 --> 00:32:46,320
up with a non-unique UUID p-- so we need

00:32:40,859 --> 00:32:49,109
to handle that situation take a look so

00:32:46,320 --> 00:32:55,440
there is our source files you can see

00:32:49,109 --> 00:32:58,789
there's some platform-specific source

00:32:55,440 --> 00:33:05,460
files this Linux one maybe hopefully

00:32:58,789 --> 00:33:14,299
miraculously fixed our Linux issue just

00:33:05,460 --> 00:33:20,690
again test locally ok all work is good

00:33:14,299 --> 00:33:20,690
I'm going to now commit it

00:33:26,480 --> 00:33:31,200
I've already created a repository on

00:33:29,039 --> 00:33:35,700
github so I'm just gonna add the remote

00:33:31,200 --> 00:33:39,890
quickly push it and we're gonna see I it

00:33:35,700 --> 00:33:39,890
again to see what's going on

00:33:51,120 --> 00:33:58,320
so again sending it for remote testing

00:33:53,749 --> 00:34:13,409
getting link back let's open it in a

00:33:58,320 --> 00:34:15,510
browser okay so the build then talk

00:34:13,409 --> 00:34:19,609
while we are waiting will take a few

00:34:15,510 --> 00:34:22,500
minutes let's go and start adjusting our

00:34:19,609 --> 00:34:24,119
genui the utility to actually use the

00:34:22,500 --> 00:34:25,560
line right now so we just copied the

00:34:24,119 --> 00:34:27,869
functionality doesn't make sense to have

00:34:25,560 --> 00:34:29,639
it in two places we're just gonna add a

00:34:27,869 --> 00:34:38,790
dependency on the library instead of

00:34:29,639 --> 00:34:39,300
having it there then these are listing

00:34:38,790 --> 00:34:42,300
again

00:34:39,300 --> 00:34:49,159
so first place let's do let's start with

00:34:42,300 --> 00:34:52,299
a source file so this one I'm gonna do

00:34:49,159 --> 00:34:52,299
[Music]

00:34:58,560 --> 00:35:06,640
leave the name space stud but otherwise

00:35:02,110 --> 00:35:09,160
the same interface and I'm gonna remove

00:35:06,640 --> 00:35:12,610
the gory details so now our little

00:35:09,160 --> 00:35:14,230
utility is nice and clean all right okay

00:35:12,610 --> 00:35:16,540
so here they include it and we called up

00:35:14,230 --> 00:35:22,150
all the functions so we need to link the

00:35:16,540 --> 00:35:23,890
library somewhere in our build file the

00:35:22,150 --> 00:35:26,580
Giri the dual file it actually includes

00:35:23,890 --> 00:35:29,320
some commented out infrastructure for

00:35:26,580 --> 00:35:32,980
importing libraries from other projects

00:35:29,320 --> 00:35:41,980
and linking them to our executable so

00:35:32,980 --> 00:35:45,340
just gonna use them so this is the

00:35:41,980 --> 00:35:47,200
important assignment to this lips

00:35:45,340 --> 00:35:50,910
variable and they it's listed as a

00:35:47,200 --> 00:35:53,320
prerequisite of our executable so again

00:35:50,910 --> 00:35:55,810
nice thing is that we can get rid of

00:35:53,320 --> 00:35:58,000
this at least explicit library linking

00:35:55,810 --> 00:36:01,750
so now our build file is nice and clean

00:35:58,000 --> 00:36:16,860
and simple again okay so here they

00:36:01,750 --> 00:36:22,710
include that library linked include yeah

00:36:16,860 --> 00:36:25,060
this is just for the executable again

00:36:22,710 --> 00:36:29,440
documented and explained the rationale

00:36:25,060 --> 00:36:31,780
in documentation okay so here included

00:36:29,440 --> 00:36:34,840
library linked where that we will our

00:36:31,780 --> 00:36:38,860
library come from well natural place

00:36:34,840 --> 00:36:42,040
from a package we're gonna go and list

00:36:38,860 --> 00:36:45,910
the dependency on a package the place we

00:36:42,040 --> 00:36:48,280
do it is in the manifest file so many

00:36:45,910 --> 00:36:51,870
peas describes your build system project

00:36:48,280 --> 00:36:54,820
as a package let's at least name version

00:36:51,870 --> 00:36:58,740
some other meta information license for

00:36:54,820 --> 00:37:02,170
example which we can fix while at it

00:36:58,740 --> 00:37:04,930
today is again commented out suggestion

00:37:02,170 --> 00:37:07,510
how we might want to do that which is

00:37:04,930 --> 00:37:09,720
gonna follow along we're gonna remove

00:37:07,510 --> 00:37:11,670
the version constraint for now

00:37:09,720 --> 00:37:14,130
get back to that later okay so here

00:37:11,670 --> 00:37:17,150
included library link package dependency

00:37:14,130 --> 00:37:20,040
setup where do packages come from

00:37:17,150 --> 00:37:21,990
package II positives right so that we

00:37:20,040 --> 00:37:25,230
specify in the repositories that

00:37:21,990 --> 00:37:28,440
manifest file again a couple of

00:37:25,230 --> 00:37:30,990
commented suggestions one of them is a

00:37:28,440 --> 00:37:35,160
looks like a git repository so we're

00:37:30,990 --> 00:37:39,359
just gonna play along we'll just put a

00:37:35,160 --> 00:37:43,380
github repository of our lips turn your

00:37:39,359 --> 00:37:47,270
ID and you know let's use the version

00:37:43,380 --> 00:37:52,250
that are available from master for now

00:37:47,270 --> 00:37:55,500
okay so some of you even even to me

00:37:52,250 --> 00:37:58,680
having to specify this in four different

00:37:55,500 --> 00:38:00,330
places might sound bizarre but there's

00:37:58,680 --> 00:38:05,190
actually good reasons for that they

00:38:00,330 --> 00:38:07,320
quite quite the technical but in a

00:38:05,190 --> 00:38:09,840
nutshell its flexibility and not having

00:38:07,320 --> 00:38:12,570
to repeat yourself in multiple places

00:38:09,840 --> 00:38:14,609
but again it's all explained quite not

00:38:12,570 --> 00:38:19,859
quite well in the introduction is that

00:38:14,609 --> 00:38:24,740
and so as I think that recurring theme

00:38:19,859 --> 00:38:24,740
you know in in C++ we have special needs

00:38:25,130 --> 00:38:33,630
okay so they we've converted our

00:38:29,130 --> 00:38:36,990
projects to use the library let's go

00:38:33,630 --> 00:38:38,640
take a look at our build results so they

00:38:36,990 --> 00:38:40,770
are all twelve build configurations

00:38:38,640 --> 00:38:41,369
built and they are all green so even the

00:38:40,770 --> 00:38:44,000
linux

00:38:41,369 --> 00:38:46,080
issue miraculously disappeared somehow

00:38:44,000 --> 00:38:47,550
they're actually the fix is actually

00:38:46,080 --> 00:38:50,190
quite interesting so if you are curious

00:38:47,550 --> 00:38:52,830
you're welcome to go take a look at it

00:38:50,190 --> 00:38:55,080
all find me after the talk now tell you

00:38:52,830 --> 00:38:59,760
how it's done okay so our library is

00:38:55,080 --> 00:39:03,000
actually in quite a nice shape which

00:38:59,760 --> 00:39:07,640
means that our utility will also be nice

00:39:03,000 --> 00:39:10,380
and portable as promised let's try to

00:39:07,640 --> 00:39:13,140
build it there's quite a lot of output

00:39:10,380 --> 00:39:15,150
so again outer synchronization kicks in

00:39:13,140 --> 00:39:17,520
right we've added a new dependency met

00:39:15,150 --> 00:39:19,200
information about the project changed so

00:39:17,520 --> 00:39:21,410
it's automatically synchronized with the

00:39:19,200 --> 00:39:23,640
build configuration that we are built

00:39:21,410 --> 00:39:25,650
they can see the packaging information

00:39:23,640 --> 00:39:28,310
is being finished things got upgraded

00:39:25,650 --> 00:39:32,670
and so on

00:39:28,310 --> 00:39:34,410
let's also run tests in all other build

00:39:32,670 --> 00:39:37,290
configurations so now that we have a

00:39:34,410 --> 00:39:39,960
dependency we can run tests for about

00:39:37,290 --> 00:39:42,180
own power on utility but it might

00:39:39,960 --> 00:39:44,280
actually make sense to run tests for our

00:39:42,180 --> 00:39:47,220
dependencies as well seeing that we are

00:39:44,280 --> 00:39:49,340
using them so we call it deep testing so

00:39:47,220 --> 00:39:52,380
all we have to do is just add the

00:39:49,340 --> 00:39:58,860
recursive statistic cursive Lea option

00:39:52,380 --> 00:40:06,690
so there you can see both tests for the

00:39:58,860 --> 00:40:09,240
library as well as for the utility also

00:40:06,690 --> 00:40:11,160
quite a handy thing when things are

00:40:09,240 --> 00:40:14,280
nicely integrated we can run tests on

00:40:11,160 --> 00:40:16,880
all the dependencies that that's coming

00:40:14,280 --> 00:40:16,880
and push

00:40:29,490 --> 00:40:36,060
I'm also gonna start the CI process just

00:40:33,600 --> 00:40:43,550
to make sure everything is in good shape

00:40:36,060 --> 00:40:46,950
that is that I don't need to worry about

00:40:43,550 --> 00:40:49,500
will the CI process find my dependencies

00:40:46,950 --> 00:40:51,810
and souls is all taken care of

00:40:49,500 --> 00:40:55,010
so there the build started again while

00:40:51,810 --> 00:40:58,680
we wait let's go see how windows

00:40:55,010 --> 00:40:59,970
collaborator is doing now this is a good

00:40:58,680 --> 00:41:02,010
example of where what the

00:40:59,970 --> 00:41:03,750
synchronization is important it would be

00:41:02,010 --> 00:41:06,030
really painful if I have to keep track

00:41:03,750 --> 00:41:08,130
of you know what new what chick what

00:41:06,030 --> 00:41:10,830
changes to the meta state of a project

00:41:08,130 --> 00:41:13,500
happen each on each pool and do

00:41:10,830 --> 00:41:17,820
something manually so until - all you

00:41:13,500 --> 00:41:19,170
have to do is cool and build we don't

00:41:17,820 --> 00:41:21,119
have to worry about it of the

00:41:19,170 --> 00:41:22,700
synchronization kicks in so in this case

00:41:21,119 --> 00:41:26,310
we're actually getting a library

00:41:22,700 --> 00:41:29,580
installed and built downloaded built in

00:41:26,310 --> 00:41:37,170
and stopped but not installed but to be

00:41:29,580 --> 00:41:43,369
used by our own so again this process

00:41:37,170 --> 00:41:43,369
was rather painless for our friend here

00:41:44,090 --> 00:41:50,070
okay let's take a look at our CI so if

00:41:48,330 --> 00:41:54,590
we wait long enough they will all be

00:41:50,070 --> 00:41:58,310
green they're FreeBSD is happy now

00:41:54,590 --> 00:42:02,310
Linux as well so now we actually have a

00:41:58,310 --> 00:42:09,960
fairly portable UID generator and a

00:42:02,310 --> 00:42:15,720
library okay so so we published a

00:42:09,960 --> 00:42:19,220
library to our github so how how will

00:42:15,720 --> 00:42:21,720
people find it some potential users

00:42:19,220 --> 00:42:24,270
again you can go to github and search

00:42:21,720 --> 00:42:26,369
for UID library or your generator you'll

00:42:24,270 --> 00:42:31,020
get back a couple under results most of

00:42:26,369 --> 00:42:32,460
them uh not even C++ and I think this is

00:42:31,020 --> 00:42:37,080
a good example it will actually miss the

00:42:32,460 --> 00:42:39,090
most promising promising option though

00:42:37,080 --> 00:42:41,280
before we just publish this library

00:42:39,090 --> 00:42:43,080
which is boosted

00:42:41,280 --> 00:42:46,260
go to github you won't find moose day

00:42:43,080 --> 00:42:48,630
and I think experience of other

00:42:46,260 --> 00:42:50,340
languages that I hear there was in this

00:42:48,630 --> 00:42:52,500
on this field like Ross for example

00:42:50,340 --> 00:42:55,920
shows that we really it's really useful

00:42:52,500 --> 00:42:58,800
to have a central repository of packages

00:42:55,920 --> 00:43:00,990
and archive repository of packages in

00:42:58,800 --> 00:43:03,180
fact it's quite useful to have both they

00:43:00,990 --> 00:43:04,710
in a sense complement each other so it's

00:43:03,180 --> 00:43:06,960
nice to have version control based

00:43:04,710 --> 00:43:09,000
repositories and archive based

00:43:06,960 --> 00:43:12,120
repositories for your package manager

00:43:09,000 --> 00:43:14,670
so Borden catalog basically posters are

00:43:12,120 --> 00:43:17,660
great for develop tried very well to set

00:43:14,670 --> 00:43:20,280
up 30 seconds on github they also your

00:43:17,660 --> 00:43:22,050
project repository at least in case of

00:43:20,280 --> 00:43:23,700
build two is normally your package

00:43:22,050 --> 00:43:25,980
repository you don't actually have to

00:43:23,700 --> 00:43:28,770
pay anything else and this is exactly

00:43:25,980 --> 00:43:30,720
how we we've done it with our utility

00:43:28,770 --> 00:43:33,390
and a library right remember when I put

00:43:30,720 --> 00:43:36,300
this link to github URL in the

00:43:33,390 --> 00:43:39,570
repositories manifest file I use the lip

00:43:36,300 --> 00:43:42,030
study ID git repository as its package

00:43:39,570 --> 00:43:44,370
deposited so very convenient

00:43:42,030 --> 00:43:46,500
there are problems with version control

00:43:44,370 --> 00:43:49,710
based the positives as mentioned they're

00:43:46,500 --> 00:43:52,620
hardly packages a hard to discover you

00:43:49,710 --> 00:43:54,750
know this github it loved all other

00:43:52,620 --> 00:43:57,420
different hosting places so you have to

00:43:54,750 --> 00:44:01,170
go look at all of them it also not very

00:43:57,420 --> 00:44:03,180
reliable package users might decide I'm

00:44:01,170 --> 00:44:06,420
going to delete this repository and you

00:44:03,180 --> 00:44:08,670
are your problem depends on it also

00:44:06,420 --> 00:44:12,750
hosting companies you know can go out of

00:44:08,670 --> 00:44:14,820
business can get acquired version

00:44:12,750 --> 00:44:17,310
control repositories are also not as

00:44:14,820 --> 00:44:20,000
secure as our card base deposit this can

00:44:17,310 --> 00:44:23,250
be case of build two repositories

00:44:20,000 --> 00:44:24,990
authenticated and packages in the

00:44:23,250 --> 00:44:28,320
repository assigned so it's pretty

00:44:24,990 --> 00:44:29,900
difficult to tamper with we'll see an

00:44:28,320 --> 00:44:32,730
example of it a bit

00:44:29,900 --> 00:44:35,940
finally version control reports this a

00:44:32,730 --> 00:44:38,850
pretty slow for clearing the list of

00:44:35,940 --> 00:44:41,760
available packages you in most cases

00:44:38,850 --> 00:44:43,530
have to clone actual content and this is

00:44:41,760 --> 00:44:45,780
especially becomes painful the veneer

00:44:43,530 --> 00:44:47,370
for example a hundred dependencies each

00:44:45,780 --> 00:44:49,860
leaving in its own package report

00:44:47,370 --> 00:44:52,910
student and spend 15 minutes just

00:44:49,860 --> 00:44:54,800
clearing the black package information

00:44:52,910 --> 00:44:58,370
okay so

00:44:54,800 --> 00:45:00,110
so as you can see that the two types of

00:44:58,370 --> 00:45:02,420
repositories actually complement each

00:45:00,110 --> 00:45:08,120
other quite nicely our recommendation is

00:45:02,420 --> 00:45:10,700
to to use your version control reports

00:45:08,120 --> 00:45:12,680
three four unreleased packages for

00:45:10,700 --> 00:45:15,050
example implement a feature to someone

00:45:12,680 --> 00:45:17,450
and you say hey you know there is a tag

00:45:15,050 --> 00:45:19,670
or there is a branch go check it out and

00:45:17,450 --> 00:45:22,100
they can just use it as a package as a

00:45:19,670 --> 00:45:24,050
package repository but at the same time

00:45:22,100 --> 00:45:28,430
you would want to publish released

00:45:24,050 --> 00:45:31,370
versions of your of your project into an

00:45:28,430 --> 00:45:34,910
archive base deposited so for build two

00:45:31,370 --> 00:45:37,190
we run a central repository on CPP org

00:45:34,910 --> 00:45:38,900
you're free to run your own archive

00:45:37,190 --> 00:45:40,370
based avoids that for example if you

00:45:38,900 --> 00:45:43,190
want to have one internal in your

00:45:40,370 --> 00:45:45,530
company or even a public one alternative

00:45:43,190 --> 00:45:48,250
to this one you're welcome to do that so

00:45:45,530 --> 00:45:50,900
you just go take a brief look with it

00:45:48,250 --> 00:45:53,810
she looks like so if you go to the front

00:45:50,900 --> 00:45:58,520
page and we get a list of packages and

00:45:53,810 --> 00:46:01,760
we can use a search box for example to

00:45:58,520 --> 00:46:05,180
search for a hollow library there we get

00:46:01,760 --> 00:46:07,580
a couple of results and they immediately

00:46:05,180 --> 00:46:09,620
get some information that is useful too

00:46:07,580 --> 00:46:11,330
for you to make the selection which one

00:46:09,620 --> 00:46:14,140
you prefer to use for example license

00:46:11,330 --> 00:46:16,580
the number of dependencies and punch you

00:46:14,140 --> 00:46:19,130
narrowed down to a package you can go

00:46:16,580 --> 00:46:21,050
and see which versions are available in

00:46:19,130 --> 00:46:22,820
there in different sections like some

00:46:21,050 --> 00:46:25,760
for example can be in stable some in

00:46:22,820 --> 00:46:28,280
testing so you can decide which ones you

00:46:25,760 --> 00:46:30,800
want if you go to a specific version

00:46:28,280 --> 00:46:33,650
then besides even more information about

00:46:30,800 --> 00:46:35,270
it you see for example all the build

00:46:33,650 --> 00:46:37,280
results for this version so you can

00:46:35,270 --> 00:46:39,620
actually check in if you need Windows

00:46:37,280 --> 00:46:42,760
and this package fails to the build on

00:46:39,620 --> 00:46:46,730
window that's probably not a good idea -

00:46:42,760 --> 00:46:49,430
okay so this is CPP yet so as an example

00:46:46,730 --> 00:46:55,040
let's try let's let's make a release of

00:46:49,430 --> 00:46:55,610
our library and publish it to two CTP

00:46:55,040 --> 00:46:58,040
Deodato

00:46:55,610 --> 00:47:00,050
again I really would want this process

00:46:58,040 --> 00:47:02,080
to be as frictionless and painless as

00:47:00,050 --> 00:47:02,080
possible

00:47:06,150 --> 00:47:10,300
so the only place we're gonna change you

00:47:08,980 --> 00:47:12,820
need to change the version is the

00:47:10,300 --> 00:47:15,670
beefiest propagates from day everywhere

00:47:12,820 --> 00:47:18,070
else as I mentioned release versions you

00:47:15,670 --> 00:47:21,839
manage yourself there is not any kind of

00:47:18,070 --> 00:47:21,839
automation of messing around with it

00:47:36,150 --> 00:47:41,200
okay so there's a we just changed the

00:47:38,859 --> 00:47:49,780
version and now we are going to come

00:47:41,200 --> 00:47:53,050
into our changes also gonna tag it so we

00:47:49,780 --> 00:47:55,810
use this form that is quite adopted by

00:47:53,050 --> 00:47:57,880
quite a few projects this notation V and

00:47:55,810 --> 00:48:00,250
then a version so this tag now that

00:47:57,880 --> 00:48:01,930
we've we're gonna push it now so now the

00:48:00,250 --> 00:48:03,700
users of our package can actually use

00:48:01,930 --> 00:48:06,490
our github repository and instead of

00:48:03,700 --> 00:48:08,710
master for example as I've shown in the

00:48:06,490 --> 00:48:11,260
repository URL they can specify the

00:48:08,710 --> 00:48:21,550
version if they prefer this specific

00:48:11,260 --> 00:48:22,900
version for pushing it okay so so now

00:48:21,550 --> 00:48:25,540
we've published made the release

00:48:22,900 --> 00:48:29,020
published it Taglit on in our github so

00:48:25,540 --> 00:48:30,400
now we want to publish it to CTTT org so

00:48:29,020 --> 00:48:35,830
this is automated with a biggie a

00:48:30,400 --> 00:48:38,440
published command it's an in a sense

00:48:35,830 --> 00:48:40,690
it's similar to CI in work fluoride it's

00:48:38,440 --> 00:48:43,270
it submitting our package for inclusion

00:48:40,690 --> 00:48:46,420
into archive waste repository instead of

00:48:43,270 --> 00:48:50,560
pasting provide some information you

00:48:46,420 --> 00:48:53,680
know who is submitting it and so on yes

00:48:50,560 --> 00:48:56,230
there's some more information being

00:48:53,680 --> 00:48:58,030
printed some things got uploaded said

00:48:56,230 --> 00:49:00,490
kids and our club our package and

00:48:58,030 --> 00:49:02,260
uploads it to submission service tells

00:49:00,490 --> 00:49:04,030
us that the package submission is queued

00:49:02,260 --> 00:49:06,430
and give us a link where we can go take

00:49:04,030 --> 00:49:09,369
a look at something let me do that let's

00:49:06,430 --> 00:49:12,849
briefly discuss what happens to a

00:49:09,369 --> 00:49:16,030
package once we submit submitted to an

00:49:12,849 --> 00:49:18,200
archivist upholstery in case of cppw

00:49:16,030 --> 00:49:21,320
kind we're trying to strike a balance

00:49:18,200 --> 00:49:24,770
between a large repository of

00:49:21,320 --> 00:49:27,140
low-quality packages on one hand and a

00:49:24,770 --> 00:49:29,599
repository of a few packages of

00:49:27,140 --> 00:49:32,180
high-quality on the other but you know

00:49:29,599 --> 00:49:34,310
the this the submission process is so

00:49:32,180 --> 00:49:38,660
annoying and painful that nobody bothers

00:49:34,310 --> 00:49:41,810
to submit so what we came up with is one

00:49:38,660 --> 00:49:43,970
so we don't review our packages we don't

00:49:41,810 --> 00:49:46,460
decide whether you know it's worth it to

00:49:43,970 --> 00:49:49,339
be included so provided you package

00:49:46,460 --> 00:49:51,200
satisfies these simple rules it's gonna

00:49:49,339 --> 00:49:54,410
get included and intricity big-eared

00:49:51,200 --> 00:49:56,270
Auto so once you submit the package it

00:49:54,410 --> 00:50:00,079
gets into a queue so it's a queue

00:49:56,270 --> 00:50:01,760
section of the of the repository way

00:50:00,079 --> 00:50:04,520
it's tested similar to CI

00:50:01,760 --> 00:50:08,150
and provided that it builds on at least

00:50:04,520 --> 00:50:10,910
one platform and compiler it's gonna get

00:50:08,150 --> 00:50:12,920
moved to taste so the rationale here is

00:50:10,910 --> 00:50:14,660
that it builds on at least one platform

00:50:12,920 --> 00:50:16,609
on compiler then it can be useful to

00:50:14,660 --> 00:50:20,329
some right if it doesn't build on

00:50:16,609 --> 00:50:23,260
anywhere probably not so once in testing

00:50:20,329 --> 00:50:26,630
it's gonna be pasted on and a bit more

00:50:23,260 --> 00:50:28,520
comparison platform so we also build on

00:50:26,630 --> 00:50:31,160
with all the versions from the compilers

00:50:28,520 --> 00:50:33,200
if you want to support those you can see

00:50:31,160 --> 00:50:36,140
you know what the state is they're also

00:50:33,200 --> 00:50:38,599
the users of your project they have a

00:50:36,140 --> 00:50:40,609
chance to test things you know against

00:50:38,599 --> 00:50:43,790
their projects if for example they

00:50:40,609 --> 00:50:46,690
depend on your library so provided you

00:50:43,790 --> 00:50:49,609
know there's no issues there and your

00:50:46,690 --> 00:50:51,800
project has at least one test then it

00:50:49,609 --> 00:50:53,960
will be moved to stay so again here we

00:50:51,800 --> 00:50:55,849
require you to have at least one test

00:50:53,960 --> 00:50:58,940
and I think it's a it's a reasonable

00:50:55,849 --> 00:51:01,819
expectation because think about it if

00:50:58,940 --> 00:51:03,500
you build the library actually you know

00:51:01,819 --> 00:51:05,780
and you don't have any tests you don't

00:51:03,500 --> 00:51:09,980
actually know whether your library links

00:51:05,780 --> 00:51:12,380
right let alone run for example to me

00:51:09,980 --> 00:51:15,470
personally it's very common to set to

00:51:12,380 --> 00:51:17,960
forget to export symbols from a library

00:51:15,470 --> 00:51:21,260
so if you don't even try to link you

00:51:17,960 --> 00:51:24,410
cannot really say about it it's also

00:51:21,260 --> 00:51:26,470
possible that a package isn't is no

00:51:24,410 --> 00:51:28,780
longer maintained package version is no

00:51:26,470 --> 00:51:32,200
maintain and it fails to build on all

00:51:28,780 --> 00:51:34,720
the platforms and compilers that here

00:51:32,200 --> 00:51:36,760
but so once the package is in stable

00:51:34,720 --> 00:51:40,210
reaction never remove it from the

00:51:36,760 --> 00:51:42,460
repository so that's the reliability

00:51:40,210 --> 00:51:44,410
guarantee that I mentioned earlier but

00:51:42,460 --> 00:51:46,480
we might move it to the legacy section

00:51:44,410 --> 00:51:49,270
where we stopped building it I'd say if

00:51:46,480 --> 00:51:52,650
it's no longer maintained and new

00:51:49,270 --> 00:51:55,780
projects probably shouldn't depend on it

00:51:52,650 --> 00:52:00,970
okay so with that understanding this

00:51:55,780 --> 00:52:04,720
message is probably now more makes more

00:52:00,970 --> 00:52:07,900
sense so we get a link way to the Q

00:52:04,720 --> 00:52:11,010
section where we can see our package the

00:52:07,900 --> 00:52:16,000
a piece is already built as you can see

00:52:11,010 --> 00:52:17,380
in all green so it will sit there for

00:52:16,000 --> 00:52:19,420
some time and will be moved to the

00:52:17,380 --> 00:52:21,790
testing section sit there for a little

00:52:19,420 --> 00:52:23,170
bit longer and then you end up in stable

00:52:21,790 --> 00:52:26,140
so actually we went through this process

00:52:23,170 --> 00:52:31,390
a couple of days ago so we don't have

00:52:26,140 --> 00:52:33,849
time to wait and I published the library

00:52:31,390 --> 00:52:35,530
to City to get that work so it's

00:52:33,849 --> 00:52:41,470
actually already available in the stable

00:52:35,530 --> 00:52:46,260
section of the boy stream that is so

00:52:41,470 --> 00:52:51,670
just as an example let's go and add

00:52:46,260 --> 00:52:59,320
dependency add this new repository to

00:52:51,670 --> 00:53:02,470
our executable and also add a version

00:52:59,320 --> 00:53:06,160
constrained to our dependency so again

00:53:02,470 --> 00:53:07,869
we will uncomment the suggestion so as

00:53:06,160 --> 00:53:10,839
you can see even the link is already

00:53:07,869 --> 00:53:13,630
actually contains the die cpp here dot

00:53:10,839 --> 00:53:15,790
org stable section commented out so if

00:53:13,630 --> 00:53:18,460
you want to use packages from speedy org

00:53:15,790 --> 00:53:21,119
you just need to uncommon there's also

00:53:18,460 --> 00:53:24,190
the trust field so this is that

00:53:21,119 --> 00:53:27,609
repository authentication I mentioned

00:53:24,190 --> 00:53:29,320
earlier so if we don't specify the

00:53:27,609 --> 00:53:30,540
fingerprint there then it will be asked

00:53:29,320 --> 00:53:32,940
to

00:53:30,540 --> 00:53:34,710
manually authenticate the repository

00:53:32,940 --> 00:53:36,900
every time we'll build things which

00:53:34,710 --> 00:53:40,680
would be annoying so in a sense we

00:53:36,900 --> 00:53:42,150
establishing a chain of trust here as

00:53:40,680 --> 00:53:44,010
you can see I still kept the git

00:53:42,150 --> 00:53:46,520
repository as a source of this package

00:53:44,010 --> 00:53:51,810
because in case if I want is some

00:53:46,520 --> 00:53:56,570
unreleased version or some such let's

00:53:51,810 --> 00:53:58,740
also add a dependency constraint here

00:53:56,570 --> 00:54:01,500
now that we have a stable version

00:53:58,740 --> 00:54:09,630
released just briefly about dependency

00:54:01,500 --> 00:54:12,119
constraints those of you used to other

00:54:09,630 --> 00:54:14,460
package managers probably familiar with

00:54:12,119 --> 00:54:18,420
carrot until the constraints right the

00:54:14,460 --> 00:54:20,490
carrot constraint is any major later

00:54:18,420 --> 00:54:23,190
major or patch a minor

00:54:20,490 --> 00:54:26,670
patch version and till the content is

00:54:23,190 --> 00:54:29,730
more conservative only allows new patch

00:54:26,670 --> 00:54:33,329
versions so the carrot constraint is a

00:54:29,730 --> 00:54:37,579
good default there also other operators

00:54:33,329 --> 00:54:37,579
and ranges so we're just gonna use that

00:54:38,390 --> 00:54:45,839
we specify we are happy with any later

00:54:44,010 --> 00:54:48,089
version as long as the major version

00:54:45,839 --> 00:54:57,119
stays long which which means its source

00:54:48,089 --> 00:54:59,520
compatible okay we're gonna run this

00:54:57,119 --> 00:55:03,119
again not a synchronization things would

00:54:59,520 --> 00:55:07,020
get pulled out all those good and let me

00:55:03,119 --> 00:55:12,089
also commit this change so want to go

00:55:07,020 --> 00:55:19,740
see how it is on Windows how this will

00:55:12,089 --> 00:55:21,690
all play out on Windows take a look

00:55:19,740 --> 00:55:24,450
there again it would be

00:55:21,690 --> 00:55:26,069
now that we've placed place the version

00:55:24,450 --> 00:55:28,230
constraint the version that we have

00:55:26,069 --> 00:55:30,750
built on Windows early no longer

00:55:28,230 --> 00:55:33,060
satisfies this constraint right so again

00:55:30,750 --> 00:55:37,950
it would be unfortunate if we have to do

00:55:33,060 --> 00:55:42,240
anything manually them but luckily we

00:55:37,950 --> 00:55:43,710
don't then automatically synchronized

00:55:42,240 --> 00:55:44,280
and our lock

00:55:43,710 --> 00:55:46,910
old

00:55:44,280 --> 00:55:52,440
as you can see is automatically upgraded

00:55:46,910 --> 00:56:01,890
to the latest again pretty painless

00:55:52,440 --> 00:56:04,560
experience now sources also snow

00:56:01,890 --> 00:56:11,400
bindings so this is a source based

00:56:04,560 --> 00:56:15,090
package manager okay and that's pretty

00:56:11,400 --> 00:56:18,120
much it just to summarize quickly what

00:56:15,090 --> 00:56:21,960
we've done so we start doing beautiful

00:56:18,120 --> 00:56:23,820
we then factor the UID generation to

00:56:21,960 --> 00:56:26,130
library fix the tops and how it's nice

00:56:23,820 --> 00:56:28,440
and portable we then made a release of a

00:56:26,130 --> 00:56:35,880
library and publish it to an archive by

00:56:28,440 --> 00:56:38,640
state boys alright and just to summarize

00:56:35,880 --> 00:56:41,160
key points about build - I think the

00:56:38,640 --> 00:56:43,710
overall thing is that development in C++

00:56:41,160 --> 00:56:47,220
doesn't have to be painful there is no

00:56:43,710 --> 00:56:48,840
reason why we cannot do as good or even

00:56:47,220 --> 00:56:50,790
better as Russell for example some of

00:56:48,840 --> 00:56:54,060
the things that continues versioning or

00:56:50,790 --> 00:56:55,740
the CI service something that you

00:56:54,060 --> 00:56:57,990
actually don't find in Rastan I think

00:56:55,740 --> 00:56:59,790
it's an improvement over their model so

00:56:57,990 --> 00:57:02,730
just to summarize its integrated build

00:56:59,790 --> 00:57:04,710
tool chain for C++ or package manager

00:57:02,730 --> 00:57:07,650
and project dependency management build

00:57:04,710 --> 00:57:09,810
system they all you know in the design

00:57:07,650 --> 00:57:12,480
informs each other covers the entire

00:57:09,810 --> 00:57:14,480
project development lifecycle it has a

00:57:12,480 --> 00:57:19,850
uniform interface across platforms

00:57:14,480 --> 00:57:22,260
compilers has supports both archive and

00:57:19,850 --> 00:57:25,050
version control base the posters which

00:57:22,260 --> 00:57:25,730
is really handy complemented each other

00:57:25,050 --> 00:57:28,410
nicely

00:57:25,730 --> 00:57:34,650
finally the dependency free all you need

00:57:28,410 --> 00:57:40,140
is a C++ compile so and this is this

00:57:34,650 --> 00:57:45,090
brings me to to our offer to the C++

00:57:40,140 --> 00:57:46,320
community so convert your start new

00:57:45,090 --> 00:57:50,370
project or convert your existing

00:57:46,320 --> 00:57:53,580
projects to build two and you can see I

00:57:50,370 --> 00:57:55,830
them for free on all the major platforms

00:57:53,580 --> 00:57:56,570
and compilers and so this is what's

00:57:55,830 --> 00:57:59,600
currently

00:57:56,570 --> 00:58:01,550
available to you and we are also

00:57:59,600 --> 00:58:03,140
planning so we'll keep upgrading you

00:58:01,550 --> 00:58:04,910
know Microsoft released new version

00:58:03,140 --> 00:58:06,650
clang release new version you don't

00:58:04,910 --> 00:58:09,290
actually need to do anything we will

00:58:06,650 --> 00:58:10,940
keep in you know upgrading these

00:58:09,290 --> 00:58:13,400
machines and make them available to you

00:58:10,940 --> 00:58:16,820
also planning to add some static

00:58:13,400 --> 00:58:18,500
analyzers and sanitize the builds as

00:58:16,820 --> 00:58:25,120
well we actually have them locally

00:58:18,500 --> 00:58:27,710
already taste heaven push them to CI and

00:58:25,120 --> 00:58:30,110
addition if you so you can use the CI

00:58:27,710 --> 00:58:32,330
service even if you don't publish

00:58:30,110 --> 00:58:34,220
anything to CPP yet dot work if you do

00:58:32,330 --> 00:58:36,410
then you'll get some additional testing

00:58:34,220 --> 00:58:39,640
we also test there for all the compilers

00:58:36,410 --> 00:58:48,320
if you want to support that and so ok

00:58:39,640 --> 00:59:08,090
thank you very much we have a few

00:58:48,320 --> 00:59:10,160
minutes left but I'm happy to stay so

00:59:08,090 --> 00:59:12,140
the question was how do I build debug or

00:59:10,160 --> 00:59:14,150
release versions is there some

00:59:12,140 --> 00:59:16,370
command-line argument so you've seen how

00:59:14,150 --> 00:59:19,190
I've created the build configurations

00:59:16,370 --> 00:59:21,350
for clang GCC and Minji V so you will do

00:59:19,190 --> 00:59:25,870
it exactly the same you can pay to build

00:59:21,350 --> 00:59:25,870
configurations for GCC 1 debug one

00:59:41,949 --> 00:59:47,539
so the question is is there an easy way

00:59:45,140 --> 00:59:50,239
to consume libraries that don't use

00:59:47,539 --> 00:59:53,900
built - such as Auto compost or to make

00:59:50,239 --> 00:59:56,959
based yeah dances yes especially if your

00:59:53,900 --> 00:59:59,809
library produced pkg config file as most

00:59:56,959 --> 01:00:05,359
other countries do all works

00:59:59,809 --> 01:00:08,229
automatically so you get to put it

01:00:05,359 --> 01:00:11,479
another way the way to interface with

01:00:08,229 --> 01:00:14,420
other the libraries that use other built

01:00:11,479 --> 01:00:16,549
systems is by installation so you

01:00:14,420 --> 01:00:18,910
install them not necessarily into your

01:00:16,549 --> 01:00:22,099
system location but some way and then

01:00:18,910 --> 01:00:24,979
you know even if they don't provide a

01:00:22,099 --> 01:00:27,380
pkg config file they will it will still

01:00:24,979 --> 01:00:29,269
be usable but if they provide because

01:00:27,380 --> 01:00:49,039
you can't Fig then you build to

01:00:29,269 --> 01:00:51,670
automatically use that ok so the

01:00:49,039 --> 01:00:54,650
question is is it possible to upload

01:00:51,670 --> 01:00:56,989
submit a library that does not use built

01:00:54,650 --> 01:00:59,599
to today positive and the answer is no

01:00:56,989 --> 01:01:01,699
and the reason for that is it's just not

01:00:59,599 --> 01:01:10,640
going to work we won't be able to build

01:01:01,699 --> 01:01:33,009
it let's let's maybe come around

01:01:10,640 --> 01:01:36,890
ok can we ok so the question is who can

01:01:33,009 --> 01:01:39,739
use if I got who can dictate whether the

01:01:36,890 --> 01:01:43,699
library is built static or shared or

01:01:39,739 --> 01:01:46,400
maybe both and it's actually both so you

01:01:43,699 --> 01:01:48,679
can it's it's not very common but you

01:01:46,400 --> 01:01:51,910
can for example say my my library only

01:01:48,679 --> 01:01:55,579
build static or only shed but also

01:01:51,910 --> 01:01:58,069
consumers can specify priority in which

01:01:55,579 --> 01:02:13,160
one they want to need so it's both ways

01:01:58,069 --> 01:02:16,130
in a sense ok our paths ok good question

01:02:13,160 --> 01:02:19,189
so the question is do we handle our

01:02:16,130 --> 01:02:21,709
paths and the answer is yes and we go

01:02:19,189 --> 01:02:24,469
actually a step further and we emulate

01:02:21,709 --> 01:02:27,319
our path on Windows so you can actually

01:02:24,469 --> 01:02:29,839
run the executables in place you don't

01:02:27,319 --> 01:02:33,259
stash them in a bin directory where your

01:02:29,839 --> 01:02:42,979
dll and up with conflicting names and so

01:02:33,259 --> 01:02:46,219
on so yeah so I think I think we are out

01:02:42,979 --> 01:02:50,270
of time but yeah I'm welcome to stay in

01:02:46,219 --> 01:02:55,429
consecrations thank you very much

01:02:50,270 --> 01:02:55,429

YouTube URL: https://www.youtube.com/watch?v=Nni2Qu2WitY


