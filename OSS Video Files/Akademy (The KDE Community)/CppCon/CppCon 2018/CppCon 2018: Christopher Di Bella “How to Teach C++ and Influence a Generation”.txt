Title: CppCon 2018: Christopher Di Bella “How to Teach C++ and Influence a Generation”
Publication date: 2018-10-15
Playlist: CppCon 2018
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
At some point in your career, you will need to teach someone something about C++. You might not be a lecturer or a trainer, but you could be helping a colleague with a problem that they're solving, presenting at a lunch-time session, or even at a conference! Perhaps you're someone who is helping to write your company's style guide or "Intro to Our Repo" manual. Correctly teaching C++ is a tough endeavour. C++ is often taught incorrectly at the university level, via online resources, and in books. Many resources are still outdated or refuse to change with the paradigm shift that the C++ community has been undergoing over the past two decades. 

We should seek to convey correct information and provide resources that are factual. We should make learning C++ an enjoyable experience, and that stems from the way in which we teach it. 

This talk digs into how we can achieve some of this, but it by no means provides all the answers, and may lead to more questions.
— 
Christopher Di Bella, Codeplay Software
Staff Software Engineer, ComputeCpp Runtime

Christopher Di Bella is a Staff Software Engineer for Codeplay’s ComputeCpp Runtime Technology. He is a strong proponent for having the Concepts TS and the Ranges TS in C++20. Chris spends his days working on ComputeCpp, Codeplay’s implementation of SYCL; the Khronos implementation for the Parallel STL (using SYCL); and researching Parallel Ranges, which is an attempt to bring the aforementioned Ranges TS together with the parallel algorithms. He was previously a software developer for Nasdaq, and a tutor for UNSW Australia’s COMP6771 Advanced C++ Programming course in Sydney, Australia. In his spare time, Chris enjoys snowboarding, playing games, and watching films.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:04,920
hello everyone welcome to how to teach

00:00:02,220 --> 00:00:07,259
C++ and influency generation I'm

00:00:04,920 --> 00:00:08,550
Christopher de Bella and I work for code

00:00:07,259 --> 00:00:10,320
place software as a staff software

00:00:08,550 --> 00:00:14,099
engineer and today we're going to take a

00:00:10,320 --> 00:00:16,740
look at a few tools and tricks that may

00:00:14,099 --> 00:00:18,240
help you improve your teaching skills or

00:00:16,740 --> 00:00:20,640
at least give you a few new things to

00:00:18,240 --> 00:00:22,650
think about it's a quick rundown on what

00:00:20,640 --> 00:00:24,330
we're going to be talking about we'll

00:00:22,650 --> 00:00:26,820
quickly go through a very very brief

00:00:24,330 --> 00:00:28,260
introduction of myself then we will look

00:00:26,820 --> 00:00:32,430
at the motivation and the history behind

00:00:28,260 --> 00:00:35,190
this talk before looking at what what

00:00:32,430 --> 00:00:37,649
simplicity means for education then

00:00:35,190 --> 00:00:40,680
we'll be taking a look at how tools can

00:00:37,649 --> 00:00:42,989
improve but the teaching experience and

00:00:40,680 --> 00:00:45,300
the learning experience especially for

00:00:42,989 --> 00:00:48,000
when you go and finish learning early

00:00:45,300 --> 00:00:50,640
that stage of learning and you can then

00:00:48,000 --> 00:00:54,570
start applying what you know and then

00:00:50,640 --> 00:00:58,469
we'll have a usual talk about how C and

00:00:54,570 --> 00:01:01,289
C++ not the same language and then we'll

00:00:58,469 --> 00:01:03,629
have a little bit of a chat that looks

00:01:01,289 --> 00:01:05,700
toward the future and there will be an

00:01:03,629 --> 00:01:07,560
announcement there so before we continue

00:01:05,700 --> 00:01:11,010
I'd like to thank the people on screen

00:01:07,560 --> 00:01:13,020
especially JC Van Winkle who has been a

00:01:11,010 --> 00:01:15,509
great mentor and has helped me prepare a

00:01:13,020 --> 00:01:18,240
lot of the content for this slide Diana

00:01:15,509 --> 00:01:21,030
and Michael have also been largely

00:01:18,240 --> 00:01:25,770
influential in the direct content of the

00:01:21,030 --> 00:01:29,280
the last stage of this of this talk John

00:01:25,770 --> 00:01:31,890
was really crucial in getting the the

00:01:29,280 --> 00:01:33,360
motivation for this particular talk in

00:01:31,890 --> 00:01:35,130
contrast to some of the other teaching

00:01:33,360 --> 00:01:37,619
books that I have given and whether or

00:01:35,130 --> 00:01:40,170
not they directly aware of it both Kate

00:01:37,619 --> 00:01:41,939
and Titus have provided some really

00:01:40,170 --> 00:01:45,630
important talking points for this

00:01:41,939 --> 00:01:47,040
particular talk and if anyone has any

00:01:45,630 --> 00:01:49,380
questions please please feel free to

00:01:47,040 --> 00:01:52,200
interrupt me there is a microphone over

00:01:49,380 --> 00:01:55,969
here there isn't a second one but I

00:01:52,200 --> 00:02:01,049
think that one will be okay for now and

00:01:55,969 --> 00:02:03,060
so start off I am an Australian which

00:02:01,049 --> 00:02:04,850
means that I have a funny accent and I

00:02:03,060 --> 00:02:08,610
spell things a little bit differently I

00:02:04,850 --> 00:02:11,910
also work on co-players compute CVP run

00:02:08,610 --> 00:02:12,960
time and enjoy snowboarding I also enjoy

00:02:11,910 --> 00:02:15,330
film

00:02:12,960 --> 00:02:16,620
and I enjoy teaching so if you want to

00:02:15,330 --> 00:02:19,830
talk with me offline these are some

00:02:16,620 --> 00:02:22,080
great things to start talking about now

00:02:19,830 --> 00:02:24,150
let's talk about the history of this

00:02:22,080 --> 00:02:26,880
talk very very quickly initially I

00:02:24,150 --> 00:02:28,950
wanted to address talk that said that

00:02:26,880 --> 00:02:31,020
learning C++ isn't the hard bit it's

00:02:28,950 --> 00:02:32,880
actually teaching which is a talk that I

00:02:31,020 --> 00:02:35,100
delivers an open content talk last year

00:02:32,880 --> 00:02:37,560
John contacted me and said that he felt

00:02:35,100 --> 00:02:40,620
while that talk was good the talk was

00:02:37,560 --> 00:02:42,270
very much an academically oriented talk

00:02:40,620 --> 00:02:45,030
that focused on teaching in schooling

00:02:42,270 --> 00:02:46,380
environment and a university environment

00:02:45,030 --> 00:02:49,080
which is where my background mainly

00:02:46,380 --> 00:02:53,660
lives he said that I talk they could

00:02:49,080 --> 00:02:56,130
potentially cover the the things such as

00:02:53,660 --> 00:02:59,190
things that have other things such as

00:02:56,130 --> 00:03:01,530
consulting and on-site training internal

00:02:59,190 --> 00:03:03,810
training documentation blogging these

00:03:01,530 --> 00:03:06,480
sorts of things are very important as

00:03:03,810 --> 00:03:08,940
well and he thought that I talked the

00:03:06,480 --> 00:03:11,220
cupboard more General Teaching would be

00:03:08,940 --> 00:03:12,030
a little bit better and so that's what

00:03:11,220 --> 00:03:14,700
this talk

00:03:12,030 --> 00:03:16,530
aims to achieve so before we continue

00:03:14,700 --> 00:03:18,150
can I get a shot here Oh actually can I

00:03:16,530 --> 00:03:20,490
get a bit of feedback from the audience

00:03:18,150 --> 00:03:37,230
please what do you want to get out of

00:03:20,490 --> 00:03:40,740
this talk yeah so the question was every

00:03:37,230 --> 00:03:43,470
every user yes every year a handful of

00:03:40,740 --> 00:03:45,240
developers come into the company and how

00:03:43,470 --> 00:03:46,650
can you get them up and running yeah so

00:03:45,240 --> 00:03:50,640
this talk will hopefully give you a few

00:03:46,650 --> 00:03:59,400
a few techniques to to improve on them

00:03:50,640 --> 00:04:02,580
getting a better experience okay yep so

00:03:59,400 --> 00:04:05,300
what parts of modern what parts of

00:04:02,580 --> 00:04:08,130
modern C++ can we include and allow for

00:04:05,300 --> 00:04:09,480
women teaching and I believe the

00:04:08,130 --> 00:04:11,820
simplicity section will actually

00:04:09,480 --> 00:04:17,310
directly cover some of that if not

00:04:11,820 --> 00:04:21,690
directly indirectly all right so people

00:04:17,310 --> 00:04:26,080
come along and say in many many courses

00:04:21,690 --> 00:04:28,030
books online videos that C++ is a comp

00:04:26,080 --> 00:04:29,800
language it's designed to be low-level

00:04:28,030 --> 00:04:34,840
performant you want to have control over

00:04:29,800 --> 00:04:37,810
memory if you're using C++ and I say no

00:04:34,840 --> 00:04:39,639
to this because if we say this we are

00:04:37,810 --> 00:04:41,439
immediately putting a barrier between us

00:04:39,639 --> 00:04:43,990
and the people be learning C++ it

00:04:41,439 --> 00:04:46,870
doesn't really matter if we're going to

00:04:43,990 --> 00:04:48,159
be if we're going to be learning C++ for

00:04:46,870 --> 00:04:49,569
the first time or introducing some new

00:04:48,159 --> 00:04:51,460
feature at the moment we say that is

00:04:49,569 --> 00:04:53,229
complexity people are merely going to be

00:04:51,460 --> 00:04:55,060
on guard looking for that complexity and

00:04:53,229 --> 00:04:56,830
worrying you know is this the complex

00:04:55,060 --> 00:04:58,330
bit about have I gotten past the complex

00:04:56,830 --> 00:05:00,340
but when does it start becoming easy and

00:04:58,330 --> 00:05:02,229
so if we say that C++ is a complex

00:05:00,340 --> 00:05:04,300
language then we remedial going to be

00:05:02,229 --> 00:05:06,819
putting people on it whereas if we just

00:05:04,300 --> 00:05:09,099
go hide them through it then they're

00:05:06,819 --> 00:05:10,690
going to be more likely to respond

00:05:09,099 --> 00:05:13,389
better because they don't need to be

00:05:10,690 --> 00:05:16,389
worrying where is the complex bit how

00:05:13,389 --> 00:05:17,680
can how can I overcome that because they

00:05:16,389 --> 00:05:19,060
haven't been told anything as complex

00:05:17,680 --> 00:05:20,979
and yes if there's something tricky you

00:05:19,060 --> 00:05:23,110
should you should warn them but don't

00:05:20,979 --> 00:05:24,969
just make a general blanket statement

00:05:23,110 --> 00:05:28,210
that c-class class is complex because

00:05:24,969 --> 00:05:32,860
writing c-class plus can be easy and it

00:05:28,210 --> 00:05:35,529
can be hard and instead of tearing down

00:05:32,860 --> 00:05:39,539
C++ what I like to do is I like to build

00:05:35,529 --> 00:05:41,349
up C++ what can we build using C++ and

00:05:39,539 --> 00:05:44,199
there's quite a fair amount that we can

00:05:41,349 --> 00:05:45,870
build using C++ why do we use C++ we use

00:05:44,199 --> 00:05:48,039
it because it is a lightweight

00:05:45,870 --> 00:05:50,860
abstraction language it allows us to

00:05:48,039 --> 00:05:56,469
empower our programmers using types and

00:05:50,860 --> 00:06:01,719
expressions and so what I did was I took

00:05:56,469 --> 00:06:03,759
a survey online using Google Forms over

00:06:01,719 --> 00:06:05,620
the past I think week and a half where

00:06:03,759 --> 00:06:07,180
people who are teachers were asked to

00:06:05,620 --> 00:06:08,500
enter a series of questions some of

00:06:07,180 --> 00:06:09,879
which remain the trees on which were not

00:06:08,500 --> 00:06:12,909
the results that I'm going to be showing

00:06:09,879 --> 00:06:14,020
today I'm mostly the mandatory the

00:06:12,909 --> 00:06:16,180
mandatory result there's very many

00:06:14,020 --> 00:06:18,069
questions and there's going to be a

00:06:16,180 --> 00:06:20,979
handful of non mandatory questions but

00:06:18,069 --> 00:06:23,529
most of them entry ones anyway about 150

00:06:20,979 --> 00:06:25,210
people ended up responding and that was

00:06:23,529 --> 00:06:26,560
great he forgave me enough data to

00:06:25,210 --> 00:06:28,539
actually start reasoning about things

00:06:26,560 --> 00:06:32,650
and the most important question that I

00:06:28,539 --> 00:06:34,839
asked was how do you teach and so

00:06:32,650 --> 00:06:36,849
although the yellow section is the

00:06:34,839 --> 00:06:38,740
largest section that was essentially a

00:06:36,849 --> 00:06:39,849
group of things that would have made

00:06:38,740 --> 00:06:42,550
this graph

00:06:39,849 --> 00:06:45,069
useless for a for a slide so I grouped

00:06:42,550 --> 00:06:47,020
them into one category the most

00:06:45,069 --> 00:06:48,520
important section after that was

00:06:47,020 --> 00:06:50,709
informally so people are teaching their

00:06:48,520 --> 00:06:51,999
friends their colleagues perhaps you've

00:06:50,709 --> 00:06:53,979
got a classmate who wants to learn C++

00:06:51,999 --> 00:06:56,020
but they can't afford the units to go

00:06:53,979 --> 00:06:57,459
and actually take the course or maybe

00:06:56,020 --> 00:07:00,429
the university don't have a course and

00:06:57,459 --> 00:07:02,709
you're from another university so these

00:07:00,429 --> 00:07:04,990
are the most prominent places where

00:07:02,709 --> 00:07:07,719
people teach C++ followed by in-house

00:07:04,990 --> 00:07:09,939
training which I believe Andrew was

00:07:07,719 --> 00:07:12,399
talking about a moment ago and then

00:07:09,939 --> 00:07:15,039
academia as is the post high school

00:07:12,399 --> 00:07:18,639
section so we're talking about

00:07:15,039 --> 00:07:21,369
universities and technical schools and

00:07:18,639 --> 00:07:24,399
then after that we have a few other

00:07:21,369 --> 00:07:29,529
things but the majority of being seem to

00:07:24,399 --> 00:07:30,809
be in informal post high school and in

00:07:29,529 --> 00:07:33,729
house-trained

00:07:30,809 --> 00:07:37,959
the primary audiences seem to be people

00:07:33,729 --> 00:07:40,539
who analysis to C++ and but not novices

00:07:37,959 --> 00:07:43,689
to programming and people who are

00:07:40,539 --> 00:07:46,289
experienced C++ developers but may want

00:07:43,689 --> 00:07:48,999
to improve on the skills or perhaps they

00:07:46,289 --> 00:07:53,369
from C++ 98 and they want either come to

00:07:48,999 --> 00:07:56,559
C++ 11 or 14 and so on

00:07:53,369 --> 00:08:00,669
people still do teach C++ to complete

00:07:56,559 --> 00:08:02,979
novices but it is rather obviously in

00:08:00,669 --> 00:08:04,629
the minority but the techniques that

00:08:02,979 --> 00:08:08,319
we'll be talking about for the remainder

00:08:04,629 --> 00:08:13,360
of this talk will be we applicable to

00:08:08,319 --> 00:08:16,629
everyone regardless of the audience so

00:08:13,360 --> 00:08:21,479
simplicity is something that has been a

00:08:16,629 --> 00:08:25,599
theme of CPP cut CPP con since at least

00:08:21,479 --> 00:08:28,479
2015 biana gave a talk on keeping simple

00:08:25,599 --> 00:08:30,519
things simple back then and Kate Gregory

00:08:28,479 --> 00:08:33,939
will be giving a keynote I believe on

00:08:30,519 --> 00:08:37,209
Wednesday titled simplicity not just for

00:08:33,939 --> 00:08:38,560
beginners and simplicity is something

00:08:37,209 --> 00:08:40,569
that we also need to be talking about

00:08:38,560 --> 00:08:42,909
when teaching because if we overload our

00:08:40,569 --> 00:08:43,870
students with information then what

00:08:42,909 --> 00:08:45,339
we're going to be doing is we're going

00:08:43,870 --> 00:08:47,079
to be making them layers over the

00:08:45,339 --> 00:08:48,519
information turnout or perhaps they're

00:08:47,079 --> 00:08:49,990
just going to go this is too hard and

00:08:48,519 --> 00:08:53,080
they may bail

00:08:49,990 --> 00:08:54,400
so I picked two examples of things that

00:08:53,080 --> 00:08:57,610
I've done you know when I did my

00:08:54,400 --> 00:09:01,960
informal survey of books and courses and

00:08:57,610 --> 00:09:05,530
YouTube videos to illustrate how perhaps

00:09:01,960 --> 00:09:08,050
we coding and perhaps shouldn't actually

00:09:05,530 --> 00:09:09,400
be going about teaching things so the

00:09:08,050 --> 00:09:11,680
first thing I want to start off with are

00:09:09,400 --> 00:09:13,360
types in C++ and the material I'm

00:09:11,680 --> 00:09:15,610
covering is not digging deep into the

00:09:13,360 --> 00:09:18,490
C++ type system this is what you would

00:09:15,610 --> 00:09:20,950
find typically in chapter 3 of a

00:09:18,490 --> 00:09:24,880
introductory sequence plus book or maybe

00:09:20,950 --> 00:09:26,110
the third hour of a of a lecture after

00:09:24,880 --> 00:09:29,200
you've covered the admin and all the

00:09:26,110 --> 00:09:30,880
hello world content and so what I've

00:09:29,200 --> 00:09:33,970
noticed is the first things that people

00:09:30,880 --> 00:09:36,880
usually start out with introducing

00:09:33,970 --> 00:09:38,050
beings such as bull and char and then

00:09:36,880 --> 00:09:42,130
what would those introduced sign char

00:09:38,050 --> 00:09:44,740
and unsigned char and wrt and sign and

00:09:42,130 --> 00:09:46,510
just extinct E and char 32t and I can

00:09:44,740 --> 00:09:48,220
already hear people laughing in the

00:09:46,510 --> 00:09:50,770
audience because what happens after that

00:09:48,220 --> 00:09:52,360
is we introduce short int long long long

00:09:50,770 --> 00:09:53,740
the unsigned variant and if you're

00:09:52,360 --> 00:09:56,350
extremely lucky you will also be

00:09:53,740 --> 00:09:58,510
introducing the short int and then say

00:09:56,350 --> 00:10:00,040
how it's the synonymous to int and then

00:09:58,510 --> 00:10:01,840
what we'll do is we'll talk about the

00:10:00,040 --> 00:10:03,640
bytes or the bits usually it's the bits

00:10:01,840 --> 00:10:05,500
and then after that we'll have an

00:10:03,640 --> 00:10:08,020
asterisk next to the the column it has

00:10:05,500 --> 00:10:09,940
the bits and it will say this may vary

00:10:08,020 --> 00:10:11,350
depending on your compiler and then what

00:10:09,940 --> 00:10:12,850
we'll do is we'll introduce the

00:10:11,350 --> 00:10:14,080
floating-point types will have float and

00:10:12,850 --> 00:10:15,940
double and depending on your compiler

00:10:14,080 --> 00:10:17,800
the long double type may actually be

00:10:15,940 --> 00:10:20,080
double and so you have to check that

00:10:17,800 --> 00:10:22,330
with your specific compiler and after

00:10:20,080 --> 00:10:24,880
that and talk about the values that each

00:10:22,330 --> 00:10:27,610
type can hold again dependent on your

00:10:24,880 --> 00:10:32,080
compiler and it gives your third hour in

00:10:27,610 --> 00:10:37,930
C++ how are you going to feel after this

00:10:32,080 --> 00:10:39,769
content is rushed over so time for

00:10:37,930 --> 00:10:42,420
Python

00:10:39,769 --> 00:10:46,740
exactly you're not going to be very

00:10:42,420 --> 00:10:51,740
receptive to this so I don't encourage

00:10:46,740 --> 00:10:54,839
approaching it C++ from this angle and

00:10:51,740 --> 00:10:57,410
instead what we can do is just introduce

00:10:54,839 --> 00:11:01,620
a handful of types that are unique to

00:10:57,410 --> 00:11:03,959
specific applications so programming

00:11:01,620 --> 00:11:08,190
principles and practice using C++ second

00:11:03,959 --> 00:11:10,319
edition introduces five types that's it

00:11:08,190 --> 00:11:14,579
one for individual types one for real

00:11:10,319 --> 00:11:17,459
numbers string which is a very very

00:11:14,579 --> 00:11:19,500
handy type to have and hates stop

00:11:17,459 --> 00:11:21,690
teaching C talk goes into detail about

00:11:19,500 --> 00:11:25,139
why string is very important for

00:11:21,690 --> 00:11:26,910
beginners char is also an extremely

00:11:25,139 --> 00:11:29,160
important part because it's single

00:11:26,910 --> 00:11:31,680
characters that may need to be need to

00:11:29,160 --> 00:11:34,009
be used and boolean for telling the

00:11:31,680 --> 00:11:36,750
truth I like to add two more types

00:11:34,009 --> 00:11:38,009
vector and script enumerations because

00:11:36,750 --> 00:11:40,920
script enumerations allow us to

00:11:38,009 --> 00:11:42,810
eliminate having things like true or

00:11:40,920 --> 00:11:46,500
false when they're not really making

00:11:42,810 --> 00:11:48,420
sense there and they also get rid of

00:11:46,500 --> 00:11:50,519
magic numbers that may just be stored

00:11:48,420 --> 00:11:52,550
into some name we get a proper type and

00:11:50,519 --> 00:11:55,920
we can't pass any incorrect values

00:11:52,550 --> 00:11:59,069
vector is of course the bread and butter

00:11:55,920 --> 00:12:01,170
for any C++ programmer and there are

00:11:59,069 --> 00:12:05,100
many talks are going to detail about why

00:12:01,170 --> 00:12:11,040
vector is the staple container for any

00:12:05,100 --> 00:12:12,720
C++ programmer so this is essentially

00:12:11,040 --> 00:12:15,149
what I like to introduce to students

00:12:12,720 --> 00:12:17,519
from the get-go just five types that

00:12:15,149 --> 00:12:20,339
have varying applications and if you are

00:12:17,519 --> 00:12:22,410
interested in talking about high

00:12:20,339 --> 00:12:25,740
performance computing where and you're

00:12:22,410 --> 00:12:27,540
on a GPU and double is not something

00:12:25,740 --> 00:12:29,279
that you're particularly wanting to

00:12:27,540 --> 00:12:31,529
teach because float will be more

00:12:29,279 --> 00:12:33,779
applicable in a situation then a place

00:12:31,529 --> 00:12:35,939
double with what because you're still

00:12:33,779 --> 00:12:36,899
only having one floating point type and

00:12:35,939 --> 00:12:39,689
that's what's important at the moment

00:12:36,899 --> 00:12:41,310
keeping things simple for beginners and

00:12:39,689 --> 00:12:42,779
if we abstract this a little bit further

00:12:41,310 --> 00:12:44,910
then it's just keeping things simple

00:12:42,779 --> 00:12:47,459
when you're introducing a new con new

00:12:44,910 --> 00:12:49,750
concept or notion because concept is now

00:12:47,459 --> 00:12:53,139
reserved

00:12:49,750 --> 00:12:58,569
okay so the contents on this slide were

00:12:53,139 --> 00:13:01,569
taken from from a talk that was given

00:12:58,569 --> 00:13:04,180
you know a guest lecture at the end of a

00:13:01,569 --> 00:13:08,610
C++ 101 course for third year university

00:13:04,180 --> 00:13:11,410
students this guest lecturer was from a

00:13:08,610 --> 00:13:14,800
finance company where C++ is very

00:13:11,410 --> 00:13:17,500
heavily used and in his talk they gave

00:13:14,800 --> 00:13:20,079
an introduction to what this company did

00:13:17,500 --> 00:13:22,629
why they use C++ the history of the

00:13:20,079 --> 00:13:24,879
company his experience with C++ they

00:13:22,629 --> 00:13:28,500
talked about performance testing and a

00:13:24,879 --> 00:13:30,819
few other few other bits and bobs and

00:13:28,500 --> 00:13:32,560
then they were they were talking about

00:13:30,819 --> 00:13:34,839
performance which lasted about 15

00:13:32,560 --> 00:13:37,509
minutes I their 60 minute talk they

00:13:34,839 --> 00:13:41,769
introduced all the contents on this

00:13:37,509 --> 00:13:43,060
slide which is an extreme amount to

00:13:41,769 --> 00:13:46,029
bring in because you can only talk about

00:13:43,060 --> 00:13:46,480
each thing for maybe a few minutes at

00:13:46,029 --> 00:13:48,730
best

00:13:46,480 --> 00:13:51,279
and while students will know about move

00:13:48,730 --> 00:13:53,139
and vector and in place back and what

00:13:51,279 --> 00:13:54,550
constitutes premies that doesn't mean

00:13:53,139 --> 00:13:58,870
they're going to understand why this is

00:13:54,550 --> 00:14:02,559
all related to performance so I argue

00:13:58,870 --> 00:14:05,259
that you should be choosing a handful of

00:14:02,559 --> 00:14:07,389
things for your audience that are

00:14:05,259 --> 00:14:09,519
carefully picked and if you want to talk

00:14:07,389 --> 00:14:11,559
about cache locality and how vector and

00:14:09,519 --> 00:14:12,790
lists have very different applications

00:14:11,559 --> 00:14:13,839
and if you just want to be iterating

00:14:12,790 --> 00:14:16,660
over something even if you want to

00:14:13,839 --> 00:14:18,399
insert into the middle then just talk

00:14:16,660 --> 00:14:21,220
about how that and case like how are you

00:14:18,399 --> 00:14:22,870
related and then also maybe if you want

00:14:21,220 --> 00:14:24,250
to talk about a second thing talk about

00:14:22,870 --> 00:14:27,220
avoiding the FreeStore because that does

00:14:24,250 --> 00:14:31,779
go hand-in-hand with preferring a vector

00:14:27,220 --> 00:14:34,540
over a list before we move on are there

00:14:31,779 --> 00:14:39,779
any questions about this initial section

00:14:34,540 --> 00:14:39,779
of simplicity Titus

00:14:40,760 --> 00:14:47,090
I am not endorsing it I am simply saying

00:14:44,540 --> 00:14:48,830
that there's a lot there sorry and the

00:14:47,090 --> 00:14:52,570
question was am i endorsing what's on

00:14:48,830 --> 00:15:11,060
this slide any other questions

00:14:52,570 --> 00:15:14,690
yes if you want to represent text then

00:15:11,060 --> 00:15:16,310
use a string you can add to it I think

00:15:14,690 --> 00:15:17,750
at first don't talk about removing

00:15:16,310 --> 00:15:20,180
characters but eventually you can and

00:15:17,750 --> 00:15:23,020
that's really it this is for this

00:15:20,180 --> 00:15:26,120
particular section this is really just

00:15:23,020 --> 00:15:28,310
chapter 3 so it's very much a case of

00:15:26,120 --> 00:15:32,540
introductory quest content and the

00:15:28,310 --> 00:15:34,610
question was when string is introduced

00:15:32,540 --> 00:15:36,410
how do you go about teaching is that a

00:15:34,610 --> 00:16:06,110
good summary of a question wonderful

00:15:36,410 --> 00:16:08,750
thank you yes so the question is why

00:16:06,110 --> 00:16:11,870
introduce both in and double when double

00:16:08,750 --> 00:16:15,350
can introduce so when double can

00:16:11,870 --> 00:16:18,530
accurately store a large precision like

00:16:15,350 --> 00:16:21,860
integers to a large precision and it may

00:16:18,530 --> 00:16:26,450
make things simpler even further it I'll

00:16:21,860 --> 00:16:37,850
get to in just a moment or we owe a cert

00:16:26,450 --> 00:16:40,010
equals yes so the summary there was that

00:16:37,850 --> 00:16:44,390
there may be a problem with with

00:16:40,010 --> 00:16:49,970
equality there sorry we really want to

00:16:44,390 --> 00:16:53,360
cast a second question or sure okay so

00:16:49,970 --> 00:16:54,170
in order to say I agree with Peter about

00:16:53,360 --> 00:16:56,240
the

00:16:54,170 --> 00:16:58,130
they're the problems with with comparing

00:16:56,240 --> 00:17:01,370
double the reason that you the integers

00:16:58,130 --> 00:17:02,830
are also introduced is because well

00:17:01,370 --> 00:17:04,670
actually I don't really have a concrete

00:17:02,830 --> 00:17:05,930
answer for you because I haven't thought

00:17:04,670 --> 00:17:08,360
about why are we introducing both of

00:17:05,930 --> 00:17:11,829
them we take this discussion offline way

00:17:08,360 --> 00:17:11,829
and we can talk about a little bit more

00:17:32,410 --> 00:17:37,970
sure I think we should take this

00:17:35,030 --> 00:17:39,230
discussion offline okay so I'm gonna

00:17:37,970 --> 00:17:41,390
have to defer any questions to this

00:17:39,230 --> 00:17:46,220
session to the very end because I would

00:17:41,390 --> 00:17:48,730
like to talk away okay yes I would like

00:17:46,220 --> 00:17:51,650
to talk about keeping content United and

00:17:48,730 --> 00:17:53,960
this is still falling under the topic of

00:17:51,650 --> 00:17:56,000
simplicity and something in Viana has

00:17:53,960 --> 00:17:59,540
been talking about for a very long time

00:17:56,000 --> 00:18:02,120
is making sure that everything in C++ is

00:17:59,540 --> 00:18:03,530
nice and well integrated he published a

00:18:02,120 --> 00:18:05,900
paper very recently tried to remember

00:18:03,530 --> 00:18:08,330
the Vasa and that talks about making

00:18:05,900 --> 00:18:10,340
sure that C++ doesn't crumpled under its

00:18:08,330 --> 00:18:14,620
own way by having individual features

00:18:10,340 --> 00:18:17,990
that don't respect each other and so

00:18:14,620 --> 00:18:23,230
again in my informal survey I took a

00:18:17,990 --> 00:18:25,880
look at how things may be introduced

00:18:23,230 --> 00:18:27,140
when it comes to references and because

00:18:25,880 --> 00:18:29,540
my background is mostly teaching

00:18:27,140 --> 00:18:32,240
beginners C++ that's where this content

00:18:29,540 --> 00:18:34,880
comes from but that doesn't mean that we

00:18:32,240 --> 00:18:36,860
can't pull other topics from this and

00:18:34,880 --> 00:18:39,830
look at how it can be applied more more

00:18:36,860 --> 00:18:41,600
broadly so what we have on screen is an

00:18:39,830 --> 00:18:45,560
l-value we've assigned it I think the

00:18:41,600 --> 00:18:49,750
screen says 10 and we print it out and

00:18:45,560 --> 00:18:53,270
then what we do is we do a reference and

00:18:49,750 --> 00:18:54,890
we cite so we assign the reference the

00:18:53,270 --> 00:18:56,120
value printed out in the show that

00:18:54,890 --> 00:18:58,010
they're exactly the same

00:18:56,120 --> 00:18:59,120
and then we modify them and print them

00:18:58,010 --> 00:19:01,850
both out and show that they've both

00:18:59,120 --> 00:19:03,770
changed and then we modify the reference

00:19:01,850 --> 00:19:06,200
and show again that they've both changed

00:19:03,770 --> 00:19:07,929
and at this point people are wondering

00:19:06,200 --> 00:19:10,779
why do we bother with

00:19:07,929 --> 00:19:15,279
because can we just touch the value

00:19:10,779 --> 00:19:18,039
can't we work with it directly and so

00:19:15,279 --> 00:19:20,350
again this is something that I think we

00:19:18,039 --> 00:19:21,940
should be avoiding because we're talking

00:19:20,350 --> 00:19:23,919
about references in isolation and when

00:19:21,940 --> 00:19:28,269
references are used in isolation they

00:19:23,919 --> 00:19:30,399
are all but useless if however we

00:19:28,269 --> 00:19:33,100
introduce them using functions then we

00:19:30,399 --> 00:19:37,330
can each we can attack three birds with

00:19:33,100 --> 00:19:40,450
one stone and simply achieve a lot more

00:19:37,330 --> 00:19:42,789
so here's a function that takes an

00:19:40,450 --> 00:19:45,190
employee and puts it to the character

00:19:42,789 --> 00:19:47,019
output and I want you to note that the

00:19:45,190 --> 00:19:48,730
employee is being passed by value right

00:19:47,019 --> 00:19:51,460
now because this is a very very

00:19:48,730 --> 00:19:53,289
important starting point employee may or

00:19:51,460 --> 00:19:54,850
may not have more than a string inside

00:19:53,289 --> 00:19:57,490
of it but the point is that we are

00:19:54,850 --> 00:19:58,869
copying something that to everyone in

00:19:57,490 --> 00:20:02,460
the room we probably shouldn't be

00:19:58,869 --> 00:20:04,809
copying and here's a read function and

00:20:02,460 --> 00:20:06,700
the way in which we use it and so we

00:20:04,809 --> 00:20:08,980
show that because we're passing by value

00:20:06,700 --> 00:20:10,779
were performing a copy and everything

00:20:08,980 --> 00:20:12,580
that happens inside the read function

00:20:10,779 --> 00:20:14,679
nothing is actually going to be

00:20:12,580 --> 00:20:17,320
happening back in main so when we read

00:20:14,679 --> 00:20:19,419
in Ada Lovelace and then so when we

00:20:17,320 --> 00:20:20,860
initialize a Lovelace we get Ada

00:20:19,419 --> 00:20:23,110
Lovelace printed out a second time

00:20:20,860 --> 00:20:28,330
because the honors name is never

00:20:23,110 --> 00:20:30,179
actually assigned to what's what what it

00:20:28,330 --> 00:20:33,190
is and so then we talked about how

00:20:30,179 --> 00:20:34,749
references can help us do this it can

00:20:33,190 --> 00:20:37,600
help us fix this problem because now the

00:20:34,749 --> 00:20:41,830
reference is letting us modify what's in

00:20:37,600 --> 00:20:45,309
mine and so we talk about this and after

00:20:41,830 --> 00:20:48,519
that we can go back to the print

00:20:45,309 --> 00:20:51,220
function and say well we've got a we've

00:20:48,519 --> 00:20:52,809
got a print function and we were copying

00:20:51,220 --> 00:20:54,399
that and we probably didn't want to be

00:20:52,809 --> 00:20:56,320
copying it so why don't we turn that

00:20:54,399 --> 00:20:58,960
into a reference as well and the

00:20:56,320 --> 00:21:00,399
constant is still preserved so the

00:20:58,960 --> 00:21:01,840
employee is never going to be modified

00:21:00,399 --> 00:21:05,049
and if we do it's just the same as

00:21:01,840 --> 00:21:07,179
interacting with a constant object and

00:21:05,049 --> 00:21:08,710
after that so we've covered references

00:21:07,179 --> 00:21:10,419
and how they interact with functions and

00:21:08,710 --> 00:21:12,879
after that we can say and there's also a

00:21:10,419 --> 00:21:14,889
print function that is a lot more

00:21:12,879 --> 00:21:17,769
general that's called the Ostrom

00:21:14,889 --> 00:21:20,559
operator we talked about how this this

00:21:17,769 --> 00:21:22,030
function is used with C out or it could

00:21:20,559 --> 00:21:26,140
be used with files

00:21:22,030 --> 00:21:28,540
and so we talked about how the employees

00:21:26,140 --> 00:21:30,220
passed as a reference to Const and the

00:21:28,540 --> 00:21:32,170
oath stream operator so the AI stream

00:21:30,220 --> 00:21:34,510
object is passed by reference and

00:21:32,170 --> 00:21:36,790
returned by reference and you can you

00:21:34,510 --> 00:21:39,850
can talk about the the pitfalls of

00:21:36,790 --> 00:21:41,950
passing as I returning a reference but

00:21:39,850 --> 00:21:43,240
don't go into too much detail when

00:21:41,950 --> 00:21:46,600
you're producing this particular thing

00:21:43,240 --> 00:21:49,210
because it's not it's not essential

00:21:46,600 --> 00:21:50,500
right now and then what we can do is we

00:21:49,210 --> 00:21:53,980
can also talk about the ice cream

00:21:50,500 --> 00:21:59,110
operator and how it's our more generic

00:21:53,980 --> 00:22:05,640
read so there are any questions about

00:21:59,110 --> 00:22:05,640
this section I saw this hand first so

00:22:08,520 --> 00:22:14,080
the question is am i advocating for

00:22:11,920 --> 00:22:16,750
introducing operator overloading at the

00:22:14,080 --> 00:22:19,290
same point as references I'm saying that

00:22:16,750 --> 00:22:21,100
it could be a natural extension I'm

00:22:19,290 --> 00:22:23,980
depending on how you've structured your

00:22:21,100 --> 00:22:25,930
course it may or may not be necessary to

00:22:23,980 --> 00:22:28,420
introduce them at the same time but

00:22:25,930 --> 00:22:30,010
introducing operator overloading as one

00:22:28,420 --> 00:22:32,620
particular unit is not something that

00:22:30,010 --> 00:22:35,310
I'm in favor of because operator

00:22:32,620 --> 00:22:38,170
overloading is something that's

00:22:35,310 --> 00:22:40,600
something that's just writing another

00:22:38,170 --> 00:22:42,700
function and so we say yes they are

00:22:40,600 --> 00:22:44,920
special but it doesn't mean that they

00:22:42,700 --> 00:22:45,840
are deserving of their own category does

00:22:44,920 --> 00:23:18,720
that answer the question

00:22:45,840 --> 00:23:23,460
wonderful that's fair enough

00:23:18,720 --> 00:23:27,220
purple and summarized Peters Peters

00:23:23,460 --> 00:23:28,780
remarks he's you're not a fan of the

00:23:27,220 --> 00:23:30,010
current slide at the moment because that

00:23:28,780 --> 00:23:32,650
means you have to introduce exceptions

00:23:30,010 --> 00:23:34,029
early on and that means that we could

00:23:32,650 --> 00:23:35,770
have we could run in

00:23:34,029 --> 00:23:37,270
complexity problems is that a good

00:23:35,770 --> 00:23:46,720
summary yes

00:23:37,270 --> 00:23:47,770
so I agree with you it's not a

00:23:46,720 --> 00:23:48,750
programming error throwing from the

00:23:47,770 --> 00:23:50,890
constructor

00:23:48,750 --> 00:23:54,460
okay can we I would love to continue

00:23:50,890 --> 00:23:56,049
discussing this and I do have a point

00:23:54,460 --> 00:23:58,210
that I would like to make but I think

00:23:56,049 --> 00:23:59,770
this discussion will open up a nice

00:23:58,210 --> 00:24:01,210
rabbit hole that will be worthy of a

00:23:59,770 --> 00:24:06,600
longer discussion can we talk about

00:24:01,210 --> 00:24:06,600
these are on the table please okay yes

00:24:26,549 --> 00:24:31,690
so your question is if I go back your

00:24:29,890 --> 00:24:35,350
question is because we're talking about

00:24:31,690 --> 00:24:38,730
in parameters you're concerned that is

00:24:35,350 --> 00:24:38,730
maybe throwing a bit too much at them

00:24:42,480 --> 00:24:51,640
bad programming practice okay yes okay

00:24:49,899 --> 00:24:53,350
so I can say we coming from so you

00:24:51,640 --> 00:24:55,090
rather than just avoiding our parameters

00:24:53,350 --> 00:24:57,130
where they can but that means that we

00:24:55,090 --> 00:24:59,169
can't write this function which means

00:24:57,130 --> 00:25:01,090
that we can't use seen with an employee

00:24:59,169 --> 00:25:03,100
we can't use and can't read or write

00:25:01,090 --> 00:25:04,529
this like we can't write to a file and

00:25:03,100 --> 00:25:08,020
so on

00:25:04,529 --> 00:25:09,640
this is unfortunately something that we

00:25:08,020 --> 00:25:13,570
have to we have to work with we want to

00:25:09,640 --> 00:25:16,750
work with streams and it is talking

00:25:13,570 --> 00:25:21,159
about references with with functions is

00:25:16,750 --> 00:25:22,480
at least in my opinion a way of getting

00:25:21,159 --> 00:25:24,279
people to understand where they are

00:25:22,480 --> 00:25:26,679
applicable and why they're important

00:25:24,279 --> 00:25:30,309
really the subject of this entire

00:25:26,679 --> 00:25:33,549
discussion is whoops this one here where

00:25:30,309 --> 00:25:35,710
we have the reference to Const but if we

00:25:33,549 --> 00:25:38,860
just talk about the reference to Const

00:25:35,710 --> 00:25:40,600
then the advantages are really opaque

00:25:38,860 --> 00:25:42,549
because there's nothing that's

00:25:40,600 --> 00:25:44,049
observable whereas with the reference

00:25:42,549 --> 00:25:46,820
one we can see how something is being

00:25:44,049 --> 00:25:48,649
modified but it's not being

00:25:46,820 --> 00:25:49,850
translated to where we actually wanted

00:25:48,649 --> 00:25:52,159
it and then we can talk about how

00:25:49,850 --> 00:25:52,669
copying works does that answer the

00:25:52,159 --> 00:25:58,419
question

00:25:52,669 --> 00:26:02,929
wonderful okay so the next section is on

00:25:58,419 --> 00:26:08,090
tooling and tooling is both an important

00:26:02,929 --> 00:26:11,779
part of engineering and education we

00:26:08,090 --> 00:26:14,750
can't build anything without tools the

00:26:11,779 --> 00:26:16,429
very most important tool we have is the

00:26:14,750 --> 00:26:20,870
compiler we got a compiler we don't get

00:26:16,429 --> 00:26:25,789
a C++ program but the compiler is not

00:26:20,870 --> 00:26:28,580
the only tool that we want our students

00:26:25,789 --> 00:26:30,259
to be using because when they get into

00:26:28,580 --> 00:26:32,509
industry or if they're already in the

00:26:30,259 --> 00:26:37,190
industry as has been remarked by a few

00:26:32,509 --> 00:26:39,710
people in the audience then once they're

00:26:37,190 --> 00:26:41,000
in the industry if they don't have the

00:26:39,710 --> 00:26:44,149
experience of working with continuous

00:26:41,000 --> 00:26:47,360
integration or they don't have the

00:26:44,149 --> 00:26:49,159
experience of working with with kind of

00:26:47,360 --> 00:26:51,649
format and they're been arguing about

00:26:49,159 --> 00:26:55,220
where to place the brace or the white

00:26:51,649 --> 00:26:58,340
space then these sorts of things waste a

00:26:55,220 --> 00:27:01,399
fair amount of time and so in my formal

00:26:58,340 --> 00:27:05,659
survey I conducted a question that asked

00:27:01,399 --> 00:27:07,970
do you teach or encourage some for some

00:27:05,659 --> 00:27:10,549
form of tooling and I was very very

00:27:07,970 --> 00:27:14,419
surprised but also pleased with the

00:27:10,549 --> 00:27:16,909
results because almost everyone said

00:27:14,419 --> 00:27:19,070
that they they teach using they teach

00:27:16,909 --> 00:27:21,169
with some form of version control build

00:27:19,070 --> 00:27:23,899
systems debuggers and profilers and

00:27:21,169 --> 00:27:26,269
that's great because these tools are

00:27:23,899 --> 00:27:29,440
very important I think the next one on

00:27:26,269 --> 00:27:31,970
the line in the list was code formatting

00:27:29,440 --> 00:27:34,490
which is really great because client

00:27:31,970 --> 00:27:36,799
format is an easily accessible tool

00:27:34,490 --> 00:27:39,230
there are other questions on choice of

00:27:36,799 --> 00:27:41,120
IDE but that question had many many

00:27:39,230 --> 00:27:43,549
varied responses so I didn't include

00:27:41,120 --> 00:27:46,250
that one and testing but we'll get to

00:27:43,549 --> 00:27:49,070
testing in just a moment and they got

00:27:46,250 --> 00:27:53,029
short hands in this room when teaching

00:27:49,070 --> 00:27:58,110
who teaches using tools other than a

00:27:53,029 --> 00:28:01,470
compiler and a debugger okay

00:27:58,110 --> 00:28:05,309
that's wonderful and I'm happy to

00:28:01,470 --> 00:28:08,520
discuss the alternate side later on but

00:28:05,309 --> 00:28:11,340
off offline because there's a few things

00:28:08,520 --> 00:28:13,260
I would like to talk about first and so

00:28:11,340 --> 00:28:15,929
what do you mean when we say good

00:28:13,260 --> 00:28:18,809
software engineering skills we want

00:28:15,929 --> 00:28:20,670
people to come out a university or go

00:28:18,809 --> 00:28:23,760
into university if they're learning how

00:28:20,670 --> 00:28:27,299
to program in high school or when

00:28:23,760 --> 00:28:31,380
they're actually being taught internally

00:28:27,299 --> 00:28:32,309
or on-site how to write good software we

00:28:31,380 --> 00:28:33,990
want them to have good software

00:28:32,309 --> 00:28:38,010
engineering skills so way the software

00:28:33,990 --> 00:28:41,100
that they write today is maintainable

00:28:38,010 --> 00:28:43,260
and usable for the next decade the next

00:28:41,100 --> 00:28:45,750
two decades if the software has to last

00:28:43,260 --> 00:28:48,270
for that long and one of the most

00:28:45,750 --> 00:28:50,370
important things actually the most

00:28:48,270 --> 00:28:53,240
important thing that a software engineer

00:28:50,370 --> 00:28:57,750
can can get is correctness because

00:28:53,240 --> 00:28:59,490
correctness is what we need to use what

00:28:57,750 --> 00:29:01,350
we need to ensure in order to say that a

00:28:59,490 --> 00:29:03,960
program solves a particular problem if

00:29:01,350 --> 00:29:06,169
you're not solving that problem then why

00:29:03,960 --> 00:29:11,340
are you writing the program and

00:29:06,169 --> 00:29:14,010
correctness is traditionally checked by

00:29:11,340 --> 00:29:16,260
testing and I was very happy to see in

00:29:14,010 --> 00:29:18,179
the survey that I conducted that the

00:29:16,260 --> 00:29:21,090
majority of teachers that answered said

00:29:18,179 --> 00:29:25,610
that they encouraged at the very least

00:29:21,090 --> 00:29:28,700
some form of testing unfortunately

00:29:25,610 --> 00:29:31,440
testing frameworks were not quite as

00:29:28,700 --> 00:29:33,049
encouraged as I would have liked unit

00:29:31,440 --> 00:29:36,360
tests for something were sort of just

00:29:33,049 --> 00:29:38,250
abstractly encouraged but not actively

00:29:36,360 --> 00:29:41,610
demonstrated using something such as

00:29:38,250 --> 00:29:45,870
catch two or Google benchmark as I'm not

00:29:41,610 --> 00:29:47,370
been to like Google test and so this is

00:29:45,870 --> 00:29:50,010
something that we expect people to go

00:29:47,370 --> 00:29:53,700
into the workforce and actually know

00:29:50,010 --> 00:29:56,490
about and you know they can be trained

00:29:53,700 --> 00:29:59,370
it doesn't take very long to get people

00:29:56,490 --> 00:30:01,559
to learn how to use a testing framework

00:29:59,370 --> 00:30:04,890
but learning how to use it effectively

00:30:01,559 --> 00:30:06,570
is another story how our good unit tests

00:30:04,890 --> 00:30:08,370
written is something that we need to sit

00:30:06,570 --> 00:30:10,930
down and think about and get people to

00:30:08,370 --> 00:30:14,560
understand this should be a module if

00:30:10,930 --> 00:30:16,300
can afford it and I'm of opinion that it

00:30:14,560 --> 00:30:19,030
it should be affordable

00:30:16,300 --> 00:30:21,130
now that the two arrows on screen we we

00:30:19,030 --> 00:30:25,000
have one green one that is solid and one

00:30:21,130 --> 00:30:28,030
red one that is very broken and the

00:30:25,000 --> 00:30:31,360
green solid one means that the results

00:30:28,030 --> 00:30:33,010
from the survey have been in my opinion

00:30:31,360 --> 00:30:34,990
favorable it means that something is

00:30:33,010 --> 00:30:37,060
well represented in the teaching

00:30:34,990 --> 00:30:39,820
community and the red broken one means

00:30:37,060 --> 00:30:43,480
that it's not well represented or it

00:30:39,820 --> 00:30:46,960
could be improved when we talk about

00:30:43,480 --> 00:30:51,850
correctness in C++ that can be ensured

00:30:46,960 --> 00:30:54,130
by a by also relying upon high level

00:30:51,850 --> 00:30:55,660
abstractions and high level abstractions

00:30:54,130 --> 00:31:01,390
allow us to express things like units

00:30:55,660 --> 00:31:04,930
every the Mars orbiter Mars the Mars

00:31:01,390 --> 00:31:07,750
climate orbiter crashed in the night the

00:31:04,930 --> 00:31:10,690
late 1990s because there was a confusion

00:31:07,750 --> 00:31:14,410
between NASA and Lockheed where NASA

00:31:10,690 --> 00:31:16,000
were using necessary using metric units

00:31:14,410 --> 00:31:18,610
and Lockheed were using imperial units

00:31:16,000 --> 00:31:20,440
and NASA said that at the end of the day

00:31:18,610 --> 00:31:22,630
Lockheed were the ones that were not at

00:31:20,440 --> 00:31:25,360
fault because NASA didn't have the

00:31:22,630 --> 00:31:27,520
required checks to ensure that what was

00:31:25,360 --> 00:31:29,260
going into their system were actually in

00:31:27,520 --> 00:31:32,380
metric units if we had relied upon

00:31:29,260 --> 00:31:38,050
high-level abstractions such as making a

00:31:32,380 --> 00:31:39,970
value wrap up or a for four units then

00:31:38,050 --> 00:31:41,590
we could potentially have avoided beside

00:31:39,970 --> 00:31:45,400
this very expensive crater that Mars

00:31:41,590 --> 00:31:49,330
near has and this is where we come to

00:31:45,400 --> 00:31:52,420
compile time checks because compilers

00:31:49,330 --> 00:31:55,510
are able to assist us they can say you

00:31:52,420 --> 00:31:58,240
are not actually doing you're not

00:31:55,510 --> 00:32:01,320
actually doing something that is valid

00:31:58,240 --> 00:32:04,480
within the language or if we turn on

00:32:01,320 --> 00:32:06,150
warnings then they can advisor say you

00:32:04,480 --> 00:32:08,710
may not be doing something that is

00:32:06,150 --> 00:32:10,810
particularly a good idea linters can

00:32:08,710 --> 00:32:15,250
also enable a greater amount of warnings

00:32:10,810 --> 00:32:18,850
and these things are very very important

00:32:15,250 --> 00:32:22,000
for ensuring that we have good correct

00:32:18,850 --> 00:32:22,990
software now I ran a survey on Twitter

00:32:22,000 --> 00:32:25,390
and

00:32:22,990 --> 00:32:29,049
again in my formal survey asking people

00:32:25,390 --> 00:32:31,929
if we have warnings as errors turned on

00:32:29,049 --> 00:32:34,390
in Mako basis and this is probably the

00:32:31,929 --> 00:32:36,970
most divisive question that I asked the

00:32:34,390 --> 00:32:40,029
community because it was I can't read

00:32:36,970 --> 00:32:44,230
the exact results but the results were

00:32:40,029 --> 00:32:45,970
very split especially on Twitter not so

00:32:44,230 --> 00:32:49,570
much in the part in the final poll it

00:32:45,970 --> 00:32:53,190
wasn't quite 50/50 but it was it was

00:32:49,570 --> 00:32:55,840
biased to one side but on Twitter it was

00:32:53,190 --> 00:32:59,470
very heavily debated in terms of other

00:32:55,840 --> 00:33:01,120
tweets and I bring this up because there

00:32:59,470 --> 00:33:02,950
were people who were saying that it

00:33:01,120 --> 00:33:04,750
becomes noisy it becomes it disrupts

00:33:02,950 --> 00:33:06,250
your workflow and we shouldn't be doing

00:33:04,750 --> 00:33:09,850
it and then I believe it was Kate

00:33:06,250 --> 00:33:13,210
Gregory who said that when are too many

00:33:09,850 --> 00:33:16,020
warnings too many warnings and should

00:33:13,210 --> 00:33:19,330
that when should I become hard Eretz and

00:33:16,020 --> 00:33:21,789
is it say at 99 and then tips over to a

00:33:19,330 --> 00:33:24,549
hundred that we we stopped accepting all

00:33:21,789 --> 00:33:26,580
warnings and why do we stop there what's

00:33:24,549 --> 00:33:29,950
the at was this arbitrary number and

00:33:26,580 --> 00:33:32,230
another person mentioned a specific

00:33:29,950 --> 00:33:34,690
example of a warning that I felt was too

00:33:32,230 --> 00:33:37,510
noisy and so I started to think about

00:33:34,690 --> 00:33:41,440
that and I wondered where exactly is it

00:33:37,510 --> 00:33:43,029
that we want to stop this from happening

00:33:41,440 --> 00:33:46,149
if we turn off this particular warning

00:33:43,029 --> 00:33:49,270
then we have globally said this warning

00:33:46,149 --> 00:33:51,760
is allowed everywhere and if we stop it

00:33:49,270 --> 00:33:54,460
on one particular file then what we're

00:33:51,760 --> 00:33:56,140
doing is we're saying that it's global

00:33:54,460 --> 00:33:58,299
ad in this file and people are allowed

00:33:56,140 --> 00:34:00,190
to make mistakes they may not actually

00:33:58,299 --> 00:34:01,870
be wanting to make if you can make a

00:34:00,190 --> 00:34:04,299
guarantee for a localized section you

00:34:01,870 --> 00:34:06,070
want that to be localized so perhaps you

00:34:04,299 --> 00:34:09,790
could provide an assertion there to say

00:34:06,070 --> 00:34:11,050
yes this is correct or you could go out

00:34:09,790 --> 00:34:14,050
of your way to inform the type system

00:34:11,050 --> 00:34:15,550
such as by doing a cast or going out of

00:34:14,050 --> 00:34:18,159
your way and providing some other check

00:34:15,550 --> 00:34:20,139
to ensure that that particular thing has

00:34:18,159 --> 00:34:21,820
been designed correctly so that way the

00:34:20,139 --> 00:34:24,849
warning goes away because you expressed

00:34:21,820 --> 00:34:26,440
what you particularly mean so I'm very

00:34:24,849 --> 00:34:28,869
much an advocate for turning warnings

00:34:26,440 --> 00:34:30,879
into errors but I understand that that

00:34:28,869 --> 00:34:34,619
is not essentially just a cut and dry

00:34:30,879 --> 00:34:34,619
sort of thing and a remote types

00:34:46,890 --> 00:34:51,420
Titus is saying why he would like to

00:34:48,900 --> 00:34:55,000
advocate for what I'm saying there are

00:34:51,420 --> 00:34:58,710
warnings that poorly designed and that

00:34:55,000 --> 00:34:58,710
can inhibit what I'm actually saying

00:35:14,080 --> 00:35:18,940
[Music]

00:35:15,960 --> 00:35:21,670
so in summary compilers are written by

00:35:18,940 --> 00:35:23,470
people who do make mistakes and so we

00:35:21,670 --> 00:35:27,640
shouldn't blindly trust every warning

00:35:23,470 --> 00:35:48,610
that is in the compiler wonderful okay

00:35:27,640 --> 00:35:51,160
so yes the remark there was to add to

00:35:48,610 --> 00:35:53,410
what Titus was saying that Inc clang -

00:35:51,160 --> 00:35:56,140
where everything will turn on literally

00:35:53,410 --> 00:35:57,670
every warning which means that we had we

00:35:56,140 --> 00:36:00,520
can have contradictory those are

00:35:57,670 --> 00:36:03,670
contradictory warnings now I do see a

00:36:00,520 --> 00:36:06,550
few other hands but actually Andrew I

00:36:03,670 --> 00:36:07,900
know has sorry I am specifically

00:36:06,550 --> 00:36:08,980
choosing Andrew because we have talked

00:36:07,900 --> 00:36:37,630
about this a little bit we never

00:36:08,980 --> 00:36:41,830
actually had that discussion so Andrew

00:36:37,630 --> 00:36:43,780
was saying that that when we so the

00:36:41,830 --> 00:36:46,970
types were so sorry Andrew was saying

00:36:43,780 --> 00:36:51,080
that that as a former

00:36:46,970 --> 00:36:53,510
developer on compilers that knowing that

00:36:51,080 --> 00:36:57,440
there are major clients who use that

00:36:53,510 --> 00:37:01,330
compiler and turn on warnings those

00:36:57,440 --> 00:37:03,290
warnings as errors that that in that

00:37:01,330 --> 00:37:05,900
restricts the amount of freedom that

00:37:03,290 --> 00:37:08,150
developers poor compilers have where

00:37:05,900 --> 00:37:09,950
warnings can be questionable or

00:37:08,150 --> 00:37:12,380
contradictory is that a good summary

00:37:09,950 --> 00:37:15,470
okay so I would like to continue talking

00:37:12,380 --> 00:37:17,810
about warnings as errors but I will ask

00:37:15,470 --> 00:37:20,390
that we defer this to the end of a talk

00:37:17,810 --> 00:37:23,360
because there is still a fair amount to

00:37:20,390 --> 00:37:26,600
talk about so what do we mean when we

00:37:23,360 --> 00:37:29,000
talk about correctness we have talked a

00:37:26,600 --> 00:37:30,920
little bit previously about how testing

00:37:29,000 --> 00:37:32,390
is important and compile time checks are

00:37:30,920 --> 00:37:33,770
important relying on the type system and

00:37:32,390 --> 00:37:36,200
high level abstractions are important

00:37:33,770 --> 00:37:39,080
but that's not all that we can do to

00:37:36,200 --> 00:37:43,010
improve our students lives runtime

00:37:39,080 --> 00:37:44,350
analysis is also incredibly important so

00:37:43,010 --> 00:37:46,790
when that was going through university

00:37:44,350 --> 00:37:51,170
the three things that I had brought to

00:37:46,790 --> 00:37:52,580
my attention were profilers sanitizers

00:37:51,170 --> 00:37:55,520
and debug is not necessarily in that

00:37:52,580 --> 00:37:56,840
order and I felt that the way in which

00:37:55,520 --> 00:38:00,650
they were talk was very much a case oh

00:37:56,840 --> 00:38:03,620
just use GDB use valgrind turn on F

00:38:00,650 --> 00:38:06,380
sanitize but they didn't they didn't

00:38:03,620 --> 00:38:08,540
actually explain how to use them or why

00:38:06,380 --> 00:38:09,770
they're important and so it was really

00:38:08,540 --> 00:38:12,080
only through trial and error that that

00:38:09,770 --> 00:38:13,460
sort of thing came about for me to

00:38:12,080 --> 00:38:16,940
understand why they're important to rely

00:38:13,460 --> 00:38:20,290
upon I was really really pleased to see

00:38:16,940 --> 00:38:24,470
that in the survey that I'd asked people

00:38:20,290 --> 00:38:26,800
were teaching these things and also are

00:38:24,470 --> 00:38:30,890
teaching these things and they're

00:38:26,800 --> 00:38:34,190
actively being recommended contracts on

00:38:30,890 --> 00:38:36,440
the other hand and not so much

00:38:34,190 --> 00:38:38,240
I think and I don't mean C++ 20

00:38:36,440 --> 00:38:40,280
contracts because sequels cost 20

00:38:38,240 --> 00:38:42,970
contracts are an Athenian I mean things

00:38:40,280 --> 00:38:46,220
like geocells contracts which are

00:38:42,970 --> 00:38:49,160
essentially glorified assertions or just

00:38:46,220 --> 00:38:52,310
assertions or checking that what's

00:38:49,160 --> 00:38:55,370
passed into a function is actually valid

00:38:52,310 --> 00:38:57,140
for the logic of that function and then

00:38:55,370 --> 00:39:00,040
the reverse or say the inverse which is

00:38:57,140 --> 00:39:01,630
checking that what leaves a function

00:39:00,040 --> 00:39:04,680
are the invariants that we wanted to

00:39:01,630 --> 00:39:07,660
guarantee these things are essentially

00:39:04,680 --> 00:39:12,460
not being covered anywhere near as much

00:39:07,660 --> 00:39:14,380
as the prior three which seem to be well

00:39:12,460 --> 00:39:17,110
covered and contracts are a very

00:39:14,380 --> 00:39:19,000
important part of teaching because if we

00:39:17,110 --> 00:39:22,300
get people who are making sure that

00:39:19,000 --> 00:39:24,160
their functions are being being

00:39:22,300 --> 00:39:26,140
correctly implemented and the things

00:39:24,160 --> 00:39:27,820
that have been cast a valid then we can

00:39:26,140 --> 00:39:29,920
ensure that the code is actually correct

00:39:27,820 --> 00:39:32,760
and I'm aware there are white contracts

00:39:29,920 --> 00:39:34,720
and that there are narrow contracts and

00:39:32,760 --> 00:39:37,540
if you're not familiar with the two

00:39:34,720 --> 00:39:40,570
terms essentially one of the two I can't

00:39:37,540 --> 00:39:42,670
remember which means that the user of

00:39:40,570 --> 00:39:45,550
the function is responsible for checking

00:39:42,670 --> 00:39:48,490
the contract is is it upheld whereas the

00:39:45,550 --> 00:39:50,050
other one ensures that it's like it

00:39:48,490 --> 00:39:51,370
where the other one says that the

00:39:50,050 --> 00:39:54,520
implementer is the one that's actually

00:39:51,370 --> 00:39:57,220
responsible and you can talk about both

00:39:54,520 --> 00:40:03,520
of those and then show examples of where

00:39:57,220 --> 00:40:08,650
they're both necessary as software

00:40:03,520 --> 00:40:15,730
developers we like automation we like I

00:40:08,650 --> 00:40:18,640
like that at the end of this section so

00:40:15,730 --> 00:40:21,490
we like automation and we don't like

00:40:18,640 --> 00:40:24,730
reinventing the wheel we go out of our

00:40:21,490 --> 00:40:27,310
way to write scripts that may sometimes

00:40:24,730 --> 00:40:30,660
it even take longer than doing the task

00:40:27,310 --> 00:40:33,010
on a daily basis to ensure that we don't

00:40:30,660 --> 00:40:36,940
we don't have to do this task ever again

00:40:33,010 --> 00:40:41,230
q and xkc they come and keep reinventing

00:40:36,940 --> 00:40:43,120
the wheel comes in many forms with

00:40:41,230 --> 00:40:46,060
especially with version control where

00:40:43,120 --> 00:40:48,520
instead of creating one file and then

00:40:46,060 --> 00:40:51,040
copying it and modifying the copy and

00:40:48,520 --> 00:40:52,990
then copying that copy and modifying

00:40:51,040 --> 00:40:55,150
that copy and then creating copy to a

00:40:52,990 --> 00:40:57,550
because we want to have like a sub thing

00:40:55,150 --> 00:41:00,400
but we don't lose what we have these are

00:40:57,550 --> 00:41:03,250
the sort of things that we want to avoid

00:41:00,400 --> 00:41:06,010
and version control is the answer to

00:41:03,250 --> 00:41:09,430
that because whether it's yet or another

00:41:06,010 --> 00:41:13,600
form of control this this sort of tool

00:41:09,430 --> 00:41:17,410
is very very powerful

00:41:13,600 --> 00:41:21,130
and gets us to to think about how we

00:41:17,410 --> 00:41:23,470
should be managing a project and again I

00:41:21,130 --> 00:41:24,930
was very pleased to see that the

00:41:23,470 --> 00:41:28,600
majority of people who answered this

00:41:24,930 --> 00:41:31,570
this for this survey that I asked were

00:41:28,600 --> 00:41:34,300
in favor of version control and then we

00:41:31,570 --> 00:41:37,270
have build systems and build systems are

00:41:34,300 --> 00:41:38,680
again an important part of writing good

00:41:37,270 --> 00:41:38,980
software can I get a show of hands

00:41:38,680 --> 00:41:42,280
please

00:41:38,980 --> 00:41:45,040
who uses a build system such a see make

00:41:42,280 --> 00:41:48,580
order okay I'm gonna ask the inverse who

00:41:45,040 --> 00:41:53,050
doesn't use a build system literally no

00:41:48,580 --> 00:41:53,590
one who learnt something okay so can I

00:41:53,050 --> 00:41:55,750
use my hands please

00:41:53,590 --> 00:42:01,960
who knows see mic doesn't matter if it's

00:41:55,750 --> 00:42:03,580
well or not okay that's great so now who

00:42:01,960 --> 00:42:08,020
learnt see mic by looking at others see

00:42:03,580 --> 00:42:13,030
make files and scratching the head okay

00:42:08,020 --> 00:42:16,900
great that's not only how I learnt see

00:42:13,030 --> 00:42:18,460
make as well but how I let make and I

00:42:16,900 --> 00:42:20,350
think I briefly try doing that with

00:42:18,460 --> 00:42:22,900
another build system but I eventually

00:42:20,350 --> 00:42:28,000
decided that sticking with CMake was the

00:42:22,900 --> 00:42:29,860
best option and you don't have to teach

00:42:28,000 --> 00:42:32,530
people how do you actually write those

00:42:29,860 --> 00:42:34,690
build system scripts straight off the

00:42:32,530 --> 00:42:36,910
bat because you're not teaching a see

00:42:34,690 --> 00:42:38,620
Mike class you're teaching a class that

00:42:36,910 --> 00:42:41,800
involves software engineering and C++

00:42:38,620 --> 00:42:44,110
but what you can do is you can take it

00:42:41,800 --> 00:42:45,880
so that way you provide a project

00:42:44,110 --> 00:42:48,250
structure and they can look at that as a

00:42:45,880 --> 00:42:50,560
model for their own project structures

00:42:48,250 --> 00:42:52,900
and then if they have any questions they

00:42:50,560 --> 00:42:55,540
can send you an email ask you know how

00:42:52,900 --> 00:42:57,400
do I actually you how what does the

00:42:55,540 --> 00:42:59,470
target link libraries mean why am I

00:42:57,400 --> 00:43:03,610
having to do this when I want to build

00:42:59,470 --> 00:43:06,100
the project and then we have package

00:43:03,610 --> 00:43:09,190
management and package management has

00:43:06,100 --> 00:43:11,290
been something that's heavily in heavily

00:43:09,190 --> 00:43:15,940
discussed for I believe the past new

00:43:11,290 --> 00:43:18,070
year now at itis no past year and so

00:43:15,940 --> 00:43:19,390
package management is essentially for

00:43:18,070 --> 00:43:21,730
those who don't know package management

00:43:19,390 --> 00:43:25,150
years and there are many talks this this

00:43:21,730 --> 00:43:27,000
week that are better suited then my very

00:43:25,150 --> 00:43:29,250
very brief introduction

00:43:27,000 --> 00:43:32,790
where you have a library that you want

00:43:29,250 --> 00:43:34,350
to link against your so you a library

00:43:32,790 --> 00:43:36,930
you want to use in your project such as

00:43:34,350 --> 00:43:38,430
boost and you don't want to go out and

00:43:36,930 --> 00:43:40,830
download it and build it you just want

00:43:38,430 --> 00:43:42,690
to install it and use it with package

00:43:40,830 --> 00:43:43,770
manager it's very easy to do that again

00:43:42,690 --> 00:43:46,500
you don't have to teach people how to

00:43:43,770 --> 00:43:48,960
use a package manager just provide a

00:43:46,500 --> 00:43:51,450
script and they can look at it if they

00:43:48,960 --> 00:43:55,980
have questions then they'll be able to

00:43:51,450 --> 00:43:57,630
go away and ask you those questions and

00:43:55,980 --> 00:44:01,230
I very invent the wheel means we use

00:43:57,630 --> 00:44:03,210
higher level abstractions which means we

00:44:01,230 --> 00:44:05,670
should be using libraries because

00:44:03,210 --> 00:44:08,340
libraries are solutions to everything

00:44:05,670 --> 00:44:10,290
that we we don't want to have to solve

00:44:08,340 --> 00:44:13,800
our self and that relies on package

00:44:10,290 --> 00:44:19,290
management and that brings us to

00:44:13,800 --> 00:44:22,470
teaching C++ not C and C++ this is a

00:44:19,290 --> 00:44:23,870
very much needed talk that needs to be

00:44:22,470 --> 00:44:27,420
had again

00:44:23,870 --> 00:44:28,980
so I conducted a survey and I asked do

00:44:27,420 --> 00:44:32,670
you teach the common subset of C and C++

00:44:28,980 --> 00:44:34,080
first and I didn't really have an idea

00:44:32,670 --> 00:44:35,760
in mind of what the common sense it

00:44:34,080 --> 00:44:37,620
means I just thought I would leave that

00:44:35,760 --> 00:44:39,750
to the imagination of the people

00:44:37,620 --> 00:44:42,690
answering and you know that means I'll

00:44:39,750 --> 00:44:45,000
teach C first and then C++ you can

00:44:42,690 --> 00:44:45,810
answer that you teach that way if you

00:44:45,000 --> 00:44:49,410
want it to mean

00:44:45,810 --> 00:44:51,240
I teach that arrays then that's

00:44:49,410 --> 00:44:54,510
perfectly fine as well you can answer

00:44:51,240 --> 00:44:56,190
yes other alternatively you can say no I

00:44:54,510 --> 00:44:58,670
left this very a very open-ended

00:44:56,190 --> 00:45:01,080
question and maybe means that you know

00:44:58,670 --> 00:45:02,900
you called my bluff and don't actually

00:45:01,080 --> 00:45:08,900
know what I'm asking about

00:45:02,900 --> 00:45:11,370
so cake Gregory gave a talk in 2015

00:45:08,900 --> 00:45:12,330
titled stop teaching see the context

00:45:11,370 --> 00:45:14,340
because it was a sleepless mice

00:45:12,330 --> 00:45:18,570
conference I mean there it's stopped

00:45:14,340 --> 00:45:19,830
teaching see to C++ students in a C++

00:45:18,570 --> 00:45:22,740
course and she mentioned that in the

00:45:19,830 --> 00:45:25,170
first 30 seconds of her of her talk and

00:45:22,740 --> 00:45:27,360
because Kay has mentioned it made and

00:45:25,170 --> 00:45:31,560
spent an hour on this I don't think of

00:45:27,360 --> 00:45:33,360
much else for me to say right I'm sorry

00:45:31,560 --> 00:45:35,100
that we could probably spend like a full

00:45:33,360 --> 00:45:37,380
day talking about this and independently

00:45:35,100 --> 00:45:40,210
and not reach the bottom of the barrel

00:45:37,380 --> 00:45:43,000
but I am going to

00:45:40,210 --> 00:45:44,830
talk about things that take either very

00:45:43,000 --> 00:45:49,050
briefly touched on or didn't talk about

00:45:44,830 --> 00:45:52,690
at all and so on on screen we have very

00:45:49,050 --> 00:45:55,900
important assertion just because C came

00:45:52,690 --> 00:45:56,440
before C++ does not mean that we teach C

00:45:55,900 --> 00:45:58,270
first

00:45:56,440 --> 00:46:01,869
we don't teach maths in chronological

00:45:58,270 --> 00:46:04,180
order it doesn't mean so but similarly

00:46:01,869 --> 00:46:05,740
we don't teach C++ by starting with what

00:46:04,180 --> 00:46:07,270
came before that if we were to do that

00:46:05,740 --> 00:46:12,640
then we would be teaching English by

00:46:07,270 --> 00:46:15,940
starting the German and French okay so

00:46:12,640 --> 00:46:22,720
can I get a show of hands who here

00:46:15,940 --> 00:46:24,510
thinks that C++ was built on C okay

00:46:22,720 --> 00:46:28,990
leave it leave your hand up if you think

00:46:24,510 --> 00:46:35,500
that is the only language that C++ was

00:46:28,990 --> 00:46:39,460
built on back in 1979 okay good because

00:46:35,500 --> 00:46:42,070
similar came first as well and no one in

00:46:39,460 --> 00:46:45,930
their right mind would teach similar

00:46:42,070 --> 00:46:47,890
before they teach C++ in a C++ course

00:46:45,930 --> 00:46:49,990
and you can read more about this in

00:46:47,890 --> 00:46:53,619
design and evolution of C++ which talks

00:46:49,990 --> 00:46:55,300
about the philosophy of C++ and about

00:46:53,619 --> 00:46:57,010
how certain things are designed in

00:46:55,300 --> 00:47:00,430
certain ways and why they design that

00:46:57,010 --> 00:47:03,670
way and why you shouldn't talk about

00:47:00,430 --> 00:47:04,990
certain things first and I really

00:47:03,670 --> 00:47:06,220
recommend that you read this because it

00:47:04,990 --> 00:47:10,990
does go into understanding the

00:47:06,220 --> 00:47:13,780
philosophy of the C++ unfortunately I

00:47:10,990 --> 00:47:16,480
think was a good 2/3 of people didn't

00:47:13,780 --> 00:47:18,310
read haven't read it before teaching and

00:47:16,480 --> 00:47:20,170
there are a few people who answered

00:47:18,310 --> 00:47:21,520
maybe I'm taking that to mean maybe they

00:47:20,170 --> 00:47:24,220
read it and they forgotten or they

00:47:21,520 --> 00:47:27,640
weren't sure again maybe is sort of

00:47:24,220 --> 00:47:29,050
really just calling my bluff so we

00:47:27,640 --> 00:47:31,960
should keep being simple and I want to

00:47:29,050 --> 00:47:44,349
reiterate what many people have said

00:47:31,960 --> 00:47:46,060
before me on these stages hello I can

00:47:44,349 --> 00:47:47,470
see what you're saying I'm sorry I have

00:47:46,060 --> 00:47:50,859
to continue I'll take in the question

00:47:47,470 --> 00:47:52,849
section so I would like to reiterate

00:47:50,859 --> 00:47:57,019
something specifically that heard

00:47:52,849 --> 00:48:00,079
said which is that although see is a

00:47:57,019 --> 00:48:03,019
simpler language C++ programs are

00:48:00,079 --> 00:48:06,670
simpler than C programs because of the

00:48:03,019 --> 00:48:06,670
high level abstractions that they offer

00:48:07,119 --> 00:48:13,759
ok let's compare the pair we have on

00:48:10,729 --> 00:48:15,829
screen to textually identical programs

00:48:13,759 --> 00:48:17,839
there is nothing different about them

00:48:15,829 --> 00:48:22,579
they're both going to be compiled on an

00:48:17,839 --> 00:48:25,460
i7 here is the command that I used to

00:48:22,579 --> 00:48:27,489
get the C++ program compiling if you're

00:48:25,460 --> 00:48:30,410
not familiar with the bash system then

00:48:27,489 --> 00:48:33,109
echoed dollar question mark means get

00:48:30,410 --> 00:48:34,069
the return value and it prints out 1 can

00:48:33,109 --> 00:48:36,650
I get a show of hands please

00:48:34,069 --> 00:48:40,999
who things for the C program is going to

00:48:36,650 --> 00:48:46,150
give me the exact same output if I

00:48:40,999 --> 00:48:46,150
wasn't asking this question in a talk

00:48:48,369 --> 00:48:54,680
the answer is actually 4 because on the

00:48:52,249 --> 00:48:58,969
left hand side we have C which says that

00:48:54,680 --> 00:49:01,369
the size of a character literal is the

00:48:58,969 --> 00:49:03,200
same size as an 8 whereas in C++ it's

00:49:01,369 --> 00:49:06,499
the same size as a chart which means

00:49:03,200 --> 00:49:11,239
that even though we can have a valid C

00:49:06,499 --> 00:49:13,339
and a valid C++ program where they are

00:49:11,239 --> 00:49:16,640
textually identical they may not be

00:49:13,339 --> 00:49:19,369
semantically identical and this is quite

00:49:16,640 --> 00:49:21,739
problematic it means that we shouldn't

00:49:19,369 --> 00:49:27,650
be starting with teaching C we should be

00:49:21,739 --> 00:49:30,799
starting by teaching C++ as C++ and so

00:49:27,650 --> 00:49:33,109
here we have on screen that a matrix

00:49:30,799 --> 00:49:34,009
where were you we add things and what

00:49:33,109 --> 00:49:36,499
we're gonna do is we're gonna do it the

00:49:34,009 --> 00:49:38,779
C way we copy the matrix we iterate over

00:49:36,499 --> 00:49:41,329
it we have to do dereferencing Kate has

00:49:38,779 --> 00:49:42,769
mentioned this about pointers and how a

00:49:41,329 --> 00:49:44,420
key pointers are especially for

00:49:42,769 --> 00:49:46,729
beginners and so I'm not gonna get into

00:49:44,420 --> 00:49:49,489
that this is how we would do it and C++

00:49:46,729 --> 00:49:52,430
with references we immediately lose two

00:49:49,489 --> 00:49:55,400
characters and if we want to be a little

00:49:52,430 --> 00:49:57,109
bit more descriptive about what we're

00:49:55,400 --> 00:49:59,329
doing instead of showing how we want to

00:49:57,109 --> 00:50:00,619
add two matrices together what we would

00:49:59,329 --> 00:50:02,839
do is we would use transform and

00:50:00,619 --> 00:50:04,740
describe exactly what is happening you

00:50:02,839 --> 00:50:07,140
may argue yes this is

00:50:04,740 --> 00:50:08,520
this is descriptive but it's also gonna

00:50:07,140 --> 00:50:09,750
be a lot more but people gonna

00:50:08,520 --> 00:50:11,369
understand that we're talking about

00:50:09,750 --> 00:50:12,990
starting from the beginning of the

00:50:11,369 --> 00:50:14,250
matrix and going to the end of that

00:50:12,990 --> 00:50:15,510
matrix and then going sailing for the

00:50:14,250 --> 00:50:18,300
beginning every other one and we're

00:50:15,510 --> 00:50:22,680
going to add them together but okay

00:50:18,300 --> 00:50:24,600
whatever this this is explaining

00:50:22,680 --> 00:50:25,980
something even more actually something

00:50:24,600 --> 00:50:31,440
that's more descriptive it's explaining

00:50:25,980 --> 00:50:33,420
what is happening and the C way if we do

00:50:31,440 --> 00:50:34,740
this results in a memory leak because we

00:50:33,420 --> 00:50:36,780
have pointers and we had to allocate

00:50:34,740 --> 00:50:37,860
something on the FreeStore whereas in

00:50:36,780 --> 00:50:40,880
the c++ way

00:50:37,860 --> 00:50:43,140
ra íí- will protect us at the very least

00:50:40,880 --> 00:50:47,250
but we can go one step further

00:50:43,140 --> 00:50:50,160
turn on notice guard and with the wearer

00:50:47,250 --> 00:50:53,880
application that i was doing earlier we

00:50:50,160 --> 00:50:55,290
get an hard error now I did say that I

00:50:53,880 --> 00:50:57,320
would take questions at this point but

00:50:55,290 --> 00:50:59,280
I'm going to defer them to the very end

00:50:57,320 --> 00:51:00,180
because I would like to talk about

00:50:59,280 --> 00:51:03,619
looking to the future

00:51:00,180 --> 00:51:07,680
and what's in store in the future

00:51:03,619 --> 00:51:11,820
concerns by OOP

00:51:07,680 --> 00:51:15,060
went too far concerns so on screen are

00:51:11,820 --> 00:51:16,920
the WG 21 Direction group and the

00:51:15,060 --> 00:51:21,330
direction group are a group of people

00:51:16,920 --> 00:51:23,850
that do prefer people that concerned

00:51:21,330 --> 00:51:26,670
about how C++ is going to progress into

00:51:23,850 --> 00:51:28,200
the future and where it's where it's

00:51:26,670 --> 00:51:30,480
headed and what can be done to ensure

00:51:28,200 --> 00:51:33,000
the safest plus continues to leave to

00:51:30,480 --> 00:51:34,470
the message of that viana has given from

00:51:33,000 --> 00:51:37,890
the very beginning we just have

00:51:34,470 --> 00:51:40,670
lightweight abstractions and one of the

00:51:37,890 --> 00:51:44,160
key concerns in education especially

00:51:40,670 --> 00:51:47,540
from a standard point of view the key

00:51:44,160 --> 00:51:50,130
educational interests they have academia

00:51:47,540 --> 00:51:52,590
consulting and internal and on-site

00:51:50,130 --> 00:51:56,340
training and you can read more about

00:51:52,590 --> 00:51:59,340
this in their paper which is p0 939 the

00:51:56,340 --> 00:52:01,200
link is on on the slide and so I'm going

00:51:59,340 --> 00:52:04,890
I'm going to talk about their concerns

00:52:01,200 --> 00:52:07,140
in form of a was known as a pseudo study

00:52:04,890 --> 00:52:08,970
group of Education now JC van winkle and

00:52:07,140 --> 00:52:11,220
myself have been working closely with

00:52:08,970 --> 00:52:12,750
the with the Direction group to work out

00:52:11,220 --> 00:52:16,050
ways in which we can talk about

00:52:12,750 --> 00:52:17,600
education at standards meetings and in

00:52:16,050 --> 00:52:21,080
various other calls

00:52:17,600 --> 00:52:24,440
to ensure that education in C++ is

00:52:21,080 --> 00:52:26,480
preserved and improved and is propelled

00:52:24,440 --> 00:52:28,640
into the future as more and more

00:52:26,480 --> 00:52:31,790
standards go along and we would like to

00:52:28,640 --> 00:52:35,480
ask that you join us and one of the

00:52:31,790 --> 00:52:38,090
things that that we believe is and

00:52:35,480 --> 00:52:40,670
that's Jacy myself believe that the goal

00:52:38,090 --> 00:52:42,940
of this education Study Group is that we

00:52:40,670 --> 00:52:46,040
should establish a set of educational

00:52:42,940 --> 00:52:48,860
guidelines they don't prescribe a

00:52:46,040 --> 00:52:50,120
particular curriculum but rather things

00:52:48,860 --> 00:52:51,680
that you can do to improve your

00:52:50,120 --> 00:52:55,850
curriculum or if you're building a brand

00:52:51,680 --> 00:52:58,730
new curriculum what can be done to to

00:52:55,850 --> 00:53:00,820
make that a course that actually doesn't

00:52:58,730 --> 00:53:04,940
scare people off that gets them to

00:53:00,820 --> 00:53:12,740
program in the way of a C++ programmer

00:53:04,940 --> 00:53:14,650
in 2018 or 2020 or 2022 have at the

00:53:12,740 --> 00:53:18,410
moment what are known as Toni tables

00:53:14,650 --> 00:53:20,900
Toni tables are showing things that were

00:53:18,410 --> 00:53:21,890
and things that are proposed or sorry

00:53:20,900 --> 00:53:24,820
things that are and things that are

00:53:21,890 --> 00:53:28,730
proposed on the left-hand side we have

00:53:24,820 --> 00:53:30,760
what was in C++ 14 where we have to

00:53:28,730 --> 00:53:34,940
actually explicitly provide the type of

00:53:30,760 --> 00:53:37,520
the vector whereas in C++ 17 the

00:53:34,940 --> 00:53:39,890
proposed mechanism was to eliminate the

00:53:37,520 --> 00:53:43,430
entry and let the compiler deduce that

00:53:39,890 --> 00:53:45,260
based on the context this is a great way

00:53:43,430 --> 00:53:47,920
to start out perhaps we could have

00:53:45,260 --> 00:53:49,880
documents that explain what it is that a

00:53:47,920 --> 00:53:52,250
particular proposal is talking about

00:53:49,880 --> 00:53:54,740
from an educational standpoint this

00:53:52,250 --> 00:53:57,560
remains to be seen because we would like

00:53:54,740 --> 00:53:59,930
to establish this group and have a group

00:53:57,560 --> 00:54:02,180
of people at the next standards meeting

00:53:59,930 --> 00:54:05,990
which is in San Diego in early November

00:54:02,180 --> 00:54:07,910
where we can talk about what it is that

00:54:05,990 --> 00:54:10,820
the Standish so the sans committee

00:54:07,910 --> 00:54:12,260
should be concerned about and what we

00:54:10,820 --> 00:54:14,180
need to be discussing when we need to be

00:54:12,260 --> 00:54:15,790
discussing and how we can actually

00:54:14,180 --> 00:54:20,300
achieve these goals

00:54:15,790 --> 00:54:22,190
so I hope that you have been able to

00:54:20,300 --> 00:54:27,290
take something away from this from this

00:54:22,190 --> 00:54:29,780
talk and that you've liked that you're

00:54:27,290 --> 00:54:32,830
interested in participating in this

00:54:29,780 --> 00:54:35,960
this pseudo study group and hopefully a

00:54:32,830 --> 00:54:38,890
actual study group and above all I hope

00:54:35,960 --> 00:54:42,710
that you will be able to go out and

00:54:38,890 --> 00:54:45,650
influence your students to write better

00:54:42,710 --> 00:54:56,270
software then we have written as it is

00:54:45,650 --> 00:54:59,810
today thank you now we have three and a

00:54:56,270 --> 00:55:03,760
half minutes and so I'm happy to take

00:54:59,810 --> 00:55:03,760
questions both online and offline

00:55:04,420 --> 00:55:10,970
so two of the major questions I had

00:55:08,030 --> 00:55:12,140
coming to this talk that weren't covered

00:55:10,970 --> 00:55:14,720
and I know you can't cover everything

00:55:12,140 --> 00:55:17,240
where where do you teach

00:55:14,720 --> 00:55:20,750
move semantics and where do you start

00:55:17,240 --> 00:55:23,150
talking about regular types and yep

00:55:20,750 --> 00:55:26,120
is there a short answer to that I don't

00:55:23,150 --> 00:55:28,490
want to take up all the question time so

00:55:26,120 --> 00:55:33,290
I don't have to repeat the question now

00:55:28,490 --> 00:55:35,930
that's great okay so about move

00:55:33,290 --> 00:55:38,510
semantics that comes into the discussion

00:55:35,930 --> 00:55:41,570
or where you discuss ownership that's

00:55:38,510 --> 00:55:43,910
not an early sort of situation but it's

00:55:41,570 --> 00:55:46,670
also not a late-game situation it really

00:55:43,910 --> 00:55:49,100
depends on how you've structured your

00:55:46,670 --> 00:55:52,480
course but definitely I would say not in

00:55:49,100 --> 00:55:54,710
the first third and as for regular types

00:55:52,480 --> 00:55:56,690
that's a much more complex question and

00:55:54,710 --> 00:55:59,030
I would prefer not to discuss it right

00:55:56,690 --> 00:56:01,880
now but as the in five minutes I'm more

00:55:59,030 --> 00:56:03,590
than happy to do so so can we please get

00:56:01,880 --> 00:56:06,640
people to come to the microphone so the

00:56:03,590 --> 00:56:06,640
questions are recorded

00:56:25,500 --> 00:56:33,070
so the remark was that you can compile

00:56:29,170 --> 00:56:34,930
AC program using a C++ compiler and you

00:56:33,070 --> 00:56:37,240
can't do that with a similar program and

00:56:34,930 --> 00:56:38,590
that's correct you can compile some C

00:56:37,240 --> 00:56:40,750
programs using a safe loss blast

00:56:38,590 --> 00:56:43,270
compiler but I have just demonstrated

00:56:40,750 --> 00:56:46,450
that not all textually equivalent C

00:56:43,270 --> 00:56:47,830
programs the same semantically to a C++

00:56:46,450 --> 00:56:51,580
program that doesn't make them

00:56:47,830 --> 00:56:53,080
immediately C++ programs and the values

00:56:51,580 --> 00:56:54,310
that a C programmer have the philosophy

00:56:53,080 --> 00:56:57,430
that they have when they're writing

00:56:54,310 --> 00:57:00,490
programs is in no way the same or even

00:56:57,430 --> 00:57:10,060
similar to the way that a C++ programmer

00:57:00,490 --> 00:57:11,710
writes a program mm-hmm yeah you find a

00:57:10,060 --> 00:57:14,080
shaky okay yes I understand me coming

00:57:11,710 --> 00:57:17,460
from I see a line here for I will

00:57:14,080 --> 00:57:22,740
probably this later on hello

00:57:17,460 --> 00:57:22,740
preprocessor it's an unfortunate thing

00:57:23,849 --> 00:57:28,359
avoid a way you can and the moment

00:57:26,500 --> 00:57:31,119
modules come in and are readily usable

00:57:28,359 --> 00:57:37,180
please move to them does that answer the

00:57:31,119 --> 00:57:39,520
question enough sure okay we have only

00:57:37,180 --> 00:57:41,320
45 seconds left right I just have a

00:57:39,520 --> 00:57:43,890
small comment every time someone

00:57:41,320 --> 00:57:47,349
compares C to C++ they come up with some

00:57:43,890 --> 00:57:49,780
contrived example of the C code they say

00:57:47,349 --> 00:57:53,160
oh this was so bad and I see this plus

00:57:49,780 --> 00:57:55,990
plus version is so better so much better

00:57:53,160 --> 00:57:58,900
that's actually very unfair especially

00:57:55,990 --> 00:58:01,060
since C actually is a very simple

00:57:58,900 --> 00:58:03,070
language you only have like seven things

00:58:01,060 --> 00:58:05,890
you would need to keep in mind while in

00:58:03,070 --> 00:58:09,609
C++ you can hurt your foot like every

00:58:05,890 --> 00:58:11,560
other line so so beyond I mentioned this

00:58:09,609 --> 00:58:13,150
in designed evolution that it's not fair

00:58:11,560 --> 00:58:14,619
to do a language comparison because

00:58:13,150 --> 00:58:17,109
usually one of the parties will be

00:58:14,619 --> 00:58:18,790
biased to a particular language and I

00:58:17,109 --> 00:58:22,240
completely agree with that I do have

00:58:18,790 --> 00:58:25,150
more a bias in favor of C++ but I am

00:58:22,240 --> 00:58:27,339
going to say that what while you are

00:58:25,150 --> 00:58:28,690
correct see is a simple language but C++

00:58:27,339 --> 00:58:30,760
programs are simpler that is herb's

00:58:28,690 --> 00:58:32,079
message and that is something that I

00:58:30,760 --> 00:58:35,500
would love to continue discussing with

00:58:32,079 --> 00:58:37,490
you but now maybe later on all right

00:58:35,500 --> 00:58:43,170
thank you

00:58:37,490 --> 00:58:43,170

YouTube URL: https://www.youtube.com/watch?v=3AkPd9Nt2Aw


