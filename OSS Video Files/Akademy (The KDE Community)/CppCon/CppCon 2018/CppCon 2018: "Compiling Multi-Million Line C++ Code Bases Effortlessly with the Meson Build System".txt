Title: CppCon 2018: "Compiling Multi-Million Line C++ Code Bases Effortlessly with the Meson Build System"
Publication date: 2018-10-09
Playlist: CppCon 2018
Description: 
	http://CppCon.org

Jussi Pakkanen
"Compiling Multi-Million Line C++ Code Bases Effortlessly with the Meson Build System"
â€”
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
â€”
The Meson build system is a fresh build system designed from the ground up to solve the build problems of today. It is currently seeing growing adoption across many domains and is already being used to build large chunks of most modern Linux distributions. One of the main reasons for this is Meson's heavy focus on usability, meaning that build definitions are both powerful and easy to understand. 

In this talk we shall look into the design and use of Meson from the ground up going up all the way to projects with millions of lines of code and complex build setups such as code generators and cross compilation. We shall especially examine the problem of dependencies and how Meson solves this age old problem with a composable design that supports both system provided and self built dependencies from the same build definition. Finally we will examine the multi-language support of Meson for easily combining C++ with other languages such as Java, C#, D and Python.
â€” 
Jussi Pakkanen, Consultant
Jussi Pakkanen is the creator and project lead of the Meson build system. He is currently working as a consultant. He has experience in many different fields of computing ranging from slot machines to mail sorting, computer security, Linux desktop development and gaming. His free time has been equally colorful, including things such as comics and illustration, directing movies, music and electronics. When not working on projects he might be found watching bad movies, especially sci-fi and the finest of trash from the 80s.
â€”
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,060 --> 00:00:04,500
good afternoon my name is Joseph Bucklin

00:00:02,399 --> 00:00:07,680
and I'm here to talk to you about build

00:00:04,500 --> 00:00:10,230
systems specifically the mess and build

00:00:07,680 --> 00:00:14,730
system of which I'm the main developer

00:00:10,230 --> 00:00:16,470
and project leader so the method system

00:00:14,730 --> 00:00:18,630
if you put it in a nutshell it's

00:00:16,470 --> 00:00:21,480
basically a build system for multiple

00:00:18,630 --> 00:00:23,279
languages C and C++ are the main ones

00:00:21,480 --> 00:00:26,099
but we also support a bunch of other

00:00:23,279 --> 00:00:28,830
ones and we optimized for the the needs

00:00:26,099 --> 00:00:31,800
of today and not from 80s so if you are

00:00:28,830 --> 00:00:33,750
running hp-ux from 1989 you're not going

00:00:31,800 --> 00:00:37,680
to be happy with our thing it could work

00:00:33,750 --> 00:00:40,530
but it's not in any way guaranteed our

00:00:37,680 --> 00:00:43,980
goal is to be fast lean and efficient

00:00:40,530 --> 00:00:45,660
and spending resources or like CPU

00:00:43,980 --> 00:00:47,789
resources on the build system is not

00:00:45,660 --> 00:00:52,440
very useful because there's they're

00:00:47,789 --> 00:00:54,239
better used when running the compiler we

00:00:52,440 --> 00:00:56,520
also be our our goal is to be scalable

00:00:54,239 --> 00:00:59,129
so we need to be scalable for tens of

00:00:56,520 --> 00:01:02,280
thousands of files like the rough goal

00:00:59,129 --> 00:01:03,960
is that we need to be able to scale to

00:01:02,280 --> 00:01:05,909
those sorts of things which you can

00:01:03,960 --> 00:01:08,729
compile on a single machine so something

00:01:05,909 --> 00:01:10,799
like on the size of chromium it should

00:01:08,729 --> 00:01:14,939
be usable it should be snappy and there

00:01:10,799 --> 00:01:17,159
should be no lagging we are kind of like

00:01:14,939 --> 00:01:18,990
the opposite of an IDE or a social

00:01:17,159 --> 00:01:20,850
network is that we want you to use us as

00:01:18,990 --> 00:01:22,560
little as possible you are much more

00:01:20,850 --> 00:01:24,840
productive students doing something else

00:01:22,560 --> 00:01:26,310
than writing build definitions so learn

00:01:24,840 --> 00:01:29,189
to minimize the time you have to do that

00:01:26,310 --> 00:01:31,409
and they build the physics that we have

00:01:29,189 --> 00:01:34,409
are it's it's a to be simple and

00:01:31,409 --> 00:01:36,090
readable and not to incomplete and this

00:01:34,409 --> 00:01:39,180
is by design and we're and we're not

00:01:36,090 --> 00:01:41,189
going to add to incompleteness ever well

00:01:39,180 --> 00:01:43,170
this seems all funny good but when I

00:01:41,189 --> 00:01:44,850
talk to people about this they'll always

00:01:43,170 --> 00:01:49,100
say well is there someone else using it

00:01:44,850 --> 00:01:54,390
so let's see here's a screenshot from

00:01:49,100 --> 00:01:54,990
Fedora Linux and there's a file File

00:01:54,390 --> 00:01:58,229
Viewer

00:01:54,990 --> 00:02:00,240
and the thing there so if you click on

00:01:58,229 --> 00:02:02,310
that then what happens is it opens up

00:02:00,240 --> 00:02:06,329
this video player and shows you the

00:02:02,310 --> 00:02:09,179
video so this video player application

00:02:06,329 --> 00:02:12,599
is called gnome videos it's being built

00:02:09,179 --> 00:02:13,470
with math and build system the videos

00:02:12,599 --> 00:02:15,300
are being

00:02:13,470 --> 00:02:17,520
with a multimedia framework called

00:02:15,300 --> 00:02:21,030
GStreamer it consists of hundreds of

00:02:17,520 --> 00:02:23,220
plugins l-sit and h.264 and all that

00:02:21,030 --> 00:02:25,830
sort of thing and this can also be built

00:02:23,220 --> 00:02:27,090
with mason build system the file manager

00:02:25,830 --> 00:02:30,840
you see in the back is called Nautilus

00:02:27,090 --> 00:02:34,620
it's also built with messin there's no

00:02:30,840 --> 00:02:36,360
shell which is the thing that takes care

00:02:34,620 --> 00:02:40,590
of all of the windows and all of the

00:02:36,360 --> 00:02:42,330
logins and so on the GDK widget toolkit

00:02:40,590 --> 00:02:44,250
which is the default widget toolkit on

00:02:42,330 --> 00:02:46,230
linux starting with version for its

00:02:44,250 --> 00:02:49,560
upcoming it's going to be also built

00:02:46,230 --> 00:02:51,690
with messin this the X server itself

00:02:49,560 --> 00:02:53,910
which is also buildable with messin I'm

00:02:51,690 --> 00:02:57,240
not sure if they have that upstream F or

00:02:53,910 --> 00:03:00,060
in master but it's buildable then

00:02:57,240 --> 00:03:04,020
there's the Mesa 3d which is the 3d

00:03:00,060 --> 00:03:05,940
graphics driver subsystem so they Vulcan

00:03:04,020 --> 00:03:07,740
implementation OpenGL implementation all

00:03:05,940 --> 00:03:10,440
the drivers that are part of use of

00:03:07,740 --> 00:03:11,460
space those are all all buildable with

00:03:10,440 --> 00:03:14,430
messin and they're going to drop off

00:03:11,460 --> 00:03:17,370
their old one soon and then their system

00:03:14,430 --> 00:03:18,930
D which is what most people call is that

00:03:17,370 --> 00:03:21,150
one process which takes over all of

00:03:18,930 --> 00:03:23,580
Linux eventually but we have managed to

00:03:21,150 --> 00:03:26,790
take it over it first so it's buildable

00:03:23,580 --> 00:03:30,750
with Mezen now so it's it's used prepare

00:03:26,790 --> 00:03:33,000
Lots in in the open source world there

00:03:30,750 --> 00:03:34,500
are proprietary projects unfortunately

00:03:33,000 --> 00:03:36,600
companies usually don't really tell

00:03:34,500 --> 00:03:38,160
about them but based on indirect

00:03:36,600 --> 00:03:41,160
measurements we know that this is being

00:03:38,160 --> 00:03:43,170
used in lots of different commercial

00:03:41,160 --> 00:03:48,330
companies for some reason especially

00:03:43,170 --> 00:03:51,270
much for embedded but let's let's get

00:03:48,330 --> 00:03:54,120
into actual compilation of code because

00:03:51,270 --> 00:03:56,070
that's what we had talked about so let's

00:03:54,120 --> 00:04:01,200
create a very simple hello world project

00:03:56,070 --> 00:04:02,940
from scratch so here's the screenshot of

00:04:01,200 --> 00:04:04,890
a terminal and we run

00:04:02,940 --> 00:04:07,800
Metin a give it the init command which

00:04:04,890 --> 00:04:10,820
kind of like git init and and we specify

00:04:07,800 --> 00:04:11,970
the project name is going to be CT pecan

00:04:10,820 --> 00:04:14,820
then

00:04:11,970 --> 00:04:17,489
- LCVP means that the language it could

00:04:14,820 --> 00:04:19,530
generate should be zeros + - b means

00:04:17,489 --> 00:04:22,350
that it should also build thing in

00:04:19,530 --> 00:04:23,640
addition to creating it and type

00:04:22,350 --> 00:04:25,740
executable means that we have to create

00:04:23,640 --> 00:04:26,910
an executable as opposed to a simple

00:04:25,740 --> 00:04:31,180
library

00:04:26,910 --> 00:04:33,010
so then it runs this and and you can see

00:04:31,180 --> 00:04:35,620
is creating a snus sample project and

00:04:33,010 --> 00:04:38,290
then it runs and builds and uncie you

00:04:35,620 --> 00:04:40,210
see he's using GCC a port one which is

00:04:38,290 --> 00:04:42,010
the default compiler on the Fedora

00:04:40,210 --> 00:04:44,770
installation that this was being used

00:04:42,010 --> 00:04:48,760
for and then it builds and it links and

00:04:44,770 --> 00:04:51,460
if you run it then you get output of

00:04:48,760 --> 00:04:55,060
this is CV pecan so you can go from

00:04:51,460 --> 00:05:00,130
nothing to a project which builds and

00:04:55,060 --> 00:05:02,620
runs in about two seconds so let's look

00:05:00,130 --> 00:05:04,450
at the build definition next I could

00:05:02,620 --> 00:05:06,250
explain to you but I'm gonna instead do

00:05:04,450 --> 00:05:09,310
something else I'm gonna give you ten

00:05:06,250 --> 00:05:10,840
seconds to just read to that built

00:05:09,310 --> 00:05:13,300
efficient file it's going to show up

00:05:10,840 --> 00:05:15,880
soon and then we'll go from there so

00:05:13,300 --> 00:05:29,320
you're gonna have ten seconds starting

00:05:15,880 --> 00:05:31,900
from now okay and time so based only on

00:05:29,320 --> 00:05:34,300
this ten seconds and and you've read to

00:05:31,900 --> 00:05:36,250
this how many of you would say that you

00:05:34,300 --> 00:05:37,450
understand what's happening here you're

00:05:36,250 --> 00:05:39,640
likely just raise your hand if you think

00:05:37,450 --> 00:05:40,690
you understand what's happening okay for

00:05:39,640 --> 00:05:43,210
for the viewers at home

00:05:40,690 --> 00:05:44,740
that's almost everyone in the rule so

00:05:43,210 --> 00:05:47,020
this is what we mean by readability

00:05:44,740 --> 00:05:49,150
there's there's no ampere sense that no

00:05:47,020 --> 00:05:51,250
dollar signs or anything like that it's

00:05:49,150 --> 00:05:53,140
fairly readable you have a project you

00:05:51,250 --> 00:05:54,910
have a sip of cost version and you

00:05:53,140 --> 00:05:57,450
create an executable with one file and

00:05:54,910 --> 00:06:00,010
install it and then this unit tests for

00:05:57,450 --> 00:06:03,370
which you define it's called basic it's

00:06:00,010 --> 00:06:05,620
it's fairly simple but this is actually

00:06:03,370 --> 00:06:09,610
quite powerful because just with this

00:06:05,620 --> 00:06:12,220
you can get a bunch of other things so

00:06:09,610 --> 00:06:13,960
let's go through those so first of all

00:06:12,220 --> 00:06:15,760
you get the different build types this

00:06:13,960 --> 00:06:17,110
kind of like what Simek does you have a

00:06:15,760 --> 00:06:20,830
debug build they have an optimized build

00:06:17,110 --> 00:06:22,539
all the sorts of things there's a

00:06:20,830 --> 00:06:25,990
language standard flag which you can use

00:06:22,539 --> 00:06:28,720
to select like c++ 14 17 11 whatever you

00:06:25,990 --> 00:06:32,590
want and it's it's automatically applied

00:06:28,720 --> 00:06:35,140
to all compilations there's a test suite

00:06:32,590 --> 00:06:36,610
runner so you just define your tests and

00:06:35,140 --> 00:06:39,159
you can have run a test command it will

00:06:36,610 --> 00:06:40,300
do all that and it will automatically

00:06:39,159 --> 00:06:43,750
run all of your unit

00:06:40,300 --> 00:06:46,240
test in parallel and you can tell it

00:06:43,750 --> 00:06:47,740
it's like certain tests can't be run in

00:06:46,240 --> 00:06:51,580
parallel that's that's fine you can do

00:06:47,740 --> 00:06:54,250
that then you can also get coverage

00:06:51,580 --> 00:06:55,840
reports and you don't have to copy lots

00:06:54,250 --> 00:06:57,430
of text from one place to another and

00:06:55,840 --> 00:06:59,710
try to find Stack Overflow this is

00:06:57,430 --> 00:07:01,599
simple options like I want to have a

00:06:59,710 --> 00:07:03,819
coverage report and then just one you

00:07:01,599 --> 00:07:05,460
can pile run your test and then say

00:07:03,819 --> 00:07:07,800
generate the report and then it's done

00:07:05,460 --> 00:07:10,060
and you don't have to worry about that

00:07:07,800 --> 00:07:12,159
this warning level total who have you

00:07:10,060 --> 00:07:15,789
enjoy writing the thing where you have W

00:07:12,159 --> 00:07:19,300
all and some compilers and - w3e or

00:07:15,789 --> 00:07:20,530
something on this Visual Studio but it's

00:07:19,300 --> 00:07:22,690
not really interesting so we have

00:07:20,530 --> 00:07:24,129
warning level toggle that automatically

00:07:22,690 --> 00:07:26,229
takes care of this for you and you can

00:07:24,129 --> 00:07:29,949
change that without having to change the

00:07:26,229 --> 00:07:31,930
build difficult files that you have we

00:07:29,949 --> 00:07:33,940
have native unity build support so in

00:07:31,930 --> 00:07:36,610
this case there's only one file so unity

00:07:33,940 --> 00:07:38,469
build follows and really help but yeah

00:07:36,610 --> 00:07:40,030
this is toggle for that just toggle that

00:07:38,469 --> 00:07:42,039
and it builds every file that you have

00:07:40,030 --> 00:07:46,150
every project you have in unity built

00:07:42,039 --> 00:07:48,580
mode there's native precompiled header

00:07:46,150 --> 00:07:50,500
support you just need to write your

00:07:48,580 --> 00:07:52,479
peek-a-ball header file and say i would

00:07:50,500 --> 00:07:54,219
like to use this precompiled header for

00:07:52,479 --> 00:07:57,599
this target and it will do all of the

00:07:54,219 --> 00:07:57,599
magic necessary to make it happen

00:07:58,090 --> 00:08:01,900
cross compilation support native

00:08:00,789 --> 00:08:04,740
out-of-the-box you don't have to do

00:08:01,900 --> 00:08:07,120
anything in this particular case it just

00:08:04,740 --> 00:08:10,449
said I want a cross compilation to this

00:08:07,120 --> 00:08:13,599
target and then the Desa link time

00:08:10,449 --> 00:08:15,789
optimization and propulsion optimization

00:08:13,599 --> 00:08:18,099
so those for that it just enabled them

00:08:15,789 --> 00:08:19,479
if you want to sanitize reports or

00:08:18,099 --> 00:08:21,279
address an entire series and there's all

00:08:19,479 --> 00:08:23,440
those things if the compiler is you're

00:08:21,279 --> 00:08:24,729
currently using supports the sanitizers

00:08:23,440 --> 00:08:28,900
then there's toggle option where you can

00:08:24,729 --> 00:08:31,900
just say flip and now it's on scan build

00:08:28,900 --> 00:08:35,289
which is the static analysis tool that

00:08:31,900 --> 00:08:36,880
comes with client there's full support

00:08:35,289 --> 00:08:38,649
for that so if you have that installed

00:08:36,880 --> 00:08:40,719
will automatically generate for you a

00:08:38,649 --> 00:08:42,849
target called scan build so you can just

00:08:40,719 --> 00:08:48,010
run it and then it will do the automatic

00:08:42,849 --> 00:08:50,709
necessary to generate the thing this was

00:08:48,010 --> 00:08:52,839
landed a few weeks ago so there's the

00:08:50,709 --> 00:08:54,160
selection toggle for your visual studio

00:08:52,839 --> 00:08:55,990
runtime

00:08:54,160 --> 00:08:58,480
by default it matches what your bill

00:08:55,990 --> 00:09:01,779
type is but if you want to specify okay

00:08:58,480 --> 00:09:03,459
I want to use the - MT then you can do

00:09:01,779 --> 00:09:04,660
that there's a one trouble option for

00:09:03,459 --> 00:09:09,579
that and you don't have to put it in

00:09:04,660 --> 00:09:12,639
your build definition files and all this

00:09:09,579 --> 00:09:14,860
is a bit of an interesting one so Mason

00:09:12,639 --> 00:09:18,070
has a thing where if you build shared

00:09:14,860 --> 00:09:20,110
libraries and then executables that link

00:09:18,070 --> 00:09:22,810
against them and then you change the

00:09:20,110 --> 00:09:26,019
implementation but not the interface of

00:09:22,810 --> 00:09:28,660
of the shared library then when you

00:09:26,019 --> 00:09:31,800
rebuild if you automatically skip real

00:09:28,660 --> 00:09:34,120
inking for all of the executables and

00:09:31,800 --> 00:09:35,829
there are people here probably in this

00:09:34,120 --> 00:09:36,970
room who think that like static linking

00:09:35,829 --> 00:09:38,440
is the best thing ever and that's the

00:09:36,970 --> 00:09:40,449
only thing anyone should ever do and

00:09:38,440 --> 00:09:42,639
like why would anyone ever use share

00:09:40,449 --> 00:09:44,139
linking well one of the reasons being

00:09:42,639 --> 00:09:45,940
that if you do this then you have

00:09:44,139 --> 00:09:48,250
incremental builds which are tend to

00:09:45,940 --> 00:09:50,470
100x faster which is kind of nice

00:09:48,250 --> 00:09:52,449
especially if you're one like one of me

00:09:50,470 --> 00:09:57,790
who don't have a spare data center to

00:09:52,449 --> 00:09:59,860
run your compiles in so but that was

00:09:57,790 --> 00:10:00,730
building and building source code is

00:09:59,860 --> 00:10:05,740
actually the easy part

00:10:00,730 --> 00:10:08,140
what's hard are the dependencies and a

00:10:05,740 --> 00:10:09,579
good question is so what are why are

00:10:08,140 --> 00:10:12,820
dependent is hard what is the thing that

00:10:09,579 --> 00:10:14,110
actually makes them difficult and what

00:10:12,820 --> 00:10:16,839
makes it difficult is that there's so

00:10:14,110 --> 00:10:18,670
much variability if you have a large

00:10:16,839 --> 00:10:21,190
project and you have what's the things

00:10:18,670 --> 00:10:23,050
happening I wasn't typically what you

00:10:21,190 --> 00:10:26,529
have is that you have a big project and

00:10:23,050 --> 00:10:29,740
composes of lots of small projects it's

00:10:26,529 --> 00:10:32,649
a project dependencies and so on some of

00:10:29,740 --> 00:10:33,790
those are internal so you have people in

00:10:32,649 --> 00:10:35,470
your organization working on some

00:10:33,790 --> 00:10:36,790
library and you want to use that and

00:10:35,470 --> 00:10:38,949
then there are external libraries from

00:10:36,790 --> 00:10:42,760
from the open source community which is

00:10:38,949 --> 00:10:44,709
probably all using the dependencies can

00:10:42,760 --> 00:10:47,860
come from the system order you can build

00:10:44,709 --> 00:10:49,660
them yourself if you want to if you

00:10:47,860 --> 00:10:51,760
insist on building your dependencies

00:10:49,660 --> 00:10:54,430
yourself and you want your software to

00:10:51,760 --> 00:10:57,550
be included in the Debian you're gonna

00:10:54,430 --> 00:10:59,740
have a bad time and and on the other

00:10:57,550 --> 00:11:01,180
hand if you just use what Debian has

00:10:59,740 --> 00:11:04,029
you're going to have way too old

00:11:01,180 --> 00:11:05,410
dependencies and it's gonna be tricky to

00:11:04,029 --> 00:11:07,600
do and you so you really want to have

00:11:05,410 --> 00:11:09,160
both

00:11:07,600 --> 00:11:10,450
your dependents might be shared

00:11:09,160 --> 00:11:13,300
libraries they might be static libraries

00:11:10,450 --> 00:11:15,550
name of your healer or libraries you

00:11:13,300 --> 00:11:18,160
might have a mono repo you might have

00:11:15,550 --> 00:11:19,990
kits of modules you might have not get

00:11:18,160 --> 00:11:21,760
such modules but instead many git repos

00:11:19,990 --> 00:11:23,880
and a script that puts them together in

00:11:21,760 --> 00:11:26,410
magical ways and then you can compile

00:11:23,880 --> 00:11:28,240
your dependency might being tarballs

00:11:26,410 --> 00:11:30,340
because it's specified that you can only

00:11:28,240 --> 00:11:35,890
build from these blessed specific

00:11:30,340 --> 00:11:37,990
releases and not from anything else and

00:11:35,890 --> 00:11:39,940
Dimond dependencies are the things that

00:11:37,990 --> 00:11:42,370
make these things interesting because if

00:11:39,940 --> 00:11:44,080
you have some sort of dependency that's

00:11:42,370 --> 00:11:45,760
been used from two different places you

00:11:44,080 --> 00:11:48,940
really want them both to use the same

00:11:45,760 --> 00:11:50,800
one because this is not no js' but this

00:11:48,940 --> 00:11:52,510
is actually like you have to get rid of

00:11:50,800 --> 00:11:53,980
all these duplicate dependencies because

00:11:52,510 --> 00:11:58,680
otherwise you're going to have a very

00:11:53,980 --> 00:12:01,030
bad time and usually if you have a big

00:11:58,680 --> 00:12:02,950
repository there are multiple things

00:12:01,030 --> 00:12:04,960
that you want to produce out of it so if

00:12:02,950 --> 00:12:07,570
you're working on games you might want

00:12:04,960 --> 00:12:09,070
to produce different games which share

00:12:07,570 --> 00:12:10,480
most of the code but some parts are

00:12:09,070 --> 00:12:12,460
different and you did want to toggle

00:12:10,480 --> 00:12:12,790
between which one you want to build but

00:12:12,460 --> 00:12:15,040
maybe

00:12:12,790 --> 00:12:16,510
you provide something like firmware or

00:12:15,040 --> 00:12:17,950
something like that where you need to

00:12:16,510 --> 00:12:20,440
both build different things for

00:12:17,950 --> 00:12:22,150
different Hardware hardware platforms

00:12:20,440 --> 00:12:23,680
and depending on what you're targeting

00:12:22,150 --> 00:12:28,450
you build different things and have

00:12:23,680 --> 00:12:30,910
different dependencies and then you have

00:12:28,450 --> 00:12:32,530
usually all most projects have options

00:12:30,910 --> 00:12:34,180
where you can toggle things as like

00:12:32,530 --> 00:12:37,930
whether you build with some back-end or

00:12:34,180 --> 00:12:39,520
some other bank end and these are

00:12:37,930 --> 00:12:41,940
usually shared so if you have many

00:12:39,520 --> 00:12:45,670
dependencies it might be that one

00:12:41,940 --> 00:12:48,340
specific thing is shared across five

00:12:45,670 --> 00:12:49,750
different sub projects but not any of

00:12:48,340 --> 00:12:51,580
the other ones but then there's another

00:12:49,750 --> 00:12:54,010
dependency which is ceremonious or some

00:12:51,580 --> 00:12:58,210
other ones and it gets very complicated

00:12:54,010 --> 00:13:02,080
very fast and this was the easy part

00:12:58,210 --> 00:13:03,700
so for for extra bonus points when you

00:13:02,080 --> 00:13:05,560
are developing on a big project and

00:13:03,700 --> 00:13:07,660
especially if you have a mono repository

00:13:05,560 --> 00:13:10,180
what you really want to do is you want

00:13:07,660 --> 00:13:12,010
to only focus on a very small subset at

00:13:10,180 --> 00:13:14,230
a time like if you're working on a

00:13:12,010 --> 00:13:16,240
string class implementation you really

00:13:14,230 --> 00:13:18,970
want to only have this your string class

00:13:16,240 --> 00:13:20,860
and nothing that depends on it because

00:13:18,970 --> 00:13:21,190
if you need to rebuild the entire world

00:13:20,860 --> 00:13:23,080
every

00:13:21,190 --> 00:13:25,480
time you do a change it doesn't really

00:13:23,080 --> 00:13:27,190
work and and if there were people who

00:13:25,480 --> 00:13:30,520
are thinking is like yeah but I can just

00:13:27,190 --> 00:13:32,350
manually run make my target because I

00:13:30,520 --> 00:13:34,300
know that it cannot affect anything else

00:13:32,350 --> 00:13:36,160
don't do that because it's gonna break

00:13:34,300 --> 00:13:37,870
and experience has shown that this will

00:13:36,160 --> 00:13:39,820
always break so you really want to have

00:13:37,870 --> 00:13:43,090
some sort of tooling support to make

00:13:39,820 --> 00:13:45,070
this simple and easy and workable so

00:13:43,090 --> 00:13:47,830
let's look at this in a graph form in a

00:13:45,070 --> 00:13:49,570
is a simplified version of what what the

00:13:47,830 --> 00:13:51,820
dependencies tree might look like so you

00:13:49,570 --> 00:13:54,160
have a bunch of sub projects which OOP

00:13:51,820 --> 00:13:57,060
right which have dependencies between

00:13:54,160 --> 00:14:01,300
them and then you have build options

00:13:57,060 --> 00:14:03,520
which are somehow going like this and

00:14:01,300 --> 00:14:06,550
then what you want to do is build that

00:14:03,520 --> 00:14:09,880
one thing that nothing above it and as

00:14:06,550 --> 00:14:11,740
and then this dependency must come from

00:14:09,880 --> 00:14:13,390
the system there these are the things

00:14:11,740 --> 00:14:15,010
usually come up it's like you really

00:14:13,390 --> 00:14:16,930
this is a thing that you have to do and

00:14:15,010 --> 00:14:18,340
then it's like well how do I make that

00:14:16,930 --> 00:14:25,930
happen and this usually gets very

00:14:18,340 --> 00:14:29,190
difficult so what if I told you that in

00:14:25,930 --> 00:14:33,550
Mason we support all of these cases

00:14:29,190 --> 00:14:36,520
using only three primitives if you don't

00:14:33,550 --> 00:14:38,140
believe me raise your hand okay there

00:14:36,520 --> 00:14:41,410
are some some people who are skeptical

00:14:38,140 --> 00:14:44,560
okay so let's do let's go to that so

00:14:41,410 --> 00:14:47,530
perhaps the main thing we have is that

00:14:44,560 --> 00:14:50,320
when you build a soft project it's built

00:14:47,530 --> 00:14:52,360
as a sandboxed separate entity so it

00:14:50,320 --> 00:14:55,960
cannot access anything outside of its

00:14:52,360 --> 00:14:57,490
own world this is different in like in

00:14:55,960 --> 00:14:59,050
CMake where you can just add soubrette

00:14:57,490 --> 00:15:00,910
or you can go inside of the other one

00:14:59,050 --> 00:15:03,700
and then they can change your global

00:15:00,910 --> 00:15:05,440
state and and in the in mess and this is

00:15:03,700 --> 00:15:07,839
not possible we prevent you from doing

00:15:05,440 --> 00:15:09,790
that and you have to do the very

00:15:07,839 --> 00:15:11,589
isolated build so all of your sub

00:15:09,790 --> 00:15:13,950
projects can be built in isolation from

00:15:11,589 --> 00:15:13,950
each other

00:15:14,080 --> 00:15:19,930
the second thing is that in Mason

00:15:16,450 --> 00:15:22,810
dependencies are objects and an object

00:15:19,930 --> 00:15:24,550
encapsulate a way of how the dependency

00:15:22,810 --> 00:15:26,650
is provided so it might come from the

00:15:24,550 --> 00:15:30,310
system it might come from a thing you

00:15:26,650 --> 00:15:32,110
build yourself or from wherever but when

00:15:30,310 --> 00:15:34,840
you have a dependency object you don't

00:15:32,110 --> 00:15:36,970
care you can just put it in

00:15:34,840 --> 00:15:38,050
and say use this and then the system

00:15:36,970 --> 00:15:40,590
will take care of putting everything

00:15:38,050 --> 00:15:43,450
else so this is kind of like a

00:15:40,590 --> 00:15:45,670
dependency object which has medical many

00:15:43,450 --> 00:15:48,840
different shapes is kind of like a multi

00:15:45,670 --> 00:15:52,450
formic dependency object if you will and

00:15:48,840 --> 00:15:56,050
the third one this is a bit of bit

00:15:52,450 --> 00:15:58,840
esoteric but the project options have a

00:15:56,050 --> 00:16:01,990
way of specifying a thing called

00:15:58,840 --> 00:16:05,100
yielding so if you have a dependency

00:16:01,990 --> 00:16:08,590
which has an option with a specific name

00:16:05,100 --> 00:16:10,930
that sub project can say and that's in

00:16:08,590 --> 00:16:13,750
the event that I'm being built as a sub

00:16:10,930 --> 00:16:15,910
project and the master project has a

00:16:13,750 --> 00:16:18,460
dependency or not it has an option with

00:16:15,910 --> 00:16:22,240
the same name then instead of returning

00:16:18,460 --> 00:16:25,210
my value return the parent months and in

00:16:22,240 --> 00:16:27,460
this way you can enforce that the option

00:16:25,210 --> 00:16:29,710
values are same across all of your

00:16:27,460 --> 00:16:32,230
things but if you build any one of these

00:16:29,710 --> 00:16:36,460
in isolation then you can just toggle

00:16:32,230 --> 00:16:38,470
the option for that one so looking at

00:16:36,460 --> 00:16:41,290
how this would look like if you have a

00:16:38,470 --> 00:16:43,720
dependency added so so the things that

00:16:41,290 --> 00:16:46,150
are added are in yellow compared to the

00:16:43,720 --> 00:16:47,500
ones you saw earlier so the the

00:16:46,150 --> 00:16:49,690
interesting line here is the first

00:16:47,500 --> 00:16:54,580
yellow one where we are using a lower

00:16:49,690 --> 00:16:57,730
dependency on our project so this is the

00:16:54,580 --> 00:17:00,460
very common no mess and nomenclature for

00:16:57,730 --> 00:17:03,040
saying that I want a dependency called

00:17:00,460 --> 00:17:06,310
Lua and try to find it from the system

00:17:03,040 --> 00:17:08,800
and in the event that you cannot find it

00:17:06,310 --> 00:17:11,650
from there then build it as a sub

00:17:08,800 --> 00:17:14,560
project it's in a very specific place

00:17:11,650 --> 00:17:16,990
and then it returned the dependency

00:17:14,560 --> 00:17:19,510
object from that one and then after that

00:17:16,990 --> 00:17:21,490
the dependency object at runtime will

00:17:19,510 --> 00:17:24,400
contain either the system dependency or

00:17:21,490 --> 00:17:26,020
the one you built yourself but for using

00:17:24,400 --> 00:17:28,720
it you don't have to care you just put

00:17:26,020 --> 00:17:31,030
it in the target or you want to use that

00:17:28,720 --> 00:17:34,780
and then all of the magic happens

00:17:31,030 --> 00:17:37,240
automatically so this this is kind of

00:17:34,780 --> 00:17:39,190
like a pool model where you don't have

00:17:37,240 --> 00:17:41,140
to build everything all the dependencies

00:17:39,190 --> 00:17:42,760
in advance you can just start from the

00:17:41,140 --> 00:17:44,440
bottom s and say like I want to build

00:17:42,760 --> 00:17:46,180
this and then they will say I want this

00:17:44,440 --> 00:17:48,430
I want this I want this and then the

00:17:46,180 --> 00:17:51,660
system will add them as needed and you

00:17:48,430 --> 00:17:55,330
only the minimal stuff that you need and

00:17:51,660 --> 00:17:58,870
once you have this then you can now

00:17:55,330 --> 00:18:02,170
build your thing you can build you can

00:17:58,870 --> 00:18:04,210
build any subsection of the entire

00:18:02,170 --> 00:18:06,370
project you can take any thing that's

00:18:04,210 --> 00:18:08,050
like I want to build that one and it

00:18:06,370 --> 00:18:10,930
will only build that and the things that

00:18:08,050 --> 00:18:12,340
it depends on and it dependency

00:18:10,930 --> 00:18:13,510
combination if you want to get this know

00:18:12,340 --> 00:18:16,030
the system you want to build yourself

00:18:13,510 --> 00:18:18,640
you can toggle between them in any way

00:18:16,030 --> 00:18:20,350
and the important piece here you don't

00:18:18,640 --> 00:18:22,300
have to change your build definition

00:18:20,350 --> 00:18:26,110
files in order to tell you where the

00:18:22,300 --> 00:18:27,820
dependencies are coming from there would

00:18:26,110 --> 00:18:29,500
be a live demo this is only a 30 minute

00:18:27,820 --> 00:18:32,350
presentation so it has to be skipped

00:18:29,500 --> 00:18:39,700
unfortunately but it would have been

00:18:32,350 --> 00:18:42,730
great so onwards which is the Python

00:18:39,700 --> 00:18:48,580
thing so Mezen is implemented in Python

00:18:42,730 --> 00:18:51,970
and this is a sticking point for many so

00:18:48,580 --> 00:18:54,310
the common thing people say is that the

00:18:51,970 --> 00:18:56,140
C++ build system and package manager

00:18:54,310 --> 00:18:58,860
should be implemented in C++

00:18:56,140 --> 00:19:02,260
so who here agrees with this statement

00:18:58,860 --> 00:19:03,870
okay there are lots of hands okay so

00:19:02,260 --> 00:19:06,940
let's let's go with this

00:19:03,870 --> 00:19:08,320
so the rust build system and packaged

00:19:06,940 --> 00:19:14,260
managed to be written in rust who agrees

00:19:08,320 --> 00:19:15,790
with this two guys okay the goal build

00:19:14,260 --> 00:19:17,610
system and pavatt managed to be

00:19:15,790 --> 00:19:20,770
implemented ago who agrees with this one

00:19:17,610 --> 00:19:21,760
same people the deep built system of it

00:19:20,770 --> 00:19:23,740
okay so you get the point

00:19:21,760 --> 00:19:27,340
can you spot the obvious problem of this

00:19:23,740 --> 00:19:34,900
I see the C make maintainer nodding

00:19:27,340 --> 00:19:37,090
anyone else yeah so this actually has

00:19:34,900 --> 00:19:39,880
been spotted quite a long time ago by by

00:19:37,090 --> 00:19:41,680
a person we all know so this is a quote

00:19:39,880 --> 00:19:43,300
from the RNA saying that anyone claiming

00:19:41,680 --> 00:19:44,950
to have a perfect programming language

00:19:43,300 --> 00:19:48,760
is either a Salesman or a fool and

00:19:44,950 --> 00:19:50,620
probably both so the the big problem

00:19:48,760 --> 00:19:52,630
with with having a single language build

00:19:50,620 --> 00:19:56,260
system and dependency manager is that

00:19:52,630 --> 00:19:58,660
each one of them is a silo they isolate

00:19:56,260 --> 00:20:01,040
you from their it so if you get into one

00:19:58,660 --> 00:20:07,040
ecosystem it's very hard so

00:20:01,040 --> 00:20:09,620
work with other ones and but the being

00:20:07,040 --> 00:20:12,080
what the world is today a single program

00:20:09,620 --> 00:20:15,290
which is just not the best thing for one

00:20:12,080 --> 00:20:16,820
even for C++ or as an example things

00:20:15,290 --> 00:20:19,160
some things that you might want to do is

00:20:16,820 --> 00:20:20,540
that if you have a crypto library you

00:20:19,160 --> 00:20:22,910
might want to have it written in rust

00:20:20,540 --> 00:20:24,440
because that's where rust is score you

00:20:22,910 --> 00:20:27,140
really want to have all of the possible

00:20:24,440 --> 00:20:29,410
power and and security that you want and

00:20:27,140 --> 00:20:31,790
you would want to like combine those two

00:20:29,410 --> 00:20:33,770
so the thing is that if you have a

00:20:31,790 --> 00:20:35,120
project which has many different

00:20:33,770 --> 00:20:37,250
programming language which is quite

00:20:35,120 --> 00:20:39,470
common these days then the thing is that

00:20:37,250 --> 00:20:42,500
you're not in not any one of them is

00:20:39,470 --> 00:20:45,050
gonna have a build system a package

00:20:42,500 --> 00:20:47,510
manager written in itself because you

00:20:45,050 --> 00:20:49,220
really only want to have one build

00:20:47,510 --> 00:20:51,230
system and one package manager in any

00:20:49,220 --> 00:20:54,230
one build directory if you have more

00:20:51,230 --> 00:20:55,670
than one it's going to fail there arts

00:20:54,230 --> 00:20:59,290
of people who desperately want this to

00:20:55,670 --> 00:21:02,300
not be true unfortunately at least sorry

00:20:59,290 --> 00:21:05,360
but in Mesa we try to process in a

00:21:02,300 --> 00:21:08,030
different way so the design we have is

00:21:05,360 --> 00:21:11,690
that you should be able to mix and match

00:21:08,030 --> 00:21:13,550
languages completely freely all of the

00:21:11,690 --> 00:21:16,040
languages that we have they should just

00:21:13,550 --> 00:21:17,960
work together seamlessly so that you can

00:21:16,040 --> 00:21:21,950
you can choose the best thing that for

00:21:17,960 --> 00:21:24,830
you so let's build a Python extension as

00:21:21,950 --> 00:21:27,710
an example and in this Python exemption

00:21:24,830 --> 00:21:29,390
we're going to have C or obviously

00:21:27,710 --> 00:21:31,840
because that's that's the language that

00:21:29,390 --> 00:21:37,940
the Python extension modules needs to be

00:21:31,840 --> 00:21:41,480
C++ rust and Fortran in a one single

00:21:37,940 --> 00:21:44,270
shared object module so the code for

00:21:41,480 --> 00:21:49,940
this can be found in the github address

00:21:44,270 --> 00:21:52,100
shown and so let's spend consists I have

00:21:49,940 --> 00:21:54,170
some time so think about all the people

00:21:52,100 --> 00:21:56,540
here in the room so think about how many

00:21:54,170 --> 00:21:57,920
lines of code would you need to write in

00:21:56,540 --> 00:22:00,620
the build system that you're currently

00:21:57,920 --> 00:22:02,030
using to make this happen so for

00:22:00,620 --> 00:22:06,920
different languages and you need to pull

00:22:02,030 --> 00:22:09,950
the Python extension okay so let's see

00:22:06,920 --> 00:22:13,350
how many lines of code it takes for Mesa

00:22:09,950 --> 00:22:18,150
so alright ready one

00:22:13,350 --> 00:22:22,760
two three four five six seven eight

00:22:18,150 --> 00:22:27,690
done and this is all you need to write

00:22:22,760 --> 00:22:31,980
and this is at the end this is what

00:22:27,690 --> 00:22:35,030
Nathan really is all about the the

00:22:31,980 --> 00:22:37,770
conceptual model is very similar to SQL

00:22:35,030 --> 00:22:40,260
you're built definition file should

00:22:37,770 --> 00:22:42,870
explain what you want to happen it

00:22:40,260 --> 00:22:44,370
should not have to explain how you do

00:22:42,870 --> 00:22:46,530
these things like all the steps you need

00:22:44,370 --> 00:22:49,350
to do it's just like this is what I want

00:22:46,530 --> 00:22:53,250
to happen and then the system takes care

00:22:49,350 --> 00:22:55,049
it for you because I don't know about

00:22:53,250 --> 00:22:56,640
you personally but I really don't want

00:22:55,049 --> 00:22:59,360
to spend the rest of my life babysitting

00:22:56,640 --> 00:23:03,720
compiler flags I just want to do stuff

00:22:59,360 --> 00:23:06,539
it's actually useful since I have some

00:23:03,720 --> 00:23:09,690
minutes of time they say hidden bond

00:23:06,539 --> 00:23:13,860
around because there was time for

00:23:09,690 --> 00:23:15,870
exercise so we added lure to the sample

00:23:13,860 --> 00:23:17,909
project so let's now look at how you

00:23:15,870 --> 00:23:23,039
would do the package management and

00:23:17,909 --> 00:23:26,730
download part so you create a directory

00:23:23,039 --> 00:23:28,230
called sub projects which has all of the

00:23:26,730 --> 00:23:32,159
dependencies have to be in this

00:23:28,230 --> 00:23:35,340
particular directory name and then you

00:23:32,159 --> 00:23:37,409
ensure this command so rap is the

00:23:35,340 --> 00:23:39,450
command that we use to for downloading

00:23:37,409 --> 00:23:43,320
dependencies from a service that we have

00:23:39,450 --> 00:23:45,750
called rap database and it consists of

00:23:43,320 --> 00:23:47,100
the upstream tarball and then method

00:23:45,750 --> 00:23:49,919
build definitions that we have written

00:23:47,100 --> 00:23:51,690
and which people can contribute and and

00:23:49,919 --> 00:23:55,890
they come together to build the thing as

00:23:51,690 --> 00:24:00,390
a dependency so this then does the web

00:23:55,890 --> 00:24:02,460
calls to get Lua 5.3 which is the latest

00:24:00,390 --> 00:24:06,390
version available in the rain roughly at

00:24:02,460 --> 00:24:10,620
the time and then you just start

00:24:06,390 --> 00:24:13,409
building and in here we see that it

00:24:10,620 --> 00:24:16,590
couldn't find lower from the system so

00:24:13,409 --> 00:24:19,440
it then downloads it's from the blue

00:24:16,590 --> 00:24:21,120
edit org website and then after it's

00:24:19,440 --> 00:24:22,409
done that it downloads the patch file

00:24:21,120 --> 00:24:26,309
which contains the build definition

00:24:22,409 --> 00:24:27,000
files from the rack database and then it

00:24:26,309 --> 00:24:29,309
starts

00:24:27,000 --> 00:24:32,120
executing that and then it configures to

00:24:29,309 --> 00:24:35,429
war and compiles it and all of that and

00:24:32,120 --> 00:24:37,409
then compiles on links and that's it and

00:24:35,429 --> 00:24:39,000
that's all you really need to do to get

00:24:37,409 --> 00:24:42,960
it dependencies downloaded from the

00:24:39,000 --> 00:24:44,429
internet and it's not directly tied the

00:24:42,960 --> 00:24:47,100
service that we run if you want to run

00:24:44,429 --> 00:24:49,470
your own go for it

00:24:47,100 --> 00:24:51,750
but this is how you would manage a

00:24:49,470 --> 00:24:55,740
download dependencies automatically on

00:24:51,750 --> 00:24:57,809
all platforms that support nuts there

00:24:55,740 --> 00:24:59,700
are five minutes left for questions if

00:24:57,809 --> 00:25:10,820
you have any please kill like the

00:24:59,700 --> 00:25:14,360
microphones hi quick question you

00:25:10,820 --> 00:25:18,020
support or are thinking of supporting

00:25:14,360 --> 00:25:20,360
distributed builds and distributed cache

00:25:18,020 --> 00:25:22,200
so the question is are we supporting

00:25:20,360 --> 00:25:25,080
distributed builds and distributive

00:25:22,200 --> 00:25:28,110
cache you did over multiple machines

00:25:25,080 --> 00:25:30,090
okay so we already support it because

00:25:28,110 --> 00:25:34,380
there's ice cream and there's C cash

00:25:30,090 --> 00:25:37,850
obviously which are fairly good the the

00:25:34,380 --> 00:25:40,440
so I wrote a blog post about this and

00:25:37,850 --> 00:25:43,230
and then like how would you replicate

00:25:40,440 --> 00:25:44,669
the like the build environment that's

00:25:43,230 --> 00:25:46,380
something like Google has where you have

00:25:44,669 --> 00:25:51,090
tons of different machines and you want

00:25:46,380 --> 00:25:52,650
to spread out and it turns out that at

00:25:51,090 --> 00:25:54,929
least according to the tests that I ran

00:25:52,650 --> 00:25:57,780
the thing that is actually difficult is

00:25:54,929 --> 00:26:00,419
the distributed file system I was using

00:25:57,780 --> 00:26:05,309
NFS and it just completely fails at this

00:26:00,419 --> 00:26:07,200
so if you want to do a proper like

00:26:05,309 --> 00:26:09,600
distribution then what you have to do is

00:26:07,200 --> 00:26:11,549
that you cannot pre process on the

00:26:09,600 --> 00:26:13,350
machine that you're building on because

00:26:11,549 --> 00:26:15,240
then you are limited by your own own

00:26:13,350 --> 00:26:17,299
machine what you want to able to do is

00:26:15,240 --> 00:26:20,039
to form out all of the commands out and

00:26:17,299 --> 00:26:23,280
for this you need standardized or

00:26:20,039 --> 00:26:25,230
Backstairs containers and an NFS or

00:26:23,280 --> 00:26:27,059
something like that which amount and the

00:26:25,230 --> 00:26:30,990
NFS seems to be the problem attic part

00:26:27,059 --> 00:26:33,539
so if there is a project to add to

00:26:30,990 --> 00:26:34,650
create like the back end service or for

00:26:33,539 --> 00:26:37,020
running these sorts of things we would

00:26:34,650 --> 00:26:39,870
support that it's not a typical but

00:26:37,020 --> 00:26:41,490
getting that to work is the hard part

00:26:39,870 --> 00:26:47,190
it's not really in the build system as

00:26:41,490 --> 00:26:49,350
much right I am so as cute users or I

00:26:47,190 --> 00:26:52,049
mean you see Meg and uncute and we have

00:26:49,350 --> 00:26:54,630
to find cute and cute chips good five

00:26:52,049 --> 00:26:57,059
ships of see Meg files so and I have

00:26:54,630 --> 00:26:59,299
built cute myself or I have pre-compiled

00:26:57,059 --> 00:27:03,270
acute versions how would I go with

00:26:59,299 --> 00:27:04,860
mission here okay so I'm having a bit

00:27:03,270 --> 00:27:07,230
trouble time hearing but but you were

00:27:04,860 --> 00:27:11,130
asking about QT you know in Pilon QT

00:27:07,230 --> 00:27:13,620
yourself yeah okay so I know of people

00:27:11,130 --> 00:27:16,080
who were interested in building QT and

00:27:13,620 --> 00:27:17,700
on the other hand the cute people are

00:27:16,080 --> 00:27:22,169
currently talking about changing their

00:27:17,700 --> 00:27:24,090
build system for cute 6 I had a chat

00:27:22,169 --> 00:27:26,309
with the one of the people running this

00:27:24,090 --> 00:27:27,840
and and like and they had a list of

00:27:26,309 --> 00:27:29,399
requirements of what you would need to

00:27:27,840 --> 00:27:32,309
have in order to be a do you like the

00:27:29,399 --> 00:27:34,470
official build system of QT and we we

00:27:32,309 --> 00:27:40,620
have like most of those we'd actually do

00:27:34,470 --> 00:27:43,529
support so it should be doable but as of

00:27:40,620 --> 00:27:46,620
today you don't you don't build yourself

00:27:43,529 --> 00:27:50,010
up but if you have pre-installed cute

00:27:46,620 --> 00:27:51,720
and just want to use that then you get

00:27:50,010 --> 00:27:53,580
all the dependencies from cumec directly

00:27:51,720 --> 00:27:56,610
so it works on Windows it works on the

00:27:53,580 --> 00:27:58,200
West 10 I don't know if it works on on

00:27:56,610 --> 00:28:01,110
iOS or Android I don't think anyone's

00:27:58,200 --> 00:28:06,480
ever tried that but it like on Linux on

00:28:01,110 --> 00:28:07,940
Windows doesn't work thank you okay yeah

00:28:06,480 --> 00:28:11,460
I was wondering how would you

00:28:07,940 --> 00:28:13,380
incorporate new static analysis like cpp

00:28:11,460 --> 00:28:15,600
lint where it depends on each of the

00:28:13,380 --> 00:28:18,029
source files in a target ok so the

00:28:15,600 --> 00:28:20,659
question is how would you add CPP check

00:28:18,029 --> 00:28:25,950
or other other kinds of learning tools

00:28:20,659 --> 00:28:28,230
the Mason has a course called a run

00:28:25,950 --> 00:28:30,539
target and you can specify that I have a

00:28:28,230 --> 00:28:33,000
run sided with specific name and it runs

00:28:30,539 --> 00:28:34,919
this command so you can then then you

00:28:33,000 --> 00:28:36,779
can say ninja the thing that you want to

00:28:34,919 --> 00:28:39,090
run and it will just execute that

00:28:36,779 --> 00:28:40,350
command so you would probably have CPP

00:28:39,090 --> 00:28:42,720
check and then point it to the

00:28:40,350 --> 00:28:44,190
compilation database file so you can do

00:28:42,720 --> 00:28:47,760
that yourself we don't have any built-in

00:28:44,190 --> 00:28:49,350
support for that because it's so simple

00:28:47,760 --> 00:28:51,720
to add yourself and usually once you

00:28:49,350 --> 00:28:53,140
have your own special flags so this

00:28:51,720 --> 00:28:55,270
would would not

00:28:53,140 --> 00:28:57,010
it wouldn't really help to add and more

00:28:55,270 --> 00:28:59,080
stuff but if there's like complicated

00:28:57,010 --> 00:29:03,280
tools then we would probably add like

00:28:59,080 --> 00:29:05,770
support if needed okay thanks so I have

00:29:03,280 --> 00:29:08,800
two questions the first is do you

00:29:05,770 --> 00:29:10,750
support Auto generated Auto generated

00:29:08,800 --> 00:29:13,960
files like those generated by protobuf

00:29:10,750 --> 00:29:15,430
or not yes we support so the question is

00:29:13,960 --> 00:29:19,330
do we support Auto generated files and

00:29:15,430 --> 00:29:22,170
yes we just do support that and starting

00:29:19,330 --> 00:29:24,880
with the release that we did week ago

00:29:22,170 --> 00:29:27,880
what you can do is that if you have a

00:29:24,880 --> 00:29:30,190
protobuf thing you can compile proto

00:29:27,880 --> 00:29:32,110
buffer as part of your project and it

00:29:30,190 --> 00:29:34,450
will use that built executable to

00:29:32,110 --> 00:29:36,550
generate the protocol files without you

00:29:34,450 --> 00:29:38,800
having to change the you just say I want

00:29:36,550 --> 00:29:41,980
to find protobuf proto C and we'll find

00:29:38,800 --> 00:29:43,480
the one that you can part your self so

00:29:41,980 --> 00:29:46,510
you could have fully self-contained

00:29:43,480 --> 00:29:47,890
build so kind of connected to that my

00:29:46,510 --> 00:29:49,990
second question is do you have anything

00:29:47,890 --> 00:29:51,900
like C pack that aids you in the

00:29:49,990 --> 00:29:53,890
packaging side of things because the

00:29:51,900 --> 00:29:55,450
difficulty with all the systems that

00:29:53,890 --> 00:29:56,830
bring in motor tarballs is then it

00:29:55,450 --> 00:30:00,700
becomes a bit of a nightmare to actually

00:29:56,830 --> 00:30:02,170
package everything up so can you say

00:30:00,700 --> 00:30:04,260
it's it so do you have any

00:30:02,170 --> 00:30:06,730
infrastructure like C pack which

00:30:04,260 --> 00:30:09,400
admittedly is pretty Bominable to use

00:30:06,730 --> 00:30:11,190
but do you have any infrastructure that

00:30:09,400 --> 00:30:13,690
integrates with meson in order to aid

00:30:11,190 --> 00:30:15,880
actually generating bendable binaries

00:30:13,690 --> 00:30:17,710
from your build system or is that out of

00:30:15,880 --> 00:30:19,900
the scope of reason so the question is

00:30:17,710 --> 00:30:24,580
do we have something to generate and

00:30:19,900 --> 00:30:28,750
venerable binaries okay so not as such

00:30:24,580 --> 00:30:30,910
but if you build a build and and all

00:30:28,750 --> 00:30:32,680
their own dependencies and you link them

00:30:30,910 --> 00:30:34,990
and you install them and then in

00:30:32,680 --> 00:30:37,000
somewhere then it's hard man up and then

00:30:34,990 --> 00:30:40,000
you ship it that's fine for you then it

00:30:37,000 --> 00:30:41,560
works like if static linking all of your

00:30:40,000 --> 00:30:43,210
dependencies and just zip the executable

00:30:41,560 --> 00:30:46,560
we support that but there's no like

00:30:43,210 --> 00:30:48,070
specific support to that okay thank you

00:30:46,560 --> 00:30:50,710
quick questions

00:30:48,070 --> 00:30:53,800
and what's the IDE support for things

00:30:50,710 --> 00:30:55,570
like sea lion k develop okay so the

00:30:53,800 --> 00:30:59,050
question is what's the IDE support so

00:30:55,570 --> 00:31:01,540
currently there are two IDs which

00:30:59,050 --> 00:31:05,110
support Mezen project because we ship a

00:31:01,540 --> 00:31:06,940
an IDE like in to the introspection

00:31:05,110 --> 00:31:09,519
framework so we

00:31:06,940 --> 00:31:12,879
Bo's all of our data in Jason and no

00:31:09,519 --> 00:31:16,509
builder supports this and and starting

00:31:12,879 --> 00:31:18,970
with like six months ago the eclipse of

00:31:16,509 --> 00:31:21,070
pop stream had support that so it has

00:31:18,970 --> 00:31:22,419
nine native supports for amazing

00:31:21,070 --> 00:31:23,889
projects and you can change all of the

00:31:22,419 --> 00:31:27,159
options and all that sort of stuff

00:31:23,889 --> 00:31:29,590
course there was going to be one for QT

00:31:27,159 --> 00:31:32,529
creator but that got cancelled due to

00:31:29,590 --> 00:31:33,129
reasons the sea lion doesn't have

00:31:32,529 --> 00:31:35,070
support

00:31:33,129 --> 00:31:38,379
I actually chatted with Phil Nash just

00:31:35,070 --> 00:31:41,049
just prior to coming here and if you

00:31:38,379 --> 00:31:42,940
wish to have this support please go up

00:31:41,049 --> 00:31:44,440
to the JetBrains booth and tell them

00:31:42,940 --> 00:31:48,159
that you want this it's not gonna happen

00:31:44,440 --> 00:31:51,070
otherwise and what other languages are

00:31:48,159 --> 00:31:53,309
supported so which languages are

00:31:51,070 --> 00:31:56,590
supported you said it's multilingual

00:31:53,309 --> 00:32:00,179
okay so the final list is up on the on

00:31:56,590 --> 00:32:05,229
the website but C C++ objective-c

00:32:00,179 --> 00:32:09,929
objective C++ Java C sharp D rust bola

00:32:05,229 --> 00:32:12,159
and Fortran and the questionnaire to

00:32:09,929 --> 00:32:14,889
cogeneration is a generic way that

00:32:12,159 --> 00:32:16,690
Google part above specific can you build

00:32:14,889 --> 00:32:18,999
up something like for your own

00:32:16,690 --> 00:32:21,639
cogeneration so the question here was

00:32:18,999 --> 00:32:23,919
that is the way you generate source

00:32:21,639 --> 00:32:26,919
files is that specific the protobuf or

00:32:23,919 --> 00:32:29,159
in general it's completely general and

00:32:26,919 --> 00:32:32,649
in fact we don't have any sort of

00:32:29,159 --> 00:32:34,779
protobuf specific help members who might

00:32:32,649 --> 00:32:36,849
add if there's less need for that but

00:32:34,779 --> 00:32:38,859
it's completely generic you just specify

00:32:36,849 --> 00:32:40,840
okay this is how you would generate

00:32:38,859 --> 00:32:41,950
files and then you put in the inputs and

00:32:40,840 --> 00:32:44,399
then you just put the outputs in the

00:32:41,950 --> 00:32:45,580
target you want to use them in thank you

00:32:44,399 --> 00:32:50,080
okay

00:32:45,580 --> 00:32:51,820
I think it's last question all right I

00:32:50,080 --> 00:32:53,499
guess follow-up question to the ID

00:32:51,820 --> 00:32:56,320
question I'm just wondering what's the

00:32:53,499 --> 00:32:58,330
interface that you expose the compiled

00:32:56,320 --> 00:33:00,399
definition and stuff like that so for

00:32:58,330 --> 00:33:02,169
example I'm using let's say Emacs and I

00:33:00,399 --> 00:33:04,210
would like to kind of hook into that how

00:33:02,169 --> 00:33:06,639
would I do that okay so there we

00:33:04,210 --> 00:33:09,940
generate the compilation database just

00:33:06,639 --> 00:33:12,190
cool okay so that's there and then but

00:33:09,940 --> 00:33:13,720
that's just like the the things used to

00:33:12,190 --> 00:33:16,659
compile files like the flights and

00:33:13,720 --> 00:33:18,460
everything but the ID say that the JSON

00:33:16,659 --> 00:33:20,169
based introspection thing you can get

00:33:18,460 --> 00:33:22,509
all of the options you can get

00:33:20,169 --> 00:33:23,859
all of the tests so as an example if you

00:33:22,509 --> 00:33:25,960
have a test that is failing you can

00:33:23,859 --> 00:33:27,789
actually get all of the things you need

00:33:25,960 --> 00:33:29,259
to run it yourself like the command line

00:33:27,789 --> 00:33:31,929
the environment variables you can set

00:33:29,259 --> 00:33:33,730
all of that and get what promo targets

00:33:31,929 --> 00:33:35,830
are there what source files they contain

00:33:33,730 --> 00:33:37,989
and all of that so you should be able to

00:33:35,830 --> 00:33:41,289
add value all right thank you very much

00:33:37,989 --> 00:33:42,730
all right so I think that's time let

00:33:41,289 --> 00:33:48,009
thank you very much

00:33:42,730 --> 00:33:48,009

YouTube URL: https://www.youtube.com/watch?v=SCZLnopmYBM


