Title: devopsdaysNYC 2020 - Day 1 - Michael Wytock - Infra Changes, So Modularize and Ver Your Infra Code
Publication date: 2020-03-23
Playlist: devopsdaysNYC 2020 Day 1
Description: 
	Infrastructure Changes, So Modularize and Version Your Infrastructure Code

Overview A long-term benefit of having infrastructure described in code is increased maintainability. A goal of any infrastructure team should be to make it as easy as possible to change their infrastructure. Thus, sensible module-creation and versioning strategies for infrastructure code are important considerations for infrastructure teams.
Captions: 
	00:00:14,730 --> 00:00:19,770
hello my name is Michael why talk and I

00:00:17,699 --> 00:00:22,380
am a senior consultant with stride

00:00:19,770 --> 00:00:24,680
consulting and this talk is about how we

00:00:22,380 --> 00:00:27,779
can make our infrastructure code

00:00:24,680 --> 00:00:30,180
maintainable and resistant to changes

00:00:27,779 --> 00:00:32,369
and support those changes and often

00:00:30,180 --> 00:00:33,930
times when we're writing code of any

00:00:32,369 --> 00:00:36,210
kind the way we learn how to write

00:00:33,930 --> 00:00:38,160
maintainable code is by writing a lot of

00:00:36,210 --> 00:00:40,710
unmaintainable code and then getting

00:00:38,160 --> 00:00:42,629
bitten by it what my teammates have

00:00:40,710 --> 00:00:44,820
taught me over the last few months of

00:00:42,629 --> 00:00:47,430
working with them as a mechanism for how

00:00:44,820 --> 00:00:49,559
we can use modules and versioning to

00:00:47,430 --> 00:00:52,559
fundamental skills to make our code more

00:00:49,559 --> 00:00:54,600
maintainable so it makes sense to talk a

00:00:52,559 --> 00:00:56,250
little bit about why our infrastructure

00:00:54,600 --> 00:00:58,559
may be changing in the first place and

00:00:56,250 --> 00:01:00,239
it usually comes down to changing

00:00:58,559 --> 00:01:01,530
requirements but there's a couple of

00:01:00,239 --> 00:01:04,350
high-level things that are shared across

00:01:01,530 --> 00:01:06,929
many organizations perhaps you need to

00:01:04,350 --> 00:01:08,399
support a new deployment context there's

00:01:06,929 --> 00:01:10,679
gonna be a bare metal context that we've

00:01:08,399 --> 00:01:12,899
never supported before maybe you have a

00:01:10,679 --> 00:01:15,030
multi cloud situation or you have

00:01:12,899 --> 00:01:16,830
clients specific deployments that will

00:01:15,030 --> 00:01:18,720
occur and you need to make sure you can

00:01:16,830 --> 00:01:21,240
deploy to these new requirements that

00:01:18,720 --> 00:01:23,310
are unforeseen right now and it's more

00:01:21,240 --> 00:01:25,380
complicated because you may have some of

00:01:23,310 --> 00:01:27,000
these particular requirements of your

00:01:25,380 --> 00:01:29,700
infrastructure code you may want

00:01:27,000 --> 00:01:33,720
automated tests you want it to build NCI

00:01:29,700 --> 00:01:35,849
you want portable code as well so the

00:01:33,720 --> 00:01:39,119
first suggestion is that you split

00:01:35,849 --> 00:01:41,310
modules based on your build so obey the

00:01:39,119 --> 00:01:43,200
bill don't work against it take your

00:01:41,310 --> 00:01:45,660
networking code which would be required

00:01:43,200 --> 00:01:47,450
for our machines to be able to speak to

00:01:45,660 --> 00:01:50,250
one another and make that its own module

00:01:47,450 --> 00:01:52,619
then for the configuration for those

00:01:50,250 --> 00:01:54,569
machines make that a module as well and

00:01:52,619 --> 00:01:57,390
then finally the services that will be

00:01:54,569 --> 00:02:00,690
deployed in there those services need to

00:01:57,390 --> 00:02:02,729
be placed into their own module these

00:02:00,690 --> 00:02:04,470
dependencies being modeled here will

00:02:02,729 --> 00:02:06,270
provide a common abstraction that you'll

00:02:04,470 --> 00:02:09,599
be able to use across all of your

00:02:06,270 --> 00:02:11,610
deployment contexts in the future so if

00:02:09,599 --> 00:02:13,770
you're using terraform oftentimes the

00:02:11,610 --> 00:02:16,770
outputs of one of these build modules

00:02:13,770 --> 00:02:19,050
will call them will be fed into the next

00:02:16,770 --> 00:02:21,000
module so in your networking module

00:02:19,050 --> 00:02:23,010
where you have your VPC set up and

00:02:21,000 --> 00:02:25,200
subnets the outputs of that information

00:02:23,010 --> 00:02:26,290
will flow into the compute layer and

00:02:25,200 --> 00:02:27,939
then

00:02:26,290 --> 00:02:29,860
you've done your provisioning perhaps or

00:02:27,939 --> 00:02:32,170
provisioning kubernetes something else

00:02:29,860 --> 00:02:34,390
then you'll have all the outputs they're

00:02:32,170 --> 00:02:36,310
ready to deploy services into it and

00:02:34,390 --> 00:02:40,060
this is an example of how we can use

00:02:36,310 --> 00:02:41,980
this to achieve phase deployments so in

00:02:40,060 --> 00:02:44,739
your development environment if you have

00:02:41,980 --> 00:02:47,680
some kind of error going on in your

00:02:44,739 --> 00:02:49,659
services module then we can fix that

00:02:47,680 --> 00:02:51,519
error make sure we address the failing

00:02:49,659 --> 00:02:53,950
tests before promoting into production

00:02:51,519 --> 00:02:56,859
and similarly if we have a brand new

00:02:53,950 --> 00:02:59,500
deployment context we can isolate and

00:02:56,859 --> 00:03:01,780
understand changes in these different

00:02:59,500 --> 00:03:03,250
build modules and talk about them using

00:03:01,780 --> 00:03:03,780
the same terminology as we've used

00:03:03,250 --> 00:03:06,909
before

00:03:03,780 --> 00:03:10,030
now the second strategy that we've used

00:03:06,909 --> 00:03:12,250
is to create a separate child modules

00:03:10,030 --> 00:03:15,040
repository and in this separate

00:03:12,250 --> 00:03:18,159
repository we can place things like the

00:03:15,040 --> 00:03:20,980
finer grained VPC configuration or maybe

00:03:18,159 --> 00:03:22,419
your authentication tooling and when we

00:03:20,980 --> 00:03:25,209
place them all in this separate

00:03:22,419 --> 00:03:26,919
repository together now we're able to

00:03:25,209 --> 00:03:28,750
reference them and consume them

00:03:26,919 --> 00:03:30,879
through all of our separate build

00:03:28,750 --> 00:03:34,569
modules that are in separate pipelines

00:03:30,879 --> 00:03:36,519
for our deployments so for example in

00:03:34,569 --> 00:03:39,159
this development pipeline that we have

00:03:36,519 --> 00:03:42,669
we may see that there's a failure again

00:03:39,159 --> 00:03:45,669
in our services module and we're

00:03:42,669 --> 00:03:47,769
referencing certain child modules that

00:03:45,669 --> 00:03:49,389
are under development and we need to fix

00:03:47,769 --> 00:03:52,060
those before we can merge back in the

00:03:49,389 --> 00:03:54,400
master and let's say we do fix those and

00:03:52,060 --> 00:03:56,500
we're now at V 1.24 in this development

00:03:54,400 --> 00:03:59,560
environment and we want to push that out

00:03:56,500 --> 00:04:01,479
into production we've now run tests in

00:03:59,560 --> 00:04:04,180
development we've seen it running

00:04:01,479 --> 00:04:06,459
alongside other services and we can bump

00:04:04,180 --> 00:04:08,199
our references and hopefully it's as

00:04:06,459 --> 00:04:09,699
simple as that for the most part in

00:04:08,199 --> 00:04:12,879
moving from development to production

00:04:09,699 --> 00:04:14,169
maybe you have a separate cloud account

00:04:12,879 --> 00:04:16,570
that you're going to be deploying into

00:04:14,169 --> 00:04:18,760
in small configuration changes but it's

00:04:16,570 --> 00:04:20,949
not much more than that now if you have

00:04:18,760 --> 00:04:23,440
a brand new deployment context and you

00:04:20,949 --> 00:04:26,680
have new functionality that you haven't

00:04:23,440 --> 00:04:28,479
put into your system yet then we'll bump

00:04:26,680 --> 00:04:30,159
again we'll add those specialized

00:04:28,479 --> 00:04:32,139
modules and perhaps change the

00:04:30,159 --> 00:04:34,599
configuration more dramatically in the

00:04:32,139 --> 00:04:37,090
build modules but still just consume

00:04:34,599 --> 00:04:37,940
that new bumped version of the child

00:04:37,090 --> 00:04:41,300
modules

00:04:37,940 --> 00:04:43,160
so to summarize obey the build don't

00:04:41,300 --> 00:04:44,810
work against it use that to guide your

00:04:43,160 --> 00:04:46,690
organization and keep it consistent

00:04:44,810 --> 00:04:49,970
across all of your build pipelines

00:04:46,690 --> 00:04:51,530
decouple by placing your child modules

00:04:49,970 --> 00:04:54,350
off on their own in their own repository

00:04:51,530 --> 00:04:56,510
and version them make sure that you can

00:04:54,350 --> 00:04:59,480
reference those versions and use that to

00:04:56,510 --> 00:05:00,650
specialize your new deployment contexts

00:04:59,480 --> 00:05:04,280
that you may not have been able to

00:05:00,650 --> 00:05:06,620
foresee as of yet and then finally I'd

00:05:04,280 --> 00:05:08,390
like to offer some acknowledgments and

00:05:06,620 --> 00:05:10,520
thank especially the team that I work

00:05:08,390 --> 00:05:13,250
with on a day-to-day basis especially at

00:05:10,520 --> 00:05:17,400
our Shaw and Arielle Sullivan thank you

00:05:13,250 --> 00:05:30,699
[Applause]

00:05:17,400 --> 00:05:30,699

YouTube URL: https://www.youtube.com/watch?v=sF5jFiyo7gg


