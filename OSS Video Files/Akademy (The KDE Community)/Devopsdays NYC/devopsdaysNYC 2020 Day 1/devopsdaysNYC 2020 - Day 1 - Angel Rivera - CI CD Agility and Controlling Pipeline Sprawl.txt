Title: devopsdaysNYC 2020 - Day 1 - Angel Rivera - CI CD Agility and Controlling Pipeline Sprawl
Publication date: 2020-03-23
Playlist: devopsdaysNYC 2020 Day 1
Description: 
	The adoption of CI/CD has automated the process of how DevOps teams build, test, and deliver software at rapid speeds and with high confidence. Although CI/CD platforms offer many benefits, in the attempt to make sophisticated pipelines, many teams run into the issue of “Pipeline Sprawl” - where configurations grow in complexity and volume forcing them to become unmanageable and difficult to scale. Pipeline sprawl also makes it difficult for DevOps teams to identify and reuse common execution patterns which diminishes their ability to efficiently ship new code.

In this talk, presenter will discuss the common pain points associated with existing CI/CD platforms, how they impact teams and organizations, and how to overcome them. The presenter will cover the advantages and disadvantages of supporting multiple CI/CD platforms, and discuss viable options for pipeline configuration management at scale. The talk will pull in examples from his recent experience and from conversations with DevOps teams from across the open source community, startups, and large enterprise companies. Attendees will learn how to manage and scale their pipelines to fit their existing processes, and technical strategies to develop pipeline configurations that diminish potentially costly vendor-lock in.
Captions: 
	00:00:15,390 --> 00:00:19,830
all right thank you everyone yeah like

00:00:17,550 --> 00:00:22,320
Jay said jacked up my knee this weekend

00:00:19,830 --> 00:00:25,560
playing with my son so apologize I'm not

00:00:22,320 --> 00:00:27,360
going to be very mobile but I want to

00:00:25,560 --> 00:00:30,360
welcome all of you and I also wanted to

00:00:27,360 --> 00:00:31,860
take a moment to actually get you all to

00:00:30,360 --> 00:00:34,980
give a little round of applause to the

00:00:31,860 --> 00:00:36,990
organizers of this event because it

00:00:34,980 --> 00:00:40,140
takes a lot of work and this is really

00:00:36,990 --> 00:00:44,460
nice they volunteer a lot of their time

00:00:40,140 --> 00:00:46,890
I've been around the DevOps days I guess

00:00:44,460 --> 00:00:49,230
paradigm universe for a while and yeah

00:00:46,890 --> 00:00:51,629
it's not an easy task they give a give

00:00:49,230 --> 00:00:53,250
up a lot of time for this so again thank

00:00:51,629 --> 00:00:57,180
you all for doing that and the speakers

00:00:53,250 --> 00:00:59,070
as well not me of course I I'm not

00:00:57,180 --> 00:01:01,469
including myself in that but yeah today

00:00:59,070 --> 00:01:03,660
I want to talk to you about CIC the

00:01:01,469 --> 00:01:06,000
agility and controlling pipeline sprawl

00:01:03,660 --> 00:01:07,500
so if you don't know what I'm talking

00:01:06,000 --> 00:01:10,470
about here I'll get into it and

00:01:07,500 --> 00:01:12,690
hopefully you'll understand so I spent a

00:01:10,470 --> 00:01:15,450
lot of time thinking about how to work

00:01:12,690 --> 00:01:17,910
smarter not harder and in this industry

00:01:15,450 --> 00:01:20,220
we get hit with the word agile or

00:01:17,910 --> 00:01:22,950
agility right and if you look at the

00:01:20,220 --> 00:01:26,299
definition of that it's basically the

00:01:22,950 --> 00:01:29,280
ability to move quickly and easily now

00:01:26,299 --> 00:01:30,990
that's great but we're in debt we work

00:01:29,280 --> 00:01:33,329
in DevOps right we're at DevOps days so

00:01:30,990 --> 00:01:35,520
I came up with this term called C ICD

00:01:33,329 --> 00:01:37,740
agility I also worked at Circle C I so

00:01:35,520 --> 00:01:40,259
this actually makes total sense to me

00:01:37,740 --> 00:01:42,509
and I created a new definition for it

00:01:40,259 --> 00:01:45,930
right and it's basically the ability to

00:01:42,509 --> 00:01:48,689
move continuously quickly and easily now

00:01:45,930 --> 00:01:52,320
you know as developers we were inundated

00:01:48,689 --> 00:01:54,869
with creating continuous integration and

00:01:52,320 --> 00:01:56,549
continuous delivery practices and

00:01:54,869 --> 00:02:00,110
principles within our organizations and

00:01:56,549 --> 00:02:02,640
teams and to achieve that right we need

00:02:00,110 --> 00:02:05,969
we actually need to execute on that by

00:02:02,640 --> 00:02:08,280
implementing C ICD tooling and today's

00:02:05,969 --> 00:02:10,200
talk is going to be centered around some

00:02:08,280 --> 00:02:12,300
of the obstacles that we all encounter

00:02:10,200 --> 00:02:14,730
right and by the way this is going to be

00:02:12,300 --> 00:02:17,280
a talk that about the obstacles that are

00:02:14,730 --> 00:02:19,350
common throughout all C ICD tooling out

00:02:17,280 --> 00:02:20,280
there for the most part some may not

00:02:19,350 --> 00:02:23,400
have some of the things I'm talking

00:02:20,280 --> 00:02:25,860
about but in general most of the tooling

00:02:23,400 --> 00:02:27,900
does have these issues but before we get

00:02:25,860 --> 00:02:29,130
into that I want to speak but a little

00:02:27,900 --> 00:02:31,650
bit about myself my

00:02:29,130 --> 00:02:34,980
Julieta I'm gonna developer advocate for

00:02:31,650 --> 00:02:37,140
circle CI I start off my career in the

00:02:34,980 --> 00:02:40,350
United States Air Force Space Command as

00:02:37,140 --> 00:02:43,290
a developer and through the years work

00:02:40,350 --> 00:02:46,020
through you know with startups private

00:02:43,290 --> 00:02:49,470
industry and now I'm working for circle

00:02:46,020 --> 00:02:51,690
CI as a developer advocate and in my

00:02:49,470 --> 00:02:54,690
role as a developer advocate I get to

00:02:51,690 --> 00:02:56,490
speak at events like this and engage

00:02:54,690 --> 00:02:58,650
with folks like yourselves developers

00:02:56,490 --> 00:03:00,900
operations folks DevOps of people

00:02:58,650 --> 00:03:03,660
business analysts right and in these

00:03:00,900 --> 00:03:06,150
conversations I'm constantly learning

00:03:03,660 --> 00:03:07,740
how people are using technology and in

00:03:06,150 --> 00:03:09,800
my role I bring that information back to

00:03:07,740 --> 00:03:12,420
my team so that you know we can build

00:03:09,800 --> 00:03:15,060
tolling that's valuable and features

00:03:12,420 --> 00:03:18,810
that are valuable to you all and in my

00:03:15,060 --> 00:03:20,760
discussions I'm constantly you know

00:03:18,810 --> 00:03:23,130
figuring out how folks the challenges

00:03:20,760 --> 00:03:26,400
people are having actually and that's

00:03:23,130 --> 00:03:27,600
really it's a really nice thing to hear

00:03:26,400 --> 00:03:29,400
how people are using technology and

00:03:27,600 --> 00:03:31,260
figure out their pain points right so

00:03:29,400 --> 00:03:33,830
this talk is based upon some of that

00:03:31,260 --> 00:03:37,560
feedback and conversations that I've had

00:03:33,830 --> 00:03:39,620
and the biggest topic that came up in

00:03:37,560 --> 00:03:42,720
these conversations regarding CI CD were

00:03:39,620 --> 00:03:44,280
managing pipelines at scale anybody in

00:03:42,720 --> 00:03:46,890
the room have problems doing that today

00:03:44,280 --> 00:03:50,520
raise your hand yeah there should be a

00:03:46,890 --> 00:03:52,530
few of you there and right now

00:03:50,520 --> 00:03:55,560
the tooling right like I said they have

00:03:52,530 --> 00:03:57,690
issues but these topics here security

00:03:55,560 --> 00:03:59,580
and pipeline sprawl are the two main

00:03:57,690 --> 00:04:01,770
topics that I'm going to discuss today

00:03:59,580 --> 00:04:03,810
now there's a ton of other information I

00:04:01,770 --> 00:04:07,440
could provide you but you know got 30

00:04:03,810 --> 00:04:08,760
minutes so we'll keep it short so let's

00:04:07,440 --> 00:04:10,890
talk about security first right

00:04:08,760 --> 00:04:12,270
obviously that's paramount and pretty

00:04:10,890 --> 00:04:14,940
much anything we do it should be at

00:04:12,270 --> 00:04:16,590
least but you'd be surprised there are

00:04:14,940 --> 00:04:18,480
organizations and teams out there that

00:04:16,590 --> 00:04:20,070
really don't put security at the

00:04:18,480 --> 00:04:22,860
forefront because maybe it's limiting

00:04:20,070 --> 00:04:24,090
the you know their operation but at the

00:04:22,860 --> 00:04:26,130
end of the day I'm here to tell you that

00:04:24,090 --> 00:04:28,230
it's very important and it's only gonna

00:04:26,130 --> 00:04:29,910
get even more important right and

00:04:28,230 --> 00:04:31,580
companies that you're dealing with today

00:04:29,910 --> 00:04:36,570
are gonna put stricter and stricter

00:04:31,580 --> 00:04:37,950
scrutiny right around security so what I

00:04:36,570 --> 00:04:40,630
want to talk about in the security realm

00:04:37,950 --> 00:04:42,850
is secrets

00:04:40,630 --> 00:04:44,650
we all use them in our systems and our

00:04:42,850 --> 00:04:47,620
pipelines to connect to other systems

00:04:44,650 --> 00:04:49,780
and databases right to basically grab

00:04:47,620 --> 00:04:51,600
information that we need to process when

00:04:49,780 --> 00:04:53,500
we're doing our builds or our testing

00:04:51,600 --> 00:04:57,280
they're really important and they need

00:04:53,500 --> 00:04:59,560
to be protected a lot of times they're

00:04:57,280 --> 00:05:01,540
not protected within pipelines right we

00:04:59,560 --> 00:05:03,550
I can tell you right now there are tons

00:05:01,540 --> 00:05:05,800
of tooling out there that expose these

00:05:03,550 --> 00:05:09,460
secrets unintentionally of course but

00:05:05,800 --> 00:05:11,740
they're still exposed some of the other

00:05:09,460 --> 00:05:13,930
complaints and and problems that we have

00:05:11,740 --> 00:05:17,260
within the industry these are not new

00:05:13,930 --> 00:05:19,180
right weak passwords or secrets and we

00:05:17,260 --> 00:05:20,650
also have the issue with stale secrets

00:05:19,180 --> 00:05:24,130
which means that they're not being

00:05:20,650 --> 00:05:28,630
refreshed or changed often enough within

00:05:24,130 --> 00:05:30,600
the pipelines we also have the basically

00:05:28,630 --> 00:05:33,400
issue where you know we're storing

00:05:30,600 --> 00:05:37,870
credentials and clear text in the CI CD

00:05:33,400 --> 00:05:39,070
runtimes so when you execute a job a lot

00:05:37,870 --> 00:05:42,610
of times the platforms that are out

00:05:39,070 --> 00:05:44,260
there have the information secure at

00:05:42,610 --> 00:05:46,330
rest right and then that information

00:05:44,260 --> 00:05:47,920
obviously gets to trigger but job gets

00:05:46,330 --> 00:05:51,580
triggered information needs to be pushed

00:05:47,920 --> 00:05:54,520
out and in flight it's also usually very

00:05:51,580 --> 00:05:55,720
well secured with TLS or SSL but once it

00:05:54,520 --> 00:05:58,090
hits that runtime where they're actually

00:05:55,720 --> 00:05:59,440
cuting the code for the build a lot of

00:05:58,090 --> 00:06:02,020
times they're just stored environment

00:05:59,440 --> 00:06:04,480
environment variables in clear-text and

00:06:02,020 --> 00:06:06,610
if any bad actor or anyone with

00:06:04,480 --> 00:06:08,860
malicious intent get gains access to

00:06:06,610 --> 00:06:11,230
that runtime you know Europe you're

00:06:08,860 --> 00:06:15,610
pretty much open for for compromise

00:06:11,230 --> 00:06:21,640
right you're exposed so how do we

00:06:15,610 --> 00:06:25,030
adequately protect these pipelines in my

00:06:21,640 --> 00:06:27,400
conversations one of the ways that you

00:06:25,030 --> 00:06:29,500
know folks are doing this is by creative

00:06:27,400 --> 00:06:33,460
utilizing secrets management's right in

00:06:29,500 --> 00:06:34,600
employing policies around secrets and if

00:06:33,460 --> 00:06:35,860
you want to implement that you're

00:06:34,600 --> 00:06:38,770
obviously going to need tooling to do

00:06:35,860 --> 00:06:40,960
that and the tooling generally protects

00:06:38,770 --> 00:06:43,840
you because it will protect your secrets

00:06:40,960 --> 00:06:45,580
it also generates right passwords for

00:06:43,840 --> 00:06:48,310
you it can do a lot of cool things

00:06:45,580 --> 00:06:50,320
around security and protecting secrets

00:06:48,310 --> 00:06:52,310
there's a ton of tooling out there

00:06:50,320 --> 00:06:54,680
there's a lot of open-source tooling but

00:06:52,310 --> 00:06:56,360
I prefer to use hashey corpse of alt it

00:06:54,680 --> 00:06:57,890
seems to be one of the well supported

00:06:56,360 --> 00:07:01,040
ones in the industry and in the

00:06:57,890 --> 00:07:02,390
community so if you're looking you know

00:07:01,040 --> 00:07:04,640
to implement some sort of secrets

00:07:02,390 --> 00:07:10,040
management or tooling definitely take a

00:07:04,640 --> 00:07:11,770
look at Balt it can and by implementing

00:07:10,040 --> 00:07:14,030
these tools right it can help you with

00:07:11,770 --> 00:07:15,650
random password generation so you can

00:07:14,030 --> 00:07:18,650
generate these really strong passwords

00:07:15,650 --> 00:07:20,330
and then also they're randomly generates

00:07:18,650 --> 00:07:22,340
so no one really a human doesn't know

00:07:20,330 --> 00:07:25,160
what these things are right which is

00:07:22,340 --> 00:07:29,510
super cool because you're protecting

00:07:25,160 --> 00:07:31,460
your system and your secrets these

00:07:29,510 --> 00:07:33,470
systems also enable you to auto-rotate

00:07:31,460 --> 00:07:37,490
right so now your pipelines can get

00:07:33,470 --> 00:07:39,950
fresh credentials or secrets when they

00:07:37,490 --> 00:07:42,410
need them some folks I've taught to

00:07:39,950 --> 00:07:44,150
implement you know a one-hour policy so

00:07:42,410 --> 00:07:46,340
every hour these things are refreshed

00:07:44,150 --> 00:07:49,190
and when their pipelines are executed

00:07:46,340 --> 00:07:51,830
they're grabbing you know new secrets

00:07:49,190 --> 00:07:53,270
and some folks maybe even do it once a

00:07:51,830 --> 00:07:54,950
week right but whatever it is there's

00:07:53,270 --> 00:07:57,440
still a nice layer of protection there

00:07:54,950 --> 00:07:58,910
that I definitely would recommend if

00:07:57,440 --> 00:08:03,500
you're not doing it already start

00:07:58,910 --> 00:08:07,220
looking at it so now that we have our

00:08:03,500 --> 00:08:11,000
pipelines protected I'm gonna recap

00:08:07,220 --> 00:08:13,280
security so if you're not using a

00:08:11,000 --> 00:08:15,380
secrets management policy or tooling

00:08:13,280 --> 00:08:16,940
definitely take a look at that to start

00:08:15,380 --> 00:08:19,220
implementing some things that will help

00:08:16,940 --> 00:08:21,770
you integrate into your pipelines and

00:08:19,220 --> 00:08:24,560
then you can generate strong event

00:08:21,770 --> 00:08:27,410
random strong passwords and auto-rotate

00:08:24,560 --> 00:08:32,300
them based on whatever policy your

00:08:27,410 --> 00:08:34,640
organization utilizes so let's talk

00:08:32,300 --> 00:08:37,760
about pipeline sprawl this is the bulk

00:08:34,640 --> 00:08:41,260
of the presentation I kind of came up

00:08:37,760 --> 00:08:43,910
with this term because a lot of the

00:08:41,260 --> 00:08:47,120
configuration tooling out there are

00:08:43,910 --> 00:08:49,610
generally running in a sent in a file

00:08:47,120 --> 00:08:52,400
configuration so what that means is you

00:08:49,610 --> 00:08:54,410
have one code repository and then you

00:08:52,400 --> 00:08:56,660
have your pipelines defined in what we

00:08:54,410 --> 00:08:58,820
call a configuration file and most

00:08:56,660 --> 00:09:02,630
tooling operate modern tooling cd2

00:08:58,820 --> 00:09:04,850
operates this way it's a really nice way

00:09:02,630 --> 00:09:06,170
to operate because you're compiling

00:09:04,850 --> 00:09:07,940
configurations are listed

00:09:06,170 --> 00:09:10,250
code right or defined in code and it

00:09:07,940 --> 00:09:11,630
lives with your codebase usually which

00:09:10,250 --> 00:09:17,540
is cool but it does present some

00:09:11,630 --> 00:09:22,519
problems so again here's the ratio right

00:09:17,540 --> 00:09:24,260
so and by the way this is a general map

00:09:22,519 --> 00:09:26,630
this is general math it doesn't apply to

00:09:24,260 --> 00:09:29,209
every organization or team I understand

00:09:26,630 --> 00:09:30,860
that you know folks may have a whole

00:09:29,209 --> 00:09:32,750
different configuration but in general

00:09:30,860 --> 00:09:36,410
my conversations this is how most people

00:09:32,750 --> 00:09:39,230
operate it's one code repository right

00:09:36,410 --> 00:09:42,980
and then one pipeline configuration file

00:09:39,230 --> 00:09:45,500
per and most of the time these

00:09:42,980 --> 00:09:48,440
configuration files use yamo as their

00:09:45,500 --> 00:09:52,790
data structure syntax whoever you're in

00:09:48,440 --> 00:09:58,040
the room is a fan of yamo it's more than

00:09:52,790 --> 00:10:00,589
I thought III actually I actually when I

00:09:58,040 --> 00:10:02,540
first started at circle I was like let's

00:10:00,589 --> 00:10:04,579
jam well like really can I just do

00:10:02,540 --> 00:10:07,490
this in JSON and then I actually wrote a

00:10:04,579 --> 00:10:10,040
my pipelines in JSON and I wrote of like

00:10:07,490 --> 00:10:12,709
a parser to then feed circle the yamo

00:10:10,040 --> 00:10:14,660
and yet don't do that I was like this is

00:10:12,709 --> 00:10:16,070
terrible it was so much work and I think

00:10:14,660 --> 00:10:18,500
that now I learned to love and

00:10:16,070 --> 00:10:21,709
appreciate llamo the problem with the

00:10:18,500 --> 00:10:24,140
ammo is folks want to do things in it

00:10:21,709 --> 00:10:26,660
like you know processes and functions

00:10:24,140 --> 00:10:29,180
and you know just do the logical

00:10:26,660 --> 00:10:31,670
computing in it it's not possible

00:10:29,180 --> 00:10:34,310
because Y Amal is a data structure right

00:10:31,670 --> 00:10:36,620
it's not a programming language and you

00:10:34,310 --> 00:10:38,300
know all too many times I mean I was

00:10:36,620 --> 00:10:41,149
speaking with someone recently it was

00:10:38,300 --> 00:10:44,209
like oh I like Emma because you can

00:10:41,149 --> 00:10:46,970
comment and unlike but I wish JSON had

00:10:44,209 --> 00:10:49,399
comments I'm like well you know they're

00:10:46,970 --> 00:10:51,260
built for different things but yeah mo

00:10:49,399 --> 00:10:53,480
is is it like I said is a data structure

00:10:51,260 --> 00:10:54,920
the reason why we use it I believe is

00:10:53,480 --> 00:10:56,930
more it's it's more of a descriptive

00:10:54,920 --> 00:11:00,620
data structure right so it lends itself

00:10:56,930 --> 00:11:04,279
for like human readability and it's not

00:11:00,620 --> 00:11:06,529
as hazy as the braces and the comments

00:11:04,279 --> 00:11:09,500
and the quotes or the semicolons and and

00:11:06,529 --> 00:11:10,880
stuff like that within within JSON so so

00:11:09,500 --> 00:11:12,709
yeah Moe does lends itself it's also

00:11:10,880 --> 00:11:14,690
being used right if you if you're we're

00:11:12,709 --> 00:11:17,180
all DevOps folks here so we're using it

00:11:14,690 --> 00:11:20,160
in most cloud native technologies and

00:11:17,180 --> 00:11:21,900
projects these days kubernetes right

00:11:20,160 --> 00:11:23,970
if you want to do anything in kubernetes

00:11:21,900 --> 00:11:27,870
you generally have to have a llamo file

00:11:23,970 --> 00:11:29,490
right that accompanies that stuff so the

00:11:27,870 --> 00:11:32,040
prop the limitations that llamo has

00:11:29,490 --> 00:11:33,960
though are it can be redundant since you

00:11:32,040 --> 00:11:36,150
can't do any kind of you know variable

00:11:33,960 --> 00:11:38,610
declarations in it or you can't do any

00:11:36,150 --> 00:11:41,760
kind of looping through structures the

00:11:38,610 --> 00:11:43,410
reusability of that yamo is nil right

00:11:41,760 --> 00:11:45,270
unless you're using maybe anchors there

00:11:43,410 --> 00:11:48,120
are anchors there but even that's kind

00:11:45,270 --> 00:11:50,880
of you know tedious and what happens is

00:11:48,120 --> 00:11:52,710
your syntax starts to grow as you your

00:11:50,880 --> 00:11:55,620
pipelines grow and you add functionality

00:11:52,710 --> 00:11:57,570
and tests and and processes writing

00:11:55,620 --> 00:11:59,340
commands that's gonna grow it's going to

00:11:57,570 --> 00:12:01,530
grow exponentially so that means your

00:11:59,340 --> 00:12:04,830
file itself will grow in complexity as

00:12:01,530 --> 00:12:07,020
well and it becomes really hard to

00:12:04,830 --> 00:12:10,650
navigate and manage Rea as we all know

00:12:07,020 --> 00:12:13,530
so that also bleeds into what I call

00:12:10,650 --> 00:12:15,810
repo sprawl so now remember the math it

00:12:13,530 --> 00:12:18,540
was one repository per configuration

00:12:15,810 --> 00:12:22,920
file so imagine if you had a hundred

00:12:18,540 --> 00:12:24,660
repos and then each configurator each

00:12:22,920 --> 00:12:28,320
repo has one configuration file already

00:12:24,660 --> 00:12:29,960
that's a 100 - 100 amount there and then

00:12:28,320 --> 00:12:31,980
if you have to make a change to one

00:12:29,960 --> 00:12:33,900
configuration file and that command that

00:12:31,980 --> 00:12:35,910
you're changing has to propagate over to

00:12:33,900 --> 00:12:40,890
a hundred repo that's that's a lot of

00:12:35,910 --> 00:12:43,080
change right so again that repo sprawl

00:12:40,890 --> 00:12:44,910
now becomes difficult to maintain these

00:12:43,080 --> 00:12:47,520
are all common problems when you're

00:12:44,910 --> 00:12:50,810
dealing with CI CD tooling and we have a

00:12:47,520 --> 00:12:53,550
dilemma right so how do we solve this

00:12:50,810 --> 00:12:54,840
some folks have suggested get ops right

00:12:53,550 --> 00:12:56,370
but if you look at the nature of get ops

00:12:54,840 --> 00:13:00,570
and what it is it's dealing with

00:12:56,370 --> 00:13:02,600
basically one repository so you know

00:13:00,570 --> 00:13:05,040
you're not able to span across multiple

00:13:02,600 --> 00:13:06,810
repositories or using git ops now by the

00:13:05,040 --> 00:13:08,640
way may be smarter mines in the future

00:13:06,810 --> 00:13:11,940
we'll figure this out but currently I

00:13:08,640 --> 00:13:13,590
haven't seen anything that can regarding

00:13:11,940 --> 00:13:15,060
get ops that can kind of give us what we

00:13:13,590 --> 00:13:18,830
need when we're trying to control this

00:13:15,060 --> 00:13:21,360
pipeline sprawl so get-ups is not viable

00:13:18,830 --> 00:13:23,430
now what are our options

00:13:21,360 --> 00:13:26,399
well I took an approach of looking at

00:13:23,430 --> 00:13:29,910
this from as a developer right creating

00:13:26,399 --> 00:13:31,740
separations of concern now when you're

00:13:29,910 --> 00:13:34,019
doing that you have to start by finding

00:13:31,740 --> 00:13:35,519
the commonalities and patterns right in

00:13:34,019 --> 00:13:38,820
your pipeline so let's take an example

00:13:35,519 --> 00:13:40,560
of an s3 upload right so I want to

00:13:38,820 --> 00:13:43,230
upload in all of my pipelines I'm

00:13:40,560 --> 00:13:45,089
uploading an artifact to s3 whether

00:13:43,230 --> 00:13:46,529
that's true or not it's fine but that's

00:13:45,089 --> 00:13:50,550
a common thing and I'm going to use that

00:13:46,529 --> 00:13:52,800
example throughout so already identified

00:13:50,550 --> 00:13:55,920
right the commonality which is the s3

00:13:52,800 --> 00:13:58,589
upload a create an abstraction and then

00:13:55,920 --> 00:14:00,180
I encapsulate the very creative template

00:13:58,589 --> 00:14:01,920
like a class the object-oriented

00:14:00,180 --> 00:14:04,410
programming paradigms right we

00:14:01,920 --> 00:14:07,230
encapsulate that functionality into a

00:14:04,410 --> 00:14:08,760
class or some sort of template and then

00:14:07,230 --> 00:14:11,000
we parameterize that stuff so that makes

00:14:08,760 --> 00:14:13,709
it reusable and then you have

00:14:11,000 --> 00:14:15,750
portability and you're able to create

00:14:13,709 --> 00:14:18,690
modules that can be shared throughout

00:14:15,750 --> 00:14:22,709
your your organization or your team or

00:14:18,690 --> 00:14:24,180
your even your repositories right so

00:14:22,709 --> 00:14:26,339
this is a good example of a hard-coded

00:14:24,180 --> 00:14:28,670
command with a within a yamo file I

00:14:26,339 --> 00:14:30,930
lifted this out of one of my example

00:14:28,670 --> 00:14:32,790
circle CI configuration files and

00:14:30,930 --> 00:14:34,260
basically it's really simple right the

00:14:32,790 --> 00:14:36,620
reason why I say it's hard-coded is if

00:14:34,260 --> 00:14:40,620
you look at that command key there I'm

00:14:36,620 --> 00:14:42,630
literally calling it an AWS s3 function

00:14:40,620 --> 00:14:45,750
and then I'm you know copying an

00:14:42,630 --> 00:14:47,430
artifact to a bucket all right that's

00:14:45,750 --> 00:14:49,200
cool it's just one command shouldn't

00:14:47,430 --> 00:14:50,850
hurt but if you have to multiply that by

00:14:49,200 --> 00:14:52,800
a thousand times if you have to change

00:14:50,850 --> 00:14:54,990
that maybe the file name changes or the

00:14:52,800 --> 00:14:57,750
bucket changes now you have to update

00:14:54,990 --> 00:15:00,089
you know this configuration a thousand

00:14:57,750 --> 00:15:01,380
times if it exists in your files that's

00:15:00,089 --> 00:15:04,290
a huge problem even if you write

00:15:01,380 --> 00:15:05,910
automation to do this right or write

00:15:04,290 --> 00:15:08,399
another script to do this you still have

00:15:05,910 --> 00:15:10,890
to validate your automation to make sure

00:15:08,399 --> 00:15:13,829
that it's updating properly right so

00:15:10,890 --> 00:15:15,839
it's it's a hard problem so my

00:15:13,829 --> 00:15:19,410
recommendation is don't hard-code your

00:15:15,839 --> 00:15:23,790
gamal right and create pipeline

00:15:19,410 --> 00:15:25,320
libraries and when you do that you're

00:15:23,790 --> 00:15:26,940
basically divorcing right that

00:15:25,320 --> 00:15:28,560
functionality that you need you need

00:15:26,940 --> 00:15:31,050
from your yamo and you're giving

00:15:28,560 --> 00:15:34,670
yourself a good

00:15:31,050 --> 00:15:37,950
you know flexibility some dynamic

00:15:34,670 --> 00:15:40,019
functions in there but basically my

00:15:37,950 --> 00:15:42,570
advice is start thinking things is just

00:15:40,019 --> 00:15:45,180
like a programming you know a paradigm

00:15:42,570 --> 00:15:46,380
and create dependency libraries or

00:15:45,180 --> 00:15:48,300
pipeline of what I call pipeline

00:15:46,380 --> 00:15:50,279
libraries and these could be Python

00:15:48,300 --> 00:15:52,350
scripts go scripts bash scripts which

00:15:50,279 --> 00:15:54,510
are really popular but whatever it is or

00:15:52,350 --> 00:15:56,610
even PowerShell just start thinking of

00:15:54,510 --> 00:15:59,930
you know encapsulating that

00:15:56,610 --> 00:16:02,519
functionality outside of the ammo itself

00:15:59,930 --> 00:16:04,680
so this is an example of what I'm

00:16:02,519 --> 00:16:06,450
talking about so remember the example

00:16:04,680 --> 00:16:08,670
that I previously showed you about the

00:16:06,450 --> 00:16:10,709
hard-coded yamo start thinking of things

00:16:08,670 --> 00:16:12,480
like this you know creating environment

00:16:10,709 --> 00:16:15,209
variables that give you some flexibility

00:16:12,480 --> 00:16:17,700
in naming things and then if you look at

00:16:15,209 --> 00:16:20,279
the second run command and the command

00:16:17,700 --> 00:16:22,560
key there I'm calling out an s3 upload

00:16:20,279 --> 00:16:25,079
script so if you just have a generic hey

00:16:22,560 --> 00:16:27,300
s3 call right and uploaded any feed in

00:16:25,079 --> 00:16:29,459
these arguments which are the jar file

00:16:27,300 --> 00:16:33,750
and in the bucket you now have a

00:16:29,459 --> 00:16:37,500
flexible reusable module for your for

00:16:33,750 --> 00:16:39,029
your CI CD pipelines and that gives you

00:16:37,500 --> 00:16:40,920
the ability to actually essentially

00:16:39,029 --> 00:16:43,440
manage that functionality so if you need

00:16:40,920 --> 00:16:46,350
to change one thing in there you're

00:16:43,440 --> 00:16:48,260
doing it right from a central location

00:16:46,350 --> 00:16:50,640
and it'll propagate over to the other

00:16:48,260 --> 00:16:56,630
other places you're using this library

00:16:50,640 --> 00:16:59,430
right it also adds portability again and

00:16:56,630 --> 00:17:00,390
minimizes vendor lock-in who here loves

00:16:59,430 --> 00:17:04,620
vendor lock-in

00:17:00,390 --> 00:17:08,160
that's Wow well he works for Microsoft

00:17:04,620 --> 00:17:10,110
so that's it that's fair that's fair

00:17:08,160 --> 00:17:11,669
well we'll let that one go but now at

00:17:10,110 --> 00:17:14,010
the end of the day right we all

00:17:11,669 --> 00:17:15,329
experience some sort of lock-in I don't

00:17:14,010 --> 00:17:16,740
care if using an open source project

00:17:15,329 --> 00:17:19,140
you're still kind of locked into that

00:17:16,740 --> 00:17:22,050
technology and I am a big proponent of

00:17:19,140 --> 00:17:24,449
you know kind of limiting the control

00:17:22,050 --> 00:17:27,780
that those that technology and tools

00:17:24,449 --> 00:17:29,340
have on your day to day operations so it

00:17:27,780 --> 00:17:32,400
definitely helps with that so if you

00:17:29,340 --> 00:17:34,860
have to change a CC ICD tooling to

00:17:32,400 --> 00:17:36,630
another tooling if you have this you

00:17:34,860 --> 00:17:38,400
know pipeline's library kind of set up

00:17:36,630 --> 00:17:40,740
it's really easy to just you know

00:17:38,400 --> 00:17:41,910
basically create some new llamó or

00:17:40,740 --> 00:17:43,919
whatever it is that they want you to use

00:17:41,910 --> 00:17:44,460
in this new tooling and then call out to

00:17:43,919 --> 00:17:47,190
your batch

00:17:44,460 --> 00:17:48,930
groups or your your library's right so

00:17:47,190 --> 00:17:52,410
that helps with that minimizing vendor

00:17:48,930 --> 00:17:54,690
lock-in at circle CI we solve this by

00:17:52,410 --> 00:17:57,210
creating a product called orbs and it's

00:17:54,690 --> 00:17:59,370
it's a it's like a hybrid feature slash

00:17:57,210 --> 00:18:02,840
open-source project but it enables our

00:17:59,370 --> 00:18:06,450
developers to build out encapsulated

00:18:02,840 --> 00:18:08,940
yamo or in parameterize the mo so now we

00:18:06,450 --> 00:18:10,260
host that on the orbs registry and that

00:18:08,940 --> 00:18:12,090
gives them that centrally managed

00:18:10,260 --> 00:18:13,710
location and if they decide so they

00:18:12,090 --> 00:18:15,180
could actually share that within their

00:18:13,710 --> 00:18:16,890
teams and organizations or make it

00:18:15,180 --> 00:18:20,400
public and people can actually use those

00:18:16,890 --> 00:18:22,590
so yeah it's a really cool way to kind

00:18:20,400 --> 00:18:24,870
of solve this pipeline sprawl problem

00:18:22,590 --> 00:18:26,700
but again it does I'm not gonna I'll be

00:18:24,870 --> 00:18:28,440
honest it has a little bit of a lock in

00:18:26,700 --> 00:18:29,670
there if you don't but you can still

00:18:28,440 --> 00:18:31,320
create orbs that call out to your

00:18:29,670 --> 00:18:33,750
libraries I would still recommend doing

00:18:31,320 --> 00:18:36,330
that but it does streamline that

00:18:33,750 --> 00:18:38,160
pipeline of that config file a little

00:18:36,330 --> 00:18:41,430
bit right so it helps with the not

00:18:38,160 --> 00:18:44,490
having so much volume within the config

00:18:41,430 --> 00:18:48,650
file so yeah real quick to recap

00:18:44,490 --> 00:18:52,140
pipeline sprawl yeah capsulate your your

00:18:48,650 --> 00:18:54,330
your builds and then create you know

00:18:52,140 --> 00:18:57,480
create extractions or extraction the

00:18:54,330 --> 00:19:00,510
capsulation and then identify common

00:18:57,480 --> 00:19:02,100
patterns and pipelines and you can use

00:19:00,510 --> 00:19:04,620
that to consolidate and century manager

00:19:02,100 --> 00:19:06,240
code and then of course the scripting it

00:19:04,620 --> 00:19:09,630
will help you to minimize vendor lock-in

00:19:06,240 --> 00:19:11,730
and add a ton of portability I think

00:19:09,630 --> 00:19:14,070
that's it for today do you have any time

00:19:11,730 --> 00:19:15,930
for questions if anybody has one awesome

00:19:14,070 --> 00:19:18,210
so does anybody have any questions about

00:19:15,930 --> 00:19:19,150
this alright thank you so much everybody

00:19:18,210 --> 00:19:22,570
who say it

00:19:19,150 --> 00:19:35,880
[Applause]

00:19:22,570 --> 00:19:35,880

YouTube URL: https://www.youtube.com/watch?v=RULAVygPPkw


