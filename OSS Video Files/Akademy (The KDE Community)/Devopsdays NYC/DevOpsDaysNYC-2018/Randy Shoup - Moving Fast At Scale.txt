Title: Randy Shoup - Moving Fast At Scale
Publication date: 2018-02-01
Playlist: DevOpsDaysNYC-2018
Description: 
	Most companies slow down as they get larger, but some actually get faster. This talk will discuss the speaker’s experiences leading high-performing engineering teams at Google, eBay, and Stitch Fix, and will discuss the organization, the processes, and the culture that can help a company move fast – and even accelerate – as it grows. Modern software-service models take advantage of the great benefits in having the same team both build the software as well as operate it in production – we call this DevOps, or simply “You Build It; You Run It”. What does this mean in practice? Organizationally, it means small teams with well-defined areas of responsibility, directly aligned with the business. The teams are cross-functional, meaning that each team has all the skill sets it requires to do its job, while at the same time relying on other teams for supporting services, tools, and libraries. Process-wise, it means doubling down on practices like test-driven development and continuous delivery. Using continuous delivery practices, high-performing teams can and do release their applications and services multiple times a day. This enables them to iterate rapidly, experiment courageously, and fail more quickly. Culturally, it means end-to-end ownership. Each team owns its software end-to-end, from design to development to deployment to retirement. The same engineers who are responsible for the features are responsible for quality, performance, operations, and maintenance. This ownership puts incentives in the right place to encourage building maintainable, observable, and operable systems from the start. All these techniques and approaches are available to everyone, and practical examples in this talk will help other organizations on their journey.

https://www.devopsdays.org/events/2018-new-york-city/program/randy-shoup/
Captions: 
	00:00:00,000 --> 00:00:17,609
[Music]

00:00:19,220 --> 00:00:25,560
talk about moving fastest scale so a

00:00:23,460 --> 00:00:27,029
little bit about me super briefly so you

00:00:25,560 --> 00:00:29,250
know we're a bunch of these lessons are

00:00:27,029 --> 00:00:32,250
coming from so until the end of February

00:00:29,250 --> 00:00:34,559
I am the director the VP of engineering

00:00:32,250 --> 00:00:36,000
and stitch fix we use technology and

00:00:34,559 --> 00:00:38,399
biggest science to revolutionize

00:00:36,000 --> 00:00:40,829
clothing retail who's sort of stitch fix

00:00:38,399 --> 00:00:43,829
in the crowd cool also great we got a

00:00:40,829 --> 00:00:45,660
extra customer last night as you know my

00:00:43,829 --> 00:00:48,000
talking with my speaker dinner so that's

00:00:45,660 --> 00:00:50,610
good always trying to do my part

00:00:48,000 --> 00:00:53,399
oh and I'm also modeling it too before

00:00:50,610 --> 00:00:55,530
that I was sort of hoping CTO as service

00:00:53,399 --> 00:00:58,500
as my friends used to say I spent about

00:00:55,530 --> 00:01:00,000
a year and a half talking about these

00:00:58,500 --> 00:01:01,739
types of things like how to move fast

00:01:00,000 --> 00:01:04,260
how to do things with technology and

00:01:01,739 --> 00:01:06,090
organization before that I always

00:01:04,260 --> 00:01:07,590
director of engineering at Google for

00:01:06,090 --> 00:01:10,140
Google App Engine so that's Google's

00:01:07,590 --> 00:01:12,390
platform as a service like a Roku or

00:01:10,140 --> 00:01:14,159
engine yard or cloud foundry and then

00:01:12,390 --> 00:01:16,409
before that I was chief engineer at eBay

00:01:14,159 --> 00:01:18,210
for about six years and I spent a bunch

00:01:16,409 --> 00:01:20,580
of time working on eBay circuit and

00:01:18,210 --> 00:01:23,549
instructure some of the lessons from

00:01:20,580 --> 00:01:26,939
which we'll talk about here so in all

00:01:23,549 --> 00:01:30,689
these things I have learned that faster

00:01:26,939 --> 00:01:32,759
is better and but often we have this

00:01:30,689 --> 00:01:34,740
question we're like well should we do it

00:01:32,759 --> 00:01:36,360
fast or should we do it right in other

00:01:34,740 --> 00:01:39,030
words if there is a question there is a

00:01:36,360 --> 00:01:42,210
dichotomy between speed and stability

00:01:39,030 --> 00:01:44,700
well let's find out who is familiar with

00:01:42,210 --> 00:01:46,920
this book great

00:01:44,700 --> 00:01:48,630
and the lucky another review that will

00:01:46,920 --> 00:01:51,329
you know kind of jaws and where every is

00:01:48,630 --> 00:01:53,240
signing your book copies you know with

00:01:51,329 --> 00:01:55,100
28 minutes from now we're now

00:01:53,240 --> 00:01:58,400
count yourselves lucky it's a great book

00:01:55,100 --> 00:02:00,200
I was happy to be a small part of some

00:01:58,400 --> 00:02:03,740
of the conversations in here so great

00:02:00,200 --> 00:02:05,060
great job that all authors did so here

00:02:03,740 --> 00:02:07,340
are some things that are some learnings

00:02:05,060 --> 00:02:10,130
from net luck high-performing

00:02:07,340 --> 00:02:13,250
organizations versus low performing

00:02:10,130 --> 00:02:14,630
organizations have a huge range in the

00:02:13,250 --> 00:02:16,250
number of times they are releasing

00:02:14,630 --> 00:02:18,440
things to production and the number of

00:02:16,250 --> 00:02:20,660
times they are able to produce value for

00:02:18,440 --> 00:02:23,540
customers so multiple deployments per

00:02:20,660 --> 00:02:25,100
day versus maybe one per month also the

00:02:23,540 --> 00:02:27,890
time the cycle time the lead time

00:02:25,100 --> 00:02:29,330
between when I commit a piece of code as

00:02:27,890 --> 00:02:31,280
a developer and when it actually shows

00:02:29,330 --> 00:02:33,230
up to production that might be less than

00:02:31,280 --> 00:02:35,420
an hour in order minutes or it might be

00:02:33,230 --> 00:02:37,700
as long as one week let's say and you

00:02:35,420 --> 00:02:39,530
know a lower performing organization a

00:02:37,700 --> 00:02:41,150
high performing organization might be

00:02:39,530 --> 00:02:42,890
able to recover from a failure in less

00:02:41,150 --> 00:02:44,630
than an hour versus maybe a day or

00:02:42,890 --> 00:02:47,180
longer in one of the lower performing

00:02:44,630 --> 00:02:50,690
organizations and then finally the

00:02:47,180 --> 00:02:52,520
ability to the rate at which problems

00:02:50,690 --> 00:02:54,320
end up in production so the change

00:02:52,520 --> 00:02:55,730
failure rate what's the percentage of

00:02:54,320 --> 00:02:58,400
time we release something and it goes

00:02:55,730 --> 00:03:00,110
wrong is far far lower order magnitude

00:02:58,400 --> 00:03:01,760
lower in the higher performing

00:03:00,110 --> 00:03:03,950
organizations versus the lower

00:03:01,760 --> 00:03:05,750
performing ones so an interesting thing

00:03:03,950 --> 00:03:06,950
you might learn and you might notice

00:03:05,750 --> 00:03:11,660
here in these things

00:03:06,950 --> 00:03:16,700
this part is speed and this part is

00:03:11,660 --> 00:03:20,180
stability so it is not just it is not

00:03:16,700 --> 00:03:21,680
speed or stability the high performing

00:03:20,180 --> 00:03:23,959
organizations those people that are in

00:03:21,680 --> 00:03:25,970
that like upper whatever right hand

00:03:23,959 --> 00:03:28,420
quadrant of the mythical thing I could

00:03:25,970 --> 00:03:31,160
show you if I want to do a darker deal

00:03:28,420 --> 00:03:34,640
if I have folks they have speed and

00:03:31,160 --> 00:03:36,860
stability yeah the same exact things

00:03:34,640 --> 00:03:39,590
that allow us to go fast are also those

00:03:36,860 --> 00:03:42,380
things that allow us to be stable and oh

00:03:39,590 --> 00:03:44,270
by the way if we cared more than about

00:03:42,380 --> 00:03:45,770
just engineering metrics metrics it

00:03:44,270 --> 00:03:47,239
turns out that these companies and these

00:03:45,770 --> 00:03:49,310
organizations are two and a half times

00:03:47,239 --> 00:03:50,090
more likely to have things like

00:03:49,310 --> 00:03:53,180
productivity

00:03:50,090 --> 00:03:53,599
market share and profitability all right

00:03:53,180 --> 00:03:55,819
cool

00:03:53,599 --> 00:03:57,890
this sounds great let's do it I want to

00:03:55,819 --> 00:03:59,540
talk about four aspects of very little

00:03:57,890 --> 00:04:01,340
of which in fact almost none of which is

00:03:59,540 --> 00:04:03,200
technology like usually I talk about

00:04:01,340 --> 00:04:04,730
micro services and clouds and all these

00:04:03,200 --> 00:04:06,170
kinds of things I will not talk about

00:04:04,730 --> 00:04:07,970
any of those things we can talk about

00:04:06,170 --> 00:04:09,650
that at the break what I am going to

00:04:07,970 --> 00:04:11,989
talk about is the organizational and

00:04:09,650 --> 00:04:13,670
cultural and process sizes so first I'm

00:04:11,989 --> 00:04:15,440
going to talk about organizing for speed

00:04:13,670 --> 00:04:17,299
then I'm going to talk about what to

00:04:15,440 --> 00:04:19,280
build and in particular what not to

00:04:17,299 --> 00:04:21,139
build then I'm going to talk about when

00:04:19,280 --> 00:04:23,389
to build things and finally how to build

00:04:21,139 --> 00:04:25,550
it okay all right

00:04:23,389 --> 00:04:27,889
first we'll talk about organizing for

00:04:25,550 --> 00:04:29,060
speed so this has been mentioned I think

00:04:27,889 --> 00:04:31,160
several times already

00:04:29,060 --> 00:04:33,919
certainly yesterday and in John's

00:04:31,160 --> 00:04:35,900
opening keynote but Conway's law so you

00:04:33,919 --> 00:04:38,240
know Mel Conway in 1968 made this

00:04:35,900 --> 00:04:40,850
observation that essentially you ship

00:04:38,240 --> 00:04:43,340
your word structure right the

00:04:40,850 --> 00:04:46,070
organization of a software organization

00:04:43,340 --> 00:04:47,990
is reflected directly in its

00:04:46,070 --> 00:04:49,760
architecture so more precisely the

00:04:47,990 --> 00:04:51,229
design of the system is going to be a

00:04:49,760 --> 00:04:53,660
reflection of the communication paths

00:04:51,229 --> 00:04:55,729
within your organization so if we want

00:04:53,660 --> 00:04:57,890
to have a modular system where as we

00:04:55,729 --> 00:04:59,960
grow larger individual teams can move

00:04:57,890 --> 00:05:02,240
quickly and independently and

00:04:59,960 --> 00:05:04,460
autonomously we're going to need to have

00:05:02,240 --> 00:05:06,800
a modular organization so small

00:05:04,460 --> 00:05:08,750
independent teams are much more likely

00:05:06,800 --> 00:05:11,180
to lead to more flexible composable

00:05:08,750 --> 00:05:13,100
infrastructures and by contrast a larger

00:05:11,180 --> 00:05:15,740
interdependent team is much more likely

00:05:13,100 --> 00:05:16,520
to lead to a monolith sort of spaghetti

00:05:15,740 --> 00:05:18,800
code situation

00:05:16,520 --> 00:05:19,580
this is accord with people's intuition

00:05:18,800 --> 00:05:22,789
and experience

00:05:19,580 --> 00:05:25,190
yeah nods all around cool what is cool

00:05:22,789 --> 00:05:26,539
about this though and many people much

00:05:25,190 --> 00:05:30,289
smarter than I have said this I'll just

00:05:26,539 --> 00:05:32,990
say it again is that this is not just a

00:05:30,289 --> 00:05:35,419
descriptive law this is also a normative

00:05:32,990 --> 00:05:38,150
law nor would it look it up it means

00:05:35,419 --> 00:05:41,360
that it's a thing you can do you can you

00:05:38,150 --> 00:05:42,380
can make it happen so another way to say

00:05:41,360 --> 00:05:45,139
that or the way that was more

00:05:42,380 --> 00:05:47,630
provocative for me is we can engineer

00:05:45,139 --> 00:05:50,000
the software system that we want by

00:05:47,630 --> 00:05:52,430
first engineering the organization does

00:05:50,000 --> 00:05:54,169
it make sense what what do we want the

00:05:52,430 --> 00:05:55,650
architecture to look like you know and

00:05:54,169 --> 00:05:57,510
months or years from now

00:05:55,650 --> 00:05:59,520
that's what the organization needs to

00:05:57,510 --> 00:06:02,760
look like now so we can get there

00:05:59,520 --> 00:06:04,050
does it make sense cool all right what

00:06:02,760 --> 00:06:05,160
does that organization

00:06:04,050 --> 00:06:07,410
what's that organization going to be

00:06:05,160 --> 00:06:09,720
like well this is how Google works

00:06:07,410 --> 00:06:11,160
Amazon works Netflix work statistics

00:06:09,720 --> 00:06:13,890
works a bunch of these companies that

00:06:11,160 --> 00:06:16,500
are in the upper right quadrant small

00:06:13,890 --> 00:06:18,090
service team so that what the wonderful

00:06:16,500 --> 00:06:20,070
you know very evocative metaphor that is

00:06:18,090 --> 00:06:22,890
credited to Jeff Bezos of Amazon is the

00:06:20,070 --> 00:06:24,150
to pizza team right so no team should be

00:06:22,890 --> 00:06:27,090
larger than should it be fed by two

00:06:24,150 --> 00:06:29,310
large pizzas the fun the fun corollary

00:06:27,090 --> 00:06:30,630
for my friends at Amazon is that that

00:06:29,310 --> 00:06:32,160
means you actually can't have too many

00:06:30,630 --> 00:06:35,220
of the younger people because they do

00:06:32,160 --> 00:06:38,430
much pizza so typically it's going to be

00:06:35,220 --> 00:06:40,080
four to six people and also that team

00:06:38,430 --> 00:06:41,520
should be full staff we can talk about

00:06:40,080 --> 00:06:42,510
whether every engineer and the team

00:06:41,520 --> 00:06:44,400
should be full stack that's a

00:06:42,510 --> 00:06:46,680
conversation we can absolutely have but

00:06:44,400 --> 00:06:48,300
certainly within that team boundary we

00:06:46,680 --> 00:06:50,520
need all the skill sets all the

00:06:48,300 --> 00:06:52,620
disciplines that we need that we need to

00:06:50,520 --> 00:06:54,480
have to get our job done so that doesn't

00:06:52,620 --> 00:06:56,850
mean all the disciplines in life right

00:06:54,480 --> 00:06:58,350
so there's no there's no team there's

00:06:56,850 --> 00:07:01,790
certainly no afford a six-person team

00:06:58,350 --> 00:07:04,320
that does design to the silicon

00:07:01,790 --> 00:07:05,820
manufacturing the hardware racking and

00:07:04,320 --> 00:07:07,230
stacking in the data centers blah blah

00:07:05,820 --> 00:07:08,610
blah all the way up ten levels to the

00:07:07,230 --> 00:07:11,970
stack to something that you know shows

00:07:08,610 --> 00:07:13,230
under JavaScript but we can form team

00:07:11,970 --> 00:07:15,180
boundaries around

00:07:13,230 --> 00:07:17,970
oh I'm producing this user visible

00:07:15,180 --> 00:07:19,650
application so I do need you know people

00:07:17,970 --> 00:07:21,270
that can do the user visible things and

00:07:19,650 --> 00:07:22,710
I also need maybe some persistence and

00:07:21,270 --> 00:07:24,690
some business logic does it make sense

00:07:22,710 --> 00:07:28,170
like we can form these four to six

00:07:24,690 --> 00:07:30,210
person teams out of a an array of skill

00:07:28,170 --> 00:07:32,700
sets or within that team reverie that

00:07:30,210 --> 00:07:34,230
all do the job we want to do so beam up

00:07:32,700 --> 00:07:35,820
so we made a small team that's great

00:07:34,230 --> 00:07:38,250
what is that team do well great let's

00:07:35,820 --> 00:07:42,540
have it do a thing that matters for the

00:07:38,250 --> 00:07:45,510
business let's align the purpose and the

00:07:42,540 --> 00:07:47,940
focus and the effort of the team toward

00:07:45,510 --> 00:07:49,230
a particular business domain so just

00:07:47,940 --> 00:07:51,240
like we're going to design our

00:07:49,230 --> 00:07:53,430
technology we would like to have around

00:07:51,240 --> 00:07:55,990
this service team a clear well-defined

00:07:53,430 --> 00:07:57,820
interface it's just one

00:07:55,990 --> 00:07:59,500
a set of related things small set of

00:07:57,820 --> 00:08:02,680
related things it might as an

00:07:59,500 --> 00:08:04,480
operational consequence maintain one

00:08:02,680 --> 00:08:06,700
service or an application or a set of

00:08:04,480 --> 00:08:08,320
related services and applications and be

00:08:06,700 --> 00:08:10,240
fun corollary for the people that are on

00:08:08,320 --> 00:08:12,040
that team is it means that that the

00:08:10,240 --> 00:08:14,380
people on the team develop a deep

00:08:12,040 --> 00:08:16,690
understanding of that particular product

00:08:14,380 --> 00:08:18,190
or that particular business problem does

00:08:16,690 --> 00:08:21,420
it make sense what I'm talking about

00:08:18,190 --> 00:08:23,800
here our product teams not project teams

00:08:21,420 --> 00:08:26,740
yeah cool

00:08:23,800 --> 00:08:28,960
and so you see you ask maybe well ok

00:08:26,740 --> 00:08:31,270
that's great Randy but like as my team

00:08:28,960 --> 00:08:32,470
you know and my organization is growing

00:08:31,270 --> 00:08:34,600
well how do you deal with it right like

00:08:32,470 --> 00:08:35,620
what if you have more than six people

00:08:34,600 --> 00:08:38,350
worth of work to do

00:08:35,620 --> 00:08:41,260
well remember high school biology and

00:08:38,350 --> 00:08:43,390
cellular mitosis so you have the team

00:08:41,260 --> 00:08:45,700
that is you know of a certain size and

00:08:43,390 --> 00:08:47,800
you it has more responsibilities and

00:08:45,700 --> 00:08:49,630
then just let cells in your body you

00:08:47,800 --> 00:08:51,610
know you split it into two and then each

00:08:49,630 --> 00:08:54,210
of those you know pair of cells splits

00:08:51,610 --> 00:08:57,400
into two etc etc does it make sense and

00:08:54,210 --> 00:08:58,900
the legit question is you've not been in

00:08:57,400 --> 00:09:00,220
an organization like this like how do

00:08:58,900 --> 00:09:02,230
you figure out how to find the

00:09:00,220 --> 00:09:03,820
boundaries to be honest that has never

00:09:02,230 --> 00:09:05,800
been a problem like that I've never

00:09:03,820 --> 00:09:07,450
actually I mean theoretically one could

00:09:05,800 --> 00:09:10,150
imagine like oh I don't know how to

00:09:07,450 --> 00:09:12,340
split these twelve peoples work into two

00:09:10,150 --> 00:09:14,170
teams of six in practice that has never

00:09:12,340 --> 00:09:16,800
been a problem they always it always

00:09:14,170 --> 00:09:19,660
seems to naturally subdivide on

00:09:16,800 --> 00:09:22,390
front-end back-end or like some vertical

00:09:19,660 --> 00:09:24,210
split where we subdivide the domain it

00:09:22,390 --> 00:09:28,060
is always work that there is a clear

00:09:24,210 --> 00:09:28,690
seam or set of seams that happens that

00:09:28,060 --> 00:09:31,990
make sense

00:09:28,690 --> 00:09:35,050
so all right in this world where we have

00:09:31,990 --> 00:09:37,270
autonomous teams what do the leaders do

00:09:35,050 --> 00:09:40,060
well they do organization design right

00:09:37,270 --> 00:09:41,860
so you figure out as a leader how can we

00:09:40,060 --> 00:09:44,020
make it so that eighty percent or maybe

00:09:41,860 --> 00:09:45,370
roughly a person let's say a project

00:09:44,020 --> 00:09:47,170
where it can be within one of those team

00:09:45,370 --> 00:09:48,820
boundaries so by definition almost

00:09:47,170 --> 00:09:51,820
you're not going to get all of it right

00:09:48,820 --> 00:09:53,200
because by definition a strategic thing

00:09:51,820 --> 00:09:55,210
that your company is trying to do is

00:09:53,200 --> 00:09:56,410
going to cross multiple teams so you're

00:09:55,210 --> 00:09:58,720
I'm not trying to say don't do those

00:09:56,410 --> 00:10:00,100
projects I'm trying to say if you can

00:09:58,720 --> 00:10:01,880
figure out a way to draw your team

00:10:00,100 --> 00:10:03,680
boundaries so most of the work

00:10:01,880 --> 00:10:05,149
things within the boundary and not

00:10:03,680 --> 00:10:07,370
cross-team then you've done a good job

00:10:05,149 --> 00:10:11,470
and oh by the way this is a lot like

00:10:07,370 --> 00:10:13,910
designing services - yeah all right cool

00:10:11,470 --> 00:10:16,089
next I want to talk about what to build

00:10:13,910 --> 00:10:18,649
in particular what not to build so a

00:10:16,089 --> 00:10:23,750
fantastic book which you must all now go

00:10:18,649 --> 00:10:25,430
out and read is the 2003 2003 book

00:10:23,750 --> 00:10:27,040
called lean software development by Mary

00:10:25,430 --> 00:10:31,220
Ann Tom Papa dick

00:10:27,040 --> 00:10:33,589
it is so prescient it is unbelievable I

00:10:31,220 --> 00:10:34,730
just reread it a week or so ago because

00:10:33,589 --> 00:10:36,199
I was actually gonna go see them in

00:10:34,730 --> 00:10:39,620
person in Minneapolis which was great

00:10:36,199 --> 00:10:41,810
they're wonderful people but so many

00:10:39,620 --> 00:10:42,889
wonderful lessons that are alike that is

00:10:41,810 --> 00:10:45,019
when they could have written in that

00:10:42,889 --> 00:10:47,139
book in 2018 I'll say that one of the

00:10:45,019 --> 00:10:50,120
many very wise things they said is this

00:10:47,139 --> 00:10:52,370
building the wrong thing is the biggest

00:10:50,120 --> 00:10:53,779
waste in software development doesn't

00:10:52,370 --> 00:10:55,160
make sense so like there are lots of

00:10:53,779 --> 00:10:56,420
things that we do that are wasteful and

00:10:55,160 --> 00:10:59,000
maybe slower than it could be or

00:10:56,420 --> 00:11:00,259
whatever but like a hundred percent of

00:10:59,000 --> 00:11:01,880
the effort that we put is you're

00:11:00,259 --> 00:11:05,149
building the wrong thing is waste

00:11:01,880 --> 00:11:07,790
yeah a hundred percent so let's figure

00:11:05,149 --> 00:11:09,500
out how not to do that so if you take

00:11:07,790 --> 00:11:13,370
nothing else away from this talk I would

00:11:09,500 --> 00:11:16,459
like you to take these seven words what

00:11:13,370 --> 00:11:19,130
problem are you trying so so as I'm sure

00:11:16,459 --> 00:11:20,930
happens you will have a business person

00:11:19,130 --> 00:11:22,399
a product person somebody that wants

00:11:20,930 --> 00:11:23,810
some work you know legitimate work from

00:11:22,399 --> 00:11:25,040
your team they'll come to you and

00:11:23,810 --> 00:11:27,050
they'll say something like hey it

00:11:25,040 --> 00:11:29,300
already could you guys add this button

00:11:27,050 --> 00:11:31,279
you need to do this thing for me and I

00:11:29,300 --> 00:11:33,439
would like your response as it is as I

00:11:31,279 --> 00:11:34,850
do your response to B I will make

00:11:33,439 --> 00:11:36,470
happily adding that button but first

00:11:34,850 --> 00:11:38,899
let's have this conversation what

00:11:36,470 --> 00:11:40,850
problem are you trying to solve does it

00:11:38,899 --> 00:11:42,439
make sense it may well be like we're

00:11:40,850 --> 00:11:44,120
happy to write code like I'm happy to

00:11:42,439 --> 00:11:46,069
add the button that might not be the

00:11:44,120 --> 00:11:48,050
right solution to the problem so let's

00:11:46,069 --> 00:11:50,209
think about what might be so first on

00:11:48,050 --> 00:11:50,959
and this you know I guess common sense

00:11:50,209 --> 00:11:53,180
it's not that common

00:11:50,959 --> 00:11:54,110
like let's focus on what's important for

00:11:53,180 --> 00:11:55,939
the business so let's have that

00:11:54,110 --> 00:11:57,110
conversation be around what are the

00:11:55,939 --> 00:12:00,079
business goals we're trying to achieve

00:11:57,110 --> 00:12:01,790
and that and we as engineers will

00:12:00,079 --> 00:12:04,220
engineer a solution to and solve that

00:12:01,790 --> 00:12:05,839
problem what is cool is that once you

00:12:04,220 --> 00:12:07,939
have an understanding of the problem it

00:12:05,839 --> 00:12:10,130
might actually not need to be solved

00:12:07,939 --> 00:12:10,980
with technology this happens all the

00:12:10,130 --> 00:12:13,260
time it's too

00:12:10,980 --> 00:12:14,250
right we have physical we have physical

00:12:13,260 --> 00:12:16,380
goods we store them in physical

00:12:14,250 --> 00:12:18,240
warehouses a number of times we've been

00:12:16,380 --> 00:12:20,970
in conversations with the very smart

00:12:18,240 --> 00:12:22,829
warehouse team you know that we serve

00:12:20,970 --> 00:12:24,480
and they're like hey we want to change

00:12:22,829 --> 00:12:26,250
the process around in the line to new

00:12:24,480 --> 00:12:27,570
mexico why are Z and then we were like

00:12:26,250 --> 00:12:29,459
well I don't know can you just change

00:12:27,570 --> 00:12:30,660
the process like why do we need to

00:12:29,459 --> 00:12:33,839
change the tool and when you have that

00:12:30,660 --> 00:12:35,070
conversation right or maybe we do think

00:12:33,839 --> 00:12:37,829
that there's a better way to do it

00:12:35,070 --> 00:12:40,139
downstream and the request is could you

00:12:37,829 --> 00:12:42,149
automate this new process I'll be trying

00:12:40,139 --> 00:12:43,350
to get oh no we think it's going to be

00:12:42,149 --> 00:12:44,970
better I'll tell you what why don't we

00:12:43,350 --> 00:12:46,440
experiment on the new process and like

00:12:44,970 --> 00:12:47,730
do it manually for a little while and

00:12:46,440 --> 00:12:49,620
then see if it's good and then I'll

00:12:47,730 --> 00:12:51,570
happily automate it after that does it

00:12:49,620 --> 00:12:53,130
make sense and again what you're trying

00:12:51,570 --> 00:12:55,410
to do here is just simply gain a better

00:12:53,130 --> 00:12:56,550
understanding more empathy for the

00:12:55,410 --> 00:12:59,459
business problem that you're trying to

00:12:56,550 --> 00:13:01,709
solve and so a wonderful quote that I

00:12:59,459 --> 00:13:03,300
use here a lot is the former head of

00:13:01,709 --> 00:13:04,949
research for General Motors you know

00:13:03,300 --> 00:13:07,230
once upon a time the largest auto

00:13:04,949 --> 00:13:10,769
manufacturer in the world a problem well

00:13:07,230 --> 00:13:13,260
stated is a problem a salt really true

00:13:10,769 --> 00:13:15,690
make sense all right cool

00:13:13,260 --> 00:13:17,490
so we decided we have to build something

00:13:15,690 --> 00:13:20,339
or something needs to be built well

00:13:17,490 --> 00:13:21,540
maybe we don't have to build it so this

00:13:20,339 --> 00:13:24,899
is probably preaching to the converted

00:13:21,540 --> 00:13:26,040
but like in the in 2018 maybe we don't

00:13:24,899 --> 00:13:27,540
have to build a lot of physical

00:13:26,040 --> 00:13:30,449
infrastructure maybe we could rent it

00:13:27,540 --> 00:13:33,420
from an Amazon or Google or you know of

00:13:30,449 --> 00:13:35,220
Microsoft or whatever stitch fix has no

00:13:33,420 --> 00:13:37,829
own physical infrastructure on the

00:13:35,220 --> 00:13:41,100
planet other than laptops and some Wi-Fi

00:13:37,829 --> 00:13:42,690
devices in the warehouses prefer and by

00:13:41,100 --> 00:13:44,550
the way we are more of a unicorn than a

00:13:42,690 --> 00:13:46,740
horse I get that but this is these

00:13:44,550 --> 00:13:49,829
things are available to to everybody in

00:13:46,740 --> 00:13:51,600
2018 also if software needs to be

00:13:49,829 --> 00:13:52,980
written let's think about maybe doing

00:13:51,600 --> 00:13:54,390
open source for the beginning right

00:13:52,980 --> 00:13:57,060
certainly the kinds of technologies that

00:13:54,390 --> 00:13:59,370
we talk about in this crowd you know

00:13:57,060 --> 00:14:01,890
container orchestration frameworks open

00:13:59,370 --> 00:14:03,720
source databases for us we do a ton of

00:14:01,890 --> 00:14:05,699
machine learning all we don't write the

00:14:03,720 --> 00:14:07,760
models ourselves like we do stuff on top

00:14:05,699 --> 00:14:09,560
of that but there's a ton of open sort

00:14:07,760 --> 00:14:11,000
software out there and by the way it's

00:14:09,560 --> 00:14:12,440
usually actually better than the

00:14:11,000 --> 00:14:14,570
commercial alternatives so you

00:14:12,440 --> 00:14:16,340
absolutely should think about it before

00:14:14,570 --> 00:14:20,930
you go off and write or pay for

00:14:16,340 --> 00:14:23,840
something in 2018 sorry I'm not all that

00:14:20,930 --> 00:14:25,040
you know PC always it's a rough time to

00:14:23,840 --> 00:14:26,870
be selling software

00:14:25,040 --> 00:14:28,100
it's a rough time in the world to sell

00:14:26,870 --> 00:14:30,980
software if that's your business

00:14:28,100 --> 00:14:34,010
but guess what I love the service yeah

00:14:30,980 --> 00:14:37,490
if you provide a great software do it

00:14:34,010 --> 00:14:40,010
all yeah so it's stitch fix we use Wayne

00:14:37,490 --> 00:14:41,450
we use way more than 50 third-party

00:14:40,010 --> 00:14:43,610
services for things like logging

00:14:41,450 --> 00:14:45,200
monitoring learning some of the people

00:14:43,610 --> 00:14:46,100
that are sponsors here or you know we're

00:14:45,200 --> 00:14:49,250
customers to them

00:14:46,100 --> 00:14:50,960
project management bug tracking payments

00:14:49,250 --> 00:14:53,480
filling all these things that are not

00:14:50,960 --> 00:14:55,610
core competencies of our business we are

00:14:53,480 --> 00:14:57,380
very happy to leverage as a service and

00:14:55,610 --> 00:15:00,800
have that be somebody else's business it

00:14:57,380 --> 00:15:03,320
makes sense cool okay this is a quip

00:15:00,800 --> 00:15:05,000
that I'd like to say soon and I think

00:15:03,320 --> 00:15:06,680
it's going to be just as common to run

00:15:05,000 --> 00:15:09,590
your own data center as it has to run

00:15:06,680 --> 00:15:11,690
your own electrical power generation by

00:15:09,590 --> 00:15:13,730
the way when Henry Ford like when they

00:15:11,690 --> 00:15:16,280
started assembly lines in the turn of

00:15:13,730 --> 00:15:17,720
the 20th century the very first thing

00:15:16,280 --> 00:15:19,490
you would do before starting a factory

00:15:17,720 --> 00:15:22,640
is like where am I going to get power

00:15:19,490 --> 00:15:26,870
and that's not hook into the grid that's

00:15:22,640 --> 00:15:28,550
like where is there a river yeah that's

00:15:26,870 --> 00:15:29,390
what you had to do first we have come a

00:15:28,550 --> 00:15:31,490
long way baby

00:15:29,390 --> 00:15:33,710
and we still have a long way to go you

00:15:31,490 --> 00:15:35,000
know in computing cool all right the

00:15:33,710 --> 00:15:37,250
last thing I want to talk about in terms

00:15:35,000 --> 00:15:39,650
of building the right thing is iterating

00:15:37,250 --> 00:15:41,870
to a solution through experimentation so

00:15:39,650 --> 00:15:43,550
if we're gonna do it if we're going to

00:15:41,870 --> 00:15:45,350
do something major let's try out

00:15:43,550 --> 00:15:48,590
something small and see if we can out

00:15:45,350 --> 00:15:49,850
them around front load the learnings so

00:15:48,590 --> 00:15:52,130
that we make sure we're on the right

00:15:49,850 --> 00:15:53,780
path so what we're doing some science

00:15:52,130 --> 00:15:56,150
doer when we do it experiments so let's

00:15:53,780 --> 00:15:58,160
actually snag a hypothesis about what

00:15:56,150 --> 00:16:00,590
metrics are we going to move in what

00:15:58,160 --> 00:16:01,940
direction and what magnitude and also

00:16:00,590 --> 00:16:03,470
you have to understand what the baseline

00:16:01,940 --> 00:16:04,850
is before you do that does it make sense

00:16:03,470 --> 00:16:06,620
you have to understand what's the thing

00:16:04,850 --> 00:16:07,040
what's the current level of that matters

00:16:06,620 --> 00:16:09,320
before we

00:16:07,040 --> 00:16:11,630
move forward Vanna to run a relay me

00:16:09,320 --> 00:16:14,360
test with a proper sample isolate

00:16:11,630 --> 00:16:17,149
treatment and control groups if you've

00:16:14,360 --> 00:16:18,740
run experiments in production no Pease

00:16:17,149 --> 00:16:20,930
right you got to make sure it until

00:16:18,740 --> 00:16:23,870
you've completely done the whole sample

00:16:20,930 --> 00:16:26,569
before you make real statistically valid

00:16:23,870 --> 00:16:29,329
conclusions you do want to very

00:16:26,569 --> 00:16:31,009
obsessively log and measure the user

00:16:29,329 --> 00:16:33,290
behavior and the system behavior as

00:16:31,009 --> 00:16:34,819
you're going along because if your

00:16:33,290 --> 00:16:36,709
experiment goes well it will help you

00:16:34,819 --> 00:16:38,630
understand why that's true when your

00:16:36,709 --> 00:16:40,880
experiment does not go well it will help

00:16:38,630 --> 00:16:42,319
you understand why that's true yeah

00:16:40,880 --> 00:16:44,930
it'll help you design maybe the next

00:16:42,319 --> 00:16:47,060
experiment the next that make sense all

00:16:44,930 --> 00:16:49,100
right two examples from eBay where we

00:16:47,060 --> 00:16:51,220
put this into practice so this was 2010

00:16:49,100 --> 00:16:53,569
2011 timeframe when I was still there

00:16:51,220 --> 00:16:55,069
what we were doing was introducing the

00:16:53,569 --> 00:16:56,870
idea of machine learning into the

00:16:55,069 --> 00:16:59,149
ranking function of eBay search results

00:16:56,870 --> 00:17:01,040
so just like google has PageRank eBay

00:16:59,149 --> 00:17:03,230
has a similar ranking function that

00:17:01,040 --> 00:17:04,760
decides you know what result goes in the

00:17:03,230 --> 00:17:08,150
first position the tenth position the

00:17:04,760 --> 00:17:09,860
hundredths position etc before before we

00:17:08,150 --> 00:17:12,079
did this work there was a hand-tuned set

00:17:09,860 --> 00:17:13,909
of factors basically written by a

00:17:12,079 --> 00:17:15,679
product manager and that product manager

00:17:13,909 --> 00:17:17,900
was a very smart person so it actually

00:17:15,679 --> 00:17:20,329
took us a year to beat it but you'll see

00:17:17,900 --> 00:17:21,799
what happened so we did an increment and

00:17:20,329 --> 00:17:23,419
our goal was to use hundreds maybe

00:17:21,799 --> 00:17:25,100
thousands of factors you know beyond

00:17:23,419 --> 00:17:27,890
what a human could actually put together

00:17:25,100 --> 00:17:29,179
so we had a bunch of data scientists we

00:17:27,890 --> 00:17:30,770
didn't actually even have that word yet

00:17:29,179 --> 00:17:33,020
but we had a bunch of people that knew

00:17:30,770 --> 00:17:35,000
how to do this stuff they developed some

00:17:33,020 --> 00:17:37,100
predictive models around what happens

00:17:35,000 --> 00:17:38,840
when people parade for things to you

00:17:37,100 --> 00:17:40,790
know viewing them on the site blah blah

00:17:38,840 --> 00:17:42,710
we did a whole bunch of parallel ami

00:17:40,790 --> 00:17:45,860
tests on the site and we kept up control

00:17:42,710 --> 00:17:48,350
all the way long we did a full year of

00:17:45,860 --> 00:17:50,419
sort of steady incremental improvements

00:17:48,350 --> 00:17:53,570
this was a game of inches and at the end

00:17:50,419 --> 00:17:55,880
of that year we generated with this work

00:17:53,570 --> 00:17:58,159
alone a 2% increase in the overall

00:17:55,880 --> 00:18:02,470
revenue of eBay Corporation which was

00:17:58,159 --> 00:18:05,450
120 million dollars that was pretty cool

00:18:02,470 --> 00:18:08,030
that was pretty cool okay we added

00:18:05,450 --> 00:18:10,610
another thing in parallel site speed so

00:18:08,030 --> 00:18:12,350
who is shocked to learn that a faster

00:18:10,610 --> 00:18:13,379
website means people would like buy more

00:18:12,350 --> 00:18:15,789
and use it

00:18:13,379 --> 00:18:17,649
but the records show nobody is shocked

00:18:15,789 --> 00:18:20,080
by this idea you will be surprised how

00:18:17,649 --> 00:18:21,519
much I had to try to convince the

00:18:20,080 --> 00:18:22,570
product manager people that this was an

00:18:21,519 --> 00:18:25,089
important thing but that's that's

00:18:22,570 --> 00:18:28,809
another story that's like in most tears

00:18:25,089 --> 00:18:30,669
and whiskey or beer ok our goal here was

00:18:28,809 --> 00:18:32,499
to reduce the user experience latency

00:18:30,669 --> 00:18:34,330
for the search results again we did a

00:18:32,499 --> 00:18:36,159
similar iterative process we would

00:18:34,330 --> 00:18:38,349
implement a potential improvement we

00:18:36,159 --> 00:18:40,330
would a be tested on the site we would

00:18:38,349 --> 00:18:41,950
we would watch the metrics many of the

00:18:40,330 --> 00:18:44,200
things we tried didn't work many of them

00:18:41,950 --> 00:18:46,149
did ok again the game of inches like

00:18:44,200 --> 00:18:48,669
there was no one thing that was like oh

00:18:46,149 --> 00:18:51,460
all of a sudden slow mate went too fast

00:18:48,669 --> 00:18:54,549
but like incremental improvements again

00:18:51,460 --> 00:18:56,259
with this work another 2% increase in

00:18:54,549 --> 00:18:58,839
the overall revenue of the company so

00:18:56,259 --> 00:19:01,029
again another 120 million dollars a year

00:18:58,839 --> 00:19:03,279
so between these two sets of efforts

00:19:01,029 --> 00:19:06,539
each of which involved tens of people it

00:19:03,279 --> 00:19:10,629
was a quarter billion dollars so yeah

00:19:06,539 --> 00:19:12,669
that's cool all right very proud - I

00:19:10,629 --> 00:19:14,619
mean I'll just say ultimately like I did

00:19:12,669 --> 00:19:16,299
very little this work like that's what

00:19:14,619 --> 00:19:17,469
the court maybe part like I was

00:19:16,299 --> 00:19:18,969
coordinating it but like I was very

00:19:17,469 --> 00:19:20,409
happy very proud to be involved with all

00:19:18,969 --> 00:19:24,639
the people that did the actual real work

00:19:20,409 --> 00:19:28,139
cool when to build things when to build

00:19:24,639 --> 00:19:30,999
things is about the prioritization we

00:19:28,139 --> 00:19:32,859
always have more to do then we have

00:19:30,999 --> 00:19:34,570
resources to do it yeah so raise your

00:19:32,859 --> 00:19:36,249
hand if you have more than enough

00:19:34,570 --> 00:19:38,950
resources and people to do everything

00:19:36,249 --> 00:19:41,049
you've been asked to do right let the

00:19:38,950 --> 00:19:44,589
record show that no hands and no hands

00:19:41,049 --> 00:19:46,719
winner yeah scarce resources require

00:19:44,589 --> 00:19:48,639
prioritization right that is almost by

00:19:46,719 --> 00:19:50,259
definition I can't do it all so I have

00:19:48,639 --> 00:19:52,119
to prioritize what I'm going to do and

00:19:50,259 --> 00:19:54,549
this is all about opportunity costs

00:19:52,119 --> 00:19:56,919
right if I decide to do X with my team

00:19:54,549 --> 00:19:58,029
I'm implicitly deciding not to do why

00:19:56,919 --> 00:19:59,649
does it make sense

00:19:58,029 --> 00:20:02,190
so all these decisions that we're making

00:19:59,649 --> 00:20:04,719
implicitly or otherwise are trade offs

00:20:02,190 --> 00:20:06,669
and what we would like to do and again

00:20:04,719 --> 00:20:08,409
common sense is not that common is we

00:20:06,669 --> 00:20:10,659
would like to have that prioritization

00:20:08,409 --> 00:20:12,759
be driven by return on investment like

00:20:10,659 --> 00:20:14,200
correctly we should like to think about

00:20:12,759 --> 00:20:15,849
what investment we're going to make into

00:20:14,200 --> 00:20:17,769
a thing what we're turn are we going to

00:20:15,849 --> 00:20:21,460
get and sort of you know sort by that

00:20:17,769 --> 00:20:22,630
cool the second thing I would like you

00:20:21,460 --> 00:20:28,080
to take away

00:20:22,630 --> 00:20:31,260
these four words fewer things more done

00:20:28,080 --> 00:20:33,880
it's not great English but it's a bucket

00:20:31,260 --> 00:20:35,800
so here's the way most people run

00:20:33,880 --> 00:20:37,030
projects and I will say it's ditched

00:20:35,800 --> 00:20:39,460
existence the way we were running

00:20:37,030 --> 00:20:41,020
projects even less than a year ago so

00:20:39,460 --> 00:20:42,250
I've got five people on my team will

00:20:41,020 --> 00:20:44,440
around I should have five parallel

00:20:42,250 --> 00:20:46,000
projects yeah and let's imagine these

00:20:44,440 --> 00:20:47,980
are in priority order so the first one

00:20:46,000 --> 00:20:52,050
is the top priority second third fourth

00:20:47,980 --> 00:20:54,640
fifth what's wrong with this picture

00:20:52,050 --> 00:20:56,380
it's the fifth is getting exactly the

00:20:54,640 --> 00:20:58,450
amount the same amount of resource as

00:20:56,380 --> 00:21:01,180
the first yeah it seems very natural

00:20:58,450 --> 00:21:02,320
five people five projects all parallel

00:21:01,180 --> 00:21:04,750
great and they all end

00:21:02,320 --> 00:21:05,830
you know ich by the end of you know

00:21:04,750 --> 00:21:08,080
whatever time you're you're talking

00:21:05,830 --> 00:21:10,330
about well a better way to do this with

00:21:08,080 --> 00:21:14,200
exactly the same number of resources and

00:21:10,330 --> 00:21:17,350
the exact same priorities is this what

00:21:14,200 --> 00:21:19,000
if we put if it's possible of two people

00:21:17,350 --> 00:21:21,070
on the first priority I mean it has to

00:21:19,000 --> 00:21:22,990
be useful to do that but let's imagine

00:21:21,070 --> 00:21:25,150
that two people could be productive on

00:21:22,990 --> 00:21:26,740
first priority imagine two people could

00:21:25,150 --> 00:21:28,270
be productive on the second priority and

00:21:26,740 --> 00:21:30,280
we'll put a four it will put one person

00:21:28,270 --> 00:21:32,080
on the third priority and then when the

00:21:30,280 --> 00:21:34,030
first windows you know two pairs are

00:21:32,080 --> 00:21:35,590
done with priorities one and thirty-two

00:21:34,030 --> 00:21:38,560
then we'll put them on four and five

00:21:35,590 --> 00:21:40,300
does it make sense so we have a cheat

00:21:38,560 --> 00:21:43,090
and this is not even assuming that we're

00:21:40,300 --> 00:21:44,470
going to get improvements in efficiency

00:21:43,090 --> 00:21:47,140
by doing things all together that I

00:21:44,470 --> 00:21:49,150
think is also true but simply the fact

00:21:47,140 --> 00:21:51,670
of doing fewer things at the same time

00:21:49,150 --> 00:21:53,410
reducing hwhip yeah which is the lean

00:21:51,670 --> 00:21:55,330
way to think about it we've already made

00:21:53,410 --> 00:21:57,580
our lives better why because we have

00:21:55,330 --> 00:21:59,500
delivered the full value of priority one

00:21:57,580 --> 00:22:02,020
and priority two earlier than we would

00:21:59,500 --> 00:22:03,970
otherwise yeah we're in the we're in New

00:22:02,020 --> 00:22:06,220
York time value of money like the

00:22:03,970 --> 00:22:08,260
compounding interest which we're

00:22:06,220 --> 00:22:10,960
definitely are in this an innocence

00:22:08,260 --> 00:22:14,200
scenario we are taking advantage of the

00:22:10,960 --> 00:22:16,600
idea and we have the option to do the

00:22:14,200 --> 00:22:18,400
higher priority things first in fact

00:22:16,600 --> 00:22:21,790
that's exactly what higher priority

00:22:18,400 --> 00:22:24,340
means yeah when I say something is

00:22:21,790 --> 00:22:27,240
priority one like by definition if

00:22:24,340 --> 00:22:29,610
there's only one thing I can do

00:22:27,240 --> 00:22:32,100
but so few of us and I'll say openly me

00:22:29,610 --> 00:22:34,770
too so few of us actually run you know

00:22:32,100 --> 00:22:36,870
our teams in that way this this sound

00:22:34,770 --> 00:22:38,880
makes make sense people are feeling it

00:22:36,870 --> 00:22:40,260
was good all right the other thing which

00:22:38,880 --> 00:22:42,320
I don't even show in the diagram because

00:22:40,260 --> 00:22:44,550
I put it together this morning was

00:22:42,320 --> 00:22:47,250
incremental delivery so an even better

00:22:44,550 --> 00:22:49,260
way to do that would be deliver not just

00:22:47,250 --> 00:22:51,060
one thing halfway through the period but

00:22:49,260 --> 00:22:52,410
deliver incremental value you know a

00:22:51,060 --> 00:22:53,580
tenth of the way through like you

00:22:52,410 --> 00:22:54,750
squeeze or whatever does it make sense

00:22:53,580 --> 00:22:57,600
like that makes it even better and

00:22:54,750 --> 00:23:00,540
better better make sense cool and the

00:22:57,600 --> 00:23:03,120
overall idea here is simply this this

00:23:00,540 --> 00:23:07,020
clever quote when you solve problem one

00:23:03,120 --> 00:23:09,060
probably two gets promotion by the way

00:23:07,020 --> 00:23:09,330
if anybody knows that I googled around a

00:23:09,060 --> 00:23:10,770
lot

00:23:09,330 --> 00:23:13,080
like I work I didn't make this up but I

00:23:10,770 --> 00:23:15,060
heard it somewhere and I would love to

00:23:13,080 --> 00:23:16,380
find the records if anybody knows that I

00:23:15,060 --> 00:23:18,450
would love to I'd love to hear it but

00:23:16,380 --> 00:23:20,640
I've googled quite a bit of heaven it

00:23:18,450 --> 00:23:23,640
will find it anyway cool all right so

00:23:20,640 --> 00:23:24,990
that is when to build things the last

00:23:23,640 --> 00:23:28,320
section and what I talk about here is

00:23:24,990 --> 00:23:30,830
how to build them so one of the things

00:23:28,320 --> 00:23:33,780
that I feel really strongly about in the

00:23:30,830 --> 00:23:36,600
27 28 years gosh I have been in the

00:23:33,780 --> 00:23:38,880
industry is this is that we should

00:23:36,600 --> 00:23:40,080
really move quality to the left yeah

00:23:38,880 --> 00:23:43,170
that's something that comes out of

00:23:40,080 --> 00:23:46,290
Toyota an auto lean that has absolutely

00:23:43,170 --> 00:23:47,880
been been my experience the way I like

00:23:46,290 --> 00:23:50,100
to think about it and again riffing on a

00:23:47,880 --> 00:23:51,780
little bit this priority idea is I like

00:23:50,100 --> 00:23:54,650
to think about quality and reliability

00:23:51,780 --> 00:23:58,220
and as sort of priorities zero features

00:23:54,650 --> 00:24:01,080
yeah they are equally as important as

00:23:58,220 --> 00:24:04,890
you know cool product features or a

00:24:01,080 --> 00:24:06,900
beautiful user interface why if the site

00:24:04,890 --> 00:24:11,760
isn't up it doesn't matter how pretty it

00:24:06,900 --> 00:24:14,760
is yeah if the site is not up it does

00:24:11,760 --> 00:24:17,370
not matter how pretty this okay cool all

00:24:14,760 --> 00:24:18,860
these things are important of course but

00:24:17,370 --> 00:24:22,470
some are you know

00:24:18,860 --> 00:24:24,450
all right as a consequence the way and

00:24:22,470 --> 00:24:27,000
again riffing on the waited for teams I

00:24:24,450 --> 00:24:29,250
like to have the same team the same set

00:24:27,000 --> 00:24:31,309
of developers responsible not just for

00:24:29,250 --> 00:24:33,320
the features of the product

00:24:31,309 --> 00:24:34,850
building but also for the quality of it

00:24:33,320 --> 00:24:36,559
for the performance of it for the

00:24:34,850 --> 00:24:39,169
reliability of it for the management of

00:24:36,559 --> 00:24:41,749
it that's a way of having that small to

00:24:39,169 --> 00:24:43,460
Pizza full-stack team be able to be

00:24:41,749 --> 00:24:45,139
productive and and have tight feedback

00:24:43,460 --> 00:24:47,600
loops within there and be able to

00:24:45,139 --> 00:24:49,909
produce that quality right the easiest

00:24:47,600 --> 00:24:51,649
way to produce high-quality production

00:24:49,909 --> 00:24:53,509
software is to have it be written with

00:24:51,649 --> 00:24:55,460
high quality in the beginning does it

00:24:53,509 --> 00:24:58,399
make sense and catch bugs earlier fail

00:24:55,460 --> 00:24:59,720
faster all right cool so a technique

00:24:58,399 --> 00:25:01,460
that we use and it's certainly not

00:24:59,720 --> 00:25:03,139
unique to stitch fix but we absolutely

00:25:01,460 --> 00:25:05,509
use it you know very religiously is

00:25:03,139 --> 00:25:07,759
test-driven development right so what we

00:25:05,509 --> 00:25:11,090
do is you're probably familiar with this

00:25:07,759 --> 00:25:13,039
idea is that as part of writing a thing

00:25:11,090 --> 00:25:16,039
we write the test to make sure that

00:25:13,039 --> 00:25:18,619
thing is correct and why do we do that

00:25:16,039 --> 00:25:21,529
we do not do that because we want to be

00:25:18,619 --> 00:25:25,039
slow that's not our goal we do it

00:25:21,529 --> 00:25:27,019
because we want to be faster why does it

00:25:25,039 --> 00:25:30,350
make you faster Randy when you're doing

00:25:27,019 --> 00:25:36,679
more work is it faster to run on

00:25:30,350 --> 00:25:39,049
quicksand or on solid ground solid grip

00:25:36,679 --> 00:25:41,119
let the left or hopefully show that

00:25:39,049 --> 00:25:43,580
that's what people know it's much faster

00:25:41,119 --> 00:25:44,840
to run on solid ground and what is solid

00:25:43,580 --> 00:25:46,820
about software it's like highly tested

00:25:44,840 --> 00:25:49,730
stuff right so I want to make sure that

00:25:46,820 --> 00:25:51,110
the things that I built last week I know

00:25:49,730 --> 00:25:52,850
we're going to keep working and won't

00:25:51,110 --> 00:25:55,429
break you know when I do my thing this

00:25:52,850 --> 00:25:57,590
week does it make sense so test why do I

00:25:55,429 --> 00:25:59,869
do this I'm a test make better code a

00:25:57,590 --> 00:26:01,999
because I know the stuff that I got left

00:25:59,869 --> 00:26:04,490
because solid but bean now I have the

00:26:01,999 --> 00:26:06,860
confidence to like completely blow up

00:26:04,490 --> 00:26:09,200
and rewrite that last thing because I

00:26:06,860 --> 00:26:10,730
know that if I if I make a mistake or I

00:26:09,200 --> 00:26:12,139
could screw something up that I'm the

00:26:10,730 --> 00:26:14,149
tests are going to catch it does it make

00:26:12,139 --> 00:26:17,659
sense the tests have my back they allow

00:26:14,149 --> 00:26:19,159
me to be courageous in that way tests

00:26:17,659 --> 00:26:20,899
make better systems because again it

00:26:19,159 --> 00:26:22,309
allows us to catch bugs earlier it

00:26:20,899 --> 00:26:24,649
allows us to fail faster so that

00:26:22,309 --> 00:26:26,720
feedback loop that third way of DevOps

00:26:24,649 --> 00:26:30,679
that tighten the feedback loop happens

00:26:26,720 --> 00:26:32,559
earlier so Microsoft did a great survey

00:26:30,679 --> 00:26:34,210
of developer whatever

00:26:32,559 --> 00:26:38,649
was actually do all day and I think way

00:26:34,210 --> 00:26:40,659
back in 2006 so interestingly this is

00:26:38,649 --> 00:26:42,639
probably not what you expect but it's a

00:26:40,659 --> 00:26:45,279
quartz more than you would think maybe

00:26:42,639 --> 00:26:47,110
with my own intuition if I have to like

00:26:45,279 --> 00:26:48,610
really be honest about it is we actually

00:26:47,110 --> 00:26:50,679
spend the vast majority of our time

00:26:48,610 --> 00:26:53,620
reading and understanding existing code

00:26:50,679 --> 00:26:55,330
and then modifying existing code maybe

00:26:53,620 --> 00:26:57,039
if we're at a good situation to refactor

00:26:55,330 --> 00:26:58,509
it to get ready to wear a thing but like

00:26:57,039 --> 00:27:00,100
really we only spend five percent of our

00:26:58,509 --> 00:27:01,269
time writing new code and this you know

00:27:00,100 --> 00:27:02,769
these numbers are going to be different

00:27:01,269 --> 00:27:05,110
where based on where you are in the

00:27:02,769 --> 00:27:06,669
lifecycle of your company but the vast

00:27:05,110 --> 00:27:09,070
majority of developers are kind of in

00:27:06,669 --> 00:27:10,690
this situation so give it so the

00:27:09,070 --> 00:27:12,090
investment that we would make and it is

00:27:10,690 --> 00:27:16,059
an investment in test-driven development

00:27:12,090 --> 00:27:16,830
helps with both of these yeah it helps

00:27:16,059 --> 00:27:19,179
with the reading and understanding

00:27:16,830 --> 00:27:21,190
existing code because the tests our

00:27:19,179 --> 00:27:23,499
executable documentation for how that's

00:27:21,190 --> 00:27:26,139
supposed to work yeah

00:27:23,499 --> 00:27:28,809
and also it's super helps when I'm

00:27:26,139 --> 00:27:30,789
modifying existing comes right like I

00:27:28,809 --> 00:27:32,440
make I go in there and I like that looks

00:27:30,789 --> 00:27:34,840
stupid I'm gonna tear that thing out and

00:27:32,440 --> 00:27:37,029
like did it break anything no no good

00:27:34,840 --> 00:27:39,129
all right then and that wasn't you know

00:27:37,029 --> 00:27:40,899
a useful thing it actually also helps

00:27:39,129 --> 00:27:42,399
with the writing new code but like I

00:27:40,899 --> 00:27:44,440
think the point is made like it

00:27:42,399 --> 00:27:46,899
certainly helps in minimum it helps a

00:27:44,440 --> 00:27:50,259
lot and very obviously with the 95

00:27:46,899 --> 00:27:52,659
percent case make senses cool all right

00:27:50,259 --> 00:27:57,999
who is for this we don't have time to do

00:27:52,659 --> 00:28:00,749
it right here's what you get to say do

00:27:57,999 --> 00:28:00,749
you have time to do it twice

00:28:00,840 --> 00:28:06,880
that's a choice that's choice that is

00:28:04,419 --> 00:28:08,320
really choice and I assert and this is

00:28:06,880 --> 00:28:10,059
for an experience from you know I used

00:28:08,320 --> 00:28:12,190
to have hair what's the more time the

00:28:10,059 --> 00:28:14,350
more it's the more constrained that you

00:28:12,190 --> 00:28:16,090
are in time and resources actually the

00:28:14,350 --> 00:28:16,659
more important is to build it right the

00:28:16,090 --> 00:28:19,120
first time

00:28:16,659 --> 00:28:21,309
why because we just do not have time to

00:28:19,120 --> 00:28:25,899
go back and fix that last thing that we

00:28:21,309 --> 00:28:27,730
didn't finish it make sense so I would

00:28:25,899 --> 00:28:30,309
like and from a user's perspective also

00:28:27,730 --> 00:28:33,639
I would like to build one great thing

00:28:30,309 --> 00:28:35,500
rather than two half-inch things and

00:28:33,639 --> 00:28:37,389
like when I I want to be very clear when

00:28:35,500 --> 00:28:39,760
I say right I don't mean perfect I mean

00:28:37,389 --> 00:28:42,639
the MVP style like build just what you

00:28:39,760 --> 00:28:43,419
need minimally Viable II and then move

00:28:42,639 --> 00:28:45,850
on to the next thing

00:28:43,419 --> 00:28:47,169
so we do this at stitch fix and the

00:28:45,850 --> 00:28:49,299
consequence that it has for our

00:28:47,169 --> 00:28:52,269
development process is we basically

00:28:49,299 --> 00:28:54,970
don't have a bug tracking system so we

00:28:52,269 --> 00:28:56,740
are not magical software developers we

00:28:54,970 --> 00:28:59,019
are just as wonderful and terrible as

00:28:56,740 --> 00:29:01,600
everybody in everything everywhere

00:28:59,019 --> 00:29:05,440
believe me but because of our process

00:29:01,600 --> 00:29:08,710
and because of our strong belief in and

00:29:05,440 --> 00:29:11,740
practice test development we just when

00:29:08,710 --> 00:29:13,299
bugs come up we just fix them yeah so we

00:29:11,740 --> 00:29:14,799
don't have this long we do actually

00:29:13,299 --> 00:29:16,720
absolutely have a backlog and we do

00:29:14,799 --> 00:29:19,450
absolutely produce bugs so the vast

00:29:16,720 --> 00:29:20,919
majority of those bugs are noticed and

00:29:19,450 --> 00:29:22,690
fixed before they ever make it to a

00:29:20,919 --> 00:29:24,580
customer so that's cool when they do

00:29:22,690 --> 00:29:26,740
make it to a customer they are small

00:29:24,580 --> 00:29:28,779
enough in number that we just fix them

00:29:26,740 --> 00:29:31,840
right away does it make sense so that

00:29:28,779 --> 00:29:34,120
backlog which we totally have is not a

00:29:31,840 --> 00:29:35,350
list of all the thousand broken things

00:29:34,120 --> 00:29:38,080
that we're never going to get around to

00:29:35,350 --> 00:29:40,360
fixing let's be honest it is a list of

00:29:38,080 --> 00:29:42,309
features we want to build and technical

00:29:40,360 --> 00:29:44,639
debt which we absolutely have that we

00:29:42,309 --> 00:29:46,750
took openly and transparently and

00:29:44,639 --> 00:29:51,220
intentionally that we ultimately want to

00:29:46,750 --> 00:29:53,620
reap any does it make sense cool all

00:29:51,220 --> 00:29:55,360
right so we talked about organizing for

00:29:53,620 --> 00:29:57,190
speed we talked about what to build and

00:29:55,360 --> 00:29:58,990
what not to build we talked about when

00:29:57,190 --> 00:30:01,450
to build things and finally we talked

00:29:58,990 --> 00:30:06,210
about how to build them and I will again

00:30:01,450 --> 00:30:14,229
remind you faster is that thanks

00:30:06,210 --> 00:30:14,229

YouTube URL: https://www.youtube.com/watch?v=zqPQ0La8hZk


