Title: Scott Jehl - Delivering Responsibly
Publication date: 2015-07-01
Playlist: CSSConf Australia 2015 Talks
Description: 
	Thanks to our friends at SitePoint, Scott Jehl's CSSConf Australia 2015 presentation: Delivering Responsibly

http://2015.cssconf.com.au/
https://twitter.com/scottjehl
http://scottjehl.com
Captions: 
	00:00:00,000 --> 00:00:04,980
I really appreciate this opportunity to

00:00:02,730 --> 00:00:08,820
come to Australia this is my first time

00:00:04,980 --> 00:00:10,260
here I was in Sydney last week that was

00:00:08,820 --> 00:00:13,110
really nice there was a nice conference

00:00:10,260 --> 00:00:15,570
there got some surfing in now I'm in

00:00:13,110 --> 00:00:20,279
Melbourne the cafe scene the restaurants

00:00:15,570 --> 00:00:22,289
been amazing also the sightseeing I've

00:00:20,279 --> 00:00:23,730
also really enjoyed the different

00:00:22,289 --> 00:00:26,099
phrases like learning the different

00:00:23,730 --> 00:00:28,619
terminology some of the words a little

00:00:26,099 --> 00:00:31,769
different you know good day of course I

00:00:28,619 --> 00:00:33,840
was sort of expected but we also have

00:00:31,769 --> 00:00:36,420
different names for all these common

00:00:33,840 --> 00:00:37,739
things that really surprised me for

00:00:36,420 --> 00:00:41,940
example I went on this tour yesterday

00:00:37,739 --> 00:00:46,260
and you would not believe it but in the

00:00:41,940 --> 00:00:47,370
States we call these kangaroos so anyway

00:00:46,260 --> 00:00:49,770
it's just really you know it's

00:00:47,370 --> 00:00:52,800
interesting to see these differences but

00:00:49,770 --> 00:00:54,059
um that's not the subject of this talk I

00:00:52,800 --> 00:00:56,579
wouldn't come all the way over here to

00:00:54,059 --> 00:00:59,370
tell you about ultimate penguins you

00:00:56,579 --> 00:01:04,260
know all about them so this talk will be

00:00:59,370 --> 00:01:05,640
about delivering responsibly looks like

00:01:04,260 --> 00:01:10,110
the slides dead for a moment there

00:01:05,640 --> 00:01:12,600
alright so let's get started so as web

00:01:10,110 --> 00:01:15,210
designers and developers our job is to

00:01:12,600 --> 00:01:17,420
build sites and services that respond

00:01:15,210 --> 00:01:20,790
appropriately to our users needs and

00:01:17,420 --> 00:01:22,979
while responding the idea of responding

00:01:20,790 --> 00:01:28,500
or reacting sort of sounds like a

00:01:22,979 --> 00:01:30,210
passive act or reactive act even if

00:01:28,500 --> 00:01:31,890
you've built sites that work really well

00:01:30,210 --> 00:01:35,670
across devices before you know that's

00:01:31,890 --> 00:01:37,770
that's hardly the case right our sites

00:01:35,670 --> 00:01:40,530
need to respond to all sorts of factors

00:01:37,770 --> 00:01:42,090
and conditions and reacting to those

00:01:40,530 --> 00:01:45,570
those factors and conditions

00:01:42,090 --> 00:01:50,149
intelligently demands a very proactive

00:01:45,570 --> 00:01:53,009
and tireless practice requires a careful

00:01:50,149 --> 00:01:54,659
consideration for thought research

00:01:53,009 --> 00:01:59,130
testing little bit of creativity

00:01:54,659 --> 00:02:01,710
sometimes because ultimately we want to

00:01:59,130 --> 00:02:03,210
deliver sites that feel at home on any

00:02:01,710 --> 00:02:06,329
particular device feel really

00:02:03,210 --> 00:02:09,300
appropriate on that device and the more

00:02:06,329 --> 00:02:12,300
we meet our users expectations and their

00:02:09,300 --> 00:02:14,849
intuitions even the better and more

00:02:12,300 --> 00:02:18,450
efficient our services and our reach

00:02:14,849 --> 00:02:20,700
becomes so to do that our Tsar sites

00:02:18,450 --> 00:02:24,330
need to respond appropriately in many

00:02:20,700 --> 00:02:27,500
ways some examples of that our user

00:02:24,330 --> 00:02:30,150
interfaces need to respond and adapt

00:02:27,500 --> 00:02:34,019
appropriately to a device's screen or

00:02:30,150 --> 00:02:35,910
viewport size and to adequately prepare

00:02:34,019 --> 00:02:39,150
our sites for those screen size

00:02:35,910 --> 00:02:43,319
variations we can use that that magical

00:02:39,150 --> 00:02:46,050
combination of fluid layout fluid media

00:02:43,319 --> 00:02:52,830
like images in video and CSS media

00:02:46,050 --> 00:02:58,019
queries responsive design right slide

00:02:52,830 --> 00:03:01,379
advanced please I'll just wait for this

00:02:58,019 --> 00:03:06,780
to play out so that's a responsive

00:03:01,379 --> 00:03:08,459
design all right so of course there's

00:03:06,780 --> 00:03:10,980
more to it than that to that add then

00:03:08,459 --> 00:03:13,920
just screen size alone in a viewport

00:03:10,980 --> 00:03:17,370
size along with screen size conditions

00:03:13,920 --> 00:03:20,040
in considerations we need to pair the

00:03:17,370 --> 00:03:23,190
fidelity of our components that comprise

00:03:20,040 --> 00:03:25,790
our overall layouts with what can be

00:03:23,190 --> 00:03:28,860
expected of a particular devices

00:03:25,790 --> 00:03:31,799
capabilities and support right so this

00:03:28,860 --> 00:03:35,549
means qualifying the application of the

00:03:31,799 --> 00:03:37,650
features that we deliver so that they

00:03:35,549 --> 00:03:41,340
can be made safely so that we don't try

00:03:37,650 --> 00:03:46,220
to make enhancements that can that can

00:03:41,340 --> 00:03:46,220
break and already usable experience

00:03:47,180 --> 00:03:53,879
additionally our interfaces need to be

00:03:51,239 --> 00:03:57,080
usable and respond to a variety of input

00:03:53,879 --> 00:04:00,739
mechanisms so keyboard mouse touch

00:03:57,080 --> 00:04:03,780
assistive technology like screen readers

00:04:00,739 --> 00:04:05,700
most devices offer multiple means of

00:04:03,780 --> 00:04:09,090
interacting with a page multiple input

00:04:05,700 --> 00:04:11,640
modes so in preparing our sites for

00:04:09,090 --> 00:04:13,560
input we need to be really careful not

00:04:11,640 --> 00:04:18,600
to make presumptions or assumptions

00:04:13,560 --> 00:04:20,430
about any of any one input mode being in

00:04:18,600 --> 00:04:24,240
play at any given time often there are

00:04:20,430 --> 00:04:24,800
many in play so that means from a CSS

00:04:24,240 --> 00:04:28,250
perspect

00:04:24,800 --> 00:04:32,659
if maybe larger click areas for tap

00:04:28,250 --> 00:04:35,060
targets for JavaScript that ties into

00:04:32,659 --> 00:04:37,940
that CSS maybe we need to use more

00:04:35,060 --> 00:04:40,550
traditional event handlers like click

00:04:37,940 --> 00:04:42,080
events and then layer on top of them so

00:04:40,550 --> 00:04:44,629
that they support everything a little

00:04:42,080 --> 00:04:46,849
more broadly so those are just a few

00:04:44,629 --> 00:04:49,520
ways that we need to make our sites

00:04:46,849 --> 00:04:52,669
respond appropriately right but before

00:04:49,520 --> 00:04:55,129
we can even consider those things we

00:04:52,669 --> 00:04:57,830
need to respond in the first place right

00:04:55,129 --> 00:04:59,719
and we need to respond quickly so we

00:04:57,830 --> 00:05:02,930
need to consider performance we need to

00:04:59,719 --> 00:05:05,960
respond to requests for our sites over

00:05:02,930 --> 00:05:07,699
the network so today I'm going to talk

00:05:05,960 --> 00:05:10,250
to you largely about delivery that

00:05:07,699 --> 00:05:14,389
aspect of of responding over the network

00:05:10,250 --> 00:05:16,819
and CSS is largely involved but no

00:05:14,389 --> 00:05:18,259
there's all these other technologies on

00:05:16,819 --> 00:05:21,229
the client side that kind of tightly

00:05:18,259 --> 00:05:23,800
interweave of the CSS so I'm going to

00:05:21,229 --> 00:05:26,780
show you some techniques that treat

00:05:23,800 --> 00:05:28,779
performance and delivery in a sort of

00:05:26,780 --> 00:05:31,219
progressive enhancement sort of mindset

00:05:28,779 --> 00:05:34,099
so it's a progressive process of

00:05:31,219 --> 00:05:35,719
delivering a site and I'll show you a

00:05:34,099 --> 00:05:38,389
little bit about how those techniques

00:05:35,719 --> 00:05:40,400
that we're using these days are going to

00:05:38,389 --> 00:05:47,569
evolve over time as some of our

00:05:40,400 --> 00:05:50,990
standards are changing so let's start by

00:05:47,569 --> 00:05:53,000
talking about some of the performance

00:05:50,990 --> 00:05:56,539
and delivery problems that we face

00:05:53,000 --> 00:05:58,639
already today of the many advantages

00:05:56,539 --> 00:06:01,039
that we have in building on the web I

00:05:58,639 --> 00:06:02,870
think the greatest advantage is reach

00:06:01,039 --> 00:06:05,479
right being able to reach the broadest

00:06:02,870 --> 00:06:07,159
number of people the web broadens the

00:06:05,479 --> 00:06:09,229
reach of our service is unlike any other

00:06:07,159 --> 00:06:12,710
technology right far better than any

00:06:09,229 --> 00:06:16,370
single native app platform can provide

00:06:12,710 --> 00:06:19,039
and given the the varied nature of how

00:06:16,370 --> 00:06:22,039
everyone accesses the web our sites tend

00:06:19,039 --> 00:06:24,349
to reach folks who access the web under

00:06:22,039 --> 00:06:25,639
very different conditions then some of

00:06:24,349 --> 00:06:31,069
us have as designers and developers

00:06:25,639 --> 00:06:33,100
sitting at our desks at home so despite

00:06:31,069 --> 00:06:35,080
the fact that we have this

00:06:33,100 --> 00:06:37,270
unique distinct advantage when we choose

00:06:35,080 --> 00:06:39,580
to build with web technology it's common

00:06:37,270 --> 00:06:41,620
to find sites that are built an

00:06:39,580 --> 00:06:43,800
exclusive way is still right and not

00:06:41,620 --> 00:06:47,560
always intentionally often not not

00:06:43,800 --> 00:06:50,260
intentionally but it inhibits their

00:06:47,560 --> 00:06:51,940
reach right often due to assumptions

00:06:50,260 --> 00:06:54,130
that we make when we're developing our

00:06:51,940 --> 00:06:56,020
sites and conveniences decisions that we

00:06:54,130 --> 00:06:59,920
make that that can end up affecting

00:06:56,020 --> 00:07:01,990
delivery impacting in ways that is not

00:06:59,920 --> 00:07:03,610
necessarily desirable for our users and

00:07:01,990 --> 00:07:06,100
I think that's a missed opportunity

00:07:03,610 --> 00:07:07,870
right we're we're excluding people with

00:07:06,100 --> 00:07:10,210
less than ideal browsing situations than

00:07:07,870 --> 00:07:11,730
our own that's bad of course that should

00:07:10,210 --> 00:07:15,120
make us feel bad but there's of course a

00:07:11,730 --> 00:07:17,680
business argument a business case for

00:07:15,120 --> 00:07:20,250
access as well right when we talked for

00:07:17,680 --> 00:07:23,230
our clients here's an example of that

00:07:20,250 --> 00:07:25,570
there was a wired article Wired magazine

00:07:23,230 --> 00:07:27,010
article last year that talked about some

00:07:25,570 --> 00:07:28,690
Facebook executives who are traveling

00:07:27,010 --> 00:07:31,630
through Nigeria which happens to have a

00:07:28,690 --> 00:07:34,620
really large population of facebook

00:07:31,630 --> 00:07:37,570
users and they went to one of those

00:07:34,620 --> 00:07:40,300
kiosks to purchase a device that was

00:07:37,570 --> 00:07:42,460
sort of common to what people used to

00:07:40,300 --> 00:07:44,230
browse the web in that region and they

00:07:42,460 --> 00:07:46,840
installed their app and they pulled it

00:07:44,230 --> 00:07:48,130
up and they made this observation they

00:07:46,840 --> 00:07:50,560
just sort of you know they were waiting

00:07:48,130 --> 00:07:53,320
and waiting just nothing was happening

00:07:50,560 --> 00:07:55,540
the timeline and wasn't showing up and

00:07:53,320 --> 00:07:57,430
they said it seemed as though they had

00:07:55,540 --> 00:07:59,290
been building for users like themselves

00:07:57,430 --> 00:08:02,560
back in Silicon Valley with all the

00:07:59,290 --> 00:08:05,980
latest gadgets and fastest connection

00:08:02,560 --> 00:08:08,590
speeds in the world but given their

00:08:05,980 --> 00:08:10,900
global audience Facebook it's everywhere

00:08:08,590 --> 00:08:15,010
right they were actually the exception

00:08:10,900 --> 00:08:16,500
right they were there an edge case so I

00:08:15,010 --> 00:08:20,380
think that's kind of an interesting

00:08:16,500 --> 00:08:23,410
observation we web developers tend to be

00:08:20,380 --> 00:08:25,740
kind of a exceptional bunch in that way

00:08:23,410 --> 00:08:28,090
right our our work demands really fast

00:08:25,740 --> 00:08:29,730
reliable network so we can stream

00:08:28,090 --> 00:08:32,349
enormous amounts of data back and forth

00:08:29,730 --> 00:08:34,510
and we have access to all these devices

00:08:32,349 --> 00:08:37,960
to test on including the one that we do

00:08:34,510 --> 00:08:41,800
our development on right so those can

00:08:37,960 --> 00:08:43,089
start to to fog and limit our visions

00:08:41,800 --> 00:08:45,519
sort of a tunnel

00:08:43,089 --> 00:08:47,319
so while many of us work in ideal

00:08:45,519 --> 00:08:49,180
conditions or relatively ideal

00:08:47,319 --> 00:08:51,519
conditions at home we can't just build

00:08:49,180 --> 00:08:53,680
for users like us right we can't forget

00:08:51,519 --> 00:08:55,779
that for much of the world the web

00:08:53,680 --> 00:09:00,370
doesn't necessarily always work quite

00:08:55,779 --> 00:09:02,499
that well so I think as web designers

00:09:00,370 --> 00:09:04,749
were in a really unique position to

00:09:02,499 --> 00:09:07,600
impact that situation for our users

00:09:04,749 --> 00:09:10,079
through better practices and overall in

00:09:07,600 --> 00:09:13,660
many ways we could be doing a better job

00:09:10,079 --> 00:09:16,149
so we need to build with empathy when we

00:09:13,660 --> 00:09:17,889
talk about performance you often see

00:09:16,149 --> 00:09:21,399
this this chart come up in a lot of

00:09:17,889 --> 00:09:24,459
performance oriented talks as of this

00:09:21,399 --> 00:09:28,240
was last month's data this is the

00:09:24,459 --> 00:09:29,800
average size of the most popular web

00:09:28,240 --> 00:09:31,480
sites on the web something like the top

00:09:29,800 --> 00:09:35,139
three hundred thousand or something like

00:09:31,480 --> 00:09:39,550
that websites almost 2 megabytes so

00:09:35,139 --> 00:09:41,230
pretty heavy right and perhaps obviously

00:09:39,550 --> 00:09:43,300
that's that's quite a problem like it's

00:09:41,230 --> 00:09:44,829
a real problem but it's not art you know

00:09:43,300 --> 00:09:47,050
it's not our only problem when we're

00:09:44,829 --> 00:09:49,540
thinking about performance but it's a

00:09:47,050 --> 00:09:54,370
real problem because for many of us data

00:09:49,540 --> 00:09:56,230
is finite right we often have shared

00:09:54,370 --> 00:09:57,970
data plans across many of the devices

00:09:56,230 --> 00:10:00,249
that we're using and they have a cap on

00:09:57,970 --> 00:10:03,279
how much we can use per month many

00:10:00,249 --> 00:10:05,800
people browse the web with prepaid SIM

00:10:03,279 --> 00:10:07,420
cards and once those are spent you have

00:10:05,800 --> 00:10:11,829
to go down to the store get a new one

00:10:07,420 --> 00:10:14,199
recharge it up so in these cases access

00:10:11,829 --> 00:10:16,329
can be expensive and prohibitive right

00:10:14,199 --> 00:10:19,209
there's a real cost to accessing the web

00:10:16,329 --> 00:10:20,769
insights like as heavy as that one can

00:10:19,209 --> 00:10:24,670
start to really chip away at that

00:10:20,769 --> 00:10:26,559
quickly anyone seen this site how much

00:10:24,670 --> 00:10:29,139
does my website koster what does my

00:10:26,559 --> 00:10:31,269
website cost com it's really great Tim

00:10:29,139 --> 00:10:33,939
Kadlec put this together I think it

00:10:31,269 --> 00:10:35,110
launched a couple weeks ago and I think

00:10:33,939 --> 00:10:39,189
it does a great job of really

00:10:35,110 --> 00:10:41,879
quantifying the cost of of a website to

00:10:39,189 --> 00:10:44,920
people who browse the web in in limited

00:10:41,879 --> 00:10:47,949
contacts with constraints so for example

00:10:44,920 --> 00:10:51,910
Disney com weighs just about just a

00:10:47,949 --> 00:10:53,529
little over 4 megabytes and if you

00:10:51,910 --> 00:10:55,000
scroll down this page you can enter any

00:10:53,529 --> 00:10:57,880
URL but I entered

00:10:55,000 --> 00:11:00,190
newcom you can see how much it on

00:10:57,880 --> 00:11:03,040
average costs just to download that just

00:11:00,190 --> 00:11:07,540
to visit that site once like in Vanuatu

00:11:03,040 --> 00:11:10,420
it costs a dollar 30 USD so pretty

00:11:07,540 --> 00:11:12,580
expensive just to visit a page right so

00:11:10,420 --> 00:11:15,970
access can be pretty prohibitive in that

00:11:12,580 --> 00:11:19,180
way so the good news about this is that

00:11:15,970 --> 00:11:21,490
there are really easy ways to do a

00:11:19,180 --> 00:11:23,610
better job and reduce that cost when it

00:11:21,490 --> 00:11:26,020
comes to wait to start we can be

00:11:23,610 --> 00:11:28,510
compressing everything right so reducing

00:11:26,020 --> 00:11:31,570
the size of our actual assets that were

00:11:28,510 --> 00:11:34,620
requesting over the network so that you

00:11:31,570 --> 00:11:37,050
know they're lighter for travel so

00:11:34,620 --> 00:11:39,670
making sure our images are compressed

00:11:37,050 --> 00:11:41,520
making sure that we're using file

00:11:39,670 --> 00:11:43,960
formats that really take advantage of

00:11:41,520 --> 00:11:48,250
the latest technologies to crunch them

00:11:43,960 --> 00:11:51,070
down web p44 images things like woth to

00:11:48,250 --> 00:11:54,400
can get a fonts file size down without

00:11:51,070 --> 00:11:57,490
necessarily changing the quality of the

00:11:54,400 --> 00:12:00,130
deliverable on top of that we can

00:11:57,490 --> 00:12:03,940
optimize our text files remove white

00:12:00,130 --> 00:12:07,000
space from CSS JavaScript even HTML and

00:12:03,940 --> 00:12:07,960
be minified and then of course any text

00:12:07,000 --> 00:12:11,110
file that we sent over the network

00:12:07,960 --> 00:12:13,060
should be gzipped right compressed for

00:12:11,110 --> 00:12:16,589
network transfer so that the browser can

00:12:13,060 --> 00:12:20,560
unpack it it's really small to download

00:12:16,589 --> 00:12:22,360
and in addition to optimizing our images

00:12:20,560 --> 00:12:24,310
just making the files themselves smaller

00:12:22,360 --> 00:12:26,589
it often makes sense to actually serve

00:12:24,310 --> 00:12:28,270
or offer up different sizes of a

00:12:26,589 --> 00:12:31,600
particular image to the browser and

00:12:28,270 --> 00:12:33,640
either dictate which version of the

00:12:31,600 --> 00:12:37,660
image should apply in certain cases or

00:12:33,640 --> 00:12:39,760
let the browser decide fortunately our

00:12:37,660 --> 00:12:41,380
community has been doing a lot of really

00:12:39,760 --> 00:12:43,450
great work in the last couple years to

00:12:41,380 --> 00:12:45,960
get some features into browsers that

00:12:43,450 --> 00:12:49,180
help us do this in a standards-based way

00:12:45,960 --> 00:12:51,310
so responsive images what I'm talking

00:12:49,180 --> 00:12:54,499
about in particular here two features

00:12:51,310 --> 00:12:56,779
that are now landing in

00:12:54,499 --> 00:13:00,199
all of the new versions of the browsers

00:12:56,779 --> 00:13:04,249
kind of slowly already in chrome and

00:13:00,199 --> 00:13:05,869
firefox iOS opera source set an

00:13:04,249 --> 00:13:07,849
attribute that we can apply to image

00:13:05,869 --> 00:13:10,489
elements and the picture element which

00:13:07,849 --> 00:13:12,229
sort sort of lets us offer up different

00:13:10,489 --> 00:13:14,959
sources based on media queries and

00:13:12,229 --> 00:13:18,889
impaired those sources with with

00:13:14,959 --> 00:13:21,859
breakpoints in our design we can also

00:13:18,889 --> 00:13:23,989
make efforts to reduce our dependencies

00:13:21,859 --> 00:13:26,779
within our code right so frameworks that

00:13:23,989 --> 00:13:28,669
we that we pull in from the start can

00:13:26,779 --> 00:13:31,549
can bring a lot of bloat sometimes and

00:13:28,669 --> 00:13:33,319
you know things like bootstrap or jQuery

00:13:31,549 --> 00:13:35,149
you have really nice build processes so

00:13:33,319 --> 00:13:37,219
we can try to take only the parts that

00:13:35,149 --> 00:13:39,649
we need and nothing that we don't we can

00:13:37,219 --> 00:13:41,689
also sometimes post process them to

00:13:39,649 --> 00:13:44,809
analyze which parts were using and

00:13:41,689 --> 00:13:46,909
remove the parts that were not so that's

00:13:44,809 --> 00:13:49,819
nice it's also nice if we can avoid

00:13:46,909 --> 00:13:51,289
frameworks entirely because often we can

00:13:49,819 --> 00:13:53,359
get a much lighter experience so there's

00:13:51,289 --> 00:13:55,459
always a trade-off there in in

00:13:53,359 --> 00:13:59,349
maintenance and figuring out what makes

00:13:55,459 --> 00:14:01,699
sense for for each project so

00:13:59,349 --> 00:14:04,579
optimization helps right helps get the

00:14:01,699 --> 00:14:06,499
file size down but that's not our only

00:14:04,579 --> 00:14:09,439
concern with performance and maybe it's

00:14:06,499 --> 00:14:12,109
not even our our main concern it turns

00:14:09,439 --> 00:14:14,329
out that optimizations like that only

00:14:12,109 --> 00:14:19,039
get us so far right and only recently

00:14:14,329 --> 00:14:21,349
have we begun to acknowledge that so it

00:14:19,039 --> 00:14:23,269
turns out that the size of our sites the

00:14:21,349 --> 00:14:25,579
raw size isn't isn't really our users

00:14:23,269 --> 00:14:29,689
biggest problem the problem is the speed

00:14:25,579 --> 00:14:31,519
of light Ilya gregorich from google has

00:14:29,689 --> 00:14:33,470
a nice article where he talks about this

00:14:31,519 --> 00:14:35,059
and actually has a great book where he

00:14:33,470 --> 00:14:37,909
talks about this too and you should

00:14:35,059 --> 00:14:41,049
really read it and really every article

00:14:37,909 --> 00:14:44,119
he puts out and in this article he says

00:14:41,049 --> 00:14:47,809
the web's performance problem isn't

00:14:44,119 --> 00:14:50,479
bandwidth isn't file size it's latency

00:14:47,809 --> 00:14:53,509
writes the the physical distance between

00:14:50,479 --> 00:14:56,839
the server and the client the browser

00:14:53,509 --> 00:14:59,299
our code needs to travel distances over

00:14:56,839 --> 00:15:01,339
the network and that takes time so a

00:14:59,299 --> 00:15:03,739
trip to the server and back sometimes

00:15:01,339 --> 00:15:05,749
takes a lot of time and we can break

00:15:03,739 --> 00:15:07,639
that down a little bit the first latency

00:15:05,749 --> 00:15:08,270
issue tends to happen when we're just

00:15:07,639 --> 00:15:11,710
connecting

00:15:08,270 --> 00:15:14,420
to our local ISP or our carrier on a

00:15:11,710 --> 00:15:17,060
landline or Wi-Fi that can take up to

00:15:14,420 --> 00:15:21,650
150 milliseconds just to ping the local

00:15:17,060 --> 00:15:24,920
ISP on a cell network it can take a lot

00:15:21,650 --> 00:15:26,720
longer try a second or so right just to

00:15:24,920 --> 00:15:28,790
connect to the tower and then depending

00:15:26,720 --> 00:15:30,320
on how recently your device is talk to

00:15:28,790 --> 00:15:32,210
that tower it may take a little longer

00:15:30,320 --> 00:15:34,520
maybe one or two seconds on top of that

00:15:32,210 --> 00:15:38,000
to establish a radio connection with the

00:15:34,520 --> 00:15:39,860
tower again so big delay there a lot of

00:15:38,000 --> 00:15:41,420
latency and we haven't even gotten to

00:15:39,860 --> 00:15:44,030
the network right there just talking to

00:15:41,420 --> 00:15:46,040
the local area so the second part of the

00:15:44,030 --> 00:15:48,890
latency is one that we can really have

00:15:46,040 --> 00:15:51,470
an impact on and thats related to

00:15:48,890 --> 00:15:54,130
physical distance write our code is

00:15:51,470 --> 00:15:57,920
hurtling around the world on these fiber

00:15:54,130 --> 00:16:00,050
networks cables right and even at nearly

00:15:57,920 --> 00:16:02,390
the speed of light that that distance

00:16:00,050 --> 00:16:04,580
starts to add up right this is why I see

00:16:02,390 --> 00:16:06,170
the ends matter right CDNs are still so

00:16:04,580 --> 00:16:09,080
important because we're trying to get as

00:16:06,170 --> 00:16:11,150
many servers as close to our users as

00:16:09,080 --> 00:16:13,520
possible throughout the world so those

00:16:11,150 --> 00:16:17,690
round trips are shorter so it's about

00:16:13,520 --> 00:16:20,150
proximity so it turns out that that

00:16:17,690 --> 00:16:23,330
relationship of distance and traveling

00:16:20,150 --> 00:16:27,530
over the wire is can be made fairly

00:16:23,330 --> 00:16:30,200
tangible I like this this video by grace

00:16:27,530 --> 00:16:32,450
hopper who is one of the first computer

00:16:30,200 --> 00:16:35,570
programmers she used a physical length

00:16:32,450 --> 00:16:37,760
of cable to describe this relationship

00:16:35,570 --> 00:16:41,030
of latency so I'm going to play this for

00:16:37,760 --> 00:16:43,190
ya / they started talking about circuits

00:16:41,030 --> 00:16:45,920
that acted in nanoseconds billionths of

00:16:43,190 --> 00:16:47,600
a second I didn't know what a billion

00:16:45,920 --> 00:16:51,370
was I don't think most of those men

00:16:47,600 --> 00:16:51,370
downtown or what a billion is either

00:16:52,829 --> 00:16:57,750
if you don't know what a billion is how

00:16:55,449 --> 00:17:00,819
on earth you know what a billionth is I

00:16:57,750 --> 00:17:03,550
first in filmed from the one morning in

00:17:00,819 --> 00:17:05,829
total desperation I called over to the

00:17:03,550 --> 00:17:07,990
engineering building and I said please

00:17:05,829 --> 00:17:10,780
cut off a nanosecond and send it over to

00:17:07,990 --> 00:17:12,130
me and I've brought you some today now

00:17:10,780 --> 00:17:15,209
what I wanted when I asked for a

00:17:12,130 --> 00:17:17,860
nanosecond was I wanted a piece of wire

00:17:15,209 --> 00:17:20,319
which would represent the maximum

00:17:17,860 --> 00:17:23,260
distance but electricity could travel in

00:17:20,319 --> 00:17:25,089
a billionth of a second now of course it

00:17:23,260 --> 00:17:28,209
wouldn't really be through wire beyond

00:17:25,089 --> 00:17:29,770
space velocity of light so if we start

00:17:28,209 --> 00:17:32,230
with a velocity of light use your

00:17:29,770 --> 00:17:35,679
friendly computer you'll discover that a

00:17:32,230 --> 00:17:38,289
nanosecond is 11.8 inches long the

00:17:35,679 --> 00:17:40,299
maximum limiting distance that

00:17:38,289 --> 00:17:42,850
electricity can travel in a billionth of

00:17:40,299 --> 00:17:44,500
a second finally dinner about a week I

00:17:42,850 --> 00:17:46,809
called back and said I need something to

00:17:44,500 --> 00:17:49,690
compare this to could I please have a

00:17:46,809 --> 00:17:51,450
micro second I've only got one micro

00:17:49,690 --> 00:17:57,990
second so i can't give you each one

00:17:51,450 --> 00:17:59,830
here's a microsecond 984 feet i

00:17:57,990 --> 00:18:02,799
sometimes think we ought to hang one

00:17:59,830 --> 00:18:06,010
over every programmers desk or around

00:18:02,799 --> 00:18:07,419
the neck so they know what they're

00:18:06,010 --> 00:18:10,150
throwing away when they throw away

00:18:07,419 --> 00:18:12,850
microseconds now i hope you'll all get

00:18:10,150 --> 00:18:15,070
the nano seconds they're absolutely

00:18:12,850 --> 00:18:18,130
marvelous for explaining two wives and

00:18:15,070 --> 00:18:21,429
husbands and children and admirals and

00:18:18,130 --> 00:18:22,780
generals people like that and I'd my

00:18:21,429 --> 00:18:25,900
wanted to know why it took so damn long

00:18:22,780 --> 00:18:28,030
to send a message by a satellite and I

00:18:25,900 --> 00:18:29,950
had to point out that between here and

00:18:28,030 --> 00:18:34,870
the satellite there were a very large

00:18:29,950 --> 00:18:36,789
number of nanoseconds you can explain

00:18:34,870 --> 00:18:39,520
these things it's really very helpful so

00:18:36,789 --> 00:18:43,000
be sure to get your nano seconds I love

00:18:39,520 --> 00:18:45,429
grace okay um so she's talking about

00:18:43,000 --> 00:18:46,929
communicating with satellites but it's

00:18:45,429 --> 00:18:48,909
kind of the same you know it's the same

00:18:46,929 --> 00:18:51,440
problem our codes travelling distances

00:18:48,909 --> 00:18:54,360
and and that time adds up

00:18:51,440 --> 00:18:56,340
so nanoseconds as grace was talking

00:18:54,360 --> 00:18:58,590
about or milliseconds as we often talk

00:18:56,340 --> 00:19:01,140
about on the web can seem insignificant

00:18:58,590 --> 00:19:05,460
but they really add up to noticeable lag

00:19:01,140 --> 00:19:08,220
quickly Tammy Everett's who blogs a lot

00:19:05,460 --> 00:19:10,910
about performance published the study

00:19:08,220 --> 00:19:14,250
recently that gathered user feedback on

00:19:10,910 --> 00:19:16,380
several commerce sites that were user

00:19:14,250 --> 00:19:20,670
tested both at their normal speed and

00:19:16,380 --> 00:19:23,190
also with a simulated latency of 500

00:19:20,670 --> 00:19:25,200
milliseconds on any requests and on the

00:19:23,190 --> 00:19:27,750
left you can see the terms that were

00:19:25,200 --> 00:19:29,820
used to describe those same sites before

00:19:27,750 --> 00:19:32,490
that latency was applied and on the

00:19:29,820 --> 00:19:35,460
right how people describe those sites

00:19:32,490 --> 00:19:37,980
just with 500 milliseconds delay so it

00:19:35,460 --> 00:19:42,060
really starts to add up it's pretty

00:19:37,980 --> 00:19:43,680
amazing so trips to the server and back

00:19:42,060 --> 00:19:46,110
take time and we want to make the most

00:19:43,680 --> 00:19:47,970
of them right and one way to sort of

00:19:46,110 --> 00:19:51,630
make the most of them is kind of like

00:19:47,970 --> 00:19:53,670
carrying groceries I find so anyone else

00:19:51,630 --> 00:19:55,760
done this before I trying to make the

00:19:53,670 --> 00:19:58,640
most out of that trip back from the car

00:19:55,760 --> 00:20:03,300
this is how you build a fast website

00:19:58,640 --> 00:20:05,370
thanks for coming so you want to get you

00:20:03,300 --> 00:20:09,660
know the most important stuff on that

00:20:05,370 --> 00:20:11,580
first trip back from the car right often

00:20:09,660 --> 00:20:13,080
we can't get all the groceries and that

00:20:11,580 --> 00:20:15,660
first trip back so we sort of have to

00:20:13,080 --> 00:20:18,420
prioritize maybe get you know the cold

00:20:15,660 --> 00:20:20,970
stuff first go into the freezer I'll

00:20:18,420 --> 00:20:24,800
stop with that metaphor now but you get

00:20:20,970 --> 00:20:28,860
the idea given that latency is a factor

00:20:24,800 --> 00:20:30,600
we want to see what we can do to work

00:20:28,860 --> 00:20:32,430
alongside it because it's there right so

00:20:30,600 --> 00:20:35,070
we want to see if we can improve the

00:20:32,430 --> 00:20:37,440
perception of the performance of our

00:20:35,070 --> 00:20:39,000
sites what can we do about making it

00:20:37,440 --> 00:20:42,120
seem as though our sites are loading and

00:20:39,000 --> 00:20:44,160
usable a lot sooner so there's this

00:20:42,120 --> 00:20:46,620
concept of perceived performance and

00:20:44,160 --> 00:20:48,900
it's measurable it's different than

00:20:46,620 --> 00:20:50,490
we've traditionally talked about

00:20:48,900 --> 00:20:55,080
performance though in terms of overall

00:20:50,490 --> 00:20:58,500
page loading time if you read a read up

00:20:55,080 --> 00:21:00,720
on perceived performance and in loading

00:20:58,500 --> 00:21:01,890
time and rendering time you're going to

00:21:00,720 --> 00:21:03,190
run into this term called the critical

00:21:01,890 --> 00:21:04,960
path

00:21:03,190 --> 00:21:07,270
it represents the steps that occur

00:21:04,960 --> 00:21:09,520
between the time that you make a request

00:21:07,270 --> 00:21:13,360
for a site and something is rendered

00:21:09,520 --> 00:21:16,060
onto your screen right and if you think

00:21:13,360 --> 00:21:17,380
of that path sort of literally like a

00:21:16,060 --> 00:21:18,790
walking path that you're walking down

00:21:17,380 --> 00:21:20,620
you can imagine that there are obstacles

00:21:18,790 --> 00:21:24,160
along the way or there might be or

00:21:20,620 --> 00:21:26,950
detours even write like this fence in

00:21:24,160 --> 00:21:29,320
the woods in the context of web pages

00:21:26,950 --> 00:21:31,270
and delivering them we don't want

00:21:29,320 --> 00:21:32,770
obstacles at all on that critical path

00:21:31,270 --> 00:21:35,140
probably don't want them walking through

00:21:32,770 --> 00:21:37,030
the woods either but we want the

00:21:35,140 --> 00:21:38,890
shortest fastest path to rendering our

00:21:37,030 --> 00:21:41,470
pages and oddly enough some of the

00:21:38,890 --> 00:21:45,520
standard ways that that we've been

00:21:41,470 --> 00:21:47,350
building sites for ages now act sort of

00:21:45,520 --> 00:21:49,930
like obstacles on that critical path to

00:21:47,350 --> 00:21:52,000
rendering our page one is the way in

00:21:49,930 --> 00:21:54,070
which we reference our assets at least

00:21:52,000 --> 00:21:56,730
in a standard way there are ways we can

00:21:54,070 --> 00:21:59,680
work around this but just by default

00:21:56,730 --> 00:22:02,710
references like this to style sheets and

00:21:59,680 --> 00:22:05,860
JavaScript files act like obstacles

00:22:02,710 --> 00:22:09,520
right and that's because the browser

00:22:05,860 --> 00:22:12,250
will actually wait for those to be

00:22:09,520 --> 00:22:14,290
requests to request the server and

00:22:12,250 --> 00:22:16,120
return back those round trips before

00:22:14,290 --> 00:22:18,490
it'll show the page render it to the

00:22:16,120 --> 00:22:20,110
user this is known as render blocking

00:22:18,490 --> 00:22:23,560
right and it's sort of a good and a bad

00:22:20,110 --> 00:22:25,150
thing it's good in the context of CSS

00:22:23,560 --> 00:22:26,950
that we need to render the page because

00:22:25,150 --> 00:22:29,800
we don't want to render the page before

00:22:26,950 --> 00:22:31,330
we have the styles to render that view

00:22:29,800 --> 00:22:34,240
otherwise you get a sort of unstyled

00:22:31,330 --> 00:22:35,770
version and then it blinks into place

00:22:34,240 --> 00:22:38,080
with the full layout when the when the

00:22:35,770 --> 00:22:41,260
stylesheet arrives so we like some

00:22:38,080 --> 00:22:43,840
blocking to occur but it's also bad when

00:22:41,260 --> 00:22:46,480
we are introducing latency those round

00:22:43,840 --> 00:22:49,180
trips in a blocking way we're waiting

00:22:46,480 --> 00:22:51,130
for additional requests after the HTML

00:22:49,180 --> 00:22:53,500
has already been downloaded to the

00:22:51,130 --> 00:22:55,570
device before we can render it so we're

00:22:53,500 --> 00:22:59,020
going to do something about that and

00:22:55,570 --> 00:23:00,820
this is where optimizing assets Alone's

00:22:59,020 --> 00:23:02,170
can't really help us right it's still

00:23:00,820 --> 00:23:04,000
going to be another round trip if we

00:23:02,170 --> 00:23:06,490
have to go get it from the server even

00:23:04,000 --> 00:23:09,160
if it's lighter and latency starts to

00:23:06,490 --> 00:23:11,230
become a problem so we want to avoid

00:23:09,160 --> 00:23:13,830
requesting them externally at all if we

00:23:11,230 --> 00:23:16,450
can get our pages to render sooner

00:23:13,830 --> 00:23:18,040
fortunately in the last year or two

00:23:16,450 --> 00:23:20,410
some really great tools have come out

00:23:18,040 --> 00:23:22,300
that have helped us analyze the critical

00:23:20,410 --> 00:23:25,420
path to rendering and figure out where

00:23:22,300 --> 00:23:28,110
those those roadblocks and bottlenecks

00:23:25,420 --> 00:23:31,420
are occurring so we can work around them

00:23:28,110 --> 00:23:32,790
webpagetest org is one that I'll highly

00:23:31,420 --> 00:23:35,380
recommend if you're not using it already

00:23:32,790 --> 00:23:37,560
it's part of our daily workflow now it's

00:23:35,380 --> 00:23:41,080
such a such a great tool you enter URL

00:23:37,560 --> 00:23:42,850
you choose from a number of servers

00:23:41,080 --> 00:23:45,730
throughout the world browsers different

00:23:42,850 --> 00:23:48,130
devices and you hit start and it'll load

00:23:45,730 --> 00:23:50,500
that that site in whatever browser

00:23:48,130 --> 00:23:52,030
device combination you choose and give

00:23:50,500 --> 00:23:55,540
you all sorts of great information about

00:23:52,030 --> 00:23:58,660
how it loaded here's the the summary

00:23:55,540 --> 00:24:02,260
page that you get after requesting our

00:23:58,660 --> 00:24:03,580
site filament group where I work and you

00:24:02,260 --> 00:24:05,320
can see at the top of the page you get a

00:24:03,580 --> 00:24:07,540
nice little table at the top it's kind

00:24:05,320 --> 00:24:09,970
of like the high level numbers that you

00:24:07,540 --> 00:24:12,550
want to care about first things like how

00:24:09,970 --> 00:24:16,240
long it took to load the entire page all

00:24:12,550 --> 00:24:18,070
of its assets how long it took for the

00:24:16,240 --> 00:24:20,860
time to first byte back from the server

00:24:18,070 --> 00:24:22,360
so round-trip latency time and then

00:24:20,860 --> 00:24:24,400
there's some more interesting stuff I

00:24:22,360 --> 00:24:28,810
think for perceived performance like

00:24:24,400 --> 00:24:30,970
start render and what that tells you is

00:24:28,810 --> 00:24:34,750
the time that it took for something to

00:24:30,970 --> 00:24:37,180
start visually displaying to the user so

00:24:34,750 --> 00:24:40,150
here I'm showing filament site again and

00:24:37,180 --> 00:24:42,280
you can see it's around is it 300

00:24:40,150 --> 00:24:44,620
milliseconds something like that which

00:24:42,280 --> 00:24:46,450
is really really fast right it's been

00:24:44,620 --> 00:24:49,240
highly optimized based on using this

00:24:46,450 --> 00:24:51,940
tool to figure out what we can do to

00:24:49,240 --> 00:24:53,770
improve that start render time so the

00:24:51,940 --> 00:24:55,920
numbers say a lot but I think what's

00:24:53,770 --> 00:24:58,270
more interesting is this timeline view

00:24:55,920 --> 00:25:00,640
because it starts to visualize our page

00:24:58,270 --> 00:25:04,420
loading process and keyframes you can

00:25:00,640 --> 00:25:08,140
see how it it has a 100 millisecond

00:25:04,420 --> 00:25:11,260
increments here and by 600 milliseconds

00:25:08,140 --> 00:25:13,180
everything is finished loading but of

00:25:11,260 --> 00:25:15,490
course like I said this this kind of

00:25:13,180 --> 00:25:17,380
speed rarely happens by mistake right

00:25:15,490 --> 00:25:20,170
you want to you have to really optimize

00:25:17,380 --> 00:25:22,620
the way things progressively load to get

00:25:20,170 --> 00:25:26,700
something rendering that that's soon

00:25:22,620 --> 00:25:30,350
line so let's uh let's look at some of

00:25:26,700 --> 00:25:32,460
the ways that we we were able to do that

00:25:30,350 --> 00:25:36,090
so it turns out that a little awareness

00:25:32,460 --> 00:25:37,380
in the way our pages are transmitted

00:25:36,090 --> 00:25:41,340
over the network can really go a long

00:25:37,380 --> 00:25:44,480
way when we request a page usually we're

00:25:41,340 --> 00:25:46,950
making many round trips to to render it

00:25:44,480 --> 00:25:49,110
but that first round trip is sort of

00:25:46,950 --> 00:25:51,150
interesting because on average it tends

00:25:49,110 --> 00:25:54,929
to carry back from the server around 14

00:25:51,150 --> 00:25:56,250
kilobytes of HTML hypothetically if we

00:25:54,929 --> 00:25:59,670
were able to pack everything into that

00:25:56,250 --> 00:26:01,640
14 k then we'd almost be guaranteed that

00:25:59,670 --> 00:26:03,600
our site would render in under a second

00:26:01,640 --> 00:26:06,270
you know if it included all the

00:26:03,600 --> 00:26:09,330
JavaScript CSS everything that it needed

00:26:06,270 --> 00:26:11,670
right but of course most sites weigh a

00:26:09,330 --> 00:26:13,920
lot more than 14 kilobytes so this is

00:26:11,670 --> 00:26:15,900
when we start to think about how to

00:26:13,920 --> 00:26:17,490
prioritize you know coming back from the

00:26:15,900 --> 00:26:20,610
car which groceries am I going to carry

00:26:17,490 --> 00:26:21,990
in this case what are the most important

00:26:20,610 --> 00:26:25,440
parts then I want to bring back in that

00:26:21,990 --> 00:26:27,150
first round trip so in thinking about

00:26:25,440 --> 00:26:30,000
that Google has this tool called

00:26:27,150 --> 00:26:32,550
PageSpeed insights and one of the tips

00:26:30,000 --> 00:26:36,900
that it offers amongst many it's a

00:26:32,550 --> 00:26:38,429
really great tool it says it actually

00:26:36,900 --> 00:26:41,580
deals with this first round trip it says

00:26:38,429 --> 00:26:46,320
identify an inline the CSS necessary for

00:26:41,580 --> 00:26:50,220
rendering above the fold content so the

00:26:46,320 --> 00:26:53,520
idea is that for above the fold portion

00:26:50,220 --> 00:26:55,200
of the page we want to avoid making

00:26:53,520 --> 00:26:59,160
requests for anything that's necessary

00:26:55,200 --> 00:27:00,420
to render it especially the CSS now I

00:26:59,160 --> 00:27:02,790
know what you might be thinking when you

00:27:00,420 --> 00:27:04,410
read that there's that term the fold

00:27:02,790 --> 00:27:06,840
right and we thought we were done

00:27:04,410 --> 00:27:10,470
hearing this and now it's come back in

00:27:06,840 --> 00:27:13,500
the last year or two there is no fold on

00:27:10,470 --> 00:27:16,110
the web right we know that across many

00:27:13,500 --> 00:27:19,410
devices there are many folds you're just

00:27:16,110 --> 00:27:21,300
a few so it's an old term from borrowed

00:27:19,410 --> 00:27:23,429
from the newspaper industry to represent

00:27:21,300 --> 00:27:25,920
the the height of the visible viewport

00:27:23,429 --> 00:27:28,380
and it changes from device to device but

00:27:25,920 --> 00:27:30,690
I think in the context of this advice we

00:27:28,380 --> 00:27:32,130
don't need to you know get all up in

00:27:30,690 --> 00:27:33,780
arms about it it doesn't need to be

00:27:32,130 --> 00:27:35,590
controversial all they're really saying

00:27:33,780 --> 00:27:38,020
is pages load

00:27:35,590 --> 00:27:39,549
in a standard way top first you see the

00:27:38,020 --> 00:27:42,130
top portion of the page before you see

00:27:39,549 --> 00:27:44,169
the the rest of the page further down so

00:27:42,130 --> 00:27:46,090
if we can optimize the way we deliver

00:27:44,169 --> 00:27:47,890
the page so that it renders

00:27:46,090 --> 00:27:49,900
progressively as well from top to bottom

00:27:47,890 --> 00:27:53,020
that's sort of nice if we can show

00:27:49,900 --> 00:27:55,900
something a lot sooner right so how do

00:27:53,020 --> 00:27:59,140
we know which the SS is for the top of

00:27:55,900 --> 00:28:00,909
the page well some folks from google

00:27:59,140 --> 00:28:04,240
wrote a nice article about this they

00:28:00,909 --> 00:28:07,360
wrote a bookmarklet that identifies the

00:28:04,240 --> 00:28:11,559
CSS that's necessary for rendering just

00:28:07,360 --> 00:28:13,390
that top portion of the page and it

00:28:11,559 --> 00:28:16,029
looks like this when you run it from a

00:28:13,390 --> 00:28:17,799
code perspective you can imagine a full

00:28:16,029 --> 00:28:21,159
style sheet on the left obviously be

00:28:17,799 --> 00:28:22,600
more complicated than this but then on

00:28:21,159 --> 00:28:24,549
the right we have the critical styles

00:28:22,600 --> 00:28:26,380
just the ones that apply two elements

00:28:24,549 --> 00:28:30,940
that happen to reside in the top portion

00:28:26,380 --> 00:28:33,370
of the page so it's a subset visually

00:28:30,940 --> 00:28:36,820
it's kind of more interesting this is a

00:28:33,370 --> 00:28:38,559
page from filament cite an article and

00:28:36,820 --> 00:28:40,510
on the Left we have the fully styled

00:28:38,559 --> 00:28:43,450
version with its full style sheet on the

00:28:40,510 --> 00:28:45,520
right we have that same page with just

00:28:43,450 --> 00:28:48,700
it's critical Styles applied and you can

00:28:45,520 --> 00:28:50,830
see that we analyzed using that red line

00:28:48,700 --> 00:28:53,020
across the middle as kind of our bar for

00:28:50,830 --> 00:28:54,490
which portion of the page was deemed

00:28:53,020 --> 00:28:57,039
critical so anything above that it's

00:28:54,490 --> 00:28:59,169
critical and what's kind of cool as you

00:28:57,039 --> 00:29:02,770
can see that the design just sort of

00:28:59,169 --> 00:29:04,000
falls away in the right the styles for

00:29:02,770 --> 00:29:05,710
that portion of the page aren't there

00:29:04,000 --> 00:29:07,840
yet so we know that the tools working

00:29:05,710 --> 00:29:10,809
this is what the bookmarklet does so

00:29:07,840 --> 00:29:12,640
that's sort of cool look like Barbie

00:29:10,809 --> 00:29:16,000
bookmarklets are you know kind of a

00:29:12,640 --> 00:29:19,990
manual tool to use though right so for

00:29:16,000 --> 00:29:21,309
maintaining a critical CSS on a big code

00:29:19,990 --> 00:29:23,500
base you might want something more

00:29:21,309 --> 00:29:25,510
automated at filament we use a tool

00:29:23,500 --> 00:29:27,130
called grunt critical CSS we actually

00:29:25,510 --> 00:29:30,190
maintain it ourselves there are a couple

00:29:27,130 --> 00:29:33,970
other tools out there for various nodejs

00:29:30,190 --> 00:29:37,059
mostly environments the way this works

00:29:33,970 --> 00:29:39,610
is we run it we run this command line

00:29:37,059 --> 00:29:41,320
task any time we finish saving a CSS

00:29:39,610 --> 00:29:43,289
file and it will open up unique

00:29:41,320 --> 00:29:45,820
templates on our site all of them and

00:29:43,289 --> 00:29:47,180
run that same sort of process that the

00:29:45,820 --> 00:29:50,090
Google tool did the

00:29:47,180 --> 00:29:52,490
bookmarklet analyze which which portion

00:29:50,090 --> 00:29:54,740
of our CSS is necessary for rendering

00:29:52,490 --> 00:29:57,890
the top and write it to a file for each

00:29:54,740 --> 00:29:59,690
template so if you look at the task it's

00:29:57,890 --> 00:30:02,270
probably kind of small for folks in the

00:29:59,690 --> 00:30:05,870
back of the room but this is sort of how

00:30:02,270 --> 00:30:08,180
it it looks in code we have a list of

00:30:05,870 --> 00:30:10,570
the unique templates maybe our home page

00:30:08,180 --> 00:30:14,000
article template things like that and

00:30:10,570 --> 00:30:15,980
then for each one we have a little

00:30:14,000 --> 00:30:18,680
configuration we have a URL that the

00:30:15,980 --> 00:30:21,170
browser can open to view an example of

00:30:18,680 --> 00:30:22,790
that unique template we have a reference

00:30:21,170 --> 00:30:25,130
to our full stylesheet that it wants to

00:30:22,790 --> 00:30:26,810
analyze and then we have a file name

00:30:25,130 --> 00:30:30,440
that can write the critical portion of

00:30:26,810 --> 00:30:32,300
those styles too so one file per per

00:30:30,440 --> 00:30:33,680
unique template so once we have those

00:30:32,300 --> 00:30:36,770
files that's where things sort of get

00:30:33,680 --> 00:30:39,980
interesting right because now we can

00:30:36,770 --> 00:30:42,710
start to take Google's advice from the

00:30:39,980 --> 00:30:44,540
PageSpeed insights and do something with

00:30:42,710 --> 00:30:46,730
that that critical code that we

00:30:44,540 --> 00:30:49,820
extracted so this is when we're going to

00:30:46,730 --> 00:30:52,100
start in lining and this is when we can

00:30:49,820 --> 00:30:54,020
start to think about cramming that the

00:30:52,100 --> 00:30:56,210
important portion of our code into that

00:30:54,020 --> 00:30:59,210
first round trip back to the server so

00:30:56,210 --> 00:31:03,320
first let's look about look at how that

00:30:59,210 --> 00:31:06,140
looks in CSS this should be new to no

00:31:03,320 --> 00:31:09,020
one here I'm sure but in CSS we can

00:31:06,140 --> 00:31:10,550
inline code using a style element and

00:31:09,020 --> 00:31:13,010
that's sort of how it looks to include

00:31:10,550 --> 00:31:15,490
some some CSS directly into an HTML

00:31:13,010 --> 00:31:19,610
document since we're writing the

00:31:15,490 --> 00:31:21,950
critical styles to a file often we see

00:31:19,610 --> 00:31:23,720
it more like this or our build process

00:31:21,950 --> 00:31:27,080
or an include something where it's

00:31:23,720 --> 00:31:29,810
dynamically including the CSS rules for

00:31:27,080 --> 00:31:31,460
that template so again that's only the

00:31:29,810 --> 00:31:35,300
critical styles for that template being

00:31:31,460 --> 00:31:36,770
in land right not all of them and of

00:31:35,300 --> 00:31:38,900
course we're going to need them to load

00:31:36,770 --> 00:31:41,690
the full style sheet as well but before

00:31:38,900 --> 00:31:44,210
I get to that let's jump over to

00:31:41,690 --> 00:31:45,920
JavaScript and see the inline critical

00:31:44,210 --> 00:31:48,530
portion of the JavaScript and how we do

00:31:45,920 --> 00:31:50,780
that part so in JavaScript we have the

00:31:48,530 --> 00:31:52,520
script element it's the same thing for

00:31:50,780 --> 00:31:55,580
referencing something external or

00:31:52,520 --> 00:31:58,450
pulling it into the page in line and it

00:31:55,580 --> 00:32:01,240
looks like this again I've used the

00:31:58,450 --> 00:32:02,860
a sort of pseudo syntax here just to

00:32:01,240 --> 00:32:05,080
demonstrate and I'm including a file

00:32:02,860 --> 00:32:07,060
called initial j s so that's the stuff

00:32:05,080 --> 00:32:08,620
that we've deemed critical enough to

00:32:07,060 --> 00:32:12,720
include in the head of our page so that

00:32:08,620 --> 00:32:15,610
brings the question what is critical

00:32:12,720 --> 00:32:18,520
javascript right no javascript should be

00:32:15,610 --> 00:32:19,420
critical ideally but when you're

00:32:18,520 --> 00:32:21,910
building with progressive enhancement

00:32:19,420 --> 00:32:25,150
often it's it's really handy to have a

00:32:21,910 --> 00:32:27,430
little script to help you out when you

00:32:25,150 --> 00:32:28,810
are progressively enhancing the page so

00:32:27,430 --> 00:32:31,060
some of the things that go into that

00:32:28,810 --> 00:32:35,260
initial jas file may be some feature

00:32:31,060 --> 00:32:37,060
tests or like moderniser has something

00:32:35,260 --> 00:32:39,960
to load additional assets like

00:32:37,060 --> 00:32:42,670
additional style sheets javascript files

00:32:39,960 --> 00:32:44,290
some logic to decide whether or not to

00:32:42,670 --> 00:32:45,880
load those files at all so that's

00:32:44,290 --> 00:32:49,000
something we can't really do natively in

00:32:45,880 --> 00:32:51,220
HTML right we can't reference a script

00:32:49,000 --> 00:32:53,260
tag under particular conditions like

00:32:51,220 --> 00:32:56,110
only if this feature is supported

00:32:53,260 --> 00:32:57,610
without some sort of logic like that so

00:32:56,110 --> 00:33:01,210
a script loader can be really handy in

00:32:57,610 --> 00:33:03,040
that situation and then some stuff for

00:33:01,210 --> 00:33:07,680
loading fonts that I'll get to in a

00:33:03,040 --> 00:33:10,300
second so for loading CSS just to

00:33:07,680 --> 00:33:12,100
explode that out into code you can see

00:33:10,300 --> 00:33:13,510
there's a function up here you don't

00:33:12,100 --> 00:33:15,640
really need to look at the innards but

00:33:13,510 --> 00:33:17,260
you can see that it it loads the style

00:33:15,640 --> 00:33:19,270
sheet and it does so in a way that

00:33:17,260 --> 00:33:21,730
doesn't block rendering so we can call

00:33:19,270 --> 00:33:23,530
it at the bottom load CSS and that's a

00:33:21,730 --> 00:33:25,540
path to our full stylesheet it's going

00:33:23,530 --> 00:33:28,270
to load in asynchronously and just

00:33:25,540 --> 00:33:34,150
appear whenever it's ready render the

00:33:28,270 --> 00:33:35,350
bottom portion of the page and then we

00:33:34,150 --> 00:33:39,700
do the same thing with a script loader

00:33:35,350 --> 00:33:42,700
right load script or load j/s and pass

00:33:39,700 --> 00:33:45,550
in a path to our full JavaScript that

00:33:42,700 --> 00:33:51,520
might include our Dom framework UI kit

00:33:45,550 --> 00:33:53,560
stuff like that and then to show you

00:33:51,520 --> 00:33:55,300
some of the conditional logic that might

00:33:53,560 --> 00:33:59,410
go into whether or not we call load

00:33:55,300 --> 00:34:01,480
script this is what we typically do or

00:33:59,410 --> 00:34:04,030
at least the simplifies simplified

00:34:01,480 --> 00:34:06,700
version of what we often do cutting the

00:34:04,030 --> 00:34:09,580
mustard anyone heard of this this is a

00:34:06,700 --> 00:34:12,130
technique that the BBC named recently

00:34:09,580 --> 00:34:13,660
but it's just a broad qualification so

00:34:12,130 --> 00:34:15,460
this case we're checking if a couple

00:34:13,660 --> 00:34:17,530
features are supported before deciding

00:34:15,460 --> 00:34:20,020
to load our Dom framework that makes use

00:34:17,530 --> 00:34:22,810
of those features so to bring that all

00:34:20,020 --> 00:34:25,180
together this is kind of the head of our

00:34:22,810 --> 00:34:26,980
page once it's all set up right so we've

00:34:25,180 --> 00:34:29,080
got inline styles I've got a script

00:34:26,980 --> 00:34:31,090
block that loads the full stylesheet

00:34:29,080 --> 00:34:34,300
without any conditions and then maybe

00:34:31,090 --> 00:34:35,950
loads of the JavaScript enhancements if

00:34:34,300 --> 00:34:38,470
it's a modern browser and then below

00:34:35,950 --> 00:34:41,140
that I like to link up to the full style

00:34:38,470 --> 00:34:44,370
sheet with a no script element just so

00:34:41,140 --> 00:34:47,380
it works in non JavaScript context

00:34:44,370 --> 00:34:50,530
additionally once we've loaded that full

00:34:47,380 --> 00:34:52,960
stylesheet we can consider it to be in

00:34:50,530 --> 00:34:56,440
browser cache so what we like to do at

00:34:52,960 --> 00:34:58,960
filament is set a cookie alongside that

00:34:56,440 --> 00:35:00,580
call to load that stop sheet and then we

00:34:58,960 --> 00:35:03,040
can configure our server side templates

00:35:00,580 --> 00:35:04,570
to say if that cookies there no need to

00:35:03,040 --> 00:35:06,340
inline all those styles for each

00:35:04,570 --> 00:35:12,400
template it's just reference that style

00:35:06,340 --> 00:35:15,550
sheet directly so that's the inlining

00:35:12,400 --> 00:35:19,000
portion fonts are a big problem on the

00:35:15,550 --> 00:35:21,460
web they're a big problem to perceive

00:35:19,000 --> 00:35:23,290
performance because the way that

00:35:21,460 --> 00:35:26,080
browsers tend to load fonts by default

00:35:23,290 --> 00:35:30,490
or some browsers these days anyway is

00:35:26,080 --> 00:35:32,200
kind of awful right they hide the text

00:35:30,490 --> 00:35:34,060
of the page that's going to be styled

00:35:32,200 --> 00:35:36,340
with a custom font until that font

00:35:34,060 --> 00:35:39,550
finished finishes loading we call it a

00:35:36,340 --> 00:35:42,520
flash of invisible invisable type so if

00:35:39,550 --> 00:35:45,250
you browse iOS safari you probably see

00:35:42,520 --> 00:35:47,380
this a lot here's a page where the HTML

00:35:45,250 --> 00:35:49,000
has already downloaded and we're just

00:35:47,380 --> 00:35:51,160
waiting for a custom font before the

00:35:49,000 --> 00:35:54,220
text will show its really annoying in

00:35:51,160 --> 00:35:56,650
iOS this can take as long as 30 seconds

00:35:54,220 --> 00:36:05,470
because that's just the default time out

00:35:56,650 --> 00:36:07,690
that that browser uses so recently we've

00:36:05,470 --> 00:36:09,580
been trying to find a good way to work

00:36:07,690 --> 00:36:12,120
around this approach kind of a happy

00:36:09,580 --> 00:36:15,070
medium and I wrote an article about

00:36:12,120 --> 00:36:18,670
using font events or at least simulated

00:36:15,070 --> 00:36:22,390
font offense to to try to show default

00:36:18,670 --> 00:36:23,890
text fallback text first and then show

00:36:22,390 --> 00:36:26,140
the custom font when it's ready to come

00:36:23,890 --> 00:36:30,039
in it sort of works like this

00:36:26,140 --> 00:36:33,730
it's a moderniser kind of approach from

00:36:30,039 --> 00:36:36,369
a CSS perspective we've got a default

00:36:33,730 --> 00:36:38,829
style applied to our heading in this

00:36:36,369 --> 00:36:41,369
case an h2 just a sans serif font and

00:36:38,829 --> 00:36:44,230
then once a fonts loaded class is

00:36:41,369 --> 00:36:46,960
available on the HTML tag or something

00:36:44,230 --> 00:36:49,329
like that we can apply the font the

00:36:46,960 --> 00:36:52,380
custom font that was loaded am usable

00:36:49,329 --> 00:36:55,390
javascript in this case Bram Stein's

00:36:52,380 --> 00:36:57,490
font face observer to apply that class

00:36:55,390 --> 00:37:01,720
listen for whether the font is loaded

00:36:57,490 --> 00:37:05,440
yet once it has apply a class what's

00:37:01,720 --> 00:37:09,160
nice about that is you can see that

00:37:05,440 --> 00:37:11,049
although the last a couple of key frames

00:37:09,160 --> 00:37:12,849
are the ones that have the custom font

00:37:11,049 --> 00:37:14,529
here we've still got text showing all

00:37:12,849 --> 00:37:16,599
the way through so if we didn't apply

00:37:14,529 --> 00:37:18,819
this this little work around it would be

00:37:16,599 --> 00:37:22,029
blank text until the last frame when the

00:37:18,819 --> 00:37:25,180
custom font was ready and that can be a

00:37:22,029 --> 00:37:27,390
really long delay so to wrap up that

00:37:25,180 --> 00:37:30,010
that stage of the optimizations for

00:37:27,390 --> 00:37:33,069
initial perceived performance on and

00:37:30,010 --> 00:37:36,210
just show a quick case study wired com

00:37:33,069 --> 00:37:39,160
recently redesigned responsively and

00:37:36,210 --> 00:37:42,819
they made this really beautiful new site

00:37:39,160 --> 00:37:49,869
this is an example of their article

00:37:42,819 --> 00:37:51,670
template and it's really nice but if

00:37:49,869 --> 00:37:54,490
you're browsing it on a mobile device

00:37:51,670 --> 00:37:57,579
particularly over you know 3g ish

00:37:54,490 --> 00:38:00,609
connection you'll notice that it leaves

00:37:57,579 --> 00:38:03,579
a little bit to be desired as not from a

00:38:00,609 --> 00:38:06,400
performance context and actually this is

00:38:03,579 --> 00:38:08,500
not poking fun at at Wired in particular

00:38:06,400 --> 00:38:11,109
this is actually pretty average for a

00:38:08,500 --> 00:38:12,430
sight of that scale so I just chose this

00:38:11,109 --> 00:38:14,339
one because it didn't happen to have

00:38:12,430 --> 00:38:17,319
these optimized optimizations applied

00:38:14,339 --> 00:38:19,980
but you can see it renders usable

00:38:17,319 --> 00:38:25,450
content on 3g on chrome on Android

00:38:19,980 --> 00:38:27,279
around 12 and a half seconds so for

00:38:25,450 --> 00:38:29,829
example sake I've pulled that site down

00:38:27,279 --> 00:38:31,390
onto our private servers and started

00:38:29,829 --> 00:38:34,950
applying some of these optimizations

00:38:31,390 --> 00:38:38,810
that I just showed you so extracting the

00:38:34,950 --> 00:38:40,620
critical CSS and in lining it

00:38:38,810 --> 00:38:43,290
loading the full stylesheet

00:38:40,620 --> 00:38:45,270
asynchronously without blocking loading

00:38:43,290 --> 00:38:47,370
all their scripts without blocking so

00:38:45,270 --> 00:38:50,610
that includes ads which can be really

00:38:47,370 --> 00:38:53,190
problematic and then that font approach

00:38:50,610 --> 00:38:55,170
that I just showed you so allowing a

00:38:53,190 --> 00:38:57,390
default font until the custom fonts

00:38:55,170 --> 00:39:01,800
ready and you can see that the impact is

00:38:57,390 --> 00:39:05,460
pretty dramatic a 3g chrome again on

00:39:01,800 --> 00:39:07,860
android we get usable content a usable

00:39:05,460 --> 00:39:10,350
content text starts to appear around

00:39:07,860 --> 00:39:12,630
four seconds instead of 12 and a half so

00:39:10,350 --> 00:39:15,300
we just cut quite a lot off of it now I

00:39:12,630 --> 00:39:17,880
should point out that the end result is

00:39:15,300 --> 00:39:19,830
identical right it's just we're favoring

00:39:17,880 --> 00:39:23,630
a more progressive page loading process

00:39:19,830 --> 00:39:27,300
instead of an all-or-nothing one right

00:39:23,630 --> 00:39:32,190
so you can see on timelines how they

00:39:27,300 --> 00:39:34,260
compare and it's important to point out

00:39:32,190 --> 00:39:36,300
that that's actually a pretty heavy site

00:39:34,260 --> 00:39:38,640
too so we always think of a performance

00:39:36,300 --> 00:39:40,800
as a file size thing right and we're

00:39:38,640 --> 00:39:42,350
starting to get away from that now at

00:39:40,800 --> 00:39:44,850
least from perceived performance

00:39:42,350 --> 00:39:46,620
perspectives this is a nine megabyte

00:39:44,850 --> 00:39:49,610
page when it finishes loading and we're

00:39:46,620 --> 00:39:54,060
still rendering it very quickly on 3g

00:39:49,610 --> 00:39:55,440
okay so to wrap up those are you know

00:39:54,060 --> 00:39:56,940
some of the steps that we can do to

00:39:55,440 --> 00:39:58,950
improve perceived performance today

00:39:56,940 --> 00:40:02,160
right but how are they going to look in

00:39:58,950 --> 00:40:03,720
the long term well they're workarounds

00:40:02,160 --> 00:40:05,810
right we've been applying workarounds

00:40:03,720 --> 00:40:11,400
for performance sake for a long time now

00:40:05,810 --> 00:40:13,400
concatenating files in lining all these

00:40:11,400 --> 00:40:15,300
things that I just showed you and

00:40:13,400 --> 00:40:17,460
ideally we don't want to do those things

00:40:15,300 --> 00:40:19,950
so luckily in the future there's a new

00:40:17,460 --> 00:40:22,380
version of HTTP that has already started

00:40:19,950 --> 00:40:23,880
working its way into browsers version 2

00:40:22,380 --> 00:40:29,250
that's going to make a lot of this

00:40:23,880 --> 00:40:31,470
unnecessary so essentially a lot of the

00:40:29,250 --> 00:40:33,990
techniques like in lining that we're

00:40:31,470 --> 00:40:38,720
doing now to get a really fast perceived

00:40:33,990 --> 00:40:41,490
performance experience are going to be a

00:40:38,720 --> 00:40:43,710
you know no longer necessary once once

00:40:41,490 --> 00:40:45,930
two comes out one of the reasons for

00:40:43,710 --> 00:40:48,110
that is this feature called server push

00:40:45,930 --> 00:40:52,140
which is basically you can request a

00:40:48,110 --> 00:40:54,540
particular page a URL for an HTML file

00:40:52,140 --> 00:40:56,550
and the server can send back many assets

00:40:54,540 --> 00:40:59,190
that are related to that page that it

00:40:56,550 --> 00:41:02,430
knows you'll need CSS for example so you

00:40:59,190 --> 00:41:05,640
don't need to inline it anymore those

00:41:02,430 --> 00:41:07,920
are just a you know one of the few

00:41:05,640 --> 00:41:10,680
things that really kind of make no

00:41:07,920 --> 00:41:14,460
longer necessary once two is out so no

00:41:10,680 --> 00:41:16,640
more spriting things like that and it's

00:41:14,460 --> 00:41:19,650
going to take a little time htb to isn't

00:41:16,640 --> 00:41:22,230
going to be supported in older versions

00:41:19,650 --> 00:41:26,340
of ie for example so we're going to need

00:41:22,230 --> 00:41:28,380
to keep both implementations going at

00:41:26,340 --> 00:41:30,210
the same time so it's not going to

00:41:28,380 --> 00:41:32,520
happen overnight you can consider it

00:41:30,210 --> 00:41:38,190
sort of a another layer of progressive

00:41:32,520 --> 00:41:42,540
enhancement in that way so to respond

00:41:38,190 --> 00:41:44,610
responsibly requires a lot of

00:41:42,540 --> 00:41:47,280
preparation and foresight right I think

00:41:44,610 --> 00:41:50,760
I went over some of the ways that we can

00:41:47,280 --> 00:41:53,220
at least today start to make the

00:41:50,760 --> 00:41:55,650
perceived performance of our sites quite

00:41:53,220 --> 00:41:57,900
a lot quite a lot more favorable for our

00:41:55,650 --> 00:42:00,360
users and I think you know some of these

00:41:57,900 --> 00:42:02,100
methods are sort of harder for us but

00:42:00,360 --> 00:42:06,870
they they make it more convenient for

00:42:02,100 --> 00:42:09,330
our users so I hope that I've given you

00:42:06,870 --> 00:42:12,870
a few things to think about today my

00:42:09,330 --> 00:42:14,810
name's Scott that's my book I have two

00:42:12,870 --> 00:42:16,950
copies up here if anyone wants one and

00:42:14,810 --> 00:42:19,010
yeah that's it thanks so much for

00:42:16,950 --> 00:42:19,010

YouTube URL: https://www.youtube.com/watch?v=W3pyMbGNOas


