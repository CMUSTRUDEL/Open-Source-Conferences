Title: Andrew Betts - Moving towards web components
Publication date: 2015-05-10
Playlist: CSSConf Australia 2015 Talks
Description: 
	Thanks our friends at SitePoint, Andrew Betts's CSSConf Australia 2015 presentation Moving towards web components.

http://2015.cssconf.com.au/
http://2015.cssconf.com.au/news/intro-andrew-betts
https://twitter.com/triblondon
http://trib.tv
Captions: 
	00:00:00,000 --> 00:00:03,840
hello hello my name is Andrew bets I

00:00:01,530 --> 00:00:06,210
work for the financial times I've been a

00:00:03,840 --> 00:00:11,610
web developer now for well probably

00:00:06,210 --> 00:00:15,509
about 15 16 years and the first website

00:00:11,610 --> 00:00:18,539
I built in 1997 was to my mom and he

00:00:15,509 --> 00:00:20,070
looked like this and it had it she's a

00:00:18,539 --> 00:00:22,560
lawyer so I built it for her law firm

00:00:20,070 --> 00:00:25,619
and it had a number of really cool

00:00:22,560 --> 00:00:28,140
advanced features like a Java applet

00:00:25,619 --> 00:00:29,699
ticker so that I could have a marquee

00:00:28,140 --> 00:00:32,940
across browsers which I was very pleased

00:00:29,699 --> 00:00:35,280
with and it had a hit counter and it had

00:00:32,940 --> 00:00:37,140
an animated background now unfortunately

00:00:35,280 --> 00:00:39,270
all three of these are features that

00:00:37,140 --> 00:00:41,520
archive.org has decided not to preserve

00:00:39,270 --> 00:00:45,120
for posterity something I'm very upset

00:00:41,520 --> 00:00:46,739
about the most important thing about

00:00:45,120 --> 00:00:52,079
this website is that it took me two days

00:00:46,739 --> 00:00:53,730
to build and launch so 15 years almost

00:00:52,079 --> 00:00:57,360
but most of my time managing other web

00:00:53,730 --> 00:01:01,079
developers and thinking why does

00:00:57,360 --> 00:01:02,579
everything take so long back in the 90s

00:01:01,079 --> 00:01:05,610
I could build a site in two days what's

00:01:02,579 --> 00:01:07,320
up and it's sort of a rhetorical

00:01:05,610 --> 00:01:09,780
question really we know why things take

00:01:07,320 --> 00:01:12,810
a long time we have more devices OSS

00:01:09,780 --> 00:01:16,140
more browsers we care far more about

00:01:12,810 --> 00:01:17,820
usability and accessibility and users

00:01:16,140 --> 00:01:21,030
are just more demanding than they used

00:01:17,820 --> 00:01:24,030
to be and they should also just simply

00:01:21,030 --> 00:01:25,350
more stuff to build so let's look at a

00:01:24,030 --> 00:01:27,479
few of these things in more detail

00:01:25,350 --> 00:01:29,400
because i think that the time has come

00:01:27,479 --> 00:01:34,250
for us to think about web development at

00:01:29,400 --> 00:01:37,860
a much higher level we don't only have

00:01:34,250 --> 00:01:40,560
more devices we also have users with

00:01:37,860 --> 00:01:42,119
more than one device per person and this

00:01:40,560 --> 00:01:44,579
is quite evident when you look at

00:01:42,119 --> 00:01:48,119
traffic patterns from ft.com i love this

00:01:44,579 --> 00:01:50,399
graph it's it's so stark how the pattern

00:01:48,119 --> 00:01:52,590
changes through the working day so we

00:01:50,399 --> 00:01:54,479
have a huge surge of mobile traffic

00:01:52,590 --> 00:01:56,310
first thing in the morning then we have

00:01:54,479 --> 00:01:57,960
a big block of desktop use during the

00:01:56,310 --> 00:02:00,180
day and another surge of mobile traffic

00:01:57,960 --> 00:02:02,100
during the evening rush and at the

00:02:00,180 --> 00:02:05,009
weekend we have virtually no desktop

00:02:02,100 --> 00:02:08,009
traffic at all we serve almost all pages

00:02:05,009 --> 00:02:09,239
to mobile devices so this tells me two

00:02:08,009 --> 00:02:11,030
things first of all people are switching

00:02:09,239 --> 00:02:13,170
between devices during the day and

00:02:11,030 --> 00:02:16,290
secondly that

00:02:13,170 --> 00:02:17,760
the age of mobile has as kind of come

00:02:16,290 --> 00:02:21,300
and gone and now we're in the into the

00:02:17,760 --> 00:02:25,110
kind of supremacy of mobile which brings

00:02:21,300 --> 00:02:27,300
me to usability and how we started to

00:02:25,110 --> 00:02:28,970
care far more about providing a good

00:02:27,300 --> 00:02:31,410
user experience across all these devices

00:02:28,970 --> 00:02:34,020
because when when mobile first became a

00:02:31,410 --> 00:02:37,080
thing you used to see a lot of this kind

00:02:34,020 --> 00:02:39,690
of thing where people would use form

00:02:37,080 --> 00:02:43,920
selects to replicate long horizontal

00:02:39,690 --> 00:02:46,410
navigation and these kind of elements

00:02:43,920 --> 00:02:48,090
are actually really like magic to

00:02:46,410 --> 00:02:50,340
developers because they're incredibly

00:02:48,090 --> 00:02:52,560
easy to implement and they render

00:02:50,340 --> 00:02:55,860
natively on different platforms so you

00:02:52,560 --> 00:02:57,120
get a lot for free effectively but we

00:02:55,860 --> 00:02:59,100
came to realize that this is really

00:02:57,120 --> 00:03:01,680
solving a developer problem more than

00:02:59,100 --> 00:03:04,730
solving a user problem and there are so

00:03:01,680 --> 00:03:09,060
many examples of form selects being used

00:03:04,730 --> 00:03:11,040
in in places where you can see where

00:03:09,060 --> 00:03:12,630
it's solving the developers problem far

00:03:11,040 --> 00:03:14,880
more than it is the user and this is a

00:03:12,630 --> 00:03:17,030
my favorite example of this this is a

00:03:14,880 --> 00:03:19,650
drop down on the Swiss hotel website

00:03:17,030 --> 00:03:22,380
which my colleague Matt Andrews had to

00:03:19,650 --> 00:03:25,769
use when he was booking a room and it is

00:03:22,380 --> 00:03:27,660
asking him to choose his title now the

00:03:25,769 --> 00:03:33,799
developer of this site has obviously got

00:03:27,660 --> 00:03:38,549
a list of all the possible honorifics

00:03:33,799 --> 00:03:39,730
that you could use and browsing this

00:03:38,549 --> 00:03:46,120
list

00:03:39,730 --> 00:03:52,150
I actually as a user the overwhelming

00:03:46,120 --> 00:03:56,980
feeling is of inadequacy because I think

00:03:52,150 --> 00:04:02,980
I'm just mr. what have I done wrong in

00:03:56,980 --> 00:04:05,440
life so this is a funny example but

00:04:02,980 --> 00:04:07,420
basically what I'm trying to say is I

00:04:05,440 --> 00:04:09,900
think we have come a long way from

00:04:07,420 --> 00:04:12,610
thinking what is the easiest solution

00:04:09,900 --> 00:04:15,670
now we think far more what is the

00:04:12,610 --> 00:04:18,130
solution that the user wants and if

00:04:15,670 --> 00:04:19,720
you're interested in specifically these

00:04:18,130 --> 00:04:21,310
ability of form selects i recommended

00:04:19,720 --> 00:04:22,300
talk by alice bartlett she and her

00:04:21,310 --> 00:04:24,539
colleagues that government digital

00:04:22,300 --> 00:04:28,419
service in the UK did some research into

00:04:24,539 --> 00:04:29,590
a user perception of form selects and

00:04:28,419 --> 00:04:33,340
she did to talk about it called burn

00:04:29,590 --> 00:04:35,650
your select tags at JK last month one of

00:04:33,340 --> 00:04:37,389
the things she said in her talk which

00:04:35,650 --> 00:04:40,240
kind of summarizes my thoughts on this

00:04:37,389 --> 00:04:41,889
better than I kick myself is we're not

00:04:40,240 --> 00:04:44,650
here to do easy things for people who

00:04:41,889 --> 00:04:46,180
are like us so for me that kind of

00:04:44,650 --> 00:04:48,220
summarizes is the difference and how far

00:04:46,180 --> 00:04:50,139
we've come between that website i bought

00:04:48,220 --> 00:04:53,770
in 97 and the kind of websites we build

00:04:50,139 --> 00:04:55,479
today so the people we are building this

00:04:53,770 --> 00:04:57,669
stuff for are also getting more

00:04:55,479 --> 00:05:00,220
impatient all the time Akamai does

00:04:57,669 --> 00:05:02,440
research every few years and between

00:05:00,220 --> 00:05:06,849
2006 and 2009 they found that people

00:05:02,440 --> 00:05:08,380
were prepared to wait well they found

00:05:06,849 --> 00:05:10,270
that that the time people were prepared

00:05:08,380 --> 00:05:13,000
to wait had haft from four seconds 22

00:05:10,270 --> 00:05:15,039
seconds before they became impatient so

00:05:13,000 --> 00:05:16,870
just think about that for a second that

00:05:15,039 --> 00:05:18,960
means that something you built in 2006

00:05:16,870 --> 00:05:21,639
that felt fast and snappy and

00:05:18,960 --> 00:05:24,250
well-designed and performant suddenly

00:05:21,639 --> 00:05:25,599
feels slow and laggy and broken three

00:05:24,250 --> 00:05:27,039
years later even though you haven't

00:05:25,599 --> 00:05:30,220
changed it and it still works just as

00:05:27,039 --> 00:05:32,860
well as before so that means that if we

00:05:30,220 --> 00:05:35,320
still use the same tools in the same way

00:05:32,860 --> 00:05:39,340
from the same starting point we have to

00:05:35,320 --> 00:05:41,380
go further and work harder to achieve

00:05:39,340 --> 00:05:43,150
the same level of user satisfaction and

00:05:41,380 --> 00:05:45,430
that's why things continue to take

00:05:43,150 --> 00:05:47,770
longer to build and this would kind of

00:05:45,430 --> 00:05:50,770
be okay if we didn't have to build more

00:05:47,770 --> 00:05:52,719
and more and more stuff all the time so

00:05:50,770 --> 00:05:53,430
in the early 90s the FT registered their

00:05:52,719 --> 00:05:57,420
first night

00:05:53,430 --> 00:06:00,270
ft.com today we have 600 domain names

00:05:57,420 --> 00:06:01,560
and I couldn't tell you what's on all of

00:06:00,270 --> 00:06:03,330
those I couldn't even tell you how many

00:06:01,560 --> 00:06:06,930
products and sites have to be honest I

00:06:03,330 --> 00:06:10,650
did try and count them and I gave up but

00:06:06,930 --> 00:06:15,000
this for me brings us to some home

00:06:10,650 --> 00:06:19,110
truths good solutions are hard and easy

00:06:15,000 --> 00:06:21,890
solutions are not always good ones but

00:06:19,110 --> 00:06:23,820
when we build modern web projects it's

00:06:21,890 --> 00:06:25,890
increasingly important that we find

00:06:23,820 --> 00:06:28,290
those good solutions and implement them

00:06:25,890 --> 00:06:29,760
and spend time doing it and I think the

00:06:28,290 --> 00:06:31,440
fact that we've heard three talks in

00:06:29,760 --> 00:06:33,330
this conference about animation and the

00:06:31,440 --> 00:06:35,450
importance of how you integrate

00:06:33,330 --> 00:06:37,890
animation into a user experience is

00:06:35,450 --> 00:06:42,060
another indication of just how important

00:06:37,890 --> 00:06:44,040
good UI is and the same problems keep

00:06:42,060 --> 00:06:49,170
coming up again and again and again we

00:06:44,040 --> 00:06:51,330
keep having the same UX situations that

00:06:49,170 --> 00:06:53,010
we have to find a solution for so if we

00:06:51,330 --> 00:06:54,840
keep having to invent the same solutions

00:06:53,010 --> 00:06:56,340
over and over again we're never going to

00:06:54,840 --> 00:06:59,640
be able to spend enough time to produce

00:06:56,340 --> 00:07:02,580
good ones we did a design audit of the

00:06:59,640 --> 00:07:05,070
overlays on ft.com we were looking at

00:07:02,580 --> 00:07:06,480
the close icon the X in a circle in the

00:07:05,070 --> 00:07:10,080
top right-hand corner of the overlay and

00:07:06,480 --> 00:07:12,390
we found that visually reasonably good

00:07:10,080 --> 00:07:14,700
consistency not too bad probably could

00:07:12,390 --> 00:07:18,480
be better but technically it's a

00:07:14,700 --> 00:07:20,580
complete catastrophe we have image tags

00:07:18,480 --> 00:07:22,740
inside of link tags we have CSS

00:07:20,580 --> 00:07:25,500
backgrounds on spans inside of buttons

00:07:22,740 --> 00:07:28,050
we have CSS backgrounds on link tags in

00:07:25,500 --> 00:07:30,630
one particular case we have an X glyph

00:07:28,050 --> 00:07:32,490
inside of a link which is particularly

00:07:30,630 --> 00:07:34,020
interesting because the original button

00:07:32,490 --> 00:07:36,810
was not designed with a character in

00:07:34,020 --> 00:07:41,000
mind so someone's just found a font that

00:07:36,810 --> 00:07:43,800
sort of resembles the rights and more so

00:07:41,000 --> 00:07:45,360
to solve a problem and then to throw

00:07:43,800 --> 00:07:46,680
away that solution which you feel is

00:07:45,360 --> 00:07:48,090
perfectly good and then just to do

00:07:46,680 --> 00:07:49,470
another one in a different way and then

00:07:48,090 --> 00:07:51,900
throw that away and do it again just

00:07:49,470 --> 00:07:53,820
seems like a totally mad thing to do but

00:07:51,900 --> 00:07:57,450
in big corporations the world over this

00:07:53,820 --> 00:07:58,710
is happening every single day so the

00:07:57,450 --> 00:08:01,410
solution is is pretty much a no-brainer

00:07:58,710 --> 00:08:05,280
frankly it is to build using components

00:08:01,410 --> 00:08:06,960
and the principle of using prefabricated

00:08:05,280 --> 00:08:10,050
reusable units

00:08:06,960 --> 00:08:12,870
offer you I is hardly a new idea it's

00:08:10,050 --> 00:08:14,280
not even a new idea in software but we

00:08:12,870 --> 00:08:17,310
just have never really had a good

00:08:14,280 --> 00:08:20,610
solution for this on the web the best

00:08:17,310 --> 00:08:24,060
we've got really is design pattern

00:08:20,610 --> 00:08:27,780
libraries and style guides and this is

00:08:24,060 --> 00:08:30,060
actually a really good collection of all

00:08:27,780 --> 00:08:32,010
the different kinds of pattern libraries

00:08:30,060 --> 00:08:33,479
and style guides that people have come

00:08:32,010 --> 00:08:36,300
up with over the last decade or so

00:08:33,479 --> 00:08:38,010
curated by Anna devenham it's well worth

00:08:36,300 --> 00:08:40,919
a look if you're interested in producing

00:08:38,010 --> 00:08:43,110
a style guide for your company and you

00:08:40,919 --> 00:08:45,720
want to know what kind of style guides

00:08:43,110 --> 00:08:48,750
have people come up with in the past so

00:08:45,720 --> 00:08:52,080
we looked at this and we found there was

00:08:48,750 --> 00:08:54,690
a huge variance huge variety in the kind

00:08:52,080 --> 00:08:57,149
of you I style guides that people were

00:08:54,690 --> 00:08:59,670
were producing so they range from things

00:08:57,149 --> 00:09:02,100
like this which is the basic principle

00:08:59,670 --> 00:09:04,080
of we have a small website and we just

00:09:02,100 --> 00:09:07,110
want a page that has an example of every

00:09:04,080 --> 00:09:09,300
single UI element on the one page and

00:09:07,110 --> 00:09:12,360
this works really well if you've got one

00:09:09,300 --> 00:09:15,060
website and you've got a fairly small

00:09:12,360 --> 00:09:17,880
collection of components all of which

00:09:15,060 --> 00:09:19,440
are employed on that website and it

00:09:17,880 --> 00:09:20,910
provides a central point of reference

00:09:19,440 --> 00:09:23,040
for the developers who are working on

00:09:20,910 --> 00:09:25,140
that site this is that's great but if

00:09:23,040 --> 00:09:27,270
you've got lots of websites and those

00:09:25,140 --> 00:09:28,950
sites share no more than say thirty or

00:09:27,270 --> 00:09:32,339
forty percent of the same components on

00:09:28,950 --> 00:09:34,410
average then this doesn't really work so

00:09:32,339 --> 00:09:35,910
there are far more advanced solutions

00:09:34,410 --> 00:09:38,579
that people have come up with those kind

00:09:35,910 --> 00:09:44,279
of situations we sort in further give us

00:09:38,579 --> 00:09:46,140
a talk yesterday and the the assist the

00:09:44,279 --> 00:09:48,990
system he was involved in producing at

00:09:46,140 --> 00:09:50,399
lonely planet Rizzo is is an example of

00:09:48,990 --> 00:09:53,579
one of the more advanced component

00:09:50,399 --> 00:09:54,899
systems so I'm nervous now because he's

00:09:53,579 --> 00:09:58,920
going to tell me that I'm wrong about

00:09:54,899 --> 00:10:00,839
what I'm about say probably but the way

00:09:58,920 --> 00:10:03,060
this works as I understand it is you

00:10:00,839 --> 00:10:06,000
have a gem that you can import into your

00:10:03,060 --> 00:10:08,820
application and then you can run some

00:10:06,000 --> 00:10:11,760
Ruby code that will return the HTML that

00:10:08,820 --> 00:10:13,350
you need for your component and that

00:10:11,760 --> 00:10:15,329
means that all of your various

00:10:13,350 --> 00:10:17,820
applications don't need to embed any

00:10:15,329 --> 00:10:20,910
HTML into their views the views are all

00:10:17,820 --> 00:10:23,860
generated by central component library

00:10:20,910 --> 00:10:27,610
so this is great if all your

00:10:23,860 --> 00:10:30,130
applications run on the same server side

00:10:27,610 --> 00:10:35,230
technology and that is also not true at

00:10:30,130 --> 00:10:37,510
the ft we have no java PHP some Ruby

00:10:35,230 --> 00:10:39,760
some Python we have basically every

00:10:37,510 --> 00:10:41,850
single server side web technology you

00:10:39,760 --> 00:10:43,930
can imagine floating around somewhere

00:10:41,850 --> 00:10:45,850
but this might work for some people and

00:10:43,930 --> 00:10:50,140
if you're interested indeed do a talk on

00:10:45,850 --> 00:10:52,060
it which I also recommend so we had to

00:10:50,140 --> 00:10:54,400
think about this and we put together a

00:10:52,060 --> 00:10:57,220
list of requirements for what we needed

00:10:54,400 --> 00:10:59,520
from the component system first of all

00:10:57,220 --> 00:11:02,380
we need it to work on lots of websites

00:10:59,520 --> 00:11:04,690
we also need it to be agnostic of us

00:11:02,380 --> 00:11:08,260
oversight technology choice we should be

00:11:04,690 --> 00:11:10,150
able to work with parties agencies and

00:11:08,260 --> 00:11:13,030
not restrict what kind of technologies

00:11:10,150 --> 00:11:15,070
they can use we also need lots of other

00:11:13,030 --> 00:11:18,010
things we need it to have perfect

00:11:15,070 --> 00:11:19,750
encapsulation so if I have a component

00:11:18,010 --> 00:11:22,450
on my page and I put another component

00:11:19,750 --> 00:11:24,400
on the page the presence of that second

00:11:22,450 --> 00:11:26,650
component it shouldn't affect in any way

00:11:24,400 --> 00:11:28,600
that the look or the behavior of the

00:11:26,650 --> 00:11:30,220
first one and the order in which I

00:11:28,600 --> 00:11:33,460
include the component shouldn't matter

00:11:30,220 --> 00:11:37,240
if those things aren't true then we run

00:11:33,460 --> 00:11:38,470
into trouble very quickly and this is

00:11:37,240 --> 00:11:40,450
really important we need it to be

00:11:38,470 --> 00:11:42,400
completely transparent so that teams can

00:11:40,450 --> 00:11:46,570
contribute to the components and

00:11:42,400 --> 00:11:48,400
feedback fixed bugs improve on them this

00:11:46,570 --> 00:11:50,170
is really critical in an organization

00:11:48,400 --> 00:11:52,030
which has traditionally had lots of

00:11:50,170 --> 00:11:54,400
teams all working on their own all

00:11:52,030 --> 00:11:57,250
creating siloed applications not

00:11:54,400 --> 00:11:59,320
trusting one another if you start to say

00:11:57,250 --> 00:12:02,400
okay here is some good stuff you need to

00:11:59,320 --> 00:12:04,870
use this and not build your own thing

00:12:02,400 --> 00:12:06,460
they'll just instinctively try and find

00:12:04,870 --> 00:12:08,800
something wrong with it so that they

00:12:06,460 --> 00:12:12,040
have to fork it and just make it part of

00:12:08,800 --> 00:12:14,050
their own build so to try and fight

00:12:12,040 --> 00:12:15,700
against that to try and get people to be

00:12:14,050 --> 00:12:18,580
more collaborative work together and

00:12:15,700 --> 00:12:20,980
build on the same tools is really hard

00:12:18,580 --> 00:12:24,850
and that requires complete transparency

00:12:20,980 --> 00:12:26,680
and empowerment of people to just fix

00:12:24,850 --> 00:12:29,590
bugs that they come across when they're

00:12:26,680 --> 00:12:30,880
using our components we need it to be

00:12:29,590 --> 00:12:32,050
standards-based because we're not really

00:12:30,880 --> 00:12:33,370
in the habit of hiring people and

00:12:32,050 --> 00:12:34,420
sticking them into a three-month crash

00:12:33,370 --> 00:12:37,660
course in how we do everything

00:12:34,420 --> 00:12:40,060
differently from everyone else and we

00:12:37,660 --> 00:12:44,339
want to avoid duplication of dependency

00:12:40,060 --> 00:12:47,500
so let's say we have a safe credit card

00:12:44,339 --> 00:12:49,389
entry form and a search field and those

00:12:47,500 --> 00:12:51,639
are two components now those are both

00:12:49,389 --> 00:12:53,920
composed of text fields so it's likely

00:12:51,639 --> 00:12:55,360
that we're going to have another more

00:12:53,920 --> 00:12:58,149
lower-level component that they both

00:12:55,360 --> 00:13:00,250
depend on that defines the style for a

00:12:58,149 --> 00:13:01,959
text field so if we put both those

00:13:00,250 --> 00:13:03,940
components on the same page I don't want

00:13:01,959 --> 00:13:07,139
two copies of the styles that define

00:13:03,940 --> 00:13:10,180
what a generic text field looks like and

00:13:07,139 --> 00:13:13,480
finally it needs to work today for the

00:13:10,180 --> 00:13:16,120
vast majority of our readers and we need

00:13:13,480 --> 00:13:18,639
to be looking forward towards how we're

00:13:16,120 --> 00:13:20,860
likely to do components as a community

00:13:18,639 --> 00:13:25,510
in the future so that's likely to be web

00:13:20,860 --> 00:13:27,010
components so we took all of this we

00:13:25,510 --> 00:13:28,930
thought about it and we created a

00:13:27,010 --> 00:13:31,570
component system that we call origami

00:13:28,930 --> 00:13:33,250
and we open sourced it so if you're

00:13:31,570 --> 00:13:36,880
interested in learning more about it you

00:13:33,250 --> 00:13:38,649
can just go to origami ft.com and you

00:13:36,880 --> 00:13:40,779
can read the spec and see all the tools

00:13:38,649 --> 00:13:45,120
and learn about everything I'm about to

00:13:40,779 --> 00:13:47,620
tell you about so how does origami work

00:13:45,120 --> 00:13:51,630
for the first principle is that it is

00:13:47,620 --> 00:13:55,510
modular so every individual piece of UI

00:13:51,630 --> 00:13:57,820
is an individual component individual

00:13:55,510 --> 00:14:00,130
module and you can express that in a

00:13:57,820 --> 00:14:04,449
dependency tree so let's say we want a

00:14:00,130 --> 00:14:06,630
component for forms well forms is not it

00:14:04,449 --> 00:14:08,649
doesn't exist in isolation forms

00:14:06,630 --> 00:14:10,420
incorporates things like colors and

00:14:08,649 --> 00:14:12,640
fonts and buttons and typography and

00:14:10,420 --> 00:14:16,240
grid and icons but all of those things

00:14:12,640 --> 00:14:19,149
are useful to other components too so we

00:14:16,240 --> 00:14:21,579
can create modules that encapsulate

00:14:19,149 --> 00:14:25,079
those small pieces of functionality or

00:14:21,579 --> 00:14:27,550
design style and then depend on them in

00:14:25,079 --> 00:14:30,970
higher level components that do more

00:14:27,550 --> 00:14:34,630
advanced things now to bring all this

00:14:30,970 --> 00:14:37,750
together to generate a CSS file that is

00:14:34,630 --> 00:14:39,550
forms we need a build process because we

00:14:37,750 --> 00:14:42,610
need to pull all of these modules into a

00:14:39,550 --> 00:14:45,490
single finished CSS file so to do that

00:14:42,610 --> 00:14:46,800
we created a build process our build

00:14:45,490 --> 00:14:49,769
process is

00:14:46,800 --> 00:14:52,380
a collection of fairly standard nodejs

00:14:49,769 --> 00:14:55,050
tools we start with Bauer to provide us

00:14:52,380 --> 00:14:58,529
with the package management we add gulp

00:14:55,050 --> 00:15:01,080
for task automation and then on the CSS

00:14:58,529 --> 00:15:03,899
side we use sass and in JavaScript we

00:15:01,080 --> 00:15:06,810
use comedy s browserify and uglify which

00:15:03,899 --> 00:15:08,730
gives us the the module format the

00:15:06,810 --> 00:15:12,209
compatibility with browsers and

00:15:08,730 --> 00:15:13,920
minification now if you are familiar

00:15:12,209 --> 00:15:15,570
with no tools and you are no developer

00:15:13,920 --> 00:15:17,250
as well as being a front end dev this

00:15:15,570 --> 00:15:20,279
build process is actually quite familiar

00:15:17,250 --> 00:15:21,870
to you probably already but it isn't

00:15:20,279 --> 00:15:24,630
necessarily familiar to you if your

00:15:21,870 --> 00:15:25,649
primary role is not front end and there

00:15:24,630 --> 00:15:27,839
are quite a lot of developers in the

00:15:25,649 --> 00:15:29,399
world whose primary role is server side

00:15:27,839 --> 00:15:32,040
but they dabble in front end so let's

00:15:29,399 --> 00:15:33,440
say PHP or java developers and they're

00:15:32,040 --> 00:15:35,490
going to find this tool chain really

00:15:33,440 --> 00:15:37,079
difficult because they're going to be

00:15:35,490 --> 00:15:41,279
more familiar with tools like maven or

00:15:37,079 --> 00:15:43,200
composer so we didn't think it was easy

00:15:41,279 --> 00:15:44,760
enough to simply document this as a

00:15:43,200 --> 00:15:46,980
build chain so we put it all together

00:15:44,760 --> 00:15:50,100
into a single tool that we call origami

00:15:46,980 --> 00:15:53,040
build tools which we also published open

00:15:50,100 --> 00:15:55,260
source and npm so this is a single

00:15:53,040 --> 00:15:58,230
command line tool that you can install

00:15:55,260 --> 00:16:00,779
and then offers you six tasks install

00:15:58,230 --> 00:16:02,130
build demo you verify tests and docks so

00:16:00,779 --> 00:16:04,649
if you're building a component you would

00:16:02,130 --> 00:16:07,470
use pretty much all of these tasks if

00:16:04,649 --> 00:16:09,300
you're building a product that has our

00:16:07,470 --> 00:16:11,670
components in it then you would probably

00:16:09,300 --> 00:16:13,829
just use install and build you can

00:16:11,670 --> 00:16:15,420
either use it as a shell script or you

00:16:13,829 --> 00:16:17,930
can use it as a node module and

00:16:15,420 --> 00:16:23,700
incorporate it into your own gulp file

00:16:17,930 --> 00:16:25,829
so it makes it easier for people to pick

00:16:23,700 --> 00:16:28,050
up our components and incorporate them

00:16:25,829 --> 00:16:30,000
into their products really easily so

00:16:28,050 --> 00:16:32,490
let's look at a couple of components and

00:16:30,000 --> 00:16:35,490
see how they work so this is an example

00:16:32,490 --> 00:16:37,440
of our header component pretty simple

00:16:35,490 --> 00:16:40,740
header running across the top of the

00:16:37,440 --> 00:16:43,350
page and when we start to think about

00:16:40,740 --> 00:16:44,880
how we style this header the first thing

00:16:43,350 --> 00:16:47,160
the first kind of problem that we come

00:16:44,880 --> 00:16:51,750
across this encapsulation of CSS because

00:16:47,160 --> 00:16:54,029
the CSS is very difficult to to contain

00:16:51,750 --> 00:16:56,010
within a certain area of the page we

00:16:54,029 --> 00:16:58,230
don't really have scoped CSS that kind

00:16:56,010 --> 00:16:59,640
of made an appearance and then and then

00:16:58,230 --> 00:17:00,420
disappeared and now is pretty much

00:16:59,640 --> 00:17:03,660
unsupported

00:17:00,420 --> 00:17:05,370
all browsers so we need to create the

00:17:03,660 --> 00:17:07,559
encapsulation so that the styles that

00:17:05,370 --> 00:17:09,630
affect that header can't affect anything

00:17:07,559 --> 00:17:13,470
else on the page so we have some rules

00:17:09,630 --> 00:17:15,809
for this we have namespace prefixes so

00:17:13,470 --> 00:17:17,970
everything within the header component

00:17:15,809 --> 00:17:21,150
file will be prefixed with 0 dash header

00:17:17,970 --> 00:17:23,309
for origami header we don't style

00:17:21,150 --> 00:17:25,650
anything out of namespaces so that the

00:17:23,309 --> 00:17:27,240
component CSS file won't contain any

00:17:25,650 --> 00:17:29,820
styles for anything that doesn't have a

00:17:27,240 --> 00:17:31,950
no header prefix we don't use IDs

00:17:29,820 --> 00:17:33,840
because you could conceivably have more

00:17:31,950 --> 00:17:36,570
than one copy of the component on the

00:17:33,840 --> 00:17:38,309
same page not that likely with header

00:17:36,570 --> 00:17:40,230
but for things like a tweet or a video

00:17:38,309 --> 00:17:43,620
player or gallery you're going to like

00:17:40,230 --> 00:17:45,090
most likely have more than one we want

00:17:43,620 --> 00:17:47,100
to minimize specificity as much as

00:17:45,090 --> 00:17:50,040
possible because when our components go

00:17:47,100 --> 00:17:51,570
on the page let's say the the developer

00:17:50,040 --> 00:17:53,549
that puts this header on the page wants

00:17:51,570 --> 00:17:55,470
to change the color of that bar and we

00:17:53,549 --> 00:17:56,669
didn't make that configurable so they're

00:17:55,470 --> 00:17:59,070
just going to want to override it with

00:17:56,669 --> 00:18:00,929
their own CSS but if they find that they

00:17:59,070 --> 00:18:02,610
write a rule and our rule overrides

00:18:00,929 --> 00:18:05,850
theirs because ours is more specific

00:18:02,610 --> 00:18:08,610
then we get into a specificity war so we

00:18:05,850 --> 00:18:11,220
set a rule that says we have a maximum

00:18:08,610 --> 00:18:15,030
specificity and where possible we use

00:18:11,220 --> 00:18:17,520
just a single class token so that as far

00:18:15,030 --> 00:18:19,320
as possible our selectors are always

00:18:17,520 --> 00:18:22,380
less specific than any selector that

00:18:19,320 --> 00:18:24,419
might be written into the product we

00:18:22,380 --> 00:18:27,030
also use bem to help us do that so

00:18:24,419 --> 00:18:31,049
almost all of our selectors are one

00:18:27,030 --> 00:18:33,840
single BAM token responsiveness is also

00:18:31,049 --> 00:18:35,580
quite an interesting area we don't want

00:18:33,840 --> 00:18:37,940
to put media queries into components

00:18:35,580 --> 00:18:40,620
because a component can't possibly know

00:18:37,940 --> 00:18:43,559
what breakpoints are going to exist

00:18:40,620 --> 00:18:45,299
within the product so if two people are

00:18:43,559 --> 00:18:47,460
building two different products then

00:18:45,299 --> 00:18:48,900
it's going to make sense to put break

00:18:47,460 --> 00:18:51,000
points at different points for each of

00:18:48,900 --> 00:18:52,950
those products so it doesn't make sense

00:18:51,000 --> 00:18:54,480
to write break points into components

00:18:52,950 --> 00:18:56,280
because then if you put a dozen

00:18:54,480 --> 00:18:58,350
components on a page you're going to

00:18:56,280 --> 00:19:00,780
have three dozen break points which

00:18:58,350 --> 00:19:04,429
makes no sense at all so instead we

00:19:00,780 --> 00:19:06,840
offer mix ins and modifier classes that

00:19:04,429 --> 00:19:08,580
developers can mix into their own break

00:19:06,840 --> 00:19:11,610
points so that they can activate our

00:19:08,580 --> 00:19:14,070
responsive states at

00:19:11,610 --> 00:19:16,440
to whatever breakpoints they want and

00:19:14,070 --> 00:19:19,440
finally we need to consider all the

00:19:16,440 --> 00:19:21,929
interaction states so the component will

00:19:19,440 --> 00:19:23,790
include styles for all interaction

00:19:21,929 --> 00:19:27,210
states that apply to that component and

00:19:23,790 --> 00:19:29,070
we use we style Aria properties as far

00:19:27,210 --> 00:19:33,600
as possible to encourage developers to

00:19:29,070 --> 00:19:35,100
use the correct accessible markup now

00:19:33,600 --> 00:19:38,490
that will plot that all applies just to

00:19:35,100 --> 00:19:41,309
plain old CSS we also use sass and we

00:19:38,490 --> 00:19:42,630
have rules for SAS as well so for

00:19:41,309 --> 00:19:46,220
example whenever we have public

00:19:42,630 --> 00:19:48,720
variables in our component source those

00:19:46,220 --> 00:19:51,690
variable definitions have to be suffix

00:19:48,720 --> 00:19:54,450
with exclamation default which makes

00:19:51,690 --> 00:19:56,910
them a lower priority than any override

00:19:54,450 --> 00:19:59,549
that's added by the developer that wants

00:19:56,910 --> 00:20:03,419
to use the component we never use

00:19:59,549 --> 00:20:05,070
extends now I know that in the SAS world

00:20:03,419 --> 00:20:07,650
the use of placeholders and extends is

00:20:05,070 --> 00:20:09,630
kind of controversial anyway we actually

00:20:07,650 --> 00:20:13,070
started by deciding that we wanted to

00:20:09,630 --> 00:20:16,080
use it but then we realized that with

00:20:13,070 --> 00:20:17,880
the dependency tree system the weed we

00:20:16,080 --> 00:20:20,309
decided on and with individual modules

00:20:17,880 --> 00:20:22,020
for each component you couldn't

00:20:20,309 --> 00:20:24,750
necessarily guarantee that each module

00:20:22,020 --> 00:20:27,390
would only be included once and in fact

00:20:24,750 --> 00:20:29,010
with quite a complex dependency tree

00:20:27,390 --> 00:20:30,660
it's very likely that the lower level

00:20:29,010 --> 00:20:32,700
components things like colors and fonts

00:20:30,660 --> 00:20:34,710
I get it got to get imported multiple

00:20:32,700 --> 00:20:37,790
times and if those modules contain

00:20:34,710 --> 00:20:41,970
definitions of sass placeholders then

00:20:37,790 --> 00:20:44,610
you won't get all of the the extends

00:20:41,970 --> 00:20:47,370
written into your final CSS which is a

00:20:44,610 --> 00:20:50,520
real problem so until SAS supports

00:20:47,370 --> 00:20:52,530
import once we can't use extends so

00:20:50,520 --> 00:20:54,990
instead we use mix-ins and we use an

00:20:52,530 --> 00:20:56,820
optimizer like CSS I will clean CSS to

00:20:54,990 --> 00:20:59,340
remove duplicated properties after the

00:20:56,820 --> 00:21:01,950
build so let me show you some code I'm

00:20:59,340 --> 00:21:05,520
sorry this is a little small hopefully

00:21:01,950 --> 00:21:07,559
people can see it the the things i'm

00:21:05,520 --> 00:21:09,330
going to pick out here as an example of

00:21:07,559 --> 00:21:11,549
the kind of code that we'd write for a

00:21:09,330 --> 00:21:15,570
component are the import statements at

00:21:11,549 --> 00:21:18,270
the top so this is importing files from

00:21:15,570 --> 00:21:20,340
other modules so if you look at they the

00:21:18,270 --> 00:21:23,520
repository for Ojeda you'll find that

00:21:20,340 --> 00:21:25,110
these files are not there so if you

00:21:23,520 --> 00:21:26,820
would just go into the report

00:21:25,110 --> 00:21:29,490
just to check out the repository and run

00:21:26,820 --> 00:21:30,690
a SAS compile on this file it wouldn't

00:21:29,490 --> 00:21:34,350
work because it wouldn't find those

00:21:30,690 --> 00:21:38,130
those imported files what you have to do

00:21:34,350 --> 00:21:40,200
is first install all of the dependencies

00:21:38,130 --> 00:21:42,030
and then it will find those files

00:21:40,200 --> 00:21:47,190
because those files are independent

00:21:42,030 --> 00:21:49,500
modules here we're styling some REO

00:21:47,190 --> 00:21:51,420
properties to encourage developers to

00:21:49,500 --> 00:21:53,100
use the right properties make their

00:21:51,420 --> 00:21:55,950
components accessible when they write

00:21:53,100 --> 00:21:59,490
their mark up here we're using a BEM

00:21:55,950 --> 00:22:01,410
standard to define a responsive variant

00:21:59,490 --> 00:22:04,770
of the header so that they can mix that

00:22:01,410 --> 00:22:06,679
in or apply that class to their markup

00:22:04,770 --> 00:22:13,890
if they want the header to assume that

00:22:06,679 --> 00:22:15,840
slightly taller visual style here we are

00:22:13,890 --> 00:22:19,110
invoking a function which is coming from

00:22:15,840 --> 00:22:21,380
one of our imported modules so this is

00:22:19,110 --> 00:22:24,660
actually a really great example because

00:22:21,380 --> 00:22:27,990
yesterday Harry's talk included an

00:22:24,660 --> 00:22:32,220
example of how you would assign colors

00:22:27,990 --> 00:22:33,750
like say f00 to a variable called red so

00:22:32,220 --> 00:22:36,720
a literal description of the color and

00:22:33,750 --> 00:22:38,880
then you would assign that literal color

00:22:36,720 --> 00:22:41,130
variable to a semantic color variable

00:22:38,880 --> 00:22:42,720
like link color and then you would use

00:22:41,130 --> 00:22:45,419
that semantic color variable when you

00:22:42,720 --> 00:22:48,600
wanted to assign a color to a natural

00:22:45,419 --> 00:22:51,030
CSS rule so we do something which is

00:22:48,600 --> 00:22:53,700
basically the same thing except we use a

00:22:51,030 --> 00:22:56,730
function call and we have extended that

00:22:53,700 --> 00:22:59,720
idea to include a cascade of use cases

00:22:56,730 --> 00:23:02,190
so rather than saying link color we say

00:22:59,720 --> 00:23:03,780
the specific link color for this

00:23:02,190 --> 00:23:05,850
particular link use case and if that

00:23:03,780 --> 00:23:07,559
doesn't exist then just link color and

00:23:05,850 --> 00:23:10,500
in this case you can see we've got a

00:23:07,559 --> 00:23:12,540
special use case for the product brand

00:23:10,500 --> 00:23:14,340
when it appears in the header and if

00:23:12,540 --> 00:23:17,549
there isn't a color for that then we'll

00:23:14,340 --> 00:23:20,640
just take the color for product brand so

00:23:17,549 --> 00:23:22,410
we actually define a whole load of color

00:23:20,640 --> 00:23:24,480
use cases that we don't have any colors

00:23:22,410 --> 00:23:26,490
for but they're there for extensibility

00:23:24,480 --> 00:23:29,070
so that you can you can define a color

00:23:26,490 --> 00:23:31,169
later on that is just for a specific

00:23:29,070 --> 00:23:34,669
thing that we previously did not have an

00:23:31,169 --> 00:23:36,780
exception for so it's kind of a way of

00:23:34,669 --> 00:23:40,100
planning for the future without us

00:23:36,780 --> 00:23:43,500
having to rewrite or like and

00:23:40,100 --> 00:23:45,480
this is another bem convention for a sub

00:23:43,500 --> 00:23:48,090
element of the header so here we're

00:23:45,480 --> 00:23:50,310
defining the styles for a container

00:23:48,090 --> 00:23:52,620
element within the header and inside of

00:23:50,310 --> 00:23:54,990
that we're using a mix in from another

00:23:52,620 --> 00:23:57,210
one of our included modules so in this

00:23:54,990 --> 00:24:02,220
case we're giving a container within the

00:23:57,210 --> 00:24:05,370
header some grid behavior so if you were

00:24:02,220 --> 00:24:08,160
to install this module and install the

00:24:05,370 --> 00:24:10,260
dependencies and build it and then take

00:24:08,160 --> 00:24:12,300
the resulting CSS file put it in an HTML

00:24:10,260 --> 00:24:15,200
page along with the mark-up for the

00:24:12,300 --> 00:24:18,300
header you would get something like this

00:24:15,200 --> 00:24:22,520
now can anyone tell me how this differs

00:24:18,300 --> 00:24:22,520
from the screenshot i showed you before

00:24:23,360 --> 00:24:30,360
margin yes very good oops there's a

00:24:27,570 --> 00:24:32,880
yucky margin around the header so the

00:24:30,360 --> 00:24:34,380
question is how do we fix this answers

00:24:32,880 --> 00:24:36,240
kind of obvious you would do something

00:24:34,380 --> 00:24:37,800
like this and but the more interesting

00:24:36,240 --> 00:24:39,720
question is where do you do this do you

00:24:37,800 --> 00:24:43,320
do this in the component or do you do

00:24:39,720 --> 00:24:47,160
this in the product that is using that

00:24:43,320 --> 00:24:49,710
component well you can't do it in the

00:24:47,160 --> 00:24:52,110
component because this is breaking

00:24:49,710 --> 00:24:54,810
encapsulation this is styling something

00:24:52,110 --> 00:24:56,790
outside of the component and that means

00:24:54,810 --> 00:24:58,800
that if we were to do that we would

00:24:56,790 --> 00:25:00,740
potentially conflict with things that

00:24:58,800 --> 00:25:03,870
other components might do to the body so

00:25:00,740 --> 00:25:05,610
we can't do this we have to strictly

00:25:03,870 --> 00:25:07,470
adhere to our encapsulation rules and

00:25:05,610 --> 00:25:09,120
let the whoever is putting that

00:25:07,470 --> 00:25:12,170
component on the page decide that they

00:25:09,120 --> 00:25:15,300
need to remove the margin from the body

00:25:12,170 --> 00:25:17,580
so that's the kind of a very quick

00:25:15,300 --> 00:25:19,440
overview of how you how you would

00:25:17,580 --> 00:25:21,720
architect a component how you would use

00:25:19,440 --> 00:25:24,750
our origami build tools to build the

00:25:21,720 --> 00:25:29,220
component produce a JavaScript and CSS

00:25:24,750 --> 00:25:33,090
bundle use those in your page and use

00:25:29,220 --> 00:25:35,940
our component system but question that I

00:25:33,090 --> 00:25:38,640
asked my team all the time is is it easy

00:25:35,940 --> 00:25:40,830
enough yet we have to keep asking

00:25:38,640 --> 00:25:42,540
ourselves this question because as a

00:25:40,830 --> 00:25:44,370
component team as a framework team it's

00:25:42,540 --> 00:25:45,870
our responsibility to provide things

00:25:44,370 --> 00:25:47,850
that the rest of the company will

00:25:45,870 --> 00:25:48,890
enthusiastically adopt and using their

00:25:47,850 --> 00:25:52,310
products

00:25:48,890 --> 00:25:54,140
and if the things that we're providing

00:25:52,310 --> 00:25:55,640
aren't easy enough to use then we'll

00:25:54,140 --> 00:25:57,470
encounter friction they'll encounter

00:25:55,640 --> 00:25:59,060
friction will all get very unhappy

00:25:57,470 --> 00:26:00,830
people will feel like they're being

00:25:59,060 --> 00:26:03,830
forced to use things that aren't working

00:26:00,830 --> 00:26:05,600
for them so we have to continually ask

00:26:03,830 --> 00:26:07,550
ourselves have we made this easy enough

00:26:05,600 --> 00:26:09,730
to use yet it's a very easy question to

00:26:07,550 --> 00:26:12,170
us because the answer is always no and

00:26:09,730 --> 00:26:13,850
if you assume that the answer is always

00:26:12,170 --> 00:26:16,490
no then you're always striving to make

00:26:13,850 --> 00:26:19,010
better tools and to find a way to make

00:26:16,490 --> 00:26:21,260
it easier so some of the things we've

00:26:19,010 --> 00:26:24,830
done in pursuit of that are to create a

00:26:21,260 --> 00:26:26,720
registry we built a registry kind of

00:26:24,830 --> 00:26:30,680
like NPM registry that lists all the

00:26:26,720 --> 00:26:33,290
components that we have available and we

00:26:30,680 --> 00:26:35,630
felt that submitting your component to

00:26:33,290 --> 00:26:37,760
the registry was kind of hard so we made

00:26:35,630 --> 00:26:39,980
the registry crawl all of our get

00:26:37,760 --> 00:26:41,570
servers and just automatically publish

00:26:39,980 --> 00:26:44,540
information about anything that looked

00:26:41,570 --> 00:26:47,150
like a component so we know that the

00:26:44,540 --> 00:26:49,040
registry is comprehensive and this is a

00:26:47,150 --> 00:26:50,690
page that describes our forms component

00:26:49,040 --> 00:26:53,240
and the first thing you see when you go

00:26:50,690 --> 00:26:55,280
to it is a demo of the text field styles

00:26:53,240 --> 00:26:57,140
and this is an interactive demo you can

00:26:55,280 --> 00:26:58,880
you can use the text fields they are

00:26:57,140 --> 00:27:01,250
just a live rendering of the component

00:26:58,880 --> 00:27:03,800
and if you click in the top right corner

00:27:01,250 --> 00:27:06,110
of that demo the code is just dumped

00:27:03,800 --> 00:27:09,050
straight into a jail in and you can muck

00:27:06,110 --> 00:27:12,380
about with the code and and change it

00:27:09,050 --> 00:27:14,510
have you like and this is brilliant for

00:27:12,380 --> 00:27:16,490
developers to start to get a handle on

00:27:14,510 --> 00:27:18,950
what the component can do for them it's

00:27:16,490 --> 00:27:20,960
also brilliant for designers who maybe

00:27:18,950 --> 00:27:22,490
don't have the engineering expertise but

00:27:20,960 --> 00:27:25,970
they can muck about with source code and

00:27:22,490 --> 00:27:28,370
they can see how the component response

00:27:25,970 --> 00:27:31,400
to interaction which is infinitely more

00:27:28,370 --> 00:27:34,400
powerful than trying to imagine how that

00:27:31,400 --> 00:27:35,780
interaction works from mock-ups and it's

00:27:34,400 --> 00:27:37,970
also useful for people like product

00:27:35,780 --> 00:27:41,660
managers who can go to the registry and

00:27:37,970 --> 00:27:43,280
see how particular components could

00:27:41,660 --> 00:27:46,970
become part of the future products that

00:27:43,280 --> 00:27:48,500
they they're imagining but you might be

00:27:46,970 --> 00:27:50,810
thinking how did we make this work

00:27:48,500 --> 00:27:53,450
because obviously we don't own a spoon

00:27:50,810 --> 00:27:55,160
we don't host Jay spin and the forms

00:27:53,450 --> 00:27:57,110
component had this big dependency tree

00:27:55,160 --> 00:28:00,500
of other modules so how did we run the

00:27:57,110 --> 00:28:02,490
build process in jayus bin to get us a

00:28:00,500 --> 00:28:06,040
CSS bundle that

00:28:02,490 --> 00:28:07,120
well if you look at the link tag you see

00:28:06,040 --> 00:28:09,700
where the style sheet is coming from

00:28:07,120 --> 00:28:12,490
here it's coming from build to origami

00:28:09,700 --> 00:28:13,540
do I to calm and this is I think is one

00:28:12,490 --> 00:28:17,320
of the best things we've built we've

00:28:13,540 --> 00:28:19,420
built a build on demand service so we

00:28:17,320 --> 00:28:22,210
figured that when we created our build

00:28:19,420 --> 00:28:24,430
process it was a set of fairly standard

00:28:22,210 --> 00:28:28,270
tools but that wasn't easy enough so we

00:28:24,430 --> 00:28:29,800
wrapped it in a single tool but then we

00:28:28,270 --> 00:28:31,000
figured that's not easy enough either we

00:28:29,800 --> 00:28:32,490
want people to be able to use our

00:28:31,000 --> 00:28:35,140
components without installing anything

00:28:32,490 --> 00:28:36,850
so all you have to do to use the build

00:28:35,140 --> 00:28:40,600
service it be able to write a script tag

00:28:36,850 --> 00:28:43,000
or a link tag you target the build

00:28:40,600 --> 00:28:44,860
server hostname you say whether you want

00:28:43,000 --> 00:28:47,350
a CSS bundle or a JavaScript bundle and

00:28:44,860 --> 00:28:49,240
you say which modules you want and the

00:28:47,350 --> 00:28:50,830
service will then install those modules

00:28:49,240 --> 00:28:52,990
it will install the dependencies that

00:28:50,830 --> 00:28:54,970
will run the build process minified the

00:28:52,990 --> 00:28:57,640
output gzip sit caches it and serves it

00:28:54,970 --> 00:29:02,230
through a CDN with support for https and

00:28:57,640 --> 00:29:04,840
shortly HTTP too so this is brilliant

00:29:02,230 --> 00:29:07,150
for prototyping it's brilliant for hack

00:29:04,840 --> 00:29:08,800
days it's great for developers just to

00:29:07,150 --> 00:29:10,240
get a handle on what they can do with a

00:29:08,800 --> 00:29:14,110
component in their own site without

00:29:10,240 --> 00:29:16,450
having to install it it's also really

00:29:14,110 --> 00:29:18,460
good for legacy products we have a ton

00:29:16,450 --> 00:29:20,740
of products I said earlier we have 600

00:29:18,460 --> 00:29:22,840
domain names we have hundreds of public

00:29:20,740 --> 00:29:25,600
products most of which don't have a gulp

00:29:22,840 --> 00:29:27,820
Howard build process because most of

00:29:25,600 --> 00:29:31,630
them were last published to production

00:29:27,820 --> 00:29:33,640
before gulp was invented so how would we

00:29:31,630 --> 00:29:36,580
go about using these modern components

00:29:33,640 --> 00:29:39,190
on those legacy projects well we don't

00:29:36,580 --> 00:29:40,600
really have time to change the way their

00:29:39,190 --> 00:29:42,370
build process works but we certainly

00:29:40,600 --> 00:29:45,460
have time to stick an extra link tag

00:29:42,370 --> 00:29:47,590
into the HTML source and put the mark-up

00:29:45,460 --> 00:29:51,640
in and then we can get to use modern

00:29:47,590 --> 00:29:53,290
components right away so this is is

00:29:51,640 --> 00:29:56,470
really something that we're really proud

00:29:53,290 --> 00:29:58,720
of we didn't think it was easy enough to

00:29:56,470 --> 00:30:00,250
figure out what the the names of the

00:29:58,720 --> 00:30:01,780
modules and the version numbers were so

00:30:00,250 --> 00:30:03,850
we added a QuickStart section to the

00:30:01,780 --> 00:30:05,260
registry so that once you've found your

00:30:03,850 --> 00:30:06,790
component you just scroll down to the

00:30:05,260 --> 00:30:10,290
QuickStart section and copy and paste

00:30:06,790 --> 00:30:13,000
that token into your build service URL

00:30:10,290 --> 00:30:15,180
so it's tempting to think at this point

00:30:13,000 --> 00:30:18,400
that we can make any easier

00:30:15,180 --> 00:30:19,750
I'm sure that's not true and I will

00:30:18,400 --> 00:30:21,640
continue to think of ways I can make

00:30:19,750 --> 00:30:23,950
that easier but in the meantime I think

00:30:21,640 --> 00:30:26,830
we have the ultimate front end component

00:30:23,950 --> 00:30:29,890
system we have separate repos per

00:30:26,830 --> 00:30:31,720
component so each component can be

00:30:29,890 --> 00:30:34,080
upgraded independently of the others

00:30:31,720 --> 00:30:36,730
which means we don't we're not afraid of

00:30:34,080 --> 00:30:38,980
developers getting stuck on old versions

00:30:36,730 --> 00:30:42,910
I don't know whether anyone who

00:30:38,980 --> 00:30:46,120
remembers jquery 1.4 point2 but it's

00:30:42,910 --> 00:30:48,340
quite common for people who use 142 to

00:30:46,120 --> 00:30:50,320
get stuck on it for years because

00:30:48,340 --> 00:30:53,830
upgrading beyond that version generally

00:30:50,320 --> 00:30:56,200
broke your site even though you were

00:30:53,830 --> 00:30:58,390
probably only stuck on you know that one

00:30:56,200 --> 00:31:00,070
particular version because of a tiny bit

00:30:58,390 --> 00:31:01,660
of jQuery that was breaking a site and

00:31:00,070 --> 00:31:03,280
otherwise you could have you could have

00:31:01,660 --> 00:31:04,390
taken the benefits of the whole of the

00:31:03,280 --> 00:31:06,400
rest of the library but because its

00:31:04,390 --> 00:31:09,970
version does one thing it makes

00:31:06,400 --> 00:31:11,680
upgrading really hard so in our case we

00:31:09,970 --> 00:31:13,360
version everything separately so you can

00:31:11,680 --> 00:31:14,920
take upgrades to any individual

00:31:13,360 --> 00:31:17,980
component without affecting the others

00:31:14,920 --> 00:31:20,200
is convention based so people are

00:31:17,980 --> 00:31:22,030
familiar with the standards and the

00:31:20,200 --> 00:31:25,150
conventional ways of doing things will

00:31:22,030 --> 00:31:29,200
find it just full of common sense and

00:31:25,150 --> 00:31:31,600
good ideas and the tools like the

00:31:29,200 --> 00:31:34,030
registry and the build service make it

00:31:31,600 --> 00:31:35,740
super easy for people to just get

00:31:34,030 --> 00:31:39,010
started without even talking to the

00:31:35,740 --> 00:31:41,860
components team we provide email mailing

00:31:39,010 --> 00:31:44,140
lists we provide a slack channel we host

00:31:41,860 --> 00:31:46,660
an open meeting once a week that anyone

00:31:44,140 --> 00:31:49,090
can drop into and yet people still just

00:31:46,660 --> 00:31:51,160
email us and say I did this and it's

00:31:49,090 --> 00:31:52,810
something we'd never heard about because

00:31:51,160 --> 00:31:54,820
they don't even need to talk to us it's

00:31:52,810 --> 00:31:58,690
just intuitive for them to pick up

00:31:54,820 --> 00:32:01,090
components and use them so I want to use

00:31:58,690 --> 00:32:04,720
the last few minutes of my talk to talk

00:32:01,090 --> 00:32:07,500
about how this component system relates

00:32:04,720 --> 00:32:10,180
to our support for legacy browsers

00:32:07,500 --> 00:32:11,770
because whilst origami does a lot of

00:32:10,180 --> 00:32:15,160
clever stuff it does most of its server

00:32:11,770 --> 00:32:17,110
side so it doesn't really restrict us in

00:32:15,160 --> 00:32:19,900
terms of what kind of browsers we

00:32:17,110 --> 00:32:22,120
support but equally we don't want to

00:32:19,900 --> 00:32:24,250
spend all of our time thinking about

00:32:22,120 --> 00:32:28,930
whether this code works in IE six or

00:32:24,250 --> 00:32:32,620
seven so we have a policy for

00:32:28,930 --> 00:32:36,460
trying to move fast without breaking too

00:32:32,620 --> 00:32:40,240
much so in CSS we serve the same CSS to

00:32:36,460 --> 00:32:42,190
all browsers we would like to on an

00:32:40,240 --> 00:32:44,500
ongoing basis use app supports as much

00:32:42,190 --> 00:32:48,160
as possible although there's not enough

00:32:44,500 --> 00:32:49,630
support for our supports yet there are

00:32:48,160 --> 00:32:51,610
other things we can do like we can use a

00:32:49,630 --> 00:32:53,380
very wide-ranging media query to hide a

00:32:51,610 --> 00:32:55,570
lot of styles from browsers that simply

00:32:53,380 --> 00:32:57,450
don't understand media queries and

00:32:55,570 --> 00:33:00,850
that's quite a good way of writing

00:32:57,450 --> 00:33:03,730
reasonably modern CSS without worrying

00:33:00,850 --> 00:33:06,550
too much about really old browsers and

00:33:03,730 --> 00:33:08,320
we still use browser hacks to improve

00:33:06,550 --> 00:33:10,410
the user experience in browsers that

00:33:08,320 --> 00:33:13,030
have a stubbornly large user population

00:33:10,410 --> 00:33:15,030
and that for us is specifically I eight

00:33:13,030 --> 00:33:18,220
we have a lot of corporate users and

00:33:15,030 --> 00:33:20,560
corporates have a habit of upgrading you

00:33:18,220 --> 00:33:22,690
know 100,000 machines at once and that

00:33:20,560 --> 00:33:25,230
takes a long time to organize so a

00:33:22,690 --> 00:33:27,640
couple of banks are still stuck on i-8

00:33:25,230 --> 00:33:29,920
so we'll use the browser hacks until

00:33:27,640 --> 00:33:31,600
that percentage drops to below one or

00:33:29,920 --> 00:33:34,120
two percent and then we'll rip them out

00:33:31,600 --> 00:33:38,020
and they can just they can just get the

00:33:34,120 --> 00:33:39,520
the very basic experience so that's how

00:33:38,020 --> 00:33:42,430
it works for CSS but how works for

00:33:39,520 --> 00:33:44,020
javascript is very different with

00:33:42,430 --> 00:33:47,470
javascript we've always had the ability

00:33:44,020 --> 00:33:48,880
to segment our audience into those that

00:33:47,470 --> 00:33:51,580
support javascript and those that don't

00:33:48,880 --> 00:33:55,870
with the script tag and no script tag

00:33:51,580 --> 00:33:59,170
the problem is that as the web advances

00:33:55,870 --> 00:34:00,850
we are continuously getting more and

00:33:59,170 --> 00:34:05,200
more browsers that are above that bar

00:34:00,850 --> 00:34:07,390
and virtually none below so even search

00:34:05,200 --> 00:34:09,640
callers will now evaluate our page on

00:34:07,390 --> 00:34:12,790
the basis of having JavaScript enabled

00:34:09,640 --> 00:34:16,120
and won't see the no script content so

00:34:12,790 --> 00:34:17,650
it's like having a two-tier solution

00:34:16,120 --> 00:34:19,510
where your top tier represents

00:34:17,650 --> 00:34:21,280
ninety-nine point nine percent of your

00:34:19,510 --> 00:34:23,290
audience and your bottom tier is

00:34:21,280 --> 00:34:26,170
basically never seen by anyone and

00:34:23,290 --> 00:34:31,330
that's not useful what we need is a bar

00:34:26,170 --> 00:34:33,310
that we can move up so that we have we

00:34:31,330 --> 00:34:34,630
have our JavaScript support divided into

00:34:33,310 --> 00:34:36,460
those browsers that support good

00:34:34,630 --> 00:34:39,400
JavaScript and modern JavaScript and

00:34:36,460 --> 00:34:40,950
those that don't so we use a technique

00:34:39,400 --> 00:34:42,760
the BBC invented called cuts the mustard

00:34:40,950 --> 00:34:44,919
which Scott mentioned it

00:34:42,760 --> 00:34:47,320
his talk yesterday and it involves

00:34:44,919 --> 00:34:49,480
running a single JavaScript expression

00:34:47,320 --> 00:34:51,460
this is the one that we use that returns

00:34:49,480 --> 00:34:53,770
either true or false if it returns true

00:34:51,460 --> 00:34:55,720
then you run your JavaScript you'd load

00:34:53,770 --> 00:34:57,790
your JavaScript library if it returns

00:34:55,720 --> 00:34:59,470
false then this is the only JavaScript

00:34:57,790 --> 00:35:01,840
on the entire page which will run and

00:34:59,470 --> 00:35:05,080
after that we give up we don't load any

00:35:01,840 --> 00:35:06,820
more code so that means we don't need to

00:35:05,080 --> 00:35:12,510
test the code in those browsers that

00:35:06,820 --> 00:35:14,740
failed the test and our target is for

00:35:12,510 --> 00:35:16,780
most of our customers to be in the

00:35:14,740 --> 00:35:19,030
primary experience category but where

00:35:16,780 --> 00:35:20,740
we're pretty happy with ten to fifteen

00:35:19,030 --> 00:35:23,110
percent of our customers to be in core

00:35:20,740 --> 00:35:25,420
experience and we're also pretty happy

00:35:23,110 --> 00:35:28,630
that they're getting a better service

00:35:25,420 --> 00:35:30,760
from us not running any JavaScript to

00:35:28,630 --> 00:35:32,410
give you an example of a situation where

00:35:30,760 --> 00:35:34,930
this might be the case I have a smart TV

00:35:32,410 --> 00:35:38,170
I should put smart university-commerce

00:35:34,930 --> 00:35:42,430
really because he's familiar with html5

00:35:38,170 --> 00:35:44,710
tests show of hands few people so html5

00:35:42,430 --> 00:35:46,810
test is an online service that basically

00:35:44,710 --> 00:35:49,360
grades your browser based on how good it

00:35:46,810 --> 00:35:50,860
is modern web technologies the iphone

00:35:49,360 --> 00:35:56,880
school might have iphone 6 cool

00:35:50,860 --> 00:36:00,100
something like 600 my TV scores 35 and

00:35:56,880 --> 00:36:03,040
also bear in mind that TVs need to be

00:36:00,100 --> 00:36:06,430
really good at decoding video and in

00:36:03,040 --> 00:36:09,160
terms of working at having a UI thread

00:36:06,430 --> 00:36:10,960
to render arbitrary content on screen

00:36:09,160 --> 00:36:12,850
basically they don't have a requirement

00:36:10,960 --> 00:36:16,210
to do that as a few on-screen menus but

00:36:12,850 --> 00:36:18,160
nothing particularly heavy so if you try

00:36:16,210 --> 00:36:19,840
and load a webpage into a web browser

00:36:18,160 --> 00:36:22,300
rendering engine that's going to be

00:36:19,840 --> 00:36:27,030
quite taxing on the TV so I tried to go

00:36:22,300 --> 00:36:27,030
to ft com on my TV and the TV turned off

00:36:28,850 --> 00:36:35,180
which was not an ideal experience so i

00:36:31,650 --> 00:36:39,120
think i'm going to call out a crash and

00:36:35,180 --> 00:36:40,770
i think that if i had not tried to run

00:36:39,120 --> 00:36:43,440
the javascript it probably would have

00:36:40,770 --> 00:36:47,100
worked it probably would have displayed

00:36:43,440 --> 00:36:49,230
at least the content so people would get

00:36:47,100 --> 00:36:52,260
a much better experience of our site if

00:36:49,230 --> 00:36:54,870
we actually tried to do less on browsers

00:36:52,260 --> 00:36:58,020
that really don't support the modern web

00:36:54,870 --> 00:36:59,760
api's we're trying to use now that said

00:36:58,020 --> 00:37:04,290
the people who that who are using

00:36:59,760 --> 00:37:05,940
browsers that do pass this test they

00:37:04,290 --> 00:37:07,590
will still have questionable support for

00:37:05,940 --> 00:37:09,600
other things that we're not testing so

00:37:07,590 --> 00:37:12,990
let's imagine we put three components on

00:37:09,600 --> 00:37:15,540
the same page a date picker an accordion

00:37:12,990 --> 00:37:18,080
and a table and let's imagine that all

00:37:15,540 --> 00:37:21,060
three of those components use class list

00:37:18,080 --> 00:37:22,500
now in our cuts the mustard test we're

00:37:21,060 --> 00:37:24,870
not testing for class list so we don't

00:37:22,500 --> 00:37:26,850
necessarily know that we have a browser

00:37:24,870 --> 00:37:28,650
here that supports classist and the

00:37:26,850 --> 00:37:31,170
components don't individually know

00:37:28,650 --> 00:37:32,310
whether any of the other components are

00:37:31,170 --> 00:37:34,950
on the page because they're all

00:37:32,310 --> 00:37:37,860
encapsulated and separate separate

00:37:34,950 --> 00:37:39,990
concerns so each of those components

00:37:37,860 --> 00:37:41,610
will ship with a polyfill for classes to

00:37:39,990 --> 00:37:43,950
ensure that they just work out of the

00:37:41,610 --> 00:37:46,230
box and that means that we have hugely

00:37:43,950 --> 00:37:48,420
repetitive code and actually in a lot of

00:37:46,230 --> 00:37:49,800
browsers we're serving three copies of a

00:37:48,420 --> 00:37:51,600
piece of code that we don't even need

00:37:49,800 --> 00:37:55,200
because the browser supports classless

00:37:51,600 --> 00:37:57,510
natively so we wanted to try and solve

00:37:55,200 --> 00:38:00,120
this problem so we created a polyfill

00:37:57,510 --> 00:38:02,760
service and it solves those problems it

00:38:00,120 --> 00:38:04,380
also solves the problem of if the

00:38:02,760 --> 00:38:07,770
component doesn't include the polyfill

00:38:04,380 --> 00:38:09,960
but uses the API anyway you then have to

00:38:07,770 --> 00:38:12,300
figure out that it uses that API and

00:38:09,960 --> 00:38:14,130
that you need a polyfill for it and then

00:38:12,300 --> 00:38:15,120
you go and google for that polyfill to

00:38:14,130 --> 00:38:16,350
find that there are seven different

00:38:15,120 --> 00:38:18,690
polyfills and you don't know which one

00:38:16,350 --> 00:38:20,970
to use so we wanted to try and solve

00:38:18,690 --> 00:38:24,660
these problems so we teamed up with

00:38:20,970 --> 00:38:27,330
fastly in yahoo and Jonathan Neil who's

00:38:24,660 --> 00:38:31,020
one of the developers of html5 Shiv and

00:38:27,330 --> 00:38:32,550
we produced the polyfill service and

00:38:31,020 --> 00:38:34,470
this is open source and this you know

00:38:32,550 --> 00:38:36,570
most of the origami is open source in a

00:38:34,470 --> 00:38:38,280
way that sort of means you know help

00:38:36,570 --> 00:38:40,440
yourself but don't bug us

00:38:38,280 --> 00:38:42,300
this is open source in a way that means

00:38:40,440 --> 00:38:44,460
Dubai us because we really want you to

00:38:42,300 --> 00:38:46,920
be involved in this so you add this

00:38:44,460 --> 00:38:49,320
script tag to your to your content to

00:38:46,920 --> 00:38:51,240
your page and then when your users visit

00:38:49,320 --> 00:38:52,830
that page their browser will make a

00:38:51,240 --> 00:38:54,930
request to the polyfill service which

00:38:52,830 --> 00:38:57,960
will evaluate the user agent header on

00:38:54,930 --> 00:39:00,810
the request and we'll send them back a

00:38:57,960 --> 00:39:02,520
bundle of polyfills that fixes the

00:39:00,810 --> 00:39:06,570
specific problems with that particular

00:39:02,520 --> 00:39:09,030
browser and nothing else we have a

00:39:06,570 --> 00:39:11,070
feature matrix which tells you what

00:39:09,030 --> 00:39:13,950
features we support what browsers we

00:39:11,070 --> 00:39:15,270
poly fill them in what browsers their

00:39:13,950 --> 00:39:18,030
native in so that we don't need to

00:39:15,270 --> 00:39:19,770
probably fill them I was actually really

00:39:18,030 --> 00:39:21,300
pleased with myself when Katie was

00:39:19,770 --> 00:39:23,820
talking about colorblindness yesterday

00:39:21,300 --> 00:39:26,430
and I realized that unlike can I use we

00:39:23,820 --> 00:39:30,990
do actually have border differences

00:39:26,430 --> 00:39:32,040
between the the indicators so someone

00:39:30,990 --> 00:39:38,160
with colorblindness can tell the

00:39:32,040 --> 00:39:42,480
difference so yeah well done us it I'd

00:39:38,160 --> 00:39:45,390
love to say it was intentional so I will

00:39:42,480 --> 00:39:47,190
say it was intentional so this is a

00:39:45,390 --> 00:39:49,320
polyfill service design for everyone we

00:39:47,190 --> 00:39:51,660
minify in gzip our responses we support

00:39:49,320 --> 00:39:54,690
https we serve all best practice caching

00:39:51,660 --> 00:39:56,550
including asynchronous revalidation so

00:39:54,690 --> 00:39:58,470
you will never have to wait for a

00:39:56,550 --> 00:39:59,820
request to our origin servers which is

00:39:58,470 --> 00:40:03,360
quite important for people based here in

00:39:59,820 --> 00:40:05,490
Australia we have a comprehensive test

00:40:03,360 --> 00:40:07,530
suite that means that every time we push

00:40:05,490 --> 00:40:10,050
a new release to the CDN will have

00:40:07,530 --> 00:40:12,240
tested it in 26 different browsers on

00:40:10,050 --> 00:40:15,090
the sauce labs platform and run a total

00:40:12,240 --> 00:40:16,830
of over 7,000 tests we have permissive

00:40:15,090 --> 00:40:18,390
cause headers so that you can make ajax

00:40:16,830 --> 00:40:22,140
requests to the service from any domain

00:40:18,390 --> 00:40:24,090
name from any origin we also recently

00:40:22,140 --> 00:40:26,040
opted in to resource timing so you can

00:40:24,090 --> 00:40:28,410
monitor the performance of the polyfill

00:40:26,040 --> 00:40:30,420
service from the front end we publish

00:40:28,410 --> 00:40:32,580
all of uptime performance metric on the

00:40:30,420 --> 00:40:34,290
site and the whole thing is open source

00:40:32,580 --> 00:40:35,850
so if you don't like the fact that we're

00:40:34,290 --> 00:40:37,920
hosting the CDN you can run it yourself

00:40:35,850 --> 00:40:41,100
or you can use it as a node module if

00:40:37,920 --> 00:40:42,510
you if your application is node so we

00:40:41,100 --> 00:40:45,030
think we've put it together here a

00:40:42,510 --> 00:40:47,940
framework which will satisfy anyone's

00:40:45,030 --> 00:40:50,550
need for polyfills and serving polyfills

00:40:47,940 --> 00:40:52,200
as part of their project and the way we

00:40:50,550 --> 00:40:54,660
can make this better is if everybody

00:40:52,200 --> 00:40:57,930
contributes their polyfills or their bug

00:40:54,660 --> 00:41:00,630
fixes to make this a canonical library

00:40:57,930 --> 00:41:02,369
of polyfills that everyone goes to is

00:41:00,630 --> 00:41:04,500
the the you know the place they go to to

00:41:02,369 --> 00:41:05,760
upgrade the web so if you're interested

00:41:04,500 --> 00:41:09,180
in getting involved the address of that

00:41:05,760 --> 00:41:11,099
is CDN polyfill die oh we're also

00:41:09,180 --> 00:41:12,660
offering free subs to the FT for anyone

00:41:11,099 --> 00:41:14,460
who gets a pull request merged in this

00:41:12,660 --> 00:41:21,510
repository by the way if I interest

00:41:14,460 --> 00:41:22,710
anyone so this is an email that one of

00:41:21,510 --> 00:41:25,859
my colleagues turned out to the

00:41:22,710 --> 00:41:30,290
technology team last week the nearest

00:41:25,859 --> 00:41:33,329
2016 and he's quite dramatic he's French

00:41:30,290 --> 00:41:36,599
the user experience and the brand feels

00:41:33,329 --> 00:41:38,460
consistent across ft web products teams

00:41:36,599 --> 00:41:40,349
who use ft components share them

00:41:38,460 --> 00:41:42,810
contribute to improve them and the tools

00:41:40,349 --> 00:41:44,670
that support them design iterations are

00:41:42,810 --> 00:41:47,089
informed by real user data and I rolled

00:41:44,670 --> 00:41:50,339
out to dozens of products within hours

00:41:47,089 --> 00:41:52,230
now that sounds great and it doesn't

00:41:50,339 --> 00:41:54,510
actually sound that hard to do but

00:41:52,230 --> 00:41:57,930
believe me this is incredibly hard to do

00:41:54,510 --> 00:41:59,880
for a really large organization and I

00:41:57,930 --> 00:42:02,040
really hope that by 2016 we can do it

00:41:59,880 --> 00:42:04,319
and I also hope some of the ideas that

00:42:02,040 --> 00:42:06,510
I've talked about today are helpful to

00:42:04,319 --> 00:42:09,079
you guys as well so you thank you very

00:42:06,510 --> 00:42:09,079

YouTube URL: https://www.youtube.com/watch?v=vq-cBmNsMQM


