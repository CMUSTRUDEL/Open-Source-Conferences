Title: Irina Shestak - HTTP2, one frame at a time
Publication date: 2018-04-11
Playlist: JSConf AU 2018
Description: 
	Node Files.
Take #1337.
~ * Action! * ~

INT. JSCONF AU CONFERENCE VENUE

The camera zooms in on an intense discussion between Scully and Mulder. Both are huddled around a terminal, both are uncertain about the next steps. Ghosts of old TCP connections wail in the background.
Scully is frantically typing. The left hand side shows a new session starting. Soon a new stream created. Multiple requests come in and Scully and Mulder frantically look at each other with a single face expression -- what. do. we. do. now? A minute passes. Scully looks like she has an idea.

~ * Scene * ~

In this fresh off the press episode of Node Files, I will take you to a set of Node.js' implementation of HTTP2. Its quirks, its benefits, and its workings explained and illustrated. How do we get from an established connection to TLS decryption? How does the concept of session come in to play? How does node handle memory usage when it comes to HTTP2? And what are these frame things everyone keeps talking about? This and more explained in HTTP2, one frame at a time. Coming to theatre near you from JSConf AU in March 2018.
Captions: 
	hey everyone hello this computer thatsays hello so I'm here to talk aboutHTTP to the Critias the critics havespoken the critics have said it's amajor protocol shipped with a potentialto accelerate the web that is the HTTP -it's enough it's supposed to make ourapplications faster simpler and morerobust Google folks at web fundamentalshave mentioned that as well people whohave put together more efficient to parse more compact onthe wire and most importantly there aremuch less error-prone compared totextual export protocols like HTTP lots of people are talking about HTTP and how it's a lot more performance thanit is with HTTP actually so I'm here my name is erinaI work for a Morgan DB I'm an engineerthere these are my two friends who willhelp me out today- right slides and I'm gonna talk to youabout HTTP slowly and that take it one frame at atime this joke will be funny in like twominutesall right so this has got it's got thistalks got a bit of a theater wipe sowe're gonna take it in Acts and I'llwalk you through a bunch of them so thefirst one's a bit of a like a prelude sopreviously on HTTP files things that youhave missed if you're familiar with abit of like how hep-refresher but those who those of you whoaren't this is a good kind of getting toknow you before we dive a little bitdeeper into the specifics of the specand how it works and I know Jess so theprimarily focus the primary focus of theprotocol is on performance so we want tomake sure that our web transfers are alot faster so specifically its focuseson end-user perceived latency Networkand server resource usage these are thepeople that maintain the HTTP - so HTTPwas put together in like internet quite once a week maybe inInternet in like okay so what did Internet look likein the time that I remember and how howmany requests are coming throughwhatever transfers and there's like thisinteresting tool called the HTTP archiveand it's showing you kind of like thenumber of requests a number of transfersmade it goes and looks into the top websites over time I think they startedin which is when I remembered the internetI don't remember it in just one of those Millennials I don'tknowso in weren't doing too many transfersprobably one TCP connection was enoughto be able to send one or two requestsover but in the previous year in theprevious year we've obviously increasedall of our traffic so with working withHTTP particular request we one requesthappens over a single TCP connectionwhich means that anytime we need to bemaking multiple TCP connections ormultiple requests we run themconcurrently we'll need to make multipleconnections so eventually we're justgonna have connection after connectionafter connection you can only deliverone request at a time rather thanmultiple and to be able to achieve powerparallel parallel requests you'll needto have multiple TCP connections so whatthat causes is your first packet will bekind of in queue to be able to beprocessed but all the other packets willnot be able to be processed afterwardsso they're kind of blocked so you end upin this head-of-line blocking situationwhere you can process your requests andobviously we're doing that a lot morethan we were in look at what an HTTP it's pretty easynode we just create server we handle theserver we've got a request responseagain a single one happens over a singleTCP connection and there we are and weget a protocol HTTP point one point oneso what it's gpto increase the number of requests wewere able to make over a single TCPconnection because obviously thehead-of-line blocking doesn't work verywell so what happens with HTTP T's youhave a single connection that takes inmultiple streams and multiple streamsare able to handle multiple connectionsat the given time but more on that laterthis is like a little bit of an overviewand we're gonna dive deep as to whatthese streams actually are and what theydo and what is a notion of request andresponse and they should be - becauseit's a little bit different so an HTTPtea server and node since version you're able to work with a create secureservice so you need a key and a cert andthis one is meant to be incompatiblemode and you're able to you create astream and kind of respond with the samekind of aspect and works the same waymaybe needs a little bit more code butit works the same way and you get anHTTP - protocol response when you getstuff back so it's it's a little bitmore complicated and we kind of seethese new concepts of there's thisstream that we're not quite sure aboutand the stream duct responds which isnot response and in particular or rispayou start fried head or anything likethat which is the usual HTTP so this one was allowing HTTP happen which means it's compatible withboth HTTP combat mode that looks a lot moresomething that we're used to so you'restill getting requests a response you'restill able to create a secure serverwith a key and assert to sign and youstill get their response at end and thatgets us the same result and they kind oflook similar and you're still able toget the same HTTP protocol so htv-brings a couple of little winds a littlewindsthat once you concentrate as we walkthrough the stock one of them is streamprioritization the other one is beingable to do something that's calledserver push and another one iscompressing into TP headers so ATP a binary protocol so you don't have thetextual responses that you would havewith HTTP headers comes in and it gets utilizedand very efficiently and helps us withthe binary protocol all right so let'stalk about the connection and actuallyhow that happens with HTTP - so youstart off with a single connection sothis is kind of what makes up an HTTP client was a client-server kind ofrelationship you start off with aconnection a connection can havemultiple streams and these multiplestreams will have several frames andframes are the unit of measure of HTTP so instead of having a request responseall the data gets passed in throughframes and we'll talk about frames alittle bit further on and kind of talkof a little bit more detail as to what'sgoing on there so instead a requestresponse all the data gets passedthrough mr frames and frames are part ofyour streams and those streams are partof a TCP connection so that's already alot more kind of from the overview itlooks a lot more efficient than it wouldwith HTTP ahead of time whether they can acceptwhether the server can accept an HTTP request so how will this kind ofconnection work with the two clients sowhat you start off with for the clientis you say hey I might want to I wouldlike to upgrade to a TP do this and you'll pass in theconnection header as part of that andyou say that I would like to upgradeyou'll do this some alp and negotiationson whether or not you can connect over Hif you want or HCP - I keep calling itALPA Alpine connection but I know it's aLPN I just want to go to mountains maybeI miss mountains then the server willsay that hey I can actually upgrade Ican take an HCP - we can make this anHTTP I'm gonna upgrade I'm gonna send you aHTTP to rather than HTTP acknowledge there's a lot of like it's avery kind of acknowledgment basedsituation where the to acknowledgeserver in the client and whether or notsomething can be done or somethingcannot be done it's very healthy andthen the client can then send over thesettings frame and say what it exactlyonce in terms of I kind of anything thatit would require eventually from theserver it's going to let oh no in thissitting stream so now I've talked aboutframes a few times and we'll get to themI promise in a little bit but that'skind of how the negotiations happens andI said I will talk about them when theyknew I would talk about himso frames we're gonna talk about framesso the single unit of measure and frameslots of frames because that's how a CB protocol works is that you just keepsending over frames so that's how youcommunicate between two endpoints yousend one over you send one back you somewent over a some one back so data andheaders are kind of the two you the twothat kind of come up can over and overagain eventually you might havesomething like settings or windowupdates that lets the client know butone thing or another but everything getspassed over from one to the other but ifthe header block is they afford the oneand that's the one that gets compressedthat I mentioned earlier and this onegets bundled up with a few differentones so like the headers or the pushpromise but we'll talk in a little bitor the continuation frames so when I'vetalked about the little ones compressingHTTP headers was one of them so whathappens with the compression is thatlike you would send over a couple of[Music]sorry so what happens with thecompression is that it kind of optimizesinstead of getting sent in plain textand what people have discovered is thatif you keep sending them in plain textyou kind of use time but if you have cookies and a lotof the times we'll we'll have cookiesto be sent over the wire as well it endsup being in kilobytes so that's quite abit of that's kind of kind of cut a bitof traffic to be dealing with so whenyou set off headers you send them in alike a list I'll be content type it'llbe some cookies and things like that yousend them in the list and then get puttogether by the protocol in a littleblock and then that block uses Huffmanencoding and I won't talk about Huffmanencoding here but that Huffman encodinggets put together compressed in an octetblock and it's Huffman encoded so it's alots more smaller and it's binaryinstead of being textual which is a lotbetter and then like I've mentionedpreviously it gets put together with theheaders the push promise or thecontinuation frames there are just thetype of frames that could be sent overby the client or the server but youwon't necessarily have to deal with themdirectly when you build out yourapplication so we talked about streamswe talked about the fact that a TCPconnection can have multiple streams itwe talked about the fact that streamscan handle frames as we've justmentioned in the previous scene so let'stalk about streams I I don't usuallylike reading specs because I think it'sa lot of wording and like I don't likewhat they put together but this is areally good explanation from the spec sostreams are independent bi-directionalsequence of frames so frames being partof the stream exchanged between theclient and the server was in a givenHTTP good definition from a spec I like it soa stream can have a couple of statesthat it just keeps rotating over so itcan be an idle stream a reserved openstream meaning a stream that is beingprepared to receive or send over dataand a stream that's half closed that hasfinished sending over data or a closedstream that is no longer in use so youkind of keep moving over to those andframes keep coming through and comingthrough and eventually it gets closedoff again multiple streams exist for asingle connection instead of with HTTPone just being the onewe've seen that before multiple streamsone connection and once you get themthrough your endpoint you'll get severalframes from several streams and they canbe combined from different streams whenyou receive them instead of beinginstead of just being taken from thesingle stream so stream prioritization Iwanted to briefly mention this a lot ofthe time is when you're actually workingwith a cheapy - you won't have to dealwith this unless you want to build outyour own kind of server in the clientbut it's kind of interesting to knowwhich is why I kind of dived in deepinto this topic so because you havemultiple streams and you'll want to beable to not have them come in at thesame time and resolve at the same timeyou'll want to be prioritizing them andthat's one of the really cool thingsabout HTTP - is that you can prioritizewhich resources you want to use whereand which ones you want to prioritizeover other ones so certain pieces ofdata can be sent over faster than otherpieces of data and to be able to dealwith that what you do is you assignstring dependencies to differentportions of your of your connection andthen different weights and weights arethe ones that resolve the streams fasterso if something has a higher weight sowe have four streams here and stream in steam stream so see stream stream on the same level or like they they'reboth dependent on stream like compete for resources but becausewe've assigned weights to them we knowthat stream better weight or like a higher weight soa resolved faster and then they don'tcompete for the resources and in streamsHCP two handles kind of resources a lotbetter and a lot smarter than kind of talked about streamprioritization and talked about howwe'reresources and another way of managingresources that http/control and this one's a kind ofinteresting and then you're able to kindof solve this between the client and theserver so because we have multiplexstreams over a single TCP connectionsometimes because we multiplex them thatcan cause congestion on a given TCPconnection so too many of them and asingle TCP connection we need to be ableto communicate to the client as to howmany or what are the important resourcesso multiplexing them helps so thisbecause the streams have several statesthat they go through idle reserved openhave closed and closed there's onlycertain ones that count towards thisflow control flow control markings andthere are the reserved open and halfclosed so closed and idle don't countbut what happens is that when you senddata specifically the data frames theycount towards the number that the serverwill have so server has a number that itspecifically sends over to the clientand says I can only handle this much Ican only spend or give you this manyresources at the same time so I'm gonnalet you know how are you doing it's acredit-based system so data and headersare the only ones that affect this andonly the streams that are reserved openor half closed to count towards this andevery time it's like you've used partsof that particular flow control numbersir we'll send you a window updateletting you know that hey you're kind ofyou're using stuff up so it willcommunicate to the client how wellyou're doing in terms of you like yourcredit based system and it works like acredit-based system so you take away youput back especially you put back whenthe stream is closed so flow controlhelps you prioritize streams so theydon't block and so you're able to notover utilize and not congest your TCPconnection all right so we talked aboutkind of the general concepts of HTTP -and this will all of this applies to nojs' but I wanted to like walk youthrough howthis works in nodejs and kind of whatthe flow of data is between when youreceive a request from the clients andwhen you send back their response sowhat does know do so you start off withhaving an incoming call an incomingsecure connection that comes in to yourserver to your node up to your nodeserver what happens is that libuv willhandle parts of that i/o you will thenopen up a stream in a session it's takenthe data and libous a cell will decryptthat connection what will happen afterthe connection is decrypted is TLStermination and after that you're ableto get through and restart receivingframes from the client including thesettings frame which I mentioned alittle bit earlier so once you startcoming once request started coming in informs of frames a package called a dingyhttp/parsing the request into framesspecifically and then those frames willbe able to send events and raw dataonce those are parsed into that they arenow able to be put together in yournode.js application that you can workwith because you can't work with thatbeforehand so once those events and rawdata and they're part of your node.jsapplication and then you as a developerare able to handle particular things youwant to do and send back the responseback to the client so all of thesehappen before you're able to actuallymanipulate the response which is kind ofinteresting to know because he kind ofjust can work with the request responseor you can also work with the requestresponse and know a little bit moreabout how no it handles these particularthings one of the things we talked aboutthat was parts of the little wins isserver push and server push is aninteresting one and then something thatwas put together with HTTP a little bit of example when we get tothis as a server push allows you topreemptwe send data to the client before itneeds it so this puts it into theclients cache and then once the clientneeds it it doesn't have to make arequest to the server it already has thedata which is really cool so I'm gonnause a package cause called TLS keygen Ireally wanted to give a shout out tothis one because developing in localhostand creating secure service is a littlebit hard so this package allows you tobe able to do that on localhost so youstill have the key in the cert andyou're able to create a secure server onthat I think sub for building it thishuman lives in Singapore and I met themthere that was coolso we're gonna do is streamed up pushand I will actually pull up my terminalbecause it might be a little bit easierthan just on the slide so this is theparts of the TLS key gen package thathandles your keys in the certs but whatwe'll do is we'll just create a secureserver using the key in the cert andwill allow for HTTP compatible mode so we can take both HTTPwe'll push certain parts of data and Ithought like the the more interestingone to do is bundle dot CSS because Ifeel like with what this is useful foris especially CSS when you're workingwith a particular part of theapplication and you're loadingpre-loading parts of it of the CSS thatyou'll need later on is super fast andsuper efficient so we're gonna do a pushstream and it takes some headers and weknow that we want to send the paththat's bundle dot CSS and when we sendback the response from the server we'llmake sure that this server actually issorry the client actually wants the CSSso make sure that the stylesheet isthere and what push stream will do isthey'll respond with back some background colorthat's hot pink to match the rest of thepresentation I already had the serverrunning so the next thing to do is justto actually see it I usually use anightly but I'm gonna use Chrome forthis because nightly has this weirdthing where I can't even see theprotocol inside of the network tab so itjust has one line I don't think we needto see it any more so that's so the background color got pushed butthe more interesting thing is to see thenetwork tab so I'm just gonna show youthat and refresh so we're getting tojust the localhost and we're getting theprotocol HTTP too and there's noparticular initiator but once we get tobundle dot CSS we can see that it waspushed preemptively and we can see thatit sent over the response thatbackground color is pink and theinteresting part is that regardless ofwhether or not the client has to askyou're still going to transfer the sameamount of data it's just gonna be fasterin terms of you won't have to have theclient ask you for stuff instead youjust have it there for them especiallyif you know it's already there it'ssomething they will need so this is foryou as a developer kind of to decideso that's server pushed and it's I thinkit's a pretty cool feature all right sothe tail they are iewhat have we learned in thispresentation or hope that you've learnedin this presentation so I wanted tomention we were talking about node HT pis still under the experimental flagthis is a and this is the first time I'mtelling you this but it's underexperimental tag there is like literallyyesterday James put out a discussionissuethe node repo saying though they'retrying to get it out of the experimental as soon as possible so if you'rethinking I'm using it in productionprobably report some of the bugs do youhave or if you are using it inproduction report the bugs you have sowe can get it as experimental tagged assoon as possible but kind of thetakeaways is the fact that you can usepush and push allows you to preventivelypreemptively and proactively send abunch of stuff to the client before itneeds it and loaded into clients cachethe fact that we have flow control andthe fact that we have streamprioritization we're able to use the TCPconnection better and have betterperformance gains which means you don'thave to use a single TCP connection perrequest but instead you use multiplestreams in a given a request unable tosend frames over those and the fact thatthe combat mode exists in nodejs who areable to quite easily switch to http - infact it looks very similar - the factthat you need the keys and certs whichyou'll need anyway in an HTTP server soit's quite easy to switch over andthat's it for me today NOFA and todaywould say in the movieyeah thanks thanks so much and thanks toorganizers and I think Lindsay is doinglife captioning thank you for that andthank you for listening to my mumblescome say hi I'm on Twitter and you canemail me thanksyou
YouTube URL: https://www.youtube.com/watch?v=KpkTLmLTvAI


