Title: Craig Spence - Fantastic ASTs and where to find them
Publication date: 2018-04-11
Playlist: JSConf AU 2018
Description: 
	Oh no! Harry Potter, the hero from the J K Rowlingâ€™s wizarding universe, has been cursed by the super-villain, Lord Voldemort, and now he is trapped inside the Internet! 

Harry knows Parseltongue, which means that he can talk to snakes. Incredibly, Parseltongue also happens to be a Turing complete programming language! In order for Harry to escape from the Internet, we need to transpile Parseltongue into JavaScript. In order to do that we need to learn all about Abstract Syntax Trees and how to use them to manipulate code. 

This talk goes through the details of these magical data-structures, and all about language transformation, including lexing, parsing, code generation and creating source maps.By the end of the talk, attendants should have an idea of how ASTs work, how they are used in code transformation, and how they can be used to manipulate and interrogate code at a structural level.
Captions: 
	builder hi everyone I'm so so stoked tobe here thank you for having me this isalready been an awesome day andhopefully it gets interesting now um I'mCraig I do JavaScript at trade me in NewZealand I work in a big angular codebase but I really like working on toolsand stuff and so this talk has come fromsome things I've learnt there um we'regonna start with the story and to makethis story happen as you need someparticipation from the audience just toshake your awake so I need everyone toclose their eyes and all together we'regonna say the magic wordsso one two three the magic words okaygreat and just like that you're a wizardthis is Hagrid he's a good guyyou went to Hogwarts the school ofwitchcraft in Ruby it's where all thestuff happens in Harry Potter you can domagicthat's a Patronusthat'll be important later you knowDumbledore he's also a good guy andHarry Potter is your best friend that'sHarry Potterhe's the manga guy in case you didn'tknow but there's a problemthere's a snake he's a bit questionableVoldemort is back again and he's put acurse on Harryand now Harry's trapped in the Internetall right cool this is Harry and he'strapped in the Internet if we don't savehim in the next going to kill himthis is badour friend Terry is gone and time isrunning out but there is a bit of goodnewsHarry speaks Parseltongue he can talk tosnakesand I'm sure as everyone here knowsParseltongue just so happens to be aturing-complete programming language soI'm gonna introduce you to pass it downassuming you don't already know it thisisn't important that it'll give you inthat area where we going so it's aweakly typed language it's a functionallanguage it's an interpreted languageit's a garbage plate to the language ithas significant whitespace so I kind oflike Python or something it has somevariable declarations and so here I'mgonna use javascript is a reference forall of us so on the Left we have someParseltongue hopefullyand on the left on the right sorry wehave some JavaScript there's only onetype of verbal we don't have to worryabout anythingconstantly or anything and they alwaysstart with obviously and you notice theassignment operator is that little arrowwith a squiggly next to it that comesback later too there's also functionexpressions again Parseltongue on theLeft JavaScript on the right you createit with kind of an array and then areturn to the parameters they're definedwith an array and return is also just asigning back out and you'll notice thesignificant whitespace you always haveto have that and in inside your block ofyour function we also have callexpressions so we can call a functionlike multiply you get a product out kindof looks how you expectand again arguments there to clearBerlin array so again we use theassignment operator to pass thearguments into the function and then toassign the result back out to a variableit has control flow so f is else f isand else's which is good and it lookslike they have in JavaScript so you cansee if you haven't gotten the argumentsyou function you just pass in the emptyin array head loops is a loop obviouslyand the range operator is just theassignment operator flip back the otherwayso all that comes together and allowsHarry to come up with big spells that hewrites in pass the time and on the rightyou can see the equivalent JavaScript sothis is a spell that we need to helpHarry use to break out of the internetand escape from Baltimore oh yeah alsothis is oh if you can't read that ifyou're at the front there's a magicalvariable called cast which is just somebig global and a base if it becomesalert you'll see why that's importantlater so we're gonna check on Harrywho's just hanging out here he's go tospell and if we run it we can't get whatwe'd expect oh no something zero andidentifier is because we just dumped abunch of parcels hang in the browser andexpected it to do something so againthis is hairy spell it's kind of prettybasic it assigns a variable for expectopatronumit makes a Patronus like we talked aboutbefore and we're just going to loop overa bunch of stuff and add a bunch ofexclamation marks to it so that he canyell it more vigorously and hopefullyescape the internet but obviouslyinternet browsers don't understandhassle time it's kind of the firstproblem we have to face will you run itand we just get an unexpected identifierso we somehow need to translate Harry'sParseltongue it's a JavaScript so we'regoing to do something like this startwith Parseltongue there's something inthe middle and we're going to end upwith JavaScript so how could we try tomake this work um regex is a reasonablesolution and we saw that this morningwhen passing out IDs let's have a go andsee what happens with itso to begin with we can kind of just goa line at a time we can pull down ourscript and we can just split it on a newline and that'll give us something likelike this not nothing too scary event ifwe wanted to start looking at convertinglike a variable declaration that we hadbefore we would just loop over each linewith the regex and try to match anythingthat kind of looks like a variableassignment and then we could just printout the JavaScript that is equivalent tothat at the bottom that's not too badit's kind of a reasonable thing to do atthat point you get what you expected atthe outcome so what about what about forloops that's pretty dark the the ridginghe gets a little bit more gnarlyyou kind of look for that thingand look for the operators and kind ofpull some stuff out and then you try toprint out some JavaScript and stuff kindof gets a little bit weird like you havethis dangling bracket at the end kind ofdon't know what blocks are or anythinglike that so it's not great it's stillkind of do something with this now butnot great and kind of the same thing forfunctions you can read them in run aregex over them and you end up in asimilar situation where you've just gotthis dangling dangling brace and therejecters are pretty horrible as well sokind of to sum it up you don't have apretty bad time but we can see what thatlooks likeso we run it and we kind of get someJavaScript out it's not actualJavaScript time and it definitely won'trun you can kind of see that if youtried really hard you might actually endup with something working there so we'regonna step back just a little bit andkind of ask a bit more of a metaquestion of like what we're reallytrying to do and we're trying totransform one language into another andthis is something we already do quite alot like it's a self problem I don'tknow if any of you use typescript orBabel or Elm sass CoffeeScript but theseare things that we already dotranspiling is quite a specific termit's not compiling and I asked Googleand Google said that transpilingis taking source code written in onelanguage and transforming it intoanother language that has a similarlevel of abstraction and so if we'rethinking about Parseltongue as likeJavaScript for snakes it's kind of asimilar level of abstraction just withsome weird syntax on top of it so wheredo we start let's look at someJavaScript now and we're gonna startlooking at some of the building blocksof JavaScript so that in the middlethere is a string literal I'm sure wehopefully know what those arewe have identifiers we have functioncalls and then the whole thing iswrapped up in an expression and I don'tknow if you noticed but I've been usingsome pretty specific terms for this likecall it's pression or variabledeclaration and that's because they havemeaning they're they're quite welldefined and they're well defined andthis thing called the es treespecification it's not a real spec it'skind of growing over the years aftersomeone at Mozilla whipped it up but itkind of defines how these bits of codeare made up and so if we have this bitof JavaScript code it can be convertedinto a structure like this history is ongithub you can look at some stuff withthem and then there's a tool calledesprima there are bunch of tools builton top of the history spec you'veprobably all use them but es prima isone of my favorite it gives us theability to pass a string of JavaScriptcode into a description of thosebuilding blocks and that is what's knownas the AST so super easy to use justgive it a string of stuff and up popsthis AST so what is an answer it's anabstract syntax tree this is also quitean abstract description of what that isso I went to Google and I looked forcool stuff about trees which wasn't veryhelpful and then I looked for cool stuffabout abstract syntax trees and I gotdown to what I think is a bit more of aunderstandable definition so an ast is adata structure that represents thestructure of code without any actualsyntax so for example if you have thisbit of JavaScript and this bit of somekind of list B language and this bit ofParseltongue they can all be describedby the same ast which is pretty coolso what that means think about it isthat if we can get from Parseltongue tona st we can get from Nasty toJavaScript so we tried this it was Imean we could've got its work if wereally tried really hard but let's try anew idea and see what that might looklike this is probably gonna be a couplemore steps involved here to figure themout let's go back to esprima for just asecond so what we really want to know iswhat javascript we want to end up withat the end because then we can justwrite it out ourselves in theory and soif we just kind of pipe it into esprimalike we did before with the javascriptwe can actually get out an ASTand so this prima is taking code that'swritten in a specific language in thiscase JavaScript and turning it into anAST and so we need to make our ownesprima kind of thing for parcels themso how do we do that that's a questionthankfully again it's a kind of solvedproblemyes prima does it obviously so under thehood all passes as these things arecalled doing three phases and the firstphase of this is a thing called lexingand the end result of that is going tobe tokens so lexing or tokenizing asit's sometimes called is the process ofbreaking down source code into wordsthat are relevant to that language whichthey're called tokens in JavaScript wehave tokens obviously so we haveidentifiers and keywords and literalsand punctuate errs into file as a tokenwe have regular expressions and we havetemplates in Parseltongue we kind ofhave the same thing the only maindifference here is that because we're aWeiss basically there be a language wehave tokens for the indentation and wehave tokens four spacesstuff like that so for any given chunkof Parseltongue such as this variabledeclaration we would go over itcharacter by character and see we've gotsome identified characters and then wego to space and we've got somepunctuated characters in another spacethe punctuate ER and the quote there's astring quote the punch Raider again andfor each of those we would build upthese tokens so any if we had hadsomething that wasn't meant to be therewe would throw in here and so we canapply that process to a whole passeltime spell so we can jump back over hereand see where that might look like sokind of ran some stuff we called theLexx function and we ended up with abunch of tokens so the kind of what youmight expect if you couldn't see thatyou know identify spaces and stringliterals and blind terminators and addmore identifiers all this kind of stuffso they're the chunks that make up thethings that we care about in thelanguage so we've already got sometokens and now we need to get you an ASTM again after lexing most passes theyuse a process which is that you'repassing step and passing is prettysimilar to mixing it's the process oftaking these lexical tokens as they'recalled and applying the grammar of thelanguage to them so instead of goingcharacter by characterwe now go token by token and try tobuild up things that actually matter toour language so again in the case of ourvariable declaration we would start withour identifier character and go yep weexpect that and then we'd expect a spaceand then that specific punctuate err sonow instead of just talking about theidea of a punctuate ER we're talkingabout specific ones we care about penisspace then a string literal and thatwould give us an ast like we have on theright hand side so you can kind of buildup that tree as you find these tokenskind of works similarly for a functiondeclarationso we have this magic function and wehave an identifier in a space then againspecific punctuate er another identifierkind of so on and so forth to the end ofa line and then we have our indent whichtells us that we own again in a correctamount of indentation for it to be validlanguage and we use that on that blockthat's really the indent to figure outwhere we are for the block of thisfunction so the correct sequence oftokens here would produce this followingAST the blocks comments out butbasically something like that so it'skind of most of it we should be able toget an AST nowso now instead of just calling Lex we'recalling Lex and then pass and we'veended up with us here program so you cansee we've got a variable declarationwhich is the string at the top thenwe've got the function declaration andthen we've got our four got our fourstatement which is for the loop sothat's pretty cool this is my favoritegift for the whole slideshow I don'tknow if it's from the movie but so wouldthat whole thing we kind of ended upwith something like this I'd only speakto you better see it but the generalthing is that you can see this treestructure and so there's no cycles oranything it's just this nice tree thatgoes in and then comes back out so nowwe just need to get from that ast and weneed to get back to JavaScript and soit's just cogeneration snip which kindof sounds pretty easy um but essentiallyyou're really really hard and I wouldn'treally want to try to do it myselfagain this is JavaScript so there's alibrary for that this is a library CodyAsche Oh Jim again really simple APItags in an ast and produces JavaScriptat the end that's pretty cool so all ofthat is working together we should beable to getsome JavaScript and so that is the spellthat we hit before transpired inJavaScript with the source map which youscare for free if you use this stuffwhich is pretty cool so we've got aspell and we've kind of turned it frompast clang into JavaScript and we kindof did a bunch of stuff so we startedwith Pascal Sun and we licks it and wegot some tokens and then we pass themand we got out an ast and then we useast and we generated some JavaScript andso we're actually almost ready to saveHarry we could just run us code and itwould do everything we hope in thebrowser and he'd be able get out but ohno Voldemort can also speak past thetime got a snake for Australia goodVoldemort is gonna try and stop Harryfrom escaping and he might even use theunforgivable functions so handily for usthese happen to be global functions inParseltongue because that's a gooddesign decision and these spells arereally bad so you can like just hurtsomeone or you can control their actionsor you could even kill them which is howtold them what would try to kill Harryso we need to come up with a way to stopBaltimore from using those functions sowe've kind of got this step in themiddle here now that we didn't expect tohave before but that's ok and we'regoing to do some inspecting how aboutAST so this to me is kind of the mostpowerful thing about a SDS and it's kindof the best trick of all so we cancompletely transform the AST we canvalidate that it looks a certain way wecan even mutate it and there are a bunchof tools that do stuff like this alreadyso you got like weird pack which is justpulling about your ASC code and wishingit back together in different waysyou've got your saloon which is kind oflooking at stuff and validating that youknow you haven't used debugger andproduction code or whatever you've gotprettier which is just like reformattingit in a nice way and it's all becausethey can kind of look at the ASC andthen do cool stuff with it and onceagain there's a library for thatso yes query is another really reallygreat one and it gives us a bunch oftools for querying the ast just like wewould the Dom it's on github so what wekind of want to do is we want to learnour code and we needed to take the badstuff the unforgivable functions so weneed to detect whenever Voldemort isusing one of them and then do somethingreasonable so a square lets us to writeour these kind of query expressions sohere we're looking for any callexpression which is the function callwhere the name of the corley the thingthat has beenold matches one of those three thingsand then we're going to grab theidentifier out of that and so if we comeacross any of those in a code we canjust go call the query function find anyof them and if we've got any weakness goblack now era you're not going to workthat's not going to happen but we canactually kind of go a step further andwe can actually fix some of the stuff sowe could take those unforgivablefunctions query for them and then justreplace the thing gets called with thisother spell rictusempra which is justthe tech linker which is a little bitbetter so let's check that we're safecool so we have Voldemort's pretty goodspell I guess and we're gonna run thatoh cool so now we have the originalparcel thing at the top we have ouralerts that happened and if we run thiswe should hopefully see three alerts ina row which is pretty greatand it means the hair is a bit safer sowe started with Parseltongue we lik setto get tokens we passed those tokensinto an AST we've been inspected thoseto the AST and we modified it then wepassed the ast that the code generatorand we ended up with some JavaScript sowe are now ready and they see if theycan all work together so if we rememberfrom before what we expect is HarryPotter to just scream expecto patronum anumber of times in the row with way moreexclamation marks each time if we hitrun cool so there's a debugger at thestart here because this is my final andmost amazing trick if I hit the nextthing I'm in a source map and now I'mdebugging and running Parseltongue inthe browser which is pretty funny[Applause]we didn't attorney and it happens awhole bunch of times a whole bunch oftimescool so we escaped that's great um wedid itHarry's safe another great gift look atthese cool old as well a game withcreepy old Harry now that kind of leavesus with a question like saving HarryPotter is all well and good but when youactually use these ASDs always so haveyou ever had to change every file inyour Kobus like we recently upgradedrxjs and we changed all of our filesfrom using their like in portableoperators to the paper ball ones and weuse the sts for that if you'd like togenerate a bunch of boilerplate codelike so if we've got a new feature thatwe're spinning up we'll spin up a moduleand some components and reducers andactions and we'll build them from an astand just modify them to set theparticular feature we're building orhave you ever had to like extract someinformation from from your code we wepull our component library apart and werip out all the inputs and outputs andthe dependency structure and we do allthat with a nasty as well if you've everdone anything like thatif you've ever passed a string youdownloaded from the internet to try toread an ad out of it you could andpossibly should use a nasty for thatit's a bit more robust than using origthey're really really really magicalbasically they kind of help us with awhole bunch of stuff like performance ifit's you know minification ormaintenance if it's code formatting oryou know stopping us using certainoperators or functions and their bufferrustles that comes along with that andthe consistency you know if you've gotone format for your whole code base theyhelp us with analyzing our code becausewe can you know pull out that API dataand my favorite thing is they help uswith a whole bunch of automation and abunch of really repetitive tasksso they're everywherethey're really powerful and they'reincredibly useful once you know how tofind themso thanks all of this is onlineyou're welcome to go and look at it it'sterrible code yeah thank you very muchyou
YouTube URL: https://www.youtube.com/watch?v=UKCoRKzRqN4


