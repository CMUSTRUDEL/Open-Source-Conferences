Title: Madlaina Kalunder - Building a raytracing engine with JavaScript
Publication date: 2018-04-11
Playlist: JSConf AU 2018
Description: 
	In this talk we will build a 3D ray tracer with Javascript. We learn about the basics of real time 3D graphics and what we need in order to produce realistic looking 3D graphics in the browser.

Itâ€™s fun to learn about 3D and graphics, plus seeing how a seemingly complex concept such as ray tracing can be broken down to simpler concepts is inspiring. I enjoyed the artistic aspect of using maths to make 3D objects appear in a browser - and demystifying it in the process of learning. I hope to show and inspire the audience to experiment.
Captions: 
	hello everyone I'm very excited to behere today all the way from Switzerlandto beautiful Australia and my first goalI already achieved I arrived here and Iam coming from winter so I'm very happythat I'm not red as a tomato right nowthankfully the weather is not that crazyso this is not cause my new friend thatI made with my Pakman circle I reallylove this analogy by the way it's reallyawesome as was already mentioned I'm agame designer working as a full-stackdeveloper at archaeologic we are startupfrom Zurich that is working with interiors and architecturalvisualization on the web and we arebasically working on a JavaScript webframework where you can use our models and your website I really really love gamesI like developing games I like playingboard games video games and that's whyI'm here today to talk to you aboutrender engines and the second goal isthat you come out of this talk and youknow a little bit more about you know how to get started if you wantto so this is more of a low I will talkwhere you will be able to learnhopefully yeah I really like travellingbut I have to say this has been a reallylong travel to come here I might have tochange this no it was really enjoyableso far so thank you so much again forhaving me so why would you want to do on the web I mean the web as it is nowit's really great we can do lots andlots of things why do we need first of all another dimension to the web that meansyou can also use this dimension toofor your advantage to show more thingsso this is a visualization that we madeand on top of this visualization wedon't only have a but we also have spatial data which wecan then use with our machine learningalgorithms to for example automaticallyfurnish your room and show you how youcould use this space that you have noteven thought about before or we can alsosee where where you which which is theroom you might want to use for differentthings or how the light is going toaffect your room it's not only that wecan also make a really amazing games onthe web it's and we can use all theadvantages of the native web that thatwe have which we could not do withapplications that are just standalone sothis is a really cool prototype that ADARose was doing in a very quick iterationso I was really it was really fun toplay it right you can also really dodata visualization so this is a datavisualization from busy cities and whatI really love about this is that you cannot only use the third dimension to soshow that in time but you can actuallyalso use it to show a progression overtime so you can use animation and otherinfographics to show these things so Idon't know how many of you haveexperience with working out with I myself was wondering how do we evenstart with so many numbers with wire frames we havepolygons we have textures so many newthings that we want to to use and how dowe even get started it's veryoverwhelming for for beginners I seebecause I have been working with gameprototypes with still a mystery to me and it's stillreally hard to help people to getstarted so my approach is a little bitdifferent yesterday we have heard lotsof talks about color and I reallyenjoyed that was actually it CSS comefrom sorry lots of color concepts and Iwant to go one step behind that so Iwant to talk about light and how weactually see so let's take a blank sceneand we add this this scene to it we havelike a little chair and we have we havea laptop standing on a desk we have someshelves but we have a window and outsideof the window we see the Sun and the Sunis shooting race or emitting rays untothe earth and what happens is this racecome in through the window and theystart bouncing off the first objectthat's in the scene and this light rayhas energy and the light is basicallygonna bounce until these energies youstop well what does this actually meanso light is electromagnetic waves withdifferent frequencies which make up thecolor so if you take away one frequencyor two frequencies you might get red orgreen but what do we actually see sowhat happens with the Rays only the racethat are hitting our eyes it areactually visualized on that on the backof our eyes so how does it happen thatdifferent objects have different colorsI'm gonna explain that a little bitlater as wellmaterial surfaces have this thing wherethey selectively absorb differentfrequencies of light or angee and they can also reflect thedelight or transmit it so for avisualization you could think aboutthese three different types and that's areally big abstraction so you havematerials like mirrors or watersorry mere mirrors or metals that are[Music]reflecting the light which means thatthey are uniformly reflecting the raceand through the uniform Ness you willactually be able to see your reflectionthen you have things like diffusematerials which are super chaotic andthey basically scatter the race allaround the place and you have propagatedlight so if you have a material likeglass or water the light will not onlyreflect off the surface but it willactually also transmitted through thesolid with these three different thingsso could somebody bring me some waterpleasethank you with these three things youcan already create such a big range ofmaterials and we have not even talkedabout the colors yet thank you so muchand I am I know this might seem a bitrandom but I'm explaining this to youbecause this is the problem I see withpeople that are starting it's not justif you get started with have to learn how to you are basically a movie directoryou're a light specialist a photographeryou have to use lots of design to to getto a point where you get some some niceresults you have to know aboutsonographyand lots lots of other things so it'sit's like a new new big box to takethings out of and I feel that that whenI explained to people these conceptsthey start to really understand what ismuch a reality how do we create arealistic looking know about these thingsso we have now the concept of light buthow do we capture this light on an imageand for that it's really cool to go backto the first cameras that have been madeand these are called pinhole cameraswhich most of you have probably heard ofand what happens is that we have one boxwith the tiny hole which basically onlyallows us one light ray to pass perpixel or in that case space on the filmand that's where the concept of raytracing is coming from so ray tracing isa really substantial rendering techniquethat has been around for a long time sothe first talks about ray tracingengines were actually at SIGGRAPH Ithink than I am that's I feel pretty it'spretty cool to see how long thistechnique actually has been aroundbecause if you think about computergraphics you think okay it's just been afew years since we have this GPUacceleration and no actually I think thefirst computer graphics animations havebeen rendered with ray tracing and othertechniques that I will show you a bitlater actually then took over and forreal-time computer graphics as for gamesbut Pixar is still using it's a mixedkind of a mixed thing but they're stillusing ray tracing as their primary wayof rendering so what is ray tracingactually if you think about the Sun andit's emitting billions and billionsof race at every tiny little microsecond that's lots and lots of rays thatare bouncing around all yeah okay notreally in this video because it's quitedark but that are bouncing around allover the place and if we would calculateall this race that would be a big lossbecause what I've said before is onlythe race that actually hit our eyes arethe ones that we can see so somebody wasreally smart and came up with theconcept of backwards rate racing so whatwe do is we go backwards from the eye orfrom the camera in this case and we gothrough the pixel and we shoot away fromour eyes into the scene and we see whichrays are going to hit a light source atthe end of them so these are considereda primary race we want to see what isthe the main object that gets hit thefirst one because that's the one that wewant to visualize and that's the beautyof ray tracing is that we actually havethis understanding of the scene so weknow what is the first thing we'rehitting and what we do is verysimplified we do a test is this point orthis point of the on top of the surfaceof the object is it directly in sunlightor is it obscured by another object sowhat happens is we hit the object andfrom the object we cast a second raybased on the reflection the cast issecond-rate there actually to the Sunthat's the simplified version rightsorry but gets a bit more complicatedsince we have talked about materialsbefore right so what happens whathappens actually on the surface of theobjectwhat if our surface is transmissive sowhat we want to doit's not directly check if the Sun ifthe point is in the Sun otherwise wejust get two values we get it's in thesong or not so what we actually want todo is we want to see how much of ourlight gets reflected and how much of ourlight gets refracted or gets transmittedthrough the solid and that's just amathematical equation that we can do andfrom there we're gonna see if it hitsanother object and then we go on and onand on and at the end we want to see ifwe hit a light source or not it's stillvery simplified so I would like to lookat some code that does this concept I'llgive you a minute to reallyyeah I think I think everybody got itright so what is a common challengewrong people who do computer graphics isto write the most compact ray tracingengine that could actually fit on abusiness cardso that's what people do in their freetime and I was giving this talk at Jayscome Iceland and right after me therewas Martin clapper doing a talk it wascalled Daedalus was fantastic talk andonly recommend it but what happened is Ithink he did show me an example that wasa fourth of this so please watch it it'sreally cool I was I was very impressedvery impressed so there was almost notyping involved I mean this is how Ifeel after two weeks of looking at mycode just don't understand anything solet's take this a little bit furtherdown and I took all the math out of thisbecause I think it's not reallysomething we should look at right nowit's gonna make it would add lots andlots of slides so first we want to thinkabout the concept of geometries there islots of primitive shapes that we candescribe mathematically and one of theeasiest shapes are spheres becausebasically what it needs to define fear asphere is the center and the radius andboom we have a sphere right coolso we're only going to do spheres forthe beginning what we also want todefine is the material so we want toknow what color does it have howtransparent is it and how reflective isit so what we wanted wanted to find forthis objects or for all our primitiveobjects that we're gonna program in thefuture is an intersection function sobasicallywe get the Ray the origin of the Ray andthe direction of the Ray and we do checkdoes it hit or does it not hit and if ithits we want to know on which twointersection points because there'salways two then we're going to have ourmain function where we define our scenethis is gonna be something you're gonnahave to do a lot is you place objects intheir scene and because we have asimplified version of a ray tracer weonly do spheres also our light source isgoing to be sphere now and then we havea frame buffer where we have for eachpixel we're gonna check and see we'regonna trace our race for each pixel andthen afterwards when we have all theimage data we're gonna render that to acanvas so this is how a trace functioncould look like and the cool thing isrecursive because we all love recursionwe take some we take all our scene inall the geometries we take the first raythe origin rate which is the incidentray that we have seen before and thedirection and then we also have deathbecause basically what I said in thebeginning we want to trace the Rayforever until it hits the Sun but thatcould take that could really take a longtime or sometimes maybe it doesn't evendo it so that's really a shame becausewe want to do this real time in thefuture so what we do is after the depthof recursion that we define maybe fivetimes we do the check if actually theobject is in shadow or in the Sun andwe're gonna do this for each lightsource in the scene and then we cancombine the values of the light sourcestogether andthat's where the physical correctness ofthe raytracer is gonna end so if youreally want to have physical correctnessyou would go for a path tracer that's awhole other box where you really shootthe race forever and see when they'regonna hit somethingwhere was I yeah so we're gonna find thenearest object our first object it'sgonna be hit and for that we're going toloop through all the geometries we dothe intersection test for all thegeometries and if we hit something goodif not we're just gonna return thebackground color of our scene if we dohit something we're gonna have to we'regonna have to see what object materialis it's there so if we have transparencyor reflection we have to continue thetest because the Ray is going to bounceoff so yeah we're gonna do we got into arecursion for each so we're gonna do areflection recursion and we're gonnacompute the refraction recursion and inthe end we're gonna put them togetherwith Renault and that's something I'mnot gonna explain it's really coolthough because it depends on where oursurface normal is so if we hit sorrythat was too early if we hit the objectit depends on what is the impact andwhere's the where is the surface normalpointing at and depending on that wekind of change how we calculate the twovalues of refraction and reflectionexactly so if we resolve the recursionin the end and we compute the valuestogether we're going to get the color ofthe pixel at that specific point andthis is what it's going to look like soit's really interesting we already havelots of things we have reflection wehave shadowsand these things come all for free withits rate tracing you're gonna see that'snot so easy with other renderingtechniques so I have already gottenahead of myself a little bit whatstrikes me or what was really cool inthis experiment is that everybody canget started really fast to actuallywrite a renderingokay so very little code we can do ourown render engine great but we're gonnavery fast run into lots of problems forexample what if we want more than justprimitive geometries that are but notmathematically defined what if we havemultiple light sources that we have toconsider in our calculation what if wehave more transition transmissivematerials or materials that aremulti-layered such as skin so it'ssomewhat transmissive but also it'smilky and get really interesting what ifwe want more physical correctness yeahwhat if we want to have more lightbounces and what if we want to avoidnoise in our scene because that'ssomething that we will always get withray tracing since it's basically onesample per pixel is not going to beenough we're gonna have to do lots andlots and lots of samples and add themtogether to get a really smooth imageokay so this leads me to two the secondrendering technique that's veryfundamental in computer graphics whichis rasterization and the interestingthing about rasterization is that it'sreally super fast and it can do lots ofthings but basically what is the conceptis that it's solving the visibilityproblem from a different perspectivewhile ray tracing is tracing from theeye to the objects in the scenerasterization is going the other wayaround so it takes the scene and it'sgoing to go from the scene to the eyewith perspective projection so what wedo is we justsickly flat map the whole scene onto ascreen space version of that and we areusing triangles for this becausetriangles are an ideal renderingprimitive it's planar that means wedon't have I guess we can always look atit in a we we cannot we cannot make them anysmaller we cannot add more surfaces toit so what we do is we map each triangleto screen space and then we're going torasterize over it and see which pixellays in what triangle and with the Cbuffer we're gonna see which of thetriangles are more in the front andwhich one are more in the back andthat's how we're gonna render it sothese are two really basicimplementations one is a basicrasterization implementation and thesecond image is a basic ray tracingimplementation and you can see that as Isaid before with ray tracing there'salready lots of things that you get forfreefor example the reflections Anttirealizing shadows soft shadows and allthese really cool things I thinkeverybody can see what is the qualitydifference so how are computer graphicssolving this because if you look atgames these days you're not gonna seethe top thing it's going to look reallynice with advanced implementation thereis you can actually fake a lots of thephysics but we're getting to a problemwhen it comes to transparency and waterand water simulation of fluids andthings like this so there is differencesray tracing is physically correctprovides us with high details it's supercomputational heavy and we don't knowyet or we will probably never know if wecan do it real timethere is some attempts and they aresuper cool so you should definitelycheck it outand ray-tracing gets really complexquite fast so you're probably not goingto work on a rate racing engine on yourown restoration is really fast so we cando it easily real time there's lots oftooling and hardware support so thatmeans the GPU is actually made tosupport your rasterization shaders andalgorithms it's physically incorrectbecause as you see we lose through theperspective projection we lose all theinformation about depth and actualobjects which is make it in flat andtherefore we lose quality of the imagehow do we do rasterization how could weget easily started saw before how to geteasily started with ray tracing but nowwe want to actually work withrasterization and get our scenestogether so this is where I want to giveyou this toolbox called a frame and it'sreally awesome because it's an HTMLcomponent based web framework fromMozilla basically you can define yourscene with HTML tags and attributes sofor example you can add your sky with animage reference or you can add renderingprimitives such as boxes spherecylinders etc by just defining positionswith and other things so colorsmaterials and you can add lights and thecool thing about a frame is it comeswith web VR support so you have all themajor headsets that are supported fromthe get-go which also means that youhave controller support so I could lookfor example like this it's really boringthough so what do we do with it I meanstill the primitives it's not veryexcitingthat's where the community comes in solots of people from the community havebeen writing components customcomponents that work super well and hereyou can see how we we would we wouldload such a component so it's justbasically loading a script source thefirst one is a frame that we have thatwe want to use then the second one is i/o is the framework we are working onthen we have some community exampleslike orbit controls which controls likean object that could go around somethingelse and we have an environmentcomponent which is really cool I'll showyou later what it looks likeso this is how our scene would forexample be defined we can use the customa frame components to load objects or todefine for example in the environment atthe bottom we could define presets thatwe want to be using and really quicklywith a few lines of code you getsomething like this you get a reallynice scene very dreamy you could justlay down and put your VR headset on andenjoy it and I have to say even if youare not familiar with don't have to it's it's really a bigoverhead to get started with modelingit's like I know that from my from mylearning it it's really a hard and steeplearning curve so this is way more funto get started and then you can see ifthat's something you would like tointegrate in your product or if you wantto just get started and try to work withit which leads me to the problem ofwhere do I get my content from what do IdoI don't I can't do know where to get proper resources fromand also I don't know what is actuallygood a good bad oneand there we have a few things that youcan do so for example this is a framesinspector which is also something that Ican really highly recommend comes with aframe so you actually have a inspector where you can place yourobjects and one of my co-workers waswriting this plugin where I can load models from google pollyor from our from our library andhopefully later on much more curatedcontent and you can just drag and dropthem in your scene and then copy theattributes into your HTML because it'sHTML based you can also just useJavaScript to animate any of the of theattributes you want and as you see hereyou can even just define an animationfor line you could just add an animationto any entity in your scene without anyJavaScript sorryscript folks you don't need it but youcan make it much cooler because you canthen make interactive things so I wouldlike to wrap this up take away foreverybody that gets started is yourmulti models matter your materialsmatter a lot because if you don't defineyour materials properly you're gonnalose lots and lots of quality of yourproduct so your scene might look reallyplanned it might look gray it does notget interesting when you interact withlightsso please please remember this and alsoyour lighting matters so if you defineyour lights wrong in your scene it'sgonna look really flat and sadly I don'thave the time to make a littleintroduction of that but if you'recurious just come to me later and we canhave a look at it also ray tracing isreally cool I really love doing raytracing but it is still not ready Ithink to be used in real timehowever you can use the you can use raytracing engines to pre-computerealistic lights so if you remember thescene from the beginning there wasactually a light map baked into themodel which means we have textures thatcontain the light information from a raytracing engine that has been doing thiscomputation for like an hour or so andthat's something that we also offer inour product that's something I amworking on is that we take a generic model and we take the generic lightsetup that you choose and we basicallybake it in your scene statically theseare techniques from computersorry game development that are reallygoing to be helpful for the web they areseen and for everybody who works withweb we are so for that thank you verymuch for your attention and echidnas areawesome there are my new favoriteanimals thank you so much for having meand this is how to get started[Applause]you
YouTube URL: https://www.youtube.com/watch?v=4W06d_kcafE


