Title: Nicolas Gallagher - Adaptation and Components
Publication date: 2014-04-29
Playlist: CSSConf Australia 2014 Talks
Description: 
	Nicolas Gallagher's CSSConf Australia 2014 presentation Adaptation and Components.

http://2014.cssconf.com.au/
http://2014.cssconf.com.au/news/introducing-nicolas-gallagher/
https://twitter.com/necolas
http://nicolasgallagher.com/
Captions: 
	00:00:00,030 --> 00:00:03,360
hey so I'm just gonna get straight into

00:00:01,829 --> 00:00:04,680
it because I'm not really sure if I'll

00:00:03,360 --> 00:00:07,649
make it all time so I'm going to talk

00:00:04,680 --> 00:00:09,330
about adaptation and components and

00:00:07,649 --> 00:00:12,330
components more like in the abstract

00:00:09,330 --> 00:00:13,980
rather than web components and this is

00:00:12,330 --> 00:00:15,929
basically kind of where I'm at in terms

00:00:13,980 --> 00:00:19,680
of thinking about designing and

00:00:15,929 --> 00:00:22,800
developing web interfaces and I'll touch

00:00:19,680 --> 00:00:24,779
on like very briefly at the end some an

00:00:22,800 --> 00:00:27,240
opinionated set of tools that I like to

00:00:24,779 --> 00:00:30,320
use that are kind of designed for the

00:00:27,240 --> 00:00:32,279
building applications out of components

00:00:30,320 --> 00:00:34,160
so it's useful to think about the

00:00:32,279 --> 00:00:37,469
difference between change and adaptation

00:00:34,160 --> 00:00:38,640
so changes just simply something going

00:00:37,469 --> 00:00:40,410
from one state to another like they're

00:00:38,640 --> 00:00:41,790
becoming different whereas adaptation

00:00:40,410 --> 00:00:44,460
tends to be a bit more specific it's

00:00:41,790 --> 00:00:46,500
about making something suitable for a

00:00:44,460 --> 00:00:48,960
new use or purpose so you can think

00:00:46,500 --> 00:00:51,809
about updation as a type of change but

00:00:48,960 --> 00:00:55,860
that results in a difference that is

00:00:51,809 --> 00:00:58,710
better suited to new conditions an

00:00:55,860 --> 00:01:01,379
adaptation itself encompasses being both

00:00:58,710 --> 00:01:03,930
adaptable and adaptive and adaptive is

00:01:01,379 --> 00:01:05,729
along the lines of you have a system

00:01:03,930 --> 00:01:07,770
that adapts automatically to you to use

00:01:05,729 --> 00:01:10,140
as let's say so if I come to your

00:01:07,770 --> 00:01:11,909
website and I'm a new user you might

00:01:10,140 --> 00:01:14,460
display a module that prompts me to

00:01:11,909 --> 00:01:15,630
import my address book if I start

00:01:14,460 --> 00:01:16,860
interacting with a site in a certain way

00:01:15,630 --> 00:01:19,470
you might surface some modules over

00:01:16,860 --> 00:01:21,299
others and try and be adaptive in a

00:01:19,470 --> 00:01:23,670
sense of just adjusting to the way that

00:01:21,299 --> 00:01:27,000
I'm using your your application whereas

00:01:23,670 --> 00:01:28,920
being adaptable is the ability to adapt

00:01:27,000 --> 00:01:31,259
the system itself so that you can

00:01:28,920 --> 00:01:33,810
respond to environmental changes that's

00:01:31,259 --> 00:01:35,850
cool so that way you can make sure that

00:01:33,810 --> 00:01:39,540
your system can change from one point to

00:01:35,850 --> 00:01:41,009
another in a way that is this better and

00:01:39,540 --> 00:01:43,259
adaptable systems is basically going to

00:01:41,009 --> 00:01:47,040
be kind of what I'm going to focus on

00:01:43,259 --> 00:01:50,189
over adaptive stuff so this is like a

00:01:47,040 --> 00:01:51,540
really basic diagram that I tried to put

00:01:50,189 --> 00:01:53,579
together to show you the difference

00:01:51,540 --> 00:01:55,290
between or thinking about your

00:01:53,579 --> 00:01:58,170
application from one point in time to

00:01:55,290 --> 00:01:59,189
another and how it changes over time and

00:01:58,170 --> 00:02:01,770
it would change over time because you

00:01:59,189 --> 00:02:04,049
need to adapt to changing conditions and

00:02:01,770 --> 00:02:05,969
those might be you looking for the

00:02:04,049 --> 00:02:07,590
optimal experience in your application

00:02:05,969 --> 00:02:10,349
so it's really unlikely that you'd hit

00:02:07,590 --> 00:02:12,300
in your first release the optimal user

00:02:10,349 --> 00:02:13,090
experience or the best way to present

00:02:12,300 --> 00:02:15,340
your information

00:02:13,090 --> 00:02:17,739
so you have to change over time to sort

00:02:15,340 --> 00:02:19,810
of head towards that local Maxima you

00:02:17,739 --> 00:02:21,819
also have to adjust to user expectations

00:02:19,810 --> 00:02:23,590
and that's kind of that's a complicated

00:02:21,819 --> 00:02:24,720
thing that changes whether or not you're

00:02:23,590 --> 00:02:27,160
making any changes to your application

00:02:24,720 --> 00:02:29,140
because if I'm using many different

00:02:27,160 --> 00:02:31,480
types of application depending on the

00:02:29,140 --> 00:02:32,860
qualities that they have the the

00:02:31,480 --> 00:02:34,900
relative merits of your application

00:02:32,860 --> 00:02:36,849
changes in my mind so if everyone starts

00:02:34,900 --> 00:02:39,129
making faster apps and your app is like

00:02:36,849 --> 00:02:40,660
doesn't change its speed then relative

00:02:39,129 --> 00:02:42,400
to everyone else your app gets

00:02:40,660 --> 00:02:44,379
effectively slower and so it might

00:02:42,400 --> 00:02:46,209
perceived my perception of the quality

00:02:44,379 --> 00:02:47,579
of our application degrades so you have

00:02:46,209 --> 00:02:49,780
to be able to adjust to that as well

00:02:47,579 --> 00:02:51,430
then you'll also have to change to the

00:02:49,780 --> 00:02:53,799
platform that you've built upon so if

00:02:51,430 --> 00:02:55,329
you're building Android apps then when

00:02:53,799 --> 00:02:57,280
the Android platform changes you will

00:02:55,329 --> 00:02:59,170
probably also want to kind of stay like

00:02:57,280 --> 00:03:01,150
roughly in line with that and as a web

00:02:59,170 --> 00:03:04,329
platform evolves and we tend to make

00:03:01,150 --> 00:03:06,400
adjustments based on that as well you

00:03:04,329 --> 00:03:08,829
also need to respond to your competitors

00:03:06,400 --> 00:03:10,810
so if that involves stealing from them

00:03:08,829 --> 00:03:13,620
like in their kind of Picasso sense of

00:03:10,810 --> 00:03:15,129
like taking a core idea and adapting it

00:03:13,620 --> 00:03:17,709
because they're also going to be

00:03:15,129 --> 00:03:19,120
stealing from you and also attempting to

00:03:17,709 --> 00:03:22,540
stay like one step ahead so kind of

00:03:19,120 --> 00:03:23,829
making educated assessments about where

00:03:22,540 --> 00:03:24,880
you should be going and trying to make

00:03:23,829 --> 00:03:27,190
sure that you get there so you're not

00:03:24,880 --> 00:03:28,209
just in a state for pesci responding to

00:03:27,190 --> 00:03:29,769
what other people are doing but you're

00:03:28,209 --> 00:03:31,989
actually trying to kind of steer things

00:03:29,769 --> 00:03:34,060
in a certain direction and to some

00:03:31,989 --> 00:03:35,349
degree as well what changes to the

00:03:34,060 --> 00:03:37,120
makeup of your team so your human

00:03:35,349 --> 00:03:39,849
organization if you have new people

00:03:37,120 --> 00:03:40,989
coming in or even if you're just

00:03:39,849 --> 00:03:42,220
changing the way that people work

00:03:40,989 --> 00:03:43,630
together their responsibilities the way

00:03:42,220 --> 00:03:45,400
the teams are broken up that all has an

00:03:43,630 --> 00:03:47,230
effects on the application but the way

00:03:45,400 --> 00:03:49,930
that you structure your company does

00:03:47,230 --> 00:03:51,720
have does have an effect on on what you

00:03:49,930 --> 00:03:54,069
end up getting out in front of people so

00:03:51,720 --> 00:03:55,000
whether you're making changes or not

00:03:54,069 --> 00:03:57,940
like whether you're adapting your

00:03:55,000 --> 00:04:00,280
application or not the kind of the

00:03:57,940 --> 00:04:02,319
effective system boundaries are changing

00:04:00,280 --> 00:04:04,269
anyway because of the fact that like the

00:04:02,319 --> 00:04:05,889
boundary is not it's not like an

00:04:04,269 --> 00:04:07,870
absolute thing is dependent on the

00:04:05,889 --> 00:04:09,099
outside conditions to you so even if you

00:04:07,870 --> 00:04:10,870
do nothing the fact that all the outside

00:04:09,099 --> 00:04:13,180
conditions are changing means that your

00:04:10,870 --> 00:04:15,010
boundary is and kind of knowing whether

00:04:13,180 --> 00:04:17,139
the system boundary is is not an easy

00:04:15,010 --> 00:04:19,180
task but it's pretty important to do so

00:04:17,139 --> 00:04:21,159
because if you have no real idea of like

00:04:19,180 --> 00:04:24,010
roughly whether the like of the failure

00:04:21,159 --> 00:04:25,479
boundary is then you might spend a lot

00:04:24,010 --> 00:04:26,720
of time crossing that failure boundary

00:04:25,479 --> 00:04:29,509
and share

00:04:26,720 --> 00:04:31,009
broken codes like broken user experience

00:04:29,509 --> 00:04:33,110
to people and not realizing that you're

00:04:31,009 --> 00:04:35,629
doing it so the overall quality of your

00:04:33,110 --> 00:04:37,220
application like the grades on the other

00:04:35,629 --> 00:04:38,840
hand if you're too far away from from

00:04:37,220 --> 00:04:41,210
from the failure line then you're

00:04:38,840 --> 00:04:42,379
operating inefficiently I suppose you're

00:04:41,210 --> 00:04:43,970
not really squeezing the most out of the

00:04:42,379 --> 00:04:45,409
system that you have you're too far

00:04:43,970 --> 00:04:46,759
within the bounds of safety so you want

00:04:45,409 --> 00:04:48,349
to be you want to know like roughly

00:04:46,759 --> 00:04:51,289
where where you can push the system to

00:04:48,349 --> 00:04:54,020
its limits so the ability to move

00:04:51,289 --> 00:04:59,870
quickly and predictably is a major

00:04:54,020 --> 00:05:02,120
competitive advantage and so while most

00:04:59,870 --> 00:05:04,750
people will have like accepted that

00:05:02,120 --> 00:05:07,130
scientific method is a good way of

00:05:04,750 --> 00:05:09,440
determining which changes you're making

00:05:07,130 --> 00:05:11,659
a good and again good as like a

00:05:09,440 --> 00:05:12,860
subjective thing in some cases but you

00:05:11,659 --> 00:05:14,000
know you might have some some key goals

00:05:12,860 --> 00:05:16,099
that you have like I want to increase

00:05:14,000 --> 00:05:17,509
revenue I want to increase the number of

00:05:16,099 --> 00:05:19,550
time the amount of time that people

00:05:17,509 --> 00:05:20,840
spend on the site and perhaps like

00:05:19,550 --> 00:05:22,759
referrals whatever you might have these

00:05:20,840 --> 00:05:24,620
like these key indicators are you're

00:05:22,759 --> 00:05:26,419
looking for and the scientific method is

00:05:24,620 --> 00:05:29,150
a way of like making sure that you have

00:05:26,419 --> 00:05:30,860
like evidence to make you make more

00:05:29,150 --> 00:05:32,569
informed decisions but you also need to

00:05:30,860 --> 00:05:33,940
be able to adapt in time so you need to

00:05:32,569 --> 00:05:37,099
make those changes within a certain

00:05:33,940 --> 00:05:38,419
temporal window so you can still adapt

00:05:37,099 --> 00:05:40,400
your application but if you adapt too

00:05:38,419 --> 00:05:41,919
slowly your you might be dead before you

00:05:40,400 --> 00:05:44,240
have a chance to make the change

00:05:41,919 --> 00:05:47,840
so adapting within the certain time

00:05:44,240 --> 00:05:49,039
threshold is difficult because you're

00:05:47,840 --> 00:05:51,139
not really sure exactly how much time

00:05:49,039 --> 00:05:52,669
you have but perhaps one of the few

00:05:51,139 --> 00:05:54,110
assumptions you can make is that if

00:05:52,669 --> 00:05:56,719
someone else can adapt faster than you

00:05:54,110 --> 00:05:58,430
it might be detrimental to you and your

00:05:56,719 --> 00:06:00,680
your application and like all of you who

00:05:58,430 --> 00:06:02,750
are working on something so you're kind

00:06:00,680 --> 00:06:06,199
of just aiming to be at least as fast as

00:06:02,750 --> 00:06:07,400
everyone else and preferably faster the

00:06:06,199 --> 00:06:08,960
other thing is like internally as soon

00:06:07,400 --> 00:06:11,779
as it takes a lot of time to make

00:06:08,960 --> 00:06:13,099
changes then what tends to happen at

00:06:11,779 --> 00:06:15,289
least in my experience is the

00:06:13,099 --> 00:06:18,020
bureaucratic structure manifests in

00:06:15,289 --> 00:06:20,360
order to decide which changes to invest

00:06:18,020 --> 00:06:22,250
in because because it's not cheap to

00:06:20,360 --> 00:06:25,250
make a change it means that there has to

00:06:22,250 --> 00:06:27,319
be like a lot of decision-making arounds

00:06:25,250 --> 00:06:29,270
if we only have like X amount of money

00:06:27,319 --> 00:06:30,740
then how do we divide that up over time

00:06:29,270 --> 00:06:33,229
and how do we make a decision on like

00:06:30,740 --> 00:06:35,479
who - who - put the money on so the

00:06:33,229 --> 00:06:37,219
easier it is to adapt the the less

00:06:35,479 --> 00:06:38,690
bureaucracy you have around trying to

00:06:37,219 --> 00:06:40,550
decide ahead of time before you have

00:06:38,690 --> 00:06:42,440
perhaps enough information to know

00:06:40,550 --> 00:06:46,039
like roughly what's going to be a

00:06:42,440 --> 00:06:48,889
valuable change and so anything that

00:06:46,039 --> 00:06:50,720
affects the ability to adapt is is worth

00:06:48,889 --> 00:06:53,599
serious critical assessment to determine

00:06:50,720 --> 00:06:54,860
if it's required and if it's not then

00:06:53,599 --> 00:06:57,440
you want to kind of get rid of it and if

00:06:54,860 --> 00:06:58,280
it is then at least you know it is and

00:06:57,440 --> 00:07:01,190
one of the things that affects your

00:06:58,280 --> 00:07:03,410
ability to adapt its complexity and

00:07:01,190 --> 00:07:05,030
complexity is is different but it's not

00:07:03,410 --> 00:07:07,520
to be confused with difficulty its

00:07:05,030 --> 00:07:08,840
complexity is so difficult is a relative

00:07:07,520 --> 00:07:10,819
thing something that might be difficult

00:07:08,840 --> 00:07:12,710
for me might be easy for you but

00:07:10,819 --> 00:07:15,229
complexity is like a measure of

00:07:12,710 --> 00:07:16,820
entanglement so if you have many parts

00:07:15,229 --> 00:07:18,919
of your system the complexity is how

00:07:16,820 --> 00:07:20,120
tightly interwoven they are how much to

00:07:18,919 --> 00:07:21,680
change one part of the system you have

00:07:20,120 --> 00:07:23,720
to be aware of like the rest of the

00:07:21,680 --> 00:07:25,130
system and a simpler system is one in

00:07:23,720 --> 00:07:26,870
which I can make a change to an isolated

00:07:25,130 --> 00:07:29,660
part without having to build up the

00:07:26,870 --> 00:07:32,000
entire system in my mind and equally

00:07:29,660 --> 00:07:33,470
sometimes making adaptations itself

00:07:32,000 --> 00:07:35,300
results in complexity if your system

00:07:33,470 --> 00:07:37,669
isn't really designed to take

00:07:35,300 --> 00:07:39,949
adaptability if your system isn't

00:07:37,669 --> 00:07:42,099
designed with adaptability in mind then

00:07:39,949 --> 00:07:44,419
you have to spend a lot of time

00:07:42,099 --> 00:07:45,500
assembling like the entire structure of

00:07:44,419 --> 00:07:48,050
the system in your mind before you can

00:07:45,500 --> 00:07:49,270
make changes and in my experience one of

00:07:48,050 --> 00:07:51,889
the things that sets you up for

00:07:49,270 --> 00:07:53,720
complexity is technology type as an

00:07:51,889 --> 00:07:55,460
organizing principle and so a lot of

00:07:53,720 --> 00:07:56,990
people will just start projects like

00:07:55,460 --> 00:07:59,360
this effectively where you have

00:07:56,990 --> 00:08:01,520
directories for CSS for JavaScript for

00:07:59,360 --> 00:08:04,400
templates and for unit tests and any

00:08:01,520 --> 00:08:06,820
other like asset type perhaps and in

00:08:04,400 --> 00:08:10,270
this like idealized example every box is

00:08:06,820 --> 00:08:13,430
a file and every letter is a module so

00:08:10,270 --> 00:08:16,580
here like module C is split across

00:08:13,430 --> 00:08:18,979
multiple directories so you have a kind

00:08:16,580 --> 00:08:20,449
of loosely defined concept of what

00:08:18,979 --> 00:08:22,969
module C is and it's kind of spread out

00:08:20,449 --> 00:08:25,009
throughout the code base and so the in

00:08:22,969 --> 00:08:26,630
reality what ends up happening is that

00:08:25,009 --> 00:08:28,940
you get this entanglement of modules in

00:08:26,630 --> 00:08:31,550
each technology layer so because it's

00:08:28,940 --> 00:08:34,039
really easy to do this it just happens

00:08:31,550 --> 00:08:36,829
so you might get a single file that has

00:08:34,039 --> 00:08:38,450
multiple modules in it or certain

00:08:36,829 --> 00:08:40,490
modules and become entangled just

00:08:38,450 --> 00:08:42,680
through without really even wanting them

00:08:40,490 --> 00:08:43,700
to be they just they just kind of do and

00:08:42,680 --> 00:08:46,990
while this is mitigated a bit in

00:08:43,700 --> 00:08:50,150
JavaScript such as I can much more solid

00:08:46,990 --> 00:08:52,130
kind of like programming interface and

00:08:50,150 --> 00:08:54,930
everything than CSS does it's a big

00:08:52,130 --> 00:08:56,880
problem in the HTML and CSS

00:08:54,930 --> 00:08:58,710
and Jos pool which spool ski called this

00:08:56,880 --> 00:09:01,950
leaky abstraction released these coins

00:08:58,710 --> 00:09:04,800
with it with a leaking with he is

00:09:01,950 --> 00:09:06,030
credited with coining that term and so

00:09:04,800 --> 00:09:08,390
he says like all non-trivial

00:09:06,030 --> 00:09:10,500
applications are to some degree leaky

00:09:08,390 --> 00:09:11,460
but if we can limit how leaky the

00:09:10,500 --> 00:09:12,870
abstractions that we use in the

00:09:11,460 --> 00:09:15,600
applications are then that's a good

00:09:12,870 --> 00:09:17,130
thing because developers depend on the

00:09:15,600 --> 00:09:19,350
abstractions that we put into the system

00:09:17,130 --> 00:09:22,590
but if the implementation leaks out of

00:09:19,350 --> 00:09:25,140
like the con if the the the abstraction

00:09:22,590 --> 00:09:27,180
itself is not encapsulated that you have

00:09:25,140 --> 00:09:29,160
no soft encapsulation then can become a

00:09:27,180 --> 00:09:32,100
source of complexity and an example of

00:09:29,160 --> 00:09:34,380
this is this is just a piece of HTML for

00:09:32,100 --> 00:09:37,440
a user module and inside the user module

00:09:34,380 --> 00:09:39,630
there's a button module and an avatar

00:09:37,440 --> 00:09:42,030
you'll see that they're kind of the

00:09:39,630 --> 00:09:44,100
implementations are exposed so if I just

00:09:42,030 --> 00:09:45,360
look at the Avatar itself and there's

00:09:44,100 --> 00:09:46,710
it's really easy for someone to just

00:09:45,360 --> 00:09:48,660
make a change like this and add a new

00:09:46,710 --> 00:09:51,510
class like inside the implementation

00:09:48,660 --> 00:09:52,890
detail of of the Avatar and avatars are

00:09:51,510 --> 00:09:56,370
quite trivial example but it seems you

00:09:52,890 --> 00:09:58,290
have more notes to realize a part of

00:09:56,370 --> 00:10:00,120
your application then the chances that

00:09:58,290 --> 00:10:02,430
someone weaves a class through something

00:10:00,120 --> 00:10:05,460
that you were hoping was like defined in

00:10:02,430 --> 00:10:08,400
one place implementation becomes much

00:10:05,460 --> 00:10:10,230
higher simply because there's just like

00:10:08,400 --> 00:10:12,060
a really soft boundary that it's very

00:10:10,230 --> 00:10:13,410
easy to cross there's nothing really

00:10:12,060 --> 00:10:15,750
stopping someone from doing it so it

00:10:13,410 --> 00:10:19,050
just happens and you get a similar

00:10:15,750 --> 00:10:20,220
problem in your CSS as well which is so

00:10:19,050 --> 00:10:22,680
you have these three modules and you've

00:10:20,220 --> 00:10:25,350
got Avatar the Avatar class exists and

00:10:22,680 --> 00:10:26,880
all of them and while the top the top

00:10:25,350 --> 00:10:28,260
one there is like the Avatar module it's

00:10:26,880 --> 00:10:31,740
really hard to know whether the avatar

00:10:28,260 --> 00:10:33,330
inside tweet and user is just a

00:10:31,740 --> 00:10:35,640
modification of the existing avatar or

00:10:33,330 --> 00:10:38,460
whether the implementation of tweet or

00:10:35,640 --> 00:10:40,170
user just happens to have an element

00:10:38,460 --> 00:10:41,700
that it's that they're using the Avatar

00:10:40,170 --> 00:10:44,160
class on and someone just didn't realize

00:10:41,700 --> 00:10:45,240
that they've been introduced or they've

00:10:44,160 --> 00:10:48,840
kind of Club it's someone else's

00:10:45,240 --> 00:10:51,180
namespace in effect like the avatar now

00:10:48,840 --> 00:10:51,630
can style many things in many different

00:10:51,180 --> 00:10:53,070
places

00:10:51,630 --> 00:10:55,140
and it gets worse as you start to

00:10:53,070 --> 00:10:56,940
compose those components as well because

00:10:55,140 --> 00:10:59,040
if I decide to put this user card inside

00:10:56,940 --> 00:11:00,630
of a tweet then I now have between which

00:10:59,040 --> 00:11:03,870
has an avatar which now has like a user

00:11:00,630 --> 00:11:05,580
which also has an avatar element inside

00:11:03,870 --> 00:11:06,810
of it and trying to work out the order

00:11:05,580 --> 00:11:07,860
in which everything should be loaded and

00:11:06,810 --> 00:11:09,570
who actually owns what

00:11:07,860 --> 00:11:11,459
and whether the avatar inside one

00:11:09,570 --> 00:11:14,100
component is the same as an avatar in

00:11:11,459 --> 00:11:15,480
isolation just becomes very difficult to

00:11:14,100 --> 00:11:18,630
understand because of the complexity

00:11:15,480 --> 00:11:20,610
that you start reducing everyone so I

00:11:18,630 --> 00:11:23,070
think just using modules isn't enough

00:11:20,610 --> 00:11:25,529
basically if you still try to break

00:11:23,070 --> 00:11:27,329
things up as modules you can you can end

00:11:25,529 --> 00:11:30,209
up with a lot of complexity because you

00:11:27,329 --> 00:11:32,070
don't have you can't isolate the

00:11:30,209 --> 00:11:34,019
implementation so you still end up with

00:11:32,070 --> 00:11:35,850
JavaScript and CSS modules but because

00:11:34,019 --> 00:11:37,260
of the fact that they're all just kind

00:11:35,850 --> 00:11:39,180
of spread out throughout directories

00:11:37,260 --> 00:11:41,160
based on technology type there's nothing

00:11:39,180 --> 00:11:42,120
that really enforces these are all of

00:11:41,160 --> 00:11:45,950
the assets that are required to

00:11:42,120 --> 00:11:45,950
implement this part of the of the system

00:11:47,300 --> 00:11:51,810
so if you move away from organization

00:11:49,649 --> 00:11:54,300
based on technology type in consider

00:11:51,810 --> 00:11:56,730
that we're building UI widgets that need

00:11:54,300 --> 00:11:59,370
multiple asset types and let to build

00:11:56,730 --> 00:12:00,420
something like a tweet there's there's

00:11:59,370 --> 00:12:02,459
many different assets that you'll need

00:12:00,420 --> 00:12:05,550
in like JavaScript CSS some templating

00:12:02,459 --> 00:12:08,339
probably maybe some static images then

00:12:05,550 --> 00:12:11,399
you start thinking about how components

00:12:08,339 --> 00:12:14,100
are more useful like primary unit of

00:12:11,399 --> 00:12:15,300
scale in the application and a component

00:12:14,100 --> 00:12:18,120
at least the way I'm going to define it

00:12:15,300 --> 00:12:20,370
is a module that encapsulates a set of

00:12:18,120 --> 00:12:22,589
related functions which can include like

00:12:20,370 --> 00:12:24,180
behavior presentation and the logic that

00:12:22,589 --> 00:12:26,820
determines when certain presentation is

00:12:24,180 --> 00:12:28,320
displayed and so component based

00:12:26,820 --> 00:12:31,769
software engineering is based around the

00:12:28,320 --> 00:12:33,959
idea of assembling and configuration

00:12:31,769 --> 00:12:36,269
configuring prefabricated components and

00:12:33,959 --> 00:12:38,070
a pre fabricated component is more than

00:12:36,269 --> 00:12:40,170
just CSS it's everything that you need

00:12:38,070 --> 00:12:41,430
to create that widget so you end up with

00:12:40,170 --> 00:12:43,949
something like this where you might have

00:12:41,430 --> 00:12:45,930
a directory for your component a which

00:12:43,949 --> 00:12:49,110
has all of the asset types that you need

00:12:45,930 --> 00:12:50,820
and then B has the same setup CD and

00:12:49,110 --> 00:12:53,459
then you just have a big pile of

00:12:50,820 --> 00:12:55,949
components in your in your directory

00:12:53,459 --> 00:12:59,100
structure where each one is effectively

00:12:55,949 --> 00:13:00,690
on the file system as well kind of

00:12:59,100 --> 00:13:04,199
isolated which makes it much more

00:13:00,690 --> 00:13:05,339
obvious when you're using classes and

00:13:04,199 --> 00:13:08,430
things like that they don't belong in

00:13:05,339 --> 00:13:09,570
one component in another in one of the

00:13:08,430 --> 00:13:12,570
characteristics of components is that

00:13:09,570 --> 00:13:15,360
there are simpler abstraction than using

00:13:12,570 --> 00:13:17,040
and just having like just modules are

00:13:15,360 --> 00:13:19,829
not really a concept of how you assemble

00:13:17,040 --> 00:13:21,779
all the technologies into one and simple

00:13:19,829 --> 00:13:23,490
is again like complex it's not

00:13:21,779 --> 00:13:27,149
same thing as easy easy as another

00:13:23,490 --> 00:13:29,639
subjective thing whereas simple is about

00:13:27,149 --> 00:13:32,249
like a lack of complexity or a lack of

00:13:29,639 --> 00:13:35,129
entanglement between different parts of

00:13:32,249 --> 00:13:39,779
the system it's about like a not knowing

00:13:35,129 --> 00:13:41,279
about how B is made and just basically

00:13:39,779 --> 00:13:45,749
using the interface that a component

00:13:41,279 --> 00:13:47,779
provides so the consuming component

00:13:45,749 --> 00:13:50,430
doesn't have to know anything about how

00:13:47,779 --> 00:13:51,420
one of your widgets is is implemented it

00:13:50,430 --> 00:13:53,850
just needs to know what are the

00:13:51,420 --> 00:13:56,699
configuration options and how do I use

00:13:53,850 --> 00:13:58,769
it basically and so the other thing

00:13:56,699 --> 00:14:00,319
about components is that they're easy to

00:13:58,769 --> 00:14:02,730
configure and they're composable so a

00:14:00,319 --> 00:14:05,430
compositional model is effectively that

00:14:02,730 --> 00:14:07,499
I can take a component in a UI and then

00:14:05,430 --> 00:14:10,350
I can bed other components within it so

00:14:07,499 --> 00:14:12,360
I might build up say like a tweet box

00:14:10,350 --> 00:14:15,180
will be built up out of a rich text

00:14:12,360 --> 00:14:17,240
editor component button component may be

00:14:15,180 --> 00:14:19,529
your avatar and then I'll talk about

00:14:17,240 --> 00:14:21,089
that's just like its own implementation

00:14:19,529 --> 00:14:22,649
detail but then it can also put other

00:14:21,089 --> 00:14:24,749
components within it in the same way

00:14:22,649 --> 00:14:26,100
that you can when you open a div and you

00:14:24,749 --> 00:14:27,660
can put other elements inside it there's

00:14:26,100 --> 00:14:31,439
like a compositional model going on

00:14:27,660 --> 00:14:33,240
there so it's desirable to build like

00:14:31,439 --> 00:14:34,470
complex systems like this or to build

00:14:33,240 --> 00:14:43,279
systems like this because it helps you

00:14:34,470 --> 00:14:45,500
to limit avoidable complexity and

00:14:43,279 --> 00:14:48,329
there's complexity that you have to

00:14:45,500 --> 00:14:51,000
worry about emerging in a system as you

00:14:48,329 --> 00:14:53,129
as you adapt to overtime the easier it

00:14:51,000 --> 00:14:54,300
is for you to continue to adapt things

00:14:53,129 --> 00:14:55,829
and to keep the quality of your

00:14:54,300 --> 00:14:57,300
application high because you might find

00:14:55,829 --> 00:14:59,129
that initially you've built an app and

00:14:57,300 --> 00:14:59,939
people are pretty happy like you and

00:14:59,129 --> 00:15:01,860
your development team they're pretty

00:14:59,939 --> 00:15:03,809
happy with how it is to work with it but

00:15:01,860 --> 00:15:05,069
then as you start moving away from what

00:15:03,809 --> 00:15:06,449
the initial requirements were that you

00:15:05,069 --> 00:15:08,009
that you took on board in order to build

00:15:06,449 --> 00:15:09,629
the application like making the

00:15:08,009 --> 00:15:11,579
adjustments that you need to to kind of

00:15:09,629 --> 00:15:13,230
facilitate the new requirements can

00:15:11,579 --> 00:15:16,410
quickly lead to a point in time where

00:15:13,230 --> 00:15:18,329
you start hating the new codebase almost

00:15:16,410 --> 00:15:20,639
as much as you felt you hated the old

00:15:18,329 --> 00:15:21,899
one I mean it's pretty it's a pretty

00:15:20,639 --> 00:15:23,069
common thing to come into any old

00:15:21,899 --> 00:15:25,259
codebase and just be like I hate this I

00:15:23,069 --> 00:15:28,170
want to rewrite it and I think that's

00:15:25,259 --> 00:15:30,420
part of that is because we perhaps don't

00:15:28,170 --> 00:15:32,550
spend enough time is upfront as we

00:15:30,420 --> 00:15:34,019
should thinking about that this is going

00:15:32,550 --> 00:15:34,709
to have to change almost everything that

00:15:34,019 --> 00:15:35,999
we build

00:15:34,709 --> 00:15:38,489
unless you're building

00:15:35,999 --> 00:15:39,659
static websites for like agencies or

00:15:38,489 --> 00:15:41,399
something like that even if you're

00:15:39,659 --> 00:15:43,979
building any personal projects you want

00:15:41,399 --> 00:15:46,889
to iterate until adapt over time and so

00:15:43,979 --> 00:15:48,419
making it easy - making it easier to do

00:15:46,889 --> 00:15:50,099
that by not having to deal with

00:15:48,419 --> 00:15:53,220
complexity is one of the problems is

00:15:50,099 --> 00:15:54,299
it's worth your time like one of the key

00:15:53,220 --> 00:15:57,239
things that we talk about a lot is

00:15:54,299 --> 00:15:58,789
reusability but I studied shifting the

00:15:57,239 --> 00:16:01,019
way I think about things more towards

00:15:58,789 --> 00:16:02,039
preferring to focus on what whether

00:16:01,019 --> 00:16:03,929
something is adaptable though for

00:16:02,039 --> 00:16:05,729
whether something is reusable because

00:16:03,929 --> 00:16:07,379
the right kind of reuse is valuable but

00:16:05,729 --> 00:16:08,970
the wrong kind of reuse creates a lot of

00:16:07,379 --> 00:16:10,529
coupling and entanglement so if you

00:16:08,970 --> 00:16:16,259
attempt to break everything down and see

00:16:10,529 --> 00:16:17,339
like very abstract always break it but

00:16:16,259 --> 00:16:20,399
if you attempt to break things down it's

00:16:17,339 --> 00:16:24,059
a very abstract reusable pieces then

00:16:20,399 --> 00:16:25,739
what you end up doing is effectively

00:16:24,059 --> 00:16:27,720
making making it such that every part of

00:16:25,739 --> 00:16:29,729
your application depends on like a huge

00:16:27,720 --> 00:16:31,379
tree of small pieces or if you make a

00:16:29,729 --> 00:16:32,609
change to any one of them it kind of

00:16:31,379 --> 00:16:35,039
like bubbles up through the whole system

00:16:32,609 --> 00:16:37,589
and can cause a lot of unintended

00:16:35,039 --> 00:16:40,199
consequences everywhere else so having

00:16:37,589 --> 00:16:41,999
duplication within components or

00:16:40,199 --> 00:16:43,019
duplication so sometimes you'll have

00:16:41,999 --> 00:16:44,279
multiple components and you'll think

00:16:43,019 --> 00:16:46,319
these things look the same across all of

00:16:44,279 --> 00:16:48,209
them and you might naively want to pull

00:16:46,319 --> 00:16:49,109
it out and make it reusable but that

00:16:48,209 --> 00:16:50,519
also means that if there's any

00:16:49,109 --> 00:16:51,899
divergence at all if things look

00:16:50,519 --> 00:16:53,849
superficially similar or have like

00:16:51,899 --> 00:16:56,009
superficially similar behavior but then

00:16:53,849 --> 00:16:57,689
over time they change you end up having

00:16:56,009 --> 00:17:00,439
to effectively like I can't do that

00:16:57,689 --> 00:17:02,249
reusability because of the fact that

00:17:00,439 --> 00:17:04,439
changing one thing affects something

00:17:02,249 --> 00:17:05,730
else that is no longer that you no

00:17:04,439 --> 00:17:06,959
longer want to change when you make an

00:17:05,730 --> 00:17:08,279
adjustment to another part of the system

00:17:06,959 --> 00:17:10,199
and that's kind of what I mean by a

00:17:08,279 --> 00:17:11,909
complexity and entanglement is that the

00:17:10,199 --> 00:17:13,860
wrong kind of reuse like really does

00:17:11,909 --> 00:17:17,069
help create a lot of that complexity and

00:17:13,860 --> 00:17:19,500
entanglement so after talking a lot

00:17:17,069 --> 00:17:21,269
about like adaptability and this kind of

00:17:19,500 --> 00:17:23,309
concept of isolation that components

00:17:21,269 --> 00:17:26,490
have I'm going to talk about some of the

00:17:23,309 --> 00:17:28,110
tools that I quite like using that I

00:17:26,490 --> 00:17:29,429
think you should have a look at there's

00:17:28,110 --> 00:17:30,509
lots of other tools that are a component

00:17:29,429 --> 00:17:33,480
based that these are the ones that I

00:17:30,509 --> 00:17:35,490
quite like so one of them is react there

00:17:33,480 --> 00:17:36,629
was written at Facebook and it's a

00:17:35,490 --> 00:17:40,070
JavaScript libraries to help you build

00:17:36,629 --> 00:17:40,070
UI components okay

00:17:40,170 --> 00:17:44,220
the rehab guys and I think there's a lot

00:17:42,330 --> 00:17:46,650
of things to like about reacts but one

00:17:44,220 --> 00:17:48,000
of the things that it makes very easy

00:17:46,650 --> 00:17:49,290
and that I think makes it really

00:17:48,000 --> 00:17:52,760
approachable to designers and developers

00:17:49,290 --> 00:17:55,230
is that it's got a really nice way of

00:17:52,760 --> 00:17:57,210
defining components that are composable

00:17:55,230 --> 00:17:58,830
and configurable and the API is quite

00:17:57,210 --> 00:18:02,340
small so it's quite easy to to kind of

00:17:58,830 --> 00:18:04,440
dive into it this is like this like up

00:18:02,340 --> 00:18:06,210
up there with the most basic piece of

00:18:04,440 --> 00:18:08,190
react code that I could write analysis

00:18:06,210 --> 00:18:10,830
is defining a photo component and then

00:18:08,190 --> 00:18:12,240
in this return a block here you

00:18:10,830 --> 00:18:14,550
basically put in something that looks a

00:18:12,240 --> 00:18:16,290
little bit like HTML and this is what

00:18:14,550 --> 00:18:19,080
this is the definition of the component

00:18:16,290 --> 00:18:22,710
and that this dot props

00:18:19,080 --> 00:18:24,960
the attributes so think about an input

00:18:22,710 --> 00:18:28,140
element in HTML you know have like type

00:18:24,960 --> 00:18:30,330
equals email that kind of stuff and this

00:18:28,140 --> 00:18:31,980
is basically what react allows you to do

00:18:30,330 --> 00:18:34,470
as well you can basically make up your

00:18:31,980 --> 00:18:35,730
own attributes and this table props is a

00:18:34,470 --> 00:18:38,040
way of accessing that so what this is

00:18:35,730 --> 00:18:41,010
saying is get the source property of my

00:18:38,040 --> 00:18:43,230
photo component and put that into the

00:18:41,010 --> 00:18:46,290
source of this image element and so you

00:18:43,230 --> 00:18:48,420
might use it like this so a slightly

00:18:46,290 --> 00:18:50,700
more like fully-fledged or like useful

00:18:48,420 --> 00:18:52,980
component for the photo might look a bit

00:18:50,700 --> 00:18:54,330
like this so here I've got I'm

00:18:52,980 --> 00:18:55,770
effectively saying in the definition

00:18:54,330 --> 00:18:58,710
like the class name is going to be photo

00:18:55,770 --> 00:19:00,750
plus whatever the value of the size

00:18:58,710 --> 00:19:05,690
attribute is then I've got a cropping

00:19:00,750 --> 00:19:05,690
thing going on and then this this

00:19:14,540 --> 00:19:18,240
docprops/thumbnail.wmf passed in and

00:19:16,220 --> 00:19:20,430
these children here including this

00:19:18,240 --> 00:19:21,720
attribution component other bits they

00:19:20,430 --> 00:19:25,500
get rendered in the part where I had the

00:19:21,720 --> 00:19:26,670
that this docprops/thumbnail.emf

00:19:25,500 --> 00:19:29,160
components is the bit that I've been

00:19:26,670 --> 00:19:31,320
interested in contributing to because

00:19:29,160 --> 00:19:32,940
once you have a way of defining a

00:19:31,320 --> 00:19:35,010
component and isolating the

00:19:32,940 --> 00:19:36,630
implementation to prevent a lot of this

00:19:35,010 --> 00:19:39,420
this leaking that goes on with people

00:19:36,630 --> 00:19:41,070
like reaching in then the thing you have

00:19:39,420 --> 00:19:43,500
to think about is how do you prevent the

00:19:41,070 --> 00:19:45,390
problem from the in the CSS of classes

00:19:43,500 --> 00:19:47,160
kind of the same class being used in

00:19:45,390 --> 00:19:49,050
multiple contexts and people like

00:19:47,160 --> 00:19:51,930
accidentally writing styles that affect

00:19:49,050 --> 00:19:53,410
different parts of the application and I

00:19:51,930 --> 00:19:59,920
wrote something called c2 her

00:19:53,410 --> 00:20:01,840
do this conceit is a is modular as

00:19:59,920 --> 00:20:05,020
there's like lots of little repos with

00:20:01,840 --> 00:20:06,610
lots of different purposes and it's not

00:20:05,020 --> 00:20:07,780
it's not like it's not a toolkit or they

00:20:06,610 --> 00:20:09,430
think more and more toolkits are going

00:20:07,780 --> 00:20:12,240
to try and go the modular way because it

00:20:09,430 --> 00:20:14,350
makes it easier for them to like operate

00:20:12,240 --> 00:20:17,590
but see isn't really a toolkit or a

00:20:14,350 --> 00:20:19,330
library it's like I said it's not really

00:20:17,590 --> 00:20:20,860
trying to provide you a pile of CSS that

00:20:19,330 --> 00:20:23,980
you like bootstrap or something where

00:20:20,860 --> 00:20:26,100
you then have to kind of re re implement

00:20:23,980 --> 00:20:28,540
all the HTML yourself it's basically a

00:20:26,100 --> 00:20:30,220
methodology and a simple set of tools to

00:20:28,540 --> 00:20:32,470
try and help it make it to try and help

00:20:30,220 --> 00:20:33,490
you make it easier to style these kind

00:20:32,470 --> 00:20:35,740
of components that you can build with

00:20:33,490 --> 00:20:37,900
these JavaScript libraries now so it's

00:20:35,740 --> 00:20:39,370
still a work in progress but and it

00:20:37,900 --> 00:20:40,780
largely caters to a package manager

00:20:39,370 --> 00:20:43,660
called component that I'll also talk

00:20:40,780 --> 00:20:45,730
about once the NPM has some more stuff

00:20:43,660 --> 00:20:48,700
like I'll probably do more to make it

00:20:45,730 --> 00:20:50,320
work with NPM so going back to the

00:20:48,700 --> 00:20:53,080
description the definition of our

00:20:50,320 --> 00:20:55,540
component here see like these are all

00:20:53,080 --> 00:20:57,940
the classes that I've got and so if I

00:20:55,540 --> 00:21:00,160
make a caption component then it's going

00:20:57,940 --> 00:21:01,840
to collide with the implementation of

00:21:00,160 --> 00:21:03,910
photo and the whole point of having a

00:21:01,840 --> 00:21:06,460
component in the first place is to make

00:21:03,910 --> 00:21:07,810
it so that I can use this kind of like

00:21:06,460 --> 00:21:10,300
rich UI widget without having to know

00:21:07,810 --> 00:21:12,280
about the implementation details so like

00:21:10,300 --> 00:21:14,830
kind of leaking these classes like

00:21:12,280 --> 00:21:16,750
caption out without really someone

00:21:14,830 --> 00:21:19,360
knowing that it's there is is a problem

00:21:16,750 --> 00:21:20,650
because it means that I have to be aware

00:21:19,360 --> 00:21:22,420
of it and it kind of increases the

00:21:20,650 --> 00:21:23,890
complexity of the applications that have

00:21:22,420 --> 00:21:24,210
to encounter every time I want to make a

00:21:23,890 --> 00:21:28,570
change

00:21:24,210 --> 00:21:29,920
so instead with C or any of these CSS

00:21:28,570 --> 00:21:33,010
methodologies that are based around

00:21:29,920 --> 00:21:35,800
naming conventions you effectively take

00:21:33,010 --> 00:21:38,380
a namespace and so because the react

00:21:35,800 --> 00:21:39,850
component was called photo the suit the

00:21:38,380 --> 00:21:41,800
suit CSS is also going to use the same

00:21:39,850 --> 00:21:44,050
name it looks exactly the same it's like

00:21:41,800 --> 00:21:45,520
kind of this constructor pattern and so

00:21:44,050 --> 00:21:49,060
now every single class is prefixed with

00:21:45,520 --> 00:21:51,610
photo and I can be sure that but it's

00:21:49,060 --> 00:21:54,040
really unlikely that anyone is going to

00:21:51,610 --> 00:21:54,910
be using like photo - caps and caption

00:21:54,040 --> 00:21:57,670
like this because they're not going to

00:21:54,910 --> 00:21:59,470
be making another photo component and

00:21:57,670 --> 00:22:01,360
the CSS ends up looking a bit like this

00:21:59,470 --> 00:22:04,510
and there's defined block at the top is

00:22:01,360 --> 00:22:06,160
and I wrote like a little conformance

00:22:04,510 --> 00:22:07,059
tool so you can effectively tell the

00:22:06,160 --> 00:22:09,309
tool

00:22:07,059 --> 00:22:11,110
this is the photo component and it will

00:22:09,309 --> 00:22:12,549
run through the file and check that you

00:22:11,110 --> 00:22:15,309
haven't got any other components defined

00:22:12,549 --> 00:22:17,019
in there to avoid you inadvertently like

00:22:15,309 --> 00:22:18,669
career Creek creating this entanglement

00:22:17,019 --> 00:22:22,179
by having a different component defined

00:22:18,669 --> 00:22:24,190
in the file for the photo so rather than

00:22:22,179 --> 00:22:26,710
thinking about how do you scale your CSS

00:22:24,190 --> 00:22:27,879
I think it's quite nice when you start

00:22:26,710 --> 00:22:29,889
for thinking in terms of components that

00:22:27,879 --> 00:22:32,350
the first component you write and the

00:22:29,889 --> 00:22:33,370
1,000th component you write you kind of

00:22:32,350 --> 00:22:35,019
shouldn't really have to think about

00:22:33,370 --> 00:22:37,179
anything anything more when you're

00:22:35,019 --> 00:22:38,679
writing a component that's stacked on

00:22:37,179 --> 00:22:41,139
top of like hundreds that came before it

00:22:38,679 --> 00:22:43,749
because as long as you have like made

00:22:41,139 --> 00:22:45,429
sure that you you don't keep you know

00:22:43,749 --> 00:22:47,470
define another photo component that you

00:22:45,429 --> 00:22:49,299
don't take the same namespace you can

00:22:47,470 --> 00:22:53,740
you can do a pretty good job of like

00:22:49,299 --> 00:22:56,350
softly isolating the styles so once you

00:22:53,740 --> 00:22:58,480
have this kind of compositional model

00:22:56,350 --> 00:23:00,009
you might think so if I make photo and

00:22:58,480 --> 00:23:01,779
then I have attribution defined within

00:23:00,009 --> 00:23:03,190
the photo and there are going to be a

00:23:01,779 --> 00:23:05,049
few occasions when I do want to actually

00:23:03,190 --> 00:23:06,369
make some adjustments to the attribution

00:23:05,049 --> 00:23:08,019
component and so I want to make sure

00:23:06,369 --> 00:23:10,779
that the order of my CSS is correct and

00:23:08,019 --> 00:23:13,119
so one of the things that is pretty good

00:23:10,779 --> 00:23:16,570
for doing this as it's called component

00:23:13,119 --> 00:23:19,809
and this is a a node and node tool the

00:23:16,570 --> 00:23:22,360
TJ Holloway check wrote so if we go back

00:23:19,809 --> 00:23:24,039
to the component based structure that we

00:23:22,360 --> 00:23:26,350
have here and then just look at one of

00:23:24,039 --> 00:23:28,509
the components what component does this

00:23:26,350 --> 00:23:31,090
effectively ask you to define a manifest

00:23:28,509 --> 00:23:33,700
file called component Jason and in that

00:23:31,090 --> 00:23:36,549
file you basically say what your assets

00:23:33,700 --> 00:23:37,629
are and so in the case of the react

00:23:36,549 --> 00:23:39,610
example that we using we won't actually

00:23:37,629 --> 00:23:41,919
have any HTML assets being effectively

00:23:39,610 --> 00:23:43,869
say this is my CSS this is my JavaScript

00:23:41,919 --> 00:23:46,240
these are my images these are my fonts

00:23:43,869 --> 00:23:47,710
and you tell the tool what the assets

00:23:46,240 --> 00:23:50,320
are that are required to build to the

00:23:47,710 --> 00:23:52,210
component then you can also specify the

00:23:50,320 --> 00:23:53,710
dependencies so in the example of the

00:23:52,210 --> 00:23:57,700
photo you'd say one of the dependencies

00:23:53,710 --> 00:23:59,470
is the attribution component and because

00:23:57,700 --> 00:24:00,850
it does this with every component in

00:23:59,470 --> 00:24:02,289
effect if I have you know a couple of

00:24:00,850 --> 00:24:03,759
dependencies I don't need to know what

00:24:02,289 --> 00:24:05,590
they depend on because that will kind of

00:24:03,759 --> 00:24:07,389
be the chain of dependencies is tracked

00:24:05,590 --> 00:24:09,759
by the tool so I can kind of build up

00:24:07,389 --> 00:24:11,470
this tree where I can make sure that

00:24:09,759 --> 00:24:12,879
each of the assets that I require and

00:24:11,470 --> 00:24:14,730
which is particularly useful for CSS

00:24:12,879 --> 00:24:18,410
where the order is quite important that

00:24:14,730 --> 00:24:20,090
they're loaded before my component

00:24:18,410 --> 00:24:21,950
so with the suit stuff where you have

00:24:20,090 --> 00:24:24,440
everything is a pretty flat like the

00:24:21,950 --> 00:24:26,930
selectors are all about just basically

00:24:24,440 --> 00:24:30,410
one class deep as much as possible it

00:24:26,930 --> 00:24:32,060
means that you can rely on your your

00:24:30,410 --> 00:24:33,680
selectors coming after the attribution

00:24:32,060 --> 00:24:35,360
component and then you can reach in and

00:24:33,680 --> 00:24:37,160
be like photo dot attribution or

00:24:35,360 --> 00:24:40,040
something like that and be sure that

00:24:37,160 --> 00:24:41,150
that the load order is correct the other

00:24:40,040 --> 00:24:43,580
benefit of this is that you don't have

00:24:41,150 --> 00:24:45,800
to like manually manage all the assets

00:24:43,580 --> 00:24:47,030
that you need so a common problem people

00:24:45,800 --> 00:24:48,860
have is like what is the CSS that I'm

00:24:47,030 --> 00:24:51,860
using how do I know what this year says

00:24:48,860 --> 00:24:53,030
is that I need for the homepage and

00:24:51,860 --> 00:24:55,280
rather than having to keep track of that

00:24:53,030 --> 00:24:56,480
manually or work out like what

00:24:55,280 --> 00:24:58,460
components are on the page like which

00:24:56,480 --> 00:25:00,140
CSS corresponds to which component as

00:24:58,460 --> 00:25:02,690
you kind of like filled up this this

00:25:00,140 --> 00:25:04,580
tree of dependencies that's kind of

00:25:02,690 --> 00:25:06,260
tracked for you so you you can kind of

00:25:04,580 --> 00:25:07,550
this is basically what the component

00:25:06,260 --> 00:25:09,950
Jason looks like and at the bottom of

00:25:07,550 --> 00:25:11,390
the local the local dependencies and so

00:25:09,950 --> 00:25:12,890
because I've despite said that I depend

00:25:11,390 --> 00:25:14,150
on avatar and in line to box and tree

00:25:12,890 --> 00:25:16,250
actions and then they have their own

00:25:14,150 --> 00:25:17,690
dependencies and so on if you imagine

00:25:16,250 --> 00:25:19,520
this going up and up the chain and then

00:25:17,690 --> 00:25:22,850
your page is just another component that

00:25:19,520 --> 00:25:24,890
depends on like a sidebar and a top nav

00:25:22,850 --> 00:25:26,450
and you know a timeline or something

00:25:24,890 --> 00:25:28,190
like that and then each of those have

00:25:26,450 --> 00:25:29,480
their own dependency trees so you can be

00:25:28,190 --> 00:25:32,300
pretty sure that the assets that you're

00:25:29,480 --> 00:25:34,010
using in a bundle for like certain

00:25:32,300 --> 00:25:36,470
sections of your application are pretty

00:25:34,010 --> 00:25:38,300
pretty closely in line with actually

00:25:36,470 --> 00:25:39,500
exactly what you need and you're not

00:25:38,300 --> 00:25:41,780
kind of like carrying all this legacy

00:25:39,500 --> 00:25:45,340
craft around or having to think do I

00:25:41,780 --> 00:25:45,340
need the CSS like how do I work that out

00:25:47,350 --> 00:25:53,960
so my main point really is that building

00:25:50,960 --> 00:25:55,970
like web user interfaces is more than a

00:25:53,960 --> 00:25:59,000
CSS program now and there as soon as you

00:25:55,970 --> 00:26:01,460
start building anything that kind of

00:25:59,000 --> 00:26:03,560
goes beyond like a relatively trivial

00:26:01,460 --> 00:26:06,590
level you'll notice the difficulties

00:26:03,560 --> 00:26:07,940
that you have trying to decide we're

00:26:06,590 --> 00:26:09,830
trying to do things that is not that and

00:26:07,940 --> 00:26:12,620
not just building the application and

00:26:09,830 --> 00:26:13,940
adapting widgets that you spend more

00:26:12,620 --> 00:26:16,580
time like managing assets and trying to

00:26:13,940 --> 00:26:17,690
work out how to avoid problems so I can

00:26:16,580 --> 00:26:19,580
make a change here and for some reason

00:26:17,690 --> 00:26:21,380
something else changes over there and as

00:26:19,580 --> 00:26:22,850
soon as you start buying into a

00:26:21,380 --> 00:26:25,100
conceptual approach more around

00:26:22,850 --> 00:26:27,350
something like components which kind of

00:26:25,100 --> 00:26:29,050
helps you define an interface and to

00:26:27,350 --> 00:26:31,520
isolate the implementation a bit more

00:26:29,050 --> 00:26:32,440
then it becomes easier to reason about

00:26:31,520 --> 00:26:36,049
the application

00:26:32,440 --> 00:26:37,369
and so something like C is designs or

00:26:36,049 --> 00:26:39,379
aiming to try and play nice with a

00:26:37,369 --> 00:26:41,029
component based system so rather than

00:26:39,379 --> 00:26:43,129
thinking about how do I manage like a

00:26:41,029 --> 00:26:44,629
megabyte of CSS it's kind of trying to

00:26:43,129 --> 00:26:45,830
just go down to the one level that you

00:26:44,629 --> 00:26:47,809
really want to be concerned about which

00:26:45,830 --> 00:26:50,720
is the individual unit the individual

00:26:47,809 --> 00:26:52,639
like web widget and then you can compose

00:26:50,720 --> 00:26:55,460
more complicated interfaces from them

00:26:52,639 --> 00:26:57,679
all and hopefully the complexity is kind

00:26:55,460 --> 00:26:59,149
of manageable that could see if you've

00:26:57,679 --> 00:27:01,940
kind of bought into an abstraction that

00:26:59,149 --> 00:27:04,879
that limits limits the leaking of like

00:27:01,940 --> 00:27:07,519
implementation details because web apps

00:27:04,879 --> 00:27:08,720
are not static it's good to have an

00:27:07,519 --> 00:27:11,149
acceptance of the fact that there is

00:27:08,720 --> 00:27:12,409
this impermanence and to consider the

00:27:11,149 --> 00:27:14,990
long-term quality of what you're

00:27:12,409 --> 00:27:15,919
building is at least in my opinion I

00:27:14,990 --> 00:27:18,470
think it's going to be tightly related

00:27:15,919 --> 00:27:20,809
to your ability to to adapt over time

00:27:18,470 --> 00:27:23,149
and to maintain a certain cadence of

00:27:20,809 --> 00:27:25,309
adaptability so you know changing

00:27:23,149 --> 00:27:27,559
changing being able to adapt quickly at

00:27:25,309 --> 00:27:28,730
first but then slowing down as you kind

00:27:27,559 --> 00:27:31,700
of introduce more and more complexity

00:27:28,730 --> 00:27:33,110
and like battle with all these things is

00:27:31,700 --> 00:27:35,389
kind of what you want to avoid and

00:27:33,110 --> 00:27:38,779
perhaps one of the good indicators of a

00:27:35,389 --> 00:27:40,070
successful system is is whether in a few

00:27:38,779 --> 00:27:42,110
years time after you've built it there's

00:27:40,070 --> 00:27:45,019
still a feeling that you can still work

00:27:42,110 --> 00:27:46,399
at a decent pace and make changes to to

00:27:45,019 --> 00:27:50,139
meet all the all the requirements that

00:27:46,399 --> 00:27:50,139

YouTube URL: https://www.youtube.com/watch?v=m0oMHG6ZXvo


