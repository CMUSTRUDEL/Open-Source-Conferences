Title: Lea Verou - The Chroma Zone
Publication date: 2014-04-29
Playlist: CSSConf Australia 2014 Talks
Description: 
	Lea Verou's CSSConf Australia 2014 presentation The Chroma Zone.

http://2014.cssconf.com.au/
http://2014.cssconf.com.au/news/introducing-lea-verou/
http://twitter.com/leaverou
http://lea.verou.me/
Captions: 
	00:00:00,000 --> 00:00:05,460
hi there thanks for being here so I

00:00:03,510 --> 00:00:09,179
guess I should introduce myself a little

00:00:05,460 --> 00:00:10,620
bit first I'm Leah hi again if you've

00:00:09,179 --> 00:00:11,790
ever heard my name before it's probably

00:00:10,620 --> 00:00:13,889
do you talking with my open source

00:00:11,790 --> 00:00:15,299
project these are the most popular ones

00:00:13,889 --> 00:00:17,490
but they're more you can find them on my

00:00:15,299 --> 00:00:20,460
github page by the way my slides today

00:00:17,490 --> 00:00:22,619
are also my github profile so you don't

00:00:20,460 --> 00:00:25,640
need to keep lots of notes all the demos

00:00:22,619 --> 00:00:28,920
are there you can play with them like

00:00:25,640 --> 00:00:31,109
Fiona mentioned mmm I'm invited expert

00:00:28,920 --> 00:00:33,840
in the CSS working group I used to work

00:00:31,109 --> 00:00:35,520
full-time for a w3c but now I'm spending

00:00:33,840 --> 00:00:39,210
my time writing a book for Riley about

00:00:35,520 --> 00:00:41,480
what else CSS and this sep tember I'm

00:00:39,210 --> 00:00:44,969
changing my career a little bit and

00:00:41,480 --> 00:00:49,379
starting at MIT towards I'm going to

00:00:44,969 --> 00:00:51,840
study towards a PhD so enough about me

00:00:49,379 --> 00:00:57,030
let's go to more interesting things like

00:00:51,840 --> 00:01:00,989
how color works in screen so this is a

00:00:57,030 --> 00:01:03,120
white pixel or this is more how most

00:01:00,989 --> 00:01:05,549
people imagine a white pixel to look

00:01:03,120 --> 00:01:08,340
like and we imagine that pixels are like

00:01:05,549 --> 00:01:10,260
these squares on our screen that have

00:01:08,340 --> 00:01:12,000
millions of different states for all the

00:01:10,260 --> 00:01:14,220
different colors but the reality is a

00:01:12,000 --> 00:01:15,600
little bit different and a white pixel

00:01:14,220 --> 00:01:17,549
looks more like this there are three

00:01:15,600 --> 00:01:19,350
segments called subpixels a red one

00:01:17,549 --> 00:01:21,590
green one and a blue one and all the

00:01:19,350 --> 00:01:24,509
different colors are created by

00:01:21,590 --> 00:01:26,490
lightning those sub pixels with

00:01:24,509 --> 00:01:28,619
different intensities and actually now

00:01:26,490 --> 00:01:31,229
in our LCD screens they look a bit more

00:01:28,619 --> 00:01:33,119
like this and you might be wondering how

00:01:31,229 --> 00:01:34,619
how on earth is this a white pixel it

00:01:33,119 --> 00:01:37,530
just looks like three different colors

00:01:34,619 --> 00:01:40,259
to me well yeah if you look at it this

00:01:37,530 --> 00:01:41,790
closely and with this magnification

00:01:40,259 --> 00:01:45,290
level it doesn't really look like a

00:01:41,790 --> 00:01:48,630
white pixel but if you start looking

00:01:45,290 --> 00:01:51,329
from further away and they start getting

00:01:48,630 --> 00:01:52,829
smaller and smaller you can see that the

00:01:51,329 --> 00:01:55,530
your eyes start blending them together

00:01:52,829 --> 00:01:57,930
and it starts looking like a sword of

00:01:55,530 --> 00:01:59,490
light gray and if this wasn't the shitty

00:01:57,930 --> 00:02:06,840
CSS background and it was an actual

00:01:59,490 --> 00:02:09,420
screen they would look like white you

00:02:06,840 --> 00:02:11,340
can see here how subpixels light up with

00:02:09,420 --> 00:02:12,750
different intensities to create a few of

00:02:11,340 --> 00:02:13,380
the basic colors and we can basically

00:02:12,750 --> 00:02:15,270
create

00:02:13,380 --> 00:02:18,210
any color just with these three

00:02:15,270 --> 00:02:19,920
sub-pixels you can see how the sub-pixel

00:02:18,210 --> 00:02:22,860
geometry is different based on what type

00:02:19,920 --> 00:02:26,160
of screen you're using it's different on

00:02:22,860 --> 00:02:27,900
CRT is different in lcds and this one is

00:02:26,160 --> 00:02:30,330
quite interesting the bottom the bottom

00:02:27,900 --> 00:02:32,400
left one which is which doesn't exactly

00:02:30,330 --> 00:02:35,340
have some pixels but every pixel has one

00:02:32,400 --> 00:02:38,280
of the basic is only one of the basic

00:02:35,340 --> 00:02:41,370
colors either red or green or blue so

00:02:38,280 --> 00:02:43,830
the actual this is from the project One

00:02:41,370 --> 00:02:46,020
Laptop Per child which tried to reduce

00:02:43,830 --> 00:02:48,270
the costs of creating a laptop as much

00:02:46,020 --> 00:02:49,590
as possible so that children in poor

00:02:48,270 --> 00:02:50,940
countries could get a laptop for a

00:02:49,590 --> 00:02:54,330
hundred dollars I'm sure you've heard

00:02:50,940 --> 00:02:56,430
about it so the way they found to reduce

00:02:54,330 --> 00:02:58,260
costs and screens was instead of having

00:02:56,430 --> 00:03:00,630
some pixels every pixel is one of the

00:02:58,260 --> 00:03:03,270
primary colors and what I found really

00:03:00,630 --> 00:03:06,330
interesting about this innovation is

00:03:03,270 --> 00:03:09,150
that the actual resolute resolution of

00:03:06,330 --> 00:03:13,170
the screen even depends on the viewing

00:03:09,150 --> 00:03:14,520
angle it's really interesting it's

00:03:13,170 --> 00:03:17,240
really interesting and really different

00:03:14,520 --> 00:03:20,760
from any other screen we're used to and

00:03:17,240 --> 00:03:22,290
even in LCD screens the sub-pixel

00:03:20,760 --> 00:03:24,210
geometry is slightly different you can

00:03:22,290 --> 00:03:26,850
see here how it compares between an ipad

00:03:24,210 --> 00:03:30,210
or a different model of ipad on an

00:03:26,850 --> 00:03:34,800
iphone or an asus eee pad transformer

00:03:30,210 --> 00:03:36,510
tablet and every every sub pixel usually

00:03:34,800 --> 00:03:39,120
everything that i say today as

00:03:36,510 --> 00:03:43,050
exceptions but every sub pixel usually

00:03:39,120 --> 00:03:44,970
is needs eight bits which means to a 24

00:03:43,050 --> 00:03:48,410
bits per pixel which is three bytes per

00:03:44,970 --> 00:03:51,270
pixel which you can verify by finding a

00:03:48,410 --> 00:03:52,440
with every uncompressed image like a bit

00:03:51,270 --> 00:03:54,570
more every bitmap image for example

00:03:52,440 --> 00:03:56,910
these are uncompressed if you multiply

00:03:54,570 --> 00:03:59,490
the width by the height by 3 you can

00:03:56,910 --> 00:04:01,530
generally find the file size of the of

00:03:59,490 --> 00:04:03,510
the file it's slightly different because

00:04:01,530 --> 00:04:06,090
it has it also has some metadata but

00:04:03,510 --> 00:04:08,750
this is pretty much the the size of the

00:04:06,090 --> 00:04:12,090
file and this means that you can create

00:04:08,750 --> 00:04:16,530
256 to the third possible colors which

00:04:12,090 --> 00:04:20,769
is around 16.7 million just with these

00:04:16,530 --> 00:04:23,199
eight bits per sub pixel and quite often

00:04:20,769 --> 00:04:25,690
we need to represent vector graphics on

00:04:23,199 --> 00:04:28,780
screen and parts of these graphics don't

00:04:25,690 --> 00:04:30,580
fallen on exact pixels like a pixel

00:04:28,780 --> 00:04:32,590
might be fifty percent covered or thirty

00:04:30,580 --> 00:04:36,460
percent covered so how do you represent

00:04:32,590 --> 00:04:40,840
that there are two techniques and this

00:04:36,460 --> 00:04:43,569
this is representing these vector

00:04:40,840 --> 00:04:45,819
graphics on a finite grid of pixels is

00:04:43,569 --> 00:04:47,680
called anti-aliasing the basic

00:04:45,819 --> 00:04:49,539
anti-aliasing technique is called

00:04:47,680 --> 00:04:51,879
grayscale anti-aliasing and it looks

00:04:49,539 --> 00:04:55,810
like this every pixel is lit up the

00:04:51,879 --> 00:04:59,069
whole picture is either lit up by the

00:04:55,810 --> 00:05:01,810
percentage of coverage it has or

00:04:59,069 --> 00:05:03,940
completely turned off and there's also

00:05:01,810 --> 00:05:07,180
another technique called pick sub-pixel

00:05:03,940 --> 00:05:10,539
anti-aliasing where for example this

00:05:07,180 --> 00:05:13,180
pixel was fifty percent covered on the

00:05:10,539 --> 00:05:16,060
right hand side so the blue sub-pixel is

00:05:13,180 --> 00:05:18,190
completely lit up the green one is about

00:05:16,060 --> 00:05:20,680
fifty percent lit up and the red one is

00:05:18,190 --> 00:05:24,400
almost turned off which basically

00:05:20,680 --> 00:05:26,469
triples the horizontal resolution of the

00:05:24,400 --> 00:05:28,180
screen the actual perceived resolution

00:05:26,469 --> 00:05:29,860
is a bit lower than three times because

00:05:28,180 --> 00:05:32,319
our eyes are more sensitive to certain

00:05:29,860 --> 00:05:35,590
subpixels and also it depends on the

00:05:32,319 --> 00:05:38,319
sub-pixel geometry of the screen if if

00:05:35,590 --> 00:05:41,699
the anti-aliasing algorithm is based on

00:05:38,319 --> 00:05:44,229
the fact that read this before green

00:05:41,699 --> 00:05:47,409
that red is on the left side and blue is

00:05:44,229 --> 00:05:49,840
on the right side and your screen

00:05:47,409 --> 00:05:51,669
actually has blue on the left side and

00:05:49,840 --> 00:05:53,169
bread on the right side then it will be

00:05:51,669 --> 00:05:55,110
completely messed up it will be even

00:05:53,169 --> 00:05:57,819
worse than greyscale anti-aliasing and

00:05:55,110 --> 00:06:00,340
WebKit browsers do have a proprietary

00:05:57,819 --> 00:06:03,279
property to control how this works for

00:06:00,340 --> 00:06:04,569
phones you can turn off sub-pixel

00:06:03,279 --> 00:06:07,449
anti-aliasing because some people don't

00:06:04,569 --> 00:06:10,810
like it I would advise you not to use it

00:06:07,449 --> 00:06:14,229
it's its proprietary and it's awful most

00:06:10,810 --> 00:06:15,849
people anti-aliasing some soup excellent

00:06:14,229 --> 00:06:17,979
erasing is much better when it's

00:06:15,849 --> 00:06:19,840
available sometimes it's not available

00:06:17,979 --> 00:06:21,370
when you have like 3d transforms the

00:06:19,840 --> 00:06:24,759
browser turns it off because it's too

00:06:21,370 --> 00:06:27,219
complicated and i'm sure you've looked

00:06:24,759 --> 00:06:30,550
at fonts if you've looked at phones

00:06:27,219 --> 00:06:32,589
close enough if when they were using

00:06:30,550 --> 00:06:34,480
some pixel anti-aliasing you must have

00:06:32,589 --> 00:06:37,420
seen these pixels that even though

00:06:34,480 --> 00:06:39,180
your phone your text color was black the

00:06:37,420 --> 00:06:42,010
the pixels on the edges were like

00:06:39,180 --> 00:06:46,150
different folders like shades of red

00:06:42,010 --> 00:06:48,010
shades of green of blue as you can see

00:06:46,150 --> 00:06:51,280
here and this is exactly because of some

00:06:48,010 --> 00:06:53,200
pixel anti-aliasing as you can see here

00:06:51,280 --> 00:06:55,630
this is how the difference of pixels are

00:06:53,200 --> 00:06:57,640
covered and this is how they end up

00:06:55,630 --> 00:07:00,130
looking because depending on how the sub

00:06:57,640 --> 00:07:03,400
pixels are lit up they correspond to

00:07:00,130 --> 00:07:05,800
different colors and you can see as I

00:07:03,400 --> 00:07:08,350
move the font so the pixels fall on

00:07:05,800 --> 00:07:12,490
different subjects cells how these

00:07:08,350 --> 00:07:18,070
colors on the edges chains I think

00:07:12,490 --> 00:07:23,730
that's quite interesting and now let's

00:07:18,070 --> 00:07:27,190
move on to how color works with code so

00:07:23,730 --> 00:07:30,310
the section is mostly about color and

00:07:27,190 --> 00:07:32,590
CSS and what's coming in CSS color level

00:07:30,310 --> 00:07:34,030
for but in the beginning in the firstly

00:07:32,590 --> 00:07:37,210
we'll start with a historical overview

00:07:34,030 --> 00:07:39,490
of how we ended up to color to CSS

00:07:37,210 --> 00:07:42,220
koehler level 4 and some things that are

00:07:39,490 --> 00:07:45,160
in CSS calder level 3 and aren't very

00:07:42,220 --> 00:07:47,260
popular so this is how the RGB color

00:07:45,160 --> 00:07:50,380
model is often represented geometrically

00:07:47,260 --> 00:07:53,200
it's every color model has a geometrical

00:07:50,380 --> 00:07:55,480
representation because it's useful for a

00:07:53,200 --> 00:07:56,860
number of things like finding the

00:07:55,480 --> 00:07:58,720
distance between two colors although

00:07:56,860 --> 00:08:00,520
articles we'll see later the distance

00:07:58,720 --> 00:08:04,210
between colors and the RGB cube is not

00:08:00,520 --> 00:08:07,750
exactly useful and because our screens

00:08:04,210 --> 00:08:10,210
are two-dimensional so we can't a cube

00:08:07,750 --> 00:08:13,750
is not exactly usable we tend to flatten

00:08:10,210 --> 00:08:16,600
the cube into to them into one dimension

00:08:13,750 --> 00:08:19,840
that we keep constant which in this case

00:08:16,600 --> 00:08:22,510
is this slide is red and you can see the

00:08:19,840 --> 00:08:27,130
range of possible colors in the other

00:08:22,510 --> 00:08:28,690
plane and this is like the best kind of

00:08:27,130 --> 00:08:30,640
color Pickers that you can find where

00:08:28,690 --> 00:08:33,250
they only flat in one dimension there

00:08:30,640 --> 00:08:34,900
are also color Pickers where the they

00:08:33,250 --> 00:08:39,640
flatten all three dimensions and you get

00:08:34,900 --> 00:08:43,270
three sliders try to avoid those so

00:08:39,640 --> 00:08:47,320
a little historical overview before we

00:08:43,270 --> 00:08:50,820
get into the meat of this talk we three

00:08:47,320 --> 00:08:53,470
we first got colors in HTML 3.5 and

00:08:50,820 --> 00:08:56,320
there were there were two kinds of color

00:08:53,470 --> 00:08:58,000
formats we could use mainly hex colors

00:08:56,320 --> 00:09:00,400
that looked like this and as you know

00:08:58,000 --> 00:09:03,640
the first two digits are bred the second

00:09:00,400 --> 00:09:06,340
the second two digit the third and the

00:09:03,640 --> 00:09:08,650
fourth digits represent green the last

00:09:06,340 --> 00:09:11,010
two are blue this particular color is

00:09:08,650 --> 00:09:16,230
this one which is my favorite color

00:09:11,010 --> 00:09:22,150
however nobody thinks okay so we have a

00:09:16,230 --> 00:09:25,780
RGB 255 and 0 90 so 155 corresponds to

00:09:22,150 --> 00:09:29,770
FF and then 0 is a 0-0 what about 90

00:09:25,780 --> 00:09:34,570
year that's that's five times 16 plus 10

00:09:29,770 --> 00:09:37,210
so 5 a nobody ever what we end up doing

00:09:34,570 --> 00:09:39,760
is using color Pickers finding a hex

00:09:37,210 --> 00:09:42,520
value copying it into our CSS and then

00:09:39,760 --> 00:09:45,550
when we need to modify it we don't even

00:09:42,520 --> 00:09:47,290
use JavaScript like we could convert hex

00:09:45,550 --> 00:09:49,060
to decimal and vice versa with a single

00:09:47,290 --> 00:09:51,250
with a with a line of JavaScript but

00:09:49,060 --> 00:09:53,290
usually we don't do that we just have

00:09:51,250 --> 00:09:55,360
this value in our CSS code and we end up

00:09:53,290 --> 00:09:57,190
thinking oh I want to make it darker so

00:09:55,360 --> 00:09:59,860
I'll just subtract something from all

00:09:57,190 --> 00:10:03,220
components lip let's try 33 to make it

00:09:59,860 --> 00:10:07,920
darker so oh i'll subtract 33 and do

00:10:03,220 --> 00:10:11,170
something like this and then something

00:10:07,920 --> 00:10:12,430
yeah that should that should be it and

00:10:11,170 --> 00:10:13,990
then we end up with a hue that's

00:10:12,430 --> 00:10:15,580
slightly different than what we had in

00:10:13,990 --> 00:10:17,260
mind but we go with it because we're too

00:10:15,580 --> 00:10:20,770
lazy to go back to the color picker and

00:10:17,260 --> 00:10:22,870
it we can't we can't quite modify it

00:10:20,770 --> 00:10:24,700
from the CSS and it's a it's a complete

00:10:22,870 --> 00:10:27,890
mess and of course we got this extremely

00:10:24,700 --> 00:10:30,210
useful CSS color names

00:10:27,890 --> 00:10:32,130
does anybody know where these color

00:10:30,210 --> 00:10:35,490
names come from they come from the

00:10:32,130 --> 00:10:37,110
windows vga palette remember that when

00:10:35,490 --> 00:10:42,330
you started in safe mode and you only

00:10:37,110 --> 00:10:44,940
had 16 colors it was these 16 colors so

00:10:42,330 --> 00:10:47,880
nates the email 3.2 we only had checks

00:10:44,940 --> 00:10:50,880
colors confusing and cryptic and call

00:10:47,880 --> 00:10:53,670
her names are mostly useless so then we

00:10:50,880 --> 00:10:58,680
got CSS and actually CSS came slightly

00:10:53,670 --> 00:11:02,130
after HTML 3.2 HTML 3.2 what's 96 CSS

00:10:58,680 --> 00:11:03,540
one was in 97 however it took a few more

00:11:02,130 --> 00:11:05,370
years for browsers to actually implement

00:11:03,540 --> 00:11:08,610
it in a decent way so we could start

00:11:05,370 --> 00:11:10,370
using it and I'm saying here CSS 1 2 2.1

00:11:08,610 --> 00:11:16,110
because we there weren't any changes

00:11:10,370 --> 00:11:18,570
color wise between CSS 12.1 so we got an

00:11:16,110 --> 00:11:20,610
RGB color format we it was still not

00:11:18,570 --> 00:11:22,320
very intuitive because LG RGB was

00:11:20,610 --> 00:11:24,060
designed for machines because that's how

00:11:22,320 --> 00:11:26,970
some pixels work it wasn't designed for

00:11:24,060 --> 00:11:30,000
humans so if we want to make like an

00:11:26,970 --> 00:11:32,700
orange color we don't usually think okay

00:11:30,000 --> 00:11:35,610
I want some red and then I don't want

00:11:32,700 --> 00:11:37,530
any blue but I do want some green how

00:11:35,610 --> 00:11:39,570
much green yeah something like this

00:11:37,530 --> 00:11:42,390
that's not how humans think but anyway

00:11:39,570 --> 00:11:45,810
this was one step better than hex colors

00:11:42,390 --> 00:11:47,640
and we also got percentages in RGB so

00:11:45,810 --> 00:11:50,310
for the aforementioned orange we could

00:11:47,640 --> 00:11:53,250
do something like this and then increase

00:11:50,310 --> 00:11:55,830
this and see what kind of shade we want

00:11:53,250 --> 00:11:58,290
which is a little bit less best a little

00:11:55,830 --> 00:12:00,690
bit more usable than values from 0 to

00:11:58,290 --> 00:12:03,300
255 but because we were so used to

00:12:00,690 --> 00:12:07,680
thinking in terms of powers of 2 from 0

00:12:03,300 --> 00:12:09,180
to 2 50 to 55 we know this this notation

00:12:07,680 --> 00:12:12,120
never caught up even the old browsers

00:12:09,180 --> 00:12:13,710
supported and we got three digit hex

00:12:12,120 --> 00:12:16,950
codes which were basically just as

00:12:13,710 --> 00:12:19,980
confusing as six digit hex codes but at

00:12:16,950 --> 00:12:23,410
least they were shorter so this is

00:12:19,980 --> 00:12:27,100
so this is just a shorthand for this as

00:12:23,410 --> 00:12:31,150
you will know and we got a new named

00:12:27,100 --> 00:12:37,780
color orange how extremely useful this

00:12:31,150 --> 00:12:42,460
is so these are the new color formats we

00:12:37,780 --> 00:12:45,280
got in CSS one until 2.1 the RGB not the

00:12:42,460 --> 00:12:47,320
RGB function notation the the to the

00:12:45,280 --> 00:12:51,730
three digit hex code and the orange

00:12:47,320 --> 00:12:56,110
named color I've actually made a game

00:12:51,730 --> 00:12:59,080
that I was planning to play here that

00:12:56,110 --> 00:13:01,270
you can test how how quickly you can

00:12:59,080 --> 00:13:03,400
guess a color if you're using RGB or if

00:13:01,270 --> 00:13:05,260
you're using any other notation and I'm

00:13:03,400 --> 00:13:08,070
not actually going to play this until I

00:13:05,260 --> 00:13:10,390
find the color because that's not how

00:13:08,070 --> 00:13:13,390
that it's not exactly easy to do that

00:13:10,390 --> 00:13:14,920
while you're on stage but I think you

00:13:13,390 --> 00:13:18,400
should try it at home because it's quite

00:13:14,920 --> 00:13:20,260
interesting yeah I'm getting kind of

00:13:18,400 --> 00:13:24,960
close but I have to go give up now and

00:13:20,260 --> 00:13:29,860
move to the next slide yeah almost there

00:13:24,960 --> 00:13:32,050
next so colors in CSS in CSS collar

00:13:29,860 --> 00:13:34,450
level 3 that was a big one we've got

00:13:32,050 --> 00:13:37,030
many new color formats but before I move

00:13:34,450 --> 00:13:40,570
forward this is some JavaScript that I

00:13:37,030 --> 00:13:44,590
will that i will use as a base for

00:13:40,570 --> 00:13:46,510
describing methods that modify colors

00:13:44,590 --> 00:13:48,250
this does it at this stage that doesn't

00:13:46,510 --> 00:13:50,590
do much it just generates koehler

00:13:48,250 --> 00:13:53,470
objects and there's a getter and setter

00:13:50,590 --> 00:13:55,630
to get an RGB array and an alpha value

00:13:53,470 --> 00:13:57,730
but it doesn't really do much and you

00:13:55,630 --> 00:14:00,490
can create colors this way by providing

00:13:57,730 --> 00:14:03,280
an RGB a array or in this way by using

00:14:00,490 --> 00:14:04,750
the RGB setter and you can add methods

00:14:03,280 --> 00:14:09,100
like this for example this is a simple

00:14:04,750 --> 00:14:13,930
invert method that inverts I caller by

00:14:09,100 --> 00:14:15,640
subtracting its RGB value from 255 just

00:14:13,930 --> 00:14:19,480
keep this in mind because we'll need it

00:14:15,640 --> 00:14:22,270
moving forward so in CSS Kohler level 3

00:14:19,480 --> 00:14:23,860
we got and I model that it's a little

00:14:22,270 --> 00:14:26,440
bit more intuitive for humans to

00:14:23,860 --> 00:14:28,870
understand it's called a Tercel it

00:14:26,440 --> 00:14:32,110
depends on Hugh which is like the basic

00:14:28,870 --> 00:14:33,340
color values it oranges is it reddish is

00:14:32,110 --> 00:14:35,380
it bluish

00:14:33,340 --> 00:14:38,230
what's the basic color value and then

00:14:35,380 --> 00:14:40,810
saturation how how close it is to grey

00:14:38,230 --> 00:14:42,340
and then likeness which is how close it

00:14:40,810 --> 00:14:44,200
is to white or how close it is to block

00:14:42,340 --> 00:14:45,910
which makes it much easier to pick a

00:14:44,200 --> 00:14:48,100
color for example if I want to pick an

00:14:45,910 --> 00:14:51,240
orange I know that it's not close to the

00:14:48,100 --> 00:14:54,180
center it's more towards this edge and

00:14:51,240 --> 00:14:57,250
then I can make it lighter or darker

00:14:54,180 --> 00:15:00,340
it's it's it's a little bit closer to

00:14:57,250 --> 00:15:03,160
how humans think it's it's natural to

00:15:00,340 --> 00:15:05,530
say I want a red with some yellow that's

00:15:03,160 --> 00:15:07,390
that some were somewhat muted it's a

00:15:05,530 --> 00:15:10,330
little bit close to grey and it's kind

00:15:07,390 --> 00:15:15,550
of light then make the mixing red green

00:15:10,330 --> 00:15:19,090
blue and you can see as I'm sure you've

00:15:15,550 --> 00:15:22,510
all used hsl colors there's a they have

00:15:19,090 --> 00:15:24,250
three parameters the second one is

00:15:22,510 --> 00:15:27,400
saturation the third one is lightness

00:15:24,250 --> 00:15:28,750
and the first one is the hue which is

00:15:27,400 --> 00:15:31,030
basically the only thing we have to

00:15:28,750 --> 00:15:32,740
memorize to use hsl colors how the

00:15:31,030 --> 00:15:36,340
different hues work everything else we

00:15:32,740 --> 00:15:38,170
can just figure out by knowing how light

00:15:36,340 --> 00:15:42,000
we want their color or how gray our

00:15:38,170 --> 00:15:43,930
color is and hsl is just a silly

00:15:42,000 --> 00:15:46,390
transformation of RGB into cylindrical

00:15:43,930 --> 00:15:47,890
coordinates it's still RGB it's not a

00:15:46,390 --> 00:15:50,280
different color space the colors that

00:15:47,890 --> 00:15:53,260
can generate are exactly the same as RGB

00:15:50,280 --> 00:15:57,540
and it's often its geometrical

00:15:53,260 --> 00:16:02,890
representation is a cylinder which is a

00:15:57,540 --> 00:16:05,080
circle for the values of U and then the

00:16:02,890 --> 00:16:07,000
height is for lightness and the radius

00:16:05,080 --> 00:16:08,710
is for saturation but it's actually more

00:16:07,000 --> 00:16:11,320
of a cone a double cone this is only

00:16:08,710 --> 00:16:14,710
half of it because as we move towards

00:16:11,320 --> 00:16:16,930
values of 0 or values of one you can see

00:16:14,710 --> 00:16:19,570
that at lightness one hundred percent or

00:16:16,930 --> 00:16:22,420
like this 0% we can only get one color

00:16:19,570 --> 00:16:24,460
black or white and as we move towards

00:16:22,420 --> 00:16:26,620
the edges of this lightness slider we

00:16:24,460 --> 00:16:30,340
get fewer and fewer colors which is why

00:16:26,620 --> 00:16:34,000
it's more accurately depicted as a cone

00:16:30,340 --> 00:16:35,800
and not a cylinder and this is the game

00:16:34,000 --> 00:16:39,670
again you should try it with hsl as well

00:16:35,800 --> 00:16:42,390
and see how much faster you'll be and

00:16:39,670 --> 00:16:45,390
knowing how hsl works is not just useful

00:16:42,390 --> 00:16:45,390
for

00:16:46,310 --> 00:16:53,310
for picking colors per se but also for

00:16:50,760 --> 00:16:54,900
filters because we can use the you

00:16:53,310 --> 00:16:57,840
rotate filter for example which is

00:16:54,900 --> 00:17:00,690
supported by Chrome and Safari and you

00:16:57,840 --> 00:17:03,330
can also sort of have it in Firefox with

00:17:00,690 --> 00:17:06,720
an SVG filter but it's a more complex in

00:17:03,330 --> 00:17:09,510
tax so here I've used the hero type

00:17:06,720 --> 00:17:12,540
filter by 60 degrees which means every

00:17:09,510 --> 00:17:15,120
pixel of this on this image will have

00:17:12,540 --> 00:17:17,520
its he rotated by 60 degrees so if it's

00:17:15,120 --> 00:17:21,180
yellow which means a hue of 60 it will

00:17:17,520 --> 00:17:24,050
become 120 which is green which is why

00:17:21,180 --> 00:17:27,120
it's sort of greenish because my default

00:17:24,050 --> 00:17:30,090
picture was like was a little yellowish

00:17:27,120 --> 00:17:31,890
like this and it's and if the hero type

00:17:30,090 --> 00:17:35,520
filter is really useful in combination

00:17:31,890 --> 00:17:38,790
with other filters because if I use a

00:17:35,520 --> 00:17:40,590
sepia filter it's sort of grayish yellow

00:17:38,790 --> 00:17:44,340
so I can use a saturate filter as well

00:17:40,590 --> 00:17:45,720
to make it more yellowish and then I can

00:17:44,340 --> 00:17:48,300
use a hero type filter to make it

00:17:45,720 --> 00:17:51,090
whatever color I want so I can be

00:17:48,300 --> 00:17:53,820
effectively colorize an image if I make

00:17:51,090 --> 00:17:57,210
it 120 it becomes more like aqua and you

00:17:53,820 --> 00:18:01,020
can see all the different colors it gets

00:17:57,210 --> 00:18:03,750
although to be fair there's also another

00:18:01,020 --> 00:18:06,270
way to colorize images by using blending

00:18:03,750 --> 00:18:12,810
modes so here have used the background

00:18:06,270 --> 00:18:14,790
color of of agenda basically and light

00:18:12,810 --> 00:18:19,580
magenta and the blending mode of

00:18:14,790 --> 00:18:21,780
multiply which creates this effect if

00:18:19,580 --> 00:18:23,460
this is white which is one hundred

00:18:21,780 --> 00:18:26,820
percent lightness it's exactly the same

00:18:23,460 --> 00:18:31,050
images I had to begin with otherwise it

00:18:26,820 --> 00:18:34,020
blends it blends pics of the pixels

00:18:31,050 --> 00:18:35,940
together in this way so what the

00:18:34,020 --> 00:18:37,980
multiply filter basically does is that

00:18:35,940 --> 00:18:41,370
it multiplies together the components of

00:18:37,980 --> 00:18:44,730
both colors they need to be on this on a

00:18:41,370 --> 00:18:46,320
0 to 1 scale before obviously before

00:18:44,730 --> 00:18:49,350
they are multiplied otherwise you'll get

00:18:46,320 --> 00:18:53,880
a huge number so I've divided them by

00:18:49,350 --> 00:18:56,880
255 to make them on 021 scale and then x

00:18:53,880 --> 00:18:57,690
them by 255 to make them a real RGB

00:18:56,880 --> 00:18:59,460
color

00:18:57,690 --> 00:19:01,409
but this is basically how it works which

00:18:59,460 --> 00:19:03,210
is where the name multiply comes for

00:19:01,409 --> 00:19:04,950
this blending bowl that I'm sure if any

00:19:03,210 --> 00:19:07,399
of you has ever used Photoshop blending

00:19:04,950 --> 00:19:11,039
modes this is like the most popular one

00:19:07,399 --> 00:19:13,980
multiply and the reason the image gets

00:19:11,039 --> 00:19:16,850
so much darker but when you use this

00:19:13,980 --> 00:19:20,610
blending mode remember when I used like

00:19:16,850 --> 00:19:22,320
this color with with the blending mode

00:19:20,610 --> 00:19:23,940
of multiply you can see how it got so

00:19:22,320 --> 00:19:26,370
much darker and the reason for that is

00:19:23,940 --> 00:19:28,679
this is an example of using multiply to

00:19:26,370 --> 00:19:30,299
blend red and blue together and you

00:19:28,679 --> 00:19:32,970
imagine and you think based on the

00:19:30,299 --> 00:19:37,379
algorithm above what kind of color it

00:19:32,970 --> 00:19:41,669
would generate so 255 for red would be x

00:19:37,379 --> 00:19:43,620
0 here and then 255 for blue would be x

00:19:41,669 --> 00:19:47,490
the 0 for their bread so you would end

00:19:43,620 --> 00:19:50,669
up with luck so when using multiply you

00:19:47,490 --> 00:19:52,470
always end up with darker colors every

00:19:50,669 --> 00:19:56,580
color is at least as dark as the darkest

00:19:52,470 --> 00:19:59,070
color you have and there are very

00:19:56,580 --> 00:20:01,230
there's multiply but there are many

00:19:59,070 --> 00:20:03,450
other blending modes as well which you

00:20:01,230 --> 00:20:06,750
can see here in this awful graphic which

00:20:03,450 --> 00:20:08,490
looks horrible but it's so cases what

00:20:06,750 --> 00:20:10,470
you could what's possible with blending

00:20:08,490 --> 00:20:12,389
modes and as you can see I've used

00:20:10,470 --> 00:20:15,570
chrome of use firefox they worked in

00:20:12,389 --> 00:20:18,450
both they there although in firefox they

00:20:15,570 --> 00:20:20,610
require a flag to be enabled no ending

00:20:18,450 --> 00:20:22,320
chrome so currently their experimental

00:20:20,610 --> 00:20:25,500
because you need to turn on a flag to

00:20:22,320 --> 00:20:27,299
use them but soon enough and there are

00:20:25,500 --> 00:20:29,460
things that these are things that you

00:20:27,299 --> 00:20:30,809
can use and they degrade pretty

00:20:29,460 --> 00:20:34,409
gracefully so as long as they're in a

00:20:30,809 --> 00:20:35,730
browser you can just use them and block

00:20:34,409 --> 00:20:37,049
browsers that don't support blending

00:20:35,730 --> 00:20:40,500
modes will just get the regular version

00:20:37,049 --> 00:20:41,610
of an image which is not like said which

00:20:40,500 --> 00:20:43,320
is not a horrible thing because you

00:20:41,610 --> 00:20:46,649
usually use blending modes for some sort

00:20:43,320 --> 00:20:51,629
of image effect they're not crucial for

00:20:46,649 --> 00:20:53,549
functionality anyway back to hsl hsl

00:20:51,629 --> 00:20:55,080
seemed much better than RGB and

00:20:53,549 --> 00:20:57,240
everybody was raving about it a few

00:20:55,080 --> 00:20:59,159
years ago when it was introduced but do

00:20:57,240 --> 00:21:04,440
you see here one of the problems with

00:20:59,159 --> 00:21:07,529
hsl so one of the big problems with hsl

00:21:04,440 --> 00:21:10,500
is that lightness is not really

00:21:07,529 --> 00:21:11,490
lightness so here we have yellow which

00:21:10,500 --> 00:21:13,679
is a really light call

00:21:11,490 --> 00:21:15,450
in blue which is really quite dark color

00:21:13,679 --> 00:21:19,620
but they both have the same value of

00:21:15,450 --> 00:21:23,370
lightness and the reason for that is

00:21:19,620 --> 00:21:26,309
that RGB does not have this property

00:21:23,370 --> 00:21:28,559
called perpetual uniformity perpetual

00:21:26,309 --> 00:21:30,300
uniformity is when the perceptual

00:21:28,559 --> 00:21:31,980
similarity of two colors is measured by

00:21:30,300 --> 00:21:34,800
the distance between them remember the

00:21:31,980 --> 00:21:36,960
air to be cube in the beginning if the

00:21:34,800 --> 00:21:39,059
RGB color space was perceptually uniform

00:21:36,960 --> 00:21:42,420
you could measure the space the distance

00:21:39,059 --> 00:21:43,679
between two points in the cube and the

00:21:42,420 --> 00:21:45,210
Oblivion distance between these two

00:21:43,679 --> 00:21:47,010
points would represent how different

00:21:45,210 --> 00:21:49,860
they are so it would be really easy to

00:21:47,010 --> 00:21:53,220
determine how similar two colors are but

00:21:49,860 --> 00:21:56,130
our job is not perceptually uniform and

00:21:53,220 --> 00:21:58,830
neither is hsl because hsl is just RGB

00:21:56,130 --> 00:22:01,290
it's just an easier way to refer to RGB

00:21:58,830 --> 00:22:03,900
but it has the same flaws you can see

00:22:01,290 --> 00:22:06,000
the same problem here with RGB both the

00:22:03,900 --> 00:22:07,620
first and the third color have exactly

00:22:06,000 --> 00:22:10,470
the same distance from the second one

00:22:07,620 --> 00:22:11,880
which is just fuchsia but as you can see

00:22:10,470 --> 00:22:13,850
that the third one looks much more

00:22:11,880 --> 00:22:19,230
different than the first and second ones

00:22:13,850 --> 00:22:22,260
you can see that in the cube here that

00:22:19,230 --> 00:22:24,030
basically fuchsia is this point and then

00:22:22,260 --> 00:22:26,580
the other colors were this midpoint and

00:22:24,030 --> 00:22:30,750
this midpoint so they have exactly the

00:22:26,580 --> 00:22:32,490
same distance it's 128 but the the

00:22:30,750 --> 00:22:38,400
perceived distance is much different is

00:22:32,490 --> 00:22:40,500
very different so if we used the hsl

00:22:38,400 --> 00:22:42,660
lightness to determine how light the

00:22:40,500 --> 00:22:44,370
color is for example to decide if we

00:22:42,660 --> 00:22:46,679
should put black text on it or white

00:22:44,370 --> 00:22:48,510
text we would end up with pretty strange

00:22:46,679 --> 00:22:51,270
results like white text on yellow or

00:22:48,510 --> 00:22:53,400
black text on blue and the reason for

00:22:51,270 --> 00:22:55,860
that is that this is how lightness is

00:22:53,400 --> 00:22:58,610
calculated if we wanted to add the

00:22:55,860 --> 00:23:01,740
lightness gather to our color class a

00:22:58,610 --> 00:23:06,059
class javascript doesn't exactly have

00:23:01,740 --> 00:23:08,640
classes the color the code would look

00:23:06,059 --> 00:23:10,380
like a little like this as you can see

00:23:08,640 --> 00:23:12,300
you're getting the maximum of the RGB

00:23:10,380 --> 00:23:14,130
component the myth of components the

00:23:12,300 --> 00:23:16,200
minimum of the RGB components and then

00:23:14,130 --> 00:23:18,179
you're returning the average of these of

00:23:16,200 --> 00:23:22,290
this minimum and maximum in the right

00:23:18,179 --> 00:23:24,809
scale 0 to 100 so do you notice

00:23:22,290 --> 00:23:25,110
something here it doesn't matter whether

00:23:24,809 --> 00:23:27,720
the

00:23:25,110 --> 00:23:30,980
maximum or minimum is blue or red or

00:23:27,720 --> 00:23:33,390
green it doesn't account for differences

00:23:30,980 --> 00:23:35,250
between the between red green and blue

00:23:33,390 --> 00:23:38,790
at all however our eyes are much more

00:23:35,250 --> 00:23:40,860
sensitive to blue and done red and much

00:23:38,790 --> 00:23:43,620
more sensitive to red than green we see

00:23:40,860 --> 00:23:46,710
the green as much lighter than red which

00:23:43,620 --> 00:23:48,299
is also much lighter than blue and this

00:23:46,710 --> 00:23:50,460
is why we end up with these really weird

00:23:48,299 --> 00:23:54,960
lightness values for colors that are

00:23:50,460 --> 00:23:57,059
obviously not as dark or light as the

00:23:54,960 --> 00:23:59,760
lightness value says there is another

00:23:57,059 --> 00:24:01,830
measure called relative luminance which

00:23:59,760 --> 00:24:03,929
is much better although it also it's

00:24:01,830 --> 00:24:06,030
also imperfect but it's much better for

00:24:03,929 --> 00:24:08,549
this sort of thing and I don't expect

00:24:06,030 --> 00:24:10,440
you to memorize or to memorize this

00:24:08,549 --> 00:24:12,090
algorithm and I've just put it up there

00:24:10,440 --> 00:24:13,679
to show you that it's not something

00:24:12,090 --> 00:24:17,190
complicated it's just a few lines of

00:24:13,679 --> 00:24:19,169
code and mainly the brilliance of

00:24:17,190 --> 00:24:21,990
relative luminance is the return

00:24:19,169 --> 00:24:23,610
statement here as you can see red is way

00:24:21,990 --> 00:24:26,820
differently than green which is weight

00:24:23,610 --> 00:24:28,260
differently than blue relative luminance

00:24:26,820 --> 00:24:30,809
accounts for the differences between

00:24:28,260 --> 00:24:33,540
these three components which is why it

00:24:30,809 --> 00:24:37,260
yields much more accurate values so this

00:24:33,540 --> 00:24:39,059
in this slide I can enter a color value

00:24:37,260 --> 00:24:42,030
and see the luminance and lightness

00:24:39,059 --> 00:24:45,390
values and depending on whether they're

00:24:42,030 --> 00:24:48,870
above or below 50 / 50 it also sets the

00:24:45,390 --> 00:24:51,900
text color for this and this so if I use

00:24:48,870 --> 00:24:54,750
yellow you can see that luminance is

00:24:51,900 --> 00:24:57,510
ninety-three percent which is much

00:24:54,750 --> 00:24:59,640
closer than what we'd expect white by

00:24:57,510 --> 00:25:03,240
the way is a hundred percent black is

00:24:59,640 --> 00:25:05,850
zero percent so yellow is much closer to

00:25:03,240 --> 00:25:07,710
white which is something we'd expect and

00:25:05,850 --> 00:25:10,100
as you can see lightness yields is

00:25:07,710 --> 00:25:13,440
really weird fifty percent result and

00:25:10,100 --> 00:25:16,260
similarly bluish is fifty-seven percent

00:25:13,440 --> 00:25:20,730
which is much closer to black then dunt

00:25:16,260 --> 00:25:24,150
white so it fits much much closer what

00:25:20,730 --> 00:25:26,700
we would what we would think but it's

00:25:24,150 --> 00:25:29,220
not perfect as you can see here if i

00:25:26,700 --> 00:25:34,530
enter orange lumen relative luminance is

00:25:29,220 --> 00:25:37,200
forty-eight percent which and it would

00:25:34,530 --> 00:25:38,550
you yield a text color of white but it

00:25:37,200 --> 00:25:38,820
would be much better with a text color

00:25:38,550 --> 00:25:41,610
of

00:25:38,820 --> 00:25:45,990
of black so it should it should really

00:25:41,610 --> 00:25:47,909
be above fifty percent but at least with

00:25:45,990 --> 00:25:53,059
relative luminance you don't get the the

00:25:47,909 --> 00:25:55,740
kind of awful mistakes as lightness and

00:25:53,059 --> 00:25:58,259
relative luminance is used in the color

00:25:55,740 --> 00:26:00,090
contrast definition in the web

00:25:58,259 --> 00:26:01,769
accessibility guidelines this is exactly

00:26:00,090 --> 00:26:04,019
the formula for calculating color

00:26:01,769 --> 00:26:05,309
contrast you just get the tomb luminance

00:26:04,019 --> 00:26:07,529
ha's and basically find the ratio

00:26:05,309 --> 00:26:10,860
between them the only reason it's adding

00:26:07,529 --> 00:26:13,259
point 05 / to each of them is just so

00:26:10,860 --> 00:26:17,970
that you don't end up dividing by zero

00:26:13,259 --> 00:26:19,350
and when I was working at w3c I had to

00:26:17,970 --> 00:26:21,889
pass web the web accessibility

00:26:19,350 --> 00:26:24,629
guidelines every time I made anything

00:26:21,889 --> 00:26:29,970
and I connected to the Internet I should

00:26:24,629 --> 00:26:31,409
be so I had to pass the web

00:26:29,970 --> 00:26:34,710
accessibility guidelines every time I

00:26:31,409 --> 00:26:37,019
made anything and all the existing tools

00:26:34,710 --> 00:26:39,059
for measuring contrast ratio needed hex

00:26:37,019 --> 00:26:40,590
colors and I guess you figured out by

00:26:39,059 --> 00:26:42,269
now I don't really like hex colors very

00:26:40,590 --> 00:26:43,980
much even though I'm so used to them

00:26:42,269 --> 00:26:46,259
that sometimes you'll see me using them

00:26:43,980 --> 00:26:48,240
as well but they're really not very

00:26:46,259 --> 00:26:51,419
there they're not very intuitive so I

00:26:48,240 --> 00:26:53,490
had to copy the CSS values i was using

00:26:51,419 --> 00:26:56,070
in my style sheet which were like hsl

00:26:53,490 --> 00:26:59,669
values or whatever convert them to

00:26:56,070 --> 00:27:01,529
stretch it to hex and then use these

00:26:59,669 --> 00:27:03,990
tools until I got fed up and member and

00:27:01,529 --> 00:27:05,730
made my own tool which also accounts for

00:27:03,990 --> 00:27:08,220
transparency which is not as simple as

00:27:05,730 --> 00:27:10,679
it seems so when you have a

00:27:08,220 --> 00:27:12,840
semi-transparent text color it's it's

00:27:10,679 --> 00:27:14,399
easy to make to measure the contrast

00:27:12,840 --> 00:27:16,230
ratio because when you put it on an

00:27:14,399 --> 00:27:18,899
opaque background color you basically

00:27:16,230 --> 00:27:20,370
get through opaque colors so you can you

00:27:18,899 --> 00:27:22,649
can measure out the you can measure the

00:27:20,370 --> 00:27:25,230
contrast ratio between them but what

00:27:22,649 --> 00:27:26,940
happens if if it's the background color

00:27:25,230 --> 00:27:28,620
that semi-transparent because then the

00:27:26,940 --> 00:27:31,139
contrast ratio be depends on what you

00:27:28,620 --> 00:27:33,029
have underneath so you can't really get

00:27:31,139 --> 00:27:35,549
a single contrast ratio value it's a

00:27:33,029 --> 00:27:38,220
range so I added this plus minus thing

00:27:35,549 --> 00:27:40,259
and as you can see the range becomes

00:27:38,220 --> 00:27:44,399
bigger as the transparency becomes

00:27:40,259 --> 00:27:46,080
smaller and I had to do my own research

00:27:44,399 --> 00:27:47,639
on this because the web accessibility

00:27:46,080 --> 00:27:49,260
guidelines didn't have anything about

00:27:47,639 --> 00:27:50,530
transparency nobody apparently nobody

00:27:49,260 --> 00:27:51,490
had even considered

00:27:50,530 --> 00:27:53,710
the fact that you might have

00:27:51,490 --> 00:27:57,100
semi-transparent colors it just was

00:27:53,710 --> 00:28:03,180
completely out of their mind of whoever

00:27:57,100 --> 00:28:05,140
wrote those guidelines so like I said I

00:28:03,180 --> 00:28:07,120
mentioned semi-transparent colors

00:28:05,140 --> 00:28:09,360
earlier in this this is this is another

00:28:07,120 --> 00:28:12,700
thing we got with CSS collar level three

00:28:09,360 --> 00:28:14,020
we got semi-transparent colors and I'm

00:28:12,700 --> 00:28:16,650
sure you you were all really excited

00:28:14,020 --> 00:28:22,510
when we got semi-transparent colors

00:28:16,650 --> 00:28:25,470
every developer was and they work with

00:28:22,510 --> 00:28:28,480
as you know they work with both hsl and

00:28:25,470 --> 00:28:30,040
RGB but have you ever wondered how they

00:28:28,480 --> 00:28:32,170
actually work because our screen doesn't

00:28:30,040 --> 00:28:34,330
have transparent pixels what you do see

00:28:32,170 --> 00:28:36,220
the circuits behind the screen so

00:28:34,330 --> 00:28:37,750
everything needs to be composited into a

00:28:36,220 --> 00:28:39,160
big pixels and this is called with the

00:28:37,750 --> 00:28:43,090
process this is done with the process

00:28:39,160 --> 00:28:44,890
called alpha blending so this is how

00:28:43,090 --> 00:28:47,350
alpha blending would work if we would if

00:28:44,890 --> 00:28:48,670
we were to implement it in JavaScript

00:28:47,350 --> 00:28:50,890
obviously our screen doesn't implement

00:28:48,670 --> 00:28:53,440
it in JavaScript it's probably in

00:28:50,890 --> 00:28:57,160
assembly but this is the main idea

00:28:53,440 --> 00:29:01,060
behind it you multiply every every color

00:28:57,160 --> 00:29:04,270
component with its own alpha and also if

00:29:01,060 --> 00:29:06,520
it's the color underneath by 1 minus the

00:29:04,270 --> 00:29:07,420
Alpha of the color above and then

00:29:06,520 --> 00:29:10,210
obviously the alpha increases

00:29:07,420 --> 00:29:12,990
accordingly because if you have like a

00:29:10,210 --> 00:29:14,890
fifty percent read above on top of

00:29:12,990 --> 00:29:18,040
twenty-five percent below you would

00:29:14,890 --> 00:29:19,870
obviously get like a an alpha that's

00:29:18,040 --> 00:29:23,740
bigger than fifty percent for the final

00:29:19,870 --> 00:29:26,050
color and similarly to alpha blending is

00:29:23,740 --> 00:29:29,290
color interpolation which is mixing two

00:29:26,050 --> 00:29:31,360
colors together ah by a certain weight

00:29:29,290 --> 00:29:32,500
if the weight is fifty percent it's

00:29:31,360 --> 00:29:35,350
basically the average of these two

00:29:32,500 --> 00:29:36,880
colors it's much easier than the other

00:29:35,350 --> 00:29:39,370
than the algorithm for alpha blending

00:29:36,880 --> 00:29:40,810
and also unlike the algorithm for alpha

00:29:39,370 --> 00:29:42,940
blending this gives you exactly the same

00:29:40,810 --> 00:29:46,270
results regardless of which color is

00:29:42,940 --> 00:29:49,620
first so you just multiply every

00:29:46,270 --> 00:29:53,200
component of the color by the weight and

00:29:49,620 --> 00:29:54,280
then the the other color by 1 minus the

00:29:53,200 --> 00:29:56,230
weight which is basically one hundred

00:29:54,280 --> 00:29:57,670
percent minus the weight you have so if

00:29:56,230 --> 00:29:59,170
you have the weight is fifty percent

00:29:57,670 --> 00:30:02,500
which is the out of the average between

00:29:59,170 --> 00:30:03,610
these colors the way this you multiply

00:30:02,500 --> 00:30:05,080
every component

00:30:03,610 --> 00:30:07,179
fifty percent because this would also be

00:30:05,080 --> 00:30:09,100
fifty percent and sus supports this

00:30:07,179 --> 00:30:11,350
natively by the way you buy the function

00:30:09,100 --> 00:30:12,970
called mix you can provide two colors

00:30:11,350 --> 00:30:15,760
and the percentage and it does exactly

00:30:12,970 --> 00:30:19,299
this but color interpolation is not just

00:30:15,760 --> 00:30:21,340
used for colors it's also it's exactly

00:30:19,299 --> 00:30:22,660
how gradients work you start with for

00:30:21,340 --> 00:30:25,809
example in this gradient you start with

00:30:22,660 --> 00:30:28,059
white you go towards black and every

00:30:25,809 --> 00:30:30,370
color in between is calculated by the by

00:30:28,059 --> 00:30:32,710
the same algorithm and this is really

00:30:30,370 --> 00:30:36,000
simple when you have a caller a gradient

00:30:32,710 --> 00:30:38,380
from white to black but what happens

00:30:36,000 --> 00:30:40,919
what happens when you have a gradient

00:30:38,380 --> 00:30:47,049
for example from white to transparent

00:30:40,919 --> 00:30:51,220
transparent is just a shortcut to RGB a

00:30:47,049 --> 00:30:54,610
with all zeros so as our color is

00:30:51,220 --> 00:30:56,470
transitioning from white to from from a

00:30:54,610 --> 00:30:58,540
completely opaque to completely

00:30:56,470 --> 00:31:01,330
transparent it's also transitioning from

00:30:58,540 --> 00:31:02,770
white to black so you can you can see

00:31:01,330 --> 00:31:06,690
this more clearly if I add a white

00:31:02,770 --> 00:31:09,309
background as well this is not white

00:31:06,690 --> 00:31:10,900
that we got here we were expecting to

00:31:09,309 --> 00:31:13,929
get solid white because we had wiped the

00:31:10,900 --> 00:31:16,480
transparent on white so what would you

00:31:13,929 --> 00:31:19,059
expect to get I would expect to get just

00:31:16,480 --> 00:31:22,270
the solid white but that's not the case

00:31:19,059 --> 00:31:24,700
and the reason for that is that this is

00:31:22,270 --> 00:31:27,250
this is how the intermediate colors look

00:31:24,700 --> 00:31:32,040
for example the midpoint you get this

00:31:27,250 --> 00:31:35,410
fifty percent transparent gray to get

00:31:32,040 --> 00:31:37,150
the intended effect you should use a

00:31:35,410 --> 00:31:39,340
transparent version of white which in

00:31:37,150 --> 00:31:41,290
you could either provide with hsla or

00:31:39,340 --> 00:31:42,850
our GPA and you can see the difference

00:31:41,290 --> 00:31:45,540
here which should make it really clear

00:31:42,850 --> 00:31:48,100
in case you couldn't see it earlier

00:31:45,540 --> 00:31:49,840
however this is not needed anymore for

00:31:48,100 --> 00:31:52,150
every browser this is mainly needed

00:31:49,840 --> 00:31:53,799
today for Firefox because the spec

00:31:52,150 --> 00:31:56,530
changed after people started using

00:31:53,799 --> 00:31:58,570
gradients from colors to transparent we

00:31:56,530 --> 00:32:02,380
realize that this is not what author is

00:31:58,570 --> 00:32:04,390
expected this this is like a major WTF

00:32:02,380 --> 00:32:07,860
what's going on here why do I have this

00:32:04,390 --> 00:32:12,280
gray my gradient so we changed the

00:32:07,860 --> 00:32:14,680
Nabateans changed the way color

00:32:12,280 --> 00:32:18,160
interpolation works

00:32:14,680 --> 00:32:19,930
and now it's supposed to happen what in

00:32:18,160 --> 00:32:21,730
what's called the pre multiplied rgba

00:32:19,930 --> 00:32:24,160
space which means every color is stored

00:32:21,730 --> 00:32:26,080
month after its multiplied by itself a

00:32:24,160 --> 00:32:27,670
value so you can't have a transparent

00:32:26,080 --> 00:32:31,510
black anymore you can just have

00:32:27,670 --> 00:32:35,050
transparent so if you if you test the

00:32:31,510 --> 00:32:38,710
same gradient in chrome you will see

00:32:35,050 --> 00:32:43,150
that it's these two gradients are

00:32:38,710 --> 00:32:44,680
exactly the same as you can see now I

00:32:43,150 --> 00:32:47,200
loaded it in chrome and these gradients

00:32:44,680 --> 00:32:49,990
are exactly the same because chrome uses

00:32:47,200 --> 00:32:53,530
a primo pre multiplied RGB a space for

00:32:49,990 --> 00:32:56,020
the four color interpolation and we also

00:32:53,530 --> 00:32:59,290
got more named colors which weren't

00:32:56,020 --> 00:33:02,470
exactly evenly distributed or easy to

00:32:59,290 --> 00:33:05,470
use you can see these are these are so

00:33:02,470 --> 00:33:08,410
long that it would be more efficient to

00:33:05,470 --> 00:33:10,390
just use an RGB notation and they're not

00:33:08,410 --> 00:33:15,940
exactly like easy to remember who would

00:33:10,390 --> 00:33:19,150
remember light goldenrod yellow or some

00:33:15,940 --> 00:33:20,830
of them were even really weird to

00:33:19,150 --> 00:33:23,320
understand why they produce the shade

00:33:20,830 --> 00:33:25,360
they produce or orchid for example is a

00:33:23,320 --> 00:33:29,440
flower with multiple colors why did they

00:33:25,360 --> 00:33:32,860
pick this one or old lace my absent

00:33:29,440 --> 00:33:34,750
laces that are different or all these

00:33:32,860 --> 00:33:38,040
are really strange and then you get the

00:33:34,750 --> 00:33:38,040
ones that are even racist

00:33:41,950 --> 00:33:46,540
and then there's a completely insane

00:33:52,040 --> 00:33:57,030
if you're wondering by the way how on

00:33:54,990 --> 00:34:00,299
earth did we end up with this it's

00:33:57,030 --> 00:34:02,549
because gray was one of the first 16

00:34:00,299 --> 00:34:05,520
colors we got if you remember with HTML

00:34:02,549 --> 00:34:07,140
3.2 so we already have gray and it

00:34:05,520 --> 00:34:08,850
already meant that because that's what

00:34:07,140 --> 00:34:10,889
it meant in the windows are a vga

00:34:08,850 --> 00:34:14,310
palette but then when we got all these

00:34:10,889 --> 00:34:17,159
new color names these came from X 11 and

00:34:14,310 --> 00:34:18,600
x11 also had a gray name color with a

00:34:17,159 --> 00:34:21,030
different shade of gray there was

00:34:18,600 --> 00:34:22,500
actually lighter than this dark gray but

00:34:21,030 --> 00:34:24,780
we couldn't change gray cause so many

00:34:22,500 --> 00:34:26,909
websites were already using it so we

00:34:24,780 --> 00:34:29,070
ended up a dope adopting dark gray but

00:34:26,909 --> 00:34:33,780
grey remains the way it was which is why

00:34:29,070 --> 00:34:37,710
we ended up with this we also got a

00:34:33,780 --> 00:34:39,480
really useful color name that's very

00:34:37,710 --> 00:34:41,429
different from the color names i already

00:34:39,480 --> 00:34:44,159
showed so i'm sure if you if you've

00:34:41,429 --> 00:34:46,139
you've definitely tried using a border

00:34:44,159 --> 00:34:48,540
without a color and you know that it

00:34:46,139 --> 00:34:51,629
defaults to the text color so here if i

00:34:48,540 --> 00:34:54,109
change the text color it just gets the

00:34:51,629 --> 00:34:59,640
border just gets the text color as well

00:34:54,109 --> 00:35:03,980
what on earth is this ah many properties

00:34:59,640 --> 00:35:09,750
have the same behavior for example

00:35:03,980 --> 00:35:13,609
box-shadow if I specify box shadow

00:35:09,750 --> 00:35:18,359
without a color it gets the text color

00:35:13,609 --> 00:35:21,869
if I change the text color that changes

00:35:18,359 --> 00:35:23,850
as well similarly text shadow also gets

00:35:21,869 --> 00:35:28,650
the text color there are a few of these

00:35:23,850 --> 00:35:36,710
properties that work in that way let's

00:35:28,650 --> 00:35:39,180
go back to border so in CSS 2.1 this

00:35:36,710 --> 00:35:42,690
this behavior was described in every

00:35:39,180 --> 00:35:45,240
property that that had this behavior the

00:35:42,690 --> 00:35:47,640
text said if there's no color provided

00:35:45,240 --> 00:35:49,440
it should tech is it should get the text

00:35:47,640 --> 00:35:51,500
color or something like that in CSS

00:35:49,440 --> 00:35:54,119
called 11-3 we got a keyword that

00:35:51,500 --> 00:35:56,550
specifies this behavior and it's called

00:35:54,119 --> 00:35:58,440
current color comes from SVG SVG had

00:35:56,550 --> 00:36:00,750
this before CSS and

00:35:58,440 --> 00:36:03,210
by the way its current color with a you

00:36:00,750 --> 00:36:07,560
with an O not with a you this doesn't

00:36:03,210 --> 00:36:09,750
work I've once written an article for

00:36:07,560 --> 00:36:12,150
British magazine so they Britta fide all

00:36:09,750 --> 00:36:16,550
my words and the other day you in

00:36:12,150 --> 00:36:21,440
parentcolor and it ended up not working

00:36:16,550 --> 00:36:23,670
fun times so you might be wondering

00:36:21,440 --> 00:36:25,380
since all these properties have this

00:36:23,670 --> 00:36:27,780
behavior by default how's this useful

00:36:25,380 --> 00:36:29,310
first off it's useful when you want to

00:36:27,780 --> 00:36:30,780
override something when you have a red

00:36:29,310 --> 00:36:32,640
border and you want to override it with

00:36:30,780 --> 00:36:34,560
the default behavior but it's also

00:36:32,640 --> 00:36:36,150
useful for other things like backgrounds

00:36:34,560 --> 00:36:40,079
so assume I want to have a background

00:36:36,150 --> 00:36:44,910
which is like scan lines that take the

00:36:40,079 --> 00:36:49,290
the text color so I would do something

00:36:44,910 --> 00:36:56,550
like this and specify background sighs

00:36:49,290 --> 00:36:58,920
that's sort of smaller and i would get

00:36:56,550 --> 00:37:04,589
something like this i can even modify

00:36:58,920 --> 00:37:07,770
the size of the scan lines by modifying

00:37:04,589 --> 00:37:11,000
the color stop positions and then if i

00:37:07,770 --> 00:37:14,670
change this to whatever color it please

00:37:11,000 --> 00:37:16,589
it automatically changes current color

00:37:14,670 --> 00:37:19,710
is basically the first variable we got

00:37:16,589 --> 00:37:21,420
in CSS we will eventually get real

00:37:19,710 --> 00:37:24,359
variables there's a speck about it it's

00:37:21,420 --> 00:37:26,099
called custom properties but don't don't

00:37:24,359 --> 00:37:30,089
be misled by the name they're basically

00:37:26,099 --> 00:37:31,349
they basically are like variables there

00:37:30,089 --> 00:37:32,369
are more of them variables actually

00:37:31,349 --> 00:37:34,020
because they but can be used like

00:37:32,369 --> 00:37:37,170
properties but they can also be used

00:37:34,020 --> 00:37:40,920
like variables but anyway until this is

00:37:37,170 --> 00:37:43,859
implemented current color is the first

00:37:40,920 --> 00:37:45,510
and only CSS variable we have today and

00:37:43,859 --> 00:37:47,190
it's really useful for things like

00:37:45,510 --> 00:37:48,780
decorations and pseudo elements for

00:37:47,190 --> 00:37:51,329
example especially when you don't have

00:37:48,780 --> 00:37:52,770
any text so you can just specify a color

00:37:51,329 --> 00:37:54,990
value that's not going to be seen in any

00:37:52,770 --> 00:37:57,839
text anywhere and then just use call it

00:37:54,990 --> 00:38:00,990
current color as as a variable basically

00:37:57,839 --> 00:38:05,099
so to sum up in CSS caller level 3 we

00:38:00,990 --> 00:38:07,349
got hsl better but not great RGBA hsla

00:38:05,099 --> 00:38:10,470
which were badly needed more color names

00:38:07,349 --> 00:38:11,430
still mostly useless and current color

00:38:10,470 --> 00:38:14,309
which is really cool

00:38:11,430 --> 00:38:16,170
but sort of limited and then comes CSS

00:38:14,309 --> 00:38:18,950
color level for everything i'm going to

00:38:16,170 --> 00:38:21,240
save from this point is really tentative

00:38:18,950 --> 00:38:22,680
the syntax might change the

00:38:21,240 --> 00:38:24,599
functionality probably will be

00:38:22,680 --> 00:38:26,069
implemented in one way or another but

00:38:24,599 --> 00:38:29,970
the syntax might change because the spec

00:38:26,069 --> 00:38:31,980
is currently in editors draft and some

00:38:29,970 --> 00:38:33,569
of them are more stable than others so

00:38:31,980 --> 00:38:36,150
the first thing is gray will become a

00:38:33,569 --> 00:38:38,880
function so the great keyword is

00:38:36,150 --> 00:38:40,829
equivalent to fifty percent and we'll be

00:38:38,880 --> 00:38:43,859
able to adjust this parameter to

00:38:40,829 --> 00:38:50,520
whatever value we please and it will

00:38:43,859 --> 00:38:53,190
also accept values from a hundred to 255

00:38:50,520 --> 00:38:55,770
just like RGB but percentages are better

00:38:53,190 --> 00:38:59,069
and you can also provide an alpha value

00:38:55,770 --> 00:39:01,589
so you can use it for for anything white

00:38:59,069 --> 00:39:03,359
black transparent grey anything of that

00:39:01,589 --> 00:39:07,050
sort which is like fifty percent at

00:39:03,359 --> 00:39:09,240
least of the colors we use websites you

00:39:07,050 --> 00:39:10,859
can use great today with sass by

00:39:09,240 --> 00:39:13,500
implement if you implement it like this

00:39:10,859 --> 00:39:17,490
and it's exactly the same syntax as CSS

00:39:13,500 --> 00:39:19,140
has it's just one line obsess and if you

00:39:17,490 --> 00:39:22,559
were wondering about the RGB a function

00:39:19,140 --> 00:39:23,760
if it's an opaque color sass takes care

00:39:22,559 --> 00:39:25,170
of that automatically and it just

00:39:23,760 --> 00:39:28,109
converts it to a hex color for the

00:39:25,170 --> 00:39:29,520
browser we will also get four digit hex

00:39:28,109 --> 00:39:33,630
colors people have been asking them for

00:39:29,520 --> 00:39:35,549
age for them for ages even though even

00:39:33,630 --> 00:39:37,440
though hex is not exactly intuitive will

00:39:35,549 --> 00:39:40,020
we're so used to it that it seems more

00:39:37,440 --> 00:39:41,400
intuitive to us than other color formats

00:39:40,020 --> 00:39:46,619
sometimes just because we've been using

00:39:41,400 --> 00:39:48,180
it for years so the the fourth digit the

00:39:46,619 --> 00:39:51,630
first three digits will be exactly the

00:39:48,180 --> 00:39:54,000
same as a three digit hex code and the

00:39:51,630 --> 00:39:56,670
last digit will be an alpha trance at

00:39:54,000 --> 00:39:58,230
the alpha transparency so f will be

00:39:56,670 --> 00:40:00,030
completely transparent zero will be

00:39:58,230 --> 00:40:01,849
completely opaque and then you can

00:40:00,030 --> 00:40:04,799
figure out what the rest would mean and

00:40:01,849 --> 00:40:07,470
of course we will also get as you can

00:40:04,799 --> 00:40:10,710
imagine eight digit hex codes which will

00:40:07,470 --> 00:40:12,720
look like let's say like this i'm just

00:40:10,710 --> 00:40:15,270
writing a not a random color now i have

00:40:12,720 --> 00:40:18,329
no idea what this will produce so you

00:40:15,270 --> 00:40:20,250
can have colors like this because people

00:40:18,329 --> 00:40:22,829
have been asking for this as well it

00:40:20,250 --> 00:40:24,950
looks like damn like a serial

00:40:22,829 --> 00:40:27,079
number but

00:40:24,950 --> 00:40:30,440
people have been asking for this for

00:40:27,079 --> 00:40:37,670
ages so eventually we caved in and added

00:40:30,440 --> 00:40:39,920
it uh we will also get at least it it's

00:40:37,670 --> 00:40:41,930
sort of planned right now eventually

00:40:39,920 --> 00:40:44,750
this might change so this is there's a

00:40:41,930 --> 00:40:47,930
color model called HW b which is

00:40:44,750 --> 00:40:49,790
different than what Photoshop users and

00:40:47,930 --> 00:40:52,070
calls it HSP and it's also different

00:40:49,790 --> 00:40:55,130
from hsl it's a little more similar

00:40:52,070 --> 00:40:57,589
twist to HSP than hsl and it basically

00:40:55,130 --> 00:40:59,780
means you here is the same as it is for

00:40:57,589 --> 00:41:02,300
8482 cell and then the other two are

00:40:59,780 --> 00:41:04,640
whiteness and blackness so basically you

00:41:02,300 --> 00:41:06,290
get a base a base Hugh the one you get

00:41:04,640 --> 00:41:07,790
with hsl one hundred percent for

00:41:06,290 --> 00:41:09,349
saturation and fifty percent for

00:41:07,790 --> 00:41:11,780
lightness and then you mix it with white

00:41:09,349 --> 00:41:14,750
and black and it looks this index will

00:41:11,780 --> 00:41:18,410
look like this so I can mix it with

00:41:14,750 --> 00:41:21,380
white and make it a lighter color and I

00:41:18,410 --> 00:41:23,720
can mix it with black and make a darker

00:41:21,380 --> 00:41:27,740
color and if i mix it with equal amounts

00:41:23,720 --> 00:41:29,329
of white and black I get a sort of a

00:41:27,740 --> 00:41:34,900
chromatic color which doesn't have any

00:41:29,329 --> 00:41:37,430
hue and I can emulate h 2 WB with sass

00:41:34,900 --> 00:41:41,680
and I actually came up with this light

00:41:37,430 --> 00:41:45,800
like a few hours ago but you can emulate

00:41:41,680 --> 00:41:48,589
HW be with flat with with sass what this

00:41:45,800 --> 00:41:51,619
is doing its it's taking the base it's a

00:41:48,589 --> 00:41:53,630
cell Hugh like I said and then it

00:41:51,619 --> 00:41:55,220
modifies it according to the whiteness

00:41:53,630 --> 00:41:59,329
and blackness you've specified it's not

00:41:55,220 --> 00:42:02,089
exactly the same as HS as CSS will be

00:41:59,329 --> 00:42:03,440
because in CSS if you specify whiteness

00:42:02,089 --> 00:42:04,670
and blackness that add up to more than

00:42:03,440 --> 00:42:06,319
one hundred percent there will be more

00:42:04,670 --> 00:42:08,210
normalized and this doesn't have any

00:42:06,319 --> 00:42:09,770
normalization and also it doesn't have

00:42:08,210 --> 00:42:11,869
an alpha value which CSS will have but

00:42:09,770 --> 00:42:14,089
that's easy to add and you use it like

00:42:11,869 --> 00:42:15,680
this and SAS will convert it to a hex

00:42:14,089 --> 00:42:18,079
code and this is basically the same

00:42:15,680 --> 00:42:20,390
syntax you will use in CSS eventually so

00:42:18,079 --> 00:42:23,420
SAS in this case ends up acting like a

00:42:20,390 --> 00:42:25,339
polyfill we will also got a collar

00:42:23,420 --> 00:42:28,280
manipulation function called color which

00:42:25,339 --> 00:42:30,230
we can specify base color here where

00:42:28,280 --> 00:42:32,390
which can be whatever here I use the

00:42:30,230 --> 00:42:37,010
color name but it could be any color it

00:42:32,390 --> 00:42:38,109
could be this or anything even a

00:42:37,010 --> 00:42:40,180
variable when we

00:42:38,109 --> 00:42:42,009
eventually get them and then have a

00:42:40,180 --> 00:42:45,339
number of color adjusters like tint

00:42:42,009 --> 00:42:50,140
which makes it lighter shade which makes

00:42:45,339 --> 00:42:53,529
it darker or even blend which mixes it

00:42:50,140 --> 00:42:56,619
with another color you can see how this

00:42:53,529 --> 00:42:58,749
works here remember the mix function in

00:42:56,619 --> 00:43:00,609
SAS this is essentially when what blend

00:42:58,749 --> 00:43:04,269
will do and there are a number of other

00:43:00,609 --> 00:43:06,849
adjusters to do all sorts of things yeah

00:43:04,269 --> 00:43:09,130
you can emulate intense ass in shade in

00:43:06,849 --> 00:43:11,710
science ass already just with a line of

00:43:09,130 --> 00:43:14,890
code the syntax is different in this

00:43:11,710 --> 00:43:18,549
case than in CSS but it's it's still the

00:43:14,890 --> 00:43:19,749
same thing the output is the same and if

00:43:18,549 --> 00:43:22,079
you're using bourbon these are all

00:43:19,749 --> 00:43:24,489
tintin shade are already included and

00:43:22,079 --> 00:43:27,609
there is a preprocessor called methyl

00:43:24,489 --> 00:43:31,210
that implements caller manipulation in

00:43:27,609 --> 00:43:34,180
this way with the color function so it

00:43:31,210 --> 00:43:36,039
acts a bit like a polyfill so to sum up

00:43:34,180 --> 00:43:39,369
and these are there if you hear that i

00:43:36,039 --> 00:43:40,809
haven't mentioned in CSS caller level 4

00:43:39,369 --> 00:43:43,180
as it looks right now this is very

00:43:40,809 --> 00:43:46,690
tentative will get gray will get a gray

00:43:43,180 --> 00:43:49,089
function for an eight digit hex codes HW

00:43:46,690 --> 00:43:51,759
be the color adjustment function named

00:43:49,089 --> 00:43:54,009
hues and angles in hsl for example

00:43:51,759 --> 00:43:58,450
instead of saying 60 will be able to say

00:43:54,009 --> 00:44:00,460
yellow or 60 degrees and RGB and hsl

00:43:58,450 --> 00:44:01,960
will accept alpha values of fourth

00:44:00,460 --> 00:44:04,450
parameter so we won't have to change the

00:44:01,960 --> 00:44:05,380
function name and London a every time

00:44:04,450 --> 00:44:11,440
we're going to use semi-transparent

00:44:05,380 --> 00:44:13,329
color and before I leave you here is a

00:44:11,440 --> 00:44:15,999
snippet of code to parse any supported

00:44:13,329 --> 00:44:19,299
CSS color because some of you right

00:44:15,999 --> 00:44:21,069
tools for example i wrote a tool that

00:44:19,299 --> 00:44:23,859
converts between different CSS collar

00:44:21,069 --> 00:44:25,390
formats and people end up trying to

00:44:23,859 --> 00:44:28,569
parse every colors format available

00:44:25,390 --> 00:44:30,940
there are parsing CSS colors and they're

00:44:28,569 --> 00:44:32,289
parsing hsl colors you don't really need

00:44:30,940 --> 00:44:34,180
to do all that you can just let the

00:44:32,289 --> 00:44:36,880
browser do it for you so you can create

00:44:34,180 --> 00:44:38,589
a dummy element set its color then read

00:44:36,880 --> 00:44:39,970
it back to see if if it was retained

00:44:38,589 --> 00:44:42,640
because if it wasn't retained it wasn't

00:44:39,970 --> 00:44:44,019
valid and then repent it through

00:44:42,640 --> 00:44:45,220
somewhere in the document you can even a

00:44:44,019 --> 00:44:48,309
pendant in the head it doesn't need to

00:44:45,220 --> 00:44:50,410
be visible for this use case read it's

00:44:48,309 --> 00:44:51,550
computed style remove it clean up after

00:44:50,410 --> 00:44:53,680
yourselves and then

00:44:51,550 --> 00:44:57,010
us what you got back which will only be

00:44:53,680 --> 00:44:59,980
RGB or RGB a so you can then just parse

00:44:57,010 --> 00:45:01,630
the RGBA and create a color value you

00:44:59,980 --> 00:45:02,890
don't have to account for all the

00:45:01,630 --> 00:45:04,570
possible values that the browser

00:45:02,890 --> 00:45:06,040
understands which could be like named

00:45:04,570 --> 00:45:08,530
colors for example this is the tool I

00:45:06,040 --> 00:45:10,210
created for converting between different

00:45:08,530 --> 00:45:12,310
colors and so you can see I have entered

00:45:10,210 --> 00:45:15,070
a color name here and it just it

00:45:12,310 --> 00:45:17,530
converted it by using this trick so

00:45:15,070 --> 00:45:20,460
that's about it thank you very much I

00:45:17,530 --> 00:45:20,460

YouTube URL: https://www.youtube.com/watch?v=qqbZBnLVn74


