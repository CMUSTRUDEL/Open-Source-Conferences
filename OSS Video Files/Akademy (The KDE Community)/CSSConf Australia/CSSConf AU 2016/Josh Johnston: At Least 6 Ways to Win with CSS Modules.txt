Title: Josh Johnston: At Least 6 Ways to Win with CSS Modules
Publication date: 2017-05-19
Playlist: CSSConf AU 2016
Description: 
	Thank you to Mozilla for making video recording possible.

Creating a maintainable CSS architecture has always been a challenge. Many tools aim to enhance CSS and extend the language to overcome this challenge, but CSS Modules takes a different tack. While it does make a few additions to the language, more significant is what it takes away. And this is something that many people don't realise at first: CSS Modules actually makes certain things harder!

Many newcomers to CSS Modules have run into frustration because the strategies they previously relied on now seem unnecessarily complicated. This is no accident; CSS Modules comes with some opinions about CSS and we can learn a lot of useful patterns by following the cowpath it paves.

We'll explore these patterns and think out their implications. I'll draw on what I've learned from creating and maintaining a large CSS Modules architecture over the last 12 months, running workshops and helping to address questions on github. We'll also look at some of the common frustrations people face when starting with CSS Modules and some practical examples of how to achieve the same result but in a more maintainable way.

My hope is to pass on the principles that will enable newcomers to get the most out of CSS Modules and to show that, while opinionated in some ways, what we get in exchange is a simple yet powerful tool that helps us to win at every stage of the project, from authoring to modifying, debugging and maintaining.
Captions: 
	00:00:05,779 --> 00:00:14,240
thank you for the introduction hi

00:00:11,880 --> 00:00:14,240
everyone

00:00:14,470 --> 00:00:20,560
and I work at X team where I make web

00:00:18,760 --> 00:00:23,560
apps with developers all around the

00:00:20,560 --> 00:00:26,740
world and I'm also a CSS modules team

00:00:23,560 --> 00:00:28,930
member and I've been lucky to be able to

00:00:26,740 --> 00:00:31,150
introduce CSS modules into some of our

00:00:28,930 --> 00:00:32,890
projects that X team and that's led me

00:00:31,150 --> 00:00:37,690
to the experiences that I want to share

00:00:32,890 --> 00:00:42,220
with you today this this story all began

00:00:37,690 --> 00:00:45,070
for me last year at Camp js5 it's really

00:00:42,220 --> 00:00:47,290
excellent weekend's and I had a lot of

00:00:45,070 --> 00:00:50,320
chats with different people about how

00:00:47,290 --> 00:00:53,410
they were doing CSS one of these people

00:00:50,320 --> 00:00:55,720
is in the room today marked a leash and

00:00:53,410 --> 00:00:57,730
and I kind of watched over his shoulder

00:00:55,720 --> 00:01:00,070
as he was working on an early version of

00:00:57,730 --> 00:01:04,600
CSS modules at the time with Tobias

00:01:00,070 --> 00:01:06,040
copper's the web pack creator and I was

00:01:04,600 --> 00:01:08,500
really impressed with what I saw there

00:01:06,040 --> 00:01:11,020
it seemed like it was going to answer a

00:01:08,500 --> 00:01:13,440
lot of the pain points that I had felt

00:01:11,020 --> 00:01:18,150
with CSS

00:01:13,440 --> 00:01:20,410
[Music]

00:01:18,150 --> 00:01:22,570
another person in that it was also here

00:01:20,410 --> 00:01:24,030
today that I talked to it was Glen

00:01:22,570 --> 00:01:26,350
Madden and I saw a lot of the

00:01:24,030 --> 00:01:28,270
interesting techniques that he was using

00:01:26,350 --> 00:01:31,120
with CSS kind of experimenting with a

00:01:28,270 --> 00:01:32,770
lot of things and he went on to

00:01:31,120 --> 00:01:35,980
incorporate a lot of those ideas with

00:01:32,770 --> 00:01:37,780
CSS modules so it felt to me like there

00:01:35,980 --> 00:01:40,900
was a lot of really cool ideas kind of

00:01:37,780 --> 00:01:45,010
converging around CSS modules and I

00:01:40,900 --> 00:01:47,740
wanted to to find out more about it now

00:01:45,010 --> 00:01:49,750
at the same time as this event I have

00:01:47,740 --> 00:01:51,640
just started a brand new front-end

00:01:49,750 --> 00:01:55,360
project with one of our clients bud wolf

00:01:51,640 --> 00:01:58,540
and I bet you can guess what happened

00:01:55,360 --> 00:02:00,310
next you know you go to a conference you

00:01:58,540 --> 00:02:03,610
get your head full of ideas and then you

00:02:00,310 --> 00:02:07,990
come back to work and it's a little bit

00:02:03,610 --> 00:02:10,300
like that and it's always smart to

00:02:07,990 --> 00:02:12,160
exercise a bit of caution when you're

00:02:10,300 --> 00:02:15,160
trying out a brand new technology on a

00:02:12,160 --> 00:02:16,480
real project but at this point I didn't

00:02:15,160 --> 00:02:17,710
have to think too hard I was pretty

00:02:16,480 --> 00:02:25,090
convinced that it was going to be a

00:02:17,710 --> 00:02:29,800
great fit for our project and that was

00:02:25,090 --> 00:02:31,840
18 months ago and I can say that in the

00:02:29,800 --> 00:02:33,640
last like 12 years of doing web

00:02:31,840 --> 00:02:36,220
development this has been the most

00:02:33,640 --> 00:02:42,370
pleasant experience of working with CSS

00:02:36,220 --> 00:02:45,430
that I've ever had so I could come here

00:02:42,370 --> 00:02:47,590
today and tell you all the things I like

00:02:45,430 --> 00:02:50,620
about it and why it's just the best and

00:02:47,590 --> 00:02:52,780
everyone should use it but you know it's

00:02:50,620 --> 00:02:54,220
funny because I've also come across a

00:02:52,780 --> 00:02:56,700
lot of people who haven't been having

00:02:54,220 --> 00:02:56,700
such a good time

00:02:56,770 --> 00:03:07,570
thank you let's do that hello

00:03:03,790 --> 00:03:09,370
a lot of people haven't been having such

00:03:07,570 --> 00:03:11,050
a good time with CSS modules and you

00:03:09,370 --> 00:03:14,410
know I've seen a lot of discussions

00:03:11,050 --> 00:03:16,090
online people getting kind of frustrated

00:03:14,410 --> 00:03:20,110
about some of the limitations of CSS

00:03:16,090 --> 00:03:23,500
modules now this is the internet and so

00:03:20,110 --> 00:03:25,660
a lot of these frustrations kind of go

00:03:23,500 --> 00:03:27,520
along the lines of like hey I tried

00:03:25,660 --> 00:03:31,120
using this new hammer and it really

00:03:27,520 --> 00:03:34,330
sucks at putting screws in and we can we

00:03:31,120 --> 00:03:35,950
can laugh about that and say it's not

00:03:34,330 --> 00:03:39,070
what it's made for and you shouldn't do

00:03:35,950 --> 00:03:46,380
that but some people still expect it to

00:03:39,070 --> 00:03:51,640
work like Yahoo Answers thank you Yahoo

00:03:46,380 --> 00:03:53,320
stay relevant buddy but you know a lot

00:03:51,640 --> 00:03:56,530
of that a lot of the complaints that I

00:03:53,320 --> 00:03:59,470
saw were actually really valid ones too

00:03:56,530 --> 00:04:03,430
and I came to agree that there are a lot

00:03:59,470 --> 00:04:05,860
of things that are very difficult

00:04:03,430 --> 00:04:07,870
sorry not a lot of things some things

00:04:05,860 --> 00:04:12,030
are very difficult to do with CSS

00:04:07,870 --> 00:04:12,030
modules other things are just impossible

00:04:12,780 --> 00:04:19,840
this is where I got curious could it be

00:04:17,140 --> 00:04:22,540
that my pleasant experience and their

00:04:19,840 --> 00:04:27,280
frustrating experience was somehow

00:04:22,540 --> 00:04:29,770
related could it be that by restricting

00:04:27,280 --> 00:04:32,440
our freedom in some areas CSS modules

00:04:29,770 --> 00:04:33,760
also opens up new and powerful ways to

00:04:32,440 --> 00:04:36,490
solve our problems that we didn't have

00:04:33,760 --> 00:04:42,250
before so that's what I want to look

00:04:36,490 --> 00:04:44,230
into today now a lot of people put up

00:04:42,250 --> 00:04:46,060
their hands before but I'm sure there

00:04:44,230 --> 00:04:48,220
are still plenty more who are wondering

00:04:46,060 --> 00:04:51,070
at this point what is this CSS modules

00:04:48,220 --> 00:04:55,570
thing so I'm going to give you a very

00:04:51,070 --> 00:04:57,790
quick introduction and here's an example

00:04:55,570 --> 00:05:00,730
of like what it looks like to use so

00:04:57,790 --> 00:05:02,860
we've got a CSS file up here and a

00:05:00,730 --> 00:05:05,740
JavaScript file on the right there's

00:05:02,860 --> 00:05:07,510
nothing unusual going on there but the

00:05:05,740 --> 00:05:09,790
thing to notice about these two files is

00:05:07,510 --> 00:05:11,669
that they're both counterparts of the

00:05:09,790 --> 00:05:15,580
same UI component

00:05:11,669 --> 00:05:17,760
we've got CSS to describe the styles and

00:05:15,580 --> 00:05:20,560
the visual aspects of the component and

00:05:17,760 --> 00:05:23,700
we've got JavaScript to describe the the

00:05:20,560 --> 00:05:27,040
structure and a logic of the component

00:05:23,700 --> 00:05:31,060
now the point where CSS modules kicks in

00:05:27,040 --> 00:05:34,570
is right here where we import the CSS

00:05:31,060 --> 00:05:37,830
file into our JavaScript and when we do

00:05:34,570 --> 00:05:40,110
that when we import CSS into JavaScript

00:05:37,830 --> 00:05:42,840
with CSS modules there's two things that

00:05:40,110 --> 00:05:44,879
happen first of all we get a result back

00:05:42,840 --> 00:05:48,509
from the input we get a dictionary of

00:05:44,879 --> 00:05:52,080
class names that we can use to style our

00:05:48,509 --> 00:05:55,940
Dom elements and the second thing that

00:05:52,080 --> 00:05:58,919
happens is when we import a CSS module

00:05:55,940 --> 00:06:00,750
all of the the CSS content that you see

00:05:58,919 --> 00:06:02,909
on the Left that's going to get included

00:06:00,750 --> 00:06:05,729
in the final output bundle that's sent

00:06:02,909 --> 00:06:08,639
to the browser so we have everything

00:06:05,729 --> 00:06:10,590
here needed to render a UI component and

00:06:08,639 --> 00:06:13,979
CSS modules helps to kind of wrap it up

00:06:10,590 --> 00:06:17,009
into a single encapsulated unit and and

00:06:13,979 --> 00:06:21,810
we can use this to build up our system a

00:06:17,009 --> 00:06:24,629
front-end and that's where the name CSS

00:06:21,810 --> 00:06:27,180
modules comes from just like how we have

00:06:24,629 --> 00:06:30,030
a JavaScript module that has a

00:06:27,180 --> 00:06:32,520
self-contained scope and API based on

00:06:30,030 --> 00:06:38,219
imports and exports it's the same thing

00:06:32,520 --> 00:06:40,319
here just bit CSS now there's much more

00:06:38,219 --> 00:06:42,949
that I could say about CSS modules this

00:06:40,319 --> 00:06:45,719
was just a very quick introduction and

00:06:42,949 --> 00:06:47,250
we'll see some more as we go on but you

00:06:45,719 --> 00:06:49,529
know there's not there's not heaps more

00:06:47,250 --> 00:06:51,569
to it one of the things that I love

00:06:49,529 --> 00:06:54,870
about CSS modules is that it's pretty

00:06:51,569 --> 00:06:57,210
conceptually simple and there's not you

00:06:54,870 --> 00:07:01,650
know once you grasp the basics it's easy

00:06:57,210 --> 00:07:06,000
to understand what's going on what we do

00:07:01,650 --> 00:07:08,340
go on the title of the talk is six ways

00:07:06,000 --> 00:07:10,819
to win with CSS modules and I'd like to

00:07:08,340 --> 00:07:13,550
say something about that

00:07:10,819 --> 00:07:16,050
why win

00:07:13,550 --> 00:07:18,569
well CSS can be a bit of a battle

00:07:16,050 --> 00:07:21,419
sometimes kind of like when you start

00:07:18,569 --> 00:07:24,060
out it's really it's really easy you say

00:07:21,419 --> 00:07:27,719
make this thing red and it goes red it's

00:07:24,060 --> 00:07:29,809
awesome it's so easy it feels great you

00:07:27,719 --> 00:07:32,759
get a good result

00:07:29,809 --> 00:07:35,459
but then you know you go on your project

00:07:32,759 --> 00:07:36,839
gets bigger new features requirements

00:07:35,459 --> 00:07:39,659
might change from what they were

00:07:36,839 --> 00:07:41,669
originally maybe your team grows things

00:07:39,659 --> 00:07:46,110
can start to get a little bit hairy and

00:07:41,669 --> 00:07:47,909
out of control and at this point yes the

00:07:46,110 --> 00:07:49,979
house is on fire but you can still be

00:07:47,909 --> 00:07:54,269
pretty optimistic that things are gonna

00:07:49,979 --> 00:07:56,809
be ok in the end you're gonna get it but

00:07:54,269 --> 00:07:59,459
things can get really out of control and

00:07:56,809 --> 00:08:01,259
you can build up so much technical debt

00:07:59,459 --> 00:08:03,539
and complexity that all you can think

00:08:01,259 --> 00:08:07,199
about is like let's just wipe this out

00:08:03,539 --> 00:08:12,659
and start fresh so there's that aspect

00:08:07,199 --> 00:08:14,849
of winning we want to avoid or the

00:08:12,659 --> 00:08:18,479
complexity that's pushing us over this

00:08:14,849 --> 00:08:20,279
way and and stay in that nicer left-hand

00:08:18,479 --> 00:08:22,909
side where you know we're still in

00:08:20,279 --> 00:08:27,959
control of things and it's feeling good

00:08:22,909 --> 00:08:29,339
and that feeling good is you know I want

00:08:27,959 --> 00:08:31,649
to say it's important like it's not the

00:08:29,339 --> 00:08:33,360
most important thing doesn't matter if

00:08:31,649 --> 00:08:35,310
we feel good about what we're doing but

00:08:33,360 --> 00:08:38,550
well it does matter it's important

00:08:35,310 --> 00:08:41,219
because you can tell the difference in

00:08:38,550 --> 00:08:43,019
any craft you can tell the difference in

00:08:41,219 --> 00:08:44,209
the end product when people have really

00:08:43,019 --> 00:08:48,269
put their hearts into it

00:08:44,209 --> 00:08:51,300
and so having that feeling of winning of

00:08:48,269 --> 00:08:52,889
overcoming complexity it's an important

00:08:51,300 --> 00:08:57,149
kind of morale boost it's gonna keep us

00:08:52,889 --> 00:09:00,209
going like things difficult and I think

00:08:57,149 --> 00:09:02,220
you all know this feeling in fact I

00:09:00,209 --> 00:09:04,250
think I can produce that feeling right

00:09:02,220 --> 00:09:04,250
now

00:09:08,290 --> 00:09:12,320
because nobody would ever waste their

00:09:10,670 --> 00:09:16,459
time playing solitaire if you didn't get

00:09:12,320 --> 00:09:22,250
this at the end that is the power of the

00:09:16,459 --> 00:09:23,540
feeling of winning and when we talk

00:09:22,250 --> 00:09:29,779
about winning you know another thing

00:09:23,540 --> 00:09:32,839
comes to mind of course an Urban

00:09:29,779 --> 00:09:35,570
Dictionary defines winning as a constant

00:09:32,839 --> 00:09:37,610
state of enjoying life it does not end

00:09:35,570 --> 00:09:38,269
otherwise one was not truly winning to

00:09:37,610 --> 00:09:44,899
begin with

00:09:38,269 --> 00:09:46,370
hence the suffix king because I'm sure

00:09:44,899 --> 00:09:48,470
that you've all had that experience of

00:09:46,370 --> 00:09:50,570
using a shiny new technology and it's

00:09:48,470 --> 00:09:52,220
great at first and then it starts to

00:09:50,570 --> 00:09:55,070
create more problems than it solves

00:09:52,220 --> 00:09:58,070
and then you stuck with it so in those

00:09:55,070 --> 00:10:02,810
situations you did win but you will not

00:09:58,070 --> 00:10:05,149
win in and we're gonna need that in if

00:10:02,810 --> 00:10:07,850
we're gonna make something good that

00:10:05,149 --> 00:10:10,579
lasts and and find joy just in the

00:10:07,850 --> 00:10:12,709
simple act of making it so I want to

00:10:10,579 --> 00:10:14,690
show you today how there are six ways

00:10:12,709 --> 00:10:19,550
that CSS modules can help us to achieve

00:10:14,690 --> 00:10:20,839
that lofty goal and that it can help us

00:10:19,550 --> 00:10:23,029
not just at the start of the project

00:10:20,839 --> 00:10:25,339
when things are easy but all the way

00:10:23,029 --> 00:10:27,019
through from authoring through to

00:10:25,339 --> 00:10:31,670
debugging and all the way through to

00:10:27,019 --> 00:10:34,490
refactoring now one of the first

00:10:31,670 --> 00:10:37,540
problems that I think people come to

00:10:34,490 --> 00:10:39,350
with CSS modules is is coming from that

00:10:37,540 --> 00:10:41,029
simplicity that I mentioned before

00:10:39,350 --> 00:10:43,100
because the flipside of simplicity of

00:10:41,029 --> 00:10:47,269
course is that it might not have the

00:10:43,100 --> 00:10:49,010
features that you're used to if you're

00:10:47,269 --> 00:10:51,260
coming from another language and I can

00:10:49,010 --> 00:10:53,779
tell you about one time that we ran into

00:10:51,260 --> 00:10:56,660
this problem in our project so it was

00:10:53,779 --> 00:10:59,480
pretty early on and we were building

00:10:56,660 --> 00:11:01,339
this nice leader board component here so

00:10:59,480 --> 00:11:04,250
the leader board component is like the

00:11:01,339 --> 00:11:06,319
overall thing and then a sub component

00:11:04,250 --> 00:11:10,370
each each of those rows was a sub

00:11:06,319 --> 00:11:11,510
component that we called a rank and we

00:11:10,370 --> 00:11:13,040
had the code that looks something like

00:11:11,510 --> 00:11:14,360
that I was doing a code review with a

00:11:13,040 --> 00:11:15,089
teammate so we're sitting down and

00:11:14,360 --> 00:11:17,320
thinking

00:11:15,089 --> 00:11:21,910
we can see there's some duplication

00:11:17,320 --> 00:11:24,550
going on here that we better fix that so

00:11:21,910 --> 00:11:30,220
our first reaction was to rewrite it

00:11:24,550 --> 00:11:32,589
like this so we've nested all of the

00:11:30,220 --> 00:11:36,220
other selectors under that first rank

00:11:32,589 --> 00:11:37,690
and got rid of the duplication as it's a

00:11:36,220 --> 00:11:40,389
go-to solution when you're using

00:11:37,690 --> 00:11:43,149
something like SAS or less and it helps

00:11:40,389 --> 00:11:45,970
to sort of keep your code cleaner but

00:11:43,149 --> 00:11:47,320
the catch is this code on the right by

00:11:45,970 --> 00:11:49,600
default that's not going to work with

00:11:47,320 --> 00:11:53,889
CSS modules just like how it doesn't

00:11:49,600 --> 00:11:56,350
work with plain CSS and so at this point

00:11:53,889 --> 00:11:58,930
we started to think okay maybe we need

00:11:56,350 --> 00:12:02,980
to run this through SAS first and then

00:11:58,930 --> 00:12:05,380
into CSS modules and that would have

00:12:02,980 --> 00:12:07,510
worked but before we even got to that

00:12:05,380 --> 00:12:11,560
point we saw that there was another way

00:12:07,510 --> 00:12:14,589
we could get rid of the duplication say

00:12:11,560 --> 00:12:16,990
that we just deleted those extra dot

00:12:14,589 --> 00:12:19,300
ranks because we realized we didn't

00:12:16,990 --> 00:12:20,829
actually need them and the reason they

00:12:19,300 --> 00:12:23,019
were there in the first place was just

00:12:20,829 --> 00:12:26,230
out of habit we thought that's just how

00:12:23,019 --> 00:12:28,060
you write CSS because it's a really it's

00:12:26,230 --> 00:12:30,670
a really common practice in CSS to

00:12:28,060 --> 00:12:32,290
namespace your selectors like that so

00:12:30,670 --> 00:12:34,779
that they don't get confused between one

00:12:32,290 --> 00:12:37,199
component and another but here's the

00:12:34,779 --> 00:12:39,880
wonderful thing CSS modules

00:12:37,199 --> 00:12:43,810
automatically namespaces your classes

00:12:39,880 --> 00:12:46,390
for you and it does this by sort of

00:12:43,810 --> 00:12:50,680
rewriting each class name so that it's

00:12:46,390 --> 00:12:52,360
guaranteed to be globally unique in in

00:12:50,680 --> 00:12:55,180
development we can have like a nice

00:12:52,360 --> 00:12:57,190
descriptive path to that component so

00:12:55,180 --> 00:12:59,019
it's easy to see where it came from you

00:12:57,190 --> 00:13:04,240
know in production you cannot you can

00:12:59,019 --> 00:13:08,079
reduce that down to a smaller symbol and

00:13:04,240 --> 00:13:08,529
so I got excited about this very simple

00:13:08,079 --> 00:13:10,209
thing

00:13:08,529 --> 00:13:11,860
way back when we were doing that project

00:13:10,209 --> 00:13:14,110
and and I still kind of am because I

00:13:11,860 --> 00:13:16,810
think if you can improve your code by

00:13:14,110 --> 00:13:19,000
deleting some of it while at the same

00:13:16,810 --> 00:13:20,920
time avoiding adding another tool to

00:13:19,000 --> 00:13:23,199
your stack that's that's kind of winning

00:13:20,920 --> 00:13:26,180
all over the place and we don't need

00:13:23,199 --> 00:13:28,040
more features if we can

00:13:26,180 --> 00:13:31,700
remove the underlying problem to begin

00:13:28,040 --> 00:13:35,839
with so I want to say that's our first

00:13:31,700 --> 00:13:38,839
way to win CSS today don't manually

00:13:35,839 --> 00:13:44,899
namespace your classes let a computer to

00:13:38,839 --> 00:13:47,570
it for you they love that stuff now

00:13:44,899 --> 00:13:49,130
I talked about you know rewriting class

00:13:47,570 --> 00:13:51,200
names and there's a little bit of magic

00:13:49,130 --> 00:13:54,830
going on there right to do that

00:13:51,200 --> 00:13:57,080
rewriting and you might have come across

00:13:54,830 --> 00:13:59,060
a lot of CSS and J's techniques that

00:13:57,080 --> 00:14:00,980
involve a significant amount of magic

00:13:59,060 --> 00:14:02,930
like getting hover States and media

00:14:00,980 --> 00:14:05,570
queries to work when you're using inline

00:14:02,930 --> 00:14:08,390
Styles that's that's quite a bit of

00:14:05,570 --> 00:14:12,620
magic here so what kind of magic do do

00:14:08,390 --> 00:14:15,380
we use with CSS modules well the best

00:14:12,620 --> 00:14:16,910
way to see that is to compare the source

00:14:15,380 --> 00:14:20,959
code and what actually appears in the

00:14:16,910 --> 00:14:23,680
browser and you'll see that it's pretty

00:14:20,959 --> 00:14:26,089
much only the names have changed

00:14:23,680 --> 00:14:28,490
everything else is there's some auto

00:14:26,089 --> 00:14:30,380
prefix stuff at the top but everything

00:14:28,490 --> 00:14:32,870
else is pretty much identical apart from

00:14:30,380 --> 00:14:34,790
the names so there's only a teeny little

00:14:32,870 --> 00:14:38,000
bit of magic to rewrite those class

00:14:34,790 --> 00:14:41,420
names and when you're using CSS modules

00:14:38,000 --> 00:14:46,339
you're still using actual real CSS all

00:14:41,420 --> 00:14:48,920
the way through from start to finish and

00:14:46,339 --> 00:14:53,120
I would even say that CSS modules is not

00:14:48,920 --> 00:14:58,630
exactly CSS in j/s it's more like like

00:14:53,120 --> 00:15:02,390
imagine if you've got CSS land up here

00:14:58,630 --> 00:15:05,120
JavaScript land is way down here and you

00:15:02,390 --> 00:15:09,050
can't you can't get between them because

00:15:05,120 --> 00:15:12,050
there's this big fiery pit or with CSS

00:15:09,050 --> 00:15:16,910
modules there's still two very separate

00:15:12,050 --> 00:15:18,990
places but we get this nice bridge Wow

00:15:16,910 --> 00:15:23,130
it's fantastic

00:15:18,990 --> 00:15:26,279
really is and so that that's our second

00:15:23,130 --> 00:15:28,440
way to win today CSS modules allows us

00:15:26,279 --> 00:15:30,270
to write real CSS but with less hacks

00:15:28,440 --> 00:15:34,170
and with a nice bridge over to

00:15:30,270 --> 00:15:36,510
JavaScript land so there's there's some

00:15:34,170 --> 00:15:40,470
nice simplicity about it and it's real

00:15:36,510 --> 00:15:42,570
CSS but you might also ask why do we

00:15:40,470 --> 00:15:46,260
need to bring JavaScript into it this is

00:15:42,570 --> 00:15:48,000
a CSS conference we don't do that well

00:15:46,260 --> 00:15:51,690
why can't we just use plain HTML

00:15:48,000 --> 00:15:53,850
templates the long story is you can but

00:15:51,690 --> 00:15:56,220
you know that something to talk about

00:15:53,850 --> 00:16:00,180
another time but I want to show you like

00:15:56,220 --> 00:16:02,910
how CSS modules can make you type more

00:16:00,180 --> 00:16:06,420
and that might feel like a problem but

00:16:02,910 --> 00:16:08,940
we can explore that so let's have a look

00:16:06,420 --> 00:16:13,560
at an example of using just plain HTML

00:16:08,940 --> 00:16:16,890
templates it's the same as before but no

00:16:13,560 --> 00:16:19,770
JavaScript if you want to apply one of

00:16:16,890 --> 00:16:22,140
these classes to the Dom it's really

00:16:19,770 --> 00:16:24,050
easy you just type the name in you don't

00:16:22,140 --> 00:16:27,060
have to mess around with like importing

00:16:24,050 --> 00:16:28,950
CSS file into JavaScript and using the

00:16:27,060 --> 00:16:32,520
dictionary of class names you just type

00:16:28,950 --> 00:16:35,100
the name and it's there and this might

00:16:32,520 --> 00:16:37,380
seem simple on the surface but the thing

00:16:35,100 --> 00:16:41,040
to note about this example is what we

00:16:37,380 --> 00:16:43,290
don't see because these two separate

00:16:41,040 --> 00:16:47,100
files are still highly dependent on each

00:16:43,290 --> 00:16:49,410
other but the fact that we're using that

00:16:47,100 --> 00:16:51,930
string root here only works if there's a

00:16:49,410 --> 00:16:54,900
corresponding one in the CSS file we all

00:16:51,930 --> 00:16:56,910
know that same with Avatar we've got a

00:16:54,900 --> 00:17:00,660
mapping from heading that doesn't

00:16:56,910 --> 00:17:02,880
actually go anywhere like maybe somebody

00:17:00,660 --> 00:17:07,290
changed the CSS but forgot to update the

00:17:02,880 --> 00:17:09,480
HTML who knows but the point is there is

00:17:07,290 --> 00:17:11,490
an API between these two files it's just

00:17:09,480 --> 00:17:14,250
not a good one like it's completely ad

00:17:11,490 --> 00:17:15,510
hoc and unenforced and you won't get

00:17:14,250 --> 00:17:19,110
feedback if you've done something

00:17:15,510 --> 00:17:23,069
necessarily wrong let's compare that to

00:17:19,110 --> 00:17:25,170
our CSS modules example and I hope you

00:17:23,069 --> 00:17:29,040
can see that straight away we've got now

00:17:25,170 --> 00:17:31,049
an explicit mapping between the DOM and

00:17:29,040 --> 00:17:33,840
a stylesheet rather than something

00:17:31,049 --> 00:17:38,129
just based on arbitrary strings we're

00:17:33,840 --> 00:17:39,480
using properties of an object now and we

00:17:38,129 --> 00:17:41,700
can take advantage of that in the whole

00:17:39,480 --> 00:17:43,440
a lot of cool weights like for example

00:17:41,700 --> 00:17:45,869
you could use flow type or type script

00:17:43,440 --> 00:17:49,499
to tell you if you've tried to apply a

00:17:45,869 --> 00:17:51,049
class name that doesn't exist so it's

00:17:49,499 --> 00:17:55,889
kind of Awesome

00:17:51,049 --> 00:17:58,230
and that's our third way to win CSS

00:17:55,889 --> 00:18:00,899
today is that CSS modules allows us to

00:17:58,230 --> 00:18:04,409
have an explicit mapping between CSS and

00:18:00,899 --> 00:18:08,999
the Dom and a tangible API that we can

00:18:04,409 --> 00:18:10,830
do a lot of cool stuff with now the next

00:18:08,999 --> 00:18:13,769
one is a big one

00:18:10,830 --> 00:18:17,279
a lot of people have run into trouble

00:18:13,769 --> 00:18:21,659
with this it's that CSS modules will

00:18:17,279 --> 00:18:23,850
break some familiar patterns and I've

00:18:21,659 --> 00:18:26,429
come to kind of really love this one

00:18:23,850 --> 00:18:28,379
because it's forced me to rethink a lot

00:18:26,429 --> 00:18:32,549
of my approach to how I write CSS and

00:18:28,379 --> 00:18:34,470
and to learn a lot of new things so I'll

00:18:32,549 --> 00:18:36,029
show you an example of a very common

00:18:34,470 --> 00:18:38,700
pattern in CSS and then we can talk

00:18:36,029 --> 00:18:44,789
about why and how we're gonna rethink

00:18:38,700 --> 00:18:49,320
that so here we've got something called

00:18:44,789 --> 00:18:52,320
a label and it's read easy it was good

00:18:49,320 --> 00:18:54,539
and then at some point later on we're

00:18:52,320 --> 00:18:56,609
redefining the color of a label to be

00:18:54,539 --> 00:19:01,580
blue whenever it's in the context of a

00:18:56,609 --> 00:19:03,899
module using the Cascade like this is

00:19:01,580 --> 00:19:05,999
probably like something you learn on day

00:19:03,899 --> 00:19:09,299
one of how to do CSS and it's so

00:19:05,999 --> 00:19:11,399
familiar and we use it so often that I

00:19:09,299 --> 00:19:14,700
think we sometimes forget about the cost

00:19:11,399 --> 00:19:17,090
involved because ask yourself this

00:19:14,700 --> 00:19:20,999
question did the author of this code

00:19:17,090 --> 00:19:25,320
really intend to redefine the meaning of

00:19:20,999 --> 00:19:29,580
label or where they're two separate

00:19:25,320 --> 00:19:31,230
elements both called label so is there

00:19:29,580 --> 00:19:33,840
one label that looks different depending

00:19:31,230 --> 00:19:37,769
on where it's used or are there two

00:19:33,840 --> 00:19:41,049
separate things both called label know

00:19:37,769 --> 00:19:43,600
the answer neither do i because

00:19:41,049 --> 00:19:46,210
there's actually no way purely at the

00:19:43,600 --> 00:19:47,259
language level to express that intent

00:19:46,210 --> 00:19:49,210
one way or the other

00:19:47,259 --> 00:19:53,830
like the best that we can do is follow a

00:19:49,210 --> 00:19:56,049
convention or leave a comment let's ask

00:19:53,830 --> 00:19:59,649
another question what color is a label

00:19:56,049 --> 00:20:02,590
it's a pretty simple question but again

00:19:59,649 --> 00:20:04,539
we we can't answer that question until

00:20:02,590 --> 00:20:06,580
we know the entire structure of the Dom

00:20:04,539 --> 00:20:08,739
and you also have to tell me which

00:20:06,580 --> 00:20:12,850
particular label element you're asking

00:20:08,739 --> 00:20:15,009
about before we can get an answer so we

00:20:12,850 --> 00:20:16,509
can use the Cascade like this and it's

00:20:15,009 --> 00:20:18,749
really easy to get the effect that we

00:20:16,509 --> 00:20:20,889
want but it comes at the cost of

00:20:18,749 --> 00:20:23,080
predictability of being able to answer

00:20:20,889 --> 00:20:25,509
these kinds of questions just from

00:20:23,080 --> 00:20:30,700
looking in one place our code has become

00:20:25,509 --> 00:20:33,639
very very context dependent so why is

00:20:30,700 --> 00:20:35,950
this a pattern well we use it a lot well

00:20:33,639 --> 00:20:36,999
I use it a lot when we're building

00:20:35,950 --> 00:20:39,999
components that we're going to reuse

00:20:36,999 --> 00:20:41,559
across the system so sometimes they have

00:20:39,999 --> 00:20:44,350
to look slightly different in different

00:20:41,559 --> 00:20:46,899
places if we go back to our leader board

00:20:44,350 --> 00:20:51,220
example from before each one of those

00:20:46,899 --> 00:20:52,899
ranked sub components has an avatar and

00:20:51,220 --> 00:20:54,519
we know that an avatar we're going to

00:20:52,899 --> 00:20:55,929
use that in other places in the

00:20:54,519 --> 00:21:00,159
front-end as well like in the profile

00:20:55,929 --> 00:21:02,529
settings that you see up there but it's

00:21:00,159 --> 00:21:04,809
a different size up there so the way

00:21:02,529 --> 00:21:07,059
that we traditionally do this is we'd

00:21:04,809 --> 00:21:10,989
have our general purpose Styles in the

00:21:07,059 --> 00:21:13,600
Avatar component and then in our leader

00:21:10,989 --> 00:21:15,580
board component we use a cascade rule to

00:21:13,600 --> 00:21:19,119
override some of them the ones that we

00:21:15,580 --> 00:21:22,029
want to change and this is the precise

00:21:19,119 --> 00:21:27,279
point at which we hit a wall when we're

00:21:22,029 --> 00:21:29,019
using CSS modules can't do it because do

00:21:27,279 --> 00:21:30,999
you remember how CSS modules rewrites

00:21:29,019 --> 00:21:32,980
the class names to be globally unique

00:21:30,999 --> 00:21:35,049
well what that means is that the

00:21:32,980 --> 00:21:37,359
leaderboard component can't actually

00:21:35,049 --> 00:21:39,639
know what the class names of the avatar

00:21:37,359 --> 00:21:44,080
component are going to be so you can't

00:21:39,639 --> 00:21:47,440
target them with the Cascade some clever

00:21:44,080 --> 00:21:50,109
people put some proposals forward to add

00:21:47,440 --> 00:21:52,030
features to CSS modules that would make

00:21:50,109 --> 00:21:54,820
this kind of thing possible

00:21:52,030 --> 00:21:56,350
and that would be kind of cool but I was

00:21:54,820 --> 00:21:58,330
thinking in and even if it were possible

00:21:56,350 --> 00:22:01,360
I don't think I would want to use it

00:21:58,330 --> 00:22:03,700
because of the costs involved that we

00:22:01,360 --> 00:22:10,540
saw before and I think we've got a much

00:22:03,700 --> 00:22:12,430
better way so the key to figuring this

00:22:10,540 --> 00:22:15,520
out I think is to understand that what

00:22:12,430 --> 00:22:19,030
we've got here is not just Styles we've

00:22:15,520 --> 00:22:21,100
actually got some logic in our CSS it's

00:22:19,030 --> 00:22:23,350
display logic right and we could write

00:22:21,100 --> 00:22:25,600
that as pseudocode like if the avatar

00:22:23,350 --> 00:22:29,860
appears within a leaderboard then make

00:22:25,600 --> 00:22:31,780
it smaller I spoke before about the

00:22:29,860 --> 00:22:34,450
separation of concerns in a component

00:22:31,780 --> 00:22:37,330
how we've got CSS for visual aspects and

00:22:34,450 --> 00:22:39,040
JavaScript for logic so we've got

00:22:37,330 --> 00:22:40,900
display logic here that would make sense

00:22:39,040 --> 00:22:44,230
to include that in that same grouping

00:22:40,900 --> 00:22:47,620
wouldn't it and when we separate our

00:22:44,230 --> 00:22:49,530
concerns in that way we end up with CSS

00:22:47,620 --> 00:22:52,060
that is much more neutral and

00:22:49,530 --> 00:22:55,480
predictable and doesn't depend on

00:22:52,060 --> 00:22:58,080
context and we've moved the decision of

00:22:55,480 --> 00:23:02,500
whether an avatar should be big or small

00:22:58,080 --> 00:23:04,090
to the components API rather than just

00:23:02,500 --> 00:23:07,860
giving any other component free rein to

00:23:04,090 --> 00:23:07,860
reach in and change whatever they want

00:23:08,460 --> 00:23:12,670
and there's something else interesting

00:23:10,570 --> 00:23:14,740
that's happened here in our CSS because

00:23:12,670 --> 00:23:17,530
remember we used to have one class

00:23:14,740 --> 00:23:19,000
Avatar that could mean something

00:23:17,530 --> 00:23:22,570
different depending on where it's used

00:23:19,000 --> 00:23:25,720
now we've got three classes avatar big

00:23:22,570 --> 00:23:28,840
and small and their meaning never ever

00:23:25,720 --> 00:23:33,520
changes no matter what in other words

00:23:28,840 --> 00:23:35,080
we've made our classes immutable we can

00:23:33,520 --> 00:23:36,850
still compose them together to get the

00:23:35,080 --> 00:23:38,400
effect that we want but we're never

00:23:36,850 --> 00:23:40,600
going to change what they meaning and

00:23:38,400 --> 00:23:43,000
think about the effect that this has on

00:23:40,600 --> 00:23:45,040
your experience debugger whenever you

00:23:43,000 --> 00:23:47,260
see one of those names you'll know

00:23:45,040 --> 00:23:48,820
precisely what it means without having

00:23:47,260 --> 00:23:50,530
to like do all that mental gymnastics

00:23:48,820 --> 00:23:55,450
that figuring out which context are we

00:23:50,530 --> 00:23:58,690
in right now so that is a fourth way to

00:23:55,450 --> 00:24:00,880
win CSS is it CSS modules helps us to

00:23:58,690 --> 00:24:03,580
embrace immutability and get all the

00:24:00,880 --> 00:24:04,900
benefits of that and it also has some

00:24:03,580 --> 00:24:07,030
great first-class

00:24:04,900 --> 00:24:14,170
for composing those immutable classes

00:24:07,030 --> 00:24:16,390
together now the next problem that we

00:24:14,170 --> 00:24:18,270
encounter the hurdle is is not a hurdle

00:24:16,390 --> 00:24:20,740
for everyone but for a lot of people

00:24:18,270 --> 00:24:22,600
they'll face this point of saying I need

00:24:20,740 --> 00:24:25,720
to use a build tool now like browserify

00:24:22,600 --> 00:24:27,340
or webpack because there is actually no

00:24:25,720 --> 00:24:33,310
runtime with CSS modules

00:24:27,340 --> 00:24:34,930
it's everything's happen at Build now

00:24:33,310 --> 00:24:36,490
this is kind of a whole other topic of

00:24:34,930 --> 00:24:38,170
its own and I'm not gonna dig too deep

00:24:36,490 --> 00:24:42,760
into that but there is a pretty strong

00:24:38,170 --> 00:24:44,530
case for using tools like this and

00:24:42,760 --> 00:24:46,360
they've a fundamentally changed the way

00:24:44,530 --> 00:24:49,060
that we think about front-end code like

00:24:46,360 --> 00:24:50,500
even just a few years ago many of us

00:24:49,060 --> 00:24:52,120
were bundling our front-end assets

00:24:50,500 --> 00:24:54,130
something like this we'd get all of our

00:24:52,120 --> 00:24:56,350
JavaScript files and contact them

00:24:54,130 --> 00:24:58,570
together and then we go all of our CSS

00:24:56,350 --> 00:25:01,480
files and concat them together and then

00:24:58,570 --> 00:25:05,140
maybe do something with images or SPG's

00:25:01,480 --> 00:25:07,720
or whatever but with these modern tools

00:25:05,140 --> 00:25:10,180
we have a much more natural way to

00:25:07,720 --> 00:25:12,730
describe a component centric front-end

00:25:10,180 --> 00:25:14,260
so we start with an entry point and then

00:25:12,730 --> 00:25:16,450
that has some dependencies on other

00:25:14,260 --> 00:25:20,380
modules and then we have our UI

00:25:16,450 --> 00:25:22,990
components down here and CSS modules is

00:25:20,380 --> 00:25:25,990
just a natural extension to that tree so

00:25:22,990 --> 00:25:29,770
each one of these UI modules depends on

00:25:25,990 --> 00:25:31,300
some CSS that it imports and having

00:25:29,770 --> 00:25:33,310
everything in the one tree means that we

00:25:31,300 --> 00:25:36,070
can be a lot more strategic about how we

00:25:33,310 --> 00:25:38,470
split things up how we module arise and

00:25:36,070 --> 00:25:40,810
it also helps our tooling to make much

00:25:38,470 --> 00:25:45,010
smarter choices about how to optimize

00:25:40,810 --> 00:25:48,010
what gets sent to the browser so that is

00:25:45,010 --> 00:25:50,860
number five way to win CSS modules

00:25:48,010 --> 00:25:53,230
allows us to give our JavaScript modules

00:25:50,860 --> 00:26:00,220
CSS dependencies and have everything

00:25:53,230 --> 00:26:01,620
into one dependency tree final one for

00:26:00,220 --> 00:26:07,550
today

00:26:01,620 --> 00:26:10,920
his Fork okay the fear of removing CSS

00:26:07,550 --> 00:26:13,410
because if you're like me you've been in

00:26:10,920 --> 00:26:15,180
plenty of projects where like everybody

00:26:13,410 --> 00:26:17,130
knows there's this bunch of CSS code

00:26:15,180 --> 00:26:19,020
that we don't actually need it anymore

00:26:17,130 --> 00:26:21,540
but nobody's got the guts to remove it

00:26:19,020 --> 00:26:24,240
because it's probably gonna break break

00:26:21,540 --> 00:26:28,860
stuff and so it just kind of sits there

00:26:24,240 --> 00:26:31,290
and accumulates over time but what

00:26:28,860 --> 00:26:35,700
happens when all of our CSS is part of a

00:26:31,290 --> 00:26:38,040
dependency tree well you can imagine

00:26:35,700 --> 00:26:40,679
when one of those UI components is not

00:26:38,040 --> 00:26:44,580
imported anymore it becomes disconnected

00:26:40,679 --> 00:26:47,429
from the tree and so the CSS module is

00:26:44,580 --> 00:26:50,130
not connected anymore either so at that

00:26:47,429 --> 00:26:55,080
point we can just delete the whole theme

00:26:50,130 --> 00:26:56,790
I really really love this and you know

00:26:55,080 --> 00:26:59,160
we've come to this point a few times in

00:26:56,790 --> 00:27:01,740
our projects now and it is a wonderful

00:26:59,160 --> 00:27:07,710
feeling just to delete a big slab of CSS

00:27:01,740 --> 00:27:12,540
should totally totally try that that is

00:27:07,710 --> 00:27:15,360
final way to win CSS for today CSS

00:27:12,540 --> 00:27:18,000
modules helps us to defeat fork by

00:27:15,360 --> 00:27:21,870
writing our our CSS as modules that are

00:27:18,000 --> 00:27:24,600
really easy to delete so to wrap up

00:27:21,870 --> 00:27:25,770
we've talked about a few other problems

00:27:24,600 --> 00:27:27,270
and a few of the hurdles that you're

00:27:25,770 --> 00:27:30,270
going to come to if you're using CSS

00:27:27,270 --> 00:27:34,170
modules but you know everything is a

00:27:30,270 --> 00:27:36,450
trade-off and we often talk about things

00:27:34,170 --> 00:27:39,360
like you know this one is good and that

00:27:36,450 --> 00:27:41,490
one is better but I think we should

00:27:39,360 --> 00:27:43,429
really be talking about what does it

00:27:41,490 --> 00:27:45,600
cost and what do you get in return

00:27:43,429 --> 00:27:47,340
that's the stuff that you need to know

00:27:45,600 --> 00:27:51,660
to figure out if it's going to be a good

00:27:47,340 --> 00:27:54,290
trade or not so we've looked at some of

00:27:51,660 --> 00:27:57,330
the way that CSS modules gives us value

00:27:54,290 --> 00:27:59,309
across every stage of our project when

00:27:57,330 --> 00:28:01,590
we're authoring we can just write very

00:27:59,309 --> 00:28:04,140
simple class names without having to

00:28:01,590 --> 00:28:05,690
think about a global context just stuff

00:28:04,140 --> 00:28:07,650
that makes sense for your module and

00:28:05,690 --> 00:28:09,330
they're going to be automatically named

00:28:07,650 --> 00:28:12,300
spaced so there'll be no collisions with

00:28:09,330 --> 00:28:13,880
other parts of the code when we're

00:28:12,300 --> 00:28:16,400
debugging we get

00:28:13,880 --> 00:28:18,830
the benefits of immutability of being

00:28:16,400 --> 00:28:20,540
able to look at a class name and oh yeah

00:28:18,830 --> 00:28:23,710
I know exactly what that means without

00:28:20,540 --> 00:28:26,810
having to figure out the context and

00:28:23,710 --> 00:28:29,390
having an explicit mapping between the

00:28:26,810 --> 00:28:31,340
DOM and the stylesheet means that it's

00:28:29,390 --> 00:28:36,200
very very easy then to trace your way

00:28:31,340 --> 00:28:38,150
back to the source of an error and when

00:28:36,200 --> 00:28:40,130
we refactoring we can be strategic about

00:28:38,150 --> 00:28:41,720
how we split things up into modules and

00:28:40,130 --> 00:28:45,020
reuse components because everything is

00:28:41,720 --> 00:28:47,420
part of the same dependency tree and as

00:28:45,020 --> 00:28:49,310
soon as the CSS module is disconnected

00:28:47,420 --> 00:28:53,570
from that tree you can just delete it

00:28:49,310 --> 00:28:57,110
without a second thought so those are my

00:28:53,570 --> 00:28:59,150
six ways to win with CSS modules and I

00:28:57,110 --> 00:29:01,670
said at least six because they're just

00:28:59,150 --> 00:29:03,200
so many more that I don't have time to

00:29:01,670 --> 00:29:04,370
talk about today but I'm sure that

00:29:03,200 --> 00:29:06,500
you're gonna discover them for

00:29:04,370 --> 00:29:08,000
yourselves and please come and chat to

00:29:06,500 --> 00:29:13,010
me afterwards if you'd like to talk more

00:29:08,000 --> 00:29:15,620
about that so wrapping up huge thank you

00:29:13,010 --> 00:29:17,330
to all of the CSS modules team and

00:29:15,620 --> 00:29:19,730
contributors there's a lot of them now

00:29:17,330 --> 00:29:22,490
and thank you for making this product

00:29:19,730 --> 00:29:25,340
that has been such a joy to use over

00:29:22,490 --> 00:29:28,460
last 18 months for me thank you as well

00:29:25,340 --> 00:29:29,870
to all of the CSS conf organizers for

00:29:28,460 --> 00:29:31,760
putting in all this hard work to get us

00:29:29,870 --> 00:29:32,830
here today and thank you all for

00:29:31,760 --> 00:29:38,250
listening

00:29:32,830 --> 00:29:38,250
[Applause]

00:29:43,090 --> 00:29:45,150

YouTube URL: https://www.youtube.com/watch?v=kFQnMGi4484


