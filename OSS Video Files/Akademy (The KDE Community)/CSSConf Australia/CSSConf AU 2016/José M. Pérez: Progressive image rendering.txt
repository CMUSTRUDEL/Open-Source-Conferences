Title: José M. Pérez: Progressive image rendering
Publication date: 2017-05-19
Playlist: CSSConf AU 2016
Description: 
	Thank you to Mozilla for making video recording possible.

On a regular web page, images represent the largest assets. We might have heard about responsive images to serve the most suitable image for each screen. However, how we load them and when we do can have a great impact too.

Several months ago we decided at Spotify that we wanted to overhaul the design and performance of our most trafficked website. Changing how and when images were loaded turned out to have a large effect.

I'd love to come tell you about the use of placeholders, dominant colours, blurry images and lazy load to improve the perceived performance of websites. These techniques leverage several web technologies like CSS3, canvas and the recent IntersectionObserver JS API.
Captions: 
	00:00:05,070 --> 00:00:12,930
it's fine hello everyone I'm super happy

00:00:09,540 --> 00:00:15,470
to be here thank you thank you a lot

00:00:12,930 --> 00:00:19,740
the organizers it's been an amazing

00:00:15,470 --> 00:00:22,950
conference so far I'm here to be talking

00:00:19,740 --> 00:00:24,480
about images and what we can do about

00:00:22,950 --> 00:00:28,169
loading images on the web

00:00:24,480 --> 00:00:31,110
I consider we developers would like to

00:00:28,169 --> 00:00:33,620
discuss about CSS and JavaScript and

00:00:31,110 --> 00:00:36,239
what's a latest library and framework

00:00:33,620 --> 00:00:38,460
whether we can use react or we can

00:00:36,239 --> 00:00:41,010
replace it with react in order to save

00:00:38,460 --> 00:00:42,930
some bytes here and there and sometimes

00:00:41,010 --> 00:00:45,269
we forget about images and I'm going to

00:00:42,930 --> 00:00:49,800
be talking about why it's important that

00:00:45,269 --> 00:00:55,199
we keep an eye on on images images on

00:00:49,800 --> 00:00:56,519
the web are a huge stake they represent

00:00:55,199 --> 00:00:58,769
two thirds of the bytes that we are

00:00:56,519 --> 00:01:01,829
sending down the wire whenever we load a

00:00:58,769 --> 00:01:05,760
page that's that's more than anything

00:01:01,829 --> 00:01:09,480
more than videos audio JavaScript CSS

00:01:05,760 --> 00:01:13,580
all together and it has an influence on

00:01:09,480 --> 00:01:16,260
the time it takes the our page to load

00:01:13,580 --> 00:01:18,660
something that we should question

00:01:16,260 --> 00:01:21,810
ourselves whenever we are told to use an

00:01:18,660 --> 00:01:24,600
images whether we should or we shouldn't

00:01:21,810 --> 00:01:27,420
for me will be very easily I say don't

00:01:24,600 --> 00:01:30,270
use an image and then you have all the

00:01:27,420 --> 00:01:34,620
problems solved but of course that's not

00:01:30,270 --> 00:01:36,780
a solution but maybe we can try to adopt

00:01:34,620 --> 00:01:39,090
some of these design trends that we are

00:01:36,780 --> 00:01:41,820
seeing nowadays more and more about

00:01:39,090 --> 00:01:44,750
using minimalist design or flat design

00:01:41,820 --> 00:01:49,080
and normally they focus on serving

00:01:44,750 --> 00:01:52,140
vector images and maybe one or two B

00:01:49,080 --> 00:01:54,960
bitmap images and that's very good for

00:01:52,140 --> 00:01:58,080
performance does this vector images are

00:01:54,960 --> 00:02:00,750
normally very small and also it's also

00:01:58,080 --> 00:02:03,720
good for your code repositories you

00:02:00,750 --> 00:02:06,450
don't need to be creating several sizes

00:02:03,720 --> 00:02:09,209
of the images and store them and your

00:02:06,450 --> 00:02:11,879
repo and maybe also store the PSD file

00:02:09,209 --> 00:02:20,819
that you use in order to create those

00:02:11,879 --> 00:02:21,890
files so it's very embracing say the

00:02:20,819 --> 00:02:24,980
design

00:02:21,890 --> 00:02:27,110
and in some cases maybe SEC are just

00:02:24,980 --> 00:02:29,420
trying to remove the request for an

00:02:27,110 --> 00:02:32,150
image that is not dated I'm going to

00:02:29,420 --> 00:02:35,120
show you a real example of a page I work

00:02:32,150 --> 00:02:37,850
on this is spot if I would website for

00:02:35,120 --> 00:02:41,840
this is a page for a song on Spotify

00:02:37,850 --> 00:02:45,200
website only it's a bit difficult to see

00:02:41,840 --> 00:02:48,110
but there's a background image with a

00:02:45,200 --> 00:02:50,959
picture of Adele there but it will be

00:02:48,110 --> 00:02:53,120
visible in a widescreen but when we

00:02:50,959 --> 00:02:56,200
serve this to a mobile phone the user

00:02:53,120 --> 00:03:00,050
will see something like this you can

00:02:56,200 --> 00:03:03,260
appreciate anything in the background so

00:03:00,050 --> 00:03:08,720
that a missile had there this screen

00:03:03,260 --> 00:03:10,160
looks a bit dark it gets cropped it

00:03:08,720 --> 00:03:12,820
doesn't really provide any value so

00:03:10,160 --> 00:03:14,180
maybe at this point we should just

00:03:12,820 --> 00:03:16,580
remove it

00:03:14,180 --> 00:03:19,600
we'd only there we can replace it with a

00:03:16,580 --> 00:03:22,820
gradient or a solid color instead

00:03:19,600 --> 00:03:25,310
someone might think that we can hide it

00:03:22,820 --> 00:03:28,730
just using a media query and setting the

00:03:25,310 --> 00:03:30,890
display none and I will hide it but the

00:03:28,730 --> 00:03:35,540
browser will still make the request so

00:03:30,890 --> 00:03:38,090
you are fixing it only in one side which

00:03:35,540 --> 00:03:41,750
is not showing it but the browser will

00:03:38,090 --> 00:03:43,730
see the the image stuck and it will send

00:03:41,750 --> 00:03:48,459
the request regardless of what you say

00:03:43,730 --> 00:03:51,440
in your CSS another way that we can also

00:03:48,459 --> 00:03:55,549
make this mistake is by trying to hide a

00:03:51,440 --> 00:03:57,680
bigger chunk of markup so here we have a

00:03:55,549 --> 00:04:00,350
couple of sections the second one is

00:03:57,680 --> 00:04:03,200
hidden but the image within that section

00:04:00,350 --> 00:04:06,320
will be requested

00:04:03,200 --> 00:04:07,970
there are ways we can prevent this one

00:04:06,320 --> 00:04:11,239
way would be to use some kind of

00:04:07,970 --> 00:04:13,459
template engine for printing this

00:04:11,239 --> 00:04:16,729
rendering this on the dome or if you use

00:04:13,459 --> 00:04:20,030
some component library that will usually

00:04:16,729 --> 00:04:23,330
take care of that so you don't need to

00:04:20,030 --> 00:04:25,220
make a huge amount of changes in your

00:04:23,330 --> 00:04:27,260
design sometimes it's a matter of being

00:04:25,220 --> 00:04:28,880
a bit careful about what your pages

00:04:27,260 --> 00:04:31,600
really requesting and we will see more

00:04:28,880 --> 00:04:33,880
of those examples

00:04:31,600 --> 00:04:35,830
once we know that we want to load the

00:04:33,880 --> 00:04:38,680
certain limits the next thing we have to

00:04:35,830 --> 00:04:40,389
do is optimize it normally there are

00:04:38,680 --> 00:04:43,330
trade-offs whenever someone tells you

00:04:40,389 --> 00:04:44,560
this is the best thing

00:04:43,330 --> 00:04:47,800
there's always something that they are

00:04:44,560 --> 00:04:49,300
not telling you but I can't find any any

00:04:47,800 --> 00:04:52,630
problem with optimizing your images

00:04:49,300 --> 00:04:55,270
really just just do it there are many

00:04:52,630 --> 00:04:57,460
tools normally I use image opt-in but

00:04:55,270 --> 00:05:00,370
there are some tools that you can also

00:04:57,460 --> 00:05:03,970
include in your build pipeline and they

00:05:00,370 --> 00:05:05,699
will they will make the job the good

00:05:03,970 --> 00:05:08,080
thing about saving these bytes is that

00:05:05,699 --> 00:05:09,520
suddenly do you have more bandwidth for

00:05:08,080 --> 00:05:11,020
the rest of the assets that are

00:05:09,520 --> 00:05:13,270
competing when you are loading the page

00:05:11,020 --> 00:05:16,300
so maybe your JavaScript and the CSS

00:05:13,270 --> 00:05:20,410
will be delivered slightly faster so you

00:05:16,300 --> 00:05:23,500
do gain in two different ways and there

00:05:20,410 --> 00:05:27,430
are tools that will carry or carry out

00:05:23,500 --> 00:05:29,830
some lossless compression but there are

00:05:27,430 --> 00:05:32,440
also these days more tools that are

00:05:29,830 --> 00:05:35,740
doing lossy compression and they use a

00:05:32,440 --> 00:05:38,620
structural similarity to create variants

00:05:35,740 --> 00:05:40,900
of the same image and then it will pick

00:05:38,620 --> 00:05:42,490
one that is close enough to you know one

00:05:40,900 --> 00:05:44,410
and you don't need to say it

00:05:42,490 --> 00:05:46,690
I want this day pad to be a compress at

00:05:44,410 --> 00:05:48,520
80% can be dynamically adjusted

00:05:46,690 --> 00:05:52,419
depending on the on the image and you

00:05:48,520 --> 00:05:54,990
get lots of savings first thing that we

00:05:52,419 --> 00:05:58,060
can do is to use the picture element

00:05:54,990 --> 00:05:59,919
source certain sizes attributes at last

00:05:58,060 --> 00:06:04,120
we have a way to implement responsive

00:05:59,919 --> 00:06:08,020
design things that I don't see many

00:06:04,120 --> 00:06:09,010
sites using it and to be honest I don't

00:06:08,020 --> 00:06:11,650
use it myself

00:06:09,010 --> 00:06:14,500
I find a couple of problems with it and

00:06:11,650 --> 00:06:15,909
I like to listen to the people that are

00:06:14,500 --> 00:06:18,070
working on the standards and how they

00:06:15,909 --> 00:06:19,720
propose this and then I also like to see

00:06:18,070 --> 00:06:23,979
how developers are trying to put it in

00:06:19,720 --> 00:06:26,470
practice the first thing I personally

00:06:23,979 --> 00:06:27,300
don't like is that the code can get a

00:06:26,470 --> 00:06:31,330
bit bloated

00:06:27,300 --> 00:06:35,260
there are also this coupling between

00:06:31,330 --> 00:06:37,990
your markup these media queries that you

00:06:35,260 --> 00:06:40,450
might have set on CSS so you have to be

00:06:37,990 --> 00:06:42,909
very diligent trying to keep both in

00:06:40,450 --> 00:06:43,680
sync it's very easy to make a change in

00:06:42,909 --> 00:06:46,919
the design and

00:06:43,680 --> 00:06:48,930
CSS and forget that you had certain

00:06:46,919 --> 00:06:54,360
images there that will rely on certain

00:06:48,930 --> 00:06:56,850
breakpoints and that's needed by by the

00:06:54,360 --> 00:06:59,070
picture element or in this case the

00:06:56,850 --> 00:07:00,870
image with sizes and sources because the

00:06:59,070 --> 00:07:03,180
browser has to have this information in

00:07:00,870 --> 00:07:05,940
order to know exactly what he means it

00:07:03,180 --> 00:07:07,590
has to request it's like that but I

00:07:05,940 --> 00:07:11,310
would like it we little bit different

00:07:07,590 --> 00:07:13,380
maybe given this area try to find the

00:07:11,310 --> 00:07:15,840
image that fits that area but for that

00:07:13,380 --> 00:07:18,539
we need the sisters to be in place the

00:07:15,840 --> 00:07:20,130
second easiest lazy loading we still

00:07:18,539 --> 00:07:23,009
don't have any standard solution for

00:07:20,130 --> 00:07:25,229
this we can save so many bytes by just

00:07:23,009 --> 00:07:27,900
not requesting the images that the user

00:07:25,229 --> 00:07:31,320
is never going to see most of the users

00:07:27,900 --> 00:07:32,910
go to the page and this is something and

00:07:31,320 --> 00:07:33,530
they click around but they don't scroll

00:07:32,910 --> 00:07:36,120
to the bottom

00:07:33,530 --> 00:07:40,470
however we are requesting all the images

00:07:36,120 --> 00:07:43,560
until the bottom what I've seen working

00:07:40,470 --> 00:07:46,110
pretty well in practice is to have some

00:07:43,560 --> 00:07:48,990
content above the fold that uses regular

00:07:46,110 --> 00:07:50,190
images or a picture element and then the

00:07:48,990 --> 00:07:52,590
content that you know it's going to be

00:07:50,190 --> 00:07:54,180
below the fold in this case it's rather

00:07:52,590 --> 00:07:57,150
easy because it's a page that is

00:07:54,180 --> 00:08:00,060
optimized for mobile that content below

00:07:57,150 --> 00:08:01,590
the fold you apply some lazy loading and

00:08:00,060 --> 00:08:03,750
it's savings for everyone

00:08:01,590 --> 00:08:06,870
it's savings for the user because they

00:08:03,750 --> 00:08:09,030
don't need to spend a data on that and

00:08:06,870 --> 00:08:11,130
if you are using a CDN it's also savings

00:08:09,030 --> 00:08:12,599
for you because you don't have to pay

00:08:11,130 --> 00:08:16,949
for the city and for those images that

00:08:12,599 --> 00:08:21,060
you would never serve lazy loading is a

00:08:16,949 --> 00:08:25,380
bit tricky when done well it works when

00:08:21,060 --> 00:08:27,270
done but it can be a comeback fire the

00:08:25,380 --> 00:08:29,310
basic approach for doing lazy loading is

00:08:27,270 --> 00:08:31,440
to go through all the images and then

00:08:29,310 --> 00:08:34,020
tell whether whether they are in the

00:08:31,440 --> 00:08:35,729
viewport or not you can also check if

00:08:34,020 --> 00:08:37,200
they are close enough to the viewport so

00:08:35,729 --> 00:08:39,690
you request them because you know that

00:08:37,200 --> 00:08:42,899
as soon as the user Scrolls there will

00:08:39,690 --> 00:08:46,200
be in the viewport and then you have to

00:08:42,899 --> 00:08:48,270
do this every time you scroll of course

00:08:46,200 --> 00:08:48,839
and then also if it and you resize

00:08:48,270 --> 00:08:50,730
because

00:08:48,839 --> 00:08:54,270
resizing can also change the layout and

00:08:50,730 --> 00:08:56,310
then new images can appear there this is

00:08:54,270 --> 00:08:57,250
really expensive if you just implement

00:08:56,310 --> 00:09:00,399
it

00:08:57,250 --> 00:09:03,189
and you listen to all scroll and resize

00:09:00,399 --> 00:09:05,379
it and and check the dimensions of every

00:09:03,189 --> 00:09:07,990
meet that's going to be in validating

00:09:05,379 --> 00:09:10,660
the layout cuts for the browser and the

00:09:07,990 --> 00:09:13,600
browser has to do extra job every time

00:09:10,660 --> 00:09:17,860
one of these events is triggered so if

00:09:13,600 --> 00:09:21,430
you implement it try to suddenly there's

00:09:17,860 --> 00:09:24,009
a new API were talking before about new

00:09:21,430 --> 00:09:26,110
ideas come into the browsers

00:09:24,009 --> 00:09:28,480
these intersectional server is a really

00:09:26,110 --> 00:09:32,259
nice one that is already on Chrome and

00:09:28,480 --> 00:09:35,079
opera instead of listening to the scroll

00:09:32,259 --> 00:09:38,680
event you subscribe to events that are

00:09:35,079 --> 00:09:41,290
triggered by that image but it's not an

00:09:38,680 --> 00:09:44,649
image anymore you'll be using some DIF

00:09:41,290 --> 00:09:47,079
what it would be making the request but

00:09:44,649 --> 00:09:49,000
you listen to that and then whenever it

00:09:47,079 --> 00:09:52,120
appears on the screen you will get an

00:09:49,000 --> 00:09:53,740
event back as I say it's supported on

00:09:52,120 --> 00:09:55,930
Chrome and opera and it's under

00:09:53,740 --> 00:09:58,930
development on our browsers and it's

00:09:55,930 --> 00:10:01,000
very easy to implement a cropper that

00:09:58,930 --> 00:10:03,220
uses one or the other and this is an

00:10:01,000 --> 00:10:08,160
example I think it's best if we see that

00:10:03,220 --> 00:10:12,160
here so there we get event when that

00:10:08,160 --> 00:10:14,529
green square is on the screen but not

00:10:12,160 --> 00:10:17,529
only on the outer scrollable window but

00:10:14,529 --> 00:10:19,540
also in the tea that is also scroll so

00:10:17,529 --> 00:10:22,420
it's pretty nice and you can also be

00:10:19,540 --> 00:10:24,550
used for rendering built to a list of

00:10:22,420 --> 00:10:29,290
lots of elements not only for lazy

00:10:24,550 --> 00:10:32,379
loading now the interesting thing is

00:10:29,290 --> 00:10:35,620
okay we know we are going to request an

00:10:32,379 --> 00:10:38,050
image but what do we show while we are

00:10:35,620 --> 00:10:42,100
requesting the image I think this is

00:10:38,050 --> 00:10:44,470
really interesting there are different

00:10:42,100 --> 00:10:46,779
things that we can do here the default

00:10:44,470 --> 00:10:49,059
one is not doing anything at all we just

00:10:46,779 --> 00:10:50,819
save this space there the browser will

00:10:49,059 --> 00:10:53,319
make a request and it will come back

00:10:50,819 --> 00:10:55,629
second one is to use a placeholder this

00:10:53,319 --> 00:10:58,089
might be useful if you have like a user

00:10:55,629 --> 00:11:01,269
page and you have a profile image you

00:10:58,089 --> 00:11:03,970
can use that and then if image for the

00:11:01,269 --> 00:11:06,429
user is not set then you can display

00:11:03,970 --> 00:11:09,790
this one or you can just show this one

00:11:06,429 --> 00:11:11,839
until the image is fits

00:11:09,790 --> 00:11:15,290
and normally you could implement the

00:11:11,839 --> 00:11:19,730
issues in some SVU the seventh one is to

00:11:15,290 --> 00:11:22,730
just use a color background color this

00:11:19,730 --> 00:11:25,189
is really useful if you are rendering

00:11:22,730 --> 00:11:28,249
text that has the same color as the

00:11:25,189 --> 00:11:29,860
background and you rely on some image to

00:11:28,249 --> 00:11:32,360
be in the middle so imagine our

00:11:29,860 --> 00:11:35,329
background is white and the text is

00:11:32,360 --> 00:11:36,920
white but we are going to be putting a

00:11:35,329 --> 00:11:39,170
background image behind the text and

00:11:36,920 --> 00:11:42,129
then we don't have that background the

00:11:39,170 --> 00:11:45,050
text won't be shown because it's white

00:11:42,129 --> 00:11:48,910
that's the background of the body so

00:11:45,050 --> 00:11:53,449
it's a good idea to use one of the

00:11:48,910 --> 00:11:55,249
colors that are in them it's to self

00:11:53,449 --> 00:11:58,129
asset placeholder normally there are

00:11:55,249 --> 00:11:59,509
also tools that you can use libraries

00:11:58,129 --> 00:12:01,660
that you can use to give you a palette

00:11:59,509 --> 00:12:04,309
of different colors that you can use and

00:12:01,660 --> 00:12:06,559
the last option which we will be

00:12:04,309 --> 00:12:09,800
exploring a bit more is to use a blurry

00:12:06,559 --> 00:12:11,449
image so you use a smaller version of

00:12:09,800 --> 00:12:13,189
the image and you set that and we will

00:12:11,449 --> 00:12:15,230
see how some sites are using it in

00:12:13,189 --> 00:12:18,379
practice I'm going to be talking about

00:12:15,230 --> 00:12:20,870
the two last ones because I think those

00:12:18,379 --> 00:12:22,399
are the most interesting ones and the

00:12:20,870 --> 00:12:24,050
ones that are trying to improve the user

00:12:22,399 --> 00:12:28,819
per field perceived performance of the

00:12:24,050 --> 00:12:30,559
site so as examples of solid color first

00:12:28,819 --> 00:12:33,470
I'm going to show this one this is a

00:12:30,559 --> 00:12:35,089
Chrome browser that when whenever it

00:12:33,470 --> 00:12:37,639
detects that the user is on a slow

00:12:35,089 --> 00:12:40,879
network they offer the possibility to

00:12:37,639 --> 00:12:46,129
hide all images actually not request

00:12:40,879 --> 00:12:48,230
those images use a dominant color from

00:12:46,129 --> 00:12:50,540
the image and then you have the

00:12:48,230 --> 00:12:52,939
possibility of tapping in the bottom to

00:12:50,540 --> 00:12:55,069
lo them this is really important in

00:12:52,939 --> 00:12:58,519
countries where the internet connection

00:12:55,069 --> 00:13:01,790
is super expensive but the youth is also

00:12:58,519 --> 00:13:06,889
in some other sites are more normal this

00:13:01,790 --> 00:13:10,240
is arts and culture it's society built

00:13:06,889 --> 00:13:15,799
for browsing collections of museums and

00:13:10,240 --> 00:13:18,160
here you can see okay you can barely see

00:13:15,799 --> 00:13:22,990
it the color is very pale

00:13:18,160 --> 00:13:24,520
but they they show some placeholders the

00:13:22,990 --> 00:13:27,130
thing about those placeholders is that

00:13:24,520 --> 00:13:29,470
they give feedback to the user so you

00:13:27,130 --> 00:13:31,240
know that something's going on that the

00:13:29,470 --> 00:13:32,770
requests already went out and you are

00:13:31,240 --> 00:13:36,520
waiting for the images to come back

00:13:32,770 --> 00:13:39,730
you also get an idea of the size of

00:13:36,520 --> 00:13:43,660
image and the color but you don't need

00:13:39,730 --> 00:13:45,940
to use one of these weird scenarios you

00:13:43,660 --> 00:13:49,930
can just assert some google images

00:13:45,940 --> 00:13:51,610
this video was recorded using certain

00:13:49,930 --> 00:13:54,550
network and that's why we see lots of

00:13:51,610 --> 00:13:58,840
these placeholders but you get to get

00:13:54,550 --> 00:14:01,210
the idea so that's supposed to improve

00:13:58,840 --> 00:14:06,160
the user perceived performance of the

00:14:01,210 --> 00:14:08,800
images then if we see examples of pros

00:14:06,160 --> 00:14:13,540
if in its loading it's also called blur

00:14:08,800 --> 00:14:15,790
up technique that's one that I'm I think

00:14:13,540 --> 00:14:19,030
they are doing it a lot I don't know if

00:14:15,790 --> 00:14:21,400
they are doing it well or not but they

00:14:19,030 --> 00:14:23,530
are learning and that's medium so

00:14:21,400 --> 00:14:29,730
whenever you go to a medium post and you

00:14:23,530 --> 00:14:32,230
see an image they will load it like this

00:14:29,730 --> 00:14:36,160
then the will transition so first

00:14:32,230 --> 00:14:39,510
firstly there's no image then they

00:14:36,160 --> 00:14:42,790
request a small one that they use to

00:14:39,510 --> 00:14:47,050
blurry and scale up and then finally

00:14:42,790 --> 00:14:50,980
they fade in the big one and that's a

00:14:47,050 --> 00:14:53,970
film script of the process so this is

00:14:50,980 --> 00:14:56,350
not straightforward there are lots of

00:14:53,970 --> 00:14:58,600
technicalities behind me they use a DIF

00:14:56,350 --> 00:15:00,880
to render the image if they if they were

00:14:58,600 --> 00:15:02,230
to use an image then limits it's already

00:15:00,880 --> 00:15:04,440
requested there's nothing to do there

00:15:02,230 --> 00:15:07,420
they request a small one

00:15:04,440 --> 00:15:10,480
they draw the small one into a compass

00:15:07,420 --> 00:15:12,820
and then they apply a blur effect you

00:15:10,480 --> 00:15:16,090
can also achieve the same the same

00:15:12,820 --> 00:15:18,400
behavior by using CSS filters and they

00:15:16,090 --> 00:15:22,870
have also blurred there and also the say

00:15:18,400 --> 00:15:25,060
blur filter on SVG not sure why they

00:15:22,870 --> 00:15:28,100
chose canvas but it's very creative

00:15:25,060 --> 00:15:32,000
then they request LRT needs

00:15:28,100 --> 00:15:34,399
and then one it's feds the vendor one

00:15:32,000 --> 00:15:36,350
and they hide the converse and this is

00:15:34,399 --> 00:15:38,660
the overview of the markup so if you

00:15:36,350 --> 00:15:41,180
want to implement something like this

00:15:38,660 --> 00:15:44,180
you will need to have several things

00:15:41,180 --> 00:15:47,180
into account so that's a deep fear that

00:15:44,180 --> 00:15:50,269
is going to keep the aspect ratio so you

00:15:47,180 --> 00:15:52,459
meet that's the initial small image

00:15:50,269 --> 00:15:55,569
that's the canvas this the finala means

00:15:52,459 --> 00:15:58,490
and there is no script because they they

00:15:55,569 --> 00:16:02,209
care about users that don't have your

00:15:58,490 --> 00:16:07,610
script in a bowl then the question is is

00:16:02,209 --> 00:16:11,110
it worth it or how do users say here we

00:16:07,610 --> 00:16:15,040
have people

00:16:11,110 --> 00:16:17,830
get it looks nice or it loads very fast

00:16:15,040 --> 00:16:21,340
then you also have people that say it's

00:16:17,830 --> 00:16:23,620
very restricting that the loads seems a

00:16:21,340 --> 00:16:26,200
simile slow and this is very subjective

00:16:23,620 --> 00:16:31,330
and it's it's a problem I'm not going to

00:16:26,200 --> 00:16:33,160
say this is great guys force I can't

00:16:31,330 --> 00:16:35,530
really say that because people are going

00:16:33,160 --> 00:16:37,930
to perceive it in a different way and

00:16:35,530 --> 00:16:40,450
this is not surprising we have had

00:16:37,930 --> 00:16:45,730
something similar for a long time which

00:16:40,450 --> 00:16:48,370
is progressive jpgs so there you can see

00:16:45,730 --> 00:16:52,210
how at thirty percent of the bytes

00:16:48,370 --> 00:16:54,640
unloaded we have already rendered the

00:16:52,210 --> 00:16:56,890
whole area even even if it's with lots

00:16:54,640 --> 00:17:03,959
of pixels at least we can do the whole

00:16:56,890 --> 00:17:06,910
image in theory this is nice in practice

00:17:03,959 --> 00:17:10,300
there's a study that I found the only

00:17:06,910 --> 00:17:13,870
study that I've seen that carry out this

00:17:10,300 --> 00:17:15,940
research that said that cognitive

00:17:13,870 --> 00:17:17,770
fluency is inhibited and the brain has

00:17:15,940 --> 00:17:20,459
to work slightly harder to make sense of

00:17:17,770 --> 00:17:24,400
what's being displayed so these

00:17:20,459 --> 00:17:27,459
progressive images are a bit harder for

00:17:24,400 --> 00:17:31,900
the user to process

00:17:27,459 --> 00:17:36,130
there's only 7% of JP Matias used on the

00:17:31,900 --> 00:17:42,880
web are progressive only 7% so that

00:17:36,130 --> 00:17:45,820
tells us something then this technique

00:17:42,880 --> 00:17:49,270
and also backfire there it's it's very

00:17:45,820 --> 00:17:51,850
small that says if you are we win this

00:17:49,270 --> 00:17:54,700
on desktop and the above image looks a

00:17:51,850 --> 00:17:58,690
bit blurry please refresh the page so

00:17:54,700 --> 00:18:00,670
instead of ending up with the normal

00:17:58,690 --> 00:18:02,770
limits we are ending up with the blurry

00:18:00,670 --> 00:18:07,450
want something something broke in

00:18:02,770 --> 00:18:10,510
between Sarah also reported something

00:18:07,450 --> 00:18:12,610
similar so it's it's very creative but

00:18:10,510 --> 00:18:13,690
it can also backfire so if you implement

00:18:12,610 --> 00:18:17,230
something like this

00:18:13,690 --> 00:18:19,600
just be careful medium are not the only

00:18:17,230 --> 00:18:21,550
ones using using this Facebook are also

00:18:19,600 --> 00:18:23,630
doing something similar for the mobile

00:18:21,550 --> 00:18:26,720
client

00:18:23,630 --> 00:18:28,190
they wanted to inline the teeny self

00:18:26,720 --> 00:18:30,710
thumbnail and they wanted to make it

00:18:28,190 --> 00:18:33,530
super small so it was part of a payload

00:18:30,710 --> 00:18:35,540
the initial payload supply the graph

00:18:33,530 --> 00:18:37,430
cure so whenever you visited the users

00:18:35,540 --> 00:18:39,380
profile page there was a request to the

00:18:37,430 --> 00:18:42,740
service and then the response would

00:18:39,380 --> 00:18:46,250
already contain the image so you don't

00:18:42,740 --> 00:18:48,410
need to make another trip to get the

00:18:46,250 --> 00:18:52,150
phone and the full image to render

00:18:48,410 --> 00:18:54,500
something and they decided that a good

00:18:52,150 --> 00:18:57,770
value for the size of the image would be

00:18:54,500 --> 00:19:00,920
200 bytes but that's the problem with

00:18:57,770 --> 00:19:03,950
JPEG and is that only the headers of a

00:19:00,920 --> 00:19:08,300
JPEG image is already bigger than that

00:19:03,950 --> 00:19:10,670
so these are also very creative people

00:19:08,300 --> 00:19:12,880
and they decided that okay let's try to

00:19:10,670 --> 00:19:15,590
find a common header for all images

00:19:12,880 --> 00:19:18,230
store that in the mobile client and then

00:19:15,590 --> 00:19:21,740
self-only the compressed data and then

00:19:18,230 --> 00:19:25,640
we put it together later on so just so

00:19:21,740 --> 00:19:28,580
you see how several companies are trying

00:19:25,640 --> 00:19:31,100
to really make it make the super

00:19:28,580 --> 00:19:35,000
performance specially in countries where

00:19:31,100 --> 00:19:37,070
they have very slow networks and this is

00:19:35,000 --> 00:19:39,850
super creative and I was wondering okay

00:19:37,070 --> 00:19:44,240
let's let's give it a try let's see how

00:19:39,850 --> 00:19:47,330
how small I can make a JPEG and I used

00:19:44,240 --> 00:19:50,600
images that were 42 by 42 pixels which

00:19:47,330 --> 00:19:55,250
are the same size at a report and I make

00:19:50,600 --> 00:19:57,890
them I compress them up maximum yeah

00:19:55,250 --> 00:20:00,040
they were right there bigger than 200

00:19:57,890 --> 00:20:06,800
bytes then I started playing with gif

00:20:00,040 --> 00:20:08,930
png yeah let's just what be it turns out

00:20:06,800 --> 00:20:11,270
that what piece really nice for encoding

00:20:08,930 --> 00:20:17,090
small images and it actually except for

00:20:11,270 --> 00:20:19,760
this image the rightmost there are way

00:20:17,090 --> 00:20:24,230
smaller than 200 bytes they're roughly

00:20:19,760 --> 00:20:26,330
25% of the size of a later one might say

00:20:24,230 --> 00:20:27,860
that the the images are not subtly

00:20:26,330 --> 00:20:29,330
saying you know have the same artifacts

00:20:27,860 --> 00:20:30,600
but these are images that are going to

00:20:29,330 --> 00:20:34,350
be used for

00:20:30,600 --> 00:20:36,720
blur effect on blur effect on it and

00:20:34,350 --> 00:20:38,149
then when you apply that effect they

00:20:36,720 --> 00:20:41,610
look mostly the same

00:20:38,149 --> 00:20:43,919
so at some point we might want to be

00:20:41,610 --> 00:20:47,279
creative and we also need to be aware of

00:20:43,919 --> 00:20:49,110
all the new formats and new API that

00:20:47,279 --> 00:20:56,090
appear because maybe it's a moment

00:20:49,110 --> 00:20:59,549
embrace them yeah last but not least I

00:20:56,090 --> 00:21:03,779
like SBS we've seen how powerful they

00:20:59,549 --> 00:21:06,509
are and I was seeing these baits I don't

00:21:03,779 --> 00:21:11,159
know if you seen it it's a review of a

00:21:06,509 --> 00:21:13,950
PlayStation on polygon site we also did

00:21:11,159 --> 00:21:18,350
a review for Xbox one and I really like

00:21:13,950 --> 00:21:20,580
how they they were drawing on this video

00:21:18,350 --> 00:21:24,870
and then I started playing with it and I

00:21:20,580 --> 00:21:28,860
said ok let's try to reproduce it you

00:21:24,870 --> 00:21:32,190
can use any SPE by applying a certain

00:21:28,860 --> 00:21:35,429
transition to the stroke - offset you

00:21:32,190 --> 00:21:38,340
will get this to an effect but what does

00:21:35,429 --> 00:21:42,210
this have to do with low in bitmap

00:21:38,340 --> 00:21:47,100
images well it turns out that we can use

00:21:42,210 --> 00:21:50,070
something something for low in this

00:21:47,100 --> 00:21:53,370
bitmap images which is detecting the

00:21:50,070 --> 00:21:57,440
edges so instead of trying to vectorize

00:21:53,370 --> 00:22:00,779
the image we can try to draw the edge

00:21:57,440 --> 00:22:02,850
and there are implementations of this

00:22:00,779 --> 00:22:08,129
algorithm in JavaScript and then you can

00:22:02,850 --> 00:22:10,049
do something like this so imagine that

00:22:08,129 --> 00:22:13,110
instead of serving a small version of a

00:22:10,049 --> 00:22:16,320
mate's you serve as Wii U these are

00:22:13,110 --> 00:22:18,480
three four kilobytes so they can they

00:22:16,320 --> 00:22:23,700
can be inline and you can be drawing

00:22:18,480 --> 00:22:26,039
them while you load the big image it's I

00:22:23,700 --> 00:22:27,960
don't know how useful it is it's kind of

00:22:26,039 --> 00:22:30,269
its kind of fun seeing something around

00:22:27,960 --> 00:22:33,269
there and you can you can drop an image

00:22:30,269 --> 00:22:36,570
and it will just work and you can define

00:22:33,269 --> 00:22:42,639
how many lines you want to use or

00:22:36,570 --> 00:22:45,309
how big their sphere you want to be the

00:22:42,639 --> 00:22:48,369
way this is done is sigh explained you

00:22:45,309 --> 00:22:50,909
find the eighties using certain

00:22:48,369 --> 00:22:55,479
algorithm and then you create lines

00:22:50,909 --> 00:22:58,119
these lines in my case I chose polylines

00:22:55,479 --> 00:23:00,399
but you can also use paths in a few

00:22:58,119 --> 00:23:02,169
years and then you once you have the SVD

00:23:00,399 --> 00:23:05,159
then you use the same technique to draw

00:23:02,169 --> 00:23:10,629
it it's a no-brainer

00:23:05,159 --> 00:23:12,369
so should we do this yes because you can

00:23:10,629 --> 00:23:14,739
yeah it doesn't mean you should

00:23:12,369 --> 00:23:16,539
it's like these people ask that if we

00:23:14,739 --> 00:23:21,190
come down just in JavaScript it will V

00:23:16,539 --> 00:23:24,129
down and you see almost you see

00:23:21,190 --> 00:23:27,099
terminals you see almost operating

00:23:24,129 --> 00:23:29,950
systems implemented in JavaScript and

00:23:27,099 --> 00:23:33,309
people do it for fun but I think the web

00:23:29,950 --> 00:23:35,499
is fun it's intrinsically fun it's open

00:23:33,309 --> 00:23:37,599
we can we can all right click and

00:23:35,499 --> 00:23:40,690
inspect the element and that's how I

00:23:37,599 --> 00:23:42,849
learned web and that's how everyone can

00:23:40,690 --> 00:23:45,220
kind of learn about these techniques and

00:23:42,849 --> 00:23:48,249
it's it's open by default the code

00:23:45,220 --> 00:23:51,970
doesn't live compiled behind somewhere

00:23:48,249 --> 00:23:55,179
packets so yes go out and experiment

00:23:51,970 --> 00:23:57,279
with this and try these techniques why

00:23:55,179 --> 00:24:00,970
not I mean as long as they are easily

00:23:57,279 --> 00:24:04,509
revert to so if you use something crazy

00:24:00,970 --> 00:24:07,389
like a lot crazy something like what

00:24:04,509 --> 00:24:09,460
they are doing at medium that's that

00:24:07,389 --> 00:24:11,440
completely right and eventually they

00:24:09,460 --> 00:24:13,539
might move to something else as long as

00:24:11,440 --> 00:24:14,409
it's something that they can decide from

00:24:13,539 --> 00:24:19,090
one day to the other

00:24:14,409 --> 00:24:21,279
why not let's let's try anything yeah

00:24:19,090 --> 00:24:23,609
that was the whole my talk thank you

00:24:21,279 --> 00:24:23,609
very much

00:24:24,999 --> 00:24:27,059
you

00:24:34,550 --> 00:24:36,610

YouTube URL: https://www.youtube.com/watch?v=szmVNOnkwoU


