Title: Serena Chen: The Ideal Styling Language: a gedankenexperiment
Publication date: 2017-05-19
Playlist: CSSConf AU 2016
Description: 
	Thank you to Mozilla for making video recording possible.

We know the problems with CSS: It’s hard to maintain. It’s hard to scale. There’s no scope. The cascade is as indiscriminate as it is unrelenting. And we’ve been trying to fix it for the past 10 years, with SaSS, ITCSS, CSS Modules, and so on. These wonderful pre- and post- processors are tackling the unwelcome symptoms of CSS. So let’s get straight to the point — what would the Ideal Styling Language look like?

What does atomic design look like in our Ideal Styling Language? How do we style interactions, rather than visual aesthetics separate from animations? Will it be functional, or object-oriented? How much DOM information do we include? How do we select elements in the DOM when the DOM itself is changing? How do we do this in a performant manner?

Finally, how realistic would this Ideal Styling Language be to implement? If it’s not realistic, what does this Ideal Styling Language tell us about how we should be writing CSS now?

It’s going to be a fun, interesting, and enlightening thought exercise. Just wait and see.
Captions: 
	00:00:07,840 --> 00:00:14,260
hello Wow thank you so much so that

00:00:10,630 --> 00:00:16,480
insurer so today we're going to be

00:00:14,260 --> 00:00:20,650
embarking on a little thought experiment

00:00:16,480 --> 00:00:23,380
about how I our ideal version of CSS

00:00:20,650 --> 00:00:27,300
might look like but before we get to

00:00:23,380 --> 00:00:30,519
that let's go through some background

00:00:27,300 --> 00:00:33,460
now I started making websites like a lot

00:00:30,519 --> 00:00:35,710
of you in the audience a while ago like

00:00:33,460 --> 00:00:39,510
in the late 90s just a few years after

00:00:35,710 --> 00:00:42,610
the first CSS spec was rolled out and as

00:00:39,510 --> 00:00:47,110
you might know the web was a very very

00:00:42,610 --> 00:00:51,490
different place back then so the old

00:00:47,110 --> 00:00:53,050
internet was made for documents and when

00:00:51,490 --> 00:00:55,450
you think about the weird annoying

00:00:53,050 --> 00:00:57,640
things about CSS like global scope in

00:00:55,450 --> 00:01:02,080
the world of documents it actually makes

00:00:57,640 --> 00:01:05,950
a lot of sense but nowadays people of

00:01:02,080 --> 00:01:07,869
the web have changed even as soon as

00:01:05,950 --> 00:01:09,670
five years ago having your own style

00:01:07,869 --> 00:01:11,920
sheet for your favorite websites on the

00:01:09,670 --> 00:01:15,909
web was not an unheard-of thing

00:01:11,920 --> 00:01:18,880
and web development itself has changed

00:01:15,909 --> 00:01:20,999
the Dom is no longer static and I'm

00:01:18,880 --> 00:01:23,530
pretty sure I spend most of my time

00:01:20,999 --> 00:01:25,960
troubleshooting NPM and knows of them

00:01:23,530 --> 00:01:31,319
instead of writing like actual HTML and

00:01:25,960 --> 00:01:31,319
CSS so it's a wild wild world we live in

00:01:32,969 --> 00:01:40,990
so in the last 20 years we have been

00:01:36,850 --> 00:01:45,159
molding CSS to fit our needs in 2006

00:01:40,990 --> 00:01:47,649
sass rasili released and it blew all of

00:01:45,159 --> 00:01:51,939
our minds does anyone remember the first

00:01:47,649 --> 00:01:53,170
time they heard about sass cuz I do and

00:01:51,939 --> 00:01:58,090
it was great

00:01:53,170 --> 00:01:59,920
changed my life post CSS meant that our

00:01:58,090 --> 00:02:03,729
poor fingers didn't have to type out

00:01:59,920 --> 00:02:05,590
every single browser prefix and CSS

00:02:03,729 --> 00:02:07,749
modules meant the end to global

00:02:05,590 --> 00:02:09,880
namespaces we're actually using it at

00:02:07,749 --> 00:02:11,680
work at the moment to build stateless

00:02:09,880 --> 00:02:15,120
functional components and it's a

00:02:11,680 --> 00:02:18,069
beautiful world and I'm not even

00:02:15,120 --> 00:02:19,170
mentioning here the like five bajillion

00:02:18,069 --> 00:02:22,650
different name

00:02:19,170 --> 00:02:26,160
facing conventions out there but it's

00:02:22,650 --> 00:02:29,970
healthier and in this list you might

00:02:26,160 --> 00:02:32,280
start to see a pattern we're

00:02:29,970 --> 00:02:34,980
increasingly tacking on more and more

00:02:32,280 --> 00:02:40,020
solutions more and more conventions more

00:02:34,980 --> 00:02:42,780
and more toolkits but in the midst of

00:02:40,020 --> 00:02:44,760
all this tooling we're taking our mental

00:02:42,780 --> 00:02:47,190
capacity and focusing it on something

00:02:44,760 --> 00:02:49,050
that's not actually making websites it's

00:02:47,190 --> 00:02:49,530
making the act of making websites nice

00:02:49,050 --> 00:02:52,950
and easy

00:02:49,530 --> 00:02:57,890
and in the midst of all this tooling the

00:02:52,950 --> 00:03:01,860
core pain point of CSS is still the same

00:02:57,890 --> 00:03:06,450
it's hard to write maintainable CSS at

00:03:01,860 --> 00:03:08,790
scale now what does this mean it means

00:03:06,450 --> 00:03:11,730
lack of scope global scope might be fine

00:03:08,790 --> 00:03:13,170
for a weekend project but as soon as you

00:03:11,730 --> 00:03:15,330
work with someone else as soon as you

00:03:13,170 --> 00:03:19,680
work on a large project with hundreds of

00:03:15,330 --> 00:03:22,380
views it becomes really unbearable it

00:03:19,680 --> 00:03:25,280
means confusion around which rules apply

00:03:22,380 --> 00:03:27,989
to which element and which rules don't

00:03:25,280 --> 00:03:30,329
how am I supposed to maintain something

00:03:27,989 --> 00:03:32,790
if I have no idea what changing this

00:03:30,329 --> 00:03:38,070
piece of CSS will do to some obscure

00:03:32,790 --> 00:03:39,600
page that no one sees anymore and of

00:03:38,070 --> 00:03:41,100
course the list goes on and I'm kind of

00:03:39,600 --> 00:03:43,470
preaching to the choir here I'm sure

00:03:41,100 --> 00:03:46,980
we've all had our own battles with CSS

00:03:43,470 --> 00:03:50,700
things like dead code removal from the

00:03:46,980 --> 00:03:52,829
top before just things like working with

00:03:50,700 --> 00:03:57,180
other people and by other people I mean

00:03:52,829 --> 00:03:59,130
yourself six months ago just doing

00:03:57,180 --> 00:04:04,410
something as simple as that is really

00:03:59,130 --> 00:04:06,450
difficult but I think that these two

00:04:04,410 --> 00:04:10,140
just still the core problems of

00:04:06,450 --> 00:04:11,819
maintainable CSS at scale and if you

00:04:10,140 --> 00:04:15,709
look closely at these problems you can

00:04:11,819 --> 00:04:21,209
see a common symptom they both lead to

00:04:15,709 --> 00:04:23,970
specificity Wars so if we're talking

00:04:21,209 --> 00:04:25,950
about an optimal styling language we

00:04:23,970 --> 00:04:29,690
would do very well to eliminate

00:04:25,950 --> 00:04:31,660
specificity Wars once and for all and

00:04:29,690 --> 00:04:34,210
the reason is that

00:04:31,660 --> 00:04:36,400
it doesn't matter how much good practice

00:04:34,210 --> 00:04:39,370
we know it doesn't matter how diligent

00:04:36,400 --> 00:04:41,590
we are in the best way to Architecture

00:04:39,370 --> 00:04:44,020
our CSS as soon as you get into a

00:04:41,590 --> 00:04:48,210
specificity war all of that comes off

00:04:44,020 --> 00:04:50,880
the table and the importance come out

00:04:48,210 --> 00:04:53,650
we've all been there we've all done that

00:04:50,880 --> 00:04:56,320
and since this is such a core problem

00:04:53,650 --> 00:04:58,930
with CSS that touches on everything from

00:04:56,320 --> 00:05:01,330
the Cascades the selectors to scope to

00:04:58,930 --> 00:05:03,310
inheritance solving this should solve a

00:05:01,330 --> 00:05:07,240
really good chunk of our most

00:05:03,310 --> 00:05:11,260
fundamental problems in CSS so now that

00:05:07,240 --> 00:05:12,700
we have our ideal styling language and

00:05:11,260 --> 00:05:13,990
we know what it should well we don't

00:05:12,700 --> 00:05:17,410
have it yet but we know what it should

00:05:13,990 --> 00:05:19,230
solve let's go ahead and embark on this

00:05:17,410 --> 00:05:22,480
thought experiment

00:05:19,230 --> 00:05:25,170
what would CSS look like if it were

00:05:22,480 --> 00:05:25,170
written today

00:05:30,590 --> 00:05:36,140
probably jealousy I mean I kind of want

00:05:33,720 --> 00:05:39,300
to touch on JavaScript just as an aside

00:05:36,140 --> 00:05:41,460
because it's such a massive pillar of

00:05:39,300 --> 00:05:45,150
our current web development landscape

00:05:41,460 --> 00:05:47,640
and as a disclaimer I have no base which

00:05:45,150 --> 00:05:50,280
out script I am loving CSS modules I

00:05:47,640 --> 00:05:52,410
think it is doing exactly what we need

00:05:50,280 --> 00:05:56,580
and it is filling the gaps that the old

00:05:52,410 --> 00:05:59,760
web left behind but if we take our

00:05:56,580 --> 00:06:02,540
current trajectory of web development

00:05:59,760 --> 00:06:05,360
and take it to its logical conclusion

00:06:02,540 --> 00:06:09,450
web development is going to simply be

00:06:05,360 --> 00:06:12,420
JavaScript development and this is not

00:06:09,450 --> 00:06:16,350
necessarily a bad thing except when it

00:06:12,420 --> 00:06:21,120
is you see the reason the web is so

00:06:16,350 --> 00:06:24,330
prolific and X and successful is because

00:06:21,120 --> 00:06:26,250
it's accessible you can access from any

00:06:24,330 --> 00:06:29,010
device anywhere it degrades gracefully

00:06:26,250 --> 00:06:31,860
if you have JavaScript turned off if

00:06:29,010 --> 00:06:33,450
your web browser doesn't understand what

00:06:31,860 --> 00:06:37,410
CSS is it's fine you still get the

00:06:33,450 --> 00:06:41,040
content and this accessibility is made

00:06:37,410 --> 00:06:47,640
possible because we separate content

00:06:41,040 --> 00:06:50,100
style and logic so while JavaScript is

00:06:47,640 --> 00:06:52,110
really awesome for now we have to keep

00:06:50,100 --> 00:06:54,000
in mind and be careful about which

00:06:52,110 --> 00:06:56,160
direction we're heading in in the future

00:06:54,000 --> 00:06:59,340
and always bear in mind that

00:06:56,160 --> 00:07:03,270
accessibility is compulsory for the web

00:06:59,340 --> 00:07:07,410
not just a nice to have so with my

00:07:03,270 --> 00:07:10,410
JavaScript right rant done we can go on

00:07:07,410 --> 00:07:12,560
to looking at the ideal styling language

00:07:10,410 --> 00:07:15,480
I'm going to break this up into three

00:07:12,560 --> 00:07:18,330
what I see is three core culprits to

00:07:15,480 --> 00:07:22,770
specificity was the first being the

00:07:18,330 --> 00:07:26,130
Cascade so what does our ideal Cascade

00:07:22,770 --> 00:07:28,580
look like well first of all who here

00:07:26,130 --> 00:07:31,350
actually knows what the Cascade is I

00:07:28,580 --> 00:07:35,940
know like really weird question to ask

00:07:31,350 --> 00:07:37,950
at a CSS conference but the many many

00:07:35,940 --> 00:07:40,800
web developers that I admit including

00:07:37,950 --> 00:07:42,750
myself have confuse

00:07:40,800 --> 00:07:47,310
use the Cascade with the specificity

00:07:42,750 --> 00:07:49,680
algorithm with inheritance and I saw

00:07:47,310 --> 00:07:51,810
that for the longest time too but it's

00:07:49,680 --> 00:07:54,870
neither of those and what it actually is

00:07:51,810 --> 00:07:57,000
is how the browser decides which rules

00:07:54,870 --> 00:08:03,659
take precedent depending on where they

00:07:57,000 --> 00:08:05,490
come from so here is the order so when

00:08:03,659 --> 00:08:07,800
your browser is passing through your

00:08:05,490 --> 00:08:10,139
HTML and you're done it takes an element

00:08:07,800 --> 00:08:12,120
and it filters out all the rules that

00:08:10,139 --> 00:08:13,919
don't apply and it's left with all the

00:08:12,120 --> 00:08:16,530
rules that apply to the element that

00:08:13,919 --> 00:08:19,530
it's looking at right now then it

00:08:16,530 --> 00:08:21,449
performs the Cascade algorithm and it

00:08:19,530 --> 00:08:23,729
orders all these rules based on where

00:08:21,449 --> 00:08:28,110
they come from so the lowest precedent

00:08:23,729 --> 00:08:29,639
here is the the user agent style sheets

00:08:28,110 --> 00:08:33,000
which is your browser style sheets

00:08:29,639 --> 00:08:35,190
essentially and then the next one are

00:08:33,000 --> 00:08:37,019
the user style sheets so if you want to

00:08:35,190 --> 00:08:38,399
get creative if you want to put your own

00:08:37,019 --> 00:08:41,370
style sheets in your browser that's

00:08:38,399 --> 00:08:43,560
where it sits in the Cascade the one

00:08:41,370 --> 00:08:45,870
above is the author statutes this is

00:08:43,560 --> 00:08:50,930
where your CSS as a web developer lies

00:08:45,870 --> 00:08:53,430
and in between that is CSS animations

00:08:50,930 --> 00:08:56,670
the earth in case you were wondering it

00:08:53,430 --> 00:08:59,339
doesn't Cascade and after that the

00:08:56,670 --> 00:09:00,779
important declarations for author and

00:08:59,339 --> 00:09:04,110
user but flipped around the other way

00:09:00,779 --> 00:09:07,110
now this is really important because it

00:09:04,110 --> 00:09:08,670
explains why if someone else has used in

00:09:07,110 --> 00:09:11,160
an important declaration you can't just

00:09:08,670 --> 00:09:14,070
make a more specific selector because

00:09:11,160 --> 00:09:16,170
the Cascade algorithm happens before the

00:09:14,070 --> 00:09:17,490
specificity algorithm so it doesn't

00:09:16,170 --> 00:09:18,779
matter how specific you make it if

00:09:17,490 --> 00:09:20,700
someone else has got an important

00:09:18,779 --> 00:09:25,290
somewhere it's going to override your

00:09:20,700 --> 00:09:27,720
thing so this is the thing a lot of web

00:09:25,290 --> 00:09:30,390
developers and I'm bidding on most web

00:09:27,720 --> 00:09:32,430
developers not knowing what exactly the

00:09:30,390 --> 00:09:34,079
Cascade is and we fear what we don't

00:09:32,430 --> 00:09:36,660
know we're afraid of the Cascade and

00:09:34,079 --> 00:09:38,399
this confusion will cause the classic

00:09:36,660 --> 00:09:42,089
important decorations coming up

00:09:38,399 --> 00:09:45,029
everywhere and ruining our lives so I

00:09:42,089 --> 00:09:47,250
had a long deep think about how the

00:09:45,029 --> 00:09:50,060
Cascade could be bitter and you know

00:09:47,250 --> 00:09:52,500
what the Cascade is actually really good

00:09:50,060 --> 00:09:53,630
we need a way to resolve conflicting

00:09:52,500 --> 00:09:56,780
rules coming from

00:09:53,630 --> 00:09:58,910
origins and when we think about it I

00:09:56,780 --> 00:10:00,940
think we all have a really good idea of

00:09:58,910 --> 00:10:04,400
where the problem is

00:10:00,940 --> 00:10:05,680
it's those important declarations so

00:10:04,400 --> 00:10:07,760
they just remove it

00:10:05,680 --> 00:10:11,180
it's our thought experiment we can do

00:10:07,760 --> 00:10:14,750
what we want so look at that beautiful

00:10:11,180 --> 00:10:17,390
brand-new world but this causes another

00:10:14,750 --> 00:10:20,450
issue which is that in a world without

00:10:17,390 --> 00:10:24,260
importance suddenly we have to write

00:10:20,450 --> 00:10:27,050
good selectors we can't just important

00:10:24,260 --> 00:10:31,150
stuff away so let's look at the ideal

00:10:27,050 --> 00:10:33,530
selector now what do we want we want

00:10:31,150 --> 00:10:36,290
separation of concerns we don't want a

00:10:33,530 --> 00:10:39,020
selector that basically regurgitates the

00:10:36,290 --> 00:10:43,280
Dom structure but we also don't want a

00:10:39,020 --> 00:10:44,990
selector to be we don't want to use so

00:10:43,280 --> 00:10:46,880
many classes in our markup that we're

00:10:44,990 --> 00:10:51,410
really educating style information and

00:10:46,880 --> 00:10:53,120
our markup we want you reusability we

00:10:51,410 --> 00:10:56,870
don't want to spend all our day coffee

00:10:53,120 --> 00:11:01,130
tasting fair enough but also we don't

00:10:56,870 --> 00:11:02,870
want the user to download 14 different

00:11:01,130 --> 00:11:06,050
copies of the same border-radius

00:11:02,870 --> 00:11:10,070
declaration I've been on GPRS Internet

00:11:06,050 --> 00:11:11,990
it sucks you don't want that and we want

00:11:10,070 --> 00:11:14,780
efficiency we want to be able to target

00:11:11,990 --> 00:11:19,310
only the elements that we want as fast

00:11:14,780 --> 00:11:22,640
and as unambiguously as we can so as an

00:11:19,310 --> 00:11:28,610
example let's look at being B in versus

00:11:22,640 --> 00:11:30,380
atomic CSS so BIM is basically just a

00:11:28,610 --> 00:11:33,100
name spacing convention where your

00:11:30,380 --> 00:11:35,900
components define your classes

00:11:33,100 --> 00:11:38,150
decorations inside that component aren't

00:11:35,900 --> 00:11:40,160
reused elsewhere which is nice because

00:11:38,150 --> 00:11:44,920
it keeps your code nice and tight and

00:11:40,160 --> 00:11:47,960
encapsulated atomic on the other hand is

00:11:44,920 --> 00:11:50,360
way on the other end of the spectrum the

00:11:47,960 --> 00:11:52,720
philosophy is that classes should be

00:11:50,360 --> 00:11:56,030
general-purpose they should be reused

00:11:52,720 --> 00:11:57,890
they should define common rule sets and

00:11:56,030 --> 00:12:00,380
you should be able to apply them to

00:11:57,890 --> 00:12:03,220
whatever element whenever and you can

00:12:00,380 --> 00:12:03,220
use them over and over again

00:12:04,229 --> 00:12:09,459
atomic CSS is really awesome for

00:12:07,689 --> 00:12:11,319
lightning fast prototyping and I know

00:12:09,459 --> 00:12:12,819
that there's many in the web development

00:12:11,319 --> 00:12:15,639
community that think this is weird

00:12:12,819 --> 00:12:18,429
I used to think it was super weird but I

00:12:15,639 --> 00:12:21,989
highly recommend giving it a go trying

00:12:18,429 --> 00:12:24,699
it out because it really is a great time

00:12:21,989 --> 00:12:27,369
where it fails as it fails to separate

00:12:24,699 --> 00:12:30,339
content and style when you have so many

00:12:27,369 --> 00:12:32,949
classes being reused you're essentially

00:12:30,339 --> 00:12:34,979
putting style information in your markup

00:12:32,949 --> 00:12:37,839
and that's a problem

00:12:34,979 --> 00:12:40,299
you're also repeating yourself a lot

00:12:37,839 --> 00:12:43,929
because you're calling what 10 20

00:12:40,299 --> 00:12:46,869
different styles in the same element on

00:12:43,929 --> 00:12:48,339
the other hand beam doesn't have that

00:12:46,869 --> 00:12:50,649
there's no styling the markup you don't

00:12:48,339 --> 00:12:53,379
repeat classes but when you look at the

00:12:50,649 --> 00:12:55,539
CSS there's a lot of heavy repetition

00:12:53,379 --> 00:13:00,039
because you can't reuse the code across

00:12:55,539 --> 00:13:02,859
components in many cases you also see a

00:13:00,039 --> 00:13:10,479
lot of Dom information encoded in the in

00:13:02,859 --> 00:13:12,339
the CSS again bad so we seem to have

00:13:10,479 --> 00:13:16,269
reached an impasse with our ideal

00:13:12,339 --> 00:13:21,419
selector we can't have usability and

00:13:16,269 --> 00:13:23,879
separations at the same time okay we

00:13:21,419 --> 00:13:27,099
this is where I want to take some

00:13:23,879 --> 00:13:29,949
inspiration from sass many of you will

00:13:27,099 --> 00:13:32,289
recognize the syntax you define a

00:13:29,949 --> 00:13:33,639
function for a bit of code that you want

00:13:32,289 --> 00:13:35,459
to reuse over and over again and you

00:13:33,639 --> 00:13:36,639
just call it to reuse that piece of code

00:13:35,459 --> 00:13:40,149
awesome

00:13:36,639 --> 00:13:42,699
it saves repetition and development but

00:13:40,149 --> 00:13:48,339
what happens when we put it in native

00:13:42,699 --> 00:13:51,999
CSS it becomes incredibly powerful so

00:13:48,339 --> 00:13:53,709
here I'm defining two bits to rulesets

00:13:51,999 --> 00:13:56,559
that I want to reuse over and over again

00:13:53,709 --> 00:13:58,959
that are related and at the bottom I'm

00:13:56,559 --> 00:14:02,679
calling those rule sets on some kind of

00:13:58,959 --> 00:14:06,609
selector very simple selector notice

00:14:02,679 --> 00:14:08,319
here that I'm not making many many

00:14:06,609 --> 00:14:10,149
classes to be reused I'm just making one

00:14:08,319 --> 00:14:13,149
class so there's not going to be no

00:14:10,149 --> 00:14:15,710
styling in the mark-up but at the same

00:14:13,149 --> 00:14:21,320
time I can reuse as much code

00:14:15,710 --> 00:14:24,020
I won't natively and in fact come at me

00:14:21,320 --> 00:14:29,600
efficiency I'm free to use the ID

00:14:24,020 --> 00:14:32,240
selector remember how we never use IDs

00:14:29,600 --> 00:14:35,030
because they're by definition one-time

00:14:32,240 --> 00:14:37,490
use things well not anymore we can be as

00:14:35,030 --> 00:14:42,080
explicit and as efficient as we want and

00:14:37,490 --> 00:14:45,200
still be able to reuse blocks of code no

00:14:42,080 --> 00:14:48,830
styling markup check highly reusable

00:14:45,200 --> 00:14:53,950
code check bleeding out hair down and

00:14:48,830 --> 00:14:57,650
using some IDs check moving right along

00:14:53,950 --> 00:15:00,890
so what would our ideal scope look like

00:14:57,650 --> 00:15:03,830
well as it turns out scoping and CSS is

00:15:00,890 --> 00:15:06,950
looking to be pretty straightforward the

00:15:03,830 --> 00:15:08,720
upcoming CSS for spec introduces a scope

00:15:06,950 --> 00:15:11,960
shooter class in which you can set your

00:15:08,720 --> 00:15:14,230
own local scope very exciting and to

00:15:11,960 --> 00:15:16,400
protect a protector scope from

00:15:14,230 --> 00:15:18,590
inheriting random other things that

00:15:16,400 --> 00:15:22,190
other people might have made you can use

00:15:18,590 --> 00:15:26,300
all initial to reset every CSS property

00:15:22,190 --> 00:15:27,820
to their browser defaults and if that's

00:15:26,300 --> 00:15:30,590
super hardcore for you you can also

00:15:27,820 --> 00:15:35,300
research specific properties to their

00:15:30,590 --> 00:15:38,990
initial defaults the real problem isn't

00:15:35,300 --> 00:15:40,340
so much the scope as it is working in a

00:15:38,990 --> 00:15:43,610
hostile environment and when I say

00:15:40,340 --> 00:15:45,440
hostile environment I mean that one

00:15:43,610 --> 00:15:49,310
client that you took on that needed you

00:15:45,440 --> 00:15:50,630
to just customize a wordpress theme that

00:15:49,310 --> 00:15:52,190
was already there and you weren't

00:15:50,630 --> 00:15:54,890
allowed to touch the markup you weren't

00:15:52,190 --> 00:15:58,070
allowed to touch their CSS you maybe

00:15:54,890 --> 00:16:01,220
even just had a teeny we custom CSS box

00:15:58,070 --> 00:16:08,540
in which to put your code in I'm sure

00:16:01,220 --> 00:16:10,670
we've all been there so this is a this

00:16:08,540 --> 00:16:12,620
is a tricky case because it doesn't

00:16:10,670 --> 00:16:15,740
matter how good we are no amount of well

00:16:12,620 --> 00:16:17,690
defined scope or really beautiful Kraft

00:16:15,740 --> 00:16:19,610
Lee's beautifully crafted selective's

00:16:17,690 --> 00:16:22,780
will stop someone else from directly

00:16:19,610 --> 00:16:29,220
targeting the element that you work on

00:16:22,780 --> 00:16:34,630
so what do we do remember this guy

00:16:29,220 --> 00:16:40,930
and our beautiful simple cascade what if

00:16:34,630 --> 00:16:45,070
we just did this and what if a framework

00:16:40,930 --> 00:16:52,120
CSS sits here what if your third-party

00:16:45,070 --> 00:16:59,020
CSS sits here and what if your CSS sits

00:16:52,120 --> 00:17:00,760
here mm-hmm interesting and I know what

00:16:59,020 --> 00:17:04,030
some of you might be thinking already

00:17:00,760 --> 00:17:04,510
working at this you're thinking that's

00:17:04,030 --> 00:17:09,720
good

00:17:04,510 --> 00:17:09,720
probably very easily turn into a this

00:17:11,939 --> 00:17:17,319
but there's a quick fix for that we can

00:17:14,350 --> 00:17:19,809
do that by directly directly sitting the

00:17:17,319 --> 00:17:21,670
parent that it overrides so you can

00:17:19,809 --> 00:17:23,920
never declare your code to be the most

00:17:21,670 --> 00:17:26,140
important code you can only say how

00:17:23,920 --> 00:17:28,750
important your code is relative to the

00:17:26,140 --> 00:17:30,490
code that's already there so someone

00:17:28,750 --> 00:17:35,200
else can always come in and override

00:17:30,490 --> 00:17:35,980
your CSS as they want to so yeah it's

00:17:35,200 --> 00:17:38,140
not perfect

00:17:35,980 --> 00:17:43,030
it can totally be abused but at least it

00:17:38,140 --> 00:17:44,440
works when you slash on a slap on an

00:17:43,030 --> 00:17:45,580
important to one of your declarations

00:17:44,440 --> 00:17:46,960
you're not guaranteed that it's going to

00:17:45,580 --> 00:17:48,510
work especially if you're in a hostile

00:17:46,960 --> 00:17:52,480
environment where everyone else is using

00:17:48,510 --> 00:17:55,780
important declarations but the thing is

00:17:52,480 --> 00:17:58,360
I'm not too worried about the specifics

00:17:55,780 --> 00:18:00,360
of how this idea might work because the

00:17:58,360 --> 00:18:02,830
important part is that it encourages

00:18:00,360 --> 00:18:04,809
developers to actually interact with the

00:18:02,830 --> 00:18:07,330
Cascade something that we've never

00:18:04,809 --> 00:18:09,730
really done before and when we interact

00:18:07,330 --> 00:18:13,050
with the Cascade we therefore educate

00:18:09,730 --> 00:18:15,550
also educate ourselves about the Cascade

00:18:13,050 --> 00:18:19,570
we get rid of the fear around the

00:18:15,550 --> 00:18:24,940
unknown now you know exactly where in

00:18:19,570 --> 00:18:27,250
the Cascade you set and why so what does

00:18:24,940 --> 00:18:31,059
this all mean for us right now in the

00:18:27,250 --> 00:18:33,610
real world the Cascade is a powerful

00:18:31,059 --> 00:18:37,710
thing and everyone is ignoring it and

00:18:33,610 --> 00:18:37,710
maybe we should not ignore it

00:18:38,100 --> 00:18:41,920
cs4 spec is really exciting we're

00:18:41,169 --> 00:18:44,020
getting variable

00:18:41,920 --> 00:18:46,390
we're getting scope and the cool thing

00:18:44,020 --> 00:18:48,370
is a lot of it has already been

00:18:46,390 --> 00:18:50,920
implemented in Firefox and Chrome so go

00:18:48,370 --> 00:18:52,900
ahead play with it have fun as long as

00:18:50,920 --> 00:18:59,910
you don't need to support IE or

00:18:52,900 --> 00:18:59,910
itch your sweet classic web development

00:19:00,930 --> 00:19:05,950
SAS 3.1 now supports first-class

00:19:04,060 --> 00:19:08,350
functions which is also really exciting

00:19:05,950 --> 00:19:10,750
because I'm really intrigued what CSS

00:19:08,350 --> 00:19:13,660
might look like as a fully fledged

00:19:10,750 --> 00:19:15,610
functional programming language we're

00:19:13,660 --> 00:19:18,010
not quite there yet but there's a lot of

00:19:15,610 --> 00:19:19,960
exciting stuff happening as you probably

00:19:18,010 --> 00:19:24,400
heard from the previous talks so yeah

00:19:19,960 --> 00:19:26,560
play around get involved the whole being

00:19:24,400 --> 00:19:29,560
versus atomic schools of thought the

00:19:26,560 --> 00:19:31,390
site adding spaces frozen cons try both

00:19:29,560 --> 00:19:36,010
of them out don't just go with one

00:19:31,390 --> 00:19:39,100
blended Lee and really importantly we

00:19:36,010 --> 00:19:42,220
need to keep the separation of content

00:19:39,100 --> 00:19:44,410
style and logic and what we need to do

00:19:42,220 --> 00:19:48,790
that is to have good interfacing between

00:19:44,410 --> 00:19:54,580
those kudos to rocks talked before that

00:19:48,790 --> 00:19:56,110
blew my mind that was awesome so that

00:19:54,580 --> 00:19:59,980
Houdini API has got me really excited

00:19:56,110 --> 00:20:02,500
about the future but um the main thing

00:19:59,980 --> 00:20:05,620
that I learned while going on this long

00:20:02,500 --> 00:20:07,420
journey of thought experiments and wild

00:20:05,620 --> 00:20:12,300
ideas and throwing random at the

00:20:07,420 --> 00:20:15,070
wall is that CSS is not dead

00:20:12,300 --> 00:20:17,650
when I started this I was thinking oh

00:20:15,070 --> 00:20:19,900
there's so many massive problems and CSS

00:20:17,650 --> 00:20:21,910
this must mean that it needs massive

00:20:19,900 --> 00:20:25,450
change and I was wrong

00:20:21,910 --> 00:20:27,210
a lot of strange things that CSS does is

00:20:25,450 --> 00:20:29,620
based in good decisions and

00:20:27,210 --> 00:20:34,570
consideration for wider context than

00:20:29,620 --> 00:20:38,350
just web development so maybe it's time

00:20:34,570 --> 00:20:41,020
to reignite our CSS love maybe after all

00:20:38,350 --> 00:20:43,810
our struggle of over tooling and

00:20:41,020 --> 00:20:46,770
band-aiding we can appreciate CSS for

00:20:43,810 --> 00:20:50,050
what it is and what it does for us and

00:20:46,770 --> 00:20:52,780
then we can get involved we can make

00:20:50,050 --> 00:20:56,250
sure it keeps working for us and for the

00:20:52,780 --> 00:20:57,850
future of web development

00:20:56,250 --> 00:21:02,970
thanks everyone

00:20:57,850 --> 00:21:02,970
[Applause]

00:21:07,670 --> 00:21:09,730

YouTube URL: https://www.youtube.com/watch?v=uX9gijsLyzs


