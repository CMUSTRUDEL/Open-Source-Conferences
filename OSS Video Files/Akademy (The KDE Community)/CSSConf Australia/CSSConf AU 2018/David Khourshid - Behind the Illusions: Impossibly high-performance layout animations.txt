Title: David Khourshid - Behind the Illusions: Impossibly high-performance layout animations
Publication date: 2018-04-10
Playlist: CSSConf AU 2018
Description: 
	Have you ever wanted to dynamically animate layouts without sacrificing performance? In this talk, innovative illusions will be revealed that will transform your static user interfaces into lively, intuitive experiences for your users at 60 frames per second. We'll investigate even the most complex animated layouts and discover how certain techniques, such as FLIP, containment, clever transforms, pseudoelements, CSS variables, and more can make layout animations easier and smoother.

There will be demos that showcase smooth layout transitions, interrupted transitions, natural curved motion paths, resizing with border radius, seamless gradient transitions, and other common use cases. There is plenty to learn from native apps to improve the UI and UX of our web apps, and those secrets will be revealed.
Captions: 
	00:00:10,690 --> 00:00:14,410
well I hope you enjoyed the first

00:00:12,099 --> 00:00:18,610
disappearing act of the entire

00:00:14,410 --> 00:00:20,500
conference I love how big the crowd is I

00:00:18,610 --> 00:00:23,050
love how big the screen is when it

00:00:20,500 --> 00:00:28,470
actually works like it actually fit Bend

00:00:23,050 --> 00:00:28,470
selectors in here so that's pretty great

00:00:29,099 --> 00:00:34,690
animations bring user interfaces to life

00:00:31,890 --> 00:00:37,750
native application developers know this

00:00:34,690 --> 00:00:40,059
intuitively and that's why they pack you

00:00:37,750 --> 00:00:42,250
know every single app that you interact

00:00:40,059 --> 00:00:44,920
with full of animations that not only

00:00:42,250 --> 00:00:48,430
delight the user but they also make the

00:00:44,920 --> 00:00:49,840
app as easy and intuitive to use so the

00:00:48,430 --> 00:00:54,059
question is how could we bring those

00:00:49,840 --> 00:00:56,469
types of animations over - well the web

00:00:54,059 --> 00:00:58,660
now um I don't really like talking about

00:00:56,469 --> 00:01:00,850
myself so instead I'm going to talk

00:00:58,660 --> 00:01:04,509
about for people who really influenced

00:01:00,850 --> 00:01:07,960
me early in my career and that's Manuela

00:01:04,509 --> 00:01:10,300
Rachel Nabors leav aru and bellhead when

00:01:07,960 --> 00:01:11,920
I was first starting web development I'm

00:01:10,300 --> 00:01:15,450
sure you've all seen the site but

00:01:11,920 --> 00:01:19,740
there's an awesome site called Co drops

00:01:15,450 --> 00:01:22,119
where there were these amazing demos and

00:01:19,740 --> 00:01:24,039
the ones that really struck me up and

00:01:22,119 --> 00:01:26,259
most were the ones that didn't look like

00:01:24,039 --> 00:01:28,750
your typical web sites they were the

00:01:26,259 --> 00:01:31,360
ones that filled up the screen they

00:01:28,750 --> 00:01:36,520
transform smoothly from one state to

00:01:31,360 --> 00:01:38,590
another and even though these believe it

00:01:36,520 --> 00:01:41,770
or not we're about you know four or five

00:01:38,590 --> 00:01:44,950
years old I think this is from 2014 to

00:01:41,770 --> 00:01:49,450
me and to many others it seems really

00:01:44,950 --> 00:01:52,479
ahead of our time even now like you see

00:01:49,450 --> 00:01:54,819
these animations and you're like why why

00:01:52,479 --> 00:01:56,800
don't you know most other websites and

00:01:54,819 --> 00:01:59,500
web applications have these types of

00:01:56,800 --> 00:02:03,429
animations and it really influenced me

00:01:59,500 --> 00:02:06,580
too I have a backup don't worry to make

00:02:03,429 --> 00:02:08,830
animations such as this this was one of

00:02:06,580 --> 00:02:12,280
my first code pens I've ever done

00:02:08,830 --> 00:02:15,010
I saw a dribble and I wanted to recreate

00:02:12,280 --> 00:02:17,080
it and at the time I wasn't really good

00:02:15,010 --> 00:02:19,180
at JavaScript so as you could see

00:02:17,080 --> 00:02:22,750
there's no JavaScript there and I try to

00:02:19,180 --> 00:02:24,370
do it completely in CSS and so I did

00:02:22,750 --> 00:02:26,800
this with a few other concepts

00:02:24,370 --> 00:02:30,599
even once that really should use

00:02:26,800 --> 00:02:30,599
JavaScript's like this one right here

00:02:30,690 --> 00:02:42,280
but when I um when I made these I'd

00:02:40,150 --> 00:02:44,349
start discovering little techniques and

00:02:42,280 --> 00:02:48,220
little strategies especially working

00:02:44,349 --> 00:02:51,310
just in CSS and I started to think like

00:02:48,220 --> 00:02:53,470
oh you could make like these awesome

00:02:51,310 --> 00:02:55,180
effects you know either without using

00:02:53,470 --> 00:02:57,760
JavaScript or with using the most

00:02:55,180 --> 00:02:59,860
minimal JavaScript necessary now I know

00:02:57,760 --> 00:03:01,959
this talk is you know names beyond the

00:02:59,860 --> 00:03:04,150
allusions however I'm not going to be

00:03:01,959 --> 00:03:07,510
talking about Houdini that's gonna come

00:03:04,150 --> 00:03:09,640
later and you know for all intents and

00:03:07,510 --> 00:03:11,620
purposes Houdini's greatest magic tricks

00:03:09,640 --> 00:03:13,090
right now are escaping from CSS

00:03:11,620 --> 00:03:15,190
constraints which is why it's called

00:03:13,090 --> 00:03:16,870
Houdini and sort of disappearing from

00:03:15,190 --> 00:03:19,680
browsers at least for the next five

00:03:16,870 --> 00:03:23,560
years I mean we'll see if that changes

00:03:19,680 --> 00:03:25,209
now CSS is truly magical I mean think

00:03:23,560 --> 00:03:28,060
about it you could make things floating

00:03:25,209 --> 00:03:30,700
midair right you can make things

00:03:28,060 --> 00:03:32,829
disappear in fact you could even do

00:03:30,700 --> 00:03:38,440
incredible things like like vertically

00:03:32,829 --> 00:03:40,870
centering things so CSS is magic and I I

00:03:38,440 --> 00:03:43,750
want you to stop calling you know just

00:03:40,870 --> 00:03:46,510
weird CSS quirks and you know things

00:03:43,750 --> 00:03:48,970
like hacks instead let's call them

00:03:46,510 --> 00:03:52,470
illusions because CSS is completely

00:03:48,970 --> 00:03:55,030
visual so in essence they are illusions

00:03:52,470 --> 00:03:57,510
now today we're going to be talking

00:03:55,030 --> 00:04:02,049
about in revealing the secrets behind

00:03:57,510 --> 00:04:05,230
animating position without animating top

00:04:02,049 --> 00:04:06,940
right bottom left and some of you may

00:04:05,230 --> 00:04:10,150
know why we want to avoid those

00:04:06,940 --> 00:04:12,329
properties also in mating size without

00:04:10,150 --> 00:04:15,700
directly in meeting with our height and

00:04:12,329 --> 00:04:18,910
meeting gradients without meeting color

00:04:15,700 --> 00:04:23,380
which causes repaints in the meeting on

00:04:18,910 --> 00:04:25,180
curves without using motion or offset

00:04:23,380 --> 00:04:28,240
paths which aren't fully supported in

00:04:25,180 --> 00:04:32,530
all browsers and also animating

00:04:28,240 --> 00:04:35,380
border-radius without fear so our goal

00:04:32,530 --> 00:04:38,139
is 60 frames per second I mean you've

00:04:35,380 --> 00:04:40,449
heard this a lot right you've heard

00:04:38,139 --> 00:04:42,460
that you should avoid layouts and use

00:04:40,449 --> 00:04:45,999
transforming the opacity whenever nest

00:04:42,460 --> 00:04:49,090
whenever you can avoid repaints which is

00:04:45,999 --> 00:04:51,099
where you could use opacity but the

00:04:49,090 --> 00:04:54,189
thing is that you should mostly avoid

00:04:51,099 --> 00:04:55,360
being dogmatic just because you're told

00:04:54,189 --> 00:04:58,539
that you should avoid these things

00:04:55,360 --> 00:05:00,520
doesn't mean that you have to 100% avoid

00:04:58,539 --> 00:05:02,800
them the most important thing that you

00:05:00,520 --> 00:05:06,099
could do is measure open up your dev

00:05:02,800 --> 00:05:07,960
tools and make sure that even if you are

00:05:06,099 --> 00:05:10,330
animating border-radius or you have to

00:05:07,960 --> 00:05:12,460
animate color somewhere instead of doing

00:05:10,330 --> 00:05:15,039
a whole ton of CSS just to achieve that

00:05:12,460 --> 00:05:18,599
effect without touching repaints or

00:05:15,039 --> 00:05:21,340
layout just measure because chances are

00:05:18,599 --> 00:05:24,069
you might get 60 frames per second

00:05:21,340 --> 00:05:28,330
anyway and so this is sort of the

00:05:24,069 --> 00:05:30,370
thinking that you know I I that went

00:05:28,330 --> 00:05:32,800
behind like making all of my animations

00:05:30,370 --> 00:05:36,009
and all my demos was I didn't really

00:05:32,800 --> 00:05:38,050
measure immediately from the start but

00:05:36,009 --> 00:05:39,969
it was more incremental where if I know

00:05:38,050 --> 00:05:43,479
that something was slow that's when I

00:05:39,969 --> 00:05:44,620
measured so one of the main concepts

00:05:43,479 --> 00:05:47,740
that we're gonna be talking today about

00:05:44,620 --> 00:05:49,330
is called the flip technique and this is

00:05:47,740 --> 00:05:49,839
a type of animation that we want to

00:05:49,330 --> 00:05:54,099
achieve

00:05:49,839 --> 00:05:54,699
imagine a gallery view or a music app

00:05:54,099 --> 00:05:57,759
like this

00:05:54,699 --> 00:06:00,610
something very Google material where you

00:05:57,759 --> 00:06:02,979
you have one element and it smoothly

00:06:00,610 --> 00:06:04,839
goes from point A to point B but the

00:06:02,979 --> 00:06:07,960
difference is you don't know where those

00:06:04,839 --> 00:06:11,740
point a and point B places are so you

00:06:07,960 --> 00:06:13,689
sort of have to you know find a way to

00:06:11,740 --> 00:06:18,219
animate it smoothly without touching

00:06:13,689 --> 00:06:20,199
height or width or position and the flip

00:06:18,219 --> 00:06:22,419
technique was coined by Paul Lewis of

00:06:20,199 --> 00:06:23,889
Google and it stands for first last

00:06:22,419 --> 00:06:27,129
invert play this is sort of an the

00:06:23,889 --> 00:06:30,189
mnemonic fur for remembering you know

00:06:27,129 --> 00:06:32,560
the steps involved in doing this so

00:06:30,189 --> 00:06:36,580
first you get the initial position of

00:06:32,560 --> 00:06:39,069
the element in this case it is you use

00:06:36,580 --> 00:06:41,379
get bounding client rect and actually

00:06:39,069 --> 00:06:42,669
this is wrong you could take the element

00:06:41,379 --> 00:06:44,830
the box elements and then there's a

00:06:42,669 --> 00:06:48,550
method on it called get bounding clients

00:06:44,830 --> 00:06:51,069
frets and in this you get the position

00:06:48,550 --> 00:06:51,520
which is top left and you also get the

00:06:51,069 --> 00:06:54,430
side

00:06:51,520 --> 00:06:56,979
which is the width and height this is

00:06:54,430 --> 00:06:58,930
going to be your favorite method for

00:06:56,979 --> 00:07:00,759
doing these sorts of layout animations

00:06:58,930 --> 00:07:02,889
because it gives you absolutely

00:07:00,759 --> 00:07:05,409
everything necessary to perform your

00:07:02,889 --> 00:07:07,330
animation and then you perform your

00:07:05,409 --> 00:07:11,500
change so let's say we go from view a to

00:07:07,330 --> 00:07:14,349
view B that's when you get the the

00:07:11,500 --> 00:07:16,060
bounding box of the last element in this

00:07:14,349 --> 00:07:18,819
case it's going to be bigger and it

00:07:16,060 --> 00:07:20,680
shifted up a little here's where the map

00:07:18,819 --> 00:07:23,620
comes in and I promise it's elementary

00:07:20,680 --> 00:07:25,690
math nothing crazy but we take the

00:07:23,620 --> 00:07:27,880
deltas which is the difference between

00:07:25,690 --> 00:07:30,750
the first and last value of both the

00:07:27,880 --> 00:07:33,909
position and the width and height and

00:07:30,750 --> 00:07:37,680
using those values we could take the

00:07:33,909 --> 00:07:40,509
second element over here and we could

00:07:37,680 --> 00:07:42,569
squish it back down to where the first

00:07:40,509 --> 00:07:46,750
element was so we create the illusion

00:07:42,569 --> 00:07:49,210
that the second element didn't move yet

00:07:46,750 --> 00:07:52,750
and then we just animate everything to

00:07:49,210 --> 00:07:55,300
zero so using transform first we scale

00:07:52,750 --> 00:07:58,270
it to make it down to the first size and

00:07:55,300 --> 00:08:00,819
then we translate it to you know make it

00:07:58,270 --> 00:08:03,880
to the original position and then we

00:08:00,819 --> 00:08:09,759
animate everything to zero and it

00:08:03,880 --> 00:08:12,279
bounces right the second position now

00:08:09,759 --> 00:08:14,229
you you could do this like relative to

00:08:12,279 --> 00:08:16,330
the document but sometimes you're going

00:08:14,229 --> 00:08:18,009
to have more than one elements in the

00:08:16,330 --> 00:08:20,800
meaning at the same time and those

00:08:18,009 --> 00:08:22,090
elements you know might be nested so for

00:08:20,800 --> 00:08:24,310
instance let's say that I have an

00:08:22,090 --> 00:08:26,860
element in the box right here and the

00:08:24,310 --> 00:08:30,190
parent box is moving but so is the child

00:08:26,860 --> 00:08:32,770
element what we want to do in order to

00:08:30,190 --> 00:08:34,659
prevent any glitches is we have to do a

00:08:32,770 --> 00:08:38,110
little bit of math and this is what I

00:08:34,659 --> 00:08:39,969
like to call relative flipping so what

00:08:38,110 --> 00:08:43,390
we would do is we would measure the

00:08:39,969 --> 00:08:45,279
parents Delta and the child Delta and

00:08:43,390 --> 00:08:47,920
then we would calculate the deltas

00:08:45,279 --> 00:08:51,339
relative to each other so instead of

00:08:47,920 --> 00:08:54,279
calculating how this Orange Box moved

00:08:51,339 --> 00:08:56,890
from there to there we first move the

00:08:54,279 --> 00:08:59,020
parents and then calculate relative to

00:08:56,890 --> 00:09:02,440
the parents how it moved from here to

00:08:59,020 --> 00:09:04,449
there and so I'd like to call this

00:09:02,440 --> 00:09:05,230
technique like the flip-flop technique

00:09:04,449 --> 00:09:07,360
you

00:09:05,230 --> 00:09:09,490
laughs invert play first last outer play

00:09:07,360 --> 00:09:11,860
so that you could you know observe the

00:09:09,490 --> 00:09:13,630
outer Delta as well as the inner Delta

00:09:11,860 --> 00:09:15,760
but we're in Australia so I'm going to

00:09:13,630 --> 00:09:18,370
call it the Fung technique transform

00:09:15,760 --> 00:09:23,200
hierarchies of nested groups it's

00:09:18,370 --> 00:09:24,030
shorter easier to remember all right

00:09:23,200 --> 00:09:26,200
that face

00:09:24,030 --> 00:09:29,470
so here's sort of what we're going to be

00:09:26,200 --> 00:09:31,510
working with today and these types of

00:09:29,470 --> 00:09:34,570
flip animations can be exhibited

00:09:31,510 --> 00:09:35,710
anywhere and you know now that you know

00:09:34,570 --> 00:09:37,180
this and now that you know about the

00:09:35,710 --> 00:09:39,370
Flip technique you're going to start

00:09:37,180 --> 00:09:42,480
seeing them everywhere so here's one

00:09:39,370 --> 00:09:44,800
animation that I made where I'm

00:09:42,480 --> 00:09:47,470
literally just changing the layout of

00:09:44,800 --> 00:09:49,450
the house and instead of animating width

00:09:47,470 --> 00:09:52,360
and height I'm actually animating

00:09:49,450 --> 00:09:55,600
transform and adjusting the elements

00:09:52,360 --> 00:09:59,040
based on that and also here's another

00:09:55,600 --> 00:10:02,920
one which is a little bit more dynamic

00:09:59,040 --> 00:10:05,770
so and this is sort of doing the same

00:10:02,920 --> 00:10:08,620
thing where I'm using these flip

00:10:05,770 --> 00:10:14,440
animations to animate from one layout to

00:10:08,620 --> 00:10:17,250
the next now to get to these we have to

00:10:14,440 --> 00:10:21,880
go through a few CSS patterns

00:10:17,250 --> 00:10:23,290
the first one is predictable layouts now

00:10:21,880 --> 00:10:25,450
this is something that you know most of

00:10:23,290 --> 00:10:28,180
you will know it's actually amazing how

00:10:25,450 --> 00:10:31,030
many times I see projects that don't

00:10:28,180 --> 00:10:32,680
have like box-sizing border box it's

00:10:31,030 --> 00:10:35,110
more expected to maybe not have

00:10:32,680 --> 00:10:39,670
everything positioned relative honestly

00:10:35,110 --> 00:10:43,120
this is one of my sins do not do this I

00:10:39,670 --> 00:10:45,010
do this because I'm lazy so you will see

00:10:43,120 --> 00:10:46,510
in all of my Co pens this is probably

00:10:45,010 --> 00:10:47,950
the most controversial thing you'll see

00:10:46,510 --> 00:10:50,770
in this entire conference is this

00:10:47,950 --> 00:10:54,640
position:relative everywhere you know

00:10:50,770 --> 00:10:56,080
don't do it but it does give me

00:10:54,640 --> 00:10:58,240
predictable layout because I know that

00:10:56,080 --> 00:11:01,390
my child is always going to be

00:10:58,240 --> 00:11:03,570
positioned relative to the parent so I

00:11:01,390 --> 00:11:07,870
know stacking context blah blah blah

00:11:03,570 --> 00:11:09,760
also smooth easing this cubic Bezier

00:11:07,870 --> 00:11:11,950
thing I always see the most random

00:11:09,760 --> 00:11:14,950
numbers in there it does not have to be

00:11:11,950 --> 00:11:18,850
that complicated I only use points five

00:11:14,950 --> 00:11:23,080
and one and you could get a variety of

00:11:18,850 --> 00:11:26,410
exit easy from that and they just work

00:11:23,080 --> 00:11:28,090
fine so doing it this way it actually

00:11:26,410 --> 00:11:30,370
makes it easier to visualize the cubic

00:11:28,090 --> 00:11:33,610
Bezier curve you know as two dots where

00:11:30,370 --> 00:11:35,230
it's either 0.5 or it's 1 and then you

00:11:33,610 --> 00:11:39,850
could just sort of visualize that curve

00:11:35,230 --> 00:11:41,710
I also used layered grids now Brenda's

00:11:39,850 --> 00:11:46,690
gonna be talking later about CSS grids

00:11:41,710 --> 00:11:50,110
today so using grid is pretty much the

00:11:46,690 --> 00:11:52,030
best life hack for CSS that I found so

00:11:50,110 --> 00:11:55,120
far because you could take some layer

00:11:52,030 --> 00:11:57,460
which is absolutely position and you

00:11:55,120 --> 00:11:59,410
could stack the grids on top of each

00:11:57,460 --> 00:12:01,240
other and then animate them

00:11:59,410 --> 00:12:03,600
independently so you don't have to deal

00:12:01,240 --> 00:12:06,550
with layouts fighting with each other

00:12:03,600 --> 00:12:08,800
also background elements this also might

00:12:06,550 --> 00:12:11,560
be a bit controversial but you could use

00:12:08,800 --> 00:12:13,330
a separate div or a pseudo element as a

00:12:11,560 --> 00:12:14,740
background elements the reason why I

00:12:13,330 --> 00:12:16,630
like to use the separate element is

00:12:14,740 --> 00:12:18,520
because I could actually add a box

00:12:16,630 --> 00:12:21,250
shoutout to it and that way we could

00:12:18,520 --> 00:12:24,280
animate opacity instead of animating

00:12:21,250 --> 00:12:25,720
height and so that's a point over here

00:12:24,280 --> 00:12:27,700
there was a really great article by

00:12:25,720 --> 00:12:31,500
Tobias Allen it when pronouncing that

00:12:27,700 --> 00:12:33,700
correct where he found that if you

00:12:31,500 --> 00:12:36,220
instead of animating the Box shadow

00:12:33,700 --> 00:12:38,470
property you animated opacity on box

00:12:36,220 --> 00:12:46,870
shadow you get a really similar effect

00:12:38,470 --> 00:12:49,690
at a much less performance cost also

00:12:46,870 --> 00:12:51,940
something that is very important and

00:12:49,690 --> 00:12:53,650
I've given talks about this before I'm

00:12:51,940 --> 00:12:55,330
not going to talk too much about this

00:12:53,650 --> 00:12:56,920
because it would take the entire time

00:12:55,330 --> 00:12:59,050
and I've ever I used 25 minutes of

00:12:56,920 --> 00:13:00,550
wrestling with my computer but it's

00:12:59,050 --> 00:13:03,130
finite state machines that's

00:13:00,550 --> 00:13:05,350
representing your app in one state at a

00:13:03,130 --> 00:13:07,360
time so all you need to know about you

00:13:05,350 --> 00:13:09,580
know how I use state machines in CSS is

00:13:07,360 --> 00:13:12,100
I have this data attribute called data

00:13:09,580 --> 00:13:14,070
States and using that data attribute I

00:13:12,100 --> 00:13:17,200
can make sure that there's only one

00:13:14,070 --> 00:13:20,410
attribute or one state at a time and we

00:13:17,200 --> 00:13:24,250
can't have multiple states so let's get

00:13:20,410 --> 00:13:28,890
started with a few tricks the first one

00:13:24,250 --> 00:13:32,160
is right over here

00:13:28,890 --> 00:13:36,220
border radius so

00:13:32,160 --> 00:13:40,630
I'm actually animating paint here but

00:13:36,220 --> 00:13:44,620
the trick is we want to animate the

00:13:40,630 --> 00:13:47,080
border-radius in a way that we don't get

00:13:44,620 --> 00:13:48,820
this effect right here you see how the

00:13:47,080 --> 00:13:52,450
border radius jumps when we're scaling

00:13:48,820 --> 00:13:53,860
up the element now the quick solution to

00:13:52,450 --> 00:13:57,180
this is to animate height and width we

00:13:53,860 --> 00:14:01,450
want to completely avoid that so instead

00:13:57,180 --> 00:14:03,880
let's make it smooth just like that and

00:14:01,450 --> 00:14:05,860
believe it or not this only animates

00:14:03,880 --> 00:14:09,430
paints and we're avoiding and meaning

00:14:05,860 --> 00:14:13,000
layout which you know gives us a

00:14:09,430 --> 00:14:15,430
considerable performance boost so the

00:14:13,000 --> 00:14:17,470
way we do that is first identifying the

00:14:15,430 --> 00:14:19,600
problem here is that when we scale the

00:14:17,470 --> 00:14:22,090
elements and we squish it we see that

00:14:19,600 --> 00:14:24,820
there's a bit of overlap between the

00:14:22,090 --> 00:14:28,600
last border radius and you know the

00:14:24,820 --> 00:14:31,090
first one so what we could do instead is

00:14:28,600 --> 00:14:33,030
animate border-radius and there's a

00:14:31,090 --> 00:14:36,760
little bit of math here but essentially

00:14:33,030 --> 00:14:39,310
instead of you know laying this border

00:14:36,760 --> 00:14:41,680
radius B we're going to stretch it a bit

00:14:39,310 --> 00:14:44,260
based on how much the width and height

00:14:41,680 --> 00:14:47,260
changed and so that's going to give us

00:14:44,260 --> 00:14:49,810
this effect for instance this element it

00:14:47,260 --> 00:14:52,120
grew twice as wide and one and a half

00:14:49,810 --> 00:14:54,400
times as tall and so we could use those

00:14:52,120 --> 00:14:57,130
measurements in the border radius in

00:14:54,400 --> 00:14:58,480
order to stretch it to you know make up

00:14:57,130 --> 00:15:00,970
for you know how much it was squished

00:14:58,480 --> 00:15:06,570
and then we get a nice smooth

00:15:00,970 --> 00:15:09,670
border-radius animation so next one

00:15:06,570 --> 00:15:12,400
right over here so you'll sort of see

00:15:09,670 --> 00:15:14,500
the secret to this you know really quick

00:15:12,400 --> 00:15:17,740
over there but it's getting these smooth

00:15:14,500 --> 00:15:20,080
animation curves without having to use

00:15:17,740 --> 00:15:24,670
offset path or motion paths or even any

00:15:20,080 --> 00:15:27,760
JavaScript like that so these curved

00:15:24,670 --> 00:15:29,830
motion paths can be done using inverse

00:15:27,760 --> 00:15:31,900
rotations this looks a little bit crazy

00:15:29,830 --> 00:15:35,260
like your geometry homework or something

00:15:31,900 --> 00:15:37,960
like that so I'm going to sort of make

00:15:35,260 --> 00:15:41,590
this easier to understand the trick is

00:15:37,960 --> 00:15:44,290
that we are moving the we're moving the

00:15:41,590 --> 00:15:45,400
transform origin and we're rotating on

00:15:44,290 --> 00:15:47,890
the transform or

00:15:45,400 --> 00:15:50,710
so if you could visualize that imagine

00:15:47,890 --> 00:15:53,530
this orange rectangle moving along this

00:15:50,710 --> 00:15:55,210
circle and so by doing that we could

00:15:53,530 --> 00:15:58,660
animate it to any point we want by both

00:15:55,210 --> 00:16:01,660
moving it that way and then translating

00:15:58,660 --> 00:16:05,710
it back to you know its next position

00:16:01,660 --> 00:16:09,580
and so that's one way to do these motion

00:16:05,710 --> 00:16:14,740
curve animations all right more sad

00:16:09,580 --> 00:16:18,730
faces so here's the next one expansion

00:16:14,740 --> 00:16:23,860
and collapse this is not my pen this is

00:16:18,730 --> 00:16:25,810
a pen by a friend Shaw and so what's

00:16:23,860 --> 00:16:28,510
happening over here is that we're

00:16:25,810 --> 00:16:31,510
expanding each of these panels to full

00:16:28,510 --> 00:16:34,540
width and it's this really nice effect

00:16:31,510 --> 00:16:36,730
no JavaScript involved normally we would

00:16:34,540 --> 00:16:38,410
see something like this and say ah we

00:16:36,730 --> 00:16:40,270
probably have to use clip path or we

00:16:38,410 --> 00:16:47,650
have to animate width and height or

00:16:40,270 --> 00:16:49,390
something like that however if you

00:16:47,650 --> 00:16:53,230
really really really want to animate

00:16:49,390 --> 00:16:57,820
width and height then there there is a

00:16:53,230 --> 00:17:01,000
way to do it and that's called CSS

00:16:57,820 --> 00:17:04,570
containment what containment is it was

00:17:01,000 --> 00:17:06,459
originally originally in Chrome it's in

00:17:04,570 --> 00:17:08,050
a few more browsers right now but we

00:17:06,459 --> 00:17:09,490
could tell the browser that even though

00:17:08,050 --> 00:17:11,980
we're going to be changing the width and

00:17:09,490 --> 00:17:13,300
height of something that the only thing

00:17:11,980 --> 00:17:15,850
that's going to be affected is that

00:17:13,300 --> 00:17:18,550
element and so if we say contain layout

00:17:15,850 --> 00:17:21,310
we tell the browser ignore any other

00:17:18,550 --> 00:17:24,220
possible changes so to most browsers

00:17:21,310 --> 00:17:25,480
except I in an edge it's in Firefox

00:17:24,220 --> 00:17:27,550
under a green flag

00:17:25,480 --> 00:17:30,430
I in an edge probably have a white flag

00:17:27,550 --> 00:17:33,160
because they gave up on it but there's

00:17:30,430 --> 00:17:36,370
also another technique it's a scaling

00:17:33,160 --> 00:17:37,750
and inverse scaling this is an

00:17:36,370 --> 00:17:39,460
interesting technique because it was

00:17:37,750 --> 00:17:42,850
actually talked about by Paul Lewis and

00:17:39,460 --> 00:17:44,170
other people on the Google team and so

00:17:42,850 --> 00:17:47,260
what's happening over here

00:17:44,170 --> 00:17:50,770
you probably that is that the parent is

00:17:47,260 --> 00:17:52,630
expanding while the child since it's

00:17:50,770 --> 00:17:55,720
being expanded too much it's collapsing

00:17:52,630 --> 00:17:57,460
at the same time now this requires a lot

00:17:55,720 --> 00:17:58,820
of JavaScript if you want to do anything

00:17:57,460 --> 00:18:01,159
besides a linear

00:17:58,820 --> 00:18:04,039
and you can't exactly animate to zero

00:18:01,159 --> 00:18:07,159
because you can't divide one by zero in

00:18:04,039 --> 00:18:09,919
CSS or JavaScript I would hate to see

00:18:07,159 --> 00:18:11,570
you know what that would be like there's

00:18:09,919 --> 00:18:13,610
also sliding layers and this one

00:18:11,570 --> 00:18:16,490
requires a parents layer but if you do

00:18:13,610 --> 00:18:18,529
offs overflow:hidden on the parent layer

00:18:16,490 --> 00:18:20,390
and then you move the child layer just

00:18:18,529 --> 00:18:22,490
to the right position you could get that

00:18:20,390 --> 00:18:25,610
expanding effect just by animating them

00:18:22,490 --> 00:18:27,740
back to zero and that that was a

00:18:25,610 --> 00:18:28,549
technique that we were using in the the

00:18:27,740 --> 00:18:31,399
pen that I showed you

00:18:28,549 --> 00:18:34,549
there's also clip path animations this

00:18:31,399 --> 00:18:37,370
one does trigger repaint so again you

00:18:34,549 --> 00:18:39,559
could use contain paint or you could

00:18:37,370 --> 00:18:41,389
measure and you could see is this going

00:18:39,559 --> 00:18:46,159
to really affect my performance that

00:18:41,389 --> 00:18:47,720
much so I actually have been working on

00:18:46,159 --> 00:18:49,940
the library for a long time called

00:18:47,720 --> 00:18:53,330
flipping just because that's a really

00:18:49,940 --> 00:18:56,269
fun name for a library and flipping is

00:18:53,330 --> 00:18:59,720
meant to bring flip animations and the

00:18:56,269 --> 00:19:01,340
technique to the wider community and to

00:18:59,720 --> 00:19:03,769
make it a lot easier to make these

00:19:01,340 --> 00:19:06,769
animations so to give you an idea of

00:19:03,769 --> 00:19:09,679
what it's like you would add a data flip

00:19:06,769 --> 00:19:11,570
key to one element and you would have

00:19:09,679 --> 00:19:13,730
the same data flip key on another

00:19:11,570 --> 00:19:16,429
element so you can imagine that this

00:19:13,730 --> 00:19:19,700
view might be disappearing and then this

00:19:16,429 --> 00:19:22,580
view might be appearing using flipping

00:19:19,700 --> 00:19:24,980
we tell it you know just via the flip

00:19:22,580 --> 00:19:26,990
technique we say first read you know the

00:19:24,980 --> 00:19:29,779
first position and then do something

00:19:26,990 --> 00:19:31,250
that changes the layout such as you know

00:19:29,779 --> 00:19:34,010
selecting a photo and then you do

00:19:31,250 --> 00:19:37,820
flippin dot flip which is really fun to

00:19:34,010 --> 00:19:40,399
type out but what that will do is using

00:19:37,820 --> 00:19:42,470
an adapter it will automatically animate

00:19:40,399 --> 00:19:46,250
your layouts from one position to the

00:19:42,470 --> 00:19:49,340
next and so it does that by selecting

00:19:46,250 --> 00:19:51,950
the currently visible element and then

00:19:49,340 --> 00:19:54,139
just animating to it by calculating the

00:19:51,950 --> 00:19:58,929
deltas for you so you don't have to do

00:19:54,139 --> 00:19:58,929
all that manual work automatically and

00:19:58,990 --> 00:20:04,789
just to give you an idea what this was

00:20:01,309 --> 00:20:07,820
like I previously made a an article

00:20:04,789 --> 00:20:10,220
where I had this sample gallery app and

00:20:07,820 --> 00:20:12,080
I had no animations on it whatsoever I

00:20:10,220 --> 00:20:12,420
added those data food cues to the right

00:20:12,080 --> 00:20:16,140
place

00:20:12,420 --> 00:20:21,510
and let's search for what's a safe

00:20:16,140 --> 00:20:24,150
search Melbourne Australia and then you

00:20:21,510 --> 00:20:27,540
see that the every single element with

00:20:24,150 --> 00:20:30,420
those keys animates you know exactly to

00:20:27,540 --> 00:20:32,280
you know their their position so if we

00:20:30,420 --> 00:20:37,890
had this I didn't know you guys had

00:20:32,280 --> 00:20:40,530
polar bears but anyway so using the data

00:20:37,890 --> 00:20:42,600
flip key it will keep track of the

00:20:40,530 --> 00:20:45,050
positions of each one of those visible

00:20:42,600 --> 00:20:47,640
elements and so for example over here

00:20:45,050 --> 00:20:49,560
these are two completely different

00:20:47,640 --> 00:20:52,260
elements the only thing they have in

00:20:49,560 --> 00:20:53,940
common is that data flip key and so it

00:20:52,260 --> 00:20:56,070
knows that whenever you go from one to

00:20:53,940 --> 00:20:56,960
the other it will just animate that for

00:20:56,070 --> 00:20:59,580
you

00:20:56,960 --> 00:21:02,280
here's another demo I made earlier where

00:20:59,580 --> 00:21:05,070
I added the data flip key to each letter

00:21:02,280 --> 00:21:07,710
just to see what happened and you get

00:21:05,070 --> 00:21:10,290
this really really cool effect where the

00:21:07,710 --> 00:21:16,200
letters animate you know right into

00:21:10,290 --> 00:21:22,020
place and then this morning I was up at

00:21:16,200 --> 00:21:23,790
4 because 4 o'clock is like 1:00 p.m. my

00:21:22,020 --> 00:21:26,010
time and I'm still on my time which is a

00:21:23,790 --> 00:21:28,830
bad idea I shouldn't have done that but

00:21:26,010 --> 00:21:31,970
I created this animation which also uses

00:21:28,830 --> 00:21:37,260
flip let's say I want to edit my week

00:21:31,970 --> 00:21:42,480
get rid of these and now I have a nice

00:21:37,260 --> 00:21:46,260
long weekend and so the animation of

00:21:42,480 --> 00:21:49,020
that Sunday card is done using the flip

00:21:46,260 --> 00:21:50,850
library and it's animating both we have

00:21:49,020 --> 00:21:53,400
the background element that's stretching

00:21:50,850 --> 00:21:55,710
and we have this text element that also

00:21:53,400 --> 00:21:58,350
has a data flip key on it so whenever it

00:21:55,710 --> 00:22:00,410
changes it knows to calculate the Delta

00:21:58,350 --> 00:22:11,010
and move smoothly from one position to

00:22:00,410 --> 00:22:13,500
the next and so I just released about an

00:22:11,010 --> 00:22:15,809
hour ago version 1 of flipping and so

00:22:13,500 --> 00:22:20,590
you could download it now

00:22:15,809 --> 00:22:23,169
and you can play around with it there's

00:22:20,590 --> 00:22:24,820
um there's two almost three adapters

00:22:23,169 --> 00:22:26,529
right now first is flipping that's a

00:22:24,820 --> 00:22:28,779
very small version of the library where

00:22:26,529 --> 00:22:30,970
whenever something changes it just gives

00:22:28,779 --> 00:22:32,649
you all this data this is everything you

00:22:30,970 --> 00:22:35,830
could possibly want to create these

00:22:32,649 --> 00:22:38,049
animations flipping dot web uses the web

00:22:35,830 --> 00:22:40,090
animation API which works in both

00:22:38,049 --> 00:22:42,130
Firefox and Chrome if you're using

00:22:40,090 --> 00:22:44,950
Safari hopefully they get the web

00:22:42,130 --> 00:22:46,630
animations API working soon and pretty

00:22:44,950 --> 00:22:50,200
soon I'm going to be releasing flipping

00:22:46,630 --> 00:22:53,799
dot CSS J's which uses CSS variables in

00:22:50,200 --> 00:22:55,840
order to control your animations and so

00:22:53,799 --> 00:22:58,539
I'm going to leave you with one of my

00:22:55,840 --> 00:23:00,370
favorite quotes from one of the people

00:22:58,539 --> 00:23:02,610
who influenced me the most when I was

00:23:00,370 --> 00:23:05,500
starting early on Rachel neighbors where

00:23:02,610 --> 00:23:07,299
but there is power and animation the

00:23:05,500 --> 00:23:11,860
power to create experiences that go

00:23:07,299 --> 00:23:14,289
beyond mere links documents HTML the

00:23:11,860 --> 00:23:17,740
power to immerse users in an illusion of

00:23:14,289 --> 00:23:20,529
life because animation brings user

00:23:17,740 --> 00:23:23,320
interfaces to life so thank you very

00:23:20,529 --> 00:23:24,810
much CSS comp here's a bunch of

00:23:23,320 --> 00:23:30,359
resources for you

00:23:24,810 --> 00:23:30,359
[Applause]

00:23:36,020 --> 00:23:38,080

YouTube URL: https://www.youtube.com/watch?v=zVbLR7rI8ZU


