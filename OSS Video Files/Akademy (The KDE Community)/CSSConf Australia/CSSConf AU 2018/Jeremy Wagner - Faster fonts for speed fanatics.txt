Title: Jeremy Wagner - Faster fonts for speed fanatics
Publication date: 2018-04-10
Playlist: CSSConf AU 2018
Description: 
	Fonts! Guess those are a big thing now. You’re likely familiar with at least getting custom typefaces up and running. You probably even know some neat tricks beyond the basics, but do you know how to make your fonts fast? I mean, really fast? Fast is important. 

Fonts are part of the critical request chain. If you’re not paying attention to your fonts beyond merely slapping up a Google Fonts link tag, you might be missing some big opportunities to speed things up. Stuff like preloading fonts, using font-display to render fallback text faster, more creative sub-setting choices, and electing to avoid non-essential typefaces specifically for users on limited data plans. If fast is your thing, zip into this session to allay your font fears, and learn to tune up your typefaces for maximum speed!
Captions: 
	00:00:09,660 --> 00:00:13,599
Hey

00:00:11,250 --> 00:00:15,810
thank you everyone

00:00:13,599 --> 00:00:17,010
having me here at CSS comp Australia

00:00:15,810 --> 00:00:20,130
is the first time that I've been to

00:00:17,010 --> 00:00:23,400
Australia and it is awesome it's super

00:00:20,130 --> 00:00:25,890
cool okay so this talk is called faster

00:00:23,400 --> 00:00:29,010
fonts for speed fanatics and I want to

00:00:25,890 --> 00:00:32,340
put the emphasis on the word fast or or

00:00:29,010 --> 00:00:34,140
rather that last syllable or and the

00:00:32,340 --> 00:00:35,160
reason why is because I'm assuming you

00:00:34,140 --> 00:00:36,570
coming in here with a little bit of

00:00:35,160 --> 00:00:38,640
knowledge like some foundational

00:00:36,570 --> 00:00:40,440
knowledge about font optimization and

00:00:38,640 --> 00:00:41,700
performance things like wah fanned waft

00:00:40,440 --> 00:00:44,490
ooh like you probably shouldn't be using

00:00:41,700 --> 00:00:46,650
true type formats anymore or you know

00:00:44,490 --> 00:00:47,700
sparingly if for compatibility that kind

00:00:46,650 --> 00:00:49,500
of thing

00:00:47,700 --> 00:00:52,650
maybe a little bit about subsetting

00:00:49,500 --> 00:00:54,060
right so really what this is these are

00:00:52,650 --> 00:00:55,730
some tips and they're gonna be some

00:00:54,060 --> 00:00:58,320
really quick things that you can do or

00:00:55,730 --> 00:01:00,600
reasonably low effort hopefully low

00:00:58,320 --> 00:01:02,790
effort things that you can do to just

00:01:00,600 --> 00:01:04,500
give that font rendering performance

00:01:02,790 --> 00:01:07,049
just a little bit more of a shot in the

00:01:04,500 --> 00:01:09,540
arm but before I get into the talk per

00:01:07,049 --> 00:01:12,960
se I want to introduce myself my name is

00:01:09,540 --> 00:01:16,350
Jeremy I'm currently as you might notice

00:01:12,960 --> 00:01:19,820
I like self-deprecating humor I I said

00:01:16,350 --> 00:01:24,840
self-deprecating that self-defecating

00:01:19,820 --> 00:01:27,060
anyway so I am currently doing some

00:01:24,840 --> 00:01:29,399
writing for performance on a freelance

00:01:27,060 --> 00:01:31,649
capacity for Google for their web

00:01:29,399 --> 00:01:33,030
fundamentals portal so I like to write

00:01:31,649 --> 00:01:34,229
about performance a lot I've written for

00:01:33,030 --> 00:01:36,840
CSS tricks and a bunch of different

00:01:34,229 --> 00:01:39,329
stuff so this is gonna be fun

00:01:36,840 --> 00:01:42,119
so let's get into it but before I can

00:01:39,329 --> 00:01:44,039
get into it in earnest I want to talk a

00:01:42,119 --> 00:01:47,549
little bit about how browsers render

00:01:44,039 --> 00:01:48,929
fonts and that's important right because

00:01:47,549 --> 00:01:52,350
fonts load differently than other

00:01:48,929 --> 00:01:55,020
resources different resources interact

00:01:52,350 --> 00:01:57,240
with the browser differently CSS will

00:01:55,020 --> 00:02:00,299
block rendering if it's in the head if

00:01:57,240 --> 00:02:02,429
it's not deferred as in the case of

00:02:00,299 --> 00:02:04,319
critical CSS javascript may or may not

00:02:02,429 --> 00:02:06,929
block rendering depending on how you

00:02:04,319 --> 00:02:09,179
load it images typically don't

00:02:06,929 --> 00:02:10,259
but what's common to all of them is that

00:02:09,179 --> 00:02:12,300
they go through a common process

00:02:10,259 --> 00:02:14,810
initially so let's get it up to speed

00:02:12,300 --> 00:02:16,550
with a quick recap of resource loading

00:02:14,810 --> 00:02:20,610
let's meet the crew

00:02:16,550 --> 00:02:22,980
this blocky fella is a server he holds

00:02:20,610 --> 00:02:26,010
all of your resources your fonts your

00:02:22,980 --> 00:02:27,770
images your your deepest dreams and

00:02:26,010 --> 00:02:30,950
desires for your web app

00:02:27,770 --> 00:02:34,250
and this is the browser this cheeky

00:02:30,950 --> 00:02:36,770
fella takes those resources and makes an

00:02:34,250 --> 00:02:39,050
experience out of them and here's the

00:02:36,770 --> 00:02:41,090
resource it's the most important player

00:02:39,050 --> 00:02:42,560
because without resources there's really

00:02:41,090 --> 00:02:44,810
nothing you just have a server in a

00:02:42,560 --> 00:02:45,650
blank browser and that's kind of boring

00:02:44,810 --> 00:02:48,850
right

00:02:45,650 --> 00:02:51,620
and what happens through all of these

00:02:48,850 --> 00:02:53,570
through every resource type goes through

00:02:51,620 --> 00:02:55,400
a different sort of not different but

00:02:53,570 --> 00:02:57,140
like initially they go through the same

00:02:55,400 --> 00:02:59,270
sort of thing

00:02:57,140 --> 00:03:02,900
right you have a browser makes a request

00:02:59,270 --> 00:03:05,000
to the server and the server may send

00:03:02,900 --> 00:03:07,340
that response hopefully vigorously

00:03:05,000 --> 00:03:09,080
because we want a vigorous response

00:03:07,340 --> 00:03:11,300
that's good for performance it should be

00:03:09,080 --> 00:03:14,870
quick so don't worry about the resource

00:03:11,300 --> 00:03:16,820
he'll be fine he'll make it and then

00:03:14,870 --> 00:03:18,620
this is where things get different after

00:03:16,820 --> 00:03:21,170
that resource arrives in the browser the

00:03:18,620 --> 00:03:22,850
browser then will do different things

00:03:21,170 --> 00:03:24,260
with it depending on what that resource

00:03:22,850 --> 00:03:26,450
is if it's an image it goes through a

00:03:24,260 --> 00:03:29,540
decode there might be some decompression

00:03:26,450 --> 00:03:32,030
if things are compressed there will be

00:03:29,540 --> 00:03:34,340
some amount of render blocking depending

00:03:32,030 --> 00:03:35,570
write and fonts do some of that although

00:03:34,340 --> 00:03:39,950
they do it a little bit differently than

00:03:35,570 --> 00:03:41,540
CSS and then eventually something will

00:03:39,950 --> 00:03:44,330
render and something will paint to the

00:03:41,540 --> 00:03:45,590
screen and my point about all of this

00:03:44,330 --> 00:03:48,650
and I know it sounds like I'm kind of

00:03:45,590 --> 00:03:50,210
going in a weird aside is that render

00:03:48,650 --> 00:03:53,150
blocking is all about priorities your

00:03:50,210 --> 00:03:56,150
highest priority items are things like

00:03:53,150 --> 00:03:58,100
CSS and fonts and they're high priority

00:03:56,150 --> 00:04:00,590
and therefore they do block rendering

00:03:58,100 --> 00:04:03,530
your images are low ich priority

00:04:00,590 --> 00:04:05,180
although some above-the-fold images or

00:04:03,530 --> 00:04:07,960
what might be deemed more critical

00:04:05,180 --> 00:04:10,760
assets may may get a boost in priority

00:04:07,960 --> 00:04:12,640
your JavaScript will be low priority if

00:04:10,760 --> 00:04:15,050
it is in the footer or if it's deferred

00:04:12,640 --> 00:04:16,340
which is good because JavaScript can

00:04:15,050 --> 00:04:18,560
block rendering if it's ain't loaded

00:04:16,340 --> 00:04:20,239
improperly when it comes to fonts though

00:04:18,560 --> 00:04:22,390
how's your speculate and browsers

00:04:20,239 --> 00:04:25,010
actually speculate about a lot of things

00:04:22,390 --> 00:04:26,420
like they speculate with CSS like if you

00:04:25,010 --> 00:04:27,980
have a background image that's attached

00:04:26,420 --> 00:04:30,290
to a selector that's not used in the

00:04:27,980 --> 00:04:32,919
current document once the CSS object

00:04:30,290 --> 00:04:34,990
model and the render tree has been built

00:04:32,919 --> 00:04:36,520
and if that selector isn't used on the

00:04:34,990 --> 00:04:37,960
current page the browser speculates and

00:04:36,520 --> 00:04:39,669
says I don't need that

00:04:37,960 --> 00:04:41,860
I'm not downloading that image and it

00:04:39,669 --> 00:04:43,509
does that with fonts it will actually

00:04:41,860 --> 00:04:45,580
look at text nodes in the document as

00:04:43,509 --> 00:04:48,189
well as constructing the render tree to

00:04:45,580 --> 00:04:50,469
see if any fonts are in use and if

00:04:48,189 --> 00:04:52,509
they're not it doesn't use them it's

00:04:50,469 --> 00:04:54,819
great it's sort of like it it only it

00:04:52,509 --> 00:04:57,580
defers loading in a way it only loads it

00:04:54,819 --> 00:04:59,349
if it needs it and but the problem is is

00:04:57,580 --> 00:05:01,960
that this is what it looks like by

00:04:59,349 --> 00:05:04,599
default this is my blog and all of the

00:05:01,960 --> 00:05:07,330
examples that you will see are gonna be

00:05:04,599 --> 00:05:08,830
from my blog and this is what it looks

00:05:07,330 --> 00:05:11,379
like once the CSS has been downloaded

00:05:08,830 --> 00:05:14,500
and applied but the fonts are in flight

00:05:11,379 --> 00:05:16,150
and then as fonts trickle in and by the

00:05:14,500 --> 00:05:17,710
way these are web fonts fonts that you

00:05:16,150 --> 00:05:19,330
get from a service that aren't installed

00:05:17,710 --> 00:05:23,409
in your system because those will appear

00:05:19,330 --> 00:05:25,870
immediately right what you'll see here

00:05:23,409 --> 00:05:28,810
is that these fonts trickle in as they

00:05:25,870 --> 00:05:30,819
are downloaded and what you're noticing

00:05:28,810 --> 00:05:33,249
here is at two point three one seconds

00:05:30,819 --> 00:05:34,870
all we're getting is like a heading but

00:05:33,249 --> 00:05:36,249
then it's almost two-and-a-half seconds

00:05:34,870 --> 00:05:37,960
before the body copy comes in and this

00:05:36,249 --> 00:05:39,879
is problematic I think I guess it's not

00:05:37,960 --> 00:05:42,099
problematic here right because that's

00:05:39,879 --> 00:05:46,419
not too long to wait but think about

00:05:42,099 --> 00:05:48,250
really slow connections like 2g which is

00:05:46,419 --> 00:05:50,289
still a thing and it could take a long

00:05:48,250 --> 00:05:51,639
time and people could be waiting so we

00:05:50,289 --> 00:05:53,529
want to speed that up we want to get

00:05:51,639 --> 00:05:55,050
things loading better and just more

00:05:53,529 --> 00:05:57,370
quickly that's really important because

00:05:55,050 --> 00:05:58,569
text content is the most important thing

00:05:57,370 --> 00:06:01,599
that's what screen readers read it's

00:05:58,569 --> 00:06:03,189
what users read right and we want that

00:06:01,599 --> 00:06:06,909
to be available as soon as possible so

00:06:03,189 --> 00:06:09,779
that means that web fonts are ripe for

00:06:06,909 --> 00:06:12,399
performance tuning so let's get started

00:06:09,779 --> 00:06:15,009
this one is gonna seem a little bit

00:06:12,399 --> 00:06:16,389
mundane maybe but I like it I think it's

00:06:15,009 --> 00:06:17,919
a good practical advice and I will

00:06:16,389 --> 00:06:21,610
acknowledge that it's not always

00:06:17,919 --> 00:06:24,669
possible but if you can strive to host

00:06:21,610 --> 00:06:27,569
fonts on your own servers and it's

00:06:24,669 --> 00:06:31,120
important oh my gifts died well

00:06:27,569 --> 00:06:33,819
sometimes those things happen what we

00:06:31,120 --> 00:06:34,960
tend to do is we have a link tag that

00:06:33,819 --> 00:06:38,229
we'll get from a third-party service

00:06:34,960 --> 00:06:43,899
right and that's great no it's good it's

00:06:38,229 --> 00:06:45,490
fast it works but you know it the

00:06:43,899 --> 00:06:46,490
problem with it is that we're invoking

00:06:45,490 --> 00:06:48,349
calls too

00:06:46,490 --> 00:06:50,389
other cross origins or rather other

00:06:48,349 --> 00:06:52,880
origin servers that are hosting those

00:06:50,389 --> 00:06:55,009
domains and you really want to consider

00:06:52,880 --> 00:06:56,479
hosting your own fonts for performance

00:06:55,009 --> 00:06:59,720
and the reason why you want to do that

00:06:56,479 --> 00:07:02,990
is because fewer hosts means less

00:06:59,720 --> 00:07:05,960
latency when you have less hosts that

00:07:02,990 --> 00:07:08,509
your hosts like less unique hosts that

00:07:05,960 --> 00:07:10,729
you are loading resources from that's

00:07:08,509 --> 00:07:13,130
good and that's because each time you

00:07:10,729 --> 00:07:15,139
invoke a new connection to another

00:07:13,130 --> 00:07:17,150
domain you're going through a process

00:07:15,139 --> 00:07:19,190
and some of its unavoidable like there's

00:07:17,150 --> 00:07:21,560
going to be at least one which is your

00:07:19,190 --> 00:07:23,720
site but you're gonna have DNS lookup

00:07:21,560 --> 00:07:26,030
time which may or may not be present

00:07:23,720 --> 00:07:28,009
depending on any number of levels of DNS

00:07:26,030 --> 00:07:31,280
cache that might hold that for you and

00:07:28,009 --> 00:07:35,539
eliminate that wait there will be TCP

00:07:31,280 --> 00:07:38,120
time for the handshake there will be SSL

00:07:35,539 --> 00:07:40,639
time if you are serving your site over

00:07:38,120 --> 00:07:42,340
HTTPS which you should and that TLS

00:07:40,639 --> 00:07:44,599
negotiation time does take a little time

00:07:42,340 --> 00:07:48,440
so what we see here is a web page test

00:07:44,599 --> 00:07:49,940
waterfall of cross-origin fonts and you

00:07:48,440 --> 00:07:52,490
can see here that i'm using google fonts

00:07:49,940 --> 00:07:56,180
we have fonts google api's calm which

00:07:52,490 --> 00:07:58,250
has that font face CSS that you know

00:07:56,180 --> 00:07:59,840
defines your font faces and then links

00:07:58,250 --> 00:08:03,380
out to those other fonts those wofe twos

00:07:59,840 --> 00:08:05,240
and those wops and then we have fonts G

00:08:03,380 --> 00:08:07,159
static calm which is what hosts the

00:08:05,240 --> 00:08:09,409
fonts and what you see here is that we

00:08:07,159 --> 00:08:11,000
have multiple connections being open and

00:08:09,409 --> 00:08:14,599
you can see those distinct phases that

00:08:11,000 --> 00:08:18,080
teal is DNS that orange is TCP and that

00:08:14,599 --> 00:08:20,960
purpley color or magenta color is SSL

00:08:18,080 --> 00:08:23,569
time and we got a speed index of about

00:08:20,960 --> 00:08:25,520
3800 and that's a little slow it's not

00:08:23,569 --> 00:08:27,500
great but I mean maybe it's not slow but

00:08:25,520 --> 00:08:30,169
this is a fairly lean site this is my

00:08:27,500 --> 00:08:31,849
blog it's not very heavy and because I'm

00:08:30,169 --> 00:08:33,560
using google fonts I'm not blaming

00:08:31,849 --> 00:08:35,479
google fonts because it's a great tool

00:08:33,560 --> 00:08:37,610
and I use it I still use it sometimes

00:08:35,479 --> 00:08:39,440
but because we're opening those extra

00:08:37,610 --> 00:08:41,329
connections it's kind of delayed a

00:08:39,440 --> 00:08:42,620
little bit now let's see what happens

00:08:41,329 --> 00:08:45,589
when we put them all in the same origin

00:08:42,620 --> 00:08:47,720
we only have that single connection for

00:08:45,589 --> 00:08:49,850
that first origin that we we can't

00:08:47,720 --> 00:08:51,290
eliminate that that's you know you got

00:08:49,850 --> 00:08:55,130
to open your content has to live

00:08:51,290 --> 00:08:58,690
somewhere right and so you can see that

00:08:55,130 --> 00:09:00,280
there's no more blocking latency for

00:08:58,690 --> 00:09:02,020
those other cross origins because we're

00:09:00,280 --> 00:09:04,060
not making calls to them and our speed

00:09:02,020 --> 00:09:06,340
index goes down to about 2500 which is

00:09:04,060 --> 00:09:08,440
about a 35 percent improvement that's

00:09:06,340 --> 00:09:10,390
pretty solid that means that the page

00:09:08,440 --> 00:09:12,220
speed index measures how visually

00:09:10,390 --> 00:09:14,200
complete a page is within a certain

00:09:12,220 --> 00:09:16,480
amount of time and the lower that value

00:09:14,200 --> 00:09:18,130
is the better it's like performance is

00:09:16,480 --> 00:09:20,440
great as an aside performance is great

00:09:18,130 --> 00:09:22,270
because it feels like a study of how low

00:09:20,440 --> 00:09:23,830
can you get your numbers like everything

00:09:22,270 --> 00:09:24,970
feels like oh I don't get that number

00:09:23,830 --> 00:09:28,480
lower lower

00:09:24,970 --> 00:09:31,990
oh yes less kilobytes that's awesome so

00:09:28,480 --> 00:09:33,370
I understand I understand you can't

00:09:31,990 --> 00:09:35,020
always host your own fonts maybe you

00:09:33,370 --> 00:09:37,300
have best practices within an

00:09:35,020 --> 00:09:39,970
organization that say hey maybe you need

00:09:37,300 --> 00:09:41,710
to use a third-party service or you know

00:09:39,970 --> 00:09:44,350
there might be some licensing issues I

00:09:41,710 --> 00:09:45,790
get it it's tough and that that advice

00:09:44,350 --> 00:09:47,200
is something that not everyone is going

00:09:45,790 --> 00:09:48,820
to be able to take advantage of but

00:09:47,200 --> 00:09:50,530
thankfully we have something called rel

00:09:48,820 --> 00:09:52,690
preconnect and rel preconnect

00:09:50,530 --> 00:09:55,270
is a resource hint and we're gonna go

00:09:52,690 --> 00:09:57,160
over quite a few resource hints today it

00:09:55,270 --> 00:09:59,560
is a resource hint that will open up

00:09:57,160 --> 00:10:01,960
early connections to servers before the

00:09:59,560 --> 00:10:03,910
browser knows it needs to do it and we

00:10:01,960 --> 00:10:06,730
know better than the browser what

00:10:03,910 --> 00:10:08,020
content we're getting and where we're

00:10:06,730 --> 00:10:10,240
getting our resources from and what

00:10:08,020 --> 00:10:12,490
resources are being used and so when we

00:10:10,240 --> 00:10:13,870
use rel pre connect we're we're giving

00:10:12,490 --> 00:10:15,490
the browser a head start on making those

00:10:13,870 --> 00:10:17,470
connections and we're masking that

00:10:15,490 --> 00:10:18,730
latency and resource hints are pretty

00:10:17,470 --> 00:10:20,710
easy to use you can do them one to two

00:10:18,730 --> 00:10:23,080
ways all resource hands can be used like

00:10:20,710 --> 00:10:24,430
this they can be in a link tag and you

00:10:23,080 --> 00:10:27,850
see here we just have rel equals pre

00:10:24,430 --> 00:10:30,670
connect the href is the are the domains

00:10:27,850 --> 00:10:32,020
and then in cross-origin which you want

00:10:30,670 --> 00:10:34,810
to add that because that indicates that

00:10:32,020 --> 00:10:37,300
this is a a request or an operation that

00:10:34,810 --> 00:10:39,850
we're going to perform on a different

00:10:37,300 --> 00:10:41,470
server and so that's important to don't

00:10:39,850 --> 00:10:43,570
don't leave that out because if you

00:10:41,470 --> 00:10:45,040
leave that out nothing good happens like

00:10:43,570 --> 00:10:46,600
nothing bad happens but then nothing

00:10:45,040 --> 00:10:49,330
else happens like you don't get the good

00:10:46,600 --> 00:10:51,850
things you can also use that as an HTTP

00:10:49,330 --> 00:10:55,060
response header which is great because I

00:10:51,850 --> 00:10:57,850
like it because it separates that logic

00:10:55,060 --> 00:11:01,440
out of my application markup and puts it

00:10:57,850 --> 00:11:03,040
instead into an HTTP header and I feel

00:11:01,440 --> 00:11:04,330
personally I haven't done a lot of

00:11:03,040 --> 00:11:06,040
testing on this but I feel bit that

00:11:04,330 --> 00:11:07,570
because headers are earlier in the

00:11:06,040 --> 00:11:10,300
payload they're above the response body

00:11:07,570 --> 00:11:12,640
that you're going to get maybe just a

00:11:10,300 --> 00:11:14,950
slight slight that

00:11:12,640 --> 00:11:16,300
a head start when you do it this way but

00:11:14,950 --> 00:11:18,700
either way is good and they're both

00:11:16,300 --> 00:11:20,440
pretty low effort so without real

00:11:18,700 --> 00:11:23,080
preconnect you can see typical thing

00:11:20,440 --> 00:11:25,360
right similar to the cross origin font

00:11:23,080 --> 00:11:27,640
request thing that we saw initially got

00:11:25,360 --> 00:11:29,800
those multiple those multiple connection

00:11:27,640 --> 00:11:33,010
negotiations going on but with rel pre

00:11:29,800 --> 00:11:35,680
connect you can see all right there

00:11:33,010 --> 00:11:37,240
we're parallelizing some of that and the

00:11:35,680 --> 00:11:39,970
funny thing is even though that CSS

00:11:37,240 --> 00:11:43,840
request who to fonts google api's comm

00:11:39,970 --> 00:11:45,400
is a little manat gonna be able to get

00:11:43,840 --> 00:11:48,070
much of a head start on it because that

00:11:45,400 --> 00:11:51,400
link tag is probably not going to be

00:11:48,070 --> 00:11:54,490
very far from where your CSS link tag is

00:11:51,400 --> 00:11:56,080
for the font face CSS that it hosts but

00:11:54,490 --> 00:11:58,450
you can see that it does when we go back

00:11:56,080 --> 00:11:59,770
it does boost it just a little bit it

00:11:58,450 --> 00:12:02,860
gives us a little bit of a head start

00:11:59,770 --> 00:12:05,170
but that fonts dot G static resolution

00:12:02,860 --> 00:12:07,180
that call right there happens a little

00:12:05,170 --> 00:12:09,490
bit earlier like noticeably earlier and

00:12:07,180 --> 00:12:11,410
that that equates to about a 7%

00:12:09,490 --> 00:12:13,540
improvement in your speed index and

00:12:11,410 --> 00:12:16,030
that's great like you might think 7%

00:12:13,540 --> 00:12:17,830
that's nothing well okay let them put it

00:12:16,030 --> 00:12:20,500
in perspective you put two lines of code

00:12:17,830 --> 00:12:22,660
in your HTML or you just threw in an

00:12:20,500 --> 00:12:25,180
HTTP response header for a link tag or

00:12:22,660 --> 00:12:27,510
for a link header and you got that I

00:12:25,180 --> 00:12:30,250
mean as far as effort to benefit ratio

00:12:27,510 --> 00:12:31,660
I'm sold on that that's pretty cool and

00:12:30,250 --> 00:12:34,600
that's just the median run in web page

00:12:31,660 --> 00:12:35,950
test it could be it could be faster it

00:12:34,600 --> 00:12:37,840
might be a little bit slower you don't

00:12:35,950 --> 00:12:40,030
know so try it out and a friendly

00:12:37,840 --> 00:12:41,470
reminder I did say this don't forget

00:12:40,030 --> 00:12:44,290
about cross origin that's really

00:12:41,470 --> 00:12:46,870
important relp reconnect support is

00:12:44,290 --> 00:12:49,360
great just about 2/3 of browsers support

00:12:46,870 --> 00:12:51,640
it although this is can't I use so it

00:12:49,360 --> 00:12:53,710
changes you know whenever that that data

00:12:51,640 --> 00:12:56,410
gets updated but you'll see that once

00:12:53,710 --> 00:12:58,000
Safari on both platforms comes into the

00:12:56,410 --> 00:13:00,400
for that we're gonna have much better

00:12:58,000 --> 00:13:02,110
support for that but if your browser

00:13:00,400 --> 00:13:05,500
doesn't support rel preconnect maybe you

00:13:02,110 --> 00:13:07,480
could think about oh sorry I got ahead

00:13:05,500 --> 00:13:08,530
of myself if your browser doesn't

00:13:07,480 --> 00:13:10,030
support rel preconnect

00:13:08,530 --> 00:13:12,490
understand that nothing bad is going to

00:13:10,030 --> 00:13:15,160
happen and I had a funny gif here that's

00:13:12,490 --> 00:13:17,710
not going to play that showed a tractor

00:13:15,160 --> 00:13:20,440
engine exploding to drive home the point

00:13:17,710 --> 00:13:24,070
that we tend to think of things as a

00:13:20,440 --> 00:13:25,540
catastrophe when we use only use

00:13:24,070 --> 00:13:25,960
features that might not be supported

00:13:25,540 --> 00:13:27,700
right

00:13:25,960 --> 00:13:30,070
oh my layout might break this might

00:13:27,700 --> 00:13:32,560
break well yes I mean with some feature

00:13:30,070 --> 00:13:34,120
checking on those things you can you

00:13:32,560 --> 00:13:35,560
know you can be responsible what what's

00:13:34,120 --> 00:13:36,460
great about things like resource hints

00:13:35,560 --> 00:13:39,010
is that if the browser doesn't

00:13:36,460 --> 00:13:41,200
understand them it doesn't matter it

00:13:39,010 --> 00:13:42,520
just doesn't it just glosses over it it

00:13:41,200 --> 00:13:44,460
doesn't do anything so it doesn't break

00:13:42,520 --> 00:13:47,530
anything it just means that users get a

00:13:44,460 --> 00:13:51,430
slightly less optimal experience so use

00:13:47,530 --> 00:13:53,410
it without fear if you can't use rel

00:13:51,430 --> 00:13:56,050
preconnect consider rel DNS prefetch

00:13:53,410 --> 00:13:58,840
this is also an option and what rel DNS

00:13:56,050 --> 00:14:01,900
prefetch does is that instead of opening

00:13:58,840 --> 00:14:03,610
the entire connection it will open up it

00:14:01,900 --> 00:14:05,920
will just perform the DNS lookup ahead

00:14:03,610 --> 00:14:06,940
of time and that can be not very not

00:14:05,920 --> 00:14:08,800
very much time or it could be

00:14:06,940 --> 00:14:10,420
significant depending on any number of

00:14:08,800 --> 00:14:12,730
factors infrastructure and network

00:14:10,420 --> 00:14:15,190
factors and you use it much the same way

00:14:12,730 --> 00:14:17,260
using an HTML you can use it as an HTTP

00:14:15,190 --> 00:14:20,200
response header in fact the syntax is

00:14:17,260 --> 00:14:22,570
pretty much identical to rel preconnect

00:14:20,200 --> 00:14:25,450
except you're just doing rel DNS

00:14:22,570 --> 00:14:27,610
prefetch and without it you can see here

00:14:25,450 --> 00:14:30,280
those little teal bars our DNS lookups

00:14:27,610 --> 00:14:33,250
without DNS prefetch they're occurring

00:14:30,280 --> 00:14:35,170
as they need to but with it we're

00:14:33,250 --> 00:14:37,240
reprioritizing those DNS lookups and

00:14:35,170 --> 00:14:39,610
there wasn't a lot of speed index

00:14:37,240 --> 00:14:41,170
benefit here but you can definitely see

00:14:39,610 --> 00:14:43,210
that it does mask some of that latency

00:14:41,170 --> 00:14:44,890
and again two lines of code gives you a

00:14:43,210 --> 00:14:47,050
little bit a little bit of a head start

00:14:44,890 --> 00:14:49,330
and what's cool about DNS prefetch is

00:14:47,050 --> 00:14:51,270
that it's supported more widely

00:14:49,330 --> 00:14:54,940
it's almost three-quarters of browsers

00:14:51,270 --> 00:14:57,280
so use it without fear use it use pre

00:14:54,940 --> 00:15:02,170
connect you can use BRE Connect use

00:14:57,280 --> 00:15:03,340
maybe use DNS prefetch know and one

00:15:02,170 --> 00:15:04,960
thing that's cool it's sort of a side

00:15:03,340 --> 00:15:06,570
note is that hosting your own fonts

00:15:04,960 --> 00:15:08,590
gives you back some measure of control

00:15:06,570 --> 00:15:10,450
basically what you've gained regained

00:15:08,590 --> 00:15:11,980
control of is use of anything within a

00:15:10,450 --> 00:15:13,990
font face this could be Unicode range

00:15:11,980 --> 00:15:15,340
this could be font display it's not to

00:15:13,990 --> 00:15:17,260
say that these third-party services

00:15:15,340 --> 00:15:19,600
don't give you hooks or won't eventually

00:15:17,260 --> 00:15:21,850
expose hooks to do these things or don't

00:15:19,600 --> 00:15:23,740
already do them optimally but there is

00:15:21,850 --> 00:15:26,590
no substitute for having control over

00:15:23,740 --> 00:15:28,150
your own font face also subsetting if

00:15:26,590 --> 00:15:29,920
you want to aggressively subset

00:15:28,150 --> 00:15:31,600
something that's great like say you have

00:15:29,920 --> 00:15:33,970
a font that you only use a handful of

00:15:31,600 --> 00:15:35,350
glyphs of and but you don't want it to

00:15:33,970 --> 00:15:37,000
convert it into a graphic you can just

00:15:35,350 --> 00:15:38,920
convert that into a teeny tiny font

00:15:37,000 --> 00:15:39,850
google fonts does have a beta feature

00:15:38,920 --> 00:15:42,339
where you can specify

00:15:39,850 --> 00:15:44,800
by a custom subset in a query string but

00:15:42,339 --> 00:15:47,440
it is in beta as far as I know and I

00:15:44,800 --> 00:15:49,509
don't feel it as as convenient

00:15:47,440 --> 00:15:51,250
personally but oh maybe maybe look

00:15:49,509 --> 00:15:55,149
around and see what you what you can do

00:15:51,250 --> 00:15:56,560
Oh an easier use of rel preload you can

00:15:55,149 --> 00:15:58,990
technically rel preload stuff from

00:15:56,560 --> 00:16:01,839
Google Fonts but the file names are like

00:15:58,990 --> 00:16:04,389
these long sort of random strings and I

00:16:01,839 --> 00:16:07,300
can't tell you if they change or not so

00:16:04,389 --> 00:16:09,940
I can't recommend rel pre-loading

00:16:07,300 --> 00:16:12,399
something that might change because then

00:16:09,940 --> 00:16:14,470
you might be relative that 404s and your

00:16:12,399 --> 00:16:16,029
browser will throw throw notices in the

00:16:14,470 --> 00:16:17,470
console it might not be a big deal but

00:16:16,029 --> 00:16:18,790
then you know you might just lose a

00:16:17,470 --> 00:16:20,740
benefit that you thought you once had

00:16:18,790 --> 00:16:21,480
because things change because things do

00:16:20,740 --> 00:16:23,680
change

00:16:21,480 --> 00:16:25,449
friendly reminder mind the licensing

00:16:23,680 --> 00:16:28,930
agreements I'm gonna be very vocal about

00:16:25,449 --> 00:16:30,250
this font foundries work hard making

00:16:28,930 --> 00:16:32,259
fonts is hard

00:16:30,250 --> 00:16:34,899
I made a crappy font once and it was

00:16:32,259 --> 00:16:37,600
hard so just imagine how how incredibly

00:16:34,899 --> 00:16:40,180
difficult it is to make a really good

00:16:37,600 --> 00:16:41,649
font and write this EULA that says you

00:16:40,180 --> 00:16:43,240
cannot embed this and all of your hard

00:16:41,649 --> 00:16:45,790
work just gets thrown down the drain

00:16:43,240 --> 00:16:47,560
because because you know it's out there

00:16:45,790 --> 00:16:49,449
and you know it's not like you can't

00:16:47,560 --> 00:16:51,730
convert a wofe - back to a true type

00:16:49,449 --> 00:16:54,550
font you know it's it's possible so just

00:16:51,730 --> 00:16:57,069
just be cool if the EULA says don't

00:16:54,550 --> 00:16:58,449
embed please don't embed next we're

00:16:57,069 --> 00:17:00,250
going to talk about font display for

00:16:58,449 --> 00:17:02,310
better rendering control I love that

00:17:00,250 --> 00:17:04,839
display I wrote an article about this

00:17:02,310 --> 00:17:07,500
what I like about it is is the easiest

00:17:04,839 --> 00:17:10,990
possible way to change how the browser

00:17:07,500 --> 00:17:13,030
renders fonts or like to override

00:17:10,990 --> 00:17:15,400
browser default behavior because we have

00:17:13,030 --> 00:17:17,079
the font loading API which is great but

00:17:15,400 --> 00:17:19,510
it's JavaScript and sometimes JavaScript

00:17:17,079 --> 00:17:21,959
breaks this is CSS and it's one line of

00:17:19,510 --> 00:17:24,220
CSS and it's really SuperDuper simple

00:17:21,959 --> 00:17:25,870
now the spec says that font display

00:17:24,220 --> 00:17:28,240
descriptor for a font face determines

00:17:25,870 --> 00:17:29,650
how the font face is displayed based on

00:17:28,240 --> 00:17:32,080
whether and when it is downloaded and

00:17:29,650 --> 00:17:34,200
ready to use for spec ease that's pretty

00:17:32,080 --> 00:17:36,730
clear but the way I like to put it is

00:17:34,200 --> 00:17:38,860
fine display overrides default browser

00:17:36,730 --> 00:17:41,620
rendering strategies of web fonts and I

00:17:38,860 --> 00:17:43,390
like that because it's simple it's super

00:17:41,620 --> 00:17:45,370
simple right there see that that's the

00:17:43,390 --> 00:17:47,320
good stuff that's the really good stuff

00:17:45,370 --> 00:17:48,909
you want to check that out and because

00:17:47,320 --> 00:17:51,730
we've got one line you just drop that in

00:17:48,909 --> 00:17:53,530
and if the browser supports it it does

00:17:51,730 --> 00:17:55,120
its thing it does its font display thing

00:17:53,530 --> 00:17:58,420
so let's talk about font display some of

00:17:55,120 --> 00:18:01,270
the values font display auto is the

00:17:58,420 --> 00:18:02,650
default so if you don't supply this this

00:18:01,270 --> 00:18:04,900
is what the browser fills in if it

00:18:02,650 --> 00:18:07,240
supports font display it'll just do what

00:18:04,900 --> 00:18:09,460
the browser is going to do and what that

00:18:07,240 --> 00:18:11,740
usually is is that there will be a

00:18:09,460 --> 00:18:13,180
period of invisible text maybe there

00:18:11,740 --> 00:18:15,490
will be a time out for that when it

00:18:13,180 --> 00:18:18,220
flashes to unstyled text and then it

00:18:15,490 --> 00:18:19,780
will and then it will put the font in it

00:18:18,220 --> 00:18:22,060
may be optimal more or less some

00:18:19,780 --> 00:18:24,880
browsers block rendering of fonts longer

00:18:22,060 --> 00:18:27,310
than others font display swap is the

00:18:24,880 --> 00:18:28,750
secret sauce I like this stuff

00:18:27,310 --> 00:18:30,580
the browser will display the first

00:18:28,750 --> 00:18:32,140
locally installed Fontana fonts family

00:18:30,580 --> 00:18:35,290
Stax so let's say you have a web font

00:18:32,140 --> 00:18:37,240
like I don't know monserrate right and

00:18:35,290 --> 00:18:38,590
then your fallback is Georgia that's

00:18:37,240 --> 00:18:39,310
probably a terrible fallback for a

00:18:38,590 --> 00:18:40,390
system font

00:18:39,310 --> 00:18:42,400
well let's say that's what it is right

00:18:40,390 --> 00:18:45,160
so if you have fought display swap it

00:18:42,400 --> 00:18:47,740
will display Georgia first and then

00:18:45,160 --> 00:18:51,760
while it's waiting to get montserrat it

00:18:47,740 --> 00:18:53,080
will swap that font in and it'll just do

00:18:51,760 --> 00:18:54,940
it for you before you'd have to write

00:18:53,080 --> 00:18:56,440
you'd have to use a script like font

00:18:54,940 --> 00:18:58,180
face observer which you still might if

00:18:56,440 --> 00:19:00,820
you want to have broader support or the

00:18:58,180 --> 00:19:03,400
font loading API but one line of CSS and

00:19:00,820 --> 00:19:06,100
this has just done for you and you can

00:19:03,400 --> 00:19:08,170
see right here oh it doesn't work the

00:19:06,100 --> 00:19:11,170
gifts don't work this was the flash of

00:19:08,170 --> 00:19:14,410
invisible text on one side and what the

00:19:11,170 --> 00:19:17,890
flash of invisible text does is the font

00:19:14,410 --> 00:19:19,960
is blocked from rendering and then it

00:19:17,890 --> 00:19:22,060
just appears when the when the web font

00:19:19,960 --> 00:19:23,590
is downloaded and then we have flash of

00:19:22,060 --> 00:19:25,210
unstyled text which is actually

00:19:23,590 --> 00:19:27,130
preferable which I'll explain in a

00:19:25,210 --> 00:19:29,740
second the flash of unstyled text is

00:19:27,130 --> 00:19:31,750
when the first available system font

00:19:29,740 --> 00:19:34,930
loads immediately and then there is a

00:19:31,750 --> 00:19:38,170
shift to the styled text or the custom

00:19:34,930 --> 00:19:42,190
font or web font text and you might be

00:19:38,170 --> 00:19:44,760
thinking didn't we I thought we didn't

00:19:42,190 --> 00:19:49,060
like it when unstyled text was a thing

00:19:44,760 --> 00:19:50,650
yeah I get it you know but it's good

00:19:49,060 --> 00:19:52,600
because text has never blocked from

00:19:50,650 --> 00:19:54,820
being read and that's really important

00:19:52,600 --> 00:19:56,380
on slow connections because users can

00:19:54,820 --> 00:19:58,270
read text more quickly while they're

00:19:56,380 --> 00:19:59,890
waiting for a font to come in if a font

00:19:58,270 --> 00:20:01,450
fails to download text won't be blocked

00:19:59,890 --> 00:20:03,490
until the flash of invisible text time

00:20:01,450 --> 00:20:05,260
out some browsers could this could be a

00:20:03,490 --> 00:20:06,750
little while I believe Safari used to be

00:20:05,260 --> 00:20:08,730
quite a long time and it might

00:20:06,750 --> 00:20:10,830
be that's a long time like on a slow

00:20:08,730 --> 00:20:11,930
connection like ten seconds no text if

00:20:10,830 --> 00:20:14,400
you're waiting on a slow connection

00:20:11,930 --> 00:20:18,120
people are gonna bounce man they're just

00:20:14,400 --> 00:20:19,410
not gonna dig that and what's cool about

00:20:18,120 --> 00:20:21,720
it is that your first meaningful paint

00:20:19,410 --> 00:20:23,490
and speed index metrics of a page can be

00:20:21,720 --> 00:20:25,050
boosted more your first meaning first

00:20:23,490 --> 00:20:27,180
meaningful paint than your speed index

00:20:25,050 --> 00:20:29,430
let's take a look at some numbers your

00:20:27,180 --> 00:20:31,410
first meaningful paint under auto is

00:20:29,430 --> 00:20:34,440
around 3200 now this is my blog on a

00:20:31,410 --> 00:20:36,630
local just on a throttled local test

00:20:34,440 --> 00:20:39,570
because I wanted to have very consistent

00:20:36,630 --> 00:20:41,610
baselines for measurement but then when

00:20:39,570 --> 00:20:42,900
you put in swap it almost drops that by

00:20:41,610 --> 00:20:45,870
half and the reason why that's occurring

00:20:42,900 --> 00:20:47,520
is because something meaningful is

00:20:45,870 --> 00:20:49,290
hitting the page more quickly it's

00:20:47,520 --> 00:20:51,540
looking more visually complete your

00:20:49,290 --> 00:20:53,040
speed index values don't don't improve

00:20:51,540 --> 00:20:55,230
that much but it does improve a slight

00:20:53,040 --> 00:20:57,810
bit but again hey one line of CSS and

00:20:55,230 --> 00:20:59,730
it's a it's a little win but there are

00:20:57,810 --> 00:21:01,590
considerations with swap don't use it

00:20:59,730 --> 00:21:04,830
for icon fonts use font display:block

00:21:01,590 --> 00:21:06,480
instead like block what that does is it

00:21:04,830 --> 00:21:08,190
will block indefinitely it's like flash

00:21:06,480 --> 00:21:11,010
of invisible text but without timeout

00:21:08,190 --> 00:21:14,490
until a resource is downloaded mm-hmm

00:21:11,010 --> 00:21:15,540
maybe you don't use icon fonts I mean I

00:21:14,490 --> 00:21:16,920
don't want to sit up here and tell you

00:21:15,540 --> 00:21:20,370
what to do even though I'm sitting up

00:21:16,920 --> 00:21:23,610
here and telling you what to do but that

00:21:20,370 --> 00:21:25,560
links to a that links to a article by

00:21:23,610 --> 00:21:27,150
Chris coiour with a lot of rationale for

00:21:25,560 --> 00:21:28,590
why you should use images instead they

00:21:27,150 --> 00:21:30,300
might be more accessible there's

00:21:28,590 --> 00:21:32,370
definitely an accessibility argument to

00:21:30,300 --> 00:21:35,010
make I could do a whole talk on this but

00:21:32,370 --> 00:21:36,090
I'm not going to but if it's cool if

00:21:35,010 --> 00:21:38,790
it's cool I understand you have an

00:21:36,090 --> 00:21:40,740
infrastructure and app architecture that

00:21:38,790 --> 00:21:42,990
you have to deal with and I'm mindful of

00:21:40,740 --> 00:21:45,480
that but maybe just don't use icon fonts

00:21:42,990 --> 00:21:46,890
when you get a chance and also font

00:21:45,480 --> 00:21:48,750
swapping causes layout shifting which

00:21:46,890 --> 00:21:51,540
can cause reflows in the document as

00:21:48,750 --> 00:21:52,800
text changes dimensions because fonts

00:21:51,540 --> 00:21:53,910
are inherently different from font to

00:21:52,800 --> 00:21:56,060
font different lion heights different

00:21:53,910 --> 00:21:58,740
kerning 's all kinds of different stuff

00:21:56,060 --> 00:22:00,240
and there's a great tool for this oh hey

00:21:58,740 --> 00:22:02,580
look it's a gift actually these are all

00:22:00,240 --> 00:22:04,560
videos and because I was trying to be

00:22:02,580 --> 00:22:07,370
performant and not used gifts I learned

00:22:04,560 --> 00:22:07,370
a lesson today

00:22:07,450 --> 00:22:13,400
but basically this is a tool where you

00:22:11,150 --> 00:22:15,230
can you can overlay a system font with a

00:22:13,400 --> 00:22:17,330
custom font or a rather a web font I

00:22:15,230 --> 00:22:19,309
don't keep calling custom fonts you can

00:22:17,330 --> 00:22:20,990
overlay a web font with a system font

00:22:19,309 --> 00:22:23,090
and then you can kind of like tweak the

00:22:20,990 --> 00:22:25,280
lion heights and the letter spacing of

00:22:23,090 --> 00:22:27,440
each to get them just ever so perfectly

00:22:25,280 --> 00:22:29,600
lined up or as good as possible so that

00:22:27,440 --> 00:22:31,309
you can write some styles so that the

00:22:29,600 --> 00:22:34,790
layout shifting is minimized when the

00:22:31,309 --> 00:22:36,590
font swaps in and font display optional

00:22:34,790 --> 00:22:38,600
I really like this one flash of visible

00:22:36,590 --> 00:22:40,580
text occurs for a very short time and on

00:22:38,600 --> 00:22:41,960
back connections the browser skips

00:22:40,580 --> 00:22:43,340
loading the font or down little

00:22:41,960 --> 00:22:46,970
downloads that in the background so what

00:22:43,340 --> 00:22:48,710
this means is that initially the browser

00:22:46,970 --> 00:22:51,230
depending on any number of internal

00:22:48,710 --> 00:22:52,580
behaviors will decide ah maybe I just

00:22:51,230 --> 00:22:54,620
don't need that fun in the case of

00:22:52,580 --> 00:22:56,420
Chrome what it does is it will download

00:22:54,620 --> 00:22:59,120
that font in the background like a like

00:22:56,420 --> 00:23:01,429
a rel prefetch right and then it will go

00:22:59,120 --> 00:23:02,840
ahead and on the next navigation it

00:23:01,429 --> 00:23:04,280
won't apply to the current page but on

00:23:02,840 --> 00:23:06,320
the next navigation it will apply it

00:23:04,280 --> 00:23:08,300
that could change browser default

00:23:06,320 --> 00:23:10,640
behaviors do change sometimes so do your

00:23:08,300 --> 00:23:11,900
own testing always and if you want to

00:23:10,640 --> 00:23:13,490
learn more about font display check out

00:23:11,900 --> 00:23:15,290
this article I wrote for CSS tricks it

00:23:13,490 --> 00:23:17,900
goes over things like fault detecting

00:23:15,290 --> 00:23:20,240
font display support and then being able

00:23:17,900 --> 00:23:22,850
to fall back to the font loading API or

00:23:20,240 --> 00:23:24,860
font face observer and supports pretty

00:23:22,850 --> 00:23:27,020
good 55% it's like a simple majority

00:23:24,860 --> 00:23:28,309
but once Safari on both platforms comes

00:23:27,020 --> 00:23:30,050
through it's gonna be more than a simple

00:23:28,309 --> 00:23:32,059
majority it's going to be fairly widely

00:23:30,050 --> 00:23:33,920
available in the best part again if it

00:23:32,059 --> 00:23:36,679
doesn't support font display nothing bad

00:23:33,920 --> 00:23:38,929
happens everything just works it just

00:23:36,679 --> 00:23:40,070
works or it doesn't work but that's fine

00:23:38,929 --> 00:23:41,660
because you'll just get the browser

00:23:40,070 --> 00:23:43,670
defaults which in this case is not

00:23:41,660 --> 00:23:45,650
catastrophic breakage it's just a

00:23:43,670 --> 00:23:48,190
slightly less optimal experience for

00:23:45,650 --> 00:23:50,600
Brout for those browsers and that's okay

00:23:48,190 --> 00:23:52,070
next I want to talk about rel preload

00:23:50,600 --> 00:23:54,080
for faster font loading or rather

00:23:52,070 --> 00:23:57,350
reprioritizing font loading there's a

00:23:54,080 --> 00:23:59,570
lot of spec is here and normally I would

00:23:57,350 --> 00:24:01,910
read this but I'm not gonna read this

00:23:59,570 --> 00:24:04,580
instead I'm going to say in other words

00:24:01,910 --> 00:24:06,860
rel preload initiates an early fetch for

00:24:04,580 --> 00:24:09,559
a resource before the browser knows it

00:24:06,860 --> 00:24:12,140
even needs it and that's great right

00:24:09,559 --> 00:24:14,090
because again we know what our

00:24:12,140 --> 00:24:16,640
applications and our web pages need

00:24:14,090 --> 00:24:18,860
before the browser does like the browser

00:24:16,640 --> 00:24:19,250
is going to speculate it's gonna go I

00:24:18,860 --> 00:24:20,990
don't

00:24:19,250 --> 00:24:24,800
I gotta examine his text nodes we can go

00:24:20,990 --> 00:24:26,120
hey hey hey browser look I know I think

00:24:24,800 --> 00:24:28,850
you're trying to do your job all right

00:24:26,120 --> 00:24:30,800
that's fine but I'm just telling you

00:24:28,850 --> 00:24:32,420
you're gonna need that font so go get it

00:24:30,800 --> 00:24:33,740
or anything it's not just fun since any

00:24:32,420 --> 00:24:36,010
critical resource and that's key

00:24:33,740 --> 00:24:37,910
critical resources for rel preload

00:24:36,010 --> 00:24:39,380
basically things that are above the fold

00:24:37,910 --> 00:24:42,320
or anything that's crucial to the user

00:24:39,380 --> 00:24:43,550
experience so same thing in HTML a link

00:24:42,320 --> 00:24:45,980
tag but there are a couple of extra

00:24:43,550 --> 00:24:47,990
things we have an AZ attribute right and

00:24:45,980 --> 00:24:49,670
that is the nature of the content which

00:24:47,990 --> 00:24:52,100
is any list of keywords that you can

00:24:49,670 --> 00:24:54,740
find in the preload spec for fonts it's

00:24:52,100 --> 00:24:57,860
fun for scripts it's script for styles

00:24:54,740 --> 00:24:59,150
its style and you can use as an HTTP

00:24:57,860 --> 00:25:00,740
response header then you'll see that

00:24:59,150 --> 00:25:01,820
little know push thing over there which

00:25:00,740 --> 00:25:05,120
I'm going to talk about a little bit

00:25:01,820 --> 00:25:08,030
later and some caveats without any font

00:25:05,120 --> 00:25:09,590
pre loading this is a waterfall sort of

00:25:08,030 --> 00:25:11,900
or not a waterfall a critical request

00:25:09,590 --> 00:25:14,030
chain diagram in lighthouse you can see

00:25:11,900 --> 00:25:15,950
without any font pre loading going on or

00:25:14,030 --> 00:25:18,170
even CSS pre loading with your font

00:25:15,950 --> 00:25:20,000
faces it's a nested critical request

00:25:18,170 --> 00:25:22,190
chain that means that rendering is being

00:25:20,000 --> 00:25:26,390
blocked in some capacity but when we

00:25:22,190 --> 00:25:27,920
preload the CSS and the fonts there's no

00:25:26,390 --> 00:25:29,510
critical request chains it's just the

00:25:27,920 --> 00:25:31,910
initial navigation there's nothing

00:25:29,510 --> 00:25:34,700
nested and when you visualize this this

00:25:31,910 --> 00:25:36,740
is what it looks like we got fonts right

00:25:34,700 --> 00:25:38,540
they just sort of happen whenever the

00:25:36,740 --> 00:25:41,270
browser finds them and that's cool

00:25:38,540 --> 00:25:43,280
there's nothing wrong with that but if

00:25:41,270 --> 00:25:44,810
you reprioritize with rel preload what

00:25:43,280 --> 00:25:46,820
you see is those fonts come in quicker

00:25:44,810 --> 00:25:48,440
they're starting to happen as soon as

00:25:46,820 --> 00:25:50,300
the document is pulled down and the

00:25:48,440 --> 00:25:52,340
browser discovers that resource hand

00:25:50,300 --> 00:25:54,710
that preload link and then it just goes

00:25:52,340 --> 00:25:56,240
and gets those fonts without you know

00:25:54,710 --> 00:25:59,180
just because you told it to which is

00:25:56,240 --> 00:26:00,710
cool and the effects are interesting and

00:25:59,180 --> 00:26:03,530
you might think oh man we're delaying

00:26:00,710 --> 00:26:05,030
rendering by 0.1 seconds but let's stop

00:26:03,530 --> 00:26:06,620
let's stop and look at this a little bit

00:26:05,030 --> 00:26:09,050
right because performance is a game of

00:26:06,620 --> 00:26:11,570
human perception and what you'll see up

00:26:09,050 --> 00:26:14,720
top is that this is my blog rendering

00:26:11,570 --> 00:26:16,970
that without preload up top and what's

00:26:14,720 --> 00:26:18,800
cool about this is that I'm using font

00:26:16,970 --> 00:26:20,750
display so yes it's more visually

00:26:18,800 --> 00:26:22,940
complete than if I relied on default

00:26:20,750 --> 00:26:25,190
rendering behaviors but what you'll

00:26:22,940 --> 00:26:27,440
notice is that even though I'm delaying

00:26:25,190 --> 00:26:31,160
rendering by 0.1 seconds on the bottom

00:26:27,440 --> 00:26:32,570
where I do use rel preload that text is

00:26:31,160 --> 00:26:34,970
Brender deplete

00:26:32,570 --> 00:26:37,279
more quickly and I think that that's a

00:26:34,970 --> 00:26:39,799
reasonable trade-off to make that you're

00:26:37,279 --> 00:26:42,259
you're basically bypassing that entire

00:26:39,799 --> 00:26:47,600
flash of you know flash of whatever

00:26:42,259 --> 00:26:49,250
right friendly reminders omitting the

00:26:47,600 --> 00:26:50,809
ads attribute causes resources to be

00:26:49,250 --> 00:26:53,179
downloaded twice supply a value of font

00:26:50,809 --> 00:26:54,889
for fonts supply the resources content

00:26:53,179 --> 00:26:56,419
type attribute so browsers don't

00:26:54,889 --> 00:26:58,490
download resources they can't use this

00:26:56,419 --> 00:27:01,370
is like a content type I'm just one

00:26:58,490 --> 00:27:04,130
minute okay you must specify a cross

00:27:01,370 --> 00:27:05,809
origin attribute for font resources yes

00:27:04,130 --> 00:27:08,389
even for fonts on your own server that's

00:27:05,809 --> 00:27:09,559
important a few more things don't

00:27:08,389 --> 00:27:11,269
preload things you aren't going to use

00:27:09,559 --> 00:27:12,889
in the page that's important it's it's

00:27:11,269 --> 00:27:14,360
tempting to do that like for a future

00:27:12,889 --> 00:27:15,919
navigation but you want to use rel

00:27:14,360 --> 00:27:17,990
prefetch instead for that which is for

00:27:15,919 --> 00:27:19,820
non-critical resources don't preload

00:27:17,990 --> 00:27:20,929
everything in the kitchen sink you don't

00:27:19,820 --> 00:27:22,610
want to preload everything just think

00:27:20,929 --> 00:27:24,860
critical stuff think things you need and

00:27:22,610 --> 00:27:27,019
if you're going to specify rel preload

00:27:24,860 --> 00:27:29,269
as an HTTP header use the no push flag

00:27:27,019 --> 00:27:30,529
to prevent unwanted server pushes I like

00:27:29,269 --> 00:27:31,250
server push I think there are good

00:27:30,529 --> 00:27:32,809
things about it

00:27:31,250 --> 00:27:34,429
but it's kind of tough and Jake

00:27:32,809 --> 00:27:36,769
Archibald wrote a good article about the

00:27:34,429 --> 00:27:40,009
varying levels of browser cache and like

00:27:36,769 --> 00:27:42,799
how those things can interact and you

00:27:40,009 --> 00:27:44,539
might want to disable server pushes you

00:27:42,799 --> 00:27:47,899
know because server pushes are often

00:27:44,539 --> 00:27:49,519
kicked off by these link preload headers

00:27:47,899 --> 00:27:52,549
so be aware of that you don't want

00:27:49,519 --> 00:27:55,519
suboptimal behavior to happen you have

00:27:52,549 --> 00:27:56,840
time for one morning okay cool this last

00:27:55,519 --> 00:27:58,970
one will go quick I promise

00:27:56,840 --> 00:28:00,379
save data which is a client hint and you

00:27:58,970 --> 00:28:02,480
can use it to skip nice-to-haves

00:28:00,379 --> 00:28:04,789
typefaces and I'm not gonna read this

00:28:02,480 --> 00:28:06,950
I'm gonna just that's the spec I'm gonna

00:28:04,789 --> 00:28:08,870
tell you what it says save data is a

00:28:06,950 --> 00:28:11,919
header sent by clients in a data saver

00:28:08,870 --> 00:28:14,210
mode hint Chrome for Android

00:28:11,919 --> 00:28:15,740
applications can deliver less resources

00:28:14,210 --> 00:28:17,210
if it is present if you detect that

00:28:15,740 --> 00:28:19,730
header and you modify application

00:28:17,210 --> 00:28:21,590
delivery based on that headers presence

00:28:19,730 --> 00:28:23,000
or absence so in this case you can

00:28:21,590 --> 00:28:24,950
toggle it in Chrome for Android you can

00:28:23,000 --> 00:28:26,539
also download the browser extension for

00:28:24,950 --> 00:28:27,529
Chrome to turn it on and then what

00:28:26,539 --> 00:28:29,779
happens is you'll see at the bottom

00:28:27,529 --> 00:28:31,759
there's a little save data on request

00:28:29,779 --> 00:28:33,649
header and you can use that to do a

00:28:31,759 --> 00:28:35,149
number of things you can you can use it

00:28:33,649 --> 00:28:36,710
as a hook you can serve low resolution

00:28:35,149 --> 00:28:39,139
imagery for high resolution screens

00:28:36,710 --> 00:28:41,179
that's cool you can stream lower quality

00:28:39,139 --> 00:28:43,159
video you can opt out of server pushes

00:28:41,179 --> 00:28:44,750
could opt out um non-essential media

00:28:43,159 --> 00:28:46,100
altogether to think big giant hero

00:28:44,750 --> 00:28:47,330
videos right

00:28:46,100 --> 00:28:48,710
then well maybe you just want to hero

00:28:47,330 --> 00:28:51,289
image instead because somebody's asking

00:28:48,710 --> 00:28:53,419
you to help them save data so you could

00:28:51,289 --> 00:28:56,510
just send them less stuff or you could

00:28:53,419 --> 00:28:58,070
opt out of nice to have web fonts if you

00:28:56,510 --> 00:28:59,450
want to detect save data you just check

00:28:58,070 --> 00:29:00,890
for that header you can see here by

00:28:59,450 --> 00:29:02,780
default I have a saved data variable

00:29:00,890 --> 00:29:05,630
that's false I checked for it if it's

00:29:02,780 --> 00:29:07,640
available it's true then you can add a

00:29:05,630 --> 00:29:09,860
class to the HTML element here I have a

00:29:07,640 --> 00:29:12,169
no save data class if save data isn't on

00:29:09,860 --> 00:29:13,730
and I target that in CSS by default I'm

00:29:12,169 --> 00:29:16,789
opting out of these nice-to-have funds

00:29:13,730 --> 00:29:18,260
but then if no save data is present it

00:29:16,789 --> 00:29:20,120
will add that font and that's good

00:29:18,260 --> 00:29:22,880
because the way that browsers speculate

00:29:20,120 --> 00:29:24,500
it'll it'll use the CSS object model in

00:29:22,880 --> 00:29:26,240
the render tree and compare it and see

00:29:24,500 --> 00:29:28,460
if it needs that that fun even if the

00:29:26,240 --> 00:29:30,500
font face reference is in there it will

00:29:28,460 --> 00:29:32,360
just say nanana now don't download it or

00:29:30,500 --> 00:29:34,580
yeah download that nice to have typeface

00:29:32,360 --> 00:29:37,159
and without it you can see on my blog

00:29:34,580 --> 00:29:39,530
here there's like 50 ish K of typefaces

00:29:37,159 --> 00:29:41,450
without save data wit save data though

00:29:39,530 --> 00:29:43,730
just 10 because I cut out these fiery

00:29:41,450 --> 00:29:45,950
sans body copy fonts you can see on the

00:29:43,730 --> 00:29:48,440
left without it we just have fire sans

00:29:45,950 --> 00:29:50,270
for body copy that's nice but if save

00:29:48,440 --> 00:29:52,159
data is on we just go to a like regular

00:29:50,270 --> 00:29:54,799
body copy and that's cool like just

00:29:52,159 --> 00:29:56,480
system font stuff if you want to learn

00:29:54,799 --> 00:29:59,750
more about save data you can check out

00:29:56,480 --> 00:30:02,450
this article I wrote on CSS tricks time

00:29:59,750 --> 00:30:04,909
to wrap it up thank you so much for

00:30:02,450 --> 00:30:07,039
having me the organizers are incredible

00:30:04,909 --> 00:30:08,659
these are people who organized the event

00:30:07,039 --> 00:30:11,840
I'm sorry I left out some of the other

00:30:08,659 --> 00:30:13,669
organizers I apologize there are other

00:30:11,840 --> 00:30:15,260
people here who have either helped me

00:30:13,669 --> 00:30:17,150
look over my talk and make sure I got

00:30:15,260 --> 00:30:18,710
some things right or have opted and/or

00:30:17,150 --> 00:30:21,049
have written incredible resources that I

00:30:18,710 --> 00:30:23,539
really depend on to write this and be

00:30:21,049 --> 00:30:26,180
accurate or as accurate as it can be and

00:30:23,539 --> 00:30:33,650
thank you thank you so much

00:30:26,180 --> 00:30:35,710
[Applause]

00:30:33,650 --> 00:30:35,710
you

00:30:42,110 --> 00:30:44,170

YouTube URL: https://www.youtube.com/watch?v=iEinIwNppW4


