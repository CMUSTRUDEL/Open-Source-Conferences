Title: Anatomy of a Great Pull Request - Sean Griffin
Publication date: 2017-07-07
Playlist: The Lost Abstractions
Description: 
	Getting a pull request merged into open source is hard. How can you keep yours from getting lost in the noise? Sean will look at what it takes to get a pull request merged into a project like Ruby on Rails. Learn about common mistakes that beginners make and how you can avoid them.

Presented at Abstractions. Part of a limited set of videos able to be published from this event due to technical difficulties.
Captions: 
	00:00:02,300 --> 00:00:09,240
hi everyone oh it's very loud I'm very

00:00:06,450 --> 00:00:11,040
excited it really doesn't matter who I

00:00:09,240 --> 00:00:14,070
am because I'm here to introduce the

00:00:11,040 --> 00:00:16,590
next speaker but since I'm up here my

00:00:14,070 --> 00:00:18,510
name is Tara and I run a Twitter account

00:00:16,590 --> 00:00:21,830
called goat user stories and I have

00:00:18,510 --> 00:00:24,119
stickers if anybody wants one later but

00:00:21,830 --> 00:00:25,949
the most important thing is that I'm

00:00:24,119 --> 00:00:27,630
here to introduce Sean Griffin who's

00:00:25,949 --> 00:00:30,660
going to tell you all kinds of awesome

00:00:27,630 --> 00:00:33,120
things about him but just so you know he

00:00:30,660 --> 00:00:37,890
is a Ruby on Rails committer he worked

00:00:33,120 --> 00:00:39,989
in open source full time he is an

00:00:37,890 --> 00:00:43,950
employee of Shopify up in Canada

00:00:39,989 --> 00:00:46,140
America's hat woohoo and he's going to

00:00:43,950 --> 00:00:50,780
talk to you today about anatomy of a

00:00:46,140 --> 00:00:50,780
good pull request woohoo welcome Sean

00:00:54,920 --> 00:01:00,539
thank you very much yes my name is Sean

00:00:58,500 --> 00:01:02,460
Griffin I'm a 10x hacker ninja guru at

00:01:00,539 --> 00:01:04,470
Shopify if you're wondering what that

00:01:02,460 --> 00:01:05,909
means it means I was curious what would

00:01:04,470 --> 00:01:07,590
happen if I put that on some government

00:01:05,909 --> 00:01:09,360
paperwork and then they gave me a work

00:01:07,590 --> 00:01:10,920
permit for 10x hacker ninja guru and I

00:01:09,360 --> 00:01:17,369
cannot legally work in Canada with any

00:01:10,920 --> 00:01:17,820
other job title so I'm also no longer

00:01:17,369 --> 00:01:20,490
allowed to fill out paperwork

00:01:17,820 --> 00:01:23,380
unsupervised

00:01:20,490 --> 00:01:25,420
but yeah so Shopify pays me to work on

00:01:23,380 --> 00:01:28,299
open-source full-time I mainly focus on

00:01:25,420 --> 00:01:30,399
Ruby on Rails and if we've interacted at

00:01:28,299 --> 00:01:32,740
all in the past outside of that a

00:01:30,399 --> 00:01:35,619
conference there's a good chance it

00:01:32,740 --> 00:01:39,119
looked something like this I closed a

00:01:35,619 --> 00:01:41,349
lot of pull requests and sorry I

00:01:39,119 --> 00:01:43,780
originally wanted to call this talk why

00:01:41,349 --> 00:01:45,939
closed your pull request but that sort

00:01:43,780 --> 00:01:48,099
of gave the wrong tone cuz it's not

00:01:45,939 --> 00:01:50,829
really meant to be a negative thing it's

00:01:48,099 --> 00:01:52,629
definitely not about me it's about how

00:01:50,829 --> 00:01:54,969
you can have a bigger impact when you

00:01:52,629 --> 00:01:56,979
contribute to open source so I want to

00:01:54,969 --> 00:01:58,479
show you some techniques that you can

00:01:56,979 --> 00:02:00,099
use to submit higher quality pull

00:01:58,479 --> 00:02:02,890
requests when you're sitting to rails or

00:02:00,099 --> 00:02:04,509
any other open source project some of

00:02:02,890 --> 00:02:07,030
the techniques I might talk about our

00:02:04,509 --> 00:02:08,829
subjective and will vary by from project

00:02:07,030 --> 00:02:11,079
to project I'm definitely coming at this

00:02:08,829 --> 00:02:13,090
from the focus of what I look for when

00:02:11,079 --> 00:02:16,000
I'm accepting pull requests into rails

00:02:13,090 --> 00:02:18,129
but I think the majority of projects are

00:02:16,000 --> 00:02:22,090
looking for something at least somewhat

00:02:18,129 --> 00:02:23,920
similar to what I'm presenting here I'm

00:02:22,090 --> 00:02:26,049
gonna be showing some real-world

00:02:23,920 --> 00:02:27,639
examples in this talk both of things

00:02:26,049 --> 00:02:31,000
that were done well and things that were

00:02:27,639 --> 00:02:33,040
done less than well I've done my best to

00:02:31,000 --> 00:02:35,319
remove any identifying information of

00:02:33,040 --> 00:02:37,599
any people involved that aren't members

00:02:35,319 --> 00:02:39,160
of the rails team if you really wanted

00:02:37,599 --> 00:02:41,319
to you could probably go track this down

00:02:39,160 --> 00:02:42,880
but I'd like to respect our ask that

00:02:41,319 --> 00:02:44,500
people please don't do that and be

00:02:42,880 --> 00:02:46,030
respectful of people's privacy I don't

00:02:44,500 --> 00:02:48,900
want anybody getting shamed because I

00:02:46,030 --> 00:02:51,579
included their pull request in this talk

00:02:48,900 --> 00:02:53,109
so let's start with the absolute bare

00:02:51,579 --> 00:02:54,970
minimum that you should be doing before

00:02:53,109 --> 00:02:56,769
you open a pull request I'm not gonna

00:02:54,970 --> 00:02:58,540
say too much on these just because

00:02:56,769 --> 00:03:00,419
there's not as much to say on them but

00:02:58,540 --> 00:03:02,440
these are these are the absolute basics

00:03:00,419 --> 00:03:03,609
first you need to read the contributing

00:03:02,440 --> 00:03:05,260
file contribute that I'm the

00:03:03,609 --> 00:03:07,780
contributing with no extension whatever

00:03:05,260 --> 00:03:09,579
format it might be in and I should also

00:03:07,780 --> 00:03:11,709
point out that it's not just about

00:03:09,579 --> 00:03:13,450
reading it it's also about doing what it

00:03:11,709 --> 00:03:16,900
says inside of it some people have had

00:03:13,450 --> 00:03:20,019
issues with that the code should be

00:03:16,900 --> 00:03:22,419
quality code remember that when you're

00:03:20,019 --> 00:03:25,419
submitting a full request to open source

00:03:22,419 --> 00:03:26,709
you're not writing code for you you're

00:03:25,419 --> 00:03:28,810
writing code that somebody else is gonna

00:03:26,709 --> 00:03:30,100
have to maintain so make sure that's

00:03:28,810 --> 00:03:31,959
code that you're proud of code that you

00:03:30,100 --> 00:03:34,260
code that you all think is acceptable

00:03:31,959 --> 00:03:37,060
for somebody else to maintain for you

00:03:34,260 --> 00:03:39,579
if you don't have tests add some tests

00:03:37,060 --> 00:03:42,249
if your change doesn't require tests

00:03:39,579 --> 00:03:44,620
more often than not it might not be a

00:03:42,249 --> 00:03:46,749
change worth submitting no get me wrong

00:03:44,620 --> 00:03:48,790
you can have a solid refactoring that

00:03:46,749 --> 00:03:50,799
legitimately improves the quality of the

00:03:48,790 --> 00:03:52,090
codebase and doesn't but doesn't have

00:03:50,799 --> 00:03:55,180
any visible change in behavior that's

00:03:52,090 --> 00:03:57,280
great and do submit those but in my

00:03:55,180 --> 00:03:59,469
experience we don't get very many poll

00:03:57,280 --> 00:04:02,409
requests like that from people outside

00:03:59,469 --> 00:04:04,120
of the core committer team usually when

00:04:02,409 --> 00:04:06,639
an outside person is submitting a pleura

00:04:04,120 --> 00:04:08,680
quest that doesn't require tests it's

00:04:06,639 --> 00:04:10,599
something like renaming a variable or

00:04:08,680 --> 00:04:13,060
something else that in rails we call a

00:04:10,599 --> 00:04:15,939
cosmetic patch and they're valuable to

00:04:13,060 --> 00:04:18,579
have but in open source we tend to value

00:04:15,939 --> 00:04:20,199
a git churn much more highly than you

00:04:18,579 --> 00:04:23,199
might an app code because we have to

00:04:20,199 --> 00:04:25,330
rely on git history a lot more so at

00:04:23,199 --> 00:04:29,169
least in rails we flat-out have a policy

00:04:25,330 --> 00:04:31,539
against rejecting cosmetic patches so I

00:04:29,169 --> 00:04:33,610
think that if your if your code doesn't

00:04:31,539 --> 00:04:34,720
have doesn't require tests it you should

00:04:33,610 --> 00:04:35,680
consider whether it's worth submitting

00:04:34,720 --> 00:04:38,770
in the first place and if it doesn't

00:04:35,680 --> 00:04:40,780
have tests make sure it has tests and

00:04:38,770 --> 00:04:43,419
finally if there's a style guide follow

00:04:40,780 --> 00:04:44,830
a style guide so here it is on one slide

00:04:43,419 --> 00:04:46,449
so you can take pictures and tweet them

00:04:44,830 --> 00:04:48,639
and make me sound smart like I know how

00:04:46,449 --> 00:04:50,320
to submit pull requests these are the

00:04:48,639 --> 00:04:51,159
these things are the bear mail if you

00:04:50,320 --> 00:04:53,470
haven't done these things before

00:04:51,159 --> 00:04:54,490
submitting to do them end of story so

00:04:53,470 --> 00:04:57,220
now let's talk about the things that are

00:04:54,490 --> 00:04:59,349
a little bit more subtle I think a

00:04:57,220 --> 00:05:01,300
common misconception people have about

00:04:59,349 --> 00:05:04,449
pull requests and open source in general

00:05:01,300 --> 00:05:06,099
is that they're about code but they're

00:05:04,449 --> 00:05:08,530
really not people think that the code

00:05:06,099 --> 00:05:10,180
should speak for itself but the code

00:05:08,530 --> 00:05:12,280
should stand on its own that it should

00:05:10,180 --> 00:05:14,530
be that should present itself based on

00:05:12,280 --> 00:05:16,180
its own merits but it's not it's just

00:05:14,530 --> 00:05:18,969
not true and it's not what up low

00:05:16,180 --> 00:05:22,419
request is about a polar quest is a

00:05:18,969 --> 00:05:24,759
sales pitch your job is to convince the

00:05:22,419 --> 00:05:27,820
project maintainer is why your path

00:05:24,759 --> 00:05:30,479
should be merged and there's a few

00:05:27,820 --> 00:05:30,479
aspects that

00:05:31,490 --> 00:05:36,620
the first thing that you want to do is

00:05:33,650 --> 00:05:37,940
to make it easy to review first and

00:05:36,620 --> 00:05:40,099
foremost this means keeping the size

00:05:37,940 --> 00:05:44,810
reasonable nobody wants to review app

00:05:40,099 --> 00:05:47,599
lest that looks like this this amount of

00:05:44,810 --> 00:05:49,550
code is gonna take days to review it's

00:05:47,599 --> 00:05:51,530
more likely just end up sitting at the

00:05:49,550 --> 00:05:52,880
back of the backlog and only get looked

00:05:51,530 --> 00:05:54,889
at when there's nothing else to review

00:05:52,880 --> 00:05:58,910
and trust me there's always something

00:05:54,889 --> 00:06:01,310
else to review actually my original my

00:05:58,910 --> 00:06:02,569
my first full request major pull request

00:06:01,310 --> 00:06:04,430
to rails I'm most well known for

00:06:02,569 --> 00:06:07,490
originally had over a thousand lines of

00:06:04,430 --> 00:06:09,349
code changed I made this mistake but if

00:06:07,490 --> 00:06:10,610
your pull request is too large you can

00:06:09,349 --> 00:06:13,789
do what I did in that circumstance

00:06:10,610 --> 00:06:15,620
consider breaking it apart find little

00:06:13,789 --> 00:06:16,820
bits and pieces that you can break off

00:06:15,620 --> 00:06:19,669
from the main pull request and submit

00:06:16,820 --> 00:06:21,740
them independently if you've given the

00:06:19,669 --> 00:06:23,380
maintainer x' some context about the

00:06:21,740 --> 00:06:26,210
larger change that you're trying to make

00:06:23,380 --> 00:06:28,400
submitting a pull request that might not

00:06:26,210 --> 00:06:30,470
necessarily make sense in a vacuum but

00:06:28,400 --> 00:06:32,120
saying this is a refactoring in service

00:06:30,470 --> 00:06:36,650
of this X thing that you know that I'm

00:06:32,120 --> 00:06:38,360
trying to do is often enough and your

00:06:36,650 --> 00:06:40,909
change is large enough that this is even

00:06:38,360 --> 00:06:43,430
remotely consideration please please

00:06:40,909 --> 00:06:46,099
please talk to the maintainer x' of the

00:06:43,430 --> 00:06:48,130
project before starting make sure it's a

00:06:46,099 --> 00:06:50,449
change that they want to have made I

00:06:48,130 --> 00:06:52,580
hate seeing somebody who's put a ton of

00:06:50,449 --> 00:06:54,259
work into a huge pull request for a

00:06:52,580 --> 00:06:55,789
feature that never was gonna get

00:06:54,259 --> 00:06:57,409
accepted in the first place and I could

00:06:55,789 --> 00:07:01,250
have told them that before they started

00:06:57,409 --> 00:07:02,539
working on it and keep them in the loop

00:07:01,250 --> 00:07:06,740
about the context of what you're trying

00:07:02,539 --> 00:07:07,940
to accomplish another way that you can

00:07:06,740 --> 00:07:10,520
make your blower quest easier to review

00:07:07,940 --> 00:07:12,590
is to make sure that all of the context

00:07:10,520 --> 00:07:15,650
required to understand the problem is

00:07:12,590 --> 00:07:18,500
right there include links to any

00:07:15,650 --> 00:07:21,919
relevant sources that you have if it's a

00:07:18,500 --> 00:07:23,780
bug fix link to the original issue if

00:07:21,919 --> 00:07:26,270
you're adding support for some Postgres

00:07:23,780 --> 00:07:27,710
feature to an orm link to the section in

00:07:26,270 --> 00:07:30,139
the Postgres Doc's that describe the

00:07:27,710 --> 00:07:32,539
feature if you're making sure a web

00:07:30,139 --> 00:07:35,780
framework conforms to some RFC link to

00:07:32,539 --> 00:07:37,849
the relevant section of in the RFC it's

00:07:35,780 --> 00:07:39,409
also worth linking to any prior commits

00:07:37,849 --> 00:07:41,479
in the related code that are relevant to

00:07:39,409 --> 00:07:43,490
what you're doing if you're writing a

00:07:41,479 --> 00:07:44,900
bug fix including a link to the commit

00:07:43,490 --> 00:07:48,290
that originally introduced the

00:07:44,900 --> 00:07:50,240
is almost always worth having don't

00:07:48,290 --> 00:07:51,860
assume that the maintainer already knows

00:07:50,240 --> 00:07:53,780
about the feature that you're trying to

00:07:51,860 --> 00:07:57,740
add or the problem that you're trying to

00:07:53,780 --> 00:07:59,480
fix this takes five extra minutes but it

00:07:57,740 --> 00:08:05,810
makes a world of difference to the

00:07:59,480 --> 00:08:06,950
reviewer and just like the coach and you

00:08:05,810 --> 00:08:09,020
shouldn't assume that code speaks for

00:08:06,950 --> 00:08:11,210
itself you also shouldn't assume that

00:08:09,020 --> 00:08:13,550
the problem speaks for itself and I say

00:08:11,210 --> 00:08:15,440
problem it's sort of a vague and wavy

00:08:13,550 --> 00:08:17,750
term I'm using this as the umbrella to

00:08:15,440 --> 00:08:22,490
refer to both bug fixes and new features

00:08:17,750 --> 00:08:24,970
the lack of a feature is a problem now

00:08:22,490 --> 00:08:27,530
sometimes problems are very clear-cut

00:08:24,970 --> 00:08:28,640
for example if I have a library for

00:08:27,530 --> 00:08:29,780
adding padding to the beginning of

00:08:28,640 --> 00:08:31,250
strings because that's a thing that

00:08:29,780 --> 00:08:33,830
should totally get packaged as a library

00:08:31,250 --> 00:08:35,210
and that library seg faulted when a

00:08:33,830 --> 00:08:37,370
string isn't unicode or something then

00:08:35,210 --> 00:08:40,420
yeah that's a pretty clear-cut bug my

00:08:37,370 --> 00:08:43,520
topical jokes are not topical anymore

00:08:40,420 --> 00:08:46,010
but oftentimes the the line between bug

00:08:43,520 --> 00:08:48,860
and de-facto feature can get really

00:08:46,010 --> 00:08:51,050
really blurry or sometimes the change

00:08:48,860 --> 00:08:55,700
just introduces too much complexity to

00:08:51,050 --> 00:08:57,680
justify the cost there's there's a lot

00:08:55,700 --> 00:08:58,820
of things that we have to consider when

00:08:57,680 --> 00:09:01,880
we're making a change or when we're

00:08:58,820 --> 00:09:04,520
accepting a change how many of our users

00:09:01,880 --> 00:09:07,250
are affected or of course going to be

00:09:04,520 --> 00:09:08,900
more likely to accept a fix to a bug

00:09:07,250 --> 00:09:10,970
that affects 95 percent of our user base

00:09:08,900 --> 00:09:17,120
as opposed to one that affects five

00:09:10,970 --> 00:09:18,320
percent how complex is the fix a lot of

00:09:17,120 --> 00:09:21,170
people think that open-source maintainer

00:09:18,320 --> 00:09:23,600
czar somehow magic and that we have like

00:09:21,170 --> 00:09:26,210
infinite time or energy or that our code

00:09:23,600 --> 00:09:29,660
base doesn't have follow the same laws

00:09:26,210 --> 00:09:31,400
as application code but it does adding

00:09:29,660 --> 00:09:32,870
complexity means that it's more likely

00:09:31,400 --> 00:09:35,660
that additional bugs will be introduced

00:09:32,870 --> 00:09:37,300
in the future adding complexity makes

00:09:35,660 --> 00:09:39,500
the code base harder to understand

00:09:37,300 --> 00:09:42,110
adding complexity makes it harder to

00:09:39,500 --> 00:09:43,970
onboard new contributors all the same

00:09:42,110 --> 00:09:45,560
considerations that you would have to

00:09:43,970 --> 00:09:49,090
add and complexity to your own code

00:09:45,560 --> 00:09:49,090
bases still apply and open source

00:09:50,870 --> 00:09:56,510
is the fix a change in behavior in the

00:09:53,089 --> 00:09:58,790
public API stability is a big deal to

00:09:56,510 --> 00:10:01,310
open-source maintainer x' just because a

00:09:58,790 --> 00:10:04,190
bug exists it doesn't always mean it

00:10:01,310 --> 00:10:05,960
should be fixed in many cases bugs end

00:10:04,190 --> 00:10:09,170
up over time just turning into de facto

00:10:05,960 --> 00:10:11,360
features here's an example now I know

00:10:09,170 --> 00:10:13,150
not everybody here uses rails so let me

00:10:11,360 --> 00:10:15,410
walk you through this as best I can

00:10:13,150 --> 00:10:17,660
active record is our library for

00:10:15,410 --> 00:10:19,670
database persistence and when you want

00:10:17,660 --> 00:10:21,050
to have a class that maps one to one

00:10:19,670 --> 00:10:22,940
with a database table you inherit from

00:10:21,050 --> 00:10:25,130
the class active record base that's what

00:10:22,940 --> 00:10:28,370
the less than sign means in Ruby if you

00:10:25,130 --> 00:10:29,960
don't do Ruby we have some class macros

00:10:28,370 --> 00:10:32,810
that are describing the relationships

00:10:29,960 --> 00:10:35,000
between tables so on the second line

00:10:32,810 --> 00:10:36,830
we're saying that a user has many posts

00:10:35,000 --> 00:10:39,440
so posts will have a foreign key that

00:10:36,830 --> 00:10:40,850
points to the users table and then the

00:10:39,440 --> 00:10:42,740
second argument is a lambda saying that

00:10:40,850 --> 00:10:46,370
we want to order the results there by

00:10:42,740 --> 00:10:48,410
the title of the post down below we see

00:10:46,370 --> 00:10:49,910
that post has many comments it's the

00:10:48,410 --> 00:10:52,700
same thing and we're ordering that by

00:10:49,910 --> 00:10:54,080
the text of the comments and then that

00:10:52,700 --> 00:10:56,120
line in the second line in the user

00:10:54,080 --> 00:10:58,730
class has many comments three posts is

00:10:56,120 --> 00:11:01,700
saying that we want to be able to from a

00:10:58,730 --> 00:11:04,730
user get all of the comments left on all

00:11:01,700 --> 00:11:05,930
of the posts written by that user what's

00:11:04,730 --> 00:11:08,930
important here is that both of these

00:11:05,930 --> 00:11:12,800
other associations have order have

00:11:08,930 --> 00:11:15,320
orders on them now what you would expect

00:11:12,800 --> 00:11:17,660
to have happen here is that you order by

00:11:15,320 --> 00:11:19,100
the post and then after you've done that

00:11:17,660 --> 00:11:20,360
you order by the comment so they'll be

00:11:19,100 --> 00:11:23,240
grouped by the post and then they'll be

00:11:20,360 --> 00:11:25,430
grouped by the comment what we end up

00:11:23,240 --> 00:11:26,750
doing is the opposite and from looking

00:11:25,430 --> 00:11:28,520
at the commits it just appears to be a

00:11:26,750 --> 00:11:30,560
historical accident we applied the

00:11:28,520 --> 00:11:33,980
comments ordering first and then the

00:11:30,560 --> 00:11:35,930
posts ordering so the the posts title

00:11:33,980 --> 00:11:38,450
will end up overriding the comment body

00:11:35,930 --> 00:11:40,550
in in the final order it gets higher

00:11:38,450 --> 00:11:42,680
precedence which is just it's really

00:11:40,550 --> 00:11:44,930
weird and it's confusing and I can't

00:11:42,680 --> 00:11:47,300
change it like I hate having this

00:11:44,930 --> 00:11:48,560
interaction with people where like this

00:11:47,300 --> 00:11:51,740
person was right

00:11:48,560 --> 00:11:54,140
their change was fine and the resulting

00:11:51,740 --> 00:11:55,700
behavior would be better but that's not

00:11:54,140 --> 00:11:58,220
the only consideration that we have to

00:11:55,700 --> 00:11:59,810
make I'm not gonna make a breaking

00:11:58,220 --> 00:12:02,400
change to behavior that's been that way

00:11:59,810 --> 00:12:04,500
for almost a decade at this point

00:12:02,400 --> 00:12:06,120
especially when I know a lot of code is

00:12:04,500 --> 00:12:13,050
relying on including code bases that I

00:12:06,120 --> 00:12:14,310
have to work on so if the fix is a

00:12:13,050 --> 00:12:15,660
change in behavior because we will we

00:12:14,310 --> 00:12:17,010
will sometimes accept breakthrough

00:12:15,660 --> 00:12:19,589
changes it's always it's always a

00:12:17,010 --> 00:12:21,750
trade-off it's a consideration if the

00:12:19,589 --> 00:12:24,000
change does constitute a change in

00:12:21,750 --> 00:12:25,529
behavior at a public API though what

00:12:24,000 --> 00:12:29,400
happens when somebody is relying on the

00:12:25,529 --> 00:12:31,230
old code is their code gonna blow up or

00:12:29,400 --> 00:12:33,120
is it going to just start silently doing

00:12:31,230 --> 00:12:35,779
the wrong thing and introducing subtle

00:12:33,120 --> 00:12:38,730
bugs into everybody whose code bases

00:12:35,779 --> 00:12:41,940
will always hover always more likely to

00:12:38,730 --> 00:12:44,160
accept something that is the former are

00:12:41,940 --> 00:12:47,190
we able to detect whether they were

00:12:44,160 --> 00:12:49,020
relying on the old behavior and if so

00:12:47,190 --> 00:12:52,650
can we introduce a deprecation warning

00:12:49,020 --> 00:12:55,880
if that's the case then it's always more

00:12:52,650 --> 00:12:59,400
likely that the change will be accepted

00:12:55,880 --> 00:13:01,080
is there a workaround how easy is it to

00:12:59,400 --> 00:13:03,360
work around the problem if we don't

00:13:01,080 --> 00:13:06,000
introduce the fix it's at the end of the

00:13:03,360 --> 00:13:08,730
day if a bug only impacts a handful of

00:13:06,000 --> 00:13:10,620
people and there's a workaround and the

00:13:08,730 --> 00:13:12,510
workaround isn't easy and the change

00:13:10,620 --> 00:13:15,540
introduces a massive amount of

00:13:12,510 --> 00:13:21,480
complexity to code base it might just be

00:13:15,540 --> 00:13:24,240
better not to merge it now with every

00:13:21,480 --> 00:13:25,440
bug fix every feature there's always a

00:13:24,240 --> 00:13:28,080
million different ways you can go about

00:13:25,440 --> 00:13:29,310
approaching the problem and when you

00:13:28,080 --> 00:13:31,110
submit a pull request you've chosen this

00:13:29,310 --> 00:13:34,380
one which presumably you think is the

00:13:31,110 --> 00:13:36,600
best tell us why tell us what the

00:13:34,380 --> 00:13:37,830
alternatives were give us the context

00:13:36,600 --> 00:13:39,810
that you've considered help us to

00:13:37,830 --> 00:13:42,750
understand why the code is written the

00:13:39,810 --> 00:13:44,550
way that it is help us make sure that we

00:13:42,750 --> 00:13:45,839
know that we're not cutting off our

00:13:44,550 --> 00:13:47,279
ability to go down another path later

00:13:45,839 --> 00:13:52,500
and that this is the one that we want to

00:13:47,279 --> 00:13:53,550
go down to solve this problem now

00:13:52,500 --> 00:13:55,140
there's been this has actually been

00:13:53,550 --> 00:13:57,930
coming up a lot more in Twitter and

00:13:55,140 --> 00:13:59,820
conversations recently this idea of open

00:13:57,930 --> 00:14:02,220
source entitlement so I'd like to just

00:13:59,820 --> 00:14:03,720
make sure that this is clear nobody is

00:14:02,220 --> 00:14:07,200
entitled to having their pull request

00:14:03,720 --> 00:14:08,459
emerged a lot of people hate this

00:14:07,200 --> 00:14:10,080
because they're like well I just did all

00:14:08,459 --> 00:14:11,459
this work and I gave you this free code

00:14:10,080 --> 00:14:15,240
and you should take it because I did

00:14:11,459 --> 00:14:16,060
this work for you and in open source we

00:14:15,240 --> 00:14:17,950
sometimes talk about

00:14:16,060 --> 00:14:21,610
something whether something is free as

00:14:17,950 --> 00:14:24,280
in beer or freedom speech applause is

00:14:21,610 --> 00:14:31,570
kind of neither Clark West is free isn't

00:14:24,280 --> 00:14:33,220
puppy right so ultimately your change is

00:14:31,570 --> 00:14:35,710
something that the project is gonna have

00:14:33,220 --> 00:14:38,500
to maintain for the foreseeable future

00:14:35,710 --> 00:14:40,780
so here's an interaction that happened a

00:14:38,500 --> 00:14:43,600
couple months ago persons submit to

00:14:40,780 --> 00:14:45,610
change to Rails and it has no testers so

00:14:43,600 --> 00:14:47,740
a member of our issues team is the first

00:14:45,610 --> 00:14:49,510
to respond and he's asking a Haitian we

00:14:47,740 --> 00:14:51,400
had a regression test cos we just have a

00:14:49,510 --> 00:14:54,340
stray of policy we don't accept changes

00:14:51,400 --> 00:14:55,660
to behavior without tests apparently

00:14:54,340 --> 00:14:57,970
this was some code that didn't already

00:14:55,660 --> 00:15:00,070
have tests around it so this person said

00:14:57,970 --> 00:15:02,260
that they didn't feel motivated to edit

00:15:00,070 --> 00:15:04,150
and then Eileen who I think might be

00:15:02,260 --> 00:15:07,030
here who is the person who was assigned

00:15:04,150 --> 00:15:08,410
to it comes back with again our estrella

00:15:07,030 --> 00:15:09,970
policy regardless of whether or not

00:15:08,410 --> 00:15:12,910
there were tests there before we need a

00:15:09,970 --> 00:15:15,520
test in order to accept this and then we

00:15:12,910 --> 00:15:18,430
get sorry I'm just not interested in

00:15:15,520 --> 00:15:19,900
catching up with your test debt okay

00:15:18,430 --> 00:15:22,690
well sorry maybe I'm just not interested

00:15:19,900 --> 00:15:24,610
in accepting your patch in this case

00:15:22,690 --> 00:15:26,200
they did end up adding a test and they

00:15:24,610 --> 00:15:28,030
ended up editing that comment to be less

00:15:26,200 --> 00:15:30,460
nasty and everything was fine and the

00:15:28,030 --> 00:15:32,170
change was eventually merged but it's

00:15:30,460 --> 00:15:33,690
important to keep in mind when you

00:15:32,170 --> 00:15:36,940
submit a pull request to a project

00:15:33,690 --> 00:15:39,220
here's what your action is saying hello

00:15:36,940 --> 00:15:40,330
here's some code I wrote would you like

00:15:39,220 --> 00:15:44,350
to maintain that until the end of time

00:15:40,330 --> 00:15:47,500
for me because the thing is most patch

00:15:44,350 --> 00:15:50,500
authors aren't gonna stick around we

00:15:47,500 --> 00:15:53,650
have had more than 24-hundred people can

00:15:50,500 --> 00:15:55,420
contribute to Ruby on Rails more than

00:15:53,650 --> 00:15:57,760
half of those have had three or fewer

00:15:55,420 --> 00:15:59,410
commits I'm sure that percentage is even

00:15:57,760 --> 00:16:00,700
larger if I exclude documentation

00:15:59,410 --> 00:16:04,630
changes but that's not a number that we

00:16:00,700 --> 00:16:06,070
track at the end of the day the person

00:16:04,630 --> 00:16:08,410
who will maintain the code that you

00:16:06,070 --> 00:16:11,320
submit isn't going to be you it's the

00:16:08,410 --> 00:16:13,120
project owners and even if you fully

00:16:11,320 --> 00:16:15,430
intend to help maintain the code that

00:16:13,120 --> 00:16:17,380
you wrote that's just not something that

00:16:15,430 --> 00:16:21,070
we're going to assume based on our own

00:16:17,380 --> 00:16:23,230
past experiences and that means that

00:16:21,070 --> 00:16:24,880
it's very important for us to be picky

00:16:23,230 --> 00:16:27,460
about what patches are or are not

00:16:24,880 --> 00:16:28,990
accepted that's why we have to have very

00:16:27,460 --> 00:16:31,330
strict policies around

00:16:28,990 --> 00:16:33,040
Changez without adding tests and most

00:16:31,330 --> 00:16:35,140
importantly we have to be very picky

00:16:33,040 --> 00:16:38,860
when it when somebody is adding a new

00:16:35,140 --> 00:16:40,990
feature because an open source features

00:16:38,860 --> 00:16:43,330
are really easy to add but they're

00:16:40,990 --> 00:16:47,800
almost impossible to change or to remove

00:16:43,330 --> 00:16:51,390
later and since most often will only see

00:16:47,800 --> 00:16:53,860
one or two pull requests from a person I

00:16:51,390 --> 00:16:55,990
usually prefer to see a really good

00:16:53,860 --> 00:17:02,050
commit message that contains a lot of

00:16:55,990 --> 00:17:03,430
context now the commit message is the

00:17:02,050 --> 00:17:06,270
most convenient place to brief someone

00:17:03,430 --> 00:17:08,199
on your change including the reviewer I

00:17:06,270 --> 00:17:10,870
recently had a pleura quest where this

00:17:08,199 --> 00:17:12,550
was the entire commit message merges

00:17:10,870 --> 00:17:15,010
parent association joins for through

00:17:12,550 --> 00:17:16,990
associations into a scope previously

00:17:15,010 --> 00:17:18,819
joins an association scope or taken into

00:17:16,990 --> 00:17:21,730
account only for root associations with

00:17:18,819 --> 00:17:23,199
netskope now this commitment mostly

00:17:21,730 --> 00:17:25,809
touch code that I wrote or was familiar

00:17:23,199 --> 00:17:28,870
with and I still was not entirely sure

00:17:25,809 --> 00:17:31,270
what that meant and the code didn't

00:17:28,870 --> 00:17:34,210
really off help me understand it either

00:17:31,270 --> 00:17:35,320
test would have helped too but um with

00:17:34,210 --> 00:17:37,720
the commit message what I really want to

00:17:35,320 --> 00:17:41,320
see here how was the user seeing this

00:17:37,720 --> 00:17:44,670
bug why did the bug occur what are they

00:17:41,320 --> 00:17:47,140
seeing now why does this fix the bug

00:17:44,670 --> 00:17:50,350
they may be wondering why I care so much

00:17:47,140 --> 00:17:51,940
about commit messages well for me it's

00:17:50,350 --> 00:17:55,570
it's the main way I communicate with

00:17:51,940 --> 00:17:57,670
most people whenever I'm looking at some

00:17:55,570 --> 00:17:59,830
code and don't quite get why something

00:17:57,670 --> 00:18:02,350
is that way if I need a question

00:17:59,830 --> 00:18:04,059
answered the first thing I'll do is I'm

00:18:02,350 --> 00:18:06,580
gonna get blame and I'm gonna read the

00:18:04,059 --> 00:18:08,920
commit message also I'd like to nominate

00:18:06,580 --> 00:18:11,380
get blame for the worst name tool

00:18:08,920 --> 00:18:12,760
commonly used in development like this

00:18:11,380 --> 00:18:13,660
is a alias that I have in my cat

00:18:12,760 --> 00:18:18,130
terminal and I highly recommend

00:18:13,660 --> 00:18:19,390
everybody else do the same but the

00:18:18,130 --> 00:18:21,160
important thing to know is that you

00:18:19,390 --> 00:18:24,130
should document the cut all the context

00:18:21,160 --> 00:18:26,790
you can in your commit message after all

00:18:24,130 --> 00:18:29,080
this isn't for you it's brother people

00:18:26,790 --> 00:18:31,450
although other people does include you

00:18:29,080 --> 00:18:33,070
next week I swear if I had a nickel for

00:18:31,450 --> 00:18:35,080
every time I'm going through some code

00:18:33,070 --> 00:18:37,000
I'm like oh my god this is terrible why

00:18:35,080 --> 00:18:38,830
would anybody ever write it this way get

00:18:37,000 --> 00:18:41,940
flame oh my god but we're thinking and

00:18:38,830 --> 00:18:44,350
it's me it's always me

00:18:41,940 --> 00:18:50,680
but at least sometimes I apologize to my

00:18:44,350 --> 00:18:52,300
future self in the commit message now in

00:18:50,680 --> 00:18:56,740
the commit message I'm entering some

00:18:52,300 --> 00:18:58,240
water in the commit message uh I don't

00:18:56,740 --> 00:19:00,580
really care much about the what or the

00:18:58,240 --> 00:19:02,080
how because the codes right there I can

00:19:00,580 --> 00:19:04,900
see what you changed I can see how you

00:19:02,080 --> 00:19:08,430
changed it from the code what I want to

00:19:04,900 --> 00:19:11,830
know is why why did this change get made

00:19:08,430 --> 00:19:14,560
why did you do it this way why didn't

00:19:11,830 --> 00:19:15,880
you do it another way literally anything

00:19:14,560 --> 00:19:18,340
else that went through your head that

00:19:15,880 --> 00:19:21,040
might be even remotely useful please

00:19:18,340 --> 00:19:23,590
that's where I want to see it now a lot

00:19:21,040 --> 00:19:27,430
of the why some people tend to put this

00:19:23,590 --> 00:19:28,780
in code comments I I usually prefer to

00:19:27,430 --> 00:19:31,810
avoid those and keep them in the commit

00:19:28,780 --> 00:19:34,020
message instead cuz code comments end up

00:19:31,810 --> 00:19:36,670
getting out of sync with code over time

00:19:34,020 --> 00:19:39,280
people make changes to the code they

00:19:36,670 --> 00:19:41,830
don't update the comments a commit

00:19:39,280 --> 00:19:44,980
message has this beautiful property of

00:19:41,830 --> 00:19:48,580
being a comment on a line of code at a

00:19:44,980 --> 00:19:50,320
very specific point in time and assuming

00:19:48,580 --> 00:19:51,880
your commit message wasn't just lying to

00:19:50,320 --> 00:19:53,590
begin with assuming it was ever correct

00:19:51,880 --> 00:19:57,400
your commit message will note will never

00:19:53,590 --> 00:19:59,650
become incorrect over time and as those

00:19:57,400 --> 00:20:00,880
changes get made to a code base the kind

00:19:59,650 --> 00:20:03,190
that would lead to a comment getting

00:20:00,880 --> 00:20:05,560
out-of-date if all of those commit

00:20:03,190 --> 00:20:07,330
messages contain the why by going back

00:20:05,560 --> 00:20:10,810
two or three commits on a line of code I

00:20:07,330 --> 00:20:13,300
can construct a very vibrant story about

00:20:10,810 --> 00:20:14,950
how we got into the situation that that

00:20:13,300 --> 00:20:18,910
code is now in for whatever problem I'm

00:20:14,950 --> 00:20:20,710
trying to solve now I don't have a hard

00:20:18,910 --> 00:20:23,110
rule for how long a commitments it

00:20:20,710 --> 00:20:24,430
should be but generally speaking if

00:20:23,110 --> 00:20:26,140
you're ever asking yourself you know

00:20:24,430 --> 00:20:27,910
this is a pretty long commit message I'm

00:20:26,140 --> 00:20:30,700
not sure if I should if it's too long or

00:20:27,910 --> 00:20:32,680
not the answer is no it's never too long

00:20:30,700 --> 00:20:35,140
here's an example of one of my commits

00:20:32,680 --> 00:20:36,700
from a little over a year ago I doubt

00:20:35,140 --> 00:20:38,440
anybody can read this and you don't need

00:20:36,700 --> 00:20:43,510
to what's important is that this is a

00:20:38,440 --> 00:20:44,650
nine paragraphs it has code examples so

00:20:43,510 --> 00:20:49,480
you'd expect this is probably a huge

00:20:44,650 --> 00:20:51,290
change right if by huge you mean one

00:20:49,480 --> 00:20:54,110
line then yes

00:20:51,290 --> 00:20:57,100
this is my record four lines of commit

00:20:54,110 --> 00:21:00,320
message two lines of code change ratio

00:20:57,100 --> 00:21:01,850
but this change had a huge impact and it

00:21:00,320 --> 00:21:04,820
turns out that the amount of context

00:21:01,850 --> 00:21:09,320
available isn't necessarily related to

00:21:04,820 --> 00:21:10,700
the number of lines of code changed and

00:21:09,320 --> 00:21:15,380
while we're on the subject of committing

00:21:10,700 --> 00:21:17,920
habits here's a couple of more tips keep

00:21:15,380 --> 00:21:21,050
your commit separate during code review

00:21:17,920 --> 00:21:23,870
now we usually at least in rails will

00:21:21,050 --> 00:21:26,420
eventually want the commits squash down

00:21:23,870 --> 00:21:27,890
to a single commit before we merge but

00:21:26,420 --> 00:21:30,440
during code review it's best to keep

00:21:27,890 --> 00:21:32,840
them separate that way reviewers can

00:21:30,440 --> 00:21:34,910
easily see what's changed and github

00:21:32,840 --> 00:21:36,920
nowadays also will when you push a new

00:21:34,910 --> 00:21:38,600
commit will inform the reviewers that

00:21:36,920 --> 00:21:40,040
you've pushed a new commit whereas if

00:21:38,600 --> 00:21:43,730
you force bush we don't get that

00:21:40,040 --> 00:21:44,840
notification now some projects will be

00:21:43,730 --> 00:21:46,760
fine with your keeping your commit

00:21:44,840 --> 00:21:48,920
separate forever and they'll end up just

00:21:46,760 --> 00:21:50,450
pushing the big green button rails will

00:21:48,920 --> 00:21:52,070
usually ask you to squash and rebase

00:21:50,450 --> 00:21:53,540
them before you merge it that'll differ

00:21:52,070 --> 00:21:55,040
from project to project but pretty

00:21:53,540 --> 00:21:56,660
universally everybody's gonna want you

00:21:55,040 --> 00:22:00,320
to keep them separate during code review

00:21:56,660 --> 00:22:03,920
it makes reviewing much easier if you

00:22:00,320 --> 00:22:05,530
are squashing your commits um amend your

00:22:03,920 --> 00:22:08,060
commit message when you're squashing it

00:22:05,530 --> 00:22:10,130
if you have multiple commits that are

00:22:08,060 --> 00:22:11,990
being squashed this probably means

00:22:10,130 --> 00:22:15,050
there's new context that came up during

00:22:11,990 --> 00:22:16,970
code review document it when you squash

00:22:15,050 --> 00:22:19,910
it that's where future people are gonna

00:22:16,970 --> 00:22:21,770
be looking for it now some people will

00:22:19,910 --> 00:22:23,930
actually just straight up and disagree

00:22:21,770 --> 00:22:25,040
with me on this and they say well you

00:22:23,930 --> 00:22:26,660
don't need to put the discussion from

00:22:25,040 --> 00:22:28,730
the pull request in your commit message

00:22:26,660 --> 00:22:30,410
because it's right there in github on

00:22:28,730 --> 00:22:33,320
the pull request so while I put it there

00:22:30,410 --> 00:22:35,330
twice but that makes some assumptions

00:22:33,320 --> 00:22:37,160
I'm not super comfortable with like that

00:22:35,330 --> 00:22:38,870
github will be around forever or that

00:22:37,160 --> 00:22:41,930
will be using github for that project

00:22:38,870 --> 00:22:43,430
forever and then this is more of a thing

00:22:41,930 --> 00:22:45,560
for me that it doesn't affect most

00:22:43,430 --> 00:22:48,520
people but I work from planes a lot and

00:22:45,560 --> 00:22:51,110
I don't have access to github on planes

00:22:48,520 --> 00:22:53,390
so I prefer that stored somewhere that

00:22:51,110 --> 00:22:55,160
multiple people have local copies that I

00:22:53,390 --> 00:22:58,280
know it's permanent and then I can

00:22:55,160 --> 00:23:01,000
access it on a plane hey random aside

00:22:58,280 --> 00:23:01,000
was anybody here at railsconf

00:23:01,260 --> 00:23:09,720
all right you four will get the joke the

00:23:03,330 --> 00:23:11,820
rest don't worry it's not that funny so

00:23:09,720 --> 00:23:13,860
the easiest way to get us to start

00:23:11,820 --> 00:23:16,350
assuming that you'll be around to help

00:23:13,860 --> 00:23:18,600
maintain your code is to come back for

00:23:16,350 --> 00:23:19,770
more than one commit now drive I can

00:23:18,600 --> 00:23:21,810
make you mean two things here

00:23:19,770 --> 00:23:22,980
one for one it can just mean you submit

00:23:21,810 --> 00:23:25,590
one commit to a project and then never

00:23:22,980 --> 00:23:27,270
contribute again it can also mean and

00:23:25,590 --> 00:23:29,100
this is the worst one when you submit a

00:23:27,270 --> 00:23:30,270
pull request to the project I like hey

00:23:29,100 --> 00:23:33,750
this is great can you make this one

00:23:30,270 --> 00:23:36,290
change so that we can merge it and then

00:23:33,750 --> 00:23:38,340
crickets and they never come back and

00:23:36,290 --> 00:23:39,360
that just sits there and it's like do it

00:23:38,340 --> 00:23:44,130
close it or they were gonna eventually

00:23:39,360 --> 00:23:47,100
gonna come back outside this theory

00:23:44,130 --> 00:23:49,530
about maintenance this is just based on

00:23:47,100 --> 00:23:52,050
my personal experience I've started to

00:23:49,530 --> 00:23:54,990
notice that there's a huge increase in

00:23:52,050 --> 00:23:57,030
the productivity that a person has when

00:23:54,990 --> 00:24:01,440
contributing to a project after their

00:23:57,030 --> 00:24:03,660
third pull request what I found is more

00:24:01,440 --> 00:24:05,130
often than not if I'm reviewing

00:24:03,660 --> 00:24:07,130
somebody's first full request or their

00:24:05,130 --> 00:24:09,540
second floor request

00:24:07,130 --> 00:24:12,360
sometimes it can end up taking more work

00:24:09,540 --> 00:24:14,850
to review the pull request and work with

00:24:12,360 --> 00:24:17,550
the submitter to get it into a state

00:24:14,850 --> 00:24:19,320
where it can be merged that can often

00:24:17,550 --> 00:24:20,640
take more time than it would have just

00:24:19,320 --> 00:24:25,770
for somebody on the team to have gone

00:24:20,640 --> 00:24:27,540
and fix it themselves now this isn't a

00:24:25,770 --> 00:24:28,770
bad thing I'm not saying like oh well

00:24:27,540 --> 00:24:29,970
don't submit things because it might

00:24:28,770 --> 00:24:31,080
have been faster if we just did it

00:24:29,970 --> 00:24:32,850
ourselves that's not what I'm saying at

00:24:31,080 --> 00:24:35,820
all but there's a number of reasons I

00:24:32,850 --> 00:24:37,500
think this is the case it takes some

00:24:35,820 --> 00:24:38,240
time to become familiar with the

00:24:37,500 --> 00:24:40,560
codebase

00:24:38,240 --> 00:24:42,630
every codebase is gonna have different

00:24:40,560 --> 00:24:44,760
conventions different styles different

00:24:42,630 --> 00:24:46,260
structures you have to learn where all

00:24:44,760 --> 00:24:49,800
the objects are and what everything can

00:24:46,260 --> 00:24:51,270
do and this this all takes time it takes

00:24:49,800 --> 00:24:54,210
time to become familiar with the

00:24:51,270 --> 00:24:56,280
reviewer what the the process might be

00:24:54,210 --> 00:24:58,260
different from project to project their

00:24:56,280 --> 00:24:59,760
expectations might be different how they

00:24:58,260 --> 00:25:01,260
want things done might be different and

00:24:59,760 --> 00:25:03,390
there's always for the first pull

00:25:01,260 --> 00:25:04,830
request or tube just gonna be like I did

00:25:03,390 --> 00:25:06,000
this the way that most things do it and

00:25:04,830 --> 00:25:09,420
it's a little bit different and that's

00:25:06,000 --> 00:25:10,800
just something you learn over time it

00:25:09,420 --> 00:25:14,100
takes time for the reviewer to become

00:25:10,800 --> 00:25:15,080
familiar with you when people submit

00:25:14,100 --> 00:25:18,059
multiple pull requests

00:25:15,080 --> 00:25:20,399
over time this implicit trust starts to

00:25:18,059 --> 00:25:23,090
get built and we can start to be a

00:25:20,399 --> 00:25:25,620
little bit more lacks in the code review

00:25:23,090 --> 00:25:27,240
because I've seen the person before and

00:25:25,620 --> 00:25:28,379
I know that their code is usually a

00:25:27,240 --> 00:25:29,850
certain way I'm not saying that this

00:25:28,379 --> 00:25:32,220
means like oh I just don't review their

00:25:29,850 --> 00:25:34,470
code it can be a little bit less like

00:25:32,220 --> 00:25:35,759
scrutinizing every line because they've

00:25:34,470 --> 00:25:36,929
never done this before and they might

00:25:35,759 --> 00:25:38,850
just be missing something that they're

00:25:36,929 --> 00:25:42,210
supposed to know then plus it trust gets

00:25:38,850 --> 00:25:44,190
built over time this is entirely based

00:25:42,210 --> 00:25:46,169
on anecdotal evidence I don't have like

00:25:44,190 --> 00:25:48,210
any data of life this is how long it

00:25:46,169 --> 00:25:50,490
takes to review things before after

00:25:48,210 --> 00:25:53,429
however many this is just from personal

00:25:50,490 --> 00:25:54,809
experience and we still want your

00:25:53,429 --> 00:25:56,460
contributions I'm not trying to imply

00:25:54,809 --> 00:25:57,570
don't contribute even if you're even if

00:25:56,460 --> 00:26:00,659
you're only planning on doing it just

00:25:57,570 --> 00:26:02,039
once but if you can come back more for

00:26:00,659 --> 00:26:08,369
more than one you'll have a much bigger

00:26:02,039 --> 00:26:12,119
impact that way now the majority of

00:26:08,369 --> 00:26:13,049
people working in open-source are on

00:26:12,119 --> 00:26:16,590
nights and weekends

00:26:13,049 --> 00:26:18,299
it's volunteer time I'm not trying to

00:26:16,590 --> 00:26:19,619
say like oh and just be super grateful

00:26:18,299 --> 00:26:21,659
because they're volunteering time but

00:26:19,619 --> 00:26:24,600
it's more just it's limited it's a very

00:26:21,659 --> 00:26:26,460
limited resource and sometimes it's

00:26:24,600 --> 00:26:30,059
gonna take a while for things get fixed

00:26:26,460 --> 00:26:30,809
or to get reviewed repeatedly paying the

00:26:30,059 --> 00:26:33,299
maintainer

00:26:30,809 --> 00:26:35,249
we're leaving comments like plus one why

00:26:33,299 --> 00:26:37,710
isn't this merged is this still on

00:26:35,249 --> 00:26:41,119
somebody's radar they don't usually add

00:26:37,710 --> 00:26:43,110
much they just add a lot of noise

00:26:41,119 --> 00:26:44,940
depending on the size of the project

00:26:43,110 --> 00:26:49,379
this is what our github notifications

00:26:44,940 --> 00:26:51,240
look like and this is just one day we

00:26:49,379 --> 00:26:54,509
try to get through all of this every day

00:26:51,240 --> 00:26:57,960
and attack the backlog but it's hard

00:26:54,509 --> 00:26:59,789
sometimes and I can't speak for every

00:26:57,960 --> 00:27:01,499
project out there but for rails I can

00:26:59,789 --> 00:27:03,509
guarantee you if your pull request has a

00:27:01,499 --> 00:27:05,639
person assigned to it it is on our radar

00:27:03,509 --> 00:27:10,159
it just might not be at the top of their

00:27:05,639 --> 00:27:10,159
list and it takes time

00:27:10,279 --> 00:27:14,759
there's a lot of reasons that pull

00:27:12,509 --> 00:27:16,980
requests can sit around for quite some

00:27:14,759 --> 00:27:19,289
time days months in some cases even

00:27:16,980 --> 00:27:22,590
years although that's hopefully it's not

00:27:19,289 --> 00:27:24,240
a thing that happens often keep in mind

00:27:22,590 --> 00:27:25,860
that there's often a list of priorities

00:27:24,240 --> 00:27:27,600
that main maintainer x' have even if

00:27:25,860 --> 00:27:28,980
it's not written down anywhere there's

00:27:27,600 --> 00:27:30,720
always the problems that are more

00:27:28,980 --> 00:27:33,030
that need fixing sooner rather than

00:27:30,720 --> 00:27:36,299
later and we don't always have time to

00:27:33,030 --> 00:27:39,120
get it through at all if something's

00:27:36,299 --> 00:27:41,610
been open for a while there's a lot of

00:27:39,120 --> 00:27:43,350
reasons that could be the case there was

00:27:41,610 --> 00:27:45,540
a great response on the turbolinks

00:27:43,350 --> 00:27:47,580
repository recently where there was a a

00:27:45,540 --> 00:27:49,380
fairly old pull request and somebody

00:27:47,580 --> 00:27:51,720
commented like why is this not fully

00:27:49,380 --> 00:27:54,870
merged and one of the maintainer gave a

00:27:51,720 --> 00:27:56,460
really great explanation of many of the

00:27:54,870 --> 00:27:58,470
reasons that something can remain open

00:27:56,460 --> 00:28:02,340
and in particular why this one remained

00:27:58,470 --> 00:28:05,100
open and it basically boiled down to we

00:28:02,340 --> 00:28:06,990
have limited time merging something

00:28:05,100 --> 00:28:10,679
requires code review which takes time

00:28:06,990 --> 00:28:12,690
and we have limited time this change in

00:28:10,679 --> 00:28:15,150
particular was a public API change so it

00:28:12,690 --> 00:28:16,650
needs documentation and tests which it

00:28:15,150 --> 00:28:18,000
didn't have and that means it's also

00:28:16,650 --> 00:28:19,770
gonna require a more thorough review

00:28:18,000 --> 00:28:23,130
which takes more time and we have

00:28:19,770 --> 00:28:25,410
limited time we have other priorities

00:28:23,130 --> 00:28:27,600
right now and this particular response

00:28:25,410 --> 00:28:28,919
included of specific list of here are

00:28:27,600 --> 00:28:31,530
the main things that we're looking to

00:28:28,919 --> 00:28:33,059
fix right now which was you know we that

00:28:31,530 --> 00:28:37,049
way people know that not just hand

00:28:33,059 --> 00:28:39,390
waving and those take time and we have

00:28:37,049 --> 00:28:43,730
limited time and finally this wasn't a

00:28:39,390 --> 00:28:46,620
critical bug and we have limited time I

00:28:43,730 --> 00:28:48,690
wish we could merge everything and fix

00:28:46,620 --> 00:28:51,809
every problem and like have nothing

00:28:48,690 --> 00:28:53,940
remain open for more than a day but like

00:28:51,809 --> 00:28:56,850
that that's just not gonna happen

00:28:53,940 --> 00:28:58,370
there's not enough time we're never

00:28:56,850 --> 00:29:01,590
gonna be able to make everybody happy

00:28:58,370 --> 00:29:02,309
we're not trying to be jerks we're just

00:29:01,590 --> 00:29:06,360
trying to work in a way that's

00:29:02,309 --> 00:29:11,010
sustainable and we're not trying to be a

00:29:06,360 --> 00:29:13,710
jerk so please don't be jerks to us just

00:29:11,010 --> 00:29:16,140
remember to be nice now I'm not sure a

00:29:13,710 --> 00:29:17,880
lot of people necessarily believe like

00:29:16,140 --> 00:29:20,760
the kind of things that we hear

00:29:17,880 --> 00:29:23,520
sometimes so I'd like to take a look at

00:29:20,760 --> 00:29:27,299
my favorite ridiculous example of

00:29:23,520 --> 00:29:28,679
somebody failing at this rule so I have

00:29:27,299 --> 00:29:29,320
we had a pull request that was adding a

00:29:28,679 --> 00:29:32,780
method to

00:29:29,320 --> 00:29:35,400
[Laughter]

00:29:32,780 --> 00:29:41,220
yeah

00:29:35,400 --> 00:29:48,960
so uh yeah and I'm Jewish so that makes

00:29:41,220 --> 00:29:50,160
it even more hilarious to me like I

00:29:48,960 --> 00:29:53,480
don't know I'm guessing this is what you

00:29:50,160 --> 00:29:53,480
saw maybe this is the only

00:30:00,650 --> 00:30:04,530
you know this kind of person kind of

00:30:02,640 --> 00:30:06,210
gave me a gift though because now I'm

00:30:04,530 --> 00:30:07,860
having a bad day I can just remind

00:30:06,210 --> 00:30:11,360
myself if we study didn't get called

00:30:07,860 --> 00:30:11,360
literally Hitler on the Internet today

00:30:11,960 --> 00:30:15,210
although I treated that once in like

00:30:13,950 --> 00:30:17,670
three of my trollee friends immediately

00:30:15,210 --> 00:30:22,320
replied with literally Hitler they're

00:30:17,670 --> 00:30:26,340
great if you remember one thing from

00:30:22,320 --> 00:30:28,410
this talk make it this open-source

00:30:26,340 --> 00:30:31,440
maintainer z' can sometimes get put on a

00:30:28,410 --> 00:30:32,910
pedestal or we can get characterizes

00:30:31,440 --> 00:30:35,810
cartoon villains who are just trying to

00:30:32,910 --> 00:30:38,670
break your app but we're just people

00:30:35,810 --> 00:30:41,460
we're fallible we have squishy things

00:30:38,670 --> 00:30:43,670
like feelings understanding in this is

00:30:41,460 --> 00:30:47,970
the key to getting involved

00:30:43,670 --> 00:30:49,290
it requires empathy I think the biggest

00:30:47,970 --> 00:30:50,940
thing that you can take away from this

00:30:49,290 --> 00:30:53,420
is that the key to submitting a good

00:30:50,940 --> 00:30:55,740
pull request just simply comes down to

00:30:53,420 --> 00:30:59,070
considering the point of view of the

00:30:55,740 --> 00:31:01,460
human sitting on the other side thank

00:30:59,070 --> 00:31:01,460
you very much

00:31:01,900 --> 00:31:08,460
[Music]

00:31:05,360 --> 00:31:08,460
[Applause]

00:31:09,810 --> 00:31:13,510
since i have a captive audience i'd like

00:31:11,980 --> 00:31:15,640
to quickly plug a project I've been

00:31:13,510 --> 00:31:17,080
working on it's a rust ORM it's super

00:31:15,640 --> 00:31:19,060
cool this is the website you should come

00:31:17,080 --> 00:31:20,620
check it out I'd like to thank Shopify

00:31:19,060 --> 00:31:22,000
for paying for me to be here if the

00:31:20,620 --> 00:31:23,620
upcoming election has you thinking that

00:31:22,000 --> 00:31:26,500
maybe you want to move to Canada we

00:31:23,620 --> 00:31:29,230
should chat Shopify is hiring if you

00:31:26,500 --> 00:31:31,060
have any questions I will take them one

00:31:29,230 --> 00:31:32,230
on one down here afterwards and thank

00:31:31,060 --> 00:31:34,190
you very much here's how you can contact

00:31:32,230 --> 00:31:34,440
me have a great rest of the conference

00:31:34,190 --> 00:31:37,519
[Applause]

00:31:34,440 --> 00:31:37,519

YouTube URL: https://www.youtube.com/watch?v=u2xzRUYrsWA


