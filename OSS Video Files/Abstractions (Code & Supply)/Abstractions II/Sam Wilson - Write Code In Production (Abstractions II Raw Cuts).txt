Title: Sam Wilson - Write Code In Production (Abstractions II Raw Cuts)
Publication date: 2019-11-25
Playlist: Abstractions II
Description: 
	Presented at Abstractions II, a software conference Code & Supply in Pittsburgh, PA August 21-23, 2019. Learn more at http://www.codeandsupply.co or https://abstractions.io. 

The RAW CUTS series is comprised of selections from a few of our stages wherein the raw video was of high enough quality for C&S to release it before post-production. 

Post-production for a community-run conference with as many speakers and as low of a budget as Abstractions is an enormous and time-consuming undertaking. If you're interested in volunteering your time and CPU cycles to help with post-production, we can use your help. Email us at support@codeandsupply.co and we'll get you into the mix. You'll be permitted to credit yourself in the video pre-roll and credits and we'll thank you in this text and on social media.

Interested in sponsoring professional post-production costs in exchange for your company's name and logo in the video forevermore? Contact us at sponsorship@abstractions.io. Opportunities start at $1,000.

-----

Teams building data-oriented applications against sensitive or large-scale information often face the problem of how to conduct discovery and work iteratively during development. Often, developers are cut-off from production data sets for security and operational reasons. But this doesn't have to be the case. You can build your system in such a way that analysts can work securely with production data, separate from customers, sharing their work, and performing quality control with real, live, production data. Save on operational overhead and complexity while maintaining security by moving your development environment to production instead of your production environment to your laptop.

https://abstractions.io/schedule/#Write%20Code%20In%20Production-Sam%20Wilson
Captions: 
	00:00:00,030 --> 00:00:04,740
we're gonna we're going to talk about

00:00:01,560 --> 00:00:07,020
writing code in production my name is

00:00:04,740 --> 00:00:10,320
Sam Wilson I'm from Philadelphia welcome

00:00:07,020 --> 00:00:12,540
to Pittsburgh the other fair city in the

00:00:10,320 --> 00:00:15,199
state of Pennsylvania I hope you're all

00:00:12,540 --> 00:00:19,230
enjoying day 2 of abstractions and

00:00:15,199 --> 00:00:20,670
having a good time so as I said I like

00:00:19,230 --> 00:00:22,140
to talk to you do kind of start a

00:00:20,670 --> 00:00:24,359
conversation about this idea of writing

00:00:22,140 --> 00:00:26,580
code in production why I think it's

00:00:24,359 --> 00:00:28,560
important and you know how I think this

00:00:26,580 --> 00:00:33,000
could be really helpful to you as you

00:00:28,560 --> 00:00:36,719
kind of build your applications and use

00:00:33,000 --> 00:00:38,460
the clicker to be clear we're talking

00:00:36,719 --> 00:00:40,860
about writing some code in production

00:00:38,460 --> 00:00:42,809
right I'm not completely crazy and if

00:00:40,860 --> 00:00:44,100
you came with a pitchfork or something

00:00:42,809 --> 00:00:46,079
else to kind of cart me away cuz you

00:00:44,100 --> 00:00:47,579
think I'm crazy I'm not talking about

00:00:46,079 --> 00:00:49,829
writing all your code and production

00:00:47,579 --> 00:00:51,059
some of your code in production I bet

00:00:49,829 --> 00:00:53,579
you don't write any of your code in

00:00:51,059 --> 00:00:56,309
production today so let's see if we can

00:00:53,579 --> 00:00:56,910
find some nuance here a little bit more

00:00:56,309 --> 00:00:59,579
about me

00:00:56,910 --> 00:01:01,050
I'm CTO of a startup in Philadelphia

00:00:59,579 --> 00:01:03,840
called Bainbridge Health we help

00:01:01,050 --> 00:01:05,880
hospitals manage medications how they

00:01:03,840 --> 00:01:09,630
administer those safely and make sure

00:01:05,880 --> 00:01:12,000
they don't run out unexpectedly my

00:01:09,630 --> 00:01:13,530
background also includes work and other

00:01:12,000 --> 00:01:16,830
kinds of industries with varying levels

00:01:13,530 --> 00:01:18,930
of regulatory control payments education

00:01:16,830 --> 00:01:22,439
finance also worked in marketing

00:01:18,930 --> 00:01:26,009
automation ecommerce and and online

00:01:22,439 --> 00:01:28,170
media and later on if you want to give

00:01:26,009 --> 00:01:32,670
me nice words or bad words on Twitter

00:01:28,170 --> 00:01:34,290
you can find me at Nome Safari so in my

00:01:32,670 --> 00:01:36,119
career I worked on a lot of what other

00:01:34,290 --> 00:01:38,880
people kind of think of is boring

00:01:36,119 --> 00:01:41,549
problems like getting paid or paying

00:01:38,880 --> 00:01:43,320
bills or complying with the law or

00:01:41,549 --> 00:01:45,119
making sure that things are secure but

00:01:43,320 --> 00:01:46,560
not in the fun way we're like there's

00:01:45,119 --> 00:01:47,700
hackers and things like that but more

00:01:46,560 --> 00:01:50,280
like the unfun way where you have

00:01:47,700 --> 00:01:51,899
auditors from deloitte and touche who

00:01:50,280 --> 00:01:53,399
don't know anything about computers but

00:01:51,899 --> 00:01:55,890
they want to go through spreadsheets and

00:01:53,399 --> 00:01:58,350
you're like security by spreadsheet I

00:01:55,890 --> 00:02:02,430
get it so due diligence and things like

00:01:58,350 --> 00:02:05,040
that and what I've kind of come to find

00:02:02,430 --> 00:02:06,750
is that these boring problems in a lot

00:02:05,040 --> 00:02:09,959
of cases are actually how a business

00:02:06,750 --> 00:02:12,030
innovates and becomes successful that if

00:02:09,959 --> 00:02:12,240
you can be better at how you get paid if

00:02:12,030 --> 00:02:14,550
you

00:02:12,240 --> 00:02:16,140
be better at how you control costs you

00:02:14,550 --> 00:02:17,760
can be better at how you comply with the

00:02:16,140 --> 00:02:19,860
law so that it's not so burdensome on

00:02:17,760 --> 00:02:21,990
your organization you can actually

00:02:19,860 --> 00:02:23,520
innovate as a business and be really

00:02:21,990 --> 00:02:25,470
successful so you might have a really

00:02:23,520 --> 00:02:26,880
cool app and then eventually you get

00:02:25,470 --> 00:02:29,780
bought by the company that has the less

00:02:26,880 --> 00:02:31,920
cool app or a way more cool back-office

00:02:29,780 --> 00:02:35,250
that's the kind of thing that happens

00:02:31,920 --> 00:02:38,550
and lately I've really been focused on

00:02:35,250 --> 00:02:40,650
thinking about change management this is

00:02:38,550 --> 00:02:41,700
kind of a boring topic when you're

00:02:40,650 --> 00:02:46,010
thinking about it from the perspective

00:02:41,700 --> 00:02:49,800
of a AICPA SOC to audit you know

00:02:46,010 --> 00:02:52,170
regulations or ISO 27001 and things like

00:02:49,800 --> 00:02:54,210
that super boring stuff security by

00:02:52,170 --> 00:02:56,340
spreadsheet but when you start talking

00:02:54,210 --> 00:02:59,040
about things like continuous delivery or

00:02:56,340 --> 00:03:00,600
DevOps or git ops it kind of gets kind

00:02:59,040 --> 00:03:03,210
of cool you're like oh this is this is

00:03:00,600 --> 00:03:06,240
really neat stuff and so kind of the

00:03:03,210 --> 00:03:08,700
question is how can you innovate in

00:03:06,240 --> 00:03:11,460
change management to create competitive

00:03:08,700 --> 00:03:13,590
advantage for your organization or just

00:03:11,460 --> 00:03:14,820
to be more you know effective as an

00:03:13,590 --> 00:03:19,380
organization if you're working and

00:03:14,820 --> 00:03:22,770
not-for-profits so I don't know how many

00:03:19,380 --> 00:03:25,680
of you have maybe seen this book okay I

00:03:22,770 --> 00:03:27,750
was expecting more hands so this came

00:03:25,680 --> 00:03:28,890
out last year and I think it's a really

00:03:27,750 --> 00:03:31,020
amazing book and I would highly

00:03:28,890 --> 00:03:33,690
recommend that all of you actually go

00:03:31,020 --> 00:03:35,660
and check it out and read it because

00:03:33,690 --> 00:03:38,100
it's really full of amazing information

00:03:35,660 --> 00:03:39,360
basically the folks at puppet labs have

00:03:38,100 --> 00:03:41,790
been doing a survey over the last

00:03:39,360 --> 00:03:44,700
several years called the state of DevOps

00:03:41,790 --> 00:03:46,680
survey and with that they kind of

00:03:44,700 --> 00:03:48,660
coordinated with some researchers and

00:03:46,680 --> 00:03:51,270
they collected a bunch of data across a

00:03:48,660 --> 00:03:53,160
broad swath of industry T that up with

00:03:51,270 --> 00:03:54,810
some market data that they pulled

00:03:53,160 --> 00:03:56,430
together and I think what they've

00:03:54,810 --> 00:03:58,350
produced is probably the most important

00:03:56,430 --> 00:04:00,420
piece of quantitative research in

00:03:58,350 --> 00:04:03,240
software engineering probably ever

00:04:00,420 --> 00:04:05,430
because it's so comprehensive this isn't

00:04:03,240 --> 00:04:08,310
like a lab experiment with you know ten

00:04:05,430 --> 00:04:12,590
undergrad students doing agile this is a

00:04:08,310 --> 00:04:17,280
real broad survey across industry and

00:04:12,590 --> 00:04:18,630
what they found over time is that there

00:04:17,280 --> 00:04:20,400
are different kinds of organizations

00:04:18,630 --> 00:04:24,530
that exhibit different kinds of traits

00:04:20,400 --> 00:04:26,120
and they tend to do a lot better the

00:04:24,530 --> 00:04:28,250
talk about high performers it's

00:04:26,120 --> 00:04:31,040
basically through all this data they did

00:04:28,250 --> 00:04:32,780
a rigorous analysis and they basically

00:04:31,040 --> 00:04:35,330
identified organizations that exhibit

00:04:32,780 --> 00:04:37,820
certainly similar traits have certain

00:04:35,330 --> 00:04:40,400
similar outcomes they have greater

00:04:37,820 --> 00:04:43,550
commercial success so their market cap

00:04:40,400 --> 00:04:46,220
growth their profitability their market

00:04:43,550 --> 00:04:47,630
share growth outperform other

00:04:46,220 --> 00:04:49,730
organizations that exhibit different

00:04:47,630 --> 00:04:52,250
traits they also have greater non

00:04:49,730 --> 00:04:53,870
commercial success so they're more

00:04:52,250 --> 00:04:55,820
effective if for example they're

00:04:53,870 --> 00:04:57,590
not-for-profit and their goal is to

00:04:55,820 --> 00:04:59,990
achieve certain outcomes they're more

00:04:57,590 --> 00:05:01,580
effective than their peers they're more

00:04:59,990 --> 00:05:04,310
efficient they make better use of the

00:05:01,580 --> 00:05:08,200
money that they take in and they have

00:05:04,310 --> 00:05:08,200
higher degrees of customer satisfaction

00:05:09,910 --> 00:05:15,350
from a management perspective or an

00:05:12,770 --> 00:05:17,810
engineering perspective they exhibited

00:05:15,350 --> 00:05:19,520
certain traits very consistently and

00:05:17,810 --> 00:05:23,060
what they found is that these

00:05:19,520 --> 00:05:25,550
organizations were both faster and more

00:05:23,060 --> 00:05:27,590
stable which was fairly groundbreaking

00:05:25,550 --> 00:05:29,419
in terms of actually having data to back

00:05:27,590 --> 00:05:31,520
that up we usually think of you know

00:05:29,419 --> 00:05:33,140
cowboy coders and things like that no

00:05:31,520 --> 00:05:35,900
break all the rules in order to go fast

00:05:33,140 --> 00:05:38,210
and you know break things and move fast

00:05:35,900 --> 00:05:40,250
right except these organizations also

00:05:38,210 --> 00:05:42,380
have better stability

00:05:40,250 --> 00:05:45,200
they've got lower mean time to recovery

00:05:42,380 --> 00:05:47,060
they have lower change fail rate so when

00:05:45,200 --> 00:05:49,100
they deploy something it's more likely

00:05:47,060 --> 00:05:50,570
to be accepted by their users and just

00:05:49,100 --> 00:05:51,680
continue to be a part of their

00:05:50,570 --> 00:05:54,289
application then have to roll back

00:05:51,680 --> 00:06:00,410
changes or apologize in public quite so

00:05:54,289 --> 00:06:03,800
often how do they do this well go figure

00:06:00,410 --> 00:06:05,840
with DevOps they don't necessarily call

00:06:03,800 --> 00:06:07,610
what they do DevOps but it's a fairly

00:06:05,840 --> 00:06:10,100
useful term at a high level so we'll

00:06:07,610 --> 00:06:11,510
kind of stick with it and basically what

00:06:10,100 --> 00:06:14,240
it comes down to if you go and look up

00:06:11,510 --> 00:06:15,950
DevOps on Wikipedia you know basically

00:06:14,240 --> 00:06:17,900
integrating your development operational

00:06:15,950 --> 00:06:19,880
practices to shorten your software

00:06:17,900 --> 00:06:22,850
development lifecycle be better aligned

00:06:19,880 --> 00:06:25,400
with business outcomes paraphrase

00:06:22,850 --> 00:06:29,260
Twitter automate all the things right

00:06:25,400 --> 00:06:29,260
it's maybe something that you've heard a

00:06:30,100 --> 00:06:34,300
key aspect of this is continuous

00:06:33,140 --> 00:06:36,970
delivery

00:06:34,300 --> 00:06:39,280
so a lot of organizations are trying to

00:06:36,970 --> 00:06:41,830
achieve continuous delivery as part of

00:06:39,280 --> 00:06:43,960
their DevOps practice how many of you

00:06:41,830 --> 00:06:47,349
would say that your organization uses

00:06:43,960 --> 00:06:48,789
continuous delivery today it's a good

00:06:47,349 --> 00:06:50,289
number of hands how many of you are

00:06:48,789 --> 00:06:54,300
trying to implement continuous delivery

00:06:50,289 --> 00:06:56,979
today it's like even more hands awesome

00:06:54,300 --> 00:06:59,919
so there's more to continuous delivery

00:06:56,979 --> 00:07:01,930
than automation and technical things

00:06:59,919 --> 00:07:03,789
right there's business practices and

00:07:01,930 --> 00:07:05,590
organizational practices that you need

00:07:03,789 --> 00:07:07,569
to adopt in order to achieve continuous

00:07:05,590 --> 00:07:09,340
delivery we're going to focus on some of

00:07:07,569 --> 00:07:14,319
the technical aspects of continuous

00:07:09,340 --> 00:07:16,539
delivery so again the goal of continuous

00:07:14,319 --> 00:07:18,460
delivery is to as quickly and

00:07:16,539 --> 00:07:20,469
efficiently as possible get changes in

00:07:18,460 --> 00:07:23,050
front of customers right the longer

00:07:20,469 --> 00:07:25,690
something sits in a you know a branch

00:07:23,050 --> 00:07:27,520
somewhere that nobody is looking at the

00:07:25,690 --> 00:07:29,139
longer it's going to get stale business

00:07:27,520 --> 00:07:30,940
environments going to change the user

00:07:29,139 --> 00:07:32,500
environments going to change if you're

00:07:30,940 --> 00:07:34,389
working and not-for-profit world you

00:07:32,500 --> 00:07:35,979
might be out there trying to deal with a

00:07:34,389 --> 00:07:38,800
disaster scenario and that disaster

00:07:35,979 --> 00:07:40,300
might get worse or resolve itself before

00:07:38,800 --> 00:07:43,360
you ever release changes and what good

00:07:40,300 --> 00:07:44,919
was that and I think another thing to

00:07:43,360 --> 00:07:46,150
keep in mind is that these these changes

00:07:44,919 --> 00:07:47,650
don't magically just ride into

00:07:46,150 --> 00:07:50,409
production right there's still approval

00:07:47,650 --> 00:07:51,940
processes we still have to do testing we

00:07:50,409 --> 00:07:53,409
still have to have user acceptance

00:07:51,940 --> 00:07:55,830
before we deploy something out into

00:07:53,409 --> 00:08:01,449
production we still have to do staged

00:07:55,830 --> 00:08:02,800
deployments so I'm sure all of you are

00:08:01,449 --> 00:08:04,930
kind of familiar with this idea of

00:08:02,800 --> 00:08:06,370
having dev stage and prod there's kind

00:08:04,930 --> 00:08:08,940
of an acronym go figure

00:08:06,370 --> 00:08:11,199
we have an acronym called DTaP

00:08:08,940 --> 00:08:14,199
development testing acceptance and

00:08:11,199 --> 00:08:16,930
production so most of us probably have a

00:08:14,199 --> 00:08:19,150
devastation prod or dev test prod kind

00:08:16,930 --> 00:08:20,620
of setup that's what I've been mostly

00:08:19,150 --> 00:08:22,629
familiar with I've also seen

00:08:20,620 --> 00:08:25,120
organizations that have double digits in

00:08:22,629 --> 00:08:27,009
their deployment environments that's

00:08:25,120 --> 00:08:28,990
usually the result of some kind of

00:08:27,009 --> 00:08:31,330
training or auditing program that they

00:08:28,990 --> 00:08:34,719
have or lots of middle managers who all

00:08:31,330 --> 00:08:36,310
want their own environment and you know

00:08:34,719 --> 00:08:37,329
more or less like your development

00:08:36,310 --> 00:08:39,099
environment that's where you write your

00:08:37,329 --> 00:08:40,990
code or that's where you test your code

00:08:39,099 --> 00:08:42,820
before you actually hand it to your QA

00:08:40,990 --> 00:08:45,100
people where you can go and be creative

00:08:42,820 --> 00:08:46,720
and you can you know explore all of your

00:08:45,100 --> 00:08:47,600
flights of fancy you can say I want to

00:08:46,720 --> 00:08:48,800
try this new tool

00:08:47,600 --> 00:08:50,630
I want to see what that looks like and

00:08:48,800 --> 00:08:53,810
and throw all caution to the wind

00:08:50,630 --> 00:08:55,040
because hey it's your environment yeah

00:08:53,810 --> 00:08:56,300
they're testing environment because you

00:08:55,040 --> 00:08:57,740
want to be able to make sure that you

00:08:56,300 --> 00:08:59,810
don't break things before you deploy

00:08:57,740 --> 00:09:02,209
your code maybe you want to be able to

00:08:59,810 --> 00:09:04,009
do load testing without taking down

00:09:02,209 --> 00:09:06,620
production or maybe you want to verify

00:09:04,009 --> 00:09:07,699
that you can do your data migrations

00:09:06,620 --> 00:09:09,430
before you actually run them in

00:09:07,699 --> 00:09:11,720
production so that you don't

00:09:09,430 --> 00:09:16,160
accidentally sneak in a truncate table

00:09:11,720 --> 00:09:19,160
into your your data migrations live

00:09:16,160 --> 00:09:21,649
through that eventually some of us all

00:09:19,160 --> 00:09:23,000
have an acceptance environment right and

00:09:21,649 --> 00:09:26,420
so this might be like a like a

00:09:23,000 --> 00:09:28,639
pre-production environment or a demo

00:09:26,420 --> 00:09:30,589
environment where you can show changes

00:09:28,639 --> 00:09:32,060
to a subset of customers before it

00:09:30,589 --> 00:09:38,269
actually hits production before

00:09:32,060 --> 00:09:40,190
everybody experiences it why do we do

00:09:38,269 --> 00:09:42,259
this so there's some common sense

00:09:40,190 --> 00:09:45,110
reasons why we do this right like this

00:09:42,259 --> 00:09:47,420
isn't just something that you know is is

00:09:45,110 --> 00:09:49,850
magic we do it to maintain stability

00:09:47,420 --> 00:09:51,410
right we don't want developers out there

00:09:49,850 --> 00:09:54,500
just crushed crashing production

00:09:51,410 --> 00:09:57,170
willy-nilly we don't want you know to

00:09:54,500 --> 00:09:58,730
introduce errors and things like that we

00:09:57,170 --> 00:10:00,680
want to maintain a stable environment

00:09:58,730 --> 00:10:04,250
for our users we want to maintain

00:10:00,680 --> 00:10:06,199
security right so developers usually

00:10:04,250 --> 00:10:10,240
have full access I mean how many of you

00:10:06,199 --> 00:10:14,329
have root access on your laptop right

00:10:10,240 --> 00:10:16,279
Hospital IT departments are all rolling

00:10:14,329 --> 00:10:18,170
over in their graves because they cannot

00:10:16,279 --> 00:10:21,500
stomach the idea of anybody having root

00:10:18,170 --> 00:10:22,939
access on a device so most developers

00:10:21,500 --> 00:10:24,380
have root access to the device they work

00:10:22,939 --> 00:10:26,300
on they have root access in the

00:10:24,380 --> 00:10:28,970
development environment they work on so

00:10:26,300 --> 00:10:31,189
if they have the ability to change the

00:10:28,970 --> 00:10:34,189
code that controls access if they

00:10:31,189 --> 00:10:35,810
themselves have root access then any

00:10:34,189 --> 00:10:37,819
data or anything else that goes into

00:10:35,810 --> 00:10:39,649
that dev environment they can just

00:10:37,819 --> 00:10:41,839
modify that or see it or do whatever

00:10:39,649 --> 00:10:43,970
they want with it so one reason we have

00:10:41,839 --> 00:10:45,350
these staged environments is to have

00:10:43,970 --> 00:10:48,759
different ownership and different

00:10:45,350 --> 00:10:52,040
controls for different levels of

00:10:48,759 --> 00:10:55,430
security maybe you also want to maintain

00:10:52,040 --> 00:10:57,199
secrecy so you know you might have

00:10:55,430 --> 00:10:59,500
features that you want to roll out and

00:10:57,199 --> 00:11:01,570
maybe you want to kind of

00:10:59,500 --> 00:11:02,920
keep those internal before you show them

00:11:01,570 --> 00:11:04,480
to all your users so that's another

00:11:02,920 --> 00:11:07,000
reason you might want to have a stage

00:11:04,480 --> 00:11:09,520
delivery how many of you've seen the two

00:11:07,000 --> 00:11:11,140
movie office space right so kind of like

00:11:09,520 --> 00:11:12,520
a plotline of that movie other than like

00:11:11,140 --> 00:11:14,740
all the funny sort of like off the

00:11:12,520 --> 00:11:15,910
scenes it's basically there's a group of

00:11:14,740 --> 00:11:17,470
developers and they introduce a change

00:11:15,910 --> 00:11:18,910
where they can steal fractions of a

00:11:17,470 --> 00:11:20,470
penny from every transaction at least

00:11:18,910 --> 00:11:22,240
that's that was kind of like the idea

00:11:20,470 --> 00:11:24,730
all right so developers have a lot of

00:11:22,240 --> 00:11:26,290
control and we don't necessarily you

00:11:24,730 --> 00:11:27,400
know in an environment like their

00:11:26,290 --> 00:11:29,380
development environment you wouldn't

00:11:27,400 --> 00:11:31,480
want the bank running in development

00:11:29,380 --> 00:11:33,010
where the software engineers can just

00:11:31,480 --> 00:11:36,310
route all the transactions to their own

00:11:33,010 --> 00:11:39,370
account whether it was done on purpose

00:11:36,310 --> 00:11:40,390
or by accident at the end of the day

00:11:39,370 --> 00:11:42,160
this comes down to wanting to maintain

00:11:40,390 --> 00:11:43,750
control right like we want to maintain

00:11:42,160 --> 00:11:46,450
control we don't we don't want people

00:11:43,750 --> 00:11:48,760
just changing things willy-nilly and and

00:11:46,450 --> 00:11:50,890
we want to have some sense that we know

00:11:48,760 --> 00:11:55,090
when things are going to change and have

00:11:50,890 --> 00:11:58,180
some control over that this is also

00:11:55,090 --> 00:12:00,190
mandated right so it's actually mandated

00:11:58,180 --> 00:12:03,010
in certain industry and legal frameworks

00:12:00,190 --> 00:12:05,260
sometimes it's explicit but most often

00:12:03,010 --> 00:12:08,380
it's implicit there's an implication and

00:12:05,260 --> 00:12:09,850
a lot of the the security and legal

00:12:08,380 --> 00:12:11,320
frameworks that you work with that just

00:12:09,850 --> 00:12:16,030
assume that you're doing some kind of

00:12:11,320 --> 00:12:17,560
staged deployment so one example is

00:12:16,030 --> 00:12:18,910
there's this organization called the

00:12:17,560 --> 00:12:20,610
cloud security Alliance and they have a

00:12:18,910 --> 00:12:22,870
security framework one of those

00:12:20,610 --> 00:12:25,570
spreadsheets that'll keep us all secure

00:12:22,870 --> 00:12:26,830
called the cloud controls matrix and if

00:12:25,570 --> 00:12:28,810
you pour through that thing there are a

00:12:26,830 --> 00:12:30,280
few references to production and on

00:12:28,810 --> 00:12:32,440
production environments it doesn't ever

00:12:30,280 --> 00:12:33,760
say hey you should really have a test

00:12:32,440 --> 00:12:35,680
environment before you go in crash

00:12:33,760 --> 00:12:37,840
production people shouldn't be editing

00:12:35,680 --> 00:12:40,570
their code and prod it just assumes

00:12:37,840 --> 00:12:42,460
you're that smart and it assumes that

00:12:40,570 --> 00:12:44,290
you're also it then goes further and

00:12:42,460 --> 00:12:46,270
says and by the way that production

00:12:44,290 --> 00:12:47,680
environment should be secure and

00:12:46,270 --> 00:12:48,970
separate from all your test environments

00:12:47,680 --> 00:12:52,930
like you need to have those kinds of

00:12:48,970 --> 00:12:55,360
separations another one implicit this is

00:12:52,930 --> 00:12:56,890
in the healthcare space test data shall

00:12:55,360 --> 00:12:58,390
be selected carefully and protected and

00:12:56,890 --> 00:13:00,430
controlled and on pressure I think this

00:12:58,390 --> 00:13:02,080
one's really interesting because not

00:13:00,430 --> 00:13:05,110
only does it imply that you should have

00:13:02,080 --> 00:13:08,320
a production environment it also implies

00:13:05,110 --> 00:13:11,170
that you're copying data from production

00:13:08,320 --> 00:13:11,860
sensitive data elsewhere and you should

00:13:11,170 --> 00:13:15,010
be really careful

00:13:11,860 --> 00:13:16,480
about that meanwhile I have found that

00:13:15,010 --> 00:13:18,010
health care organizations are the ones

00:13:16,480 --> 00:13:22,390
who are the most freaked out about this

00:13:18,010 --> 00:13:25,899
so I think that's kind of funny

00:13:22,390 --> 00:13:27,940
lastly the payment card industry these

00:13:25,899 --> 00:13:30,310
guys are a little worn with it I think

00:13:27,940 --> 00:13:32,050
but they basically say hey you got to

00:13:30,310 --> 00:13:34,240
keep these things separate you really

00:13:32,050 --> 00:13:37,510
shouldn't be copying data and controls

00:13:34,240 --> 00:13:39,850
should be independent one example of an

00:13:37,510 --> 00:13:42,519
explicit industry standard that calls us

00:13:39,850 --> 00:13:49,630
out is COBIT five and it actually does

00:13:42,519 --> 00:13:54,190
say oops no I hit the wrong button it's

00:13:49,630 --> 00:13:57,040
at play no there we go all right don't

00:13:54,190 --> 00:13:59,470
reveal all my secrets yeah it actually

00:13:57,040 --> 00:14:00,940
says right here establish a test

00:13:59,470 --> 00:14:03,190
environment right like that's part of

00:14:00,940 --> 00:14:06,010
the standard some organizations want to

00:14:03,190 --> 00:14:07,930
hold themselves accountable to so again

00:14:06,010 --> 00:14:10,589
if you go back and you look over this

00:14:07,930 --> 00:14:13,149
it's not so much about you having staged

00:14:10,589 --> 00:14:15,850
releases it's more about making sure

00:14:13,149 --> 00:14:18,130
that you are not copying production data

00:14:15,850 --> 00:14:19,690
out of production into other

00:14:18,130 --> 00:14:22,449
environments it's about making sure that

00:14:19,690 --> 00:14:23,980
you're enforcing controls all along this

00:14:22,449 --> 00:14:25,870
delivery pipeline and you're keeping

00:14:23,980 --> 00:14:27,760
things secure that's really what

00:14:25,870 --> 00:14:30,310
everybody's concerned about if you've

00:14:27,760 --> 00:14:32,560
got 20 delivery environments if you've

00:14:30,310 --> 00:14:34,180
got two they don't care as long as

00:14:32,560 --> 00:14:37,930
you're not copying production data

00:14:34,180 --> 00:14:41,440
that's really all it comes down to so

00:14:37,930 --> 00:14:46,480
hold on we know that we want to have

00:14:41,440 --> 00:14:48,040
these controls and we know that most

00:14:46,480 --> 00:14:49,779
developers actually don't do this right

00:14:48,040 --> 00:14:51,310
because otherwise everybody wouldn't be

00:14:49,779 --> 00:14:52,990
asking these questions people wouldn't

00:14:51,310 --> 00:14:56,140
be freaking out about this so it's

00:14:52,990 --> 00:14:59,800
common sense why is it that this happens

00:14:56,140 --> 00:15:00,699
what's going on here well I think it's

00:14:59,800 --> 00:15:02,620
for a couple reasons

00:15:00,699 --> 00:15:04,720
one of them is when we learn to code

00:15:02,620 --> 00:15:07,269
generally speaking we don't learn to

00:15:04,720 --> 00:15:10,240
code in an environment of controls right

00:15:07,269 --> 00:15:11,800
we learn using tools like Swift

00:15:10,240 --> 00:15:14,470
playgrounds and things like that where

00:15:11,800 --> 00:15:16,570
we've got these fast iterative setups

00:15:14,470 --> 00:15:18,010
right you've got a repple and you can

00:15:16,570 --> 00:15:19,600
just edit code and you can immediately

00:15:18,010 --> 00:15:22,060
see the results and show it to your

00:15:19,600 --> 00:15:23,350
friend but if you're like meaning you're

00:15:22,060 --> 00:15:24,380
a little bit older maybe you learned

00:15:23,350 --> 00:15:30,160
using the basic intro

00:15:24,380 --> 00:15:34,250
right like love that blue color anyhow

00:15:30,160 --> 00:15:36,080
maybe if you're into data science you

00:15:34,250 --> 00:15:38,420
might have started out using Jupiter

00:15:36,080 --> 00:15:39,710
labs or something like our studio that's

00:15:38,420 --> 00:15:41,870
maybe the environment that you learned

00:15:39,710 --> 00:15:43,760
how to code in right there's nothing in

00:15:41,870 --> 00:15:45,110
here about dev stage and prod that just

00:15:43,760 --> 00:15:47,720
doesn't exist it's not part of the

00:15:45,110 --> 00:15:49,010
equation so when we're learning this is

00:15:47,720 --> 00:15:50,630
the environment that we're familiar with

00:15:49,010 --> 00:15:52,490
right we're really used to this

00:15:50,630 --> 00:15:54,710
experience of as a developer I make

00:15:52,490 --> 00:15:56,990
changes I show it to my user they give

00:15:54,710 --> 00:15:59,420
me a grade all right so we've been

00:15:56,990 --> 00:16:01,190
trained through gamification all through

00:15:59,420 --> 00:16:03,410
our education whether it's in college or

00:16:01,190 --> 00:16:04,820
a boot camp but basically just deployed

00:16:03,410 --> 00:16:09,860
changes and somebody gives us feedback

00:16:04,820 --> 00:16:11,630
and we love that feels really good then

00:16:09,860 --> 00:16:14,060
we get our first job and it's a little

00:16:11,630 --> 00:16:16,280
bit more like this right I'm a developer

00:16:14,060 --> 00:16:18,680
it goes through a whole big scary change

00:16:16,280 --> 00:16:21,380
management process eventually gets to a

00:16:18,680 --> 00:16:23,420
user there's some guy somewhere who's

00:16:21,380 --> 00:16:24,980
probably intermediating between the

00:16:23,420 --> 00:16:27,470
developer and the user for another

00:16:24,980 --> 00:16:29,150
office space reference and then

00:16:27,470 --> 00:16:31,580
eventually like the user right like user

00:16:29,150 --> 00:16:33,710
feedback has some kind of whisper down

00:16:31,580 --> 00:16:36,080
the lane process that eventually shows

00:16:33,710 --> 00:16:38,990
up in a JIRA ticket or a github issue

00:16:36,080 --> 00:16:40,370
and we don't know this user they could

00:16:38,990 --> 00:16:41,900
be the person that we flipped off on the

00:16:40,370 --> 00:16:44,240
highway on the ride into work we've got

00:16:41,900 --> 00:16:47,180
no idea even though they're paying our

00:16:44,240 --> 00:16:48,530
bills another problem I think it's a

00:16:47,180 --> 00:16:52,400
little bit more of a challenge for folks

00:16:48,530 --> 00:16:55,580
is bootstrapping say I need to build a

00:16:52,400 --> 00:16:57,170
report as part of a work assignment how

00:16:55,580 --> 00:16:59,900
do I build that report without some

00:16:57,170 --> 00:17:02,510
sample data right or if I'm doing

00:16:59,900 --> 00:17:05,120
something really exploratory the

00:17:02,510 --> 00:17:07,160
requirements are in the data there might

00:17:05,120 --> 00:17:09,380
not nobody may know the answer to what

00:17:07,160 --> 00:17:13,660
it is we need to build until you go look

00:17:09,380 --> 00:17:17,360
at the data so oftentimes what do we do

00:17:13,660 --> 00:17:20,480
we copy data back from production to

00:17:17,360 --> 00:17:23,270
somewhere else how many of you have a

00:17:20,480 --> 00:17:27,420
process to copy production data back to

00:17:23,270 --> 00:17:30,250
your test environment I have to

00:17:27,420 --> 00:17:31,960
but it might be for load testing it

00:17:30,250 --> 00:17:33,850
might be so that you know you can you

00:17:31,960 --> 00:17:34,720
can verify that your data migrations

00:17:33,850 --> 00:17:36,430
look proper

00:17:34,720 --> 00:17:37,570
you might even tell yourself that you do

00:17:36,430 --> 00:17:39,610
this because you want to verify that

00:17:37,570 --> 00:17:40,780
your backups are working right what's

00:17:39,610 --> 00:17:42,310
better than making sure that your

00:17:40,780 --> 00:17:44,440
production backups are working then

00:17:42,310 --> 00:17:46,510
doing a restore every day into your test

00:17:44,440 --> 00:17:49,840
environment hey look it works and we ran

00:17:46,510 --> 00:17:51,430
tests against to prove it so one

00:17:49,840 --> 00:17:54,160
approach to kind of solving this problem

00:17:51,430 --> 00:17:56,590
is to use sampling right let's take a

00:17:54,160 --> 00:17:58,420
sample of production data and you can do

00:17:56,590 --> 00:17:59,470
this either horizontally or vertically

00:17:58,420 --> 00:18:01,630
depending on how you want to think about

00:17:59,470 --> 00:18:05,590
it where you take a subset of the data

00:18:01,630 --> 00:18:07,060
maybe you chop off a bunch of rows you

00:18:05,590 --> 00:18:09,310
say I'll just give you a day's worth of

00:18:07,060 --> 00:18:10,870
data right I'm managing my risk exposure

00:18:09,310 --> 00:18:13,450
if I only give a developer one day's

00:18:10,870 --> 00:18:15,430
worth of data or maybe I can do identify

00:18:13,450 --> 00:18:17,620
the data that I can chop off certain

00:18:15,430 --> 00:18:19,720
columns or maybe I I hashed those

00:18:17,620 --> 00:18:23,290
columns or something like that so that

00:18:19,720 --> 00:18:26,560
you can't really see that data but there

00:18:23,290 --> 00:18:30,160
are some problems with this one big

00:18:26,560 --> 00:18:32,350
problem with this is you know that pH

00:18:30,160 --> 00:18:34,360
RPI I may still leak out it can leak out

00:18:32,350 --> 00:18:35,440
an unstructured fields like notes and

00:18:34,360 --> 00:18:37,450
things like that there might be a note

00:18:35,440 --> 00:18:39,940
in there that says you know John

00:18:37,450 --> 00:18:41,710
customer ID blah blah blah call to let

00:18:39,940 --> 00:18:45,010
me know that his social security number

00:18:41,710 --> 00:18:46,450
is X you know and and you might have

00:18:45,010 --> 00:18:48,220
masked the social security number and

00:18:46,450 --> 00:18:50,020
the user name and their user ID you

00:18:48,220 --> 00:18:53,440
might have done all the right things but

00:18:50,020 --> 00:18:54,670
then these pesky notes notes so never

00:18:53,440 --> 00:18:56,290
include the note fields unless you're

00:18:54,670 --> 00:18:58,540
trying to do natural language processing

00:18:56,290 --> 00:19:00,660
in which case you know throw caution to

00:18:58,540 --> 00:19:04,090
the wind

00:19:00,660 --> 00:19:05,560
another problem is scaling right laptops

00:19:04,090 --> 00:19:07,630
aren't data centers so you've got

00:19:05,560 --> 00:19:09,790
developers writing code out on their

00:19:07,630 --> 00:19:12,640
laptop and it's not representative of

00:19:09,790 --> 00:19:14,050
the size of the data or the production

00:19:12,640 --> 00:19:16,360
environment that are going to deploy to

00:19:14,050 --> 00:19:18,850
write you're gonna run into problems

00:19:16,360 --> 00:19:20,080
where you know I owe bandwidth or memory

00:19:18,850 --> 00:19:21,730
bandwidth might become a real problem

00:19:20,080 --> 00:19:24,100
and something that worked really well on

00:19:21,730 --> 00:19:25,690
a day's worth of data falls completely

00:19:24,100 --> 00:19:26,860
apart when you try and process three

00:19:25,690 --> 00:19:28,650
years of data across your entire

00:19:26,860 --> 00:19:31,090
customer base

00:19:28,650 --> 00:19:33,550
another issue is why do you want data

00:19:31,090 --> 00:19:35,230
all over everyone's laptops I work with

00:19:33,550 --> 00:19:37,270
hospitals and I tell you what the number

00:19:35,230 --> 00:19:38,150
of times I'm sitting down with a nurse

00:19:37,270 --> 00:19:40,340
manager

00:19:38,150 --> 00:19:42,950
or pharmacy manager and they just bring

00:19:40,340 --> 00:19:44,750
up a spreadsheet chock-full of pH I and

00:19:42,950 --> 00:19:46,730
I'm thinking to myself man you guys just

00:19:44,750 --> 00:19:47,930
email that to each other and they won't

00:19:46,730 --> 00:19:50,270
even give me access to like a

00:19:47,930 --> 00:19:52,460
de-identified database that that's gonna

00:19:50,270 --> 00:19:54,650
live in their data center but this data

00:19:52,460 --> 00:19:56,930
is all over everyone's laptops and it

00:19:54,650 --> 00:19:59,930
should freak you out because that's what

00:19:56,930 --> 00:20:01,940
ransomware is all about so the other

00:19:59,930 --> 00:20:04,040
thing is that this doesn't scale from

00:20:01,940 --> 00:20:05,960
like a business perspective right there

00:20:04,040 --> 00:20:07,220
are surprises in the data that you might

00:20:05,960 --> 00:20:09,110
be missing if you look at a day's worth

00:20:07,220 --> 00:20:13,000
of data you might miss out on things

00:20:09,110 --> 00:20:16,310
like end of your issues or you know

00:20:13,000 --> 00:20:18,620
maybe something special only happens in

00:20:16,310 --> 00:20:20,810
the month of March or April like filing

00:20:18,620 --> 00:20:22,550
taxes and if you're looking at June you

00:20:20,810 --> 00:20:24,980
might miss out on all those transactions

00:20:22,550 --> 00:20:28,900
and that might end up breaking your code

00:20:24,980 --> 00:20:31,460
right so a sampling has its own issues

00:20:28,900 --> 00:20:33,200
and so I think at the end of the day

00:20:31,460 --> 00:20:35,630
like the question is like why is there a

00:20:33,200 --> 00:20:38,300
report treated the same as the rest of

00:20:35,630 --> 00:20:40,730
your application why can't we do proper

00:20:38,300 --> 00:20:43,340
exploration in our actual application

00:20:40,730 --> 00:20:45,140
that's living in production right why do

00:20:43,340 --> 00:20:46,910
we have to go back to a developer's

00:20:45,140 --> 00:20:49,370
laptop why isn't our production

00:20:46,910 --> 00:20:51,140
application powerful enough to enforce

00:20:49,370 --> 00:20:56,120
controls and support this kind of

00:20:51,140 --> 00:20:58,880
discovery what if we took you to

00:20:56,120 --> 00:21:03,380
production instead of production back to

00:20:58,880 --> 00:21:05,950
your laptop all right and so what I mean

00:21:03,380 --> 00:21:08,750
by that I mean how about we embed

00:21:05,950 --> 00:21:11,150
customizability into our applications

00:21:08,750 --> 00:21:14,540
things like macros or plugins or

00:21:11,150 --> 00:21:16,190
extensions there's this term internal

00:21:14,540 --> 00:21:18,170
reprogram ability right like as

00:21:16,190 --> 00:21:20,090
developers we use tools all the time

00:21:18,170 --> 00:21:22,640
where we're writing code in someone

00:21:20,090 --> 00:21:26,030
else's production if you think about it

00:21:22,640 --> 00:21:27,500
you know when you're inside your web

00:21:26,030 --> 00:21:29,240
application you fire up any web

00:21:27,500 --> 00:21:31,070
application today start interacting with

00:21:29,240 --> 00:21:32,750
the client-side JavaScript change

00:21:31,070 --> 00:21:35,870
whatever you want there's there's whole

00:21:32,750 --> 00:21:38,480
you know ecosystems of tools around this

00:21:35,870 --> 00:21:40,520
or maybe use Emacs right your Emacs

00:21:38,480 --> 00:21:42,850
editor just fire that thing up and

00:21:40,520 --> 00:21:46,020
completely customize your environment

00:21:42,850 --> 00:21:48,240
you may be surprised to hear that

00:21:46,020 --> 00:21:51,690
in the most enterprise of enterprise-e

00:21:48,240 --> 00:21:53,580
spaces ERPs and EHRs are almost entirely

00:21:51,690 --> 00:21:55,860
delivered as source code to their

00:21:53,580 --> 00:21:57,300
customers this is very prevalent because

00:21:55,860 --> 00:21:59,610
customers want to completely customize

00:21:57,300 --> 00:22:03,030
these things I worked for one company

00:21:59,610 --> 00:22:06,000
the entire ERP system was literally

00:22:03,030 --> 00:22:07,260
sequel store Oracle T sequel stored

00:22:06,000 --> 00:22:11,970
procedures that's what they delivered

00:22:07,260 --> 00:22:16,050
customers our web server ran in oral it

00:22:11,970 --> 00:22:20,880
was T sequel so imagine being the

00:22:16,050 --> 00:22:24,180
front-end engineer writing T sequel felt

00:22:20,880 --> 00:22:27,350
bad for those people so what if we had a

00:22:24,180 --> 00:22:30,180
develop mode in our applications right

00:22:27,350 --> 00:22:31,920
most of our web app boilerplates

00:22:30,180 --> 00:22:32,940
includes some kind of admin console

00:22:31,920 --> 00:22:34,110
right because you sit down you're like

00:22:32,940 --> 00:22:35,340
oh I want to build a web app and of

00:22:34,110 --> 00:22:36,780
course I'm gonna have like a book store

00:22:35,340 --> 00:22:38,340
and I'm gonna have books on all these

00:22:36,780 --> 00:22:40,920
kinds of things but then I'm gonna need

00:22:38,340 --> 00:22:43,110
some other experience for the admin who

00:22:40,920 --> 00:22:45,600
can go in and add products or maybe edit

00:22:43,110 --> 00:22:47,460
landing pages or customize certain

00:22:45,600 --> 00:22:48,200
templates for email campaigns and things

00:22:47,460 --> 00:22:50,460
like that

00:22:48,200 --> 00:22:52,620
maybe they should also have a developed

00:22:50,460 --> 00:22:55,140
console right where you can go in and

00:22:52,620 --> 00:22:58,170
you can edit plugins or little

00:22:55,140 --> 00:23:03,630
customization change points within your

00:22:58,170 --> 00:23:06,120
within your product embed an IDE like a

00:23:03,630 --> 00:23:08,010
small IDE or even a full-fledged IDE or

00:23:06,120 --> 00:23:09,780
just have a git repo that contains

00:23:08,010 --> 00:23:12,060
extension points for your production

00:23:09,780 --> 00:23:16,020
application and embed that in your

00:23:12,060 --> 00:23:17,370
production application this has some

00:23:16,020 --> 00:23:19,550
challenges right like you don't you

00:23:17,370 --> 00:23:22,350
don't want to let users just upload

00:23:19,550 --> 00:23:23,910
Brasi code or you know whatever to your

00:23:22,350 --> 00:23:26,460
production environment that's not

00:23:23,910 --> 00:23:29,520
somehow constrained we haven't

00:23:26,460 --> 00:23:32,220
completely lost our minds when you have

00:23:29,520 --> 00:23:33,780
a web application the code you download

00:23:32,220 --> 00:23:36,630
from the internet runs in a sandbox

00:23:33,780 --> 00:23:39,000
right you're downloading your wedding

00:23:36,630 --> 00:23:41,040
websites run code in your production

00:23:39,000 --> 00:23:43,500
your laptop with all your personal

00:23:41,040 --> 00:23:45,210
information think about that right like

00:23:43,500 --> 00:23:47,790
this laptop that's my personal

00:23:45,210 --> 00:23:50,670
production run has all my passwords and

00:23:47,790 --> 00:23:52,740
keys and banking information and all

00:23:50,670 --> 00:23:55,140
sorts of stuff in here and when I

00:23:52,740 --> 00:23:57,210
download a web application if I download

00:23:55,140 --> 00:23:58,279
a toolbar plug-in if that thing's not

00:23:57,210 --> 00:24:00,379
running a sandbox

00:23:58,279 --> 00:24:03,349
doing anything I could download a cool

00:24:00,379 --> 00:24:04,639
you know image macro editor and it could

00:24:03,349 --> 00:24:08,169
just be in the background uploading all

00:24:04,639 --> 00:24:10,840
my contacts alright so we want sandboxes

00:24:08,169 --> 00:24:13,729
so you have an application shell and

00:24:10,840 --> 00:24:16,669
it's inside there you have things like

00:24:13,729 --> 00:24:18,679
your I am your UI maybe your data

00:24:16,669 --> 00:24:21,499
management and your default business

00:24:18,679 --> 00:24:23,029
logic but then you have sandboxes and in

00:24:21,499 --> 00:24:28,159
there you can put little experiments

00:24:23,029 --> 00:24:30,099
just little experiments you still have

00:24:28,159 --> 00:24:31,999
to maintain security and data integrity

00:24:30,099 --> 00:24:33,679
you still need to be concerned about

00:24:31,999 --> 00:24:35,739
things like resource exhaustion right

00:24:33,679 --> 00:24:37,969
like if you let a user create a loop

00:24:35,739 --> 00:24:39,950
they'll create an infinite loop just

00:24:37,969 --> 00:24:40,999
give them enough time right and if you

00:24:39,950 --> 00:24:42,739
don't have the rate controls in place

00:24:40,999 --> 00:24:43,879
that's just gonna spin off and

00:24:42,739 --> 00:24:46,580
eventually are gonna run out of

00:24:43,879 --> 00:24:48,349
something it might be might be CPU it

00:24:46,580 --> 00:24:50,719
might be file handles it might be

00:24:48,349 --> 00:24:52,519
something right they can still introduce

00:24:50,719 --> 00:24:53,690
bugs right somebody can introduce a bug

00:24:52,519 --> 00:24:56,779
you don't necessarily want to let people

00:24:53,690 --> 00:24:59,330
you know SSH into the Gibson and just

00:24:56,779 --> 00:25:00,289
change anything and so at the end of the

00:24:59,330 --> 00:25:03,289
day you still have to be worried about

00:25:00,289 --> 00:25:05,299
change management in production alright

00:25:03,289 --> 00:25:08,779
so maybe you've got a nested set of

00:25:05,299 --> 00:25:11,450
change management so I wanted to kind of

00:25:08,779 --> 00:25:13,369
present some some strategies that I

00:25:11,450 --> 00:25:14,719
think you could take on in your

00:25:13,369 --> 00:25:17,419
application development that might help

00:25:14,719 --> 00:25:19,190
you kind of get towards this ones

00:25:17,419 --> 00:25:21,049
functional core an imperative shell and

00:25:19,190 --> 00:25:22,309
we'll just run through these functional

00:25:21,049 --> 00:25:24,049
core imperative shell it's a phrase

00:25:22,309 --> 00:25:25,820
coined by this guy Gary Bernhardt he's

00:25:24,049 --> 00:25:27,559
got a series of podcasts and talks

00:25:25,820 --> 00:25:29,389
called destroy all software and the

00:25:27,559 --> 00:25:31,580
basic idea is that your application core

00:25:29,389 --> 00:25:33,739
right is implemented in purely

00:25:31,580 --> 00:25:37,159
functional logic it makes no mutations

00:25:33,739 --> 00:25:39,229
write directly select the real world the

00:25:37,159 --> 00:25:40,820
application shell can be montt can't

00:25:39,229 --> 00:25:43,489
mount up can't so data is take your

00:25:40,820 --> 00:25:45,529
application shell the the imperative

00:25:43,489 --> 00:25:47,599
part and make it so that that thing

00:25:45,529 --> 00:25:49,299
can't be changed in production but maybe

00:25:47,599 --> 00:25:51,769
you can change your imperative core

00:25:49,299 --> 00:25:53,179
right so maybe you've got certain kinds

00:25:51,769 --> 00:25:55,759
of control logic and things like that

00:25:53,179 --> 00:25:58,549
that your app that your your imperative

00:25:55,759 --> 00:26:00,460
shell that are stable and go through

00:25:58,549 --> 00:26:02,629
rigorous testing and rigorous deployment

00:26:00,460 --> 00:26:05,419
but then you maybe you can edit this

00:26:02,629 --> 00:26:08,499
imperative the the functional core in

00:26:05,419 --> 00:26:09,660
production so refactoring your software

00:26:08,499 --> 00:26:11,280
do

00:26:09,660 --> 00:26:14,070
is and probably the most powerful is

00:26:11,280 --> 00:26:16,890
declarative programming right sequel

00:26:14,070 --> 00:26:20,910
statements configuration files business

00:26:16,890 --> 00:26:23,490
rules tell the shell what to do not how

00:26:20,910 --> 00:26:26,850
to do it right if you just modify some

00:26:23,490 --> 00:26:27,510
configuration then you can do that in

00:26:26,850 --> 00:26:29,010
production

00:26:27,510 --> 00:26:30,570
I bet lots of you have already done

00:26:29,010 --> 00:26:33,120
something like that or seen something

00:26:30,570 --> 00:26:34,640
like that I worked for a media company

00:26:33,120 --> 00:26:38,400
we wanted to be able to do things like

00:26:34,640 --> 00:26:41,270
on Friday at 6 p.m.

00:26:38,400 --> 00:26:43,680
change the public website to be

00:26:41,270 --> 00:26:45,360
something to announce a new show that

00:26:43,680 --> 00:26:47,100
was going to come out that weekend it's

00:26:45,360 --> 00:26:48,420
all part of our marketing thing people

00:26:47,100 --> 00:26:50,130
go into the production environment they

00:26:48,420 --> 00:26:52,620
make a bunch of changes in the in the

00:26:50,130 --> 00:26:56,070
database in order to make that happen

00:26:52,620 --> 00:26:59,880
and that's just configuration right it's

00:26:56,070 --> 00:27:01,080
just business rules another thing that

00:26:59,880 --> 00:27:02,730
you can try and achieve is immutable

00:27:01,080 --> 00:27:04,380
data and when you're working in data

00:27:02,730 --> 00:27:07,110
science you're generally doing with

00:27:04,380 --> 00:27:08,940
really large sets of data so I would

00:27:07,110 --> 00:27:12,090
suggest you have data pipelines that are

00:27:08,940 --> 00:27:13,740
non-destructive right basically each

00:27:12,090 --> 00:27:15,720
stage in your data product in your data

00:27:13,740 --> 00:27:18,240
pipeline produces some new set of data

00:27:15,720 --> 00:27:20,310
rather than modifying an existing piece

00:27:18,240 --> 00:27:22,350
of data you can leverage tools like

00:27:20,310 --> 00:27:23,880
pachyderm if you haven't heard of

00:27:22,350 --> 00:27:26,190
pachyderm I highly recommend you check

00:27:23,880 --> 00:27:29,150
it out there it's probably the the most

00:27:26,190 --> 00:27:33,000
publicly well known product like that

00:27:29,150 --> 00:27:35,430
for data lineage or data governance but

00:27:33,000 --> 00:27:38,610
basically lets you treat your data

00:27:35,430 --> 00:27:40,230
pipelines in an immutable fashion you

00:27:38,610 --> 00:27:42,750
can another benefit of this is you can

00:27:40,230 --> 00:27:44,580
quickly promote data you've built in

00:27:42,750 --> 00:27:46,860
stages in your production environment

00:27:44,580 --> 00:27:50,150
when you go to production kind of like a

00:27:46,860 --> 00:27:52,230
git merge it's a really powerful concept

00:27:50,150 --> 00:27:53,580
but one problem with this that you'll

00:27:52,230 --> 00:27:55,800
kind of run into is this idea of

00:27:53,580 --> 00:27:57,810
aliasing if I've got different branches

00:27:55,800 --> 00:27:59,430
where maybe I've got a data pipeline

00:27:57,810 --> 00:28:01,050
that goes from some raw data to like a

00:27:59,430 --> 00:28:02,850
like a let's just say like a daily

00:28:01,050 --> 00:28:04,740
metrics file and they have a dashboard

00:28:02,850 --> 00:28:07,380
that consumes that daily metrics file

00:28:04,740 --> 00:28:10,290
but then in my branch I've modified I've

00:28:07,380 --> 00:28:12,690
got daily daily prime right somehow I

00:28:10,290 --> 00:28:14,430
need my dashboard to know that it's got

00:28:12,690 --> 00:28:17,310
a look at daily prime and not the actual

00:28:14,430 --> 00:28:19,410
daily so something to kind of think

00:28:17,310 --> 00:28:21,150
through with your templating so maybe

00:28:19,410 --> 00:28:22,720
you don't just have sequel maybe you've

00:28:21,150 --> 00:28:24,400
got to do some kind of sequel

00:28:22,720 --> 00:28:26,559
so that it knows how to insert which

00:28:24,400 --> 00:28:28,030
table to actually look at don't look at

00:28:26,559 --> 00:28:31,350
the production daily look at the

00:28:28,030 --> 00:28:34,720
modified daily on my branch

00:28:31,350 --> 00:28:37,030
lastly traffic routing you deploy these

00:28:34,720 --> 00:28:37,929
changes up into production right and now

00:28:37,030 --> 00:28:40,030
you want to be able to make them

00:28:37,929 --> 00:28:44,830
accessible to end-users so maybe you've

00:28:40,030 --> 00:28:47,860
got a URL parameter or a JWT capability

00:28:44,830 --> 00:28:51,210
that expresses which branch that user is

00:28:47,860 --> 00:28:53,020
sending their request to interact with

00:28:51,210 --> 00:28:55,059
if you're using like a django

00:28:53,020 --> 00:28:56,620
application let's say this could be

00:28:55,059 --> 00:28:58,630
implemented in middleware pretty easily

00:28:56,620 --> 00:28:59,830
if you're using a service-oriented

00:28:58,630 --> 00:29:01,870
architecture you may need to use

00:28:59,830 --> 00:29:03,400
something like a service mesh in order

00:29:01,870 --> 00:29:05,320
to make sure you've got full isolation

00:29:03,400 --> 00:29:06,880
right because if service a is going to

00:29:05,320 --> 00:29:08,890
talk to service B and it's like hey use

00:29:06,880 --> 00:29:09,970
business rules from branch X you've got

00:29:08,890 --> 00:29:11,710
to make sure that that's going to flow

00:29:09,970 --> 00:29:15,429
through and one way to do that is using

00:29:11,710 --> 00:29:17,700
a service manager so some prior art on

00:29:15,429 --> 00:29:20,500
this try and get through this real quick

00:29:17,700 --> 00:29:22,000
look of is a bi tool that does this so

00:29:20,500 --> 00:29:23,020
if you kind of want to see an example of

00:29:22,000 --> 00:29:26,890
something like this I'd highly recommend

00:29:23,020 --> 00:29:28,780
you look at looker CMS is a lot of CMS's

00:29:26,890 --> 00:29:29,920
have the ability to stage content

00:29:28,780 --> 00:29:33,220
changes that you're going to deploy to

00:29:29,920 --> 00:29:35,080
production and market it on automation

00:29:33,220 --> 00:29:36,580
tools like Optimizely or Monty I bet

00:29:35,080 --> 00:29:38,080
your marketing department is writing

00:29:36,580 --> 00:29:40,679
code in production right now that you've

00:29:38,080 --> 00:29:42,210
never seen and it comes in the form of

00:29:40,679 --> 00:29:44,890
Optimizely

00:29:42,210 --> 00:29:46,720
100% tests right where everybody is in

00:29:44,890 --> 00:29:49,150
the test group and they're just saying

00:29:46,720 --> 00:29:50,290
hey we wanted to change this logo and we

00:29:49,150 --> 00:29:52,300
didn't want to wait for the developers

00:29:50,290 --> 00:29:54,460
to kind of get their act together so we

00:29:52,300 --> 00:29:55,900
just did it with Optimizely right when I

00:29:54,460 --> 00:29:58,650
were to Monty that's actually how we

00:29:55,900 --> 00:30:02,140
sold Mauna Tate a lot of times was hey

00:29:58,650 --> 00:30:03,309
you know CIO you can actually let your

00:30:02,140 --> 00:30:04,600
marketing department make all these

00:30:03,309 --> 00:30:09,820
changes and it won't show up in your

00:30:04,600 --> 00:30:11,559
backlog why isn't this a pass right like

00:30:09,820 --> 00:30:13,330
what Sam what are you talking about this

00:30:11,559 --> 00:30:15,580
is just a platform as-a-service right

00:30:13,330 --> 00:30:17,320
and it shares a lot of similarities but

00:30:15,580 --> 00:30:19,390
you probably shouldn't build your own

00:30:17,320 --> 00:30:22,870
paths I think that the big difference is

00:30:19,390 --> 00:30:27,330
that a path generally you're gonna allow

00:30:22,870 --> 00:30:29,200
yourself to write all sorts of like

00:30:27,330 --> 00:30:30,970
low-level code right you're gonna be

00:30:29,200 --> 00:30:33,130
able to edit that that that function or

00:30:30,970 --> 00:30:34,419
the imperative shell and here we're just

00:30:33,130 --> 00:30:34,890
talking about being able to edit the

00:30:34,419 --> 00:30:39,330
extension

00:30:34,890 --> 00:30:41,730
points so start small use features like

00:30:39,330 --> 00:30:43,679
feature flags or business rules or

00:30:41,730 --> 00:30:45,750
marketing automation tools and explore

00:30:43,679 --> 00:30:47,820
with your existing application how can

00:30:45,750 --> 00:30:49,080
you do things like coding in production

00:30:47,820 --> 00:30:50,730
right maybe you've got a business rules

00:30:49,080 --> 00:30:53,790
engine or maybe you want to introduce

00:30:50,730 --> 00:30:56,790
one and that's a way that you can start

00:30:53,790 --> 00:30:58,080
small in an existing application your

00:30:56,790 --> 00:31:00,270
configuration is code

00:30:58,080 --> 00:31:01,710
I bet lots of you have a database table

00:31:00,270 --> 00:31:04,740
somewhere in your application that's

00:31:01,710 --> 00:31:06,720
actually a configuration file so why not

00:31:04,740 --> 00:31:08,669
take that configuration take it out of

00:31:06,720 --> 00:31:11,370
your database and make it a file that

00:31:08,669 --> 00:31:13,230
you have in version control and then go

00:31:11,370 --> 00:31:15,990
on step further and move it into its own

00:31:13,230 --> 00:31:19,309
git repository and then go one more step

00:31:15,990 --> 00:31:21,630
and move that repository into production

00:31:19,309 --> 00:31:23,970
now you've taken your configuration

00:31:21,630 --> 00:31:28,290
you've turned it into code and you can

00:31:23,970 --> 00:31:30,750
manage it in production so that was kind

00:31:28,290 --> 00:31:34,820
of the story thank you guys for sitting

00:31:30,750 --> 00:31:34,820
through it the Duke UA

00:31:36,860 --> 00:31:40,810

YouTube URL: https://www.youtube.com/watch?v=KqiA4G_hac0


