Title: James Kennedy - Deploy a Serverless Language Model API (Abstractions II Raw Cuts)
Publication date: 2019-11-25
Playlist: Abstractions II
Description: 
	Presented at Abstractions II, a software conference Code & Supply in Pittsburgh, PA August 21-23, 2019. Learn more at http://www.codeandsupply.co or https://abstractions.io. 

The RAW CUTS series is comprised of selections from a few of our stages wherein the raw video was of high enough quality for C&S to release it before post-production. 

Post-production for a community-run conference with as many speakers and as low of a budget as Abstractions is an enormous and time-consuming undertaking. If you're interested in volunteering your time and CPU cycles to help with post-production, we can use your help. Email us at support@codeandsupply.co and we'll get you into the mix. You'll be permitted to credit yourself in the video pre-roll and credits and we'll thank you in this text and on social media.

Interested in sponsoring professional post-production costs in exchange for your company's name and logo in the video forevermore? Contact us at sponsorship@abstractions.io. Opportunities start at $1,000.

-----

This session will serve as an introduction to using GCP's Cloud Run as a service to deploy and host a serverless machine learning prediction API. Pythonâ€™s FastAI libraries will be used for natural language processing predictions which will be easily triggered using HTTPS requests. During a live demonstration, Docker images will be built to contain multiple exported models. Then the serverless application will be deployed based on this image. Prediction requests will then be made using Postman. Additional topics will include transfer learning and alternative natural language services. By seeing the workflow first hand, attendees will be able to build upon this example to deploy their own serverless applications and cost-effectively host custom trained machine learning models.

https://abstractions.io/schedule/#Deploy%20a%20Serverless%20Language%20Model%20API%20-James%20Kennedy
Captions: 
	00:00:00,949 --> 00:00:07,379
okay thanks everyone for coming this

00:00:03,600 --> 00:00:08,940
afternoon I'm James Kennedy I'm going to

00:00:07,379 --> 00:00:12,830
be talking to you about for half an hour

00:00:08,940 --> 00:00:16,490
about something that I cooked up for

00:00:12,830 --> 00:00:19,020
abstractions too I thought it would be

00:00:16,490 --> 00:00:20,820
an interesting thing for me to have to

00:00:19,020 --> 00:00:25,470
go through and for me to have to talk

00:00:20,820 --> 00:00:29,070
about and I look forward to what hearing

00:00:25,470 --> 00:00:33,329
what people think about it and yeah it

00:00:29,070 --> 00:00:34,530
was fun okay so the idea is that we're

00:00:33,329 --> 00:00:37,940
going to set ourselves with a challenge

00:00:34,530 --> 00:00:41,750
we're gonna we're going to try to have a

00:00:37,940 --> 00:00:44,250
by the end of this a conceptual

00:00:41,750 --> 00:00:46,590
understand sexual idea or like draft

00:00:44,250 --> 00:00:49,980
let's say of a workflow where what I

00:00:46,590 --> 00:00:53,640
want to do is I want to prepare a some

00:00:49,980 --> 00:00:55,820
type of deep learning text based model

00:00:53,640 --> 00:00:58,260
and deploy it as an application and

00:00:55,820 --> 00:01:00,480
think about all those things around

00:00:58,260 --> 00:01:04,199
workflow and managing software and

00:01:00,480 --> 00:01:07,619
deploying stuff to the cloud and all of

00:01:04,199 --> 00:01:11,430
that good stuff so what are some caveats

00:01:07,619 --> 00:01:13,939
here so this is not not a professional

00:01:11,430 --> 00:01:18,990
system so don't run off with this and

00:01:13,939 --> 00:01:20,250
you know bet the family farm but you

00:01:18,990 --> 00:01:21,600
know what are we trying to do here

00:01:20,250 --> 00:01:23,759
really we're just trying to reduce the

00:01:21,600 --> 00:01:25,530
time to build this thing reduce the time

00:01:23,759 --> 00:01:28,740
to deploy yet we want something that's

00:01:25,530 --> 00:01:30,720
pretty cheap to play around with we want

00:01:28,740 --> 00:01:33,180
to be conscientious of the resources

00:01:30,720 --> 00:01:36,030
that we're using because that that

00:01:33,180 --> 00:01:38,880
equals both energy and money and right

00:01:36,030 --> 00:01:40,740
now there isn't elaborate testing

00:01:38,880 --> 00:01:46,049
involved in what I'm about to present

00:01:40,740 --> 00:01:47,820
you so there was some amount of casual

00:01:46,049 --> 00:01:49,920
testing we'll say but like a really a

00:01:47,820 --> 00:01:51,600
rigorous testing framework so you've

00:01:49,920 --> 00:01:54,210
really feel confident about what you

00:01:51,600 --> 00:01:58,259
have here not included doesn't not not

00:01:54,210 --> 00:01:59,369
standard at this time so if you have an

00:01:58,259 --> 00:02:02,759
interest I see lots of people have

00:01:59,369 --> 00:02:06,869
computers if you go to that Kennedy net

00:02:02,759 --> 00:02:09,569
you'll find these slides so that should

00:02:06,869 --> 00:02:12,709
be of reference to you if you also go

00:02:09,569 --> 00:02:15,200
there you'll also get a link to the

00:02:12,709 --> 00:02:16,280
page which has the repository which

00:02:15,200 --> 00:02:24,019
we're going to run through we're gonna

00:02:16,280 --> 00:02:26,030
be running through okay so we are going

00:02:24,019 --> 00:02:28,219
to not really spend a lot of time

00:02:26,030 --> 00:02:30,170
talking about fast AI so I have a kind

00:02:28,219 --> 00:02:31,609
of a slide here that we're not going to

00:02:30,170 --> 00:02:34,310
look at the slide very much it's there

00:02:31,609 --> 00:02:36,379
if you want to learn more about it

00:02:34,310 --> 00:02:38,120
there's a lot to learn about basically

00:02:36,379 --> 00:02:41,209
what's the idea behind fast AI fast AI

00:02:38,120 --> 00:02:43,730
is like a higher-level python library

00:02:41,209 --> 00:02:46,760
that sits on type of PI torch it's

00:02:43,730 --> 00:02:48,980
really supposed to be a it's supposed to

00:02:46,760 --> 00:02:51,439
kind of bacon a lot of best practices

00:02:48,980 --> 00:02:53,000
around particularly working with

00:02:51,439 --> 00:02:54,439
computer vision and then as we're

00:02:53,000 --> 00:02:58,400
talking today working with natural

00:02:54,439 --> 00:03:01,129
language text it has some really great

00:02:58,400 --> 00:03:02,750
videos I'm really not going to talk a

00:03:01,129 --> 00:03:05,030
lot about fast die we're gonna we're

00:03:02,750 --> 00:03:07,370
gonna use fast fast di to build this

00:03:05,030 --> 00:03:10,129
thing but there's a whole lot that is

00:03:07,370 --> 00:03:12,500
available on there MOOC really really

00:03:10,129 --> 00:03:15,409
good I really recommend it and yeah

00:03:12,500 --> 00:03:16,790
they're all about yeah they're how do

00:03:15,409 --> 00:03:18,979
you not like people that have a quote

00:03:16,790 --> 00:03:24,079
like that right so we're not we're just

00:03:18,979 --> 00:03:25,430
trying to try to make this accessible so

00:03:24,079 --> 00:03:26,930
we're gonna come back and talk about

00:03:25,430 --> 00:03:29,569
this again but this is essentially what

00:03:26,930 --> 00:03:31,459
we're gonna be using today it's gonna

00:03:29,569 --> 00:03:32,750
this is like a transfer learning concept

00:03:31,459 --> 00:03:36,459
we're gonna talk about transfer learning

00:03:32,750 --> 00:03:38,720
later on with a little bit more graphics

00:03:36,459 --> 00:03:40,220
but essentially what we're gonna do

00:03:38,720 --> 00:03:41,930
today is we're gonna we're gonna create

00:03:40,220 --> 00:03:44,209
a language model that's based on

00:03:41,930 --> 00:03:45,919
Wikipedia text and when I say a language

00:03:44,209 --> 00:03:48,889
model I mean this particular thing that

00:03:45,919 --> 00:03:52,639
we we you people say when they talk

00:03:48,889 --> 00:03:54,709
about text deep learning and a language

00:03:52,639 --> 00:03:56,359
model is just as a model that will

00:03:54,709 --> 00:03:58,159
predict the next word and we'll kind of

00:03:56,359 --> 00:03:59,810
create continuous sentence that's been

00:03:58,159 --> 00:04:01,189
started for it so the ideas that we're

00:03:59,810 --> 00:04:02,900
gonna create one of these models that is

00:04:01,189 --> 00:04:05,109
like a next word predictor with a

00:04:02,900 --> 00:04:08,419
Wikipedia text we're then going to

00:04:05,109 --> 00:04:11,479
leverage this same model using imbd

00:04:08,419 --> 00:04:14,209
video reviews movie reviews and then

00:04:11,479 --> 00:04:17,599
we're going to use that model to do

00:04:14,209 --> 00:04:19,729
classification so yeah we'll draw lots

00:04:17,599 --> 00:04:20,870
of interesting parallels to good stuff

00:04:19,729 --> 00:04:22,190
that's happened in computer version

00:04:20,870 --> 00:04:22,700
computer vision but we'll talk about

00:04:22,190 --> 00:04:24,500
that later

00:04:22,700 --> 00:04:27,310
so anyway a little bit of a

00:04:24,500 --> 00:04:27,310
foreshadowing

00:04:27,880 --> 00:04:33,200
yeah so I kind of want to set

00:04:30,980 --> 00:04:34,880
expectations a little bit here because

00:04:33,200 --> 00:04:36,530
there are a lot of we have phones that

00:04:34,880 --> 00:04:38,240
do all this language stuff all the time

00:04:36,530 --> 00:04:40,910
so I'm not trying to stand up in front

00:04:38,240 --> 00:04:43,070
of you and be like I'm the I'm the next

00:04:40,910 --> 00:04:45,920
Google you know this is natural language

00:04:43,070 --> 00:04:48,920
we've I've figured it out

00:04:45,920 --> 00:04:51,020
but there is this so yeah to put this in

00:04:48,920 --> 00:04:53,810
context for instance open AI this might

00:04:51,020 --> 00:04:56,720
be a group that people are familiar with

00:04:53,810 --> 00:04:58,550
you know I they work on all kinds of

00:04:56,720 --> 00:05:01,430
interesting things they certainly have

00:04:58,550 --> 00:05:03,560
worked on natural language types of deep

00:05:01,430 --> 00:05:04,880
learning applications so this is a this

00:05:03,560 --> 00:05:08,050
is like a cute little web app that

00:05:04,880 --> 00:05:11,780
someone built using on one of their

00:05:08,050 --> 00:05:14,870
language models so this would this would

00:05:11,780 --> 00:05:16,640
be you know something kind of comical to

00:05:14,870 --> 00:05:17,690
what we're gonna do and I have some

00:05:16,640 --> 00:05:19,460
examples here that we're gonna use

00:05:17,690 --> 00:05:22,400
before us or use later in this

00:05:19,460 --> 00:05:25,520
presentation so let's say I took you

00:05:22,400 --> 00:05:27,860
know my favorite part was when and I

00:05:25,520 --> 00:05:29,930
throw this in here and I tell it to

00:05:27,860 --> 00:05:32,780
complete the text so it's gonna start

00:05:29,930 --> 00:05:36,230
spinning up servers and you know getting

00:05:32,780 --> 00:05:39,560
the you know the elds making cookies and

00:05:36,230 --> 00:05:43,310
stuff and what its gonna eventually do

00:05:39,560 --> 00:05:46,820
is it's going to start just adding you

00:05:43,310 --> 00:05:48,500
know random text to this you know some

00:05:46,820 --> 00:05:50,870
words that I randomly that randomly gave

00:05:48,500 --> 00:05:52,340
it and then an idea is that this is you

00:05:50,870 --> 00:05:53,450
know this is an example of what some

00:05:52,340 --> 00:05:54,410
people consider you know

00:05:53,450 --> 00:05:56,720
state-of-the-art

00:05:54,410 --> 00:05:58,640
text generation stuff you know because

00:05:56,720 --> 00:06:00,680
the idea is that this in itself it's

00:05:58,640 --> 00:06:02,330
funny the cue nota at the end of the day

00:06:00,680 --> 00:06:04,520
is we should build stuff that's not

00:06:02,330 --> 00:06:05,930
useful this isn't you know this isn't

00:06:04,520 --> 00:06:09,560
what you want to go bet the family farm

00:06:05,930 --> 00:06:11,180
on right but there's a lot of

00:06:09,560 --> 00:06:13,510
applications that this this kind of is

00:06:11,180 --> 00:06:22,340
this can be foundational it's a more

00:06:13,510 --> 00:06:23,570
complicated things so yeah the idea is

00:06:22,340 --> 00:06:28,790
that this is built on this other model

00:06:23,570 --> 00:06:31,310
GPT to anyway lots lots of text and

00:06:28,790 --> 00:06:33,880
parameter it was complicated guys it

00:06:31,310 --> 00:06:36,350
took a lot of work to make that happen

00:06:33,880 --> 00:06:37,090
so this is going to be we're going to

00:06:36,350 --> 00:06:39,669
use this

00:06:37,090 --> 00:06:41,740
EPIK for the rest of the presentation to

00:06:39,669 --> 00:06:43,960
just kind of trigger stuff for us is

00:06:41,740 --> 00:06:46,300
like what we're gonna be using so I'm

00:06:43,960 --> 00:06:47,710
gonna quickly run through all of the

00:06:46,300 --> 00:06:49,720
steps and then we're gonna more slowly

00:06:47,710 --> 00:06:51,100
go through that but basically what you

00:06:49,720 --> 00:06:52,780
want to imagine is that this down here

00:06:51,100 --> 00:06:55,419
is your laptop if it's in the white box

00:06:52,780 --> 00:06:59,199
and then everything else up top is a as

00:06:55,419 --> 00:07:00,699
a web service okay so what we're gonna

00:06:59,199 --> 00:07:02,380
do is we're gonna start with our

00:07:00,699 --> 00:07:03,940
development machine it's going to have

00:07:02,380 --> 00:07:05,919
our development environment and some

00:07:03,940 --> 00:07:07,510
command line terminal and we're gonna

00:07:05,919 --> 00:07:11,130
have we're gonna you know clone this

00:07:07,510 --> 00:07:17,290
repository essentially we're going to

00:07:11,130 --> 00:07:22,000
use g-cloud and and/or the Google cloud

00:07:17,290 --> 00:07:23,740
platform console to setup a project and

00:07:22,000 --> 00:07:25,960
kind of go through this the oh--this

00:07:23,740 --> 00:07:28,500
administrative stuff right to say you

00:07:25,960 --> 00:07:31,360
know me I know you this is a credit card

00:07:28,500 --> 00:07:35,530
you know give me $300 free for a year

00:07:31,360 --> 00:07:37,510
all that kind of stuff so that the

00:07:35,530 --> 00:07:42,880
develop machines is queued into the

00:07:37,510 --> 00:07:44,740
project we're going to deploy a virtual

00:07:42,880 --> 00:07:46,870
machine that comes pre-installed with

00:07:44,740 --> 00:07:50,800
pipe torch and actually fast AI and

00:07:46,870 --> 00:07:54,220
we'll end up using a client through the

00:07:50,800 --> 00:07:56,320
browser to also then to basically be the

00:07:54,220 --> 00:07:58,630
driver to this virtual machine that's

00:07:56,320 --> 00:08:00,760
going to be where we actually train the

00:07:58,630 --> 00:08:04,360
fast AAA models and where we then push

00:08:00,760 --> 00:08:07,120
those models to cloud storage where they

00:08:04,360 --> 00:08:09,430
then are going to be accessed by a build

00:08:07,120 --> 00:08:12,190
service which is going to create docker

00:08:09,430 --> 00:08:15,550
images and then host those images on a

00:08:12,190 --> 00:08:18,910
container registry and from that

00:08:15,550 --> 00:08:21,820
registry we can just take docker these

00:08:18,910 --> 00:08:24,700
these image images deploy them to cloud

00:08:21,820 --> 00:08:28,270
run which is basically just a very nice

00:08:24,700 --> 00:08:30,460
service for you know you can kind of

00:08:28,270 --> 00:08:32,740
thinking about it as like lambda AWS

00:08:30,460 --> 00:08:34,300
lambda this there's a it's it's an

00:08:32,740 --> 00:08:35,650
except that instead of it being a

00:08:34,300 --> 00:08:37,180
function as a service it's just a

00:08:35,650 --> 00:08:38,800
container as a service so I don't have

00:08:37,180 --> 00:08:41,680
to have this thing run all the time it's

00:08:38,800 --> 00:08:43,000
very cheap for me at start so let's run

00:08:41,680 --> 00:08:44,020
through this a little bit more in depth

00:08:43,000 --> 00:08:45,880
because what we're gonna do at the end

00:08:44,020 --> 00:08:47,709
then is we're gonna actually be able to

00:08:45,880 --> 00:08:50,230
you know use the web browser to make a

00:08:47,709 --> 00:08:52,240
basic requests to this thing or use

00:08:50,230 --> 00:08:55,540
Postman to kind of facilitate that

00:08:52,240 --> 00:08:58,360
process so this either you're familiar

00:08:55,540 --> 00:09:00,130
with all these tools and I probably have

00:08:58,360 --> 00:09:02,410
stuff to learn from you or maybe you're

00:09:00,130 --> 00:09:03,700
familiar with half of these and this is

00:09:02,410 --> 00:09:05,800
a good introduction to some other things

00:09:03,700 --> 00:09:10,270
but um this is this is kind of an

00:09:05,800 --> 00:09:11,860
example of a relatively perhaps the

00:09:10,270 --> 00:09:14,010
simplest workflow you could have to do

00:09:11,860 --> 00:09:17,670
this I don't know something like that

00:09:14,010 --> 00:09:22,450
okay so we're gonna go we're gonna go

00:09:17,670 --> 00:09:26,590
clone this we're gonna go clone this

00:09:22,450 --> 00:09:29,410
repository so as I was mentioning right

00:09:26,590 --> 00:09:30,610
if you go to that Kennedy dotnet you'll

00:09:29,410 --> 00:09:33,070
land on this page so you'll have the

00:09:30,610 --> 00:09:34,930
slides and then you'll also get a couple

00:09:33,070 --> 00:09:36,730
links down here so if we go to the

00:09:34,930 --> 00:09:38,890
github page let's take a look at what

00:09:36,730 --> 00:09:41,470
we're assigning ourselves up for all

00:09:38,890 --> 00:09:45,150
right and once again I apologize there's

00:09:41,470 --> 00:09:46,990
a lot more to have been done but

00:09:45,150 --> 00:09:51,310
hopefully this is will be sufficient for

00:09:46,990 --> 00:09:54,280
now just to get us oriented right so the

00:09:51,310 --> 00:09:56,680
idea is that we're going to essentially

00:09:54,280 --> 00:09:58,960
readme is this tiny sad excuse for a

00:09:56,680 --> 00:10:02,980
readme document the make file will be

00:09:58,960 --> 00:10:04,480
our main method for you know kind of

00:10:02,980 --> 00:10:10,930
quarterbacking from our development

00:10:04,480 --> 00:10:12,310
environment the lab files includes just

00:10:10,930 --> 00:10:13,780
an example of notebook that you would

00:10:12,310 --> 00:10:15,940
then deploy to your virtual machine for

00:10:13,780 --> 00:10:17,740
training and includes all the code for

00:10:15,940 --> 00:10:19,360
training the models and then deploying

00:10:17,740 --> 00:10:22,600
them to storage so they're accessible to

00:10:19,360 --> 00:10:25,060
the build service and then the the base

00:10:22,600 --> 00:10:26,980
image is the simplest docker image in

00:10:25,060 --> 00:10:28,990
the or sorry not the simplest it's the

00:10:26,980 --> 00:10:31,150
it's the biggest docker image because it

00:10:28,990 --> 00:10:34,210
it packs up all the Python requirements

00:10:31,150 --> 00:10:35,890
it packages up the models from cloud

00:10:34,210 --> 00:10:38,140
storage so it's pretty beefy and takes a

00:10:35,890 --> 00:10:40,210
little while to build the app image is

00:10:38,140 --> 00:10:42,520
much smaller and just bill bit basically

00:10:40,210 --> 00:10:44,230
just extends the base image so all it

00:10:42,520 --> 00:10:48,810
does is then just adds an app layer on

00:10:44,230 --> 00:10:52,540
top of this other already defined

00:10:48,810 --> 00:10:55,810
container definition so we would end up

00:10:52,540 --> 00:10:57,880
pulling that and and you know we would

00:10:55,810 --> 00:11:01,210
have something essentially that would

00:10:57,880 --> 00:11:03,240
look like this I was fooling around with

00:11:01,210 --> 00:11:04,980
text sizes but let's

00:11:03,240 --> 00:11:17,150
let's keep fooling around with text

00:11:04,980 --> 00:11:20,150
sizes with fonts bigger 1620 that's good

00:11:17,150 --> 00:11:20,150
okay

00:11:23,869 --> 00:11:36,389
so we'll keep charging through this yeah

00:11:32,490 --> 00:11:38,699
so I'm not gonna spend a lot of time

00:11:36,389 --> 00:11:39,749
about the Google cloud stuff because

00:11:38,699 --> 00:11:42,899
maybe you've already worked with other

00:11:39,749 --> 00:11:43,709
clouds before and they have little

00:11:42,899 --> 00:11:45,089
things that are different but

00:11:43,709 --> 00:11:46,679
essentially we're authenticating you

00:11:45,089 --> 00:11:47,850
know go we've got a great documentation

00:11:46,679 --> 00:11:50,579
you should go I thought kick yourself

00:11:47,850 --> 00:11:52,050
make a project you know here's a great

00:11:50,579 --> 00:11:53,459
link you know step by step guide

00:11:52,050 --> 00:11:54,990
installation and setup better than

00:11:53,459 --> 00:11:58,499
anything anything that I've written for

00:11:54,990 --> 00:11:59,819
you today okay so let's start up with

00:11:58,499 --> 00:12:02,939
like really what this next step in the

00:11:59,819 --> 00:12:03,839
process is deploying this virtual

00:12:02,939 --> 00:12:08,249
machine that we're going to do our

00:12:03,839 --> 00:12:10,619
training on what I call in this case

00:12:08,249 --> 00:12:12,089
make VM which really just is like start

00:12:10,619 --> 00:12:15,300
this machine up if it hasn't been

00:12:12,089 --> 00:12:17,009
started which is to contrast deploy

00:12:15,300 --> 00:12:18,149
which is this ship has never been

00:12:17,009 --> 00:12:20,990
launched before we're launching this

00:12:18,149 --> 00:12:23,850
ship for the first time so we're really

00:12:20,990 --> 00:12:26,189
either creating the virtual machine or

00:12:23,850 --> 00:12:27,779
just starting it make lab is just an SSH

00:12:26,189 --> 00:12:29,939
command to just say I want to I'm just

00:12:27,779 --> 00:12:32,339
gonna send Jupiter lab over this

00:12:29,939 --> 00:12:34,230
particular port and then make stop just

00:12:32,339 --> 00:12:38,100
shuts it down so if you want to look at

00:12:34,230 --> 00:12:41,100
all of those those are all those are all

00:12:38,100 --> 00:12:42,749
in the make file here and they're all

00:12:41,100 --> 00:12:44,220
really just g-cloud commands right

00:12:42,749 --> 00:12:46,769
because what we're all we're doing is

00:12:44,220 --> 00:12:48,480
you know make deploy lab is really just

00:12:46,769 --> 00:12:50,279
this incantation that says I want to

00:12:48,480 --> 00:12:52,259
start a computer instance and have all

00:12:50,279 --> 00:12:55,589
of these I want it to be big and beefy

00:12:52,259 --> 00:13:00,300
and in particular have a you know this

00:12:55,589 --> 00:13:01,709
particular platform for really this that

00:13:00,300 --> 00:13:03,480
they have their own image here that

00:13:01,709 --> 00:13:06,299
specifically has everything you need for

00:13:03,480 --> 00:13:11,790
fast AI and PI torch and all this so

00:13:06,299 --> 00:13:14,819
let's actually kick one of these on so I

00:13:11,790 --> 00:13:16,379
don't I should have actually I should

00:13:14,819 --> 00:13:19,259
have done this before we started the

00:13:16,379 --> 00:13:21,809
talk this is also a little bit small

00:13:19,259 --> 00:13:24,240
alright just trying to figure out how to

00:13:21,809 --> 00:13:25,379
make this bigger but essentially what

00:13:24,240 --> 00:13:28,290
we're doing is we're just gonna start up

00:13:25,379 --> 00:13:30,779
this VM and we'll kind of keep jumping

00:13:28,290 --> 00:13:33,480
jumping in and out as I can give you

00:13:30,779 --> 00:13:35,399
guys examples of what we're what we're

00:13:33,480 --> 00:13:36,060
looking at here but when I'm gonna just

00:13:35,399 --> 00:13:39,300
just so you can

00:13:36,060 --> 00:13:41,400
what I'm going to do is I'm going to do

00:13:39,300 --> 00:13:43,230
the V make V M that's going to kick this

00:13:41,400 --> 00:13:45,720
thing on and then I'm going to do make

00:13:43,230 --> 00:13:48,240
lab and make lad just is essentially an

00:13:45,720 --> 00:13:50,670
SSH forwarding tax so I now have access

00:13:48,240 --> 00:13:52,110
to this this sum how many people have

00:13:50,670 --> 00:13:53,520
used Jupiter because that's what the

00:13:52,110 --> 00:13:54,720
whole process is great so a lot of

00:13:53,520 --> 00:13:57,960
people really know about this which is

00:13:54,720 --> 00:14:07,170
good so it'll take a second and we'll

00:13:57,960 --> 00:14:10,310
end up looking at what those end up

00:14:07,170 --> 00:14:15,680
looking at what those are like OOP

00:14:10,310 --> 00:14:15,680
not the lab okay

00:14:29,280 --> 00:14:34,200
so while we wait to make sure that

00:14:31,710 --> 00:14:36,420
everything is up and running the basic

00:14:34,200 --> 00:14:38,490
idea of what we're going to be really

00:14:36,420 --> 00:14:40,530
using as what I'm gonna cover from fast

00:14:38,490 --> 00:14:43,680
day I today has to do with saving files

00:14:40,530 --> 00:14:45,570
and basically the framework for saving

00:14:43,680 --> 00:14:51,170
at night and not just files but models

00:14:45,570 --> 00:14:54,090
so Learner really is like the the the

00:14:51,170 --> 00:14:56,310
convention that you would call whatever

00:14:54,090 --> 00:14:59,160
model you're working with in fast AI you

00:14:56,310 --> 00:15:01,140
can use the save or load functions on

00:14:59,160 --> 00:15:02,730
this object if you're going to end up

00:15:01,140 --> 00:15:04,800
using this in the same workstation and

00:15:02,730 --> 00:15:06,660
it has just a default place in its

00:15:04,800 --> 00:15:09,360
working directory where this file gets

00:15:06,660 --> 00:15:11,220
saved for this model this is this is

00:15:09,360 --> 00:15:12,390
nice if you need to you want to come

00:15:11,220 --> 00:15:14,240
back and start training from a

00:15:12,390 --> 00:15:16,500
particular point if you want to really

00:15:14,240 --> 00:15:19,920
export this thing you use the export

00:15:16,500 --> 00:15:22,370
import commands which is what we end up

00:15:19,920 --> 00:15:22,370
doing

00:15:32,029 --> 00:15:45,920
what we end up doing in these in these

00:15:35,149 --> 00:15:50,390
notebooks here which not that I love

00:15:45,920 --> 00:15:52,660
showing my notebooks in this IDE but I

00:15:50,390 --> 00:15:52,660
will

00:16:10,269 --> 00:16:15,199
okay well I'm glad that everyone knows

00:16:13,609 --> 00:16:17,319
about Jupiter and they'll forgive me for

00:16:15,199 --> 00:16:22,579
not being able to SSH to it for my

00:16:17,319 --> 00:16:24,319
cellular phone right now and the very

00:16:22,579 --> 00:16:27,139
least believe me this Jupiter notebook

00:16:24,319 --> 00:16:28,970
right it does this thing and it trust me

00:16:27,139 --> 00:16:31,399
it you can export and load these models

00:16:28,970 --> 00:16:33,889
and you can export them too

00:16:31,399 --> 00:16:37,339
you can use you can use the bank symbol

00:16:33,889 --> 00:16:42,159
right to use the GU to Google storage

00:16:37,339 --> 00:16:42,159
util to export this to the cloud storage

00:16:42,909 --> 00:16:51,199
so let's talk this building process is a

00:16:45,619 --> 00:16:54,079
little complicated we've got building

00:16:51,199 --> 00:16:56,359
the base image which we're going to use

00:16:54,079 --> 00:16:58,339
g-cloud builds which will be will be our

00:16:56,359 --> 00:16:59,599
service the SERP so we're we're not

00:16:58,339 --> 00:17:00,679
going to do any building on our local

00:16:59,599 --> 00:17:02,209
development environment we're gonna have

00:17:00,679 --> 00:17:03,979
a Google cloud do all of our image

00:17:02,209 --> 00:17:06,679
building for us so I'm going to submit

00:17:03,979 --> 00:17:08,990
to Google this cloud build the amyl file

00:17:06,679 --> 00:17:14,419
which defines all of the steps in this

00:17:08,990 --> 00:17:16,129
process so the most important part are

00:17:14,419 --> 00:17:19,809
really the real reason why we need to do

00:17:16,129 --> 00:17:24,789
this is that I need to copy in these

00:17:19,809 --> 00:17:27,559
exported models in lines 2 through 5

00:17:24,789 --> 00:17:28,669
this is basically defining what's the

00:17:27,559 --> 00:17:30,019
build environment because you can

00:17:28,669 --> 00:17:31,190
imagine this is the kiss is the

00:17:30,019 --> 00:17:32,899
complexity of so many environments I've

00:17:31,190 --> 00:17:34,610
got my laptop environment I've got my

00:17:32,899 --> 00:17:35,960
Jupiter VM environment I've got this

00:17:34,610 --> 00:17:37,220
environment that's gonna actually do the

00:17:35,960 --> 00:17:39,320
built and that's what we've got right

00:17:37,220 --> 00:17:44,809
here so the build environment is going

00:17:39,320 --> 00:17:47,419
to get these these exported models in

00:17:44,809 --> 00:17:48,830
from cloud storage into the build

00:17:47,419 --> 00:17:50,899
environment and then we're just going to

00:17:48,830 --> 00:17:53,299
run our we're just going to run docker

00:17:50,899 --> 00:17:56,299
on on the particular dogger file file

00:17:53,299 --> 00:17:58,970
here and all we're really doing in this

00:17:56,299 --> 00:18:00,529
case is as we said before just

00:17:58,970 --> 00:18:02,029
installing the requirements doing all

00:18:00,529 --> 00:18:03,740
this heavy lifting so that every single

00:18:02,029 --> 00:18:04,970
time we want to change a little

00:18:03,740 --> 00:18:06,980
something in our app we don't have to

00:18:04,970 --> 00:18:11,149
redo all this heavy lifting we're going

00:18:06,980 --> 00:18:12,230
to install all of the OS OS level stuff

00:18:11,149 --> 00:18:14,539
we're going to install whatever

00:18:12,230 --> 00:18:16,600
requirements we have in a requirements

00:18:14,539 --> 00:18:18,980
file and then we're going to copy in

00:18:16,600 --> 00:18:20,650
using just standard docker language

00:18:18,980 --> 00:18:24,280
these folder

00:18:20,650 --> 00:18:26,710
that have models in them and just to see

00:18:24,280 --> 00:18:34,360
at the top the the requirements file

00:18:26,710 --> 00:18:37,900
isn't too crazy we have to use a special

00:18:34,360 --> 00:18:39,640
version of fast AI which will talk them

00:18:37,900 --> 00:18:41,770
a little bit more about later if we have

00:18:39,640 --> 00:18:43,750
the time but this really has to do that

00:18:41,770 --> 00:18:46,720
there's a constraint in the natural

00:18:43,750 --> 00:18:49,000
language portion of fast AI when you

00:18:46,720 --> 00:18:50,850
only get one CPU which is a major

00:18:49,000 --> 00:18:53,710
restriction for most serverless

00:18:50,850 --> 00:18:56,500
deployments so we have a kind of a

00:18:53,710 --> 00:18:58,030
customization to the standard fast AI

00:18:56,500 --> 00:19:03,640
library so we can use it in a server

00:18:58,030 --> 00:19:07,270
list deployment and we install pi torch

00:19:03,640 --> 00:19:08,440
from a wheel and of this these flask

00:19:07,270 --> 00:19:18,550
framework stuff that we're going to use

00:19:08,440 --> 00:19:24,100
to just run this this API so if I was to

00:19:18,550 --> 00:19:26,590
do something like I'm hopefully this

00:19:24,100 --> 00:19:29,290
will work you can't really see that very

00:19:26,590 --> 00:19:32,950
well but what I'm doing in this case is

00:19:29,290 --> 00:19:36,940
I'm calling a build command not on the

00:19:32,950 --> 00:19:39,640
base image but on the app image here and

00:19:36,940 --> 00:19:43,120
the app image is even simpler right

00:19:39,640 --> 00:19:46,300
because all I needed all I'm doing here

00:19:43,120 --> 00:19:47,950
is I'm we already built this base image

00:19:46,300 --> 00:19:54,240
which has all the requirements in it so

00:19:47,950 --> 00:19:54,240
all we really need to do here is is it

00:19:54,540 --> 00:19:59,740
call from that build image which has

00:19:58,210 --> 00:20:03,280
been already built for us it includes

00:19:59,740 --> 00:20:08,650
all of the requirements copying what our

00:20:03,280 --> 00:20:14,970
demo Python app is in this case and call

00:20:08,650 --> 00:20:18,970
the Guney Korn command or jr. jewnicorn

00:20:14,970 --> 00:20:23,920
to launch it and what that image what

00:20:18,970 --> 00:20:30,850
that that application looks like once

00:20:23,920 --> 00:20:32,050
again is being built using flask so if a

00:20:30,850 --> 00:20:35,800
lot of people have used Jupiter I'm sure

00:20:32,050 --> 00:20:38,560
you're familiar with flask one of the

00:20:35,800 --> 00:20:42,190
more convenient aspects of this's will

00:20:38,560 --> 00:20:44,950
use Flass restful to kind of manage some

00:20:42,190 --> 00:20:46,570
of the different resources that you'd

00:20:44,950 --> 00:20:49,360
have in an API and it's interesting

00:20:46,570 --> 00:20:51,550
coming from using AWS lambda for

00:20:49,360 --> 00:20:53,200
instance an AWS lambda what you end up

00:20:51,550 --> 00:20:54,970
doing is you end up having all of these

00:20:53,200 --> 00:20:56,620
functions that you define in a deploy as

00:20:54,970 --> 00:20:58,750
functions and then you have to configure

00:20:56,620 --> 00:21:00,970
this API gateway as kind of this

00:20:58,750 --> 00:21:02,170
separate resource well in this case what

00:21:00,970 --> 00:21:04,390
you get to do is you get to have like

00:21:02,170 --> 00:21:05,650
one flask application and set up all

00:21:04,390 --> 00:21:09,190
your different resources in this one

00:21:05,650 --> 00:21:11,080
file so your so in some ways you lose

00:21:09,190 --> 00:21:14,020
that that structure of having API

00:21:11,080 --> 00:21:16,120
gateway as being this this kind of a

00:21:14,020 --> 00:21:18,940
whole service that you get to configure

00:21:16,120 --> 00:21:20,620
however you want but in some ways it's a

00:21:18,940 --> 00:21:24,130
lot less complicated here you know we

00:21:20,620 --> 00:21:26,800
kind of have a weird erect Lea creating

00:21:24,130 --> 00:21:28,300
this because it's a container level I'm

00:21:26,800 --> 00:21:30,730
managing at this at a container level

00:21:28,300 --> 00:21:32,530
I'm not handing over function and the

00:21:30,730 --> 00:21:40,270
same way that you do when you do with

00:21:32,530 --> 00:21:43,030
lambda AWS lambda so yeah so you can now

00:21:40,270 --> 00:21:46,750
we can we've made this app or we've made

00:21:43,030 --> 00:21:48,120
this image down here and just to kind of

00:21:46,750 --> 00:21:52,210
cover it quickly

00:21:48,120 --> 00:21:54,340
essentially what it what it did was this

00:21:52,210 --> 00:21:57,790
was the this was just the app image that

00:21:54,340 --> 00:22:00,490
we did it pulled in the old it pulled in

00:21:57,790 --> 00:22:04,360
the older version of the base image you

00:22:00,490 --> 00:22:09,760
can't see this here but base SLM it

00:22:04,360 --> 00:22:13,930
pulls the old image in and install a

00:22:09,760 --> 00:22:21,280
copies in the main and just says we're

00:22:13,930 --> 00:22:25,090
going to start the server so we'll set

00:22:21,280 --> 00:22:27,460
this up it's pretty it's this is

00:22:25,090 --> 00:22:28,980
actually a beta version of a Google

00:22:27,460 --> 00:22:32,020
service so this is a relatively new

00:22:28,980 --> 00:22:34,120
framework that Google's put out so you

00:22:32,020 --> 00:22:39,910
can see I actually have to use beta in

00:22:34,120 --> 00:22:42,130
my incantation here so yeah how many

00:22:39,910 --> 00:22:44,759
people have used cloud run Google Cloud

00:22:42,130 --> 00:22:48,299
run yeah so

00:22:44,759 --> 00:22:49,609
yeah there there definitely uh it's some

00:22:48,299 --> 00:22:51,960
things to think about but it's

00:22:49,609 --> 00:22:53,999
definitely been interesting to work with

00:22:51,960 --> 00:22:58,049
so the nice thing is that right away

00:22:53,999 --> 00:22:59,519
what it'll do is it'll take this take

00:22:58,049 --> 00:23:02,129
this container that I sold it to deploy

00:22:59,519 --> 00:23:04,830
it'll create an endpoint with that

00:23:02,129 --> 00:23:07,169
associated with it this might take a

00:23:04,830 --> 00:23:08,730
little bit of a while because sometimes

00:23:07,169 --> 00:23:10,580
after a new deployment all of this yada

00:23:08,730 --> 00:23:16,350
yada um

00:23:10,580 --> 00:23:20,669
but essentially what we have now is the

00:23:16,350 --> 00:23:22,259
ability to really you know have

00:23:20,669 --> 00:23:24,960
something very comparable to what this

00:23:22,259 --> 00:23:32,340
this guy did I mean it's not it's not

00:23:24,960 --> 00:23:38,119
going to be nearly as pretty so well

00:23:32,340 --> 00:23:38,119
that gets set up let's run through a

00:23:38,539 --> 00:23:42,809
little bit what's happening with the

00:23:41,609 --> 00:23:46,009
classic what we're going to do with

00:23:42,809 --> 00:23:48,419
classification here so this particular

00:23:46,009 --> 00:23:52,980
model that we're gonna use is built on

00:23:48,419 --> 00:23:55,169
you LM fit which was really led by

00:23:52,980 --> 00:24:00,539
Jeremy Howard who's one of the guys one

00:23:55,169 --> 00:24:04,320
of the you know main drivers behind fast

00:24:00,539 --> 00:24:07,070
AI as we were talking about this before

00:24:04,320 --> 00:24:09,539
one of the differences between kind of

00:24:07,070 --> 00:24:10,619
traditional machine learning and what

00:24:09,539 --> 00:24:15,509
we're going to be doing in this case

00:24:10,619 --> 00:24:17,249
really is that in traditional ml you

00:24:15,509 --> 00:24:19,649
kind of have a task that you train to

00:24:17,249 --> 00:24:21,960
and you have a trap that you train to

00:24:19,649 --> 00:24:23,519
and that if these you kind of approach

00:24:21,960 --> 00:24:26,220
each task as if you've never done

00:24:23,519 --> 00:24:27,989
anything else before and that obviously

00:24:26,220 --> 00:24:29,309
this is not you know there's opportunity

00:24:27,989 --> 00:24:32,340
here to say okay well we have some

00:24:29,309 --> 00:24:35,220
algorithm here that you know was

00:24:32,340 --> 00:24:37,139
developed or some some you know set of

00:24:35,220 --> 00:24:39,600
weights or encodings or embeddings that

00:24:37,139 --> 00:24:42,090
was maybe took a long time to develop

00:24:39,600 --> 00:24:44,279
that when applied to this other task is

00:24:42,090 --> 00:24:46,230
you might be useful and so for any of

00:24:44,279 --> 00:24:48,210
you that went to the computer vision

00:24:46,230 --> 00:24:49,980
talk I think it was that two o'clock or

00:24:48,210 --> 00:24:52,499
something like this you talked about how

00:24:49,980 --> 00:24:54,809
you do this two-step thing right where

00:24:52,499 --> 00:24:56,970
you have these layers right where you

00:24:54,809 --> 00:24:57,810
you know people don't people don't

00:24:56,970 --> 00:25:00,090
really train

00:24:57,810 --> 00:25:01,200
models like right from the lake from

00:25:00,090 --> 00:25:03,030
scratch if they're doing classification

00:25:01,200 --> 00:25:05,010
they'll build it on ResNet or something

00:25:03,030 --> 00:25:07,050
like this right and the whole idea here

00:25:05,010 --> 00:25:09,210
is that it's like look we're you know

00:25:07,050 --> 00:25:12,630
some of these we can we can stop at some

00:25:09,210 --> 00:25:14,340
kind of intermediate step place in this

00:25:12,630 --> 00:25:16,800
process we built some model here that's

00:25:14,340 --> 00:25:18,900
all about identifying where a face is in

00:25:16,800 --> 00:25:21,240
a photo and now I'm going to use that

00:25:18,900 --> 00:25:25,050
same model to now just identify and

00:25:21,240 --> 00:25:26,430
classify faces and I'm build upon this

00:25:25,050 --> 00:25:28,530
individual application to kind of do

00:25:26,430 --> 00:25:31,530
something completely different and

00:25:28,530 --> 00:25:34,020
that's it's kind of a similar idea to

00:25:31,530 --> 00:25:37,610
what you're doing in fast AI within with

00:25:34,020 --> 00:25:37,610
this this concept called the encoder and

00:25:37,670 --> 00:25:43,230
this really is this this is really the

00:25:40,110 --> 00:25:44,880
the interface between the language model

00:25:43,230 --> 00:25:47,930
model which is just the model that rants

00:25:44,880 --> 00:25:50,520
with the model that is used to classify

00:25:47,930 --> 00:25:52,470
text and so in the example that we'll

00:25:50,520 --> 00:25:54,630
have today we'll have the example would

00:25:52,470 --> 00:25:57,300
be whether or not it was a good review

00:25:54,630 --> 00:25:59,910
or a bad review so this is an example of

00:25:57,300 --> 00:26:01,740
what gets the gibberish that comes out

00:25:59,910 --> 00:26:03,540
when you go to the root resource right

00:26:01,740 --> 00:26:06,540
on this application I have it just

00:26:03,540 --> 00:26:08,040
printing out all the same tasks that

00:26:06,540 --> 00:26:10,410
starts with my favorite part was when

00:26:08,040 --> 00:26:11,940
and then it just creates creates

00:26:10,410 --> 00:26:13,320
gibberish after this point so it does

00:26:11,940 --> 00:26:15,060
this five times with certain number of

00:26:13,320 --> 00:26:16,920
words and see it's all really related to

00:26:15,060 --> 00:26:19,440
movies right I mean it's definitely the

00:26:16,920 --> 00:26:23,040
imbd data set that was behind this thing

00:26:19,440 --> 00:26:24,360
and you can you know REIT rigger this

00:26:23,040 --> 00:26:26,640
you know I can just refresh this page

00:26:24,360 --> 00:26:28,920
and the beautiful thing about this is

00:26:26,640 --> 00:26:31,380
that if you end up if you you could

00:26:28,920 --> 00:26:33,030
definitely it's kind of the late

00:26:31,380 --> 00:26:34,380
application for server lists if you know

00:26:33,030 --> 00:26:35,460
at least as a toy right like you

00:26:34,380 --> 00:26:37,200
certainly don't want to be hosting this

00:26:35,460 --> 00:26:38,730
indefinitely would be like the real

00:26:37,200 --> 00:26:41,340
point like you know you don't want to

00:26:38,730 --> 00:26:47,490
have to have this beat up all the time

00:26:41,340 --> 00:26:49,740
and what we can please feel free to read

00:26:47,490 --> 00:26:51,960
all this it's good what we can end up

00:26:49,740 --> 00:26:53,490
doing is actually using postman to kind

00:26:51,960 --> 00:26:54,780
of show the additional capabilities of

00:26:53,490 --> 00:27:02,520
this so how many people have used

00:26:54,780 --> 00:27:04,500
postman great so we'll just you know so

00:27:02,520 --> 00:27:09,270
this is the this is be an example also

00:27:04,500 --> 00:27:10,269
on the root resource so we're not doing

00:27:09,270 --> 00:27:11,679
anything

00:27:10,269 --> 00:27:17,919
passing any parameters or anything like

00:27:11,679 --> 00:27:22,479
this and yeah we get a whole bunch of a

00:27:17,919 --> 00:27:24,129
whole bunch of text here we could also

00:27:22,479 --> 00:27:25,179
for instance this would be an example of

00:27:24,129 --> 00:27:28,589
what we're gonna do is we're going to

00:27:25,179 --> 00:27:31,749
have it I can pass a parameter to this

00:27:28,589 --> 00:27:33,129
to this to this model have it say stuff

00:27:31,749 --> 00:27:37,839
for me right so we're still in gibberish

00:27:33,129 --> 00:27:39,399
land but you know this would be you know

00:27:37,839 --> 00:27:41,919
this this now shows like you have some

00:27:39,399 --> 00:27:43,989
capability you know you can you can make

00:27:41,919 --> 00:27:45,700
it customizable or we can say something

00:27:43,989 --> 00:27:49,200
else like what if someone want to say we

00:27:45,700 --> 00:27:49,200
can have this imbd thing talk for us

00:27:56,210 --> 00:28:07,039
excellent let's see the best thing

00:28:04,070 --> 00:28:09,080
you've ever read before I'm sure so the

00:28:07,039 --> 00:28:11,240
real power once again is that like not

00:28:09,080 --> 00:28:13,580
necessarily in the gibberish right so

00:28:11,240 --> 00:28:15,289
the real I don't know if there's really

00:28:13,580 --> 00:28:17,090
much value in this either but it

00:28:15,289 --> 00:28:18,799
certainly is more of an example right so

00:28:17,090 --> 00:28:22,249
this is this would be I don't know if

00:28:18,799 --> 00:28:23,480
people have noticed this but there so

00:28:22,249 --> 00:28:27,379
the first thing is that I was able to

00:28:23,480 --> 00:28:30,679
route this application to a custom URL

00:28:27,379 --> 00:28:33,139
and instead of going right to the route

00:28:30,679 --> 00:28:35,419
we're going to go to an RC resource

00:28:33,139 --> 00:28:37,220
which is just going to be review

00:28:35,419 --> 00:28:38,570
classification so now we're sending a

00:28:37,220 --> 00:28:41,749
particular request in this case I can

00:28:38,570 --> 00:28:45,139
set different reviews so if I say don't

00:28:41,749 --> 00:28:48,440
waste your time you know being like the

00:28:45,139 --> 00:28:52,039
review text write it now this particular

00:28:48,440 --> 00:28:53,869
model has been trained not just to

00:28:52,039 --> 00:28:55,970
predict what the next word is it's it's

00:28:53,869 --> 00:28:58,249
seen all of this language associated

00:28:55,970 --> 00:29:00,649
with movie reviews and whether or not it

00:28:58,249 --> 00:29:02,690
was positive or negative right so it's

00:29:00,649 --> 00:29:05,059
been trained as a classifier to you know

00:29:02,690 --> 00:29:06,529
it saw what what was we you know what

00:29:05,059 --> 00:29:09,499
humans labeled is good and what was

00:29:06,529 --> 00:29:10,879
labeled as bad reviews and in this case

00:29:09,499 --> 00:29:12,679
the first number suggests the

00:29:10,879 --> 00:29:14,450
probability or the confidence that it's

00:29:12,679 --> 00:29:15,679
a bat you know this is someone who

00:29:14,450 --> 00:29:18,200
doesn't like the movie and versus what

00:29:15,679 --> 00:29:22,940
someone might might might like it so if

00:29:18,200 --> 00:29:28,220
we were to go and say like I loved the

00:29:22,940 --> 00:29:30,529
first part one you know that would be

00:29:28,220 --> 00:29:32,330
you know 98% confident oh yeah these

00:29:30,529 --> 00:29:36,470
guys really definitely liked the movie

00:29:32,330 --> 00:29:38,570
so still a toy example thanks for

00:29:36,470 --> 00:29:40,580
sticking through it with me and seeing

00:29:38,570 --> 00:29:41,690
it through I'm I apologize that you were

00:29:40,580 --> 00:29:44,119
gonna work I'm glad a lot of people have

00:29:41,690 --> 00:29:46,909
seen it so it's not like we missed out

00:29:44,119 --> 00:29:49,700
on something earth-shattering

00:29:46,909 --> 00:29:51,919
and essentially what are the takeaway is

00:29:49,700 --> 00:29:53,960
we can you know getting we want to go

00:29:51,919 --> 00:29:55,759
from our Jupiter deployment to some

00:29:53,960 --> 00:29:57,440
cloud storage so we're not pulling

00:29:55,759 --> 00:29:59,480
anything we're not pulling any big data

00:29:57,440 --> 00:30:02,149
local to do builds we're gonna do our

00:29:59,480 --> 00:30:04,220
builds remotely ideally you know close

00:30:02,149 --> 00:30:05,970
to where we were doing our training and

00:30:04,220 --> 00:30:07,920
that we want to end up

00:30:05,970 --> 00:30:10,020
serving this service we don't need a GPU

00:30:07,920 --> 00:30:12,630
GPU to do it we want to think about what

00:30:10,020 --> 00:30:14,700
that deployment needs to be on its own

00:30:12,630 --> 00:30:17,550
in an isolated manner so thanks everyone

00:30:14,700 --> 00:30:19,290
for coming I have some closing more more

00:30:17,550 --> 00:30:21,540
closing notes but I'll just stop there

00:30:19,290 --> 00:30:24,740
and yeah you can look it up online

00:30:21,540 --> 00:30:26,550
right so but yeah there were all those

00:30:24,740 --> 00:30:28,860
those little things you had to do to

00:30:26,550 --> 00:30:34,819
make it work so thank you

00:30:28,860 --> 00:30:34,819

YouTube URL: https://www.youtube.com/watch?v=3hE3AocE9-A


