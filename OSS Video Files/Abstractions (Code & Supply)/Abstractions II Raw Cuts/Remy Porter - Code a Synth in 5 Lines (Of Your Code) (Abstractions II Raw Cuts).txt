Title: Remy Porter - Code a Synth in 5 Lines (Of Your Code) (Abstractions II Raw Cuts)
Publication date: 2019-11-25
Playlist: Abstractions II Raw Cuts
Description: 
	Presented at Abstractions II, a software conference Code & Supply in Pittsburgh, PA August 21-23, 2019. Learn more at http://www.codeandsupply.co or https://abstractions.io. 

The RAW CUTS series is comprised of selections from a few of our stages wherein the raw video was of high enough quality for C&S to release it before post-production. 

Post-production for a community-run conference with as many speakers and as low of a budget as Abstractions is an enormous and time-consuming undertaking. If you're interested in volunteering your time and CPU cycles to help with post-production, we can use your help. Email us at support@codeandsupply.co and we'll get you into the mix. You'll be permitted to credit yourself in the video pre-roll and credits and we'll thank you in this text and on social media.

Interested in sponsoring professional post-production costs in exchange for your company's name and logo in the video forevermore? Contact us at sponsorship@abstractions.io. Opportunities start at $1,000.

-----

Inspired by XKCD's "import antigravity", this talk aims to make programming "fun again" by leveraging Python and a handful of libraries to make a programmable synthesizer in an incredibly small amount of code.

From scratch, we'll explore the basics of digital audio synthesis, dive into NumPy's "broadcasting" features, and find ways to make our computers make really weird noises, with an emphasis on how very simple, clear code can lead to surprisingly complex results.

Cover image uses assets from: By Chrisjohnson, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=23282431

Code and slides: https://github.com/RemyPorter/ShadowMusic

https://abstractions.io/schedule/#Code%20a%20Synth%20in%205%20Lines%20(Of%20Your%20Code)-Remy%20Porter
Captions: 
	00:00:00,030 --> 00:00:05,970
all righty howdy everybody it's about hi

00:00:03,750 --> 00:00:07,680
I'm Remy as you can see from the slide

00:00:05,970 --> 00:00:11,340
and from some people calling out about

00:00:07,680 --> 00:00:13,889
it we are here to take a look at how to

00:00:11,340 --> 00:00:16,379
build a synthesizer a musical instrument

00:00:13,889 --> 00:00:20,340
in roughly about five lines of your own

00:00:16,379 --> 00:00:22,890
code as said on Remy by day I am a

00:00:20,340 --> 00:00:25,470
creative coder at a company called ion

00:00:22,890 --> 00:00:28,289
tank we do some installations there some

00:00:25,470 --> 00:00:30,000
people here and do that we do some kind

00:00:28,289 --> 00:00:32,899
of artistic pieces I mostly write

00:00:30,000 --> 00:00:36,120
software that makes LEDs blink pretty I

00:00:32,899 --> 00:00:39,329
am an amateur violinist amateur is a

00:00:36,120 --> 00:00:41,489
fancy way of saying not very good but I

00:00:39,329 --> 00:00:44,219
like music I like playing music and most

00:00:41,489 --> 00:00:47,219
important for this talk I am an

00:00:44,219 --> 00:00:49,649
extremely lazy person and I want to do

00:00:47,219 --> 00:00:51,719
absolutely as little work as I can get

00:00:49,649 --> 00:00:54,840
away with to accomplish a goal and this

00:00:51,719 --> 00:00:56,730
is gonna be really really relevant you

00:00:54,840 --> 00:00:58,250
can see my Twitter my github I'll have

00:00:56,730 --> 00:01:01,050
these on the slides at the end as well

00:00:58,250 --> 00:01:02,579
it's feel free to look them up all of

00:01:01,050 --> 00:01:04,650
the code everything going to play with

00:01:02,579 --> 00:01:06,630
in this session is going to be up on

00:01:04,650 --> 00:01:09,570
that github you'll be able to find it

00:01:06,630 --> 00:01:11,909
there in addition to playing with

00:01:09,570 --> 00:01:15,000
synthesizers this is also a lesson in

00:01:11,909 --> 00:01:16,140
false advertising because I didn't

00:01:15,000 --> 00:01:18,810
actually count how many lines of code

00:01:16,140 --> 00:01:20,570
there are in this session there's

00:01:18,810 --> 00:01:22,890
actually gonna be a lot more than five

00:01:20,570 --> 00:01:24,360
but I can tell you this despite the fact

00:01:22,890 --> 00:01:25,860
that this is going to be probably one of

00:01:24,360 --> 00:01:27,380
the more code heavy talks you're gonna

00:01:25,860 --> 00:01:29,939
see we're gonna look at a lot of code

00:01:27,380 --> 00:01:32,400
it's gonna be a lot of really really

00:01:29,939 --> 00:01:34,860
simple code it's the sort of code that

00:01:32,400 --> 00:01:37,770
is so simple you don't even really need

00:01:34,860 --> 00:01:40,470
like a unit test it's it's one line out

00:01:37,770 --> 00:01:43,140
of a library and you just it's gonna be

00:01:40,470 --> 00:01:45,240
super duper simple code you can do this

00:01:43,140 --> 00:01:47,820
in less than five lines of code wouldn't

00:01:45,240 --> 00:01:49,500
be as interesting and you know counting

00:01:47,820 --> 00:01:50,820
lines of code is kind of a waste of

00:01:49,500 --> 00:01:52,560
everybody's time it doesn't matter how

00:01:50,820 --> 00:01:55,920
much code you write matters what the

00:01:52,560 --> 00:01:58,110
code does but so I don't get in trouble

00:01:55,920 --> 00:02:01,899
for lying this is exactly five lines of

00:01:58,110 --> 00:02:04,689
code this does audio synthesis

00:02:01,899 --> 00:02:07,479
so we have a 5-line synthesizer I didn't

00:02:04,689 --> 00:02:08,860
lie to you at all okay the one thing I

00:02:07,479 --> 00:02:10,690
do want to note here though on this

00:02:08,860 --> 00:02:11,830
these are the two libraries we're gonna

00:02:10,690 --> 00:02:14,650
play with they're gonna do all this in

00:02:11,830 --> 00:02:17,140
Python and we're gonna use two and only

00:02:14,650 --> 00:02:19,360
two libraries for this whole thing we're

00:02:17,140 --> 00:02:20,709
gonna use numpy which is numeric Python

00:02:19,360 --> 00:02:22,569
we're going to talk a little bit about

00:02:20,709 --> 00:02:23,830
what that does we're also gonna use this

00:02:22,569 --> 00:02:25,180
sound device thing we're not going to

00:02:23,830 --> 00:02:27,610
talk about that because I don't care how

00:02:25,180 --> 00:02:30,129
it works it just plays audio and that's

00:02:27,610 --> 00:02:33,519
all I care about it can play audio it's

00:02:30,129 --> 00:02:35,500
only done so we're gonna talk a little

00:02:33,519 --> 00:02:37,269
bit about music we're gonna talk about

00:02:35,500 --> 00:02:40,269
something very very important we're

00:02:37,269 --> 00:02:42,400
gonna talk about time we're gonna use

00:02:40,269 --> 00:02:44,349
what are essentially trivial amounts of

00:02:42,400 --> 00:02:46,629
Python code I actually started this as a

00:02:44,349 --> 00:02:47,980
weekend project cuz I was bored and I

00:02:46,629 --> 00:02:50,349
found myself in a position where I'm

00:02:47,980 --> 00:02:52,360
like it can't be this easy what I'm

00:02:50,349 --> 00:02:55,090
doing can't work this well it can't be

00:02:52,360 --> 00:02:56,349
this simple I'm doing something wrong so

00:02:55,090 --> 00:02:58,239
we have some trivial amounts of Python

00:02:56,349 --> 00:03:00,489
code we're gonna talk about a numpy a

00:02:58,239 --> 00:03:02,470
little bit we are gonna make a lot of

00:03:00,489 --> 00:03:06,100
little bleeps and bloops that's the most

00:03:02,470 --> 00:03:09,850
important thing and really we are going

00:03:06,100 --> 00:03:12,609
to try and use our intuition about how

00:03:09,850 --> 00:03:14,260
code should work about how this software

00:03:12,609 --> 00:03:16,989
should work about how this library

00:03:14,260 --> 00:03:18,190
should work to find a way to get to some

00:03:16,989 --> 00:03:19,540
really interesting results we're gonna

00:03:18,190 --> 00:03:21,370
start with some really really simple

00:03:19,540 --> 00:03:25,750
code and we are gonna get very very

00:03:21,370 --> 00:03:27,280
complex output as a result of this and I

00:03:25,750 --> 00:03:29,260
said we're gonna do super simple it's

00:03:27,280 --> 00:03:30,669
almost entirely one-line functions there

00:03:29,260 --> 00:03:32,859
are a few longer ones in there but we're

00:03:30,669 --> 00:03:34,900
not gonna talk about them very much most

00:03:32,859 --> 00:03:36,609
of this code is so simple that you'd be

00:03:34,900 --> 00:03:37,810
wasting your time unit testing it

00:03:36,609 --> 00:03:42,190
because you just be unit testing a

00:03:37,810 --> 00:03:43,930
pre-built library we want to build a

00:03:42,190 --> 00:03:47,340
synthesizer which means we want to make

00:03:43,930 --> 00:03:49,930
music what is music there's a talk on

00:03:47,340 --> 00:03:51,790
Wednesday about machine learning for

00:03:49,930 --> 00:03:55,389
generating music and they asked the

00:03:51,790 --> 00:03:57,579
exact same question and they got to some

00:03:55,389 --> 00:03:59,049
of the same sorts of answers we often

00:03:57,579 --> 00:04:01,530
think about things like notes and beats

00:03:59,049 --> 00:04:03,819
and rhythms and patterns and so on

00:04:01,530 --> 00:04:06,130
that's a smart way of thinking about

00:04:03,819 --> 00:04:08,430
music there's a lot of structure to that

00:04:06,130 --> 00:04:11,829
and there's a lot of information in that

00:04:08,430 --> 00:04:13,220
but some of my actual experience goes in

00:04:11,829 --> 00:04:15,470
slightly different directions

00:04:13,220 --> 00:04:17,049
for example I used to play music with a

00:04:15,470 --> 00:04:20,329
guy who played a modular synthesizer

00:04:17,049 --> 00:04:22,640
little box each module in the box does

00:04:20,329 --> 00:04:26,000
some piece of audio synthesis and

00:04:22,640 --> 00:04:28,970
depending on how you wire it up it's

00:04:26,000 --> 00:04:31,000
going to be a different instrument the

00:04:28,970 --> 00:04:35,630
actual structure of the music is

00:04:31,000 --> 00:04:37,100
constructed in the device and that was a

00:04:35,630 --> 00:04:38,630
really interesting way to think about is

00:04:37,100 --> 00:04:40,940
not a way I had thought about music

00:04:38,630 --> 00:04:43,850
previously and around that time I was

00:04:40,940 --> 00:04:45,650
also doing a little research and learned

00:04:43,850 --> 00:04:47,780
a lot about BBN Luis Peron

00:04:45,650 --> 00:04:49,790
he probably may have heard of them they

00:04:47,780 --> 00:04:51,410
did this most famously the soundtrack

00:04:49,790 --> 00:04:54,080
for the movie Forbidden Planet great

00:04:51,410 --> 00:04:55,670
movie amazing soundtrack a soundtrack

00:04:54,080 --> 00:04:58,430
where they wanted to make music that

00:04:55,670 --> 00:05:00,560
sounded truly truly alien and they

00:04:58,430 --> 00:05:03,050
turned to electronic music to do that

00:05:00,560 --> 00:05:05,360
and they had a really interesting

00:05:03,050 --> 00:05:07,820
approach to doing this they would build

00:05:05,360 --> 00:05:10,700
an electronic circuit and they would not

00:05:07,820 --> 00:05:13,010
have a clear idea of what that

00:05:10,700 --> 00:05:15,230
electronic circuit did they had an

00:05:13,010 --> 00:05:16,970
intuition about it you might notice a

00:05:15,230 --> 00:05:19,790
theme here they had an intuition about

00:05:16,970 --> 00:05:21,560
how that was going to work but they

00:05:19,790 --> 00:05:23,960
didn't know how it was going to work

00:05:21,560 --> 00:05:25,700
till they recorded its output and they

00:05:23,960 --> 00:05:27,290
would often run them to destruction they

00:05:25,700 --> 00:05:29,270
thought about it as the lifecycle of an

00:05:27,290 --> 00:05:30,979
organism and they would record this

00:05:29,270 --> 00:05:33,050
entire lifecycle until the circuit

00:05:30,979 --> 00:05:35,570
burned out and they take the tape tape

00:05:33,050 --> 00:05:38,180
and cut it up and collage it into their

00:05:35,570 --> 00:05:40,070
final composition and when we think

00:05:38,180 --> 00:05:41,510
about things like modular synthesizers

00:05:40,070 --> 00:05:44,900
and we think about this approach of

00:05:41,510 --> 00:05:48,710
analog circuits we can think about music

00:05:44,900 --> 00:05:50,810
in a completely abstract way music is

00:05:48,710 --> 00:05:55,040
nothing more than a signal that varies

00:05:50,810 --> 00:05:56,600
with time we look for other things as

00:05:55,040 --> 00:05:58,760
human beings we look for other things

00:05:56,600 --> 00:06:02,690
that make it music but really it's just

00:05:58,760 --> 00:06:04,190
a signal that varies with time now time

00:06:02,690 --> 00:06:05,930
is hard to work with with a computer

00:06:04,190 --> 00:06:07,580
right because time is a continuous value

00:06:05,930 --> 00:06:09,830
you can take any unit of time and

00:06:07,580 --> 00:06:12,220
subdivide it into infinitely more sub

00:06:09,830 --> 00:06:15,080
units of time it is a continuous value

00:06:12,220 --> 00:06:17,600
but when I say that out loud I think to

00:06:15,080 --> 00:06:21,320
myself I've heard the word sampling

00:06:17,600 --> 00:06:23,440
before now I don't need to know exactly

00:06:21,320 --> 00:06:24,730
what sampling is I

00:06:23,440 --> 00:06:26,260
I need to know how it works I don't need

00:06:24,730 --> 00:06:28,570
to know about Nyquist sampling theorem

00:06:26,260 --> 00:06:31,450
Zoar shannon entropy or any of that all

00:06:28,570 --> 00:06:33,460
I need to know is that I can sample time

00:06:31,450 --> 00:06:36,850
summer I can take a continuous value and

00:06:33,460 --> 00:06:38,770
sample it and as it turns out our very

00:06:36,850 --> 00:06:41,400
first numpy function that i want to talk

00:06:38,770 --> 00:06:43,960
about is this simple linspace function

00:06:41,400 --> 00:06:48,160
short for linear space which is a really

00:06:43,960 --> 00:06:51,100
fancy way of saying I count I count from

00:06:48,160 --> 00:06:52,990
zero to one and I'm going to take forty

00:06:51,100 --> 00:06:55,150
four thousand one hundred steps to do it

00:06:52,990 --> 00:06:56,470
why did I pick that number yeah you know

00:06:55,150 --> 00:06:59,470
I happen to see it in a piece of audio

00:06:56,470 --> 00:07:01,180
software once it probably is important

00:06:59,470 --> 00:07:02,320
that that number is that number there

00:07:01,180 --> 00:07:03,760
might be some other numbers that are

00:07:02,320 --> 00:07:05,620
slightly better I don't care

00:07:03,760 --> 00:07:08,470
all I need to know is that I can count

00:07:05,620 --> 00:07:10,630
from zero to one forty four thousand one

00:07:08,470 --> 00:07:12,610
hundred steps and so here we go goes

00:07:10,630 --> 00:07:17,920
from zero and a lot of small values on

00:07:12,610 --> 00:07:19,330
up to one we've just created time I mean

00:07:17,920 --> 00:07:21,640
actually this seems useful so I'm gonna

00:07:19,330 --> 00:07:24,520
save that as a function here's our first

00:07:21,640 --> 00:07:26,440
one line function very very simple I'll

00:07:24,520 --> 00:07:28,060
make that sample rate thing configurable

00:07:26,440 --> 00:07:29,590
because again it sounded important I

00:07:28,060 --> 00:07:31,270
don't really know what it does or why it

00:07:29,590 --> 00:07:34,540
matters but it seems important so I'm

00:07:31,270 --> 00:07:36,730
gonna keep that high number there and so

00:07:34,540 --> 00:07:39,640
I can go ahead I'll call that function

00:07:36,730 --> 00:07:43,300
space one here I'm gonna get one second

00:07:39,640 --> 00:07:47,470
of time and then I'm gonna bend time to

00:07:43,300 --> 00:07:49,300
my will and create something amazing but

00:07:47,470 --> 00:07:51,040
before we get there we have to count so

00:07:49,300 --> 00:07:53,140
here's a lovely graph that shows us what

00:07:51,040 --> 00:07:57,850
time looks like it's a line that goes in

00:07:53,140 --> 00:07:59,919
one direction but I need to do something

00:07:57,850 --> 00:08:02,140
with time and I know again musics a time

00:07:59,919 --> 00:08:05,440
varying signal so I need some sort of

00:08:02,140 --> 00:08:07,570
wave right and because I remember a

00:08:05,440 --> 00:08:11,950
little bit about high school I remember

00:08:07,570 --> 00:08:15,090
sine waves so I need to take time and I

00:08:11,950 --> 00:08:17,710
need to turn time into a sine wave and

00:08:15,090 --> 00:08:21,010
I'm gonna pick my favorite no the

00:08:17,710 --> 00:08:22,450
concert a 440 Hertz if you play violin

00:08:21,010 --> 00:08:23,260
and you're good at violin you're the

00:08:22,450 --> 00:08:25,840
concertmaster

00:08:23,260 --> 00:08:27,250
and you get to play the concert a as a

00:08:25,840 --> 00:08:28,390
single note to tune the whole Orchestra

00:08:27,250 --> 00:08:31,789
up it's very powerful

00:08:28,390 --> 00:08:35,570
I would love to experience it someday

00:08:31,789 --> 00:08:38,570
the 440 Hertz is 440 cycles per second

00:08:35,570 --> 00:08:42,919
440 per cycles per second would be a

00:08:38,570 --> 00:08:45,139
sweep from an angle of 0 radians to 2 pi

00:08:42,919 --> 00:08:49,760
radians because circles and sine waves

00:08:45,139 --> 00:08:53,089
are related Thank You Wikipedia so I'm

00:08:49,760 --> 00:08:57,860
gonna do that I'm gonna take time and I

00:08:53,089 --> 00:09:02,269
know that time times 2 pi times 440

00:08:57,860 --> 00:09:06,550
means in one second of time I'm 440

00:09:02,269 --> 00:09:09,880
times gonna cycle through two times pi

00:09:06,550 --> 00:09:15,079
and I get this lovely wave as an output

00:09:09,880 --> 00:09:19,550
and what do you know what play it I get

00:09:15,079 --> 00:09:21,380
a lovely perfect tone perfect pitch that

00:09:19,550 --> 00:09:23,269
seems useful so I'm gonna say that is a

00:09:21,380 --> 00:09:25,850
function to notice here I'm going to add

00:09:23,269 --> 00:09:27,649
in a little shift value there because we

00:09:25,850 --> 00:09:29,720
can shift the phase of the wave where it

00:09:27,649 --> 00:09:34,130
starts seems important again might have

00:09:29,720 --> 00:09:36,529
a use for that later what I just did

00:09:34,130 --> 00:09:38,510
here was take advantage of some of numpy

00:09:36,529 --> 00:09:43,190
is really really important features in

00:09:38,510 --> 00:09:47,000
fact my skip here this right here is the

00:09:43,190 --> 00:09:49,190
big idea because we can take an umpire a

00:09:47,000 --> 00:09:51,980
numeric Python as a tool for managing

00:09:49,190 --> 00:09:55,339
large sets of data in Python and we can

00:09:51,980 --> 00:09:57,380
take an array from numpy pass it to

00:09:55,339 --> 00:09:59,180
functions we can add them together we

00:09:57,380 --> 00:10:01,130
can subtract them from each other so

00:09:59,180 --> 00:10:06,100
here's a version where I do my linspace

00:10:01,130 --> 00:10:14,600
right from 0 to 2 times n pi in 5 steps

00:10:06,100 --> 00:10:16,910
in 10 steps and a thousand steps right I

00:10:14,600 --> 00:10:18,860
can take an array pass it to the sine

00:10:16,910 --> 00:10:22,610
function the sine function works on a

00:10:18,860 --> 00:10:24,380
raise this is the most important thing

00:10:22,610 --> 00:10:25,579
from a technical standpoint this is the

00:10:24,380 --> 00:10:27,649
only thing you really need to take away

00:10:25,579 --> 00:10:29,269
from this there are other things that I

00:10:27,649 --> 00:10:30,740
hope you take away from this but from a

00:10:29,269 --> 00:10:33,800
technical side this is the only thing

00:10:30,740 --> 00:10:35,089
that actually matters numpy arrays can

00:10:33,800 --> 00:10:37,130
go to functions they can go to

00:10:35,089 --> 00:10:40,600
arithmetic operations and this allows us

00:10:37,130 --> 00:10:42,730
to write some really simple code

00:10:40,600 --> 00:10:45,730
so in fact let's look at this here's an

00:10:42,730 --> 00:10:46,810
array here's an array I'm gonna do some

00:10:45,730 --> 00:10:48,850
math on arrays and what do you know

00:10:46,810 --> 00:10:51,370
works right I take the first array

00:10:48,850 --> 00:10:54,430
multiply it by two times n popping up I

00:10:51,370 --> 00:10:56,740
and boom I get my values there I take my

00:10:54,430 --> 00:11:00,700
second array and I add it to the first

00:10:56,740 --> 00:11:04,990
array right a plus B Wow exciting right

00:11:00,700 --> 00:11:11,590
we can do arithmetic wait we can do

00:11:04,990 --> 00:11:14,680
arithmetic what happens if i take one

00:11:11,590 --> 00:11:18,430
sine wave another sine wave a third sine

00:11:14,680 --> 00:11:19,390
wave and add them together the fancy

00:11:18,430 --> 00:11:20,650
word is constructive and destructive

00:11:19,390 --> 00:11:22,960
interference

00:11:20,650 --> 00:11:26,170
the practical word is I've made a chord

00:11:22,960 --> 00:11:32,830
and so I have this much fancier sort of

00:11:26,170 --> 00:11:34,630
sine wave here almost musical almost not

00:11:32,830 --> 00:11:37,360
quite there yet

00:11:34,630 --> 00:11:39,160
now one thing it didn't come out super

00:11:37,360 --> 00:11:40,330
ugly in this version when I was

00:11:39,160 --> 00:11:42,940
essentially doing this I was doing it on

00:11:40,330 --> 00:11:44,530
Linux pulseaudio will clip that because

00:11:42,940 --> 00:11:46,930
you've gone outside of the range of

00:11:44,530 --> 00:11:48,130
negative 1 to 1 it doesn't like it when

00:11:46,930 --> 00:11:49,810
you do that and you know it for making

00:11:48,130 --> 00:11:54,210
the math symbol I don't like it when I

00:11:49,810 --> 00:11:54,210
do that so we're gonna just divide by 3

00:11:54,240 --> 00:12:01,240
there's a little cleaner it's the same

00:11:59,290 --> 00:12:06,180
wave just notice I'm scaling it between

00:12:01,240 --> 00:12:06,180
1 and negative 1 makes the math simpler

00:12:06,540 --> 00:12:12,070
so we just added we just signed we did a

00:12:10,210 --> 00:12:13,720
little division there there's one

00:12:12,070 --> 00:12:15,400
operation that we remember from grade

00:12:13,720 --> 00:12:17,650
school that we haven't done yet haven't

00:12:15,400 --> 00:12:21,630
multiplied and that gives me another

00:12:17,650 --> 00:12:24,540
idea we make a slightly longer period of

00:12:21,630 --> 00:12:27,310
this laser pointer does not like me Oh

00:12:24,540 --> 00:12:29,020
helps you hit the laser button I'm gonna

00:12:27,310 --> 00:12:30,730
make 4 seconds of time and we're gonna

00:12:29,020 --> 00:12:32,670
min 4 seconds tool we've mastered this

00:12:30,730 --> 00:12:35,740
one second thing I'm going to create my

00:12:32,670 --> 00:12:38,080
440 Hertz sine wave again but then I'm

00:12:35,740 --> 00:12:39,850
gonna create a 1 Hertz sine wave one

00:12:38,080 --> 00:12:42,010
time per second and so you can see

00:12:39,850 --> 00:12:45,160
here's the whole one time per second

00:12:42,010 --> 00:12:49,210
sine wave right for peaks for valleys we

00:12:45,160 --> 00:12:52,110
do that four times per second and if I

00:12:49,210 --> 00:12:54,630
multiply them together

00:12:52,110 --> 00:12:57,090
when the one Hertz wave goes down

00:12:54,630 --> 00:12:58,170
towards zero the whole value goes down

00:12:57,090 --> 00:13:01,880
towards zero because when you multiply

00:12:58,170 --> 00:13:11,610
things by zero turns out they go to zero

00:13:01,880 --> 00:13:14,450
which means all right so we have now

00:13:11,610 --> 00:13:16,920
this ability to kind of gate our sound

00:13:14,450 --> 00:13:19,530
simple arithmetic symbol multiplied

00:13:16,920 --> 00:13:21,600
divided we now have a gate and I can now

00:13:19,530 --> 00:13:24,210
combine this with my chord here am 1/2

00:13:21,600 --> 00:13:25,740
my C my E and I have them all go at

00:13:24,210 --> 00:13:30,510
slightly different rates right here's my

00:13:25,740 --> 00:13:32,250
a with a 1 gate wave there's my C with a

00:13:30,510 --> 00:13:35,100
second gate wave at a different rate

00:13:32,250 --> 00:13:39,800
there's my e with a different gate wave

00:13:35,100 --> 00:13:39,800
at a different rate and when I play this

00:13:42,980 --> 00:13:47,760
alright and I get a nice little pattern

00:13:46,650 --> 00:13:52,470
you can see it's always nice to see

00:13:47,760 --> 00:13:55,650
pictures of sound feels fancy so we can

00:13:52,470 --> 00:13:57,750
do sine sine is great sine is easy there

00:13:55,650 --> 00:14:00,600
are a lot of other types of ways rocking

00:13:57,750 --> 00:14:02,520
this necessarily see all of them but a

00:14:00,600 --> 00:14:04,200
really good one would be square right

00:14:02,520 --> 00:14:07,590
because the square wave is a sine wave

00:14:04,200 --> 00:14:09,180
it's just really extreme right you're

00:14:07,590 --> 00:14:12,660
only high you're only low you're never

00:14:09,180 --> 00:14:16,350
in between sounds like my life and as it

00:14:12,660 --> 00:14:19,290
turns out numpy gives us a function for

00:14:16,350 --> 00:14:20,700
this if i pass an array to the sine

00:14:19,290 --> 00:14:24,090
function not to be confused with the

00:14:20,700 --> 00:14:25,920
sine function it's gonna give me a

00:14:24,090 --> 00:14:27,570
negative 1 or a positive 1 depending on

00:14:25,920 --> 00:14:30,480
whether the value I gave it is positive

00:14:27,570 --> 00:14:33,390
or negative which means if I plot a sine

00:14:30,480 --> 00:14:35,580
wave through the sine function yeah it's

00:14:33,390 --> 00:14:37,530
not confusing at all I'm gonna get a

00:14:35,580 --> 00:14:41,090
lovely little square wave square waves

00:14:37,530 --> 00:14:41,090
are cool they sound a little different

00:14:44,140 --> 00:14:50,839
well that was a long four seconds wasn't

00:14:46,550 --> 00:14:53,450
it gonna save that as a function seems

00:14:50,839 --> 00:14:58,220
like it'll be useful later notice I'm

00:14:53,450 --> 00:15:00,800
just using my sign and my sign and I can

00:14:58,220 --> 00:15:08,660
combine this with my gait I can still do

00:15:00,800 --> 00:15:10,250
that multiplication and I can even plot

00:15:08,660 --> 00:15:12,470
out we can see there's the square wave

00:15:10,250 --> 00:15:14,269
and it's being shaped by that low

00:15:12,470 --> 00:15:17,360
frequency sine wave

00:15:14,269 --> 00:15:19,310
nice little pulses and you know if we're

00:15:17,360 --> 00:15:20,990
gonna have a square wave we can do some

00:15:19,310 --> 00:15:24,560
beats with a square wave right it's high

00:15:20,990 --> 00:15:26,690
it's low I can constrain that in order

00:15:24,560 --> 00:15:29,839
to control the behavior right multiply

00:15:26,690 --> 00:15:32,720
by zero you get zero so I can use these

00:15:29,839 --> 00:15:35,149
to make beats I just need a function

00:15:32,720 --> 00:15:38,769
that's gonna keep my square wave if not

00:15:35,149 --> 00:15:41,269
negative one to one but zero to one

00:15:38,769 --> 00:15:43,940
which hey what do you know numpy gives

00:15:41,269 --> 00:15:45,500
us a function for that to this he the

00:15:43,940 --> 00:15:47,930
side I honestly I don't even know how

00:15:45,500 --> 00:15:49,610
you pronounce that it's a statistical

00:15:47,930 --> 00:15:50,180
thing I don't actually know what it's

00:15:49,610 --> 00:15:53,240
really for

00:15:50,180 --> 00:15:55,430
but for me I'm gonna pass it an array

00:15:53,240 --> 00:15:57,890
and I'm gonna pass it the values zero

00:15:55,430 --> 00:16:00,890
everything less than or equal to zero is

00:15:57,890 --> 00:16:04,010
zero out of this function everything

00:16:00,890 --> 00:16:06,890
else is gonna be one so you can see here

00:16:04,010 --> 00:16:08,779
I passed a set of values and there's my

00:16:06,890 --> 00:16:12,160
output everything zero or less turns

00:16:08,779 --> 00:16:16,520
into zero everything else turns into one

00:16:12,160 --> 00:16:19,820
so now I can take my square wave I can

00:16:16,520 --> 00:16:21,470
head aside it and so I'm gonna have a

00:16:19,820 --> 00:16:23,829
two Hertz sine wave which happens to be

00:16:21,470 --> 00:16:25,970
120 beats per minute

00:16:23,829 --> 00:16:27,560
it's gives me a square wave that looks

00:16:25,970 --> 00:16:31,810
like every other square wave we've seen

00:16:27,560 --> 00:16:31,810
but when I multiply things together

00:16:33,970 --> 00:16:41,810
we're about a techno song all right we

00:16:39,320 --> 00:16:43,100
can get wacky with this I'm gonna try an

00:16:41,810 --> 00:16:44,810
experiment because I'm feeling really

00:16:43,100 --> 00:16:47,269
confident at this point I've played with

00:16:44,810 --> 00:16:49,100
a few of these things they worked the

00:16:47,269 --> 00:16:53,240
way my intuition said they were supposed

00:16:49,100 --> 00:16:56,600
to work and so with that in mind

00:16:53,240 --> 00:16:58,040
I'm going to create a sine wave I'm

00:16:56,600 --> 00:17:01,220
gonna give it a pretty low frequency

00:16:58,040 --> 00:17:03,230
it's only ten Hertz all right very low

00:17:01,220 --> 00:17:05,329
frequency and I'm not gonna scale it

00:17:03,230 --> 00:17:06,919
zero to one or negative one to one I'm

00:17:05,329 --> 00:17:10,429
gonna multiply it by five so it's a big

00:17:06,919 --> 00:17:13,490
range and then I'm going to create

00:17:10,429 --> 00:17:16,819
another sine wave and I'm gonna take a

00:17:13,490 --> 00:17:18,559
frequency 440 again and I'm gonna take

00:17:16,819 --> 00:17:21,829
this other sine wave I'm gonna add them

00:17:18,559 --> 00:17:24,439
together I don't really know what this

00:17:21,829 --> 00:17:25,669
is gonna do if i graph it out it doesn't

00:17:24,439 --> 00:17:27,980
look very interesting it looks like a

00:17:25,669 --> 00:17:32,779
sine wave something's going on now

00:17:27,980 --> 00:17:36,980
alright this seems interesting the UFO

00:17:32,779 --> 00:17:41,960
is landed okay so I can take an array

00:17:36,980 --> 00:17:43,490
and pass it as my frequency and that

00:17:41,960 --> 00:17:46,610
makes sense right with everything we've

00:17:43,490 --> 00:17:48,049
said so far frequency times space is

00:17:46,610 --> 00:17:51,260
what we've been doing right we've a

00:17:48,049 --> 00:17:54,320
multiplying our time by our frequency by

00:17:51,260 --> 00:17:56,990
pi and we know that we can multiply

00:17:54,320 --> 00:18:00,710
arrays together so if my frequencies in

00:17:56,990 --> 00:18:01,399
array and time is an array then that's

00:18:00,710 --> 00:18:06,649
allowed

00:18:01,399 --> 00:18:08,179
so my frequency can change with time Wow

00:18:06,649 --> 00:18:10,279
makes me feel kind of smart to figure

00:18:08,179 --> 00:18:13,399
that out on my own and that gives me

00:18:10,279 --> 00:18:15,110
another idea because what I can do here

00:18:13,399 --> 00:18:17,000
is I can create another array and they

00:18:15,110 --> 00:18:18,559
gave it the wonderful name buffer this

00:18:17,000 --> 00:18:21,350
is a great name for an array all right

00:18:18,559 --> 00:18:24,980
should always do this that would fill

00:18:21,350 --> 00:18:27,230
the whole thing with 440 you know not

00:18:24,980 --> 00:18:29,510
the whole thing I'm gonna fill the

00:18:27,230 --> 00:18:31,399
second two-thirds with a different

00:18:29,510 --> 00:18:32,960
frequency uh you know not the second

00:18:31,399 --> 00:18:35,600
two-thirds because the last third is

00:18:32,960 --> 00:18:36,919
gonna get a different frequency and if i

00:18:35,600 --> 00:18:49,580
graph this out we have a lovely little

00:18:36,919 --> 00:18:53,679
staircase 442 523 to 659 and oh that's a

00:18:49,580 --> 00:18:56,419
song sort of I mean it's an arpeggio

00:18:53,679 --> 00:18:57,409
let's combine that with our gate let's

00:18:56,419 --> 00:18:58,380
try and make it something a little more

00:18:57,409 --> 00:19:00,510
musical

00:18:58,380 --> 00:19:02,710
[Music]

00:19:00,510 --> 00:19:04,540
there's something there you know my

00:19:02,710 --> 00:19:07,260
favorite song but it's got a beat you

00:19:04,540 --> 00:19:12,160
can dance to it

00:19:07,260 --> 00:19:13,390
alright so with basic arithmetic and a

00:19:12,160 --> 00:19:18,190
few functions that we stole from a

00:19:13,390 --> 00:19:20,830
library we can do audio synthesis and we

00:19:18,190 --> 00:19:23,530
don't have to know exactly what we're

00:19:20,830 --> 00:19:26,920
doing here we can just sort of fumble

00:19:23,530 --> 00:19:28,900
around feel our way through experiment a

00:19:26,920 --> 00:19:31,480
little bit and we'll get all sorts of

00:19:28,900 --> 00:19:32,919
weird results some of them weirder than

00:19:31,480 --> 00:19:35,559
others some of them good some of them

00:19:32,919 --> 00:19:37,419
bad spoilers I only gave you the good

00:19:35,559 --> 00:19:41,770
ones at least kind of good ones there

00:19:37,419 --> 00:19:43,840
were a lot of bad ones along the way but

00:19:41,770 --> 00:19:46,059
there's more right we've got this very

00:19:43,840 --> 00:19:48,520
very simple synthesizer built out of

00:19:46,059 --> 00:19:50,320
very simple techniques and so now the

00:19:48,520 --> 00:19:53,260
question becomes are there other things

00:19:50,320 --> 00:19:55,240
we can do with this well what about some

00:19:53,260 --> 00:19:57,570
other waveforms really gotta hit the

00:19:55,240 --> 00:20:00,100
laser button up a slide advance button

00:19:57,570 --> 00:20:02,350
do we care about normalizing I talked

00:20:00,100 --> 00:20:04,360
about that negative 1 to 1 what about

00:20:02,350 --> 00:20:06,370
building an actual song can we make an

00:20:04,360 --> 00:20:09,730
actual song spoilers we're gonna make

00:20:06,370 --> 00:20:12,640
about a 13 second long song there's only

00:20:09,730 --> 00:20:16,240
so much time for this presentation but

00:20:12,640 --> 00:20:17,950
other waveforms one of the big ones that

00:20:16,240 --> 00:20:20,740
you often hear about when you hear about

00:20:17,950 --> 00:20:22,570
synthesis is a sawtooth wave I do not

00:20:20,740 --> 00:20:25,690
know the math that you need to define a

00:20:22,570 --> 00:20:27,940
sawtooth wave but stackoverflow does so

00:20:25,690 --> 00:20:30,400
I copied pasted it and did a little

00:20:27,940 --> 00:20:32,080
revision in order to make that work I

00:20:30,400 --> 00:20:34,059
mean it makes sense the thing about the

00:20:32,080 --> 00:20:36,580
tangent and the arctangent right you got

00:20:34,059 --> 00:20:38,740
that sort of shape on a sawtooth what

00:20:36,580 --> 00:20:42,130
sort of shape on a sawtooth that sort of

00:20:38,740 --> 00:20:43,600
shape on a sawtooth alright ok

00:20:42,130 --> 00:20:45,880
so I can have this handy-dandy little

00:20:43,600 --> 00:20:51,580
function right create a utility function

00:20:45,880 --> 00:20:55,150
to generate saw waves little buzzy er

00:20:51,580 --> 00:20:57,270
little different tone super simple again

00:20:55,150 --> 00:21:03,429
this is our longest function so far

00:20:57,270 --> 00:21:04,960
right and it's for five lines but really

00:21:03,429 --> 00:21:06,250
it's like two lines that actually count

00:21:04,960 --> 00:21:08,580
and a lot of white space so that you can

00:21:06,250 --> 00:21:08,580
read it

00:21:09,050 --> 00:21:15,200
here's it here let's get really complex

00:21:11,590 --> 00:21:18,260
square waves are cool but pulses are

00:21:15,200 --> 00:21:20,510
cooler because pulses let you change the

00:21:18,260 --> 00:21:22,610
duty cycle how much time do you spend hi

00:21:20,510 --> 00:21:24,530
versus how much time do you spend lo a

00:21:22,610 --> 00:21:29,240
square wave spends the same amount of

00:21:24,530 --> 00:21:32,750
time each way right well a pulse lets

00:21:29,240 --> 00:21:36,080
you set the duty cycle he said duty a

00:21:32,750 --> 00:21:38,360
pulse lets you set a duty cycle and what

00:21:36,080 --> 00:21:40,970
do we do to do this well I'm going to

00:21:38,360 --> 00:21:45,380
make two square waves and I'm going to

00:21:40,970 --> 00:21:46,580
shift one of them over a little bit then

00:21:45,380 --> 00:21:50,870
I'm going to take the difference between

00:21:46,580 --> 00:21:52,460
the two square waves and chop it off now

00:21:50,870 --> 00:21:54,380
they might do a little extra math okay I

00:21:52,460 --> 00:21:56,120
want it to be a sound versus a gate

00:21:54,380 --> 00:21:57,890
because I might use this for a couple

00:21:56,120 --> 00:22:00,500
different purposes we don't care about

00:21:57,890 --> 00:22:02,500
that this is the longest function I'm

00:22:00,500 --> 00:22:05,450
going to show you today

00:22:02,500 --> 00:22:08,030
pretty simple function even still right

00:22:05,450 --> 00:22:10,450
we take a square wave take a square wave

00:22:08,030 --> 00:22:14,240
find the difference between the two

00:22:10,450 --> 00:22:15,920
she'll come off at zero and then return

00:22:14,240 --> 00:22:20,030
that wave maybe with a little

00:22:15,920 --> 00:22:22,700
modification this allows us to generate

00:22:20,030 --> 00:22:25,570
a couple of different duty cycles duty

00:22:22,700 --> 00:22:28,430
cycle 25 percent 12 percent 50 percent

00:22:25,570 --> 00:22:31,580
these sorts of things allow us to get

00:22:28,430 --> 00:22:34,340
the same pitch but with different as the

00:22:31,580 --> 00:22:36,530
musicians say overtones right it's the

00:22:34,340 --> 00:22:42,560
same frequency here here's a 50 percent

00:22:36,530 --> 00:22:43,850
wave it's a same square wave and it's

00:22:42,560 --> 00:22:47,450
the same square wave we've heard that

00:22:43,850 --> 00:22:52,580
sound before but what about the 25

00:22:47,450 --> 00:22:54,710
percent duty cycle same frequency but it

00:22:52,580 --> 00:22:58,270
sounds different right get into a little

00:22:54,710 --> 00:23:03,590
more of a Nintendo II sort of vibe there

00:22:58,270 --> 00:23:06,010
or 25 percent that was a 25 percent

00:23:03,590 --> 00:23:09,290
shouldn't put the graph after oh well

00:23:06,010 --> 00:23:14,090
here's a 12 percent duty cycle so much

00:23:09,290 --> 00:23:15,920
sharper peaks and again slightly

00:23:14,090 --> 00:23:19,600
different tones slightly different sound

00:23:15,920 --> 00:23:19,600
different overtones

00:23:20,290 --> 00:23:25,840
we also do want to be able to scale this

00:23:23,430 --> 00:23:27,940
that's basically just some simple math

00:23:25,840 --> 00:23:30,160
though right if I know that I've added

00:23:27,940 --> 00:23:31,630
three signals together then I should

00:23:30,160 --> 00:23:33,460
divide by three because I want to make

00:23:31,630 --> 00:23:35,560
sure when they constructively interfere

00:23:33,460 --> 00:23:37,060
right I'm chopping off the peaks there

00:23:35,560 --> 00:23:38,710
are also functions that I can use to

00:23:37,060 --> 00:23:41,140
find the maximum value and then just

00:23:38,710 --> 00:23:43,090
scale according to that we can get

00:23:41,140 --> 00:23:44,770
clever with scaling but I'm not gonna

00:23:43,090 --> 00:23:46,720
worry about that for this right we've

00:23:44,770 --> 00:23:49,020
only got so much time for this talk I'm

00:23:46,720 --> 00:23:51,700
not gonna worry about it here

00:23:49,020 --> 00:23:53,020
the other function I want to take a peek

00:23:51,700 --> 00:23:55,570
at though and this is actually one of my

00:23:53,020 --> 00:23:56,860
favorite functions and yes I am the sort

00:23:55,570 --> 00:23:59,020
of person that has a favorite function

00:23:56,860 --> 00:24:02,980
I'm also certain who work Tesla socks

00:23:59,020 --> 00:24:04,510
today so I am that person but my

00:24:02,980 --> 00:24:06,970
absolute favorite function is a function

00:24:04,510 --> 00:24:08,290
known as smooth step and I encountered

00:24:06,970 --> 00:24:10,270
this because I do a lot of graphics

00:24:08,290 --> 00:24:11,770
programming and this is an OpenGL

00:24:10,270 --> 00:24:13,630
function and I just stole the

00:24:11,770 --> 00:24:16,420
implementation from OpenGL here and made

00:24:13,630 --> 00:24:18,820
a numpy version of it this is known as a

00:24:16,420 --> 00:24:22,450
hermite interpolation I don't know who

00:24:18,820 --> 00:24:24,280
her muahh z-- but it's a really useful

00:24:22,450 --> 00:24:25,800
function for a bunch of different things

00:24:24,280 --> 00:24:28,270
it's actually used in machine learning

00:24:25,800 --> 00:24:29,950
so if anybody did go to any of the

00:24:28,270 --> 00:24:31,600
machine learning talks when they talked

00:24:29,950 --> 00:24:33,970
about some of their back propagation

00:24:31,600 --> 00:24:37,380
functions and error functions they often

00:24:33,970 --> 00:24:41,110
will use a hermite function to do that

00:24:37,380 --> 00:24:43,090
also known as a sigmoid function but

00:24:41,110 --> 00:24:44,590
there's some map here again I didn't

00:24:43,090 --> 00:24:46,030
make up this map I don't actually know

00:24:44,590 --> 00:24:49,380
how this math works but I know what this

00:24:46,030 --> 00:24:53,440
map does it makes this lovely little

00:24:49,380 --> 00:24:56,320
s-shaped function this s-shaped function

00:24:53,440 --> 00:24:58,020
is great it's great for audio will see

00:24:56,320 --> 00:25:00,790
how in a second is great for animation

00:24:58,020 --> 00:25:05,140
it's great for drawing things this is I

00:25:00,790 --> 00:25:06,670
use this function all the time and so

00:25:05,140 --> 00:25:10,750
what I can now do is I'm gonna make a

00:25:06,670 --> 00:25:14,260
smooth step from one second to 1.5

00:25:10,750 --> 00:25:17,620
seconds so I'm gonna have an s-shaped

00:25:14,260 --> 00:25:21,630
curve made out of time and I'm gonna

00:25:17,620 --> 00:25:21,630
multiply a note by that curve

00:25:24,799 --> 00:25:29,159
got a nice little feet in there didn't

00:25:27,120 --> 00:25:32,250
we took about half a second go from

00:25:29,159 --> 00:25:41,399
nothing to a full frequency I play again

00:25:32,250 --> 00:25:43,860
one 1000 and now I can combine all of

00:25:41,399 --> 00:25:46,110
these remember our same notes as before

00:25:43,860 --> 00:25:49,610
but now make gates for them a is gonna

00:25:46,110 --> 00:25:52,970
go from 0 1 then C from 1 to 2 then e

00:25:49,610 --> 00:25:52,970
from 2 to 3

00:25:56,730 --> 00:26:02,230
practically conducting here all right

00:25:58,960 --> 00:26:04,389
fantastic and I'm doing here right is

00:26:02,230 --> 00:26:06,730
out putting one of these sigmoid curves

00:26:04,389 --> 00:26:09,220
right here my axis is the amount of time

00:26:06,730 --> 00:26:11,380
that's elapsed down here so you can see

00:26:09,220 --> 00:26:14,320
starting at one second this gate starts

00:26:11,380 --> 00:26:21,159
fading in and it reaches full intensity

00:26:14,320 --> 00:26:23,320
around two-ish seconds and if I can add

00:26:21,159 --> 00:26:26,110
those gates together I should be able to

00:26:23,320 --> 00:26:28,779
subtract them too so here I have a gate

00:26:26,110 --> 00:26:30,429
that starts there and gets subtracted

00:26:28,779 --> 00:26:32,080
from that one I'm adding another one

00:26:30,429 --> 00:26:33,940
it's a long block of code it doesn't all

00:26:32,080 --> 00:26:36,279
fit on the slide but it doesn't matter

00:26:33,940 --> 00:26:37,809
because we know what smooth step does so

00:26:36,279 --> 00:26:44,590
what happens when we add and subtract

00:26:37,809 --> 00:26:48,039
them get notes to come in and out and

00:26:44,590 --> 00:26:51,100
fade in and out and if I plot just one

00:26:48,039 --> 00:26:53,830
of those this a gate here you can see

00:26:51,100 --> 00:26:59,070
right fades in fades out fades back in

00:26:53,830 --> 00:27:02,230
fades out we are composing with signals

00:26:59,070 --> 00:27:04,240
and since that seems like a useful

00:27:02,230 --> 00:27:07,210
function I'm actually gonna make a

00:27:04,240 --> 00:27:09,159
waveform out of it this will be handy in

00:27:07,210 --> 00:27:10,659
a second we're just gonna take smooth

00:27:09,159 --> 00:27:12,909
step and a sine wave and we're gonna

00:27:10,659 --> 00:27:15,070
combine these together and that's gonna

00:27:12,909 --> 00:27:18,639
actually allow us to get this weird

00:27:15,070 --> 00:27:21,549
funky little curve is it a sine wave

00:27:18,639 --> 00:27:25,720
with a shelf it's kind of cool

00:27:21,549 --> 00:27:28,539
sounds weird I'm sorry yeah it's a

00:27:25,720 --> 00:27:31,539
little distort a bit of a wave there and

00:27:28,539 --> 00:27:34,389
with all of these tools and a few that

00:27:31,539 --> 00:27:36,610
I'm gonna kind of hand wave a little bit

00:27:34,389 --> 00:27:40,690
we now have everything we need to

00:27:36,610 --> 00:27:43,570
compose a super-short song right I had a

00:27:40,690 --> 00:27:44,860
lovely little library called shaded if

00:27:43,570 --> 00:27:46,779
you're very very clever you might

00:27:44,860 --> 00:27:48,610
recognize that I named this library this

00:27:46,779 --> 00:27:50,590
because of my inspiration from OpenGL

00:27:48,610 --> 00:27:52,299
shaders this is actually kind of a

00:27:50,590 --> 00:27:54,460
musical shader if you've ever done any

00:27:52,299 --> 00:27:58,480
graphics programming that might sound

00:27:54,460 --> 00:28:00,879
interesting and what I'm gonna do is I'm

00:27:58,480 --> 00:28:02,919
gonna create a 13-second long block of

00:28:00,879 --> 00:28:05,559
time that is my song I'm going to give

00:28:02,919 --> 00:28:07,130
us 13 seconds of time and I'm going to

00:28:05,559 --> 00:28:09,410
use that smooth step function

00:28:07,130 --> 00:28:11,600
to give my song and overall envelope

00:28:09,410 --> 00:28:14,870
right because I know music doesn't just

00:28:11,600 --> 00:28:16,610
come in really loud it comes in and then

00:28:14,870 --> 00:28:18,049
it goes out a little bit so that's what

00:28:16,610 --> 00:28:19,760
I'm gonna do I'm gonna have a little

00:28:18,049 --> 00:28:21,950
curve here so my song comes up pretty

00:28:19,760 --> 00:28:25,700
quick gets its full intensity and then

00:28:21,950 --> 00:28:27,020
fades out by the end and now I want to

00:28:25,700 --> 00:28:31,340
start combining a few other things

00:28:27,020 --> 00:28:34,130
together remember how I had that little

00:28:31,340 --> 00:28:35,960
step of notes right where I could cycle

00:28:34,130 --> 00:28:38,630
through three different notes made that

00:28:35,960 --> 00:28:42,200
little staircase this art function

00:28:38,630 --> 00:28:44,150
automates that a little bit so I just

00:28:42,200 --> 00:28:45,110
built that it's the same thing but what

00:28:44,150 --> 00:28:46,400
I'm gonna do is I'm gonna take this

00:28:45,110 --> 00:28:48,230
sequence of notes and you can see I

00:28:46,400 --> 00:28:50,539
wasn't sure which pitch I want them to

00:28:48,230 --> 00:28:51,980
be at so I started at one and I realize

00:28:50,539 --> 00:28:53,120
that was too deep and it sounds really

00:28:51,980 --> 00:28:55,490
bad when I play it through these

00:28:53,120 --> 00:28:58,909
speakers so I multiplied by two to make

00:28:55,490 --> 00:29:00,919
it a little higher pitch this time when

00:28:58,909 --> 00:29:02,690
I'm multiplying this list here by the

00:29:00,919 --> 00:29:04,370
way it's just a Python list so it's not

00:29:02,690 --> 00:29:07,549
actually a numpy array so this

00:29:04,370 --> 00:29:10,010
multiplication doesn't say multiply by

00:29:07,549 --> 00:29:11,780
five it says repeat this five times so

00:29:10,010 --> 00:29:13,960
this is a sequence of notes that's going

00:29:11,780 --> 00:29:16,669
to be my bass line five times

00:29:13,960 --> 00:29:19,970
dudududududu - that's not what it sounds

00:29:16,669 --> 00:29:23,299
like I just can't sing I'm gonna do a

00:29:19,970 --> 00:29:24,650
little sine wave of that song and I'm

00:29:23,299 --> 00:29:28,400
gonna put a little beat to it I'm gonna

00:29:24,650 --> 00:29:30,870
use that pulse that duty-cycle pulse to

00:29:28,400 --> 00:29:38,560
give myself a little bit of a beat and

00:29:30,870 --> 00:29:38,560
[Laughter]

00:29:40,480 --> 00:29:46,370
spy on your table how will the noise

00:29:44,330 --> 00:29:48,230
function noise is what you'd expect it

00:29:46,370 --> 00:29:52,190
takes time and just makes random output

00:29:48,230 --> 00:29:54,080
in time good for drums so I'm gonna go

00:29:52,190 --> 00:29:55,700
ahead and output a little noise I'm

00:29:54,080 --> 00:29:57,110
gonna use that sigmoid function I'm

00:29:55,700 --> 00:29:59,330
gonna combine a couple of sigmoids

00:29:57,110 --> 00:30:03,340
together in order to give myself a sort

00:29:59,330 --> 00:30:03,340
of funky little drumbeat there

00:30:06,000 --> 00:30:11,740
this is what that set of gate kind of

00:30:09,399 --> 00:30:14,230
looks like a little bit it's a little

00:30:11,740 --> 00:30:17,769
sample within there so a little bit of a

00:30:14,230 --> 00:30:20,289
rhythm when I combined it with the

00:30:17,769 --> 00:30:22,149
actual white noise this is what it looks

00:30:20,289 --> 00:30:24,789
like so we have a nice little set of

00:30:22,149 --> 00:30:28,090
peaks and valleys there I need some sort

00:30:24,789 --> 00:30:29,830
of melody so I'm gonna use that art

00:30:28,090 --> 00:30:31,659
function again I'm gonna output some

00:30:29,830 --> 00:30:33,610
notes we'll have a couple lines in our

00:30:31,659 --> 00:30:35,710
melody combine them together we're gonna

00:30:33,610 --> 00:30:38,909
use that saw wave here because it sounds

00:30:35,710 --> 00:30:38,909
a little string ish

00:30:40,100 --> 00:30:43,710
[Music]

00:30:49,300 --> 00:31:00,360
[Music]

00:30:57,559 --> 00:31:03,890
it's okay you don't have to have to act

00:31:00,360 --> 00:31:03,890
like I can post something really great

00:31:07,669 --> 00:31:11,970
when you look at this it's a little hard

00:31:10,679 --> 00:31:13,650
to understand what this big block of

00:31:11,970 --> 00:31:16,080
code here is doing there's a lot going

00:31:13,650 --> 00:31:18,809
on but what I want you to really

00:31:16,080 --> 00:31:22,200
concentrate on is how small each of

00:31:18,809 --> 00:31:23,370
those individual steps were right every

00:31:22,200 --> 00:31:25,440
single function I showed you is

00:31:23,370 --> 00:31:27,900
essentially a single line of code

00:31:25,440 --> 00:31:29,760
every operation we did on the output of

00:31:27,900 --> 00:31:31,620
those functions was basically had it

00:31:29,760 --> 00:31:35,600
subtract it multiply it divide it or

00:31:31,620 --> 00:31:39,539
hand it off to another function and that

00:31:35,600 --> 00:31:42,360
really lets us do very complicated

00:31:39,539 --> 00:31:43,799
things with very simple code which is

00:31:42,360 --> 00:31:45,270
one my favorite experiences to have

00:31:43,799 --> 00:31:47,159
because I hate doing complicated things

00:31:45,270 --> 00:31:50,880
it feels like a lot of work and as we

00:31:47,159 --> 00:31:53,250
establish at the top I am lazy in fact

00:31:50,880 --> 00:31:54,809
I'm so lazy I decided that the easiest

00:31:53,250 --> 00:31:57,900
way to do my slides was to write a

00:31:54,809 --> 00:31:59,370
stylish browser extension to hide the

00:31:57,900 --> 00:32:01,799
parts of my notebook I didn't want you

00:31:59,370 --> 00:32:04,559
to see at the time that's the level of

00:32:01,799 --> 00:32:06,890
laziness on that each piece of our code

00:32:04,559 --> 00:32:13,470
is super super simple but we get complex

00:32:06,890 --> 00:32:15,120
behavior and as we go through we don't

00:32:13,470 --> 00:32:16,740
need to know what we're doing one of my

00:32:15,120 --> 00:32:19,110
favorite parts of building this project

00:32:16,740 --> 00:32:20,730
is that at each individual step I

00:32:19,110 --> 00:32:23,370
honestly didn't know what the output was

00:32:20,730 --> 00:32:26,400
going to be till I wrote the code which

00:32:23,370 --> 00:32:27,750
is really fun I don't need to worry

00:32:26,400 --> 00:32:30,450
about making it good this is certainly

00:32:27,750 --> 00:32:32,429
not the best way to do audio synthesis

00:32:30,450 --> 00:32:35,190
if you think about it we're doing it all

00:32:32,429 --> 00:32:37,770
in memory for starters that's kind of

00:32:35,190 --> 00:32:41,159
expensive but it's a fun way to do it

00:32:37,770 --> 00:32:42,870
and it's good enough and one of the

00:32:41,159 --> 00:32:44,640
things that I think is really important

00:32:42,870 --> 00:32:46,280
to quote somewhere or paraphrase someone

00:32:44,640 --> 00:32:48,330
programming should make you happy

00:32:46,280 --> 00:32:50,460
working on this particular project

00:32:48,330 --> 00:32:54,899
really did make me happy I had a lot of

00:32:50,460 --> 00:32:56,169
fun making this project and that source

00:32:54,899 --> 00:32:58,749
is available and I

00:32:56,169 --> 00:33:00,549
really really love to see other people's

00:32:58,749 --> 00:33:02,049
projects and hear the sorts of things

00:33:00,549 --> 00:33:06,519
other people do I have a bunch of

00:33:02,049 --> 00:33:08,139
example code up there including a much

00:33:06,519 --> 00:33:10,989
longer composition which is also up on

00:33:08,139 --> 00:33:12,879
my soundcloud cloud there's not much

00:33:10,989 --> 00:33:17,049
else on my soundcloud and none of its

00:33:12,879 --> 00:33:18,789
actually very good but that's fine there

00:33:17,049 --> 00:33:20,980
are a lot of other places we can go with

00:33:18,789 --> 00:33:22,779
this as well this is the sort of thing

00:33:20,980 --> 00:33:25,600
where we could add some features maybe

00:33:22,779 --> 00:33:27,159
make it a little less bad there's also a

00:33:25,600 --> 00:33:29,799
lot of other functions that we didn't

00:33:27,159 --> 00:33:32,200
talk about numpy has an F mod function

00:33:29,799 --> 00:33:34,210
for floating-point modulus what happens

00:33:32,200 --> 00:33:37,119
when you F mod a sine wave I don't know

00:33:34,210 --> 00:33:40,059
but a it sounds cool what happens

00:33:37,119 --> 00:33:42,309
if you reverse time what happens if you

00:33:40,059 --> 00:33:43,389
put bits of time around these are all

00:33:42,309 --> 00:33:46,059
things you can do and they're

00:33:43,389 --> 00:33:47,169
experiments that you can do with one or

00:33:46,059 --> 00:33:49,600
two lines of code and then you

00:33:47,169 --> 00:33:51,700
immediately execute it and hear the

00:33:49,600 --> 00:33:54,220
result and that's the most important

00:33:51,700 --> 00:33:56,440
part the most important thing is getting

00:33:54,220 --> 00:33:58,600
yourself to the point where you can just

00:33:56,440 --> 00:34:00,820
go and run some code and get a result

00:33:58,600 --> 00:34:02,559
and then iterate on it and it is so much

00:34:00,820 --> 00:34:04,359
fun so I want to thank everybody for

00:34:02,559 --> 00:34:06,639
coming hopefully everybody enjoyed I'd

00:34:04,359 --> 00:34:08,999
love to hear some of your music thank

00:34:06,639 --> 00:34:08,999

YouTube URL: https://www.youtube.com/watch?v=XsB5OK-80Yw


