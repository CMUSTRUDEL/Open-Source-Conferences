Title: Colin Jones - A Bug's Life: What If `Select` Is Broken After All? (Abstractions II Raw Cuts)
Publication date: 2019-11-25
Playlist: Abstractions II Raw Cuts
Description: 
	Presented at Abstractions II, a software conference Code & Supply in Pittsburgh, PA August 21-23, 2019. Learn more at http://www.codeandsupply.co or https://abstractions.io. 

The RAW CUTS series is comprised of selections from a few of our stages wherein the raw video was of high enough quality for C&S to release it before post-production. 

Post-production for a community-run conference with as many speakers and as low of a budget as Abstractions is an enormous and time-consuming undertaking. If you're interested in volunteering your time and CPU cycles to help with post-production, we can use your help. Email us at support@codeandsupply.co and we'll get you into the mix. You'll be permitted to credit yourself in the video pre-roll and credits and we'll thank you in this text and on social media.

Interested in sponsoring professional post-production costs in exchange for your company's name and logo in the video forevermore? Contact us at sponsorship@abstractions.io. Opportunities start at $1,000.

-----
Your project's issue list lies dormant for months, years even. Users seem happy enough, and you've got other priorities. Suddenly, a flurry of users report a crazy-sounding bug. They're seeing a crash, triggered with specific keystrokes, with a common operating system. You can't reproduce it. What in the world?!

You may have heard the debugging tip from the fantastic book Pragmatic Programmer, "select isn't broken". It's always best to assume that bugs are in *your* code. But... what if this one isn't?

In this talk, you'll re-experience this unusual low-level bug, and take away some lessons for the kinds of debugging we need to do all the time as software developers.

https://abstractions.io/schedule/#A%20Bug's%20Life:%20What%20If%20%60Select%60%20Is%20Broken%20After%20All?-Colin%20Jones
Captions: 
	00:00:12,950 --> 00:00:17,340
thank you very much thank you very much

00:00:16,049 --> 00:00:19,529
I'm really happy to be here after a

00:00:17,340 --> 00:00:21,210
crazy day of travel yesterday on colin

00:00:19,529 --> 00:00:23,070
jones and CTO at a company called eighth

00:00:21,210 --> 00:00:25,170
light and this is a story about probably

00:00:23,070 --> 00:00:26,310
the strangest bug i've ever run into and

00:00:25,170 --> 00:00:27,960
it was it was this year it's pretty

00:00:26,310 --> 00:00:29,760
recent it wasn't one of these bugs

00:00:27,960 --> 00:00:31,880
unfortunately much less fun much lower

00:00:29,760 --> 00:00:33,930
Rotten Tomatoes rating and then these

00:00:31,880 --> 00:00:35,219
more like this kind of bug a little more

00:00:33,930 --> 00:00:37,680
boring a little more like the kinds that

00:00:35,219 --> 00:00:39,059
we see day-to-day as developers so this

00:00:37,680 --> 00:00:41,040
is the bug report itself I don't expect

00:00:39,059 --> 00:00:42,360
you to read this it's for an open-source

00:00:41,040 --> 00:00:43,980
project but I think there are a lot of

00:00:42,360 --> 00:00:45,570
lessons here for the kinds of bugs we

00:00:43,980 --> 00:00:48,300
hit and closed source work open source

00:00:45,570 --> 00:00:49,860
work and all kinds of things so before

00:00:48,300 --> 00:00:51,090
we talk about the specific bug I want to

00:00:49,860 --> 00:00:53,219
talk a little bit about my approach to

00:00:51,090 --> 00:00:54,780
debugging in general and some tips that

00:00:53,219 --> 00:00:57,750
have worked well for me personally in

00:00:54,780 --> 00:00:59,340
tracking down issues so there's this

00:00:57,750 --> 00:01:01,710
great book that I think captures a lot

00:00:59,340 --> 00:01:03,960
of really great debugging advice as well

00:01:01,710 --> 00:01:06,630
as tons of other advice there's this

00:01:03,960 --> 00:01:08,580
book launched a publisher it's got a

00:01:06,630 --> 00:01:11,280
20th edition and a 20th anniversary

00:01:08,580 --> 00:01:12,600
edition out this year definitely highly

00:01:11,280 --> 00:01:15,030
recommend it but I want to talk through

00:01:12,600 --> 00:01:16,049
some of the tips that are in there so

00:01:15,030 --> 00:01:17,759
first of all don't panic

00:01:16,049 --> 00:01:19,830
right we need to be thinking clearly

00:01:17,759 --> 00:01:21,540
about bugs in order to solve them the

00:01:19,830 --> 00:01:23,220
right way rather than just addressing

00:01:21,540 --> 00:01:25,350
the first symptom and hitting it with a

00:01:23,220 --> 00:01:27,689
sledgehammer that may or may not solve

00:01:25,350 --> 00:01:29,759
the underlying causes it can be hard to

00:01:27,689 --> 00:01:32,820
do when you're under pressure to like

00:01:29,759 --> 00:01:34,259
this bird here but it does help to not

00:01:32,820 --> 00:01:36,509
panic we really want to understand the

00:01:34,259 --> 00:01:38,579
bug before we go in addressing the

00:01:36,509 --> 00:01:40,530
symptoms and that often starts with

00:01:38,579 --> 00:01:42,360
being able to really reproduce the issue

00:01:40,530 --> 00:01:45,450
or as they put it in the latest edition

00:01:42,360 --> 00:01:46,680
a failing test before fixing code and so

00:01:45,450 --> 00:01:48,180
in their terms you might think

00:01:46,680 --> 00:01:49,619
immediately automated testing automated

00:01:48,180 --> 00:01:51,329
testing is great I love it

00:01:49,619 --> 00:01:53,430
but the important thing here is not you

00:01:51,329 --> 00:01:54,869
know what technology you're using but

00:01:53,430 --> 00:01:56,579
the fact that you're reproducing the

00:01:54,869 --> 00:01:59,850
issue so a failing manual test is fine

00:01:56,579 --> 00:02:01,950
for these purposes and then being able

00:01:59,850 --> 00:02:03,960
to reproduce a bug in your own sort of

00:02:01,950 --> 00:02:05,850
lab environment let's let's just work

00:02:03,960 --> 00:02:07,290
together with something that

00:02:05,850 --> 00:02:09,149
approximates the scientific method

00:02:07,290 --> 00:02:10,470
Stewart Holloway has this great talk

00:02:09,149 --> 00:02:12,690
debugging with the scientific method

00:02:10,470 --> 00:02:13,560
that I'll recommended there be a link at

00:02:12,690 --> 00:02:14,700
the end

00:02:13,560 --> 00:02:16,110
by the way all these slides you can be

00:02:14,700 --> 00:02:19,470
available online so don't feel like you

00:02:16,110 --> 00:02:20,940
need to take screenshots or anything but

00:02:19,470 --> 00:02:22,860
he outlines his debugging approach in

00:02:20,940 --> 00:02:25,290
scientific method terms so building up

00:02:22,860 --> 00:02:27,780
hypotheses making observations

00:02:25,290 --> 00:02:29,190
experiments collecting data and making

00:02:27,780 --> 00:02:31,230
observations on the results of those

00:02:29,190 --> 00:02:32,910
experiments so this can be really

00:02:31,230 --> 00:02:34,110
effective this is what I strive for in

00:02:32,910 --> 00:02:37,410
my day-to-day work it doesn't always

00:02:34,110 --> 00:02:39,599
work out as well as I'd hoped but it's

00:02:37,410 --> 00:02:41,819
it's it's a smart idea in any case the

00:02:39,599 --> 00:02:43,080
fewer unproved assumptions we can make I

00:02:41,819 --> 00:02:45,540
think the more likely that we're going

00:02:43,080 --> 00:02:47,819
to be able to debug the issue and you

00:02:45,540 --> 00:02:48,930
know the scientific method is is great

00:02:47,819 --> 00:02:50,519
and everything but we really want these

00:02:48,930 --> 00:02:53,549
cycles to be super quick we want to be

00:02:50,519 --> 00:02:55,500
forming hypotheses testing them you know

00:02:53,549 --> 00:02:56,489
evidence to support or disconfirm and

00:02:55,500 --> 00:02:58,530
then observing the outcomes those

00:02:56,489 --> 00:03:02,610
experiments for me this fast cycles is a

00:02:58,530 --> 00:03:05,370
really huge thing when debugging or so

00:03:02,610 --> 00:03:06,450
another tip select isn't broken right

00:03:05,370 --> 00:03:08,099
it's cute this is where the title of

00:03:06,450 --> 00:03:12,510
talk comes from or the subtitle at any

00:03:08,099 --> 00:03:14,519
rate and the idea here is that selecting

00:03:12,510 --> 00:03:19,350
in this case is an operating system call

00:03:14,519 --> 00:03:23,250
in in in in a UNIX and the idea is that

00:03:19,350 --> 00:03:25,500
selects not broken most likely or as a

00:03:23,250 --> 00:03:27,120
doctrine Marilyn put it if you see

00:03:25,500 --> 00:03:30,209
hoofprints you should think horse well

00:03:27,120 --> 00:03:32,940
horses not zebras and so it you know

00:03:30,209 --> 00:03:35,160
maybe a depending on you your geography

00:03:32,940 --> 00:03:36,660
in the world there's some causes that

00:03:35,160 --> 00:03:38,940
are going to be more likely than others

00:03:36,660 --> 00:03:40,950
when you have certain observations so in

00:03:38,940 --> 00:03:42,600
in the case of select it's probably some

00:03:40,950 --> 00:03:44,130
application that we wrote probably the

00:03:42,600 --> 00:03:45,600
thing that changed most recently is

00:03:44,130 --> 00:03:47,790
probably not the fundamental building

00:03:45,600 --> 00:03:49,970
blocks of our operating system or the

00:03:47,790 --> 00:03:51,959
things that we're building on top of

00:03:49,970 --> 00:03:53,519
okay but we're not going to talk about

00:03:51,959 --> 00:03:55,769
debugging in general we're going to talk

00:03:53,519 --> 00:03:57,000
about a specific bug today so I need to

00:03:55,769 --> 00:03:59,819
give you a little bit of background on

00:03:57,000 --> 00:04:01,769
my project where this bug happened so

00:03:59,819 --> 00:04:04,190
this this project is called rep Li it's

00:04:01,769 --> 00:04:08,010
a closure repple it's been around since

00:04:04,190 --> 00:04:10,350
2012 what is a rebel and what is closure

00:04:08,010 --> 00:04:12,840
closure is a lisp on the JVM a repple a

00:04:10,350 --> 00:04:14,910
read eval print loop is an interactive

00:04:12,840 --> 00:04:17,820
command-line program that you use to

00:04:14,910 --> 00:04:20,250
type in code evaluate it in a loop it's

00:04:17,820 --> 00:04:21,720
what you're running in closure land when

00:04:20,250 --> 00:04:23,250
you're running line repple or boot

00:04:21,720 --> 00:04:25,380
repple rep Lee is the thing that's

00:04:23,250 --> 00:04:26,680
running under the hood so incidentally I

00:04:25,380 --> 00:04:28,900
was really proud of this name here

00:04:26,680 --> 00:04:31,120
like puns and this was just the absolute

00:04:28,900 --> 00:04:33,850
laziest one I could possibly imagine and

00:04:31,120 --> 00:04:35,440
you see then people pronounced it reply

00:04:33,850 --> 00:04:37,870
for a long time and I thought that was

00:04:35,440 --> 00:04:41,110
hilarious as well it's not funny anymore

00:04:37,870 --> 00:04:42,789
but it was funny that then yeah but it

00:04:41,110 --> 00:04:44,919
was a fun project they had real pain

00:04:42,789 --> 00:04:47,289
points I was solving it felt like an

00:04:44,919 --> 00:04:49,419
itch that I needed to scratch it was

00:04:47,289 --> 00:04:51,100
giving me things that I was used to in

00:04:49,419 --> 00:04:54,639
other language ecosystems like Ruby or

00:04:51,100 --> 00:04:56,199
Python and it felt good it was fun to

00:04:54,639 --> 00:04:58,449
implement I was getting better at

00:04:56,199 --> 00:05:00,340
closure the language it eventually got

00:04:58,449 --> 00:05:01,960
added to some popular ecosystem tooling

00:05:00,340 --> 00:05:04,000
as I mentioned and so I had some users

00:05:01,960 --> 00:05:05,650
who saw some actual value in it and who

00:05:04,000 --> 00:05:07,570
were helping me to shake out issues and

00:05:05,650 --> 00:05:09,099
making sure things really work pretty

00:05:07,570 --> 00:05:11,470
well for everybody and this

00:05:09,099 --> 00:05:14,949
encouragement from users and it was just

00:05:11,470 --> 00:05:17,410
really energizing so this is sort of

00:05:14,949 --> 00:05:19,690
like a dependency graph here line again

00:05:17,410 --> 00:05:21,789
and boot depend on roughly to provide

00:05:19,690 --> 00:05:23,710
this repple behavior but roughly in turn

00:05:21,789 --> 00:05:26,020
really depends on a lot of other code to

00:05:23,710 --> 00:05:28,180
do its job so an repple is some remote

00:05:26,020 --> 00:05:29,889
code evaluation tool similar to what an

00:05:28,180 --> 00:05:31,270
editor might use or a language server

00:05:29,889 --> 00:05:33,610
sort of thing where you send off code

00:05:31,270 --> 00:05:36,039
some remote process to be evaluated and

00:05:33,610 --> 00:05:39,340
replicas that s jacket was a tool I use

00:05:36,039 --> 00:05:42,159
for its closure parser for reasons I

00:05:39,340 --> 00:05:44,199
won't go into today closure complete was

00:05:42,159 --> 00:05:46,930
for deciding what options should be

00:05:44,199 --> 00:05:49,090
available on tab completion and J line

00:05:46,930 --> 00:05:52,240
two really did all of the heavy lifting

00:05:49,090 --> 00:05:53,949
and command-line interactions and it was

00:05:52,240 --> 00:05:55,870
really sort of core to what it was built

00:05:53,949 --> 00:05:57,820
on so we're used to dependencies

00:05:55,870 --> 00:05:59,560
dependencies are a thing we see this

00:05:57,820 --> 00:06:02,590
sort of thing all the time create react

00:05:59,560 --> 00:06:04,630
app has lots of them but because rep Lee

00:06:02,590 --> 00:06:07,389
is really just glue code like it doesn't

00:06:04,630 --> 00:06:09,280
do a lot on its own it really I think of

00:06:07,389 --> 00:06:12,009
it as a glue code that really stitches

00:06:09,280 --> 00:06:14,949
these other tools together because of

00:06:12,009 --> 00:06:16,479
this any bug reports that I got really

00:06:14,949 --> 00:06:18,009
meant I was going to need to dig into

00:06:16,479 --> 00:06:19,710
the surrounding ecosystem and the

00:06:18,009 --> 00:06:22,330
dependencies that I was relying on and

00:06:19,710 --> 00:06:23,979
fix issues there so for each of these

00:06:22,330 --> 00:06:25,840
bugs that came in or that I discovered

00:06:23,979 --> 00:06:28,240
myself I'm doing my best with these

00:06:25,840 --> 00:06:30,340
debugging tips we saw earlier I'm trying

00:06:28,240 --> 00:06:31,630
to reproduce the issue locally or I saw

00:06:30,340 --> 00:06:33,820
it to begin with I'm collecting

00:06:31,630 --> 00:06:36,669
information from the code the symptoms

00:06:33,820 --> 00:06:39,099
to form hypotheses to make the changes

00:06:36,669 --> 00:06:39,729
and test those hypotheses and in the

00:06:39,099 --> 00:06:41,110
process getting

00:06:39,729 --> 00:06:44,949
faster and faster those loops and

00:06:41,110 --> 00:06:46,719
getting better at debugging so plenty of

00:06:44,949 --> 00:06:48,610
these issues were super tricky and they

00:06:46,719 --> 00:06:50,379
took a long time the cycles were slow at

00:06:48,610 --> 00:06:51,789
first and they sped up but more practice

00:06:50,379 --> 00:06:53,379
and experience so it helped each one to

00:06:51,789 --> 00:06:56,650
get a little bit easier it built some

00:06:53,379 --> 00:06:57,939
confidence in debugging and you know was

00:06:56,650 --> 00:06:59,680
doing a decent amount of this at work

00:06:57,939 --> 00:07:02,589
too so that's where some of this comes

00:06:59,680 --> 00:07:04,960
from so at some point things start to

00:07:02,589 --> 00:07:07,419
feel pretty okay not perfect by any

00:07:04,960 --> 00:07:08,620
stretch and not perfect today plenty of

00:07:07,419 --> 00:07:10,479
ways to improve it but the horrible

00:07:08,620 --> 00:07:13,180
looking bugs the places where things

00:07:10,479 --> 00:07:14,469
were just a tire fire got less frequent

00:07:13,180 --> 00:07:17,529
and I felt really some sense of pride

00:07:14,469 --> 00:07:19,210
and accomplishment around it I'm so I'm

00:07:17,529 --> 00:07:20,559
feeling a little bit like the sleepy Fox

00:07:19,210 --> 00:07:22,839
at this point some sense of doneness

00:07:20,559 --> 00:07:24,550
accomplishment the github issues list

00:07:22,839 --> 00:07:26,110
has grown a little bit with some feature

00:07:24,550 --> 00:07:28,599
requests and I feel some guilt and shame

00:07:26,110 --> 00:07:31,719
around that but not enough to motivate

00:07:28,599 --> 00:07:33,490
me to go further which I I want to say

00:07:31,719 --> 00:07:35,349
it's not necessarily a bad thing when a

00:07:33,490 --> 00:07:36,879
maintainer gets demotivated in this way

00:07:35,349 --> 00:07:38,680
I think we should all have some empathy

00:07:36,879 --> 00:07:40,779
and I'm I'm saying this out of

00:07:38,680 --> 00:07:42,610
self-interest and also because I think

00:07:40,779 --> 00:07:44,139
it's it's it's wise for others but

00:07:42,610 --> 00:07:46,270
having empathy for maintainer who are in

00:07:44,139 --> 00:07:48,159
this state is great my users have been

00:07:46,270 --> 00:07:50,620
awesome people have been nice to me this

00:07:48,159 --> 00:07:53,319
is not coming from a place of anger at

00:07:50,620 --> 00:07:55,539
users but you know we have reasons for

00:07:53,319 --> 00:07:58,419
being this way I have two small kids who

00:07:55,539 --> 00:08:00,430
are great J line three is a thing and

00:07:58,419 --> 00:08:02,289
it's come out it depends on a higher JVM

00:08:00,430 --> 00:08:03,849
version it's way more feature fold

00:08:02,289 --> 00:08:06,129
there's a tool that's been built on top

00:08:03,849 --> 00:08:08,409
of that called rebel Red Line that's way

00:08:06,129 --> 00:08:10,689
better than my stuff I think better

00:08:08,409 --> 00:08:13,599
decoupled it's it's got better

00:08:10,689 --> 00:08:15,490
responsibilities boundaries it it has it

00:08:13,599 --> 00:08:17,229
has better features and so roughly at

00:08:15,490 --> 00:08:18,729
this point to me sort of feels kind of

00:08:17,229 --> 00:08:22,959
done despite having plenty of active

00:08:18,729 --> 00:08:25,539
users and but but this is this is sort

00:08:22,959 --> 00:08:27,430
of how I feel okay so now we've got

00:08:25,539 --> 00:08:29,349
enough context it's time to see the bug

00:08:27,430 --> 00:08:31,449
report itself in and to re-experience

00:08:29,349 --> 00:08:33,219
this thing so here's where you come in

00:08:31,449 --> 00:08:35,110
you're gonna I want you all to put

00:08:33,219 --> 00:08:36,819
yourself in my shoes here try to occupy

00:08:35,110 --> 00:08:38,800
the mental space and the emotional space

00:08:36,819 --> 00:08:41,519
I was in in fact let's look at the Fox

00:08:38,800 --> 00:08:45,760
again before things get real okay

00:08:41,519 --> 00:08:47,649
very calm okay so the book it arrives it

00:08:45,760 --> 00:08:50,380
comes into line again with a stack trace

00:08:47,649 --> 00:08:52,269
the repple seems to crash all the time

00:08:50,380 --> 00:08:53,380
for this user and for several other

00:08:52,269 --> 00:08:54,850
users commenting

00:08:53,380 --> 00:08:56,650
thread I don't see this bug report

00:08:54,850 --> 00:08:59,560
because I've turned off notifications

00:08:56,650 --> 00:09:01,660
for lying again a while back but a

00:08:59,560 --> 00:09:03,790
couple weeks later via the author of

00:09:01,660 --> 00:09:05,590
line again Phil hey Goldberg

00:09:03,790 --> 00:09:07,390
you know after some triaging and other

00:09:05,590 --> 00:09:08,740
folks reporting the issue thanks me to

00:09:07,390 --> 00:09:11,020
see if I have any ideas so I started

00:09:08,740 --> 00:09:13,600
scrolling through the report to see what

00:09:11,020 --> 00:09:16,030
data is there and the stack trace to me

00:09:13,600 --> 00:09:18,670
seems like it clearly implicates J line

00:09:16,030 --> 00:09:21,100
if you don't know Java that's fine but

00:09:18,670 --> 00:09:22,360
you can see that here Java IO and Java

00:09:21,100 --> 00:09:24,400
dot lying there's really sort of

00:09:22,360 --> 00:09:26,080
built-in language things and I'm not

00:09:24,400 --> 00:09:28,450
gonna blame those but I do see J line

00:09:26,080 --> 00:09:30,970
there and so to me seems like

00:09:28,450 --> 00:09:33,220
immediately obvious that it's not a line

00:09:30,970 --> 00:09:34,780
again thing it must be a J line or at

00:09:33,220 --> 00:09:36,910
least a repla thing may be rep lose use

00:09:34,780 --> 00:09:38,320
of J line is is incorrect on the

00:09:36,910 --> 00:09:40,000
secretaries you can't quite see there

00:09:38,320 --> 00:09:41,820
but I'm it's in Portuguese so I'm

00:09:40,000 --> 00:09:44,350
thinking and back in my head maybe some

00:09:41,820 --> 00:09:46,390
non-us keyboard thing J line to I

00:09:44,350 --> 00:09:48,570
remember a while back had a few issues

00:09:46,390 --> 00:09:52,930
that only affected specific countries

00:09:48,570 --> 00:09:54,370
keyboards there was an interesting note

00:09:52,930 --> 00:09:55,990
in the issue report about where it

00:09:54,370 --> 00:09:57,970
happens the most often this sounded

00:09:55,990 --> 00:09:59,530
pretty closure e to me closures got a

00:09:57,970 --> 00:10:01,660
lot of braces and brackets and stuff

00:09:59,530 --> 00:10:04,060
like this so I'm thinking maybe probably

00:10:01,660 --> 00:10:05,080
you know again horses not zebras and

00:10:04,060 --> 00:10:07,870
select isn't broken

00:10:05,080 --> 00:10:10,030
probably my stuff probably rectly and

00:10:07,870 --> 00:10:12,640
several folks have also left in their

00:10:10,030 --> 00:10:14,050
comments um what they have in common and

00:10:12,640 --> 00:10:16,210
at least the the main thing other than

00:10:14,050 --> 00:10:18,040
then using my software is that they're

00:10:16,210 --> 00:10:21,900
all running Ubuntu 18 point oh four

00:10:18,040 --> 00:10:21,900
which is fairly common operating system

00:10:22,230 --> 00:10:27,880
so first things first want to reproduce

00:10:25,480 --> 00:10:29,530
the bug everybody everybody's in the

00:10:27,880 --> 00:10:31,210
same mental space everybody successful

00:10:29,530 --> 00:10:32,950
not panicking so far I hope great

00:10:31,210 --> 00:10:35,980
concern for sure right this is not good

00:10:32,950 --> 00:10:37,150
it's crashing but not panicking so

00:10:35,980 --> 00:10:39,070
there's a little bit of complexity for

00:10:37,150 --> 00:10:41,650
me and reproducing I haven't seen this

00:10:39,070 --> 00:10:44,350
issue on my Mac OS install and all the

00:10:41,650 --> 00:10:45,640
reports seem to be on a bun - that's

00:10:44,350 --> 00:10:48,310
fine we've done this many times before

00:10:45,640 --> 00:10:50,860
in previous iterations I would highly

00:10:48,310 --> 00:10:52,270
recommend this practice to have a handy

00:10:50,860 --> 00:10:54,250
a toy virtual machine that you can use

00:10:52,270 --> 00:10:56,920
to spin up and and reproduce other

00:10:54,250 --> 00:10:58,630
operating systems environments so I've

00:10:56,920 --> 00:11:00,490
got one that for Linux and one for

00:10:58,630 --> 00:11:04,450
Windows not tons of different versions

00:11:00,490 --> 00:11:05,770
just the basics for me fast cycles I

00:11:04,450 --> 00:11:07,240
don't want to like tweak something and

00:11:05,770 --> 00:11:09,010
send it back to users

00:11:07,240 --> 00:11:10,990
them to test it out because I want to

00:11:09,010 --> 00:11:16,420
try myself and get those cycles really

00:11:10,990 --> 00:11:18,820
fast so I spin at my bun to VM and I try

00:11:16,420 --> 00:11:21,370
to reproduce and I can't things teams

00:11:18,820 --> 00:11:22,870
seemed totally fine right I keep at it

00:11:21,370 --> 00:11:24,310
for a while different combinations of

00:11:22,870 --> 00:11:27,149
opening and closing brackets and

00:11:24,310 --> 00:11:30,880
nestings and normal characters in there

00:11:27,149 --> 00:11:33,880
can't can't reproduce it darn it

00:11:30,880 --> 00:11:36,850
so so it's absolutely true that the code

00:11:33,880 --> 00:11:38,680
does work on my machine but it's also of

00:11:36,850 --> 00:11:40,870
course completely unhelpful to the folks

00:11:38,680 --> 00:11:42,760
that are experiencing this bug they're

00:11:40,870 --> 00:11:44,200
having a hard enough time already and I

00:11:42,760 --> 00:11:45,790
want to be empathetic really to their

00:11:44,200 --> 00:11:47,560
experience you know think about how you

00:11:45,790 --> 00:11:49,630
feel when you're having an issue on your

00:11:47,560 --> 00:11:50,890
machine and you tell that to a teammate

00:11:49,630 --> 00:11:52,930
and they say it works on my machine and

00:11:50,890 --> 00:11:54,610
they shrug right this this feels bad

00:11:52,930 --> 00:11:57,070
right we don't want to respond in this

00:11:54,610 --> 00:11:59,410
way to folks so I I usually try not to

00:11:57,070 --> 00:12:01,240
tell people what to do in my talks and

00:11:59,410 --> 00:12:03,610
in my conversations but I want to ask

00:12:01,240 --> 00:12:05,410
you please don't let yourself say that

00:12:03,610 --> 00:12:07,060
works on my machine really like dig

00:12:05,410 --> 00:12:08,410
deeper to understand what's different

00:12:07,060 --> 00:12:09,690
what it is that's different between your

00:12:08,410 --> 00:12:11,649
machines I mean you can say that but

00:12:09,690 --> 00:12:14,200
actually just know just don't say it

00:12:11,649 --> 00:12:17,920
just go straight to the question what's

00:12:14,200 --> 00:12:19,480
different okay so we've hit a bit of a

00:12:17,920 --> 00:12:22,180
dead end in the script here right if I

00:12:19,480 --> 00:12:24,370
can't reproduce you know I'm not

00:12:22,180 --> 00:12:27,040
panicking but on the other hand you know

00:12:24,370 --> 00:12:28,839
look this is me so I'll definitely need

00:12:27,040 --> 00:12:30,459
to ask for some help reproducing but

00:12:28,839 --> 00:12:32,170
meantime we can't go another direction

00:12:30,459 --> 00:12:34,600
and really start to think harder about

00:12:32,170 --> 00:12:37,329
the bug report possible causes we can't

00:12:34,600 --> 00:12:38,440
confirm and verify our hypotheses but we

00:12:37,329 --> 00:12:40,660
can we can at least start to generate

00:12:38,440 --> 00:12:44,980
them and get like a to-do list of things

00:12:40,660 --> 00:12:47,290
to try out okay so experience has told

00:12:44,980 --> 00:12:48,940
us that certainly almost certainly code

00:12:47,290 --> 00:12:51,459
that I wrote right probably let the last

00:12:48,940 --> 00:12:53,410
thing that got changed must be a rep Lee

00:12:51,459 --> 00:12:54,760
or J line bug I figure but the weird

00:12:53,410 --> 00:12:56,770
thing about this one is nothing's been

00:12:54,760 --> 00:12:59,260
changing recently in either one of these

00:12:56,770 --> 00:13:01,450
these things rep Lee has had a few

00:12:59,260 --> 00:13:02,890
updates to n repple but they don't seem

00:13:01,450 --> 00:13:05,320
like n replicas that seem like the kind

00:13:02,890 --> 00:13:06,730
of thing that would cause this maybe but

00:13:05,320 --> 00:13:09,040
let's look closer again at the bug

00:13:06,730 --> 00:13:11,890
report remember there's this opening and

00:13:09,040 --> 00:13:13,420
closing maps parentheses brackets sort

00:13:11,890 --> 00:13:15,699
of part of the bug report which

00:13:13,420 --> 00:13:18,550
unfortunately seems very familiar to me

00:13:15,699 --> 00:13:19,059
because I remember a feature in J line 2

00:13:18,550 --> 00:13:22,299
called

00:13:19,059 --> 00:13:23,499
blank matching paren that J line to

00:13:22,299 --> 00:13:28,089
again is one of the dependencies from

00:13:23,499 --> 00:13:32,409
earlier and yeah it was me that added

00:13:28,089 --> 00:13:33,609
that feature so yeah so you know the

00:13:32,409 --> 00:13:34,929
idea here with this feature blank

00:13:33,609 --> 00:13:37,869
matching parameters when you close a

00:13:34,929 --> 00:13:40,119
parentheses or whatever the Associated

00:13:37,869 --> 00:13:41,649
opening bracket will blink to show you

00:13:40,119 --> 00:13:43,779
what you're doing and what your context

00:13:41,649 --> 00:13:45,369
is so this is important in a lisp

00:13:43,779 --> 00:13:46,749
because parens can be far apart from

00:13:45,369 --> 00:13:48,369
each other you know sometimes you hear

00:13:46,749 --> 00:13:50,469
people complain all lips have too many

00:13:48,369 --> 00:13:52,509
parentheses and it's really annoying but

00:13:50,469 --> 00:13:54,159
I think what they really mean is the

00:13:52,509 --> 00:13:57,129
parentheses are too far apart and it's

00:13:54,159 --> 00:13:59,519
hard to keep track of them I don't agree

00:13:57,129 --> 00:14:01,449
with that by the way but that's I think

00:13:59,519 --> 00:14:03,789
was an interesting insight for me

00:14:01,449 --> 00:14:05,289
recently okay so this was seven years

00:14:03,789 --> 00:14:07,209
ago this was seven years ago why would

00:14:05,289 --> 00:14:09,339
this suddenly start causing issues now

00:14:07,209 --> 00:14:11,139
so I go into the code see see what the

00:14:09,339 --> 00:14:13,749
code looks like I look at the diff and I

00:14:11,139 --> 00:14:15,819
see this terrifying thing so anytime I

00:14:13,749 --> 00:14:17,769
see a time out I'm gonna start getting

00:14:15,819 --> 00:14:19,059
stressed out because particularly if

00:14:17,769 --> 00:14:20,949
it's something I can't I can't reproduce

00:14:19,059 --> 00:14:22,839
I'm starting to think race condition

00:14:20,949 --> 00:14:24,279
maybe write a time out is about waiting

00:14:22,839 --> 00:14:26,469
some period of time to see if something

00:14:24,279 --> 00:14:28,899
else happens and and taking some action

00:14:26,469 --> 00:14:30,879
based on on what the timing looks like

00:14:28,899 --> 00:14:33,999
so if the process is running differently

00:14:30,879 --> 00:14:35,739
if IO takes longer etc something

00:14:33,999 --> 00:14:37,179
different is gonna happen so in this

00:14:35,739 --> 00:14:38,919
case we don't doesn't the details don't

00:14:37,179 --> 00:14:40,299
matter J line essentially peaks at a

00:14:38,919 --> 00:14:42,339
stream to see if there's a character

00:14:40,299 --> 00:14:43,839
available or not and it decides whether

00:14:42,339 --> 00:14:46,509
to Blake the print or not based on that

00:14:43,839 --> 00:14:48,669
so this to me feels like a bit of a

00:14:46,509 --> 00:14:51,609
smoking gun this is you know concurrent

00:14:48,669 --> 00:14:53,589
stuff is really hard for me and for most

00:14:51,609 --> 00:14:56,019
people I think it was probably me that

00:14:53,589 --> 00:14:57,609
did this some new aspect to the

00:14:56,019 --> 00:14:59,619
environment it's probably causing a race

00:14:57,609 --> 00:15:04,719
condition that's that's my like foremost

00:14:59,619 --> 00:15:05,559
hypothesis at this point so it's about

00:15:04,719 --> 00:15:07,509
this time that I started getting

00:15:05,559 --> 00:15:09,669
somewhat less successful in not

00:15:07,509 --> 00:15:12,969
panicking by the way it feels really I

00:15:09,669 --> 00:15:14,769
don't know like liberating and I feel

00:15:12,969 --> 00:15:16,209
really glad that every one of you is now

00:15:14,769 --> 00:15:20,799
sharing in the responsibility for

00:15:16,209 --> 00:15:23,559
writing this bug thank you for this ok

00:15:20,799 --> 00:15:25,269
so I still need to be able to reproduce

00:15:23,559 --> 00:15:27,459
so we're gonna have to you know sort of

00:15:25,269 --> 00:15:28,959
step back and take those long cycles

00:15:27,459 --> 00:15:32,080
instead I mean I asked for help

00:15:28,959 --> 00:15:33,580
reproducing on my issues list

00:15:32,080 --> 00:15:35,740
I'm gonna have to wait for replies for a

00:15:33,580 --> 00:15:37,089
while hoping to confirm that it is this

00:15:35,740 --> 00:15:39,430
blink matching prints feature and

00:15:37,089 --> 00:15:41,560
specifically I'm asking people to you

00:15:39,430 --> 00:15:43,209
know clone my repo turn off the blink

00:15:41,560 --> 00:15:45,839
matching parens feature run it locally

00:15:43,209 --> 00:15:48,130
and see it see if that solves the issue

00:15:45,839 --> 00:15:50,860
so I'm asking them to do the hard work

00:15:48,130 --> 00:15:52,300
of well it's not hard for them there if

00:15:50,860 --> 00:15:55,660
it was hard for them they would be able

00:15:52,300 --> 00:15:59,529
to fix it but I want them to reproduce

00:15:55,660 --> 00:16:01,510
the issue okay so I open a related issue

00:15:59,529 --> 00:16:03,339
in J line to just attract BS you asked

00:16:01,510 --> 00:16:05,110
for help reproducing there in case case

00:16:03,339 --> 00:16:09,220
it could could relate back to J line to

00:16:05,110 --> 00:16:11,290
directly for other use cases I don't

00:16:09,220 --> 00:16:15,910
hear anything back for a few days and

00:16:11,290 --> 00:16:21,820
then ran into that issue from SBT turns

00:16:15,910 --> 00:16:24,730
out to be a bad kernel so okay what a

00:16:21,820 --> 00:16:26,529
bad kernel so let's follow this link

00:16:24,730 --> 00:16:28,810
let's let's let's see with SBT folks

00:16:26,529 --> 00:16:31,450
have found out so SBT is the Scala build

00:16:28,810 --> 00:16:33,579
tool I mean runs on the JVM - I learned

00:16:31,450 --> 00:16:35,320
through this process that it must use J

00:16:33,579 --> 00:16:37,720
line there's nothing in that ticket

00:16:35,320 --> 00:16:39,970
about blink matching paren which is sort

00:16:37,720 --> 00:16:42,220
of weird but following their link I I

00:16:39,970 --> 00:16:44,740
really want to prove it here to myself

00:16:42,220 --> 00:16:46,149
at least I can't reproduce the issue but

00:16:44,740 --> 00:16:47,860
I really want to understand what's going

00:16:46,149 --> 00:16:49,930
on so that I have something clear to

00:16:47,860 --> 00:16:55,060
tell my users in terms of of their

00:16:49,930 --> 00:16:56,770
expectations so that in turn links to

00:16:55,060 --> 00:16:59,020
this forum post this forum post

00:16:56,770 --> 00:17:02,140
identifies the affected kernels points

00:16:59,020 --> 00:17:06,459
it 18.04 I search around the website for

00:17:02,140 --> 00:17:07,929
a while and I find another post from a

00:17:06,459 --> 00:17:09,400
little further back after lots of

00:17:07,929 --> 00:17:11,740
debugging and some brief discussion on

00:17:09,400 --> 00:17:13,929
the Linux kernel mailing list that's

00:17:11,740 --> 00:17:15,400
what L KML is it appears this is the

00:17:13,929 --> 00:17:17,290
result of a bug introduced into Linux

00:17:15,400 --> 00:17:19,240
between you know in this in this

00:17:17,290 --> 00:17:21,339
two-month window essentially so I really

00:17:19,240 --> 00:17:24,790
want to understand more and really

00:17:21,339 --> 00:17:26,140
understand how how this this bug arose

00:17:24,790 --> 00:17:28,120
so I want to see the Linux kernel

00:17:26,140 --> 00:17:29,890
mailing list discussion in particular

00:17:28,120 --> 00:17:31,870
because I look at the deeper at the

00:17:29,890 --> 00:17:33,309
Forum website and you know who are who

00:17:31,870 --> 00:17:36,760
are these spigot folks what even is this

00:17:33,309 --> 00:17:38,679
website it's a minecraft server so so

00:17:36,760 --> 00:17:40,690
minecraft just kind of blows my mind cuz

00:17:38,679 --> 00:17:43,390
my six-year-old son Owen loves playing

00:17:40,690 --> 00:17:44,890
the demo version of Minecraft on my my

00:17:43,390 --> 00:17:45,370
computer loves exploring seeing the

00:17:44,890 --> 00:17:47,050
different

00:17:45,370 --> 00:17:48,730
it's on peaceful mode there's no scary

00:17:47,050 --> 00:17:51,100
zombies it's great

00:17:48,730 --> 00:17:52,870
so this blood this is sort of making me

00:17:51,100 --> 00:17:54,940
cry a little bit so we've got a

00:17:52,870 --> 00:17:56,710
minecraft forum is apparently so far the

00:17:54,940 --> 00:18:01,840
canonical source for this Linux kernel

00:17:56,710 --> 00:18:03,940
bug hi I'm failing like I I Google for

00:18:01,840 --> 00:18:05,980
like hours trying to find a Linux kernel

00:18:03,940 --> 00:18:08,500
mailing list discussion for this I troll

00:18:05,980 --> 00:18:10,120
through trawl through on mailing list

00:18:08,500 --> 00:18:11,980
you know how many commits commit at the

00:18:10,120 --> 00:18:14,770
linux kernel in two months there's a lot

00:18:11,980 --> 00:18:16,330
so I'm not gonna look at every commit so

00:18:14,770 --> 00:18:18,520
my googling is failing me so eventually

00:18:16,330 --> 00:18:20,679
I find out who this user is on this

00:18:18,520 --> 00:18:25,170
forum website I it looks like the maybe

00:18:20,679 --> 00:18:27,490
the lead lead author on the website and

00:18:25,170 --> 00:18:29,200
ping them to ask them for links in

00:18:27,490 --> 00:18:30,520
canaan they help me out what where's the

00:18:29,200 --> 00:18:32,170
where's the kernel mailing list and of

00:18:30,520 --> 00:18:35,530
course like as soon as I post this 30

00:18:32,170 --> 00:18:37,179
minutes later I heard duct here and you

00:18:35,530 --> 00:18:39,130
know you know the idea of rubber ducking

00:18:37,179 --> 00:18:41,380
where you talk to an inanimate object

00:18:39,130 --> 00:18:43,270
like a rubber duck and explain your

00:18:41,380 --> 00:18:45,730
problem and you immediately come to your

00:18:43,270 --> 00:18:48,640
own solution so I find the right query

00:18:45,730 --> 00:18:51,070
it was the user name and Linux and

00:18:48,640 --> 00:18:53,760
kernel on Google it worked on Google but

00:18:51,070 --> 00:18:56,830
not on my usual DuckDuckGo go figure

00:18:53,760 --> 00:18:58,720
anyway I find the Ubuntu kernel bug

00:18:56,830 --> 00:19:01,480
tracker so apparently the bunch of

00:18:58,720 --> 00:19:03,400
kernel was missing a specific commit and

00:19:01,480 --> 00:19:06,030
they linked to the exact commit I

00:19:03,400 --> 00:19:08,950
learned in this process that the kernel

00:19:06,030 --> 00:19:10,720
isn't isn't like a global Linux thing or

00:19:08,950 --> 00:19:12,970
maybe it is in some sense but what a

00:19:10,720 --> 00:19:15,309
bunch of ship says as Ubuntu's kernel is

00:19:12,970 --> 00:19:18,010
is not exactly you know one-to-one

00:19:15,309 --> 00:19:20,130
mapping with whatever's in Torvalds get

00:19:18,010 --> 00:19:21,760
repo so Ubuntu in it so there might be

00:19:20,130 --> 00:19:23,980
missing commits there might be

00:19:21,760 --> 00:19:25,780
additional commits a Linux distribution

00:19:23,980 --> 00:19:30,130
might have different kernels running on

00:19:25,780 --> 00:19:33,460
it which which is interesting so a tip

00:19:30,130 --> 00:19:35,080
here just intervening in my case you

00:19:33,460 --> 00:19:37,179
know of course you know we want to think

00:19:35,080 --> 00:19:39,309
about how search engines work use rare

00:19:37,179 --> 00:19:41,020
words rare combination of words but once

00:19:39,309 --> 00:19:43,179
that are guaranteed to be in wherever

00:19:41,020 --> 00:19:44,950
we're looking so computer bug it we

00:19:43,179 --> 00:19:47,170
probably all know by this point is not

00:19:44,950 --> 00:19:50,140
going to to find our issue Linux kernel

00:19:47,170 --> 00:19:52,570
bug also not quite specific enough J

00:19:50,140 --> 00:19:54,010
line Linux kernel was great but too rare

00:19:52,570 --> 00:19:56,050
it wasn't actually in the thing I was

00:19:54,010 --> 00:19:56,820
looking for so I happened to add a user

00:19:56,050 --> 00:19:59,669
name in this case

00:19:56,820 --> 00:20:02,880
and that worked so the a bunch of

00:19:59,669 --> 00:20:05,100
Colonel bug tracker links in turn to a

00:20:02,880 --> 00:20:06,389
Linux console mailing list discussion

00:20:05,100 --> 00:20:08,929
which which I learned is a different

00:20:06,389 --> 00:20:13,440
thing from the Linux kernel mailing list

00:20:08,929 --> 00:20:16,559
and configure and the same user has has

00:20:13,440 --> 00:20:19,559
submitted a a bug report to the Linux

00:20:16,559 --> 00:20:22,769
kernel with a very short C program that

00:20:19,559 --> 00:20:24,600
shows the issue so points out a

00:20:22,769 --> 00:20:26,909
potential cause presented as a

00:20:24,600 --> 00:20:28,350
hypothesis here's what I believe caught

00:20:26,909 --> 00:20:31,710
just shows the issue but most

00:20:28,350 --> 00:20:34,590
importantly they include a phase AC

00:20:31,710 --> 00:20:38,669
program which is great and they go

00:20:34,590 --> 00:20:42,899
through a little bit of detail in terms

00:20:38,669 --> 00:20:46,590
of of what of description in terms of

00:20:42,899 --> 00:20:48,809
what happened which is super helpful but

00:20:46,590 --> 00:20:51,090
really most importantly is is the simple

00:20:48,809 --> 00:20:52,830
reproduction case the really powerful

00:20:51,090 --> 00:20:55,409
thing about this reproduction case that

00:20:52,830 --> 00:20:57,179
they've they've they've done is to do it

00:20:55,409 --> 00:20:59,909
in C right they've done it in a language

00:20:57,179 --> 00:21:03,000
that completely eliminates the J line

00:20:59,909 --> 00:21:05,190
and library and the JVM entirely as

00:21:03,000 --> 00:21:06,659
potential causes for this bug so the

00:21:05,190 --> 00:21:08,639
lengths folks don't have to worry about

00:21:06,659 --> 00:21:10,740
this whole Java ecosystem and who knows

00:21:08,639 --> 00:21:13,080
what other libraries are depending on

00:21:10,740 --> 00:21:14,970
here and and they've they've done it you

00:21:13,080 --> 00:21:17,370
know MC in a language that the Linux

00:21:14,970 --> 00:21:18,330
kernel folks understand so in this case

00:21:17,370 --> 00:21:20,370
we're not going to go through all the

00:21:18,330 --> 00:21:22,500
code but the idea is there's there's a

00:21:20,370 --> 00:21:24,659
forked process there's two processes

00:21:22,500 --> 00:21:26,580
running in this example program one is

00:21:24,659 --> 00:21:29,879
an infinite loop that just touches the

00:21:26,580 --> 00:21:33,000
the tty or the terminal console every

00:21:29,879 --> 00:21:35,610
now and then every second ish forever

00:21:33,000 --> 00:21:38,009
and then the the the other forked

00:21:35,610 --> 00:21:40,289
process are the the main process that

00:21:38,009 --> 00:21:43,980
wasn't forked will actually I'm not sure

00:21:40,289 --> 00:21:45,750
whether fork equals 1 or equals 0 is the

00:21:43,980 --> 00:21:47,429
forked one or not but in any case there

00:21:45,750 --> 00:21:49,470
are processes that fork one is an

00:21:47,429 --> 00:21:54,809
infinite loop and then one it just waits

00:21:49,470 --> 00:21:57,090
until you hit Enter um so I think a big

00:21:54,809 --> 00:21:58,860
tip here is is great bug reports are

00:21:57,090 --> 00:22:00,629
gonna help bugs get solved faster right

00:21:58,860 --> 00:22:04,470
omitting everything that's non-essential

00:22:00,629 --> 00:22:06,929
right DJ line JVM any other libraries

00:22:04,470 --> 00:22:09,070
doing it straight straight to the

00:22:06,929 --> 00:22:10,600
essentials trimming trimming all the fat

00:22:09,070 --> 00:22:12,190
but then including everything that is

00:22:10,600 --> 00:22:14,799
essential so that it was still you know

00:22:12,190 --> 00:22:17,380
I said simple C program but there's fork

00:22:14,799 --> 00:22:21,460
and there's some stuff in here but they

00:22:17,380 --> 00:22:22,360
need to be able to reproduce it so in

00:22:21,460 --> 00:22:24,100
the process

00:22:22,360 --> 00:22:25,980
folks responded pretty much immediately

00:22:24,100 --> 00:22:29,710
same day like there were four responses

00:22:25,980 --> 00:22:30,850
to this bug and they immediately the

00:22:29,710 --> 00:22:33,669
folks who knew about the issue

00:22:30,850 --> 00:22:36,519
immediately were able to identify that

00:22:33,669 --> 00:22:38,259
there was a missing a missing commit in

00:22:36,519 --> 00:22:40,360
the land in the Ubuntu kernel and this

00:22:38,259 --> 00:22:42,730
was the commit I don't expect you to

00:22:40,360 --> 00:22:46,690
read this but here's the key part it

00:22:42,730 --> 00:22:48,820
opted this this fixing commit optimizes

00:22:46,690 --> 00:22:51,309
a fast path but really it the important

00:22:48,820 --> 00:22:54,070
thing is it won't interrupt ongoing i/o

00:22:51,309 --> 00:22:57,879
on the tty interrupting ongoing i/o is

00:22:54,070 --> 00:22:59,860
is the issue in this case so the fixed

00:22:57,879 --> 00:23:02,440
code which i think is anticlimactic at

00:22:59,860 --> 00:23:03,909
this point and i again out of scope for

00:23:02,440 --> 00:23:05,409
this talk i think and really for my own

00:23:03,909 --> 00:23:08,320
understanding to drill into the

00:23:05,409 --> 00:23:10,750
implementation details here but suffice

00:23:08,320 --> 00:23:13,539
to say that it avoids some Astra extra

00:23:10,750 --> 00:23:16,090
disruptive you know locking logic and

00:23:13,539 --> 00:23:17,409
when accessing the the tty in certain

00:23:16,090 --> 00:23:19,389
situations and that's what's going to

00:23:17,409 --> 00:23:24,639
fix our bug says this lint mailing list

00:23:19,389 --> 00:23:26,950
so we need we still need to reproduce

00:23:24,639 --> 00:23:28,899
the issue right so so now the challenge

00:23:26,950 --> 00:23:30,879
we just need to figure out how to run

00:23:28,899 --> 00:23:32,980
with an affected kernel no problem I'm

00:23:30,879 --> 00:23:34,379
just install an old kernel version and

00:23:32,980 --> 00:23:36,879
it'll check it out

00:23:34,379 --> 00:23:39,100
okay I'm gonna I'm gonna be honest here

00:23:36,879 --> 00:23:40,779
I looked at the instructions for doing

00:23:39,100 --> 00:23:43,480
this and I looked at the time I had to

00:23:40,779 --> 00:23:46,809
spend with my work stuff and kids and

00:23:43,480 --> 00:23:48,850
decided that the explanation sort of

00:23:46,809 --> 00:23:50,860
made sense the SPT folks could be

00:23:48,850 --> 00:23:52,840
trusted and I was gonna really let

00:23:50,860 --> 00:23:54,610
someone who actually uses Linux on the

00:23:52,840 --> 00:23:55,809
desktop worried about you know Chayton

00:23:54,610 --> 00:23:57,340
yeah installing the old kernel

00:23:55,809 --> 00:23:59,110
confirming for Rep lease purposes I

00:23:57,340 --> 00:24:03,190
already had this this request out for

00:23:59,110 --> 00:24:04,929
folks but in the meantime you know what

00:24:03,190 --> 00:24:07,809
do we do to mitigate this assuming this

00:24:04,929 --> 00:24:09,940
is true so one we can work around the

00:24:07,809 --> 00:24:11,919
kernel bug in user space and like

00:24:09,940 --> 00:24:15,250
provide an option to turn off this blank

00:24:11,919 --> 00:24:16,840
matching parens feature it sounds really

00:24:15,250 --> 00:24:18,760
annoying and you know we don't leave

00:24:16,840 --> 00:24:21,070
we're only affecting two kernels here

00:24:18,760 --> 00:24:22,809
I'm so I'm curious how widespread it is

00:24:21,070 --> 00:24:25,210
I'm and then the other option which is

00:24:22,809 --> 00:24:27,190
really more in my speed is to just ask

00:24:25,210 --> 00:24:32,019
people to upgrade their kernels and see

00:24:27,190 --> 00:24:33,730
if see whether that flies so my

00:24:32,019 --> 00:24:37,419
suggestion is the second leaving the

00:24:33,730 --> 00:24:39,100
door open to the first one and then

00:24:37,419 --> 00:24:41,350
pretty quickly I get the best issue

00:24:39,100 --> 00:24:44,129
comment ever after updating the kernel

00:24:41,350 --> 00:24:45,340
the repple error just stopped thanks

00:24:44,129 --> 00:24:48,340
okay

00:24:45,340 --> 00:24:50,559
so Wow so to recap we've got this

00:24:48,340 --> 00:24:52,600
closure repple that has aj line -

00:24:50,559 --> 00:24:55,210
dependency which has some concurrency

00:24:52,600 --> 00:24:57,789
stuff going on that I added in Ubuntu is

00:24:55,210 --> 00:24:59,889
missing a Linux kernel commit and the

00:24:57,789 --> 00:25:01,629
combination of those things results in a

00:24:59,889 --> 00:25:03,909
bug that crashes my rep ball upon

00:25:01,629 --> 00:25:06,159
closing a parenthesis for users with

00:25:03,909 --> 00:25:08,799
these two very specific patch level bun

00:25:06,159 --> 00:25:10,149
- kernel versions oh and by the way the

00:25:08,799 --> 00:25:13,539
kernel commit thing was found by

00:25:10,149 --> 00:25:15,909
minecraft forum server creator awesome

00:25:13,539 --> 00:25:18,820
awesome person I loved alibi its person

00:25:15,909 --> 00:25:23,649
so many coffees or whatever they prefer

00:25:18,820 --> 00:25:25,240
okay so as I'm peeling my face off my

00:25:23,649 --> 00:25:26,409
hand and my desk and everything what

00:25:25,240 --> 00:25:28,679
what did we learn here

00:25:26,409 --> 00:25:32,289
well first you know clearly you know

00:25:28,679 --> 00:25:34,240
select isn't broken isn't literally true

00:25:32,289 --> 00:25:36,460
and and the product product folks didn't

00:25:34,240 --> 00:25:38,499
mean it to be literally true in their

00:25:36,460 --> 00:25:40,269
case either sometimes a big really is at

00:25:38,499 --> 00:25:41,950
a lower level dependency and the more we

00:25:40,269 --> 00:25:44,049
depend on as a community the more likely

00:25:41,950 --> 00:25:45,909
that is to be true gonna be more we're

00:25:44,049 --> 00:25:48,039
writing glue code the more it's likely a

00:25:45,909 --> 00:25:49,659
bug it's going to be in a dependency I'm

00:25:48,039 --> 00:25:51,490
just like horses not zebras isn't

00:25:49,659 --> 00:25:53,740
literally true right this is a common

00:25:51,490 --> 00:25:55,809
thing for medical folks and you have to

00:25:53,740 --> 00:25:58,119
keep those hypotheses those unlikely

00:25:55,809 --> 00:26:00,580
hypotheses around until you've ruled

00:25:58,119 --> 00:26:02,559
them out so we need to stay open to the

00:26:00,580 --> 00:26:05,049
possibility of these wacky causes being

00:26:02,559 --> 00:26:06,820
true I'm still very very happy to assume

00:26:05,049 --> 00:26:08,320
statistically bugs are in my code and

00:26:06,820 --> 00:26:12,789
have those be the first hypotheses that

00:26:08,320 --> 00:26:14,980
I test because almost all of them are so

00:26:12,789 --> 00:26:16,779
constructing search queries is critical

00:26:14,980 --> 00:26:18,909
for for us as developers particularly

00:26:16,779 --> 00:26:20,919
when debugging I think you know getting

00:26:18,909 --> 00:26:22,690
lots of repetitions scanning results for

00:26:20,919 --> 00:26:24,759
things that look relevant reading

00:26:22,690 --> 00:26:26,730
quickly thinking about a little bit

00:26:24,759 --> 00:26:29,740
about how search engines work how they

00:26:26,730 --> 00:26:31,990
how they prune all of the information in

00:26:29,740 --> 00:26:34,210
the world down to a small amount of

00:26:31,990 --> 00:26:35,619
information is by combining words that

00:26:34,210 --> 00:26:37,530
aren't commonly used together

00:26:35,619 --> 00:26:40,330
ideally phrases

00:26:37,530 --> 00:26:42,220
and I think for me this this was a big

00:26:40,330 --> 00:26:43,960
wake-up call to remember not to be too

00:26:42,220 --> 00:26:46,450
proud to ask for help right I like to

00:26:43,960 --> 00:26:49,180
think of myself as very capable debugger

00:26:46,450 --> 00:26:50,530
and I like to dig into bugs and fix them

00:26:49,180 --> 00:26:52,150
and have all the glory of fixing them

00:26:50,530 --> 00:26:53,260
but you might notice in this case and

00:26:52,150 --> 00:26:55,000
you might feel a little cheated by this

00:26:53,260 --> 00:26:55,960
and I'm sorry if that's the case but you

00:26:55,000 --> 00:26:58,750
might have noticed in this case that I

00:26:55,960 --> 00:27:00,790
did almost zero actual debugging right I

00:26:58,750 --> 00:27:03,750
wasn't in the code get bisecting and

00:27:00,790 --> 00:27:06,430
I've done lots of that stuff before and

00:27:03,750 --> 00:27:08,890
again sorry sorry if you feel cheated

00:27:06,430 --> 00:27:10,300
but it's not about me right like fixing

00:27:08,890 --> 00:27:12,700
a bug is not about me and it's not about

00:27:10,300 --> 00:27:15,100
you it's about the users right the users

00:27:12,700 --> 00:27:17,080
do not care who solves the problem they

00:27:15,100 --> 00:27:18,400
just care that it gets solved so if we

00:27:17,080 --> 00:27:20,410
can ask for help get someone else to

00:27:18,400 --> 00:27:23,020
help us if we can search and find an

00:27:20,410 --> 00:27:28,870
answer on the internet that fixing it

00:27:23,020 --> 00:27:30,550
that way is just as valuable for me

00:27:28,870 --> 00:27:32,890
another really powerful lesson here is

00:27:30,550 --> 00:27:34,720
that shared ecosystems really give us

00:27:32,890 --> 00:27:36,970
leverage beyond our own personal

00:27:34,720 --> 00:27:40,270
abilities right the person who tracked

00:27:36,970 --> 00:27:43,210
this down to the kernel on this this

00:27:40,270 --> 00:27:45,190
person was using J line 2 as well and

00:27:43,210 --> 00:27:47,800
the person who connected the dots SPT

00:27:45,190 --> 00:27:50,500
person from the minecraft forum back to

00:27:47,800 --> 00:27:53,560
line again worked on SBT which also used

00:27:50,500 --> 00:27:54,940
J line I try to imagine how long it

00:27:53,560 --> 00:27:58,900
would have taken to track this issue

00:27:54,940 --> 00:28:00,730
down if I had rolled our own library for

00:27:58,900 --> 00:28:03,220
console access instead of relying on

00:28:00,730 --> 00:28:04,900
this j line shared library we might

00:28:03,220 --> 00:28:06,940
never have found it I can tell you

00:28:04,900 --> 00:28:09,340
flat-out I would never have found it for

00:28:06,940 --> 00:28:10,960
sure we would have had I would have had

00:28:09,340 --> 00:28:13,750
to build anyway for users to disable

00:28:10,960 --> 00:28:15,250
display matching print feature it would

00:28:13,750 --> 00:28:16,810
have been a speculative fix right I

00:28:15,250 --> 00:28:18,040
would have had to have folks to test it

00:28:16,810 --> 00:28:20,320
out make sure it worked just like it did

00:28:18,040 --> 00:28:21,520
in the other case meanwhile though I've

00:28:20,320 --> 00:28:22,930
got this an additional piece of

00:28:21,520 --> 00:28:25,270
configuration that I need to maintain

00:28:22,930 --> 00:28:26,620
forever and bleep matching parens at

00:28:25,270 --> 00:28:29,830
some point assuming the Linux kernel

00:28:26,620 --> 00:28:31,090
issue got fixed on bling matching

00:28:29,830 --> 00:28:33,160
friends would have started working for

00:28:31,090 --> 00:28:34,390
new users in that operating system right

00:28:33,160 --> 00:28:36,220
and meanwhile the people who had turned

00:28:34,390 --> 00:28:37,630
it off would be missing this what I

00:28:36,220 --> 00:28:40,960
think is a valuable feature it's a nice

00:28:37,630 --> 00:28:42,460
user friendly thing because they

00:28:40,960 --> 00:28:43,690
wouldn't they wouldn't know it was fixed

00:28:42,460 --> 00:28:45,670
right we wouldn't be connected from that

00:28:43,690 --> 00:28:47,230
to that community so in this case

00:28:45,670 --> 00:28:49,390
despite the abundant Karl you know

00:28:47,230 --> 00:28:50,169
having a bug I'm super glad I could rely

00:28:49,390 --> 00:28:52,450
on this large

00:28:50,169 --> 00:28:54,759
unity of folks all using the same

00:28:52,450 --> 00:28:56,320
tooling to bang out these issues and not

00:28:54,759 --> 00:28:59,159
have to fly so land that so really like

00:28:56,320 --> 00:29:01,960
like I said do any of the heavy lifting

00:28:59,159 --> 00:29:03,940
so the whole ballgame when debugging is

00:29:01,960 --> 00:29:05,619
to prove what's causing the bug right

00:29:03,940 --> 00:29:08,289
prove what's causing the bug and then

00:29:05,619 --> 00:29:10,899
it's almost always easy to fix it

00:29:08,289 --> 00:29:13,419
comparatively not always I shouldn't say

00:29:10,899 --> 00:29:15,159
almost always often in fact that I

00:29:13,419 --> 00:29:17,169
didn't jump right into changing code

00:29:15,159 --> 00:29:19,869
save me some time and angst in the way I

00:29:17,169 --> 00:29:21,159
described a moment ago so in my case I

00:29:19,869 --> 00:29:22,359
wasn't able to reproduce the issue at

00:29:21,159 --> 00:29:24,909
first or have exactly the right

00:29:22,359 --> 00:29:26,649
hypotheses because changing the kernel

00:29:24,909 --> 00:29:28,509
version literally did not occur to me

00:29:26,649 --> 00:29:30,489
right so I I made an assumption that

00:29:28,509 --> 00:29:32,559
that I didn't even realize I was making

00:29:30,489 --> 00:29:34,779
I assumed I'm matching Ubuntu version

00:29:32,559 --> 00:29:36,190
meant that we had all the same operating

00:29:34,779 --> 00:29:38,739
system stuff going on under the hood

00:29:36,190 --> 00:29:40,299
which doesn't just wasn't true but I can

00:29:38,739 --> 00:29:42,159
promise you next time I'm gonna have a

00:29:40,299 --> 00:29:44,230
wider range of hypotheses to choose from

00:29:42,159 --> 00:29:46,090
and I'm going to assume a bit less and I

00:29:44,230 --> 00:29:48,159
think one of the experiences we see more

00:29:46,090 --> 00:29:49,840
and more weird stuff happen as we share

00:29:48,159 --> 00:29:51,999
stories about these things maybe we can

00:29:49,840 --> 00:29:55,960
all assume less and have more hypotheses

00:29:51,999 --> 00:29:58,809
to choose from so we can solve problems

00:29:55,960 --> 00:30:00,700
together as teams and as communities if

00:29:58,809 --> 00:30:02,619
we don't panic remember you don't have

00:30:00,700 --> 00:30:04,720
to fly solo we don't have to know

00:30:02,619 --> 00:30:06,009
everything we don't have to panic when

00:30:04,720 --> 00:30:09,220
we're hit with a strange sounding bug

00:30:06,009 --> 00:30:10,629
like this so these slides will be

00:30:09,220 --> 00:30:12,899
available on speaker deck in about an

00:30:10,629 --> 00:30:15,220
hour also pin them to my Twitter profile

00:30:12,899 --> 00:30:16,989
highly recommend all three of these

00:30:15,220 --> 00:30:21,909
resources there are lots of other great

00:30:16,989 --> 00:30:23,529
ones out there and get some some further

00:30:21,909 --> 00:30:27,549
reading about the bug if you want to dig

00:30:23,529 --> 00:30:30,580
into the details here but thank you very

00:30:27,549 --> 00:30:31,749
much I again I'm Colin Jones CTO at

00:30:30,580 --> 00:30:33,549
eighth light we're a high quality

00:30:31,749 --> 00:30:35,440
software consulting company we build

00:30:33,549 --> 00:30:36,639
software together with with client teams

00:30:35,440 --> 00:30:37,210
across all kind of languages and

00:30:36,639 --> 00:30:38,590
platforms

00:30:37,210 --> 00:30:39,669
I'd love to talk to you later if you're

00:30:38,590 --> 00:30:41,080
interested in learning more about us

00:30:39,669 --> 00:30:43,649
thanks for your time and have a great

00:30:41,080 --> 00:30:43,649
rest of your conference

00:30:47,880 --> 00:30:51,829

YouTube URL: https://www.youtube.com/watch?v=Nc8SEb-HVFs


