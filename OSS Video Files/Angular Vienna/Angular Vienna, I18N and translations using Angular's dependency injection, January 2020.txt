Title: Angular Vienna, I18N and translations using Angular's dependency injection, January 2020
Publication date: 2020-01-11
Playlist: Angular Vienna
Description: 
	Talk by Vojtech Mašek:
I18N and translations using Angular's dependency injection and lazy-loading

If you've ever had a problem with the maintenance of i18n and translations, there is a simple solution. TypeScript, dependency injection and lazy loading as an elegant way to have your project translated and under control.

There is a solution for easy and maintainable i18n for Angular projects.

TypeScript knows all we need and dependency injection will provide the way, with just a little bit of router’s elegant lazy-loading.
Translations have a type definition inferred from a default translation, data is injected via dependency injection provider.

Each site mutation is lazy loaded as a module that consists of an imported wrapped site module (shared for all mutations) and its own i18n stuff.
Captions: 
	00:00:00,149 --> 00:00:05,700
mentioning typescript I will like it

00:00:02,460 --> 00:00:09,480
that's why I picked this type

00:00:05,700 --> 00:00:15,230
translations I actually shortened the

00:00:09,480 --> 00:00:18,779
title original title is item

00:00:15,230 --> 00:00:21,090
internationalization using using angular

00:00:18,779 --> 00:00:23,640
typescript analyzer loading because it's

00:00:21,090 --> 00:00:25,980
basically it's basically what I'm

00:00:23,640 --> 00:00:27,480
talking about now I will be I will be

00:00:25,980 --> 00:00:29,939
showing you the setup of the

00:00:27,480 --> 00:00:34,620
translations without any library without

00:00:29,939 --> 00:00:37,110
the like angular angular I 18 and itself

00:00:34,620 --> 00:00:39,570
because it's a bit tricky and like

00:00:37,110 --> 00:00:42,629
nobody really uses that it should change

00:00:39,570 --> 00:00:45,510
in in next angular but it isn't really

00:00:42,629 --> 00:00:50,010
available yet so we'll we'll see and

00:00:45,510 --> 00:00:51,719
I'll talk about my my setup what are the

00:00:50,010 --> 00:00:53,219
common solutions currently like in

00:00:51,719 --> 00:00:56,820
angular Forbes or inflation's do you

00:00:53,219 --> 00:01:00,870
know any do you use any do you do

00:00:56,820 --> 00:01:03,260
translations yeah and jigs translate so

00:01:00,870 --> 00:01:08,810
you like ng x translate probably yeah

00:01:03,260 --> 00:01:08,810
everybody likes and jigs translate again

00:01:11,950 --> 00:01:16,290
[Music]

00:01:13,310 --> 00:01:19,049
but like what's what's really to

00:01:16,290 --> 00:01:20,759
deprecated there it's like the ng

00:01:19,049 --> 00:01:22,860
external side itself it's like pretty

00:01:20,759 --> 00:01:25,979
it's pretty simple it's pretty simple

00:01:22,860 --> 00:01:28,829
library if you use that it's good

00:01:25,979 --> 00:01:30,810
why not there is also there is also

00:01:28,829 --> 00:01:33,030
something something that should that

00:01:30,810 --> 00:01:35,790
should be maintained that it's that it

00:01:33,030 --> 00:01:39,420
is maintained and it will replace it so

00:01:35,790 --> 00:01:43,170
ng x translate one thing the other thing

00:01:39,420 --> 00:01:45,869
is angular itself it has something baked

00:01:43,170 --> 00:01:47,670
in so what's the difference

00:01:45,869 --> 00:01:50,280
one is third-party solution that's

00:01:47,670 --> 00:01:52,229
widely used that can be lazy low that it

00:01:50,280 --> 00:01:57,600
is actually advise that you lazy load

00:01:52,229 --> 00:02:00,750
these translations using JSON and it

00:01:57,600 --> 00:02:03,360
uses a pipe and translation keys that

00:02:00,750 --> 00:02:06,899
these keys are basically string and the

00:02:03,360 --> 00:02:08,520
pipe is impure so that's the that's the

00:02:06,899 --> 00:02:12,720
thing that he will you will actually use

00:02:08,520 --> 00:02:13,860
and it can be improved by time pigs but

00:02:12,720 --> 00:02:16,530
usually people do

00:02:13,860 --> 00:02:20,130
do that so you you end up with a lot of

00:02:16,530 --> 00:02:22,380
a lot of errors sort of maintainable

00:02:20,130 --> 00:02:24,840
code because they're like keys are just

00:02:22,380 --> 00:02:26,700
strings and you don't really know where

00:02:24,840 --> 00:02:29,220
they point and you find out where it

00:02:26,700 --> 00:02:32,790
doesn't work in production so it's not a

00:02:29,220 --> 00:02:35,910
really good angular it has integrated

00:02:32,790 --> 00:02:37,800
solution that is not really used people

00:02:35,910 --> 00:02:42,690
don't like it because it's a bit clumsy

00:02:37,800 --> 00:02:46,040
it should change but we'll see and the

00:02:42,690 --> 00:02:49,020
thing that is currently done it's that a

00:02:46,040 --> 00:02:51,240
application is built for each for each

00:02:49,020 --> 00:02:53,250
locale for each translation you have to

00:02:51,240 --> 00:02:55,770
build application multiple times so

00:02:53,250 --> 00:02:56,660
that's not really not really good right

00:02:55,770 --> 00:02:59,340
now

00:02:56,660 --> 00:03:02,870
and it also uses template attributes

00:02:59,340 --> 00:03:05,989
that in translation IDs so it's a bit

00:03:02,870 --> 00:03:08,970
unclear how the translation are

00:03:05,989 --> 00:03:11,790
connected together managed it can be it

00:03:08,970 --> 00:03:14,520
can be a bit frustrating when something

00:03:11,790 --> 00:03:18,150
breaks so what's the other solution

00:03:14,520 --> 00:03:21,959
there is a trans loco something really a

00:03:18,150 --> 00:03:24,600
recent they really really improved to

00:03:21,959 --> 00:03:26,370
the end cheeks translate and it's

00:03:24,600 --> 00:03:29,280
basically it's basically a nice library

00:03:26,370 --> 00:03:31,709
that that you might also have a look on

00:03:29,280 --> 00:03:34,260
but I'm not talking about these three I

00:03:31,709 --> 00:03:37,110
will become talking about something

00:03:34,260 --> 00:03:40,110
completely different it will be it will

00:03:37,110 --> 00:03:42,630
be using just the angular code to do

00:03:40,110 --> 00:03:45,540
your translations so how will I do it

00:03:42,630 --> 00:03:48,239
what can be improved on how how you

00:03:45,540 --> 00:03:52,410
currently handle translations in you

00:03:48,239 --> 00:03:54,750
know in your projects you need a way to

00:03:52,410 --> 00:03:59,519
check that all translations are correct

00:03:54,750 --> 00:04:03,170
what does it mean that every file for

00:03:59,519 --> 00:04:06,450
example implements some some schema some

00:04:03,170 --> 00:04:09,480
some interface that you know that the

00:04:06,450 --> 00:04:12,450
Chinese or Czech translation is the same

00:04:09,480 --> 00:04:15,959
translation or as English or I don't

00:04:12,450 --> 00:04:18,840
know German because when it's not then

00:04:15,959 --> 00:04:20,370
it's probably not working 100% in

00:04:18,840 --> 00:04:21,930
production mean there is there is an

00:04:20,370 --> 00:04:24,260
error there is a missing key or the

00:04:21,930 --> 00:04:27,740
resides know something that

00:04:24,260 --> 00:04:30,380
that will we will probably find out when

00:04:27,740 --> 00:04:32,960
it breaks what's the other thing we need

00:04:30,380 --> 00:04:35,540
also a way to check that all the keys

00:04:32,960 --> 00:04:38,480
that we use in in our templates are

00:04:35,540 --> 00:04:41,600
actually valid that we don't do a typo

00:04:38,480 --> 00:04:44,360
because typos are pretty common in

00:04:41,600 --> 00:04:46,040
strings even more work because it's not

00:04:44,360 --> 00:04:49,310
check it will not tell you that

00:04:46,040 --> 00:04:51,320
something like it doesn't exist and you

00:04:49,310 --> 00:04:54,110
have to you have to know that so it

00:04:51,320 --> 00:04:55,610
actually doesn't complement to your Zen

00:04:54,110 --> 00:04:57,440
because you have to remember all the

00:04:55,610 --> 00:04:59,330
translations and how can you remember

00:04:57,440 --> 00:05:05,710
the translations when you remember the

00:04:59,330 --> 00:05:08,690
shortcuts so you cannot do that both so

00:05:05,710 --> 00:05:11,320
typescript already knows a lot of stuff

00:05:08,690 --> 00:05:14,210
and we can we can use typescript and

00:05:11,320 --> 00:05:18,020
dependency injection to provide the way

00:05:14,210 --> 00:05:20,510
how to import the translations and less

00:05:18,020 --> 00:05:24,290
lazy load them and I will surely show

00:05:20,510 --> 00:05:26,890
you how so we will create a translation

00:05:24,290 --> 00:05:31,660
file can you actually read it

00:05:26,890 --> 00:05:35,330
probably not sorry I don't have the the

00:05:31,660 --> 00:05:38,720
lighter a lighter picture but I will try

00:05:35,330 --> 00:05:41,390
to explain what's there because it's

00:05:38,720 --> 00:05:44,870
probably it's it's important but not so

00:05:41,390 --> 00:05:47,540
much so so I will explain its export

00:05:44,870 --> 00:05:51,380
cost there is some constant it's just an

00:05:47,540 --> 00:05:54,170
object object that has a keys this this

00:05:51,380 --> 00:05:57,290
is key language English there is a

00:05:54,170 --> 00:05:59,330
another key home there's an object title

00:05:57,290 --> 00:06:01,790
and description and title and

00:05:59,330 --> 00:06:02,360
description so that's it nothing nothing

00:06:01,790 --> 00:06:06,710
too serious

00:06:02,360 --> 00:06:09,020
there is also a long supported property

00:06:06,710 --> 00:06:11,480
and that property is actually a function

00:06:09,020 --> 00:06:14,380
you can not really see that but it is a

00:06:11,480 --> 00:06:20,650
function that takes one parameter it's n

00:06:14,380 --> 00:06:23,570
number and it has a template a literal

00:06:20,650 --> 00:06:26,450
that will tell you this is these demo

00:06:23,570 --> 00:06:29,090
supports and languages and it will

00:06:26,450 --> 00:06:33,080
actually differentiate differentiate if

00:06:29,090 --> 00:06:35,490
n is singular or plural and put an S

00:06:33,080 --> 00:06:37,770
there so

00:06:35,490 --> 00:06:42,000
this is a simple way to do the plural

00:06:37,770 --> 00:06:44,370
plural and it will actually you can

00:06:42,000 --> 00:06:46,830
actually do it like this with a simple

00:06:44,370 --> 00:06:49,770
function or if it's more complicated

00:06:46,830 --> 00:06:52,650
like you are in a in in languages where

00:06:49,770 --> 00:06:54,240
like not in English but for example in

00:06:52,650 --> 00:06:56,550
Czech language or in German language

00:06:54,240 --> 00:06:58,699
it's a bit more complicated sometimes

00:06:56,550 --> 00:07:01,199
you need something more intelligent and

00:06:58,699 --> 00:07:03,690
what's the simplest way you can you can

00:07:01,199 --> 00:07:06,360
do you can actually you can actually use

00:07:03,690 --> 00:07:08,910
a libraries that support plurals and

00:07:06,360 --> 00:07:11,610
that supports the these things and just

00:07:08,910 --> 00:07:13,650
use a call like you would just go a call

00:07:11,610 --> 00:07:15,750
that library in this function so that's

00:07:13,650 --> 00:07:18,270
it and it will it will determine the the

00:07:15,750 --> 00:07:20,070
plural itself you don't need to you

00:07:18,270 --> 00:07:22,050
don't need to do it manually like like

00:07:20,070 --> 00:07:25,710
this but it this is a simple simple demo

00:07:22,050 --> 00:07:29,610
so we can do it for like one thing for

00:07:25,710 --> 00:07:32,070
1s so just just to have a have an inside

00:07:29,610 --> 00:07:37,729
and the other thing that you can see if

00:07:32,070 --> 00:07:37,729
these disappears yeah sorry

00:07:40,070 --> 00:07:47,310
so there is an export type translation

00:07:45,080 --> 00:07:50,669
and sorry

00:07:47,310 --> 00:07:53,550
yeah equals type of English translation

00:07:50,669 --> 00:07:55,349
English English translation is the name

00:07:53,550 --> 00:07:57,120
of the object that holds the English

00:07:55,349 --> 00:08:00,659
English translation and we will

00:07:57,120 --> 00:08:03,659
basically infer a type of that object to

00:08:00,659 --> 00:08:05,580
that type so we will have a type of this

00:08:03,659 --> 00:08:07,919
translation and we will tell that this

00:08:05,580 --> 00:08:10,530
is a default this is what every other

00:08:07,919 --> 00:08:13,199
translation needs to implement why

00:08:10,530 --> 00:08:15,449
because we are developing in English so

00:08:13,199 --> 00:08:18,060
we know that English will work and when

00:08:15,449 --> 00:08:20,150
English were English works then every

00:08:18,060 --> 00:08:23,720
other translation will also work because

00:08:20,150 --> 00:08:26,840
it implements this type so we are safe

00:08:23,720 --> 00:08:29,520
what's next there is a component

00:08:26,840 --> 00:08:33,479
probably more readable but I will still

00:08:29,520 --> 00:08:34,860
say it template pretty easy what do all

00:08:33,479 --> 00:08:37,409
you'll do you will just have an

00:08:34,860 --> 00:08:39,719
interpolation and access some object and

00:08:37,409 --> 00:08:41,490
that some object it can be actually see

00:08:39,719 --> 00:08:44,130
there in in constructor

00:08:41,490 --> 00:08:48,960
you will just inject a translation you

00:08:44,130 --> 00:08:51,360
will call it blank for example whatever

00:08:48,960 --> 00:08:53,550
you will have a typing for it this this

00:08:51,360 --> 00:08:56,550
typing is actually our default so we

00:08:53,550 --> 00:09:00,510
know that every translation has to be of

00:08:56,550 --> 00:09:03,870
type of this or something more so it

00:09:00,510 --> 00:09:06,180
will work and we can either use it

00:09:03,870 --> 00:09:09,180
directly in a component because it's a

00:09:06,180 --> 00:09:12,330
pure object so we can use it as an

00:09:09,180 --> 00:09:14,520
object in template or we can console.log

00:09:12,330 --> 00:09:16,800
ache anything it's it's there it's

00:09:14,520 --> 00:09:19,950
provided by dependency injection it's

00:09:16,800 --> 00:09:22,650
not a synchronous it's provided and lazy

00:09:19,950 --> 00:09:24,750
loaded to the component component can

00:09:22,650 --> 00:09:27,270
right away use it so it's that simple in

00:09:24,750 --> 00:09:30,720
a component what's what's more to like

00:09:27,270 --> 00:09:34,170
there is auto completion in IDs in

00:09:30,720 --> 00:09:37,020
webstorm in vs code it looks like this

00:09:34,170 --> 00:09:39,720
you can probably again see it not pretty

00:09:37,020 --> 00:09:45,330
clearly but if you if you have a

00:09:39,720 --> 00:09:46,950
language object then you can see that

00:09:45,330 --> 00:09:48,450
there is a property language there is a

00:09:46,950 --> 00:09:50,610
property home there is a property in

00:09:48,450 --> 00:09:53,580
photo is a property link supported

00:09:50,610 --> 00:09:56,460
language is a string home is a object

00:09:53,580 --> 00:09:58,920
title string info is a object title

00:09:56,460 --> 00:10:02,220
string length supported is a function

00:09:58,920 --> 00:10:04,350
that takes n is a number and returns a

00:10:02,220 --> 00:10:06,300
string pretty easy pretty readable you

00:10:04,350 --> 00:10:08,330
know what's happening you know what to

00:10:06,300 --> 00:10:12,570
use in a template or any anywhere else

00:10:08,330 --> 00:10:14,100
same for vs code vs code also fully

00:10:12,570 --> 00:10:17,460
supports this it's simple out to

00:10:14,100 --> 00:10:17,820
completion upon upon objects so that's

00:10:17,460 --> 00:10:21,110
it

00:10:17,820 --> 00:10:24,060
what's other a ID support you can hover

00:10:21,110 --> 00:10:26,850
for in this is only in the app store my

00:10:24,060 --> 00:10:29,790
think but you can hover on the on the

00:10:26,850 --> 00:10:31,410
properties in template again it's not

00:10:29,790 --> 00:10:34,830
that readable but I will share the

00:10:31,410 --> 00:10:37,950
slights so you can have a look and when

00:10:34,830 --> 00:10:40,650
you have hover on rank dot language you

00:10:37,950 --> 00:10:42,810
will see the whole type of of that

00:10:40,650 --> 00:10:45,630
languages so you will see what's the

00:10:42,810 --> 00:10:47,580
type of that of this property that you

00:10:45,630 --> 00:10:53,100
have in template and you know what to

00:10:47,580 --> 00:10:56,640
use similar thing is in where you make a

00:10:53,100 --> 00:10:59,490
mistake let's say you use a wrong key

00:10:56,640 --> 00:11:01,020
there's wrong key and it will actually

00:10:59,490 --> 00:11:07,050
tell you that

00:11:01,020 --> 00:11:09,270
the the key doesn't support and that the

00:11:07,050 --> 00:11:10,920
interface look like this so you have to

00:11:09,270 --> 00:11:13,890
choose from something that is actually

00:11:10,920 --> 00:11:18,330
in that in that object best thing about

00:11:13,890 --> 00:11:20,370
this is that this is done also or mainly

00:11:18,330 --> 00:11:23,100
in built time what does it mean build

00:11:20,370 --> 00:11:24,930
time it means that you will never see

00:11:23,100 --> 00:11:27,150
something like this section the title

00:11:24,930 --> 00:11:29,460
have you already seen that in the

00:11:27,150 --> 00:11:31,860
project you are missing key yeah I think

00:11:29,460 --> 00:11:34,250
everybody have seen it this is one of

00:11:31,860 --> 00:11:37,080
the most common problems in production

00:11:34,250 --> 00:11:39,750
with translated products that somebody

00:11:37,080 --> 00:11:42,450
refactor something or let's say nobody

00:11:39,750 --> 00:11:45,450
uses this text in a footer let's delete

00:11:42,450 --> 00:11:49,550
it but it probably used the issue

00:11:45,450 --> 00:11:52,710
somewhere and for example people tend to

00:11:49,550 --> 00:11:55,530
not refactor the translations so it

00:11:52,710 --> 00:11:57,980
seems that it is not in a footer but

00:11:55,530 --> 00:12:01,620
somebody is using that I don't know in

00:11:57,980 --> 00:12:04,410
profile page for example so the test

00:12:01,620 --> 00:12:06,840
text disappears and your section is

00:12:04,410 --> 00:12:08,330
without a title so that's that's

00:12:06,840 --> 00:12:11,120
unfortunate

00:12:08,330 --> 00:12:17,400
this is my favorite this is my favorite

00:12:11,120 --> 00:12:19,590
picture from monkey user it tells you

00:12:17,400 --> 00:12:21,540
basically what are the consequences this

00:12:19,590 --> 00:12:23,130
is the compiler and it will tell you

00:12:21,540 --> 00:12:25,680
that you are too drunk to drive so you

00:12:23,130 --> 00:12:27,240
cannot drive but if it's a runtime error

00:12:25,680 --> 00:12:31,320
you just you just die in the lake

00:12:27,240 --> 00:12:33,900
because like why not so my favorite

00:12:31,320 --> 00:12:35,670
picture yeah typescript is great it will

00:12:33,900 --> 00:12:38,310
tell you in the runtime the story in

00:12:35,670 --> 00:12:40,860
built time that your product is not

00:12:38,310 --> 00:12:43,020
ready to be shipped these are some

00:12:40,860 --> 00:12:45,810
examples of our error again you cannot

00:12:43,020 --> 00:12:48,450
see the ER but you can imagine that they

00:12:45,810 --> 00:12:51,690
are pretty horrible no no they are not

00:12:48,450 --> 00:12:53,850
they are actually telling you that for

00:12:51,690 --> 00:12:56,850
example the first one is telling you

00:12:53,850 --> 00:12:59,520
there is the CSO translation dot TS

00:12:56,850 --> 00:13:02,190
there is a line line number and the

00:12:59,520 --> 00:13:04,710
column and it will it will tell you that

00:13:02,190 --> 00:13:08,280
title string is not assignable to title

00:13:04,710 --> 00:13:11,460
string subtitle string so property

00:13:08,280 --> 00:13:13,290
subtitle is missing in type data type so

00:13:11,460 --> 00:13:14,760
it will basically tell you hey you

00:13:13,290 --> 00:13:17,010
forgot to implement

00:13:14,760 --> 00:13:19,170
this translation in your Czech version

00:13:17,010 --> 00:13:19,940
of a site that's pretty that's pretty

00:13:19,170 --> 00:13:24,630
neat

00:13:19,940 --> 00:13:26,790
also for something else where you were

00:13:24,630 --> 00:13:28,890
you actually use the wrong key somewhere

00:13:26,790 --> 00:13:33,060
in template it will tell you that in

00:13:28,890 --> 00:13:36,030
sight component it light at line 44 the

00:13:33,060 --> 00:13:38,160
property wrong key doesn't exist on type

00:13:36,030 --> 00:13:40,620
and hole type that you are actually

00:13:38,160 --> 00:13:42,510
accessing so it will tell you you are

00:13:40,620 --> 00:13:45,360
accessing something that is not there

00:13:42,510 --> 00:13:47,520
you probably mess up and you wanna chip

00:13:45,360 --> 00:13:50,490
the production because your build will

00:13:47,520 --> 00:13:54,060
fail and this happens regularly during

00:13:50,490 --> 00:13:55,920
the during the refractors so without the

00:13:54,060 --> 00:13:57,750
process here because there is obviously

00:13:55,920 --> 00:14:00,570
a lot of them

00:13:57,750 --> 00:14:03,360
no music missing and untranslated keys

00:14:00,570 --> 00:14:05,850
as part of the application there is a

00:14:03,360 --> 00:14:07,140
quick way to validate that multiple

00:14:05,850 --> 00:14:10,620
translation files are actually

00:14:07,140 --> 00:14:11,940
compatible and working together because

00:14:10,620 --> 00:14:14,460
if you want to create another

00:14:11,940 --> 00:14:17,010
translation you just copy the default

00:14:14,460 --> 00:14:19,800
one and translate everything if you want

00:14:17,010 --> 00:14:21,990
to merge it it's just an typescript or

00:14:19,800 --> 00:14:24,320
JavaScript object object it is pretty

00:14:21,990 --> 00:14:27,900
easy to merge these objects because like

00:14:24,320 --> 00:14:31,020
they are mirja below that's it

00:14:27,900 --> 00:14:33,390
it is typed safe so whole translation is

00:14:31,020 --> 00:14:36,090
type safe we've seen that the compiler

00:14:33,390 --> 00:14:37,860
compiler will always yell at you that

00:14:36,090 --> 00:14:39,750
you are doing something wrong something

00:14:37,860 --> 00:14:42,540
that is not in order so we will know

00:14:39,750 --> 00:14:45,360
that whole thing is lazy hold it I will

00:14:42,540 --> 00:14:47,820
I will show you how because as a part of

00:14:45,360 --> 00:14:49,890
the setup it can be pretty easily loaded

00:14:47,820 --> 00:14:52,890
if you don't want it always loaded you

00:14:49,890 --> 00:14:55,050
can like not have it let's load it and

00:14:52,890 --> 00:15:00,300
just use it just used to do it without

00:14:55,050 --> 00:15:02,790
it even even with with a unpure pipe

00:15:00,300 --> 00:15:04,950
like a synchronous subscribe you can put

00:15:02,790 --> 00:15:07,080
these translations into a inter state

00:15:04,950 --> 00:15:09,770
management for example we do that in at

00:15:07,080 --> 00:15:13,200
some project so we can talk about later

00:15:09,770 --> 00:15:15,720
it is instant yeah that's pretty that's

00:15:13,200 --> 00:15:18,120
pretty cool and that you are basically

00:15:15,720 --> 00:15:19,380
having translation at a time that you

00:15:18,120 --> 00:15:22,410
are building your application

00:15:19,380 --> 00:15:23,190
application and it is baked into your

00:15:22,410 --> 00:15:26,220
application

00:15:23,190 --> 00:15:28,230
each each each version it is instant and

00:15:26,220 --> 00:15:31,470
when you switch when is 3

00:15:28,230 --> 00:15:33,480
the language version only the new

00:15:31,470 --> 00:15:37,320
language language version is it's

00:15:33,480 --> 00:15:40,140
actually lazy loaded and the application

00:15:37,320 --> 00:15:42,150
will render instantly so that's nice

00:15:40,140 --> 00:15:45,480
nothing needs to be dynamically loaded

00:15:42,150 --> 00:15:47,550
but still it can be pretty easily there

00:15:45,480 --> 00:15:49,590
is no need for in in template in pure

00:15:47,550 --> 00:15:52,080
pipe if you want them you can use them

00:15:49,590 --> 00:15:54,030
if you have it in in state management

00:15:52,080 --> 00:15:57,240
for example but there is no need for

00:15:54,030 --> 00:16:01,860
them because you can access the plane

00:15:57,240 --> 00:16:03,420
object and the translation itself it can

00:16:01,860 --> 00:16:05,160
be inherited from the default

00:16:03,420 --> 00:16:07,950
translation so you don't have to type in

00:16:05,160 --> 00:16:10,350
manually you don't have to do the manual

00:16:07,950 --> 00:16:12,780
typing of the whole interface you just

00:16:10,350 --> 00:16:16,920
do the type of something and it will

00:16:12,780 --> 00:16:19,770
just work and also for the for the C CEO

00:16:16,920 --> 00:16:22,320
like for the Corollas and probably also

00:16:19,770 --> 00:16:24,840
for some users you can see that huge

00:16:22,320 --> 00:16:28,190
applications that they they do that now

00:16:24,840 --> 00:16:31,890
the roots are prefixed by the root

00:16:28,190 --> 00:16:35,040
language abbreviation so that's nice you

00:16:31,890 --> 00:16:39,630
can see that the world is actually / and

00:16:35,040 --> 00:16:42,780
/ rest of the rest of the root / de /

00:16:39,630 --> 00:16:45,470
rest of the roots right CS / last rest

00:16:42,780 --> 00:16:48,600
of the root so you can see what language

00:16:45,470 --> 00:16:52,050
version are you currently at you can

00:16:48,600 --> 00:16:54,720
actually include in the in the angular

00:16:52,050 --> 00:16:57,540
index all the language versions of that

00:16:54,720 --> 00:17:00,180
site so then crawler knows that this

00:16:57,540 --> 00:17:03,150
site this blog post this something is

00:17:00,180 --> 00:17:07,950
available in multiple languages and it

00:17:03,150 --> 00:17:09,360
optimizes that that index for it and the

00:17:07,950 --> 00:17:13,110
root can be pretty easily

00:17:09,360 --> 00:17:15,090
localized entirely how you can use the

00:17:13,110 --> 00:17:17,730
constants for root this constants

00:17:15,090 --> 00:17:20,310
because the translation file itself is a

00:17:17,730 --> 00:17:22,050
constant can be taken from the

00:17:20,310 --> 00:17:24,450
translation so you can basically

00:17:22,050 --> 00:17:27,810
translate all your roots if you want

00:17:24,450 --> 00:17:29,850
your roots in German for German site and

00:17:27,810 --> 00:17:34,920
in English for English site you can

00:17:29,850 --> 00:17:36,300
translate the roots it will work and as

00:17:34,920 --> 00:17:38,460
I said when I was showing you

00:17:36,300 --> 00:17:40,770
translations can be string functions

00:17:38,460 --> 00:17:42,030
during literals any other custom format

00:17:40,770 --> 00:17:43,830
you can like the

00:17:42,030 --> 00:17:46,290
whatever you want and you will just call

00:17:43,830 --> 00:17:50,070
the proper formatter in the in the

00:17:46,290 --> 00:17:53,070
function it is it is pretty easily to to

00:17:50,070 --> 00:17:55,170
include it so there was a lot of pros

00:17:53,070 --> 00:17:58,350
there has to be some cons yeah there

00:17:55,170 --> 00:18:00,720
there are lazy loading it's a

00:17:58,350 --> 00:18:02,730
requirement for this setup with the

00:18:00,720 --> 00:18:04,860
abbreviations with too lazy holding I

00:18:02,730 --> 00:18:06,720
was showing you if you don't care about

00:18:04,860 --> 00:18:10,200
the lazy loading if you are creating for

00:18:06,720 --> 00:18:12,000
example mobile application a mobile

00:18:10,200 --> 00:18:15,600
application that is wrecked in yannick

00:18:12,000 --> 00:18:17,820
and shipped to to the store with like

00:18:15,600 --> 00:18:20,100
everything it has you guys don't have to

00:18:17,820 --> 00:18:21,930
care about lazy loading so you'd like

00:18:20,100 --> 00:18:25,110
don't need to use it but if you are

00:18:21,930 --> 00:18:27,840
creating an optimized website that has a

00:18:25,110 --> 00:18:30,540
pretty small size print then probably

00:18:27,840 --> 00:18:32,640
it's a good requirement that you need to

00:18:30,540 --> 00:18:33,870
waste all of your application most of us

00:18:32,640 --> 00:18:37,890
already do I think

00:18:33,870 --> 00:18:41,520
orna yeah probably so the other cons a

00:18:37,890 --> 00:18:45,300
con is that if you want to load them

00:18:41,520 --> 00:18:49,500
dynamically form server it's it requires

00:18:45,300 --> 00:18:51,420
few extra steps this also like you would

00:18:49,500 --> 00:18:54,000
you would need to do the same steps in

00:18:51,420 --> 00:18:56,610
in any other in any other setup so it's

00:18:54,000 --> 00:18:59,190
not really a big problem but in this

00:18:56,610 --> 00:19:02,610
case if you still want to keep the build

00:18:59,190 --> 00:19:04,950
time like so let compile or tell you

00:19:02,610 --> 00:19:06,810
that you are wrong then you need to

00:19:04,950 --> 00:19:09,540
provide them with these build time

00:19:06,810 --> 00:19:12,240
translations so what we actually do in

00:19:09,540 --> 00:19:15,780
our applications where we have this in

00:19:12,240 --> 00:19:17,790
production that we regularly update the

00:19:15,780 --> 00:19:19,980
translations that are in the repo and

00:19:17,790 --> 00:19:22,290
commit it with the project so we

00:19:19,980 --> 00:19:24,510
actually like have a script that will

00:19:22,290 --> 00:19:26,730
that we will download the translation

00:19:24,510 --> 00:19:29,370
from the server because it isn't CMS or

00:19:26,730 --> 00:19:31,500
somewhere and put it into into a project

00:19:29,370 --> 00:19:33,570
so every time we release we know that

00:19:31,500 --> 00:19:35,880
there is a fallback of default that

00:19:33,570 --> 00:19:39,120
should work that will always work and

00:19:35,880 --> 00:19:41,340
later on when we actually load the

00:19:39,120 --> 00:19:43,830
application application we are just

00:19:41,340 --> 00:19:46,380
patching this default object with what

00:19:43,830 --> 00:19:48,810
we load it from server because maybe

00:19:46,380 --> 00:19:50,880
some somebody there some editor found

00:19:48,810 --> 00:19:52,440
the typo in the translation so he fixed

00:19:50,880 --> 00:19:55,410
it maybe

00:19:52,440 --> 00:19:58,350
so we basically patch it

00:19:55,410 --> 00:20:00,780
and with this week we have a early

00:19:58,350 --> 00:20:04,380
really nice setup that is built by a

00:20:00,780 --> 00:20:06,750
build safe and also fetches it from from

00:20:04,380 --> 00:20:09,720
server so there is a demo time

00:20:06,750 --> 00:20:12,539
I have demo prepared it was originally

00:20:09,720 --> 00:20:18,090
just just Jeff

00:20:12,539 --> 00:20:21,179
but our gif as I like to say but it

00:20:18,090 --> 00:20:24,870
wouldn't be visible so this is probably

00:20:21,179 --> 00:20:28,380
somehow visible this is just a simple

00:20:24,870 --> 00:20:30,780
the demo with some links it will tell

00:20:28,380 --> 00:20:32,909
you that home works and that this demo

00:20:30,780 --> 00:20:36,210
supports two languages that was our

00:20:32,909 --> 00:20:39,000
translation actually and we can see all

00:20:36,210 --> 00:20:42,120
the other scripts that are fetched for

00:20:39,000 --> 00:20:44,100
the for this demo in the network tab and

00:20:42,120 --> 00:20:46,740
there is something interesting there is

00:20:44,100 --> 00:20:50,130
like this is the state what will happen

00:20:46,740 --> 00:20:52,440
if we just load the application so the

00:20:50,130 --> 00:20:54,750
main is here the whole like the whole

00:20:52,440 --> 00:20:57,510
application that it's needed for for

00:20:54,750 --> 00:20:59,970
this is here the pre loading is turned

00:20:57,510 --> 00:21:03,330
off so anything that is not needed is

00:20:59,970 --> 00:21:07,380
not loaded but there is a site English

00:21:03,330 --> 00:21:09,059
model the J's what does it do it because

00:21:07,380 --> 00:21:11,960
English is default and we are seeing

00:21:09,059 --> 00:21:15,480
this web in in English we can actually

00:21:11,960 --> 00:21:18,600
see that it contains the English

00:21:15,480 --> 00:21:23,390
translation and it also may contain all

00:21:18,600 --> 00:21:25,980
the other all the other files or

00:21:23,390 --> 00:21:29,220
localization things related to a

00:21:25,980 --> 00:21:31,320
translation or whole whole whole

00:21:29,220 --> 00:21:34,620
localization so for example if we if we

00:21:31,320 --> 00:21:38,190
would use moment if we use moment yes

00:21:34,620 --> 00:21:40,620
all right no date functions then the

00:21:38,190 --> 00:21:42,450
local would be actually included in this

00:21:40,620 --> 00:21:44,730
model it would be fetched with this

00:21:42,450 --> 00:21:46,980
model you would have it as default

00:21:44,730 --> 00:21:49,740
because it's an English that's default

00:21:46,980 --> 00:21:52,230
that that was loaded if we change a

00:21:49,740 --> 00:21:54,600
language for check one you can just

00:21:52,230 --> 00:22:00,030
click there we see that it instantly

00:21:54,600 --> 00:22:01,590
changed whole whole demo is now in Czech

00:22:00,030 --> 00:22:05,790
language and we'll see that this

00:22:01,590 --> 00:22:08,250
appeared its site CS model J's what does

00:22:05,790 --> 00:22:13,470
it hold it just holds

00:22:08,250 --> 00:22:17,010
check translation with basically all the

00:22:13,470 --> 00:22:22,110
other check things that are required for

00:22:17,010 --> 00:22:23,880
the for the for the angular but not much

00:22:22,110 --> 00:22:26,130
of them because it's a simple demo but

00:22:23,880 --> 00:22:28,860
it if it would be a complicated one and

00:22:26,130 --> 00:22:30,990
if we would use a moment for dates or

00:22:28,860 --> 00:22:33,090
something there would probably be a lot

00:22:30,990 --> 00:22:36,000
more in that in that model but we see

00:22:33,090 --> 00:22:37,710
that it only like we need the check one

00:22:36,000 --> 00:22:40,650
only when we actually visit the check

00:22:37,710 --> 00:22:43,560
check version so it is lazy loaded with

00:22:40,650 --> 00:22:47,490
that if we by default visit the check

00:22:43,560 --> 00:22:49,380
one then we'll probably see only the

00:22:47,490 --> 00:22:52,920
check one no English

00:22:49,380 --> 00:22:55,020
nice so we see only the things that we

00:22:52,920 --> 00:22:58,920
need like zero the application with

00:22:55,020 --> 00:23:02,340
really small size footprint they have

00:22:58,920 --> 00:23:11,220
any questions because I think my other

00:23:02,340 --> 00:23:18,780
slide is just it's just yeah yeah this

00:23:11,220 --> 00:23:21,450
is kept just Q&A and if we wait yeah

00:23:18,780 --> 00:23:23,190
there is a link and if you are

00:23:21,450 --> 00:23:26,220
interested please visit this link

00:23:23,190 --> 00:23:29,510
because I written a whole blog post it's

00:23:26,220 --> 00:23:32,970
on it's on angular in depth so you can

00:23:29,510 --> 00:23:35,100
you can read a lot more about it and see

00:23:32,970 --> 00:23:37,890
the whole whole set up there is a good

00:23:35,100 --> 00:23:40,500
hub repo that of the project that you

00:23:37,890 --> 00:23:44,640
just saw it is pretty easy to replicate

00:23:40,500 --> 00:23:47,550
and please please please do so don't

00:23:44,640 --> 00:23:49,440
don't be shy even even if you do this

00:23:47,550 --> 00:23:51,720
set up in your project and you later on

00:23:49,440 --> 00:23:53,730
decide that this is not for me I will

00:23:51,720 --> 00:23:56,940
probably do it somehow somehow

00:23:53,730 --> 00:24:00,030
differently going from the going from

00:23:56,940 --> 00:24:02,340
the typescript object the JSON is pretty

00:24:00,030 --> 00:24:05,430
easy vs code extension can probably do

00:24:02,340 --> 00:24:07,290
that you already have a typing so you

00:24:05,430 --> 00:24:09,420
can use the typing for the in cheeks

00:24:07,290 --> 00:24:12,690
translate or for trans loco when they

00:24:09,420 --> 00:24:14,720
will support it and you are it's a

00:24:12,690 --> 00:24:17,100
win-win situation you can't lose with

00:24:14,720 --> 00:24:20,190
just a little bit of setup so you

00:24:17,100 --> 00:24:21,940
basically refactor or your Jason's to

00:24:20,190 --> 00:24:24,040
typescript files and

00:24:21,940 --> 00:24:26,110
do a few lines of code in your in your

00:24:24,040 --> 00:24:30,190
modules that's it and you will have a

00:24:26,110 --> 00:24:31,100
build time checks in translations thank

00:24:30,190 --> 00:24:34,150
you

00:24:31,100 --> 00:24:34,150

YouTube URL: https://www.youtube.com/watch?v=2pntJ0yzV1Y


