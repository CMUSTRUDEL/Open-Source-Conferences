Title: Angular Vienna, Highly declarative UI without using templates, August 2019
Publication date: 2019-09-02
Playlist: Angular Vienna
Description: 
	_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,149 --> 00:00:05,430
for today as you can see highly

00:00:02,820 --> 00:00:08,160
decorative UI without using templates

00:00:05,430 --> 00:00:09,750
what is it I mean in other words what is

00:00:08,160 --> 00:00:13,139
this trying to tell you is that I will

00:00:09,750 --> 00:00:20,310
show you different way how you I can be

00:00:13,139 --> 00:00:23,250
built today in order to give you all the

00:00:20,310 --> 00:00:26,810
freedom and so you can actually write

00:00:23,250 --> 00:00:29,220
way less code with way more consistency

00:00:26,810 --> 00:00:31,080
because this is what we want because we

00:00:29,220 --> 00:00:32,610
don't want to actually produce way too

00:00:31,080 --> 00:00:36,890
much code because we have to maintain

00:00:32,610 --> 00:00:39,719
all of this right and I will start with

00:00:36,890 --> 00:00:44,160
setting up some context I will try to

00:00:39,719 --> 00:00:45,930
tell you why another library where we

00:00:44,160 --> 00:00:48,570
are coming from and where we are trying

00:00:45,930 --> 00:00:51,629
to solve and then once we understand

00:00:48,570 --> 00:00:53,280
this we will actually jump in to look at

00:00:51,629 --> 00:00:55,500
some of the features what it can do for

00:00:53,280 --> 00:01:00,660
us and of course today we will have two

00:00:55,500 --> 00:01:03,480
demos so let's start how many of you

00:01:00,660 --> 00:01:08,490
here works for logical corporation that

00:01:03,480 --> 00:01:11,310
has two or three plus UI team that

00:01:08,490 --> 00:01:15,299
actually develops UI you are a little

00:01:11,310 --> 00:01:21,960
bit bigger even to Department know big

00:01:15,299 --> 00:01:25,590
companies here ok anyway so it's ok but

00:01:21,960 --> 00:01:30,150
at least we all work on angular right ok

00:01:25,590 --> 00:01:33,900
which is so whether you work for bigger

00:01:30,150 --> 00:01:36,090
companies more company we always write

00:01:33,900 --> 00:01:38,340
some software it's either for internal

00:01:36,090 --> 00:01:40,290
use or for external use whether it is

00:01:38,340 --> 00:01:42,090
one application or 50 application it's a

00:01:40,290 --> 00:01:45,119
lot of code and what we try to

00:01:42,090 --> 00:01:47,280
accomplish we try to reuse the minimize

00:01:45,119 --> 00:01:49,619
number of code and when we have more

00:01:47,280 --> 00:01:51,659
team we try to somehow synchronize the

00:01:49,619 --> 00:01:53,369
kind of work so we don't actually

00:01:51,659 --> 00:01:57,899
duplicate and we don't actually repeat

00:01:53,369 --> 00:02:00,329
ourselves therefore even if you work for

00:01:57,899 --> 00:02:03,810
a company that has well defined set of

00:02:00,329 --> 00:02:09,209
components that you try to use to build

00:02:03,810 --> 00:02:12,180
to build your UI where you already jump

00:02:09,209 --> 00:02:13,140
all the way up to abstract away that you

00:02:12,180 --> 00:02:16,590
don't

00:02:13,140 --> 00:02:17,700
work anymore with CSS HTML you rub all

00:02:16,590 --> 00:02:20,100
those things into well-defined

00:02:17,700 --> 00:02:24,000
components and you can have those to

00:02:20,100 --> 00:02:28,710
write different UIs let's say we will be

00:02:24,000 --> 00:02:31,650
writing UI for CRM invoicing it's still

00:02:28,710 --> 00:02:34,230
a lot of code to write because if you

00:02:31,650 --> 00:02:35,700
look at this example where I just put

00:02:34,230 --> 00:02:37,350
together a few lines of code I'm not

00:02:35,700 --> 00:02:39,720
sure whether you guys see it in the back

00:02:37,350 --> 00:02:42,660
is that I'm using angular material where

00:02:39,720 --> 00:02:45,270
I just assemble four fields for to

00:02:42,660 --> 00:02:49,790
represent user profile to represent user

00:02:45,270 --> 00:02:49,790
profile it's a lot of line of code and

00:02:50,000 --> 00:02:55,050
if you think of it that if I have to

00:02:52,860 --> 00:02:59,640
write the same amount of mine a line of

00:02:55,050 --> 00:03:02,280
code not only for but too many fields

00:02:59,640 --> 00:03:05,010
that I'm to represent for all those

00:03:02,280 --> 00:03:08,459
other domain entities let's say not only

00:03:05,010 --> 00:03:11,910
user permissions and groups purchase

00:03:08,459 --> 00:03:14,760
order invoice requisition receive you

00:03:11,910 --> 00:03:16,380
can name it that's a lot of code and I

00:03:14,760 --> 00:03:17,880
will try to repeat myself a lot of times

00:03:16,380 --> 00:03:25,140
of laxity member of really trying to

00:03:17,880 --> 00:03:28,590
solve is that even this might look okay

00:03:25,140 --> 00:03:30,239
but in the long run is not because we

00:03:28,590 --> 00:03:32,280
will have to take care of it we will

00:03:30,239 --> 00:03:34,680
have to actually keep enhancements will

00:03:32,280 --> 00:03:38,269
try to fix some issues and at the end if

00:03:34,680 --> 00:03:41,550
you try to maybe put some new feature in

00:03:38,269 --> 00:03:44,220
let's say put some extra binding in the

00:03:41,550 --> 00:03:45,989
input I will have to update every single

00:03:44,220 --> 00:03:49,019
place I will actually use this code

00:03:45,989 --> 00:03:52,019
that's why where I'm trying to show you

00:03:49,019 --> 00:03:55,560
is that really how we can simplify the

00:03:52,019 --> 00:03:58,410
UI development in the way that I don't

00:03:55,560 --> 00:04:02,750
write all those lines I don't actually

00:03:58,410 --> 00:04:06,090
try to repeat myself and we let

00:04:02,750 --> 00:04:08,190
something that we call ruined gent that

00:04:06,090 --> 00:04:09,900
we call also meta UI that is actually

00:04:08,190 --> 00:04:12,090
using rules that are very similar like

00:04:09,900 --> 00:04:17,100
CSS rules to generate the user interface

00:04:12,090 --> 00:04:19,709
for us and one of you have all this then

00:04:17,100 --> 00:04:21,479
the main motivation behind all this is

00:04:19,709 --> 00:04:23,910
really try to solve the big problem

00:04:21,479 --> 00:04:26,700
because everything starts and ends with

00:04:23,910 --> 00:04:29,400
our domain entities or objects for which

00:04:26,700 --> 00:04:31,020
we try to generate user interface and of

00:04:29,400 --> 00:04:32,930
course our entities appear under

00:04:31,020 --> 00:04:35,250
different contexts under different UI

00:04:32,930 --> 00:04:39,120
meaning that when I actually write code

00:04:35,250 --> 00:04:40,710
not only I'm bright certain form for

00:04:39,120 --> 00:04:43,110
editing I need to actually write the

00:04:40,710 --> 00:04:44,790
same thing for read-only at the same

00:04:43,110 --> 00:04:47,880
time I need to write the same thing for

00:04:44,790 --> 00:04:50,760
create write because most likely when

00:04:47,880 --> 00:04:53,070
I'm creating objects there might be

00:04:50,760 --> 00:04:56,550
different set of fields as a compared to

00:04:53,070 --> 00:04:59,880
editing or viewing right so all of this

00:04:56,550 --> 00:05:04,200
comes down to the solution where we try

00:04:59,880 --> 00:05:07,050
to simplify all this with something

00:05:04,200 --> 00:05:10,380
called meta UI which is rule engine that

00:05:07,050 --> 00:05:12,690
sits on the front hand side that has set

00:05:10,380 --> 00:05:17,160
of api's and minimum set of components

00:05:12,690 --> 00:05:21,540
that has or that can actually take your

00:05:17,160 --> 00:05:26,280
model described by metadata ethical

00:05:21,540 --> 00:05:30,060
rules once again like OSS or CSS rules

00:05:26,280 --> 00:05:32,250
in order to derive fully functional user

00:05:30,060 --> 00:05:36,780
interface for you on the fly without

00:05:32,250 --> 00:05:38,940
using templates and forcing you assemble

00:05:36,780 --> 00:05:41,180
and layout every single field on the

00:05:38,940 --> 00:05:45,140
page over and over because as you saw

00:05:41,180 --> 00:05:47,910
two slides back we can have as many as

00:05:45,140 --> 00:05:50,460
much reusable components in our

00:05:47,910 --> 00:05:52,890
repository but still we have to actually

00:05:50,460 --> 00:05:54,870
when we are assembling take this

00:05:52,890 --> 00:05:56,400
component put it into the template put

00:05:54,870 --> 00:05:58,820
this component put it into the template

00:05:56,400 --> 00:06:02,610
to assemble the actual structure and

00:05:58,820 --> 00:06:05,670
this is what we are trying to avoid so

00:06:02,610 --> 00:06:11,010
this is short introduction and let me

00:06:05,670 --> 00:06:16,230
show you first demo oh I still have

00:06:11,010 --> 00:06:20,700
features so not so fast so now let me

00:06:16,230 --> 00:06:24,600
tell you what it can do for us so meta

00:06:20,700 --> 00:06:29,100
UI is based on the DRI principle since

00:06:24,600 --> 00:06:31,860
we try to declare everything and define

00:06:29,100 --> 00:06:35,280
everything on the global level we don't

00:06:31,860 --> 00:06:37,050
try to repeat ourselves so we're in the

00:06:35,280 --> 00:06:38,940
first place when I try to lay out those

00:06:37,050 --> 00:06:40,440
components manually I do a lot of

00:06:38,940 --> 00:06:42,180
repetitions where they

00:06:40,440 --> 00:06:44,190
we try to avoid this because it's

00:06:42,180 --> 00:06:46,380
declared only once and some other logic

00:06:44,190 --> 00:06:50,520
is able to generate the whole UI for us

00:06:46,380 --> 00:06:53,910
I think I already mentioned this one

00:06:50,520 --> 00:06:58,760
before meta UI is heavily motivated by

00:06:53,910 --> 00:07:01,530
CSS meaning just like CSS rules are

00:06:58,760 --> 00:07:03,410
additive meaning more common rules can

00:07:01,530 --> 00:07:05,880
be overwritten by more specific rules

00:07:03,410 --> 00:07:08,640
the same things works here which

00:07:05,880 --> 00:07:10,740
actually give us great capability in

00:07:08,640 --> 00:07:12,480
terms of customization so if you need

00:07:10,740 --> 00:07:14,610
customization framework and you don't

00:07:12,480 --> 00:07:16,440
want to actually create multiple github

00:07:14,610 --> 00:07:19,140
repository because you always make some

00:07:16,440 --> 00:07:21,380
Arrangements adjustments for different

00:07:19,140 --> 00:07:25,590
customer this is the framework for you

00:07:21,380 --> 00:07:27,510
because just like CSS we can have a

00:07:25,590 --> 00:07:30,270
bootstrap at the bottom right we can

00:07:27,510 --> 00:07:31,890
actually have some company layer that

00:07:30,270 --> 00:07:34,230
actually defines some additional styles

00:07:31,890 --> 00:07:35,960
and then even on application level you

00:07:34,230 --> 00:07:38,850
as a developer you are able to tweak it

00:07:35,960 --> 00:07:41,610
so this is the power we don't actually

00:07:38,850 --> 00:07:43,770
realize that we are able to use CSS to

00:07:41,610 --> 00:07:45,660
shape the way our HTML z rendered even

00:07:43,770 --> 00:07:48,030
one would think it's actually different

00:07:45,660 --> 00:07:52,950
you are and this is what we are trying

00:07:48,030 --> 00:07:58,340
to achieve as well I think it was like

00:07:52,950 --> 00:08:01,890
five or six months back we finally

00:07:58,340 --> 00:08:04,290
refactor all this rule engine so you can

00:08:01,890 --> 00:08:06,690
actually plug in your own URL but it

00:08:04,290 --> 00:08:09,030
because before it was purely based on

00:08:06,690 --> 00:08:11,520
something called Prime and G it was one

00:08:09,030 --> 00:08:14,910
by one but we realize if you want to

00:08:11,520 --> 00:08:18,690
actually open source it then there is no

00:08:14,910 --> 00:08:20,550
other way for to show it to present it

00:08:18,690 --> 00:08:22,290
because nobody would care if you are not

00:08:20,550 --> 00:08:23,730
able to plug in your URL body because

00:08:22,290 --> 00:08:26,070
every single company is using something

00:08:23,730 --> 00:08:32,220
different of course it needs to be on

00:08:26,070 --> 00:08:34,500
angular and more it would be on the

00:08:32,220 --> 00:08:37,680
enterprise level just like already

00:08:34,500 --> 00:08:40,919
mentioned this as well is we do need to

00:08:37,680 --> 00:08:43,800
support different nodes because when we

00:08:40,919 --> 00:08:46,800
actually when we assemble the UI the UI

00:08:43,800 --> 00:08:50,190
differs whether I'm showing to the user

00:08:46,800 --> 00:08:52,050
for it only or he's editing or he is

00:08:50,190 --> 00:08:54,150
creating or I'm listening list of

00:08:52,050 --> 00:08:55,650
objects for each

00:08:54,150 --> 00:08:57,840
the situation I need to be able to

00:08:55,650 --> 00:09:03,540
define different set of user interfaces

00:08:57,840 --> 00:09:05,580
and on an enterprise level when we have

00:09:03,540 --> 00:09:07,050
all these tweaks and adjust it and maybe

00:09:05,580 --> 00:09:09,720
show different UI for different

00:09:07,050 --> 00:09:12,450
customers we need some conditional

00:09:09,720 --> 00:09:16,110
support some expression so I want to be

00:09:12,450 --> 00:09:18,660
able to define that hey negatives feel

00:09:16,110 --> 00:09:21,030
visible if something or make this feel

00:09:18,660 --> 00:09:26,100
editable it's something else and using

00:09:21,030 --> 00:09:28,230
this I'm able to redefine the complete

00:09:26,100 --> 00:09:30,360
user interface based on certain

00:09:28,230 --> 00:09:32,790
conditional statement dynamic expression

00:09:30,360 --> 00:09:35,310
that can be actually defined directly in

00:09:32,790 --> 00:09:37,140
the rules just like you will see or they

00:09:35,310 --> 00:09:43,530
can be actually defined in some other

00:09:37,140 --> 00:09:48,240
logic now finally the demo since we

00:09:43,530 --> 00:09:51,000
don't want to wait for npm install I ran

00:09:48,240 --> 00:09:54,390
these three commands before I went here

00:09:51,000 --> 00:09:57,630
and as you know if you work on angular

00:09:54,390 --> 00:10:01,190
side I do nothing else then create new

00:09:57,630 --> 00:10:05,070
angular project then I will add my rules

00:10:01,190 --> 00:10:08,330
using cymatics and I will generate one

00:10:05,070 --> 00:10:13,640
simple page which will work to the demo

00:10:08,330 --> 00:10:13,640
are you ready okay so let me sit down

00:10:14,780 --> 00:10:25,440
switch close this one as you will see

00:10:22,160 --> 00:10:27,480
this is a regular angular project the

00:10:25,440 --> 00:10:30,830
only things that differs I have one view

00:10:27,480 --> 00:10:34,170
here called member details that will

00:10:30,830 --> 00:10:36,600
generate different kinds of forms in

00:10:34,170 --> 00:10:40,050
different modes let's make it simple and

00:10:36,600 --> 00:10:42,150
what you see here is that I have my

00:10:40,050 --> 00:10:44,880
controller here called member detail

00:10:42,150 --> 00:10:47,490
components type skip class where does

00:10:44,880 --> 00:10:51,990
nothing else where I just instantiate

00:10:47,490 --> 00:10:53,460
this my domain entity for simplicity I

00:10:51,990 --> 00:10:55,020
just instantiate these things here

00:10:53,460 --> 00:10:56,610
because otherwise you will have to try

00:10:55,020 --> 00:11:00,900
to load it from somewhere else right and

00:10:56,610 --> 00:11:02,910
here it is my template where we need to

00:11:00,900 --> 00:11:06,630
go into dough too much details right now

00:11:02,910 --> 00:11:08,040
but the only things here to remember is

00:11:06,630 --> 00:11:11,310
that hey can you render this

00:11:08,040 --> 00:11:13,199
for me for operation edit and for layout

00:11:11,310 --> 00:11:16,589
that I call inspect and I don't want to

00:11:13,199 --> 00:11:21,449
worry about anything right now when I

00:11:16,589 --> 00:11:23,459
run this then you'll see out of nothing

00:11:21,449 --> 00:11:27,209
that evil

00:11:23,459 --> 00:11:32,730
let me check whether it works okay it

00:11:27,209 --> 00:11:35,130
will generate this UI without me doing

00:11:32,730 --> 00:11:38,639
almost anything and when I actually go

00:11:35,130 --> 00:11:42,149
back and maybe change this to view

00:11:38,639 --> 00:11:46,290
because I want to show it in read-only

00:11:42,149 --> 00:11:48,930
mode go back it's even only and I

00:11:46,290 --> 00:11:52,829
haven't done anything on the controller

00:11:48,930 --> 00:11:56,550
I haven't done anything on the template

00:11:52,829 --> 00:12:00,420
class all those things are generated but

00:11:56,550 --> 00:12:03,720
now what if I want a little bit modified

00:12:00,420 --> 00:12:06,779
make it better because my bio just like

00:12:03,720 --> 00:12:08,730
description about the user it's a simple

00:12:06,779 --> 00:12:10,139
input field I want to make it text Arab

00:12:08,730 --> 00:12:12,329
because you want to write something and

00:12:10,139 --> 00:12:16,380
it'll reorganize it this so what I want

00:12:12,329 --> 00:12:22,410
to do I will use this intelligent

00:12:16,380 --> 00:12:25,110
template save it we will get back to

00:12:22,410 --> 00:12:27,269
those rules as well right now it's void

00:12:25,110 --> 00:12:32,329
can do for us so one it's actually

00:12:27,269 --> 00:12:37,560
compiled and I will refresh my page and

00:12:32,329 --> 00:12:40,230
I will go back into edit then what will

00:12:37,560 --> 00:12:46,740
happen is that all of the sudden my UI

00:12:40,230 --> 00:12:48,899
changes this is text area I have my data

00:12:46,740 --> 00:12:51,120
I can actually select this number

00:12:48,899 --> 00:12:55,910
everything is recognized this is select

00:12:51,120 --> 00:13:04,889
everything is fine when I go back to

00:12:55,910 --> 00:13:08,600
view it needs to work as well so what i

00:13:04,889 --> 00:13:11,009
did is i feel i use a few selectors

00:13:08,600 --> 00:13:13,529
because just like in CSS we have

00:13:11,009 --> 00:13:15,240
selectors that can be nested and we have

00:13:13,529 --> 00:13:16,500
properties nothing else this is how you

00:13:15,240 --> 00:13:19,649
should see it but we will actually

00:13:16,500 --> 00:13:21,160
review the OSS language in the next few

00:13:19,649 --> 00:13:22,810
slides don't worry

00:13:21,160 --> 00:13:26,590
but I don't actually like this view

00:13:22,810 --> 00:13:30,760
because it's one column so let me change

00:13:26,590 --> 00:13:35,680
it a little bit I have this little two

00:13:30,760 --> 00:13:39,730
steps to make the things easier I try to

00:13:35,680 --> 00:13:41,380
figure out how to use different shortcut

00:13:39,730 --> 00:13:43,300
to actually generate different UI and I

00:13:41,380 --> 00:13:45,700
define a few but then I get lost

00:13:43,300 --> 00:13:47,170
completely so I just use the most

00:13:45,700 --> 00:13:49,810
simplistic method when I actually have

00:13:47,170 --> 00:13:52,660
certain steps so what happens now the

00:13:49,810 --> 00:13:55,180
only things I did I just use another

00:13:52,660 --> 00:13:57,150
property to send a few fields to

00:13:55,180 --> 00:13:59,620
different zones right because my layout

00:13:57,150 --> 00:14:02,200
contains different five different zones

00:13:59,620 --> 00:14:04,060
top left right bottom and what are you I

00:14:02,200 --> 00:14:06,220
just assigned certain properties and

00:14:04,060 --> 00:14:08,050
something else is able to reassemble

00:14:06,220 --> 00:14:13,180
everything oops

00:14:08,050 --> 00:14:17,460
and I organize my view into different

00:14:13,180 --> 00:14:20,800
columns and of course if I double check

00:14:17,460 --> 00:14:27,070
view a date then nothing should break

00:14:20,800 --> 00:14:33,460
and it's more organized and I'm pretty

00:14:27,070 --> 00:14:38,620
happy so we just saw let me go back into

00:14:33,460 --> 00:14:43,360
presentation let me start it so we just

00:14:38,620 --> 00:14:47,350
saw how easy it is to generate UI out of

00:14:43,360 --> 00:14:51,310
nothing I haven't changed I haven't

00:14:47,350 --> 00:14:53,260
touched my template I haven't touched my

00:14:51,310 --> 00:14:55,810
controller the only things I was playing

00:14:53,260 --> 00:14:58,900
with is just a few rules just like you

00:14:55,810 --> 00:15:03,310
would actually figure CSS to shave the

00:14:58,900 --> 00:15:05,140
way your HTML looks on the screen the

00:15:03,310 --> 00:15:08,470
most import part just like if you

00:15:05,140 --> 00:15:11,370
remembered when I said this framework is

00:15:08,470 --> 00:15:15,760
heavily motivated by OSS for a CSS is

00:15:11,370 --> 00:15:17,860
what is the way we actually use the

00:15:15,760 --> 00:15:22,390
rules to render the UI if you look at

00:15:17,860 --> 00:15:25,840
this simple example where we have diff

00:15:22,390 --> 00:15:27,750
there it has class with shape right

00:15:25,840 --> 00:15:31,150
there's cone shape and on the other side

00:15:27,750 --> 00:15:34,089
we have simple rules and when the first

00:15:31,150 --> 00:15:35,020
rules is match of course what happens we

00:15:34,089 --> 00:15:37,089
render this

00:15:35,020 --> 00:15:39,160
rectangle when the second rule is match

00:15:37,089 --> 00:15:42,700
we were in the cycle it's clear right

00:15:39,160 --> 00:15:46,810
because if I render the same code on the

00:15:42,700 --> 00:15:49,390
smaller device some other rules takes

00:15:46,810 --> 00:15:51,880
control and overrides whatever was

00:15:49,390 --> 00:15:53,740
defined on the top level and this is

00:15:51,880 --> 00:15:56,410
simple V everybody everybody understand

00:15:53,740 --> 00:16:00,100
this right and the important part is

00:15:56,410 --> 00:16:02,920
that when browser is leading our HTML

00:16:00,100 --> 00:16:04,950
and tries to match CSS I games and try

00:16:02,920 --> 00:16:08,230
to find the best selector he's trying to

00:16:04,950 --> 00:16:12,100
use every information he can find not

00:16:08,230 --> 00:16:13,630
only hey I have a class that is within

00:16:12,100 --> 00:16:15,190
the concept of Dave and I have dick

00:16:13,630 --> 00:16:17,890
visit which is within the code civil

00:16:15,190 --> 00:16:19,990
body and he's trying to use all this

00:16:17,890 --> 00:16:22,810
information also information which is

00:16:19,990 --> 00:16:25,540
given to him by environment like what is

00:16:22,810 --> 00:16:28,560
my browser width where is my locale and

00:16:25,540 --> 00:16:32,920
so on so on and he used this or

00:16:28,560 --> 00:16:37,440
information to generate the UI meta UI

00:16:32,920 --> 00:16:39,880
is somewhat similar where we do not ask

00:16:37,440 --> 00:16:43,420
Bruce to give us all these environment

00:16:39,880 --> 00:16:46,779
properties we are one step ahead so we

00:16:43,420 --> 00:16:47,680
say hey this is the here is the class

00:16:46,779 --> 00:16:49,690
code user

00:16:47,680 --> 00:16:52,110
he's the operation at it and he's the

00:16:49,690 --> 00:16:55,779
layout and I can keep adding key value

00:16:52,110 --> 00:16:58,120
pair as I want and he uses all these

00:16:55,779 --> 00:17:00,070
information try to actually match the

00:16:58,120 --> 00:17:02,290
best room available to generate the

00:17:00,070 --> 00:17:05,140
different UI and just like in first

00:17:02,290 --> 00:17:06,760
example when I say operation a div there

00:17:05,140 --> 00:17:09,520
is some global rule that says if

00:17:06,760 --> 00:17:11,140
operation edit make something visible

00:17:09,520 --> 00:17:13,449
and something else can actually do this

00:17:11,140 --> 00:17:16,150
property and do something in the second

00:17:13,449 --> 00:17:19,329
example when I have please change it to

00:17:16,150 --> 00:17:23,589
view then I have somewhere different

00:17:19,329 --> 00:17:29,110
rule that modifies the behavior and says

00:17:23,589 --> 00:17:33,400
visible Falls which hides the control or

00:17:29,110 --> 00:17:37,600
whatever I am hiding on the page as you

00:17:33,400 --> 00:17:40,600
see here CSS is really similar to oh s s

00:17:37,600 --> 00:17:44,410
even I say here CSS but it looks like

00:17:40,600 --> 00:17:46,270
more like says but I still keep the CSS

00:17:44,410 --> 00:17:48,680
because it was original idea behind it

00:17:46,270 --> 00:17:51,560
just like you need here when

00:17:48,680 --> 00:17:54,880
actually see the shape you already know

00:17:51,560 --> 00:17:58,370
it's class equal shape right if you see

00:17:54,880 --> 00:18:01,070
hash key equals H key something you know

00:17:58,370 --> 00:18:03,290
it's like ID equals this is the way we

00:18:01,070 --> 00:18:06,320
should read OSS as well we are more

00:18:03,290 --> 00:18:09,320
descriptive but the only things you

00:18:06,320 --> 00:18:11,990
should actually focus on is that set of

00:18:09,320 --> 00:18:15,070
selectors and lists of properties that I

00:18:11,990 --> 00:18:18,410
can actually put in nothing else just

00:18:15,070 --> 00:18:20,690
like CSS or sass or any other

00:18:18,410 --> 00:18:23,750
pre-purchasing language I can write

00:18:20,690 --> 00:18:26,120
those rules in the state way and I can

00:18:23,750 --> 00:18:28,400
actually break them in line or I can

00:18:26,120 --> 00:18:31,070
actually do combination of both this is

00:18:28,400 --> 00:18:34,780
the same right again selectors

00:18:31,070 --> 00:18:37,970
properties this is how we should read it

00:18:34,780 --> 00:18:40,970
when we define properties we support

00:18:37,970 --> 00:18:46,370
different set of types and values we can

00:18:40,970 --> 00:18:51,130
do boolean strings maps RI JavaScript

00:18:46,370 --> 00:18:51,130
acceleration you name it

00:18:51,970 --> 00:18:57,620
when you have I would say larger project

00:18:55,460 --> 00:19:01,010
and you try to raise as much as you can

00:18:57,620 --> 00:19:03,440
we have this still things called trait

00:19:01,010 --> 00:19:05,510
which is a feature which is able to add

00:19:03,440 --> 00:19:08,090
additional behavior to your existing

00:19:05,510 --> 00:19:11,030
rules just like we use mixings just like

00:19:08,090 --> 00:19:15,730
we use traits in c-sharp is the same

00:19:11,030 --> 00:19:18,530
thing because if I want to say that hey

00:19:15,730 --> 00:19:21,680
when I have a password field under a

00:19:18,530 --> 00:19:23,900
user I don't really show it so I would

00:19:21,680 --> 00:19:27,020
just want to actually create special

00:19:23,900 --> 00:19:29,900
component for it and my goal is not to

00:19:27,020 --> 00:19:32,660
redefine this set of rules on the left

00:19:29,900 --> 00:19:34,820
for every single use case because I have

00:19:32,660 --> 00:19:35,480
two different rules because if there is

00:19:34,820 --> 00:19:38,330
a password

00:19:35,480 --> 00:19:39,860
I set a component password field and

00:19:38,330 --> 00:19:40,850
also put some additional validation

00:19:39,860 --> 00:19:43,880
behind it

00:19:40,850 --> 00:19:46,400
plus I said require to which put the

00:19:43,880 --> 00:19:48,500
asterisk next to the field right but

00:19:46,400 --> 00:19:49,010
since I want to do it for every single

00:19:48,500 --> 00:19:52,520
use case

00:19:49,010 --> 00:19:55,850
I just want to define a trade then I can

00:19:52,520 --> 00:20:00,080
actually really use it with easy whether

00:19:55,850 --> 00:20:01,270
I just say trade the trade is required

00:20:00,080 --> 00:20:04,240
or secret and I can

00:20:01,270 --> 00:20:06,160
actually at as many trade I can just

00:20:04,240 --> 00:20:09,640
like you keep adding different mixes to

00:20:06,160 --> 00:20:12,280
CSS or says right and this way you can

00:20:09,640 --> 00:20:13,870
actually reuse a lot of things which

00:20:12,280 --> 00:20:15,460
could be defined on the global

00:20:13,870 --> 00:20:16,840
application level and application

00:20:15,460 --> 00:20:21,580
developers it doesn't have to worry

00:20:16,840 --> 00:20:25,180
about too much things when we are

00:20:21,580 --> 00:20:27,490
rendering fields out of certain entity

00:20:25,180 --> 00:20:31,300
either on enterprise or non enterprise

00:20:27,490 --> 00:20:34,090
level sometimes we have a need that not

00:20:31,300 --> 00:20:36,250
every single field needs to exist on the

00:20:34,090 --> 00:20:38,200
entity sometimes we have data field how

00:20:36,250 --> 00:20:41,020
we call it or calculated fields or

00:20:38,200 --> 00:20:44,080
ad-hoc fields which is a field which is

00:20:41,020 --> 00:20:46,180
just made up and it can be some method

00:20:44,080 --> 00:20:48,760
or function behind it actually assemble

00:20:46,180 --> 00:20:50,350
something or I can just do expression

00:20:48,760 --> 00:20:53,200
directly in the rules to describe

00:20:50,350 --> 00:20:55,540
something I just don't have exact

00:20:53,200 --> 00:20:57,460
example right now but just imagine you

00:20:55,540 --> 00:21:01,810
just try to render a invoice you have

00:20:57,460 --> 00:21:04,030
only you store only amount and v80 and

00:21:01,810 --> 00:21:06,190
maybe you don't want to hard code it you

00:21:04,030 --> 00:21:08,200
want to retrieve the v80 based on user

00:21:06,190 --> 00:21:12,670
ok our country and you want to calculate

00:21:08,200 --> 00:21:14,650
it on the fly but this field amount with

00:21:12,670 --> 00:21:19,960
v80 doesn't exist in the database but

00:21:14,650 --> 00:21:21,490
you can actually made it up right now we

00:21:19,960 --> 00:21:23,530
will actually take our example to the

00:21:21,490 --> 00:21:26,740
next level we will actually do a few

00:21:23,530 --> 00:21:29,590
additional features and we will actually

00:21:26,740 --> 00:21:31,780
use some additional advanced techniques

00:21:29,590 --> 00:21:45,270
from the meta UI to actually enhance our

00:21:31,780 --> 00:21:51,850
form close this ok what I want to do now

00:21:45,270 --> 00:21:55,300
since I change the layout I modify a few

00:21:51,850 --> 00:21:57,820
properties I moved by or I'm in the

00:21:55,300 --> 00:22:01,080
description at the bottom now I want to

00:21:57,820 --> 00:22:06,070
enhance it a little bit more where I

00:22:01,080 --> 00:22:09,850
have this code here which I will replace

00:22:06,070 --> 00:22:12,190
my template as you see because I don't

00:22:09,850 --> 00:22:13,950
want to really keep going back and forth

00:22:12,190 --> 00:22:16,390
and try to

00:22:13,950 --> 00:22:18,520
the front of you always renamed

00:22:16,390 --> 00:22:21,490
view/edit and so on I just want to

00:22:18,520 --> 00:22:25,330
actually automate it and I want to go

00:22:21,490 --> 00:22:29,679
into my thing I have this little field

00:22:25,330 --> 00:22:31,510
the default operation is edit so this is

00:22:29,679 --> 00:22:35,039
first thing I just want to check I have

00:22:31,510 --> 00:22:38,620
those buttons okay everything works

00:22:35,039 --> 00:22:42,730
perfect and the next things which is

00:22:38,620 --> 00:22:43,450
okay and then as you will see in a

00:22:42,730 --> 00:22:55,029
minute

00:22:43,450 --> 00:23:02,039
oops what I have added right now works

00:22:55,029 --> 00:23:06,370
fine okay say oops

00:23:02,039 --> 00:23:12,190
refresh okay just want to make sure that

00:23:06,370 --> 00:23:15,880
our button works now I will add some

00:23:12,190 --> 00:23:20,620
additional rules which adds conditional

00:23:15,880 --> 00:23:23,020
statement into the bio because I want to

00:23:20,620 --> 00:23:25,330
make this bio editable if something for

00:23:23,020 --> 00:23:27,460
example if used it's kinda stupid use

00:23:25,330 --> 00:23:31,120
case but I just want to show you that it

00:23:27,460 --> 00:23:33,490
works is that what I want to have I want

00:23:31,120 --> 00:23:35,620
to define a condition using expression

00:23:33,490 --> 00:23:40,570
that I want to me negative editable is

00:23:35,620 --> 00:23:45,940
user is older than 18 right in the same

00:23:40,570 --> 00:23:49,350
way what I can do is when user is less

00:23:45,940 --> 00:23:51,909
than 18 the field is you don't read-only

00:23:49,350 --> 00:23:56,130
always dynamic and I don't actually

00:23:51,909 --> 00:23:59,950
allow him to type anything when user is

00:23:56,130 --> 00:24:02,590
23 I can keep editing right and this way

00:23:59,950 --> 00:24:04,299
I can really write those expression

00:24:02,590 --> 00:24:06,070
directly in the code in the rules or I

00:24:04,299 --> 00:24:09,159
can actually redirect them into some

00:24:06,070 --> 00:24:13,720
type script class or service the same

00:24:09,159 --> 00:24:18,279
way I can actually hide and show fields

00:24:13,720 --> 00:24:21,640
write the same things as I made it

00:24:18,279 --> 00:24:25,299
visible sorry editable I can dynamically

00:24:21,640 --> 00:24:27,350
play with the field and hide them and

00:24:25,299 --> 00:24:32,930
show them based on my distinct on

00:24:27,350 --> 00:24:33,410
right so if I go here the field is not

00:24:32,930 --> 00:24:35,570
visible

00:24:33,410 --> 00:24:37,880
I can hide it dynamically but only

00:24:35,570 --> 00:24:40,100
things I do I just add and remove

00:24:37,880 --> 00:24:43,400
certain properties just like we do this

00:24:40,100 --> 00:24:46,340
vid CSS the good things about this is

00:24:43,400 --> 00:24:48,080
that you can really lay out different

00:24:46,340 --> 00:24:51,500
rules on top of each other because as I

00:24:48,080 --> 00:24:54,020
said it's additive just like CSS so

00:24:51,500 --> 00:24:57,410
usually the way companies use it

00:24:54,020 --> 00:25:01,550
especially the main sponsor here as a PR

00:24:57,410 --> 00:25:03,410
eva is we have rules and complete bottom

00:25:01,550 --> 00:25:06,470
level which is the rules which actually

00:25:03,410 --> 00:25:10,040
define if number use this component if

00:25:06,470 --> 00:25:12,410
if view then you use this float of

00:25:10,040 --> 00:25:14,510
layout but then on the application level

00:25:12,410 --> 00:25:16,280
we have the same set of rules and then

00:25:14,510 --> 00:25:18,530
developer always for specific case for

00:25:16,280 --> 00:25:21,350
specific customer can tweak it as well

00:25:18,530 --> 00:25:24,860
meaning for example if I'm showing this

00:25:21,350 --> 00:25:27,860
rule for role let's say admin I can

00:25:24,860 --> 00:25:29,090
actually define this is our main and I

00:25:27,860 --> 00:25:30,890
can actually redefine the rule

00:25:29,090 --> 00:25:33,170
completely and show this user sample

00:25:30,890 --> 00:25:35,570
something else or make validation

00:25:33,170 --> 00:25:40,760
completely different and the same things

00:25:35,570 --> 00:25:42,800
if I show this UI for customer a I can

00:25:40,760 --> 00:25:45,680
actually render him different set of you

00:25:42,800 --> 00:25:48,830
is then to customer be this give me just

00:25:45,680 --> 00:25:51,020
like CSS great capability of

00:25:48,830 --> 00:25:57,230
manipulating the UI without even

00:25:51,020 --> 00:25:58,460
touching the template so I have visible

00:25:57,230 --> 00:26:03,010
the same things

00:25:58,460 --> 00:26:03,010
validity with rules is Oh

00:26:03,880 --> 00:26:12,470
validity rule is is pretty fancy

00:26:06,860 --> 00:26:14,210
let me check I just deleted it the good

00:26:12,470 --> 00:26:16,540
things we actually using IntelliJ IDEA

00:26:14,210 --> 00:26:19,730
then we can actually go back to history

00:26:16,540 --> 00:26:25,700
history doesn't have anything which

00:26:19,730 --> 00:26:28,250
which which is great don't worry since I

00:26:25,700 --> 00:26:30,770
keep copying these things and I have

00:26:28,250 --> 00:26:36,950
this condition here because what I want

00:26:30,770 --> 00:26:39,650
to do have a close this I can actually

00:26:36,950 --> 00:26:40,910
redefine a polity condition for age

00:26:39,650 --> 00:26:44,990
because

00:26:40,910 --> 00:26:47,060
if you are less than 15 I want to

00:26:44,990 --> 00:26:49,640
actually create validation error right

00:26:47,060 --> 00:26:51,740
and this validation nicely translate

00:26:49,640 --> 00:26:54,170
into angular forms into the validators

00:26:51,740 --> 00:26:56,210
as well so when I actually write simple

00:26:54,170 --> 00:26:58,220
expression like this of course I can

00:26:56,210 --> 00:27:00,590
actually do it in the code or some other

00:26:58,220 --> 00:27:04,430
service can achieve it this

00:27:00,590 --> 00:27:07,280
automatically translate into angular and

00:27:04,430 --> 00:27:09,560
angular setup some validity behind it

00:27:07,280 --> 00:27:12,290
and this message message will appear so

00:27:09,560 --> 00:27:19,070
let me save this I hope it's the right

00:27:12,290 --> 00:27:21,680
file and I try to enter invalid value

00:27:19,070 --> 00:27:24,500
and all of a sudden you see I have

00:27:21,680 --> 00:27:27,020
visibility still there as well which is

00:27:24,500 --> 00:27:29,480
confusing hiding and showing but what

00:27:27,020 --> 00:27:32,210
you can see I can actually nicely

00:27:29,480 --> 00:27:36,260
integrate with angular validators right

00:27:32,210 --> 00:27:38,030
and the message which I define is shown

00:27:36,260 --> 00:27:40,790
on the screen I'm actually using angle

00:27:38,030 --> 00:27:43,220
material to show the errors but if I

00:27:40,790 --> 00:27:47,390
type the right number everything's fine

00:27:43,220 --> 00:27:50,060
once again if we review how many things

00:27:47,390 --> 00:27:52,820
we touch or change we haven't touched

00:27:50,060 --> 00:27:56,450
any of the logic here we just edited

00:27:52,820 --> 00:28:00,280
buttons we just commented the Edit but

00:27:56,450 --> 00:28:02,990
we haven't added any additional code to

00:28:00,280 --> 00:28:07,910
create let me delete this I don't like

00:28:02,990 --> 00:28:10,310
this one to create this simple or

00:28:07,910 --> 00:28:13,850
advanced additional logic to generate

00:28:10,310 --> 00:28:15,320
the UI to column-organized the field

00:28:13,850 --> 00:28:18,910
just like I want based on the

00:28:15,320 --> 00:28:21,170
specification do different validation or

00:28:18,910 --> 00:28:24,080
different conditional statement whether

00:28:21,170 --> 00:28:26,000
I want to make this field visible

00:28:24,080 --> 00:28:30,170
editable and there can be different

00:28:26,000 --> 00:28:33,590
conditions right then as I told you that

00:28:30,170 --> 00:28:36,640
sometimes we have fields that we call

00:28:33,590 --> 00:28:40,870
derived that something is made up then I

00:28:36,640 --> 00:28:47,750
can do the same things here if I add

00:28:40,870 --> 00:28:49,160
additional field let me oh you know what

00:28:47,750 --> 00:28:51,860
I will show you this one is this better

00:28:49,160 --> 00:28:57,220
is that

00:28:51,860 --> 00:29:02,510
how easy for me is to add for example a

00:28:57,220 --> 00:29:04,760
hint again adding hit hint is just

00:29:02,510 --> 00:29:07,399
adding properties and since every single

00:29:04,760 --> 00:29:10,760
property is back up by expression so it

00:29:07,399 --> 00:29:13,789
can be any types like bullying list RI

00:29:10,760 --> 00:29:17,240
and the same things here I just added a

00:29:13,789 --> 00:29:19,760
hint into my bio and I can keep writing

00:29:17,240 --> 00:29:23,029
and you see how many characters I type

00:29:19,760 --> 00:29:25,010
and again the only things I add I just

00:29:23,029 --> 00:29:27,049
added additional properties nothing else

00:29:25,010 --> 00:29:28,639
and you would have to actually implement

00:29:27,049 --> 00:29:37,190
those logic behind if you have to

00:29:28,639 --> 00:29:43,389
maintain it and so on now finally here

00:29:37,190 --> 00:29:48,320
comes my dear I filled something ad-hoc

00:29:43,389 --> 00:29:50,870
that dozen doesn't exist on the actual

00:29:48,320 --> 00:29:53,630
object because what I want to do I want

00:29:50,870 --> 00:29:56,630
to derive I want to create my own data

00:29:53,630 --> 00:29:58,549
field and I want to actually use the

00:29:56,630 --> 00:30:01,450
values from the existing objects and I

00:29:58,549 --> 00:30:05,120
want to actually ship it to the top zone

00:30:01,450 --> 00:30:07,639
which means if everything works I don't

00:30:05,120 --> 00:30:09,409
need this title because I already made

00:30:07,639 --> 00:30:12,980
up my own title which is dynamic right

00:30:09,409 --> 00:30:18,830
let me save this yeah I have my title

00:30:12,980 --> 00:30:20,510
and of course it's it it only right and

00:30:18,830 --> 00:30:23,149
I can actually create different kinds of

00:30:20,510 --> 00:30:28,250
adult I hooked heel for any kinds of 10

00:30:23,149 --> 00:30:29,990
TT now we always talk about different

00:30:28,250 --> 00:30:32,090
layouts because it's super important

00:30:29,990 --> 00:30:35,529
when I actually work with domain objects

00:30:32,090 --> 00:30:39,470
and I have different business logic it's

00:30:35,529 --> 00:30:42,230
to have ability to define different

00:30:39,470 --> 00:30:44,990
layout based on different operation so I

00:30:42,230 --> 00:30:47,960
cannot reorganize my existing rules were

00:30:44,990 --> 00:30:50,330
the top part will be just used to

00:30:47,960 --> 00:30:53,090
declare things and to define the decor

00:30:50,330 --> 00:30:56,299
properties and the bottom part I will

00:30:53,090 --> 00:30:59,630
use to layout my components just like I

00:30:56,299 --> 00:31:02,450
use to lay out my come on component

00:30:59,630 --> 00:31:04,930
using properties say after zone top zone

00:31:02,450 --> 00:31:09,890
left I have

00:31:04,930 --> 00:31:13,010
different more advanced way of doing

00:31:09,890 --> 00:31:16,340
this which is kind of easier for me to

00:31:13,010 --> 00:31:19,250
read where I just use hey when you

00:31:16,340 --> 00:31:21,590
actually render anything for member

00:31:19,250 --> 00:31:24,970
operation view and edit organize those

00:31:21,590 --> 00:31:28,610
field this way but for operation create

00:31:24,970 --> 00:31:30,980
make sure you organize those fields this

00:31:28,610 --> 00:31:31,700
way and only use those for field instead

00:31:30,980 --> 00:31:36,860
of everything

00:31:31,700 --> 00:31:39,560
so if I compile this for view edit I

00:31:36,860 --> 00:31:41,740
have the same thing but for create it's

00:31:39,560 --> 00:31:45,290
completely different UI right and

00:31:41,740 --> 00:31:47,840
usually this cost me three different

00:31:45,290 --> 00:31:50,360
templates and maybe three different role

00:31:47,840 --> 00:31:58,880
things to be able to do this and this I

00:31:50,360 --> 00:32:06,260
have it for free and if I go back back

00:31:58,880 --> 00:32:10,670
to presentation and run it again so

00:32:06,260 --> 00:32:12,650
right now you just saw how pretty

00:32:10,670 --> 00:32:15,170
straightforward and easy is to generate

00:32:12,650 --> 00:32:18,020
you are out of nothing and we just touch

00:32:15,170 --> 00:32:21,920
the small part of what me tell you I can

00:32:18,020 --> 00:32:24,860
do we just because meta UI has four main

00:32:21,920 --> 00:32:27,470
major concept the deal of its fields

00:32:24,860 --> 00:32:30,080
classes layouts and modules and we just

00:32:27,470 --> 00:32:31,790
touch classes and fields even I use the

00:32:30,080 --> 00:32:35,780
inspector out which is somehow defined

00:32:31,790 --> 00:32:38,090
behind the scenes but we haven't seen

00:32:35,780 --> 00:32:40,730
anything like this because I haven't

00:32:38,090 --> 00:32:43,550
joined you but lay out what it can do is

00:32:40,730 --> 00:32:45,560
basically define structure for example I

00:32:43,550 --> 00:32:48,080
can actually create my own stick layout

00:32:45,560 --> 00:32:49,940
when I can actually combine actions and

00:32:48,080 --> 00:32:56,420
form together right using the rules

00:32:49,940 --> 00:32:58,460
again the HTML template that defines the

00:32:56,420 --> 00:33:01,490
contents is identical or I can actually

00:32:58,460 --> 00:33:03,320
do more advanced examples where I can

00:33:01,490 --> 00:33:07,070
actually create my own complete custom

00:33:03,320 --> 00:33:10,130
layout which contains with several

00:33:07,070 --> 00:33:12,260
expandable section and my form can be

00:33:10,130 --> 00:33:14,240
actually spread out into multiple

00:33:12,260 --> 00:33:18,350
section and I can do whatever I want

00:33:14,240 --> 00:33:20,179
right and of course modules is something

00:33:18,350 --> 00:33:22,309
that can actually define a page so when

00:33:20,179 --> 00:33:26,120
we have several modules it was always

00:33:22,309 --> 00:33:27,950
meant to create the top level navigation

00:33:26,120 --> 00:33:29,990
menu and once you actually click on

00:33:27,950 --> 00:33:32,269
something you get to some Lightning page

00:33:29,990 --> 00:33:35,450
and every single portlet you see here is

00:33:32,269 --> 00:33:37,340
made up from some layout as well so meta

00:33:35,450 --> 00:33:41,539
UI the way we see it is really powerful

00:33:37,340 --> 00:33:43,399
language but sometimes using it at some

00:33:41,539 --> 00:33:46,220
additional abstraction to application so

00:33:43,399 --> 00:33:49,130
we need to be careful when and how we

00:33:46,220 --> 00:33:51,950
use it but at the end of the day we try

00:33:49,130 --> 00:33:53,539
to save our time and the way we work

00:33:51,950 --> 00:33:56,000
with code and we don't want to actually

00:33:53,539 --> 00:33:57,889
type too much because the more code we

00:33:56,000 --> 00:34:00,559
write we have to actually take care of

00:33:57,889 --> 00:34:02,450
it later on we have to actually fix fix

00:34:00,559 --> 00:34:07,370
issues we need to keep enhancing it and

00:34:02,450 --> 00:34:09,530
the more code base the traditional

00:34:07,370 --> 00:34:14,000
approach the where I'm are assembling

00:34:09,530 --> 00:34:17,960
means just a lot of a lot of maintenance

00:34:14,000 --> 00:34:20,800
at the end so and this is meta UI which

00:34:17,960 --> 00:34:25,760
can actually help you solve the problem

00:34:20,800 --> 00:34:29,099
and thank you

00:34:25,760 --> 00:34:29,099

YouTube URL: https://www.youtube.com/watch?v=BO33Bw_MqPs


