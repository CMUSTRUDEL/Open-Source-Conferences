Title: Angular Vienna, Angular, React, Vue and co. Harmoniously united, January 2019
Publication date: 2019-01-21
Playlist: Angular Vienna
Description: 
	JavaScript frameworks are being rapidly developed â€“ unfortunately far too quickly for many long-term projects! Framework-independent web components and micro app architectures represent immovable obstacles.

This session explores how to decouple your projects with web components from concrete frameworks and micro apps to create a future-proof architecture that can grow over time. The pros and cons are discussed, and solutions to pitfalls provided.
Captions: 
	00:00:00,030 --> 00:00:05,220
okay yeah thanks Mikey for this nice

00:00:03,030 --> 00:00:08,670
introduction and thanks for having me

00:00:05,220 --> 00:00:12,120
this next talk is about uniting several

00:00:08,670 --> 00:00:16,080
technologies by means of web components

00:00:12,120 --> 00:00:18,630
as well as micro apps and let me

00:00:16,080 --> 00:00:21,750
introduce myself a bit I am manfred I'm

00:00:18,630 --> 00:00:25,250
a train and consultant and I'm focusing

00:00:21,750 --> 00:00:28,680
on Angola I'm helping companies in

00:00:25,250 --> 00:00:31,080
Austria and in Germany and sometimes in

00:00:28,680 --> 00:00:33,780
Switzerland on a regular basis with

00:00:31,080 --> 00:00:37,260
Angola 40cm doing workshops and

00:00:33,780 --> 00:00:41,280
consultancy I'm only a broad member like

00:00:37,260 --> 00:00:44,190
Mikey of the Google developer expert

00:00:41,280 --> 00:00:46,500
team and the current product is also

00:00:44,190 --> 00:00:49,289
about angular it's a workshop for

00:00:46,500 --> 00:00:51,360
angular in the enterprise it tells you

00:00:49,289 --> 00:00:52,980
all the things you need to know when you

00:00:51,360 --> 00:00:57,360
wants to create enterprise scale

00:00:52,980 --> 00:00:59,670
applications with angular it is provided

00:00:57,360 --> 00:01:03,149
as a public workshop we are doing it in

00:00:59,670 --> 00:01:05,820
Vienna we do this Mike and me in Vienna

00:01:03,149 --> 00:01:08,490
next month and there is a discount code

00:01:05,820 --> 00:01:11,220
so if you want to stop by just use this

00:01:08,490 --> 00:01:15,509
discount code then booking your ticket

00:01:11,220 --> 00:01:19,439
it gives you 15% by the way we are also

00:01:15,509 --> 00:01:22,890
doing it as an in-house workshop so let

00:01:19,439 --> 00:01:27,090
me start with a picture who knows this

00:01:22,890 --> 00:01:31,020
machine some of you this is a cut old

00:01:27,090 --> 00:01:37,500
kimoto array 64 the hero of my childhood

00:01:31,020 --> 00:01:39,570
and it was released back in 1982 boa but

00:01:37,500 --> 00:01:42,420
a number that really shows that I'm

00:01:39,570 --> 00:01:45,450
growing old nowadays and it had one

00:01:42,420 --> 00:01:48,600
megahertz which is not much compared to

00:01:45,450 --> 00:01:51,180
nowadays capacities and it had 64

00:01:48,600 --> 00:01:53,460
kilobytes of RAM and if you were lucky

00:01:51,180 --> 00:01:58,500
if you had floppy disks then you could

00:01:53,460 --> 00:02:00,630
store 170 kilobytes kilobytes some

00:01:58,500 --> 00:02:03,990
people didn't have a floppy disk they

00:02:00,630 --> 00:02:08,970
used an audio tape to store data for

00:02:03,990 --> 00:02:11,490
this Commodore 64 but nobody knows is

00:02:08,970 --> 00:02:14,580
that there was also add to our Cobra

00:02:11,490 --> 00:02:21,120
of it a version with two CPU cores it

00:02:14,580 --> 00:02:23,400
looked like this so you needed to buy

00:02:21,120 --> 00:02:24,990
two of them and some people did this for

00:02:23,400 --> 00:02:27,330
programming programming on the one

00:02:24,990 --> 00:02:29,160
machine and testing and debugging on the

00:02:27,330 --> 00:02:31,380
other one and of course the biggest

00:02:29,160 --> 00:02:34,830
challenge back then has been resources

00:02:31,380 --> 00:02:37,230
you thought twice about using an integer

00:02:34,830 --> 00:02:40,170
perhaps just a tiny in that job was

00:02:37,230 --> 00:02:43,620
enough resources have been very limited

00:02:40,170 --> 00:02:46,230
and this was somehow the biggest

00:02:43,620 --> 00:02:48,810
challenge nowadays we have completely

00:02:46,230 --> 00:02:51,260
different challenges I think the biggest

00:02:48,810 --> 00:02:53,730
challenge nowadays is complexity

00:02:51,260 --> 00:02:56,690
business software gets more and more

00:02:53,730 --> 00:02:59,340
complex and we have to maintain it and

00:02:56,690 --> 00:03:02,670
in addition to that we have to

00:02:59,340 --> 00:03:05,130
coordinate several themes we have not

00:03:02,670 --> 00:03:07,920
only to coordinate members of one team

00:03:05,130 --> 00:03:11,700
but nowadays there are several teams

00:03:07,920 --> 00:03:14,010
involved in such a product UX team for

00:03:11,700 --> 00:03:16,200
instance several programming teams

00:03:14,010 --> 00:03:20,100
feature teams and so on and so forth and

00:03:16,200 --> 00:03:21,900
you have to collapse them and we also

00:03:20,100 --> 00:03:24,330
need something like long time

00:03:21,900 --> 00:03:27,480
maintainability because enterprise scale

00:03:24,330 --> 00:03:30,540
software does not only live for 3 years

00:03:27,480 --> 00:03:33,090
it lives for 10 or 20 years so you have

00:03:30,540 --> 00:03:36,000
to make sure that you can maintain it in

00:03:33,090 --> 00:03:38,550
long term and yeah well there is also

00:03:36,000 --> 00:03:40,740
this issue with milk products I guess

00:03:38,550 --> 00:03:43,020
you've heard about it there are milk

00:03:40,740 --> 00:03:46,730
products out there lasting longer than

00:03:43,020 --> 00:03:46,730
some JavaScript framework

00:03:46,930 --> 00:03:53,750
so I think it was at a workshop last

00:03:49,520 --> 00:03:58,310
time one guy say to the audubon what you

00:03:53,750 --> 00:04:01,310
are doing is that much 2015 so just to

00:03:58,310 --> 00:04:03,350
the math it's not that long and you are

00:04:01,310 --> 00:04:06,680
getting finger pointed to you for using

00:04:03,350 --> 00:04:10,160
technologies from 2015 so something is

00:04:06,680 --> 00:04:13,130
wrong and in this talk I want to show

00:04:10,160 --> 00:04:15,860
you several approaches to deal with

00:04:13,130 --> 00:04:18,710
these issues I will start with web

00:04:15,860 --> 00:04:21,110
components and then I will go on with my

00:04:18,710 --> 00:04:23,930
crabs and at the end I have prepared a

00:04:21,110 --> 00:04:25,990
simple demonstration so first things

00:04:23,930 --> 00:04:29,390
first let's talk about web components

00:04:25,990 --> 00:04:29,810
but it's a web component to put it in a

00:04:29,390 --> 00:04:32,140
nutshell

00:04:29,810 --> 00:04:35,090
a web component is a framework

00:04:32,140 --> 00:04:37,460
independent component you can write it

00:04:35,090 --> 00:04:40,280
with one framework or even with vanilla

00:04:37,460 --> 00:04:42,770
chess and you can use it with all the

00:04:40,280 --> 00:04:46,190
other frameworks or even if vanilla

00:04:42,770 --> 00:04:49,700
chess and as a by-product you have

00:04:46,190 --> 00:04:53,060
something that is very easy to get then

00:04:49,700 --> 00:04:55,910
Amica reloaded lazy loading dynamic

00:04:53,060 --> 00:04:58,730
loading has never ever been that simple

00:04:55,910 --> 00:05:02,450
as with web components this is a nice

00:04:58,730 --> 00:05:04,960
by-product of it so to be honest there

00:05:02,450 --> 00:05:08,060
is not such a thing like a web component

00:05:04,960 --> 00:05:10,810
because web components is just an

00:05:08,060 --> 00:05:14,150
umbrella term for several standards and

00:05:10,810 --> 00:05:16,490
here you see the official icons of the

00:05:14,150 --> 00:05:19,160
standards the first icon is about

00:05:16,490 --> 00:05:21,740
templates I think I don't need to talk

00:05:19,160 --> 00:05:23,930
much about templates we all are using

00:05:21,740 --> 00:05:26,390
templates on a regular basis when we

00:05:23,930 --> 00:05:29,300
think about angular or all the other

00:05:26,390 --> 00:05:32,360
single page application frameworks it is

00:05:29,300 --> 00:05:36,140
just a bunch of HTML tags that are

00:05:32,360 --> 00:05:39,110
reused on demand for instance a bunch of

00:05:36,140 --> 00:05:42,470
text that is rendered within an loop or

00:05:39,110 --> 00:05:45,380
something like this there is a standard

00:05:42,470 --> 00:05:48,470
called HTML imports and it's about

00:05:45,380 --> 00:05:51,740
importing stuff from another HTML file

00:05:48,470 --> 00:05:54,740
the idea here was to get out of app

00:05:51,740 --> 00:05:57,590
components from another HTML file by

00:05:54,740 --> 00:06:00,000
importing this verified

00:05:57,590 --> 00:06:02,790
perhaps the most important stunt that

00:06:00,000 --> 00:06:05,520
here is the custom element standard it

00:06:02,790 --> 00:06:08,520
allows you to write own elements own

00:06:05,520 --> 00:06:10,980
HTML elements and they really behave

00:06:08,520 --> 00:06:14,940
like traditional ones they will behave

00:06:10,980 --> 00:06:17,700
like an TIFF or M table or an input or

00:06:14,940 --> 00:06:20,910
an image you can even deal with them

00:06:17,700 --> 00:06:23,070
using vanilla chess or using Angola or

00:06:20,910 --> 00:06:26,310
other frameworks in the same way and

00:06:23,070 --> 00:06:30,540
then there is shadow doh perhaps the

00:06:26,310 --> 00:06:33,150
most mighty standard here and it even

00:06:30,540 --> 00:06:36,420
sounds more mighty when you use a German

00:06:33,150 --> 00:06:39,660
translation shuttin dome it really

00:06:36,420 --> 00:06:41,670
sounds mighty - uh Tyndall and shadow

00:06:39,660 --> 00:06:45,150
DOM is quite nice because it isolates

00:06:41,670 --> 00:06:48,030
your component which means that the CSS

00:06:45,150 --> 00:06:51,330
of your component cannot influence other

00:06:48,030 --> 00:06:53,190
components which is normally something

00:06:51,330 --> 00:06:55,380
you want to have I guess you know those

00:06:53,190 --> 00:06:58,620
situations where you have two sets of

00:06:55,380 --> 00:07:00,960
CSS files both of them work fine but

00:06:58,620 --> 00:07:05,760
when you use them together all hell

00:07:00,960 --> 00:07:08,820
breaks loose so the good message here is

00:07:05,760 --> 00:07:11,460
even though we have to remember for

00:07:08,820 --> 00:07:14,130
standards we can immediately forget

00:07:11,460 --> 00:07:16,980
about the second one about HTML imports

00:07:14,130 --> 00:07:20,670
because the browser vendors agreed upon

00:07:16,980 --> 00:07:22,920
not implementing it they said hey we

00:07:20,670 --> 00:07:26,880
already have something like this namely

00:07:22,920 --> 00:07:29,430
akuma script imports and so we will use

00:07:26,880 --> 00:07:32,010
a comma script imports nowadays and of

00:07:29,430 --> 00:07:36,510
course even more in the future to import

00:07:32,010 --> 00:07:39,540
something from other fans who is doing

00:07:36,510 --> 00:07:43,200
business software here most of you of

00:07:39,540 --> 00:07:47,690
course in this case you need to deal

00:07:43,200 --> 00:07:51,500
with Internet Explorer 11 most likely

00:07:47,690 --> 00:07:54,320
and it is quite a pity because it's such

00:07:51,500 --> 00:07:57,830
an old browser but in a big company you

00:07:54,320 --> 00:08:00,620
have to somehow respect it and the good

00:07:57,830 --> 00:08:04,280
message here is you can polyfill all

00:08:00,620 --> 00:08:09,500
those standards more or less to Internet

00:08:04,280 --> 00:08:12,230
Explorer 11 just get started just start

00:08:09,500 --> 00:08:14,360
with testing early because not

00:08:12,230 --> 00:08:16,670
everything can be polyfill but you can

00:08:14,360 --> 00:08:21,440
arrange yourself with their limitations

00:08:16,670 --> 00:08:24,470
here the API of web components is also

00:08:21,440 --> 00:08:26,650
quite easy but we see here is a simple

00:08:24,470 --> 00:08:31,010
custom element it is just a class

00:08:26,650 --> 00:08:33,770
normally ACMA script 6 class of course

00:08:31,010 --> 00:08:37,010
it can also be a typescript class and it

00:08:33,770 --> 00:08:39,229
extends HTML elements and then within

00:08:37,010 --> 00:08:41,930
the constructor you can attach a shadow

00:08:39,229 --> 00:08:43,789
dome which means that you are isolating

00:08:41,930 --> 00:08:45,890
your component from the rest of the

00:08:43,789 --> 00:08:49,790
application and then you can deal with

00:08:45,890 --> 00:08:52,820
in HTML or with templates to get some

00:08:49,790 --> 00:08:57,230
mark up into your component this is a

00:08:52,820 --> 00:08:59,870
very simple example for a web component

00:08:57,230 --> 00:09:02,150
at the end of the day you have to

00:08:59,870 --> 00:09:04,100
register your web component and for this

00:09:02,150 --> 00:09:06,950
you are going with custom elements

00:09:04,100 --> 00:09:10,010
define you define a tech name and you

00:09:06,950 --> 00:09:13,310
define your class the class of your HTML

00:09:10,010 --> 00:09:16,130
element and after that everything you

00:09:13,310 --> 00:09:20,540
need is to import your bundles either

00:09:16,130 --> 00:09:23,750
like here in a static way or dynamically

00:09:20,540 --> 00:09:27,680
by dynamically creating a script tag and

00:09:23,750 --> 00:09:30,710
then you can reference your HTML element

00:09:27,680 --> 00:09:33,380
your brand-new HTML elements by using a

00:09:30,710 --> 00:09:36,860
deck with the defined name so it is

00:09:33,380 --> 00:09:40,340
really as simple as that and it can even

00:09:36,860 --> 00:09:42,620
get more simpler because most frameworks

00:09:40,340 --> 00:09:45,200
provide now it is support for web

00:09:42,620 --> 00:09:49,100
components for instance when we look at

00:09:45,200 --> 00:09:52,190
angle on since angular 6 that is since

00:09:49,100 --> 00:09:55,370
last I think March we have angular

00:09:52,190 --> 00:09:58,460
elements and angular elements allows you

00:09:55,370 --> 00:10:00,770
to export an angular component to a web

00:09:58,460 --> 00:10:03,710
component by the snap of a

00:10:00,770 --> 00:10:06,710
just one or two lines of boilerplate

00:10:03,710 --> 00:10:10,310
code and your angular component behaves

00:10:06,710 --> 00:10:13,850
like an ordinary web component the same

00:10:10,310 --> 00:10:16,730
holds true for view using few you can

00:10:13,850 --> 00:10:18,890
even tell the few CLI please export here

00:10:16,730 --> 00:10:22,970
this view component as a web component

00:10:18,890 --> 00:10:25,490
and when it comes to react well they are

00:10:22,970 --> 00:10:28,430
quite reluctant when it comes to

00:10:25,490 --> 00:10:31,010
supporting web components but there are

00:10:28,430 --> 00:10:33,350
community projects out there community

00:10:31,010 --> 00:10:38,680
projects that are also do the same that

00:10:33,350 --> 00:10:38,680
wrap your rect component as a component

00:10:40,030 --> 00:10:46,040
so this is one thing that helps us to

00:10:43,970 --> 00:10:49,430
decouple ourselves from a specific

00:10:46,040 --> 00:10:52,670
framework one way to write code that can

00:10:49,430 --> 00:10:55,040
be used even then we are changing the

00:10:52,670 --> 00:10:58,100
framework it is more or less the Java

00:10:55,040 --> 00:11:03,950
philosophy of writing once and using

00:10:58,100 --> 00:11:07,610
anamur but and debugging everywhere of

00:11:03,950 --> 00:11:10,760
course other this so the second thing I

00:11:07,610 --> 00:11:13,400
want to talk about today is my craps and

00:11:10,760 --> 00:11:15,410
we will see in some minutes that micro

00:11:13,400 --> 00:11:18,350
apps can really benefit from web

00:11:15,410 --> 00:11:21,470
components the idea here is quite simple

00:11:18,350 --> 00:11:25,040
the idea has been around for I think 20

00:11:21,470 --> 00:11:27,830
years at least and it is about not

00:11:25,040 --> 00:11:29,960
writing a big system that can do

00:11:27,830 --> 00:11:31,910
anything or everything anything

00:11:29,960 --> 00:11:34,430
everything you know what I mean so

00:11:31,910 --> 00:11:36,680
because when you have a big system that

00:11:34,430 --> 00:11:40,580
can do all the things you want to have

00:11:36,680 --> 00:11:43,340
then maintainability is decreased you

00:11:40,580 --> 00:11:45,500
cannot easily change something because

00:11:43,340 --> 00:11:47,270
perhaps if you change something here you

00:11:45,500 --> 00:11:50,450
break something there you know this

00:11:47,270 --> 00:11:52,490
issue with regression and it is even

00:11:50,450 --> 00:11:55,670
harder when you have several teams

00:11:52,490 --> 00:11:58,040
working on this big project because in

00:11:55,670 --> 00:11:59,170
this case they have to talk to each

00:11:58,040 --> 00:12:01,760
other

00:11:59,170 --> 00:12:04,490
talking to each other know nothing

00:12:01,760 --> 00:12:07,790
against collaboration but when you are

00:12:04,490 --> 00:12:10,310
ending up more times in meetings than

00:12:07,790 --> 00:12:12,860
with programming codes then something is

00:12:10,310 --> 00:12:16,040
wrong and especially in big companies

00:12:12,860 --> 00:12:18,800
with big products you have these issues

00:12:16,040 --> 00:12:20,960
that you are ending up in too much

00:12:18,800 --> 00:12:24,380
discussions and that you have to less

00:12:20,960 --> 00:12:27,530
time for doing your job which is coding

00:12:24,380 --> 00:12:30,890
and of course when you have a

00:12:27,530 --> 00:12:33,470
traditional company you notice then most

00:12:30,890 --> 00:12:37,370
of those discussions are politically

00:12:33,470 --> 00:12:39,980
which is even more a mess changing the

00:12:37,370 --> 00:12:42,260
framework is not simple here and also

00:12:39,980 --> 00:12:44,390
changing the architecture is not simple

00:12:42,260 --> 00:12:46,790
here so why would you want to do this

00:12:44,390 --> 00:12:49,430
perhaps you want to do this because you

00:12:46,790 --> 00:12:52,100
have to maintain your software for 20

00:12:49,430 --> 00:12:55,130
years and perhaps the framework choice

00:12:52,100 --> 00:12:58,310
or the architecture choice from the last

00:12:55,130 --> 00:13:01,550
years does not work anymore for the next

00:12:58,310 --> 00:13:04,040
use case you have to implement Noble

00:13:01,550 --> 00:13:06,680
knows what happens in some years and no

00:13:04,040 --> 00:13:09,080
one can say that the current decisions

00:13:06,680 --> 00:13:11,750
are accurate for the things we have to

00:13:09,080 --> 00:13:14,390
do in the future so having the

00:13:11,750 --> 00:13:18,410
possibility to change something easily

00:13:14,390 --> 00:13:20,540
is very vital in this case so at the end

00:13:18,410 --> 00:13:22,910
of the day you have a system that is

00:13:20,540 --> 00:13:25,520
hard to change and you cannot invest as

00:13:22,910 --> 00:13:28,610
many time into programming as you would

00:13:25,520 --> 00:13:31,160
like and the idea here is quite simple

00:13:28,610 --> 00:13:34,490
to solve this the idea is to split this

00:13:31,160 --> 00:13:37,250
whole bunch up into several tiny parts

00:13:34,490 --> 00:13:40,790
in the back end we are calling this

00:13:37,250 --> 00:13:43,580
nowadays micro services in the front and

00:13:40,790 --> 00:13:46,580
you could call it a micro app or perhaps

00:13:43,580 --> 00:13:49,190
sometimes micro front ends but the idea

00:13:46,580 --> 00:13:52,730
is the same you have tiny self-contained

00:13:49,190 --> 00:13:55,580
systems that don't need to know much

00:13:52,730 --> 00:13:59,000
about the other systems that even work

00:13:55,580 --> 00:14:01,790
if the other systems are down and of

00:13:59,000 --> 00:14:03,589
course as in software architecture it's

00:14:01,790 --> 00:14:06,020
always the case there are several

00:14:03,589 --> 00:14:08,780
advantages and disadvantages of this

00:14:06,020 --> 00:14:11,540
approach one advantage here is that you

00:14:08,780 --> 00:14:12,649
get a separate deployment when you are

00:14:11,540 --> 00:14:15,709
done with your

00:14:12,649 --> 00:14:17,749
part of the system just deployed you

00:14:15,709 --> 00:14:19,850
don't have to wait until all the other

00:14:17,749 --> 00:14:22,459
teams have been done when you are done

00:14:19,850 --> 00:14:25,939
it gets deployed and your users get

00:14:22,459 --> 00:14:29,179
immediately well you get immediately the

00:14:25,939 --> 00:14:33,050
new version you can mix and match

00:14:29,179 --> 00:14:35,569
technologies not because you want to but

00:14:33,050 --> 00:14:37,999
because you have to when it comes to

00:14:35,569 --> 00:14:41,779
software that means to maintain for 10

00:14:37,999 --> 00:14:43,850
or 20 years you have less coordination

00:14:41,779 --> 00:14:46,519
less politically motivate the

00:14:43,850 --> 00:14:49,339
discussions with other teams and you are

00:14:46,519 --> 00:14:53,050
decreasing your complexity because you

00:14:49,339 --> 00:14:56,689
are working on a very tiny thing that is

00:14:53,050 --> 00:15:00,619
that is focused on one kind of use cases

00:14:56,689 --> 00:15:03,709
on the other side you will end up with a

00:15:00,619 --> 00:15:06,199
highly distributed system that means you

00:15:03,709 --> 00:15:08,179
have to take care about communication in

00:15:06,199 --> 00:15:11,360
the process communication about

00:15:08,179 --> 00:15:14,300
providing API is rest services and so on

00:15:11,360 --> 00:15:16,790
and so forth you are ending up with

00:15:14,300 --> 00:15:19,999
distributed data because you have

00:15:16,790 --> 00:15:22,069
separate applications and so each of

00:15:19,999 --> 00:15:26,179
them can have a data store of its own

00:15:22,069 --> 00:15:29,059
and you have to deal with UI composition

00:15:26,179 --> 00:15:32,899
UI composition means that you have to

00:15:29,059 --> 00:15:35,929
present your 50 micro apps as a common

00:15:32,899 --> 00:15:39,529
big thing to the user because the user

00:15:35,929 --> 00:15:42,139
is not interested in having 50 micro

00:15:39,529 --> 00:15:46,040
apps he or she isn't interested into

00:15:42,139 --> 00:15:48,110
starting 50 apps every morning we as

00:15:46,040 --> 00:15:50,629
programmers are interested into this

00:15:48,110 --> 00:15:52,870
because of all those advantages here and

00:15:50,629 --> 00:15:58,549
so you need to find a way to integrate

00:15:52,870 --> 00:16:01,579
everything into a common system as you

00:15:58,549 --> 00:16:04,100
might imagine distributed systems and

00:16:01,579 --> 00:16:07,459
distributed data is something that is

00:16:04,100 --> 00:16:11,600
concerned to services programmers your

00:16:07,459 --> 00:16:13,730
composition has to be done within the UI

00:16:11,600 --> 00:16:17,059
layer I think that's why we are calling

00:16:13,730 --> 00:16:20,269
it your high composition and for this we

00:16:17,059 --> 00:16:23,389
have several possibilities I will start

00:16:20,269 --> 00:16:25,140
here with the most simple one it's about

00:16:23,389 --> 00:16:28,130
using hyperlinks

00:16:25,140 --> 00:16:31,350
they have been around for 20 years and

00:16:28,130 --> 00:16:33,330
to be honest I have never ever heard

00:16:31,350 --> 00:16:35,880
someone to say a bad word about

00:16:33,330 --> 00:16:39,360
hyperlinks so this seems to be a major

00:16:35,880 --> 00:16:41,459
technology the idea here is that we are

00:16:39,360 --> 00:16:44,339
ending up with several single page

00:16:41,459 --> 00:16:48,149
applications and they are connected to

00:16:44,339 --> 00:16:50,430
each other using hyperlinks and if you

00:16:48,149 --> 00:16:53,370
are looking for an example the whole

00:16:50,430 --> 00:16:54,839
Google suite is such an example for

00:16:53,370 --> 00:16:57,720
instance when you look at Google Maps

00:16:54,839 --> 00:17:01,230
you see one micro app that is

00:16:57,720 --> 00:17:04,260
specialized into one task into working

00:17:01,230 --> 00:17:08,040
with routes and mapping data or map data

00:17:04,260 --> 00:17:10,890
and when you want to have another part

00:17:08,040 --> 00:17:13,740
of the Google suit then you click this

00:17:10,890 --> 00:17:16,260
menu here and then you can use those

00:17:13,740 --> 00:17:18,240
hyperlinks that lead you to other parts

00:17:16,260 --> 00:17:20,670
of the Google suite then of course

00:17:18,240 --> 00:17:24,059
another single page application will be

00:17:20,670 --> 00:17:27,120
loaded by the way the most important

00:17:24,059 --> 00:17:29,820
aspect of this whole presentation can be

00:17:27,120 --> 00:17:34,020
found on this slide perhaps you've seen

00:17:29,820 --> 00:17:34,770
it in Germany in Lower Saxony there is a

00:17:34,020 --> 00:17:38,490
city called

00:17:34,770 --> 00:17:40,530
Diavik so I am really putting a lot of

00:17:38,490 --> 00:17:42,300
emphasis into that this is very

00:17:40,530 --> 00:17:44,790
important for me so if you don't

00:17:42,300 --> 00:17:47,490
remember anything of this talk please

00:17:44,790 --> 00:17:49,140
always remember there is a city that has

00:17:47,490 --> 00:17:53,010
the same name like me

00:17:49,140 --> 00:17:55,100
it's called Diavik yeah so now let's go

00:17:53,010 --> 00:17:58,500
on with the boring technically stuff of

00:17:55,100 --> 00:18:00,270
course using hyperlinks is simple but it

00:17:58,500 --> 00:18:02,460
also means you will lose your

00:18:00,270 --> 00:18:05,130
application state when transitioning

00:18:02,460 --> 00:18:08,250
over to another single page application

00:18:05,130 --> 00:18:11,220
and it means you have to load a whole

00:18:08,250 --> 00:18:13,440
new application this which is exactly

00:18:11,220 --> 00:18:16,670
what we wanted to prevent when the

00:18:13,440 --> 00:18:19,380
invented single page applications and

00:18:16,670 --> 00:18:22,530
somehow you have to make sure that you

00:18:19,380 --> 00:18:24,600
have to a consistent look and feel that

00:18:22,530 --> 00:18:28,559
means you have to share some bit sheets

00:18:24,600 --> 00:18:30,929
to provide common styling and a common

00:18:28,559 --> 00:18:34,050
look and feel and this is where the

00:18:30,929 --> 00:18:37,169
cyclic uses for the first time for those

00:18:34,050 --> 00:18:38,010
widgets web components would be a very

00:18:37,169 --> 00:18:41,130
good fit

00:18:38,010 --> 00:18:43,710
because they don't care about your

00:18:41,130 --> 00:18:46,380
current technology that don't care about

00:18:43,710 --> 00:18:50,010
better you are using angular for your

00:18:46,380 --> 00:18:53,100
current single page application or angle

00:18:50,010 --> 00:18:56,100
at chess or vanilla chess are the other

00:18:53,100 --> 00:18:58,110
options I don't think so you can just

00:18:56,100 --> 00:19:01,800
use your components and that's it

00:18:58,110 --> 00:19:04,800
of course sometimes the user to serve

00:19:01,800 --> 00:19:07,560
something better than hyperlinks and in

00:19:04,800 --> 00:19:11,190
those cases we have to provide a shell a

00:19:07,560 --> 00:19:15,180
shell that is capable of loading other

00:19:11,190 --> 00:19:17,430
micro apps on demand and for providing

00:19:15,180 --> 00:19:20,250
shells there are also different

00:19:17,430 --> 00:19:23,370
possibilities and here I will start with

00:19:20,250 --> 00:19:26,220
the most ugly one what do you think what

00:19:23,370 --> 00:19:29,070
is the ugliest possibility to load one

00:19:26,220 --> 00:19:33,480
single page application into the middle

00:19:29,070 --> 00:19:36,690
of another one i frames yeah yeah you

00:19:33,480 --> 00:19:38,660
are right I don't know about you but I

00:19:36,690 --> 00:19:41,880
get a strange feeling in the stomach

00:19:38,660 --> 00:19:44,310
then I'm hearing the word iframe no just

00:19:41,880 --> 00:19:47,610
kidding nowadays I'm seeing a lot of

00:19:44,310 --> 00:19:50,460
iframe based solutions out there mainly

00:19:47,610 --> 00:19:53,040
in the Internet and they have some

00:19:50,460 --> 00:19:56,190
advantages even though they are for sure

00:19:53,040 --> 00:19:59,670
not the most popular element for web

00:19:56,190 --> 00:20:02,850
designers one advantage is it is dropped

00:19:59,670 --> 00:20:05,640
as simple to use an iframe and another

00:20:02,850 --> 00:20:08,790
advantage is it provides the best amount

00:20:05,640 --> 00:20:11,520
of isolation that means that the

00:20:08,790 --> 00:20:13,950
application in the first iframe cannot

00:20:11,520 --> 00:20:16,650
harm applications in other iframes a

00:20:13,950 --> 00:20:20,610
back here does not influence the

00:20:16,650 --> 00:20:23,100
application there a fishy CSS here does

00:20:20,610 --> 00:20:25,140
not influence the layout there and they

00:20:23,100 --> 00:20:27,660
cannot hack each other which is

00:20:25,140 --> 00:20:30,090
especially important when you want to

00:20:27,660 --> 00:20:30,990
provide a plug-in system for partner

00:20:30,090 --> 00:20:34,680
applications

00:20:30,990 --> 00:20:38,460
I have several customers writing I would

00:20:34,680 --> 00:20:40,800
say our RP like systems is AP like

00:20:38,460 --> 00:20:43,560
systems and they're bound to include

00:20:40,800 --> 00:20:46,590
some special modules from third party

00:20:43,560 --> 00:20:47,429
vendors and so the iframe is your the

00:20:46,590 --> 00:20:51,330
best solution

00:20:47,429 --> 00:20:54,299
in terms of security of course it is not

00:20:51,330 --> 00:20:56,940
the most beautiful solution another

00:20:54,299 --> 00:20:59,909
solution for this would be to bootstrap

00:20:56,940 --> 00:21:02,729
several single page applications that

00:20:59,909 --> 00:21:05,909
means you have one index.html and within

00:21:02,729 --> 00:21:08,129
this index.html you will put strap an

00:21:05,909 --> 00:21:10,679
angular application and on demand

00:21:08,129 --> 00:21:13,499
another angular application and on

00:21:10,679 --> 00:21:18,059
demand and angularjs application and so

00:21:13,499 --> 00:21:22,320
on and so forth and this is where the

00:21:18,059 --> 00:21:25,679
circle closes another time because it

00:21:22,320 --> 00:21:28,889
can be a good idea to wrap your mic

00:21:25,679 --> 00:21:31,979
wraps that get loaded into your shell

00:21:28,889 --> 00:21:33,769
into web components it is not the

00:21:31,979 --> 00:21:36,359
typical use case of a web component

00:21:33,769 --> 00:21:38,729
because here you would end up with a

00:21:36,359 --> 00:21:41,549
very coarse-grained at a very big

00:21:38,729 --> 00:21:44,580
backpack component but it has some

00:21:41,549 --> 00:21:48,599
advantages one advantages by doing this

00:21:44,580 --> 00:21:51,659
you get an unified API for the shell the

00:21:48,599 --> 00:21:55,200
shell is not interested in to the

00:21:51,659 --> 00:21:58,559
differences of your frameworks it does

00:21:55,200 --> 00:22:01,529
not want to know that this my crap is

00:21:58,559 --> 00:22:03,869
using angular and therefore it has to

00:22:01,529 --> 00:22:06,299
talk with it in this way and that this

00:22:03,869 --> 00:22:08,489
micro app is using vanilla chess and

00:22:06,299 --> 00:22:12,059
therefore it has to talk with it that

00:22:08,489 --> 00:22:14,639
way we can unify this with web

00:22:12,059 --> 00:22:17,429
components which means we are getting

00:22:14,639 --> 00:22:23,549
something each and every HTML element

00:22:17,429 --> 00:22:26,549
has namely properties and events and it

00:22:23,549 --> 00:22:29,159
is even possible to nest web components

00:22:26,549 --> 00:22:31,589
that means you can use a react component

00:22:29,159 --> 00:22:34,080
in the middle of your angular component

00:22:31,589 --> 00:22:39,019
which is used in the middle of your I

00:22:34,080 --> 00:22:41,820
don't know vanilla chess component and

00:22:39,019 --> 00:22:44,669
another aspect here is I've mentioned it

00:22:41,820 --> 00:22:47,849
before web components can very easily

00:22:44,669 --> 00:22:52,109
get lazy loaded lazy loading was never

00:22:47,849 --> 00:22:54,839
as simple as with web components so when

00:22:52,109 --> 00:22:57,629
doing this we can use web components on

00:22:54,839 --> 00:23:00,690
two levels of our architecture the first

00:22:57,629 --> 00:23:03,420
level is what I'm calling the Mac rack

00:23:00,690 --> 00:23:06,150
it's about the queue between your mic

00:23:03,420 --> 00:23:08,910
wraps the part that is holding your

00:23:06,150 --> 00:23:12,450
micro apps together you can also call it

00:23:08,910 --> 00:23:14,610
the host or the shell and the second

00:23:12,450 --> 00:23:17,910
level is about sharing widgets I'm

00:23:14,610 --> 00:23:21,480
calling this the micro level or the

00:23:17,910 --> 00:23:24,660
level with the shared widgets and in

00:23:21,480 --> 00:23:26,550
general it is good to separate those

00:23:24,660 --> 00:23:29,850
levels when doing architectural

00:23:26,550 --> 00:23:31,920
discussions because otherwise you will

00:23:29,850 --> 00:23:34,950
end up in cycles when doing those

00:23:31,920 --> 00:23:37,560
discussions the fact here is you can use

00:23:34,950 --> 00:23:40,380
completely different solutions for those

00:23:37,560 --> 00:23:43,230
two levels for instance here at macro

00:23:40,380 --> 00:23:45,780
level you could also use iframes or

00:23:43,230 --> 00:23:49,200
hyperlinks and that micro level you

00:23:45,780 --> 00:23:52,880
could also use angular components

00:23:49,200 --> 00:23:56,820
provided via a Manu repo or angular

00:23:52,880 --> 00:24:01,020
components provided via and BM packages

00:23:56,820 --> 00:24:04,050
and so on and so forth okay enough for

00:24:01,020 --> 00:24:10,770
theory let's have a look at a sample

00:24:04,050 --> 00:24:16,100
application I have prepared no here it

00:24:10,770 --> 00:24:19,250
is this is my sample application

00:24:16,100 --> 00:24:23,160
obviously doc between abhi service and

00:24:19,250 --> 00:24:27,630
this application is just a shell when

00:24:23,160 --> 00:24:30,750
I'm clicking here for instance a whole

00:24:27,630 --> 00:24:33,360
new angular application that was wrapped

00:24:30,750 --> 00:24:36,350
as a web component is loaded here on

00:24:33,360 --> 00:24:39,660
demand and when I'm clicking there

00:24:36,350 --> 00:24:42,330
another separate angular application is

00:24:39,660 --> 00:24:47,040
loaded on demand you can even use

00:24:42,330 --> 00:24:48,930
routing here and you can even start

00:24:47,040 --> 00:24:52,110
those applications in standalone mode

00:24:48,930 --> 00:24:55,140
that means you can test them separately

00:24:52,110 --> 00:24:57,750
you can develop on them separately you

00:24:55,140 --> 00:25:00,240
can create your own decisions and then

00:24:57,750 --> 00:25:03,540
you are done just deploy it the shell

00:25:00,240 --> 00:25:06,150
will load it so in this case the shell

00:25:03,540 --> 00:25:08,490
is nothing else than a browser within

00:25:06,150 --> 00:25:09,440
your browser something that make sure

00:25:08,490 --> 00:25:12,799
that you

00:25:09,440 --> 00:25:17,240
and seamlessly switch between your apps

00:25:12,799 --> 00:25:21,799
so now let's click here to payment well

00:25:17,240 --> 00:25:25,250
what's this I promise you I have never

00:25:21,799 --> 00:25:28,639
seen this icon before I don't know what

00:25:25,250 --> 00:25:32,480
this icon is about but in my point of

00:25:28,639 --> 00:25:36,679
view this really shows that now we can

00:25:32,480 --> 00:25:40,340
mix and match technologies and let me

00:25:36,679 --> 00:25:43,490
also click here here I'm loading a

00:25:40,340 --> 00:25:47,950
traditional angularjs application who is

00:25:43,490 --> 00:25:52,250
still using angularjs some of you okay

00:25:47,950 --> 00:25:56,360
so using a micro app architecture could

00:25:52,250 --> 00:25:58,610
be one way to get away from your angle

00:25:56,360 --> 00:26:03,320
at chess development to something that's

00:25:58,610 --> 00:26:06,230
you it even works a bit nice in some

00:26:03,320 --> 00:26:09,250
cases than ng upgrade which really in

00:26:06,230 --> 00:26:14,809
dominguez angular one with angular 2

00:26:09,250 --> 00:26:17,029
quite hardly quite quite hard so this is

00:26:14,809 --> 00:26:19,009
what I'm calling the macro architecture

00:26:17,029 --> 00:26:19,580
it's about the queue between the my

00:26:19,009 --> 00:26:22,309
craps

00:26:19,580 --> 00:26:25,549
it's about loading micro apps into a

00:26:22,309 --> 00:26:27,860
shell but we can also use micro

00:26:25,549 --> 00:26:31,370
architecture here for instance when I'm

00:26:27,860 --> 00:26:33,950
clicking here or there I'm reusing bit

00:26:31,370 --> 00:26:36,159
shots from the other clients that means

00:26:33,950 --> 00:26:40,250
now I can do something like you I

00:26:36,159 --> 00:26:44,419
composition and UI integration sometimes

00:26:40,250 --> 00:26:46,490
a tiny part of one use case has also be

00:26:44,419 --> 00:26:49,429
to be a part of another use case and

00:26:46,490 --> 00:26:51,110
that's what's possible here because web

00:26:49,429 --> 00:26:53,870
components can be nested

00:26:51,110 --> 00:26:55,789
for instance here I'm using a web

00:26:53,870 --> 00:26:59,779
component created with the green

00:26:55,789 --> 00:27:05,539
technology with a neighbor remember its

00:26:59,779 --> 00:27:08,690
name with vanilla chess or something

00:27:05,539 --> 00:27:11,600
that has been created alongside my blue

00:27:08,690 --> 00:27:16,389
angola clients my angular client that

00:27:11,600 --> 00:27:16,389
can be reached using this hyperlink here

00:27:16,450 --> 00:27:19,450
awesome

00:27:19,790 --> 00:27:29,910
of course we've discussed now several

00:27:24,930 --> 00:27:32,430
approaches for creating my craps and now

00:27:29,910 --> 00:27:37,380
the question is which approach is the

00:27:32,430 --> 00:27:39,870
right one for my project and the answer

00:27:37,380 --> 00:27:43,110
is a typically consultancy answer it's

00:27:39,870 --> 00:27:47,010
depends it really depends and the issue

00:27:43,110 --> 00:27:49,670
here is that when we are honest every

00:27:47,010 --> 00:27:52,710
one of us just wants to have all the

00:27:49,670 --> 00:27:54,270
advantages of those concepts no one of

00:27:52,710 --> 00:27:56,520
us wants to have one of the

00:27:54,270 --> 00:27:59,100
disadvantages of using hyperlinks of

00:27:56,520 --> 00:28:01,920
using iframes of using web components

00:27:59,100 --> 00:28:04,620
and that's why when doing those

00:28:01,920 --> 00:28:07,290
discussions with my customers and very

00:28:04,620 --> 00:28:10,950
open ending up in discussion cycles and

00:28:07,290 --> 00:28:13,680
to break those cycles I had the idea of

00:28:10,950 --> 00:28:16,680
creating a decision tree a decision tree

00:28:13,680 --> 00:28:17,460
that helps us to identify a first

00:28:16,680 --> 00:28:20,400
fitting

00:28:17,460 --> 00:28:22,800
architectural candidate of course it is

00:28:20,400 --> 00:28:26,340
not the last word on this but it proved

00:28:22,800 --> 00:28:28,680
to be in handy the first question I

00:28:26,340 --> 00:28:32,400
would ask you is do you have a lot of

00:28:28,680 --> 00:28:35,340
shared state and to the users needs to

00:28:32,400 --> 00:28:38,670
move around between the micro absolute

00:28:35,340 --> 00:28:42,120
thus one use case involve a lot of my

00:28:38,670 --> 00:28:45,090
crabs and if you say no this is not the

00:28:42,120 --> 00:28:47,850
case not a lot of shared State and the

00:28:45,090 --> 00:28:50,160
users don't need to switch to my crab

00:28:47,850 --> 00:28:53,370
within a news case then go with

00:28:50,160 --> 00:28:56,070
hyperlinks create several tiny single

00:28:53,370 --> 00:28:58,620
page applications because here the

00:28:56,070 --> 00:29:02,040
chance is high that they don't need to

00:28:58,620 --> 00:29:06,060
interact with each other if you say hey

00:29:02,040 --> 00:29:08,280
here a lot of a lot of things are going

00:29:06,060 --> 00:29:10,830
on they have a lot of shared States we

00:29:08,280 --> 00:29:13,400
have a lot of navigation then the next

00:29:10,830 --> 00:29:17,760
question is do you have to integrate

00:29:13,400 --> 00:29:22,110
legacy applications like PHP like

00:29:17,760 --> 00:29:25,770
asp.net like JavaServer faces or do you

00:29:22,110 --> 00:29:29,070
need a very very very very strong

00:29:25,770 --> 00:29:31,480
isolation because of integrating

00:29:29,070 --> 00:29:35,639
plug-ins from third-party vendors

00:29:31,480 --> 00:29:38,919
and then the answer would be try iframes

00:29:35,639 --> 00:29:42,370
even though we all know that we will not

00:29:38,919 --> 00:29:44,919
been an architectural award for using

00:29:42,370 --> 00:29:46,960
iframes and even though we know that

00:29:44,919 --> 00:29:50,289
this is not a good fit for public

00:29:46,960 --> 00:29:53,320
websites you will not write the next

00:29:50,289 --> 00:29:55,360
Amazon using iframes of course but it

00:29:53,320 --> 00:29:59,799
can be fitting for an internal

00:29:55,360 --> 00:30:02,950
application a CRM system or an RV system

00:29:59,799 --> 00:30:05,100
or something like this if you say no I

00:30:02,950 --> 00:30:08,289
don't need this I don't have legacy I'm

00:30:05,100 --> 00:30:11,289
rewriting my code every second week then

00:30:08,289 --> 00:30:14,740
the next question is do you even need a

00:30:11,289 --> 00:30:18,010
separate deployment do you even need to

00:30:14,740 --> 00:30:21,610
mix and match technologies and when you

00:30:18,010 --> 00:30:24,880
say yes then wrap your micro apps in web

00:30:21,610 --> 00:30:27,250
components and load them on the mat if

00:30:24,880 --> 00:30:30,820
you say no this is not needed

00:30:27,250 --> 00:30:33,100
I don't need separate deployments I just

00:30:30,820 --> 00:30:35,649
want to have Angola and I want to get

00:30:33,100 --> 00:30:38,950
happy with Angola then create a monolith

00:30:35,649 --> 00:30:42,549
which is just a nice new term for a

00:30:38,950 --> 00:30:45,309
traditional big application and of

00:30:42,549 --> 00:30:48,279
course something could help here when

00:30:45,309 --> 00:30:51,399
creating a monolith namely using

00:30:48,279 --> 00:30:54,340
libraries subdividing your your monolith

00:30:51,399 --> 00:30:58,360
into tiny libraries and subdividing it

00:30:54,340 --> 00:31:01,269
with a mono repository a mono repository

00:30:58,360 --> 00:31:06,100
is just a big application that consists

00:31:01,269 --> 00:31:07,929
of tiny sub projects but as the self men

00:31:06,100 --> 00:31:13,830
see it in the polemics

00:31:07,929 --> 00:31:19,269
ads on TV this is a whole other story so

00:31:13,830 --> 00:31:21,700
let me come to a conclusion when you are

00:31:19,269 --> 00:31:24,130
going with web components then you can

00:31:21,700 --> 00:31:27,399
decouple yourself from a current

00:31:24,130 --> 00:31:29,980
framework and when you go with my crabs

00:31:27,399 --> 00:31:34,590
then you can even decouple teams and

00:31:29,980 --> 00:31:37,690
projects they can work individually and

00:31:34,590 --> 00:31:40,059
when you are combining web components

00:31:37,690 --> 00:31:41,350
and my crabs I guarantee you beautiful

00:31:40,059 --> 00:31:44,860
things will happen

00:31:41,350 --> 00:31:47,289
and on the other side you can also

00:31:44,860 --> 00:31:49,480
choose the best technology for a current

00:31:47,289 --> 00:31:52,570
project when going with my crabs because

00:31:49,480 --> 00:31:57,039
you can do an own technology decision

00:31:52,570 --> 00:31:59,650
for your current use case so thanks for

00:31:57,039 --> 00:32:02,169
having me here you find my coordinates

00:31:59,650 --> 00:32:05,740
you can download my slides and my

00:32:02,169 --> 00:32:09,250
example on my blog you also find a whole

00:32:05,740 --> 00:32:11,559
block at Italy about this and perhaps if

00:32:09,250 --> 00:32:13,929
you are interested in those topics in

00:32:11,559 --> 00:32:17,289
our workshops we will address this topic

00:32:13,929 --> 00:32:20,409
as well as also other topics next month

00:32:17,289 --> 00:32:22,590
in Vienna or in house any time so thanks

00:32:20,409 --> 00:32:25,190
for having me and

00:32:22,590 --> 00:32:25,190

YouTube URL: https://www.youtube.com/watch?v=svU48oFZ2nc


