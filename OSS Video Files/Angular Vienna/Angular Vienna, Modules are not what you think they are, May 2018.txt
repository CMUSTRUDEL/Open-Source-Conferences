Title: Angular Vienna, Modules are not what you think they are, May 2018
Publication date: 2018-05-15
Playlist: Angular Vienna
Description: 
	Talk by Maxim Koretskyi,

Some developers believe that Angular has different types of modules like shared, feature or routing module. They’d be surprised to learn that Angular has none. Using a simple application, this talk will demonstrate how Angular uses a compiler to merge all modules into a single injector. We’ll learn where lazy loaded modules fit into this picture and why modules hierarchy and encapsulation simply don’t exist at runtime. By the end of the talk, you’ll have enough knowledge to avoid unexpected results and will be able to link, load or compile modules like a pro.
Captions: 
	00:00:00,030 --> 00:00:12,240
let me open up so yeah this is me my

00:00:05,759 --> 00:00:16,529
name is Max I also go by the name Acer

00:00:12,240 --> 00:00:19,740
right it's in case it doesn't work out

00:00:16,529 --> 00:00:22,310
with speakers yeah

00:00:19,740 --> 00:00:26,369
so I also go by the name in G wizard and

00:00:22,310 --> 00:00:30,960
how many of you guys look at angular

00:00:26,369 --> 00:00:36,030
sources or have taken a look oh cool so

00:00:30,960 --> 00:00:37,980
many people yeah so now I've come here

00:00:36,030 --> 00:00:41,100
to tell you one important thing as well

00:00:37,980 --> 00:00:43,710
I have an addiction which is I'm

00:00:41,100 --> 00:00:46,379
addicted to reading sources probably

00:00:43,710 --> 00:00:50,250
like some of you here and in particular

00:00:46,379 --> 00:00:53,160
angular sources so over time I have come

00:00:50,250 --> 00:00:58,020
to a conclusion that it's not such a bad

00:00:53,160 --> 00:01:00,719
thing after all you can greatly benefit

00:00:58,020 --> 00:01:02,899
from it and today I'm about to show to

00:01:00,719 --> 00:01:05,760
you and about to prove it to you

00:01:02,899 --> 00:01:09,930
we will be talking about today about

00:01:05,760 --> 00:01:12,299
angular modules and the thing about them

00:01:09,930 --> 00:01:15,869
is that sometimes they are really

00:01:12,299 --> 00:01:17,490
confusing right how many people agree

00:01:15,869 --> 00:01:23,909
that angular modules are really

00:01:17,490 --> 00:01:26,490
confusing oh not many really okay well

00:01:23,909 --> 00:01:29,340
when I first started to use them in non

00:01:26,490 --> 00:01:32,579
trivial scenarios I found a few things

00:01:29,340 --> 00:01:35,310
puzzling for example we all know that we

00:01:32,579 --> 00:01:38,189
have encapsulation four components in

00:01:35,310 --> 00:01:41,000
templates right however there is no

00:01:38,189 --> 00:01:44,700
encapsulation for dynamic components and

00:01:41,000 --> 00:01:45,509
providers okay why is that we will find

00:01:44,700 --> 00:01:50,310
out today

00:01:45,509 --> 00:01:52,829
then there is no module hierarchy really

00:01:50,310 --> 00:01:55,470
we have some modules that import others

00:01:52,829 --> 00:01:59,700
however there is no hierarchy between

00:01:55,470 --> 00:02:02,579
them and also most tutorials on the web

00:01:59,700 --> 00:02:06,119
can make you think that eager and lazy

00:02:02,579 --> 00:02:08,300
loaded modules are different types but

00:02:06,119 --> 00:02:11,770
in reality they are exactly the same

00:02:08,300 --> 00:02:16,810
again we will see it today

00:02:11,770 --> 00:02:18,310
okay so what we'll learn is that we'll

00:02:16,810 --> 00:02:21,070
learn about the relationship between

00:02:18,310 --> 00:02:23,890
modules and injectors and specifically I

00:02:21,070 --> 00:02:30,310
will show you how modules are converted

00:02:23,890 --> 00:02:32,320
into injectors and to do that I'll tell

00:02:30,310 --> 00:02:37,840
you about my experience reverse

00:02:32,320 --> 00:02:41,110
engineering angular and the I did that

00:02:37,840 --> 00:02:43,930
while working on the application and an

00:02:41,110 --> 00:02:47,200
extension mechanism for plug-in based

00:02:43,930 --> 00:02:50,890
application so again I'll share with you

00:02:47,200 --> 00:02:55,360
some insights today into building a

00:02:50,890 --> 00:02:57,520
platform with angular okay so let's get

00:02:55,360 --> 00:02:59,800
started then the application I was

00:02:57,520 --> 00:03:02,680
working on is similar to a diagram

00:02:59,800 --> 00:03:05,800
designer so we have a bunch of widgets

00:03:02,680 --> 00:03:08,890
in a toolbox and each widget has its own

00:03:05,800 --> 00:03:11,410
behavior and properties to draw a

00:03:08,890 --> 00:03:14,860
diagram is simply drop a widget on a

00:03:11,410 --> 00:03:17,560
canvas okay where this application is

00:03:14,860 --> 00:03:20,560
interesting is that the default set of

00:03:17,560 --> 00:03:23,290
widgets in an application can be

00:03:20,560 --> 00:03:26,020
extended with widgets implemented by

00:03:23,290 --> 00:03:28,780
third-party developers which basically

00:03:26,020 --> 00:03:31,210
makes this application an extensible

00:03:28,780 --> 00:03:32,950
platform okay

00:03:31,210 --> 00:03:35,550
this diagram illustrates the

00:03:32,950 --> 00:03:39,100
relationship between the platform and

00:03:35,550 --> 00:03:41,110
extension modules so developers

00:03:39,100 --> 00:03:44,170
implement widgets these extendable

00:03:41,110 --> 00:03:46,860
widgets as angular components and then

00:03:44,170 --> 00:03:49,410
they package them in angular modules

00:03:46,860 --> 00:03:51,850
right according to the angle

00:03:49,410 --> 00:03:56,020
documentation these modules are referred

00:03:51,850 --> 00:03:58,000
to as feature widget modules right but I

00:03:56,020 --> 00:04:00,520
refer to them simply as extension

00:03:58,000 --> 00:04:03,580
modules so you can see here two

00:04:00,520 --> 00:04:07,480
extension modules with widgets that are

00:04:03,580 --> 00:04:09,910
used to extend the platform one of the

00:04:07,480 --> 00:04:12,490
biggest challenges when working on this

00:04:09,910 --> 00:04:15,520
application was the implementation of an

00:04:12,490 --> 00:04:18,910
extension mechanism so specifically the

00:04:15,520 --> 00:04:22,780
question that I asked myself was how to

00:04:18,910 --> 00:04:25,340
load and render widgets implemented by

00:04:22,780 --> 00:04:29,370
third-party developers

00:04:25,340 --> 00:04:32,430
okay now you may be thinking now that

00:04:29,370 --> 00:04:35,730
it's easy but let me show you why it was

00:04:32,430 --> 00:04:37,500
really challenging and to do that I'll

00:04:35,730 --> 00:04:39,890
use angular material library as an

00:04:37,500 --> 00:04:43,290
example so you're familiar with it right

00:04:39,890 --> 00:04:46,020
so how do we extend our applications

00:04:43,290 --> 00:04:48,930
with widgets provided by the library we

00:04:46,020 --> 00:04:50,790
simply import an extension module with

00:04:48,930 --> 00:04:52,590
required widgets right and then we can

00:04:50,790 --> 00:04:55,470
use these widgets in our components

00:04:52,590 --> 00:04:59,130
template okay there are two important

00:04:55,470 --> 00:05:02,370
things to note here first is that we

00:04:59,130 --> 00:05:04,770
know exactly which widgets are provided

00:05:02,370 --> 00:05:06,750
by an extension module right in this

00:05:04,770 --> 00:05:09,660
case what is the name of the widget that

00:05:06,750 --> 00:05:12,480
is provided by the module it's the

00:05:09,660 --> 00:05:15,900
button right if it's matpat module

00:05:12,480 --> 00:05:19,440
correct and second since we import these

00:05:15,900 --> 00:05:21,600
modules explicitly we know exactly which

00:05:19,440 --> 00:05:24,120
modules will be used as part of our

00:05:21,600 --> 00:05:26,160
application right so we import this

00:05:24,120 --> 00:05:29,310
module explicitly this will be part of

00:05:26,160 --> 00:05:31,680
our application however in the

00:05:29,310 --> 00:05:35,070
application that I was working on all

00:05:31,680 --> 00:05:37,530
this information was missing since

00:05:35,070 --> 00:05:42,030
developers can put as many widgets as

00:05:37,530 --> 00:05:44,010
they like in an extension module there

00:05:42,030 --> 00:05:46,710
is no information beforehand which

00:05:44,010 --> 00:05:49,050
widgets are provided by an extension

00:05:46,710 --> 00:05:53,010
module right this in contrast to what we

00:05:49,050 --> 00:05:55,980
saw and second each widget can also have

00:05:53,010 --> 00:05:57,840
a server-side implementation so it has

00:05:55,980 --> 00:06:00,990
to be deployed to a server first and

00:05:57,840 --> 00:06:02,730
then the list of widgets to be used in

00:06:00,990 --> 00:06:05,430
an application is generated on the

00:06:02,730 --> 00:06:08,730
server and then can be fetched with an

00:06:05,430 --> 00:06:11,340
API request so there is no information

00:06:08,730 --> 00:06:13,260
about which extension modules to use

00:06:11,340 --> 00:06:15,780
until after the application has

00:06:13,260 --> 00:06:18,690
bootstrap and the data is returned from

00:06:15,780 --> 00:06:21,840
the server which effectively means that

00:06:18,690 --> 00:06:25,740
every single extension module would have

00:06:21,840 --> 00:06:27,930
to be loaded lazily right so these are

00:06:25,740 --> 00:06:30,960
the constraints that I faced and this is

00:06:27,930 --> 00:06:33,720
why extending the application with

00:06:30,960 --> 00:06:36,720
extension modules and widgets was really

00:06:33,720 --> 00:06:38,340
challenging and what do you do when you

00:06:36,720 --> 00:06:41,490
face the difficult

00:06:38,340 --> 00:06:47,340
I don't know about you guys but what I

00:06:41,490 --> 00:06:51,450
do I take vacation and that's exactly

00:06:47,340 --> 00:06:51,810
what I did but this is not how I spent

00:06:51,450 --> 00:06:56,780
it

00:06:51,810 --> 00:07:00,510
I was actually debugging the router

00:06:56,780 --> 00:07:03,510
implementation and why router you may

00:07:00,510 --> 00:07:07,350
ask because if you think about it it

00:07:03,510 --> 00:07:09,930
solves similar problems right it doesn't

00:07:07,350 --> 00:07:12,780
know which routes are provided by

00:07:09,930 --> 00:07:15,480
routing module beforehand yet it still

00:07:12,780 --> 00:07:18,260
needs to somehow retrieve them and add

00:07:15,480 --> 00:07:23,330
them to the global router configuration

00:07:18,260 --> 00:07:27,480
and second sometimes just as I needed

00:07:23,330 --> 00:07:30,710
router lazy loads modules right so this

00:07:27,480 --> 00:07:34,430
was natural choice of debugging for me

00:07:30,710 --> 00:07:34,430
let me show you what I found

00:07:34,710 --> 00:07:39,510
I have removed all the relevant details

00:07:36,630 --> 00:07:42,330
and ended up with just four lines of

00:07:39,510 --> 00:07:45,080
code this code shows what the router

00:07:42,330 --> 00:07:48,480
does to lazy load the module class

00:07:45,080 --> 00:07:52,800
routing module and retrieve the widgets

00:07:48,480 --> 00:07:56,070
from it okay this really a lot of

00:07:52,800 --> 00:07:56,850
information in these four lines let's go

00:07:56,070 --> 00:08:01,640
step by step

00:07:56,850 --> 00:08:05,610
so first router lazy load a module class

00:08:01,640 --> 00:08:08,730
then it compiles it and gets a module

00:08:05,610 --> 00:08:11,040
Factory then this factor is used to

00:08:08,730 --> 00:08:14,190
create an instance of a module and an

00:08:11,040 --> 00:08:18,750
injector and finally it uses the

00:08:14,190 --> 00:08:20,100
injector to retrieve the routes if

00:08:18,750 --> 00:08:23,280
you're looking at this code for the

00:08:20,100 --> 00:08:25,470
first time you are probably confused now

00:08:23,280 --> 00:08:27,510
so it doesn't make much sense to you and

00:08:25,470 --> 00:08:30,390
don't worry it didn't make much sense to

00:08:27,510 --> 00:08:34,050
me as well it took me a lot of time to

00:08:30,390 --> 00:08:37,440
figure everything out here and I will

00:08:34,050 --> 00:08:39,330
explain it to you now and to understand

00:08:37,440 --> 00:08:42,900
this code we have to first understand a

00:08:39,330 --> 00:08:45,090
few important concepts okay so let's

00:08:42,900 --> 00:08:48,030
start with them and we will start with

00:08:45,090 --> 00:08:50,980
the module Factory this is something

00:08:48,030 --> 00:08:54,370
that is widely used inside angular

00:08:50,980 --> 00:08:57,010
I first came across this concept when I

00:08:54,370 --> 00:09:00,810
was exploring the contents of the ng

00:08:57,010 --> 00:09:03,040
folder generated by angular JIT compiler

00:09:00,810 --> 00:09:05,380
right you can see it for itself just

00:09:03,040 --> 00:09:08,320
open the sources tab in the developer

00:09:05,380 --> 00:09:11,170
tools there you will find this fact this

00:09:08,320 --> 00:09:14,529
folder with module and component factors

00:09:11,170 --> 00:09:17,560
inside basically if you have used JIT or

00:09:14,529 --> 00:09:20,440
a sorry out of time compilation you have

00:09:17,560 --> 00:09:23,320
probably seen separate files module

00:09:20,440 --> 00:09:25,120
factory component factory so this is

00:09:23,320 --> 00:09:28,480
exactly the same just generated by the

00:09:25,120 --> 00:09:31,120
JIT compiler now when I started to

00:09:28,480 --> 00:09:34,300
debauch a little bit more I found ng

00:09:31,120 --> 00:09:37,149
module compiler this is service inside

00:09:34,300 --> 00:09:40,420
angular they takes a module class just

00:09:37,149 --> 00:09:43,750
JavaScript class and generates module

00:09:40,420 --> 00:09:46,690
Factory what is this Factory well

00:09:43,750 --> 00:09:49,360
basically it's just a set of provider

00:09:46,690 --> 00:09:51,970
definitions right we define providers on

00:09:49,360 --> 00:09:54,670
a module class so this Factory contains

00:09:51,970 --> 00:09:57,339
the definitions for these providers and

00:09:54,670 --> 00:10:00,190
also it includes some relevant metadata

00:09:57,339 --> 00:10:03,010
let me give you an example so suppose we

00:10:00,190 --> 00:10:06,790
have some module here and then we have

00:10:03,010 --> 00:10:09,910
two classes a and B right that I used as

00:10:06,790 --> 00:10:12,430
providers so the B class depends on a

00:10:09,910 --> 00:10:15,970
because it injects it an instance of it

00:10:12,430 --> 00:10:18,279
in a constructor so when angular ng

00:10:15,970 --> 00:10:22,230
module compiler takes this module class

00:10:18,279 --> 00:10:24,459
and generates the factory the factory

00:10:22,230 --> 00:10:28,740
includes the definitions for these

00:10:24,459 --> 00:10:31,449
providers but it also contains

00:10:28,740 --> 00:10:33,930
dependencies right it specifies the

00:10:31,449 --> 00:10:37,329
metadata about these providers and

00:10:33,930 --> 00:10:40,990
that's exactly what it is just provide

00:10:37,329 --> 00:10:43,959
our definitions and if we get back to

00:10:40,990 --> 00:10:47,889
the router code it's the second line

00:10:43,959 --> 00:10:53,860
that takes a module class and generates

00:10:47,889 --> 00:10:57,100
a module Factory ok the next line shows

00:10:53,860 --> 00:11:02,260
us how this Factory is used to create an

00:10:57,100 --> 00:11:03,699
instance of an of module ok we simply

00:11:02,260 --> 00:11:06,790
call the create method

00:11:03,699 --> 00:11:10,419
the factory and then pass in a parent

00:11:06,790 --> 00:11:13,029
injector what is interesting is that

00:11:10,419 --> 00:11:17,019
when angular creates an instance of a

00:11:13,029 --> 00:11:20,589
module using Factory it also creates an

00:11:17,019 --> 00:11:25,720
instance of an injector that holds the

00:11:20,589 --> 00:11:28,540
providers defined on this module and you

00:11:25,720 --> 00:11:32,279
can access this injector using the dot

00:11:28,540 --> 00:11:36,040
injector property so in angular

00:11:32,279 --> 00:11:40,029
basically a module instance is an

00:11:36,040 --> 00:11:42,730
injector okay

00:11:40,029 --> 00:11:44,859
let's again see let's recap what we've

00:11:42,730 --> 00:11:47,439
just learned so we have a module class

00:11:44,859 --> 00:11:50,019
right we use decorator to click to

00:11:47,439 --> 00:11:53,259
create a module using javascript class

00:11:50,019 --> 00:11:56,589
then using either g it or ahead of time

00:11:53,259 --> 00:11:58,989
compiler we create a module factory

00:11:56,589 --> 00:12:01,419
we've seen this factory with provider

00:11:58,989 --> 00:12:03,459
definitions then we call the create

00:12:01,419 --> 00:12:05,949
method on the factory it's done in

00:12:03,459 --> 00:12:08,079
runtime and we get an instance of an

00:12:05,949 --> 00:12:10,629
injector and an instance of a module

00:12:08,079 --> 00:12:16,899
right and as I mentioned they are the

00:12:10,629 --> 00:12:19,600
same okay so looking at this diagram you

00:12:16,899 --> 00:12:22,809
might be wondering now if every module

00:12:19,600 --> 00:12:25,869
in angular gets its own factory right

00:12:22,809 --> 00:12:29,459
you have five modules some modules

00:12:25,869 --> 00:12:34,569
import others modules do they all get

00:12:29,459 --> 00:12:37,389
factories right let's test this so here

00:12:34,569 --> 00:12:40,859
I have two module classes a and B with

00:12:37,389 --> 00:12:47,139
some providers then have the app module

00:12:40,859 --> 00:12:49,239
that imports module a and module B this

00:12:47,139 --> 00:12:51,609
is the module that will be compiled and

00:12:49,239 --> 00:12:53,589
instantiated when angular bootstraps I

00:12:51,609 --> 00:12:56,470
kind of do one app module that you

00:12:53,589 --> 00:12:59,619
usually have in your applications so can

00:12:56,470 --> 00:13:05,499
you guess how many factories will be

00:12:59,619 --> 00:13:07,239
created any ideas three factories we

00:13:05,499 --> 00:13:13,659
have we will have either three factories

00:13:07,239 --> 00:13:17,759
or one right okay so if you were silent

00:13:13,659 --> 00:13:21,399
but guest one you got it right

00:13:17,759 --> 00:13:24,009
so the three is a wrong answer

00:13:21,399 --> 00:13:26,259
well actually angular creates factories

00:13:24,009 --> 00:13:31,170
only for the modules that are being

00:13:26,259 --> 00:13:33,639
compiled it does not create modules 4

00:13:31,170 --> 00:13:38,680
does not create factories for modules

00:13:33,639 --> 00:13:41,410
that are imported ok but the interesting

00:13:38,680 --> 00:13:44,800
thing is that of course providers from

00:13:41,410 --> 00:13:49,569
the imported modules are included in

00:13:44,800 --> 00:13:52,149
this factoring right so here we have B a

00:13:49,569 --> 00:13:55,959
and B B providers in the imported

00:13:52,149 --> 00:13:59,610
modules and we also have definitions for

00:13:55,959 --> 00:14:05,439
these providers in a factory makes sense

00:13:59,610 --> 00:14:09,249
cool incidentally the factory also

00:14:05,439 --> 00:14:12,069
contains provider definitions for module

00:14:09,249 --> 00:14:14,230
classes to make them injectable so you

00:14:12,069 --> 00:14:16,930
can inject an instance of one module

00:14:14,230 --> 00:14:19,689
class into the other this is a

00:14:16,930 --> 00:14:26,649
lesser-known feature I think really few

00:14:19,689 --> 00:14:28,689
people use it but it's there ok so what

00:14:26,649 --> 00:14:30,970
we can learn from that is that it

00:14:28,689 --> 00:14:33,850
doesn't matter how many modules you

00:14:30,970 --> 00:14:36,850
import one into the other right in the

00:14:33,850 --> 00:14:39,970
end you will still have only one module

00:14:36,850 --> 00:14:43,019
factory that will be used to create one

00:14:39,970 --> 00:14:45,939
instance of a module and an injector

00:14:43,019 --> 00:14:49,750
this is this injector is usually

00:14:45,939 --> 00:14:53,589
referred to as route injector write or

00:14:49,750 --> 00:14:57,610
app module injector so now that we learn

00:14:53,589 --> 00:15:00,000
that let's get back to our confusions so

00:14:57,610 --> 00:15:02,649
I told you that there is no

00:15:00,000 --> 00:15:05,470
encapsulation for dynamic components and

00:15:02,649 --> 00:15:07,629
providers right why is that well because

00:15:05,470 --> 00:15:09,910
after the calculation you don't have

00:15:07,629 --> 00:15:12,189
several modules right as we just learned

00:15:09,910 --> 00:15:15,040
you have only one instance of a module

00:15:12,189 --> 00:15:17,410
and an injector and during the

00:15:15,040 --> 00:15:20,829
compilation the program

00:15:17,410 --> 00:15:23,559
yeah the compiler cannot know where in

00:15:20,829 --> 00:15:25,899
how you will be using dynamic components

00:15:23,559 --> 00:15:30,189
and providers right it doesn't know your

00:15:25,899 --> 00:15:30,970
runtime context after the compilation

00:15:30,189 --> 00:15:33,550
you don't have to

00:15:30,970 --> 00:15:35,519
all modules so basically during the

00:15:33,550 --> 00:15:39,009
compilation it cannot control

00:15:35,519 --> 00:15:40,899
encapsulation so we do not have this

00:15:39,009 --> 00:15:44,410
feature for dynamic components and

00:15:40,899 --> 00:15:47,470
providers ok I also told you that there

00:15:44,410 --> 00:15:50,439
is no module hierarchy between imported

00:15:47,470 --> 00:15:52,720
modules right again you know why we

00:15:50,439 --> 00:15:55,839
don't have several modules how can we

00:15:52,720 --> 00:15:58,449
have hierarchy if we don't have multiple

00:15:55,839 --> 00:16:02,110
modules we have only one single module

00:15:58,449 --> 00:16:05,379
and which and I showed you the process

00:16:02,110 --> 00:16:09,040
of compilation and instantiation of a

00:16:05,379 --> 00:16:11,560
module and both eager and lazy loaded

00:16:09,040 --> 00:16:13,629
modules go through that process it's

00:16:11,560 --> 00:16:17,050
exactly the same the same ng module

00:16:13,629 --> 00:16:20,529
compiler class is used to compile eager

00:16:17,050 --> 00:16:26,259
and lazy loaded module ok

00:16:20,529 --> 00:16:28,269
so we've done with theory let's get back

00:16:26,259 --> 00:16:31,089
to the process and the question that we

00:16:28,269 --> 00:16:33,699
started with right how do we lazy load

00:16:31,089 --> 00:16:35,949
and render we just implemented by

00:16:33,699 --> 00:16:37,689
third-party developers right there was

00:16:35,949 --> 00:16:40,329
the question so let's see the process

00:16:37,689 --> 00:16:42,579
that I came up with and as you might

00:16:40,329 --> 00:16:46,300
expect it will be quite similar to what

00:16:42,579 --> 00:16:49,839
the router does yep so we'll all the

00:16:46,300 --> 00:16:54,870
module class first okay then we compile

00:16:49,839 --> 00:16:57,399
it and get a module Factory

00:16:54,870 --> 00:17:00,699
interestingly this particular process

00:16:57,399 --> 00:17:03,910
can be optimized by first compile in a

00:17:00,699 --> 00:17:07,240
module class during built I'm using

00:17:03,910 --> 00:17:10,030
ahead of time compilation and then you

00:17:07,240 --> 00:17:12,970
can load this module factory directly to

00:17:10,030 --> 00:17:15,159
a browser so no need to use JIT

00:17:12,970 --> 00:17:18,909
compilation right this will be faster

00:17:15,159 --> 00:17:22,209
this is actually what we do in the

00:17:18,909 --> 00:17:25,120
application I'm working on so once you

00:17:22,209 --> 00:17:27,220
have a module factory what can you do

00:17:25,120 --> 00:17:30,400
with it you can create an instance of an

00:17:27,220 --> 00:17:34,630
injector right so we create module

00:17:30,400 --> 00:17:39,010
instance and an injector if you ever

00:17:34,630 --> 00:17:44,170
wondered what is lazy loading it's

00:17:39,010 --> 00:17:46,660
exactly these four steps precisely

00:17:44,170 --> 00:17:48,970
or the module class compile it get a

00:17:46,660 --> 00:17:53,710
module factory and creates an instance

00:17:48,970 --> 00:17:56,830
of an injector okay once we have an

00:17:53,710 --> 00:17:59,620
injector well it's easy to use it to

00:17:56,830 --> 00:18:00,280
retrieve providers defined on that

00:17:59,620 --> 00:18:03,880
module

00:18:00,280 --> 00:18:06,580
right and somehow I need to read three

00:18:03,880 --> 00:18:10,120
widgets provided by this extension

00:18:06,580 --> 00:18:14,500
modules so this one more step to figure

00:18:10,120 --> 00:18:19,180
out and again we can use the router

00:18:14,500 --> 00:18:22,240
implementation as a source of truth you

00:18:19,180 --> 00:18:24,520
all know that the router implements

00:18:22,240 --> 00:18:25,930
static methods for route and for child

00:18:24,520 --> 00:18:29,470
right you probably use them in your

00:18:25,930 --> 00:18:34,210
applications and these methods take

00:18:29,470 --> 00:18:36,040
router definitions so under the hood the

00:18:34,210 --> 00:18:38,980
router simply registers them as

00:18:36,040 --> 00:18:41,140
providers using the specific token

00:18:38,980 --> 00:18:43,930
routes there's no magic inside doesn't

00:18:41,140 --> 00:18:47,530
do anything interesting just registers

00:18:43,930 --> 00:18:49,840
them as providers and then when this

00:18:47,530 --> 00:18:53,080
router and module is compiled to an

00:18:49,840 --> 00:18:55,240
injector it can use this token and

00:18:53,080 --> 00:18:57,490
retrieve the providers from the widget

00:18:55,240 --> 00:19:03,160
now I'm sorry from from the module and

00:18:57,490 --> 00:19:06,130
injector so I can use the same here I

00:19:03,160 --> 00:19:10,690
have one widget implemented as component

00:19:06,130 --> 00:19:13,600
a one and an extension module a so what

00:19:10,690 --> 00:19:15,970
I'm doing just what the router does

00:19:13,600 --> 00:19:18,490
right I'm simply using the widgets token

00:19:15,970 --> 00:19:22,420
here and I'm registered one provider

00:19:18,490 --> 00:19:25,780
under the widgets token and as a value I

00:19:22,420 --> 00:19:28,230
specify the widget definition with the

00:19:25,780 --> 00:19:32,980
widget name and a component that

00:19:28,230 --> 00:19:35,890
implements this widget again once I load

00:19:32,980 --> 00:19:39,760
this module compile it and instantiate

00:19:35,890 --> 00:19:42,820
it I get an injector then I will do

00:19:39,760 --> 00:19:46,450
injector dealt right to retrieve a

00:19:42,820 --> 00:19:49,000
provider from the injector and pass in

00:19:46,450 --> 00:19:53,070
widgets token and voila

00:19:49,000 --> 00:19:55,720
I get the list of all the widgets

00:19:53,070 --> 00:19:57,820
implemented and provided by the module

00:19:55,720 --> 00:20:01,480
so I do not need

00:19:57,820 --> 00:20:03,940
to know beforehand which widgets are

00:20:01,480 --> 00:20:05,380
provided by an extension module like the

00:20:03,940 --> 00:20:10,240
way we do that

00:20:05,380 --> 00:20:12,490
with material library right so this is

00:20:10,240 --> 00:20:14,770
the process let's take a look at the

00:20:12,490 --> 00:20:19,960
source code I'm sorry the code that I

00:20:14,770 --> 00:20:22,390
used to implement it so we first lower

00:20:19,960 --> 00:20:25,260
the module class right I'm using

00:20:22,390 --> 00:20:28,750
systemjs here but you can use any other

00:20:25,260 --> 00:20:33,070
class loader module water actually there

00:20:28,750 --> 00:20:38,530
is no alternative for systems yes so the

00:20:33,070 --> 00:20:41,320
only one you can use okay now what do I

00:20:38,530 --> 00:20:46,150
do next when I get a smaller class I

00:20:41,320 --> 00:20:50,500
compile it and instantiate it and get an

00:20:46,150 --> 00:20:53,050
injector I think this phrase I compile

00:20:50,500 --> 00:20:54,430
it instantiate it and get an injector

00:20:53,050 --> 00:20:56,590
this is something you will be dreaming

00:20:54,430 --> 00:21:01,920
about today because I've repeated it so

00:20:56,590 --> 00:21:04,870
many times okay so we got an injector

00:21:01,920 --> 00:21:07,900
what do we do with that you see here I'm

00:21:04,870 --> 00:21:09,850
using these widgets token right and then

00:21:07,900 --> 00:21:13,960
I get hold of all the widgets

00:21:09,850 --> 00:21:16,060
implemented by the module so the

00:21:13,960 --> 00:21:19,120
question was how to load and render

00:21:16,060 --> 00:21:22,240
widgets right here I've shown you how to

00:21:19,120 --> 00:21:25,810
load them and get them the only thing

00:21:22,240 --> 00:21:27,640
that's left is to render them and since

00:21:25,810 --> 00:21:30,970
these widgets implemented as angular

00:21:27,640 --> 00:21:32,860
components and loaded dynamically they

00:21:30,970 --> 00:21:34,990
need to be rendered as dynamic

00:21:32,860 --> 00:21:37,780
components now static components found

00:21:34,990 --> 00:21:39,580
in templates right the process of

00:21:37,780 --> 00:21:41,770
dynamic components rendering is quite

00:21:39,580 --> 00:21:44,290
broad right I will not go into much

00:21:41,770 --> 00:21:47,530
details here but if you're interested I

00:21:44,290 --> 00:21:50,200
gave a workshop at ng-conf about two

00:21:47,530 --> 00:21:52,570
hours long when I went into details

00:21:50,200 --> 00:21:54,910
about Dom manipulations all the stuff

00:21:52,570 --> 00:21:57,760
dynamic components rendering so we can

00:21:54,910 --> 00:22:00,940
learn everything from there for now just

00:21:57,760 --> 00:22:04,320
know that to render dynamic component

00:22:00,940 --> 00:22:06,690
you need to get a hold of its factory

00:22:04,320 --> 00:22:09,460
something called component factory and

00:22:06,690 --> 00:22:10,790
once you have this factory you simply

00:22:09,460 --> 00:22:12,920
pass it you

00:22:10,790 --> 00:22:15,410
interview container that will

00:22:12,920 --> 00:22:19,280
instantiate the component and render it

00:22:15,410 --> 00:22:22,880
and to get this factory we use something

00:22:19,280 --> 00:22:26,270
called component factory resolver okay

00:22:22,880 --> 00:22:28,700
that is available on the module instance

00:22:26,270 --> 00:22:29,540
and since we compile module instantiate

00:22:28,700 --> 00:22:32,390
it ourselves

00:22:29,540 --> 00:22:38,230
will already have access to this module

00:22:32,390 --> 00:22:42,500
instance what I want you to do now is

00:22:38,230 --> 00:22:46,670
take a look take a second look at all

00:22:42,500 --> 00:22:50,960
this code and appreciate how much you

00:22:46,670 --> 00:22:54,230
can learn by reverse engineering what is

00:22:50,960 --> 00:22:57,680
there is not documented anywhere this is

00:22:54,230 --> 00:23:00,920
inside the router implementation so if

00:22:57,680 --> 00:23:05,540
you get deep there you can learn a lot

00:23:00,920 --> 00:23:10,940
right and maybe next time when you feel

00:23:05,540 --> 00:23:13,190
in stock and don't have ideas you will

00:23:10,940 --> 00:23:16,100
find that courage that is required to

00:23:13,190 --> 00:23:19,400
get into the sources and maybe you will

00:23:16,100 --> 00:23:19,940
find some helpful ideas and to help you

00:23:19,400 --> 00:23:22,580
with that

00:23:19,940 --> 00:23:24,590
I started angular in-depth publication

00:23:22,580 --> 00:23:29,750
how many of you know about angular in

00:23:24,590 --> 00:23:32,180
depth Oh quite a few go yeah I started

00:23:29,750 --> 00:23:35,480
it with the goal to explain how things

00:23:32,180 --> 00:23:38,660
work under the hood in angular so

00:23:35,480 --> 00:23:41,300
basically not not sure if I can say that

00:23:38,660 --> 00:23:44,330
but this is the only publication that

00:23:41,300 --> 00:23:47,510
publishes articles with direct links to

00:23:44,330 --> 00:23:54,500
the sources when we explain something we

00:23:47,510 --> 00:23:59,120
link to the sources and I thank you fan

00:23:54,500 --> 00:24:01,190
of sources yeah I was really lucky to

00:23:59,120 --> 00:24:03,230
have other people join me in this quest

00:24:01,190 --> 00:24:06,020
so today angular in depths is the

00:24:03,230 --> 00:24:07,970
publication is the place we can find

00:24:06,020 --> 00:24:10,610
explanations for the most challenging

00:24:07,970 --> 00:24:12,470
topics about angular and related

00:24:10,610 --> 00:24:17,840
technologies like rxjs

00:24:12,470 --> 00:24:23,060
and just a month ago we reached our

00:24:17,840 --> 00:24:24,530
first 1 million views really so if you

00:24:23,060 --> 00:24:28,130
want to become an expert in angular

00:24:24,530 --> 00:24:33,080
and you not one of our readers yeah go

00:24:28,130 --> 00:24:34,760
and check it out it will be worth it so

00:24:33,080 --> 00:24:37,640
what I've done is that I have put

00:24:34,760 --> 00:24:39,410
together a demo application that

00:24:37,640 --> 00:24:40,730
demonstrates how to lazy load this

00:24:39,410 --> 00:24:43,130
module how do we implement this

00:24:40,730 --> 00:24:46,210
extension mechanism I talked about today

00:24:43,130 --> 00:24:49,730
and I put it on github do check it out

00:24:46,210 --> 00:24:51,590
also I have written a few articles I've

00:24:49,730 --> 00:24:54,860
written an article on dynamic components

00:24:51,590 --> 00:24:58,340
rendering and dynamic in common

00:24:54,860 --> 00:25:02,260
confusions with modules so again check

00:24:58,340 --> 00:25:06,680
them out you can follow me on twitter

00:25:02,260 --> 00:25:11,780
using this handle I regularly write

00:25:06,680 --> 00:25:14,210
stuff about in-depth sources so I'm in

00:25:11,780 --> 00:25:16,490
the works now and I think tomorrow or

00:25:14,210 --> 00:25:20,330
the day after tomorrow I will publish an

00:25:16,490 --> 00:25:23,510
article about Ivy engine internals I've

00:25:20,330 --> 00:25:25,750
reversed engineer it and I'm comparing

00:25:23,510 --> 00:25:27,490
it to the current implementation

00:25:25,750 --> 00:25:32,060
specifically change detection

00:25:27,490 --> 00:25:34,070
compilation process so today you can

00:25:32,060 --> 00:25:36,230
already find out what's in there

00:25:34,070 --> 00:25:39,380
even before like six months is before

00:25:36,230 --> 00:25:42,160
it's released I think and what I want to

00:25:39,380 --> 00:25:46,190
say is that wise people say that truth

00:25:42,160 --> 00:25:49,610
lies within write and in case of angular

00:25:46,190 --> 00:25:53,390
it's within the angular sources so do

00:25:49,610 --> 00:25:57,980
not be afraid to read the sources and

00:25:53,390 --> 00:26:01,030
learn the truth however always remember

00:25:57,980 --> 00:26:04,340
that nothing stays the same

00:26:01,030 --> 00:26:05,910
especially with Ivy so thank you for

00:26:04,340 --> 00:26:10,099
your attention and good luck

00:26:05,910 --> 00:26:10,099

YouTube URL: https://www.youtube.com/watch?v=5jJMsfbtQ5g


