Title: Angular Vienna, Structural Directives in Angular, August 2018
Publication date: 2018-08-31
Playlist: Angular Vienna
Description: 
	by Vojtech MaÅ¡ek

Structural directives are a key part of Angular everyone should be familiar with. They are responsible for manipulating DOM through adding, removing or changing the elements. Even if you have never written a structural directive yourself, you have probably been using *ngIf and *ngFor in your templates pretty often.

In this talk we will go from basics to understanding the inner details, it should help everybody understand the concept and encourage you to write your own (structural) directives.
Captions: 
	00:00:00,030 --> 00:00:09,389
we like every every one of you probably

00:00:04,640 --> 00:00:11,840
have used NJ for ng for ever in angular

00:00:09,389 --> 00:00:16,949
because how else would you write

00:00:11,840 --> 00:00:20,850
component and the Asterix there means

00:00:16,949 --> 00:00:24,980
it's structural and I I will explain

00:00:20,850 --> 00:00:27,930
what it's what it means in in deep so

00:00:24,980 --> 00:00:32,480
these are these are the common ones and

00:00:27,930 --> 00:00:34,230
I think there is there is no other

00:00:32,480 --> 00:00:37,530
included in angular

00:00:34,230 --> 00:00:38,750
but switch yeah sorry there switch I

00:00:37,530 --> 00:00:42,690
forget about it

00:00:38,750 --> 00:00:45,860
because we don't use the switch hundred

00:00:42,690 --> 00:00:50,100
often but yeah there is also switch and

00:00:45,860 --> 00:00:54,989
there is a other possibilities then then

00:00:50,100 --> 00:00:55,620
these three now you can write and what

00:00:54,989 --> 00:00:58,820
do they do

00:00:55,620 --> 00:01:02,520
they are responsible for HTML layout

00:00:58,820 --> 00:01:04,379
basically you reshape or manipulate the

00:01:02,520 --> 00:01:06,830
Dom structure with them

00:01:04,379 --> 00:01:12,479
because you shouldn't do it without

00:01:06,830 --> 00:01:15,360
without these these directives otherwise

00:01:12,479 --> 00:01:18,030
you will be you will be touching the

00:01:15,360 --> 00:01:20,670
internal structure of the Dom without

00:01:18,030 --> 00:01:23,040
the anger knowing what you are doing and

00:01:20,670 --> 00:01:26,280
that's that's bad that's not good for

00:01:23,040 --> 00:01:26,790
the for the digest cycle and change

00:01:26,280 --> 00:01:31,799
detection

00:01:26,790 --> 00:01:34,619
so typically we add remove on manipulate

00:01:31,799 --> 00:01:38,520
elements what that means it's that we

00:01:34,619 --> 00:01:41,850
need and we view contain the reference

00:01:38,520 --> 00:01:43,770
in the dagger directive that's the

00:01:41,850 --> 00:01:46,320
reference represents a container

00:01:43,770 --> 00:01:50,009
something we actually manipulate big

00:01:46,320 --> 00:01:51,630
because we we cannot manipulate the the

00:01:50,009 --> 00:01:53,970
world Dom we only can manipulate

00:01:51,630 --> 00:01:58,229
something that has been referred into

00:01:53,970 --> 00:02:03,090
the directive like actually the thing

00:01:58,229 --> 00:02:06,810
that we want to touch and one or more

00:02:03,090 --> 00:02:09,210
views can be attached so when we when we

00:02:06,810 --> 00:02:12,870
do stuff like

00:02:09,210 --> 00:02:15,960
repeat something with energy for more

00:02:12,870 --> 00:02:18,180
more stuff is attached to Dom because

00:02:15,960 --> 00:02:21,390
it's a repeating same component same

00:02:18,180 --> 00:02:24,540
same template again and again and it

00:02:21,390 --> 00:02:26,430
gets it gets rendered by angular and we

00:02:24,540 --> 00:02:28,470
can we can achieve that with a view

00:02:26,430 --> 00:02:31,920
container there's something else that's

00:02:28,470 --> 00:02:34,170
sorry template reference that represents

00:02:31,920 --> 00:02:37,770
an embedded template that's something

00:02:34,170 --> 00:02:41,130
inside that's something that can be used

00:02:37,770 --> 00:02:44,010
to instance embedded views like it's

00:02:41,130 --> 00:02:46,560
it's the thing that can be repeated not

00:02:44,010 --> 00:02:49,680
the thing that we are attaching in fro

00:02:46,560 --> 00:02:54,870
it for but the thing that it gets

00:02:49,680 --> 00:03:01,200
repeated so it's the element that we put

00:02:54,870 --> 00:03:04,740
the directive upon the one one of the

00:03:01,200 --> 00:03:08,070
main things we we have to know with

00:03:04,740 --> 00:03:12,150
directives actually especially the stock

00:03:08,070 --> 00:03:15,660
structural ones is the is the context

00:03:12,150 --> 00:03:19,320
variables when we when we look at this

00:03:15,660 --> 00:03:22,680
ng4 we will see there's index there are

00:03:19,320 --> 00:03:24,090
some odd and they're strict by we forget

00:03:22,680 --> 00:03:26,910
about the track by because it's

00:03:24,090 --> 00:03:30,600
something else but there's index and odd

00:03:26,910 --> 00:03:33,840
that's really interesting because it's

00:03:30,600 --> 00:03:39,560
the variable that is exported from the

00:03:33,840 --> 00:03:43,110
directive so index is what is the like

00:03:39,560 --> 00:03:44,310
what is the number in the in a list of

00:03:43,110 --> 00:03:47,970
the of that element

00:03:44,310 --> 00:03:51,750
oh that's bullying for if it's odd or

00:03:47,970 --> 00:03:54,960
even now there are a few more mention in

00:03:51,750 --> 00:03:58,230
documentation probably I will also show

00:03:54,960 --> 00:04:02,310
them but there's like five five of them

00:03:58,230 --> 00:04:08,520
that ng4 expose then we can use them

00:04:02,310 --> 00:04:13,890
with this desolate assigned in I or or

00:04:08,520 --> 00:04:20,160
in odd like the class out in template

00:04:13,890 --> 00:04:22,680
variable declaration so if we use ng how

00:04:20,160 --> 00:04:26,160
many of you have ever used NJ if like

00:04:22,680 --> 00:04:28,650
this like how many of you bright and

00:04:26,160 --> 00:04:30,690
gifs like this so you so you use

00:04:28,650 --> 00:04:39,570
observables in your in your component

00:04:30,690 --> 00:04:41,910
yeah so you're subscribing in in

00:04:39,570 --> 00:04:44,190
component and yeah this is this is

00:04:41,910 --> 00:04:46,740
probably the better way how to do it

00:04:44,190 --> 00:04:50,490
because it handles the unsubscription of

00:04:46,740 --> 00:04:53,160
the front from the observable and it's a

00:04:50,490 --> 00:04:56,390
it's with the async pipe that something

00:04:53,160 --> 00:04:59,640
will not talk about but async pipe

00:04:56,390 --> 00:05:03,180
exposes the like value of the observable

00:04:59,640 --> 00:05:06,930
that's right now and we will assign it

00:05:03,180 --> 00:05:10,770
to a variable user that we that we

00:05:06,930 --> 00:05:14,370
declared with the S syntax so basically

00:05:10,770 --> 00:05:18,120
we we declare a very variable in

00:05:14,370 --> 00:05:22,140
template and then we will use it as the

00:05:18,120 --> 00:05:26,970
user inside inside the scope of that of

00:05:22,140 --> 00:05:29,880
that declaration so we we can achieve

00:05:26,970 --> 00:05:32,580
that also with custom directive and I

00:05:29,880 --> 00:05:38,090
will show we have this is the let

00:05:32,580 --> 00:05:41,910
directive if we like if we need to

00:05:38,090 --> 00:05:44,370
declare a variable inside a component we

00:05:41,910 --> 00:05:47,400
can either use it this way with ng if

00:05:44,370 --> 00:05:50,669
that's not the problem but if you if you

00:05:47,400 --> 00:05:53,700
do it like this then the component would

00:05:50,669 --> 00:05:57,630
not get rendered if the variable is

00:05:53,700 --> 00:06:02,970
false because it's if it's false value

00:05:57,630 --> 00:06:05,250
it's not rendered rendered if we use the

00:06:02,970 --> 00:06:08,570
led directive the custom one there's

00:06:05,250 --> 00:06:12,960
there's nothing like that in angular yet

00:06:08,570 --> 00:06:15,360
we we will provide a way how to declare

00:06:12,960 --> 00:06:20,760
a variable inside the template for

00:06:15,360 --> 00:06:26,760
purpose of like some temporary usage for

00:06:20,760 --> 00:06:31,289
example when when we want to show some

00:06:26,760 --> 00:06:34,830
show some numbers that are in data are

00:06:31,289 --> 00:06:35,669
from observable and number can be like

00:06:34,830 --> 00:06:40,979
from

00:06:35,669 --> 00:06:44,129
zero - I don't know 200 then the zero

00:06:40,979 --> 00:06:47,069
would not be displayed because zero is a

00:06:44,129 --> 00:06:49,860
false value but if we declare it like

00:06:47,069 --> 00:06:51,599
this it would get displayed because it

00:06:49,860 --> 00:06:54,719
doesn't care it doesn't have the

00:06:51,599 --> 00:06:57,960
condition to not show the element so we

00:06:54,719 --> 00:07:02,009
can declare the the variable in in the

00:06:57,960 --> 00:07:04,620
template no this this usage is there's

00:07:02,009 --> 00:07:08,009
there's a lot of them but it's it's a

00:07:04,620 --> 00:07:11,490
really specific ones and writing this

00:07:08,009 --> 00:07:13,349
directive is it's really easy what what

00:07:11,490 --> 00:07:16,050
can be a bit confusing there is the

00:07:13,349 --> 00:07:18,150
interface the like the biggest part of

00:07:16,050 --> 00:07:22,349
the directive is currently interface if

00:07:18,150 --> 00:07:24,689
we count the commands but when we look

00:07:22,349 --> 00:07:27,150
at that we only need one of the

00:07:24,689 --> 00:07:29,069
properties that's that's defined in the

00:07:27,150 --> 00:07:34,289
interface one is implicit and one it's

00:07:29,069 --> 00:07:39,319
applied implicit is the is the implicit

00:07:34,289 --> 00:07:42,500
value of the of the directive it's

00:07:39,319 --> 00:07:46,050
exposing the current current value and

00:07:42,500 --> 00:07:49,349
enables us to use the Lett syntax if we

00:07:46,050 --> 00:07:53,339
if you if you use the semicolon let

00:07:49,349 --> 00:07:56,339
something something then we will like

00:07:53,339 --> 00:07:58,680
declare a variable in template with the

00:07:56,339 --> 00:08:02,610
word syntax if we want to use the S

00:07:58,680 --> 00:08:06,839
syntax we need to expose it we are the

00:08:02,610 --> 00:08:11,669
other other syntax and it's the applet

00:08:06,839 --> 00:08:15,409
basically we name the the property same

00:08:11,669 --> 00:08:19,589
as directive and then it gets exposed

00:08:15,409 --> 00:08:22,649
for the S usage because if we do it in

00:08:19,589 --> 00:08:27,169
template it will it will know that we

00:08:22,649 --> 00:08:32,729
are we are using the inside inside

00:08:27,169 --> 00:08:36,209
directive variable so inside the

00:08:32,729 --> 00:08:41,339
directive there is input applied it's

00:08:36,209 --> 00:08:45,449
set input only and it's it's for the

00:08:41,339 --> 00:08:46,660
setting the internal value of the of the

00:08:45,449 --> 00:08:52,870
view reference

00:08:46,660 --> 00:08:57,610
like we we we get a value in parameters

00:08:52,870 --> 00:09:02,080
and this value will be set to an to an

00:08:57,610 --> 00:09:05,590
employee to an applet or implicit value

00:09:02,080 --> 00:09:11,200
in the that's described in Inlet context

00:09:05,590 --> 00:09:14,590
I am setting both of them because I want

00:09:11,200 --> 00:09:18,300
user to to have a chance to use like

00:09:14,590 --> 00:09:21,070
either either of these syntaxes

00:09:18,300 --> 00:09:25,450
personally I prefer the S one because

00:09:21,070 --> 00:09:28,630
it's it's more more friendly this is the

00:09:25,450 --> 00:09:29,350
usage of the directive the both uses the

00:09:28,630 --> 00:09:36,280
usages

00:09:29,350 --> 00:09:39,970
one is with movie facing data now s data

00:09:36,280 --> 00:09:42,610
and one is do with let data to so you

00:09:39,970 --> 00:09:47,320
can you can see that it's doing the same

00:09:42,610 --> 00:09:50,520
thing but in in a different syntax what

00:09:47,320 --> 00:09:54,520
what should like what is this good for

00:09:50,520 --> 00:09:58,930
imagine that we are displaying bits for

00:09:54,520 --> 00:10:02,050
example well from from some random

00:09:58,930 --> 00:10:05,950
stream like we have a random street on a

00:10:02,050 --> 00:10:11,890
stream of bits 0 or 1 and we want to

00:10:05,950 --> 00:10:16,210
display 8 bits if you would use an async

00:10:11,890 --> 00:10:18,760
for each one of these bits then you

00:10:16,210 --> 00:10:27,100
would have 8 subscriptions in your

00:10:18,760 --> 00:10:29,290
template if you would do the like

00:10:27,100 --> 00:10:33,580
subscribe first and then didn't show

00:10:29,290 --> 00:10:35,230
what what has been gotten from the from

00:10:33,580 --> 00:10:38,620
the observable then you would have the

00:10:35,230 --> 00:10:42,610
same value but there is a solution then

00:10:38,620 --> 00:10:44,680
if you are if you if you used one of one

00:10:42,610 --> 00:10:46,900
of these syntaxes then you would

00:10:44,680 --> 00:10:49,690
subscribe to the value and each time you

00:10:46,900 --> 00:10:51,910
declare that in a variable the

00:10:49,690 --> 00:10:55,720
observable returns you a new value that

00:10:51,910 --> 00:10:59,380
like randomized and it returns your

00:10:55,720 --> 00:11:00,520
random random 8 bits for example so you

00:10:59,380 --> 00:11:02,920
can imagine

00:11:00,520 --> 00:11:05,920
why it's good to share the the

00:11:02,920 --> 00:11:09,220
subscription there is at the example

00:11:05,920 --> 00:11:14,430
that's for range at the directive that's

00:11:09,220 --> 00:11:18,790
doing similar thing as ng for but it's

00:11:14,430 --> 00:11:24,070
displaying stuff only for like the range

00:11:18,790 --> 00:11:27,610
that we had defined currently it's

00:11:24,070 --> 00:11:31,600
implemented that it returns like it

00:11:27,610 --> 00:11:36,640
exposes value only as an implicit and it

00:11:31,600 --> 00:11:40,450
exposes few few other values its index

00:11:36,640 --> 00:11:44,260
first and last similar to the to the ng

00:11:40,450 --> 00:11:49,000
for now we're index 6 index first loss

00:11:44,260 --> 00:11:55,440
indicates the position in the list and

00:11:49,000 --> 00:11:59,200
you you provide to the to the directive

00:11:55,440 --> 00:12:01,690
basically you can input two things one

00:11:59,200 --> 00:12:04,540
is tupple number and number and one is

00:12:01,690 --> 00:12:07,540
only number if you if you input double

00:12:04,540 --> 00:12:11,470
then it would get it would generate

00:12:07,540 --> 00:12:14,320
range from two it would only if you

00:12:11,470 --> 00:12:17,190
would only provide a number like the

00:12:14,320 --> 00:12:21,850
second option only one number it would

00:12:17,190 --> 00:12:25,149
generate four from zero to something I

00:12:21,850 --> 00:12:27,339
will show you the usage so it's a little

00:12:25,149 --> 00:12:28,240
bit easier to understand what's going on

00:12:27,339 --> 00:12:33,360
inside

00:12:28,240 --> 00:12:36,899
so there's up range you are you are

00:12:33,360 --> 00:12:39,880
putting their max elements variable

00:12:36,899 --> 00:12:43,899
imagine in component max elements it's

00:12:39,880 --> 00:12:47,980
seven for example so you are declaring

00:12:43,899 --> 00:12:50,050
let let number so you have you have the

00:12:47,980 --> 00:12:53,560
current number and you have also the

00:12:50,050 --> 00:12:56,560
current index because in this in this

00:12:53,560 --> 00:12:59,709
example the index is not same as number

00:12:56,560 --> 00:13:04,600
because number will be seven index will

00:12:59,709 --> 00:13:05,130
be 0 and you will display seven seven

00:13:04,600 --> 00:13:09,279
items

00:13:05,130 --> 00:13:12,640
thanks to up range what's the real world

00:13:09,279 --> 00:13:13,870
example is the one we are showing our

00:13:12,640 --> 00:13:17,980
displaying for

00:13:13,870 --> 00:13:20,290
simple drop-down of years you have an

00:13:17,980 --> 00:13:24,570
application we form and you want a user

00:13:20,290 --> 00:13:30,210
to select only from like today year to

00:13:24,570 --> 00:13:37,080
30 years in future so you will its to

00:13:30,210 --> 00:13:41,130
2020 2005 and 2018 there so it will show

00:13:37,080 --> 00:13:44,740
it would generate the items from 2005 to

00:13:41,130 --> 00:13:46,810
2008 een and then display these options

00:13:44,740 --> 00:13:49,029
in the in the drop-down so user will

00:13:46,810 --> 00:13:52,180
select only these years and you doesn't

00:13:49,029 --> 00:13:54,339
have to provide this logic in a in a

00:13:52,180 --> 00:13:56,470
component because it's like it's pretty

00:13:54,339 --> 00:13:58,810
useless to have this in a component

00:13:56,470 --> 00:14:00,690
because it's pretty readable in a

00:13:58,810 --> 00:14:04,830
template to only only have it they're

00:14:00,690 --> 00:14:09,310
declared with with basically two numbers

00:14:04,830 --> 00:14:12,490
so this is this is you'd a usage for for

00:14:09,310 --> 00:14:17,260
ng for I will again show the show the

00:14:12,490 --> 00:14:22,839
range range implementation you can see

00:14:17,260 --> 00:14:26,680
there's again to two things in

00:14:22,839 --> 00:14:30,430
constructor it's a view container

00:14:26,680 --> 00:14:34,890
reference and template reference so we

00:14:30,430 --> 00:14:38,200
can with like we can attach template to

00:14:34,890 --> 00:14:43,540
to view container and repeat it with

00:14:38,200 --> 00:14:49,029
with with template ref and we can see

00:14:43,540 --> 00:14:52,959
that in that range for each in 14 line

00:14:49,029 --> 00:14:58,770
number and it's it's pretty it's pretty

00:14:52,959 --> 00:15:04,180
easy for for each for each of the items

00:14:58,770 --> 00:15:07,330
in range we will like create embedded

00:15:04,180 --> 00:15:10,600
view for for the current view reference

00:15:07,330 --> 00:15:14,500
attach it attach it to the template ref

00:15:10,600 --> 00:15:19,000
and expose variables implicit the

00:15:14,500 --> 00:15:22,930
current item number index first and last

00:15:19,000 --> 00:15:24,820
that's it that is computed it's it's a

00:15:22,930 --> 00:15:28,570
really similar implementation to the ng

00:15:24,820 --> 00:15:33,220
4 that's currently in in angular

00:15:28,570 --> 00:15:36,280
I have shown I have not shown the

00:15:33,220 --> 00:15:39,100
generate range because it's only like we

00:15:36,280 --> 00:15:44,820
generate an array there in Brooke blog

00:15:39,100 --> 00:15:48,400
post it's there's wall wall code and

00:15:44,820 --> 00:15:52,480
this is this is linked if anyone is

00:15:48,400 --> 00:15:55,480
interested to to see see detailed

00:15:52,480 --> 00:15:57,820
explanation so you can you can go there

00:15:55,480 --> 00:16:03,520
I don't know why the s is messed up by

00:15:57,820 --> 00:16:07,810
but if you would yeah they broke that

00:16:03,520 --> 00:16:11,530
they don't like my presentation but you

00:16:07,810 --> 00:16:15,790
can you can go there and check it out

00:16:11,530 --> 00:16:18,610
the every every example is there with

00:16:15,790 --> 00:16:21,550
it's hosted on github so there's war

00:16:18,610 --> 00:16:22,630
repo and everything else thank you

00:16:21,550 --> 00:16:26,500
any questions

00:16:22,630 --> 00:16:26,500

YouTube URL: https://www.youtube.com/watch?v=TBcAXgsVFtM


