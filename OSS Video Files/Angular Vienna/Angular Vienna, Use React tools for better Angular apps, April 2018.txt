Title: Angular Vienna, Use React tools for better Angular apps, April 2018
Publication date: 2018-04-13
Playlist: Angular Vienna
Description: 
	Talk by Martin Hochel.

Angular, React, Vue… they all have their own ecosystem, specific patterns and best practices… For us, the developers, this might become indeed very frustrating as we have to switch between various projects with various libraries… Have no fear, universal solution is here! In this session, I will show you how to learn libraries/patterns/tooling only once and apply it everywhere.
Captions: 
	00:00:00,000 --> 00:00:05,580
hey everyone my name is marcin ho-ho

00:00:03,449 --> 00:00:07,620
I work as principal software engineer

00:00:05,580 --> 00:00:10,260
for a company called embed IT in Prague

00:00:07,620 --> 00:00:14,340
Czech Republic and besides that I'm also

00:00:10,260 --> 00:00:16,650
Google / expert for web you can find me

00:00:14,340 --> 00:00:19,470
on twitter my twitter handler is marcin

00:00:16,650 --> 00:00:22,189
underscore hotel double-l and you can

00:00:19,470 --> 00:00:25,410
follow me also on github

00:00:22,189 --> 00:00:28,199
besides daily job i'm running the

00:00:25,410 --> 00:00:31,529
biggest JavaScript meetup in prague it's

00:00:28,199 --> 00:00:34,380
called ng party by the way the ng stands

00:00:31,529 --> 00:00:36,020
for next generation you see what I did

00:00:34,380 --> 00:00:39,450
what I did there

00:00:36,020 --> 00:00:42,180
I'm also author of ng metadata the best

00:00:39,450 --> 00:00:44,700
angularjs yet and i'm core member of

00:00:42,180 --> 00:00:46,829
sched s a reactive library for writing

00:00:44,700 --> 00:00:48,059
web components and well when I'm not

00:00:46,829 --> 00:00:50,430
geeking out you can find me outside

00:00:48,059 --> 00:00:54,020
surfing snowboarding skateboarding or

00:00:50,430 --> 00:00:57,239
wakeboarding alright enough about me

00:00:54,020 --> 00:00:59,760
so this is angular meetup and are you

00:00:57,239 --> 00:01:06,810
prepared to have a good fight against

00:00:59,760 --> 00:01:10,500
reacting angular yes no I have to

00:01:06,810 --> 00:01:13,979
disappoint you because fight early it's

00:01:10,500 --> 00:01:16,799
to the trick around some frame Wars so

00:01:13,979 --> 00:01:21,420
we won't we won't fight there is during

00:01:16,799 --> 00:01:23,130
this talk instead we can be friends we

00:01:21,420 --> 00:01:26,030
can leverage the knowledge of other

00:01:23,130 --> 00:01:31,439
ecosystems and use it for our own

00:01:26,030 --> 00:01:37,049
benefit and better apps question is how

00:01:31,439 --> 00:01:39,000
to do this right how to do this well we

00:01:37,049 --> 00:01:42,689
need to take particular look at three

00:01:39,000 --> 00:01:45,000
categories that we are dealing with bio

00:01:42,689 --> 00:01:47,700
daily jobs and those categories are

00:01:45,000 --> 00:01:50,759
tools what tools are we using for

00:01:47,700 --> 00:01:54,149
achieving your goals second category is

00:01:50,759 --> 00:01:57,570
architecture how we built or apps with

00:01:54,149 --> 00:01:59,280
those tools and last but not least we

00:01:57,570 --> 00:02:01,380
need to take very close look at

00:01:59,280 --> 00:02:06,479
libraries that we are using that we can

00:02:01,380 --> 00:02:08,340
leverage from other ecosystems as a

00:02:06,479 --> 00:02:10,349
baseline for describing all those

00:02:08,340 --> 00:02:13,780
categories will be using angular CLI

00:02:10,349 --> 00:02:16,120
which is a it's an industry standard for

00:02:13,780 --> 00:02:17,290
booting up new angular apps and you can

00:02:16,120 --> 00:02:19,870
install it by MPX

00:02:17,290 --> 00:02:22,150
I'm not using NPM install global because

00:02:19,870 --> 00:02:24,130
global things are bad for your system

00:02:22,150 --> 00:02:26,740
and maybe for your life as well so you

00:02:24,130 --> 00:02:31,390
can use MPX and don't pollute your

00:02:26,740 --> 00:02:35,050
system so let's take a look what

00:02:31,390 --> 00:02:36,910
CLI brings us by default in the terms of

00:02:35,050 --> 00:02:39,880
those three categories right

00:02:36,910 --> 00:02:42,790
so from library's perspective well

00:02:39,880 --> 00:02:48,190
nothing surprising there is angular and

00:02:42,790 --> 00:02:51,760
rxjs from architecture perspective we

00:02:48,190 --> 00:02:52,900
can build our apps how we want we can go

00:02:51,760 --> 00:02:54,790
fully with the componentry in

00:02:52,900 --> 00:02:57,310
development or your service-oriented

00:02:54,790 --> 00:03:01,630
architecture or some other state

00:02:57,310 --> 00:03:04,060
management principles but that's it and

00:03:01,630 --> 00:03:08,170
from the tooling perspective she like

00:03:04,060 --> 00:03:10,480
comes with web pack mojo bundler then we

00:03:08,170 --> 00:03:12,880
get protractor with selenium for engine

00:03:10,480 --> 00:03:15,640
tests and Carmen Jasmine for unit

00:03:12,880 --> 00:03:16,989
testing and last but not least we get

00:03:15,640 --> 00:03:21,010
the best thing that ever happened to

00:03:16,989 --> 00:03:23,230
JavaScript typescript with tools for

00:03:21,010 --> 00:03:28,810
static analysis like TS lint and code

00:03:23,230 --> 00:03:30,519
wiser so far so good before continuing

00:03:28,810 --> 00:03:32,890
with this talk I have to apologize

00:03:30,519 --> 00:03:35,140
because I'll be introducing a lot of

00:03:32,890 --> 00:03:36,850
tombstones just to give a favor to

00:03:35,140 --> 00:03:42,239
angular a team what they did on ng

00:03:36,850 --> 00:03:50,650
Europe in 2015 I don't know how they

00:03:42,239 --> 00:03:55,320
tombstone all angularjs features oh so

00:03:50,650 --> 00:03:55,320
sorry about that but I just had to do it

00:03:55,500 --> 00:04:05,680
all right let's take a look about tools

00:03:59,340 --> 00:04:08,620
what we got let's start pretty pretty

00:04:05,680 --> 00:04:10,299
easy with this and it's briefly talk

00:04:08,620 --> 00:04:12,430
about task runners and package managers

00:04:10,299 --> 00:04:16,840
that we are using with angular and other

00:04:12,430 --> 00:04:21,430
apps so probably most of you are using

00:04:16,840 --> 00:04:24,320
NPM right who's using NPM hands up yes

00:04:21,430 --> 00:04:27,440
like 99% of audience

00:04:24,320 --> 00:04:31,040
but we can do better we can use kit I'm

00:04:27,440 --> 00:04:33,500
an iron which is also a package manager

00:04:31,040 --> 00:04:41,210
and task runner which is much faster

00:04:33,500 --> 00:04:44,240
than NPM more reliable just why why

00:04:41,210 --> 00:04:45,020
should you use yarn right I have a few

00:04:44,240 --> 00:04:47,300
questions for you

00:04:45,020 --> 00:04:51,890
how would you execute locally installed

00:04:47,300 --> 00:04:56,680
MPM package from the terminal with NPM

00:04:51,890 --> 00:04:56,680
or whatever suggestions

00:04:57,940 --> 00:05:03,470
yeah that's the one way but if you don't

00:05:01,640 --> 00:05:08,110
want to introduce NPM script you need to

00:05:03,470 --> 00:05:11,740
write this gibberish right with the yarn

00:05:08,110 --> 00:05:14,450
you can just execute yarn and the binary

00:05:11,740 --> 00:05:16,310
and it will find the binary file in the

00:05:14,450 --> 00:05:19,760
old packages no modules and it will

00:05:16,310 --> 00:05:22,880
execute which is super convenient next

00:05:19,760 --> 00:05:28,160
question how would you execute custom

00:05:22,880 --> 00:05:29,930
NPM script yeah exactly

00:05:28,160 --> 00:05:33,470
ambien run it into it for instance

00:05:29,930 --> 00:05:39,460
custom script right would yarn we can

00:05:33,470 --> 00:05:39,460
skip the run to be more lazy eyes right

00:05:40,690 --> 00:05:43,690
exactly

00:05:43,780 --> 00:05:51,490
okay and lasting how would you pass

00:05:46,750 --> 00:05:52,820
custom arguments to existing NPM script

00:05:51,490 --> 00:05:56,390
yes

00:05:52,820 --> 00:05:58,790
need to terminate the script to tell it

00:05:56,390 --> 00:06:01,010
okay this is it and now accept these

00:05:58,790 --> 00:06:03,910
arguments this is super own convenient

00:06:01,010 --> 00:06:07,670
especially if you are writing wrong

00:06:03,910 --> 00:06:10,700
scripts in your package Jason so again

00:06:07,670 --> 00:06:13,660
with yarn you just run it without

00:06:10,700 --> 00:06:13,660
terminating

00:06:19,430 --> 00:06:27,570
good questions here's t-shirt so yeah

00:06:25,470 --> 00:06:30,630
it's it's more convenient to use like

00:06:27,570 --> 00:06:34,500
for daily tasks and executing your

00:06:30,630 --> 00:06:36,360
scripts just playing around and that's

00:06:34,500 --> 00:06:39,210
but at least it is great

00:06:36,360 --> 00:06:41,780
CLI tool for upgrading your packages so

00:06:39,210 --> 00:06:44,940
I can execute I have this beautiful

00:06:41,780 --> 00:06:47,750
command-line tool for checking the

00:06:44,940 --> 00:06:50,070
packages that can be upgraded and yeah I

00:06:47,750 --> 00:06:54,150
don't have to do it manually or I don't

00:06:50,070 --> 00:06:55,440
know how you upgrade packages okay that

00:06:54,150 --> 00:07:01,020
was just some intro

00:06:55,440 --> 00:07:04,230
what about formatting so again angular

00:07:01,020 --> 00:07:07,320
CLI gives us the excellent with code

00:07:04,230 --> 00:07:10,020
wiser so you can execute length with fix

00:07:07,320 --> 00:07:13,770
and then you'll reef kinda reformat and

00:07:10,020 --> 00:07:15,560
fix your linking errors in your code

00:07:13,770 --> 00:07:18,870
base

00:07:15,560 --> 00:07:23,300
so these linters have two rules to

00:07:18,870 --> 00:07:27,600
formatting rules and code quality rules

00:07:23,300 --> 00:07:30,450
but if you think this is okay to get

00:07:27,600 --> 00:07:32,490
backed by missing some spaces or

00:07:30,450 --> 00:07:35,100
semicolons in your editor you're

00:07:32,490 --> 00:07:37,590
fundamentally wrong and because of that

00:07:35,100 --> 00:07:40,350
TS lint is not the right tool for the

00:07:37,590 --> 00:07:44,030
right job in terms of formatting so we

00:07:40,350 --> 00:07:48,500
need to introduce our first gemstone so

00:07:44,030 --> 00:07:53,280
what should we use for formatting well

00:07:48,500 --> 00:07:57,510
we can use prettier library from

00:07:53,280 --> 00:07:59,729
Facebook and open source community and

00:07:57,510 --> 00:08:01,590
you can install it pretty easily just by

00:07:59,729 --> 00:08:03,660
adding as a development dependency and

00:08:01,590 --> 00:08:05,820
by executing prettier with the globe

00:08:03,660 --> 00:08:08,190
pattern and write all your code base

00:08:05,820 --> 00:08:09,870
will be reformatted and it's blazingly

00:08:08,190 --> 00:08:11,790
fast and did I mention the whole

00:08:09,870 --> 00:08:12,510
Facebook is using prettier on to cover

00:08:11,790 --> 00:08:15,000
their codebase

00:08:12,510 --> 00:08:16,860
you don't have to ever argue with your

00:08:15,000 --> 00:08:20,150
colleague during code review like hey

00:08:16,860 --> 00:08:20,150
main this base

00:08:21,820 --> 00:08:28,150
this is not the end of the story because

00:08:24,960 --> 00:08:30,250
as I said there are some formatting

00:08:28,150 --> 00:08:33,940
rules in TS length so how to mitigate

00:08:30,250 --> 00:08:36,910
those do not have prettier in clash with

00:08:33,940 --> 00:08:40,120
linter thanks to the open source we have

00:08:36,910 --> 00:08:43,510
some package for that in particular TS

00:08:40,120 --> 00:08:45,430
length config prettier so you will just

00:08:43,510 --> 00:08:48,490
extend your TS link configuration rules

00:08:45,430 --> 00:08:51,220
with this package and then we can

00:08:48,490 --> 00:08:53,590
execute the binary which will expose

00:08:51,220 --> 00:08:56,950
those rules that are in conflict with

00:08:53,590 --> 00:08:59,050
with the treat here and still you have

00:08:56,950 --> 00:09:03,250
to manually delete those so I see great

00:08:59,050 --> 00:09:09,760
PR opportunity to automate this thing to

00:09:03,250 --> 00:09:13,000
appear all right I don't know about you

00:09:09,760 --> 00:09:14,950
but I really hate doing things manually

00:09:13,000 --> 00:09:17,890
and all the time I grind for matters and

00:09:14,950 --> 00:09:21,070
stuff instead we can automate things and

00:09:17,890 --> 00:09:23,290
let's robust do the work again we can

00:09:21,070 --> 00:09:27,570
use two particular packages outside the

00:09:23,290 --> 00:09:31,810
angular ecosystem lint stage and husky

00:09:27,570 --> 00:09:34,450
so in stage need some configuration and

00:09:31,810 --> 00:09:37,870
then we can create new NPM script with

00:09:34,450 --> 00:09:42,160
this particular word pre-commit which is

00:09:37,870 --> 00:09:45,310
a kid hook kinda right so husky

00:09:42,160 --> 00:09:48,010
registers these scripts to real get

00:09:45,310 --> 00:09:50,980
hooks and then when we all start

00:09:48,010 --> 00:09:55,630
executing a commit it will be executed

00:09:50,980 --> 00:09:58,210
and husky will run lint stage binary and

00:09:55,630 --> 00:10:01,120
in stage binary we'll find or can flick

00:09:58,210 --> 00:10:04,810
and execute those two tasks so we will

00:10:01,120 --> 00:10:07,660
be running linter and formatter and also

00:10:04,810 --> 00:10:09,190
will add those formatted files to the

00:10:07,660 --> 00:10:11,890
git so we don't have to do it manually

00:10:09,190 --> 00:10:14,620
and everything will be formatted and

00:10:11,890 --> 00:10:22,090
properly styled in that particular

00:10:14,620 --> 00:10:26,520
commit which is awesome ok let's switch

00:10:22,090 --> 00:10:32,530
to some more serious topic unit testing

00:10:26,520 --> 00:10:35,710
who writes unit tests hands up all right

00:10:32,530 --> 00:10:40,680
those who didn't raise their hand there

00:10:35,710 --> 00:10:46,680
are doors I'm just kidding but seriously

00:10:40,680 --> 00:10:49,270
unit tests are important so again CLI

00:10:46,680 --> 00:10:52,450
comes with Karma the test Runner and

00:10:49,270 --> 00:10:56,800
Jasmine the assertion library and spy

00:10:52,450 --> 00:10:58,780
library but I know what to experience

00:10:56,800 --> 00:11:00,700
with those tools I don't really like

00:10:58,780 --> 00:11:04,330
those I need to do a lot of

00:11:00,700 --> 00:11:07,240
configuration to make colonel run and it

00:11:04,330 --> 00:11:10,350
used to it's sometimes very flaky it's

00:11:07,240 --> 00:11:13,990
slow debugging is not very convenient

00:11:10,350 --> 00:11:16,510
and there are other reasons but we

00:11:13,990 --> 00:11:20,640
introduce another tombstone for jasmine

00:11:16,510 --> 00:11:23,950
and karma with angular sorry

00:11:20,640 --> 00:11:27,910
instead you can use something much much

00:11:23,950 --> 00:11:30,070
better and more reliable just just its

00:11:27,910 --> 00:11:32,710
complete testing solution from Facebook

00:11:30,070 --> 00:11:36,100
and open-source community it's super

00:11:32,710 --> 00:11:38,410
easy to set up it's super fast it has

00:11:36,100 --> 00:11:40,600
very nice to link ecosystem and it

00:11:38,410 --> 00:11:46,540
introduces new type of testing it's

00:11:40,600 --> 00:11:48,820
called snapshot testing again to add it

00:11:46,540 --> 00:11:51,370
to existing CLI you just have to install

00:11:48,820 --> 00:11:53,830
just and just preset angular which

00:11:51,370 --> 00:11:59,890
handles all that angular setup for test

00:11:53,830 --> 00:12:02,440
bed and zones and stuff you know talking

00:11:59,890 --> 00:12:05,470
about the speed what see some numbers

00:12:02,440 --> 00:12:08,110
shall we so let's say we will use

00:12:05,470 --> 00:12:10,600
traditional karma which is run against

00:12:08,110 --> 00:12:14,560
the real browser Chrome at particular

00:12:10,600 --> 00:12:19,150
tests and it took 15 seconds which is

00:12:14,560 --> 00:12:21,220
great you may be we could be much better

00:12:19,150 --> 00:12:24,610
we can use some headless browser phantom

00:12:21,220 --> 00:12:30,780
which is dead now but whatever so it's

00:12:24,610 --> 00:12:36,240
only 30 seconds so fast right awesome or

00:12:30,780 --> 00:12:40,089
can you suggest which takes 5 seconds

00:12:36,240 --> 00:12:43,300
how is that possible well just runs

00:12:40,089 --> 00:12:45,460
against note and against J's dome which

00:12:43,300 --> 00:12:48,339
is a virtual representation of browser

00:12:45,460 --> 00:12:52,800
within note and it runs in parallel and

00:12:48,339 --> 00:12:52,800
it has very efficient caching mechanisms

00:12:54,300 --> 00:12:59,470
what about the snapshots so this is

00:12:57,370 --> 00:13:02,710
traditional test like we are used to

00:12:59,470 --> 00:13:05,260
right by the way the syntax with just is

00:13:02,710 --> 00:13:05,770
the same or very similar like with

00:13:05,260 --> 00:13:09,220
jasmine

00:13:05,770 --> 00:13:11,529
so nothing new to learn on your side and

00:13:09,220 --> 00:13:15,100
we have to use this particular matcher

00:13:11,529 --> 00:13:17,500
to match snapshot you know test and what

00:13:15,100 --> 00:13:19,900
this will do is your physical is you

00:13:17,500 --> 00:13:22,300
physically save a file snapshot file on

00:13:19,900 --> 00:13:24,550
the disk with the particular state of a

00:13:22,300 --> 00:13:27,580
component in that moment and then when

00:13:24,550 --> 00:13:30,339
someone changes the component some logic

00:13:27,580 --> 00:13:34,150
changes we are getting this beautiful

00:13:30,339 --> 00:13:36,250
diff when I can exactly see what

00:13:34,150 --> 00:13:37,779
happened what changed this is really

00:13:36,250 --> 00:13:39,460
awesome I don't know I don't know about

00:13:37,779 --> 00:13:41,709
you but I really hate to write manually

00:13:39,460 --> 00:13:44,350
query selectors to check some node or

00:13:41,709 --> 00:13:48,480
classes it doesn't make any sense so we

00:13:44,350 --> 00:13:48,480
just in snapshots this is easy peasy

00:13:51,600 --> 00:14:02,440
sorry okay so you just execute this

00:13:59,500 --> 00:14:04,630
assertion the picture is your component

00:14:02,440 --> 00:14:06,850
and you use too much snapshot and that's

00:14:04,630 --> 00:14:12,760
it and you're safe physical deception

00:14:06,850 --> 00:14:15,010
you need you need to add the snapshot to

00:14:12,760 --> 00:14:16,900
the version control system and so it's

00:14:15,010 --> 00:14:25,360
physical there in your in your gate and

00:14:16,900 --> 00:14:27,670
then it it compares the outputs with

00:14:25,360 --> 00:14:30,880
this test initially at the logic of

00:14:27,670 --> 00:14:33,640
justice if it finds the their snapshot

00:14:30,880 --> 00:14:35,560
if your compare and if there is no

00:14:33,640 --> 00:14:39,580
snapshot it will initially save the

00:14:35,560 --> 00:14:44,640
initial snapshot that's how but we all

00:14:39,580 --> 00:14:44,640
have time for questions after sorry

00:14:45,860 --> 00:14:50,060
and last but not least just comes with

00:14:47,839 --> 00:14:52,190
interactive silly mode so I can read the

00:14:50,060 --> 00:14:54,890
test in a watch mode and I can filter

00:14:52,190 --> 00:15:00,980
just to run some subset of the test

00:14:54,890 --> 00:15:03,079
let's say some pizzas related test and

00:15:00,980 --> 00:15:09,700
it'll execute and let's say we want to

00:15:03,079 --> 00:15:12,500
run some tests just some components and

00:15:09,700 --> 00:15:14,390
execute all tests from components and we

00:15:12,500 --> 00:15:18,250
can go back to the initial screen and

00:15:14,390 --> 00:15:18,250
run just the whole suite by pressing a

00:15:18,970 --> 00:15:29,029
simple as that and just cover as much

00:15:26,420 --> 00:15:31,010
more topics not just those it is very

00:15:29,029 --> 00:15:34,120
powerful walking features you can even

00:15:31,010 --> 00:15:36,800
work es6 modules which I don't recommend

00:15:34,120 --> 00:15:38,990
walking module is kind of con smell use

00:15:36,800 --> 00:15:40,579
dependency injection of course it has

00:15:38,990 --> 00:15:43,519
zero setup for code coverage it just

00:15:40,579 --> 00:15:45,560
works it's highly pluggable you can use

00:15:43,519 --> 00:15:48,019
a bit puppeteer for executing and to

00:15:45,560 --> 00:15:51,760
intestacy view please and it has it has

00:15:48,019 --> 00:15:51,760
large ecosystems with a lot of plugins

00:15:52,720 --> 00:15:58,040
ok we will stick with the testing for a

00:15:55,579 --> 00:16:00,350
while let's talk about engine testing

00:15:58,040 --> 00:16:07,250
again the same question who writes

00:16:00,350 --> 00:16:09,320
end-to-end tests ok like 20% of the

00:16:07,250 --> 00:16:14,209
audience and who enjoys writing in

00:16:09,320 --> 00:16:20,089
Turing tests one guy yeah exactly

00:16:14,209 --> 00:16:23,540
exactly so CLI comes with protractor

00:16:20,089 --> 00:16:27,010
which uses under the hood selenium when

00:16:23,540 --> 00:16:29,149
I heard selenium I want to fight someone

00:16:27,010 --> 00:16:33,110
just because it's kind of old technology

00:16:29,149 --> 00:16:34,790
it's again very reliable flaky the

00:16:33,110 --> 00:16:36,709
selectors are not matched properly and

00:16:34,790 --> 00:16:39,020
many many other reasons why I really

00:16:36,709 --> 00:16:45,199
don't like it and let's face it it's

00:16:39,020 --> 00:16:49,370
2018 and even much better tools so need

00:16:45,199 --> 00:16:50,529
to introduce another tombstone and I

00:16:49,370 --> 00:16:53,779
have good news for you

00:16:50,529 --> 00:16:55,279
there is ultimate cure for your entrant

00:16:53,779 --> 00:16:58,310
a sickness

00:16:55,279 --> 00:17:00,920
and it's called test cafe it's a pure

00:16:58,310 --> 00:17:01,910
node.js tool which is super reliable and

00:17:00,920 --> 00:17:03,889
super fast

00:17:01,910 --> 00:17:07,309
we are you thinking for the last nine

00:17:03,889 --> 00:17:12,459
months and really it joined a lot like I

00:17:07,309 --> 00:17:12,459
want to be again developer in tests know

00:17:12,640 --> 00:17:18,020
so how to add it to angular CLI you just

00:17:16,130 --> 00:17:21,770
install test cafe and discover live

00:17:18,020 --> 00:17:24,890
which is a watch mode let's say and

00:17:21,770 --> 00:17:26,720
that's it no configuration you can just

00:17:24,890 --> 00:17:29,090
execute this cafe against Chrome or any

00:17:26,720 --> 00:17:32,480
other browser that you want and it just

00:17:29,090 --> 00:17:36,679
works and let's see how it works in a

00:17:32,480 --> 00:17:40,820
real life so here is some Pizza app for

00:17:36,679 --> 00:17:49,640
creating managing pizzas right so let's

00:17:40,820 --> 00:17:52,070
run the test right it was super fast Wow

00:17:49,640 --> 00:17:56,240
okay let's slow down the test we can do

00:17:52,070 --> 00:17:58,240
that okay and I'm pressing save and

00:17:56,240 --> 00:18:00,260
automatically and we ran the test with

00:17:58,240 --> 00:18:04,340
so including pizza

00:18:00,260 --> 00:18:06,950
I'm putting their name create a pizza

00:18:04,340 --> 00:18:08,600
I'm going back to the details I'm going

00:18:06,950 --> 00:18:10,610
back to the pizza and I delete it delete

00:18:08,600 --> 00:18:13,909
the pizza to just clean after myself

00:18:10,610 --> 00:18:16,850
the test right okay we can add some

00:18:13,909 --> 00:18:21,860
toppings for sure because pizza without

00:18:16,850 --> 00:18:25,159
toppings boring again I hit save and the

00:18:21,860 --> 00:18:29,980
test is are gonna be run so there's a

00:18:25,159 --> 00:18:29,980
name this time with some toppings

00:18:31,480 --> 00:18:37,450
bacon bacon

00:18:33,080 --> 00:18:40,309
yep bacon we create the pizza go back

00:18:37,450 --> 00:18:44,149
again to the created pizza detail we

00:18:40,309 --> 00:18:47,120
delete and that's it and just comment

00:18:44,149 --> 00:18:49,570
out this speed limitation to see the

00:18:47,120 --> 00:18:54,010
test in the real life of fast it is

00:18:49,570 --> 00:18:55,240
again I press save and that s is we run

00:18:54,010 --> 00:18:59,299
oops

00:18:55,240 --> 00:19:02,240
yep that's it it's super fast and

00:18:59,299 --> 00:19:04,630
writing test like this it's just it's

00:19:02,240 --> 00:19:04,630
amazing

00:19:05,390 --> 00:19:10,280
so as a recap entering testing with this

00:19:07,730 --> 00:19:11,299
cafe it's really really reliable it's

00:19:10,280 --> 00:19:13,580
just pure nodejs

00:19:11,299 --> 00:19:15,679
no plugins new browsers know Java and

00:19:13,580 --> 00:19:18,380
stuff it's cross-platform

00:19:15,679 --> 00:19:20,960
I'm Mac user but I also use Windows and

00:19:18,380 --> 00:19:24,260
this cafe even works on subsystem Linux

00:19:20,960 --> 00:19:27,170
on Windows amazing it's cross browser it

00:19:24,260 --> 00:19:29,480
works with continues integration and did

00:19:27,170 --> 00:19:35,960
I mention it's a process typescript yep

00:19:29,480 --> 00:19:38,059
it does okay next topic

00:19:35,960 --> 00:19:40,610
how do you develop components in

00:19:38,059 --> 00:19:42,740
isolation or how do you do complementary

00:19:40,610 --> 00:19:45,650
development or maybe another question

00:19:42,740 --> 00:19:49,059
how do you create style guides of your

00:19:45,650 --> 00:19:56,799
component catalog with angular

00:19:49,059 --> 00:20:00,340
no one character app ok waste of time

00:19:56,799 --> 00:20:03,380
I'm just kidding you can use storybook

00:20:00,340 --> 00:20:06,530
storybook was initially pure react

00:20:03,380 --> 00:20:08,240
solution but as of today it's a

00:20:06,530 --> 00:20:11,630
framework agnostic so you can use it

00:20:08,240 --> 00:20:14,990
react with angular you web components

00:20:11,630 --> 00:20:17,360
any other framework that may come I hope

00:20:14,990 --> 00:20:20,900
there we all know they there is no other

00:20:17,360 --> 00:20:24,620
framework coming around so it generates

00:20:20,900 --> 00:20:26,929
the whole UI of your stories and you can

00:20:24,620 --> 00:20:28,730
just browse your components in

00:20:26,929 --> 00:20:31,309
particular States it even renders the

00:20:28,730 --> 00:20:33,350
whole app because at the root tab is

00:20:31,309 --> 00:20:36,620
just under component and we can play

00:20:33,350 --> 00:20:38,660
live with the rendering of component

00:20:36,620 --> 00:20:44,210
let's say I change the name to my real

00:20:38,660 --> 00:20:47,960
name yup that's my name I get the

00:20:44,210 --> 00:20:50,600
feedback and I said the real H I'm sold

00:20:47,960 --> 00:20:53,780
and we even supports not really non

00:20:50,600 --> 00:20:56,419
primitive data like objects so we have

00:20:53,780 --> 00:21:01,910
some fluids with Selleck box will change

00:20:56,419 --> 00:21:04,910
the banana and change some date so this

00:21:01,910 --> 00:21:07,760
is really revolution revolutionary tool

00:21:04,910 --> 00:21:09,590
for writing your components and to

00:21:07,760 --> 00:21:11,960
showcase this because you can deploy

00:21:09,590 --> 00:21:17,750
this and is awesome documentation for a

00:21:11,960 --> 00:21:19,399
consumers right and again how to add it

00:21:17,750 --> 00:21:23,570
to existing angular CLI

00:21:19,399 --> 00:21:26,049
you just execute mph storybooks Eli how

00:21:23,570 --> 00:21:28,969
it works in real life just like this

00:21:26,049 --> 00:21:32,629
you'll take for a while soon can start

00:21:28,969 --> 00:21:36,669
making a coffee early in the morning so

00:21:32,629 --> 00:21:36,669
they'll fetch some packages dependencies

00:21:40,389 --> 00:21:45,169
come on come on

00:21:42,700 --> 00:21:47,570
then it discovers that we are using

00:21:45,169 --> 00:21:52,940
angular app and everything is set up for

00:21:47,570 --> 00:21:54,589
us magic right this is developer

00:21:52,940 --> 00:21:57,559
experience at its best I don't have to

00:21:54,589 --> 00:21:58,009
do anything I just run the CLI it's

00:21:57,559 --> 00:21:59,749
there

00:21:58,009 --> 00:22:06,169
and I can immediately start writing my

00:21:59,749 --> 00:22:10,099
stories amazing what is a story it looks

00:22:06,169 --> 00:22:12,529
very similar to unit tests so you need

00:22:10,099 --> 00:22:14,570
to define the story for a component it's

00:22:12,529 --> 00:22:18,109
kind of like the scribe block in the

00:22:14,570 --> 00:22:21,559
test and then we are just adding those

00:22:18,109 --> 00:22:23,509
particular states of your component that

00:22:21,559 --> 00:22:26,539
you want to render on the page so it's

00:22:23,509 --> 00:22:28,549
like it block in your unit test and

00:22:26,539 --> 00:22:30,499
you're using traditional templates with

00:22:28,549 --> 00:22:33,200
all the familiar angular logic and

00:22:30,499 --> 00:22:35,799
syntax and last but not least you can

00:22:33,200 --> 00:22:38,950
provide the data to those components

00:22:35,799 --> 00:22:42,259
simple as that

00:22:38,950 --> 00:22:44,690
so as the endgame your components folder

00:22:42,259 --> 00:22:49,369
looks like this it has encapsulated

00:22:44,690 --> 00:22:51,589
styles tests stories implementation and

00:22:49,369 --> 00:22:56,869
snapshots if you are using snapshots we

00:22:51,589 --> 00:23:02,690
just of course okay that was about

00:22:56,869 --> 00:23:05,330
tooling what about architecture let's

00:23:02,690 --> 00:23:07,539
take a quick look at the components

00:23:05,330 --> 00:23:12,499
architecture in both react and angular

00:23:07,539 --> 00:23:16,099
all right so basic building blocks of

00:23:12,499 --> 00:23:20,479
both react and angular is component just

00:23:16,099 --> 00:23:22,789
the syntax is different also we can

00:23:20,479 --> 00:23:24,830
enhance the components the new behaviors

00:23:22,789 --> 00:23:26,450
react this is more function approach

00:23:24,830 --> 00:23:28,639
with higher components or let's say

00:23:26,450 --> 00:23:31,399
factory functions and angular has

00:23:28,639 --> 00:23:32,269
directives but the principle is again

00:23:31,399 --> 00:23:36,679
the same

00:23:32,269 --> 00:23:39,529
a realist is render so in line rendering

00:23:36,679 --> 00:23:42,109
with j6 we can use the same with angular

00:23:39,529 --> 00:23:46,369
with inline templates which I prefer by

00:23:42,109 --> 00:23:49,190
the way what about CSS up to you you can

00:23:46,369 --> 00:23:54,070
use both inline or external both

00:23:49,190 --> 00:23:56,269
technologies support the same options

00:23:54,070 --> 00:23:59,629
and last but not least which is in I

00:23:56,269 --> 00:24:02,659
hope you were important in designing our

00:23:59,629 --> 00:24:05,089
components are immutable props so react

00:24:02,659 --> 00:24:06,409
as immutable product props by default so

00:24:05,089 --> 00:24:08,539
if you don't change the referent

00:24:06,409 --> 00:24:10,369
reference of the prop the component

00:24:08,539 --> 00:24:15,079
won't be rendered and we can turn this

00:24:10,369 --> 00:24:16,909
on in angular as well with on push so

00:24:15,079 --> 00:24:19,519
when we took a look we're just using

00:24:16,909 --> 00:24:19,940
different syntax but the principles are

00:24:19,519 --> 00:24:23,029
the same

00:24:19,940 --> 00:24:30,079
so you learn things bonds and use with

00:24:23,029 --> 00:24:31,999
anything which is great I also want to

00:24:30,079 --> 00:24:34,039
mention our stateful stateless component

00:24:31,999 --> 00:24:35,749
architecture but I'm going to go into

00:24:34,039 --> 00:24:37,549
details there are billions of articles

00:24:35,749 --> 00:24:43,759
in Internet I highly recommend the one

00:24:37,549 --> 00:24:48,889
from 10 abramoff what about state of

00:24:43,759 --> 00:24:53,959
applications again let's take a look at

00:24:48,889 --> 00:24:55,549
both reactor angler well with react we

00:24:53,959 --> 00:24:57,829
have this state which is a local stable

00:24:55,549 --> 00:25:00,739
component we have the same kind of the

00:24:57,829 --> 00:25:02,929
same with angular we have the state of

00:25:00,739 --> 00:25:06,009
the instance of component or directive

00:25:02,929 --> 00:25:08,359
this is great for managing some local UI

00:25:06,009 --> 00:25:11,059
but not for the whole application state

00:25:08,359 --> 00:25:14,629
for that we can use dependency injection

00:25:11,059 --> 00:25:16,969
which is hierarchical both in react and

00:25:14,629 --> 00:25:22,369
in angular we have contacts API or

00:25:16,969 --> 00:25:24,859
services in angular or even better we

00:25:22,369 --> 00:25:29,209
can use flux architecture for in our

00:25:24,859 --> 00:25:30,859
case Redux and let's be let's let's

00:25:29,209 --> 00:25:32,779
honest let's be honest this is the only

00:25:30,859 --> 00:25:35,329
type of architecture that really

00:25:32,779 --> 00:25:37,999
decouples the state from the real

00:25:35,329 --> 00:25:40,339
framework and literally we can write the

00:25:37,999 --> 00:25:43,849
same code and we use it with any

00:25:40,339 --> 00:25:45,809
framework because with flux Redux your

00:25:43,849 --> 00:25:52,619
framework is just a renderer

00:25:45,809 --> 00:25:55,940
and tool for hydrating the data so there

00:25:52,619 --> 00:25:58,859
was state what about libraries

00:25:55,940 --> 00:26:00,869
speaking about state previously you're

00:25:58,859 --> 00:26:01,969
probably familiar with ngrick store

00:26:00,869 --> 00:26:05,429
right

00:26:01,969 --> 00:26:07,559
but ngrick stories again tightly coupled

00:26:05,429 --> 00:26:11,309
to angular you cannot use it with

00:26:07,559 --> 00:26:14,669
anything else which is kind of sad but

00:26:11,309 --> 00:26:17,249
you can use standard redux with angular

00:26:14,669 --> 00:26:18,509
redux bindings and leverage the whole

00:26:17,249 --> 00:26:22,529
ecosystem of middlewares

00:26:18,509 --> 00:26:26,219
that exists react angular you name it

00:26:22,529 --> 00:26:30,299
also for writing efficient selectors and

00:26:26,219 --> 00:26:34,200
a capsule eating your state structure

00:26:30,299 --> 00:26:37,619
you can use we select for leveraging

00:26:34,200 --> 00:26:39,059
efficient selectors again all of this is

00:26:37,619 --> 00:26:41,339
encapsulated by engineering store but

00:26:39,059 --> 00:26:44,999
it's tightly Gobbo to angular which is

00:26:41,339 --> 00:26:47,279
which depends on your use case but we

00:26:44,999 --> 00:26:50,099
are using react and angular and we

00:26:47,279 --> 00:26:53,279
cannot allow to use this one thing so we

00:26:50,099 --> 00:26:58,649
are using this kind of type of tools to

00:26:53,279 --> 00:27:01,249
leverage and reuse what about handling

00:26:58,649 --> 00:27:04,799
side effects again there is indirect

00:27:01,249 --> 00:27:08,219
slash effects which uses this effects

00:27:04,799 --> 00:27:10,469
type of thingy but we can use rejects

00:27:08,219 --> 00:27:13,679
observable which is just a middleware

00:27:10,469 --> 00:27:16,679
it's agnostic so I can use it with with

00:27:13,679 --> 00:27:22,739
pure Redux and it uses rxjs under the

00:27:16,679 --> 00:27:24,239
hood and what is that epic so here is

00:27:22,739 --> 00:27:27,269
traditional one-way dataflow right I

00:27:24,239 --> 00:27:29,369
have a component item is action action

00:27:27,269 --> 00:27:33,419
goes to reducer with this theorem is new

00:27:29,369 --> 00:27:38,669
state and component vendors so then

00:27:33,419 --> 00:27:41,190
there is epic and after all reducers are

00:27:38,669 --> 00:27:45,029
done the stream of actions flows to the

00:27:41,190 --> 00:27:48,479
epic and epic hooks particular types of

00:27:45,029 --> 00:27:51,239
actions and execute some side effect in

00:27:48,479 --> 00:27:53,999
our case it's most of the time API call

00:27:51,239 --> 00:27:58,019
to our server and when we get response

00:27:53,999 --> 00:27:59,670
or reject or with with error we just

00:27:58,019 --> 00:28:02,370
emit a new type of action

00:27:59,670 --> 00:28:05,040
to a pipeline and again the action

00:28:02,370 --> 00:28:07,620
traverses travels to all the reducers

00:28:05,040 --> 00:28:11,040
and then we are again back to or one way

00:28:07,620 --> 00:28:14,040
data flow with redux so epochs is just

00:28:11,040 --> 00:28:21,300
actions in actions out-powered by Eric's

00:28:14,040 --> 00:28:24,450
yes last type of libraries that we can

00:28:21,300 --> 00:28:27,750
use this is kinda controversial okay you

00:28:24,450 --> 00:28:31,370
can use Axios which is dollar HTTP

00:28:27,750 --> 00:28:35,430
service taken from angularjs and

00:28:31,370 --> 00:28:37,830
rewritten to be able to reuse with any

00:28:35,430 --> 00:28:40,260
particulate any particular technology so

00:28:37,830 --> 00:28:43,320
you can use excuse with you react or

00:28:40,260 --> 00:28:45,390
angular and its promise based I don't

00:28:43,320 --> 00:28:47,870
know about you but I don't really need

00:28:45,390 --> 00:28:50,940
the power of observables when I'm using

00:28:47,870 --> 00:28:52,500
redirects observable or ngx effect for

00:28:50,940 --> 00:28:56,160
managing the state because that Eric's

00:28:52,500 --> 00:28:59,810
power is back there so I'm using just

00:28:56,160 --> 00:29:03,600
Axios for fetching the data or writing

00:28:59,810 --> 00:29:07,350
interceptors and if you're using excuse

00:29:03,600 --> 00:29:10,620
and promise base api's even your effects

00:29:07,350 --> 00:29:13,470
or epics they'll be simpler so you don't

00:29:10,620 --> 00:29:21,810
have to pipe you just do traditional

00:29:13,470 --> 00:29:27,030
damn catch with promises so we are at

00:29:21,810 --> 00:29:29,810
the end what did we learn today we

00:29:27,030 --> 00:29:32,910
introduce some tombstones for existing

00:29:29,810 --> 00:29:34,710
standards ship with angular and we

00:29:32,910 --> 00:29:37,260
learned that we don't have to be afraid

00:29:34,710 --> 00:29:38,760
and we can look outside of our

00:29:37,260 --> 00:29:41,280
particular environment in our case

00:29:38,760 --> 00:29:43,680
angular and learn from other ecosystems

00:29:41,280 --> 00:29:49,920
even leverage those ecosystems for all

00:29:43,680 --> 00:29:53,300
for all or benefit we introduce better

00:29:49,920 --> 00:29:54,810
CLI defaults from libraries perspective

00:29:53,300 --> 00:29:57,270
good VDX

00:29:54,810 --> 00:30:00,030
with legs observable Axios for api calls

00:29:57,270 --> 00:30:02,040
from the architecture reactive on the

00:30:00,030 --> 00:30:04,710
data flow with reacts and from the

00:30:02,040 --> 00:30:07,380
tooling prettier just for an interesting

00:30:04,710 --> 00:30:10,050
story book for writing or catalogs and

00:30:07,380 --> 00:30:14,270
components test cafe for reliable and

00:30:10,050 --> 00:30:14,270
fast engine testing and that's it

00:30:15,410 --> 00:30:19,770
I've also written blog post about this

00:30:17,790 --> 00:30:22,380
in greater detail you can check it out

00:30:19,770 --> 00:30:25,080
on my minion blog I prepared also

00:30:22,380 --> 00:30:27,680
starter with all these tools and an

00:30:25,080 --> 00:30:30,350
example app so you can really see that I

00:30:27,680 --> 00:30:35,130
wasn't just talking but it really works

00:30:30,350 --> 00:30:38,280
and last but not least I prepare a

00:30:35,130 --> 00:30:41,550
custom schematics for CLI it's under my

00:30:38,280 --> 00:30:44,880
NPM scope name margin is Co Hotel

00:30:41,550 --> 00:30:52,110
schematics and you can put new app with

00:30:44,880 --> 00:30:54,270
my schematics like this ingénue my app I

00:30:52,110 --> 00:31:04,010
will use my custom collection of

00:30:54,270 --> 00:31:04,010
schematics I tab so slowly

00:31:06,600 --> 00:31:11,620
and if you'll create the standard

00:31:08,770 --> 00:31:13,810
angular app with DOS better tools that

00:31:11,620 --> 00:31:14,170
I'd showcase today so now if we check it

00:31:13,810 --> 00:31:17,050
out

00:31:14,170 --> 00:31:18,820
I will introduce more schematics like to

00:31:17,050 --> 00:31:22,120
introduce Jess to existing code base

00:31:18,820 --> 00:31:25,750
with refactoring because Jasmin uses

00:31:22,120 --> 00:31:28,600
some different spies than just so this

00:31:25,750 --> 00:31:32,320
is in pipeline after angular CLI 6 will

00:31:28,600 --> 00:31:35,800
be released definitely take a closer

00:31:32,320 --> 00:31:38,200
look at this if you're interested and in

00:31:35,800 --> 00:31:39,880
the end as I said we don't have to fight

00:31:38,200 --> 00:31:42,220
and hate on other communities or on

00:31:39,880 --> 00:31:46,120
other technologies instead we can learn

00:31:42,220 --> 00:31:48,760
and become profit with that said thanks

00:31:46,120 --> 00:31:49,230
for invitin thank you very much for

00:31:48,760 --> 00:31:52,819
attention

00:31:49,230 --> 00:31:52,819

YouTube URL: https://www.youtube.com/watch?v=oZEmFfgSjeg


