Title: Angular Vienna, Sending the Angular app into deep, deep offline with Workbox, March 2019
Publication date: 2019-03-06
Playlist: Angular Vienna
Description: 
	Talk by Maxim Salnikov:

There is no need to advocate for progressive web apps anymore. The idea of connection-independent applications has proven its viability and we see more and more large and small projects following that path, making the offline-ready behavior a best practice, good manner of the web. In my session, based on the deep exploration of Service Worker API possibilities and gathered UX gotchas, we go through the history of the offline web, the importance of treating the network as an enhancement, current challenges (and their solutions) and proper tooling. We architect our offline-ready Angular app applying the best tech and UX practices adding the features one-by-one: app shell, caching resources and data, sync when online. All in name of our users who demand the new level of the resilient web experience.
Captions: 
	00:00:00,030 --> 00:00:06,810
so today let's answer the simple

00:00:04,230 --> 00:00:11,730
question how do we build our and allure

00:00:06,810 --> 00:00:13,650
application of line ready but not only

00:00:11,730 --> 00:00:16,320
angular because what we learn today is

00:00:13,650 --> 00:00:21,300
totally applicable to any other

00:00:16,320 --> 00:00:25,199
framework or framework list apps vanilla

00:00:21,300 --> 00:00:28,199
JavaScript up to pretty much everything

00:00:25,199 --> 00:00:32,610
my name is Maxime I came to you from

00:00:28,199 --> 00:00:34,890
Oslo I run similar meetup in Oslo and

00:00:32,610 --> 00:00:37,739
gloss blue meet up so we are soul mates

00:00:34,890 --> 00:00:39,660
with dear organizers it's my great

00:00:37,739 --> 00:00:43,500
pleasure to be here

00:00:39,660 --> 00:00:45,329
also I run like lots of other meetups

00:00:43,500 --> 00:00:47,520
and a couple of conferences one of them

00:00:45,329 --> 00:00:53,010
is energy Vikings this is why you see

00:00:47,520 --> 00:00:55,320
this funny photo of me so if you already

00:00:53,010 --> 00:01:01,260
bought ticket to energy Vikings this

00:00:55,320 --> 00:01:04,559
great job your organizers if you didn't

00:01:01,260 --> 00:01:10,170
buy it and you don't know how to get 20%

00:01:04,559 --> 00:01:13,890
discount then bad job your organizers so

00:01:10,170 --> 00:01:15,869
yes we work on every community every

00:01:13,890 --> 00:01:19,920
angular JavaScript front-end community

00:01:15,869 --> 00:01:22,170
can get decent discount to get to this

00:01:19,920 --> 00:01:23,490
conference we are by developers for

00:01:22,170 --> 00:01:26,130
developers we are not professional

00:01:23,490 --> 00:01:27,960
organizers we do our best to create

00:01:26,130 --> 00:01:30,540
something cool so like we don't care

00:01:27,960 --> 00:01:34,530
about profit etc we registered as

00:01:30,540 --> 00:01:38,159
nonprofit but still we have to like earn

00:01:34,530 --> 00:01:39,930
some money to to bring speakers to

00:01:38,159 --> 00:01:43,220
deliver good venue

00:01:39,930 --> 00:01:45,930
you're very welcome it's end of May in

00:01:43,220 --> 00:01:50,189
Copenhagen Denmark this is my Twitter

00:01:45,930 --> 00:01:52,409
web max are you this could be useful for

00:01:50,189 --> 00:01:54,780
you to follow me because I will share

00:01:52,409 --> 00:01:58,020
this slide deck right after my session

00:01:54,780 --> 00:02:00,570
it's totally online plus what I tweet

00:01:58,020 --> 00:02:03,810
about mainly I'd I tweet about old and

00:02:00,570 --> 00:02:05,490
use about angular about front-end in

00:02:03,810 --> 00:02:09,030
general about progressive web apps of

00:02:05,490 --> 00:02:12,870
course and just as a couple of examples

00:02:09,030 --> 00:02:15,680
of twit you might see there and at the

00:02:12,870 --> 00:02:19,260
same time some latest news about

00:02:15,680 --> 00:02:24,030
progressive web apps and modern web in

00:02:19,260 --> 00:02:27,410
general so I'll try not to put my there

00:02:24,030 --> 00:02:31,129
but yes so my Twitter's webmix are you

00:02:27,410 --> 00:02:35,400
what we have here some great news about

00:02:31,129 --> 00:02:40,170
new API so soon soon we'll have full

00:02:35,400 --> 00:02:43,500
access to file system in our JavaScript

00:02:40,170 --> 00:02:45,870
application which is quite quite scary

00:02:43,500 --> 00:02:49,410
in terms of security but still this is a

00:02:45,870 --> 00:02:52,430
natural step we want to totally fill the

00:02:49,410 --> 00:02:56,489
gap between native apps we can build and

00:02:52,430 --> 00:02:59,340
possibilities of web platform so the API

00:02:56,489 --> 00:03:01,170
is under development so this is not

00:02:59,340 --> 00:03:03,269
implementation yet and development but

00:03:01,170 --> 00:03:06,989
API itself it's quite challenging you

00:03:03,269 --> 00:03:13,190
know to implement something secure next

00:03:06,989 --> 00:03:16,650
good news from Apple it's quite you know

00:03:13,190 --> 00:03:19,290
limited stream of the news about service

00:03:16,650 --> 00:03:24,659
workers and PW is from from that company

00:03:19,290 --> 00:03:27,900
and some releases bring something new

00:03:24,659 --> 00:03:31,560
some releases brink regressions but the

00:03:27,900 --> 00:03:33,750
last one was pretty optimistic so they

00:03:31,560 --> 00:03:37,620
continue their work on serviceworker api

00:03:33,750 --> 00:03:40,110
they fixed lots of nasty bugs so now you

00:03:37,620 --> 00:03:43,530
can implement more or less

00:03:40,110 --> 00:03:46,640
production-ready stuff for iOS and the

00:03:43,530 --> 00:03:50,069
funny thing they never call this concept

00:03:46,640 --> 00:03:53,760
PWA for some reason mmm I don't know why

00:03:50,069 --> 00:03:59,159
they call it web sites saved to the home

00:03:53,760 --> 00:04:01,709
screen so I introduced a new kronum wsh

00:03:59,159 --> 00:04:03,629
so if you see something like this then

00:04:01,709 --> 00:04:06,150
you know what what it's all about right

00:04:03,629 --> 00:04:10,769
in in reality and the last one i want to

00:04:06,150 --> 00:04:14,569
share with you is about another great

00:04:10,769 --> 00:04:16,729
api scamming to the web it's about

00:04:14,569 --> 00:04:20,280
setting

00:04:16,729 --> 00:04:22,199
triggers for i don't know some future

00:04:20,280 --> 00:04:24,759
events for now we are talking about time

00:04:22,199 --> 00:04:27,990
triggers so basically you can

00:04:24,759 --> 00:04:31,360
implement something like alarm app on

00:04:27,990 --> 00:04:33,400
for example Android system mainly it all

00:04:31,360 --> 00:04:36,360
starts from from Android like like

00:04:33,400 --> 00:04:39,099
sandbox to play with this API again

00:04:36,360 --> 00:04:42,069
there is design doc of this API is

00:04:39,099 --> 00:04:44,139
available not we are not talking about

00:04:42,069 --> 00:04:46,150
implementation of this API yeah but

00:04:44,139 --> 00:04:49,960
still the the progress is clearly

00:04:46,150 --> 00:04:52,810
visible we really want to have our web

00:04:49,960 --> 00:04:55,900
applications as powerful as native ones

00:04:52,810 --> 00:04:58,500
on any device without any wrappers

00:04:55,900 --> 00:05:03,639
because the platform is cool right

00:04:58,500 --> 00:05:07,300
before we dive deep into angular and

00:05:03,639 --> 00:05:11,169
workbooks just a brief reminder what is

00:05:07,300 --> 00:05:15,090
speed away at all and important notice

00:05:11,169 --> 00:05:18,039
I'm here not to like promote and

00:05:15,090 --> 00:05:20,440
evangelize about PW a bit this will this

00:05:18,039 --> 00:05:24,159
will take too much time so let's pretend

00:05:20,440 --> 00:05:25,719
that you want to build this object I

00:05:24,159 --> 00:05:27,669
don't have to convince you right so you

00:05:25,719 --> 00:05:32,800
heard about PW a from here from there

00:05:27,669 --> 00:05:35,650
now it's time to really try this in a

00:05:32,800 --> 00:05:38,699
couple of words what is what SP ee this

00:05:35,650 --> 00:05:41,680
is this is just the way we built our web

00:05:38,699 --> 00:05:45,250
products i don't want to overuse web

00:05:41,680 --> 00:05:48,190
apps because not every web product is

00:05:45,250 --> 00:05:51,430
what we call application right so we can

00:05:48,190 --> 00:05:54,940
easily reason about regular websites and

00:05:51,430 --> 00:05:58,029
they benefit from adding some features

00:05:54,940 --> 00:06:02,889
from serviceworker api also so it's not

00:05:58,029 --> 00:06:06,279
limited to SP ASP s only so we built our

00:06:02,889 --> 00:06:10,719
web products using modern api is exposed

00:06:06,279 --> 00:06:12,819
by evergreen browsers why to deliver the

00:06:10,719 --> 00:06:19,569
best possible experience for our users

00:06:12,819 --> 00:06:21,969
so it's for them and for us these apps

00:06:19,569 --> 00:06:25,779
will work everywhere right so it's good

00:06:21,969 --> 00:06:28,629
good for us one code runs everywhere and

00:06:25,779 --> 00:06:31,960
no need for any kind of cross

00:06:28,629 --> 00:06:34,240
compilation wrappers whatever javascript

00:06:31,960 --> 00:06:36,909
is native of course for the browser's

00:06:34,240 --> 00:06:37,930
themselves it's obvious right but also

00:06:36,909 --> 00:06:41,080
for the

00:06:37,930 --> 00:06:43,560
operating systems of course having like

00:06:41,080 --> 00:06:45,729
full-scale api is impossible without

00:06:43,560 --> 00:06:49,660
support like direct support from

00:06:45,729 --> 00:06:52,600
operating system side then we can tell

00:06:49,660 --> 00:06:55,090
that yes our JavaScript code is native

00:06:52,600 --> 00:06:58,479
for this system cool

00:06:55,090 --> 00:07:02,139
I stopped to give for this compatibility

00:06:58,479 --> 00:07:04,930
tables where that works because it works

00:07:02,139 --> 00:07:09,699
everywhere now not not every sync but

00:07:04,930 --> 00:07:12,729
everywhere so let's have it like this we

00:07:09,699 --> 00:07:14,949
are at angular meetup and this is

00:07:12,729 --> 00:07:19,120
angular user group right so what's about

00:07:14,949 --> 00:07:22,169
an angular support obviously angular

00:07:19,120 --> 00:07:26,460
like any other modern framework is

00:07:22,169 --> 00:07:30,940
embracing this idea and we can create

00:07:26,460 --> 00:07:33,669
progressive web app in many ways first

00:07:30,940 --> 00:07:37,169
we can do everything by hand totally

00:07:33,669 --> 00:07:42,280
possible it's JavaScript code after all

00:07:37,169 --> 00:07:44,110
then we can use the tools exposed by

00:07:42,280 --> 00:07:46,810
angular team called angular Service

00:07:44,110 --> 00:07:49,060
Worker and I have just a couple of

00:07:46,810 --> 00:07:53,310
slides about this just just give a quick

00:07:49,060 --> 00:07:55,810
overview or use some other tooling and

00:07:53,310 --> 00:07:59,560
this is not a secret today we are

00:07:55,810 --> 00:08:01,870
talking about workbooks I think I can

00:07:59,560 --> 00:08:04,270
say safely say that this is kind of

00:08:01,870 --> 00:08:07,150
industry standard at the moment it's

00:08:04,270 --> 00:08:10,080
obviously the most popular way to build

00:08:07,150 --> 00:08:15,720
PWA for any framework as i mentioned

00:08:10,080 --> 00:08:20,740
before we say how to do this let's

00:08:15,720 --> 00:08:24,520
architect a bit and let's think what

00:08:20,740 --> 00:08:26,949
will it take to create Minimum Viable PW

00:08:24,520 --> 00:08:30,820
like MVP pill away so what should we add

00:08:26,949 --> 00:08:35,469
to our like regular website to even call

00:08:30,820 --> 00:08:39,789
this a progressive one first we have to

00:08:35,469 --> 00:08:41,529
provide web app manifest but it's not so

00:08:39,789 --> 00:08:43,839
much about development here this is

00:08:41,529 --> 00:08:46,089
basically a JSON file following web app

00:08:43,839 --> 00:08:49,720
manifest standard which is given your

00:08:46,089 --> 00:08:52,000
app name and set of icons and brand

00:08:49,720 --> 00:08:55,120
colors so we are today we are not

00:08:52,000 --> 00:08:58,720
this application shell this is way more

00:08:55,120 --> 00:09:01,750
interesting because it will take some

00:08:58,720 --> 00:09:04,170
efforts from us if we want to create it

00:09:01,750 --> 00:09:08,439
by hands and create it in a proper way

00:09:04,170 --> 00:09:13,480
and next two things I think and I hope

00:09:08,439 --> 00:09:15,790
that we do our we make our products like

00:09:13,480 --> 00:09:18,250
this just by default right so it's it's

00:09:15,790 --> 00:09:22,240
not about peed away at all this is just

00:09:18,250 --> 00:09:26,019
a good manner for the web let's have our

00:09:22,240 --> 00:09:28,870
apps responsive and served over HTTP but

00:09:26,019 --> 00:09:32,470
if you comply with this to be with this

00:09:28,870 --> 00:09:35,350
four options you can safely call your

00:09:32,470 --> 00:09:37,959
application and progressive one so today

00:09:35,350 --> 00:09:41,610
we focus at least we start from from the

00:09:37,959 --> 00:09:45,579
application shell and let's continue our

00:09:41,610 --> 00:09:50,319
architecting session so let's imagine we

00:09:45,579 --> 00:09:53,050
have an application and I have this like

00:09:50,319 --> 00:09:56,439
mobile layout just to save some space so

00:09:53,050 --> 00:09:58,750
do not be like biased by thinking that P

00:09:56,439 --> 00:10:01,480
double a is something only for mobile

00:09:58,750 --> 00:10:03,899
web no totally it's it's for for

00:10:01,480 --> 00:10:07,329
everywhere so first we have to

00:10:03,899 --> 00:10:10,149
understand which resources we exactly

00:10:07,329 --> 00:10:14,639
need to have in them up shop app shell

00:10:10,149 --> 00:10:20,439
this is say it's not part of feed away

00:10:14,639 --> 00:10:22,180
ideas this is say architecture of one

00:10:20,439 --> 00:10:25,660
one of the possible approach how do we

00:10:22,180 --> 00:10:31,029
build our apps pretty pretty simple when

00:10:25,660 --> 00:10:32,920
we think about our application itself

00:10:31,029 --> 00:10:36,459
like set of resources like JavaScript

00:10:32,920 --> 00:10:39,779
HTML CSS maybe some image yes some

00:10:36,459 --> 00:10:42,819
limited set of resources we have to

00:10:39,779 --> 00:10:47,259
fetch from the web and give to the

00:10:42,819 --> 00:10:50,649
browser to display our UI so something

00:10:47,259 --> 00:10:54,699
meaningful not just like loading

00:10:50,649 --> 00:10:57,579
indicator just imagine that you take

00:10:54,699 --> 00:10:59,589
your mobile device and you open any

00:10:57,579 --> 00:11:02,679
application there like like Facebook and

00:10:59,589 --> 00:11:04,929
you don't care the tape at the time are

00:11:02,679 --> 00:11:06,170
you connected to the network or not you

00:11:04,929 --> 00:11:09,230
always know the

00:11:06,170 --> 00:11:11,270
at least you I will be loaded and let's

00:11:09,230 --> 00:11:13,820
have same idea what applies the same

00:11:11,270 --> 00:11:16,300
idea for our web apps and now it's

00:11:13,820 --> 00:11:19,280
totally possible so we pick the

00:11:16,300 --> 00:11:23,470
resources assets files you name it we

00:11:19,280 --> 00:11:26,360
need them we don't want to always have

00:11:23,470 --> 00:11:28,730
the same version cached

00:11:26,360 --> 00:11:30,290
forever and solved forever right so we

00:11:28,730 --> 00:11:33,590
have to provide some kind of versioning

00:11:30,290 --> 00:11:36,260
and the best way for us to differentiate

00:11:33,590 --> 00:11:39,410
between version 1 and version 2 is to

00:11:36,260 --> 00:11:41,600
have some hash stamps then we will

00:11:39,410 --> 00:11:44,540
exactly know that something was changed

00:11:41,600 --> 00:11:47,350
so we have to calculate this cash then

00:11:44,540 --> 00:11:52,550
it wasn't on the build time then on the

00:11:47,350 --> 00:11:55,490
run time we have to put these assets

00:11:52,550 --> 00:12:00,280
into cash and this is very specific cash

00:11:55,490 --> 00:12:03,920
it's not the old gold HTTP cache this is

00:12:00,280 --> 00:12:05,420
like relatively new one but it exists in

00:12:03,920 --> 00:12:06,980
all the browsers code called cache

00:12:05,420 --> 00:12:09,770
storage it's very specific type of

00:12:06,980 --> 00:12:13,730
storage it's designed specifically to

00:12:09,770 --> 00:12:16,730
cache requests and responses so it's

00:12:13,730 --> 00:12:20,630
it's very very specific okay so we we

00:12:16,730 --> 00:12:23,390
have to put this assets right and on all

00:12:20,630 --> 00:12:25,400
the next loads we just have to instead

00:12:23,390 --> 00:12:28,400
of going to network we go to cache and

00:12:25,400 --> 00:12:30,770
give this files to the browser right and

00:12:28,400 --> 00:12:31,880
this way we actually provide offline

00:12:30,770 --> 00:12:37,910
support because we don't care about

00:12:31,880 --> 00:12:40,010
network anymore about versioning we have

00:12:37,910 --> 00:12:42,920
to do some extra checks of course on

00:12:40,010 --> 00:12:47,240
every load right not to have the stale

00:12:42,920 --> 00:12:49,760
version so we have to provide some logic

00:12:47,240 --> 00:12:56,180
about fetching new versions comparing

00:12:49,760 --> 00:12:58,040
and all that stuff why because if the

00:12:56,180 --> 00:13:01,070
version was updated we have to of course

00:12:58,040 --> 00:13:03,050
update the cache right and then on the

00:13:01,070 --> 00:13:07,850
next load this is why I have this n plus

00:13:03,050 --> 00:13:11,060
1 load we can serve updated one at the

00:13:07,850 --> 00:13:13,610
moment when we served immediately

00:13:11,060 --> 00:13:15,230
something from the cache but we already

00:13:13,610 --> 00:13:17,770
know that there is a new version

00:13:15,230 --> 00:13:20,650
available of course it would be cool

00:13:17,770 --> 00:13:23,980
to have some message to our user because

00:13:20,650 --> 00:13:27,220
maybe they want to update maybe not if

00:13:23,980 --> 00:13:29,410
for example if they feel some long-form

00:13:27,220 --> 00:13:31,810
and they got this message after few

00:13:29,410 --> 00:13:34,090
seconds maybe that they don't care they

00:13:31,810 --> 00:13:37,810
they just want to complete what they do

00:13:34,090 --> 00:13:39,460
so technically we can force reload this

00:13:37,810 --> 00:13:44,500
immediately but please don't do this

00:13:39,460 --> 00:13:47,590
just a given message we can split all

00:13:44,500 --> 00:13:50,940
the tasks into three chapters right

00:13:47,590 --> 00:13:52,120
first it's something we do on build

00:13:50,940 --> 00:13:54,940
second

00:13:52,120 --> 00:13:55,990
it's about runtime and actually and it's

00:13:54,940 --> 00:13:59,400
serviceworker

00:13:55,990 --> 00:14:03,610
which is responsible for all this

00:13:59,400 --> 00:14:06,460
complex logic and sort this is formally

00:14:03,610 --> 00:14:09,460
not a part of this PW checklist we we

00:14:06,460 --> 00:14:12,400
had earlier but still this is really an

00:14:09,460 --> 00:14:14,590
good practice I'd say best best practice

00:14:12,400 --> 00:14:17,530
so why not to implement this as well so

00:14:14,590 --> 00:14:20,220
one two three let's have a look what

00:14:17,530 --> 00:14:23,110
will this take to implement everything

00:14:20,220 --> 00:14:26,560
manually just to understand why do we

00:14:23,110 --> 00:14:31,900
need this extra tools extra automation

00:14:26,560 --> 00:14:33,550
extra help after all at all right super

00:14:31,900 --> 00:14:35,170
brief I I think this will be like the

00:14:33,550 --> 00:14:37,870
shortest introduction to serviceworker

00:14:35,170 --> 00:14:40,660
api is ever so what is this at all this

00:14:37,870 --> 00:14:44,010
is JavaScript code in form of JavaScript

00:14:40,660 --> 00:14:49,120
file or files so we can implement some

00:14:44,010 --> 00:14:51,760
structure formally this is worker one

00:14:49,120 --> 00:14:53,650
kind of workers we have on the web and

00:14:51,760 --> 00:14:58,450
this is event driven one

00:14:53,650 --> 00:15:00,790
it went we'll let's keep this in mind we

00:14:58,450 --> 00:15:04,360
can think about serviceworker like about

00:15:00,790 --> 00:15:09,670
some kind of gate which is responsible

00:15:04,360 --> 00:15:13,390
for managing all the outgoing requests

00:15:09,670 --> 00:15:16,530
HTTP or to be precise HTTP requests from

00:15:13,390 --> 00:15:20,020
our app to to any external place like

00:15:16,530 --> 00:15:25,000
OAP I extraordinary PII CDN whatever so

00:15:20,020 --> 00:15:27,240
using serviceworker we can give any kind

00:15:25,000 --> 00:15:29,650
of responses to any kind of requests

00:15:27,240 --> 00:15:30,089
furthermore our serviceworker can react

00:15:29,650 --> 00:15:33,509
on

00:15:30,089 --> 00:15:35,610
some external events from the network

00:15:33,509 --> 00:15:39,240
and maybe you can tell me what kind of

00:15:35,610 --> 00:15:41,699
events do we get from from the network

00:15:39,240 --> 00:15:45,149
which we can catch by our service worker

00:15:41,699 --> 00:15:50,160
even when our app is not running at all

00:15:45,149 --> 00:15:53,759
even when the browser is closed right

00:15:50,160 --> 00:15:57,839
it's push notifications magic of

00:15:53,759 --> 00:16:01,499
serviceworker is that it's kind of

00:15:57,839 --> 00:16:03,209
always on duty and compared to our

00:16:01,499 --> 00:16:05,279
application which can be loaded it can

00:16:03,209 --> 00:16:06,809
be not loaded and this is like crucial

00:16:05,279 --> 00:16:10,019
difference for example from from

00:16:06,809 --> 00:16:13,470
WebSockets this is very very interesting

00:16:10,019 --> 00:16:16,589
so and if we think about our app and the

00:16:13,470 --> 00:16:20,600
browser operating system SS home then a

00:16:16,589 --> 00:16:24,329
service worker is a kind of janitor good

00:16:20,600 --> 00:16:28,259
now we know how to do this logically

00:16:24,329 --> 00:16:31,259
right so let's have a look how we called

00:16:28,259 --> 00:16:34,589
it and of course let's start from this

00:16:31,259 --> 00:16:36,170
application shell very very schematic

00:16:34,589 --> 00:16:38,459
understanding of how that works

00:16:36,170 --> 00:16:40,920
you remember that service worker is

00:16:38,459 --> 00:16:43,889
event-driven workers so basically all

00:16:40,920 --> 00:16:47,360
the code we have inside is wrapped into

00:16:43,889 --> 00:16:49,800
some form some kind of event and then

00:16:47,360 --> 00:16:52,559
install one of these events this is a

00:16:49,800 --> 00:16:56,209
good place to actually put everything

00:16:52,559 --> 00:17:01,290
into cash using cash storage API good

00:16:56,209 --> 00:17:02,819
next event is activate when our service

00:17:01,290 --> 00:17:07,079
worker actually takes control service

00:17:02,819 --> 00:17:10,939
worker has quite interesting and to some

00:17:07,079 --> 00:17:14,480
form a sophisticated life cycle it's

00:17:10,939 --> 00:17:17,880
taking control of the page not the right

00:17:14,480 --> 00:17:19,709
after it was fetched and loaded and

00:17:17,880 --> 00:17:21,720
installed if you didn't provide some

00:17:19,709 --> 00:17:23,850
shortcuts this is why we have this

00:17:21,720 --> 00:17:26,069
specific event called activate and this

00:17:23,850 --> 00:17:27,600
is good time for us to clean the

00:17:26,069 --> 00:17:29,760
previous carry because we won't don't

00:17:27,600 --> 00:17:33,990
want to have all the versions on the

00:17:29,760 --> 00:17:36,720
user's machine right looks not very

00:17:33,990 --> 00:17:40,820
complex right but in the real world we

00:17:36,720 --> 00:17:42,770
have to deal with lots of same side

00:17:40,820 --> 00:17:45,740
effects lots

00:17:42,770 --> 00:17:49,820
for edge cases and after all we have to

00:17:45,740 --> 00:17:53,180
deal with quite specific parts of HTTP

00:17:49,820 --> 00:17:56,920
protocol because work with the network

00:17:53,180 --> 00:18:00,710
it's not the the simplest part right and

00:17:56,920 --> 00:18:05,480
cache invalidation is only it's also not

00:18:00,710 --> 00:18:09,500
the trivial work to do we have to think

00:18:05,480 --> 00:18:12,380
about many many things okay just imagine

00:18:09,500 --> 00:18:17,690
we implemented everything now we have

00:18:12,380 --> 00:18:22,220
our cache populated and we will manage

00:18:17,690 --> 00:18:24,740
this in some form now it's time to

00:18:22,220 --> 00:18:27,590
intercept the requests because how this

00:18:24,740 --> 00:18:30,230
offline works serviceworker you remember

00:18:27,590 --> 00:18:33,470
it's kind of gate it sees that our

00:18:30,230 --> 00:18:35,600
application loaded into the browser

00:18:33,470 --> 00:18:39,620
requested some resource like I don't

00:18:35,600 --> 00:18:41,960
know main dot CSS and our logic inside

00:18:39,620 --> 00:18:44,540
serviceworker should say hey instead of

00:18:41,960 --> 00:18:46,730
going to the network go to the cache

00:18:44,540 --> 00:18:48,800
storage and check if this main CSS there

00:18:46,730 --> 00:18:52,190
if there then serve it from from cache

00:18:48,800 --> 00:18:54,140
if not there go to network and serve it

00:18:52,190 --> 00:18:56,060
from there and at the same time put it

00:18:54,140 --> 00:18:57,910
into the cache so it's like logic

00:18:56,060 --> 00:19:00,620
fallbacks logic fallbacks

00:18:57,910 --> 00:19:03,590
in a big big picture it could it could

00:19:00,620 --> 00:19:06,590
look something like this so we may check

00:19:03,590 --> 00:19:08,780
what is the rule because we can provide

00:19:06,590 --> 00:19:11,150
totally different logic like really read

00:19:08,780 --> 00:19:14,440
a different logic for different kind of

00:19:11,150 --> 00:19:16,880
resources for example for API we can

00:19:14,440 --> 00:19:19,730
always go for network for the

00:19:16,880 --> 00:19:22,820
application shell most likely we can try

00:19:19,730 --> 00:19:26,450
our luck with the cache if maybe it's

00:19:22,820 --> 00:19:29,480
already populated again this is very

00:19:26,450 --> 00:19:33,710
naive code of course in the real world

00:19:29,480 --> 00:19:35,750
you will find many challenges starting

00:19:33,710 --> 00:19:38,090
from you have to implement some kind of

00:19:35,750 --> 00:19:43,640
wrote in anyway if you want to have the

00:19:38,090 --> 00:19:44,810
flexible like system to manage your PWA

00:19:43,640 --> 00:19:47,540
you have to implement different

00:19:44,810 --> 00:19:49,430
strategies not only cache first or

00:19:47,540 --> 00:19:52,160
network for example stale while

00:19:49,430 --> 00:19:55,580
revalidate what does it mean and this

00:19:52,160 --> 00:19:56,780
means that on this strategy we try to

00:19:55,580 --> 00:19:59,510
serve something from cache

00:19:56,780 --> 00:20:01,970
but at the same time right right after

00:19:59,510 --> 00:20:03,860
reserved this we still go to network to

00:20:01,970 --> 00:20:07,310
check if the new version appeared

00:20:03,860 --> 00:20:09,470
if yes we update this version in cache

00:20:07,310 --> 00:20:13,130
to serve this for the next time

00:20:09,470 --> 00:20:15,710
fresh yes

00:20:13,130 --> 00:20:17,960
implementing serviceworker manually I

00:20:15,710 --> 00:20:20,900
promise this is very interesting work

00:20:17,960 --> 00:20:23,500
and I promise it's very time demanding

00:20:20,900 --> 00:20:30,020
work and I promise this is very

00:20:23,500 --> 00:20:30,530
error-prone work PWA this is progressive

00:20:30,020 --> 00:20:32,380
right

00:20:30,530 --> 00:20:36,590
so think about progressive in that

00:20:32,380 --> 00:20:38,810
acronym like exclusively about one

00:20:36,590 --> 00:20:41,420
utility think it's about progressive

00:20:38,810 --> 00:20:45,410
enhancement so our goal is to improve

00:20:41,420 --> 00:20:47,300
our app if possible but it might happen

00:20:45,410 --> 00:20:50,840
that you write service worker in the way

00:20:47,300 --> 00:20:54,500
when you not just not improve your app

00:20:50,840 --> 00:20:59,060
but you put your up to complete offline

00:20:54,500 --> 00:21:03,320
and it's quite challenging to say reset

00:20:59,060 --> 00:21:05,450
all your work because once registered

00:21:03,320 --> 00:21:11,150
service worker will try to control your

00:21:05,450 --> 00:21:13,370
page until the end and yet there were

00:21:11,150 --> 00:21:16,940
some some cases when some some big sites

00:21:13,370 --> 00:21:19,520
were offline just because some I don't

00:21:16,940 --> 00:21:21,920
know specification of Service Worker or

00:21:19,520 --> 00:21:25,580
fetch API some some internals related to

00:21:21,920 --> 00:21:28,100
security was updated but Service Worker

00:21:25,580 --> 00:21:31,730
was not ready so what do we have after

00:21:28,100 --> 00:21:33,440
all great flexibility we are here to

00:21:31,730 --> 00:21:38,870
implement everything we want at the same

00:21:33,440 --> 00:21:41,930
time great responsibility we luckily can

00:21:38,870 --> 00:21:46,660
rely on some tooling and let's say that

00:21:41,930 --> 00:21:50,450
this three points are applicable to any

00:21:46,660 --> 00:21:53,240
external library module package we use

00:21:50,450 --> 00:21:55,370
right so we don't want to implement some

00:21:53,240 --> 00:21:58,100
some complex stuff because we have to

00:21:55,370 --> 00:21:59,900
focus on our work at the same time since

00:21:58,100 --> 00:22:02,410
almost every sync is open source we can

00:21:59,900 --> 00:22:04,550
always go to check the source code to

00:22:02,410 --> 00:22:06,950
understand how that works and this will

00:22:04,550 --> 00:22:09,880
make us better developers I really

00:22:06,950 --> 00:22:11,559
recommend you to do this but

00:22:09,880 --> 00:22:14,590
the last two points are especially

00:22:11,559 --> 00:22:17,140
applicable to Service Worker and related

00:22:14,590 --> 00:22:20,380
api is because it's living standard and

00:22:17,140 --> 00:22:22,480
as I mentioned some things like some

00:22:20,380 --> 00:22:25,500
critical stuff related to security could

00:22:22,480 --> 00:22:29,100
be updated and you have to of course

00:22:25,500 --> 00:22:33,480
update your code or you have to rely on

00:22:29,100 --> 00:22:37,000
creators of this or depth library plus

00:22:33,480 --> 00:22:40,049
there are lots of edge cases related to

00:22:37,000 --> 00:22:43,539
for example lots of details in HTTP

00:22:40,049 --> 00:22:46,270
implementation so what kind of tooling

00:22:43,539 --> 00:22:48,610
do we have yes I already mentioned just

00:22:46,270 --> 00:22:50,980
couple of words about the native one

00:22:48,610 --> 00:22:56,700
from from angular team called angular

00:22:50,980 --> 00:23:00,130
service worker or ng SW it contains say

00:22:56,700 --> 00:23:04,179
good post start amount of functionality

00:23:00,130 --> 00:23:07,450
for you so application shell some

00:23:04,179 --> 00:23:09,970
possibilities to do runtime caching and

00:23:07,450 --> 00:23:13,150
managing push notifications and it's all

00:23:09,970 --> 00:23:15,640
about automation since this is say

00:23:13,150 --> 00:23:17,409
native to angular library it knows

00:23:15,640 --> 00:23:19,500
everything about your application right

00:23:17,409 --> 00:23:22,179
and it uses all the tools we have in

00:23:19,500 --> 00:23:24,909
angular so for scaffolding we use

00:23:22,179 --> 00:23:27,460
kinematics for built we use sea lion

00:23:24,909 --> 00:23:30,190
special mode and the tauren to provide

00:23:27,460 --> 00:23:32,230
all this runtime stuff we are here to

00:23:30,190 --> 00:23:35,110
use the serviceworker itself we don't

00:23:32,230 --> 00:23:38,799
write a serviceworker by hand we use the

00:23:35,110 --> 00:23:42,370
one supplied by angular team to just

00:23:38,799 --> 00:23:42,909
briefly illustrate scaffold just

00:23:42,370 --> 00:23:45,490
one-liner

00:23:42,909 --> 00:23:47,830
we apply schematics called angular KWA

00:23:45,490 --> 00:23:49,900
and in the same schematics white why

00:23:47,830 --> 00:23:54,130
it's called P EE but not serviceworker

00:23:49,900 --> 00:23:57,400
because in addition we receive some

00:23:54,130 --> 00:24:01,720
default and manifest file as a bonus for

00:23:57,400 --> 00:24:04,690
us on the build time in the special mode

00:24:01,720 --> 00:24:06,700
and blur CLI will build the

00:24:04,690 --> 00:24:08,620
configuration file for a serviceworker

00:24:06,700 --> 00:24:11,950
for you so you don't have to do anything

00:24:08,620 --> 00:24:14,110
and on runtime we have this file called

00:24:11,950 --> 00:24:15,940
ng W worker which is actually Service

00:24:14,110 --> 00:24:20,200
Worker and written by angular team for

00:24:15,940 --> 00:24:22,360
us so we don't touch this summary mg SW

00:24:20,200 --> 00:24:25,840
really easy to start

00:24:22,360 --> 00:24:29,110
integrates with angular without any

00:24:25,840 --> 00:24:31,840
problem so it will work like for 90% of

00:24:29,110 --> 00:24:35,980
the projects really after out of the box

00:24:31,840 --> 00:24:39,040
after just one one-liner if we want to

00:24:35,980 --> 00:24:40,960
tune this somehow there there is a JSON

00:24:39,040 --> 00:24:42,850
file this configuration if you need to

00:24:40,960 --> 00:24:45,270
code something there are some some

00:24:42,850 --> 00:24:48,400
moments you might want to tune you use

00:24:45,270 --> 00:24:53,260
angular style of coding so server balls

00:24:48,400 --> 00:24:57,820
depends injection so all we know and

00:24:53,260 --> 00:25:01,150
love I'd call this approach add and

00:24:57,820 --> 00:25:04,810
configure and get what's included after

00:25:01,150 --> 00:25:08,260
all so it's not extendable at all with

00:25:04,810 --> 00:25:11,500
its pros and cons so this is really good

00:25:08,260 --> 00:25:15,120
for starting and maybe for regular

00:25:11,500 --> 00:25:18,540
projects it will be enough if not I

00:25:15,120 --> 00:25:24,700
recommend you to start using word box

00:25:18,540 --> 00:25:27,820
what is word box first the amount of

00:25:24,700 --> 00:25:34,000
functionality we get out of the box is

00:25:27,820 --> 00:25:36,970
really same impressive we have pretty

00:25:34,000 --> 00:25:40,480
much all we can we can imagine and all

00:25:36,970 --> 00:25:42,430
that could ever be automated from the

00:25:40,480 --> 00:25:45,700
current set of Service Worker

00:25:42,430 --> 00:25:48,730
api s-- but the main and the really

00:25:45,700 --> 00:25:51,310
killer feature is that we can still have

00:25:48,730 --> 00:25:55,210
our own serviceworker so we have full

00:25:51,310 --> 00:25:57,580
control on this code on this file or set

00:25:55,210 --> 00:26:00,250
of files we extended by adding some

00:25:57,580 --> 00:26:03,940
features and how to do this let's start

00:26:00,250 --> 00:26:08,820
first there are three main working modes

00:26:03,940 --> 00:26:13,960
of work box CLI web pack or node module

00:26:08,820 --> 00:26:20,600
what do we prefer for angular what are

00:26:13,960 --> 00:26:24,620
your thoughts let's

00:26:20,600 --> 00:26:27,679
let's just start singing loud workbook

00:26:24,620 --> 00:26:30,320
CLI mm well it's a know quite trendy

00:26:27,679 --> 00:26:36,049
that every small library has its own CLI

00:26:30,320 --> 00:26:38,870
at the moment before appearing ng x

00:26:36,049 --> 00:26:41,450
comment it was total hell right so your

00:26:38,870 --> 00:26:44,510
global scope polluted by like dozens of

00:26:41,450 --> 00:26:48,890
this realize and it's totally known GI

00:26:44,510 --> 00:26:51,380
CD friendly in Peaks soft partially the

00:26:48,890 --> 00:26:53,809
problem but but still like any any CLI

00:26:51,380 --> 00:26:56,690
has some limitations right so what's

00:26:53,809 --> 00:26:59,090
included in CLI will work insulate not

00:26:56,690 --> 00:27:02,659
more right maybe this is not the best

00:26:59,090 --> 00:27:04,610
option webpack do we have web pack

00:27:02,659 --> 00:27:08,659
configuration file exposed in like

00:27:04,610 --> 00:27:12,039
regular angular application no we have

00:27:08,659 --> 00:27:15,440
to eject this right and then we will

00:27:12,039 --> 00:27:18,530
lose all the power of angular CLI so we

00:27:15,440 --> 00:27:21,350
got this web pack configuration but we

00:27:18,530 --> 00:27:24,470
cannot use angular CLI anymore maybe

00:27:21,350 --> 00:27:28,250
it'll not the best deal also so node

00:27:24,470 --> 00:27:32,419
module let's give it a try there is a

00:27:28,250 --> 00:27:34,280
special one called work box build and we

00:27:32,419 --> 00:27:36,650
can safely and use it to developer

00:27:34,280 --> 00:27:39,230
dependencies we use this on build time

00:27:36,650 --> 00:27:43,730
we built our serviceworker using this

00:27:39,230 --> 00:27:47,120
module plus it installs s dependencies

00:27:43,730 --> 00:27:50,570
all the other modules of workbooks let's

00:27:47,120 --> 00:27:54,590
keep this in mind this will useful for

00:27:50,570 --> 00:27:58,490
us from like one of the last slides mmm

00:27:54,590 --> 00:28:01,059
and workbooks is really modular it's not

00:27:58,490 --> 00:28:04,280
a monolithic app and we'd really like

00:28:01,059 --> 00:28:06,500
split a cross I don't know maybe ten

00:28:04,280 --> 00:28:08,750
twelve different files of course this is

00:28:06,500 --> 00:28:13,070
really great because it gives us full

00:28:08,750 --> 00:28:14,929
flexibility and we can have really we

00:28:13,070 --> 00:28:16,970
can load really what we want right but

00:28:14,929 --> 00:28:21,320
we don't have to load all this massive

00:28:16,970 --> 00:28:24,980
library ok node module let's have a look

00:28:21,320 --> 00:28:28,940
at the sample build script we could have

00:28:24,980 --> 00:28:32,870
so you remember our goal is to first

00:28:28,940 --> 00:28:35,720
define on the build time we have to

00:28:32,870 --> 00:28:37,160
defined somehow the set of resources we

00:28:35,720 --> 00:28:40,520
want to precache in our application

00:28:37,160 --> 00:28:43,160
shell and we have to build the list of

00:28:40,520 --> 00:28:46,210
this resources plus their hash so to

00:28:43,160 --> 00:28:49,880
manage versions in serviceworker later

00:28:46,210 --> 00:28:52,370
on this code very very schematic we use

00:28:49,880 --> 00:28:54,920
inject manifest method from our box

00:28:52,370 --> 00:29:00,140
build we have some kind of configuration

00:28:54,920 --> 00:29:03,740
and we inject manifest let's say for now

00:29:00,140 --> 00:29:05,600
inject something to somewhere good let's

00:29:03,740 --> 00:29:11,770
have a look on configuration what is

00:29:05,600 --> 00:29:14,179
this exactly the key options there is

00:29:11,770 --> 00:29:17,600
glow patterns this is this is how we

00:29:14,179 --> 00:29:21,230
actually say to work box built what

00:29:17,600 --> 00:29:24,429
exact files contain our application

00:29:21,230 --> 00:29:26,630
shell and we are quite flexible here in

00:29:24,429 --> 00:29:30,890
specifying this resources we can provide

00:29:26,630 --> 00:29:36,890
like full names some patterns so it's

00:29:30,890 --> 00:29:41,120
it's totally fine another important

00:29:36,890 --> 00:29:43,600
option here is source where we injected

00:29:41,120 --> 00:29:46,460
so you remember that in World Books we

00:29:43,600 --> 00:29:50,170
manage and maintain and write our own

00:29:46,460 --> 00:29:53,200
Service Worker so this is why we have

00:29:50,170 --> 00:29:57,110
our source Service Worker so what we

00:29:53,200 --> 00:29:59,510
inject and so now we now we know where

00:29:57,110 --> 00:30:02,179
to inject right and what to inject what

00:29:59,510 --> 00:30:04,610
what this work box built does it does

00:30:02,179 --> 00:30:07,790
something like this basically this is

00:30:04,610 --> 00:30:10,400
just wrapped object with the name of the

00:30:07,790 --> 00:30:13,450
asset based on this pattern and it's

00:30:10,400 --> 00:30:17,150
here so we what we do we take

00:30:13,450 --> 00:30:21,110
serviceworker source 1 and we just do

00:30:17,150 --> 00:30:24,800
file operation so we inject this array

00:30:21,110 --> 00:30:27,590
to this file and we are then done with

00:30:24,800 --> 00:30:32,120
ready to go Service Worker how this

00:30:27,590 --> 00:30:35,990
source one could look then so first we

00:30:32,120 --> 00:30:37,970
you have to fetch the library of work

00:30:35,990 --> 00:30:40,220
box itself the simplest option is to get

00:30:37,970 --> 00:30:43,130
it from CDN we'll have a look at

00:30:40,220 --> 00:30:44,780
different options a bit later and then

00:30:43,130 --> 00:30:48,500
we have really

00:30:44,780 --> 00:30:52,280
magic method called precache and route

00:30:48,500 --> 00:30:53,300
and we inject this manifest you've seen

00:30:52,280 --> 00:30:55,670
on the previous slide

00:30:53,300 --> 00:30:58,100
exactly here instead of this empty array

00:30:55,670 --> 00:31:02,270
work box built they just opens this file

00:30:58,100 --> 00:31:04,460
and put this array with resources and

00:31:02,270 --> 00:31:08,480
their Hertz here and this is pretty much

00:31:04,460 --> 00:31:12,320
what it does in the rest of the magic of

00:31:08,480 --> 00:31:15,670
this caching serving checking validating

00:31:12,320 --> 00:31:18,980
updating cache and all all the rest is

00:31:15,670 --> 00:31:21,350
up to this precache and route method

00:31:18,980 --> 00:31:25,630
this is why I call this like pure magic

00:31:21,350 --> 00:31:28,820
one so what we have to do in our angular

00:31:25,630 --> 00:31:33,050
configuration we just have to add one

00:31:28,820 --> 00:31:36,920
more comment to actually execute the

00:31:33,050 --> 00:31:37,400
file we may just have seen after our

00:31:36,920 --> 00:31:39,380
build

00:31:37,400 --> 00:31:41,780
so in our distribution folder we have

00:31:39,380 --> 00:31:44,030
ready to go and we'll or build and then

00:31:41,780 --> 00:31:45,140
we process this by world box built to

00:31:44,030 --> 00:31:47,930
get ready to go

00:31:45,140 --> 00:31:52,100
service worker good so this is how we

00:31:47,930 --> 00:31:54,920
totally solve our application shall need

00:31:52,100 --> 00:31:56,870
so then after we open the app sorry

00:31:54,920 --> 00:32:00,770
workbooks will precache what it needs

00:31:56,870 --> 00:32:03,560
and if you go to offline or if you shut

00:32:00,770 --> 00:32:05,630
down the server the atleast application

00:32:03,560 --> 00:32:09,830
shell will be ready always ready for

00:32:05,630 --> 00:32:12,740
your users but let's continue our

00:32:09,830 --> 00:32:17,360
discussion about how do we update this

00:32:12,740 --> 00:32:21,110
there is one well-known compromise or

00:32:17,360 --> 00:32:23,450
trade-off in PWA not PW but application

00:32:21,110 --> 00:32:26,150
shell architecture so you remember that

00:32:23,450 --> 00:32:28,550
we try to solve the app shell this

00:32:26,150 --> 00:32:30,710
resources from cache immediately without

00:32:28,550 --> 00:32:33,830
going to the network this is why we have

00:32:30,710 --> 00:32:36,110
behavior like this with the first

00:32:33,830 --> 00:32:39,320
version it's totally fine we deployed

00:32:36,110 --> 00:32:41,540
this we got this in the browser so

00:32:39,320 --> 00:32:43,130
displayed version number one so

00:32:41,540 --> 00:32:45,650
obviously we got it from from the

00:32:43,130 --> 00:32:50,600
network right serviceworker is not it's

00:32:45,650 --> 00:32:52,820
not taking control yet but now it has

00:32:50,600 --> 00:32:55,280
the control and the has everything pre

00:32:52,820 --> 00:32:58,190
cached just imagine that we updated our

00:32:55,280 --> 00:33:00,590
app we fixed some bug

00:32:58,190 --> 00:33:03,170
we could refresh what we see we still

00:33:00,590 --> 00:33:05,930
see old version why because this is

00:33:03,170 --> 00:33:07,610
nature of serviceworker of not

00:33:05,930 --> 00:33:11,420
serviceworker but the application shell

00:33:07,610 --> 00:33:14,420
architecture it tries to immediately

00:33:11,420 --> 00:33:17,950
serve this from care you got crazy and

00:33:14,420 --> 00:33:20,090
say speed and the performance of

00:33:17,950 --> 00:33:22,340
displaying something just because we

00:33:20,090 --> 00:33:25,670
don't ever ever go to the network but we

00:33:22,340 --> 00:33:27,740
have this trade-off if we implemented

00:33:25,670 --> 00:33:29,750
everything correctly in our manual

00:33:27,740 --> 00:33:33,620
service worker or we use workbooks or

00:33:29,750 --> 00:33:36,110
NGS W on the next refresh or on the next

00:33:33,620 --> 00:33:39,020
opening of your app you will after all

00:33:36,110 --> 00:33:42,620
the C version number two right what we

00:33:39,020 --> 00:33:44,720
can do here is to show some message to

00:33:42,620 --> 00:33:47,630
the user again this is not obligatory

00:33:44,720 --> 00:33:50,840
part of PW a checklist but still it's

00:33:47,630 --> 00:33:54,710
good to have and I bet many of you have

00:33:50,840 --> 00:33:56,720
seen similar message on a variety of

00:33:54,710 --> 00:33:59,690
websites who have seen something like

00:33:56,720 --> 00:34:03,830
this yes

00:33:59,690 --> 00:34:07,190
for me this is maybe the worst sink in I

00:34:03,830 --> 00:34:10,340
don't know P EE universe despite it says

00:34:07,190 --> 00:34:14,720
that your app is always fresh it's not

00:34:10,340 --> 00:34:18,230
really but yes we have to we have to

00:34:14,720 --> 00:34:19,730
find some some compromise here right and

00:34:18,230 --> 00:34:22,730
if you see this message what does it

00:34:19,730 --> 00:34:28,130
mean it means that you that first

00:34:22,730 --> 00:34:31,419
this is serviceworker driven origin also

00:34:28,130 --> 00:34:35,960
it means that you visited this website

00:34:31,419 --> 00:34:38,150
this web app some time before and sort

00:34:35,960 --> 00:34:41,390
that means that the version of this

00:34:38,150 --> 00:34:46,850
website was updated between your visits

00:34:41,390 --> 00:34:50,030
so this is so like obligatory create

00:34:46,850 --> 00:34:53,740
criteria and to see this message good so

00:34:50,030 --> 00:34:57,580
what does work books expose for us to

00:34:53,740 --> 00:35:02,300
say catch this moment in our application

00:34:57,580 --> 00:35:04,910
two options are available first we can

00:35:02,300 --> 00:35:07,820
use plug-in called broadcast update

00:35:04,910 --> 00:35:10,760
World Books consists of different

00:35:07,820 --> 00:35:11,390
modules and different plugins we can use

00:35:10,760 --> 00:35:14,150
in this

00:35:11,390 --> 00:35:16,940
some modules and there is a variety of

00:35:14,150 --> 00:35:19,490
like built-in plugins and we can write

00:35:16,940 --> 00:35:22,250
our own plugins so this is as flexible

00:35:19,490 --> 00:35:25,430
as possible so you remember this

00:35:22,250 --> 00:35:27,589
pre-caching module which is also

00:35:25,430 --> 00:35:30,200
containing this magic application the

00:35:27,589 --> 00:35:33,369
route method it also contains this add

00:35:30,200 --> 00:35:37,460
plugins and basically we add this line

00:35:33,369 --> 00:35:39,500
app shell this is name of of the channel

00:35:37,460 --> 00:35:42,619
we organized between our service worker

00:35:39,500 --> 00:35:46,609
and our app it can be whatever you want

00:35:42,619 --> 00:35:48,829
and in our app we use this broadcast

00:35:46,609 --> 00:35:51,680
channel API which is available in

00:35:48,829 --> 00:35:54,799
majority of the browsers and listen to

00:35:51,680 --> 00:35:58,250
this and once we have something we know

00:35:54,799 --> 00:36:02,990
that it's time to show this message okay

00:35:58,250 --> 00:36:03,950
good what we can do we can do even

00:36:02,990 --> 00:36:11,109
better

00:36:03,950 --> 00:36:14,059
so what this plug-in does it checks the

00:36:11,109 --> 00:36:16,250
set of resources we have in application

00:36:14,059 --> 00:36:18,680
shell but it doesn't care about Service

00:36:16,250 --> 00:36:20,990
Worker file itself so if we add that

00:36:18,680 --> 00:36:22,759
some more logic to the service worker we

00:36:20,990 --> 00:36:24,349
still can think that this is a new

00:36:22,759 --> 00:36:27,079
version of our application because it

00:36:24,349 --> 00:36:29,660
can change behavior of our product

00:36:27,079 --> 00:36:32,140
dramatically so how to deal with this

00:36:29,660 --> 00:36:35,119
object we also want to show something if

00:36:32,140 --> 00:36:38,440
something else except application shell

00:36:35,119 --> 00:36:42,019
set of resources was updated then we can

00:36:38,440 --> 00:36:44,890
yes in the this you still remember this

00:36:42,019 --> 00:36:47,500
is option number three we have in our

00:36:44,890 --> 00:36:50,690
imaginary application shell architecture

00:36:47,500 --> 00:36:55,309
option number two we can follow Service

00:36:50,690 --> 00:36:57,410
Worker lifecycle it's as I remember if

00:36:55,309 --> 00:37:01,069
you remember I told that this is quite

00:36:57,410 --> 00:37:03,470
interesting and if you have some free

00:37:01,069 --> 00:37:06,400
time of course it's really cool to to go

00:37:03,470 --> 00:37:10,970
through all these steps service worker

00:37:06,400 --> 00:37:14,210
goes in its life but if you want your

00:37:10,970 --> 00:37:16,069
tasks to be done and then you can dive

00:37:14,210 --> 00:37:20,089
deep into documentation later you can

00:37:16,069 --> 00:37:22,730
use helpers and how the service worker

00:37:20,089 --> 00:37:25,040
registration code is looking like like

00:37:22,730 --> 00:37:27,920
the very very default one but still

00:37:25,040 --> 00:37:30,740
contain some best practices so this is

00:37:27,920 --> 00:37:32,780
this is s say generic code as is

00:37:30,740 --> 00:37:36,020
possible not related to angular

00:37:32,780 --> 00:37:38,630
workbooks whatever this is just how we

00:37:36,020 --> 00:37:41,240
say in our application bundle that we

00:37:38,630 --> 00:37:46,790
want to register this file with service

00:37:41,240 --> 00:37:49,790
worker against this we check the feature

00:37:46,790 --> 00:37:52,850
itself so it's important because I don't

00:37:49,790 --> 00:37:54,740
know not not every browser support this

00:37:52,850 --> 00:37:56,660
like you we still have some old browsers

00:37:54,740 --> 00:37:59,750
and we still have Internet Explorer

00:37:56,660 --> 00:38:02,660
which will never support this yes so

00:37:59,750 --> 00:38:04,580
just to avoid some red lines in our

00:38:02,660 --> 00:38:09,740
application look you have to do this and

00:38:04,580 --> 00:38:12,160
next we wrap this registration into one

00:38:09,740 --> 00:38:14,480
load listener why do we do this you

00:38:12,160 --> 00:38:17,510
remember we are about progressive

00:38:14,480 --> 00:38:19,850
enhancement and it's totally fine to

00:38:17,510 --> 00:38:22,850
postpone the registration and all the

00:38:19,850 --> 00:38:25,910
stuff related to serviceworker too late

00:38:22,850 --> 00:38:28,609
moment as possible not to compete with

00:38:25,910 --> 00:38:31,400
main thread of of the browser for

00:38:28,609 --> 00:38:34,640
network resources for CPU resources so

00:38:31,400 --> 00:38:37,430
serviceworker is something that we can I

00:38:34,640 --> 00:38:40,070
don't know screw up with and fail with

00:38:37,430 --> 00:38:43,670
it should not affect our application

00:38:40,070 --> 00:38:45,890
load so let's list some requirements

00:38:43,670 --> 00:38:48,940
we'd love to have in this registration

00:38:45,890 --> 00:38:51,650
flow feature detection we have this

00:38:48,940 --> 00:38:54,200
postponing of the registration in my

00:38:51,650 --> 00:38:56,990
sample this is just unload but framework

00:38:54,200 --> 00:39:00,080
wise it's even better to have it after

00:38:56,990 --> 00:39:03,530
you I was rendered a totally because it

00:39:00,080 --> 00:39:05,300
takes some CPU power right to execute

00:39:03,530 --> 00:39:08,690
this JavaScript to draw these buttons

00:39:05,300 --> 00:39:10,340
inputs whatever and then we can hook

00:39:08,690 --> 00:39:11,750
into some lifecycle events of

00:39:10,340 --> 00:39:12,530
serviceworker to understand that

00:39:11,750 --> 00:39:19,369
serviceworker

00:39:12,530 --> 00:39:22,369
was updated okay and in most cases if we

00:39:19,369 --> 00:39:24,440
update serviceworker that means if we

00:39:22,369 --> 00:39:26,180
know that like this physical file of

00:39:24,440 --> 00:39:28,670
service work was updated it means that

00:39:26,180 --> 00:39:31,600
application was also updated right I

00:39:28,670 --> 00:39:33,560
mean there is no app update without

00:39:31,600 --> 00:39:36,020
serviceworker file update because why

00:39:33,560 --> 00:39:38,750
because we inject the manifest with her

00:39:36,020 --> 00:39:43,550
thumbs into this file so this is

00:39:38,750 --> 00:39:48,280
the trigger for us this is where word

00:39:43,550 --> 00:39:51,230
box window module helped us this is

00:39:48,280 --> 00:39:54,320
exclusively in version 4 which was

00:39:51,230 --> 00:39:59,390
released two days ago so this is s fresh

00:39:54,320 --> 00:40:01,730
content as possible as I tweeted most

00:39:59,390 --> 00:40:06,170
likely this session is the first ever

00:40:01,730 --> 00:40:08,330
public session about word books for so

00:40:06,170 --> 00:40:10,670
yes we're box window this is the first

00:40:08,330 --> 00:40:13,640
module in work box family of modules

00:40:10,670 --> 00:40:15,980
which is related not to serviceworker

00:40:13,640 --> 00:40:19,280
but to our application we use this in

00:40:15,980 --> 00:40:21,560
our app why do we do this to have nice

00:40:19,280 --> 00:40:24,230
way to register this and nice way to

00:40:21,560 --> 00:40:27,410
hook into this events without like

00:40:24,230 --> 00:40:30,020
diving too deep to exploration of

00:40:27,410 --> 00:40:34,130
serviceworker api so we install this and

00:40:30,020 --> 00:40:37,610
then in our angular code we can go for

00:40:34,130 --> 00:40:39,380
this code and this is the proper moment

00:40:37,610 --> 00:40:42,580
for us to actually register

00:40:39,380 --> 00:40:46,400
serviceworker this is resolve of

00:40:42,580 --> 00:40:48,980
bootstrap module method and this is the

00:40:46,400 --> 00:40:51,080
best place where we inject the

00:40:48,980 --> 00:40:57,520
registration code because it happens

00:40:51,080 --> 00:41:01,160
after UI is ready right so we use

00:40:57,520 --> 00:41:05,060
workbooks object from your box window

00:41:01,160 --> 00:41:07,820
and register method of these in the

00:41:05,060 --> 00:41:11,510
middle we attach some listeners they are

00:41:07,820 --> 00:41:11,930
on my next slide we basically need this

00:41:11,510 --> 00:41:17,600
one

00:41:11,930 --> 00:41:19,670
it's called installed and we have to add

00:41:17,600 --> 00:41:22,910
one more condition we have to listen to

00:41:19,670 --> 00:41:26,390
is update property of the event

00:41:22,910 --> 00:41:28,610
why because installed fired boss for

00:41:26,390 --> 00:41:32,300
like totally fresh serviceworker and

00:41:28,610 --> 00:41:34,340
updated serviceworker so this point

00:41:32,300 --> 00:41:37,060
number three where we have this message

00:41:34,340 --> 00:41:40,760
should go there

00:41:37,060 --> 00:41:43,240
otherwise it's totally optional but some

00:41:40,760 --> 00:41:46,220
sites show some message that

00:41:43,240 --> 00:41:48,050
serviceworker and they don't say about

00:41:46,220 --> 00:41:50,990
source orchid they say that like this

00:41:48,050 --> 00:41:52,339
website is ready to work offline sums

00:41:50,990 --> 00:41:56,210
like this it's a

00:41:52,339 --> 00:41:59,210
it's like totally optional but here it's

00:41:56,210 --> 00:42:01,430
important really important to have two

00:41:59,210 --> 00:42:04,779
other helpers in our service worker

00:42:01,430 --> 00:42:11,029
called skip waiting and clients claim

00:42:04,779 --> 00:42:15,349
otherwise we stuck with old service

00:42:11,029 --> 00:42:17,630
worker even after every refresh of this

00:42:15,349 --> 00:42:20,150
tab as many refreshes yes we won't we

00:42:17,630 --> 00:42:23,059
still see all the version because of

00:42:20,150 --> 00:42:25,339
specifics of service work life cycle so

00:42:23,059 --> 00:42:26,839
don't forget to add these two methods

00:42:25,339 --> 00:42:29,539
into your source worker code

00:42:26,839 --> 00:42:32,869
this is totally must have this was very

00:42:29,539 --> 00:42:36,829
brief intro to workbooks window a couple

00:42:32,869 --> 00:42:38,420
of days ago like it actually was a

00:42:36,829 --> 00:42:42,079
couple of hours before the official

00:42:38,420 --> 00:42:44,059
release I posted this blog post why

00:42:42,079 --> 00:42:48,920
because you know I collaborate with

00:42:44,059 --> 00:42:50,900
creators of workbooks I contribute so I

00:42:48,920 --> 00:42:53,660
know something in advance so this is why

00:42:50,900 --> 00:42:56,210
I was ready to blog about this and all

00:42:53,660 --> 00:42:59,359
the details about this flow you can get

00:42:56,210 --> 00:43:02,450
here so it's remember I will post the

00:42:59,359 --> 00:43:05,900
link to this slide deck it will be

00:43:02,450 --> 00:43:09,289
always under your fingers good so we are

00:43:05,900 --> 00:43:15,229
totally fine with application shell now

00:43:09,289 --> 00:43:18,319
runtime caching we go really really fast

00:43:15,229 --> 00:43:20,809
through this section because it's quite

00:43:18,319 --> 00:43:24,009
simple to implement because work box

00:43:20,809 --> 00:43:26,119
folks they did great job by

00:43:24,009 --> 00:43:29,479
simplification of this process like as

00:43:26,119 --> 00:43:31,969
as much as as possible at all so in our

00:43:29,479 --> 00:43:34,430
service worker what we do we register

00:43:31,969 --> 00:43:36,890
some some routes again and the

00:43:34,430 --> 00:43:41,710
registration of the route is pretty

00:43:36,890 --> 00:43:46,069
flexible here I use reg X and we say

00:43:41,710 --> 00:43:49,279
like let's all the routes like this will

00:43:46,069 --> 00:43:51,859
have network first strategy code another

00:43:49,279 --> 00:43:55,430
sample let's all the routes like this

00:43:51,859 --> 00:43:58,789
you'll have cache first strategy plus we

00:43:55,430 --> 00:44:00,859
can add variety of plugins to to

00:43:58,789 --> 00:44:03,499
fine-grained control every single piece

00:44:00,859 --> 00:44:05,780
of the functionality and there is a

00:44:03,499 --> 00:44:09,400
great set of strategies

00:44:05,780 --> 00:44:12,500
five of them for for any life case plus

00:44:09,400 --> 00:44:16,070
great set of plugins and you can always

00:44:12,500 --> 00:44:19,700
write your own but we have a brief look

00:44:16,070 --> 00:44:22,490
on background sync which is really

00:44:19,700 --> 00:44:24,980
interesting functionality and again it's

00:44:22,490 --> 00:44:27,490
quite challenging to implement it by

00:44:24,980 --> 00:44:30,500
hands you have to learn lots of

00:44:27,490 --> 00:44:33,290
different api's to do this but in

00:44:30,500 --> 00:44:36,080
workbooks you achieve this like with a

00:44:33,290 --> 00:44:38,960
couple of lines not even the code but of

00:44:36,080 --> 00:44:42,920
the configuration what is this about

00:44:38,960 --> 00:44:44,600
it's about postponing some events

00:44:42,920 --> 00:44:48,380
happened in our application during

00:44:44,600 --> 00:44:51,650
offline and feel the app goes online so

00:44:48,380 --> 00:44:55,490
just the best use case is you have some

00:44:51,650 --> 00:44:58,760
ID no messy messenger and your offline

00:44:55,490 --> 00:45:01,160
and you put some message you hit Send

00:44:58,760 --> 00:45:03,290
and instead of server not found you

00:45:01,160 --> 00:45:05,480
receive a message your message will be

00:45:03,290 --> 00:45:07,070
delivered when you go back to online and

00:45:05,480 --> 00:45:09,200
you can close this app you can close

00:45:07,070 --> 00:45:13,220
this browser this will be delivered and

00:45:09,200 --> 00:45:16,550
say by the properties of by the I don't

00:45:13,220 --> 00:45:20,780
know API so operating system so how to

00:45:16,550 --> 00:45:24,380
do this we use another plugin and we

00:45:20,780 --> 00:45:27,440
just provide name of the queue in my

00:45:24,380 --> 00:45:30,700
sample this is about sending tweets and

00:45:27,440 --> 00:45:35,270
hwisun give some configuration like try

00:45:30,700 --> 00:45:39,170
during 24 hours if not then just never

00:45:35,270 --> 00:45:43,400
mind and the same idea we register route

00:45:39,170 --> 00:45:47,000
and we here we provide method in

00:45:43,400 --> 00:45:51,260
addition so it will react only post

00:45:47,000 --> 00:45:53,930
methods and basically that's it so we

00:45:51,260 --> 00:45:58,540
give it's applicable to a network only

00:45:53,930 --> 00:46:02,060
and our plugin which we just introduced

00:45:58,540 --> 00:46:03,320
earlier that's that's as easy as this if

00:46:02,060 --> 00:46:05,390
you go to implement this manually

00:46:03,320 --> 00:46:07,310
believe me this is interesting but will

00:46:05,390 --> 00:46:10,190
take a lot of time and you will learn

00:46:07,310 --> 00:46:11,930
many different things about API is about

00:46:10,190 --> 00:46:14,660
how it works with indexeddb how to

00:46:11,930 --> 00:46:18,410
implement coos interesting but time

00:46:14,660 --> 00:46:21,460
consuming next push notifications a

00:46:18,410 --> 00:46:23,869
is totally out of scope of the world box

00:46:21,460 --> 00:46:27,049
World Books is all about Network

00:46:23,869 --> 00:46:29,480
automation but you remember that we

00:46:27,049 --> 00:46:32,510
still have control on our own

00:46:29,480 --> 00:46:34,609
serviceworker so why don't to use this

00:46:32,510 --> 00:46:38,210
possibility we can always add the

00:46:34,609 --> 00:46:41,480
handlers we need to do push

00:46:38,210 --> 00:46:44,480
notifications manually and this way we

00:46:41,480 --> 00:46:47,390
have as flexible logic as we need so

00:46:44,480 --> 00:46:50,619
this is how we react on push event from

00:46:47,390 --> 00:46:54,500
from there like outside Network okay

00:46:50,619 --> 00:46:57,170
this is code to show the notification

00:46:54,500 --> 00:47:01,750
itself and then we can provide any logic

00:46:57,170 --> 00:47:05,000
for what happens on the click on this

00:47:01,750 --> 00:47:07,430
notification what happens when we close

00:47:05,000 --> 00:47:09,319
this notification it will take some I

00:47:07,430 --> 00:47:14,119
don't know time to code this manually

00:47:09,319 --> 00:47:16,789
but it's full flexibility next moment

00:47:14,119 --> 00:47:19,819
you remember that I introduced the

00:47:16,789 --> 00:47:24,109
simplest use case for the workbooks when

00:47:19,819 --> 00:47:26,630
we load it from CDN I don't know how

00:47:24,109 --> 00:47:30,289
that's applicable to production mode but

00:47:26,630 --> 00:47:32,390
it's totally useless for our local

00:47:30,289 --> 00:47:35,119
development when we offline ourselves

00:47:32,390 --> 00:47:38,720
right so this is not very good to rely

00:47:35,119 --> 00:47:40,480
on Google CDN how to have everything

00:47:38,720 --> 00:47:43,849
locally

00:47:40,480 --> 00:47:44,480
another method from work box built

00:47:43,849 --> 00:47:47,569
called

00:47:44,480 --> 00:47:51,920
copy libraries so we create another

00:47:47,569 --> 00:47:53,510
JavaScript module for node so this is

00:47:51,920 --> 00:47:56,750
not for the browser this is one node

00:47:53,510 --> 00:47:59,230
this is more less one time and runner

00:47:56,750 --> 00:48:03,440
which we need it only only once for

00:47:59,230 --> 00:48:05,029
every like new version of workbooks so

00:48:03,440 --> 00:48:08,660
once we run this code

00:48:05,029 --> 00:48:14,450
we've got folder libraries with all work

00:48:08,660 --> 00:48:17,930
box modules inside okay and then don't

00:48:14,450 --> 00:48:22,329
forget in your angular configuration

00:48:17,930 --> 00:48:25,460
file to actually put this folder to

00:48:22,329 --> 00:48:27,529
assets part of your configuration for

00:48:25,460 --> 00:48:29,690
angular CLI actually copy all the

00:48:27,529 --> 00:48:32,140
modules in workbooks of our books and

00:48:29,690 --> 00:48:35,380
then inside our serviceworker

00:48:32,140 --> 00:48:37,300
instead of going to see DM we can refer

00:48:35,380 --> 00:48:42,930
to the local one so the first line

00:48:37,300 --> 00:48:46,030
saying says take this workbook says W

00:48:42,930 --> 00:48:48,190
file from the library and the second

00:48:46,030 --> 00:48:50,050
line says that take all the rest of

00:48:48,190 --> 00:48:53,200
modules from from local otherwise it

00:48:50,050 --> 00:48:56,470
still go to to CDN and what's exactly

00:48:53,200 --> 00:49:00,580
this workbooks SW this is basically like

00:48:56,470 --> 00:49:03,790
wrapper over all word books libraries to

00:49:00,580 --> 00:49:07,270
create this global workbooks object and

00:49:03,790 --> 00:49:13,240
to make sure that it loads only the

00:49:07,270 --> 00:49:15,520
packages we need so this is okay option

00:49:13,240 --> 00:49:19,120
but we still can do better

00:49:15,520 --> 00:49:23,290
what's wrong with this configuration so

00:49:19,120 --> 00:49:26,200
we still have to deploy all workbooks

00:49:23,290 --> 00:49:28,870
libraries even those we don't don't use

00:49:26,200 --> 00:49:31,540
we will not load them it's okay but

00:49:28,870 --> 00:49:34,420
still we have to deploy this this will

00:49:31,540 --> 00:49:36,580
be separate folder and so inside our

00:49:34,420 --> 00:49:39,970
application distribution and the service

00:49:36,580 --> 00:49:43,600
worker file itself will be like s is not

00:49:39,970 --> 00:49:49,420
not minified not say not not processed

00:49:43,600 --> 00:49:51,970
how can we fix this bundling it's also

00:49:49,420 --> 00:49:55,660
something really new it's also came in

00:49:51,970 --> 00:49:58,510
world box for and basically I created

00:49:55,660 --> 00:50:03,610
this slides this morning so I tried this

00:49:58,510 --> 00:50:06,310
morning we can implement bundling for

00:50:03,610 --> 00:50:08,680
our Service Worker file exactly the way

00:50:06,310 --> 00:50:13,180
we do it for the rest of our application

00:50:08,680 --> 00:50:15,520
and all the bundles are for our service

00:50:13,180 --> 00:50:18,100
so then the code inside our Service

00:50:15,520 --> 00:50:21,250
Worker will look like say the code of

00:50:18,100 --> 00:50:25,470
modern JavaScript application right so

00:50:21,250 --> 00:50:29,200
we do some imports and documentation

00:50:25,470 --> 00:50:33,190
very explicitly says how to find this

00:50:29,200 --> 00:50:36,280
particular method in in this particular

00:50:33,190 --> 00:50:41,050
module so you will not get any problems

00:50:36,280 --> 00:50:42,609
you see that we got rid of this global

00:50:41,050 --> 00:50:49,739
work box object

00:50:42,609 --> 00:50:52,569
we use only methods we want to use but

00:50:49,739 --> 00:50:57,460
most likely bra not all the browsers

00:50:52,569 --> 00:51:00,069
will understand this yes six I believe

00:50:57,460 --> 00:51:02,619
imports right this is why we have to

00:51:00,069 --> 00:51:06,849
still have to do some bundling roll-up

00:51:02,619 --> 00:51:09,940
web pack parcel whatever you want I in

00:51:06,849 --> 00:51:13,299
my experiments I just roll up and the

00:51:09,940 --> 00:51:15,369
configuration is could look something

00:51:13,299 --> 00:51:18,549
like this so we need some plugins a bit

00:51:15,369 --> 00:51:22,210
later about this and we say take it this

00:51:18,549 --> 00:51:27,910
as input file like the same file will be

00:51:22,210 --> 00:51:32,650
as output one just process this and but

00:51:27,910 --> 00:51:37,329
the idea is is in this plugins let's

00:51:32,650 --> 00:51:39,720
have a quick look what we need here

00:51:37,329 --> 00:51:42,069
first resolve it's it's just two

00:51:39,720 --> 00:51:43,509
together all these import from the

00:51:42,069 --> 00:51:47,650
proper location so this is purely

00:51:43,509 --> 00:51:50,980
utility stuff then replace and this is

00:51:47,650 --> 00:51:53,049
must have because in workbooks modules

00:51:50,980 --> 00:51:56,230
in their source files which we take in

00:51:53,049 --> 00:51:59,470
in this case when we use bundling there

00:51:56,230 --> 00:52:03,099
is there are lots of places where we

00:51:59,470 --> 00:52:05,739
have a condition if the process EndNote

00:52:03,099 --> 00:52:08,109
N equals production then we do some

00:52:05,739 --> 00:52:11,319
extensive logging so you will see lots

00:52:08,109 --> 00:52:15,609
of like log lines so we have to replace

00:52:11,319 --> 00:52:20,739
this variable to actually string called

00:52:15,609 --> 00:52:24,400
production and then tercer we do tree

00:52:20,739 --> 00:52:26,920
shaking because this condition will

00:52:24,400 --> 00:52:30,430
never be true so it will just get rid of

00:52:26,920 --> 00:52:33,279
all this code and our bundle will be

00:52:30,430 --> 00:52:35,680
quite small so this is this is very

00:52:33,279 --> 00:52:40,089
important and who can tell me there sir

00:52:35,680 --> 00:52:44,349
it's a new name of what quite popular

00:52:40,089 --> 00:52:46,930
plugin yes please yes I defy Jes is no

00:52:44,349 --> 00:52:50,499
longer supported someone fork this and

00:52:46,930 --> 00:52:56,999
now it's under use under name cursor

00:52:50,499 --> 00:52:56,999
this is why instead of this very long

00:52:57,810 --> 00:53:07,260
mning when we built our app and it

00:53:05,020 --> 00:53:10,359
always tax on like 92 percent

00:53:07,260 --> 00:53:13,390
uglify Jess now it says 92 percent

00:53:10,359 --> 00:53:16,750
tercer so this is just a new name of old

00:53:13,390 --> 00:53:21,099
stuff basically that's it and then we

00:53:16,750 --> 00:53:23,470
just roll up script to package Jason you

00:53:21,099 --> 00:53:26,020
see I use n Peaks so I don't like global

00:53:23,470 --> 00:53:31,000
see lies result in serviceworker will

00:53:26,020 --> 00:53:32,680
look awful for us I like don't pay too

00:53:31,000 --> 00:53:36,010
much attention to this

00:53:32,680 --> 00:53:36,580
it's just minified ugly fight bundled

00:53:36,010 --> 00:53:38,980
code

00:53:36,580 --> 00:53:43,570
it's exactly what browsers love like

00:53:38,980 --> 00:53:47,740
very small bundle which easy if to fetch

00:53:43,570 --> 00:53:50,770
easy to parse is it to run good so let's

00:53:47,740 --> 00:53:52,720
give a summary after all work box it's a

00:53:50,770 --> 00:53:54,520
framework agnostic so everything you've

00:53:52,720 --> 00:53:57,430
heard like except some like very

00:53:54,520 --> 00:54:00,099
specific stuff were to put this

00:53:57,430 --> 00:54:02,890
organization is applicable to absolutely

00:54:00,099 --> 00:54:06,070
any framework or without framework which

00:54:02,890 --> 00:54:09,310
functionality out of the box very

00:54:06,070 --> 00:54:11,710
configurable if you need to run your own

00:54:09,310 --> 00:54:14,200
code in form of plug-in or in form of

00:54:11,710 --> 00:54:17,560
event listener you have welcome to do

00:54:14,200 --> 00:54:21,250
this but some steps needed to configure

00:54:17,560 --> 00:54:24,670
this this is why it's set up configure

00:54:21,250 --> 00:54:27,760
and code if you need but as a result you

00:54:24,670 --> 00:54:30,520
get exactly what you want not something

00:54:27,760 --> 00:54:33,790
that was predefined for you

00:54:30,520 --> 00:54:38,589
you'll find more detailed sample code on

00:54:33,790 --> 00:54:40,720
this github repo it's again very fresh

00:54:38,589 --> 00:54:43,950
and this particular branch word box

00:54:40,720 --> 00:54:48,040
before bundle so it's about bundling and

00:54:43,950 --> 00:54:51,670
every sink and I invite you to join pw

00:54:48,040 --> 00:54:54,670
slick iran we are almost 2000 developers

00:54:51,670 --> 00:54:56,710
there it's open like slack team we

00:54:54,670 --> 00:54:59,740
discuss all the stuff about it ablaze in

00:54:56,710 --> 00:55:02,550
the folks from from world books from all

00:54:59,740 --> 00:55:07,880
the browsers and other libraries are

00:55:02,550 --> 00:55:11,739
there on that thank you very much

00:55:07,880 --> 00:55:11,739

YouTube URL: https://www.youtube.com/watch?v=G1Fe7E1gZ8E


