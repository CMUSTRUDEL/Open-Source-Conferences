Title: Angular Vienna, RxJs schedulers in depth, May 2018
Publication date: 2018-05-17
Playlist: Angular Vienna
Description: 
	Michael Hladky:

Schedulers are baked into RxJs. But it's not a well-known topic.
In this talk, I will reveal the internals of Schedulers, show how to use them in operators, control subscription with it.
I will also control and change time as well as use it to test code.

In the end, you will have a clear picture of what schedulers are as well as some practical examples that you can reuse.
Captions: 
	00:00:00,030 --> 00:00:05,640
welcome welcome to my talk on rx chase

00:00:02,639 --> 00:00:08,130
schedulers in depth how many of you know

00:00:05,640 --> 00:00:10,320
rxjs I guess pretty dot they are nearly

00:00:08,130 --> 00:00:15,420
everyone how many of you know schedulers

00:00:10,320 --> 00:00:19,560
in rxjs 10% I guess how many of you ever

00:00:15,420 --> 00:00:21,869
used scheduler I guess everyone that

00:00:19,560 --> 00:00:24,510
knows rx chase induced rx chase use the

00:00:21,869 --> 00:00:28,400
scheduler schedulers are baked into our

00:00:24,510 --> 00:00:31,140
X chairs let me start with a question

00:00:28,400 --> 00:00:34,829
what is the execution context of an

00:00:31,140 --> 00:00:39,000
observable to answer this I will show

00:00:34,829 --> 00:00:41,550
you some quick lines of code back to the

00:00:39,000 --> 00:00:46,020
beginning sorry for this delayed what we

00:00:41,550 --> 00:00:48,570
see here are some lines of code one

00:00:46,020 --> 00:00:50,340
synchronous console.log down here with

00:00:48,570 --> 00:00:53,039
the number four and I have a promise

00:00:50,340 --> 00:00:55,250
it's a timeout and then I wrapped a

00:00:53,039 --> 00:00:58,739
console log in the requestanimationframe

00:00:55,250 --> 00:01:01,140
function every single line here runs in

00:00:58,739 --> 00:01:02,059
a different execution context what does

00:01:01,140 --> 00:01:05,040
this mean

00:01:02,059 --> 00:01:09,570
we see the order is here from one to

00:01:05,040 --> 00:01:15,979
four and if we look in our browser and I

00:01:09,570 --> 00:01:15,979
comment in the line here

00:01:22,340 --> 00:01:30,060
then we see that they are printed in a

00:01:27,899 --> 00:01:32,100
completely different order first is the

00:01:30,060 --> 00:01:35,460
synchronous line then there is our

00:01:32,100 --> 00:01:37,829
promise which is run in a micro task the

00:01:35,460 --> 00:01:42,090
animation frame and then the macro task

00:01:37,829 --> 00:01:47,359
which is a set timeout so what would

00:01:42,090 --> 00:02:00,179
happen if I place an observable of

00:01:47,359 --> 00:02:01,799
observable and subscribe to it what do

00:02:00,179 --> 00:02:03,239
you think will this line run in

00:02:01,799 --> 00:02:04,849
synchronous code block or in

00:02:03,239 --> 00:02:08,640
asynchronous code block

00:02:04,849 --> 00:02:14,010
synchronous of course of course so let's

00:02:08,640 --> 00:02:16,290
check this where is my mouse so if I

00:02:14,010 --> 00:02:19,470
append this observable here we see that

00:02:16,290 --> 00:02:22,370
it is in the first line which means it

00:02:19,470 --> 00:02:24,989
is executed synchronously why because

00:02:22,370 --> 00:02:27,780
observables are synchronous they are

00:02:24,989 --> 00:02:30,450
synchronous by default but what if I

00:02:27,780 --> 00:02:36,180
apply another pipe what if I apply a

00:02:30,450 --> 00:02:39,150
pipe that is called observe on and this

00:02:36,180 --> 00:02:45,049
observe on pipe enables me to pass in a

00:02:39,150 --> 00:02:48,120
scheduler and if I run this code again

00:02:45,049 --> 00:02:50,579
without wrapping this line in another

00:02:48,120 --> 00:02:51,419
execution context like a set timeout or

00:02:50,579 --> 00:02:54,599
a promise

00:02:51,419 --> 00:02:58,950
it changes the place and now it is

00:02:54,599 --> 00:03:02,010
executed as a macro task yes I would

00:02:58,950 --> 00:03:03,989
wrap it in a set timeout this is the

00:03:02,010 --> 00:03:06,209
power of schedulers you can control the

00:03:03,989 --> 00:03:09,620
execution context from outside without

00:03:06,209 --> 00:03:09,620
wrapping this code

00:03:13,840 --> 00:03:20,030
Who am I my name is Misha latke I am a

00:03:17,060 --> 00:03:22,069
developer the workshops and Consulting's

00:03:20,030 --> 00:03:26,239
over angular colic

00:03:22,069 --> 00:03:28,639
as you all know OPA I run this amazing

00:03:26,239 --> 00:03:31,730
meetup here with all you lovely people

00:03:28,639 --> 00:03:34,069
and we found it together the angular

00:03:31,730 --> 00:03:36,139
Austria Association which is here to

00:03:34,069 --> 00:03:39,650
support angular meetups and events in

00:03:36,139 --> 00:03:43,040
Austria and around what's on the menu

00:03:39,650 --> 00:03:44,959
today I will give you a good overview of

00:03:43,040 --> 00:03:47,870
the responsibilities of schedulers I

00:03:44,959 --> 00:03:50,419
will show you how to do the base usage

00:03:47,870 --> 00:03:52,040
of schedulers I will show you all the

00:03:50,419 --> 00:03:54,950
different types of schedulers I will

00:03:52,040 --> 00:03:56,959
create two groups I will show you the

00:03:54,950 --> 00:03:59,739
internal building blocks of schedulers

00:03:56,959 --> 00:04:01,879
this is really deep dive into the

00:03:59,739 --> 00:04:05,419
internals and then I will show you how

00:04:01,879 --> 00:04:12,079
to use them manually let's start with

00:04:05,419 --> 00:04:14,389
the responsibilities what is the

00:04:12,079 --> 00:04:16,970
schedule responsible for a scheduler has

00:04:14,389 --> 00:04:20,209
three major blocks that I want to talk

00:04:16,970 --> 00:04:23,750
about a scheduler is here to execute

00:04:20,209 --> 00:04:26,150
some work a scheduler needs to control

00:04:23,750 --> 00:04:28,550
the order of this work that is executed

00:04:26,150 --> 00:04:30,919
and the scheduler executes this work in

00:04:28,550 --> 00:04:34,280
time therefore I have these three blocks

00:04:30,919 --> 00:04:36,260
here the execution context which we get

00:04:34,280 --> 00:04:38,659
some insights before the execution

00:04:36,260 --> 00:04:42,289
policy with this which is the order and

00:04:38,659 --> 00:04:45,229
the clock what is the execution context

00:04:42,289 --> 00:04:46,789
well I showed you that if I wrap code in

00:04:45,229 --> 00:04:49,009
a set timeout a promise or a

00:04:46,789 --> 00:04:52,159
requestanimationframe I can change the

00:04:49,009 --> 00:04:56,150
time in which this code is executed and

00:04:52,159 --> 00:04:58,490
the order but I have to wrap it in this

00:04:56,150 --> 00:05:01,520
function but then I can execute it in

00:04:58,490 --> 00:05:03,169
the specified context the top of a

00:05:01,520 --> 00:05:06,400
scheduler is to control the execution

00:05:03,169 --> 00:05:09,470
context and manipulate it from outside

00:05:06,400 --> 00:05:11,810
this is the way we would do it normally

00:05:09,470 --> 00:05:14,570
we use some of these functions and then

00:05:11,810 --> 00:05:16,759
we wrap some code inside with schedulers

00:05:14,570 --> 00:05:19,190
we don't need this we have the

00:05:16,759 --> 00:05:22,159
flexibility to just pass in another

00:05:19,190 --> 00:05:24,449
parameter so schedulers helps us to

00:05:22,159 --> 00:05:28,110
parameterize where concurrency

00:05:24,449 --> 00:05:31,349
is happening what is the execution

00:05:28,110 --> 00:05:34,559
policy well a scheduler is also

00:05:31,349 --> 00:05:37,740
responsible to schedule events in a

00:05:34,559 --> 00:05:40,080
specific order how do we do this well we

00:05:37,740 --> 00:05:42,389
use an array an array has an order we

00:05:40,080 --> 00:05:44,699
store all our executed actions in this

00:05:42,389 --> 00:05:48,089
array and then we can for example sort

00:05:44,699 --> 00:05:50,039
this array or executed as it is let's

00:05:48,089 --> 00:05:52,379
take a look in the source code and we

00:05:50,039 --> 00:05:55,110
see that a scheduler has this actions

00:05:52,379 --> 00:05:56,759
array here and a flash method and if I

00:05:55,110 --> 00:05:58,740
call the flash method I will execute

00:05:56,759 --> 00:06:02,639
everything that is stored in this

00:05:58,740 --> 00:06:07,319
actions array the last part is the clock

00:06:02,639 --> 00:06:10,830
as a scheduler schedules work in time it

00:06:07,319 --> 00:06:12,539
needs notion of time if we look here in

00:06:10,830 --> 00:06:15,599
the source code we see that a scheduler

00:06:12,539 --> 00:06:18,149
has a private method called now by

00:06:15,599 --> 00:06:22,259
default this method returns the date dot

00:06:18,149 --> 00:06:24,990
now the time stamp in milliseconds but I

00:06:22,259 --> 00:06:30,270
can also override it and control or like

00:06:24,990 --> 00:06:33,979
mimic the time like I want to let me

00:06:30,270 --> 00:06:36,210
show you some basic use cases or usage I

00:06:33,979 --> 00:06:38,819
already showed you the observe on

00:06:36,210 --> 00:06:42,180
operator the observe on operator is an

00:06:38,819 --> 00:06:45,180
operator that controls in which context

00:06:42,180 --> 00:06:49,830
events are emitted and you can apply

00:06:45,180 --> 00:06:52,620
this operator multiple times another

00:06:49,830 --> 00:06:54,810
operator is to subscribe on operator and

00:06:52,620 --> 00:06:57,419
subscribe on basically controls when

00:06:54,810 --> 00:06:59,849
your subscription will take place so you

00:06:57,419 --> 00:07:04,129
can control the time of subscription and

00:06:59,849 --> 00:07:07,080
this operator is only used one time and

00:07:04,129 --> 00:07:10,050
then we also have our static operators

00:07:07,080 --> 00:07:12,149
and we can pass also schedulers to our

00:07:10,050 --> 00:07:15,449
static operators here for example I used

00:07:12,149 --> 00:07:18,539
to set interval with the async scheduler

00:07:15,449 --> 00:07:21,180
which is here by default but in the my

00:07:18,539 --> 00:07:23,909
timer I use an animation frame scheduler

00:07:21,180 --> 00:07:28,110
so I change the execution context of my

00:07:23,909 --> 00:07:30,089
timer here so we see there are many

00:07:28,110 --> 00:07:35,339
different ways how we can control the

00:07:30,089 --> 00:07:37,680
execution context of observables what

00:07:35,339 --> 00:07:41,820
types of observables are there

00:07:37,680 --> 00:07:43,830
I already showed you the async scheduler

00:07:41,820 --> 00:07:46,830
but there are more there is the queue

00:07:43,830 --> 00:07:48,690
scheduler the ASAP scheduler the async

00:07:46,830 --> 00:07:51,600
scheduler and the animation frame

00:07:48,690 --> 00:07:53,250
schedule I grouped them on the right

00:07:51,600 --> 00:07:55,380
side I have more special schedulers

00:07:53,250 --> 00:07:57,210
there is the ritual time scheduler and

00:07:55,380 --> 00:07:59,789
the test scheduler I will walk through

00:07:57,210 --> 00:08:03,509
all of these schedulers in detail but

00:07:59,789 --> 00:08:05,460
first let me show you some demo where I

00:08:03,509 --> 00:08:08,490
use all the different schedulers with a

00:08:05,460 --> 00:08:11,580
delay of 0 because the delay is the

00:08:08,490 --> 00:08:17,330
second parameter that I can apply domain

00:08:11,580 --> 00:08:17,330
interval let's jump back to the code and

00:08:22,130 --> 00:08:28,080
let's look at this snippet what we have

00:08:25,169 --> 00:08:30,810
here is a variable called delay which is

00:08:28,080 --> 00:08:34,709
0 and then I have a stream and

00:08:30,810 --> 00:08:37,020
observable off the number 42 and here I

00:08:34,709 --> 00:08:39,899
have listed all the different schedulers

00:08:37,020 --> 00:08:41,430
that are not all but four of them that

00:08:39,899 --> 00:08:47,029
are possible the animation frame the

00:08:41,430 --> 00:08:52,190
async acept the queue scheduler and no

00:08:47,029 --> 00:08:52,190
scheduler placed here if I execute this

00:08:58,730 --> 00:09:06,680
I see if I use no scheduler it is

00:09:04,220 --> 00:09:10,280
executed synchronously also the queue

00:09:06,680 --> 00:09:13,370
scheduler execute code synchronously all

00:09:10,280 --> 00:09:18,550
the other halves schedulers execute this

00:09:13,370 --> 00:09:21,950
code in an async code block let's jump

00:09:18,550 --> 00:09:26,000
back and take a closer look to all the

00:09:21,950 --> 00:09:29,360
schedulers in detail the queue scanner

00:09:26,000 --> 00:09:32,840
as I said is here to queue up work it

00:09:29,360 --> 00:09:36,020
runs blow code blocking it runs it

00:09:32,840 --> 00:09:38,660
synchronously and it is here to schedule

00:09:36,020 --> 00:09:40,790
some tasks and only after this task is

00:09:38,660 --> 00:09:43,010
done it starts with its next task it is

00:09:40,790 --> 00:09:45,890
very good if you want to do sequential

00:09:43,010 --> 00:09:48,910
calculations till traversals or anything

00:09:45,890 --> 00:09:51,860
else that shouldn't run in blocking code

00:09:48,910 --> 00:09:55,040
the end then is the ASAP scheduler and

00:09:51,860 --> 00:09:57,860
this scheduler is here to execute your

00:09:55,040 --> 00:10:00,800
action as fast as possible after the

00:09:57,860 --> 00:10:03,650
synchronous code stopped running it is

00:10:00,800 --> 00:10:07,220
also executed asynchronously and if you

00:10:03,650 --> 00:10:11,320
use it with a delay of 0 it falls back

00:10:07,220 --> 00:10:14,120
as I said like a promise to a macro task

00:10:11,320 --> 00:10:17,150
then we have the async scheduler and the

00:10:14,120 --> 00:10:18,830
async scheduler is what we did before if

00:10:17,150 --> 00:10:21,950
we wrapped a console log in a set

00:10:18,830 --> 00:10:24,380
timeout the same would happen with async

00:10:21,950 --> 00:10:26,990
scheduler so you're able to schedule a

00:10:24,380 --> 00:10:29,900
work in some time in the future with

00:10:26,990 --> 00:10:33,740
some delay it is also executed

00:10:29,900 --> 00:10:36,590
asynchronously and as it is written here

00:10:33,740 --> 00:10:40,520
you use it to execute an action at some

00:10:36,590 --> 00:10:43,220
point in the future the last of all

00:10:40,520 --> 00:10:46,220
these asynchronous schedulers is the

00:10:43,220 --> 00:10:48,320
animation frame scheduler if you wanna

00:10:46,220 --> 00:10:50,930
run animations in the browser there is

00:10:48,320 --> 00:10:52,940
the animation frame that provides you

00:10:50,930 --> 00:10:55,610
with a constant 60 flipped drops per

00:10:52,940 --> 00:10:59,090
second frame rate and you can basically

00:10:55,610 --> 00:11:01,070
perform all your animations in this

00:10:59,090 --> 00:11:03,310
scheduler to run it smooth in the

00:11:01,070 --> 00:11:03,310
browser

00:11:03,530 --> 00:11:08,150
the basic example here if you need

00:11:06,110 --> 00:11:11,450
something to animate you can use it and

00:11:08,150 --> 00:11:14,560
you have a 60 frames per second

00:11:11,450 --> 00:11:14,560
animation rate

00:11:14,660 --> 00:11:23,570
now let me show you the same example as

00:11:17,970 --> 00:11:28,020
I did before but I want to apply a delay

00:11:23,570 --> 00:11:30,930
so my delay is here set to zero as you

00:11:28,020 --> 00:11:34,529
can see I use it with all the schedule

00:11:30,930 --> 00:11:37,890
about my last line and if I switch it

00:11:34,529 --> 00:11:42,860
from zero to one which means I apply one

00:11:37,890 --> 00:11:42,860
millisecond delay you see that my order

00:11:46,339 --> 00:11:57,899
is now completely different let's look

00:11:50,190 --> 00:12:00,060
in detail in into this we see that my

00:11:57,899 --> 00:12:02,130
default observable is still running

00:12:00,060 --> 00:12:04,350
synchronously but all the other

00:12:02,130 --> 00:12:06,899
schedulers are now running

00:12:04,350 --> 00:12:09,420
asynchronously yes I would wrap them in

00:12:06,899 --> 00:12:13,080
a set timeout so there is no difference

00:12:09,420 --> 00:12:14,670
between a sub scheduler and async

00:12:13,080 --> 00:12:17,310
scheduler or an animation frame

00:12:14,670 --> 00:12:19,890
scheduler why is this possible this

00:12:17,310 --> 00:12:22,260
really blew my mind it is possible

00:12:19,890 --> 00:12:24,510
because all the schedulers if you apply

00:12:22,260 --> 00:12:28,910
a delay they fall back to the async

00:12:24,510 --> 00:12:34,110
scheduler I will go into detail on this

00:12:28,910 --> 00:12:37,050
in my next slide here I tweeted about

00:12:34,110 --> 00:12:38,880
this I said maybe all of us used

00:12:37,050 --> 00:12:42,209
animation frame scheduler in the wrong

00:12:38,880 --> 00:12:45,000
way because we all did this I guess we

00:12:42,209 --> 00:12:46,890
all had our interval we apply the 60

00:12:45,000 --> 00:12:49,110
frames per second interval and we all

00:12:46,890 --> 00:12:50,790
thought like ah this will run on the

00:12:49,110 --> 00:12:52,560
animation frame because I applied the

00:12:50,790 --> 00:12:55,649
animation frame scheduler there right

00:12:52,560 --> 00:12:57,600
but if I use an delay it's not the case

00:12:55,649 --> 00:12:59,490
everything will fall back to this

00:12:57,600 --> 00:13:01,490
issuing scheduler this is pretty

00:12:59,490 --> 00:13:10,140
important that it is very hard to test

00:13:01,490 --> 00:13:17,310
or even notice it let me check yeah

00:13:10,140 --> 00:13:19,260
therefore yeah note this is what we

00:13:17,310 --> 00:13:21,810
would expect but in fact it is not the

00:13:19,260 --> 00:13:25,530
case and this is the proof here I

00:13:21,810 --> 00:13:28,560
created a small angular 6 web component

00:13:25,530 --> 00:13:30,690
which runs an animation I have three

00:13:28,560 --> 00:13:32,730
cyclists here I have the red cycle which

00:13:30,690 --> 00:13:34,800
is a cycle that is animated over the

00:13:32,730 --> 00:13:38,640
queue scheduler I have a green circle

00:13:34,800 --> 00:13:40,500
that is driven by the async scheduler

00:13:38,640 --> 00:13:44,100
and then I use the animation frame

00:13:40,500 --> 00:13:47,370
scheduler for the blue dot here if I

00:13:44,100 --> 00:13:50,100
start this stuff you see that they all

00:13:47,370 --> 00:13:57,830
run if I slow this down and reset it in

00:13:50,100 --> 00:13:57,830
the same tick maybe a little bit faster

00:13:58,850 --> 00:14:11,430
in a second so you see they all run

00:14:05,210 --> 00:14:14,040
nearly in the same speed if I increase

00:14:11,430 --> 00:14:17,220
the steps they move faster if I decrease

00:14:14,040 --> 00:14:20,100
or go negative to change the order or

00:14:17,220 --> 00:14:22,110
the direction and this is my delay of

00:14:20,100 --> 00:14:24,330
the interval and if I slow down the

00:14:22,110 --> 00:14:27,840
delay of course the interval ticks fast

00:14:24,330 --> 00:14:30,990
and faster and all mana Meishan also

00:14:27,840 --> 00:14:36,690
goes faster and faster but there is a

00:14:30,990 --> 00:14:39,890
special case when I put in 0 and if we

00:14:36,690 --> 00:14:42,690
look at this now the blue dot is running

00:14:39,890 --> 00:14:45,720
faster than the rest of the stuff

00:14:42,690 --> 00:14:47,430
because it runs in animation frame my

00:14:45,720 --> 00:14:49,350
computer here is under heavy load

00:14:47,430 --> 00:14:52,140
because of the screen recording and

00:14:49,350 --> 00:14:54,900
everything that is open and therefore it

00:14:52,140 --> 00:14:57,420
is very hard to perform a smooth

00:14:54,900 --> 00:15:00,150
animation if you see the red and the

00:14:57,420 --> 00:15:03,620
green dot they are not really smooth but

00:15:00,150 --> 00:15:07,920
the blue circuit is nearly close to a

00:15:03,620 --> 00:15:09,690
good animation if I apply again some

00:15:07,920 --> 00:15:15,180
milliseconds you see they all run in the

00:15:09,690 --> 00:15:17,640
same scratchy way of animation this is

00:15:15,180 --> 00:15:19,440
the proof that only if you apply a delay

00:15:17,640 --> 00:15:21,390
of 0 you will work with the real

00:15:19,440 --> 00:15:24,440
scheduler otherwise you will always use

00:15:21,390 --> 00:15:24,440
the async scheduler

00:15:28,110 --> 00:15:33,190
there is source code there is not a lot

00:15:31,540 --> 00:15:35,080
out there I chose this topic because

00:15:33,190 --> 00:15:37,480
there is pretty much nothing out there

00:15:35,080 --> 00:15:39,070
that explains what schedulers are but

00:15:37,480 --> 00:15:41,170
could we wait with the question after my

00:15:39,070 --> 00:15:46,030
talk then maybe I will answer something

00:15:41,170 --> 00:15:48,570
while I'm talking okay now let's go even

00:15:46,030 --> 00:15:57,040
deeper in this stuff now I will explain

00:15:48,570 --> 00:16:00,550
how schedulers really work internally so

00:15:57,040 --> 00:16:03,930
what is a scheduler doing a scheduler

00:16:00,550 --> 00:16:06,850
schedules or executes some work over

00:16:03,930 --> 00:16:09,520
actions it executes the work at a

00:16:06,850 --> 00:16:11,500
specific time in a controlled execution

00:16:09,520 --> 00:16:14,980
context Nava knows this we know this

00:16:11,500 --> 00:16:16,870
stuff and you can unsubscribe from it as

00:16:14,980 --> 00:16:20,110
you would unsubscribe from an observable

00:16:16,870 --> 00:16:22,120
subscription I divided this chapter into

00:16:20,110 --> 00:16:24,910
four blocks I will talk about the

00:16:22,120 --> 00:16:27,250
scheduler itself and it in turn its

00:16:24,910 --> 00:16:30,640
internals and action work in a

00:16:27,250 --> 00:16:34,200
subscription let's start with an action

00:16:30,640 --> 00:16:36,970
what is an action our work what is work

00:16:34,200 --> 00:16:39,280
work is just something that can be

00:16:36,970 --> 00:16:42,130
executed this function here takes the

00:16:39,280 --> 00:16:44,380
state and I just console.log it this is

00:16:42,130 --> 00:16:48,790
for example some piece of work that I

00:16:44,380 --> 00:16:52,000
could schedule what is an action well I

00:16:48,790 --> 00:16:55,060
would say an action is the execution

00:16:52,000 --> 00:16:57,850
context of work because I take my work I

00:16:55,060 --> 00:17:00,190
wrap it in an action and then my action

00:16:57,850 --> 00:17:02,560
controls the execution context depending

00:17:00,190 --> 00:17:04,480
in which action I wrap this work it will

00:17:02,560 --> 00:17:07,660
be executed in a different execution

00:17:04,480 --> 00:17:10,510
context my action has a scheduled method

00:17:07,660 --> 00:17:13,960
and if I run this schedule method I get

00:17:10,510 --> 00:17:16,360
a subscription returned as we know from

00:17:13,960 --> 00:17:19,960
observables I can unsubscribe from these

00:17:16,360 --> 00:17:25,750
subscriptions what is a subscription

00:17:19,960 --> 00:17:27,790
well with a normal stream here you would

00:17:25,750 --> 00:17:30,670
unsubscribe you would get a subscription

00:17:27,790 --> 00:17:33,620
returned and then you could unsubscribe

00:17:30,670 --> 00:17:36,110
on this return subscription some

00:17:33,620 --> 00:17:38,290
I'm in the future same goes with

00:17:36,110 --> 00:17:40,880
schedulers I have a scheduler I

00:17:38,290 --> 00:17:42,680
scheduled some work and I get a

00:17:40,880 --> 00:17:45,130
subscription returned and I can

00:17:42,680 --> 00:17:47,840
unsubscribe from this subscription

00:17:45,130 --> 00:17:51,950
exactly the same as I would do with

00:17:47,840 --> 00:17:55,460
observables now let me give you maybe a

00:17:51,950 --> 00:17:59,120
new information a scheduler can also

00:17:55,460 --> 00:18:02,000
handle nested subscriptions what is a

00:17:59,120 --> 00:18:03,980
nested subscription well let's say we

00:18:02,000 --> 00:18:07,910
have these two subscriptions here sub

00:18:03,980 --> 00:18:11,030
and sub - and what I do now is I call

00:18:07,910 --> 00:18:13,040
the subscriptions add method and I add

00:18:11,030 --> 00:18:15,200
the second subscription to my first

00:18:13,040 --> 00:18:18,200
subscription and then I unsubscribe from

00:18:15,200 --> 00:18:20,390
a first subscription and if I do this I

00:18:18,200 --> 00:18:22,900
will immediately unsubscribe from all

00:18:20,390 --> 00:18:26,710
other subscription that are nested

00:18:22,900 --> 00:18:30,260
sounds pretty useless right it isn't

00:18:26,710 --> 00:18:31,760
what if you wanna fan out actions what

00:18:30,260 --> 00:18:34,220
if you wanted to risk recursive

00:18:31,760 --> 00:18:37,100
scheduling or some stuff then you need a

00:18:34,220 --> 00:18:38,929
way to control all the nested actions in

00:18:37,100 --> 00:18:40,850
one single point and you need to

00:18:38,929 --> 00:18:43,370
unsubscribe from all the nested actions

00:18:40,850 --> 00:18:48,710
at one single point this is done over

00:18:43,370 --> 00:18:50,300
the subscription dot add method okay we

00:18:48,710 --> 00:18:52,610
know what work is it's just a function

00:18:50,300 --> 00:18:54,710
that takes some state and does something

00:18:52,610 --> 00:18:57,920
we know what an action is an action is

00:18:54,710 --> 00:19:00,580
the execution context of work and we

00:18:57,920 --> 00:19:03,559
know that there is a subscription return

00:19:00,580 --> 00:19:06,530
now let's look a little bit deeper on

00:19:03,559 --> 00:19:08,240
schedulers itself I will show you how to

00:19:06,530 --> 00:19:10,040
instantiate the scheduler how to

00:19:08,240 --> 00:19:13,600
schedule some work and then later on

00:19:10,040 --> 00:19:16,220
unsubscribe from this scheduled work

00:19:13,600 --> 00:19:19,460
first let's talk about how to get an

00:19:16,220 --> 00:19:21,920
instance of this scheduler well we could

00:19:19,460 --> 00:19:24,890
use the class queue scheduler and we

00:19:21,920 --> 00:19:27,110
could provide the class of an actually

00:19:24,890 --> 00:19:29,210
important here not an instance of the

00:19:27,110 --> 00:19:32,090
action but only the class and then we

00:19:29,210 --> 00:19:34,610
get our instance of this scheduler but I

00:19:32,090 --> 00:19:36,770
would recommend you use some defaults

00:19:34,610 --> 00:19:39,530
they are predefined defaults in rxjs

00:19:36,770 --> 00:19:40,940
called as you know queue scheduler async

00:19:39,530 --> 00:19:45,530
scheduler and all the different

00:19:40,940 --> 00:19:47,180
scheduler names okay

00:19:45,530 --> 00:19:49,460
what's the next step now we have our

00:19:47,180 --> 00:19:52,220
scheduler instance let's set up some

00:19:49,460 --> 00:19:54,800
delay some state and some work because

00:19:52,220 --> 00:19:58,940
these are the building blocks of a

00:19:54,800 --> 00:20:01,970
scheduled action my work is as before

00:19:58,940 --> 00:20:05,930
just console logging the state that it

00:20:01,970 --> 00:20:08,600
receives nothing else and if I have here

00:20:05,930 --> 00:20:12,140
my scheduler and I call the schedulers

00:20:08,600 --> 00:20:14,960
schedule method I take my provided work

00:20:12,140 --> 00:20:18,830
in my state and within my scheduler I

00:20:14,960 --> 00:20:22,600
create a new action new action paths in

00:20:18,830 --> 00:20:25,580
my work applying my state and then I

00:20:22,600 --> 00:20:29,540
called a schedule method on my action

00:20:25,580 --> 00:20:32,750
and after my defines delay is over this

00:20:29,540 --> 00:20:35,060
kalitta action will be scheduled but it

00:20:32,750 --> 00:20:36,710
will also return the subscription the

00:20:35,060 --> 00:20:38,480
subscription is handed back to my

00:20:36,710 --> 00:20:40,490
schedule a schedule method and the

00:20:38,480 --> 00:20:45,320
scheduler scheduled method returns me

00:20:40,490 --> 00:20:47,240
the actions subscription of course I can

00:20:45,320 --> 00:20:56,660
take the subscription and unsubscribe

00:20:47,240 --> 00:20:58,910
from it later on ok that was the deep

00:20:56,660 --> 00:21:01,610
dive into schedulers in the internals

00:20:58,910 --> 00:21:07,580
now let's code something manually with

00:21:01,610 --> 00:21:11,330
schedulers let me start with this

00:21:07,580 --> 00:21:13,900
example here what I did is I created two

00:21:11,330 --> 00:21:16,340
custom form components which are

00:21:13,900 --> 00:21:23,960
signature pets so I can use my finger

00:21:16,340 --> 00:21:26,510
and I can draw on this and I open up the

00:21:23,960 --> 00:21:29,180
console I stored this signature in an

00:21:26,510 --> 00:21:31,730
array and this array consists of points

00:21:29,180 --> 00:21:34,850
in time so what I could do is I could

00:21:31,730 --> 00:21:38,780
animate this signature if I click here I

00:21:34,850 --> 00:21:40,850
see that I have segments of a signature

00:21:38,780 --> 00:21:43,370
and points and a point could have the

00:21:40,850 --> 00:21:48,020
color a timestamp and an X and the y

00:21:43,370 --> 00:21:50,840
coordinate my goal here is to record a

00:21:48,020 --> 00:21:54,890
signature on the left side and animate

00:21:50,840 --> 00:21:57,280
it on the right side in real time let's

00:21:54,890 --> 00:21:57,280
call this

00:21:57,870 --> 00:22:08,679
let me first comment in this signature

00:22:04,059 --> 00:22:10,690
okay here is my loop and I loop over the

00:22:08,679 --> 00:22:13,120
signature a signature consists of

00:22:10,690 --> 00:22:16,500
segments of lions and the line consists

00:22:13,120 --> 00:22:20,350
of points of two nested for-loops

00:22:16,500 --> 00:22:24,280
then I set it up a delay some initial

00:22:20,350 --> 00:22:27,429
state which is the current segment and

00:22:24,280 --> 00:22:31,740
point of a signature and work and here I

00:22:27,429 --> 00:22:31,740
just console.log the initial State

00:22:32,290 --> 00:22:35,679
[Music]

00:22:33,570 --> 00:22:39,790
what if I sorry I'm in the wrong

00:22:35,679 --> 00:22:41,559
function what if I apply some work here

00:22:39,790 --> 00:22:43,630
because we know we can already lock

00:22:41,559 --> 00:22:45,250
every single point in a signature now

00:22:43,630 --> 00:22:48,370
let's do something with every single

00:22:45,250 --> 00:22:52,120
point I take my new point and I

00:22:48,370 --> 00:22:53,830
calculate I get the actual signature

00:22:52,120 --> 00:22:54,880
from my right side at the beginning it

00:22:53,830 --> 00:22:59,110
is completely empty

00:22:54,880 --> 00:23:02,679
then I take my actual signature and

00:22:59,110 --> 00:23:04,750
provide my current signature SEC segment

00:23:02,679 --> 00:23:07,210
and point and I update this signature

00:23:04,750 --> 00:23:10,840
and then I take the updated signature

00:23:07,210 --> 00:23:15,570
and display it in my panel on the right

00:23:10,840 --> 00:23:19,809
side so this is all I will do in my work

00:23:15,570 --> 00:23:23,980
function down here I schedule my work

00:23:19,809 --> 00:23:28,240
with my specified delay Appa and my

00:23:23,980 --> 00:23:31,450
initial state which is the segment of

00:23:28,240 --> 00:23:33,900
the signature and the point let's have a

00:23:31,450 --> 00:23:33,900
look at this

00:23:42,120 --> 00:23:54,520
okay I draw something faster and slower

00:23:50,700 --> 00:23:56,880
now I click the button and nothing

00:23:54,520 --> 00:24:02,650
happens

00:23:56,880 --> 00:24:04,720
why is this the case well I really don't

00:24:02,650 --> 00:24:06,310
know maybe I'm still in the wrong

00:24:04,720 --> 00:24:09,850
function maybe I should do this in this

00:24:06,310 --> 00:24:11,740
function here but if I do this in this

00:24:09,850 --> 00:24:15,460
function and I get rid of this console

00:24:11,740 --> 00:24:22,360
lock this was planned yeah then but only

00:24:15,460 --> 00:24:28,770
then I draw something I click the button

00:24:22,360 --> 00:24:28,770
and we see it is animated really cool

00:24:30,180 --> 00:24:35,920
three lines of code life animation

00:24:32,800 --> 00:24:37,840
pretty cool Rx chess catalyst rep okay I

00:24:35,920 --> 00:24:40,060
click this button again and again and

00:24:37,840 --> 00:24:40,870
again very often and I mess up

00:24:40,060 --> 00:24:43,720
everything

00:24:40,870 --> 00:24:46,300
why because all my animations are

00:24:43,720 --> 00:24:48,790
running and overlapping each other what

00:24:46,300 --> 00:24:52,000
I should do is I should control whenever

00:24:48,790 --> 00:24:54,790
I click the button stop scheduling the

00:24:52,000 --> 00:25:04,180
old signature reset everything and start

00:24:54,790 --> 00:25:08,050
a new one let's do this to do this I use

00:25:04,180 --> 00:25:11,440
a subscription I have a predefined

00:25:08,050 --> 00:25:14,980
subscription here this drawing process

00:25:11,440 --> 00:25:18,370
subscription it is here it's just a new

00:25:14,980 --> 00:25:23,740
empty signature nothing else and here I

00:25:18,370 --> 00:25:27,520
use the signatures yet method and as we

00:25:23,740 --> 00:25:29,920
know every scheduled work returns a

00:25:27,520 --> 00:25:32,560
subscription now I can add the

00:25:29,920 --> 00:25:36,100
subscription of this scheduled method to

00:25:32,560 --> 00:25:37,960
my drawing process subscription and when

00:25:36,100 --> 00:25:38,860
I click on this button and start this

00:25:37,960 --> 00:25:42,400
process

00:25:38,860 --> 00:25:46,770
I not only reset my signature but I only

00:25:42,400 --> 00:25:50,290
reset also reset my animation I reset my

00:25:46,770 --> 00:25:52,930
reset subscription and what I'm doing

00:25:50,290 --> 00:25:54,100
here is I just unsubscribe from my

00:25:52,930 --> 00:25:58,000
subscription

00:25:54,100 --> 00:26:10,600
create a new one and if I test this code

00:25:58,000 --> 00:26:16,150
now what ya compile-time zip for my

00:26:10,600 --> 00:26:19,840
throat and now I click this button many

00:26:16,150 --> 00:26:21,760
times and you see we we stop the

00:26:19,840 --> 00:26:25,260
animation and we restart a completely

00:26:21,760 --> 00:26:28,110
new one no overlapping animations here

00:26:25,260 --> 00:26:33,070
therefore I used a signature

00:26:28,110 --> 00:26:36,580
subscription dot add method ok pretty

00:26:33,070 --> 00:26:39,299
cool right let's go back and do

00:26:36,580 --> 00:26:45,159
something else what is the next slide

00:26:39,299 --> 00:26:48,280
virtual time scheduling ok so I already

00:26:45,159 --> 00:26:50,980
discussed this for major schedulers the

00:26:48,280 --> 00:26:53,140
queue scheduler ASAP issuing an

00:26:50,980 --> 00:26:55,120
animation frame scheduler now let's talk

00:26:53,140 --> 00:26:58,179
about some special schedulers let's talk

00:26:55,120 --> 00:27:01,360
about virtual time scheduler what is the

00:26:58,179 --> 00:27:04,679
virtual time scheduler here for it is

00:27:01,360 --> 00:27:07,870
here to execute some work in no time

00:27:04,679 --> 00:27:11,140
which means if I have an interval with a

00:27:07,870 --> 00:27:16,090
tick of 1000 milliseconds and that take

00:27:11,140 --> 00:27:19,360
ten of them it will take no time where

00:27:16,090 --> 00:27:22,480
can I use this I can use it if I have

00:27:19,360 --> 00:27:27,070
some observable logic that I want to

00:27:22,480 --> 00:27:31,120
have executed immediately a good example

00:27:27,070 --> 00:27:34,059
here would be well there is one feature

00:27:31,120 --> 00:27:36,760
with this signature pet it it draws your

00:27:34,059 --> 00:27:39,039
signature over coordinates but it can

00:27:36,760 --> 00:27:42,940
export your signature as a PNG or

00:27:39,039 --> 00:27:45,610
another image format and there is a

00:27:42,940 --> 00:27:48,880
second button show immediately the goal

00:27:45,610 --> 00:27:51,159
is that I have two options either I want

00:27:48,880 --> 00:27:53,740
to animate this stuff or I want to get

00:27:51,159 --> 00:27:55,780
the image and download it and have I

00:27:53,740 --> 00:28:01,090
want to have this signature immediately

00:27:55,780 --> 00:28:05,460
on the right side here to do so I will

00:28:01,090 --> 00:28:05,460
use a virtual time scheduler

00:28:06,600 --> 00:28:13,110
there is a lot of code here okay here we

00:28:12,760 --> 00:28:15,250
go

00:28:13,110 --> 00:28:18,130
short time is over overlapping

00:28:15,250 --> 00:28:22,900
animations are done again a short time

00:28:18,130 --> 00:28:26,170
bomb okay I will show you that if I call

00:28:22,900 --> 00:28:27,460
this action that I can pass in here a

00:28:26,170 --> 00:28:30,820
parameter that is called

00:28:27,460 --> 00:28:34,720
show immediately it could be true or

00:28:30,820 --> 00:28:36,610
false if it is false I take the async

00:28:34,720 --> 00:28:39,460
scheduler to schedule this work in time

00:28:36,610 --> 00:28:42,940
if it is true I use the virtual time

00:28:39,460 --> 00:28:45,480
scheduler for the virtual time scheduler

00:28:42,940 --> 00:28:48,310
there is no predefined variable in our X

00:28:45,480 --> 00:28:51,160
so let me quickly show you how I did it

00:28:48,310 --> 00:28:53,740
I just created a new instance there are

00:28:51,160 --> 00:28:55,480
more options you could pass in a custom

00:28:53,740 --> 00:28:58,230
now function or other stuff but to keep

00:28:55,480 --> 00:29:01,240
it simple I just created a normal

00:28:58,230 --> 00:29:04,750
virtual time scheduler so if this is

00:29:01,240 --> 00:29:07,480
true I assigned to my scheduler variable

00:29:04,750 --> 00:29:11,650
here the virtual time scheduler I have

00:29:07,480 --> 00:29:13,710
to change nothing and if I click this

00:29:11,650 --> 00:29:13,710
button

00:29:19,460 --> 00:29:31,590
come on if I click this button

00:29:24,600 --> 00:29:34,800
Hoppa draw something still works clean

00:29:31,590 --> 00:29:38,130
it and click it nothing happens

00:29:34,800 --> 00:29:40,800
why because a virtual time scheduler is

00:29:38,130 --> 00:29:44,610
completely different whenever I want to

00:29:40,800 --> 00:29:48,720
have my work be executed I need to call

00:29:44,610 --> 00:29:51,120
that flush method out manually so here

00:29:48,720 --> 00:29:54,570
whenever it is show immediately I lose

00:29:51,120 --> 00:29:57,420
my scheduler and the schedulers flush

00:29:54,570 --> 00:30:00,900
method but only if it is shown

00:29:57,420 --> 00:30:08,340
immediately and if I recompile this

00:30:00,900 --> 00:30:11,670
again to a compiling zip wonderful and I

00:30:08,340 --> 00:30:13,910
draw something and a test if it is still

00:30:11,670 --> 00:30:16,200
working with the animation it is and

00:30:13,910 --> 00:30:21,150
then I clean it and then I click this

00:30:16,200 --> 00:30:24,650
button immediately without time even if

00:30:21,150 --> 00:30:30,540
I do it very slow let's say I do a line

00:30:24,650 --> 00:30:33,600
3 seconds break another line if animate

00:30:30,540 --> 00:30:35,760
this is really slow and it also applies

00:30:33,600 --> 00:30:38,580
the brakes you see I to a break nor and

00:30:35,760 --> 00:30:40,620
now I draw again with virtual time

00:30:38,580 --> 00:30:42,950
schedule I this no time it's just here

00:30:40,620 --> 00:30:46,290
but I changed nothing in the code I just

00:30:42,950 --> 00:30:51,830
applied another parameter super-powerful

00:30:46,290 --> 00:30:51,830
red let me give you a last example

00:30:55,030 --> 00:31:02,770
okay demo recursive scheduling I didn't

00:31:00,130 --> 00:31:03,460
know that I do this okay but let's do it

00:31:02,770 --> 00:31:05,740
mm-hmm

00:31:03,460 --> 00:31:10,020
recursive scheduling is pretty cool I

00:31:05,740 --> 00:31:13,930
prepared this smiley here that should

00:31:10,020 --> 00:31:16,570
act as a speaker I have a text box and

00:31:13,930 --> 00:31:20,830
if I click on the button and I type in

00:31:16,570 --> 00:31:23,470
some text I transform this text to Morse

00:31:20,830 --> 00:31:25,450
code signals Morse code is some code

00:31:23,470 --> 00:31:28,000
that sends and stops sending and

00:31:25,450 --> 00:31:29,710
whenever I send I will animate this

00:31:28,000 --> 00:31:31,360
smiley to open them off and whenever I

00:31:29,710 --> 00:31:33,820
stop sending it will close the mouth I

00:31:31,360 --> 00:31:35,440
do this because normally I do it over

00:31:33,820 --> 00:31:36,790
the speaker but sometimes I have

00:31:35,440 --> 00:31:42,490
problems and this is my fallback

00:31:36,790 --> 00:31:48,850
solution okay now it gets pretty complex

00:31:42,490 --> 00:31:49,630
so I hope you are awake I again have

00:31:48,850 --> 00:31:55,720
work here

00:31:49,630 --> 00:31:57,430
and I have this signals to schedule what

00:31:55,720 --> 00:31:59,980
are the signals to schedule these dots

00:31:57,430 --> 00:32:04,750
and dashes this Morse code here this is

00:31:59,980 --> 00:32:06,640
an array and then here is my work my

00:32:04,750 --> 00:32:08,860
work receives all the signals when I

00:32:06,640 --> 00:32:11,980
schedule it I schedule it down here I

00:32:08,860 --> 00:32:16,230
have my work a delay of 0 and all my

00:32:11,980 --> 00:32:20,110
sitting signals that I wanna schedule ok

00:32:16,230 --> 00:32:22,180
in this line I just shift off and the

00:32:20,110 --> 00:32:26,820
first one and then I lock the signal and

00:32:22,180 --> 00:32:30,040
this and what do you think what is this

00:32:26,820 --> 00:32:32,920
this is the context of the component so

00:32:30,040 --> 00:32:35,530
if I look in my console I see the dot

00:32:32,920 --> 00:32:38,020
here this is my Morse code symbol and my

00:32:35,530 --> 00:32:42,130
Morse code scheduling component I love

00:32:38,020 --> 00:32:45,730
really long names so that this is my

00:32:42,130 --> 00:32:50,260
component and now I can use this this

00:32:45,730 --> 00:32:52,900
here and I can use some helper functions

00:32:50,260 --> 00:32:56,050
for example I can calculate how long the

00:32:52,900 --> 00:33:01,730
duration of a Morse signal should be and

00:32:56,050 --> 00:33:14,600
then I can print it out duration

00:33:01,730 --> 00:33:16,519
and if I look in the console and I

00:33:14,600 --> 00:33:17,149
clicked about Nessie 100 milliseconds

00:33:16,519 --> 00:33:20,659
okay

00:33:17,149 --> 00:33:23,120
and still my dis so if I want to do

00:33:20,659 --> 00:33:25,639
recursive scheduling and need to

00:33:23,120 --> 00:33:28,820
schedule an action within an action so I

00:33:25,639 --> 00:33:31,490
need access to the actions context this

00:33:28,820 --> 00:33:34,389
function should sit or that this should

00:33:31,490 --> 00:33:37,279
be the dis of my action how to do this

00:33:34,389 --> 00:33:40,789
well I just replace my error function

00:33:37,279 --> 00:33:46,460
with an anonymous function okay

00:33:40,789 --> 00:33:53,809
and let me comment out this line and get

00:33:46,460 --> 00:33:54,649
rid of the duration and if I do this and

00:33:53,809 --> 00:33:58,399
I click the button

00:33:54,649 --> 00:34:01,399
I see that my this is not the cue action

00:33:58,399 --> 00:34:05,480
now I'm sitting inside of the action and

00:34:01,399 --> 00:34:08,780
what I can do now I can create this

00:34:05,480 --> 00:34:14,720
constant here which is this and then I

00:34:08,780 --> 00:34:19,490
could say well action what about if you

00:34:14,720 --> 00:34:22,300
schedule something this line here now I

00:34:19,490 --> 00:34:27,409
could say action take my new signals

00:34:22,300 --> 00:34:31,399
they are now one less and schedule them

00:34:27,409 --> 00:34:34,490
at some point in the future but what I

00:34:31,399 --> 00:34:37,069
did I lost my context to my component so

00:34:34,490 --> 00:34:41,419
I cannot run this get duration function

00:34:37,069 --> 00:34:45,619
again so and it's somehow a way to have

00:34:41,419 --> 00:34:48,500
access to the scope of the action and my

00:34:45,619 --> 00:34:52,069
component how I would do this well

00:34:48,500 --> 00:34:54,980
function composition right so I provide

00:34:52,069 --> 00:34:57,859
another parameter the context and what

00:34:54,980 --> 00:35:00,740
is this context here it is the context

00:34:57,859 --> 00:35:04,099
of my component but how do I get this

00:35:00,740 --> 00:35:07,550
component I need to create this function

00:35:04,099 --> 00:35:10,670
and if I provide me this here in my work

00:35:07,550 --> 00:35:13,400
it will return this function and this

00:35:10,670 --> 00:35:14,840
function then have access to the context

00:35:13,400 --> 00:35:29,050
of the component

00:35:14,840 --> 00:35:33,800
aimes the action itself and now we see

00:35:29,050 --> 00:35:39,050
that we have the context of the action

00:35:33,800 --> 00:35:43,040
end of the component itself so the last

00:35:39,050 --> 00:35:45,680
tiny bit to implement the rest of the

00:35:43,040 --> 00:35:48,530
logic is we would need some scope here

00:35:45,680 --> 00:35:51,830
to keep track of if I'm currently

00:35:48,530 --> 00:35:55,070
sending or not and I could do this by

00:35:51,830 --> 00:36:05,530
adding some brackets here and create a

00:35:55,070 --> 00:36:13,250
is sending method variables or sorry and

00:36:05,530 --> 00:36:15,830
then I can return this function and

00:36:13,250 --> 00:36:18,200
everything is as it was before and I

00:36:15,830 --> 00:36:21,440
have some state here that I can change I

00:36:18,200 --> 00:36:26,240
can set it to true and it will remember

00:36:21,440 --> 00:36:31,850
it after I run it a second time okay we

00:36:26,240 --> 00:36:35,330
have now access to our action to our

00:36:31,850 --> 00:36:37,220
component and we can hold some state now

00:36:35,330 --> 00:36:40,310
let's implement the rest of the logic

00:36:37,220 --> 00:36:42,980
and I do this by just using another

00:36:40,310 --> 00:36:47,270
function because I don't like life

00:36:42,980 --> 00:36:50,480
coding today and a jump in it's not a

00:36:47,270 --> 00:36:53,390
lot more it's just keeping track of this

00:36:50,480 --> 00:36:56,780
is sending stopping the animation if

00:36:53,390 --> 00:36:59,260
there are no items and scheduling these

00:36:56,780 --> 00:37:02,020
actions and if I did everything right

00:36:59,260 --> 00:37:11,320
which is hopefully the case and

00:37:02,020 --> 00:37:11,320
everything recompiles is there a problem

00:37:12,240 --> 00:37:15,680
serve it again

00:37:27,300 --> 00:37:30,140
come on

00:37:43,650 --> 00:37:58,390
it's pretty slow today maybe because of

00:37:49,630 --> 00:38:00,660
the new CLI okay there is an error I get

00:37:58,390 --> 00:38:05,880
rid of this error by reverting my whole

00:38:00,660 --> 00:38:16,450
coding and just use a working function

00:38:05,880 --> 00:38:19,539
easy jump up here and I use a function

00:38:16,450 --> 00:38:31,210
that starts with an underscore I say if

00:38:19,539 --> 00:38:34,299
it recompile it and come on I need

00:38:31,210 --> 00:38:38,670
another one of half-ass really no I need

00:38:34,299 --> 00:38:47,049
just working code not a lot action T

00:38:38,670 --> 00:38:53,109
typescript okay if I set you for action

00:38:47,049 --> 00:38:57,359
I see that I created a constant and this

00:38:53,109 --> 00:39:06,210
constant is incorrectly typed

00:38:57,359 --> 00:39:06,210
where is this constant it's not here

00:39:07,250 --> 00:39:12,900
signature scheduling component ah okay

00:39:10,980 --> 00:39:19,530
it's in another scheduler let's revert

00:39:12,900 --> 00:39:27,360
also this stuff and you see it works

00:39:19,530 --> 00:39:35,030
yeah I click this button and I get this

00:39:27,360 --> 00:39:44,100
error cool let's jump over to my last

00:39:35,030 --> 00:39:46,650
slide it's on test scheduler and test

00:39:44,100 --> 00:39:49,320
scheduler our helpers that helps you to

00:39:46,650 --> 00:39:52,620
test observables test catalyst turn

00:39:49,320 --> 00:39:56,040
marble diagrams into observables and you

00:39:52,620 --> 00:40:00,510
can again use them by executing the

00:39:56,040 --> 00:40:02,760
flash method how would this look in code

00:40:00,510 --> 00:40:05,760
you would create this string here this

00:40:02,760 --> 00:40:08,550
marble diagram and over the code method

00:40:05,760 --> 00:40:12,690
it would turn this string into an Cole

00:40:08,550 --> 00:40:18,960
observable later on you can test if you

00:40:12,690 --> 00:40:21,990
have to expect it outcome okay that was

00:40:18,960 --> 00:40:25,440
pretty a lot let's do a quick recap and

00:40:21,990 --> 00:40:27,560
then we are done what I shot today was

00:40:25,440 --> 00:40:30,030
what schedulers are what their

00:40:27,560 --> 00:40:33,180
responsibilities are that you can use

00:40:30,030 --> 00:40:36,120
them manually and there are many

00:40:33,180 --> 00:40:38,550
different schedulers and really

00:40:36,120 --> 00:40:40,920
important if you apply delay you should

00:40:38,550 --> 00:40:43,860
know what you're doing because they will

00:40:40,920 --> 00:40:45,780
fall back to the async scheduler and of

00:40:43,860 --> 00:40:51,900
course you can use it manually and

00:40:45,780 --> 00:40:53,640
recursively thanks for your time and if

00:40:51,900 --> 00:40:56,739
you have questions or setup

00:40:53,640 --> 00:40:56,739

YouTube URL: https://www.youtube.com/watch?v=HBFEz7f-nxk


