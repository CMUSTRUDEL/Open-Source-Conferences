Title: Angular Vienna, Architecting large angular solutions, May 2019
Publication date: 2019-06-12
Playlist: Angular Vienna
Description: 
	Talk by Brecht Billiet:

Brecht is a trainer, blogger, and software engineer, passionate about architecture and best-practices. Brecht uses the technologies that he teaches in his workshops on a daily basis in different projects. One of his main activities is kickstarting new Angular projects in companies and guiding them in the right direction
Captions: 
	00:00:00,240 --> 00:00:05,609
so I'm black I'm front-end freelance

00:00:02,760 --> 00:00:08,280
engineer I'm a co-founder and trainer at

00:00:05,609 --> 00:00:11,190
strong brew and also a trainer at Thor

00:00:08,280 --> 00:00:12,660
Ram we have a block I don't know if you

00:00:11,190 --> 00:00:15,740
already heard of it

00:00:12,660 --> 00:00:19,080
we mostly blog about rx GS and angular

00:00:15,740 --> 00:00:22,080
architecture that kind of stuff so if

00:00:19,080 --> 00:00:25,890
you're willing totally check it out so

00:00:22,080 --> 00:00:27,359
one only one slide about strong brew so

00:00:25,890 --> 00:00:30,359
what we do we do trainings with a

00:00:27,359 --> 00:00:33,780
coaching we kick start new projects with

00:00:30,359 --> 00:00:37,260
a consultancy good reviews and all that

00:00:33,780 --> 00:00:39,899
we do is based on best practices or at

00:00:37,260 --> 00:00:43,829
least what we think that best practices

00:00:39,899 --> 00:00:45,539
are so enough about strong brew today

00:00:43,829 --> 00:00:48,660
we're here about architecture right so

00:00:45,539 --> 00:00:51,390
what is architecture if I have to sum up

00:00:48,660 --> 00:00:54,239
a description about architecture it

00:00:51,390 --> 00:00:56,640
would be a good architecture is simply

00:00:54,239 --> 00:00:58,620
an opinionated system of knowing where

00:00:56,640 --> 00:01:01,260
to put something everybody has opinions

00:00:58,620 --> 00:01:03,570
about architecture if the team knows

00:01:01,260 --> 00:01:06,450
where he can put something inside of the

00:01:03,570 --> 00:01:07,850
code base for me by definition as a good

00:01:06,450 --> 00:01:12,060
architecture because teams are

00:01:07,850 --> 00:01:14,340
productive in it so a few important

00:01:12,060 --> 00:01:16,680
aspects about architecture we have to be

00:01:14,340 --> 00:01:19,020
future-proof right because most of us

00:01:16,680 --> 00:01:22,380
probably work in agile environments and

00:01:19,020 --> 00:01:23,490
in a few months or PM will tell us

00:01:22,380 --> 00:01:25,830
something different that we have to

00:01:23,490 --> 00:01:28,740
refactor a lot of stuff so we will have

00:01:25,830 --> 00:01:30,979
to handle legacy as well we have to do

00:01:28,740 --> 00:01:33,689
refactoring we want to have a consistent

00:01:30,979 --> 00:01:36,090
structure and these are all aspects

00:01:33,689 --> 00:01:37,829
about architecture but the most

00:01:36,090 --> 00:01:40,140
important one at least the one that we

00:01:37,829 --> 00:01:42,560
are going to tackle today is share and

00:01:40,140 --> 00:01:42,560
reuse

00:01:44,670 --> 00:01:48,570
so let's take this scenario we have a

00:01:47,220 --> 00:01:53,790
webshop app and we have a stock

00:01:48,570 --> 00:01:55,350
management app they both have two

00:01:53,790 --> 00:01:56,970
modules that you want to share they have

00:01:55,350 --> 00:01:59,280
a stock module and not tent occation

00:01:56,970 --> 00:02:00,900
module and let's just say that the

00:01:59,280 --> 00:02:04,350
webshop app and the stock management app

00:02:00,900 --> 00:02:06,630
are kind of empty shells and they share

00:02:04,350 --> 00:02:10,770
the stock module almost completely an

00:02:06,630 --> 00:02:13,110
authentication module as well so how are

00:02:10,770 --> 00:02:17,630
we going to share that the first thing

00:02:13,110 --> 00:02:20,670
that might have pops in our mind is NPM

00:02:17,630 --> 00:02:23,280
we can publish it on NPM and we can

00:02:20,670 --> 00:02:27,209
start sharing it to everybody that wants

00:02:23,280 --> 00:02:29,519
to use these pieces of code the downside

00:02:27,209 --> 00:02:31,350
bit is that we have to maintain all

00:02:29,519 --> 00:02:33,510
these different NPM packages and right

00:02:31,350 --> 00:02:35,300
now we're talking about two modules but

00:02:33,510 --> 00:02:39,630
when you're working in quite large

00:02:35,300 --> 00:02:42,030
organization you mind up having 20 or

00:02:39,630 --> 00:02:43,290
100 or even more NPM packages and they

00:02:42,030 --> 00:02:46,440
all have their own repos they have to

00:02:43,290 --> 00:02:49,320
manage those as well so it's quite

00:02:46,440 --> 00:02:51,450
expensive in maintenance there's some

00:02:49,320 --> 00:02:53,610
awkward development because you have to

00:02:51,450 --> 00:02:55,769
publish when you not really have to

00:02:53,610 --> 00:02:56,850
publish but you have to build every time

00:02:55,769 --> 00:02:59,489
you want to use something in another

00:02:56,850 --> 00:03:01,860
application and you can have version

00:02:59,489 --> 00:03:06,360
mismatches so let's say that you have 20

00:03:01,860 --> 00:03:10,110
MPM packages and 10 of them are using

00:03:06,360 --> 00:03:15,600
angular 6 and 2 are using 7 and maybe in

00:03:10,110 --> 00:03:17,370
a few weeks 8 it's hard because you can

00:03:15,600 --> 00:03:19,860
get conflicts so you want everything to

00:03:17,370 --> 00:03:21,570
be on the same angular version and if

00:03:19,860 --> 00:03:22,709
you want to update one package and you

00:03:21,570 --> 00:03:26,820
have to update the other one and the

00:03:22,709 --> 00:03:29,670
other one it's hard so what we can do to

00:03:26,820 --> 00:03:33,989
fix this issue is we can go to a mono

00:03:29,670 --> 00:03:35,660
repo where you have a theory 0 and Pepa

00:03:33,989 --> 00:03:38,519
get packages and you only have one

00:03:35,660 --> 00:03:41,280
repository let's call it strong brew

00:03:38,519 --> 00:03:44,280
because strong brew is the organization

00:03:41,280 --> 00:03:46,650
in this hypothetical manner so we have a

00:03:44,280 --> 00:03:49,530
web shop app stock management app these

00:03:46,650 --> 00:03:53,480
two are being shared but since we are

00:03:49,530 --> 00:03:57,060
using among a repository it's quite easy

00:03:53,480 --> 00:03:58,590
because it's easy to share it's in the

00:03:57,060 --> 00:04:01,739
same repo we can just imp

00:03:58,590 --> 00:04:06,420
if you want to only or TS config should

00:04:01,739 --> 00:04:08,520
be importing it and it forces us to have

00:04:06,420 --> 00:04:12,900
everything on the same version I would

00:04:08,520 --> 00:04:15,450
even be so bold to say that if you're

00:04:12,900 --> 00:04:17,669
using a mono repo in angular it's a good

00:04:15,450 --> 00:04:19,980
idea to only have one package JSON file

00:04:17,669 --> 00:04:22,320
one package JSON file that has all the

00:04:19,980 --> 00:04:24,500
angular version the same of the same

00:04:22,320 --> 00:04:27,060
level there are other ways of doing it

00:04:24,500 --> 00:04:31,290
but the easiest way is to only maintain

00:04:27,060 --> 00:04:33,419
one package JSON file so we don't

00:04:31,290 --> 00:04:37,380
publish we don't need to publish anymore

00:04:33,419 --> 00:04:38,840
to NPM so there are three kind of motor

00:04:37,380 --> 00:04:41,430
repos and this is just personal

00:04:38,840 --> 00:04:43,530
terminology we have the organization

00:04:41,430 --> 00:04:46,740
write mono repo and the organization

00:04:43,530 --> 00:04:49,560
that Monaco is just a repository that

00:04:46,740 --> 00:04:53,250
contains all the angular related code of

00:04:49,560 --> 00:04:55,050
an entire organization right that makes

00:04:53,250 --> 00:04:58,260
it super easy to share because it's all

00:04:55,050 --> 00:05:00,180
there it's not always possible though if

00:04:58,260 --> 00:05:02,070
your company is selling products to

00:05:00,180 --> 00:05:04,770
different clients your clients probably

00:05:02,070 --> 00:05:09,360
not gonna want everything to be on the

00:05:04,770 --> 00:05:13,680
except repository I don't even think you

00:05:09,360 --> 00:05:15,060
can achieve that legally but in this

00:05:13,680 --> 00:05:20,160
scenario we don't have to publish

00:05:15,060 --> 00:05:22,620
anything champion a scoped mono repo or

00:05:20,160 --> 00:05:26,130
platform on repo is basically a mono

00:05:22,620 --> 00:05:27,260
repo that contains projects that have

00:05:26,130 --> 00:05:29,760
something in common

00:05:27,260 --> 00:05:33,720
think about the platform think about for

00:05:29,760 --> 00:05:36,990
instance Facebook Facebook has Facebook

00:05:33,720 --> 00:05:39,330
it has messenger it has pages chances

00:05:36,990 --> 00:05:40,940
are big that they are sharing code but

00:05:39,330 --> 00:05:42,690
that doesn't mean the entire

00:05:40,940 --> 00:05:44,610
organization should be inside of that

00:05:42,690 --> 00:05:47,250
mono repo we can say like this is my

00:05:44,610 --> 00:05:49,080
platform or these are even two projects

00:05:47,250 --> 00:05:52,289
that share code you can put it in a

00:05:49,080 --> 00:05:55,970
scoped mono repo and if you have scope

00:05:52,289 --> 00:06:00,900
mono repo then you have an issue and

00:05:55,970 --> 00:06:03,240
that s you yes you will still have code

00:06:00,900 --> 00:06:06,240
that needs to be shared right you will

00:06:03,240 --> 00:06:09,169
have multiple scope mon repos and that's

00:06:06,240 --> 00:06:11,130
when you can use a toolkit this is

00:06:09,169 --> 00:06:12,229
something that I believe that every

00:06:11,130 --> 00:06:14,240
company

00:06:12,229 --> 00:06:16,310
unless you have an organizational

00:06:14,240 --> 00:06:20,900
Whiteman repo because then everything is

00:06:16,310 --> 00:06:23,060
already there so a toolkit it does not

00:06:20,900 --> 00:06:25,340
contain business logic that's really

00:06:23,060 --> 00:06:27,620
important it will contain custom rxjs

00:06:25,340 --> 00:06:30,259
operators it will contain HTTP

00:06:27,620 --> 00:06:32,180
extensions it will contain form

00:06:30,259 --> 00:06:33,710
extensions and so on so basically

00:06:32,180 --> 00:06:35,629
everything that you have to write all

00:06:33,710 --> 00:06:39,289
over again every time you create a new

00:06:35,629 --> 00:06:41,300
application and it's important to note

00:06:39,289 --> 00:06:45,199
here that everything will be published

00:06:41,300 --> 00:06:47,719
to NPM so we will have multiple packages

00:06:45,199 --> 00:06:53,060
inside var toolkit and they all will be

00:06:47,719 --> 00:06:57,620
published to NPM ok so how do we share

00:06:53,060 --> 00:07:00,409
code inside of a mono repo we can just

00:06:57,620 --> 00:07:02,479
do this we can just say stock service

00:07:00,409 --> 00:07:05,180
and we import it from wherever stock

00:07:02,479 --> 00:07:09,139
service lives and we're not going to do

00:07:05,180 --> 00:07:11,330
that because that's a dirty import dot

00:07:09,139 --> 00:07:13,069
slash dot dot slash lives in stocks or

00:07:11,330 --> 00:07:16,310
slip we don't care about that what we

00:07:13,069 --> 00:07:19,129
actually want is this we want to import

00:07:16,310 --> 00:07:22,909
it from a clean namespace strong blue

00:07:19,129 --> 00:07:27,020
slash stock but we're not using NPM so

00:07:22,909 --> 00:07:28,939
how are we going to do that you can use

00:07:27,020 --> 00:07:31,729
static a puff mapping which is a feature

00:07:28,939 --> 00:07:33,199
that is baked in into typescript so the

00:07:31,729 --> 00:07:35,270
only thing that you need to do is you

00:07:33,199 --> 00:07:37,879
need to create a barrel foul and that

00:07:35,270 --> 00:07:42,219
Barrel file is just an index dot ES file

00:07:37,879 --> 00:07:46,009
which exports everything that you need

00:07:42,219 --> 00:07:50,060
you will have one barrel file for every

00:07:46,009 --> 00:07:51,889
project we'll cover that later on there

00:07:50,060 --> 00:07:53,990
will of course not be one line and there

00:07:51,889 --> 00:07:55,879
it will be multiple lines but only the

00:07:53,990 --> 00:07:57,469
things that you need to be export that

00:07:55,879 --> 00:08:00,439
needs to be exported will be in there

00:07:57,469 --> 00:08:03,469
and then in the TS config Jessel

00:08:00,439 --> 00:08:06,379
configuration file we just need to map

00:08:03,469 --> 00:08:09,919
it so we have path property inside of

00:08:06,379 --> 00:08:12,409
the compiler options and we're saying at

00:08:09,919 --> 00:08:15,889
strong blue slash stock you need to map

00:08:12,409 --> 00:08:17,659
it to that specific barrel file and you

00:08:15,889 --> 00:08:21,139
do not need any framework for that this

00:08:17,659 --> 00:08:22,819
is just typescript we will see that the

00:08:21,139 --> 00:08:25,330
frameworks implemented in the same way

00:08:22,819 --> 00:08:28,629
because staff get popped napping we

00:08:25,330 --> 00:08:30,220
cool because let's say later on at

00:08:28,629 --> 00:08:33,029
strong boosts livestock we're gonna

00:08:30,220 --> 00:08:35,320
throw that an MP act MPM package as well

00:08:33,029 --> 00:08:37,000
the only thing that we need to do is we

00:08:35,320 --> 00:08:38,409
have to remove that line and all our

00:08:37,000 --> 00:08:44,440
code will keep on working because the

00:08:38,409 --> 00:08:47,890
namespace is clean so what happens when

00:08:44,440 --> 00:08:50,680
we're importing from within a project

00:08:47,890 --> 00:08:52,810
clip so in this scenario we have a stock

00:08:50,680 --> 00:08:55,120
service and the stock service will fetch

00:08:52,810 --> 00:08:59,740
stock from some kind of micro service

00:08:55,120 --> 00:09:05,459
maybe and it needs the stock type we can

00:08:59,740 --> 00:09:08,050
see it needs stock there of course but

00:09:05,459 --> 00:09:11,260
this also poses a problem because we're

00:09:08,050 --> 00:09:14,019
in the project it doesn't need to know

00:09:11,260 --> 00:09:16,810
that it has to be exposed and strong

00:09:14,019 --> 00:09:19,630
blue / dark because right now we have a

00:09:16,810 --> 00:09:24,040
stock service it will import from strong

00:09:19,630 --> 00:09:27,100
blue / stock which will resolve to the

00:09:24,040 --> 00:09:31,680
end XTS file which will export the stock

00:09:27,100 --> 00:09:34,720
service so we have a circle dependency

00:09:31,680 --> 00:09:39,579
so this is basically what we want and

00:09:34,720 --> 00:09:40,930
this is for every type of mono repo when

00:09:39,579 --> 00:09:42,459
you're doing angular or react or

00:09:40,930 --> 00:09:45,000
whatever it doesn't really matter you do

00:09:42,459 --> 00:09:50,290
not want to have those circular

00:09:45,000 --> 00:09:52,449
dependencies a few other best practices

00:09:50,290 --> 00:09:55,510
before we go to the next part is for

00:09:52,449 --> 00:09:59,850
these dependencies of course and you can

00:09:55,510 --> 00:10:02,920
only have one barrel file per library of

00:09:59,850 --> 00:10:06,100
course it might seem cool if you have a

00:10:02,920 --> 00:10:08,079
services folder that contains like 20

00:10:06,100 --> 00:10:10,660
services that you also put an indexed ES

00:10:08,079 --> 00:10:12,640
file in there and then you import the

00:10:10,660 --> 00:10:15,100
other barrel file don't do that just

00:10:12,640 --> 00:10:18,850
keep one barrel file otherwise you will

00:10:15,100 --> 00:10:25,029
have these circular dependencies over

00:10:18,850 --> 00:10:27,670
and over again so we already saw that we

00:10:25,029 --> 00:10:29,380
can use mono repos to share code we saw

00:10:27,670 --> 00:10:31,779
the three different types of mono repos

00:10:29,380 --> 00:10:34,920
we saw how we can import from these mono

00:10:31,779 --> 00:10:37,689
repo so how are we going to manage

00:10:34,920 --> 00:10:42,850
organization right or scoped

00:10:37,689 --> 00:10:47,619
an ex is built by the amazing people of

00:10:42,850 --> 00:10:50,470
narwhal who focuses on consultancy for

00:10:47,619 --> 00:10:54,069
very big applications very big companies

00:10:50,470 --> 00:10:56,549
so they have created a custom schematic

00:10:54,069 --> 00:11:00,489
a thin layer on top of the angular CLI

00:10:56,549 --> 00:11:03,369
that is used to manage mana repose has

00:11:00,489 --> 00:11:09,160
some scaffolding and it also uses the

00:11:03,369 --> 00:11:10,809
taps get buff mapping so when we're

00:11:09,160 --> 00:11:14,049
talking NX

00:11:10,809 --> 00:11:21,809
mano repos we're talking about the

00:11:14,049 --> 00:11:24,879
workspace and the workspace is a list of

00:11:21,809 --> 00:11:28,899
applications of apps and a list of lips

00:11:24,879 --> 00:11:31,809
an app is an empty shell it does not

00:11:28,899 --> 00:11:34,470
contain any business logic it will use

00:11:31,809 --> 00:11:38,709
all these lips it will leverage them in

00:11:34,470 --> 00:11:41,379
orchestrating an application so the apps

00:11:38,709 --> 00:11:45,069
it will have routing and stuff like that

00:11:41,379 --> 00:11:47,619
maybe it will have a tow bar but there

00:11:45,069 --> 00:11:49,689
will be no business logic in that if we

00:11:47,619 --> 00:11:52,029
all be orchestrated to our lips because

00:11:49,689 --> 00:11:56,769
those lips can be used across the entire

00:11:52,029 --> 00:11:59,319
mono repo so if you want to create a

00:11:56,769 --> 00:12:02,139
workspace you can just use novel

00:11:59,319 --> 00:12:05,470
schematics and Narwhal schematics is the

00:12:02,139 --> 00:12:07,419
NPM package name that stands for NX and

00:12:05,470 --> 00:12:09,970
we use the command to create an ex-work

00:12:07,419 --> 00:12:12,910
space strong blue because strong blue is

00:12:09,970 --> 00:12:15,869
the name of our workspace it will also

00:12:12,910 --> 00:12:18,720
be the name of our NPM scope the at

00:12:15,869 --> 00:12:21,579
strong blue that we saw in our imports

00:12:18,720 --> 00:12:23,230
we navigate directly into it and we can

00:12:21,579 --> 00:12:28,839
create an application and there by using

00:12:23,230 --> 00:12:32,350
the ng generate app it's a command from

00:12:28,839 --> 00:12:36,129
the CLI and we're going to call that app

00:12:32,350 --> 00:12:38,769
webshop like we said before we have two

00:12:36,129 --> 00:12:43,569
different apps so we can also create an

00:12:38,769 --> 00:12:45,339
app stock management we have covered

00:12:43,569 --> 00:12:47,470
apps but in a workspace there are also

00:12:45,339 --> 00:12:50,520
lips so let's create a live in there

00:12:47,470 --> 00:12:53,910
let's call it just a lip so ng generate

00:12:50,520 --> 00:12:54,870
live name just a lip the reason why I'm

00:12:53,910 --> 00:12:57,149
using MPX

00:12:54,870 --> 00:13:05,040
by the way is because I want to use a

00:12:57,149 --> 00:13:09,440
specific version of an axe so when I'm

00:13:05,040 --> 00:13:11,610
standing here that things don't go wrong

00:13:09,440 --> 00:13:15,240
so what is being generated by these

00:13:11,610 --> 00:13:18,120
commands we have strong blue which is

00:13:15,240 --> 00:13:19,950
the workspace we have apps which is a

00:13:18,120 --> 00:13:23,310
list of all the apps we have created and

00:13:19,950 --> 00:13:25,709
every app that we create also gets an

00:13:23,310 --> 00:13:28,770
end to end app being generated for us

00:13:25,709 --> 00:13:31,050
whether we like it or not and then we

00:13:28,770 --> 00:13:33,480
have a lips folder which has three lips

00:13:31,050 --> 00:13:36,360
right now just a lip just lip too and

00:13:33,480 --> 00:13:38,370
just to let three it will become bigger

00:13:36,360 --> 00:13:40,860
and bigger and bigger so if you don't do

00:13:38,370 --> 00:13:44,640
anything specific you will maintain a

00:13:40,860 --> 00:13:47,070
flat list of a lot of lips three other

00:13:44,640 --> 00:13:50,160
files worth mentioning is the angular

00:13:47,070 --> 00:13:52,080
Jason file which is basically the heart

00:13:50,160 --> 00:13:54,300
of any angular application which

00:13:52,080 --> 00:13:58,079
contains the entire configuration of

00:13:54,300 --> 00:14:01,020
angular the only thing specific and

00:13:58,079 --> 00:14:03,750
annex there is is that it will resolve

00:14:01,020 --> 00:14:06,899
to the schematics from normal instead of

00:14:03,750 --> 00:14:10,020
the regular schematics from angular so

00:14:06,899 --> 00:14:12,029
this is really important and X is just a

00:14:10,020 --> 00:14:14,970
really really thin layer on top of the

00:14:12,029 --> 00:14:17,220
CLI it's just a custom schematic the an

00:14:14,970 --> 00:14:20,790
existing file is being used to add tax

00:14:17,220 --> 00:14:23,160
to specific projects in the next chapter

00:14:20,790 --> 00:14:24,839
we're gonna see how we can leverage tax

00:14:23,160 --> 00:14:27,660
and making sure that we cannot import

00:14:24,839 --> 00:14:31,230
from whatever we want to and then the

00:14:27,660 --> 00:14:33,930
last is conflict by Jason because of the

00:14:31,230 --> 00:14:36,870
typescript path mappings which are also

00:14:33,930 --> 00:14:40,890
automatically being generated for us by

00:14:36,870 --> 00:14:42,810
an X but the problem is the flat list of

00:14:40,890 --> 00:14:44,880
lips it will become huge and you do not

00:14:42,810 --> 00:14:47,970
want to be searching through an entire

00:14:44,880 --> 00:14:50,339
organizational mono repo and finding all

00:14:47,970 --> 00:14:55,459
the different projects there so how do

00:14:50,339 --> 00:14:58,890
we structure that then abramoff a

00:14:55,459 --> 00:15:01,829
software engineer at Facebook tweeted a

00:14:58,890 --> 00:15:04,960
while ago move files around until it

00:15:01,829 --> 00:15:07,030
feels right and when you have a flat

00:15:04,960 --> 00:15:09,820
that's kind of what you need to do this

00:15:07,030 --> 00:15:11,680
is also what I did I was moving files

00:15:09,820 --> 00:15:14,350
around like weeks at a time was really

00:15:11,680 --> 00:15:17,530
fun and then we came up with this

00:15:14,350 --> 00:15:19,390
specific solution we're not saying that

00:15:17,530 --> 00:15:20,740
is the best solution it's something that

00:15:19,390 --> 00:15:23,020
works for us there are different

00:15:20,740 --> 00:15:25,120
solutions like Narwhal has recently

00:15:23,020 --> 00:15:26,590
published a book on how they structure

00:15:25,120 --> 00:15:36,250
their applications totally check that

00:15:26,590 --> 00:15:38,740
out so the lips directory this is

00:15:36,250 --> 00:15:40,540
already being generated for us right so

00:15:38,740 --> 00:15:43,810
let's dive in at the first level feature

00:15:40,540 --> 00:15:45,160
the feature contains all the features or

00:15:43,810 --> 00:15:47,470
like so all the domain logic

00:15:45,160 --> 00:15:52,080
everything that is something to do with

00:15:47,470 --> 00:15:55,420
business should be inside of the feature

00:15:52,080 --> 00:15:58,000
then we have UIKit and we have utils

00:15:55,420 --> 00:16:00,910
these are both directly lips so feature

00:15:58,000 --> 00:16:03,160
is a directory with three other

00:16:00,910 --> 00:16:05,230
directories below it and we will see

00:16:03,160 --> 00:16:08,590
later on what lives in there but UI kit

00:16:05,230 --> 00:16:12,460
and utils are actual lips and you like

00:16:08,590 --> 00:16:16,240
it they will contain date pickers custom

00:16:12,460 --> 00:16:18,220
form controls probably maybe some

00:16:16,240 --> 00:16:23,740
directives and the utils will contain

00:16:18,220 --> 00:16:26,860
our X yes operators extensions - to help

00:16:23,740 --> 00:16:30,930
you at translations stuff that that are

00:16:26,860 --> 00:16:33,670
just utils that you use as a tool belt

00:16:30,930 --> 00:16:36,540
so inside of the feature directory you

00:16:33,670 --> 00:16:42,700
have the first level which is API and

00:16:36,540 --> 00:16:45,730
API contains only services that will do

00:16:42,700 --> 00:16:47,680
HTTP calls or maybe firebase

00:16:45,730 --> 00:16:50,830
communication or other real-time stuff

00:16:47,680 --> 00:16:53,170
but only API wise and it will contain

00:16:50,830 --> 00:16:57,190
the details as well it will not contain

00:16:53,170 --> 00:16:58,630
any ng rx logic or whatever only simple

00:16:57,190 --> 00:17:00,480
typescript files that will go to the

00:16:58,630 --> 00:17:02,410
backend and return a specific type

00:17:00,480 --> 00:17:05,800
because this is the thing that is being

00:17:02,410 --> 00:17:09,960
shared most when you're creating mon

00:17:05,800 --> 00:17:13,300
repos because you have a very large

00:17:09,960 --> 00:17:16,600
application and you need to use the user

00:17:13,300 --> 00:17:18,130
service in different places at least for

00:17:16,600 --> 00:17:22,480
me that's something that happens

00:17:18,130 --> 00:17:24,549
and also API does not have anything to

00:17:22,480 --> 00:17:28,470
do with presentation logic the lazy

00:17:24,549 --> 00:17:30,490
loading and the shared do so lazy

00:17:28,470 --> 00:17:34,030
contains all the lazy loaded modules

00:17:30,490 --> 00:17:39,520
which you can also import with the the

00:17:34,030 --> 00:17:41,530
corrects and PM scope and the the

00:17:39,520 --> 00:17:43,570
benefit of lazy loading modules is not

00:17:41,530 --> 00:17:46,140
just that your initial bundle size is

00:17:43,570 --> 00:17:49,240
smaller the biggest benefit for me is

00:17:46,140 --> 00:17:51,640
that your entire lip release do that lip

00:17:49,240 --> 00:17:53,919
as sandboxed you will never import stuff

00:17:51,640 --> 00:17:56,320
from Malaysia do it module right because

00:17:53,919 --> 00:17:58,510
then it's not lazy loaded anymore so

00:17:56,320 --> 00:18:00,580
these are really sandbox and it forces

00:17:58,510 --> 00:18:03,250
the developer to think in an

00:18:00,580 --> 00:18:06,010
encapsulated manner as well and then we

00:18:03,250 --> 00:18:08,919
have the shared contains shared angular

00:18:06,010 --> 00:18:12,039
modules it's a mostly presentation logic

00:18:08,919 --> 00:18:18,280
but authentication for instance could

00:18:12,039 --> 00:18:22,240
also be part of that so these are the

00:18:18,280 --> 00:18:24,730
six lips that are being created for us

00:18:22,240 --> 00:18:26,950
so we have ads from blue feature API

00:18:24,730 --> 00:18:30,330
stock strong blue feature API

00:18:26,950 --> 00:18:33,010
authentication which are the two API

00:18:30,330 --> 00:18:36,309
libraries we have two more lazy loaded

00:18:33,010 --> 00:18:40,750
modules and we have the UI kits and the

00:18:36,309 --> 00:18:42,070
yuto's you can have multiple UI kits as

00:18:40,750 --> 00:18:45,610
well let's say that you have on for

00:18:42,070 --> 00:18:48,039
mobile we have one for for desktop or

00:18:45,610 --> 00:18:50,289
tablet or whatever it's possible this is

00:18:48,039 --> 00:18:54,809
just to give you an idea on how you can

00:18:50,289 --> 00:18:59,320
structure it so how do we scaffold that

00:18:54,809 --> 00:19:01,990
we already saw the first command so ng

00:18:59,320 --> 00:19:05,230
generate lip and now we would call it

00:19:01,990 --> 00:19:06,580
feature slash API slash stock and

00:19:05,230 --> 00:19:07,900
because of the slashes it will

00:19:06,580 --> 00:19:10,030
automatically put it in the right

00:19:07,900 --> 00:19:14,559
directories and it will automatically

00:19:10,030 --> 00:19:20,230
wire the whole thing for us then for the

00:19:14,559 --> 00:19:23,140
lazy loaded part we append - - lazy - -

00:19:20,230 --> 00:19:26,110
routing so we know that an axe should

00:19:23,140 --> 00:19:29,140
make should make it lazy loadable

00:19:26,110 --> 00:19:31,340
out-of-the-box and the - - prefix is

00:19:29,140 --> 00:19:34,370
also something that is pretty and

00:19:31,340 --> 00:19:36,350
this will add a prefix to the TS length

00:19:34,370 --> 00:19:40,000
config file when you generate a

00:19:36,350 --> 00:19:43,700
component so in the first one would be

00:19:40,000 --> 00:19:46,400
STC k - and then the rest of your

00:19:43,700 --> 00:19:48,230
selector why is that because a selector

00:19:46,400 --> 00:19:50,390
has to be unique in an angular

00:19:48,230 --> 00:19:53,150
application you cannot have two of the

00:19:50,390 --> 00:19:55,190
same selectors it will break so it's a

00:19:53,150 --> 00:20:00,230
good practice to append a specific

00:19:55,190 --> 00:20:03,799
prefix maybe something better than STC k

00:20:00,230 --> 00:20:06,169
but you know what I mean so these are

00:20:03,799 --> 00:20:08,780
completely generated for us and when we

00:20:06,169 --> 00:20:11,510
want to do lazy loading it's as simple

00:20:08,780 --> 00:20:14,540
as this it's basically the same as

00:20:11,510 --> 00:20:16,610
before but before we were using relative

00:20:14,540 --> 00:20:19,370
spots and now we can use at strong blue

00:20:16,610 --> 00:20:23,120
feature lazy authentication and then the

00:20:19,370 --> 00:20:27,080
name of the module again when we publish

00:20:23,120 --> 00:20:34,040
this leaves a load module to MPN this

00:20:27,080 --> 00:20:36,980
should keep on working so right now we

00:20:34,040 --> 00:20:39,919
have an opinionated structure but we can

00:20:36,980 --> 00:20:49,640
still import from wherever the hell we

00:20:39,919 --> 00:20:53,630
like that's why an X gives us this TS

00:20:49,640 --> 00:20:56,660
length rule called an X and force module

00:20:53,630 --> 00:20:59,270
boundaries and basically the whole

00:20:56,660 --> 00:21:02,929
concept is that we can add tags to all

00:20:59,270 --> 00:21:05,690
our different projects if it's an app or

00:21:02,929 --> 00:21:08,929
it's a lip and we can add text to it and

00:21:05,690 --> 00:21:13,340
then with this specific rule we can say

00:21:08,929 --> 00:21:16,190
source tag foo can only depends on lips

00:21:13,340 --> 00:21:18,110
with tax and now we can pass an array of

00:21:16,190 --> 00:21:21,200
course foo bar

00:21:18,110 --> 00:21:25,309
it's not the best solution you could

00:21:21,200 --> 00:21:29,500
apply to teams team a can only depend on

00:21:25,309 --> 00:21:33,290
the lips of team B and C for instance

00:21:29,500 --> 00:21:37,170
but we added our own tags for that so an

00:21:33,290 --> 00:21:40,800
app is the tag app

00:21:37,170 --> 00:21:44,490
the tech and the feature API is called

00:21:40,800 --> 00:21:48,330
feature API and we have feature lazy

00:21:44,490 --> 00:21:53,720
features shared and shared so these are

00:21:48,330 --> 00:21:57,150
the five tags that we use quite often

00:21:53,720 --> 00:21:59,970
let me go over it real quickly an app

00:21:57,150 --> 00:22:02,700
should only depend on shared feature

00:21:59,970 --> 00:22:04,680
shared or feature API should never

00:22:02,700 --> 00:22:06,540
depend on another app for instance and

00:22:04,680 --> 00:22:09,180
it should never depend on a lazy loaded

00:22:06,540 --> 00:22:12,420
module of course it will depend on lazy

00:22:09,180 --> 00:22:15,210
mod sorry please II loaded module but

00:22:12,420 --> 00:22:17,010
through a string put the load children

00:22:15,210 --> 00:22:19,260
properly that I've just shown before it

00:22:17,010 --> 00:22:21,090
should never import from it because then

00:22:19,260 --> 00:22:23,450
you're taking parts of Lee's loaded clip

00:22:21,090 --> 00:22:26,460
and you least loading it afterwards so

00:22:23,450 --> 00:22:28,890
that's not what we want shared can only

00:22:26,460 --> 00:22:31,620
depend on shared make sense it cannot

00:22:28,890 --> 00:22:38,130
depend on an app it cannot depend on

00:22:31,620 --> 00:22:40,350
feature API and it cannot depend of each

00:22:38,130 --> 00:22:45,120
Lizzie or feature shared because shared

00:22:40,350 --> 00:22:46,830
is the util kit or DUI kit we should not

00:22:45,120 --> 00:22:48,500
start doing Ajax calls it doesn't make

00:22:46,830 --> 00:22:50,820
sense

00:22:48,500 --> 00:22:53,640
future lays can only depend on shared

00:22:50,820 --> 00:22:56,160
feature shared and feature API feature

00:22:53,640 --> 00:22:59,880
shared can only depend on feature shared

00:22:56,160 --> 00:23:01,620
shared feature API then the last one the

00:22:59,880 --> 00:23:05,850
feature API can only depend on feature

00:23:01,620 --> 00:23:08,190
API but can also depends on the util for

00:23:05,850 --> 00:23:11,280
instance let's say that for every HTTP

00:23:08,190 --> 00:23:13,140
call you have a custom or exasperate

00:23:11,280 --> 00:23:14,940
that you want to use to do some error

00:23:13,140 --> 00:23:21,210
handling for instance then it could

00:23:14,940 --> 00:23:23,700
consume a share clip so I just added

00:23:21,210 --> 00:23:25,470
this configuration so you can copy-paste

00:23:23,700 --> 00:23:27,090
it for people that who wants to use it

00:23:25,470 --> 00:23:31,950
I'm not gonna go over it again because

00:23:27,090 --> 00:23:35,760
it will be kind of boring so is this set

00:23:31,950 --> 00:23:37,050
of rules fixed no I was dragging and

00:23:35,760 --> 00:23:40,170
dropping and it was fun and I started

00:23:37,050 --> 00:23:43,380
adding tags but for me it kind of works

00:23:40,170 --> 00:23:45,900
I've created quite a few annex

00:23:43,380 --> 00:23:49,560
workspaces that use this specific

00:23:45,900 --> 00:23:50,550
approach and for me it works and if it

00:23:49,560 --> 00:23:52,710
works

00:23:50,550 --> 00:23:54,420
for you or your team maybe it's a good

00:23:52,710 --> 00:23:57,060
fit if something else works for your

00:23:54,420 --> 00:23:59,100
team awesome but the thing is think

00:23:57,060 --> 00:24:02,520
about it start adding text to those

00:23:59,100 --> 00:24:05,130
specific lips because you do not want to

00:24:02,520 --> 00:24:06,540
want to be importing everything from

00:24:05,130 --> 00:24:14,090
wherever you want because then you get

00:24:06,540 --> 00:24:17,940
anarchy and almost finished

00:24:14,090 --> 00:24:21,180
managing toolkits so we remember

00:24:17,940 --> 00:24:23,430
toolkits we publish everything to NPM

00:24:21,180 --> 00:24:26,640
right it does not contain any business

00:24:23,430 --> 00:24:29,400
logic and so on and then here we have

00:24:26,640 --> 00:24:31,980
three packages with shared code we have

00:24:29,400 --> 00:24:34,530
strong blue slash forms from strong blue

00:24:31,980 --> 00:24:39,330
slash authentication and strong blue /rx

00:24:34,530 --> 00:24:44,100
yes operators so do we need an axe for

00:24:39,330 --> 00:24:44,610
that you don't you don't need an axe at

00:24:44,100 --> 00:24:47,250
all

00:24:44,610 --> 00:24:49,410
we need angular because an axe provides

00:24:47,250 --> 00:24:52,860
us with lips and apps angular provides

00:24:49,410 --> 00:24:56,190
us with libraries and applications and

00:24:52,860 --> 00:24:58,620
it's already there in the CLI they also

00:24:56,190 --> 00:25:00,740
use typescript path mapping and they

00:24:58,620 --> 00:25:03,300
have ng packager support out of the box

00:25:00,740 --> 00:25:05,760
so everything is there the only thing

00:25:03,300 --> 00:25:08,160
that we need to do to build it it's

00:25:05,760 --> 00:25:10,620
called ng built and it will generate a

00:25:08,160 --> 00:25:18,030
package for us that we can just dump

00:25:10,620 --> 00:25:21,330
right onto NPM so the command and you

00:25:18,030 --> 00:25:24,720
knew is probably know as the command to

00:25:21,330 --> 00:25:26,910
generate a new angular solution let's

00:25:24,720 --> 00:25:30,090
not call it the workspace let's call it

00:25:26,910 --> 00:25:32,040
a solution it's called a strong brew

00:25:30,090 --> 00:25:34,980
again and we append the - - great

00:25:32,040 --> 00:25:37,170
application false because otherwise you

00:25:34,980 --> 00:25:38,940
will wind up with an app module and an

00:25:37,170 --> 00:25:41,790
app component and all that stuff and we

00:25:38,940 --> 00:25:43,980
don't we do not want that here so let's

00:25:41,790 --> 00:25:45,690
navigate into the strong brew directory

00:25:43,980 --> 00:25:48,450
and we're going to generate an

00:25:45,690 --> 00:25:51,780
application called example why will we

00:25:48,450 --> 00:25:53,700
create an application example because if

00:25:51,780 --> 00:25:56,250
you're gonna start developing those

00:25:53,700 --> 00:25:58,770
types of packages you want some kind of

00:25:56,250 --> 00:26:00,930
UI to see what's happening otherwise

00:25:58,770 --> 00:26:02,460
maybe you can do a test driven or

00:26:00,930 --> 00:26:04,310
whatever but for me that doesn't really

00:26:02,460 --> 00:26:07,280
work that pragmatic

00:26:04,310 --> 00:26:10,460
so I'm creating an example application

00:26:07,280 --> 00:26:13,100
with three routes for instance forms

00:26:10,460 --> 00:26:15,290
authentication and rx yes operators and

00:26:13,100 --> 00:26:17,650
you start developing in that and the

00:26:15,290 --> 00:26:22,100
cool thing is when somebody uses your

00:26:17,650 --> 00:26:25,780
toolkit they know exactly how they can

00:26:22,100 --> 00:26:25,780
use it because they have examples there

00:26:27,550 --> 00:26:34,940
if you want to go to production with

00:26:29,870 --> 00:26:37,490
this specific set of libraries that we

00:26:34,940 --> 00:26:39,770
have generated this is the only thing

00:26:37,490 --> 00:26:43,040
that you need to do you just call ng

00:26:39,770 --> 00:26:44,840
belt and it will generate a complete

00:26:43,040 --> 00:26:48,530
package for you that is compliant with

00:26:44,840 --> 00:26:51,320
all the different hoops that you

00:26:48,530 --> 00:26:54,080
normally have to jump through and then

00:26:51,320 --> 00:26:56,810
we can publish it to NPM and that is

00:26:54,080 --> 00:27:00,980
that but what about the developer

00:26:56,810 --> 00:27:05,870
experience because that is a little bit

00:27:00,980 --> 00:27:08,000
annoying right because every time you

00:27:05,870 --> 00:27:11,450
update something you need to publish it

00:27:08,000 --> 00:27:15,110
because the TS config file that angler

00:27:11,450 --> 00:27:19,310
has generated for us they refer to the

00:27:15,110 --> 00:27:21,320
disk files so you have to run MPX ng

00:27:19,310 --> 00:27:24,740
builds strong brew forms for instance

00:27:21,320 --> 00:27:26,480
first this is not what we want right

00:27:24,740 --> 00:27:32,750
because this is really awkward to

00:27:26,480 --> 00:27:35,710
develop so how can we fix this how can

00:27:32,750 --> 00:27:38,450
we make sure that we still have the same

00:27:35,710 --> 00:27:40,340
developer experience as an ax gives us

00:27:38,450 --> 00:27:43,190
like we were just coding and everything

00:27:40,340 --> 00:27:45,050
is automatically refreshed we can just

00:27:43,190 --> 00:27:48,050
create a tea has conflict of death

00:27:45,050 --> 00:27:51,920
thought Jason and it extends from the

00:27:48,050 --> 00:27:55,280
tears conflict that Jason but the pots

00:27:51,920 --> 00:27:57,920
are being overwritten they refer to the

00:27:55,280 --> 00:28:01,270
barrel file and when you're using

00:27:57,920 --> 00:28:06,230
angular instead of an X barrel files

00:28:01,270 --> 00:28:07,970
there are public API dot yes also barrel

00:28:06,230 --> 00:28:12,800
files button act and actually have to

00:28:07,970 --> 00:28:15,110
search for end X dot es okay so we have

00:28:12,800 --> 00:28:17,370
created us conflicted after Jason and if

00:28:15,110 --> 00:28:18,930
our application would use that that we

00:28:17,370 --> 00:28:21,270
be awesome but right now we have just

00:28:18,930 --> 00:28:23,970
created a foul so what we need to do is

00:28:21,270 --> 00:28:27,840
update it es conflict Abdo Jason from

00:28:23,970 --> 00:28:31,490
our showcase application from example

00:28:27,840 --> 00:28:36,150
application and just extend from that

00:28:31,490 --> 00:28:38,910
when we run ng surf app and you serve

00:28:36,150 --> 00:28:40,830
example for instance we can just start

00:28:38,910 --> 00:28:43,050
developing use the type shape up mapping

00:28:40,830 --> 00:28:45,720
everything works it's really pragmatic

00:28:43,050 --> 00:28:51,960
and when you build then it will generate

00:28:45,720 --> 00:29:00,510
everything for us so the really last

00:28:51,960 --> 00:29:04,920
part so how do we make our toolkit

00:29:00,510 --> 00:29:07,380
complete commit arson when you're

00:29:04,920 --> 00:29:11,190
creating a toolkit this probably means

00:29:07,380 --> 00:29:12,929
that an organization is using your your

00:29:11,190 --> 00:29:15,200
toolkit or maybe if you open source at

00:29:12,929 --> 00:29:18,120
multiple organizations will be using it

00:29:15,200 --> 00:29:22,380
so you want some kind of clear commit

00:29:18,120 --> 00:29:26,550
stream so we have the CLI the commit is

00:29:22,380 --> 00:29:28,800
in CLI which will just you type just get

00:29:26,550 --> 00:29:31,679
commit and then commit this and it'll

00:29:28,800 --> 00:29:34,350
take over and it will take you through a

00:29:31,679 --> 00:29:37,530
let me just do this once it will take

00:29:34,350 --> 00:29:40,080
you to this specific wizard and it will

00:29:37,530 --> 00:29:43,080
ask you are you committing a feature or

00:29:40,080 --> 00:29:45,570
fix or box or whatever and you will have

00:29:43,080 --> 00:29:47,700
multiple steps and many have done all

00:29:45,570 --> 00:29:53,550
these steps you will know which kind of

00:29:47,700 --> 00:29:57,000
libraries you have affected and I just

00:29:53,550 --> 00:29:58,590
lost what I was gonna say and also if

00:29:57,000 --> 00:30:00,420
there are breaking changes and this is

00:29:58,590 --> 00:30:03,300
really important but because of that we

00:30:00,420 --> 00:30:06,260
can calculate new versions trying to go

00:30:03,300 --> 00:30:09,330
back it uses conventional change lock

00:30:06,260 --> 00:30:11,040
this is an example of a commit message

00:30:09,330 --> 00:30:15,360
that is being generated if you go

00:30:11,040 --> 00:30:17,670
through that specific wizard so it's a

00:30:15,360 --> 00:30:19,950
feature the scope is autocomplete and I

00:30:17,670 --> 00:30:22,500
just added a custom operator with other

00:30:19,950 --> 00:30:26,670
complete logic and it effects at from

00:30:22,500 --> 00:30:30,060
blue slash or excess operators this is

00:30:26,670 --> 00:30:30,930
really awesome because right now we can

00:30:30,060 --> 00:30:33,000
use learner

00:30:30,930 --> 00:30:34,680
and because of the fact that we have

00:30:33,000 --> 00:30:38,490
conventional commits you can have

00:30:34,680 --> 00:30:40,440
automatic version calculations semantic

00:30:38,490 --> 00:30:44,070
versioning we can have change look and

00:30:40,440 --> 00:30:45,570
degeneration the versions and every

00:30:44,070 --> 00:30:47,970
package decent file are automatically

00:30:45,570 --> 00:30:51,630
updated for us and that will create tags

00:30:47,970 --> 00:30:55,610
just by running this command because we

00:30:51,630 --> 00:30:55,610
have committed in a very specific way

00:30:56,000 --> 00:31:01,110
then to take it a little bit further we

00:30:58,260 --> 00:31:03,210
can use hash key and hash key is just a

00:31:01,110 --> 00:31:06,270
tool to do pre-commit hooks and pre push

00:31:03,210 --> 00:31:07,980
hooks so you can run your linting you

00:31:06,270 --> 00:31:13,940
can run your test before you commit and

00:31:07,980 --> 00:31:16,590
you can also run commit lint commit lint

00:31:13,940 --> 00:31:19,200
will check the commit messages if they

00:31:16,590 --> 00:31:21,000
are compliant to what I've just

00:31:19,200 --> 00:31:22,790
described to the confession change lock

00:31:21,000 --> 00:31:25,680
and if somebody in your team just

00:31:22,790 --> 00:31:30,510
decides to put some rubbish in there

00:31:25,680 --> 00:31:34,950
then you won't be able to commit the

00:31:30,510 --> 00:31:37,220
last thing is type dog you just wanted

00:31:34,950 --> 00:31:40,350
to put it in there for the sake of

00:31:37,220 --> 00:31:41,850
completeness it generates documentation

00:31:40,350 --> 00:31:45,270
for you and it's pretty cool because you

00:31:41,850 --> 00:31:47,610
can type markdown in your comments as

00:31:45,270 --> 00:31:49,490
well so if you have a service or maybe a

00:31:47,610 --> 00:31:53,250
customer X Y as operator and you want to

00:31:49,490 --> 00:31:54,990
add a code snippets in your comments it

00:31:53,250 --> 00:32:00,620
will get generated quite nicely with

00:31:54,990 --> 00:32:00,620
tied dog as well that was it

00:32:01,040 --> 00:32:03,660

YouTube URL: https://www.youtube.com/watch?v=hozkdCsP2fs


