Title: Angular Vienna, Building a UI Component Library in Angular, February 2018
Publication date: 2018-02-09
Playlist: Angular Vienna
Description: 
	Talk by by Michael Bromley: Michael shares his experiences building their internal UI component library (https://gentics.github.io/gentics-ui-core). He talks about their motivation, the challenges they faced and the lessons they learned. Michael covers a variety of Angular and front-end-related topics.

More about Angular Vienna: https://www.meetup.com/Angular-Vienna/
Captions: 
	00:00:00,030 --> 00:00:07,770
my name is Michael I work for app IT the

00:00:05,009 --> 00:00:10,110
gent --ax Department who and we deal

00:00:07,770 --> 00:00:11,969
with content management systems as I

00:00:10,110 --> 00:00:15,030
mentioned before I'm leading the UI team

00:00:11,969 --> 00:00:16,800
where we use an angular to build user

00:00:15,030 --> 00:00:22,500
interfaces for these content management

00:00:16,800 --> 00:00:24,510
systems so we built our own UI component

00:00:22,500 --> 00:00:27,599
library which is called the gentle - I

00:00:24,510 --> 00:00:29,670
core and we use that in our own products

00:00:27,599 --> 00:00:32,610
and it's now used in I think four or

00:00:29,670 --> 00:00:35,550
five of our products it's also open

00:00:32,610 --> 00:00:36,930
source it's available on github and in

00:00:35,550 --> 00:00:39,770
this talk I just want to share a few

00:00:36,930 --> 00:00:43,440
lessons and some hopefully some insights

00:00:39,770 --> 00:00:48,649
from what we've learned over the year

00:00:43,440 --> 00:00:50,910
two years we've been building this so

00:00:48,649 --> 00:00:53,730
well let's start with the basics so what

00:00:50,910 --> 00:00:54,899
is a UI component library you probably

00:00:53,730 --> 00:00:57,000
all know this but I'll go over it

00:00:54,899 --> 00:00:59,640
quickly it's just a set of ready-made UI

00:00:57,000 --> 00:01:02,160
components which allow you to more

00:00:59,640 --> 00:01:06,450
easily more quickly build a website or

00:01:02,160 --> 00:01:08,460
an application so it looks something

00:01:06,450 --> 00:01:10,020
like this so it just you know it's a set

00:01:08,460 --> 00:01:12,720
of the most commonly used things form

00:01:10,020 --> 00:01:16,229
controls navigation buttons alerts and

00:01:12,720 --> 00:01:19,350
so on so you've probably heard of one of

00:01:16,229 --> 00:01:22,409
these type of frameworks is anyone used

00:01:19,350 --> 00:01:27,210
one of these before yeah yeah exactly

00:01:22,409 --> 00:01:29,610
everyone's used tinnitus before so yeah

00:01:27,210 --> 00:01:33,540
so we know the concept of component

00:01:29,610 --> 00:01:35,820
framework our component library so why

00:01:33,540 --> 00:01:37,170
are these important or why are they

00:01:35,820 --> 00:01:38,579
useful why there's so many of them

00:01:37,170 --> 00:01:42,450
widely been around so long why does

00:01:38,579 --> 00:01:43,860
everyone know bootstrap so the main

00:01:42,450 --> 00:01:45,570
thing you'll be aware of when you've

00:01:43,860 --> 00:01:47,689
used it is it speeds up development so

00:01:45,570 --> 00:01:50,280
not only do you not have to actually

00:01:47,689 --> 00:01:53,009
implement all these different components

00:01:50,280 --> 00:01:54,689
yourself like a lot of them are simple

00:01:53,009 --> 00:01:57,299
like inputs and buttons are not too

00:01:54,689 --> 00:01:59,939
difficult some of more complex date

00:01:57,299 --> 00:02:02,430
pickers and so on so it saves you having

00:01:59,939 --> 00:02:05,280
the time it saves you the time of having

00:02:02,430 --> 00:02:06,780
to implement stuff like that also and

00:02:05,280 --> 00:02:08,429
maybe even more importantly it saves you

00:02:06,780 --> 00:02:11,910
the time having to think about how

00:02:08,429 --> 00:02:13,500
you're going to implement it like what's

00:02:11,910 --> 00:02:15,690
the best way to

00:02:13,500 --> 00:02:17,430
implement a date picker you don't want

00:02:15,690 --> 00:02:20,190
to have to think about that every time

00:02:17,430 --> 00:02:22,560
you start an app so these kind of

00:02:20,190 --> 00:02:23,820
frameworks are libraries solve that

00:02:22,560 --> 00:02:24,510
problem you don't have to think about

00:02:23,820 --> 00:02:27,990
this stuff

00:02:24,510 --> 00:02:30,240
you can just start dealing with the the

00:02:27,990 --> 00:02:35,210
important logic that's really part of

00:02:30,240 --> 00:02:37,740
your app and they solve problems once so

00:02:35,210 --> 00:02:39,690
you know you don't know how if you have

00:02:37,740 --> 00:02:43,770
a shared library amongst all your

00:02:39,690 --> 00:02:45,270
applications you don't have to then deal

00:02:43,770 --> 00:02:47,010
with the same problems every time it

00:02:45,270 --> 00:02:48,510
becomes tedious it's just a waste of

00:02:47,010 --> 00:02:50,520
time if you've if you've solved it well

00:02:48,510 --> 00:02:52,500
once you should then be able to share

00:02:50,520 --> 00:02:55,310
that and knowing that no one has to

00:02:52,500 --> 00:02:59,070
solve that problem ever again ideally

00:02:55,310 --> 00:03:00,930
and part of that is that they offer

00:02:59,070 --> 00:03:02,850
tried and tested solutions this is

00:03:00,930 --> 00:03:05,580
really important because it's it's

00:03:02,850 --> 00:03:09,660
pretty easy to write components but it's

00:03:05,580 --> 00:03:11,490
hard to write robust you know well

00:03:09,660 --> 00:03:13,020
tested components that cover all the

00:03:11,490 --> 00:03:16,530
different edge cases that come up in

00:03:13,020 --> 00:03:20,959
real use so a library that's used by a

00:03:16,530 --> 00:03:23,209
lot of apps come some way towards

00:03:20,959 --> 00:03:29,040
reaching that goal of being actually

00:03:23,209 --> 00:03:33,000
reliable so it takes some use to get to

00:03:29,040 --> 00:03:35,160
that stage and lastly they enforce a

00:03:33,000 --> 00:03:37,320
consistent style a consistent look a

00:03:35,160 --> 00:03:39,500
consistent user experience across all

00:03:37,320 --> 00:03:41,940
the applications in which you use it so

00:03:39,500 --> 00:03:43,650
this is often a problem especially in

00:03:41,940 --> 00:03:45,330
larger companies where you have lots of

00:03:43,650 --> 00:03:47,880
different teams working on their own

00:03:45,330 --> 00:03:49,440
applications and what can happen is that

00:03:47,880 --> 00:03:51,360
they can work in kind of their own

00:03:49,440 --> 00:03:54,180
little bubble or their own little silo

00:03:51,360 --> 00:03:55,890
and they build their apps and they have

00:03:54,180 --> 00:03:57,300
a certain look and feel and each

00:03:55,890 --> 00:03:59,130
individual that might be great and it

00:03:57,300 --> 00:04:01,230
might look okay but taken as a whole

00:03:59,130 --> 00:04:03,390
that can be very inconsistent because

00:04:01,230 --> 00:04:05,330
they're not sharing common patterns and

00:04:03,390 --> 00:04:08,130
common solutions amongst themselves so

00:04:05,330 --> 00:04:09,870
for the end user if it's for example a

00:04:08,130 --> 00:04:11,940
suite of applications it can be very

00:04:09,870 --> 00:04:14,910
confusing for an end user if one

00:04:11,940 --> 00:04:16,950
application handles notifications in

00:04:14,910 --> 00:04:17,970
this way and another application in this

00:04:16,950 --> 00:04:19,560
suite handles them in a totally

00:04:17,970 --> 00:04:22,200
different way the user will be lost and

00:04:19,560 --> 00:04:24,120
the user you know as far as the user is

00:04:22,200 --> 00:04:26,280
concerned this is one company why do the

00:04:24,120 --> 00:04:27,150
user interfaces work differently it

00:04:26,280 --> 00:04:30,780
doesn't make sense

00:04:27,150 --> 00:04:33,250
so this solves that problem and this is

00:04:30,780 --> 00:04:35,500
it kind of gets into the the area of

00:04:33,250 --> 00:04:37,330
user experience design and style guides

00:04:35,500 --> 00:04:42,010
and this kind of thing so it serves a

00:04:37,330 --> 00:04:43,360
kind of a dual purpose there as well so

00:04:42,010 --> 00:04:46,000
a bit of background some of you might be

00:04:43,360 --> 00:04:48,220
wondering why any sane person would go

00:04:46,000 --> 00:04:49,870
to the trouble of building their own

00:04:48,220 --> 00:04:51,880
component library when there's already

00:04:49,870 --> 00:04:54,610
stuff out there bootstraps already there

00:04:51,880 --> 00:04:57,400
why do you need to reinvent bootstrap so

00:04:54,610 --> 00:05:00,760
I'm gonna explain using timeline this is

00:04:57,400 --> 00:05:02,350
the past Oh laser this is the past and

00:05:00,760 --> 00:05:06,130
this is the present okay so we'll start

00:05:02,350 --> 00:05:08,560
at the beginning so according to many

00:05:06,130 --> 00:05:11,580
theories it started with a very large

00:05:08,560 --> 00:05:13,390
explosion and then there was these guys

00:05:11,580 --> 00:05:17,610
we're going to fast forward a little bit

00:05:13,390 --> 00:05:17,610
now February 2016

00:05:18,900 --> 00:05:27,010
in February 2006 2016 we started working

00:05:24,580 --> 00:05:30,190
on these UI apps I don't know if it's

00:05:27,010 --> 00:05:33,670
easy to see there on the screen but we

00:05:30,190 --> 00:05:37,150
have here what's that first commit yeah

00:05:33,670 --> 00:05:38,980
that's right angular 2 it's called

00:05:37,150 --> 00:05:42,750
angular 2 back then room it wasn't just

00:05:38,980 --> 00:05:47,140
angular its angular 2 angular 2 beta 2

00:05:42,750 --> 00:05:49,660
so yeah it was in beta it was very early

00:05:47,140 --> 00:05:53,170
but we'd made the decision to use

00:05:49,660 --> 00:05:55,030
angular for our UI apps and we actually

00:05:53,170 --> 00:05:59,800
started a ground-up rewrite of the whole

00:05:55,030 --> 00:06:02,050
user interface of main CMS so angular

00:05:59,800 --> 00:06:03,930
anyway continued to evolve you know

00:06:02,050 --> 00:06:05,740
there was a new router at some point

00:06:03,930 --> 00:06:08,920
remember that time when you had to

00:06:05,740 --> 00:06:16,800
refactor for engine modules another

00:06:08,920 --> 00:06:20,020
router I know you all feel the pain and

00:06:16,800 --> 00:06:22,180
about two years went by and then in the

00:06:20,020 --> 00:06:24,490
actually in the last few months maybe

00:06:22,180 --> 00:06:27,250
two or three months we've seen major

00:06:24,490 --> 00:06:30,310
stable releases of things like bootstrap

00:06:27,250 --> 00:06:32,070
for angular and angular material so as

00:06:30,310 --> 00:06:35,170
you can see way back then near the

00:06:32,070 --> 00:06:37,720
Jurassic times there was nothing out

00:06:35,170 --> 00:06:39,930
there so this is why we decided to build

00:06:37,720 --> 00:06:39,930
our own

00:06:41,140 --> 00:06:45,680
so the first thing we realized was that

00:06:44,150 --> 00:06:48,230
it's pretty hard to build UI components

00:06:45,680 --> 00:06:52,730
it's harder than you think let's take

00:06:48,230 --> 00:06:54,380
for example a select farm control so

00:06:52,730 --> 00:06:56,690
what do you need to think about to build

00:06:54,380 --> 00:06:58,700
one of these well of course you've got

00:06:56,690 --> 00:07:00,860
the basic functionality it's a list of

00:06:58,700 --> 00:07:03,530
items you can select one it will change

00:07:00,860 --> 00:07:05,030
the value so this is what you would

00:07:03,530 --> 00:07:06,830
initially think about oh I need to build

00:07:05,030 --> 00:07:09,380
a select well I need a list of items

00:07:06,830 --> 00:07:11,810
select it change the value how hard can

00:07:09,380 --> 00:07:13,370
it be when you actually get into it you

00:07:11,810 --> 00:07:17,030
realize there's a bit more to it you got

00:07:13,370 --> 00:07:18,650
to think about things like you know this

00:07:17,030 --> 00:07:20,270
drop-down might not always be visible

00:07:18,650 --> 00:07:21,470
maybe it's too close to the bottom of

00:07:20,270 --> 00:07:23,930
the screen what do we do with it it

00:07:21,470 --> 00:07:26,750
would make it go up or maybe it's inside

00:07:23,930 --> 00:07:27,890
a div with overflow set to hidden then

00:07:26,750 --> 00:07:29,990
what do you do with it it's going to get

00:07:27,890 --> 00:07:32,000
cut off so you need to deal with stuff

00:07:29,990 --> 00:07:33,170
like that maybe it needs to be

00:07:32,000 --> 00:07:37,010
scrollable if there's lots of options

00:07:33,170 --> 00:07:39,220
you need to have scroll support it's got

00:07:37,010 --> 00:07:42,350
a handle focus it's got to be accessible

00:07:39,220 --> 00:07:43,940
it's got to admit the right event it

00:07:42,350 --> 00:07:46,280
needs to implement it's disabled State

00:07:43,940 --> 00:07:51,160
it needs to be able to have the required

00:07:46,280 --> 00:07:53,750
support it needs to support multi-select

00:07:51,160 --> 00:07:56,210
needs to support option groups if you've

00:07:53,750 --> 00:07:58,130
ever heard of those needs to have

00:07:56,210 --> 00:07:59,840
keyboard control and that's doesn't mean

00:07:58,130 --> 00:08:03,800
just that the up and down Keys work the

00:07:59,840 --> 00:08:05,810
space key the home end Keys escape key

00:08:03,800 --> 00:08:09,260
when you press a letter it's going to

00:08:05,810 --> 00:08:10,400
jump to you know that option that begins

00:08:09,260 --> 00:08:12,770
with that letter and so on and scroll

00:08:10,400 --> 00:08:16,460
through them and it's also got a look

00:08:12,770 --> 00:08:18,380
okay so you can kind of get a flavor

00:08:16,460 --> 00:08:22,130
that there's quite a lot to it that's

00:08:18,380 --> 00:08:23,510
just one component so we need we needed

00:08:22,130 --> 00:08:24,980
at the time to start shipping pretty

00:08:23,510 --> 00:08:29,720
quickly we actually made our first

00:08:24,980 --> 00:08:33,469
commit to the CMS UI about one month

00:08:29,720 --> 00:08:34,669
after we started this library and so so

00:08:33,469 --> 00:08:35,539
we needed some way we couldn't we

00:08:34,669 --> 00:08:38,240
couldn't build everything from scratch

00:08:35,539 --> 00:08:40,640
so we cheated a bit and we took an

00:08:38,240 --> 00:08:43,219
existing framework with all the styles

00:08:40,640 --> 00:08:45,050
and the JavaScript JavaScript and just

00:08:43,219 --> 00:08:47,900
wrapped it the one we chose with

00:08:45,050 --> 00:08:51,050
materialized it's an implementation of

00:08:47,900 --> 00:08:54,170
material design and it uses this like

00:08:51,050 --> 00:08:57,720
SAS CSS and jQuery

00:08:54,170 --> 00:09:00,360
so the way that we started off was like

00:08:57,720 --> 00:09:03,029
this we would just take the materialized

00:09:00,360 --> 00:09:06,690
component and we would just wrap it in

00:09:03,029 --> 00:09:08,430
an angular component like this and like

00:09:06,690 --> 00:09:10,260
hide all the jQuery stuff inside there

00:09:08,430 --> 00:09:14,220
and it normally looked something like

00:09:10,260 --> 00:09:17,100
this in the ng on in it we would just

00:09:14,220 --> 00:09:18,570
use jQuery and just you know initialize

00:09:17,100 --> 00:09:20,970
the plug-in like you normally do with

00:09:18,570 --> 00:09:24,480
jQuery and kind of hide it away I tried

00:09:20,970 --> 00:09:27,360
to hide it away like that and this

00:09:24,480 --> 00:09:30,480
worked kind of worked but it involves

00:09:27,360 --> 00:09:33,690
lots of hacks and it was pretty buggy as

00:09:30,480 --> 00:09:35,940
well so once we had a little bit of time

00:09:33,690 --> 00:09:39,209
we were able to return to these

00:09:35,940 --> 00:09:43,620
components one by one and rewrite them

00:09:39,209 --> 00:09:48,930
just using the native angular api's this

00:09:43,620 --> 00:09:50,730
I wish it was so easy and eventually we

00:09:48,930 --> 00:09:52,800
were able to drop the materialized

00:09:50,730 --> 00:09:58,949
JavaScript and the jQuery dependency

00:09:52,800 --> 00:10:00,930
altogether so here's a real commit so

00:09:58,949 --> 00:10:03,870
for the most complex components like

00:10:00,930 --> 00:10:05,430
select for example it was about nine

00:10:03,870 --> 00:10:08,339
months before we actually reached that

00:10:05,430 --> 00:10:10,670
stage of getting rid of all the old

00:10:08,339 --> 00:10:14,370
cruft and and doing it the proper way

00:10:10,670 --> 00:10:20,820
but at last we were able to break free

00:10:14,370 --> 00:10:24,839
of jQuery so a few notes on that whole

00:10:20,820 --> 00:10:26,640
process it's a pragmatic way to start it

00:10:24,839 --> 00:10:30,500
worked it got the job done

00:10:26,640 --> 00:10:32,730
so there is value in this you know in

00:10:30,500 --> 00:10:35,940
real life software development you

00:10:32,730 --> 00:10:38,100
cannot always do the right way you know

00:10:35,940 --> 00:10:40,079
all the time and you have to take into

00:10:38,100 --> 00:10:41,779
consideration deadlines and so on so in

00:10:40,079 --> 00:10:45,540
this case it worked out quite well

00:10:41,779 --> 00:10:48,449
however it did make everything less

00:10:45,540 --> 00:10:50,910
testable and more error-prone and the

00:10:48,449 --> 00:10:55,279
basic problem we ran into was this that

00:10:50,910 --> 00:10:58,470
these like all there are jquery based

00:10:55,279 --> 00:11:01,019
frameworks are not designed with the

00:10:58,470 --> 00:11:03,449
single single page application use case

00:11:01,019 --> 00:11:05,040
in mind so for example with one of our

00:11:03,449 --> 00:11:06,660
apps one of our customers would have

00:11:05,040 --> 00:11:09,720
they'll have the the

00:11:06,660 --> 00:11:13,019
you eye open all day and the page never

00:11:09,720 --> 00:11:15,920
refreshes all day so plugins that were

00:11:13,019 --> 00:11:18,240
that we use in with materialized would

00:11:15,920 --> 00:11:19,800
register register event handlers and

00:11:18,240 --> 00:11:22,470
maybe they wouldn't clean them up and

00:11:19,800 --> 00:11:24,660
they would be taking control of the

00:11:22,470 --> 00:11:27,269
Darmon moving things around and angular

00:11:24,660 --> 00:11:28,379
wouldn't know about it and then there

00:11:27,269 --> 00:11:29,759
would be changed detection errors

00:11:28,379 --> 00:11:31,889
because it changed them done without

00:11:29,759 --> 00:11:33,540
angular knowing about it so it led to

00:11:31,889 --> 00:11:36,389
all that this series of hacks where we

00:11:33,540 --> 00:11:38,459
had to kind of go in do some manual

00:11:36,389 --> 00:11:41,430
change detection triggers and so on like

00:11:38,459 --> 00:11:43,829
this so it gets difficult and my advice

00:11:41,430 --> 00:11:47,819
then is to pay your technical debt as

00:11:43,829 --> 00:11:50,160
early as you can because it's worth it

00:11:47,819 --> 00:11:51,449
it's worth just spending the time say

00:11:50,160 --> 00:11:52,889
right that's it we're gonna clear all

00:11:51,449 --> 00:11:55,670
this stuff out and it makes the rest of

00:11:52,889 --> 00:11:58,740
the rest of the development much easier

00:11:55,670 --> 00:12:00,629
in fact I would go as far as to say just

00:11:58,740 --> 00:12:05,670
avoid jQuery altogether in an angular

00:12:00,629 --> 00:12:07,769
app do I have agreement with that I mean

00:12:05,670 --> 00:12:09,329
I think maybe there is a use case where

00:12:07,769 --> 00:12:11,310
you really need it and if you really do

00:12:09,329 --> 00:12:14,550
need it I would say don't do things like

00:12:11,310 --> 00:12:16,740
using remove and append to change the

00:12:14,550 --> 00:12:18,870
Dom around because angular will hate you

00:12:16,740 --> 00:12:20,459
if you do that angular has a bunch of

00:12:18,870 --> 00:12:22,740
API is for doing stuff like that it's

00:12:20,459 --> 00:12:25,170
view container F component factory

00:12:22,740 --> 00:12:27,089
resolver and so on so if you do have

00:12:25,170 --> 00:12:28,319
jQuery in there just try and leave the

00:12:27,089 --> 00:12:30,920
dumb alone as much as you can and let

00:12:28,319 --> 00:12:34,800
angular do its thing

00:12:30,920 --> 00:12:40,470
okay another early problem we had to

00:12:34,800 --> 00:12:43,380
solve was how to develop our components

00:12:40,470 --> 00:12:45,930
in isolation and what I mean by that is

00:12:43,380 --> 00:12:48,449
that if you're developing a select

00:12:45,930 --> 00:12:50,759
component you don't want to have to use

00:12:48,449 --> 00:12:52,170
the Select in a real app and then import

00:12:50,759 --> 00:12:53,189
it and load the real app just to see

00:12:52,170 --> 00:12:54,889
what it looks like you want to be able

00:12:53,189 --> 00:12:58,050
to just test it on its own

00:12:54,889 --> 00:13:00,389
so and this ties into the fact that like

00:12:58,050 --> 00:13:03,449
because as developers we benefit from

00:13:00,389 --> 00:13:05,879
having very tight feedback loops being

00:13:03,449 --> 00:13:08,639
able to get feedback with as little

00:13:05,879 --> 00:13:10,680
overhead as possible so the solution we

00:13:08,639 --> 00:13:14,339
came up with was we built a very simple

00:13:10,680 --> 00:13:17,240
demo app which had one page for each

00:13:14,339 --> 00:13:17,240
component and

00:13:17,470 --> 00:13:21,430
we were just you know we would just open

00:13:19,990 --> 00:13:23,170
up one page and we would just be able to

00:13:21,430 --> 00:13:25,390
then develop that one thing refresh that

00:13:23,170 --> 00:13:27,010
one page and see the results and it also

00:13:25,390 --> 00:13:31,840
serves as documentation which I'll show

00:13:27,010 --> 00:13:35,080
a little bit later so another option

00:13:31,840 --> 00:13:36,760
this probably wasn't available at the

00:13:35,080 --> 00:13:38,940
time but is now is something like

00:13:36,760 --> 00:13:40,950
storybook does anyone use that before

00:13:38,940 --> 00:13:45,580
I'll see it as anyone seen it before

00:13:40,950 --> 00:13:47,260
it's really yeah some some people it's

00:13:45,580 --> 00:13:49,270
really it's kind of bigger in the react

00:13:47,260 --> 00:13:51,760
world but it's now you can use it with

00:13:49,270 --> 00:13:53,950
angular and it's like a it's an

00:13:51,760 --> 00:13:57,250
automatically generated living style

00:13:53,950 --> 00:13:59,890
guide which allows you to just exercise

00:13:57,250 --> 00:14:01,840
one particular component in isolation

00:13:59,890 --> 00:14:03,940
and change the inputs and test the

00:14:01,840 --> 00:14:06,330
events and so on so it saves you having

00:14:03,940 --> 00:14:09,280
to build a whole application to test it

00:14:06,330 --> 00:14:13,270
so check it out if you ever if you ever

00:14:09,280 --> 00:14:13,720
need to build a library yourself all

00:14:13,270 --> 00:14:16,960
right

00:14:13,720 --> 00:14:18,670
documentation documentation is really

00:14:16,960 --> 00:14:20,800
really important for a library when you

00:14:18,670 --> 00:14:23,800
have people who aren't you using it

00:14:20,800 --> 00:14:26,740
especially now we have a couple of other

00:14:23,800 --> 00:14:29,980
teams within our company who use the

00:14:26,740 --> 00:14:32,620
gentle Qi call and they really need the

00:14:29,980 --> 00:14:34,780
documentation and myself and Leon who

00:14:32,620 --> 00:14:36,430
wrote the library we also need it I mean

00:14:34,780 --> 00:14:37,960
I think I use the documentation every

00:14:36,430 --> 00:14:40,510
single time I have to do something with

00:14:37,960 --> 00:14:42,220
it so it's really hard to keep Doc's up

00:14:40,510 --> 00:14:44,650
to date that's always the problem with

00:14:42,220 --> 00:14:49,360
documentation every time you add a new

00:14:44,650 --> 00:14:51,550
input to a component or have a new a new

00:14:49,360 --> 00:14:53,800
event you need to update the docs

00:14:51,550 --> 00:14:55,210
otherwise they become useless if the

00:14:53,800 --> 00:14:58,600
Doc's are unreliable you'll never trust

00:14:55,210 --> 00:15:00,220
them and they as good as useless so the

00:14:58,600 --> 00:15:01,540
good thing is with typescript it

00:15:00,220 --> 00:15:03,670
actually provides a lot of the

00:15:01,540 --> 00:15:05,050
information that we need that the

00:15:03,670 --> 00:15:07,690
important information for documentation

00:15:05,050 --> 00:15:11,410
in the the type annotations that we've

00:15:07,690 --> 00:15:13,600
put into our code so we decided to try

00:15:11,410 --> 00:15:15,250
and use that information in order to

00:15:13,600 --> 00:15:16,960
generate our documentation and I'll show

00:15:15,250 --> 00:15:18,490
you a little bit what it looks like this

00:15:16,960 --> 00:15:23,620
is absolutely useless

00:15:18,490 --> 00:15:28,180
I should have use a light theme anyway

00:15:23,620 --> 00:15:30,520
on here is the component code for the

00:15:28,180 --> 00:15:33,490
select and it has a

00:15:30,520 --> 00:15:36,400
a documentation block at the top with

00:15:33,490 --> 00:15:40,440
some like an explanation and some code

00:15:36,400 --> 00:15:42,460
in a markdown code block and that gets

00:15:40,440 --> 00:15:45,580
translated over here into the actual

00:15:42,460 --> 00:15:46,960
documentation and this part you see here

00:15:45,580 --> 00:15:53,470
is pulled directly out of the source

00:15:46,960 --> 00:15:58,900
file and likewise another black square

00:15:53,470 --> 00:16:03,070
and another black square here these are

00:15:58,900 --> 00:16:04,720
the inputs for the component and again

00:16:03,070 --> 00:16:07,150
we pull the information directly out of

00:16:04,720 --> 00:16:10,150
the source code and make a table like

00:16:07,150 --> 00:16:12,520
this which shows the tights the default

00:16:10,150 --> 00:16:14,230
values in the comments so in this way

00:16:12,520 --> 00:16:16,150
you you you don't have to think about

00:16:14,230 --> 00:16:18,280
the documentation so much you just write

00:16:16,150 --> 00:16:20,500
comments as you would in as a regular

00:16:18,280 --> 00:16:23,430
course of development and the docs will

00:16:20,500 --> 00:16:28,780
be generated and they will be correct

00:16:23,430 --> 00:16:29,890
how do you do this well there's a number

00:16:28,780 --> 00:16:32,010
of different ways that I know of to

00:16:29,890 --> 00:16:34,960
generate documentation from the source

00:16:32,010 --> 00:16:36,400
so for example angular io the

00:16:34,960 --> 00:16:39,580
documentation you see on there is

00:16:36,400 --> 00:16:41,740
generated by a tool called geni which

00:16:39,580 --> 00:16:43,990
members of the angular team built and

00:16:41,740 --> 00:16:45,880
this is a general-purpose documentation

00:16:43,990 --> 00:16:47,290
tool they use it for angular wan docs as

00:16:45,880 --> 00:16:50,620
well and it's not just the typescript

00:16:47,290 --> 00:16:52,750
and i had to look through the the repo

00:16:50,620 --> 00:16:54,970
that they used to generate and it and it

00:16:52,750 --> 00:16:57,910
looks pretty complicated to setup but it

00:16:54,970 --> 00:17:00,160
produces very good results another

00:16:57,910 --> 00:17:02,170
option is to use a tool like type doc

00:17:00,160 --> 00:17:04,959
which uses the typescript language

00:17:02,170 --> 00:17:07,630
service to pass all the code and pull

00:17:04,959 --> 00:17:09,670
out all the stuff and automatically

00:17:07,630 --> 00:17:11,140
generate these docs this is a good way

00:17:09,670 --> 00:17:13,900
to do it because you can trust the

00:17:11,140 --> 00:17:16,060
typescript compiler essentially to give

00:17:13,900 --> 00:17:17,740
you the right information the one

00:17:16,060 --> 00:17:19,720
criticism I have of that kind of

00:17:17,740 --> 00:17:21,490
approach often with is in general

00:17:19,720 --> 00:17:23,350
auto-generated Doc's is they can end up

00:17:21,490 --> 00:17:24,250
like really verbose and sometimes you

00:17:23,350 --> 00:17:24,730
think I might as well just read the

00:17:24,250 --> 00:17:28,000
source

00:17:24,730 --> 00:17:32,320
anyway it's a good option another option

00:17:28,000 --> 00:17:34,900
is to use regular expressions so so this

00:17:32,320 --> 00:17:36,880
is a great approach if you have the idea

00:17:34,900 --> 00:17:39,640
that the the problem is much simpler

00:17:36,880 --> 00:17:40,870
than it actually is this is the idea

00:17:39,640 --> 00:17:41,380
that I had when I was building these

00:17:40,870 --> 00:17:43,740
docs

00:17:41,380 --> 00:17:46,470
so we current

00:17:43,740 --> 00:17:50,010
use this method to extract all this

00:17:46,470 --> 00:17:51,330
metadata and if you also feel like you

00:17:50,010 --> 00:17:53,850
would like to go down this path I've

00:17:51,330 --> 00:17:55,740
saved some trouble and here is the

00:17:53,850 --> 00:18:00,420
regular expression we use to pass a

00:17:55,740 --> 00:18:02,160
component so the slides will be

00:18:00,420 --> 00:18:06,950
available on a meet-up site so you can

00:18:02,160 --> 00:18:06,950
copy and paste that yeah

00:18:07,940 --> 00:18:17,370
very long t-shirt all right so

00:18:15,530 --> 00:18:19,290
publishing so when you when you've built

00:18:17,370 --> 00:18:21,240
your your library you got to think about

00:18:19,290 --> 00:18:23,820
publishing it so it can actually be used

00:18:21,240 --> 00:18:25,500
in a real application so there's a

00:18:23,820 --> 00:18:28,020
there's a few different aspects which

00:18:25,500 --> 00:18:30,059
are interesting to know about and to

00:18:28,020 --> 00:18:33,570
consider when you come to publish any

00:18:30,059 --> 00:18:37,620
any library really so how are you gonna

00:18:33,570 --> 00:18:40,860
handle the styles you could transpile

00:18:37,620 --> 00:18:44,160
the chat we we use sass to to write our

00:18:40,860 --> 00:18:46,650
Styles you could convert it into CSS and

00:18:44,160 --> 00:18:49,620
just export the CSS or you could leave

00:18:46,650 --> 00:18:53,970
it as sass we decided to leave it as

00:18:49,620 --> 00:18:56,850
sass and just you know the the consuming

00:18:53,970 --> 00:18:58,650
library just has to assume it's sass the

00:18:56,850 --> 00:19:00,600
advantage of that is it makes theming

00:18:58,650 --> 00:19:02,580
easier because for those who know sass

00:19:00,600 --> 00:19:04,860
they have the concept of default

00:19:02,580 --> 00:19:06,660
variables and you can override them in

00:19:04,860 --> 00:19:09,600
your app and it makes it quite nice to

00:19:06,660 --> 00:19:10,820
theme things and change kind of certain

00:19:09,600 --> 00:19:14,820
aspects

00:19:10,820 --> 00:19:18,780
another thing is should you use global

00:19:14,820 --> 00:19:21,390
styles or encapsulated Styles we use

00:19:18,780 --> 00:19:26,730
global styles so we use view encapsulate

00:19:21,390 --> 00:19:28,170
view encapsulation strategy nan and as

00:19:26,730 --> 00:19:30,090
far as I can tell that's the only sane

00:19:28,170 --> 00:19:31,410
way to do it for a library like this and

00:19:30,090 --> 00:19:34,110
I checked with the angular material

00:19:31,410 --> 00:19:36,350
library they do the same so it must be

00:19:34,110 --> 00:19:36,350
right

00:19:37,700 --> 00:19:43,140
the next consideration is how do you

00:19:40,710 --> 00:19:46,500
explore the Java Script you know you can

00:19:43,140 --> 00:19:49,050
export as commonjs modules now it's more

00:19:46,500 --> 00:19:51,270
common - oh it's becoming more common to

00:19:49,050 --> 00:19:54,450
exporters es modules using the

00:19:51,270 --> 00:19:56,400
import/export syntax and the way that I

00:19:54,450 --> 00:19:57,510
know the angular team recommend doing it

00:19:56,400 --> 00:20:00,300
is using this thing

00:19:57,510 --> 00:20:03,300
old flat ACMA script modules which is

00:20:00,300 --> 00:20:05,220
kind of using exports and everything as

00:20:03,300 --> 00:20:07,440
a necklace Egmore script module but

00:20:05,220 --> 00:20:09,480
putting it all in one file that has

00:20:07,440 --> 00:20:11,790
benefits for tree-shaking it makes it

00:20:09,480 --> 00:20:13,860
means that can eliminate their code more

00:20:11,790 --> 00:20:17,610
easily I think at the moment we don't

00:20:13,860 --> 00:20:18,960
use that we're using a less

00:20:17,610 --> 00:20:21,590
sophisticated method of export

00:20:18,960 --> 00:20:21,590
JavaScript

00:20:21,830 --> 00:20:25,650
another thing you have to do if you're

00:20:23,880 --> 00:20:27,270
making a component library with angular

00:20:25,650 --> 00:20:30,810
is you have to inline the templates you

00:20:27,270 --> 00:20:33,780
can't use template URLs when an app when

00:20:30,810 --> 00:20:35,580
an app consumes that component it won't

00:20:33,780 --> 00:20:37,590
be able to find a template you attempt a

00:20:35,580 --> 00:20:40,170
template referenced in a template URL so

00:20:37,590 --> 00:20:41,940
you have to inline them all the tool

00:20:40,170 --> 00:20:44,250
there are tools to automatically do this

00:20:41,940 --> 00:20:46,920
we were using a gulp based build system

00:20:44,250 --> 00:20:51,650
so we're using one called gulp inline ng

00:20:46,920 --> 00:20:54,230
to template catchy name angular material

00:20:51,650 --> 00:20:57,810
have a custom script which will just

00:20:54,230 --> 00:21:03,660
kind of replace the template URL with

00:20:57,810 --> 00:21:04,890
the actual text and of course if you

00:21:03,660 --> 00:21:07,380
want to support ahead of time

00:21:04,890 --> 00:21:09,510
compilation things get a whole lot more

00:21:07,380 --> 00:21:13,650
complicated and you do need to support

00:21:09,510 --> 00:21:15,540
this um has anyone got experienced

00:21:13,650 --> 00:21:18,420
building a library that supports ahead

00:21:15,540 --> 00:21:21,450
of time compilation yeah it's difficult

00:21:18,420 --> 00:21:22,910
isn't it it's difficult there's a couple

00:21:21,450 --> 00:21:25,590
of main things you need to think about

00:21:22,910 --> 00:21:27,780
your library needs to produce these

00:21:25,590 --> 00:21:31,380
metadata files which are produced by the

00:21:27,780 --> 00:21:34,260
angular compiler ng C if you don't have

00:21:31,380 --> 00:21:37,800
those no application will be able to use

00:21:34,260 --> 00:21:40,020
your library in an alt context which is

00:21:37,800 --> 00:21:42,300
pretty much useless because every

00:21:40,020 --> 00:21:45,240
production app ships with alt support

00:21:42,300 --> 00:21:47,250
now also you've got to make sure you

00:21:45,240 --> 00:21:48,420
you're not using things like private

00:21:47,250 --> 00:21:50,370
fields in the templates and all these

00:21:48,420 --> 00:21:58,050
little kind of gotchas that you have

00:21:50,370 --> 00:22:00,450
when you try to do a OT ok so a few

00:21:58,050 --> 00:22:03,010
concluding thoughts

00:22:00,450 --> 00:22:06,400
if you're gonna start a project now

00:22:03,010 --> 00:22:07,900
there are lots of solid choices for UI

00:22:06,400 --> 00:22:13,690
frameworks you don't need to write your

00:22:07,900 --> 00:22:16,960
own but maintaining your own UI lib does

00:22:13,690 --> 00:22:19,450
have benefits for example we might be

00:22:16,960 --> 00:22:22,150
working on one of our UI apps and we

00:22:19,450 --> 00:22:24,960
find a bug well then we can just jump

00:22:22,150 --> 00:22:27,910
into the gen 6 UI core repo fix the bug

00:22:24,960 --> 00:22:30,490
publish a new version to NPM and then

00:22:27,910 --> 00:22:32,700
carry on with our day now if you are

00:22:30,490 --> 00:22:34,990
using for example angular material I

00:22:32,700 --> 00:22:39,280
think it would be hard to get all that

00:22:34,990 --> 00:22:40,540
done in the same afternoon so the other

00:22:39,280 --> 00:22:42,160
advantage is you have a very deep

00:22:40,540 --> 00:22:43,930
understanding of the component library

00:22:42,160 --> 00:22:49,030
it's not like a black box as it can be

00:22:43,930 --> 00:22:50,830
when you're using someone else's code if

00:22:49,030 --> 00:22:53,440
you do find you that you need to write

00:22:50,830 --> 00:22:55,810
your own library then there is such

00:22:53,440 --> 00:22:58,660
thing as the angular material component

00:22:55,810 --> 00:23:00,700
dev kit has anyone heard of that ok yeah

00:22:58,660 --> 00:23:02,500
a few of you so the basic idea is that

00:23:00,700 --> 00:23:04,270
the angular material team they're

00:23:02,500 --> 00:23:06,940
produced in a library which is extremely

00:23:04,270 --> 00:23:08,830
high quality and they what they did is

00:23:06,940 --> 00:23:12,430
they took some of the the kind of the

00:23:08,830 --> 00:23:14,230
core parts and they extracted it out

00:23:12,430 --> 00:23:17,050
into a development kit which you can use

00:23:14,230 --> 00:23:20,050
to build any kind of UI library so it

00:23:17,050 --> 00:23:22,660
handles things like making overlays

00:23:20,050 --> 00:23:25,420
projecting content in the DOM scrolling

00:23:22,660 --> 00:23:27,910
accessibility these kind of things that

00:23:25,420 --> 00:23:29,800
you don't initially think of as imported

00:23:27,910 --> 00:23:31,750
but actually become the most important

00:23:29,800 --> 00:23:34,570
thing and the most buggy parts if you

00:23:31,750 --> 00:23:36,670
try and do them yourself so the

00:23:34,570 --> 00:23:38,230
component dev kit handles all those

00:23:36,670 --> 00:23:41,110
things for you apparently I've never

00:23:38,230 --> 00:23:42,820
used it but that's the idea if we were

00:23:41,110 --> 00:23:44,860
to start again now and we had to write

00:23:42,820 --> 00:23:48,070
our own I would probably seriously

00:23:44,860 --> 00:23:50,170
consider using that and the last

00:23:48,070 --> 00:23:53,220
interesting development in this area is

00:23:50,170 --> 00:23:55,780
angular elements have you heard of that

00:23:53,220 --> 00:23:57,580
ok it's a kind of experimental

00:23:55,780 --> 00:24:01,780
technology that they've got going at the

00:23:57,580 --> 00:24:04,810
moment and the basic idea is it it's a

00:24:01,780 --> 00:24:06,340
way to allow you to export an angular

00:24:04,810 --> 00:24:08,470
component as a web component a

00:24:06,340 --> 00:24:10,300
self-contained web component so for

00:24:08,470 --> 00:24:13,390
example you could build a select

00:24:10,300 --> 00:24:15,340
component a fancy select component

00:24:13,390 --> 00:24:19,030
just export it as a web component which

00:24:15,340 --> 00:24:21,100
can then be used in any website in just

00:24:19,030 --> 00:24:23,080
plain plain hosting my website in a

00:24:21,100 --> 00:24:26,470
react app in a view app or whatever is

00:24:23,080 --> 00:24:28,870
completely agnostic so this is under

00:24:26,470 --> 00:24:31,900
development at the moment but I've read

00:24:28,870 --> 00:24:33,910
some kind of hints from the angular team

00:24:31,900 --> 00:24:36,130
recently that it will be something

00:24:33,910 --> 00:24:39,010
available like prototypes are in

00:24:36,130 --> 00:24:41,320
experimental in version 6 and possibly

00:24:39,010 --> 00:24:43,890
released in version 7 so it's not too

00:24:41,320 --> 00:24:47,800
far four maybe six months or so away and

00:24:43,890 --> 00:24:50,800
this will be like a really huge thing if

00:24:47,800 --> 00:24:53,020
you have a component like we do because

00:24:50,800 --> 00:24:54,790
then it means that it becomes a

00:24:53,020 --> 00:24:56,650
completely Universal front-end library

00:24:54,790 --> 00:24:59,530
so if we have other teams in our company

00:24:56,650 --> 00:25:01,780
who use in just not angular using any

00:24:59,530 --> 00:25:03,340
kind of framework or no framework they

00:25:01,780 --> 00:25:05,470
can use the same library so you can

00:25:03,340 --> 00:25:08,800
build one UI library and angular and the

00:25:05,470 --> 00:25:12,010
whole company can then use it in any

00:25:08,800 --> 00:25:13,420
context so it's it's really exciting and

00:25:12,010 --> 00:25:18,640
I think that could open up some like

00:25:13,420 --> 00:25:25,030
massive possibilities okay so thank you

00:25:18,640 --> 00:25:27,370
that's all I have V we're hiring I got

00:25:25,030 --> 00:25:30,100
some comics sounds in there so yeah

00:25:27,370 --> 00:25:33,100
that's it if you got any questions asked

00:25:30,100 --> 00:25:33,100

YouTube URL: https://www.youtube.com/watch?v=toRRQ1B5fUU


