Title: Angular Vienna, Web Application Security for Frontend Devs, July 2019
Publication date: 2019-07-16
Playlist: Angular Vienna
Description: 
	Talk by Thomas Konrad 

In this talk, we'll cover the most important security topics that have touchpoints with frontend development: Same-Origin Policy (SOP), Cross-Origin Resource Sharing (CORS), Cross-Site Scripting (XSS), Content Security Policy (CSP), and WebSocket Security.
For each topic, you'll also get a concise checklist of what to consider when coding.
Captions: 
	00:00:00,030 --> 00:00:05,580
all right I do have a specific

00:00:02,810 --> 00:00:07,429
perspective on angle development or web

00:00:05,580 --> 00:00:09,269
application development self development

00:00:07,429 --> 00:00:11,700
which is security

00:00:09,269 --> 00:00:14,309
I am the software security guy and today

00:00:11,700 --> 00:00:16,020
I want to talk to you about security

00:00:14,309 --> 00:00:17,550
aspects that are specific to front-end

00:00:16,020 --> 00:00:19,590
development in general and we're gonna

00:00:17,550 --> 00:00:22,140
dive into some very angular specific

00:00:19,590 --> 00:00:24,900
things as well right now I don't know

00:00:22,140 --> 00:00:26,670
how about you guys but when I went into

00:00:24,900 --> 00:00:29,210
the world of software security I was

00:00:26,670 --> 00:00:34,410
overwhelmed by the amount of acronyms

00:00:29,210 --> 00:00:36,540
here Co RS and XSS and CSP and whatever

00:00:34,410 --> 00:00:38,730
okay I just want to shine a little bit

00:00:36,540 --> 00:00:40,320
of light on this world and I want to

00:00:38,730 --> 00:00:42,120
explain the basics about these things

00:00:40,320 --> 00:00:43,410
because I think it is important for a

00:00:42,120 --> 00:00:45,629
software developer for every software

00:00:43,410 --> 00:00:48,300
developer out there that does suffer for

00:00:45,629 --> 00:00:51,000
the browser to understand the basics of

00:00:48,300 --> 00:00:54,149
little things right so before we dive

00:00:51,000 --> 00:00:55,620
into those things still I want to give a

00:00:54,149 --> 00:00:57,629
little bit of a high-level perspective

00:00:55,620 --> 00:00:59,820
on the topic of software security like a

00:00:57,629 --> 00:01:01,829
ten thousand meters view on software

00:00:59,820 --> 00:01:05,070
security so let's do that first

00:01:01,829 --> 00:01:07,260
now a thing that I want to share with

00:01:05,070 --> 00:01:09,720
you which corresponds to my experience

00:01:07,260 --> 00:01:11,310
is there is no such thing as a software

00:01:09,720 --> 00:01:13,380
developer that does software development

00:01:11,310 --> 00:01:17,820
on the one hide side and then later on

00:01:13,380 --> 00:01:20,970
learns security as a second pillar of

00:01:17,820 --> 00:01:22,710
their skill set in my experience people

00:01:20,970 --> 00:01:24,689
that are good in software security are

00:01:22,710 --> 00:01:25,979
just good developers it's just the

00:01:24,689 --> 00:01:27,869
people that have a very deep

00:01:25,979 --> 00:01:29,549
understanding of everything that is

00:01:27,869 --> 00:01:32,820
involved in their development

00:01:29,549 --> 00:01:34,770
environment right so in order to be good

00:01:32,820 --> 00:01:36,329
at security or software security you

00:01:34,770 --> 00:01:38,970
need to be a good developer just

00:01:36,329 --> 00:01:41,340
continual learning so if you start as a

00:01:38,970 --> 00:01:44,280
software over like I did as well right

00:01:41,340 --> 00:01:46,500
messy insecure code that's not testable

00:01:44,280 --> 00:01:48,329
that's not where functionality it's not

00:01:46,500 --> 00:01:50,970
encapsulated right it's not testable

00:01:48,329 --> 00:01:52,890
code there are no unit tests at all it

00:01:50,970 --> 00:01:55,710
just works kind of but it's not

00:01:52,890 --> 00:01:57,350
sustainable or maintainable software now

00:01:55,710 --> 00:02:00,210
the next step would be write clean code

00:01:57,350 --> 00:02:02,909
then maybe write testable code write the

00:02:00,210 --> 00:02:05,310
actual unit tests that's that started

00:02:02,909 --> 00:02:07,110
somewhat late in my personal career then

00:02:05,310 --> 00:02:08,550
start hacking your own code start

00:02:07,110 --> 00:02:10,709
getting an interest in how things work

00:02:08,550 --> 00:02:14,160
and how to circumvent security controls

00:02:10,709 --> 00:02:15,900
maybe and then like the last skill

00:02:14,160 --> 00:02:18,480
or what very high school would be write

00:02:15,900 --> 00:02:20,160
secure code and that only starts once

00:02:18,480 --> 00:02:22,020
you start understanding very well what's

00:02:20,160 --> 00:02:23,340
going on in your develop environment and

00:02:22,020 --> 00:02:24,810
development vironment includes

00:02:23,340 --> 00:02:26,850
everything the programming language the

00:02:24,810 --> 00:02:29,430
framework the container the operating

00:02:26,850 --> 00:02:31,290
system the protocols that are used to

00:02:29,430 --> 00:02:35,460
interact between the parts of your

00:02:31,290 --> 00:02:38,400
software right so in my personal

00:02:35,460 --> 00:02:39,780
experience and in-depth understanding of

00:02:38,400 --> 00:02:42,420
your death environment will almost

00:02:39,780 --> 00:02:44,460
automatically make you a better security

00:02:42,420 --> 00:02:46,560
engineer right it's not the thing

00:02:44,460 --> 00:02:47,310
software development and then security

00:02:46,560 --> 00:02:49,590
as a sidenote

00:02:47,310 --> 00:02:54,660
no it's it's supposed to be one thing

00:02:49,590 --> 00:02:56,340
right now security has to two very

00:02:54,660 --> 00:02:58,740
common problems and I want to share a

00:02:56,340 --> 00:03:00,930
tweet of Christopher Hines that I saw

00:02:58,740 --> 00:03:03,480
recently he said the number one problem

00:03:00,930 --> 00:03:04,890
in the community is a go and by ego he

00:03:03,480 --> 00:03:06,330
means something like you know I'm the

00:03:04,890 --> 00:03:08,790
cool hacker I hacked the application

00:03:06,330 --> 00:03:11,910
you're doing that's not how it

00:03:08,790 --> 00:03:14,670
works security guys need to be part of

00:03:11,910 --> 00:03:17,670
the development team and the development

00:03:14,670 --> 00:03:18,840
spirit in order for this to work right

00:03:17,670 --> 00:03:20,430
so good people must not be the people

00:03:18,840 --> 00:03:23,610
that come from the outside and say this

00:03:20,430 --> 00:03:25,320
is and that is right the

00:03:23,610 --> 00:03:27,540
second thing is the fixation on niche

00:03:25,320 --> 00:03:29,910
risk now if people go on security

00:03:27,540 --> 00:03:31,140
conferences where the latest and

00:03:29,910 --> 00:03:32,760
greatest hacks are presented that's

00:03:31,140 --> 00:03:35,310
basically a good thing for people that

00:03:32,760 --> 00:03:38,610
are in security but at the same time

00:03:35,310 --> 00:03:41,100
most software developers I think have a

00:03:38,610 --> 00:03:42,630
hard time getting the basics really done

00:03:41,100 --> 00:03:45,150
and really down and this is where we

00:03:42,630 --> 00:03:46,590
need to focus on security conferences or

00:03:45,150 --> 00:03:49,410
something for security guys to get the

00:03:46,590 --> 00:03:51,060
latest hacks it's a good thing but still

00:03:49,410 --> 00:03:52,800
we need to focus on the basics and he

00:03:51,060 --> 00:03:56,130
says my hero team is the one who gets

00:03:52,800 --> 00:03:58,739
the basics right and shares how right

00:03:56,130 --> 00:04:00,870
this is what I want to do today how to

00:03:58,739 --> 00:04:02,730
get the basics in security down and I

00:04:00,870 --> 00:04:04,680
want to share with you how some of those

00:04:02,730 --> 00:04:08,010
things are done so let's get the basics

00:04:04,680 --> 00:04:10,860
right and share between each other how

00:04:08,010 --> 00:04:13,770
we did this the third thing and then I'm

00:04:10,860 --> 00:04:16,519
gonna stop this you know old man's

00:04:13,770 --> 00:04:20,209
wisdom

00:04:16,519 --> 00:04:21,889
when you when you find security problems

00:04:20,209 --> 00:04:23,150
late in the development lifecycle like

00:04:21,889 --> 00:04:24,650
when everything is deployed it's in

00:04:23,150 --> 00:04:27,259
production and then somebody finds the

00:04:24,650 --> 00:04:29,599
security issue it's starts get very

00:04:27,259 --> 00:04:31,729
expensive when you want to try to fix

00:04:29,599 --> 00:04:33,020
that problem if it's something in the

00:04:31,729 --> 00:04:35,120
architecture that haven't considered

00:04:33,020 --> 00:04:37,520
from the start things start to get very

00:04:35,120 --> 00:04:40,370
expensive so I don't know if you heard

00:04:37,520 --> 00:04:42,680
shifting left in software security means

00:04:40,370 --> 00:04:44,840
just starting to think earlier in the

00:04:42,680 --> 00:04:47,419
software development lifecycle for

00:04:44,840 --> 00:04:49,460
example writing a requirements document

00:04:47,419 --> 00:04:50,780
that does not only contain functional

00:04:49,460 --> 00:04:52,669
requirements but maybe maybe also

00:04:50,780 --> 00:04:54,620
security requirements to get you an idea

00:04:52,669 --> 00:04:57,409
how sensitive the data is that we are

00:04:54,620 --> 00:04:59,930
processing or storing or persisting in

00:04:57,409 --> 00:05:01,909
our application right or for example in

00:04:59,930 --> 00:05:04,310
the architectural design phase think

00:05:01,909 --> 00:05:05,960
about the security architecture security

00:05:04,310 --> 00:05:07,550
design what implications our design

00:05:05,960 --> 00:05:09,319
decisions have in the soft development

00:05:07,550 --> 00:05:11,720
so that's meant by shifting left when it

00:05:09,319 --> 00:05:13,789
start earlier so we need to shift left

00:05:11,720 --> 00:05:14,720
in the software development lifecycle in

00:05:13,789 --> 00:05:18,770
terms of security

00:05:14,720 --> 00:05:20,690
start thinking earlier right but enough

00:05:18,770 --> 00:05:22,639
of that old man's wisdom we're

00:05:20,690 --> 00:05:24,650
gonna go into technical details right

00:05:22,639 --> 00:05:27,169
now I want to start with start with a

00:05:24,650 --> 00:05:30,020
certain vulnerability that's called

00:05:27,169 --> 00:05:32,509
cross-site request forgery I started

00:05:30,020 --> 00:05:33,800
with this one because in order to

00:05:32,509 --> 00:05:36,849
understand what's going on in this

00:05:33,800 --> 00:05:38,719
attack we need to understand two things

00:05:36,849 --> 00:05:41,210
the first thing is the same origin

00:05:38,719 --> 00:05:44,570
policy and web browsers how it exactly

00:05:41,210 --> 00:05:46,280
works it's not too easy to understand I

00:05:44,570 --> 00:05:48,949
have to admit and the second one is

00:05:46,280 --> 00:05:53,659
authentication web browsers implicit

00:05:48,949 --> 00:05:54,889
explicit authentication so what is cross

00:05:53,659 --> 00:05:56,560
advocates for tree before we dive in

00:05:54,889 --> 00:06:00,280
would want to clarify those two things

00:05:56,560 --> 00:06:03,349
the same origin policy in a browser

00:06:00,280 --> 00:06:05,539
limits the way to different origins can

00:06:03,349 --> 00:06:07,310
interact with each other so imagine you

00:06:05,539 --> 00:06:08,599
have one web set open in one tab you

00:06:07,310 --> 00:06:11,020
were locked in to their website you have

00:06:08,599 --> 00:06:15,949
another website open another tab

00:06:11,020 --> 00:06:18,229
you can't just arbitrarily send requests

00:06:15,949 --> 00:06:20,750
from one to the other and gets and post

00:06:18,229 --> 00:06:23,449
stuff you can with some exceptions but

00:06:20,750 --> 00:06:25,130
it's not arbitrarily open right you

00:06:23,449 --> 00:06:26,360
cannot read the cookies or the local

00:06:25,130 --> 00:06:28,039
storage of the other side that's not

00:06:26,360 --> 00:06:29,380
possible the same are true policy is

00:06:28,039 --> 00:06:33,700
going to limit that

00:06:29,380 --> 00:06:35,500
I said origin what exactly is the origin

00:06:33,700 --> 00:06:37,930
in the web browser security context

00:06:35,500 --> 00:06:43,780
I wanted to award you guys with some

00:06:37,930 --> 00:06:45,250
pets I gonna find some no ok all are

00:06:43,780 --> 00:06:46,630
gone there wasn't pets I wanted to award

00:06:45,250 --> 00:06:51,250
the guys with the right answers but

00:06:46,630 --> 00:06:53,490
anyway you're awarded with fame what's

00:06:51,250 --> 00:07:03,550
the origin what does the origin contain

00:06:53,490 --> 00:07:05,050
in a web browser oh thank you domain is

00:07:03,550 --> 00:07:06,370
one very important probably the most

00:07:05,050 --> 00:07:11,170
important part but there are two other

00:07:06,370 --> 00:07:14,370
things that are part of the origin the

00:07:11,170 --> 00:07:19,930
protocol or scheme there's one more

00:07:14,370 --> 00:07:21,520
whose head port huh very good it's three

00:07:19,930 --> 00:07:23,320
things it's a scheme it's the domain and

00:07:21,520 --> 00:07:25,420
support if one of those three things is

00:07:23,320 --> 00:07:26,950
different only one is different means

00:07:25,420 --> 00:07:30,700
it's a different origin although you're

00:07:26,950 --> 00:07:32,920
maybe on example.com HTTP port four four

00:07:30,700 --> 00:07:35,440
three if there's another side HTTP

00:07:32,920 --> 00:07:37,990
example become port h four eight four

00:07:35,440 --> 00:07:40,900
four three that's a different origin so

00:07:37,990 --> 00:07:42,970
here are some examples of if this is the

00:07:40,900 --> 00:07:47,560
original origin store a company come

00:07:42,970 --> 00:07:49,600
then HTTP which is not recommended by

00:07:47,560 --> 00:07:51,700
the way then this is the same origin

00:07:49,600 --> 00:07:54,520
because it's the same scheme domain and

00:07:51,700 --> 00:07:57,130
implicitly the same port 80 which is the

00:07:54,520 --> 00:07:59,500
default port for HTTP if you care for go

00:07:57,130 --> 00:08:02,230
for example for a other for a sub-domain

00:07:59,500 --> 00:08:04,990
it's not the same origin anymore

00:08:02,230 --> 00:08:06,700
subdomains are different origin so api

00:08:04,990 --> 00:08:08,230
dot example become is a different origin

00:08:06,700 --> 00:08:09,610
than example with comm keep that in mind

00:08:08,230 --> 00:08:12,400
if you do a your api on a different

00:08:09,610 --> 00:08:15,220
domain right your rest of api for

00:08:12,400 --> 00:08:18,100
example so these three things must be

00:08:15,220 --> 00:08:19,390
equal now what is allowed generally in

00:08:18,100 --> 00:08:20,890
the same origin policy in what is not

00:08:19,390 --> 00:08:23,920
allowed and this is very

00:08:20,890 --> 00:08:28,960
counterintuitive because cross origin

00:08:23,920 --> 00:08:30,990
rights are typically allowed whereas

00:08:28,960 --> 00:08:34,360
cross origin reads are typically

00:08:30,990 --> 00:08:35,770
prohibited for security guys this is

00:08:34,360 --> 00:08:38,290
very counterintuitive because you would

00:08:35,770 --> 00:08:41,080
think reads are permitted first and then

00:08:38,290 --> 00:08:42,030
we can write that's not the case now why

00:08:41,080 --> 00:08:44,670
is that

00:08:42,030 --> 00:08:47,730
why are cross-party rights allowed in

00:08:44,670 --> 00:09:02,130
some cases an idea what is the thing we

00:08:47,730 --> 00:09:04,530
want to support well the exception not

00:09:02,130 --> 00:09:07,740
really the exception that cross-origin

00:09:04,530 --> 00:09:11,190
rights are allowed is cross-origin form

00:09:07,740 --> 00:09:13,230
submissions right we have a classic

00:09:11,190 --> 00:09:15,840
server-side rendered not angular old

00:09:13,230 --> 00:09:18,480
world think of the old world HTML form

00:09:15,840 --> 00:09:21,180
within form with a form action that goes

00:09:18,480 --> 00:09:22,680
to a different origin and you you issue

00:09:21,180 --> 00:09:25,170
a post request over to a different

00:09:22,680 --> 00:09:27,540
origin that is still allowed even in

00:09:25,170 --> 00:09:29,430
2019 so the browser's do not forbid that

00:09:27,540 --> 00:09:32,160
that's a legacy that we're still

00:09:29,430 --> 00:09:34,380
carrying with us in browsers I have a

00:09:32,160 --> 00:09:36,600
login form that goes that points to a

00:09:34,380 --> 00:09:39,000
different origin you can post there it's

00:09:36,600 --> 00:09:41,580
allowed but that's one specific

00:09:39,000 --> 00:09:43,470
exception to that cross origin right now

00:09:41,580 --> 00:09:45,360
cross origin embedding is a totally

00:09:43,470 --> 00:09:48,630
different story who of you has ever

00:09:45,360 --> 00:09:51,230
imported say the angularjs library from

00:09:48,630 --> 00:09:53,850
a CDN a content delivery network I have

00:09:51,230 --> 00:09:56,100
many of you have and it worked right it

00:09:53,850 --> 00:09:59,280
was a different origin it was CDN I

00:09:56,100 --> 00:10:00,930
don't know Google anything you could

00:09:59,280 --> 00:10:02,430
include that script it would work the

00:10:00,930 --> 00:10:04,560
only exception is that you cannot

00:10:02,430 --> 00:10:06,330
literally read the contents of the

00:10:04,560 --> 00:10:08,430
script byte by byte that's not possible

00:10:06,330 --> 00:10:10,440
but you can run it in the context of

00:10:08,430 --> 00:10:13,100
your site so cross-origin embedding is

00:10:10,440 --> 00:10:15,480
embedding is typically allowed as well

00:10:13,100 --> 00:10:17,730
think of this just as a little bit a

00:10:15,480 --> 00:10:19,710
counterintuitive thing curse origin

00:10:17,730 --> 00:10:21,660
writes cross origin forum posts the

00:10:19,710 --> 00:10:24,150
legacy thing is allowed cross origin

00:10:21,660 --> 00:10:27,270
returned are possible now let me ask you

00:10:24,150 --> 00:10:30,480
one thing if you have your site and you

00:10:27,270 --> 00:10:31,860
do an HX call to a different origin get

00:10:30,480 --> 00:10:34,140
requests okay you want to get

00:10:31,860 --> 00:10:36,650
information is the requests gonna go

00:10:34,140 --> 00:10:39,660
through is it's gonna go over the wire

00:10:36,650 --> 00:10:41,850
yes it is is it gonna be an

00:10:39,660 --> 00:10:43,200
authenticated request so our for example

00:10:41,850 --> 00:10:46,610
implicit authentication that cookies

00:10:43,200 --> 00:10:46,610
gonna be included in that request

00:10:51,980 --> 00:10:58,620
it's an authenticated request it's gonna

00:10:55,709 --> 00:11:00,269
be with cookies now what's the limit it

00:10:58,620 --> 00:11:02,269
says here across origin reads are

00:11:00,269 --> 00:11:04,199
typically prohibited now what's the deal

00:11:02,269 --> 00:11:04,709
you're gonna be awarded with this

00:11:04,199 --> 00:11:09,480
awesome

00:11:04,709 --> 00:11:10,800
pets that's kind of a contradiction

00:11:09,480 --> 00:11:12,420
right there as requests going to go

00:11:10,800 --> 00:11:14,790
through it's gonna be authenticated

00:11:12,420 --> 00:11:16,320
everything is gonna be alright but why

00:11:14,790 --> 00:11:24,720
does it say here across origin trees are

00:11:16,320 --> 00:11:26,130
prohibited the response will be so

00:11:24,720 --> 00:11:28,310
you're not allowed to read the response

00:11:26,130 --> 00:11:30,510
in JavaScript it's going to appear empty

00:11:28,310 --> 00:11:31,350
you can issued a request it's going to

00:11:30,510 --> 00:11:33,240
go through it's going to go over the

00:11:31,350 --> 00:11:35,070
wire the browsers can receive it there's

00:11:33,240 --> 00:11:37,800
going to be TCP communication to the

00:11:35,070 --> 00:11:39,630
other hosts but in your originating

00:11:37,800 --> 00:11:41,699
JavaScript you cannot read the response

00:11:39,630 --> 00:11:44,850
and that's why reads are prohibited

00:11:41,699 --> 00:11:46,350
right so that's the deal that's kind of

00:11:44,850 --> 00:11:50,579
hard to miss that took me years to

00:11:46,350 --> 00:11:52,339
understand this right now one more thing

00:11:50,579 --> 00:11:55,079
a implicit versus explicit

00:11:52,339 --> 00:11:56,730
authentication implicit authentication

00:11:55,079 --> 00:11:58,620
is everything that your browser does

00:11:56,730 --> 00:12:00,930
automatically when you issue requests

00:11:58,620 --> 00:12:02,430
somewhere say for example you're on

00:12:00,930 --> 00:12:05,910
example.com you're going to issue a

00:12:02,430 --> 00:12:07,380
request with a checks to say API dot

00:12:05,910 --> 00:12:10,740
example to come different origin as we

00:12:07,380 --> 00:12:13,050
said the domain is different now if you

00:12:10,740 --> 00:12:14,430
have a cookie set for that target origin

00:12:13,050 --> 00:12:16,380
that cookie is going to be attached to

00:12:14,430 --> 00:12:18,510
that request automatically you don't

00:12:16,380 --> 00:12:19,889
have to care about this yourself and

00:12:18,510 --> 00:12:22,380
JavaScript or anything you have to sit

00:12:19,889 --> 00:12:25,139
there with credentials to true to be

00:12:22,380 --> 00:12:26,370
very precise but your browser's gonna

00:12:25,139 --> 00:12:28,260
handle the rest okay

00:12:26,370 --> 00:12:30,839
this is implicit off vacations gonna

00:12:28,260 --> 00:12:32,610
happen implicitly automatically now we

00:12:30,839 --> 00:12:33,690
also have explicit authentication that

00:12:32,610 --> 00:12:37,050
could be for example an authentication

00:12:33,690 --> 00:12:38,610
header or any custom header that you set

00:12:37,050 --> 00:12:40,050
for example with an it should be

00:12:38,610 --> 00:12:42,540
interceptor in your angular application

00:12:40,050 --> 00:12:44,160
where you add you take the local storage

00:12:42,540 --> 00:12:45,930
session token' and you put it into

00:12:44,160 --> 00:12:47,519
request as a header that's explicit

00:12:45,930 --> 00:12:49,380
authentication you have to do that

00:12:47,519 --> 00:12:51,389
explicitly in your code it's not gonna

00:12:49,380 --> 00:12:53,670
happen automatically your browser's not

00:12:51,389 --> 00:12:55,860
gonna take care about this for you who

00:12:53,670 --> 00:12:57,000
of you uses explicit authentication

00:12:55,860 --> 00:12:58,199
something like a custom header

00:12:57,000 --> 00:13:01,800
authentication header in your

00:12:58,199 --> 00:13:04,790
application you guys

00:13:01,800 --> 00:13:07,679
don't have cross-site request forgery

00:13:04,790 --> 00:13:09,509
the other guys do so we have two canary

00:13:07,679 --> 00:13:11,399
you know fix the explicit authentication

00:13:09,509 --> 00:13:15,420
guys you can have a beer I'm gonna take

00:13:11,399 --> 00:13:19,529
five minutes for a rest to explain he's

00:13:15,420 --> 00:13:20,610
doing it now just this is the course

00:13:19,529 --> 00:13:22,439
affection for this cross-site request

00:13:20,610 --> 00:13:23,970
forgery attack say this is the browser

00:13:22,439 --> 00:13:26,009
of the victim this is the banking

00:13:23,970 --> 00:13:28,290
application right where we are logged in

00:13:26,009 --> 00:13:30,329
so we do a post login request and we get

00:13:28,290 --> 00:13:32,910
that concessional T so in the browser we

00:13:30,329 --> 00:13:34,470
have an implicit authentication a cookie

00:13:32,910 --> 00:13:37,350
with a section at the inside now the

00:13:34,470 --> 00:13:38,939
attacker alerts me on their site that

00:13:37,350 --> 00:13:40,379
you sent me an email and I click on a

00:13:38,939 --> 00:13:43,499
link and the site opens on a browser on

00:13:40,379 --> 00:13:45,869
a new tab now they can embed a form

00:13:43,499 --> 00:13:47,670
element into their site right it's in

00:13:45,869 --> 00:13:49,769
their origin under their control and

00:13:47,670 --> 00:13:52,559
they have a little script in here that

00:13:49,769 --> 00:13:54,809
automatically submits that form to the

00:13:52,559 --> 00:13:56,939
bank site so it's gonna issue a post

00:13:54,809 --> 00:14:00,350
request with I want to create a transfer

00:13:56,939 --> 00:14:02,549
to myself with one minute in euros right

00:14:00,350 --> 00:14:04,319
that wouldn't work for my accounts

00:14:02,549 --> 00:14:06,480
unfortunately but you get the point and

00:14:04,319 --> 00:14:08,549
it's gonna issue back a 200 okay right

00:14:06,480 --> 00:14:10,439
the only thing that happens in the

00:14:08,549 --> 00:14:13,350
browser is that the web page is going to

00:14:10,439 --> 00:14:16,139
be changed to bank.com so we're attacker

00:14:13,350 --> 00:14:17,519
boot comm was there's gonna be Bank calm

00:14:16,139 --> 00:14:21,540
I'm gonna be issued I'm going to be

00:14:17,519 --> 00:14:22,829
redirected there right but if that side

00:14:21,540 --> 00:14:24,929
over there does not have any

00:14:22,829 --> 00:14:27,170
countermeasures against this it's gonna

00:14:24,929 --> 00:14:30,660
work that's cross-site request forgery

00:14:27,170 --> 00:14:33,360
okay so let me summarize when does this

00:14:30,660 --> 00:14:35,129
attack work a little bit of a

00:14:33,360 --> 00:14:39,179
server-side thing but also concerning

00:14:35,129 --> 00:14:41,579
the browser side of it so CSRF attack

00:14:39,179 --> 00:14:45,419
works if the server accepts right

00:14:41,579 --> 00:14:46,980
operations via get post or head not

00:14:45,419 --> 00:14:49,049
usually done for for right operations

00:14:46,980 --> 00:14:51,449
but that's important it's needs to be

00:14:49,049 --> 00:14:55,259
get or post patch put delete is not

00:14:51,449 --> 00:14:58,230
gonna work with standard HTML form

00:14:55,259 --> 00:14:59,429
content types an HTML form a classic

00:14:58,230 --> 00:15:00,209
form can only have three different

00:14:59,429 --> 00:15:04,470
content types

00:15:00,209 --> 00:15:06,989
it's X www for URL encoded that's a

00:15:04,470 --> 00:15:09,919
default it can be multi-part form data

00:15:06,989 --> 00:15:09,919
is used for what

00:15:12,019 --> 00:15:19,500
who set up loads there you go I'm sorry

00:15:17,029 --> 00:15:21,389
multi-part form task is used for file

00:15:19,500 --> 00:15:24,269
uploads right it's that you see that

00:15:21,389 --> 00:15:25,949
boundary thing in the HTTP body or it

00:15:24,269 --> 00:15:27,779
can be text plane plane which is also

00:15:25,949 --> 00:15:29,459
possibility for forms it needs to be one

00:15:27,779 --> 00:15:32,670
of those things that are accepted by

00:15:29,459 --> 00:15:34,620
your server right and it there needs to

00:15:32,670 --> 00:15:36,839
be implicit authentication so if that

00:15:34,620 --> 00:15:38,670
cross origin request happens here with

00:15:36,839 --> 00:15:40,110
this form the cookie needs to be

00:15:38,670 --> 00:15:42,810
attached automatically because the

00:15:40,110 --> 00:15:44,220
attacker has no means to grab the cookie

00:15:42,810 --> 00:15:46,680
of the target site same origin policy

00:15:44,220 --> 00:15:49,139
allows does not allow that right so

00:15:46,680 --> 00:15:51,060
implicit authentication and there's one

00:15:49,139 --> 00:15:53,100
more thing that's important and no

00:15:51,060 --> 00:15:54,839
non-standard header is required so if

00:15:53,100 --> 00:15:58,709
the server says there is any non

00:15:54,839 --> 00:16:02,339
standard header such as X - angular -

00:15:58,709 --> 00:16:04,740
meetup call on to write something can be

00:16:02,339 --> 00:16:07,259
anything if your server requires that to

00:16:04,740 --> 00:16:10,110
be part of the request that attack is

00:16:07,259 --> 00:16:11,190
not going to work any more right because

00:16:10,110 --> 00:16:13,050
that's going to issue that's kind of

00:16:11,190 --> 00:16:17,089
what what does it what is gonna happen

00:16:13,050 --> 00:16:20,220
if that if you attach a custom header a

00:16:17,089 --> 00:16:22,440
course pre-flight request we can talk

00:16:20,220 --> 00:16:25,019
about that so these are the things your

00:16:22,440 --> 00:16:27,329
server side needs to accept those things

00:16:25,019 --> 00:16:29,160
then this attack is going to work so

00:16:27,329 --> 00:16:31,500
let's turn this around and think about

00:16:29,160 --> 00:16:34,470
how we can what we can do about this

00:16:31,500 --> 00:16:36,329
attack so the first thing you have to

00:16:34,470 --> 00:16:38,069
strictly distinguish get from non get on

00:16:36,329 --> 00:16:40,380
the server side so tell your server side

00:16:38,069 --> 00:16:43,310
guys to be strict about not get and non

00:16:40,380 --> 00:16:46,410
get right don't accept a post request

00:16:43,310 --> 00:16:49,470
with get but that's not your your

00:16:46,410 --> 00:16:51,529
business really and then either use

00:16:49,470 --> 00:16:53,639
explicit of explicit authentication

00:16:51,529 --> 00:16:56,610
write explicit authentication is a

00:16:53,639 --> 00:16:58,170
non-standard header it's gonna cause a

00:16:56,610 --> 00:16:59,639
pre-flood request it's not gonna the

00:16:58,170 --> 00:17:01,949
post request that goes to the bank that

00:16:59,639 --> 00:17:03,449
says 1 million euros to Thomas is not

00:17:01,949 --> 00:17:06,929
going to go through because the server

00:17:03,449 --> 00:17:09,659
is gonna issue an options response

00:17:06,929 --> 00:17:12,510
options requests and responds to it or

00:17:09,659 --> 00:17:14,159
what you could do as well is only accept

00:17:12,510 --> 00:17:17,010
the non-standard format so if you only

00:17:14,159 --> 00:17:17,939
accept Jason on the server side attack

00:17:17,010 --> 00:17:20,220
is also not gonna work

00:17:17,939 --> 00:17:23,339
why because with a standard HTML form a

00:17:20,220 --> 00:17:24,959
classic one Jason is not possible it's

00:17:23,339 --> 00:17:28,500
only that classic

00:17:24,959 --> 00:17:31,919
- WWE forum URL encoded or multiple form

00:17:28,500 --> 00:17:34,799
data no Jason or you could just use a

00:17:31,919 --> 00:17:37,320
non-standard header for example X users

00:17:34,799 --> 00:17:39,390
protection true and enforce this header

00:17:37,320 --> 00:17:41,220
on the server side now this is a very

00:17:39,390 --> 00:17:43,559
cool solution for you angular guys

00:17:41,220 --> 00:17:45,480
because it's very easy to set a header

00:17:43,559 --> 00:17:47,970
upon every request with an interceptor

00:17:45,480 --> 00:17:49,830
you can just set that header make sure

00:17:47,970 --> 00:17:50,130
in the server side it's there there we

00:17:49,830 --> 00:17:53,520
go

00:17:50,130 --> 00:17:56,460
CSRF is salt right that's why I tell you

00:17:53,520 --> 00:17:58,409
guys there are very easy solutions for

00:17:56,460 --> 00:18:01,169
single page applications just set this

00:17:58,409 --> 00:18:03,210
non-standard header just check it that

00:18:01,169 --> 00:18:06,390
it's there on the server side you're

00:18:03,210 --> 00:18:09,120
done no you probably heard about CSRF

00:18:06,390 --> 00:18:11,520
tokens and stuff like this forget about

00:18:09,120 --> 00:18:13,500
all that if you have a checks only and a

00:18:11,520 --> 00:18:17,669
single page application no need for this

00:18:13,500 --> 00:18:19,380
okay complicated blows up the design of

00:18:17,669 --> 00:18:22,500
the application forget it single page

00:18:19,380 --> 00:18:24,000
applications custom header as a

00:18:22,500 --> 00:18:25,470
difference in depth if you use cookies

00:18:24,000 --> 00:18:27,840
for authentication you could use the

00:18:25,470 --> 00:18:28,890
same side cookie attribute which makes

00:18:27,840 --> 00:18:30,360
sure that the browser does not

00:18:28,890 --> 00:18:32,760
automatically attach the cookie when

00:18:30,360 --> 00:18:37,110
there is a cross origin request that's

00:18:32,760 --> 00:18:39,809
even supported in Internet Explorer it

00:18:37,110 --> 00:18:42,870
was listen it was back ported into

00:18:39,809 --> 00:18:45,539
Internet's poor really no joke not go -

00:18:42,870 --> 00:18:47,309
can I use com same side it was back

00:18:45,539 --> 00:18:49,140
ported to Internet Explorer first time

00:18:47,309 --> 00:18:51,720
in history something security feature

00:18:49,140 --> 00:18:55,140
back ported to IE so proud of

00:18:51,720 --> 00:18:57,000
Microsoft's good so that's CSRF I want

00:18:55,140 --> 00:18:59,100
to do places this first because same

00:18:57,000 --> 00:19:02,090
origin policy important to understand

00:18:59,100 --> 00:19:04,559
for other stuff like for example this

00:19:02,090 --> 00:19:07,190
cross-origin resource sharing who of you

00:19:04,559 --> 00:19:11,520
has fought with this head of fight with

00:19:07,190 --> 00:19:13,679
access control headers everybody is

00:19:11,520 --> 00:19:17,990
fighting with this because it's hard to

00:19:13,679 --> 00:19:20,399
understand we want to dive into it and

00:19:17,990 --> 00:19:22,049
talk a little bit how it is relates to

00:19:20,399 --> 00:19:25,770
the same origin policy now question to

00:19:22,049 --> 00:19:27,559
you guys just saying it's you can you've

00:19:25,770 --> 00:19:29,940
been going to be awarded with this is

00:19:27,559 --> 00:19:33,240
cross-origin resource sharing can it be

00:19:29,940 --> 00:19:35,630
used to strengthen or to weaken the same

00:19:33,240 --> 00:19:35,630
origin policy

00:19:41,280 --> 00:19:47,590
that was a really it is weakening the

00:19:45,670 --> 00:19:49,960
same-origin policy because with this if

00:19:47,590 --> 00:19:51,580
you have cross-origin requests for

00:19:49,960 --> 00:19:53,710
example you have your single page annual

00:19:51,580 --> 00:19:55,990
application at example.com and you want

00:19:53,710 --> 00:19:58,690
to issue requests with a checks to api

00:19:55,990 --> 00:20:00,670
example.com and you want to actually

00:19:58,690 --> 00:20:02,860
read the response which is kind of

00:20:00,670 --> 00:20:04,420
important you have to add a course

00:20:02,860 --> 00:20:07,300
header to the response on reserve asset

00:20:04,420 --> 00:20:08,050
right so let's have a little look at

00:20:07,300 --> 00:20:10,059
this

00:20:08,050 --> 00:20:11,920
so cross sergeant requests can be done

00:20:10,059 --> 00:20:17,110
with this same origin policy can be

00:20:11,920 --> 00:20:18,130
weakened in a controlled way so before

00:20:17,110 --> 00:20:20,290
it was forbidden by the same-origin

00:20:18,130 --> 00:20:24,340
policy some of you have done something

00:20:20,290 --> 00:20:27,670
like JSONP really old school equivalent

00:20:24,340 --> 00:20:29,950
to course so we have example.com we

00:20:27,670 --> 00:20:32,830
won't talk of to arrest API on API to

00:20:29,950 --> 00:20:34,840
example to come so on this API record

00:20:32,830 --> 00:20:37,090
for example respond with access control

00:20:34,840 --> 00:20:40,480
allow origin and then example.com that

00:20:37,090 --> 00:20:45,870
would open up API request from example

00:20:40,480 --> 00:20:48,490
would come to APR example.com sorry okay

00:20:45,870 --> 00:20:51,160
so there are two things simple requests

00:20:48,490 --> 00:20:53,140
and preflighted requests a simple

00:20:51,160 --> 00:20:56,140
request would be something like a get

00:20:53,140 --> 00:20:58,179
request that goes to the other domain

00:20:56,140 --> 00:21:01,179
and just tries to get some public data

00:20:58,179 --> 00:21:03,580
you send it by a child script and then

00:21:01,179 --> 00:21:05,830
the server's gonna respond respond with

00:21:03,580 --> 00:21:07,900
okay first the request sorry the request

00:21:05,830 --> 00:21:10,030
is going to include an origin header the

00:21:07,900 --> 00:21:12,000
origin header is gonna tell the server

00:21:10,030 --> 00:21:14,710
this request originates from there

00:21:12,000 --> 00:21:17,110
cannot be manipulated by JavaScript

00:21:14,710 --> 00:21:18,520
that's the whole point of it right so a

00:21:17,110 --> 00:21:19,960
browser that supports cross-origin

00:21:18,520 --> 00:21:21,640
resource sharing is gonna always gonna

00:21:19,960 --> 00:21:23,770
set this header and it's you cannot

00:21:21,640 --> 00:21:25,179
manipulate it with JavaScript right it's

00:21:23,770 --> 00:21:27,910
there and it's always gonna be there

00:21:25,179 --> 00:21:29,320
cannot control it and then the response

00:21:27,910 --> 00:21:31,660
could be something like access control

00:21:29,320 --> 00:21:33,070
our origin asterisk this is not a

00:21:31,660 --> 00:21:36,309
recommendation just to make that clear

00:21:33,070 --> 00:21:39,280
don't do this if you're unless you're a

00:21:36,309 --> 00:21:41,470
public API with public data right the

00:21:39,280 --> 00:21:43,679
wikipedia api does this but you know

00:21:41,470 --> 00:21:45,790
it's public data it's not something that

00:21:43,679 --> 00:21:48,760
that's just that's private to some

00:21:45,790 --> 00:21:49,480
people so that's that's just an example

00:21:48,760 --> 00:21:51,340
now

00:21:49,480 --> 00:21:53,649
there are preflighted requests and

00:21:51,340 --> 00:21:57,340
preflight the requests are such request

00:21:53,649 --> 00:22:00,610
for example are a method that's other

00:21:57,340 --> 00:22:03,880
than get imposed or a custom header is

00:22:00,610 --> 00:22:06,760
set or a content type that's not

00:22:03,880 --> 00:22:09,580
standard for HTML forms you remember the

00:22:06,760 --> 00:22:10,990
emergent policy so it could be something

00:22:09,580 --> 00:22:13,299
like you set a content type that's not

00:22:10,990 --> 00:22:16,269
standard application XML is not standard

00:22:13,299 --> 00:22:18,190
for it for HTML forms and you set a

00:22:16,269 --> 00:22:20,440
custom header as well so why does this

00:22:18,190 --> 00:22:22,779
JavaScript code trigger a pre-flight

00:22:20,440 --> 00:22:24,789
request first because it contains a

00:22:22,779 --> 00:22:27,460
custom header and it has a content type

00:22:24,789 --> 00:22:28,539
that's non-standard then what's going to

00:22:27,460 --> 00:22:30,130
happen in a browser you might have seen

00:22:28,539 --> 00:22:32,230
this in a network tab of your dev tools

00:22:30,130 --> 00:22:33,970
sometime there's gonna be an options

00:22:32,230 --> 00:22:36,490
request and that options requests is

00:22:33,970 --> 00:22:40,240
basically there to ask to go ask the

00:22:36,490 --> 00:22:41,799
server look server is it okay to send a

00:22:40,240 --> 00:22:44,740
post request with the custom header and

00:22:41,799 --> 00:22:46,570
the non-standard content type it's gonna

00:22:44,740 --> 00:22:48,100
ask the server so you have it the server

00:22:46,570 --> 00:22:50,889
side the back in guys have it under that

00:22:48,100 --> 00:22:53,409
control whether or not to allow this so

00:22:50,889 --> 00:22:56,559
the server could if it is allowed sand

00:22:53,409 --> 00:22:58,360
pack access control origin that origin

00:22:56,559 --> 00:23:01,029
that was sent by with the request and

00:22:58,360 --> 00:23:03,580
they could say post get an options

00:23:01,029 --> 00:23:05,769
request are okay and it could say

00:23:03,580 --> 00:23:07,149
allowed headers are these two because

00:23:05,769 --> 00:23:10,240
these two are non-standard

00:23:07,149 --> 00:23:14,080
right access control max age what's

00:23:10,240 --> 00:23:16,690
that's gonna do who's that caching there

00:23:14,080 --> 00:23:18,940
you go so this tells the browser to

00:23:16,690 --> 00:23:22,510
remember that information here that is

00:23:18,940 --> 00:23:25,690
okay to send our to this URL request

00:23:22,510 --> 00:23:27,279
with those options and not issue options

00:23:25,690 --> 00:23:28,960
requests every time it's gonna be a

00:23:27,279 --> 00:23:29,649
performance issue F if you have a

00:23:28,960 --> 00:23:33,389
high-volume

00:23:29,649 --> 00:23:36,639
site right remember that information and

00:23:33,389 --> 00:23:38,679
the server could answer then it only

00:23:36,639 --> 00:23:40,630
sends the post request so the next step

00:23:38,679 --> 00:23:42,940
is options request back post request to

00:23:40,630 --> 00:23:46,679
the server as soon as the browser sees

00:23:42,940 --> 00:23:50,559
that is okay to send a request like this

00:23:46,679 --> 00:23:54,760
right so a little a developer's

00:23:50,559 --> 00:23:57,279
checklist do not set exit control allow

00:23:54,760 --> 00:23:59,200
origin asterisk that can only be set for

00:23:57,279 --> 00:24:01,419
get requests by the way post requests do

00:23:59,200 --> 00:24:03,280
not allow this by the standard do not

00:24:01,419 --> 00:24:06,610
set this unless you are a public API

00:24:03,280 --> 00:24:08,680
and what I frequently see I'm a

00:24:06,610 --> 00:24:10,420
penetration tester by the way and I see

00:24:08,680 --> 00:24:11,920
these things all day every day

00:24:10,420 --> 00:24:14,620
exit control our origin and then

00:24:11,920 --> 00:24:16,180
reflecting the value that came with the

00:24:14,620 --> 00:24:17,220
origin headed with the request don't do

00:24:16,180 --> 00:24:20,140
this please

00:24:17,220 --> 00:24:22,030
okay use a whitelist have a

00:24:20,140 --> 00:24:23,860
configuration set version with an

00:24:22,030 --> 00:24:26,020
environment variable for example at

00:24:23,860 --> 00:24:27,790
their server-side and if the origin is

00:24:26,020 --> 00:24:30,790
within those origins that are allowed

00:24:27,790 --> 00:24:33,040
then send back this specific origin use

00:24:30,790 --> 00:24:34,930
a whitelist please I've seen it so many

00:24:33,040 --> 00:24:38,020
times this is like crossword records for

00:24:34,930 --> 00:24:39,790
tree but better for your tech er right

00:24:38,020 --> 00:24:43,780
they can read and write everything I can

00:24:39,790 --> 00:24:45,850
do anything right don't do this and only

00:24:43,780 --> 00:24:48,690
write lists allowed headers and stuff

00:24:45,850 --> 00:24:51,490
that's actually allowed right don't do

00:24:48,690 --> 00:24:55,510
whitelist everything that's bad for your

00:24:51,490 --> 00:24:58,350
security right now we're gonna get into

00:24:55,510 --> 00:25:00,640
the next topic cross-site scripting

00:24:58,350 --> 00:25:03,430
cross-site scripting ISM is an attack

00:25:00,640 --> 00:25:06,940
that is very relevant for single page

00:25:03,430 --> 00:25:08,500
applications and angular has some pretty

00:25:06,940 --> 00:25:09,790
cool countermeasures against that and

00:25:08,500 --> 00:25:11,200
we're gonna dive into those and have a

00:25:09,790 --> 00:25:13,680
look at those countermeasures which are

00:25:11,200 --> 00:25:16,930
I would say better than in every other

00:25:13,680 --> 00:25:20,560
popular s.p.a framework out there my

00:25:16,930 --> 00:25:23,170
personal opinion cross the scripting is

00:25:20,560 --> 00:25:25,570
about executing script code in other

00:25:23,170 --> 00:25:27,400
people's context imagine for example you

00:25:25,570 --> 00:25:29,440
have a web page where you have a comment

00:25:27,400 --> 00:25:32,650
section and in these comments you can I

00:25:29,440 --> 00:25:35,320
don't format your comment use piloted

00:25:32,650 --> 00:25:37,240
lists or tables or bold or italic text

00:25:35,320 --> 00:25:39,430
and stuff like this now this is usually

00:25:37,240 --> 00:25:41,320
converted to HTML text you push it back

00:25:39,430 --> 00:25:44,140
to the server and you do not do any

00:25:41,320 --> 00:25:46,450
escaping anything on the client-side so

00:25:44,140 --> 00:25:48,580
you could potentially execute script

00:25:46,450 --> 00:25:50,920
code you could embed a script tag and

00:25:48,580 --> 00:25:53,770
then if any other person over there

00:25:50,920 --> 00:25:55,660
reads that comment or opens the command

00:25:53,770 --> 00:25:58,180
page the script codes gonna be executed

00:25:55,660 --> 00:26:00,010
in their context and you can do anything

00:25:58,180 --> 00:26:01,270
with their user session you could try to

00:26:00,010 --> 00:26:03,220
steal their session token' if it's

00:26:01,270 --> 00:26:06,100
stored in local storage you have access

00:26:03,220 --> 00:26:09,370
to it via JavaScript you could possibly

00:26:06,100 --> 00:26:13,260
use reads to cookie if the session start

00:26:09,370 --> 00:26:13,260
cooking unless which flag is set

00:26:13,370 --> 00:26:20,240
it should be only who said HTTP only

00:26:15,830 --> 00:26:22,940
flag very good it should be only flag

00:26:20,240 --> 00:26:25,430
with cookies prohibits JavaScript from

00:26:22,940 --> 00:26:27,380
reading the value so that's the thing

00:26:25,430 --> 00:26:29,690
now let's have a closer look

00:26:27,380 --> 00:26:44,470
so hopefully the development environment

00:26:29,690 --> 00:26:50,030
here works it's oh there it is great so

00:26:44,470 --> 00:26:52,130
it's a little bit hard to see I'm just

00:26:50,030 --> 00:26:54,770
gonna continue anyway right I'm I hope

00:26:52,130 --> 00:26:59,900
you can I will try to to explain my

00:26:54,770 --> 00:27:01,310
points now there are a couple of

00:26:59,900 --> 00:27:03,920
dangerous or potentially dangerous

00:27:01,310 --> 00:27:06,080
things that you could do with angular

00:27:03,920 --> 00:27:07,190
and I want to show them to you but you

00:27:06,080 --> 00:27:11,300
know it's a black list

00:27:07,190 --> 00:27:14,260
don't do this right where could you

00:27:11,300 --> 00:27:23,330
potentially insert Script code think of

00:27:14,260 --> 00:27:25,670
an angular template where could maybe

00:27:23,330 --> 00:27:28,580
image source attributes could be a place

00:27:25,670 --> 00:27:32,060
for inner HTML is exactly the thing I

00:27:28,580 --> 00:27:33,560
want to wanted to to say so for example

00:27:32,060 --> 00:27:35,630
you have this comment think about that

00:27:33,560 --> 00:27:38,210
comment section and you have HTML code

00:27:35,630 --> 00:27:41,030
in there because you want people to have

00:27:38,210 --> 00:27:42,530
options for formatting their text now if

00:27:41,030 --> 00:27:44,600
you want to output that HTML code and

00:27:42,530 --> 00:27:47,000
it's actually HTML you need inner HTML

00:27:44,600 --> 00:27:49,640
so that the browser renders this that as

00:27:47,000 --> 00:27:51,230
HTML and does not show you you know the

00:27:49,640 --> 00:27:53,360
brackets and anything in the HTML code

00:27:51,230 --> 00:27:55,070
you want to want it to be rendered so

00:27:53,360 --> 00:27:59,930
inner HTML is an option that could use

00:27:55,070 --> 00:28:04,850
for this so I have this code here there

00:27:59,930 --> 00:28:08,270
is an inner HTML this is a products page

00:28:04,850 --> 00:28:09,980
and the product page has some

00:28:08,270 --> 00:28:17,770
information about you know a list of

00:28:09,980 --> 00:28:17,770
products it looks like this alright and

00:28:19,360 --> 00:28:23,559
let's just think that somebody can

00:28:21,910 --> 00:28:26,980
change the description of that product

00:28:23,559 --> 00:28:28,960
and I have used innerhtml here so you

00:28:26,980 --> 00:28:31,390
can see it here it says innerhtml

00:28:28,960 --> 00:28:34,080
so the product description is going to

00:28:31,390 --> 00:28:36,820
go into that span element as innerhtml

00:28:34,080 --> 00:28:39,220
now let's suppose that somebody can

00:28:36,820 --> 00:28:41,920
manipulate that and put some script code

00:28:39,220 --> 00:28:46,260
in there I'm just simulating this by

00:28:41,920 --> 00:28:48,610
changing the product description here

00:28:46,260 --> 00:28:54,750
I'm gonna put some script code in here

00:28:48,610 --> 00:29:00,130
so for example script let's say alert

00:28:54,750 --> 00:29:02,500
you know the classic close the script

00:29:00,130 --> 00:29:05,559
tag I'm gonna save it what do you think

00:29:02,500 --> 00:29:12,730
is gonna happen if I save this is there

00:29:05,559 --> 00:29:21,370
gonna be an alert box yes or no who said

00:29:12,730 --> 00:29:25,000
no that was better it's new there is no

00:29:21,370 --> 00:29:33,809
alert box here but if you if I have a

00:29:25,000 --> 00:29:33,809
look at the at the console come on

00:29:38,570 --> 00:29:47,220
it says here sanitizing HTML strip some

00:29:43,560 --> 00:29:50,150
content see some link with XSS contained

00:29:47,220 --> 00:29:53,100
so angularjs has a senate ization method

00:29:50,150 --> 00:29:54,840
built-in it's going to sanitize this

00:29:53,100 --> 00:29:58,110
code so there's nothing there's no

00:29:54,840 --> 00:29:59,870
script code possible so if i put a

00:29:58,110 --> 00:30:02,280
script tag and there's not gonna work

00:29:59,870 --> 00:30:07,260
there are other places where I can place

00:30:02,280 --> 00:30:08,970
critical potentially named some in an

00:30:07,260 --> 00:30:11,430
HTML I can put a script code okay but

00:30:08,970 --> 00:30:14,820
which HTML tags or attributes can also

00:30:11,430 --> 00:30:19,280
contain script code a link can contain

00:30:14,820 --> 00:30:19,280
JavaScript column for example what else

00:30:20,240 --> 00:30:23,970
JavaScript event handler so every event

00:30:22,350 --> 00:30:26,190
handler can contain script code if you

00:30:23,970 --> 00:30:29,070
write for example a div and onmouseover

00:30:26,190 --> 00:30:30,450
equals there you can put script code all

00:30:29,070 --> 00:30:32,040
these things are going to be stripped

00:30:30,450 --> 00:30:36,900
out by angular because it carries a

00:30:32,040 --> 00:30:38,580
built-in sanitization method now it is

00:30:36,900 --> 00:30:40,440
the only of only one of the popular

00:30:38,580 --> 00:30:42,240
frameworks future has react in angular I

00:30:40,440 --> 00:30:45,330
would name those three as the most

00:30:42,240 --> 00:30:47,460
popular ones that care is a built-in

00:30:45,330 --> 00:30:50,370
sanitization but this is very cool

00:30:47,460 --> 00:30:55,560
you know inner HTML how react calls that

00:30:50,370 --> 00:30:56,910
function dangerously set inner HTML so

00:30:55,560 --> 00:30:58,650
they are warning you as the developer

00:30:56,910 --> 00:31:00,480
that you should not use this function so

00:30:58,650 --> 00:31:02,280
they just call it angle just called

00:31:00,480 --> 00:31:06,600
Energy Mel it's safe to use so this is

00:31:02,280 --> 00:31:08,520
pretty cool right so but it also could

00:31:06,600 --> 00:31:12,660
go into a link let's let's try that out

00:31:08,520 --> 00:31:15,780
as well I have an 1/8 tag here an anchor

00:31:12,660 --> 00:31:18,510
tag which has the product link inside

00:31:15,780 --> 00:31:20,730
and the product link let's suppose can

00:31:18,510 --> 00:31:23,160
also be manipulated by an attacker I

00:31:20,730 --> 00:31:25,290
just scroll down to the products ts

00:31:23,160 --> 00:31:27,810
gonna open the file I'm gonna go over

00:31:25,290 --> 00:31:32,880
here to the that's a link and I'm gonna

00:31:27,810 --> 00:31:35,040
put in here JavaScript : alert and you

00:31:32,880 --> 00:31:37,680
know the old classic alert one just

00:31:35,040 --> 00:31:40,560
let's see if a pop-up happens let's go

00:31:37,680 --> 00:31:43,380
back here to the console will take some

00:31:40,560 --> 00:31:44,670
time same thing it has a sanitization

00:31:43,380 --> 00:31:46,680
method so everything that could

00:31:44,670 --> 00:31:50,160
potentially contain JavaScript code like

00:31:46,680 --> 00:31:52,350
links like event handlers everything is

00:31:50,160 --> 00:31:55,080
gonna be sanitized so that's pretty cool

00:31:52,350 --> 00:31:58,200
now you know developers don't always go

00:31:55,080 --> 00:31:59,730
that straight path and they're gonna be

00:31:58,200 --> 00:32:01,639
situations where you might want the

00:31:59,730 --> 00:32:03,960
script code to be executed you know

00:32:01,639 --> 00:32:06,240
there are ways around this and I'm just

00:32:03,960 --> 00:32:19,649
showing this to you in order so that you

00:32:06,240 --> 00:32:21,029
do not use it let's have a look at where

00:32:19,649 --> 00:32:26,909
is it it's here in a module

00:32:21,029 --> 00:32:29,580
I created a pipe right here so I have an

00:32:26,909 --> 00:32:32,070
unsaved HTML pipe so I can use I can

00:32:29,580 --> 00:32:34,429
output something and and type pipe and

00:32:32,070 --> 00:32:37,049
then something and it's gonna be

00:32:34,429 --> 00:32:39,509
filtered in this case I'm not gonna be

00:32:37,049 --> 00:32:42,299
filtered because I say here babe bypass

00:32:39,509 --> 00:32:44,789
security trust HTML which is gonna turn

00:32:42,299 --> 00:32:47,250
off the whole protection so I can

00:32:44,789 --> 00:32:50,429
actually insert script code right so if

00:32:47,250 --> 00:32:54,570
you go back to say for example my

00:32:50,429 --> 00:33:07,769
products page it's all a little slow

00:32:54,570 --> 00:33:11,220
here oh yeah thanks I owe it's that this

00:33:07,769 --> 00:33:14,029
plays lighter now very cool I go back to

00:33:11,220 --> 00:33:19,440
the product page and instead of just

00:33:14,029 --> 00:33:25,669
having this description span right here

00:33:19,440 --> 00:33:28,669
I say product description pipe unsafe

00:33:25,669 --> 00:33:28,669
HTML

00:33:32,600 --> 00:33:35,230
okay

00:33:37,810 --> 00:33:45,390
you have to download the font okay and

00:33:41,020 --> 00:33:45,390
head back to the product section see

00:33:53,950 --> 00:34:03,250
it just doesn't reload for a reason port

00:33:59,770 --> 00:34:05,730
closed that whole thing is a little

00:34:03,250 --> 00:34:05,730
unstable

00:34:14,810 --> 00:34:21,750
you know just imagine there's a pop-up

00:34:17,340 --> 00:34:22,980
box coming it so if the word if there

00:34:21,750 --> 00:34:25,860
was an internet connection there would

00:34:22,980 --> 00:34:28,490
be a pop-up box and I'm afraid Internet

00:34:25,860 --> 00:34:28,490
connection system

00:34:47,910 --> 00:34:54,070
it's okay which is living with this and

00:34:51,310 --> 00:34:56,500
I think it's not recommended to do this

00:34:54,070 --> 00:35:01,060
bypass so there are ways in angular to

00:34:56,500 --> 00:35:03,700
bypass that security function and that

00:35:01,060 --> 00:35:05,860
you should not use this so a little

00:35:03,700 --> 00:35:09,250
checklist for angular developers cross

00:35:05,860 --> 00:35:12,310
the scripting what I wanted to show you

00:35:09,250 --> 00:35:14,260
is stuff like for example document

00:35:12,310 --> 00:35:15,850
outright it's also function that can

00:35:14,260 --> 00:35:20,080
contain HTML code if there's a script

00:35:15,850 --> 00:35:21,730
tag in there you can actually put script

00:35:20,080 --> 00:35:25,060
tags in they're not going to be executed

00:35:21,730 --> 00:35:26,650
that's what I call Dom khufu right there

00:35:25,060 --> 00:35:28,750
are good ways in angular templates that

00:35:26,650 --> 00:35:30,760
you can use to output your stuff don't

00:35:28,750 --> 00:35:32,500
do Dom kung-fu don't manipulate the Dom

00:35:30,760 --> 00:35:34,810
directly but use the ways that angular

00:35:32,500 --> 00:35:36,670
gives you right and you're gonna be on a

00:35:34,810 --> 00:35:39,400
safe side don't disable those security

00:35:36,670 --> 00:35:41,770
functions so be very very careful if you

00:35:39,400 --> 00:35:45,310
do that bypass security trust something

00:35:41,770 --> 00:35:47,530
there are functions for HTML for links

00:35:45,310 --> 00:35:50,230
and for everything don't do that unless

00:35:47,530 --> 00:35:51,940
you're very very very very sure that the

00:35:50,230 --> 00:35:54,250
data you're inserting there is coming

00:35:51,940 --> 00:35:56,290
from a trusted source right not input by

00:35:54,250 --> 00:35:59,350
any user anything in your application

00:35:56,290 --> 00:36:00,970
also be careful with external libraries

00:35:59,350 --> 00:36:03,940
because they could do Dom Kuhn through

00:36:00,970 --> 00:36:06,190
as well check them for known

00:36:03,940 --> 00:36:07,960
vulnerabilities with NPM audit for

00:36:06,190 --> 00:36:09,220
example to check whether they have some

00:36:07,960 --> 00:36:12,370
known cross-site scripting

00:36:09,220 --> 00:36:14,890
vulnerabilities in there good

00:36:12,370 --> 00:36:18,190
so cross the scripting if in angular in

00:36:14,890 --> 00:36:21,060
short if you go the easy path and use

00:36:18,190 --> 00:36:25,540
the functionality that angular gives you

00:36:21,060 --> 00:36:26,710
you're pretty much on the safe side but

00:36:25,540 --> 00:36:28,030
you can never be very sure if there are

00:36:26,710 --> 00:36:29,440
many developers involved in a project

00:36:28,030 --> 00:36:30,940
some of them are not so aware of

00:36:29,440 --> 00:36:33,280
security that could be something

00:36:30,940 --> 00:36:35,350
happening right and there's a very good

00:36:33,280 --> 00:36:39,000
defense in depth mechanism against

00:36:35,350 --> 00:36:39,000
cross-site scripting which is called

00:36:39,450 --> 00:36:45,670
defense in depth against cross a

00:36:41,380 --> 00:36:50,080
scripting second line of defense what's

00:36:45,670 --> 00:36:53,170
the name of it anyone anybody heard of

00:36:50,080 --> 00:36:55,990
the content security policy yeah

00:36:53,170 --> 00:36:58,210
never some of you did content security

00:36:55,990 --> 00:37:00,520
policy was made as a deep

00:36:58,210 --> 00:37:02,470
in depth against cross-site scripting so

00:37:00,520 --> 00:37:04,990
if we have a huge application landscape

00:37:02,470 --> 00:37:06,150
and we're not very sure whether there

00:37:04,990 --> 00:37:08,800
might be across the scripting or not

00:37:06,150 --> 00:37:11,230
this can be a very good second line of

00:37:08,800 --> 00:37:13,180
defense so the thing is it's not a

00:37:11,230 --> 00:37:14,980
matter if you will introduce cross the

00:37:13,180 --> 00:37:19,210
scripting Mobe in your application but

00:37:14,980 --> 00:37:21,880
when right I know this is true I see

00:37:19,210 --> 00:37:24,430
this every day even yesterday I tested a

00:37:21,880 --> 00:37:25,990
react application that used a

00:37:24,430 --> 00:37:28,870
dangerously thing right

00:37:25,990 --> 00:37:31,660
Korso scripting so there you go although

00:37:28,870 --> 00:37:32,740
they used a very modern framework so a

00:37:31,660 --> 00:37:34,810
word of warning

00:37:32,740 --> 00:37:36,460
chrono security policy is not the

00:37:34,810 --> 00:37:39,280
solution against cross the scripting you

00:37:36,460 --> 00:37:41,500
should still take care about it in your

00:37:39,280 --> 00:37:43,630
application it's only defense in that so

00:37:41,500 --> 00:37:45,040
second line of defense correct output

00:37:43,630 --> 00:37:47,140
encoding and angular does that for you

00:37:45,040 --> 00:37:48,340
is the only real solution against the

00:37:47,140 --> 00:37:51,280
problem but what is the constant

00:37:48,340 --> 00:37:53,710
security policy all about it is an HTTP

00:37:51,280 --> 00:37:55,240
response headers or your server answers

00:37:53,710 --> 00:37:57,460
with that header when it serves the

00:37:55,240 --> 00:38:00,100
index or any HTML page it's not relevant

00:37:57,460 --> 00:38:03,130
for ap is people set this on AP is not

00:38:00,100 --> 00:38:06,400
relevant only for when you give that an

00:38:03,130 --> 00:38:08,230
HTML resource so it looks like this

00:38:06,400 --> 00:38:10,030
content security policy and you can

00:38:08,230 --> 00:38:14,230
specify directives for example script

00:38:10,030 --> 00:38:17,920
source self or CDM example comm which

00:38:14,230 --> 00:38:21,730
means browser the HTML page I'm giving

00:38:17,920 --> 00:38:24,700
you it only might load dynamic stuff

00:38:21,730 --> 00:38:27,880
like scripts from those two origins it

00:38:24,700 --> 00:38:30,280
can be that CDN that I host or somebody

00:38:27,880 --> 00:38:33,310
else host or my own ordered origin

00:38:30,280 --> 00:38:36,280
that's the self thing right if I do any

00:38:33,310 --> 00:38:37,930
I embed a script that has an external

00:38:36,280 --> 00:38:40,240
source or interacts with anything

00:38:37,930 --> 00:38:42,640
external it's not gonna work right I

00:38:40,240 --> 00:38:45,220
tell the browser don't accept any script

00:38:42,640 --> 00:38:46,750
imports from anything else so I have

00:38:45,220 --> 00:38:48,990
three examples here I have an import

00:38:46,750 --> 00:38:52,750
from CDM examples of comm jQuery

00:38:48,990 --> 00:38:53,380
whatever whoever uses this nowadays it's

00:38:52,750 --> 00:38:56,410
gonna work

00:38:53,380 --> 00:38:58,210
the script source /gs FGS is from the

00:38:56,410 --> 00:39:00,160
same source itself it's gonna work as

00:38:58,210 --> 00:39:02,320
well but as soon as an attacker mounted

00:39:00,160 --> 00:39:03,730
JavaScript attack and says I wanna

00:39:02,320 --> 00:39:06,340
import a script that comes from evolve

00:39:03,730 --> 00:39:08,050
outcome poonacha yes it's not gonna work

00:39:06,340 --> 00:39:09,700
because it's gonna say refuse to load

00:39:08,050 --> 00:39:11,269
the script because it comes from

00:39:09,700 --> 00:39:13,939
something that is not white

00:39:11,269 --> 00:39:16,219
in your content security policy that's

00:39:13,939 --> 00:39:18,709
what it's basically all about now there

00:39:16,219 --> 00:39:21,859
are a few implicit things that come with

00:39:18,709 --> 00:39:23,149
a content security policy and that's

00:39:21,859 --> 00:39:26,839
amazing the most important thing

00:39:23,149 --> 00:39:30,409
actually is inline scripts are disabled

00:39:26,839 --> 00:39:32,809
are not allowed right there must not be

00:39:30,409 --> 00:39:34,729
any script tag that contains JavaScript

00:39:32,809 --> 00:39:36,589
within your HTML there can be scripts

00:39:34,729 --> 00:39:39,349
that are loaded with an SRC attribute

00:39:36,589 --> 00:39:42,559
from your own site but not inline is

00:39:39,349 --> 00:39:43,640
completely forbidden an empty content

00:39:42,559 --> 00:39:45,739
security policy is gonna have a bid

00:39:43,640 --> 00:39:48,140
inline scripts as well that's default

00:39:45,739 --> 00:39:49,669
now what also comes with it event

00:39:48,140 --> 00:39:51,529
handlers and attributes are also

00:39:49,669 --> 00:39:53,509
disallowed so no JavaScript event

00:39:51,529 --> 00:39:55,369
handlers are possible within the HTML

00:39:53,509 --> 00:39:57,109
that's important angular is still gonna

00:39:55,369 --> 00:39:59,179
work because everything is inside

00:39:57,109 --> 00:40:01,099
external dot GS files that are gonna be

00:39:59,179 --> 00:40:04,159
bundled with your web pack or whatever

00:40:01,099 --> 00:40:06,109
you use right so that's okay also

00:40:04,159 --> 00:40:08,719
functions like set timeouts and interval

00:40:06,109 --> 00:40:11,029
they have an option to you can pass

00:40:08,719 --> 00:40:12,829
JavaScript code directly with a with a

00:40:11,029 --> 00:40:15,559
string to those functions that's not

00:40:12,829 --> 00:40:16,939
gonna be a lot of neither right so

00:40:15,559 --> 00:40:18,979
everything that's chava script code

00:40:16,939 --> 00:40:22,209
that's directly visible in your HTML

00:40:18,979 --> 00:40:24,829
it's gonna be disabled not allowed

00:40:22,209 --> 00:40:26,239
there's one very cool feature of the

00:40:24,829 --> 00:40:29,089
content security policy which is called

00:40:26,239 --> 00:40:31,219
the report URI so if there is any

00:40:29,089 --> 00:40:33,529
violation in or in your application so

00:40:31,219 --> 00:40:35,359
somebody attacks it or a developer has

00:40:33,529 --> 00:40:37,249
forgotten to remove that one inline

00:40:35,359 --> 00:40:40,239
script or something like that you can

00:40:37,249 --> 00:40:42,349
specify where a report is gonna be sent

00:40:40,239 --> 00:40:44,359
it looks like this it's just a jason

00:40:42,349 --> 00:40:46,699
that contains which page it was which

00:40:44,359 --> 00:40:50,509
policy was violated and stuff like this

00:40:46,699 --> 00:40:52,189
so that's also a good way to get started

00:40:50,509 --> 00:40:54,859
with the content security policy because

00:40:52,189 --> 00:40:56,269
there is a report only mode so if you

00:40:54,859 --> 00:40:59,029
set the header as content security

00:40:56,269 --> 00:41:01,279
policy report only it's gonna mean it's

00:40:59,029 --> 00:41:03,019
not gonna be actively blocking things

00:41:01,279 --> 00:41:06,409
it's only gonna be reporting if there's

00:41:03,019 --> 00:41:08,599
a violation so you can install a content

00:41:06,409 --> 00:41:09,799
security policy and see if it works in

00:41:08,599 --> 00:41:10,969
production you can see the setup is in

00:41:09,799 --> 00:41:13,519
production it's secure it's not gonna

00:41:10,969 --> 00:41:16,189
break your application should you forget

00:41:13,519 --> 00:41:17,779
to remove an inline script or something

00:41:16,189 --> 00:41:22,519
like that or event handler let's dive to

00:41:17,779 --> 00:41:24,970
inner HTML right now if you have scripts

00:41:22,519 --> 00:41:28,240
that load other scripts

00:41:24,970 --> 00:41:30,910
think of angular Arnold dynamic modules

00:41:28,240 --> 00:41:33,580
that are loaded on demand so the cookie

00:41:30,910 --> 00:41:36,340
scripts that load other scripts with

00:41:33,580 --> 00:41:39,190
content security policy version 3 a new

00:41:36,340 --> 00:41:42,010
feature came into this which is called

00:41:39,190 --> 00:41:44,140
strict dynamic if you specify strict

00:41:42,010 --> 00:41:45,970
dynamic it's gonna allow your scripts

00:41:44,140 --> 00:41:48,130
that are already white listed to load

00:41:45,970 --> 00:41:51,730
other scripts that makes it easier to

00:41:48,130 --> 00:41:54,070
deploy in more specific situations so

00:41:51,730 --> 00:41:55,720
checklist if you want to deploy a

00:41:54,070 --> 00:41:58,000
content security policy for your site

00:41:55,720 --> 00:42:00,220
what's that gonna mean it's gonna mean

00:41:58,000 --> 00:42:01,750
extract all your inline scripts and

00:42:00,220 --> 00:42:03,490
JavaScript event handlers that's easy

00:42:01,750 --> 00:42:06,460
with angular if you have a web pack and

00:42:03,490 --> 00:42:08,800
you have your app and your vendor GS and

00:42:06,460 --> 00:42:10,840
your Styles it's all external anyway

00:42:08,800 --> 00:42:12,490
there is not going to be probably likely

00:42:10,840 --> 00:42:13,780
any in landscape and if you have an

00:42:12,490 --> 00:42:17,200
inline script just put it in an external

00:42:13,780 --> 00:42:19,480
doc GS file and included with SRC equals

00:42:17,200 --> 00:42:20,950
write no inner scripts because they are

00:42:19,480 --> 00:42:22,480
disabled they are not allowed by default

00:42:20,950 --> 00:42:24,460
with the content group that's what

00:42:22,480 --> 00:42:27,630
content security policy is all about not

00:42:24,460 --> 00:42:30,310
having inline scripts because you know

00:42:27,630 --> 00:42:32,170
across the scripting works that way

00:42:30,310 --> 00:42:34,080
define your directives where your

00:42:32,170 --> 00:42:36,670
scripts are coming from whitelist them

00:42:34,080 --> 00:42:37,390
start with report only because then

00:42:36,670 --> 00:42:39,460
you're not going to break your

00:42:37,390 --> 00:42:40,839
application if you get reports in your

00:42:39,460 --> 00:42:41,950
production environments gonna mean that

00:42:40,839 --> 00:42:44,170
there's something wrong or there might

00:42:41,950 --> 00:42:45,760
be some mistake somewhere you can go and

00:42:44,170 --> 00:42:48,070
fix it as soon as you don't get any

00:42:45,760 --> 00:42:49,720
reports for a longer period of time and

00:42:48,070 --> 00:42:52,480
you start gaining confidence in what you

00:42:49,720 --> 00:42:54,430
did you can just remove the report only

00:42:52,480 --> 00:42:57,220
but I would keep the repo to your eye

00:42:54,430 --> 00:42:58,480
because if somebody mounts a cross-site

00:42:57,220 --> 00:43:02,099
scripting attack on application you're

00:42:58,480 --> 00:43:04,480
gonna notice it and that's pretty cool

00:43:02,099 --> 00:43:06,040
good so that's consecutive policy

00:43:04,480 --> 00:43:08,080
there's more to it there's nonces and

00:43:06,040 --> 00:43:09,580
hashes and stuff like this not going to

00:43:08,080 --> 00:43:11,470
cover this today but to give you a Gantt

00:43:09,580 --> 00:43:13,210
general idea of what content security

00:43:11,470 --> 00:43:14,380
policy is all about it's a defense in

00:43:13,210 --> 00:43:15,970
depth against cross scripting and it's

00:43:14,380 --> 00:43:17,830
pretty awesome you know Google has

00:43:15,970 --> 00:43:21,160
deployed it on 99 point something

00:43:17,830 --> 00:43:22,720
percent of their services so it's

00:43:21,160 --> 00:43:25,089
something that can be done in production

00:43:22,720 --> 00:43:27,599
on a wide range of applications totally

00:43:25,089 --> 00:43:30,820
possible now one last thing

00:43:27,599 --> 00:43:34,200
acronym sup resource integrity who has

00:43:30,820 --> 00:43:34,200
heard about sub resource integrity

00:43:35,630 --> 00:43:45,059
wah wah what is this all about srid

00:43:40,380 --> 00:43:46,440
acronym for it now the problem that we

00:43:45,059 --> 00:43:48,119
have is for example you have an

00:43:46,440 --> 00:43:50,069
application and you want to ensure that

00:43:48,119 --> 00:43:51,959
there's high throughput possible in your

00:43:50,069 --> 00:43:53,549
application and you have your dot GS

00:43:51,959 --> 00:43:57,390
files and you put them on an external

00:43:53,549 --> 00:43:59,089
CDN somewhere or you just take standard

00:43:57,390 --> 00:44:02,190
JavaScript files from your external CDN

00:43:59,089 --> 00:44:04,440
to reduce loading times to reduce the

00:44:02,190 --> 00:44:06,119
server bandwidth and stuff like this now

00:44:04,440 --> 00:44:08,700
the risk here is that if that CDN is

00:44:06,119 --> 00:44:09,930
compromised your site is going to be

00:44:08,700 --> 00:44:12,089
compromised as well because that's

00:44:09,930 --> 00:44:14,309
attacker can just change this out

00:44:12,089 --> 00:44:16,589
javascript and execute arbitrary

00:44:14,309 --> 00:44:18,749
JavaScript in the name of the uses of

00:44:16,589 --> 00:44:20,910
your site which could be a problem if

00:44:18,749 --> 00:44:22,469
you have I don't know 20 different CD

00:44:20,910 --> 00:44:25,049
ends included in your site that could be

00:44:22,469 --> 00:44:26,339
a security problem it's a risk so what

00:44:25,049 --> 00:44:28,019
could we do about this sub resource

00:44:26,339 --> 00:44:30,660
integrity is a way to check the

00:44:28,019 --> 00:44:33,299
integrity of the tower script file so

00:44:30,660 --> 00:44:35,249
what it does is you have you know script

00:44:33,299 --> 00:44:39,239
tag with an external script source and

00:44:35,249 --> 00:44:41,640
then you have this integrity attribute

00:44:39,239 --> 00:44:44,849
that says here's the hash of the

00:44:41,640 --> 00:44:46,140
contents of those files of this file the

00:44:44,849 --> 00:44:48,660
browser's gonna download it it's gonna

00:44:46,140 --> 00:44:50,339
check whether the hash equals that file

00:44:48,660 --> 00:44:53,640
and is only gonna execute if the

00:44:50,339 --> 00:44:54,959
integrity is okay right so the browser's

00:44:53,640 --> 00:44:56,670
gonna check if something was changed so

00:44:54,959 --> 00:44:58,140
somebody changes something on that

00:44:56,670 --> 00:45:00,449
server on that CDN because it was

00:44:58,140 --> 00:45:01,799
attacked or something your browser going

00:45:00,449 --> 00:45:03,150
to execute it it's gonna break the site

00:45:01,799 --> 00:45:05,519
but at least the attacker does not

00:45:03,150 --> 00:45:10,109
manage to execute code in the browser's

00:45:05,519 --> 00:45:12,119
of your users right how can you recreate

00:45:10,109 --> 00:45:14,579
hashes of existing URLs

00:45:12,119 --> 00:45:16,380
there's SR I have shot over G for

00:45:14,579 --> 00:45:18,390
example we can just put in the URL to

00:45:16,380 --> 00:45:20,339
the JavaScript file it's gonna create

00:45:18,390 --> 00:45:25,229
the whole script tag including the

00:45:20,339 --> 00:45:27,949
integrity attribute developers checklist

00:45:25,229 --> 00:45:30,269
for you guys if you want to use s RI

00:45:27,949 --> 00:45:32,339
check please check whether your CDN

00:45:30,269 --> 00:45:34,739
actually supports this so if you go to

00:45:32,339 --> 00:45:37,469
the CDN s web page and the script tag

00:45:34,739 --> 00:45:38,880
includes the integrity stuff already

00:45:37,469 --> 00:45:41,670
it's gonna mean that they're supporting

00:45:38,880 --> 00:45:43,619
it why do I say this because if they in

00:45:41,670 --> 00:45:46,349
retrospective changed for example the

00:45:43,619 --> 00:45:47,400
minifying algorithm of that javascript

00:45:46,349 --> 00:45:48,990
file to make it a little bit smaller

00:45:47,400 --> 00:45:50,339
although if in

00:45:48,990 --> 00:45:52,319
terms of functionality nothing has

00:45:50,339 --> 00:45:54,450
changed the hash is also going to change

00:45:52,319 --> 00:45:58,170
and that would break your sight so only

00:45:54,450 --> 00:46:00,119
do this if the CDN or provider promises

00:45:58,170 --> 00:46:02,369
not to change old versions of the

00:46:00,119 --> 00:46:05,160
libraries because otherwise could break

00:46:02,369 --> 00:46:07,380
on the sites many CD ends that have

00:46:05,160 --> 00:46:09,119
JavaScript files support this and and

00:46:07,380 --> 00:46:11,220
have to link including that integrity

00:46:09,119 --> 00:46:12,630
hash already in the website and this is

00:46:11,220 --> 00:46:16,440
kind of an implicit promise not to

00:46:12,630 --> 00:46:18,720
change old versions of it one very fast

00:46:16,440 --> 00:46:20,640
thing last part WebSocket Security

00:46:18,720 --> 00:46:22,829
Essentials that's this is nothing that

00:46:20,640 --> 00:46:25,319
is really important for you front end

00:46:22,829 --> 00:46:27,299
guys but tell your back-end guys when

00:46:25,319 --> 00:46:29,519
you get home we're into the office that

00:46:27,299 --> 00:46:31,730
they should check the origin header on

00:46:29,519 --> 00:46:34,980
the server side because if they don't

00:46:31,730 --> 00:46:36,299
you know two tabs open attacker.com on

00:46:34,980 --> 00:46:38,249
the one side they could issue a

00:46:36,299 --> 00:46:40,079
WebSocket connection request cross

00:46:38,249 --> 00:46:42,390
origin and if that order is not checked

00:46:40,079 --> 00:46:44,789
they can read and put data or use the

00:46:42,390 --> 00:46:47,069
WebSocket in the name of the user that's

00:46:44,789 --> 00:46:49,019
logged in so tell your back-end guys

00:46:47,069 --> 00:46:53,940
check the origin header they're

00:46:49,019 --> 00:46:56,279
important right so let's wrap up the

00:46:53,940 --> 00:46:58,759
whole thing first we did a 10,000 meters

00:46:56,279 --> 00:47:01,859
view and software security and I said

00:46:58,759 --> 00:47:04,079
according to my experience somebody

00:47:01,859 --> 00:47:05,999
who's good at security engineering is

00:47:04,079 --> 00:47:08,549
basically nothing but a very good

00:47:05,999 --> 00:47:10,440
software developer so make sure to

00:47:08,549 --> 00:47:11,880
sharpen your skills and make sure to

00:47:10,440 --> 00:47:13,259
have an in-depth understanding of

00:47:11,880 --> 00:47:15,359
everything that's going around in your

00:47:13,259 --> 00:47:17,549
development environment including all

00:47:15,359 --> 00:47:19,650
the bits and pieces that's gonna make

00:47:17,549 --> 00:47:22,619
you a good security engineer almost

00:47:19,650 --> 00:47:24,420
automatically now let's get the basics

00:47:22,619 --> 00:47:25,799
right don't think about niche risk and

00:47:24,420 --> 00:47:27,420
the latest in Quetta stacks they are

00:47:25,799 --> 00:47:29,430
most probably not important for you guys

00:47:27,420 --> 00:47:31,380
when you do software development in your

00:47:29,430 --> 00:47:32,999
everyday business focus on the basics

00:47:31,380 --> 00:47:36,029
and get those right share how you do

00:47:32,999 --> 00:47:37,289
this and we need to start thinking about

00:47:36,029 --> 00:47:39,930
Sophos go a little bit earlier than that

00:47:37,289 --> 00:47:42,059
now a very fast web of the web of

00:47:39,930 --> 00:47:43,559
security for front-end devs acronym

00:47:42,059 --> 00:47:45,630
thing I hope you have a little bit of a

00:47:43,559 --> 00:47:48,749
more deep understanding of those things

00:47:45,630 --> 00:47:49,980
cross of request forgery setting your

00:47:48,749 --> 00:47:52,440
custom header is the easiest

00:47:49,980 --> 00:47:54,690
countermeasure against this attack for

00:47:52,440 --> 00:47:56,430
you angular developers for cross-origin

00:47:54,690 --> 00:47:58,319
resource sharing just don't whitelist

00:47:56,430 --> 00:47:59,460
everything or reflect the origin that's

00:47:58,319 --> 00:48:02,220
going to be bad for the security of

00:47:59,460 --> 00:48:04,290
application cross the scripting don't

00:48:02,220 --> 00:48:07,680
- Duncan foo when you do angular and you

00:48:04,290 --> 00:48:09,780
keep you stay on that default path and

00:48:07,680 --> 00:48:11,180
do what's in the documentation you're

00:48:09,780 --> 00:48:15,390
gonna be fine

00:48:11,180 --> 00:48:17,010
99.99% content security policy is a good

00:48:15,390 --> 00:48:19,890
defense in depth against that it's a

00:48:17,010 --> 00:48:22,710
server header that's set in the response

00:48:19,890 --> 00:48:23,760
you can use it and start with report

00:48:22,710 --> 00:48:25,830
only to make sure you don't break

00:48:23,760 --> 00:48:27,869
anything in production sub resource

00:48:25,830 --> 00:48:29,640
integrity if your CDN gets hacked you

00:48:27,869 --> 00:48:30,960
can make sure that you know at least

00:48:29,640 --> 00:48:33,420
that changed script it's not going to be

00:48:30,960 --> 00:48:34,830
executed in your context for WebSocket

00:48:33,420 --> 00:48:36,720
security not really important for you

00:48:34,830 --> 00:48:38,130
guys but for your back-end guys check

00:48:36,720 --> 00:48:41,099
the origin header and make sure it's

00:48:38,130 --> 00:48:42,990
coming from the own origin I didn't even

00:48:41,099 --> 00:48:44,790
present myself I'm gonna do that now I'm

00:48:42,990 --> 00:48:46,950
Tomas Connor I work as a penetration

00:48:44,790 --> 00:48:48,420
tester and software security guy at a

00:48:46,950 --> 00:48:50,580
research center for information security

00:48:48,420 --> 00:48:53,520
that's called SBA research it's here in

00:48:50,580 --> 00:48:55,140
Vienna the fourth district still took us

00:48:53,520 --> 00:48:57,810
almost an hour to get here because we

00:48:55,140 --> 00:49:02,340
just missed that you for thing and went

00:48:57,810 --> 00:49:03,570
around I don't know where so we

00:49:02,340 --> 00:49:06,390
that up a little bit but we were on time

00:49:03,570 --> 00:49:07,950
anyway so what I do is a penetration

00:49:06,390 --> 00:49:11,070
testing secure software life cycle

00:49:07,950 --> 00:49:13,260
things security automation for

00:49:11,070 --> 00:49:15,240
development I'm a little bit of a

00:49:13,260 --> 00:49:16,650
software developer as well right so I do

00:49:15,240 --> 00:49:18,750
software development as well in my

00:49:16,650 --> 00:49:20,190
company and we also have a meet-up

00:49:18,750 --> 00:49:22,589
it's called security meetup where we

00:49:20,190 --> 00:49:25,260
talk about things like these but on a

00:49:22,589 --> 00:49:26,730
broader perspective I'm also also the

00:49:25,260 --> 00:49:27,599
founder of the sexual deaf conference so

00:49:26,730 --> 00:49:30,960
another conference

00:49:27,599 --> 00:49:32,750
I'm shortly presenting it's called sec

00:49:30,960 --> 00:49:35,369
for deaf it's a conference boot camp

00:49:32,750 --> 00:49:37,170
that's about security but specifically

00:49:35,369 --> 00:49:39,480
key is a bit specifically for software

00:49:37,170 --> 00:49:42,300
developers it's not latest and greatest

00:49:39,480 --> 00:49:44,460
acts it's getting the basics down at for

00:49:42,300 --> 00:49:46,020
software development right so make sure

00:49:44,460 --> 00:49:47,780
to follow at sector def if you're

00:49:46,020 --> 00:49:52,980
interested it's going to take place in

00:49:47,780 --> 00:49:57,530
February 24 to 27 2020 next year very

00:49:52,980 --> 00:50:00,690
close to here so at stable Vienna yeah

00:49:57,530 --> 00:50:03,900
cool that's it thank you very much

00:50:00,690 --> 00:50:03,900

YouTube URL: https://www.youtube.com/watch?v=GaJ71V28woY


