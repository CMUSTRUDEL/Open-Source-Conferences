Title: Ask Apollo Anything with Ben Newman and Jenn Creighton at Apollo
Publication date: 2020-11-18
Playlist: Apollo Day focused on React
Description: 
	
Captions: 
	00:00:00,210 --> 00:00:06,469
[Music]

00:00:07,279 --> 00:00:12,000
so how is everybody doing today how have

00:00:08,639 --> 00:00:12,000
you been enjoying the conference so far

00:00:12,320 --> 00:00:16,160
good it's great yeah it's been really

00:00:14,559 --> 00:00:17,920
wonderful i'm really excited to see

00:00:16,160 --> 00:00:21,680
everyone's questions

00:00:17,920 --> 00:00:25,680
awesome i am checking in right now

00:00:21,680 --> 00:00:27,439
for our q a

00:00:25,680 --> 00:00:28,560
um i'm gonna ask a question myself i'm

00:00:27,439 --> 00:00:29,199
not even gonna wait for anybody else to

00:00:28,560 --> 00:00:32,000
come in

00:00:29,199 --> 00:00:33,600
um how do you both like working on the

00:00:32,000 --> 00:00:34,480
apollo team how have you enjoyed you

00:00:33,600 --> 00:00:36,480
know i know it's

00:00:34,480 --> 00:00:38,239
not the the largest team i know everyone

00:00:36,480 --> 00:00:40,480
is really close how do you guys feel

00:00:38,239 --> 00:00:44,000
about you know just the environment and

00:00:40,480 --> 00:00:45,520
kind of working on the tools that you do

00:00:44,000 --> 00:00:47,840
let ben start because he's been there

00:00:45,520 --> 00:00:51,039
the longest

00:00:47,840 --> 00:00:51,840
well um let me say it was definitely a

00:00:51,039 --> 00:00:54,399
trip to

00:00:51,840 --> 00:00:55,680
watch scott earlier talk about uh the

00:00:54,399 --> 00:00:56,480
application that they've built with

00:00:55,680 --> 00:01:00,079
meteor

00:00:56,480 --> 00:01:01,440
and apparently um you know persistently

00:01:00,079 --> 00:01:04,000
kept up to date over

00:01:01,440 --> 00:01:05,199
many years uh because as as you may know

00:01:04,000 --> 00:01:07,200
uh this company got

00:01:05,199 --> 00:01:08,960
started as a javascript framework

00:01:07,200 --> 00:01:10,640
company uh meteor was our product and i

00:01:08,960 --> 00:01:13,600
worked on that full-time along with

00:01:10,640 --> 00:01:14,640
everyone else at the company um so

00:01:13,600 --> 00:01:18,240
things have changed

00:01:14,640 --> 00:01:21,119
since then it does feel like a

00:01:18,240 --> 00:01:23,040
pivot to a totally different technology

00:01:21,119 --> 00:01:26,240
a different way of thinking about our

00:01:23,040 --> 00:01:28,000
role in the ecosystem um in a lot of

00:01:26,240 --> 00:01:30,560
ways but there are also a bunch of

00:01:28,000 --> 00:01:31,840
uh through lines that i i see on the

00:01:30,560 --> 00:01:33,920
implementation side

00:01:31,840 --> 00:01:35,360
especially and in terms of what we're

00:01:33,920 --> 00:01:38,479
trying to do so it's fun to

00:01:35,360 --> 00:01:42,000
sort of have gotten to uh

00:01:38,479 --> 00:01:44,960
go along for that ride awesome

00:01:42,000 --> 00:01:45,840
and i just joined uh back in april so

00:01:44,960 --> 00:01:49,119
i'm newer

00:01:45,840 --> 00:01:49,680
on the team and for me it's just a joy

00:01:49,119 --> 00:01:52,640
to work

00:01:49,680 --> 00:01:54,560
on open source for my day job um i'm

00:01:52,640 --> 00:01:57,600
really happy to also join

00:01:54,560 --> 00:01:58,560
uh you know a project that has so much

00:01:57,600 --> 00:02:00,640
impact

00:01:58,560 --> 00:02:03,439
and has already a really large community

00:02:00,640 --> 00:02:05,200
so that really matters to me

00:02:03,439 --> 00:02:07,439
yeah i'll tell you after being a part of

00:02:05,200 --> 00:02:09,440
graphql summit and now apollo day i've

00:02:07,439 --> 00:02:10,640
just seen such an amazing gathering of

00:02:09,440 --> 00:02:12,000
community and and

00:02:10,640 --> 00:02:13,280
uh you know i can't imagine how good

00:02:12,000 --> 00:02:15,680
that must feel to work for the company

00:02:13,280 --> 00:02:17,360
that you know is able to curate and and

00:02:15,680 --> 00:02:20,800
you know kind of feed all of the cool

00:02:17,360 --> 00:02:20,800
tools to such a great community

00:02:21,120 --> 00:02:24,959
so we look like we got our first

00:02:22,400 --> 00:02:26,160
question in um what is the thing in

00:02:24,959 --> 00:02:29,680
apollo client three

00:02:26,160 --> 00:02:29,680
that you are the most excited about

00:02:31,280 --> 00:02:40,160
uh i guess i'll go um

00:02:36,239 --> 00:02:41,200
i wanted to well

00:02:40,160 --> 00:02:43,680
there's a whole bunch of sort of

00:02:41,200 --> 00:02:46,959
interlocking things um

00:02:43,680 --> 00:02:48,640
but one of the the points that

00:02:46,959 --> 00:02:50,800
i want to you know communicate at any

00:02:48,640 --> 00:02:52,800
opportunity that i have is that

00:02:50,800 --> 00:02:54,000
we've sort of created a new

00:02:52,800 --> 00:02:57,040
configuration

00:02:54,000 --> 00:02:58,800
api and in some ways the whatever

00:02:57,040 --> 00:03:01,519
you were doing before to achieve the

00:02:58,800 --> 00:03:05,760
same goal whether it was using

00:03:01,519 --> 00:03:08,000
the connection directive or um

00:03:05,760 --> 00:03:09,280
any number of sort of apollo client two

00:03:08,000 --> 00:03:12,400
uh esque

00:03:09,280 --> 00:03:14,480
configuration apis uh

00:03:12,400 --> 00:03:16,080
in switching to apollo client three it

00:03:14,480 --> 00:03:18,159
may it may just feel like uh you know

00:03:16,080 --> 00:03:20,080
swapping one thing out for another

00:03:18,159 --> 00:03:23,120
but something else is going on there

00:03:20,080 --> 00:03:25,680
which is that you're now able to define

00:03:23,120 --> 00:03:26,480
that logic in just like one place in

00:03:25,680 --> 00:03:28,959
your code

00:03:26,480 --> 00:03:29,599
and that means that you like benefit

00:03:28,959 --> 00:03:31,599
every time

00:03:29,599 --> 00:03:33,920
you make an improvement to that that one

00:03:31,599 --> 00:03:34,799
implementation of say a merge function

00:03:33,920 --> 00:03:37,680
for an important

00:03:34,799 --> 00:03:38,480
paginated field and that's actually a

00:03:37,680 --> 00:03:40,640
like a

00:03:38,480 --> 00:03:42,000
a big step forward uh even even though

00:03:40,640 --> 00:03:43,599
the migration may feel

00:03:42,000 --> 00:03:45,760
tedious the the thing that you end up

00:03:43,599 --> 00:03:47,120
with is more centralized and more

00:03:45,760 --> 00:03:50,239
declarative

00:03:47,120 --> 00:03:52,400
so that's a big concept that uh

00:03:50,239 --> 00:03:54,400
i'm excited about and hope to get other

00:03:52,400 --> 00:03:57,040
people excited about

00:03:54,400 --> 00:03:57,840
very cool yeah i really enjoyed that i

00:03:57,040 --> 00:03:59,360
would say also

00:03:57,840 --> 00:04:01,840
i was really excited about reactive

00:03:59,360 --> 00:04:02,480
variables for local state management it

00:04:01,840 --> 00:04:04,400
just makes

00:04:02,480 --> 00:04:05,599
a lot more sense it's been really easy

00:04:04,400 --> 00:04:07,680
to use

00:04:05,599 --> 00:04:09,599
um i've been using apollo client in like

00:04:07,680 --> 00:04:11,920
little test applications and such

00:04:09,599 --> 00:04:14,159
since i joined the team and that's just

00:04:11,920 --> 00:04:15,760
been like really fun

00:04:14,159 --> 00:04:17,280
the most fun part of open source right

00:04:15,760 --> 00:04:19,199
is getting to build it and then just run

00:04:17,280 --> 00:04:22,320
it into an app and

00:04:19,199 --> 00:04:23,759
fingers crossed to the best there these

00:04:22,320 --> 00:04:26,560
questions are pouring in awesome

00:04:23,759 --> 00:04:28,240
i've never used graphql at all when do i

00:04:26,560 --> 00:04:32,320
know when to add it to my project

00:04:28,240 --> 00:04:32,320
and can i add it to a simple to-do app

00:04:35,919 --> 00:04:41,280
well um i would

00:04:39,919 --> 00:04:43,520
you know when you're when you're

00:04:41,280 --> 00:04:45,360
programming for the web uh or any sort

00:04:43,520 --> 00:04:46,960
of client-side development even if

00:04:45,360 --> 00:04:48,960
that's like a mobile

00:04:46,960 --> 00:04:51,120
platform that's not javascript or the

00:04:48,960 --> 00:04:52,880
web um

00:04:51,120 --> 00:04:54,800
you've got this very important task at

00:04:52,880 --> 00:04:56,320
the beginning of everything where you

00:04:54,800 --> 00:04:58,320
you just need all of the data that

00:04:56,320 --> 00:05:00,880
you're going to display and you need to

00:04:58,320 --> 00:05:04,400
get it as quickly as possible so

00:05:00,880 --> 00:05:07,919
you know the best way to do that is in

00:05:04,400 --> 00:05:09,840
a single request and you can run into

00:05:07,919 --> 00:05:11,039
problems if that single request is

00:05:09,840 --> 00:05:12,240
fetching a lot more data than you

00:05:11,039 --> 00:05:15,280
actually need

00:05:12,240 --> 00:05:18,160
um so graphql is great for

00:05:15,280 --> 00:05:19,680
for that sort of you know page load time

00:05:18,160 --> 00:05:22,560
uh

00:05:19,680 --> 00:05:24,000
data loading um especially if you have

00:05:22,560 --> 00:05:25,919
problems with over fetching

00:05:24,000 --> 00:05:27,919
um it's also great if what you actually

00:05:25,919 --> 00:05:28,400
have is a rest api behind all of that

00:05:27,919 --> 00:05:31,600
you can

00:05:28,400 --> 00:05:31,919
stand up a graphql server in front of

00:05:31,600 --> 00:05:34,560
that

00:05:31,919 --> 00:05:35,759
and um not have to like swap out your

00:05:34,560 --> 00:05:37,840
entire stack

00:05:35,759 --> 00:05:39,199
right away so i would i would say it's

00:05:37,840 --> 00:05:42,800
incrementally adaptable

00:05:39,199 --> 00:05:45,680
um but yeah page load performance

00:05:42,800 --> 00:05:46,479
is is an important part um we're going a

00:05:45,680 --> 00:05:48,639
little bit further

00:05:46,479 --> 00:05:49,600
i i would say with apollo client in the

00:05:48,639 --> 00:05:51,680
sense that

00:05:49,600 --> 00:05:52,800
the client is actually taking those

00:05:51,680 --> 00:05:56,000
results that data

00:05:52,800 --> 00:05:58,400
turning it back into a graph so to speak

00:05:56,000 --> 00:05:59,039
on the client and then fielding a whole

00:05:58,400 --> 00:06:01,120
bunch of

00:05:59,039 --> 00:06:02,319
different related questions based on the

00:06:01,120 --> 00:06:05,199
contents of that

00:06:02,319 --> 00:06:06,400
graph representation and we hope that

00:06:05,199 --> 00:06:08,000
that's going to unlock

00:06:06,400 --> 00:06:09,759
a lot of opportunity for you know

00:06:08,000 --> 00:06:13,440
reactive programming and

00:06:09,759 --> 00:06:15,199
uh single-page rich web applications and

00:06:13,440 --> 00:06:17,680
mobile applications

00:06:15,199 --> 00:06:19,680
so it's not just about the page load

00:06:17,680 --> 00:06:21,120
time but i would say that's often

00:06:19,680 --> 00:06:23,600
you know one of the hooks that gets

00:06:21,120 --> 00:06:26,000
people into graphql

00:06:23,600 --> 00:06:26,000
awesome

00:06:26,639 --> 00:06:30,479
yeah i think one of the uh things for me

00:06:28,880 --> 00:06:31,600
that's always a great selling point and

00:06:30,479 --> 00:06:33,120
one of the things that i always tried to

00:06:31,600 --> 00:06:34,000
push when i was uh trying to bring it

00:06:33,120 --> 00:06:36,479
into

00:06:34,000 --> 00:06:37,919
the workplace was how easy it was to

00:06:36,479 --> 00:06:38,880
understand the data that you're working

00:06:37,919 --> 00:06:40,720
with right like

00:06:38,880 --> 00:06:42,160
with a rest endpoint you have to you

00:06:40,720 --> 00:06:43,600
know bog

00:06:42,160 --> 00:06:45,919
through a bunch of the data that you're

00:06:43,600 --> 00:06:47,199
getting back and then construct the the

00:06:45,919 --> 00:06:48,560
kind of idea of

00:06:47,199 --> 00:06:50,479
okay i'm going to take this data and put

00:06:48,560 --> 00:06:52,240
it in the ui with graphql

00:06:50,479 --> 00:06:54,160
you know you can even speak to

00:06:52,240 --> 00:06:55,360
non-technical folks and and be like hey

00:06:54,160 --> 00:06:56,639
look you know bring it to your design

00:06:55,360 --> 00:06:58,000
and be like hey look these are the

00:06:56,639 --> 00:06:59,440
these are the data points in which i'm

00:06:58,000 --> 00:07:00,960
going to be bringing in you know how do

00:06:59,440 --> 00:07:02,880
we structure the ui around this and it

00:07:00,960 --> 00:07:05,280
just is a very easily readable

00:07:02,880 --> 00:07:07,199
kind of structure to share around your

00:07:05,280 --> 00:07:08,720
team and to share with non-technical

00:07:07,199 --> 00:07:12,240
folks and i think that for me is

00:07:08,720 --> 00:07:12,240
has always been a huge selling point of

00:07:14,840 --> 00:07:18,720
graphql

00:07:16,240 --> 00:07:18,720
let's see

00:07:20,080 --> 00:07:23,199
jen i know you've been doing a lot of

00:07:21,360 --> 00:07:25,120
work on the ac dev tools

00:07:23,199 --> 00:07:26,960
uh what has it been like to take on that

00:07:25,120 --> 00:07:29,199
project and what excites you about those

00:07:26,960 --> 00:07:31,520
dev tools the most

00:07:29,199 --> 00:07:32,880
yeah so it's what i've been working on

00:07:31,520 --> 00:07:33,520
most of the time that i've been on the

00:07:32,880 --> 00:07:37,120
team

00:07:33,520 --> 00:07:39,360
and part of that has been

00:07:37,120 --> 00:07:40,800
learning how to build dev tools which is

00:07:39,360 --> 00:07:43,440
a whole new

00:07:40,800 --> 00:07:44,000
you know space for me and has been a lot

00:07:43,440 --> 00:07:46,240
of fun

00:07:44,000 --> 00:07:47,520
but also a bit headachy there's a lot of

00:07:46,240 --> 00:07:50,720
hoops that you have to

00:07:47,520 --> 00:07:52,479
jump through to get things working

00:07:50,720 --> 00:07:54,160
and one of the things i wanted to look

00:07:52,479 --> 00:07:55,520
at when we started to

00:07:54,160 --> 00:07:58,240
think about what we wanted to do with

00:07:55,520 --> 00:08:01,120
the devtools was how do we make it

00:07:58,240 --> 00:08:03,280
so that one we can expand on the

00:08:01,120 --> 00:08:06,240
devtools more easily in the future

00:08:03,280 --> 00:08:08,240
and give you all better access to tools

00:08:06,240 --> 00:08:10,000
that you want and need

00:08:08,240 --> 00:08:11,759
and then two how do i make it so that

00:08:10,000 --> 00:08:14,400
people in the community can come

00:08:11,759 --> 00:08:16,080
contribute more easily to the dev tools

00:08:14,400 --> 00:08:16,800
because just by nature of like having to

00:08:16,080 --> 00:08:19,360
deal with

00:08:16,800 --> 00:08:20,879
the browser and the browser apis it can

00:08:19,360 --> 00:08:22,080
really be a struggle to understand

00:08:20,879 --> 00:08:24,720
what's going on

00:08:22,080 --> 00:08:25,360
so that's been a large part of my focus

00:08:24,720 --> 00:08:27,759
and

00:08:25,360 --> 00:08:29,120
they're coming along great we are you

00:08:27,759 --> 00:08:31,919
know hoping to have

00:08:29,120 --> 00:08:32,240
an early uh release for people to check

00:08:31,919 --> 00:08:34,719
out

00:08:32,240 --> 00:08:36,000
uh hopefully sometime in december um and

00:08:34,719 --> 00:08:39,039
i would love to have more people like

00:08:36,000 --> 00:08:40,800
come and help me out on the project

00:08:39,039 --> 00:08:42,240
awesome and this is totally out of left

00:08:40,800 --> 00:08:44,240
field this isn't a question um

00:08:42,240 --> 00:08:45,920
what do you you know what would you say

00:08:44,240 --> 00:08:46,880
to those who are looking to contribute

00:08:45,920 --> 00:08:48,640
you know what are the

00:08:46,880 --> 00:08:50,399
you know i feel like especially for me

00:08:48,640 --> 00:08:51,360
who just started as a maintainer myself

00:08:50,399 --> 00:08:53,680
of open source

00:08:51,360 --> 00:08:55,519
it's so hard to figure out the best ways

00:08:53,680 --> 00:08:56,959
to onboard and things like that you know

00:08:55,519 --> 00:08:58,320
what would you say to somebody who may

00:08:56,959 --> 00:09:00,240
be new to open source that

00:08:58,320 --> 00:09:01,760
you know looks at apollo client and and

00:09:00,240 --> 00:09:03,600
they get a little bit intimidated by the

00:09:01,760 --> 00:09:05,600
breadth of you know what dev tools can

00:09:03,600 --> 00:09:08,000
be

00:09:05,600 --> 00:09:09,600
yeah it's definitely it can be

00:09:08,000 --> 00:09:12,000
overwhelming to look at a new

00:09:09,600 --> 00:09:12,880
code base i would say if you're really

00:09:12,000 --> 00:09:15,760
interested

00:09:12,880 --> 00:09:17,200
in contributing to a project one of the

00:09:15,760 --> 00:09:19,839
first things you can do is just

00:09:17,200 --> 00:09:20,800
take down the code base yourself clone

00:09:19,839 --> 00:09:22,959
it look through it

00:09:20,800 --> 00:09:24,160
get used to it which is by the way a

00:09:22,959 --> 00:09:25,839
skill that's going to help you for the

00:09:24,160 --> 00:09:27,680
rest of your life as an engineer

00:09:25,839 --> 00:09:28,959
um definitely it's a very big thing to

00:09:27,680 --> 00:09:30,880
come into a code base and be able to

00:09:28,959 --> 00:09:33,600
figure out how it works

00:09:30,880 --> 00:09:35,200
pretty quickly and to be honest also

00:09:33,600 --> 00:09:37,040
figuring out the rough patches

00:09:35,200 --> 00:09:38,399
um i've been working on this project for

00:09:37,040 --> 00:09:40,240
a while now

00:09:38,399 --> 00:09:42,080
um so when people come on board to help

00:09:40,240 --> 00:09:42,399
me i'm gonna be very interested to hear

00:09:42,080 --> 00:09:44,000
like

00:09:42,399 --> 00:09:45,600
what what can i make better about the

00:09:44,000 --> 00:09:47,200
developer experience for you to get

00:09:45,600 --> 00:09:49,600
started how can i make it easier for

00:09:47,200 --> 00:09:52,480
other people to then come on board

00:09:49,600 --> 00:09:53,920
that's awesome um we're gonna just run

00:09:52,480 --> 00:09:54,399
right into another question for you jen

00:09:53,920 --> 00:09:56,000
uh

00:09:54,399 --> 00:09:58,320
how is the dev tools refactoring coming

00:09:56,000 --> 00:10:00,160
along it's coming along great

00:09:58,320 --> 00:10:02,480
uh like i mentioned we are hoping to

00:10:00,160 --> 00:10:05,360
have uh an early release for y'all to

00:10:02,480 --> 00:10:07,440
play around with in december

00:10:05,360 --> 00:10:08,880
and then a more formal release uh next

00:10:07,440 --> 00:10:10,800
year early because it's going to take

00:10:08,880 --> 00:10:12,720
some time to work out some bugs

00:10:10,800 --> 00:10:14,720
um one of the really difficult things

00:10:12,720 --> 00:10:16,880
about building devtools

00:10:14,720 --> 00:10:18,800
is you don't know all the types of

00:10:16,880 --> 00:10:20,880
applications it's going to be used on

00:10:18,800 --> 00:10:22,320
and what kind of errors could crop up so

00:10:20,880 --> 00:10:24,640
it works really well in my test

00:10:22,320 --> 00:10:26,959
applications i just used it on

00:10:24,640 --> 00:10:27,920
apollo studio the other day it's working

00:10:26,959 --> 00:10:29,600
really well but

00:10:27,920 --> 00:10:31,120
who knows if someone else has a

00:10:29,600 --> 00:10:33,120
different configuration

00:10:31,120 --> 00:10:34,640
i'll i'll need to adjust it but it's as

00:10:33,120 --> 00:10:34,960
long as it works on your machine you

00:10:34,640 --> 00:10:39,120
know

00:10:34,960 --> 00:10:41,920
[Laughter]

00:10:39,120 --> 00:10:42,880
um we do still have some older version

00:10:41,920 --> 00:10:45,440
of devtools

00:10:42,880 --> 00:10:46,000
uh but that works as more or less as

00:10:45,440 --> 00:10:49,040
well as it ever

00:10:46,000 --> 00:10:50,079
did so if you download that and try it

00:10:49,040 --> 00:10:52,320
out it can be useful

00:10:50,079 --> 00:10:54,000
uh but it's not what jenna's working on

00:10:52,320 --> 00:10:55,440
yeah it's a great way to see

00:10:54,000 --> 00:10:57,200
the cache and see some of your queries

00:10:55,440 --> 00:10:59,920
mutations but it it

00:10:57,200 --> 00:11:00,720
needs some some love from an engineer so

00:10:59,920 --> 00:11:02,160
that's what i'm doing

00:11:00,720 --> 00:11:04,320
i'm i'm sure it's getting that love

00:11:02,160 --> 00:11:07,120
right now

00:11:04,320 --> 00:11:08,880
cool um for ben uh are there some good

00:11:07,120 --> 00:11:11,839
practices for doing persistence with

00:11:08,880 --> 00:11:15,200
apollo client three

00:11:11,839 --> 00:11:19,120
uh sure it's a great question uh

00:11:15,200 --> 00:11:22,560
so my my tl dr recommendation

00:11:19,120 --> 00:11:24,240
is that there was an is a package um

00:11:22,560 --> 00:11:26,560
well it used to be called apollo dash

00:11:24,240 --> 00:11:30,079
cache dash persist

00:11:26,560 --> 00:11:31,760
on npm um and the the main tip here is

00:11:30,079 --> 00:11:32,320
that in updating it to a call of client

00:11:31,760 --> 00:11:34,640
three they

00:11:32,320 --> 00:11:35,760
decided to change the the package name

00:11:34,640 --> 00:11:38,640
to apollo 3

00:11:35,760 --> 00:11:40,000
dash cache dash persist so you know uh

00:11:38,640 --> 00:11:41,760
you you may have been able to get the

00:11:40,000 --> 00:11:43,519
old package to continue working if you

00:11:41,760 --> 00:11:45,200
had been using it but

00:11:43,519 --> 00:11:46,800
the the work that they've done to make

00:11:45,200 --> 00:11:50,079
it work with the public client three is

00:11:46,800 --> 00:11:53,440
under the new package name um so that

00:11:50,079 --> 00:11:53,920
is uh it's under our github but it is

00:11:53,440 --> 00:11:57,279
also

00:11:53,920 --> 00:11:57,839
a community driven uh project and the

00:11:57,279 --> 00:12:00,639
the

00:11:57,839 --> 00:12:01,920
people who are maintaining it um we

00:12:00,639 --> 00:12:04,320
we're in contact with them

00:12:01,920 --> 00:12:05,360
we have let them know that you know

00:12:04,320 --> 00:12:07,760
ultimately

00:12:05,360 --> 00:12:08,639
probably before apollo client four that

00:12:07,760 --> 00:12:11,040
is along the

00:12:08,639 --> 00:12:12,000
three-point whatever minor release line

00:12:11,040 --> 00:12:15,360
we want to bring

00:12:12,000 --> 00:12:15,839
uh persistence into the core of apollo

00:12:15,360 --> 00:12:18,480
client

00:12:15,839 --> 00:12:19,360
as as an apollo client sort of general

00:12:18,480 --> 00:12:24,320
feature

00:12:19,360 --> 00:12:26,320
um and the the appeal of that is that uh

00:12:24,320 --> 00:12:27,680
we would be able to you know let let you

00:12:26,320 --> 00:12:30,959
provide some sort of plug-in

00:12:27,680 --> 00:12:31,839
that um abstracts away the the specific

00:12:30,959 --> 00:12:33,440
device

00:12:31,839 --> 00:12:35,120
storage api that you might be using

00:12:33,440 --> 00:12:36,560
depending on whether you're in a web

00:12:35,120 --> 00:12:40,240
browser or you're in

00:12:36,560 --> 00:12:43,519
react native or or what have you um yeah

00:12:40,240 --> 00:12:43,839
and uh you know once you provide us with

00:12:43,519 --> 00:12:47,440
that

00:12:43,839 --> 00:12:50,480
we can sort of uh

00:12:47,440 --> 00:12:51,120
do everything else um in in a general

00:12:50,480 --> 00:12:53,440
way

00:12:51,120 --> 00:12:55,279
for example if you have been using

00:12:53,440 --> 00:12:57,760
reactive variables

00:12:55,279 --> 00:12:59,040
with apollo client 3 so far you may have

00:12:57,760 --> 00:13:02,079
noticed that they are just

00:12:59,040 --> 00:13:03,760
an in-memory figment of the cache's

00:13:02,079 --> 00:13:05,360
imagination they don't get persisted

00:13:03,760 --> 00:13:06,880
along with the rest of the cache data

00:13:05,360 --> 00:13:08,320
if you had set something like that up so

00:13:06,880 --> 00:13:09,200
we would want to you know make sure that

00:13:08,320 --> 00:13:11,600
we hooked up

00:13:09,200 --> 00:13:13,519
reactive variables into that persistence

00:13:11,600 --> 00:13:14,959
system in the same way so that

00:13:13,519 --> 00:13:17,040
you know by the time you start doing any

00:13:14,959 --> 00:13:18,399
graphql stuff anything that

00:13:17,040 --> 00:13:21,120
you know could have been loaded from

00:13:18,399 --> 00:13:23,839
persistent storage will have been loaded

00:13:21,120 --> 00:13:24,399
um so in the meantime apollo 3 dash

00:13:23,839 --> 00:13:27,839
cache

00:13:24,399 --> 00:13:29,600
dash persist is uh the place to go and

00:13:27,839 --> 00:13:31,040
you know most most people who are doing

00:13:29,600 --> 00:13:32,320
persistence with

00:13:31,040 --> 00:13:34,160
apollo client i think are using that

00:13:32,320 --> 00:13:37,279
package so we will

00:13:34,160 --> 00:13:39,440
for sure have a have a good um you know

00:13:37,279 --> 00:13:41,199
migration path from from using that when

00:13:39,440 --> 00:13:43,440
the time comes

00:13:41,199 --> 00:13:44,959
awesome we're just going to jump into

00:13:43,440 --> 00:13:47,120
another question for you ben

00:13:44,959 --> 00:13:50,639
are there any plans to improve the mock

00:13:47,120 --> 00:13:54,320
provider for testing in the near future

00:13:50,639 --> 00:13:56,560
um let's see i i feel the need to be

00:13:54,320 --> 00:13:58,560
honest that that work is not um

00:13:56,560 --> 00:14:02,800
specifically scheduled but but also

00:13:58,560 --> 00:14:06,480
that almost nothing that we've done in

00:14:02,800 --> 00:14:08,720
the the major new version three uh

00:14:06,480 --> 00:14:10,240
involved any improvements to those apis

00:14:08,720 --> 00:14:12,480
so they are

00:14:10,240 --> 00:14:13,760
a little bit out in the cold uh unloved

00:14:12,480 --> 00:14:16,720
um and

00:14:13,760 --> 00:14:17,519
desperately in need of not just a revamp

00:14:16,720 --> 00:14:20,639
but a

00:14:17,519 --> 00:14:22,240
rewrite um i would

00:14:20,639 --> 00:14:23,920
i don't know i i could i could go into a

00:14:22,240 --> 00:14:25,360
laundry list of uh things that i don't

00:14:23,920 --> 00:14:28,880
like about mock provider

00:14:25,360 --> 00:14:30,079
and mock link one saving grace i suppose

00:14:28,880 --> 00:14:32,800
is that they are both

00:14:30,079 --> 00:14:34,320
uh sort of built around the concept of

00:14:32,800 --> 00:14:37,519
an apollo link

00:14:34,320 --> 00:14:39,519
which is our network abstraction so

00:14:37,519 --> 00:14:41,440
you know if if you really wanted to you

00:14:39,519 --> 00:14:44,480
know dig in and like

00:14:41,440 --> 00:14:47,360
build a library or a tool yourself

00:14:44,480 --> 00:14:47,839
you're not stuck with mock provider mock

00:14:47,360 --> 00:14:50,000
link

00:14:47,839 --> 00:14:51,920
um you can do it sort of in terms of the

00:14:50,000 --> 00:14:52,880
lower level apollo link api which is

00:14:51,920 --> 00:14:55,120
something we

00:14:52,880 --> 00:14:57,600
um don't have any intentions of changing

00:14:55,120 --> 00:14:59,920
because it's not because it's uh

00:14:57,600 --> 00:15:00,639
you know been neglected but because it

00:14:59,920 --> 00:15:02,800
works really well

00:15:00,639 --> 00:15:04,480
and has been a great abstraction for us

00:15:02,800 --> 00:15:07,680
to treat as a black box

00:15:04,480 --> 00:15:08,560
from the perspective of apollo client so

00:15:07,680 --> 00:15:10,560
apollo link

00:15:08,560 --> 00:15:12,399
can solve some of those use cases but

00:15:10,560 --> 00:15:13,600
you know for the same reasons that

00:15:12,399 --> 00:15:16,320
people want to use

00:15:13,600 --> 00:15:18,480
uh mock provider um in the first place

00:15:16,320 --> 00:15:21,839
we owe it to them to

00:15:18,480 --> 00:15:23,680
make those those tools work better

00:15:21,839 --> 00:15:25,120
awesome and yeah i'm sure the community

00:15:23,680 --> 00:15:26,320
appreciates the transparency it's

00:15:25,120 --> 00:15:28,160
definitely one of the things that i feel

00:15:26,320 --> 00:15:29,759
like is is really hard is to

00:15:28,160 --> 00:15:31,360
uh you know have all of these things

00:15:29,759 --> 00:15:33,440
lined up and know that there's something

00:15:31,360 --> 00:15:35,680
that that needs to get touched but just

00:15:33,440 --> 00:15:37,199
isn't you know at that point yet of of

00:15:35,680 --> 00:15:39,839
hitting you know production so

00:15:37,199 --> 00:15:40,320
i appreciate as always the transparency

00:15:39,839 --> 00:15:43,199
um

00:15:40,320 --> 00:15:43,839
jen as a big user of apollo client dev

00:15:43,199 --> 00:15:45,680
tools

00:15:43,839 --> 00:15:47,199
i'm very excited for the refactor will

00:15:45,680 --> 00:15:51,199
there be any additional

00:15:47,199 --> 00:15:51,199
functionality to the new version as well

00:15:51,519 --> 00:15:56,800
when we do the release there will be

00:15:54,959 --> 00:15:59,199
new ui and it's definitely going to be

00:15:56,800 --> 00:16:00,959
just a better experience overall

00:15:59,199 --> 00:16:03,360
but the new functionality is going to

00:16:00,959 --> 00:16:05,199
come probably a little bit later

00:16:03,360 --> 00:16:06,720
what we want to do right now is just

00:16:05,199 --> 00:16:09,120
release it with parody

00:16:06,720 --> 00:16:10,720
with the older version but make it a

00:16:09,120 --> 00:16:11,680
completely new code base it's being

00:16:10,720 --> 00:16:14,720
completely

00:16:11,680 --> 00:16:17,120
refactored so that we can build

00:16:14,720 --> 00:16:19,519
new features on top of it much more

00:16:17,120 --> 00:16:21,360
easily and much quicker

00:16:19,519 --> 00:16:22,959
so if you have ideas about you know

00:16:21,360 --> 00:16:25,120
things that you want

00:16:22,959 --> 00:16:26,560
i want to hear that definitely like you

00:16:25,120 --> 00:16:27,040
can go to the repo you can open up an

00:16:26,560 --> 00:16:29,279
issue

00:16:27,040 --> 00:16:31,120
and say it's a feature that you'd like

00:16:29,279 --> 00:16:32,560
and i have a whole list of things that

00:16:31,120 --> 00:16:33,839
in the future i'd like to put in the dev

00:16:32,560 --> 00:16:36,639
tools we're getting

00:16:33,839 --> 00:16:38,320
a lot of feedback from our internal

00:16:36,639 --> 00:16:40,800
teams as well

00:16:38,320 --> 00:16:42,000
so new features will be coming but right

00:16:40,800 --> 00:16:44,800
when it's released

00:16:42,000 --> 00:16:47,519
uh next year it will probably be similar

00:16:44,800 --> 00:16:49,600
functionality

00:16:47,519 --> 00:16:52,000
awesome yeah i'm sure everyone's excited

00:16:49,600 --> 00:16:54,160
to see that new ui for sure

00:16:52,000 --> 00:16:55,600
um it looks really nice it's very purple

00:16:54,160 --> 00:16:57,519
right now but we'll see

00:16:55,600 --> 00:16:58,800
i was i like purple purple is definitely

00:16:57,519 --> 00:16:59,680
one of those colors that like i feel

00:16:58,800 --> 00:17:01,279
like every time i

00:16:59,680 --> 00:17:02,800
i get onto something and there's not a

00:17:01,279 --> 00:17:04,000
dark mode with like some type of purple

00:17:02,800 --> 00:17:07,280
tint i'm immediately depressed

00:17:04,000 --> 00:17:09,760
so i'm excited to see that myself um ben

00:17:07,280 --> 00:17:12,079
uh what is the upgrade path to apollo 3

00:17:09,760 --> 00:17:13,919
to replace async local resolvers

00:17:12,079 --> 00:17:15,600
it is possible to use reactive variables

00:17:13,919 --> 00:17:16,319
to achieve a similar effect and is the

00:17:15,600 --> 00:17:19,600
experience

00:17:16,319 --> 00:17:23,280
much different

00:17:19,600 --> 00:17:27,120
um wow what a great question

00:17:23,280 --> 00:17:30,880
um so

00:17:27,120 --> 00:17:31,600
we we we had a lot of uh decisions to

00:17:30,880 --> 00:17:33,840
make about

00:17:31,600 --> 00:17:35,039
um which apis we were going to try to

00:17:33,840 --> 00:17:37,840
improve and whether

00:17:35,039 --> 00:17:38,559
we thought the improvement um was you

00:17:37,840 --> 00:17:40,960
know so

00:17:38,559 --> 00:17:42,080
complete that we could just go ahead and

00:17:40,960 --> 00:17:44,240
get rid of the

00:17:42,080 --> 00:17:46,480
the old api we did that with things like

00:17:44,240 --> 00:17:49,280
cache redirects and

00:17:46,480 --> 00:17:50,559
um the heuristic fragment matcher the

00:17:49,280 --> 00:17:53,039
whole fragment matcher

00:17:50,559 --> 00:17:53,679
api um because we thought in that

00:17:53,039 --> 00:17:55,760
example

00:17:53,679 --> 00:17:58,000
the possible types configuration you

00:17:55,760 --> 00:18:00,640
know provided

00:17:58,000 --> 00:18:01,919
literally everything you needed um but

00:18:00,640 --> 00:18:03,840
one of the

00:18:01,919 --> 00:18:06,320
one of the steps we might have liked to

00:18:03,840 --> 00:18:09,760
have taken uh but decided not to

00:18:06,320 --> 00:18:12,080
was um that we we decided not to remove

00:18:09,760 --> 00:18:13,440
the the local state abstraction in

00:18:12,080 --> 00:18:16,080
apollo client 3

00:18:13,440 --> 00:18:16,480
and you know i i think when i gave a

00:18:16,080 --> 00:18:19,520
talk

00:18:16,480 --> 00:18:20,160
at summit our graphql summit uh two

00:18:19,520 --> 00:18:21,760
years ago

00:18:20,160 --> 00:18:23,679
i may have made it seem like we were

00:18:21,760 --> 00:18:25,440
planning to defecate that api

00:18:23,679 --> 00:18:27,600
and it still would be great if we felt

00:18:25,440 --> 00:18:29,840
like all the use cases that it serves

00:18:27,600 --> 00:18:30,640
are met by apollo client 3 but this is

00:18:29,840 --> 00:18:33,280
one of the

00:18:30,640 --> 00:18:34,080
um i don't want to call it an edge case

00:18:33,280 --> 00:18:37,120
because

00:18:34,080 --> 00:18:38,400
it's an important one the ability to

00:18:37,120 --> 00:18:41,280
return a promise

00:18:38,400 --> 00:18:42,000
from a local state resolver function was

00:18:41,280 --> 00:18:45,280
pretty useful

00:18:42,000 --> 00:18:47,919
uh at least in terms of the sort of

00:18:45,280 --> 00:18:49,679
uh you know logical behavior of the code

00:18:47,919 --> 00:18:53,760
in some other ways it's it's

00:18:49,679 --> 00:18:56,799
not that great because um if you're

00:18:53,760 --> 00:18:58,400
you know generating a promise for uh a

00:18:56,799 --> 00:19:00,640
single field within a single

00:18:58,400 --> 00:19:03,039
object uh you might think okay that's

00:19:00,640 --> 00:19:05,600
not too expensive but if suddenly

00:19:03,039 --> 00:19:07,840
uh you're doing that for um a whole list

00:19:05,600 --> 00:19:09,760
of objects that that have that field

00:19:07,840 --> 00:19:11,200
um there are just a couple of more

00:19:09,760 --> 00:19:14,000
dimensions that can explode

00:19:11,200 --> 00:19:14,480
you know combinatorially and having

00:19:14,000 --> 00:19:18,080
having

00:19:14,480 --> 00:19:19,520
the asynchronous um pauses like in the

00:19:18,080 --> 00:19:22,480
middle of the critical path

00:19:19,520 --> 00:19:24,240
of reading from the cache um has has

00:19:22,480 --> 00:19:27,600
caused some performance problems in

00:19:24,240 --> 00:19:31,120
in the past so uh very briefly the

00:19:27,600 --> 00:19:33,039
uh it is it is true as the question

00:19:31,120 --> 00:19:35,280
suggested that you can sort of

00:19:33,039 --> 00:19:38,880
approximate uh the behavior of

00:19:35,280 --> 00:19:41,200
an async local resolver with um a

00:19:38,880 --> 00:19:42,480
field policy read function that uses a

00:19:41,200 --> 00:19:44,640
reactive variable

00:19:42,480 --> 00:19:46,480
and the goal there is just to you know

00:19:44,640 --> 00:19:47,120
do the thing that returns the promise

00:19:46,480 --> 00:19:48,720
and

00:19:47,120 --> 00:19:51,039
uh when you get a result back from the

00:19:48,720 --> 00:19:52,559
promise set that as the value of the

00:19:51,039 --> 00:19:53,600
reactive variable and then you know

00:19:52,559 --> 00:19:56,799
everything will

00:19:53,600 --> 00:19:57,919
recompute um it's a little boilerplaty

00:19:56,799 --> 00:20:00,640
and i it's uh

00:19:57,919 --> 00:20:01,280
you know my goal in almost everything is

00:20:00,640 --> 00:20:03,520
to put

00:20:01,280 --> 00:20:05,280
nice easy-to-use abstractions around

00:20:03,520 --> 00:20:07,600
things and it's so tempting to

00:20:05,280 --> 00:20:09,679
abstract away that pattern but there are

00:20:07,600 --> 00:20:11,840
some important like opinionated

00:20:09,679 --> 00:20:13,280
application level questions that you

00:20:11,840 --> 00:20:16,480
have to answer so

00:20:13,280 --> 00:20:18,480
um you know right now what we're

00:20:16,480 --> 00:20:19,600
looking for is a good way to tell that

00:20:18,480 --> 00:20:20,960
story so that

00:20:19,600 --> 00:20:22,799
you don't have to think about it any

00:20:20,960 --> 00:20:24,240
deeper than you you really need to but

00:20:22,799 --> 00:20:26,559
you you do sort of understand what's

00:20:24,240 --> 00:20:29,039
going on uh behind the scenes

00:20:26,559 --> 00:20:30,000
uh especially if you're translating from

00:20:29,039 --> 00:20:32,320
an older

00:20:30,000 --> 00:20:34,720
uh local state resolver function to a

00:20:32,320 --> 00:20:36,960
read function

00:20:34,720 --> 00:20:38,559
however i i think there's a bunch of fun

00:20:36,960 --> 00:20:40,559
things that we can do to

00:20:38,559 --> 00:20:41,600
streamline that story and maybe even

00:20:40,559 --> 00:20:44,080
make it uh

00:20:41,600 --> 00:20:45,520
more of a black box so excited to get to

00:20:44,080 --> 00:20:48,799
that in

00:20:45,520 --> 00:20:50,640
the upcoming minor versions

00:20:48,799 --> 00:20:52,480
yeah it's always hard to like not want

00:20:50,640 --> 00:20:54,080
to sprinkle some more syntactic sugar on

00:20:52,480 --> 00:20:56,080
a process to make it just a little bit

00:20:54,080 --> 00:20:57,520
easier but then you fall into a trap of

00:20:56,080 --> 00:20:58,799
what is that going to do for the you

00:20:57,520 --> 00:21:00,640
know the apps that already use it and

00:20:58,799 --> 00:21:04,320
what does that upgrade path look like

00:21:00,640 --> 00:21:06,240
um so jen uh will the new version of dev

00:21:04,320 --> 00:21:07,919
tools work out of the box or

00:21:06,240 --> 00:21:09,679
will there need to be some kind of

00:21:07,919 --> 00:21:11,120
configuration and setup required in your

00:21:09,679 --> 00:21:14,799
code

00:21:11,120 --> 00:21:16,400
so just like the current devtools

00:21:14,799 --> 00:21:19,039
they'll work out of the box so it'll be

00:21:16,400 --> 00:21:20,080
a chrome or firefox extension you'll

00:21:19,039 --> 00:21:22,559
just need to add it

00:21:20,080 --> 00:21:23,600
and it should work in development mode

00:21:22,559 --> 00:21:25,679
out of the box

00:21:23,600 --> 00:21:27,039
for production you probably do need a

00:21:25,679 --> 00:21:29,039
little bit of adjustments but that's

00:21:27,039 --> 00:21:32,320
currently the case as well

00:21:29,039 --> 00:21:35,600
so none of that is going to be changing

00:21:32,320 --> 00:21:37,919
it's just that the current devtools

00:21:35,600 --> 00:21:39,120
we're a really small team we are spread

00:21:37,919 --> 00:21:41,679
out across projects

00:21:39,120 --> 00:21:43,200
and you know i joined in april and

00:21:41,679 --> 00:21:44,000
devtools has been my focus since i would

00:21:43,200 --> 00:21:47,600
say about

00:21:44,000 --> 00:21:49,520
july um so

00:21:47,600 --> 00:21:51,039
we're just like finally being able to

00:21:49,520 --> 00:21:51,919
like actually put someone on that

00:21:51,039 --> 00:21:55,200
project and

00:21:51,919 --> 00:21:56,240
really make it good for y'all um it was

00:21:55,200 --> 00:21:57,840
languishing

00:21:56,240 --> 00:22:00,000
because we're a small team so now it's

00:21:57,840 --> 00:22:01,440
getting love so it'll be very similar

00:22:00,000 --> 00:22:03,200
in in regards to how it worked

00:22:01,440 --> 00:22:04,400
previously with it being an extension

00:22:03,200 --> 00:22:07,440
being out of the box and

00:22:04,400 --> 00:22:09,600
and very little setup very cool and i

00:22:07,440 --> 00:22:10,880
i know you're excited to to put that out

00:22:09,600 --> 00:22:12,480
after getting onto the team and having

00:22:10,880 --> 00:22:14,240
some time to focus on it so i'm excited

00:22:12,480 --> 00:22:16,640
to see that

00:22:14,240 --> 00:22:17,600
uh ben dealing with pagination and cash

00:22:16,640 --> 00:22:19,520
is never easy

00:22:17,600 --> 00:22:22,000
uh i've heard of pagination helpers can

00:22:19,520 --> 00:22:25,200
you explain what those are

00:22:22,000 --> 00:22:27,120
sure so

00:22:25,200 --> 00:22:28,640
you you may have heard you know little

00:22:27,120 --> 00:22:31,679
fragments of of

00:22:28,640 --> 00:22:33,520
discussion in in talks or uh

00:22:31,679 --> 00:22:35,440
you know in a setting like this about

00:22:33,520 --> 00:22:37,440
field policies type policies if you

00:22:35,440 --> 00:22:39,120
watched laura's talk just before this

00:22:37,440 --> 00:22:40,159
then uh you got a lot of information

00:22:39,120 --> 00:22:43,280
about that

00:22:40,159 --> 00:22:46,480
um that may

00:22:43,280 --> 00:22:47,440
feel like sort of a a low level like

00:22:46,480 --> 00:22:49,840
power user

00:22:47,440 --> 00:22:51,120
api and if you feel that way you're

00:22:49,840 --> 00:22:54,159
you're not wrong

00:22:51,120 --> 00:22:56,480
it's it's our take on everything

00:22:54,159 --> 00:22:57,280
we thought you would need to implement

00:22:56,480 --> 00:22:59,200
uh

00:22:57,280 --> 00:23:00,400
fairly complicated patterns like

00:22:59,200 --> 00:23:02,080
pagination and

00:23:00,400 --> 00:23:03,919
i guess it's worth remembering that

00:23:02,080 --> 00:23:06,559
within graphql pagination is

00:23:03,919 --> 00:23:07,520
is not a first class concept it's just

00:23:06,559 --> 00:23:09,679
something that you

00:23:07,520 --> 00:23:10,720
can do and a lot of graphql servers do

00:23:09,679 --> 00:23:12,960
it uh

00:23:10,720 --> 00:23:13,919
using you know fields and field

00:23:12,960 --> 00:23:17,600
arguments and

00:23:13,919 --> 00:23:20,640
and lists right um and

00:23:17,600 --> 00:23:23,919
so instead of um

00:23:20,640 --> 00:23:26,799
you know standardizing on on one way of

00:23:23,919 --> 00:23:28,320
of thinking of pagination we sort of

00:23:26,799 --> 00:23:32,080
give you the building blocks to

00:23:28,320 --> 00:23:33,360
uh put together to uh work with any any

00:23:32,080 --> 00:23:35,520
kind of paginated fields

00:23:33,360 --> 00:23:36,960
that that you need to work with whether

00:23:35,520 --> 00:23:37,919
it's you know very simple like

00:23:36,960 --> 00:23:41,279
concatenation

00:23:37,919 --> 00:23:43,679
or um more complicated offset limit

00:23:41,279 --> 00:23:45,120
pagination or cursor-based uh i should

00:23:43,679 --> 00:23:47,600
also mention that we

00:23:45,120 --> 00:23:49,520
finally finally got around to publishing

00:23:47,600 --> 00:23:50,320
some new documentation there's a whole

00:23:49,520 --> 00:23:53,120
section

00:23:50,320 --> 00:23:54,000
just about pagination under the apollo

00:23:53,120 --> 00:23:56,240
client web

00:23:54,000 --> 00:23:57,200
react section of our docs so please

00:23:56,240 --> 00:24:00,799
please go read that

00:23:57,200 --> 00:24:02,000
uh it was felt really you know important

00:24:00,799 --> 00:24:05,039
to get that out there but

00:24:02,000 --> 00:24:08,640
pagination helpers specifically are

00:24:05,039 --> 00:24:09,840
some uh they they live in a at apollo

00:24:08,640 --> 00:24:11,679
slash client slash

00:24:09,840 --> 00:24:13,360
utilities that's where you would import

00:24:11,679 --> 00:24:14,320
them from and they're just functions

00:24:13,360 --> 00:24:17,919
that return

00:24:14,320 --> 00:24:19,440
a field policy with like key args and

00:24:17,919 --> 00:24:21,279
maybe a read function and a merge

00:24:19,440 --> 00:24:22,960
function um and

00:24:21,279 --> 00:24:24,559
if you happen to be using a kind of

00:24:22,960 --> 00:24:28,000
pagination that uh

00:24:24,559 --> 00:24:31,200
fits one of the use cases that um

00:24:28,000 --> 00:24:33,600
we're supporting as a first step then

00:24:31,200 --> 00:24:34,960
you may be able to get away with just uh

00:24:33,600 --> 00:24:37,120
calling one of those functions

00:24:34,960 --> 00:24:38,000
and assigning that as the field policy

00:24:37,120 --> 00:24:39,919
for your field so

00:24:38,000 --> 00:24:41,919
you you don't have to write the merge

00:24:39,919 --> 00:24:43,919
function but i would say it is important

00:24:41,919 --> 00:24:46,720
to like at least look through that code

00:24:43,919 --> 00:24:48,799
and see what exactly it's doing because

00:24:46,720 --> 00:24:50,559
there's a lot of dimensions of

00:24:48,799 --> 00:24:52,799
ways that you could write a field policy

00:24:50,559 --> 00:24:54,720
and if you need to you're absolutely

00:24:52,799 --> 00:24:55,919
welcome to just copy and paste that code

00:24:54,720 --> 00:24:58,240
and tweak it you know

00:24:55,919 --> 00:24:59,679
to do what you need it to do for your

00:24:58,240 --> 00:25:01,440
specific use case so

00:24:59,679 --> 00:25:02,880
i don't want people to think like if

00:25:01,440 --> 00:25:03,679
there's a little bit of a mismatch

00:25:02,880 --> 00:25:05,679
between

00:25:03,679 --> 00:25:07,360
what those helpers do and what they need

00:25:05,679 --> 00:25:10,240
that like that's a bug

00:25:07,360 --> 00:25:11,200
um you know they're more examples of how

00:25:10,240 --> 00:25:13,360
you could write

00:25:11,200 --> 00:25:14,400
increasingly complicated field policies

00:25:13,360 --> 00:25:18,080
than you know

00:25:14,400 --> 00:25:18,080
the only ones that you can possibly use

00:25:18,400 --> 00:25:21,600
yeah i think you had me immediately at

00:25:20,159 --> 00:25:22,570
copy and paste that's about half of my

00:25:21,600 --> 00:25:24,080
life at this point so

00:25:22,570 --> 00:25:27,440
[Laughter]

00:25:24,080 --> 00:25:31,520
um thank you cool uh let's see here

00:25:27,440 --> 00:25:31,520
they are pouring in um

00:25:32,000 --> 00:25:36,159
jen you mentioned no new features at

00:25:34,240 --> 00:25:39,279
release uh but is there anything that

00:25:36,159 --> 00:25:41,279
you would like to see added

00:25:39,279 --> 00:25:43,679
well there will be some new things

00:25:41,279 --> 00:25:45,440
they're just they're smaller features

00:25:43,679 --> 00:25:46,720
um for instance there's gonna be a light

00:25:45,440 --> 00:25:48,880
mode in a dark mode

00:25:46,720 --> 00:25:50,480
definitely i'm getting that for y'all i

00:25:48,880 --> 00:25:54,159
know you like your dark modes

00:25:50,480 --> 00:25:54,880
um and we are also adding in the ability

00:25:54,159 --> 00:25:56,480
to

00:25:54,880 --> 00:25:57,919
uh currently with the dev tools while

00:25:56,480 --> 00:25:59,840
you can see the query string

00:25:57,919 --> 00:26:01,360
and you can see the variables you can't

00:25:59,840 --> 00:26:03,200
see what the actual cache

00:26:01,360 --> 00:26:04,720
result was we're going to show that to

00:26:03,200 --> 00:26:08,400
you

00:26:04,720 --> 00:26:10,480
as well as the ability to copy and paste

00:26:08,400 --> 00:26:11,360
like query strings variables and that

00:26:10,480 --> 00:26:12,720
cache data

00:26:11,360 --> 00:26:14,720
so that's all going to be a nicer

00:26:12,720 --> 00:26:15,919
experience and those are smaller new

00:26:14,720 --> 00:26:17,679
features

00:26:15,919 --> 00:26:19,200
some of the stuff that i'm more excited

00:26:17,679 --> 00:26:21,360
about giving you in the future

00:26:19,200 --> 00:26:23,200
is more information about the cache that

00:26:21,360 --> 00:26:24,320
has to do with type policies fetch

00:26:23,200 --> 00:26:25,840
policies

00:26:24,320 --> 00:26:27,760
uh information that you would need to

00:26:25,840 --> 00:26:29,360
know without having to go look into your

00:26:27,760 --> 00:26:31,520
code and see what's going on

00:26:29,360 --> 00:26:33,120
i want to start to surface those in the

00:26:31,520 --> 00:26:35,039
dev tools so you can actually see what's

00:26:33,120 --> 00:26:37,600
happening

00:26:35,039 --> 00:26:38,159
beyond that i'm just really excited to

00:26:37,600 --> 00:26:39,919
build

00:26:38,159 --> 00:26:41,520
a code base that's going to be easier to

00:26:39,919 --> 00:26:43,600
work with

00:26:41,520 --> 00:26:45,200
so that whatever wonderful features

00:26:43,600 --> 00:26:46,559
y'all want to request i'm going to be

00:26:45,200 --> 00:26:47,200
able to actually get them built for you

00:26:46,559 --> 00:26:49,120
or help

00:26:47,200 --> 00:26:52,080
like work with you to get them built and

00:26:49,120 --> 00:26:55,520
that is really exciting to me too

00:26:52,080 --> 00:26:58,640
definitely cool very cool uh

00:26:55,520 --> 00:27:02,640
ben do you recommend using apollo cache

00:26:58,640 --> 00:27:02,640
for local state as well as network data

00:27:04,960 --> 00:27:07,840
so

00:27:08,080 --> 00:27:11,600
yes uh i should get right to my my

00:27:11,120 --> 00:27:13,600
answer

00:27:11,600 --> 00:27:15,679
uh to the question which is definitely

00:27:13,600 --> 00:27:18,799
yes um

00:27:15,679 --> 00:27:20,000
but a nuance that i i try to put out

00:27:18,799 --> 00:27:22,240
into the world every time i talk

00:27:20,000 --> 00:27:23,120
about this is that there's not just one

00:27:22,240 --> 00:27:25,200
kind of

00:27:23,120 --> 00:27:26,640
clients like local state um it was a

00:27:25,200 --> 00:27:29,600
good talk by jed watson

00:27:26,640 --> 00:27:30,480
at a graphql summit a couple of years

00:27:29,600 --> 00:27:32,640
ago about

00:27:30,480 --> 00:27:34,960
i think his title was a treatise on

00:27:32,640 --> 00:27:36,480
local state and the thesis was

00:27:34,960 --> 00:27:38,880
there's like at least five different

00:27:36,480 --> 00:27:40,159
kinds of meaningfully different

00:27:38,880 --> 00:27:42,399
you know local state that you might need

00:27:40,159 --> 00:27:44,399
to deal with in a rich client-side web

00:27:42,399 --> 00:27:47,440
application or mobile application

00:27:44,399 --> 00:27:50,240
and um it is totally fine

00:27:47,440 --> 00:27:51,360
to use uh different tools for different

00:27:50,240 --> 00:27:53,919
jobs like if

00:27:51,360 --> 00:27:54,640
if you're using react and you need some

00:27:53,919 --> 00:27:56,720
component

00:27:54,640 --> 00:27:58,159
specific local state like specific to

00:27:56,720 --> 00:27:59,200
the instance of the component not just

00:27:58,159 --> 00:28:02,159
to the like

00:27:59,200 --> 00:28:03,120
the function or the class then um

00:28:02,159 --> 00:28:05,279
there's

00:28:03,120 --> 00:28:06,399
for sure nothing wrong with using uh you

00:28:05,279 --> 00:28:08,960
know use state or

00:28:06,399 --> 00:28:09,440
uh user f um the the react tools that

00:28:08,960 --> 00:28:12,799
you're

00:28:09,440 --> 00:28:16,080
given right so i would say that um

00:28:12,799 --> 00:28:19,600
apollo client is hoping to

00:28:16,080 --> 00:28:22,720
fit into the category of more

00:28:19,600 --> 00:28:24,159
global client-side state um

00:28:22,720 --> 00:28:26,640
so you know things like whether the user

00:28:24,159 --> 00:28:28,880
is logged in

00:28:26,640 --> 00:28:30,399
if if there's like a shopping cart you

00:28:28,880 --> 00:28:31,520
know for the app there's probably only

00:28:30,399 --> 00:28:34,159
one of those and it's

00:28:31,520 --> 00:28:34,799
somewhat global it's not like specific

00:28:34,159 --> 00:28:36,320
to

00:28:34,799 --> 00:28:38,240
a component that might be duplicated on

00:28:36,320 --> 00:28:40,000
the page right um

00:28:38,240 --> 00:28:42,399
those kinds of local state are a great

00:28:40,000 --> 00:28:44,399
fit for apollo client um

00:28:42,399 --> 00:28:46,320
and sense of follow client 2 when we

00:28:44,399 --> 00:28:48,000
were asking you to sort of

00:28:46,320 --> 00:28:50,320
i don't know force you're you're

00:28:48,000 --> 00:28:53,440
thinking about local state into graphql

00:28:50,320 --> 00:28:55,919
terms you know queries and mutations

00:28:53,440 --> 00:28:56,720
i think we've improved that story quite

00:28:55,919 --> 00:28:59,039
a bit um

00:28:56,720 --> 00:29:00,000
specifically by uh offering an

00:28:59,039 --> 00:29:02,080
alternative to the

00:29:00,000 --> 00:29:03,120
mutation side of things with reactive

00:29:02,080 --> 00:29:05,440
variables so you just

00:29:03,120 --> 00:29:06,960
you call a function to update the value

00:29:05,440 --> 00:29:10,159
of the reactive variable instead of

00:29:06,960 --> 00:29:13,279
sort of contriving uh a mutation

00:29:10,159 --> 00:29:14,720
to interact with with the cache um

00:29:13,279 --> 00:29:16,720
i don't know graphql has a lot of

00:29:14,720 --> 00:29:18,720
conceptual benefits and ergonomic

00:29:16,720 --> 00:29:20,559
benefits but that's one area where the

00:29:18,720 --> 00:29:22,240
ergonomic benefits of graphql just

00:29:20,559 --> 00:29:24,640
really weren't paying off so

00:29:22,240 --> 00:29:25,440
um you know we are looking for ways to

00:29:24,640 --> 00:29:28,559
make that

00:29:25,440 --> 00:29:32,159
uh go go more smoothly

00:29:28,559 --> 00:29:35,919
and and feel lighter weight

00:29:32,159 --> 00:29:38,640
i want to add on to that too because

00:29:35,919 --> 00:29:40,159
before i joined this team i was a

00:29:38,640 --> 00:29:41,440
front-end architect and so i actually

00:29:40,159 --> 00:29:43,039
dealt with this question of like where

00:29:41,440 --> 00:29:46,159
does local state go

00:29:43,039 --> 00:29:47,919
constantly and it is really important

00:29:46,159 --> 00:29:49,600
like ben said to remember that react

00:29:47,919 --> 00:29:51,600
gives you tools for local state and

00:29:49,600 --> 00:29:53,600
maybe you don't want to use

00:29:51,600 --> 00:29:53,950
the local state management of a larger

00:29:53,600 --> 00:29:55,039
library

00:29:53,950 --> 00:29:56,480
[Music]

00:29:55,039 --> 00:29:58,240
and how i think about this and it might

00:29:56,480 --> 00:29:59,600
be helpful for other people is that i

00:29:58,240 --> 00:30:02,559
usually think about

00:29:59,600 --> 00:30:04,559
ownership of that state and who is

00:30:02,559 --> 00:30:06,960
allowed to give the ownership

00:30:04,559 --> 00:30:08,240
for it changes to be made to it so like

00:30:06,960 --> 00:30:10,640
passing down

00:30:08,240 --> 00:30:11,760
the ability to have an on a handler do

00:30:10,640 --> 00:30:14,559
on um

00:30:11,760 --> 00:30:16,480
do set state and also thinking about who

00:30:14,559 --> 00:30:18,159
needs the data and how many pieces and

00:30:16,480 --> 00:30:19,440
where they are in the system

00:30:18,159 --> 00:30:22,320
so that will start to help you narrow

00:30:19,440 --> 00:30:23,919
down where that should live

00:30:22,320 --> 00:30:25,600
yeah i think often like you know

00:30:23,919 --> 00:30:26,320
especially with third-party libraries

00:30:25,600 --> 00:30:28,960
and even

00:30:26,320 --> 00:30:30,080
react context itself people uh often

00:30:28,960 --> 00:30:33,120
find themselves just

00:30:30,080 --> 00:30:33,919
pushing a lot of state up into a context

00:30:33,120 --> 00:30:36,000
store and then

00:30:33,919 --> 00:30:37,200
having this kind of waterfall of context

00:30:36,000 --> 00:30:38,000
around their app where it's really hard

00:30:37,200 --> 00:30:40,080
to figure out

00:30:38,000 --> 00:30:41,200
what state is happening where you know

00:30:40,080 --> 00:30:43,039
children to

00:30:41,200 --> 00:30:44,960
grandchildren and i think one of those

00:30:43,039 --> 00:30:46,880
things is definitely fixable by just

00:30:44,960 --> 00:30:48,559
kind of pushing your state for something

00:30:46,880 --> 00:30:49,200
as close as you can to its source of

00:30:48,559 --> 00:30:50,399
truth and

00:30:49,200 --> 00:30:52,080
and then hopefully you know and then

00:30:50,399 --> 00:30:52,640
having something like apollo 2 handle

00:30:52,080 --> 00:30:54,480
things like

00:30:52,640 --> 00:30:56,000
you know auth and and making sure that

00:30:54,480 --> 00:30:56,559
we're you know showing the right pages i

00:30:56,000 --> 00:30:58,080
think that's

00:30:56,559 --> 00:30:59,919
such an important part of especially the

00:30:58,080 --> 00:31:01,360
react ecosystem is that it it can get

00:30:59,919 --> 00:31:02,480
fuzzy about the decision that you want

00:31:01,360 --> 00:31:04,080
to make but

00:31:02,480 --> 00:31:05,519
a lot of the time the internal tools

00:31:04,080 --> 00:31:09,039
will definitely do a lot of

00:31:05,519 --> 00:31:10,960
the heavy lifting for you yeah and cool

00:31:09,039 --> 00:31:12,799
you know any anything that we can put

00:31:10,960 --> 00:31:14,000
into apollo client to help with local

00:31:12,799 --> 00:31:16,399
state can

00:31:14,000 --> 00:31:17,200
be represented somehow in dev tools

00:31:16,399 --> 00:31:18,399
right like

00:31:17,200 --> 00:31:20,559
imagine being able to see the contents

00:31:18,399 --> 00:31:23,919
of all your reactive variables there um

00:31:20,559 --> 00:31:25,440
yeah so yeah just lots of opportunities

00:31:23,919 --> 00:31:27,519
that's where apollo always shines the

00:31:25,440 --> 00:31:29,039
ecosystem you know folds into itself and

00:31:27,519 --> 00:31:29,360
there's so many things that interweave

00:31:29,039 --> 00:31:31,519
that

00:31:29,360 --> 00:31:33,919
you know you you really get brought into

00:31:31,519 --> 00:31:36,880
a very fruitful ecosystem as far as your

00:31:33,919 --> 00:31:36,880
tooling is concerned

00:31:37,120 --> 00:31:43,120
um all right here we go uh ben

00:31:41,200 --> 00:31:46,000
what is it like working on such a large

00:31:43,120 --> 00:31:49,919
project that is used so widely

00:31:46,000 --> 00:31:52,559
oh it's pretty nerve-wracking yeah um

00:31:49,919 --> 00:31:53,440
it's not it's not the most uh widely

00:31:52,559 --> 00:31:55,760
used project

00:31:53,440 --> 00:31:57,519
that i'm responsible for but but in

00:31:55,760 --> 00:31:59,279
terms of like how often i change it and

00:31:57,519 --> 00:32:00,880
create risk for

00:31:59,279 --> 00:32:03,120
you know things going poorly it's

00:32:00,880 --> 00:32:06,480
definitely the the biggest sort of uh

00:32:03,120 --> 00:32:09,440
psychic you know cloud hanging over me

00:32:06,480 --> 00:32:10,480
um yeah i don't know is that an adequate

00:32:09,440 --> 00:32:14,720
answer

00:32:10,480 --> 00:32:16,399
yeah i think so yeah it's scary

00:32:14,720 --> 00:32:17,840
it's as scary as everybody thinks it

00:32:16,399 --> 00:32:21,600
will be

00:32:17,840 --> 00:32:23,039
yeah i mean i i want to save people time

00:32:21,600 --> 00:32:24,480
right like i'm not a doctor i'm not

00:32:23,039 --> 00:32:26,399
saving people's lives i'm not an

00:32:24,480 --> 00:32:28,080
entertainer i'm not like

00:32:26,399 --> 00:32:30,399
improving the quality of their lives but

00:32:28,080 --> 00:32:32,320
like if we can save you time building an

00:32:30,399 --> 00:32:35,120
application that matters to you then

00:32:32,320 --> 00:32:35,440
um you know that that is the end goal

00:32:35,120 --> 00:32:37,360
and

00:32:35,440 --> 00:32:39,440
as long as there's you know continual

00:32:37,360 --> 00:32:41,760
evidence of that happening then

00:32:39,440 --> 00:32:42,880
can definitely deal with the uh stress

00:32:41,760 --> 00:32:45,600
of

00:32:42,880 --> 00:32:46,960
it being as widely used as it is um but

00:32:45,600 --> 00:32:47,840
you know we have a long way to go before

00:32:46,960 --> 00:32:50,399
we

00:32:47,840 --> 00:32:51,840
are in every react app so uh you know

00:32:50,399 --> 00:32:53,200
it's just gonna get more stressful from

00:32:51,840 --> 00:32:54,640
here

00:32:53,200 --> 00:32:56,480
yeah and in the end of the day you you

00:32:54,640 --> 00:32:57,440
may not be the one directly saving

00:32:56,480 --> 00:32:58,880
people's lives and

00:32:57,440 --> 00:33:00,640
or making those differences but

00:32:58,880 --> 00:33:03,200
empowering those who

00:33:00,640 --> 00:33:04,880
may be building software to uh empower

00:33:03,200 --> 00:33:06,320
those things and save people's lives

00:33:04,880 --> 00:33:08,159
i think that's one of the things you do

00:33:06,320 --> 00:33:09,440
contribute to so i appreciate uh you

00:33:08,159 --> 00:33:10,880
know the apollo team and the work that

00:33:09,440 --> 00:33:11,600
you're doing specifically it's it's

00:33:10,880 --> 00:33:13,519
definitely

00:33:11,600 --> 00:33:15,440
something that i feel makes uh building

00:33:13,519 --> 00:33:16,320
these large-scale applications so much

00:33:15,440 --> 00:33:19,600
less scary

00:33:16,320 --> 00:33:22,559
so um you know kudos to you for that

00:33:19,600 --> 00:33:24,559
uh let's see here for jen uh is apollo

00:33:22,559 --> 00:33:25,919
client dev tools for firefox and chrome

00:33:24,559 --> 00:33:27,919
two different code bases

00:33:25,919 --> 00:33:29,440
if so how hard is it to develop for both

00:33:27,919 --> 00:33:31,840
platforms

00:33:29,440 --> 00:33:33,760
so it's not it's it's one code base for

00:33:31,840 --> 00:33:37,360
both browsers

00:33:33,760 --> 00:33:39,120
um the the actually developing it with

00:33:37,360 --> 00:33:41,039
the browser apis is not is not the

00:33:39,120 --> 00:33:43,039
difficult part the the difficult part is

00:33:41,039 --> 00:33:43,919
actually the testing in both browsers

00:33:43,039 --> 00:33:45,919
because there's no

00:33:43,919 --> 00:33:48,159
automatic like automated way of doing

00:33:45,919 --> 00:33:49,679
this uh firefox provides some really

00:33:48,159 --> 00:33:50,320
great tools that are very helpful for

00:33:49,679 --> 00:33:52,000
this

00:33:50,320 --> 00:33:53,760
uh but ultimately like at the end of the

00:33:52,000 --> 00:33:54,960
day i'm taking a zip file and i'm

00:33:53,760 --> 00:33:57,200
uploading it

00:33:54,960 --> 00:33:59,360
to the different extension stores so

00:33:57,200 --> 00:34:02,159
it's a very manual process

00:33:59,360 --> 00:34:02,799
yeah big up to you on that because i

00:34:02,159 --> 00:34:05,039
know that

00:34:02,799 --> 00:34:07,200
definitely gets i i worked with an

00:34:05,039 --> 00:34:09,119
extension at one of my previous jobs and

00:34:07,200 --> 00:34:10,639
trying to do testing was like an

00:34:09,119 --> 00:34:13,760
absolute nightmare

00:34:10,639 --> 00:34:16,399
yeah it's really really difficult

00:34:13,760 --> 00:34:20,240
um ben uh what are the things coming

00:34:16,399 --> 00:34:23,599
down the pipeline next and why

00:34:20,240 --> 00:34:24,560
um okay so there's a couple of different

00:34:23,599 --> 00:34:28,800
time scales here

00:34:24,560 --> 00:34:31,919
there is uh in the in the most immediate

00:34:28,800 --> 00:34:35,359
uh time scale we are

00:34:31,919 --> 00:34:38,320
wrapping up work on apollo client 3.3

00:34:35,359 --> 00:34:38,720
um if you npm install at a polish client

00:34:38,320 --> 00:34:40,639
at

00:34:38,720 --> 00:34:42,240
beta you can get the latest version of

00:34:40,639 --> 00:34:43,839
that and you know

00:34:42,240 --> 00:34:45,760
to the extent that getting that out

00:34:43,839 --> 00:34:46,879
there is a blocker for everything else

00:34:45,760 --> 00:34:48,240
that we're going to do in the future it

00:34:46,879 --> 00:34:49,119
would really help you know if people

00:34:48,240 --> 00:34:51,679
would just

00:34:49,119 --> 00:34:52,159
try updating your your applications uh

00:34:51,679 --> 00:34:54,960
if you're

00:34:52,159 --> 00:34:55,520
especially if you're already using 3.2

00:34:54,960 --> 00:34:58,079
uh

00:34:55,520 --> 00:34:59,200
then 3.3 you know should not be a big

00:34:58,079 --> 00:35:01,680
leap but it's

00:34:59,200 --> 00:35:02,800
you know 100 or so commits so it's not

00:35:01,680 --> 00:35:06,000
um

00:35:02,800 --> 00:35:07,359
a tiny release um one of the things that

00:35:06,000 --> 00:35:10,880
i'm excited about in

00:35:07,359 --> 00:35:12,400
in that release uh i'm not gonna do

00:35:10,880 --> 00:35:14,640
justice to the changelog

00:35:12,400 --> 00:35:16,160
um but we've we've made it possible for

00:35:14,640 --> 00:35:19,040
uh type policies to

00:35:16,160 --> 00:35:20,560
inherit from each other based on the uh

00:35:19,040 --> 00:35:22,000
super type subtype relationships and

00:35:20,560 --> 00:35:24,880
your in your possible types

00:35:22,000 --> 00:35:26,079
information so you can put a

00:35:24,880 --> 00:35:28,880
configuration for

00:35:26,079 --> 00:35:30,400
a field say in in a single shared super

00:35:28,880 --> 00:35:30,880
type and then it'll just automatically

00:35:30,400 --> 00:35:34,160
apply

00:35:30,880 --> 00:35:34,960
to all of the concrete types that extend

00:35:34,160 --> 00:35:37,440
from that like

00:35:34,960 --> 00:35:40,960
interfaces from your schema or members

00:35:37,440 --> 00:35:42,960
of a union type so that's pretty cool

00:35:40,960 --> 00:35:44,079
we talked a little bit about i guess

00:35:42,960 --> 00:35:47,359
looking looking beyond

00:35:44,079 --> 00:35:48,320
3.3 to 3.4 uh we talked a little bit

00:35:47,359 --> 00:35:50,400
about persistence

00:35:48,320 --> 00:35:51,760
earlier i i think that you know might be

00:35:50,400 --> 00:35:53,680
the first

00:35:51,760 --> 00:35:55,119
opportunity that we have to sort of

00:35:53,680 --> 00:35:57,359
bring that into the core

00:35:55,119 --> 00:35:58,400
and see what what that experience could

00:35:57,359 --> 00:36:01,839
be like

00:35:58,400 --> 00:36:04,800
um another opportunity that i see

00:36:01,839 --> 00:36:06,880
just kind of lying on the table is that

00:36:04,800 --> 00:36:09,839
anyone who has implemented

00:36:06,880 --> 00:36:11,280
federation according to our federation

00:36:09,839 --> 00:36:13,760
spec

00:36:11,280 --> 00:36:16,400
will have had to set up a system where

00:36:13,760 --> 00:36:19,520
you can request any object by

00:36:16,400 --> 00:36:23,599
type name and id fields using the root

00:36:19,520 --> 00:36:25,040
underscore queries field and

00:36:23,599 --> 00:36:26,640
i don't want to overstate this i think

00:36:25,040 --> 00:36:27,200
in most federation setups that's

00:36:26,640 --> 00:36:28,640
actually not

00:36:27,200 --> 00:36:30,880
publicly exposed but at least the

00:36:28,640 --> 00:36:35,119
functionality is there and

00:36:30,880 --> 00:36:38,000
if apollo client had access to that

00:36:35,119 --> 00:36:38,560
underscore entities field then instead

00:36:38,000 --> 00:36:40,240
of

00:36:38,560 --> 00:36:41,920
resending the whole query whenever

00:36:40,240 --> 00:36:43,520
there's any missing data in it we could

00:36:41,920 --> 00:36:45,920
formulate a query that would

00:36:43,520 --> 00:36:46,800
ask for just the objects whose fields

00:36:45,920 --> 00:36:48,960
were missing

00:36:46,800 --> 00:36:50,800
and potentially request a lot less data

00:36:48,960 --> 00:36:53,200
update objects that are in a list

00:36:50,800 --> 00:36:54,079
in place that sort of thing and it could

00:36:53,200 --> 00:36:56,560
be something that you

00:36:54,079 --> 00:36:59,040
opted into on like a type by type basis

00:36:56,560 --> 00:37:01,200
through the the type policies system so

00:36:59,040 --> 00:37:02,800
that's pretty exciting um i think

00:37:01,200 --> 00:37:04,160
somehow a lot of people have the idea in

00:37:02,800 --> 00:37:05,599
their mind that that must be what apollo

00:37:04,160 --> 00:37:06,880
client is already doing so i kind of

00:37:05,599 --> 00:37:09,920
want to catch up to that

00:37:06,880 --> 00:37:11,920
expectation and actually do it um

00:37:09,920 --> 00:37:14,000
i think apollo client 4 will mostly be

00:37:11,920 --> 00:37:16,240
about taking stock of

00:37:14,000 --> 00:37:18,160
the apis that we hoped that we could

00:37:16,240 --> 00:37:20,320
deprecate and replace and

00:37:18,160 --> 00:37:22,160
you know removing them if if we feel

00:37:20,320 --> 00:37:23,280
like we're at that point but we're not

00:37:22,160 --> 00:37:27,280
going to do that until

00:37:23,280 --> 00:37:29,359
um we feel like we've actually replaced

00:37:27,280 --> 00:37:31,040
the use cases that we would be removing

00:37:29,359 --> 00:37:34,560
so um

00:37:31,040 --> 00:37:36,800
yeah i i've got a you know long

00:37:34,560 --> 00:37:38,560
uh list of features that i could talk

00:37:36,800 --> 00:37:40,320
about here um

00:37:38,560 --> 00:37:42,320
i don't know i've never felt great about

00:37:40,320 --> 00:37:42,880
refetch queries and i think i can see a

00:37:42,320 --> 00:37:44,480
way

00:37:42,880 --> 00:37:46,800
where your mutation could just sort of

00:37:44,480 --> 00:37:49,680
figure out which queries are affected by

00:37:46,800 --> 00:37:50,480
the update and uh you you could

00:37:49,680 --> 00:37:52,160
automatically

00:37:50,480 --> 00:37:54,240
uh just re-fetch those queries without

00:37:52,160 --> 00:37:55,680
having to enumerate them um but that's a

00:37:54,240 --> 00:37:58,800
bit of more of a

00:37:55,680 --> 00:38:00,079
a stretch goal maybe 3.5 um

00:37:58,800 --> 00:38:01,599
yeah those are those are some of the

00:38:00,079 --> 00:38:02,400
things that are coming down the pipe and

00:38:01,599 --> 00:38:05,359
and why

00:38:02,400 --> 00:38:07,359
um well it just you know seems like an

00:38:05,359 --> 00:38:08,400
essential part of a fully featured

00:38:07,359 --> 00:38:11,280
graphql

00:38:08,400 --> 00:38:11,920
client uh so you know we want that part

00:38:11,280 --> 00:38:14,240
of your

00:38:11,920 --> 00:38:15,920
uh tool chain you know even though it's

00:38:14,240 --> 00:38:16,560
already providing value we hope right

00:38:15,920 --> 00:38:18,480
now to

00:38:16,560 --> 00:38:20,480
just sort of accumulate more and more

00:38:18,480 --> 00:38:20,880
value and make you sort of happier that

00:38:20,480 --> 00:38:23,040
you

00:38:20,880 --> 00:38:24,880
adopted this technology going forward

00:38:23,040 --> 00:38:27,680
even without having to

00:38:24,880 --> 00:38:28,720
you know put in a lot of effort to um

00:38:27,680 --> 00:38:30,880
take advantage of those

00:38:28,720 --> 00:38:32,160
those new features so let me go without

00:38:30,880 --> 00:38:33,920
saying but uh

00:38:32,160 --> 00:38:35,280
yeah we we're we're trying to be a fully

00:38:33,920 --> 00:38:38,560
featured graphql

00:38:35,280 --> 00:38:40,640
um library not necessarily uh you know

00:38:38,560 --> 00:38:42,000
the barest bones implementation of of

00:38:40,640 --> 00:38:44,720
what that could look like because

00:38:42,000 --> 00:38:46,000
you know you can use fetch uh perfectly

00:38:44,720 --> 00:38:47,520
well as a graphql client

00:38:46,000 --> 00:38:49,200
there's a whole spectrum of places that

00:38:47,520 --> 00:38:51,440
you might end up in terms of

00:38:49,200 --> 00:38:53,920
uh you know how you consume graphql in

00:38:51,440 --> 00:38:55,599
your clients

00:38:53,920 --> 00:38:56,960
yeah i think that uh that refresh

00:38:55,599 --> 00:38:58,960
queries ideas sounds

00:38:56,960 --> 00:39:00,320
really cool especially um working with

00:38:58,960 --> 00:39:01,040
that i feel like you know this kind of

00:39:00,320 --> 00:39:03,200
like

00:39:01,040 --> 00:39:04,560
being able to auto fetch fragments of

00:39:03,200 --> 00:39:06,079
what was updated and

00:39:04,560 --> 00:39:08,240
and kind of pull out through the type

00:39:06,079 --> 00:39:09,839
name like what what type of updates were

00:39:08,240 --> 00:39:11,440
made and changes were made that sounds

00:39:09,839 --> 00:39:13,200
like a really interesting

00:39:11,440 --> 00:39:14,800
thing and i'm excited to see the further

00:39:13,200 --> 00:39:16,720
development of the apollo client 3 for

00:39:14,800 --> 00:39:21,440
sure

00:39:16,720 --> 00:39:24,240
um jen uh are there any plans to target

00:39:21,440 --> 00:39:28,000
any other browsers in the future

00:39:24,240 --> 00:39:29,599
for the devtools um right now no we're

00:39:28,000 --> 00:39:31,119
just going to stick with firefox and

00:39:29,599 --> 00:39:33,119
chrome at the moment

00:39:31,119 --> 00:39:35,280
we do want to make sure that it works

00:39:33,119 --> 00:39:35,760
really well if you want to debug react

00:39:35,280 --> 00:39:38,400
native

00:39:35,760 --> 00:39:41,440
because we know that's important um but

00:39:38,400 --> 00:39:44,720
as far as other browsers know right now

00:39:41,440 --> 00:39:48,560
cool and then uh also um

00:39:44,720 --> 00:39:51,760
how do you test apollo client dev tools

00:39:48,560 --> 00:39:54,560
uh okay mostly manually

00:39:51,760 --> 00:39:55,599
um so there's no end-to-end testing

00:39:54,560 --> 00:39:58,960
available

00:39:55,599 --> 00:40:01,119
for uh dev tools extensions or

00:39:58,960 --> 00:40:04,240
extensions really of any type it's

00:40:01,119 --> 00:40:08,079
like pretty much impossible to do

00:40:04,240 --> 00:40:08,880
i did a big research sprint on this

00:40:08,079 --> 00:40:10,880
topic

00:40:08,880 --> 00:40:12,079
before i started on it because it was

00:40:10,880 --> 00:40:13,040
going to help us a lot if we could

00:40:12,079 --> 00:40:14,240
figure out how to do it and

00:40:13,040 --> 00:40:17,359
unfortunately

00:40:14,240 --> 00:40:19,040
not possible so most of the time i am

00:40:17,359 --> 00:40:21,440
manually testing things

00:40:19,040 --> 00:40:23,280
please be kind to your local dev tools

00:40:21,440 --> 00:40:25,040
developer

00:40:23,280 --> 00:40:27,040
we're doing a lot of things manually

00:40:25,040 --> 00:40:28,880
other than that i do rely on unit tests

00:40:27,040 --> 00:40:32,640
and integration tests the older

00:40:28,880 --> 00:40:34,319
code base for the uh 2.0 plus

00:40:32,640 --> 00:40:36,560
version of dead tools didn't have any

00:40:34,319 --> 00:40:37,599
tests in it uh no unit has no

00:40:36,560 --> 00:40:39,119
integration tests

00:40:37,599 --> 00:40:40,800
and so as we build out this new code

00:40:39,119 --> 00:40:43,200
base that is really important to us

00:40:40,800 --> 00:40:44,560
as well as we're now using typescript to

00:40:43,200 --> 00:40:46,240
help with type safety

00:40:44,560 --> 00:40:48,000
um so all those things that we're trying

00:40:46,240 --> 00:40:49,440
to do to make it just a safer

00:40:48,000 --> 00:40:50,640
code base to work in especially

00:40:49,440 --> 00:40:52,160
considering that we don't have

00:40:50,640 --> 00:40:53,520
end-to-end testing to help us catch

00:40:52,160 --> 00:40:55,119
things

00:40:53,520 --> 00:40:57,200
yeah i'm sure it's also hard to kind of

00:40:55,119 --> 00:40:59,680
like refactor it to a new code base and

00:40:57,200 --> 00:41:00,319
not have any kind of backlog of of kind

00:40:59,680 --> 00:41:02,560
of

00:41:00,319 --> 00:41:04,480
ideas of the tests that that you know

00:41:02,560 --> 00:41:07,520
would be important to recreate

00:41:04,480 --> 00:41:09,680
um so yeah like like she said be nice

00:41:07,520 --> 00:41:11,040
be nice to your you know your dev tools

00:41:09,680 --> 00:41:11,760
creators they're they're going through

00:41:11,040 --> 00:41:15,359
it

00:41:11,760 --> 00:41:17,680
um all right all right ben uh what are

00:41:15,359 --> 00:41:21,440
what are apollo clients plans for react

00:41:17,680 --> 00:41:24,560
suspense and data fetching

00:41:21,440 --> 00:41:28,079
so uh i can i can be very specific

00:41:24,560 --> 00:41:31,359
um i think that uh

00:41:28,079 --> 00:41:34,640
we we don't have it right now um

00:41:31,359 --> 00:41:35,359
it hasn't been a huge priority uh for a

00:41:34,640 --> 00:41:37,680
while the

00:41:35,359 --> 00:41:38,800
the story was that it was still

00:41:37,680 --> 00:41:40,240
stabilizing and

00:41:38,800 --> 00:41:42,079
i don't know maybe there's some value in

00:41:40,240 --> 00:41:43,599
postponing an implementation until

00:41:42,079 --> 00:41:44,560
you're building against a more stable

00:41:43,599 --> 00:41:46,560
api

00:41:44,560 --> 00:41:48,160
um but you know at some point we may

00:41:46,560 --> 00:41:50,240
need to make a call about uh

00:41:48,160 --> 00:41:51,920
whether it's stable enough and how many

00:41:50,240 --> 00:41:53,040
other people have started using it such

00:41:51,920 --> 00:41:56,079
that it

00:41:53,040 --> 00:41:57,599
is sort of uh necessarily stable even if

00:41:56,079 --> 00:42:00,240
the react team wants to change it

00:41:57,599 --> 00:42:01,040
um but what that would look like

00:42:00,240 --> 00:42:04,160
concretely

00:42:01,040 --> 00:42:04,800
is that the say the use query hook would

00:42:04,160 --> 00:42:06,480
take an

00:42:04,800 --> 00:42:08,319
option along with like you know fetch

00:42:06,480 --> 00:42:10,480
policy or variables

00:42:08,319 --> 00:42:12,079
um called something like suspense or

00:42:10,480 --> 00:42:14,400
suspend and it would just

00:42:12,079 --> 00:42:15,119
be a boolean and if you said suspend

00:42:14,400 --> 00:42:17,680
true

00:42:15,119 --> 00:42:19,040
then what that would allow use query to

00:42:17,680 --> 00:42:21,760
do instead of returning

00:42:19,040 --> 00:42:22,880
sort of a useless initial loading result

00:42:21,760 --> 00:42:25,200
is to you know

00:42:22,880 --> 00:42:26,400
do the suspensive things of uh throwing

00:42:25,200 --> 00:42:29,839
a promise and

00:42:26,400 --> 00:42:30,960
um having the the component re-render um

00:42:29,839 --> 00:42:34,400
once that promise has

00:42:30,960 --> 00:42:36,960
has resolved um so i think

00:42:34,400 --> 00:42:37,920
the api from our side is is probably you

00:42:36,960 --> 00:42:39,760
know something that we could

00:42:37,920 --> 00:42:41,119
we could stabilize even in the absence

00:42:39,760 --> 00:42:44,240
of a totally stable

00:42:41,119 --> 00:42:47,200
react api which probably means we should

00:42:44,240 --> 00:42:48,000
go ahead and do it um if our manager

00:42:47,200 --> 00:42:50,000
hugh wilson

00:42:48,000 --> 00:42:51,280
uh was on this call he could he could

00:42:50,000 --> 00:42:53,680
talk uh

00:42:51,280 --> 00:42:54,400
a lot more about that i think it is

00:42:53,680 --> 00:42:58,480
something that we

00:42:54,400 --> 00:43:02,079
we will do it is a roadmap item so

00:42:58,480 --> 00:43:03,920
cool um so

00:43:02,079 --> 00:43:05,599
jen uh it's awesome to see your renewed

00:43:03,920 --> 00:43:07,200
focus for the browser dev tools

00:43:05,599 --> 00:43:08,480
has the apollo client team been thinking

00:43:07,200 --> 00:43:10,839
about other dev tools that could be

00:43:08,480 --> 00:43:13,839
useful within the apollo client

00:43:10,839 --> 00:43:16,880
ecosystem

00:43:13,839 --> 00:43:18,240
yes i would say that we do we do have

00:43:16,880 --> 00:43:20,960
these discussions

00:43:18,240 --> 00:43:22,720
from time to time you know we have

00:43:20,960 --> 00:43:26,319
thoughts on what we could do

00:43:22,720 --> 00:43:29,359
but i would also say that we're a really

00:43:26,319 --> 00:43:31,839
small team and so our focus

00:43:29,359 --> 00:43:33,119
is our focus really we just keep

00:43:31,839 --> 00:43:35,119
bringing ourselves back to like

00:43:33,119 --> 00:43:36,960
our two things right now which is making

00:43:35,119 --> 00:43:39,680
ac3 the best it can possibly be

00:43:36,960 --> 00:43:40,480
and getting you devtools that are really

00:43:39,680 --> 00:43:42,560
really

00:43:40,480 --> 00:43:44,079
good in the browser and are really going

00:43:42,560 --> 00:43:45,520
to help you out and building out that

00:43:44,079 --> 00:43:47,119
functionality

00:43:45,520 --> 00:43:48,880
we're such a small team we just can't do

00:43:47,119 --> 00:43:51,200
everything that we want to do

00:43:48,880 --> 00:43:53,200
um ben comes up with a lot of ideas he's

00:43:51,200 --> 00:43:56,319
like this would be really cool

00:43:53,200 --> 00:43:59,040
but we have to wait really bad

00:43:56,319 --> 00:44:00,000
build it now um he's one person i'm one

00:43:59,040 --> 00:44:01,680
person

00:44:00,000 --> 00:44:03,080
we're a small team so we just can't get

00:44:01,680 --> 00:44:04,560
everything done that we want to

00:44:03,080 --> 00:44:06,480
[Music]

00:44:04,560 --> 00:44:07,599
that kind of leads me um and we talked

00:44:06,480 --> 00:44:08,960
about this a little bit earlier but i

00:44:07,599 --> 00:44:10,400
think that that leads me into a next

00:44:08,960 --> 00:44:10,880
good question that will help with kind

00:44:10,400 --> 00:44:13,680
of that

00:44:10,880 --> 00:44:15,920
that small team aspect is um are there

00:44:13,680 --> 00:44:17,520
any tips or recommendations beyond you

00:44:15,920 --> 00:44:19,040
know just checking out the code base

00:44:17,520 --> 00:44:20,839
on a way to get up to speed with the

00:44:19,040 --> 00:44:23,839
apollo client code base as a new

00:44:20,839 --> 00:44:23,839
contributor

00:44:24,000 --> 00:44:30,880
i would say that not not

00:44:27,040 --> 00:44:33,200
um specific to apollo clients

00:44:30,880 --> 00:44:35,359
uh code base is the fact that if you

00:44:33,200 --> 00:44:37,760
want to contribute to open source

00:44:35,359 --> 00:44:39,839
you will need to reckon with the fact

00:44:37,760 --> 00:44:43,119
that you may not get a response

00:44:39,839 --> 00:44:45,280
very quickly and maybe

00:44:43,119 --> 00:44:46,960
by not very quickly i mean like weeks

00:44:45,280 --> 00:44:49,599
months um

00:44:46,960 --> 00:44:50,000
it's not like your normal uh engineering

00:44:49,599 --> 00:44:52,720
day job

00:44:50,000 --> 00:44:54,319
where you have someone look at a pr uh

00:44:52,720 --> 00:44:55,280
the day that you make it or maybe the

00:44:54,319 --> 00:44:58,079
second day

00:44:55,280 --> 00:44:59,040
um we're stretched very thin so we don't

00:44:58,079 --> 00:45:01,839
see everything

00:44:59,040 --> 00:45:03,040
all the time the other thing i would say

00:45:01,839 --> 00:45:05,680
is

00:45:03,040 --> 00:45:07,680
ben is really really good about writing

00:45:05,680 --> 00:45:09,200
really wonderful descriptions for his

00:45:07,680 --> 00:45:11,280
prs and changes

00:45:09,200 --> 00:45:13,440
and there is a wealth of information in

00:45:11,280 --> 00:45:15,520
those so if you're really curious about

00:45:13,440 --> 00:45:16,880
how something works or why something is

00:45:15,520 --> 00:45:19,839
the way it is

00:45:16,880 --> 00:45:21,200
go look through issues and pull requests

00:45:19,839 --> 00:45:22,800
from ben and you will find

00:45:21,200 --> 00:45:24,400
a ton of information that will help you

00:45:22,800 --> 00:45:26,560
out

00:45:24,400 --> 00:45:27,440
cool and i think another thing in this

00:45:26,560 --> 00:45:28,800
scenario is

00:45:27,440 --> 00:45:31,280
you know getting involved with your

00:45:28,800 --> 00:45:32,319
community uh it doesn't always have to

00:45:31,280 --> 00:45:34,640
be the the

00:45:32,319 --> 00:45:36,480
main contributors or the project owners

00:45:34,640 --> 00:45:36,800
that can help you get up to speed you

00:45:36,480 --> 00:45:38,079
know

00:45:36,800 --> 00:45:39,359
if there's one thing that i've realized

00:45:38,079 --> 00:45:39,839
and i talked about it a bit earlier is

00:45:39,359 --> 00:45:41,599
that

00:45:39,839 --> 00:45:43,359
this community especially surrounding

00:45:41,599 --> 00:45:43,920
apollo but a graphql community as a

00:45:43,359 --> 00:45:46,079
whole

00:45:43,920 --> 00:45:46,960
super helpful always has resources on

00:45:46,079 --> 00:45:48,640
deck

00:45:46,960 --> 00:45:50,400
get involved in those communities and

00:45:48,640 --> 00:45:50,800
you know ask around poke around get

00:45:50,400 --> 00:45:52,720
yourself

00:45:50,800 --> 00:45:54,319
involved with the conversations i think

00:45:52,720 --> 00:45:55,680
that's one of the big kind of barriers

00:45:54,319 --> 00:45:57,599
when it comes to open sources

00:45:55,680 --> 00:45:59,200
there's the the entirety of thinking

00:45:57,599 --> 00:46:00,960
okay this code base is not something i

00:45:59,200 --> 00:46:02,560
know then there's also the thing of like

00:46:00,960 --> 00:46:04,000
you know all of the conversations going

00:46:02,560 --> 00:46:05,760
on around it can feel extremely

00:46:04,000 --> 00:46:07,920
overwhelming to get involved with but

00:46:05,760 --> 00:46:10,480
poking your head in and and being

00:46:07,920 --> 00:46:12,560
involved and asking questions is

00:46:10,480 --> 00:46:14,000
is the best way to start figuring out

00:46:12,560 --> 00:46:16,240
how a contribution works for you

00:46:14,000 --> 00:46:18,319
so um definitely recommend that with

00:46:16,240 --> 00:46:20,319
with you know the the dev tools and

00:46:18,319 --> 00:46:21,680
the team behind it and the people that

00:46:20,319 --> 00:46:24,960
are contributing just getting involved

00:46:21,680 --> 00:46:24,960
with that community itself

00:46:25,920 --> 00:46:29,440
um all right let's see uh ben here's a

00:46:28,560 --> 00:46:33,599
good one

00:46:29,440 --> 00:46:33,599
are there any plans to support flutter

00:46:34,480 --> 00:46:39,280
um that's not on our roadmap now but uh

00:46:37,680 --> 00:46:42,960
to the point of you know getting

00:46:39,280 --> 00:46:46,240
involved uh i would say the best way to

00:46:42,960 --> 00:46:48,079
kick-start that conversation um we do

00:46:46,240 --> 00:46:50,319
have sort of a centralized uh

00:46:48,079 --> 00:46:51,599
feature request repository under the

00:46:50,319 --> 00:46:54,720
polygraph ql github

00:46:51,599 --> 00:46:56,240
organization um and it it can feel like

00:46:54,720 --> 00:46:58,800
that's sort of separate and

00:46:56,240 --> 00:46:59,440
uh that we don't pay enough attention to

00:46:58,800 --> 00:47:02,160
it that's

00:46:59,440 --> 00:47:03,520
that's true um but the reason that it's

00:47:02,160 --> 00:47:05,599
separate is because

00:47:03,520 --> 00:47:06,800
um a lot of features are sort of like

00:47:05,599 --> 00:47:08,640
you know

00:47:06,800 --> 00:47:10,319
uh groups of features that span more

00:47:08,640 --> 00:47:10,640
than just the client or more than just

00:47:10,319 --> 00:47:12,480
the

00:47:10,640 --> 00:47:14,480
the server so you know there needs to be

00:47:12,480 --> 00:47:17,839
a place to talk about those

00:47:14,480 --> 00:47:20,880
those project spanning features um

00:47:17,839 --> 00:47:24,160
so yeah uh if you open an issue there

00:47:20,880 --> 00:47:25,760
and um out what

00:47:24,160 --> 00:47:27,839
that would look like uh what the

00:47:25,760 --> 00:47:30,880
benefits would be i think the

00:47:27,839 --> 00:47:31,440
the biggest question to answer with with

00:47:30,880 --> 00:47:33,760
any

00:47:31,440 --> 00:47:35,680
integration is just like you know to

00:47:33,760 --> 00:47:39,119
what extent should this be

00:47:35,680 --> 00:47:41,200
another opportunity to use some sort of

00:47:39,119 --> 00:47:42,800
generic plugin system that we provide

00:47:41,200 --> 00:47:44,800
and to what extent should it be like a

00:47:42,800 --> 00:47:47,280
first class thing where you like

00:47:44,800 --> 00:47:48,000
you know see the word flutter in the

00:47:47,280 --> 00:47:50,559
public client

00:47:48,000 --> 00:47:52,000
code base but i should i should just

00:47:50,559 --> 00:47:54,559
disclaim that i'm not too familiar

00:47:52,000 --> 00:47:56,000
with what uh flutter is even as a

00:47:54,559 --> 00:47:58,319
category of thing

00:47:56,000 --> 00:48:00,079
so uh if what i'm saying is somehow

00:47:58,319 --> 00:48:03,760
logically inconsistent with

00:48:00,079 --> 00:48:04,319
what uh you understand that to mean then

00:48:03,760 --> 00:48:07,280
uh

00:48:04,319 --> 00:48:08,160
yeah feel free to educate me uh at us

00:48:07,280 --> 00:48:11,440
the team

00:48:08,160 --> 00:48:13,119
in um in an issue in the future requests

00:48:11,440 --> 00:48:16,559
repository

00:48:13,119 --> 00:48:19,200
cool um and then um yeah so

00:48:16,559 --> 00:48:20,640
ben again since apollo has both client

00:48:19,200 --> 00:48:22,079
and server projects

00:48:20,640 --> 00:48:24,240
has there been any thought around the

00:48:22,079 --> 00:48:27,359
ways that those two projects could be

00:48:24,240 --> 00:48:27,359
more closely integrated

00:48:27,839 --> 00:48:34,559
well coupling them together

00:48:31,200 --> 00:48:38,079
is not a goal we definitely want

00:48:34,559 --> 00:48:39,520
apollo client to be a graphql client

00:48:38,079 --> 00:48:42,960
that you can use with any

00:48:39,520 --> 00:48:46,160
public or private graphql api um

00:48:42,960 --> 00:48:47,920
and apollo server

00:48:46,160 --> 00:48:49,200
you know you may be in a situation where

00:48:47,920 --> 00:48:50,000
you you don't want to use a public

00:48:49,200 --> 00:48:51,680
client on

00:48:50,000 --> 00:48:53,040
on your client because you know there's

00:48:51,680 --> 00:48:54,319
something a lot simpler that

00:48:53,040 --> 00:48:56,400
you feel like you can get away with you

00:48:54,319 --> 00:48:56,800
don't need a normalized cash you don't

00:48:56,400 --> 00:48:59,280
need

00:48:56,800 --> 00:49:00,160
reactivity um or you know any of the

00:48:59,280 --> 00:49:02,559
things that we've been

00:49:00,160 --> 00:49:03,760
talking about today that's fine um so

00:49:02,559 --> 00:49:06,400
the last thing we would

00:49:03,760 --> 00:49:08,400
ever want to do is you know build like a

00:49:06,400 --> 00:49:10,800
a feature that we were

00:49:08,400 --> 00:49:12,960
you know really marketing that uh sort

00:49:10,800 --> 00:49:16,720
of assumed that you you were locked

00:49:12,960 --> 00:49:17,440
into both a client and a server at the

00:49:16,720 --> 00:49:19,280
same time

00:49:17,440 --> 00:49:20,240
in part because you know the servers

00:49:19,280 --> 00:49:21,599
that you're using when you're using

00:49:20,240 --> 00:49:23,359
graphql are often not

00:49:21,599 --> 00:49:25,200
yours right like you just don't you

00:49:23,359 --> 00:49:27,680
don't get to make the decision about

00:49:25,200 --> 00:49:29,440
how they're implemented so we we feel

00:49:27,680 --> 00:49:31,280
like it ties our hands if we

00:49:29,440 --> 00:49:33,040
sort of indulge in that you know

00:49:31,280 --> 00:49:36,559
otherwise very appealing

00:49:33,040 --> 00:49:39,040
uh prospect um

00:49:36,559 --> 00:49:40,559
but i don't know as as an example of a

00:49:39,040 --> 00:49:41,040
feature that we considered sort of

00:49:40,559 --> 00:49:43,200
building

00:49:41,040 --> 00:49:44,720
in a you know opt-in way where you could

00:49:43,200 --> 00:49:45,760
take advantage of it if you happen to be

00:49:44,720 --> 00:49:48,160
using both

00:49:45,760 --> 00:49:49,520
apollo client and apollo server or some

00:49:48,160 --> 00:49:52,720
other server where you implemented that

00:49:49,520 --> 00:49:52,720
part of it you know yourself

00:49:54,079 --> 00:49:59,760
right now when you configure

00:49:57,280 --> 00:50:00,559
your in memory cache you have to tell it

00:49:59,760 --> 00:50:02,559
about all the

00:50:00,559 --> 00:50:04,000
super types and subtypes in your schema

00:50:02,559 --> 00:50:07,200
the possible types

00:50:04,000 --> 00:50:08,319
and uh when you do that uh you probably

00:50:07,200 --> 00:50:10,960
do it at build time you're sort of

00:50:08,319 --> 00:50:13,200
taking a snapshot of your schema

00:50:10,960 --> 00:50:14,160
at that moment in time but you can have

00:50:13,200 --> 00:50:17,520
clients that

00:50:14,160 --> 00:50:20,720
uh you know stick around for for weeks

00:50:17,520 --> 00:50:22,880
uh and you can easily release a new

00:50:20,720 --> 00:50:24,319
version of your server with a different

00:50:22,880 --> 00:50:27,680
schema with different

00:50:24,319 --> 00:50:29,440
uh subtypes um that are unknown to those

00:50:27,680 --> 00:50:30,720
clients that happen to still be open in

00:50:29,440 --> 00:50:33,520
somebody's browser

00:50:30,720 --> 00:50:34,960
um so we thought it would be like a

00:50:33,520 --> 00:50:37,760
really seamless experience

00:50:34,960 --> 00:50:38,800
if the server could with each query in

00:50:37,760 --> 00:50:41,359
the extensions

00:50:38,800 --> 00:50:42,240
section of the response send back any

00:50:41,359 --> 00:50:45,280
like new

00:50:42,240 --> 00:50:47,440
possible types information that um

00:50:45,280 --> 00:50:48,400
might be useful for interpreting the

00:50:47,440 --> 00:50:51,599
fragments

00:50:48,400 --> 00:50:52,079
in in that query um and i i still think

00:50:51,599 --> 00:50:54,160
like you

00:50:52,079 --> 00:50:55,200
you could do that um that that is

00:50:54,160 --> 00:50:56,640
possible um

00:50:55,200 --> 00:50:58,960
and it i would love to hear about it if

00:50:56,640 --> 00:51:00,079
anyone wants to give it a try

00:50:58,960 --> 00:51:02,160
we ended up going in a slightly

00:51:00,079 --> 00:51:04,079
different direction that was just

00:51:02,160 --> 00:51:06,240
focused on the client where

00:51:04,079 --> 00:51:07,280
it's once again possible to do some sort

00:51:06,240 --> 00:51:10,079
of fuzzy or

00:51:07,280 --> 00:51:11,760
heuristic matching of possible types and

00:51:10,079 --> 00:51:14,880
that was implemented in

00:51:11,760 --> 00:51:15,520
public client 3.2 um so check that out

00:51:14,880 --> 00:51:17,440
if

00:51:15,520 --> 00:51:19,359
that feels like a use case that that you

00:51:17,440 --> 00:51:22,160
might have but that's a case where we

00:51:19,359 --> 00:51:23,520
you know briefly considered going down

00:51:22,160 --> 00:51:24,880
the route of coupling the server and the

00:51:23,520 --> 00:51:27,920
client together and then

00:51:24,880 --> 00:51:29,040
backed away from it as we usually do

00:51:27,920 --> 00:51:31,440
yeah i think that was going to be like

00:51:29,040 --> 00:51:32,240
one of my my questions after was like

00:51:31,440 --> 00:51:35,280
you know the

00:51:32,240 --> 00:51:35,760
the mundane kind of re-typing of all of

00:51:35,280 --> 00:51:38,640
your

00:51:35,760 --> 00:51:40,079
data objects between server and and

00:51:38,640 --> 00:51:42,480
client always felt

00:51:40,079 --> 00:51:43,760
uh like and i know there's like code gen

00:51:42,480 --> 00:51:45,359
now and there's ways to

00:51:43,760 --> 00:51:46,960
kind of type at one time and then you

00:51:45,359 --> 00:51:49,599
know generate new code

00:51:46,960 --> 00:51:51,520
new new types for you know whether it be

00:51:49,599 --> 00:51:52,640
typescript or i'm sure the client but

00:51:51,520 --> 00:51:54,880
that was definitely one of the things

00:51:52,640 --> 00:51:55,920
that i felt was uh something that i

00:51:54,880 --> 00:51:57,359
wanted to

00:51:55,920 --> 00:51:59,119
because i was building a lot of at the

00:51:57,359 --> 00:52:00,319
time um kind of servers that would sit

00:51:59,119 --> 00:52:02,400
in front of graphql or

00:52:00,319 --> 00:52:03,920
rest api so i was consistently trying to

00:52:02,400 --> 00:52:05,200
figure out like what were the type

00:52:03,920 --> 00:52:06,240
objects and then kind of feeding those

00:52:05,200 --> 00:52:07,760
into the client so

00:52:06,240 --> 00:52:09,599
i think that's a really interesting kind

00:52:07,760 --> 00:52:12,000
of piece of the ecosystem

00:52:09,599 --> 00:52:13,599
um we've got a couple of more questions

00:52:12,000 --> 00:52:16,839
here uh

00:52:13,599 --> 00:52:19,839
one is going to be is the apollo team

00:52:16,839 --> 00:52:19,839
hiring

00:52:21,599 --> 00:52:28,000
yes are we allowed to say

00:52:24,960 --> 00:52:31,200
yes we will be yeah

00:52:28,000 --> 00:52:33,920
um specifically we're we're trying and

00:52:31,200 --> 00:52:35,520
this is a big lift uh to get out of the

00:52:33,920 --> 00:52:38,079
equilibrium of having

00:52:35,520 --> 00:52:38,720
one senior engineer working on each of

00:52:38,079 --> 00:52:40,480
our

00:52:38,720 --> 00:52:42,319
different client projects so there's dev

00:52:40,480 --> 00:52:43,440
tools there's apollo client web there's

00:52:42,319 --> 00:52:46,559
total client

00:52:43,440 --> 00:52:47,280
uh android kotlin and apollo client ios

00:52:46,559 --> 00:52:49,280
swift

00:52:47,280 --> 00:52:50,800
each of those projects has one person on

00:52:49,280 --> 00:52:54,000
it right now who's sort of like

00:52:50,800 --> 00:52:54,640
singly responsible for um you know

00:52:54,000 --> 00:52:57,839
progress

00:52:54,640 --> 00:52:59,359
uh on that project and uh

00:52:57,839 --> 00:53:01,119
you know doubling the total size of the

00:52:59,359 --> 00:53:02,880
team by putting one more percent on each

00:53:01,119 --> 00:53:03,760
of those projects would be amazing but

00:53:02,880 --> 00:53:06,000
that's another

00:53:03,760 --> 00:53:07,680
um three or four people that we would

00:53:06,000 --> 00:53:10,079
need to hire so

00:53:07,680 --> 00:53:12,640
yeah that's a that's a big priority for

00:53:10,079 --> 00:53:14,720
for hiring in the next year

00:53:12,640 --> 00:53:16,079
yeah i guess a follow-up question that

00:53:14,720 --> 00:53:18,240
to that would be like

00:53:16,079 --> 00:53:19,440
you know what are the types of things um

00:53:18,240 --> 00:53:21,119
that would

00:53:19,440 --> 00:53:23,119
you know really help somebody prepare

00:53:21,119 --> 00:53:24,800
for the types of roles that the apollo

00:53:23,119 --> 00:53:25,760
client team might be looking for in the

00:53:24,800 --> 00:53:28,480
near future like

00:53:25,760 --> 00:53:29,359
you know i know for me i i would always

00:53:28,480 --> 00:53:30,800
go and say

00:53:29,359 --> 00:53:32,160
when there's an open source project

00:53:30,800 --> 00:53:33,680
being involved in that open source

00:53:32,160 --> 00:53:35,359
project having commits in that open

00:53:33,680 --> 00:53:37,520
source project is always a

00:53:35,359 --> 00:53:39,040
key move uh but is there anything else

00:53:37,520 --> 00:53:41,359
any advice from the two of you

00:53:39,040 --> 00:53:42,079
for ways to ramp up to to get towards

00:53:41,359 --> 00:53:44,720
kind of

00:53:42,079 --> 00:53:47,040
being a you know a desirable candidate

00:53:44,720 --> 00:53:50,400
in that way

00:53:47,040 --> 00:53:53,440
yeah so contributing

00:53:50,400 --> 00:53:58,160
to open source is uh

00:53:53,440 --> 00:53:59,599
helpful but not a deal breaker because

00:53:58,160 --> 00:54:01,599
contributing to open source also

00:53:59,599 --> 00:54:02,880
requires you to have a certain type of

00:54:01,599 --> 00:54:05,839
life where you have

00:54:02,880 --> 00:54:06,960
a amount of time to do that um and not

00:54:05,839 --> 00:54:09,920
everyone does

00:54:06,960 --> 00:54:11,440
so if we can if we limited ourselves to

00:54:09,920 --> 00:54:13,839
that we would also be limiting our

00:54:11,440 --> 00:54:14,720
our uh candidate pool so we're not going

00:54:13,839 --> 00:54:16,319
to do that also

00:54:14,720 --> 00:54:17,760
just while i have contributed to open

00:54:16,319 --> 00:54:20,160
source projects in the past

00:54:17,760 --> 00:54:21,119
um i was hired for this team mostly off

00:54:20,160 --> 00:54:23,520
of my front end

00:54:21,119 --> 00:54:24,800
architect experience and i would say

00:54:23,520 --> 00:54:27,440
that's really valuable

00:54:24,800 --> 00:54:27,920
um which is that i worked with many

00:54:27,440 --> 00:54:30,079
different

00:54:27,920 --> 00:54:31,520
react code bases that were architected

00:54:30,079 --> 00:54:33,599
in many different ways

00:54:31,520 --> 00:54:35,200
i learned a lot of lessons from those

00:54:33,599 --> 00:54:36,640
and then i started to architect my own

00:54:35,200 --> 00:54:40,400
code base at one of

00:54:36,640 --> 00:54:41,599
my jobs and that is really important the

00:54:40,400 --> 00:54:44,640
ability to

00:54:41,599 --> 00:54:46,480
know the trade-offs of a technical

00:54:44,640 --> 00:54:48,480
decision

00:54:46,480 --> 00:54:49,920
and also what that developer experience

00:54:48,480 --> 00:54:51,200
of a technical decision is going to be

00:54:49,920 --> 00:54:54,319
like those are those are really

00:54:51,200 --> 00:54:54,319
important for the work that we do

00:54:56,480 --> 00:54:59,599
awesome cool thank you so much i feel

00:54:58,319 --> 00:55:01,200
like you know we hit you with

00:54:59,599 --> 00:55:03,119
millions of questions that were all

00:55:01,200 --> 00:55:05,280
answered absolutely perfect

00:55:03,119 --> 00:55:06,319
if anybody has any more questions or a

00:55:05,280 --> 00:55:06,880
question that they put up and they

00:55:06,319 --> 00:55:08,720
didn't see

00:55:06,880 --> 00:55:10,240
answered i'm sure the team would be

00:55:08,720 --> 00:55:12,160
happy to field those questions

00:55:10,240 --> 00:55:13,839
over in the discord the q a channel is

00:55:12,160 --> 00:55:15,119
still open uh ben and jen

00:55:13,839 --> 00:55:16,559
thank you so much for your time it's

00:55:15,119 --> 00:55:18,240
been an absolute pleasure getting to

00:55:16,559 --> 00:55:18,880
talk to y'all and meet y'all uh through

00:55:18,240 --> 00:55:21,040
the internet

00:55:18,880 --> 00:55:22,799
hopefully one day soon we will we will

00:55:21,040 --> 00:55:24,480
get to meet in person when things are

00:55:22,799 --> 00:55:26,960
back to normal but again thank you all

00:55:24,480 --> 00:55:26,960
so much

00:55:27,920 --> 00:55:35,839
thanks thanks everyone

00:55:39,280 --> 00:55:41,359

YouTube URL: https://www.youtube.com/watch?v=1CsQiM6THWo


