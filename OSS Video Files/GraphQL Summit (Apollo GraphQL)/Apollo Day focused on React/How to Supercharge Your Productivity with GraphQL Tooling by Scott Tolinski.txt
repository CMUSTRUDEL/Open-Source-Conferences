Title: How to Supercharge Your Productivity with GraphQL Tooling by Scott Tolinski
Publication date: 2020-11-18
Playlist: Apollo Day focused on React
Description: 
	Resources:
Checkout the Apollo docs - https://www.apollographql.com/docs/
ApolloGraphQL - https://www.apollographql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Captions: 
	00:00:00,210 --> 00:00:06,469
[Music]

00:00:07,200 --> 00:00:10,400
hey what's up my name is

00:00:08,559 --> 00:00:12,480
scott telinski and i'm going to be

00:00:10,400 --> 00:00:16,080
talking to you about graphql

00:00:12,480 --> 00:00:18,880
tools now i use quite a bit of graphql

00:00:16,080 --> 00:00:19,520
tools in my own workflow all the time in

00:00:18,880 --> 00:00:21,119
fact

00:00:19,520 --> 00:00:22,960
a lot of what you're going to be seeing

00:00:21,119 --> 00:00:25,439
today is things that i use

00:00:22,960 --> 00:00:27,599
daily so what we're going to be doing

00:00:25,439 --> 00:00:29,119
here is talking specifically about the

00:00:27,599 --> 00:00:31,599
different types of

00:00:29,119 --> 00:00:32,399
tools that you can use to improve or

00:00:31,599 --> 00:00:35,200
augment

00:00:32,399 --> 00:00:37,120
how you work with graphql and apollo

00:00:35,200 --> 00:00:39,680
because i personally use apollo in

00:00:37,120 --> 00:00:41,360
our code base so it's important to know

00:00:39,680 --> 00:00:42,800
that all of these things work very well

00:00:41,360 --> 00:00:46,320
with apollo and many of them

00:00:42,800 --> 00:00:50,079
work specifically with apollo so

00:00:46,320 --> 00:00:52,079
that said uh who am i and why am i here

00:00:50,079 --> 00:00:54,239
well you got why i'm here but who am i

00:00:52,079 --> 00:00:56,960
uh my name is scott talinski as i said

00:00:54,239 --> 00:00:58,079
and i am the creator of level up

00:00:56,960 --> 00:01:00,480
tutorials

00:00:58,079 --> 00:01:01,440
that's leveluptutorials.com for those of

00:01:00,480 --> 00:01:02,960
you who are wondering

00:01:01,440 --> 00:01:04,720
and that is in fact where we're going to

00:01:02,960 --> 00:01:06,720
be looking at a lot of the code today

00:01:04,720 --> 00:01:09,040
this is the site level of tutorials

00:01:06,720 --> 00:01:10,159
this is built in meteor with apollo as

00:01:09,040 --> 00:01:12,640
the api

00:01:10,159 --> 00:01:14,720
so i created level up tutorials which is

00:01:12,640 --> 00:01:17,040
a huge repository of

00:01:14,720 --> 00:01:18,400
tutorials um i make a new tutorial

00:01:17,040 --> 00:01:20,880
series every single month

00:01:18,400 --> 00:01:21,439
there is uh just way too many to be

00:01:20,880 --> 00:01:23,200
counted

00:01:21,439 --> 00:01:24,320
it's funny um some of the logos are a

00:01:23,200 --> 00:01:25,360
little off here because this is our

00:01:24,320 --> 00:01:27,520
development environment

00:01:25,360 --> 00:01:29,840
but we do have courses like custom react

00:01:27,520 --> 00:01:30,720
hooks or even how to make a graphql api

00:01:29,840 --> 00:01:33,920
which focuses

00:01:30,720 --> 00:01:36,400
primarily on the server side of things

00:01:33,920 --> 00:01:37,200
in fact maybe a course on graphql

00:01:36,400 --> 00:01:39,840
tooling

00:01:37,200 --> 00:01:40,960
would be really nice to have we also

00:01:39,840 --> 00:01:42,799
have courses on design

00:01:40,960 --> 00:01:44,399
and full stack react and animating and

00:01:42,799 --> 00:01:45,680
all sorts of really neat stuff so if

00:01:44,399 --> 00:01:48,759
you're interested in learning

00:01:45,680 --> 00:01:50,000
any of these skills check out

00:01:48,759 --> 00:01:52,799
leveluptutorials.com

00:01:50,000 --> 00:01:54,560
okay enough of that advertisement i also

00:01:52,799 --> 00:01:57,840
co-host the podcast

00:01:54,560 --> 00:02:00,000
syntax with wes boss so many of you may

00:01:57,840 --> 00:02:00,560
know wes for his work in the javascript

00:02:00,000 --> 00:02:02,240
world

00:02:00,560 --> 00:02:04,479
and he also works quite a bit with

00:02:02,240 --> 00:02:06,799
graphql so you hear us talk about

00:02:04,479 --> 00:02:08,000
graphql all the time on syntax so if you

00:02:06,799 --> 00:02:11,440
want to check out syntax

00:02:08,000 --> 00:02:14,480
check out syntax dot fm is the website

00:02:11,440 --> 00:02:17,280
where we release two episodes a week

00:02:14,480 --> 00:02:18,560
uh one longer one one shorter one and we

00:02:17,280 --> 00:02:21,520
primarily teach

00:02:18,560 --> 00:02:23,760
we're both teachers so uh it makes sense

00:02:21,520 --> 00:02:27,280
that our podcast is entirely focused on

00:02:23,760 --> 00:02:30,959
teaching new skills so that's uh who i

00:02:27,280 --> 00:02:33,680
am let's get into this talk because uh

00:02:30,959 --> 00:02:34,879
i love graphql and it has been really

00:02:33,680 --> 00:02:37,760
nice in our project

00:02:34,879 --> 00:02:38,800
now our code base is typescript so a lot

00:02:37,760 --> 00:02:39,760
of the code that you're going to be

00:02:38,800 --> 00:02:42,879
seeing in this is

00:02:39,760 --> 00:02:45,280
typescript based but it works just as

00:02:42,879 --> 00:02:47,599
well with things that aren't typescript

00:02:45,280 --> 00:02:49,840
the benefits of having typescript though

00:02:47,599 --> 00:02:50,400
in a project like this is that you have

00:02:49,840 --> 00:02:53,280
types

00:02:50,400 --> 00:02:54,400
up and down the stack our api is typed

00:02:53,280 --> 00:02:56,480
our server side

00:02:54,400 --> 00:02:58,000
code is typed the resolvers are typed

00:02:56,480 --> 00:03:00,640
our frontend code is all typed

00:02:58,000 --> 00:03:03,280
the react is typed therefore everything

00:03:00,640 --> 00:03:05,519
always knows what it is all the time so

00:03:03,280 --> 00:03:06,800
a lot of the the the code base and tools

00:03:05,519 --> 00:03:08,640
that you're going to be seeing not all

00:03:06,800 --> 00:03:11,599
of them but many of them are going to be

00:03:08,640 --> 00:03:13,280
from directly leveluptutorials.com

00:03:11,599 --> 00:03:15,519
actual codebase in fact i have

00:03:13,280 --> 00:03:16,720
the codebase open right here you can see

00:03:15,519 --> 00:03:20,239
this is one of our

00:03:16,720 --> 00:03:22,239
um this is one of our types

00:03:20,239 --> 00:03:24,720
so we're going to be talking quite a bit

00:03:22,239 --> 00:03:27,280
about this code base in general

00:03:24,720 --> 00:03:28,959
and i'll do my best to navigate this

00:03:27,280 --> 00:03:32,239
thing elegantly considering

00:03:28,959 --> 00:03:34,080
i did create it so i i will be going and

00:03:32,239 --> 00:03:35,440
diving through and talking about stuff

00:03:34,080 --> 00:03:37,519
specifically that we use

00:03:35,440 --> 00:03:38,959
in our code base and how it can be used

00:03:37,519 --> 00:03:40,720
in your code base to help you

00:03:38,959 --> 00:03:42,080
write really efficient and really nice

00:03:40,720 --> 00:03:44,000
graphql again

00:03:42,080 --> 00:03:45,760
there will be more benefits here for the

00:03:44,000 --> 00:03:47,760
typescript users but

00:03:45,760 --> 00:03:49,120
keep in mind that we used many of these

00:03:47,760 --> 00:03:49,840
tools before our project was in

00:03:49,120 --> 00:03:51,360
typescript

00:03:49,840 --> 00:03:53,200
because of course our project was not

00:03:51,360 --> 00:03:53,519
built in typescript it wasn't even built

00:03:53,200 --> 00:03:54,959
in

00:03:53,519 --> 00:03:58,159
react initially this thing's gone

00:03:54,959 --> 00:03:59,680
through a large transformation

00:03:58,159 --> 00:04:01,439
but i do want to emphasize that it's

00:03:59,680 --> 00:04:03,840
current iteration of

00:04:01,439 --> 00:04:06,560
types up and down the stack is by far

00:04:03,840 --> 00:04:08,560
the best one so far

00:04:06,560 --> 00:04:10,000
so where are we going to start with

00:04:08,560 --> 00:04:13,680
graft ql

00:04:10,000 --> 00:04:14,080
tools now in my opinion uh there are too

00:04:13,680 --> 00:04:16,799
many

00:04:14,080 --> 00:04:19,120
excellent tools on this website to list

00:04:16,799 --> 00:04:22,560
the guild is a group of developers who

00:04:19,120 --> 00:04:25,040
create graphql projects that you can use

00:04:22,560 --> 00:04:25,600
and i say here graphql cogen will change

00:04:25,040 --> 00:04:27,840
your life

00:04:25,600 --> 00:04:28,800
emphasis on will it will change your

00:04:27,840 --> 00:04:31,040
life so

00:04:28,800 --> 00:04:33,440
uh there are so many wonderful things in

00:04:31,040 --> 00:04:35,040
here but graphql cogen by far

00:04:33,440 --> 00:04:36,639
is the one that you're going to take the

00:04:35,040 --> 00:04:39,120
closest look at that and

00:04:36,639 --> 00:04:41,280
maybe graphql tools either way there's a

00:04:39,120 --> 00:04:42,320
ton of amazing stuff here so if we head

00:04:41,280 --> 00:04:43,680
to their website

00:04:42,320 --> 00:04:45,280
this is what it looks like we are the

00:04:43,680 --> 00:04:47,199
guild they do consulting and training

00:04:45,280 --> 00:04:49,120
and engineering and open source now

00:04:47,199 --> 00:04:50,880
i i don't have any connection this is

00:04:49,120 --> 00:04:53,520
not necessarily an advertisement

00:04:50,880 --> 00:04:54,160
i have used so many of their their tools

00:04:53,520 --> 00:04:56,639
that i

00:04:54,160 --> 00:04:58,960
uh must say that like these people are

00:04:56,639 --> 00:04:59,520
doing some amazing work here so check

00:04:58,960 --> 00:05:03,039
out

00:04:59,520 --> 00:05:05,600
the the hyphen guild dot dev you can see

00:05:03,039 --> 00:05:06,080
here are their open source projects so

00:05:05,600 --> 00:05:07,680
this is

00:05:06,080 --> 00:05:10,000
really where you're going to want to

00:05:07,680 --> 00:05:13,360
look at some of these tools

00:05:10,000 --> 00:05:14,800
and so first up on our list of wonderful

00:05:13,360 --> 00:05:18,560
tools from the guild

00:05:14,800 --> 00:05:20,720
is graphql cogen now this talk may be a

00:05:18,560 --> 00:05:23,759
little bit lopsided because

00:05:20,720 --> 00:05:24,160
this thing is massive okay graphql code

00:05:23,759 --> 00:05:27,680
gen

00:05:24,160 --> 00:05:30,720
is very very massive and very very good

00:05:27,680 --> 00:05:33,840
so let's dive into why it is good

00:05:30,720 --> 00:05:36,880
and we can actually check out in our

00:05:33,840 --> 00:05:37,600
level up tutorials code base our cogen

00:05:36,880 --> 00:05:40,320
file

00:05:37,600 --> 00:05:40,800
and see what it outputs now our code gen

00:05:40,320 --> 00:05:43,840
file

00:05:40,800 --> 00:05:47,120
is maybe not necessarily complete

00:05:43,840 --> 00:05:48,720
uh i i do want to emphasize that like

00:05:47,120 --> 00:05:50,639
these things are always changing for us

00:05:48,720 --> 00:05:52,000
so if you notice something that could be

00:05:50,639 --> 00:05:54,320
better in our cogent

00:05:52,000 --> 00:05:55,680
file we probably have already noticed it

00:05:54,320 --> 00:05:57,280
ourselves

00:05:55,680 --> 00:05:59,680
but you know with any of these things

00:05:57,280 --> 00:06:03,440
it's it's a big big change to make so

00:05:59,680 --> 00:06:06,319
what is graphql code generator

00:06:03,440 --> 00:06:08,000
well graphql hyphen code hyphen

00:06:06,319 --> 00:06:09,919
generator dot com you can

00:06:08,000 --> 00:06:11,600
change the night mode or day mode here i

00:06:09,919 --> 00:06:12,960
typically like dark mode but

00:06:11,600 --> 00:06:14,319
uh for the sake of this video i'll

00:06:12,960 --> 00:06:15,199
probably leave it in light mode here so

00:06:14,319 --> 00:06:16,960
we can see

00:06:15,199 --> 00:06:18,400
now you can see that this is got this

00:06:16,960 --> 00:06:21,680
guild banner it's got this

00:06:18,400 --> 00:06:24,400
neat uh um illustration and

00:06:21,680 --> 00:06:26,560
everything looks pretty cool here and

00:06:24,400 --> 00:06:27,039
the promise of a graphql code gener

00:06:26,560 --> 00:06:29,120
certainly

00:06:27,039 --> 00:06:31,199
sounds nice right but what does this

00:06:29,120 --> 00:06:35,360
thing do

00:06:31,199 --> 00:06:37,600
well it it takes in a graphql file

00:06:35,360 --> 00:06:39,360
such as something like this and it can

00:06:37,600 --> 00:06:42,000
spit out a whole lot

00:06:39,360 --> 00:06:43,120
it can spit out your typescript types up

00:06:42,000 --> 00:06:44,880
and down the stack so

00:06:43,120 --> 00:06:47,039
imagine never having to write a

00:06:44,880 --> 00:06:49,120
typescript type on the front end

00:06:47,039 --> 00:06:50,880
or the back end uh for your entire

00:06:49,120 --> 00:06:52,880
graphql project you just import

00:06:50,880 --> 00:06:54,560
the type and it's typed correctly it

00:06:52,880 --> 00:06:56,880
knows what it's looking for

00:06:54,560 --> 00:06:58,479
um and the types are massive right

00:06:56,880 --> 00:07:00,319
there's just so much here so if you're

00:06:58,479 --> 00:07:01,080
using typescript that benefit alone

00:07:00,319 --> 00:07:04,400
should make you

00:07:01,080 --> 00:07:05,919
extremely happy or extremely curious

00:07:04,400 --> 00:07:08,560
because

00:07:05,919 --> 00:07:09,520
yes generated code can get a little

00:07:08,560 --> 00:07:12,240
hairy sometimes

00:07:09,520 --> 00:07:13,759
but let me tell you this has just been

00:07:12,240 --> 00:07:16,960
endlessly important for us

00:07:13,759 --> 00:07:17,440
to get stuff done fast but not only will

00:07:16,960 --> 00:07:20,080
it

00:07:17,440 --> 00:07:21,360
generate your types it can also generate

00:07:20,080 --> 00:07:22,800
much more than that right

00:07:21,360 --> 00:07:25,280
generate your your types for your

00:07:22,800 --> 00:07:28,479
resolvers types for your front end but

00:07:25,280 --> 00:07:32,000
it will also generate your react

00:07:28,479 --> 00:07:34,560
hooks for apollo so that you just import

00:07:32,000 --> 00:07:35,360
the hook that's already created no more

00:07:34,560 --> 00:07:37,840
importing

00:07:35,360 --> 00:07:39,360
use query and then having to import your

00:07:37,840 --> 00:07:42,319
query and putting your query

00:07:39,360 --> 00:07:42,720
into your code well you get to actually

00:07:42,319 --> 00:07:44,960
have an

00:07:42,720 --> 00:07:46,879
imported query and the best part is

00:07:44,960 --> 00:07:49,039
those are all typed as well

00:07:46,879 --> 00:07:50,160
so if you use typescript it's it's sort

00:07:49,039 --> 00:07:53,360
of doing everything

00:07:50,160 --> 00:07:55,360
for you which is fantastic

00:07:53,360 --> 00:07:56,960
but uh this may seem like an

00:07:55,360 --> 00:07:59,680
advertisement i have no connection to

00:07:56,960 --> 00:08:03,120
this thing i just use and love it okay

00:07:59,680 --> 00:08:05,199
so that seems great right

00:08:03,120 --> 00:08:06,160
but maybe you're not using apollo maybe

00:08:05,199 --> 00:08:07,840
you're not using

00:08:06,160 --> 00:08:09,680
uh typescript maybe you're not using

00:08:07,840 --> 00:08:12,800
this or that uh

00:08:09,680 --> 00:08:16,160
have no fear this thing is like i said

00:08:12,800 --> 00:08:17,680
massive so let's get into it here the

00:08:16,160 --> 00:08:20,800
installation process

00:08:17,680 --> 00:08:24,160
is really just creating a

00:08:20,800 --> 00:08:25,120
code gen file so you initialize it with

00:08:24,160 --> 00:08:27,759
npx

00:08:25,120 --> 00:08:28,879
graphql cogen init that's going to

00:08:27,759 --> 00:08:32,960
create a code

00:08:28,879 --> 00:08:32,960
gen file for you and then

00:08:33,279 --> 00:08:36,959
you just need to write a script that

00:08:35,839 --> 00:08:40,000
runs graphql

00:08:36,959 --> 00:08:41,680
code gen such as this npm run generate

00:08:40,000 --> 00:08:44,479
and it's going to look at the code gen

00:08:41,680 --> 00:08:44,479
yaml file

00:08:45,200 --> 00:08:52,000
and it's going to do some work so

00:08:49,120 --> 00:08:54,160
let's before we get into the plug-ins

00:08:52,000 --> 00:08:56,320
let's take a look at what we're using

00:08:54,160 --> 00:09:00,320
this for so i'm going to head to my

00:08:56,320 --> 00:09:01,240
code gen i think it's called codegen

00:09:00,320 --> 00:09:04,480
code

00:09:01,240 --> 00:09:07,200
gen.yaml if you're wondering this color

00:09:04,480 --> 00:09:08,800
scheme is called retreon a lot of people

00:09:07,200 --> 00:09:11,519
ask about this

00:09:08,800 --> 00:09:14,560
in fact we can even do color themes

00:09:11,519 --> 00:09:16,399
retreon r-e-t-r-e-o-n

00:09:14,560 --> 00:09:18,080
something that people ask about okay so

00:09:16,399 --> 00:09:22,000
we have retron here

00:09:18,080 --> 00:09:24,640
and this is my code gen

00:09:22,000 --> 00:09:26,399
yaml file you'll notice we use a couple

00:09:24,640 --> 00:09:27,440
of plugins because plugins are really

00:09:26,399 --> 00:09:30,480
the the

00:09:27,440 --> 00:09:32,320
lifeblood of this thing right now we

00:09:30,480 --> 00:09:33,920
could output these into multiple files

00:09:32,320 --> 00:09:35,839
if we wanted to but right now we're just

00:09:33,920 --> 00:09:36,800
sort of dumping it into one large file

00:09:35,839 --> 00:09:38,480
and in the future

00:09:36,800 --> 00:09:40,560
we'll probably have different files for

00:09:38,480 --> 00:09:41,200
types and resolvers and whatever right

00:09:40,560 --> 00:09:43,040
because we

00:09:41,200 --> 00:09:44,800
we don't need all that stuff in one file

00:09:43,040 --> 00:09:46,800
but that's the way it is

00:09:44,800 --> 00:09:48,720
so what are we doing here well we're

00:09:46,800 --> 00:09:51,680
saying each time you run this code gen

00:09:48,720 --> 00:09:53,680
overwrite it seems fair right next we

00:09:51,680 --> 00:09:55,839
have a schema where instead of passing

00:09:53,680 --> 00:09:56,800
in the actual schema we're passing it in

00:09:55,839 --> 00:09:58,800
a location

00:09:56,800 --> 00:10:00,320
to the api that's running that way it

00:09:58,800 --> 00:10:01,920
hits the api that's

00:10:00,320 --> 00:10:03,760
actually running you can actually pass

00:10:01,920 --> 00:10:06,000
this in the schema itself

00:10:03,760 --> 00:10:07,760
as well i don't know if there's any

00:10:06,000 --> 00:10:09,279
benefits to doing it either way

00:10:07,760 --> 00:10:11,040
this way has just worked fine for us

00:10:09,279 --> 00:10:13,839
right next

00:10:11,040 --> 00:10:14,640
we have the documents now this is where

00:10:13,839 --> 00:10:17,680
you tell

00:10:14,640 --> 00:10:19,440
graphql cogen where your your graphql

00:10:17,680 --> 00:10:21,200
code is living and i say hey

00:10:19,440 --> 00:10:23,279
look for anything in this entire project

00:10:21,200 --> 00:10:26,640
that has a dot graphql file

00:10:23,279 --> 00:10:29,120
you'll notice uh let's see sorry this

00:10:26,640 --> 00:10:32,720
opened up my npm folders

00:10:29,120 --> 00:10:35,120
let's say we head to

00:10:32,720 --> 00:10:35,760
the checkup process any of these right

00:10:35,120 --> 00:10:39,519
the

00:10:35,760 --> 00:10:42,079
uh create subscription right

00:10:39,519 --> 00:10:43,440
this is a mutation that we wrote it's a

00:10:42,079 --> 00:10:45,440
graphql file

00:10:43,440 --> 00:10:47,600
and cogen is going to find that and

00:10:45,440 --> 00:10:49,920
generate the types for it

00:10:47,600 --> 00:10:51,920
so this generates is going to say okay

00:10:49,920 --> 00:10:53,440
well what are we going to generate well

00:10:51,920 --> 00:10:54,959
for us it's going to output everything

00:10:53,440 --> 00:10:56,800
into one file like i said

00:10:54,959 --> 00:10:58,800
non-ideal probably going to be changed

00:10:56,800 --> 00:10:59,680
at some point either way it's outputting

00:10:58,800 --> 00:11:02,160
it to one file

00:10:59,680 --> 00:11:03,440
types generated.ts we'll take a look at

00:11:02,160 --> 00:11:05,680
that file

00:11:03,440 --> 00:11:07,360
we have some configuration okay the

00:11:05,680 --> 00:11:08,320
context type is interesting because

00:11:07,360 --> 00:11:11,519
we're passing in

00:11:08,320 --> 00:11:14,000
the user context which means that

00:11:11,519 --> 00:11:15,760
we have a custom type defined for our

00:11:14,000 --> 00:11:19,040
context which is going to be our

00:11:15,760 --> 00:11:21,040
user that way we can get our user data

00:11:19,040 --> 00:11:23,040
passed along to all of this stuff we're

00:11:21,040 --> 00:11:24,560
also saying hey use react apollo version

00:11:23,040 --> 00:11:27,519
3 that's what we're using

00:11:24,560 --> 00:11:28,240
you with hooks true with a higher order

00:11:27,519 --> 00:11:30,959
components

00:11:28,240 --> 00:11:32,000
false you can have this output a lot of

00:11:30,959 --> 00:11:35,200
stuff right

00:11:32,000 --> 00:11:36,560
using hooks yes you get your hooks you

00:11:35,200 --> 00:11:38,480
use higher order components you get your

00:11:36,560 --> 00:11:40,880
higher components you got it right

00:11:38,480 --> 00:11:42,000
a lot of neat stuff next we're telling

00:11:40,880 --> 00:11:44,079
the plugins that we're using

00:11:42,000 --> 00:11:45,920
typescript typescript operations

00:11:44,079 --> 00:11:47,200
typescript react apollo which gives us

00:11:45,920 --> 00:11:49,760
our hooks and then typescript

00:11:47,200 --> 00:11:51,440
resolvers which gives us our types okay

00:11:49,760 --> 00:11:52,720
so let's see some of this in action here

00:11:51,440 --> 00:11:54,079
in fact we can even

00:11:52,720 --> 00:11:56,320
i think i have the site running right

00:11:54,079 --> 00:11:59,920
now so if i run i can just do npm

00:11:56,320 --> 00:12:02,079
run and then it's code gen you can see

00:11:59,920 --> 00:12:03,279
this is going to hit this it's going to

00:12:02,079 --> 00:12:05,519
create our our

00:12:03,279 --> 00:12:07,279
regenerate it and that's that some

00:12:05,519 --> 00:12:09,279
people can set this up on an

00:12:07,279 --> 00:12:10,800
action or do it on commits or deploys or

00:12:09,279 --> 00:12:11,600
something i personally just run it

00:12:10,800 --> 00:12:14,560
manually

00:12:11,600 --> 00:12:15,040
because i don't change the api that much

00:12:14,560 --> 00:12:17,360
okay

00:12:15,040 --> 00:12:18,959
so we have this let's go ahead and take

00:12:17,360 --> 00:12:20,480
a look at

00:12:18,959 --> 00:12:23,040
some of the stuff that it outputs for

00:12:20,480 --> 00:12:26,079
instance we have our tutorials here

00:12:23,040 --> 00:12:28,160
and we have maybe a resolvers file now

00:12:26,079 --> 00:12:30,399
the resolvers file is just

00:12:28,160 --> 00:12:31,440
like we would expect with any graphql

00:12:30,399 --> 00:12:34,560
resolvers we

00:12:31,440 --> 00:12:36,560
are exporting an object of resolvers and

00:12:34,560 --> 00:12:38,480
inside of that we have our query

00:12:36,560 --> 00:12:39,920
and then we get to nail down which

00:12:38,480 --> 00:12:43,120
specific query we

00:12:39,920 --> 00:12:43,839
are resolving right now what's neat

00:12:43,120 --> 00:12:45,920
about this

00:12:43,839 --> 00:12:47,519
for us is that because we use all the

00:12:45,920 --> 00:12:50,959
generated we can simply just

00:12:47,519 --> 00:12:52,800
import resolvers as in hey all of the

00:12:50,959 --> 00:12:54,880
resolvers from types generated and say

00:12:52,800 --> 00:12:57,839
hey you know these tutorial resolvers

00:12:54,880 --> 00:12:59,200
uh these are using the resolvers type

00:12:57,839 --> 00:13:02,079
now the best part about that

00:12:59,200 --> 00:13:03,040
is all of your arguments all of your

00:13:02,079 --> 00:13:05,839
context

00:13:03,040 --> 00:13:06,480
everything in your resolvers is now

00:13:05,839 --> 00:13:08,480
typed

00:13:06,480 --> 00:13:10,000
and you can see action of this by let me

00:13:08,480 --> 00:13:12,240
just change one of these i can save it

00:13:10,000 --> 00:13:14,000
property yo does not exist on required

00:13:12,240 --> 00:13:17,200
fields query all tutorials

00:13:14,000 --> 00:13:20,160
you only get limit and filter wow wow

00:13:17,200 --> 00:13:22,079
imagine right imagine now uh it cleans

00:13:20,160 --> 00:13:23,839
up your code so much because now

00:13:22,079 --> 00:13:25,920
you're never gonna uh you're if you make

00:13:23,839 --> 00:13:26,959
a change to your api typescript's gonna

00:13:25,920 --> 00:13:28,480
yell at you if you

00:13:26,959 --> 00:13:30,079
uh try to do something interesting

00:13:28,480 --> 00:13:31,839
typescript's gonna yell at you without

00:13:30,079 --> 00:13:34,320
having those proper changes

00:13:31,839 --> 00:13:35,440
it's fantastic i cannot emphasize this

00:13:34,320 --> 00:13:39,440
enough look at how

00:13:35,440 --> 00:13:41,279
easy that is oh yes okay very cool right

00:13:39,440 --> 00:13:43,279
so that's just the server side and on

00:13:41,279 --> 00:13:43,600
the front-end side of things we also can

00:13:43,279 --> 00:13:46,480
do

00:13:43,600 --> 00:13:48,000
let's do do a fun one here this is some

00:13:46,480 --> 00:13:50,399
admin code let's not look at that let's

00:13:48,000 --> 00:13:50,399
look at

00:13:50,639 --> 00:13:54,000
i might have some ts errors in here so

00:13:52,399 --> 00:13:55,760
i'm trying to try to

00:13:54,000 --> 00:13:58,639
augment what i'm showing you so that my

00:13:55,760 --> 00:13:58,639
code looks nicer

00:13:59,120 --> 00:14:03,519
so let's take a look at i kind of like

00:14:01,600 --> 00:14:06,399
some of this stuff in the my account

00:14:03,519 --> 00:14:07,600
so let's say the uh that's a bad one my

00:14:06,399 --> 00:14:09,920
downloads

00:14:07,600 --> 00:14:11,680
okay so my downloads is interesting

00:14:09,920 --> 00:14:12,959
because when a user creates an account

00:14:11,680 --> 00:14:15,199
on level of tutorials

00:14:12,959 --> 00:14:17,040
are there a pro account they get access

00:14:15,199 --> 00:14:18,399
to all of the downloads on the entire

00:14:17,040 --> 00:14:19,120
site you can download anything you want

00:14:18,399 --> 00:14:21,839
right

00:14:19,120 --> 00:14:23,199
what's neat about this is that before

00:14:21,839 --> 00:14:26,959
what we would have to do

00:14:23,199 --> 00:14:29,440
is import where's the user

00:14:26,959 --> 00:14:30,560
downloads whatever graphql file that we

00:14:29,440 --> 00:14:33,600
have user

00:14:30,560 --> 00:14:35,920
downloads query so we would have to

00:14:33,600 --> 00:14:36,720
import to this file and then we would

00:14:35,920 --> 00:14:40,000
have to import

00:14:36,720 --> 00:14:43,040
use query from graphql right now

00:14:40,000 --> 00:14:46,240
the sorry about this let me lost my file

00:14:43,040 --> 00:14:49,360
now the bummer about that

00:14:46,240 --> 00:14:50,000
let me go back now the bummer about that

00:14:49,360 --> 00:14:51,680
is that

00:14:50,000 --> 00:14:53,120
well then we have to like type all of

00:14:51,680 --> 00:14:54,639
this stuff ourselves because sure

00:14:53,120 --> 00:14:58,399
graphql types it

00:14:54,639 --> 00:15:02,000
but graphql cogener types it to your api

00:14:58,399 --> 00:15:04,480
exactly in a way that is uh

00:15:02,000 --> 00:15:05,199
recognized throughout the entire api so

00:15:04,480 --> 00:15:07,279
now

00:15:05,199 --> 00:15:09,600
the minimal types that we have to import

00:15:07,279 --> 00:15:12,720
is just user downloads query

00:15:09,600 --> 00:15:14,720
which is just our our query here

00:15:12,720 --> 00:15:16,880
our hook and if we inspect this hook

00:15:14,720 --> 00:15:18,160
this is what's generated export function

00:15:16,880 --> 00:15:20,639
user download

00:15:18,160 --> 00:15:22,720
and look at this it's all just set up

00:15:20,639 --> 00:15:25,920
for you use apollo use query

00:15:22,720 --> 00:15:26,800
and it's all correctly typed with apollo

00:15:25,920 --> 00:15:28,560
everything

00:15:26,800 --> 00:15:30,320
including you got your documents if you

00:15:28,560 --> 00:15:32,240
need access to your documents

00:15:30,320 --> 00:15:34,079
so much cool stuff here now i could go

00:15:32,240 --> 00:15:35,279
on and on and on about this stuff

00:15:34,079 --> 00:15:38,320
but let's take a look at some of the

00:15:35,279 --> 00:15:39,759
plugins that exist because

00:15:38,320 --> 00:15:41,600
like i said you might not be running

00:15:39,759 --> 00:15:43,920
when i'm running and if we look at the

00:15:41,600 --> 00:15:47,199
plug-ins for graphql code generator

00:15:43,920 --> 00:15:49,199
uh let your jaw hit the floor oh

00:15:47,199 --> 00:15:50,560
my right look at how many look at how

00:15:49,199 --> 00:15:53,440
many of these things there are

00:15:50,560 --> 00:15:54,639
uh typescript react apollo types view

00:15:53,440 --> 00:15:57,600
apollo typescript

00:15:54,639 --> 00:15:58,320
urkel use an urkel they got you a

00:15:57,600 --> 00:16:00,800
stencil

00:15:58,320 --> 00:16:02,079
even typescript mongodb which even

00:16:00,800 --> 00:16:04,160
though we're using

00:16:02,079 --> 00:16:05,839
we're not using this one maybe an

00:16:04,160 --> 00:16:09,279
opportunity right

00:16:05,839 --> 00:16:11,600
typescript graphql file modules

00:16:09,279 --> 00:16:13,199
so many cool things add any string you

00:16:11,600 --> 00:16:16,320
wish to the output file

00:16:13,199 --> 00:16:18,880
schema ast fragment matcher named

00:16:16,320 --> 00:16:20,160
operations introspection

00:16:18,880 --> 00:16:22,079
even just a little simple things like

00:16:20,160 --> 00:16:24,639
adding the generation time to the output

00:16:22,079 --> 00:16:27,199
file whatever but if you're not a web

00:16:24,639 --> 00:16:28,720
dev fear not we have ones for kotlin

00:16:27,199 --> 00:16:31,839
java java resolvers

00:16:28,720 --> 00:16:34,399
java apollo android uh

00:16:31,839 --> 00:16:36,800
wow um if it sounds like i'm excited

00:16:34,399 --> 00:16:37,360
about this i am because i use so much of

00:16:36,800 --> 00:16:40,480
this

00:16:37,360 --> 00:16:41,839
stuff that is unbelievable so if you

00:16:40,480 --> 00:16:43,199
check out these plugins we have

00:16:41,839 --> 00:16:44,399
everything

00:16:43,199 --> 00:16:46,120
so if you check out these plugins they

00:16:44,399 --> 00:16:47,759
have everything from

00:16:46,120 --> 00:16:49,120
typescriptflowreasonjava.net utilities

00:16:47,759 --> 00:16:51,600
okay

00:16:49,120 --> 00:16:52,399
and let's talk about graphql eslint

00:16:51,600 --> 00:16:54,880
which is another

00:16:52,399 --> 00:16:56,800
fantastic tool here from this team

00:16:54,880 --> 00:17:00,320
graphql eslint

00:16:56,800 --> 00:17:03,519
is a way to lint your graphql files

00:17:00,320 --> 00:17:04,079
you can see they have little unloads it

00:17:03,519 --> 00:17:06,799
works

00:17:04,079 --> 00:17:07,679
with eslint thank you yes lent is

00:17:06,799 --> 00:17:09,439
fantastic

00:17:07,679 --> 00:17:11,520
which i use personally so it's nice to

00:17:09,439 --> 00:17:12,640
be able to use eslint as one tool

00:17:11,520 --> 00:17:15,199
instead of adding

00:17:12,640 --> 00:17:16,640
a whole other tool it works on your dot

00:17:15,199 --> 00:17:19,679
graphql files or

00:17:16,640 --> 00:17:23,039
gql which many people use

00:17:19,679 --> 00:17:26,799
and uh it lends

00:17:23,039 --> 00:17:26,799
your schema in its operations

00:17:27,120 --> 00:17:31,280
it validates and predefines and checks

00:17:29,600 --> 00:17:33,600
your graphql schema

00:17:31,280 --> 00:17:35,120
so it's an easy drop-in integrates with

00:17:33,600 --> 00:17:36,880
vs code and webstorm

00:17:35,120 --> 00:17:38,720
this is an easy drop-in into your

00:17:36,880 --> 00:17:41,039
project you can see the setup is mostly

00:17:38,720 --> 00:17:44,000
just adding it as a config here

00:17:41,039 --> 00:17:45,760
it's an easy drop-in and it works all

00:17:44,000 --> 00:17:47,760
the available rules you can augment it

00:17:45,760 --> 00:17:48,400
and change it just like any other eslint

00:17:47,760 --> 00:17:50,160
plugin

00:17:48,400 --> 00:17:52,960
so i highly recommend giving this one a

00:17:50,160 --> 00:17:53,679
look okay next is going to be graphql

00:17:52,960 --> 00:17:55,440
tools which

00:17:53,679 --> 00:17:57,039
gives you some really interesting things

00:17:55,440 --> 00:17:58,880
now the things that we use out of this

00:17:57,039 --> 00:18:00,720
are specifically the schema merging

00:17:58,880 --> 00:18:03,280
resolver merging and mocking

00:18:00,720 --> 00:18:04,559
now sometimes let me open this up in a

00:18:03,280 --> 00:18:05,360
new tab and let's take a look at our

00:18:04,559 --> 00:18:07,600
code again

00:18:05,360 --> 00:18:08,720
now sometimes when you are creating an

00:18:07,600 --> 00:18:12,960
api

00:18:08,720 --> 00:18:12,960
let me say apollo

00:18:13,480 --> 00:18:18,720
apollo resolvers

00:18:16,880 --> 00:18:21,520
graphql resolvers that's what we named

00:18:18,720 --> 00:18:21,520
the file so

00:18:22,799 --> 00:18:26,080
so sometimes when you're creating maybe

00:18:24,880 --> 00:18:28,000
your resolvers

00:18:26,080 --> 00:18:29,840
uh sometimes you don't know what to do

00:18:28,000 --> 00:18:30,320
here in fact we just did a simple low

00:18:29,840 --> 00:18:32,559
dash

00:18:30,320 --> 00:18:34,240
merge to merge all of our resolvers

00:18:32,559 --> 00:18:35,200
right but if you look at the type

00:18:34,240 --> 00:18:37,120
definitions

00:18:35,200 --> 00:18:38,799
there can be some issues with type

00:18:37,120 --> 00:18:39,600
definitions when you're trying to merge

00:18:38,799 --> 00:18:40,960
them in fact

00:18:39,600 --> 00:18:43,039
in the past we had done something

00:18:40,960 --> 00:18:44,559
similar with a low dash merge but what

00:18:43,039 --> 00:18:48,080
you end up having is

00:18:44,559 --> 00:18:49,200
let's say you have um one type defined

00:18:48,080 --> 00:18:51,360
somewhere else

00:18:49,200 --> 00:18:52,960
uh and as a query and another type to

00:18:51,360 --> 00:18:55,039
find somewhere else is a query

00:18:52,960 --> 00:18:57,679
now if you don't put the extend keyword

00:18:55,039 --> 00:19:00,640
in there graphql is going to complain

00:18:57,679 --> 00:19:02,720
that you have multiple query resolvers

00:19:00,640 --> 00:19:05,679
defined or multiple query types

00:19:02,720 --> 00:19:07,760
defined not resolvers and that's really

00:19:05,679 --> 00:19:08,080
obnoxious to anyone who's getting into

00:19:07,760 --> 00:19:09,600
this

00:19:08,080 --> 00:19:11,440
they may think what do i got to create

00:19:09,600 --> 00:19:12,559
all the queries in one and one type

00:19:11,440 --> 00:19:14,240
that's crazy

00:19:12,559 --> 00:19:16,320
and it is crazy and i wouldn't do it

00:19:14,240 --> 00:19:18,559
right so

00:19:16,320 --> 00:19:19,440
what uh graphql tools gives you is this

00:19:18,559 --> 00:19:21,280
neat merge

00:19:19,440 --> 00:19:23,039
type defs which means that you don't

00:19:21,280 --> 00:19:25,039
have to even think about it for

00:19:23,039 --> 00:19:26,720
for instance i only see one of these a

00:19:25,039 --> 00:19:30,400
query

00:19:26,720 --> 00:19:33,360
um sorry let's do a graphql

00:19:30,400 --> 00:19:34,080
let's do posts maybe you can see that we

00:19:33,360 --> 00:19:36,400
have

00:19:34,080 --> 00:19:38,400
uh extend type query and that's really

00:19:36,400 --> 00:19:40,320
legacy code we could get rid of this

00:19:38,400 --> 00:19:42,000
extended here and because we're using

00:19:40,320 --> 00:19:42,480
the graphql tools it's just going to

00:19:42,000 --> 00:19:43,919
work

00:19:42,480 --> 00:19:45,840
it's going to merge them for you without

00:19:43,919 --> 00:19:47,919
you having to think about it now another

00:19:45,840 --> 00:19:50,000
thing that we use here is the mocking

00:19:47,919 --> 00:19:52,799
tools now our mocking setup for

00:19:50,000 --> 00:19:53,600
tests is pretty extensive and i won't be

00:19:52,799 --> 00:19:56,559
able to get

00:19:53,600 --> 00:19:56,960
through all of it uh but it's pretty

00:19:56,559 --> 00:19:58,640
neat

00:19:56,960 --> 00:20:00,799
and i want to at least show you a little

00:19:58,640 --> 00:20:03,039
bit of it i built this thing

00:20:00,799 --> 00:20:04,640
now this thing is called makmang okay

00:20:03,039 --> 00:20:06,880
the name is obviously a joke but what

00:20:04,640 --> 00:20:08,720
does this thing do well it uses some

00:20:06,880 --> 00:20:11,039
tools for instance it uses add

00:20:08,720 --> 00:20:13,840
mocks to schema from graphql tools and

00:20:11,039 --> 00:20:16,480
it uses make executable schema from

00:20:13,840 --> 00:20:18,480
graphql tools not from apollo reason

00:20:16,480 --> 00:20:21,200
being what we're doing here is we're

00:20:18,480 --> 00:20:23,200
importing our entire api so we're

00:20:21,200 --> 00:20:25,520
importing all of our queries

00:20:23,200 --> 00:20:26,880
in here so we're importing all of our

00:20:25,520 --> 00:20:29,039
type definitions

00:20:26,880 --> 00:20:30,880
and what we end up doing is let's scroll

00:20:29,039 --> 00:20:34,799
down to the the good stuff

00:20:30,880 --> 00:20:36,240
here is we make a schema using our type

00:20:34,799 --> 00:20:39,360
definitions

00:20:36,240 --> 00:20:42,480
we so what we do is we make a schema

00:20:39,360 --> 00:20:45,280
of our type definitions we add some

00:20:42,480 --> 00:20:45,919
overrides to our mocks using these mocks

00:20:45,280 --> 00:20:48,480
here

00:20:45,919 --> 00:20:49,039
and then what happens in the mockman

00:20:48,480 --> 00:20:52,159
function

00:20:49,039 --> 00:20:55,360
is that we can then call graphql

00:20:52,159 --> 00:20:56,960
with our mocked schema okay

00:20:55,360 --> 00:20:58,640
these other properties we don't need to

00:20:56,960 --> 00:20:59,919
worry too much about them

00:20:58,640 --> 00:21:01,919
they're just allowing us to pass in

00:20:59,919 --> 00:21:04,159
variables and whatever and then we're

00:21:01,919 --> 00:21:07,280
setting the data loading to be false

00:21:04,159 --> 00:21:08,640
because this is going to spit out a fake

00:21:07,280 --> 00:21:12,159
amount of data for

00:21:08,640 --> 00:21:12,880
anything that you want as in by calling

00:21:12,159 --> 00:21:15,360
this function

00:21:12,880 --> 00:21:16,480
all we have to do is pass in a query

00:21:15,360 --> 00:21:18,559
which will then just get

00:21:16,480 --> 00:21:21,120
put into this graphql function and then

00:21:18,559 --> 00:21:24,000
variables and it's going to spit out

00:21:21,120 --> 00:21:24,400
mocked fake data that is going to be of

00:21:24,000 --> 00:21:27,840
your

00:21:24,400 --> 00:21:30,000
own api because your entire api is typed

00:21:27,840 --> 00:21:32,080
it's going to fill in strings or strings

00:21:30,000 --> 00:21:35,520
and whatever making it super easy

00:21:32,080 --> 00:21:37,200
and at the same time we can override

00:21:35,520 --> 00:21:39,280
any sort of mocks that we want for

00:21:37,200 --> 00:21:40,240
instance date just always ends up being

00:21:39,280 --> 00:21:43,679
a new date

00:21:40,240 --> 00:21:44,960
or we have like a a an id or created at

00:21:43,679 --> 00:21:45,679
things that we're looking for in our

00:21:44,960 --> 00:21:48,640
tests

00:21:45,679 --> 00:21:50,880
specifically now another cool thing i

00:21:48,640 --> 00:21:52,799
did is i took that mocked provider which

00:21:50,880 --> 00:21:55,039
you will need in your tests

00:21:52,799 --> 00:21:56,880
and i wrapped it around the memory

00:21:55,039 --> 00:21:58,000
router and the context provider and the

00:21:56,880 --> 00:22:00,559
helmet provider or whatever

00:21:58,000 --> 00:22:02,799
and i made this test wrapper so anytime

00:22:00,559 --> 00:22:04,480
in any of our tests whatsoever all we

00:22:02,799 --> 00:22:06,400
have to do

00:22:04,480 --> 00:22:08,799
in fact let me find one of our tests for

00:22:06,400 --> 00:22:10,559
this any of our tests

00:22:08,799 --> 00:22:12,480
so what's cool about this is that any of

00:22:10,559 --> 00:22:13,600
our tests that exist you'll see some

00:22:12,480 --> 00:22:16,000
typescript errors in here

00:22:13,600 --> 00:22:16,720
my apologies any of our tests that we

00:22:16,000 --> 00:22:19,440
ever want

00:22:16,720 --> 00:22:20,320
all we have to do is because this is an

00:22:19,440 --> 00:22:23,679
apollo project

00:22:20,320 --> 00:22:25,440
we all know that uh testing in apollo

00:22:23,679 --> 00:22:27,039
is great for some things but and

00:22:25,440 --> 00:22:29,520
sometimes there can be some really

00:22:27,039 --> 00:22:31,200
frustration where your your api is head

00:22:29,520 --> 00:22:32,640
butting with what it's expected and the

00:22:31,200 --> 00:22:33,919
errors aren't coming in correctly and

00:22:32,640 --> 00:22:34,559
you've got to do all this stuff so what

00:22:33,919 --> 00:22:37,200
we do

00:22:34,559 --> 00:22:39,200
is we run our prepare mocks function

00:22:37,200 --> 00:22:40,080
which basically allows us to pass an

00:22:39,200 --> 00:22:42,480
array of

00:22:40,080 --> 00:22:43,200
all of the queries that we're expecting

00:22:42,480 --> 00:22:45,200
now this is

00:22:43,200 --> 00:22:47,679
receipt document this was generated by

00:22:45,200 --> 00:22:48,400
graphql cogen and receipt document is

00:22:47,679 --> 00:22:51,840
really

00:22:48,400 --> 00:22:54,000
just a gql of the query itself

00:22:51,840 --> 00:22:55,440
so this is really just a graphql query

00:22:54,000 --> 00:22:55,919
we're passing in the variables we want

00:22:55,440 --> 00:22:59,120
to see

00:22:55,919 --> 00:23:01,760
this is the uh the target receipt id

00:22:59,120 --> 00:23:03,200
and it's going to spit us out fake data

00:23:01,760 --> 00:23:05,360
tons of fake data in fact

00:23:03,200 --> 00:23:07,360
fake data that we can then test against

00:23:05,360 --> 00:23:08,000
so we can check to make sure that things

00:23:07,360 --> 00:23:10,559
like

00:23:08,000 --> 00:23:12,159
the order the order number on the

00:23:10,559 --> 00:23:14,159
receipt is equal to

00:23:12,159 --> 00:23:16,240
the actual order number from the mock

00:23:14,159 --> 00:23:19,280
data that way we know the mock data

00:23:16,240 --> 00:23:21,919
is actually hitting a real fake ap a

00:23:19,280 --> 00:23:23,039
real fake api in our code and spitting

00:23:21,919 --> 00:23:25,440
out the right data

00:23:23,039 --> 00:23:27,200
so these are some of the graphql tools

00:23:25,440 --> 00:23:28,880
that exist in here but

00:23:27,200 --> 00:23:30,640
if that stuff doesn't really get you

00:23:28,880 --> 00:23:34,000
going there is

00:23:30,640 --> 00:23:36,880
a ton of stuff uh in here let me

00:23:34,000 --> 00:23:38,159
see so gener uh generating an executable

00:23:36,880 --> 00:23:41,279
schema resolvers

00:23:38,159 --> 00:23:43,039
uh custom scalars and enums like and

00:23:41,279 --> 00:23:45,600
there's just a lot of

00:23:43,039 --> 00:23:46,480
neat stuff here schema directives

00:23:45,600 --> 00:23:49,039
directive

00:23:46,480 --> 00:23:50,159
resolvers schema delegation you could

00:23:49,039 --> 00:23:52,640
spend an entire

00:23:50,159 --> 00:23:54,799
day reading through this documentation

00:23:52,640 --> 00:23:56,640
and i highly recommend you do

00:23:54,799 --> 00:23:58,000
because even though we're only using a

00:23:56,640 --> 00:23:58,720
tiny bit of this stuff in our

00:23:58,000 --> 00:24:00,559
application

00:23:58,720 --> 00:24:02,880
there's so much more that i would prefer

00:24:00,559 --> 00:24:06,080
to use if given the opportunity

00:24:02,880 --> 00:24:06,799
okay so this is the graphql tools repo

00:24:06,080 --> 00:24:08,480
now there's

00:24:06,799 --> 00:24:10,960
some more tools many of which we might

00:24:08,480 --> 00:24:13,360
even know um and i'm sorry for the guild

00:24:10,960 --> 00:24:14,159
because there's more here like graphql

00:24:13,360 --> 00:24:15,840
mesh

00:24:14,159 --> 00:24:18,799
i just would be talking about this stuff

00:24:15,840 --> 00:24:21,600
all day a graphql modules graphql

00:24:18,799 --> 00:24:23,360
inspector inspectors are kind of neat

00:24:21,600 --> 00:24:24,640
because it's useful in your continuous

00:24:23,360 --> 00:24:27,039
integration tools

00:24:24,640 --> 00:24:29,279
so again check all this stuff out and

00:24:27,039 --> 00:24:31,440
let's get into playground okay

00:24:29,279 --> 00:24:33,039
now playground as you may know is

00:24:31,440 --> 00:24:34,000
basically an upgraded version of

00:24:33,039 --> 00:24:36,880
graphical now

00:24:34,000 --> 00:24:38,880
playground uh can be installed in any

00:24:36,880 --> 00:24:39,919
project and if you're using apollo it's

00:24:38,880 --> 00:24:42,080
the default

00:24:39,919 --> 00:24:43,760
uh now playground is really neat because

00:24:42,080 --> 00:24:45,200
you can have multiple queries and

00:24:43,760 --> 00:24:47,600
mutations you can have them

00:24:45,200 --> 00:24:49,360
saved as tabs and there's some neat

00:24:47,600 --> 00:24:51,440
settings in here where you can

00:24:49,360 --> 00:24:53,520
adjust how this thing looks i prefer the

00:24:51,440 --> 00:24:56,080
dark mode myself

00:24:53,520 --> 00:24:57,679
and what's neat we get information about

00:24:56,080 --> 00:24:59,600
our entire api

00:24:57,679 --> 00:25:00,880
for instance if you want to learn and

00:24:59,600 --> 00:25:02,720
examine your api

00:25:00,880 --> 00:25:04,240
you have the documentation for your

00:25:02,720 --> 00:25:07,919
entire api

00:25:04,240 --> 00:25:10,320
right here this is a tool that i never

00:25:07,919 --> 00:25:12,320
close i always have this open while i'm

00:25:10,320 --> 00:25:13,919
working every single time

00:25:12,320 --> 00:25:15,440
and it is one of the things that i

00:25:13,919 --> 00:25:16,400
cannot live without when working in

00:25:15,440 --> 00:25:18,799
graphql

00:25:16,400 --> 00:25:20,799
next up is apollo studio now again this

00:25:18,799 --> 00:25:22,320
is not an advertisement for apollo i get

00:25:20,799 --> 00:25:24,559
that this is apollo day

00:25:22,320 --> 00:25:26,799
but apollo studio is a really fantastic

00:25:24,559 --> 00:25:29,279
tool to have in your tool belt

00:25:26,799 --> 00:25:30,559
now while apollo tool is fantastic most

00:25:29,279 --> 00:25:32,799
of the features that are

00:25:30,559 --> 00:25:33,760
really really neat you have to pay for

00:25:32,799 --> 00:25:35,919
um and we're

00:25:33,760 --> 00:25:37,360
not currently paying for apollo studio

00:25:35,919 --> 00:25:37,919
but it is one of those things i would

00:25:37,360 --> 00:25:41,120
really

00:25:37,919 --> 00:25:41,679
love to get going in fact we we did use

00:25:41,120 --> 00:25:43,360
apollo

00:25:41,679 --> 00:25:45,679
engine when it was called apollo engine

00:25:43,360 --> 00:25:47,679
quite significantly and what this can do

00:25:45,679 --> 00:25:49,840
is show you how fast or slow your

00:25:47,679 --> 00:25:53,120
operations are giving you opportunities

00:25:49,840 --> 00:25:56,720
to augment your api in a way to make it

00:25:53,120 --> 00:25:57,360
better we all know that the n plus one

00:25:56,720 --> 00:25:59,600
issue

00:25:57,360 --> 00:26:01,440
is a potential for working with graphql

00:25:59,600 --> 00:26:03,360
apis when you have a schema that

00:26:01,440 --> 00:26:05,039
is a nested schema with a nexus schema

00:26:03,360 --> 00:26:06,480
with an scheme in an array

00:26:05,039 --> 00:26:08,480
you might end up with a hundred database

00:26:06,480 --> 00:26:09,120
calls before you know it and tools like

00:26:08,480 --> 00:26:11,440
this are

00:26:09,120 --> 00:26:13,120
imperative to identifying those kind of

00:26:11,440 --> 00:26:15,600
issues

00:26:13,120 --> 00:26:17,200
next is graphql voyager now this is a

00:26:15,600 --> 00:26:18,799
really neat one that we're not currently

00:26:17,200 --> 00:26:21,679
using but i would love to use

00:26:18,799 --> 00:26:23,760
something like this i'm a visual person

00:26:21,679 --> 00:26:25,679
in fact my first programming language is

00:26:23,760 --> 00:26:28,000
something called max msp

00:26:25,679 --> 00:26:29,200
and it looked exactly like this which is

00:26:28,000 --> 00:26:30,799
actually kind of funny

00:26:29,200 --> 00:26:32,240
to think of a programming language

00:26:30,799 --> 00:26:33,919
looking like this but it was all patch

00:26:32,240 --> 00:26:35,520
cables and boxes

00:26:33,919 --> 00:26:38,320
and what this does is it allows you to

00:26:35,520 --> 00:26:39,200
see your api in a visual way and let me

00:26:38,320 --> 00:26:41,200
zoom in here

00:26:39,200 --> 00:26:42,559
so for instance we have the root these

00:26:41,200 --> 00:26:45,039
are all of

00:26:42,559 --> 00:26:46,559
our queries here all right we want to

00:26:45,039 --> 00:26:49,200
see what a film is well

00:26:46,559 --> 00:26:50,240
hey we got a link to the film a film has

00:26:49,200 --> 00:26:52,559
these options

00:26:50,240 --> 00:26:54,000
and what kind of connections does the

00:26:52,559 --> 00:26:56,159
film have and you can see it has

00:26:54,000 --> 00:26:57,440
outgoing connections and it labels these

00:26:56,159 --> 00:26:59,760
connections with these little

00:26:57,440 --> 00:27:00,640
uh this icon here let me even zoom in

00:26:59,760 --> 00:27:02,880
more if i can

00:27:00,640 --> 00:27:04,320
where it says that a species connection

00:27:02,880 --> 00:27:06,799
is a species

00:27:04,320 --> 00:27:07,440
now a species will then link you up to

00:27:06,799 --> 00:27:09,279
this one

00:27:07,440 --> 00:27:10,880
and it'll show the arrow you can click

00:27:09,279 --> 00:27:13,200
on these arrows and while this does

00:27:10,880 --> 00:27:15,120
look like a little bit of a mess i am

00:27:13,200 --> 00:27:17,279
really into this kind of thing

00:27:15,120 --> 00:27:18,720
i love visual tools and this one to me

00:27:17,279 --> 00:27:21,200
is one of the coolest

00:27:18,720 --> 00:27:21,919
there's another tool that's like this in

00:27:21,200 --> 00:27:24,559
fact

00:27:21,919 --> 00:27:25,360
let me find it here in my long list i

00:27:24,559 --> 00:27:28,320
think it's

00:27:25,360 --> 00:27:30,159
now graphql voyager is on github so you

00:27:28,320 --> 00:27:32,559
can check this thing out

00:27:30,159 --> 00:27:34,240
and as you can see it's a pretty neat

00:27:32,559 --> 00:27:35,039
project this is just the live demo that

00:27:34,240 --> 00:27:37,840
i'm showing you

00:27:35,039 --> 00:27:38,880
we're not currently using this uh

00:27:37,840 --> 00:27:41,360
however you can

00:27:38,880 --> 00:27:42,159
install it and get it going in your own

00:27:41,360 --> 00:27:43,919
project

00:27:42,159 --> 00:27:46,240
and play around with it really neat

00:27:43,919 --> 00:27:46,240
stuff

00:27:46,840 --> 00:27:51,200
um

00:27:49,039 --> 00:27:52,960
now along the same lines is the one that

00:27:51,200 --> 00:27:54,880
i was actually looking for is graphql

00:27:52,960 --> 00:27:56,320
editor now i have also not used this one

00:27:54,880 --> 00:27:59,440
but graphql editor

00:27:56,320 --> 00:27:59,760
is a little bit more of an opportunity

00:27:59,440 --> 00:28:02,240
to

00:27:59,760 --> 00:28:03,279
see your your graphql schema visually

00:28:02,240 --> 00:28:06,559
but at the same time

00:28:03,279 --> 00:28:08,000
edit it which is a fantastic idea

00:28:06,559 --> 00:28:10,720
and in fact a lot of these things are

00:28:08,000 --> 00:28:12,720
really neat here in practice i

00:28:10,720 --> 00:28:14,799
uh i would like to spend more time on it

00:28:12,720 --> 00:28:16,559
but graphql editor is a really

00:28:14,799 --> 00:28:17,919
really really neat tool to take a look

00:28:16,559 --> 00:28:20,240
at there is

00:28:17,919 --> 00:28:21,200
pricing you can see that there is a a

00:28:20,240 --> 00:28:24,240
zero dollar

00:28:21,200 --> 00:28:26,480
starter plane with two projects um it's

00:28:24,240 --> 00:28:28,640
a 14 day

00:28:26,480 --> 00:28:30,240
or you can get a free trial here i have

00:28:28,640 --> 00:28:32,320
no affiliation

00:28:30,240 --> 00:28:33,760
with them but you can see that it is a

00:28:32,320 --> 00:28:36,240
paid product if you want to get

00:28:33,760 --> 00:28:36,799
into some of the hosted nice stuff

00:28:36,240 --> 00:28:39,520
however

00:28:36,799 --> 00:28:41,279
i believe if i'm not wrong you can

00:28:39,520 --> 00:28:42,320
install it locally as well so those of

00:28:41,279 --> 00:28:44,559
you who

00:28:42,320 --> 00:28:45,840
prefer not to use tools like that i

00:28:44,559 --> 00:28:48,799
think you can

00:28:45,840 --> 00:28:50,880
install it locally yeah develop for

00:28:48,799 --> 00:28:51,679
standalone use so you can use it locally

00:28:50,880 --> 00:28:54,080
if you want

00:28:51,679 --> 00:28:54,960
or you can pay to use it in the cloud so

00:28:54,080 --> 00:28:58,000
these are my

00:28:54,960 --> 00:29:00,480
favorite graphql tools to show you

00:28:58,000 --> 00:29:01,840
again a lot of this stuff is used very

00:29:00,480 --> 00:29:03,840
heavily by us and

00:29:01,840 --> 00:29:06,000
we really love all these tools to make

00:29:03,840 --> 00:29:07,520
our coding experience better i know i

00:29:06,000 --> 00:29:09,120
said it was lopsided because i was going

00:29:07,520 --> 00:29:11,600
to spend a ton of time

00:29:09,120 --> 00:29:13,520
on the code generator and in fact that

00:29:11,600 --> 00:29:15,279
is really my favorite thing in fact

00:29:13,520 --> 00:29:17,520
if i could i could do a whole talk on

00:29:15,279 --> 00:29:18,000
code generator as well as graphql tools

00:29:17,520 --> 00:29:21,039
but

00:29:18,000 --> 00:29:23,600
unfortunately we don't have the time so

00:29:21,039 --> 00:29:24,720
this is my favorite graphql tools thank

00:29:23,600 --> 00:29:27,039
you so much for

00:29:24,720 --> 00:29:28,799
watching and i hope you learned a lot

00:29:27,039 --> 00:29:29,919
about some new stuff that can augment

00:29:28,799 --> 00:29:31,520
your code base

00:29:29,919 --> 00:29:33,360
whether or not you're using typescript

00:29:31,520 --> 00:29:35,039
or react or whatever like i mentioned

00:29:33,360 --> 00:29:37,279
our code bases actually

00:29:35,039 --> 00:29:40,080
react on the front end meteor on the

00:29:37,279 --> 00:29:42,399
back end graphql for the api

00:29:40,080 --> 00:29:44,480
and uh it's fantastic everything plays

00:29:42,399 --> 00:29:45,840
so well and works very lovely so

00:29:44,480 --> 00:29:48,960
if you want to ask me anything about

00:29:45,840 --> 00:29:51,279
graphql level up tutorials or syntax

00:29:48,960 --> 00:29:52,320
you can catch me on the social medias at

00:29:51,279 --> 00:29:54,799
s telinski

00:29:52,320 --> 00:29:57,200
level up tuts leveluptorials.com scott

00:29:54,799 --> 00:29:59,120
telinski.com or syntax.fm

00:29:57,200 --> 00:30:00,399
uh i'm all over the place the best place

00:29:59,120 --> 00:30:04,240
maybe twitter whatever

00:30:00,399 --> 00:30:06,240
so i'm all over the place so hit me up

00:30:04,240 --> 00:30:07,760
and ask me anything about graphql or

00:30:06,240 --> 00:30:09,360
even better yet head to the level up

00:30:07,760 --> 00:30:11,760
tutorials at discord

00:30:09,360 --> 00:30:13,120
which a link is available on the level

00:30:11,760 --> 00:30:15,520
of tutorials.com

00:30:13,120 --> 00:30:16,559
site there is a join us on discord and

00:30:15,520 --> 00:30:18,159
you can connect

00:30:16,559 --> 00:30:20,240
you can see there's 200 some people on

00:30:18,159 --> 00:30:21,440
right now talking code so thank you so

00:30:20,240 --> 00:30:23,440
much for watching again

00:30:21,440 --> 00:30:25,360
my name is scott tolinski and thank you

00:30:23,440 --> 00:30:25,840
i hope you have a great time at apollo

00:30:25,360 --> 00:30:28,159
day

00:30:25,840 --> 00:30:30,000
and thank you so much to apollo for

00:30:28,159 --> 00:30:31,039
inviting me to speak here again i hope

00:30:30,000 --> 00:30:37,840
you learned quite a bit

00:30:31,039 --> 00:30:37,840
thank you

00:30:41,279 --> 00:30:43,360

YouTube URL: https://www.youtube.com/watch?v=3FIijq7qetI


