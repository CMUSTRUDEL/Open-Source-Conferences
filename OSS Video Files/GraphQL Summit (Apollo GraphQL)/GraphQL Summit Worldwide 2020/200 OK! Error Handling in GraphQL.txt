Title: 200 OK! Error Handling in GraphQL
Publication date: 2020-08-11
Playlist: GraphQL Summit Worldwide 2020
Description: 
	Join Sasha Solomon, Sr. Software Engineer at Twitter in her favorite topic - Error handling in GraphQL!

Resources:
Checkout the Apollo docs - https://www.apollographql.com/docs/
Explore error handling in GraphQL - https://www.apollographql.com/docs/apollo-server/data/errors/
Captions: 
	00:00:03,000 --> 00:00:06,089
[Music]

00:00:06,560 --> 00:00:09,440
hey everyone

00:00:07,600 --> 00:00:10,639
i'm super excited to be here at the

00:00:09,440 --> 00:00:12,799
graphql summit

00:00:10,639 --> 00:00:16,800
talking to you about my favorite topic

00:00:12,799 --> 00:00:20,160
air handling and graphql

00:00:16,800 --> 00:00:22,240
um first off i'm sasha solomon i used to

00:00:20,160 --> 00:00:24,640
work at medium doing graphql and now i

00:00:22,240 --> 00:00:26,400
work at twitter still doing graphql

00:00:24,640 --> 00:00:28,480
of course coming from taking the first

00:00:26,400 --> 00:00:30,400
steps in graphql to a place where it's

00:00:28,480 --> 00:00:32,239
in full swing is a lot different

00:00:30,400 --> 00:00:35,280
but one of the things that was the same

00:00:32,239 --> 00:00:35,280
was error handling

00:00:35,920 --> 00:00:39,200
so let's start off like we would any

00:00:37,600 --> 00:00:42,399
good talk about graphql

00:00:39,200 --> 00:00:42,399
with a graphql query

00:00:42,719 --> 00:00:46,800
so here we're just going to query for

00:00:44,239 --> 00:00:48,640
our user uh with username ash

00:00:46,800 --> 00:00:50,239
um and we're going to query for an id

00:00:48,640 --> 00:00:53,680
and their name

00:00:50,239 --> 00:00:53,680
so let's just run this query

00:00:54,399 --> 00:00:58,239
and cool we get what we would expect

00:00:57,520 --> 00:01:01,600
back

00:00:58,239 --> 00:01:04,000
we get the data and then user id name

00:01:01,600 --> 00:01:06,560
ash ketchum so everything worked out we

00:01:04,000 --> 00:01:09,119
get what we expected

00:01:06,560 --> 00:01:10,000
so as you may know uh canonically in

00:01:09,119 --> 00:01:12,240
graphql

00:01:10,000 --> 00:01:13,360
any errors that happen are stored in the

00:01:12,240 --> 00:01:16,240
errors array

00:01:13,360 --> 00:01:18,159
they end up there by default on any

00:01:16,240 --> 00:01:19,600
graphql response

00:01:18,159 --> 00:01:21,680
this is what you can expect when you're

00:01:19,600 --> 00:01:23,840
first using graphql

00:01:21,680 --> 00:01:25,439
so you're brand new to graphql you first

00:01:23,840 --> 00:01:27,119
start using it if you encounter

00:01:25,439 --> 00:01:29,680
any errors they'll be by default in the

00:01:27,119 --> 00:01:30,880
errors array

00:01:29,680 --> 00:01:32,720
so let's just kind of take a look at

00:01:30,880 --> 00:01:34,479
what that might look like when something

00:01:32,720 --> 00:01:36,000
perhaps goes wrong so let's make that

00:01:34,479 --> 00:01:38,640
same query

00:01:36,000 --> 00:01:39,600
user username ash and query for their id

00:01:38,640 --> 00:01:44,079
and name

00:01:39,600 --> 00:01:47,200
so run it and

00:01:44,079 --> 00:01:49,439
we'll get something like this back

00:01:47,200 --> 00:01:51,680
so as you can see we still have our data

00:01:49,439 --> 00:01:54,159
field user is null

00:01:51,680 --> 00:01:55,680
and then we have a bunch of things in

00:01:54,159 --> 00:01:57,360
the errors array

00:01:55,680 --> 00:01:59,119
so this is trying to tell us that there

00:01:57,360 --> 00:02:01,200
something happened um

00:01:59,119 --> 00:02:02,640
and we can kind of start to pick out

00:02:01,200 --> 00:02:04,159
what may be happened but it's a little

00:02:02,640 --> 00:02:06,000
hard to unpack

00:02:04,159 --> 00:02:08,160
so if we look at this we can see path

00:02:06,000 --> 00:02:09,759
and in there we see user so i guess

00:02:08,160 --> 00:02:11,680
something happened with the user

00:02:09,759 --> 00:02:13,440
and then locations is trying to tell us

00:02:11,680 --> 00:02:14,800
exactly where this error occurred in the

00:02:13,440 --> 00:02:17,280
query so line two

00:02:14,800 --> 00:02:18,800
column three and then uh we have some

00:02:17,280 --> 00:02:20,319
stuff in extensions that tells us a

00:02:18,800 --> 00:02:22,640
little bit more about what's going on

00:02:20,319 --> 00:02:23,599
uh we have a message there object not

00:02:22,640 --> 00:02:26,239
found that's not

00:02:23,599 --> 00:02:27,200
super useful and then the type of this

00:02:26,239 --> 00:02:30,080
error message is

00:02:27,200 --> 00:02:30,959
uh this type of this error is two um so

00:02:30,080 --> 00:02:33,440
what exactly

00:02:30,959 --> 00:02:35,040
happened well we actually don't really

00:02:33,440 --> 00:02:36,560
know what went wrong all we have from

00:02:35,040 --> 00:02:37,920
this is object not found that's not a

00:02:36,560 --> 00:02:39,599
great error message

00:02:37,920 --> 00:02:41,920
um and it's kind of just hard to know

00:02:39,599 --> 00:02:43,680
what's going on for example if you know

00:02:41,920 --> 00:02:46,160
we queried for multiple users

00:02:43,680 --> 00:02:48,080
uh we might not know which user this is

00:02:46,160 --> 00:02:49,599
actually for without some digging and

00:02:48,080 --> 00:02:51,200
reading into this a little more like

00:02:49,599 --> 00:02:54,239
what line and column it is

00:02:51,200 --> 00:02:55,680
um and then also for multiple errors uh

00:02:54,239 --> 00:02:56,800
they would appear in the errors array

00:02:55,680 --> 00:02:59,200
also so we'd have

00:02:56,800 --> 00:03:00,720
this whole thing with user locations

00:02:59,200 --> 00:03:02,720
extensions etc etc

00:03:00,720 --> 00:03:03,840
um but then we'd also have like a whole

00:03:02,720 --> 00:03:06,480
nother thing if uh

00:03:03,840 --> 00:03:07,840
we queried for multiple things and got

00:03:06,480 --> 00:03:10,000
multiple errors

00:03:07,840 --> 00:03:12,000
so this is kind of how you get started

00:03:10,000 --> 00:03:13,120
with error handling when you first start

00:03:12,000 --> 00:03:14,480
using graphql

00:03:13,120 --> 00:03:16,560
it's kind of a lot if you're brand new

00:03:14,480 --> 00:03:18,080
to graphql it's brand new to you

00:03:16,560 --> 00:03:19,440
it's kind of hard to pick out what's

00:03:18,080 --> 00:03:21,200
going on when you actually get an error

00:03:19,440 --> 00:03:24,400
and like what do you do with it

00:03:21,200 --> 00:03:26,560
um so let's kind of look at

00:03:24,400 --> 00:03:29,440
kind of what we just saw so for one

00:03:26,560 --> 00:03:31,280
thing all errors are treated the same

00:03:29,440 --> 00:03:32,959
so all the errors any arrow we get in

00:03:31,280 --> 00:03:35,599
graphql is going to end up in this areas

00:03:32,959 --> 00:03:38,799
array no matter what kind of air it is

00:03:35,599 --> 00:03:39,680
so they all end up in there um the other

00:03:38,799 --> 00:03:41,519
thing is

00:03:39,680 --> 00:03:43,360
it's kind of hard to know where the air

00:03:41,519 --> 00:03:45,200
came from when we were looking at that

00:03:43,360 --> 00:03:47,040
errors array and looking through it was

00:03:45,200 --> 00:03:47,599
kind of hard to tell like what exactly

00:03:47,040 --> 00:03:49,519
happened

00:03:47,599 --> 00:03:51,920
um we we knew it was because it was a

00:03:49,519 --> 00:03:53,599
simple query um that it was the user and

00:03:51,920 --> 00:03:56,159
we knew exactly which user it was

00:03:53,599 --> 00:03:57,840
but for more complex queries it's going

00:03:56,159 --> 00:03:59,360
to be a lot harder to figure out where

00:03:57,840 --> 00:04:01,519
the error came from

00:03:59,360 --> 00:04:02,959
and especially if it's a list of things

00:04:01,519 --> 00:04:04,799
um and then also

00:04:02,959 --> 00:04:06,480
it's kind of hard for the client to know

00:04:04,799 --> 00:04:08,640
what errors to care about

00:04:06,480 --> 00:04:10,480
so when you're acquiring for this as a

00:04:08,640 --> 00:04:11,920
client you get all the errors in yours

00:04:10,480 --> 00:04:13,680
right so it's actually kind of hard to

00:04:11,920 --> 00:04:15,439
know which ones are important and which

00:04:13,680 --> 00:04:17,040
ones you can ignore which ones you care

00:04:15,439 --> 00:04:19,519
about and want to deal with

00:04:17,040 --> 00:04:21,120
um so that's kind of a bummer too and

00:04:19,519 --> 00:04:22,800
through all of this basically

00:04:21,120 --> 00:04:24,400
the client doesn't know what to display

00:04:22,800 --> 00:04:26,080
like that's what's most important like

00:04:24,400 --> 00:04:27,600
showing to the user like you know what

00:04:26,080 --> 00:04:28,639
went wrong or like displaying something

00:04:27,600 --> 00:04:30,000
for them

00:04:28,639 --> 00:04:32,160
and with that errors array it's kind of

00:04:30,000 --> 00:04:34,000
hard to know what to do

00:04:32,160 --> 00:04:35,759
so before we get into any like solutions

00:04:34,000 --> 00:04:37,600
or talk about anything like this

00:04:35,759 --> 00:04:38,880
let's just talk about what what is an

00:04:37,600 --> 00:04:42,080
error

00:04:38,880 --> 00:04:43,520
so let's like think about some errors so

00:04:42,080 --> 00:04:44,960
things like when we think about errors

00:04:43,520 --> 00:04:46,800
we think of things like maybe internal

00:04:44,960 --> 00:04:51,040
server error

00:04:46,800 --> 00:04:54,639
deleted user perhaps bad gateway

00:04:51,040 --> 00:04:56,639
unavailable in country a suspended user

00:04:54,639 --> 00:04:59,120
so these are kind of things that we

00:04:56,639 --> 00:05:03,039
think about when we think about errors

00:04:59,120 --> 00:05:04,320
so um it doesn't seem like all errors

00:05:03,039 --> 00:05:05,520
are the same though all those areas that

00:05:04,320 --> 00:05:07,360
we just listed

00:05:05,520 --> 00:05:09,520
so when i think about an internal server

00:05:07,360 --> 00:05:11,840
error that seems pretty

00:05:09,520 --> 00:05:12,720
pretty bad not great but that doesn't

00:05:11,840 --> 00:05:14,960
seem to be

00:05:12,720 --> 00:05:16,800
the same as say a suspended user those

00:05:14,960 --> 00:05:20,240
seem like a little different

00:05:16,800 --> 00:05:21,759
um and then also things like bad gateway

00:05:20,240 --> 00:05:23,520
that's not great either that's pretty

00:05:21,759 --> 00:05:25,680
bad and there's not a lot you can do

00:05:23,520 --> 00:05:27,120
when you're trying to recover from that

00:05:25,680 --> 00:05:29,360
especially for the client

00:05:27,120 --> 00:05:30,639
um like what do you display so that

00:05:29,360 --> 00:05:31,360
doesn't really seem the same as an

00:05:30,639 --> 00:05:33,199
unavailable

00:05:31,360 --> 00:05:35,360
country that seems like something that's

00:05:33,199 --> 00:05:36,800
maybe more normal that happens

00:05:35,360 --> 00:05:38,479
so it just seems like those aren't the

00:05:36,800 --> 00:05:40,720
same they're not the same severity

00:05:38,479 --> 00:05:41,600
they just don't seem the same type of

00:05:40,720 --> 00:05:44,560
error

00:05:41,600 --> 00:05:46,000
so that kind of leads us to error

00:05:44,560 --> 00:05:47,600
categories so let's try to

00:05:46,000 --> 00:05:50,560
categorize these errors what's what's

00:05:47,600 --> 00:05:53,919
different from them um

00:05:50,560 --> 00:05:57,360
so things like internal server error

00:05:53,919 --> 00:05:59,120
that gateway um and then deleted user

00:05:57,360 --> 00:06:01,600
unavailable in country

00:05:59,120 --> 00:06:02,639
suspended user kind of starting to group

00:06:01,600 --> 00:06:05,520
these so

00:06:02,639 --> 00:06:06,800
these things seem more like errors like

00:06:05,520 --> 00:06:09,440
something went wrong

00:06:06,800 --> 00:06:11,840
these are this is not great and then

00:06:09,440 --> 00:06:15,120
these things seem like

00:06:11,840 --> 00:06:18,080
maybe something didn't go is wrong

00:06:15,120 --> 00:06:18,720
um so something went wrong some nothing

00:06:18,080 --> 00:06:20,800
went wrong

00:06:18,720 --> 00:06:21,759
went wrong um so it seemed kind of just

00:06:20,800 --> 00:06:24,080
like different to me

00:06:21,759 --> 00:06:25,840
um and then kind of when we think about

00:06:24,080 --> 00:06:27,280
it more these really seem like errors

00:06:25,840 --> 00:06:29,280
like something actually went wrong

00:06:27,280 --> 00:06:31,039
but these other things nothing really

00:06:29,280 --> 00:06:33,680
really went went wrong

00:06:31,039 --> 00:06:34,560
but um they're not they're not errors

00:06:33,680 --> 00:06:36,319
exactly but

00:06:34,560 --> 00:06:38,400
their results just not exactly what we

00:06:36,319 --> 00:06:41,280
wanted them to be but we queried for

00:06:38,400 --> 00:06:43,039
say a user um we got something like a

00:06:41,280 --> 00:06:43,759
user back just not exactly what we

00:06:43,039 --> 00:06:45,520
wanted

00:06:43,759 --> 00:06:47,600
so when we think about that it's kind of

00:06:45,520 --> 00:06:48,960
like these aren't really errors

00:06:47,600 --> 00:06:51,440
we have things that are very clearly

00:06:48,960 --> 00:06:55,280
errors and things that are just kind of

00:06:51,440 --> 00:06:57,680
um some different kind of result really

00:06:55,280 --> 00:06:58,639
so but you know maybe that's a lot to

00:06:57,680 --> 00:07:02,160
take in right now so

00:06:58,639 --> 00:07:03,759
let's walk through why um so let's kind

00:07:02,160 --> 00:07:04,479
of walk through an example of what

00:07:03,759 --> 00:07:06,800
happens with

00:07:04,479 --> 00:07:08,160
something that we we just categorized as

00:07:06,800 --> 00:07:11,199
an error

00:07:08,160 --> 00:07:13,360
um so first off uh here's our

00:07:11,199 --> 00:07:15,039
our cute little client here and we're

00:07:13,360 --> 00:07:15,520
gonna make a request to our graphql

00:07:15,039 --> 00:07:18,160
server

00:07:15,520 --> 00:07:19,280
at the graphql endpoint there's a little

00:07:18,160 --> 00:07:20,960
graphql

00:07:19,280 --> 00:07:23,360
server and it's going to talk to say

00:07:20,960 --> 00:07:24,960
some some service or something

00:07:23,360 --> 00:07:26,800
but let's say that something is going on

00:07:24,960 --> 00:07:29,840
with that service it's like on fire

00:07:26,800 --> 00:07:31,199
not not doing great so if this happens

00:07:29,840 --> 00:07:33,440
we might get something back from that

00:07:31,199 --> 00:07:33,840
service that says ah 500 like don't talk

00:07:33,440 --> 00:07:36,960
to me

00:07:33,840 --> 00:07:38,479
this is internal server or bad um and so

00:07:36,960 --> 00:07:40,319
from that and it gets to our graphql

00:07:38,479 --> 00:07:40,880
server our graphql server might throw an

00:07:40,319 --> 00:07:42,240
exception

00:07:40,880 --> 00:07:44,080
and that might end up in the errors

00:07:42,240 --> 00:07:45,440
array so that's going to be some sort of

00:07:44,080 --> 00:07:46,319
message like server error maybe

00:07:45,440 --> 00:07:48,560
something a little

00:07:46,319 --> 00:07:50,800
nicer than that but basically this is

00:07:48,560 --> 00:07:53,840
going to end up in a 500 back to

00:07:50,800 --> 00:07:54,400
our client um so cool that's pretty

00:07:53,840 --> 00:07:56,319
clearly

00:07:54,400 --> 00:07:57,599
an error and there's not a lot the

00:07:56,319 --> 00:07:59,440
client can really do

00:07:57,599 --> 00:08:01,120
when you get a 500 except try to you

00:07:59,440 --> 00:08:02,639
know throw a nice page up there

00:08:01,120 --> 00:08:04,160
something that says 500 but

00:08:02,639 --> 00:08:05,759
the client doesn't really need to know

00:08:04,160 --> 00:08:07,199
anything else about that in order to

00:08:05,759 --> 00:08:10,800
display something

00:08:07,199 --> 00:08:12,639
um so when we think about that

00:08:10,800 --> 00:08:14,800
we would kind of say that when we get

00:08:12,639 --> 00:08:15,599
errors uh things that are in this errors

00:08:14,800 --> 00:08:17,520
category

00:08:15,599 --> 00:08:19,680
it kind of means that we we couldn't get

00:08:17,520 --> 00:08:22,000
the data that we actually requested

00:08:19,680 --> 00:08:23,520
so we didn't get the data we we asked

00:08:22,000 --> 00:08:25,520
for for some reason

00:08:23,520 --> 00:08:26,720
um so like in the case with the internal

00:08:25,520 --> 00:08:28,560
server error

00:08:26,720 --> 00:08:30,160
basically that's bad and the client can

00:08:28,560 --> 00:08:33,039
react accordingly

00:08:30,160 --> 00:08:34,800
um but basically we asked for like you

00:08:33,039 --> 00:08:35,680
know a user some data and we just didn't

00:08:34,800 --> 00:08:38,640
get that back

00:08:35,680 --> 00:08:39,279
so that seems like an error so let's

00:08:38,640 --> 00:08:42,880
talk about

00:08:39,279 --> 00:08:45,279
what we kind of just called results

00:08:42,880 --> 00:08:46,320
so let's go through this um so we have

00:08:45,279 --> 00:08:47,839
our client

00:08:46,320 --> 00:08:49,519
we're going to make a request to the

00:08:47,839 --> 00:08:51,040
graphql endpoint which is going to hit

00:08:49,519 --> 00:08:53,200
our graphql server

00:08:51,040 --> 00:08:54,800
um and then that will make a request to

00:08:53,200 --> 00:08:57,440
some number of services

00:08:54,800 --> 00:08:58,160
um so maybe we ask for like a user or

00:08:57,440 --> 00:09:01,760
something

00:08:58,160 --> 00:09:03,279
um and this uh our our service will send

00:09:01,760 --> 00:09:06,640
back something like oh

00:09:03,279 --> 00:09:08,560
um like a user unavailable in country or

00:09:06,640 --> 00:09:10,080
you know whatever some sort of something

00:09:08,560 --> 00:09:11,920
back um

00:09:10,080 --> 00:09:13,360
so when it sends this back to our

00:09:11,920 --> 00:09:14,880
graphql server

00:09:13,360 --> 00:09:16,560
and then our server sends something back

00:09:14,880 --> 00:09:17,920
to our client um

00:09:16,560 --> 00:09:19,920
you might get something back that's like

00:09:17,920 --> 00:09:21,040
a suspended user or unavailable in

00:09:19,920 --> 00:09:22,880
country

00:09:21,040 --> 00:09:24,640
so basically it's just telling the

00:09:22,880 --> 00:09:26,320
client like you know display something

00:09:24,640 --> 00:09:27,519
but it's not actually an error it's not

00:09:26,320 --> 00:09:28,240
something that actually went wrong it's

00:09:27,519 --> 00:09:30,240
kind of like

00:09:28,240 --> 00:09:31,519
oops but you know we'll still display

00:09:30,240 --> 00:09:34,160
something we'll say that that

00:09:31,519 --> 00:09:35,440
user is actually suspended or um you

00:09:34,160 --> 00:09:36,160
know this is not available in your

00:09:35,440 --> 00:09:38,720
country

00:09:36,160 --> 00:09:40,080
you know or whatever um basically

00:09:38,720 --> 00:09:42,320
whatever it gets back the client

00:09:40,080 --> 00:09:44,240
behavior might change based on that

00:09:42,320 --> 00:09:45,519
so we can actually make decisions based

00:09:44,240 --> 00:09:47,200
on what this service

00:09:45,519 --> 00:09:49,120
gave back to us if it's not something

00:09:47,200 --> 00:09:50,959
like a 500. it's something a little

00:09:49,120 --> 00:09:53,279
different

00:09:50,959 --> 00:09:54,560
um so when we think about it in that way

00:09:53,279 --> 00:09:56,880
these are sort of

00:09:54,560 --> 00:09:58,880
not what exactly we asked for they're

00:09:56,880 --> 00:10:00,080
really results or maybe like alternative

00:09:58,880 --> 00:10:02,079
results

00:10:00,080 --> 00:10:05,920
um and so when we think about it that

00:10:02,079 --> 00:10:07,680
way we did get our requested data

00:10:05,920 --> 00:10:09,120
we asked for a user and we got some type

00:10:07,680 --> 00:10:11,839
of user back

00:10:09,120 --> 00:10:12,880
um if a user got suspended the client

00:10:11,839 --> 00:10:15,040
might want to display

00:10:12,880 --> 00:10:18,640
that the user was suspended in something

00:10:15,040 --> 00:10:22,480
like an interstitial or something so

00:10:18,640 --> 00:10:24,880
you might be saying hold up

00:10:22,480 --> 00:10:25,920
i asked for a user but i didn't get a

00:10:24,880 --> 00:10:29,600
user back

00:10:25,920 --> 00:10:31,360
how is that the requested data and fair

00:10:29,600 --> 00:10:33,279
you did ask for a user and you didn't

00:10:31,360 --> 00:10:35,200
get the actual user back

00:10:33,279 --> 00:10:37,200
so it doesn't seem like you actually got

00:10:35,200 --> 00:10:40,560
back the data that you requested

00:10:37,200 --> 00:10:41,519
um but i will say that we did request a

00:10:40,560 --> 00:10:43,120
user

00:10:41,519 --> 00:10:45,040
but don't don't we care about these

00:10:43,120 --> 00:10:45,600
other states aren't aren't these things

00:10:45,040 --> 00:10:47,920
just

00:10:45,600 --> 00:10:49,680
different states of an entity or a you

00:10:47,920 --> 00:10:52,240
know a user

00:10:49,680 --> 00:10:52,800
so things like suspended user or deleted

00:10:52,240 --> 00:10:55,279
user

00:10:52,800 --> 00:10:56,160
or blocked user these are all just kind

00:10:55,279 --> 00:10:57,920
of different

00:10:56,160 --> 00:10:59,760
states of a user but they're still users

00:10:57,920 --> 00:11:00,800
a blocked user is still a user a deleted

00:10:59,760 --> 00:11:03,440
user is still

00:11:00,800 --> 00:11:06,160
a user in a database somewhere and a

00:11:03,440 --> 00:11:08,399
suspended user is still a user

00:11:06,160 --> 00:11:10,800
so it seems like if we should be able to

00:11:08,399 --> 00:11:14,399
query for these if we care about them

00:11:10,800 --> 00:11:16,079
right so

00:11:14,399 --> 00:11:18,399
of course and you know if you've if

00:11:16,079 --> 00:11:20,880
we've learned anything from graphql

00:11:18,399 --> 00:11:22,480
it's to ask for what you care about

00:11:20,880 --> 00:11:22,880
that's like the number one thing clients

00:11:22,480 --> 00:11:25,040
gets

00:11:22,880 --> 00:11:26,640
get to ask for exactly what they want

00:11:25,040 --> 00:11:29,760
and what they need and then you can get

00:11:26,640 --> 00:11:31,920
that back um so it seems like if you

00:11:29,760 --> 00:11:33,440
if you want if you want to query for a

00:11:31,920 --> 00:11:35,760
user and you actually care about

00:11:33,440 --> 00:11:36,880
what that is and want to display it we

00:11:35,760 --> 00:11:39,279
should be able to model that

00:11:36,880 --> 00:11:40,800
in the schema so let's see how we might

00:11:39,279 --> 00:11:43,600
model that

00:11:40,800 --> 00:11:44,480
okay so the schema um because who

00:11:43,600 --> 00:11:47,600
doesn't love

00:11:44,480 --> 00:11:49,519
union types um i love union types

00:11:47,600 --> 00:11:51,040
they're really cool so let's take a look

00:11:49,519 --> 00:11:52,000
at how we could use those and utilize

00:11:51,040 --> 00:11:57,519
those

00:11:52,000 --> 00:11:59,040
um so first off let's say we have a user

00:11:57,519 --> 00:12:01,440
so we have a user but let's think about

00:11:59,040 --> 00:12:02,720
the other states of a user right

00:12:01,440 --> 00:12:04,480
that's what we're kind of interested in

00:12:02,720 --> 00:12:07,600
here so we can have a user

00:12:04,480 --> 00:12:10,639
or say that user is deleted

00:12:07,600 --> 00:12:12,399
or is blocked or is suspended

00:12:10,639 --> 00:12:13,839
so these are all possible results we

00:12:12,399 --> 00:12:15,839
could have for a query

00:12:13,839 --> 00:12:18,079
um for when we query for a user during

00:12:15,839 --> 00:12:20,399
just like a normal operation

00:12:18,079 --> 00:12:21,279
so when we think about this this way

00:12:20,399 --> 00:12:24,399
really our

00:12:21,279 --> 00:12:26,240
our user is

00:12:24,399 --> 00:12:28,240
a user or they're deleted or they're

00:12:26,240 --> 00:12:30,480
blocked or they're suspended

00:12:28,240 --> 00:12:31,600
um so really that's kind of like a user

00:12:30,480 --> 00:12:34,000
result

00:12:31,600 --> 00:12:35,279
um we could say this is a user result

00:12:34,000 --> 00:12:36,480
you can get a user or

00:12:35,279 --> 00:12:38,639
one of these many things that are

00:12:36,480 --> 00:12:39,920
different states of user so really a

00:12:38,639 --> 00:12:43,279
user result

00:12:39,920 --> 00:12:45,040
is a user or they're deleted or that

00:12:43,279 --> 00:12:46,880
user is blocked or that user is

00:12:45,040 --> 00:12:48,399
suspended

00:12:46,880 --> 00:12:50,000
so when we model things this way it's

00:12:48,399 --> 00:12:51,440
actually kind of cool because now we've

00:12:50,000 --> 00:12:53,760
actually encoded

00:12:51,440 --> 00:12:55,200
all of these user states into our schema

00:12:53,760 --> 00:12:58,160
and now we can query for them which

00:12:55,200 --> 00:12:58,160
makes it pretty easy

00:12:58,639 --> 00:13:02,240
what's also cool is we can actually

00:13:00,240 --> 00:13:03,760
customize what each of these results

00:13:02,240 --> 00:13:05,440
looks like you know obviously it's not

00:13:03,760 --> 00:13:06,720
going to be a perfect user so

00:13:05,440 --> 00:13:08,480
you know it might have some other fields

00:13:06,720 --> 00:13:09,920
on here so something like maybe

00:13:08,480 --> 00:13:12,079
undeleted we just have a message

00:13:09,920 --> 00:13:14,240
saying why why you know you're deleted

00:13:12,079 --> 00:13:15,440
or whatever maybe why they were deleted

00:13:14,240 --> 00:13:17,360
or if they deleted themselves or

00:13:15,440 --> 00:13:18,800
something um for

00:13:17,360 --> 00:13:20,320
if they were blocked maybe we can have a

00:13:18,800 --> 00:13:22,079
reason and maybe some other things on

00:13:20,320 --> 00:13:24,079
that about specifically why maybe it's

00:13:22,079 --> 00:13:25,360
an enum

00:13:24,079 --> 00:13:27,760
and then if they're suspended maybe we

00:13:25,360 --> 00:13:31,760
can have a link to the policy violation

00:13:27,760 --> 00:13:33,920
um or in other fields like related to

00:13:31,760 --> 00:13:35,120
why they were suspended um so that's

00:13:33,920 --> 00:13:36,639
kind of cool so we have all these

00:13:35,120 --> 00:13:37,279
different states of a user and we can

00:13:36,639 --> 00:13:38,720
also

00:13:37,279 --> 00:13:40,079
kind of list out all the different

00:13:38,720 --> 00:13:42,720
things that are related to the states of

00:13:40,079 --> 00:13:44,880
the user that's kind of nice

00:13:42,720 --> 00:13:46,959
um so let's look let's look at what this

00:13:44,880 --> 00:13:48,639
looks like in graphql sdl which is the

00:13:46,959 --> 00:13:52,240
schema definition language

00:13:48,639 --> 00:13:54,800
um and you've probably seen this before

00:13:52,240 --> 00:13:55,360
so it should look maybe pretty familiar

00:13:54,800 --> 00:13:58,639
um

00:13:55,360 --> 00:14:01,199
so here we have just a user um and an id

00:13:58,639 --> 00:14:02,320
and a name and the id is obviously uh

00:14:01,199 --> 00:14:04,720
required

00:14:02,320 --> 00:14:06,160
cool so then what we can do is we can

00:14:04,720 --> 00:14:07,199
actually make other types that are going

00:14:06,160 --> 00:14:09,279
to be

00:14:07,199 --> 00:14:10,720
the different states of this user so we

00:14:09,279 --> 00:14:13,199
can have suspended

00:14:10,720 --> 00:14:14,000
we can have is blocked and we can have

00:14:13,199 --> 00:14:16,320
something like

00:14:14,000 --> 00:14:18,399
unavailable in country and you can kind

00:14:16,320 --> 00:14:20,720
of see how we're starting to

00:14:18,399 --> 00:14:22,399
sort of model these so for suspended we

00:14:20,720 --> 00:14:24,320
have just a string that just explains

00:14:22,399 --> 00:14:25,680
the reason you can type it in there

00:14:24,320 --> 00:14:27,120
for blocked it's going to have also a

00:14:25,680 --> 00:14:28,560
message but then we're going to maybe we

00:14:27,120 --> 00:14:30,000
can add something like you were blocked

00:14:28,560 --> 00:14:31,600
by this user and you actually could

00:14:30,000 --> 00:14:32,639
query for who they were blocked by if

00:14:31,600 --> 00:14:34,800
you needed to

00:14:32,639 --> 00:14:36,000
um and then for unavailable in country

00:14:34,800 --> 00:14:37,440
we'll have a message about

00:14:36,000 --> 00:14:40,079
what that means but also maybe the

00:14:37,440 --> 00:14:41,600
country code for where it was blocked

00:14:40,079 --> 00:14:42,800
so you can kind of start to customize

00:14:41,600 --> 00:14:43,440
these which makes this maybe pretty

00:14:42,800 --> 00:14:46,480
useful for

00:14:43,440 --> 00:14:47,839
a client and so

00:14:46,480 --> 00:14:49,839
when we take all of these types we put

00:14:47,839 --> 00:14:51,680
them all together and we create our user

00:14:49,839 --> 00:14:53,760
result which is a union

00:14:51,680 --> 00:14:55,440
so this is a user or a reason why we

00:14:53,760 --> 00:14:57,360
can't get one normally

00:14:55,440 --> 00:14:58,959
and that's going to be the types we just

00:14:57,360 --> 00:15:01,120
defined so user

00:14:58,959 --> 00:15:02,800
is blocked or suspended um we're not

00:15:01,120 --> 00:15:04,000
gonna do unavailable in country because

00:15:02,800 --> 00:15:04,720
that doesn't make sense for this user

00:15:04,000 --> 00:15:08,399
but

00:15:04,720 --> 00:15:10,639
um yeah that's pretty sweet

00:15:08,399 --> 00:15:11,519
um so what's cool is we can now query

00:15:10,639 --> 00:15:13,279
for this

00:15:11,519 --> 00:15:14,639
and the coolest thing is that clients

00:15:13,279 --> 00:15:16,320
only need to query for the data that

00:15:14,639 --> 00:15:19,360
they can use

00:15:16,320 --> 00:15:20,480
so here we have our query we have our

00:15:19,360 --> 00:15:22,639
user result

00:15:20,480 --> 00:15:24,240
requiring for ash again and this time

00:15:22,639 --> 00:15:27,120
we're going to query for

00:15:24,240 --> 00:15:28,240
a user and then if if we don't actually

00:15:27,120 --> 00:15:28,959
get a user back you know we're gonna

00:15:28,240 --> 00:15:32,160
query four

00:15:28,959 --> 00:15:33,839
is blocked and then also uh suspended

00:15:32,160 --> 00:15:35,519
so this is kind of how this works uh if

00:15:33,839 --> 00:15:37,440
you've seen this before if you use

00:15:35,519 --> 00:15:40,079
graphql a lot you've seen uh this

00:15:37,440 --> 00:15:41,279
notation but the dot dot uh we're just

00:15:40,079 --> 00:15:43,199
saying on a user

00:15:41,279 --> 00:15:45,680
so if we have a user type we're able to

00:15:43,199 --> 00:15:46,639
query for id and name on a user we're

00:15:45,680 --> 00:15:48,639
able to query for

00:15:46,639 --> 00:15:49,759
message and blocked user on his block

00:15:48,639 --> 00:15:52,320
type and

00:15:49,759 --> 00:15:53,759
obviously able to query for reason on a

00:15:52,320 --> 00:15:55,120
suspended type so that's kind of what

00:15:53,759 --> 00:15:56,079
that notation means if you haven't seen

00:15:55,120 --> 00:15:58,079
it um

00:15:56,079 --> 00:16:00,000
so that's pretty cool um so in this case

00:15:58,079 --> 00:16:01,519
we don't care about the

00:16:00,000 --> 00:16:03,360
any other things that you could query on

00:16:01,519 --> 00:16:04,320
a user result so we're not going to

00:16:03,360 --> 00:16:08,720
query for them

00:16:04,320 --> 00:16:11,759
so let's run this query

00:16:08,720 --> 00:16:14,240
and we get something like this back um

00:16:11,759 --> 00:16:15,120
so in this case this is like the happy

00:16:14,240 --> 00:16:18,240
the happy path

00:16:15,120 --> 00:16:20,480
um we just get back a user result and uh

00:16:18,240 --> 00:16:21,920
we also get back id name you may have

00:16:20,480 --> 00:16:23,279
noticed that we also queried for type

00:16:21,920 --> 00:16:24,720
name this is you don't have to query for

00:16:23,279 --> 00:16:26,560
that if you don't want to but this is

00:16:24,720 --> 00:16:28,240
just letting us know that the type that

00:16:26,560 --> 00:16:29,839
we actually got back is user and that's

00:16:28,240 --> 00:16:31,759
graphql's way of kind of telling you for

00:16:29,839 --> 00:16:34,079
union types what type you have

00:16:31,759 --> 00:16:36,720
so in this case it's a user um so that's

00:16:34,079 --> 00:16:38,480
pretty sweet um so let's see

00:16:36,720 --> 00:16:40,000
let's take a look at what happens when

00:16:38,480 --> 00:16:43,040
we get something back

00:16:40,000 --> 00:16:46,320
that we weren't uh we maybe didn't want

00:16:43,040 --> 00:16:48,959
not a user in this case um so run that

00:16:46,320 --> 00:16:48,959
same query

00:16:49,120 --> 00:16:53,759
and we'll get something like this back

00:16:52,720 --> 00:16:55,519
so in this case

00:16:53,759 --> 00:16:57,759
the the query is exactly the same but

00:16:55,519 --> 00:16:59,759
instead this user was actually blocked

00:16:57,759 --> 00:17:01,279
so we can see that here in the type name

00:16:59,759 --> 00:17:03,839
uh type name is blocked

00:17:01,279 --> 00:17:05,120
and then we see the message uh is user

00:17:03,839 --> 00:17:08,160
blocked at ash

00:17:05,120 --> 00:17:09,600
okay looks like brock and ash are maybe

00:17:08,160 --> 00:17:11,439
having a little fight or something and

00:17:09,600 --> 00:17:12,319
then uh we actually also queried for

00:17:11,439 --> 00:17:14,799
blocked by user

00:17:12,319 --> 00:17:16,640
and we can see that brock has blocked

00:17:14,799 --> 00:17:18,880
ash

00:17:16,640 --> 00:17:20,079
so that's really cool because this query

00:17:18,880 --> 00:17:21,919
didn't change but the

00:17:20,079 --> 00:17:23,360
the results that we might get back uh

00:17:21,919 --> 00:17:24,400
might change depending on if someone

00:17:23,360 --> 00:17:26,400
blocked someone

00:17:24,400 --> 00:17:27,679
um and we can see this all here we don't

00:17:26,400 --> 00:17:29,760
have to dig around in the air's race

00:17:27,679 --> 00:17:32,799
that's pretty cool

00:17:29,760 --> 00:17:34,640
um so lastly those are the two

00:17:32,799 --> 00:17:36,000
first cases the happy path where

00:17:34,640 --> 00:17:37,120
everything is great we get a user back

00:17:36,000 --> 00:17:39,120
as we expected

00:17:37,120 --> 00:17:41,280
the second case is getting a different

00:17:39,120 --> 00:17:43,039
state of that user which was is blocked

00:17:41,280 --> 00:17:45,039
so let's just look at what happens with

00:17:43,039 --> 00:17:47,360
our unexpected errors the errors we'd

00:17:45,039 --> 00:17:51,200
seen before so something bad happens

00:17:47,360 --> 00:17:51,200
so let's just run that same query again

00:17:52,000 --> 00:17:54,320
cool

00:17:55,280 --> 00:18:00,000
um and cool so now we get our this uh

00:17:58,400 --> 00:18:01,600
kind of what we saw before back uh we've

00:18:00,000 --> 00:18:04,320
got data user null

00:18:01,600 --> 00:18:04,720
um and then we have an internal server

00:18:04,320 --> 00:18:07,200
error

00:18:04,720 --> 00:18:08,640
path user and we have our location uh

00:18:07,200 --> 00:18:11,360
line and column stuff

00:18:08,640 --> 00:18:12,960
um so okay so you you might be like okay

00:18:11,360 --> 00:18:14,640
what about these fatal errors like is

00:18:12,960 --> 00:18:15,919
there anything we can do with that um

00:18:14,640 --> 00:18:17,679
these will still happen

00:18:15,919 --> 00:18:19,039
but that's okay we haven't encoded these

00:18:17,679 --> 00:18:20,720
because these are unexpected it's

00:18:19,039 --> 00:18:21,440
actually kind of hard to encode in a

00:18:20,720 --> 00:18:23,200
schema

00:18:21,440 --> 00:18:24,480
like oh if we get a 500 for this that

00:18:23,200 --> 00:18:26,000
doesn't really relate to the user it

00:18:24,480 --> 00:18:27,280
doesn't really relate to an entity so it

00:18:26,000 --> 00:18:28,160
doesn't really make sense to encode it

00:18:27,280 --> 00:18:30,240
in the schema

00:18:28,160 --> 00:18:31,600
so we won't and so it's okay that these

00:18:30,240 --> 00:18:33,520
end up here um

00:18:31,600 --> 00:18:34,960
there's not a lot that the client can do

00:18:33,520 --> 00:18:35,679
in terms of like displaying something

00:18:34,960 --> 00:18:38,160
different

00:18:35,679 --> 00:18:40,000
for the user who's using this so it

00:18:38,160 --> 00:18:43,840
doesn't really make sense to encode them

00:18:40,000 --> 00:18:43,840
um so that's okay um

00:18:44,160 --> 00:18:48,960
so what have we learned so far um with

00:18:47,120 --> 00:18:51,280
this new scheme uh we've learned that

00:18:48,960 --> 00:18:52,880
results are customizable for each entity

00:18:51,280 --> 00:18:54,559
so that's pretty cool

00:18:52,880 --> 00:18:56,880
so like a user can have different

00:18:54,559 --> 00:18:58,720
alternative results than other fields

00:18:56,880 --> 00:19:01,600
and we can also add different errors and

00:18:58,720 --> 00:19:03,840
customize fields for each type

00:19:01,600 --> 00:19:04,799
so that's pretty awesome for the other

00:19:03,840 --> 00:19:06,160
thing we know

00:19:04,799 --> 00:19:07,760
exactly where the error came from it's

00:19:06,160 --> 00:19:08,720
encoded in the schema so that's pretty

00:19:07,760 --> 00:19:11,679
sweet

00:19:08,720 --> 00:19:12,400
when we query for a user we know what if

00:19:11,679 --> 00:19:14,240
there were any

00:19:12,400 --> 00:19:15,120
um results attached to that entity

00:19:14,240 --> 00:19:16,960
because they were right there in the

00:19:15,120 --> 00:19:17,919
schema so it's because it's all encoded

00:19:16,960 --> 00:19:20,400
in the schema we

00:19:17,919 --> 00:19:22,240
are able to capture those errors those

00:19:20,400 --> 00:19:24,320
alternative results right there

00:19:22,240 --> 00:19:25,520
and like handle them that's also pretty

00:19:24,320 --> 00:19:27,440
sweet

00:19:25,520 --> 00:19:29,280
um and then lastly the client gets to

00:19:27,440 --> 00:19:30,799
decide what errors it cares about and

00:19:29,280 --> 00:19:33,440
what errors it can ignore

00:19:30,799 --> 00:19:35,440
um so that's pretty cool so a client

00:19:33,440 --> 00:19:37,280
with union types a client can query or

00:19:35,440 --> 00:19:38,799
not query for different errors um we

00:19:37,280 --> 00:19:40,400
didn't query for unavailable in country

00:19:38,799 --> 00:19:42,480
we were only querying for

00:19:40,400 --> 00:19:43,840
is blocked and suspended so that's

00:19:42,480 --> 00:19:45,360
pretty sweet um

00:19:43,840 --> 00:19:46,720
so what me that means is like if a

00:19:45,360 --> 00:19:47,840
client doesn't actually care about

00:19:46,720 --> 00:19:49,520
certain types of errors

00:19:47,840 --> 00:19:52,320
they just don't have to query for them

00:19:49,520 --> 00:19:55,120
um so that's pretty nice too

00:19:52,320 --> 00:19:56,799
um so let's kind of look at maybe what

00:19:55,120 --> 00:19:59,919
happens when our schema structure just a

00:19:56,799 --> 00:19:59,919
little bit more complex

00:20:00,320 --> 00:20:05,840
so here we have our our

00:20:03,360 --> 00:20:07,840
user result union as we did before so

00:20:05,840 --> 00:20:11,120
our union is a user or

00:20:07,840 --> 00:20:11,840
they're blocked or they're suspended and

00:20:11,120 --> 00:20:14,720
this is that

00:20:11,840 --> 00:20:16,320
sdl that we had before our user and then

00:20:14,720 --> 00:20:19,039
suspended is blocked unavailable in

00:20:16,320 --> 00:20:21,840
country types

00:20:19,039 --> 00:20:21,840
so

00:20:22,080 --> 00:20:27,600
let's add some more stuff

00:20:25,600 --> 00:20:29,039
so let's add something called profile

00:20:27,600 --> 00:20:29,600
image so we'll do kind of what we did

00:20:29,039 --> 00:20:31,919
before

00:20:29,600 --> 00:20:33,679
um we'll add a new type called profile

00:20:31,919 --> 00:20:36,559
image and we'll add different

00:20:33,679 --> 00:20:37,200
states of that profile image so things

00:20:36,559 --> 00:20:40,320
like

00:20:37,200 --> 00:20:41,919
uh maybe flagged uh maybe this profile

00:20:40,320 --> 00:20:43,600
image can be hidden

00:20:41,919 --> 00:20:44,880
things like that um and we can add a

00:20:43,600 --> 00:20:45,600
bunch more if we wanted we'll only do

00:20:44,880 --> 00:20:48,559
these

00:20:45,600 --> 00:20:49,200
um cool so we added those um so now

00:20:48,559 --> 00:20:51,600
we'll make

00:20:49,200 --> 00:20:53,280
just like we did before a union but this

00:20:51,600 --> 00:20:55,520
time we're calling it an image result

00:20:53,280 --> 00:20:57,280
so this is an image or a reason why we

00:20:55,520 --> 00:21:00,159
can't get one normally

00:20:57,280 --> 00:21:02,799
so an image result can be an image or it

00:21:00,159 --> 00:21:04,720
can be flagged or it can be hidden

00:21:02,799 --> 00:21:06,159
um so it can we can get any of these

00:21:04,720 --> 00:21:09,280
types back

00:21:06,159 --> 00:21:12,640
so let's look at how this might look

00:21:09,280 --> 00:21:15,280
all together cool so this is

00:21:12,640 --> 00:21:17,840
this is everything all together um and

00:21:15,280 --> 00:21:21,200
this is what we can

00:21:17,840 --> 00:21:23,919
this is what this looks like in the sdl

00:21:21,200 --> 00:21:25,520
cool um and the other cool thing is this

00:21:23,919 --> 00:21:28,720
is what we're going to do right now is

00:21:25,520 --> 00:21:29,039
um so we have these two different types

00:21:28,720 --> 00:21:30,880
and

00:21:29,039 --> 00:21:33,039
two different result types and all of

00:21:30,880 --> 00:21:33,919
the different states they can have

00:21:33,039 --> 00:21:36,480
and what we're going to do is we're

00:21:33,919 --> 00:21:39,039
going to actually add a field called

00:21:36,480 --> 00:21:39,840
image result called profile image result

00:21:39,039 --> 00:21:42,240
with the type

00:21:39,840 --> 00:21:43,520
image result to our user so now you can

00:21:42,240 --> 00:21:46,400
kind of see

00:21:43,520 --> 00:21:48,080
that these results can intertwine and

00:21:46,400 --> 00:21:50,240
that would totally happen

00:21:48,080 --> 00:21:51,280
a user obviously would have a profile

00:21:50,240 --> 00:21:54,080
image so

00:21:51,280 --> 00:21:56,000
this would be a profile image result so

00:21:54,080 --> 00:21:57,520
yeah

00:21:56,000 --> 00:21:59,440
what we can see here is that we've added

00:21:57,520 --> 00:22:00,559
additional result types for our new

00:21:59,440 --> 00:22:03,679
object type

00:22:00,559 --> 00:22:05,120
so we have new results for image

00:22:03,679 --> 00:22:06,720
and now we have image result which is

00:22:05,120 --> 00:22:09,039
similar to what we had with user result

00:22:06,720 --> 00:22:10,840
and now that's on that that is a field

00:22:09,039 --> 00:22:13,760
on

00:22:10,840 --> 00:22:15,200
user so let's take a look at what a

00:22:13,760 --> 00:22:18,240
query might look like so

00:22:15,200 --> 00:22:20,159
again we have our user and all our user

00:22:18,240 --> 00:22:22,000
in all of its different states in a user

00:22:20,159 --> 00:22:22,559
result which is a union and then we also

00:22:22,000 --> 00:22:25,919
have

00:22:22,559 --> 00:22:27,600
a profile image and it's a profile image

00:22:25,919 --> 00:22:29,039
result and that's on a user in all of

00:22:27,600 --> 00:22:30,799
its different states so let's kind of

00:22:29,039 --> 00:22:32,320
see like what a query for that might

00:22:30,799 --> 00:22:35,919
look like

00:22:32,320 --> 00:22:37,120
okay so um we have our user result query

00:22:35,919 --> 00:22:39,120
like we did before

00:22:37,120 --> 00:22:41,600
query for that type name just in case um

00:22:39,120 --> 00:22:44,080
and then we're going to query for user

00:22:41,600 --> 00:22:45,039
like we did before in our other queries

00:22:44,080 --> 00:22:46,720
and we're going to have

00:22:45,039 --> 00:22:48,320
id name and then we're going to query

00:22:46,720 --> 00:22:49,919
for profile image result

00:22:48,320 --> 00:22:51,520
and then all the different states that

00:22:49,919 --> 00:22:52,080
that could have so a profile image

00:22:51,520 --> 00:22:54,640
result

00:22:52,080 --> 00:22:55,200
can be either an image uh it can be

00:22:54,640 --> 00:22:56,799
flagged

00:22:55,200 --> 00:22:58,720
or it can be hidden so we'll query for

00:22:56,799 --> 00:23:00,320
all that there and then for user we're

00:22:58,720 --> 00:23:03,200
just going to query for a user

00:23:00,320 --> 00:23:04,640
and if they're blocked um so let's kind

00:23:03,200 --> 00:23:05,440
of zoom in on that because i know it's a

00:23:04,640 --> 00:23:06,960
little small

00:23:05,440 --> 00:23:08,720
and we can zoom in on your your own

00:23:06,960 --> 00:23:11,280
computers um

00:23:08,720 --> 00:23:13,280
so let's take a look-see okay so we can

00:23:11,280 --> 00:23:16,480
kind of see this a little clearer now

00:23:13,280 --> 00:23:18,559
um but it's not that much different than

00:23:16,480 --> 00:23:20,960
what we had before um it's kind of very

00:23:18,559 --> 00:23:22,320
similar to what we had for a user

00:23:20,960 --> 00:23:24,720
we're just doing kind of the same thing

00:23:22,320 --> 00:23:27,840
just different types

00:23:24,720 --> 00:23:27,840
um so cool let's run it

00:23:28,960 --> 00:23:33,440
sweet cool so in this case this is the

00:23:32,480 --> 00:23:35,760
happy path

00:23:33,440 --> 00:23:36,720
we got our data back we have our user

00:23:35,760 --> 00:23:39,280
result um

00:23:36,720 --> 00:23:40,159
and this time we've got a user back it's

00:23:39,280 --> 00:23:41,919
ash

00:23:40,159 --> 00:23:44,080
and we also have their profile image

00:23:41,919 --> 00:23:45,520
result um and the type name there is

00:23:44,080 --> 00:23:47,600
image so we got their image back and we

00:23:45,520 --> 00:23:50,640
just queried for their id

00:23:47,600 --> 00:23:52,480
the id of the profile image result cool

00:23:50,640 --> 00:23:54,559
so you can kind of see how this would

00:23:52,480 --> 00:23:56,400
look and what's great is that it's

00:23:54,559 --> 00:23:57,840
all this information is right here and

00:23:56,400 --> 00:23:58,480
this is the happy path we know it's an

00:23:57,840 --> 00:24:00,559
image

00:23:58,480 --> 00:24:02,240
cool um so again let's go through and

00:24:00,559 --> 00:24:05,760
see what happens when

00:24:02,240 --> 00:24:06,640
we don't get the user and profile image

00:24:05,760 --> 00:24:09,600
exactly how

00:24:06,640 --> 00:24:11,039
we wanted so let's run the same query

00:24:09,600 --> 00:24:13,039
again

00:24:11,039 --> 00:24:16,320
um and see what happens but maybe

00:24:13,039 --> 00:24:16,320
something's wrong with our image

00:24:16,559 --> 00:24:21,440
okay so here we have our result back our

00:24:20,000 --> 00:24:24,159
user result we still have

00:24:21,440 --> 00:24:25,919
the user back um with the id and name

00:24:24,159 --> 00:24:27,440
and this time for a profile image

00:24:25,919 --> 00:24:29,919
result we see we didn't get an image

00:24:27,440 --> 00:24:31,200
back we actually got a flagged image

00:24:29,919 --> 00:24:33,039
and the reason is because it was a

00:24:31,200 --> 00:24:34,480
copyrighted image so i don't know ash is

00:24:33,039 --> 00:24:36,159
putting up some copyrighted images

00:24:34,480 --> 00:24:38,640
probably pokemon or something

00:24:36,159 --> 00:24:39,679
um he's not supposed to do that so the

00:24:38,640 --> 00:24:41,279
reason that this

00:24:39,679 --> 00:24:43,039
profile image has been flagged is

00:24:41,279 --> 00:24:45,840
because it's a copyrighted image

00:24:43,039 --> 00:24:47,440
um so what's really cool is that this is

00:24:45,840 --> 00:24:49,039
all in line here we asked for this

00:24:47,440 --> 00:24:51,679
there's something wrong with the image

00:24:49,039 --> 00:24:53,440
and the client can display a copyrighted

00:24:51,679 --> 00:24:54,559
image or whatever based on what they got

00:24:53,440 --> 00:24:56,960
back from this query and they don't have

00:24:54,559 --> 00:25:01,360
to dig around in the errors array

00:24:56,960 --> 00:25:03,200
so that's pretty sweet um

00:25:01,360 --> 00:25:05,120
so let's just kind of go through again

00:25:03,200 --> 00:25:08,000
what we've we've learned here so

00:25:05,120 --> 00:25:08,960
again uh results are customizable for

00:25:08,000 --> 00:25:11,200
each entity

00:25:08,960 --> 00:25:13,200
so a user can have different alternative

00:25:11,200 --> 00:25:14,640
results than other entities will

00:25:13,200 --> 00:25:16,880
and we can add different errors and

00:25:14,640 --> 00:25:18,559
customizable fields for each type so we

00:25:16,880 --> 00:25:19,279
did that for user and then we did that

00:25:18,559 --> 00:25:23,840
again for

00:25:19,279 --> 00:25:25,840
image so that's pretty sweet

00:25:23,840 --> 00:25:27,200
it's great because we know exactly where

00:25:25,840 --> 00:25:30,080
these

00:25:27,200 --> 00:25:30,480
results came from we know exactly what

00:25:30,080 --> 00:25:32,559
uh

00:25:30,480 --> 00:25:34,000
what errors in the query uh what the

00:25:32,559 --> 00:25:35,440
errors were in the query because they're

00:25:34,000 --> 00:25:37,279
attached to the entity

00:25:35,440 --> 00:25:39,039
so whenever there was an issue with a

00:25:37,279 --> 00:25:40,400
user we knew exactly what the problem

00:25:39,039 --> 00:25:41,360
was because it was right there next to

00:25:40,400 --> 00:25:43,679
the user

00:25:41,360 --> 00:25:45,520
for an image when it was a copyrighted

00:25:43,679 --> 00:25:46,880
image we knew what the issue was because

00:25:45,520 --> 00:25:50,400
it was right there in line

00:25:46,880 --> 00:25:53,840
as a part of the result of our query um

00:25:50,400 --> 00:25:55,760
which is pretty awesome and then lastly

00:25:53,840 --> 00:25:57,840
the client gets to decide what results

00:25:55,760 --> 00:25:58,720
it cares about and what results it can

00:25:57,840 --> 00:26:00,480
ignore

00:25:58,720 --> 00:26:02,320
so because this is all queries and then

00:26:00,480 --> 00:26:03,919
because this is graphql

00:26:02,320 --> 00:26:05,440
as a client you can query for what you

00:26:03,919 --> 00:26:06,240
want and what your what you don't want

00:26:05,440 --> 00:26:08,159
as long as it's

00:26:06,240 --> 00:26:09,840
uh and not query for what you don't want

00:26:08,159 --> 00:26:11,360
as long as it's in the schema as long as

00:26:09,840 --> 00:26:12,159
it's encoded in the schema you get to

00:26:11,360 --> 00:26:13,919
decide

00:26:12,159 --> 00:26:15,360
so if you don't want to get all of those

00:26:13,919 --> 00:26:17,919
different types for

00:26:15,360 --> 00:26:19,679
um a result back you don't have to query

00:26:17,919 --> 00:26:21,440
for them you can just query for

00:26:19,679 --> 00:26:22,799
uh the image or you can just query for

00:26:21,440 --> 00:26:24,000
the user and don't care about anything

00:26:22,799 --> 00:26:25,760
else

00:26:24,000 --> 00:26:26,720
so you as a client get to decide what's

00:26:25,760 --> 00:26:27,279
important when you're writing your

00:26:26,720 --> 00:26:28,640
queries

00:26:27,279 --> 00:26:31,120
which is kind of the whole point of

00:26:28,640 --> 00:26:31,120
graphql

00:26:31,840 --> 00:26:36,559
and so what we learned also is that

00:26:34,159 --> 00:26:37,440
errors don't cause failures in nested

00:26:36,559 --> 00:26:39,520
queries

00:26:37,440 --> 00:26:40,720
um we were able to query for two

00:26:39,520 --> 00:26:42,640
different result types

00:26:40,720 --> 00:26:43,919
and when one failed it didn't cascade

00:26:42,640 --> 00:26:45,520
and fail the entire query

00:26:43,919 --> 00:26:47,360
this is a problem that i have

00:26:45,520 --> 00:26:49,600
experienced personally in the past

00:26:47,360 --> 00:26:51,120
it's a real bummer when you query for

00:26:49,600 --> 00:26:53,200
one thing and then something inside a

00:26:51,120 --> 00:26:53,919
nested query like fails the entire query

00:26:53,200 --> 00:26:56,720
out

00:26:53,919 --> 00:26:58,400
um so the these types of results don't

00:26:56,720 --> 00:27:01,840
actually cause these like nested

00:26:58,400 --> 00:27:03,279
uh cascading failures um

00:27:01,840 --> 00:27:05,440
the other thing is that we can kind of

00:27:03,279 --> 00:27:06,320
tune how verbose we want these results

00:27:05,440 --> 00:27:08,240
to be

00:27:06,320 --> 00:27:09,360
we can add result types to any entity we

00:27:08,240 --> 00:27:10,480
want

00:27:09,360 --> 00:27:13,039
kind of like we did with user and

00:27:10,480 --> 00:27:14,880
profile image or not we don't have to um

00:27:13,039 --> 00:27:17,200
we get to decide what we want this to

00:27:14,880 --> 00:27:18,720
look like we can add a bunch of stuff to

00:27:17,200 --> 00:27:20,320
each of our results or we don't have to

00:27:18,720 --> 00:27:22,399
add anything we can just add a field or

00:27:20,320 --> 00:27:24,559
it can just be a type it doesn't matter

00:27:22,399 --> 00:27:27,120
we get to decide how this is encoded and

00:27:24,559 --> 00:27:30,240
how this is in our schema

00:27:27,120 --> 00:27:32,559
and then also um we are able to

00:27:30,240 --> 00:27:33,919
basically more accurately represent our

00:27:32,559 --> 00:27:35,600
data

00:27:33,919 --> 00:27:37,360
by doing this our schema structure

00:27:35,600 --> 00:27:38,640
actually mirrors what our data looks

00:27:37,360 --> 00:27:40,960
like

00:27:38,640 --> 00:27:42,320
you know if we have a user and the user

00:27:40,960 --> 00:27:43,760
can have all these different states it

00:27:42,320 --> 00:27:46,320
kind of makes sense that they would be

00:27:43,760 --> 00:27:47,760
attached to the entity and encoded in

00:27:46,320 --> 00:27:49,440
our schema

00:27:47,760 --> 00:27:50,880
and when it's like that it's much easier

00:27:49,440 --> 00:27:51,360
to reason about when i'm querying for a

00:27:50,880 --> 00:27:53,279
user

00:27:51,360 --> 00:27:54,480
and you know i want to know what the

00:27:53,279 --> 00:27:57,039
different states are so i can

00:27:54,480 --> 00:27:58,480
i can display them properly so it makes

00:27:57,039 --> 00:27:59,679
it a lot easier to reason about this

00:27:58,480 --> 00:28:01,200
stuff when it's all encoded in the

00:27:59,679 --> 00:28:05,120
schema and you can kind of look at

00:28:01,200 --> 00:28:07,600
what this data looks like um

00:28:05,120 --> 00:28:08,640
so maybe you might be thinking this but

00:28:07,600 --> 00:28:10,080
uh

00:28:08,640 --> 00:28:12,080
there can there are more than just two

00:28:10,080 --> 00:28:14,480
categories of errors i just

00:28:12,080 --> 00:28:15,760
displayed these for you today um just so

00:28:14,480 --> 00:28:17,440
you can kind of take a look

00:28:15,760 --> 00:28:19,679
but there could definitely be more than

00:28:17,440 --> 00:28:22,159
just errors and things that are results

00:28:19,679 --> 00:28:23,840
um but our alternative results are kind

00:28:22,159 --> 00:28:25,200
of like a good way to start thinking

00:28:23,840 --> 00:28:26,720
about what can be returned and start

00:28:25,200 --> 00:28:28,000
thinking about how we can maybe model

00:28:26,720 --> 00:28:29,279
some of these things that might not

00:28:28,000 --> 00:28:32,559
actually be errors

00:28:29,279 --> 00:28:33,919
in our schema um so there's i'm sure

00:28:32,559 --> 00:28:36,960
there's bunches of different things

00:28:33,919 --> 00:28:38,720
um we're just not covering them today

00:28:36,960 --> 00:28:41,039
um and then the other thing is you can

00:28:38,720 --> 00:28:42,559
customize this as much as you want um

00:28:41,039 --> 00:28:44,399
that's kind of what's cool about this

00:28:42,559 --> 00:28:46,320
and what's kind of cool about graphql

00:28:44,399 --> 00:28:47,760
is that you get to decide what you care

00:28:46,320 --> 00:28:48,960
about and what you want to customize and

00:28:47,760 --> 00:28:50,240
what you don't um

00:28:48,960 --> 00:28:52,080
if you don't care about half of these

00:28:50,240 --> 00:28:53,520
states you don't have to

00:28:52,080 --> 00:28:55,600
put them in the schema and as the client

00:28:53,520 --> 00:28:57,919
you don't have to query for them um but

00:28:55,600 --> 00:29:01,760
you can also add new types of results

00:28:57,919 --> 00:29:04,480
so that's pretty sweet um

00:29:01,760 --> 00:29:06,880
so what did we learn well we learned

00:29:04,480 --> 00:29:08,559
that not everything is an error

00:29:06,880 --> 00:29:10,159
and we've also learned that you can

00:29:08,559 --> 00:29:10,880
model your errors as errors and you can

00:29:10,159 --> 00:29:14,080
model your

00:29:10,880 --> 00:29:14,080
results as results

00:29:15,520 --> 00:29:19,520
the other thing is uh results are

00:29:18,320 --> 00:29:22,080
actually things that you

00:29:19,520 --> 00:29:23,200
want to display which is awesome because

00:29:22,080 --> 00:29:24,640
we can actually

00:29:23,200 --> 00:29:27,440
encode these in the schema and we can

00:29:24,640 --> 00:29:29,679
query for them

00:29:27,440 --> 00:29:31,200
and as you may know the graphql spec

00:29:29,679 --> 00:29:32,880
intentionally does not prescribe

00:29:31,200 --> 00:29:34,399
how we do a lot of these things and this

00:29:32,880 --> 00:29:37,200
is also true of errors

00:29:34,399 --> 00:29:38,960
um so it kind of gives us gives us the

00:29:37,200 --> 00:29:40,640
flexibility to

00:29:38,960 --> 00:29:42,159
design our schema and design how we want

00:29:40,640 --> 00:29:43,840
to handle errors and in this case

00:29:42,159 --> 00:29:45,600
results

00:29:43,840 --> 00:29:47,120
the fun thing is this talk has actually

00:29:45,600 --> 00:29:48,480
been all about results i tricked you

00:29:47,120 --> 00:29:50,240
it's not about errors at all

00:29:48,480 --> 00:29:52,720
and actually it's really about schema

00:29:50,240 --> 00:29:54,000
modeling thinking about your data

00:29:52,720 --> 00:29:55,760
and how it fits in your schema and

00:29:54,000 --> 00:29:57,200
really like tailoring that to what you

00:29:55,760 --> 00:29:58,559
need

00:29:57,200 --> 00:30:00,880
and i think results can kind of help

00:29:58,559 --> 00:30:00,880
with that

00:30:01,360 --> 00:30:05,440
so one thing um medium i used to work at

00:30:04,880 --> 00:30:08,080
medium

00:30:05,440 --> 00:30:09,200
and we're actually using this uh medium

00:30:08,080 --> 00:30:09,760
is using this functionality in

00:30:09,200 --> 00:30:12,000
production

00:30:09,760 --> 00:30:13,120
right now um and it's actually helped a

00:30:12,000 --> 00:30:14,960
lot to avoid

00:30:13,120 --> 00:30:16,240
uh the error types um that we were

00:30:14,960 --> 00:30:17,440
encountering before especially that

00:30:16,240 --> 00:30:18,720
cascading issue

00:30:17,440 --> 00:30:21,520
those are all things that this you know

00:30:18,720 --> 00:30:22,159
we've used this before and we've dealt

00:30:21,520 --> 00:30:23,760
with this before

00:30:22,159 --> 00:30:25,279
and it's being used now and this is why

00:30:23,760 --> 00:30:26,159
we've kind of like thought about results

00:30:25,279 --> 00:30:28,399
a lot

00:30:26,159 --> 00:30:29,440
um i work at twitter now though and

00:30:28,399 --> 00:30:31,679
we're trying to work on

00:30:29,440 --> 00:30:33,760
using this functionality in the future

00:30:31,679 --> 00:30:36,080
it's a lot more complicated at twitter

00:30:33,760 --> 00:30:39,279
so it won't look exactly like this but

00:30:36,080 --> 00:30:39,279
we're using something similar

00:30:40,399 --> 00:30:44,880
so i hope that you've seen how we can

00:30:43,039 --> 00:30:46,720
approach error handling and how we can

00:30:44,880 --> 00:30:47,600
deal with it with different classes of

00:30:46,720 --> 00:30:49,039
errors

00:30:47,600 --> 00:30:51,200
especially when they're not errors at

00:30:49,039 --> 00:30:52,960
all we can model things in the schema

00:30:51,200 --> 00:30:54,320
and maybe they're just results

00:30:52,960 --> 00:30:56,320
um so i hope this has been really

00:30:54,320 --> 00:30:58,720
helpful helpful for everyone

00:30:56,320 --> 00:30:59,360
and thanks for coming to my talk hey

00:30:58,720 --> 00:31:02,320
everyone

00:30:59,360 --> 00:31:03,919
um hope you enjoyed the talk um and it

00:31:02,320 --> 00:31:05,200
looks like we have a ton of questions

00:31:03,919 --> 00:31:06,480
and i think we don't have

00:31:05,200 --> 00:31:08,640
a ton of time to answer them but i'm

00:31:06,480 --> 00:31:10,240
going to try to answer as many as i can

00:31:08,640 --> 00:31:12,559
um so i'm just going to get right into

00:31:10,240 --> 00:31:15,840
it um so first question

00:31:12,559 --> 00:31:17,919
um is in the case of 500 type error

00:31:15,840 --> 00:31:19,519
codes do you still recommend individual

00:31:17,919 --> 00:31:20,559
error types and that question is from

00:31:19,519 --> 00:31:23,919
kurt

00:31:20,559 --> 00:31:25,200
um and yes um basically anything that's

00:31:23,919 --> 00:31:27,279
like an unexpected

00:31:25,200 --> 00:31:29,440
error i would say like continue to use

00:31:27,279 --> 00:31:31,120
the like error codes um or put them in

00:31:29,440 --> 00:31:33,279
the airs array

00:31:31,120 --> 00:31:34,880
it's mostly because it's hard to encode

00:31:33,279 --> 00:31:37,200
things in the schema that you don't

00:31:34,880 --> 00:31:38,960
know about yet um like 500 errors would

00:31:37,200 --> 00:31:40,480
be kind of hard to encode in the schema

00:31:38,960 --> 00:31:41,200
especially when they happen for like any

00:31:40,480 --> 00:31:44,480
sort of thing

00:31:41,200 --> 00:31:47,279
um so yeah um let's see next

00:31:44,480 --> 00:31:48,000
question do you have a winter check on

00:31:47,279 --> 00:31:50,080
twitter that

00:31:48,000 --> 00:31:51,440
detects that all mutations handle all

00:31:50,080 --> 00:31:53,760
possible errors

00:31:51,440 --> 00:31:54,480
and how do you know or how do you handle

00:31:53,760 --> 00:31:57,200
new members

00:31:54,480 --> 00:31:58,720
to union types to avoid ignoring new

00:31:57,200 --> 00:32:02,240
errors and that question is from

00:31:58,720 --> 00:32:03,679
unwanted crow um so yeah i think uh

00:32:02,240 --> 00:32:05,679
one we're trying to kind of build out

00:32:03,679 --> 00:32:06,960
things to help detect when like which

00:32:05,679 --> 00:32:09,679
union arms were handled and which

00:32:06,960 --> 00:32:11,600
weren't but also um we only would want

00:32:09,679 --> 00:32:13,760
to do that for cases when clients

00:32:11,600 --> 00:32:15,200
um would need to absolutely handle all

00:32:13,760 --> 00:32:15,840
of those cases and it's really important

00:32:15,200 --> 00:32:18,000
too

00:32:15,840 --> 00:32:19,760
um but part of the like cool part of

00:32:18,000 --> 00:32:21,519
this design is that you as a client you

00:32:19,760 --> 00:32:22,960
don't have to handle all of those cases

00:32:21,519 --> 00:32:25,519
if you don't want to

00:32:22,960 --> 00:32:27,200
um so in some cases we wouldn't want to

00:32:25,519 --> 00:32:28,159
like add that sort of like lint check to

00:32:27,200 --> 00:32:29,360
make sure you're handling all those

00:32:28,159 --> 00:32:33,760
cases

00:32:29,360 --> 00:32:35,360
um cool um let's see next question

00:32:33,760 --> 00:32:36,960
this is kind of a long one and i think

00:32:35,360 --> 00:32:38,720
it's like a really good one so um on a

00:32:36,960 --> 00:32:41,039
simple query like user

00:32:38,720 --> 00:32:43,279
number of union types required might be

00:32:41,039 --> 00:32:44,799
pretty small but on a very complex

00:32:43,279 --> 00:32:46,399
mutation you might get hundreds of

00:32:44,799 --> 00:32:47,600
different possible errors it feels like

00:32:46,399 --> 00:32:49,360
you are putting the burden of knowing

00:32:47,600 --> 00:32:52,480
what types of errors onto the

00:32:49,360 --> 00:32:54,240
client however errors are purely

00:32:52,480 --> 00:32:56,320
server-driven behavior and graphql

00:32:54,240 --> 00:32:57,519
operations or driven requests um how do

00:32:56,320 --> 00:32:58,960
you deal with that

00:32:57,519 --> 00:33:01,600
how do you avoid having client

00:32:58,960 --> 00:33:03,039
operations that span a number of pages

00:33:01,600 --> 00:33:04,799
and require a huge number of fragments

00:33:03,039 --> 00:33:06,559
and how do you how do you avoid

00:33:04,799 --> 00:33:08,320
rewriting clients when a new error has

00:33:06,559 --> 00:33:10,320
to be added on the server side

00:33:08,320 --> 00:33:11,519
so yeah long question um but it's really

00:33:10,320 --> 00:33:13,840
good so one

00:33:11,519 --> 00:33:15,519
um yes like i kind of touched on this in

00:33:13,840 --> 00:33:17,679
the previous question but uh the clients

00:33:15,519 --> 00:33:19,760
will need to know what errors to handle

00:33:17,679 --> 00:33:20,799
um and but they kind of need to know

00:33:19,760 --> 00:33:23,120
this anyway

00:33:20,799 --> 00:33:24,080
um so like for example um for like a

00:33:23,120 --> 00:33:25,840
suspended user

00:33:24,080 --> 00:33:27,919
as a client i would want to know you

00:33:25,840 --> 00:33:29,360
know if that user is actually suspended

00:33:27,919 --> 00:33:30,880
and then you know i have to display that

00:33:29,360 --> 00:33:32,559
somehow so i already need to know pretty

00:33:30,880 --> 00:33:34,640
much all of these like different like

00:33:32,559 --> 00:33:36,399
entity error result types

00:33:34,640 --> 00:33:37,760
um so it's something that i would i need

00:33:36,399 --> 00:33:39,360
to know anyway so it's kind of not

00:33:37,760 --> 00:33:41,279
necessarily a burden it's like really

00:33:39,360 --> 00:33:42,799
useful because you have you must handle

00:33:41,279 --> 00:33:46,000
a lot of these things

00:33:42,799 --> 00:33:47,679
um and when you add new like union arms

00:33:46,000 --> 00:33:48,559
um yeah you'll have to rewrite parts of

00:33:47,679 --> 00:33:50,399
your client

00:33:48,559 --> 00:33:52,080
um and i think maybe i i didn't quite

00:33:50,399 --> 00:33:53,919
touch on this in the talk but um

00:33:52,080 --> 00:33:55,360
for if you're using union types to

00:33:53,919 --> 00:33:57,519
handle errors um or

00:33:55,360 --> 00:33:59,120
results um you'll definitely need some

00:33:57,519 --> 00:34:01,519
sort of like default case

00:33:59,120 --> 00:34:02,320
so for you know for a client that you

00:34:01,519 --> 00:34:04,559
know is like

00:34:02,320 --> 00:34:05,760
uh you have like certain error types or

00:34:04,559 --> 00:34:07,440
result types and then you'll have like a

00:34:05,760 --> 00:34:08,240
default kind of catch-all case just in

00:34:07,440 --> 00:34:10,320
case you know

00:34:08,240 --> 00:34:12,320
uh one of those like you get some sort

00:34:10,320 --> 00:34:14,240
of new result type that you don't expect

00:34:12,320 --> 00:34:15,839
um and that's great for when you're you

00:34:14,240 --> 00:34:16,879
know you get like a new client the older

00:34:15,839 --> 00:34:19,679
clients don't you know

00:34:16,879 --> 00:34:21,599
aren't able to support um new union arms

00:34:19,679 --> 00:34:22,960
um so then they have this default case

00:34:21,599 --> 00:34:24,800
um so that's really important anytime

00:34:22,960 --> 00:34:26,480
you're using unions just anyway because

00:34:24,800 --> 00:34:27,919
if you do get something unexpected um

00:34:26,480 --> 00:34:29,440
you wouldn't be able to handle it

00:34:27,919 --> 00:34:31,359
um so that's kind of like an important

00:34:29,440 --> 00:34:34,480
uh piece there

00:34:31,359 --> 00:34:36,240
um um and then the last one

00:34:34,480 --> 00:34:38,000
um do you think this pattern would make

00:34:36,240 --> 00:34:40,000
sense for authorization errors

00:34:38,000 --> 00:34:41,520
having a union with type unauthorized

00:34:40,000 --> 00:34:43,040
for any part of the schema um the

00:34:41,520 --> 00:34:44,720
current user can't access

00:34:43,040 --> 00:34:47,040
um this is an interesting question and i

00:34:44,720 --> 00:34:49,359
think yes um in some ways kind of like

00:34:47,040 --> 00:34:50,879
authorization errors are sort of like

00:34:49,359 --> 00:34:53,280
different states of an entity

00:34:50,879 --> 00:34:55,040
um and i think uh this sort of like

00:34:53,280 --> 00:34:57,119
union scheme could be used for

00:34:55,040 --> 00:34:58,480
maybe authorization errors um you can

00:34:57,119 --> 00:34:59,680
think of maybe some other errors maybe

00:34:58,480 --> 00:35:01,839
like rate limiting um

00:34:59,680 --> 00:35:03,280
those things we haven't been using but i

00:35:01,839 --> 00:35:06,480
could definitely see

00:35:03,280 --> 00:35:08,320
being able to use this for those things

00:35:06,480 --> 00:35:11,020
okay i think that's all the time i have

00:35:08,320 --> 00:35:14,839
so thank you everyone for all the

00:35:11,020 --> 00:35:17,839
[Music]

00:35:14,839 --> 00:35:17,839
questions

00:35:19,440 --> 00:35:21,520

YouTube URL: https://www.youtube.com/watch?v=RDNTP66oY2o


