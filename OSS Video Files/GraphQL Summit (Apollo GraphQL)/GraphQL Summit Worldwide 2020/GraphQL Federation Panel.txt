Title: GraphQL Federation Panel
Publication date: 2020-08-05
Playlist: GraphQL Summit Worldwide 2020
Description: 
	Moderator: Jeff Hampton, Solutions Architect at Apollo
Uri Goldshtein, Founder/Member at The Guild
Stephen Spalding, Engineer at Netflix
William Guedes, Engineering Manager at StockX
Tejas Shikhare, Senior Software Engineer at Netflix

Resources:
ApolloGraphQL - https://www.apollographql.com/
Learn GraphQL using Apollo's Tutorials: https://odyssey.apollographql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Captions: 
	00:00:00,050 --> 00:00:03,409
[Music]

00:00:06,080 --> 00:00:08,480
hello

00:00:06,799 --> 00:00:11,120
good morning good evening good afternoon

00:00:08,480 --> 00:00:13,200
everyone uh welcome to the panel on

00:00:11,120 --> 00:00:14,240
federation here at graphql summit for

00:00:13,200 --> 00:00:16,080
2020.

00:00:14,240 --> 00:00:17,920
uh i will be your moderator today my

00:00:16,080 --> 00:00:19,359
name is jeff hampton i am director of

00:00:17,920 --> 00:00:21,279
solutions engineering

00:00:19,359 --> 00:00:23,439
i work with our prospects and our

00:00:21,279 --> 00:00:24,320
customers uh from a field engineering

00:00:23,439 --> 00:00:26,960
standpoint

00:00:24,320 --> 00:00:27,359
i'm not a salesperson i'm an engineer uh

00:00:26,960 --> 00:00:29,760
and i

00:00:27,359 --> 00:00:30,560
i know our panelists today uh fairly

00:00:29,760 --> 00:00:33,840
well

00:00:30,560 --> 00:00:35,760
um i'm gonna skip introductions we have

00:00:33,840 --> 00:00:36,640
a very short period of time here and you

00:00:35,760 --> 00:00:38,640
can see

00:00:36,640 --> 00:00:40,320
their titles there's information that's

00:00:38,640 --> 00:00:42,399
been posted on the site

00:00:40,320 --> 00:00:43,360
so let's go ahead and hop right in and

00:00:42,399 --> 00:00:44,879
what i'll do

00:00:43,360 --> 00:00:46,559
for each of these questions i will go

00:00:44,879 --> 00:00:49,680
ahead and uh

00:00:46,559 --> 00:00:50,800
use the same order every time so we're

00:00:49,680 --> 00:00:54,079
going to start with

00:00:50,800 --> 00:00:59,840
uh will we'll go to uh sorry uri or

00:00:54,079 --> 00:00:59,840
uri uh

00:01:01,280 --> 00:01:04,720
and then we'll do uh uh stephen is that

00:01:04,320 --> 00:01:07,520
correct

00:01:04,720 --> 00:01:08,479
pronunciation's good um yeah i'll just

00:01:07,520 --> 00:01:10,320
suggest for

00:01:08,479 --> 00:01:12,479
some of the questions for me to be a bit

00:01:10,320 --> 00:01:14,240
bad because our use cases are sometimes

00:01:12,479 --> 00:01:16,880
a bit weird so it's better to hear like

00:01:14,240 --> 00:01:19,439
the most common use cases

00:01:16,880 --> 00:01:20,479
yeah sure i love a good i love a good

00:01:19,439 --> 00:01:24,159
weird use case

00:01:20,479 --> 00:01:24,799
uh so and i love the work at the guild

00:01:24,159 --> 00:01:27,280
so

00:01:24,799 --> 00:01:28,799
i'm i'm excited jeff can you go stephen

00:01:27,280 --> 00:01:32,479
before me

00:01:28,799 --> 00:01:35,920
sure i'll do stephen okay

00:01:32,479 --> 00:01:39,119
so first things first uh what led

00:01:35,920 --> 00:01:43,200
what led you to choose federation so

00:01:39,119 --> 00:01:46,159
we can start with will absolutely

00:01:43,200 --> 00:01:47,200
so we chose federation in the same time

00:01:46,159 --> 00:01:50,320
that we chose

00:01:47,200 --> 00:01:52,960
graphql actually we were running our

00:01:50,320 --> 00:01:54,799
services on lambda aws lambda

00:01:52,960 --> 00:01:56,399
and we're beginning to expand

00:01:54,799 --> 00:02:00,079
internationally

00:01:56,399 --> 00:02:01,680
so we found a big bottleneck on our

00:02:00,079 --> 00:02:03,280
services was that the network

00:02:01,680 --> 00:02:06,159
communication and as we go to

00:02:03,280 --> 00:02:07,840
parts of africa parts of china uh we're

00:02:06,159 --> 00:02:09,360
trying to optimize for latency graphql

00:02:07,840 --> 00:02:11,039
was a key contender

00:02:09,360 --> 00:02:13,440
in reducing that payload size over the

00:02:11,039 --> 00:02:14,160
wire so when making that transition to

00:02:13,440 --> 00:02:16,879
graphql

00:02:14,160 --> 00:02:18,319
we we had one of the engineers kyle do

00:02:16,879 --> 00:02:20,560
some research and exploration and

00:02:18,319 --> 00:02:23,040
federation was just coming out

00:02:20,560 --> 00:02:24,800
and that little piece of engineering as

00:02:23,040 --> 00:02:26,319
i was trying to try a new thing

00:02:24,800 --> 00:02:28,000
jumped on it and haven't looked back

00:02:26,319 --> 00:02:30,080
since

00:02:28,000 --> 00:02:32,080
fantastic and you all i checked your

00:02:30,080 --> 00:02:33,519
crunch base i've been following you all

00:02:32,080 --> 00:02:37,360
uh congratulations on your

00:02:33,519 --> 00:02:41,120
your success last year so thank you

00:02:37,360 --> 00:02:42,400
uh same question what led you to choose

00:02:41,120 --> 00:02:44,319
federation like you have a slightly

00:02:42,400 --> 00:02:47,920
different perspective i think so

00:02:44,319 --> 00:02:50,480
uh yeah yeah i i think um what led us

00:02:47,920 --> 00:02:51,519
to choose it is we're you know we're

00:02:50,480 --> 00:02:52,319
working with a lot of different

00:02:51,519 --> 00:02:55,680
companies

00:02:52,319 --> 00:02:56,720
large companies like microsoft or banks

00:02:55,680 --> 00:02:58,959
airlines

00:02:56,720 --> 00:03:00,239
things like that and our goal was to

00:02:58,959 --> 00:03:02,959
introduce graphql

00:03:00,239 --> 00:03:03,680
as fast as possible which is always hard

00:03:02,959 --> 00:03:06,319
like as

00:03:03,680 --> 00:03:08,480
if graphql federation is new graphql is

00:03:06,319 --> 00:03:11,040
also new for most companies

00:03:08,480 --> 00:03:13,120
um and so we are kind of like using

00:03:11,040 --> 00:03:16,239
whatever we can in order to

00:03:13,120 --> 00:03:17,280
like overcome any barriers whether our

00:03:16,239 --> 00:03:19,840
their technical

00:03:17,280 --> 00:03:20,720
or political in the organization in

00:03:19,840 --> 00:03:22,560
order to

00:03:20,720 --> 00:03:24,159
introduce something and federation was

00:03:22,560 --> 00:03:26,400
very helpful

00:03:24,159 --> 00:03:28,480
like for example if some part of the

00:03:26,400 --> 00:03:29,599
organization decided to go graphql but

00:03:28,480 --> 00:03:31,599
decided to go in a

00:03:29,599 --> 00:03:32,720
different language you know or something

00:03:31,599 --> 00:03:34,480
like that and

00:03:32,720 --> 00:03:36,319
we needed to combine with that

00:03:34,480 --> 00:03:38,239
information even though

00:03:36,319 --> 00:03:40,080
um i don't know sometimes they don't

00:03:38,239 --> 00:03:40,720
even want to use federation but we still

00:03:40,080 --> 00:03:42,959
want to

00:03:40,720 --> 00:03:43,840
federate their apis and things like that

00:03:42,959 --> 00:03:46,400
so

00:03:43,840 --> 00:03:47,680
iteration was very helpful there and

00:03:46,400 --> 00:03:51,120
i'll just mention that we use

00:03:47,680 --> 00:03:53,200
federation sometimes the federation uh

00:03:51,120 --> 00:03:55,040
logic on the client sometimes and

00:03:53,200 --> 00:03:57,760
sometimes on a consumer

00:03:55,040 --> 00:04:00,480
consumer service and not necessarily a

00:03:57,760 --> 00:04:00,480
gateway so

00:04:02,480 --> 00:04:06,000
yeah i want to talk to you about that

00:04:04,319 --> 00:04:08,159
later uh we have some interesting use

00:04:06,000 --> 00:04:12,720
cases too so you and i should talk

00:04:08,159 --> 00:04:14,879
uh stephen please yeah so uh for netflix

00:04:12,720 --> 00:04:15,680
it's been uh i guess kind of a journey

00:04:14,879 --> 00:04:18,320
to get to

00:04:15,680 --> 00:04:20,079
to the point where we are now uh so when

00:04:18,320 --> 00:04:20,400
you when you pull up the netflix app uh

00:04:20,079 --> 00:04:23,040
this

00:04:20,400 --> 00:04:24,160
you know this ui it's been uh using a

00:04:23,040 --> 00:04:27,199
graph api

00:04:24,160 --> 00:04:29,440
for for many years uh since since about

00:04:27,199 --> 00:04:30,560
2013 which is when house of cards first

00:04:29,440 --> 00:04:32,560
came out

00:04:30,560 --> 00:04:34,240
but it's it's always been implemented as

00:04:32,560 --> 00:04:37,440
a a monolithic

00:04:34,240 --> 00:04:39,280
uh api on this this api gateway server

00:04:37,440 --> 00:04:40,880
that's then that's been backed by

00:04:39,280 --> 00:04:43,600
microservices

00:04:40,880 --> 00:04:44,880
and so this api gateway has evolved in

00:04:43,600 --> 00:04:46,320
architecture over the years

00:04:44,880 --> 00:04:47,840
but it but it still serves the same

00:04:46,320 --> 00:04:49,120
basic purpose it aggregates

00:04:47,840 --> 00:04:51,040
functionality and it's distributed

00:04:49,120 --> 00:04:53,199
across a bunch of microservices

00:04:51,040 --> 00:04:54,840
it presents the ui with this single

00:04:53,199 --> 00:04:58,240
cohesive

00:04:54,840 --> 00:04:59,120
api so the need to evolve this this api

00:04:58,240 --> 00:05:01,039
gateway it's

00:04:59,120 --> 00:05:03,199
i mean it's primarily driven by by

00:05:01,039 --> 00:05:05,120
scaling of the company but when you

00:05:03,199 --> 00:05:06,479
think about scale

00:05:05,120 --> 00:05:09,039
you usually think about the number of

00:05:06,479 --> 00:05:10,160
users and so for netflix that's the

00:05:09,039 --> 00:05:12,240
millions of people around the world

00:05:10,160 --> 00:05:15,520
binging latest season of

00:05:12,240 --> 00:05:18,080
umbrella academy but uh there

00:05:15,520 --> 00:05:19,680
are other important dimensions as well

00:05:18,080 --> 00:05:20,479
there's thousands of engineers that are

00:05:19,680 --> 00:05:22,960
contributing

00:05:20,479 --> 00:05:24,000
to the netflix experience and they

00:05:22,960 --> 00:05:26,240
contribute to

00:05:24,000 --> 00:05:27,759
hundreds of microservices and then the

00:05:26,240 --> 00:05:29,280
number of uh

00:05:27,759 --> 00:05:30,880
the number of developers and the

00:05:29,280 --> 00:05:32,320
complexity of the domain are really

00:05:30,880 --> 00:05:33,919
important dimensions of scale

00:05:32,320 --> 00:05:35,680
and and it's actually these latter

00:05:33,919 --> 00:05:38,080
dimensions that are

00:05:35,680 --> 00:05:39,360
are what's addressed by this federated

00:05:38,080 --> 00:05:41,840
architecture

00:05:39,360 --> 00:05:43,600
the for the for an api gateway often if

00:05:41,840 --> 00:05:44,800
you have more users

00:05:43,600 --> 00:05:46,960
you can handle that just by spinning up

00:05:44,800 --> 00:05:48,240
more servers and your aws bill gets

00:05:46,960 --> 00:05:50,240
bigger

00:05:48,240 --> 00:05:52,479
but integrating the work of hundreds of

00:05:50,240 --> 00:05:55,120
engineers is where

00:05:52,479 --> 00:05:56,000
that can be the hard part and it takes

00:05:55,120 --> 00:05:58,000
time

00:05:56,000 --> 00:05:59,360
you know graphql users probably know

00:05:58,000 --> 00:06:02,639
that i mean to to

00:05:59,360 --> 00:06:04,160
design an effective api you

00:06:02,639 --> 00:06:07,039
you really need a deep understanding the

00:06:04,160 --> 00:06:08,240
domain and also to be efficient an api

00:06:07,039 --> 00:06:10,880
gateway requires

00:06:08,240 --> 00:06:12,560
you know aggregation logic and uh

00:06:10,880 --> 00:06:14,319
strategies for caching and batching and

00:06:12,560 --> 00:06:16,479
every new piece of functionality

00:06:14,319 --> 00:06:17,840
has to go through this process and so as

00:06:16,479 --> 00:06:20,639
you scale as

00:06:17,840 --> 00:06:22,160
a company as an organization you you run

00:06:20,639 --> 00:06:23,440
into this this different scaling

00:06:22,160 --> 00:06:24,319
challenge and that's the practical

00:06:23,440 --> 00:06:28,240
limits

00:06:24,319 --> 00:06:29,520
of a single api team and and so the team

00:06:28,240 --> 00:06:31,199
building the api gateway can end up

00:06:29,520 --> 00:06:33,680
becoming a bottleneck

00:06:31,199 --> 00:06:35,199
and and so we started exploring this

00:06:33,680 --> 00:06:37,759
federated architecture

00:06:35,199 --> 00:06:39,759
a couple years ago in in order to

00:06:37,759 --> 00:06:41,919
facilitate distributing the job of

00:06:39,759 --> 00:06:42,800
building apis while preserving the

00:06:41,919 --> 00:06:48,720
abstraction

00:06:42,800 --> 00:06:49,840
for clients of a single unified api

00:06:48,720 --> 00:06:52,479
just to make sure we get through our

00:06:49,840 --> 00:06:54,080
time i'm i'm going to move on t

00:06:52,479 --> 00:06:56,080
house do you have something specific to

00:06:54,080 --> 00:06:58,479
add to this question

00:06:56,080 --> 00:06:59,840
yeah so i'm just going to add you know

00:06:58,479 --> 00:07:01,520
very quickly

00:06:59,840 --> 00:07:03,759
kind of while steven was working on you

00:07:01,520 --> 00:07:06,080
know this netflix side of things we had

00:07:03,759 --> 00:07:06,800
similar experience on the on the studio

00:07:06,080 --> 00:07:09,360
side

00:07:06,800 --> 00:07:11,039
and really i think i think netflix has a

00:07:09,360 --> 00:07:13,280
rich history of micro services so

00:07:11,039 --> 00:07:15,599
a lot of there's approximately like

00:07:13,280 --> 00:07:18,639
about 100 back-end services kind of

00:07:15,599 --> 00:07:20,880
just serving the studio domain and and

00:07:18,639 --> 00:07:22,319
that's where we found a really good fit

00:07:20,880 --> 00:07:24,080
for our uh

00:07:22,319 --> 00:07:26,479
our graphql monolith to move to

00:07:24,080 --> 00:07:28,639
federation uh

00:07:26,479 --> 00:07:32,319
and and you know our exploration we also

00:07:28,639 --> 00:07:34,080
consider running modules within graphql

00:07:32,319 --> 00:07:35,919
which which i think wasn't the best fit

00:07:34,080 --> 00:07:38,319
for netflix because you know we we have

00:07:35,919 --> 00:07:40,400
a lot of microservices

00:07:38,319 --> 00:07:42,319
and and developers tend to run you know

00:07:40,400 --> 00:07:43,120
then have to run both the module

00:07:42,319 --> 00:07:44,639
pointing

00:07:43,120 --> 00:07:46,960
to the microservice as well as the

00:07:44,639 --> 00:07:50,720
microservice itself so hence we kind of

00:07:46,960 --> 00:07:53,520
went forward with uh with federation

00:07:50,720 --> 00:07:54,960
sounds good thank you all of you uh i'm

00:07:53,520 --> 00:07:56,319
gonna have i'm gonna combine two

00:07:54,960 --> 00:07:57,520
questions quickly so we can talk about

00:07:56,319 --> 00:07:59,599
the meteor ones

00:07:57,520 --> 00:08:00,639
um can you quickly go around and let's

00:07:59,599 --> 00:08:02,639
let's say uh

00:08:00,639 --> 00:08:04,400
how many services do you have and what

00:08:02,639 --> 00:08:05,360
languages and i understand some of this

00:08:04,400 --> 00:08:08,080
might be

00:08:05,360 --> 00:08:09,840
um could be potentially sensitive or

00:08:08,080 --> 00:08:11,120
trade secret so if you want to give me a

00:08:09,840 --> 00:08:13,039
general sense of

00:08:11,120 --> 00:08:15,360
you know what your scale is that's fine

00:08:13,039 --> 00:08:17,360
too so how many services

00:08:15,360 --> 00:08:19,120
and what languages if you can tell me

00:08:17,360 --> 00:08:21,759
and let's start with will

00:08:19,120 --> 00:08:22,479
yeah absolutely so today we run about 13

00:08:21,759 --> 00:08:24,400
services

00:08:22,479 --> 00:08:25,680
in production federated services in one

00:08:24,400 --> 00:08:28,080
federation uh

00:08:25,680 --> 00:08:29,520
or rpm requests per minute how many

00:08:28,080 --> 00:08:31,199
requests are handling every minute

00:08:29,520 --> 00:08:32,719
ranges from a hundred thousand to six

00:08:31,199 --> 00:08:34,240
hundred thousand depending on on

00:08:32,719 --> 00:08:36,159
marketing notifications

00:08:34,240 --> 00:08:38,240
uh that equates to about a hundred

00:08:36,159 --> 00:08:40,399
million requests per day

00:08:38,240 --> 00:08:42,320
uh that we're handling um more or less

00:08:40,399 --> 00:08:45,680
and our team is a team of five people

00:08:42,320 --> 00:08:46,959
yeah wow nicely done uh what languages

00:08:45,680 --> 00:08:49,519
are you typescript or

00:08:46,959 --> 00:08:50,240
purely or typescript yes so typescript

00:08:49,519 --> 00:08:54,560
with a lot of uh

00:08:50,240 --> 00:08:56,800
apollo code jen okay awesome

00:08:54,560 --> 00:08:56,800
uh

00:08:58,560 --> 00:09:04,000
um yeah so in our cases i mean there's a

00:09:01,839 --> 00:09:05,440
few different cases but i think

00:09:04,000 --> 00:09:07,120
let's say in terms of scale of

00:09:05,440 --> 00:09:08,800
developers

00:09:07,120 --> 00:09:10,399
can range between like a couple of

00:09:08,800 --> 00:09:11,760
hundreds to even a couple thousand

00:09:10,399 --> 00:09:15,120
developers

00:09:11,760 --> 00:09:16,000
um the the interesting thing there is

00:09:15,120 --> 00:09:19,120
that

00:09:16,000 --> 00:09:21,200
many times in the organization itself it

00:09:19,120 --> 00:09:23,040
sounds weird but they use the same

00:09:21,200 --> 00:09:24,320
implementation language so it might be

00:09:23,040 --> 00:09:26,800
like um

00:09:24,320 --> 00:09:28,080
everyone is using in order to write apis

00:09:26,800 --> 00:09:30,080
everyone is using node or

00:09:28,080 --> 00:09:32,560
in order to write apis everyone is using

00:09:30,080 --> 00:09:35,680
java java is the most common one

00:09:32,560 --> 00:09:36,000
in microsoft of course is.net so they're

00:09:35,680 --> 00:09:38,720
using

00:09:36,000 --> 00:09:39,120
the same language and they're i think

00:09:38,720 --> 00:09:43,440
what

00:09:39,120 --> 00:09:46,720
are we keep struggling with different um

00:09:43,440 --> 00:09:48,560
ways but in many ways there we actually

00:09:46,720 --> 00:09:50,399
thought that the more we can do it real

00:09:48,560 --> 00:09:52,000
time the more the merging and things we

00:09:50,399 --> 00:09:55,519
can do with field time

00:09:52,000 --> 00:09:59,040
um then you know it's better when we get

00:09:55,519 --> 00:10:01,920
a more consistent uh and more consistent

00:09:59,040 --> 00:10:04,480
uh a bit more performant but mostly more

00:10:01,920 --> 00:10:08,160
consistent uh

00:10:04,480 --> 00:10:10,079
behavior on production um but yeah

00:10:08,160 --> 00:10:12,800
we in our case it's mostly like the

00:10:10,079 --> 00:10:16,800
concern was the amount of developers and

00:10:12,800 --> 00:10:19,360
a bit less the different languages part

00:10:16,800 --> 00:10:20,880
but where every time there's something

00:10:19,360 --> 00:10:22,640
with a different language with a

00:10:20,880 --> 00:10:24,880
different like uh implementation

00:10:22,640 --> 00:10:26,959
language which always comes up

00:10:24,880 --> 00:10:28,160
then federation is like super powerful

00:10:26,959 --> 00:10:30,320
and super helpful

00:10:28,160 --> 00:10:31,920
for sure right because you can

00:10:30,320 --> 00:10:33,360
centralize that uh

00:10:31,920 --> 00:10:34,959
logic at the gateway ultimately for

00:10:33,360 --> 00:10:36,640
resolution yeah and we and we have found

00:10:34,959 --> 00:10:40,720
the same here at apollo

00:10:36,640 --> 00:10:43,600
um uh sorry steven or t house which

00:10:40,720 --> 00:10:45,040
which one of you wants to take this yeah

00:10:43,600 --> 00:10:47,600
i can take it uh

00:10:45,040 --> 00:10:48,640
okay so so on the languages side uh we

00:10:47,600 --> 00:10:50,240
have kind of

00:10:48,640 --> 00:10:52,480
mostly on the back end we have java and

00:10:50,240 --> 00:10:53,440
kotlin so so we we use graphql java

00:10:52,480 --> 00:10:56,560
heavily

00:10:53,440 --> 00:10:57,760
uh and you know uh most of the backend

00:10:56,560 --> 00:11:01,360
services and netflix

00:10:57,760 --> 00:11:03,360
are built in in jvm-based languages

00:11:01,360 --> 00:11:04,959
so federation actually was a good fit

00:11:03,360 --> 00:11:07,760
for us not because of the

00:11:04,959 --> 00:11:08,720
the polyglot support but more so for you

00:11:07,760 --> 00:11:10,480
know like

00:11:08,720 --> 00:11:12,240
uh supporting our micro service

00:11:10,480 --> 00:11:14,079
architecture to contribute to a single

00:11:12,240 --> 00:11:16,320
unified graph

00:11:14,079 --> 00:11:17,360
and in our case the schema is owned

00:11:16,320 --> 00:11:20,000
primarily by the

00:11:17,360 --> 00:11:21,040
the kind of the backend and the

00:11:20,000 --> 00:11:22,560
front-end engineers the shared

00:11:21,040 --> 00:11:24,079
collaboration while the implementation

00:11:22,560 --> 00:11:24,880
is owned by back-end engineers so we

00:11:24,079 --> 00:11:28,000
expect that

00:11:24,880 --> 00:11:28,800
pattern to continue and uh maybe steven

00:11:28,000 --> 00:11:32,959
can talk about

00:11:28,800 --> 00:11:34,880
uh the the scale this number of services

00:11:32,959 --> 00:11:37,760
yeah so well we we're basically building

00:11:34,880 --> 00:11:38,800
uh two two separate federated graphs uh

00:11:37,760 --> 00:11:40,800
one for

00:11:38,800 --> 00:11:42,160
uh the netflix app and one for the the

00:11:40,800 --> 00:11:45,040
studio side the the

00:11:42,160 --> 00:11:46,480
that they just talking about and so

00:11:45,040 --> 00:11:47,600
we've been focusing first on the studio

00:11:46,480 --> 00:11:50,000
side so that graph

00:11:47,600 --> 00:11:51,920
has been growing quickly over the last

00:11:50,000 --> 00:11:55,440
six months or so

00:11:51,920 --> 00:11:58,399
we're up to i believe 50 services

00:11:55,440 --> 00:12:00,399
now contributing to that graph and then

00:11:58,399 --> 00:12:01,680
of those about 30 are in prod

00:12:00,399 --> 00:12:04,959
over the next quarter it'll probably be

00:12:01,680 --> 00:12:06,880
about 30 more altogether

00:12:04,959 --> 00:12:08,560
and then on the streaming side it's it's

00:12:06,880 --> 00:12:09,440
just a handful of services where we

00:12:08,560 --> 00:12:12,000
start to apply

00:12:09,440 --> 00:12:14,399
uh federation to that monolithic api

00:12:12,000 --> 00:12:14,399
gateway

00:12:15,120 --> 00:12:21,360
that is that is a good scale um

00:12:19,279 --> 00:12:23,600
i need to stack rank our next questions

00:12:21,360 --> 00:12:25,760
here so bear with me for a moment

00:12:23,600 --> 00:12:26,720
uh we've talked we've talked a little

00:12:25,760 --> 00:12:28,160
bit about and

00:12:26,720 --> 00:12:29,760
steven you especially i saw a lot of

00:12:28,160 --> 00:12:31,600
head nods around

00:12:29,760 --> 00:12:34,160
uh some of the challenges of federation

00:12:31,600 --> 00:12:36,560
we find this to be the case are largely

00:12:34,160 --> 00:12:38,160
uh on the adoption side or the

00:12:36,560 --> 00:12:40,240
understanding side

00:12:38,160 --> 00:12:41,200
and the spec itself is fairly

00:12:40,240 --> 00:12:43,920
straightforward and

00:12:41,200 --> 00:12:44,240
and you know i i think that it's largely

00:12:43,920 --> 00:12:47,440
just

00:12:44,240 --> 00:12:49,760
graphql uh with with a few specific

00:12:47,440 --> 00:12:51,279
directives but uh what have you found to

00:12:49,760 --> 00:12:53,279
be the hardest part for people to

00:12:51,279 --> 00:12:55,360
understand as they adopt federation

00:12:53,279 --> 00:12:56,639
and i think consumers largely can get

00:12:55,360 --> 00:12:57,920
factored out of this

00:12:56,639 --> 00:13:00,079
uh although if there's something

00:12:57,920 --> 00:13:01,600
specific on the consumer side

00:13:00,079 --> 00:13:03,200
i would love to hear it so again let's

00:13:01,600 --> 00:13:05,360
start with bill

00:13:03,200 --> 00:13:08,399
yeah absolutely i think the hardest part

00:13:05,360 --> 00:13:11,040
for us adopting was

00:13:08,399 --> 00:13:12,639
you you needed understanding of the big

00:13:11,040 --> 00:13:14,079
picture but you can only get the big

00:13:12,639 --> 00:13:14,959
picture understanding after you spend

00:13:14,079 --> 00:13:17,360
time doing

00:13:14,959 --> 00:13:18,240
uh so you sort of have to like blindly

00:13:17,360 --> 00:13:19,680
dive in

00:13:18,240 --> 00:13:20,800
realize the mistakes that you made like

00:13:19,680 --> 00:13:22,800
well there should have actually been

00:13:20,800 --> 00:13:25,360
five services instead of one service

00:13:22,800 --> 00:13:26,079
and then step back and break those down

00:13:25,360 --> 00:13:28,720
um

00:13:26,079 --> 00:13:30,160
so the hardest part is having

00:13:28,720 --> 00:13:31,279
understanding what the final state

00:13:30,160 --> 00:13:32,839
should be

00:13:31,279 --> 00:13:34,959
without actually knowing a lot about the

00:13:32,839 --> 00:13:37,920
technology

00:13:34,959 --> 00:13:40,000
and some of that you just have to build

00:13:37,920 --> 00:13:42,000
and then refactor

00:13:40,000 --> 00:13:43,600
yeah and then that's the pattern largely

00:13:42,000 --> 00:13:46,320
that we've seen the most successful is

00:13:43,600 --> 00:13:48,240
actually to start with a small monolith

00:13:46,320 --> 00:13:49,680
at least in a poc and as you go to do

00:13:48,240 --> 00:13:51,600
your architectural planning start

00:13:49,680 --> 00:13:53,040
start thinking about it as a monolith

00:13:51,600 --> 00:13:55,199
first um

00:13:53,040 --> 00:13:56,560
which runs counter to everyone's you

00:13:55,199 --> 00:13:58,079
know desire to be

00:13:56,560 --> 00:13:59,680
uh separated from concern like

00:13:58,079 --> 00:14:01,519
separation of concerns and like

00:13:59,680 --> 00:14:02,800
you know heavily micro services day one

00:14:01,519 --> 00:14:04,399
but uh

00:14:02,800 --> 00:14:06,800
especially with two new technologies

00:14:04,399 --> 00:14:08,880
right graphql and federation

00:14:06,800 --> 00:14:11,199
uh same question yuri please what have

00:14:08,880 --> 00:14:15,199
you found to be the hardest part

00:14:11,199 --> 00:14:18,480
um i will split it up for three parts

00:14:15,199 --> 00:14:20,240
uh one is the

00:14:18,480 --> 00:14:21,600
i think sometimes when people start

00:14:20,240 --> 00:14:23,120
using federation i think the hardest

00:14:21,600 --> 00:14:24,560
part for us to explain is also that you

00:14:23,120 --> 00:14:26,639
don't have to use

00:14:24,560 --> 00:14:27,600
um and there's some cases like it's not

00:14:26,639 --> 00:14:30,880
necessarily

00:14:27,600 --> 00:14:31,440
uh you know one fits all uh the second

00:14:30,880 --> 00:14:34,880
thing

00:14:31,440 --> 00:14:37,199
is separation of concerns uh

00:14:34,880 --> 00:14:39,360
like in some cases there were reasons

00:14:37,199 --> 00:14:43,120
why those teams are separated

00:14:39,360 --> 00:14:44,800
um and uh you know there's sometimes

00:14:43,120 --> 00:14:47,519
now that you start linking those two

00:14:44,800 --> 00:14:47,839
together um there's a lot of questions

00:14:47,519 --> 00:14:49,680
of

00:14:47,839 --> 00:14:50,959
you know who owns that logic like that

00:14:49,680 --> 00:14:54,240
linking logic

00:14:50,959 --> 00:14:57,040
um might not necessarily fit into those

00:14:54,240 --> 00:14:59,040
linking services and in those teams and

00:14:57,040 --> 00:15:00,800
those the way the organization works and

00:14:59,040 --> 00:15:03,839
things like that

00:15:00,800 --> 00:15:07,120
um and the third thing i think is

00:15:03,839 --> 00:15:10,320
um the separation between

00:15:07,120 --> 00:15:13,199
a gateway and a service mesh so

00:15:10,320 --> 00:15:14,160
basically what are we merging here are

00:15:13,199 --> 00:15:18,240
we merging

00:15:14,160 --> 00:15:22,320
uh multiple gateways for products

00:15:18,240 --> 00:15:24,639
or are we merging multiple services

00:15:22,320 --> 00:15:25,360
uh and i think when you get to that

00:15:24,639 --> 00:15:27,680
question

00:15:25,360 --> 00:15:29,199
um you know you need to ask another

00:15:27,680 --> 00:15:32,000
question which is

00:15:29,199 --> 00:15:33,759
for let's say a specific service um

00:15:32,000 --> 00:15:35,120
first of all does it need to be aware of

00:15:33,759 --> 00:15:38,079
other services

00:15:35,120 --> 00:15:40,240
uh and second of all even a larger

00:15:38,079 --> 00:15:43,839
question which is maybe bless for me

00:15:40,240 --> 00:15:45,519
um is like is graphql the best protocol

00:15:43,839 --> 00:15:49,120
for that service

00:15:45,519 --> 00:15:50,800
um so i think those three subjects we

00:15:49,120 --> 00:15:51,600
see people kind of like because the

00:15:50,800 --> 00:15:53,519
amazing

00:15:51,600 --> 00:15:54,959
things in graphql and the amazing things

00:15:53,519 --> 00:15:56,959
in graphql federation and all the

00:15:54,959 --> 00:16:00,399
amazing things that follow is doing

00:15:56,959 --> 00:16:02,240
everyone is jumping in super quickly um

00:16:00,399 --> 00:16:03,920
but then there's questions to be heard

00:16:02,240 --> 00:16:05,519
there were like there's also

00:16:03,920 --> 00:16:08,240
some other technologies in the world

00:16:05,519 --> 00:16:10,560
that are not related to graphql that are

00:16:08,240 --> 00:16:12,480
sometimes you know solves some issues

00:16:10,560 --> 00:16:14,480
and sometimes in a better way or

00:16:12,480 --> 00:16:15,839
in a different way for specific use

00:16:14,480 --> 00:16:18,639
cases so

00:16:15,839 --> 00:16:19,920
um i guess those three parts are uh

00:16:18,639 --> 00:16:21,440
without i know we don't have a lot of

00:16:19,920 --> 00:16:22,639
time so i guess i'll just leave it with

00:16:21,440 --> 00:16:24,079
that

00:16:22,639 --> 00:16:25,680
if you can join us in the topic room

00:16:24,079 --> 00:16:27,839
after this everyone who's

00:16:25,680 --> 00:16:29,920
on the stream too please please i'd love

00:16:27,839 --> 00:16:33,120
to continue all these conversations

00:16:29,920 --> 00:16:34,839
um uh stephen please

00:16:33,120 --> 00:16:36,959
yeah i guess i'll say uh maybe the

00:16:34,839 --> 00:16:38,639
implementation details

00:16:36,959 --> 00:16:39,920
uh when you know when someone is

00:16:38,639 --> 00:16:41,279
implementing a service that's going to

00:16:39,920 --> 00:16:43,600
be part of the federated graph

00:16:41,279 --> 00:16:45,120
there are some federation details that

00:16:43,600 --> 00:16:46,720
you do have to be aware of

00:16:45,120 --> 00:16:49,120
specifically you have to implement this

00:16:46,720 --> 00:16:50,959
thing called like an entity resolver

00:16:49,120 --> 00:16:52,800
and it's it's basically just a single

00:16:50,959 --> 00:16:54,160
field that can look up anything in your

00:16:52,800 --> 00:16:56,560
graph it's it's kind of like the

00:16:54,160 --> 00:16:57,839
the node field if you're doing a relay

00:16:56,560 --> 00:16:59,920
server spec

00:16:57,839 --> 00:17:00,959
uh but like the return type of this

00:16:59,920 --> 00:17:03,040
field is this

00:17:00,959 --> 00:17:04,400
uh union type that's automatically

00:17:03,040 --> 00:17:06,400
generated

00:17:04,400 --> 00:17:07,839
and so it's kind of this implementation

00:17:06,400 --> 00:17:09,439
detail but you

00:17:07,839 --> 00:17:11,199
you do have to implement this resolver

00:17:09,439 --> 00:17:12,959
and so yeah

00:17:11,199 --> 00:17:14,240
you have to know a little bit about it

00:17:12,959 --> 00:17:15,839
and i mean we've worked on

00:17:14,240 --> 00:17:18,400
improving the the ergonomics for

00:17:15,839 --> 00:17:21,439
developers but there's still

00:17:18,400 --> 00:17:23,760
some uh some challenges there

00:17:21,439 --> 00:17:25,360
right you can't avoid indexing and i

00:17:23,760 --> 00:17:28,480
don't you know

00:17:25,360 --> 00:17:32,559
in in any data access model

00:17:28,480 --> 00:17:32,559
uh if if somebody comes up with a way

00:17:40,640 --> 00:17:44,240
so kind of one challenge we found people

00:17:42,720 --> 00:17:46,640
uh you know to do to adopt

00:17:44,240 --> 00:17:47,600
federation is around developer education

00:17:46,640 --> 00:17:48,799
uh so i would say

00:17:47,600 --> 00:17:50,559
you know previously there was a small

00:17:48,799 --> 00:17:51,840
team that owned the graphql server you

00:17:50,559 --> 00:17:54,480
know primarily

00:17:51,840 --> 00:17:56,160
it would be kind of uh the team that's

00:17:54,480 --> 00:17:56,960
implementing the graph uh it could be on

00:17:56,160 --> 00:17:59,120
the

00:17:56,960 --> 00:18:01,360
ui side or maybe on the backend side but

00:17:59,120 --> 00:18:03,120
what what federation actually does is it

00:18:01,360 --> 00:18:03,600
decentralizes the implementation of the

00:18:03,120 --> 00:18:05,919
graph

00:18:03,600 --> 00:18:07,360
which means now every developer that

00:18:05,919 --> 00:18:08,880
contributes the graph has to learn

00:18:07,360 --> 00:18:10,240
graphql first

00:18:08,880 --> 00:18:12,160
and there is enough complexity in

00:18:10,240 --> 00:18:13,360
graphql alone that you know learning the

00:18:12,160 --> 00:18:14,880
schema sdl

00:18:13,360 --> 00:18:17,039
how to implement resolvers and data

00:18:14,880 --> 00:18:19,280
loaders uh you know doing complex

00:18:17,039 --> 00:18:21,919
performance optimizations with lookahead

00:18:19,280 --> 00:18:23,360
so now we found that it's difficult for

00:18:21,919 --> 00:18:25,840
developers to quickly go from the

00:18:23,360 --> 00:18:28,240
traditional api mindset of kind of rest

00:18:25,840 --> 00:18:29,840
or grpc and netflix to more of a you

00:18:28,240 --> 00:18:31,360
know graph api mindset because that's

00:18:29,840 --> 00:18:32,000
more product different schema first

00:18:31,360 --> 00:18:34,400
right

00:18:32,000 --> 00:18:35,919
uh so so and and on top of that

00:18:34,400 --> 00:18:37,520
federation adds a little bit more

00:18:35,919 --> 00:18:39,840
kind of uh learning curve like steven

00:18:37,520 --> 00:18:41,280
mentioned with the entity resolver so

00:18:39,840 --> 00:18:42,960
i would say developer education is a

00:18:41,280 --> 00:18:45,200
really big challenge to get the adoption

00:18:42,960 --> 00:18:45,200
going

00:18:45,919 --> 00:18:51,520
agreed we're almost out of time we're

00:18:49,919 --> 00:18:53,039
coming down on about seven minutes here

00:18:51,520 --> 00:18:56,080
if i'm not mistaken

00:18:53,039 --> 00:18:58,320
um i think the the

00:18:56,080 --> 00:18:59,120
biggest question we've been circling

00:18:58,320 --> 00:19:01,120
around or

00:18:59,120 --> 00:19:02,240
at least the biggest topic that i that

00:19:01,120 --> 00:19:05,520
we're not

00:19:02,240 --> 00:19:07,200
really covering here is what do you wish

00:19:05,520 --> 00:19:10,160
was different

00:19:07,200 --> 00:19:10,480
about federation um and especially given

00:19:10,160 --> 00:19:13,520
the

00:19:10,480 --> 00:19:15,520
unique perspectives of team size uh

00:19:13,520 --> 00:19:17,280
versus you know sort of customer facing

00:19:15,520 --> 00:19:20,799
field engineering consulting

00:19:17,280 --> 00:19:24,080
um and then sort of this you know

00:19:20,799 --> 00:19:27,679
unique scale um i think this is a great

00:19:24,080 --> 00:19:30,559
audience so just generally

00:19:27,679 --> 00:19:32,000
uh what do you what would you like to

00:19:30,559 --> 00:19:33,520
see or what do you what do you wish was

00:19:32,000 --> 00:19:34,559
really what's the sticking point around

00:19:33,520 --> 00:19:35,520
federation what do you wish was

00:19:34,559 --> 00:19:38,559
different

00:19:35,520 --> 00:19:39,679
let's start with will i i struggled with

00:19:38,559 --> 00:19:41,760
this one because i think

00:19:39,679 --> 00:19:44,400
everything has honestly been working

00:19:41,760 --> 00:19:46,880
extremely nicely for us i think

00:19:44,400 --> 00:19:47,679
a very great opportunity in the market

00:19:46,880 --> 00:19:50,320
right now

00:19:47,679 --> 00:19:52,320
is to combine it with improve the

00:19:50,320 --> 00:19:54,400
analytics and monitoring maybe

00:19:52,320 --> 00:19:56,240
embedded with apm the fact that you're

00:19:54,400 --> 00:19:58,080
building distributed services

00:19:56,240 --> 00:20:00,320
adds a lot of complexity in operating

00:19:58,080 --> 00:20:01,440
those services so if you can more out of

00:20:00,320 --> 00:20:03,760
the box

00:20:01,440 --> 00:20:04,720
get performance metrics at the query

00:20:03,760 --> 00:20:06,559
level

00:20:04,720 --> 00:20:09,120
for those services understanding if you

00:20:06,559 --> 00:20:11,360
introduced or clients began to execute a

00:20:09,120 --> 00:20:13,360
highly unperformant query right off the

00:20:11,360 --> 00:20:14,640
bat and having monitoring around that

00:20:13,360 --> 00:20:16,640
because the complexity on distributed

00:20:14,640 --> 00:20:18,320
services definitely adds the

00:20:16,640 --> 00:20:20,240
operational overhead and i think that's

00:20:18,320 --> 00:20:22,159
a space that's missing and there's a lot

00:20:20,240 --> 00:20:24,000
of opportunity there

00:20:22,159 --> 00:20:25,520
i'd like to discuss some of that too in

00:20:24,000 --> 00:20:27,360
the in the topic room and

00:20:25,520 --> 00:20:28,799
you know we need to have more forums

00:20:27,360 --> 00:20:32,400
like this i think

00:20:28,799 --> 00:20:34,320
um shameless plug uh we've got some work

00:20:32,400 --> 00:20:36,159
on the studio side uh

00:20:34,320 --> 00:20:38,240
here at apollo to address some of those

00:20:36,159 --> 00:20:40,559
things so i you know

00:20:38,240 --> 00:20:42,080
from a product product manager

00:20:40,559 --> 00:20:43,679
perspective i'd love to hear

00:20:42,080 --> 00:20:46,000
uh some feedback and some more detail

00:20:43,679 --> 00:20:47,440
there uh rudy please what do you wish

00:20:46,000 --> 00:20:50,400
was different

00:20:47,440 --> 00:20:51,280
um i'll mention a couple of things and

00:20:50,400 --> 00:20:54,000
i'll also mention

00:20:51,280 --> 00:20:54,960
for each one a possible solution maybe

00:20:54,000 --> 00:20:58,760
to be a bit more

00:20:54,960 --> 00:20:59,919
optimistic um so first thing is around

00:20:58,760 --> 00:21:01,760
standardization

00:20:59,919 --> 00:21:03,280
like many times when we come into our

00:21:01,760 --> 00:21:06,320
company and we talk about the follow

00:21:03,280 --> 00:21:07,520
apollo federation um i know apollo is

00:21:06,320 --> 00:21:10,240
doing a lot of work to

00:21:07,520 --> 00:21:11,280
kind of like um make federation

00:21:10,240 --> 00:21:14,159
something that is

00:21:11,280 --> 00:21:14,799
more of a spec for the whole community

00:21:14,159 --> 00:21:17,039
but

00:21:14,799 --> 00:21:18,799
we still see like people kind of like

00:21:17,039 --> 00:21:20,320
being scared a bit of like you know

00:21:18,799 --> 00:21:22,240
putting something that

00:21:20,320 --> 00:21:24,159
and and kind of like confirming many

00:21:22,240 --> 00:21:27,679
many things into a standard that maybe

00:21:24,159 --> 00:21:30,000
is you know not yet a standard so

00:21:27,679 --> 00:21:31,039
they i think the path here is like we

00:21:30,000 --> 00:21:33,520
started talking

00:21:31,039 --> 00:21:34,240
uh with like people from appsync and

00:21:33,520 --> 00:21:36,559
azura

00:21:34,240 --> 00:21:38,240
and other companies like maybe we can

00:21:36,559 --> 00:21:41,520
work with apollo to like

00:21:38,240 --> 00:21:43,840
actually increase adoption of that spec

00:21:41,520 --> 00:21:44,799
across the industry uh just to make it

00:21:43,840 --> 00:21:47,679
feel for

00:21:44,799 --> 00:21:49,679
companies that it's like uh more and i

00:21:47,679 --> 00:21:53,679
think apollo probably is leading it so

00:21:49,679 --> 00:21:57,600
we should talk uh um so that's one thing

00:21:53,679 --> 00:21:57,600
the other thing is that um

00:21:57,679 --> 00:22:01,840
this idea of one graph is i think

00:22:00,080 --> 00:22:04,960
extremely powerful

00:22:01,840 --> 00:22:06,799
but many times um there's many different

00:22:04,960 --> 00:22:09,039
types of consumers of that

00:22:06,799 --> 00:22:10,640
that one graph and for example if i have

00:22:09,039 --> 00:22:12,320
a machine learning service that wants to

00:22:10,640 --> 00:22:14,720
consume that one graph

00:22:12,320 --> 00:22:16,159
people not necess don't necessarily want

00:22:14,720 --> 00:22:18,480
to confirm

00:22:16,159 --> 00:22:19,360
uh to make this call go through some

00:22:18,480 --> 00:22:21,600
gateway

00:22:19,360 --> 00:22:23,840
or through some kind of a central

00:22:21,600 --> 00:22:25,679
service

00:22:23,840 --> 00:22:27,039
on top of that maybe some of the things

00:22:25,679 --> 00:22:28,880
that i want to connect to that one

00:22:27,039 --> 00:22:30,559
rougher teams that um

00:22:28,880 --> 00:22:33,200
that they don't know what graphql

00:22:30,559 --> 00:22:34,880
federation is or or and they don't have

00:22:33,200 --> 00:22:36,960
time to implement it or they even don't

00:22:34,880 --> 00:22:40,080
know what graphql is

00:22:36,960 --> 00:22:41,679
um so and that's a big problem

00:22:40,080 --> 00:22:43,280
because we want to connect into the one

00:22:41,679 --> 00:22:46,320
graph and we want to introduce

00:22:43,280 --> 00:22:48,240
the sooner we'll get one graph uh

00:22:46,320 --> 00:22:49,760
into the organization the adoption will

00:22:48,240 --> 00:22:51,360
increase and everyone will be

00:22:49,760 --> 00:22:52,960
you know it's kind of like a chicken and

00:22:51,360 --> 00:22:56,880
an egg problem

00:22:52,960 --> 00:22:58,720
so the solution uh possible solution um

00:22:56,880 --> 00:23:00,559
which is maybe a shameless plug is like

00:22:58,720 --> 00:23:01,760
we created this library called graphql

00:23:00,559 --> 00:23:05,039
mesh where

00:23:01,760 --> 00:23:08,080
we took um the ideas of federation

00:23:05,039 --> 00:23:11,760
uh and we run federation but in an sdk

00:23:08,080 --> 00:23:14,240
context meaning i can take

00:23:11,760 --> 00:23:14,960
i can do that merging of one graph but i

00:23:14,240 --> 00:23:18,080
can do it

00:23:14,960 --> 00:23:21,440
as an sdk on top of one single

00:23:18,080 --> 00:23:24,799
let's say machine learning service and

00:23:21,440 --> 00:23:27,440
the sources of that can be not only

00:23:24,799 --> 00:23:30,320
graphql federated services but they

00:23:27,440 --> 00:23:32,720
could be just regular graphql services

00:23:30,320 --> 00:23:35,039
and they could be even a grpc or an open

00:23:32,720 --> 00:23:35,360
api service and we automatically convert

00:23:35,039 --> 00:23:38,559
them

00:23:35,360 --> 00:23:41,679
into graphical federated services

00:23:38,559 --> 00:23:43,840
and it kind of like creates like a a one

00:23:41,679 --> 00:23:46,880
graph that is completely distributed

00:23:43,840 --> 00:23:47,440
and each uh service on on the ground on

00:23:46,880 --> 00:23:49,520
the

00:23:47,440 --> 00:23:50,720
on the each server can build their own

00:23:49,520 --> 00:23:53,760
graph basically

00:23:50,720 --> 00:23:55,039
in a distributed way and then to be and

00:23:53,760 --> 00:23:56,400
and to be sorry to interrupt i want to

00:23:55,039 --> 00:23:57,520
make sure that stephen and seahawks have

00:23:56,400 --> 00:23:59,679
a chance to answer but

00:23:57,520 --> 00:24:00,960
uh i'm not cutting you off for any other

00:23:59,679 --> 00:24:02,960
reason than that

00:24:00,960 --> 00:24:04,799
i'm a big fan of graphql mesh i've been

00:24:02,960 --> 00:24:06,559
uh diving in lately so

00:24:04,799 --> 00:24:08,000
i'd love to talk we need to talk about

00:24:06,559 --> 00:24:11,279
we'll take that to the next room

00:24:08,000 --> 00:24:12,480
uh stephen please yeah i'd love to talk

00:24:11,279 --> 00:24:15,679
about that more in the next room

00:24:12,480 --> 00:24:17,360
uh let's see so uh federation i guess

00:24:15,679 --> 00:24:18,000
i'll say that the devil's in the details

00:24:17,360 --> 00:24:20,400
uh

00:24:18,000 --> 00:24:22,240
and the federation spec could you know

00:24:20,400 --> 00:24:24,799
stand to be a little bit simpler

00:24:22,240 --> 00:24:25,600
uh i mean the basic concept is is pretty

00:24:24,799 --> 00:24:28,000
simple

00:24:25,600 --> 00:24:29,760
um but uh you know there are some of the

00:24:28,000 --> 00:24:32,080
details the developer has to understand

00:24:29,760 --> 00:24:33,200
and so for example you know using

00:24:32,080 --> 00:24:34,320
correctly

00:24:33,200 --> 00:24:36,480
in the right place the external

00:24:34,320 --> 00:24:38,640
directive or extends or requires it can

00:24:36,480 --> 00:24:40,559
it can feel like a bit of a dark art for

00:24:38,640 --> 00:24:43,200
developers until you

00:24:40,559 --> 00:24:44,720
really understand how it all all works

00:24:43,200 --> 00:24:46,640
and it's definitely necessary to add

00:24:44,720 --> 00:24:48,159
these kinds of concepts to to graphql

00:24:46,640 --> 00:24:49,919
you need a way to identify

00:24:48,159 --> 00:24:51,520
uh you know like a primary key and a way

00:24:49,919 --> 00:24:54,240
to look up things

00:24:51,520 --> 00:24:54,960
but i would love to see see if we can

00:24:54,240 --> 00:24:57,520
refine it

00:24:54,960 --> 00:24:58,720
uh just a little bit yeah i think i

00:24:57,520 --> 00:24:59,760
think there's a there's a tooling

00:24:58,720 --> 00:25:02,640
deficit there too

00:24:59,760 --> 00:25:03,520
to be completely candid and um i think

00:25:02,640 --> 00:25:05,520
the community

00:25:03,520 --> 00:25:07,760
has an opportunity to to be working you

00:25:05,520 --> 00:25:08,960
know with those of us who who maintain

00:25:07,760 --> 00:25:11,600
the spec and you know

00:25:08,960 --> 00:25:13,279
want to see it succeed but also i've

00:25:11,600 --> 00:25:14,000
seen some really fascinating examples

00:25:13,279 --> 00:25:15,520
out of our enterprise

00:25:14,000 --> 00:25:17,440
customers data visualizations and

00:25:15,520 --> 00:25:19,840
modeling tools around federation

00:25:17,440 --> 00:25:21,840
um that i'm hoping that we can surface

00:25:19,840 --> 00:25:24,240
uh tooling it

00:25:21,840 --> 00:25:25,039
uh yeah tooling is the is the way out of

00:25:24,240 --> 00:25:27,760
this so

00:25:25,039 --> 00:25:28,080
um thank you all for for all of your

00:25:27,760 --> 00:25:29,760
time

00:25:28,080 --> 00:25:31,200
chaos i'm sorry we didn't get to you

00:25:29,760 --> 00:25:33,039
we're going to move to

00:25:31,200 --> 00:25:34,640
uh the federation topic room here in a

00:25:33,039 --> 00:25:36,559
moment hoping to do some more

00:25:34,640 --> 00:25:37,919
live chatting this has been extremely

00:25:36,559 --> 00:25:39,919
edifying i know you all

00:25:37,919 --> 00:25:41,120
took time ahead of uh time out of your

00:25:39,919 --> 00:25:42,720
schedule and time ahead of this to

00:25:41,120 --> 00:25:44,799
prepare

00:25:42,720 --> 00:25:45,760
so thank you all so much i appreciate

00:25:44,799 --> 00:25:48,159
your time

00:25:45,760 --> 00:25:49,440
uh and for sharing your success and your

00:25:48,159 --> 00:25:51,200
challenges so

00:25:49,440 --> 00:25:52,799
cheers i hope everyone stays healthy and

00:25:51,200 --> 00:25:53,360
well no matter where you are in the

00:25:52,799 --> 00:25:55,360
world

00:25:53,360 --> 00:25:56,960
and uh and we'll see you in the next

00:25:55,360 --> 00:26:10,000
room thank you

00:25:56,960 --> 00:26:10,000

YouTube URL: https://www.youtube.com/watch?v=JFARux-92b0


