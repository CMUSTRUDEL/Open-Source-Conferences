Title: Welcome and Apollo Keynote
Publication date: 2020-08-05
Playlist: GraphQL Summit Worldwide 2020
Description: 
	Featuring:
Peggy Rayzis, Developer Experience at Apollo GraphQL
Danielle Man, Engineering Manager at Apollo GraphQL
Khalil Stemmler, Developer Advocate at Apollo GraphQL
Jesse Rosenberger, Open Source Engineering Manager at Apollo GraphQL

Resources:
Learn more about Summit - https://summit.graphql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Captions: 
	00:00:00,170 --> 00:00:16,240
[Music]

00:00:13,360 --> 00:00:18,400
welcome to graphql summit worldwide i'm

00:00:16,240 --> 00:00:21,279
your host peggy razis and i lead the

00:00:18,400 --> 00:00:23,359
developer experience team at apollo

00:00:21,279 --> 00:00:24,320
wherever you're tuning in from whether

00:00:23,359 --> 00:00:28,160
it's europe

00:00:24,320 --> 00:00:30,400
africa asia the americas or australia

00:00:28,160 --> 00:00:33,360
we are so happy you're joining us for

00:00:30,400 --> 00:00:35,280
the fifth edition of graphql summit

00:00:33,360 --> 00:00:37,760
we're calling this year's conference

00:00:35,280 --> 00:00:40,160
graphql summit worldwide to celebrate

00:00:37,760 --> 00:00:42,000
the global graphql community

00:00:40,160 --> 00:00:44,399
especially the people who haven't been

00:00:42,000 --> 00:00:46,879
able to join us in years past

00:00:44,399 --> 00:00:47,840
due to travel and cost and while i

00:00:46,879 --> 00:00:50,239
definitely miss

00:00:47,840 --> 00:00:52,480
getting to hang out in person i'm loving

00:00:50,239 --> 00:00:55,520
that this year's summit is accessible to

00:00:52,480 --> 00:00:58,000
everyone now that it's free and online

00:00:55,520 --> 00:00:59,359
just to put it into perspective last

00:00:58,000 --> 00:01:02,480
year a thousand of us

00:00:59,359 --> 00:01:05,439
gathered in san francisco and this year

00:01:02,480 --> 00:01:06,479
we are proud to host over 5 000

00:01:05,439 --> 00:01:09,600
developers

00:01:06,479 --> 00:01:10,960
from over 122 countries which is pretty

00:01:09,600 --> 00:01:13,200
incredible

00:01:10,960 --> 00:01:15,520
where are you tuning in from if you're

00:01:13,200 --> 00:01:16,640
on discord drop a message in general to

00:01:15,520 --> 00:01:18,159
let us know

00:01:16,640 --> 00:01:20,000
and if you're not on discord you can

00:01:18,159 --> 00:01:22,400
register to get access with the link

00:01:20,000 --> 00:01:22,400
below

00:01:22,720 --> 00:01:26,880
we have an awesome day planned for you

00:01:25,040 --> 00:01:27,680
and before we start the keynote i'd like

00:01:26,880 --> 00:01:30,799
to remind

00:01:27,680 --> 00:01:32,880
everyone of our code of conduct the next

00:01:30,799 --> 00:01:34,000
two weeks we're gathering together from

00:01:32,880 --> 00:01:35,920
all over the world

00:01:34,000 --> 00:01:37,200
and while we all share our love for

00:01:35,920 --> 00:01:39,439
graphql

00:01:37,200 --> 00:01:42,000
we have different cultures and that's

00:01:39,439 --> 00:01:44,079
why the code of conduct is so important

00:01:42,000 --> 00:01:46,479
it ensures all of you are safe and

00:01:44,079 --> 00:01:47,600
welcome into our community regardless of

00:01:46,479 --> 00:01:50,479
who you are

00:01:47,600 --> 00:01:51,200
where you come from your gender identity

00:01:50,479 --> 00:01:53,759
religion

00:01:51,200 --> 00:01:55,119
sexual orientation disability status or

00:01:53,759 --> 00:01:57,040
your race

00:01:55,119 --> 00:01:58,799
so please take a minute to read it even

00:01:57,040 --> 00:02:00,560
if you've attended summit in the past

00:01:58,799 --> 00:02:03,520
since there are new guidelines

00:02:00,560 --> 00:02:05,600
for how we communicate online and i want

00:02:03,520 --> 00:02:08,000
to reiterate that graphql summit

00:02:05,600 --> 00:02:11,360
worldwide does not tolerate harassment

00:02:08,000 --> 00:02:12,959
in any form if you see or hear a code of

00:02:11,360 --> 00:02:14,959
conduct violation

00:02:12,959 --> 00:02:17,760
please report it to our moderators by

00:02:14,959 --> 00:02:22,239
tagging code of conduct on discord

00:02:17,760 --> 00:02:24,800
or by emailing codeofconduct graphql.com

00:02:22,239 --> 00:02:26,720
we will respond promptly and prioritize

00:02:24,800 --> 00:02:27,760
the comfort of the person affected

00:02:26,720 --> 00:02:30,560
negatively

00:02:27,760 --> 00:02:32,800
by the violation all right we're going

00:02:30,560 --> 00:02:34,640
to jump into today's program but stick

00:02:32,800 --> 00:02:35,680
around after the keynote because i'm

00:02:34,640 --> 00:02:37,680
going to share

00:02:35,680 --> 00:02:41,440
some tips and tricks to help you get the

00:02:37,680 --> 00:02:43,360
most out of graphql summit worldwide

00:02:41,440 --> 00:02:45,599
so we're trying something different for

00:02:43,360 --> 00:02:48,400
this year's apollo keynote

00:02:45,599 --> 00:02:49,360
there's no fancy stage no lights no big

00:02:48,400 --> 00:02:52,000
screen

00:02:49,360 --> 00:02:54,239
this year we wanted our keynote to be by

00:02:52,000 --> 00:02:55,840
developers for developers

00:02:54,239 --> 00:02:57,760
and when we were thinking about what we

00:02:55,840 --> 00:03:00,159
wanted to share with you all the theme

00:02:57,760 --> 00:03:01,599
of developer velocity came up again and

00:03:00,159 --> 00:03:03,360
again

00:03:01,599 --> 00:03:05,360
we all need to move fast and ship

00:03:03,360 --> 00:03:07,200
products but the truth is it's

00:03:05,360 --> 00:03:08,480
really hard to do that during these

00:03:07,200 --> 00:03:10,319
uncertain times

00:03:08,480 --> 00:03:11,680
i mean we're dealing with less than

00:03:10,319 --> 00:03:14,120
ideal home offices

00:03:11,680 --> 00:03:15,519
juggling parenting and homeschooling

00:03:14,120 --> 00:03:17,760
responsibilities

00:03:15,519 --> 00:03:19,519
the stress of a global pandemic and

00:03:17,760 --> 00:03:21,519
adjusting to

00:03:19,519 --> 00:03:25,040
all while trying to ship delightful

00:03:21,519 --> 00:03:27,200
experiences to our users

00:03:25,040 --> 00:03:29,440
so it's really important that we can do

00:03:27,200 --> 00:03:31,040
more with less code and adopt tools that

00:03:29,440 --> 00:03:33,840
increase our development speed

00:03:31,040 --> 00:03:35,760
and productivity we've been working on a

00:03:33,840 --> 00:03:37,200
lot of cool stuff at apollo to help you

00:03:35,760 --> 00:03:39,120
do just that

00:03:37,200 --> 00:03:40,879
so first up you're going to learn about

00:03:39,120 --> 00:03:43,440
apollo studio from

00:03:40,879 --> 00:03:45,200
product engineering manager danielle and

00:03:43,440 --> 00:03:46,480
she's going to demo some new tools to

00:03:45,200 --> 00:03:48,480
help you save

00:03:46,480 --> 00:03:50,000
time on things that you do every day

00:03:48,480 --> 00:03:51,760
like navigating your schema

00:03:50,000 --> 00:03:53,120
building queries and understanding your

00:03:51,760 --> 00:03:54,640
data

00:03:53,120 --> 00:03:56,879
next you're going to learn about what's

00:03:54,640 --> 00:03:58,239
new in apollo client 3 from developer

00:03:56,879 --> 00:03:59,760
advocate khalil

00:03:58,239 --> 00:04:01,760
and he's going to get you spun up on the

00:03:59,760 --> 00:04:03,840
new cache apis that reduce state

00:04:01,760 --> 00:04:06,640
management code and help solve common

00:04:03,840 --> 00:04:08,560
use cases like pagination

00:04:06,640 --> 00:04:10,239
and finally you'll discover how

00:04:08,560 --> 00:04:12,720
federation can help

00:04:10,239 --> 00:04:14,400
teams compose multiple graphs from

00:04:12,720 --> 00:04:16,720
engineering manager jesse

00:04:14,400 --> 00:04:18,799
who leads the apollo server team and

00:04:16,720 --> 00:04:20,560
jesse will share some concrete tips to

00:04:18,799 --> 00:04:22,800
help you decide when you should adopt

00:04:20,560 --> 00:04:24,800
federation

00:04:22,800 --> 00:04:26,639
we built these tools by listening

00:04:24,800 --> 00:04:28,320
closely to the needs of our awesome

00:04:26,639 --> 00:04:29,759
community and customers

00:04:28,320 --> 00:04:31,680
and because of that i think you're

00:04:29,759 --> 00:04:33,440
really going to love them now i'm going

00:04:31,680 --> 00:04:36,720
to turn it over to danielle so you can

00:04:33,440 --> 00:04:39,360
see them in action for yourself

00:04:36,720 --> 00:04:41,520
hi everyone i'm danielle i'm a client

00:04:39,360 --> 00:04:42,880
developer who writes a lot of queries

00:04:41,520 --> 00:04:44,880
and today i want to show you what it

00:04:42,880 --> 00:04:45,600
looks like to fetch data from a graphql

00:04:44,880 --> 00:04:46,880
api

00:04:45,600 --> 00:04:49,919
when you have a tool that's been

00:04:46,880 --> 00:04:51,919
specifically tailored for your needs

00:04:49,919 --> 00:04:53,600
the moment graphql really clicks for us

00:04:51,919 --> 00:04:54,479
developers is when we write our first

00:04:53,600 --> 00:04:56,000
query

00:04:54,479 --> 00:04:57,600
because it's at that moment that you

00:04:56,000 --> 00:04:59,360
realize how the flexibility

00:04:57,600 --> 00:05:02,320
of being able to get exactly what you

00:04:59,360 --> 00:05:03,840
asked for is extremely empowering

00:05:02,320 --> 00:05:06,479
for the first time ever you have full

00:05:03,840 --> 00:05:08,320
autonomy over how you get to use an api

00:05:06,479 --> 00:05:09,440
and it sparks creativity and you start

00:05:08,320 --> 00:05:12,720
to realize what some of the

00:05:09,440 --> 00:05:14,320
possibilities with that might be

00:05:12,720 --> 00:05:16,160
apollo has been helping people use

00:05:14,320 --> 00:05:18,080
graphql from the early days because we

00:05:16,160 --> 00:05:20,000
believe in its future at the center of

00:05:18,080 --> 00:05:21,520
application development

00:05:20,000 --> 00:05:23,440
for years we've been building apollo

00:05:21,520 --> 00:05:25,440
client and apollo server to help you

00:05:23,440 --> 00:05:28,240
build and scale apps with graphql

00:05:25,440 --> 00:05:30,479
as easily as possible and as the number

00:05:28,240 --> 00:05:32,080
of people using graphql has grown

00:05:30,479 --> 00:05:34,479
and the sheer size of the graphs being

00:05:32,080 --> 00:05:35,360
built has grown the need for tools that

00:05:34,479 --> 00:05:37,039
grow with us

00:05:35,360 --> 00:05:39,680
as their graphs grow from proofs of

00:05:37,039 --> 00:05:41,840
concepts to having thousands of types is

00:05:39,680 --> 00:05:43,680
more important than ever

00:05:41,840 --> 00:05:45,360
because as graphs grow and more people

00:05:43,680 --> 00:05:47,199
start contributing to them

00:05:45,360 --> 00:05:49,440
we quickly move away from the world of

00:05:47,199 --> 00:05:51,520
tidy examples where everything is simple

00:05:49,440 --> 00:05:54,000
to model and easy to find

00:05:51,520 --> 00:05:55,280
and into the world of real life as an

00:05:54,000 --> 00:05:56,639
application developer

00:05:55,280 --> 00:05:58,960
you can sometimes be dealing with

00:05:56,639 --> 00:06:00,080
hundreds if not thousands of types

00:05:58,960 --> 00:06:02,319
and you don't always know where

00:06:00,080 --> 00:06:03,039
everything is because in a schema at

00:06:02,319 --> 00:06:04,880
that scale

00:06:03,039 --> 00:06:06,080
there's simply no way to model it all in

00:06:04,880 --> 00:06:08,080
your head

00:06:06,080 --> 00:06:09,919
the larger your graph is the harder it

00:06:08,080 --> 00:06:11,680
is to find what you're looking for

00:06:09,919 --> 00:06:13,360
and in addition to that most of the

00:06:11,680 --> 00:06:14,400
tools available today to help people

00:06:13,360 --> 00:06:15,680
write queries

00:06:14,400 --> 00:06:18,319
don't actually help you do that

00:06:15,680 --> 00:06:20,080
efficiently especially in large graphs

00:06:18,319 --> 00:06:21,759
in fact most of those tools are tailored

00:06:20,080 --> 00:06:23,199
for experts where the experts already

00:06:21,759 --> 00:06:24,319
know exactly what they're trying to do

00:06:23,199 --> 00:06:25,919
when they load up

00:06:24,319 --> 00:06:27,360
they already know exactly what syntax

00:06:25,919 --> 00:06:29,919
they're going for

00:06:27,360 --> 00:06:31,759
and on and on which means that there's

00:06:29,919 --> 00:06:32,800
been this gap between who can query the

00:06:31,759 --> 00:06:34,800
graph today

00:06:32,800 --> 00:06:36,479
who should be able to query it because

00:06:34,800 --> 00:06:39,280
some things are just needlessly hard if

00:06:36,479 --> 00:06:40,800
you're not at that expert level

00:06:39,280 --> 00:06:42,479
so what i want to show you all today are

00:06:40,800 --> 00:06:43,440
some new tools in apollo studio that

00:06:42,479 --> 00:06:45,680
we've built

00:06:43,440 --> 00:06:48,479
specifically focused on the needs of

00:06:45,680 --> 00:06:50,160
client developers and query writers

00:06:48,479 --> 00:06:51,759
one of the best things about exposing

00:06:50,160 --> 00:06:53,039
your data as a graph is that you can

00:06:51,759 --> 00:06:54,639
force multiply

00:06:53,039 --> 00:06:56,479
what people can do with your data if

00:06:54,639 --> 00:06:56,800
you're able to make that accessible to

00:06:56,479 --> 00:06:58,639
them

00:06:56,800 --> 00:07:00,400
and i figured what better real world

00:06:58,639 --> 00:07:02,960
graph for us to look at together

00:07:00,400 --> 00:07:04,560
than the github graphql api because this

00:07:02,960 --> 00:07:06,319
graph is massive

00:07:04,560 --> 00:07:08,240
there are almost a thousand types and

00:07:06,319 --> 00:07:10,800
more than four thousand fields

00:07:08,240 --> 00:07:13,120
there are 28 ways you can start a query

00:07:10,800 --> 00:07:15,360
more than 100 mutations you can make

00:07:13,120 --> 00:07:17,280
and on top of all of that this graph is

00:07:15,360 --> 00:07:18,240
extremely active and being changed all

00:07:17,280 --> 00:07:19,759
the time

00:07:18,240 --> 00:07:22,400
every couple of weeks new things are

00:07:19,759 --> 00:07:24,319
being added removed and deprecated

00:07:22,400 --> 00:07:26,160
earlier this summer github launched a

00:07:24,319 --> 00:07:28,160
major update to their profile page and

00:07:26,160 --> 00:07:29,599
you can even see some of the fields here

00:07:28,160 --> 00:07:31,360
that they added to their schema to

00:07:29,599 --> 00:07:34,319
accommodate that

00:07:31,360 --> 00:07:36,240
so how do i as someone who has a mental

00:07:34,319 --> 00:07:38,479
understanding of the github data but no

00:07:36,240 --> 00:07:40,720
knowledge of their specifics

00:07:38,479 --> 00:07:42,479
in a big graph like this answer a

00:07:40,720 --> 00:07:44,560
question of substance

00:07:42,479 --> 00:07:46,319
because it's pretty easy and simple to

00:07:44,560 --> 00:07:47,919
write a little query that asks for my

00:07:46,319 --> 00:07:49,759
full name as a user

00:07:47,919 --> 00:07:51,360
but it's much harder to start with an

00:07:49,759 --> 00:07:53,120
abstract question

00:07:51,360 --> 00:07:55,280
like what companies are using apollo

00:07:53,120 --> 00:07:56,800
client and know how to even start

00:07:55,280 --> 00:07:58,240
answering that

00:07:56,800 --> 00:08:00,000
so now we're looking at the studio

00:07:58,240 --> 00:08:01,599
explorer and the first thing that i'm

00:08:00,000 --> 00:08:02,400
going to try to do to answer this

00:08:01,599 --> 00:08:04,400
question

00:08:02,400 --> 00:08:07,199
is open up search and type company to

00:08:04,400 --> 00:08:08,879
see what we even have to work with

00:08:07,199 --> 00:08:10,800
it looks like company is a field that's

00:08:08,879 --> 00:08:13,039
only available in a couple places at all

00:08:10,800 --> 00:08:14,960
which is nice and simple for us

00:08:13,039 --> 00:08:16,800
the surgeon explorer is designed to help

00:08:14,960 --> 00:08:18,479
me find tight field pairs

00:08:16,800 --> 00:08:20,639
which is important because sometimes

00:08:18,479 --> 00:08:22,080
fields with common names like email

00:08:20,639 --> 00:08:23,599
can appear across several different

00:08:22,080 --> 00:08:25,680
types but you're only ever really

00:08:23,599 --> 00:08:27,599
looking for one of them at a time

00:08:25,680 --> 00:08:29,599
in our case because company doesn't

00:08:27,599 --> 00:08:30,560
appear to be very common as a name for

00:08:29,599 --> 00:08:32,479
fuels

00:08:30,560 --> 00:08:34,479
our choice is nice and simple and we'll

00:08:32,479 --> 00:08:36,159
go through the user type

00:08:34,479 --> 00:08:38,000
the second step of search is all about

00:08:36,159 --> 00:08:40,000
helping you find a path in your schema

00:08:38,000 --> 00:08:41,440
to get to this type field pair

00:08:40,000 --> 00:08:43,599
because if we actually want to add this

00:08:41,440 --> 00:08:44,240
field to our query we need to find a way

00:08:43,599 --> 00:08:46,080
to do so

00:08:44,240 --> 00:08:47,839
for one of the query mutation or

00:08:46,080 --> 00:08:49,760
subscription types

00:08:47,839 --> 00:08:51,920
this is really helpful context even when

00:08:49,760 --> 00:08:53,600
you want to select the simplest path

00:08:51,920 --> 00:08:55,600
because if you're not given any paths at

00:08:53,600 --> 00:08:57,680
all you're left entirely on your own to

00:08:55,600 --> 00:08:59,680
figure out what paths even exist

00:08:57,680 --> 00:09:01,519
to add this field to your query

00:08:59,680 --> 00:09:02,800
pathfinding is a lifesaver the moment

00:09:01,519 --> 00:09:04,640
you want to add something that's not

00:09:02,800 --> 00:09:06,000
available just one or two steps from

00:09:04,640 --> 00:09:07,440
root

00:09:06,000 --> 00:09:09,279
so now we know we can get company

00:09:07,440 --> 00:09:11,440
information on the user type

00:09:09,279 --> 00:09:12,480
and the company field is a user's public

00:09:11,440 --> 00:09:15,040
profile company

00:09:12,480 --> 00:09:16,640
which will be perfect for us and because

00:09:15,040 --> 00:09:18,080
we have to go through user now it would

00:09:16,640 --> 00:09:21,040
probably be good if we could get some

00:09:18,080 --> 00:09:22,880
more contact information on these users

00:09:21,040 --> 00:09:24,640
when we were looking at the change log i

00:09:22,880 --> 00:09:26,720
noticed that github recently added this

00:09:24,640 --> 00:09:27,680
twitter username field to organization

00:09:26,720 --> 00:09:29,120
types

00:09:27,680 --> 00:09:30,800
and i was wondering if maybe they've

00:09:29,120 --> 00:09:33,200
added it to user as well

00:09:30,800 --> 00:09:34,959
because if they have that would probably

00:09:33,200 --> 00:09:36,000
be a good way for us to reach out to

00:09:34,959 --> 00:09:38,080
people

00:09:36,000 --> 00:09:39,839
so now i'm going to command click user

00:09:38,080 --> 00:09:42,560
to open up our docs here

00:09:39,839 --> 00:09:44,240
scroll down to the teas and yep it looks

00:09:42,560 --> 00:09:45,839
like we do have a twitter username here

00:09:44,240 --> 00:09:47,680
now which is great

00:09:45,839 --> 00:09:49,600
it is a backup i think i'll also add

00:09:47,680 --> 00:09:52,959
email to this query here

00:09:49,600 --> 00:09:54,560
because we know users must have this

00:09:52,959 --> 00:09:56,800
so now we have all the information we'll

00:09:54,560 --> 00:09:58,480
want about users let's go back to our

00:09:56,800 --> 00:10:00,320
original question

00:09:58,480 --> 00:10:01,760
if we have to find company information

00:10:00,320 --> 00:10:04,079
through this user type

00:10:01,760 --> 00:10:05,920
i think a good proxy for what companies

00:10:04,079 --> 00:10:08,079
are using apollo client

00:10:05,920 --> 00:10:09,279
is what users are opening issues on this

00:10:08,079 --> 00:10:10,959
repository

00:10:09,279 --> 00:10:13,519
and then what companies do those people

00:10:10,959 --> 00:10:15,519
work for because if a user is coming to

00:10:13,519 --> 00:10:17,120
the repository and opening an issue

00:10:15,519 --> 00:10:18,720
that's probably actually a sign that

00:10:17,120 --> 00:10:20,640
they're pretty engaged

00:10:18,720 --> 00:10:23,120
so now i'm going to open up search again

00:10:20,640 --> 00:10:24,240
and look for issues on a repository

00:10:23,120 --> 00:10:25,839
and we're going to go with the shortest

00:10:24,240 --> 00:10:27,120
path again because the schema is really

00:10:25,839 --> 00:10:28,800
nicely modeled

00:10:27,120 --> 00:10:30,560
and then i'm going to start a new query

00:10:28,800 --> 00:10:32,000
which will be our query for companies

00:10:30,560 --> 00:10:34,720
using apollo client

00:10:32,000 --> 00:10:36,160
and i'm going to add issues to it so now

00:10:34,720 --> 00:10:38,000
you'll see that the query builder here

00:10:36,160 --> 00:10:38,800
has created a query on the path that we

00:10:38,000 --> 00:10:41,600
selected

00:10:38,800 --> 00:10:43,519
which was repository and then issues and

00:10:41,600 --> 00:10:45,040
because the repository field here has

00:10:43,519 --> 00:10:47,120
two required arguments

00:10:45,040 --> 00:10:48,880
name and owner the query builder has

00:10:47,120 --> 00:10:51,600
filled in the variable definitions

00:10:48,880 --> 00:10:52,480
for us and used those variables with our

00:10:51,600 --> 00:10:54,560
arguments

00:10:52,480 --> 00:10:56,880
and even started the variables json for

00:10:54,560 --> 00:10:58,959
us so all we have to do is fill in our

00:10:56,880 --> 00:11:01,760
null values of apollo client

00:10:58,959 --> 00:11:03,200
in apollo graphql and we are well on our

00:11:01,760 --> 00:11:05,040
way

00:11:03,200 --> 00:11:07,360
now i imagine that the issues list for

00:11:05,040 --> 00:11:09,760
apollo client is actually pretty long

00:11:07,360 --> 00:11:11,760
we can even add total count here and use

00:11:09,760 --> 00:11:14,320
our response hits to see that we almost

00:11:11,760 --> 00:11:15,600
have 3 000 issues an apollo client

00:11:14,320 --> 00:11:17,839
so i know that we're going to need to

00:11:15,600 --> 00:11:18,640
paginate this list and because i'm

00:11:17,839 --> 00:11:20,959
looking for

00:11:18,640 --> 00:11:22,880
relatively recent usage companies that

00:11:20,959 --> 00:11:25,920
have recently used apollo client

00:11:22,880 --> 00:11:27,519
i'm going to ask for the last 100 issues

00:11:25,920 --> 00:11:29,760
and now we're ready to go down the edges

00:11:27,519 --> 00:11:30,720
to our issue type and what we're really

00:11:29,760 --> 00:11:33,200
looking for here

00:11:30,720 --> 00:11:34,800
is the author of these issues and it

00:11:33,200 --> 00:11:36,079
looks like author can be one of five

00:11:34,800 --> 00:11:38,079
different types of actors

00:11:36,079 --> 00:11:40,079
including mannequin which is a great

00:11:38,079 --> 00:11:41,839
name and makes a lot of sense

00:11:40,079 --> 00:11:44,320
but what we really need is information

00:11:41,839 --> 00:11:47,519
on issues when they were opened by users

00:11:44,320 --> 00:11:49,040
so we're going to add user here now that

00:11:47,519 --> 00:11:51,120
the query builder has filled in all of

00:11:49,040 --> 00:11:51,680
those fields on our path and inquiry for

00:11:51,120 --> 00:11:53,600
us

00:11:51,680 --> 00:11:56,560
we can copy our fields from user in the

00:11:53,600 --> 00:11:57,519
other query paste them here and format

00:11:56,560 --> 00:11:59,040
this query

00:11:57,519 --> 00:12:01,120
and now that we have two fully formed

00:11:59,040 --> 00:12:03,040
queries i want to quickly point out that

00:12:01,120 --> 00:12:03,920
the explorer helps us manage multiple

00:12:03,040 --> 00:12:06,720
queries here

00:12:03,920 --> 00:12:08,959
by keeping our active query in focus if

00:12:06,720 --> 00:12:10,720
i put my cursor into the user query

00:12:08,959 --> 00:12:12,079
you'll see that the run button takes on

00:12:10,720 --> 00:12:14,399
the user context

00:12:12,079 --> 00:12:15,920
and the company's query gets dimmed and

00:12:14,399 --> 00:12:17,040
if i put my cursor back into the

00:12:15,920 --> 00:12:18,399
company's query

00:12:17,040 --> 00:12:20,000
you'll see that the run button and the

00:12:18,399 --> 00:12:20,639
docs take on the company's queries

00:12:20,000 --> 00:12:23,680
context

00:12:20,639 --> 00:12:25,200
instead so now let's run this query and

00:12:23,680 --> 00:12:26,880
you'll see that within just a couple of

00:12:25,200 --> 00:12:28,720
minutes of exploration

00:12:26,880 --> 00:12:29,920
we've managed to get a full answer to

00:12:28,720 --> 00:12:31,440
our question

00:12:29,920 --> 00:12:33,760
and if i want to go back in time and

00:12:31,440 --> 00:12:35,839
look at previous queries that we were in

00:12:33,760 --> 00:12:37,440
we could do that too we could have also

00:12:35,839 --> 00:12:39,040
done this whole thing in light mode if

00:12:37,440 --> 00:12:40,399
we wanted

00:12:39,040 --> 00:12:42,639
and there's one last thing i want to

00:12:40,399 --> 00:12:45,120
show you all so we're all extremely used

00:12:42,639 --> 00:12:46,720
to working with query responses as json

00:12:45,120 --> 00:12:48,480
because you can see exactly how your

00:12:46,720 --> 00:12:50,399
query shape is mirrored and we're used

00:12:48,480 --> 00:12:51,120
to piping our data from responses into

00:12:50,399 --> 00:12:53,360
things like

00:12:51,120 --> 00:12:54,320
end templates react components and other

00:12:53,360 --> 00:12:56,079
scripts

00:12:54,320 --> 00:12:57,760
but there's a strong use case for being

00:12:56,079 --> 00:12:59,120
able to write queries that just browse

00:12:57,760 --> 00:13:00,720
data in place

00:12:59,120 --> 00:13:02,240
and if that's what you're trying to do

00:13:00,720 --> 00:13:02,959
json format is actually kind of

00:13:02,240 --> 00:13:04,480
cumbersome

00:13:02,959 --> 00:13:06,240
because there's a lot of white space

00:13:04,480 --> 00:13:07,839
there are a lot of brackets

00:13:06,240 --> 00:13:09,519
and arrays aren't really represented a

00:13:07,839 --> 00:13:10,560
way where you could easily just compare

00:13:09,519 --> 00:13:12,079
values

00:13:10,560 --> 00:13:14,000
so the last thing i want to show you all

00:13:12,079 --> 00:13:15,680
in the explorer is table load

00:13:14,000 --> 00:13:18,079
and if i take a couple of these fields

00:13:15,680 --> 00:13:18,560
out i get an extremely scannable list

00:13:18,079 --> 00:13:19,920
here

00:13:18,560 --> 00:13:21,920
where we can see that the list of

00:13:19,920 --> 00:13:24,079
companies using apollo client includes

00:13:21,920 --> 00:13:25,519
microsoft and message bird

00:13:24,079 --> 00:13:27,680
and if i scroll down to the bottom

00:13:25,519 --> 00:13:28,720
there's hubspot and salesforce and even

00:13:27,680 --> 00:13:30,160
adobe

00:13:28,720 --> 00:13:31,839
and i'm actually going to download this

00:13:30,160 --> 00:13:33,920
response so i can share

00:13:31,839 --> 00:13:35,839
it with our team and as i share it i'm

00:13:33,920 --> 00:13:37,680
going to copy a link to this query

00:13:35,839 --> 00:13:39,279
and paste that in with my file so that

00:13:37,680 --> 00:13:40,320
anyone who wants to add additional

00:13:39,279 --> 00:13:42,800
metadata

00:13:40,320 --> 00:13:44,800
can do whatever they'd like so we were

00:13:42,800 --> 00:13:46,480
able to get in and make that query in

00:13:44,800 --> 00:13:48,240
just a couple of minutes

00:13:46,480 --> 00:13:50,079
and the magic part isn't that we were

00:13:48,240 --> 00:13:50,880
able to do something that was impossible

00:13:50,079 --> 00:13:52,399
before

00:13:50,880 --> 00:13:54,160
it's that we were able to do it while

00:13:52,399 --> 00:13:56,560
focusing on the what of the data

00:13:54,160 --> 00:13:58,399
not the how which is what wearing a wrap

00:13:56,560 --> 00:13:59,760
should feel like

00:13:58,399 --> 00:14:02,000
so i want to leave you all with this

00:13:59,760 --> 00:14:03,279
thought graphql is for way more than

00:14:02,000 --> 00:14:04,720
just developers who want to make

00:14:03,279 --> 00:14:06,880
efficient apis

00:14:04,720 --> 00:14:08,000
it's for everyone developers who want a

00:14:06,880 --> 00:14:09,440
power tool

00:14:08,000 --> 00:14:11,199
designers who want to know what data

00:14:09,440 --> 00:14:12,720
they can put in their mockups

00:14:11,199 --> 00:14:15,120
product managers who want to look up

00:14:12,720 --> 00:14:16,800
usage information support engineers

00:14:15,120 --> 00:14:18,560
who want to be able to do account ops

00:14:16,800 --> 00:14:20,079
without waiting for that next feature in

00:14:18,560 --> 00:14:21,519
the admin app

00:14:20,079 --> 00:14:23,120
and all this tooling that i've showed

00:14:21,519 --> 00:14:25,600
you it's merely a mechanism for

00:14:23,120 --> 00:14:27,120
discovery and what it enables you to do

00:14:25,600 --> 00:14:29,040
and what new information you can

00:14:27,120 --> 00:14:30,320
discover about your own data

00:14:29,040 --> 00:14:32,720
is what's actually going to be the

00:14:30,320 --> 00:14:35,639
really exciting part so you all can try

00:14:32,720 --> 00:14:37,040
out studio on your own graph by going to

00:14:35,639 --> 00:14:38,560
studio.apollographql.com

00:14:37,040 --> 00:14:40,240
all the tools that i showed you are

00:14:38,560 --> 00:14:41,519
completely and entirely free for

00:14:40,240 --> 00:14:42,959
unlimited use

00:14:41,519 --> 00:14:45,519
and we really look forward to hearing

00:14:42,959 --> 00:14:47,360
your feedback and next i'm very happy to

00:14:45,519 --> 00:14:49,920
pass the virtual link to khalil to show

00:14:47,360 --> 00:14:52,480
you all what's new in apollo client 3.

00:14:49,920 --> 00:14:55,040
okay thank you danielle i just want to

00:14:52,480 --> 00:14:56,720
hone in on that notion of the data graph

00:14:55,040 --> 00:14:59,120
you'll hear us using that term data

00:14:56,720 --> 00:15:00,800
graph frequently at apollo

00:14:59,120 --> 00:15:02,800
regardless of if we're talking about a

00:15:00,800 --> 00:15:04,480
new graphql server that we're testing

00:15:02,800 --> 00:15:07,120
out for a new project

00:15:04,480 --> 00:15:09,600
or a collection of federated ones as

00:15:07,120 --> 00:15:12,800
you'll hear from jesse coming up

00:15:09,600 --> 00:15:15,760
your data graph is a collection of data

00:15:12,800 --> 00:15:18,000
apis services and the operations we can

00:15:15,760 --> 00:15:19,440
perform with your data

00:15:18,000 --> 00:15:21,279
and by connecting to it using a

00:15:19,440 --> 00:15:22,639
client-side data graph library like

00:15:21,279 --> 00:15:24,720
apollo client

00:15:22,639 --> 00:15:26,000
it could handle the entire data fetching

00:15:24,720 --> 00:15:29,279
in state management parts

00:15:26,000 --> 00:15:31,440
of your app for you why is this awesome

00:15:29,279 --> 00:15:34,399
well there's lots of reasons but the

00:15:31,440 --> 00:15:36,639
main reason is productivity

00:15:34,399 --> 00:15:37,680
if apollo studios explorer tab is about

00:15:36,639 --> 00:15:39,519
discoverability

00:15:37,680 --> 00:15:40,959
and enabling everyone on your team to

00:15:39,519 --> 00:15:44,160
find things in

00:15:40,959 --> 00:15:46,720
and about your graph then apollo client

00:15:44,160 --> 00:15:48,480
is about developer velocity in helping

00:15:46,720 --> 00:15:52,160
you ship products faster

00:15:48,480 --> 00:15:54,720
using the graph maybe you've heard

00:15:52,160 --> 00:15:55,519
but apollo client 3 was released earlier

00:15:54,720 --> 00:15:57,120
this month

00:15:55,519 --> 00:15:59,199
and we just couldn't be more excited

00:15:57,120 --> 00:16:02,880
about it

00:15:59,199 --> 00:16:05,360
ac3 is a culmination of 55 betas

00:16:02,880 --> 00:16:09,040
14 release candidates and hundreds of

00:16:05,360 --> 00:16:11,759
resolved issues of merged pull requests

00:16:09,040 --> 00:16:13,519
as graphql adoption has risen paulo

00:16:11,759 --> 00:16:16,000
client has become an essential part of

00:16:13,519 --> 00:16:17,759
the modern front-end tech stack

00:16:16,000 --> 00:16:19,279
it's currently downloaded nearly 2

00:16:17,759 --> 00:16:21,120
million times each week

00:16:19,279 --> 00:16:23,040
and developers count on it to work and

00:16:21,120 --> 00:16:25,199
to work well

00:16:23,040 --> 00:16:26,079
devs have come to expect a stable

00:16:25,199 --> 00:16:28,399
well-tested

00:16:26,079 --> 00:16:30,880
and versatile tool that helps them work

00:16:28,399 --> 00:16:33,519
with graphql data effectively

00:16:30,880 --> 00:16:35,759
with ac3 we wanted to build upon that

00:16:33,519 --> 00:16:37,839
trust we've earned from our customers

00:16:35,759 --> 00:16:39,519
and developers from the community and we

00:16:37,839 --> 00:16:41,680
wanted to build a better version

00:16:39,519 --> 00:16:43,279
that people could continue to count on

00:16:41,680 --> 00:16:45,680
and that would serve as something we

00:16:43,279 --> 00:16:48,560
personally felt very proud of

00:16:45,680 --> 00:16:51,600
to do that we took our time we spent 11

00:16:48,560 --> 00:16:54,240
months listening to developers

00:16:51,600 --> 00:16:56,320
ac3 is here today not only thanks to the

00:16:54,240 --> 00:16:57,040
dedicated efforts of a fantastic client

00:16:56,320 --> 00:16:59,600
team

00:16:57,040 --> 00:17:01,199
but it's here also as a result of you in

00:16:59,600 --> 00:17:03,120
your help

00:17:01,199 --> 00:17:05,679
so many of you took the time to try out

00:17:03,120 --> 00:17:07,439
the betas provide feedback

00:17:05,679 --> 00:17:09,600
and push these new capabilities to their

00:17:07,439 --> 00:17:11,120
limits in fact

00:17:09,600 --> 00:17:13,039
some of these new features you'll learn

00:17:11,120 --> 00:17:13,439
about are actually things that took some

00:17:13,039 --> 00:17:15,199
time

00:17:13,439 --> 00:17:16,480
in order to bake to reach their full

00:17:15,199 --> 00:17:18,480
potential

00:17:16,480 --> 00:17:22,000
and for that for your contributions we

00:17:18,480 --> 00:17:24,240
have to extend a massive thank you

00:17:22,000 --> 00:17:25,280
today what you'll find in apollo client

00:17:24,240 --> 00:17:27,439
3 are a lot of

00:17:25,280 --> 00:17:28,480
thoughtfully crafted new capabilities

00:17:27,439 --> 00:17:32,080
that solve

00:17:28,480 --> 00:17:33,440
real problems for graphql developers

00:17:32,080 --> 00:17:36,400
here are some of the common themes that

00:17:33,440 --> 00:17:39,840
make up this latest release

00:17:36,400 --> 00:17:42,880
overall apollo client 3 gives developers

00:17:39,840 --> 00:17:45,600
a seamless getting started experience

00:17:42,880 --> 00:17:47,280
fine grain control over the cache and it

00:17:45,600 --> 00:17:49,520
introduces new capabilities

00:17:47,280 --> 00:17:50,880
that lets you use apollo client as a

00:17:49,520 --> 00:17:54,080
single source of truth

00:17:50,880 --> 00:17:56,160
for all your state let's take a quick

00:17:54,080 --> 00:17:57,440
look at each one of these

00:17:56,160 --> 00:17:59,919
the first one which is a little bit of

00:17:57,440 --> 00:18:02,240
cleanup is about the seamless getting

00:17:59,919 --> 00:18:04,080
started experience

00:18:02,240 --> 00:18:05,280
in the past getting started with apollo

00:18:04,080 --> 00:18:07,120
client could get tricky

00:18:05,280 --> 00:18:08,720
previously if you wanted to get started

00:18:07,120 --> 00:18:09,600
you had to install a bunch of base

00:18:08,720 --> 00:18:11,840
packages

00:18:09,600 --> 00:18:13,120
plus any other packages you needed for

00:18:11,840 --> 00:18:15,520
let's say testing

00:18:13,120 --> 00:18:17,520
server side rendering using react hooks

00:18:15,520 --> 00:18:20,080
and links

00:18:17,520 --> 00:18:20,640
now you get a much cleaner simpler

00:18:20,080 --> 00:18:23,760
install

00:18:20,640 --> 00:18:25,679
with at apollo client

00:18:23,760 --> 00:18:27,600
all the features and packages you need

00:18:25,679 --> 00:18:30,080
come shipped with this base install

00:18:27,600 --> 00:18:32,320
which makes it easier for non-react

00:18:30,080 --> 00:18:33,360
libraries to import that core apollo

00:18:32,320 --> 00:18:34,720
client library

00:18:33,360 --> 00:18:36,480
and it makes it easy for you to get

00:18:34,720 --> 00:18:37,039
access to those other things you need

00:18:36,480 --> 00:18:40,400
like

00:18:37,039 --> 00:18:41,679
testing utilities ssr and so on and even

00:18:40,400 --> 00:18:43,679
if you don't need everything

00:18:41,679 --> 00:18:45,039
the install is also tree shakeable so

00:18:43,679 --> 00:18:46,640
you can shave off some size from your

00:18:45,039 --> 00:18:48,880
bundle

00:18:46,640 --> 00:18:50,559
the next thing we laser focused on was

00:18:48,880 --> 00:18:53,039
to give developers more fine-grained

00:18:50,559 --> 00:18:54,799
control over the cache

00:18:53,039 --> 00:18:56,720
i like to think of working with graphql

00:18:54,799 --> 00:19:00,000
data on the client

00:18:56,720 --> 00:19:02,480
in three parts configuring the cache

00:19:00,000 --> 00:19:03,039
querying for data and mutating data and

00:19:02,480 --> 00:19:05,600
sometimes

00:19:03,039 --> 00:19:07,360
updating the cache one of the things we

00:19:05,600 --> 00:19:09,280
take pride in with apollo client

00:19:07,360 --> 00:19:11,280
is giving developers an exceptional set

00:19:09,280 --> 00:19:12,480
of defaults in really reducing the

00:19:11,280 --> 00:19:15,679
barrier to entry

00:19:12,480 --> 00:19:17,440
to build apps with graphql we've seen

00:19:15,679 --> 00:19:19,440
these productivity boosts especially

00:19:17,440 --> 00:19:21,520
with the querying experience

00:19:19,440 --> 00:19:23,280
developers love the ability to write a

00:19:21,520 --> 00:19:24,880
query beside your component

00:19:23,280 --> 00:19:26,799
let apollo client figure out how to

00:19:24,880 --> 00:19:28,240
fetch it and cache it and then just take

00:19:26,799 --> 00:19:29,039
that data and pass it into your

00:19:28,240 --> 00:19:30,799
components

00:19:29,039 --> 00:19:32,240
that's awesome and we we didn't touch

00:19:30,799 --> 00:19:34,480
that

00:19:32,240 --> 00:19:36,640
as for the configuration part while

00:19:34,480 --> 00:19:38,160
we're happy that that default setup is

00:19:36,640 --> 00:19:40,080
really simple for developers just

00:19:38,160 --> 00:19:41,679
getting started with graphql

00:19:40,080 --> 00:19:43,600
our customers and developers from the

00:19:41,679 --> 00:19:45,520
community have been helping us to

00:19:43,600 --> 00:19:46,799
identify some of their more advanced use

00:19:45,520 --> 00:19:49,520
cases you know

00:19:46,799 --> 00:19:51,840
pushing client-side graphql usage

00:19:49,520 --> 00:19:53,760
further

00:19:51,840 --> 00:19:56,080
wanted to keep that beginner experience

00:19:53,760 --> 00:19:58,240
awesome but at the same time

00:19:56,080 --> 00:19:59,919
we're dedicated to helping every graphql

00:19:58,240 --> 00:20:01,360
developer with the hard problems

00:19:59,919 --> 00:20:03,280
and we want to find ways we can help you

00:20:01,360 --> 00:20:05,200
save time this meant

00:20:03,280 --> 00:20:06,480
we wanted to find ways to opt into

00:20:05,200 --> 00:20:08,720
things like

00:20:06,480 --> 00:20:10,080
setting default fields and type values

00:20:08,720 --> 00:20:12,799
transforming queries

00:20:10,080 --> 00:20:14,720
filtering data handling pagination and

00:20:12,799 --> 00:20:17,280
local state management

00:20:14,720 --> 00:20:19,039
so we set out to address these concerns

00:20:17,280 --> 00:20:20,799
but we wanted to land on something that

00:20:19,039 --> 00:20:21,280
enabled developers to accomplish their

00:20:20,799 --> 00:20:24,159
goals

00:20:21,280 --> 00:20:26,159
in the cleanest way possible could we

00:20:24,159 --> 00:20:29,120
solve these problems without duplicating

00:20:26,159 --> 00:20:31,600
code or introducing more work

00:20:29,120 --> 00:20:33,039
our answer for this is cache policies

00:20:31,600 --> 00:20:35,760
it's a new way to configure

00:20:33,039 --> 00:20:37,600
cache behavior cache policies let you

00:20:35,760 --> 00:20:41,039
configure what the cache returns

00:20:37,600 --> 00:20:44,720
before a type or field is read

00:20:41,039 --> 00:20:45,440
or merged to the cache the api is pretty

00:20:44,720 --> 00:20:47,679
light

00:20:45,440 --> 00:20:48,720
and it introduces new patterns that can

00:20:47,679 --> 00:20:52,480
be used to address

00:20:48,720 --> 00:20:54,559
advanced use cases in a holistic way

00:20:52,480 --> 00:20:56,799
for example if you wanted to set a

00:20:54,559 --> 00:20:57,600
default value for a particular field on

00:20:56,799 --> 00:20:58,880
a type

00:20:57,600 --> 00:21:01,520
that's something you could do using

00:20:58,880 --> 00:21:03,360
cache policies in this example shown

00:21:01,520 --> 00:21:05,360
here we set the default value of the

00:21:03,360 --> 00:21:07,360
name field on the person type

00:21:05,360 --> 00:21:08,640
to be unknown name if we've never seen

00:21:07,360 --> 00:21:10,640
it before

00:21:08,640 --> 00:21:13,200
otherwise we'll use the value that's

00:21:10,640 --> 00:21:15,679
been assigned to it

00:21:13,200 --> 00:21:16,240
cache policies are also pretty versatile

00:21:15,679 --> 00:21:18,559
they

00:21:16,240 --> 00:21:20,880
act as a single place for you to write

00:21:18,559 --> 00:21:22,240
data fetching logic that's common across

00:21:20,880 --> 00:21:25,600
components

00:21:22,240 --> 00:21:28,080
pagination is a great example of this

00:21:25,600 --> 00:21:30,159
previously in ac2 you'd have to write

00:21:28,080 --> 00:21:31,280
all the pagination code yourself and you

00:21:30,159 --> 00:21:33,280
you'd have to do it on the actual

00:21:31,280 --> 00:21:34,000
component and depending on how many

00:21:33,280 --> 00:21:36,320
components

00:21:34,000 --> 00:21:37,520
need pagination you could end up writing

00:21:36,320 --> 00:21:40,960
pagination logic

00:21:37,520 --> 00:21:42,960
several times over to help you save time

00:21:40,960 --> 00:21:46,240
we've encapsulated this complexity for

00:21:42,960 --> 00:21:47,200
you ac3 comes with a set of pagination

00:21:46,240 --> 00:21:49,360
helpers

00:21:47,200 --> 00:21:51,280
for example if you want to add relay

00:21:49,360 --> 00:21:53,360
style pagination for a type

00:21:51,280 --> 00:21:55,280
you can import the relay style

00:21:53,360 --> 00:21:58,400
pagination helper

00:21:55,280 --> 00:21:59,840
and connect it to a type policy

00:21:58,400 --> 00:22:01,440
you could do this for several types in

00:21:59,840 --> 00:22:03,760
your app and this really helps cut down

00:22:01,440 --> 00:22:06,320
on the amount of code you need to write

00:22:03,760 --> 00:22:08,159
so we've got some better patterns for

00:22:06,320 --> 00:22:12,960
configuring the cache that's

00:22:08,159 --> 00:22:14,640
fantastic now moving on handling updates

00:22:12,960 --> 00:22:16,720
for the most part apollo client does a

00:22:14,640 --> 00:22:18,320
lot of the heavy lifting for you

00:22:16,720 --> 00:22:20,799
if you return the new data after a

00:22:18,320 --> 00:22:22,480
mutation paulo client can automatically

00:22:20,799 --> 00:22:23,679
cache it for you

00:22:22,480 --> 00:22:25,440
but for developers that need more

00:22:23,679 --> 00:22:27,120
control like let's say you're working

00:22:25,440 --> 00:22:28,720
with heavy data sets and

00:22:27,120 --> 00:22:30,880
you want to evict and garbage collect

00:22:28,720 --> 00:22:33,120
data or let's say you're working with

00:22:30,880 --> 00:22:35,520
complex data models and a bunch of

00:22:33,120 --> 00:22:37,520
application specific logic dictates

00:22:35,520 --> 00:22:39,039
how the cache should change after

00:22:37,520 --> 00:22:40,720
mutation

00:22:39,039 --> 00:22:42,320
you know if that's the case then we've

00:22:40,720 --> 00:22:44,159
got some powerful new

00:22:42,320 --> 00:22:46,159
cache manipulation apis that should help

00:22:44,159 --> 00:22:48,080
you with that

00:22:46,159 --> 00:22:49,280
the new cache eviction in garbage

00:22:48,080 --> 00:22:52,240
collection apis

00:22:49,280 --> 00:22:54,720
let you keep your cache clean and snappy

00:22:52,240 --> 00:22:57,120
you now have the ability to selectively

00:22:54,720 --> 00:22:58,799
evict data you no longer need and the

00:22:57,120 --> 00:23:00,400
ability to garbage collect anything

00:22:58,799 --> 00:23:02,000
unreachable

00:23:00,400 --> 00:23:03,679
the addition of garbage collection is

00:23:02,000 --> 00:23:06,720
handy in apollo client because

00:23:03,679 --> 00:23:08,720
if deleted data is referenced from other

00:23:06,720 --> 00:23:09,760
objects it actually maintains those

00:23:08,720 --> 00:23:11,600
references

00:23:09,760 --> 00:23:13,600
in apollo client we do this so that if

00:23:11,600 --> 00:23:15,520
that data ever gets added again

00:23:13,600 --> 00:23:18,159
we could just quickly re-reference it

00:23:15,520 --> 00:23:19,600
and reconnect relationships

00:23:18,159 --> 00:23:21,200
but let's just say you wanted to nuke

00:23:19,600 --> 00:23:22,159
something and you know it's never coming

00:23:21,200 --> 00:23:23,840
back

00:23:22,159 --> 00:23:25,360
running the garbage collection method is

00:23:23,840 --> 00:23:26,000
useful because it'll traverse through

00:23:25,360 --> 00:23:30,000
the cache

00:23:26,000 --> 00:23:32,000
and clean up all dangling references

00:23:30,000 --> 00:23:34,080
previously if you wanted to interact

00:23:32,000 --> 00:23:36,240
with data within the cache directly

00:23:34,080 --> 00:23:38,480
you had to do so within the mental model

00:23:36,240 --> 00:23:40,480
of queries and fragments

00:23:38,480 --> 00:23:42,400
in previous versions of apollo client

00:23:40,480 --> 00:23:43,679
you'd read a query from the cache using

00:23:42,400 --> 00:23:46,799
cache.readquery

00:23:43,679 --> 00:23:47,520
and write the new query value back to

00:23:46,799 --> 00:23:50,720
the cache

00:23:47,520 --> 00:23:52,720
using well

00:23:50,720 --> 00:23:54,559
not all updates fit within the

00:23:52,720 --> 00:23:56,240
conceptual model of queries and

00:23:54,559 --> 00:23:59,039
fragments

00:23:56,240 --> 00:23:59,760
we now have an additional way to modify

00:23:59,039 --> 00:24:02,080
the cache

00:23:59,760 --> 00:24:03,039
directly if you know what you want to

00:24:02,080 --> 00:24:05,080
change

00:24:03,039 --> 00:24:06,799
you can specify what to modify using

00:24:05,080 --> 00:24:09,200
cache.modify

00:24:06,799 --> 00:24:10,880
with this we can specify position in the

00:24:09,200 --> 00:24:12,960
cache we like to change

00:24:10,880 --> 00:24:15,120
write a function and return the new

00:24:12,960 --> 00:24:17,279
value of the items at that position

00:24:15,120 --> 00:24:18,559
this is a lot more control for

00:24:17,279 --> 00:24:20,000
developers

00:24:18,559 --> 00:24:21,600
so for those of you felt it might have

00:24:20,000 --> 00:24:23,679
been a little bit awkward working in

00:24:21,600 --> 00:24:25,039
terms of queries for some updates

00:24:23,679 --> 00:24:27,039
this approach should feel a lot more

00:24:25,039 --> 00:24:29,679
natural

00:24:27,039 --> 00:24:30,080
so overall how did we give developers

00:24:29,679 --> 00:24:31,919
more

00:24:30,080 --> 00:24:33,200
fine-grained control over the cash with

00:24:31,919 --> 00:24:35,039
ac3

00:24:33,200 --> 00:24:36,960
a lot of ways and you want to spend some

00:24:35,039 --> 00:24:38,400
time in the docks for these features but

00:24:36,960 --> 00:24:40,320
we're really excited about these new

00:24:38,400 --> 00:24:40,559
capabilities we'll think it'll speed you

00:24:40,320 --> 00:24:44,159
up

00:24:40,559 --> 00:24:46,720
substantially okay now my personal

00:24:44,159 --> 00:24:49,440
favorite thing we improved upon in ac3

00:24:46,720 --> 00:24:50,240
is the local state management story we

00:24:49,440 --> 00:24:51,600
realized that

00:24:50,240 --> 00:24:53,039
state management and working with

00:24:51,600 --> 00:24:54,720
different types of state is still

00:24:53,039 --> 00:24:55,440
something that developers occasionally

00:24:54,720 --> 00:24:56,960
struggle with

00:24:55,440 --> 00:24:59,360
when designing the architecture of their

00:24:56,960 --> 00:25:01,200
applications in this release

00:24:59,360 --> 00:25:03,440
we're giving developers the tools to

00:25:01,200 --> 00:25:08,080
intuitively use apollo client 3

00:25:03,440 --> 00:25:09,840
as a single source of truth for state

00:25:08,080 --> 00:25:11,600
if we're talking about state it's

00:25:09,840 --> 00:25:13,360
important to recognize the different

00:25:11,600 --> 00:25:14,799
kinds of state that a paul client helps

00:25:13,360 --> 00:25:17,039
you work with

00:25:14,799 --> 00:25:18,799
remote state this is the state that we

00:25:17,039 --> 00:25:20,880
make network requests for

00:25:18,799 --> 00:25:22,720
this is your graphql data it's the stuff

00:25:20,880 --> 00:25:25,840
that lives behind an api

00:25:22,720 --> 00:25:27,679
or within a data graph in this case this

00:25:25,840 --> 00:25:28,000
is primarily what developers use apollo

00:25:27,679 --> 00:25:30,159
client

00:25:28,000 --> 00:25:31,520
for you know making requests for graphql

00:25:30,159 --> 00:25:34,960
data and then working with it

00:25:31,520 --> 00:25:38,000
on the client side meta state

00:25:34,960 --> 00:25:38,880
is state about state i was actually

00:25:38,000 --> 00:25:41,360
introduced to this

00:25:38,880 --> 00:25:42,960
at graphql summit last year from a talk

00:25:41,360 --> 00:25:44,799
by jen watson

00:25:42,960 --> 00:25:47,360
when you perform an operation like a

00:25:44,799 --> 00:25:49,440
query or a mutation with apollo client

00:25:47,360 --> 00:25:51,039
we give you signaling that lets you know

00:25:49,440 --> 00:25:52,400
when your request is loading

00:25:51,039 --> 00:25:54,000
so that maybe you could display a

00:25:52,400 --> 00:25:55,120
loading spinner and it lets you know

00:25:54,000 --> 00:25:56,640
when it's done so that

00:25:55,120 --> 00:25:59,039
maybe you could do something meaningful

00:25:56,640 --> 00:26:01,440
with that state

00:25:59,039 --> 00:26:02,880
typically without apollo client you'd

00:26:01,440 --> 00:26:04,080
have to write this kind of signaling

00:26:02,880 --> 00:26:05,600
logic yourself

00:26:04,080 --> 00:26:08,720
so it's really cool that this is done

00:26:05,600 --> 00:26:11,600
for us and that leaves local state

00:26:08,720 --> 00:26:12,559
state that lives on the client side only

00:26:11,600 --> 00:26:14,240
typically

00:26:12,559 --> 00:26:15,760
local state starts out as some kind of

00:26:14,240 --> 00:26:18,640
state that lives as close to the

00:26:15,760 --> 00:26:20,960
component that needs it as possible

00:26:18,640 --> 00:26:22,559
over time you might realize that this

00:26:20,960 --> 00:26:24,320
state needs to be accessed from other

00:26:22,559 --> 00:26:26,240
components as well

00:26:24,320 --> 00:26:27,919
a common solution in this problem is to

00:26:26,240 --> 00:26:29,679
move that state upwards

00:26:27,919 --> 00:26:31,600
which might mean using something like

00:26:29,679 --> 00:26:33,760
react context

00:26:31,600 --> 00:26:35,360
this is great but if you're primarily

00:26:33,760 --> 00:26:36,640
working with graphql data there are

00:26:35,360 --> 00:26:40,720
times when you want that

00:26:36,640 --> 00:26:43,360
local state closer to your graphql data

00:26:40,720 --> 00:26:46,000
here's an example let's say you're

00:26:43,360 --> 00:26:48,720
trying to build a to-do list component

00:26:46,000 --> 00:26:50,559
and it comes back with the id text in

00:26:48,720 --> 00:26:52,000
completed fields

00:26:50,559 --> 00:26:54,240
this is enough for you to display the

00:26:52,000 --> 00:26:55,039
list of to-do's but what if you want the

00:26:54,240 --> 00:26:58,559
ability to

00:26:55,039 --> 00:26:59,520
toggle selected to-do's to do that we

00:26:58,559 --> 00:27:01,840
would actually need to

00:26:59,520 --> 00:27:02,559
decorate our graphql data the remote

00:27:01,840 --> 00:27:05,760
state

00:27:02,559 --> 00:27:06,000
with some local state the challenge is

00:27:05,760 --> 00:27:08,720
we

00:27:06,000 --> 00:27:11,200
also want ui reactivity so when it

00:27:08,720 --> 00:27:13,919
changes we want the view to re-render

00:27:11,200 --> 00:27:15,600
how do we do that there's a new feature

00:27:13,919 --> 00:27:16,320
in apollo client called reactive

00:27:15,600 --> 00:27:18,080
variables

00:27:16,320 --> 00:27:19,520
and it's specifically for this kind of

00:27:18,080 --> 00:27:21,279
use case

00:27:19,520 --> 00:27:23,200
to solve that problem we're having we

00:27:21,279 --> 00:27:25,279
could create a reactive variable to keep

00:27:23,200 --> 00:27:28,000
track of all the selected to do's then

00:27:25,279 --> 00:27:30,399
define a type policy for the to do type

00:27:28,000 --> 00:27:32,320
that runs some code every time the is

00:27:30,399 --> 00:27:34,559
selected field is read

00:27:32,320 --> 00:27:36,640
in order to determine if the to-do is

00:27:34,559 --> 00:27:39,440
selected or not

00:27:36,640 --> 00:27:40,399
with this anytime you want to query

00:27:39,440 --> 00:27:42,720
remote data

00:27:40,399 --> 00:27:43,760
and local state data we can do that at

00:27:42,720 --> 00:27:46,640
the same time

00:27:43,760 --> 00:27:47,200
and in the same query this is how we can

00:27:46,640 --> 00:27:49,679
keep

00:27:47,200 --> 00:27:51,679
related pieces of state as close to each

00:27:49,679 --> 00:27:53,520
other as possible

00:27:51,679 --> 00:27:55,279
so really you have another tool in your

00:27:53,520 --> 00:27:56,480
tool shed here for dealing with local

00:27:55,279 --> 00:27:59,039
state

00:27:56,480 --> 00:28:00,640
instead of reaching for react context if

00:27:59,039 --> 00:28:01,279
you're primarily working with graphql

00:28:00,640 --> 00:28:03,039
data

00:28:01,279 --> 00:28:05,600
and you need globally available local

00:28:03,039 --> 00:28:07,679
state you've got it

00:28:05,600 --> 00:28:09,840
oh one other thing reactive variables

00:28:07,679 --> 00:28:11,440
can be imported anywhere in your code

00:28:09,840 --> 00:28:13,520
this means that the way we perform

00:28:11,440 --> 00:28:14,799
updates is unopinionated

00:28:13,520 --> 00:28:16,960
if you want to write your updates and

00:28:14,799 --> 00:28:18,000
functions you can do that if you want to

00:28:16,960 --> 00:28:20,399
organize them in hooks

00:28:18,000 --> 00:28:22,320
that's a possibility as well it's just a

00:28:20,399 --> 00:28:24,399
more flexible way to deal with local

00:28:22,320 --> 00:28:26,240
state and apollo client

00:28:24,399 --> 00:28:27,440
so you're already using apollo client

00:28:26,240 --> 00:28:28,840
for your remote state

00:28:27,440 --> 00:28:30,480
you're already using it for your meta

00:28:28,840 --> 00:28:32,080
state now

00:28:30,480 --> 00:28:34,480
with these new local state management

00:28:32,080 --> 00:28:36,080
capabilities apollo client becomes your

00:28:34,480 --> 00:28:37,600
single source of truth

00:28:36,080 --> 00:28:39,600
for state management in a front-end

00:28:37,600 --> 00:28:41,919
application

00:28:39,600 --> 00:28:43,919
so in essence paulo client 3 is

00:28:41,919 --> 00:28:45,520
something we're incredibly proud of and

00:28:43,919 --> 00:28:47,200
we're excited about it too

00:28:45,520 --> 00:28:50,159
the team put a lot of love into it and

00:28:47,200 --> 00:28:52,640
we just can't wait for you to try it out

00:28:50,159 --> 00:28:54,720
so then what's next for apollo what are

00:28:52,640 --> 00:28:56,559
we working on now

00:28:54,720 --> 00:28:58,720
as we move forward we're spending some

00:28:56,559 --> 00:29:00,159
serious time on education

00:28:58,720 --> 00:29:02,399
this means you're going to see a lot of

00:29:00,159 --> 00:29:04,080
blog posts and tutorials and

00:29:02,399 --> 00:29:06,320
courses and even training for apollo

00:29:04,080 --> 00:29:08,000
client 3. and we've heard you

00:29:06,320 --> 00:29:09,360
the apollo client dev tools experience

00:29:08,000 --> 00:29:11,200
is due for a revamp

00:29:09,360 --> 00:29:12,320
we've already kicked off working on this

00:29:11,200 --> 00:29:13,840
and we're sure it's going to be an

00:29:12,320 --> 00:29:14,880
exciting improvement over the next few

00:29:13,840 --> 00:29:16,880
months

00:29:14,880 --> 00:29:18,880
and finally we're heavily investing in

00:29:16,880 --> 00:29:20,640
mobile we've got some excellent

00:29:18,880 --> 00:29:21,840
full-time engineers working on both the

00:29:20,640 --> 00:29:24,240
apollo ios

00:29:21,840 --> 00:29:26,080
and android experiences we're excited to

00:29:24,240 --> 00:29:28,159
see both of them become more aligned

00:29:26,080 --> 00:29:30,559
with the core caching concepts popular

00:29:28,159 --> 00:29:32,320
in the web version of apollo client

00:29:30,559 --> 00:29:34,320
that's all for me on the apollo client

00:29:32,320 --> 00:29:36,000
front and with that i'll pass it over to

00:29:34,320 --> 00:29:38,399
jesse to hear more about the server side

00:29:36,000 --> 00:29:38,399
of things

00:29:38,480 --> 00:29:44,240
thank you khalil hi folks i hope

00:29:42,000 --> 00:29:46,720
everyone out there is doing really well

00:29:44,240 --> 00:29:48,480
staying safe and trying to look out for

00:29:46,720 --> 00:29:52,480
each other

00:29:48,480 --> 00:29:54,960
thank you for joining us here today

00:29:52,480 --> 00:29:57,520
at apollo we have a lot of conversations

00:29:54,960 --> 00:29:59,360
with teams adopting graphql

00:29:57,520 --> 00:30:00,960
and in those conversations a really

00:29:59,360 --> 00:30:02,640
common scenario we find

00:30:00,960 --> 00:30:06,320
is that small graphs are appearing

00:30:02,640 --> 00:30:08,480
organically within organizations

00:30:06,320 --> 00:30:11,679
we're seeing incremental adoption a

00:30:08,480 --> 00:30:11,679
pattern which we encourage

00:30:12,720 --> 00:30:17,200
the classic benefits that graphql has to

00:30:14,880 --> 00:30:18,480
offer plus the improvements to graphql

00:30:17,200 --> 00:30:20,720
libraries and tooling

00:30:18,480 --> 00:30:22,720
across the ecosystem including features

00:30:20,720 --> 00:30:24,000
like we just saw in apollo studio and

00:30:22,720 --> 00:30:27,039
apollo client

00:30:24,000 --> 00:30:28,960
are driving this adoption and depending

00:30:27,039 --> 00:30:31,360
on the size of these organizations it's

00:30:28,960 --> 00:30:37,120
not uncommon for more than one graphql

00:30:31,360 --> 00:30:39,840
server to show up

00:30:37,120 --> 00:30:41,440
this often happens when back-end teams

00:30:39,840 --> 00:30:43,440
who had previously created

00:30:41,440 --> 00:30:44,640
separate rest endpoints are deploying

00:30:43,440 --> 00:30:47,360
graphql

00:30:44,640 --> 00:30:48,320
as a remedy for duplication while

00:30:47,360 --> 00:30:51,120
front-end teams

00:30:48,320 --> 00:30:52,720
are simultaneously introducing graphql

00:30:51,120 --> 00:30:57,360
for their own reasons

00:30:52,720 --> 00:30:57,360
while simplifying redux code for example

00:30:58,000 --> 00:31:02,080
these initiatives can happen separately

00:31:02,320 --> 00:31:06,960
and disconnected graphs are a fast path

00:31:04,720 --> 00:31:08,720
but this strategy has some drawbacks

00:31:06,960 --> 00:31:10,559
data might need to be intentionally

00:31:08,720 --> 00:31:12,320
duplicated across graphs

00:31:10,559 --> 00:31:14,320
and people outside the teams might have

00:31:12,320 --> 00:31:15,279
a hard time recognizing which graph has

00:31:14,320 --> 00:31:17,600
which data

00:31:15,279 --> 00:31:19,760
if you do split the graphs just make

00:31:17,600 --> 00:31:21,890
sure the boss knows to find exactly the

00:31:19,760 --> 00:31:22,960
data that they need

00:31:21,890 --> 00:31:25,600
[Music]

00:31:22,960 --> 00:31:27,600
joking aside we believe that these

00:31:25,600 --> 00:31:28,480
disconnected graphs have high potential

00:31:27,600 --> 00:31:32,799
to eventually

00:31:28,480 --> 00:31:35,519
bond and we think they should

00:31:32,799 --> 00:31:37,360
we identify one graph as one of our

00:31:35,519 --> 00:31:39,279
graphql principles

00:31:37,360 --> 00:31:40,880
we have nine other principles at

00:31:39,279 --> 00:31:44,880
principal graphql.com

00:31:40,880 --> 00:31:44,880
but one graph is number one

00:31:45,519 --> 00:31:48,799
by joining them together we think they

00:31:47,440 --> 00:31:51,919
create more natural

00:31:48,799 --> 00:31:53,840
and more powerful experiences joining

00:31:51,919 --> 00:31:55,600
may happen after the fifth conversation

00:31:53,840 --> 00:31:57,200
about overlap or when there's

00:31:55,600 --> 00:31:58,399
disagreement about where something

00:31:57,200 --> 00:32:01,519
should live

00:31:58,399 --> 00:32:02,399
but we see it happening and that's what

00:32:01,519 --> 00:32:05,120
i will highlight

00:32:02,399 --> 00:32:05,120
for you today

00:32:05,440 --> 00:32:08,720
by sharing what we've learned from our

00:32:07,519 --> 00:32:10,880
conversations

00:32:08,720 --> 00:32:13,519
i want you all to be able to understand

00:32:10,880 --> 00:32:15,840
the signs that you should look for

00:32:13,519 --> 00:32:17,600
so you know when it's time to connect

00:32:15,840 --> 00:32:21,440
those disconnected graphs

00:32:17,600 --> 00:32:23,840
that's the when and i want to show

00:32:21,440 --> 00:32:24,880
that apollo has the tooling to make

00:32:23,840 --> 00:32:28,240
joining those graphs

00:32:24,880 --> 00:32:31,919
possible that's the how

00:32:28,240 --> 00:32:33,600
now i want to emphasize all the data in

00:32:31,919 --> 00:32:34,640
this one graph it doesn't need to come

00:32:33,600 --> 00:32:37,600
from one place

00:32:34,640 --> 00:32:39,360
it might but with incremental adoption

00:32:37,600 --> 00:32:41,760
and a bottom-up approach

00:32:39,360 --> 00:32:43,440
while designing for client needs we've

00:32:41,760 --> 00:32:45,760
seen it happening differently

00:32:43,440 --> 00:32:49,039
with small graphs eventually needing to

00:32:45,760 --> 00:32:49,039
join larger graphs

00:32:50,159 --> 00:32:53,760
apollo federation lets us share and

00:32:52,159 --> 00:32:55,519
extend the definition of types

00:32:53,760 --> 00:32:57,919
and the relationships regardless of

00:32:55,519 --> 00:32:58,799
where the data lives or whose concern it

00:32:57,919 --> 00:33:00,399
is

00:32:58,799 --> 00:33:02,399
and because all of those relationships

00:33:00,399 --> 00:33:03,679
are strongly typed and can be statically

00:33:02,399 --> 00:33:05,279
analyzed

00:33:03,679 --> 00:33:11,840
we can understand when the changes to

00:33:05,279 --> 00:33:11,840
the graph compromise existing contracts

00:33:12,480 --> 00:33:17,200
we first announced the apollo federation

00:33:14,559 --> 00:33:20,640
specification and apollo gateway in may

00:33:17,200 --> 00:33:22,559
of last year since then through a lot of

00:33:20,640 --> 00:33:24,480
incredible conversations with teams

00:33:22,559 --> 00:33:27,519
ranging in sizes

00:33:24,480 --> 00:33:31,200
including stockx glass door

00:33:27,519 --> 00:33:33,039
priceline american airlines and more

00:33:31,200 --> 00:33:34,799
we've been continually improving

00:33:33,039 --> 00:33:37,600
federation

00:33:34,799 --> 00:33:39,760
and optimizing query planning to scale

00:33:37,600 --> 00:33:42,880
to large graphs

00:33:39,760 --> 00:33:42,880
with demanding needs

00:33:43,440 --> 00:33:47,200
on npm the javascript federation

00:33:46,320 --> 00:33:48,559
implementation

00:33:47,200 --> 00:33:50,840
is being downloaded nearly

00:33:48,559 --> 00:33:52,240
three-quarters of a million times per

00:33:50,840 --> 00:33:54,880
week

00:33:52,240 --> 00:33:56,559
an apollo gateway is at nearly one

00:33:54,880 --> 00:33:59,600
quarter of a million downloads

00:33:56,559 --> 00:34:02,559
per week and

00:33:59,600 --> 00:34:04,240
usage goes beyond just one language

00:34:02,559 --> 00:34:05,840
we've seen the apollo federation

00:34:04,240 --> 00:34:08,079
specification

00:34:05,840 --> 00:34:08,960
introduced into many non-javascript

00:34:08,079 --> 00:34:12,079
servers

00:34:08,960 --> 00:34:15,520
including php scala

00:34:12,079 --> 00:34:18,639
java go kotlin python

00:34:15,520 --> 00:34:18,639
ruby and rust

00:34:18,960 --> 00:34:22,159
this strong adoption across the

00:34:20,800 --> 00:34:24,399
ecosystem has

00:34:22,159 --> 00:34:26,320
cemented federation as a best practice

00:34:24,399 --> 00:34:29,520
for teams looking to compose

00:34:26,320 --> 00:34:29,520
disconnected graphs

00:34:30,159 --> 00:34:37,599
and composing is the key word here

00:34:34,399 --> 00:34:41,440
this is what federation does it composes

00:34:37,599 --> 00:34:41,440
multiple schemas into one

00:34:41,760 --> 00:34:45,119
and it does this using tools that apollo

00:34:43,839 --> 00:34:47,760
has built that allow

00:34:45,119 --> 00:34:50,320
extending types safely across graph

00:34:47,760 --> 00:34:50,320
boundaries

00:34:51,119 --> 00:34:55,200
i'm going to go through an exercise it's

00:34:53,200 --> 00:34:57,760
going to enable two existing graphql

00:34:55,200 --> 00:35:00,400
services to play their respective parts

00:34:57,760 --> 00:35:01,920
in a single federated graph to

00:35:00,400 --> 00:35:04,000
demonstrate this with an example

00:35:01,920 --> 00:35:06,720
organization which brings a little extra

00:35:04,000 --> 00:35:11,920
brightness to this otherwise dark year

00:35:06,720 --> 00:35:14,240
i'm proud to announce radrainbows.com

00:35:11,920 --> 00:35:16,640
the industry leaders in rainbow research

00:35:14,240 --> 00:35:18,960
tracking and analysis

00:35:16,640 --> 00:35:21,040
now here's a business that deals with

00:35:18,960 --> 00:35:22,720
rainbows in a lot of their products

00:35:21,040 --> 00:35:24,079
and they have a lot of overlapping

00:35:22,720 --> 00:35:26,400
concerns

00:35:24,079 --> 00:35:28,839
for rad rainbows the rainbow is as core

00:35:26,400 --> 00:35:31,839
to the business as the repository is to

00:35:28,839 --> 00:35:31,839
github

00:35:32,320 --> 00:35:35,839
let's imagine that this imaginary

00:35:34,000 --> 00:35:38,640
business has a catalog

00:35:35,839 --> 00:35:39,359
team their responsibility is displaying

00:35:38,640 --> 00:35:41,680
rainbows

00:35:39,359 --> 00:35:42,560
for others to browse in the course of

00:35:41,680 --> 00:35:44,800
their development

00:35:42,560 --> 00:35:45,839
they built out a small graphql endpoint

00:35:44,800 --> 00:35:47,839
using typescript

00:35:45,839 --> 00:35:50,079
to get the listings of the rainbows to

00:35:47,839 --> 00:35:52,000
the client

00:35:50,079 --> 00:35:54,400
here's a simplified example of their

00:35:52,000 --> 00:35:56,000
schema

00:35:54,400 --> 00:35:58,079
as you can see here there's a rainbow

00:35:56,000 --> 00:36:01,359
type with latitude and longitude

00:35:58,079 --> 00:36:03,440
and a list of colors there's a top level

00:36:01,359 --> 00:36:06,960
query field called get rainbows which

00:36:03,440 --> 00:36:09,119
returns a list of rainbows

00:36:06,960 --> 00:36:10,400
now for any of you who are tempted to

00:36:09,119 --> 00:36:12,560
tell me hey

00:36:10,400 --> 00:36:14,000
rainbows don't have just one end they

00:36:12,560 --> 00:36:14,960
have two ends with two sets of

00:36:14,000 --> 00:36:18,160
coordinates

00:36:14,960 --> 00:36:19,680
well a fun but not so accurate fact is

00:36:18,160 --> 00:36:23,839
rainbows are actually tracked by the

00:36:19,680 --> 00:36:23,839
location of their pot of gold

00:36:25,760 --> 00:36:30,079
i've got this schema running on an

00:36:27,760 --> 00:36:31,440
apollo server instance

00:36:30,079 --> 00:36:33,920
and i've mocked it out with some fake

00:36:31,440 --> 00:36:35,200
data if i click into the new apollo

00:36:33,920 --> 00:36:39,200
studio explorer

00:36:35,200 --> 00:36:39,200
and run a request to the rainbows field

00:36:39,359 --> 00:36:44,480
we'll see that we found some rainbows

00:36:42,240 --> 00:36:44,480
cool

00:36:44,560 --> 00:36:49,200
after sharing a link to this studio

00:36:46,400 --> 00:36:51,440
explorer graph on the company slack

00:36:49,200 --> 00:36:51,780
it spawned a conversation with another

00:36:51,440 --> 00:36:52,880
team

00:36:51,780 --> 00:36:56,720
[Music]

00:36:52,880 --> 00:36:58,800
the ios team now the iowa's team

00:36:56,720 --> 00:37:00,720
loves the catalog's colors but they

00:36:58,800 --> 00:37:01,119
recently saw another team share their

00:37:00,720 --> 00:37:03,599
graph

00:37:01,119 --> 00:37:05,280
on slack the luminosity team who

00:37:03,599 --> 00:37:07,200
provides the measurement of how bright

00:37:05,280 --> 00:37:09,040
each rainbow is

00:37:07,200 --> 00:37:10,960
the catalog team has decided they don't

00:37:09,040 --> 00:37:13,119
need luminosity in their client but

00:37:10,960 --> 00:37:15,839
the ios team is sure that in order for

00:37:13,119 --> 00:37:17,599
their users to find the raddest rainbows

00:37:15,839 --> 00:37:20,839
they need them to know how bright they

00:37:17,599 --> 00:37:23,200
are but they can't make two separate

00:37:20,839 --> 00:37:25,119
queries right now

00:37:23,200 --> 00:37:28,000
the ios teams query looks like the one

00:37:25,119 --> 00:37:31,119
on the left they're getting the latitude

00:37:28,000 --> 00:37:32,000
longitude and the colors they want to

00:37:31,119 --> 00:37:35,760
make the query

00:37:32,000 --> 00:37:38,000
on the right which adds luminosity

00:37:35,760 --> 00:37:39,920
no they could ask the catalog team to

00:37:38,000 --> 00:37:42,160
add it to their graphql server but since

00:37:39,920 --> 00:37:43,119
the luminosity team is responsible for

00:37:42,160 --> 00:37:45,920
the data

00:37:43,119 --> 00:37:49,200
and already has a graphql server set up

00:37:45,920 --> 00:37:51,040
federation offers another option

00:37:49,200 --> 00:37:52,560
first though some background on the

00:37:51,040 --> 00:37:54,720
luminosity team

00:37:52,560 --> 00:37:57,040
they are a ruby team who are responsible

00:37:54,720 --> 00:37:59,359
for several different styles of apis but

00:37:57,040 --> 00:38:01,680
recently stood up a graphql endpoint to

00:37:59,359 --> 00:38:03,760
serve some of their data

00:38:01,680 --> 00:38:05,839
so let's see what a federated

00:38:03,760 --> 00:38:06,960
collaboration between these two teams

00:38:05,839 --> 00:38:09,040
looks like

00:38:06,960 --> 00:38:10,880
i won't go into specifics here but with

00:38:09,040 --> 00:38:14,000
apollo server and apollo federation

00:38:10,880 --> 00:38:17,599
it takes just a few lines of code what i

00:38:14,000 --> 00:38:20,560
need to show is applying a federated key

00:38:17,599 --> 00:38:23,359
on the rainbow type now this is a lot

00:38:20,560 --> 00:38:25,359
like a primary key in a database

00:38:23,359 --> 00:38:28,480
it uniquely defines how to fetch an

00:38:25,359 --> 00:38:28,480
instance of a rainbow

00:38:29,440 --> 00:38:33,520
i'll go to the running application and

00:38:32,079 --> 00:38:36,079
apply this to the rainbow type

00:38:33,520 --> 00:38:39,839
definitions

00:38:36,079 --> 00:38:41,599
using the key directive

00:38:39,839 --> 00:38:43,440
we're using a compound key of the

00:38:41,599 --> 00:38:44,590
latitude and longitude since that's how

00:38:43,440 --> 00:38:45,760
rainbows are identified

00:38:44,590 --> 00:38:48,720
[Music]

00:38:45,760 --> 00:38:50,720
server reloaded and i'm going to go

00:38:48,720 --> 00:38:53,200
ahead and register this as the catalog

00:38:50,720 --> 00:38:53,200
service

00:38:56,240 --> 00:38:59,280
i'll provide the url endpoint for

00:38:58,079 --> 00:39:02,400
introspection

00:38:59,280 --> 00:39:04,240
during composition and also where that

00:39:02,400 --> 00:39:06,640
graphql service can be accessed at

00:39:04,240 --> 00:39:06,640
runtime

00:39:08,480 --> 00:39:17,920
and now the catalog service is federated

00:39:15,119 --> 00:39:19,920
now we introduce apollo gateway paul

00:39:17,920 --> 00:39:21,920
gateway runs in your own environment

00:39:19,920 --> 00:39:23,920
and acts as the coordinator for incoming

00:39:21,920 --> 00:39:25,920
requests

00:39:23,920 --> 00:39:27,359
when an operation comes in the gateway

00:39:25,920 --> 00:39:28,560
uses the relationships

00:39:27,359 --> 00:39:30,400
we've defined in the graph with

00:39:28,560 --> 00:39:32,240
federated directives to build the query

00:39:30,400 --> 00:39:34,400
plan

00:39:32,240 --> 00:39:35,760
for example if a client was asking for

00:39:34,400 --> 00:39:37,200
the rainbows colors

00:39:35,760 --> 00:39:39,280
that would only need information from

00:39:37,200 --> 00:39:42,320
the catalog service so the gateway would

00:39:39,280 --> 00:39:44,880
make a simple fetch to that service

00:39:42,320 --> 00:39:47,280
however once our ios client team starts

00:39:44,880 --> 00:39:48,960
asking for the new luminosity field

00:39:47,280 --> 00:39:50,720
it will need to make a new plan that

00:39:48,960 --> 00:39:52,240
joins the rainbows from the catalog to

00:39:50,720 --> 00:39:54,079
their luminosity

00:39:52,240 --> 00:39:57,440
all without any custom gateway code

00:39:54,079 --> 00:39:59,839
being written

00:39:57,440 --> 00:40:01,599
back in apollo studio explorer i change

00:39:59,839 --> 00:40:03,040
over to the gateway which i already have

00:40:01,599 --> 00:40:06,240
running on port 4000

00:40:03,040 --> 00:40:07,920
locally and when i run the same query as

00:40:06,240 --> 00:40:11,839
before i get the same results

00:40:07,920 --> 00:40:11,839
just query plan by the gateway

00:40:12,079 --> 00:40:15,839
let's move over to the graphql ruby

00:40:13,839 --> 00:40:19,040
server the luminosity team

00:40:15,839 --> 00:40:21,760
has in place now i'll note the graphql

00:40:19,040 --> 00:40:24,079
ecosystem in ruby is really quite mature

00:40:21,760 --> 00:40:25,599
github shopify and a lot of contributors

00:40:24,079 --> 00:40:27,599
have made this a really wonderful

00:40:25,599 --> 00:40:29,599
experience

00:40:27,599 --> 00:40:31,119
and the ruby federation implementation

00:40:29,599 --> 00:40:33,440
is with huge thanks to the folks at

00:40:31,119 --> 00:40:34,960
gusto

00:40:33,440 --> 00:40:37,040
i've already built this server using the

00:40:34,960 --> 00:40:39,839
graphql gem but here's a preview of the

00:40:37,040 --> 00:40:39,839
current rainbow type

00:40:40,319 --> 00:40:44,000
so the first thing you'll notice is that

00:40:42,000 --> 00:40:46,560
this isn't defined here with sdl but

00:40:44,000 --> 00:40:47,760
instead it's written as idiomatic ruby

00:40:46,560 --> 00:40:50,079
code

00:40:47,760 --> 00:40:52,240
what we're aiming to do works out the

00:40:50,079 --> 00:40:53,680
same but to help with understanding

00:40:52,240 --> 00:40:55,680
i put up an example of what this would

00:40:53,680 --> 00:40:58,960
look like using sdl

00:40:55,680 --> 00:40:59,520
underneath now the second thing to point

00:40:58,960 --> 00:41:03,040
out is

00:40:59,520 --> 00:41:03,040
we see another rainbow type

00:41:03,440 --> 00:41:07,200
this rainbow doesn't have colors but

00:41:04,960 --> 00:41:08,960
like i said earlier rainbows are core to

00:41:07,200 --> 00:41:10,560
this business so it's not a surprise

00:41:08,960 --> 00:41:14,240
that two separate teams have already

00:41:10,560 --> 00:41:14,240
built rainbow types into their graph

00:41:14,319 --> 00:41:19,839
to the clients accessing the graph

00:41:17,680 --> 00:41:22,160
we only want to have one concept of a

00:41:19,839 --> 00:41:25,280
rainbow this is like any core type

00:41:22,160 --> 00:41:28,319
a user type for example and other graphs

00:41:25,280 --> 00:41:30,400
this is a type that we can consolidate

00:41:28,319 --> 00:41:32,880
we want to instead extend the rainbow

00:41:30,400 --> 00:41:35,200
type that lives elsewhere

00:41:32,880 --> 00:41:37,119
the federation gem is already installed

00:41:35,200 --> 00:41:38,480
so i just need to make a few changes to

00:41:37,119 --> 00:41:40,560
this existing rainbow

00:41:38,480 --> 00:41:42,000
type to tie it together to the rainbow

00:41:40,560 --> 00:41:44,880
that lives in the catalog team's

00:41:42,000 --> 00:41:44,880
typescript server

00:41:45,200 --> 00:41:49,839
let's just say that we're making a

00:41:46,640 --> 00:41:49,839
rainbow connection

00:41:50,880 --> 00:41:54,720
okay jumping into the ruby code

00:41:57,359 --> 00:42:01,040
i'll add the same federated keys we

00:41:58,880 --> 00:42:04,560
defined on the catalog

00:42:01,040 --> 00:42:04,560
adding latitude and longitude

00:42:11,359 --> 00:42:18,400
next i'll call extend type

00:42:14,480 --> 00:42:20,480
this declares it as an extension type

00:42:18,400 --> 00:42:23,119
then i'll mark the latitude and

00:42:20,480 --> 00:42:24,800
longitude as external

00:42:23,119 --> 00:42:26,720
this is necessary since they're primary

00:42:24,800 --> 00:42:28,560
keys that live elsewhere and this

00:42:26,720 --> 00:42:32,000
service needs to understand that on its

00:42:28,560 --> 00:42:33,280
own in order to pass validation

00:42:32,000 --> 00:42:36,319
in fact that's the only reason they're

00:42:33,280 --> 00:42:36,319
declared here at all

00:42:37,520 --> 00:42:45,200
i'll start this now federated service

00:42:41,839 --> 00:42:49,599
on port 4002

00:42:45,200 --> 00:42:59,839
and then i'll register this

00:42:49,599 --> 00:42:59,839
as the luminosity service

00:43:01,839 --> 00:43:06,800
once again i'll provide the endpoint for

00:43:04,560 --> 00:43:13,839
introspection and the url

00:43:06,800 --> 00:43:13,839
for execution

00:43:21,119 --> 00:43:26,079
okay and now the luminosity service is

00:43:23,680 --> 00:43:29,359
federated and ready to participate

00:43:26,079 --> 00:43:30,960
as the other part of our graph now

00:43:29,359 --> 00:43:33,520
that step you just saw also does a

00:43:30,960 --> 00:43:33,920
validation check i didn't mess anything

00:43:33,520 --> 00:43:36,240
up

00:43:33,920 --> 00:43:37,359
this particular time but this is an

00:43:36,240 --> 00:43:39,280
actual error i got

00:43:37,359 --> 00:43:40,880
on a previous run when i had mismatched

00:43:39,280 --> 00:43:43,040
the keys

00:43:40,880 --> 00:43:47,119
it's like a helpful little cloud just

00:43:43,040 --> 00:43:47,119
floated in to help me up onto my rainbow

00:43:48,319 --> 00:43:50,640
okay

00:43:51,440 --> 00:43:55,760
so here's what luminosity's luminosity's

00:43:54,400 --> 00:43:58,640
sdl looks like

00:43:55,760 --> 00:43:58,640
after the change

00:44:04,079 --> 00:44:08,480
so we now have multiple graphql servers

00:44:06,319 --> 00:44:12,240
of multiple different teams concerns

00:44:08,480 --> 00:44:12,240
serving one graph to the client

00:44:12,800 --> 00:44:18,480
if i go back to apollo studio

00:44:16,160 --> 00:44:20,720
you can add the luminosity field to the

00:44:18,480 --> 00:44:22,640
query and run the results

00:44:20,720 --> 00:44:25,599
and see the response is fulfilled from

00:44:22,640 --> 00:44:25,599
two separate graphs

00:44:30,079 --> 00:44:33,200
the query i just executed is exactly

00:44:32,400 --> 00:44:36,720
what the ios

00:44:33,200 --> 00:44:39,680
client team needed it didn't take any

00:44:36,720 --> 00:44:40,319
complex code to wire it up just a query

00:44:39,680 --> 00:44:42,319
planner

00:44:40,319 --> 00:44:45,520
that followed the expectations defined

00:44:42,319 --> 00:44:47,520
by the federated directives

00:44:45,520 --> 00:44:48,960
we've just enabled collaboration on

00:44:47,520 --> 00:44:51,440
types

00:44:48,960 --> 00:44:53,280
and given product teams the graph that

00:44:51,440 --> 00:44:56,240
makes the most sense for what

00:44:53,280 --> 00:44:57,520
they're building and this is what the

00:44:56,240 --> 00:45:00,240
one graph principle

00:44:57,520 --> 00:45:00,800
is all about build for what your product

00:45:00,240 --> 00:45:02,400
needs

00:45:00,800 --> 00:45:06,400
not because of the way your teams are

00:45:02,400 --> 00:45:06,400
structured or where your data is stored

00:45:06,800 --> 00:45:10,240
as you build out your graph federation

00:45:08,880 --> 00:45:13,119
is one of the best tools to help you

00:45:10,240 --> 00:45:19,839
prioritize the end user's experience

00:45:13,119 --> 00:45:19,839
by designing for them not against them

00:45:20,079 --> 00:45:24,720
we believe it's time to federate

00:45:22,079 --> 00:45:26,160
disconnected graphs

00:45:24,720 --> 00:45:28,079
when clients are using data from

00:45:26,160 --> 00:45:31,119
different graphs

00:45:28,079 --> 00:45:33,920
services have overlapping concepts

00:45:31,119 --> 00:45:35,520
or more teams need to spin up graphql

00:45:33,920 --> 00:45:37,680
servers

00:45:35,520 --> 00:45:40,800
but they can't keep reinventing core

00:45:37,680 --> 00:45:43,920
company concepts

00:45:40,800 --> 00:45:45,760
and this consolidated graph is valuable

00:45:43,920 --> 00:45:47,440
not only for development but for any

00:45:45,760 --> 00:45:48,319
human who needs to look into the graph

00:45:47,440 --> 00:45:49,839
as well

00:45:48,319 --> 00:45:51,839
everyone can relish in the fact that

00:45:49,839 --> 00:45:53,599
there is one notion of a rainbow

00:45:51,839 --> 00:45:55,680
and when luminosity becomes part of the

00:45:53,599 --> 00:45:56,960
graph it will show up exactly where

00:45:55,680 --> 00:46:00,480
everyone expects it

00:45:56,960 --> 00:46:02,480
on the consolidated rainbow type

00:46:00,480 --> 00:46:05,520
and since it's graphql if they don't

00:46:02,480 --> 00:46:07,520
request it they won't get it

00:46:05,520 --> 00:46:09,599
we sell a lot of value in the graph and

00:46:07,520 --> 00:46:12,480
its ability to facilitate collaboration

00:46:09,599 --> 00:46:14,000
and simplify workflows we hope that a

00:46:12,480 --> 00:46:16,480
unified set of tools and

00:46:14,000 --> 00:46:18,319
reasoning about things in a standard way

00:46:16,480 --> 00:46:20,400
will reduce the cost of that next

00:46:18,319 --> 00:46:22,800
integration and let us focus on building

00:46:20,400 --> 00:46:22,800
product

00:46:25,760 --> 00:46:29,599
if you think you're ready for federation

00:46:27,520 --> 00:46:33,200
here's what we suggest

00:46:29,599 --> 00:46:36,319
first try it out read our docs

00:46:33,200 --> 00:46:38,319
take it for a spin and join the

00:46:36,319 --> 00:46:40,160
federation panel and topic rooms later

00:46:38,319 --> 00:46:42,480
today

00:46:40,160 --> 00:46:43,200
and use apollo studio to manage your

00:46:42,480 --> 00:46:47,200
graph and

00:46:43,200 --> 00:46:47,200
reach out to us for guidance and help

00:46:48,720 --> 00:46:53,359
and if you're excited about this tooling

00:46:51,359 --> 00:46:54,960
be sure to catch ashi's talk next week

00:46:53,359 --> 00:46:59,200
about the future of federation

00:46:54,960 --> 00:46:59,200
it's very exciting and so very cool

00:46:59,599 --> 00:47:02,960
i want to thank you for following me

00:47:01,040 --> 00:47:04,800
along this rainbow

00:47:02,960 --> 00:47:06,319
i'll leave you with a hint about where

00:47:04,800 --> 00:47:08,160
my rainbow inspiration

00:47:06,319 --> 00:47:09,359
came from and it was from none other

00:47:08,160 --> 00:47:13,280
than jim henson

00:47:09,359 --> 00:47:16,960
playing the character of kermit the frog

00:47:13,280 --> 00:47:17,920
and in one verse he sings someday we'll

00:47:16,960 --> 00:47:20,800
find it

00:47:17,920 --> 00:47:21,680
that rainbow connection the lovers the

00:47:20,800 --> 00:47:24,960
dreamers

00:47:21,680 --> 00:47:26,400
and me keep an eye out for any rainbow

00:47:24,960 --> 00:47:27,760
connections you can make in your own

00:47:26,400 --> 00:47:30,880
graph

00:47:27,760 --> 00:47:33,680
over to you peggy thanks so much

00:47:30,880 --> 00:47:35,680
jesse danielle and khalil i'm really

00:47:33,680 --> 00:47:37,520
proud of what the apollo community and

00:47:35,680 --> 00:47:38,720
team has accomplished over these past

00:47:37,520 --> 00:47:40,640
few months

00:47:38,720 --> 00:47:42,640
all of these tools are basically what i

00:47:40,640 --> 00:47:44,960
wish i had three to four years ago when

00:47:42,640 --> 00:47:47,359
i first started writing graphql

00:47:44,960 --> 00:47:48,400
if you have any questions about studio

00:47:47,359 --> 00:47:50,559
client 3

00:47:48,400 --> 00:47:52,319
federation or anything else apollo

00:47:50,559 --> 00:47:54,480
engineers are standing by

00:47:52,319 --> 00:47:56,559
to help you in the sponsor lounge on

00:47:54,480 --> 00:47:58,160
discord

00:47:56,559 --> 00:48:00,319
so now that we've heard about what

00:47:58,160 --> 00:48:02,880
apollo has been up to what else can you

00:48:00,319 --> 00:48:04,559
expect to learn during graphql summit

00:48:02,880 --> 00:48:06,240
well this week we have some awesome

00:48:04,559 --> 00:48:09,119
talks on mobile

00:48:06,240 --> 00:48:10,800
caching and anti-racism there will also

00:48:09,119 --> 00:48:13,040
be panels on federation

00:48:10,800 --> 00:48:16,160
and learning graphql from leaders in the

00:48:13,040 --> 00:48:18,079
graphql community

00:48:16,160 --> 00:48:20,960
the following week you'll hear talks on

00:48:18,079 --> 00:48:23,920
custom scalars the future federation

00:48:20,960 --> 00:48:26,079
auth error handling and deferring stream

00:48:23,920 --> 00:48:28,160
so we have a pretty stacked lineup

00:48:26,079 --> 00:48:30,160
and we chose our speakers because we

00:48:28,160 --> 00:48:31,839
wanted to both spotlight everything

00:48:30,160 --> 00:48:34,240
that's new with graphql

00:48:31,839 --> 00:48:37,200
while also hearing from new and diverse

00:48:34,240 --> 00:48:39,280
voices in the graphql community

00:48:37,200 --> 00:48:40,319
so i think some of you folks may be

00:48:39,280 --> 00:48:42,640
wondering

00:48:40,319 --> 00:48:44,480
what do i do at a virtual event and how

00:48:42,640 --> 00:48:46,240
can i make the most out of graphql

00:48:44,480 --> 00:48:48,160
summit worldwide

00:48:46,240 --> 00:48:50,559
because honestly after this we're gonna

00:48:48,160 --> 00:48:51,200
post all the talks all the content on

00:48:50,559 --> 00:48:53,359
our youtube

00:48:51,200 --> 00:48:54,720
so why should you tune in live and

00:48:53,359 --> 00:48:56,800
participate

00:48:54,720 --> 00:48:58,240
well over the past few months uh the

00:48:56,800 --> 00:49:00,160
organizers of summit

00:48:58,240 --> 00:49:02,400
uh we've attended a lot of virtual

00:49:00,160 --> 00:49:04,160
events and whether it was the platform

00:49:02,400 --> 00:49:06,400
or the lack of interaction

00:49:04,160 --> 00:49:08,720
they didn't feel quite right so we

00:49:06,400 --> 00:49:09,760
decided to host our event on twitch and

00:49:08,720 --> 00:49:11,440
discord because

00:49:09,760 --> 00:49:13,920
that's where developer communities hang

00:49:11,440 --> 00:49:15,839
out and we also wanted to create spaces

00:49:13,920 --> 00:49:16,880
where community members could virtually

00:49:15,839 --> 00:49:20,800
meet and share

00:49:16,880 --> 00:49:22,880
ideas the main space we're going to be

00:49:20,800 --> 00:49:24,000
connecting with other graphql developers

00:49:22,880 --> 00:49:26,960
throughout the conference

00:49:24,000 --> 00:49:28,960
is discord and if you need a link to the

00:49:26,960 --> 00:49:30,640
discord you can get it below but you

00:49:28,960 --> 00:49:32,960
have to register first

00:49:30,640 --> 00:49:34,079
so once you're on discord uh what's

00:49:32,960 --> 00:49:36,000
there for you

00:49:34,079 --> 00:49:38,000
well we have a graphql channel that's

00:49:36,000 --> 00:49:40,000
where you're going to ask questions and

00:49:38,000 --> 00:49:42,000
maybe you've been looking for answers on

00:49:40,000 --> 00:49:43,040
server side rendering or graphql

00:49:42,000 --> 00:49:44,960
security

00:49:43,040 --> 00:49:46,880
just ask a question in the chat i mean

00:49:44,960 --> 00:49:48,480
with 5 000 people you're almost

00:49:46,880 --> 00:49:50,720
guaranteed that someone else has run

00:49:48,480 --> 00:49:52,480
into the same issue

00:49:50,720 --> 00:49:54,000
some of the talks uh throughout the

00:49:52,480 --> 00:49:56,079
weeks we'll have live q a

00:49:54,000 --> 00:49:58,960
and you'll be able to ask questions for

00:49:56,079 --> 00:50:01,520
that in the speaker questions channel

00:49:58,960 --> 00:50:03,359
we also have a job board you should post

00:50:01,520 --> 00:50:04,480
if your team is hiring or if you're

00:50:03,359 --> 00:50:06,800
looking for work

00:50:04,480 --> 00:50:08,240
and especially with covid layoffs it's

00:50:06,800 --> 00:50:09,440
really important that we all help each

00:50:08,240 --> 00:50:11,520
other out

00:50:09,440 --> 00:50:13,520
and finally you can participate in topic

00:50:11,520 --> 00:50:15,200
rooms now i know this kind of sounds a

00:50:13,520 --> 00:50:17,200
little scary you might not know what to

00:50:15,200 --> 00:50:18,000
expect but i really do promise they will

00:50:17,200 --> 00:50:22,000
be welcoming

00:50:18,000 --> 00:50:24,800
and fun so what are topic rooms

00:50:22,000 --> 00:50:25,200
they are voice and video chat rooms led

00:50:24,800 --> 00:50:28,000
by

00:50:25,200 --> 00:50:28,319
a graphql community member where you can

00:50:28,000 --> 00:50:30,319
meet

00:50:28,319 --> 00:50:32,079
other developers working on similar

00:50:30,319 --> 00:50:33,119
problems in a safe and welcoming

00:50:32,079 --> 00:50:35,119
environment

00:50:33,119 --> 00:50:36,960
you can ask questions you can screen

00:50:35,119 --> 00:50:37,920
share together or even have an open

00:50:36,960 --> 00:50:40,319
discussion

00:50:37,920 --> 00:50:42,720
and topics range from subscriptions to

00:50:40,319 --> 00:50:43,599
state management to graphql java and

00:50:42,720 --> 00:50:45,280
more

00:50:43,599 --> 00:50:46,960
so we're going to have about 12

00:50:45,280 --> 00:50:48,480
pre-scheduled topic rooms

00:50:46,960 --> 00:50:50,000
they're going to change every day you

00:50:48,480 --> 00:50:52,319
can see the full schedule

00:50:50,000 --> 00:50:54,160
on our website but if you don't see a

00:50:52,319 --> 00:50:56,319
topic that you like you can actually

00:50:54,160 --> 00:50:58,319
gather a group of people together and

00:50:56,319 --> 00:50:58,880
start your own by pinging channel

00:50:58,319 --> 00:51:02,319
request

00:50:58,880 --> 00:51:04,319
on discord so say maybe you are a rails

00:51:02,319 --> 00:51:05,680
developer doing graphql and you want to

00:51:04,319 --> 00:51:06,960
find other people who are doing

00:51:05,680 --> 00:51:09,119
something similar

00:51:06,960 --> 00:51:10,559
why not just post a question in the the

00:51:09,119 --> 00:51:12,559
graphql channel

00:51:10,559 --> 00:51:13,680
gather a group of people and then once

00:51:12,559 --> 00:51:15,760
you have your group

00:51:13,680 --> 00:51:17,200
you'll need to choose a moderator

00:51:15,760 --> 00:51:19,599
because each room will be

00:51:17,200 --> 00:51:22,160
required to have a moderator responsible

00:51:19,599 --> 00:51:24,319
for following the code of conduct

00:51:22,160 --> 00:51:25,599
finally you can visit our sponsors that

00:51:24,319 --> 00:51:27,680
are actually going to have voice and

00:51:25,599 --> 00:51:31,040
video chat rooms open for the entire

00:51:27,680 --> 00:51:33,119
duration of the conference

00:51:31,040 --> 00:51:35,119
speaking of sponsors i would just like

00:51:33,119 --> 00:51:36,960
to give a big thank you to all of our

00:51:35,119 --> 00:51:38,000
sponsors supporting graphql summit

00:51:36,960 --> 00:51:40,079
worldwide

00:51:38,000 --> 00:51:41,440
this event wouldn't be possible without

00:51:40,079 --> 00:51:44,160
you

00:51:41,440 --> 00:51:46,400
all of these companies apollo contentful

00:51:44,160 --> 00:51:47,359
fauna formidable labs hasura and

00:51:46,400 --> 00:51:49,040
stackhawk

00:51:47,359 --> 00:51:51,280
they all have dedicated rooms and

00:51:49,040 --> 00:51:52,960
discord where you can chat with graphql

00:51:51,280 --> 00:51:54,800
experts at these companies

00:51:52,960 --> 00:51:56,559
and all of these companies are building

00:51:54,800 --> 00:52:00,480
really cool stuff with graphql

00:51:56,559 --> 00:52:00,480
so you should definitely stop by

00:52:00,720 --> 00:52:04,559
that's all i've got if you have any

00:52:02,720 --> 00:52:07,280
questions throughout the event please

00:52:04,559 --> 00:52:09,119
ping us on discord at summit organizers

00:52:07,280 --> 00:52:12,810
and we'll be happy to help

00:52:09,119 --> 00:52:16,179
enjoy the show and i'll see you all on

00:52:12,810 --> 00:52:16,179
[Music]

00:52:16,839 --> 00:52:19,839
discord

00:52:21,680 --> 00:52:23,760

YouTube URL: https://www.youtube.com/watch?v=ImudUVWINXo


