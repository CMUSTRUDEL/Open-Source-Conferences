Title: From Vuex to Apollo state management (NATALIA TEPLUHINA Senior Frontend Engineer at GitLab)
Publication date: 2019-11-03
Playlist: GraphQL Summit 2019
Description: 
	Do you need an external local state management if you decide to use GraphQL with Apollo Client? Let's see how we're moving from Vuex to Apollo state management at GitLab.

Resources:
Learn more about Summit - https://summit.graphql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Learn GraphQL using Apollo's Tutorials: https://odyssey.apollographql.com/
Captions: 
	00:00:01,530 --> 00:00:07,419
yes this is one more local state

00:00:05,049 --> 00:00:10,420
management talk because we already had a

00:00:07,419 --> 00:00:13,420
few of them but this is kind of

00:00:10,420 --> 00:00:17,110
different because previous talk were

00:00:13,420 --> 00:00:20,140
touching react mostly and as Matt

00:00:17,110 --> 00:00:23,440
already mentioned in the keynote Apollo

00:00:20,140 --> 00:00:25,750
in and react I like peanut butter and

00:00:23,440 --> 00:00:29,380
jelly right they're going together

00:00:25,750 --> 00:00:33,010
really really well please raise your

00:00:29,380 --> 00:00:34,719
hand if you are using reactor yes it's

00:00:33,010 --> 00:00:37,989
like it's definitely and main string

00:00:34,719 --> 00:00:41,050
here but what if you're outside of

00:00:37,989 --> 00:00:47,949
mainstream will everything work smoothly

00:00:41,050 --> 00:00:49,659
or no so what if you are using view can

00:00:47,949 --> 00:00:54,249
you manage your local application state

00:00:49,659 --> 00:00:57,489
with Paulo let's see and I have a huge

00:00:54,249 --> 00:01:00,280
chance to heavily fail right now but

00:00:57,489 --> 00:01:05,950
please raise your hand if you're using

00:01:00,280 --> 00:01:08,050
view wow that's actually great I didn't

00:01:05,950 --> 00:01:10,930
expect this like sending my love to all

00:01:08,050 --> 00:01:12,460
of you yes Becky already said I'm a

00:01:10,930 --> 00:01:14,590
Google developer expert in web

00:01:12,460 --> 00:01:18,280
technologists i'm UGS core team member

00:01:14,590 --> 00:01:20,230
karen mostly about vo documentation but

00:01:18,280 --> 00:01:23,050
i really like to contribute to ecosystem

00:01:20,230 --> 00:01:25,360
as well so I'm contributing to view a

00:01:23,050 --> 00:01:27,370
polar right in documentation about local

00:01:25,360 --> 00:01:29,560
state so now you know who to blame if

00:01:27,370 --> 00:01:33,160
you read local state documentation for

00:01:29,560 --> 00:01:35,140
view Apollo library and develop I'm the

00:01:33,160 --> 00:01:37,600
one of the early adopters of our

00:01:35,140 --> 00:01:40,890
graphical API and Apollo state

00:01:37,600 --> 00:01:43,930
management as a replacement of Buicks

00:01:40,890 --> 00:01:47,200
before I start diving into how we do

00:01:43,930 --> 00:01:49,960
this replacement let's take a look at

00:01:47,200 --> 00:01:52,330
the architecture of gitlab itself it's a

00:01:49,960 --> 00:01:55,440
key to understand like why apollo client

00:01:52,330 --> 00:01:57,970
is a great option for us under the hood

00:01:55,440 --> 00:02:00,910
the club is just a Ruby on Rails

00:01:57,970 --> 00:02:05,110
application and it's server-side

00:02:00,910 --> 00:02:08,679
rendered surprisingly we are having HTML

00:02:05,110 --> 00:02:10,179
files from our back-end and on top of

00:02:08,679 --> 00:02:13,209
these HTML files

00:02:10,179 --> 00:02:17,409
we're bootstrapping view application

00:02:13,209 --> 00:02:18,400
not a single application this is typical

00:02:17,409 --> 00:02:21,370
get webpage

00:02:18,400 --> 00:02:24,310
this is virtue quest and guess how many

00:02:21,370 --> 00:02:34,750
view applications do we have here I can

00:02:24,310 --> 00:02:37,750
drop a number any guesses 17 not of them

00:02:34,750 --> 00:02:39,579
are visible right here because some of

00:02:37,750 --> 00:02:43,120
them are hidden behind the sidebar

00:02:39,579 --> 00:02:46,090
behind nav bar but in fact there are 17

00:02:43,120 --> 00:02:48,510
view applications some of them are very

00:02:46,090 --> 00:02:51,190
small as you can see on the sidebar and

00:02:48,510 --> 00:02:53,500
they even don't have a local state

00:02:51,190 --> 00:02:56,859
management library because they don't

00:02:53,500 --> 00:02:57,370
need it some of them are kind of middle

00:02:56,859 --> 00:03:00,489
sized

00:02:57,370 --> 00:03:03,150
as you can see on the top it's a merger

00:03:00,489 --> 00:03:08,440
quest widget it has a New York State as

00:03:03,150 --> 00:03:11,230
well as discussions and for those of you

00:03:08,440 --> 00:03:12,069
who never used Buicks and here from

00:03:11,230 --> 00:03:15,849
react world

00:03:12,069 --> 00:03:19,379
I made the angular 1 Bewkes is a state

00:03:15,849 --> 00:03:22,510
management library for view framework

00:03:19,379 --> 00:03:26,440
it's pretty much similar to redux with

00:03:22,510 --> 00:03:28,930
one important difference we use mutable

00:03:26,440 --> 00:03:33,099
ideas like we don't follow a mutability

00:03:28,930 --> 00:03:35,319
pattern but if we consider how it works

00:03:33,099 --> 00:03:38,250
we have a component dispatching and

00:03:35,319 --> 00:03:40,209
action action triggers mutations

00:03:38,250 --> 00:03:41,940
invitation change the state and it's

00:03:40,209 --> 00:03:46,840
rendered to components

00:03:41,940 --> 00:03:50,739
looks pretty good right this is typical

00:03:46,840 --> 00:03:53,769
local state of the view application and

00:03:50,739 --> 00:03:57,280
give lab this is discussions like not

00:03:53,769 --> 00:04:00,900
the big middle sized states and guess

00:03:57,280 --> 00:04:02,470
what part of it is fetched from the API

00:04:00,900 --> 00:04:04,959
almost a half

00:04:02,470 --> 00:04:08,220
we're just fetching this data from the

00:04:04,959 --> 00:04:10,959
API and updating our view X store and

00:04:08,220 --> 00:04:14,349
also we have this small chunk of

00:04:10,959 --> 00:04:16,449
properties these properties are injected

00:04:14,349 --> 00:04:18,970
to the application from the beginning

00:04:16,449 --> 00:04:21,669
because you remember we have a

00:04:18,970 --> 00:04:24,969
server-side rendered page and we have

00:04:21,669 --> 00:04:26,200
data attributes at our HTML elements

00:04:24,969 --> 00:04:29,260
injecting to the

00:04:26,200 --> 00:04:34,510
view instance when this view instance is

00:04:29,260 --> 00:04:37,510
bootstrapped okay let's see on this

00:04:34,510 --> 00:04:39,720
schema how our Buick store is behaving

00:04:37,510 --> 00:04:42,490
when we are fetching data from the API

00:04:39,720 --> 00:04:43,600
so imagine we clicked on the button and

00:04:42,490 --> 00:04:47,980
we're dispatching

00:04:43,600 --> 00:04:49,180
an action this action is triggering a

00:04:47,980 --> 00:04:52,570
REST API call

00:04:49,180 --> 00:04:55,540
previously before graph Cal and probably

00:04:52,570 --> 00:04:58,150
somewhere here we need to set is loading

00:04:55,540 --> 00:05:02,140
flag to true because we need also to see

00:04:58,150 --> 00:05:04,870
if something is loading if REST API call

00:05:02,140 --> 00:05:08,860
was successful we are triggering success

00:05:04,870 --> 00:05:12,640
mutation and this success mutation is

00:05:08,860 --> 00:05:15,720
changing state if it's not successful we

00:05:12,640 --> 00:05:18,910
still need to trigger our mutation and

00:05:15,720 --> 00:05:21,460
only after this the state is changed and

00:05:18,910 --> 00:05:24,120
we are set in loading to false we are

00:05:21,460 --> 00:05:28,150
setting like data or error here and

00:05:24,120 --> 00:05:29,790
everything is fine right but if we think

00:05:28,150 --> 00:05:34,180
about it for a second

00:05:29,790 --> 00:05:38,590
isn't this a huge boilerplate just to

00:05:34,180 --> 00:05:42,940
fetch data from the API and change your

00:05:38,590 --> 00:05:45,940
component accordingly well I'm a vehicle

00:05:42,940 --> 00:05:48,670
team member right so I should be

00:05:45,940 --> 00:05:52,450
praising Buicks and also with the REST

00:05:48,670 --> 00:05:56,380
API there were no alternative so this is

00:05:52,450 --> 00:05:59,350
fine this is just good it works well it

00:05:56,380 --> 00:06:02,830
worked previously but at the beginning

00:05:59,350 --> 00:06:06,130
of this year we decided at github that

00:06:02,830 --> 00:06:09,040
we are going to make graph kill our main

00:06:06,130 --> 00:06:12,610
direction and guess who is the traitor

00:06:09,040 --> 00:06:15,400
in the vehicle team I created an issue

00:06:12,610 --> 00:06:18,220
almost immediately because we needed to

00:06:15,400 --> 00:06:22,990
decide how we are going to handle our

00:06:18,220 --> 00:06:25,480
local state because I had a feeling that

00:06:22,990 --> 00:06:29,140
the uke's could be an overkill in this

00:06:25,480 --> 00:06:31,090
case it was a moment when we didn't even

00:06:29,140 --> 00:06:33,820
have local state management in a Polock

00:06:31,090 --> 00:06:37,570
or we were using library Apollo Linux

00:06:33,820 --> 00:06:39,849
State and of course this created a huge

00:06:37,570 --> 00:06:43,479
discussion with 100 plus

00:06:39,849 --> 00:06:45,849
commands because people are conservative

00:06:43,479 --> 00:06:51,819
nobody wants to learn something you just

00:06:45,849 --> 00:06:56,289
because Buicks works so first step is

00:06:51,819 --> 00:07:00,159
easy handling API responses let's see

00:06:56,289 --> 00:07:02,229
how we work with external state it will

00:07:00,159 --> 00:07:04,949
use Apollo it's surprisingly

00:07:02,229 --> 00:07:09,039
straightforward we are sending the query

00:07:04,949 --> 00:07:10,949
we have a success or error and we're

00:07:09,039 --> 00:07:14,800
changing our state and this green

00:07:10,949 --> 00:07:18,389
highlight means you don't need to care

00:07:14,800 --> 00:07:21,879
about this if it's just a simple query

00:07:18,389 --> 00:07:23,979
you have a response your state is change

00:07:21,879 --> 00:07:28,330
state is Apollo cash in this case

00:07:23,979 --> 00:07:31,899
and your component is rendered nice

00:07:28,330 --> 00:07:35,379
what about mutation what if I need to

00:07:31,899 --> 00:07:37,599
change something it's not that hard

00:07:35,379 --> 00:07:39,909
right you're triggering limitation you

00:07:37,599 --> 00:07:42,639
have a success and error and the only

00:07:39,909 --> 00:07:47,409
additional thing is you need to update

00:07:42,639 --> 00:07:49,689
cash and status change it again but this

00:07:47,409 --> 00:07:53,829
is about API responses what's about

00:07:49,689 --> 00:07:57,930
local properties local state in this

00:07:53,829 --> 00:08:00,279
case is Apollo cash again well

00:07:57,930 --> 00:08:02,589
everything is Apollo cash in this case

00:08:00,279 --> 00:08:04,809
and I really like this idea because one

00:08:02,589 --> 00:08:07,569
of the points in discussion like should

00:08:04,809 --> 00:08:09,759
we used buicks with a follow maybe let's

00:08:07,569 --> 00:08:14,769
stay with an old pattern maybe it's good

00:08:09,759 --> 00:08:18,699
enough what we will have two sources of

00:08:14,769 --> 00:08:20,409
truth and this is unacceptable if you're

00:08:18,699 --> 00:08:24,129
working with an application and you want

00:08:20,409 --> 00:08:26,800
to have a clear and nice architecture so

00:08:24,129 --> 00:08:29,800
we decided to go with a single source of

00:08:26,800 --> 00:08:34,120
truth and we decide to rely on Apollo

00:08:29,800 --> 00:08:36,689
cash so first step is you remember we

00:08:34,120 --> 00:08:39,909
need to set our initial local state

00:08:36,689 --> 00:08:44,169
because we have some properties from our

00:08:39,909 --> 00:08:46,569
HTML file and this is an actual code

00:08:44,169 --> 00:08:48,880
from github like this is not an example

00:08:46,569 --> 00:08:52,090
I just copy pasted it so you can see

00:08:48,880 --> 00:08:56,140
we're using this get element by ID

00:08:52,090 --> 00:08:58,360
and we're just injecting these

00:08:56,140 --> 00:09:00,520
properties to the local state and yeah

00:08:58,360 --> 00:09:01,920
we have the cipolla provider clients

00:09:00,520 --> 00:09:03,730
default coin because we're using

00:09:01,920 --> 00:09:07,480
separate clients for different

00:09:03,730 --> 00:09:10,600
applications this is really simple now

00:09:07,480 --> 00:09:15,310
we need to somehow map the state to our

00:09:10,600 --> 00:09:17,800
components how we are doing this the

00:09:15,310 --> 00:09:21,460
best way like you don't need to explain

00:09:17,800 --> 00:09:26,620
something for handling a local state

00:09:21,460 --> 00:09:28,810
outside of like simple Apollo query so

00:09:26,620 --> 00:09:31,960
this is a normal query like we should

00:09:28,810 --> 00:09:34,420
fetch this from our API and this is a

00:09:31,960 --> 00:09:37,560
local query we're just doing the same in

00:09:34,420 --> 00:09:43,240
the component where do we do need our

00:09:37,560 --> 00:09:47,370
local state if we have a look on the

00:09:43,240 --> 00:09:49,950
number of lines mapping local queries in

00:09:47,370 --> 00:09:53,110
components is not that big

00:09:49,950 --> 00:09:56,860
it could be compared with a view X map

00:09:53,110 --> 00:09:58,540
state helper and this is really simple

00:09:56,860 --> 00:10:01,210
okay

00:09:58,540 --> 00:10:04,210
this is nice next question raised in the

00:10:01,210 --> 00:10:06,300
issue was really tricky for me and nine

00:10:04,210 --> 00:10:11,110
months ago I didn't know an answer

00:10:06,300 --> 00:10:14,770
what about Buicks getters because Buicks

00:10:11,110 --> 00:10:17,830
has an amazing feature named getter if

00:10:14,770 --> 00:10:19,900
you have data in your state and you want

00:10:17,830 --> 00:10:21,910
to have them in your component but

00:10:19,900 --> 00:10:26,050
changed if you need some kind of

00:10:21,910 --> 00:10:29,380
transformation on your data you're going

00:10:26,050 --> 00:10:31,720
to use a view scatter this is so called

00:10:29,380 --> 00:10:34,600
functional style keys style Gettier

00:10:31,720 --> 00:10:38,470
where i just want to select a single

00:10:34,600 --> 00:10:42,760
design from the list of designs look

00:10:38,470 --> 00:10:46,860
simple and now imagine that I need to do

00:10:42,760 --> 00:10:46,860
the same with Apollo

00:10:46,960 --> 00:10:55,029
it's still simple I'm creating a local

00:10:50,920 --> 00:10:57,430
query back I named it get designed this

00:10:55,029 --> 00:11:00,460
query doesn't exist in my graph QL

00:10:57,430 --> 00:11:03,430
schema on the server but I can add it to

00:11:00,460 --> 00:11:08,350
my local schema and I'm just patching

00:11:03,430 --> 00:11:11,920
designer from the list of designs how do

00:11:08,350 --> 00:11:16,149
I do this because I will need one more

00:11:11,920 --> 00:11:19,120
thing it's a resolver and yes this

00:11:16,149 --> 00:11:22,360
resolver is pretty verbose as you can

00:11:19,120 --> 00:11:24,910
see but if you read it it's not that

00:11:22,360 --> 00:11:27,640
hard to understand so we are just taking

00:11:24,910 --> 00:11:30,520
our project query and then we're

00:11:27,640 --> 00:11:34,089
selecting the single design and please

00:11:30,520 --> 00:11:36,520
never ever name your schema fields like

00:11:34,089 --> 00:11:38,890
this if you read this data project issue

00:11:36,520 --> 00:11:39,660
designs designs and no this is not a

00:11:38,890 --> 00:11:43,060
typo

00:11:39,660 --> 00:11:46,060
if actually ever began developers naming

00:11:43,060 --> 00:11:48,760
designs I have no idea why it's like

00:11:46,060 --> 00:11:54,190
this I believe we have an issue to fix

00:11:48,760 --> 00:11:57,220
it but maybe like in next year still

00:11:54,190 --> 00:11:59,529
we're just using a simple Java Script

00:11:57,220 --> 00:12:05,050
and we're doing the same way just

00:11:59,529 --> 00:12:08,290
finding a design by ID and we have this

00:12:05,050 --> 00:12:11,410
local query so we can use it in our

00:12:08,290 --> 00:12:13,570
component instead of getter that's this

00:12:11,410 --> 00:12:15,670
way we are getting the data we need even

00:12:13,570 --> 00:12:18,940
if we don't have this query and server

00:12:15,670 --> 00:12:21,940
also this is a great moment where you

00:12:18,940 --> 00:12:24,100
can mock your data and create your local

00:12:21,940 --> 00:12:28,390
query and resolver even if you don't

00:12:24,100 --> 00:12:31,860
have them in your graphical API if you

00:12:28,390 --> 00:12:34,450
have a huge enterprise product sometimes

00:12:31,860 --> 00:12:37,360
things that happening on the back end

00:12:34,450 --> 00:12:39,100
could take a lot of time especially if

00:12:37,360 --> 00:12:41,140
back-end is complicated and if it

00:12:39,100 --> 00:12:44,680
touches git which is complicated by

00:12:41,140 --> 00:12:49,029
itself so imagine I need to select a

00:12:44,680 --> 00:12:51,700
design by ID and I'm speaking with our

00:12:49,029 --> 00:12:54,339
back-end developers like hey guys can I

00:12:51,700 --> 00:12:57,370
have this query of fields or whatever

00:12:54,339 --> 00:12:58,880
can I select a design by ID and usually

00:12:57,370 --> 00:13:01,009
what answer do I have

00:12:58,880 --> 00:13:03,709
yes sure in maybe three different

00:13:01,009 --> 00:13:06,920
Springs maybe next year

00:13:03,709 --> 00:13:08,810
because we're on capacity but I'm a

00:13:06,920 --> 00:13:13,670
front-end engineer and I still need to

00:13:08,810 --> 00:13:17,630
build my stuff right so we invented a

00:13:13,670 --> 00:13:20,420
way of mocking data to local State on

00:13:17,630 --> 00:13:24,410
application mount and writing our own

00:13:20,420 --> 00:13:27,550
queries with the resolvers to fetch this

00:13:24,410 --> 00:13:29,870
data from the local state why it's good

00:13:27,550 --> 00:13:32,060
first of all you can share this code

00:13:29,870 --> 00:13:34,940
with your back-end developers and they

00:13:32,060 --> 00:13:40,100
will add it to schema accordingly with

00:13:34,940 --> 00:13:41,990
your resolver why it's good for you like

00:13:40,100 --> 00:13:43,970
maybe if you're good enough you can

00:13:41,990 --> 00:13:46,190
write these resolvers on back-end as

00:13:43,970 --> 00:13:49,880
well because I did this like I was

00:13:46,190 --> 00:13:53,240
really tired with not having design so I

00:13:49,880 --> 00:13:57,769
wrote a resolver and Ruby never again so

00:13:53,240 --> 00:14:00,889
it will be developers okay what about

00:13:57,769 --> 00:14:03,699
change in local state so far we are only

00:14:00,889 --> 00:14:07,149
querying so we considered mapping state

00:14:03,699 --> 00:14:11,959
mapping gathers from views

00:14:07,149 --> 00:14:14,240
what about actions and mutations and if

00:14:11,959 --> 00:14:16,550
you wonder what the difference in views

00:14:14,240 --> 00:14:19,430
between action and mutation action could

00:14:16,550 --> 00:14:20,779
perform asynchronous logic mutation

00:14:19,430 --> 00:14:21,589
changed the state and they're always

00:14:20,779 --> 00:14:25,130
synchronous

00:14:21,589 --> 00:14:28,250
so this is a simple example we just

00:14:25,130 --> 00:14:31,310
having an action that calls a mutation

00:14:28,250 --> 00:14:33,079
nothing more no logic about this see

00:14:31,310 --> 00:14:35,170
this is boilerplate you have an action

00:14:33,079 --> 00:14:39,490
just to trigger a mutation because

00:14:35,170 --> 00:14:43,040
conventions and mutation is just

00:14:39,490 --> 00:14:46,670
changing one property in the state to

00:14:43,040 --> 00:14:50,420
the past payload how do we do this in

00:14:46,670 --> 00:14:53,209
Apollo as you can see there are not that

00:14:50,420 --> 00:14:56,709
many lines of code added we are creating

00:14:53,209 --> 00:15:00,259
a local mutation and we are passing

00:14:56,709 --> 00:15:02,930
invisible boolean to it and we have a

00:15:00,259 --> 00:15:06,139
resolver below it so it's like checking

00:15:02,930 --> 00:15:08,899
an item looking lipids we are reading

00:15:06,139 --> 00:15:10,670
the query we are changing the data and

00:15:08,899 --> 00:15:15,660
writing it back

00:15:10,670 --> 00:15:19,140
everything looks amazing let's like take

00:15:15,660 --> 00:15:22,680
a small look of how it works in Buicks

00:15:19,140 --> 00:15:26,580
and how does it work with Apollo so

00:15:22,680 --> 00:15:28,920
mapping state is local query if you need

00:15:26,580 --> 00:15:32,060
getters it's a bit more complicated

00:15:28,920 --> 00:15:35,850
because you're adding resolver to it and

00:15:32,060 --> 00:15:40,350
with actions and mutations you have a

00:15:35,850 --> 00:15:45,240
local mutation and the result now the

00:15:40,350 --> 00:15:47,310
bad part comes now I'm traitor not only

00:15:45,240 --> 00:15:51,570
for vehicle team but also for police are

00:15:47,310 --> 00:15:55,050
appendage first of all as you can see if

00:15:51,570 --> 00:15:58,410
you have complicated schema the local

00:15:55,050 --> 00:16:00,420
resolver could be really verbose because

00:15:58,410 --> 00:16:02,700
you need to understand properly what

00:16:00,420 --> 00:16:04,680
query you are going to read what you're

00:16:02,700 --> 00:16:07,339
going to change and what you need to

00:16:04,680 --> 00:16:10,560
write that you can see comparing to the

00:16:07,339 --> 00:16:16,640
getter which is pure JavaScript logic as

00:16:10,560 --> 00:16:21,150
well the polar resolver was a bit bigger

00:16:16,640 --> 00:16:23,700
second ones like test coverage this is a

00:16:21,150 --> 00:16:25,560
really pain point I'm going to cover it

00:16:23,700 --> 00:16:28,589
more in my second talk because I have a

00:16:25,560 --> 00:16:30,810
second talk today at 2:30 like I'm

00:16:28,589 --> 00:16:36,570
living on the edge like yeah two dogs

00:16:30,810 --> 00:16:40,230
who could resist and but this is not an

00:16:36,570 --> 00:16:42,650
issue of Apollo itself unfortunately

00:16:40,230 --> 00:16:45,089
it's an issue more of VO community

00:16:42,650 --> 00:16:47,910
because if we consider react

00:16:45,089 --> 00:16:50,100
it has react testing library with multi

00:16:47,910 --> 00:16:52,770
provider that covers testing Apollo

00:16:50,100 --> 00:16:54,660
pretty boot but for view unfortunately

00:16:52,770 --> 00:16:59,550
we don't have it so we still need to

00:16:54,660 --> 00:17:04,220
write it lack of best practices it was a

00:16:59,550 --> 00:17:07,410
pain point to because not that many

00:17:04,220 --> 00:17:11,280
people are using Paulo state management

00:17:07,410 --> 00:17:13,829
in production so far that's why when you

00:17:11,280 --> 00:17:16,589
try to use it be ready that you will

00:17:13,829 --> 00:17:20,160
rain when some wheels write some hacks

00:17:16,589 --> 00:17:22,950
and sometimes you have no idea what

00:17:20,160 --> 00:17:25,770
you're actually doing this is normal

00:17:22,950 --> 00:17:29,280
it's because we have a really young

00:17:25,770 --> 00:17:31,650
technology but very promising one still

00:17:29,280 --> 00:17:35,070
be ready like if you have you will have

00:17:31,650 --> 00:17:38,880
more documentation about it and yeah the

00:17:35,070 --> 00:17:41,250
last one which is again not a point

00:17:38,880 --> 00:17:44,250
about Apollo itself but mostly about

00:17:41,250 --> 00:17:47,700
people being really conservative because

00:17:44,250 --> 00:17:50,670
even if you're going to migrate some

00:17:47,700 --> 00:17:52,440
amazing technology people will say we

00:17:50,670 --> 00:17:55,440
love Island our boiler plate please

00:17:52,440 --> 00:17:57,330
don't touch it like we love yous I want

00:17:55,440 --> 00:18:01,110
to write more strings of code please

00:17:57,330 --> 00:18:05,120
stop I don't want to learn it again this

00:18:01,110 --> 00:18:07,860
is normal and people are used to it and

00:18:05,120 --> 00:18:09,870
this is actually everything I wanted to

00:18:07,860 --> 00:18:12,160
say about migrating views to apollo

00:18:09,870 --> 00:18:17,079
client thank you

00:18:12,160 --> 00:18:17,079

YouTube URL: https://www.youtube.com/watch?v=9knwu87IfU8


