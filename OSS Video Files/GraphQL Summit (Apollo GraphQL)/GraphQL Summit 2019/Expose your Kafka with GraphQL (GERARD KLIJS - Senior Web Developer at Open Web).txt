Title: Expose your Kafka with GraphQL (GERARD KLIJS - Senior Web Developer at Open Web)
Publication date: 2019-11-02
Playlist: GraphQL Summit 2019
Description: 
	I will demo and show some code how especially GraphQL subscriptions can be used with Kafka to create reactive applications. I will also give some pointers what you might run into when running in production.

Resources:
Learn more about Summit - https://summit.graphql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Learn GraphQL using Apollo's Tutorials: https://odyssey.apollographql.com/
Captions: 
	00:00:01,020 --> 00:00:08,309
so Anita will talk about Kafka and how

00:00:04,529 --> 00:00:09,870
to integrate it with graphical - yeah

00:00:08,309 --> 00:00:11,459
basically send defense from the backend

00:00:09,870 --> 00:00:14,879
straight to the front end using

00:00:11,459 --> 00:00:17,460
subscriptions so first bit about me I

00:00:14,879 --> 00:00:20,189
worked with open web for three years

00:00:17,460 --> 00:00:22,769
it's a consultancy company so most of

00:00:20,189 --> 00:00:27,869
the time I'm working as a contractor

00:00:22,769 --> 00:00:30,599
with different companies these last few

00:00:27,869 --> 00:00:32,940
months was a bit Peconic they have like

00:00:30,599 --> 00:00:34,380
payment apps where you scan QR codes and

00:00:32,940 --> 00:00:35,970
I can make payments and you can also

00:00:34,380 --> 00:00:39,570
make payments through friends and stuff

00:00:35,970 --> 00:00:42,240
like that and then I'm the work I'm

00:00:39,570 --> 00:00:45,740
doing is most of the time it's back-end

00:00:42,240 --> 00:00:49,140
services that are relying a lot on Kafka

00:00:45,740 --> 00:00:51,740
yeah most of the time during my

00:00:49,140 --> 00:00:56,610
professional career it was all about

00:00:51,740 --> 00:00:58,890
Java like four years ago I started with

00:00:56,610 --> 00:01:01,080
with a bank with a Kafka implementation

00:00:58,890 --> 00:01:04,110
and I really lies how Kafka works and

00:01:01,080 --> 00:01:07,920
there are API our customizable

00:01:04,110 --> 00:01:09,299
everything is I learned about graphical

00:01:07,920 --> 00:01:11,460
well I think earlier but I start

00:01:09,299 --> 00:01:14,340
experimenting with graphical 1/2 years

00:01:11,460 --> 00:01:16,950
ago I still haven't used in production I

00:01:14,340 --> 00:01:19,350
really want to but yeah so just a quick

00:01:16,950 --> 00:01:21,350
question how many people here are using

00:01:19,350 --> 00:01:24,240
Raph girl

00:01:21,350 --> 00:01:27,689
yeah so it's about half like they said

00:01:24,240 --> 00:01:32,429
in the keynote how many people know

00:01:27,689 --> 00:01:34,740
Kafka guys this is even more and how

00:01:32,429 --> 00:01:38,520
many people are like really a force with

00:01:34,740 --> 00:01:42,960
doing stuff with Kafka so that's just

00:01:38,520 --> 00:01:45,060
one so that's I will go quickly to Kafka

00:01:42,960 --> 00:01:47,369
goes like of guys like really big and

00:01:45,060 --> 00:01:49,530
this has been a wholesome it's about

00:01:47,369 --> 00:01:51,270
Kafka just a month ago also in San

00:01:49,530 --> 00:01:53,219
Francisco and all the presentation

00:01:51,270 --> 00:01:58,109
online so if you are really interested

00:01:53,219 --> 00:02:00,569
in Kafka they you can view them and then

00:01:58,109 --> 00:02:02,340
there's also closure it alert about like

00:02:00,569 --> 00:02:04,799
three half years ago and a lot of my

00:02:02,340 --> 00:02:06,990
passion projects I really like closure

00:02:04,799 --> 00:02:12,150
and so I do them with closure and

00:02:06,990 --> 00:02:14,150
closure script like I said I also have

00:02:12,150 --> 00:02:17,390
like this worst library and also basic

00:02:14,150 --> 00:02:19,849
worst and there's also somebody missing

00:02:17,390 --> 00:02:22,610
with making some kind of a dynamic proxy

00:02:19,849 --> 00:02:24,799
with wrists specific for graph QL where

00:02:22,610 --> 00:02:26,569
you can also for example put it on your

00:02:24,799 --> 00:02:29,620
authentication and let us go to

00:02:26,569 --> 00:02:36,349
different end points based on the out

00:02:29,620 --> 00:02:39,140
indication too long on this slide so

00:02:36,349 --> 00:02:42,769
that's basically it so that's the

00:02:39,140 --> 00:02:45,650
overview so quickly to Kafka then I will

00:02:42,769 --> 00:02:49,220
show how the demo project I set up how

00:02:45,650 --> 00:02:51,590
it's the components of that I will talk

00:02:49,220 --> 00:02:53,299
about some graph ground interactions

00:02:51,590 --> 00:02:57,049
that are implemented then I will do a

00:02:53,299 --> 00:03:00,230
demo and after the demo I will also show

00:02:57,049 --> 00:03:04,430
some tests I've run what conclusions can

00:03:00,230 --> 00:03:07,159
be drawn out of that so why Kafka well

00:03:04,430 --> 00:03:08,629
like methods with the front and with

00:03:07,159 --> 00:03:10,579
lots of different back ends you

00:03:08,629 --> 00:03:13,010
basically also have something like this

00:03:10,579 --> 00:03:14,629
but in the back end you have the same

00:03:13,010 --> 00:03:16,849
thing with different back-end services

00:03:14,629 --> 00:03:19,129
only to talk to each other and if you

00:03:16,849 --> 00:03:21,290
have don't have a common language or a

00:03:19,129 --> 00:03:23,989
common place to put those things as

00:03:21,290 --> 00:03:26,480
quickly becomes a mess so if you put

00:03:23,989 --> 00:03:28,760
like Kafka in the middle then a lot of

00:03:26,480 --> 00:03:31,879
those things become much easier and

00:03:28,760 --> 00:03:34,909
decoupled and it's also nice that in the

00:03:31,879 --> 00:03:39,650
case of Kafka it's much like a message

00:03:34,909 --> 00:03:41,989
bus so it's also asynchronous so one of

00:03:39,650 --> 00:03:44,720
the parties can just put our data on

00:03:41,989 --> 00:03:48,290
Kafka and then everybody can take the

00:03:44,720 --> 00:03:50,599
data from it at our own ease or when

00:03:48,290 --> 00:03:52,430
they want to so also if you have come

00:03:50,599 --> 00:03:56,060
some kind of process that has been down

00:03:52,430 --> 00:03:57,709
for a half an hour or something you can

00:03:56,060 --> 00:03:59,599
just reconnect to Kafka and just

00:03:57,709 --> 00:04:01,940
continue where it was left off and Kafka

00:03:59,599 --> 00:04:05,090
is just managing where it was left of

00:04:01,940 --> 00:04:07,760
stuff like that only

00:04:05,090 --> 00:04:10,519
there is something to use rest of it

00:04:07,760 --> 00:04:12,769
Kafka which isn't not working that nice

00:04:10,519 --> 00:04:14,690
but for graft well there isn't really

00:04:12,769 --> 00:04:17,510
one there are well some other

00:04:14,690 --> 00:04:19,729
experiments like my own experiment but

00:04:17,510 --> 00:04:23,080
nothing out of the box so I thought

00:04:19,729 --> 00:04:27,870
that's interesting to compare those two

00:04:23,080 --> 00:04:31,830
so a bit more about Kafka

00:04:27,870 --> 00:04:34,320
Kafka is working with topics and then

00:04:31,830 --> 00:04:37,380
it's topic have different partitions and

00:04:34,320 --> 00:04:40,110
that's one of the ways that I are able

00:04:37,380 --> 00:04:42,919
to really scale a lot so how it usually

00:04:40,110 --> 00:04:45,449
works that each message has a key and

00:04:42,919 --> 00:04:47,940
depending on the key it lands in one of

00:04:45,449 --> 00:04:50,280
the partitions so for example if you use

00:04:47,940 --> 00:04:53,490
the partitions if you use the username

00:04:50,280 --> 00:04:55,440
as key then every message that's for

00:04:53,490 --> 00:04:58,710
that user will go to the same partition

00:04:55,440 --> 00:05:02,940
and this way you can scale out but still

00:04:58,710 --> 00:05:04,650
for that user the order is the same so

00:05:02,940 --> 00:05:06,870
that's nice

00:05:04,650 --> 00:05:08,729
what's also nice is Kafka is that the

00:05:06,870 --> 00:05:11,280
producers and the consumers are

00:05:08,729 --> 00:05:13,800
decoupled so the producer can just write

00:05:11,280 --> 00:05:16,050
to Kafka it gets from Kafka back that

00:05:13,800 --> 00:05:18,930
it's successfully written to Kafka or

00:05:16,050 --> 00:05:21,419
not and if not then it can retry and the

00:05:18,930 --> 00:05:23,820
consumers can just go the wrong way

00:05:21,419 --> 00:05:29,100
connect to Kafka find out where are the

00:05:23,820 --> 00:05:31,470
partitions and get them so for now for

00:05:29,100 --> 00:05:35,669
Microsoft it's like a load in terms it's

00:05:31,470 --> 00:05:39,180
difficult to use it but in this case

00:05:35,669 --> 00:05:41,610
because we use Kafka or main source of

00:05:39,180 --> 00:05:44,130
truths as a kind of offense so basically

00:05:41,610 --> 00:05:46,160
everything is either consuming from

00:05:44,130 --> 00:05:49,349
Kafka or producing to Kafka or world

00:05:46,160 --> 00:05:53,400
then most often there's some kind of

00:05:49,349 --> 00:05:55,950
derived database because Kafka is very

00:05:53,400 --> 00:05:59,490
good at streaming stuff but you can say

00:05:55,950 --> 00:06:01,889
let give me the latest event of user X

00:05:59,490 --> 00:06:03,690
or something like that that for a

00:06:01,889 --> 00:06:06,180
database is used in this case I use

00:06:03,690 --> 00:06:09,360
Postgres but it could also be some other

00:06:06,180 --> 00:06:10,979
kind of database and then mostly with my

00:06:09,360 --> 00:06:12,479
cursors there's something else and in

00:06:10,979 --> 00:06:16,470
this case of course is something else is

00:06:12,479 --> 00:06:20,220
great cool so enough of a few of the

00:06:16,470 --> 00:06:23,490
demo project so yeah there's it's a web

00:06:20,220 --> 00:06:24,900
application so the client retrieves all

00:06:23,490 --> 00:06:27,949
the information from the front end

00:06:24,900 --> 00:06:31,289
servers which is basically just

00:06:27,949 --> 00:06:36,210
index.html and so compels Java Script

00:06:31,289 --> 00:06:39,659
which in this case is by reframe so it's

00:06:36,210 --> 00:06:41,520
a closure script library and it's just

00:06:39,659 --> 00:06:44,849
catched Darin

00:06:41,520 --> 00:06:48,000
extractor and in the library there's an

00:06:44,849 --> 00:06:51,599
endpoint coffee or graph QL so that sets

00:06:48,000 --> 00:06:53,940
up WebSocket to consume from the

00:06:51,599 --> 00:06:55,710
graphical on point it also does a couple

00:06:53,940 --> 00:06:58,229
of more things but I get back to that

00:06:55,710 --> 00:07:00,180
then there's like the cough calculus or

00:06:58,229 --> 00:07:03,120
to share all the messages from the back

00:07:00,180 --> 00:07:05,550
end and there's a command handler that's

00:07:03,120 --> 00:07:08,699
handling the command so it's like a CQRS

00:07:05,550 --> 00:07:12,060
tell you once you have a subscription

00:07:08,699 --> 00:07:13,770
you put in your commands and eventually

00:07:12,060 --> 00:07:18,870
something's come back and that's then

00:07:13,770 --> 00:07:21,960
sent to the client there's just four

00:07:18,870 --> 00:07:23,729
topics for this demo project with all

00:07:21,960 --> 00:07:25,919
kinds of events so there's the commands

00:07:23,729 --> 00:07:28,889
topic where all the commands go and then

00:07:25,919 --> 00:07:31,110
you can it's a bank simulation so you

00:07:28,889 --> 00:07:32,880
first need to open an account and then

00:07:31,110 --> 00:07:36,240
once you have an account opens you can

00:07:32,880 --> 00:07:38,370
transfer money then there's the feedback

00:07:36,240 --> 00:07:40,889
from your account creation so it can

00:07:38,370 --> 00:07:43,860
either fail or succeed it can basically

00:07:40,889 --> 00:07:45,990
only fail when randomly generated

00:07:43,860 --> 00:07:48,570
account number is already existing so

00:07:45,990 --> 00:07:50,370
that chance is pretty loud or you can

00:07:48,570 --> 00:07:53,190
transfer money in and there's more cases

00:07:50,370 --> 00:07:56,370
when it can be filming because you can

00:07:53,190 --> 00:08:00,539
have not enough money on your account

00:07:56,370 --> 00:08:05,520
because by default you can have 500

00:08:00,539 --> 00:08:07,830
euros in depth and not more and then

00:08:05,520 --> 00:08:09,599
there's the balance changed that's like

00:08:07,830 --> 00:08:13,800
a derived offense

00:08:09,599 --> 00:08:16,440
so if the money transfer succeeds then

00:08:13,800 --> 00:08:18,900
if it's if it's an existing account

00:08:16,440 --> 00:08:21,210
within the system the net balance is

00:08:18,900 --> 00:08:24,330
changed and if the money whether the

00:08:21,210 --> 00:08:27,180
party bit of money is going to also

00:08:24,330 --> 00:08:30,719
exist in the system and that's also a

00:08:27,180 --> 00:08:33,630
balance change defense and all the feast

00:08:30,719 --> 00:08:36,000
of topics have a retention of main one

00:08:33,630 --> 00:08:37,950
that like the Kafka thing to say just

00:08:36,000 --> 00:08:39,419
never delete this topic and that kind of

00:08:37,950 --> 00:08:43,380
makes the different sourcing because

00:08:39,419 --> 00:08:45,149
then you can throw a whole the database

00:08:43,380 --> 00:08:51,480
and build it up again based on these

00:08:45,149 --> 00:08:54,540
events so for the graphical all parts

00:08:51,480 --> 00:08:55,230
I'm using the senior database that was

00:08:54,540 --> 00:08:58,080
the

00:08:55,230 --> 00:09:01,500
fell by Walmart Labs they also use it in

00:08:58,080 --> 00:09:06,330
production but I don't and I also always

00:09:01,500 --> 00:09:07,890
test it first input but they don't they

00:09:06,330 --> 00:09:12,120
don't actually use subscriptions

00:09:07,890 --> 00:09:14,100
themselves to the skies interesting and

00:09:12,120 --> 00:09:17,670
you can also see how it's built up so

00:09:14,100 --> 00:09:22,770
when requests comes in in a server then

00:09:17,670 --> 00:09:25,740
the Shema provider is kind of redirect

00:09:22,770 --> 00:09:27,960
to make two different resolvers and then

00:09:25,740 --> 00:09:31,640
those resources are separated into three

00:09:27,960 --> 00:09:34,560
surfaces that are like micro services

00:09:31,640 --> 00:09:38,670
and then some of the micro services have

00:09:34,560 --> 00:09:40,500
a database with the view of the data and

00:09:38,670 --> 00:09:42,810
there's also the management first of

00:09:40,500 --> 00:09:45,270
which that's more simple that's just

00:09:42,810 --> 00:09:49,320
putting the message due to Kafka and

00:09:45,270 --> 00:09:51,240
just wait until something comes back and

00:09:49,320 --> 00:09:53,670
I will show more about those different

00:09:51,240 --> 00:09:56,430
servers so one of the simplest things

00:09:53,670 --> 00:09:58,560
with such a system is that you're just

00:09:56,430 --> 00:09:59,340
building up your database and your

00:09:58,560 --> 00:10:01,800
queries

00:09:59,340 --> 00:10:04,190
no that's kind of like the same like you

00:10:01,800 --> 00:10:06,570
used to when it's a normal application

00:10:04,190 --> 00:10:09,630
only the only difference is that the

00:10:06,570 --> 00:10:13,080
database is created by a dash from Kafka

00:10:09,630 --> 00:10:18,630
and then immediately you can send back

00:10:13,080 --> 00:10:22,410
the current state so that's an overview

00:10:18,630 --> 00:10:26,660
of the transaction surface so the client

00:10:22,410 --> 00:10:30,510
will either do a query or subscribes to

00:10:26,660 --> 00:10:34,680
transactions then when it's a query then

00:10:30,510 --> 00:10:36,870
it's a query directly on the database

00:10:34,680 --> 00:10:39,240
and gets information back when it's the

00:10:36,870 --> 00:10:44,430
subscription then it will be handled by

00:10:39,240 --> 00:10:46,500
a WebSocket and on any incoming belma's

00:10:44,430 --> 00:10:48,660
change the event will be sent will be

00:10:46,500 --> 00:10:52,920
transferred to a transaction and then

00:10:48,660 --> 00:10:55,350
sent to the client then Nelson or those

00:10:52,920 --> 00:10:57,270
kind of subscription that's filtering a

00:10:55,350 --> 00:10:59,400
stream of offense this is can be used

00:10:57,270 --> 00:11:03,240
for like the drive defense when there's

00:10:59,400 --> 00:11:04,800
no clear trigger because especially with

00:11:03,240 --> 00:11:07,110
the money change defends it might be

00:11:04,800 --> 00:11:09,089
that you're getting money from someone

00:11:07,110 --> 00:11:11,099
else so then you're not the one that

00:11:09,089 --> 00:11:16,319
triggering but you still are interested

00:11:11,099 --> 00:11:19,199
in those events so what we can do is

00:11:16,319 --> 00:11:21,299
just listening to Kafka - all those

00:11:19,199 --> 00:11:23,969
events that are coming in which is

00:11:21,299 --> 00:11:26,159
basically like a hot stream and then

00:11:23,969 --> 00:11:28,739
filtering out some of those messages and

00:11:26,159 --> 00:11:30,749
then as it arrives from Kafka to the

00:11:28,739 --> 00:11:35,459
server by the WebSocket it's sent

00:11:30,749 --> 00:11:38,099
directly to the client and another kind

00:11:35,459 --> 00:11:40,259
of case is like I told like the command

00:11:38,099 --> 00:11:43,139
and then reaction so in this case it's

00:11:40,259 --> 00:11:44,849
either I open and I want to open an

00:11:43,139 --> 00:11:49,229
account and then you get back that

00:11:44,849 --> 00:11:51,119
account was opened or not by the the

00:11:49,229 --> 00:11:53,549
topic-specific for that feedback or I

00:11:51,119 --> 00:11:55,499
want to transfer money and then you get

00:11:53,549 --> 00:11:57,809
back whether it succeed or not and

00:11:55,499 --> 00:11:59,639
that's always one thing but you could

00:11:57,809 --> 00:12:02,129
for example also use this for something

00:11:59,639 --> 00:12:04,439
like I want to order food and then you

00:12:02,129 --> 00:12:07,259
get back payment was received

00:12:04,439 --> 00:12:09,329
we started through prayer the delivery

00:12:07,259 --> 00:12:11,579
is on the way something like that and

00:12:09,329 --> 00:12:14,069
maybe even afterwards can you know how

00:12:11,579 --> 00:12:16,229
did you like the meal after an hour like

00:12:14,069 --> 00:12:17,879
it was received something and then you

00:12:16,229 --> 00:12:21,779
can send all those messages to the

00:12:17,879 --> 00:12:23,699
client so this is how the subscription

00:12:21,779 --> 00:12:26,069
looks like so it's just sending the

00:12:23,699 --> 00:12:28,919
username and passwords it's important

00:12:26,069 --> 00:12:30,839
for the demo that's the actual password

00:12:28,919 --> 00:12:34,829
will be hashed and it will be sent to

00:12:30,839 --> 00:12:38,669
some servers but yeah so you can't put

00:12:34,829 --> 00:12:41,549
anything in there but and so when you

00:12:38,669 --> 00:12:43,889
trying to get an accounts you get back I

00:12:41,549 --> 00:12:47,719
can Eibon that's like an account number

00:12:43,889 --> 00:12:50,039
and a token and that's used to make just

00:12:47,719 --> 00:12:53,459
transfers so for example you can also

00:12:50,039 --> 00:12:55,799
have a ROM token and if you have a ROM

00:12:53,459 --> 00:12:58,859
token and also the money transfer will

00:12:55,799 --> 00:13:00,719
fail because you have one token but

00:12:58,859 --> 00:13:02,459
that's all handled by the command

00:13:00,719 --> 00:13:04,049
handler so it's not directly in a

00:13:02,459 --> 00:13:06,779
graphical and points to the craftwell

00:13:04,049 --> 00:13:10,319
endpoint just translates the input to a

00:13:06,779 --> 00:13:12,329
Kafka message and then the command

00:13:10,319 --> 00:13:15,029
handler will put some other kind of

00:13:12,329 --> 00:13:18,989
message onto Kafka and that's picked up

00:13:15,029 --> 00:13:22,540
again so this is how the account

00:13:18,989 --> 00:13:25,940
creation works

00:13:22,540 --> 00:13:30,470
yeah so like I said it first

00:13:25,940 --> 00:13:31,910
make a request to the description then

00:13:30,470 --> 00:13:33,860
it's checked by yeah it's also check

00:13:31,910 --> 00:13:35,390
whether the passwords are fine because

00:13:33,860 --> 00:13:37,130
currently they are sorting the graph to

00:13:35,390 --> 00:13:38,810
Allen point which might not be the best

00:13:37,130 --> 00:13:41,150
idea but that's how it's currently

00:13:38,810 --> 00:13:42,980
working so also when it's the wrong

00:13:41,150 --> 00:13:45,530
password you immediately get back and

00:13:42,980 --> 00:13:48,320
it's never going to Kafka and then it's

00:13:45,530 --> 00:13:50,690
making the request and then listening to

00:13:48,320 --> 00:13:52,430
responses and in this case also in the

00:13:50,690 --> 00:13:54,800
front end because it's now there will

00:13:52,430 --> 00:13:57,380
always be just one message as soon as

00:13:54,800 --> 00:14:01,310
that one message has arrived and it's

00:13:57,380 --> 00:14:04,550
canceling the subscription so this is

00:14:01,310 --> 00:14:08,090
the same thing in the Seekers diagram so

00:14:04,550 --> 00:14:10,070
you subscribe to the stream for creating

00:14:08,090 --> 00:14:11,510
accounts then in the transaction

00:14:10,070 --> 00:14:13,940
database that's in geographically end

00:14:11,510 --> 00:14:19,370
points it's creating an account with two

00:14:13,940 --> 00:14:21,740
random UUID this new ID is sent to

00:14:19,370 --> 00:14:24,440
create an account and also so that it

00:14:21,740 --> 00:14:26,180
can be matched to what's coming back so

00:14:24,440 --> 00:14:28,160
then from the commands handlers

00:14:26,180 --> 00:14:31,310
somewhere down and really like the

00:14:28,160 --> 00:14:33,320
account is created and that's then

00:14:31,310 --> 00:14:35,990
filtered on you you IDs are only there

00:14:33,320 --> 00:14:38,780
one events that a client sent out is

00:14:35,990 --> 00:14:42,050
sent back and then this can store the

00:14:38,780 --> 00:14:45,410
token and the bank account and then and

00:14:42,050 --> 00:14:47,570
the scripted subscription money is

00:14:45,410 --> 00:14:50,120
transferred it's like almost similar

00:14:47,570 --> 00:14:53,570
only there's no database involved so

00:14:50,120 --> 00:14:55,880
it's just there's no data there so

00:14:53,570 --> 00:14:58,100
there's like the token and amount and

00:14:55,880 --> 00:15:01,220
description and stuff like that it's all

00:14:58,100 --> 00:15:03,470
again transferred into a Kafka events

00:15:01,220 --> 00:15:06,590
being put onto Kafka and then it's

00:15:03,470 --> 00:15:08,870
waiting for something to come back so

00:15:06,590 --> 00:15:11,570
now it's time in the demo and this is

00:15:08,870 --> 00:15:15,130
actually the first time it's running

00:15:11,570 --> 00:15:15,130
life and not

00:15:26,240 --> 00:15:38,370
yeah so if you I can should be able to

00:15:33,259 --> 00:15:41,110
zoom in oh but not on the actual URL

00:15:38,370 --> 00:15:44,679
[Music]

00:15:41,110 --> 00:15:44,679
yeah so it's

00:15:52,830 --> 00:15:56,640
what's an easy way to

00:16:14,810 --> 00:16:19,200
yeah so basically it's graph QL dot G

00:16:18,600 --> 00:16:23,370
Kleist

00:16:19,200 --> 00:16:25,410
dr. the front end is now hosted with

00:16:23,370 --> 00:16:27,959
notify and the back end is running

00:16:25,410 --> 00:16:30,180
somewhere in Frankfurt what you're now

00:16:27,959 --> 00:16:44,699
seeing is the transaction from the

00:16:30,180 --> 00:16:49,740
company account I can now log in yes and

00:16:44,699 --> 00:16:51,779
then on my phone I also lock the enmity

00:16:49,740 --> 00:16:55,470
to our accounts and trying to make a

00:16:51,779 --> 00:16:57,570
transcription and that's now there so I

00:16:55,470 --> 00:16:59,870
just did my phone's going off the

00:16:57,570 --> 00:17:02,459
internet through all the servers and

00:16:59,870 --> 00:17:06,540
that's a nice thing if you also go to

00:17:02,459 --> 00:17:08,939
the website so just run for some money

00:17:06,540 --> 00:17:11,069
to the same account which is can be

00:17:08,939 --> 00:17:14,549
easily copied because when you're

00:17:11,069 --> 00:17:18,780
entering it's now just one this is the

00:17:14,549 --> 00:17:21,000
one you need if you transfer some money

00:17:18,780 --> 00:17:22,860
they are like three power banks to give

00:17:21,000 --> 00:17:28,230
away for the first three persons that

00:17:22,860 --> 00:17:35,100
succeed they should just like the other

00:17:28,230 --> 00:17:39,120
message show up here so this suppose

00:17:35,100 --> 00:17:42,740
mine and so the next three to put

00:17:39,120 --> 00:17:45,990
forward it's there's the power bank and

00:17:42,740 --> 00:17:49,340
well that's running I continue with some

00:17:45,990 --> 00:17:49,340
of the tests I did

00:17:50,330 --> 00:17:53,980
[Music]

00:17:54,030 --> 00:18:03,640
yeah so yeah it's nice it's working it's

00:17:58,990 --> 00:18:06,520
fast with that that's like one time so I

00:18:03,640 --> 00:18:08,289
yeah before like Willie going out and

00:18:06,520 --> 00:18:11,110
telling two people hey I want to use

00:18:08,289 --> 00:18:14,470
something like this I wanted to do some

00:18:11,110 --> 00:18:16,750
tests so I made a kind of prediction

00:18:14,470 --> 00:18:18,730
like way so there's like there's some

00:18:16,750 --> 00:18:20,830
redundancy in there with three Kafka

00:18:18,730 --> 00:18:23,500
brokers so the data won't get lost

00:18:20,830 --> 00:18:27,210
there's some encryption on the kafka

00:18:23,500 --> 00:18:30,730
parts then I kept increasing the loads

00:18:27,210 --> 00:18:33,370
so I wrote some closure that's had like

00:18:30,730 --> 00:18:35,799
WebSockets and then they were

00:18:33,370 --> 00:18:39,520
transferring money at most four times a

00:18:35,799 --> 00:18:42,100
second and then every X amount of time I

00:18:39,520 --> 00:18:43,990
was adding a session generator so then

00:18:42,100 --> 00:18:45,909
the load kept higher and higher and then

00:18:43,990 --> 00:18:49,030
eventually it starts to break somewhere

00:18:45,909 --> 00:18:51,429
and yeah I was very interested where

00:18:49,030 --> 00:18:53,860
shall it break

00:18:51,429 --> 00:18:55,450
and this also interest see what happens

00:18:53,860 --> 00:18:57,580
when it run for a long time because it's

00:18:55,450 --> 00:18:59,880
nice that you just put it up and then it

00:18:57,580 --> 00:19:02,309
works but what's like after an hour or

00:18:59,880 --> 00:19:04,809
ideally even after a week or something

00:19:02,309 --> 00:19:07,809
but you know that's taken too much time

00:19:04,809 --> 00:19:10,720
so each run is taking hundred minutes

00:19:07,809 --> 00:19:14,020
everything goes fine and I also wanted

00:19:10,720 --> 00:19:17,200
to know that end-to-end latency so

00:19:14,020 --> 00:19:19,419
there's also like every second it's also

00:19:17,200 --> 00:19:21,010
making a transaction to measure the

00:19:19,419 --> 00:19:24,640
end-to-end latency while running the

00:19:21,010 --> 00:19:26,850
test and in this specific case I was

00:19:24,640 --> 00:19:29,470
playing a bit around with a cough car

00:19:26,850 --> 00:19:32,860
configuration is called Ling RMS and

00:19:29,470 --> 00:19:35,470
that's basically how long the producer

00:19:32,860 --> 00:19:38,620
rates still really put in it really

00:19:35,470 --> 00:19:40,720
sending it to the to the server because

00:19:38,620 --> 00:19:42,700
if you have a lot of messages then it's

00:19:40,720 --> 00:19:47,710
much more efficient to send a lot of

00:19:42,700 --> 00:19:51,130
messages with one but really long one

00:19:47,710 --> 00:19:55,000
roll request then instead of sending a

00:19:51,130 --> 00:19:58,780
lot of small messages so these are the

00:19:55,000 --> 00:20:01,510
results the end-to-end latency what you

00:19:58,780 --> 00:20:03,820
can see if this is like also affecting

00:20:01,510 --> 00:20:06,080
both the commands handler and graphic

00:20:03,820 --> 00:20:09,110
well endpoints

00:20:06,080 --> 00:20:10,820
so if you put it to zero that's like the

00:20:09,110 --> 00:20:13,640
most extreme case and everything is

00:20:10,820 --> 00:20:16,790
immediately sent to Kafka so then you

00:20:13,640 --> 00:20:19,820
get a low latency because it's and to

00:20:16,790 --> 00:20:22,280
Aunt it's just hundred milliseconds but

00:20:19,820 --> 00:20:25,130
you run into problems very quickly when

00:20:22,280 --> 00:20:27,740
it's not scalable anymore and you put it

00:20:25,130 --> 00:20:31,310
200 milliseconds then it will keep going

00:20:27,740 --> 00:20:34,610
fine a lot of way what's also

00:20:31,310 --> 00:20:38,150
interesting is the total messages per

00:20:34,610 --> 00:20:42,410
second so with 100 milliseconds it can

00:20:38,150 --> 00:20:44,900
go just over 300 requests per second and

00:20:42,410 --> 00:20:51,100
the other ones are lower so those are

00:20:44,900 --> 00:20:58,160
300 such transactions made by all the

00:20:51,100 --> 00:21:00,110
generators so I also checked the CPU

00:20:58,160 --> 00:21:02,540
during the testing and then you can also

00:21:00,110 --> 00:21:04,730
see that it's really kind of stressful

00:21:02,540 --> 00:21:06,440
for the graphical end point to put all

00:21:04,730 --> 00:21:08,120
those messages directly on Kafka

00:21:06,440 --> 00:21:10,370
checking whether that message with that

00:21:08,120 --> 00:21:12,680
single one was really there and then

00:21:10,370 --> 00:21:15,110
getting it back and if you put 100

00:21:12,680 --> 00:21:16,910
milliseconds and it has a lot less to do

00:21:15,110 --> 00:21:22,220
because then it's sending multiple

00:21:16,910 --> 00:21:25,070
messages in one go so a bit about

00:21:22,220 --> 00:21:26,930
scaling because 300 requests per second

00:21:25,070 --> 00:21:29,990
might be enough especially if it's like

00:21:26,930 --> 00:21:32,060
an internal internal tool if you just

00:21:29,990 --> 00:21:33,530
use for admin purposes but if you wanted

00:21:32,060 --> 00:21:35,510
to use the in production and you're

00:21:33,530 --> 00:21:37,880
already baked and you might run into

00:21:35,510 --> 00:21:40,430
problems and then like I said with

00:21:37,880 --> 00:21:42,560
scaling so cough guys these different

00:21:40,430 --> 00:21:44,450
partitions so you can make it to the

00:21:42,560 --> 00:21:47,300
command endured as it keeps using the

00:21:44,450 --> 00:21:51,380
same key so then if doesn't matter which

00:21:47,300 --> 00:21:53,480
requests I made as a client then also on

00:21:51,380 --> 00:21:55,700
the topic coming back it's still in kind

00:21:53,480 --> 00:21:57,680
of the same partition and I could make

00:21:55,700 --> 00:21:59,810
craftwell endpoints they just read

00:21:57,680 --> 00:22:02,090
specific partitions and I could make

00:21:59,810 --> 00:22:04,070
multiple of them but yeah if you start

00:22:02,090 --> 00:22:06,200
to skill dynamically you still have this

00:22:04,070 --> 00:22:08,960
kind of problem that you can connect it

00:22:06,200 --> 00:22:10,790
to one and in the meantime on some other

00:22:08,960 --> 00:22:13,690
graphical end point is the event you're

00:22:10,790 --> 00:22:15,980
interested in or you even if you

00:22:13,690 --> 00:22:18,080
transfer to the other endpoint you might

00:22:15,980 --> 00:22:21,040
be too late because it's a hot stream

00:22:18,080 --> 00:22:24,490
and then it won't work

00:22:21,040 --> 00:22:26,990
so what we learned there are like three

00:22:24,490 --> 00:22:29,570
kind of vase with an event sourcing

00:22:26,990 --> 00:22:31,840
setup make sure you can use graphical

00:22:29,570 --> 00:22:37,610
out with Kafka's or just basic queries

00:22:31,840 --> 00:22:40,820
on the display it's state or you can

00:22:37,610 --> 00:22:44,210
just listen to a stream coming in with

00:22:40,820 --> 00:22:46,730
some kind of filtering or you can have

00:22:44,210 --> 00:22:49,130
like really a command and then getting

00:22:46,730 --> 00:22:52,460
all the actions back that are resulting

00:22:49,130 --> 00:22:54,440
from that commands it's a limited

00:22:52,460 --> 00:22:56,630
democracies like no education

00:22:54,440 --> 00:23:00,470
authorization or whatever in it because

00:22:56,630 --> 00:23:02,540
like there is the token that you need to

00:23:00,470 --> 00:23:04,160
subscribe monies or nobody can easily

00:23:02,540 --> 00:23:06,740
subscribe money from someone else but

00:23:04,160 --> 00:23:08,270
everything else is in the open so if you

00:23:06,740 --> 00:23:12,080
want to use something like that this

00:23:08,270 --> 00:23:14,660
should be different and scalability is

00:23:12,080 --> 00:23:16,520
yeah like I said pretty tricky to get it

00:23:14,660 --> 00:23:18,920
right because there are some ways to

00:23:16,520 --> 00:23:20,750
handle it it's also interesting there's

00:23:18,920 --> 00:23:24,110
also something and worse that you can

00:23:20,750 --> 00:23:28,100
when you're connecting with Gavriel it

00:23:24,110 --> 00:23:31,010
can get a token and then kind of proxy

00:23:28,100 --> 00:23:34,960
you to different endpoints but yeah it

00:23:31,010 --> 00:23:39,820
keeps tricky I'm not sure if anybody

00:23:34,960 --> 00:23:39,820
tried to cut to the

00:23:45,350 --> 00:24:03,740
so there's still nobody so maybe I try

00:23:51,420 --> 00:24:03,740
to know didn't work right

00:24:14,560 --> 00:24:24,960
does anybody know for a Macanese a way

00:24:16,840 --> 00:24:24,960
to display it's big or sorry

00:24:27,810 --> 00:24:31,560
[Music]

00:24:50,780 --> 00:24:54,000
[Music]

00:25:00,470 --> 00:25:14,680
it's this visible whites yeah produced a

00:25:08,690 --> 00:25:24,920
few now nestled many more than three

00:25:14,680 --> 00:25:27,280
think no yes so there's more power bank

00:25:24,920 --> 00:25:27,280
for you

00:25:37,840 --> 00:25:44,250
and see somebody else cats and then I

00:25:41,080 --> 00:25:44,250
got to the end slides

00:25:59,250 --> 00:26:05,280
so there are some links in there so

00:26:01,289 --> 00:26:06,990
that's my Twitter handle there's also

00:26:05,280 --> 00:26:09,299
like the background story because it's

00:26:06,990 --> 00:26:11,940
like a very long story how it came to be

00:26:09,299 --> 00:26:13,679
because there's first like workshop and

00:26:11,940 --> 00:26:18,919
also meet up some other meet up to put

00:26:13,679 --> 00:26:22,200
everything together then there's also

00:26:18,919 --> 00:26:25,830
linked in SlideShare zor-el also put the

00:26:22,200 --> 00:26:27,809
slides from this one also interesting is

00:26:25,830 --> 00:26:30,659
the rapid net it's really about closure

00:26:27,809 --> 00:26:33,120
and this very interesting latest episode

00:26:30,659 --> 00:26:36,630
is episode 30 then they have kind of

00:26:33,120 --> 00:26:41,970
like the same architecture set up but

00:26:36,630 --> 00:26:43,830
then yeah so the same thing like almost

00:26:41,970 --> 00:26:46,049
the same thing also with reframe also

00:26:43,830 --> 00:26:47,640
with Bill Maher for the CSS but they're

00:26:46,049 --> 00:26:50,280
running it's really in production so

00:26:47,640 --> 00:26:52,820
that's interesting so are there any

00:26:50,280 --> 00:26:52,820
questions

00:26:59,900 --> 00:27:04,679
so there are question if you have to use

00:27:02,520 --> 00:27:07,980
subscriptions I don't think so because

00:27:04,679 --> 00:27:10,799
it's just it sends out just like one of

00:27:07,980 --> 00:27:12,570
the key features of graph QL and it's

00:27:10,799 --> 00:27:15,169
nice to play around with because of

00:27:12,570 --> 00:27:20,450
course it's just spread it and just make

00:27:15,169 --> 00:27:23,039
a mutation and then if the mutation

00:27:20,450 --> 00:27:25,590
happens successfully then it's basically

00:27:23,039 --> 00:27:28,020
just feedback if it's sent to Kafka or

00:27:25,590 --> 00:27:30,150
not that's and then you have some other

00:27:28,020 --> 00:27:33,419
kind of query or something to check back

00:27:30,150 --> 00:27:33,990
if it's got through the the needed

00:27:33,419 --> 00:27:36,870
results

00:27:33,990 --> 00:27:41,370
it could be fine and then it's easier to

00:27:36,870 --> 00:27:43,289
scale and and I'm now just trying out

00:27:41,370 --> 00:27:46,650
the the closure for aeons of the back

00:27:43,289 --> 00:27:48,900
ends and I want also to use the river

00:27:46,650 --> 00:27:51,870
and I'm also busy with Yahoo Springwood

00:27:48,900 --> 00:27:53,909
variants and I can use the stuff to

00:27:51,870 --> 00:27:56,400
compare them also for performance and

00:27:53,909 --> 00:27:57,750
stuff like that and also in rust they

00:27:56,400 --> 00:27:59,789
are busy with the clutter with the

00:27:57,750 --> 00:28:02,700
surfer also implementing subscriptions

00:27:59,789 --> 00:28:04,980
so that I can also use rust rust is in

00:28:02,700 --> 00:28:08,520
this respect many more interesting also

00:28:04,980 --> 00:28:12,030
because it's like also typed so maybe

00:28:08,520 --> 00:28:12,870
eventually I can make something that so

00:28:12,030 --> 00:28:14,760
for Kafka does

00:28:12,870 --> 00:28:18,750
so like a type thing which with schemas

00:28:14,760 --> 00:28:21,059
that gets the ski mask from from that

00:28:18,750 --> 00:28:23,850
record story and unsorted automatically

00:28:21,059 --> 00:28:26,360
creates and end points based on those

00:28:23,850 --> 00:28:29,370
things that would be very interesting

00:28:26,360 --> 00:28:31,170
probably so then you need just some

00:28:29,370 --> 00:28:33,059
basic configuration because these are

00:28:31,170 --> 00:28:36,020
the topics I want to consume from and

00:28:33,059 --> 00:28:39,540
just generates a kafka end point for me

00:28:36,020 --> 00:28:47,190
for greffi wellness it should be

00:28:39,540 --> 00:28:50,900
possible I think any more questions ok

00:28:47,190 --> 00:28:50,900
that's its thing

00:28:52,850 --> 00:28:55,609

YouTube URL: https://www.youtube.com/watch?v=EN73NiR8xZI


