Title: Query Analysis Reboot (CLAIRE KNIGHT - Senior API Engineer at GitHub)
Publication date: 2019-11-03
Playlist: GraphQL Summit 2019
Description: 
	This talk will focus on using data to drive decisions; or how your users can help you better understand your own API by leveraging data pipelines and tracing tools.
Captions: 
	00:00:01,389 --> 00:00:05,300
all right thank you all appreciate is

00:00:04,250 --> 00:00:07,580
the last session and you're probably

00:00:05,300 --> 00:00:08,929
pretty tired so thanks very much for

00:00:07,580 --> 00:00:11,030
attending and giving me somebody to

00:00:08,929 --> 00:00:14,589
actually talk to other than the sound

00:00:11,030 --> 00:00:18,500
guys so yeah I'm Claire Knight I work

00:00:14,589 --> 00:00:20,660
github I work on the API team I've had

00:00:18,500 --> 00:00:24,730
many conversations over the last two

00:00:20,660 --> 00:00:29,599
days I am yeah UK and I live in the UK

00:00:24,730 --> 00:00:31,550
we're a predominantly remote company so

00:00:29,599 --> 00:00:32,810
that's how that gets to work which is

00:00:31,550 --> 00:00:35,900
great because I get to work with amazing

00:00:32,810 --> 00:00:40,340
folks from all over the world and also I

00:00:35,900 --> 00:00:42,380
get to come talk to you so what I really

00:00:40,340 --> 00:00:44,420
wanted to talk to y'all today about is

00:00:42,380 --> 00:00:46,790
using data to drive decisions which

00:00:44,420 --> 00:00:47,930
might sound kind of obvious to some of

00:00:46,790 --> 00:00:51,700
you especially if you're in management

00:00:47,930 --> 00:00:55,580
or data science or even performance

00:00:51,700 --> 00:00:57,800
folks but we don't always do this with

00:00:55,580 --> 00:00:59,270
with products in the right way and I

00:00:57,800 --> 00:01:02,000
often say we're not necessarily doing

00:00:59,270 --> 00:01:03,860
the right thing with api's the other

00:01:02,000 --> 00:01:06,260
thing is I'm sure all of you that have

00:01:03,860 --> 00:01:08,660
polar kpi's know is your users doing

00:01:06,260 --> 00:01:11,720
really weird things with api's things

00:01:08,660 --> 00:01:14,000
you never ever wanted them to do but

00:01:11,720 --> 00:01:17,930
that's that you know collecting data on

00:01:14,000 --> 00:01:20,690
these edge cases on unusual patterns and

00:01:17,930 --> 00:01:21,980
things like that is absolutely valuable

00:01:20,690 --> 00:01:26,510
for understanding what people are doing

00:01:21,980 --> 00:01:28,460
not just from a security aspect so I

00:01:26,510 --> 00:01:30,530
mean there are tools about them and I'll

00:01:28,460 --> 00:01:32,960
get onto those and things but we have a

00:01:30,530 --> 00:01:34,970
lot of things written internal even get

00:01:32,960 --> 00:01:36,200
home for our own use because it works

00:01:34,970 --> 00:01:38,479
better with the monoliths that we have

00:01:36,200 --> 00:01:41,030
that's been well documented and because

00:01:38,479 --> 00:01:42,380
we also have our own various places

00:01:41,030 --> 00:01:44,330
where we aggregate data

00:01:42,380 --> 00:01:48,799
so what I'm going to do is is talk to

00:01:44,330 --> 00:01:50,960
you about various things around why we

00:01:48,799 --> 00:01:51,710
want to capture some stuff why we want

00:01:50,960 --> 00:01:54,049
to write it ourselves

00:01:51,710 --> 00:01:55,520
and we're we're doing that and maybe

00:01:54,049 --> 00:01:58,220
give you some insights if you wanted to

00:01:55,520 --> 00:02:02,140
apply that in your own organizations and

00:01:58,220 --> 00:02:04,340
our own api's so you might be saying

00:02:02,140 --> 00:02:06,080
what do I need to capture any more data

00:02:04,340 --> 00:02:08,299
I've got a query coming in on the API

00:02:06,080 --> 00:02:09,759
key I was very expressive I can know

00:02:08,299 --> 00:02:12,390
what people are doing and so forth

00:02:09,759 --> 00:02:13,590
however that is not

00:02:12,390 --> 00:02:15,630
simple as it might seem from an

00:02:13,590 --> 00:02:18,480
operational point of view there's a lot

00:02:15,630 --> 00:02:19,530
of things that we need to consider and

00:02:18,480 --> 00:02:22,020
we're going to cover each of them in

00:02:19,530 --> 00:02:24,060
turn but there are things like we don't

00:02:22,020 --> 00:02:26,310
want to affect the performance in terms

00:02:24,060 --> 00:02:29,150
of returning response to the user we

00:02:26,310 --> 00:02:32,250
have to be very careful in terms of data

00:02:29,150 --> 00:02:33,720
with like the security and

00:02:32,250 --> 00:02:38,250
responsibility of using somebody's

00:02:33,720 --> 00:02:39,660
personal data and then there's also the

00:02:38,250 --> 00:02:41,400
fact that some of the analysis you might

00:02:39,660 --> 00:02:45,690
want to do because we care about

00:02:41,400 --> 00:02:49,110
aggregate things needs multiple requests

00:02:45,690 --> 00:02:51,000
and requests from various places to be

00:02:49,110 --> 00:02:52,950
able to be actually meaningful to us so

00:02:51,000 --> 00:02:59,100
on a per query basis that's not going to

00:02:52,950 --> 00:03:02,040
give us as much information so let's

00:02:59,100 --> 00:03:04,290
let's move on to this first one it's

00:03:02,040 --> 00:03:06,750
just query performance now I'm not sure

00:03:04,290 --> 00:03:08,340
if people are aware of the scale at

00:03:06,750 --> 00:03:09,690
which github operates I mean we made a

00:03:08,340 --> 00:03:13,260
big thing about the number of millions

00:03:09,690 --> 00:03:15,300
of accounts we had last year but we

00:03:13,260 --> 00:03:17,760
actually serve over a billion requests

00:03:15,300 --> 00:03:23,280
every day on our API so we're talking

00:03:17,760 --> 00:03:24,660
some mega scale here and we have to not

00:03:23,280 --> 00:03:26,340
only have the capacity to actually serve

00:03:24,660 --> 00:03:28,410
those in a reasonable time frame without

00:03:26,340 --> 00:03:31,980
you know buying up the entire hardware

00:03:28,410 --> 00:03:34,320
stacks around the world but also people

00:03:31,980 --> 00:03:36,299
are not prepared to wait under amounts

00:03:34,320 --> 00:03:39,630
of time for a given request quite fairly

00:03:36,299 --> 00:03:41,519
if you making a request to get a few

00:03:39,630 --> 00:03:43,140
bits of data out of out of an API it

00:03:41,519 --> 00:03:46,019
should return to you in in in

00:03:43,140 --> 00:03:49,500
milliseconds and that's not I think

00:03:46,019 --> 00:03:50,760
that's the in you know integrator should

00:03:49,500 --> 00:03:53,220
be able to expect that kind of

00:03:50,760 --> 00:03:55,350
responsiveness so if we were to start

00:03:53,220 --> 00:03:57,890
doing a lot of analysis during the query

00:03:55,350 --> 00:03:59,940
processing we would have a hard time

00:03:57,890 --> 00:04:02,220
serving that many requests and

00:03:59,940 --> 00:04:05,519
responding in a timely manner to anybody

00:04:02,220 --> 00:04:08,760
that is making a query

00:04:05,519 --> 00:04:10,590
so one thing we we do is is we look to

00:04:08,760 --> 00:04:14,640
offload the data so that we can do that

00:04:10,590 --> 00:04:16,500
kind of analysis later on which leads me

00:04:14,640 --> 00:04:19,590
very nicely into the next slide which is

00:04:16,500 --> 00:04:22,010
the power of analysis we are fortunate

00:04:19,590 --> 00:04:25,460
to have some really bright people I

00:04:22,010 --> 00:04:27,199
github did the data science team and

00:04:25,460 --> 00:04:29,030
she Learning Team in fact we have a lot

00:04:27,199 --> 00:04:31,699
of bright people okay hub and they're

00:04:29,030 --> 00:04:33,500
all far better at math than I am so I'm

00:04:31,699 --> 00:04:35,240
more than happy for them to do some of

00:04:33,500 --> 00:04:37,099
these aggregations and these these these

00:04:35,240 --> 00:04:40,039
clever queries and statistical

00:04:37,099 --> 00:04:42,710
significance of things because I'd mess

00:04:40,039 --> 00:04:44,780
it up but one thing that they have

00:04:42,710 --> 00:04:46,460
definitely used the data for is to look

00:04:44,780 --> 00:04:48,770
at patterns over time and to provide

00:04:46,460 --> 00:04:50,210
historical comparisons that's also

00:04:48,770 --> 00:04:52,009
something that doesn't work great when

00:04:50,210 --> 00:04:54,440
you're querying sorry when you're

00:04:52,009 --> 00:04:58,280
looking at data on a per query basis

00:04:54,440 --> 00:05:03,590
rather than aggregate in an aggregate

00:04:58,280 --> 00:05:07,340
form and we also are starting to explore

00:05:03,590 --> 00:05:09,470
or consider exploring I should say you

00:05:07,340 --> 00:05:10,970
know actually asking other questions

00:05:09,470 --> 00:05:12,680
like looking at the data and saying well

00:05:10,970 --> 00:05:14,389
we have a bunch of stuff here what could

00:05:12,680 --> 00:05:15,860
we use that to tell us could we feed

00:05:14,389 --> 00:05:19,159
that into some other analytics that we

00:05:15,860 --> 00:05:22,130
have over here so that we've

00:05:19,159 --> 00:05:24,020
accidentally enabled the statisticians a

00:05:22,130 --> 00:05:25,960
github to ask you even more questions so

00:05:24,020 --> 00:05:28,159
we may even end up capturing more data

00:05:25,960 --> 00:05:30,560
so far this is probably been in

00:05:28,159 --> 00:05:32,599
production about eight months now so

00:05:30,560 --> 00:05:36,409
that we're getting a good bulk of data

00:05:32,599 --> 00:05:38,720
around that and the final reason that we

00:05:36,409 --> 00:05:40,550
don't literally use the query and just

00:05:38,720 --> 00:05:43,820
dump that to a log somewhere or into

00:05:40,550 --> 00:05:45,710
wherever is that we want to be ensure

00:05:43,820 --> 00:05:48,169
that we're compliant we take security

00:05:45,710 --> 00:05:52,099
and privacy very seriously github as

00:05:48,169 --> 00:05:54,469
should any company plenti don't know we

00:05:52,099 --> 00:05:57,349
you know we have to be GD APR compliant

00:05:54,469 --> 00:06:00,050
we operate in Europe we have European

00:05:57,349 --> 00:06:01,780
customers we also care about PII

00:06:00,050 --> 00:06:05,330
personally identifiable information

00:06:01,780 --> 00:06:08,990
which is what I know that a lot of my us

00:06:05,330 --> 00:06:10,849
colleagues refer to this this as there's

00:06:08,990 --> 00:06:12,349
there's various things around this about

00:06:10,849 --> 00:06:13,610
we shouldn't be able to actually be

00:06:12,349 --> 00:06:15,560
whatnot if we want to keep it for a

00:06:13,610 --> 00:06:17,180
period of time actually Bute certain

00:06:15,560 --> 00:06:18,680
things to individual users because it

00:06:17,180 --> 00:06:21,139
becomes their data whereas if we store

00:06:18,680 --> 00:06:23,210
things anonymously or in aggregates then

00:06:21,139 --> 00:06:24,110
it's just data about our service and how

00:06:23,210 --> 00:06:27,620
it's being used

00:06:24,110 --> 00:06:29,599
I know there are gray areas and

00:06:27,620 --> 00:06:31,909
exceptions around now if you can log for

00:06:29,599 --> 00:06:33,139
a certain period of time full details to

00:06:31,909 --> 00:06:36,740
ensure your service isn't big hats

00:06:33,139 --> 00:06:38,240
things like that we do obviously secure

00:06:36,740 --> 00:06:38,830
our service that way but those logs then

00:06:38,240 --> 00:06:42,009
have to be

00:06:38,830 --> 00:06:44,830
it completely not archived so we have to

00:06:42,009 --> 00:06:48,879
find ways of extracting the data out in

00:06:44,830 --> 00:06:51,819
other ways so there are three key areas

00:06:48,879 --> 00:06:53,139
now it would be remiss of me to not

00:06:51,819 --> 00:06:57,909
mention that there are existing

00:06:53,139 --> 00:07:00,819
solutions this fragment of JSON response

00:06:57,909 --> 00:07:02,680
here is from Apollo tracing tool which

00:07:00,819 --> 00:07:03,909
actually I got really excited when I

00:07:02,680 --> 00:07:06,460
found and then really upset when I

00:07:03,909 --> 00:07:07,720
realize I can use it because of the the

00:07:06,460 --> 00:07:11,110
setup we have we're running in a Ruby on

00:07:07,720 --> 00:07:14,530
Rails monolith and this we therefore

00:07:11,110 --> 00:07:15,879
can't use a lot of the Apollo things the

00:07:14,530 --> 00:07:17,680
other reason that we didn't want to

00:07:15,879 --> 00:07:20,979
particularly go exactly this route is

00:07:17,680 --> 00:07:23,020
that this is returning the resolvers now

00:07:20,979 --> 00:07:24,210
we've got a public API we don't own both

00:07:23,020 --> 00:07:26,710
sides of this

00:07:24,210 --> 00:07:30,039
we're not client and server we are just

00:07:26,710 --> 00:07:32,319
server so if we were to return the

00:07:30,039 --> 00:07:34,449
resolvers and information of that level

00:07:32,319 --> 00:07:36,520
through to our clients we're potentially

00:07:34,449 --> 00:07:39,129
exposing implementation details that can

00:07:36,520 --> 00:07:40,930
be used against us and we sure as heck

00:07:39,129 --> 00:07:44,469
don't want that for the sake of all your

00:07:40,930 --> 00:07:46,150
so source code if you're using us I mean

00:07:44,469 --> 00:07:47,860
that if you are using anything in the

00:07:46,150 --> 00:07:49,840
Apollo ecosystem I think this is a

00:07:47,860 --> 00:07:52,889
fantastic thing and I definitely think

00:07:49,840 --> 00:07:52,889
you should be go using that

00:07:56,780 --> 00:08:02,870
so from a sort of a practical point of

00:07:59,510 --> 00:08:04,550
view here I want to go over the things

00:08:02,870 --> 00:08:06,470
that we've found valuable and just give

00:08:04,550 --> 00:08:12,500
you a little bit of information on what

00:08:06,470 --> 00:08:15,500
those are so I'll go across these from

00:08:12,500 --> 00:08:19,910
left to right first thing is pausing

00:08:15,500 --> 00:08:21,170
problems you may you may wonder why we

00:08:19,910 --> 00:08:23,240
care about that you know if somebody

00:08:21,170 --> 00:08:25,120
sends us a malformed query then you know

00:08:23,240 --> 00:08:28,190
they're just being a bit of a doofus

00:08:25,120 --> 00:08:32,120
except that we do care because if we're

00:08:28,190 --> 00:08:33,650
getting repeated problems with certain

00:08:32,120 --> 00:08:35,840
aspects of our schema then maybe our

00:08:33,650 --> 00:08:37,520
documentation needs to be improved maybe

00:08:35,840 --> 00:08:39,800
we need to put some examples out maybe

00:08:37,520 --> 00:08:41,750
the education team need to spin up

00:08:39,800 --> 00:08:43,820
something around that maybe our Deverell

00:08:41,750 --> 00:08:45,760
need to be involved there's there's a

00:08:43,820 --> 00:08:50,000
bunch of things around that that I think

00:08:45,760 --> 00:08:51,380
it helps us to help our customers so

00:08:50,000 --> 00:08:54,500
that that's the first one that paused

00:08:51,380 --> 00:08:55,910
the pausing problems we also clearly

00:08:54,500 --> 00:08:59,120
care about resolvers that are unable to

00:08:55,910 --> 00:09:01,670
complete because you know returning a

00:08:59,120 --> 00:09:04,790
502 users kind of sucks a bit for users

00:09:01,670 --> 00:09:06,350
when we can hopefully do better even if

00:09:04,790 --> 00:09:08,180
that's to return an error of some sort

00:09:06,350 --> 00:09:09,620
to give them some more information to

00:09:08,180 --> 00:09:11,930
either help themselves or country to

00:09:09,620 --> 00:09:13,490
support but you know five hundred five

00:09:11,930 --> 00:09:16,550
hundred thing doesn't really give

00:09:13,490 --> 00:09:17,990
anybody much other than oops it broke so

00:09:16,550 --> 00:09:19,550
we definitely try and provide a bit of

00:09:17,990 --> 00:09:23,330
information around that and again

00:09:19,550 --> 00:09:25,670
because of the compliance side of things

00:09:23,330 --> 00:09:27,680
we're not going to have the whole query

00:09:25,670 --> 00:09:31,400
with all of the parameters there but we

00:09:27,680 --> 00:09:32,720
can store additional things around what

00:09:31,400 --> 00:09:34,040
objects are being accessed because

00:09:32,720 --> 00:09:35,600
they're just objects in the schema

00:09:34,040 --> 00:09:38,240
that's that's kind of public knowledge

00:09:35,600 --> 00:09:40,520
in that sense and so being able to

00:09:38,240 --> 00:09:43,280
narrow things down helps us diagnose

00:09:40,520 --> 00:09:44,930
those problems as engineers so that one

00:09:43,280 --> 00:09:48,620
is very much more for our engineering

00:09:44,930 --> 00:09:53,150
team internally the domain objects being

00:09:48,620 --> 00:09:55,760
used actually helps both engineers and

00:09:53,150 --> 00:09:58,940
the public although they might not see

00:09:55,760 --> 00:10:02,240
that what this allowed us to do is again

00:09:58,940 --> 00:10:03,410
look at the areas that are popular that

00:10:02,240 --> 00:10:03,890
get a lot of hits to get a lot of

00:10:03,410 --> 00:10:07,640
traffic

00:10:03,890 --> 00:10:09,589
they're the hotspots so we come from an

00:10:07,640 --> 00:10:10,460
engineering perspective look at

00:10:09,589 --> 00:10:12,520
optimizing those

00:10:10,460 --> 00:10:16,790
need to be optimized or ensuring there's

00:10:12,520 --> 00:10:19,280
a good clean safe path the edge case is

00:10:16,790 --> 00:10:21,350
a better iron out because as I said

00:10:19,280 --> 00:10:23,930
people will find the edge cases in your

00:10:21,350 --> 00:10:25,340
API whether you want them to or not so

00:10:23,930 --> 00:10:27,830
you know again capturing is particularly

00:10:25,340 --> 00:10:31,460
the education information we can fix

00:10:27,830 --> 00:10:32,960
implementations like that or have a

00:10:31,460 --> 00:10:34,700
guess that there might be a problem

00:10:32,960 --> 00:10:37,160
before it happens so we can see things

00:10:34,700 --> 00:10:38,560
off which you know gives information of

00:10:37,160 --> 00:10:41,270
the engineering team and it ultimately

00:10:38,560 --> 00:10:43,130
they won't necessarily see it because

00:10:41,270 --> 00:10:46,030
we've fixed it already but it helps our

00:10:43,130 --> 00:10:46,030
integrators for sure

00:10:46,060 --> 00:10:50,660
the final other area that we found

00:10:49,070 --> 00:10:57,410
really valuable is around validation and

00:10:50,660 --> 00:11:01,250
security errors we do need we do need to

00:10:57,410 --> 00:11:02,840
kind of love something about people not

00:11:01,250 --> 00:11:05,030
being able to see things it could be

00:11:02,840 --> 00:11:07,880
perfectly legitimate if I'm authorized

00:11:05,030 --> 00:11:09,110
as me and you have a repository that's

00:11:07,880 --> 00:11:10,820
owned by your organization and is

00:11:09,110 --> 00:11:12,260
private then quite rightly I shouldn't

00:11:10,820 --> 00:11:14,300
be able to access that so if I'm going

00:11:12,260 --> 00:11:17,840
to query for that that is a perfectly

00:11:14,300 --> 00:11:19,730
fine validation or security message to

00:11:17,840 --> 00:11:21,710
give back but there are other situations

00:11:19,730 --> 00:11:24,370
where it's not very clear in the

00:11:21,710 --> 00:11:27,080
resolving hierarchy how to solve that

00:11:24,370 --> 00:11:31,900
because putting this the security layers

00:11:27,080 --> 00:11:34,250
into the resolvers and we have a complex

00:11:31,900 --> 00:11:35,990
permissions model I get her with with

00:11:34,250 --> 00:11:37,910
the ACLs around all of the things like

00:11:35,990 --> 00:11:40,160
you can have contributors and you can

00:11:37,910 --> 00:11:41,930
have moderators and all sorts of

00:11:40,160 --> 00:11:43,160
different kinds of permission rules so

00:11:41,930 --> 00:11:45,680
we have to apply all of that and

00:11:43,160 --> 00:11:47,330
unfortunately we're not perfect nobody's

00:11:45,680 --> 00:11:49,400
perfect so we do get some edge cases

00:11:47,330 --> 00:11:51,710
around that and by providing information

00:11:49,400 --> 00:11:54,590
about what group of things just being

00:11:51,710 --> 00:11:56,480
requested we can learn a bit more about

00:11:54,590 --> 00:12:01,030
where we need to put better test cases

00:11:56,480 --> 00:12:01,030
in more information and things like that

00:12:01,690 --> 00:12:07,010
so those are the sorts of things we care

00:12:05,120 --> 00:12:09,890
about now I'm going to kind of talk to

00:12:07,010 --> 00:12:12,050
you about where we capture this and then

00:12:09,890 --> 00:12:13,430
I'm just going to briefly go over where

00:12:12,050 --> 00:12:14,780
we put the information that we've

00:12:13,430 --> 00:12:16,250
captured because there's already said

00:12:14,780 --> 00:12:20,320
we're not going to be doing this in real

00:12:16,250 --> 00:12:20,320
time because of various reasons

00:12:20,650 --> 00:12:28,760
so kind of like there's four areas of

00:12:25,540 --> 00:12:31,010
interest there's also four main key

00:12:28,760 --> 00:12:32,180
areas where we capture the data so one

00:12:31,010 --> 00:12:34,690
of the things we do is we capture

00:12:32,180 --> 00:12:38,960
information during parsing this can be

00:12:34,690 --> 00:12:41,120
parsing errors obviously but also during

00:12:38,960 --> 00:12:43,010
parsing we can work out which objects

00:12:41,120 --> 00:12:45,140
are going to be accessed so that kind of

00:12:43,010 --> 00:12:48,920
information we can put in an object in

00:12:45,140 --> 00:12:52,520
store somewhere excuse me

00:12:48,920 --> 00:12:54,980
within the resolvers is quite a rich

00:12:52,520 --> 00:12:56,840
source of information in context because

00:12:54,980 --> 00:12:58,670
they were for anything other than a very

00:12:56,840 --> 00:13:02,300
simple query be a bunch of resolvers

00:12:58,670 --> 00:13:04,670
that are used so we can sort of track

00:13:02,300 --> 00:13:07,250
where in the resolving hierarchy things

00:13:04,670 --> 00:13:12,560
are visible or not visible with the

00:13:07,250 --> 00:13:16,040
security things we can track if they

00:13:12,560 --> 00:13:18,020
even other right objects trying to think

00:13:16,040 --> 00:13:19,880
of some failure cases here and my mind's

00:13:18,020 --> 00:13:21,140
gone blank right now but we have had

00:13:19,880 --> 00:13:22,550
situations where things like that

00:13:21,140 --> 00:13:24,050
particularly in development then maybe

00:13:22,550 --> 00:13:26,450
not made it out on the production that

00:13:24,050 --> 00:13:30,110
have gone super weird and and that extra

00:13:26,450 --> 00:13:31,310
logging which is available to developers

00:13:30,110 --> 00:13:33,290
in development and I'm just even to

00:13:31,310 --> 00:13:34,730
there console is helpful and that's

00:13:33,290 --> 00:13:36,920
something in the API team you would ask

00:13:34,730 --> 00:13:40,160
folks to use to help us help them as

00:13:36,920 --> 00:13:45,200
well we also capture data when we're

00:13:40,160 --> 00:13:47,600
applying security so that we know we

00:13:45,200 --> 00:13:49,880
know the ACL that's been applied even if

00:13:47,600 --> 00:13:52,880
we abstract that away later from the

00:13:49,880 --> 00:13:54,620
individual token an authorization there

00:13:52,880 --> 00:13:56,720
we certainly abstract that we would

00:13:54,620 --> 00:13:58,280
never have a recreated authorization

00:13:56,720 --> 00:14:02,960
token stored in this data that that

00:13:58,280 --> 00:14:04,400
would be so wrong so we capture elements

00:14:02,960 --> 00:14:09,380
of what's being applied from a security

00:14:04,400 --> 00:14:10,850
perspective which helps the engineering

00:14:09,380 --> 00:14:12,470
teams when they're like why is this not

00:14:10,850 --> 00:14:14,540
returning this data to these people when

00:14:12,470 --> 00:14:18,650
they ask for it but also out we have

00:14:14,540 --> 00:14:20,540
some very smart folks doing application

00:14:18,650 --> 00:14:22,190
security and they can kind of use that

00:14:20,540 --> 00:14:24,320
information and they do when they when

00:14:22,190 --> 00:14:26,120
they have to investigate potential

00:14:24,320 --> 00:14:29,210
problems they can they can go back

00:14:26,120 --> 00:14:30,950
through that to the final place where we

00:14:29,210 --> 00:14:32,750
will capture information is before

00:14:30,950 --> 00:14:36,110
sending a response

00:14:32,750 --> 00:14:38,300
and this is going to be a summary of

00:14:36,110 --> 00:14:40,580
what we send back be that good or bad

00:14:38,300 --> 00:14:45,980
that will be exceptions if they've

00:14:40,580 --> 00:14:48,670
occurred error codes or an overview of

00:14:45,980 --> 00:14:51,770
the data and a successful response again

00:14:48,670 --> 00:14:53,480
I want to make it very clear that we're

00:14:51,770 --> 00:14:54,650
not literally saying this is the chunk

00:14:53,480 --> 00:14:57,230
of data that we're going to send to this

00:14:54,650 --> 00:14:59,990
person it's it's because that's private

00:14:57,230 --> 00:15:02,900
information once more it's these type of

00:14:59,990 --> 00:15:04,640
objects and there's this scale of them

00:15:02,900 --> 00:15:11,870
that's the kind of thing that we would

00:15:04,640 --> 00:15:13,250
choose to capture so I've said we're

00:15:11,870 --> 00:15:15,530
capturing all these things where are we

00:15:13,250 --> 00:15:17,840
going to put it now partly that's going

00:15:15,530 --> 00:15:20,270
to be down to you and how you have your

00:15:17,840 --> 00:15:21,500
system set up your your server code and

00:15:20,270 --> 00:15:23,360
what one of their infrastructure you've

00:15:21,500 --> 00:15:25,010
got available to you for us we put the

00:15:23,360 --> 00:15:28,100
into three places because you know we're

00:15:25,010 --> 00:15:31,940
greedy and one isn't enough so we have a

00:15:28,100 --> 00:15:35,420
data pipeline a github which is built on

00:15:31,940 --> 00:15:36,920
and above and around Kafka and we have

00:15:35,420 --> 00:15:38,690
some excellent middleware you know

00:15:36,920 --> 00:15:41,600
monolith already there that we can

00:15:38,690 --> 00:15:44,000
utilize so we can pass in some objects

00:15:41,600 --> 00:15:46,730
of information when I say objects I

00:15:44,000 --> 00:15:48,020
don't mean graph QL types I mean things

00:15:46,730 --> 00:15:51,170
that we have they're collected about a

00:15:48,020 --> 00:15:53,840
request and it will be serialized in a

00:15:51,170 --> 00:15:56,000
way that can be stored relatively

00:15:53,840 --> 00:15:58,670
efficiently and that our data science

00:15:56,000 --> 00:16:03,530
team can then reconstruct into things

00:15:58,670 --> 00:16:05,630
that they can analyze later we also make

00:16:03,530 --> 00:16:07,700
use of log files again we're not going

00:16:05,630 --> 00:16:09,260
to be logging out the exact query or

00:16:07,700 --> 00:16:12,890
private information like that but just

00:16:09,260 --> 00:16:15,170
things around the resolvers the excuse

00:16:12,890 --> 00:16:17,300
me the parsing things like that

00:16:15,170 --> 00:16:18,560
pretty obvious stuff there if you've

00:16:17,300 --> 00:16:21,620
been in computing for any length of time

00:16:18,560 --> 00:16:25,160
and the final place where we like to put

00:16:21,620 --> 00:16:27,860
data is when into statistics capturing

00:16:25,160 --> 00:16:28,760
systems now there's plenty of these out

00:16:27,860 --> 00:16:29,960
there and again you've got to pick

00:16:28,760 --> 00:16:33,140
something that works for you but it's

00:16:29,960 --> 00:16:35,180
things like like starts D exporters

00:16:33,140 --> 00:16:36,590
Prometheus related things or data dog if

00:16:35,180 --> 00:16:39,530
you want commercial solutions some

00:16:36,590 --> 00:16:42,980
things like that so we can get some idea

00:16:39,530 --> 00:16:45,180
in real time of something so we have

00:16:42,980 --> 00:16:47,400
graphs on our rate-limiting and our abhi

00:16:45,180 --> 00:16:50,550
limiting things because they're useful

00:16:47,400 --> 00:16:52,490
if an incident might be happening if we

00:16:50,550 --> 00:16:54,870
might be coming under attack in terms of

00:16:52,490 --> 00:16:56,310
volumetric things like that

00:16:54,870 --> 00:17:01,230
that's not stuff that we necessarily

00:16:56,310 --> 00:17:04,320
want to analyze later although we might

00:17:01,230 --> 00:17:05,790
in terms of an availability review but

00:17:04,320 --> 00:17:08,490
we actually need to know that kind of

00:17:05,790 --> 00:17:10,890
stuff straight away although that's less

00:17:08,490 --> 00:17:12,840
of a hey we're using these lots of

00:17:10,890 --> 00:17:14,270
objects in a query but it is something

00:17:12,840 --> 00:17:22,230
that we do so I thought it would be

00:17:14,270 --> 00:17:27,930
beneficial to mention that so there are

00:17:22,230 --> 00:17:28,980
all of the things that we do and in the

00:17:27,930 --> 00:17:30,510
abstract how we've done it so I

00:17:28,980 --> 00:17:33,060
apologize I can't give you lines of code

00:17:30,510 --> 00:17:36,080
but our code base is very unique to us

00:17:33,060 --> 00:17:40,650
and I'm sure you'll have your own

00:17:36,080 --> 00:17:43,500
dragons hidden in code so I wanted to

00:17:40,650 --> 00:17:45,360
give you some well three key learnings

00:17:43,500 --> 00:17:47,070
that we got out of doing this we as a

00:17:45,360 --> 00:17:51,570
service has been in production roughly

00:17:47,070 --> 00:17:55,380
eight months now so these these things

00:17:51,570 --> 00:17:56,550
have kind of come up since that's

00:17:55,380 --> 00:17:59,000
happened and we've been able to evaluate

00:17:56,550 --> 00:18:03,960
and see where we have genuinely got

00:17:59,000 --> 00:18:06,390
things moving forward so the first thing

00:18:03,960 --> 00:18:09,240
is that we've been able to learn more

00:18:06,390 --> 00:18:11,430
about runtime errors again this is

00:18:09,240 --> 00:18:14,430
making a better experience we're not

00:18:11,430 --> 00:18:17,820
having so many 500s which is better for

00:18:14,430 --> 00:18:19,110
integrators it's better for management

00:18:17,820 --> 00:18:21,330
they look at these graphs and get

00:18:19,110 --> 00:18:23,210
unhappy with development teams it's

00:18:21,330 --> 00:18:25,260
better for the engineers because that

00:18:23,210 --> 00:18:27,600
because it makes it a lot easier to

00:18:25,260 --> 00:18:31,770
identify what the problems could be and

00:18:27,600 --> 00:18:33,780
the errors that are being returned we

00:18:31,770 --> 00:18:36,180
use the graph QL rubygem and I'm lucky

00:18:33,780 --> 00:18:38,160
enough to work with the maintainer of

00:18:36,180 --> 00:18:41,130
that so one of the things that we did

00:18:38,160 --> 00:18:43,500
was improve the messaging around some of

00:18:41,130 --> 00:18:46,740
the errors when that's parsing and we

00:18:43,500 --> 00:18:49,920
gave that back I think I probably pushed

00:18:46,740 --> 00:18:52,380
that December last year to the gem and

00:18:49,920 --> 00:18:54,340
then we were able to roll that out to

00:18:52,380 --> 00:18:56,139
other people as well as in github

00:18:54,340 --> 00:18:58,960
and then we use that in this in the

00:18:56,139 --> 00:19:00,820
stator that we're exporting the other

00:18:58,960 --> 00:19:03,159
thing that we do is to track expected

00:19:00,820 --> 00:19:04,809
errors so a positing error is a

00:19:03,159 --> 00:19:06,580
perfectly legitimate error if somebody's

00:19:04,809 --> 00:19:08,080
made a mistake and yes we'd like to know

00:19:06,580 --> 00:19:10,869
about that for the reasons of educating

00:19:08,080 --> 00:19:12,580
folks but for management to look at a

00:19:10,869 --> 00:19:14,679
graph and say well you're getting a lot

00:19:12,580 --> 00:19:17,349
of why you're not sending a 200 then why

00:19:14,679 --> 00:19:21,129
is this happening they tend to worry

00:19:17,349 --> 00:19:24,460
sometimes when they shouldn't and what

00:19:21,129 --> 00:19:27,580
this helps us do is is to explain to

00:19:24,460 --> 00:19:29,679
them and a wider audience that not all

00:19:27,580 --> 00:19:34,719
errors about errors some are user

00:19:29,679 --> 00:19:38,109
initiated and it also helps for the SRE

00:19:34,719 --> 00:19:40,029
folks and and whenever we need to be an

00:19:38,109 --> 00:19:42,609
incident command and we're looking at

00:19:40,029 --> 00:19:44,499
various graphs and things for me to now

00:19:42,609 --> 00:19:46,119
to be able to say hey look no this is

00:19:44,499 --> 00:19:48,639
this is within the ranges this is good

00:19:46,119 --> 00:19:50,619
good errors versus well what the heck's

00:19:48,639 --> 00:19:52,359
going on here we need to we need to have

00:19:50,619 --> 00:19:54,940
a look into that so that's been really

00:19:52,359 --> 00:19:57,849
valuable to us too and I guess the final

00:19:54,940 --> 00:19:58,779
one especially when I've already said

00:19:57,849 --> 00:20:01,479
that we haven't to deal with over a

00:19:58,779 --> 00:20:03,700
billion requests a day is that having an

00:20:01,479 --> 00:20:07,179
idea of query size is really really

00:20:03,700 --> 00:20:08,499
useful for my capacity planning there's

00:20:07,179 --> 00:20:10,989
also the timeout concerns with

00:20:08,499 --> 00:20:12,759
individual requests too but the capacity

00:20:10,989 --> 00:20:15,519
planning is very key to the business as

00:20:12,759 --> 00:20:17,919
well so having that information and more

00:20:15,519 --> 00:20:20,139
available ease is better for us so for

00:20:17,919 --> 00:20:23,080
rest it's kind of easy I say that rest

00:20:20,139 --> 00:20:25,479
people not hate on me for that but what

00:20:23,080 --> 00:20:28,330
I mean is that an endpoint is a request

00:20:25,479 --> 00:20:30,999
and every endpoint is a thing and that's

00:20:28,330 --> 00:20:33,789
you know given the standard crud rest

00:20:30,999 --> 00:20:35,739
design that's what happens or as we've

00:20:33,789 --> 00:20:37,869
graph QL you'll just hit / graphic ul

00:20:35,739 --> 00:20:39,700
and that request could be like a really

00:20:37,869 --> 00:20:42,369
simple thing getting an object or it big

00:20:39,700 --> 00:20:45,159
it could be requesting most of our

00:20:42,369 --> 00:20:47,379
database worth of objects at least for

00:20:45,159 --> 00:20:50,349
you know public repositories which is

00:20:47,379 --> 00:20:51,729
massive so by having this information

00:20:50,349 --> 00:20:54,190
about the objects that we're accessing

00:20:51,729 --> 00:20:56,679
we can at least say we can like like

00:20:54,190 --> 00:20:58,839
multiply things out and say actually

00:20:56,679 --> 00:21:00,909
this is realistically the capacity that

00:20:58,839 --> 00:21:03,909
the graph QL requests are taking and

00:21:00,909 --> 00:21:06,249
what's going on there and that helps us

00:21:03,909 --> 00:21:07,570
with you know even forward planning a

00:21:06,249 --> 00:21:07,810
year in advance for hardware requests

00:21:07,570 --> 00:21:10,300
because

00:21:07,810 --> 00:21:14,980
our own servers and things like that so

00:21:10,300 --> 00:21:16,240
that's been super useful to us my final

00:21:14,980 --> 00:21:19,690
thought before I let you all run away

00:21:16,240 --> 00:21:22,600
and relax your brains after two days of

00:21:19,690 --> 00:21:25,410
hard hard listening and learning is that

00:21:22,600 --> 00:21:28,000
I think it's really key for public api's

00:21:25,410 --> 00:21:30,220
all one's a scale or in our case both

00:21:28,000 --> 00:21:33,550
that you have to consider things from

00:21:30,220 --> 00:21:35,320
the API owners perspective api's really

00:21:33,550 --> 00:21:38,470
need to be thought of as a product in my

00:21:35,320 --> 00:21:39,760
opinion and integrators are important

00:21:38,470 --> 00:21:41,350
and we definitely wanna make things

00:21:39,760 --> 00:21:43,680
better for them but you need internal

00:21:41,350 --> 00:21:48,520
insights to help yourself you really do

00:21:43,680 --> 00:21:50,170
and then not then they're an

00:21:48,520 --> 00:21:53,350
often-overlooked part of running an api

00:21:50,170 --> 00:21:56,760
I think we you know doing all of what

00:21:53,350 --> 00:21:59,230
we've done now and over time we maybe

00:21:56,760 --> 00:22:01,540
get to a point where we say why let's

00:21:59,230 --> 00:22:05,170
return safe and secure hints to users

00:22:01,540 --> 00:22:06,730
about what they are doing and what they

00:22:05,170 --> 00:22:10,180
didn't do that or they didn't do it that

00:22:06,730 --> 00:22:12,460
way but what we really need is together

00:22:10,180 --> 00:22:15,670
even more data than we have and more

00:22:12,460 --> 00:22:16,600
long-term analysis to do that and and so

00:22:15,670 --> 00:22:18,850
that's something that we would be

00:22:16,600 --> 00:22:20,800
looking to do in the future but you know

00:22:18,850 --> 00:22:22,960
we're getting real world data now and

00:22:20,800 --> 00:22:26,410
it's been super helpful to us so if

00:22:22,960 --> 00:22:27,880
you've got situations where you don't

00:22:26,410 --> 00:22:30,100
own the client and the server I'd really

00:22:27,880 --> 00:22:31,810
encourage you to log as much as you can

00:22:30,100 --> 00:22:35,410
in a safe and secure way because it's

00:22:31,810 --> 00:22:37,450
really helpful to you and yeah if you

00:22:35,410 --> 00:22:39,910
have any questions or comments you can

00:22:37,450 --> 00:22:42,550
find me in all of those places I like to

00:22:39,910 --> 00:22:45,340
be consistent with my name it sort stops

00:22:42,550 --> 00:22:46,870
me getting me confused so and yeah I'd

00:22:45,340 --> 00:22:48,840
really like to thank you for your time

00:22:46,870 --> 00:22:51,790
and for listening to me

00:22:48,840 --> 00:22:51,790

YouTube URL: https://www.youtube.com/watch?v=YNTRfzmaQmk


