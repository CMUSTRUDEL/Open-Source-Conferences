Title: Exposing Salesforce data through GraphQL (ANDREI ANISIMOV - CEO and Founder at 8base)
Publication date: 2019-11-02
Playlist: GraphQL Summit 2019
Description: 
	Salesforce is the largest relational enterprise data store in the world. This talk explores how to unlock the data inside Salesforce using GraphQL and make it easy to build front-end customer-facing apps on top of it using Apollo Client.
Captions: 
	00:00:00,710 --> 00:00:05,520
hi guys do you hear me okay alright

00:00:03,929 --> 00:00:07,950
great so my name is Andrea and you seem

00:00:05,520 --> 00:00:10,799
off I work at a base we are founding

00:00:07,950 --> 00:00:13,049
member of Graf Cure Foundation and today

00:00:10,799 --> 00:00:16,410
we're going to talk about exposing

00:00:13,049 --> 00:00:19,619
Salesforce data through graph QL okay

00:00:16,410 --> 00:00:23,640
and but first let's talk about why this

00:00:19,619 --> 00:00:27,689
is important at all so if you if you

00:00:23,640 --> 00:00:31,199
think about sort of over the last maybe

00:00:27,689 --> 00:00:35,010
10 20 years we have ubiquity of consumer

00:00:31,199 --> 00:00:37,080
apps and regular people get more and

00:00:35,010 --> 00:00:38,760
more accustomed to amazing experiences

00:00:37,080 --> 00:00:41,990
with this apps when you use uber when

00:00:38,760 --> 00:00:45,360
you use Airbnb or Facebook you sort of

00:00:41,990 --> 00:00:49,940
used to that sleek UI great interactions

00:00:45,360 --> 00:00:53,040
etc and and so that's how people

00:00:49,940 --> 00:00:54,450
increasingly view businesses they view

00:00:53,040 --> 00:00:57,120
them through the digital interactions

00:00:54,450 --> 00:00:58,830
with businesses so if the app is the

00:00:57,120 --> 00:01:00,840
only way for you to interact let's say

00:00:58,830 --> 00:01:03,870
with a bank then your whole perception

00:01:00,840 --> 00:01:06,000
about the bank will be defined by by

00:01:03,870 --> 00:01:07,740
your experience with this app yet when

00:01:06,000 --> 00:01:10,650
it comes to sort of digital

00:01:07,740 --> 00:01:13,620
transformation we still building

00:01:10,650 --> 00:01:16,200
external consumer facing apps same way

00:01:13,620 --> 00:01:19,470
we build them you know maybe 10 years

00:01:16,200 --> 00:01:22,920
ago we still have to basically define a

00:01:19,470 --> 00:01:25,800
custom API we we have to write a client

00:01:22,920 --> 00:01:27,810
that consumes this API if the data sits

00:01:25,800 --> 00:01:29,400
in multiple different data stores we

00:01:27,810 --> 00:01:32,850
have to have some type of middleware

00:01:29,400 --> 00:01:35,940
integration engine so so in other words

00:01:32,850 --> 00:01:38,100
it's pretty much same it's there is not

00:01:35,940 --> 00:01:40,110
much progress there while at the same

00:01:38,100 --> 00:01:42,000
time digital transformation when it

00:01:40,110 --> 00:01:45,240
comes to internal applications for

00:01:42,000 --> 00:01:46,979
employees it's it's been you know doing

00:01:45,240 --> 00:01:49,830
pretty well and we all know that there

00:01:46,979 --> 00:01:52,770
are tons of apps that internally people

00:01:49,830 --> 00:01:55,460
people consume to make their their sort

00:01:52,770 --> 00:01:57,630
of business processes more streamlined

00:01:55,460 --> 00:01:59,460
but yet the difference between a

00:01:57,630 --> 00:02:00,720
externally facing applications and

00:01:59,460 --> 00:02:02,130
internally facing applications is that

00:02:00,720 --> 00:02:04,500
when it comes to externally facing

00:02:02,130 --> 00:02:06,659
applications there is much more sort of

00:02:04,500 --> 00:02:09,140
like emphasis on the UI on the branding

00:02:06,659 --> 00:02:11,430
so it's pretty hard to sort of do the

00:02:09,140 --> 00:02:13,410
some type of template app that will

00:02:11,430 --> 00:02:14,310
auto-generate all the screens you still

00:02:13,410 --> 00:02:16,170
need a

00:02:14,310 --> 00:02:18,989
Rondon developers to build a custom

00:02:16,170 --> 00:02:20,580
custom UI but now the front-end

00:02:18,989 --> 00:02:23,550
developers somehow needs to get all this

00:02:20,580 --> 00:02:25,980
data out of out of your enterprise sort

00:02:23,550 --> 00:02:28,080
of data graph and the modern enterprise

00:02:25,980 --> 00:02:29,880
data graph it become is becoming

00:02:28,080 --> 00:02:32,069
increasingly complex because you now

00:02:29,880 --> 00:02:34,709
have multiple different systems that

00:02:32,069 --> 00:02:37,709
store data data is very fragmented it's

00:02:34,709 --> 00:02:40,610
it's relational in its nature but this

00:02:37,709 --> 00:02:43,769
relationships are not explicitly defined

00:02:40,610 --> 00:02:45,540
then every system has separate API that

00:02:43,769 --> 00:02:46,980
you need to learn and understand in

00:02:45,540 --> 00:02:49,470
order to be able to create an

00:02:46,980 --> 00:02:51,959
integration and expose this data outside

00:02:49,470 --> 00:02:54,569
to the front-end developers and then you

00:02:51,959 --> 00:02:56,790
also have security issues and and you

00:02:54,569 --> 00:02:59,370
know other other similar problems

00:02:56,790 --> 00:03:01,980
so basically burden is on on the

00:02:59,370 --> 00:03:05,580
front-end developers and and middleware

00:03:01,980 --> 00:03:10,170
engineers to to make it all happen and

00:03:05,580 --> 00:03:13,620
so we're gonna pick Salesforce as the as

00:03:10,170 --> 00:03:15,480
the backend system that we want to take

00:03:13,620 --> 00:03:17,700
data from and expose it to the front-end

00:03:15,480 --> 00:03:20,730
application and why sells for Salesforce

00:03:17,700 --> 00:03:23,340
is arguably the largest concentration of

00:03:20,730 --> 00:03:26,850
consumer data a customer data in the

00:03:23,340 --> 00:03:29,489
world it's number one CRM and and often

00:03:26,850 --> 00:03:32,549
when you want to build some type of

00:03:29,489 --> 00:03:37,440
customer portal you need to present

00:03:32,549 --> 00:03:40,079
customer data there and so and now why

00:03:37,440 --> 00:03:44,130
graph QL right how graph QL is uniquely

00:03:40,079 --> 00:03:46,200
positioned to solve this problem and the

00:03:44,130 --> 00:03:48,450
the reasons why graph QL is because

00:03:46,200 --> 00:03:50,790
first of all graph kill is composable so

00:03:48,450 --> 00:03:53,010
it allows you to compose different data

00:03:50,790 --> 00:03:55,019
sources teach them together and not just

00:03:53,010 --> 00:03:57,120
sort of stitch them together in a flat

00:03:55,019 --> 00:03:59,639
sense like rest you have you have bunch

00:03:57,120 --> 00:04:01,440
of resources you can you can create a

00:03:59,639 --> 00:04:03,660
graph which is like enterprise data

00:04:01,440 --> 00:04:05,519
graph where you can explicitly define

00:04:03,660 --> 00:04:07,380
relationships between all your different

00:04:05,519 --> 00:04:10,109
entities in your business model and

00:04:07,380 --> 00:04:12,180
those entities can live across different

00:04:10,109 --> 00:04:13,950
systems yet can be consumed by a

00:04:12,180 --> 00:04:16,620
front-end developer as a single graph

00:04:13,950 --> 00:04:18,900
without necessarily even knowing where

00:04:16,620 --> 00:04:21,209
the data is coming from and then also

00:04:18,900 --> 00:04:22,890
the graph QL is open standard meaning

00:04:21,209 --> 00:04:25,110
that is as a front-end developer or

00:04:22,890 --> 00:04:26,400
mobile developer once you learn it

00:04:25,110 --> 00:04:29,280
you don't have to sort of literally

00:04:26,400 --> 00:04:30,900
learn it again and again for a different

00:04:29,280 --> 00:04:32,759
kind of system with different kind of

00:04:30,900 --> 00:04:34,740
data if you consume Salesforce data

00:04:32,759 --> 00:04:37,590
through graph QL you can might as well

00:04:34,740 --> 00:04:41,699
just consumes s AP data workday data you

00:04:37,590 --> 00:04:44,669
know whatever you need so with that

00:04:41,699 --> 00:04:48,120
let's just take a look at a very simple

00:04:44,669 --> 00:04:49,800
app that takes advantage of sort of

00:04:48,120 --> 00:04:52,139
consuming data from multiple sources

00:04:49,800 --> 00:04:54,960
including Salesforce and see how it

00:04:52,139 --> 00:04:56,759
works from the perspective of developer

00:04:54,960 --> 00:04:58,440
experience of the front-end developer so

00:04:56,759 --> 00:05:01,560
the goal of the stock is sort of show

00:04:58,440 --> 00:05:03,030
how in the future when with the

00:05:01,560 --> 00:05:04,889
proliferation of graph QL

00:05:03,030 --> 00:05:08,509
and different integration engines that

00:05:04,889 --> 00:05:10,860
allow you to configure graph KPI

00:05:08,509 --> 00:05:12,900
declaratively or through configuration

00:05:10,860 --> 00:05:15,360
without writing any code how you can

00:05:12,900 --> 00:05:17,310
really improve developer experience of

00:05:15,360 --> 00:05:19,500
people sort of for the front lines who

00:05:17,310 --> 00:05:21,810
build this customer experiences all

00:05:19,500 --> 00:05:25,289
right and with that we're gonna switch

00:05:21,810 --> 00:05:27,840
to the to the browser and the app we're

00:05:25,289 --> 00:05:30,000
gonna show is extremely simple it's just

00:05:27,840 --> 00:05:32,610
a it's basically the use cases the

00:05:30,000 --> 00:05:35,729
following you have customer data inside

00:05:32,610 --> 00:05:37,620
of Salesforce and you you are an

00:05:35,729 --> 00:05:40,080
insurance agency so you sell insurance

00:05:37,620 --> 00:05:41,460
policies and salesforce has custom

00:05:40,080 --> 00:05:43,110
modules that actually are allow you to

00:05:41,460 --> 00:05:46,680
run insurance business on top of it so

00:05:43,110 --> 00:05:48,690
people store policies insurance policies

00:05:46,680 --> 00:05:50,039
in salesforce so this is my cells for

00:05:48,690 --> 00:05:52,800
developer instance that already has

00:05:50,039 --> 00:05:54,750
policies custom object defined it has

00:05:52,800 --> 00:05:57,259
accounts which customer accounts and

00:05:54,750 --> 00:05:59,819
then the policy has a relationship with

00:05:57,259 --> 00:06:03,810
customer account and so what we want to

00:05:59,819 --> 00:06:06,300
do is we want to you know presently we

00:06:03,810 --> 00:06:08,550
have customers email us or they call us

00:06:06,300 --> 00:06:11,310
and say hey when is my policy expiring

00:06:08,550 --> 00:06:14,340
or how can i submit a claim we want to

00:06:11,310 --> 00:06:18,080
build a customer face an app that allows

00:06:14,340 --> 00:06:22,710
people to sell service to this and so

00:06:18,080 --> 00:06:24,120
the app is is not designed at all but

00:06:22,710 --> 00:06:26,960
functionally it works like this it

00:06:24,120 --> 00:06:30,090
presents the customer information

00:06:26,960 --> 00:06:33,000
it presents lists of the policies that

00:06:30,090 --> 00:06:35,270
they have and then then they can submit

00:06:33,000 --> 00:06:35,270
a claim

00:06:37,680 --> 00:06:44,980
and the claim appears here and then if

00:06:42,120 --> 00:06:47,110
salespeople salespeople sell another

00:06:44,980 --> 00:06:48,580
policy to discuss dinner then the policy

00:06:47,110 --> 00:06:51,520
should appear here and the customers see

00:06:48,580 --> 00:06:53,200
when when it's when it expires so of

00:06:51,520 --> 00:06:54,460
course we can design it we can make a

00:06:53,200 --> 00:06:55,810
mobile app out of it

00:06:54,460 --> 00:06:57,190
it doesn't really matter it's it's

00:06:55,810 --> 00:06:59,380
irrelevant for the purpose of the stock

00:06:57,190 --> 00:07:02,620
we've sort of focusing on the data here

00:06:59,380 --> 00:07:05,410
so let's let's look how it works under

00:07:02,620 --> 00:07:06,700
the hood for as an integration engine

00:07:05,410 --> 00:07:10,030
we're going to we're going to be using a

00:07:06,700 --> 00:07:13,030
base we recently released the feature

00:07:10,030 --> 00:07:15,100
where we allow to integrate with

00:07:13,030 --> 00:07:17,800
Salesforce and in the future multiple

00:07:15,100 --> 00:07:20,140
other data sources and then also define

00:07:17,800 --> 00:07:21,820
your custom table tables and define

00:07:20,140 --> 00:07:23,350
relationships between all this data

00:07:21,820 --> 00:07:27,640
living in different systems so I'm going

00:07:23,350 --> 00:07:31,360
to show how how it it's all possible so

00:07:27,640 --> 00:07:33,340
under the hood this is a simple react

00:07:31,360 --> 00:07:38,490
application all the logic here is

00:07:33,340 --> 00:07:41,980
defined in a in a single JS file we have

00:07:38,490 --> 00:07:43,780
several graphical queries here and a

00:07:41,980 --> 00:07:49,090
little bit later I'm gonna show how I

00:07:43,780 --> 00:07:53,440
can figure this but first we take the

00:07:49,090 --> 00:07:55,150
the current user and then we look at

00:07:53,440 --> 00:07:57,640
their Salesforce account so account is

00:07:55,150 --> 00:07:59,410
the relationship that looks directly

00:07:57,640 --> 00:08:02,160
inside of Salesforce and it takes data

00:07:59,410 --> 00:08:06,730
from there in real-time and then it

00:08:02,160 --> 00:08:08,830
automatically it interrogate the the

00:08:06,730 --> 00:08:10,450
Salesforce data model and it knows for

00:08:08,830 --> 00:08:12,670
example that account has a name field

00:08:10,450 --> 00:08:15,850
and then it has a policies relationship

00:08:12,670 --> 00:08:18,400
and then the policies it's a it's a it's

00:08:15,850 --> 00:08:20,620
a table and it has different fields

00:08:18,400 --> 00:08:22,900
inside of this table and the the fields

00:08:20,620 --> 00:08:24,580
that have underscores Corsi it just

00:08:22,900 --> 00:08:28,120
means custom fields that I define that's

00:08:24,580 --> 00:08:29,980
how Salesforce does it we have the

00:08:28,120 --> 00:08:32,770
profile query that takes the user

00:08:29,980 --> 00:08:35,830
information a list of the policies we

00:08:32,770 --> 00:08:39,250
have the claims query that takes a

00:08:35,830 --> 00:08:41,140
policy by ID and renders the list of

00:08:39,250 --> 00:08:44,260
claims that were submitted for that

00:08:41,140 --> 00:08:46,180
specific policy and as you can see the

00:08:44,260 --> 00:08:48,490
interesting thing here and that's where

00:08:46,180 --> 00:08:50,290
the sort of the beauty of of relational

00:08:48,490 --> 00:08:54,399
data graph of graph

00:08:50,290 --> 00:08:57,430
comes in that the policy object lives in

00:08:54,399 --> 00:08:59,769
Salesforce but the claims object lives

00:08:57,430 --> 00:09:01,509
inside of a base or can live in you can

00:08:59,769 --> 00:09:03,880
live in a custom database it doesn't it

00:09:01,509 --> 00:09:07,600
doesn't really matter but the cool thing

00:09:03,880 --> 00:09:10,000
is that this child object actually lives

00:09:07,600 --> 00:09:12,069
inside of a different system but yet for

00:09:10,000 --> 00:09:15,069
front-end developers it just seemed they

00:09:12,069 --> 00:09:18,100
seemed simple they simply get the data

00:09:15,069 --> 00:09:20,290
they need without really even knowing

00:09:18,100 --> 00:09:21,940
where the data is coming from and then

00:09:20,290 --> 00:09:25,870
the third query you have it's actually

00:09:21,940 --> 00:09:30,250
mutation it allows us to create a claim

00:09:25,870 --> 00:09:34,389
and Link it by policy ID to the policy

00:09:30,250 --> 00:09:36,250
inside of Salesforce okay and then we

00:09:34,389 --> 00:09:37,329
use a polar client here so the

00:09:36,250 --> 00:09:39,069
application is already pre-configured

00:09:37,329 --> 00:09:41,850
with a standard Apollo client

00:09:39,069 --> 00:09:45,009
it also has in-memory caching enabled

00:09:41,850 --> 00:09:49,600
and pretty much it m+ authentication

00:09:45,009 --> 00:09:53,500
powered by a zero so here we just use

00:09:49,600 --> 00:09:56,260
this simple we use the use query hook

00:09:53,500 --> 00:09:59,620
which is provided by a reactor polar to

00:09:56,260 --> 00:10:02,709
load the profile data and render email

00:09:59,620 --> 00:10:04,630
and name of the user and then the same

00:10:02,709 --> 00:10:07,980
very similar way we use the same exact

00:10:04,630 --> 00:10:09,940
query to render a list of policies and

00:10:07,980 --> 00:10:12,910
interesting that you know even though we

00:10:09,940 --> 00:10:14,740
use the same query twice the there is

00:10:12,910 --> 00:10:16,690
actually only one request because Apollo

00:10:14,740 --> 00:10:19,449
client does the caching under the hood

00:10:16,690 --> 00:10:21,310
and if the query is already in cache

00:10:19,449 --> 00:10:24,010
that it just takes it from cache it

00:10:21,310 --> 00:10:26,949
doesn't where it doesn't query the

00:10:24,010 --> 00:10:31,449
server again will render a list of

00:10:26,949 --> 00:10:33,910
policies here we same way we render list

00:10:31,449 --> 00:10:38,260
of claims again using the user's query

00:10:33,910 --> 00:10:40,839
hook and claims query for specific

00:10:38,260 --> 00:10:43,209
policies that we selected and then the

00:10:40,839 --> 00:10:45,160
last component we have is a new claim

00:10:43,209 --> 00:10:48,730
form which is the just a form with a

00:10:45,160 --> 00:10:51,490
single description field that allows you

00:10:48,730 --> 00:10:54,550
to create a new clay so this logic is

00:10:51,490 --> 00:10:57,040
very very simple there is a minimum

00:10:54,550 --> 00:10:59,410
amount of boilerplate here what would

00:10:57,040 --> 00:11:03,740
cool about graph kill and a polar is

00:10:59,410 --> 00:11:05,150
that it really abstracts away all the

00:11:03,740 --> 00:11:07,420
regular boilerplate you need to write

00:11:05,150 --> 00:11:09,650
let's say with something like redox and

00:11:07,420 --> 00:11:11,900
allows you to focus on the core business

00:11:09,650 --> 00:11:14,120
logic that you need to your application

00:11:11,900 --> 00:11:17,110
and then we have this sort of parent

00:11:14,120 --> 00:11:21,110
component that just renders all these

00:11:17,110 --> 00:11:22,820
sub components together basically that's

00:11:21,110 --> 00:11:28,850
it that's that's all the file that

00:11:22,820 --> 00:11:30,860
defines this application and now let's

00:11:28,850 --> 00:11:33,920
see if we for example if you wanted to

00:11:30,860 --> 00:11:38,780
go and add another policy to Salesforce

00:11:33,920 --> 00:11:47,600
and we select this account start date

00:11:38,780 --> 00:11:51,490
and date you save it we it's linked to

00:11:47,600 --> 00:11:54,320
our account let's see if we refresh it

00:11:51,490 --> 00:11:55,940
then now we have two policies and now we

00:11:54,320 --> 00:11:59,720
can select which one we want to submit

00:11:55,940 --> 00:12:03,440
the claim for okay so now let's see how

00:11:59,720 --> 00:12:05,600
a front-end developer using a base could

00:12:03,440 --> 00:12:09,290
could just configure this API without

00:12:05,600 --> 00:12:15,860
writing any almost no code on the back

00:12:09,290 --> 00:12:18,770
end okay so this is the a base UI it has

00:12:15,860 --> 00:12:21,770
the salesforce configuration Salesforce

00:12:18,770 --> 00:12:25,280
integration enabled here it simply just

00:12:21,770 --> 00:12:28,700
gives access to my Salesforce instance

00:12:25,280 --> 00:12:31,700
here and what it allows me to do is I

00:12:28,700 --> 00:12:36,260
can now bring in any table from inside

00:12:31,700 --> 00:12:39,020
Salesforce so let's say the I have a

00:12:36,260 --> 00:12:45,220
contact table already exposed here I'm

00:12:39,020 --> 00:12:51,380
gonna delete it and then I can just

00:12:45,220 --> 00:12:53,900
reinforce it again contact and now I can

00:12:51,380 --> 00:12:56,600
operate with this table as if it's the

00:12:53,900 --> 00:12:59,420
local table I can add new fields to it I

00:12:56,600 --> 00:13:02,450
can create relationships between this

00:12:59,420 --> 00:13:04,730
table and other tables and you know

00:13:02,450 --> 00:13:08,320
basically build just visually build this

00:13:04,730 --> 00:13:08,320
data graph that I need so for example

00:13:08,800 --> 00:13:16,610
how do we link user account in a base to

00:13:14,450 --> 00:13:17,839
Salesforce account right

00:13:16,610 --> 00:13:20,269
we seem

00:13:17,839 --> 00:13:22,339
so this is user table it's a system a

00:13:20,269 --> 00:13:24,529
base table that simply represents the

00:13:22,339 --> 00:13:27,860
currently logged in user or all users in

00:13:24,529 --> 00:13:31,369
the system right so we just drag the

00:13:27,860 --> 00:13:33,019
account table on it we define the nature

00:13:31,369 --> 00:13:35,990
of relationships and it's going to be

00:13:33,019 --> 00:13:37,610
one to one each user and a base will be

00:13:35,990 --> 00:13:44,540
will have a corresponding account at

00:13:37,610 --> 00:13:48,679
Salesforce we're gonna save that field

00:13:44,540 --> 00:13:51,139
and then here we also created a custom

00:13:48,679 --> 00:13:52,850
claims table let me just delete it and

00:13:51,139 --> 00:13:56,410
recreate it again just so you can see

00:13:52,850 --> 00:13:56,410
how how it's done

00:14:03,290 --> 00:14:12,560
claims description it's a field of type

00:14:10,040 --> 00:14:16,580
text and we can define many more fields

00:14:12,560 --> 00:14:19,070
and then we can connect claim to a

00:14:16,580 --> 00:14:21,620
specific policy because and the reason

00:14:19,070 --> 00:14:22,850
why I created claim table not inside of

00:14:21,620 --> 00:14:25,490
Salesforce but inside of this

00:14:22,850 --> 00:14:27,050
application is because usually in

00:14:25,490 --> 00:14:28,880
businesses Salesforce it's sort of like

00:14:27,050 --> 00:14:31,070
Holly Grail like it's like a it's like a

00:14:28,880 --> 00:14:32,330
thing that nobody can touch because it's

00:14:31,070 --> 00:14:34,790
very expensive their Salesforce

00:14:32,330 --> 00:14:36,470
developers are very expensive so they

00:14:34,790 --> 00:14:38,600
paid a lot of money to configure this

00:14:36,470 --> 00:14:40,220
Salesforce instance and now like nobody

00:14:38,600 --> 00:14:42,290
can touch it because if you know if it

00:14:40,220 --> 00:14:44,060
breaks it's a core system if you can't

00:14:42,290 --> 00:14:45,800
look up customer data or something gets

00:14:44,060 --> 00:14:49,010
grew up the whole business will be

00:14:45,800 --> 00:14:52,010
impacted so they not necessarily want to

00:14:49,010 --> 00:14:53,840
give some maybe it's a contractor

00:14:52,010 --> 00:14:55,340
front-end developer who is building the

00:14:53,840 --> 00:14:57,980
app and they don't want to give them

00:14:55,340 --> 00:15:00,650
access to mess with Salesforce so that's

00:14:57,980 --> 00:15:03,560
why you define this table in a separate

00:15:00,650 --> 00:15:06,440
system and then you just basically link

00:15:03,560 --> 00:15:08,090
it to the Salesforce table and now you

00:15:06,440 --> 00:15:10,070
can define the nature of this

00:15:08,090 --> 00:15:12,980
relationship you can say it's allow

00:15:10,070 --> 00:15:18,140
multiple claims per policy okay awesome

00:15:12,980 --> 00:15:21,170
looks good we save it and that's what

00:15:18,140 --> 00:15:22,490
allows us to to connect this tables that

00:15:21,170 --> 00:15:25,990
live in in multiple different places

00:15:22,490 --> 00:15:29,510
okay so this automatically builds a

00:15:25,990 --> 00:15:41,300
graph QL API for us so now we can say

00:15:29,510 --> 00:15:44,920
something like user take the email of

00:15:41,300 --> 00:15:44,920
the user in Salesforce

00:15:48,370 --> 00:15:54,790
and then we can take their ID inside of

00:15:51,550 --> 00:15:58,149
a base the email their associated

00:15:54,790 --> 00:15:59,680
Salesforce account and then from that

00:15:58,149 --> 00:16:02,980
Salesforce account we can take their

00:15:59,680 --> 00:16:04,749
name maybe some other information if we

00:16:02,980 --> 00:16:07,689
want to and then we can take their

00:16:04,749 --> 00:16:10,230
policies because this relationship is

00:16:07,689 --> 00:16:15,790
defined directly inside of Salesforce

00:16:10,230 --> 00:16:22,240
and then from each policy we can query

00:16:15,790 --> 00:16:25,389
its fields start date and date and also

00:16:22,240 --> 00:16:28,509
we can get a list of claims for this

00:16:25,389 --> 00:16:29,949
policy even though the claims live so we

00:16:28,509 --> 00:16:32,559
sort of have the circle relationship

00:16:29,949 --> 00:16:34,059
where first we relate local object with

00:16:32,559 --> 00:16:36,939
remote Salesforce object and then we

00:16:34,059 --> 00:16:39,129
related back to a local claims object

00:16:36,939 --> 00:16:41,259
which is pretty cool which i think is is

00:16:39,129 --> 00:16:46,660
why graph key is uniquely positioned to

00:16:41,259 --> 00:16:51,360
solve that problem so take a claim in

00:16:46,660 --> 00:16:51,360
description you let's see what happens

00:16:53,999 --> 00:16:58,720
make sure it's oh I know what happened

00:16:57,160 --> 00:17:04,499
because I deleted that relationship it

00:16:58,720 --> 00:17:04,499
now lost the Association so

00:17:10,490 --> 00:17:16,190
really that user change this email here

00:17:14,270 --> 00:17:20,050
so I can log in as if it's a new user

00:17:16,190 --> 00:17:20,050
who uses the system for the first time

00:17:20,860 --> 00:17:25,370
okay

00:17:22,690 --> 00:17:27,830
I'm gonna sign out and that's the

00:17:25,370 --> 00:17:29,720
experience of a of a customer who signs

00:17:27,830 --> 00:17:31,310
up in the system for the first time and

00:17:29,720 --> 00:17:33,770
again you don't need to use our zero

00:17:31,310 --> 00:17:41,590
necessarily it's just you know to make

00:17:33,770 --> 00:17:41,590
it sort of quick we can sign up

00:17:59,240 --> 00:18:05,539
okay cool so now I see my policies and

00:18:02,120 --> 00:18:07,460
now if I go in 8th base and a refresh

00:18:05,539 --> 00:18:10,010
list of users I can see this new user

00:18:07,460 --> 00:18:12,649
and they have associated Salesforce

00:18:10,010 --> 00:18:15,200
account so this account come is a

00:18:12,649 --> 00:18:17,120
relationship to Salesforce account but

00:18:15,200 --> 00:18:20,169
the only thing is how do you basically

00:18:17,120 --> 00:18:22,730
how does a base magically knows that

00:18:20,169 --> 00:18:26,990
that this user is associated with that

00:18:22,730 --> 00:18:28,970
Salesforce account well that's where we

00:18:26,990 --> 00:18:30,980
we have to write a little bit of backend

00:18:28,970 --> 00:18:33,980
logic and this logic looks like this

00:18:30,980 --> 00:18:36,590
this is a lambda function that gets

00:18:33,980 --> 00:18:41,210
triggered every time a new user is

00:18:36,590 --> 00:18:43,130
created and it gets deployed inside of

00:18:41,210 --> 00:18:44,330
inside of like sort of a based execution

00:18:43,130 --> 00:18:47,120
environment which is powered by a

00:18:44,330 --> 00:18:49,370
doubles lambda and here we simply take

00:18:47,120 --> 00:18:54,110
the email from the payload of this new

00:18:49,370 --> 00:18:57,350
user and using the graph QL schema we

00:18:54,110 --> 00:19:00,080
just use the field connect we connect an

00:18:57,350 --> 00:19:02,570
account inside of Salesforce based on on

00:19:00,080 --> 00:19:04,490
this field so what what its gonna do is

00:19:02,570 --> 00:19:06,140
going to find Salesforce account with

00:19:04,490 --> 00:19:08,090
this email and it's going to establish

00:19:06,140 --> 00:19:11,270
relationship between this new user and

00:19:08,090 --> 00:19:13,669
that account so that that's all the back

00:19:11,270 --> 00:19:16,549
and logic that we need to write in order

00:19:13,669 --> 00:19:18,230
to enable that and that's it pretty much

00:19:16,549 --> 00:19:20,770
we have the application now we can

00:19:18,230 --> 00:19:22,820
submit the customers can submit claims

00:19:20,770 --> 00:19:30,950
obviously it can be much more complex

00:19:22,820 --> 00:19:33,620
than this description of claim and you

00:19:30,950 --> 00:19:36,590
know very very easy to build this app

00:19:33,620 --> 00:19:39,440
and now what's even cooler is because

00:19:36,590 --> 00:19:43,880
there are there is a bunch of sort of

00:19:39,440 --> 00:19:46,970
tools for for front-end yeah ID plugins

00:19:43,880 --> 00:19:50,539
etc powered by a polar or some some

00:19:46,970 --> 00:19:52,940
other open source projects that make

00:19:50,539 --> 00:19:53,809
experience of front-end developers

00:19:52,940 --> 00:19:55,789
really cool

00:19:53,809 --> 00:19:59,360
for example the autocomplete so let's

00:19:55,789 --> 00:20:03,250
say maybe I want to render a phone

00:19:59,360 --> 00:20:05,750
number of the user right so I press

00:20:03,250 --> 00:20:08,240
control space and I see all the fields

00:20:05,750 --> 00:20:10,450
that exist inside of Salesforce for this

00:20:08,240 --> 00:20:10,450
object

00:20:10,820 --> 00:20:22,630
and I can add a phone and then I can

00:20:16,840 --> 00:20:22,630
change my component here

00:20:36,540 --> 00:20:43,580
and now I have the phone there is no

00:20:38,250 --> 00:20:43,580
phone for this user but if I add it here

00:20:49,610 --> 00:21:01,519
still no phone for this user huh former

00:20:53,210 --> 00:21:05,269
one something see something is not data

00:21:01,519 --> 00:21:11,960
user account phone oh okay

00:21:05,269 --> 00:21:13,220
its capital okay awesome I have it so as

00:21:11,960 --> 00:21:15,769
you can see it's pretty simple you don't

00:21:13,220 --> 00:21:18,559
need to hire any back-end developers and

00:21:15,769 --> 00:21:21,350
then potentially if you think about it

00:21:18,559 --> 00:21:23,330
that for for a base doing this sort of

00:21:21,350 --> 00:21:26,779
middleware is a is a business which

00:21:23,330 --> 00:21:28,960
means we can invest money into something

00:21:26,779 --> 00:21:32,629
like for example making sure that our

00:21:28,960 --> 00:21:34,519
definition are in in in sync with your

00:21:32,629 --> 00:21:35,869
Salesforce data so when you change

00:21:34,519 --> 00:21:37,580
something the Salesforce you will

00:21:35,869 --> 00:21:40,249
automatically reconfigure it or maybe it

00:21:37,580 --> 00:21:42,019
will alert you hey you know there is an

00:21:40,249 --> 00:21:43,850
inconsistency because there is no such

00:21:42,019 --> 00:21:46,129
table anymore there and you know do all

00:21:43,850 --> 00:21:49,929
bunch of neat things that sort of its

00:21:46,129 --> 00:21:52,549
scale makes sense but as an individual

00:21:49,929 --> 00:21:54,470
small medium business especially if you

00:21:52,549 --> 00:21:56,779
not if technology is not your core

00:21:54,470 --> 00:21:58,489
competency it becomes pretty challenging

00:21:56,779 --> 00:21:59,840
they're pretty expensive and and that's

00:21:58,489 --> 00:22:03,259
sort of like if you think about it

00:21:59,840 --> 00:22:06,049
that's the main reason why so most you

00:22:03,259 --> 00:22:07,129
know business apps kind of lacking you

00:22:06,049 --> 00:22:09,259
know so to speak

00:22:07,129 --> 00:22:11,749
comparing to to consumer assets because

00:22:09,259 --> 00:22:15,080
businesses they cannot recruit the best

00:22:11,749 --> 00:22:22,340
of the best developers to do this stuff

00:22:15,080 --> 00:22:25,730
so going back to our presentation to to

00:22:22,340 --> 00:22:28,129
conclude it so so how you know how is

00:22:25,730 --> 00:22:31,159
this better right first of all it's very

00:22:28,129 --> 00:22:32,450
it's very fast development you can put

00:22:31,159 --> 00:22:34,759
together such application very quickly

00:22:32,450 --> 00:22:36,409
you don't need to learn Salesforce API

00:22:34,759 --> 00:22:40,100
you don't need to think about

00:22:36,409 --> 00:22:41,739
authentication when it comes to like

00:22:40,100 --> 00:22:45,320
separate authentication for Salesforce

00:22:41,739 --> 00:22:48,200
you don't you don't need to maintain

00:22:45,320 --> 00:22:50,499
this middleware and hire specialized

00:22:48,200 --> 00:22:53,649
cells for developers and then the

00:22:50,499 --> 00:22:59,059
front-end devs just self-service to data

00:22:53,649 --> 00:23:02,359
so I hope that this gave you sort of

00:22:59,059 --> 00:23:03,470
like glimpse in how this potentially

00:23:02,359 --> 00:23:04,940
might work in the future

00:23:03,470 --> 00:23:06,260
obviously it's not gonna work for

00:23:04,940 --> 00:23:08,840
everything like if you're building

00:23:06,260 --> 00:23:11,330
something highly complex or require that

00:23:08,840 --> 00:23:13,580
requires like highlord or some type of

00:23:11,330 --> 00:23:15,710
sophistication sophisticated computation

00:23:13,580 --> 00:23:18,380
on the back end maybe you do need to

00:23:15,710 --> 00:23:21,830
build your own graph QL API but my

00:23:18,380 --> 00:23:24,380
opinion is that in the future most graph

00:23:21,830 --> 00:23:27,230
QL api's will be other generated they

00:23:24,380 --> 00:23:29,510
will be configured and just like you

00:23:27,230 --> 00:23:31,430
don't need to write custom C++ code when

00:23:29,510 --> 00:23:33,080
you add a new table to your sequel

00:23:31,430 --> 00:23:35,510
database you're not going to need to

00:23:33,080 --> 00:23:39,710
write custom code to add a new object to

00:23:35,510 --> 00:23:43,749
your graph QAPI thank you

00:23:39,710 --> 00:23:43,749

YouTube URL: https://www.youtube.com/watch?v=N5PWlvi0cws


