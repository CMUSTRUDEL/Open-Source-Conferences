Title: Simple caching, made difficult (ERIC BAER - Director Of Engineering at Livestock Nutrition Center)
Publication date: 2019-11-02
Playlist: GraphQL Summit 2019
Description: 
	Let's dive into the journey towards successfully synchronizing the TTL of your data with the cache expiration in a GraphQL request.
Captions: 
	00:00:01,450 --> 00:00:05,350
[Applause]

00:00:06,479 --> 00:00:14,110
hello hello okay cool

00:00:08,680 --> 00:00:17,230
my mic is on and the right okay Wow full

00:00:14,110 --> 00:00:19,120
rooms this is fantastic so for anybody

00:00:17,230 --> 00:00:20,650
who already knows me what's up for

00:00:19,120 --> 00:00:28,000
everybody else which is like everybody

00:00:20,650 --> 00:00:30,250
I'm Eric bear so I'm gonna reset this so

00:00:28,000 --> 00:00:32,259
for the kind of obligatory credentialing

00:00:30,250 --> 00:00:33,700
bit I am the director of technology at a

00:00:32,259 --> 00:00:36,700
company called livestock nutrition

00:00:33,700 --> 00:00:39,100
center yes livestock as in cows

00:00:36,700 --> 00:00:40,630
nutrition as in food and center is the

00:00:39,100 --> 00:00:43,510
place that you get the food we sell

00:00:40,630 --> 00:00:45,220
livestock feed before L&C I spent about

00:00:43,510 --> 00:00:48,010
five years in Seattle with define folks

00:00:45,220 --> 00:00:49,480
at formidable working mostly for for

00:00:48,010 --> 00:00:51,810
Starbucks and for Walmart labs a

00:00:49,480 --> 00:00:54,489
smattering of others and before that I

00:00:51,810 --> 00:00:56,380
was at a video conferencing video

00:00:54,489 --> 00:01:00,460
conferencing startup that really wishes

00:00:56,380 --> 00:01:03,850
it was zoom let's make sure these

00:01:00,460 --> 00:01:06,310
advance there we go okay with that out

00:01:03,850 --> 00:01:08,079
of the way let's dig in so I'm sure at

00:01:06,310 --> 00:01:09,960
least a few of you have heard about the

00:01:08,079 --> 00:01:13,659
three hardest things in computer science

00:01:09,960 --> 00:01:16,119
caching and off-by-one errors or if you

00:01:13,659 --> 00:01:18,609
are working in JavaScript that's caching

00:01:16,119 --> 00:01:20,259
and floating-point arithmetic so today I

00:01:18,609 --> 00:01:22,209
do not want to talk about floating-point

00:01:20,259 --> 00:01:24,490
arithmetic because I never want to talk

00:01:22,209 --> 00:01:26,319
about floating-point arithmetic today I

00:01:24,490 --> 00:01:29,579
want talk about caching and specifically

00:01:26,319 --> 00:01:31,929
HTTP caching as it relates to graph QL

00:01:29,579 --> 00:01:34,270
so I want to start off by talking about

00:01:31,929 --> 00:01:36,459
HTTP caching in general and I'm going to

00:01:34,270 --> 00:01:40,420
loop back to the graph QL part in just a

00:01:36,459 --> 00:01:42,670
little bit so what is HTTP caching so

00:01:40,420 --> 00:01:45,099
when you make an HTTP request it travels

00:01:42,670 --> 00:01:46,810
from through anywhere from about two to

00:01:45,099 --> 00:01:48,849
maybe a half-dozen intermediate pieces

00:01:46,810 --> 00:01:50,590
of software and each of these layers can

00:01:48,849 --> 00:01:54,639
return a cached response if one is

00:01:50,590 --> 00:01:56,619
available so for example imagine a kid

00:01:54,639 --> 00:01:57,999
looking for her Avengers Marvel Legends

00:01:56,619 --> 00:02:00,520
series endgame power gauntlet with

00:01:57,999 --> 00:02:02,709
articulated electronic fist she might

00:02:00,520 --> 00:02:05,349
start by bothering the closest adult

00:02:02,709 --> 00:02:06,639
around that's that's will call him Papa

00:02:05,349 --> 00:02:10,509
local he's sitting right there in the

00:02:06,639 --> 00:02:12,400
room he says ask your mom and mom is

00:02:10,509 --> 00:02:13,420
somewhere in the region she scampers

00:02:12,400 --> 00:02:16,090
from room to room you

00:02:13,420 --> 00:02:18,190
mom really loudly and mom says you'll

00:02:16,090 --> 00:02:20,230
have to go ask your sister proxy who

00:02:18,190 --> 00:02:23,590
probably knows what it is so in in a

00:02:20,230 --> 00:02:26,860
real application Papa local is the the

00:02:23,590 --> 00:02:30,160
browser cache there is an HTTP cache

00:02:26,860 --> 00:02:32,320
built into all browsers mobile platforms

00:02:30,160 --> 00:02:34,660
anything that implements HTTP I'm

00:02:32,320 --> 00:02:36,430
calling it a browser cache just so that

00:02:34,660 --> 00:02:38,560
we don't confuse it with the application

00:02:36,430 --> 00:02:41,590
cache that is implemented in something

00:02:38,560 --> 00:02:43,420
like relay or or Apollo client those are

00:02:41,590 --> 00:02:46,810
that's it's a different thing so this is

00:02:43,420 --> 00:02:51,070
an HTTP level thing so browser cache

00:02:46,810 --> 00:02:52,959
oops the next one is is your region so

00:02:51,070 --> 00:02:54,820
this is typically a CDN an API Gateway

00:02:52,959 --> 00:02:57,519
there's there's a bunch of ways to sort

00:02:54,820 --> 00:02:59,170
of field requests in a region they're

00:02:57,519 --> 00:03:01,930
typically very inexpensive CloudFlare

00:02:59,170 --> 00:03:02,920
CDN is great cloud front is great fastly

00:03:01,930 --> 00:03:05,709
it's great there's a bunch of them

00:03:02,920 --> 00:03:09,250
they're all pretty great and then

00:03:05,709 --> 00:03:12,519
finally you've got your proxy so this

00:03:09,250 --> 00:03:15,489
one's interesting even for a simple

00:03:12,519 --> 00:03:17,140
single server application you'll most

00:03:15,489 --> 00:03:20,489
often have your traffic going through a

00:03:17,140 --> 00:03:24,970
reverse proxy server these things are

00:03:20,489 --> 00:03:26,380
mostly fuss-free they're transparent but

00:03:24,970 --> 00:03:29,860
they do all kinds of things they they'll

00:03:26,380 --> 00:03:30,910
terminate TLS they serve static files to

00:03:29,860 --> 00:03:32,950
take some load off your actual

00:03:30,910 --> 00:03:35,440
application server and most importantly

00:03:32,950 --> 00:03:37,989
they do request caching so if none of

00:03:35,440 --> 00:03:39,579
these layers have the have the version

00:03:37,989 --> 00:03:41,380
of the request that you're looking for

00:03:39,579 --> 00:03:43,150
it actually reaches your application

00:03:41,380 --> 00:03:44,709
server there's no more free lunch and

00:03:43,150 --> 00:03:46,510
you have to build your own cache you

00:03:44,709 --> 00:03:50,350
know whatever it is that you've chosen

00:03:46,510 --> 00:03:52,150
to implement I like nested dolls but for

00:03:50,350 --> 00:03:57,370
the youth's we'll call this our cache

00:03:52,150 --> 00:03:59,350
stack so you can remove the CDN you can

00:03:57,370 --> 00:04:00,970
add an API gateway you can add proxy

00:03:59,350 --> 00:04:02,860
layers like varnish and and some other

00:04:00,970 --> 00:04:06,250
things but they all work basically the

00:04:02,860 --> 00:04:08,110
same it's either at a minimum you'll

00:04:06,250 --> 00:04:11,019
have the caching the HTTP cache that

00:04:08,110 --> 00:04:13,329
comes with your HTTP HTTP transport I'm

00:04:11,019 --> 00:04:14,560
gonna be so glad to not say HTTP again

00:04:13,329 --> 00:04:16,510
after this

00:04:14,560 --> 00:04:17,799
and you'll almost certainly deploy

00:04:16,510 --> 00:04:21,310
behind a proxy server so you'll probably

00:04:17,799 --> 00:04:23,410
have at least to the big fat can't miss

00:04:21,310 --> 00:04:25,539
it detail here though is that HTTP

00:04:23,410 --> 00:04:26,720
caching is baked into the platform and

00:04:25,539 --> 00:04:28,940
that none of this

00:04:26,720 --> 00:04:30,680
to be configured or or maintained its

00:04:28,940 --> 00:04:32,990
this has been true since Bill Clinton

00:04:30,680 --> 00:04:35,570
was president it was it's a part of the

00:04:32,990 --> 00:04:37,670
HTTP 1.1 spec it's been around so I

00:04:35,570 --> 00:04:40,310
think since 99

00:04:37,670 --> 00:04:41,900
so this caching stuff it's free as in

00:04:40,310 --> 00:04:44,150
left pad and it's at its most basic

00:04:41,900 --> 00:04:46,340
level all you need to do is make sure

00:04:44,150 --> 00:04:48,550
that your server is sending the the

00:04:46,340 --> 00:04:51,430
cache control header in its response

00:04:48,550 --> 00:04:54,500
yeah there are a few other headers

00:04:51,430 --> 00:04:56,390
before you you get upset about that the

00:04:54,500 --> 00:04:57,860
e-tag is really important but this is

00:04:56,390 --> 00:04:59,450
all kind of an optimization once you're

00:04:57,860 --> 00:05:02,480
sending cache control you're in really

00:04:59,450 --> 00:05:04,250
good shape so the cache control header

00:05:02,480 --> 00:05:06,470
can have multiple parts each one is

00:05:04,250 --> 00:05:09,500
called a directive here are all the

00:05:06,470 --> 00:05:11,780
parts for a cache control header that

00:05:09,500 --> 00:05:15,110
sent back by a server broadly speaking

00:05:11,780 --> 00:05:16,640
there are two types there's how do you

00:05:15,110 --> 00:05:18,560
want to store the data if at all and

00:05:16,640 --> 00:05:21,070
then there's how do you want to deal

00:05:18,560 --> 00:05:23,210
with freshness and and revalidation and

00:05:21,070 --> 00:05:26,330
definitions are boring so we'll start

00:05:23,210 --> 00:05:28,250
with examples if a HTTP cache

00:05:26,330 --> 00:05:30,620
implementation receive this header it

00:05:28,250 --> 00:05:32,630
says okay their cache control exists

00:05:30,620 --> 00:05:35,150
therefore I will use a cache in some

00:05:32,630 --> 00:05:37,730
form and then it says max age this says

00:05:35,150 --> 00:05:39,590
it will cache that request for one hour

00:05:37,730 --> 00:05:41,930
starting the moment the request was made

00:05:39,590 --> 00:05:43,160
after that hour is up the data is

00:05:41,930 --> 00:05:44,620
considered stale and would be reef

00:05:43,160 --> 00:05:46,160
etched it may or may not purge

00:05:44,620 --> 00:05:47,900
automatically depending on the

00:05:46,160 --> 00:05:50,180
implementation and then the private

00:05:47,900 --> 00:05:52,370
directive just says this is user

00:05:50,180 --> 00:05:54,740
specific data don't store it in anywhere

00:05:52,370 --> 00:05:57,260
public like a CDN some sort of shared

00:05:54,740 --> 00:05:59,030
resource it's important to note that

00:05:57,260 --> 00:06:01,790
just because you mark it as private

00:05:59,030 --> 00:06:03,710
doesn't mean it's uncatchable your HTTP

00:06:01,790 --> 00:06:07,130
implementation on the clients actual

00:06:03,710 --> 00:06:10,419
device will still very likely cache that

00:06:07,130 --> 00:06:12,530
request if you set the correct headers

00:06:10,419 --> 00:06:14,419
this one is a little bit more

00:06:12,530 --> 00:06:15,979
interesting again cache control shows up

00:06:14,419 --> 00:06:18,620
and then we have this weird combination

00:06:15,979 --> 00:06:20,090
of max age zero and must revalidate that

00:06:18,620 --> 00:06:22,330
says that every time the data is

00:06:20,090 --> 00:06:24,530
requested the server sends a special

00:06:22,330 --> 00:06:26,630
request to see if the data is still

00:06:24,530 --> 00:06:29,450
usable before it returns the cache

00:06:26,630 --> 00:06:32,090
result and then again public versus

00:06:29,450 --> 00:06:34,520
private this just marks it as able to be

00:06:32,090 --> 00:06:38,000
cached in a CDN layer or some some

00:06:34,520 --> 00:06:39,999
public data structure this is the exact

00:06:38,000 --> 00:06:42,399
cache what revalidate header that you

00:06:39,999 --> 00:06:45,429
that nettle if I uses to ensure fresh

00:06:42,399 --> 00:06:48,069
content on every deploy just thought it

00:06:45,429 --> 00:06:50,739
was kind of a cool how they did that you

00:06:48,069 --> 00:06:52,689
can also set the cache control header on

00:06:50,739 --> 00:06:54,039
the request there are kind of there are

00:06:52,689 --> 00:06:56,829
a few interesting things you can do you

00:06:54,039 --> 00:06:58,929
can send a no store directive which just

00:06:56,829 --> 00:07:00,509
says don't store anything about this

00:06:58,929 --> 00:07:02,829
regardless of what the server tells you

00:07:00,509 --> 00:07:03,969
these are all good to know about it's

00:07:02,829 --> 00:07:05,349
good to know what tools are available to

00:07:03,969 --> 00:07:09,099
you but for the most part all you need

00:07:05,349 --> 00:07:11,860
is is the the header on the response so

00:07:09,099 --> 00:07:14,469
we are all on the same page now about

00:07:11,860 --> 00:07:16,449
HTTP caching all we have to do is

00:07:14,469 --> 00:07:18,969
generate our header with the server of

00:07:16,449 --> 00:07:22,389
your choice like using Apollo Cashion's

00:07:18,969 --> 00:07:26,579
or something something similar this is

00:07:22,389 --> 00:07:28,539
not gonna work not how you think and

00:07:26,579 --> 00:07:31,029
unfortunately when it comes to caching

00:07:28,539 --> 00:07:32,349
it's a little bit hard to debug so I've

00:07:31,029 --> 00:07:33,789
definitely been in situations where

00:07:32,349 --> 00:07:34,869
people thought caching was implemented

00:07:33,789 --> 00:07:36,610
and everything worked they set their

00:07:34,869 --> 00:07:38,379
header and then when you you do your

00:07:36,610 --> 00:07:41,769
testing you find that nothing is

00:07:38,379 --> 00:07:44,499
actually getting cached so the default

00:07:41,769 --> 00:07:46,269
behavior of most graph QL clients is to

00:07:44,499 --> 00:07:48,339
abuse HTTP that's why this doesn't work

00:07:46,269 --> 00:07:50,669
specifically clients send get

00:07:48,339 --> 00:07:53,409
information in a post request and

00:07:50,669 --> 00:07:55,749
sometimes they even mutate data in a get

00:07:53,409 --> 00:07:57,550
request both of these are possible to do

00:07:55,749 --> 00:08:01,059
with the graphic ul client the graph QL

00:07:57,550 --> 00:08:03,429
Apollo server I believe rejects get

00:08:01,059 --> 00:08:06,669
requests that have mutations in them but

00:08:03,429 --> 00:08:08,019
it's going to be server dependent yeah

00:08:06,669 --> 00:08:10,749
how many of how many people in this room

00:08:08,019 --> 00:08:13,479
use post requests for for all for all

00:08:10,749 --> 00:08:16,749
queries yeah that's like that's

00:08:13,479 --> 00:08:19,059
everybody just about so like what's

00:08:16,749 --> 00:08:21,369
what's the deal with this I mean it goes

00:08:19,059 --> 00:08:23,259
against a lot of tech dogma and whatever

00:08:21,369 --> 00:08:25,479
but is this just like a bunch of dorks

00:08:23,259 --> 00:08:28,659
being pedantic or like does it matter

00:08:25,479 --> 00:08:29,799
like what's what's the problem so

00:08:28,659 --> 00:08:32,860
speaking of dorks

00:08:29,799 --> 00:08:37,180
I read the spec and the HTTP POST

00:08:32,860 --> 00:08:39,579
section says responses to the post

00:08:37,180 --> 00:08:41,079
method are not cashable unless they send

00:08:39,579 --> 00:08:43,870
the appropriate cache control header or

00:08:41,079 --> 00:08:45,550
expires header fields so I don't know I

00:08:43,870 --> 00:08:47,470
mean from this things should work fine

00:08:45,550 --> 00:08:50,949
right you should technically be able to

00:08:47,470 --> 00:08:52,389
cache a post request there is actually

00:08:50,949 --> 00:08:53,610
another section of the spec that muddies

00:08:52,389 --> 00:08:55,170
the water a little bit but the

00:08:53,610 --> 00:08:58,110
bigger problem is that this is a huge

00:08:55,170 --> 00:09:00,540
foot gun and as such very few HTTP

00:08:58,110 --> 00:09:02,610
caches actually implement it so while

00:09:00,540 --> 00:09:04,589
it's possible nobody does and if you

00:09:02,610 --> 00:09:07,500
look at some of the common ones you'll

00:09:04,589 --> 00:09:08,970
find that all of them cache get some of

00:09:07,500 --> 00:09:11,130
them cache options and head

00:09:08,970 --> 00:09:14,700
none of them cache post at least not by

00:09:11,130 --> 00:09:16,350
default but why are we using post to get

00:09:14,700 --> 00:09:19,079
things in the first place

00:09:16,350 --> 00:09:22,140
mumble mumble something URL link I don't

00:09:19,079 --> 00:09:23,820
know so if you look at the spec here it

00:09:22,140 --> 00:09:25,560
says there's no limit on URL length

00:09:23,820 --> 00:09:28,370
which by the way is a part of the

00:09:25,560 --> 00:09:30,959
request line so that's what this means

00:09:28,370 --> 00:09:32,940
and it also says they recommend support

00:09:30,959 --> 00:09:34,980
of at least 8000 octet sand if you don't

00:09:32,940 --> 00:09:37,410
know what an octet is it's it's eight

00:09:34,980 --> 00:09:39,089
bytes or sorry eight bits which is a

00:09:37,410 --> 00:09:40,950
byte and a bite is an ASCII character so

00:09:39,089 --> 00:09:44,519
this is roughly going to be 8,000

00:09:40,950 --> 00:09:47,730
characters in a URL string yeah some

00:09:44,519 --> 00:09:50,370
characters are two bytes but just let's

00:09:47,730 --> 00:09:51,990
keep this kind of simple so it's

00:09:50,370 --> 00:09:53,100
basically says this is the

00:09:51,990 --> 00:09:54,570
recommendation but it's largely

00:09:53,100 --> 00:09:56,910
unspecified so what does it look like

00:09:54,570 --> 00:09:58,769
out in the wild why are we why are we

00:09:56,910 --> 00:10:01,500
doing this I started a node

00:09:58,769 --> 00:10:04,560
interestingly a node 12 took the limit

00:10:01,500 --> 00:10:06,180
from 80 down to just eight kilobytes but

00:10:04,560 --> 00:10:09,269
still eight kilobytes I mean that's the

00:10:06,180 --> 00:10:12,269
recommendation 8,000 bytes as a is quite

00:10:09,269 --> 00:10:14,880
a lot and after some complaints a lot of

00:10:12,269 --> 00:10:18,000
complaints no 12 made that configurable

00:10:14,880 --> 00:10:19,680
so there's no actual limitation here I

00:10:18,000 --> 00:10:22,290
wrote a little script and poked at my

00:10:19,680 --> 00:10:24,360
daily driver which is brave and I hit

00:10:22,290 --> 00:10:27,480
about 15,000 characters before I got an

00:10:24,360 --> 00:10:31,649
error Google and Firefox works

00:10:27,480 --> 00:10:34,320
shockingly Safari works ok I downloaded

00:10:31,649 --> 00:10:37,140
the new chromium based Microsoft edge it

00:10:34,320 --> 00:10:37,829
handles even more than Chrome so what's

00:10:37,140 --> 00:10:40,740
the problem

00:10:37,829 --> 00:10:41,970
why are we why are we doing this the

00:10:40,740 --> 00:10:43,370
problem is the same thing that it's

00:10:41,970 --> 00:10:46,530
always been

00:10:43,370 --> 00:10:52,890
Internet Explorer it's always Internet

00:10:46,530 --> 00:10:54,630
Explorer now I will say this is sort of

00:10:52,890 --> 00:10:58,140
an aside I didn't really intend to talk

00:10:54,630 --> 00:11:00,150
about this but Internet Explorer is the

00:10:58,140 --> 00:11:02,400
last version Internet Explorer 11 is the

00:11:00,150 --> 00:11:05,340
last version of Internet Explorer and it

00:11:02,400 --> 00:11:07,920
will go end-of-life when Windows 10 goes

00:11:05,340 --> 00:11:10,140
end-of-life which I believe is 2025 not

00:11:07,920 --> 00:11:12,030
that the usage statistics are there to

00:11:10,140 --> 00:11:14,400
show that we need to support this in a

00:11:12,030 --> 00:11:15,960
meaningful way but just so you kind of

00:11:14,400 --> 00:11:17,580
know have a sense of the timeline and

00:11:15,960 --> 00:11:22,530
the taper and like when the hard cutoff

00:11:17,580 --> 00:11:25,530
is anyway here's the thing we have had

00:11:22,530 --> 00:11:28,110
problems with Internet Explorer for ever

00:11:25,530 --> 00:11:29,820
for decades and we never really solved

00:11:28,110 --> 00:11:31,200
the problem by accepting the lowest

00:11:29,820 --> 00:11:33,180
common denominator that was never the

00:11:31,200 --> 00:11:35,340
approach the wave has a long history of

00:11:33,180 --> 00:11:36,840
hacking around ie which I mean kind of I

00:11:35,340 --> 00:11:39,090
mean it kicked off a long time ago but

00:11:36,840 --> 00:11:41,100
but kicked off in earnest with jQuery

00:11:39,090 --> 00:11:42,810
jQuery wrapped up all the crazy crap

00:11:41,100 --> 00:11:45,090
that that Internet Explorer did and made

00:11:42,810 --> 00:11:46,980
it easy to use and now we have Babel we

00:11:45,090 --> 00:11:49,590
of Babel preset em than in any modern

00:11:46,980 --> 00:11:51,570
codebase we write code with the best

00:11:49,590 --> 00:11:54,990
tools available and we fall back only if

00:11:51,570 --> 00:11:57,270
necessary so if we were to write some

00:11:54,990 --> 00:11:59,880
sort of fallback we would get all the

00:11:57,270 --> 00:12:01,740
benefits of graph QL and totally obviate

00:11:59,880 --> 00:12:04,350
all of the limitations that people talk

00:12:01,740 --> 00:12:06,270
about when it comes to HTTP caching what

00:12:04,350 --> 00:12:08,700
I'm saying that cache ability versus

00:12:06,270 --> 00:12:11,550
broad client support is a false choice

00:12:08,700 --> 00:12:13,440
and this is a really big deal there are

00:12:11,550 --> 00:12:16,050
four sessions at this year's graph QL

00:12:13,440 --> 00:12:18,330
summit on caching what I'm saying this

00:12:16,050 --> 00:12:22,350
this invalidates a foundational premise

00:12:18,330 --> 00:12:24,960
of all of the graph QL clients Apollo

00:12:22,350 --> 00:12:27,540
server lets you toggle between get and

00:12:24,960 --> 00:12:29,160
posts but not not on a per request basis

00:12:27,540 --> 00:12:31,290
relay lets you pass in a fetch

00:12:29,160 --> 00:12:33,990
implementation I don't really know what

00:12:31,290 --> 00:12:37,140
people are doing there L doesn't let

00:12:33,990 --> 00:12:42,000
Utah change the behavior at all ever all

00:12:37,140 --> 00:12:43,680
of the clients just assume post so the

00:12:42,000 --> 00:12:46,440
big deal here is that this opens the

00:12:43,680 --> 00:12:48,660
door to all of the tooling that people

00:12:46,440 --> 00:12:51,720
who maintain api's already want to use

00:12:48,660 --> 00:12:54,150
so could it work yes it can and I'm

00:12:51,720 --> 00:12:56,160
running it in production today there is

00:12:54,150 --> 00:12:56,920
this is about 13 lines of code it's it's

00:12:56,160 --> 00:12:58,509
this is

00:12:56,920 --> 00:13:00,399
pseudo-code ish there's a little more

00:12:58,509 --> 00:13:02,949
you'd want to do but there is there's a

00:13:00,399 --> 00:13:06,069
specific HTTP error code for when a

00:13:02,949 --> 00:13:09,100
request URI is too long it's it's a 414

00:13:06,069 --> 00:13:10,269
it's called request URI too long and in

00:13:09,100 --> 00:13:12,579
practice I found a lot of browsers

00:13:10,269 --> 00:13:14,709
through a4 13 instead which was requests

00:13:12,579 --> 00:13:16,629
too large but why I guess what I'm

00:13:14,709 --> 00:13:19,149
trying to say is that like 13 lines of

00:13:16,629 --> 00:13:21,429
code here do this fallback and it's not

00:13:19,149 --> 00:13:24,429
very difficult and the best thing about

00:13:21,429 --> 00:13:26,980
a fallback like this is that the cost is

00:13:24,429 --> 00:13:29,019
basically zero because he's the thing

00:13:26,980 --> 00:13:31,929
that's gonna fail is the client so it's

00:13:29,019 --> 00:13:34,029
going to fail in 0 to 3 milliseconds

00:13:31,929 --> 00:13:35,769
before it even makes a network request

00:13:34,029 --> 00:13:39,160
most likely it's not your server that's

00:13:35,769 --> 00:13:40,329
gonna have the limitation so the only

00:13:39,160 --> 00:13:41,919
thing you really want to do in a

00:13:40,329 --> 00:13:43,989
production environment is have some way

00:13:41,919 --> 00:13:45,819
to toggle between post and get whether

00:13:43,989 --> 00:13:48,160
you do that by by analyzing the query

00:13:45,819 --> 00:13:51,299
itself or by having two separate methods

00:13:48,160 --> 00:13:54,669
like a dot query and a dot dot mutation

00:13:51,299 --> 00:13:56,199
so both Apollo client and relay allow

00:13:54,669 --> 00:13:58,779
you to do this Apollo client you kind of

00:13:56,199 --> 00:14:00,299
have to hack it a little bit relay you

00:13:58,779 --> 00:14:04,449
pass in you're fetching implementation

00:14:00,299 --> 00:14:06,459
but you you can do this today so what

00:14:04,449 --> 00:14:07,569
did we learn we learned that HTTP

00:14:06,459 --> 00:14:09,910
caching is awesome

00:14:07,569 --> 00:14:11,980
we learned that HTTP caching is easy and

00:14:09,910 --> 00:14:14,110
that we can do it we learned that cache

00:14:11,980 --> 00:14:19,360
ability versus broad client support is a

00:14:14,110 --> 00:14:21,819
false choice and that HTTP caching in

00:14:19,360 --> 00:14:24,129
graph QL api's is possible today so this

00:14:21,819 --> 00:14:26,949
whole mess about why are we about you

00:14:24,129 --> 00:14:28,869
know hand implemented caching you can

00:14:26,949 --> 00:14:33,600
kind of take at least some of that off

00:14:28,869 --> 00:14:36,069
the table so 14 minutes and 4 seconds of

00:14:33,600 --> 00:14:37,360
15 minutes so that's all I have this is

00:14:36,069 --> 00:14:39,129
it thank you all for coming out and

00:14:37,360 --> 00:14:39,580
thank you sir for the organizers this is

00:14:39,129 --> 00:14:46,539
a great event

00:14:39,580 --> 00:14:46,539

YouTube URL: https://www.youtube.com/watch?v=4lqEXYHPmVk


