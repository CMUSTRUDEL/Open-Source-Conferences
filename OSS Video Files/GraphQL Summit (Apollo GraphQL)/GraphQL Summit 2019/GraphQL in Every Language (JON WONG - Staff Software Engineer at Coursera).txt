Title: GraphQL in Every Language (JON WONG - Staff Software Engineer at Coursera)
Publication date: 2019-11-03
Playlist: GraphQL Summit 2019
Description: 
	GraphQL clients and servers exist in many different programming languages â€” not just JavaScript! Join me for a journey into GraphQL in (almost) every language under the sun.
Captions: 
	00:00:02,260 --> 00:00:07,640
all right this talk is gonna start with

00:00:04,910 --> 00:00:10,070
me embarrassing myself a lot so I'm glad

00:00:07,640 --> 00:00:13,759
I got that out of the way I know it's

00:00:10,070 --> 00:00:15,709
really early 9m is just a touch too

00:00:13,759 --> 00:00:16,940
early I get paid a lot of money to be an

00:00:15,709 --> 00:00:20,750
engineer and I don't wake up this early

00:00:16,940 --> 00:00:23,840
for that so you we're all happy to be

00:00:20,750 --> 00:00:25,370
here I guess first thing I want to do I

00:00:23,840 --> 00:00:26,990
want to wake everybody up I know that

00:00:25,370 --> 00:00:28,400
again it is 9:00 a.m. the coffee is

00:00:26,990 --> 00:00:30,290
still coming in so I'm gonna do this

00:00:28,400 --> 00:00:31,460
it's not a lot of claps this just give

00:00:30,290 --> 00:00:32,840
me one clap so we're gonna all come

00:00:31,460 --> 00:00:34,430
together and just do one clap together

00:00:32,840 --> 00:00:36,320
all right for the people just people

00:00:34,430 --> 00:00:38,180
like behind there's like people behind

00:00:36,320 --> 00:00:39,470
the pillar that you're ready for this

00:00:38,180 --> 00:00:44,140
clap okay David you're ready for this

00:00:39,470 --> 00:00:47,030
club all right ready great thank you so

00:00:44,140 --> 00:00:49,040
you might be wondering why is this

00:00:47,030 --> 00:00:51,380
off-brand Randall Park giving a talk

00:00:49,040 --> 00:00:53,540
engraft hill summit and first off how

00:00:51,380 --> 00:00:55,460
dare you how dare you because you're

00:00:53,540 --> 00:00:59,750
absolutely you're absolutely correct

00:00:55,460 --> 00:01:01,670
I am dressed up as Randall Park from

00:00:59,750 --> 00:01:04,309
always being my baby and side note this

00:01:01,670 --> 00:01:07,100
movie is incredible okay I love this

00:01:04,309 --> 00:01:07,999
movie another embarrassing fact I guess

00:01:07,100 --> 00:01:10,039
why is it embarrassing

00:01:07,999 --> 00:01:12,590
I was crying at the end of this movie it

00:01:10,039 --> 00:01:14,149
is great it was a great incredible movie

00:01:12,590 --> 00:01:16,189
you should go watch it you all have

00:01:14,149 --> 00:01:17,959
Netflix subscriptions we know okay and

00:01:16,189 --> 00:01:19,159
if you're not from the US I've seen your

00:01:17,959 --> 00:01:21,469
Netflix accounts you have access to

00:01:19,159 --> 00:01:23,659
everything so you don't you have no

00:01:21,469 --> 00:01:24,619
complaints okay so go watch this movie

00:01:23,659 --> 00:01:27,289
it's really solid

00:01:24,619 --> 00:01:30,020
but this oversized blazer is oversized

00:01:27,289 --> 00:01:34,969
and a little itchy so I'm gonna take it

00:01:30,020 --> 00:01:36,740
off here great hello my name is not

00:01:34,969 --> 00:01:39,709
actually Randall Park my name is John I

00:01:36,740 --> 00:01:41,149
work as soft staff software engineer at

00:01:39,709 --> 00:01:43,130
Coursera on the developer experience

00:01:41,149 --> 00:01:44,509
team and on that team we spend a lot of

00:01:43,130 --> 00:01:46,819
time building out the tools workflows

00:01:44,509 --> 00:01:50,149
processes that our engineers use on a

00:01:46,819 --> 00:01:52,849
day to day basis that includes graph QL

00:01:50,149 --> 00:01:54,259
and most recently we're taking our three

00:01:52,849 --> 00:01:56,240
year old graphical server and saying hey

00:01:54,259 --> 00:01:56,840
could we do this better and the answer

00:01:56,240 --> 00:01:59,630
is yes

00:01:56,840 --> 00:02:02,149
so that's what we work on day to day if

00:01:59,630 --> 00:02:04,130
you haven't heard about Coursera we

00:02:02,149 --> 00:02:06,380
envision a world where anyone everywhere

00:02:04,130 --> 00:02:08,450
anyone anywhere I can read the things

00:02:06,380 --> 00:02:11,209
can transform the life by accessing the

00:02:08,450 --> 00:02:13,489
world's best education we have lots of

00:02:11,209 --> 00:02:14,990
thoughts of great university courses on

00:02:13,489 --> 00:02:16,250
there even degrees

00:02:14,990 --> 00:02:17,540
you want to get a master's in CS if

00:02:16,250 --> 00:02:20,410
that's your thing you can get it on

00:02:17,540 --> 00:02:24,830
Coursera so check it out if you have a

00:02:20,410 --> 00:02:26,930
opportunity to do so I also am a host of

00:02:24,830 --> 00:02:29,510
something called Graf heel ramen it's a

00:02:26,930 --> 00:02:32,240
little small little like meetup thingy

00:02:29,510 --> 00:02:34,250
where we just go and grab ramen together

00:02:32,240 --> 00:02:37,190
and talk about Graf Hill

00:02:34,250 --> 00:02:39,530
I've ran it here in SF a few times as

00:02:37,190 --> 00:02:41,360
well as in Toronto and New York so if

00:02:39,530 --> 00:02:42,800
you want to get in on this if you love

00:02:41,360 --> 00:02:44,600
ramen or you love graph you or you love

00:02:42,800 --> 00:02:46,490
both go ahead and follow me on twitter

00:02:44,600 --> 00:02:48,440
and you'll check out the next one which

00:02:46,490 --> 00:02:52,070
might actually be in South Bay I promise

00:02:48,440 --> 00:02:53,960
Kristina I promise South Bay okay so I

00:02:52,070 --> 00:02:55,940
also the title of this talk actually

00:02:53,960 --> 00:02:58,190
should have been graphical servers in

00:02:55,940 --> 00:02:59,450
almost every language we only have half

00:02:58,190 --> 00:03:01,610
an hour so don't really have enough time

00:02:59,450 --> 00:03:03,110
to go into literally every language but

00:03:01,610 --> 00:03:04,400
really what I want to talk about is all

00:03:03,110 --> 00:03:06,980
the servers that don't get any of the

00:03:04,400 --> 00:03:11,330
glamour any of the hype who might not

00:03:06,980 --> 00:03:15,200
show up in in a in a presentation we as

00:03:11,330 --> 00:03:18,110
you know as graph QL enthusiasts might

00:03:15,200 --> 00:03:20,150
see a lot of JavaScript through today

00:03:18,110 --> 00:03:21,470
and yesterday but there's a lot of great

00:03:20,150 --> 00:03:23,090
servers out there that have a ton of

00:03:21,470 --> 00:03:24,770
great features so I'm gonna be going

00:03:23,090 --> 00:03:26,660
through and exploring all those servers

00:03:24,770 --> 00:03:27,530
and really showing off what are the

00:03:26,660 --> 00:03:30,130
features what are the things that you

00:03:27,530 --> 00:03:33,530
want and should ask for from your server

00:03:30,130 --> 00:03:34,820
so it's important to note that we want

00:03:33,530 --> 00:03:37,910
to break down what actually is a

00:03:34,820 --> 00:03:39,200
graphical server because we want to kind

00:03:37,910 --> 00:03:40,700
of figure out what are the constituent

00:03:39,200 --> 00:03:42,320
parts that you could make decisions

00:03:40,700 --> 00:03:43,670
about right what are the things that can

00:03:42,320 --> 00:03:46,270
change between different languages or

00:03:43,670 --> 00:03:48,410
different implementations so

00:03:46,270 --> 00:03:51,470
realistically it comes down to schemas

00:03:48,410 --> 00:03:53,210
and resolvers and there's some decisions

00:03:51,470 --> 00:03:56,750
around how you get to both of those

00:03:53,210 --> 00:03:58,100
things the fur so you have two big

00:03:56,750 --> 00:04:00,590
questions that you might answer when you

00:03:58,100 --> 00:04:02,390
are trying to figure out whether or not

00:04:00,590 --> 00:04:05,030
this server implementation is good for

00:04:02,390 --> 00:04:07,130
you the first is how do you generate the

00:04:05,030 --> 00:04:08,840
schema and the second is how do you take

00:04:07,130 --> 00:04:10,100
that schema and then ultimately resolve

00:04:08,840 --> 00:04:11,900
it against the underlying data I'm

00:04:10,100 --> 00:04:14,330
actually gonna like skip over most of

00:04:11,900 --> 00:04:15,740
the like okay caching and like databases

00:04:14,330 --> 00:04:17,600
and all that sort of stuff it's really

00:04:15,740 --> 00:04:18,920
just getting the schema to that want

00:04:17,600 --> 00:04:22,340
that next layer that next layer which is

00:04:18,920 --> 00:04:25,310
the set of resolvers so first off

00:04:22,340 --> 00:04:27,830
generating a graphical schema there's

00:04:25,310 --> 00:04:28,610
two major ways to do this you could do a

00:04:27,830 --> 00:04:30,560
combination of

00:04:28,610 --> 00:04:34,550
both but it just might be you know hard

00:04:30,560 --> 00:04:35,810
to process in your head but ultimately

00:04:34,550 --> 00:04:37,699
what you want to figure out is what is

00:04:35,810 --> 00:04:40,580
your source of truth what is the thing

00:04:37,699 --> 00:04:42,259
that you refer to that you know when you

00:04:40,580 --> 00:04:45,349
edit your schema you're going to edit

00:04:42,259 --> 00:04:48,139
that thing the first might be SDL first

00:04:45,349 --> 00:04:50,750
so SDL is the graphical schema

00:04:48,139 --> 00:04:52,400
definition language and you've probably

00:04:50,750 --> 00:04:56,150
seen tons of examples of this it's

00:04:52,400 --> 00:04:58,310
fairly easily readable you have you know

00:04:56,150 --> 00:05:00,530
a null ability with the exclamation mark

00:04:58,310 --> 00:05:02,060
you have a raised with the array with

00:05:00,530 --> 00:05:03,379
the you know the square brackets all

00:05:02,060 --> 00:05:05,210
that sort of stuff

00:05:03,379 --> 00:05:06,860
there's a lot of languages and servers

00:05:05,210 --> 00:05:08,449
out there where you start with just

00:05:06,860 --> 00:05:10,940
writing schema definition language and

00:05:08,449 --> 00:05:13,789
that gets translated into something else

00:05:10,940 --> 00:05:15,620
for that particular language the other

00:05:13,789 --> 00:05:18,889
decision that you can make is code first

00:05:15,620 --> 00:05:20,659
and code first says okay I'm writing in

00:05:18,889 --> 00:05:22,699
JavaScript or I'm writing in typescript

00:05:20,659 --> 00:05:24,110
or Python or whatever it is and I just

00:05:22,699 --> 00:05:25,219
want to write Python I just want to

00:05:24,110 --> 00:05:28,789
write typescript I don't want to write

00:05:25,219 --> 00:05:29,919
graph QL SDL and this example is Nexus

00:05:28,789 --> 00:05:32,240
which is a

00:05:29,919 --> 00:05:34,699
typescript server where you write

00:05:32,240 --> 00:05:37,279
everything out in typescript object

00:05:34,699 --> 00:05:39,949
types null ability strings like all the

00:05:37,279 --> 00:05:41,900
fields and stuff like that show up in in

00:05:39,949 --> 00:05:43,669
typescript and then that gets translated

00:05:41,900 --> 00:05:46,639
into graphical schema definition

00:05:43,669 --> 00:05:49,819
language somewhere down the road if that

00:05:46,639 --> 00:05:51,289
is something that you choose to have the

00:05:49,819 --> 00:05:53,990
second thing how do you connect the

00:05:51,289 --> 00:05:55,099
schema to the underlying data how do you

00:05:53,990 --> 00:05:59,479
actually get the resolvers to work

00:05:55,099 --> 00:06:02,690
together okay so this is from the

00:05:59,479 --> 00:06:04,580
graphical specification itself it's kind

00:06:02,690 --> 00:06:05,870
of very verbose here so I'm actually not

00:06:04,580 --> 00:06:07,279
gonna go over this actually the

00:06:05,870 --> 00:06:08,750
graphical spec is really fun to read

00:06:07,279 --> 00:06:10,069
through so if you have a chance you

00:06:08,750 --> 00:06:11,419
should read through it and you'll find

00:06:10,069 --> 00:06:12,860
out the cool things like the commas

00:06:11,419 --> 00:06:14,569
actually don't mean anything they're

00:06:12,860 --> 00:06:16,669
just white spaces so you can just there

00:06:14,569 --> 00:06:17,870
tons it don't just put tons of commas in

00:06:16,669 --> 00:06:21,529
there right just put like 20 of them

00:06:17,870 --> 00:06:22,759
doesn't matter so anyway this is what

00:06:21,529 --> 00:06:25,129
they're talking about when we say

00:06:22,759 --> 00:06:29,259
resolvers it's essentially how do you

00:06:25,129 --> 00:06:31,550
get the value for a particular field and

00:06:29,259 --> 00:06:33,680
concretely and I'm gonna use a lot of

00:06:31,550 --> 00:06:35,449
examples here from Coursera we have

00:06:33,680 --> 00:06:37,069
courses and then you have partners and

00:06:35,449 --> 00:06:39,020
partners of the universities or the

00:06:37,069 --> 00:06:42,050
enterprises that are giving these

00:06:39,020 --> 00:06:44,360
courses this is a very easy

00:06:42,050 --> 00:06:46,910
resolver we're essentially course top

00:06:44,360 --> 00:06:48,080
partners is just you say you know I you

00:06:46,910 --> 00:06:50,509
know I've been given a course and just

00:06:48,080 --> 00:06:52,780
say return the partners thing so what is

00:06:50,509 --> 00:06:55,430
the value for this particular field

00:06:52,780 --> 00:06:57,830
great now that we all know how to build

00:06:55,430 --> 00:07:00,560
graphical servers we're gonna actually

00:06:57,830 --> 00:07:03,889
go beyond what's actually specified here

00:07:00,560 --> 00:07:05,569
right so what I showed you just there

00:07:03,889 --> 00:07:07,099
was the concrete okay here's what's in

00:07:05,569 --> 00:07:08,960
the specification for what a server must

00:07:07,099 --> 00:07:09,770
provide but of course we want more

00:07:08,960 --> 00:07:11,960
features than that

00:07:09,770 --> 00:07:13,610
we don't want just resolvers otherwise

00:07:11,960 --> 00:07:15,169
we could build that with any language

00:07:13,610 --> 00:07:16,759
but we really want to figure out is what

00:07:15,169 --> 00:07:18,949
are the things that make it really great

00:07:16,759 --> 00:07:21,800
to build graphical in this particular

00:07:18,949 --> 00:07:23,479
language in this particular library so

00:07:21,800 --> 00:07:25,940
in practice we're gonna go through a

00:07:23,479 --> 00:07:27,800
bunch of these servers and of course

00:07:25,940 --> 00:07:29,870
again it is 9:00 a.m. so I'm gonna have

00:07:27,800 --> 00:07:32,300
to ask for a little bit of audience

00:07:29,870 --> 00:07:35,449
participation I know everyone here is

00:07:32,300 --> 00:07:37,820
really excited about this and so in this

00:07:35,449 --> 00:07:40,310
in this in this next phase I'm gonna

00:07:37,820 --> 00:07:42,800
have pictures and with the pictures if

00:07:40,310 --> 00:07:43,729
you know what language or what library

00:07:42,800 --> 00:07:45,979
I'm talking about

00:07:43,729 --> 00:07:47,659
feel free to yell it out and I know that

00:07:45,979 --> 00:07:50,090
some people are very averse to yelling

00:07:47,659 --> 00:07:51,919
at speakers and you definitely shouldn't

00:07:50,090 --> 00:07:53,870
but I will give you permission for the

00:07:51,919 --> 00:07:57,020
next 30 minutes for the next 20 minutes

00:07:53,870 --> 00:07:58,820
to shout at me only when the images are

00:07:57,020 --> 00:08:00,440
on the screen okay and these will be

00:07:58,820 --> 00:08:02,719
easy I'm not I'm not like maybe they're

00:08:00,440 --> 00:08:05,300
not gonna be very abstract you'll get

00:08:02,719 --> 00:08:06,740
them so if you feel inclined just shout

00:08:05,300 --> 00:08:10,280
it out okay great

00:08:06,740 --> 00:08:14,000
first one oh I heard it

00:08:10,280 --> 00:08:16,460
what was it louder juniper great so rust

00:08:14,000 --> 00:08:18,800
rust is a language it is a language and

00:08:16,460 --> 00:08:20,539
one of the graphical servers that is

00:08:18,800 --> 00:08:23,150
implemented in that language is juniper

00:08:20,539 --> 00:08:24,830
and this is really it's a really really

00:08:23,150 --> 00:08:25,759
solid they have great Docs I'm reading

00:08:24,830 --> 00:08:27,800
through all this Docs I know nothing

00:08:25,759 --> 00:08:29,509
about rust and they're going through and

00:08:27,800 --> 00:08:31,280
I can understand everything so the way

00:08:29,509 --> 00:08:34,399
that it works in juniper is that they do

00:08:31,280 --> 00:08:36,320
code first they have these concept of

00:08:34,399 --> 00:08:38,419
structs you know the kind of like

00:08:36,320 --> 00:08:40,099
they're like types or objects in rust

00:08:38,419 --> 00:08:41,599
and they use something called attributes

00:08:40,099 --> 00:08:43,250
and those attributes are these little

00:08:41,599 --> 00:08:44,870
hash tag like you know octothorpe

00:08:43,250 --> 00:08:47,300
whatever you call it

00:08:44,870 --> 00:08:49,970
array thing derive juniper graphical

00:08:47,300 --> 00:08:52,339
object it takes that struct and it goes

00:08:49,970 --> 00:08:55,400
ahead and translates that into graphical

00:08:52,339 --> 00:08:57,950
STL now what's interesting about this is

00:08:55,400 --> 00:09:00,950
in rust it's somewhat more difficult

00:08:57,950 --> 00:09:03,170
than normal to make optional types so

00:09:00,950 --> 00:09:05,450
instead of having everything nullable by

00:09:03,170 --> 00:09:08,540
default everything is non-null by

00:09:05,450 --> 00:09:09,800
default and I was still digging a little

00:09:08,540 --> 00:09:11,150
bit to figure out if this is because it

00:09:09,800 --> 00:09:13,430
was hard time but if you look at that

00:09:11,150 --> 00:09:15,470
bottom one here this option string

00:09:13,430 --> 00:09:18,140
that's how you would define a nullable

00:09:15,470 --> 00:09:19,910
string so the sort of nature of the

00:09:18,140 --> 00:09:21,140
language itself is informing the

00:09:19,910 --> 00:09:23,480
decisions that they're making in the

00:09:21,140 --> 00:09:24,470
server and the process there so I

00:09:23,480 --> 00:09:26,810
thought this was really really cool

00:09:24,470 --> 00:09:28,490
definitely worth checking out if your

00:09:26,810 --> 00:09:31,070
interests and even just reading the Docs

00:09:28,490 --> 00:09:32,810
because Doc's are really really

00:09:31,070 --> 00:09:36,680
important and and I really enjoyed

00:09:32,810 --> 00:09:42,620
reading through these ones all right any

00:09:36,680 --> 00:09:45,830
guesses Green Fairy absinthe and elixir

00:09:42,620 --> 00:09:47,600
so the language is elixir the library is

00:09:45,830 --> 00:09:49,250
called absinthe and also I'd like to say

00:09:47,600 --> 00:09:50,750
that I love all the names for all these

00:09:49,250 --> 00:09:52,130
graphical servers they're really really

00:09:50,750 --> 00:09:54,470
fun you're gonna get some really fringe

00:09:52,130 --> 00:09:55,460
ones so I hope that this is just the tip

00:09:54,470 --> 00:09:57,800
of the iceberg

00:09:55,460 --> 00:09:59,840
so in elixir equivalently they have a

00:09:57,800 --> 00:10:03,800
code first solution here where they're

00:09:59,840 --> 00:10:05,570
defining objects and in an elixir and

00:10:03,800 --> 00:10:07,880
they have like non no list of not null

00:10:05,570 --> 00:10:08,630
that sort of stuff and they and it was

00:10:07,880 --> 00:10:10,310
pretty good

00:10:08,630 --> 00:10:11,960
I got actually got this up and running

00:10:10,310 --> 00:10:13,910
on my on my laptop to really really

00:10:11,960 --> 00:10:15,920
quickly so definitely worth checking out

00:10:13,910 --> 00:10:17,450
one feature that I thought was really

00:10:15,920 --> 00:10:19,970
cool about this was something called

00:10:17,450 --> 00:10:21,830
document adapters and what they were

00:10:19,970 --> 00:10:25,070
doing here is that because everything is

00:10:21,830 --> 00:10:26,900
built code first in elixir I think

00:10:25,070 --> 00:10:29,720
conventionally you don't always use your

00:10:26,900 --> 00:10:31,550
like camel casing that you might use in

00:10:29,720 --> 00:10:33,590
a graphic you'll schema definition so

00:10:31,550 --> 00:10:35,330
instead of having to say okay I'm going

00:10:33,590 --> 00:10:37,760
to use this weird casing in my elixir

00:10:35,330 --> 00:10:39,650
graticule server and then so that it

00:10:37,760 --> 00:10:41,840
translates well to the client they just

00:10:39,650 --> 00:10:43,520
translate the two so you can use your

00:10:41,840 --> 00:10:45,350
own conventional casing you can use

00:10:43,520 --> 00:10:48,410
underscore casing or Pascal casing or

00:10:45,350 --> 00:10:50,660
whatever it is in elixir itself and what

00:10:48,410 --> 00:10:52,400
when it gets translated to the graph you

00:10:50,660 --> 00:10:53,900
STL they'll go ahead and camelcase it

00:10:52,400 --> 00:10:56,230
for you so everyone kind of gets the

00:10:53,900 --> 00:11:00,140
best of both worlds you don't need to

00:10:56,230 --> 00:11:02,420
have to compromise on what kind of case

00:11:00,140 --> 00:11:03,860
and you like in your server so I thought

00:11:02,420 --> 00:11:05,060
this is a really cool feature and

00:11:03,860 --> 00:11:06,800
definitely a feature that makes a lot of

00:11:05,060 --> 00:11:08,620
sense for other languages too white like

00:11:06,800 --> 00:11:15,930
why is this specific to Alec

00:11:08,620 --> 00:11:19,570
sir all right anything Java all right so

00:11:15,930 --> 00:11:24,100
graph kill Java I found to be one of one

00:11:19,570 --> 00:11:26,290
of the the most highly used one of the

00:11:24,100 --> 00:11:27,790
most highly used graph killers and they

00:11:26,290 --> 00:11:31,060
have a lot of really cool names for

00:11:27,790 --> 00:11:33,430
concepts including this data fetcher and

00:11:31,060 --> 00:11:34,900
I and I really found that one of the

00:11:33,430 --> 00:11:36,640
things that that was really interesting

00:11:34,900 --> 00:11:38,350
about one of their features here with

00:11:36,640 --> 00:11:40,180
something called field selection look

00:11:38,350 --> 00:11:41,820
ahead and what's feel Tilly I'm just

00:11:40,180 --> 00:11:44,440
gonna scroll down just a little bit here

00:11:41,820 --> 00:11:47,440
and what field selection look look-ahead

00:11:44,440 --> 00:11:49,210
is is that they can in their resolver or

00:11:47,440 --> 00:11:50,590
in their data fetcher in this case they

00:11:49,210 --> 00:11:52,810
can actually take a look at the query

00:11:50,590 --> 00:11:55,180
that got made so they're not just

00:11:52,810 --> 00:11:57,370
resolving their current field they can

00:11:55,180 --> 00:11:58,930
also look ahead and say hey you asked

00:11:57,370 --> 00:12:01,300
for the course are you also asking for

00:11:58,930 --> 00:12:03,550
partners and if you are let's go ahead

00:12:01,300 --> 00:12:05,410
and get that now instead of waiting to

00:12:03,550 --> 00:12:06,670
get to that resolved rate to do that so

00:12:05,410 --> 00:12:08,800
I thought that was interesting too

00:12:06,670 --> 00:12:10,600
because like you know you can you can

00:12:08,800 --> 00:12:11,950
optimize a lot of your queries to say

00:12:10,600 --> 00:12:14,260
hey you're always gonna get this thing

00:12:11,950 --> 00:12:15,640
you might as well get it now or if it

00:12:14,260 --> 00:12:17,710
doesn't include it let's just you know

00:12:15,640 --> 00:12:19,090
not get this at all so I thought the

00:12:17,710 --> 00:12:23,080
data fetcher his concept was pretty

00:12:19,090 --> 00:12:25,210
solid in graphical Java they also have

00:12:23,080 --> 00:12:27,610
support for defer and this is something

00:12:25,210 --> 00:12:30,060
that we've seen in presentations and

00:12:27,610 --> 00:12:33,070
announcements and in graph kill space

00:12:30,060 --> 00:12:35,140
many times but what has been lacking has

00:12:33,070 --> 00:12:36,940
been actual server support for this for

00:12:35,140 --> 00:12:39,010
those of you who don't know it differ is

00:12:36,940 --> 00:12:41,830
defer is a directive that allows you to

00:12:39,010 --> 00:12:43,120
say hey this section of the query might

00:12:41,830 --> 00:12:44,920
take a little longer than normal so

00:12:43,120 --> 00:12:47,290
let's go ahead and wait for it or not

00:12:44,920 --> 00:12:50,080
wait for it let's return the rest of it

00:12:47,290 --> 00:12:52,570
and we'll wait something else we'll push

00:12:50,080 --> 00:12:54,580
this to the client later this becomes

00:12:52,570 --> 00:12:56,530
really powerful because now your client

00:12:54,580 --> 00:12:58,270
can you know declaratively say I want

00:12:56,530 --> 00:12:59,290
courses and partners but if there's just

00:12:58,270 --> 00:13:00,520
too many partners

00:12:59,290 --> 00:13:02,410
we'll get the course back with all the

00:13:00,520 --> 00:13:03,700
other information that we need and then

00:13:02,410 --> 00:13:05,470
when partners is ready it'll go ahead

00:13:03,700 --> 00:13:08,380
and push it to the client so graphical

00:13:05,470 --> 00:13:10,330
Java has support for the deferred

00:13:08,380 --> 00:13:12,790
directive out of the box and that's and

00:13:10,330 --> 00:13:13,960
that's really really a solid developer

00:13:12,790 --> 00:13:16,450
experience to be able to just add that

00:13:13,960 --> 00:13:17,950
when you have some slow some slow fields

00:13:16,450 --> 00:13:19,330
or fields that just you don't need on

00:13:17,950 --> 00:13:21,100
the first render right you don't need

00:13:19,330 --> 00:13:23,400
all of the data at once you just need it

00:13:21,100 --> 00:13:26,230
at some point

00:13:23,400 --> 00:13:28,380
all right there is no way that anyone is

00:13:26,230 --> 00:13:31,420
gonna know what this is um

00:13:28,380 --> 00:13:33,460
someone said it tartiflette how do you

00:13:31,420 --> 00:13:35,110
know that is that is that like it's like

00:13:33,460 --> 00:13:36,520
a childhood dish or something because I

00:13:35,110 --> 00:13:38,050
was like I had to look this was like

00:13:36,520 --> 00:13:39,760
this looks like potatoes walk around

00:13:38,050 --> 00:13:42,070
town or something like that anyway this

00:13:39,760 --> 00:13:45,490
is tartiflette this is a library fun

00:13:42,070 --> 00:13:46,990
Python I wasn't kidding I wasn't kidding

00:13:45,490 --> 00:13:49,000
I told you this was a fringe one and I'm

00:13:46,990 --> 00:13:51,310
glad that somebody got it but this one

00:13:49,000 --> 00:13:54,400
is really really difficult tartiflette

00:13:51,310 --> 00:13:56,770
is a Python graphical library they do

00:13:54,400 --> 00:13:59,200
SDL first and they allow they have these

00:13:56,770 --> 00:14:01,690
essentially these decorators and these

00:13:59,200 --> 00:14:03,600
decorators allow you to resolve certain

00:14:01,690 --> 00:14:05,710
fields on certain types in this case

00:14:03,600 --> 00:14:07,810
course top partners and you can say

00:14:05,710 --> 00:14:12,270
resolve course partners and you have

00:14:07,810 --> 00:14:14,530
your typical graph kill resolver syntax

00:14:12,270 --> 00:14:16,690
one of the things one of the features

00:14:14,530 --> 00:14:18,490
that they have and this comes up in

00:14:16,690 --> 00:14:19,870
different ways in different servers so

00:14:18,490 --> 00:14:22,050
we'll definitely hear more about this

00:14:19,870 --> 00:14:24,130
later is this concept of dynamic

00:14:22,050 --> 00:14:24,730
introspection now what does that

00:14:24,130 --> 00:14:26,560
actually mean

00:14:24,730 --> 00:14:29,140
there's other names for this schema

00:14:26,560 --> 00:14:30,820
visibility is another one of these but

00:14:29,140 --> 00:14:33,010
what it allows you to do is that it

00:14:30,820 --> 00:14:35,800
allows you to adjust the introspection

00:14:33,010 --> 00:14:38,200
result from your graphical schema based

00:14:35,800 --> 00:14:40,870
on your on anything in this case might

00:14:38,200 --> 00:14:42,880
be useful for a role so say that you are

00:14:40,870 --> 00:14:45,280
a super user you can see everything in

00:14:42,880 --> 00:14:47,290
your domain but if you're not a super

00:14:45,280 --> 00:14:50,290
user maybe you should only be limited to

00:14:47,290 --> 00:14:51,040
a small subsection of the schema so in

00:14:50,290 --> 00:14:53,890
tartiflette

00:14:51,040 --> 00:14:55,750
you can define these essentially these

00:14:53,890 --> 00:14:57,760
dynamic introspection rules that allow

00:14:55,750 --> 00:15:00,850
you to dynamically determine should this

00:14:57,760 --> 00:15:02,230
person see the introspection query so

00:15:00,850 --> 00:15:03,730
they can you can give them the graph

00:15:02,230 --> 00:15:05,560
field like playground or graphical or

00:15:03,730 --> 00:15:06,880
whatever it is and because they don't

00:15:05,560 --> 00:15:08,380
have the right headers and they don't

00:15:06,880 --> 00:15:10,480
have the right authorization they won't

00:15:08,380 --> 00:15:12,280
only see a subsection of that schema

00:15:10,480 --> 00:15:13,450
more on this later this is definitely a

00:15:12,280 --> 00:15:14,860
really interesting feature and something

00:15:13,450 --> 00:15:21,060
that comes up in a lot of other servers

00:15:14,860 --> 00:15:25,020
as well all right guesses

00:15:21,060 --> 00:15:26,580
sangria one of Coursera's beloved

00:15:25,020 --> 00:15:28,170
graphical servers we've been using it in

00:15:26,580 --> 00:15:32,220
production for about three years now

00:15:28,170 --> 00:15:34,770
sangria is the graphical server that's

00:15:32,220 --> 00:15:36,930
written in Scala and while they do have

00:15:34,770 --> 00:15:38,100
a few different ways and I also want to

00:15:36,930 --> 00:15:39,180
make sure that there's a good caveat

00:15:38,100 --> 00:15:42,360
here is that most of these servers

00:15:39,180 --> 00:15:43,020
actually support both FTL first and code

00:15:42,360 --> 00:15:45,120
first

00:15:43,020 --> 00:15:46,410
but there's tends to be a focus on one

00:15:45,120 --> 00:15:48,570
of the other depending on the language

00:15:46,410 --> 00:15:51,780
in this case sangria does have support

00:15:48,570 --> 00:15:53,850
for both code first and STL first but

00:15:51,780 --> 00:15:56,580
typically most folks use it code first

00:15:53,850 --> 00:15:58,200
and what they'll do is they'll use in

00:15:56,580 --> 00:15:59,880
Scala you have these things called case

00:15:58,200 --> 00:16:02,670
classes and they're like they're like

00:15:59,880 --> 00:16:04,290
objects I think and so they can take

00:16:02,670 --> 00:16:06,810
that object and they can derive it into

00:16:04,290 --> 00:16:08,400
a particular type so they'll take that

00:16:06,810 --> 00:16:11,360
and say okay there's a course with the

00:16:08,400 --> 00:16:13,440
ID of string and all that sort of stuff

00:16:11,360 --> 00:16:15,450
sangria is one of the most feature-rich

00:16:13,440 --> 00:16:17,930
graphical servers out there it's used by

00:16:15,450 --> 00:16:20,490
a bunch of it companies as well and we

00:16:17,930 --> 00:16:22,290
make judicious use of all of the

00:16:20,490 --> 00:16:25,320
features one of the ones that I really

00:16:22,290 --> 00:16:27,540
love is this concept of query complexity

00:16:25,320 --> 00:16:29,700
and what this is is the ability to

00:16:27,540 --> 00:16:32,400
estimate the cost of a particular query

00:16:29,700 --> 00:16:33,720
before you even run it right so under

00:16:32,400 --> 00:16:35,850
the hood of course you have

00:16:33,720 --> 00:16:37,350
you know there's we have a ton of these

00:16:35,850 --> 00:16:39,690
slides that like the n plus 1 problem

00:16:37,350 --> 00:16:41,580
you have like oh this thing you know of

00:16:39,690 --> 00:16:42,750
course there could be so many of these

00:16:41,580 --> 00:16:44,460
and for each course you're gonna ask for

00:16:42,750 --> 00:16:45,450
all these partners and if you don't you

00:16:44,460 --> 00:16:47,070
know query them correctly you're gonna

00:16:45,450 --> 00:16:49,440
have like you know end to the N or and

00:16:47,070 --> 00:16:50,940
it's something like that and what we can

00:16:49,440 --> 00:16:53,160
do here is that we can actually attach

00:16:50,940 --> 00:16:55,500
the numbers to these particular requests

00:16:53,160 --> 00:16:56,460
so we could put we could basically say

00:16:55,500 --> 00:16:58,290
based on a query

00:16:56,460 --> 00:16:59,610
what's the number of how complex this is

00:16:58,290 --> 00:17:01,680
going to be let's see if this one next

00:16:59,610 --> 00:17:03,900
one as an example here so essentially we

00:17:01,680 --> 00:17:05,820
can take something like this query on

00:17:03,900 --> 00:17:07,110
the left here that says as I know it's

00:17:05,820 --> 00:17:10,080
really smallest those courses partners

00:17:07,110 --> 00:17:11,820
and names and we can attach a number to

00:17:10,080 --> 00:17:13,530
it and when that number comes up we can

00:17:11,820 --> 00:17:15,240
guard against that number we can say hey

00:17:13,530 --> 00:17:16,680
your query complexity is a hundred

00:17:15,240 --> 00:17:18,810
thousand you probably shouldn't do this

00:17:16,680 --> 00:17:20,610
why don't you go ahead and add a limit

00:17:18,810 --> 00:17:21,930
to that pagination because guess well we

00:17:20,610 --> 00:17:23,430
have three thousand courses you don't

00:17:21,930 --> 00:17:25,800
need all of them so if you add that

00:17:23,430 --> 00:17:27,750
limit 25 we'll say ok great we'll take

00:17:25,800 --> 00:17:29,130
the limit and we'll you know say ok

00:17:27,750 --> 00:17:32,220
that's now your number and now your

00:17:29,130 --> 00:17:34,240
query complexity is 30 right because you

00:17:32,220 --> 00:17:35,559
make 25 calls and then I don't know made

00:17:34,240 --> 00:17:36,730
each of those calls one partner or

00:17:35,559 --> 00:17:38,559
something like that on the order of one

00:17:36,730 --> 00:17:39,970
partner so this is a really good way of

00:17:38,559 --> 00:17:43,750
estimating the cost of a query and

00:17:39,970 --> 00:17:45,760
allows you to to just nip rogue queries

00:17:43,750 --> 00:17:47,050
before they even start executing so

00:17:45,760 --> 00:17:48,790
though they'll catch it right before

00:17:47,050 --> 00:17:52,600
they'll catch it at parse time instead

00:17:48,790 --> 00:17:54,640
of at run time another thing that they

00:17:52,600 --> 00:17:58,840
have is this idea of limiting query

00:17:54,640 --> 00:18:01,030
depth typically because of this site you

00:17:58,840 --> 00:18:03,520
know we are building graphs there are

00:18:01,030 --> 00:18:05,200
always cycles and in those cycles you

00:18:03,520 --> 00:18:07,240
could theoretically just go on and on

00:18:05,200 --> 00:18:09,370
and on and on and on and on and so we

00:18:07,240 --> 00:18:12,100
could say hey hey you know 10 times is

00:18:09,370 --> 00:18:13,840
too many let's not do this you're doing

00:18:12,100 --> 00:18:15,550
something wrong something like that and

00:18:13,840 --> 00:18:17,650
again this is another rate great you

00:18:15,550 --> 00:18:19,240
know sort of compile time guard to add

00:18:17,650 --> 00:18:20,920
parse time to be able to say hey this is

00:18:19,240 --> 00:18:23,880
you don't want this it's gonna break

00:18:20,920 --> 00:18:27,309
everything or it's gonna be really slow

00:18:23,880 --> 00:18:29,230
and then back to the other feature that

00:18:27,309 --> 00:18:31,000
we heard before about selection set and

00:18:29,230 --> 00:18:33,580
look ahead they have something similar

00:18:31,000 --> 00:18:36,550
called query reducers that allow you to

00:18:33,580 --> 00:18:38,740
basically go through the entire schema

00:18:36,550 --> 00:18:40,030
and the query and figure out what sort

00:18:38,740 --> 00:18:42,490
of information we're gonna need so in

00:18:40,030 --> 00:18:44,740
this case if something needs a username

00:18:42,490 --> 00:18:46,540
or something needs your authorization

00:18:44,740 --> 00:18:48,370
and your User Profile it will go ahead

00:18:46,540 --> 00:18:50,320
and say hey we've collected these tags

00:18:48,370 --> 00:18:53,200
these concept of tags and say there was

00:18:50,320 --> 00:18:54,760
one tag that says you need some

00:18:53,200 --> 00:18:56,170
permission and we're gonna go ahead and

00:18:54,760 --> 00:18:57,910
retrieve that but if that tag doesn't

00:18:56,170 --> 00:18:58,929
exist in the query we're just not gonna

00:18:57,910 --> 00:19:01,630
retrieve that at all

00:18:58,929 --> 00:19:05,370
so other nice things that help make it

00:19:01,630 --> 00:19:09,730
easy to to run a good graphical server

00:19:05,370 --> 00:19:13,270
all right what do you think hot

00:19:09,730 --> 00:19:15,580
chocolate great C sharp so C sharp hot

00:19:13,270 --> 00:19:18,040
chocolate a really really interesting

00:19:15,580 --> 00:19:19,720
name I shouldn't know why I didn't I

00:19:18,040 --> 00:19:21,550
didn't I didn't I didn't look into the

00:19:19,720 --> 00:19:23,020
sort of why people chose these names I

00:19:21,550 --> 00:19:25,780
was just happy that all these names were

00:19:23,020 --> 00:19:27,490
drinks and things like that so they have

00:19:25,780 --> 00:19:31,300
a lot of in c-sharp they have a lot of

00:19:27,490 --> 00:19:33,490
great features here I think the one that

00:19:31,300 --> 00:19:37,540
was so into the most interesting one to

00:19:33,490 --> 00:19:38,770
me was something called export and at on

00:19:37,540 --> 00:19:39,850
its head I was like I didn't really

00:19:38,770 --> 00:19:41,559
understand what was going on here

00:19:39,850 --> 00:19:43,360
essentially what they're capable of

00:19:41,559 --> 00:19:45,760
doing is that they're capable of

00:19:43,360 --> 00:19:47,620
batching queries and using the results

00:19:45,760 --> 00:19:49,480
of the first query as input

00:19:47,620 --> 00:19:52,210
the second query and you might be

00:19:49,480 --> 00:19:54,550
thinking hey if I have one big graph

00:19:52,210 --> 00:19:56,590
he'll query how am I supposed to resolve

00:19:54,550 --> 00:19:58,390
the first part of the query and send it

00:19:56,590 --> 00:19:59,770
to the second piece and I was also

00:19:58,390 --> 00:20:02,290
equally confused and said this doesn't

00:19:59,770 --> 00:20:03,820
make sense at all so I did a little bit

00:20:02,290 --> 00:20:06,430
more research and I realized that this

00:20:03,820 --> 00:20:08,620
is actually really powerful the thing

00:20:06,430 --> 00:20:10,690
that's important to note here is one is

00:20:08,620 --> 00:20:12,460
that that bottom query is technically

00:20:10,690 --> 00:20:14,680
not seen tactically correct because it's

00:20:12,460 --> 00:20:16,540
missing that variables the IDS variable

00:20:14,680 --> 00:20:18,640
but the query engine is going to go

00:20:16,540 --> 00:20:19,780
ahead and rewrite that for you so what

00:20:18,640 --> 00:20:22,210
it's doing here is that instead of

00:20:19,780 --> 00:20:24,730
instead of sending one giant query where

00:20:22,210 --> 00:20:27,580
maybe in that giant query you have one

00:20:24,730 --> 00:20:28,840
slow field what you can do here is you

00:20:27,580 --> 00:20:31,150
can actually split it up into two

00:20:28,840 --> 00:20:33,010
separate queries and what's gonna happen

00:20:31,150 --> 00:20:34,900
is that when you send this request to

00:20:33,010 --> 00:20:36,580
the hot-chocolate server the first

00:20:34,900 --> 00:20:38,710
request here to the course catalog is

00:20:36,580 --> 00:20:40,390
going to go ahead and execute and when

00:20:38,710 --> 00:20:43,059
it returns it's going to take that set

00:20:40,390 --> 00:20:45,940
of ID's and use it as an argument for

00:20:43,059 --> 00:20:48,460
the second query but in the meantime

00:20:45,940 --> 00:20:50,890
it's returning the first one to the

00:20:48,460 --> 00:20:53,620
client so the client can actually

00:20:50,890 --> 00:20:55,240
respond to the first query because it's

00:20:53,620 --> 00:20:57,730
streaming the responses back from the

00:20:55,240 --> 00:20:59,140
server while the second one is executing

00:20:57,730 --> 00:21:00,940
in the background so your client can be

00:20:59,140 --> 00:21:02,800
doing things and that second one gets

00:21:00,940 --> 00:21:04,990
executed and then comes back and does a

00:21:02,800 --> 00:21:07,179
thing so it's very similar to that defer

00:21:04,990 --> 00:21:08,830
directive where it's deferring the

00:21:07,179 --> 00:21:10,690
execution of some things because they're

00:21:08,830 --> 00:21:11,770
not that necessary but I thought it was

00:21:10,690 --> 00:21:13,840
really cool because now you can

00:21:11,770 --> 00:21:16,720
parameterize that defer with different

00:21:13,840 --> 00:21:18,100
pieces of your query this is actually

00:21:16,720 --> 00:21:19,600
really useful for mutations as well

00:21:18,100 --> 00:21:21,910
because you can mutate something and

00:21:19,600 --> 00:21:24,280
then take that results back and use that

00:21:21,910 --> 00:21:25,480
as the input to another mutation down

00:21:24,280 --> 00:21:27,400
the line so I thought that was really

00:21:25,480 --> 00:21:33,960
cool and a really cool feature of

00:21:27,400 --> 00:21:33,960
hot-chocolate guesses

00:21:34,000 --> 00:21:40,400
Mercat wrong it's go so that was a

00:21:38,120 --> 00:21:43,070
gopher have you seen a gopher before

00:21:40,400 --> 00:21:44,690
this is a gopher I don't know if it to

00:21:43,070 --> 00:21:45,680
go for a might be a meerkat I really

00:21:44,690 --> 00:21:47,240
don't know I'd looked at

00:21:45,680 --> 00:21:50,390
I googled gopher and this is what came

00:21:47,240 --> 00:21:52,040
up so maybe it is a meerkat anyway sorry

00:21:50,390 --> 00:21:54,890
I didn't mean to like shut you down

00:21:52,040 --> 00:21:58,430
there it was it was it was still wrong

00:21:54,890 --> 00:22:01,640
but you know so and go we have graph

00:21:58,430 --> 00:22:03,290
heal Jen they have a couple of different

00:22:01,640 --> 00:22:05,060
entry points here and you know this is

00:22:03,290 --> 00:22:06,260
the there go they have some types and

00:22:05,060 --> 00:22:08,630
these are that this is how the resolvers

00:22:06,260 --> 00:22:09,500
attached to those types one of the

00:22:08,630 --> 00:22:11,180
things they have that I thought was

00:22:09,500 --> 00:22:13,880
really cool automatic persisted queries

00:22:11,180 --> 00:22:16,730
Apollo server has this support as well

00:22:13,880 --> 00:22:18,230
but what it does here is that instead of

00:22:16,730 --> 00:22:19,550
having to like work out the machinery of

00:22:18,230 --> 00:22:21,200
compiling queries and things like that

00:22:19,550 --> 00:22:23,240
and finding hashes and things like that

00:22:21,200 --> 00:22:25,310
what it does is that it actually sends

00:22:23,240 --> 00:22:27,350
the hash of the query the first time and

00:22:25,310 --> 00:22:29,180
if the server has it great it'll resolve

00:22:27,350 --> 00:22:31,130
that query for you and it'll return back

00:22:29,180 --> 00:22:32,810
the result that you expect but if the

00:22:31,130 --> 00:22:34,130
cache doesn't have there was have the

00:22:32,810 --> 00:22:35,600
query or the server doesn't have it

00:22:34,130 --> 00:22:38,060
it'll go back to the client say hey this

00:22:35,600 --> 00:22:38,420
hash doesn't it doesn't mean anything to

00:22:38,060 --> 00:22:40,190
me

00:22:38,420 --> 00:22:42,980
then the client will go ahead and send

00:22:40,190 --> 00:22:44,840
it back with the entire query thus

00:22:42,980 --> 00:22:46,940
hashing it and persisting it for

00:22:44,840 --> 00:22:49,130
subsequent queries so I thought this was

00:22:46,940 --> 00:22:51,230
a really cool way of automating this

00:22:49,130 --> 00:22:56,270
process that might otherwise be a little

00:22:51,230 --> 00:22:58,310
bit a little arduous Ruby this one was

00:22:56,270 --> 00:22:59,900
this one is it give me sorry I think

00:22:58,310 --> 00:23:03,020
that was probably the easiest one um

00:22:59,900 --> 00:23:04,760
so ruby has their code first solution

00:23:03,020 --> 00:23:07,250
where they have the fields in their Ruby

00:23:04,760 --> 00:23:08,300
objects and they have some other good

00:23:07,250 --> 00:23:10,790
features too they have something called

00:23:08,300 --> 00:23:12,260
back trace annotations if you're using

00:23:10,790 --> 00:23:13,730
something like Apollo you might see

00:23:12,260 --> 00:23:15,890
errors and you might see the stack trace

00:23:13,730 --> 00:23:17,960
but you it's hard to see that in your

00:23:15,890 --> 00:23:19,640
actual stack traces on your servers in

00:23:17,960 --> 00:23:21,860
your logs they have a way of parsing

00:23:19,640 --> 00:23:24,140
that so instead of just seeing this mess

00:23:21,860 --> 00:23:26,150
of fields and resolvers it actually

00:23:24,140 --> 00:23:28,250
shows you at the bottom what the graphic

00:23:26,150 --> 00:23:29,780
you execution path was so you can kind

00:23:28,250 --> 00:23:31,640
of see oh yeah this is broken because

00:23:29,780 --> 00:23:33,590
course stop partners and then like query

00:23:31,640 --> 00:23:35,240
dot course and it'll figure out so it's

00:23:33,590 --> 00:23:37,370
really easy to parse where exactly in my

00:23:35,240 --> 00:23:39,430
graph QL code this is not just exactly

00:23:37,370 --> 00:23:42,290
where my ruby coded this failed

00:23:39,430 --> 00:23:43,790
this also has field visibility and again

00:23:42,290 --> 00:23:45,440
this is something that was in grass Hill

00:23:43,790 --> 00:23:47,479
Java this is an incredible feature

00:23:45,440 --> 00:23:50,029
because this allows you to

00:23:47,479 --> 00:23:51,649
again shape the what your schema looks

00:23:50,029 --> 00:23:53,599
like two different consumers without

00:23:51,649 --> 00:23:55,580
having to operationally separate the

00:23:53,599 --> 00:23:57,769
schemas in two different places and so

00:23:55,580 --> 00:23:59,479
you can both limit the visibility of the

00:23:57,769 --> 00:24:02,149
of the schema as well as the execution

00:23:59,479 --> 00:24:04,700
and access to those resolvers and that

00:24:02,149 --> 00:24:06,229
gives you a lot of power and being able

00:24:04,700 --> 00:24:09,919
to serve different roles without having

00:24:06,229 --> 00:24:11,749
to have different servers and the thing

00:24:09,919 --> 00:24:14,029
is I talked a lot about the individual

00:24:11,749 --> 00:24:16,009
features of nice features for these

00:24:14,029 --> 00:24:18,769
particular languages but really these

00:24:16,009 --> 00:24:20,869
servers have a lot in common too and so

00:24:18,769 --> 00:24:23,239
I kind of if we think about some of the

00:24:20,869 --> 00:24:24,529
hard problems and plus one we talked

00:24:23,239 --> 00:24:26,869
about this before most of the servers

00:24:24,529 --> 00:24:28,580
use data loader in fact they use it

00:24:26,869 --> 00:24:31,219
verbatim in their language elixir just

00:24:28,580 --> 00:24:32,779
uses data loader and I think it's really

00:24:31,219 --> 00:24:34,159
cool other things that I think are

00:24:32,779 --> 00:24:36,710
interesting too are things like custom

00:24:34,159 --> 00:24:39,109
scalars so a lot of them have

00:24:36,710 --> 00:24:41,359
definitions for scalars that they use in

00:24:39,109 --> 00:24:43,669
their language for example URLs date

00:24:41,359 --> 00:24:45,169
times you you IDs these are common

00:24:43,669 --> 00:24:46,639
constructs that are easy for the

00:24:45,169 --> 00:24:49,190
server's to support and they just

00:24:46,639 --> 00:24:50,589
support them out of the box and on top

00:24:49,190 --> 00:24:53,570
of that you have a lot of middleware

00:24:50,589 --> 00:24:57,049
authorization telemetry even portability

00:24:53,570 --> 00:24:58,429
things like modules as well as error

00:24:57,049 --> 00:25:00,229
handling a lot of the new servers

00:24:58,429 --> 00:25:02,359
especially a lot of these great service

00:25:00,229 --> 00:25:04,339
have great error handling solutions and

00:25:02,359 --> 00:25:08,359
make use of things that are not even in

00:25:04,339 --> 00:25:10,219
the latest you know specification

00:25:08,359 --> 00:25:12,259
publication they're using some of the

00:25:10,219 --> 00:25:13,969
stuff in the working group error

00:25:12,259 --> 00:25:15,320
handling specification and exposing that

00:25:13,969 --> 00:25:16,549
to you so do you mean the latest and

00:25:15,320 --> 00:25:20,089
greatest in a lot of these servers

00:25:16,549 --> 00:25:22,879
already and on top of that when you have

00:25:20,089 --> 00:25:25,399
the concept of modularizing your schema

00:25:22,879 --> 00:25:26,809
some you know packages like graphical

00:25:25,399 --> 00:25:29,570
modules and JavaScript that allow you to

00:25:26,809 --> 00:25:32,029
package up subsections of your schema

00:25:29,570 --> 00:25:33,769
but when you have code first solutions

00:25:32,029 --> 00:25:35,839
to these servers you can just use the

00:25:33,769 --> 00:25:37,999
module system that comes with the

00:25:35,839 --> 00:25:40,719
language itself so this is a this is a

00:25:37,999 --> 00:25:43,669
lick sir I think that's allowing you to

00:25:40,719 --> 00:25:45,049
you to create use modules the way that

00:25:43,669 --> 00:25:48,289
you would use them in a lecture to build

00:25:45,049 --> 00:25:50,210
your graphical server itself so many

00:25:48,289 --> 00:25:52,129
servers are out there they all kind of

00:25:50,210 --> 00:25:53,809
go beyond the graphical specification

00:25:52,129 --> 00:25:56,059
and the question that I have for you is

00:25:53,809 --> 00:25:57,799
like what if like all the servers had

00:25:56,059 --> 00:25:59,509
these capabilities what if I was just

00:25:57,799 --> 00:26:01,160
talking generically about here are cool

00:25:59,509 --> 00:26:03,590
of server features why are they specific

00:26:01,160 --> 00:26:05,870
two different languages that's the

00:26:03,590 --> 00:26:12,760
question I have okay thank you

00:26:05,870 --> 00:26:12,760

YouTube URL: https://www.youtube.com/watch?v=3iiUEUsk8mc


