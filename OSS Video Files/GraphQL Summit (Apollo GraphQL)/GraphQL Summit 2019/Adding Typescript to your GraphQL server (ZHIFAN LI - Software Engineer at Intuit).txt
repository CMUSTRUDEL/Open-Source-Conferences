Title: Adding Typescript to your GraphQL server (ZHIFAN LI - Software Engineer at Intuit)
Publication date: 2019-11-02
Playlist: GraphQL Summit 2019
Description: 
	Considering moving your existing GraphQL server to Typescript, but donâ€™t know where to start? This talk will walk you through all the basics: from adding Typescript to your server, convincing your team and the migration strategy that will eventually get you there.
Captions: 
	00:00:00,809 --> 00:00:07,679
how's everybody feeling today good okay

00:00:04,859 --> 00:00:09,389
cool so hi everyone my name is Z fondly

00:00:07,679 --> 00:00:11,400
I'm a senior software engineer from

00:00:09,389 --> 00:00:13,679
Intuit so don't be fooled by my dog

00:00:11,400 --> 00:00:14,789
stickers behind my laptop we're not just

00:00:13,679 --> 00:00:16,260
powering pet store

00:00:14,789 --> 00:00:17,880
I want our product QuickBooks who are

00:00:16,260 --> 00:00:21,090
powering small businesses around the

00:00:17,880 --> 00:00:23,940
world so let's get started about adding

00:00:21,090 --> 00:00:25,860
typescript to your graph QL server so

00:00:23,940 --> 00:00:28,020
every time that I feel like adding the

00:00:25,860 --> 00:00:29,640
new technology to your coat stack is

00:00:28,020 --> 00:00:32,009
more like an onboarding process or

00:00:29,640 --> 00:00:33,780
hiring process for your new teammates so

00:00:32,009 --> 00:00:36,030
in this talk you will hear about meet

00:00:33,780 --> 00:00:37,829
and greet the candidate type script what

00:00:36,030 --> 00:00:40,289
value it brings and what a kind of

00:00:37,829 --> 00:00:41,940
benefit it can bring to your team second

00:00:40,289 --> 00:00:44,070
is the trial period it's kind of like an

00:00:41,940 --> 00:00:45,870
interview process we want to try it out

00:00:44,070 --> 00:00:48,210
first to see if it's a fit with the team

00:00:45,870 --> 00:00:50,069
culture with the coat stack and then

00:00:48,210 --> 00:00:51,749
last I will go over a migration strategy

00:00:50,069 --> 00:00:53,609
of the entire code base when we actually

00:00:51,749 --> 00:00:56,640
decide to commit to a higher type script

00:00:53,609 --> 00:01:00,839
to be part of our code base members okay

00:00:56,640 --> 00:01:03,210
so first that's me the candidate type

00:01:00,839 --> 00:01:04,769
script so by show of hands can you raise

00:01:03,210 --> 00:01:08,250
your hand if you've heard of or youth

00:01:04,769 --> 00:01:09,270
type script before okay cool there there

00:01:08,250 --> 00:01:10,950
are a lot of you guys just to be

00:01:09,270 --> 00:01:12,719
inclusive can you raise your hand if you

00:01:10,950 --> 00:01:15,390
have not heard about type script but are

00:01:12,719 --> 00:01:17,310
you excited about hearing about it cool

00:01:15,390 --> 00:01:20,880
it's a nice opportunity stretch for

00:01:17,310 --> 00:01:23,670
everyone so typescript is a superset of

00:01:20,880 --> 00:01:26,070
JavaScript and it provides static typing

00:01:23,670 --> 00:01:28,229
so just as a quick example this is an

00:01:26,070 --> 00:01:29,789
example case of a type through file

00:01:28,229 --> 00:01:31,649
where you can see there's a function

00:01:29,789 --> 00:01:34,380
called greeter and then the input is

00:01:31,649 --> 00:01:36,299
person and is typed to be string so the

00:01:34,380 --> 00:01:38,549
only input that's going to be accepted

00:01:36,299 --> 00:01:40,890
is a string value so what would happen

00:01:38,549 --> 00:01:42,840
if we change the string to a numeric

00:01:40,890 --> 00:01:45,359
value then type script it's gonna catch

00:01:42,840 --> 00:01:46,979
that in so an error so if you use Visual

00:01:45,359 --> 00:01:47,850
Studio code this is what the air is

00:01:46,979 --> 00:01:51,030
gonna look like

00:01:47,850 --> 00:01:53,219
this is gonna say that number is not

00:01:51,030 --> 00:01:57,479
compatible with parameter type Street

00:01:53,219 --> 00:01:59,729
okay so as you can see from an example

00:01:57,479 --> 00:02:01,979
static typing is one of typescript

00:01:59,729 --> 00:02:03,899
skills and also because a superset of

00:02:01,979 --> 00:02:05,789
JavaScript it also supports latest J's

00:02:03,899 --> 00:02:07,619
features browser compatibility and

00:02:05,789 --> 00:02:09,509
because it's developed by Microsoft

00:02:07,619 --> 00:02:11,370
Microsoft Visual Studio code already

00:02:09,509 --> 00:02:13,690
provides a lot of great tooling in terms

00:02:11,370 --> 00:02:15,670
of making type doing type script easier

00:02:13,690 --> 00:02:17,410
and in term of adoption there are over

00:02:15,670 --> 00:02:19,030
2,000 companies that are actively using

00:02:17,410 --> 00:02:20,980
typescript right now so it's very

00:02:19,030 --> 00:02:22,840
popular in attacking this tree but it

00:02:20,980 --> 00:02:26,560
will yet be a good fit for your team

00:02:22,840 --> 00:02:29,050
okay so next then we're at the trial

00:02:26,560 --> 00:02:31,600
period so let's give it a try so our

00:02:29,050 --> 00:02:34,360
team adds QuickBooks payroll we build a

00:02:31,600 --> 00:02:36,220
graph QL server using Apollo servers so

00:02:34,360 --> 00:02:37,840
this is an example about a very

00:02:36,220 --> 00:02:40,720
tentative file structure of what it

00:02:37,840 --> 00:02:42,190
looks like so right here in a schema

00:02:40,720 --> 00:02:43,900
folder you can see their company

00:02:42,190 --> 00:02:45,430
employees pay schedule they are all

00:02:43,900 --> 00:02:48,190
different areas that are potentially

00:02:45,430 --> 00:02:49,780
owned by different teams so that starts

00:02:48,190 --> 00:02:52,810
small because we just want to try it out

00:02:49,780 --> 00:02:56,380
writing our code base so my strategy

00:02:52,810 --> 00:02:58,360
first is to take a small file or just a

00:02:56,380 --> 00:03:00,880
small folder and try to refactor every

00:02:58,360 --> 00:03:03,190
single javascript file there you to time

00:03:00,880 --> 00:03:05,830
script so one of the principles that I'd

00:03:03,190 --> 00:03:07,540
like to use is if the file has very few

00:03:05,830 --> 00:03:09,340
imports then that will be an ideal

00:03:07,540 --> 00:03:11,380
candidate because we don't have to deal

00:03:09,340 --> 00:03:14,320
with those extra dependency typing stuff

00:03:11,380 --> 00:03:16,600
so once we pick start small and we're

00:03:14,320 --> 00:03:17,980
ready to refactor it before that I think

00:03:16,600 --> 00:03:21,730
it's really important to said that goes

00:03:17,980 --> 00:03:23,440
about trying it out for example we think

00:03:21,730 --> 00:03:25,060
about a questions about what a problem

00:03:23,440 --> 00:03:26,709
is that you want typescript to solve

00:03:25,060 --> 00:03:29,620
ahead of time and then kind of define a

00:03:26,709 --> 00:03:31,570
success metric of for example how many

00:03:29,620 --> 00:03:34,150
bugs that are you want typescript to

00:03:31,570 --> 00:03:36,340
catch at develop 10 min time also think

00:03:34,150 --> 00:03:37,810
about what could be the potential things

00:03:36,340 --> 00:03:39,730
that is stopping your whole team from

00:03:37,810 --> 00:03:41,110
using typescript for example if it's

00:03:39,730 --> 00:03:42,610
learning curve then I think it would be

00:03:41,110 --> 00:03:44,709
helpful to document your learning

00:03:42,610 --> 00:03:47,440
experience like a problem study running

00:03:44,709 --> 00:03:49,540
to and the resources that you rely on to

00:03:47,440 --> 00:03:51,280
solve your problem so once your goal is

00:03:49,540 --> 00:03:53,230
set and then that's looking to you how

00:03:51,280 --> 00:03:55,360
to incremental e change that small

00:03:53,230 --> 00:03:58,480
folder or file into typescript

00:03:55,360 --> 00:04:00,310
so the first step straight forward at

00:03:58,480 --> 00:04:02,320
typescript to your codebase there are a

00:04:00,310 --> 00:04:03,640
lot of resources out there types through

00:04:02,320 --> 00:04:05,590
official website provides great

00:04:03,640 --> 00:04:07,690
tutorials and resources in terms of this

00:04:05,590 --> 00:04:09,940
but essentially you would want to define

00:04:07,690 --> 00:04:12,940
a config file that's called es json dot

00:04:09,940 --> 00:04:15,459
TS config dot JSON and then you want to

00:04:12,940 --> 00:04:18,519
rename the GS files in a specific area

00:04:15,459 --> 00:04:21,940
to dot yes so this is an example of what

00:04:18,519 --> 00:04:24,430
the TS config file looks like so it's

00:04:21,940 --> 00:04:26,350
gonna output the compile type compile

00:04:24,430 --> 00:04:27,340
typescript code in JavaScript to build

00:04:26,350 --> 00:04:30,010
folder and

00:04:27,340 --> 00:04:32,440
latias it's a to be true the property of

00:04:30,010 --> 00:04:34,300
Lao Qi is said to be true allows the

00:04:32,440 --> 00:04:36,250
coexistence of typescript file and

00:04:34,300 --> 00:04:38,710
JavaScript file it's a great step of

00:04:36,250 --> 00:04:41,740
having both of them exist in the same

00:04:38,710 --> 00:04:43,660
first place and then after that at the

00:04:41,740 --> 00:04:45,460
end of the first step you would want to

00:04:43,660 --> 00:04:47,800
check do a check point to make sure that

00:04:45,460 --> 00:04:50,500
a server still startup nothing is broken

00:04:47,800 --> 00:04:53,710
and your test still passes so after that

00:04:50,500 --> 00:04:56,139
step the second one is into the TS

00:04:53,710 --> 00:04:59,199
config dot JSON file we want to set the

00:04:56,139 --> 00:05:02,080
no implicit an e to be true so what this

00:04:59,199 --> 00:05:04,060
does and how why the last steps works is

00:05:02,080 --> 00:05:05,650
that when your a renaming type script

00:05:04,060 --> 00:05:08,440
file said yes what it actually does is

00:05:05,650 --> 00:05:11,710
put any type in every single line of

00:05:08,440 --> 00:05:14,080
your code so setting reinforcing that no

00:05:11,710 --> 00:05:15,970
implicit an e to be true actually forces

00:05:14,080 --> 00:05:17,770
you to start adding types so that's to

00:05:15,970 --> 00:05:20,470
take a look about what the are the types

00:05:17,770 --> 00:05:22,240
that we want to add so first of all when

00:05:20,470 --> 00:05:23,650
you start a starter server you're

00:05:22,240 --> 00:05:25,930
probably gonna see errors that are being

00:05:23,650 --> 00:05:29,380
cyril of types being missing for extra

00:05:25,930 --> 00:05:31,900
dependencies but typescript community is

00:05:29,380 --> 00:05:34,240
really good at handling this as there

00:05:31,900 --> 00:05:36,039
are a lot of tons of external packages

00:05:34,240 --> 00:05:38,530
just for the types for some popular ones

00:05:36,039 --> 00:05:40,810
in this example lo - to solve this you

00:05:38,530 --> 00:05:43,570
can just install it at type slash low -

00:05:40,810 --> 00:05:47,080
to solve this issue but if you have any

00:05:43,570 --> 00:05:48,729
like internal dependency that does not

00:05:47,080 --> 00:05:52,289
have type declaration at the step you

00:05:48,729 --> 00:05:55,000
would add the type declaration an

00:05:52,289 --> 00:05:57,130
English into that we also want to add

00:05:55,000 --> 00:05:59,530
type to an actual file that you want to

00:05:57,130 --> 00:06:01,539
refactor so this is an example of a

00:05:59,530 --> 00:06:04,120
resolver file so as you can see the

00:06:01,539 --> 00:06:06,460
company curry is kind of returning back

00:06:04,120 --> 00:06:08,919
a list of employees for the employees

00:06:06,460 --> 00:06:10,750
field and now you started thinking then

00:06:08,919 --> 00:06:13,990
when I'm setting the type definition

00:06:10,750 --> 00:06:16,090
it's probably gonna be a list of object

00:06:13,990 --> 00:06:18,400
that is in the same same shape as to

00:06:16,090 --> 00:06:20,680
employees type so remember that graph

00:06:18,400 --> 00:06:23,260
queue is a type language so we already

00:06:20,680 --> 00:06:26,050
have that defined summary in a schema so

00:06:23,260 --> 00:06:28,090
how can we convert it to typescript

00:06:26,050 --> 00:06:30,430
types and use it for our type definition

00:06:28,090 --> 00:06:32,620
so there's a great tool called graph QR

00:06:30,430 --> 00:06:34,810
code generator that you get a feed in

00:06:32,620 --> 00:06:36,880
the schema file for your graph QL server

00:06:34,810 --> 00:06:38,620
and then what it gives back to you is

00:06:36,880 --> 00:06:41,169
actually generated types that you can

00:06:38,620 --> 00:06:43,419
import directly in your type script file

00:06:41,169 --> 00:06:45,610
so coming back to the resolver all you

00:06:43,419 --> 00:06:47,409
need to do is just to implement import

00:06:45,610 --> 00:06:49,150
the resolver type from the generated

00:06:47,409 --> 00:06:51,699
resolver types and then you're done with

00:06:49,150 --> 00:06:53,229
this step before that make sure that

00:06:51,699 --> 00:06:56,080
your server starts up for your test

00:06:53,229 --> 00:06:58,629
passes so then it comes to the last step

00:06:56,080 --> 00:07:00,699
is to enable strict typing so same thing

00:06:58,629 --> 00:07:02,830
in a TS contact dot JSON there's a

00:07:00,699 --> 00:07:04,719
strict option that you can flip it on to

00:07:02,830 --> 00:07:07,029
set it to be true what it means

00:07:04,719 --> 00:07:09,460
it's that invoice is no implicit any but

00:07:07,029 --> 00:07:11,770
also enforces no tracks bind call apply

00:07:09,460 --> 00:07:13,930
functional types more strict type

00:07:11,770 --> 00:07:16,779
checking so this is the stage where you

00:07:13,930 --> 00:07:18,129
would add more types more stricter types

00:07:16,779 --> 00:07:21,789
on top of the types that you already

00:07:18,129 --> 00:07:25,330
added on at step two so after this you

00:07:21,789 --> 00:07:27,879
already being finishing with this file

00:07:25,330 --> 00:07:32,310
or folder refactor and then you are

00:07:27,879 --> 00:07:36,479
ready to go so after that tryout period

00:07:32,310 --> 00:07:38,560
what comes next is ready to evaluate if

00:07:36,479 --> 00:07:40,659
refactoring the specific folder already

00:07:38,560 --> 00:07:44,349
fulfills your goal and discuss it as a

00:07:40,659 --> 00:07:46,479
team so one of the things that you might

00:07:44,349 --> 00:07:48,159
discuss our one is that if it really

00:07:46,479 --> 00:07:49,659
fits the need I think it's really

00:07:48,159 --> 00:07:51,219
important because different code base

00:07:49,659 --> 00:07:53,050
does have different use cases and

00:07:51,219 --> 00:07:56,080
problems that we want to solve for

00:07:53,050 --> 00:07:58,539
example one cases that I discovered

00:07:56,080 --> 00:08:01,089
while I was doing this inspiration is

00:07:58,539 --> 00:08:03,370
that we're building it using Apollo

00:08:01,089 --> 00:08:05,710
servers so Apollo server also have types

00:08:03,370 --> 00:08:06,159
that commas with the packages so in one

00:08:05,710 --> 00:08:08,909
file

00:08:06,159 --> 00:08:11,800
we're actually overriding a private

00:08:08,909 --> 00:08:13,659
variable inside a JavaScript class but

00:08:11,800 --> 00:08:15,520
we weren't noticing it until we imported

00:08:13,659 --> 00:08:17,259
a type and then reinforces good coding

00:08:15,520 --> 00:08:19,899
practices based on a contract between

00:08:17,259 --> 00:08:21,759
packages so that's one example also

00:08:19,899 --> 00:08:24,490
because the strongly typed a graph QL

00:08:21,759 --> 00:08:26,379
and also the easy generation of the

00:08:24,490 --> 00:08:28,000
different types are also could be a

00:08:26,379 --> 00:08:30,399
strong reason in terms of using

00:08:28,000 --> 00:08:32,769
typescript and then you would make a

00:08:30,399 --> 00:08:34,390
decision collectively as a team and also

00:08:32,769 --> 00:08:35,919
there are a lot of ways about collecting

00:08:34,390 --> 00:08:38,469
feedbacks across if you feel like your

00:08:35,919 --> 00:08:40,630
codebase is only by different teams and

00:08:38,469 --> 00:08:42,279
you would want to do surveys or meetings

00:08:40,630 --> 00:08:44,250
or just to collect the feedback to make

00:08:42,279 --> 00:08:46,720
sure that everyone's on the same page so

00:08:44,250 --> 00:08:48,940
after you're done with that and if you

00:08:46,720 --> 00:08:50,610
decided that you want to move on to

00:08:48,940 --> 00:08:54,370
migrate the whole code base into

00:08:50,610 --> 00:08:55,040
typescript then that promise to our

00:08:54,370 --> 00:08:58,730
certs

00:08:55,040 --> 00:09:01,870
so don't be fooled by this Jeff it's not

00:08:58,730 --> 00:09:04,340
Daniella this is just the beginning so

00:09:01,870 --> 00:09:05,930
there are various strategies that we can

00:09:04,340 --> 00:09:08,660
do this so for example we just

00:09:05,930 --> 00:09:10,940
refactored one folder right and all we

00:09:08,660 --> 00:09:13,430
need to do we why not just refactor like

00:09:10,940 --> 00:09:16,760
the whole the rest of the repository

00:09:13,430 --> 00:09:18,830
into type script files so that is one

00:09:16,760 --> 00:09:21,230
solution you can do it in the same way

00:09:18,830 --> 00:09:24,920
that we did it like first to update just

00:09:21,230 --> 00:09:27,020
the J's files to Tia's second kind of

00:09:24,920 --> 00:09:28,700
restrict the type more by force than

00:09:27,020 --> 00:09:31,250
though implicit an E and then the third

00:09:28,700 --> 00:09:33,080
step is to do the strict typing so there

00:09:31,250 --> 00:09:35,540
are pros and cons that comes with this

00:09:33,080 --> 00:09:37,160
approach for example well if the pros is

00:09:35,540 --> 00:09:39,230
that you get a think holistically about

00:09:37,160 --> 00:09:40,970
what your code base and defying commonly

00:09:39,230 --> 00:09:42,890
commonly use the types that can be

00:09:40,970 --> 00:09:45,110
shared everywhere across different teams

00:09:42,890 --> 00:09:47,000
but one of the cons is that if you think

00:09:45,110 --> 00:09:50,060
about phase two it's kind of just adding

00:09:47,000 --> 00:09:51,800
all the types to every seeing every

00:09:50,060 --> 00:09:54,590
single file in a repository so that

00:09:51,800 --> 00:09:56,480
would cause a huge pour request and

00:09:54,590 --> 00:09:58,250
potentially if there are other scenes

00:09:56,480 --> 00:09:59,780
that it's working in parallel it might

00:09:58,250 --> 00:10:02,510
cause a lot of conflict so it's not

00:09:59,780 --> 00:10:04,460
great for productivity but if you're

00:10:02,510 --> 00:10:06,410
working with smaller code bases I think

00:10:04,460 --> 00:10:09,680
this is a great option in terms of it's

00:10:06,410 --> 00:10:11,270
just fast faster iteration so that the

00:10:09,680 --> 00:10:13,970
whole code base can't get the benefit of

00:10:11,270 --> 00:10:15,830
typescript at the same time and then the

00:10:13,970 --> 00:10:17,750
other strategy that I can think of is

00:10:15,830 --> 00:10:20,780
just to do it update by area so for

00:10:17,750 --> 00:10:22,670
example today I do the employees folder

00:10:20,780 --> 00:10:24,350
and a refactor everything to typescript

00:10:22,670 --> 00:10:27,080
where all the other JavaScript files

00:10:24,350 --> 00:10:28,580
still exists and then you do like

00:10:27,080 --> 00:10:31,670
another folder and you do it gradually

00:10:28,580 --> 00:10:34,430
until the whole repository is replaced

00:10:31,670 --> 00:10:36,140
with typescript code so for this

00:10:34,430 --> 00:10:37,640
approach there are a lot of pros because

00:10:36,140 --> 00:10:40,340
it's called heaps the code refactoring

00:10:37,640 --> 00:10:41,900
isolation like a messing up with one

00:10:40,340 --> 00:10:45,440
team's code it does not necessarily

00:10:41,900 --> 00:10:47,660
affect the other teams code base but

00:10:45,440 --> 00:10:49,820
there are definitely cons that comes

00:10:47,660 --> 00:10:52,370
with this one for example I would

00:10:49,820 --> 00:10:54,410
imagine the first refactoring was gonna

00:10:52,370 --> 00:10:56,540
be huge because it imports all the

00:10:54,410 --> 00:11:00,380
comment ility files for example loggers

00:10:56,540 --> 00:11:01,910
and then in the first very first PR i

00:11:00,380 --> 00:11:03,680
kind of just have to take care of every

00:11:01,910 --> 00:11:05,990
single import and it kind of declare all

00:11:03,680 --> 00:11:08,120
the types first and then the work is

00:11:05,990 --> 00:11:08,440
gonna become easier gradually but still

00:11:08,120 --> 00:11:09,940
there

00:11:08,440 --> 00:11:12,250
significant stuff that we need to figure

00:11:09,940 --> 00:11:13,810
out in the first stage there are also a

00:11:12,250 --> 00:11:15,730
lot of other strategy you can do a mix

00:11:13,810 --> 00:11:18,389
of these two but I think what I would I

00:11:15,730 --> 00:11:20,680
would advocate for more it's just to

00:11:18,389 --> 00:11:22,690
keep it straight for where to keep it

00:11:20,680 --> 00:11:25,689
release catered to your own team's needs

00:11:22,690 --> 00:11:27,339
because essentially it's based on your

00:11:25,689 --> 00:11:30,670
team's resource productivity and your

00:11:27,339 --> 00:11:31,930
team goal so just to wrap up I think we

00:11:30,670 --> 00:11:33,879
want to take away I do want to point out

00:11:31,930 --> 00:11:35,889
is there are so many different

00:11:33,879 --> 00:11:38,410
approaches of refactoring code bases and

00:11:35,889 --> 00:11:41,100
there are so many tools that are about

00:11:38,410 --> 00:11:43,209
type checking and about typescript so

00:11:41,100 --> 00:11:44,680
you figure out what's the lore works

00:11:43,209 --> 00:11:46,449
best for your team I think it's the most

00:11:44,680 --> 00:11:48,819
important thing and the other thing that

00:11:46,449 --> 00:11:50,889
I put kind of a sub point because I want

00:11:48,819 --> 00:11:53,050
to use the T&S from typescript or take

00:11:50,889 --> 00:11:55,329
choice so it needs to be a plural so

00:11:53,050 --> 00:11:57,850
experiment and iterate is also extremely

00:11:55,329 --> 00:11:59,829
important because just by doing file by

00:11:57,850 --> 00:12:01,720
file you keep the costs really low like

00:11:59,829 --> 00:12:03,730
it doesn't hurt anything if you just one

00:12:01,720 --> 00:12:05,410
file in typescript and it makes a lot

00:12:03,730 --> 00:12:08,680
easier to convince other people to use

00:12:05,410 --> 00:12:10,930
typescript yeah so that'll be all so

00:12:08,680 --> 00:12:13,870
feel free to contact me if you have any

00:12:10,930 --> 00:12:18,149
questions so thank you very much

00:12:13,870 --> 00:12:18,149

YouTube URL: https://www.youtube.com/watch?v=kyXGMorwKgU


