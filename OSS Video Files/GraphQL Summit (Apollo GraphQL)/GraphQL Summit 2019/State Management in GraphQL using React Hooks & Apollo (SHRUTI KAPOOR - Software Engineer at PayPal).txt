Title: State Management in GraphQL using React Hooks & Apollo (SHRUTI KAPOOR - Software Engineer at PayPal)
Publication date: 2019-11-02
Playlist: GraphQL Summit 2019
Description: 
	This talks walks through how to use React Hooks in maintaining state while using GraphQL.

Resources:
Learn more about Summit - https://summit.graphql.com/
Explore the Apollo react hooks API docs - https://www.apollographql.com/docs/react/api/react/hooks/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Captions: 
	00:00:02,700 --> 00:00:09,219
[Applause]

00:00:04,380 --> 00:00:10,930
hi everybody can you all hear me I'm a

00:00:09,219 --> 00:00:14,260
little sick today so my voice is not

00:00:10,930 --> 00:00:16,660
100% if you get sick after the

00:00:14,260 --> 00:00:19,900
conference you know who to blame okay

00:00:16,660 --> 00:00:21,880
cool thank you all right so hi everybody

00:00:19,900 --> 00:00:25,060
as Peggy said I'm Shruti Kapoor I'm a

00:00:21,880 --> 00:00:26,740
senior software engineer at paper at

00:00:25,060 --> 00:00:30,400
paper we work with three technologies

00:00:26,740 --> 00:00:32,140
very extensively craft QL react in

00:00:30,400 --> 00:00:35,440
JavaScript and I'm super passionate

00:00:32,140 --> 00:00:39,010
about these three technologies but more

00:00:35,440 --> 00:00:41,470
than that I'm passionate about dev jokes

00:00:39,010 --> 00:00:45,070
and because tomorrow is Halloween

00:00:41,470 --> 00:00:46,360
Halloween edition death jokes so I'm

00:00:45,070 --> 00:00:50,440
going to say our questions and you can

00:00:46,360 --> 00:00:57,750
see out the answers hey officer how did

00:00:50,440 --> 00:01:01,920
the hackers escape that's pretty good

00:00:57,750 --> 00:01:01,920
but they just ran somewhere

00:01:05,470 --> 00:01:21,950
Videl programmers get confused between

00:01:07,909 --> 00:01:24,570
Halloween and Christmas because 31st

00:01:21,950 --> 00:01:27,710
octal equals 25 decimal

00:01:24,570 --> 00:01:27,710
[Music]

00:01:28,990 --> 00:01:37,759
did you hear about the witch who was off

00:01:31,490 --> 00:01:40,039
by two when casting a hex they fail to

00:01:37,759 --> 00:01:45,140
make the target dead and made them deaf

00:01:40,039 --> 00:01:47,520
instead so if you want to learn more

00:01:45,140 --> 00:01:51,430
deaf jokes

00:01:47,520 --> 00:01:58,990
go to github alright let's get started

00:01:51,430 --> 00:02:01,990
so I'm gonna be talking about state

00:01:58,990 --> 00:02:03,520
management using react hooks by the way

00:02:01,990 --> 00:02:05,140
all the slides are available on Twitter

00:02:03,520 --> 00:02:08,380
if they're not published yet I'll go

00:02:05,140 --> 00:02:10,420
publish them right after this my goal by

00:02:08,380 --> 00:02:13,720
this presentation is to help you draw

00:02:10,420 --> 00:02:15,970
the link between hooks graph QL and data

00:02:13,720 --> 00:02:18,099
and how to think in terms of data for

00:02:15,970 --> 00:02:20,019
your state management needs I want to

00:02:18,099 --> 00:02:21,970
give you my learnings and so that you

00:02:20,019 --> 00:02:24,550
can start experimenting with react hooks

00:02:21,970 --> 00:02:26,470
in your own project by the end of this

00:02:24,550 --> 00:02:28,480
presentation my goal is that you should

00:02:26,470 --> 00:02:29,739
be able to manage your application state

00:02:28,480 --> 00:02:31,780
in a predictable manner

00:02:29,739 --> 00:02:35,200
without the need of any third party

00:02:31,780 --> 00:02:36,850
package so here is the outline of today

00:02:35,200 --> 00:02:38,980
I'm gonna be talking about different

00:02:36,850 --> 00:02:41,140
types of state I'll give you a brief

00:02:38,980 --> 00:02:42,790
introduction of hooks we'll talk about

00:02:41,140 --> 00:02:45,220
how to use react hooks along with

00:02:42,790 --> 00:02:47,650
graphical api's we'll talk about Apollo

00:02:45,220 --> 00:02:50,830
and hooks and the new reactor Apollo

00:02:47,650 --> 00:02:52,480
hooks so let's first talk about what are

00:02:50,830 --> 00:02:53,680
the different types of state there's two

00:02:52,480 --> 00:02:56,019
different types of state in my UI

00:02:53,680 --> 00:02:59,190
application there's global state and

00:02:56,019 --> 00:03:02,049
local state let's look at each of them

00:02:59,190 --> 00:03:03,519
so global state as the name suggests is

00:03:02,049 --> 00:03:05,170
the state that exists throughout the

00:03:03,519 --> 00:03:07,750
application it's typically the

00:03:05,170 --> 00:03:09,640
application state this is the state that

00:03:07,750 --> 00:03:12,730
all the components need within their

00:03:09,640 --> 00:03:15,850
application to manage data here's an

00:03:12,730 --> 00:03:18,070
example of a UI so when a la user logs

00:03:15,850 --> 00:03:20,230
in the authorization is a perfect

00:03:18,070 --> 00:03:22,720
example of global state when a user logs

00:03:20,230 --> 00:03:24,790
in you want to change maybe the Welcome

00:03:22,720 --> 00:03:26,440
message you want to show a list of the

00:03:24,790 --> 00:03:28,780
users they have a list of friends they

00:03:26,440 --> 00:03:31,780
have so that is global state that state

00:03:28,780 --> 00:03:34,120
exists throughout the application on the

00:03:31,780 --> 00:03:37,030
other side there is local state and as

00:03:34,120 --> 00:03:40,269
the name suggests it is state that is

00:03:37,030 --> 00:03:43,239
only local to component logic a very

00:03:40,269 --> 00:03:44,889
good example of that is like forms so

00:03:43,239 --> 00:03:47,650
when you enter something maybe you want

00:03:44,889 --> 00:03:49,299
to show a help text and that logic you

00:03:47,650 --> 00:03:51,519
only want to keep in the form so that's

00:03:49,299 --> 00:03:55,750
only local to the form hence it is a

00:03:51,519 --> 00:03:58,959
local state now let's look at different

00:03:55,750 --> 00:04:00,489
ways of managing state so currently

00:03:58,959 --> 00:04:00,940
there's a bunch of ways we can manage

00:04:00,489 --> 00:04:03,520
state

00:04:00,940 --> 00:04:06,640
there's rack component state that comes

00:04:03,520 --> 00:04:09,580
natively context API Redux which is

00:04:06,640 --> 00:04:11,830
super popular mob ex mobic state tree

00:04:09,580 --> 00:04:15,010
hooks that is super new and Apollo

00:04:11,830 --> 00:04:19,299
client today we're going to dive in

00:04:15,010 --> 00:04:21,070
deeper into hooks so how many of you

00:04:19,299 --> 00:04:24,520
have used hooks are using hooks in

00:04:21,070 --> 00:04:27,400
production awesome that's great to see

00:04:24,520 --> 00:04:29,920
so hooks was actually proposed in

00:04:27,400 --> 00:04:32,620
October 2018 just a year ago and

00:04:29,920 --> 00:04:35,410
released four months later it is now

00:04:32,620 --> 00:04:36,910
stable in react sixteen point eight and

00:04:35,410 --> 00:04:39,970
most of you are already using it so

00:04:36,910 --> 00:04:43,330
that's great to know but what is hooks

00:04:39,970 --> 00:04:46,930
so according to dan hooks are actually a

00:04:43,330 --> 00:04:49,510
more direct explanation of react such as

00:04:46,930 --> 00:04:51,550
state lifecycle and context so it's a

00:04:49,510 --> 00:04:54,100
more intuitive way of thinking of react

00:04:51,550 --> 00:04:55,930
and we no longer have to think in terms

00:04:54,100 --> 00:04:58,090
of lifecycle methods like component and

00:04:55,930 --> 00:05:00,190
update component inbound we don't have

00:04:58,090 --> 00:05:01,870
to worry when react is rendering but now

00:05:00,190 --> 00:05:04,620
we can worry about the data and how the

00:05:01,870 --> 00:05:08,830
data flows within our application but

00:05:04,620 --> 00:05:11,310
why do we need hooks well the truth is

00:05:08,830 --> 00:05:13,960
that state management is a hard problem

00:05:11,310 --> 00:05:16,150
we often over complicate our state

00:05:13,960 --> 00:05:18,669
management solution there's tons of

00:05:16,150 --> 00:05:20,770
libraries out there we don't know if we

00:05:18,669 --> 00:05:22,480
should use Redux for our form component

00:05:20,770 --> 00:05:25,660
or we should build the entire thing in

00:05:22,480 --> 00:05:27,280
context API should we add mob X but I

00:05:25,660 --> 00:05:29,890
only have a farm do I need a form

00:05:27,280 --> 00:05:30,669
library my data needs to be offline what

00:05:29,890 --> 00:05:32,770
the do I do

00:05:30,669 --> 00:05:35,290
what is the serviceworker what the heck

00:05:32,770 --> 00:05:37,030
is a redux Agha honestly the first time

00:05:35,290 --> 00:05:39,340
I was learning this in my first year out

00:05:37,030 --> 00:05:44,590
of an out of college this is what I felt

00:05:39,340 --> 00:05:46,870
like so let's look at some solutions

00:05:44,590 --> 00:05:51,100
that I worked pretty well for example

00:05:46,870 --> 00:05:53,280
Redux reacts it's really good and it

00:05:51,100 --> 00:05:56,110
it's really popular because it has this

00:05:53,280 --> 00:05:58,510
magical connect function which once you

00:05:56,110 --> 00:05:59,530
use your data is available everywhere so

00:05:58,510 --> 00:06:01,390
you can share data across different

00:05:59,530 --> 00:06:03,580
parts of your application simply by

00:06:01,390 --> 00:06:06,340
using a connect function but the bad

00:06:03,580 --> 00:06:08,620
problem of this is that all of the state

00:06:06,340 --> 00:06:10,840
whether you're local and global is in

00:06:08,620 --> 00:06:12,580
the same store and what we started see

00:06:10,840 --> 00:06:14,369
noticing was that developers were often

00:06:12,580 --> 00:06:18,959
using Vedic store to even you

00:06:14,369 --> 00:06:23,219
for the local state now let's look at

00:06:18,959 --> 00:06:25,289
context provider so the good part about

00:06:23,219 --> 00:06:27,779
context provider is that it left state

00:06:25,289 --> 00:06:29,099
up to the very top component and that's

00:06:27,779 --> 00:06:34,949
why we don't have a problem of prop

00:06:29,099 --> 00:06:37,439
drilling but the bad part is that once a

00:06:34,949 --> 00:06:39,299
context provider updates all of the

00:06:37,439 --> 00:06:41,669
components that are using the value also

00:06:39,299 --> 00:06:43,439
rerender so if you have one context

00:06:41,669 --> 00:06:47,399
Florida at the top all of your children

00:06:43,439 --> 00:06:49,349
components will update now let's look at

00:06:47,399 --> 00:06:51,539
how hooks are saw hooks is solving some

00:06:49,349 --> 00:06:53,549
of that problem the first problem is of

00:06:51,539 --> 00:06:55,289
prop drilling hook so solving that by

00:06:53,549 --> 00:06:57,239
lifting state up so you can use you

00:06:55,289 --> 00:06:59,399
state and use context extract out your

00:06:57,239 --> 00:07:01,129
state and put it wherever you need so

00:06:59,399 --> 00:07:03,809
you don't need to pass in props anymore

00:07:01,129 --> 00:07:06,299
the second problem that comes with VDX

00:07:03,809 --> 00:07:08,610
especially is boilerplate with hooks

00:07:06,299 --> 00:07:10,529
it's super easy because you can just use

00:07:08,610 --> 00:07:12,449
state without having the class component

00:07:10,529 --> 00:07:13,709
now hooks is available out of function

00:07:12,449 --> 00:07:17,999
components you don't need to refactor

00:07:13,709 --> 00:07:19,019
anything and context reloads so with

00:07:17,999 --> 00:07:21,209
hooks you won't have this problem

00:07:19,019 --> 00:07:23,999
because you can keep your state closed

00:07:21,209 --> 00:07:25,739
and to have your list state more

00:07:23,999 --> 00:07:28,639
logically separated you can put it in

00:07:25,739 --> 00:07:31,799
the reactor e closer to where it matters

00:07:28,639 --> 00:07:33,929
now let's look at four hooks that we're

00:07:31,799 --> 00:07:35,699
going to use in our application so the

00:07:33,929 --> 00:07:38,999
four hooks that I found very helpful was

00:07:35,699 --> 00:07:43,139
use the fact use reducer use context and

00:07:38,999 --> 00:07:45,749
use stick now first let's look at new

00:07:43,139 --> 00:07:49,049
state so you status the hook that

00:07:45,749 --> 00:07:51,239
replaces this start state it is used for

00:07:49,049 --> 00:07:53,159
sharing data amongst components and it's

00:07:51,239 --> 00:07:56,759
the I I feel like it's the most simplest

00:07:53,159 --> 00:07:59,309
hook it is used to initialize state so

00:07:56,759 --> 00:08:01,229
an example here is let's say if you want

00:07:59,309 --> 00:08:05,459
to use count we can simply do count and

00:08:01,229 --> 00:08:07,199
set count initialize it by zero here's

00:08:05,459 --> 00:08:08,729
another example of how we can use it so

00:08:07,199 --> 00:08:10,139
if you want to update this account or

00:08:08,729 --> 00:08:11,909
we're going to update count we can just

00:08:10,139 --> 00:08:16,879
call the set count function it's just a

00:08:11,909 --> 00:08:21,139
simple function pair is an example of a

00:08:16,879 --> 00:08:21,139
to-do list that my fiance gives me

00:08:22,879 --> 00:08:29,039
so Newsted is simple it can either take

00:08:26,370 --> 00:08:31,050
a constant function a constant variable

00:08:29,039 --> 00:08:33,510
or it can even take objects so here we

00:08:31,050 --> 00:08:38,519
have fasten objects and if you want to

00:08:33,510 --> 00:08:40,620
update this list of to do list we can

00:08:38,519 --> 00:08:43,589
simply call set things he says and I

00:08:40,620 --> 00:08:45,660
picked it to another object one thing I

00:08:43,589 --> 00:08:47,430
rather like really cool one thing I find

00:08:45,660 --> 00:08:49,230
really cool about hooks is that you can

00:08:47,430 --> 00:08:51,570
use multiple hooks together so I can

00:08:49,230 --> 00:08:54,899
just create our today snag list and use

00:08:51,570 --> 00:08:57,060
the counter and the to-do list to return

00:08:54,899 --> 00:09:00,870
things he says and count so I've made a

00:08:57,060 --> 00:09:03,630
custom look here now let's look at react

00:09:00,870 --> 00:09:05,490
hooks News effect so use effect is the

00:09:03,630 --> 00:09:07,860
hook that is used to update Dom it's

00:09:05,490 --> 00:09:10,110
used to do any side effect or effect for

00:09:07,860 --> 00:09:12,180
code and it's simpler to convert and did

00:09:10,110 --> 00:09:14,970
mount and it can also do the cleanup

00:09:12,180 --> 00:09:17,220
function for component and unmount so

00:09:14,970 --> 00:09:19,170
it's a very handy function so here's an

00:09:17,220 --> 00:09:21,269
example let's say we want to update the

00:09:19,170 --> 00:09:23,850
title of document we can use the use

00:09:21,269 --> 00:09:25,860
effect hook and we'll put our effect

00:09:23,850 --> 00:09:28,279
full code within user fat so we'll use

00:09:25,860 --> 00:09:31,560
document title and update the code

00:09:28,279 --> 00:09:34,019
here's another way we can subscribe use

00:09:31,560 --> 00:09:36,029
subscriptions for the news effect so we

00:09:34,019 --> 00:09:37,860
can simply call our subscribe to friend

00:09:36,029 --> 00:09:40,199
status function within use effects and

00:09:37,860 --> 00:09:42,029
if you want to unsubscribe or do the

00:09:40,199 --> 00:09:45,600
cleanup we can do that in the return

00:09:42,029 --> 00:09:47,100
function so this way we're doing the

00:09:45,600 --> 00:09:50,430
functions of both component dead man and

00:09:47,100 --> 00:09:52,649
component it will unmount we looked at

00:09:50,430 --> 00:09:56,279
use effect and you stay now let's look

00:09:52,649 --> 00:09:58,380
at use context and we use reducer so if

00:09:56,279 --> 00:10:00,149
you're familiar with the context API the

00:09:58,380 --> 00:10:02,190
provider method in the consumer method

00:10:00,149 --> 00:10:06,000
use context will seem very simple

00:10:02,190 --> 00:10:08,070
failure so when use context we can

00:10:06,000 --> 00:10:11,730
simply do a use context or initial value

00:10:08,070 --> 00:10:13,890
of context and consume the value one

00:10:11,730 --> 00:10:16,140
caveat though is that use context can

00:10:13,890 --> 00:10:17,670
only be used to read context but to

00:10:16,140 --> 00:10:21,120
provide a context you still need the

00:10:17,670 --> 00:10:22,769
provider method the next is use reducer

00:10:21,120 --> 00:10:24,899
if you're familiar with Redux use

00:10:22,769 --> 00:10:26,970
reducer is very similar it provides it

00:10:24,899 --> 00:10:29,100
passes back a dispatch function and

00:10:26,970 --> 00:10:32,819
provides back a state variable in

00:10:29,100 --> 00:10:34,680
addition to the dispatch function so the

00:10:32,819 --> 00:10:35,279
four hooks that we looked at were use

00:10:34,680 --> 00:10:37,579
effect

00:10:35,279 --> 00:10:40,139
use reducer use conducts and you stick

00:10:37,579 --> 00:10:43,170
now we're going to build a real ish app

00:10:40,139 --> 00:10:46,610
I have put the links here if you want to

00:10:43,170 --> 00:10:46,610
open it up I'll give you a minute

00:11:23,730 --> 00:11:29,160
okay so if you open the link this is the

00:11:26,129 --> 00:11:31,649
code sandbox example of this so it's a

00:11:29,160 --> 00:11:34,049
very typical UI there is a form at the

00:11:31,649 --> 00:11:36,419
top here named artist lyrics what it

00:11:34,049 --> 00:11:39,029
does is it renders a list of songs that

00:11:36,419 --> 00:11:43,139
I like on the page so it's kind of like

00:11:39,029 --> 00:11:45,359
my personal music player or music list

00:11:43,139 --> 00:11:46,919
so I have a bunch of songs here so the

00:11:45,359 --> 00:11:49,619
first thing that this app does when you

00:11:46,919 --> 00:11:52,679
load the page is query the graph QL API

00:11:49,619 --> 00:11:54,509
and fetch for this list of songs once

00:11:52,679 --> 00:11:57,209
it's fetch the list of songs it'll start

00:11:54,509 --> 00:11:58,919
displaying it here and this form

00:11:57,209 --> 00:12:01,589
function this form is actually a

00:11:58,919 --> 00:12:03,569
mutation so if we add a song here I can

00:12:01,589 --> 00:12:13,220
put it in the graph QAPI so I'm going to

00:12:03,569 --> 00:12:13,220
add a song here and give me a beat

00:12:19,750 --> 00:12:22,650
let's try that again

00:12:32,750 --> 00:12:36,130
I don't think that's working

00:12:42,090 --> 00:12:44,900
endless

00:13:06,910 --> 00:13:13,760
that's my rap song okay so I added the

00:13:11,720 --> 00:13:16,280
song I should come up here if song is

00:13:13,760 --> 00:13:18,500
here so that's the mutation component

00:13:16,280 --> 00:13:20,840
now let's what this couple this

00:13:18,500 --> 00:13:22,220
application is built using hooks so I'm

00:13:20,840 --> 00:13:27,920
going to walk through how to build this

00:13:22,220 --> 00:13:34,900
application using hooks so I have the

00:13:27,920 --> 00:13:34,900
recipe right here this is big enough

00:13:43,750 --> 00:13:47,949
all right so the first thing we're gonna

00:13:45,430 --> 00:13:52,180
do is initialize our state so we're

00:13:47,949 --> 00:13:54,759
gonna go to home Dargis and start with

00:13:52,180 --> 00:13:56,560
our sorry after GS and start with an

00:13:54,759 --> 00:13:59,139
initial state I'm going to use the use

00:13:56,560 --> 00:14:01,600
context to use context hook to provide

00:13:59,139 --> 00:14:04,300
it a basic context and initialize my

00:14:01,600 --> 00:14:06,730
state the next thing is I'm gonna call

00:14:04,300 --> 00:14:09,069
use reducer with the initial state so

00:14:06,730 --> 00:14:11,290
I'm gonna call use reducer with the

00:14:09,069 --> 00:14:13,170
state that I passed in here and it gives

00:14:11,290 --> 00:14:15,279
me back a state and a dispatch function

00:14:13,170 --> 00:14:16,990
the next thing I'm gonna do is figure

00:14:15,279 --> 00:14:19,420
out which top level components should

00:14:16,990 --> 00:14:21,189
have contexts and set up contexts so

00:14:19,420 --> 00:14:22,959
here I'm going to say let's I'm gonna

00:14:21,189 --> 00:14:24,579
say my home component would have my

00:14:22,959 --> 00:14:26,319
context so I'm going to provide my

00:14:24,579 --> 00:14:28,180
context right here and then I'm gonna

00:14:26,319 --> 00:14:29,920
pass the state and dispatch that I got

00:14:28,180 --> 00:14:32,889
from youth reducer into this context

00:14:29,920 --> 00:14:35,110
provider so here is a example where you

00:14:32,889 --> 00:14:36,639
can actually have multiple components

00:14:35,110 --> 00:14:38,410
and multiple context providers so I

00:14:36,639 --> 00:14:42,610
could have something like let's say I

00:14:38,410 --> 00:14:44,379
want add song to have a different

00:14:42,610 --> 00:14:45,639
context or let's say if I have a login

00:14:44,379 --> 00:14:47,500
component I have want to give a

00:14:45,639 --> 00:14:49,360
different context to it I can totally do

00:14:47,500 --> 00:14:51,129
that and then this home would not have

00:14:49,360 --> 00:14:52,809
the same kinetic sisters so this way I

00:14:51,129 --> 00:14:56,769
can separate my context so that whenever

00:14:52,809 --> 00:14:59,949
context reloads home doesn't reload I'll

00:14:56,769 --> 00:15:01,420
get rid of this for now okay so I've

00:14:59,949 --> 00:15:03,040
passed in my state and dispatch the

00:15:01,420 --> 00:15:04,930
context and now my home will have access

00:15:03,040 --> 00:15:06,279
to this context the next thing what I

00:15:04,930 --> 00:15:07,930
want to do is pass in the dispatch

00:15:06,279 --> 00:15:09,670
return from use reducer to the context

00:15:07,930 --> 00:15:11,819
provider so that children have access to

00:15:09,670 --> 00:15:14,170
dispatch I did that right here

00:15:11,819 --> 00:15:16,360
then hook a graph cable API to a

00:15:14,170 --> 00:15:19,829
component using use effect so I'm gonna

00:15:16,360 --> 00:15:22,240
say that my home function right here

00:15:19,829 --> 00:15:24,699
would have access to their graph QL

00:15:22,240 --> 00:15:26,559
query so this is my query I'm asking for

00:15:24,699 --> 00:15:30,189
artist name and lyrics which is the one

00:15:26,559 --> 00:15:32,170
that we see on the form and here I'm

00:15:30,189 --> 00:15:34,959
gonna use the use effect hook to

00:15:32,170 --> 00:15:37,000
dispatch an add content with the payload

00:15:34,959 --> 00:15:39,160
of songs so what happens is the first

00:15:37,000 --> 00:15:41,559
time you load the page the query is

00:15:39,160 --> 00:15:43,839
called and the use effect is fired up

00:15:41,559 --> 00:15:47,439
after the UI is rendered and it will

00:15:43,839 --> 00:15:52,750
dispatch an ADD content reducer to let

00:15:47,439 --> 00:15:54,279
the UI know that songs have updated then

00:15:52,750 --> 00:15:56,170
we're going to use use context and use

00:15:54,279 --> 00:15:57,000
reducer to receive an update global

00:15:56,170 --> 00:15:59,370
applications

00:15:57,000 --> 00:16:01,379
so what I'm gonna do is anytime I need

00:15:59,370 --> 00:16:04,319
to update this state I will use use

00:16:01,379 --> 00:16:06,360
effect or use a use use context is use

00:16:04,319 --> 00:16:09,930
or use your do sir so if I go to add

00:16:06,360 --> 00:16:10,800
song here I have this name artist and

00:16:09,930 --> 00:16:12,569
lyrics fields

00:16:10,800 --> 00:16:14,279
right here in my form so this is where

00:16:12,569 --> 00:16:17,160
all the computation magic happens

00:16:14,279 --> 00:16:20,100
so I have this field name artist and

00:16:17,160 --> 00:16:24,839
lyrics so once I fired the submit button

00:16:20,100 --> 00:16:26,699
it calls this ad song mutation with

00:16:24,839 --> 00:16:29,339
these variables named artists and lyrics

00:16:26,699 --> 00:16:31,620
and once I fired that I want to update

00:16:29,339 --> 00:16:34,230
my local state for which I will use the

00:16:31,620 --> 00:16:37,350
new state hook which is set name settler

00:16:34,230 --> 00:16:43,139
X and artists and initialize it back to

00:16:37,350 --> 00:16:44,730
blank and then the last thing is if you

00:16:43,139 --> 00:16:48,889
want to use local state just use you

00:16:44,730 --> 00:16:54,480
stick so that's using react hooks now

00:16:48,889 --> 00:16:56,670
I'm still using Apollo's mutation or a

00:16:54,480 --> 00:16:59,459
component here so what I want to do next

00:16:56,670 --> 00:17:02,819
is update this mutation component to the

00:16:59,459 --> 00:17:04,260
react hooks so for that by the way if

00:17:02,819 --> 00:17:07,140
you want to follow along I have this

00:17:04,260 --> 00:17:09,600
example on my github graph kill some in

00:17:07,140 --> 00:17:14,780
2019 and you can go to the branch custom

00:17:09,600 --> 00:17:14,780
hooks or Apollo hooks to follow along so

00:17:18,270 --> 00:17:22,140
so now I have this mutation component

00:17:20,400 --> 00:17:30,960
right here but I want to update it to

00:17:22,140 --> 00:17:34,350
hooks so what I'll do is so I'm gonna

00:17:30,960 --> 00:17:36,870
first I'm gonna first bring in News

00:17:34,350 --> 00:17:40,250
mutation from Apollo react tox right

00:17:36,870 --> 00:17:43,320
here and then I'm gonna use add song

00:17:40,250 --> 00:17:46,230
mutation which I have already in my

00:17:43,320 --> 00:17:48,150
mutation list and then everything

00:17:46,230 --> 00:17:50,100
remains the same I don't need to change

00:17:48,150 --> 00:17:52,110
anything the only difference here is

00:17:50,100 --> 00:17:57,620
that initially it was a rendered prop

00:17:52,110 --> 00:18:00,540
method but now it's a much cleaner hook

00:17:57,620 --> 00:18:03,059
so that's used mutation now if I want to

00:18:00,540 --> 00:18:05,640
update use query as well what I can do

00:18:03,059 --> 00:18:08,580
is I can remove it from here I used to

00:18:05,640 --> 00:18:10,280
have it right here I have this query

00:18:08,580 --> 00:18:14,280
function here now I can remove that

00:18:10,280 --> 00:18:15,000
remove the query from here and use the

00:18:14,280 --> 00:18:17,490
hook here

00:18:15,000 --> 00:18:20,040
so again imported from react ox use

00:18:17,490 --> 00:18:21,809
query here pass in the song and then the

00:18:20,040 --> 00:18:24,000
use query will give you data loading in

00:18:21,809 --> 00:18:25,920
error and you can use data simply the

00:18:24,000 --> 00:18:30,360
same way you were using before no change

00:18:25,920 --> 00:18:32,790
there okay now let's say we want to add

00:18:30,360 --> 00:18:36,990
another functionality here let's say we

00:18:32,790 --> 00:18:39,420
want that once we add an artist we also

00:18:36,990 --> 00:18:42,179
want to show related songs so for that

00:18:39,420 --> 00:18:43,920
we can make a custom react hook so let's

00:18:42,179 --> 00:18:47,970
see how to do that so I'm gonna go to my

00:18:43,920 --> 00:18:50,910
song item component these are all song

00:18:47,970 --> 00:18:53,760
items so here I have this component and

00:18:50,910 --> 00:18:56,070
I'm gonna make a new query new custom

00:18:53,760 --> 00:18:58,290
hook news related songs so let's look at

00:18:56,070 --> 00:19:00,179
use related songs so for use related

00:18:58,290 --> 00:19:03,300
songs I'm doing another query and get

00:19:00,179 --> 00:19:05,070
related songs from my new client by the

00:19:03,300 --> 00:19:07,679
way here's how you can have two or more

00:19:05,070 --> 00:19:10,890
clients in your API in your application

00:19:07,679 --> 00:19:13,050
if you have if you have a graphical API

00:19:10,890 --> 00:19:14,220
that you want to use which is different

00:19:13,050 --> 00:19:16,470
than the graph kelipah you're already

00:19:14,220 --> 00:19:20,429
using you can use another custom client

00:19:16,470 --> 00:19:24,390
pass in the new URL for the graph QL

00:19:20,429 --> 00:19:26,370
endpoint and pasen pasen into your use

00:19:24,390 --> 00:19:28,559
query because it accepts a client as an

00:19:26,370 --> 00:19:30,540
optional variable so this way you can

00:19:28,559 --> 00:19:33,190
have more than two graphical APs

00:19:30,540 --> 00:19:35,470
all right so we have this new custom

00:19:33,190 --> 00:19:36,970
hockey I used related songs and then

00:19:35,470 --> 00:19:39,280
we're gonna make a query get related

00:19:36,970 --> 00:19:44,710
songs and pass in the name of the artist

00:19:39,280 --> 00:19:46,210
here and get ID name album and euro so

00:19:44,710 --> 00:19:48,640
once we have used reordered songs here

00:19:46,210 --> 00:19:51,130
once we get the data back I'm going to

00:19:48,640 --> 00:19:53,170
just return the data and export default

00:19:51,130 --> 00:19:55,270
my user related songs this is how I have

00:19:53,170 --> 00:19:57,250
a custom hook now I just have to use

00:19:55,270 --> 00:19:59,530
this hook so I'll go back to song item

00:19:57,250 --> 00:20:02,290
and I have use related hooks right here

00:19:59,530 --> 00:20:04,330
I'm getting the data back now once I

00:20:02,290 --> 00:20:06,460
have the data all I have to do is just

00:20:04,330 --> 00:20:09,640
loop through it so I'm going to make

00:20:06,460 --> 00:20:11,140
another component more songs and this

00:20:09,640 --> 00:20:13,570
component basically just loops through

00:20:11,140 --> 00:20:17,020
the data so now what I do is if I have

00:20:13,570 --> 00:20:19,570
let's say Shawn Mendes let's say I want

00:20:17,020 --> 00:20:21,490
us and see more songs where Shawn Mendes

00:20:19,570 --> 00:20:25,990
I just click on this button and I got

00:20:21,490 --> 00:20:28,060
these other songs so that's how we can

00:20:25,990 --> 00:20:30,730
use custom hooks and Apollo's react

00:20:28,060 --> 00:20:39,640
hooks to make a application with state

00:20:30,730 --> 00:20:41,470
management ok so to briefly recap we

00:20:39,640 --> 00:20:44,890
used a used query and use mutation hook

00:20:41,470 --> 00:20:48,010
we changed the mutation render prop to a

00:20:44,890 --> 00:20:49,540
hook use mutation and similarly with the

00:20:48,010 --> 00:20:54,850
query we change the graph Cuba query

00:20:49,540 --> 00:20:58,830
into a use query hook so I have all the

00:20:54,850 --> 00:21:03,250
slides on github on my on my github

00:20:58,830 --> 00:21:05,500
graphical semi 2019 and that's all I

00:21:03,250 --> 00:21:08,170
have for you today but if you want to

00:21:05,500 --> 00:21:10,690
work on graph QL react and gatsby paypal

00:21:08,170 --> 00:21:13,000
is hiring and we have made a new blog

00:21:10,690 --> 00:21:17,410
post on how to use paper and how we're

00:21:13,000 --> 00:21:18,970
using graph QL at paper at paper so if

00:21:17,410 --> 00:21:21,940
you want to check it out please go do

00:21:18,970 --> 00:21:24,240
that I want to leave with the last day

00:21:21,940 --> 00:21:24,240
of joke

00:21:39,450 --> 00:21:46,520
thank you very much

00:21:42,110 --> 00:21:46,520

YouTube URL: https://www.youtube.com/watch?v=Y3jXNMhAy0U


