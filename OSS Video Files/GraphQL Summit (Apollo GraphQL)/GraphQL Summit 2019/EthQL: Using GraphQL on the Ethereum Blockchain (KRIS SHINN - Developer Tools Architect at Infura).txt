Title: EthQL: Using GraphQL on the Ethereum Blockchain (KRIS SHINN - Developer Tools Architect at Infura)
Publication date: 2019-11-02
Playlist: GraphQL Summit 2019
Description: 
	EthQL is a project aimed at improving and standardizing a GraphQL schema for the Ethereum blockchain. GraphQL brings developers a more efficient and expressive interface to interact with blockchain data.
Captions: 
	00:00:02,330 --> 00:00:08,340
all right thank you good morning

00:00:05,330 --> 00:00:13,879
so I've been invited here to speak to

00:00:08,340 --> 00:00:13,879
you about how we and fira are trying to

00:00:14,419 --> 00:00:18,840
transform how we interact with the

00:00:16,560 --> 00:00:21,390
ethereum blockchain using graph QL and

00:00:18,840 --> 00:00:23,699
this talk we're gonna look primarily at

00:00:21,390 --> 00:00:25,619
three different things we're gonna look

00:00:23,699 --> 00:00:28,769
at though what the why in the hell

00:00:25,619 --> 00:00:31,769
so just to level set the room I'm gonna

00:00:28,769 --> 00:00:33,600
look at we're gonna cover what is web 3

00:00:31,769 --> 00:00:36,600
and what is the theorem from a very high

00:00:33,600 --> 00:00:39,690
level we're gonna look at why we want to

00:00:36,600 --> 00:00:42,780
move front from what is currently used

00:00:39,690 --> 00:00:45,960
in a theorem toward graph QL excuse me

00:00:42,780 --> 00:00:47,760
and and lastly we're gonna cover if

00:00:45,960 --> 00:00:49,920
you're inspired by this talk if you want

00:00:47,760 --> 00:00:51,960
to play around with etherium how you can

00:00:49,920 --> 00:00:54,300
get started and some resources that that

00:00:51,960 --> 00:01:00,530
you can use to begin your journey in in

00:00:54,300 --> 00:01:02,940
aetherium so what is web 3 and etherium

00:01:00,530 --> 00:01:04,410
so as engineers we all know how that web

00:01:02,940 --> 00:01:07,979
works right like client-server

00:01:04,410 --> 00:01:10,500
architectures api's mobile and web

00:01:07,979 --> 00:01:12,509
front-end stacks you know our modern

00:01:10,500 --> 00:01:14,580
applications and billion-dollar

00:01:12,509 --> 00:01:16,619
industries have been built on a protocol

00:01:14,580 --> 00:01:19,920
that's nearly 30 years old at this point

00:01:16,619 --> 00:01:22,710
right we all suffer from well known

00:01:19,920 --> 00:01:25,590
security issues things like men in the

00:01:22,710 --> 00:01:27,329
middle attacks das identity spoofing

00:01:25,590 --> 00:01:30,840
cross-site scripting just to name a few

00:01:27,329 --> 00:01:33,509
and as we started to integrate other

00:01:30,840 --> 00:01:35,490
services into our api is like say with

00:01:33,509 --> 00:01:37,829
things from Google or Amazon we're

00:01:35,490 --> 00:01:39,990
trusting our data to an ever increasing

00:01:37,829 --> 00:01:42,960
number of tech giants ever sorry ever

00:01:39,990 --> 00:01:44,549
decreasing number of tech giant's we're

00:01:42,960 --> 00:01:47,189
at the pinnacle of what what we would

00:01:44,549 --> 00:01:50,040
call web 2.0 a system that for better or

00:01:47,189 --> 00:01:51,899
worse is built on trust trust that our

00:01:50,040 --> 00:01:54,240
apps are talking to the right a Thorat

00:01:51,899 --> 00:01:56,460
ease trust that our data is secure and

00:01:54,240 --> 00:02:00,329
private and trust that nothing along the

00:01:56,460 --> 00:02:02,729
way has been changed or altered so

00:02:00,329 --> 00:02:06,360
that's where web story comes in the web

00:02:02,729 --> 00:02:08,280
3 is a truly decentralized web it's

00:02:06,360 --> 00:02:10,580
built with security at the center so

00:02:08,280 --> 00:02:13,260
it's built around verification not trust

00:02:10,580 --> 00:02:14,250
it's built to be on a peer-to-peer

00:02:13,260 --> 00:02:16,920
network not

00:02:14,250 --> 00:02:19,860
centralized infrastructure it's built to

00:02:16,920 --> 00:02:23,550
be resistant to downtime to fraud to das

00:02:19,860 --> 00:02:27,060
and third party interference web 3 is a

00:02:23,550 --> 00:02:31,530
new decentralized web for the next

00:02:27,060 --> 00:02:32,520
generation of networked applications so

00:02:31,530 --> 00:02:35,490
here's an example of what I'm talking

00:02:32,520 --> 00:02:38,910
about there's a technology called IP FS

00:02:35,490 --> 00:02:42,390
or interplanetary file system now what

00:02:38,910 --> 00:02:44,880
had happened in April of 2017 Turkey

00:02:42,390 --> 00:02:46,320
took down Wikipedia because there was

00:02:44,880 --> 00:02:48,209
some articles linking the Turkish

00:02:46,320 --> 00:02:52,170
government to terrorist organizations

00:02:48,209 --> 00:02:55,170
like Isis so like as you can see from

00:02:52,170 --> 00:02:57,360
this tweet all of the DNS were confirmed

00:02:55,170 --> 00:02:59,400
down in Turkey so what had happen is

00:02:57,360 --> 00:03:01,080
that some activists on the ipfs team

00:02:59,400 --> 00:03:03,959
took all of the Turkish translations of

00:03:01,080 --> 00:03:06,930
Wikipedia and re uploaded them to ipfs

00:03:03,959 --> 00:03:09,420
and basically brought Wikipedia back up

00:03:06,930 --> 00:03:13,020
for the Turkish people now the goal

00:03:09,420 --> 00:03:15,110
around this was to improve humanity's

00:03:13,020 --> 00:03:18,540
access to information free of censorship

00:03:15,110 --> 00:03:21,450
because in our planet for interplanetary

00:03:18,540 --> 00:03:24,000
file system is a peer-to-peer network it

00:03:21,450 --> 00:03:25,739
can't be taken down even if you were to

00:03:24,000 --> 00:03:27,870
target one gateway to take it down you

00:03:25,739 --> 00:03:31,110
can always stand up another one or find

00:03:27,870 --> 00:03:34,290
another one on the network and this is a

00:03:31,110 --> 00:03:37,370
real success story and truly embodies

00:03:34,290 --> 00:03:40,350
some of the core principles of of web 3

00:03:37,370 --> 00:03:42,799
principles of truly decentralized work

00:03:40,350 --> 00:03:45,360
in storage cryptographic

00:03:42,799 --> 00:03:47,670
cryptographically secure and verifiable

00:03:45,360 --> 00:03:52,079
and the ability to access and contribute

00:03:47,670 --> 00:03:54,090
directly to these networks so now that

00:03:52,079 --> 00:03:55,650
I've covered a little bit of web 3's let

00:03:54,090 --> 00:03:58,620
me take a step back and introduce in

00:03:55,650 --> 00:04:01,680
cearÃ¡ so in fira is a web 3

00:03:58,620 --> 00:04:03,299
infrastructure company we provide the

00:04:01,680 --> 00:04:07,200
best tools and infrastructure for

00:04:03,299 --> 00:04:12,090
developers to on-ramp into into the web

00:04:07,200 --> 00:04:16,440
3 ecosystem excuse me founded founded in

00:04:12,090 --> 00:04:19,019
2016 theorem had already made a big name

00:04:16,440 --> 00:04:22,620
for itself it had a good reputation in

00:04:19,019 --> 00:04:25,200
the in the ecosystem and had a really

00:04:22,620 --> 00:04:27,510
thriving developer community so in furor

00:04:25,200 --> 00:04:30,300
decided to start there from

00:04:27,510 --> 00:04:34,350
there we also stood up ipfs on ramps and

00:04:30,300 --> 00:04:36,450
today we help power developers like you

00:04:34,350 --> 00:04:38,130
to help build decentralized web

00:04:36,450 --> 00:04:39,480
applications without having to stand up

00:04:38,130 --> 00:04:46,860
your own infrastructure and maintain

00:04:39,480 --> 00:04:49,500
your own nodes alright so i've generally

00:04:46,860 --> 00:04:52,620
talked about it about web 3 and about

00:04:49,500 --> 00:04:56,910
what we do at in fira so what is a

00:04:52,620 --> 00:04:58,110
theory him exactly so i'm sure that a

00:04:56,910 --> 00:05:00,540
lot of you have heard of blockchain

00:04:58,110 --> 00:05:03,350
probably all of you a lot of you have

00:05:00,540 --> 00:05:07,410
probably heard of bitcoin litecoin

00:05:03,350 --> 00:05:08,730
aetherium cryptocurrencies if their aim

00:05:07,410 --> 00:05:10,560
has been called a number of things it's

00:05:08,730 --> 00:05:12,840
been called a cryptocurrency it's been

00:05:10,560 --> 00:05:15,480
called a world computer it's been called

00:05:12,840 --> 00:05:19,290
an open programmable blockchain quite

00:05:15,480 --> 00:05:21,240
simply aetherium is a peer-to-peer open

00:05:19,290 --> 00:05:23,820
platform that allows developers to build

00:05:21,240 --> 00:05:25,320
applications on top of it it's made up

00:05:23,820 --> 00:05:26,670
of thousands of nodes across the world

00:05:25,320 --> 00:05:30,270
participating in this peer-to-peer

00:05:26,670 --> 00:05:31,410
network and it allows developers to

00:05:30,270 --> 00:05:32,940
write little programs that you can

00:05:31,410 --> 00:05:35,430
deploy onto the blockchain these are

00:05:32,940 --> 00:05:37,740
called smart contracts and these smart

00:05:35,430 --> 00:05:39,750
contracts can interact with data on the

00:05:37,740 --> 00:05:41,730
blockchain execute bits of logic

00:05:39,750 --> 00:05:46,350
basically anything that you would write

00:05:41,730 --> 00:05:49,320
in in regular code in the original

00:05:46,350 --> 00:05:51,840
technical paper aetherium has been

00:05:49,320 --> 00:05:55,200
called a decentralized transactional

00:05:51,840 --> 00:05:58,350
singleton machine with shared state now

00:05:55,200 --> 00:05:59,910
that is quite a mouthful of words but

00:05:58,350 --> 00:06:01,110
there's there's a lot to unpack here so

00:05:59,910 --> 00:06:04,440
I want to pack a little bit of it with

00:06:01,110 --> 00:06:06,810
you here so transactional everything in

00:06:04,440 --> 00:06:09,630
in aetherium is based on a transaction

00:06:06,810 --> 00:06:12,360
right it's the main action of of the

00:06:09,630 --> 00:06:14,130
ecosystem data is written to the

00:06:12,360 --> 00:06:16,230
blockchain in transactions you can send

00:06:14,130 --> 00:06:17,250
value through transactions the important

00:06:16,230 --> 00:06:18,840
thing to note here is that they're

00:06:17,250 --> 00:06:20,400
immutable once a transaction has been

00:06:18,840 --> 00:06:25,050
written to the blockchain there's no

00:06:20,400 --> 00:06:27,900
changing it right to singleton there's

00:06:25,050 --> 00:06:29,910
one valid blockchain agreed to by all

00:06:27,900 --> 00:06:33,000
nodes in the system so the nodes in the

00:06:29,910 --> 00:06:34,710
system are called miners and these

00:06:33,000 --> 00:06:37,380
miners do little mathematical puzzles on

00:06:34,710 --> 00:06:38,970
the transactions once it's been once

00:06:37,380 --> 00:06:41,190
that puzzle has been solved and added to

00:06:38,970 --> 00:06:43,230
the blockchain every other miner

00:06:41,190 --> 00:06:46,940
can verify its correctness before it's

00:06:43,230 --> 00:06:49,770
really solidified into the blockchain so

00:06:46,940 --> 00:06:52,560
this is how we keep the blockchain

00:06:49,770 --> 00:06:54,630
secure and this is how we reach a

00:06:52,560 --> 00:06:56,220
singular conclusion as to what the state

00:06:54,630 --> 00:06:57,330
is now if you think about that for a

00:06:56,220 --> 00:07:00,810
moment there's something really powerful

00:06:57,330 --> 00:07:02,090
there if you write a smart contract and

00:07:00,810 --> 00:07:04,410
then you deploy it to the blockchain

00:07:02,090 --> 00:07:06,960
when you call a method on that smart

00:07:04,410 --> 00:07:08,580
contract it's executing simultaneously

00:07:06,960 --> 00:07:10,920
on thousands of computers around the

00:07:08,580 --> 00:07:13,380
world in the exact same way all designed

00:07:10,920 --> 00:07:14,580
to reach the exact same conclusion and I

00:07:13,380 --> 00:07:17,820
think there's something just really

00:07:14,580 --> 00:07:20,820
powerful about that paradigm and writing

00:07:17,820 --> 00:07:23,370
programs in that manner and finally

00:07:20,820 --> 00:07:24,570
there's the machine with shared state so

00:07:23,370 --> 00:07:26,700
the theory and blockchain is basically

00:07:24,570 --> 00:07:29,430
one huge database that's validated all

00:07:26,700 --> 00:07:31,020
the way back to the Genesis block or the

00:07:29,430 --> 00:07:33,090
very first block ever put on the

00:07:31,020 --> 00:07:36,360
blockchain it's turning complete and

00:07:33,090 --> 00:07:41,940
fully programmable so it is in a sense

00:07:36,360 --> 00:07:44,940
that world computer so over the past

00:07:41,940 --> 00:07:47,220
couple of years there's been a lot of

00:07:44,940 --> 00:07:50,540
spaces that have tried to implement

00:07:47,220 --> 00:07:53,970
various applications on the blockchain

00:07:50,540 --> 00:07:56,310
you can create your own token right so

00:07:53,970 --> 00:07:57,450
if you don't like a theorem or a Bitcoin

00:07:56,310 --> 00:07:59,910
or whatever you can create your own

00:07:57,450 --> 00:08:02,220
token create a utility token that was

00:07:59,910 --> 00:08:05,580
really popular back in these like late

00:08:02,220 --> 00:08:08,310
2016 late 2017 if anybody heard about

00:08:05,580 --> 00:08:11,700
the ICO craze you know that was what

00:08:08,310 --> 00:08:14,690
that was about but everything else from

00:08:11,700 --> 00:08:18,300
identity and self sovereign data gaming

00:08:14,690 --> 00:08:20,460
improved in Enterprise efficiency all of

00:08:18,300 --> 00:08:23,100
these things have had their have had

00:08:20,460 --> 00:08:27,390
programs and applications written on the

00:08:23,100 --> 00:08:29,130
ethereum blockchain so now that we've

00:08:27,390 --> 00:08:31,860
covered a little bit of what graph qlae

00:08:29,130 --> 00:08:33,300
that's our what aetherium is let's move

00:08:31,860 --> 00:08:36,089
into the second part why are we trying

00:08:33,300 --> 00:08:38,490
to move to graph QL so I described this

00:08:36,089 --> 00:08:39,839
network right it's a network of nodes

00:08:38,490 --> 00:08:41,760
that are participating this peer-to-peer

00:08:39,839 --> 00:08:43,440
the way that I think of it is there's

00:08:41,760 --> 00:08:45,120
really two stacks right there's the

00:08:43,440 --> 00:08:46,260
bottom stack of the at the bottom

00:08:45,120 --> 00:08:48,360
network stack that's the peer-to-peer

00:08:46,260 --> 00:08:50,640
stack and it does everything on the

00:08:48,360 --> 00:08:53,560
peer-to-peer side from no discovery to

00:08:50,640 --> 00:08:55,660
the consensus algorithms

00:08:53,560 --> 00:08:58,300
you sinking the blockchain making sure

00:08:55,660 --> 00:08:59,680
all of the data is up up to state and

00:08:58,300 --> 00:09:02,590
then there's the second part which is

00:08:59,680 --> 00:09:05,200
the operational layer right external

00:09:02,590 --> 00:09:07,210
applications can use this layer of the

00:09:05,200 --> 00:09:09,910
network to interact with a blockchain to

00:09:07,210 --> 00:09:12,760
query for data to send transactions and

00:09:09,910 --> 00:09:14,800
to perform administrative tasks on on

00:09:12,760 --> 00:09:20,560
these nodes and this is where we chose

00:09:14,800 --> 00:09:23,680
to implement graph QL so I can't really

00:09:20,560 --> 00:09:25,300
talk about why we're going to graph QL

00:09:23,680 --> 00:09:29,920
until I talk about what we're coming

00:09:25,300 --> 00:09:32,500
from which is JSON RPC so JSON RPC is

00:09:29,920 --> 00:09:34,960
not etherion specific it's a lightweight

00:09:32,500 --> 00:09:37,300
specification built around the the r

00:09:34,960 --> 00:09:40,390
piece and like an RPC protocol right if

00:09:37,300 --> 00:09:42,310
anybody's ever worked with XML RPC it's

00:09:40,390 --> 00:09:45,750
very similar but just using JSON so it's

00:09:42,310 --> 00:09:48,880
not you know bracket hell it's

00:09:45,750 --> 00:09:51,070
lightweight it's transport agnostic so

00:09:48,880 --> 00:09:56,800
you can implement it over IPC WebSockets

00:09:51,070 --> 00:09:59,230
HTTP there as you can see it's very RPC

00:09:56,800 --> 00:10:01,120
like you have a method call you have a

00:09:59,230 --> 00:10:05,080
ray of parameters that you send without

00:10:01,120 --> 00:10:06,700
that method and this primary uses for

00:10:05,080 --> 00:10:10,260
node interaction not necessarily

00:10:06,700 --> 00:10:10,260
querying according a data set

00:10:10,810 --> 00:10:15,160
JP C JSON RPC suffers from a number of

00:10:13,690 --> 00:10:17,620
problems we're all probably familiar

00:10:15,160 --> 00:10:20,440
with and why we're at this conference

00:10:17,620 --> 00:10:23,440
right the over fetching and under

00:10:20,440 --> 00:10:27,490
fetching problem the the fact that it

00:10:23,440 --> 00:10:30,220
lacks a specification it's not stat not

00:10:27,490 --> 00:10:32,170
strongly typed it's messy to extend

00:10:30,220 --> 00:10:35,410
there's no concept of data and

00:10:32,170 --> 00:10:37,300
relationships like everything that you

00:10:35,410 --> 00:10:39,430
have to do in JSON RPC you have to look

00:10:37,300 --> 00:10:40,870
at the documentation site okay what does

00:10:39,430 --> 00:10:42,610
this method do what are the parameters

00:10:40,870 --> 00:10:44,320
that I have to pass and what order what

00:10:42,610 --> 00:10:49,240
it's going to return to me so it feels

00:10:44,320 --> 00:10:50,800
very resource driven so around the same

00:10:49,240 --> 00:10:52,570
time a lot of people in this and the

00:10:50,800 --> 00:10:54,670
ecosystem started realizing there has to

00:10:52,570 --> 00:10:57,490
be a better way there were some efforts

00:10:54,670 --> 00:11:01,120
to try to standardize or make a more

00:10:57,490 --> 00:11:02,440
stringent version of JSON RPC but then

00:11:01,120 --> 00:11:04,330
everybody kind of started realizing

00:11:02,440 --> 00:11:06,670
graph QL is really what we're looking

00:11:04,330 --> 00:11:10,660
for its expressive

00:11:06,670 --> 00:11:13,300
it contains like all of the data data

00:11:10,660 --> 00:11:16,000
definitions and relationships it's

00:11:13,300 --> 00:11:18,370
strongly typed it's easily extendable

00:11:16,000 --> 00:11:20,470
and it provides a very modern stack and

00:11:18,370 --> 00:11:25,450
developer tools for developers to build

00:11:20,470 --> 00:11:28,630
on top of so let's dive in a bit about

00:11:25,450 --> 00:11:31,240
what this looks like so there's a ton of

00:11:28,630 --> 00:11:32,710
computer science and economic theories

00:11:31,240 --> 00:11:34,780
that go into aetherium but we're not

00:11:32,710 --> 00:11:36,970
gonna cover that here basically what you

00:11:34,780 --> 00:11:39,600
need to know is about four data

00:11:36,970 --> 00:11:43,270
structures that are in aetherium blocks

00:11:39,600 --> 00:11:46,180
transactions logs and accounts and we'll

00:11:43,270 --> 00:11:48,340
just cover those really quickly so

00:11:46,180 --> 00:11:49,300
blocks blocks on the top level data

00:11:48,340 --> 00:11:51,130
structure in aetherium

00:11:49,300 --> 00:11:52,810
right I mentioned that the blockchain is

00:11:51,130 --> 00:11:54,610
a chain of these blocks they're

00:11:52,810 --> 00:11:56,770
basically a point in time reference for

00:11:54,610 --> 00:11:59,740
all transactions so all transactions

00:11:56,770 --> 00:12:01,870
refer to a block and all of the data is

00:11:59,740 --> 00:12:06,100
loosely organized into this concept of a

00:12:01,870 --> 00:12:08,140
block now here what you can see is the

00:12:06,100 --> 00:12:12,100
difference of what JSON RPC versus graph

00:12:08,140 --> 00:12:13,450
QL looks like just to fetch a block I'm

00:12:12,100 --> 00:12:15,790
only interested in saying getting the

00:12:13,450 --> 00:12:17,710
latest block number when that block was

00:12:15,790 --> 00:12:21,700
added and how many transactions on that

00:12:17,710 --> 00:12:24,850
block I'm calling get blocked by my

00:12:21,700 --> 00:12:27,340
number in the JSON RPC version and I'm

00:12:24,850 --> 00:12:31,000
passing some parameters and the graph QL

00:12:27,340 --> 00:12:33,490
very clear very declarative it's what we

00:12:31,000 --> 00:12:35,350
all love graph QL right the interesting

00:12:33,490 --> 00:12:37,000
thing about this is that there's a 98%

00:12:35,350 --> 00:12:39,160
reduction in the amount of data sent

00:12:37,000 --> 00:12:42,580
over the wire so it's a huge efficiency

00:12:39,160 --> 00:12:43,810
gain there the next few things I'm going

00:12:42,580 --> 00:12:45,250
to talk about our transactions and

00:12:43,810 --> 00:12:46,390
accounts now I'm gonna go through this

00:12:45,250 --> 00:12:48,850
backwards in the way they are on the

00:12:46,390 --> 00:12:50,680
slide so accounts are basically

00:12:48,850 --> 00:12:51,880
identities in the blockchain like you

00:12:50,680 --> 00:12:54,370
would have an account I have an account

00:12:51,880 --> 00:12:56,950
I could send either to you but there

00:12:54,370 --> 00:12:58,920
also represent contracts if I deploy a

00:12:56,950 --> 00:13:01,180
contract into the blockchain I'm

00:12:58,920 --> 00:13:03,460
basically sending a transaction to that

00:13:01,180 --> 00:13:05,860
account calling a method on my contract

00:13:03,460 --> 00:13:08,220
so they can be external accounts or

00:13:05,860 --> 00:13:10,060
contract accounts and then I mentioned

00:13:08,220 --> 00:13:12,580
transactions right these are the main

00:13:10,060 --> 00:13:16,030
actions on the blockchain so I'll send a

00:13:12,580 --> 00:13:18,970
transaction to send value or not or to

00:13:16,030 --> 00:13:20,310
call methods on contracts and some of

00:13:18,970 --> 00:13:24,310
the

00:13:20,310 --> 00:13:26,680
the transactions create events and logs

00:13:24,310 --> 00:13:29,590
which we'll cover a little bit down in a

00:13:26,680 --> 00:13:33,280
slider too so here's what transactions

00:13:29,590 --> 00:13:35,320
look like a little bit more complex of a

00:13:33,280 --> 00:13:37,420
graph q-ball query but still not crazy

00:13:35,320 --> 00:13:38,950
and it really shows you the

00:13:37,420 --> 00:13:40,590
relationships between blocks and

00:13:38,950 --> 00:13:43,780
transactions which is really important

00:13:40,590 --> 00:13:45,400
in the JSON RPC version I'm calling I'm

00:13:43,780 --> 00:13:48,490
actually calling the same method and

00:13:45,400 --> 00:13:51,190
then I flipped that last parameter from

00:13:48,490 --> 00:13:55,060
false to true again you'd have to look

00:13:51,190 --> 00:13:57,550
up what that means but that allows me to

00:13:55,060 --> 00:13:59,740
get all the data that I need in this

00:13:57,550 --> 00:14:04,030
query there was an 89% reduction in the

00:13:59,740 --> 00:14:05,860
amount of data that we needed to use now

00:14:04,030 --> 00:14:08,170
finally there's logs there are also

00:14:05,860 --> 00:14:10,150
called events so smart contract method

00:14:08,170 --> 00:14:13,390
calls when you write something to the

00:14:10,150 --> 00:14:15,070
blockchain they produce events or logs

00:14:13,390 --> 00:14:17,470
these are persisted in another area and

00:14:15,070 --> 00:14:19,210
another storage mechanism off the main

00:14:17,470 --> 00:14:21,190
blockchain but they're associated with

00:14:19,210 --> 00:14:22,660
the transaction transaction and

00:14:21,190 --> 00:14:24,250
associated with a block

00:14:22,660 --> 00:14:26,050
they're used for record-keeping and

00:14:24,250 --> 00:14:28,300
generally if you're programming an

00:14:26,050 --> 00:14:29,590
application you would send a transaction

00:14:28,300 --> 00:14:32,260
to do something and then you would

00:14:29,590 --> 00:14:35,800
monitor the the logs or events for the

00:14:32,260 --> 00:14:37,330
return data of that of that action so

00:14:35,800 --> 00:14:42,280
they provide you return values for UI

00:14:37,330 --> 00:14:45,160
amongst amongst other things and this is

00:14:42,280 --> 00:14:46,780
what it looks like to fetch logs so new

00:14:45,160 --> 00:14:49,740
method call here get transaction receipt

00:14:46,780 --> 00:14:51,940
and I'm passing in this long hash for

00:14:49,740 --> 00:14:55,060
for the transaction that I'm interested

00:14:51,940 --> 00:14:57,340
in and on the right on the graph QL side

00:14:55,060 --> 00:14:59,500
I mean this is a little bit more complex

00:14:57,340 --> 00:15:02,080
and I'm using fragments here so the

00:14:59,500 --> 00:15:04,060
fragment I'm using here is pulling value

00:15:02,080 --> 00:15:06,310
pulling the values that I'm interested

00:15:04,060 --> 00:15:08,530
in out of this log now while there's

00:15:06,310 --> 00:15:09,940
still a significant data reduction the

00:15:08,530 --> 00:15:13,210
more important thing is the return

00:15:09,940 --> 00:15:15,910
values on the left is what JSON RPC will

00:15:13,210 --> 00:15:17,890
get you the data is still encoded in a

00:15:15,910 --> 00:15:20,920
byte array you have to decode that data

00:15:17,890 --> 00:15:23,260
yourself and you have to know how to

00:15:20,920 --> 00:15:25,930
decode it on the front end with the

00:15:23,260 --> 00:15:28,510
graph QL extensions with being able to

00:15:25,930 --> 00:15:30,520
extend it to be able to parse this log

00:15:28,510 --> 00:15:33,040
data I can actually return useful data

00:15:30,520 --> 00:15:33,360
to my application versus having to go

00:15:33,040 --> 00:15:36,209
with

00:15:33,360 --> 00:15:40,170
all of the the hoop jumping to decode

00:15:36,209 --> 00:15:44,240
that that log so let's put it all

00:15:40,170 --> 00:15:48,180
together this is a simple application

00:15:44,240 --> 00:15:52,320
that that I wrote don't pay attention to

00:15:48,180 --> 00:15:53,640
the design I'm not a designer basically

00:15:52,320 --> 00:15:54,959
what it shows is all of the concepts

00:15:53,640 --> 00:15:57,180
that we just covered right from top to

00:15:54,959 --> 00:15:58,829
bottom the the header of it shows the

00:15:57,180 --> 00:16:01,470
latest block so that's a block concept

00:15:58,829 --> 00:16:03,240
there's the total number of transactions

00:16:01,470 --> 00:16:05,190
how many of those transactions were sent

00:16:03,240 --> 00:16:06,720
to an external account versus a contract

00:16:05,190 --> 00:16:09,360
account so that's the attract

00:16:06,720 --> 00:16:10,140
transactions and accounts and then in

00:16:09,360 --> 00:16:12,240
the table below

00:16:10,140 --> 00:16:14,160
there's all of the tokens that are in

00:16:12,240 --> 00:16:15,839
the logs for all of those transactions

00:16:14,160 --> 00:16:18,930
so I mentioned earlier that you could

00:16:15,839 --> 00:16:20,310
create your own token so people are

00:16:18,930 --> 00:16:24,300
trading these tokens back and forth

00:16:20,310 --> 00:16:26,970
using the etherium virtual machine or

00:16:24,300 --> 00:16:28,560
the there are smart contracts to track

00:16:26,970 --> 00:16:30,750
these tokens and this is basically

00:16:28,560 --> 00:16:33,450
parsing those tokens out aggregating

00:16:30,750 --> 00:16:38,850
them by sum and then displaying value

00:16:33,450 --> 00:16:41,880
descending so the payload return for

00:16:38,850 --> 00:16:43,279
this is pretty massive in terms of the

00:16:41,880 --> 00:16:47,180
amount of data we were able to reduce

00:16:43,279 --> 00:16:52,470
maximum 98% data reduction on average

00:16:47,180 --> 00:16:55,920
83% but that's only one aspect of of the

00:16:52,470 --> 00:16:58,199
graph QL solution the second aspect is

00:16:55,920 --> 00:17:00,449
the number of transactions so here I'm

00:16:58,199 --> 00:17:04,169
seeing I'm showing like a combination of

00:17:00,449 --> 00:17:07,290
the amount of data returned average

00:17:04,169 --> 00:17:09,150
about 50 K and then the number of

00:17:07,290 --> 00:17:11,010
transactions per block so this is ten

00:17:09,150 --> 00:17:12,449
blocks of data that I'm looking at as

00:17:11,010 --> 00:17:15,209
you can see that number of transactions

00:17:12,449 --> 00:17:18,720
go from about 400 and change to about 90

00:17:15,209 --> 00:17:21,299
in order to display all of the data for

00:17:18,720 --> 00:17:24,179
that application I have to make n +1

00:17:21,299 --> 00:17:28,020
Network calls where n is the number of

00:17:24,179 --> 00:17:30,780
transactions so in order to display that

00:17:28,020 --> 00:17:33,630
screen I have to make on average 250

00:17:30,780 --> 00:17:35,429
Network calls in JSON RPC with graph QL

00:17:33,630 --> 00:17:37,530
since it's all brought into one I can

00:17:35,429 --> 00:17:41,220
make one call and return just the data I

00:17:37,530 --> 00:17:42,510
need so this is primarily one of the

00:17:41,220 --> 00:17:44,400
things that we were looking at of like

00:17:42,510 --> 00:17:46,560
this is a game-changer for how we

00:17:44,400 --> 00:17:49,410
develop devs and how we can make

00:17:46,560 --> 00:17:55,440
network congestion at least in this part

00:17:49,410 --> 00:17:57,000
of aetherium more efficient looking down

00:17:55,440 --> 00:17:59,040
the road one of the things that's

00:17:57,000 --> 00:18:01,410
attractive about a theory about a graph

00:17:59,040 --> 00:18:02,310
QL is its extensibility so I had

00:18:01,410 --> 00:18:06,150
mentioned there's this core

00:18:02,310 --> 00:18:09,120
specification of of graph QL blocks

00:18:06,150 --> 00:18:10,530
transactions accounts the core data well

00:18:09,120 --> 00:18:12,060
if you're writing a smart contract and

00:18:10,530 --> 00:18:15,890
deploying it to a chain that's very

00:18:12,060 --> 00:18:19,160
specific to you it's your method calls

00:18:15,890 --> 00:18:21,480
your logic is not applicable to the

00:18:19,160 --> 00:18:24,210
general world so one of the things that

00:18:21,480 --> 00:18:26,640
graph QL allows us to do is to be able

00:18:24,210 --> 00:18:29,850
to augment that API with your contract

00:18:26,640 --> 00:18:31,800
specific calls so you can call your own

00:18:29,850 --> 00:18:33,500
contracts to if they get a balance or

00:18:31,800 --> 00:18:38,460
transfer a token or whatever it might be

00:18:33,500 --> 00:18:41,970
and this is really powerful in how you

00:18:38,460 --> 00:18:43,650
as a developer interact with etherium it

00:18:41,970 --> 00:18:46,680
basically gives you like infinite

00:18:43,650 --> 00:18:50,130
varieties of what that that API could

00:18:46,680 --> 00:18:53,460
look like so how can you play with

00:18:50,130 --> 00:18:55,710
etherium hopefully some of the things

00:18:53,460 --> 00:18:58,350
that I've said here inspired you to want

00:18:55,710 --> 00:19:01,140
to like check it out so on this slide I

00:18:58,350 --> 00:19:04,650
have some resources where you can check

00:19:01,140 --> 00:19:07,440
out at a graph iql playground you can

00:19:04,650 --> 00:19:09,840
read a little bit that's not that last

00:19:07,440 --> 00:19:13,260
link eath build is something that

00:19:09,840 --> 00:19:14,550
developer put together that's a really

00:19:13,260 --> 00:19:16,740
cool introduction to some of the

00:19:14,550 --> 00:19:18,000
concepts and blockchain so I encourage

00:19:16,740 --> 00:19:20,910
you to check those out if you're

00:19:18,000 --> 00:19:22,230
interested and then if you really get

00:19:20,910 --> 00:19:26,280
bitten by the bug and you want to start

00:19:22,230 --> 00:19:28,170
developing a an application in fira has

00:19:26,280 --> 00:19:29,760
a promo code specifically for this

00:19:28,170 --> 00:19:32,220
conference where you can sign up for in

00:19:29,760 --> 00:19:35,520
fira start developing your adapts and

00:19:32,220 --> 00:19:40,230
and get some money off of any premium or

00:19:35,520 --> 00:19:41,700
paid plans so I think that's my time I

00:19:40,230 --> 00:19:45,680
want to thank you for your attention and

00:19:41,700 --> 00:19:45,680

YouTube URL: https://www.youtube.com/watch?v=UPTgF3II2Vo


