Title: The future of GraphQL tooling and DX (DANIEL WOELFEL - Founder at OneGraph)
Publication date: 2019-11-03
Playlist: GraphQL Summit 2019
Description: 
	Learn how OneGraph has built custom tooling such as their Explorer, Code exporter, query doctor, intelligent variable form for GraphiQL, intelligent historical-based mocking for an API, etc.
Captions: 
	00:00:00,450 --> 00:00:06,690
hi I'm Daniel I'm going to talk about

00:00:03,270 --> 00:00:09,540
the future of graph QL tooling I'm a

00:00:06,690 --> 00:00:13,650
co-founder at one graph and a 1 graph is

00:00:09,540 --> 00:00:16,710
a data integration platform we bring all

00:00:13,650 --> 00:00:18,630
your favorites s api's into one graph

00:00:16,710 --> 00:00:20,400
you endpoint and give you a nice easy

00:00:18,630 --> 00:00:23,960
consistent interface for querying

00:00:20,400 --> 00:00:26,240
Salesforce and stripe and QuickBooks and

00:00:23,960 --> 00:00:28,410
CrunchBase and the list goes on so

00:00:26,240 --> 00:00:30,750
because we get a lot of customers that

00:00:28,410 --> 00:00:34,199
are interested in data integration and

00:00:30,750 --> 00:00:37,319
not really graph QL as much we have kind

00:00:34,199 --> 00:00:40,769
of a very different type of developer

00:00:37,319 --> 00:00:43,350
that we're going after that maybe isn't

00:00:40,769 --> 00:00:45,899
as motivated isn't as sold on graph QL

00:00:43,350 --> 00:00:47,579
and so we've tried to build things too

00:00:45,899 --> 00:00:49,289
to help those people get over the hump

00:00:47,579 --> 00:00:51,719
so basically we're trying to lower the

00:00:49,289 --> 00:00:55,530
barrier to entry to starting with graph

00:00:51,719 --> 00:00:58,079
QL so I'm sure you're all familiar this

00:00:55,530 --> 00:01:01,769
is like the first graph QL or you might

00:00:58,079 --> 00:01:04,009
see it's very simple and you know that's

00:01:01,769 --> 00:01:06,600
what I thought and then I was in a room

00:01:04,009 --> 00:01:08,280
pitching a bunch of technical founders

00:01:06,600 --> 00:01:10,380
on one graph I showed them a beautiful

00:01:08,280 --> 00:01:12,750
one graph query it was so declarative

00:01:10,380 --> 00:01:15,479
and easy I got all of your subscriptions

00:01:12,750 --> 00:01:18,869
out of stripe you didn't have to do any

00:01:15,479 --> 00:01:23,310
of this imperative code to get to get

00:01:18,869 --> 00:01:25,350
the data and you know the reaction I got

00:01:23,310 --> 00:01:26,880
wasn't the one I expected there was this

00:01:25,350 --> 00:01:28,950
isn't simple at all right look at all of

00:01:26,880 --> 00:01:31,499
these curly brackets you know maybe you

00:01:28,950 --> 00:01:33,780
could like squish them together into one

00:01:31,499 --> 00:01:35,070
line and be a little simpler and you

00:01:33,780 --> 00:01:36,359
know these were piped in Python

00:01:35,070 --> 00:01:39,530
programmers that I was talking to you

00:01:36,359 --> 00:01:41,820
and something like this is a lot more

00:01:39,530 --> 00:01:44,280
natural to them that's simple to them

00:01:41,820 --> 00:01:45,450
you know in whitespace t limited so of

00:01:44,280 --> 00:01:49,950
course I'm not gonna suggest that we

00:01:45,450 --> 00:01:51,539
make graph QL whitespace limited but we

00:01:49,950 --> 00:01:53,700
did develop something that helps get

00:01:51,539 --> 00:01:56,490
these people over the hump which we call

00:01:53,700 --> 00:02:00,060
the graphical Explorer and I'll do a

00:01:56,490 --> 00:02:01,920
quick demo of that so this is a

00:02:00,060 --> 00:02:03,780
graphical which maybe you're hopefully

00:02:01,920 --> 00:02:05,729
you're all familiar with and on the Left

00:02:03,780 --> 00:02:09,840
I have maybe make this a little bigger I

00:02:05,729 --> 00:02:12,209
have my Explorer and we want to get say

00:02:09,840 --> 00:02:15,150
like our github repositories so we click

00:02:12,209 --> 00:02:16,980
in it's a very familiar interface

00:02:15,150 --> 00:02:18,300
it's just like a file explorer and as

00:02:16,980 --> 00:02:20,220
you click you start learning things

00:02:18,300 --> 00:02:21,990
about graph QL and and every step of the

00:02:20,220 --> 00:02:23,100
way you you have some success so

00:02:21,990 --> 00:02:24,660
hopefully a lot of you have seen this

00:02:23,100 --> 00:02:26,850
but I want to highlight a few features

00:02:24,660 --> 00:02:28,500
that maybe you're not familiar with so

00:02:26,850 --> 00:02:32,430
we're gonna go into github we're gonna

00:02:28,500 --> 00:02:36,840
see how fields work when we get the

00:02:32,430 --> 00:02:38,850
repositories and here is maybe a

00:02:36,840 --> 00:02:40,980
little-known feature of the Explorer is

00:02:38,850 --> 00:02:44,010
that you can provide default arguments

00:02:40,980 --> 00:02:47,040
for a given input type so in this case

00:02:44,010 --> 00:02:48,560
if you're querying github repositories

00:02:47,040 --> 00:02:52,020
if you would to send this query without

00:02:48,560 --> 00:02:53,970
a first argument you would get back an

00:02:52,020 --> 00:02:55,830
error so you know we've we've had you

00:02:53,970 --> 00:02:57,390
had success every step along the way and

00:02:55,830 --> 00:02:58,560
all of a sudden you're back into a

00:02:57,390 --> 00:03:00,959
narrow state and you've got to figure

00:02:58,560 --> 00:03:03,570
out how to add that first field so we

00:03:00,959 --> 00:03:05,280
made it very easy for people to just

00:03:03,570 --> 00:03:07,920
stay in this beautiful success state

00:03:05,280 --> 00:03:09,300
where they never encounter any errors so

00:03:07,920 --> 00:03:12,510
I'm gonna just get a few fields out of

00:03:09,300 --> 00:03:15,860
this one let's get the ID we'll grab the

00:03:12,510 --> 00:03:18,390
name let's see if I've starred the repos

00:03:15,860 --> 00:03:19,860
and we're gonna execute that and then we

00:03:18,390 --> 00:03:29,360
see it on the right side right so we're

00:03:19,860 --> 00:03:31,950
all happy now we've we've run our query

00:03:29,360 --> 00:03:34,019
we can go home we be proud of ourselves

00:03:31,950 --> 00:03:36,959
that we've you know we've got some data

00:03:34,019 --> 00:03:39,690
out of out of graphical of course oh

00:03:36,959 --> 00:03:42,060
that's the graphical Explorer it's open

00:03:39,690 --> 00:03:46,830
source you can embed it in your and your

00:03:42,060 --> 00:03:51,060
version of graphical it's been in I

00:03:46,830 --> 00:03:56,870
think Shopify's version Gatsby post

00:03:51,060 --> 00:03:59,700
craft file history Douglass goes on but

00:03:56,870 --> 00:04:01,140
and then I wouldn't just want to like

00:03:59,700 --> 00:04:07,019
show you a little little slice of

00:04:01,140 --> 00:04:10,709
history this is a version the initial

00:04:07,019 --> 00:04:13,500
version of graphical that tamaki know

00:04:10,709 --> 00:04:15,780
felt and an early version of react you

00:04:13,500 --> 00:04:20,130
notice it's got checkmarks it looks very

00:04:15,780 --> 00:04:22,740
similar I think they Lee actually wrote

00:04:20,130 --> 00:04:24,780
the version that's a lot closer to what

00:04:22,740 --> 00:04:26,340
you see now but it's kind of interesting

00:04:24,780 --> 00:04:27,330
it's got like autocomplete with the

00:04:26,340 --> 00:04:29,580
pluses

00:04:27,330 --> 00:04:31,770
even uses the word explore so it's kind

00:04:29,580 --> 00:04:34,590
of interesting to see you know these

00:04:31,770 --> 00:04:35,759
ideas come back again okay but we're

00:04:34,590 --> 00:04:38,909
here to build things right so we've

00:04:35,759 --> 00:04:41,389
we've gotten this query and we've we've

00:04:38,909 --> 00:04:44,580
had some success but we still have a

00:04:41,389 --> 00:04:48,300
long way to go it's a long way between a

00:04:44,580 --> 00:04:50,159
big hill to climb to get from X

00:04:48,300 --> 00:04:53,280
successfully executing a query and

00:04:50,159 --> 00:04:55,050
getting that code into your app and so

00:04:53,280 --> 00:04:57,419
this is why we built the graphical code

00:04:55,050 --> 00:05:02,069
exporter and so we'll do another demo of

00:04:57,419 --> 00:05:04,590
that here okay so my close the Explorer

00:05:02,069 --> 00:05:07,349
on this Left I'm going to open up this

00:05:04,590 --> 00:05:09,150
other plugin another open source plugin

00:05:07,349 --> 00:05:12,090
which is the code exporter and the code

00:05:09,150 --> 00:05:14,819
exporter allows you as the person

00:05:12,090 --> 00:05:17,280
integrating this into your graphical to

00:05:14,819 --> 00:05:18,659
define different snippets so for example

00:05:17,280 --> 00:05:20,699
we can have a curl snippet that just

00:05:18,659 --> 00:05:26,340
lets you copy this run it on the command

00:05:20,699 --> 00:05:28,229
line and get any result really fast one

00:05:26,340 --> 00:05:29,909
focus a little bit on this JavaScript

00:05:28,229 --> 00:05:33,020
example that shows you how to build an

00:05:29,909 --> 00:05:35,900
application with react and Apollo

00:05:33,020 --> 00:05:39,210
alright so it's got all of the

00:05:35,900 --> 00:05:42,509
requirements you need you can add these

00:05:39,210 --> 00:05:44,039
dependencies to your package JSON it

00:05:42,509 --> 00:05:46,110
shows you how to set up an Apollo client

00:05:44,039 --> 00:05:49,440
how to write the query how to handle the

00:05:46,110 --> 00:05:53,190
loading state how to handle errors even

00:05:49,440 --> 00:05:54,810
how to log in and again we can also kind

00:05:53,190 --> 00:05:56,039
of teach people who aren't super

00:05:54,810 --> 00:05:58,589
familiar with graph QL the best

00:05:56,039 --> 00:06:01,770
practices by showing them better ways to

00:05:58,589 --> 00:06:06,060
do things so for example if I leave off

00:06:01,770 --> 00:06:08,759
the name for this query it encourages me

00:06:06,060 --> 00:06:10,409
to give this query a name and we can we

00:06:08,759 --> 00:06:14,909
can kind of guide people towards best

00:06:10,409 --> 00:06:16,050
practices very gently which is you know

00:06:14,909 --> 00:06:17,430
I've mentioned earlier that we see a lot

00:06:16,050 --> 00:06:19,529
of people that aren't familiar with

00:06:17,430 --> 00:06:21,000
graph QL that aren't as excited about

00:06:19,529 --> 00:06:23,580
graph QL is what they can do with one

00:06:21,000 --> 00:06:25,199
graph and we see a lot of terrible best

00:06:23,580 --> 00:06:27,419
practices especially with people using

00:06:25,199 --> 00:06:29,870
variables you know they'll concatenate

00:06:27,419 --> 00:06:31,949
strings together and make these giant

00:06:29,870 --> 00:06:35,159
giant objects when they could provide

00:06:31,949 --> 00:06:38,159
the variables via JSON and be it much

00:06:35,159 --> 00:06:41,169
happier okay so we've got this new

00:06:38,159 --> 00:06:43,599
feature that we just released yesterday

00:06:41,169 --> 00:06:46,449
that allows you to create a code sandbox

00:06:43,599 --> 00:06:48,460
and get actual working code from these

00:06:46,449 --> 00:06:52,990
examples so I'm gonna pull up to have a

00:06:48,460 --> 00:06:54,490
pre-baked example that gets my repos so

00:06:52,990 --> 00:06:57,069
there's a few queries we have the repo

00:06:54,490 --> 00:07:00,999
story that we did earlier just get a few

00:06:57,069 --> 00:07:03,669
less a few fewer we have a another

00:07:00,999 --> 00:07:04,810
mutation to star the repo and the idea

00:07:03,669 --> 00:07:06,550
on that is hard to get it to the first

00:07:04,810 --> 00:07:11,379
one in the list and then another

00:07:06,550 --> 00:07:13,449
mutation to remove that star so I

00:07:11,379 --> 00:07:18,240
clicked this great code sandbox button

00:07:13,449 --> 00:07:18,240
it's gonna go to the coach and box API

00:07:18,509 --> 00:07:25,029
generate all the files it needs and it's

00:07:22,389 --> 00:07:28,060
going to embed it in this results viewer

00:07:25,029 --> 00:07:31,599
which I'm very excited Horta just talked

00:07:28,060 --> 00:07:33,580
about the new graphical with extensions

00:07:31,599 --> 00:07:35,889
like getting this into the results pane

00:07:33,580 --> 00:07:39,249
is a real pain in the butt I can't wait

00:07:35,889 --> 00:07:41,110
until that's like first-class okay so

00:07:39,249 --> 00:07:43,029
first we see ok missing off for github

00:07:41,110 --> 00:07:46,990
and now we get a login button so I'm

00:07:43,029 --> 00:07:50,080
going to log in real quick and you can

00:07:46,990 --> 00:07:51,610
see it's got it shows me the data this

00:07:50,080 --> 00:07:52,899
is just the skeleton of the app it's not

00:07:51,610 --> 00:07:55,990
like a real app that you're going to

00:07:52,899 --> 00:07:57,069
deploy anywhere but it gets you part of

00:07:55,990 --> 00:07:58,810
the way and it shows you how all these

00:07:57,069 --> 00:08:00,759
these things work together and now you

00:07:58,810 --> 00:08:03,129
can add in like the react code that

00:08:00,759 --> 00:08:04,870
you're familiar with I mean we can even

00:08:03,129 --> 00:08:07,439
run these mutations so you can see this

00:08:04,870 --> 00:08:10,120
thing is starred here it's gonna use

00:08:07,439 --> 00:08:13,089
when I run the unstart mutation it's

00:08:10,120 --> 00:08:15,520
gonna turn that to false use some Apollo

00:08:13,089 --> 00:08:18,279
a cash magic and then we can you know

00:08:15,520 --> 00:08:23,520
start back because I want to unstart my

00:08:18,279 --> 00:08:27,279
own repo so that's the code exporter

00:08:23,520 --> 00:08:30,360
it's also open source you can include it

00:08:27,279 --> 00:08:32,169
in your own version of graphical the

00:08:30,360 --> 00:08:33,779
results pane you know you're gonna have

00:08:32,169 --> 00:08:37,419
to do some work on your own to get that

00:08:33,779 --> 00:08:39,339
that kind of fidelity but it does give

00:08:37,419 --> 00:08:43,269
you like a little link to go view it so

00:08:39,339 --> 00:08:46,779
it's it's like 90% of the way there okay

00:08:43,269 --> 00:08:49,209
so we also know we've built these like

00:08:46,779 --> 00:08:53,230
really great tools for developers so

00:08:49,209 --> 00:08:55,090
that developers can more easily build

00:08:53,230 --> 00:08:57,220
things with graph QL

00:08:55,090 --> 00:08:59,320
but developers aren't the only ones

00:08:57,220 --> 00:09:03,310
building things and we you know these

00:08:59,320 --> 00:09:05,200
these tools we've built them they're so

00:09:03,310 --> 00:09:07,000
easy to use that even non developers can

00:09:05,200 --> 00:09:10,210
use them and the largest programming

00:09:07,000 --> 00:09:11,710
platform in the world I think is Excel

00:09:10,210 --> 00:09:15,490
it's got like six hundred and fifty

00:09:11,710 --> 00:09:17,380
million developers and so by talking to

00:09:15,490 --> 00:09:20,230
people that are outside of the graphical

00:09:17,380 --> 00:09:22,540
ecosystem we've actually developed

00:09:20,230 --> 00:09:26,350
something that you can use in Excel and

00:09:22,540 --> 00:09:28,390
I'll give you a quick demo of that so

00:09:26,350 --> 00:09:29,770
here we have an excel sheet it's gonna

00:09:28,390 --> 00:09:34,120
be a little small sorry about that

00:09:29,770 --> 00:09:38,080
Excel has these add-ins and so we built

00:09:34,120 --> 00:09:39,310
a one graph add-in it pool allows you to

00:09:38,080 --> 00:09:43,510
log in to your Salesforce account

00:09:39,310 --> 00:09:46,900
QuickBooks stripe Trello etc and you can

00:09:43,510 --> 00:09:50,470
pull in data let's go and pull in some

00:09:46,900 --> 00:09:52,000
opportunities so we developed this after

00:09:50,470 --> 00:09:54,790
talking to a bunch of finance people and

00:09:52,000 --> 00:09:56,530
like half of their time it's been doing

00:09:54,790 --> 00:09:59,500
data entry and pulling in CSV s and

00:09:56,530 --> 00:10:02,290
reconciling the data from them so we can

00:09:59,500 --> 00:10:03,670
pull in for our Salesforce opportunities

00:10:02,290 --> 00:10:07,089
these if you're not familiar are things

00:10:03,670 --> 00:10:11,020
that sales that might happen so we pull

00:10:07,089 --> 00:10:16,750
out the amount let's get the name let's

00:10:11,020 --> 00:10:20,170
see who owns this opportunity we can

00:10:16,750 --> 00:10:22,570
grab the probability that it closes and

00:10:20,170 --> 00:10:26,490
we can get it staged so now we've got

00:10:22,570 --> 00:10:28,750
all this data into Excel it's very easy

00:10:26,490 --> 00:10:31,060
for us to do it and now we can use all

00:10:28,750 --> 00:10:32,830
of our Excel knowledge to start playing

00:10:31,060 --> 00:10:35,170
around with it and do the do some

00:10:32,830 --> 00:10:37,660
analysis so for example we could take

00:10:35,170 --> 00:10:40,660
the probability divide it by a hundred

00:10:37,660 --> 00:10:46,450
and multiply it by the amount and now we

00:10:40,660 --> 00:10:50,350
have a nice little projection and we can

00:10:46,450 --> 00:10:54,550
go here and we can sum it up we can

00:10:50,350 --> 00:10:56,650
filter out anything that was closed and

00:10:54,550 --> 00:10:59,560
we can use all of our Excel knowledge to

00:10:56,650 --> 00:11:01,710
build really cool quick quick little

00:10:59,560 --> 00:11:01,710
apps

00:11:05,010 --> 00:11:12,700
okay so we've talked about getting to

00:11:09,720 --> 00:11:15,250
getting to some success some building

00:11:12,700 --> 00:11:19,060
some things getting people over the hump

00:11:15,250 --> 00:11:23,560
now let's talk about some ideas that we

00:11:19,060 --> 00:11:24,910
have around the the next stage once you

00:11:23,560 --> 00:11:27,580
have graphic you'll already in your

00:11:24,910 --> 00:11:29,980
organization so there's this really

00:11:27,580 --> 00:11:34,120
wonderful thing about graph QL and it's

00:11:29,980 --> 00:11:37,120
self documenting so you have fields that

00:11:34,120 --> 00:11:39,820
have Docs your types have docstrings

00:11:37,120 --> 00:11:43,330
the structure of your schema will will

00:11:39,820 --> 00:11:44,800
tell you how how things are arranged

00:11:43,330 --> 00:11:46,840
will kind of explain the data model to

00:11:44,800 --> 00:11:48,520
you you know user has friends and it's

00:11:46,840 --> 00:11:50,590
all pretty obvious so it's wonderful

00:11:48,520 --> 00:11:52,950
thing about graph QL is no developers

00:11:50,590 --> 00:11:55,930
don't have to write documentation

00:11:52,950 --> 00:11:58,390
alright and hopefully I'm getting some

00:11:55,930 --> 00:12:00,280
skeptical looks because you do have to

00:11:58,390 --> 00:12:02,530
write documentation please write docs

00:12:00,280 --> 00:12:05,770
right I don't know how to use your API I

00:12:02,530 --> 00:12:07,690
don't want to bang my head against it so

00:12:05,770 --> 00:12:11,380
I mean for a case study to kind of give

00:12:07,690 --> 00:12:14,290
you some motivation for this imagine

00:12:11,380 --> 00:12:16,330
you're an engineer Facebook and someone

00:12:14,290 --> 00:12:19,060
comes to you designer comes to you with

00:12:16,330 --> 00:12:20,800
a mock-up of a Facebook post it's got

00:12:19,060 --> 00:12:22,660
this beautiful piece of blueberry pie

00:12:20,800 --> 00:12:25,690
and they want you to implement the like

00:12:22,660 --> 00:12:30,490
button so you go you open up graphical

00:12:25,690 --> 00:12:33,010
you inspect the mutation type if you

00:12:30,490 --> 00:12:35,140
search for like and you know you don't

00:12:33,010 --> 00:12:37,680
find anything what's going on so I click

00:12:35,140 --> 00:12:41,230
the like button on Facebook calm

00:12:37,680 --> 00:12:43,930
inspected the requests and put together

00:12:41,230 --> 00:12:47,320
piece together what the about what the

00:12:43,930 --> 00:12:50,980
query that goes to the Facebook server

00:12:47,320 --> 00:12:53,500
looks like and you notice it doesn't say

00:12:50,980 --> 00:12:55,720
like anywhere in here instead the field

00:12:53,500 --> 00:12:57,850
is feedback react which isn't something

00:12:55,720 --> 00:12:59,890
you would expect and it's because

00:12:57,850 --> 00:13:02,380
Facebook has this very complicated

00:12:59,890 --> 00:13:05,380
beautiful abstraction over comments and

00:13:02,380 --> 00:13:08,050
likes and loves and other reactions

00:13:05,380 --> 00:13:12,780
called the universal feedback interface

00:13:08,050 --> 00:13:14,920
that's what that ufi stands for so as

00:13:12,780 --> 00:13:16,630
the you know engineer coming to this

00:13:14,920 --> 00:13:16,899
thing I don't know how all of this stuff

00:13:16,630 --> 00:13:18,790
work

00:13:16,899 --> 00:13:21,279
I need someone to tell me I need an

00:13:18,790 --> 00:13:23,850
example okay but there's a big problem

00:13:21,279 --> 00:13:26,949
with docks and that is that docks lie

00:13:23,850 --> 00:13:31,930
you can't trust docks the person who

00:13:26,949 --> 00:13:33,819
built it they may have the example my

00:13:31,930 --> 00:13:37,809
network in the first place right they're

00:13:33,819 --> 00:13:39,939
in a rush maybe the code has diverged

00:13:37,809 --> 00:13:41,949
from the documentation misses a really

00:13:39,939 --> 00:13:44,110
common problem you might have deprecated

00:13:41,949 --> 00:13:46,240
a field there's a new way to do it but

00:13:44,110 --> 00:13:48,759
no one is updated the docks and so

00:13:46,240 --> 00:13:50,139
nobody trusts the docks so the solution

00:13:48,759 --> 00:13:53,999
to this is you can enforce the

00:13:50,139 --> 00:13:56,220
validation you can use graph QLS

00:13:53,999 --> 00:13:59,079
introspection features to your advantage

00:13:56,220 --> 00:14:03,220
and make sure that when you do make

00:13:59,079 --> 00:14:05,110
changes to your documentation or into

00:14:03,220 --> 00:14:07,600
your schema your documentation skit gets

00:14:05,110 --> 00:14:10,809
up-to-date gets updated also so here we

00:14:07,600 --> 00:14:13,660
have an example of a github dock shows

00:14:10,809 --> 00:14:17,079
you how this is a markdown file that

00:14:13,660 --> 00:14:19,209
shows you how to query your github repos

00:14:17,079 --> 00:14:21,970
and there's a critical error here and

00:14:19,209 --> 00:14:24,730
wouldn't it be nice if when I tried to

00:14:21,970 --> 00:14:26,470
publish this dock I got a nice little

00:14:24,730 --> 00:14:28,420
error that said okay this query is

00:14:26,470 --> 00:14:31,870
invalid all the line numbers were

00:14:28,420 --> 00:14:33,850
correct the line numbers are correct and

00:14:31,870 --> 00:14:36,990
it told me oh you called this argument

00:14:33,850 --> 00:14:40,179
firs you forgot the T did you mean first

00:14:36,990 --> 00:14:41,850
and this is something that we built it's

00:14:40,179 --> 00:14:44,319
still in the kind of a prototype stage

00:14:41,850 --> 00:14:45,910
proof-of-concept but it's called the

00:14:44,319 --> 00:14:49,089
remark plug-in graph QL you know it

00:14:45,910 --> 00:14:50,319
takes any markdown file with a graph QL

00:14:49,089 --> 00:14:52,749
code block in it

00:14:50,319 --> 00:14:54,160
and it will run it across against your

00:14:52,749 --> 00:14:56,079
schema and make sure that the query is

00:14:54,160 --> 00:14:59,170
valid and you do a lot of other cool

00:14:56,079 --> 00:15:02,319
stuff like this if you go to the graph

00:14:59,170 --> 00:15:03,970
QL dot org pages and you look at the

00:15:02,319 --> 00:15:05,860
examples there all of those examples are

00:15:03,970 --> 00:15:14,079
dynamic you can type in them they have a

00:15:05,860 --> 00:15:17,139
mini graphical that I think we built and

00:15:14,079 --> 00:15:20,619
we can we can embed that into it

00:15:17,139 --> 00:15:23,769
directly so another problem is the docs

00:15:20,619 --> 00:15:28,269
you know they live somewhere else in

00:15:23,769 --> 00:15:29,980
another system they're not where we want

00:15:28,269 --> 00:15:30,800
them right because we're in graphical

00:15:29,980 --> 00:15:34,700
this is

00:15:30,800 --> 00:15:36,709
we're trying to solve our problems and

00:15:34,700 --> 00:15:39,140
the docs you know they live in an

00:15:36,709 --> 00:15:44,600
internal wiki or on slash Docs or

00:15:39,140 --> 00:15:46,490
something like that so the solution here

00:15:44,600 --> 00:15:48,950
I think is to bring those Doc's into

00:15:46,490 --> 00:15:54,380
context right so here I'm looking at the

00:15:48,950 --> 00:15:56,600
repositories field and graphical we we

00:15:54,380 --> 00:16:00,980
have we we spent all that effort writing

00:15:56,600 --> 00:16:03,470
these examples so we ought to get some

00:16:00,980 --> 00:16:05,630
benefit from them so we got a we can

00:16:03,470 --> 00:16:07,430
look at them we can analyze them and

00:16:05,630 --> 00:16:10,880
find the type info for each field and we

00:16:07,430 --> 00:16:14,390
can see oh this viewers repost query

00:16:10,880 --> 00:16:16,430
that we have in our examples uses the

00:16:14,390 --> 00:16:18,350
repositories field and we could show it

00:16:16,430 --> 00:16:22,430
in context and so when we need the

00:16:18,350 --> 00:16:23,269
examples there they're waiting for us so

00:16:22,430 --> 00:16:25,339
this is something that we're thinking

00:16:23,269 --> 00:16:27,470
about with examples I think there's a

00:16:25,339 --> 00:16:29,899
lot of interesting things to explore

00:16:27,470 --> 00:16:31,670
about making it easier to create

00:16:29,899 --> 00:16:34,610
examples easier to document your

00:16:31,670 --> 00:16:36,620
examples build pages for your examples

00:16:34,610 --> 00:16:39,459
so that you can benefit from them new

00:16:36,620 --> 00:16:44,540
people can search them you can even

00:16:39,459 --> 00:16:46,040
benefit from the SEO this is a big big

00:16:44,540 --> 00:16:49,399
thing that we're there's a lot of ideas

00:16:46,040 --> 00:16:50,540
I think if you look at a postman they do

00:16:49,399 --> 00:16:52,130
some really interesting things with

00:16:50,540 --> 00:16:53,959
their collections and we should copy

00:16:52,130 --> 00:16:56,779
some ideas you can take some inspiration

00:16:53,959 --> 00:17:01,490
from there okay so the last thing I want

00:16:56,779 --> 00:17:04,520
to talk about is persisted queries so

00:17:01,490 --> 00:17:08,839
this is this is a topic that I think not

00:17:04,520 --> 00:17:11,720
many people are doing well and there's

00:17:08,839 --> 00:17:13,370
just so much potential here it's it's

00:17:11,720 --> 00:17:18,079
pretty far in the future I think of

00:17:13,370 --> 00:17:19,339
anything happening but it's just very

00:17:18,079 --> 00:17:21,319
exciting because of everything that you

00:17:19,339 --> 00:17:26,380
can do with these and the potential that

00:17:21,319 --> 00:17:26,380
they unlock so let's talk about what our

00:17:26,439 --> 00:17:29,439
participate

00:17:29,660 --> 00:17:36,169
wary so when I when I sent that when I

00:17:33,290 --> 00:17:38,330
click that like button this big giant

00:17:36,169 --> 00:17:40,370
query didn't get uploaded to Facebook

00:17:38,330 --> 00:17:42,980
server they didn't sin that query string

00:17:40,370 --> 00:17:46,220
instead they sent this tiny ID and so

00:17:42,980 --> 00:17:47,900
when someone was developing

00:17:46,220 --> 00:17:49,220
when they wrote that query on their

00:17:47,900 --> 00:17:51,800
computer there was a compile step that

00:17:49,220 --> 00:17:54,590
uploaded this query to the server got an

00:17:51,800 --> 00:17:57,170
ID back stored stored the query in the

00:17:54,590 --> 00:17:59,030
database and then later when I go and I

00:17:57,170 --> 00:17:59,780
send the query back to the server I just

00:17:59,030 --> 00:18:03,280
send this ID

00:17:59,780 --> 00:18:06,560
it looks up the query in the database

00:18:03,280 --> 00:18:08,840
and then it executes Aquarion since when

00:18:06,560 --> 00:18:11,240
you act the result there's a lot a lot

00:18:08,840 --> 00:18:17,090
of benefits to this one is you send and

00:18:11,240 --> 00:18:18,680
receive less data so when you send the

00:18:17,090 --> 00:18:20,210
JavaScript that's going to execute these

00:18:18,680 --> 00:18:21,980
queries you don't have to send the full

00:18:20,210 --> 00:18:25,460
query string you just send this little

00:18:21,980 --> 00:18:27,770
ID but more importantly when you sin to

00:18:25,460 --> 00:18:29,360
the query back to the server you're not

00:18:27,770 --> 00:18:31,520
sending this giant string you're sending

00:18:29,360 --> 00:18:33,530
out a tiny ID and it's more important on

00:18:31,520 --> 00:18:35,600
the upload side because on the upload

00:18:33,530 --> 00:18:38,360
side you don't have gzip my browsers

00:18:35,600 --> 00:18:40,010
don't do a good job of gzipping requests

00:18:38,360 --> 00:18:44,180
they do a good job of handling gzip two

00:18:40,010 --> 00:18:49,280
responses this also can help you prevent

00:18:44,180 --> 00:18:50,780
das attacks because you're not you're

00:18:49,280 --> 00:18:52,790
not letting people write arbitrary

00:18:50,780 --> 00:18:57,380
queries I can't you know add arbitrary

00:18:52,790 --> 00:19:00,620
levels of nesting and they can't bypass

00:18:57,380 --> 00:19:05,600
your protections so with a persistent

00:19:00,620 --> 00:19:08,120
query if you accidentally put in a very

00:19:05,600 --> 00:19:10,130
expensive query you can always block

00:19:08,120 --> 00:19:16,670
that one quarry you can't just rearrange

00:19:10,130 --> 00:19:18,830
the fields to bypass a filter and if if

00:19:16,670 --> 00:19:21,080
it's possible you can even modify that

00:19:18,830 --> 00:19:22,970
query in place so imagine you

00:19:21,080 --> 00:19:24,890
accidentally asked for a million nodes

00:19:22,970 --> 00:19:28,460
instead of a hundred right you can just

00:19:24,890 --> 00:19:30,110
make that change in the query itself it

00:19:28,460 --> 00:19:32,870
also makes it much easier to cast your

00:19:30,110 --> 00:19:35,960
queries so every time a query comes into

00:19:32,870 --> 00:19:38,090
your graphical server there is a step

00:19:35,960 --> 00:19:39,350
where it has to parse the query and it

00:19:38,090 --> 00:19:42,050
takes a little bit of CPU and a little

00:19:39,350 --> 00:19:43,910
bit of execution time so since you have

00:19:42,050 --> 00:19:46,040
if when you use persistent queries you

00:19:43,910 --> 00:19:49,130
have this list of all of the queries

00:19:46,040 --> 00:19:51,470
that your server is going to accept you

00:19:49,130 --> 00:19:53,420
can find the most used ones pull them

00:19:51,470 --> 00:19:55,730
out of the database parse them and store

00:19:53,420 --> 00:19:57,560
them in a map and it's also great for

00:19:55,730 --> 00:19:58,310
caching results it gives you a really

00:19:57,560 --> 00:20:00,980
nice cache

00:19:58,310 --> 00:20:06,830
heeey if you have public data that your

00:20:00,980 --> 00:20:09,230
server is sending and then lastly and

00:20:06,830 --> 00:20:11,450
this is this is the part or I get

00:20:09,230 --> 00:20:12,800
excited and where we've done some

00:20:11,450 --> 00:20:14,360
interesting things with one graph is

00:20:12,800 --> 00:20:19,640
it's a very convenient place for

00:20:14,360 --> 00:20:23,540
metadata and in our case we'll do a demo

00:20:19,640 --> 00:20:27,140
we allow you to embed off with your

00:20:23,540 --> 00:20:29,620
queries and so this allows your

00:20:27,140 --> 00:20:34,220
persistent queries to kind of become

00:20:29,620 --> 00:20:37,160
become like like small serverless

00:20:34,220 --> 00:20:40,400
functions so there's this phenomenon

00:20:37,160 --> 00:20:45,050
that I'm fascinated by of the open

00:20:40,400 --> 00:20:47,330
startup and this is a group of startup

00:20:45,050 --> 00:20:49,640
founders usually with like smaller

00:20:47,330 --> 00:20:51,440
companies that publish all of their

00:20:49,640 --> 00:20:53,180
results so they they tell you exactly

00:20:51,440 --> 00:20:54,980
how much money they make each month and

00:20:53,180 --> 00:20:59,060
they put little graphs and it's it's

00:20:54,980 --> 00:21:00,830
just so fascinating and I was thinking

00:20:59,060 --> 00:21:02,240
about how would I implement that or how

00:21:00,830 --> 00:21:03,530
would we implement that and it would

00:21:02,240 --> 00:21:05,600
probably be something if I wanted to

00:21:03,530 --> 00:21:07,190
show people you know for all of my

00:21:05,600 --> 00:21:08,570
stripe subscriptions you know what's the

00:21:07,190 --> 00:21:11,870
total how many subscriptions do I have

00:21:08,570 --> 00:21:13,760
how many customers do I have I would get

00:21:11,870 --> 00:21:17,450
a stripe key and maybe create a lambda

00:21:13,760 --> 00:21:20,000
function or a function in my server it

00:21:17,450 --> 00:21:24,620
would go it would fetch all my

00:21:20,000 --> 00:21:28,820
subscriptions from from stripe add them

00:21:24,620 --> 00:21:30,920
up and send back the number so with that

00:21:28,820 --> 00:21:32,630
in mind we're gonna build a persistent

00:21:30,920 --> 00:21:35,150
query that does pretty much the same

00:21:32,630 --> 00:21:38,180
thing so we're here in the one roof

00:21:35,150 --> 00:21:41,710
dashboard we're gonna call this query

00:21:38,180 --> 00:21:41,710
stripe subscriptions

00:21:47,559 --> 00:21:51,190
we're gonna go into stripe we're gonna

00:21:49,059 --> 00:21:53,400
get all my subscriptions for each

00:21:51,190 --> 00:21:57,100
subscription we're gonna get the plan no

00:21:53,400 --> 00:22:00,280
kill the nodes spring get the plan and

00:21:57,100 --> 00:22:04,390
the plan has an amount an interval and

00:22:00,280 --> 00:22:07,270
the interval count and a subscription

00:22:04,390 --> 00:22:10,300
consists of multiple plans so there is a

00:22:07,270 --> 00:22:12,400
quantity field if we apply multiply the

00:22:10,300 --> 00:22:16,179
quantity times the amount on the plan we

00:22:12,400 --> 00:22:19,929
get the monthly subscription and then I

00:22:16,179 --> 00:22:24,040
can go and assign an auth token so I

00:22:19,929 --> 00:22:26,500
created this beforehand this is an auth

00:22:24,040 --> 00:22:28,720
token for the stripe account of my

00:22:26,500 --> 00:22:30,550
previous startup I was a collaborative

00:22:28,720 --> 00:22:33,490
prototyping app we've turned off billing

00:22:30,550 --> 00:22:35,200
but at the app still lives on so we're

00:22:33,490 --> 00:22:37,570
gonna see the data from that and then I

00:22:35,200 --> 00:22:39,790
mentioned caching earlier but we don't

00:22:37,570 --> 00:22:42,490
want a hammer the stripe server so we're

00:22:39,790 --> 00:22:44,500
gonna give this like a 600 second cache

00:22:42,490 --> 00:22:46,270
and one graph well we'll get the result

00:22:44,500 --> 00:22:48,640
stored in the cache and the next time I

00:22:46,270 --> 00:22:50,350
make this query it's gonna cut you from

00:22:48,640 --> 00:22:54,360
the crap cache is if it's been less than

00:22:50,350 --> 00:22:56,950
five minutes so I'm gonna create this

00:22:54,360 --> 00:22:58,390
and we have successfully created it it

00:22:56,950 --> 00:23:01,800
has a little curl string here that we

00:22:58,390 --> 00:23:07,240
can run to check it out

00:23:01,800 --> 00:23:10,360
so execute that that's not very pretty

00:23:07,240 --> 00:23:13,140
let's put it through JQ and then I can

00:23:10,360 --> 00:23:15,730
see you know all my all my subscriptions

00:23:13,140 --> 00:23:17,140
but I've only let you get like certain

00:23:15,730 --> 00:23:19,300
fields I don't want to tell you who my

00:23:17,140 --> 00:23:22,210
customers are because those people have

00:23:19,300 --> 00:23:23,710
privacy concerns I just want to tell you

00:23:22,210 --> 00:23:26,429
how much they're paying me and so this

00:23:23,710 --> 00:23:29,890
allows me to do that and then I can go

00:23:26,429 --> 00:23:31,809
over here into a code sandbox and I can

00:23:29,890 --> 00:23:35,080
you know write a little bit of code to

00:23:31,809 --> 00:23:40,059
sales to spin this up and now anybody

00:23:35,080 --> 00:23:44,290
who wants to can go to this page KCM k9

00:23:40,059 --> 00:23:49,230
dot CSV dot app and they can see exactly

00:23:44,290 --> 00:23:54,640
how my startup is doing so that's uh

00:23:49,230 --> 00:23:58,210
that's what I've got for the talk so a

00:23:54,640 --> 00:24:00,669
couple of takeaways or you know build

00:23:58,210 --> 00:24:02,049
things for people who are

00:24:00,669 --> 00:24:04,989
the graphical ecosystem who don't think

00:24:02,049 --> 00:24:06,970
like like you and I do who are coming

00:24:04,989 --> 00:24:08,499
from different backgrounds and you know

00:24:06,970 --> 00:24:11,409
lots of wonderful things would come out

00:24:08,499 --> 00:24:14,730
of this and help graph you all to

00:24:11,409 --> 00:24:14,730

YouTube URL: https://www.youtube.com/watch?v=RNPGYfHQVU8


