Title: A Treatise on State (JED WATSON - Partner at Thinkmill)
Publication date: 2019-11-03
Playlist: GraphQL Summit 2019
Description: 
	State management is a hard problem - which is why we have an ever-growing number of tools to help us. But can we get it right without truly understanding what "state" is? Enter a treatise on state: a study of the different types of state we manage, how to think about each, and how to get them playing nicely together.

Resources:
Learn more about Summit - https://summit.graphql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Learn GraphQL using Apollo's Tutorials: https://odyssey.apollographql.com/
Captions: 
	00:00:02,810 --> 00:00:08,280
good morning graph kill summit day to

00:00:05,370 --> 00:00:09,420
welcome everyone it's very cool to see

00:00:08,280 --> 00:00:12,480
you all here I was really worried that

00:00:09,420 --> 00:00:15,179
we'd all sleep in so this is much better

00:00:12,480 --> 00:00:16,920
we're off to a good start as Peggy said

00:00:15,179 --> 00:00:20,520
hi my name is Jed you might recognize me

00:00:16,920 --> 00:00:22,230
from the internet as Jed Watson and I

00:00:20,520 --> 00:00:26,430
co-founded this company in Sydney were

00:00:22,230 --> 00:00:32,129
called think mill think now we mainly

00:00:26,430 --> 00:00:33,269
make software we produce code and we've

00:00:32,129 --> 00:00:36,359
spent a lot of the last two-and-a-half

00:00:33,269 --> 00:00:37,409
years working with a la Seon we started

00:00:36,359 --> 00:00:39,539
out helping them with their design

00:00:37,409 --> 00:00:42,179
system but we also moved into a lot of

00:00:39,539 --> 00:00:43,379
other react UI code and recently for the

00:00:42,179 --> 00:00:47,969
last year I've been helping them out

00:00:43,379 --> 00:00:50,219
with JIRA has used yeah yeah I thought

00:00:47,969 --> 00:00:51,749
that might happen if you're using JIRA

00:00:50,219 --> 00:00:52,920
cloud you might have noticed at some

00:00:51,749 --> 00:00:55,769
points in the last year it's actually

00:00:52,920 --> 00:00:58,649
gotten a lot faster and it's become more

00:00:55,769 --> 00:01:00,389
and more a true s.p.a those huge clunky

00:00:58,649 --> 00:01:03,779
full page refreshes aren't there anymore

00:01:00,389 --> 00:01:05,280
and that's something that I spent quite

00:01:03,779 --> 00:01:06,990
a bit of time helping out with sort of

00:01:05,280 --> 00:01:09,420
as a guest front-end architect and that

00:01:06,990 --> 00:01:14,579
was a pretty classic transition from

00:01:09,420 --> 00:01:16,380
Java monolith to fully modern s.p.a by

00:01:14,579 --> 00:01:18,960
way of rebuilding a lot of the UI's

00:01:16,380 --> 00:01:21,240
piecemeal and react and this has been

00:01:18,960 --> 00:01:22,619
quite a challenging project because here

00:01:21,240 --> 00:01:24,960
is actually quite a lot of different

00:01:22,619 --> 00:01:26,850
apps being worked on by different teams

00:01:24,960 --> 00:01:28,740
there's a lot of Engineers involved and

00:01:26,850 --> 00:01:30,359
the challenge once all about has been

00:01:28,740 --> 00:01:32,880
kind of transitioned from these old Java

00:01:30,359 --> 00:01:34,710
templates into modern react you eyes to

00:01:32,880 --> 00:01:38,399
get them all to kind of sink together

00:01:34,710 --> 00:01:41,520
and feel like a unified app and really

00:01:38,399 --> 00:01:44,130
that true modern s.p.a feel and that has

00:01:41,520 --> 00:01:46,319
led me to what I'm here to talk about

00:01:44,130 --> 00:01:49,819
today which is one of the biggest

00:01:46,319 --> 00:01:55,259
challenges we had on that journey state

00:01:49,819 --> 00:01:56,880
so this is a treatise on state which is

00:01:55,259 --> 00:01:58,979
the title of the blog post that I

00:01:56,880 --> 00:02:01,109
published internally and a lot of

00:01:58,979 --> 00:02:03,090
thought thinking that came together to

00:02:01,109 --> 00:02:04,229
sort of make the synchronization of all

00:02:03,090 --> 00:02:06,049
of these different apps that were being

00:02:04,229 --> 00:02:10,319
written by different developers

00:02:06,049 --> 00:02:11,730
concurrently possible and Twitter's on

00:02:10,319 --> 00:02:13,739
States a bit of a mouthful so you could

00:02:11,730 --> 00:02:14,849
also think of this as just how to think

00:02:13,739 --> 00:02:16,469
about state

00:02:14,849 --> 00:02:18,299
I'd often if we're gonna work with

00:02:16,469 --> 00:02:20,459
something well it helps you just get a

00:02:18,299 --> 00:02:21,510
good grounding in how to think about it

00:02:20,459 --> 00:02:25,230
and then the problems are a lot easier

00:02:21,510 --> 00:02:27,299
to solve so I'm gonna try and answer two

00:02:25,230 --> 00:02:31,470
questions for you today

00:02:27,299 --> 00:02:35,129
the first is what is state and the

00:02:31,470 --> 00:02:36,269
second one is how do we manage it I'm

00:02:35,129 --> 00:02:37,260
not sure that I'm actually gonna answer

00:02:36,269 --> 00:02:38,730
this for you because they're both very

00:02:37,260 --> 00:02:40,260
very challenging questions I think this

00:02:38,730 --> 00:02:43,230
is almost like a last word right as a

00:02:40,260 --> 00:02:44,400
front-end or back-end developer but

00:02:43,230 --> 00:02:47,790
we'll see how we go let's start with the

00:02:44,400 --> 00:02:49,650
first one what is state you might have

00:02:47,790 --> 00:02:51,959
seen this before if you've worked or

00:02:49,650 --> 00:02:54,209
even seen react at all this is probably

00:02:51,959 --> 00:02:57,720
pretty familiar to you we spend a lot of

00:02:54,209 --> 00:03:00,180
time on the View side of this equation

00:02:57,720 --> 00:03:02,459
and the whole idea that state is a view

00:03:00,180 --> 00:03:04,650
as a function of state but what actually

00:03:02,459 --> 00:03:06,950
is the stuff on the Left what is what is

00:03:04,650 --> 00:03:06,950
it made of

00:03:07,430 --> 00:03:11,280
like let's spend some time thinking

00:03:09,480 --> 00:03:15,079
about what actually goes into that

00:03:11,280 --> 00:03:17,189
bucket that we're generating our UI from

00:03:15,079 --> 00:03:18,900
this is a really hard question to answer

00:03:17,189 --> 00:03:21,750
because it's gonna be different on every

00:03:18,900 --> 00:03:24,930
app so took a step back and started

00:03:21,750 --> 00:03:27,629
thinking instead maybe we can define the

00:03:24,930 --> 00:03:29,909
rules of state if we can identify the

00:03:27,629 --> 00:03:31,079
rules of something then we have a bit of

00:03:29,909 --> 00:03:34,979
a better chance of actually identifying

00:03:31,079 --> 00:03:36,120
what it is and so I actually spent quite

00:03:34,979 --> 00:03:39,000
a bit of time thinking about this and

00:03:36,120 --> 00:03:43,139
came up with this has that applications

00:03:39,000 --> 00:03:46,319
have five types of state and here they

00:03:43,139 --> 00:03:48,510
are so this may not be the same for

00:03:46,319 --> 00:03:50,280
everyone everyone that I've spoken to

00:03:48,510 --> 00:03:53,310
about this has kind of challenged me on

00:03:50,280 --> 00:03:54,750
edge cases and you know what about this

00:03:53,310 --> 00:03:56,159
kind of state or what about these ones

00:03:54,750 --> 00:03:58,470
and that's okay like this is not meant

00:03:56,159 --> 00:04:00,599
to be a pedantic categorization I'm not

00:03:58,470 --> 00:04:02,370
a scientist I build applications I ship

00:04:00,599 --> 00:04:04,889
them this is about giving you a

00:04:02,370 --> 00:04:07,709
framework to think about these different

00:04:04,889 --> 00:04:08,970
types of state in a particular way so

00:04:07,709 --> 00:04:11,329
that you can actually carry this forward

00:04:08,970 --> 00:04:13,680
and start conversations with your team

00:04:11,329 --> 00:04:17,370
or start actually thinking about this

00:04:13,680 --> 00:04:18,299
and developing it further now before I

00:04:17,370 --> 00:04:20,159
go into what each of these different

00:04:18,299 --> 00:04:21,630
types of state are I'm going to cover a

00:04:20,159 --> 00:04:22,380
quick concept that's gonna thread

00:04:21,630 --> 00:04:26,460
through the rest of the presentation

00:04:22,380 --> 00:04:28,710
which is components so back to this idea

00:04:26,460 --> 00:04:31,850
where our view is a func

00:04:28,710 --> 00:04:34,650
of our state what we can do in modern

00:04:31,850 --> 00:04:37,290
front and frameworks is bundle that

00:04:34,650 --> 00:04:39,870
together so that we have these building

00:04:37,290 --> 00:04:43,200
blocks of state becoming view and they

00:04:39,870 --> 00:04:44,970
are our components this is a bit of a

00:04:43,200 --> 00:04:46,350
new primitive if you will this is

00:04:44,970 --> 00:04:49,890
actually one of the big differences

00:04:46,350 --> 00:04:51,990
that's really fundamentally changed web

00:04:49,890 --> 00:04:54,330
development in the last 10 years is the

00:04:51,990 --> 00:04:58,110
advent of systems that let us truly work

00:04:54,330 --> 00:05:00,030
in components so the biggest I think

00:04:58,110 --> 00:05:01,830
conceptual shift that we've had to get

00:05:00,030 --> 00:05:04,440
through on the front end in the last

00:05:01,830 --> 00:05:08,270
sort of 10 years has been this huge

00:05:04,440 --> 00:05:12,240
transition from working on web documents

00:05:08,270 --> 00:05:14,420
to web applications and at the same time

00:05:12,240 --> 00:05:18,180
we've gone in a pretty clunky way

00:05:14,420 --> 00:05:21,390
through working with marker as our

00:05:18,180 --> 00:05:22,680
primitive through by way of jQuery

00:05:21,390 --> 00:05:24,690
components and a whole lot of other

00:05:22,680 --> 00:05:28,860
stuff too components as our new

00:05:24,690 --> 00:05:30,240
primitive and this is actually really

00:05:28,860 --> 00:05:32,040
neat I'll come in I'll come back to this

00:05:30,240 --> 00:05:33,960
a bit more later in the presentation but

00:05:32,040 --> 00:05:36,420
the other thing is that components

00:05:33,960 --> 00:05:37,650
aren't limited to their own state you

00:05:36,420 --> 00:05:38,940
can actually create a hierarchy out of

00:05:37,650 --> 00:05:41,460
them and that's what makes them so great

00:05:38,940 --> 00:05:45,030
because you can feed them in state from

00:05:41,460 --> 00:05:47,310
sort of above you can pass that state

00:05:45,030 --> 00:05:50,040
down to other components and you can

00:05:47,310 --> 00:05:52,110
also provide them callbacks to call when

00:05:50,040 --> 00:05:55,290
state should be changed and this is

00:05:52,110 --> 00:05:56,670
really the core of a composition model

00:05:55,290 --> 00:06:01,200
that is changing the way we build

00:05:56,670 --> 00:06:03,300
front-end so with that components

00:06:01,200 --> 00:06:04,920
concept out of the way I'm gonna look at

00:06:03,300 --> 00:06:09,240
a component this is a pretty simple one

00:06:04,920 --> 00:06:10,740
this is a select I'm actually being a

00:06:09,240 --> 00:06:13,080
little tongue-in-cheek here celexa quite

00:06:10,740 --> 00:06:14,790
complicated I gave it to a react conf

00:06:13,080 --> 00:06:16,700
last week on just how complicated they

00:06:14,790 --> 00:06:20,310
get but we'll keep it simple for here

00:06:16,700 --> 00:06:23,070
this one it has a few different types of

00:06:20,310 --> 00:06:25,920
state in it for example the menu is open

00:06:23,070 --> 00:06:29,520
that's a type of state if the user was

00:06:25,920 --> 00:06:30,720
to start typing into the input to reduce

00:06:29,520 --> 00:06:32,730
the number of options they had to pick

00:06:30,720 --> 00:06:34,560
from that's another piece of state and

00:06:32,730 --> 00:06:38,760
once they've selected one of those

00:06:34,560 --> 00:06:40,800
values this is another piece of state so

00:06:38,760 --> 00:06:41,940
we've got three little pieces of state

00:06:40,800 --> 00:06:45,450
that are being managed by this

00:06:41,940 --> 00:06:48,210
opponent that's all good this is that

00:06:45,450 --> 00:06:50,190
first type of state local state now we

00:06:48,210 --> 00:06:52,980
might take this select field and put it

00:06:50,190 --> 00:06:54,810
in a form now our form is going to have

00:06:52,980 --> 00:06:57,780
some state about what the values of all

00:06:54,810 --> 00:06:59,790
of its inputs are that's also local

00:06:57,780 --> 00:07:01,890
state where we'd now be using that

00:06:59,790 --> 00:07:04,020
pattern of props and callback to pass

00:07:01,890 --> 00:07:06,120
down from the form to the select the

00:07:04,020 --> 00:07:08,760
value and callback to the form when the

00:07:06,120 --> 00:07:13,710
Select has changed so this is local

00:07:08,760 --> 00:07:15,900
state and the the kind of guidelines for

00:07:13,710 --> 00:07:19,110
local state use it for things like

00:07:15,900 --> 00:07:20,610
component state form step keep a local

00:07:19,110 --> 00:07:22,830
copy of something before you submit it

00:07:20,610 --> 00:07:24,960
and do something with it and also

00:07:22,830 --> 00:07:26,810
various different UI state like the fact

00:07:24,960 --> 00:07:29,400
that that menu is open or closed

00:07:26,810 --> 00:07:32,100
now local state is your best friend as

00:07:29,400 --> 00:07:35,040
an application developer this is pretty

00:07:32,100 --> 00:07:37,050
much always where you want to start and

00:07:35,040 --> 00:07:38,670
you pretty much always want to start by

00:07:37,050 --> 00:07:42,300
passing it down to other components

00:07:38,670 --> 00:07:44,550
through props it's a nice easy way to

00:07:42,300 --> 00:07:47,300
start but let's have a look at when

00:07:44,550 --> 00:07:50,790
things get a little bit more complicated

00:07:47,300 --> 00:07:53,970
let's go back to our form and now we'll

00:07:50,790 --> 00:07:55,290
put it in an application and let's stop

00:07:53,970 --> 00:07:57,660
focusing on our form for a second we're

00:07:55,290 --> 00:07:59,640
gonna have a look at the header now we

00:07:57,660 --> 00:08:01,080
have a header component and like all

00:07:59,640 --> 00:08:03,000
good header components in applications

00:08:01,080 --> 00:08:05,520
this one's going to have information

00:08:03,000 --> 00:08:06,630
about the fact that I'm signed in it's

00:08:05,520 --> 00:08:10,020
gonna have some of the widgets up there

00:08:06,630 --> 00:08:11,700
maybe my avatar icon now that also could

00:08:10,020 --> 00:08:13,350
be local state in that header component

00:08:11,700 --> 00:08:15,780
I could load up that information and

00:08:13,350 --> 00:08:18,480
render it but what if I need these

00:08:15,780 --> 00:08:20,220
fields in my form to also maybe offer

00:08:18,480 --> 00:08:21,600
the user different selections based on

00:08:20,220 --> 00:08:23,610
who they are or what they've got access

00:08:21,600 --> 00:08:25,440
to now suddenly we have two components

00:08:23,610 --> 00:08:28,980
on the same page the one access the same

00:08:25,440 --> 00:08:33,000
piece of state and this is your clue

00:08:28,980 --> 00:08:34,620
that we have found some shared state so

00:08:33,000 --> 00:08:36,330
what we do in this situation is we'd

00:08:34,620 --> 00:08:38,820
actually progress from using local state

00:08:36,330 --> 00:08:40,919
in our mental model of our app to kind

00:08:38,820 --> 00:08:44,219
of hoisting that into this container

00:08:40,919 --> 00:08:45,690
around the app this purple one and then

00:08:44,219 --> 00:08:47,250
we'd provide that state down to these

00:08:45,690 --> 00:08:50,610
two components let's have a look at

00:08:47,250 --> 00:08:53,820
shared state this is typically used for

00:08:50,610 --> 00:08:55,590
things like application state or data

00:08:53,820 --> 00:08:58,740
that is shared across the application

00:08:55,590 --> 00:09:00,270
acacia a store as well as shared

00:08:58,740 --> 00:09:01,590
concerns in the UI estate might want to

00:09:00,270 --> 00:09:03,090
know is there a modal open should be

00:09:01,590 --> 00:09:04,860
pause background processing or anything

00:09:03,090 --> 00:09:07,050
like that

00:09:04,860 --> 00:09:08,880
the kita shared state is not to always

00:09:07,050 --> 00:09:10,470
assume that it's what you need but to go

00:09:08,880 --> 00:09:12,840
here when you know why you need it so

00:09:10,470 --> 00:09:15,660
when we're looking at that UI we saw

00:09:12,840 --> 00:09:18,440
okay now we have state that needs to be

00:09:15,660 --> 00:09:21,150
accessed by two components

00:09:18,440 --> 00:09:22,590
that's shed state and let me break down

00:09:21,150 --> 00:09:25,800
for you the rule that we've developed

00:09:22,590 --> 00:09:27,390
around how to identify this transition

00:09:25,800 --> 00:09:29,490
from local state to shared state when

00:09:27,390 --> 00:09:32,280
you have two or more components that

00:09:29,490 --> 00:09:34,170
need to access or manipulate the same

00:09:32,280 --> 00:09:36,990
piece of state which should have no

00:09:34,170 --> 00:09:38,550
knowledge of each other and this is sort

00:09:36,990 --> 00:09:39,720
of based on the principle of least

00:09:38,550 --> 00:09:41,940
knowledge it's not quite a direct

00:09:39,720 --> 00:09:43,590
translation of it but the principle of

00:09:41,940 --> 00:09:45,300
least knowledge is that each component

00:09:43,590 --> 00:09:46,710
in your system should have as little

00:09:45,300 --> 00:09:49,500
knowledge about other components as

00:09:46,710 --> 00:09:50,670
possible if your component doesn't need

00:09:49,500 --> 00:09:52,760
to know about other components that's

00:09:50,670 --> 00:09:54,690
perfect make sure it doesn't need to

00:09:52,760 --> 00:09:57,000
there's no way that our header should

00:09:54,690 --> 00:09:59,850
have known about our form so that was

00:09:57,000 --> 00:10:00,840
where that rule came from now just

00:09:59,850 --> 00:10:02,310
looking at the way that I've described

00:10:00,840 --> 00:10:04,560
local state and shared state you might

00:10:02,310 --> 00:10:05,750
be thinking what about props drilling

00:10:04,560 --> 00:10:08,610
Jed come on

00:10:05,750 --> 00:10:10,700
we know this is bad why are you telling

00:10:08,610 --> 00:10:12,870
us to parcel a state around with props

00:10:10,700 --> 00:10:14,130
for those of you who haven't met props

00:10:12,870 --> 00:10:15,900
drilling yet you're the lucky ones in

00:10:14,130 --> 00:10:17,970
the audience basically it's when we have

00:10:15,900 --> 00:10:19,680
a hierarchy of components and we've

00:10:17,970 --> 00:10:21,750
passed our state down through props and

00:10:19,680 --> 00:10:22,950
we have all these prop these components

00:10:21,750 --> 00:10:25,710
in the middle of the receiving something

00:10:22,950 --> 00:10:27,300
only to pass it on and that actually

00:10:25,710 --> 00:10:29,340
gets really messy over time but luckily

00:10:27,300 --> 00:10:32,760
reacting other frameworks have a concept

00:10:29,340 --> 00:10:35,970
of context and the context API lets us

00:10:32,760 --> 00:10:38,550
pass something from a provider down into

00:10:35,970 --> 00:10:40,410
a consumer without passing all the way

00:10:38,550 --> 00:10:42,690
through and this is a very similar style

00:10:40,410 --> 00:10:43,500
of transition from local to shared state

00:10:42,690 --> 00:10:45,090
but they're not actually the same

00:10:43,500 --> 00:10:46,290
they're often conflated and I want to

00:10:45,090 --> 00:10:48,150
give you a rule as well for when you

00:10:46,290 --> 00:10:50,730
want to be moving between those two

00:10:48,150 --> 00:10:53,550
api's without necessarily triggering

00:10:50,730 --> 00:10:55,620
that local to shared state transition so

00:10:53,550 --> 00:10:57,450
you'd go from props to context when

00:10:55,620 --> 00:10:58,800
there are interstitial components that

00:10:57,450 --> 00:11:01,260
shouldn't know about a prop but

00:10:58,800 --> 00:11:02,790
exclusively accept it

00:11:01,260 --> 00:11:05,430
only so they can pass it on to their

00:11:02,790 --> 00:11:06,890
children bit of a mouthful but it's a

00:11:05,430 --> 00:11:09,030
really good rule if you can follow that

00:11:06,890 --> 00:11:09,290
you can kind of get your head around the

00:11:09,030 --> 00:11:10,399
idea

00:11:09,290 --> 00:11:13,250
these two things can be managed

00:11:10,399 --> 00:11:15,410
independently anyway moving on back to

00:11:13,250 --> 00:11:18,139
this select let's say that we don't know

00:11:15,410 --> 00:11:20,360
what these options are before the page

00:11:18,139 --> 00:11:22,730
is loaded this has actually got to come

00:11:20,360 --> 00:11:25,220
from a server we've just found another

00:11:22,730 --> 00:11:26,209
type of state and given that we're craft

00:11:25,220 --> 00:11:27,230
kill some that you probably been

00:11:26,209 --> 00:11:30,829
wondering what I'm going to get to this

00:11:27,230 --> 00:11:36,649
this is remote state that's the third

00:11:30,829 --> 00:11:38,209
kind now you might be wondering why why

00:11:36,649 --> 00:11:39,649
is remote state different or shed so a

00:11:38,209 --> 00:11:41,209
lot of the things that I described about

00:11:39,649 --> 00:11:42,980
steady state probably sound like ways

00:11:41,209 --> 00:11:45,230
that you'd be using a remote state in

00:11:42,980 --> 00:11:47,329
your app so here's the difference

00:11:45,230 --> 00:11:48,620
remote state basically plays by some

00:11:47,329 --> 00:11:50,750
different rules and the first is that

00:11:48,620 --> 00:11:52,880
you don't own it on the UI it's actually

00:11:50,750 --> 00:11:56,149
stored somewhere else the source of

00:11:52,880 --> 00:11:58,130
truth for that state is a server you

00:11:56,149 --> 00:12:00,709
might catch it and you might derive

00:11:58,130 --> 00:12:02,600
other values from it and you also have

00:12:00,709 --> 00:12:07,100
an API to sync your local changes back

00:12:02,600 --> 00:12:08,630
to it but it's always async and it's not

00:12:07,100 --> 00:12:10,250
infallible you have to be guarded when

00:12:08,630 --> 00:12:12,350
you access it you always have to do a

00:12:10,250 --> 00:12:14,990
lot more work and write more code in

00:12:12,350 --> 00:12:18,139
order to work with remote state then you

00:12:14,990 --> 00:12:19,670
do local or as day so we're starting to

00:12:18,139 --> 00:12:21,050
see these different properties emerging

00:12:19,670 --> 00:12:24,920
between the different types of state

00:12:21,050 --> 00:12:26,839
that we can work with in our app and

00:12:24,920 --> 00:12:28,790
along with remote state if I was to

00:12:26,839 --> 00:12:30,769
start typing into this select box and

00:12:28,790 --> 00:12:32,060
maybe wait for some results to appear

00:12:30,769 --> 00:12:35,480
maybe there's a lot and we need to

00:12:32,060 --> 00:12:37,279
filter them on the server this loading

00:12:35,480 --> 00:12:40,339
state that's actually another type of

00:12:37,279 --> 00:12:42,769
state again I struggled for months

00:12:40,339 --> 00:12:44,600
whilst explaining this concept to

00:12:42,769 --> 00:12:46,190
different teams to figure out what to

00:12:44,600 --> 00:12:51,230
call this and we ended up going with

00:12:46,190 --> 00:12:53,510
meta state this is state about state our

00:12:51,230 --> 00:12:56,600
meta state is actually again another set

00:12:53,510 --> 00:12:58,399
of different different rules meta state

00:12:56,600 --> 00:13:00,410
is provided for you and you're not the

00:12:58,399 --> 00:13:01,850
source of truth this is subtly but

00:13:00,410 --> 00:13:03,860
importantly different from you don't own

00:13:01,850 --> 00:13:07,100
it this is like you really don't own it

00:13:03,860 --> 00:13:10,459
this one right it exists you you can't

00:13:07,100 --> 00:13:12,110
argue with it my request is in-flight my

00:13:10,459 --> 00:13:15,230
request has failed my quest has come

00:13:12,110 --> 00:13:16,670
back I have my results now this isn't

00:13:15,230 --> 00:13:19,600
the list of options I'm loading but this

00:13:16,670 --> 00:13:22,189
is my pro restores loading that

00:13:19,600 --> 00:13:23,089
sometimes depending on what it is you

00:13:22,189 --> 00:13:24,649
might have an API

00:13:23,089 --> 00:13:27,559
requested it changes you might say hey

00:13:24,649 --> 00:13:30,259
just refetch that you could also track

00:13:27,559 --> 00:13:32,269
things like animations the transition

00:13:30,259 --> 00:13:33,680
from one state into another and that

00:13:32,269 --> 00:13:35,559
would be a valid use of men estate as

00:13:33,680 --> 00:13:38,180
well it's not just for remote requests

00:13:35,559 --> 00:13:39,800
it's a good idea to always respect it if

00:13:38,180 --> 00:13:41,839
your application is loading don't ignore

00:13:39,800 --> 00:13:45,139
that or if your application comes out of

00:13:41,839 --> 00:13:46,730
a loading state don't ignore that and

00:13:45,139 --> 00:13:48,379
this is not actually part of remote

00:13:46,730 --> 00:13:49,970
state but it is often coupled to it will

00:13:48,379 --> 00:13:52,459
often see these two type six states

00:13:49,970 --> 00:13:57,529
coexisting together by the async nature

00:13:52,459 --> 00:14:01,999
of a remote state so let's have a look

00:13:57,529 --> 00:14:04,009
at our last type of state and this is

00:14:01,999 --> 00:14:07,639
this is kind of a weird one to pull out

00:14:04,009 --> 00:14:11,180
but if we have a look at this app and

00:14:07,639 --> 00:14:14,029
just put in a browser now you'll see

00:14:11,180 --> 00:14:16,399
we're at slash create new I would expect

00:14:14,029 --> 00:14:17,899
that although this is a mock the this

00:14:16,399 --> 00:14:20,540
form is now going to be showing us an

00:14:17,899 --> 00:14:22,220
option to create a new thing but because

00:14:20,540 --> 00:14:23,990
these components are reusable we could

00:14:22,220 --> 00:14:26,629
take that form and we could repurpose it

00:14:23,990 --> 00:14:29,050
to give it some data to start with and

00:14:26,629 --> 00:14:31,160
then we could use it on our edit screen

00:14:29,050 --> 00:14:33,019
and maybe the difference between those

00:14:31,160 --> 00:14:36,230
two states for that form is just

00:14:33,019 --> 00:14:39,199
changing the URL in the browser and if

00:14:36,230 --> 00:14:40,699
we go to editing thing 1 2 3 and we then

00:14:39,199 --> 00:14:45,769
transition to editing thing

00:14:40,699 --> 00:14:49,129
5 6 7 you know we would want our form to

00:14:45,769 --> 00:14:50,720
respect that we would need to make sure

00:14:49,129 --> 00:14:53,959
that any values that have been cached

00:14:50,720 --> 00:14:56,209
had been replaced everything else on the

00:14:53,959 --> 00:15:00,050
page basically cascades from this type

00:14:56,209 --> 00:15:01,879
of state and this is router state it's

00:15:00,050 --> 00:15:03,379
not just that things might change you

00:15:01,879 --> 00:15:04,879
need to update their internal state when

00:15:03,379 --> 00:15:07,160
you're out state changes it's also that

00:15:04,879 --> 00:15:08,449
you could end up with maybe different

00:15:07,160 --> 00:15:10,269
components mounted on the page or

00:15:08,449 --> 00:15:12,529
different pages being rendered entirely

00:15:10,269 --> 00:15:15,639
it's a route state is really like kind

00:15:12,529 --> 00:15:20,139
of king it'll just do whatever it wants

00:15:15,639 --> 00:15:23,929
and it behaves by very similar rules to

00:15:20,139 --> 00:15:25,939
the meta State it's provided for you and

00:15:23,929 --> 00:15:27,670
you aren't the source of truth you do

00:15:25,939 --> 00:15:29,870
have an API to request that it changes

00:15:27,670 --> 00:15:31,519
but you need to always respect it you

00:15:29,870 --> 00:15:33,860
can't control it the user could press

00:15:31,519 --> 00:15:35,420
back they could refresh the screen they

00:15:33,860 --> 00:15:36,010
would expect the app to respond

00:15:35,420 --> 00:15:37,540
accordingly

00:15:36,010 --> 00:15:39,040
every point in time and this makes it a

00:15:37,540 --> 00:15:42,730
bit more special than any other type of

00:15:39,040 --> 00:15:44,470
state that we've managed it is also not

00:15:42,730 --> 00:15:45,730
part of our state but often when you

00:15:44,470 --> 00:15:49,380
transition from one route to another

00:15:45,730 --> 00:15:51,670
your remote state will need to update

00:15:49,380 --> 00:15:54,760
now I want to show you a couple of

00:15:51,670 --> 00:15:56,940
things that can kind of go wrong when

00:15:54,760 --> 00:15:59,380
you're not following these rules for

00:15:56,940 --> 00:16:01,090
particularly router state I'm borrowing

00:15:59,380 --> 00:16:04,090
from a real world example here that we

00:16:01,090 --> 00:16:06,970
we had to work through let's say that

00:16:04,090 --> 00:16:08,260
you've got this component on the Left

00:16:06,970 --> 00:16:10,360
which is a list of things you can pick

00:16:08,260 --> 00:16:11,500
from and on the right you have a form

00:16:10,360 --> 00:16:16,240
where you can edit the one that you

00:16:11,500 --> 00:16:20,560
picked now both of those components want

00:16:16,240 --> 00:16:22,360
to be wired up to the route state but

00:16:20,560 --> 00:16:25,510
I'm just gonna simplify this UI for a

00:16:22,360 --> 00:16:28,240
second so we can zoom in here the thing

00:16:25,510 --> 00:16:30,520
is that if ever man urging that route

00:16:28,240 --> 00:16:33,130
said independently they might know a bit

00:16:30,520 --> 00:16:35,890
too much they might know about things

00:16:33,130 --> 00:16:37,090
that they shouldn't know about for

00:16:35,890 --> 00:16:39,010
example it might be easy to pick

00:16:37,090 --> 00:16:41,170
something on the left and have it update

00:16:39,010 --> 00:16:42,310
the URL that makes sense but let's say

00:16:41,170 --> 00:16:43,900
that form on the right that Save button

00:16:42,310 --> 00:16:46,180
on the bottom that's like a save and

00:16:43,900 --> 00:16:49,570
next and that's also going to update the

00:16:46,180 --> 00:16:51,400
location we start to run into trouble

00:16:49,570 --> 00:16:54,070
here right because we have two different

00:16:51,400 --> 00:16:58,510
components managing state that's owned

00:16:54,070 --> 00:17:00,670
by the browser the first thing we want

00:16:58,510 --> 00:17:02,350
to do is pass in the thing that they

00:17:00,670 --> 00:17:04,570
should be working with and make sure

00:17:02,350 --> 00:17:06,220
that we respect that so that if this

00:17:04,570 --> 00:17:08,440
thing ID prop changes we don't want to

00:17:06,220 --> 00:17:10,750
be caching data inside of that form

00:17:08,440 --> 00:17:11,920
that's not derived from that problem we

00:17:10,750 --> 00:17:15,640
need to be really careful about that

00:17:11,920 --> 00:17:17,530
purity but second of all we want to make

00:17:15,640 --> 00:17:19,589
sure that if that changes were surfacing

00:17:17,530 --> 00:17:24,160
that information back up to our parent

00:17:19,589 --> 00:17:26,220
so on thing change we want to say set a

00:17:24,160 --> 00:17:28,300
new thing to the value I was just given

00:17:26,220 --> 00:17:31,750
now this has actually been the source of

00:17:28,300 --> 00:17:33,850
a non-trivial amount of challenge in a

00:17:31,750 --> 00:17:36,910
large application that I've worked on

00:17:33,850 --> 00:17:38,380
recently and that's because this wasn't

00:17:36,910 --> 00:17:42,340
all quite wired up the way you would

00:17:38,380 --> 00:17:43,750
expect what we actually want to say is

00:17:42,340 --> 00:17:46,690
that we don't want either of these

00:17:43,750 --> 00:17:48,250
components to be directly manipulating

00:17:46,690 --> 00:17:48,700
that state they should just be talking

00:17:48,250 --> 00:17:50,590
that Paran

00:17:48,700 --> 00:17:52,450
and the reason for this is remember that

00:17:50,590 --> 00:17:54,610
form can be embedded in different places

00:17:52,450 --> 00:17:56,260
around our application it doesn't

00:17:54,610 --> 00:17:58,180
actually know where it is and it

00:17:56,260 --> 00:18:00,850
shouldn't have to understand the routing

00:17:58,180 --> 00:18:02,290
scheme of our whole application in order

00:18:00,850 --> 00:18:03,520
to say the next it should just be able

00:18:02,290 --> 00:18:05,290
to say oh I'm done

00:18:03,520 --> 00:18:09,460
handle that for me plays parent

00:18:05,290 --> 00:18:10,810
component thank you so yeah these these

00:18:09,460 --> 00:18:12,760
kind of became really important

00:18:10,810 --> 00:18:17,830
principles when we were working on this

00:18:12,760 --> 00:18:20,650
so those are our five types of state

00:18:17,830 --> 00:18:24,580
that we've identified local shared

00:18:20,650 --> 00:18:26,710
remote meta and route state and that's

00:18:24,580 --> 00:18:28,090
the rules for understanding when you're

00:18:26,710 --> 00:18:30,190
working with different types of them and

00:18:28,090 --> 00:18:34,540
how to think about that so that doesn't

00:18:30,190 --> 00:18:36,970
quite answer what is state but I think

00:18:34,540 --> 00:18:39,970
it gives us a framework for thinking

00:18:36,970 --> 00:18:41,410
about how to identify what state is and

00:18:39,970 --> 00:18:43,300
what different types of state needs to

00:18:41,410 --> 00:18:44,920
behave which way in our app so let's

00:18:43,300 --> 00:18:47,890
have a look at that management side now

00:18:44,920 --> 00:18:49,480
that was a great quote which I'm going

00:18:47,890 --> 00:18:51,790
to attribute in a cheeky way to Pete

00:18:49,480 --> 00:18:53,620
hunt because definitely for me he

00:18:51,790 --> 00:18:55,150
popularized it I think he's he stole it

00:18:53,620 --> 00:18:58,180
from somewhere else but shared mutable

00:18:55,150 --> 00:18:59,470
state is the root of all evil now I

00:18:58,180 --> 00:19:00,640
didn't see anyone dressed up like this

00:18:59,470 --> 00:19:02,320
last night but I'm pretty sure you can

00:19:00,640 --> 00:19:03,940
go out on Halloween dressed as shed

00:19:02,320 --> 00:19:06,520
mutable state and freak out a bunch of

00:19:03,940 --> 00:19:08,080
front-end developers that's like the

00:19:06,520 --> 00:19:12,130
scariest thing I would say on the

00:19:08,080 --> 00:19:14,620
straights the problem with this is that

00:19:12,130 --> 00:19:19,000
complex applications thrive on shared

00:19:14,620 --> 00:19:22,900
mutable state this is actually how we do

00:19:19,000 --> 00:19:24,490
cool things no not all shared mutable

00:19:22,900 --> 00:19:26,020
state is bad actually as it turns out

00:19:24,490 --> 00:19:28,020
we've become much much better at

00:19:26,020 --> 00:19:31,660
handling it

00:19:28,020 --> 00:19:33,400
exhibit a Apollo and Paolo is an example

00:19:31,660 --> 00:19:36,100
of shared mutable state that's actually

00:19:33,400 --> 00:19:38,890
managed really well and it scales really

00:19:36,100 --> 00:19:42,700
well and it is it is I guarantee you not

00:19:38,890 --> 00:19:44,500
the root of all evil but let's take a

00:19:42,700 --> 00:19:48,670
look back not too far in the past at

00:19:44,500 --> 00:19:50,530
another friend of ours redux now after

00:19:48,670 --> 00:19:51,880
working on sort of front-end

00:19:50,530 --> 00:19:54,070
architecture Atlassian for a while I

00:19:51,880 --> 00:19:56,680
ended up doing a bunch of training

00:19:54,070 --> 00:19:58,360
sessions for different teams and I used

00:19:56,680 --> 00:20:00,700
to enjoy trolling with these next two

00:19:58,360 --> 00:20:01,700
slides because they've been using a lot

00:20:00,700 --> 00:20:05,360
of Redux around the

00:20:01,700 --> 00:20:10,429
place and I'd say this is your app and

00:20:05,360 --> 00:20:12,830
this is your app on radix now the point

00:20:10,429 --> 00:20:15,110
is that like I'm not I'm not actually

00:20:12,830 --> 00:20:17,690
here to bag radix but it is it's gonna

00:20:15,110 --> 00:20:20,210
let gravity it's like a black hole that

00:20:17,690 --> 00:20:23,210
wants to suck all the state of your

00:20:20,210 --> 00:20:25,039
application into a single store and it

00:20:23,210 --> 00:20:26,360
makes no differentiation between these

00:20:25,039 --> 00:20:28,669
different types of state that I've

00:20:26,360 --> 00:20:31,399
mentioned all the different ways in

00:20:28,669 --> 00:20:34,809
which they behave everything acts like

00:20:31,399 --> 00:20:37,190
local state or shared State actually

00:20:34,809 --> 00:20:41,299
everything's synchronous everything's in

00:20:37,190 --> 00:20:42,440
one big blob async state is hard to

00:20:41,299 --> 00:20:45,080
manage because you kind of got to do

00:20:42,440 --> 00:20:46,730
that manually you've got to add all

00:20:45,080 --> 00:20:48,260
these actions and reducers for managing

00:20:46,730 --> 00:20:49,909
data as loading data is not loading all

00:20:48,260 --> 00:20:51,409
these different patterns for working

00:20:49,909 --> 00:20:53,899
with that and it actually gets super

00:20:51,409 --> 00:20:56,240
complicated it's got a couple of other

00:20:53,899 --> 00:20:58,549
flaws like some boilerplate but look as

00:20:56,240 --> 00:21:00,320
I said I'm not here to bag it it's got

00:20:58,549 --> 00:21:02,090
great developer experience for debugging

00:21:00,320 --> 00:21:04,279
and state management and a whole lot of

00:21:02,090 --> 00:21:05,690
other things also it's fundamentally

00:21:04,279 --> 00:21:08,330
built on a state reducer patent which is

00:21:05,690 --> 00:21:09,980
an amazing solution for some problems in

00:21:08,330 --> 00:21:10,429
fact it's such a good solution that we

00:21:09,980 --> 00:21:13,159
got it

00:21:10,429 --> 00:21:14,899
recently in the new react hooks API we

00:21:13,159 --> 00:21:18,700
now have a native use reducer as part of

00:21:14,899 --> 00:21:20,809
react API all right so it's not all bad

00:21:18,700 --> 00:21:23,029
but if you look at what else we got

00:21:20,809 --> 00:21:26,779
alongside use reducer we got use state

00:21:23,029 --> 00:21:28,580
and use context and I think that if you

00:21:26,779 --> 00:21:29,929
saw this as your starting point you

00:21:28,580 --> 00:21:31,760
wouldn't actually look at that and think

00:21:29,929 --> 00:21:33,380
oh I know what I'll do I'll create a

00:21:31,760 --> 00:21:35,450
single reducer stick that at the root of

00:21:33,380 --> 00:21:37,519
my app and then run 100% of my state

00:21:35,450 --> 00:21:43,539
changes through that that's a good idea

00:21:37,519 --> 00:21:43,539
that's gonna scale really well I didn't

00:21:43,960 --> 00:21:49,760
because of that refactoring from redux

00:21:46,909 --> 00:21:51,409
to Apolo tends to in my experience

00:21:49,760 --> 00:21:53,870
reduce the lines of code and increase

00:21:51,409 --> 00:21:55,010
the clarity across an entire code base

00:21:53,870 --> 00:21:58,220
it's awesome

00:21:55,010 --> 00:21:59,450
I do this every time I got my hands in

00:21:58,220 --> 00:22:02,120
the code base with Redux I'm like oh

00:21:59,450 --> 00:22:06,409
let's get some apollo in here throw this

00:22:02,120 --> 00:22:07,850
in the bin it's great but why again the

00:22:06,409 --> 00:22:12,350
whole point of this is to be thinking

00:22:07,850 --> 00:22:15,170
about what's actually better why are we

00:22:12,350 --> 00:22:17,420
seeing these effects well the first one

00:22:15,170 --> 00:22:19,130
I think we've all heard enough times to

00:22:17,420 --> 00:22:22,010
have come to a conference and hear about

00:22:19,130 --> 00:22:24,080
it you select the data that you want and

00:22:22,010 --> 00:22:26,420
you don't have to transform it when you

00:22:24,080 --> 00:22:28,190
get it and that genuinely tends to be a

00:22:26,420 --> 00:22:30,020
lot of the code that I've seen written

00:22:28,190 --> 00:22:32,900
in redux when you're dealing with the

00:22:30,020 --> 00:22:36,170
REST API but what else is it doing what

00:22:32,900 --> 00:22:38,210
else has changed that well data

00:22:36,170 --> 00:22:40,640
requirements are now co-located with the

00:22:38,210 --> 00:22:42,410
components that need them and that's

00:22:40,640 --> 00:22:44,660
really handy that's actually leaning on

00:22:42,410 --> 00:22:45,920
that composition model that I was

00:22:44,660 --> 00:22:48,170
talking about earlier it's much more

00:22:45,920 --> 00:22:50,150
native to the concept of a hierarchy of

00:22:48,170 --> 00:22:53,870
components that have been composed

00:22:50,150 --> 00:22:55,370
together so it's working better with the

00:22:53,870 --> 00:22:56,870
inherent composition models of these

00:22:55,370 --> 00:22:59,210
modern frameworks that were enjoying the

00:22:56,870 --> 00:23:01,730
benefits of we're no longer building up

00:22:59,210 --> 00:23:04,040
our own kind of entire structure and

00:23:01,730 --> 00:23:07,820
state schema alongside that that we need

00:23:04,040 --> 00:23:09,110
to manage and manually wire up but

00:23:07,820 --> 00:23:11,750
another point that I think is kind of

00:23:09,110 --> 00:23:13,430
underappreciated is that meta State is

00:23:11,750 --> 00:23:15,620
handled for you automatically

00:23:13,430 --> 00:23:17,150
and now that we've thought about remote

00:23:15,620 --> 00:23:19,820
state and meta state as different things

00:23:17,150 --> 00:23:20,990
and share in local state as more

00:23:19,820 --> 00:23:23,540
different things that all share diff

00:23:20,990 --> 00:23:25,520
like have different properties right

00:23:23,540 --> 00:23:28,760
these benefits start becoming obviously

00:23:25,520 --> 00:23:30,020
as well the fact that meta State is

00:23:28,760 --> 00:23:31,490
handled for you automatically is like

00:23:30,020 --> 00:23:34,130
actually pretty obvious when you look at

00:23:31,490 --> 00:23:36,740
the API but think about the benefit of

00:23:34,130 --> 00:23:39,770
this redux was designed as a synchronous

00:23:36,740 --> 00:23:42,230
store where as Apollo was designed from

00:23:39,770 --> 00:23:44,480
the get-go as something for managing

00:23:42,230 --> 00:23:46,220
remote state so obviously you'd make it

00:23:44,480 --> 00:23:49,040
really easy to actually manage the meta

00:23:46,220 --> 00:23:50,870
state that goes along with that and the

00:23:49,040 --> 00:23:53,540
other thing just to come back that

00:23:50,870 --> 00:23:56,120
composability point is that it sits very

00:23:53,540 --> 00:24:00,200
nicely alongside other API is like using

00:23:56,120 --> 00:24:03,170
local state or shared state or route

00:24:00,200 --> 00:24:05,600
state and because we have this Universal

00:24:03,170 --> 00:24:07,010
API now with hooks for accessing these

00:24:05,600 --> 00:24:08,720
different types of state from wherever

00:24:07,010 --> 00:24:12,380
they're most appropriate to be stored

00:24:08,720 --> 00:24:15,050
and managed it's much easier to then

00:24:12,380 --> 00:24:17,390
kind of make this work together nicely

00:24:15,050 --> 00:24:19,310
in our application without fitting

00:24:17,390 --> 00:24:24,440
things into patterns that weren't

00:24:19,310 --> 00:24:27,170
designed for them so let's have a look

00:24:24,440 --> 00:24:29,290
at what react says about this right from

00:24:27,170 --> 00:24:31,360
the docs I love this

00:24:29,290 --> 00:24:33,730
it sound like I think page one and

00:24:31,360 --> 00:24:35,590
somehow we ignored it for like so many

00:24:33,730 --> 00:24:36,970
years just building capsulated

00:24:35,590 --> 00:24:39,250
components that manage their own state

00:24:36,970 --> 00:24:42,640
and then compose them to make complex UI

00:24:39,250 --> 00:24:45,760
is that's the whole story now I would

00:24:42,640 --> 00:24:47,169
include the concept of depending on

00:24:45,760 --> 00:24:49,330
state like you would when you're running

00:24:47,169 --> 00:24:53,320
a query in the concept of managing state

00:24:49,330 --> 00:24:55,000
here just by the way and what this leads

00:24:53,320 --> 00:24:56,080
us to is something I call riding the

00:24:55,000 --> 00:24:59,290
wave of complexity

00:24:56,080 --> 00:25:02,110
now if who's here in the room is in a

00:24:59,290 --> 00:25:04,059
startup yep there are startups

00:25:02,110 --> 00:25:04,720
everywhere I mean we're we're in San

00:25:04,059 --> 00:25:08,020
Francisco

00:25:04,720 --> 00:25:10,270
so you'd you'd recognize this graph this

00:25:08,020 --> 00:25:12,100
is revenue over time and what you're

00:25:10,270 --> 00:25:15,760
probably looking for in your startup is

00:25:12,100 --> 00:25:17,530
for it to go like this this is hopefully

00:25:15,760 --> 00:25:18,929
a familiar experience for at least a

00:25:17,530 --> 00:25:22,090
couple of startups here in the Bay Area

00:25:18,929 --> 00:25:24,340
but if I was to change these axes from

00:25:22,090 --> 00:25:28,330
revenue and time to complexity and

00:25:24,340 --> 00:25:29,830
features I've probably got a more common

00:25:28,330 --> 00:25:35,350
experience for startups in the Bay Area

00:25:29,830 --> 00:25:37,570
now this is often the experience we have

00:25:35,350 --> 00:25:39,040
when we adopt a framework early on that

00:25:37,570 --> 00:25:43,740
solves for a lot of our use cases but

00:25:39,040 --> 00:25:46,299
doesn't scale well and then we scale

00:25:43,740 --> 00:25:49,150
what I love about react and this whole

00:25:46,299 --> 00:25:50,890
component model is that it lets us write

00:25:49,150 --> 00:25:52,990
a curve more like this this is riding

00:25:50,890 --> 00:25:54,910
the wave of complexity we can allow

00:25:52,990 --> 00:25:58,660
complexity come in and then just sort of

00:25:54,910 --> 00:26:01,030
abstract it away behind components we

00:25:58,660 --> 00:26:03,130
can let more come in we can extract more

00:26:01,030 --> 00:26:04,870
components we can walk so we're always

00:26:03,130 --> 00:26:06,220
in control of how much complexity we're

00:26:04,870 --> 00:26:07,780
dealing with at any one point in time

00:26:06,220 --> 00:26:10,120
because a minute something gets complex

00:26:07,780 --> 00:26:10,600
we just stick it into component it's

00:26:10,120 --> 00:26:13,929
nice

00:26:10,600 --> 00:26:16,179
works really well and this kind of

00:26:13,929 --> 00:26:17,940
brings me to my next point which is that

00:26:16,179 --> 00:26:19,929
we're very good at solving problems

00:26:17,940 --> 00:26:23,380
sometimes we're good at solving problems

00:26:19,929 --> 00:26:26,350
that we created for ourselves it's much

00:26:23,380 --> 00:26:30,299
better to not have to like don't solve

00:26:26,350 --> 00:26:33,130
problems when you can stop having them

00:26:30,299 --> 00:26:35,860
now I'm gonna draw an analogy from

00:26:33,130 --> 00:26:37,480
front-end development just to sort of

00:26:35,860 --> 00:26:42,400
get you thinking again state like what

00:26:37,480 --> 00:26:44,520
stay got to do with CSS well we had we

00:26:42,400 --> 00:26:46,840
to apply styles with class names and

00:26:44,520 --> 00:26:49,540
then our star she's got so big that we

00:26:46,840 --> 00:26:53,230
had to invent methodologies for scaling

00:26:49,540 --> 00:26:54,940
them things like BEM now we got to the

00:26:53,230 --> 00:26:56,800
point though where our frameworks and

00:26:54,940 --> 00:26:59,560
tool chains have matured and we can do

00:26:56,800 --> 00:27:00,760
things like CSS and GS which lets us get

00:26:59,560 --> 00:27:03,340
those styles and bundle them into a

00:27:00,760 --> 00:27:06,010
component so our component concept now

00:27:03,340 --> 00:27:07,480
encapsulate s' state and styles and it's

00:27:06,010 --> 00:27:10,600
everything we need to build a primitive

00:27:07,480 --> 00:27:13,840
building block of our application state

00:27:10,600 --> 00:27:15,610
comes in callbacks go out so this thing

00:27:13,840 --> 00:27:16,800
that we did with CSS and J's is actually

00:27:15,610 --> 00:27:20,170
very similar to what we're doing with

00:27:16,800 --> 00:27:25,630
the modern state tool chain and tools

00:27:20,170 --> 00:27:27,490
like Apollo so we all love Apollo the

00:27:25,630 --> 00:27:28,810
ergonomics of it agreat but it's not

00:27:27,490 --> 00:27:30,130
just about picking up new tools it's

00:27:28,810 --> 00:27:31,690
about thinking about why they're better

00:27:30,130 --> 00:27:34,860
that gives us a deeper appreciation of

00:27:31,690 --> 00:27:37,720
how to use them well and my tips for you

00:27:34,860 --> 00:27:40,840
are always identify which component owns

00:27:37,720 --> 00:27:42,520
which piece of state and then just wire

00:27:40,840 --> 00:27:45,430
that up to other components with props

00:27:42,520 --> 00:27:48,340
in context it matters less which tools

00:27:45,430 --> 00:27:50,950
you use to manage state so much is how

00:27:48,340 --> 00:27:52,830
you clearly identify the ownership of

00:27:50,950 --> 00:27:56,080
that state and the rules that apply and

00:27:52,830 --> 00:27:59,170
one size doesn't fit all when it comes

00:27:56,080 --> 00:28:00,550
to state in front end because the I

00:27:59,170 --> 00:28:02,280
think the answer that what is state is

00:28:00,550 --> 00:28:04,510
like well it's kind of everything right

00:28:02,280 --> 00:28:06,790
it's like all the stuff driving your app

00:28:04,510 --> 00:28:09,850
it makes sense that one size doesn't fit

00:28:06,790 --> 00:28:11,350
all of everything and you don't have to

00:28:09,850 --> 00:28:13,270
choose a single framework to manage data

00:28:11,350 --> 00:28:15,400
you just need to focus on remembering

00:28:13,270 --> 00:28:17,770
the different rules and choosing

00:28:15,400 --> 00:28:21,640
patterns that are appropriate to each

00:28:17,770 --> 00:28:24,970
rule quick recap on those rules local

00:28:21,640 --> 00:28:26,320
state is for well little things but

00:28:24,970 --> 00:28:28,360
start here because you'd be surprised

00:28:26,320 --> 00:28:30,400
how much you can get away with where as

00:28:28,360 --> 00:28:32,110
shared state is for when that needs to

00:28:30,400 --> 00:28:33,280
be shared between two or more components

00:28:32,110 --> 00:28:36,750
that should have no knowledge of each

00:28:33,280 --> 00:28:39,490
other and then remotes say you don't own

00:28:36,750 --> 00:28:41,020
but you can sort of owner you can play

00:28:39,490 --> 00:28:42,790
with it and it's always a sync and then

00:28:41,020 --> 00:28:44,020
meta state is the state that is produced

00:28:42,790 --> 00:28:49,030
by running side effects in your

00:28:44,020 --> 00:28:51,040
application with hooks we can access the

00:28:49,030 --> 00:28:51,879
types of state through the same API as

00:28:51,040 --> 00:28:53,949
and then with

00:28:51,879 --> 00:28:55,989
components where you get a universal API

00:28:53,949 --> 00:28:58,329
fer composing them together and that's

00:28:55,989 --> 00:29:02,559
really all we need to build complex

00:28:58,329 --> 00:29:04,899
sophisticated applications that scale so

00:29:02,559 --> 00:29:07,569
design good api's for your components

00:29:04,899 --> 00:29:11,480
and then compose them to build complex

00:29:07,569 --> 00:29:17,680
things and that's my treatise on state I

00:29:11,480 --> 00:29:17,680
[Applause]

00:29:18,119 --> 00:29:22,599
just want to I've got like 40 seconds

00:29:21,009 --> 00:29:26,159
before I need to get off this stage and

00:29:22,599 --> 00:29:29,139
I wanted to just do a quick shout-out

00:29:26,159 --> 00:29:30,759
for my team in Sydney because while we

00:29:29,139 --> 00:29:31,929
were on the plane over here they

00:29:30,759 --> 00:29:33,489
actually launched the thing that they've

00:29:31,929 --> 00:29:38,199
been working on for about a year and a

00:29:33,489 --> 00:29:40,089
half which is Keystone 5 this is an open

00:29:38,199 --> 00:29:43,959
source project that we've been working

00:29:40,089 --> 00:29:46,719
on for a while it's a sort of nodejs CMS

00:29:43,959 --> 00:29:49,479
platform you feed it schema it gives you

00:29:46,719 --> 00:29:52,329
it wires up an Apollo server and an ORM

00:29:49,479 --> 00:29:54,999
and a react based a beam UI for you to

00:29:52,329 --> 00:29:57,190
manage data it's it's kind of everything

00:29:54,999 --> 00:30:00,129
if you're into that sort of thing check

00:29:57,190 --> 00:30:01,809
it out but in the meantime thank you

00:30:00,129 --> 00:30:02,380
I've been Jed Watson enjoy the rest of

00:30:01,809 --> 00:30:05,259
the conference

00:30:02,380 --> 00:30:05,259

YouTube URL: https://www.youtube.com/watch?v=tBz3UmZG_bk


