Title: Testing React Apollo Client
Publication date: 2021-04-13
Playlist: GraphQL Summit Worldwide - April 2021
Description: 
	"Quality means doing it right when no one is looking". This is a quote by Henry Ford which is applicable to our software development world as well. Writing good tests results in creating better software products, with higher quality which are prone to fewer errors. 

In this talk, Adhithi will walk you through testing your GraphQL operations with Apollo Client. We will write tests for our React client application that uses Apollo GraphQL. By the end of this talk, you will be familiar with best practices for testing React components that use Apollo Client for its GraphQL operations.

Key takeaways:
* Testing React components
* Testing Queries and Mutations
* Testing error and loading states

Resources:
Learn more about Summit - https://summit.graphql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Captions: 
	00:00:00,740 --> 00:00:12,970
[Music]

00:00:14,559 --> 00:00:18,720
hello everyone welcome to my talk on

00:00:16,480 --> 00:00:20,880
testing react apolo client

00:00:18,720 --> 00:00:22,560
thank you graphql summit for organizing

00:00:20,880 --> 00:00:23,359
this virtual conference during the

00:00:22,560 --> 00:00:26,320
pandemic

00:00:23,359 --> 00:00:28,640
and having me here to present i'm aditi

00:00:26,320 --> 00:00:30,000
ravichandran i'm a software consultant

00:00:28,640 --> 00:00:32,399
based in kansas city

00:00:30,000 --> 00:00:33,600
i primarily work on react react native

00:00:32,399 --> 00:00:36,239
and graphql

00:00:33,600 --> 00:00:39,680
i'm also a pluralsight author and love

00:00:36,239 --> 00:00:39,680
speaking at conferences

00:00:41,280 --> 00:00:45,840
quality means doing it right when no one

00:00:44,320 --> 00:00:48,160
is looking

00:00:45,840 --> 00:00:50,079
this is a quote by henry ford which is

00:00:48,160 --> 00:00:51,920
applicable to our software development

00:00:50,079 --> 00:00:54,000
world as well

00:00:51,920 --> 00:00:55,680
writing good tests results in creating

00:00:54,000 --> 00:00:58,320
better software products

00:00:55,680 --> 00:00:59,039
and with higher quality which are prone

00:00:58,320 --> 00:01:01,840
to fewer

00:00:59,039 --> 00:01:03,520
errors in this talk i'm going to walk

00:01:01,840 --> 00:01:04,320
you through testing your graphql

00:01:03,520 --> 00:01:07,040
operations

00:01:04,320 --> 00:01:09,760
with apollo client in a react

00:01:07,040 --> 00:01:09,760
application

00:01:10,240 --> 00:01:13,280
in this talk we're going to be testing

00:01:12,000 --> 00:01:16,960
react components

00:01:13,280 --> 00:01:18,960
that use the apollo client

00:01:16,960 --> 00:01:21,920
we're going to be testing queries and

00:01:18,960 --> 00:01:24,400
mutations that we've written in graphql

00:01:21,920 --> 00:01:25,040
we'll also test the error and loading

00:01:24,400 --> 00:01:27,840
states

00:01:25,040 --> 00:01:27,840
as well

00:01:28,799 --> 00:01:32,400
before we get into testing let me show

00:01:31,119 --> 00:01:35,680
you the application

00:01:32,400 --> 00:01:35,680
that we're going to be testing

00:01:37,439 --> 00:01:43,360
this is global mantix a demo conference

00:01:40,720 --> 00:01:45,840
app that i've built with react

00:01:43,360 --> 00:01:46,399
in here you should see a conference tab

00:01:45,840 --> 00:01:49,200
which has

00:01:46,399 --> 00:01:50,320
two options to view speakers and view

00:01:49,200 --> 00:01:52,640
sessions

00:01:50,320 --> 00:01:53,600
each one of them is going to pull up

00:01:52,640 --> 00:01:57,280
information

00:01:53,600 --> 00:01:59,439
using a graphql query the vue speakers

00:01:57,280 --> 00:02:01,119
is going to pull speaker information

00:01:59,439 --> 00:02:02,880
from a graphql server

00:02:01,119 --> 00:02:04,880
and the view sessions brings in the

00:02:02,880 --> 00:02:06,799
conference sessions

00:02:04,880 --> 00:02:08,160
let's go ahead and inspect this to

00:02:06,799 --> 00:02:12,319
understand the graphql

00:02:08,160 --> 00:02:14,000
operation when i right click and inspect

00:02:12,319 --> 00:02:16,959
you should see on the network tab the

00:02:14,000 --> 00:02:18,720
graphql operation

00:02:16,959 --> 00:02:21,120
in the request payload you can see the

00:02:18,720 --> 00:02:23,599
query for speakers

00:02:21,120 --> 00:02:25,520
and on the response you see the json

00:02:23,599 --> 00:02:27,680
response back that i've got from the

00:02:25,520 --> 00:02:29,840
graphql server

00:02:27,680 --> 00:02:30,720
now this is what we're going to test

00:02:29,840 --> 00:02:33,200
we're going to test

00:02:30,720 --> 00:02:34,480
that our mock query that we're going to

00:02:33,200 --> 00:02:37,920
create

00:02:34,480 --> 00:02:41,360
returns a json response as expected

00:02:37,920 --> 00:02:43,280
when we pass it to the react component

00:02:41,360 --> 00:02:44,560
we're going to use the marked provider

00:02:43,280 --> 00:02:46,239
for our tests

00:02:44,560 --> 00:02:47,599
we're going to wrap the component tree

00:02:46,239 --> 00:02:50,239
with the marked provider

00:02:47,599 --> 00:02:52,640
as shown in this example above which

00:02:50,239 --> 00:02:54,239
makes the apollo client available on

00:02:52,640 --> 00:02:56,160
react's context

00:02:54,239 --> 00:02:57,440
this is very similar to using the

00:02:56,160 --> 00:02:58,959
provider component

00:02:57,440 --> 00:03:00,959
but here we're going to use the marked

00:02:58,959 --> 00:03:03,760
provider for marking

00:03:00,959 --> 00:03:05,519
responses this is going to enable you to

00:03:03,760 --> 00:03:08,239
define mark responses

00:03:05,519 --> 00:03:10,159
for individual queries and mutations and

00:03:08,239 --> 00:03:12,800
the tests don't need to communicate

00:03:10,159 --> 00:03:14,480
with an external graphql server this

00:03:12,800 --> 00:03:15,440
means your tests are going to be very

00:03:14,480 --> 00:03:17,519
reliable

00:03:15,440 --> 00:03:19,440
and totally depend on your mark

00:03:17,519 --> 00:03:22,640
responses

00:03:19,440 --> 00:03:25,840
all right let's get started

00:03:22,640 --> 00:03:28,879
here we are in vs code and

00:03:25,840 --> 00:03:31,519
i have a file called speakers.jsx

00:03:28,879 --> 00:03:32,959
and this is what we saw right now on our

00:03:31,519 --> 00:03:36,480
web application

00:03:32,959 --> 00:03:38,640
i use a query called speakers query

00:03:36,480 --> 00:03:40,560
which is quite straightforward and it

00:03:38,640 --> 00:03:43,040
queries the graphql server

00:03:40,560 --> 00:03:45,360
for the speaker information and once i

00:03:43,040 --> 00:03:48,480
get the speaker information that i need

00:03:45,360 --> 00:03:48,799
like id name and bio i simply display

00:03:48,480 --> 00:03:51,680
them

00:03:48,799 --> 00:03:53,519
on the web page so let's create a test

00:03:51,680 --> 00:03:56,159
for the speakers i'm going to go ahead

00:03:53,519 --> 00:03:56,159
and call that

00:03:58,840 --> 00:04:03,120
speakers.test.js

00:04:00,879 --> 00:04:04,159
first things first we need to import our

00:04:03,120 --> 00:04:06,239
marked provider

00:04:04,159 --> 00:04:08,640
which is available from the apollo

00:04:06,239 --> 00:04:10,400
client slash testing

00:04:08,640 --> 00:04:11,840
the next thing i'm going to use is

00:04:10,400 --> 00:04:14,720
enzymes mount

00:04:11,840 --> 00:04:17,280
operation this is going to create the

00:04:14,720 --> 00:04:19,199
react components that i need

00:04:17,280 --> 00:04:22,079
and then we're also going to get our

00:04:19,199 --> 00:04:23,680
queries imported like the speakers query

00:04:22,079 --> 00:04:26,400
and the react component that we're going

00:04:23,680 --> 00:04:29,440
to test called speakers

00:04:26,400 --> 00:04:31,360
all right so speakers is a component

00:04:29,440 --> 00:04:34,479
that calls the speakers list

00:04:31,360 --> 00:04:37,199
and this is where we call our query

00:04:34,479 --> 00:04:38,160
to query for speakers and display them

00:04:37,199 --> 00:04:40,400
i've included

00:04:38,160 --> 00:04:42,880
a bunch more imports that we're going to

00:04:40,400 --> 00:04:46,240
utilize within our test

00:04:42,880 --> 00:04:47,600
like act and wait

00:04:46,240 --> 00:04:49,919
the first thing we're going to do in

00:04:47,600 --> 00:04:51,520
this test is to define our marked

00:04:49,919 --> 00:04:54,560
speaker data

00:04:51,520 --> 00:04:55,280
the mark speaker data needs to match our

00:04:54,560 --> 00:04:58,080
query

00:04:55,280 --> 00:04:58,960
and the response exactly we can't miss

00:04:58,080 --> 00:05:01,360
parameters

00:04:58,960 --> 00:05:03,360
we're going to get errors if we do and

00:05:01,360 --> 00:05:04,240
the mark response is going to have a

00:05:03,360 --> 00:05:07,919
request

00:05:04,240 --> 00:05:07,919
and a result section

00:05:08,160 --> 00:05:11,840
within our request we can use the query

00:05:11,039 --> 00:05:13,520
parameter

00:05:11,840 --> 00:05:15,520
and give the name of the query that

00:05:13,520 --> 00:05:17,840
we're going to test in our case it's

00:05:15,520 --> 00:05:19,840
going to be called the speakers query

00:05:17,840 --> 00:05:22,479
and within the results we're going to

00:05:19,840 --> 00:05:26,160
return exactly what we're expecting

00:05:22,479 --> 00:05:26,160
the result of this query to be

00:05:26,320 --> 00:05:29,919
i'm going to paste the response that

00:05:28,320 --> 00:05:32,080
we're going to mark

00:05:29,919 --> 00:05:33,039
it's going to have the speakers array

00:05:32,080 --> 00:05:36,000
with the id

00:05:33,039 --> 00:05:36,560
name bio sessions and each session has

00:05:36,000 --> 00:05:40,160
an id

00:05:36,560 --> 00:05:42,000
and title and a feature tag as well

00:05:40,160 --> 00:05:43,680
now remember that you can add as many

00:05:42,000 --> 00:05:45,759
speakers as you want in your mark

00:05:43,680 --> 00:05:46,639
response and we can add as many sessions

00:05:45,759 --> 00:05:48,479
per speaker

00:05:46,639 --> 00:05:50,720
as we'd like so i'm going to keep this

00:05:48,479 --> 00:05:53,840
simple and have just one speaker

00:05:50,720 --> 00:05:56,240
in our array

00:05:53,840 --> 00:05:58,400
now ready to create our first test since

00:05:56,240 --> 00:06:00,319
our marked data is available

00:05:58,400 --> 00:06:01,440
in this test we're going to pass this

00:06:00,319 --> 00:06:04,160
marked data

00:06:01,440 --> 00:06:04,960
and make sure that our react component

00:06:04,160 --> 00:06:08,000
is called

00:06:04,960 --> 00:06:09,520
and returns a response as expected we're

00:06:08,000 --> 00:06:11,360
going to be using the mount

00:06:09,520 --> 00:06:13,919
method that's going to remount a

00:06:11,360 --> 00:06:16,400
component if it's not currently mounted

00:06:13,919 --> 00:06:17,120
and this comes with enzyme and we're

00:06:16,400 --> 00:06:19,840
going to wrap

00:06:17,120 --> 00:06:21,919
our components with the marked provider

00:06:19,840 --> 00:06:24,000
as we talked about earlier

00:06:21,919 --> 00:06:25,440
and the component we're testing is the

00:06:24,000 --> 00:06:28,160
speaker's component

00:06:25,440 --> 00:06:28,479
which in turns calls the speakers list

00:06:28,160 --> 00:06:31,039
and

00:06:28,479 --> 00:06:32,720
calls the graphql query and displays the

00:06:31,039 --> 00:06:35,039
speaker information

00:06:32,720 --> 00:06:37,120
now to our marked provider we have to

00:06:35,039 --> 00:06:39,440
pass a few parameters

00:06:37,120 --> 00:06:42,160
i'm going to pass the parameter add type

00:06:39,440 --> 00:06:44,240
name and set it to false

00:06:42,160 --> 00:06:46,000
by adding the type name we're going to

00:06:44,240 --> 00:06:49,120
prevent apollo client from

00:06:46,000 --> 00:06:51,280
automatically adding a special type name

00:06:49,120 --> 00:06:52,000
field to every object that it queries

00:06:51,280 --> 00:06:54,319
for

00:06:52,000 --> 00:06:55,199
in addition we're also passing the mock

00:06:54,319 --> 00:06:57,840
data

00:06:55,199 --> 00:06:58,639
to the parameter marks once we have this

00:06:57,840 --> 00:07:01,520
set up

00:06:58,639 --> 00:07:02,800
i'm going to introduce a weight by doing

00:07:01,520 --> 00:07:04,319
that we're going to wait for our

00:07:02,800 --> 00:07:06,800
component to update

00:07:04,319 --> 00:07:08,400
and i'm going to call an update function

00:07:06,800 --> 00:07:11,360
on our wrapper

00:07:08,400 --> 00:07:13,199
once that's done our graphql query

00:07:11,360 --> 00:07:15,199
operation is hopefully finished

00:07:13,199 --> 00:07:16,240
and now we can start asserting the

00:07:15,199 --> 00:07:19,520
results

00:07:16,240 --> 00:07:21,919
i'm going to expect some item from our

00:07:19,520 --> 00:07:23,840
response to match what i'm expecting

00:07:21,919 --> 00:07:26,479
so let's say we're going to take the

00:07:23,840 --> 00:07:27,520
panel heading which displays the name of

00:07:26,479 --> 00:07:29,599
the speaker

00:07:27,520 --> 00:07:30,639
so i'm going to find the panel heading

00:07:29,599 --> 00:07:34,160
class name

00:07:30,639 --> 00:07:35,680
to have text speaker aditi ravichandran

00:07:34,160 --> 00:07:38,960
and that's what i've sent

00:07:35,680 --> 00:07:40,479
in my mock response so let's see if that

00:07:38,960 --> 00:07:44,960
works out so let's go ahead

00:07:40,479 --> 00:07:47,520
and run our test

00:07:44,960 --> 00:07:48,720
we have a task called npm test which

00:07:47,520 --> 00:07:50,639
runs for the app

00:07:48,720 --> 00:07:53,039
so it's going to run this test and you

00:07:50,639 --> 00:07:56,160
just see that our test passed

00:07:53,039 --> 00:07:58,400
so our rendering speaker data passed

00:07:56,160 --> 00:08:00,479
you could always add plenty of other

00:07:58,400 --> 00:08:02,560
expectations and assertions here

00:08:00,479 --> 00:08:04,560
to make sure that every field is

00:08:02,560 --> 00:08:07,199
returned as you expected

00:08:04,560 --> 00:08:08,879
so i'm going to add one more maybe to

00:08:07,199 --> 00:08:10,960
check the panel body

00:08:08,879 --> 00:08:12,160
and that's supposed to display the bio

00:08:10,960 --> 00:08:14,800
information

00:08:12,160 --> 00:08:15,440
the bio information that we passed says

00:08:14,800 --> 00:08:19,120
bio

00:08:15,440 --> 00:08:19,680
colon here is my bio let's update our

00:08:19,120 --> 00:08:22,720
test

00:08:19,680 --> 00:08:24,400
and see if that passes and it passed

00:08:22,720 --> 00:08:26,879
again

00:08:24,400 --> 00:08:27,599
this test validates that our speaker's

00:08:26,879 --> 00:08:30,720
component

00:08:27,599 --> 00:08:31,199
that has an apollo query that it uses to

00:08:30,720 --> 00:08:34,479
return

00:08:31,199 --> 00:08:35,519
data does work as expected now there are

00:08:34,479 --> 00:08:38,399
other things we can

00:08:35,519 --> 00:08:40,000
improvise on this test we looked at a

00:08:38,399 --> 00:08:42,640
scenario where the speaker data

00:08:40,000 --> 00:08:43,919
has rendered there are other states like

00:08:42,640 --> 00:08:46,959
loading and error

00:08:43,919 --> 00:08:48,640
that we can test as well before the data

00:08:46,959 --> 00:08:51,279
has been rendered

00:08:48,640 --> 00:08:53,440
the function returns a loading state

00:08:51,279 --> 00:08:55,839
where it displays a message that says

00:08:53,440 --> 00:08:57,279
loading speaker so this might be a good

00:08:55,839 --> 00:08:59,760
time to include that

00:08:57,279 --> 00:09:01,120
as a part of our test to ensure that the

00:08:59,760 --> 00:09:03,600
loading speaker message

00:09:01,120 --> 00:09:05,120
is displayed when the graphql response

00:09:03,600 --> 00:09:08,080
has not come back

00:09:05,120 --> 00:09:09,920
to do that i'm going to remove the async

00:09:08,080 --> 00:09:11,040
awaits that we had earlier

00:09:09,920 --> 00:09:13,440
which means it's going to be a

00:09:11,040 --> 00:09:15,440
synchronous call and it's highly likely

00:09:13,440 --> 00:09:18,399
that the call doesn't complete

00:09:15,440 --> 00:09:19,519
before this test finishes so we're going

00:09:18,399 --> 00:09:22,080
to have

00:09:19,519 --> 00:09:23,600
the call made but it's not asynchronous

00:09:22,080 --> 00:09:26,399
so it's probably going to be in the

00:09:23,600 --> 00:09:28,800
loading state

00:09:26,399 --> 00:09:31,040
i'm going to copy the text that we want

00:09:28,800 --> 00:09:34,839
to assert which is loading speaker

00:09:31,040 --> 00:09:37,839
and i'm going to expect that text to be

00:09:34,839 --> 00:09:37,839
displayed

00:09:40,640 --> 00:09:46,240
all right let's hit save now and see if

00:09:43,200 --> 00:09:46,240
this test passes

00:09:48,560 --> 00:09:52,959
ouch looks like our tests fail but it

00:09:51,200 --> 00:09:55,120
didn't seem like it's failed for a big

00:09:52,959 --> 00:09:56,320
reason there seems to be a typo so i'm

00:09:55,120 --> 00:09:59,360
going to fix that

00:09:56,320 --> 00:10:00,560
and let's try again all right both our

00:09:59,360 --> 00:10:02,560
tests have passed

00:10:00,560 --> 00:10:03,760
one for rendering the speaker data

00:10:02,560 --> 00:10:06,480
another one for

00:10:03,760 --> 00:10:07,200
loading now we can follow the same

00:10:06,480 --> 00:10:09,680
method

00:10:07,200 --> 00:10:10,399
to write a test for error conditions as

00:10:09,680 --> 00:10:12,880
well

00:10:10,399 --> 00:10:14,000
to do that i'm going to create another

00:10:12,880 --> 00:10:16,399
marked

00:10:14,000 --> 00:10:17,040
object this time it's not going to

00:10:16,399 --> 00:10:20,160
return

00:10:17,040 --> 00:10:21,839
a result or response instead it's going

00:10:20,160 --> 00:10:24,720
to throw an error

00:10:21,839 --> 00:10:26,320
all right i've pasted a test for

00:10:24,720 --> 00:10:28,240
rendering with error

00:10:26,320 --> 00:10:30,079
and this time instead of passing the

00:10:28,240 --> 00:10:30,720
mark speaker data we're going to pass

00:10:30,079 --> 00:10:33,120
the mark

00:10:30,720 --> 00:10:34,959
error data that we just created to our

00:10:33,120 --> 00:10:37,120
marked provider

00:10:34,959 --> 00:10:38,720
it needs a quick update to ensure that

00:10:37,120 --> 00:10:39,360
it's pulling in the error data and

00:10:38,720 --> 00:10:42,320
placing it

00:10:39,360 --> 00:10:44,079
as an array of marks let's try running

00:10:42,320 --> 00:10:46,160
our test now

00:10:44,079 --> 00:10:47,200
and there you go all the three tests

00:10:46,160 --> 00:10:49,360
have passed

00:10:47,200 --> 00:10:51,200
and we've validated that from our react

00:10:49,360 --> 00:10:53,200
component we've called the apollo

00:10:51,200 --> 00:10:56,079
clients use query method

00:10:53,200 --> 00:10:57,279
we passed in a marked graphql query with

00:10:56,079 --> 00:10:59,760
responses

00:10:57,279 --> 00:11:00,560
and we validated that our speaker data

00:10:59,760 --> 00:11:02,959
rendered

00:11:00,560 --> 00:11:04,079
along with the loading states and the

00:11:02,959 --> 00:11:06,640
error states

00:11:04,079 --> 00:11:07,760
isn't it pretty neat now we could follow

00:11:06,640 --> 00:11:10,800
the same

00:11:07,760 --> 00:11:12,800
method to also test mutations

00:11:10,800 --> 00:11:16,320
so i can show you an example of how we

00:11:12,800 --> 00:11:16,320
can do that with mutations

00:11:16,800 --> 00:11:20,079
all right we're back to our application

00:11:18,880 --> 00:11:22,959
this time we're going to click

00:11:20,079 --> 00:11:24,720
on view sessions and this is where i

00:11:22,959 --> 00:11:25,680
display all the sessions for the

00:11:24,720 --> 00:11:27,760
conference

00:11:25,680 --> 00:11:28,959
and we're going to look at specifically

00:11:27,760 --> 00:11:32,240
the submitting

00:11:28,959 --> 00:11:34,160
a session clicking on that brings a

00:11:32,240 --> 00:11:35,279
form and this is where we're going to be

00:11:34,160 --> 00:11:38,240
able to submit

00:11:35,279 --> 00:11:40,160
a session to the conference now this is

00:11:38,240 --> 00:11:42,079
a graphql mutation

00:11:40,160 --> 00:11:43,360
and it's going to take in the values

00:11:42,079 --> 00:11:46,079
entered in this form

00:11:43,360 --> 00:11:48,240
and create a graphql mutation call and

00:11:46,079 --> 00:11:50,160
update the graphql server

00:11:48,240 --> 00:11:52,240
so let's take a look at that i'm going

00:11:50,160 --> 00:11:56,480
to say sample session

00:11:52,240 --> 00:12:00,800
blah blah day wednesday

00:11:56,480 --> 00:12:03,760
and level intro now before i hit submit

00:12:00,800 --> 00:12:05,760
i'm gonna inspect and get into the

00:12:03,760 --> 00:12:08,320
network call

00:12:05,760 --> 00:12:08,959
and there you see it we get a message

00:12:08,320 --> 00:12:11,600
that says

00:12:08,959 --> 00:12:12,160
session submitted successfully and you

00:12:11,600 --> 00:12:15,120
should see

00:12:12,160 --> 00:12:17,680
a graphql response here that says create

00:12:15,120 --> 00:12:19,440
session and returns back the data

00:12:17,680 --> 00:12:20,880
which includes the items that we just

00:12:19,440 --> 00:12:22,800
entered into the form

00:12:20,880 --> 00:12:24,079
and if you take a look at the request

00:12:22,800 --> 00:12:27,040
you see that there is a

00:12:24,079 --> 00:12:27,440
mutation that takes in these variables

00:12:27,040 --> 00:12:31,279
here

00:12:27,440 --> 00:12:33,839
day description level and title now

00:12:31,279 --> 00:12:36,000
the next task for us is to write a test

00:12:33,839 --> 00:12:40,880
to validate that this mutation

00:12:36,000 --> 00:12:40,880
occurred successfully let's try that out

00:12:43,519 --> 00:12:46,639
we're back to our ide and you see my

00:12:45,839 --> 00:12:49,600
mutation

00:12:46,639 --> 00:12:50,160
create session and it takes in the

00:12:49,600 --> 00:12:53,040
session

00:12:50,160 --> 00:12:54,560
as the input and returns some data back

00:12:53,040 --> 00:12:57,680
as a response

00:12:54,560 --> 00:13:00,800
now we're in our session form component

00:12:57,680 --> 00:13:02,480
and here i'm using the hook use mutation

00:13:00,800 --> 00:13:04,320
and it takes in the create session

00:13:02,480 --> 00:13:07,440
mutation and

00:13:04,320 --> 00:13:08,320
recall that mutations return a mutate

00:13:07,440 --> 00:13:10,079
function

00:13:08,320 --> 00:13:11,440
and here our mutate function is the

00:13:10,079 --> 00:13:13,680
create function

00:13:11,440 --> 00:13:15,040
which is invoked when our form is

00:13:13,680 --> 00:13:16,959
submitted

00:13:15,040 --> 00:13:21,839
so this is kind of the description of

00:13:16,959 --> 00:13:21,839
our ui and we're ready to test it

00:13:24,000 --> 00:13:28,800
i've created a test file called

00:13:27,160 --> 00:13:31,440
createsession.test

00:13:28,800 --> 00:13:32,720
here you can see that just like the test

00:13:31,440 --> 00:13:35,839
we wrote for the queries

00:13:32,720 --> 00:13:38,079
we have a test which has marked data

00:13:35,839 --> 00:13:40,800
and within our mock data we have the

00:13:38,079 --> 00:13:42,480
request as well as the result

00:13:40,800 --> 00:13:44,480
in the request we give our query

00:13:42,480 --> 00:13:45,040
parameter as a name of the mutation

00:13:44,480 --> 00:13:47,440
which is

00:13:45,040 --> 00:13:49,440
create session and we pass in the

00:13:47,440 --> 00:13:52,240
variables that the mutation needs which

00:13:49,440 --> 00:13:54,399
is the session info

00:13:52,240 --> 00:13:55,600
keep in mind that here sometimes you may

00:13:54,399 --> 00:13:58,720
run into errors

00:13:55,600 --> 00:14:01,440
if you miss fields your mock object

00:13:58,720 --> 00:14:03,040
needs to match exactly what was sent to

00:14:01,440 --> 00:14:04,800
your mutation request

00:14:03,040 --> 00:14:06,160
and the response that comes back from

00:14:04,800 --> 00:14:08,320
your mutation

00:14:06,160 --> 00:14:11,040
so make sure to match the variables and

00:14:08,320 --> 00:14:13,440
the response

00:14:11,040 --> 00:14:14,240
i have our create session test written

00:14:13,440 --> 00:14:16,160
already

00:14:14,240 --> 00:14:17,600
it's very similar to the test we've seen

00:14:16,160 --> 00:14:19,920
before with the queries

00:14:17,600 --> 00:14:22,079
we have the marked provider which wraps

00:14:19,920 --> 00:14:24,880
around the session form

00:14:22,079 --> 00:14:26,399
in this test we also click on the button

00:14:24,880 --> 00:14:28,959
to submit the form

00:14:26,399 --> 00:14:31,040
which triggers the mutation and you can

00:14:28,959 --> 00:14:31,760
notice that our test has passed which

00:14:31,040 --> 00:14:34,320
means

00:14:31,760 --> 00:14:35,360
it validated that the marked data it

00:14:34,320 --> 00:14:37,680
received

00:14:35,360 --> 00:14:41,600
returned the mutation and the response

00:14:37,680 --> 00:14:41,600
back correctly as we expected

00:14:43,199 --> 00:14:47,760
to learn more about testing make sure to

00:14:45,760 --> 00:14:50,800
check out the official document from

00:14:47,760 --> 00:14:52,959
apollo graphql and they have a section

00:14:50,800 --> 00:14:54,639
on testing react components that we just

00:14:52,959 --> 00:14:56,560
covered in this talk

00:14:54,639 --> 00:14:58,079
they also talk about different types of

00:14:56,560 --> 00:15:00,320
errors like graphql

00:14:58,079 --> 00:15:01,519
errors which can be tested as well as

00:15:00,320 --> 00:15:04,800
testing with a

00:15:01,519 --> 00:15:06,480
cache you can also learn other types of

00:15:04,800 --> 00:15:08,639
testing like testing using

00:15:06,480 --> 00:15:09,680
typescript and marking schema

00:15:08,639 --> 00:15:13,839
capabilities

00:15:09,680 --> 00:15:13,839
from this document as well

00:15:14,959 --> 00:15:18,639
and that's a wrap to this talk i hope

00:15:17,279 --> 00:15:20,079
you enjoyed it

00:15:18,639 --> 00:15:22,720
if you'd like to learn more about

00:15:20,079 --> 00:15:24,000
consuming a graphql api with apollo

00:15:22,720 --> 00:15:26,000
client in react

00:15:24,000 --> 00:15:27,920
i have a course on pluralsight which

00:15:26,000 --> 00:15:30,399
i've linked about on the slide

00:15:27,920 --> 00:15:32,320
make sure to check it out i also have

00:15:30,399 --> 00:15:35,199
another course on pluralsight

00:15:32,320 --> 00:15:36,480
called graphql the big picture and this

00:15:35,199 --> 00:15:38,160
course is for someone

00:15:36,480 --> 00:15:40,240
who's interested in learning about

00:15:38,160 --> 00:15:41,680
graphql from scratch

00:15:40,240 --> 00:15:44,639
and learn the differences between

00:15:41,680 --> 00:15:46,480
graphql and rest and why graphql is even

00:15:44,639 --> 00:15:48,720
a good option

00:15:46,480 --> 00:15:49,519
all right i'd like to thank graphql

00:15:48,720 --> 00:15:52,000
summit again

00:15:49,519 --> 00:15:53,279
for having me here to give a short talk

00:15:52,000 --> 00:15:55,360
on testing

00:15:53,279 --> 00:15:56,560
you can reach me at aditi ravi on

00:15:55,360 --> 00:15:58,480
twitter and

00:15:56,560 --> 00:15:59,920
reach out to me for any questions or

00:15:58,480 --> 00:16:02,079
simply say hi

00:15:59,920 --> 00:16:09,839
thank you again and i hope you enjoy the

00:16:02,079 --> 00:16:09,839
rest of the talks

00:16:10,100 --> 00:16:17,610
[Music]

00:16:18,480 --> 00:16:20,560

YouTube URL: https://www.youtube.com/watch?v=gg-H6yY2xw0


