Title: Server Driven UIs on the Web with GraphQL
Publication date: 2021-04-13
Playlist: GraphQL Summit Worldwide - April 2021
Description: 
	In this talk, Faraz will show you how to iterate quickly by using a declarative UI that is infinitely flexible.

Key takeaways:
* How Server Driven UI can help teams ship faster
* Handling experiments with GraphQL
* Responding to Server Driven UI in your apps
Captions: 
	00:00:00,740 --> 00:00:12,970
[Music]

00:00:14,160 --> 00:00:19,279
morning good afternoon good evening

00:00:16,880 --> 00:00:20,160
wherever and whenever you are thanks for

00:00:19,279 --> 00:00:22,560
tuning in

00:00:20,160 --> 00:00:24,560
um it's my first time ever presenting at

00:00:22,560 --> 00:00:28,160
a conference and i'm really

00:00:24,560 --> 00:00:31,840
honored to be doing it at graphql summit

00:00:28,160 --> 00:00:31,840
let's go right into it

00:00:32,880 --> 00:00:36,239
a little bit about me my name is faraz

00:00:35,760 --> 00:00:39,360
and

00:00:36,239 --> 00:00:42,399
i'm based in new york city i work

00:00:39,360 --> 00:00:45,200
at ubereats as a front-end engineer

00:00:42,399 --> 00:00:46,960
where i work primarily with react and

00:00:45,200 --> 00:00:48,960
graphql

00:00:46,960 --> 00:00:50,160
um on nice and weekends i'm working on

00:00:48,960 --> 00:00:52,000
retro.app

00:00:50,160 --> 00:00:53,840
which is online tool that makes your

00:00:52,000 --> 00:00:55,760
meetings fun focused and productive so

00:00:53,840 --> 00:00:57,680
if you could check that out

00:00:55,760 --> 00:00:59,600
uh i'm a lot i spent a lot of time on

00:00:57,680 --> 00:01:00,719
twitter uh you can catch me at faraz

00:00:59,600 --> 00:01:02,399
amir dean

00:01:00,719 --> 00:01:05,760
and when i'm not doing this i'm either

00:01:02,399 --> 00:01:05,760
playing or watching basketball

00:01:07,200 --> 00:01:10,560
today's agenda we'll start with a little

00:01:09,920 --> 00:01:12,880
bit

00:01:10,560 --> 00:01:14,240
of history talking about how apps have

00:01:12,880 --> 00:01:16,320
changed over time

00:01:14,240 --> 00:01:17,840
i'll show you a ui example of what we're

00:01:16,320 --> 00:01:19,920
trying to accomplish

00:01:17,840 --> 00:01:21,920
and then i'll go into what server driven

00:01:19,920 --> 00:01:24,880
ui is and why it might be helpful

00:01:21,920 --> 00:01:26,320
to you i'll close off with some examples

00:01:24,880 --> 00:01:28,799
and leave you with some challenges that

00:01:26,320 --> 00:01:28,799
i faced

00:01:31,200 --> 00:01:38,000
so apps have come a long way

00:01:35,280 --> 00:01:38,799
they have gone gotten a lot more

00:01:38,000 --> 00:01:40,240
personalized

00:01:38,799 --> 00:01:41,920
and there's a lot more data and we're

00:01:40,240 --> 00:01:43,360
constantly experimenting with different

00:01:41,920 --> 00:01:46,880
things

00:01:43,360 --> 00:01:46,880
so this can be challenging

00:01:47,280 --> 00:01:54,320
and let's start with an example of

00:01:50,479 --> 00:01:56,560
a ui that we want to render so

00:01:54,320 --> 00:01:58,640
in the past we've gone from rest to

00:01:56,560 --> 00:02:00,399
graphql

00:01:58,640 --> 00:02:01,920
so let's take a look back at how we

00:02:00,399 --> 00:02:04,960
might render this ui

00:02:01,920 --> 00:02:04,960
with the rest api

00:02:07,040 --> 00:02:10,319
uh traditionally you see here you have

00:02:08,879 --> 00:02:13,920
this rest api

00:02:10,319 --> 00:02:14,640
and it has a response um with some data

00:02:13,920 --> 00:02:17,280
just about

00:02:14,640 --> 00:02:19,520
that store the images the latitude

00:02:17,280 --> 00:02:21,680
longitude the date the name

00:02:19,520 --> 00:02:22,720
and probably a lot more data because

00:02:21,680 --> 00:02:25,920
you're just fetching

00:02:22,720 --> 00:02:27,520
a resource from the back end um and so

00:02:25,920 --> 00:02:30,879
that's kind of a challenge with rest

00:02:27,520 --> 00:02:32,560
and you're over fetching typically

00:02:30,879 --> 00:02:33,920
you're requesting a resource and you're

00:02:32,560 --> 00:02:35,200
going to get all the data back about

00:02:33,920 --> 00:02:37,360
that resource

00:02:35,200 --> 00:02:38,800
it's not very declarative so you get the

00:02:37,360 --> 00:02:40,879
data back and you still have to figure

00:02:38,800 --> 00:02:43,680
out where it goes on the client

00:02:40,879 --> 00:02:46,400
and this causes a lot of logic to be

00:02:43,680 --> 00:02:50,000
living on the client

00:02:46,400 --> 00:02:52,080
so what about graphql

00:02:50,000 --> 00:02:53,120
right we're at a graphql conference so

00:02:52,080 --> 00:02:54,640
graphql is better

00:02:53,120 --> 00:02:56,480
right it's a little bit more declarative

00:02:54,640 --> 00:02:58,159
you can ask for what you want so if you

00:02:56,480 --> 00:03:01,440
look here in this example

00:02:58,159 --> 00:03:03,280
you have a carousel the title

00:03:01,440 --> 00:03:05,120
and the actions and all of the data

00:03:03,280 --> 00:03:07,760
related to each of these components

00:03:05,120 --> 00:03:09,440
is co-located with that so now you're

00:03:07,760 --> 00:03:13,680
getting a little bit more declarative

00:03:09,440 --> 00:03:16,560
uh this is better right

00:03:13,680 --> 00:03:19,840
uh like i mentioned it's declaratively

00:03:16,560 --> 00:03:23,040
querying for the elements that you need

00:03:19,840 --> 00:03:23,440
but we still have this kind of issue

00:03:23,040 --> 00:03:25,360
where

00:03:23,440 --> 00:03:29,040
the client controls a lot of logic so

00:03:25,360 --> 00:03:31,360
the client is declaring what it wants

00:03:29,040 --> 00:03:33,120
which is fine for most use cases but in

00:03:31,360 --> 00:03:36,319
some cases

00:03:33,120 --> 00:03:37,440
you might not want that and

00:03:36,319 --> 00:03:41,360
that's where you could use something

00:03:37,440 --> 00:03:41,360
like server driven ui with graphql

00:03:42,000 --> 00:03:45,440
so what does that mean really what does

00:03:43,440 --> 00:03:48,560
that even mean

00:03:45,440 --> 00:03:49,920
um so before we get into that let's talk

00:03:48,560 --> 00:03:52,560
about

00:03:49,920 --> 00:03:52,959
why you might want to use this um like i

00:03:52,560 --> 00:03:55,040
mentioned

00:03:52,959 --> 00:03:56,720
apps today are filled with tons of

00:03:55,040 --> 00:03:57,680
experiments you're constantly a b

00:03:56,720 --> 00:04:00,480
testing

00:03:57,680 --> 00:04:00,959
feature flagging maybe different regions

00:04:00,480 --> 00:04:02,560
have

00:04:00,959 --> 00:04:04,480
different requirements so you can hide

00:04:02,560 --> 00:04:06,159
and show different elements

00:04:04,480 --> 00:04:07,680
and maybe design wants to like play with

00:04:06,159 --> 00:04:10,720
different layouts

00:04:07,680 --> 00:04:11,120
so this is not trivial to do especially

00:04:10,720 --> 00:04:14,400
with

00:04:11,120 --> 00:04:15,920
a graphql type of api

00:04:14,400 --> 00:04:17,440
you are declaratively saying this is

00:04:15,920 --> 00:04:19,280
what the page looks like and this is the

00:04:17,440 --> 00:04:21,040
data that i need

00:04:19,280 --> 00:04:23,759
you might have a lot of engineers

00:04:21,040 --> 00:04:28,000
working on your products or platforms

00:04:23,759 --> 00:04:30,800
and you weren't constantly testing

00:04:28,000 --> 00:04:32,320
different variations and layouts um but

00:04:30,800 --> 00:04:33,600
you want to do it fast right you want to

00:04:32,320 --> 00:04:35,600
get things out quickly you want to ship

00:04:33,600 --> 00:04:38,240
to production quickly get feedback build

00:04:35,600 --> 00:04:38,240
test learn

00:04:39,440 --> 00:04:44,479
so like how do we get there what is

00:04:42,639 --> 00:04:46,400
the end goal and what are some of the

00:04:44,479 --> 00:04:49,680
problems that we want to try to solve

00:04:46,400 --> 00:04:51,120
uh we want to maybe try to provide

00:04:49,680 --> 00:04:54,160
different layouts based on

00:04:51,120 --> 00:04:54,639
server configuration uh we want to keep

00:04:54,160 --> 00:04:56,479
our

00:04:54,639 --> 00:04:58,240
client really thin so it doesn't have to

00:04:56,479 --> 00:04:59,360
do too much logic to figure out what to

00:04:58,240 --> 00:05:01,919
display

00:04:59,360 --> 00:05:04,240
and it would be nice if it was strongly

00:05:01,919 --> 00:05:04,240
typed

00:05:07,360 --> 00:05:14,240
so this brings us to server driven ui

00:05:11,120 --> 00:05:16,400
so what does this mean here's an example

00:05:14,240 --> 00:05:19,360
api response

00:05:16,400 --> 00:05:21,520
basically you make a query to get layout

00:05:19,360 --> 00:05:23,840
and it's going to return you the page

00:05:21,520 --> 00:05:25,759
and the platform that you're on and the

00:05:23,840 --> 00:05:28,080
interesting part here is going to show

00:05:25,759 --> 00:05:29,199
the list of components that you should

00:05:28,080 --> 00:05:31,280
render on this page

00:05:29,199 --> 00:05:32,240
in the order with their corresponding

00:05:31,280 --> 00:05:36,000
props

00:05:32,240 --> 00:05:36,000
so what you get now is

00:05:36,080 --> 00:05:40,479
an entire layout driven from the graphql

00:05:39,360 --> 00:05:42,160
server

00:05:40,479 --> 00:05:43,919
and it'll tell you that you want to

00:05:42,160 --> 00:05:45,039
render carousel the title the action in

00:05:43,919 --> 00:05:48,240
the map and that will

00:05:45,039 --> 00:05:49,759
build your ui um

00:05:48,240 --> 00:05:52,320
it's a little far out there so i'm going

00:05:49,759 --> 00:05:54,479
to leave this up for a second

00:05:52,320 --> 00:05:58,800
but i think this is a really really cool

00:05:54,479 --> 00:05:58,800
and powerful approach for some use cases

00:05:59,919 --> 00:06:03,520
how does that work right like what does

00:06:01,680 --> 00:06:05,520
that mean and how does it work

00:06:03,520 --> 00:06:06,880
so what you're going to do is you're

00:06:05,520 --> 00:06:08,400
going to have a graphql query that's

00:06:06,880 --> 00:06:12,080
going to request a layout

00:06:08,400 --> 00:06:13,120
for a specific page and that resolver is

00:06:12,080 --> 00:06:15,039
going to

00:06:13,120 --> 00:06:16,160
send back and the client is going to

00:06:15,039 --> 00:06:20,400
receive

00:06:16,160 --> 00:06:23,919
uh some components so you

00:06:20,400 --> 00:06:26,080
see here that graphql is now driving

00:06:23,919 --> 00:06:27,680
um and the server is now driving the

00:06:26,080 --> 00:06:30,639
layout and the components what should be

00:06:27,680 --> 00:06:30,639
rendered on that page

00:06:31,199 --> 00:06:35,840
and i wanted to pause there to say

00:06:34,240 --> 00:06:37,520
that this isn't a silver bullet just

00:06:35,840 --> 00:06:39,199
because we can do this doesn't mean that

00:06:37,520 --> 00:06:40,560
you should do it everywhere

00:06:39,199 --> 00:06:42,000
there's some use cases where this makes

00:06:40,560 --> 00:06:43,840
sense and there's probably some uses

00:06:42,000 --> 00:06:47,039
where it doesn't make sense so

00:06:43,840 --> 00:06:47,039
take this with a grain of salt

00:06:47,600 --> 00:06:51,199
um so what does this look like behind

00:06:49,199 --> 00:06:53,759
the scenes right

00:06:51,199 --> 00:06:55,039
um this is kind of what i imagine the

00:06:53,759 --> 00:06:55,919
schema to look like and what i've played

00:06:55,039 --> 00:06:58,080
around with

00:06:55,919 --> 00:06:59,280
you have a type layout and like we

00:06:58,080 --> 00:07:00,400
mentioned our resolver is going to

00:06:59,280 --> 00:07:02,720
return that layout

00:07:00,400 --> 00:07:04,080
it's going to return the page type and

00:07:02,720 --> 00:07:06,479
the platform type you might have

00:07:04,080 --> 00:07:07,919
different platforms

00:07:06,479 --> 00:07:09,919
and you're going to have a list of

00:07:07,919 --> 00:07:12,160
components so

00:07:09,919 --> 00:07:14,720
the component interface is going to have

00:07:12,160 --> 00:07:17,039
to return the type of component

00:07:14,720 --> 00:07:18,560
this is an enum typically where you

00:07:17,039 --> 00:07:19,280
define all the components that are

00:07:18,560 --> 00:07:20,400
possible

00:07:19,280 --> 00:07:23,039
to be rendered on your different

00:07:20,400 --> 00:07:24,400
platforms uh

00:07:23,039 --> 00:07:26,400
and then for each component you're gonna

00:07:24,400 --> 00:07:27,440
implement a type so you'll say what kind

00:07:26,400 --> 00:07:29,520
of type it is

00:07:27,440 --> 00:07:30,560
and you're gonna declare what the props

00:07:29,520 --> 00:07:33,520
are

00:07:30,560 --> 00:07:34,080
and this is how you get this resulting

00:07:33,520 --> 00:07:36,720
result

00:07:34,080 --> 00:07:37,360
from the response from the query is

00:07:36,720 --> 00:07:39,280
you'll have

00:07:37,360 --> 00:07:42,840
the page the platform and the list of

00:07:39,280 --> 00:07:45,759
components with their corresponding

00:07:42,840 --> 00:07:48,160
props

00:07:45,759 --> 00:07:49,599
let's go into some more examples of some

00:07:48,160 --> 00:07:52,800
different use cases that

00:07:49,599 --> 00:07:52,800
you might want to use this for

00:07:54,720 --> 00:07:59,360
so once we get that response

00:07:57,759 --> 00:08:01,759
we still have to map it to the

00:07:59,360 --> 00:08:05,120
components on the front on the front end

00:08:01,759 --> 00:08:06,479
um so how do we do that in javascript

00:08:05,120 --> 00:08:08,560
actually this is

00:08:06,479 --> 00:08:09,680
pretty simple you're going to have a map

00:08:08,560 --> 00:08:11,199
um with

00:08:09,680 --> 00:08:14,160
key names and those key names will

00:08:11,199 --> 00:08:16,720
correspond to a specific react component

00:08:14,160 --> 00:08:18,319
you can build like a pretty simple

00:08:16,720 --> 00:08:20,000
function that just takes in the layout

00:08:18,319 --> 00:08:23,039
and you'll just map over

00:08:20,000 --> 00:08:23,759
each component you'll get the props and

00:08:23,039 --> 00:08:26,800
the type

00:08:23,759 --> 00:08:27,599
and you'll return that component so this

00:08:26,800 --> 00:08:28,960
is like

00:08:27,599 --> 00:08:31,759
you know pretty straightforward i would

00:08:28,960 --> 00:08:33,519
say one thing you might notice is you

00:08:31,759 --> 00:08:35,039
might want to have some sort of invalid

00:08:33,519 --> 00:08:37,839
component on the client

00:08:35,039 --> 00:08:40,399
so just in case you query for a

00:08:37,839 --> 00:08:41,680
component that doesn't exist

00:08:40,399 --> 00:08:43,760
you want to display something to the

00:08:41,680 --> 00:08:45,120
developer

00:08:43,760 --> 00:08:48,160
and you'll see on the right side we get

00:08:45,120 --> 00:08:50,080
this resulting ui we get the

00:08:48,160 --> 00:08:52,080
carousel and then we get the title

00:08:50,080 --> 00:08:52,560
section and we get the action section

00:08:52,080 --> 00:08:55,440
with

00:08:52,560 --> 00:08:58,160
the correct icons and this is all driven

00:08:55,440 --> 00:08:58,160
from the server

00:08:59,120 --> 00:09:02,480
here's another example of removing a

00:09:01,600 --> 00:09:05,600
component

00:09:02,480 --> 00:09:06,399
so your query is going to basically stay

00:09:05,600 --> 00:09:08,880
the same

00:09:06,399 --> 00:09:09,600
you're always going to query the layout

00:09:08,880 --> 00:09:12,240
you're going to

00:09:09,600 --> 00:09:13,040
specify what page you're on and you're

00:09:12,240 --> 00:09:16,000
going to

00:09:13,040 --> 00:09:17,120
specify the platform that you're on um

00:09:16,000 --> 00:09:18,720
and then you'll return

00:09:17,120 --> 00:09:21,040
a list of components with their type and

00:09:18,720 --> 00:09:22,399
props

00:09:21,040 --> 00:09:24,880
the response you're going to get back

00:09:22,399 --> 00:09:25,440
this time is only the carousel in the

00:09:24,880 --> 00:09:27,680
title

00:09:25,440 --> 00:09:28,560
because the server has decided that hey

00:09:27,680 --> 00:09:30,000
for this

00:09:28,560 --> 00:09:31,839
particular user we're not going to

00:09:30,000 --> 00:09:32,880
render the actions so this is all that i

00:09:31,839 --> 00:09:35,040
want you to render

00:09:32,880 --> 00:09:36,000
so the ui doesn't have to change all the

00:09:35,040 --> 00:09:39,279
changes are happening

00:09:36,000 --> 00:09:41,519
on the server side and

00:09:39,279 --> 00:09:42,399
it's pretty flexible right so you can

00:09:41,519 --> 00:09:44,959
have different

00:09:42,399 --> 00:09:48,080
ui layouts on different devices or

00:09:44,959 --> 00:09:48,080
different regions whatever

00:09:49,760 --> 00:09:54,640
here's another example of experimenting

00:09:52,320 --> 00:09:56,800
with the order maybe design wants to try

00:09:54,640 --> 00:09:57,920
putting the header at the top before the

00:09:56,800 --> 00:10:00,959
carousel

00:09:57,920 --> 00:10:03,279
so in our control um or

00:10:00,959 --> 00:10:05,360
the original design we had the carousel

00:10:03,279 --> 00:10:07,760
first the title and then the action

00:10:05,360 --> 00:10:09,440
and you can see in this experiment group

00:10:07,760 --> 00:10:12,000
we have the title first

00:10:09,440 --> 00:10:13,440
and then the carousel so you don't have

00:10:12,000 --> 00:10:14,720
to do anything on the client you

00:10:13,440 --> 00:10:18,399
wouldn't have to reorder

00:10:14,720 --> 00:10:19,120
the components in your page you could

00:10:18,399 --> 00:10:20,880
just

00:10:19,120 --> 00:10:22,320
make the same query and then based on

00:10:20,880 --> 00:10:23,279
some configuration the server is going

00:10:22,320 --> 00:10:25,839
to reply

00:10:23,279 --> 00:10:27,279
with the new order of the components and

00:10:25,839 --> 00:10:28,079
you can see on the far right we got the

00:10:27,279 --> 00:10:30,839
title

00:10:28,079 --> 00:10:33,839
we got the carousel and then we got the

00:10:30,839 --> 00:10:33,839
actions

00:10:36,000 --> 00:10:39,760
so what are some challenges with this

00:10:37,440 --> 00:10:41,120
approach like i mentioned it's not a

00:10:39,760 --> 00:10:43,519
silver bullet

00:10:41,120 --> 00:10:45,360
just because we can do this doesn't mean

00:10:43,519 --> 00:10:48,160
you should be using in all situations

00:10:45,360 --> 00:10:50,240
that being said i think it could provide

00:10:48,160 --> 00:10:54,480
really powerful

00:10:50,240 --> 00:10:56,720
experience for certain pages

00:10:54,480 --> 00:10:58,399
a question that i had is how deep in the

00:10:56,720 --> 00:10:59,440
tree do you go and by the tree i mean

00:10:58,399 --> 00:11:01,279
the component tree

00:10:59,440 --> 00:11:03,120
you could imagine components are nested

00:11:01,279 --> 00:11:06,079
within components

00:11:03,120 --> 00:11:07,920
so how far do you want to let your

00:11:06,079 --> 00:11:09,680
server driven ui declare that

00:11:07,920 --> 00:11:11,040
and how much of that just belongs on the

00:11:09,680 --> 00:11:11,839
server and how much of that belongs on

00:11:11,040 --> 00:11:14,079
the client

00:11:11,839 --> 00:11:14,959
still a gray line because this is not

00:11:14,079 --> 00:11:17,680
like a typical

00:11:14,959 --> 00:11:18,720
graphql use case um graphql you

00:11:17,680 --> 00:11:20,720
typically say

00:11:18,720 --> 00:11:22,320
i know what the client is and this is

00:11:20,720 --> 00:11:23,120
the data that i need so please give me

00:11:22,320 --> 00:11:26,240
that data

00:11:23,120 --> 00:11:27,839
this is saying um here's a page

00:11:26,240 --> 00:11:30,000
you tell me what to render and what to

00:11:27,839 --> 00:11:31,680
render it with um

00:11:30,000 --> 00:11:33,360
i haven't found too much on the web

00:11:31,680 --> 00:11:35,839
about this yet

00:11:33,360 --> 00:11:38,240
and we'll see maybe after this someone

00:11:35,839 --> 00:11:41,120
will run with it and

00:11:38,240 --> 00:11:42,079
come up with a better idea and i just

00:11:41,120 --> 00:11:43,600
put a question about

00:11:42,079 --> 00:11:45,440
performance because i didn't do any

00:11:43,600 --> 00:11:46,720
testing around performance but

00:11:45,440 --> 00:11:48,160
be curious to see if there is a

00:11:46,720 --> 00:11:50,399
performance hit for doing something like

00:11:48,160 --> 00:11:50,399
this

00:11:53,440 --> 00:11:57,680
that's it thanks for coming to my really

00:11:55,279 --> 00:11:58,399
short talk uh i wanted to give a special

00:11:57,680 --> 00:12:01,600
thanks to

00:11:58,399 --> 00:12:04,800
startup art club who helped me design

00:12:01,600 --> 00:12:06,160
these slides and retro so go check them

00:12:04,800 --> 00:12:07,839
out they're really cool

00:12:06,160 --> 00:12:09,519
and all of my friends who have been

00:12:07,839 --> 00:12:11,839
supporting me and

00:12:09,519 --> 00:12:13,440
pushed me to do this i'm really grateful

00:12:11,839 --> 00:12:14,720
if you want to stay in touch please do

00:12:13,440 --> 00:12:18,160
follow me on

00:12:14,720 --> 00:12:20,959
twitter at ferrazamir dean and

00:12:18,160 --> 00:12:25,839
if you get a chance go check out retro

00:12:20,959 --> 00:12:25,839
see ya

00:12:27,220 --> 00:12:34,730
[Music]

00:12:35,600 --> 00:12:37,680

YouTube URL: https://www.youtube.com/watch?v=LWH5xZlzh80


