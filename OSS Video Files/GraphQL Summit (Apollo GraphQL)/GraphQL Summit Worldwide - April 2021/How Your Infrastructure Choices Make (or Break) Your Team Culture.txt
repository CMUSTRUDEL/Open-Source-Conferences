Title: How Your Infrastructure Choices Make (or Break) Your Team Culture
Publication date: 2021-04-13
Playlist: GraphQL Summit Worldwide - April 2021
Description: 
	Healthy teams are high performers. Organizations that focus on team health gain a significant advantage in the market. But did you know the way that we build our applications has a significant impact on team culture? 

In this talk, learn how your architecture can improve — or damage — your team's health.

Key takeaways:
* How systems can become fragile, making it hard to ship
* How complexity leads to a snowball of slowness
* How decoupled systems speed up companies
* The culture of shipping checklist

Resources:
Learn more about Summit - https://summit.graphql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Captions: 
	00:00:00,210 --> 00:00:15,519
[Music]

00:00:14,400 --> 00:00:18,000
what's up y'all

00:00:15,519 --> 00:00:19,359
today i want to talk to you about how

00:00:18,000 --> 00:00:21,680
your code

00:00:19,359 --> 00:00:23,680
influences the culture at work

00:00:21,680 --> 00:00:26,560
specifically i want to talk about

00:00:23,680 --> 00:00:27,359
how the way you architect things can

00:00:26,560 --> 00:00:29,920
influence

00:00:27,359 --> 00:00:32,480
the speed and effectiveness of your

00:00:29,920 --> 00:00:34,559
team's ability to get things shipped

00:00:32,480 --> 00:00:36,320
my name is jason lanksdorf i am the vp

00:00:34,559 --> 00:00:38,160
of developer experience at nullify and

00:00:36,320 --> 00:00:39,520
i'm super excited to talk to you today

00:00:38,160 --> 00:00:41,040
this is something that's near and dear

00:00:39,520 --> 00:00:41,920
to my heart and something i've been

00:00:41,040 --> 00:00:44,079
working on

00:00:41,920 --> 00:00:46,079
for a long time before netlify i was at

00:00:44,079 --> 00:00:47,440
ibm as a front-end architect and i'm

00:00:46,079 --> 00:00:48,160
really excited to share what i've

00:00:47,440 --> 00:00:51,440
learned and how

00:00:48,160 --> 00:00:52,480
it might be able to help you so any

00:00:51,440 --> 00:00:55,360
company i think

00:00:52,480 --> 00:00:56,640
is going to be operating from one core

00:00:55,360 --> 00:00:59,280
concept which is

00:00:56,640 --> 00:01:00,000
we want to ship things to our customers

00:00:59,280 --> 00:01:02,559
to provide

00:01:00,000 --> 00:01:04,479
value to them we have a product the way

00:01:02,559 --> 00:01:06,000
that our customers benefit from our

00:01:04,479 --> 00:01:08,159
product is by us

00:01:06,000 --> 00:01:09,680
listening to their needs and building

00:01:08,159 --> 00:01:11,280
things for them things that they need

00:01:09,680 --> 00:01:14,000
things that they want to use that

00:01:11,280 --> 00:01:14,560
make them want to pay for our service

00:01:14,000 --> 00:01:18,240
right that's

00:01:14,560 --> 00:01:19,759
why we exist so teams want to ship

00:01:18,240 --> 00:01:21,360
there's nothing about shipping that

00:01:19,759 --> 00:01:24,400
doesn't feel good we love

00:01:21,360 --> 00:01:26,560
seeing things go out to our customers

00:01:24,400 --> 00:01:28,880
we love seeing people enjoy the software

00:01:26,560 --> 00:01:31,439
that we ship

00:01:28,880 --> 00:01:32,320
but i don't always see that behavior i

00:01:31,439 --> 00:01:35,680
don't always see

00:01:32,320 --> 00:01:38,159
teams shipping consistently so what's

00:01:35,680 --> 00:01:40,079
stopping teams and i i don't think that

00:01:38,159 --> 00:01:41,680
it's fair to say that teams don't

00:01:40,079 --> 00:01:43,119
like shipping i don't think that there's

00:01:41,680 --> 00:01:45,360
a team that's digging its heels and

00:01:43,119 --> 00:01:46,240
saying no we're not gonna ship i think

00:01:45,360 --> 00:01:48,000
instead

00:01:46,240 --> 00:01:49,520
there are some underlying causes here

00:01:48,000 --> 00:01:53,200
and i think that a lot of it

00:01:49,520 --> 00:01:56,399
is that the way we build our systems

00:01:53,200 --> 00:01:57,680
becomes frustrating it becomes fragile

00:01:56,399 --> 00:02:00,399
it becomes slow

00:01:57,680 --> 00:02:02,399
and that becomes infuriating and it

00:02:00,399 --> 00:02:06,079
makes it hard for teams

00:02:02,399 --> 00:02:07,280
to ship and that leads to slowdowns and

00:02:06,079 --> 00:02:09,599
reluctance and

00:02:07,280 --> 00:02:11,280
and a lot of other problems now your

00:02:09,599 --> 00:02:12,720
infrastructure is not going to control

00:02:11,280 --> 00:02:14,400
all the parts of your team there's a

00:02:12,720 --> 00:02:15,120
whole lot of stuff like psychological

00:02:14,400 --> 00:02:17,840
safety

00:02:15,120 --> 00:02:19,360
and trust and a lot of interpersonal

00:02:17,840 --> 00:02:20,480
things that are important

00:02:19,360 --> 00:02:21,840
your infrastructure is not going to

00:02:20,480 --> 00:02:23,200
affect that you have to build that at

00:02:21,840 --> 00:02:25,440
the cultural level

00:02:23,200 --> 00:02:26,800
but i will say i do think building this

00:02:25,440 --> 00:02:28,879
type of architecture

00:02:26,800 --> 00:02:30,640
can positively influence that

00:02:28,879 --> 00:02:33,040
psychological safety and trust

00:02:30,640 --> 00:02:35,040
on teams and that's a really good thing

00:02:33,040 --> 00:02:36,879
if your teams find your infrastructure

00:02:35,040 --> 00:02:38,800
and processes frustrating how many

00:02:36,879 --> 00:02:39,519
gatekeepers are between them and getting

00:02:38,800 --> 00:02:41,280
live

00:02:39,519 --> 00:02:42,720
it can really cause them to drag their

00:02:41,280 --> 00:02:44,480
feet if you don't feel like you're in

00:02:42,720 --> 00:02:46,560
control you have to go through

00:02:44,480 --> 00:02:48,160
the dev environment to the staging

00:02:46,560 --> 00:02:50,000
environment to the test environment to

00:02:48,160 --> 00:02:50,800
the qa environment and then finally you

00:02:50,000 --> 00:02:52,560
can go to prod

00:02:50,800 --> 00:02:54,000
and you don't control anything beyond

00:02:52,560 --> 00:02:56,160
dev that can be

00:02:54,000 --> 00:02:58,720
really really frustrating right if you

00:02:56,160 --> 00:02:59,680
have to ask permission every single step

00:02:58,720 --> 00:03:01,920
of the way

00:02:59,680 --> 00:03:03,200
if your processes are fragile if it

00:03:01,920 --> 00:03:05,280
feels like i

00:03:03,200 --> 00:03:06,959
do my work and get everything built and

00:03:05,280 --> 00:03:08,879
then i get it into the process and it

00:03:06,959 --> 00:03:10,080
gets halfway through and then a flaky

00:03:08,879 --> 00:03:11,920
end-to-end test

00:03:10,080 --> 00:03:13,840
causes it to get sent back to me even

00:03:11,920 --> 00:03:16,319
though the code wasn't actually broken

00:03:13,840 --> 00:03:18,400
or worse i am shipping code and the

00:03:16,319 --> 00:03:20,239
thing that i shipped ends up breaking

00:03:18,400 --> 00:03:21,840
code that was completely unrelated to

00:03:20,239 --> 00:03:24,480
the stuff that i was writing

00:03:21,840 --> 00:03:24,879
that starts to make me feel skittish

00:03:24,480 --> 00:03:26,799
about

00:03:24,879 --> 00:03:28,400
shipping and it makes me reluctant to

00:03:26,799 --> 00:03:31,760
put that thing out there

00:03:28,400 --> 00:03:32,000
if it's slow if it takes weeks for me to

00:03:31,760 --> 00:03:34,319
get

00:03:32,000 --> 00:03:36,640
into production all of those things can

00:03:34,319 --> 00:03:40,400
be extremely demotivating as a developer

00:03:36,640 --> 00:03:41,440
i want a chance to really get things out

00:03:40,400 --> 00:03:43,760
there quickly

00:03:41,440 --> 00:03:45,680
and these symptoms don't go unnoticed on

00:03:43,760 --> 00:03:46,000
teams like you can feel these at every

00:03:45,680 --> 00:03:48,080
level

00:03:46,000 --> 00:03:50,560
if your teams are finding things

00:03:48,080 --> 00:03:52,239
frustrating fragile and slow

00:03:50,560 --> 00:03:53,680
to be honest you may have already seen

00:03:52,239 --> 00:03:54,959
him talking about it in your slack chat

00:03:53,680 --> 00:03:55,599
although they will probably use the

00:03:54,959 --> 00:03:58,239
acronym

00:03:55,599 --> 00:03:58,239
in that case

00:03:58,720 --> 00:04:02,159
at the root of all of this is something

00:04:00,640 --> 00:04:04,080
that i've started saying a lot

00:04:02,159 --> 00:04:05,439
and if you've if you've seen me anywhere

00:04:04,080 --> 00:04:07,040
else you'll probably see me waving my

00:04:05,439 --> 00:04:07,680
arms and saying complexity is a code

00:04:07,040 --> 00:04:10,480
smell

00:04:07,680 --> 00:04:11,280
and what i mean by that isn't that you

00:04:10,480 --> 00:04:13,120
can't ship

00:04:11,280 --> 00:04:15,280
anything complex complexity is

00:04:13,120 --> 00:04:16,320
unavoidable even at the smallest size of

00:04:15,280 --> 00:04:20,160
company you're going to have

00:04:16,320 --> 00:04:22,560
some measure of complexity however

00:04:20,160 --> 00:04:23,919
we should look at adding complexity with

00:04:22,560 --> 00:04:26,320
the same kind of

00:04:23,919 --> 00:04:27,440
skepticism and measuring of trade-offs

00:04:26,320 --> 00:04:29,440
that we would look at

00:04:27,440 --> 00:04:30,479
to adding a layer to the org chart

00:04:29,440 --> 00:04:34,080
because it has a

00:04:30,479 --> 00:04:34,400
similarly potentially devastating effect

00:04:34,080 --> 00:04:36,880
on

00:04:34,400 --> 00:04:38,800
productivity we have to be really

00:04:36,880 --> 00:04:39,680
deliberate about where complexity is

00:04:38,800 --> 00:04:42,639
required

00:04:39,680 --> 00:04:44,960
versus where it's kind of adding unseen

00:04:42,639 --> 00:04:47,520
risks and potential slowdowns

00:04:44,960 --> 00:04:48,479
because complexity will slow down

00:04:47,520 --> 00:04:50,560
developers

00:04:48,479 --> 00:04:52,240
and developers specifically are going to

00:04:50,560 --> 00:04:55,040
look at this in the sense of

00:04:52,240 --> 00:04:56,080
i am trying to get something done but i

00:04:55,040 --> 00:04:59,199
don't really know

00:04:56,080 --> 00:05:00,160
the full scope of this code there's too

00:04:59,199 --> 00:05:02,320
much of it it's a

00:05:00,160 --> 00:05:03,840
it's tens of thousands or hundreds of

00:05:02,320 --> 00:05:04,400
thousands of lines of code i didn't

00:05:03,840 --> 00:05:06,160
write

00:05:04,400 --> 00:05:07,840
the vast majority of it i don't even

00:05:06,160 --> 00:05:09,840
really control a bunch of

00:05:07,840 --> 00:05:11,440
pieces of it so i don't actually know

00:05:09,840 --> 00:05:12,240
what everything does and when i make

00:05:11,440 --> 00:05:14,479
changes

00:05:12,240 --> 00:05:16,160
there's a chance that there will be

00:05:14,479 --> 00:05:17,759
unexpected side effects

00:05:16,160 --> 00:05:19,440
and because of those unexpected side

00:05:17,759 --> 00:05:20,639
effects i get kind of skittish about

00:05:19,440 --> 00:05:22,080
starting to begin with

00:05:20,639 --> 00:05:24,800
right that's a challenge and it's it's

00:05:22,080 --> 00:05:25,600
very hard but it's also a slowdown for

00:05:24,800 --> 00:05:28,080
teams

00:05:25,600 --> 00:05:28,880
because complexity creates these silos

00:05:28,080 --> 00:05:31,360
how many people

00:05:28,880 --> 00:05:33,120
really understand the entire system are

00:05:31,360 --> 00:05:35,520
there people on the team who are just

00:05:33,120 --> 00:05:36,800
unable to take a vacation because if

00:05:35,520 --> 00:05:38,639
they do

00:05:36,800 --> 00:05:40,080
there's nobody who understands how

00:05:38,639 --> 00:05:42,800
critical systems work

00:05:40,080 --> 00:05:44,720
on staff um i've worked with people like

00:05:42,800 --> 00:05:46,240
that who tried to take vacations

00:05:44,720 --> 00:05:48,240
and they were just on pager duty they

00:05:46,240 --> 00:05:49,600
get paged at 5am because they were the

00:05:48,240 --> 00:05:50,560
only person who got all this stuff

00:05:49,600 --> 00:05:53,440
worked

00:05:50,560 --> 00:05:55,440
and all of that balls up to complex

00:05:53,440 --> 00:05:58,160
systems slowing down companies

00:05:55,440 --> 00:05:58,479
bureaucracy is a result of complexity we

00:05:58,160 --> 00:06:00,240
have

00:05:58,479 --> 00:06:02,080
lots of moving parts we've got

00:06:00,240 --> 00:06:03,280
cross-functional systems and that means

00:06:02,080 --> 00:06:05,600
we have to deal with

00:06:03,280 --> 00:06:06,960
lots of teams that own different pieces

00:06:05,600 --> 00:06:08,960
of these systems

00:06:06,960 --> 00:06:10,160
and that in and of itself is not a bad

00:06:08,960 --> 00:06:12,800
thing but the the

00:06:10,160 --> 00:06:14,400
challenge comes in where we've got these

00:06:12,800 --> 00:06:17,440
boundaries and they're fuzzy

00:06:14,400 --> 00:06:18,080
right we don't know exactly who signs

00:06:17,440 --> 00:06:20,000
off on

00:06:18,080 --> 00:06:22,080
where that change gets made because it

00:06:20,000 --> 00:06:24,240
kind of touches this team's code but it

00:06:22,080 --> 00:06:26,720
also kind of touches this team's code

00:06:24,240 --> 00:06:28,160
and making that call on who really owns

00:06:26,720 --> 00:06:29,680
it creates a lot of synchronous

00:06:28,160 --> 00:06:31,600
communication it creates a lot of room

00:06:29,680 --> 00:06:34,400
for ambiguity and that ambiguity it gets

00:06:31,600 --> 00:06:36,720
you into a lot of trouble

00:06:34,400 --> 00:06:37,840
that complexity leads to a snowball of

00:06:36,720 --> 00:06:40,560
slowness because

00:06:37,840 --> 00:06:42,639
each thing that goes wrong makes it

00:06:40,560 --> 00:06:46,479
easier for the next thing to go wrong

00:06:42,639 --> 00:06:48,720
i've started calling this the slow ball

00:06:46,479 --> 00:06:50,960
okay so here's an example if you have

00:06:48,720 --> 00:06:52,639
high complexity it makes it really hard

00:06:50,960 --> 00:06:54,639
to have confidence that a change won't

00:06:52,639 --> 00:06:57,520
have unexpected side effects

00:06:54,639 --> 00:06:58,560
because of that we have extra risk the

00:06:57,520 --> 00:07:00,479
extra risk

00:06:58,560 --> 00:07:02,639
means that we have more manual checks

00:07:00,479 --> 00:07:04,319
required to have a deployment go live

00:07:02,639 --> 00:07:06,240
because there are more manual checks it

00:07:04,319 --> 00:07:07,680
means the process gets slower because

00:07:06,240 --> 00:07:09,520
the process gets slower

00:07:07,680 --> 00:07:11,199
it takes longer for us to iterate on a

00:07:09,520 --> 00:07:12,080
change because it takes longer for us to

00:07:11,199 --> 00:07:14,319
iterate

00:07:12,080 --> 00:07:15,680
we get tempted to batch things because

00:07:14,319 --> 00:07:17,199
we don't want to have to do this over

00:07:15,680 --> 00:07:18,240
and over and over again we try to batch

00:07:17,199 --> 00:07:20,960
up our changes

00:07:18,240 --> 00:07:21,919
that means there's more code in every pr

00:07:20,960 --> 00:07:24,240
that gets opened

00:07:21,919 --> 00:07:25,280
which means that it's harder to review

00:07:24,240 --> 00:07:27,199
harder to review

00:07:25,280 --> 00:07:29,039
prs means that it's more likely that

00:07:27,199 --> 00:07:30,880
something goes through that gets missed

00:07:29,039 --> 00:07:32,639
and when things get missed production

00:07:30,880 --> 00:07:34,960
breaks when production breaks

00:07:32,639 --> 00:07:35,680
we have to page people everybody panics

00:07:34,960 --> 00:07:38,160
we're doing

00:07:35,680 --> 00:07:39,440
root cause analyses and then we put more

00:07:38,160 --> 00:07:41,840
checks in place

00:07:39,440 --> 00:07:42,800
to prevent this from happening again and

00:07:41,840 --> 00:07:45,280
those checks

00:07:42,800 --> 00:07:46,879
further slow down the process which just

00:07:45,280 --> 00:07:48,879
spirals out of control and eventually

00:07:46,879 --> 00:07:51,520
we're looking at a month to go live

00:07:48,879 --> 00:07:53,840
for any change and it drives everybody

00:07:51,520 --> 00:07:56,319
up a wall and we're all unhappy

00:07:53,840 --> 00:07:58,000
that's the slow ball we really really

00:07:56,319 --> 00:08:00,479
want to avoid that right

00:07:58,000 --> 00:08:02,240
so to do that we want to contain

00:08:00,479 --> 00:08:03,520
complexity and one of the best ways to

00:08:02,240 --> 00:08:06,639
contain complexity

00:08:03,520 --> 00:08:08,560
is through decoupling so

00:08:06,639 --> 00:08:10,240
decoupling doesn't mean removing systems

00:08:08,560 --> 00:08:12,879
it doesn't mean ripping out code

00:08:10,240 --> 00:08:13,759
what it means is adding clarity between

00:08:12,879 --> 00:08:17,120
the discrete

00:08:13,759 --> 00:08:18,479
parts of the system and adding really

00:08:17,120 --> 00:08:21,520
strong boundaries because

00:08:18,479 --> 00:08:22,879
clear boundaries create clarity if two

00:08:21,520 --> 00:08:26,000
systems communicate

00:08:22,879 --> 00:08:28,000
through a well-defined api

00:08:26,000 --> 00:08:29,840
each system no longer needs to know

00:08:28,000 --> 00:08:31,520
about how the other system is built they

00:08:29,840 --> 00:08:32,640
just need to know what that api looks

00:08:31,520 --> 00:08:34,479
like if i know

00:08:32,640 --> 00:08:36,000
that i can hit an api endpoint and i'm

00:08:34,479 --> 00:08:37,680
always going to get the same response

00:08:36,000 --> 00:08:39,279
i kind of don't care how the api is

00:08:37,680 --> 00:08:42,000
built and

00:08:39,279 --> 00:08:42,560
this means that teams only have to worry

00:08:42,000 --> 00:08:44,560
about

00:08:42,560 --> 00:08:46,480
up to the boundary when they're making

00:08:44,560 --> 00:08:47,360
changes which allows them to do a lot

00:08:46,480 --> 00:08:48,720
more

00:08:47,360 --> 00:08:50,640
there's another way of thinking about

00:08:48,720 --> 00:08:52,080
this as optimizing for deletion

00:08:50,640 --> 00:08:53,519
and i've written a lot about this

00:08:52,080 --> 00:08:54,320
there's a link on screen so that you can

00:08:53,519 --> 00:08:57,680
find it

00:08:54,320 --> 00:09:00,720
but ultimately this boils down to

00:08:57,680 --> 00:09:02,399
can i replace a piece of the system and

00:09:00,720 --> 00:09:03,279
as long as i don't change the api

00:09:02,399 --> 00:09:05,680
contract

00:09:03,279 --> 00:09:06,560
make zero changes anywhere else in the

00:09:05,680 --> 00:09:08,080
code

00:09:06,560 --> 00:09:09,600
and this is something that you'll see

00:09:08,080 --> 00:09:10,560
with microservices this is something

00:09:09,600 --> 00:09:13,040
that you'll see

00:09:10,560 --> 00:09:15,040
uh with the decoupled kind of jam stack

00:09:13,040 --> 00:09:17,200
architecture which i'm a big fan of

00:09:15,040 --> 00:09:18,160
and when you start to put these things

00:09:17,200 --> 00:09:19,680
in place

00:09:18,160 --> 00:09:21,519
you know and combine these even you've

00:09:19,680 --> 00:09:22,720
got a jam stack front end with that

00:09:21,519 --> 00:09:24,720
decoupled uh

00:09:22,720 --> 00:09:26,560
front end layer and then that talks to

00:09:24,720 --> 00:09:28,320
microservices that are different apis

00:09:26,560 --> 00:09:29,040
you've got graphql you've got whatever

00:09:28,320 --> 00:09:30,399
in there

00:09:29,040 --> 00:09:32,080
all of those things start to create

00:09:30,399 --> 00:09:34,560
these really neat clean

00:09:32,080 --> 00:09:36,080
boundaries that you can then trust so

00:09:34,560 --> 00:09:39,120
that i can swap out my entire

00:09:36,080 --> 00:09:40,080
front end and i don't have to care the

00:09:39,120 --> 00:09:41,920
back end doesn't have to

00:09:40,080 --> 00:09:43,680
have to think about whether or not that

00:09:41,920 --> 00:09:44,800
changes we don't have to do these really

00:09:43,680 --> 00:09:47,120
complex coupled

00:09:44,800 --> 00:09:48,320
rollouts we can just deploy the front

00:09:47,120 --> 00:09:50,560
end that's

00:09:48,320 --> 00:09:52,160
really really important because it means

00:09:50,560 --> 00:09:54,480
we don't have to care how things are

00:09:52,160 --> 00:09:57,760
built it doesn't matter if that endpoint

00:09:54,480 --> 00:10:00,240
is powered by a java go node server

00:09:57,760 --> 00:10:01,200
doesn't matter if it's running on a load

00:10:00,240 --> 00:10:03,040
balancer across

00:10:01,200 --> 00:10:05,040
a ton of kubernetes clusters or if it's

00:10:03,040 --> 00:10:07,920
in the ceo's closet back at home

00:10:05,040 --> 00:10:09,040
that is all not our concern anymore we

00:10:07,920 --> 00:10:10,079
just know that there's an endpoint and

00:10:09,040 --> 00:10:10,560
if we hit it with a certain kind of

00:10:10,079 --> 00:10:12,160
query

00:10:10,560 --> 00:10:13,920
we're going to get some data back so

00:10:12,160 --> 00:10:15,519
graphql is one of my favorite examples

00:10:13,920 --> 00:10:18,959
of this in fact because

00:10:15,519 --> 00:10:21,360
i know that if i send a query like this

00:10:18,959 --> 00:10:22,160
to the slash graphql endpoint of my

00:10:21,360 --> 00:10:24,720
service

00:10:22,160 --> 00:10:25,920
i'm going to get back a json object that

00:10:24,720 --> 00:10:28,800
looks like this

00:10:25,920 --> 00:10:31,120
right so when i get that post data back

00:10:28,800 --> 00:10:33,440
i know i'm going to get some json

00:10:31,120 --> 00:10:35,360
i can use that it doesn't matter to me

00:10:33,440 --> 00:10:36,720
how that graphql endpoint is built and

00:10:35,360 --> 00:10:38,480
it doesn't matter to the graphql

00:10:36,720 --> 00:10:40,320
endpoint how my front end is built

00:10:38,480 --> 00:10:42,079
i'm able to work on my front end

00:10:40,320 --> 00:10:43,760
trusting that the back end works and

00:10:42,079 --> 00:10:45,600
knowing that as long as i'm sending

00:10:43,760 --> 00:10:47,440
a well-formed graphql query to that

00:10:45,600 --> 00:10:49,839
slash graphql endpoint

00:10:47,440 --> 00:10:50,959
i can trust that that system will work i

00:10:49,839 --> 00:10:52,800
also

00:10:50,959 --> 00:10:54,560
can't do anything to break that back-end

00:10:52,800 --> 00:10:56,079
system my front-end has no way of

00:10:54,560 --> 00:10:57,440
talking to it except by

00:10:56,079 --> 00:11:00,160
sending this post request to this

00:10:57,440 --> 00:11:02,320
endpoint so it's this decoupling this

00:11:00,160 --> 00:11:05,040
clear separation of concerns

00:11:02,320 --> 00:11:06,720
gives me the ability as a developer to

00:11:05,040 --> 00:11:08,880
only worry about the thing i'm

00:11:06,720 --> 00:11:10,480
working on and not have to worry about

00:11:08,880 --> 00:11:12,079
the way that all the different pieces

00:11:10,480 --> 00:11:15,600
across the entire stack

00:11:12,079 --> 00:11:16,000
fit together so that all kind of comes

00:11:15,600 --> 00:11:18,560
down

00:11:16,000 --> 00:11:20,320
to this idea that your architecture is

00:11:18,560 --> 00:11:22,240
more than just your code

00:11:20,320 --> 00:11:24,079
when we're choosing our stack we're not

00:11:22,240 --> 00:11:25,120
just looking at the hard technical

00:11:24,079 --> 00:11:27,600
requirements it's

00:11:25,120 --> 00:11:29,519
also looking at is the architecture

00:11:27,600 --> 00:11:31,360
we're choosing is the way we're setting

00:11:29,519 --> 00:11:33,680
up our deployment processes and our

00:11:31,360 --> 00:11:36,240
architecture and our internal

00:11:33,680 --> 00:11:37,279
processes and flows is that actually

00:11:36,240 --> 00:11:39,920
going to make us

00:11:37,279 --> 00:11:40,800
more productive as a team and if the

00:11:39,920 --> 00:11:42,640
answer is no

00:11:40,800 --> 00:11:44,079
we should rethink our architecture we

00:11:42,640 --> 00:11:45,040
should be thinking about how to make our

00:11:44,079 --> 00:11:47,600
architecture

00:11:45,040 --> 00:11:49,600
make us faster because decoupled systems

00:11:47,600 --> 00:11:51,680
are going to speed up our developers

00:11:49,600 --> 00:11:52,959
by setting up clear boundaries

00:11:51,680 --> 00:11:55,040
individual developers

00:11:52,959 --> 00:11:56,720
are able to work with significantly less

00:11:55,040 --> 00:11:57,920
context i don't need to know how the

00:11:56,720 --> 00:12:00,320
whole system works

00:11:57,920 --> 00:12:02,639
i only need to know how to work on the

00:12:00,320 --> 00:12:03,040
one thing that i'm doing this also means

00:12:02,639 --> 00:12:06,079
that

00:12:03,040 --> 00:12:08,399
as an individual developer i can

00:12:06,079 --> 00:12:09,839
own something end to end because i don't

00:12:08,399 --> 00:12:11,440
have to be an expert on the entire

00:12:09,839 --> 00:12:12,320
platform i just have to be an expert in

00:12:11,440 --> 00:12:14,240
this system

00:12:12,320 --> 00:12:16,480
that lowers the bar to entry it allows

00:12:14,240 --> 00:12:17,440
for for early and mid-career devs to own

00:12:16,480 --> 00:12:19,200
more things

00:12:17,440 --> 00:12:21,040
and to work more autonomously because

00:12:19,200 --> 00:12:23,440
they don't have to have the

00:12:21,040 --> 00:12:25,279
whole context they just need to know the

00:12:23,440 --> 00:12:28,399
front end or they just need to know

00:12:25,279 --> 00:12:30,639
the graphql layer and that makes them

00:12:28,399 --> 00:12:31,920
more capable more autonomous and gives

00:12:30,639 --> 00:12:33,920
them a growth path

00:12:31,920 --> 00:12:35,360
it also for the company means that

00:12:33,920 --> 00:12:36,800
individual developers

00:12:35,360 --> 00:12:38,160
even without massive amounts of

00:12:36,800 --> 00:12:38,800
experience are going to be more

00:12:38,160 --> 00:12:41,680
effective

00:12:38,800 --> 00:12:43,440
on their own it also speeds up teams a

00:12:41,680 --> 00:12:45,360
decoupled system means that knowledge

00:12:43,440 --> 00:12:47,200
share gets easier it also means that if

00:12:45,360 --> 00:12:48,720
somebody wants to go on vacation

00:12:47,200 --> 00:12:50,079
there's a decent chance that somebody's

00:12:48,720 --> 00:12:50,959
going to know how to cover so that you

00:12:50,079 --> 00:12:52,720
don't have those

00:12:50,959 --> 00:12:54,000
those people who have sole ownership

00:12:52,720 --> 00:12:55,760
they're the only people who understand

00:12:54,000 --> 00:12:58,399
how something works in the company

00:12:55,760 --> 00:12:59,920
but it also means that even if you do as

00:12:58,399 --> 00:13:01,760
long as that system is stable

00:12:59,920 --> 00:13:03,680
there's not really any way short of

00:13:01,760 --> 00:13:05,680
somebody going in and touching that code

00:13:03,680 --> 00:13:07,200
that that system will break as other

00:13:05,680 --> 00:13:08,560
maintenance happens unless somebody

00:13:07,200 --> 00:13:10,959
breaks the api contract

00:13:08,560 --> 00:13:12,320
which would not be a fault of the system

00:13:10,959 --> 00:13:14,399
or even a problem with the system it

00:13:12,320 --> 00:13:16,160
would be a problem with the other system

00:13:14,399 --> 00:13:18,000
that broke the contract and that means

00:13:16,160 --> 00:13:19,040
that somebody can safely take a vacation

00:13:18,000 --> 00:13:21,600
even if it means

00:13:19,040 --> 00:13:23,120
that development stops on that one piece

00:13:21,600 --> 00:13:24,560
for the week that they're gone

00:13:23,120 --> 00:13:26,079
that's a great thing that means that

00:13:24,560 --> 00:13:27,200
you've got vacation tolerance and that

00:13:26,079 --> 00:13:29,040
you don't have people

00:13:27,200 --> 00:13:30,800
who are basically chained to their desk

00:13:29,040 --> 00:13:32,560
now because they're the only ones who

00:13:30,800 --> 00:13:34,560
know how things work

00:13:32,560 --> 00:13:35,600
and that all leads to speeding up for

00:13:34,560 --> 00:13:38,959
companies because

00:13:35,600 --> 00:13:41,600
if these decouple systems are built

00:13:38,959 --> 00:13:42,399
to be managed and deployed independently

00:13:41,600 --> 00:13:44,880
it helps

00:13:42,399 --> 00:13:45,920
untangle that bureaucracy teams don't

00:13:44,880 --> 00:13:47,600
need to

00:13:45,920 --> 00:13:49,120
depend on each other they don't block on

00:13:47,600 --> 00:13:50,320
each other so they can collaborate

00:13:49,120 --> 00:13:52,639
really closely

00:13:50,320 --> 00:13:54,000
without that ambiguity of who makes the

00:13:52,639 --> 00:13:55,839
final call here or how

00:13:54,000 --> 00:13:57,360
exactly does this work because they

00:13:55,839 --> 00:13:59,279
control up to their boundary and the

00:13:57,360 --> 00:14:01,040
other team controls up to their boundary

00:13:59,279 --> 00:14:02,399
we know exactly how these two pieces fit

00:14:01,040 --> 00:14:04,240
together and

00:14:02,399 --> 00:14:05,839
that creates a clear i mean contracts

00:14:04,240 --> 00:14:06,399
are a really easy thing to reason about

00:14:05,839 --> 00:14:08,639
because

00:14:06,399 --> 00:14:10,320
i say i need this data and you say i can

00:14:08,639 --> 00:14:11,920
give you that data and you go great high

00:14:10,320 --> 00:14:14,480
five let's go build this thing

00:14:11,920 --> 00:14:16,800
and that means that teams can work

00:14:14,480 --> 00:14:20,399
independently they can work in parallel

00:14:16,800 --> 00:14:22,959
and you don't have that kind of weird

00:14:20,399 --> 00:14:24,399
okay well we've got two product managers

00:14:22,959 --> 00:14:25,839
on this and we've got two engineering

00:14:24,399 --> 00:14:28,800
managers on this and

00:14:25,839 --> 00:14:30,000
who actually has final approval who's

00:14:28,800 --> 00:14:31,519
the who's the real owner

00:14:30,000 --> 00:14:33,040
of a project when it's owned by two

00:14:31,519 --> 00:14:35,600
independent teams

00:14:33,040 --> 00:14:37,360
i don't know so by decoupling you can

00:14:35,600 --> 00:14:38,639
eliminate that need altogether the the

00:14:37,360 --> 00:14:40,639
em and the pm

00:14:38,639 --> 00:14:42,240
own the system that they own and the

00:14:40,639 --> 00:14:44,880
boundaries are clear so you know who

00:14:42,240 --> 00:14:46,800
makes that final call

00:14:44,880 --> 00:14:48,720
decoupled systems ultimately melt the

00:14:46,800 --> 00:14:50,639
slow ball the the idea here

00:14:48,720 --> 00:14:52,959
is that by setting up these decoupled

00:14:50,639 --> 00:14:53,760
systems we're able to short circuit the

00:14:52,959 --> 00:14:57,440
loop

00:14:53,760 --> 00:14:58,000
right and all that kind of boils down to

00:14:57,440 --> 00:15:00,160
this idea

00:14:58,000 --> 00:15:02,639
that if we want things to be fast we

00:15:00,160 --> 00:15:06,320
can't just say hey team work harder ship

00:15:02,639 --> 00:15:06,800
more because a lot of the the underlying

00:15:06,320 --> 00:15:09,199
problem

00:15:06,800 --> 00:15:10,000
isn't that people don't want to ship it

00:15:09,199 --> 00:15:12,560
isn't that people

00:15:10,000 --> 00:15:14,000
are are dragging their feet purposefully

00:15:12,560 --> 00:15:16,720
it's it's that

00:15:14,000 --> 00:15:18,320
people get hamstrung by the architecture

00:15:16,720 --> 00:15:19,199
in the company they get hamstrung by the

00:15:18,320 --> 00:15:20,639
processes

00:15:19,199 --> 00:15:22,240
and other slowdowns that are

00:15:20,639 --> 00:15:25,760
institutional not

00:15:22,240 --> 00:15:26,800
individual so a culture of shipping

00:15:25,760 --> 00:15:29,040
which is our target

00:15:26,800 --> 00:15:30,560
is going to require us to set up the

00:15:29,040 --> 00:15:32,320
architecture that supports

00:15:30,560 --> 00:15:34,000
a culture of shipping we have to have

00:15:32,320 --> 00:15:37,040
that in place

00:15:34,000 --> 00:15:39,440
and to reiterate a culture of shipping

00:15:37,040 --> 00:15:41,519
as a checklist is going to require us to

00:15:39,440 --> 00:15:43,600
resist complexity

00:15:41,519 --> 00:15:44,959
it also requires us to optimize for

00:15:43,600 --> 00:15:47,360
deletion

00:15:44,959 --> 00:15:49,199
we have to decouple our systems and we

00:15:47,360 --> 00:15:51,120
have to clarify ownership

00:15:49,199 --> 00:15:52,880
ultimately what we're going for here is

00:15:51,120 --> 00:15:55,920
we're trying to set up a team

00:15:52,880 --> 00:15:56,560
that has all of the autonomy to ship on

00:15:55,920 --> 00:15:59,120
their own

00:15:56,560 --> 00:16:00,000
because they have clarity of who owns

00:15:59,120 --> 00:16:02,560
things

00:16:00,000 --> 00:16:04,240
where the boundaries are and what is

00:16:02,560 --> 00:16:05,440
actually going to be affected by any set

00:16:04,240 --> 00:16:07,279
of changes

00:16:05,440 --> 00:16:08,720
if we get this right it means that our

00:16:07,279 --> 00:16:10,959
teams are able to ship

00:16:08,720 --> 00:16:12,639
continuously and what i mean by

00:16:10,959 --> 00:16:14,959
continuously is not

00:16:12,639 --> 00:16:16,800
that we get things out once a week i

00:16:14,959 --> 00:16:17,120
mean multiple times per day it should

00:16:16,800 --> 00:16:19,839
take

00:16:17,120 --> 00:16:21,440
10 minutes from the time i merge a pr to

00:16:19,839 --> 00:16:23,440
when i can see that change

00:16:21,440 --> 00:16:25,120
live in production we've got this at

00:16:23,440 --> 00:16:26,720
nutlify for our front end our fernand

00:16:25,120 --> 00:16:28,480
team is able to ship to production about

00:16:26,720 --> 00:16:32,079
a dozen or so times a day

00:16:28,480 --> 00:16:33,120
and that is a merged pr so the person

00:16:32,079 --> 00:16:34,959
opens a pr

00:16:33,120 --> 00:16:36,240
somebody reviews it and as soon as that

00:16:34,959 --> 00:16:39,360
happens it kicks off the

00:16:36,240 --> 00:16:40,720
the cicd flow in nutlify that then

00:16:39,360 --> 00:16:42,800
deploys our front end

00:16:40,720 --> 00:16:44,079
and this isn't our marketing site this

00:16:42,800 --> 00:16:45,440
is our core app

00:16:44,079 --> 00:16:47,519
this is the thing that operates our

00:16:45,440 --> 00:16:49,360
entire business we're able to deploy it

00:16:47,519 --> 00:16:51,040
with that level of confidence because

00:16:49,360 --> 00:16:51,920
we've decoupled everything because

00:16:51,040 --> 00:16:53,759
things are built

00:16:51,920 --> 00:16:55,680
with clear boundaries and ownership the

00:16:53,759 --> 00:16:56,160
front end teams are able to operate with

00:16:55,680 --> 00:16:58,480
a

00:16:56,160 --> 00:16:59,680
huge amount of clarity and autonomy and

00:16:58,480 --> 00:17:01,680
that leads to

00:16:59,680 --> 00:17:03,600
much better engagement and a sense of

00:17:01,680 --> 00:17:05,839
control of your own destiny

00:17:03,600 --> 00:17:07,280
and uh and now when we say hey you

00:17:05,839 --> 00:17:09,360
should ship more

00:17:07,280 --> 00:17:11,039
they have the ability to do that and

00:17:09,360 --> 00:17:11,760
that's the most important thing our

00:17:11,039 --> 00:17:13,919
teams

00:17:11,760 --> 00:17:15,520
have the ability to control how quickly

00:17:13,919 --> 00:17:17,520
they ship

00:17:15,520 --> 00:17:19,679
that is ultimately what we're after here

00:17:17,520 --> 00:17:21,679
is trying to give our teams the chance

00:17:19,679 --> 00:17:23,360
to do the thing that we want them to do

00:17:21,679 --> 00:17:24,959
we want a culture of shipping

00:17:23,360 --> 00:17:27,600
we need to give them the tools and

00:17:24,959 --> 00:17:33,840
processes that will let them do that

00:17:27,600 --> 00:17:33,840
thank you very much

00:17:34,730 --> 00:17:45,200
[Music]

00:17:43,120 --> 00:17:45,200

YouTube URL: https://www.youtube.com/watch?v=TKOYsoDIfDI


