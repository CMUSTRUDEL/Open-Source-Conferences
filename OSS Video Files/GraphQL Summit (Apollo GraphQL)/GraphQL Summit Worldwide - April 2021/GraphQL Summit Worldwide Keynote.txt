Title: GraphQL Summit Worldwide Keynote
Publication date: 2021-04-13
Playlist: GraphQL Summit Worldwide - April 2021
Description: 
	From package managers for your favorite programming language to repositories for your code, developers have come to realize that we need a place to collaborate and gain insight into the software and systems we create. We want to know how things evolve, ensure changes to our graphs are safe and have been adequately tested.

At Apollo, we believe data graphs are no different, and that's why we created the graph registry. The Registry provides a foundation for you as your team and graph grow. You shouldn't have to deal with accidentally deploying breaking changes or exposing sensitive information about your graph to the public. It's why we believe the Registry is the future, and we're working to provide the services developers, teams, and companies of all sizes will need to be successful on their data graph journey.

Key takeaways:
* How schema registries are the future of collaboration for data graphs
* How Studio and its many features make collaborating around a more productive and reliable
* Registering graphs with Rover, a new CLI from Apollo, makes it easy to test and deploy your graph to Apollo Studioâ€™s registry.
* Designing schemas with Workbench, a new schema design tool built by the Solutions team at Apollo

Resources:
Learn more about Summit - https://summit.graphql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Captions: 
	00:00:00,740 --> 00:00:12,970
[Music]

00:00:14,160 --> 00:00:17,199
from package managers for your favorite

00:00:16,000 --> 00:00:19,760
programming language

00:00:17,199 --> 00:00:21,439
to repositories for your code one thing

00:00:19,760 --> 00:00:23,279
is become crystal clear

00:00:21,439 --> 00:00:24,880
that's that developers need a place

00:00:23,279 --> 00:00:26,480
where they can collaborate

00:00:24,880 --> 00:00:28,960
gain insight into the software that they

00:00:26,480 --> 00:00:29,519
create right we want to know how things

00:00:28,960 --> 00:00:31,920
evolve

00:00:29,519 --> 00:00:32,880
and we want to know how things change we

00:00:31,920 --> 00:00:34,960
want to make sure

00:00:32,880 --> 00:00:36,320
adequate checks are in place and things

00:00:34,960 --> 00:00:37,520
are tested

00:00:36,320 --> 00:00:39,680
in other words we want to be able to

00:00:37,520 --> 00:00:40,000
ship reliably and we want to be able to

00:00:39,680 --> 00:00:42,840
ship

00:00:40,000 --> 00:00:44,079
often even if that means deploying on a

00:00:42,840 --> 00:00:45,840
friday

00:00:44,079 --> 00:00:47,360
but in all seriousness that can be

00:00:45,840 --> 00:00:49,920
really hard to do if you don't have the

00:00:47,360 --> 00:00:52,320
proper infrastructure in place

00:00:49,920 --> 00:00:53,280
and that's why we believe the story is

00:00:52,320 --> 00:00:56,399
no different

00:00:53,280 --> 00:00:58,879
for a graph at apollo and why we created

00:00:56,399 --> 00:01:00,480
the registry the registry is there to

00:00:58,879 --> 00:01:03,760
act as a foundation

00:01:00,480 --> 00:01:06,000
for you your team and your graph small

00:01:03,760 --> 00:01:08,320
graphs are going to become big graphs

00:01:06,000 --> 00:01:09,119
graphs that once served a team will

00:01:08,320 --> 00:01:12,479
start to serve

00:01:09,119 --> 00:01:15,119
an entire company and so what happens

00:01:12,479 --> 00:01:15,920
when you can no longer collaborate

00:01:15,119 --> 00:01:18,720
around

00:01:15,920 --> 00:01:20,560
a single schema file or even a single

00:01:18,720 --> 00:01:24,159
repository

00:01:20,560 --> 00:01:27,200
you know communication is difficult

00:01:24,159 --> 00:01:27,759
that's why apollo federation exists it's

00:01:27,200 --> 00:01:31,040
why

00:01:27,759 --> 00:01:33,439
teams all over the world are using ci cd

00:01:31,040 --> 00:01:35,680
to deploy software we need to have

00:01:33,439 --> 00:01:37,119
checks and balances

00:01:35,680 --> 00:01:38,960
you shouldn't have to worry about

00:01:37,119 --> 00:01:42,159
accidentally deploying

00:01:38,960 --> 00:01:44,640
a broken graph or exposing

00:01:42,159 --> 00:01:46,640
private information to the public

00:01:44,640 --> 00:01:49,680
through introspection

00:01:46,640 --> 00:01:50,159
these are real risks and is why we

00:01:49,680 --> 00:01:53,600
believe

00:01:50,159 --> 00:01:55,759
the registry is the future of graphs

00:01:53,600 --> 00:01:58,000
it's also why we're investing in the

00:01:55,759 --> 00:02:00,159
tools and services that

00:01:58,000 --> 00:02:02,399
developers teams and companies of all

00:02:00,159 --> 00:02:04,880
sizes are going to need to be successful

00:02:02,399 --> 00:02:07,200
in their graphql journeys

00:02:04,880 --> 00:02:08,080
and today we're going to hear about the

00:02:07,200 --> 00:02:11,520
things apollo

00:02:08,080 --> 00:02:13,920
is doing right now as well as

00:02:11,520 --> 00:02:16,160
the things we're working on but we'll

00:02:13,920 --> 00:02:17,200
also hear from companies both large and

00:02:16,160 --> 00:02:19,200
small

00:02:17,200 --> 00:02:20,879
about how apollo is helping them on

00:02:19,200 --> 00:02:23,440
their graphql journey

00:02:20,879 --> 00:02:25,760
as they reach for the summit i hope you

00:02:23,440 --> 00:02:28,400
enjoy the rest of the keynote

00:02:25,760 --> 00:02:30,160
hey everyone as developers our journey

00:02:28,400 --> 00:02:31,920
with graphql typically starts with us

00:02:30,160 --> 00:02:33,519
finding an example api somewhere and

00:02:31,920 --> 00:02:35,680
writing some queries

00:02:33,519 --> 00:02:36,560
graphql is designed to be approachable

00:02:35,680 --> 00:02:38,800
but it also has

00:02:36,560 --> 00:02:40,239
depth and it always takes some time to

00:02:38,800 --> 00:02:42,000
get used to no matter what kind of

00:02:40,239 --> 00:02:43,760
background you come from

00:02:42,000 --> 00:02:45,280
our example graphs are usually designed

00:02:43,760 --> 00:02:46,879
to be clean and intuitive

00:02:45,280 --> 00:02:48,640
they've specifically been curated to

00:02:46,879 --> 00:02:50,959
help us learn graphql

00:02:48,640 --> 00:02:52,800
but as of anything in the real world

00:02:50,959 --> 00:02:54,319
real production graphs are seldom like

00:02:52,800 --> 00:02:56,000
the examples

00:02:54,319 --> 00:02:57,760
our goal at apollo is to make working

00:02:56,000 --> 00:03:00,080
with graphs easy for you no matter how

00:02:57,760 --> 00:03:03,120
big or small or messy or clean

00:03:00,080 --> 00:03:03,680
your schemas might be apollo invests a

00:03:03,120 --> 00:03:05,519
lot of time

00:03:03,680 --> 00:03:07,360
and care into building libraries to help

00:03:05,519 --> 00:03:08,800
you do this with code like apollo client

00:03:07,360 --> 00:03:10,239
and apollo server

00:03:08,800 --> 00:03:12,000
but there are a lot of other tools that

00:03:10,239 --> 00:03:12,959
we build as well that are slightly less

00:03:12,000 --> 00:03:14,640
widely known

00:03:12,959 --> 00:03:16,720
yet still very much in this free

00:03:14,640 --> 00:03:18,080
fundamental tooling category

00:03:16,720 --> 00:03:19,680
that i meant to help you with the work

00:03:18,080 --> 00:03:21,840
involved in building a data graph that

00:03:19,680 --> 00:03:23,440
happens outside of writing code

00:03:21,840 --> 00:03:25,040
this is work to collaborate and

00:03:23,440 --> 00:03:26,720
communicate and make information

00:03:25,040 --> 00:03:27,920
discoverable to other members of your

00:03:26,720 --> 00:03:29,519
team

00:03:27,920 --> 00:03:31,280
so today i want to show you all some of

00:03:29,519 --> 00:03:33,280
the free tools in apollo studio that

00:03:31,280 --> 00:03:35,120
exist to help you explore graphs

00:03:33,280 --> 00:03:36,159
better understand them and collaborate

00:03:35,120 --> 00:03:37,440
with your team members on their

00:03:36,159 --> 00:03:38,959
evolution

00:03:37,440 --> 00:03:40,640
and before we dive into the details

00:03:38,959 --> 00:03:42,319
here's a quick clip from some studio

00:03:40,640 --> 00:03:47,840
users about how these tools are already

00:03:42,319 --> 00:03:47,840
helping them solve problems today

00:03:49,040 --> 00:03:53,120
marriage federation made the local

00:03:50,879 --> 00:03:55,120
development and testing faster

00:03:53,120 --> 00:03:56,959
because all you need is to just pass the

00:03:55,120 --> 00:03:58,640
polo key for the right variant

00:03:56,959 --> 00:04:00,239
and the gateway automatically downloads

00:03:58,640 --> 00:04:01,120
the right schema from the implementing

00:04:00,239 --> 00:04:02,799
services

00:04:01,120 --> 00:04:04,879
redirects the query to the appropriate

00:04:02,799 --> 00:04:05,599
services and then combines the responses

00:04:04,879 --> 00:04:08,080
together

00:04:05,599 --> 00:04:10,000
and also reports metrics uh about the

00:04:08,080 --> 00:04:12,560
request to the studio so

00:04:10,000 --> 00:04:14,319
you know it all comes as a package of

00:04:12,560 --> 00:04:15,200
all good features you know which

00:04:14,319 --> 00:04:17,280
otherwise would have

00:04:15,200 --> 00:04:19,199
required us doing all the work manually

00:04:17,280 --> 00:04:19,600
and thus also taking a longer time to

00:04:19,199 --> 00:04:22,240
shift

00:04:19,600 --> 00:04:24,080
so i feel like apollo studios really

00:04:22,240 --> 00:04:27,520
helped us shift faster

00:04:24,080 --> 00:04:28,639
explorer is very helpful to us it's been

00:04:27,520 --> 00:04:30,639
a great tool

00:04:28,639 --> 00:04:31,680
especially when it comes to our

00:04:30,639 --> 00:04:33,600
federation model

00:04:31,680 --> 00:04:34,880
the core federation each team kind of

00:04:33,600 --> 00:04:36,560
maintained their own graph and they were

00:04:34,880 --> 00:04:38,720
the only ones aware of what was there

00:04:36,560 --> 00:04:40,320
as we brought everything together under

00:04:38,720 --> 00:04:42,800
the federation

00:04:40,320 --> 00:04:43,759
and started to kind of evangelize that

00:04:42,800 --> 00:04:45,360
we needed a place

00:04:43,759 --> 00:04:47,360
that people could go and see what's

00:04:45,360 --> 00:04:48,000
actually available there uh and how to

00:04:47,360 --> 00:04:50,160
use it and

00:04:48,000 --> 00:04:51,680
play around with it it was very helpful

00:04:50,160 --> 00:04:52,479
to be able to see everything we had in

00:04:51,680 --> 00:04:55,280
one place

00:04:52,479 --> 00:04:56,240
and build queries and kind of experiment

00:04:55,280 --> 00:04:58,000
with them to

00:04:56,240 --> 00:05:00,320
play around with it the policy studio

00:04:58,000 --> 00:05:03,440
has really been my kind of one-stop shop

00:05:00,320 --> 00:05:04,960
for the health of the graph and uh i

00:05:03,440 --> 00:05:08,160
think that's just been a huge

00:05:04,960 --> 00:05:09,199
huge win for us just knowing what

00:05:08,160 --> 00:05:11,280
queries are happening

00:05:09,199 --> 00:05:12,880
the overall volume all the timing

00:05:11,280 --> 00:05:14,479
information just like rich timing

00:05:12,880 --> 00:05:15,600
information that that comes in apollo

00:05:14,479 --> 00:05:17,600
studio

00:05:15,600 --> 00:05:19,039
has been really helpful i mean i just

00:05:17,600 --> 00:05:21,759
feel

00:05:19,039 --> 00:05:22,080
like we're doing a safer job knowing in

00:05:21,759 --> 00:05:24,000
such

00:05:22,080 --> 00:05:26,160
depth what's going on with the graph in

00:05:24,000 --> 00:05:27,280
real time one thing that we've really

00:05:26,160 --> 00:05:29,840
loved about apollo

00:05:27,280 --> 00:05:32,160
is that it just allows the front-end

00:05:29,840 --> 00:05:34,000
developers to understand so much more

00:05:32,160 --> 00:05:36,000
about what's going on on the back end

00:05:34,000 --> 00:05:36,560
and what api calls we need to make so

00:05:36,000 --> 00:05:38,880
the the

00:05:36,560 --> 00:05:40,000
back-end analytics have been extremely

00:05:38,880 --> 00:05:45,199
helpful for us

00:05:40,000 --> 00:05:45,199
honestly apollo is graphql to us

00:05:46,080 --> 00:05:49,840
we have this entity in studio that you

00:05:48,000 --> 00:05:51,440
can create called a development graph

00:05:49,840 --> 00:05:54,080
and anyone with an apollo account can

00:05:51,440 --> 00:05:55,919
make one a dev graph can be hooked up to

00:05:54,080 --> 00:05:57,440
any running graphql server that has

00:05:55,919 --> 00:05:58,960
introspection turned on

00:05:57,440 --> 00:06:00,720
so this can often be a nice way to

00:05:58,960 --> 00:06:02,800
connect to a live server whether it's

00:06:00,720 --> 00:06:05,199
running locally or deployed somewhere

00:06:02,800 --> 00:06:06,960
and see what's happening with your graph

00:06:05,199 --> 00:06:09,280
for today i wanted to show you all how

00:06:06,960 --> 00:06:10,720
to explore the github graphql api using

00:06:09,280 --> 00:06:12,639
a dev graph

00:06:10,720 --> 00:06:14,240
the first tool we land on here is called

00:06:12,639 --> 00:06:15,680
the explorer

00:06:14,240 --> 00:06:17,840
our goal with the explorer has always

00:06:15,680 --> 00:06:18,240
been to create a very powerful and deep

00:06:17,840 --> 00:06:19,759
tool

00:06:18,240 --> 00:06:21,919
that has all the nuance that we've come

00:06:19,759 --> 00:06:24,160
to expect from our ides

00:06:21,919 --> 00:06:26,160
but also makes writing graphql queries a

00:06:24,160 --> 00:06:28,479
friendly and accessible experience to

00:06:26,160 --> 00:06:30,160
folks who might be newer to graphql

00:06:28,479 --> 00:06:32,240
or to folks who might be new to working

00:06:30,160 --> 00:06:34,000
with this graph specifically

00:06:32,240 --> 00:06:35,840
so here the explorer has preloaded a

00:06:34,000 --> 00:06:37,360
query for us so that we're not staring

00:06:35,840 --> 00:06:38,960
at a blank slate

00:06:37,360 --> 00:06:40,720
in this case i know that github has a

00:06:38,960 --> 00:06:42,800
field called viewer and that this is a

00:06:40,720 --> 00:06:44,960
top level field that we can query

00:06:42,800 --> 00:06:47,600
and it returns the user object for the

00:06:44,960 --> 00:06:49,520
type of user that i'm authenticated with

00:06:47,600 --> 00:06:51,120
so we can command click the viewer field

00:06:49,520 --> 00:06:53,919
here to see what other fields might also

00:06:51,120 --> 00:06:55,599
be available to query on the user type

00:06:53,919 --> 00:06:57,440
say maybe i want to share a list of

00:06:55,599 --> 00:06:58,400
links to all of my repositories with a

00:06:57,440 --> 00:06:59,919
friend

00:06:58,400 --> 00:07:02,000
i can come in here and guess that

00:06:59,919 --> 00:07:04,000
repositories is probably a field i can

00:07:02,000 --> 00:07:05,360
query on my user type

00:07:04,000 --> 00:07:07,440
let's say we want to take the name and

00:07:05,360 --> 00:07:08,720
url out of these repositories and then i

00:07:07,440 --> 00:07:10,479
want to maybe be looking at my most

00:07:08,720 --> 00:07:12,080
recent 20 repos

00:07:10,479 --> 00:07:14,160
i can run this query and actually get

00:07:12,080 --> 00:07:15,759
that list pretty quickly

00:07:14,160 --> 00:07:17,520
i've always been personally annoyed with

00:07:15,759 --> 00:07:19,680
scanning and sharing lists of data in

00:07:17,520 --> 00:07:21,520
json format though because json isn't

00:07:19,680 --> 00:07:23,039
really a format that's familiar to those

00:07:21,520 --> 00:07:25,440
of us who

00:07:23,039 --> 00:07:26,880
don't spend time in developer contexts

00:07:25,440 --> 00:07:27,919
so i'm actually going to switch over to

00:07:26,880 --> 00:07:30,000
table view here

00:07:27,919 --> 00:07:31,599
and in table view we can click into an

00:07:30,000 --> 00:07:32,880
array of data and focus on what we're

00:07:31,599 --> 00:07:34,639
looking at

00:07:32,880 --> 00:07:37,520
in this case i have an array of objects

00:07:34,639 --> 00:07:39,280
where each object has a key called node

00:07:37,520 --> 00:07:40,800
and each of those nodes has a key called

00:07:39,280 --> 00:07:42,319
user and name

00:07:40,800 --> 00:07:43,919
and what i actually want here is to be

00:07:42,319 --> 00:07:45,520
looking at this in a format where name

00:07:43,919 --> 00:07:47,199
and url are columns

00:07:45,520 --> 00:07:49,120
so i'm going to use a graphql dash

00:07:47,199 --> 00:07:51,280
transform here on my query and squash

00:07:49,120 --> 00:07:52,560
that middle node layer into our array

00:07:51,280 --> 00:07:54,319
so that we can get the data in the

00:07:52,560 --> 00:07:56,560
format that we wanted

00:07:54,319 --> 00:07:58,160
and now i can download this into a csv

00:07:56,560 --> 00:08:00,000
share it with my friend and it took

00:07:58,160 --> 00:08:01,759
almost no time at all

00:08:00,000 --> 00:08:03,680
and what you're seeing with graphql dash

00:08:01,759 --> 00:08:05,599
and table view these are just some of

00:08:03,680 --> 00:08:07,280
the power tools in the explorer

00:08:05,599 --> 00:08:09,039
there's also a two-step search that

00:08:07,280 --> 00:08:10,879
helps you not only find entities in your

00:08:09,039 --> 00:08:13,120
schema but also find pathways to

00:08:10,879 --> 00:08:14,720
actually query those entities

00:08:13,120 --> 00:08:16,240
there's a wealth of preferences and

00:08:14,720 --> 00:08:17,919
behavioral toggles that you can play

00:08:16,240 --> 00:08:20,960
with in the explorer settings to

00:08:17,919 --> 00:08:22,479
customize this experience to be your own

00:08:20,960 --> 00:08:24,240
and if you're connecting to a deployed

00:08:22,479 --> 00:08:25,759
graph or a federated graph

00:08:24,240 --> 00:08:27,759
there's even more context that you can

00:08:25,759 --> 00:08:29,360
layer into this experience

00:08:27,759 --> 00:08:30,800
but i'll leave the rest of this for you

00:08:29,360 --> 00:08:32,399
all to try out and discover for

00:08:30,800 --> 00:08:34,000
yourselves because i want to show you

00:08:32,399 --> 00:08:36,320
another of the big tools in

00:08:34,000 --> 00:08:37,919
development graphs which is the schema

00:08:36,320 --> 00:08:40,080
reference

00:08:37,919 --> 00:08:42,320
this is a fully generated turnkey

00:08:40,080 --> 00:08:44,080
documentation browser for your graph

00:08:42,320 --> 00:08:45,600
you give studio your schema and it

00:08:44,080 --> 00:08:46,720
brings you all of this kind of very

00:08:45,600 --> 00:08:48,640
easily

00:08:46,720 --> 00:08:49,760
on the surface these docs are docs as

00:08:48,640 --> 00:08:52,399
we're used to seeing them

00:08:49,760 --> 00:08:54,080
we have structure we have searchability

00:08:52,399 --> 00:08:55,760
under the surface there are steps to

00:08:54,080 --> 00:08:57,519
this tool as well though

00:08:55,760 --> 00:08:58,959
studio can automatically detect when you

00:08:57,519 --> 00:09:00,720
might be referencing another part of

00:08:58,959 --> 00:09:02,560
your schema in a field description and

00:09:00,720 --> 00:09:03,440
it will hyperlink those references for

00:09:02,560 --> 00:09:04,959
you

00:09:03,440 --> 00:09:06,560
if you're working in a federated graph

00:09:04,959 --> 00:09:08,240
the schema reference can show you which

00:09:06,560 --> 00:09:09,920
subgraph each of your fields in your

00:09:08,240 --> 00:09:11,680
graph belongs to

00:09:09,920 --> 00:09:13,440
it will even show you contact

00:09:11,680 --> 00:09:14,880
information about the group that owns

00:09:13,440 --> 00:09:16,240
that subgraph

00:09:14,880 --> 00:09:17,519
and if you're working in a deployed

00:09:16,240 --> 00:09:18,959
graph you can see a history of the

00:09:17,519 --> 00:09:20,000
changes that have rolled out to your

00:09:18,959 --> 00:09:22,320
schema over time

00:09:20,000 --> 00:09:24,320
kind of automatically generated and

00:09:22,320 --> 00:09:25,680
there's a lot more to it as well

00:09:24,320 --> 00:09:27,920
and these tools that i've shown you

00:09:25,680 --> 00:09:29,360
today are just in development graphs

00:09:27,920 --> 00:09:30,880
there are also a number of other free

00:09:29,360 --> 00:09:32,720
tools in studio for working with

00:09:30,880 --> 00:09:34,399
deployed graphs and federated graphs

00:09:32,720 --> 00:09:35,519
that we don't even have time to go into

00:09:34,399 --> 00:09:36,880
at the moment

00:09:35,519 --> 00:09:38,640
the last thing i want to highlight for

00:09:36,880 --> 00:09:39,839
you today is that studio is built atop a

00:09:38,640 --> 00:09:41,760
schema registry

00:09:39,839 --> 00:09:43,680
you push your schema into studio and you

00:09:41,760 --> 00:09:45,279
get all of these tools automatically

00:09:43,680 --> 00:09:46,720
because we built them for the graphql

00:09:45,279 --> 00:09:48,480
ecosystem

00:09:46,720 --> 00:09:50,240
when we think about using git to manage

00:09:48,480 --> 00:09:52,640
version control in our code

00:09:50,240 --> 00:09:53,600
git is an algorithmic cli tool that we

00:09:52,640 --> 00:09:55,600
run locally

00:09:53,600 --> 00:09:57,680
but it's platforms like github and git

00:09:55,600 --> 00:09:59,040
lab that let you actually collaborate

00:09:57,680 --> 00:10:01,040
with your team members

00:09:59,040 --> 00:10:03,279
see changes across the history of your

00:10:01,040 --> 00:10:04,079
code and have a single synchronized

00:10:03,279 --> 00:10:05,920
source of truth

00:10:04,079 --> 00:10:07,600
for your whole team for your code via

00:10:05,920 --> 00:10:09,839
the cloud

00:10:07,600 --> 00:10:11,279
studio is that for your data graph a

00:10:09,839 --> 00:10:13,200
single place for your team to come

00:10:11,279 --> 00:10:15,279
together to reference what's there

00:10:13,200 --> 00:10:16,640
explore your data and see how your graph

00:10:15,279 --> 00:10:18,560
has evolved over time

00:10:16,640 --> 00:10:19,920
asking questions of each other and

00:10:18,560 --> 00:10:22,880
discussing and whatnot

00:10:19,920 --> 00:10:24,880
along the way as part of this today we

00:10:22,880 --> 00:10:27,360
are introducing free read-only seats to

00:10:24,880 --> 00:10:28,720
all studio users across all accounts

00:10:27,360 --> 00:10:30,160
so now you can share your graph with

00:10:28,720 --> 00:10:31,680
anyone and everyone who would benefit

00:10:30,160 --> 00:10:33,440
from having access to it

00:10:31,680 --> 00:10:35,200
without worrying about the cost of their

00:10:33,440 --> 00:10:36,640
seat or worrying that they might

00:10:35,200 --> 00:10:37,680
accidentally change something they

00:10:36,640 --> 00:10:39,200
weren't supposed to

00:10:37,680 --> 00:10:40,880
and we've worked hard to make it easy

00:10:39,200 --> 00:10:42,399
for you to keep your schema in studio

00:10:40,880 --> 00:10:44,640
in sync with your schema on your

00:10:42,399 --> 00:10:46,399
deployed graphs and on that note i would

00:10:44,640 --> 00:10:48,800
like to hand the mic to jakenext

00:10:46,399 --> 00:10:50,959
to show you all our new apollo cli which

00:10:48,800 --> 00:10:52,560
makes it much easier to get your schemas

00:10:50,959 --> 00:10:54,880
into a schema registry

00:10:52,560 --> 00:10:56,640
and to operate with them on the command

00:10:54,880 --> 00:10:58,720
line thanks danielle

00:10:56,640 --> 00:11:00,720
apollo studio is a fantastic tool and

00:10:58,720 --> 00:11:01,760
its underlying registry unlocks so many

00:11:00,720 --> 00:11:03,600
more capabilities

00:11:01,760 --> 00:11:04,959
for developer tooling and workflows

00:11:03,600 --> 00:11:06,720
here's a short clip about how the

00:11:04,959 --> 00:11:09,920
registry and some of these capabilities

00:11:06,720 --> 00:11:09,920
have been helping developers

00:11:12,800 --> 00:11:17,200
the most common problem of a graphql

00:11:14,959 --> 00:11:18,720
server is that with with growing data it

00:11:17,200 --> 00:11:20,480
becomes a monolith

00:11:18,720 --> 00:11:22,000
hence you know just using apollo

00:11:20,480 --> 00:11:24,160
federation helped us with this

00:11:22,000 --> 00:11:26,399
separation of concerns and so now we

00:11:24,160 --> 00:11:28,000
have several individual services each

00:11:26,399 --> 00:11:30,640
managing its own data to

00:11:28,000 --> 00:11:31,200
compose this unified graph but then the

00:11:30,640 --> 00:11:33,600
next

00:11:31,200 --> 00:11:35,600
main challenge is the schema updates and

00:11:33,600 --> 00:11:38,160
coordination between these multiple

00:11:35,600 --> 00:11:39,120
services and teams uh working on a

00:11:38,160 --> 00:11:42,399
unified graph

00:11:39,120 --> 00:11:43,680
so with managed federation on and apollo

00:11:42,399 --> 00:11:46,240
studio acting as

00:11:43,680 --> 00:11:48,320
the source of truth it makes it easier

00:11:46,240 --> 00:11:49,600
to perform schema validation using the

00:11:48,320 --> 00:11:51,600
schema checks

00:11:49,600 --> 00:11:53,600
uh given by a polar studio and then the

00:11:51,600 --> 00:11:55,200
schema push

00:11:53,600 --> 00:11:57,279
from the implementing services all

00:11:55,200 --> 00:11:58,000
implemented as part of the ci cd process

00:11:57,279 --> 00:11:59,760
itself

00:11:58,000 --> 00:12:01,040
so this took a big burden off our

00:11:59,760 --> 00:12:03,519
shoulders and helped us

00:12:01,040 --> 00:12:04,959
shipping the service faster the schema

00:12:03,519 --> 00:12:06,959
checks have also been

00:12:04,959 --> 00:12:09,279
really helpful for us in deploying to

00:12:06,959 --> 00:12:11,920
make sure that we don't break anything

00:12:09,279 --> 00:12:13,360
and give us a sense of stability every

00:12:11,920 --> 00:12:15,040
time something rolls out

00:12:13,360 --> 00:12:16,399
not only do we know that we're rolling

00:12:15,040 --> 00:12:18,480
out a safe but we have

00:12:16,399 --> 00:12:20,959
notifications to tell us what's rolled

00:12:18,480 --> 00:12:23,440
out so that also helped with

00:12:20,959 --> 00:12:24,079
some cross-team communication as well i

00:12:23,440 --> 00:12:26,000
mean

00:12:24,079 --> 00:12:28,399
obviously check this just gives us a lot

00:12:26,000 --> 00:12:31,360
more confidence that when we are

00:12:28,399 --> 00:12:32,560
shipping schema changes we're at least

00:12:31,360 --> 00:12:33,519
aware if it's going to break something

00:12:32,560 --> 00:12:35,519
in crowd you know

00:12:33,519 --> 00:12:38,720
sometimes that's okay if it's if it's

00:12:35,519 --> 00:12:41,040
like people who are using old clients

00:12:38,720 --> 00:12:42,720
um which by the way i can click into the

00:12:41,040 --> 00:12:44,079
check in apollo studio and see what

00:12:42,720 --> 00:12:45,600
clients are consuming it

00:12:44,079 --> 00:12:48,240
so if it's if it's a super outdated

00:12:45,600 --> 00:12:50,399
client like cool it's fine if it breaks

00:12:48,240 --> 00:12:51,839
um so just just having confidence that

00:12:50,399 --> 00:12:53,120
like these schema changes that i'm

00:12:51,839 --> 00:12:54,000
shipping i've got the little green check

00:12:53,120 --> 00:12:55,650
mark in github

00:12:54,000 --> 00:12:58,160
i don't have to think about it it's cool

00:12:55,650 --> 00:12:59,680
[Music]

00:12:58,160 --> 00:13:01,440
working with a graph registry and

00:12:59,680 --> 00:13:03,440
building tools to help you do the same

00:13:01,440 --> 00:13:04,720
isn't something that apollo is new to

00:13:03,440 --> 00:13:06,000
many of you may be familiar with the

00:13:04,720 --> 00:13:08,079
apollo cli

00:13:06,000 --> 00:13:10,000
for years this has been our go-to tool

00:13:08,079 --> 00:13:11,680
for interacting with the registry

00:13:10,000 --> 00:13:13,519
and while that project has taken us a

00:13:11,680 --> 00:13:15,200
long way and it's evolved over time with

00:13:13,519 --> 00:13:16,399
the graphql ecosystem

00:13:15,200 --> 00:13:18,480
and some of the capabilities of the

00:13:16,399 --> 00:13:20,240
registry we decided that last year

00:13:18,480 --> 00:13:22,320
it needed a major facelift and that's

00:13:20,240 --> 00:13:24,240
where the idea of rover came from

00:13:22,320 --> 00:13:25,680
rover is apollo's newest command line

00:13:24,240 --> 00:13:26,399
experience for interacting with a graph

00:13:25,680 --> 00:13:27,839
registry

00:13:26,399 --> 00:13:30,160
whether it be your first field your

00:13:27,839 --> 00:13:31,600
first type or ci workflows managing

00:13:30,160 --> 00:13:32,639
dozens of subgraphs across your

00:13:31,600 --> 00:13:34,079
organization

00:13:32,639 --> 00:13:36,560
rover's been built from the ground up

00:13:34,079 --> 00:13:37,279
with you in mind when graphql first came

00:13:36,560 --> 00:13:39,120
onto the scene

00:13:37,279 --> 00:13:40,880
it was mostly focused around javascript

00:13:39,120 --> 00:13:42,720
workflows and tooling so having a tool

00:13:40,880 --> 00:13:44,320
that was installed primarily through npm

00:13:42,720 --> 00:13:46,000
made a lot of sense

00:13:44,320 --> 00:13:47,839
but the ecosystem has grown and

00:13:46,000 --> 00:13:48,560
javascript is now just a piece of the

00:13:47,839 --> 00:13:50,000
picture

00:13:48,560 --> 00:13:51,839
we wanted to make sure that rover was

00:13:50,000 --> 00:13:53,839
language agnostic and worked anywhere

00:13:51,839 --> 00:13:55,040
that you did including those tricky ci

00:13:53,839 --> 00:13:56,720
environments

00:13:55,040 --> 00:13:58,079
we decided to build rover using rust

00:13:56,720 --> 00:13:58,880
instead of typescript like we had been

00:13:58,079 --> 00:14:01,120
using

00:13:58,880 --> 00:14:02,639
rust robust and flexible compilation

00:14:01,120 --> 00:14:04,320
setup has allowed us to build a command

00:14:02,639 --> 00:14:06,639
line tool that can be used almost

00:14:04,320 --> 00:14:08,000
anywhere and it can be installed in

00:14:06,639 --> 00:14:09,760
almost any environment

00:14:08,000 --> 00:14:12,000
using just a single command like you may

00:14:09,760 --> 00:14:14,000
see with many other command line tools

00:14:12,000 --> 00:14:16,079
but once you get it installed we wanted

00:14:14,000 --> 00:14:17,839
to make sure that configuration was just

00:14:16,079 --> 00:14:19,839
as quick and painless as possible

00:14:17,839 --> 00:14:22,000
so we built rover to be configurable

00:14:19,839 --> 00:14:24,240
using just a single command which saves

00:14:22,000 --> 00:14:25,760
your apollo studio api key to be used

00:14:24,240 --> 00:14:27,760
anywhere that you use rover

00:14:25,760 --> 00:14:30,399
meaning no more config files to manage

00:14:27,760 --> 00:14:30,880
and chase across your projects the rover

00:14:30,399 --> 00:14:33,040
config

00:14:30,880 --> 00:14:33,920
off command is interactive helping you

00:14:33,040 --> 00:14:35,920
find your api

00:14:33,920 --> 00:14:37,600
keys in studio and saving them for you

00:14:35,920 --> 00:14:38,800
so the key doesn't show up anywhere in

00:14:37,600 --> 00:14:41,279
your bash history

00:14:38,800 --> 00:14:42,880
and if you're using rover in ci you can

00:14:41,279 --> 00:14:44,959
always just use an environment variable

00:14:42,880 --> 00:14:46,959
instead of that interactive command

00:14:44,959 --> 00:14:48,720
once you get your api key stored though

00:14:46,959 --> 00:14:51,279
it's time to get down to business

00:14:48,720 --> 00:14:53,199
so we have a registry that you can store

00:14:51,279 --> 00:14:55,279
a graph schema in so let's just do that

00:14:53,199 --> 00:14:56,800
with the graph publish command

00:14:55,279 --> 00:14:58,720
if you're publishing a traditional

00:14:56,800 --> 00:15:00,720
non-federated graph this just means

00:14:58,720 --> 00:15:02,399
running the rover graph publish command

00:15:00,720 --> 00:15:04,079
with the graph id and the variant that

00:15:02,399 --> 00:15:05,839
you want to publish to along with a

00:15:04,079 --> 00:15:07,760
schema source

00:15:05,839 --> 00:15:09,519
if the publish is successful it tells

00:15:07,760 --> 00:15:11,600
you along with useful information about

00:15:09,519 --> 00:15:13,120
the status of your graph

00:15:11,600 --> 00:15:14,720
having a graph published to the registry

00:15:13,120 --> 00:15:16,079
is just the beginning though

00:15:14,720 --> 00:15:18,320
since the registry is the source of

00:15:16,079 --> 00:15:19,920
truth for what a running graph is

00:15:18,320 --> 00:15:21,519
we can actually check changes to make

00:15:19,920 --> 00:15:23,040
sure that changing our schema won't

00:15:21,519 --> 00:15:23,920
break any clients interacting with their

00:15:23,040 --> 00:15:26,399
api

00:15:23,920 --> 00:15:27,199
so checking your api changes before

00:15:26,399 --> 00:15:28,880
publishing

00:15:27,199 --> 00:15:30,639
makes doing the right thing easy not

00:15:28,880 --> 00:15:32,560
just for your team and for your support

00:15:30,639 --> 00:15:34,079
workload but also for your clients

00:15:32,560 --> 00:15:35,920
because nothing's worse than constantly

00:15:34,079 --> 00:15:38,000
breaking apis

00:15:35,920 --> 00:15:39,279
now earlier we used a schema file to

00:15:38,000 --> 00:15:40,959
publish the graph with

00:15:39,279 --> 00:15:42,560
but what if your schema isn't defined in

00:15:40,959 --> 00:15:45,360
a file represented by the schema

00:15:42,560 --> 00:15:47,120
definition language or sdl maybe your

00:15:45,360 --> 00:15:48,399
graphql framework defines types and

00:15:47,120 --> 00:15:49,920
fields in code

00:15:48,399 --> 00:15:51,839
in that case we can use rover's

00:15:49,920 --> 00:15:53,040
introspect command to build that file

00:15:51,839 --> 00:15:54,880
for us

00:15:53,040 --> 00:15:56,160
now introspection if you're not familiar

00:15:54,880 --> 00:15:57,839
is a request that

00:15:56,160 --> 00:16:00,320
any client can make to learn about a

00:15:57,839 --> 00:16:01,920
graphql's available types and fields

00:16:00,320 --> 00:16:04,000
its response is usually formatted in

00:16:01,920 --> 00:16:05,759
json but rover does the work convert

00:16:04,000 --> 00:16:07,519
that response to a human readable schema

00:16:05,759 --> 00:16:09,759
format known as sdl

00:16:07,519 --> 00:16:11,279
so you can immediately use it with other

00:16:09,759 --> 00:16:12,320
tooling or even rover which we'll do

00:16:11,279 --> 00:16:14,160
here

00:16:12,320 --> 00:16:16,000
since graph introspect outputs to

00:16:14,160 --> 00:16:17,680
standard out we can actually just pipe

00:16:16,000 --> 00:16:18,079
that command's output straight into the

00:16:17,680 --> 00:16:20,160
graph

00:16:18,079 --> 00:16:21,839
check command and signify that we want

00:16:20,160 --> 00:16:22,880
to use standard in as the schema source

00:16:21,839 --> 00:16:24,639
with a hyphen

00:16:22,880 --> 00:16:26,000
similar to how many other clies use

00:16:24,639 --> 00:16:27,680
standard in

00:16:26,000 --> 00:16:29,120
and after running this command you can

00:16:27,680 --> 00:16:30,800
see from the result of this check

00:16:29,120 --> 00:16:32,160
that changing the type of the age field

00:16:30,800 --> 00:16:33,440
from an end to a float

00:16:32,160 --> 00:16:36,639
would be a breaking change for the

00:16:33,440 --> 00:16:38,160
consumer's ear graph

00:16:36,639 --> 00:16:39,600
we can know for sure this be a breaking

00:16:38,160 --> 00:16:41,360
change because the registry has the

00:16:39,600 --> 00:16:42,720
ability to collect intelligent usage

00:16:41,360 --> 00:16:44,000
data about our graph

00:16:42,720 --> 00:16:45,199
we know exactly how many people are

00:16:44,000 --> 00:16:47,440
trying to use this field and we can

00:16:45,199 --> 00:16:48,720
prevent accidental changes to it

00:16:47,440 --> 00:16:50,639
these things have been showing on

00:16:48,720 --> 00:16:52,240
traditional monolithic graphs but rover

00:16:50,639 --> 00:16:53,920
also works with federated graphs through

00:16:52,240 --> 00:16:56,079
the subgraph command

00:16:53,920 --> 00:16:57,759
this command the sub command also

00:16:56,079 --> 00:16:59,440
includes sub commands for checking the

00:16:57,759 --> 00:17:00,720
status of subgraphs that have been

00:16:59,440 --> 00:17:02,720
published to the registry

00:17:00,720 --> 00:17:04,160
and deleting existing subgraphs along

00:17:02,720 --> 00:17:06,079
with all the publishing and checks

00:17:04,160 --> 00:17:07,360
functionalities that you'd expect

00:17:06,079 --> 00:17:08,959
in building rover we've done a lot of

00:17:07,360 --> 00:17:10,240
work to make managing your graphs as

00:17:08,959 --> 00:17:11,679
straightforward as possible

00:17:10,240 --> 00:17:13,439
but rover doesn't just want to make the

00:17:11,679 --> 00:17:14,959
right things easy we wanted to make the

00:17:13,439 --> 00:17:16,720
wrong things hard and recovering from

00:17:14,959 --> 00:17:17,919
those wrong things is essential

00:17:16,720 --> 00:17:20,000
and that's why we've spent a

00:17:17,919 --> 00:17:21,600
considerable amount of time on

00:17:20,000 --> 00:17:24,319
debuggability and error handling in

00:17:21,600 --> 00:17:25,679
rover another benefit of using the rust

00:17:24,319 --> 00:17:27,199
language to build rover

00:17:25,679 --> 00:17:28,960
is its strict compiler and error

00:17:27,199 --> 00:17:30,559
handling capabilities

00:17:28,960 --> 00:17:32,080
now these have helped us to identify

00:17:30,559 --> 00:17:33,919
problem points and cover as many

00:17:32,080 --> 00:17:36,240
places as possible with custom error

00:17:33,919 --> 00:17:38,000
messages we even made sure to offer

00:17:36,240 --> 00:17:39,440
customized suggestions for resolving

00:17:38,000 --> 00:17:40,640
most of the common errors that you may

00:17:39,440 --> 00:17:42,640
run into

00:17:40,640 --> 00:17:44,720
but if that's not enough rover supports

00:17:42,640 --> 00:17:46,000
a detailed debug and trace level logs so

00:17:44,720 --> 00:17:48,559
you can see exactly what's going

00:17:46,000 --> 00:17:50,080
on under the hood beyond just showing

00:17:48,559 --> 00:17:51,840
you what's going wrong though rover has

00:17:50,080 --> 00:17:53,440
a number of commands built into debug

00:17:51,840 --> 00:17:56,160
issues like api key issues

00:17:53,440 --> 00:17:58,559
with the rover config who am i command

00:17:56,160 --> 00:18:00,640
environment issues with rover info

00:17:58,559 --> 00:18:02,160
and even a docs command that can be used

00:18:00,640 --> 00:18:03,440
to open rovers docs right from the

00:18:02,160 --> 00:18:04,320
command line if you're ever needing a

00:18:03,440 --> 00:18:06,160
little more help

00:18:04,320 --> 00:18:07,600
now a lot of the workflows you've seen

00:18:06,160 --> 00:18:09,760
so far may seem familiar

00:18:07,600 --> 00:18:11,200
but rover is also a key piece of the

00:18:09,760 --> 00:18:13,039
future of apollo's federation

00:18:11,200 --> 00:18:15,039
super graph schemas and if you're

00:18:13,039 --> 00:18:16,799
unfamiliar a super graph schema is

00:18:15,039 --> 00:18:17,280
similar to a normal schema but it also

00:18:16,799 --> 00:18:19,679
includes

00:18:17,280 --> 00:18:21,280
information and metadata for how a graph

00:18:19,679 --> 00:18:23,360
router should split up requests and

00:18:21,280 --> 00:18:25,679
route them to sub graphs

00:18:23,360 --> 00:18:27,280
rover's new super graph compose command

00:18:25,679 --> 00:18:29,120
is a new command for composing that

00:18:27,280 --> 00:18:30,799
super graph locally

00:18:29,120 --> 00:18:32,480
you pass it a file with a couple fields

00:18:30,799 --> 00:18:33,440
describing the subgraphs and where to

00:18:32,480 --> 00:18:35,120
find their schemas

00:18:33,440 --> 00:18:36,720
and rover takes care of the rest

00:18:35,120 --> 00:18:38,400
composing and producing you a super

00:18:36,720 --> 00:18:40,559
graph schema that you'll be able to pass

00:18:38,400 --> 00:18:42,480
straight away to apollo gateway

00:18:40,559 --> 00:18:44,640
this makes federating a graph locally in

00:18:42,480 --> 00:18:46,160
development deterministic more easily

00:18:44,640 --> 00:18:48,559
debuggable since there's an artifact

00:18:46,160 --> 00:18:50,240
that you can inspect and surfaces errors

00:18:48,559 --> 00:18:52,000
early shortening the feedback loop

00:18:50,240 --> 00:18:53,600
between making sub graph changes

00:18:52,000 --> 00:18:55,919
and seeing how they impact your super

00:18:53,600 --> 00:18:57,679
graph we're really excited for the

00:18:55,919 --> 00:18:59,600
future of federation at apollo and how

00:18:57,679 --> 00:19:01,840
some of these changes will impact your

00:18:59,600 --> 00:19:03,360
developer workflows from start to finish

00:19:01,840 --> 00:19:05,280
but before we jump straight over to

00:19:03,360 --> 00:19:06,640
rover and start using it know that we're

00:19:05,280 --> 00:19:08,080
still in public preview and we're

00:19:06,640 --> 00:19:09,600
focused on building out more of these

00:19:08,080 --> 00:19:11,600
comprehensive composition workflows

00:19:09,600 --> 00:19:13,200
before our official release

00:19:11,600 --> 00:19:15,280
you can find more info about our public

00:19:13,200 --> 00:19:16,640
preview how it works and information on

00:19:15,280 --> 00:19:20,080
how to try out rover

00:19:16,640 --> 00:19:21,760
at go.apollo.dev slash rover

00:19:20,080 --> 00:19:22,799
now i'll hand it over to michael watson

00:19:21,760 --> 00:19:24,400
to talk about how we're helping

00:19:22,799 --> 00:19:25,760
developers and teams design these

00:19:24,400 --> 00:19:28,160
schemas

00:19:25,760 --> 00:19:30,000
thanks jake establishing one graph can

00:19:28,160 --> 00:19:32,400
be extremely valuable at a company

00:19:30,000 --> 00:19:33,440
but it also can be a challenge an apollo

00:19:32,400 --> 00:19:35,840
federation helps

00:19:33,440 --> 00:19:37,280
large companies manage multiple graphs

00:19:35,840 --> 00:19:38,160
and scale their efforts across the

00:19:37,280 --> 00:19:40,559
organization

00:19:38,160 --> 00:19:42,160
with the desired governance structure

00:19:40,559 --> 00:19:43,760
multiple teams are adopting apollo

00:19:42,160 --> 00:19:44,960
federation and various apollo open

00:19:43,760 --> 00:19:48,000
source libraries

00:19:44,960 --> 00:19:49,520
to help make building one graph easier

00:19:48,000 --> 00:19:51,360
now let's hear from a couple teams about

00:19:49,520 --> 00:19:53,840
their architecture and how apollo fits

00:19:51,360 --> 00:19:53,840
into it

00:19:57,600 --> 00:20:01,039
so we're currently using apollo

00:19:59,200 --> 00:20:03,440
federation to stitch together

00:20:01,039 --> 00:20:05,600
our graphql servers and we're using

00:20:03,440 --> 00:20:06,960
apollo client on the front end in our

00:20:05,600 --> 00:20:09,280
view projects

00:20:06,960 --> 00:20:10,720
we have a graphql gateway that uses a

00:20:09,280 --> 00:20:12,640
port of federation

00:20:10,720 --> 00:20:14,480
and we also have a couple of graphql

00:20:12,640 --> 00:20:14,880
microservices connected to the gateway

00:20:14,480 --> 00:20:16,960
now

00:20:14,880 --> 00:20:18,240
and this architecture is expected to

00:20:16,960 --> 00:20:21,120
grow to support

00:20:18,240 --> 00:20:22,960
20 plus graphql microservices all

00:20:21,120 --> 00:20:25,280
combining or composing to form this

00:20:22,960 --> 00:20:27,440
unified adobe star graph

00:20:25,280 --> 00:20:29,039
so currently we've got photograph fuel

00:20:27,440 --> 00:20:30,799
services and we're

00:20:29,039 --> 00:20:32,320
we've started to tie them together with

00:20:30,799 --> 00:20:34,480
apollo's gateway

00:20:32,320 --> 00:20:35,760
we do have a single scheme but most of

00:20:34,480 --> 00:20:38,480
our front ends are

00:20:35,760 --> 00:20:39,840
communicating with graphql through the

00:20:38,480 --> 00:20:41,600
gateway application

00:20:39,840 --> 00:20:43,039
we're starting to get our our native app

00:20:41,600 --> 00:20:45,200
teams on board as well

00:20:43,039 --> 00:20:46,559
to start making graph draw calls through

00:20:45,200 --> 00:20:49,280
through the gateway rather than

00:20:46,559 --> 00:20:49,919
using the the backing apis and now

00:20:49,280 --> 00:20:52,400
really as

00:20:49,919 --> 00:20:53,840
a more mature graph in production with

00:20:52,400 --> 00:20:55,039
you know thousands and thousands of

00:20:53,840 --> 00:20:56,720
queries per minute

00:20:55,039 --> 00:20:58,320
happening all the open source tooling

00:20:56,720 --> 00:21:00,400
that has gone

00:20:58,320 --> 00:21:01,520
into putting this together makes

00:21:00,400 --> 00:21:04,080
developing on it

00:21:01,520 --> 00:21:05,280
a safer experience we are very closely

00:21:04,080 --> 00:21:08,240
coupled with apollo

00:21:05,280 --> 00:21:10,080
uh for this grappler infrastructure so

00:21:08,240 --> 00:21:11,440
um you know we are using quite a lot of

00:21:10,080 --> 00:21:13,280
features and anything that

00:21:11,440 --> 00:21:14,960
apollo says that they are releasing we

00:21:13,280 --> 00:21:16,960
immediately try to see how it can be

00:21:14,960 --> 00:21:18,559
useful for us so

00:21:16,960 --> 00:21:20,000
it's something that we are all very

00:21:18,559 --> 00:21:23,600
proud of doing and

00:21:20,000 --> 00:21:24,720
hats off to this team as a solutions

00:21:23,600 --> 00:21:26,000
architect at apollo

00:21:24,720 --> 00:21:28,320
we work with our customers on their

00:21:26,000 --> 00:21:30,320
graph strategy and help them establish

00:21:28,320 --> 00:21:33,120
an organizational governance process

00:21:30,320 --> 00:21:34,720
for shipping changes to the graph every

00:21:33,120 --> 00:21:37,600
change is the same starting point

00:21:34,720 --> 00:21:39,200
designing a change to this graph schema

00:21:37,600 --> 00:21:41,039
most companies i've worked with have a

00:21:39,200 --> 00:21:42,799
team responsible for the graph

00:21:41,039 --> 00:21:44,720
and they help others design and make

00:21:42,799 --> 00:21:46,559
changes to that graph

00:21:44,720 --> 00:21:48,640
there's typically some sort of medium

00:21:46,559 --> 00:21:49,919
they use to talk about these changes

00:21:48,640 --> 00:21:52,720
whether it's a piece of paper

00:21:49,919 --> 00:21:54,159
or a markdown file but it's never really

00:21:52,720 --> 00:21:55,679
that easy

00:21:54,159 --> 00:21:57,520
i help our customers design their

00:21:55,679 --> 00:21:59,200
schemas and i noticed a pattern where

00:21:57,520 --> 00:22:00,320
developers would design an entire

00:21:59,200 --> 00:22:01,600
service

00:22:00,320 --> 00:22:02,960
and then they wouldn't find out about

00:22:01,600 --> 00:22:04,559
the composition errors until they

00:22:02,960 --> 00:22:07,039
actually were running that service with

00:22:04,559 --> 00:22:08,480
a gateway and the rest of the graph

00:22:07,039 --> 00:22:10,000
teams really didn't have a good way to

00:22:08,480 --> 00:22:11,440
figure out what was going on without

00:22:10,000 --> 00:22:12,720
building internal templates and just

00:22:11,440 --> 00:22:15,520
running everything

00:22:12,720 --> 00:22:17,280
until now that is apollo workbench is

00:22:15,520 --> 00:22:19,280
meant to replace that piece of paper for

00:22:17,280 --> 00:22:20,720
you and make designing schema changes

00:22:19,280 --> 00:22:23,039
super simple

00:22:20,720 --> 00:22:25,280
at its core workbench is just a single

00:22:23,039 --> 00:22:26,480
file notated by a dot apollo workbench

00:22:25,280 --> 00:22:28,159
extension

00:22:26,480 --> 00:22:30,320
and that single file contains all of the

00:22:28,159 --> 00:22:32,880
subgraph schemas and everything that's

00:22:30,320 --> 00:22:34,480
in the design for the super graph

00:22:32,880 --> 00:22:36,320
the file is designed to live through

00:22:34,480 --> 00:22:38,880
this design phase not necessarily

00:22:36,320 --> 00:22:40,799
something you'd commit to your code

00:22:38,880 --> 00:22:42,000
and we have three core sections in

00:22:40,799 --> 00:22:43,919
workbench

00:22:42,000 --> 00:22:45,679
we have the local super graph designs

00:22:43,919 --> 00:22:47,200
this displays the super graph designs we

00:22:45,679 --> 00:22:49,440
have locally

00:22:47,200 --> 00:22:50,720
apollo studio graphs which is the remote

00:22:49,440 --> 00:22:52,480
super graphs we have stored in the

00:22:50,720 --> 00:22:54,480
apollo schema registry

00:22:52,480 --> 00:22:56,480
and the apollo studio operations which

00:22:54,480 --> 00:22:59,440
is our operations that are stored in the

00:22:56,480 --> 00:23:01,280
apollo trace warehouse

00:22:59,440 --> 00:23:02,880
and workbench makes it easy to do things

00:23:01,280 --> 00:23:04,080
right the first time when designing a

00:23:02,880 --> 00:23:05,520
federated graph

00:23:04,080 --> 00:23:07,600
so let's create a new design and see

00:23:05,520 --> 00:23:08,240
what i mean i really want to take a trip

00:23:07,600 --> 00:23:10,960
to the moon

00:23:08,240 --> 00:23:12,400
so let's design a rocket craft first

00:23:10,960 --> 00:23:14,320
we'll create our new design and we'll

00:23:12,400 --> 00:23:16,240
call it rocket graph

00:23:14,320 --> 00:23:18,480
each graph design has a set of sub

00:23:16,240 --> 00:23:21,520
graphs and we'll first need to add

00:23:18,480 --> 00:23:23,520
our first sub graph and call it rockets

00:23:21,520 --> 00:23:25,440
workbench provides intellisense to help

00:23:23,520 --> 00:23:27,039
you design your schema fast

00:23:25,440 --> 00:23:29,360
we'll want to start out by defining a

00:23:27,039 --> 00:23:31,120
rocket entity we can give it a name

00:23:29,360 --> 00:23:33,760
and a capacity for how many people be on

00:23:31,120 --> 00:23:34,480
the ship and we'll want to expose a way

00:23:33,760 --> 00:23:37,360
to look up

00:23:34,480 --> 00:23:38,400
rocket ships on our query now when we

00:23:37,360 --> 00:23:40,640
save the file

00:23:38,400 --> 00:23:42,080
composition runs in the background and

00:23:40,640 --> 00:23:43,679
updates

00:23:42,080 --> 00:23:45,360
we'll be able to view our super graph

00:23:43,679 --> 00:23:47,440
schema which is those composition

00:23:45,360 --> 00:23:49,600
results

00:23:47,440 --> 00:23:51,360
now that we have a composing graph let's

00:23:49,600 --> 00:23:52,559
write out our launches service

00:23:51,360 --> 00:23:54,960
there's going to be a lot of people that

00:23:52,559 --> 00:23:57,200
want to go to the moon so first we're

00:23:54,960 --> 00:24:00,240
going to create our launch service

00:23:57,200 --> 00:24:02,159
then we'll define our launch entity and

00:24:00,240 --> 00:24:04,240
then we'll need to expose our launch on

00:24:02,159 --> 00:24:05,840
our query

00:24:04,240 --> 00:24:07,919
now we'll want to associate our rocket

00:24:05,840 --> 00:24:09,200
with our launch and workbench provides

00:24:07,919 --> 00:24:11,120
extendable types

00:24:09,200 --> 00:24:12,799
in the intellisense along with whatever

00:24:11,120 --> 00:24:16,159
the owning services

00:24:12,799 --> 00:24:17,840
so we'll add rocket to our launch now

00:24:16,159 --> 00:24:19,200
now if we make a mistake along the way

00:24:17,840 --> 00:24:22,080
like deleting the

00:24:19,200 --> 00:24:24,000
external workbench is going to provide

00:24:22,080 --> 00:24:24,480
composition errors right in the problems

00:24:24,000 --> 00:24:27,440
panel

00:24:24,480 --> 00:24:27,440
of the extension

00:24:28,080 --> 00:24:31,520
now that we have our schema designed we

00:24:30,240 --> 00:24:33,520
may want to understand what it looks

00:24:31,520 --> 00:24:34,880
like from the client side of the picture

00:24:33,520 --> 00:24:36,720
it could be something that we want to

00:24:34,880 --> 00:24:38,090
scope our design changes to based on a

00:24:36,720 --> 00:24:39,840
specific client scenario

00:24:38,090 --> 00:24:41,919
[Music]

00:24:39,840 --> 00:24:43,919
now we can add a operation into our

00:24:41,919 --> 00:24:46,320
workbench design

00:24:43,919 --> 00:24:47,760
workbench will provide intellisense when

00:24:46,320 --> 00:24:51,039
you're writing your query

00:24:47,760 --> 00:24:52,400
based on whatever your design was so we

00:24:51,039 --> 00:24:54,880
can add into

00:24:52,400 --> 00:24:56,880
our query here and we can view the query

00:24:54,880 --> 00:25:01,840
plan to understand what the execution

00:24:56,880 --> 00:25:01,840
path is going to be across that

00:25:07,840 --> 00:25:11,840
earlier we heard from jake how about how

00:25:10,000 --> 00:25:12,880
rover interacted with apollo schema

00:25:11,840 --> 00:25:14,320
registry

00:25:12,880 --> 00:25:16,400
when we're designing changes to our

00:25:14,320 --> 00:25:17,039
graph ideally we start out with the

00:25:16,400 --> 00:25:18,640
latest sub

00:25:17,039 --> 00:25:20,320
graph schemas from our centralized

00:25:18,640 --> 00:25:21,840
schema registry

00:25:20,320 --> 00:25:23,600
apollo studio is integrated into

00:25:21,840 --> 00:25:25,600
workbench and you just need your user

00:25:23,600 --> 00:25:27,120
api key to log in

00:25:25,600 --> 00:25:28,960
then you can create a new workbench

00:25:27,120 --> 00:25:30,720
design from an existing super graph in

00:25:28,960 --> 00:25:32,480
the registry

00:25:30,720 --> 00:25:34,559
we can make a new workbench design from

00:25:32,480 --> 00:25:36,159
an existing graph in the registry

00:25:34,559 --> 00:25:38,960
and you'll just need to decide what

00:25:36,159 --> 00:25:40,799
environment you're making the copy from

00:25:38,960 --> 00:25:42,640
workbench makes a read-only copy for

00:25:40,799 --> 00:25:44,320
mold super graph schemas

00:25:42,640 --> 00:25:46,000
and stores them in the local workbench

00:25:44,320 --> 00:25:47,919
design file

00:25:46,000 --> 00:25:49,840
now for our specific change we'll want

00:25:47,919 --> 00:25:51,039
to scope it to a specific operation in

00:25:49,840 --> 00:25:53,200
studio

00:25:51,039 --> 00:25:57,120
and we can add that operation from

00:25:53,200 --> 00:26:00,400
studio into our design

00:25:57,120 --> 00:26:02,559
now let's introduce a new service

00:26:00,400 --> 00:26:05,520
we'll call it my new service and let's

00:26:02,559 --> 00:26:07,440
add a new type into this service

00:26:05,520 --> 00:26:09,600
we'll want to add that type to our root

00:26:07,440 --> 00:26:11,760
customer

00:26:09,600 --> 00:26:13,760
and then we'll want to add that into our

00:26:11,760 --> 00:26:15,520
customer

00:26:13,760 --> 00:26:17,679
now if we go back to the operation we

00:26:15,520 --> 00:26:20,159
pulled in from studio

00:26:17,679 --> 00:26:20,720
we'll be able to see that what we just

00:26:20,159 --> 00:26:23,679
added

00:26:20,720 --> 00:26:25,360
we can add now into the query and

00:26:23,679 --> 00:26:27,360
finally we can view the query plan to

00:26:25,360 --> 00:26:28,180
see what the execution will be based on

00:26:27,360 --> 00:26:31,289
our new design

00:26:28,180 --> 00:26:31,289
[Music]

00:26:32,400 --> 00:26:36,080
now with workbench we have all the tools

00:26:34,400 --> 00:26:37,679
to do three core things

00:26:36,080 --> 00:26:40,240
we can design a change to our super

00:26:37,679 --> 00:26:42,640
graph we can understand the composition

00:26:40,240 --> 00:26:44,400
errors that might pop up in our design

00:26:42,640 --> 00:26:46,559
and we can understand the query plan

00:26:44,400 --> 00:26:49,360
execution of a given operation

00:26:46,559 --> 00:26:51,120
based on a design now once we have our

00:26:49,360 --> 00:26:52,559
design we can simply share the file with

00:26:51,120 --> 00:26:54,080
others and they can pick up from the

00:26:52,559 --> 00:26:55,279
point right where we left off in our

00:26:54,080 --> 00:26:57,760
design

00:26:55,279 --> 00:26:59,679
we could have multiple versions that the

00:26:57,760 --> 00:27:00,720
client teams can review to decide what

00:26:59,679 --> 00:27:03,120
is maybe the best shape

00:27:00,720 --> 00:27:04,720
schema there's no more abstract

00:27:03,120 --> 00:27:07,200
conversations we have around what's

00:27:04,720 --> 00:27:09,039
theoretically possible

00:27:07,200 --> 00:27:10,480
once we have agreed upon design

00:27:09,039 --> 00:27:11,919
workbench also provides with some

00:27:10,480 --> 00:27:13,120
features to make it easy to start

00:27:11,919 --> 00:27:15,520
building

00:27:13,120 --> 00:27:17,520
there's export functionality for schemas

00:27:15,520 --> 00:27:19,440
for example resolvers so you know where

00:27:17,520 --> 00:27:21,120
to put your resolve reference resolvers

00:27:19,440 --> 00:27:22,320
based on what entities you define in

00:27:21,120 --> 00:27:24,240
your graph

00:27:22,320 --> 00:27:26,159
workbench also has a mocking engine it

00:27:24,240 --> 00:27:28,880
that allows you to run a design locally

00:27:26,159 --> 00:27:30,399
with mock gateway and server instances

00:27:28,880 --> 00:27:32,880
there are features around custom

00:27:30,399 --> 00:27:35,600
authentication headers and custom mocks

00:27:32,880 --> 00:27:37,440
based on what your needs are there's

00:27:35,600 --> 00:27:39,600
also some code for schema design

00:27:37,440 --> 00:27:40,799
scenarios maybe you have a kotlin server

00:27:39,600 --> 00:27:42,080
developing locally

00:27:40,799 --> 00:27:44,399
and you want to pull that scheme into

00:27:42,080 --> 00:27:46,080
workbench to see the composition errors

00:27:44,399 --> 00:27:48,159
simply right click and update from the

00:27:46,080 --> 00:27:50,080
remote url

00:27:48,159 --> 00:27:51,520
designing schema changes to our graph

00:27:50,080 --> 00:27:53,279
doesn't have to be hard

00:27:51,520 --> 00:27:54,960
i'm super excited to share apollo

00:27:53,279 --> 00:27:56,960
workbench with the community so everyone

00:27:54,960 --> 00:27:58,240
can see just how easy is to set up a

00:27:56,960 --> 00:28:00,799
federated graph

00:27:58,240 --> 00:28:02,559
and get designing today the code for

00:28:00,799 --> 00:28:04,159
apollo workbench is open source and

00:28:02,559 --> 00:28:05,679
available under the apollo graphql

00:28:04,159 --> 00:28:07,360
github organization

00:28:05,679 --> 00:28:08,799
and the extension can be found in the vs

00:28:07,360 --> 00:28:17,840
code marketplace

00:28:08,799 --> 00:28:17,840
i hope you like it

00:28:20,220 --> 00:28:23,329
[Music]

00:28:24,159 --> 00:28:26,240

YouTube URL: https://www.youtube.com/watch?v=XUocF2TLGMk


