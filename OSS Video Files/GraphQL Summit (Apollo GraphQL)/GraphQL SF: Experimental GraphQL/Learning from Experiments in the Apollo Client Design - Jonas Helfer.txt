Title: Learning from Experiments in the Apollo Client Design - Jonas Helfer
Publication date: 2017-11-16
Playlist: GraphQL SF: Experimental GraphQL
Description: 
	Apollo's Jonas Helfer presents at GraphQL SF: Experimental GraphQL on 5/13/17.

In the past year, Apollo Client has grown from a minimal library into a fully-featured GraphQL client. In this talk, Jonas will take you on a small tour under the hood of Apollo, tell you about some of the failed experiments that led to the current API, and give you a peek at what's next. 

Join GraphQL SF to get notified about future meetups: https://www.meetup.com/GraphQL-SF/
Captions: 
	00:00:02,889 --> 00:00:08,230
so I'm gonna talk about Apollo client

00:00:05,649 --> 00:00:10,330
which sashko mentioned we've spent

00:00:08,230 --> 00:00:13,719
pretty much all of the past year

00:00:10,330 --> 00:00:16,180
building and I'm kind of gonna try to

00:00:13,719 --> 00:00:18,340
take you through the journey of how we

00:00:16,180 --> 00:00:21,010
built that and a few of the hiccups that

00:00:18,340 --> 00:00:24,279
we've kind of encountered along the way

00:00:21,010 --> 00:00:27,160
and I'll see if we actually I'll try to

00:00:24,279 --> 00:00:29,710
like see if we actually achieve kind of

00:00:27,160 --> 00:00:33,820
the goals that we set out to do on this

00:00:29,710 --> 00:00:35,309
journey so the first question you

00:00:33,820 --> 00:00:38,769
probably have to ask yourself is like

00:00:35,309 --> 00:00:41,409
what is a graph qaul client and why do

00:00:38,769 --> 00:00:43,390
you really need one because isn't graph

00:00:41,409 --> 00:00:45,370
queue all like this great query language

00:00:43,390 --> 00:00:47,680
where you can just write a nice string

00:00:45,370 --> 00:00:50,260
and then you get wonderful JSON back

00:00:47,680 --> 00:00:51,400
from the server like what more do you

00:00:50,260 --> 00:00:55,750
really need right

00:00:51,400 --> 00:00:58,449
for example isn't curl a graphic you all

00:00:55,750 --> 00:01:00,909
client of sorts I mean you give it a

00:00:58,449 --> 00:01:04,540
graph QL query you send it to a server

00:01:00,909 --> 00:01:07,120
and it gives you back a graphical result

00:01:04,540 --> 00:01:10,030
and you know in many cases this is

00:01:07,120 --> 00:01:12,910
actually probably enough we've actually

00:01:10,030 --> 00:01:17,230
seen people use Apollo client for pretty

00:01:12,910 --> 00:01:19,930
much what Carl can do but when you're

00:01:17,230 --> 00:01:21,970
using graph queue all in the context of

00:01:19,930 --> 00:01:24,430
a web application they're often like a

00:01:21,970 --> 00:01:26,920
few more things that you want from it so

00:01:24,430 --> 00:01:30,160
this particular client that we saw here

00:01:26,920 --> 00:01:32,590
curl is an example of sort of the plain

00:01:30,160 --> 00:01:34,690
fetch graph qaul clients and the

00:01:32,590 --> 00:01:36,760
advantage of that is you like it's

00:01:34,690 --> 00:01:38,230
really really easy to understand what

00:01:36,760 --> 00:01:43,360
you're going to get right it's really

00:01:38,230 --> 00:01:45,520
simple it's super predictable and it

00:01:43,360 --> 00:01:47,830
only has one downside it actually

00:01:45,520 --> 00:01:50,620
doesn't help you keep your UI consistent

00:01:47,830 --> 00:01:53,409
it doesn't help you cache for example

00:01:50,620 --> 00:01:57,760
graph you all requests things like that

00:01:53,409 --> 00:02:01,390
and so Apollo and relay are examples of

00:01:57,760 --> 00:02:04,000
a caching graph qaul client and kind of

00:02:01,390 --> 00:02:06,549
the advantage of those clients is that

00:02:04,000 --> 00:02:10,209
they help you keep your UI consistent

00:02:06,549 --> 00:02:12,520
we'll kind of dive into that later and

00:02:10,209 --> 00:02:14,050
they kind of help you manage the data on

00:02:12,520 --> 00:02:15,590
one place if you've worked a little bit

00:02:14,050 --> 00:02:19,250
with react

00:02:15,590 --> 00:02:20,959
you probably use stuff like redux and so

00:02:19,250 --> 00:02:22,849
kind of that philosophy there is that

00:02:20,959 --> 00:02:25,040
you want to manage all your state in one

00:02:22,849 --> 00:02:27,319
place because if you manage your state

00:02:25,040 --> 00:02:31,129
in every individual component or you're

00:02:27,319 --> 00:02:33,049
going to end up is a mess with lots of

00:02:31,129 --> 00:02:34,970
inconsistencies in your UI you're like

00:02:33,049 --> 00:02:36,620
you updated the data in one place but

00:02:34,970 --> 00:02:38,959
then it's not updating in another place

00:02:36,620 --> 00:02:40,819
I think you've probably all been to a

00:02:38,959 --> 00:02:42,650
website that did this kind of stuff

00:02:40,819 --> 00:02:44,299
where you were like oh let me fill out

00:02:42,650 --> 00:02:46,010
this form over here or let me do this

00:02:44,299 --> 00:02:50,840
thing here and then you look at the UI

00:02:46,010 --> 00:02:52,640
and you're like well here it says I dos

00:02:50,840 --> 00:02:54,799
but up here the number of things that

00:02:52,640 --> 00:02:56,390
I've purchased is still three and not

00:02:54,799 --> 00:02:58,640
four even though I've made the purchase

00:02:56,390 --> 00:03:02,750
so that's one of the things about

00:02:58,640 --> 00:03:05,420
consistency and basically the only

00:03:02,750 --> 00:03:06,950
disadvantage of or like the main

00:03:05,420 --> 00:03:08,660
disadvantage compared to a simple

00:03:06,950 --> 00:03:11,900
graphical client is that you actually

00:03:08,660 --> 00:03:14,269
have to learn something so relay is

00:03:11,900 --> 00:03:17,239
known for having a not super smooth

00:03:14,269 --> 00:03:19,639
learning curve Apollo is also not as

00:03:17,239 --> 00:03:22,400
easy to learn as a simple fetch graph QL

00:03:19,639 --> 00:03:25,160
client but we're like trying really hard

00:03:22,400 --> 00:03:27,650
to keep the learning curve super smooth

00:03:25,160 --> 00:03:29,540
and still give you a lot of the amazing

00:03:27,650 --> 00:03:35,810
features that graphical clients like

00:03:29,540 --> 00:03:37,790
really have so so let's dive into it so

00:03:35,810 --> 00:03:39,319
when we started building Apollo client

00:03:37,790 --> 00:03:41,810
about a year ago we were actually

00:03:39,319 --> 00:03:43,700
looking at you know what the kinds of

00:03:41,810 --> 00:03:46,340
things were that we wanted to have in a

00:03:43,700 --> 00:03:50,720
graphical client we initially tried to

00:03:46,340 --> 00:03:52,519
use relay but we we kind of figured out

00:03:50,720 --> 00:03:55,880
along the way that it was pretty hard to

00:03:52,519 --> 00:04:00,019
adapt it for us because relays core was

00:03:55,880 --> 00:04:02,810
kind of baked in with or it was kind of

00:04:00,019 --> 00:04:05,419
very closely tied with how react did

00:04:02,810 --> 00:04:07,849
things and coming from meteor we needed

00:04:05,419 --> 00:04:10,069
to support multiple view layers so other

00:04:07,849 --> 00:04:13,609
view layers like angular or our own

00:04:10,069 --> 00:04:15,260
blaze or view Jas and so we really at

00:04:13,609 --> 00:04:20,269
that point didn't have much of a choice

00:04:15,260 --> 00:04:21,769
but to build our own graph QL client so

00:04:20,269 --> 00:04:24,919
one of the things that we really wanted

00:04:21,769 --> 00:04:26,570
to emphasize in Apollo client was that

00:04:24,919 --> 00:04:29,270
we wanted it to be community driven

00:04:26,570 --> 00:04:31,640
which means that we wanted it to be

00:04:29,270 --> 00:04:34,340
easy for people to contribute because we

00:04:31,640 --> 00:04:36,560
learned kind of from you know experience

00:04:34,340 --> 00:04:38,120
with meteor that the community actually

00:04:36,560 --> 00:04:40,130
comes up with a lot of really great

00:04:38,120 --> 00:04:43,370
ideas and if you empower the community

00:04:40,130 --> 00:04:45,320
to contribute features to the stuff that

00:04:43,370 --> 00:04:47,090
you built they're gonna build things

00:04:45,320 --> 00:04:48,650
that you didn't even have the idea of

00:04:47,090 --> 00:04:50,990
building and they're gonna build some

00:04:48,650 --> 00:04:53,480
some of the most successful and some of

00:04:50,990 --> 00:04:56,080
the most like popular features in the

00:04:53,480 --> 00:04:59,030
software that you have now from meteor

00:04:56,080 --> 00:05:01,370
it was actually kind of hard for people

00:04:59,030 --> 00:05:03,670
to contribute for a long time because it

00:05:01,370 --> 00:05:05,990
was such a complex codebase and it was

00:05:03,670 --> 00:05:08,120
relatively monolithic which meant that

00:05:05,990 --> 00:05:10,850
people had to understand lots of parts

00:05:08,120 --> 00:05:11,990
to update even a single part and so with

00:05:10,850 --> 00:05:14,120
a public client we kind of wanted to

00:05:11,990 --> 00:05:16,340
turn that on the head and make it simple

00:05:14,120 --> 00:05:19,430
for people to contribute another thing

00:05:16,340 --> 00:05:21,950
that was really important to us was to

00:05:19,430 --> 00:05:24,320
have it be incrementally adoptable which

00:05:21,950 --> 00:05:25,640
means we didn't want you to have to

00:05:24,320 --> 00:05:28,340
throw away all the code that you've

00:05:25,640 --> 00:05:29,930
written in your previous app in order to

00:05:28,340 --> 00:05:32,060
be able to use Apollo client you should

00:05:29,930 --> 00:05:34,700
be able to just npm install Apollo

00:05:32,060 --> 00:05:38,000
client take one component in your app

00:05:34,700 --> 00:05:39,740
you know add Apollo to it or like add a

00:05:38,000 --> 00:05:41,450
graphic you all query to it and then

00:05:39,740 --> 00:05:45,230
load your data in just that one

00:05:41,450 --> 00:05:47,150
component with graph QL you might notice

00:05:45,230 --> 00:05:49,520
that some of these are like slightly

00:05:47,150 --> 00:05:51,650
inspired by our experience with meteor

00:05:49,520 --> 00:05:54,170
so this second one is also kind of

00:05:51,650 --> 00:05:56,810
inspired by that because meteor kind of

00:05:54,170 --> 00:05:58,670
comes as one thing and you like for a

00:05:56,810 --> 00:06:00,350
long time you either had to adopt all of

00:05:58,670 --> 00:06:02,300
it or none of it or at least that was

00:06:00,350 --> 00:06:04,730
the perception that people had so with

00:06:02,300 --> 00:06:06,290
Apollo client we kind of emphasized from

00:06:04,730 --> 00:06:08,510
the beginning that it has to be really

00:06:06,290 --> 00:06:10,220
incrementally adoptable the third one

00:06:08,510 --> 00:06:12,380
was to really be compatible with

00:06:10,220 --> 00:06:14,540
everything so Paolo client should do one

00:06:12,380 --> 00:06:16,610
simple thing and you should be able to

00:06:14,540 --> 00:06:18,800
plug in other stuff with it so if you

00:06:16,610 --> 00:06:20,810
want it to use it with you know if you

00:06:18,800 --> 00:06:23,660
want to use it with redux or you want it

00:06:20,810 --> 00:06:25,520
to use it with recompose whatever like

00:06:23,660 --> 00:06:27,410
you should be able to do that and if

00:06:25,520 --> 00:06:29,030
there's anything that we like keep you

00:06:27,410 --> 00:06:31,750
from doing because we baked something

00:06:29,030 --> 00:06:34,370
into Apollo client that's a bad thing

00:06:31,750 --> 00:06:36,800
the fourth one was really to make it

00:06:34,370 --> 00:06:38,810
simple to get started with and this one

00:06:36,800 --> 00:06:40,820
was kind of inspired by relay a little

00:06:38,810 --> 00:06:42,810
bit because we found that it was

00:06:40,820 --> 00:06:46,740
difficult for us to

00:06:42,810 --> 00:06:48,600
you can change the way it worked or to

00:06:46,740 --> 00:06:50,580
adapt it to what we wanted to do because

00:06:48,600 --> 00:06:52,260
it had all those built steps and so it

00:06:50,580 --> 00:06:54,150
required people to have a built chain

00:06:52,260 --> 00:06:56,040
and Babel and things like that so I

00:06:54,150 --> 00:06:57,990
simple to get it start get started with

00:06:56,040 --> 00:07:01,020
we really wanted people to just be able

00:06:57,990 --> 00:07:02,850
to run npm install import apollo client

00:07:01,020 --> 00:07:04,680
decorate their component and they're

00:07:02,850 --> 00:07:07,290
done pretty much well you got a build a

00:07:04,680 --> 00:07:08,490
graphical server but you know you want

00:07:07,290 --> 00:07:09,870
to use graph QL without having a

00:07:08,490 --> 00:07:14,220
graphical server you're gonna have kind

00:07:09,870 --> 00:07:18,000
of a hard time so the fifth one was and

00:07:14,220 --> 00:07:23,400
this kind of ties in with the with the

00:07:18,000 --> 00:07:25,260
first one and yeah the fifth one kind of

00:07:23,400 --> 00:07:27,030
ties in with the first one which is we

00:07:25,260 --> 00:07:29,490
wanted it to be inspectable and

00:07:27,030 --> 00:07:31,500
understandable and kind of ties in with

00:07:29,490 --> 00:07:33,419
the first one because the easier it is

00:07:31,500 --> 00:07:35,580
for people to understand what's going on

00:07:33,419 --> 00:07:37,650
inside a piece of software the easier it

00:07:35,580 --> 00:07:42,660
is for them to fix bugs or contribute to

00:07:37,650 --> 00:07:45,750
it and so what we what we wanted to

00:07:42,660 --> 00:07:47,940
focus on was really kind of breaking

00:07:45,750 --> 00:07:51,330
down the components of a graphical

00:07:47,940 --> 00:07:52,830
client or breaking down graphical client

00:07:51,330 --> 00:07:55,620
to its most simple component so that

00:07:52,830 --> 00:07:58,020
people could actually you know for

00:07:55,620 --> 00:08:00,360
example open the developer tools and

00:07:58,020 --> 00:08:01,950
look at like what happened inside my

00:08:00,360 --> 00:08:03,360
graphic you all client was one of the

00:08:01,950 --> 00:08:05,940
worst things that you can have in your

00:08:03,360 --> 00:08:08,430
app is kind of a black box where you put

00:08:05,940 --> 00:08:10,710
things into and then other things come

00:08:08,430 --> 00:08:12,930
out but you have no idea what happened

00:08:10,710 --> 00:08:15,270
inside it's great as long as it does

00:08:12,930 --> 00:08:17,310
exactly what you expect but if it does

00:08:15,270 --> 00:08:19,110
something slightly different and every

00:08:17,310 --> 00:08:20,820
like sufficiently complex library will

00:08:19,110 --> 00:08:23,280
do like something slightly different on

00:08:20,820 --> 00:08:25,229
occasion then it's really good if you

00:08:23,280 --> 00:08:27,419
can actually inspect it and look into it

00:08:25,229 --> 00:08:29,639
and this is also kind of something that

00:08:27,419 --> 00:08:31,950
we built for ourselves because it's

00:08:29,639 --> 00:08:33,750
really hard to fix bugs if you don't

00:08:31,950 --> 00:08:36,870
understand what's going on inside your

00:08:33,750 --> 00:08:38,190
own library and so I'll cover that point

00:08:36,870 --> 00:08:41,940
later but we actually build developer

00:08:38,190 --> 00:08:43,560
tools for Apollo client and we like have

00:08:41,940 --> 00:08:48,120
a store that's really easy to inspect

00:08:43,560 --> 00:08:50,220
and the sixth one which is in many ways

00:08:48,120 --> 00:08:52,020
the most challenging ones is that we

00:08:50,220 --> 00:08:54,870
wanted it to be built for interactive

00:08:52,020 --> 00:08:56,260
apps now what does that really mean it

00:08:54,870 --> 00:08:59,620
means that we

00:08:56,260 --> 00:09:02,800
think oh the future of web development

00:08:59,620 --> 00:09:05,490
is going to be apps that are pretty

00:09:02,800 --> 00:09:07,990
interactive right we already had web 2.0

00:09:05,490 --> 00:09:09,580
you don't just go to a website and read

00:09:07,990 --> 00:09:11,680
something and then close it again it's

00:09:09,580 --> 00:09:14,380
no longer static it's very much dynamic

00:09:11,680 --> 00:09:17,200
and it's also interactive so users are

00:09:14,380 --> 00:09:18,970
going to open a website they're gonna

00:09:17,200 --> 00:09:21,670
click around they're gonna modify things

00:09:18,970 --> 00:09:23,980
so they're gonna update stuff and while

00:09:21,670 --> 00:09:26,860
they're doing that other people in other

00:09:23,980 --> 00:09:28,660
places are also interacting with that

00:09:26,860 --> 00:09:30,070
app and they're updating State on the

00:09:28,660 --> 00:09:32,740
server which you also want to have

00:09:30,070 --> 00:09:35,050
reflected on the client so what we mean

00:09:32,740 --> 00:09:36,730
by built for interactive apps is that a

00:09:35,050 --> 00:09:39,330
pala client should make it really easy

00:09:36,730 --> 00:09:44,020
for people that build apps like that and

00:09:39,330 --> 00:09:45,760
the seventh one you know these are these

00:09:44,020 --> 00:09:48,100
are not strictly ordered so we did not

00:09:45,760 --> 00:09:49,510
like do all the six and then we realized

00:09:48,100 --> 00:09:52,240
oh now it's really big and

00:09:49,510 --> 00:09:54,550
inflexible but I just had to put that on

00:09:52,240 --> 00:09:56,290
there somewhere basically to keep it

00:09:54,550 --> 00:09:59,020
small and flexible nobody wants to

00:09:56,290 --> 00:10:01,180
install a two megabyte data loading

00:09:59,020 --> 00:10:03,790
library in their front-end app

00:10:01,180 --> 00:10:05,560
especially not on mobile and so we

00:10:03,790 --> 00:10:10,870
wanted to keep it relatively small and

00:10:05,560 --> 00:10:14,770
flexible right so how do we do on all

00:10:10,870 --> 00:10:17,080
these points I'm not gonna try to bore

00:10:14,770 --> 00:10:20,100
you too much I'll try to like go through

00:10:17,080 --> 00:10:22,690
all of these as quickly as I can but

00:10:20,100 --> 00:10:25,240
yeah how do we do on all these points I

00:10:22,690 --> 00:10:27,700
think the one point that we probably

00:10:25,240 --> 00:10:31,300
succeeded the most with at least in sort

00:10:27,700 --> 00:10:33,670
of our own perception is that we really

00:10:31,300 --> 00:10:37,360
succeeded in making a community driven

00:10:33,670 --> 00:10:39,030
and it might might seem easy but it

00:10:37,360 --> 00:10:42,310
actually takes quite a lot of effort to

00:10:39,030 --> 00:10:44,860
always be there and like respond to get

00:10:42,310 --> 00:10:47,320
up issues merge people's pull requests

00:10:44,860 --> 00:10:49,810
if you've never worked on an open-source

00:10:47,320 --> 00:10:51,970
project yourself as a maintainer you

00:10:49,810 --> 00:10:53,470
might think that every time someone

00:10:51,970 --> 00:10:56,440
makes a pull request the maintainer is

00:10:53,470 --> 00:10:58,030
go like yes a pull request like I just

00:10:56,440 --> 00:10:59,980
have to click merge and everything will

00:10:58,030 --> 00:11:01,780
be perfect it doesn't really work that

00:10:59,980 --> 00:11:04,210
way because every time you click merge

00:11:01,780 --> 00:11:07,750
you're committing to maintaining a piece

00:11:04,210 --> 00:11:09,400
of code for pretty much as long as you

00:11:07,750 --> 00:11:09,670
you know work on that project as long as

00:11:09,400 --> 00:11:13,630
the

00:11:09,670 --> 00:11:16,420
stays alive so yeah so community-driven

00:11:13,630 --> 00:11:19,360
we we've been working on this for 12

00:11:16,420 --> 00:11:21,280
months and we've had community we've had

00:11:19,360 --> 00:11:23,800
a community of contributors from day one

00:11:21,280 --> 00:11:25,900
so I like people building related

00:11:23,800 --> 00:11:29,170
packages people making photo requests to

00:11:25,900 --> 00:11:32,980
Apollo client for all the Apollo

00:11:29,170 --> 00:11:35,050
projects overall we now have 450

00:11:32,980 --> 00:11:37,060
contributors we counted this yesterday

00:11:35,050 --> 00:11:39,760
and we wanted to make sure I put a

00:11:37,060 --> 00:11:42,160
little asterisk there for the number if

00:11:39,760 --> 00:11:44,950
you go to the Apollo client repository

00:11:42,160 --> 00:11:47,020
that number is not 450 but we think it's

00:11:44,950 --> 00:11:49,420
really important to count pull requests

00:11:47,020 --> 00:11:51,430
a documentation as well to count pull

00:11:49,420 --> 00:11:53,590
requests to you know like libraries that

00:11:51,430 --> 00:11:56,560
are actually part of Apollo client like

00:11:53,590 --> 00:11:58,390
graph QL tag and graph QL anywhere so in

00:11:56,560 --> 00:12:00,610
this like number of contributors we just

00:11:58,390 --> 00:12:04,270
counted everyone who contributed to so

00:12:00,610 --> 00:12:08,110
the repositories that are under the

00:12:04,270 --> 00:12:09,820
Apollo org we've actually yeah Apollo

00:12:08,110 --> 00:12:14,710
client just passed three thousand

00:12:09,820 --> 00:12:17,110
commits we've made 111 releases I like

00:12:14,710 --> 00:12:18,790
time this really carefully from a few

00:12:17,110 --> 00:12:22,030
months out to make sure the number today

00:12:18,790 --> 00:12:24,190
was going to be one one one and we I

00:12:22,030 --> 00:12:26,020
think we also just cost four hundred K

00:12:24,190 --> 00:12:27,580
downloads although you know take that

00:12:26,020 --> 00:12:30,280
with a grain of salt because NPM

00:12:27,580 --> 00:12:32,530
downloads are kind of a voodoo metric in

00:12:30,280 --> 00:12:35,680
many ways but yeah I like this graph

00:12:32,530 --> 00:12:37,720
here of the NPM downloads and to make

00:12:35,680 --> 00:12:39,760
sure it looks like it's really growing

00:12:37,720 --> 00:12:41,980
even faster I squeezed it a little bit

00:12:39,760 --> 00:12:43,840
on the x-axis so I think it's pretty

00:12:41,980 --> 00:12:46,420
impressive now I'm pretty happy with

00:12:43,840 --> 00:12:50,110
that no but to be serious though I'm

00:12:46,420 --> 00:12:52,210
like really humbled and honored to have

00:12:50,110 --> 00:12:53,830
worked with so many amazing people in

00:12:52,210 --> 00:12:56,440
the community who have all contributed

00:12:53,830 --> 00:13:00,640
to Apollo client and kind of made this

00:12:56,440 --> 00:13:03,580
release today possible so sashka already

00:13:00,640 --> 00:13:06,460
mentioned today we press the button and

00:13:03,580 --> 00:13:08,860
we released Apollo client 1.0 which

00:13:06,460 --> 00:13:11,040
means it has no more bugs there will be

00:13:08,860 --> 00:13:13,110
no more changes for all eternity and

00:13:11,040 --> 00:13:16,090
everything's going to be perfect

00:13:13,110 --> 00:13:19,240
no but kidding aside we published Apollo

00:13:16,090 --> 00:13:22,260
client 1.0 today and we codenamed it

00:13:19,240 --> 00:13:22,260
Pink Panther so

00:13:27,000 --> 00:13:30,550
really none of this would have been

00:13:28,810 --> 00:13:32,440
possible without really the amazing

00:13:30,550 --> 00:13:34,839
community support that we had from

00:13:32,440 --> 00:13:38,709
everyone and I really look forward to

00:13:34,839 --> 00:13:40,899
continuing working on it so yeah let me

00:13:38,709 --> 00:13:42,610
speed up a little bit in crossing off

00:13:40,899 --> 00:13:44,829
these points here because otherwise I'm

00:13:42,610 --> 00:13:47,079
never going to get done so we want it to

00:13:44,829 --> 00:13:51,670
be incrementally adoptable and simple to

00:13:47,079 --> 00:13:53,920
get started with and so because no demo

00:13:51,670 --> 00:13:58,209
ever fails I'm gonna actually try to do

00:13:53,920 --> 00:14:00,130
a demo here of how how easy it is to get

00:13:58,209 --> 00:14:04,870
started with Apollo client now of course

00:14:00,130 --> 00:14:07,350
the code is pretty small let's oh yeah

00:14:04,870 --> 00:14:10,480
lots of thanks to the Expo guys who

00:14:07,350 --> 00:14:12,130
thanks to whom we are able to do this

00:14:10,480 --> 00:14:16,720
like super simple demo here in the

00:14:12,130 --> 00:14:20,709
browser so how easy is it to use Apollo

00:14:16,720 --> 00:14:22,779
client so here we're using the react

00:14:20,709 --> 00:14:23,529
Apollo package which we've imported down

00:14:22,779 --> 00:14:25,690
here

00:14:23,529 --> 00:14:27,160
sashko built this really cool example

00:14:25,690 --> 00:14:28,630
and you put the imports all the way at

00:14:27,160 --> 00:14:30,579
the bottom because that's where we like

00:14:28,630 --> 00:14:32,529
to put them now it's just so that when

00:14:30,579 --> 00:14:34,870
you open it at the top you actually see

00:14:32,529 --> 00:14:37,529
the code that you care about but what we

00:14:34,870 --> 00:14:41,529
did is we import all the stuff from

00:14:37,529 --> 00:14:45,100
react Apollo here and then what we can

00:14:41,529 --> 00:14:46,540
do with this feed component which which

00:14:45,100 --> 00:14:49,480
we'll see over here here we'll see like

00:14:46,540 --> 00:14:51,730
a feed of github repositories in our

00:14:49,480 --> 00:14:54,189
like example app github so this is this

00:14:51,730 --> 00:14:56,380
feed component and we want to get data

00:14:54,189 --> 00:14:58,870
into that feed component with react

00:14:56,380 --> 00:15:02,589
Apollo and actually all you have to do

00:14:58,870 --> 00:15:04,209
for that is you have to provide you know

00:15:02,589 --> 00:15:06,069
in the context somewhere you have to

00:15:04,209 --> 00:15:10,750
provide the client so you do that by

00:15:06,069 --> 00:15:13,029
having this Apollo provider here and of

00:15:10,750 --> 00:15:14,769
course you have to initialize the client

00:15:13,029 --> 00:15:17,259
at some point all you have to do is

00:15:14,769 --> 00:15:19,149
point it to the API to the graphical

00:15:17,259 --> 00:15:23,230
server where you want to send the query

00:15:19,149 --> 00:15:27,810
to and then you wrap this feed component

00:15:23,230 --> 00:15:32,110
here with a graph QL higher-order

00:15:27,810 --> 00:15:33,939
component that you import from the from

00:15:32,110 --> 00:15:35,530
react Apollo and this is what the

00:15:33,939 --> 00:15:38,540
higher-order component looks

00:15:35,530 --> 00:15:41,360
you just say graph q all you give it a

00:15:38,540 --> 00:15:43,790
graph QL query here this little tacked

00:15:41,360 --> 00:15:45,920
string actually parses graph q all and

00:15:43,790 --> 00:15:48,050
then turns it into a graph QL document

00:15:45,920 --> 00:15:50,980
so in this case here we're getting a

00:15:48,050 --> 00:15:54,980
feed we're just getting the top ten of

00:15:50,980 --> 00:15:56,930
these things and these are repositories

00:15:54,980 --> 00:16:00,260
on github and we want to know the name

00:15:56,930 --> 00:16:02,150
the owner we want to know the login of

00:16:00,260 --> 00:16:03,620
that owner and then here we have

00:16:02,150 --> 00:16:05,990
something that's commented out that I'll

00:16:03,620 --> 00:16:08,210
demo in a second which is the number of

00:16:05,990 --> 00:16:10,510
people who start the repo and then we

00:16:08,210 --> 00:16:14,630
want to yeah we don't know who posted it

00:16:10,510 --> 00:16:16,250
and basically this here is kind of an

00:16:14,630 --> 00:16:17,810
option that you can add if you want to

00:16:16,250 --> 00:16:19,730
know exactly what's going on with the

00:16:17,810 --> 00:16:21,650
query and that's called notify ons that

00:16:19,730 --> 00:16:23,480
work network status change this is

00:16:21,650 --> 00:16:25,100
basically all you have to do here to

00:16:23,480 --> 00:16:26,360
fetch data and put it into your

00:16:25,100 --> 00:16:28,550
components so you only have to

00:16:26,360 --> 00:16:30,260
initialize Apollo client once and then

00:16:28,550 --> 00:16:31,730
for any component that you have anywhere

00:16:30,260 --> 00:16:33,380
in your app you just decorate it with a

00:16:31,730 --> 00:16:34,130
graph QL query and you get the data

00:16:33,380 --> 00:16:36,320
right away

00:16:34,130 --> 00:16:38,570
now we've already built this component

00:16:36,320 --> 00:16:40,550
so that when we pass in the star gazers

00:16:38,570 --> 00:16:41,900
account it will actually show up and now

00:16:40,550 --> 00:16:43,400
currently that's not being fetched from

00:16:41,900 --> 00:16:46,550
the server because I commented it out

00:16:43,400 --> 00:16:48,470
but if I comment that back in and it

00:16:46,550 --> 00:16:50,270
saves the changes you can see over here

00:16:48,470 --> 00:16:53,750
that the star gazers account actually

00:16:50,270 --> 00:16:56,990
shows up I could now go to the github

00:16:53,750 --> 00:16:59,600
repo and unstart and start again but I'm

00:16:56,990 --> 00:17:01,880
afraid if I do that the demo will fall

00:16:59,600 --> 00:17:03,770
apart and we'll all be very unhappy so

00:17:01,880 --> 00:17:09,470
I'm not going to do that and instead

00:17:03,770 --> 00:17:11,660
I'll get back to our presentation but

00:17:09,470 --> 00:17:13,880
you can try this demo out for yourself

00:17:11,660 --> 00:17:15,740
it's on our website like doc Apollo

00:17:13,880 --> 00:17:18,440
datacom it's really awesome

00:17:15,740 --> 00:17:19,910
sashko built it in like 10 minutes or

00:17:18,440 --> 00:17:24,670
maybe 20 minutes I don't know how he

00:17:19,910 --> 00:17:24,670
does it but things just happen and

00:17:24,730 --> 00:17:30,230
suddenly demos appear anyway we wanted

00:17:28,880 --> 00:17:32,620
Apollo client to be universally

00:17:30,230 --> 00:17:37,190
compatible so how do we do on that front

00:17:32,620 --> 00:17:39,020
I put a bunch of logos here because if I

00:17:37,190 --> 00:17:42,140
put logos here everyone will believe me

00:17:39,020 --> 00:17:44,750
I hope no I think the measure of success

00:17:42,140 --> 00:17:46,850
here is you know how many people have

00:17:44,750 --> 00:17:49,640
built integrations for Apollo for

00:17:46,850 --> 00:17:52,010
different new layers and we actually

00:17:49,640 --> 00:17:53,060
none of these integrations ourselves now

00:17:52,010 --> 00:17:55,520
I'm kind of cheating a little bit

00:17:53,060 --> 00:17:58,070
because there's a Redux logo here in the

00:17:55,520 --> 00:18:00,260
middle and we kind of built Redux into

00:17:58,070 --> 00:18:01,760
Apollo client because that's how the

00:18:00,260 --> 00:18:03,590
store works but for all the other

00:18:01,760 --> 00:18:05,870
integrations they were actually built by

00:18:03,590 --> 00:18:08,720
a community member so we have react

00:18:05,870 --> 00:18:10,400
react Apollo was first built by

00:18:08,720 --> 00:18:14,000
community member now we maintain it

00:18:10,400 --> 00:18:15,590
there's angular Apollo there's four UJS

00:18:14,000 --> 00:18:18,740
there's an integration and there's an

00:18:15,590 --> 00:18:23,690
integration for ember it works with next

00:18:18,740 --> 00:18:26,540
j/s there's examples for expo like I

00:18:23,690 --> 00:18:28,310
think yeah to me that was like really

00:18:26,540 --> 00:18:30,260
satisfying to see that people just

00:18:28,310 --> 00:18:32,210
started you know taking Apollo client

00:18:30,260 --> 00:18:34,370
and building little integrations that

00:18:32,210 --> 00:18:37,970
make it much more convenient to use in

00:18:34,370 --> 00:18:41,900
those libraries all right next one small

00:18:37,970 --> 00:18:43,880
and flexible I don't know what your

00:18:41,900 --> 00:18:46,280
standard for small is but we try to keep

00:18:43,880 --> 00:18:48,860
it as small as possible so right now and

00:18:46,280 --> 00:18:50,660
we run the script every time so this

00:18:48,860 --> 00:18:52,460
runs on CI and we make sure it doesn't

00:18:50,660 --> 00:18:57,410
go beyond a certain size but right now

00:18:52,460 --> 00:19:00,530
the gzip size of our of our bundle is 25

00:18:57,410 --> 00:19:05,470
kilobytes which is kind of tolerable for

00:19:00,530 --> 00:19:09,460
comparison I think react is a 43 or so

00:19:05,470 --> 00:19:13,100
so it's it's you know it's comparable

00:19:09,460 --> 00:19:17,180
right next point inspectable and

00:19:13,100 --> 00:19:21,590
understandable actually we had a hack

00:19:17,180 --> 00:19:24,560
week like December last year or November

00:19:21,590 --> 00:19:27,710
last year and sashko Danielle and

00:19:24,560 --> 00:19:29,630
Glasser built a really cool thing which

00:19:27,710 --> 00:19:31,700
is the apollo klein dev tools and

00:19:29,630 --> 00:19:33,800
they're kind of inspired by the redux

00:19:31,700 --> 00:19:35,660
dev tools if you've ever played around

00:19:33,800 --> 00:19:38,240
with them so what the paul klein dev

00:19:35,660 --> 00:19:40,850
tools let you do is they let you look at

00:19:38,240 --> 00:19:44,120
all the active graph QL queries and they

00:19:40,850 --> 00:19:46,100
let you inspect the store that apollo

00:19:44,120 --> 00:19:48,800
client has the normalized store and i'll

00:19:46,100 --> 00:19:50,390
talk about that in in just a second but

00:19:48,800 --> 00:19:52,880
i'm actually also using this when i'm

00:19:50,390 --> 00:19:54,230
developing stuff with with apollo client

00:19:52,880 --> 00:19:57,230
and even sometimes when i'm trying to

00:19:54,230 --> 00:19:58,790
debug it because it's really helpful for

00:19:57,230 --> 00:20:00,440
knowing like okay what's in the store

00:19:58,790 --> 00:20:02,750
right now which queries are active which

00:20:00,440 --> 00:20:04,640
queries are not active

00:20:02,750 --> 00:20:06,590
and another really cool thing that it

00:20:04,640 --> 00:20:08,120
has in here which is probably my

00:20:06,590 --> 00:20:10,790
favorite part of graphic y'all it

00:20:08,120 --> 00:20:12,620
actually has it built in graphical which

00:20:10,790 --> 00:20:15,350
means if you click on that like second

00:20:12,620 --> 00:20:18,320
tab there you'll get a graphical window

00:20:15,350 --> 00:20:20,030
and if you run queries in there it goes

00:20:18,320 --> 00:20:22,370
through the same network interface as

00:20:20,030 --> 00:20:23,720
the queries in your Apollo client so if

00:20:22,370 --> 00:20:26,000
you're trying to debug a query you're

00:20:23,720 --> 00:20:28,550
like why is this query not working am I

00:20:26,000 --> 00:20:30,350
like am i adding the cookies to it then

00:20:28,550 --> 00:20:32,150
very often if you use graphical you have

00:20:30,350 --> 00:20:34,010
the problem that you need to you know

00:20:32,150 --> 00:20:36,230
attach the same cookie or something or

00:20:34,010 --> 00:20:38,480
you need to send some kind of token to

00:20:36,230 --> 00:20:41,330
your server so you will get through

00:20:38,480 --> 00:20:42,920
through to your API now here with the

00:20:41,330 --> 00:20:44,720
Paul Klein dev tools you can just put it

00:20:42,920 --> 00:20:45,740
like right in there and the graphical

00:20:44,720 --> 00:20:49,250
will go through the same network

00:20:45,740 --> 00:20:51,290
interface that your client was used or

00:20:49,250 --> 00:20:55,640
that your client used so your web site

00:20:51,290 --> 00:20:56,300
uses and also like in terms of making it

00:20:55,640 --> 00:20:57,650
understandable

00:20:56,300 --> 00:21:01,070
Apollo client has a pretty simple

00:20:57,650 --> 00:21:03,020
architecture at the top basically is

00:21:01,070 --> 00:21:07,640
where you see your UI component react

00:21:03,020 --> 00:21:10,040
Apollo when that makes a query all that

00:21:07,640 --> 00:21:12,590
Apollo client does depending on you know

00:21:10,040 --> 00:21:15,020
what you specified is it will check if

00:21:12,590 --> 00:21:16,790
it has the data in the cache if it does

00:21:15,020 --> 00:21:20,030
not have the complete data in the cache

00:21:16,790 --> 00:21:22,280
it will make a query to the server wait

00:21:20,030 --> 00:21:24,620
until the result comes back and then it

00:21:22,280 --> 00:21:26,120
writes that in the cache and there's a

00:21:24,620 --> 00:21:27,500
little thing that's now listening

00:21:26,120 --> 00:21:29,240
because we made this query that's

00:21:27,500 --> 00:21:31,760
listening to all updates for that query

00:21:29,240 --> 00:21:34,490
and when that data is all in the cache

00:21:31,760 --> 00:21:36,680
it will read it out and it will piece

00:21:34,490 --> 00:21:38,600
the things back together and then send

00:21:36,680 --> 00:21:40,550
it to your UI component and the

00:21:38,600 --> 00:21:42,380
advantage of doing that is that if there

00:21:40,550 --> 00:21:45,380
are other queries that modify the same

00:21:42,380 --> 00:21:47,240
data that you're already watching your

00:21:45,380 --> 00:21:49,790
UI component will get notified so that

00:21:47,240 --> 00:21:52,870
kind of keeps your UI consistent but

00:21:49,790 --> 00:21:56,260
we'll get to that in just a second so

00:21:52,870 --> 00:22:02,120
how much time do I have left

00:21:56,260 --> 00:22:05,360
ok I can talk as long as I want no all

00:22:02,120 --> 00:22:06,890
right so I just asked because this is

00:22:05,360 --> 00:22:09,530
actually the most difficult part of

00:22:06,890 --> 00:22:11,410
building a graphical client so far like

00:22:09,530 --> 00:22:13,970
I think everything that I've told you

00:22:11,410 --> 00:22:15,650
could have probably been fulfilled with

00:22:13,970 --> 00:22:16,300
you know just a simple fetch client

00:22:15,650 --> 00:22:17,920
right you

00:22:16,300 --> 00:22:20,620
make the fetch client that's community

00:22:17,920 --> 00:22:22,570
driven incrementally adoptable super

00:22:20,620 --> 00:22:23,980
easy right universally compatible well

00:22:22,570 --> 00:22:26,260
fetch is pretty much universally

00:22:23,980 --> 00:22:29,740
compatible if your app cannot use fetch

00:22:26,260 --> 00:22:31,330
you have a problem it's also simple to

00:22:29,740 --> 00:22:33,040
get started with or it would be

00:22:31,330 --> 00:22:35,440
inspectable and understandable and it

00:22:33,040 --> 00:22:38,110
would be small and flexible so basically

00:22:35,440 --> 00:22:41,380
we have six points on here that would be

00:22:38,110 --> 00:22:43,780
really easy to do if all we built was a

00:22:41,380 --> 00:22:45,460
fetch client and you know now that I

00:22:43,780 --> 00:22:46,630
tell you that maybe that's what we

00:22:45,460 --> 00:22:48,670
should have built and we should have

00:22:46,630 --> 00:22:50,830
just told everyone that it's amazing and

00:22:48,670 --> 00:22:53,290
we've had a lot of people using a fetch

00:22:50,830 --> 00:22:55,030
client just because you know we hyped it

00:22:53,290 --> 00:22:59,650
enough but that's not what we wanted to

00:22:55,030 --> 00:23:01,240
do so really what do we mean by built

00:22:59,650 --> 00:23:03,790
for interactive apps so I told you that

00:23:01,240 --> 00:23:06,910
the main challenge for interactive apps

00:23:03,790 --> 00:23:09,490
was UI consistency there are people

00:23:06,910 --> 00:23:10,990
updating the app while you're looking at

00:23:09,490 --> 00:23:14,050
it you want these changes to be

00:23:10,990 --> 00:23:16,420
reflected in your UI for example you

00:23:14,050 --> 00:23:20,050
know you're looking at your your news

00:23:16,420 --> 00:23:21,850
feed on Facebook or you're looking at

00:23:20,050 --> 00:23:25,000
the number of likes on something you

00:23:21,850 --> 00:23:26,710
posted and you know we all try not to

00:23:25,000 --> 00:23:28,300
check too often but if we post something

00:23:26,710 --> 00:23:29,860
that we really care about we kind of

00:23:28,300 --> 00:23:32,980
want to see the number of likes you know

00:23:29,860 --> 00:23:34,900
and I'm sure Facebook wouldn't like it

00:23:32,980 --> 00:23:37,600
very much if people kept refreshing the

00:23:34,900 --> 00:23:40,480
page so thankfully they kind of make

00:23:37,600 --> 00:23:42,910
that transparent and so it just keeps

00:23:40,480 --> 00:23:45,550
updating so you have updates that come

00:23:42,910 --> 00:23:46,840
from the server and you at the same time

00:23:45,550 --> 00:23:48,460
you have updates that come from the

00:23:46,840 --> 00:23:50,980
client so you might have you know an

00:23:48,460 --> 00:23:52,690
order form you go to the second page you

00:23:50,980 --> 00:23:54,370
click order you come back to the

00:23:52,690 --> 00:23:57,180
previous page you want that to be

00:23:54,370 --> 00:23:59,320
reflected as quickly as possible and

00:23:57,180 --> 00:24:05,140
that's actually a middle point that I

00:23:59,320 --> 00:24:07,120
have there which is optimistic UI and so

00:24:05,140 --> 00:24:10,150
the challenges with UI consistency is

00:24:07,120 --> 00:24:12,790
the main reason why you want to have a

00:24:10,150 --> 00:24:16,390
cache in your in your graphical client

00:24:12,790 --> 00:24:18,520
that is normalized if it wasn't for that

00:24:16,390 --> 00:24:20,800
you could just fire off separate queries

00:24:18,520 --> 00:24:25,780
and everything would be fine and so how

00:24:20,800 --> 00:24:28,420
does cache normalization really work we

00:24:25,780 --> 00:24:29,720
tried to like make it be as simple as

00:24:28,420 --> 00:24:32,120
possible

00:24:29,720 --> 00:24:34,790
it can get quite hairy and as you'll see

00:24:32,120 --> 00:24:37,280
later we actually also kind of tripped

00:24:34,790 --> 00:24:39,320
up a couple times while we were building

00:24:37,280 --> 00:24:41,870
this so I guess that kind of explains

00:24:39,320 --> 00:24:45,470
then the experimental part of our graph

00:24:41,870 --> 00:24:48,440
QL journey but yeah so here's here's an

00:24:45,470 --> 00:24:50,090
example of a graph you know this is this

00:24:48,440 --> 00:24:52,010
is basically where the graph in graphic

00:24:50,090 --> 00:24:56,690
u all comes from because your data on

00:24:52,010 --> 00:24:59,900
the server can be you know one one

00:24:56,690 --> 00:25:02,170
really common way to look at it is that

00:24:59,900 --> 00:25:05,210
you essentially have a graph right

00:25:02,170 --> 00:25:07,460
people used to build things with sequel

00:25:05,210 --> 00:25:09,110
but I guess they still do so you have a

00:25:07,460 --> 00:25:10,550
relational database you define a

00:25:09,110 --> 00:25:12,370
relational schema which means you have

00:25:10,550 --> 00:25:15,380
relationships between your tables and

00:25:12,370 --> 00:25:17,120
actually all your data comes together to

00:25:15,380 --> 00:25:19,160
kind of form a graph and in this case

00:25:17,120 --> 00:25:20,930
it's just sort of a simple app that

00:25:19,160 --> 00:25:23,600
where you have books and you have

00:25:20,930 --> 00:25:25,580
authors and these have relationships

00:25:23,600 --> 00:25:27,980
right an author can have a name an

00:25:25,580 --> 00:25:30,350
author can have a co-author a book has

00:25:27,980 --> 00:25:32,390
authors and it has a title so all of

00:25:30,350 --> 00:25:36,680
these things kind of like everything in

00:25:32,390 --> 00:25:39,230
the world just is a connected graph

00:25:36,680 --> 00:25:42,680
right and what graph qaul helps you do

00:25:39,230 --> 00:25:44,930
is it helps you select data out of that

00:25:42,680 --> 00:25:47,990
graph because there's no way that you

00:25:44,930 --> 00:25:50,990
can put all the data from your

00:25:47,990 --> 00:25:52,430
application on every single client it

00:25:50,990 --> 00:25:55,550
will kind of be prohibitively expensive

00:25:52,430 --> 00:25:58,310
and so what you want to do is you want

00:25:55,550 --> 00:26:00,380
to select part of that data from that

00:25:58,310 --> 00:26:03,620
graph and graph you all helps you select

00:26:00,380 --> 00:26:05,540
a tree out of that graph so let's let's

00:26:03,620 --> 00:26:07,310
take for example a really simple query

00:26:05,540 --> 00:26:09,650
you select a book and you want to know

00:26:07,310 --> 00:26:11,960
the title and you know all the authors

00:26:09,650 --> 00:26:13,310
of that book and their names so what

00:26:11,960 --> 00:26:16,070
does that look like is you're

00:26:13,310 --> 00:26:18,380
essentially selecting a tree out of that

00:26:16,070 --> 00:26:21,530
graph and the tree starts over there

00:26:18,380 --> 00:26:24,800
with the book and it connects to two

00:26:21,530 --> 00:26:27,950
authors it connects to its book title

00:26:24,800 --> 00:26:32,570
and authors kind of connect to the two

00:26:27,950 --> 00:26:34,610
their names now if you kind of normalize

00:26:32,570 --> 00:26:38,210
that what that looks like is you have a

00:26:34,610 --> 00:26:39,560
book points the title once the author in

00:26:38,210 --> 00:26:45,430
this case they don't this one only has

00:26:39,560 --> 00:26:45,430
one author and an author has a name and

00:26:45,530 --> 00:26:51,950
you can also select another book and

00:26:47,840 --> 00:26:55,880
that book has an author and that happens

00:26:51,950 --> 00:26:58,640
to be the same author and so now you

00:26:55,880 --> 00:27:01,670
have a problem because what you did is

00:26:58,640 --> 00:27:03,170
you have a graph on your server and now

00:27:01,670 --> 00:27:05,120
you're not graph you know all the

00:27:03,170 --> 00:27:07,340
relationships but now suddenly you're

00:27:05,120 --> 00:27:10,460
starting to select trees out of that

00:27:07,340 --> 00:27:13,250
graph and if you're not careful you

00:27:10,460 --> 00:27:17,510
actually lose the information about

00:27:13,250 --> 00:27:19,370
those relationships so in this case you

00:27:17,510 --> 00:27:21,410
can still figure out that actually this

00:27:19,370 --> 00:27:22,910
author is the same person right and

00:27:21,410 --> 00:27:25,940
there's two ways that you can figure

00:27:22,910 --> 00:27:28,160
that out now one way is well you know

00:27:25,940 --> 00:27:30,950
kind of the root of the query was the

00:27:28,160 --> 00:27:32,810
same so your query took the same path in

00:27:30,950 --> 00:27:36,260
the graph and so if it took the same

00:27:32,810 --> 00:27:38,720
path this must refer to the same entity

00:27:36,260 --> 00:27:41,510
in this case like this is this is one

00:27:38,720 --> 00:27:44,300
way in which we can normalize the Apollo

00:27:41,510 --> 00:27:47,450
client store so what we really want in

00:27:44,300 --> 00:27:50,030
the store is not a copy of each query

00:27:47,450 --> 00:27:52,280
but we want a copy of each entity and

00:27:50,030 --> 00:27:54,530
then we want to keep those we want to

00:27:52,280 --> 00:27:56,240
remember those relationships so let's

00:27:54,530 --> 00:27:59,750
see if this animation actually works

00:27:56,240 --> 00:28:02,720
yeah so what you want to do is we want

00:27:59,750 --> 00:28:05,180
to take that author entity from both the

00:28:02,720 --> 00:28:08,380
queries and actually put it in the same

00:28:05,180 --> 00:28:11,600
place so that if we run another query

00:28:08,380 --> 00:28:14,080
for example if that author changes that

00:28:11,600 --> 00:28:17,090
it changes for both queries right and

00:28:14,080 --> 00:28:22,510
there's actually a longer post on our

00:28:17,090 --> 00:28:26,060
blog written by Deva which I recommend

00:28:22,510 --> 00:28:28,460
that explains this all this much better

00:28:26,060 --> 00:28:31,790
so now let's let's take a different

00:28:28,460 --> 00:28:33,560
thing so I just said let's use the path

00:28:31,790 --> 00:28:36,890
to normalize right and so we had the

00:28:33,560 --> 00:28:39,050
thing that I was like book author and we

00:28:36,890 --> 00:28:39,890
had the same book because we used the

00:28:39,050 --> 00:28:41,780
same argument

00:28:39,890 --> 00:28:43,910
and so we know that author things should

00:28:41,780 --> 00:28:45,950
be normalized to the same place but what

00:28:43,910 --> 00:28:47,930
if we actually queried from two

00:28:45,950 --> 00:28:49,430
different places in the graph so what

00:28:47,930 --> 00:28:50,900
let's say with one quarter you start

00:28:49,430 --> 00:28:53,660
from book and with another quarter you

00:28:50,900 --> 00:28:55,160
start from author then we can't use the

00:28:53,660 --> 00:28:57,020
path to figure out that this author

00:28:55,160 --> 00:28:59,290
object was the same

00:28:57,020 --> 00:29:02,780
so we need to use a different thing and

00:28:59,290 --> 00:29:06,650
basically what we used is very much

00:29:02,780 --> 00:29:08,390
inspired by relay we just use a node

00:29:06,650 --> 00:29:10,940
idea essentially but instead of

00:29:08,390 --> 00:29:12,470
prescribing the node ID we just say like

00:29:10,940 --> 00:29:14,540
well you can probably a function and you

00:29:12,470 --> 00:29:16,730
can say how to generate the ID for your

00:29:14,540 --> 00:29:18,140
node and a very common thing is if you

00:29:16,730 --> 00:29:22,640
have global unique IDs

00:29:18,140 --> 00:29:24,530
you just use the ID but another like a

00:29:22,640 --> 00:29:26,720
much simpler way is if you don't have

00:29:24,530 --> 00:29:28,850
global IDs which very often you don't if

00:29:26,720 --> 00:29:31,070
you like if you were using sequel you

00:29:28,850 --> 00:29:33,440
probably just had an ID that was unique

00:29:31,070 --> 00:29:35,750
per table so it's unique for object type

00:29:33,440 --> 00:29:39,680
but it's non global unique so you can

00:29:35,750 --> 00:29:42,440
use a data ID from object function that

00:29:39,680 --> 00:29:44,120
uses the type name and the ID and Apollo

00:29:42,440 --> 00:29:45,590
client actually does that by default so

00:29:44,120 --> 00:29:47,960
you don't even need to pass it that way

00:29:45,590 --> 00:29:50,270
and now thanks to that data ID from

00:29:47,960 --> 00:29:53,180
object function through which we pass

00:29:50,270 --> 00:29:55,340
every object before we normalize it we

00:29:53,180 --> 00:29:58,550
know that it goes in this into the same

00:29:55,340 --> 00:30:01,820
place in the store right so we have this

00:29:58,550 --> 00:30:06,350
guy Thomas Piketty and he wrote two

00:30:01,820 --> 00:30:08,930
books and or let's say he wrote you know

00:30:06,350 --> 00:30:12,860
he wrote the capital and we know he has

00:30:08,930 --> 00:30:14,960
ID five now if we select author with ID

00:30:12,860 --> 00:30:16,940
five we know that's still Thomas Piketty

00:30:14,960 --> 00:30:18,800
and now if he goes and changes his name

00:30:16,940 --> 00:30:20,330
he's going to have a problem because

00:30:18,800 --> 00:30:22,490
he's not going to be able to reprint all

00:30:20,330 --> 00:30:24,260
the books but conveniently for us we

00:30:22,490 --> 00:30:26,810
have a database and so he can update his

00:30:24,260 --> 00:30:28,850
name and so in you in our UI he'll

00:30:26,810 --> 00:30:32,660
actually show up consistently even if we

00:30:28,850 --> 00:30:36,200
just query for the author now okay that

00:30:32,660 --> 00:30:39,940
was for simply running queries right but

00:30:36,200 --> 00:30:39,940
we also need to update the cache and

00:30:40,180 --> 00:30:44,060
we're gonna have to update the cache in

00:30:42,440 --> 00:30:48,470
just five minutes because that's all the

00:30:44,060 --> 00:30:50,930
time that I have left so when might you

00:30:48,470 --> 00:30:53,810
want to update the cache a very common

00:30:50,930 --> 00:30:55,610
thing is you're running a query or you

00:30:53,810 --> 00:30:57,350
running another query and the data has

00:30:55,610 --> 00:30:59,450
changed on the server so you want to

00:30:57,350 --> 00:31:00,560
update your cache and you want to show I

00:30:59,450 --> 00:31:01,940
have that show up in your UI

00:31:00,560 --> 00:31:05,540
consistently everywhere

00:31:01,940 --> 00:31:07,550
another common case is the user is

00:31:05,540 --> 00:31:09,470
actually you know mutating some data

00:31:07,550 --> 00:31:10,860
he's changing some data so for example

00:31:09,470 --> 00:31:14,850
the user

00:31:10,860 --> 00:31:17,580
Changez I don't know they change a post

00:31:14,850 --> 00:31:19,559
title you want that to be reflected in

00:31:17,580 --> 00:31:21,750
that UI as quickly as possible so you do

00:31:19,559 --> 00:31:23,730
something that's called optimistic UI

00:31:21,750 --> 00:31:25,580
but you have to do that on the client

00:31:23,730 --> 00:31:27,690
and without knowing it from the server

00:31:25,580 --> 00:31:29,040
another example is when you have

00:31:27,690 --> 00:31:33,179
subscriptions and things are actually

00:31:29,040 --> 00:31:34,740
coming down from the server so this was

00:31:33,179 --> 00:31:38,700
actually the most challenging thing that

00:31:34,740 --> 00:31:41,190
we encountered in Apollo client and it

00:31:38,700 --> 00:31:44,070
led to some very interesting bugs that

00:31:41,190 --> 00:31:47,549
we didn't initially anticipate and it

00:31:44,070 --> 00:31:49,590
even led to a bug that when we fixed it

00:31:47,549 --> 00:31:52,250
caused people to say that we introduced

00:31:49,590 --> 00:31:54,630
a bug and that's really interesting so

00:31:52,250 --> 00:31:58,320
we explored a couple of ways for

00:31:54,630 --> 00:32:00,090
updating the cache and we actually still

00:31:58,320 --> 00:32:04,770
have all of these ways in Apollo client

00:32:00,090 --> 00:32:08,190
because they're like some some ways are

00:32:04,770 --> 00:32:09,330
better suited for for for simple tasks

00:32:08,190 --> 00:32:12,179
and some ways are better suited for

00:32:09,330 --> 00:32:13,799
complicated tasks but we explore

00:32:12,179 --> 00:32:16,400
different ways such as reef etching

00:32:13,799 --> 00:32:21,080
let's say you're you have a mutation

00:32:16,400 --> 00:32:24,299
that inserts an element into the list or

00:32:21,080 --> 00:32:27,690
let's let's take for example the list of

00:32:24,299 --> 00:32:30,990
you know the what do we have

00:32:27,690 --> 00:32:33,510
we had the list of repositories in the

00:32:30,990 --> 00:32:35,360
demo that I showed you if you insert an

00:32:33,510 --> 00:32:39,150
item into that list

00:32:35,360 --> 00:32:40,860
how do you know on the client that that

00:32:39,150 --> 00:32:42,929
list has changed that there should be a

00:32:40,860 --> 00:32:44,990
new item because right you're just

00:32:42,929 --> 00:32:48,660
running a mutation that says create

00:32:44,990 --> 00:32:50,669
repository or like add repository but

00:32:48,660 --> 00:32:53,370
there's no way for your graphical client

00:32:50,669 --> 00:32:54,900
to know that that item should actually

00:32:53,370 --> 00:32:56,730
go into that list because that knowledge

00:32:54,900 --> 00:32:59,429
is not encoded on the client it's only

00:32:56,730 --> 00:33:01,350
encoded on the server so one way that

00:32:59,429 --> 00:33:04,410
you can make sure that your UI updates

00:33:01,350 --> 00:33:07,500
after you created a new item is by just

00:33:04,410 --> 00:33:09,750
reef etching the previous query so the

00:33:07,500 --> 00:33:12,870
developer hopefully knows that the list

00:33:09,750 --> 00:33:16,290
of repositories has to change when a new

00:33:12,870 --> 00:33:18,600
repository was added so he can call we

00:33:16,290 --> 00:33:20,370
fetch queries and here's kind of how

00:33:18,600 --> 00:33:23,049
that works in Apollo client right now

00:33:20,370 --> 00:33:25,239
you can pass it an array

00:33:23,049 --> 00:33:28,440
oh I don't have a mouse here so you

00:33:25,239 --> 00:33:31,139
cannot see what I'm showing and I don't

00:33:28,440 --> 00:33:34,149
mmm I'm not gonna walk over there but

00:33:31,139 --> 00:33:36,639
you see basically you can pass it a

00:33:34,149 --> 00:33:42,159
query you say refetch queries and you

00:33:36,639 --> 00:33:45,070
say the query update cache has to rerun

00:33:42,159 --> 00:33:48,009
so basically we're doing this when we're

00:33:45,070 --> 00:33:51,009
inserting a comment when we're inserting

00:33:48,009 --> 00:33:52,749
a comment we want to reload the list of

00:33:51,009 --> 00:33:55,239
all comments which is what that query

00:33:52,749 --> 00:33:57,190
does now that's kind of costly but it's

00:33:55,239 --> 00:33:59,679
a really simple way to get started right

00:33:57,190 --> 00:34:02,200
you just specify hey when I insert an

00:33:59,679 --> 00:34:04,840
item like you might as well specify to

00:34:02,200 --> 00:34:06,850
reload the like all queries but if you

00:34:04,840 --> 00:34:08,319
want you can just specify the individual

00:34:06,850 --> 00:34:11,530
query that you want to update

00:34:08,319 --> 00:34:13,270
so that's reef etching but that's really

00:34:11,530 --> 00:34:15,369
kind of wasteful and it actually

00:34:13,270 --> 00:34:17,470
requires the update to have already

00:34:15,369 --> 00:34:19,690
happened on the server now if you want

00:34:17,470 --> 00:34:21,129
to do optimistic UI that update that

00:34:19,690 --> 00:34:22,780
optimistic update never goes to the

00:34:21,129 --> 00:34:24,879
server so you're gonna be able to do it

00:34:22,780 --> 00:34:26,770
on the client what that means is you're

00:34:24,879 --> 00:34:28,720
gonna have to be able to somehow write

00:34:26,770 --> 00:34:31,270
to the cache now that's the thing that

00:34:28,720 --> 00:34:34,000
update queries lets you do so in update

00:34:31,270 --> 00:34:36,460
queries you provide the name of a query

00:34:34,000 --> 00:34:38,980
that's currently active and you say give

00:34:36,460 --> 00:34:41,679
me the previous result and give me the

00:34:38,980 --> 00:34:44,829
result of the mutation and I'll actually

00:34:41,679 --> 00:34:47,230
figure out what the new result of that

00:34:44,829 --> 00:34:50,440
query should look like so in this case

00:34:47,230 --> 00:34:52,210
we inserted a new comment and so we want

00:34:50,440 --> 00:34:54,190
to get that new comment in the mutation

00:34:52,210 --> 00:34:56,319
we want to get the previous result of

00:34:54,190 --> 00:34:59,290
the list of comments and then we just

00:34:56,319 --> 00:35:01,750
call unshifted basically put that

00:34:59,290 --> 00:35:03,400
comment on the front of comments now

00:35:01,750 --> 00:35:05,859
that will work with update queries and

00:35:03,400 --> 00:35:08,619
it will work or it will work with

00:35:05,859 --> 00:35:10,450
optimistic UI and it will also work with

00:35:08,619 --> 00:35:15,280
the server result that comes back which

00:35:10,450 --> 00:35:17,799
is really convenient another way is

00:35:15,280 --> 00:35:21,220
maybe you don't want to specify how the

00:35:17,799 --> 00:35:23,619
update happens in the mutation maybe you

00:35:21,220 --> 00:35:25,839
want to specify how that update happens

00:35:23,619 --> 00:35:27,880
in all the queries that you have because

00:35:25,839 --> 00:35:29,920
maybe you just know that for your list

00:35:27,880 --> 00:35:32,589
of comments you know which mutations

00:35:29,920 --> 00:35:35,530
update that instead of spying specifying

00:35:32,589 --> 00:35:36,910
with every single mutation which other

00:35:35,530 --> 00:35:39,369
queries it effects

00:35:36,910 --> 00:35:41,650
you could specify with each query what

00:35:39,369 --> 00:35:43,839
mutations effect that query and that's

00:35:41,650 --> 00:35:45,700
basically what reducer does and so a new

00:35:43,839 --> 00:35:47,910
reducer you get the previous result of

00:35:45,700 --> 00:35:50,530
the query and you also get an action

00:35:47,910 --> 00:35:52,720
that could potentially update that query

00:35:50,530 --> 00:35:55,089
now you look at the action and is it an

00:35:52,720 --> 00:35:57,400
Apollo mutation result great was the

00:35:55,089 --> 00:35:59,650
operation name submit comment okay in

00:35:57,400 --> 00:36:01,390
that case unshifted your own comments

00:35:59,650 --> 00:36:04,450
now that helps you kind of concentrate

00:36:01,390 --> 00:36:07,960
everything in one place now so far so

00:36:04,450 --> 00:36:10,780
good but the problem is or the problem

00:36:07,960 --> 00:36:13,150
that we ran into is that we thought why

00:36:10,780 --> 00:36:16,059
would anyone ever have to update a query

00:36:13,150 --> 00:36:17,589
that is not currently active and so we

00:36:16,059 --> 00:36:20,260
provided this convenient name or a

00:36:17,589 --> 00:36:22,119
convenient way of calling update queries

00:36:20,260 --> 00:36:24,369
you just give it the name of a query

00:36:22,119 --> 00:36:25,869
that was active and then it would update

00:36:24,369 --> 00:36:28,000
the cache right and we already have the

00:36:25,869 --> 00:36:30,190
query we know all the sets of variables

00:36:28,000 --> 00:36:31,990
that that query was called with and so

00:36:30,190 --> 00:36:33,579
we can run this update against all the

00:36:31,990 --> 00:36:36,819
values in the cache and the same with

00:36:33,579 --> 00:36:38,980
reducer but actually it turned out

00:36:36,819 --> 00:36:41,230
people want to be able to update stuff

00:36:38,980 --> 00:36:43,059
that isn't even on the page so those

00:36:41,230 --> 00:36:45,220
queries are no longer active right

00:36:43,059 --> 00:36:47,500
maybe your maybe your user was clicking

00:36:45,220 --> 00:36:49,180
through lots of pages and when the page

00:36:47,500 --> 00:36:52,299
isn't showing that component you don't

00:36:49,180 --> 00:36:53,559
want the query to be active but you

00:36:52,299 --> 00:36:55,390
might still want to be able to update

00:36:53,559 --> 00:36:56,799
the cache because the user might come

00:36:55,390 --> 00:36:58,510
back and then you want to make sure

00:36:56,799 --> 00:37:01,270
you're showing them up-to-date data or

00:36:58,510 --> 00:37:04,450
at least yuri fetch so you want to know

00:37:01,270 --> 00:37:05,829
that that's not consistent now when we

00:37:04,450 --> 00:37:07,299
initially designed these features we

00:37:05,829 --> 00:37:09,700
didn't expect people to update things

00:37:07,299 --> 00:37:11,289
that were off the page but they were

00:37:09,700 --> 00:37:13,270
actually using these features in that

00:37:11,289 --> 00:37:16,779
way because we'd forgotten to remove

00:37:13,270 --> 00:37:18,789
some expired queries from the cache so

00:37:16,779 --> 00:37:20,109
everything was still in the cache and

00:37:18,789 --> 00:37:22,029
Apollo client was still actively

00:37:20,109 --> 00:37:24,849
watching those queries which let people

00:37:22,029 --> 00:37:27,940
update data that wasn't currently in the

00:37:24,849 --> 00:37:31,599
cache or which that wasn't currently

00:37:27,940 --> 00:37:33,309
being shown on the page and then when we

00:37:31,599 --> 00:37:35,920
actually cleaned up the you know the

00:37:33,309 --> 00:37:37,119
list of queries and we fixed that bug a

00:37:35,920 --> 00:37:38,890
lot of people came to us and they

00:37:37,119 --> 00:37:40,510
complained and they said like hey wait a

00:37:38,890 --> 00:37:42,279
minute I can no longer update things

00:37:40,510 --> 00:37:43,839
that are not on my page and I said like

00:37:42,279 --> 00:37:46,000
well I was never intended that way it

00:37:43,839 --> 00:37:47,589
was a bug it was not a feature and then

00:37:46,000 --> 00:37:50,349
people said well we kind of liked that

00:37:47,589 --> 00:37:50,860
feature and so instead of arguing with

00:37:50,349 --> 00:37:53,650
people

00:37:50,860 --> 00:37:55,750
which is never a good idea we came up

00:37:53,650 --> 00:37:57,430
with a new way of updating cash which

00:37:55,750 --> 00:37:59,290
we're pretty happy with in which we

00:37:57,430 --> 00:38:02,050
recommend that everyone uses now and

00:37:59,290 --> 00:38:05,170
that's the update function so the main

00:38:02,050 --> 00:38:07,300
problem with update queries was that it

00:38:05,170 --> 00:38:09,130
required you to specify a name of a

00:38:07,300 --> 00:38:10,630
query that you want to update it's much

00:38:09,130 --> 00:38:13,240
better if you actually just provide the

00:38:10,630 --> 00:38:14,890
query string and really what you want is

00:38:13,240 --> 00:38:16,390
you want to be able to imperative lis

00:38:14,890 --> 00:38:17,830
update the cache so you're gonna be able

00:38:16,390 --> 00:38:20,200
to say hey give me this part of the

00:38:17,830 --> 00:38:22,030
cache and update it but you don't want

00:38:20,200 --> 00:38:24,070
to operate on the level of like

00:38:22,030 --> 00:38:25,600
individual nodes in the normalized cache

00:38:24,070 --> 00:38:28,480
because that's kind of a nightmare

00:38:25,600 --> 00:38:31,000
so what update lets you do is it lets

00:38:28,480 --> 00:38:33,340
you read data out of the cache so you

00:38:31,000 --> 00:38:35,770
can give it a query you read it out of

00:38:33,340 --> 00:38:38,080
cache and then you can modify that data

00:38:35,770 --> 00:38:40,090
in whatever way you want you can add new

00:38:38,080 --> 00:38:43,810
data to it and then you just call write

00:38:40,090 --> 00:38:46,090
query and then Apollo client behind the

00:38:43,810 --> 00:38:48,640
scenes magically will apply this as an

00:38:46,090 --> 00:38:50,770
optimistic you update if you're like

00:38:48,640 --> 00:38:52,780
response was an optimistic response it

00:38:50,770 --> 00:38:54,640
will roll it back when the real response

00:38:52,780 --> 00:38:56,920
comes back and it will apply the real

00:38:54,640 --> 00:38:59,200
update with the new data and so now we

00:38:56,920 --> 00:39:02,860
have basically four imperative ways of

00:38:59,200 --> 00:39:05,890
updating store or like two ways I guess

00:39:02,860 --> 00:39:08,890
but you can call read query you can call

00:39:05,890 --> 00:39:11,110
read fragment in which case you need to

00:39:08,890 --> 00:39:13,240
provided the ID of a node which means

00:39:11,110 --> 00:39:15,550
you can start at any place in the graph

00:39:13,240 --> 00:39:17,500
to select data out of it or anywhere in

00:39:15,550 --> 00:39:19,840
the normalized cache and then you can

00:39:17,500 --> 00:39:22,690
call write query and you can call write

00:39:19,840 --> 00:39:26,170
fragment and I think I'm Way over time

00:39:22,690 --> 00:39:27,280
so I'm gonna skip subscriptions am I

00:39:26,170 --> 00:39:29,350
gonna skip subscriptions

00:39:27,280 --> 00:39:31,030
yes I'm gonna skip subscriptions all

00:39:29,350 --> 00:39:33,400
right I'm probably also gonna skip

00:39:31,030 --> 00:39:37,090
almost skip what's next but there's not

00:39:33,400 --> 00:39:38,590
much to say here anyway so you just miss

00:39:37,090 --> 00:39:41,350
the subscriptions part I just talked

00:39:38,590 --> 00:39:44,800
really quickly but we're gonna build

00:39:41,350 --> 00:39:48,610
next live queries we're working on

00:39:44,800 --> 00:39:50,020
persistent offline storage and then the

00:39:48,610 --> 00:39:52,390
one big thing that we're really working

00:39:50,020 --> 00:39:55,000
on is making sure that people can use

00:39:52,390 --> 00:39:56,710
one client on all platforms so I was

00:39:55,000 --> 00:39:59,080
talking about the JavaScript client that

00:39:56,710 --> 00:40:01,300
we built which we call Apollo client but

00:39:59,080 --> 00:40:03,520
we actually also have Apollo iOS and we

00:40:01,300 --> 00:40:04,630
have Apollo Android and we're working on

00:40:03,520 --> 00:40:07,060
making all of those

00:40:04,630 --> 00:40:09,190
or we're working on aligning the API of

00:40:07,060 --> 00:40:12,160
all of those clients so when you have a

00:40:09,190 --> 00:40:15,250
mobile app you can use the same

00:40:12,160 --> 00:40:17,290
persistent store in your mobile app and

00:40:15,250 --> 00:40:19,930
you can run queries from react native

00:40:17,290 --> 00:40:22,150
with the JavaScript Apollo client write

00:40:19,930 --> 00:40:24,880
those to the same persistence store that

00:40:22,150 --> 00:40:27,160
your Swift client for iOS would write to

00:40:24,880 --> 00:40:29,050
which means your app can have some views

00:40:27,160 --> 00:40:31,270
in react native and it can have some

00:40:29,050 --> 00:40:33,160
views in native and they will use the

00:40:31,270 --> 00:40:35,410
same shared cache data and they will

00:40:33,160 --> 00:40:37,570
work in a very similar way anyway that's

00:40:35,410 --> 00:40:40,430
all I have for today

00:40:37,570 --> 00:40:47,630
yeah thanks for

00:40:40,430 --> 00:40:47,630

YouTube URL: https://www.youtube.com/watch?v=9lM5Q4QzlV4


