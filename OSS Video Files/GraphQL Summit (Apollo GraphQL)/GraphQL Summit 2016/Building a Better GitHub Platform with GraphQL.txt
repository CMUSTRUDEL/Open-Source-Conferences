Title: Building a Better GitHub Platform with GraphQL
Publication date: 2016-11-02
Playlist: GraphQL Summit 2016
Description: 
	Brandon Black, GitHub

At GitHub we build products and tools to help empower developers and enable them to collaboratively build software with millions of other developers from all around the world. Internally, we use those same tools to build GitHub itself, and externally we support a broad eco-system of innovative products and services that work to further extend that vision. GraphQL is now a part of making all of this possible and represents a promising path forward for building a better platform both internally and externally. In this talk, we'll share some of the motivations and driving factors behind the decision to invest in GraphQL at GitHub, why we chose to expose our GraphQL interface externally to developers and some of the challenges and learnings we've encountered along the way.

Try GitHub's GraphQL client for Ruby apps: https://github.com/github/graphql-client

Learn more about GraphQL Summit:
http://graphqlsummit.com

Join our GraphQL SF meetup to hear more about GraphQL best practices and implementations: 
http://meetup.com/GraphQL-SF/
Captions: 
	00:00:03,899 --> 00:00:09,530
so thank you guys all for having us here

00:00:06,840 --> 00:00:12,030
github is super excited to talk about

00:00:09,530 --> 00:00:13,860
the work we've been doing with graph QL

00:00:12,030 --> 00:00:17,009
and kind of what it means for us both

00:00:13,860 --> 00:00:19,890
internally and externally for for

00:00:17,009 --> 00:00:21,270
developers outside the company as he

00:00:19,890 --> 00:00:22,259
mentioned I'm Brandon black I work on

00:00:21,270 --> 00:00:25,380
the platform team

00:00:22,259 --> 00:00:27,739
I'm engineer on the platform team and in

00:00:25,380 --> 00:00:32,730
the past I've worked at Twitter Facebook

00:00:27,739 --> 00:00:36,120
MongoDB and way way way long ago MySpace

00:00:32,730 --> 00:00:39,690
so if you have your profile up still you

00:00:36,120 --> 00:00:41,339
know friend me let's go yeah so first I

00:00:39,690 --> 00:00:43,920
want to just introduce some of the

00:00:41,339 --> 00:00:47,269
members of the team at github who have

00:00:43,920 --> 00:00:50,730
been working on the graph QL interface

00:00:47,269 --> 00:00:52,589
these are the beautiful folks behind the

00:00:50,730 --> 00:00:54,480
work there there are at least two of

00:00:52,589 --> 00:00:56,609
them in the audience here so make sure

00:00:54,480 --> 00:00:58,289
to find them corner room ask them really

00:00:56,609 --> 00:00:59,879
difficult deep technical questions I

00:00:58,289 --> 00:01:01,979
love that

00:00:59,879 --> 00:01:04,620
but we're part of a broader team at

00:01:01,979 --> 00:01:07,190
github that basically services all the

00:01:04,620 --> 00:01:10,290
backend code for for the team at github

00:01:07,190 --> 00:01:12,630
the company's engineering organ of

00:01:10,290 --> 00:01:14,040
roughly divided between kind of

00:01:12,630 --> 00:01:16,560
application engineers that focus on

00:01:14,040 --> 00:01:18,150
feature work and platform engineers that

00:01:16,560 --> 00:01:20,490
focus on everything from infrastructure

00:01:18,150 --> 00:01:23,040
to data modeling to all sorts of other

00:01:20,490 --> 00:01:24,720
stuff the rest ap is and this particular

00:01:23,040 --> 00:01:27,450
team is called the platform interface

00:01:24,720 --> 00:01:31,110
team and what we've spent the majority

00:01:27,450 --> 00:01:33,150
of the year working on is is what it

00:01:31,110 --> 00:01:35,580
sounds like an interface to the platform

00:01:33,150 --> 00:01:38,640
and that interface happens to be graph

00:01:35,580 --> 00:01:42,540
QL and so today what I'm going to do in

00:01:38,640 --> 00:01:46,590
this talk is just run through you know

00:01:42,540 --> 00:01:48,630
some of the motivations we had for

00:01:46,590 --> 00:01:50,790
building the platform for you know

00:01:48,630 --> 00:01:52,080
exposing it publicly as well you guys

00:01:50,790 --> 00:01:54,300
might have seen a universe that we did

00:01:52,080 --> 00:01:56,010
that and you know kind of what it means

00:01:54,300 --> 00:01:58,920
for us internally and and some of the

00:01:56,010 --> 00:02:01,530
the thinking behind what we did also

00:01:58,920 --> 00:02:03,090
take a moment to share you know some of

00:02:01,530 --> 00:02:05,280
the the learnings we've had we've been

00:02:03,090 --> 00:02:07,800
in production for about a month with the

00:02:05,280 --> 00:02:11,550
public API we've been in production in

00:02:07,800 --> 00:02:13,349
the in the UI github itself for a number

00:02:11,550 --> 00:02:17,099
of features for a lot longer than that

00:02:13,349 --> 00:02:20,950
so we'll talk about some of that as well

00:02:17,099 --> 00:02:23,019
so get-ups platform today you know when

00:02:20,950 --> 00:02:24,670
you look at kind of the the footprint

00:02:23,019 --> 00:02:26,439
github has on the web I'm sure just

00:02:24,670 --> 00:02:28,000
about everybody here uses github in some

00:02:26,439 --> 00:02:30,310
form or fashion or at least encounters

00:02:28,000 --> 00:02:34,239
it regularly you know we're home to over

00:02:30,310 --> 00:02:37,150
38 million projects we're basically the

00:02:34,239 --> 00:02:40,989
central go-to spot for for most modern

00:02:37,150 --> 00:02:43,870
open-source software projects it's quite

00:02:40,989 --> 00:02:46,689
a feat really we have a collaborative

00:02:43,870 --> 00:02:47,950
community of over 15 million people

00:02:46,689 --> 00:02:52,060
learning sharing and working together

00:02:47,950 --> 00:02:54,569
every day basically a lot of people work

00:02:52,060 --> 00:02:56,680
every day all day long off of github

00:02:54,569 --> 00:02:57,970
share and collaborate all day long off

00:02:56,680 --> 00:03:01,659
of github it's it's a pretty powerful

00:02:57,970 --> 00:03:04,950
platform in a variety of ways there are

00:03:01,659 --> 00:03:07,030
currently over 250,000

00:03:04,950 --> 00:03:10,690
applications building on the platform

00:03:07,030 --> 00:03:12,099
quarter of a million plans and over 6

00:03:10,690 --> 00:03:14,379
million users have both applications

00:03:12,099 --> 00:03:15,819
installed so there's actually a lot of

00:03:14,379 --> 00:03:17,920
external developers doing a lot of work

00:03:15,819 --> 00:03:19,720
through the API building on the platform

00:03:17,920 --> 00:03:23,230
in addition to github itself building on

00:03:19,720 --> 00:03:27,280
this platform code and of course we have

00:03:23,230 --> 00:03:30,160
a very broad ecosystem of innovated

00:03:27,280 --> 00:03:32,889
innovative integrators you know folks

00:03:30,160 --> 00:03:35,799
like folks like waffle folks like Travis

00:03:32,889 --> 00:03:37,510
CI that are doing amazing things for the

00:03:35,799 --> 00:03:40,150
user experience outside of the github

00:03:37,510 --> 00:03:41,650
product itself adding value in their own

00:03:40,150 --> 00:03:43,359
way and you know becoming a very

00:03:41,650 --> 00:03:48,190
critical part of the tools we all use

00:03:43,359 --> 00:03:51,280
every day so thinking about tomorrow a

00:03:48,190 --> 00:03:54,489
little bit and you know what we want the

00:03:51,280 --> 00:03:56,889
platform to evolve to you know

00:03:54,489 --> 00:03:58,540
internally we want to be very

00:03:56,889 --> 00:04:01,989
forward-thinking about how we build out

00:03:58,540 --> 00:04:05,470
services obviously github right now is

00:04:01,989 --> 00:04:08,079
actually largely a giant monolithic

00:04:05,470 --> 00:04:09,489
single application still we have

00:04:08,079 --> 00:04:11,500
different services under the hood for

00:04:09,489 --> 00:04:13,239
four different things but the core

00:04:11,500 --> 00:04:15,940
application itself is still one giant

00:04:13,239 --> 00:04:17,769
thing and obviously that kind of becomes

00:04:15,940 --> 00:04:20,079
difficult difficult to scale in places

00:04:17,769 --> 00:04:21,909
there are other places where you know

00:04:20,079 --> 00:04:24,510
specialized tools different technologies

00:04:21,909 --> 00:04:26,889
might be helpful and so thinking about

00:04:24,510 --> 00:04:27,950
where we want the platform to go in the

00:04:26,889 --> 00:04:30,320
future in terms

00:04:27,950 --> 00:04:32,480
of how we build out services and

00:04:30,320 --> 00:04:35,120
stand-up services underneath that

00:04:32,480 --> 00:04:38,720
umbrella of platform is is a critical

00:04:35,120 --> 00:04:41,990
thing and again like I mentioned adding

00:04:38,720 --> 00:04:44,630
diversity the tech stack so new types of

00:04:41,990 --> 00:04:47,210
data stores new types of languages and

00:04:44,630 --> 00:04:48,920
technologies we're largely Ruby but you

00:04:47,210 --> 00:04:50,000
know maybe there's something that go

00:04:48,920 --> 00:04:51,290
would be better for maybe there's

00:04:50,000 --> 00:04:53,450
something that Scala would be better for

00:04:51,290 --> 00:04:55,940
and so you know having the ability to

00:04:53,450 --> 00:04:57,680
very cleanly stand up new types of

00:04:55,940 --> 00:05:01,360
things underneath this platform

00:04:57,680 --> 00:05:04,730
interface is something we're looking for

00:05:01,360 --> 00:05:08,200
we also want to simplify and improve how

00:05:04,730 --> 00:05:10,370
teams at github work basically make

00:05:08,200 --> 00:05:13,130
shipping new features shipping new

00:05:10,370 --> 00:05:15,140
product a seamless experience you know

00:05:13,130 --> 00:05:17,630
within the platform team we have a lot

00:05:15,140 --> 00:05:21,290
of expertise on you know good data

00:05:17,630 --> 00:05:22,880
modeling good practices considering

00:05:21,290 --> 00:05:25,790
things that maybe not every engineering

00:05:22,880 --> 00:05:28,010
the company would consider and so one

00:05:25,790 --> 00:05:30,650
goal of this is to kind of simplify that

00:05:28,010 --> 00:05:32,840
and make it a much easier process for

00:05:30,650 --> 00:05:37,670
for engineers all around the company to

00:05:32,840 --> 00:05:40,220
ship but at the same time we don't want

00:05:37,670 --> 00:05:41,750
to make it a gate in any way we want to

00:05:40,220 --> 00:05:48,740
make sure we have a back-end layer that

00:05:41,750 --> 00:05:52,430
everyone can contribute to so the other

00:05:48,740 --> 00:05:55,160
kind of ancillary goal that we have that

00:05:52,430 --> 00:05:57,290
that's fairly fairly good and worth

00:05:55,160 --> 00:05:59,330
mentioning is we want to improve how our

00:05:57,290 --> 00:06:02,020
own off-site clients work and what I

00:05:59,330 --> 00:06:05,000
mean by that is like github desktop

00:06:02,020 --> 00:06:08,000
github you know can format get up for

00:06:05,000 --> 00:06:10,040
Windows those kind of things you know

00:06:08,000 --> 00:06:13,130
currently a lot of those they leverage

00:06:10,040 --> 00:06:14,330
the REST API quite a bit and there's

00:06:13,130 --> 00:06:16,850
obviously some games that they could get

00:06:14,330 --> 00:06:18,560
from graph QL a little bit later in the

00:06:16,850 --> 00:06:20,030
presentation I'll talk about one of

00:06:18,560 --> 00:06:23,680
those in specific and some things that

00:06:20,030 --> 00:06:23,680
we have coming and planned for that

00:06:25,430 --> 00:06:30,290
so externally you know some similar

00:06:27,800 --> 00:06:31,670
concerns right one of the things we

00:06:30,290 --> 00:06:34,130
really wanted for the future of the

00:06:31,670 --> 00:06:36,320
platform is to be more transparent and

00:06:34,130 --> 00:06:37,880
you know if you if you kept track of the

00:06:36,320 --> 00:06:41,660
announcements we made with our public

00:06:37,880 --> 00:06:43,100
API public graphical API at universe you

00:06:41,660 --> 00:06:44,750
know two of the things we did there as

00:06:43,100 --> 00:06:46,940
well as we released a public road map

00:06:44,750 --> 00:06:49,120
and we released a public community site

00:06:46,940 --> 00:06:51,620
for collecting feedback about that API

00:06:49,120 --> 00:06:53,240
so we're interacting more with our with

00:06:51,620 --> 00:06:55,160
our community both broadly and

00:06:53,240 --> 00:06:56,690
specifically with some of the more high

00:06:55,160 --> 00:06:59,720
volume unit integrators that we work

00:06:56,690 --> 00:07:00,710
with frequently but at the same time you

00:06:59,720 --> 00:07:04,480
know just trying to be very transparent

00:07:00,710 --> 00:07:07,490
about where we're headed as a platform

00:07:04,480 --> 00:07:09,530
you know currently with the REST API one

00:07:07,490 --> 00:07:12,110
pain point that we often hear and

00:07:09,530 --> 00:07:14,330
experience ourselves and getting the

00:07:12,110 --> 00:07:17,930
data you want can often require multiple

00:07:14,330 --> 00:07:19,570
or many calls to the right API and on

00:07:17,930 --> 00:07:22,310
top of that you know you're fetching

00:07:19,570 --> 00:07:23,840
repo a dozen times and getting the whole

00:07:22,310 --> 00:07:25,940
repo object you might only need the name

00:07:23,840 --> 00:07:28,370
or a status or something like that it

00:07:25,940 --> 00:07:30,200
just it's inefficient and you don't

00:07:28,370 --> 00:07:31,940
awkward it's a it's a it's not a great

00:07:30,200 --> 00:07:33,830
user interface or user experience for

00:07:31,940 --> 00:07:38,060
the developer and then it's not really

00:07:33,830 --> 00:07:40,580
great for us either this is a big one

00:07:38,060 --> 00:07:43,630
for me how many of you currently use an

00:07:40,580 --> 00:07:46,340
API or have know about an API anyway

00:07:43,630 --> 00:07:49,820
we're the the core product differs

00:07:46,340 --> 00:07:52,280
greatly from the the API that that comes

00:07:49,820 --> 00:07:54,650
along with it it tends to be a common

00:07:52,280 --> 00:07:55,790
thing in some cases it sometimes feels

00:07:54,650 --> 00:07:57,620
like you're dealing with a you know a

00:07:55,790 --> 00:08:00,320
bipolar product or something just

00:07:57,620 --> 00:08:02,660
because it's so very different and one

00:08:00,320 --> 00:08:04,970
of the great things about you know

00:08:02,660 --> 00:08:07,550
exposing the same interface that we work

00:08:04,970 --> 00:08:09,290
on internally externally is we close

00:08:07,550 --> 00:08:10,610
that feature gap you know never again is

00:08:09,290 --> 00:08:13,910
a new feature not available in the API

00:08:10,610 --> 00:08:15,830
it's always first built in graphic you

00:08:13,910 --> 00:08:20,870
all for us to use and then we we expose

00:08:15,830 --> 00:08:23,120
it externally you know improving

00:08:20,870 --> 00:08:25,780
engagement and adoption through better

00:08:23,120 --> 00:08:29,780
tooling I think this is an area where

00:08:25,780 --> 00:08:31,940
technologies like graph QL shine you

00:08:29,780 --> 00:08:35,210
know the rest interface there's all

00:08:31,940 --> 00:08:36,919
sorts of documentation and and learning

00:08:35,210 --> 00:08:39,140
that you kind of have to apply in terms

00:08:36,919 --> 00:08:41,419
of how underneath that that rest

00:08:39,140 --> 00:08:43,340
interface things actually behave and

00:08:41,419 --> 00:08:44,960
interact with graph QL you obviously

00:08:43,340 --> 00:08:47,720
have that too but a lot of the stuff you

00:08:44,960 --> 00:08:48,160
get for free are things like you know

00:08:47,720 --> 00:08:50,230
all

00:08:48,160 --> 00:08:51,490
it's of introspection and and the

00:08:50,230 --> 00:08:53,500
documentation that comes along with it

00:08:51,490 --> 00:08:58,060
and then in terms of onboarding

00:08:53,500 --> 00:09:00,430
resources it's fun to show developers

00:08:58,060 --> 00:09:01,779
internally at github graph QL and

00:09:00,430 --> 00:09:04,209
specifically show them something like

00:09:01,779 --> 00:09:06,189
graphical and just watch the light come

00:09:04,209 --> 00:09:08,470
on like it's it's the value proposition

00:09:06,189 --> 00:09:09,790
is immediate so having a system like

00:09:08,470 --> 00:09:12,100
that that gives us better onboarding

00:09:09,790 --> 00:09:15,100
resources it can help internally and

00:09:12,100 --> 00:09:20,800
externally and you kind of lower that

00:09:15,100 --> 00:09:22,420
barrier for adoption so real quickly I'm

00:09:20,800 --> 00:09:25,689
going to switch just for those of you

00:09:22,420 --> 00:09:28,180
who haven't seen what we released at

00:09:25,689 --> 00:09:31,810
Universe I'm going to do a quick little

00:09:28,180 --> 00:09:34,360
demo so at universe what we did was we

00:09:31,810 --> 00:09:36,180
unveiled that we have been for for quite

00:09:34,360 --> 00:09:38,139
some time now since about March

00:09:36,180 --> 00:09:40,209
internally working on a graph QL

00:09:38,139 --> 00:09:43,269
interface and what ended up happening

00:09:40,209 --> 00:09:45,310
was it didn't take long for for those of

00:09:43,269 --> 00:09:47,079
us working on it so you know like I

00:09:45,310 --> 00:09:49,629
mentioned before that the platform team

00:09:47,079 --> 00:09:52,600
at github is also responsible for the

00:09:49,629 --> 00:09:56,050
external API the REST API historically

00:09:52,600 --> 00:09:57,939
has been anyway and we you know it

00:09:56,050 --> 00:10:01,990
didn't take long for us to decide that

00:09:57,939 --> 00:10:07,360
the you know the value of this I may be

00:10:01,990 --> 00:10:09,490
tempting the live demo gods here all

00:10:07,360 --> 00:10:12,069
right there we go so the you know the

00:10:09,490 --> 00:10:13,209
the didn't take long for us to realize

00:10:12,069 --> 00:10:15,430
that you know what we were building

00:10:13,209 --> 00:10:18,339
internally obviously had some real value

00:10:15,430 --> 00:10:20,769
for external developers as well and so

00:10:18,339 --> 00:10:22,870
we we pushed hard to be able to release

00:10:20,769 --> 00:10:25,439
the same thing we were we were working

00:10:22,870 --> 00:10:27,310
on externally for for everybody to use

00:10:25,439 --> 00:10:29,769
one of the new features that we

00:10:27,310 --> 00:10:32,860
announced at Universe was the the

00:10:29,769 --> 00:10:36,100
project's feature at github it's kind of

00:10:32,860 --> 00:10:39,639
a scrum style board Kanban style board

00:10:36,100 --> 00:10:41,430
for managing projects and github and one

00:10:39,639 --> 00:10:45,399
of the things we released with it is

00:10:41,430 --> 00:10:49,350
this wonderful graph QL Explorer and

00:10:45,399 --> 00:10:51,879
this is of course just graphical but and

00:10:49,350 --> 00:10:56,920
just kind of shows you the API we've

00:10:51,879 --> 00:11:00,670
built just a quick demo here you know

00:10:56,920 --> 00:11:01,870
obviously easy to read read data pretty

00:11:00,670 --> 00:11:05,740
quickly

00:11:01,870 --> 00:11:06,700
and in traverse the the entire schema

00:11:05,740 --> 00:11:08,590
from github

00:11:06,700 --> 00:11:10,960
we actually have I'll talk a little bit

00:11:08,590 --> 00:11:13,390
more about how we deal with public

00:11:10,960 --> 00:11:16,030
versus internal but we actually have the

00:11:13,390 --> 00:11:19,090
vast majority of anything you could

00:11:16,030 --> 00:11:20,290
possibly want from github available in a

00:11:19,090 --> 00:11:22,840
schema they're actually a few things

00:11:20,290 --> 00:11:25,080
that aren't available but real quickly I

00:11:22,840 --> 00:11:28,600
just want to show you that you know

00:11:25,080 --> 00:11:30,400
proof that we actually do have you know

00:11:28,600 --> 00:11:32,890
we built these new features that you're

00:11:30,400 --> 00:11:34,930
looking at on the website on graph QL as

00:11:32,890 --> 00:11:40,920
well I'm going to run this mutation

00:11:34,930 --> 00:11:44,560
really quick that just moves a card oops

00:11:40,920 --> 00:11:49,660
of course right yeah I think I didn't

00:11:44,560 --> 00:11:51,070
refresh there you go so you can see that

00:11:49,660 --> 00:11:52,660
you can see it read off the WebSocket

00:11:51,070 --> 00:11:55,840
and update immediately that's me talking

00:11:52,660 --> 00:11:57,070
through the the public alpha API and it

00:11:55,840 --> 00:11:58,270
just shows you that this you know this

00:11:57,070 --> 00:12:01,060
whole feature this whole new feature

00:11:58,270 --> 00:12:03,250
that was kind of a big spotlight at that

00:12:01,060 --> 00:12:08,110
universe recently was completely built

00:12:03,250 --> 00:12:10,180
on the graphical interface so back to my

00:12:08,110 --> 00:12:14,740
presentation so talking about why graph

00:12:10,180 --> 00:12:17,140
QL some things that we liked about it a

00:12:14,740 --> 00:12:19,840
frequent question we often get is why

00:12:17,140 --> 00:12:22,630
not X you know why not Falkor why not

00:12:19,840 --> 00:12:24,160
build your own things we considered and

00:12:22,630 --> 00:12:27,370
but something that we really liked about

00:12:24,160 --> 00:12:29,980
graph QL is just the very clear value

00:12:27,370 --> 00:12:31,920
proposition to it the static typing the

00:12:29,980 --> 00:12:34,360
documentation built in the introspection

00:12:31,920 --> 00:12:36,970
and the fact that it was for the most

00:12:34,360 --> 00:12:40,030
part a very lightweight on opinionated

00:12:36,970 --> 00:12:41,520
spec it's allowed us to kind of do what

00:12:40,030 --> 00:12:44,680
we want with respect to implementation

00:12:41,520 --> 00:12:49,390
but at the same time you know gave us a

00:12:44,680 --> 00:12:50,740
nice standard to build upon the other

00:12:49,390 --> 00:12:54,780
thing we really loved about it is it has

00:12:50,740 --> 00:12:58,030
a lively and very very productive

00:12:54,780 --> 00:12:59,830
open-source community I've heard a few

00:12:58,030 --> 00:13:02,380
people talking today about you know

00:12:59,830 --> 00:13:04,480
graph QL clients and implementations and

00:13:02,380 --> 00:13:07,120
kind of percentage complete and how they

00:13:04,480 --> 00:13:08,980
feel about them we of course are banking

00:13:07,120 --> 00:13:12,430
pretty heavily on the Ruby community

00:13:08,980 --> 00:13:13,790
being a rails shop we use graph QL Ruby

00:13:12,430 --> 00:13:15,140
we use graph

00:13:13,790 --> 00:13:19,340
- I'll batch which is from the Shopify

00:13:15,140 --> 00:13:22,550
team and they have been great they've

00:13:19,340 --> 00:13:24,890
been great external resources to lean on

00:13:22,550 --> 00:13:27,050
and the community has been extremely

00:13:24,890 --> 00:13:28,760
active which i think was an impressive

00:13:27,050 --> 00:13:33,860
and very positive thing when we were

00:13:28,760 --> 00:13:35,150
evaluating options it's also an

00:13:33,860 --> 00:13:37,460
opportunity to collaborate with the

00:13:35,150 --> 00:13:39,950
community and you know github

00:13:37,460 --> 00:13:42,620
despite being you know the home for open

00:13:39,950 --> 00:13:44,270
source on the web the reality is because

00:13:42,620 --> 00:13:47,120
we were kind of running a customized

00:13:44,270 --> 00:13:49,040
stack of rails didn't really have many

00:13:47,120 --> 00:13:51,530
opportunities to truly contribute back

00:13:49,040 --> 00:13:53,810
on big frameworks we were leveraging

00:13:51,530 --> 00:13:54,890
internally this was an opportunity that

00:13:53,810 --> 00:13:58,370
we were all pretty excited about

00:13:54,890 --> 00:14:00,280
internally just to just to jump in early

00:13:58,370 --> 00:14:03,140
on a technology that we found valuable

00:14:00,280 --> 00:14:04,940
and push it forward in a new direction

00:14:03,140 --> 00:14:07,070
you know obviously the team at Facebook

00:14:04,940 --> 00:14:09,050
thought long and hard about the

00:14:07,070 --> 00:14:12,050
possibility of a public API like we've

00:14:09,050 --> 00:14:14,150
done but we're one of the one of the

00:14:12,050 --> 00:14:16,070
first big people to do it

00:14:14,150 --> 00:14:17,510
and so what we're getting to do is

00:14:16,070 --> 00:14:20,630
encounter a lot of problems that people

00:14:17,510 --> 00:14:22,700
haven't seen yet solve them and and

00:14:20,630 --> 00:14:27,020
contribute back so we're excited about

00:14:22,700 --> 00:14:28,490
that opportunity and you know it just it

00:14:27,020 --> 00:14:30,040
paves the way for the goals that I was

00:14:28,490 --> 00:14:31,850
outlining previously for the platform

00:14:30,040 --> 00:14:34,810
standing up a service-oriented

00:14:31,850 --> 00:14:37,540
architecture diversifying the tech stack

00:14:34,810 --> 00:14:39,740
basically creating an interface where

00:14:37,540 --> 00:14:41,930
nothing touches the back end except

00:14:39,740 --> 00:14:44,960
through this interface within the core

00:14:41,930 --> 00:14:49,130
app and that's something that will you

00:14:44,960 --> 00:14:52,820
know 8sn a number of goals so the other

00:14:49,130 --> 00:14:54,860
thing is it changes the way we ship this

00:14:52,820 --> 00:14:57,250
is actually a really great thing it's

00:14:54,860 --> 00:15:00,170
taken a little bit of effort I think but

00:14:57,250 --> 00:15:03,440
you know the good news is it kind of

00:15:00,170 --> 00:15:06,550
makes us think it makes us on the

00:15:03,440 --> 00:15:09,050
platform side think more long-term about

00:15:06,550 --> 00:15:10,790
developers internally and externally we

00:15:09,050 --> 00:15:13,670
think about our internal teams that we

00:15:10,790 --> 00:15:15,320
work for as a product you know we

00:15:13,670 --> 00:15:17,960
basically we are delivering an API

00:15:15,320 --> 00:15:19,580
interface to them we're having them

00:15:17,960 --> 00:15:21,830
contribute to that API interface as well

00:15:19,580 --> 00:15:23,660
just as we would in

00:15:21,830 --> 00:15:27,110
developer product and I think that

00:15:23,660 --> 00:15:31,550
that's been a big boon to to kind of the

00:15:27,110 --> 00:15:33,620
quality of what we've been building so

00:15:31,550 --> 00:15:36,709
some challenges we've been in production

00:15:33,620 --> 00:15:39,200
for a month now and like I said we've

00:15:36,709 --> 00:15:40,490
been working on a lot of major features

00:15:39,200 --> 00:15:42,860
on github that you guys use everyday

00:15:40,490 --> 00:15:45,769
have been quietly moving to graph QL

00:15:42,860 --> 00:15:49,310
behind the scenes so we've had a lot of

00:15:45,769 --> 00:15:52,160
learnings across the board but we'll

00:15:49,310 --> 00:15:53,690
talk about a few of them mitigating and

00:15:52,160 --> 00:15:55,339
managing the overhead of multiple

00:15:53,690 --> 00:15:58,160
schemas this is one that I hear a lot

00:15:55,339 --> 00:16:01,790
when I talk to folks at meetups but

00:15:58,160 --> 00:16:03,680
effectively what we've done is we have

00:16:01,790 --> 00:16:05,269
you know we have the need to hide some

00:16:03,680 --> 00:16:07,160
things or hide features in development

00:16:05,269 --> 00:16:08,540
before they're publicly available not

00:16:07,160 --> 00:16:10,640
accidentally expose them through this

00:16:08,540 --> 00:16:13,010
schema and so we went through the effort

00:16:10,640 --> 00:16:14,750
to actually build the ability to target

00:16:13,010 --> 00:16:17,690
the schema for different use cases

00:16:14,750 --> 00:16:20,089
currently the primary two are public and

00:16:17,690 --> 00:16:21,800
internal but we also probably very soon

00:16:20,089 --> 00:16:23,510
will spin up one that's specific to like

00:16:21,800 --> 00:16:25,519
staff tools and administrative tools as

00:16:23,510 --> 00:16:26,870
well and it includes things that don't

00:16:25,519 --> 00:16:28,579
exist in other parts of the schema but

00:16:26,870 --> 00:16:30,589
we can share that definition between all

00:16:28,579 --> 00:16:33,170
of them this is something we'd like to

00:16:30,589 --> 00:16:35,240
commit upstream into graph QL Ruby but

00:16:33,170 --> 00:16:36,709
are still kind of working with trying to

00:16:35,240 --> 00:16:38,810
find a better way to do it actually but

00:16:36,709 --> 00:16:44,930
one headache that we kind of had early

00:16:38,810 --> 00:16:46,490
on security and privacy graph QL kind of

00:16:44,930 --> 00:16:49,430
changes the game a little bit especially

00:16:46,490 --> 00:16:51,350
if you're you know your model layer was

00:16:49,430 --> 00:16:54,170
was kind of built first and graph QL

00:16:51,350 --> 00:16:56,149
came later but making sure that you

00:16:54,170 --> 00:16:58,220
don't accidentally leak a node that

00:16:56,149 --> 00:17:03,050
isn't accessible directly through like a

00:16:58,220 --> 00:17:06,439
relay connection is a pretty big concern

00:17:03,050 --> 00:17:09,589
we actually went pretty deep on this one

00:17:06,439 --> 00:17:11,870
and work really hard a couple different

00:17:09,589 --> 00:17:13,400
ways to make sure that never happens and

00:17:11,870 --> 00:17:15,530
we'll we'll talk in a little bit I'll

00:17:13,400 --> 00:17:20,000
give a demo in just a little while of

00:17:15,530 --> 00:17:22,990
some way that we do that versioning

00:17:20,000 --> 00:17:25,189
behavioral and braking changes obviously

00:17:22,990 --> 00:17:26,449
the you know there's the the general

00:17:25,189 --> 00:17:29,750
consensus that you don't actually need

00:17:26,449 --> 00:17:31,250
to version a graph QL schema

00:17:29,750 --> 00:17:34,730
we're you know kind of seeing how that

00:17:31,250 --> 00:17:37,760
works in reality with with an external

00:17:34,730 --> 00:17:39,770
API I think one of the big challenges

00:17:37,760 --> 00:17:42,110
for me personally that I'm kind of

00:17:39,770 --> 00:17:43,820
concerned about is when we resolvers

00:17:42,110 --> 00:17:45,770
change behavior like obviously

00:17:43,820 --> 00:17:47,179
deprecating a field or aliasing a field

00:17:45,770 --> 00:17:50,210
or waiting until nobody's calling

00:17:47,179 --> 00:17:51,230
anything anymore it's easy to do but

00:17:50,210 --> 00:17:53,090
what happens when something just

00:17:51,230 --> 00:17:54,770
functionally changes behavior changes

00:17:53,090 --> 00:17:57,080
and it's not documented nobody knows

00:17:54,770 --> 00:17:59,059
about it or you explicitly need to do it

00:17:57,080 --> 00:18:00,490
for whatever reason so these are kind of

00:17:59,059 --> 00:18:04,880
some of the questions that we're still

00:18:00,490 --> 00:18:08,720
working to answer performance

00:18:04,880 --> 00:18:10,250
optimization and resilience I have as

00:18:08,720 --> 00:18:12,470
well as Kyle and a few other people here

00:18:10,250 --> 00:18:14,080
spent an immense amount of time in the

00:18:12,470 --> 00:18:17,090
last few weeks staring at flame graphs

00:18:14,080 --> 00:18:19,789
trying to make it go faster obviously

00:18:17,090 --> 00:18:21,679
you know one big benefit we get from

00:18:19,789 --> 00:18:23,299
graph QL is the ability to batch things

00:18:21,679 --> 00:18:24,650
together and try to make single calls to

00:18:23,299 --> 00:18:27,770
the database or minimize the calls to

00:18:24,650 --> 00:18:29,929
the database and that's been great but

00:18:27,770 --> 00:18:32,000
it's kind of an ongoing challenge to

00:18:29,929 --> 00:18:33,500
make sure that that works well and

00:18:32,000 --> 00:18:35,809
likewise when we start thinking about a

00:18:33,500 --> 00:18:38,179
service-oriented architecture how do we

00:18:35,809 --> 00:18:39,710
deal with a request where you know let's

00:18:38,179 --> 00:18:41,299
say we can fetch the repo but the user

00:18:39,710 --> 00:18:46,940
service is down and I can't hydrate the

00:18:41,299 --> 00:18:48,679
user for you so a lot of that onboarding

00:18:46,940 --> 00:18:52,580
and removing blocks roadblocks for

00:18:48,679 --> 00:18:55,190
adoption for the most part graph QL has

00:18:52,580 --> 00:18:56,659
an advantage here and it's very easy to

00:18:55,190 --> 00:18:58,760
just jump in and start using it with

00:18:56,659 --> 00:19:02,270
literally no documentation for you you

00:18:58,760 --> 00:19:04,370
know ahead of time but you know in some

00:19:02,270 --> 00:19:06,289
in some languages and some tech stacks

00:19:04,370 --> 00:19:08,450
that external developers are using or we

00:19:06,289 --> 00:19:10,130
might be using internally maybe the

00:19:08,450 --> 00:19:13,669
graph QL client side of things isn't

00:19:10,130 --> 00:19:16,309
quite as short up so thinking about how

00:19:13,669 --> 00:19:18,230
we can help Aidan in that and remove

00:19:16,309 --> 00:19:22,070
those kind of roadblocks is a big

00:19:18,230 --> 00:19:24,320
concern as well instrumentation and

00:19:22,070 --> 00:19:26,809
monitoring knowing what's going on is

00:19:24,320 --> 00:19:28,460
very important and I think this is

00:19:26,809 --> 00:19:31,789
probably one of the the biggest things

00:19:28,460 --> 00:19:37,730
where we're kind of focusing on on prior

00:19:31,789 --> 00:19:39,740
to exiting the alpha for this API the

00:19:37,730 --> 00:19:42,150
other thing that's very important is

00:19:39,740 --> 00:19:43,830
managing graphical interface contrib you

00:19:42,150 --> 00:19:45,690
so what I mean by that is like schema

00:19:43,830 --> 00:19:48,750
contributions or like changes to the

00:19:45,690 --> 00:19:52,350
loaders and you know obviously just like

00:19:48,750 --> 00:19:54,750
any open source project you have a ton

00:19:52,350 --> 00:19:56,490
of developers from different backgrounds

00:19:54,750 --> 00:19:58,200
all different flavors of coding all

00:19:56,490 --> 00:20:00,540
contributing to this thing internally at

00:19:58,200 --> 00:20:02,250
github and making sure that we don't

00:20:00,540 --> 00:20:04,770
reintroduce any problems making sure

00:20:02,250 --> 00:20:06,930
that we name things consistently making

00:20:04,770 --> 00:20:08,630
sure that you know best practices are

00:20:06,930 --> 00:20:11,460
just kind of adhere to is a good thing

00:20:08,630 --> 00:20:13,500
and so what we've been doing is kind of

00:20:11,460 --> 00:20:15,360
slowly building up a lot of automation

00:20:13,500 --> 00:20:17,190
around that so making sure that things

00:20:15,360 --> 00:20:19,790
are put in folders where they should be

00:20:17,190 --> 00:20:22,080
named spaced correctly you know

00:20:19,790 --> 00:20:24,750
structured correctly we don't introduce

00:20:22,080 --> 00:20:28,410
any kind of security leaks or any kind

00:20:24,750 --> 00:20:29,940
of any kind of crazy crazy problems and

00:20:28,410 --> 00:20:32,670
I think that you know just trying to

00:20:29,940 --> 00:20:36,690
lint and test against that is probably

00:20:32,670 --> 00:20:38,280
the best way to handle that so I want to

00:20:36,690 --> 00:20:40,200
talk to real quick about a couple open

00:20:38,280 --> 00:20:41,640
source projects that we've produced out

00:20:40,200 --> 00:20:45,660
of all this and give you a couple quick

00:20:41,640 --> 00:20:48,270
examples the first one here is a graph

00:20:45,660 --> 00:20:50,250
QL client this was written by Josh peek

00:20:48,270 --> 00:20:51,660
I think he might still be here I don't

00:20:50,250 --> 00:20:55,550
know if he's still here but you can find

00:20:51,660 --> 00:20:58,680
him but this is basically a client for

00:20:55,550 --> 00:21:00,990
using graph QL within within Ruby within

00:20:58,680 --> 00:21:05,490
Rails specifically and it solves a lot

00:21:00,990 --> 00:21:07,320
of great problems for for developers so

00:21:05,490 --> 00:21:08,370
it's used internally I think it also

00:21:07,320 --> 00:21:10,800
might be used at a couple other

00:21:08,370 --> 00:21:13,380
companies already we launched this at

00:21:10,800 --> 00:21:15,360
universe with the API it provides

00:21:13,380 --> 00:21:16,140
integration and query validation in

00:21:15,360 --> 00:21:18,510
rails views

00:21:16,140 --> 00:21:22,100
it handles query parsing and execution

00:21:18,510 --> 00:21:24,900
for you so I'll give you a quick example

00:21:22,100 --> 00:21:27,540
this is just you know requiring up the

00:21:24,900 --> 00:21:29,550
client and then configuring the client

00:21:27,540 --> 00:21:33,030
in this case we're going to use the the

00:21:29,550 --> 00:21:37,250
Star Wars API but you just tell it

00:21:33,030 --> 00:21:39,630
you're using this HTTP execution and

00:21:37,250 --> 00:21:42,750
from that load the schema through

00:21:39,630 --> 00:21:45,090
introspection and then instantiate the

00:21:42,750 --> 00:21:48,090
client with the schema and the HTTP

00:21:45,090 --> 00:21:50,820
object we created and then to use it

00:21:48,090 --> 00:21:52,830
it's as simple as this is a this is

00:21:50,820 --> 00:21:54,540
defining a fragment and what's happening

00:21:52,830 --> 00:21:55,630
here is we're setting this human

00:21:54,540 --> 00:22:00,909
fragment

00:21:55,630 --> 00:22:02,860
constant to a ruby here doc of the the

00:22:00,909 --> 00:22:04,840
actual graph QL fragment and the

00:22:02,860 --> 00:22:07,480
important part is actually the client

00:22:04,840 --> 00:22:09,580
dot parts that's happening they're doing

00:22:07,480 --> 00:22:11,649
this a graph QL client has the ability

00:22:09,580 --> 00:22:13,929
to do static validation make sure you're

00:22:11,649 --> 00:22:15,309
not over fetching data and like query in

00:22:13,929 --> 00:22:18,340
for fields that you don't actually use

00:22:15,309 --> 00:22:20,490
in the in the view there's a lot that

00:22:18,340 --> 00:22:22,960
can be done here that it does for you

00:22:20,490 --> 00:22:25,990
and here's an example of using that

00:22:22,960 --> 00:22:28,960
fragment within a query and then to

00:22:25,990 --> 00:22:31,330
execute that query it's equally as

00:22:28,960 --> 00:22:34,029
straightforward just call client that

00:22:31,330 --> 00:22:36,880
query and pass at the the query constant

00:22:34,029 --> 00:22:42,039
that we just defined and the results

00:22:36,880 --> 00:22:43,600
come back in a hash within different

00:22:42,039 --> 00:22:45,820
kind of hash with and different access

00:22:43,600 --> 00:22:47,919
kind of object within Ruby where it's

00:22:45,820 --> 00:22:49,630
automatically snake casing

00:22:47,919 --> 00:22:54,370
you know variable names just like Rubeus

00:22:49,630 --> 00:22:58,419
love so another great project that I

00:22:54,370 --> 00:23:00,880
want to call out I'm sorry go ahead of

00:22:58,419 --> 00:23:03,070
myself so this is an example of the same

00:23:00,880 --> 00:23:05,769
thing I'm defining a fragment but this

00:23:03,070 --> 00:23:07,210
time within the the e rubus of view of

00:23:05,769 --> 00:23:08,980
the rails application so this would live

00:23:07,210 --> 00:23:10,690
inside of the app folder the view folder

00:23:08,980 --> 00:23:12,519
of the rails application and I can

00:23:10,690 --> 00:23:17,830
define the fragment in line using the

00:23:12,519 --> 00:23:20,769
the graph QL syntax there and use it

00:23:17,830 --> 00:23:22,779
immediately within the view and this

00:23:20,769 --> 00:23:27,279
handles handles everything for you

00:23:22,779 --> 00:23:28,840
automatically so the other project I

00:23:27,279 --> 00:23:32,620
want to call out this one was written by

00:23:28,840 --> 00:23:34,750
our security team this I mentioned

00:23:32,620 --> 00:23:36,309
earlier that one of our biggest kind of

00:23:34,750 --> 00:23:37,779
headaches and biggest concerns that we

00:23:36,309 --> 00:23:40,029
you know we wanted to make sure we did

00:23:37,779 --> 00:23:42,039
right was making sure that we didn't

00:23:40,029 --> 00:23:43,419
leak anything through a connection you

00:23:42,039 --> 00:23:44,860
know make sure that a developer

00:23:43,419 --> 00:23:46,360
contributing to the graphical schema

00:23:44,860 --> 00:23:48,429
didn't accidentally forget to scope

00:23:46,360 --> 00:23:50,470
repos to only public repos or something

00:23:48,429 --> 00:23:53,110
like that in the resolver for a

00:23:50,470 --> 00:23:54,519
particular connection and so this tool

00:23:53,110 --> 00:23:57,070
was written by the security team

00:23:54,519 --> 00:23:58,840
initially to do just kind of their their

00:23:57,070 --> 00:24:02,860
security audit of our API before we made

00:23:58,840 --> 00:24:05,500
it public but also just to it can also

00:24:02,860 --> 00:24:07,690
be used in CI to kind of proactively

00:24:05,500 --> 00:24:09,550
down these kinds of things and so the

00:24:07,690 --> 00:24:13,210
way that this works is it actually

00:24:09,550 --> 00:24:15,910
basically goes through it starts at a

00:24:13,210 --> 00:24:18,490
root node and will traverse through your

00:24:15,910 --> 00:24:21,550
graph QL schema basically looking for

00:24:18,490 --> 00:24:24,670
any IDs any global IDs that shouldn't

00:24:21,550 --> 00:24:26,200
have been any IDs through a connection

00:24:24,670 --> 00:24:29,500
that shouldn't have been directly

00:24:26,200 --> 00:24:31,660
accessible via direct node lookup and

00:24:29,500 --> 00:24:34,270
the cool part is is going to easily be

00:24:31,660 --> 00:24:35,470
used alongside broth cool client and

00:24:34,270 --> 00:24:36,850
it's written in Ruby but it's useful for

00:24:35,470 --> 00:24:39,670
any graphical interface you could

00:24:36,850 --> 00:24:42,430
literally use this anywhere this by the

00:24:39,670 --> 00:24:44,830
way is there going to be a blog post on

00:24:42,430 --> 00:24:48,180
it next week but this is the first time

00:24:44,830 --> 00:24:50,890
anyone is externally hearing about this

00:24:48,180 --> 00:24:55,450
so using graph QL relay Walker the way

00:24:50,890 --> 00:24:57,880
that we do this is we set up our query

00:24:55,450 --> 00:25:00,610
we set up our ID for the the root node

00:24:57,880 --> 00:25:04,180
that we're going to start at and using

00:25:00,610 --> 00:25:06,310
it as as simple as basically setting up

00:25:04,180 --> 00:25:08,980
the Walker telling it to walk from a

00:25:06,310 --> 00:25:11,800
given ID and then stepping through this

00:25:08,980 --> 00:25:14,530
block of execution frame-by-frame the

00:25:11,800 --> 00:25:15,820
the G ID that you see there is the the

00:25:14,530 --> 00:25:19,000
current global ID that we're dealing

00:25:15,820 --> 00:25:20,860
with the parent really basically the the

00:25:19,000 --> 00:25:24,150
object we first saw that global ID with

00:25:20,860 --> 00:25:27,940
and then to actually execute the query

00:25:24,150 --> 00:25:31,390
and get back a result we call execute

00:25:27,940 --> 00:25:34,320
here and pass it variables and the query

00:25:31,390 --> 00:25:37,810
string that we've built previously and

00:25:34,320 --> 00:25:40,510
then we on qne found IDs that we have

00:25:37,810 --> 00:25:43,750
and continue on walking through the next

00:25:40,510 --> 00:25:46,120
frame and so this will traverse your

00:25:43,750 --> 00:25:48,640
schema from a given node and try to find

00:25:46,120 --> 00:25:53,140
any other nodes that shouldn't be

00:25:48,640 --> 00:25:55,060
accessible through a connection here is

00:25:53,140 --> 00:25:56,530
an example I mentioned earlier that it

00:25:55,060 --> 00:25:58,180
integrated very easily with graph QL

00:25:56,530 --> 00:26:01,090
client here's an example of using with

00:25:58,180 --> 00:26:03,820
graph QL client there's an extension you

00:26:01,090 --> 00:26:06,190
include the setup is very similar except

00:26:03,820 --> 00:26:08,410
I don't need to build a query instead I

00:26:06,190 --> 00:26:10,630
just again start the start of the walk

00:26:08,410 --> 00:26:14,500
from a given frame directly off the

00:26:10,630 --> 00:26:16,060
graphical client and then if you notice

00:26:14,500 --> 00:26:19,090
here I'm not actually having to execute

00:26:16,060 --> 00:26:23,019
the query manually instead I'm able

00:26:19,090 --> 00:26:24,580
- just let the client execute for me so

00:26:23,019 --> 00:26:27,700
this this has been pretty critical to us

00:26:24,580 --> 00:26:30,309
we run this in CI we run this in manual

00:26:27,700 --> 00:26:32,009
tests we also have some code on the

00:26:30,309 --> 00:26:36,179
server side doing something very similar

00:26:32,009 --> 00:26:39,429
where we explicitly boom and don't allow

00:26:36,179 --> 00:26:41,139
any situation where a connection would

00:26:39,429 --> 00:26:42,789
return something that wouldn't be

00:26:41,139 --> 00:26:43,990
directly accessible and this just

00:26:42,789 --> 00:26:45,879
prevents us from kind of having those

00:26:43,990 --> 00:26:47,259
oops moments where you know somebody

00:26:45,879 --> 00:26:48,639
just forgot - incorrectly scoped

00:26:47,259 --> 00:26:50,679
something or defined to resolve or

00:26:48,639 --> 00:26:52,480
incorrectly within the schema and it

00:26:50,679 --> 00:26:53,649
allows us to you know let more people in

00:26:52,480 --> 00:26:56,049
the company being involved in

00:26:53,649 --> 00:27:01,299
contributing to that schema without the

00:26:56,049 --> 00:27:03,039
risk of something going wrong so I

00:27:01,299 --> 00:27:06,309
mentioned kind of some of our off-site

00:27:03,039 --> 00:27:08,619
clients one thing that's coming soon I

00:27:06,309 --> 00:27:10,419
don't know how many of you use Adam but

00:27:08,619 --> 00:27:13,090
Adam is actually going to do a very deep

00:27:10,419 --> 00:27:16,179
integration with the graph QL public

00:27:13,090 --> 00:27:19,149
alpha API this is a very near future

00:27:16,179 --> 00:27:22,539
thing but effectively what they're going

00:27:19,149 --> 00:27:24,369
to do is leverage this new API to

00:27:22,539 --> 00:27:26,679
basically bring a lot of what you do now

00:27:24,369 --> 00:27:29,320
on site and github directly into Adam

00:27:26,679 --> 00:27:31,690
it's going to be a really cool project

00:27:29,320 --> 00:27:33,460
and I think that they are planning to

00:27:31,690 --> 00:27:35,259
open-source the vast majority of it so

00:27:33,460 --> 00:27:36,549
you'll be able to see the package and

00:27:35,259 --> 00:27:39,940
all its details and exactly how it

00:27:36,549 --> 00:27:41,619
interacts with with the graph QL API but

00:27:39,940 --> 00:27:43,539
this is one that also you're hearing

00:27:41,619 --> 00:27:45,519
about for the first time today but in

00:27:43,539 --> 00:27:47,619
the very near future there's some school

00:27:45,519 --> 00:27:49,570
cool stuff happening with Adam so this

00:27:47,619 --> 00:27:52,570
is an example of one of our off-site

00:27:49,570 --> 00:27:53,950
clients leveraging this new API in kind

00:27:52,570 --> 00:27:56,470
of a cool way

00:27:53,950 --> 00:27:58,240
you know the idea here is that things

00:27:56,470 --> 00:27:59,409
like pull request reviews in merging and

00:27:58,240 --> 00:28:04,179
all that stuff could be done directly

00:27:59,409 --> 00:28:06,039
from your editor the we also have some

00:28:04,179 --> 00:28:09,850
of the desktop teams exploring the use

00:28:06,039 --> 00:28:11,710
of the adoption of graph QL and and of

00:28:09,850 --> 00:28:14,200
course a lot of the rest api or some of

00:28:11,710 --> 00:28:15,639
the rest api has actually already been

00:28:14,200 --> 00:28:17,590
converted to graph tool under the hood

00:28:15,639 --> 00:28:19,419
the projects api for example is using

00:28:17,590 --> 00:28:21,009
graph go under the hood and there's a

00:28:19,419 --> 00:28:22,659
lot of work right now to convert a lot

00:28:21,009 --> 00:28:29,230
of the existing web hooks and new web

00:28:22,659 --> 00:28:31,450
hooks to use graph QL so before I close

00:28:29,230 --> 00:28:32,380
I've got one minute left but I wanted to

00:28:31,450 --> 00:28:34,420
talk about some things that

00:28:32,380 --> 00:28:36,460
are excited about and some things that

00:28:34,420 --> 00:28:39,450
we're looking forward to exploring one

00:28:36,460 --> 00:28:42,520
of them is things like subscription

00:28:39,450 --> 00:28:44,770
real-time data streaming API is

00:28:42,520 --> 00:28:46,900
potentially we're also really looking

00:28:44,770 --> 00:28:48,820
forward to trying to tackle things like

00:28:46,900 --> 00:28:50,530
stored queries we think all these things

00:28:48,820 --> 00:28:53,560
would benefit developers both internally

00:28:50,530 --> 00:28:55,540
and externally and at github z-- scale

00:28:53,560 --> 00:28:59,320
it would be a very interesting use case

00:28:55,540 --> 00:29:01,600
for for graph QL as well please by all

00:28:59,320 --> 00:29:03,280
means feel free to reach out you can

00:29:01,600 --> 00:29:05,560
find us on Twitter also make sure to

00:29:03,280 --> 00:29:08,170
subscribe to the github engineering blog

00:29:05,560 --> 00:29:11,680
where you'll see more about Locker next

00:29:08,170 --> 00:29:13,030
week among other things and you know

00:29:11,680 --> 00:29:14,800
feel free to reach out and ask questions

00:29:13,030 --> 00:29:16,900
also feel free to interact with us on

00:29:14,800 --> 00:29:18,970
the platform community site we love to

00:29:16,900 --> 00:29:20,200
talk with people there if you're looking

00:29:18,970 --> 00:29:22,300
for something in the schema that's not

00:29:20,200 --> 00:29:25,420
there feel free to just ping us and ask

00:29:22,300 --> 00:29:26,080
about it but thank you very much that's

00:29:25,420 --> 00:29:28,150
kind of it

00:29:26,080 --> 00:29:31,200
but I'll be around for questions later

00:29:28,150 --> 00:29:31,200

YouTube URL: https://www.youtube.com/watch?v=hT-4pVmkGt0


