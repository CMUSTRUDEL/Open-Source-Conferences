Title: Open Source Lightning Talks: PostGraphQL
Publication date: 2016-11-02
Playlist: GraphQL Summit 2016
Description: 
	Caleb Meredith

PostGraphQL is a GraphQL API created by reflection over a PostgreSQL schema: https://github.com/calebmer/postgraphql

Resources:
Learn more about Summit - https://summit.graphql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Learn GraphQL using Apollo's Tutorials: https://odyssey.apollographql.com/
Captions: 
	00:00:03,720 --> 00:00:08,800
all right so hello everyone my name is

00:00:06,460 --> 00:00:10,269
Kayla Meredith and I'm the developer and

00:00:08,800 --> 00:00:12,280
maintainer of the open source project

00:00:10,269 --> 00:00:14,650
post graph QL which will take your

00:00:12,280 --> 00:00:17,200
Postgres database schema and turn it

00:00:14,650 --> 00:00:19,240
into a graph QL API without any extra

00:00:17,200 --> 00:00:20,560
work for me now I'm sure we've all sat

00:00:19,240 --> 00:00:23,470
here today and we've seen all the great

00:00:20,560 --> 00:00:24,880
why' graph QL slides and I'm sure many

00:00:23,470 --> 00:00:26,260
of us are familiar with the Postgres

00:00:24,880 --> 00:00:28,300
database so we know why that's a great

00:00:26,260 --> 00:00:30,070
database so I could stand up here and

00:00:28,300 --> 00:00:31,360
talk for seven minutes about exactly why

00:00:30,070 --> 00:00:32,800
these things are great and why they work

00:00:31,360 --> 00:00:33,879
great together but instead I'm gonna

00:00:32,800 --> 00:00:35,440
show and not tell

00:00:33,879 --> 00:00:38,140
so in these seven minutes I'm gonna

00:00:35,440 --> 00:00:40,630
develop a complete graph QL API for a

00:00:38,140 --> 00:00:42,970
simple form example using post graph QL

00:00:40,630 --> 00:00:45,430
so let's get started first things first

00:00:42,970 --> 00:00:47,020
I'm gonna open up a Postgres client on

00:00:45,430 --> 00:00:49,090
my machine here which will just allow me

00:00:47,020 --> 00:00:51,220
to run some basic sequel queries you

00:00:49,090 --> 00:00:52,960
know like this alright and next what

00:00:51,220 --> 00:00:57,370
we're gonna do is we need to create a

00:00:52,960 --> 00:00:59,980
container for our database so it'll be a

00:00:57,370 --> 00:01:00,640
schema and post in Postgres you know

00:00:59,980 --> 00:01:03,220
normal stuff

00:01:00,640 --> 00:01:04,920
crates uma for example next we'll pop

00:01:03,220 --> 00:01:07,479
over here and we'll start post graph QL

00:01:04,920 --> 00:01:09,909
with the same schema that we just

00:01:07,479 --> 00:01:12,429
created form example and we're also

00:01:09,909 --> 00:01:14,770
gonna pass in this watch flag so that

00:01:12,429 --> 00:01:17,259
when we make changes to our database

00:01:14,770 --> 00:01:19,569
they'll be updated in graph tql and our

00:01:17,259 --> 00:01:26,829
api okay so we've done that now let's

00:01:19,569 --> 00:01:29,170
open up graph eql there we go and as you

00:01:26,829 --> 00:01:32,529
can see we had this pretty basic gravity

00:01:29,170 --> 00:01:33,999
QL setup no mutations yet and so far we

00:01:32,529 --> 00:01:35,679
just have some very basic stuff on our

00:01:33,999 --> 00:01:37,810
query type we have the relay one hack

00:01:35,679 --> 00:01:39,789
here right to do your top level queries

00:01:37,810 --> 00:01:41,469
if you want that we have your node

00:01:39,789 --> 00:01:43,450
selector to the select nodes using the

00:01:41,469 --> 00:01:44,950
global unique ID and you'll notice post

00:01:43,450 --> 00:01:46,359
graph QL heavily believes in the

00:01:44,950 --> 00:01:48,549
emerging underscore underscore ID

00:01:46,359 --> 00:01:50,020
standard for global unique IDs of course

00:01:48,549 --> 00:01:51,340
if you want to configure it that it's

00:01:50,020 --> 00:01:52,810
totally configurable if you want to

00:01:51,340 --> 00:01:54,479
support Rayleigh one so it's kind of

00:01:52,810 --> 00:01:58,270
bare right now let's add some stuff

00:01:54,479 --> 00:02:00,219
first let's add a table for example

00:01:58,270 --> 00:02:02,950
it'll be a person right because we need

00:02:00,219 --> 00:02:04,599
humans to log into our database it'll

00:02:02,950 --> 00:02:06,789
have a serial primary key which is you

00:02:04,599 --> 00:02:10,509
know gonna be a unique 1 2 3 4 primary

00:02:06,789 --> 00:02:13,510
key we'll give them the first name it'll

00:02:10,509 --> 00:02:15,519
be required and we'll give them a last

00:02:13,510 --> 00:02:16,450
name which will just be some text all

00:02:15,519 --> 00:02:18,550
right

00:02:16,450 --> 00:02:22,540
let's create one more table it'll be a

00:02:18,550 --> 00:02:24,099
post table form example post and it's

00:02:22,540 --> 00:02:29,800
pretty similar it has the same basic

00:02:24,099 --> 00:02:35,260
primary key a headline which is some

00:02:29,800 --> 00:02:38,140
required text some body text oops and an

00:02:35,260 --> 00:02:39,670
author ID which is an integer required

00:02:38,140 --> 00:02:44,709
and here's the interesting bit it

00:02:39,670 --> 00:02:49,630
references forum example example of dot

00:02:44,709 --> 00:02:50,830
person ID there we go I promise you

00:02:49,630 --> 00:02:52,780
that's going to be the most typing I do

00:02:50,830 --> 00:02:55,989
today okay so now if we jump back into

00:02:52,780 --> 00:02:57,970
post graph QL will see that it picked up

00:02:55,989 --> 00:03:00,069
our changes it restart our server and we

00:02:57,970 --> 00:03:02,080
if we look here in gravity QL will see

00:03:00,069 --> 00:03:04,660
now that we have some new fields we have

00:03:02,080 --> 00:03:06,430
a connection for our persons we can get

00:03:04,660 --> 00:03:08,680
them by their global ID we can get them

00:03:06,430 --> 00:03:11,170
by their integer ID or any other unique

00:03:08,680 --> 00:03:12,970
field maybe an email I'm saying for

00:03:11,170 --> 00:03:15,250
posts and if we dig into posts as you

00:03:12,970 --> 00:03:17,319
can see here are all of our columns we

00:03:15,250 --> 00:03:19,690
also have the global unique ID it

00:03:17,319 --> 00:03:21,609
implements node and post graph QL

00:03:19,690 --> 00:03:23,380
automatically detected the relation and

00:03:21,609 --> 00:03:25,239
added a field for that if we go into

00:03:23,380 --> 00:03:27,519
person we'll see that look right there

00:03:25,239 --> 00:03:29,170
we can get the reverse we can get the

00:03:27,519 --> 00:03:30,880
connection in the opposite direction as

00:03:29,170 --> 00:03:32,410
well so let's keep going

00:03:30,880 --> 00:03:33,880
you may notice that we don't have a

00:03:32,410 --> 00:03:36,940
description here and one of the great

00:03:33,880 --> 00:03:38,440
things about graph QL is that you can

00:03:36,940 --> 00:03:41,739
add descriptions to your timers right

00:03:38,440 --> 00:03:43,450
well good thing if you can name a

00:03:41,739 --> 00:03:45,160
feature in Postgres there's probably a

00:03:43,450 --> 00:03:50,500
way to add a comment to it and post

00:03:45,160 --> 00:03:52,480
graph QL can pick this up and add it to

00:03:50,500 --> 00:03:54,160
your type so let's hit that as you can

00:03:52,480 --> 00:03:55,720
see post graph key already started and

00:03:54,160 --> 00:03:57,700
there we go we have a description on a

00:03:55,720 --> 00:03:59,590
person all right so I'm just gonna go

00:03:57,700 --> 00:04:03,100
back here really quick and I quit out

00:03:59,590 --> 00:04:05,140
here and I'm gonna add some data just

00:04:03,100 --> 00:04:08,620
like ten people and thirty posts right

00:04:05,140 --> 00:04:11,319
so let's jump in here you can say all

00:04:08,620 --> 00:04:13,299
posts and you know all the the typical

00:04:11,319 --> 00:04:14,859
arguments you'd expect including offsets

00:04:13,299 --> 00:04:16,299
so if you don't like cursor pagination

00:04:14,859 --> 00:04:19,989
you can just do lumen offset pagination

00:04:16,299 --> 00:04:21,639
Tulear choice first three edges of

00:04:19,989 --> 00:04:23,800
course we have we can get the page in

00:04:21,639 --> 00:04:26,110
phone here we'll get the cursor node

00:04:23,800 --> 00:04:28,870
we'll get the global unique ID and I'll

00:04:26,110 --> 00:04:29,760
get this ID and headline too we hit

00:04:28,870 --> 00:04:31,440
enter and

00:04:29,760 --> 00:04:32,850
there's all the data but you know this

00:04:31,440 --> 00:04:34,980
is graph QL so it's Turtles all the way

00:04:32,850 --> 00:04:36,930
down we can go to select the author we

00:04:34,980 --> 00:04:39,810
can do that we can get their first name

00:04:36,930 --> 00:04:41,040
their last name and then we can do that

00:04:39,810 --> 00:04:42,240
as well and of course you can keep going

00:04:41,040 --> 00:04:44,070
down and down as much as you want

00:04:42,240 --> 00:04:46,590
because this is graph QL folks so now

00:04:44,070 --> 00:04:48,270
you may say this is all this is all fine

00:04:46,590 --> 00:04:49,980
and good but you know my scheme is just

00:04:48,270 --> 00:04:52,140
a little bit more complicated than basic

00:04:49,980 --> 00:04:54,360
tables and and comments and

00:04:52,140 --> 00:04:56,670
relationships and you know basic crud as

00:04:54,360 --> 00:05:00,270
well because we do add the mutations go

00:04:56,670 --> 00:05:01,730
back here all right so good thing

00:05:00,270 --> 00:05:04,170
Postgres allows us to define

00:05:01,730 --> 00:05:05,610
user-defined function so over here I've

00:05:04,170 --> 00:05:07,560
just got a couple of user-defined

00:05:05,610 --> 00:05:08,730
functions I'm gonna copy one right here

00:05:07,560 --> 00:05:10,830
because I'm sure you don't want to watch

00:05:08,730 --> 00:05:13,080
me type this get back into the Postgres

00:05:10,830 --> 00:05:15,570
shell add it and if we jump into our

00:05:13,080 --> 00:05:17,280
query and to our person type we'll see

00:05:15,570 --> 00:05:21,020
now that we have a computed field on our

00:05:17,280 --> 00:05:23,970
type so let's add it right there and

00:05:21,020 --> 00:05:25,020
boom we had the computed field and now

00:05:23,970 --> 00:05:27,120
if you want to look at the function a

00:05:25,020 --> 00:05:29,310
bit it just takes a person as the first

00:05:27,120 --> 00:05:30,720
parameter it returns some text and it

00:05:29,310 --> 00:05:33,060
concatenates the first name in the last

00:05:30,720 --> 00:05:34,680
name now if you thought PHP was weird

00:05:33,060 --> 00:05:36,150
with the dot operator for concatenating

00:05:34,680 --> 00:05:37,800
strings sequel is really weird because

00:05:36,150 --> 00:05:40,140
there's a double pipe so who knows why

00:05:37,800 --> 00:05:41,730
now you may say well I also want to be

00:05:40,140 --> 00:05:43,530
able to search post and I want to like

00:05:41,730 --> 00:05:45,090
to serve a news feed or whatever great

00:05:43,530 --> 00:05:47,820
thing Postgres can also let you define

00:05:45,090 --> 00:05:50,160
functions which return sets so we just

00:05:47,820 --> 00:05:52,170
drop this in here hit enter it returns

00:05:50,160 --> 00:05:54,600
as you see just a normal sequel select

00:05:52,170 --> 00:05:56,070
statement with I like I get it that's

00:05:54,600 --> 00:05:57,990
not the best way to do text search but

00:05:56,070 --> 00:06:02,010
this is a simple example guys so we jump

00:05:57,990 --> 00:06:03,420
back in here of course we can do search

00:06:02,010 --> 00:06:04,530
posts and you know it's the same

00:06:03,420 --> 00:06:06,780
connection type so we don't have to

00:06:04,530 --> 00:06:08,820
change anything else in our query and I

00:06:06,780 --> 00:06:11,160
happen to know the word ameliorated

00:06:08,820 --> 00:06:13,620
shows up twice query that and as you can

00:06:11,160 --> 00:06:16,740
see there we have two things just like

00:06:13,620 --> 00:06:18,870
that so now thanks to this wonderful

00:06:16,740 --> 00:06:20,340
conference you guys all know why graph

00:06:18,870 --> 00:06:22,740
QL is the best and why you should be

00:06:20,340 --> 00:06:25,290
using it and now with post graph QL you

00:06:22,740 --> 00:06:29,100
don't have an excuse to not use graph QL

00:06:25,290 --> 00:06:31,560
and now your product developers can do

00:06:29,100 --> 00:06:33,510
what they do best build beautiful apps

00:06:31,560 --> 00:06:36,120
well the open source community does what

00:06:33,510 --> 00:06:40,170
they do best bike shed over making the

00:06:36,120 --> 00:06:41,790
perfect API so you don't have to thank

00:06:40,170 --> 00:06:43,970
you and thanks so much for coming this

00:06:41,790 --> 00:06:43,970

YouTube URL: https://www.youtube.com/watch?v=b3pwlCDy6vY


