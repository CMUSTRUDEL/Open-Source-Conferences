Title: Faster modern apps with Angular and GraphQL
Publication date: 2016-11-02
Playlist: GraphQL Summit 2016
Description: 
	Jeff Cross, Angular/Google and Uri Goldshtein, Apollo

We are seeing a new type of web app emerge that is faster and delightful to use. Angular 2 stable has been released and is built to support a new architecture for such apps from the ground up. But these apps (component based, extremely fast rendering, universal) require an updated best practices and a new approach to handling data. 

GraphQL clients, such as Apollo, are built to support more efficient client-server communications and are helping developers across different front-end frameworks use and share those best practices for data integration. In this talk, we'll demonstrate how Angular, GraphQL, and Apollo can be used together to easily build faster modern apps.

Try Apollo with Angular 2: 
https://github.com/apollostack/angular2-apollo

Learn more about GraphQL Summit:
http://graphqlsummit.com

Join our GraphQL SF meetup to hear more about GraphQL best practices and implementations: 
http://meetup.com/GraphQL-SF/
Captions: 
	00:00:03,900 --> 00:00:10,390
hello hello I'm Jeff cross I'm from the

00:00:07,180 --> 00:00:13,750
angular team at Google and I'm from the

00:00:10,390 --> 00:00:15,400
polo team at meteor and I just want to

00:00:13,750 --> 00:00:17,050
say I was going to give this talk about

00:00:15,400 --> 00:00:19,150
myself originally but already worked it

00:00:17,050 --> 00:00:20,859
out that he could be part of the talk

00:00:19,150 --> 00:00:23,019
the trade-off was he had to fly in from

00:00:20,859 --> 00:00:24,640
Tel Aviv this morning at 6 a.m. so if he

00:00:23,019 --> 00:00:26,199
passes on the stage you know what I'll

00:00:24,640 --> 00:00:28,659
go sleep though and he's ok yeah he'll

00:00:26,199 --> 00:00:31,359
sit down so I let me know if he falls

00:00:28,659 --> 00:00:33,910
over and I'll help me up ok

00:00:31,359 --> 00:00:36,760
so you might know this but apps are

00:00:33,910 --> 00:00:38,949
different today compared to five years

00:00:36,760 --> 00:00:39,940
ago people are using mobile a lot more

00:00:38,949 --> 00:00:42,190
than they were they have higher

00:00:39,940 --> 00:00:43,660
expectations of what apps can do they

00:00:42,190 --> 00:00:45,820
don't want them to be just a slimmed

00:00:43,660 --> 00:00:47,769
down version like a Shopify folks just

00:00:45,820 --> 00:00:49,059
said they want the full version they

00:00:47,769 --> 00:00:50,649
even want the full capabilities of apps

00:00:49,059 --> 00:00:52,660
now and they want it to work well they

00:00:50,649 --> 00:00:55,269
wanted to be fast they wanted to work

00:00:52,660 --> 00:00:57,460
when networks aren't as good as you'd

00:00:55,269 --> 00:00:59,739
like it to be and so users have these

00:00:57,460 --> 00:01:02,230
really demanding constraints of what

00:00:59,739 --> 00:01:03,910
they expect now and so as framework

00:01:02,230 --> 00:01:06,370
developers and as application developers

00:01:03,910 --> 00:01:08,740
we've adapted to this by building apps

00:01:06,370 --> 00:01:11,229
differently so apps need more logic they

00:01:08,740 --> 00:01:14,890
need to do more they need to be more

00:01:11,229 --> 00:01:17,229
stable and and fast so to adapt to this

00:01:14,890 --> 00:01:18,640
complexity most applications frameworks

00:01:17,229 --> 00:01:21,189
and the web platform itself have been

00:01:18,640 --> 00:01:22,270
moving toward a component model and both

00:01:21,189 --> 00:01:24,340
the talks have already talked a lot

00:01:22,270 --> 00:01:26,140
about this Jeff's talk kind of set this

00:01:24,340 --> 00:01:28,240
up where components are the king of

00:01:26,140 --> 00:01:30,460
applications it's how you build apps now

00:01:28,240 --> 00:01:32,409
and so we're going to talk a little bit

00:01:30,460 --> 00:01:34,540
about components and data and some of

00:01:32,409 --> 00:01:36,850
the challenges and show a little bit how

00:01:34,540 --> 00:01:39,820
angular helps you get around these

00:01:36,850 --> 00:01:41,469
challenges using graph QL so you may

00:01:39,820 --> 00:01:43,390
have heard has anyone here heard of

00:01:41,469 --> 00:01:46,400
angular it's the framework that isn't

00:01:43,390 --> 00:01:48,830
react for okay

00:01:46,400 --> 00:01:51,350
good so yeah we've been working on it

00:01:48,830 --> 00:01:53,119
for the new version for about two years

00:01:51,350 --> 00:01:55,009
it was a ground-up rewrite and we just

00:01:53,119 --> 00:01:57,259
released it in September as the final

00:01:55,009 --> 00:01:58,580
version of 2.0 which has been really

00:01:57,259 --> 00:02:00,649
exciting it felt like it was never going

00:01:58,580 --> 00:02:02,720
to finish but we did it and it's and

00:02:00,649 --> 00:02:04,820
we're really happy with what it came out

00:02:02,720 --> 00:02:06,770
to be and one big part of it other than

00:02:04,820 --> 00:02:08,899
being faster and simpler and a

00:02:06,770 --> 00:02:10,580
multi-platform framework is components

00:02:08,899 --> 00:02:12,709
are the building block of applications

00:02:10,580 --> 00:02:15,470
we had components in angular 1 with

00:02:12,709 --> 00:02:17,630
directives but in India - they are your

00:02:15,470 --> 00:02:19,310
your app is a component it's made up of

00:02:17,630 --> 00:02:21,650
other components everything from top to

00:02:19,310 --> 00:02:23,390
bottom is components and so that's kind

00:02:21,650 --> 00:02:24,920
of how this is a typical way in app

00:02:23,390 --> 00:02:26,300
looks you've got your app and you've got

00:02:24,920 --> 00:02:28,040
some routes and none of those you have a

00:02:26,300 --> 00:02:31,010
bunch of components that compose

00:02:28,040 --> 00:02:32,630
together to make up your views so I

00:02:31,010 --> 00:02:34,430
think everybody probably knows these

00:02:32,630 --> 00:02:35,690
reasons why components are nice why

00:02:34,430 --> 00:02:38,180
we've moved to them but just to

00:02:35,690 --> 00:02:39,830
reiterate they're reusable you can build

00:02:38,180 --> 00:02:41,180
a component one person or technical

00:02:39,830 --> 00:02:43,700
component you can use it in lots of

00:02:41,180 --> 00:02:45,650
different contexts because they have a

00:02:43,700 --> 00:02:47,810
nice contract between parents and

00:02:45,650 --> 00:02:49,430
children rather than having page driven

00:02:47,810 --> 00:02:51,049
apps like we used to have where a page

00:02:49,430 --> 00:02:53,420
is controlling everything it's getting

00:02:51,049 --> 00:02:54,920
the data it's arranging views listening

00:02:53,420 --> 00:02:57,440
to events now we can break it into

00:02:54,920 --> 00:02:59,090
components that can say what they expect

00:02:57,440 --> 00:03:01,970
from the parent and also encapsulate

00:02:59,090 --> 00:03:03,140
their own behavior so they're stating

00:03:01,970 --> 00:03:04,280
behavior doesn't have to lead to the

00:03:03,140 --> 00:03:06,579
parent and vice versa

00:03:04,280 --> 00:03:10,070
you can develop things in separation and

00:03:06,579 --> 00:03:11,630
make them more maintainable so that's

00:03:10,070 --> 00:03:13,010
nice but they require a different way of

00:03:11,630 --> 00:03:15,140
thinking they present some some

00:03:13,010 --> 00:03:16,670
challenges so let's take a look at an

00:03:15,140 --> 00:03:20,180
example app let's just say we have an

00:03:16,670 --> 00:03:22,340
example of some github issues that are

00:03:20,180 --> 00:03:23,930
assigned to me and I want to look

00:03:22,340 --> 00:03:27,230
through them and click on them and view

00:03:23,930 --> 00:03:28,850
them how would we define this in angular

00:03:27,230 --> 00:03:30,620
this is kind of what it looks like and

00:03:28,850 --> 00:03:32,720
I'll walk through the the left-hand side

00:03:30,620 --> 00:03:35,000
which is the definition of each of those

00:03:32,720 --> 00:03:36,470
rows but on the right-hand side we can

00:03:35,000 --> 00:03:38,750
see what the parent view would look like

00:03:36,470 --> 00:03:40,970
where we have our header and then we're

00:03:38,750 --> 00:03:43,579
enumerated over we're iterating over

00:03:40,970 --> 00:03:45,739
issues in our parent component and

00:03:43,579 --> 00:03:48,440
creating this new child component of GH

00:03:45,739 --> 00:03:50,450
issue and we're setting the property of

00:03:48,440 --> 00:03:52,220
just passing in the ID of each issue so

00:03:50,450 --> 00:03:55,400
the child component can can get that

00:03:52,220 --> 00:03:57,079
issue itself so the first thing you'll

00:03:55,400 --> 00:03:58,550
notice about the component definition is

00:03:57,079 --> 00:04:00,710
this a decorator that's a

00:03:58,550 --> 00:04:02,990
to the github issue component class an

00:04:00,710 --> 00:04:04,670
angular we really believe in declarative

00:04:02,990 --> 00:04:05,950
API is we try to make everything as

00:04:04,670 --> 00:04:08,600
declarative as possible because of

00:04:05,950 --> 00:04:11,300
because you can optimize declarative API

00:04:08,600 --> 00:04:12,980
and also analyze them statically so this

00:04:11,300 --> 00:04:14,540
lets angular without instantiating your

00:04:12,980 --> 00:04:16,790
component be able to look at your

00:04:14,540 --> 00:04:18,260
components and understand like what is

00:04:16,790 --> 00:04:20,390
their template what's their selector and

00:04:18,260 --> 00:04:23,000
do some optimization around those ahead

00:04:20,390 --> 00:04:25,880
of time so inside this decorator we give

00:04:23,000 --> 00:04:27,740
the template which is just at h2 and we

00:04:25,880 --> 00:04:29,600
show the title of the issue and then we

00:04:27,740 --> 00:04:32,300
give it the CSS selector so angular

00:04:29,600 --> 00:04:34,220
knows where to put it and then inside

00:04:32,300 --> 00:04:37,220
here we have this other decorator at

00:04:34,220 --> 00:04:39,110
input which tells angular that we expect

00:04:37,220 --> 00:04:41,480
our parent to give us this property and

00:04:39,110 --> 00:04:43,040
we're using typescript and telling it

00:04:41,480 --> 00:04:45,140
that the type is expected be a number

00:04:43,040 --> 00:04:46,880
and this other property is expected to

00:04:45,140 --> 00:04:50,300
be a github issue interface that we've

00:04:46,880 --> 00:04:51,890
defined so we've got this simple app but

00:04:50,300 --> 00:04:55,120
who's responsible for getting the issue

00:04:51,890 --> 00:04:57,860
data to the child component and this is

00:04:55,120 --> 00:04:59,840
still a common problem to be solved in

00:04:57,860 --> 00:05:02,120
lots of applications so performance is

00:04:59,840 --> 00:05:04,250
one thing we need to consider when

00:05:02,120 --> 00:05:05,870
fetching the data in the component of it

00:05:04,250 --> 00:05:07,330
is it going to be fetching itself what

00:05:05,870 --> 00:05:09,440
are the performance implications of that

00:05:07,330 --> 00:05:11,150
maintainability of the component the

00:05:09,440 --> 00:05:12,830
child component the parent component the

00:05:11,150 --> 00:05:15,169
whole application and the data

00:05:12,830 --> 00:05:17,000
consistency between the child component

00:05:15,169 --> 00:05:18,680
in this context and its parent context

00:05:17,000 --> 00:05:20,960
and any other place the same model might

00:05:18,680 --> 00:05:24,050
be used so one way we could do is just

00:05:20,960 --> 00:05:25,370
fetch it inside of the component so we

00:05:24,050 --> 00:05:26,930
could change our component and add

00:05:25,370 --> 00:05:29,720
something to it we could inject

00:05:26,930 --> 00:05:31,430
angular's HTTP service and in this

00:05:29,720 --> 00:05:33,140
lifecycle hook we could say after the

00:05:31,430 --> 00:05:36,380
components initialized let's just get

00:05:33,140 --> 00:05:39,050
the the issue from the github api and

00:05:36,380 --> 00:05:40,640
set the observable that comes back from

00:05:39,050 --> 00:05:43,100
that service on our class and then in

00:05:40,640 --> 00:05:44,419
our template we use angular's async pipe

00:05:43,100 --> 00:05:46,250
which will automatically unwrap the

00:05:44,419 --> 00:05:48,680
observable and get its title from there

00:05:46,250 --> 00:05:50,870
and that's pretty simple it's not much

00:05:48,680 --> 00:05:52,760
more complicated than the plain

00:05:50,870 --> 00:05:55,580
component without any data but what are

00:05:52,760 --> 00:05:58,160
some drawbacks to this approach one is

00:05:55,580 --> 00:06:01,190
you're making an XML HTTP request for

00:05:58,160 --> 00:06:03,470
every item in that list so if we had 10

00:06:01,190 --> 00:06:05,780
items that list we're making 10 X 8 jars

00:06:03,470 --> 00:06:07,070
and those could be blocking queuing up

00:06:05,780 --> 00:06:09,440
waiting for the other ones to complete

00:06:07,070 --> 00:06:10,940
before the browser continues them and we

00:06:09,440 --> 00:06:12,350
could be making redundant requests for

00:06:10,940 --> 00:06:14,540
data that's already been loaded we

00:06:12,350 --> 00:06:15,910
no if this this model has already been

00:06:14,540 --> 00:06:18,440
loaded somewhere else in the application

00:06:15,910 --> 00:06:19,970
or if the parent even already has this

00:06:18,440 --> 00:06:21,410
model loaded so we're making more

00:06:19,970 --> 00:06:23,210
Network requests than we need to or

00:06:21,410 --> 00:06:25,520
using more battery than we need to and

00:06:23,210 --> 00:06:27,380
we could have inconsistent data so if

00:06:25,520 --> 00:06:29,120
this same issue model appears in

00:06:27,380 --> 00:06:31,130
multiple places this is just naively

00:06:29,120 --> 00:06:32,630
fetching it it might look different if

00:06:31,130 --> 00:06:35,510
it's changed on the server in between

00:06:32,630 --> 00:06:36,380
requests and so that's a problem I think

00:06:35,510 --> 00:06:37,610
this audience is probably already

00:06:36,380 --> 00:06:39,080
familiar with these challenges because

00:06:37,610 --> 00:06:42,260
these are some of the benefits of graph

00:06:39,080 --> 00:06:43,880
QL but another way we could go is to

00:06:42,260 --> 00:06:46,400
just put a service in it so an angular

00:06:43,880 --> 00:06:48,020
we use services for managing a lot of

00:06:46,400 --> 00:06:49,880
state between components or anything

00:06:48,020 --> 00:06:51,920
that should be shared this is pretty

00:06:49,880 --> 00:06:54,530
similar to the approach with HTTP we

00:06:51,920 --> 00:06:56,720
could inject a service and just get it

00:06:54,530 --> 00:07:00,470
from our service and set that through

00:06:56,720 --> 00:07:01,970
our template but the problem here is

00:07:00,470 --> 00:07:04,910
there's a lot of things you need to do

00:07:01,970 --> 00:07:07,130
you need to manage a lot of a lot of

00:07:04,910 --> 00:07:09,050
logic inside of that service so there's

00:07:07,130 --> 00:07:11,060
some complexity of do you want to batch

00:07:09,050 --> 00:07:14,300
these requests do you want to cache them

00:07:11,060 --> 00:07:16,010
how do you invalidate the cache and on

00:07:14,300 --> 00:07:17,930
top of that there's coupling between

00:07:16,010 --> 00:07:19,070
your component in that service now so

00:07:17,930 --> 00:07:21,110
your component is a little bit less

00:07:19,070 --> 00:07:22,820
reusable it's it's not so much you can

00:07:21,110 --> 00:07:24,500
just drop it and it takes care of itself

00:07:22,820 --> 00:07:26,780
anywhere this component needs to live

00:07:24,500 --> 00:07:28,640
the application will also have to use

00:07:26,780 --> 00:07:31,070
that service and also stay up-to-date

00:07:28,640 --> 00:07:33,440
with make sure that service is provided

00:07:31,070 --> 00:07:34,760
and you couldn't really use this outside

00:07:33,440 --> 00:07:35,870
of an application if it doesn't have

00:07:34,760 --> 00:07:37,850
that service so you couldn't make this

00:07:35,870 --> 00:07:40,190
component as a standalone reusable

00:07:37,850 --> 00:07:42,260
component so let's look at another way

00:07:40,190 --> 00:07:43,700
we could do this we could just pass the

00:07:42,260 --> 00:07:45,860
full data from the parent to the

00:07:43,700 --> 00:07:47,960
children and here's a simple example of

00:07:45,860 --> 00:07:49,400
what that could look like we could just

00:07:47,960 --> 00:07:50,900
set the issue title property of the

00:07:49,400 --> 00:07:52,400
component to the title because that's

00:07:50,900 --> 00:07:55,730
the only thing that the component needs

00:07:52,400 --> 00:07:58,220
right now but this is bad because it's

00:07:55,730 --> 00:07:59,870
leaky for one now the parent component

00:07:58,220 --> 00:08:01,760
needs to know what the child component

00:07:59,870 --> 00:08:03,230
needs and if that child component ever

00:08:01,760 --> 00:08:05,480
changes its view then the parent

00:08:03,230 --> 00:08:07,550
component any time editing context where

00:08:05,480 --> 00:08:09,140
this appears it now has to make sure

00:08:07,550 --> 00:08:10,730
it's giving whatever other properties it

00:08:09,140 --> 00:08:12,110
needs so it looks simple with this

00:08:10,730 --> 00:08:13,730
example because we only have one

00:08:12,110 --> 00:08:16,280
property but once you start changing the

00:08:13,730 --> 00:08:19,040
properties then it starts to become more

00:08:16,280 --> 00:08:20,600
problematic and so it's an API

00:08:19,040 --> 00:08:22,730
maintenance burden as well for that

00:08:20,600 --> 00:08:25,160
reason that you have to

00:08:22,730 --> 00:08:26,630
you have to maintain the outside and

00:08:25,160 --> 00:08:29,240
inside of the component the parent and

00:08:26,630 --> 00:08:31,520
the child component to know which data

00:08:29,240 --> 00:08:33,110
is expected and it's not safe to assume

00:08:31,520 --> 00:08:35,030
that the parent will always add the data

00:08:33,110 --> 00:08:37,580
such as a route that would include this

00:08:35,030 --> 00:08:39,590
component may just have the ID of the

00:08:37,580 --> 00:08:41,960
issue that it wants to see and so the

00:08:39,590 --> 00:08:44,180
parent ideally would just proxy that ID

00:08:41,960 --> 00:08:45,710
down to the component and let it handle

00:08:44,180 --> 00:08:46,730
the work instead of the parent having to

00:08:45,710 --> 00:08:50,240
fetch the data and give it to the

00:08:46,730 --> 00:08:51,650
component so with that I want to pose

00:08:50,240 --> 00:08:53,120
maybe there is a better way maybe

00:08:51,650 --> 00:08:54,800
there's something that can make the

00:08:53,120 --> 00:08:56,600
separation nice where we can have the

00:08:54,800 --> 00:08:58,340
components declaring what they want

00:08:56,600 --> 00:08:59,750
without having to leak to parents and

00:08:58,340 --> 00:09:01,670
without having to worry about these

00:08:59,750 --> 00:09:03,500
performance optimizations that we would

00:09:01,670 --> 00:09:05,810
get with writing a service so with that

00:09:03,500 --> 00:09:10,850
I'll ask my colleague or Goldstein to to

00:09:05,810 --> 00:09:12,560
come up hi everyone so it's not a secret

00:09:10,850 --> 00:09:14,270
that we're in a graphical conference so

00:09:12,560 --> 00:09:16,850
we're you know most of you know how

00:09:14,270 --> 00:09:19,610
graphical solve this problem so today I

00:09:16,850 --> 00:09:20,930
will try not to focus on what is

00:09:19,610 --> 00:09:22,610
graphical and how to use it with angular

00:09:20,930 --> 00:09:25,310
because there's a lot enough talks about

00:09:22,610 --> 00:09:27,680
it online and also there's the graphical

00:09:25,310 --> 00:09:31,430
dot or website which I copy most of my

00:09:27,680 --> 00:09:34,310
slides fall but I want I want to touch

00:09:31,430 --> 00:09:37,010
on three today I want to touch on three

00:09:34,310 --> 00:09:40,040
main concepts that we found out from

00:09:37,010 --> 00:09:42,710
users that use angular and graphical in

00:09:40,040 --> 00:09:45,500
the wild and those three main concepts

00:09:42,710 --> 00:09:47,390
how they help them build those new types

00:09:45,500 --> 00:09:49,370
of apps as they're building and those

00:09:47,390 --> 00:09:51,980
are the three main benefits that we see

00:09:49,370 --> 00:09:54,680
when we talk to customers so those three

00:09:51,980 --> 00:09:57,680
when it meant our concepts are first of

00:09:54,680 --> 00:10:00,140
all a component based API the second of

00:09:57,680 --> 00:10:02,930
all is a single request for a single

00:10:00,140 --> 00:10:05,360
render and the third is a graphical

00:10:02,930 --> 00:10:08,690
first approach that you'll hear a lot

00:10:05,360 --> 00:10:11,210
about in this conference so I'll start

00:10:08,690 --> 00:10:13,520
with the component based API so I like

00:10:11,210 --> 00:10:15,670
you know and here is another thing that

00:10:13,520 --> 00:10:18,440
I'm still stealing from graphical or

00:10:15,670 --> 00:10:19,580
graphical has the ability to you with

00:10:18,440 --> 00:10:21,410
this graphical query you have the

00:10:19,580 --> 00:10:23,120
ability to specify exactly what you want

00:10:21,410 --> 00:10:24,940
you will get exactly what you need back

00:10:23,120 --> 00:10:29,210
and those queries are actually

00:10:24,940 --> 00:10:30,770
composable so what we can do that we

00:10:29,210 --> 00:10:32,600
couldn't do before if we're thinking

00:10:30,770 --> 00:10:34,690
about the problem that Jeff proposed is

00:10:32,600 --> 00:10:36,490
that we could break a down or a tea

00:10:34,690 --> 00:10:40,060
eyes and put those data data

00:10:36,490 --> 00:10:42,280
dependencies inside our component and

00:10:40,060 --> 00:10:44,830
then those components can really be

00:10:42,280 --> 00:10:48,370
reused and reusable and self-contained

00:10:44,830 --> 00:10:50,800
so it looks and that means that if some

00:10:48,370 --> 00:10:53,110
components changes like one field of the

00:10:50,800 --> 00:10:57,250
component changes then nothing else

00:10:53,110 --> 00:10:59,890
changes let's look at an example so we

00:10:57,250 --> 00:11:02,680
have here the same GW component and

00:10:59,890 --> 00:11:04,840
right now it needs just the title so

00:11:02,680 --> 00:11:07,330
what we do we just require e the graph

00:11:04,840 --> 00:11:12,640
that we query from roughly the idea that

00:11:07,330 --> 00:11:14,140
title and that this is this but what

00:11:12,640 --> 00:11:17,260
happens if now we want to also add

00:11:14,140 --> 00:11:19,690
they're created at film so the only

00:11:17,260 --> 00:11:21,730
place we need to change that is in that

00:11:19,690 --> 00:11:24,220
component itself so we don't need to

00:11:21,730 --> 00:11:25,840
nothing there's no we need not we don't

00:11:24,220 --> 00:11:28,600
need to take care of a parent component

00:11:25,840 --> 00:11:33,640
a service or anything else so we get

00:11:28,600 --> 00:11:38,740
real reusable components this the second

00:11:33,640 --> 00:11:41,860
concept is a single single request for a

00:11:38,740 --> 00:11:43,150
single render so if we think about I

00:11:41,860 --> 00:11:44,980
want to stop for a second and think

00:11:43,150 --> 00:11:46,780
about why are we building those new

00:11:44,980 --> 00:11:48,490
types of apps and I think the main the

00:11:46,780 --> 00:11:52,030
main reason is user experience we want

00:11:48,490 --> 00:11:53,920
so we want our apps to be fast and with

00:11:52,030 --> 00:11:55,680
angular the performances because the

00:11:53,920 --> 00:11:58,450
rendering performance has become amazing

00:11:55,680 --> 00:12:00,100
but that means that the bottleneck is no

00:11:58,450 --> 00:12:02,590
longer to the rendering performance the

00:12:00,100 --> 00:12:04,450
bottleneck is the network and I think

00:12:02,590 --> 00:12:07,480
with those types of apps we can we

00:12:04,450 --> 00:12:09,820
actually can tolerate that per single

00:12:07,480 --> 00:12:11,740
render of our app will send multiple

00:12:09,820 --> 00:12:13,870
requests to the server like the user

00:12:11,740 --> 00:12:17,080
experience won't be as good so I think

00:12:13,870 --> 00:12:18,850
today then we have to make when we write

00:12:17,080 --> 00:12:22,570
our apps we have to make sure that every

00:12:18,850 --> 00:12:24,580
time they are aprender is a page with

00:12:22,570 --> 00:12:27,370
all of its components inside we have to

00:12:24,580 --> 00:12:30,280
make sure that there will be just one

00:12:27,370 --> 00:12:32,410
single request per render and then if we

00:12:30,280 --> 00:12:34,150
move to another route again we will

00:12:32,410 --> 00:12:36,640
render again but just with one single

00:12:34,150 --> 00:12:38,110
simple single request because the

00:12:36,640 --> 00:12:41,890
performance of the most important thing

00:12:38,110 --> 00:12:45,790
here and the third thing is graphical

00:12:41,890 --> 00:12:47,500
first so I'm looking it is a from an

00:12:45,790 --> 00:12:49,240
angular developer perspective I used to

00:12:47,500 --> 00:12:51,160
be a consultant in big companies and

00:12:49,240 --> 00:12:53,290
usually what happens is that there's

00:12:51,160 --> 00:12:56,080
someone comes in there we do a big

00:12:53,290 --> 00:12:58,900
rewrite and usually what happens is that

00:12:56,080 --> 00:13:01,060
we start building our angular components

00:12:58,900 --> 00:13:03,580
we finish usually faster than the server

00:13:01,060 --> 00:13:05,740
and then we wait and then when the

00:13:03,580 --> 00:13:07,960
integration comes it usually fails

00:13:05,740 --> 00:13:10,180
because we have no idea what we'll run a

00:13:07,960 --> 00:13:11,530
get back we have no ways to ensure it

00:13:10,180 --> 00:13:13,630
that we know when we don't have any

00:13:11,530 --> 00:13:16,390
tools to make sure that I'll coordinate

00:13:13,630 --> 00:13:18,730
we'll building actually works but we run

00:13:16,390 --> 00:13:20,920
with graph QL we can actually because

00:13:18,730 --> 00:13:24,940
it's a static skill analyzable schema

00:13:20,920 --> 00:13:27,820
with with types we actually can start

00:13:24,940 --> 00:13:29,950
with the schema then the server

00:13:27,820 --> 00:13:31,930
developers and the angular or front-end

00:13:29,950 --> 00:13:34,810
developers will start building their own

00:13:31,930 --> 00:13:36,820
app apps and will have all the all the

00:13:34,810 --> 00:13:39,220
things that we need in order inside our

00:13:36,820 --> 00:13:40,900
IDE to make sure that the app will work

00:13:39,220 --> 00:13:43,350
when you get to the integration

00:13:40,900 --> 00:13:47,220
including outer completion highlighting

00:13:43,350 --> 00:13:50,650
and those are some of the benefits of

00:13:47,220 --> 00:13:53,230
statically analyzed queries which

00:13:50,650 --> 00:13:55,900
angular is really is really double down

00:13:53,230 --> 00:13:59,200
on and we're in the Apollo client also

00:13:55,900 --> 00:14:03,130
you and this is example this you see

00:13:59,200 --> 00:14:07,660
here it's actually it's not angular but

00:14:03,130 --> 00:14:09,850
it brings me back to my last point when

00:14:07,660 --> 00:14:12,940
those three concept when you think about

00:14:09,850 --> 00:14:14,680
them there are the same a course or

00:14:12,940 --> 00:14:17,760
cross our customers whether they use

00:14:14,680 --> 00:14:20,320
react or angular or any other view layer

00:14:17,760 --> 00:14:22,540
and that means that we can actually

00:14:20,320 --> 00:14:24,880
share a lot of concepts and we can share

00:14:22,540 --> 00:14:28,390
not only the concepts and the best

00:14:24,880 --> 00:14:30,580
practices but you can also share code so

00:14:28,390 --> 00:14:33,820
how we when we started building Apollo

00:14:30,580 --> 00:14:36,250
client we started with we build the

00:14:33,820 --> 00:14:39,400
github example which some of you who use

00:14:36,250 --> 00:14:41,170
the Apollo client knows and there's two

00:14:39,400 --> 00:14:44,320
versions of this example one is angular

00:14:41,170 --> 00:14:46,660
and one is is react and when you started

00:14:44,320 --> 00:14:48,400
building that we saw with time we saw

00:14:46,660 --> 00:14:50,980
that there's more and more code that we

00:14:48,400 --> 00:14:53,440
take down from the specific view layer

00:14:50,980 --> 00:14:57,510
integration and we put it inside the

00:14:53,440 --> 00:14:59,700
polar client itself and we and this is

00:14:57,510 --> 00:15:01,890
a process that happens all the time like

00:14:59,700 --> 00:15:04,440
with every week we we look at that we

00:15:01,890 --> 00:15:06,360
compare our we compare our code with the

00:15:04,440 --> 00:15:09,090
reactant angular and then we work

00:15:06,360 --> 00:15:11,010
together with the angular team to make

00:15:09,090 --> 00:15:13,170
sure those best practices are supported

00:15:11,010 --> 00:15:14,820
by them and we also get feedback from

00:15:13,170 --> 00:15:17,340
the angular team if those concepts are

00:15:14,820 --> 00:15:19,800
actually good or not so it means that

00:15:17,340 --> 00:15:21,720
basically the main code when you use the

00:15:19,800 --> 00:15:23,310
palo client most of the code runs in a

00:15:21,720 --> 00:15:25,730
polar client library itself and the

00:15:23,310 --> 00:15:28,230
integration libraries are very slim and

00:15:25,730 --> 00:15:30,210
this is this is very important not only

00:15:28,230 --> 00:15:32,220
because we can share code but also we

00:15:30,210 --> 00:15:34,650
can use any view layer most importantly

00:15:32,220 --> 00:15:36,390
angular 1 today you can use with angular

00:15:34,650 --> 00:15:38,100
1 you can use components with any other

00:15:36,390 --> 00:15:39,870
one so you can start shifting your

00:15:38,100 --> 00:15:43,290
applications whether you use angular 1

00:15:39,870 --> 00:15:45,900
or view J's or any other view layer so

00:15:43,290 --> 00:15:49,110
that concept feedback is very powerful

00:15:45,900 --> 00:15:52,410
that is shared between view layers in

00:15:49,110 --> 00:15:53,910
our team and also can be shared with all

00:15:52,410 --> 00:15:56,400
the other players in the industry big

00:15:53,910 --> 00:15:59,910
weather whatever view layers they're

00:15:56,400 --> 00:16:01,290
using so if you're hiring or you do or

00:15:59,910 --> 00:16:04,380
you need to share knowledge or anything

00:16:01,290 --> 00:16:10,470
like that then it's very easy for you to

00:16:04,380 --> 00:16:12,450
move from or end to share things so the

00:16:10,470 --> 00:16:14,460
way like a place to check out this get

00:16:12,450 --> 00:16:16,620
hand code and how similar it is between

00:16:14,460 --> 00:16:22,370
the villas there's the get an angular 2

00:16:16,620 --> 00:16:26,850
and didn't react in in a repository and

00:16:22,370 --> 00:16:28,530
yeah so so to summarize apps now are

00:16:26,850 --> 00:16:30,360
built component based I think everyone

00:16:28,530 --> 00:16:32,310
has agreed on that as building apps that

00:16:30,360 --> 00:16:34,680
way for the most part and fast rendering

00:16:32,310 --> 00:16:37,680
is critical to user experience being

00:16:34,680 --> 00:16:40,110
what they expect and and like we said

00:16:37,680 --> 00:16:42,600
before like we know already most of our

00:16:40,110 --> 00:16:44,130
apps are actually billed separately the

00:16:42,600 --> 00:16:46,410
client is completely separate from the

00:16:44,130 --> 00:16:48,870
server and we move to those concept long

00:16:46,410 --> 00:16:50,850
time ago but then it may - we need a

00:16:48,870 --> 00:16:53,310
data integration and an API that

00:16:50,850 --> 00:16:55,470
supports those concepts so we can create

00:16:53,310 --> 00:16:58,230
a component base the API that sits

00:16:55,470 --> 00:17:00,450
inside our component we should make sure

00:16:58,230 --> 00:17:02,850
we that we use the tools that make every

00:17:00,450 --> 00:17:06,209
render or the app send just one single

00:17:02,850 --> 00:17:08,980
request so the app will be faster and in

00:17:06,209 --> 00:17:11,520
order to make this client and server

00:17:08,980 --> 00:17:14,559
separate implementation fast and

00:17:11,520 --> 00:17:17,370
efficient we have the graphical schema

00:17:14,559 --> 00:17:21,790
that gives us all the tools to do that

00:17:17,370 --> 00:17:25,169
today so I think the best place to check

00:17:21,790 --> 00:17:27,760
those out is that our Apollo data a

00:17:25,169 --> 00:17:30,580
website there's examples for any of you

00:17:27,760 --> 00:17:31,780
that are out there and yeah thank you so

00:17:30,580 --> 00:17:33,190
much thank you and we'll be hanging

00:17:31,780 --> 00:17:34,780
around if anyone has questions or let's

00:17:33,190 --> 00:17:37,960
say

00:17:34,780 --> 00:17:37,960

YouTube URL: https://www.youtube.com/watch?v=Xx39bv-5ojA


