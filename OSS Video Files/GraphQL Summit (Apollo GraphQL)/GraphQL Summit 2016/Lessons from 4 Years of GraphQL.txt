Title: Lessons from 4 Years of GraphQL
Publication date: 2016-11-02
Playlist: GraphQL Summit 2016
Description: 
	Lee Byron, GraphQL/Facebook

GraphQL has been in use at Facebook for over four years and evolved a lot before it was open sourced. During that time we learned a lot about what works and why, and derived a series of best practices. Hopefully our best practices and lessons learned are relevant not only to your use of GraphQL, but how you design and build all sorts of software.

Learn more about GraphQL:
http://graphql.org

Learn more about GraphQL Summit:
http://graphqlsummit.com

Join our GraphQL SF meetup to hear more about GraphQL best practices and implementations: 
http://meetup.com/GraphQL-SF/
Captions: 
	00:00:05,020 --> 00:00:09,160
all right hi everyone how you feeling

00:00:06,970 --> 00:00:10,900
it's the end of the day I'm the last

00:00:09,160 --> 00:00:16,390
thing between you and drinks on the roof

00:00:10,900 --> 00:00:18,250
so I will take my time you know I'm

00:00:16,390 --> 00:00:20,740
really excited to be here and see this

00:00:18,250 --> 00:00:21,429
huge audience it's kind of crazy you

00:00:20,740 --> 00:00:23,470
know

00:00:21,429 --> 00:00:25,869
graph goes 4 years old but it's only

00:00:23,470 --> 00:00:28,929
been public for a little over 1 year and

00:00:25,869 --> 00:00:30,339
when we first open sourced graph QL if

00:00:28,929 --> 00:00:32,110
you told me that a little over a year

00:00:30,339 --> 00:00:34,750
later I'd be closing out a conference

00:00:32,110 --> 00:00:35,350
dedicated to it I probably wouldn't have

00:00:34,750 --> 00:00:38,500
believed you

00:00:35,350 --> 00:00:40,239
and really at that time I wasn't even

00:00:38,500 --> 00:00:43,989
sure if graphical is going to be

00:00:40,239 --> 00:00:46,390
relevant outside of Facebook of course

00:00:43,989 --> 00:00:48,239
you all here today have proven me so

00:00:46,390 --> 00:00:51,269
very wrong and I'm thankful for that

00:00:48,239 --> 00:00:54,370
it's actually really amazing that today

00:00:51,269 --> 00:00:56,890
almost all of the talks you heard were

00:00:54,370 --> 00:00:58,960
from people outside of Facebook all

00:00:56,890 --> 00:01:00,699
using graph QL within the last year it's

00:00:58,960 --> 00:01:02,530
it's amazing and our community our

00:01:00,699 --> 00:01:03,730
graphical community which is way bigger

00:01:02,530 --> 00:01:07,690
than just the people who are in this

00:01:03,730 --> 00:01:09,730
room has been growing rapidly way faster

00:01:07,690 --> 00:01:11,020
than I've seen some of the other

00:01:09,730 --> 00:01:14,260
communities that we've started at

00:01:11,020 --> 00:01:17,140
Facebook grow and speaking of these

00:01:14,260 --> 00:01:18,850
expectations sort of shortly after we

00:01:17,140 --> 00:01:20,590
open sourced graph killer last year I

00:01:18,850 --> 00:01:22,780
started to scribble down what I thought

00:01:20,590 --> 00:01:24,910
would happen it's kind of like my

00:01:22,780 --> 00:01:28,660
best-case scenario for a secret master

00:01:24,910 --> 00:01:33,400
plan for graphical world domination this

00:01:28,660 --> 00:01:35,020
is what it looked like yeah first I

00:01:33,400 --> 00:01:37,030
thought you know we'd see some hobbyists

00:01:35,020 --> 00:01:39,040
and personal projects in the first few

00:01:37,030 --> 00:01:40,480
months you know because they've got

00:01:39,040 --> 00:01:42,820
nothing to lose why not try something

00:01:40,480 --> 00:01:44,230
new and then maybe in the first six

00:01:42,820 --> 00:01:45,790
months we'd see it implemented in a

00:01:44,230 --> 00:01:47,980
couple new languages that that's why we

00:01:45,790 --> 00:01:49,990
shipped it as a spec rather than just

00:01:47,980 --> 00:01:51,970
software and then maybe somewhere close

00:01:49,990 --> 00:01:53,650
to the one year horizon we'd start to

00:01:51,970 --> 00:01:56,560
see some startups and some riskier

00:01:53,650 --> 00:01:58,960
smaller crews take on graph QL and maybe

00:01:56,560 --> 00:02:01,030
at a year-and-a-half mark we'd see some

00:01:58,960 --> 00:02:03,370
really cool tools for using graph QL and

00:02:01,030 --> 00:02:05,350
then closer to two years we'd see

00:02:03,370 --> 00:02:07,630
medium-sized companies and then like

00:02:05,350 --> 00:02:10,119
closer down here like for years we'd see

00:02:07,630 --> 00:02:12,640
big companies and tech giants for the

00:02:10,119 --> 00:02:14,140
first few months I was pretty excited

00:02:12,640 --> 00:02:16,329
it's like oh yeah this is happening this

00:02:14,140 --> 00:02:17,450
is awesome and I saw a handful of people

00:02:16,329 --> 00:02:19,129
a lot of them in the room so

00:02:17,450 --> 00:02:20,480
of them who did the tech talks start to

00:02:19,129 --> 00:02:22,340
pick up graph kill and start some of

00:02:20,480 --> 00:02:26,030
those early personal projects that were

00:02:22,340 --> 00:02:27,440
really exciting uh then we got here way

00:02:26,030 --> 00:02:29,690
faster than I thought so I thought it

00:02:27,440 --> 00:02:31,519
was going to take about two years for

00:02:29,690 --> 00:02:33,800
graphical to get implemented in most

00:02:31,519 --> 00:02:36,200
major languages so I put like a rough

00:02:33,800 --> 00:02:37,519
line at like ten languages that happened

00:02:36,200 --> 00:02:39,709
to them like three and a half months

00:02:37,519 --> 00:02:43,130
it's blown out of the water and I think

00:02:39,709 --> 00:02:45,709
it's pretty safe to call github a large

00:02:43,130 --> 00:02:47,269
company maybe even a tech giant and

00:02:45,709 --> 00:02:51,260
there of course rolling out public graph

00:02:47,269 --> 00:02:54,590
QL api's now now we're not to this last

00:02:51,260 --> 00:02:56,120
step ubiquity we're not here yet so we

00:02:54,590 --> 00:02:58,610
have a lot of things that we still need

00:02:56,120 --> 00:03:01,760
to build but I just want to say overall

00:02:58,610 --> 00:03:04,400
I'm just so impressed by how quickly

00:03:01,760 --> 00:03:06,220
we've blown away my totally wrong

00:03:04,400 --> 00:03:08,299
assumptions about what would happen and

00:03:06,220 --> 00:03:09,530
for those of you that I haven't had the

00:03:08,299 --> 00:03:10,730
opportunity to meet yet hopefully I'll

00:03:09,530 --> 00:03:12,860
get to meet some of you up on the roof

00:03:10,730 --> 00:03:14,090
later my name is Lee Byron I work at

00:03:12,860 --> 00:03:16,190
Facebook and a team called product

00:03:14,090 --> 00:03:17,930
infrastructure where I was one of the

00:03:16,190 --> 00:03:19,819
co-creators of graph kill four years ago

00:03:17,930 --> 00:03:21,769
and I now have the distinct pleasure of

00:03:19,819 --> 00:03:24,049
managing the evolution of the graphical

00:03:21,769 --> 00:03:27,380
language and help it integrate into some

00:03:24,049 --> 00:03:28,880
of our other services at Facebook so

00:03:27,380 --> 00:03:31,069
since the creation of graph QL

00:03:28,880 --> 00:03:32,750
I've watched our use of it evolved to

00:03:31,069 --> 00:03:35,900
cover more of the Facebook product as

00:03:32,750 --> 00:03:37,819
well as watch Braccio itself evolved to

00:03:35,900 --> 00:03:40,160
handle different scenarios and use cases

00:03:37,819 --> 00:03:42,139
and even when we open source graph QL

00:03:40,160 --> 00:03:43,760
last year we were in the middle of one

00:03:42,139 --> 00:03:46,459
of the most significant evolutions of

00:03:43,760 --> 00:03:47,840
graph Cal since its creation and over

00:03:46,459 --> 00:03:50,269
those four years I've learned a lot

00:03:47,840 --> 00:03:51,530
about how to best use graph QL and today

00:03:50,269 --> 00:03:54,170
I'm going to share some of those things

00:03:51,530 --> 00:03:55,910
with you today but we've also heard a

00:03:54,170 --> 00:03:57,889
lot of stories and practical advice so

00:03:55,910 --> 00:04:00,200
far so I want to go further than that I

00:03:57,889 --> 00:04:04,519
want to talk about some of the advice

00:04:00,200 --> 00:04:07,280
that I can I can provide from building

00:04:04,519 --> 00:04:10,370
and scaling and using graphical services

00:04:07,280 --> 00:04:13,130
but also the best practices from

00:04:10,370 --> 00:04:15,049
building graph kill itself and then

00:04:13,130 --> 00:04:16,940
after that I want to talk about some of

00:04:15,049 --> 00:04:18,799
the stuff that's guiding the future

00:04:16,940 --> 00:04:21,440
evolution of graph QL since I know

00:04:18,799 --> 00:04:23,389
that's kind of a popular topic but

00:04:21,440 --> 00:04:26,060
before we do that let's rewind a bit and

00:04:23,389 --> 00:04:27,289
look at a brief history of graph QL so

00:04:26,060 --> 00:04:29,270
hopefully it's interesting to hear a

00:04:27,289 --> 00:04:30,200
little bit about where this thing came

00:04:29,270 --> 00:04:32,570
from

00:04:30,200 --> 00:04:34,520
and also maybe dispel any notions that

00:04:32,570 --> 00:04:36,320
kind of graphical arrived into this

00:04:34,520 --> 00:04:39,470
world fully formed in the state that you

00:04:36,320 --> 00:04:41,390
find it today certainly not true so

00:04:39,470 --> 00:04:42,620
first came the original idea which came

00:04:41,390 --> 00:04:45,410
from my coworker who's sitting in the

00:04:42,620 --> 00:04:48,320
back Nick's rock he introduced what he

00:04:45,410 --> 00:04:49,610
originally called super graph so he was

00:04:48,320 --> 00:04:51,200
one of the founding members of her

00:04:49,610 --> 00:04:53,480
product infrastructure team and up until

00:04:51,200 --> 00:04:55,280
this point he was helping to build our

00:04:53,480 --> 00:04:57,500
servers data loading and privacy

00:04:55,280 --> 00:04:59,390
checking abstractions and he had this

00:04:57,500 --> 00:05:02,450
idea that we could take all the work

00:04:59,390 --> 00:05:05,150
that we had done so far and then expose

00:05:02,450 --> 00:05:07,700
it over an API for mobile apps which at

00:05:05,150 --> 00:05:09,200
this time we're just getting rebuilt so

00:05:07,700 --> 00:05:12,010
Nick built a prototype of super graph

00:05:09,200 --> 00:05:15,290
really over the course of a couple days

00:05:12,010 --> 00:05:16,910
then enough of us were excited that we

00:05:15,290 --> 00:05:18,530
started doing the initial development of

00:05:16,910 --> 00:05:20,360
what would be the very first version of

00:05:18,530 --> 00:05:22,430
graph QL I was working really closely

00:05:20,360 --> 00:05:24,740
with our iOS team on improving their

00:05:22,430 --> 00:05:26,660
newsfeed API and so Nick and I started

00:05:24,740 --> 00:05:29,120
to work together to adapt super graph to

00:05:26,660 --> 00:05:30,560
support Newton newsfeeds use-case and

00:05:29,120 --> 00:05:32,810
then Dan Schafer who's also here today

00:05:30,560 --> 00:05:35,360
was an engineer on the newsfeed server

00:05:32,810 --> 00:05:37,400
team so he definitely was part of making

00:05:35,360 --> 00:05:40,040
all this possible and joined our crew as

00:05:37,400 --> 00:05:41,840
well so things happen quickly and we

00:05:40,040 --> 00:05:44,570
evolved graph QL to meet the needs of

00:05:41,840 --> 00:05:46,520
the iOS newsfeed and within three weeks

00:05:44,570 --> 00:05:48,380
we had something that they could use and

00:05:46,520 --> 00:05:50,600
then a couple months after that we had

00:05:48,380 --> 00:05:54,320
completed support for all of newsfeed on

00:05:50,600 --> 00:05:55,970
graph GL and then in August of 2012 we

00:05:54,320 --> 00:05:58,370
launched this new app the new iOS

00:05:55,970 --> 00:06:00,440
newsfeed and when other teams saw just

00:05:58,370 --> 00:06:02,450
how fast it was and then heard from that

00:06:00,440 --> 00:06:04,430
team about the developer experience we

00:06:02,450 --> 00:06:06,500
were quickly inundated with requests to

00:06:04,430 --> 00:06:09,530
extend graph go to support more products

00:06:06,500 --> 00:06:12,140
at Facebook first we had profile and

00:06:09,530 --> 00:06:14,390
photos groups and events and this is

00:06:12,140 --> 00:06:16,100
when we actually bothered to form a team

00:06:14,390 --> 00:06:17,390
around graph cult so we could support

00:06:16,100 --> 00:06:19,520
this thing that we'd had built and

00:06:17,390 --> 00:06:21,740
during this time we've learned a lot

00:06:19,520 --> 00:06:22,910
about how to design good API s and I'm

00:06:21,740 --> 00:06:25,100
going to talk a little bit about that

00:06:22,910 --> 00:06:27,020
later but most of our work in this time

00:06:25,100 --> 00:06:29,060
was just making sure that the types type

00:06:27,020 --> 00:06:31,370
system continued to make sense as we

00:06:29,060 --> 00:06:33,020
evolved it over the four years we heard

00:06:31,370 --> 00:06:35,030
a little bit on the panel today but I'll

00:06:33,020 --> 00:06:37,490
talk about that as well but also in this

00:06:35,030 --> 00:06:39,410
time we encountered all the different

00:06:37,490 --> 00:06:40,740
use cases that we had for graph QL that

00:06:39,410 --> 00:06:42,509
we didn't anticipate

00:06:40,740 --> 00:06:45,360
during this window of time we added

00:06:42,509 --> 00:06:47,340
fragments mutations subscriptions native

00:06:45,360 --> 00:06:50,099
code generation persisted queries we

00:06:47,340 --> 00:06:51,750
built graphical we built relay so a lot

00:06:50,099 --> 00:06:54,539
of the stuff that's a either been folded

00:06:51,750 --> 00:06:57,060
into graph QL or hasn't become best

00:06:54,539 --> 00:06:58,919
practices or other open-source projects

00:06:57,060 --> 00:07:02,099
were all started or built during this

00:06:58,919 --> 00:07:04,259
window of time then in January of last

00:07:02,099 --> 00:07:06,419
year Dan Schafer spoke publicly about

00:07:04,259 --> 00:07:10,430
graph QL for the very first time in a

00:07:06,419 --> 00:07:12,569
talk at the react conference in 2015 and

00:07:10,430 --> 00:07:14,250
honestly we were just totally

00:07:12,569 --> 00:07:16,440
overwhelmed with the reception it was

00:07:14,250 --> 00:07:18,000
like a footnote in a conversation about

00:07:16,440 --> 00:07:20,039
kind of how we were building things at

00:07:18,000 --> 00:07:21,750
Facebook and people grabbed onto it and

00:07:20,039 --> 00:07:24,690
said when can we have this we're like

00:07:21,750 --> 00:07:26,190
whoa this was not supposed to be an open

00:07:24,690 --> 00:07:28,050
starts announcement we just wanted to

00:07:26,190 --> 00:07:29,400
tell you what we were working on so this

00:07:28,050 --> 00:07:30,479
got us all fired up we were like all

00:07:29,400 --> 00:07:33,060
right this is great we got to figure out

00:07:30,479 --> 00:07:36,240
how to share graph kill at the world but

00:07:33,060 --> 00:07:36,870
what does that mean exactly how do you

00:07:36,240 --> 00:07:38,819
do that

00:07:36,870 --> 00:07:41,130
you know graph kills server was tied

00:07:38,819 --> 00:07:43,500
deeply into how Facebook worked and we

00:07:41,130 --> 00:07:45,389
didn't really know how to extract it but

00:07:43,500 --> 00:07:47,159
we also weren't that proud of just how

00:07:45,389 --> 00:07:49,139
complicated graph kill had gotten over

00:07:47,159 --> 00:07:51,120
the previous years of adding all these

00:07:49,139 --> 00:07:53,099
additional things into it you know all

00:07:51,120 --> 00:07:54,810
these quirks and inconsistencies and the

00:07:53,099 --> 00:07:56,969
assumptions that we made when we first

00:07:54,810 --> 00:08:00,840
started graph go back in 2012 they were

00:07:56,969 --> 00:08:03,810
all still there so we decided to

00:08:00,840 --> 00:08:05,550
reevaluate we redesigned all the details

00:08:03,810 --> 00:08:07,770
of graphical we made improvements we

00:08:05,550 --> 00:08:10,979
fixed in consistencies we redesigned the

00:08:07,770 --> 00:08:12,360
syntax and the semantics in order to

00:08:10,979 --> 00:08:14,190
incorporate everything that we had

00:08:12,360 --> 00:08:16,289
learned over this window of time and

00:08:14,190 --> 00:08:18,509
this process took months it required a

00:08:16,289 --> 00:08:21,509
way more deliberate and careful process

00:08:18,509 --> 00:08:23,699
in comparison to the early rapid iterate

00:08:21,509 --> 00:08:26,490
iteration that characterized the early

00:08:23,699 --> 00:08:28,020
development of graph QL and this ended

00:08:26,490 --> 00:08:29,699
of course with us open sourcing a

00:08:28,020 --> 00:08:31,830
specification that describes graph QL

00:08:29,699 --> 00:08:33,300
and how it works as well as a new

00:08:31,830 --> 00:08:35,430
reference implementation written in

00:08:33,300 --> 00:08:36,839
JavaScript and we chose JavaScript not

00:08:35,430 --> 00:08:38,849
just because we like JavaScript we do

00:08:36,839 --> 00:08:40,529
like JavaScript at Facebook but because

00:08:38,849 --> 00:08:41,940
it's ubiquitous language more people

00:08:40,529 --> 00:08:44,070
know it than almost any other language

00:08:41,940 --> 00:08:45,149
and it let us build tools on top of it

00:08:44,070 --> 00:08:47,700
that were very portable

00:08:45,149 --> 00:08:49,199
in fact the version of graphical that we

00:08:47,700 --> 00:08:49,920
rebuilt during the same window of time

00:08:49,199 --> 00:08:52,110
in open source

00:08:49,920 --> 00:08:52,910
shortly after this is built on top of

00:08:52,110 --> 00:08:56,330
graphic

00:08:52,910 --> 00:08:58,190
yes and then anyone in the audience

00:08:56,330 --> 00:09:00,680
who's maintaining an open source project

00:08:58,190 --> 00:09:02,870
knows what I mean when I say that open

00:09:00,680 --> 00:09:05,090
sourcing something is a beginning not an

00:09:02,870 --> 00:09:06,710
end so we knew that we were going to get

00:09:05,090 --> 00:09:08,570
a ton of feedback on this thing that we

00:09:06,710 --> 00:09:09,890
had just announced or rather we hoped

00:09:08,570 --> 00:09:11,930
that we would get a lot of feedback and

00:09:09,890 --> 00:09:14,390
we definitely did and so we released

00:09:11,930 --> 00:09:16,160
graph QL with technical preview right in

00:09:14,390 --> 00:09:18,380
front of it we did that on purpose to

00:09:16,160 --> 00:09:19,670
set expectations this is something new

00:09:18,380 --> 00:09:21,140
this is something that we are still

00:09:19,670 --> 00:09:22,490
working on and it was going to continue

00:09:21,140 --> 00:09:24,890
to evolve over time

00:09:22,490 --> 00:09:26,720
and during this period of time we

00:09:24,890 --> 00:09:28,150
started to see all the things that a lot

00:09:26,720 --> 00:09:30,200
of people presented about today

00:09:28,150 --> 00:09:31,940
implementations in graph QL started by

00:09:30,200 --> 00:09:34,910
the community today you can find that in

00:09:31,940 --> 00:09:36,410
over a dozen different languages and I

00:09:34,910 --> 00:09:37,460
won't go deeper into that because we

00:09:36,410 --> 00:09:39,410
already saw in the keynote this morning

00:09:37,460 --> 00:09:41,960
just how many awesome projects are being

00:09:39,410 --> 00:09:43,850
built in graph QL which brings us up to

00:09:41,960 --> 00:09:46,070
recent events so a little over a year

00:09:43,850 --> 00:09:47,960
ago graph kills being used not just at

00:09:46,070 --> 00:09:50,450
Facebook but a whole bunch of companies

00:09:47,960 --> 00:09:52,790
big and small and then last month to

00:09:50,450 --> 00:09:55,130
reflect this we finally removed that

00:09:52,790 --> 00:09:56,840
technical preview moniker and we

00:09:55,130 --> 00:09:58,340
launched a new website at graph code org

00:09:56,840 --> 00:10:00,260
to help people learn more about this

00:09:58,340 --> 00:10:01,130
thing that we had all built and if you

00:10:00,260 --> 00:10:02,810
haven't checked it out yet you

00:10:01,130 --> 00:10:04,640
definitely should a lot of the community

00:10:02,810 --> 00:10:06,260
members folks in this room contributed a

00:10:04,640 --> 00:10:07,730
lot of the work involved to make this

00:10:06,260 --> 00:10:09,980
thing work so it's really an effort of

00:10:07,730 --> 00:10:11,630
the community and so this graph

00:10:09,980 --> 00:10:13,580
co-evolved within Facebook over the

00:10:11,630 --> 00:10:15,320
years we've added a lot of stuff to our

00:10:13,580 --> 00:10:16,820
graphical API and over this period of

00:10:15,320 --> 00:10:18,710
time we've learned a lot about what's

00:10:16,820 --> 00:10:20,900
important and why when designing those

00:10:18,710 --> 00:10:22,520
api's so I want to talk about some of

00:10:20,900 --> 00:10:24,110
these best practices that we've boiled

00:10:22,520 --> 00:10:27,560
down from the lessons that we've learned

00:10:24,110 --> 00:10:28,550
and you know since we've already heard a

00:10:27,560 --> 00:10:30,470
little bit about some of these best

00:10:28,550 --> 00:10:33,230
practices especially around clients and

00:10:30,470 --> 00:10:34,700
my my coworker Joe already talked about

00:10:33,230 --> 00:10:38,210
clients so I'm going to focus

00:10:34,700 --> 00:10:39,020
specifically on API design let's jump

00:10:38,210 --> 00:10:41,390
right into it

00:10:39,020 --> 00:10:42,890
all right most important naming matters

00:10:41,390 --> 00:10:44,330
we already heard a little bit about this

00:10:42,890 --> 00:10:45,470
in the panel what do you do when you

00:10:44,330 --> 00:10:47,840
have to change the name for something

00:10:45,470 --> 00:10:50,330
naming things is super important in

00:10:47,840 --> 00:10:53,180
graphical api's especially since if

00:10:50,330 --> 00:10:54,410
you're not used to designing api's who i

00:10:53,180 --> 00:10:56,150
think like yeah well come up with a good

00:10:54,410 --> 00:10:58,460
name it's not good whatever we'll

00:10:56,150 --> 00:11:00,200
refactor it refactoring is easy but in a

00:10:58,460 --> 00:11:02,480
graphical API as soon as a client is

00:11:00,200 --> 00:11:04,310
making use of a field you're kind of

00:11:02,480 --> 00:11:05,290
stuck a naming mistake can be really

00:11:04,310 --> 00:11:07,400
expensive

00:11:05,290 --> 00:11:08,720
so beyond silly mistakes you know

00:11:07,400 --> 00:11:10,010
hopefully we can avoid those an

00:11:08,720 --> 00:11:12,529
important question to ask while

00:11:10,010 --> 00:11:14,870
designing ap is is will a new engineer

00:11:12,529 --> 00:11:17,750
understand this and that means no code

00:11:14,870 --> 00:11:19,310
names or server-side lingo imagine that

00:11:17,750 --> 00:11:21,860
most of the engineers are going to be

00:11:19,310 --> 00:11:24,740
using your API might not find it so easy

00:11:21,860 --> 00:11:26,510
to go figure out how that field maps to

00:11:24,740 --> 00:11:28,070
some underlying system maybe they're

00:11:26,510 --> 00:11:30,200
spending all the time in an iOS or an

00:11:28,070 --> 00:11:31,520
Android codebase or they're just new and

00:11:30,200 --> 00:11:32,930
they can't figure that out so it's

00:11:31,520 --> 00:11:34,580
really important not just to have names

00:11:32,930 --> 00:11:37,310
that are good but to have names that are

00:11:34,580 --> 00:11:38,960
self documenting it all so we're kind of

00:11:37,310 --> 00:11:40,580
spoiled by really cool tools like

00:11:38,960 --> 00:11:43,430
graphical so most of us don't actually

00:11:40,580 --> 00:11:45,589
read API documentation we just go here

00:11:43,430 --> 00:11:46,790
and we start typing what we think the

00:11:45,589 --> 00:11:48,320
thing will be named and if something

00:11:46,790 --> 00:11:49,460
comes up we're like oh cool that's

00:11:48,320 --> 00:11:51,500
probably what I want

00:11:49,460 --> 00:11:53,540
so naming things that adhere closely to

00:11:51,500 --> 00:11:55,279
what those things actually do is really

00:11:53,540 --> 00:11:56,589
important to help make this experience

00:11:55,279 --> 00:11:59,240
actually work

00:11:56,589 --> 00:12:01,850
alright naming matters so much when we

00:11:59,240 --> 00:12:03,440
talk about graph QL because we talk

00:12:01,850 --> 00:12:05,570
about graph chaos being version less a

00:12:03,440 --> 00:12:07,820
version less API as long as we only add

00:12:05,570 --> 00:12:10,190
to it all existing queries continue to

00:12:07,820 --> 00:12:12,350
work and you don't need versions and I

00:12:10,190 --> 00:12:14,180
often hear yeah okay that's great in

00:12:12,350 --> 00:12:16,250
theory sure but like how do you actually

00:12:14,180 --> 00:12:18,980
handle breaking changes in public like

00:12:16,250 --> 00:12:20,959
no actually at Facebook we don't do

00:12:18,980 --> 00:12:23,420
breaking changes they're extremely rare

00:12:20,959 --> 00:12:25,790
and that's because we design graphical

00:12:23,420 --> 00:12:29,150
API s with designing for the future in

00:12:25,790 --> 00:12:31,610
mind so we ask ourselves to this

00:12:29,150 --> 00:12:33,410
what would version to look like not

00:12:31,610 --> 00:12:35,570
version 2 of the API version 2 of the

00:12:33,410 --> 00:12:36,980
product or the feature so usually when

00:12:35,570 --> 00:12:39,230
we're designing an API we have some

00:12:36,980 --> 00:12:40,850
product or feature in mind and we're

00:12:39,230 --> 00:12:44,089
mapping from that back to the API that

00:12:40,850 --> 00:12:45,470
we want in order to enable that so think

00:12:44,089 --> 00:12:46,490
about what would the next version of

00:12:45,470 --> 00:12:48,680
that thing look like

00:12:46,490 --> 00:12:50,240
well this API support that you know

00:12:48,680 --> 00:12:53,990
magical world that you've dreamed up if

00:12:50,240 --> 00:12:56,209
not maybe your API isn't quite right yet

00:12:53,990 --> 00:12:59,120
spend that time to think how our product

00:12:56,209 --> 00:13:00,529
evolved in the future another important

00:12:59,120 --> 00:13:02,089
lesson that we learned when we are first

00:13:00,529 --> 00:13:04,430
rolling out graph QL in the beginning

00:13:02,089 --> 00:13:05,990
was to stop thinking in terms of

00:13:04,430 --> 00:13:07,580
endpoints and this is actually harder

00:13:05,990 --> 00:13:09,860
than I thought it was going to be you

00:13:07,580 --> 00:13:11,180
know most traditional ap is they start

00:13:09,860 --> 00:13:13,070
with some new product experience and

00:13:11,180 --> 00:13:15,290
then they work backwards designed the

00:13:13,070 --> 00:13:17,660
API endpoint for that product experience

00:13:15,290 --> 00:13:18,590
but of course graphical exposes all the

00:13:17,660 --> 00:13:20,870
data from a

00:13:18,590 --> 00:13:22,400
single end point so this habit can be

00:13:20,870 --> 00:13:24,760
pretty hard to break if you try to just

00:13:22,400 --> 00:13:27,680
like shove it into your schema this way

00:13:24,760 --> 00:13:29,360
this is especially hard for things that

00:13:27,680 --> 00:13:32,450
we don't typically think of as like

00:13:29,360 --> 00:13:34,970
objects in a graph one example that

00:13:32,450 --> 00:13:36,500
comes up often is search so a search

00:13:34,970 --> 00:13:38,330
it's immediately obvious that you

00:13:36,500 --> 00:13:40,640
eventually want to get two objects in a

00:13:38,330 --> 00:13:42,620
graph but it's maybe less clear how you

00:13:40,640 --> 00:13:44,480
would get there so if you're thinking in

00:13:42,620 --> 00:13:46,880
terms of endpoints you might start with

00:13:44,480 --> 00:13:48,860
creating one-off objects that are really

00:13:46,880 --> 00:13:51,380
defined only as their purpose as an

00:13:48,860 --> 00:13:52,610
endpoint as opposed to describing the

00:13:51,380 --> 00:13:54,710
semantics of the data that you're

00:13:52,610 --> 00:13:56,450
modeling and if you instead frame that

00:13:54,710 --> 00:13:59,150
problem in terms of objects connected in

00:13:56,450 --> 00:14:00,560
a graph and you separate the data away

00:13:59,150 --> 00:14:03,440
from the feature that you're building

00:14:00,560 --> 00:14:05,870
you can do a lot of cool stuff so for

00:14:03,440 --> 00:14:07,550
search this might lead to a search type

00:14:05,870 --> 00:14:09,800
in the graph that you can get from a

00:14:07,550 --> 00:14:11,360
particular query string as an input and

00:14:09,800 --> 00:14:13,130
once you have that object in the graph

00:14:11,360 --> 00:14:14,630
you're back to the same kind of data

00:14:13,130 --> 00:14:16,370
semantics of relationships between

00:14:14,630 --> 00:14:19,430
objects you can go from your search

00:14:16,370 --> 00:14:20,900
object to result objects and now that

00:14:19,430 --> 00:14:22,820
search is just another object in the

00:14:20,900 --> 00:14:24,350
graph you can start to imagine new use

00:14:22,820 --> 00:14:26,300
cases and how you might connect to that

00:14:24,350 --> 00:14:28,340
object to other objects so here's just

00:14:26,300 --> 00:14:30,410
one suggestion a search might point to

00:14:28,340 --> 00:14:31,550
other searches to tell you suggested

00:14:30,410 --> 00:14:32,120
searches based on the one that you just

00:14:31,550 --> 00:14:35,000
did

00:14:32,120 --> 00:14:37,070
that's how type a heads work and this

00:14:35,000 --> 00:14:40,340
has the extremely powerful outcome of

00:14:37,070 --> 00:14:42,830
creating a single cohesive graph that

00:14:40,340 --> 00:14:45,740
allows API users to create subsets of

00:14:42,830 --> 00:14:47,240
your API of the API graph in ways that

00:14:45,740 --> 00:14:49,070
you might not have imagined when you

00:14:47,240 --> 00:14:50,360
designed it in the first place in order

00:14:49,070 --> 00:14:51,650
to enable new kinds of product

00:14:50,360 --> 00:14:55,160
experiences that you never thought of

00:14:51,650 --> 00:14:57,620
when you're building that API related to

00:14:55,160 --> 00:14:59,720
that when we're modeling data we want to

00:14:57,620 --> 00:15:01,790
model as objects in the graph it's

00:14:59,720 --> 00:15:03,680
important to stay away from trying to

00:15:01,790 --> 00:15:05,720
model them as the view that we're going

00:15:03,680 --> 00:15:08,690
to support and instead stay focused on

00:15:05,720 --> 00:15:10,850
that semantic data so here's another

00:15:08,690 --> 00:15:13,010
question will this work for future

00:15:10,850 --> 00:15:14,750
clients usually when we're building an

00:15:13,010 --> 00:15:17,450
API with an initial client in mind like

00:15:14,750 --> 00:15:19,190
an iOS app we think about is it going to

00:15:17,450 --> 00:15:22,220
work on a desktop app a feature phone

00:15:19,190 --> 00:15:24,950
app maybe an app for a TV that all might

00:15:22,220 --> 00:15:27,020
have different demands but still access

00:15:24,950 --> 00:15:28,340
the same data under the hood we want to

00:15:27,020 --> 00:15:30,590
make sure that we're not tying our API

00:15:28,340 --> 00:15:31,800
is too closely to the demands of our

00:15:30,590 --> 00:15:33,329
initial

00:15:31,800 --> 00:15:35,040
and at Facebook this actually was really

00:15:33,329 --> 00:15:36,810
important because we were really careful

00:15:35,040 --> 00:15:38,850
when we were designing that newsfeed API

00:15:36,810 --> 00:15:41,699
to stay as semantically pure as possible

00:15:38,850 --> 00:15:43,079
and that enabled later pretty wild

00:15:41,699 --> 00:15:45,480
experimentation with the newsfeed

00:15:43,079 --> 00:15:48,810
interface in apps like Facebook paper or

00:15:45,480 --> 00:15:50,699
Facebook home and let's look at this as

00:15:48,810 --> 00:15:52,139
an example so say we want to suggest

00:15:50,699 --> 00:15:54,750
some gift cards when it's our friend's

00:15:52,139 --> 00:15:57,540
birthday it might be tempting to look at

00:15:54,750 --> 00:15:59,699
this mock-up and then come up with this

00:15:57,540 --> 00:16:01,290
query right we've got a product that we

00:15:59,699 --> 00:16:04,649
want to know about and then we have some

00:16:01,290 --> 00:16:06,329
attachment data on our story but of

00:16:04,649 --> 00:16:09,480
course we want to model the underlying

00:16:06,329 --> 00:16:11,339
data and not just the view so maybe we

00:16:09,480 --> 00:16:13,529
actually want something more like this

00:16:11,339 --> 00:16:15,300
on the right where instead what we get

00:16:13,529 --> 00:16:16,769
is a pointer to that product and we can

00:16:15,300 --> 00:16:18,329
start to ask a little bit of questions

00:16:16,769 --> 00:16:19,620
about that thing on its own and then

00:16:18,329 --> 00:16:21,240
here's some piece of information that's

00:16:19,620 --> 00:16:23,130
really not about the product it's about

00:16:21,240 --> 00:16:24,300
a representation of it we can include

00:16:23,130 --> 00:16:26,310
that as well but we can give it

00:16:24,300 --> 00:16:29,790
something with the more semantically a

00:16:26,310 --> 00:16:31,529
reasonable name than just subtitle doing

00:16:29,790 --> 00:16:33,149
this is cool because as we play with

00:16:31,529 --> 00:16:34,560
this and as our designers come up with

00:16:33,149 --> 00:16:36,779
more interesting ideas for how we might

00:16:34,560 --> 00:16:38,490
represent this it's really easy to later

00:16:36,779 --> 00:16:40,139
change this query to represent the

00:16:38,490 --> 00:16:41,550
slightly different version of what we

00:16:40,139 --> 00:16:43,260
want without having to go back to the

00:16:41,550 --> 00:16:44,550
server and say actually instead of

00:16:43,260 --> 00:16:46,050
attachment image can we have this

00:16:44,550 --> 00:16:47,819
attachment big image instead of

00:16:46,050 --> 00:16:49,019
attachment title can we have attachment

00:16:47,819 --> 00:16:50,730
short title because we're running out of

00:16:49,019 --> 00:16:54,510
space don't do that

00:16:50,730 --> 00:16:55,980
just model the data shortly after

00:16:54,510 --> 00:16:57,779
releasing graph QL a lot of the

00:16:55,980 --> 00:16:59,639
questions that I heard and a lot of the

00:16:57,779 --> 00:17:01,980
topics that we've heard today we're like

00:16:59,639 --> 00:17:04,319
how do you do blank in graph q all right

00:17:01,980 --> 00:17:06,900
authentication authorization caching

00:17:04,319 --> 00:17:08,669
database query optimization and for us

00:17:06,900 --> 00:17:11,699
at Facebook the answer is almost always

00:17:08,669 --> 00:17:13,589
you don't you don't do that in graph QL

00:17:11,699 --> 00:17:15,809
you know graph kill is designed to be

00:17:13,589 --> 00:17:18,089
this thin interface that sits atop all

00:17:15,809 --> 00:17:19,740
of your existing systems and systems yet

00:17:18,089 --> 00:17:21,240
to be built and this is one of the first

00:17:19,740 --> 00:17:22,799
lessons that we learned when we were

00:17:21,240 --> 00:17:24,360
building graph queue like Facebook and

00:17:22,799 --> 00:17:26,459
it doesn't mean that you can't have

00:17:24,360 --> 00:17:28,590
those things it just means that graph

00:17:26,459 --> 00:17:30,600
the graph QL service layer is probably

00:17:28,590 --> 00:17:32,790
not the right place for them and by

00:17:30,600 --> 00:17:35,190
handling authorization database access

00:17:32,790 --> 00:17:37,710
and all these other concerns below graph

00:17:35,190 --> 00:17:40,350
QL the engine itself can then end up

00:17:37,710 --> 00:17:42,570
being pretty resilient to swapping those

00:17:40,350 --> 00:17:43,950
implementations out in the future as you

00:17:42,570 --> 00:17:44,310
end up migrating between different

00:17:43,950 --> 00:17:47,310
servers

00:17:44,310 --> 00:17:50,010
and your platform revolves so Dan

00:17:47,310 --> 00:17:51,990
Schaffer one of our co-creators did a

00:17:50,010 --> 00:17:53,820
really awesome talk about this this year

00:17:51,990 --> 00:17:55,890
at reactor Europe so I really highly

00:17:53,820 --> 00:17:57,600
recommend that talk and then Robert Zhu

00:17:55,890 --> 00:17:59,160
who's also on a graph Gael team we're at

00:17:57,600 --> 00:18:00,930
an excellent guide that goes into this

00:17:59,160 --> 00:18:04,620
in depth on the graphical work site

00:18:00,930 --> 00:18:06,990
called thinking and graphs so when graph

00:18:04,620 --> 00:18:09,240
QL should be thin it should also be a

00:18:06,990 --> 00:18:11,190
seam between the semantic meaning of

00:18:09,240 --> 00:18:13,260
your data and then how that data is

00:18:11,190 --> 00:18:14,550
actually stored and retrieved and that

00:18:13,260 --> 00:18:17,430
means hiding some of those

00:18:14,550 --> 00:18:19,200
implementation details and so you know

00:18:17,430 --> 00:18:21,230
so if some implementation detail ends up

00:18:19,200 --> 00:18:24,060
exposed that might change in the future

00:18:21,230 --> 00:18:26,940
some client inevitably is going to rely

00:18:24,060 --> 00:18:30,480
on it we had one example where in order

00:18:26,940 --> 00:18:32,430
to figure out a photo you had this ID

00:18:30,480 --> 00:18:34,230
for the photo that was the ID for the

00:18:32,430 --> 00:18:36,600
album it was in and then a colon and

00:18:34,230 --> 00:18:38,130
then the ID for the photo and some

00:18:36,600 --> 00:18:39,690
enterprising engineer figured out that

00:18:38,130 --> 00:18:41,280
you could just split by colon and get

00:18:39,690 --> 00:18:43,500
the ID for the album and they are off to

00:18:41,280 --> 00:18:44,940
the races which was great until we

00:18:43,500 --> 00:18:47,340
change the infrastructure for how you

00:18:44,940 --> 00:18:48,810
got two albums and photos and then all

00:18:47,340 --> 00:18:51,600
that code broke and we're like wait what

00:18:48,810 --> 00:18:56,550
how did that break right we were leaking

00:18:51,600 --> 00:18:59,250
in implementation detail so ask yourself

00:18:56,550 --> 00:19:01,050
what happens when our implementation

00:18:59,250 --> 00:19:03,480
changes that might mean moving from

00:19:01,050 --> 00:19:05,700
sequel to it might mean deploying

00:19:03,480 --> 00:19:07,410
micro services away from your monolith

00:19:05,700 --> 00:19:09,780
it might mean lots of different things

00:19:07,410 --> 00:19:11,610
but it probably means that the way that

00:19:09,780 --> 00:19:13,230
your data is stored and accessed is

00:19:11,610 --> 00:19:15,570
going to change in the future as your

00:19:13,230 --> 00:19:17,670
stuff evolve and so think does the API

00:19:15,570 --> 00:19:19,560
that I'm representing now continue to

00:19:17,670 --> 00:19:21,870
make sense when that happens and what

00:19:19,560 --> 00:19:24,000
kind of encoding details am i letting

00:19:21,870 --> 00:19:26,430
bleed through when this is happening and

00:19:24,000 --> 00:19:28,560
if we do this right it lets us do lots

00:19:26,430 --> 00:19:31,500
of really awesome stuff we can prototype

00:19:28,560 --> 00:19:33,360
fast scale easily and then deploy new

00:19:31,500 --> 00:19:35,520
services without ever interrupting our

00:19:33,360 --> 00:19:37,050
clients and at Facebook we've done this

00:19:35,520 --> 00:19:39,000
you know in the last four years we've

00:19:37,050 --> 00:19:41,040
shipped lots of infrastructure new

00:19:39,000 --> 00:19:42,990
services new stuff that ranks newsfeed

00:19:41,040 --> 00:19:45,540
machine learning services all kinds of

00:19:42,990 --> 00:19:47,640
really sophisticated stuff and our four

00:19:45,540 --> 00:19:49,080
year old iOS and Android clients still

00:19:47,640 --> 00:19:51,540
continue to work with the exact same

00:19:49,080 --> 00:19:54,150
semantic API so these are the questions

00:19:51,540 --> 00:19:54,970
that came up as we were talking through

00:19:54,150 --> 00:19:56,770
these best practice

00:19:54,970 --> 00:19:57,940
is these are some of the most important

00:19:56,770 --> 00:20:00,370
best practices that have helped us

00:19:57,940 --> 00:20:02,140
maintain the same schema over four years

00:20:00,370 --> 00:20:03,580
at Facebook while continuing to build

00:20:02,140 --> 00:20:05,260
and ship new products features an

00:20:03,580 --> 00:20:08,440
infrastructure most importantly all the

00:20:05,260 --> 00:20:11,860
time we derived these questions by

00:20:08,440 --> 00:20:13,539
asking ourselves how to evolve api's but

00:20:11,860 --> 00:20:15,760
now I want to take a little bit of a

00:20:13,539 --> 00:20:17,590
step back and talk about some of the

00:20:15,760 --> 00:20:20,980
lessons learn not just from using graph

00:20:17,590 --> 00:20:22,750
QL but from actually building it so I

00:20:20,980 --> 00:20:24,370
think if we look back we can extract

00:20:22,750 --> 00:20:26,320
some of these principles into something

00:20:24,370 --> 00:20:28,690
of a design philosophy that helped guide

00:20:26,320 --> 00:20:32,530
both the initial development of graph QL

00:20:28,690 --> 00:20:33,730
and the recent redesign these principles

00:20:32,530 --> 00:20:35,650
guided graph kill but I think they're

00:20:33,730 --> 00:20:37,809
really just as applicable to building

00:20:35,650 --> 00:20:39,700
any kind of tool library language

00:20:37,809 --> 00:20:41,380
anything like that so if you're in the

00:20:39,700 --> 00:20:42,700
audience or working on something like

00:20:41,380 --> 00:20:46,000
this hopefully this is relevant to you

00:20:42,700 --> 00:20:48,010
beyond just graph QL and let's start

00:20:46,000 --> 00:20:50,320
with what's hopefully the most obvious

00:20:48,010 --> 00:20:52,870
when designing anything a language or a

00:20:50,320 --> 00:20:55,690
library it's critical to start with

00:20:52,870 --> 00:20:57,159
solving a single important problem for

00:20:55,690 --> 00:20:58,900
graph QL that was getting all the data

00:20:57,159 --> 00:21:01,330
that we needed for Facebook's news feed

00:20:58,900 --> 00:21:03,130
over iOS over increasingly terrible

00:21:01,330 --> 00:21:04,990
mobile network connections this

00:21:03,130 --> 00:21:07,570
basically all but completely ruled out

00:21:04,990 --> 00:21:09,159
rest right away without devolve into you

00:21:07,570 --> 00:21:11,320
know like the typical collection of

00:21:09,159 --> 00:21:13,539
random custom JSON endpoints with a

00:21:11,320 --> 00:21:15,070
bunch of resources jammed together in a

00:21:13,539 --> 00:21:16,929
way that clearly wasn't rest at all and

00:21:15,070 --> 00:21:18,669
we just didn't want to do that we

00:21:16,929 --> 00:21:21,370
actually tried that and we abandoned it

00:21:18,669 --> 00:21:23,679
pretty quickly for obvious reasons also

00:21:21,370 --> 00:21:25,210
don't just solve any problem solve the

00:21:23,679 --> 00:21:28,299
most important problem that you can find

00:21:25,210 --> 00:21:29,380
in 2012 there's a little bit of a while

00:21:28,299 --> 00:21:31,630
ago and I'm not sure if you remember

00:21:29,380 --> 00:21:33,789
this but our mobile apps were truly

00:21:31,630 --> 00:21:36,400
terrible at that time in fact when Zack

00:21:33,789 --> 00:21:38,890
filed our IPO that year he specifically

00:21:36,400 --> 00:21:40,600
called out the investor risk that mobile

00:21:38,890 --> 00:21:42,640
was driving an increasing amount of our

00:21:40,600 --> 00:21:45,010
daily users and we hadn't figured out

00:21:42,640 --> 00:21:47,470
how to be good at it yet so this was not

00:21:45,010 --> 00:21:49,620
a theoretical problem by any means this

00:21:47,470 --> 00:21:52,570
was an existential threat to the company

00:21:49,620 --> 00:21:54,970
failure to adjust to major shifts like

00:21:52,570 --> 00:21:57,700
this has crippled or killed other huge

00:21:54,970 --> 00:21:59,350
companies in the past so starting with

00:21:57,700 --> 00:22:00,700
an important problem grounds you it

00:21:59,350 --> 00:22:02,350
keeps you honest about what you're

00:22:00,700 --> 00:22:04,149
trying to accomplish and it helps you

00:22:02,350 --> 00:22:06,610
drive the early prioritization of

00:22:04,149 --> 00:22:08,530
features you know the most novel aspects

00:22:06,610 --> 00:22:08,860
of graph QL giving clients control of

00:22:08,530 --> 00:22:10,510
data

00:22:08,860 --> 00:22:11,860
with hierarchical queries that can be

00:22:10,510 --> 00:22:14,320
resolved in one round-trip to the server

00:22:11,860 --> 00:22:17,200
these were all established within that

00:22:14,320 --> 00:22:19,660
very first initial prototype in response

00:22:17,200 --> 00:22:21,400
to the problem at hand so remember to

00:22:19,660 --> 00:22:23,200
stay focused on what the most important

00:22:21,400 --> 00:22:24,730
problem is that you're solving and use

00:22:23,200 --> 00:22:27,190
that to crystallize what it is that

00:22:24,730 --> 00:22:29,050
you're building and we've heard a lot

00:22:27,190 --> 00:22:30,700
today about gradual first development

00:22:29,050 --> 00:22:33,370
and I think that's actually really good

00:22:30,700 --> 00:22:35,680
advice but what's driven us so far has

00:22:33,370 --> 00:22:37,600
been being client first and using client

00:22:35,680 --> 00:22:39,250
first development you know mental models

00:22:37,600 --> 00:22:40,810
are so important to how we think as

00:22:39,250 --> 00:22:43,480
programmers everything we make is

00:22:40,810 --> 00:22:45,280
ethereal so in our heads but there's

00:22:43,480 --> 00:22:46,690
lots of different kinds of systems and

00:22:45,280 --> 00:22:48,550
different kinds of programmers and

00:22:46,690 --> 00:22:50,950
mental models and they don't always

00:22:48,550 --> 00:22:53,140
match up with each other so an important

00:22:50,950 --> 00:22:55,210
part of us design and graph QL was being

00:22:53,140 --> 00:22:56,650
kind of unabashedly driven by the needs

00:22:55,210 --> 00:22:58,360
of the client the consumer of the

00:22:56,650 --> 00:23:00,280
language and hopefully it doesn't come

00:22:58,360 --> 00:23:02,740
as a surprise that you know not every

00:23:00,280 --> 00:23:04,810
great iOS engineer is also a top-notch

00:23:02,740 --> 00:23:07,330
network engineer and a database engineer

00:23:04,810 --> 00:23:08,710
and web api designer our iOS engineers

00:23:07,330 --> 00:23:10,600
they just wanted to think in terms of

00:23:08,710 --> 00:23:12,160
model objects and the JSON data that

00:23:10,600 --> 00:23:14,470
they needed to make those model objects

00:23:12,160 --> 00:23:17,770
work so we designed graph QL to mirror

00:23:14,470 --> 00:23:19,720
JSON and those who take a trivial look

00:23:17,770 --> 00:23:22,030
at graph QL they often accuse us of

00:23:19,720 --> 00:23:23,650
being database nerds where everything

00:23:22,030 --> 00:23:25,720
looks like a nail for a database

00:23:23,650 --> 00:23:27,610
language hammer right and they foresee

00:23:25,720 --> 00:23:29,470
doom and gloom but in practice it's

00:23:27,610 --> 00:23:31,720
totally the opposite we are product

00:23:29,470 --> 00:23:34,600
people and we designed the API that we

00:23:31,720 --> 00:23:35,980
wanted to use to build products so if

00:23:34,600 --> 00:23:37,690
you're building a new kind of language

00:23:35,980 --> 00:23:39,550
or a library especially one that

00:23:37,690 --> 00:23:41,830
connects different kinds of systems and

00:23:39,550 --> 00:23:43,840
programmers together try to escape the

00:23:41,830 --> 00:23:45,910
mental models of what it does and

00:23:43,840 --> 00:23:47,410
instead put yourself in the shoes of the

00:23:45,910 --> 00:23:49,000
person who's going to be using it and

00:23:47,410 --> 00:23:51,310
try to figure out what it is that

00:23:49,000 --> 00:23:52,990
they're trying to accomplish for graph

00:23:51,310 --> 00:23:55,060
key oh that was realizing that it was

00:23:52,990 --> 00:23:57,520
way more important to declare the data

00:23:55,060 --> 00:23:59,200
that you needed instead of how you got

00:23:57,520 --> 00:24:02,310
that data which led us to the

00:23:59,200 --> 00:24:05,590
declarative query in the first place

00:24:02,310 --> 00:24:07,660
re-establish rethink established best

00:24:05,590 --> 00:24:09,730
practices this tweet is one of my

00:24:07,660 --> 00:24:13,170
favorites it was posted in response to

00:24:09,730 --> 00:24:15,400
us announcing react at J's comp in 2013

00:24:13,170 --> 00:24:17,470
and this is relevant to graph kill as

00:24:15,400 --> 00:24:19,690
well probably the most common question I

00:24:17,470 --> 00:24:22,210
got especially right after announcing

00:24:19,690 --> 00:24:25,000
graph QL is why we didn't just use rest

00:24:22,210 --> 00:24:28,000
so OData json schema Jason IP I ramble

00:24:25,000 --> 00:24:29,830
swaggered rdf al or CORBA you know where

00:24:28,000 --> 00:24:32,830
one of the other major established

00:24:29,830 --> 00:24:34,510
technologies for building AP is you know

00:24:32,830 --> 00:24:36,370
just because there's a best practice or

00:24:34,510 --> 00:24:38,470
even just some other tool that's out

00:24:36,370 --> 00:24:40,120
there doesn't necessarily mean that it's

00:24:38,470 --> 00:24:42,430
the right solution to your particular

00:24:40,120 --> 00:24:44,860
set of problems and none of these were

00:24:42,430 --> 00:24:47,050
right for ours so I think it's important

00:24:44,860 --> 00:24:49,000
to respect and to honor and most

00:24:47,050 --> 00:24:52,960
importantly to learn from best practices

00:24:49,000 --> 00:24:55,300
but not to be held hostage by them I

00:24:52,960 --> 00:24:57,250
love this interview with Elon Musk where

00:24:55,300 --> 00:24:58,840
he talks about reasoning from first

00:24:57,250 --> 00:25:01,510
principles where he talked about not

00:24:58,840 --> 00:25:04,420
just evaluating technologies and ideas

00:25:01,510 --> 00:25:06,190
as as they're described but instead boil

00:25:04,420 --> 00:25:08,380
things down to their fundamentals and

00:25:06,190 --> 00:25:11,050
then work them back up with a good

00:25:08,380 --> 00:25:13,750
feedback loop and speaking of having a

00:25:11,050 --> 00:25:15,940
good feedback loop it's so important to

00:25:13,750 --> 00:25:18,880
have a real first consumer of your

00:25:15,940 --> 00:25:20,320
library or tool or language whenever

00:25:18,880 --> 00:25:22,390
you're designing something new it's

00:25:20,320 --> 00:25:24,520
really easy to find yourself considering

00:25:22,390 --> 00:25:26,500
all the possible future use cases and

00:25:24,520 --> 00:25:28,360
possibilities and then wanting to design

00:25:26,500 --> 00:25:30,190
for all of them upfront but it's

00:25:28,360 --> 00:25:32,170
basically impossible to predict the

00:25:30,190 --> 00:25:34,570
details of all of those and the Devils

00:25:32,170 --> 00:25:36,940
in the details right otherwise what you

00:25:34,570 --> 00:25:38,770
end up doing is basically guessing you

00:25:36,940 --> 00:25:40,470
know and even the smart of us smartest

00:25:38,770 --> 00:25:42,190
of us sometimes guess wrong and

00:25:40,470 --> 00:25:44,200
regardless of whether you're right or

00:25:42,190 --> 00:25:45,790
wrong those decisions stick around and

00:25:44,200 --> 00:25:48,760
they can lead to poor trade-offs or

00:25:45,790 --> 00:25:51,070
unnecessary complexity graph cables

00:25:48,760 --> 00:25:53,620
first client was newsfeed for iOS we

00:25:51,070 --> 00:25:55,630
embedded ourselves on that team we let

00:25:53,620 --> 00:25:58,990
their needs in priority and priorities

00:25:55,630 --> 00:26:00,550
drive how we were designing graph QL so

00:25:58,990 --> 00:26:02,470
when we have ideas for adding some

00:26:00,550 --> 00:26:04,390
feature to graph QL having this first

00:26:02,470 --> 00:26:06,010
client helped us ensure that we were

00:26:04,390 --> 00:26:08,470
actually solving a real problem that

00:26:06,010 --> 00:26:10,930
they had rather than just our assumption

00:26:08,470 --> 00:26:12,790
of what the problem would be but I'm out

00:26:10,930 --> 00:26:14,170
of out of all the lessons learned I

00:26:12,790 --> 00:26:15,970
think this one is actually the most

00:26:14,170 --> 00:26:17,860
important and it's come up a couple

00:26:15,970 --> 00:26:20,800
times today which is to provide an

00:26:17,860 --> 00:26:22,600
incremental adoption strategy our iOS

00:26:20,800 --> 00:26:24,280
team wasn't just going to like start

00:26:22,600 --> 00:26:26,410
over and rebuild their entire data layer

00:26:24,280 --> 00:26:27,790
just because we've made graph QL so

00:26:26,410 --> 00:26:29,890
instead what we did is we made it easy

00:26:27,790 --> 00:26:32,230
for them to replace one rest endpoint

00:26:29,890 --> 00:26:35,230
one resource one data model at a time

00:26:32,230 --> 00:26:35,690
and roll things out iteratively so they

00:26:35,230 --> 00:26:38,420
could make

00:26:35,690 --> 00:26:40,190
progress and having this path for

00:26:38,420 --> 00:26:42,110
incremental adoption I think it's

00:26:40,190 --> 00:26:44,600
critical for the proliferation of ideas

00:26:42,110 --> 00:26:46,310
because it lets you try out a new idea

00:26:44,600 --> 00:26:47,840
in the context of an existing

00:26:46,310 --> 00:26:49,550
application where things are already

00:26:47,840 --> 00:26:51,770
working you're already measuring stuff

00:26:49,550 --> 00:26:53,030
like is it fast do people like it how

00:26:51,770 --> 00:26:55,070
many times are they clicking this button

00:26:53,030 --> 00:26:56,600
or whatever so you can evaluate the

00:26:55,070 --> 00:26:58,280
strengths and the weaknesses of this new

00:26:56,600 --> 00:27:00,560
piece of technology before making a

00:26:58,280 --> 00:27:03,440
decision to just go whole hog and build

00:27:00,560 --> 00:27:05,660
it build with it everywhere and I think

00:27:03,440 --> 00:27:07,580
the single worst strategic mistake that

00:27:05,660 --> 00:27:09,650
a software company can make is to

00:27:07,580 --> 00:27:10,850
rewrite everything from scratch which is

00:27:09,650 --> 00:27:12,860
what happens when you don't have an

00:27:10,850 --> 00:27:14,900
incremental path if your library or

00:27:12,860 --> 00:27:18,200
framework requires rewriting your entire

00:27:14,900 --> 00:27:20,750
app to adopt then it's adoption itself

00:27:18,200 --> 00:27:23,600
will be slow Joel Spolsky wrote a blog

00:27:20,750 --> 00:27:25,400
post about this 16 years ago which is

00:27:23,600 --> 00:27:28,820
nuts like this blog post could drive a

00:27:25,400 --> 00:27:30,680
car and if you haven't read it yet it's

00:27:28,820 --> 00:27:32,450
not too late it's 16 years old but it's

00:27:30,680 --> 00:27:35,300
still highly relevant go check this one

00:27:32,450 --> 00:27:37,970
out all right and speaking of adding

00:27:35,300 --> 00:27:40,600
features your first response to every

00:27:37,970 --> 00:27:43,490
new feature request should be ya guinea

00:27:40,600 --> 00:27:45,140
do you guys know what yagna means yeah

00:27:43,490 --> 00:27:48,410
if you do you're going to say it with me

00:27:45,140 --> 00:27:50,330
right you ain't gonna need it that's

00:27:48,410 --> 00:27:51,620
right okay I heard from some in the

00:27:50,330 --> 00:27:53,120
front but not I gotta hear from everyone

00:27:51,620 --> 00:27:55,760
and I see people up top too we're all

00:27:53,120 --> 00:27:58,550
going to say what do we say to adding

00:27:55,760 --> 00:28:02,810
new features you ain't gonna need it

00:27:58,550 --> 00:28:05,570
yeah okay good this is one of my

00:28:02,810 --> 00:28:08,630
favorite lessons and it was probably the

00:28:05,570 --> 00:28:09,770
hardest for me to learn personally you

00:28:08,630 --> 00:28:11,990
know you want we want to avoid

00:28:09,770 --> 00:28:14,270
implementing things that we foresee will

00:28:11,990 --> 00:28:16,340
need in favor of things that we actually

00:28:14,270 --> 00:28:18,950
need to solve a real problem today the

00:28:16,340 --> 00:28:21,170
burden of proof should lie on the new

00:28:18,950 --> 00:28:23,180
feature for proving that yes truly we

00:28:21,170 --> 00:28:24,950
are going to need it so ask yourself

00:28:23,180 --> 00:28:26,960
have can we solve this problem some

00:28:24,950 --> 00:28:28,820
other way with tools and features we

00:28:26,960 --> 00:28:30,620
already have and if we can but it's

00:28:28,820 --> 00:28:32,300
awkward like just how awkward is it

00:28:30,620 --> 00:28:35,120
really like can we go without the new

00:28:32,300 --> 00:28:37,490
thing because when we add the new thing

00:28:35,120 --> 00:28:40,340
what we're doing is adding cognitive

00:28:37,490 --> 00:28:41,960
costs it's not just how hard it is to

00:28:40,340 --> 00:28:43,790
implement you know implementing stuff is

00:28:41,960 --> 00:28:46,280
the easy part it's more to learn and

00:28:43,790 --> 00:28:48,710
it's more to teach and it's more stuff

00:28:46,280 --> 00:28:49,700
for future features to bump into

00:28:48,710 --> 00:28:51,409
have you ever tried to like add a

00:28:49,700 --> 00:28:52,789
feature to something going up never mind

00:28:51,409 --> 00:28:54,289
we can't do it because it conflicts with

00:28:52,789 --> 00:28:56,330
this other thing that we added poorly

00:28:54,289 --> 00:28:57,500
and bad taste a year ago yeah that's

00:28:56,330 --> 00:28:59,570
what happens when we do these things

00:28:57,500 --> 00:29:01,640
yagna yeah

00:28:59,570 --> 00:29:03,830
so during the redesign process of graph

00:29:01,640 --> 00:29:05,659
QL I was actually talked out of a huge

00:29:03,830 --> 00:29:08,000
number of proposals with this argument

00:29:05,659 --> 00:29:10,220
alone yeah I mean and speaking of the

00:29:08,000 --> 00:29:13,130
redesign effort it's really important to

00:29:10,220 --> 00:29:14,659
avoid the second system syndrome this

00:29:13,130 --> 00:29:16,279
idea comes from the book the mythical

00:29:14,659 --> 00:29:19,010
man-month by Fred Brooks which is one of

00:29:16,279 --> 00:29:20,899
my favs it claims that the first time

00:29:19,010 --> 00:29:22,490
you build a new thing you know you're a

00:29:20,899 --> 00:29:24,620
beginner so you're going to be naturally

00:29:22,490 --> 00:29:27,289
conservative but the second time around

00:29:24,620 --> 00:29:29,299
you've got experience you know what

00:29:27,289 --> 00:29:31,460
you're doing you've got success in your

00:29:29,299 --> 00:29:33,649
belt so you're going to pull out all the

00:29:31,460 --> 00:29:35,059
stops and do all the things you were too

00:29:33,649 --> 00:29:36,620
afraid to do in the first time and

00:29:35,059 --> 00:29:38,929
you're going to end up totally over

00:29:36,620 --> 00:29:40,730
designing it and as the primary designer

00:29:38,929 --> 00:29:42,289
of the graphical language this was

00:29:40,730 --> 00:29:45,470
definitely something that I suffered

00:29:42,289 --> 00:29:47,240
from so yeah II can help but I think the

00:29:45,470 --> 00:29:50,419
best way to combat this is to have an

00:29:47,240 --> 00:29:52,610
editor so as as a designer I have a

00:29:50,419 --> 00:29:54,649
propensity for ideas I love to create

00:29:52,610 --> 00:29:56,270
new things and I tackled this redesign

00:29:54,649 --> 00:29:58,250
effort with a ton of creative

00:29:56,270 --> 00:30:00,409
exploration and I was pretty gung-ho

00:29:58,250 --> 00:30:01,820
about every idea that I come up with I

00:30:00,409 --> 00:30:04,250
was like I'm sure all these ideas are

00:30:01,820 --> 00:30:05,809
great but if I was a designer then my

00:30:04,250 --> 00:30:08,330
teammate Nix rock should be considered

00:30:05,809 --> 00:30:10,309
the editor his role was essentially to

00:30:08,330 --> 00:30:11,840
play devil's advocate you know to be an

00:30:10,309 --> 00:30:14,510
all-around pain in the ass and argue

00:30:11,840 --> 00:30:16,220
against every idea that I had but you

00:30:14,510 --> 00:30:18,500
know in doing so he helped identify the

00:30:16,220 --> 00:30:21,830
proposals that meant well but just

00:30:18,500 --> 00:30:23,990
weren't worth it but once I was able to

00:30:21,830 --> 00:30:26,299
convince him that a change was worth it

00:30:23,990 --> 00:30:29,149
he did a complete 180 and became the

00:30:26,299 --> 00:30:31,429
biggest advocate for it this process

00:30:29,149 --> 00:30:32,899
also helped us clarify how we talked

00:30:31,429 --> 00:30:34,399
about graph QL and the changes that we

00:30:32,899 --> 00:30:35,720
were going to make to it which helped us

00:30:34,399 --> 00:30:37,399
pitch them to the rest of the company

00:30:35,720 --> 00:30:39,799
and then later the whole developer

00:30:37,399 --> 00:30:42,020
community and ultimately my editor Nick

00:30:39,799 --> 00:30:43,549
he ended up being the best person to

00:30:42,020 --> 00:30:46,669
persuade others of what we were doing

00:30:43,549 --> 00:30:48,470
because he himself had been persuaded so

00:30:46,669 --> 00:30:50,600
if you consider yourself the designer or

00:30:48,470 --> 00:30:52,520
the architect for a language or a

00:30:50,600 --> 00:30:54,169
library or tool or any piece of software

00:30:52,520 --> 00:30:56,779
you should make sure that you have a

00:30:54,169 --> 00:30:59,100
collaborator who is taking on this role

00:30:56,779 --> 00:31:00,960
of an editor because I think it's

00:30:59,100 --> 00:31:03,000
really really hard to keep both of these

00:31:00,960 --> 00:31:06,539
competing mentalities in one person's

00:31:03,000 --> 00:31:08,730
head and gracio changed a lot in those

00:31:06,539 --> 00:31:10,710
first few months and we were able to do

00:31:08,730 --> 00:31:12,990
that because we sat right next to the

00:31:10,710 --> 00:31:14,309
people we were impacting but later as

00:31:12,990 --> 00:31:16,380
graph keel is used across the whole

00:31:14,309 --> 00:31:17,850
company it became significantly harder

00:31:16,380 --> 00:31:19,770
to change we had to coordinate a lot

00:31:17,850 --> 00:31:22,020
more pieces you know change is still

00:31:19,770 --> 00:31:23,940
possible even in a big company but as we

00:31:22,020 --> 00:31:25,470
prepared to open source graph QL we

00:31:23,940 --> 00:31:27,570
realize there was going to be way harder

00:31:25,470 --> 00:31:29,190
to make significant changes after a lot

00:31:27,570 --> 00:31:31,650
of companies all of you had already

00:31:29,190 --> 00:31:33,720
started to rely on it so while you're

00:31:31,650 --> 00:31:35,820
interested in redesigning graph QL for a

00:31:33,720 --> 00:31:38,010
while and I knew is going to be a lot of

00:31:35,820 --> 00:31:39,659
work it was really this drive to open

00:31:38,010 --> 00:31:42,840
source that sparked the motivation to

00:31:39,659 --> 00:31:44,940
actually make it happen I think most of

00:31:42,840 --> 00:31:47,760
us open source our projects way too

00:31:44,940 --> 00:31:49,919
early and I hope that's not too bold of

00:31:47,760 --> 00:31:52,289
a statement to make you know I love and

00:31:49,919 --> 00:31:54,360
deeply believe in open source but really

00:31:52,289 --> 00:31:56,490
it's the complete opposite of having a

00:31:54,360 --> 00:31:58,470
first client if your idea really is

00:31:56,490 --> 00:32:00,840
great then you can quickly get tons of

00:31:58,470 --> 00:32:03,030
clients and that's not necessarily what

00:32:00,840 --> 00:32:04,710
you want for a young idea not only can

00:32:03,030 --> 00:32:06,870
it make it more difficult to prioritize

00:32:04,710 --> 00:32:08,730
but it also removes a lot of the freedom

00:32:06,870 --> 00:32:10,500
to evolve and move quickly that's

00:32:08,730 --> 00:32:13,890
especially important during the early

00:32:10,500 --> 00:32:15,360
development of ideas and you know graph

00:32:13,890 --> 00:32:17,850
Kuehl couldn't could maybe have not

00:32:15,360 --> 00:32:20,190
worked it was lucky and beneficial that

00:32:17,850 --> 00:32:22,289
it did but it was a huge risk to build

00:32:20,190 --> 00:32:24,270
something totally new especially during

00:32:22,289 --> 00:32:26,490
a period of existential crisis about

00:32:24,270 --> 00:32:29,070
mobile apps at Facebook and in my

00:32:26,490 --> 00:32:30,570
experience solving a really important

00:32:29,070 --> 00:32:32,520
problem is typically when most

00:32:30,570 --> 00:32:33,990
engineering managers and teams would

00:32:32,520 --> 00:32:36,210
encourage sticking to what works and

00:32:33,990 --> 00:32:39,030
avoid taking what might seem to be

00:32:36,210 --> 00:32:40,980
unnecessary risks and when Nick shared

00:32:39,030 --> 00:32:42,809
his first prototype he definitely got a

00:32:40,980 --> 00:32:44,940
fair amount of pushback exactly like

00:32:42,809 --> 00:32:47,400
that but ultimately we were allowed to

00:32:44,940 --> 00:32:49,110
prove the idea mostly because of early

00:32:47,400 --> 00:32:51,990
enthusiasm from our first client that

00:32:49,110 --> 00:32:53,730
iOS team so some of the projects that

00:32:51,990 --> 00:32:55,350
I'm most proud of at Facebook started

00:32:53,730 --> 00:32:56,039
this way including both graphical and

00:32:55,350 --> 00:32:58,260
react

00:32:56,039 --> 00:33:00,630
and what I've taken away from it is not

00:32:58,260 --> 00:33:03,270
just to take risks but in particular to

00:33:00,630 --> 00:33:05,490
trust experienced engineers like Nick to

00:33:03,270 --> 00:33:07,470
decide when the risk is worth taking and

00:33:05,490 --> 00:33:10,500
let them hold accountability for those

00:33:07,470 --> 00:33:12,330
choices so if you run a team try to push

00:33:10,500 --> 00:33:12,809
decision-making and accountability to

00:33:12,330 --> 00:33:14,850
your

00:33:12,809 --> 00:33:16,259
strongest engineers especially if they

00:33:14,850 --> 00:33:16,820
think the time is right for something

00:33:16,259 --> 00:33:19,350
new

00:33:16,820 --> 00:33:21,779
so from Nick super graph prototype in

00:33:19,350 --> 00:33:22,440
2012 - powering mobile newsfeed at

00:33:21,779 --> 00:33:25,049
Facebook

00:33:22,440 --> 00:33:27,240
- open sourcing it last year you know -

00:33:25,049 --> 00:33:29,669
all of you using it github launching a

00:33:27,240 --> 00:33:31,340
public API in this conference graph

00:33:29,669 --> 00:33:33,990
kills already been through quite a lot

00:33:31,340 --> 00:33:35,759
but it definitely feels like we're still

00:33:33,990 --> 00:33:37,200
in the beginning for graph QL you know

00:33:35,759 --> 00:33:39,419
the community is still growing really

00:33:37,200 --> 00:33:41,759
fast and as it does we're seeing a lot

00:33:39,419 --> 00:33:43,100
of more use cases for graph QL and a lot

00:33:41,759 --> 00:33:45,539
of new and interesting ideas

00:33:43,100 --> 00:33:48,149
opportunities for graphical to evolve

00:33:45,539 --> 00:33:49,740
further but now that more people in

00:33:48,149 --> 00:33:51,990
projects and companies are relying on

00:33:49,740 --> 00:33:54,090
graph QL how exactly should it evolve

00:33:51,990 --> 00:33:56,610
what is it that we should be striving

00:33:54,090 --> 00:33:58,889
for and how should we evaluate changes

00:33:56,610 --> 00:34:01,679
to graph QL I've actually been thinking

00:33:58,889 --> 00:34:03,090
a lot about this lately first I think

00:34:01,679 --> 00:34:05,429
it's important to stay true to the

00:34:03,090 --> 00:34:06,809
original purpose of graph QL to provide

00:34:05,429 --> 00:34:09,089
a complete description of all the data

00:34:06,809 --> 00:34:11,099
that we need all the data available in a

00:34:09,089 --> 00:34:12,450
service and select clients declare

00:34:11,099 --> 00:34:14,339
exactly what they need in single

00:34:12,450 --> 00:34:16,109
round-trips but there's some priorities

00:34:14,339 --> 00:34:18,359
that we want to maintain as well and the

00:34:16,109 --> 00:34:20,220
first is backwards compatibility so a

00:34:18,359 --> 00:34:22,200
huge reason why graph QL is so useful

00:34:20,220 --> 00:34:24,000
for us at Facebook and I imagine many of

00:34:22,200 --> 00:34:25,770
you as well is because we're able to

00:34:24,000 --> 00:34:28,530
fulfill queries from iOS and Android

00:34:25,770 --> 00:34:31,139
apps that we launched years ago despite

00:34:28,530 --> 00:34:33,300
changes both to our schema and to graph

00:34:31,139 --> 00:34:35,159
QL itself that means that we need to be

00:34:33,300 --> 00:34:37,139
really careful that the future changes

00:34:35,159 --> 00:34:39,030
to graph QL are introduced without

00:34:37,139 --> 00:34:41,550
breaking existing uses whenever possible

00:34:39,030 --> 00:34:43,379
and then there's simplicity and

00:34:41,550 --> 00:34:45,060
performance I'm sure many of you have

00:34:43,379 --> 00:34:47,250
heard this adage performance as a

00:34:45,060 --> 00:34:49,169
feature and whenever we're evaluating

00:34:47,250 --> 00:34:50,730
new additions we want to make sure that

00:34:49,169 --> 00:34:52,200
we're taking into account the

00:34:50,730 --> 00:34:55,169
performance of having those features

00:34:52,200 --> 00:34:57,390
implemented in real graph QL servers but

00:34:55,169 --> 00:34:59,670
more importantly for graph QL simplicity

00:34:57,390 --> 00:35:01,680
is a feature new proposals that simplify

00:34:59,670 --> 00:35:04,079
are going to be way more valuable than

00:35:01,680 --> 00:35:05,790
proposals that complicate and then

00:35:04,079 --> 00:35:08,010
finally there's stability and

00:35:05,790 --> 00:35:09,569
predictability so Groucho's already

00:35:08,010 --> 00:35:11,400
evolved quite a lot over the last couple

00:35:09,569 --> 00:35:13,020
of years but it's going to be harder to

00:35:11,400 --> 00:35:14,790
do that now that it's implemented in a

00:35:13,020 --> 00:35:16,680
dozen languages and used by tons of

00:35:14,790 --> 00:35:18,720
different companies it's important that

00:35:16,680 --> 00:35:21,060
we can continue to build an ecosystem of

00:35:18,720 --> 00:35:24,030
tools and services that are stable and

00:35:21,060 --> 00:35:25,010
behave predictably so with these in mind

00:35:24,030 --> 00:35:26,720
I've come up with a rube

00:35:25,010 --> 00:35:29,570
sort of a set of questions that we can

00:35:26,720 --> 00:35:32,000
ask for any proposed change are we

00:35:29,570 --> 00:35:34,430
solving a real problem does this enable

00:35:32,000 --> 00:35:36,740
new use cases how common are those use

00:35:34,430 --> 00:35:39,140
cases can we enable those use cases

00:35:36,740 --> 00:35:42,140
without having to change graph QL and if

00:35:39,140 --> 00:35:44,990
so just how awkward is it remember ya

00:35:42,140 --> 00:35:47,000
Guinea these also encourage collecting

00:35:44,990 --> 00:35:49,820
some data around showing just how common

00:35:47,000 --> 00:35:51,560
some usage patterns are and it'll help

00:35:49,820 --> 00:35:54,380
us understand the value that any change

00:35:51,560 --> 00:35:56,120
would have but also because graph kills

00:35:54,380 --> 00:35:57,620
being implemented by many different

00:35:56,120 --> 00:35:59,540
people for lots of different

00:35:57,620 --> 00:36:01,850
environments it's really important that

00:35:59,540 --> 00:36:04,100
the evolution of graph graph QL happens

00:36:01,850 --> 00:36:06,260
in a transparent way and because people

00:36:04,100 --> 00:36:08,480
are using graph QL in new ways beyond

00:36:06,260 --> 00:36:10,160
how we've just used it at Facebook it's

00:36:08,480 --> 00:36:12,740
also really important that anyone can

00:36:10,160 --> 00:36:14,480
contribute so we're really close to this

00:36:12,740 --> 00:36:16,700
since all development happens on github

00:36:14,480 --> 00:36:19,220
but I want to propose a slightly more

00:36:16,700 --> 00:36:21,830
formal process for this and that's the

00:36:19,220 --> 00:36:24,740
center around rfcs and champions so

00:36:21,830 --> 00:36:26,720
RFC's RFC stands for request for

00:36:24,740 --> 00:36:28,220
comments and what it is is a document

00:36:26,720 --> 00:36:30,200
that starts a conversation about a

00:36:28,220 --> 00:36:32,450
proposed change it tracks prototype

00:36:30,200 --> 00:36:33,950
implementations and ultimately proposes

00:36:32,450 --> 00:36:36,110
the spec text to be added to the

00:36:33,950 --> 00:36:38,870
graphical spec and these rfcs are all

00:36:36,110 --> 00:36:40,640
going to live on graph QL in the open so

00:36:38,870 --> 00:36:42,590
that as pull requests probably so

00:36:40,640 --> 00:36:44,450
everybody can easily find those and read

00:36:42,590 --> 00:36:46,640
them with if they're interested and

00:36:44,450 --> 00:36:48,590
behind each of these RFC s will be a

00:36:46,640 --> 00:36:50,060
champion so a champion is someone who's

00:36:48,590 --> 00:36:52,160
willing to put in the work required

00:36:50,060 --> 00:36:54,410
behind developing an idea writing that

00:36:52,160 --> 00:36:56,420
RFC creating some fork of a popular

00:36:54,410 --> 00:36:57,320
graphical server library to implement it

00:36:56,420 --> 00:36:59,210
to see how it works

00:36:57,320 --> 00:37:00,920
satisfying any concerns raised in the

00:36:59,210 --> 00:37:02,810
process all the work involved in

00:37:00,920 --> 00:37:04,820
generally owning that RFC all the way

00:37:02,810 --> 00:37:07,790
from introduction to landing in the spec

00:37:04,820 --> 00:37:09,290
in addition to writing these RFC s I

00:37:07,790 --> 00:37:11,180
think we should also keep a regular

00:37:09,290 --> 00:37:13,130
development cycle and release schedule

00:37:11,180 --> 00:37:15,320
this process is going to be kind of

00:37:13,130 --> 00:37:16,820
intentionally slowly paced but that's to

00:37:15,320 --> 00:37:19,640
make sure things stay stable and

00:37:16,820 --> 00:37:20,690
reliable so first what we'll do is every

00:37:19,640 --> 00:37:22,910
month we're going to have a Google

00:37:20,690 --> 00:37:25,100
hangout meeting where we can go through

00:37:22,910 --> 00:37:26,810
all the open RFC's with the champions

00:37:25,100 --> 00:37:29,120
with graphical server implementers to

00:37:26,810 --> 00:37:30,740
talk through concerns and to make

00:37:29,120 --> 00:37:33,290
progress so stay tuned for the

00:37:30,740 --> 00:37:34,730
scheduling the first of those then every

00:37:33,290 --> 00:37:36,980
six months we're going to release a new

00:37:34,730 --> 00:37:38,660
version of the graphical spec that one

00:37:36,980 --> 00:37:40,310
whatever changes are ready so when the

00:37:38,660 --> 00:37:42,170
six-month time comes the train leaves

00:37:40,310 --> 00:37:44,150
the station that gives graphical

00:37:42,170 --> 00:37:46,160
implementers a predictable calendar of

00:37:44,150 --> 00:37:47,480
updates rather than having to just kind

00:37:46,160 --> 00:37:50,150
of chase the current state of the

00:37:47,480 --> 00:37:52,940
graphical spec we've actually largely

00:37:50,150 --> 00:37:55,460
kept to that already after initially

00:37:52,940 --> 00:37:57,590
launching the spec last July we cut a

00:37:55,460 --> 00:38:00,650
version in October of last year and then

00:37:57,590 --> 00:38:02,330
again in April of this year and that

00:38:00,650 --> 00:38:04,370
means that the October version the

00:38:02,330 --> 00:38:07,030
graphical spec is next which will be

00:38:04,370 --> 00:38:09,740
arriving later this week

00:38:07,030 --> 00:38:11,120
so I'm excited that we're making the

00:38:09,740 --> 00:38:12,830
evolution of the spec more of a

00:38:11,120 --> 00:38:14,480
community effort to include more folks

00:38:12,830 --> 00:38:16,400
in this room and beyond but you may be

00:38:14,480 --> 00:38:17,900
thinking I don't know if I have an idea

00:38:16,400 --> 00:38:18,470
on how to make the spec better how else

00:38:17,900 --> 00:38:21,680
can I help

00:38:18,470 --> 00:38:23,510
great question developing the spec is

00:38:21,680 --> 00:38:25,820
not what I hope most of us are working

00:38:23,510 --> 00:38:27,290
on and focused on it's really not where

00:38:25,820 --> 00:38:29,390
we need most of the work in the

00:38:27,290 --> 00:38:31,850
graphical ecosystem right now instead

00:38:29,390 --> 00:38:35,750
let me look back on that master plan

00:38:31,850 --> 00:38:37,430
that I scribbled a long time ago well

00:38:35,750 --> 00:38:39,590
we're wait for further ahead than I

00:38:37,430 --> 00:38:41,810
expected on most of these where we

00:38:39,590 --> 00:38:43,850
definitely still need focus is in

00:38:41,810 --> 00:38:45,350
building and improving the tools for

00:38:43,850 --> 00:38:47,330
using graph QL in lots of different

00:38:45,350 --> 00:38:48,950
environments whether that's building

00:38:47,330 --> 00:38:51,050
best-in-class IDE integration

00:38:48,950 --> 00:38:53,150
performance analysis tools for graphical

00:38:51,050 --> 00:38:55,040
services or better graphical clients on

00:38:53,150 --> 00:38:57,710
every platform there's tons of

00:38:55,040 --> 00:39:00,080
opportunities for improvement across all

00:38:57,710 --> 00:39:02,660
the tools that we're using and I really

00:39:00,080 --> 00:39:04,460
think that great tools are what will

00:39:02,660 --> 00:39:07,190
make graph QL ubiquitous and that's

00:39:04,460 --> 00:39:09,770
where we need all of your help so once

00:39:07,190 --> 00:39:12,320
again let me just say how proud I am to

00:39:09,770 --> 00:39:13,790
get to close out this conference totally

00:39:12,320 --> 00:39:15,230
crazy that four years ago we started

00:39:13,790 --> 00:39:17,330
working on this project that today has

00:39:15,230 --> 00:39:18,650
have all of you working on it you know

00:39:17,330 --> 00:39:20,720
when we open source graphic hill last

00:39:18,650 --> 00:39:22,730
year I really had no idea what would

00:39:20,720 --> 00:39:24,860
happen next and it's totally exceeded my

00:39:22,730 --> 00:39:27,260
expectations to see so many high-quality

00:39:24,860 --> 00:39:28,700
presentations today from tons of

00:39:27,260 --> 00:39:31,370
different companies that are all using

00:39:28,700 --> 00:39:32,660
graph QL in different ways and what's

00:39:31,370 --> 00:39:34,310
really exciting is to see the community

00:39:32,660 --> 00:39:36,860
grow to the point where we can like

00:39:34,310 --> 00:39:38,630
barely fit in this room and we're not

00:39:36,860 --> 00:39:40,610
all even here right like only the people

00:39:38,630 --> 00:39:42,770
who who showed up and we still can

00:39:40,610 --> 00:39:44,600
barely fit so please let me say thank

00:39:42,770 --> 00:39:47,000
you one last time for helping to make

00:39:44,600 --> 00:39:47,369
graph feel what it is today and just how

00:39:47,000 --> 00:39:49,519
excited

00:39:47,369 --> 00:39:52,999
for what we can all be building together

00:39:49,519 --> 00:39:52,999

YouTube URL: https://www.youtube.com/watch?v=zVNrqo9XGOs


