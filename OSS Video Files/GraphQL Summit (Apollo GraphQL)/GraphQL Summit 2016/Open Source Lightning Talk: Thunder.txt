Title: Open Source Lightning Talk: Thunder
Publication date: 2016-11-02
Playlist: GraphQL Summit 2016
Description: 
	Jelle Van Den Hoof, Samsara

Thunder is a GraphQL server for Go with support for automatic live-updates: https://github.com/samsarahq/thunder

Learn more about GraphQL Summit:
http://graphqlsummit.com

Join our GraphQL SF meetup to hear more about GraphQL best practices and implementations: 
http://meetup.com/GraphQL-SF/
Captions: 
	00:00:03,950 --> 00:00:09,830
alright so I'm yella I'm a software

00:00:07,550 --> 00:00:12,710
engineer at samsara and I'm excited to

00:00:09,830 --> 00:00:14,870
introduce Thunder a new graphical server

00:00:12,710 --> 00:00:18,250
for go or support for automatic live

00:00:14,870 --> 00:00:20,900
updates so at samsara we build

00:00:18,250 --> 00:00:22,220
industrial and fleet monitoring products

00:00:20,900 --> 00:00:24,260
to help companies operate more

00:00:22,220 --> 00:00:26,360
efficiently and as part of that we built

00:00:24,260 --> 00:00:28,430
both hardware that monitors for example

00:00:26,360 --> 00:00:30,290
vehicle location and a software

00:00:28,430 --> 00:00:32,509
dashboard that lets operators monitor

00:00:30,290 --> 00:00:34,760
where the vehicle is and this is a very

00:00:32,509 --> 00:00:36,200
reactive page as a vehicle moves

00:00:34,760 --> 00:00:38,210
throughout the will we want to show that

00:00:36,200 --> 00:00:40,190
immediately to our users and so for

00:00:38,210 --> 00:00:42,020
example when a vehicle moves we want to

00:00:40,190 --> 00:00:44,360
update on the screen there's many more

00:00:42,020 --> 00:00:45,950
things adaptive as well there's the

00:00:44,360 --> 00:00:48,110
vehicle speed which changes as the

00:00:45,950 --> 00:00:51,079
vehicle moves but also the fuel tank

00:00:48,110 --> 00:00:52,670
level which slowly goes down and these

00:00:51,079 --> 00:00:54,200
are you know thought you said you expect

00:00:52,670 --> 00:00:56,030
to change because they're real world

00:00:54,200 --> 00:00:58,489
data but there's also configuration

00:00:56,030 --> 00:01:00,620
information like a vehicle's name and

00:00:58,489 --> 00:01:02,030
when one operator changes this we want

00:01:00,620 --> 00:01:04,360
to show this to other users so they have

00:01:02,030 --> 00:01:06,740
a consistent view and don't get confused

00:01:04,360 --> 00:01:08,389
but besides these illustrations there's

00:01:06,740 --> 00:01:10,850
many more things in the screen at update

00:01:08,389 --> 00:01:12,889
and as we build at this application we

00:01:10,850 --> 00:01:14,869
started using pups up notifications but

00:01:12,889 --> 00:01:16,219
as it turns out each pups LED

00:01:14,869 --> 00:01:17,840
notification requires the whole bunch of

00:01:16,219 --> 00:01:19,939
hand written in code and adding

00:01:17,840 --> 00:01:22,670
reactivity to all these features wasn't

00:01:19,939 --> 00:01:24,829
really doable because you need to define

00:01:22,670 --> 00:01:26,359
a new type for every update you need to

00:01:24,829 --> 00:01:27,709
fire a notification on the server you

00:01:26,359 --> 00:01:29,509
need to subscribe to it on the client

00:01:27,709 --> 00:01:34,039
handle the notification when it comes in

00:01:29,509 --> 00:01:35,899
and so forth and so to you know not have

00:01:34,039 --> 00:01:37,700
to do all this handwritten code we ended

00:01:35,899 --> 00:01:39,170
up building thunder and I think the best

00:01:37,700 --> 00:01:43,520
way to list it or illustrate that let's

00:01:39,170 --> 00:01:45,950
look at a smoke demo so on the left here

00:01:43,520 --> 00:01:47,389
is a normal graphical client and I'm

00:01:45,950 --> 00:01:50,599
happy that I went to pronunciation of

00:01:47,389 --> 00:01:51,950
that just yet and it is a graphical

00:01:50,599 --> 00:01:54,709
client connected to a thunderous server

00:01:51,950 --> 00:01:57,619
reads data from my sequel and on the

00:01:54,709 --> 00:01:59,209
right there is a standard my sequel

00:01:57,619 --> 00:02:01,159
Klein pointed out in my sequel database

00:01:59,209 --> 00:02:02,419
and so right now there's a query running

00:02:01,159 --> 00:02:03,740
it's fetching all the messages from the

00:02:02,419 --> 00:02:06,740
database and for every message we

00:02:03,740 --> 00:02:08,090
fetched an ID in text and right now

00:02:06,740 --> 00:02:10,340
there is one method in the database it

00:02:08,090 --> 00:02:11,720
says hello now imagine some other user

00:02:10,340 --> 00:02:13,519
is sending you a message maybe they're

00:02:11,720 --> 00:02:16,110
using graphical notation maybe you're

00:02:13,519 --> 00:02:17,550
using a more old-school rest api and

00:02:16,110 --> 00:02:19,080
but at the end of the day what's going

00:02:17,550 --> 00:02:20,790
to happen is that's going to result and

00:02:19,080 --> 00:02:23,670
to an insert into the database so let's

00:02:20,790 --> 00:02:25,860
see what happens when I do that soon as

00:02:23,670 --> 00:02:27,450
I insert the row in the database it

00:02:25,860 --> 00:02:29,010
immediately shows up on the graphical

00:02:27,450 --> 00:02:30,240
apply on the left and the important

00:02:29,010 --> 00:02:32,400
thing to realize here is there's no

00:02:30,240 --> 00:02:34,740
notifications there's no handwritten

00:02:32,400 --> 00:02:39,450
subscriptions anything like that so how

00:02:34,740 --> 00:02:40,740
does this work so I think good place to

00:02:39,450 --> 00:02:43,200
start is to look at the code for this

00:02:40,740 --> 00:02:44,850
example so it starts with a standard go

00:02:43,200 --> 00:02:48,209
type definition it says this is a

00:02:44,850 --> 00:02:50,040
message a message is an ID and some text

00:02:48,209 --> 00:02:51,330
and there's a function to fetch the

00:02:50,040 --> 00:02:53,790
messages from the database and this is a

00:02:51,330 --> 00:02:55,680
normal girl function you declared in

00:02:53,790 --> 00:02:57,180
messages that you won you create them if

00:02:55,680 --> 00:03:00,030
there's an error you return the arrow to

00:02:57,180 --> 00:03:01,950
the user and if it succeeds she returned

00:03:00,030 --> 00:03:05,959
two messages and finally there's the

00:03:01,950 --> 00:03:08,850
route graph kill type that hooks up the

00:03:05,959 --> 00:03:10,410
messages handler to the rude messages

00:03:08,850 --> 00:03:12,270
field that we saw in the example just

00:03:10,410 --> 00:03:14,220
now if you look at this code it's

00:03:12,270 --> 00:03:15,870
important to realize there's no special

00:03:14,220 --> 00:03:18,660
code for handling live updates it's all

00:03:15,870 --> 00:03:21,060
handled by thunder and the way this

00:03:18,660 --> 00:03:23,190
works is using dependency tracking so

00:03:21,060 --> 00:03:25,590
I'll walk through a little bit how do

00:03:23,190 --> 00:03:28,620
you demo gorgeous now so first the

00:03:25,590 --> 00:03:30,959
Webster the client subscribes over

00:03:28,620 --> 00:03:32,940
WebSocket to a specific grab Gil query

00:03:30,959 --> 00:03:33,959
and this is really done over WebSocket

00:03:32,940 --> 00:03:36,510
so the server can send back

00:03:33,959 --> 00:03:38,489
notifications afterwards and the server

00:03:36,510 --> 00:03:40,560
down execute the query and that's a

00:03:38,489 --> 00:03:42,390
standard my sequel query you select all

00:03:40,560 --> 00:03:44,640
the rows select all the messages and

00:03:42,390 --> 00:03:47,730
database returns to Rose initially it's

00:03:44,640 --> 00:03:49,560
just one message the server name takes

00:03:47,730 --> 00:03:50,820
these rows converts it into JSON with

00:03:49,560 --> 00:03:52,709
however to resolvers want to do that

00:03:50,820 --> 00:03:54,570
ensures the initial results a decline

00:03:52,709 --> 00:03:55,920
now the important stuff happens the

00:03:54,570 --> 00:03:57,630
important stuff happens in step two

00:03:55,920 --> 00:04:00,299
where the server not only executes to

00:03:57,630 --> 00:04:02,730
create that it also records and tracks

00:04:00,299 --> 00:04:04,440
college attendance ease and this lets

00:04:02,730 --> 00:04:07,019
sender re-execute crease when I later

00:04:04,440 --> 00:04:08,670
update happens so when somebody else

00:04:07,019 --> 00:04:11,340
writes your database they're going to

00:04:08,670 --> 00:04:12,930
execute an insert into statement now

00:04:11,340 --> 00:04:15,540
we're using my singles replication blog

00:04:12,930 --> 00:04:16,769
which mice equal rights all updates that

00:04:15,540 --> 00:04:18,660
it does to the database in this

00:04:16,769 --> 00:04:21,690
replication lag and this case it will be

00:04:18,660 --> 00:04:23,610
an update saying something like inserted

00:04:21,690 --> 00:04:25,650
this new goodbye message and then

00:04:23,610 --> 00:04:28,050
Thunder subscribe to this this update

00:04:25,650 --> 00:04:28,710
channel in the bottom left by reading

00:04:28,050 --> 00:04:31,980
from the replica

00:04:28,710 --> 00:04:34,740
log when a new update comes in like this

00:04:31,980 --> 00:04:37,350
but the server does is it considers all

00:04:34,740 --> 00:04:38,910
outstanding graphic ellcrys and knowing

00:04:37,350 --> 00:04:40,740
their dependencies it knows which one's

00:04:38,910 --> 00:04:43,830
might be influenced by this new row and

00:04:40,740 --> 00:04:45,270
it goes Andrey execute them so too we

00:04:43,830 --> 00:04:47,100
execute them we simply rent a select

00:04:45,270 --> 00:04:50,900
statement again this time we'll get to

00:04:47,100 --> 00:04:54,420
messages including the goodbye message

00:04:50,900 --> 00:04:56,060
we finally compute the new JSON but we

00:04:54,420 --> 00:04:59,640
don't send back the entire JSON because

00:04:56,060 --> 00:05:01,470
in a large page if only a small bit has

00:04:59,640 --> 00:05:03,510
changed why send it all back so instead

00:05:01,470 --> 00:05:07,380
we only says a new patch back that says

00:05:03,510 --> 00:05:09,780
a new goodbye message this is actually

00:05:07,380 --> 00:05:12,480
surprisingly efficient because in step 3

00:05:09,780 --> 00:05:15,170
where we execute a query we don't reacts

00:05:12,480 --> 00:05:18,060
acute all sequel queries so for example

00:05:15,170 --> 00:05:19,920
perhaps your graphical create fires of

00:05:18,060 --> 00:05:22,020
20 or 100 my sequel queries behind the

00:05:19,920 --> 00:05:23,580
scenes because Thunder knows exactly

00:05:22,020 --> 00:05:25,860
which my sequel crews have been

00:05:23,580 --> 00:05:30,000
invalidated it knows to execute

00:05:25,860 --> 00:05:32,250
re-execute only does and so in soon as a

00:05:30,000 --> 00:05:34,020
summary I've shown you a brief demo of

00:05:32,250 --> 00:05:36,090
Thunder a graph PL server for go live

00:05:34,020 --> 00:05:37,650
support file dometic live updates it's

00:05:36,090 --> 00:05:38,850
been open source since today so i guess

00:05:37,650 --> 00:05:42,930
i'm officially open-source maintainer

00:05:38,850 --> 00:05:44,570
now it's extensible with initial support

00:05:42,930 --> 00:05:47,610
for my seagull but the architecture

00:05:44,570 --> 00:05:49,380
lends itself well to using other kinds

00:05:47,610 --> 00:05:51,510
of baggins and have some prototypes for

00:05:49,380 --> 00:05:53,730
postgres and Redis and contributions

00:05:51,510 --> 00:05:55,140
welcome a feature that I'm pretty

00:05:53,730 --> 00:05:57,150
excited about but haven't really been

00:05:55,140 --> 00:05:58,650
able to the show is that it supports

00:05:57,150 --> 00:06:01,140
easy schema building using goes

00:05:58,650 --> 00:06:03,300
reflection so if you think back to the

00:06:01,140 --> 00:06:04,740
example code there's a struct at the top

00:06:03,300 --> 00:06:06,690
and that's really all you need to do

00:06:04,740 --> 00:06:09,690
using good reflection we discover what

00:06:06,690 --> 00:06:10,890
fields to export from there finally

00:06:09,690 --> 00:06:12,930
we've been using it in production at

00:06:10,890 --> 00:06:15,630
samsara so I feel pretty confident at

00:06:12,930 --> 00:06:17,130
the code base at this point if you've

00:06:15,630 --> 00:06:18,810
any questions please feel free to come

00:06:17,130 --> 00:06:22,190
up to me afterwards or shoot me an email

00:06:18,810 --> 00:06:22,190
check out the website thank

00:06:23,050 --> 00:06:25,110

YouTube URL: https://www.youtube.com/watch?v=w2ZKEwfA7bM


