Title: GraphQL + Suspense by Jared Palmer, Engineering Lead at The Palmer Group
Publication date: 2019-05-21
Playlist: Apollo Day NYC 2019
Description: 
	In this talk, Jared Palmer, Engineering Lead at The Palmer Group goes deep on the past, present, and future of data fetching in React apps. Along the way, he shows off the absolute bleeding edge of the framework and experiments with using the Apollo Client with React Suspense.
Captions: 
	00:00:01,589 --> 00:00:07,769
how many people here have played around

00:00:04,350 --> 00:00:11,280
with suspense alright okay okay how many

00:00:07,769 --> 00:00:13,230
people here know it's dispenses okay so

00:00:11,280 --> 00:00:14,579
we're gonna get into the details into

00:00:13,230 --> 00:00:16,710
the weeds before do that just let me

00:00:14,579 --> 00:00:18,960
introduce myself a little better at

00:00:16,710 --> 00:00:20,850
Jared Palmer on Twitter I am the lead

00:00:18,960 --> 00:00:22,950
engineer of the Palmer group we are a

00:00:20,850 --> 00:00:27,330
strategy design and engineering firm

00:00:22,950 --> 00:00:30,810
based in New York on that team I at my

00:00:27,330 --> 00:00:32,669
day job at least I at eehm of like SWAT

00:00:30,810 --> 00:00:34,949
team of the people and we usually tend

00:00:32,669 --> 00:00:36,480
to solve digital transformation problems

00:00:34,949 --> 00:00:43,769
for very very large enterprises

00:00:36,480 --> 00:00:48,600
customers we we fix things hopefully

00:00:43,769 --> 00:00:51,329
like this Mike we do that in doing so we

00:00:48,600 --> 00:00:52,579
pump out a lot of open source so the

00:00:51,329 --> 00:00:56,909
plumber Internet if you're interested

00:00:52,579 --> 00:01:00,059
from it a lot of open source and this is

00:00:56,909 --> 00:01:01,350
in service to our clients so I open

00:01:00,059 --> 00:01:06,840
sourced offices like a means to

00:01:01,350 --> 00:01:09,810
ultimately the goal and so the forum

00:01:06,840 --> 00:01:11,670
library for react razzle is a build

00:01:09,810 --> 00:01:14,520
system back pack also built system for

00:01:11,670 --> 00:01:16,710
land lambdas new one just that we leased

00:01:14,520 --> 00:01:19,770
last week is called TS DX it helps you

00:01:16,710 --> 00:01:21,030
bootstrap and build type script packages

00:01:19,770 --> 00:01:23,210
really really easily it's like create

00:01:21,030 --> 00:01:26,060
react applet for type script packages

00:01:23,210 --> 00:01:27,960
start out is a data layer for Java

00:01:26,060 --> 00:01:29,430
change cast is when we're about to

00:01:27,960 --> 00:01:34,640
release kind of a cool release notes

00:01:29,430 --> 00:01:34,640
thing but yeah so the broad open source

00:01:34,700 --> 00:01:39,180
we love react and react is awesome and

00:01:37,530 --> 00:01:43,380
you can see we're pretty fond of it

00:01:39,180 --> 00:01:45,390
based on our portfolio there but rack

00:01:43,380 --> 00:01:49,380
does good a lot of things it's not

00:01:45,390 --> 00:01:52,469
created everything though why are we all

00:01:49,380 --> 00:01:56,340
here today this is basically why right

00:01:52,469 --> 00:01:58,960
at the end of the day I think I write

00:01:56,340 --> 00:02:01,540
the word is loading or loading like

00:01:58,960 --> 00:02:03,990
50 times a day regulate hoot-hoot up

00:02:01,540 --> 00:02:10,890
letting oh my gosh I keep seeing that

00:02:03,990 --> 00:02:12,760
Brinkley my brain and why do we why

00:02:10,890 --> 00:02:18,100
fundamentally have to have this loading

00:02:12,760 --> 00:02:21,459
state and the answer is is it comes down

00:02:18,100 --> 00:02:24,160
to this conflict that's inherent between

00:02:21,459 --> 00:02:27,100
making something fast and delivering a

00:02:24,160 --> 00:02:28,390
good user experience so if you listen to

00:02:27,100 --> 00:02:31,330
Sean you're sitting right here I'm gonna

00:02:28,390 --> 00:02:33,580
call him out mister webpack Sean's gonna

00:02:31,330 --> 00:02:36,160
tell you you got a coat slit you gotta

00:02:33,580 --> 00:02:38,530
you the compartmentalize our component

00:02:36,160 --> 00:02:42,040
size all your data fetching and make

00:02:38,530 --> 00:02:43,810
sure that the absolute that your your

00:02:42,040 --> 00:02:46,090
user experience is optimized for

00:02:43,810 --> 00:02:48,610
performance in the sense that you're

00:02:46,090 --> 00:02:50,860
going to delay non-critical resources

00:02:48,610 --> 00:02:52,750
away from the initial load so you're

00:02:50,860 --> 00:02:53,830
gonna slice you're gonna split you're

00:02:52,750 --> 00:02:57,040
gonna do whatever you can you're in a

00:02:53,830 --> 00:02:59,560
lazy load pretty much anything including

00:02:57,040 --> 00:03:01,360
your data and with graph QL that's you

00:02:59,560 --> 00:03:03,640
know that's possible and with graph

00:03:01,360 --> 00:03:05,440
troll with Apollo you can cache it even

00:03:03,640 --> 00:03:08,110
better so on subsequent reads from the

00:03:05,440 --> 00:03:11,380
same exact query you can get the the

00:03:08,110 --> 00:03:13,750
correctly cache data awesome the problem

00:03:11,380 --> 00:03:15,810
is is that in this inherently introduces

00:03:13,750 --> 00:03:17,530
loading States into your application and

00:03:15,810 --> 00:03:21,340
what are we doing we have a loading

00:03:17,530 --> 00:03:22,989
state throw up a spinner and so you have

00:03:21,340 --> 00:03:25,420
to make a choice either you're gonna

00:03:22,989 --> 00:03:26,590
show a spinner on all of these states or

00:03:25,420 --> 00:03:28,000
you're gonna ignore them and show no

00:03:26,590 --> 00:03:29,980
right you're sure you're not gonna

00:03:28,000 --> 00:03:32,440
render anything they're problems of both

00:03:29,980 --> 00:03:34,600
both and it has to do with on fast

00:03:32,440 --> 00:03:36,850
connections your app is going to be

00:03:34,600 --> 00:03:39,610
janky you're gonna have these flashes of

00:03:36,850 --> 00:03:41,019
loading versus on slow connections it's

00:03:39,610 --> 00:03:42,220
gonna be very responsive because that's

00:03:41,019 --> 00:03:45,250
when you actually need that loading

00:03:42,220 --> 00:03:46,959
indicator right so you have this

00:03:45,250 --> 00:03:48,730
conflict right in order to make it fast

00:03:46,959 --> 00:03:51,459
in order for me to make it fast I have

00:03:48,730 --> 00:03:55,959
to deconstruct and delay and lazy load

00:03:51,459 --> 00:03:57,430
and that it reduces spinners that is

00:03:55,959 --> 00:04:00,280
completely detrimental to make me pretty

00:03:57,430 --> 00:04:02,739
in a good user experience so what do you

00:04:00,280 --> 00:04:04,239
do well that's where suspense comes in

00:04:02,739 --> 00:04:06,459
and so what I want to show off right now

00:04:04,239 --> 00:04:08,830
is introduce you to react suspense and

00:04:06,459 --> 00:04:12,180
talk about how we're going to remove the

00:04:08,830 --> 00:04:15,250
notion of loading from our applications

00:04:12,180 --> 00:04:16,660
optimizing for fast connections and

00:04:15,250 --> 00:04:19,120
delivering great user stories on fast

00:04:16,660 --> 00:04:21,549
connections and also delivering

00:04:19,120 --> 00:04:24,550
responsiveness on slow connections and

00:04:21,549 --> 00:04:26,260
just so the research shows you user

00:04:24,550 --> 00:04:27,850
experience research research shows it's

00:04:26,260 --> 00:04:30,010
not like 300 milliseconds or even but

00:04:27,850 --> 00:04:32,680
400 milliseconds or so where a user will

00:04:30,010 --> 00:04:35,650
tolerate a nothingness from happening in

00:04:32,680 --> 00:04:37,450
the UI anything longer than that the app

00:04:35,650 --> 00:04:39,010
is either that's when you want to throw

00:04:37,450 --> 00:04:47,980
the spinner so just keep that in mind as

00:04:39,010 --> 00:04:50,290
we go so demo time alright so I made a

00:04:47,980 --> 00:04:54,610
little app it's called suspense hub it's

00:04:50,290 --> 00:04:56,680
uh but it's using get-ups awesome

00:04:54,610 --> 00:04:59,620
craftwell api

00:04:56,680 --> 00:05:01,840
it is a master-detail ListView it's

00:04:59,620 --> 00:05:04,210
built with create rock tap apollo reach

00:05:01,840 --> 00:05:07,210
router so it's pretty pretty similar to

00:05:04,210 --> 00:05:08,650
what you see there there's a master list

00:05:07,210 --> 00:05:10,180
view and then there's a detail page

00:05:08,650 --> 00:05:14,020
where you already see show those

00:05:10,180 --> 00:05:16,090
spinners five spinner six winners it was

00:05:14,020 --> 00:05:17,890
ridiculous but we're a fast connection

00:05:16,090 --> 00:05:19,750
run my phone right now but it's still

00:05:17,890 --> 00:05:25,419
pretty fast but that's janky that's

00:05:19,750 --> 00:05:27,820
discussing so you can play the game

00:05:25,419 --> 00:05:29,140
count the spinners but what's also note

00:05:27,820 --> 00:05:30,669
Apollo is you just saw I went back to

00:05:29,140 --> 00:05:32,140
Ken right and there were no spinners and

00:05:30,669 --> 00:05:35,800
that's because the data's all cached so

00:05:32,140 --> 00:05:38,590
yeah Apollo who handle a lot of the

00:05:35,800 --> 00:05:39,970
issues that that you if you are not

00:05:38,590 --> 00:05:41,650
using graph QL would have to manage

00:05:39,970 --> 00:05:44,380
yourself like normalization and cache

00:05:41,650 --> 00:05:46,480
cache management and over fetching so

00:05:44,380 --> 00:05:48,730
that's awesome but that first render for

00:05:46,480 --> 00:05:52,450
a brand new route that's where those

00:05:48,730 --> 00:05:54,160
spinners came in so let's walk through a

00:05:52,450 --> 00:05:55,780
little app and just get ourself situated

00:05:54,160 --> 00:05:58,930
here before we suspence off' i this in

00:05:55,780 --> 00:06:01,419
sort of solvents fix all this stuff so

00:05:58,930 --> 00:06:05,950
we're in our index today s via the react

00:06:01,419 --> 00:06:08,440
on render to views user detail and users

00:06:05,950 --> 00:06:14,320
this is the users view let's go to user

00:06:08,440 --> 00:06:16,380
detail click here use your detail okay

00:06:14,320 --> 00:06:18,320
great see user detail

00:06:16,380 --> 00:06:22,410
again react so awesome a

00:06:18,320 --> 00:06:23,940
componentization and let's you know it

00:06:22,410 --> 00:06:25,110
went sort of liberal there with the

00:06:23,940 --> 00:06:26,520
communitisation I sort of over

00:06:25,110 --> 00:06:28,080
componentized in some ways just for

00:06:26,520 --> 00:06:30,720
demonstration purposes you have user

00:06:28,080 --> 00:06:33,690
detail we here split this area up here

00:06:30,720 --> 00:06:35,280
into user header actually made a little

00:06:33,690 --> 00:06:36,480
Avatar components separately cuz you

00:06:35,280 --> 00:06:40,290
know you may want to use an avatar

00:06:36,480 --> 00:06:43,890
around the app and user detail info is

00:06:40,290 --> 00:06:45,330
sort of this right area and each of

00:06:43,890 --> 00:06:46,800
these are split out ridiculously with

00:06:45,330 --> 00:06:48,870
their own graphic you all fetches so

00:06:46,800 --> 00:06:52,680
user detail infos got its own graph QL

00:06:48,870 --> 00:06:56,360
fetch query sorry right here and you can

00:06:52,680 --> 00:07:00,690
see the classic thing loading error

00:06:56,360 --> 00:07:02,820
stuff now you all in if you're an Apollo

00:07:00,690 --> 00:07:05,760
fan you might use recompose and do

00:07:02,820 --> 00:07:09,090
either crazier stuff but just for

00:07:05,760 --> 00:07:10,500
clarity like gofer for example we're

00:07:09,090 --> 00:07:12,210
just gonna stick with just conditional

00:07:10,500 --> 00:07:15,150
if statements but some people like to

00:07:12,210 --> 00:07:16,980
use pyro components to branch and reuse

00:07:15,150 --> 00:07:17,550
some of this loading logic still doesn't

00:07:16,980 --> 00:07:21,210
solve the problem

00:07:17,550 --> 00:07:22,560
even if we had pattern matching in

00:07:21,210 --> 00:07:24,570
JavaScript writing some sort of like

00:07:22,560 --> 00:07:26,070
match condition you would still have a

00:07:24,570 --> 00:07:28,410
loading state that doesn't help just

00:07:26,070 --> 00:07:29,700
like a cooler way to solve this issue so

00:07:28,410 --> 00:07:30,870
what if they were sort of a better way

00:07:29,700 --> 00:07:32,550
to deal with this what if we could get

00:07:30,870 --> 00:07:34,710
rid of this loading state entirely and

00:07:32,550 --> 00:07:36,630
that's where react suspense comes in but

00:07:34,710 --> 00:07:38,970
just to finish off are sort of like a

00:07:36,630 --> 00:07:41,100
quick tour avatar is also fetching

00:07:38,970 --> 00:07:43,200
directly from the github API Tunis of

00:07:41,100 --> 00:07:47,700
the avatar URL it's gonna the same thing

00:07:43,200 --> 00:07:52,440
loading spinner error image repo list

00:07:47,700 --> 00:07:55,500
same same get some repositories and then

00:07:52,440 --> 00:07:57,810
again loading so like in just on this

00:07:55,500 --> 00:08:02,220
page alone there's like six six spinners

00:07:57,810 --> 00:08:04,410
or something so let's move to suspense

00:08:02,220 --> 00:08:09,140
so suspense can be used for a couple

00:08:04,410 --> 00:08:12,630
things the first is modules and assets

00:08:09,140 --> 00:08:16,020
so thing one for Sean Larkins like

00:08:12,630 --> 00:08:18,120
checklist is Oh split your apps so

00:08:16,020 --> 00:08:20,940
before we do that we need to enable

00:08:18,120 --> 00:08:22,890
suspense and there's sort of two ways

00:08:20,940 --> 00:08:25,440
you can go go about doing that but

00:08:22,890 --> 00:08:27,559
before you really get into it you should

00:08:25,440 --> 00:08:29,839
check that your app passes strict mode

00:08:27,559 --> 00:08:31,309
trick mode is a mode of react rendering

00:08:29,839 --> 00:08:32,959
where it's a little component you can

00:08:31,309 --> 00:08:35,060
wrap your entire app and even run it in

00:08:32,959 --> 00:08:36,889
production and what this will do it will

00:08:35,060 --> 00:08:39,800
basically log to the console if there

00:08:36,889 --> 00:08:41,810
you're using any deprecated API and it's

00:08:39,800 --> 00:08:43,519
just a good thing to do you know if

00:08:41,810 --> 00:08:46,519
you're using component will mount or

00:08:43,519 --> 00:08:49,670
anything that starts will if you're just

00:08:46,519 --> 00:08:52,579
using anything deprecated and again

00:08:49,670 --> 00:08:55,699
nothing changed just pop open the

00:08:52,579 --> 00:08:58,069
console here and you can click around

00:08:55,699 --> 00:08:59,959
your app you probably should and we're

00:08:58,069 --> 00:09:01,579
not seeing any errors so we're good ok

00:08:59,959 --> 00:09:03,769
so now we can enable concurrent react

00:09:01,579 --> 00:09:07,459
and what concurrent react is gonna allow

00:09:03,769 --> 00:09:10,490
us to do is actually suspend mutations

00:09:07,459 --> 00:09:15,290
to the Dom while we wait for our

00:09:10,490 --> 00:09:15,709
resources to arrive so just think about

00:09:15,290 --> 00:09:17,660
everything

00:09:15,709 --> 00:09:20,120
reiax gonna wait for something to arrive

00:09:17,660 --> 00:09:22,220
for us and we can orchestrate that this

00:09:20,120 --> 00:09:24,370
is not like a loading state this is just

00:09:22,220 --> 00:09:27,319
truly it's going to suspend itself

00:09:24,370 --> 00:09:28,490
there's gonna spend it's rendering so

00:09:27,319 --> 00:09:30,740
what they were able to in order to

00:09:28,490 --> 00:09:31,759
enable concurrent mode a little

00:09:30,740 --> 00:09:35,209
different way we're gonna mount it to

00:09:31,759 --> 00:09:39,620
the Dom we're gonna call react Dom not

00:09:35,209 --> 00:09:41,209
unstable this entire talk is a super

00:09:39,620 --> 00:09:44,839
experimental so just like I should have

00:09:41,209 --> 00:09:51,769
yeah create route you pass in the Dom

00:09:44,839 --> 00:09:54,100
node then you call dot render think dot

00:09:51,769 --> 00:09:54,100
render

00:09:55,120 --> 00:09:59,889
yeah cool I just enabled concurrent

00:09:57,040 --> 00:10:01,930
concurrent mode in react there's also a

00:09:59,889 --> 00:10:04,240
react document mode component so you can

00:10:01,930 --> 00:10:05,740
actually isolate slices of your tree if

00:10:04,240 --> 00:10:07,209
you're not if they don't pass not all

00:10:05,740 --> 00:10:08,709
that passed the strict mode so he's like

00:10:07,209 --> 00:10:11,529
a d3 library that's using some crazy

00:10:08,709 --> 00:10:13,749
stuff from react 15 or mix-ins you can't

00:10:11,529 --> 00:10:15,459
get there yet that's ok you can you can

00:10:13,749 --> 00:10:19,120
you can still start on the down this

00:10:15,459 --> 00:10:19,930
path this enabled concurrently the other

00:10:19,120 --> 00:10:21,220
thing you're probably gonna want to do

00:10:19,930 --> 00:10:24,339
is if you're not using an error boundary

00:10:21,220 --> 00:10:27,100
throw an error boundary up there I'm

00:10:24,339 --> 00:10:28,209
just using react era boundary so anyways

00:10:27,100 --> 00:10:30,699
let's put us top level suspense

00:10:28,209 --> 00:10:35,559
component you react

00:10:30,699 --> 00:10:39,870
dot suspense and we'll add a fallback

00:10:35,559 --> 00:10:39,870
and we actually will add a spinner here

00:10:42,120 --> 00:10:51,930
and I apologize if I make some typos I'm

00:10:46,329 --> 00:10:54,459
usually in typescript so I just call

00:10:51,930 --> 00:10:57,309
just like I'm used to auto imports too

00:10:54,459 --> 00:11:00,040
so I'm just just I'm getting soft in my

00:10:57,309 --> 00:11:05,790
JavaScript she was in for oh my god

00:11:00,040 --> 00:11:08,769
who did this ridiculous alright suspense

00:11:05,790 --> 00:11:14,620
so what what is this gonna do suspense

00:11:08,769 --> 00:11:15,220
is going to again suspend our mutations

00:11:14,620 --> 00:11:16,269
to the dump

00:11:15,220 --> 00:11:20,550
what does that mean how do i trigger

00:11:16,269 --> 00:11:20,550
these suspensions great question

00:11:21,570 --> 00:11:26,759
so what is is inside the suspense

00:11:24,540 --> 00:11:27,839
component okay this is what I'm not

00:11:26,759 --> 00:11:30,019
supposed to tell you all but I'm gonna

00:11:27,839 --> 00:11:32,190
do it because you guys are cool so

00:11:30,019 --> 00:11:34,470
inside the suspense component it's kind

00:11:32,190 --> 00:11:36,930
of like a narrow boundary it's kind of

00:11:34,470 --> 00:11:38,940
like a component did catch but it

00:11:36,930 --> 00:11:40,440
executes it takes advantage of this very

00:11:38,940 --> 00:11:42,050
strange part of JavaScript that

00:11:40,440 --> 00:11:45,540
Sebastian Marc beige kind of discovered

00:11:42,050 --> 00:11:48,300
which is that you can throw pretty much

00:11:45,540 --> 00:11:50,250
anything in JavaScript and if you throw

00:11:48,300 --> 00:11:55,139
a promise you can actually execute it

00:11:50,250 --> 00:11:57,060
almost synchronously yeah yeah you can

00:11:55,139 --> 00:11:59,490
throw a promise and so what you do with

00:11:57,060 --> 00:12:01,290
suspense is you throw promises and if

00:11:59,490 --> 00:12:05,459
you throw the promise in like sort of a

00:12:01,290 --> 00:12:07,589
try-catch it will execute it so when you

00:12:05,459 --> 00:12:08,610
want to you leverage suspense you get

00:12:07,589 --> 00:12:12,199
rid of loading state by using

00:12:08,610 --> 00:12:18,089
effectively like a try catch and throw

00:12:12,199 --> 00:12:21,600
yeah it's bizarro just wait so what's

00:12:18,089 --> 00:12:24,509
cool about the apollo api and getting

00:12:21,600 --> 00:12:25,889
your app back to your ful here is you're

00:12:24,509 --> 00:12:28,019
gonna want to cache these responses

00:12:25,889 --> 00:12:30,720
because what this allows you to do is

00:12:28,019 --> 00:12:33,269
basically if you have a cache you can

00:12:30,720 --> 00:12:35,610
say hey it's something in the cache cool

00:12:33,269 --> 00:12:39,420
return it immediately if not let's throw

00:12:35,610 --> 00:12:42,899
a promise and it'll be executed and then

00:12:39,420 --> 00:12:44,250
react will suspend until it resolves and

00:12:42,899 --> 00:12:45,930
then it will continue rendering down

00:12:44,250 --> 00:12:48,209
that tree underneath the suspense

00:12:45,930 --> 00:12:52,649
component so what does that like look

00:12:48,209 --> 00:13:01,649
like so let's go to our users do user

00:12:52,649 --> 00:13:04,260
detail here and what we'll do is just to

00:13:01,649 --> 00:13:05,550
show their self you know you saw the new

00:13:04,260 --> 00:13:08,939
use query thing i built this all with

00:13:05,550 --> 00:13:10,980
apollo hook so a little head there but

00:13:08,939 --> 00:13:15,149
let's make our own use use query that's

00:13:10,980 --> 00:13:17,040
Dispensa fine so use query it's gonna

00:13:15,149 --> 00:13:19,579
take a query it's gonna take some

00:13:17,040 --> 00:13:19,579
options

00:13:20,780 --> 00:13:24,570
and we're not ready to go so that's

00:13:23,340 --> 00:13:31,190
wrong

00:13:24,570 --> 00:13:33,900
okay so try cash so what if we returned

00:13:31,190 --> 00:13:37,500
this client and we'll grab the client I

00:13:33,900 --> 00:13:39,900
have an import the client here client

00:13:37,500 --> 00:13:46,820
from client this is my Apollo client

00:13:39,900 --> 00:13:46,820
this is just a regular client here

00:13:48,080 --> 00:13:53,390
client dot read query let's read the

00:13:50,730 --> 00:13:56,010
query from the cat from the cache query

00:13:53,390 --> 00:13:57,810
option this and sorted to match the

00:13:56,010 --> 00:14:00,900
normal API of use query where you have

00:13:57,810 --> 00:14:06,720
data and loading actually gonna data in

00:14:00,900 --> 00:14:08,100
here and read query the Apollo API is

00:14:06,720 --> 00:14:12,000
gonna read from the cache if it exists

00:14:08,100 --> 00:14:13,800
in throw an error instead of doing

00:14:12,000 --> 00:14:15,930
something with that error that's gonna

00:14:13,800 --> 00:14:18,690
say hey it's not in the cache let's go

00:14:15,930 --> 00:14:24,510
fetch it so what are we gonna do we're

00:14:18,690 --> 00:14:27,000
gonna return client dot query which is

00:14:24,510 --> 00:14:31,580
gonna be a promise query option hope

00:14:27,000 --> 00:14:31,580
this actually needs to be spread query

00:14:31,670 --> 00:14:35,870
options and so does this up here

00:14:37,540 --> 00:14:42,990
and then we're going to do the same

00:14:40,180 --> 00:14:48,280
thing or take data and we're gonna

00:14:42,990 --> 00:14:56,500
return data and this is our use query

00:14:48,280 --> 00:14:58,300
and saying and you can't do that okay so

00:14:56,500 --> 00:15:02,620
we can't read this repository of

00:14:58,300 --> 00:15:06,090
undefined let's see here

00:15:02,620 --> 00:15:10,780
we're in users we've done suspense ah

00:15:06,090 --> 00:15:14,980
this client query has not been what

00:15:10,780 --> 00:15:17,190
happened here sorry it's okay I've

00:15:14,980 --> 00:15:17,190
cheated

00:15:17,490 --> 00:15:26,440
cuz I'm even trust myself let's change

00:15:23,170 --> 00:15:28,990
the client cuz whatever must have got in

00:15:26,440 --> 00:15:33,460
their room sweet thank goodness for

00:15:28,990 --> 00:15:36,760
Alfred what did I mess up I don't know

00:15:33,460 --> 00:15:39,100
probably the spreads anyways we used to

00:15:36,760 --> 00:15:40,570
spencified that just does it drop it now

00:15:39,100 --> 00:15:42,310
this actually isn't as robust as you

00:15:40,570 --> 00:15:43,750
think it is that's because you use query

00:15:42,310 --> 00:15:45,430
actually we'll sorry read query will

00:15:43,750 --> 00:15:47,410
actually throw no matter what if

00:15:45,430 --> 00:15:51,730
something's not in the cache it's a low

00:15:47,410 --> 00:15:55,200
level but we just suspense off' I'd this

00:15:51,730 --> 00:15:58,260
and if we if we look closely and we

00:15:55,200 --> 00:16:01,120
sorry we go back here might pop open

00:15:58,260 --> 00:16:02,890
chrome dev tools and let's go to a

00:16:01,120 --> 00:16:07,480
detail page and let's refresh from the

00:16:02,890 --> 00:16:13,180
detail and now let's slow down too fast

00:16:07,480 --> 00:16:15,360
3G and we go back did you see how it

00:16:13,180 --> 00:16:19,060
actually waited and there was no spinner

00:16:15,360 --> 00:16:21,250
yeah no spinner there so let's go use if

00:16:19,060 --> 00:16:25,720
we use query in other places on our user

00:16:21,250 --> 00:16:30,160
detail page let's just drop this in

00:16:25,720 --> 00:16:32,649
grab the import to be lazy I could

00:16:30,160 --> 00:16:35,529
create an Apollo could create a provider

00:16:32,649 --> 00:16:43,839
but out there and let's go to user

00:16:35,529 --> 00:16:48,579
detail so not perfect right because you

00:16:43,839 --> 00:16:52,720
can see this is just reloading here so

00:16:48,579 --> 00:16:56,019
let's refresh for starters all right so

00:16:52,720 --> 00:16:57,910
that's cool didn't load now let's see on

00:16:56,019 --> 00:17:01,420
a fast connection it's kind of waiting

00:16:57,910 --> 00:17:03,670
and it waits for the transition and

00:17:01,420 --> 00:17:05,679
that's because it's actually react reach

00:17:03,670 --> 00:17:07,839
router is actually waiting for suspense

00:17:05,679 --> 00:17:09,880
to resolve it's waiting before it makes

00:17:07,839 --> 00:17:11,049
the transition to the next route kind of

00:17:09,880 --> 00:17:13,959
like you wouldn't let's say twitter.com

00:17:11,049 --> 00:17:15,789
does this but that's not awesome because

00:17:13,959 --> 00:17:17,559
or it is awesome but it's it's not

00:17:15,789 --> 00:17:19,990
perfect yet because our users really see

00:17:17,559 --> 00:17:22,390
anything so Wow suspense is kind of

00:17:19,990 --> 00:17:25,809
happening what's like show something to

00:17:22,390 --> 00:17:30,970
our user let's go back to our users Bay

00:17:25,809 --> 00:17:34,620
user's page here let's use you state and

00:17:30,970 --> 00:17:34,620
let's just do something as simple as

00:17:35,190 --> 00:17:40,890
current ID set current ID

00:17:42,059 --> 00:17:50,230
let's react you state will say it's a

00:17:46,270 --> 00:17:52,000
null right now and what we'll do is this

00:17:50,230 --> 00:17:56,049
is a this is a row we're looking at

00:17:52,000 --> 00:18:02,100
other stargazers here so at the end of

00:17:56,049 --> 00:18:07,500
my row right here will say if current ID

00:18:02,100 --> 00:18:09,970
it's a user dot login let's toss up our

00:18:07,500 --> 00:18:20,410
we're spinning sperm end is so we get

00:18:09,970 --> 00:18:21,790
the saucer spinner or no is it called

00:18:20,410 --> 00:18:24,480
conditionally how is it called condition

00:18:21,790 --> 00:18:28,299
we here oh I gotta move this up here

00:18:24,480 --> 00:18:32,559
gosh Dan Abramov you're silly silly us

00:18:28,299 --> 00:18:38,500
Lin rules okay but now when I click we

00:18:32,559 --> 00:18:41,020
should see oh I need to make the onclick

00:18:38,500 --> 00:18:47,410
enter so now when on click happens let's

00:18:41,020 --> 00:18:52,150
set current ID to user dot login and now

00:18:47,410 --> 00:18:53,290
we'll get our little spinner guys e so

00:18:52,150 --> 00:18:54,460
now our users like kind of know what's

00:18:53,290 --> 00:18:56,140
happening and actually if you really

00:18:54,460 --> 00:18:58,660
slow things down this is kind of crazy

00:18:56,140 --> 00:19:00,660
because Ryan's kind of a beast and with

00:18:58,660 --> 00:19:03,910
reach with reach router you can actually

00:19:00,660 --> 00:19:05,830
change the suspense suspense well you

00:19:03,910 --> 00:19:08,169
can like overwrite it so let's like just

00:19:05,830 --> 00:19:10,840
do this slow 3G so if I click this and

00:19:08,169 --> 00:19:15,610
click that it actually will switch I got

00:19:10,840 --> 00:19:17,470
to play the game it will switch you know

00:19:15,610 --> 00:19:19,750
different you'll cancel itself which is

00:19:17,470 --> 00:19:21,730
kind of remarkable if you try doing that

00:19:19,750 --> 00:19:25,630
with current reactor outer have it have

00:19:21,730 --> 00:19:26,710
a great time so this is some kind of

00:19:25,630 --> 00:19:29,230
janky though alright like these images

00:19:26,710 --> 00:19:35,440
kind of suck right like this is pretty

00:19:29,230 --> 00:19:37,620
terrible how can we fix that well we can

00:19:35,440 --> 00:19:41,200
use suspense for modules and assets too

00:19:37,620 --> 00:19:42,429
so let's hop into our user detail and

00:19:41,200 --> 00:19:45,970
what we really want to have happen when

00:19:42,429 --> 00:19:47,440
we click on one of these is we want this

00:19:45,970 --> 00:19:48,760
is great on a fast connection now right

00:19:47,440 --> 00:19:50,740
it's already all the data is there it's

00:19:48,760 --> 00:19:55,950
loaded but on a slow connection we're

00:19:50,740 --> 00:19:59,580
gonna see this terrible paint happen at

00:19:55,950 --> 00:20:01,990
basically around the around that avatar

00:19:59,580 --> 00:20:04,300
let's go to network for a second here

00:20:01,990 --> 00:20:06,280
and let's refresh see the thing is I

00:20:04,300 --> 00:20:08,350
usually have this little module that I

00:20:06,280 --> 00:20:10,750
can control the cache with but because

00:20:08,350 --> 00:20:12,520
Apollo has got its cache I can can't

00:20:10,750 --> 00:20:12,970
usually use it but anyways let's keep

00:20:12,520 --> 00:20:17,260
going

00:20:12,970 --> 00:20:18,640
so let's go too fast 3G I hit this this

00:20:17,260 --> 00:20:21,130
is nice because my user seeing something

00:20:18,640 --> 00:20:26,590
but this paint sucks right that that

00:20:21,130 --> 00:20:28,960
image is brutal so let's fix that so

00:20:26,590 --> 00:20:31,180
we're on user detail here and we can

00:20:28,960 --> 00:20:32,260
import something kind of new from react

00:20:31,180 --> 00:20:35,020
that's coming out it's in progress

00:20:32,260 --> 00:20:37,780
called react cache and react cache is a

00:20:35,020 --> 00:20:39,970
basic cache for any kind of promise in

00:20:37,780 --> 00:20:42,580
the situation and we'll use that to

00:20:39,970 --> 00:20:45,490
create an image cache and we'll use

00:20:42,580 --> 00:20:49,140
suspense to lazily create an image and

00:20:45,490 --> 00:20:49,140
create a low-quality image placeholder

00:20:49,530 --> 00:20:54,580
so react cache is actually in react is

00:20:52,660 --> 00:20:56,140
like in the core package or like

00:20:54,580 --> 00:20:58,300
something core backers in the core repo

00:20:56,140 --> 00:21:00,900
so you'll probably start seeing it come

00:20:58,300 --> 00:21:07,090
up here and there another unstable

00:21:00,900 --> 00:21:12,730
unstable create resource from react

00:21:07,090 --> 00:21:18,130
cache so resources allow you to define

00:21:12,730 --> 00:21:21,090
asynchronous processes synchronously so

00:21:18,130 --> 00:21:25,000
we'll do something like image resource

00:21:21,090 --> 00:21:31,180
equals create unstable and stable create

00:21:25,000 --> 00:21:41,170
resource and we'll create a new promise

00:21:31,180 --> 00:21:43,080
here yes schedule take a source and

00:21:41,170 --> 00:21:48,510
we'll do it and return a new promise

00:21:43,080 --> 00:21:48,510
promise can't spell today resolved

00:21:53,379 --> 00:21:58,820
and what this is gonna let's just create

00:21:55,490 --> 00:22:04,570
an image in the browser so equals new

00:21:58,820 --> 00:22:08,179
image image that source equal source

00:22:04,570 --> 00:22:10,389
image dot onload let's resolve when it

00:22:08,179 --> 00:22:10,389
loads

00:22:15,370 --> 00:22:26,960
we're in Fast 3G land that's okay so now

00:22:19,279 --> 00:22:29,299
down in our avatar here we're gonna take

00:22:26,960 --> 00:22:32,919
this image object and we're gonna make

00:22:29,299 --> 00:22:36,070
sure that it actually throws and

00:22:32,919 --> 00:22:39,559
suspends this entire part of the tree

00:22:36,070 --> 00:22:41,360
until the image the big image has loaded

00:22:39,559 --> 00:22:42,710
so we really don't need any of this by

00:22:41,360 --> 00:22:44,210
the way we can delete all these loading

00:22:42,710 --> 00:22:45,470
States now that we're using we're

00:22:44,210 --> 00:22:46,879
suspence let's just go ahead and do that

00:22:45,470 --> 00:22:49,730
clean up yourself clean up after

00:22:46,879 --> 00:22:55,120
ourselves here because we're suspending

00:22:49,730 --> 00:22:57,799
on all of these alright here we go

00:22:55,120 --> 00:23:04,759
alright so this image so let's just call

00:22:57,799 --> 00:23:12,500
image resource dot read and we'll pass

00:23:04,759 --> 00:23:15,080
it in data user dot avatar URL that's

00:23:12,500 --> 00:23:16,759
the URL of the person and what this is

00:23:15,080 --> 00:23:19,789
gonna do is very similar to our suspense

00:23:16,759 --> 00:23:21,620
if I'd try catch it's going to try to

00:23:19,789 --> 00:23:23,480
immediately try and download this image

00:23:21,620 --> 00:23:26,899
as fast as possible but if it's not

00:23:23,480 --> 00:23:30,169
there it reacts going to suspend until

00:23:26,899 --> 00:23:32,059
it is and then continue down the tree

00:23:30,169 --> 00:23:33,409
which is kind of cool you can also wrap

00:23:32,059 --> 00:23:36,799
this up into a component so you can make

00:23:33,409 --> 00:23:39,220
like a capital i' image and call this

00:23:36,799 --> 00:23:44,389
image resource dot read right there

00:23:39,220 --> 00:23:49,129
it's a sweet so let's prove that let's

00:23:44,389 --> 00:23:49,940
go back here and now let's see we're

00:23:49,129 --> 00:23:53,120
waiting we're waiting we're waiting

00:23:49,940 --> 00:23:54,440
we're waiting and it suspending there

00:23:53,120 --> 00:23:58,039
and then with the annoying thing about

00:23:54,440 --> 00:24:01,970
chrome is it's faking this and it's hard

00:23:58,039 --> 00:24:03,409
to show this effect but if you just turn

00:24:01,970 --> 00:24:04,850
back on there fast connection here

00:24:03,409 --> 00:24:05,660
you'll see that everything is gonna come

00:24:04,850 --> 00:24:08,870
in at

00:24:05,660 --> 00:24:13,130
oops the image is gonna come in and not

00:24:08,870 --> 00:24:13,760
paint directly I'm scrolling issues here

00:24:13,130 --> 00:24:16,600
whoops

00:24:13,760 --> 00:24:16,600
let's refresh ah

00:24:17,780 --> 00:24:20,440
shouldn't have done that

00:24:29,739 --> 00:24:36,440
see here sorry about that

00:24:32,599 --> 00:24:39,769
it shouldn't have done that we can fix

00:24:36,440 --> 00:24:41,929
it later though hmm okay

00:24:39,769 --> 00:24:44,239
not working the way it should work is

00:24:41,929 --> 00:24:46,639
the image should basically come in at

00:24:44,239 --> 00:24:48,649
the same exact time so your entire view

00:24:46,639 --> 00:24:50,899
is coming in at once instead of it being

00:24:48,649 --> 00:24:55,070
this like partial thing which is great

00:24:50,899 --> 00:24:58,009
user experience so we showed how

00:24:55,070 --> 00:25:00,259
suspense can help alleviate some of the

00:24:58,009 --> 00:25:01,669
problems of let's go back to our slide

00:25:00,259 --> 00:25:05,690
share some of the problems of

00:25:01,669 --> 00:25:07,519
coordinating loading states and you can

00:25:05,690 --> 00:25:08,779
use it with graph QL it's kind of in

00:25:07,519 --> 00:25:11,299
progress and we'll get to that in a

00:25:08,779 --> 00:25:13,700
second but why is it why is it good it's

00:25:11,299 --> 00:25:15,440
a good DX right it feels synchronous it

00:25:13,700 --> 00:25:16,940
reads top to bottom you just call this

00:25:15,440 --> 00:25:19,519
use query thing it almost drops into the

00:25:16,940 --> 00:25:20,899
Apollo API perfectly it's easy to

00:25:19,519 --> 00:25:22,789
coordinate you get to this fast and

00:25:20,899 --> 00:25:28,129
pretty state let's talk about what's

00:25:22,789 --> 00:25:29,359
coming so you have react cache which

00:25:28,129 --> 00:25:31,700
kind of showed you you can cache

00:25:29,359 --> 00:25:34,729
basically any promise that's both good

00:25:31,700 --> 00:25:36,649
and bad if you try to put regular rest

00:25:34,729 --> 00:25:37,839
inside of this cache you will

00:25:36,649 --> 00:25:42,109
immediately run into problems with

00:25:37,839 --> 00:25:43,669
normalization and invalidation the other

00:25:42,109 --> 00:25:45,769
issue right now is something called

00:25:43,669 --> 00:25:48,229
they're calling soft expiration and what

00:25:45,769 --> 00:25:50,599
this is is kind of the ability to track

00:25:48,229 --> 00:25:55,579
what's in suspense what's what's loading

00:25:50,599 --> 00:25:57,320
from outside of the children of the tree

00:25:55,579 --> 00:25:59,329
so under I want to track what's

00:25:57,320 --> 00:26:02,599
suspending for maybe a sibling instead

00:25:59,329 --> 00:26:03,950
of a descendant and this is big

00:26:02,599 --> 00:26:05,570
implications for how you're gonna do

00:26:03,950 --> 00:26:11,029
certain kinds of infinite loading and

00:26:05,570 --> 00:26:12,739
pagination context dot right so in react

00:26:11,029 --> 00:26:15,139
they kind of slip this in there's a

00:26:12,739 --> 00:26:16,759
global context actually now there's a

00:26:15,139 --> 00:26:18,919
global context and you can only read

00:26:16,759 --> 00:26:21,379
from it at this point but the cache

00:26:18,919 --> 00:26:22,639
actually uses it and eventually they're

00:26:21,379 --> 00:26:24,589
gonna allow you to write to it this will

00:26:22,639 --> 00:26:26,299
be really great for theming but this

00:26:24,589 --> 00:26:29,450
will also allow you to write some kinds

00:26:26,299 --> 00:26:32,149
of some kind of invalidation logic so

00:26:29,450 --> 00:26:34,639
that's really important and the last bit

00:26:32,149 --> 00:26:37,190
is really interesting to me is

00:26:34,639 --> 00:26:39,289
server-side rendering so the ability to

00:26:37,190 --> 00:26:40,100
render on the server and actually share

00:26:39,289 --> 00:26:43,160
on

00:26:40,100 --> 00:26:44,960
percent of dating logic with suspense on

00:26:43,160 --> 00:26:47,780
the client and a server allowing you to

00:26:44,960 --> 00:26:49,640
hydrate the cache on the client actually

00:26:47,780 --> 00:26:52,039
stream it down this is what's coming is

00:26:49,640 --> 00:26:54,799
what they're working on interestingly

00:26:52,039 --> 00:26:57,650
Facebook doesn't use nodejs so they have

00:26:54,799 --> 00:26:59,000
their own VM so it's unclear exactly how

00:26:57,650 --> 00:27:00,260
the compatibility how that's all gonna

00:26:59,000 --> 00:27:04,940
work but something they're working

00:27:00,260 --> 00:27:06,200
towards is this streaming SSR and what's

00:27:04,940 --> 00:27:07,700
really cool about that is if you know

00:27:06,200 --> 00:27:09,280
about Apollo if you've how many people

00:27:07,700 --> 00:27:11,600
here do SSR with Apollo

00:27:09,280 --> 00:27:15,590
ok so Apollo does this really

00:27:11,600 --> 00:27:18,230
interesting thing it walks your tree

00:27:15,590 --> 00:27:19,820
twice it goes in it goes through all of

00:27:18,230 --> 00:27:22,010
your components gathers up all your

00:27:19,820 --> 00:27:24,200
graph to all queries execute them and

00:27:22,010 --> 00:27:26,320
then pushes the data from the top

00:27:24,200 --> 00:27:28,760
through to all of your components and

00:27:26,320 --> 00:27:29,900
that's great it's just not as super

00:27:28,760 --> 00:27:32,750
efficient because if you go through the

00:27:29,900 --> 00:27:34,309
tree twice in theory with the new

00:27:32,750 --> 00:27:35,809
streaming server renderer by the way no

00:27:34,309 --> 00:27:36,830
one else can do this either so nopales

00:27:35,809 --> 00:27:39,220
not special

00:27:36,830 --> 00:27:41,390
with the new streaming server renderer

00:27:39,220 --> 00:27:44,900
in theory you'd be able to go through

00:27:41,390 --> 00:27:46,429
the render through one pass and be able

00:27:44,900 --> 00:27:47,840
to somehow pause when you got to the

00:27:46,429 --> 00:27:51,559
important parts like waiting for data

00:27:47,840 --> 00:27:53,090
and then resume once it's arrived and so

00:27:51,559 --> 00:27:54,500
that will be awesome for performance

00:27:53,090 --> 00:27:56,020
it'll make you know if you're working

00:27:54,500 --> 00:27:59,120
like the New York Times or you work at a

00:27:56,020 --> 00:28:01,940
any kind of blog like that's the ideal

00:27:59,120 --> 00:28:03,530
situation and it's really not possible

00:28:01,940 --> 00:28:04,549
without concurrent mode and it's not

00:28:03,530 --> 00:28:07,340
gonna be possible without the new

00:28:04,549 --> 00:28:08,630
streaming server renderer there are

00:28:07,340 --> 00:28:11,330
other issues there too but that's really

00:28:08,630 --> 00:28:12,650
what they're working on so that's where

00:28:11,330 --> 00:28:14,450
and that and that all this stuff should

00:28:12,650 --> 00:28:16,720
be coming out probably around October of

00:28:14,450 --> 00:28:19,400
this year around the time of react cough

00:28:16,720 --> 00:28:22,789
so if you're doing anything crazy with

00:28:19,400 --> 00:28:25,070
like data loading I would just pause a

00:28:22,789 --> 00:28:29,780
little bit so you saw a little bit of

00:28:25,070 --> 00:28:33,140
the graph QL demos here with suspense I

00:28:29,780 --> 00:28:34,520
would be hesitant to go add this to your

00:28:33,140 --> 00:28:36,650
app it's something to play with it's

00:28:34,520 --> 00:28:38,299
super experimental the folks that Apollo

00:28:36,650 --> 00:28:41,169
will do an amazing job at actually

00:28:38,299 --> 00:28:43,549
integrating this holistically into the

00:28:41,169 --> 00:28:44,809
the library and so hopefully this is

00:28:43,549 --> 00:28:45,530
just like a new feature you'll get one

00:28:44,809 --> 00:28:47,720
day

00:28:45,530 --> 00:28:50,210
same thing with relay folks or you know

00:28:47,720 --> 00:28:53,270
whatever other data fetching solutions

00:28:50,210 --> 00:28:55,310
come out this should be taken care of

00:28:53,270 --> 00:28:57,400
were you but just something to play with

00:28:55,310 --> 00:28:59,270
it and and and and and definitely

00:28:57,400 --> 00:29:01,070
contribute to you if that's what you're

00:28:59,270 --> 00:29:04,370
doing so anyways that thanks so much

00:29:01,070 --> 00:29:06,310
Thank You Apollo for inviting me and any

00:29:04,370 --> 00:29:08,900
questions I'm at Jared Palmer on Twitter

00:29:06,310 --> 00:29:11,210
I'll be around I'm also from New York so

00:29:08,900 --> 00:29:12,960
drive around hit me after I be or

00:29:11,210 --> 00:29:19,839
something alright thanks so much

00:29:12,960 --> 00:29:19,839

YouTube URL: https://www.youtube.com/watch?v=8mnaI8BpsmE


