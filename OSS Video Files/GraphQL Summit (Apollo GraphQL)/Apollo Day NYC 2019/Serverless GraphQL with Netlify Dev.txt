Title: Serverless GraphQL with Netlify Dev
Publication date: 2019-05-21
Playlist: Apollo Day NYC 2019
Description: 
	GraphQL is often synonymous with the return of Monolithic architecture. Does this mean the benefits of Serverless are irrelevant? In this talk we explore how Serverless and GraphQL work together, explore ways to stitch individual function schemas, and get hard numbers to fight performance concerns.
Captions: 
	00:00:04,030 --> 00:00:09,820
okay everyone hi I'm Sean I also go by

00:00:07,420 --> 00:00:11,980
six and I work in nullify I'm also a

00:00:09,820 --> 00:00:13,900
Dresner if you want to totally embarrass

00:00:11,980 --> 00:00:16,029
Sara Johnson err just wear a shirt like

00:00:13,900 --> 00:00:20,350
this and take a photo with it

00:00:16,029 --> 00:00:22,480
she'll love that so service graph y'all

00:00:20,350 --> 00:00:24,699
so I'm here to talk a little bit about

00:00:22,480 --> 00:00:26,050
what we're doing at nullify and we're

00:00:24,699 --> 00:00:27,939
how we're make trying to make the

00:00:26,050 --> 00:00:31,480
graphical adoption story a bit easier

00:00:27,939 --> 00:00:33,400
for people and and it's it's I come at

00:00:31,480 --> 00:00:35,440
this so I saw people raise their hands

00:00:33,400 --> 00:00:36,910
earlier there's a mix of front-end

00:00:35,440 --> 00:00:39,130
people and it makes it back in people

00:00:36,910 --> 00:00:41,620
and people who are sort of undecided

00:00:39,130 --> 00:00:43,989
because they do everything and and so I

00:00:41,620 --> 00:00:45,460
want to disclose my biases I come I come

00:00:43,989 --> 00:00:48,820
at graph go from the front-end

00:00:45,460 --> 00:00:50,950
perspective and that's why the first the

00:00:48,820 --> 00:00:53,079
first thing that I that I've that the

00:00:50,950 --> 00:00:54,370
first assertion that I'm gonna make is a

00:00:53,079 --> 00:00:55,840
graph girls problem is that most

00:00:54,370 --> 00:00:57,340
important things are still too hard a

00:00:55,840 --> 00:00:59,050
lot of the times that events like this

00:00:57,340 --> 00:01:00,610
you're gonna hear stories about how

00:00:59,050 --> 00:01:02,379
wonderful graph kill is and how

00:01:00,610 --> 00:01:05,020
game-changing it is but a lot of the

00:01:02,379 --> 00:01:07,570
things that are hard are being you know

00:01:05,020 --> 00:01:09,280
are the pain points that you they run

00:01:07,570 --> 00:01:12,310
into only when you get really sort of in

00:01:09,280 --> 00:01:13,600
the weeds and and so I just want to talk

00:01:12,310 --> 00:01:16,630
a little bit about how we can make some

00:01:13,600 --> 00:01:18,909
of that easier today it's hard to give

00:01:16,630 --> 00:01:21,070
this talk at this time because this is

00:01:18,909 --> 00:01:24,220
in front of you know some of my personal

00:01:21,070 --> 00:01:26,920
heroes like Peggy and Jared and and also

00:01:24,220 --> 00:01:28,990
the things that they just announced this

00:01:26,920 --> 00:01:34,020
morning basically makes like half my

00:01:28,990 --> 00:01:36,820
talk irrelevant so I'm just gonna like

00:01:34,020 --> 00:01:39,820
delineate where stuff is still

00:01:36,820 --> 00:01:41,110
interesting and and also like you know

00:01:39,820 --> 00:01:42,759
you're not gonna adopt everything at

00:01:41,110 --> 00:01:46,119
once and we it's still it's still worth

00:01:42,759 --> 00:01:47,470
discussing so so I'm just gonna this

00:01:46,119 --> 00:01:50,950
talk comes in two parts the first part

00:01:47,470 --> 00:01:52,360
is laziness and so and so just a little

00:01:50,950 --> 00:01:54,460
injured by me I work in nullify as a

00:01:52,360 --> 00:01:56,350
developer experience engineer I also

00:01:54,460 --> 00:01:58,329
moderate the ER slash we actually s

00:01:56,350 --> 00:02:00,759
subreddit which peg us demo in earlier

00:01:58,329 --> 00:02:03,189
we just crossed I think 110,000

00:02:00,759 --> 00:02:04,990
subscribers if you if you work in react

00:02:03,189 --> 00:02:07,829
at all it's a good place to talk about

00:02:04,990 --> 00:02:11,560
react hire people as well as find jobs

00:02:07,829 --> 00:02:13,270
and also fun fact I sang the Babel theme

00:02:11,560 --> 00:02:15,209
song so if you if you use Babel at all

00:02:13,270 --> 00:02:17,489
there's a there is a theme song

00:02:15,209 --> 00:02:20,010
it's good for April Fool's I think they

00:02:17,489 --> 00:02:21,420
put they put my voice up that's the

00:02:20,010 --> 00:02:26,250
extent of my singing and that's why I

00:02:21,420 --> 00:02:28,530
work in developer experience now so so

00:02:26,250 --> 00:02:30,840
and the first the first thing I did in

00:02:28,530 --> 00:02:33,030
graph QL was try to solve the double

00:02:30,840 --> 00:02:34,650
decoration problem it's a it's a huge

00:02:33,030 --> 00:02:38,340
problem and you've never heard of it

00:02:34,650 --> 00:02:39,959
because I made it up and and and we're

00:02:38,340 --> 00:02:42,000
not gonna talk about it today but it but

00:02:39,959 --> 00:02:44,099
this is approaching it graph go from the

00:02:42,000 --> 00:02:46,200
front end perspective right and it's

00:02:44,099 --> 00:02:48,060
it's basically using babble to solve the

00:02:46,200 --> 00:02:49,950
graph qaul double decoration problem I'm

00:02:48,060 --> 00:02:52,230
just gonna show it to you a little bit

00:02:49,950 --> 00:02:54,239
just so just so that people know this

00:02:52,230 --> 00:02:56,220
exists and you can come talk to me about

00:02:54,239 --> 00:02:58,950
that later later on so here's on the

00:02:56,220 --> 00:03:01,680
left is on transpiled raw source code

00:02:58,950 --> 00:03:02,579
and on the and on the right is

00:03:01,680 --> 00:03:05,189
transpiled

00:03:02,579 --> 00:03:07,079
result resulting code so so basically

00:03:05,189 --> 00:03:08,459
one thing I observed was that when

00:03:07,079 --> 00:03:10,200
people write graph QL

00:03:08,459 --> 00:03:11,579
in on the front end they're basically

00:03:10,200 --> 00:03:13,620
repeating themselves in the graphical

00:03:11,579 --> 00:03:16,470
query and then in the final data usage

00:03:13,620 --> 00:03:17,730
inside of react and weird errors emerge

00:03:16,470 --> 00:03:20,819
especially when you're not using

00:03:17,730 --> 00:03:22,349
typescript Ritter is emerged when you

00:03:20,819 --> 00:03:24,299
have mismatches between what you what

00:03:22,349 --> 00:03:26,579
you requested in the Goethals query and

00:03:24,299 --> 00:03:29,370
what you what you use in the app either

00:03:26,579 --> 00:03:31,079
way and so so the main idea here is to

00:03:29,370 --> 00:03:33,540
bind them so so here for example if I

00:03:31,079 --> 00:03:37,079
want to dive into the actors a little

00:03:33,540 --> 00:03:38,879
bit more right I can just go and and and

00:03:37,079 --> 00:03:40,169
let's say I change the model to make

00:03:38,879 --> 00:03:42,959
this in an array

00:03:40,169 --> 00:03:47,129
I can just go dive in and map it out

00:03:42,959 --> 00:03:52,109
actor in return for example actor dot

00:03:47,129 --> 00:03:54,389
name and and the query updates

00:03:52,109 --> 00:03:56,519
accordingly as well as the the

00:03:54,389 --> 00:03:58,590
underlying react usage as well and

00:03:56,519 --> 00:04:02,549
there's there's all sorts of adaptations

00:03:58,590 --> 00:04:04,769
for first for directives and and and

00:04:02,549 --> 00:04:06,959
also all sorts of fun stuff but that's

00:04:04,769 --> 00:04:08,699
that's kind of what I do when I learn

00:04:06,959 --> 00:04:11,760
something I try to look for the pain

00:04:08,699 --> 00:04:15,510
points and see how it can make it can be

00:04:11,760 --> 00:04:17,639
better but really I realized the more I

00:04:15,510 --> 00:04:19,169
went into graphical is actually that

00:04:17,639 --> 00:04:21,359
grass fields problem is that creating

00:04:19,169 --> 00:04:23,580
graphical endpoints creating graphical

00:04:21,359 --> 00:04:25,370
schemas and servers is actually much

00:04:23,580 --> 00:04:27,470
harder than consuming so a lot of

00:04:25,370 --> 00:04:29,389
innovation that we talk about for

00:04:27,470 --> 00:04:32,030
example like the hooks are incremental

00:04:29,389 --> 00:04:34,040
and and and and makes something that's

00:04:32,030 --> 00:04:34,550
already pretty easy even easier that's

00:04:34,040 --> 00:04:36,199
great

00:04:34,550 --> 00:04:37,639
but let's also talk about the things

00:04:36,199 --> 00:04:39,470
that are really really hard and try to

00:04:37,639 --> 00:04:43,460
make those easier as well and a lot of

00:04:39,470 --> 00:04:44,570
that has to do with political setups

00:04:43,460 --> 00:04:46,729
that are not quite taking up

00:04:44,570 --> 00:04:48,800
technological but I'll just make that

00:04:46,729 --> 00:04:50,720
analogy to the double Declaration of

00:04:48,800 --> 00:04:53,360
problem the back end as well so there is

00:04:50,720 --> 00:04:55,280
a similar problem if you can call it

00:04:53,360 --> 00:04:56,750
that where you have to when you're

00:04:55,280 --> 00:04:59,330
creating for example like a graphical

00:04:56,750 --> 00:05:00,380
server you you you create your schema

00:04:59,330 --> 00:05:03,229
and then you could declare your

00:05:00,380 --> 00:05:04,970
resolvers and you repeat every for every

00:05:03,229 --> 00:05:06,710
every type in the schema you have to

00:05:04,970 --> 00:05:08,419
have a resolver right so that's a very

00:05:06,710 --> 00:05:10,460
common like it makes things more

00:05:08,419 --> 00:05:12,020
explicit yes but then it also makes for

00:05:10,460 --> 00:05:14,060
really weird errors when things get on a

00:05:12,020 --> 00:05:16,880
sink and and they get on this thing

00:05:14,060 --> 00:05:18,680
pretty quickly so a lot of so-so

00:05:16,880 --> 00:05:21,320
I know I don't think I think this is

00:05:18,680 --> 00:05:23,840
fine I think this is a good way for a

00:05:21,320 --> 00:05:26,000
lot of development to be done but there

00:05:23,840 --> 00:05:29,000
are a lot of service providers that

00:05:26,000 --> 00:05:31,789
start to provide generation services for

00:05:29,000 --> 00:05:34,539
you and this is kind of the rise of what

00:05:31,789 --> 00:05:36,560
they call graphical native where they

00:05:34,539 --> 00:05:39,800
generate especially for the database

00:05:36,560 --> 00:05:41,599
companies they want to be a lot of a lot

00:05:39,800 --> 00:05:45,740
of their adoption pain points has been

00:05:41,599 --> 00:05:48,110
to do with learning their specific API

00:05:45,740 --> 00:05:49,280
work with one of the companies that one

00:05:48,110 --> 00:05:50,810
of the partner companies that we work

00:05:49,280 --> 00:05:53,900
with an elephant is called fauna DB

00:05:50,810 --> 00:05:56,900
they're basically the X Twitter database

00:05:53,900 --> 00:05:59,889
team and they spun out to their own

00:05:56,900 --> 00:06:03,530
database company to provide global

00:05:59,889 --> 00:06:06,139
distributed acid acid transactions and

00:06:03,530 --> 00:06:07,460
and so so they have their own query

00:06:06,139 --> 00:06:09,380
language but nobody wants to learn that

00:06:07,460 --> 00:06:11,389
because that's that is not going to

00:06:09,380 --> 00:06:12,770
scale so what graph you all what

00:06:11,389 --> 00:06:15,860
providing and graphical layer does is

00:06:12,770 --> 00:06:16,580
reduce that learning curve so it's

00:06:15,860 --> 00:06:20,240
improving

00:06:16,580 --> 00:06:22,880
it improves and improves the developer

00:06:20,240 --> 00:06:25,070
experience increases and a lot of times

00:06:22,880 --> 00:06:26,599
when you when the date when the database

00:06:25,070 --> 00:06:29,090
is generate the schemas for you they

00:06:26,599 --> 00:06:30,910
actually improved the the speed respect

00:06:29,090 --> 00:06:33,820
especially for aggregation queries like

00:06:30,910 --> 00:06:37,060
you know window queries and sums and all

00:06:33,820 --> 00:06:39,340
that and averages one of the so I was

00:06:37,060 --> 00:06:41,740
going to show you a demo about how to

00:06:39,340 --> 00:06:43,900
use that use for how do you how to use a

00:06:41,740 --> 00:06:46,210
generator schema with wanna DB as

00:06:43,900 --> 00:06:49,240
together with nullified EV unfortunately

00:06:46,210 --> 00:06:50,800
the API because it's a beta recently

00:06:49,240 --> 00:06:53,440
broke so I can't show it to you but I

00:06:50,800 --> 00:06:56,380
can show you recording and talk you

00:06:53,440 --> 00:06:58,900
through it and so and so this starts

00:06:56,380 --> 00:07:00,550
with a typical front-end app and we're

00:06:58,900 --> 00:07:02,470
just going to read an elephant's create

00:07:00,550 --> 00:07:05,680
you can type in a template and it

00:07:02,470 --> 00:07:07,240
scaffolds out a graph here all function

00:07:05,680 --> 00:07:09,730
for you and this is a service function

00:07:07,240 --> 00:07:11,320
that is that and and it's installing the

00:07:09,730 --> 00:07:13,510
dependencies and installing the add-on

00:07:11,320 --> 00:07:15,520
that provisions the database for you so

00:07:13,510 --> 00:07:17,590
all in one command inside of your

00:07:15,520 --> 00:07:20,200
terminal you can you can look up and

00:07:17,590 --> 00:07:22,000
adjust and modify the underlying code

00:07:20,200 --> 00:07:23,650
that has been scaffold it for you as

00:07:22,000 --> 00:07:25,540
well as adjust the schema so here I'm

00:07:23,650 --> 00:07:27,160
adjusting the server-side scheme and

00:07:25,540 --> 00:07:29,860
that's going to be generated so then I

00:07:27,160 --> 00:07:32,050
upload that schema down here and it send

00:07:29,860 --> 00:07:33,820
it send it to the the database and and

00:07:32,050 --> 00:07:36,400
they're they're gonna generate all the

00:07:33,820 --> 00:07:38,380
mutation and query and all and all that

00:07:36,400 --> 00:07:40,300
for for us so like the entire graph Cal

00:07:38,380 --> 00:07:42,550
schema has been generated just from that

00:07:40,300 --> 00:07:44,080
one single database schema so that kind

00:07:42,550 --> 00:07:46,480
of solves the the double declaration

00:07:44,080 --> 00:07:48,370
problem so you can run that locally as

00:07:46,480 --> 00:07:52,360
well so one of the pain points in

00:07:48,370 --> 00:07:53,980
testing server lists setups is local

00:07:52,360 --> 00:07:57,010
development and that's what nullified

00:07:53,980 --> 00:07:59,700
dev solves for you so here we have a

00:07:57,010 --> 00:08:02,350
Gatsby app we've added that that

00:07:59,700 --> 00:08:04,300
graphical endpoint and this directly

00:08:02,350 --> 00:08:07,060
interacts with the database which also

00:08:04,300 --> 00:08:08,860
is a graphical native API so over here

00:08:07,060 --> 00:08:12,070
we've called it a phonograph Cal dev

00:08:08,860 --> 00:08:14,050
because this was the pre-launch dev and

00:08:12,070 --> 00:08:15,580
we're gonna we're gonna see all that all

00:08:14,050 --> 00:08:17,170
these queries and mutations generated

00:08:15,580 --> 00:08:19,720
just from the schema that we uploaded

00:08:17,170 --> 00:08:21,340
earlier and so that's that's the that's

00:08:19,720 --> 00:08:23,500
the rough demo I I don't have time and

00:08:21,340 --> 00:08:25,450
frankly it's a little bit broken right

00:08:23,500 --> 00:08:28,200
now but but this you're gonna find

00:08:25,450 --> 00:08:31,240
similar things for example with the AWS

00:08:28,200 --> 00:08:32,860
interface the APNIC interface as well

00:08:31,240 --> 00:08:34,719
basically a lot of database companies

00:08:32,860 --> 00:08:35,820
and a lot of other sort of graphical

00:08:34,719 --> 00:08:38,880
native

00:08:35,820 --> 00:08:40,289
API is once to provide you that that

00:08:38,880 --> 00:08:42,630
layer because it's it's self documenting

00:08:40,289 --> 00:08:45,389
and everyone knows how to use it and it

00:08:42,630 --> 00:08:47,209
and it works well with with a graphical

00:08:45,389 --> 00:08:53,220
with someone who understands basketball

00:08:47,209 --> 00:08:55,019
so okay so that was the live demo so so

00:08:53,220 --> 00:08:56,699
a lot of people and then and then they

00:08:55,019 --> 00:08:58,620
go like see like this is server this

00:08:56,699 --> 00:09:00,120
graph you can have it running in front

00:08:58,620 --> 00:09:01,620
end and you can interact with a

00:09:00,120 --> 00:09:03,720
graphical native API you don't you don't

00:09:01,620 --> 00:09:06,089
need a layer in between and maybe that

00:09:03,720 --> 00:09:07,529
is enough for you but that's good for

00:09:06,089 --> 00:09:09,480
demos you can get up and running really

00:09:07,529 --> 00:09:10,889
quickly but a lot of times you don't

00:09:09,480 --> 00:09:12,660
need an intermediate layer to do

00:09:10,889 --> 00:09:14,490
authentication to do business logic and

00:09:12,660 --> 00:09:16,170
to do all sorts of other stuff in

00:09:14,490 --> 00:09:18,449
between so that's why you can't have a

00:09:16,170 --> 00:09:21,510
direct connection with graphical native

00:09:18,449 --> 00:09:23,610
API s and so what do you do then and so

00:09:21,510 --> 00:09:24,750
those are the cons right so there's a

00:09:23,610 --> 00:09:27,089
whole bunch of resolver spam which is

00:09:24,750 --> 00:09:28,380
for every single type there's there's a

00:09:27,089 --> 00:09:30,720
whole bunch of like five or six

00:09:28,380 --> 00:09:33,269
different generated mutations and

00:09:30,720 --> 00:09:36,690
queries in other fields security and off

00:09:33,269 --> 00:09:38,970
is hard to do especially for the more

00:09:36,690 --> 00:09:41,279
destructive actions in credit operation

00:09:38,970 --> 00:09:43,829
as well as vendor specific conventions

00:09:41,279 --> 00:09:47,279
for example fertilising which always

00:09:43,829 --> 00:09:49,410
gets me directives and other things

00:09:47,279 --> 00:09:51,569
basically they want to they want you it

00:09:49,410 --> 00:09:53,490
instead database companies and other

00:09:51,569 --> 00:09:56,339
sort of graphical native API is or

00:09:53,490 --> 00:09:58,380
incentivize you to ask you to put your

00:09:56,339 --> 00:10:02,010
Intel Inside so your business logic

00:09:58,380 --> 00:10:03,389
inside of a graphic a well and that's

00:10:02,010 --> 00:10:04,980
great for them and they can optimize

00:10:03,389 --> 00:10:07,500
things for you but you're always gonna

00:10:04,980 --> 00:10:09,149
be limited in to what you can we can

00:10:07,500 --> 00:10:10,980
express you don't have the full power of

00:10:09,149 --> 00:10:12,949
your programming language and it's

00:10:10,980 --> 00:10:16,470
obviously harder to move off it's

00:10:12,949 --> 00:10:18,240
conveniently beneficial for them well

00:10:16,470 --> 00:10:21,209
it's just fine like you know and if if

00:10:18,240 --> 00:10:23,430
you need that speed and optimization go

00:10:21,209 --> 00:10:26,490
for it but we do need other ways of

00:10:23,430 --> 00:10:28,649
dealing of putting our Intel outside and

00:10:26,490 --> 00:10:32,339
so so serve this graph holds problem is

00:10:28,649 --> 00:10:33,870
that there are a lot of API is there a

00:10:32,339 --> 00:10:35,610
lot of third-party vendors that are

00:10:33,870 --> 00:10:37,949
going to be increasingly offering graph

00:10:35,610 --> 00:10:39,389
kill native api's unfortunately they

00:10:37,949 --> 00:10:42,180
don't solve anything for you they solve

00:10:39,389 --> 00:10:43,800
problems for them the one thing that

00:10:42,180 --> 00:10:44,230
they do solve is to standardization and

00:10:43,800 --> 00:10:45,880
learning

00:10:44,230 --> 00:10:48,579
because now you don't have to learn

00:10:45,880 --> 00:10:52,720
anyone elses API is the aegis look at

00:10:48,579 --> 00:10:53,889
their graphical schema and here's just

00:10:52,720 --> 00:10:55,450
to kind of back up my point here's Lee

00:10:53,889 --> 00:10:56,589
Byron I was speaking at this this

00:10:55,450 --> 00:10:59,680
conference graph eleisha

00:10:56,589 --> 00:11:00,910
and he like when the same day and said

00:10:59,680 --> 00:11:03,070
yeah don't use graph field the query

00:11:00,910 --> 00:11:05,529
databases query arbitrary code that then

00:11:03,070 --> 00:11:07,209
query the databases so we left the

00:11:05,529 --> 00:11:08,980
problem of like okay it's getting easier

00:11:07,209 --> 00:11:11,769
and easier easier to generate graphical

00:11:08,980 --> 00:11:13,839
endpoints for from their party vendors

00:11:11,769 --> 00:11:15,730
and the api's and services and that

00:11:13,839 --> 00:11:18,339
brings us to part two ownership that

00:11:15,730 --> 00:11:22,750
that we we start from I'm from place of

00:11:18,339 --> 00:11:24,760
a of of laziness right like it's so easy

00:11:22,750 --> 00:11:28,690
to get started it's so easy to scaffold

00:11:24,760 --> 00:11:30,730
things and and that's the reason and and

00:11:28,690 --> 00:11:32,260
we you know we're doing less fetches and

00:11:30,730 --> 00:11:35,320
that's the reason that you want to dock

00:11:32,260 --> 00:11:36,970
rothko really I want to move people

00:11:35,320 --> 00:11:40,240
towards more of an ownership mindset and

00:11:36,970 --> 00:11:41,410
and I want to make people aware that you

00:11:40,240 --> 00:11:43,269
know these are the hard points that we

00:11:41,410 --> 00:11:44,709
have to start solving I'm really

00:11:43,269 --> 00:11:46,600
influenced by this talk from one of the

00:11:44,709 --> 00:11:50,019
other creators the co-creators of graph

00:11:46,600 --> 00:11:52,480
girl at graphical Europe mixer I've

00:11:50,019 --> 00:11:54,339
talked about basically how we swing back

00:11:52,480 --> 00:11:57,550
and forth between paradigms right like

00:11:54,339 --> 00:11:58,510
we used to have you know REST API so now

00:11:57,550 --> 00:11:59,860
we're also ninja graphing on graphing

00:11:58,510 --> 00:12:01,420
the new hotness

00:11:59,860 --> 00:12:04,149
where you set model lives and now we're

00:12:01,420 --> 00:12:06,820
all swing into microservices and service

00:12:04,149 --> 00:12:08,649
and that's new hotness and and so I

00:12:06,820 --> 00:12:11,740
always like putting up this this

00:12:08,649 --> 00:12:13,870
hairball graph the left is Netflix and

00:12:11,740 --> 00:12:16,180
the right is Amazon and and really

00:12:13,870 --> 00:12:17,800
viously the implicit assumption is the

00:12:16,180 --> 00:12:19,420
successful companies use micro services

00:12:17,800 --> 00:12:21,040
therefore if you use micro services you

00:12:19,420 --> 00:12:23,260
will be successful and that's not

00:12:21,040 --> 00:12:25,779
necessarily the case right like you have

00:12:23,260 --> 00:12:26,949
you have to pick the the architecture

00:12:25,779 --> 00:12:30,579
that makes sense for your set up in your

00:12:26,949 --> 00:12:32,350
team so so I'm gonna assert that we have

00:12:30,579 --> 00:12:33,220
a little bit we may have a little bit of

00:12:32,350 --> 00:12:37,959
overreaction

00:12:33,220 --> 00:12:41,459
towards the towards choice of graph

00:12:37,959 --> 00:12:43,750
girls single single graph

00:12:41,459 --> 00:12:46,240
single graph paradigm and obviously this

00:12:43,750 --> 00:12:48,160
is directly contradicted by by James

00:12:46,240 --> 00:12:50,500
earlier and we need to talk about that

00:12:48,160 --> 00:12:52,540
so as we swing back and forth between

00:12:50,500 --> 00:12:53,829
between wilder's and micro services we

00:12:52,540 --> 00:12:54,780
might swing back and forth between the

00:12:53,829 --> 00:12:57,180
rest the rest

00:12:54,780 --> 00:12:58,830
in single graphical paradigm and that's

00:12:57,180 --> 00:13:00,780
that's a lot of the times how we're

00:12:58,830 --> 00:13:02,250
contrasting these two right we're just

00:13:00,780 --> 00:13:03,600
presented as a binary choice between a

00:13:02,250 --> 00:13:05,130
whole bunch of rest for endpoints

00:13:03,600 --> 00:13:07,080
that's mess that's messy and it's bad

00:13:05,130 --> 00:13:09,960
put in a graphical layer and all your

00:13:07,080 --> 00:13:10,680
problems will be solved it may not be as

00:13:09,960 --> 00:13:13,230
simple as that

00:13:10,680 --> 00:13:15,840
so so that's the mono life sort of era

00:13:13,230 --> 00:13:18,240
like what are we missing in in terms of

00:13:15,840 --> 00:13:20,460
like what are the benefits of services I

00:13:18,240 --> 00:13:21,600
don't want to like probably a lot of

00:13:20,460 --> 00:13:23,580
people in the room have heard this

00:13:21,600 --> 00:13:24,870
multiple times so I'm just not I'm not

00:13:23,580 --> 00:13:26,700
gonna spend too much time on it

00:13:24,870 --> 00:13:28,470
but one of the benefits I want to

00:13:26,700 --> 00:13:31,380
highlight is that it's it's beneficial

00:13:28,470 --> 00:13:32,880
for incremental adoption and that's very

00:13:31,380 --> 00:13:34,620
useful for people who have existing

00:13:32,880 --> 00:13:36,060
production apps and they just want to

00:13:34,620 --> 00:13:37,920
adopt things incrementally and that's

00:13:36,060 --> 00:13:41,850
the point I want to push today which is

00:13:37,920 --> 00:13:45,480
that you have alright so so this I can

00:13:41,850 --> 00:13:50,420
do a live demo and and over here I have

00:13:45,480 --> 00:13:54,840
a standard create reactor so hmm

00:13:50,420 --> 00:13:56,810
yeah okay so I'm just so I'm gonna run

00:13:54,840 --> 00:13:59,430
it laughs i dev and notify dev appserver

00:13:56,810 --> 00:14:00,810
of any particular project that you're

00:13:59,430 --> 00:14:02,640
running here I'm it's wrapping create

00:14:00,810 --> 00:14:04,170
react app I'll show you a diagram later

00:14:02,640 --> 00:14:06,540
to show you what's wrapping what is

00:14:04,170 --> 00:14:13,290
wrapping and if you click over here it

00:14:06,540 --> 00:14:15,990
is localhost 800 and that's a standard

00:14:13,290 --> 00:14:17,550
create reactor so that's great

00:14:15,990 --> 00:14:21,180
and what we want to do is we want to

00:14:17,550 --> 00:14:24,110
start scaffolding functions a graphical

00:14:21,180 --> 00:14:26,700
endpoints so here I'm gonna run nullify

00:14:24,110 --> 00:14:29,130
functions create and we've built in a

00:14:26,700 --> 00:14:31,470
whole bunch of different templates

00:14:29,130 --> 00:14:34,470
I've a leas that to NFC so I just don't

00:14:31,470 --> 00:14:37,410
like typing things so much and you can

00:14:34,470 --> 00:14:40,200
search for our graphical endpoints here

00:14:37,410 --> 00:14:43,800
so here we've actually built in a whole

00:14:40,200 --> 00:14:45,840
bunch of useful templates for people to

00:14:43,800 --> 00:14:48,360
get started writing service graphical

00:14:45,840 --> 00:14:50,520
endpoints with apollo apollo server

00:14:48,360 --> 00:14:52,980
lambda and and so I'm just gonna right

00:14:50,520 --> 00:14:55,470
I'm just gonna hit this and it basically

00:14:52,980 --> 00:14:58,140
scaffolds up the function for you and it

00:14:55,470 --> 00:15:00,150
installs the no dependencies right and

00:14:58,140 --> 00:15:01,860
and that's and that's all that's all

00:15:00,150 --> 00:15:03,540
that's all there is for now if we have

00:15:01,860 --> 00:15:04,590
further integrations to Apollo in the

00:15:03,540 --> 00:15:05,250
future it's gonna it's going to

00:15:04,590 --> 00:15:08,610
provision

00:15:05,250 --> 00:15:11,250
engine freak for you for example so now

00:15:08,610 --> 00:15:13,560
then I run notified ever again and now

00:15:11,250 --> 00:15:15,300
it's now it's injecting it's injecting

00:15:13,560 --> 00:15:16,920
environment variables which we're not

00:15:15,300 --> 00:15:19,620
talking about but but it's also running

00:15:16,920 --> 00:15:22,410
the the service functions so here I've

00:15:19,620 --> 00:15:26,449
added inside of this endpoint Nilla five

00:15:22,410 --> 00:15:36,110
functions have to kill Apollo got kill

00:15:26,449 --> 00:15:39,120
and sorry I have not cleared my history

00:15:36,110 --> 00:15:40,889
okay but anyway so so it's it's it's got

00:15:39,120 --> 00:15:43,709
it's got a basic hello old schema right

00:15:40,889 --> 00:15:46,529
it's got a basic it's got it's got some

00:15:43,709 --> 00:15:48,120
basic code for you to start adopting and

00:15:46,529 --> 00:15:50,550
wrapping around like you can if you

00:15:48,120 --> 00:15:52,740
wanted to you can you can start to wrap

00:15:50,550 --> 00:15:54,300
your rest endpoints as well so if you

00:15:52,740 --> 00:15:59,430
want to wrap rest endpoints you just

00:15:54,300 --> 00:16:00,959
type in Apollo rest and that's a that's

00:15:59,430 --> 00:16:02,490
a little template for you to take your

00:16:00,959 --> 00:16:05,189
existing rest endpoints and wrap it in a

00:16:02,490 --> 00:16:08,370
graphical endpoint for you and so that's

00:16:05,189 --> 00:16:10,050
down in here and here you hear it's like

00:16:08,370 --> 00:16:12,089
it's fully documented in terms of what

00:16:10,050 --> 00:16:14,790
you can do and how you're supposed to to

00:16:12,089 --> 00:16:17,759
wrap things inside of a and inside of a

00:16:14,790 --> 00:16:20,670
class which is which which rests your

00:16:17,759 --> 00:16:23,250
rest endpoint and so so all of that

00:16:20,670 --> 00:16:25,620
experience is to make that the

00:16:23,250 --> 00:16:28,079
incremental adoption stuff easier and

00:16:25,620 --> 00:16:29,819
I'm gonna extend I'm gonna expand upon

00:16:28,079 --> 00:16:31,350
this in a bit but I just want to show

00:16:29,819 --> 00:16:33,209
you that basically you don't need a

00:16:31,350 --> 00:16:35,370
server to use graphical I don't have a

00:16:33,209 --> 00:16:37,019
running server here I just have serve

00:16:35,370 --> 00:16:38,129
those functions that are deployed for

00:16:37,019 --> 00:16:40,170
example and nullify or anywhere else

00:16:38,129 --> 00:16:41,939
really it doesn't really matter but the

00:16:40,170 --> 00:16:43,410
point is it's it's an incremental thing

00:16:41,939 --> 00:16:45,959
you can add on and then you can you can

00:16:43,410 --> 00:16:47,550
query that and every every incremental

00:16:45,959 --> 00:16:50,879
function that you pour it over from your

00:16:47,550 --> 00:16:52,649
from your existing back in you can you

00:16:50,879 --> 00:16:55,620
can use more and more of that graphical

00:16:52,649 --> 00:16:57,269
endpoints and so so this is this is kind

00:16:55,620 --> 00:16:59,100
of the paradigm and I think is that's

00:16:57,269 --> 00:17:01,500
realistic for most people adopting graph

00:16:59,100 --> 00:17:04,020
here which is you have an existing rest

00:17:01,500 --> 00:17:05,579
set up and then you're you're putting

00:17:04,020 --> 00:17:07,380
more and more over to your graphical

00:17:05,579 --> 00:17:09,720
endpoint as well and then you can start

00:17:07,380 --> 00:17:12,240
adding in Pat and wrapping other api's

00:17:09,720 --> 00:17:13,860
and and packing it in to what is what is

00:17:12,240 --> 00:17:16,490
eventually becoming a graphical gateway

00:17:13,860 --> 00:17:19,990
I did warden I did say that

00:17:16,490 --> 00:17:22,189
my talk is is probably out of date if

00:17:19,990 --> 00:17:26,839
pending pending well what we see from

00:17:22,189 --> 00:17:28,189
Paulo and basically a lot of what wait

00:17:26,839 --> 00:17:29,870
that's kind of this can be described as

00:17:28,189 --> 00:17:31,429
the ultimate use case for back-end for

00:17:29,870 --> 00:17:33,820
front-end right like this you're you're

00:17:31,429 --> 00:17:35,809
developing your own lightweight back in

00:17:33,820 --> 00:17:38,059
increment Li adopting that for your

00:17:35,809 --> 00:17:39,800
front end and in fact it can be entirely

00:17:38,059 --> 00:17:41,900
entirely adopted by the front-end team

00:17:39,800 --> 00:17:45,460
and until such time as the back-end team

00:17:41,900 --> 00:17:48,020
starts to want to own the the graph QL

00:17:45,460 --> 00:17:49,760
services then you then you can just say

00:17:48,020 --> 00:17:51,620
hey I've written the entire schema over

00:17:49,760 --> 00:17:53,179
to you I'm just hand over the schema and

00:17:51,620 --> 00:17:57,500
you can write your own resolvers that

00:17:53,179 --> 00:17:59,290
that are more closer to metal and so we

00:17:57,500 --> 00:18:01,790
we go if we go to this point where

00:17:59,290 --> 00:18:03,200
multiple clients all right their own

00:18:01,790 --> 00:18:05,929
back-end for front-end and the

00:18:03,200 --> 00:18:07,340
interactive with and they own that and

00:18:05,929 --> 00:18:10,100
then the back-end team owns all the

00:18:07,340 --> 00:18:11,929
api's right and obviously that's not

00:18:10,100 --> 00:18:13,550
super ideal because you're obviously

00:18:11,929 --> 00:18:15,830
duplicating a bunch of work but you'll

00:18:13,550 --> 00:18:19,460
be able to move as fast as each

00:18:15,830 --> 00:18:20,929
individual team works and the the

00:18:19,460 --> 00:18:22,429
opportunity is that you really want to

00:18:20,929 --> 00:18:23,870
iterate at the speed of products not at

00:18:22,429 --> 00:18:26,150
the permission of your video various

00:18:23,870 --> 00:18:27,290
teams because it's harder to sell until

00:18:26,150 --> 00:18:29,030
they realized that they're no longer

00:18:27,290 --> 00:18:31,370
getting as many ticket requests for you

00:18:29,030 --> 00:18:33,020
for four new endpoint new one point new

00:18:31,370 --> 00:18:36,080
important oh can you change the limits

00:18:33,020 --> 00:18:38,030
on this blah blah blah right like it's

00:18:36,080 --> 00:18:40,760
it's it's just the the incremental

00:18:38,030 --> 00:18:42,770
adoption story starts with starts from

00:18:40,760 --> 00:18:45,500
wherever you are which is thank you

00:18:42,770 --> 00:18:46,670
which is the the you know for me as is

00:18:45,500 --> 00:18:50,270
from the product engineering side a

00:18:46,670 --> 00:18:53,150
point of view the last and and one more

00:18:50,270 --> 00:18:54,679
point about service is that which which

00:18:53,150 --> 00:18:56,330
I've sort of tacked on at the end it's

00:18:54,679 --> 00:18:58,070
composability which is that functions

00:18:56,330 --> 00:19:00,200
can't call other functions and what can

00:18:58,070 --> 00:19:01,850
you do with that so here we're gonna

00:19:00,200 --> 00:19:05,110
we're going to go back to the last demo

00:19:01,850 --> 00:19:07,340
which is spawning a graphical gateway so

00:19:05,110 --> 00:19:09,200
so I have let's say imagine I have a

00:19:07,340 --> 00:19:12,440
whole bunch of different service

00:19:09,200 --> 00:19:15,830
functions whatever and I want one master

00:19:12,440 --> 00:19:19,100
gateway to control all of them so we can

00:19:15,830 --> 00:19:21,350
also do schema stitching by setting up a

00:19:19,100 --> 00:19:23,270
gateway and we've we're sort of trying

00:19:21,350 --> 00:19:24,890
to iron out that path for people to

00:19:23,270 --> 00:19:26,940
adopt

00:19:24,890 --> 00:19:28,170
graphical main event points as well as

00:19:26,940 --> 00:19:31,680
graphical end points that you're

00:19:28,170 --> 00:19:32,970
starting to write on your own and so

00:19:31,680 --> 00:19:36,330
know if I'd ever again

00:19:32,970 --> 00:19:38,610
and what we've what we've done here is I

00:19:36,330 --> 00:19:40,530
have two end points graph to l1 right

00:19:38,610 --> 00:19:43,080
which which has a whole bunch of authors

00:19:40,530 --> 00:19:46,530
and graph kill 2 which has a whole bunch

00:19:43,080 --> 00:19:48,300
of of books with an author name and so

00:19:46,530 --> 00:19:50,040
now we need to stitch them together a

00:19:48,300 --> 00:19:51,480
lot of a lot of people struggle and

00:19:50,040 --> 00:19:54,120
stumble in terms of like what they're

00:19:51,480 --> 00:19:55,800
what they're going to how they're gonna

00:19:54,120 --> 00:20:00,180
stitch stitch those two schemas together

00:19:55,800 --> 00:20:02,670
and all right actually I should probably

00:20:00,180 --> 00:20:04,800
show you yeah so so basically what this

00:20:02,670 --> 00:20:07,290
what this shows is that this is this is

00:20:04,800 --> 00:20:09,630
one and this is one service endpoint

00:20:07,290 --> 00:20:11,760
it just has authors right that's graphic

00:20:09,630 --> 00:20:23,240
l1 this is the second service employment

00:20:11,760 --> 00:20:23,240
it just has books okay

00:20:23,730 --> 00:20:28,830
I just asked books and the point being

00:20:26,970 --> 00:20:32,370
that you can you can stitch everything

00:20:28,830 --> 00:20:36,419
together in a sort of Voltron master

00:20:32,370 --> 00:20:40,440
gateway type of setup and request all

00:20:36,419 --> 00:20:43,260
request books as well as as as authors

00:20:40,440 --> 00:20:46,860
by delegating that that schema down

00:20:43,260 --> 00:20:48,389
below so again with schema Federation

00:20:46,860 --> 00:20:50,549
you may not need this we may we may

00:20:48,389 --> 00:20:51,630
actually we have we basically have a

00:20:50,549 --> 00:20:53,309
whole bunch of different graphical

00:20:51,630 --> 00:20:56,279
layers right now it's a little bit

00:20:53,309 --> 00:20:57,929
inefficient and I'm sorry and I'm gonna

00:20:56,279 --> 00:20:59,669
get to the point so so basically like

00:20:57,929 --> 00:21:02,100
imagine if your Amazon API Jeff Bezos

00:20:59,669 --> 00:21:06,120
you evolved from selling books to then

00:21:02,100 --> 00:21:07,799
selling whatever the f you want this is

00:21:06,120 --> 00:21:09,990
the natural evolution of different

00:21:07,799 --> 00:21:12,120
domains in domains different products

00:21:09,990 --> 00:21:15,419
different teams you want to take a photo

00:21:12,120 --> 00:21:17,639
of that I just like it there's a there's

00:21:15,419 --> 00:21:19,679
a Photoshop of this but with like fire

00:21:17,639 --> 00:21:24,779
and like five girls behind him it's

00:21:19,679 --> 00:21:29,309
great its wife to okay completely out of

00:21:24,779 --> 00:21:30,630
the point okay so so so yeah different -

00:21:29,309 --> 00:21:32,070
different - different graph 11 points

00:21:30,630 --> 00:21:34,470
and and these are alternative like many

00:21:32,070 --> 00:21:36,179
domains right like mini like I'm not

00:21:34,470 --> 00:21:38,220
saying that you should have like one

00:21:36,179 --> 00:21:39,809
graphic point for everything but where

00:21:38,220 --> 00:21:41,549
it makes sense where these things are

00:21:39,809 --> 00:21:43,440
decoupled enough it makes sense to have

00:21:41,549 --> 00:21:45,870
end points that govern those two and

00:21:43,440 --> 00:21:47,909
then have a gateway in between - to

00:21:45,870 --> 00:21:48,510
stitch them together for the higher

00:21:47,909 --> 00:21:51,360
purpose

00:21:48,510 --> 00:21:54,210
stuff as well as to communicate - Greco

00:21:51,360 --> 00:21:55,590
native end points again these are all

00:21:54,210 --> 00:21:57,059
individual graphic line points and you

00:21:55,590 --> 00:21:59,610
may not need that you mean just need the

00:21:57,059 --> 00:22:02,340
micro services section and then use the

00:21:59,610 --> 00:22:03,899
user schema Federation that that Apollo

00:22:02,340 --> 00:22:05,760
is working on to eventually do that

00:22:03,899 --> 00:22:08,789
right now that's this is this is what we

00:22:05,760 --> 00:22:10,169
have to work with and basically I'm

00:22:08,789 --> 00:22:13,519
trying to call these like mini lifts

00:22:10,169 --> 00:22:16,350
like to basically have the idea of

00:22:13,519 --> 00:22:18,929
principle least power like don't go for

00:22:16,350 --> 00:22:20,309
the big dog if you don't if you don't

00:22:18,929 --> 00:22:22,139
need it if you're just working on AWS

00:22:20,309 --> 00:22:24,059
stuff just go for any of us just working

00:22:22,139 --> 00:22:26,340
on books just go for books and only when

00:22:24,059 --> 00:22:31,649
you need the the conjoin stuff then go

00:22:26,340 --> 00:22:33,389
for the big dog and and so and so

00:22:31,649 --> 00:22:35,039
gateways amulets like kind of makes the

00:22:33,389 --> 00:22:36,240
whole paradigm of restin II and

00:22:35,039 --> 00:22:38,700
graphical in the sense of multiple

00:22:36,240 --> 00:22:41,370
endpoints and and going for the

00:22:38,700 --> 00:22:43,850
principle these power and and it may I'm

00:22:41,370 --> 00:22:46,409
going to start without without

00:22:43,850 --> 00:22:47,760
elaboration but there's it's a simpler

00:22:46,409 --> 00:22:49,769
off model because you can actually have

00:22:47,760 --> 00:22:52,740
more guarantees if you if you have those

00:22:49,769 --> 00:22:56,539
many lives looking at their particular

00:22:52,740 --> 00:22:58,769
sections of the authentication story

00:22:56,539 --> 00:23:00,750
which which is basically the entire

00:22:58,769 --> 00:23:01,919
intel outside story right like you bring

00:23:00,750 --> 00:23:03,450
your piece together all these different

00:23:01,919 --> 00:23:06,870
sections and you have full control

00:23:03,450 --> 00:23:09,960
rather than you know leaving it with the

00:23:06,870 --> 00:23:11,399
greco native vendors and and so it's

00:23:09,960 --> 00:23:14,789
still too hard like a lot of this code

00:23:11,399 --> 00:23:16,139
that we skimmed over is it kind of like

00:23:14,789 --> 00:23:19,200
you want the mental model but the

00:23:16,139 --> 00:23:21,090
extraction is not quite there and and so

00:23:19,200 --> 00:23:22,980
the the mental model is that we want we

00:23:21,090 --> 00:23:24,480
have many lives we we want to do schema

00:23:22,980 --> 00:23:25,740
stitching of different different garden

00:23:24,480 --> 00:23:27,470
points and we don't have we lacked the

00:23:25,740 --> 00:23:30,720
syntax to make it really come together

00:23:27,470 --> 00:23:33,389
so there's still opportunities to write

00:23:30,720 --> 00:23:34,860
the JSX to the schema stitching here's

00:23:33,389 --> 00:23:37,649
all the endpoints here's all the code

00:23:34,860 --> 00:23:39,629
that we that we use to create additional

00:23:37,649 --> 00:23:41,460
schemas together what if they actually

00:23:39,629 --> 00:23:45,299
was more a little bit more declarative

00:23:41,460 --> 00:23:47,460
and actually just focused on exactly the

00:23:45,299 --> 00:23:50,159
the the fields that we needed to stitch

00:23:47,460 --> 00:23:54,440
together we again we may not need that

00:23:50,159 --> 00:23:56,940
if we have stitching on the server-side

00:23:54,440 --> 00:23:59,549
and there's more hard problems I don't

00:23:56,940 --> 00:24:02,850
have time to go forward but I'm happy to

00:23:59,549 --> 00:24:04,529
talk about that at drinks so just just

00:24:02,850 --> 00:24:06,360
to sum things up like there's a lot more

00:24:04,529 --> 00:24:08,399
opportunity if we tackle the hard

00:24:06,360 --> 00:24:10,500
problems don't approach graph here from

00:24:08,399 --> 00:24:12,419
the standpoint of laziness and with

00:24:10,500 --> 00:24:15,269
serve this back y'all you can actually

00:24:12,419 --> 00:24:17,129
have take more ownership and that's it

00:24:15,269 --> 00:24:18,870
you want the slides it's on my site and

00:24:17,129 --> 00:24:26,910
thank you very much

00:24:18,870 --> 00:24:26,910

YouTube URL: https://www.youtube.com/watch?v=rCYOpTQReD4


