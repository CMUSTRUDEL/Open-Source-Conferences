Title: The GraphQL developer experience by Danielle Man, Engineering Manager at Apollo
Publication date: 2019-05-28
Playlist: Apollo Day SF 2019
Description: 
	Apolloâ€™s Engineering Manager, Danielle Man talks about how the shift from legacy APIs to GraphQL can spark joy and productivity in developers. See her walk through a live demo of connecting backend services to UI with a seamless programming model that extends from server to client using Apollo GraphQL and React
Captions: 
	00:00:00,900 --> 00:00:07,229
so my name is Danielle I am a manager at

00:00:04,980 --> 00:00:10,530
Apollo and I manage the team that builds

00:00:07,229 --> 00:00:12,750
our platform our Apollo product so if

00:00:10,530 --> 00:00:15,210
you've used Apollo engine if you've used

00:00:12,750 --> 00:00:17,430
our schema change validation workflow if

00:00:15,210 --> 00:00:19,620
you've used our operation safe listing

00:00:17,430 --> 00:00:22,830
tools and those are all tools that my

00:00:19,620 --> 00:00:24,240
team builds and manages today we're

00:00:22,830 --> 00:00:26,820
gonna be talking about the graphical

00:00:24,240 --> 00:00:29,010
developer experience so one of our main

00:00:26,820 --> 00:00:31,350
goals at Apollo is to make sure that

00:00:29,010 --> 00:00:33,809
every one of you here in this room and

00:00:31,350 --> 00:00:36,140
every one in the world in our community

00:00:33,809 --> 00:00:38,999
who isn't here in San Francisco today is

00:00:36,140 --> 00:00:41,969
productive and successful using graph QL

00:00:38,999 --> 00:00:44,070
it's something that we care a lot about

00:00:41,969 --> 00:00:45,300
as a dev tools company it's something

00:00:44,070 --> 00:00:47,550
that I suspect you all care about

00:00:45,300 --> 00:00:51,749
because you came out today to talk about

00:00:47,550 --> 00:00:53,819
Graff keel with us when people ask what

00:00:51,749 --> 00:00:57,030
is graph QL how do you typically

00:00:53,819 --> 00:00:59,909
describe that graph QL is a way to

00:00:57,030 --> 00:01:02,999
communicate between a query and an API

00:00:59,909 --> 00:01:05,190
so an API it doesn't just have to be a

00:01:02,999 --> 00:01:07,230
graphical schema a graphical endpoint it

00:01:05,190 --> 00:01:09,240
can be anything that returns data in the

00:01:07,230 --> 00:01:11,550
shape that the query needs it to it can

00:01:09,240 --> 00:01:13,430
even be a cache for example which you'll

00:01:11,550 --> 00:01:15,660
see later in the talk and a demo

00:01:13,430 --> 00:01:18,270
typically when we describe graphical we

00:01:15,660 --> 00:01:20,160
say oh well you write a graphical query

00:01:18,270 --> 00:01:22,740
you describe exactly the fields that you

00:01:20,160 --> 00:01:24,210
want and your endpoint your server gives

00:01:22,740 --> 00:01:28,890
you back exactly the data that you

00:01:24,210 --> 00:01:30,210
requested this talk today is not going

00:01:28,890 --> 00:01:31,980
to be a typical graphic you all talk

00:01:30,210 --> 00:01:34,980
because what I want to show you is that

00:01:31,980 --> 00:01:36,960
the value of graph QL is actually not

00:01:34,980 --> 00:01:42,930
only in all of these technical things

00:01:36,960 --> 00:01:46,020
that we usually talk about graph QL is

00:01:42,930 --> 00:01:48,480
not about smaller payloads it's not

00:01:46,020 --> 00:01:50,450
about fewer client-to-server round trips

00:01:48,480 --> 00:01:53,340
it's not about preventing over fetching

00:01:50,450 --> 00:01:56,670
yes these are all fantastic technical

00:01:53,340 --> 00:01:59,460
benefits of graph QL but if you want to

00:01:56,670 --> 00:02:01,740
adopt graph QL in your organization it's

00:01:59,460 --> 00:02:03,480
gonna take work it's actually like an

00:02:01,740 --> 00:02:05,070
architectural change it's something you

00:02:03,480 --> 00:02:07,320
really have to dedicate yourselves to

00:02:05,070 --> 00:02:09,239
and when people usually make that case

00:02:07,320 --> 00:02:11,249
at their company they make it based on

00:02:09,239 --> 00:02:13,260
the technical improvements they say oh

00:02:11,249 --> 00:02:14,500
well our app is going to have really

00:02:13,260 --> 00:02:16,180
increased performance

00:02:14,500 --> 00:02:18,640
and we're gonna have all these things

00:02:16,180 --> 00:02:20,860
but I think and we think it Apollo that

00:02:18,640 --> 00:02:23,230
the value of graph QL is not only in

00:02:20,860 --> 00:02:25,570
these technical benefits it's actually

00:02:23,230 --> 00:02:27,850
in the productivity boost that you as

00:02:25,570 --> 00:02:30,160
developers will get by by using graphic

00:02:27,850 --> 00:02:33,910
quality organization at all levels of

00:02:30,160 --> 00:02:36,490
the stack the excellent developer

00:02:33,910 --> 00:02:39,280
experience is really where graphical

00:02:36,490 --> 00:02:43,390
shines it's kind of the honest and the

00:02:39,280 --> 00:02:45,160
very undervalued value of graph QL so

00:02:43,390 --> 00:02:46,660
what's the most important thing to any

00:02:45,160 --> 00:02:50,440
company what's the most important thing

00:02:46,660 --> 00:02:56,950
to your guyses companies people yeah

00:02:50,440 --> 00:02:58,600
what else time the customer I mean the

00:02:56,950 --> 00:03:08,290
most important thing to any company is

00:02:58,600 --> 00:03:11,340
the customer you guys come on and how

00:03:08,290 --> 00:03:14,380
much time do you actually spend building

00:03:11,340 --> 00:03:17,530
for your customer in your development at

00:03:14,380 --> 00:03:18,910
your company it's probably not that it's

00:03:17,530 --> 00:03:20,709
probably not as much as you would hope

00:03:18,910 --> 00:03:23,650
not as much as you would even guess a

00:03:20,709 --> 00:03:26,049
lot of our time is spent doing tech debt

00:03:23,650 --> 00:03:28,269
reduction it's spending refactoring and

00:03:26,049 --> 00:03:30,850
spent in meetings and there's a lot of

00:03:28,269 --> 00:03:32,830
reasons for this one of them being that

00:03:30,850 --> 00:03:34,989
there are aspects of development that

00:03:32,830 --> 00:03:36,519
are just plain difficult and we all kind

00:03:34,989 --> 00:03:38,709
of acknowledge that and just cope with

00:03:36,519 --> 00:03:40,299
that but if you have a better developer

00:03:38,709 --> 00:03:42,549
experience you're actually going to end

00:03:40,299 --> 00:03:44,230
up shipping products faster and not only

00:03:42,549 --> 00:03:46,329
are you gonna ship products faster but

00:03:44,230 --> 00:03:48,820
you're gonna be able to recruit and

00:03:46,329 --> 00:03:50,530
retain better engineers your engineer's

00:03:48,820 --> 00:03:52,329
will be more happy in their jobs and

00:03:50,530 --> 00:03:54,280
through all of that you're gonna end up

00:03:52,329 --> 00:03:58,060
building a much better experience and a

00:03:54,280 --> 00:04:00,010
much better product for your customer so

00:03:58,060 --> 00:04:04,600
what does a good developer experience

00:04:00,010 --> 00:04:06,700
look like great developer experience

00:04:04,600 --> 00:04:08,920
should spark joy it should really make

00:04:06,700 --> 00:04:10,209
your job fun you should enjoy you should

00:04:08,920 --> 00:04:12,730
enjoy getting to write the code that

00:04:10,209 --> 00:04:15,130
you're writing and we care about and we

00:04:12,730 --> 00:04:16,989
think about developer experience all the

00:04:15,130 --> 00:04:19,359
time at Apollo we talk about it all the

00:04:16,989 --> 00:04:22,539
time so my coworker Peggy who follows

00:04:19,359 --> 00:04:24,729
Peggy on Twitter it's a lot of a lot of

00:04:22,539 --> 00:04:26,289
you guys my coworkers Peggy she's sweet

00:04:24,729 --> 00:04:28,060
at this out about a month ago she said

00:04:26,289 --> 00:04:30,790
what does great developer experience

00:04:28,060 --> 00:04:32,500
look like to you and we got about 100

00:04:30,790 --> 00:04:35,169
responses so we kind of looked through

00:04:32,500 --> 00:04:37,330
them and we categorized all of those

00:04:35,169 --> 00:04:39,730
responses from developers in the world

00:04:37,330 --> 00:04:41,889
into kind of three categories so good

00:04:39,730 --> 00:04:44,380
developer experience it's predictable

00:04:41,889 --> 00:04:45,370
and intuitive its unobtrusive it gets

00:04:44,380 --> 00:04:46,840
out of your way

00:04:45,370 --> 00:04:49,090
and it gives you an instant feedback

00:04:46,840 --> 00:04:51,010
loop and so when we were thinking what

00:04:49,090 --> 00:04:53,889
are some really good examples of tools

00:04:51,010 --> 00:04:55,570
that do this well for predictable and

00:04:53,889 --> 00:04:58,870
intuitive react game designs

00:04:55,570 --> 00:05:00,220
I mean react is not that old reactives

00:04:58,870 --> 00:05:02,740
only about five years old

00:05:00,220 --> 00:05:04,750
remember the first time you built a

00:05:02,740 --> 00:05:09,820
react component what did we have before

00:05:04,750 --> 00:05:11,770
we act we had Django we had a PHP we had

00:05:09,820 --> 00:05:14,530
angular a lot of us were just using

00:05:11,770 --> 00:05:16,300
jQuery so the first time I built a react

00:05:14,530 --> 00:05:17,919
component and I realized that my front

00:05:16,300 --> 00:05:19,810
end components could be stateful and

00:05:17,919 --> 00:05:22,600
every time I clicked a button I didn't

00:05:19,810 --> 00:05:25,630
have to set the inner HTML of a div to

00:05:22,600 --> 00:05:27,220
an empty string like in 15 lines that

00:05:25,630 --> 00:05:28,750
was a really big moment react has

00:05:27,220 --> 00:05:30,990
completely changed the landscape of

00:05:28,750 --> 00:05:35,200
front-end development for us

00:05:30,990 --> 00:05:37,090
how about prettier he's is prettier yeah

00:05:35,200 --> 00:05:38,740
it's most of you guys Peggy is actually

00:05:37,090 --> 00:05:40,750
the one that got me hooked on prettier I

00:05:38,740 --> 00:05:43,720
didn't quite understand the value until

00:05:40,750 --> 00:05:46,060
she got me using it and I can't even

00:05:43,720 --> 00:05:47,950
begin to state how much time using

00:05:46,060 --> 00:05:50,080
prettier has saved me in my development

00:05:47,950 --> 00:05:52,030
I mean I just don't think about spacing

00:05:50,080 --> 00:05:53,740
anymore I don't think about indentation

00:05:52,030 --> 00:05:56,740
I don't think about linting or

00:05:53,740 --> 00:05:58,300
formatting it's not even a concern that

00:05:56,740 --> 00:06:02,200
bothered me and until I put together

00:05:58,300 --> 00:06:04,180
this slide how about a yes code geass

00:06:02,200 --> 00:06:06,789
code has a fantastic integration with

00:06:04,180 --> 00:06:08,680
typescript and so as developers now if

00:06:06,789 --> 00:06:10,930
you're using typescript and vs code as a

00:06:08,680 --> 00:06:13,270
JavaScript developer we can finally get

00:06:10,930 --> 00:06:14,830
type safety in our IDE which is

00:06:13,270 --> 00:06:16,780
something that other developers have

00:06:14,830 --> 00:06:20,530
been laughing at us about for like ten

00:06:16,780 --> 00:06:23,200
years and what's the reason that we love

00:06:20,530 --> 00:06:25,590
these tools on this slide so much it's

00:06:23,200 --> 00:06:28,180
because they solve real problems for us

00:06:25,590 --> 00:06:30,729
and what's one of the biggest problems

00:06:28,180 --> 00:06:35,169
that we still have today as front-end

00:06:30,729 --> 00:06:37,510
developers we write a lot a lot of data

00:06:35,169 --> 00:06:40,810
fetching code today does fetching and

00:06:37,510 --> 00:06:41,620
react it's not really something that

00:06:40,810 --> 00:06:43,630
reacts to

00:06:41,620 --> 00:06:45,070
in a strong opinion on and so there are

00:06:43,630 --> 00:06:47,199
a lot of different ways that people have

00:06:45,070 --> 00:06:49,449
done this in react and there aren't a

00:06:47,199 --> 00:06:51,100
lot of recommendations and as a result

00:06:49,449 --> 00:06:54,370
people have kind of built a bunch of

00:06:51,100 --> 00:06:55,780
spaghetti this is a tweet from Adam at

00:06:54,370 --> 00:06:58,479
Airbnb who we actually work pretty

00:06:55,780 --> 00:07:00,729
closely with he said two million lines

00:06:58,479 --> 00:07:03,850
of there two million lines of JavaScript

00:07:00,729 --> 00:07:06,880
only 10 to 15% of that is actual

00:07:03,850 --> 00:07:09,010
business logic and a complex interaction

00:07:06,880 --> 00:07:11,590
the rest is just styles and data

00:07:09,010 --> 00:07:14,080
fetching I mean that's completely

00:07:11,590 --> 00:07:16,150
bonkers that means that almost 90% of

00:07:14,080 --> 00:07:20,229
the development that they're doing at

00:07:16,150 --> 00:07:22,539
Airbnb is not like valuing it us the

00:07:20,229 --> 00:07:26,590
Airbnb customers unless you guys really

00:07:22,539 --> 00:07:30,760
like their Styles which I do so what's

00:07:26,590 --> 00:07:32,919
the answer to this mess around data and

00:07:30,760 --> 00:07:34,720
how we manage it the answer is that you

00:07:32,919 --> 00:07:36,340
need a dedicated front-end data layer

00:07:34,720 --> 00:07:40,060
and you need to treat it well you need

00:07:36,340 --> 00:07:41,949
to think about it in that way you need

00:07:40,060 --> 00:07:45,280
to be able to answer these questions of

00:07:41,949 --> 00:07:46,840
what is the data in my API without a

00:07:45,280 --> 00:07:49,870
dedicated front-end data layer I mean

00:07:46,840 --> 00:07:51,820
what are what are our options I bet a

00:07:49,870 --> 00:07:53,889
lot of us have used grass cue already

00:07:51,820 --> 00:07:55,570
that's why you're here so we know the

00:07:53,889 --> 00:07:57,970
really nice experience of graphical or

00:07:55,570 --> 00:07:59,440
graphical playgrounds but whenever I

00:07:57,970 --> 00:08:01,570
need to figure out how to get data from

00:07:59,440 --> 00:08:04,210
a rest endpoint I ends up in my terminal

00:08:01,570 --> 00:08:05,919
trying to write a curl commands fiddling

00:08:04,210 --> 00:08:07,750
with my headers a lot and when I finally

00:08:05,919 --> 00:08:10,750
get that right I copy it back into my

00:08:07,750 --> 00:08:12,430
code it takes many many many steps and I

00:08:10,750 --> 00:08:15,460
have to do that for every single query

00:08:12,430 --> 00:08:17,830
it's just so much time or how about if

00:08:15,460 --> 00:08:19,330
you want to track the loading States and

00:08:17,830 --> 00:08:20,740
the errors and your front-end and you

00:08:19,330 --> 00:08:22,510
want to bring that back to the user

00:08:20,740 --> 00:08:24,460
or how about if you want to actually

00:08:22,510 --> 00:08:27,280
manage State on your client and be able

00:08:24,460 --> 00:08:30,039
to persist data when your page reloads

00:08:27,280 --> 00:08:31,539
and things like that when people build

00:08:30,039 --> 00:08:33,969
an application that's big enough to

00:08:31,539 --> 00:08:36,159
actually need persistence need caching

00:08:33,969 --> 00:08:40,510
and care about these things and react

00:08:36,159 --> 00:08:42,070
our typical answer is like oh well I

00:08:40,510 --> 00:08:43,779
need a cache now I finally got to that

00:08:42,070 --> 00:08:47,620
point I'll just throw everything into

00:08:43,779 --> 00:08:50,290
redux but Redux at its core it's an

00:08:47,620 --> 00:08:51,820
event emitter and it's a it's an elegant

00:08:50,290 --> 00:08:53,000
programming model but it's actually a

00:08:51,820 --> 00:08:55,519
very small amount of

00:08:53,000 --> 00:08:57,740
and so to turn it into a cash you end up

00:08:55,519 --> 00:08:59,810
layering a bunch of packages you ended

00:08:57,740 --> 00:09:03,829
up using a bunch of custom middleware it

00:08:59,810 --> 00:09:06,019
takes a lot of code in the end and so

00:09:03,829 --> 00:09:08,360
for a lot of reasons I think that the

00:09:06,019 --> 00:09:10,279
next frontier of innovation for

00:09:08,360 --> 00:09:11,899
development on the front end an

00:09:10,279 --> 00:09:14,930
especially react is gonna be around

00:09:11,899 --> 00:09:17,959
building this data layer react itself

00:09:14,930 --> 00:09:22,459
has really transformed the landscape of

00:09:17,959 --> 00:09:24,529
how we build front ends in the short

00:09:22,459 --> 00:09:26,480
five years that it's been around as kind

00:09:24,529 --> 00:09:29,930
of core open source that we can all use

00:09:26,480 --> 00:09:32,779
its itself made dramatic improvements to

00:09:29,930 --> 00:09:35,959
its own programming model and I don't

00:09:32,779 --> 00:09:37,399
know who here has used react hooks tried

00:09:35,959 --> 00:09:39,980
out the new hooks API yeah they they

00:09:37,399 --> 00:09:41,959
recently released that I mean even react

00:09:39,980 --> 00:09:44,029
hooks is a massive improvement on the

00:09:41,959 --> 00:09:46,100
the programming model of state

00:09:44,029 --> 00:09:47,689
management so if we can optimize our

00:09:46,100 --> 00:09:49,930
data layer can we improve our developer

00:09:47,689 --> 00:09:53,540
experience this is kind of the question

00:09:49,930 --> 00:09:55,519
that I come back to and this is what I

00:09:53,540 --> 00:09:57,800
want to show you guys today so for the

00:09:55,519 --> 00:09:59,930
rest of the talk we're going to be

00:09:57,800 --> 00:10:02,319
writing some code together the premise

00:09:59,930 --> 00:10:05,240
of this demo is I went over to the Redux

00:10:02,319 --> 00:10:06,829
main website and I look through their

00:10:05,240 --> 00:10:08,990
examples and there's actually an example

00:10:06,829 --> 00:10:11,089
in there that uses the github API so I

00:10:08,990 --> 00:10:12,680
thought oh it's perfect like Redux

00:10:11,089 --> 00:10:15,050
example on the github API github is

00:10:12,680 --> 00:10:17,629
across ql api so what we're gonna do

00:10:15,050 --> 00:10:19,579
today is we're gonna build the graphical

00:10:17,629 --> 00:10:22,550
version of this redux example app called

00:10:19,579 --> 00:10:24,199
real world and i need to set up my

00:10:22,550 --> 00:10:26,470
computer for the demo let's give me one

00:10:24,199 --> 00:10:26,470
sec

00:10:34,580 --> 00:10:40,460
all right can you all this big enough

00:10:38,070 --> 00:10:44,520
can you say that in the back thumbs it

00:10:40,460 --> 00:10:47,070
sweets okay this is our redux app so

00:10:44,520 --> 00:10:50,340
it's pretty simple we've got an input

00:10:47,070 --> 00:10:53,280
box and if I type in my github username

00:10:50,340 --> 00:10:54,990
here and click go it's gonna load my

00:10:53,280 --> 00:10:58,440
profile so it'll give me my github

00:10:54,990 --> 00:11:00,540
avatar picture my full name from the

00:10:58,440 --> 00:11:03,060
github API because all I gave it was my

00:11:00,540 --> 00:11:07,560
user name and then it gives me this nice

00:11:03,060 --> 00:11:09,630
list of my start repositories so what

00:11:07,560 --> 00:11:14,340
does it take to actually build this user

00:11:09,630 --> 00:11:16,200
page in redux you can see here that the

00:11:14,340 --> 00:11:18,150
props to this component well first off

00:11:16,200 --> 00:11:20,940
we've got our login prop which gives us

00:11:18,150 --> 00:11:24,000
our user name but then we also have the

00:11:20,940 --> 00:11:26,130
user object and then we also have the

00:11:24,000 --> 00:11:27,990
function to load the user object and the

00:11:26,130 --> 00:11:29,550
function to request the loading of the

00:11:27,990 --> 00:11:31,200
starred repositories and then the

00:11:29,550 --> 00:11:33,090
starred repositories themselves and some

00:11:31,200 --> 00:11:34,860
loading states have you guys seen

00:11:33,090 --> 00:11:38,340
components like this before written your

00:11:34,860 --> 00:11:40,920
own components like this before not only

00:11:38,340 --> 00:11:43,800
are there a lot of props being passed to

00:11:40,920 --> 00:11:45,510
this seemingly simple page but at the

00:11:43,800 --> 00:11:48,180
bottom of this page we have this really

00:11:45,510 --> 00:11:50,070
nice and very large map states - props

00:11:48,180 --> 00:11:53,730
function which is just the way you do

00:11:50,070 --> 00:11:55,560
things in redux and in addition to that

00:11:53,730 --> 00:11:57,750
to actually fetch all that data we had

00:11:55,560 --> 00:11:59,910
to create a bunch of actions we had to

00:11:57,750 --> 00:12:01,650
create a bunch of reducers and Redux and

00:11:59,910 --> 00:12:03,810
we even had to create a bunch of custom

00:12:01,650 --> 00:12:06,120
API middleware so this is our action

00:12:03,810 --> 00:12:08,100
spell it's nice and long we've got all

00:12:06,120 --> 00:12:09,360
these actions triggered on like I was

00:12:08,100 --> 00:12:10,770
successfully able to load the

00:12:09,360 --> 00:12:14,100
repositories I fail to load the

00:12:10,770 --> 00:12:17,250
repositories the list goes on and on so

00:12:14,100 --> 00:12:18,810
for our demo what does this look like if

00:12:17,250 --> 00:12:21,990
we want to build this using graphic UL

00:12:18,810 --> 00:12:24,900
and using apollo so i've started on a

00:12:21,990 --> 00:12:27,180
page for us here same component user

00:12:24,900 --> 00:12:30,740
page component we've got an input box

00:12:27,180 --> 00:12:33,090
over here if I type my github user name

00:12:30,740 --> 00:12:37,860
it's gonna return John Snow the true

00:12:33,090 --> 00:12:40,020
king because it's not actually loading

00:12:37,860 --> 00:12:42,060
data from the github API yet so all I've

00:12:40,020 --> 00:12:44,130
got in this file I've got my graph he'll

00:12:42,060 --> 00:12:45,960
query which can be run against the

00:12:44,130 --> 00:12:48,720
github endpoints to get back my name

00:12:45,960 --> 00:12:50,370
my login and then I've got my react

00:12:48,720 --> 00:12:51,420
components so what we need to do is we

00:12:50,370 --> 00:12:54,270
need to connect these two things

00:12:51,420 --> 00:12:56,130
together the first thing that's stuck

00:12:54,270 --> 00:12:58,860
out to me or that sticks out to me when

00:12:56,130 --> 00:13:02,910
I look at this is that this this is all

00:12:58,860 --> 00:13:05,220
green it's all a string that's not super

00:13:02,910 --> 00:13:06,780
useful and not super safe so the first

00:13:05,220 --> 00:13:12,360
thing we're gonna do is we're gonna go

00:13:06,780 --> 00:13:15,060
over and install the Apollo extension so

00:13:12,360 --> 00:13:18,060
now if I go back to my user page we have

00:13:15,060 --> 00:13:20,310
syntax highlighting it's super nice and

00:13:18,060 --> 00:13:21,960
not only do we have syntax highlighting

00:13:20,310 --> 00:13:25,740
but I I set this up to be an Apollo

00:13:21,960 --> 00:13:28,830
project so the s code is actually aware

00:13:25,740 --> 00:13:30,540
of my schema and as a result if I

00:13:28,830 --> 00:13:33,630
highlight over any one of these things

00:13:30,540 --> 00:13:39,590
in my query you're going to see type

00:13:33,630 --> 00:13:42,600
deaths directly from my schema so query

00:13:39,590 --> 00:13:46,080
the type has a user field and it returns

00:13:42,600 --> 00:13:48,210
a user object user the type has a login

00:13:46,080 --> 00:13:50,610
field and it returns a non nullable

00:13:48,210 --> 00:13:54,150
string and user also has a name field

00:13:50,610 --> 00:13:59,040
and it returns a nillable string and not

00:13:54,150 --> 00:14:01,230
only that but uh if I type command space

00:13:59,040 --> 00:14:02,670
I'm gonna get autocomplete for all of

00:14:01,230 --> 00:14:05,640
the rest of the fields on that on that

00:14:02,670 --> 00:14:09,120
object in my schema so the only other

00:14:05,640 --> 00:14:10,800
field I need is Avatar URL which things

00:14:09,120 --> 00:14:13,020
to the off of it is right there at the

00:14:10,800 --> 00:14:15,120
top okay so now I have all the fields

00:14:13,020 --> 00:14:17,510
that I need on my query to get the data

00:14:15,120 --> 00:14:21,500
to replace John Snow with my picture

00:14:17,510 --> 00:14:24,660
what should I do next

00:14:21,500 --> 00:14:27,030
I'm going to hook up my query to my

00:14:24,660 --> 00:14:28,950
component and to do that I'm going to

00:14:27,030 --> 00:14:30,780
show you guys something that I'm super

00:14:28,950 --> 00:14:34,800
excited about which is the used query

00:14:30,780 --> 00:14:40,740
react took that we just dropped last

00:14:34,800 --> 00:14:43,820
week at a Paulo de New York Apollo

00:14:40,740 --> 00:14:43,820
[Music]

00:14:46,300 --> 00:14:53,420
what did I do wrong import not Const

00:14:50,680 --> 00:14:58,370
there we go alright so now I've got my

00:14:53,420 --> 00:15:02,680
used query hook and over here if I call

00:14:58,370 --> 00:15:06,260
my used query hook with my user query

00:15:02,680 --> 00:15:10,540
with my user query query and I give it

00:15:06,260 --> 00:15:14,030
the variable option of my login username

00:15:10,540 --> 00:15:17,000
from that function I will be able to get

00:15:14,030 --> 00:15:25,370
a data object and a loading flag that's

00:15:17,000 --> 00:15:27,410
what it's going to return so now if I

00:15:25,370 --> 00:15:29,540
were to hit save I still haven't hooked

00:15:27,410 --> 00:15:31,820
up data into my component yet but data

00:15:29,540 --> 00:15:35,570
would actually be hydrating from that

00:15:31,820 --> 00:15:38,000
query directly from the graph QL API so

00:15:35,570 --> 00:15:42,350
if the page is loading if the data is

00:15:38,000 --> 00:15:46,820
not there yet let's return a a loading

00:15:42,350 --> 00:15:49,160
indicator but if it's not loading and

00:15:46,820 --> 00:15:56,660
floating is true then we should be able

00:15:49,160 --> 00:16:04,790
to get data user dot name data user dot

00:15:56,660 --> 00:16:12,650
log in and data user avatar URL directly

00:16:04,790 --> 00:16:15,250
from our query so I hit save odo classic

00:16:12,650 --> 00:16:15,250
what did I do wrong

00:16:15,850 --> 00:16:20,950
cannot read property user of undefined

00:16:25,020 --> 00:16:34,180
yes thank you so much thank you to the

00:16:30,940 --> 00:16:36,760
person in the back demos are very

00:16:34,180 --> 00:16:39,850
intimidating someone knows how to use

00:16:36,760 --> 00:16:40,660
react to the follow okay so I've got

00:16:39,850 --> 00:16:43,300
data

00:16:40,660 --> 00:16:44,770
I've got user now you can see this is

00:16:43,300 --> 00:16:46,600
hooked up directly from the github API

00:16:44,770 --> 00:16:49,540
so that's good to go so that's step one

00:16:46,600 --> 00:16:51,490
I got all my query stuff hooked up

00:16:49,540 --> 00:16:53,770
step two is I actually want type safety

00:16:51,490 --> 00:16:58,000
and so I want to be able to make sure

00:16:53,770 --> 00:16:59,830
that the typescript integration with es

00:16:58,000 --> 00:17:03,370
code can actually help me catch errors

00:16:59,830 --> 00:17:05,650
that I might be making on my schema so

00:17:03,370 --> 00:17:07,689
first off I want to show you guys Apollo

00:17:05,650 --> 00:17:09,429
code gen so have a process of Paulo

00:17:07,689 --> 00:17:11,500
Cochin running here in the background

00:17:09,429 --> 00:17:13,569
and what it's going to be doing is its

00:17:11,500 --> 00:17:16,360
generating typescript types directly

00:17:13,569 --> 00:17:18,720
from my graph QL query so these are

00:17:16,360 --> 00:17:21,910
typescript definitions that I generated

00:17:18,720 --> 00:17:24,160
just by this cogent process watching for

00:17:21,910 --> 00:17:26,770
graphical query changes so if I add

00:17:24,160 --> 00:17:29,620
something here like if I open my menu up

00:17:26,770 --> 00:17:32,650
again whoops and I add bio and then I

00:17:29,620 --> 00:17:35,490
hit command save you'll see bio just

00:17:32,650 --> 00:17:38,470
pipe popped up here in my type desc

00:17:35,490 --> 00:17:40,660
but I don't need bio so I'll take that

00:17:38,470 --> 00:17:42,670
back out it'll go away but what I do

00:17:40,660 --> 00:17:46,350
want to do is I want to use these type

00:17:42,670 --> 00:17:53,220
def to get safety on my query over there

00:17:46,350 --> 00:17:58,960
so I'm going to import query results

00:17:53,220 --> 00:18:05,170
from at Apollo react common and I'm

00:17:58,960 --> 00:18:10,210
going to import my Apollo types from the

00:18:05,170 --> 00:18:11,830
generated file and then what I'm going

00:18:10,210 --> 00:18:13,480
to do is I'm going to cast this response

00:18:11,830 --> 00:18:16,830
that I get from user query to those

00:18:13,480 --> 00:18:16,830
types so I get the safety

00:18:19,570 --> 00:18:24,970
and now I don't know if you guys notice

00:18:23,169 --> 00:18:27,940
but I have red squigglies down here

00:18:24,970 --> 00:18:29,529
because I'm doing something unsafe and I

00:18:27,940 --> 00:18:31,330
say if I hit come in and save I'll

00:18:29,529 --> 00:18:32,590
actually get a compilation area from

00:18:31,330 --> 00:18:35,169
typescript saying hey you're doing

00:18:32,590 --> 00:18:40,509
something unsafe and what I'm doing

00:18:35,169 --> 00:18:42,460
that's unsafe is I'm using this user

00:18:40,509 --> 00:18:44,889
property on the data object without

00:18:42,460 --> 00:18:47,830
checking that it's safe to do that

00:18:44,889 --> 00:18:48,580
because user is actually a knowable

00:18:47,830 --> 00:18:51,309
property

00:18:48,580 --> 00:18:53,080
it's a knowable field in my schema so

00:18:51,309 --> 00:18:55,299
it's not safe to access things in this

00:18:53,080 --> 00:19:04,269
way I need to actually add a no ability

00:18:55,299 --> 00:19:11,019
check so if there's no data user will

00:19:04,269 --> 00:19:13,989
just return not found one and if I save

00:19:11,019 --> 00:19:14,830
this we've added I know a little a check

00:19:13,989 --> 00:19:17,409
it'll go away

00:19:14,830 --> 00:19:19,330
so without typescript I mean I probably

00:19:17,409 --> 00:19:21,940
would have made this mistake as a coder

00:19:19,330 --> 00:19:23,769
and if we had ships that and we hadn't

00:19:21,940 --> 00:19:26,259
added this no ability check then we

00:19:23,769 --> 00:19:29,619
would have had real users in production

00:19:26,259 --> 00:19:32,009
running into that error so that is

00:19:29,619 --> 00:19:35,320
Apollo and your schema using typescript

00:19:32,009 --> 00:19:37,179
the last thing I want to show you all is

00:19:35,320 --> 00:19:40,929
probably one of the most cool things

00:19:37,179 --> 00:19:43,090
about using Apollo on your client

00:19:40,929 --> 00:19:45,340
because you can actually extend your

00:19:43,090 --> 00:19:48,220
graphical schema from your remote

00:19:45,340 --> 00:19:50,169
endpoint with more schema definitions on

00:19:48,220 --> 00:19:52,299
your client and there are a lot of great

00:19:50,169 --> 00:19:55,659
use cases for this one of them is that

00:19:52,299 --> 00:19:57,700
you can manage local state so instead of

00:19:55,659 --> 00:19:59,109
needing to have just a few random fields

00:19:57,700 --> 00:20:01,599
and Redux because you want to store

00:19:59,109 --> 00:20:02,979
something across message sessions and

00:20:01,599 --> 00:20:04,840
your browser's local storage you can

00:20:02,979 --> 00:20:06,899
actually add that to a graphic you'll

00:20:04,840 --> 00:20:09,399
have schema and query it through Apollo

00:20:06,899 --> 00:20:11,470
but in addition to that my favorite use

00:20:09,399 --> 00:20:12,070
case for client-side feels is actually

00:20:11,470 --> 00:20:14,739
mocking

00:20:12,070 --> 00:20:16,869
so I've been in scenarios many times as

00:20:14,739 --> 00:20:18,669
a developer where we decide we want to

00:20:16,869 --> 00:20:20,559
build a new component we design the

00:20:18,669 --> 00:20:24,190
schema for that component I've even done

00:20:20,559 --> 00:20:26,320
this with people in this room and once

00:20:24,190 --> 00:20:27,849
you defines your schema you think you're

00:20:26,320 --> 00:20:29,379
good to go but you need to actually go

00:20:27,849 --> 00:20:31,820
build your component now and the schema

00:20:29,379 --> 00:20:34,130
doesn't exist so how do I actually MA

00:20:31,820 --> 00:20:37,220
that data there are a lot of great tools

00:20:34,130 --> 00:20:39,470
for mocking data on the server side but

00:20:37,220 --> 00:20:40,970
because I can extend my schema on the

00:20:39,470 --> 00:20:42,560
client side as well I'm actually fully

00:20:40,970 --> 00:20:46,760
in control of being able to mock my own

00:20:42,560 --> 00:20:50,390
endpoint so to show you guys this I want

00:20:46,760 --> 00:20:56,090
to add a feel on the user type called is

00:20:50,390 --> 00:20:57,740
true King history King obviously doesn't

00:20:56,090 --> 00:21:00,050
exist on our schema so that's why vs

00:20:57,740 --> 00:21:02,420
code is telling me a thread but what I'm

00:21:00,050 --> 00:21:04,820
gonna do is I'm gonna hop over here to

00:21:02,420 --> 00:21:07,010
where I've got my Apollo client instance

00:21:04,820 --> 00:21:09,490
and I'm going to define some client-side

00:21:07,010 --> 00:21:09,490
schema

00:21:15,340 --> 00:21:21,970
so let's uh let's extend the type user

00:21:18,360 --> 00:21:24,759
with an is true King field and it will

00:21:21,970 --> 00:21:26,649
return a boolean now that I have this if

00:21:24,759 --> 00:21:30,039
I hit command save and I go back to user

00:21:26,649 --> 00:21:31,749
page well my squiggly is gone because

00:21:30,039 --> 00:21:33,580
now it does exist in my schema and it's

00:21:31,749 --> 00:21:35,169
valid the only problem is I haven't

00:21:33,580 --> 00:21:37,570
written any function so it's not gonna

00:21:35,169 --> 00:21:38,710
know how to resolve so the next thing

00:21:37,570 --> 00:21:43,539
I'm going to do is I'm going to define a

00:21:38,710 --> 00:21:46,870
client side resolver and I'm gonna make

00:21:43,539 --> 00:21:50,080
this on the user type and we all know

00:21:46,870 --> 00:21:55,029
that uh every time a Targaryen is born a

00:21:50,080 --> 00:21:58,570
coin is flipped so there's going to be a

00:21:55,029 --> 00:22:02,379
50% chance that any given user is the

00:21:58,570 --> 00:22:05,950
true king and now that I have my

00:22:02,379 --> 00:22:12,909
client-side resolvers I will simply add

00:22:05,950 --> 00:22:15,220
resolvers see my client so now I can

00:22:12,909 --> 00:22:18,490
query for this field through my query

00:22:15,220 --> 00:22:21,039
and I will get a result back so I've

00:22:18,490 --> 00:22:24,580
already added as true king to my to my

00:22:21,039 --> 00:22:27,940
query if I get it off my data object and

00:22:24,580 --> 00:22:31,289
I put it onto my onto my user do you

00:22:27,940 --> 00:22:31,289
guys think I'm gonna be the true king

00:22:34,200 --> 00:22:44,980
thank you I am not the true king I've

00:22:40,899 --> 00:22:46,450
also got a type gender but if I save it

00:22:44,980 --> 00:22:47,919
it'll go away all right I'm not the true

00:22:46,450 --> 00:22:52,899
king but I think I can keep reloading

00:22:47,919 --> 00:22:56,259
this page to Leia and the true king all

00:22:52,899 --> 00:22:58,450
right that's client-side state so I

00:22:56,259 --> 00:23:00,190
finally want to leave you guys with a

00:22:58,450 --> 00:23:09,659
thought I'll go back to mirroring my

00:23:00,190 --> 00:23:09,659
screen oh I've lost my slides

00:23:11,630 --> 00:23:15,230
sorry give me one minute

00:23:33,130 --> 00:23:44,659
technology it's supposed to be easy and

00:23:35,630 --> 00:23:48,860
sometimes it's still hard all right here

00:23:44,659 --> 00:23:51,200
we go okay well actually yeah

00:23:48,860 --> 00:23:53,270
so all that code that we wrote that was

00:23:51,200 --> 00:23:56,570
just a small part of the Redux app but I

00:23:53,270 --> 00:23:58,610
actually mocked out I built an entire

00:23:56,570 --> 00:24:01,340
clone of that Redux at using Apollo I

00:23:58,610 --> 00:24:03,710
built the rest of the components and it

00:24:01,340 --> 00:24:05,809
turns out that if you use graph QL and

00:24:03,710 --> 00:24:07,490
if you use Apollo in that way not only

00:24:05,809 --> 00:24:10,039
do you end up with 12 files instead of

00:24:07,490 --> 00:24:12,770
16 in your source folder but you end up

00:24:10,039 --> 00:24:17,210
with about 250 lines of code and instead

00:24:12,770 --> 00:24:20,240
of 700 so it's about 35% of the size and

00:24:17,210 --> 00:24:23,120
that's including the generated type

00:24:20,240 --> 00:24:26,659
deaths which is large because it's

00:24:23,120 --> 00:24:29,630
generated code so I want to leave you

00:24:26,659 --> 00:24:32,090
all with this thought our data layer is

00:24:29,630 --> 00:24:34,669
only going to get smarter over time and

00:24:32,090 --> 00:24:36,799
we're only going to be continuing to

00:24:34,669 --> 00:24:39,200
make certain aspects of this programming

00:24:36,799 --> 00:24:41,299
model easier what I've just shown you is

00:24:39,200 --> 00:24:43,490
just scratching the surface it's just

00:24:41,299 --> 00:24:45,140
the tip of the iceberg building features

00:24:43,490 --> 00:24:47,120
that your companies it should be as

00:24:45,140 --> 00:24:50,270
simple as just writing queries because

00:24:47,120 --> 00:24:54,470
that's how we think about it and that's

00:24:50,270 --> 00:24:55,909
what we deserve as developers so if you

00:24:54,470 --> 00:24:58,490
guys have any questions on this you can

00:24:55,909 --> 00:25:00,500
come find me after but next up I'm

00:24:58,490 --> 00:25:03,140
actually super excited to introduce you

00:25:00,500 --> 00:25:05,690
to my colleague James who is going to be

00:25:03,140 --> 00:25:07,330
showing you all graphic UL Federation

00:25:05,690 --> 00:25:10,480
which is really really cool

00:25:07,330 --> 00:25:10,480
thank you

00:25:11,450 --> 00:25:13,510

YouTube URL: https://www.youtube.com/watch?v=zwv1c_1ceY8


