Title: Fireside discussion with Matt DeBergalis, Shane at Expedia Group and Andrew at SurveyMonkey
Publication date: 2019-05-28
Playlist: Apollo Day SF 2019
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:04,340
I wanted to spend just a few minutes

00:00:04,549 --> 00:00:11,120
with a discussion but really go to

00:00:07,350 --> 00:00:14,940
questions and if anyone has questions

00:00:11,120 --> 00:00:16,440
for for Andrew for Shane myself think

00:00:14,940 --> 00:00:18,869
about that for a couple minutes while we

00:00:16,440 --> 00:00:22,260
talk maybe the thing we can start with

00:00:18,869 --> 00:00:24,869
though is these sounded both like really

00:00:22,260 --> 00:00:26,609
positive experiences I know there's

00:00:24,869 --> 00:00:27,470
always an other another half to that

00:00:26,609 --> 00:00:31,650
story

00:00:27,470 --> 00:00:34,820
what I'm curious about maybe is where

00:00:31,650 --> 00:00:39,930
the either technical friction was

00:00:34,820 --> 00:00:43,200
particularly early on or who else in the

00:00:39,930 --> 00:00:44,940
organization you had to persuade to go

00:00:43,200 --> 00:00:46,590
down this path and how you did that

00:00:44,940 --> 00:00:49,230
because I think what's on the back of a

00:00:46,590 --> 00:00:51,239
lot of people's minds is this is this is

00:00:49,230 --> 00:00:54,000
your core API and and you're really

00:00:51,239 --> 00:00:55,559
taking a big shift maybe there's an

00:00:54,000 --> 00:00:57,690
incremental way to do it technically but

00:00:55,559 --> 00:01:00,120
still we're talking about a big change

00:00:57,690 --> 00:01:03,120
in in how applications talk to stuff and

00:01:00,120 --> 00:01:04,439
and that never comes without you know in

00:01:03,120 --> 00:01:08,159
my experience some thoughtful questions

00:01:04,439 --> 00:01:10,020
so Andrew Shane any thoughts on just

00:01:08,159 --> 00:01:13,710
what that was like and how you persuaded

00:01:10,020 --> 00:01:17,009
the team to go down this path yeah sure

00:01:13,710 --> 00:01:19,439
goes first so like I said we kind of

00:01:17,009 --> 00:01:22,170
started off this process doing hotels

00:01:19,439 --> 00:01:24,390
migration like as mentioned we want to

00:01:22,170 --> 00:01:26,970
do incremental but one of the problems

00:01:24,390 --> 00:01:28,890
we kind of noticed early on was that we

00:01:26,970 --> 00:01:30,720
didn't make some bad decisions with

00:01:28,890 --> 00:01:32,700
their schema some of the things I

00:01:30,720 --> 00:01:34,560
brought up about like what a good schema

00:01:32,700 --> 00:01:36,780
looks like we didn't follow those words

00:01:34,560 --> 00:01:38,909
from the start and we're paying that for

00:01:36,780 --> 00:01:41,090
that price now especially in our mobile

00:01:38,909 --> 00:01:44,520
apps because mobile apps ship a binary

00:01:41,090 --> 00:01:46,409
so with the app version I was 17.2 of

00:01:44,520 --> 00:01:48,930
your mobile app it's put out to the Play

00:01:46,409 --> 00:01:50,340
Store that's out there forever there

00:01:48,930 --> 00:01:52,649
might be people who don't update their

00:01:50,340 --> 00:01:54,450
apps there's just version maybe you're

00:01:52,649 --> 00:01:56,130
on an older version of the operating

00:01:54,450 --> 00:01:58,829
system and you can't update to the new

00:01:56,130 --> 00:02:00,630
version so we need to support these bad

00:01:58,829 --> 00:02:03,030
bad schema designs

00:02:00,630 --> 00:02:06,360
now essentially until the life of that

00:02:03,030 --> 00:02:08,489
app that we chose despo support so for

00:02:06,360 --> 00:02:10,709
us really making these core decisions

00:02:08,489 --> 00:02:12,740
and kind of establish establish this

00:02:10,709 --> 00:02:14,390
process at the schema review has been

00:02:12,740 --> 00:02:17,420
a check for us to kind of like catch

00:02:14,390 --> 00:02:19,370
these things early on before teams to do

00:02:17,420 --> 00:02:21,410
too much work and they start working and

00:02:19,370 --> 00:02:22,700
we can go to make sure they we coach

00:02:21,410 --> 00:02:26,030
them through the process and start

00:02:22,700 --> 00:02:27,560
teaching everyone yeah I mean actually

00:02:26,030 --> 00:02:28,520
when I was listening to your talk the

00:02:27,560 --> 00:02:31,130
key part I found really interesting

00:02:28,520 --> 00:02:32,900
sorry I'm not good all kids buy but like

00:02:31,130 --> 00:02:34,640
I find a really interesting is that when

00:02:32,900 --> 00:02:36,800
you brought in people who don't know

00:02:34,640 --> 00:02:38,690
anything about the domain and had them

00:02:36,800 --> 00:02:41,450
review the schema because when you know

00:02:38,690 --> 00:02:43,970
the domain you're you're very likely to

00:02:41,450 --> 00:02:44,810
you know you you know how it works and

00:02:43,970 --> 00:02:46,430
you might not be thinking about the

00:02:44,810 --> 00:02:48,470
client who often isn't gonna know who

00:02:46,430 --> 00:02:50,330
works especially for a public API that's

00:02:48,470 --> 00:02:51,590
something I think we should really bring

00:02:50,330 --> 00:02:52,940
back to Survey Monkey as soon as they're

00:02:51,590 --> 00:02:54,560
either like like we should or sort of

00:02:52,940 --> 00:02:57,560
heard that I was like we I'd love to

00:02:54,560 --> 00:02:58,490
bring that back to Survey Monkey because

00:02:57,560 --> 00:03:00,260
I feel like there's a lot of value there

00:02:58,490 --> 00:03:02,690
we also had a lot of problem with schema

00:03:00,260 --> 00:03:06,170
design especially since like a lot of

00:03:02,690 --> 00:03:08,390
our schema is we have a few obviously

00:03:06,170 --> 00:03:10,940
very important like the survey and the

00:03:08,390 --> 00:03:13,460
user are two very important schemas for

00:03:10,940 --> 00:03:16,970
us but we didn't get those team's

00:03:13,460 --> 00:03:20,330
resources to help us earlier so we had

00:03:16,970 --> 00:03:21,500
you know a different team be the primary

00:03:20,330 --> 00:03:25,670
driver of writing those because they

00:03:21,500 --> 00:03:27,380
needed them for their pages so we ran

00:03:25,670 --> 00:03:28,760
into also problems there where we didn't

00:03:27,380 --> 00:03:31,790
have exactly the perfect schema in some

00:03:28,760 --> 00:03:33,800
case we were able to go back and correct

00:03:31,790 --> 00:03:35,330
it but in other cases we're probably

00:03:33,800 --> 00:03:36,470
gonna take us quite a bit longer so the

00:03:35,330 --> 00:03:40,100
schema design was definitely a big thing

00:03:36,470 --> 00:03:42,410
for us there's a thought that clicks for

00:03:40,100 --> 00:03:43,790
me we usually see the web teams go first

00:03:42,410 --> 00:03:45,350
and I've always thought of that mostly

00:03:43,790 --> 00:03:50,300
in terms of yeah there's this common

00:03:45,350 --> 00:03:51,770
heritage with you know JavaScript and

00:03:50,300 --> 00:03:53,960
JavaScript yes this other thing just

00:03:51,770 --> 00:03:56,090
pops out though the web is a safer place

00:03:53,960 --> 00:03:58,100
to explore the first couple iterations

00:03:56,090 --> 00:04:01,610
of this because you can ship a new

00:03:58,100 --> 00:04:04,460
client and it's not too hard to move

00:04:01,610 --> 00:04:06,800
this schema from from one shape to

00:04:04,460 --> 00:04:08,240
another yeah once you go mobile the

00:04:06,800 --> 00:04:12,380
stakes are a little higher yeah yeah

00:04:08,240 --> 00:04:14,600
yeah it's yeah so I definitely agree for

00:04:12,380 --> 00:04:17,120
us reason why we kind of went mobile

00:04:14,600 --> 00:04:18,580
first was that the mobile app was

00:04:17,120 --> 00:04:20,540
actually using an API that was

00:04:18,580 --> 00:04:21,950
completely unsupported there was

00:04:20,540 --> 00:04:22,700
absolutely no one working on it there's

00:04:21,950 --> 00:04:26,900
been no check

00:04:22,700 --> 00:04:28,610
for over a year to this API so what that

00:04:26,900 --> 00:04:30,200
was our really core is to get them on to

00:04:28,610 --> 00:04:32,390
the API is that the web app so we're

00:04:30,200 --> 00:04:34,940
using and rather than just using the BFF

00:04:32,390 --> 00:04:36,020
model we said well let's maybe see if we

00:04:34,940 --> 00:04:37,880
can do this graph Google and like

00:04:36,020 --> 00:04:40,100
standardize both the BFF and the mobile

00:04:37,880 --> 00:04:42,800
app on the same API so we did start

00:04:40,100 --> 00:04:44,450
incremental with reviews that was like

00:04:42,800 --> 00:04:47,120
our first things like let's just do the

00:04:44,450 --> 00:04:49,580
hotel reviews but you know just these

00:04:47,120 --> 00:04:51,590
individual little decisions sometimes we

00:04:49,580 --> 00:04:53,900
named a field something that we wish

00:04:51,590 --> 00:04:55,550
we'd done differently it I definitely

00:04:53,900 --> 00:04:57,020
agree that if you want to maybe start

00:04:55,550 --> 00:04:58,580
off with graph you'll maybe start with

00:04:57,020 --> 00:05:02,720
the web platform first so you can ship

00:04:58,580 --> 00:05:05,870
Hale updates and how about questions in

00:05:02,720 --> 00:05:08,570
just a second how about addressing

00:05:05,870 --> 00:05:10,310
skeptics or working with other parts of

00:05:08,570 --> 00:05:13,280
the org well what was that like and what

00:05:10,310 --> 00:05:15,830
did you have to overcome so we were

00:05:13,280 --> 00:05:18,350
pretty lucky in the sense that our CTO

00:05:15,830 --> 00:05:20,420
is super supportive from the start

00:05:18,350 --> 00:05:22,370
there was probably some teams are a bit

00:05:20,420 --> 00:05:24,770
more skeptical but it's really helpful

00:05:22,370 --> 00:05:29,240
when you're CTO is on the side of it but

00:05:24,770 --> 00:05:31,340
I think for us we graph QL was always

00:05:29,240 --> 00:05:33,230
really really important part of what we

00:05:31,340 --> 00:05:34,820
did we kind of also a little bit snuck

00:05:33,230 --> 00:05:36,620
it in and the fact that we need to

00:05:34,820 --> 00:05:39,830
really fix our front-end we had a lot of

00:05:36,620 --> 00:05:41,330
front-end problems and so we got this

00:05:39,830 --> 00:05:42,410
whole backing and resourcing over the

00:05:41,330 --> 00:05:44,900
front-end and part of our front-end

00:05:42,410 --> 00:05:47,060
problems was API problems and if you

00:05:44,900 --> 00:05:48,440
have proxy problems and so we kind of

00:05:47,060 --> 00:05:51,320
brought graphic you all into that and we

00:05:48,440 --> 00:05:53,300
kind of packaged it together and one of

00:05:51,320 --> 00:05:55,370
the I guess big drivers a big driver

00:05:53,300 --> 00:05:56,600
that I remember is that like I don't

00:05:55,370 --> 00:06:02,120
know if you guys remember I know about

00:05:56,600 --> 00:06:05,320
GTR but but one of our things we had a

00:06:02,120 --> 00:06:07,790
date and we had to get a banner that's

00:06:05,320 --> 00:06:09,890
that you know that cookie banner that's

00:06:07,790 --> 00:06:11,330
required by GT PR and actually took a

00:06:09,890 --> 00:06:13,670
surprising a long time because we had

00:06:11,330 --> 00:06:15,620
like micro webs in the sense that we had

00:06:13,670 --> 00:06:17,480
a bunch of separate deployable webs and

00:06:15,620 --> 00:06:18,440
they were on different versions they

00:06:17,480 --> 00:06:21,860
don't know they were some people

00:06:18,440 --> 00:06:24,110
overrode their top level like base pages

00:06:21,860 --> 00:06:25,700
and so like that kind of drove us to be

00:06:24,110 --> 00:06:27,320
like hey why is this taking so long

00:06:25,700 --> 00:06:29,360
and so we're like okay well we also have

00:06:27,320 --> 00:06:31,790
a huge API problem in the front-end we

00:06:29,360 --> 00:06:32,900
kind of drove those together so I feel

00:06:31,790 --> 00:06:36,500
like that's an interesting to me is like

00:06:32,900 --> 00:06:37,700
what got what drove you to actually

00:06:36,500 --> 00:06:40,580
a lot of problems simple what drove us

00:06:37,700 --> 00:06:42,620
to actually get the funding for it and I

00:06:40,580 --> 00:06:44,210
feel like for us we funded it with our

00:06:42,620 --> 00:06:45,500
front-end and like we had API problems

00:06:44,210 --> 00:06:47,810
we also have funding problems and we put

00:06:45,500 --> 00:06:51,410
it together was this much easier to

00:06:47,810 --> 00:06:54,740
solve problem yeah for us I'm bigger so

00:06:51,410 --> 00:06:56,720
we couldn't just sell to the CTO quite a

00:06:54,740 --> 00:07:00,410
ways up my paycheck later

00:06:56,720 --> 00:07:02,390
so for us we kind of started off with

00:07:00,410 --> 00:07:05,720
this core concept right we wanted to

00:07:02,390 --> 00:07:07,580
unify the design that was our base model

00:07:05,720 --> 00:07:10,520
and then from that we could just we

00:07:07,580 --> 00:07:12,710
built all these concepts we kind of sold

00:07:10,520 --> 00:07:14,360
them to different teams as we said hey

00:07:12,710 --> 00:07:16,460
what if we did this what if we did this

00:07:14,360 --> 00:07:18,440
what what would this look like and then

00:07:16,460 --> 00:07:21,919
we went to graph kill summit last year

00:07:18,440 --> 00:07:23,750
in 2018 and we saw the tooling that they

00:07:21,919 --> 00:07:25,340
were using for Apollo engine and that

00:07:23,750 --> 00:07:28,010
was just like the clicking moment for us

00:07:25,340 --> 00:07:30,710
because we had all these lists of items

00:07:28,010 --> 00:07:31,880
that we had on our backlog if I go okay

00:07:30,710 --> 00:07:33,650
we're gonna get a client registry

00:07:31,880 --> 00:07:35,540
because we want to know the version of

00:07:33,650 --> 00:07:37,760
clients were doing and we saw all these

00:07:35,540 --> 00:07:40,370
tools and it was another visual way for

00:07:37,760 --> 00:07:42,560
us to kind of sell to higher management

00:07:40,370 --> 00:07:44,270
to say hey this is what it could look

00:07:42,560 --> 00:07:47,210
like if we get on board a fully

00:07:44,270 --> 00:07:49,460
graphical platform and not only that but

00:07:47,210 --> 00:07:51,320
we now have this tech strategy that

00:07:49,460 --> 00:07:54,830
we're still applying across the company

00:07:51,320 --> 00:07:57,350
which is the tech strategy of doing a

00:07:54,830 --> 00:07:59,060
single design system single API and

00:07:57,350 --> 00:08:01,310
single tooling for building both the

00:07:59,060 --> 00:08:04,070
design system and the API and so we're

00:08:01,310 --> 00:08:06,110
just one part of this global tech

00:08:04,070 --> 00:08:08,210
strategy now for the company this

00:08:06,110 --> 00:08:10,340
specific part for data being graphic you

00:08:08,210 --> 00:08:12,620
all so it took us a little bit and

00:08:10,340 --> 00:08:15,410
Apollo definitely helped us kind of sell

00:08:12,620 --> 00:08:16,729
to our management but once you can kind

00:08:15,410 --> 00:08:18,650
of see the whole picture of what a

00:08:16,729 --> 00:08:20,570
client looks like when you have all this

00:08:18,650 --> 00:08:22,310
tooling it's they're just right there

00:08:20,570 --> 00:08:23,830
immediately on board and went with us

00:08:22,310 --> 00:08:26,210
for doing it across the company

00:08:23,830 --> 00:08:29,330
yeah something I'm hoping we can build

00:08:26,210 --> 00:08:31,400
soon is if you're a developer you've

00:08:29,330 --> 00:08:34,880
used graphical or graphical playground

00:08:31,400 --> 00:08:36,880
and it's just like magical right that's

00:08:34,880 --> 00:08:39,020
not a tool that you can really give

00:08:36,880 --> 00:08:41,089
leadership though right it's like

00:08:39,020 --> 00:08:42,819
putting in a pastry off header into this

00:08:41,089 --> 00:08:47,779
thing

00:08:42,819 --> 00:08:49,100
localhost what : like so I I think when

00:08:47,779 --> 00:08:51,079
we can get to the point and the trick is

00:08:49,100 --> 00:08:52,459
wiring in off but if we can get to the

00:08:51,079 --> 00:08:54,920
point where there's a browser for the

00:08:52,459 --> 00:08:57,559
data and we can show people who aren't

00:08:54,920 --> 00:08:59,600
maybe part of engineering look it's a I

00:08:57,559 --> 00:09:01,189
can explore this and you know here's

00:08:59,600 --> 00:09:01,639
so-and-so or here's such and such hotel

00:09:01,189 --> 00:09:03,649
or whatnot

00:09:01,639 --> 00:09:06,920
my wife thinking is that helps go a long

00:09:03,649 --> 00:09:09,379
way too yeah yeah I think if you're also

00:09:06,920 --> 00:09:10,819
in a micro service architecture we had a

00:09:09,379 --> 00:09:12,199
least a particular problem of like

00:09:10,819 --> 00:09:14,269
separating our front-end for the Brack

00:09:12,199 --> 00:09:15,709
end like it was there kind of business

00:09:14,269 --> 00:09:17,839
logic was have been mixed up and we

00:09:15,709 --> 00:09:20,089
wanted to we want to also spend time we

00:09:17,839 --> 00:09:21,079
architecting our back-end and our api's

00:09:20,089 --> 00:09:23,269
and we want to be able to do that

00:09:21,079 --> 00:09:24,860
without breaking all the client so that

00:09:23,269 --> 00:09:26,209
was a really big selling point when we

00:09:24,860 --> 00:09:28,249
were like hey we're gonna have this like

00:09:26,209 --> 00:09:31,459
separation point where you guys can redo

00:09:28,249 --> 00:09:32,749
your api's and we can just swap to them

00:09:31,459 --> 00:09:34,399
and have the same schema and the clients

00:09:32,749 --> 00:09:39,019
won't break so that was something that

00:09:34,399 --> 00:09:42,679
definitely sold well for us how early

00:09:39,019 --> 00:09:46,309
did you bring in the service owners how

00:09:42,679 --> 00:09:49,059
where were they of any of this work I

00:09:46,309 --> 00:09:50,959
mean pretty early for the service owners

00:09:49,059 --> 00:09:52,970
we talked to them right away we're

00:09:50,959 --> 00:09:57,049
showing them how what our plan was

00:09:52,970 --> 00:09:59,299
but like I said earlier we in terms of

00:09:57,049 --> 00:10:01,459
resourcing they were aware but they can

00:09:59,299 --> 00:10:03,199
contribute as much for an RPR civil case

00:10:01,459 --> 00:10:06,079
we had service owners from the wrong

00:10:03,199 --> 00:10:07,910
domains helping and they were doing a

00:10:06,079 --> 00:10:10,009
lot of their own parts too but

00:10:07,910 --> 00:10:12,980
definitely having them involved as early

00:10:10,009 --> 00:10:14,420
as possible would be really cute like I

00:10:12,980 --> 00:10:17,629
said it's the domain knowledge and

00:10:14,420 --> 00:10:19,369
graphical knowledge together is really

00:10:17,629 --> 00:10:20,569
key and that's hard when you're first

00:10:19,369 --> 00:10:21,980
arting because you don't have a lot of

00:10:20,569 --> 00:10:24,649
people with graph QL knowledge in your

00:10:21,980 --> 00:10:30,169
company so you're really need to stretch

00:10:24,649 --> 00:10:32,149
those resources last thing for me both

00:10:30,169 --> 00:10:34,790
of you talked about I think if it is

00:10:32,149 --> 00:10:36,949
like a data graph administrator schema

00:10:34,790 --> 00:10:40,939
manager there's this practice emerging

00:10:36,949 --> 00:10:42,980
of a team that is responsible for the

00:10:40,939 --> 00:10:44,540
overall picture and the wave and so on

00:10:42,980 --> 00:10:46,639
I'm curious what your thoughts are on

00:10:44,540 --> 00:10:48,559
how that grows over time or what that

00:10:46,639 --> 00:10:52,400
role might look like in the org if you

00:10:48,559 --> 00:10:57,260
fast forward a year or two in terms of

00:10:52,400 --> 00:10:59,930
the the data graph yeah so for us our

00:10:57,260 --> 00:11:01,070
schema managers are yeah part of our job

00:10:59,930 --> 00:11:03,110
is doing these scheming reviews but

00:11:01,070 --> 00:11:05,360
really most of my days actually just

00:11:03,110 --> 00:11:08,960
help building these tooling tools for

00:11:05,360 --> 00:11:11,240
our developers so I want to automate

00:11:08,960 --> 00:11:12,590
this tooling process for everyone to

00:11:11,240 --> 00:11:15,260
make sure that they do build the best

00:11:12,590 --> 00:11:17,390
schema so I think the future forward of

00:11:15,260 --> 00:11:20,420
a schema manager is all in the tooling

00:11:17,390 --> 00:11:21,110
you use and for us definitely apollo has

00:11:20,420 --> 00:11:22,910
been great

00:11:21,110 --> 00:11:25,370
using their command-line tools for like

00:11:22,910 --> 00:11:27,080
checks and like that but just having our

00:11:25,370 --> 00:11:29,000
own internal tooling so that we can hook

00:11:27,080 --> 00:11:32,000
up with like Expedia Group specific

00:11:29,000 --> 00:11:33,680
tooling just kind of mish mashing those

00:11:32,000 --> 00:11:36,490
together is I think the way forward for

00:11:33,680 --> 00:11:39,380
our team and my my work in that area

00:11:36,490 --> 00:11:40,850
yeah I think we're about the same thing

00:11:39,380 --> 00:11:43,010
that we have asked you imagine team it's

00:11:40,850 --> 00:11:44,600
much smaller or graph calcium's lower

00:11:43,010 --> 00:11:46,940
scale right now so part of our web

00:11:44,600 --> 00:11:48,860
platform team has two or three of our

00:11:46,940 --> 00:11:50,420
engineers that focus on schema managers

00:11:48,860 --> 00:11:53,210
they kind of line up what you guys do

00:11:50,420 --> 00:11:54,740
but I think I see ourselves as if we get

00:11:53,210 --> 00:11:57,040
to that scale if you get that scale to

00:11:54,740 --> 00:12:00,320
follow kind of the stuff I saw in chains

00:11:57,040 --> 00:12:03,920
talk on having tsukina schema managers

00:12:00,320 --> 00:12:05,540
and building tools around that so I see

00:12:03,920 --> 00:12:07,250
him like maybe out to step right ahead

00:12:05,540 --> 00:12:08,840
of us we're maybe two steps ahead of us

00:12:07,250 --> 00:12:10,640
at this point but that's kind of where I

00:12:08,840 --> 00:12:13,310
see us moving in terms of like

00:12:10,640 --> 00:12:15,470
federating our schema and getting those

00:12:13,310 --> 00:12:17,240
cue managers there yeah one of the big

00:12:15,470 --> 00:12:19,970
things on our backlog necks is actually

00:12:17,240 --> 00:12:22,430
doing a schema winter so we want to have

00:12:19,970 --> 00:12:24,470
we just have that a simple rule like any

00:12:22,430 --> 00:12:25,730
boolean shouldn't have the name is in

00:12:24,470 --> 00:12:27,230
front of it I know that might be an

00:12:25,730 --> 00:12:29,150
anti-pattern for some people here but

00:12:27,230 --> 00:12:30,320
for us we don't want that right you can

00:12:29,150 --> 00:12:32,270
apply any rule you want to if we

00:12:30,320 --> 00:12:34,340
actually want to like look at the

00:12:32,270 --> 00:12:35,870
boolean and say it shouldn't have is

00:12:34,340 --> 00:12:38,390
this and that's something that should be

00:12:35,870 --> 00:12:39,920
automation automate the process I think

00:12:38,390 --> 00:12:45,610
is schema winter is the next big thing

00:12:39,920 --> 00:12:45,610
for us cool questions

00:12:48,820 --> 00:12:53,840
alright sounds like both of y'all are or

00:12:51,560 --> 00:12:55,850
all of y'all are on the schema first

00:12:53,840 --> 00:12:56,870
workflow that sort of stuff I'm curious

00:12:55,850 --> 00:12:59,090
in practice

00:12:56,870 --> 00:13:01,640
does this look what this is look like at

00:12:59,090 --> 00:13:03,410
your team for example are your clients

00:13:01,640 --> 00:13:07,580
at engineers the ones building the

00:13:03,410 --> 00:13:09,380
resolvers is there and is that strange

00:13:07,580 --> 00:13:15,500
or is that you know weird for your

00:13:09,380 --> 00:13:17,870
organization yeah so right now it is for

00:13:15,500 --> 00:13:20,450
our front-end team is kind of leading

00:13:17,870 --> 00:13:23,240
the graph QL charge like I said earlier

00:13:20,450 --> 00:13:24,800
we're bundling our front-end and the

00:13:23,240 --> 00:13:28,130
graph fell into like a similar project

00:13:24,800 --> 00:13:30,020
so we are seeing a lot of times having

00:13:28,130 --> 00:13:33,530
our friend engineers do a lot of the

00:13:30,020 --> 00:13:36,770
resolvers as well as the schema and yes

00:13:33,530 --> 00:13:38,690
it's probably I wouldn't say an

00:13:36,770 --> 00:13:40,490
anti-pattern but like it you do usually

00:13:38,690 --> 00:13:41,570
have you know you're back in Judah doing

00:13:40,490 --> 00:13:44,020
the REST API but your friend is doing

00:13:41,570 --> 00:13:46,340
the schema and they're not really

00:13:44,020 --> 00:13:48,440
necessarily always communicating it

00:13:46,340 --> 00:13:49,790
starting to get better now we're more

00:13:48,440 --> 00:13:52,700
teams are on board and they're talking

00:13:49,790 --> 00:13:54,680
to each other but I do think having just

00:13:52,700 --> 00:13:56,270
the client by himself or fronting and

00:13:54,680 --> 00:13:59,180
just the backend by themself be

00:13:56,270 --> 00:14:01,220
completely separate is gonna end up

00:13:59,180 --> 00:14:02,480
getting us to a place where things are

00:14:01,220 --> 00:14:03,920
not gonna we're not gonna be going

00:14:02,480 --> 00:14:06,590
through the same vision so I feel like

00:14:03,920 --> 00:14:08,900
communication is always key but we are

00:14:06,590 --> 00:14:10,940
going skiing client first right now and

00:14:08,900 --> 00:14:13,850
it's been working out pretty well but we

00:14:10,940 --> 00:14:16,610
haven't gone to a scale I think where we

00:14:13,850 --> 00:14:19,340
it's really hit us but I do think that

00:14:16,610 --> 00:14:23,120
working collaboratively is is a good

00:14:19,340 --> 00:14:25,160
approach yeah so for us it's I'd say

00:14:23,120 --> 00:14:27,200
it's almost the offices so we we

00:14:25,160 --> 00:14:29,090
actually do really have the clients like

00:14:27,200 --> 00:14:31,910
create the schema so with graph you oh

00:14:29,090 --> 00:14:33,860
we can now have a language a contract

00:14:31,910 --> 00:14:36,830
between the client teams and the API

00:14:33,860 --> 00:14:39,590
teams so they the client teams actually

00:14:36,830 --> 00:14:42,110
do write a mock graph QL schema they say

00:14:39,590 --> 00:14:43,670
if I were to have a schema given to me

00:14:42,110 --> 00:14:47,090
this is what I want it to look like and

00:14:43,670 --> 00:14:48,620
then they can give that to the server

00:14:47,090 --> 00:14:50,270
team the API teams and it's up to them

00:14:48,620 --> 00:14:52,400
to write the resolvers to implement that

00:14:50,270 --> 00:14:55,070
schema now I mentioned it in the talk

00:14:52,400 --> 00:14:56,840
that they work with them yes you might

00:14:55,070 --> 00:14:59,009
maybe the client is missing something no

00:14:56,840 --> 00:15:00,839
they don't fully understand the

00:14:59,009 --> 00:15:02,579
capabilities of their server so that's

00:15:00,839 --> 00:15:05,009
where you kind of work through like some

00:15:02,579 --> 00:15:07,589
things that you might have a little

00:15:05,009 --> 00:15:09,569
differences and understanding but we

00:15:07,589 --> 00:15:11,610
really do actually focus on the clients

00:15:09,569 --> 00:15:19,829
like creating the schema but then the

00:15:11,610 --> 00:15:22,139
API developers write the code in the

00:15:19,829 --> 00:15:24,929
best practices that you've found in

00:15:22,139 --> 00:15:28,860
managing the schemas and going through

00:15:24,929 --> 00:15:32,279
this process stuff like pagination error

00:15:28,860 --> 00:15:37,319
type naming conventions these type of

00:15:32,279 --> 00:15:40,589
things yeah so pagination is a big one

00:15:37,319 --> 00:15:42,149
for us so we are just implementing a

00:15:40,589 --> 00:15:44,009
pretty simple pagination right now where

00:15:42,149 --> 00:15:46,619
the client has to keep track of the

00:15:44,009 --> 00:15:48,480
state so they say I want to request 50

00:15:46,619 --> 00:15:50,550
hotels they keep track that they

00:15:48,480 --> 00:15:53,129
requested 50 hotels and they request the

00:15:50,550 --> 00:15:56,759
next item of you know 51 plus another 50

00:15:53,129 --> 00:15:58,980
and so there's we looked into doing

00:15:56,759 --> 00:16:00,660
cursor implementation but for us right

00:15:58,980 --> 00:16:03,089
now it's kind of just a blocker that

00:16:00,660 --> 00:16:05,249
this is how our REST API is work so we

00:16:03,089 --> 00:16:07,110
just have to use it that way as far as

00:16:05,249 --> 00:16:09,480
error handling goes this is one thing

00:16:07,110 --> 00:16:12,179
where we're working with the teams to

00:16:09,480 --> 00:16:14,370
handle in a different way because as

00:16:12,179 --> 00:16:18,230
graph QL returns 200 for all the

00:16:14,370 --> 00:16:20,749
requests so you either get a 500 or a

00:16:18,230 --> 00:16:23,699
200 essentially so you kind of lose this

00:16:20,749 --> 00:16:25,439
notion of like hey we arrest API is

00:16:23,699 --> 00:16:27,600
actually return a bunch of HTTP status

00:16:25,439 --> 00:16:32,129
codes so how do we convert that to a

00:16:27,600 --> 00:16:35,519
response in graph QL we started by doing

00:16:32,129 --> 00:16:37,920
errors in the schema so like our entire

00:16:35,519 --> 00:16:39,269
event of our data object and then a data

00:16:37,920 --> 00:16:41,399
object you could request the thing

00:16:39,269 --> 00:16:43,980
request some field and then you'd also

00:16:41,399 --> 00:16:45,089
have to request the errors and that just

00:16:43,980 --> 00:16:46,920
didn't that wasn't working for us so

00:16:45,089 --> 00:16:48,540
because like now the client has to

00:16:46,920 --> 00:16:50,160
request the data they need and the

00:16:48,540 --> 00:16:52,920
errors and the errors are structured so

00:16:50,160 --> 00:16:56,129
we moved them into the errors response

00:16:52,920 --> 00:16:59,610
of the errors response of graph QL

00:16:56,129 --> 00:17:01,049
response but now since we have an SDK we

00:16:59,610 --> 00:17:02,970
can really standardize what that error

00:17:01,049 --> 00:17:05,399
object looks like like in the extensions

00:17:02,970 --> 00:17:07,589
of there's the data or conveying back so

00:17:05,399 --> 00:17:09,149
if we can control the clients we know

00:17:07,589 --> 00:17:11,630
exactly what that error object could

00:17:09,149 --> 00:17:12,980
look like but this is something that's

00:17:11,630 --> 00:17:16,370
struggle for us we don't know the best

00:17:12,980 --> 00:17:18,920
way that's gonna be going forward yeah

00:17:16,370 --> 00:17:20,480
similar thing for error is for us too we

00:17:18,920 --> 00:17:22,610
haven't gone too deep into how we're

00:17:20,480 --> 00:17:24,770
gonna deal with errors there are a few

00:17:22,610 --> 00:17:27,350
things that we found that were key for

00:17:24,770 --> 00:17:28,520
example pagination was one I think dates

00:17:27,350 --> 00:17:29,870
are another one that coming consistent

00:17:28,520 --> 00:17:32,150
day time for that created modified

00:17:29,870 --> 00:17:33,890
pagination was an important one in the

00:17:32,150 --> 00:17:36,710
sense that like you wanted to return a

00:17:33,890 --> 00:17:39,050
pagination object so that like not the

00:17:36,710 --> 00:17:39,860
odd not the list of what you're the

00:17:39,050 --> 00:17:41,540
research that you want returned but

00:17:39,860 --> 00:17:43,520
actually like a separate pagination

00:17:41,540 --> 00:17:44,690
object so that you could expand with

00:17:43,520 --> 00:17:46,520
more information so I was like the

00:17:44,690 --> 00:17:47,870
pagination information maybe a total

00:17:46,520 --> 00:17:51,770
count maybe there's some other stuff you

00:17:47,870 --> 00:17:54,110
need that like that edge between the

00:17:51,770 --> 00:17:56,420
making that request for a list of

00:17:54,110 --> 00:17:58,670
resources so there's a few things like

00:17:56,420 --> 00:18:00,890
that that was pretty key and we put in

00:17:58,670 --> 00:18:02,690
pretty early and again we do not use

00:18:00,890 --> 00:18:04,400
cursor basis because our REST API is on

00:18:02,690 --> 00:18:06,530
curse face you can't turn you know our

00:18:04,400 --> 00:18:09,830
cursor Basin to look offset limit which

00:18:06,530 --> 00:18:11,450
most of our api's do but aside from that

00:18:09,830 --> 00:18:13,880
from those main ones we did we still

00:18:11,450 --> 00:18:17,180
wanted consistency because any public or

00:18:13,880 --> 00:18:19,310
like unified API in in any sense it

00:18:17,180 --> 00:18:20,720
would be really if you go from like

00:18:19,310 --> 00:18:22,340
different parts they feel it's a

00:18:20,720 --> 00:18:25,220
completely different naming completely

00:18:22,340 --> 00:18:29,570
different it's like style conventions

00:18:25,220 --> 00:18:31,310
like it becomes hard to use but there's

00:18:29,570 --> 00:18:32,480
also really pedantic conversations about

00:18:31,310 --> 00:18:33,740
it because people are opinionated and

00:18:32,480 --> 00:18:34,910
then you're just like oh I know I should

00:18:33,740 --> 00:18:38,540
be like this uh-huh

00:18:34,910 --> 00:18:40,310
and honestly yeah honestly like for the

00:18:38,540 --> 00:18:42,860
stuff unlike except for the pagination

00:18:40,310 --> 00:18:44,330
of words there's important stuff to do I

00:18:42,860 --> 00:18:46,430
prefer if there's just like a

00:18:44,330 --> 00:18:47,930
community-driven thing though he's just

00:18:46,430 --> 00:18:49,220
like everybody uses the same with folder

00:18:47,930 --> 00:18:50,600
structure they might up in the dining

00:18:49,220 --> 00:18:52,700
conversation but folder structure you

00:18:50,600 --> 00:18:54,350
just go Apollo create and it just

00:18:52,700 --> 00:18:55,610
creates it for you and then nobody you

00:18:54,350 --> 00:18:56,300
don't add that conversation I feel like

00:18:55,610 --> 00:19:01,950
that

00:18:56,300 --> 00:19:01,950
[Laughter]

00:19:03,440 --> 00:19:07,460
well actually real quick on top that so

00:19:06,020 --> 00:19:09,620
the air as I was talking about would be

00:19:07,460 --> 00:19:11,900
like hard fail errors like you return a

00:19:09,620 --> 00:19:14,270
uric there's a complete blow-up at the

00:19:11,900 --> 00:19:17,540
service with this change of our design

00:19:14,270 --> 00:19:20,000
being like UI first we actually still

00:19:17,540 --> 00:19:21,380
have things like things that should be

00:19:20,000 --> 00:19:22,610
played back to the customer those are

00:19:21,380 --> 00:19:24,920
actually still returned in the schema

00:19:22,610 --> 00:19:26,630
right so there's some just a concept of

00:19:24,920 --> 00:19:27,890
such banner they play it could be an

00:19:26,630 --> 00:19:30,110
error message it could be just an

00:19:27,890 --> 00:19:31,340
informational banner so anything in the

00:19:30,110 --> 00:19:32,990
client the client should request that

00:19:31,340 --> 00:19:35,150
and just display that's easier so we

00:19:32,990 --> 00:19:37,310
kind of mitigated some of that with just

00:19:35,150 --> 00:19:39,620
how our UI is not working by putting

00:19:37,310 --> 00:19:42,380
like errors and information in the same

00:19:39,620 --> 00:19:45,440
place I think it's fair to say errors

00:19:42,380 --> 00:19:48,230
are one of the less well developed parts

00:19:45,440 --> 00:19:50,450
of graph QL and and there's some history

00:19:48,230 --> 00:19:55,390
here right graphic you'll starts with a

00:19:50,450 --> 00:19:58,550
product facing team at Facebook Facebook

00:19:55,390 --> 00:20:00,350
underneath graph QL doesn't look like a

00:19:58,550 --> 00:20:02,390
lot of what we all have there aren't

00:20:00,350 --> 00:20:04,850
micro services there aren't REST API is

00:20:02,390 --> 00:20:10,340
the failure modes are very different and

00:20:04,850 --> 00:20:11,990
I I say credit to the initial graphical

00:20:10,340 --> 00:20:14,750
design for keeping things very small and

00:20:11,990 --> 00:20:16,400
lightweight and unaffiliated you saw

00:20:14,750 --> 00:20:18,110
that chart I had up compared to ode data

00:20:16,400 --> 00:20:20,330
for example which you know what the

00:20:18,110 --> 00:20:21,500
other direction and people like

00:20:20,330 --> 00:20:24,110
lightweight things people like things

00:20:21,500 --> 00:20:26,330
that have some flexibility so I think

00:20:24,110 --> 00:20:27,800
that is the right starting point for

00:20:26,330 --> 00:20:30,170
those who don't know graphic hills now

00:20:27,800 --> 00:20:31,490
managed by the graphical foundation so

00:20:30,170 --> 00:20:34,850
the actual specification for how

00:20:31,490 --> 00:20:38,030
graphical works and there's growing

00:20:34,850 --> 00:20:39,620
interest in whether it's a core part of

00:20:38,030 --> 00:20:44,030
the graphical spec or I think maybe more

00:20:39,620 --> 00:20:46,040
likely a consensus extension that sits

00:20:44,030 --> 00:20:47,420
on top of graph QL for for the semantics

00:20:46,040 --> 00:20:48,950
of errors and how you represent these

00:20:47,420 --> 00:20:50,270
things there's a lot of opportunity here

00:20:48,950 --> 00:20:52,970
because we have this fine grained

00:20:50,270 --> 00:20:55,070
structure so the idea of partial results

00:20:52,970 --> 00:20:57,580
or the idea of multiple errors there's a

00:20:55,070 --> 00:21:00,980
lot to work with

00:20:57,580 --> 00:21:03,230
my ask is if you have use cases or there

00:21:00,980 --> 00:21:05,750
are particular pinch points around that

00:21:03,230 --> 00:21:10,010
stuff let us know that's an area of

00:21:05,750 --> 00:21:11,930
active discussion or come join the

00:21:10,010 --> 00:21:14,630
working group on graphical itself and be

00:21:11,930 --> 00:21:17,300
part of that discussion directly either

00:21:14,630 --> 00:21:20,510
way let's make sure the use cases drive

00:21:17,300 --> 00:21:22,520
the design and I'm hopeful that there'll

00:21:20,510 --> 00:21:25,360
be a lot of progress on that over the

00:21:22,520 --> 00:21:27,440
coming months what else yeah in the back

00:21:25,360 --> 00:21:28,570
thanks a lot actually you were touching

00:21:27,440 --> 00:21:30,639
on

00:21:28,570 --> 00:21:32,830
what I'm gonna ask here but so going

00:21:30,639 --> 00:21:34,899
back to like essentially evangelizing

00:21:32,830 --> 00:21:36,009
and trying to introduce graph 12 your

00:21:34,899 --> 00:21:38,830
company obviously you're gonna get a lot

00:21:36,009 --> 00:21:40,389
of you know pushback essentially a lot

00:21:38,830 --> 00:21:41,889
of questions from you know people that

00:21:40,389 --> 00:21:44,409
have the experience like and you know

00:21:41,889 --> 00:21:45,700
primarily focused on rest api is and you

00:21:44,409 --> 00:21:49,059
know with different technology around

00:21:45,700 --> 00:21:51,009
whatnot and you know in all honesty like

00:21:49,059 --> 00:21:54,340
you know you mention no data so graph QL

00:21:51,009 --> 00:21:56,049
is not the first you know attempt to

00:21:54,340 --> 00:21:57,940
address this problem having a sort of a

00:21:56,049 --> 00:21:59,590
common layer or you know a schema

00:21:57,940 --> 00:22:01,960
assigned to your api so there's more

00:21:59,590 --> 00:22:03,549
than no data but data is so that's my

00:22:01,960 --> 00:22:06,879
question it's like when someone asks you

00:22:03,549 --> 00:22:09,309
you know why not oh data right like then

00:22:06,879 --> 00:22:10,480
how do you how do you properly address

00:22:09,309 --> 00:22:12,429
that because honestly I don't I don't

00:22:10,480 --> 00:22:14,019
know a lot about all data but at

00:22:12,429 --> 00:22:16,120
something going through it but obviously

00:22:14,019 --> 00:22:18,820
I'm talking to people that know a lot

00:22:16,120 --> 00:22:21,639
about data so how do you yeah how do you

00:22:18,820 --> 00:22:23,919
present that so yeah I can take this one

00:22:21,639 --> 00:22:27,070
so we have this exact same question

00:22:23,919 --> 00:22:29,679
we're like for us it's yjr PC or why not

00:22:27,070 --> 00:22:31,120
J our PC right as lousy to find a

00:22:29,679 --> 00:22:33,730
contract between a client and a server

00:22:31,120 --> 00:22:35,289
and you can actually have open sockets

00:22:33,730 --> 00:22:38,500
and now it should be like faster than

00:22:35,289 --> 00:22:40,960
maybe other services but for us it just

00:22:38,500 --> 00:22:44,409
comes down to tooling the tooling around

00:22:40,960 --> 00:22:46,090
graph QL is a lot more it's a bit bigger

00:22:44,409 --> 00:22:49,029
community right we have people here who

00:22:46,090 --> 00:22:51,879
interested in graph QL and for us that's

00:22:49,029 --> 00:22:54,340
more powerful than just finding the miss

00:22:51,879 --> 00:22:55,330
maybe the best fastest solution first we

00:22:54,340 --> 00:22:57,789
want something that's going to just

00:22:55,330 --> 00:23:01,179
allow us to build build things better

00:22:57,789 --> 00:23:02,470
not necessarily faster I think sometimes

00:23:01,179 --> 00:23:05,289
with these you can approach it from the

00:23:02,470 --> 00:23:07,179
technical angle and I think graph kills

00:23:05,289 --> 00:23:09,039
a lot to offer but I'm with Shane I

00:23:07,179 --> 00:23:11,919
think my answer to that would be the

00:23:09,039 --> 00:23:13,539
graph right and a lot of times with

00:23:11,919 --> 00:23:15,519
these technologies the right choice is

00:23:13,539 --> 00:23:17,230
to adopt the one that everybody's

00:23:15,519 --> 00:23:18,340
adopting because that's the one with a

00:23:17,230 --> 00:23:20,259
future and that's the one that's gonna

00:23:18,340 --> 00:23:22,480
get ongoing investment and you know

00:23:20,259 --> 00:23:23,620
errors or whatever else it is those

00:23:22,480 --> 00:23:27,039
things are going to evolve and change

00:23:23,620 --> 00:23:28,990
and improve over time I would not expect

00:23:27,039 --> 00:23:30,460
the same to be true for some of these

00:23:28,990 --> 00:23:34,330
other attempts at modeling data that

00:23:30,460 --> 00:23:35,630
were driven from a previous era just the

00:23:34,330 --> 00:23:38,630
reality

00:23:35,630 --> 00:23:39,710
I guess I shouldn't call well I don't

00:23:38,630 --> 00:23:41,120
know we'll repeat the question if you

00:23:39,710 --> 00:23:43,910
don't have a mic so go ahead

00:23:41,120 --> 00:23:46,460
are there any related tools to either

00:23:43,910 --> 00:23:48,530
Apollo or graph QL that you would highly

00:23:46,460 --> 00:23:50,419
recommend like developer tools like I

00:23:48,530 --> 00:23:57,020
didn't know the vs code plug-in existed

00:23:50,419 --> 00:24:00,370
until today hi

00:23:57,020 --> 00:24:03,620
I actually really like Ulta here as a

00:24:00,370 --> 00:24:05,150
playground replacement it essentially

00:24:03,620 --> 00:24:07,190
does the same thing but I think there

00:24:05,150 --> 00:24:09,530
searching is a little bit better that's

00:24:07,190 --> 00:24:12,169
if you're it's the same replacement for

00:24:09,530 --> 00:24:14,299
graphical playground or graphical but

00:24:12,169 --> 00:24:17,090
that's just a simple tool we actually

00:24:14,299 --> 00:24:18,890
expose both against our surface or top

00:24:17,090 --> 00:24:20,570
level gateway exposes like slash

00:24:18,890 --> 00:24:23,630
playground slash multi-year slash

00:24:20,570 --> 00:24:26,200
Voyager slash graphical and we just let

00:24:23,630 --> 00:24:28,880
people choose which one they want to use

00:24:26,200 --> 00:24:31,159
yeah I think for us there wasn't much

00:24:28,880 --> 00:24:31,730
more outside the Apollo tools and

00:24:31,159 --> 00:24:34,039
playground

00:24:31,730 --> 00:24:36,049
we have Voyager 2 we ever went to those

00:24:34,039 --> 00:24:38,450
but I can't think of anything I shall

00:24:36,049 --> 00:24:40,370
have to top my head that we use other

00:24:38,450 --> 00:24:41,960
than again we use vs code we recommend

00:24:40,370 --> 00:24:44,450
the S code because of the extensions

00:24:41,960 --> 00:24:46,100
that we use and a lot of the settings I

00:24:44,450 --> 00:24:50,870
mean I'm still using vim so they haven't

00:24:46,100 --> 00:24:52,760
converted me but but yeah I think those

00:24:50,870 --> 00:24:56,059
are the ones we use the most vs code and

00:24:52,760 --> 00:24:58,820
a playground they Apollo tools you had

00:24:56,059 --> 00:25:02,059
um at runtime you had the example of New

00:24:58,820 --> 00:25:06,409
Relic a lot of people love there's a

00:25:02,059 --> 00:25:10,250
common integration with data dog we've

00:25:06,409 --> 00:25:13,370
had team other APM tools like signal FX

00:25:10,250 --> 00:25:15,200
or observability tools open tracing I

00:25:13,370 --> 00:25:18,320
think there's a whole world of

00:25:15,200 --> 00:25:19,970
integrations there that are also really

00:25:18,320 --> 00:25:23,270
valuable and they don't get talked about

00:25:19,970 --> 00:25:24,980
as much but being able to feather this

00:25:23,270 --> 00:25:27,500
knowledge of how the graphs used in to

00:25:24,980 --> 00:25:29,690
all those existing systems is also

00:25:27,500 --> 00:25:32,539
really important from the DevOps

00:25:29,690 --> 00:25:34,340
perspective yeah and if I could say one

00:25:32,539 --> 00:25:36,260
other one it's not so much a tool I'm a

00:25:34,340 --> 00:25:40,460
big fan though it's a little bit further

00:25:36,260 --> 00:25:42,799
forward thinking of serverless and I say

00:25:40,460 --> 00:25:44,870
that just because the the basic

00:25:42,799 --> 00:25:48,700
ingredients are right graph kills fairly

00:25:44,870 --> 00:25:52,720
stateless in most setups as it should be

00:25:48,700 --> 00:25:53,919
and often you want your product teams to

00:25:52,720 --> 00:25:56,759
be able to drive a lot of what's going

00:25:53,919 --> 00:25:59,080
on product teams generally don't show up

00:25:56,759 --> 00:26:00,909
prepared to run services the way that

00:25:59,080 --> 00:26:02,350
the underlying service teams do so

00:26:00,909 --> 00:26:04,299
that's an advantage and then the third

00:26:02,350 --> 00:26:06,940
thing and this is really out there but

00:26:04,299 --> 00:26:09,129
I'll say it is we're starting to see

00:26:06,940 --> 00:26:10,239
teams experiment with an architecture

00:26:09,129 --> 00:26:11,679
where some of the graphical layer

00:26:10,239 --> 00:26:18,190
actually lives out on the edge of the

00:26:11,679 --> 00:26:20,139
network because CD ends are starting to

00:26:18,190 --> 00:26:21,669
have JavaScript environments inside them

00:26:20,139 --> 00:26:28,109
or web assembly or some way of running

00:26:21,669 --> 00:26:32,200
code out on the point of presence and

00:26:28,109 --> 00:26:34,330
the for us what's interesting about that

00:26:32,200 --> 00:26:35,710
is sometimes you want graph QL to run as

00:26:34,330 --> 00:26:38,289
close to the client as possible because

00:26:35,710 --> 00:26:40,600
it's all about page latency and it's

00:26:38,289 --> 00:26:42,940
about you know caching part or all of a

00:26:40,600 --> 00:26:47,080
graphical query way out there and if you

00:26:42,940 --> 00:26:48,369
can do all that you know the way you're

00:26:47,080 --> 00:26:50,859
gonna go do that is some sort of

00:26:48,369 --> 00:26:53,019
surrealist approach so it's early I

00:26:50,859 --> 00:26:55,119
don't recommend teams there are a few

00:26:53,019 --> 00:26:57,159
teams who've done this but we're not

00:26:55,119 --> 00:26:58,779
we're not trying to say you should run

00:26:57,159 --> 00:27:01,019
your whole graph two layers as a set of

00:26:58,779 --> 00:27:02,980
functions I do think though some of the

00:27:01,019 --> 00:27:05,559
some of the people thinking about this

00:27:02,980 --> 00:27:06,609
stuff and working on it are really

00:27:05,559 --> 00:27:12,929
pushing in an interesting direction

00:27:06,609 --> 00:27:18,549
we're pretty excited about that or Shane

00:27:12,929 --> 00:27:22,239
when you guys are writing I'm here and

00:27:18,549 --> 00:27:24,759
up if you don't mind so when you're is

00:27:22,239 --> 00:27:26,200
writing the new services maybe you're

00:27:24,759 --> 00:27:27,789
writing with a graphical that's very

00:27:26,200 --> 00:27:29,980
easy to innovate with your UI or thing

00:27:27,789 --> 00:27:31,539
but you might have lot of existing micro

00:27:29,980 --> 00:27:33,159
services which are written as the RS

00:27:31,539 --> 00:27:34,840
service or maybe G appears in thumb

00:27:33,159 --> 00:27:36,220
something like that right how are you

00:27:34,840 --> 00:27:37,869
guys are migrating those services to

00:27:36,220 --> 00:27:40,119
support the graphical are you guys like

00:27:37,869 --> 00:27:42,100
rewriting everything to replace the rest

00:27:40,119 --> 00:27:43,989
services are any productive tool you are

00:27:42,100 --> 00:27:46,720
providing to your team and how you are

00:27:43,989 --> 00:27:48,669
yes so first right now the biggest

00:27:46,720 --> 00:27:50,799
approach is that we just get on the

00:27:48,669 --> 00:27:53,649
graph so the fastest way is obviously

00:27:50,799 --> 00:27:55,889
just to wrap the REST API so we have

00:27:53,649 --> 00:27:59,750
another service on top of the REST API

00:27:55,889 --> 00:28:01,400
but we're finding now that were

00:27:59,750 --> 00:28:03,860
we're just having some pretty simple

00:28:01,400 --> 00:28:06,440
wrappers and since we're having more

00:28:03,860 --> 00:28:08,179
exposing more data through the graph I

00:28:06,440 --> 00:28:11,360
mentioned kana above like an example

00:28:08,179 --> 00:28:12,620
where the users API like user data was

00:28:11,360 --> 00:28:14,240
returned from the hotel's search

00:28:12,620 --> 00:28:16,340
response like we no longer need that

00:28:14,240 --> 00:28:20,059
data so we can start kind of removing

00:28:16,340 --> 00:28:22,730
some of this stuff from the REST API in

00:28:20,059 --> 00:28:25,010
the background as we kind of actually

00:28:22,730 --> 00:28:27,350
start consuming more of the graph and

00:28:25,010 --> 00:28:29,420
then if it gets to the end we might

00:28:27,350 --> 00:28:31,670
actually just move kind of more or all

00:28:29,420 --> 00:28:33,740
of the logic into that graph QL

00:28:31,670 --> 00:28:35,960
micro-service and kind of wholly delete

00:28:33,740 --> 00:28:38,270
another layer but first it's more on

00:28:35,960 --> 00:28:39,740
just get on the graph really expose the

00:28:38,270 --> 00:28:42,110
data that's needed and then from there

00:28:39,740 --> 00:28:43,280
you can re-architect under to the schema

00:28:42,110 --> 00:28:48,740
but the clients don't have to know about

00:28:43,280 --> 00:28:49,880
it yeah I think from a there's there's a

00:28:48,740 --> 00:28:52,550
lot of interesting graphical native

00:28:49,880 --> 00:28:55,490
services and I think that architecture

00:28:52,550 --> 00:28:57,500
does make some sense in some cases for

00:28:55,490 --> 00:28:59,870
me the the main thing is about just the

00:28:57,500 --> 00:29:02,809
adoption path so being able to layer

00:28:59,870 --> 00:29:05,570
graph QL on top of services that exist

00:29:02,809 --> 00:29:07,790
means yes you should include them in the

00:29:05,570 --> 00:29:10,400
conversation but you're not asking the

00:29:07,790 --> 00:29:13,090
service owners to go put something on

00:29:10,400 --> 00:29:14,840
their plate the other thing I'll say is

00:29:13,090 --> 00:29:16,250
service owners actually have a very

00:29:14,840 --> 00:29:18,320
different in my experience a very

00:29:16,250 --> 00:29:20,240
different set of goals than product

00:29:18,320 --> 00:29:22,340
owners right a service owner wants a

00:29:20,240 --> 00:29:24,410
really small clean orthogonal API with

00:29:22,340 --> 00:29:26,780
understood SLA a very precise

00:29:24,410 --> 00:29:28,309
understanding of like what load am I

00:29:26,780 --> 00:29:30,530
expect is for what error rate is

00:29:28,309 --> 00:29:32,840
acceptable and so on and so forth that's

00:29:30,530 --> 00:29:35,660
a lot easier for a service owner if the

00:29:32,840 --> 00:29:37,010
art PCs are fixed and as soon as you

00:29:35,660 --> 00:29:40,390
tell a service owner that they have to

00:29:37,010 --> 00:29:42,590
do all that against arbitrary queries I

00:29:40,390 --> 00:29:44,750
mean that's a much harder problem right

00:29:42,590 --> 00:29:48,230
so the separation I think can be really

00:29:44,750 --> 00:29:49,580
helpful I'm a fawn I'm fond of the

00:29:48,230 --> 00:29:51,860
architecture where services use

00:29:49,580 --> 00:29:55,160
something even more structured than rest

00:29:51,860 --> 00:29:57,410
thrift or G RPC to the data graph layer

00:29:55,160 --> 00:30:02,320
and then the data graph replaces rest to

00:29:57,410 --> 00:30:02,320
the client as an example maybe two more

00:30:07,470 --> 00:30:12,100
hi I'm interesting about the testing

00:30:10,450 --> 00:30:13,809
approach that you guys have taken to

00:30:12,100 --> 00:30:15,730
ensure to end to end quality so I'm

00:30:13,809 --> 00:30:17,670
looking at like what level of testing is

00:30:15,730 --> 00:30:22,420
needed and when you run those tests

00:30:17,670 --> 00:30:26,140
do you take this one first yep so we've

00:30:22,420 --> 00:30:27,550
got a subversive test so first is like I

00:30:26,140 --> 00:30:29,470
guess it's a similar kind of an

00:30:27,550 --> 00:30:31,900
automation suite so like we start first

00:30:29,470 --> 00:30:33,580
with our testing to make sure all we got

00:30:31,900 --> 00:30:36,309
unit tests across all of our resolvers

00:30:33,580 --> 00:30:38,590
but we now have like a CI system that

00:30:36,309 --> 00:30:40,690
runs queries and and we're getting

00:30:38,590 --> 00:30:42,040
closer to try to get pull queries that

00:30:40,690 --> 00:30:43,540
are actually being used by the client

00:30:42,040 --> 00:30:46,929
and using the same queries and having

00:30:43,540 --> 00:30:48,760
them run as part of our CI pipeline and

00:30:46,929 --> 00:30:50,320
so with graphical it's actually a bit

00:30:48,760 --> 00:30:52,660
easier than with recipes you just write

00:30:50,320 --> 00:30:55,330
queries in our QA team really likes it

00:30:52,660 --> 00:30:56,650
they can just write all these arbitrary

00:30:55,330 --> 00:30:58,179
queries and all the different access

00:30:56,650 --> 00:31:00,040
buttons like okay these are really

00:30:58,179 --> 00:31:02,890
important paths so you can write queries

00:31:00,040 --> 00:31:04,990
on on those paths and they added to that

00:31:02,890 --> 00:31:06,970
our suite which we run during CI and

00:31:04,990 --> 00:31:08,140
before we're gonna prod it runs through

00:31:06,970 --> 00:31:09,190
and it runs till animations make sure

00:31:08,140 --> 00:31:11,559
that our schema and all that's working

00:31:09,190 --> 00:31:14,950
against real data as part of our phase

00:31:11,559 --> 00:31:16,570
so I feel like that's that's kind of

00:31:14,950 --> 00:31:17,740
where we're going there where we use our

00:31:16,570 --> 00:31:21,190
queries it's part of our automation

00:31:17,740 --> 00:31:25,090
pipeline yeah so in our process during

00:31:21,190 --> 00:31:27,280
the migration we used to have smoke

00:31:25,090 --> 00:31:29,800
tests against the top-level scheme at

00:31:27,280 --> 00:31:31,870
the overall merged schema and this was

00:31:29,800 --> 00:31:34,240
before we had Apollo engine or any

00:31:31,870 --> 00:31:36,130
registry we would have the clients just

00:31:34,240 --> 00:31:39,490
write their queries that they were

00:31:36,130 --> 00:31:42,970
actually using in a single repo and then

00:31:39,490 --> 00:31:45,250
that that automation suite would just

00:31:42,970 --> 00:31:47,980
run on deployments of the individual

00:31:45,250 --> 00:31:51,070
services so just verify a the hotel's

00:31:47,980 --> 00:31:53,920
query works that need went away when we

00:31:51,070 --> 00:31:55,360
started using Apollo Apollo engine in

00:31:53,920 --> 00:31:58,480
just the client registry so now our

00:31:55,360 --> 00:32:01,540
process is a developer makes a PR change

00:31:58,480 --> 00:32:02,920
that we have a check for unit tests so

00:32:01,540 --> 00:32:05,370
they should have a unit test just for

00:32:02,920 --> 00:32:07,630
the code obviously we have a check for

00:32:05,370 --> 00:32:10,270
integration tests on that individual

00:32:07,630 --> 00:32:12,070
micro service so the hotel's team should

00:32:10,270 --> 00:32:13,510
also write integrations test which

00:32:12,070 --> 00:32:15,640
starts the app

00:32:13,510 --> 00:32:17,860
it actually queries either live or mock

00:32:15,640 --> 00:32:20,170
data depending what you want to do and

00:32:17,860 --> 00:32:21,910
then that tests just at the micro

00:32:20,170 --> 00:32:24,880
service so it doesn't care about the

00:32:21,910 --> 00:32:27,580
overall schema then let's and then we

00:32:24,880 --> 00:32:28,540
also query Apollo engine to make sure

00:32:27,580 --> 00:32:30,550
that they're not going to break any

00:32:28,540 --> 00:32:33,160
existing clients are using that and so

00:32:30,550 --> 00:32:34,300
those are all done on a PR so even

00:32:33,160 --> 00:32:36,370
before code is checked in

00:32:34,300 --> 00:32:39,730
then if the code is checked in we have

00:32:36,370 --> 00:32:43,390
actually a our own pipeline process at

00:32:39,730 --> 00:32:44,740
Expedia and it's just in that deployment

00:32:43,390 --> 00:32:46,090
so we run a deployment if the

00:32:44,740 --> 00:32:49,420
deployments successful then we have

00:32:46,090 --> 00:32:51,160
other automation tests which run just to

00:32:49,420 --> 00:32:54,220
kind of verify some other things that we

00:32:51,160 --> 00:32:56,620
have specifically for that SDK then if

00:32:54,220 --> 00:32:59,290
those baths then they get deployed to

00:32:56,620 --> 00:33:03,270
production and we go from there so we

00:32:59,290 --> 00:33:04,630
have both pipeline and build time checks

00:33:03,270 --> 00:33:06,490
one more

00:33:04,630 --> 00:33:09,490
did I see someone here with it yeah I

00:33:06,490 --> 00:33:11,650
had a question related to I guess your

00:33:09,490 --> 00:33:15,790
use case is related to authentication

00:33:11,650 --> 00:33:17,320
and authorization specifically metadata

00:33:15,790 --> 00:33:22,620
with the schema if you guys have any

00:33:17,320 --> 00:33:24,670
lessons learned you mean is the question

00:33:22,620 --> 00:33:26,740
authentication with respect to who gets

00:33:24,670 --> 00:33:30,640
to see the schema like the introspection

00:33:26,740 --> 00:33:32,200
queries yeah have you guys actually did

00:33:30,640 --> 00:33:35,010
you guys actually have to integrate that

00:33:32,200 --> 00:33:39,910
with your I guess design of your schema

00:33:35,010 --> 00:33:42,460
as far as for citizen we have so as far

00:33:39,910 --> 00:33:45,220
as the metadata of this schema if you're

00:33:42,460 --> 00:33:46,930
talking about schema introspection we

00:33:45,220 --> 00:33:49,660
blocked schema introspection from

00:33:46,930 --> 00:33:51,640
production so since we have a schema

00:33:49,660 --> 00:33:53,590
registry there's no need for really

00:33:51,640 --> 00:33:56,260
anyone to actually go and hit the

00:33:53,590 --> 00:33:58,510
service to do schema introspection so

00:33:56,260 --> 00:34:00,580
there's so now we can block people from

00:33:58,510 --> 00:34:02,410
public internet to actually go hit our

00:34:00,580 --> 00:34:04,020
graph QL endpoint and introspect the

00:34:02,410 --> 00:34:07,360
schema they don't need to we just pull

00:34:04,020 --> 00:34:09,879
the Apollo of appengine schema registry

00:34:07,360 --> 00:34:12,240
is that I know I was actually looking

00:34:09,879 --> 00:34:14,980
from the user and standpoint of actually

00:34:12,240 --> 00:34:21,760
what's allowed for making what queries

00:34:14,980 --> 00:34:25,690
got yeah so for us graph QL is our

00:34:21,760 --> 00:34:27,270
aggregation layer it's point is to give

00:34:25,690 --> 00:34:30,000
you a graph QL query like

00:34:27,270 --> 00:34:32,940
fq l query convert it to those services

00:34:30,000 --> 00:34:35,669
that give you that data and then pass it

00:34:32,940 --> 00:34:37,980
along and prints it back we don't want

00:34:35,669 --> 00:34:39,990
to do authentication or authorization at

00:34:37,980 --> 00:34:43,620
the graph QL layer we want our

00:34:39,990 --> 00:34:45,600
application layer to be fully have the

00:34:43,620 --> 00:34:46,830
full support of they should be able

00:34:45,600 --> 00:34:48,720
protecting their own api as they should

00:34:46,830 --> 00:34:50,310
not be providing data to stuff they

00:34:48,720 --> 00:34:52,409
don't have access to our graph y'all is

00:34:50,310 --> 00:34:54,090
a thin layer that just orcs orchestrates

00:34:52,409 --> 00:34:57,000
where our routes where you should go

00:34:54,090 --> 00:34:59,460
based on your query so we try to avoid

00:34:57,000 --> 00:35:01,680
as much as possible logic and graph you

00:34:59,460 --> 00:35:06,020
outside of that context and make sure

00:35:01,680 --> 00:35:07,950
that any system that's providing data is

00:35:06,020 --> 00:35:10,350
properly doing their authentication

00:35:07,950 --> 00:35:12,930
authorization checks yeah we're and

00:35:10,350 --> 00:35:15,140
we're actually doing the same thing so i

00:35:12,930 --> 00:35:17,490
will say we're we don't have the entire

00:35:15,140 --> 00:35:19,620
schema of the company available in

00:35:17,490 --> 00:35:21,090
graphical yet we're still migrating new

00:35:19,620 --> 00:35:23,490
services so we haven't found the need

00:35:21,090 --> 00:35:24,930
yet to do individual like field level

00:35:23,490 --> 00:35:27,810
authentication but we still have the

00:35:24,930 --> 00:35:31,080
same process so the user we have a user

00:35:27,810 --> 00:35:34,560
query and what they the clients would

00:35:31,080 --> 00:35:35,910
actually query that user user field and

00:35:34,560 --> 00:35:37,920
they would either get back sonication

00:35:35,910 --> 00:35:39,360
token some way that's actually returned

00:35:37,920 --> 00:35:40,890
to them and then they use that ascend

00:35:39,360 --> 00:35:43,860
occation token whenever they query other

00:35:40,890 --> 00:35:44,790
areas of the api but graph cool doesn't

00:35:43,860 --> 00:35:47,880
know anything about that it's just

00:35:44,790 --> 00:35:49,830
another argument to the query one thing

00:35:47,880 --> 00:35:51,960
I might add is that if we decided to go

00:35:49,830 --> 00:35:54,600
to a public API with our graph QL which

00:35:51,960 --> 00:35:56,520
we're not currently we may want to block

00:35:54,600 --> 00:35:58,080
them right at the graph QL layer of like

00:35:56,520 --> 00:35:59,400
me like if these schemas you should

00:35:58,080 --> 00:36:01,020
because we're gonna probably gonna

00:35:59,400 --> 00:36:02,700
enable introspection if it's a public

00:36:01,020 --> 00:36:03,870
API because we want third party

00:36:02,700 --> 00:36:04,860
developers to be able to introspect the

00:36:03,870 --> 00:36:08,340
query but we don't want them to be able

00:36:04,860 --> 00:36:09,330
to see the whole schema perhaps so we

00:36:08,340 --> 00:36:11,160
haven't gone there yet we haven't

00:36:09,330 --> 00:36:12,810
thought about it but I can see us maybe

00:36:11,160 --> 00:36:14,850
get into a point where we do want to

00:36:12,810 --> 00:36:16,320
limit what parts of the schema is

00:36:14,850 --> 00:36:17,970
available to the client based on what

00:36:16,320 --> 00:36:20,100
the client is but I don't have a

00:36:17,970 --> 00:36:21,780
solution for that yet and we can also

00:36:20,100 --> 00:36:24,120
control that a little bit with the

00:36:21,780 --> 00:36:26,370
operation registry right now so the

00:36:24,120 --> 00:36:28,230
clients do have to get a key from us to

00:36:26,370 --> 00:36:30,720
register their operations in Apollo

00:36:28,230 --> 00:36:32,670
engine so we know ahead of time what

00:36:30,720 --> 00:36:34,020
they're going to be querying so that's

00:36:32,670 --> 00:36:36,120
kind of part of the schemer review

00:36:34,020 --> 00:36:38,580
process we have is both with the clients

00:36:36,120 --> 00:36:40,050
and those service developers so release

00:36:38,580 --> 00:36:40,390
know somewhat and what they're going to

00:36:40,050 --> 00:36:42,279
be using

00:36:40,390 --> 00:36:44,260
that doesn't restrict them from querying

00:36:42,279 --> 00:36:48,160
everything but we at least know ahead of

00:36:44,260 --> 00:36:51,339
time what they're want to query all

00:36:48,160 --> 00:36:53,230
right Andrew Shane thanks so much for

00:36:51,339 --> 00:36:55,059
sharing and hopefully that was helpful

00:36:53,230 --> 00:36:56,500
for everyone round of applause for both

00:36:55,059 --> 00:37:02,840
of you

00:36:56,500 --> 00:37:02,840

YouTube URL: https://www.youtube.com/watch?v=91tXenwlPsg


