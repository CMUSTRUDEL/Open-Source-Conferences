Title: Creating a federated schema for a global company by Shane Myrick, SSE at Expedia Group
Publication date: 2019-05-28
Playlist: Apollo Day SF 2019
Description: 
	Learn about how Expedia Group migrated from REST to GraphQL and why they decided to use the technology. We will also cover the tools used like graphql-java and Expedia's open source library, graphql-kotlin, and the challenges faced when teaching developers new technologies and how they create a schema while communicating with teams across the world

Resources:
Learn more about Summit - https://summit.graphql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Captions: 
	00:00:00,030 --> 00:00:04,410
all right hello everyone my name is

00:00:01,800 --> 00:00:07,049
Shane and I work at Expedia group and

00:00:04,410 --> 00:00:08,880
today I'm going to talk about how we

00:00:07,049 --> 00:00:11,340
went through a graph QL journey creating

00:00:08,880 --> 00:00:13,469
a federated schema so we've already

00:00:11,340 --> 00:00:16,440
heard today about what a federated

00:00:13,469 --> 00:00:18,300
schema means and how that process looks

00:00:16,440 --> 00:00:20,010
like some of the tooling that's going to

00:00:18,300 --> 00:00:24,029
be coming from Apollo to create new

00:00:20,010 --> 00:00:25,920
graph QL schemas in a federated way we

00:00:24,029 --> 00:00:28,199
kind of came about this approach a

00:00:25,920 --> 00:00:30,300
little bit before graph cute before

00:00:28,199 --> 00:00:31,619
Apollo had all these tooling so we've

00:00:30,300 --> 00:00:33,329
been talking with Apollo through this

00:00:31,619 --> 00:00:35,219
process and how we've done our schema

00:00:33,329 --> 00:00:37,530
and we've really kind of aligned in some

00:00:35,219 --> 00:00:39,120
of the areas so you'll might see some

00:00:37,530 --> 00:00:40,620
overlap here but I just wanted to talk

00:00:39,120 --> 00:00:42,870
about some of the challenges that we've

00:00:40,620 --> 00:00:47,340
had over the past two years doing graph

00:00:42,870 --> 00:00:49,170
QL so first off I did say Expedia group

00:00:47,340 --> 00:00:51,750
not Expedia you might have heard of

00:00:49,170 --> 00:00:53,940
Expedia group is actually a larger

00:00:51,750 --> 00:00:55,230
company and we own a bunch of different

00:00:53,940 --> 00:00:58,230
brands you might have heard of some of

00:00:55,230 --> 00:01:03,570
them are Expedia Orbitz Travelocity

00:00:58,230 --> 00:01:05,939
HomeAway verbo hotels.com Hotwire all

00:01:03,570 --> 00:01:08,040
these different brands are under the

00:01:05,939 --> 00:01:10,080
umbrella of Expedia group and we

00:01:08,040 --> 00:01:12,600
actually have over 25 different brands

00:01:10,080 --> 00:01:15,060
that all kind of come together and over

00:01:12,600 --> 00:01:16,920
the 22 years of our company all these

00:01:15,060 --> 00:01:19,140
different brands have built lots of

00:01:16,920 --> 00:01:21,240
different technologies to provide

00:01:19,140 --> 00:01:22,740
products to our travelers so we office

00:01:21,240 --> 00:01:25,560
obviously have things like hotels

00:01:22,740 --> 00:01:28,080
flights we have activities you can book

00:01:25,560 --> 00:01:30,810
car rentals vacation rentals so you can

00:01:28,080 --> 00:01:33,810
run rent housing and all these different

00:01:30,810 --> 00:01:36,780
teams and products were built by teams

00:01:33,810 --> 00:01:38,610
often in separate areas we have teams

00:01:36,780 --> 00:01:41,549
across the globe in different countries

00:01:38,610 --> 00:01:43,680
different offices and it's a large

00:01:41,549 --> 00:01:45,840
communication process between a large

00:01:43,680 --> 00:01:48,420
company that we have to deal with and so

00:01:45,840 --> 00:01:51,630
the whole company can be divided up into

00:01:48,420 --> 00:01:54,149
basically two large separate

00:01:51,630 --> 00:01:55,680
organizations we have on the left here

00:01:54,149 --> 00:01:57,299
we have our travelers who interact with

00:01:55,680 --> 00:01:59,549
our site and then on the right we have

00:01:57,299 --> 00:02:01,079
our suppliers so that's be the hotels

00:01:59,549 --> 00:02:03,210
and the airline's they have to give us

00:02:01,079 --> 00:02:05,579
our data so really we have the shopping

00:02:03,210 --> 00:02:07,290
teams which could provide the customer

00:02:05,579 --> 00:02:09,750
experience and then we also have our

00:02:07,290 --> 00:02:10,920
supply teams but today I'm just gonna be

00:02:09,750 --> 00:02:12,900
talking about the shopping side of

00:02:10,920 --> 00:02:13,770
things so mostly anything you've

00:02:12,900 --> 00:02:15,480
interacted with

00:02:13,770 --> 00:02:19,440
sites you've probably seen powering

00:02:15,480 --> 00:02:22,050
those UIs so the company's scope for

00:02:19,440 --> 00:02:25,140
just the shopping teams is that we have

00:02:22,050 --> 00:02:27,450
over 500 developers across the globe and

00:02:25,140 --> 00:02:29,160
that's just developers I'm that doesn't

00:02:27,450 --> 00:02:32,670
include our product managers our

00:02:29,160 --> 00:02:34,740
managers of Engineers our designers we

00:02:32,670 --> 00:02:36,960
are a very large company who manages

00:02:34,740 --> 00:02:39,990
these products that you interact with

00:02:36,960 --> 00:02:41,700
and so this communication is very

00:02:39,990 --> 00:02:43,950
difficult especially when you go across

00:02:41,700 --> 00:02:45,450
the globe across time zones we have done

00:02:43,950 --> 00:02:46,020
have meetings at different times with

00:02:45,450 --> 00:02:48,240
India

00:02:46,020 --> 00:02:50,190
I work in Seattle and that's not a very

00:02:48,240 --> 00:02:53,760
friendly time zone overlap I've taken

00:02:50,190 --> 00:02:55,860
lots of 7:00 a.m. meetings and we also

00:02:53,760 --> 00:02:58,890
have lots of API teams that power these

00:02:55,860 --> 00:03:01,140
different products so we have different

00:02:58,890 --> 00:03:03,720
api's to power the shopping products

00:03:01,140 --> 00:03:06,810
like hotels flights booking customer

00:03:03,720 --> 00:03:09,390
data all those api's are managed by an

00:03:06,810 --> 00:03:11,010
entire team and then we have that front

00:03:09,390 --> 00:03:13,440
end clients or apps they're actually

00:03:11,010 --> 00:03:14,910
consuming that data and we have over 50

00:03:13,440 --> 00:03:17,130
different web pages that you might

00:03:14,910 --> 00:03:18,330
interact with or our mobile apps like

00:03:17,130 --> 00:03:20,850
iOS and Android

00:03:18,330 --> 00:03:22,860
we're onboarding new apps every day and

00:03:20,850 --> 00:03:24,630
all these different apps have teams that

00:03:22,860 --> 00:03:29,340
manage them and they all have to consume

00:03:24,630 --> 00:03:31,770
this data so really we started off this

00:03:29,340 --> 00:03:34,590
journey by taking a look actually at our

00:03:31,770 --> 00:03:36,750
customer experience this wasn't really

00:03:34,590 --> 00:03:38,670
around graph QL it started off us

00:03:36,750 --> 00:03:40,440
looking at what the site looks like

00:03:38,670 --> 00:03:43,530
today and noticing that there's a

00:03:40,440 --> 00:03:45,870
discrepancy as a traveler coming to any

00:03:43,530 --> 00:03:49,200
of our brands you might see different

00:03:45,870 --> 00:03:50,580
colors different data that whether

00:03:49,200 --> 00:03:52,200
you're using the mobile app or the

00:03:50,580 --> 00:03:55,350
website and they're all kind of similar

00:03:52,200 --> 00:03:56,970
they're all using yellow and blue on

00:03:55,350 --> 00:03:59,070
Expedia and we're all using the other

00:03:56,970 --> 00:04:00,450
colors on different brands but really

00:03:59,070 --> 00:04:02,970
they're there's still some minor

00:04:00,450 --> 00:04:05,640
discrepancies and so our first actual

00:04:02,970 --> 00:04:07,260
push for doing this kind of change was

00:04:05,640 --> 00:04:09,959
that we wanted to align the customer

00:04:07,260 --> 00:04:13,860
experience so things like the fill

00:04:09,959 --> 00:04:15,540
filters in sort selection so here on the

00:04:13,860 --> 00:04:17,700
Left right we just have an option you

00:04:15,540 --> 00:04:19,440
have that filled filter filters and

00:04:17,700 --> 00:04:21,090
pills they come up on the top of the

00:04:19,440 --> 00:04:22,650
screen versus like on the mobile app

00:04:21,090 --> 00:04:24,930
they're on the bottom and you might

00:04:22,650 --> 00:04:26,400
think they sure that's fine but really

00:04:24,930 --> 00:04:27,280
it should just be the same across all

00:04:26,400 --> 00:04:29,970
our apps and all our

00:04:27,280 --> 00:04:32,320
designs and often you might even get

00:04:29,970 --> 00:04:35,470
discrepancies in the data we show so

00:04:32,320 --> 00:04:36,970
here we have this concept of a message

00:04:35,470 --> 00:04:39,669
which would tell you that hey you're

00:04:36,970 --> 00:04:40,810
booking a hotel in Maui and it's pretty

00:04:39,669 --> 00:04:43,090
heavily booked you might want to book

00:04:40,810 --> 00:04:44,680
soon that data doesn't even appear

00:04:43,090 --> 00:04:46,419
anywhere on our mobile sites because

00:04:44,680 --> 00:04:49,510
they're using a different API to get the

00:04:46,419 --> 00:04:51,130
hotel data so we wanted to first align

00:04:49,510 --> 00:04:54,490
the customer experience which also

00:04:51,130 --> 00:04:56,139
requires that we align the data and so

00:04:54,490 --> 00:04:59,530
how did we get to this state of all

00:04:56,139 --> 00:05:01,330
these different experiences well we have

00:04:59,530 --> 00:05:04,150
our different domain teams on the bottom

00:05:01,330 --> 00:05:06,430
here we have hotels flights cars etc and

00:05:04,150 --> 00:05:08,230
they have all the clients at the top

00:05:06,430 --> 00:05:11,230
that we have to talk to our progressive

00:05:08,230 --> 00:05:14,440
web apps on web our native apps new

00:05:11,230 --> 00:05:16,090
alexa and google home chat bots and just

00:05:14,440 --> 00:05:18,130
like matt talked about earlier we had

00:05:16,090 --> 00:05:19,570
all these connections all the

00:05:18,130 --> 00:05:22,300
connections between the clients have to

00:05:19,570 --> 00:05:24,370
be managed not only on the clients but

00:05:22,300 --> 00:05:27,190
also on the server are on the service

00:05:24,370 --> 00:05:29,139
teams so as a client if i want to use

00:05:27,190 --> 00:05:31,390
some new data or expose a new feature to

00:05:29,139 --> 00:05:33,430
a traveler i have to first know that

00:05:31,390 --> 00:05:34,660
this data even exists at Expedia you

00:05:33,430 --> 00:05:36,640
have to know that there's this team

00:05:34,660 --> 00:05:38,320
somewhere producing this data because

00:05:36,640 --> 00:05:40,120
again we're a very large company you

00:05:38,320 --> 00:05:42,220
might not know that that team is working

00:05:40,120 --> 00:05:44,169
on this product but let's say you do

00:05:42,220 --> 00:05:45,490
find them you find their product now you

00:05:44,169 --> 00:05:47,890
have to work with their documentation

00:05:45,490 --> 00:05:50,410
maybe they're doing REST API this way

00:05:47,890 --> 00:05:52,150
maybe they're doing JSON maybe they're

00:05:50,410 --> 00:05:53,950
doing XML everything's different

00:05:52,150 --> 00:05:56,289
depending on the API you're interacting

00:05:53,950 --> 00:05:57,850
with and then as a service owner you

00:05:56,289 --> 00:06:00,880
also have to kind of do all this client

00:05:57,850 --> 00:06:03,430
management if you have to deprecate a

00:06:00,880 --> 00:06:05,770
REST API or maybe an endpoint or maybe

00:06:03,430 --> 00:06:08,710
even just an individual individual field

00:06:05,770 --> 00:06:10,660
on your API it can be very difficult to

00:06:08,710 --> 00:06:13,060
like talk to every single client that's

00:06:10,660 --> 00:06:14,530
using your API and send out these emails

00:06:13,060 --> 00:06:17,979
saying hey we're going to turn it off

00:06:14,530 --> 00:06:19,780
like you better stop using it and just

00:06:17,979 --> 00:06:23,020
this cross communication across a global

00:06:19,780 --> 00:06:26,140
company is very difficult we started to

00:06:23,020 --> 00:06:28,450
kind of reduce some of this effort when

00:06:26,140 --> 00:06:30,760
we moved to a pattern known as a BFF or

00:06:28,450 --> 00:06:33,010
back-end for front-end we started doing

00:06:30,760 --> 00:06:35,890
this for our mobile web sites

00:06:33,010 --> 00:06:37,750
specifically on the hotels page so BFF

00:06:35,890 --> 00:06:39,789
just kind of gave us one entry point

00:06:37,750 --> 00:06:41,139
where the client could talk to this the

00:06:39,789 --> 00:06:42,610
single endpoint it's go

00:06:41,139 --> 00:06:44,800
to take care of talking to all those

00:06:42,610 --> 00:06:46,960
different services so now the client can

00:06:44,800 --> 00:06:48,909
be pretty pretty dumb it doesn't have

00:06:46,960 --> 00:06:51,460
any business logic in it and the data

00:06:48,909 --> 00:06:53,590
returned from the BFF would just be

00:06:51,460 --> 00:06:57,789
exactly what that client needed to power

00:06:53,590 --> 00:07:00,550
a UI but if we wanted to roll this

00:06:57,789 --> 00:07:02,560
pattern out for everyone we would have

00:07:00,550 --> 00:07:05,650
to essentially create a BFF for every

00:07:02,560 --> 00:07:06,939
single client and that just really

00:07:05,650 --> 00:07:08,319
doesn't fix anything because now we just

00:07:06,939 --> 00:07:10,779
have another service layer in between

00:07:08,319 --> 00:07:12,759
all the clients we really needed a BFF

00:07:10,779 --> 00:07:15,219
for everyone and again if we want to

00:07:12,759 --> 00:07:17,529
align on the traveler experience the UI

00:07:15,219 --> 00:07:20,349
we also want to align on the data we're

00:07:17,529 --> 00:07:22,719
showing them so that's where a graph QL

00:07:20,349 --> 00:07:24,939
came in we realize graph QL is exactly

00:07:22,719 --> 00:07:28,029
what needed to power this experience if

00:07:24,939 --> 00:07:29,500
we have one entry point for our clients

00:07:28,029 --> 00:07:30,879
to talk to they don't have to worry

00:07:29,500 --> 00:07:33,039
about all these client connections

00:07:30,879 --> 00:07:35,259
managing these communications with these

00:07:33,039 --> 00:07:37,150
external teams and then as a service

00:07:35,259 --> 00:07:39,849
owner you know you can just expose your

00:07:37,150 --> 00:07:41,589
data into the schema and any client who

00:07:39,849 --> 00:07:43,050
needs that data can consume it you don't

00:07:41,589 --> 00:07:45,129
have to worry about managing these

00:07:43,050 --> 00:07:46,839
deprecations you can just deprecated it

00:07:45,129 --> 00:07:48,339
in the schema and you can just talk with

00:07:46,839 --> 00:07:50,560
the clients and then we have our

00:07:48,339 --> 00:07:53,580
operation registry to look at exactly

00:07:50,560 --> 00:07:56,680
who's using it but as I mentioned before

00:07:53,580 --> 00:07:59,500
these hotel teams the flight team these

00:07:56,680 --> 00:08:01,990
are massive teams I looked at just the

00:07:59,500 --> 00:08:05,379
other day the hotel's API we have over

00:08:01,990 --> 00:08:07,719
150 the developers contributing in just

00:08:05,379 --> 00:08:10,060
the past few months so there is no way

00:08:07,719 --> 00:08:12,460
that we can have every single team

00:08:10,060 --> 00:08:15,009
contribute into a single schema so this

00:08:12,460 --> 00:08:16,449
is where we almost immediately from the

00:08:15,009 --> 00:08:19,419
start knew we had to work with a

00:08:16,449 --> 00:08:21,939
federated schema model so we have at the

00:08:19,419 --> 00:08:24,370
top here actually or in the middle we

00:08:21,939 --> 00:08:27,129
have our hotel service and so the hotels

00:08:24,370 --> 00:08:29,439
team can work on their own graph QL

00:08:27,129 --> 00:08:31,060
service they expose the schema because

00:08:29,439 --> 00:08:33,279
they really understand the hotel's

00:08:31,060 --> 00:08:35,229
domain they know exactly the products

00:08:33,279 --> 00:08:37,149
and data they need to provide and then

00:08:35,229 --> 00:08:38,769
all the different teams can provide

00:08:37,149 --> 00:08:41,529
their individual graphical micro

00:08:38,769 --> 00:08:43,180
services and then the graphical gateway

00:08:41,529 --> 00:08:44,980
at the top can just look at these

00:08:43,180 --> 00:08:47,079
different services and stitch them

00:08:44,980 --> 00:08:49,180
together and expose still a single

00:08:47,079 --> 00:08:50,740
schema for our clients but now the teams

00:08:49,180 --> 00:08:53,050
don't have to worry about conflicting

00:08:50,740 --> 00:08:54,970
and working in a single codebase so this

00:08:53,050 --> 00:08:57,040
is what's known as a federated model

00:08:54,970 --> 00:08:58,690
which again a lot of the Apollo

00:08:57,040 --> 00:09:01,240
developers re have talked about here

00:08:58,690 --> 00:09:03,250
we're not quite using the same tooling

00:09:01,240 --> 00:09:04,780
that they've mentioned but I'm going to

00:09:03,250 --> 00:09:09,370
talk about the tooling that we are using

00:09:04,780 --> 00:09:11,590
so how did we go from the REST API model

00:09:09,370 --> 00:09:13,360
to this graph QL service well it wasn't

00:09:11,590 --> 00:09:15,580
just in one fell swoop

00:09:13,360 --> 00:09:17,140
we started with hotels and then we

00:09:15,580 --> 00:09:19,660
started bringing new clients and new

00:09:17,140 --> 00:09:22,300
data on board as they start getting

00:09:19,660 --> 00:09:24,100
familiar with graph QL and as we felt

00:09:22,300 --> 00:09:27,180
the need to start exposing that data and

00:09:24,100 --> 00:09:30,100
this requires some technology changes so

00:09:27,180 --> 00:09:32,440
our existing kind of stack was very

00:09:30,100 --> 00:09:35,530
heavily powered by Java most of our REST

00:09:32,440 --> 00:09:37,450
API s are built on Java we have lots of

00:09:35,530 --> 00:09:40,240
Java libraries are actually still shared

00:09:37,450 --> 00:09:43,180
across all those API s and we needed to

00:09:40,240 --> 00:09:45,250
use those libraries and a lot of the

00:09:43,180 --> 00:09:47,350
servers a lot of these REST API s are

00:09:45,250 --> 00:09:49,240
built in different technologies so some

00:09:47,350 --> 00:09:51,700
teams might be using spring boots some

00:09:49,240 --> 00:09:52,660
teams might be using drop wizard and if

00:09:51,700 --> 00:09:55,360
we're going to be creating these

00:09:52,660 --> 00:09:56,770
individual micro services it was gonna

00:09:55,360 --> 00:09:58,600
be kind of complicated if everyone got

00:09:56,770 --> 00:09:59,980
to use their own technology and also

00:09:58,600 --> 00:10:02,530
everyone was just doing different

00:09:59,980 --> 00:10:03,730
logging and metrics so some teams are

00:10:02,530 --> 00:10:05,380
using different libraries they were

00:10:03,730 --> 00:10:07,240
logging in different ways some we're

00:10:05,380 --> 00:10:08,470
using Splunk to log their data others

00:10:07,240 --> 00:10:10,090
were just using gravano

00:10:08,470 --> 00:10:11,650
all these tools you might have heard of

00:10:10,090 --> 00:10:13,420
everyone was doing something different

00:10:11,650 --> 00:10:15,850
and we realized if we're gonna really

00:10:13,420 --> 00:10:18,160
create this small micro service level to

00:10:15,850 --> 00:10:20,170
expose it we wanted teams to have this

00:10:18,160 --> 00:10:22,660
simplest way to onboard onto that

00:10:20,170 --> 00:10:24,220
architecture and so that required is

00:10:22,660 --> 00:10:27,070
kind of standardizing some of our

00:10:24,220 --> 00:10:29,500
tooling so since we're pretty heavy on

00:10:27,070 --> 00:10:31,390
Java we decided that we would use graph

00:10:29,500 --> 00:10:34,390
QL Java this is just a server

00:10:31,390 --> 00:10:36,220
implementation of the graphical spec so

00:10:34,390 --> 00:10:38,800
allows you to expose a graphical schema

00:10:36,220 --> 00:10:40,960
using Java services and then we actually

00:10:38,800 --> 00:10:42,850
built confident on top of that so

00:10:40,960 --> 00:10:45,730
Coughlin is a great language it has some

00:10:42,850 --> 00:10:48,190
great features and additional to

00:10:45,730 --> 00:10:50,830
creating the server we actually built a

00:10:48,190 --> 00:10:52,720
graph QL server SDK if you want to call

00:10:50,830 --> 00:10:54,640
it that we basically take care of

00:10:52,720 --> 00:10:56,770
standardizing everything that the

00:10:54,640 --> 00:10:59,500
developer would normally do to start up

00:10:56,770 --> 00:11:01,000
a new service and just put that into a

00:10:59,500 --> 00:11:03,760
template so now you just go to this

00:11:01,000 --> 00:11:05,920
template you fork it and then you get to

00:11:03,760 --> 00:11:07,630
just write your simple query on exposing

00:11:05,920 --> 00:11:08,709
your business logic you don't have to

00:11:07,630 --> 00:11:10,209
worry about

00:11:08,709 --> 00:11:12,459
you know how does the server start up

00:11:10,209 --> 00:11:14,470
what server technology we're using what

00:11:12,459 --> 00:11:15,999
is the log in monitoring metric library

00:11:14,470 --> 00:11:18,069
we're using everyone's going to do it

00:11:15,999 --> 00:11:18,790
the same way and if we scale this across

00:11:18,069 --> 00:11:20,350
the company

00:11:18,790 --> 00:11:22,660
it's just benefits everyone because now

00:11:20,350 --> 00:11:24,790
everyone's using the same tooling also

00:11:22,660 --> 00:11:26,529
since now we have this SDK how

00:11:24,790 --> 00:11:29,110
everything's built or everything is

00:11:26,529 --> 00:11:32,079
coded we also want to standardize our CI

00:11:29,110 --> 00:11:34,420
CD process so all these tools kind of

00:11:32,079 --> 00:11:36,309
come together to make sure that everyone

00:11:34,420 --> 00:11:38,319
is doing the same thing because again if

00:11:36,309 --> 00:11:40,629
we work in a large-scale company like

00:11:38,319 --> 00:11:42,579
Expedia Group we just wanted to have the

00:11:40,629 --> 00:11:44,350
best time available and if there is

00:11:42,579 --> 00:11:46,149
something wrong with the tooling if one

00:11:44,350 --> 00:11:49,420
person fixes it from the community then

00:11:46,149 --> 00:11:51,009
everyone gets the benefits so speaking

00:11:49,420 --> 00:11:52,839
of some of the tooling we actually open

00:11:51,009 --> 00:11:55,449
sourced one of those parts of that

00:11:52,839 --> 00:11:58,480
tooling of the SDK and that is graphic

00:11:55,449 --> 00:12:00,879
you'll Colin so right now if you were to

00:11:58,480 --> 00:12:03,129
create a graphic you'll java service you

00:12:00,879 --> 00:12:04,809
have to define your schema you have to

00:12:03,129 --> 00:12:06,999
either do that with a schema file or

00:12:04,809 --> 00:12:08,949
using there kind of other Java

00:12:06,999 --> 00:12:11,350
templating the way you kind of just

00:12:08,949 --> 00:12:13,179
define the schema and then you have your

00:12:11,350 --> 00:12:15,429
resolvers so what you have to implement

00:12:13,179 --> 00:12:16,809
that schema and for us we just noticed

00:12:15,429 --> 00:12:18,249
there's a lot up location because now

00:12:16,809 --> 00:12:19,899
what the types have to match and

00:12:18,249 --> 00:12:21,999
everything just it gets a little

00:12:19,899 --> 00:12:24,069
complicated if you miss something yes

00:12:21,999 --> 00:12:26,110
that can be checked in build time but we

00:12:24,069 --> 00:12:29,019
just thought hey Kotlin is a great

00:12:26,110 --> 00:12:30,999
language it has strong types it has the

00:12:29,019 --> 00:12:33,069
concept of null ability just like graph

00:12:30,999 --> 00:12:35,470
QL what if we could just generate the

00:12:33,069 --> 00:12:37,749
schema from your existing code so that's

00:12:35,470 --> 00:12:39,819
exactly what we do so graph QL Kotlin

00:12:37,749 --> 00:12:42,189
just looks at like a function you expose

00:12:39,819 --> 00:12:44,649
and it looks at the arguments looks at

00:12:42,189 --> 00:12:46,509
the return type and using reflection we

00:12:44,649 --> 00:12:48,730
can just generate the schema from your

00:12:46,509 --> 00:12:51,549
existing code so that's how we kind of

00:12:48,730 --> 00:12:53,769
enable developers to not worry about the

00:12:51,549 --> 00:12:55,540
server or the SDK or any of that they

00:12:53,769 --> 00:12:57,819
just have to write a function which is a

00:12:55,540 --> 00:13:00,519
query and then that function just gets

00:12:57,819 --> 00:13:03,399
exposed in the schema so feel free to

00:13:00,519 --> 00:13:07,480
check us out on github again it's graph

00:13:03,399 --> 00:13:09,069
kilcullen so since we're doing schema

00:13:07,480 --> 00:13:13,660
stitching we have all these different

00:13:09,069 --> 00:13:15,999
services one thing we had issue was with

00:13:13,660 --> 00:13:19,360
those conflicting types when we end up

00:13:15,999 --> 00:13:22,030
merging the schema so if I'm in the

00:13:19,360 --> 00:13:25,150
hotels team and I define a type like

00:13:22,030 --> 00:13:27,250
generic type like coordinate and I

00:13:25,150 --> 00:13:29,530
merged that into our schema and that

00:13:27,250 --> 00:13:31,750
gets exposed into the global schema if

00:13:29,530 --> 00:13:33,640
now the flights team wants to have some

00:13:31,750 --> 00:13:35,470
type called a coordinate like a GPS

00:13:33,640 --> 00:13:36,910
coordinate that's actually going to

00:13:35,470 --> 00:13:39,670
conflict when we do our schema stitching

00:13:36,910 --> 00:13:41,890
and so we wanted to standardize some of

00:13:39,670 --> 00:13:44,410
the types that we're using across all

00:13:41,890 --> 00:13:46,630
our services so this is where we have

00:13:44,410 --> 00:13:48,430
this concept of a shared type so we just

00:13:46,630 --> 00:13:51,370
created a simple directive hat shared

00:13:48,430 --> 00:13:52,660
and this just kind of allows us to look

00:13:51,370 --> 00:13:55,900
at the schema when we're doing the

00:13:52,660 --> 00:13:57,490
stitching and know that the the services

00:13:55,900 --> 00:13:59,740
are exposing this type this is actually

00:13:57,490 --> 00:14:01,060
coming from the SDK and this is valid

00:13:59,740 --> 00:14:02,410
this is not going to be a type conflict

00:14:01,060 --> 00:14:05,020
and it's going to look exactly the same

00:14:02,410 --> 00:14:06,970
across all the services and we didn't

00:14:05,020 --> 00:14:08,470
just do this for basic types like

00:14:06,970 --> 00:14:11,170
coordinates we did it for things like

00:14:08,470 --> 00:14:13,240
our date and our time so now if you're

00:14:11,170 --> 00:14:15,250
providing a date it's gonna be exactly

00:14:13,240 --> 00:14:17,290
the same format you don't no longer have

00:14:15,250 --> 00:14:19,390
to worry it's a date strain and it's a

00:14:17,290 --> 00:14:21,190
month month day day year year or is it

00:14:19,390 --> 00:14:22,660
day first what what's the format

00:14:21,190 --> 00:14:25,330
everyone's gonna use the same date

00:14:22,660 --> 00:14:26,860
object as these well defined types the

00:14:25,330 --> 00:14:28,750
same thing goes for like how we expose

00:14:26,860 --> 00:14:30,820
our money objects everyone's going to

00:14:28,750 --> 00:14:33,160
get the same format because we require

00:14:30,820 --> 00:14:35,470
everyone to pass in locale so now our

00:14:33,160 --> 00:14:37,390
SDK can take care of doing localization

00:14:35,470 --> 00:14:40,060
so our money's always going to look the

00:14:37,390 --> 00:14:41,500
same across the site but also again

00:14:40,060 --> 00:14:44,200
since we're trying to standardize the

00:14:41,500 --> 00:14:46,840
way our site looks we have shared types

00:14:44,200 --> 00:14:49,570
around UI elements so things like images

00:14:46,840 --> 00:14:52,060
an image should always have a full URL

00:14:49,570 --> 00:14:55,060
and the text that we have for our

00:14:52,060 --> 00:14:57,580
accessibility so every image exposed on

00:14:55,060 --> 00:15:01,810
our schema will always be the SDK image

00:14:57,580 --> 00:15:04,060
type so how do we know that these types

00:15:01,810 --> 00:15:06,490
don't conflict in the schema well like I

00:15:04,060 --> 00:15:08,590
said we're using schema stitching this

00:15:06,490 --> 00:15:10,810
is kind of our first approach on how we

00:15:08,590 --> 00:15:12,610
did schema stitching we had our

00:15:10,810 --> 00:15:14,230
individual micro services down here at

00:15:12,610 --> 00:15:16,450
the bottom and then we have to get them

00:15:14,230 --> 00:15:18,640
somehow to the gateway so we actually

00:15:16,450 --> 00:15:22,060
used the Apollo schema stitching code

00:15:18,640 --> 00:15:23,620
that we talked about earlier and we say

00:15:22,060 --> 00:15:25,960
hey let's just put this code in the

00:15:23,620 --> 00:15:28,150
Gateway we'll run some polling operation

00:15:25,960 --> 00:15:30,580
and every ten seconds we'll just look at

00:15:28,150 --> 00:15:32,710
the services if there's an update to the

00:15:30,580 --> 00:15:34,450
schema we'll just merge the schema back

00:15:32,710 --> 00:15:36,040
together and redeploy the Gateway and

00:15:34,450 --> 00:15:38,470
this worked

00:15:36,040 --> 00:15:40,630
but we obviously ran into quite a few

00:15:38,470 --> 00:15:43,240
problems polling takes a lot of

00:15:40,630 --> 00:15:44,710
resources we just might have missed

00:15:43,240 --> 00:15:47,170
something if there was a miss deployment

00:15:44,710 --> 00:15:50,290
and like one AWS region but not the

00:15:47,170 --> 00:15:52,150
other so we pretty quickly realized we

00:15:50,290 --> 00:15:54,610
need to change this model and we now

00:15:52,150 --> 00:15:56,950
have this new model where at Build time

00:15:54,610 --> 00:16:00,070
when change is made it's already

00:15:56,950 --> 00:16:03,070
approved to a schema like the hotel

00:16:00,070 --> 00:16:05,710
service they push their schema to an s3

00:16:03,070 --> 00:16:08,260
bucket and that s3 bucket is just now

00:16:05,710 --> 00:16:10,480
being watched by some lambda which has

00:16:08,260 --> 00:16:11,890
our schema stitching code and every

00:16:10,480 --> 00:16:13,450
individual service can have their own

00:16:11,890 --> 00:16:15,820
bucket or just some location which we

00:16:13,450 --> 00:16:18,010
understand the lambda notifies whenever

00:16:15,820 --> 00:16:20,740
a bucket update is made it gets the

00:16:18,010 --> 00:16:22,540
latest version and then it just stitches

00:16:20,740 --> 00:16:24,820
together the schema with our code and

00:16:22,540 --> 00:16:26,830
pushes out to another s3 bucket which is

00:16:24,820 --> 00:16:29,500
the global schema bucket so now we have

00:16:26,830 --> 00:16:30,880
this history of the schema as well and

00:16:29,500 --> 00:16:32,650
then that now the Gateway can be

00:16:30,880 --> 00:16:34,690
notified with a push model instead

00:16:32,650 --> 00:16:36,730
whenever there is a new schema and we

00:16:34,690 --> 00:16:39,880
can add more information into this

00:16:36,730 --> 00:16:42,430
pipeline so now since we build the

00:16:39,880 --> 00:16:44,800
schema a trunk are at Build time we can

00:16:42,430 --> 00:16:47,170
publish metadata into the s3 bucket like

00:16:44,800 --> 00:16:49,270
what was the SDK version this service

00:16:47,170 --> 00:16:51,460
was using what was the get hash what was

00:16:49,270 --> 00:16:53,260
some of the other like Expedia specific

00:16:51,460 --> 00:16:54,970
libraries that we were using when we

00:16:53,260 --> 00:16:58,120
built this schema and just allows us to

00:16:54,970 --> 00:17:00,670
have more information whenever we do our

00:16:58,120 --> 00:17:04,360
introspection or look at into what

00:17:00,670 --> 00:17:07,450
services are doing also since we are

00:17:04,360 --> 00:17:09,760
using Apollo tooling we are pushing the

00:17:07,450 --> 00:17:12,430
schema whenever do the stitching into

00:17:09,760 --> 00:17:15,040
Apollo engine and primarily just the

00:17:12,430 --> 00:17:17,200
schema registry so Apollo provides a

00:17:15,040 --> 00:17:20,560
couple tools operation registry schema

00:17:17,200 --> 00:17:23,320
registry client registry and really just

00:17:20,560 --> 00:17:25,420
any schema registry is gonna be almost

00:17:23,320 --> 00:17:28,000
invaluable for us whether it's Apollo or

00:17:25,420 --> 00:17:29,680
just building your own but for us having

00:17:28,000 --> 00:17:31,510
a schema registry has allowed us to do

00:17:29,680 --> 00:17:33,100
some of these validation things that

00:17:31,510 --> 00:17:34,960
we've mentioned already in these and

00:17:33,100 --> 00:17:36,700
some of these talks right so if we have

00:17:34,960 --> 00:17:39,430
this history or we have this knowledge

00:17:36,700 --> 00:17:41,560
of exactly what is in the schema so a

00:17:39,430 --> 00:17:43,720
property or a hotel here has all these

00:17:41,560 --> 00:17:45,400
fields we know exactly whose query net

00:17:43,720 --> 00:17:47,860
because everyone has to go through the

00:17:45,400 --> 00:17:49,420
Gateway we know exactly what how many

00:17:47,860 --> 00:17:49,870
times per minute this query is being a

00:17:49,420 --> 00:17:51,760
few

00:17:49,870 --> 00:17:54,730
they used what operations are being used

00:17:51,760 --> 00:17:57,429
and what exactly the client names that

00:17:54,730 --> 00:17:59,950
are using this field so if someone tries

00:17:57,429 --> 00:18:02,650
to check in code change to a schema and

00:17:59,950 --> 00:18:04,570
that schema change would either be

00:18:02,650 --> 00:18:07,210
breaking a client or maybe you're just

00:18:04,570 --> 00:18:10,659
conflicting with a type name an existing

00:18:07,210 --> 00:18:12,760
schema we can fail you on an OPR check

00:18:10,659 --> 00:18:14,559
and github right so this is just almost

00:18:12,760 --> 00:18:16,240
a valuable for us because before we were

00:18:14,559 --> 00:18:17,860
trying to build this on our own and as

00:18:16,240 --> 00:18:20,169
soon as we started using Apollo and

00:18:17,860 --> 00:18:22,179
generally this is it we wanted to have

00:18:20,169 --> 00:18:23,260
these checks in the pipeline here and

00:18:22,179 --> 00:18:25,720
now we don't have to worry about

00:18:23,260 --> 00:18:27,640
checking it on on build time we're

00:18:25,720 --> 00:18:31,240
failing the deployment instead we can do

00:18:27,640 --> 00:18:33,610
it like on PR time so now that we have

00:18:31,240 --> 00:18:35,500
all these technology changes and we want

00:18:33,610 --> 00:18:38,289
to start bringing teams on to this

00:18:35,500 --> 00:18:40,390
concept of graph QL it's going to take a

00:18:38,289 --> 00:18:42,850
while it took a while for us to start

00:18:40,390 --> 00:18:45,429
teaching everyone these new concepts

00:18:42,850 --> 00:18:47,890
which guys this culture change in the

00:18:45,429 --> 00:18:49,750
company previously teams were pretty

00:18:47,890 --> 00:18:51,940
silent so that you lose to work on their

00:18:49,750 --> 00:18:54,279
own teams so the hotel's team actually

00:18:51,940 --> 00:18:56,350
created their own api's for shopping but

00:18:54,279 --> 00:18:58,480
then they also created their own web

00:18:56,350 --> 00:18:59,890
apps so they never talked with the

00:18:58,480 --> 00:19:01,750
flight's team because they just worked

00:18:59,890 --> 00:19:04,029
on hotels flights just worked on flights

00:19:01,750 --> 00:19:06,039
and so on and so on no one ever had this

00:19:04,029 --> 00:19:07,840
cross communication but now if we're

00:19:06,039 --> 00:19:10,059
going to be communicating across a

00:19:07,840 --> 00:19:13,149
single schema that needs to change so

00:19:10,059 --> 00:19:15,460
how do we have this change across our

00:19:13,149 --> 00:19:17,020
company culture and the first thing we

00:19:15,460 --> 00:19:19,600
did is we kind of established these

00:19:17,020 --> 00:19:22,480
schema managers so I work on the team of

00:19:19,600 --> 00:19:24,220
these schema managers and our goal is to

00:19:22,480 --> 00:19:26,140
kind of build the tooling out for the

00:19:24,220 --> 00:19:28,000
company that we're using so we've been

00:19:26,140 --> 00:19:31,029
working with Apollo to make sure that

00:19:28,000 --> 00:19:33,250
our teams get all the benefits and tools

00:19:31,029 --> 00:19:35,140
that they need to build the schema but

00:19:33,250 --> 00:19:38,260
we also are kind of the gateway and the

00:19:35,140 --> 00:19:41,440
gatekeepers per se of the overall graph

00:19:38,260 --> 00:19:43,059
overall one schema at the top level so

00:19:41,440 --> 00:19:46,149
as we're bringing more and more teams on

00:19:43,059 --> 00:19:47,770
to this global schema we need to make

00:19:46,149 --> 00:19:50,500
sure they understand the process of what

00:19:47,770 --> 00:19:52,149
graph QL means to them and so we need to

00:19:50,500 --> 00:19:54,669
coordinate with them make sure that

00:19:52,149 --> 00:19:56,950
they're following the best practices and

00:19:54,669 --> 00:19:58,720
after they start onboarding and they

00:19:56,950 --> 00:20:00,940
maybe start creating a schema now we

00:19:58,720 --> 00:20:02,440
need to make sure that if they start

00:20:00,940 --> 00:20:03,580
doing some process that we've seen

00:20:02,440 --> 00:20:05,499
before and another team

00:20:03,580 --> 00:20:07,299
we now can actually have this like glue

00:20:05,499 --> 00:20:08,919
between the two teams so now flights and

00:20:07,299 --> 00:20:10,659
hotel hotels can talk to each other

00:20:08,919 --> 00:20:13,330
because maybe they're actually doing the

00:20:10,659 --> 00:20:15,159
same patterns and maybe we don't have a

00:20:13,330 --> 00:20:16,869
shared type that they're using right now

00:20:15,159 --> 00:20:18,460
but maybe there's a new addition for

00:20:16,869 --> 00:20:20,470
some new share type that we can check

00:20:18,460 --> 00:20:23,409
into the SDK and that would be really

00:20:20,470 --> 00:20:25,690
helpful for everyone so schema managers

00:20:23,409 --> 00:20:29,049
for us has just been a great step to

00:20:25,690 --> 00:20:31,090
kind of change the culture and also we

00:20:29,049 --> 00:20:34,480
as the managers we need to define the

00:20:31,090 --> 00:20:36,730
rules of the schema and so we wrote down

00:20:34,480 --> 00:20:37,600
one of our big decisions from the start

00:20:36,730 --> 00:20:38,980
was that we're going to document

00:20:37,600 --> 00:20:41,889
everything is going to be written down

00:20:38,980 --> 00:20:43,809
in a single location so that all these

00:20:41,889 --> 00:20:46,840
teams as they're onboarding again and

00:20:43,809 --> 00:20:48,730
the teams are huge teams teams of 2030

00:20:46,840 --> 00:20:50,830
people sometimes they need to have a

00:20:48,730 --> 00:20:53,379
single location where they can go and

00:20:50,830 --> 00:20:55,929
look at what decisions are being made

00:20:53,379 --> 00:20:58,509
and what that means to use graph queue

00:20:55,929 --> 00:21:00,639
at Expedia but it also just doesn't help

00:20:58,509 --> 00:21:02,409
the teams that are consuming this

00:21:00,639 --> 00:21:04,239
documentation it helps the schema

00:21:02,409 --> 00:21:06,700
managers ourselves because I have

00:21:04,239 --> 00:21:08,590
teammates who work in London or Chicago

00:21:06,700 --> 00:21:10,509
and so I'm not always going to be able

00:21:08,590 --> 00:21:14,080
to make a meeting with someone from

00:21:10,509 --> 00:21:16,119
India so if they're going to be doing

00:21:14,080 --> 00:21:18,039
meeting with some other teams they're

00:21:16,119 --> 00:21:19,299
onboarding we need to make sure we as

00:21:18,039 --> 00:21:21,279
the schema managers or having a

00:21:19,299 --> 00:21:23,109
consistent message that we make sure

00:21:21,279 --> 00:21:25,450
everyone's doing the same thing so

00:21:23,109 --> 00:21:28,690
documentation has been really really

00:21:25,450 --> 00:21:31,330
important for us another part is that

00:21:28,690 --> 00:21:33,190
we're doing schema reviews so we talked

00:21:31,330 --> 00:21:35,980
with the team and they know they're good

00:21:33,190 --> 00:21:37,989
to onboard on to graph QL they got on

00:21:35,980 --> 00:21:40,509
the hype train and they want to do graph

00:21:37,989 --> 00:21:42,999
QL let's go so we make sure we actually

00:21:40,509 --> 00:21:45,359
meet with them first and say is your

00:21:42,999 --> 00:21:48,129
data actually valuable to the schema

00:21:45,359 --> 00:21:50,019
because it might not be I'll be talking

00:21:48,129 --> 00:21:52,989
about this just a little bit on the next

00:21:50,019 --> 00:21:54,820
slide here but not all the data needs to

00:21:52,989 --> 00:21:56,889
be in graph QL right you don't need to

00:21:54,820 --> 00:21:58,629
expose your entire database into your

00:21:56,889 --> 00:22:00,249
graph qo schema and so we want to make

00:21:58,629 --> 00:22:02,559
sure any data we expose is actually

00:22:00,249 --> 00:22:03,879
going to be used by the client and then

00:22:02,559 --> 00:22:06,190
if we're having this schema review

00:22:03,879 --> 00:22:07,840
they've already created the schema now

00:22:06,190 --> 00:22:09,190
we kind of just want to go over the

00:22:07,840 --> 00:22:12,700
overall structure and make sure they're

00:22:09,190 --> 00:22:14,139
doing a good schema design and that

00:22:12,700 --> 00:22:16,389
means that we have a meeting with them

00:22:14,139 --> 00:22:17,470
but not just with that team so not just

00:22:16,389 --> 00:22:19,299
the schema managers

00:22:17,470 --> 00:22:20,860
the team creating the schema since we're

00:22:19,299 --> 00:22:22,929
all contributing to one graph we

00:22:20,860 --> 00:22:25,240
actually open up these schema reviews to

00:22:22,929 --> 00:22:26,860
the entire company we want the hotel's

00:22:25,240 --> 00:22:28,870
team to be in the meeting with the

00:22:26,860 --> 00:22:31,150
flight's team to say hey this is a

00:22:28,870 --> 00:22:33,789
flight schema let's review it like you

00:22:31,150 --> 00:22:35,409
as a hotel contributor or developer you

00:22:33,789 --> 00:22:36,940
don't know anything about flights but

00:22:35,409 --> 00:22:39,250
that's perfect we want someone who knows

00:22:36,940 --> 00:22:41,230
nothing about the domain to like propose

00:22:39,250 --> 00:22:42,640
these questions like is this the best

00:22:41,230 --> 00:22:45,280
design I don't understand what that

00:22:42,640 --> 00:22:46,630
field means and if I is a developer who

00:22:45,280 --> 00:22:48,909
work at Expedia don't know what that

00:22:46,630 --> 00:22:50,169
field means in flights how is someone

00:22:48,909 --> 00:22:52,000
else who is going to be using this game

00:22:50,169 --> 00:22:53,799
again understand it so I actually bring

00:22:52,000 --> 00:22:55,630
in people without the domain knowledge

00:22:53,799 --> 00:22:57,610
to kind of question their decisions and

00:22:55,630 --> 00:23:00,220
this kind of creates a community across

00:22:57,610 --> 00:23:02,140
the whole company - right so no no

00:23:00,220 --> 00:23:05,049
longer are just the schema managers in

00:23:02,140 --> 00:23:06,820
charge of creating this great schema for

00:23:05,049 --> 00:23:08,380
everyone to use it's actually everyone's

00:23:06,820 --> 00:23:10,390
benefit right we want everyone to be

00:23:08,380 --> 00:23:11,890
invested just as we are and to making

00:23:10,390 --> 00:23:14,080
sure we create the best possible schema

00:23:11,890 --> 00:23:17,350
and the best possible schema for us

00:23:14,080 --> 00:23:18,730
actually starts with the clients so Matt

00:23:17,350 --> 00:23:21,220
kind of talked about this earlier you

00:23:18,730 --> 00:23:23,679
could take a data first approach but for

00:23:21,220 --> 00:23:26,020
us since we're trying to align on the UI

00:23:23,679 --> 00:23:28,210
first everything should be coming from

00:23:26,020 --> 00:23:30,159
the clients so that means that the

00:23:28,210 --> 00:23:32,860
client actually looks at their design

00:23:30,159 --> 00:23:35,049
and they create the perfect schema they

00:23:32,860 --> 00:23:36,909
have no knowledge of what data is

00:23:35,049 --> 00:23:38,710
provided what service capabilities are

00:23:36,909 --> 00:23:40,690
there they're just looking at the design

00:23:38,710 --> 00:23:42,640
and saying hey what data does the

00:23:40,690 --> 00:23:44,409
traveler actually need to book this

00:23:42,640 --> 00:23:46,750
product to interact with this product

00:23:44,409 --> 00:23:49,330
and then that should be the schema it

00:23:46,750 --> 00:23:50,799
has a basic structure any data that the

00:23:49,330 --> 00:23:53,049
customer doesn't see doesn't need to be

00:23:50,799 --> 00:23:55,659
in the schema and then from there you

00:23:53,049 --> 00:23:58,750
can work with the service teams to adapt

00:23:55,659 --> 00:24:00,250
the schema to meet the needs and again

00:23:58,750 --> 00:24:02,169
we want to make sure that only the data

00:24:00,250 --> 00:24:05,409
that's ended up going to be seen by the

00:24:02,169 --> 00:24:07,809
travelers is exposed in the schema yes

00:24:05,409 --> 00:24:10,450
graph QL has this option that clients

00:24:07,809 --> 00:24:12,669
can select only the fields they need but

00:24:10,450 --> 00:24:15,789
we kind of start to question that need

00:24:12,669 --> 00:24:18,100
if only a single client out of these 50

00:24:15,789 --> 00:24:19,480
clients is requesting the field maybe

00:24:18,100 --> 00:24:21,610
they shouldn't be using that field right

00:24:19,480 --> 00:24:23,679
why why are they different like what's

00:24:21,610 --> 00:24:25,750
the point of this data if this only one

00:24:23,679 --> 00:24:27,370
client is using it maybe we can start

00:24:25,750 --> 00:24:29,770
aligning these clients to actually still

00:24:27,370 --> 00:24:31,340
use the same fields now the you might

00:24:29,770 --> 00:24:33,440
have some clients right like

00:24:31,340 --> 00:24:35,299
i watch app is not obviously going to

00:24:33,440 --> 00:24:37,070
show all the same data as your mobile

00:24:35,299 --> 00:24:38,809
app so that's where graphic you all can

00:24:37,070 --> 00:24:40,490
be powerful but we still want to make

00:24:38,809 --> 00:24:43,789
sure that data is just the minimal

00:24:40,490 --> 00:24:45,889
amount of data we need to power a UI so

00:24:43,789 --> 00:24:48,350
kind of taking a look at an example what

00:24:45,889 --> 00:24:50,779
that might look like here's just kind of

00:24:48,350 --> 00:24:53,360
a mock example of what our hotels API

00:24:50,779 --> 00:24:55,759
used to look like on the left side so he

00:24:53,360 --> 00:24:58,389
used to return the user data yes the

00:24:55,759 --> 00:25:00,889
user data was in the API legacy reasons

00:24:58,389 --> 00:25:03,080
and we used to return a list of hotels

00:25:00,889 --> 00:25:04,460
so like on a property search you just

00:25:03,080 --> 00:25:07,549
get the list hotels and some user

00:25:04,460 --> 00:25:09,529
information and so on the user the user

00:25:07,549 --> 00:25:12,350
is logged in or they're not either

00:25:09,529 --> 00:25:15,200
authenticated and then every Hotel might

00:25:12,350 --> 00:25:18,409
have this concept of a member member

00:25:15,200 --> 00:25:21,379
deal and so not every Hotel is available

00:25:18,409 --> 00:25:24,470
to be to have this member deal so and

00:25:21,379 --> 00:25:26,210
the in the schema if you are an API

00:25:24,470 --> 00:25:28,490
developer if you're creating this schema

00:25:26,210 --> 00:25:30,200
powering this API what you might do is

00:25:28,490 --> 00:25:32,059
just say hey okay we're going to

00:25:30,200 --> 00:25:33,769
simplify this so no longer could does

00:25:32,059 --> 00:25:35,960
the client have to check two boolean's

00:25:33,769 --> 00:25:38,749
to say hey if the user is logged in and

00:25:35,960 --> 00:25:40,220
this hotel is available for member

00:25:38,749 --> 00:25:42,320
pricing then we're going to show some

00:25:40,220 --> 00:25:44,269
element on the UI we're gonna simplify

00:25:42,320 --> 00:25:46,399
that into just one check so we'll do the

00:25:44,269 --> 00:25:48,769
business logic beyond on the server less

00:25:46,399 --> 00:25:51,259
business logic on the client so we'll

00:25:48,769 --> 00:25:53,629
just rename it to single boolean display

00:25:51,259 --> 00:25:55,389
the member only badge great that seems

00:25:53,629 --> 00:25:58,309
like it's a benefit for the client

00:25:55,389 --> 00:26:01,029
however if we take a look at the client

00:25:58,309 --> 00:26:03,409
the client actually knows that there is

00:26:01,029 --> 00:26:05,330
another concept of something that we

00:26:03,409 --> 00:26:07,279
might show to the user so on the top

00:26:05,330 --> 00:26:09,110
here is this yellow badge the members

00:26:07,279 --> 00:26:11,480
save more just that's the member only

00:26:09,110 --> 00:26:14,149
deal badge but this other Hotel has this

00:26:11,480 --> 00:26:16,490
concept of a shortage badge or there's

00:26:14,149 --> 00:26:18,110
only eight Hotel eight rooms left at

00:26:16,490 --> 00:26:21,409
this hotel so we're gonna offer you a

00:26:18,110 --> 00:26:23,029
discount but the client knows which

00:26:21,409 --> 00:26:25,039
priority do you show them they're in the

00:26:23,029 --> 00:26:27,110
same location so which badge takes

00:26:25,039 --> 00:26:28,999
priority if the member Deal is there but

00:26:27,110 --> 00:26:30,259
it also has a shortage well the right

00:26:28,999 --> 00:26:33,110
now the client has that business

00:26:30,259 --> 00:26:34,399
business logic and if they still have to

00:26:33,110 --> 00:26:34,909
do this check to do these different

00:26:34,399 --> 00:26:37,220
things

00:26:34,909 --> 00:26:38,720
if one client is doing that check every

00:26:37,220 --> 00:26:40,340
single client that's using the schema

00:26:38,720 --> 00:26:41,869
has to also do to that check and that's

00:26:40,340 --> 00:26:43,030
business logic we're trying to remove

00:26:41,869 --> 00:26:46,330
from our clients

00:26:43,030 --> 00:26:49,270
so instead we just have this idea of

00:26:46,330 --> 00:26:50,800
like an offer batch which just means

00:26:49,270 --> 00:26:53,050
that the client just looks that that

00:26:50,800 --> 00:26:54,820
badge it might be null but if it's there

00:26:53,050 --> 00:26:56,740
they just take the icon and the text and

00:26:54,820 --> 00:26:58,360
they put it on the screen and then in

00:26:56,740 --> 00:27:00,420
the server we can define the business

00:26:58,360 --> 00:27:03,550
logic of what takes priority order and

00:27:00,420 --> 00:27:06,400
yes this is a fairly UI heavy example

00:27:03,550 --> 00:27:07,720
but really this just is the concept that

00:27:06,400 --> 00:27:09,580
you're trying to reduce the business

00:27:07,720 --> 00:27:13,210
logic on the client so you can apply

00:27:09,580 --> 00:27:15,910
this to any graphical schema all right

00:27:13,210 --> 00:27:17,860
so just kind of if you were to take any

00:27:15,910 --> 00:27:20,140
one thing away from this talk the three

00:27:17,860 --> 00:27:21,850
things that we found valuable at Expedia

00:27:20,140 --> 00:27:23,710
group when doing our graphical migration

00:27:21,850 --> 00:27:26,380
was that we wanted to standardize the

00:27:23,710 --> 00:27:28,930
tooling to meet our developer needs the

00:27:26,380 --> 00:27:31,060
developer experience is going to be key

00:27:28,930 --> 00:27:33,130
when you're using graph QL graph QL

00:27:31,060 --> 00:27:35,050
doesn't directly benefit your customers

00:27:33,130 --> 00:27:36,610
right the customer doesn't care if you

00:27:35,050 --> 00:27:38,440
use graph QL or if you use the rest the

00:27:36,610 --> 00:27:40,330
data just shows up to the customer but

00:27:38,440 --> 00:27:42,160
graph QL builds these better developer

00:27:40,330 --> 00:27:43,510
experiences as we've seen with some of

00:27:42,160 --> 00:27:45,640
the client tooling some of the server

00:27:43,510 --> 00:27:47,350
tooling and if your developers work

00:27:45,640 --> 00:27:49,420
better than they can build features

00:27:47,350 --> 00:27:51,340
faster which benefits your customers so

00:27:49,420 --> 00:27:53,200
in the end we're still making sure that

00:27:51,340 --> 00:27:55,390
everything works the developers to help

00:27:53,200 --> 00:27:57,550
our customers and making sure that we

00:27:55,390 --> 00:27:59,680
build a client for schema we want the

00:27:57,550 --> 00:28:02,350
schema to be designed well and making

00:27:59,680 --> 00:28:05,040
sure it's powered for clients and then

00:28:02,350 --> 00:28:08,350
creating a community around that schema

00:28:05,040 --> 00:28:10,840
creation has been just invaluable for us

00:28:08,350 --> 00:28:13,000
just the amount of communication we have

00:28:10,840 --> 00:28:14,980
to do with teams and emails and slack

00:28:13,000 --> 00:28:16,930
channels it's just it's too much for a

00:28:14,980 --> 00:28:19,150
single team of schema managers to handle

00:28:16,930 --> 00:28:20,890
so we really are trying to strive for

00:28:19,150 --> 00:28:24,670
this community of graph QL at the

00:28:20,890 --> 00:28:26,700
company and then lastly for us graph QL

00:28:24,670 --> 00:28:28,600
has not just been this way to

00:28:26,700 --> 00:28:30,640
standardize the data it's been a way for

00:28:28,600 --> 00:28:32,920
us to standardize our business all right

00:28:30,640 --> 00:28:34,900
so no longer do we have the question of

00:28:32,920 --> 00:28:37,330
like the hotel's team has this API and

00:28:34,900 --> 00:28:39,400
of this data they have this UI for us

00:28:37,330 --> 00:28:41,110
now it's just the clients say I have

00:28:39,400 --> 00:28:42,520
this graph and I want to answer these

00:28:41,110 --> 00:28:44,440
questions that the traveler has like

00:28:42,520 --> 00:28:47,200
what hotels are available near the Space

00:28:44,440 --> 00:28:48,940
Needle what hotels are available in the

00:28:47,200 --> 00:28:51,790
customers cart these are just questions

00:28:48,940 --> 00:28:53,470
that your travelers and customers need

00:28:51,790 --> 00:28:54,970
to know and it should be just up to the

00:28:53,470 --> 00:28:56,240
graph to answer them and it doesn't

00:28:54,970 --> 00:28:57,740
matter how you

00:28:56,240 --> 00:28:59,690
the services underneath that graph

00:28:57,740 --> 00:29:02,690
you're just trying to still create a

00:28:59,690 --> 00:29:06,020
better experience for your customers all

00:29:02,690 --> 00:29:08,360
right so that's all I have today if you

00:29:06,020 --> 00:29:10,040
want to follow Expedia group you can

00:29:08,360 --> 00:29:12,170
follow us on social media we can

00:29:10,040 --> 00:29:14,150
definitely keep up with our graph QL

00:29:12,170 --> 00:29:16,100
journey I'll be posting more publicly

00:29:14,150 --> 00:29:18,260
about graph QL and how we're using it at

00:29:16,100 --> 00:29:20,750
Expedia we also have our careers page

00:29:18,260 --> 00:29:22,760
down here if you want to follow me on

00:29:20,750 --> 00:29:26,330
social media I'm just at Shane myrick

00:29:22,760 --> 00:29:27,920
everywhere here's some links and thanks

00:29:26,330 --> 00:29:32,749
everyone

00:29:27,920 --> 00:29:32,749

YouTube URL: https://www.youtube.com/watch?v=MuD3TAP0D9Y


