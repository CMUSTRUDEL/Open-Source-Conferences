Title: Welcome and Keynote, Matt DeBergalis, Co-founder and CTO at Apollo
Publication date: 2019-05-28
Playlist: Apollo Day SF 2019
Description: 
	Apollo’s Co-founder and CTO Matt DeBergalis shares progress of the industry’s rapid transition to GraphQL. He detailed the roadmap for successful GraphQL implementation and laid out the the basis for a new and important layer in the modern application development stack: the data graph
Captions: 
	00:00:00,030 --> 00:00:06,660
my name is Matt really excited to be

00:00:02,370 --> 00:00:10,170
here today and really excited to see so

00:00:06,660 --> 00:00:11,849
much energy around this path toward

00:00:10,170 --> 00:00:14,940
graph QL and a new way of building

00:00:11,849 --> 00:00:16,590
applications we did an event just last

00:00:14,940 --> 00:00:19,199
week in New York City very similar to

00:00:16,590 --> 00:00:20,609
this had a bunch of great conversations

00:00:19,199 --> 00:00:22,680
and so I'll just say up front

00:00:20,609 --> 00:00:25,070
our biggest goal for the day is for

00:00:22,680 --> 00:00:28,230
everyone here to meet each other and

00:00:25,070 --> 00:00:29,910
compare notes and tell stories it will

00:00:28,230 --> 00:00:32,850
share some ideas and some thinking and

00:00:29,910 --> 00:00:34,140
we're gonna have a couple of folks up

00:00:32,850 --> 00:00:36,600
here who've been going down this path

00:00:34,140 --> 00:00:37,890
toward graph kill in the organization

00:00:36,600 --> 00:00:42,719
and they have a lot of stories to share

00:00:37,890 --> 00:00:45,210
as well but above all everyone here has

00:00:42,719 --> 00:00:47,309
a lot to share as much as to learn and

00:00:45,210 --> 00:00:48,660
I'm really excited to have a chance for

00:00:47,309 --> 00:00:50,129
everybody to connect so we've got some

00:00:48,660 --> 00:00:51,680
time during the day for that we've got

00:00:50,129 --> 00:00:54,510
some time afterwards and I hope that

00:00:51,680 --> 00:00:56,100
everyone leaves with a chance to feel

00:00:54,510 --> 00:00:57,989
like they've they've got a clear picture

00:00:56,100 --> 00:00:59,550
of where they're going and and and maybe

00:00:57,989 --> 00:01:01,739
some excitement about what what lies

00:00:59,550 --> 00:01:03,930
ahead let's make sure by starting we're

00:01:01,739 --> 00:01:05,510
all in the right room and assuring you

00:01:03,930 --> 00:01:08,299
that you're in the right room this is

00:01:05,510 --> 00:01:11,250
taken from Google Trends showing the

00:01:08,299 --> 00:01:12,689
adoption and interest of graph QL

00:01:11,250 --> 00:01:17,130
relative to some of the other API

00:01:12,689 --> 00:01:19,409
technologies that came before obviously

00:01:17,130 --> 00:01:21,479
a very different adoption curve and we

00:01:19,409 --> 00:01:23,310
see that in a lot of other settings the

00:01:21,479 --> 00:01:25,080
state of JavaScript did a survey last

00:01:23,310 --> 00:01:27,659
year I think that showed 80 some odd

00:01:25,080 --> 00:01:30,200
percent of JavaScript developers are

00:01:27,659 --> 00:01:32,549
either using or want to learn graph QL

00:01:30,200 --> 00:01:34,320
Laurie Voss a 10:00 p.m. talks about

00:01:32,549 --> 00:01:36,119
graph QL as being one of the must learn

00:01:34,320 --> 00:01:39,720
technologies of 2019

00:01:36,119 --> 00:01:41,549
I think the note foundation did a survey

00:01:39,720 --> 00:01:44,130
that found North to 20% of node

00:01:41,549 --> 00:01:48,530
developers are using graph QL today in

00:01:44,130 --> 00:01:51,720
production so quite a bit of momentum in

00:01:48,530 --> 00:01:54,329
just the last year or two in terms of

00:01:51,720 --> 00:01:57,210
the overall technology at Apollo we have

00:01:54,329 --> 00:01:59,880
a bird's eye view of this by virtue of

00:01:57,210 --> 00:02:02,009
the Apollo platform and in particular

00:01:59,880 --> 00:02:05,100
Apollo client which is our open-source

00:02:02,009 --> 00:02:07,079
tool for binding your user interface to

00:02:05,100 --> 00:02:09,450
the graph QL queries that you're writing

00:02:07,079 --> 00:02:11,550
this is the adoption of Apollo client

00:02:09,450 --> 00:02:13,860
over the last couple years that looks

00:02:11,550 --> 00:02:16,500
about right so we have all the makings

00:02:13,860 --> 00:02:18,630
the developer megatrend and a lot of

00:02:16,500 --> 00:02:20,340
excitement and energy and I think each

00:02:18,630 --> 00:02:22,260
of us has had some experience that

00:02:20,340 --> 00:02:24,420
speaks to why this is so exciting

00:02:22,260 --> 00:02:28,170
whether it's the promise of a better

00:02:24,420 --> 00:02:29,820
front-end development experience or you

00:02:28,170 --> 00:02:31,500
know fewer bites on the wire and the

00:02:29,820 --> 00:02:34,110
efficiency of using graphic UL versus

00:02:31,500 --> 00:02:35,460
rest but I think it goes a little bit

00:02:34,110 --> 00:02:37,910
deeper and I want to spend just a couple

00:02:35,460 --> 00:02:40,200
minutes on the the shape of what we see

00:02:37,910 --> 00:02:43,170
as a lead-in to what we want to talk

00:02:40,200 --> 00:02:44,520
about today so here's a here's an

00:02:43,170 --> 00:02:46,160
example of what a modern digital

00:02:44,520 --> 00:02:50,120
experience on the web might look like

00:02:46,160 --> 00:02:53,580
and the point I want to make is in 2019

00:02:50,120 --> 00:02:56,010
building a great user experience means

00:02:53,580 --> 00:03:00,780
bringing a lot of data to the user

00:02:56,010 --> 00:03:04,260
screen just a super simple example might

00:03:00,780 --> 00:03:06,990
be drawing data from three four five ten

00:03:04,260 --> 00:03:08,490
different services api's capabilities

00:03:06,990 --> 00:03:10,770
that you have in your organization and

00:03:08,490 --> 00:03:13,020
the key point here is if you don't do

00:03:10,770 --> 00:03:16,170
that if you don't have personalization

00:03:13,020 --> 00:03:18,269
in your app if you haven't piped in real

00:03:16,170 --> 00:03:20,670
time pricing or inventory or whatever it

00:03:18,269 --> 00:03:22,830
might make sense in your context you're

00:03:20,670 --> 00:03:24,840
not building what feels like a rich

00:03:22,830 --> 00:03:26,820
modern user experience anymore

00:03:24,840 --> 00:03:30,120
these are the these are the table stakes

00:03:26,820 --> 00:03:31,950
for making a great application and so of

00:03:30,120 --> 00:03:33,959
course the act of building just this one

00:03:31,950 --> 00:03:36,870
page let alone an app involves all kinds

00:03:33,959 --> 00:03:39,300
of plumbing to connect each of the

00:03:36,870 --> 00:03:40,920
different capabilities you have in urine

00:03:39,300 --> 00:03:45,300
in your infrastructure to that

00:03:40,920 --> 00:03:46,650
particular screen the other half of the

00:03:45,300 --> 00:03:48,900
problem is you're not writing one app

00:03:46,650 --> 00:03:52,350
you're writing lots of apps and those

00:03:48,900 --> 00:03:54,870
apps have to live not just on web and

00:03:52,350 --> 00:03:56,459
mobile but a dizzying array of platforms

00:03:54,870 --> 00:04:03,269
that are starting to emerge whether it's

00:03:56,459 --> 00:04:04,560
IOT or the watch or carplay roku voice I

00:04:03,269 --> 00:04:05,970
don't know right there seems like

00:04:04,560 --> 00:04:08,160
there's a new platform every three

00:04:05,970 --> 00:04:10,380
months now and again if you're not there

00:04:08,160 --> 00:04:12,920
if you don't give your users a great

00:04:10,380 --> 00:04:15,870
experience in each of those settings

00:04:12,920 --> 00:04:17,850
they're gonna go somewhere else so this

00:04:15,870 --> 00:04:19,320
challenge is how do we ship great

00:04:17,850 --> 00:04:22,169
applications across all these platforms

00:04:19,320 --> 00:04:23,970
and how do we do it where each of those

00:04:22,169 --> 00:04:25,800
applications has to talk to all this

00:04:23,970 --> 00:04:27,630
stuff that has the data you want to

00:04:25,800 --> 00:04:30,210
bring to the user

00:04:27,630 --> 00:04:31,800
and you know there's a lot of wires

00:04:30,210 --> 00:04:33,000
between the two is the answer today you

00:04:31,800 --> 00:04:35,700
might think of that as like an m-by-n

00:04:33,000 --> 00:04:38,070
problem right where as these as these

00:04:35,700 --> 00:04:41,730
numbers grow the amount of plumbing we

00:04:38,070 --> 00:04:43,590
have to build as engineers grows as the

00:04:41,730 --> 00:04:45,090
square or maybe even the cube of that if

00:04:43,590 --> 00:04:46,560
you think about a layer in between for

00:04:45,090 --> 00:04:49,560
your back-end for your front-end and

00:04:46,560 --> 00:04:52,350
it's it's just a mess and so when we

00:04:49,560 --> 00:04:54,450
talk about the rise of graph QL what we

00:04:52,350 --> 00:04:56,970
really mean and what we're seeing is the

00:04:54,450 --> 00:04:57,990
rise of the data graph this layer this

00:04:56,970 --> 00:05:01,620
missing piece

00:04:57,990 --> 00:05:03,870
the decouples the apps and what they

00:05:01,620 --> 00:05:06,600
need from your services and your

00:05:03,870 --> 00:05:08,070
capabilities and what they have and it's

00:05:06,600 --> 00:05:10,860
absolutely transformative because

00:05:08,070 --> 00:05:13,080
instead of writing code we get to define

00:05:10,860 --> 00:05:15,210
in a declarative way what those things

00:05:13,080 --> 00:05:16,950
are the apps describe what they need

00:05:15,210 --> 00:05:19,410
those are graphical queries right and

00:05:16,950 --> 00:05:22,590
the services describe what they have in

00:05:19,410 --> 00:05:24,000
the form of graph QL schemas and what we

00:05:22,590 --> 00:05:25,470
have in the middle is this layer that

00:05:24,000 --> 00:05:27,960
functions like a marketplace a

00:05:25,470 --> 00:05:30,420
rendezvous point so that as a developer

00:05:27,960 --> 00:05:32,280
I don't have to know how the sausage is

00:05:30,420 --> 00:05:35,070
getting made I just describe what I want

00:05:32,280 --> 00:05:36,300
and it comes to me as a service owner I

00:05:35,070 --> 00:05:38,280
don't have to really understand the

00:05:36,300 --> 00:05:40,620
intricacies of each product experience

00:05:38,280 --> 00:05:42,840
that someone's trying to build I just

00:05:40,620 --> 00:05:44,730
have to describe what I can do and let

00:05:42,840 --> 00:05:46,380
the product developers draw from that in

00:05:44,730 --> 00:05:48,560
conjunction with all the other data and

00:05:46,380 --> 00:05:51,080
services and capabilities that I have

00:05:48,560 --> 00:05:53,940
there's a lot to like about this model

00:05:51,080 --> 00:05:55,920
it's a lot less code we're gonna see

00:05:53,940 --> 00:05:58,500
that today so you get to market faster

00:05:55,920 --> 00:06:00,510
with a lot more product right instead of

00:05:58,500 --> 00:06:01,890
building plumbing you're doing what you

00:06:00,510 --> 00:06:02,970
actually signed up for as a product

00:06:01,890 --> 00:06:04,560
engineer you're making great user

00:06:02,970 --> 00:06:07,080
experience and you're typing queries as

00:06:04,560 --> 00:06:08,850
you go but I think there's more to it

00:06:07,080 --> 00:06:10,860
than that a big advantage that we're

00:06:08,850 --> 00:06:15,000
finding as companies go down this path

00:06:10,860 --> 00:06:16,680
is a consistency of user experience so

00:06:15,000 --> 00:06:18,360
I've got that web app and my mobile app

00:06:16,680 --> 00:06:20,700
and my app on my watch and one of the

00:06:18,360 --> 00:06:22,170
things I can do the data graph is stuff

00:06:20,700 --> 00:06:24,150
that used to live in the client that got

00:06:22,170 --> 00:06:27,660
implemented in each of Swift and Java

00:06:24,150 --> 00:06:30,210
and and JavaScript now gets built once

00:06:27,660 --> 00:06:32,220
in the data graph so localization is the

00:06:30,210 --> 00:06:34,440
same everywhere my strings format the

00:06:32,220 --> 00:06:36,210
same way my users don't feel a jarring

00:06:34,440 --> 00:06:38,450
shift and experiences they move from one

00:06:36,210 --> 00:06:40,850
platform to another

00:06:38,450 --> 00:06:43,220
and I think maybe most exciting and

00:06:40,850 --> 00:06:46,340
we'll come back to this theme over and

00:06:43,220 --> 00:06:49,400
over again is that the data graph gives

00:06:46,340 --> 00:06:52,700
us this really deep insight into what

00:06:49,400 --> 00:06:55,490
our data is and how it's being used and

00:06:52,700 --> 00:06:56,660
it gives us some control over that so

00:06:55,490 --> 00:06:58,280
because we have this fine-grained

00:06:56,660 --> 00:07:00,560
understanding because clients actually

00:06:58,280 --> 00:07:04,060
describe in precise terms what it is

00:07:00,560 --> 00:07:06,650
they're using we have an ability to

00:07:04,060 --> 00:07:09,050
think about app development in a really

00:07:06,650 --> 00:07:11,030
different way and we have an ability to

00:07:09,050 --> 00:07:12,710
think about our data and how we use it

00:07:11,030 --> 00:07:15,140
in a really different way and

00:07:12,710 --> 00:07:17,510
fundamentally this is all about the

00:07:15,140 --> 00:07:19,250
value and the accessibility of that data

00:07:17,510 --> 00:07:20,690
in our organization and how we can

00:07:19,250 --> 00:07:23,720
elevate that and how we can bring that

00:07:20,690 --> 00:07:26,690
to the entire application development

00:07:23,720 --> 00:07:28,100
process so what I want to talk about

00:07:26,690 --> 00:07:30,650
today and really want what this whole

00:07:28,100 --> 00:07:34,280
day is about is the journey for how you

00:07:30,650 --> 00:07:36,890
get that how do you go from where you

00:07:34,280 --> 00:07:39,050
are today to a state where you have this

00:07:36,890 --> 00:07:42,890
data graph and you have the ability to

00:07:39,050 --> 00:07:44,390
build software in this new way and the

00:07:42,890 --> 00:07:46,250
the key part of that story is going to

00:07:44,390 --> 00:07:49,670
be about a change in perspective it's

00:07:46,250 --> 00:07:51,800
about how teams work together it's about

00:07:49,670 --> 00:07:53,240
a mindset that you bring to application

00:07:51,800 --> 00:07:54,950
development that's different from when

00:07:53,240 --> 00:07:57,890
you built a lot of imperative code to

00:07:54,950 --> 00:08:00,170
fetch data and manage how that lives and

00:07:57,890 --> 00:08:01,640
I'm hoping that as you go through the

00:08:00,170 --> 00:08:03,920
day you'll see that you'll be able to

00:08:01,640 --> 00:08:06,260
map your experience and where you are to

00:08:03,920 --> 00:08:07,370
these steps and to these changes that

00:08:06,260 --> 00:08:08,390
you're gonna want to make and these

00:08:07,370 --> 00:08:11,920
things you're gonna want to think about

00:08:08,390 --> 00:08:13,880
culturally in the organization

00:08:11,920 --> 00:08:15,650
technology is also a part of it you'll

00:08:13,880 --> 00:08:17,810
need some some software to do some of

00:08:15,650 --> 00:08:19,580
this too so we'll talk about that and

00:08:17,810 --> 00:08:21,290
whether it's the Apollo data graph

00:08:19,580 --> 00:08:23,270
platform or stuff that you're rolling

00:08:21,290 --> 00:08:25,580
your own you'll see some of the

00:08:23,270 --> 00:08:27,230
essential elements of what makes this

00:08:25,580 --> 00:08:30,130
such a compelling experience and what

00:08:27,230 --> 00:08:32,690
make this possible to roll out at scale

00:08:30,130 --> 00:08:35,270
so let's start with the first step the

00:08:32,690 --> 00:08:38,960
first stage of getting to a data graph

00:08:35,270 --> 00:08:43,580
in in my mind is about that very first

00:08:38,960 --> 00:08:45,170
screen and really this stage and I

00:08:43,580 --> 00:08:47,330
suspect most people here have already

00:08:45,170 --> 00:08:50,690
gone through part of this at least is

00:08:47,330 --> 00:08:51,890
about not just learning the technology

00:08:50,690 --> 00:08:53,810
but

00:08:51,890 --> 00:08:55,910
it's about having that first experience

00:08:53,810 --> 00:08:58,399
where you can query your own data and

00:08:55,910 --> 00:09:01,399
where your own data can be brought on to

00:08:58,399 --> 00:09:03,380
a screen by way of graph QL how many

00:09:01,399 --> 00:09:05,810
people have seen that and if I've seen

00:09:03,380 --> 00:09:08,120
what that's like it's it's absolutely

00:09:05,810 --> 00:09:11,149
magical right it's it's once you've seen

00:09:08,120 --> 00:09:13,100
it you never want to go back so if

00:09:11,149 --> 00:09:14,959
you're just getting your feet wet with

00:09:13,100 --> 00:09:16,610
graph QL what we recommend time and

00:09:14,959 --> 00:09:19,670
again is find the quickest shortest path

00:09:16,610 --> 00:09:21,410
to that experience it can be a an admin

00:09:19,670 --> 00:09:23,600
page on an app it can be one of those

00:09:21,410 --> 00:09:25,100
features that maybe isn't the most

00:09:23,600 --> 00:09:26,899
critical part of your app but often has

00:09:25,100 --> 00:09:28,490
some of the gnarliest data fetching code

00:09:26,899 --> 00:09:30,290
underneath it because it brings together

00:09:28,490 --> 00:09:32,660
a lot of different data whatever it is

00:09:30,290 --> 00:09:35,570
for you as soon as you're able to render

00:09:32,660 --> 00:09:38,300
that on the screen with graph QL you'll

00:09:35,570 --> 00:09:40,040
start to see that value but it's more

00:09:38,300 --> 00:09:42,860
than queries something we want to show

00:09:40,040 --> 00:09:46,130
you today is it's about the end-to-end

00:09:42,860 --> 00:09:47,920
development experience it's it's about

00:09:46,130 --> 00:09:50,720
having three things that work together

00:09:47,920 --> 00:09:53,390
right a component framework something

00:09:50,720 --> 00:09:55,579
like react a data library like Apollo

00:09:53,390 --> 00:09:57,860
and a strong type system that sits

00:09:55,579 --> 00:10:00,560
underneath that and the three of those

00:09:57,860 --> 00:10:02,630
working together is an absolutely

00:10:00,560 --> 00:10:04,790
game-changing way to build modern

00:10:02,630 --> 00:10:07,399
products we're gonna get you out of the

00:10:04,790 --> 00:10:09,260
writing redux what are they called

00:10:07,399 --> 00:10:10,880
reducers business whatever they are this

00:10:09,260 --> 00:10:13,310
year and we're gonna get to a place

00:10:10,880 --> 00:10:15,949
where you're typing queries you're

00:10:13,310 --> 00:10:18,890
defining components and the systems are

00:10:15,949 --> 00:10:21,170
working for you react to manage how your

00:10:18,890 --> 00:10:22,790
screen redraws Apollo to manage how that

00:10:21,170 --> 00:10:25,839
data moves from the cloud into your

00:10:22,790 --> 00:10:28,310
client and typescript to manage

00:10:25,839 --> 00:10:29,839
correctness and compatibility across all

00:10:28,310 --> 00:10:34,519
those pieces from development time

00:10:29,839 --> 00:10:36,380
through runtime and it goes beyond the

00:10:34,519 --> 00:10:39,350
parts that live in your app it's also

00:10:36,380 --> 00:10:41,480
the tools you use to build your app so

00:10:39,350 --> 00:10:43,730
for example imagine an editor that's

00:10:41,480 --> 00:10:46,970
connected to your data graph so that

00:10:43,730 --> 00:10:49,250
when a field in your graph is deprecated

00:10:46,970 --> 00:10:51,769
you know about it as an app developer

00:10:49,250 --> 00:10:54,860
right away on your screen or as you type

00:10:51,769 --> 00:10:57,260
a graph QL query the editor can tell you

00:10:54,860 --> 00:10:59,720
in real-time what the cost of adding

00:10:57,260 --> 00:11:02,930
that feel to the query might be in terms

00:10:59,720 --> 00:11:05,060
of performance or latency right that's

00:11:02,930 --> 00:11:05,450
the development experience that you want

00:11:05,060 --> 00:11:07,010
to

00:11:05,450 --> 00:11:09,020
at the end of that first stage you want

00:11:07,010 --> 00:11:12,770
to see what that feels like all wired up

00:11:09,020 --> 00:11:14,600
end to end so that you can see the

00:11:12,770 --> 00:11:17,620
benefit that you'll get from an active

00:11:14,600 --> 00:11:20,360
perspective as you go down this path and

00:11:17,620 --> 00:11:23,390
dannielle man who runs our product team

00:11:20,360 --> 00:11:25,100
at Apollo and we live and breathe this

00:11:23,390 --> 00:11:27,200
stuff everyday is gonna walk through

00:11:25,100 --> 00:11:29,930
some of the what that looks like

00:11:27,200 --> 00:11:33,440
from a developer's perspective and show

00:11:29,930 --> 00:11:37,450
you what we mean by that okay if that's

00:11:33,440 --> 00:11:40,400
the first stage the second stage is

00:11:37,450 --> 00:11:43,550
putting your key product onto a data

00:11:40,400 --> 00:11:45,140
graph this stage is all about

00:11:43,550 --> 00:11:47,680
establishing the patterns and the

00:11:45,140 --> 00:11:51,530
workflows that you're gonna use to

00:11:47,680 --> 00:11:53,810
design and operate that graph right and

00:11:51,530 --> 00:11:55,460
the big prize when you do that is

00:11:53,810 --> 00:11:58,040
starting to consolidate and even

00:11:55,460 --> 00:11:59,840
eliminate that plumbing that used to

00:11:58,040 --> 00:12:01,220
have to be written by hand to get data

00:11:59,840 --> 00:12:04,850
between the different parts of your

00:12:01,220 --> 00:12:09,020
application the good news is we know how

00:12:04,850 --> 00:12:10,430
to do this now so we've worked with

00:12:09,020 --> 00:12:12,590
hundreds of companies that have gone

00:12:10,430 --> 00:12:15,440
down this path and what have emerged

00:12:12,590 --> 00:12:18,110
over the last year or so are a set of

00:12:15,440 --> 00:12:20,870
clear best practices for how to

00:12:18,110 --> 00:12:23,870
architect a graph the right way and how

00:12:20,870 --> 00:12:27,080
to go from a first app to a second app

00:12:23,870 --> 00:12:29,540
to a whole family of apps in an

00:12:27,080 --> 00:12:30,920
incremental and agile fashion so you're

00:12:29,540 --> 00:12:33,620
gonna live and breathe this stuff this

00:12:30,920 --> 00:12:35,210
all comes from principled graph QL a set

00:12:33,620 --> 00:12:36,620
of guidelines that we wrote you can see

00:12:35,210 --> 00:12:38,840
that online of principled graph cool

00:12:36,620 --> 00:12:40,700
calm I'm not gonna go through each of

00:12:38,840 --> 00:12:42,980
these in particular but the point is a

00:12:40,700 --> 00:12:46,610
lot of these answers have really emerged

00:12:42,980 --> 00:12:49,700
as clear correct patterns that help

00:12:46,610 --> 00:12:51,680
teams get to production quickly and with

00:12:49,700 --> 00:12:53,330
confidence and these are the sorts of

00:12:51,680 --> 00:12:54,830
things that you'll establish as part of

00:12:53,330 --> 00:12:56,720
this stage as part of building out that

00:12:54,830 --> 00:13:00,950
first schema and moving that first app

00:12:56,720 --> 00:13:02,990
over to the data graph what we recommend

00:13:00,950 --> 00:13:05,840
is is what I call a product first

00:13:02,990 --> 00:13:09,140
approach to doing this and in a product

00:13:05,840 --> 00:13:12,140
first approach your North Star is your

00:13:09,140 --> 00:13:15,640
actual application screen and you're

00:13:12,140 --> 00:13:19,190
gonna design what the graph provides and

00:13:15,640 --> 00:13:21,590
from there how the schema is structured

00:13:19,190 --> 00:13:23,360
and from there how you implement that in

00:13:21,590 --> 00:13:25,520
terms of resolvers and the connections

00:13:23,360 --> 00:13:27,800
to your services so you're always

00:13:25,520 --> 00:13:29,720
starting from the the perspective of the

00:13:27,800 --> 00:13:32,810
app or really from the user of the

00:13:29,720 --> 00:13:36,020
customer right that pattern works really

00:13:32,810 --> 00:13:38,420
well because it keeps everything nicely

00:13:36,020 --> 00:13:42,770
aligned to the actual needs of the

00:13:38,420 --> 00:13:44,600
product development org and you know for

00:13:42,770 --> 00:13:47,660
example by starting with our app and

00:13:44,600 --> 00:13:49,960
going this direction it encourages us to

00:13:47,660 --> 00:13:51,980
keep our data graph implementation as a

00:13:49,960 --> 00:13:54,650
separate decoupled layer from our

00:13:51,980 --> 00:13:57,770
services that turns out to be really

00:13:54,650 --> 00:14:00,320
important it keeps our schema product

00:13:57,770 --> 00:14:01,880
centric and modeled after what what

00:14:00,320 --> 00:14:05,030
appears on the screen rather than being

00:14:01,880 --> 00:14:07,790
modeled on what you might start from

00:14:05,030 --> 00:14:09,770
with your services and it really forces

00:14:07,790 --> 00:14:11,330
us to adopt an agile development process

00:14:09,770 --> 00:14:13,820
because what we're gonna do is

00:14:11,330 --> 00:14:15,830
continually refine and evolve that work

00:14:13,820 --> 00:14:18,200
as we bring more screens and more

00:14:15,830 --> 00:14:19,430
applications into the picture you're

00:14:18,200 --> 00:14:21,260
gonna hear from Survey Monkey later

00:14:19,430 --> 00:14:23,750
today they've gone down this exact path

00:14:21,260 --> 00:14:25,850
and they're gonna talk about what it

00:14:23,750 --> 00:14:27,320
meant to bring more and more of the key

00:14:25,850 --> 00:14:28,670
parts of the Survey Monkey product

00:14:27,320 --> 00:14:32,300
family onto a data graph and how they

00:14:28,670 --> 00:14:34,430
were able to do that step by step you're

00:14:32,300 --> 00:14:36,530
gonna need some tools to do this so one

00:14:34,430 --> 00:14:39,260
example of a best practice that emerges

00:14:36,530 --> 00:14:42,470
in this pattern is the ability to evolve

00:14:39,260 --> 00:14:44,750
the graph in an agile way this is an

00:14:42,470 --> 00:14:46,910
example of what we call schema change

00:14:44,750 --> 00:14:48,950
validation and the idea here is that if

00:14:46,910 --> 00:14:51,170
I'm gonna change the structure of my

00:14:48,950 --> 00:14:53,780
graph as I learn more as I bring more

00:14:51,170 --> 00:14:55,400
products into the picture I need a way

00:14:53,780 --> 00:14:57,290
to do that safely I need a way to be

00:14:55,400 --> 00:14:59,540
able to change the definition of the

00:14:57,290 --> 00:15:01,790
graph knowing that it doesn't have some

00:14:59,540 --> 00:15:03,500
adverse effect on a particular UI

00:15:01,790 --> 00:15:06,500
component that's currently querying the

00:15:03,500 --> 00:15:08,450
graph what's really cool about graph QL

00:15:06,500 --> 00:15:10,640
is that we have that fine-grained

00:15:08,450 --> 00:15:12,230
knowledge of the clients requirements I

00:15:10,640 --> 00:15:14,450
mentioned that earlier and so an example

00:15:12,230 --> 00:15:18,100
of how that's helpful here is we can use

00:15:14,450 --> 00:15:20,450
that information to at build time

00:15:18,100 --> 00:15:23,089
cross-check a proposed change to the

00:15:20,450 --> 00:15:25,730
data graph against all the observed uses

00:15:23,089 --> 00:15:27,890
of the graph in production and that's an

00:15:25,730 --> 00:15:30,040
algebra we can do statically right we

00:15:27,890 --> 00:15:32,060
can take a given query shape and

00:15:30,040 --> 00:15:32,910
cross-check it against a particular

00:15:32,060 --> 00:15:35,310
change to

00:15:32,910 --> 00:15:36,840
field and either know that it's safe or

00:15:35,310 --> 00:15:38,400
know that it may cause a breaking change

00:15:36,840 --> 00:15:41,520
and identify the client that may be

00:15:38,400 --> 00:15:43,290
broken and it's not just obvious stuff

00:15:41,520 --> 00:15:44,850
like don't remove a field that's being

00:15:43,290 --> 00:15:47,040
used there's actually a lot of subtlety

00:15:44,850 --> 00:15:48,240
to this so this is taken from the the

00:15:47,040 --> 00:15:50,610
specification for how that particular

00:15:48,240 --> 00:15:51,930
stuff works and you know there's some

00:15:50,610 --> 00:15:54,090
there's some cases here for example

00:15:51,930 --> 00:15:56,190
around changing the requirements of

00:15:54,090 --> 00:15:58,500
input types or how an enum is defined or

00:15:56,190 --> 00:16:00,750
whatnot so the point is the tooling can

00:15:58,500 --> 00:16:02,310
work for you and as you adopt data graph

00:16:00,750 --> 00:16:04,370
that tooling can work for you earlier

00:16:02,310 --> 00:16:07,740
and earlier in the development cycle

00:16:04,370 --> 00:16:09,210
another example of tooling and

00:16:07,740 --> 00:16:10,560
infrastructure is on the operational

00:16:09,210 --> 00:16:14,460
side one of the best practices we

00:16:10,560 --> 00:16:16,920
recommend is in production the idea of a

00:16:14,460 --> 00:16:18,930
safe list so rather than expose your

00:16:16,920 --> 00:16:20,940
graphical schema to the world at large

00:16:18,930 --> 00:16:23,070
we're gonna register queries at Build

00:16:20,940 --> 00:16:24,690
time and the graph QL layer in

00:16:23,070 --> 00:16:25,890
production is only getting answer

00:16:24,690 --> 00:16:27,570
queries that we know we're written by

00:16:25,890 --> 00:16:30,360
trusted developers in the organization

00:16:27,570 --> 00:16:32,490
right so there's a set of things like

00:16:30,360 --> 00:16:34,470
that again all backed by these practices

00:16:32,490 --> 00:16:37,290
that we've learned and now documented

00:16:34,470 --> 00:16:39,210
that help you walk down that path there

00:16:37,290 --> 00:16:41,850
is another way to do it the other

00:16:39,210 --> 00:16:44,040
approach is what we might call a data

00:16:41,850 --> 00:16:47,970
first approach where we let the service

00:16:44,040 --> 00:16:51,420
capabilities bubble up into a data graph

00:16:47,970 --> 00:16:54,560
and then into a product this is

00:16:51,420 --> 00:16:56,910
definitely a riskier approach we have

00:16:54,560 --> 00:16:58,920
seen a lot of companies go down this

00:16:56,910 --> 00:17:00,150
path and discover that it doesn't end up

00:16:58,920 --> 00:17:01,650
giving them some of the development

00:17:00,150 --> 00:17:03,060
benefits that they were expecting and

00:17:01,650 --> 00:17:05,700
it's because what they end up with in

00:17:03,060 --> 00:17:07,020
the data graph isn't quite aligned with

00:17:05,700 --> 00:17:09,480
what the product engineering teams

00:17:07,020 --> 00:17:12,060
really need to be able to build products

00:17:09,480 --> 00:17:13,530
faster so my recommendations if you're

00:17:12,060 --> 00:17:17,340
considering this approach are these

00:17:13,530 --> 00:17:19,110
number one this is really done best if

00:17:17,340 --> 00:17:22,230
you have an organization that already

00:17:19,110 --> 00:17:23,850
has an API team maybe a back-end for a

00:17:22,230 --> 00:17:26,490
front-end team a team that's already

00:17:23,850 --> 00:17:28,530
used to managing product infrastructure

00:17:26,490 --> 00:17:33,390
that ends up being culturally really

00:17:28,530 --> 00:17:35,670
important to have a use case in mind

00:17:33,390 --> 00:17:37,920
it's it's important not to design a

00:17:35,670 --> 00:17:39,750
graph in isolation as sort of a data

00:17:37,920 --> 00:17:41,370
modeling exercise before you bring the

00:17:39,750 --> 00:17:44,280
first use case into the picture I would

00:17:41,370 --> 00:17:45,920
have that use case in the in the room as

00:17:44,280 --> 00:17:49,610
you do this

00:17:45,920 --> 00:17:52,850
and third there's a lot of sharp edges

00:17:49,610 --> 00:17:56,240
here so find other teams that have gone

00:17:52,850 --> 00:17:59,060
down this path talk to us at Apollo find

00:17:56,240 --> 00:18:00,560
some advice that helps you really dive

00:17:59,060 --> 00:18:03,110
into what you're planning on doing and

00:18:00,560 --> 00:18:05,690
making sure that you can gain the

00:18:03,110 --> 00:18:07,130
benefits but if you if you do go down

00:18:05,690 --> 00:18:09,050
this path there can be some really big

00:18:07,130 --> 00:18:10,550
wins because it can be a very quick way

00:18:09,050 --> 00:18:12,080
to get a graph that isn't just for one

00:18:10,550 --> 00:18:13,430
product but that allows you to

00:18:12,080 --> 00:18:16,540
transition a whole part of your business

00:18:13,430 --> 00:18:20,030
over to data grabbed very quickly and

00:18:16,540 --> 00:18:21,590
that's really the third stage so first

00:18:20,030 --> 00:18:22,790
stage is kicking the tires and getting a

00:18:21,590 --> 00:18:24,890
sense of the development experience

00:18:22,790 --> 00:18:27,680
second stage getting that key product

00:18:24,890 --> 00:18:29,240
onto the data graph if you're a fan of

00:18:27,680 --> 00:18:33,200
the Apollo program the third stage is

00:18:29,240 --> 00:18:34,790
the going to the moon stage right so the

00:18:33,200 --> 00:18:38,990
third stage is about one graph for your

00:18:34,790 --> 00:18:42,470
org and this is where we make a really

00:18:38,990 --> 00:18:44,840
big cultural shift from a graph that was

00:18:42,470 --> 00:18:47,930
really written by and for a particular

00:18:44,840 --> 00:18:50,540
product to a graph that is a shared

00:18:47,930 --> 00:18:53,210
asset across the organization write

00:18:50,540 --> 00:18:54,650
something that powers all the products

00:18:53,210 --> 00:18:57,560
all the different use cases that need

00:18:54,650 --> 00:18:59,690
this sort of data and in this stage you

00:18:57,560 --> 00:19:02,600
see extraordinary benefits because now

00:18:59,690 --> 00:19:04,700
we can leverage that graph over and

00:19:02,600 --> 00:19:07,220
again with each new product feature that

00:19:04,700 --> 00:19:08,630
we want to put into production so

00:19:07,220 --> 00:19:09,860
there's benefits to velocity there's

00:19:08,630 --> 00:19:11,600
benefits as I said earlier it's a

00:19:09,860 --> 00:19:15,440
product consistency across that stuff

00:19:11,600 --> 00:19:18,710
this is the really big prize and the the

00:19:15,440 --> 00:19:21,680
challenge here is about how do you

00:19:18,710 --> 00:19:22,700
manage that shared asset because the

00:19:21,680 --> 00:19:24,740
graph is gonna have a really strong

00:19:22,700 --> 00:19:26,570
network effect right you might start

00:19:24,740 --> 00:19:30,080
small but there's gonna be this

00:19:26,570 --> 00:19:31,820
insatiable desire add just enough more

00:19:30,080 --> 00:19:33,350
to the schema to support that adjacent

00:19:31,820 --> 00:19:35,150
application maybe you start with your

00:19:33,350 --> 00:19:36,830
web app but then you bring in your iOS

00:19:35,150 --> 00:19:39,170
application and maybe that iOS

00:19:36,830 --> 00:19:40,580
application needs one more service as

00:19:39,170 --> 00:19:44,300
part of the graph because it's talking

00:19:40,580 --> 00:19:46,820
to a mobile analytic system that you've

00:19:44,300 --> 00:19:48,890
built and maybe adding that service

00:19:46,820 --> 00:19:50,270
unlocks the door for a different iOS app

00:19:48,890 --> 00:19:52,130
that you have in the organization and

00:19:50,270 --> 00:19:53,900
that might drive the need to integrate

00:19:52,130 --> 00:19:56,420
with yet another capability in the cloud

00:19:53,900 --> 00:19:57,950
and this keeps going and going until you

00:19:56,420 --> 00:19:59,600
end up with something that's far bigger

00:19:57,950 --> 00:20:02,120
than the needs of any one particular

00:19:59,600 --> 00:20:07,120
right this is a single asset for the org

00:20:02,120 --> 00:20:09,620
and with that comes a real challenge

00:20:07,120 --> 00:20:12,170
quite frankly in terms of how you're

00:20:09,620 --> 00:20:15,170
gonna build and maintain and operate

00:20:12,170 --> 00:20:19,430
something that doesn't fit into any one

00:20:15,170 --> 00:20:21,770
team's particular domain this is the

00:20:19,430 --> 00:20:24,500
path Expedia went down and you're gonna

00:20:21,770 --> 00:20:26,270
hear later today about their experience

00:20:24,500 --> 00:20:27,320
building out a layer that really is the

00:20:26,270 --> 00:20:29,570
foundation for the whole travel

00:20:27,320 --> 00:20:31,400
experience across multiple products and

00:20:29,570 --> 00:20:33,590
multiple services that supply that data

00:20:31,400 --> 00:20:37,640
that makes a modern product experience

00:20:33,590 --> 00:20:39,230
across those platforms and what you're

00:20:37,640 --> 00:20:43,040
gonna hear is there's kind of two pieces

00:20:39,230 --> 00:20:45,530
to the puzzle a lot of it is cultural a

00:20:43,040 --> 00:20:48,110
lot of it is about ownership and and how

00:20:45,530 --> 00:20:51,110
you divide up the work another lens you

00:20:48,110 --> 00:20:52,820
can use is it's a technical puzzle how

00:20:51,110 --> 00:20:54,380
do you how do you avoid having one big

00:20:52,820 --> 00:20:56,540
monolithic graph how do you build

00:20:54,380 --> 00:20:58,520
something that you can divide

00:20:56,540 --> 00:21:00,170
responsibility for across multiple teams

00:20:58,520 --> 00:21:01,610
and have the right domain experts for

00:21:00,170 --> 00:21:04,400
each part of the graph responsible for

00:21:01,610 --> 00:21:05,930
that part of the graph so something

00:21:04,400 --> 00:21:09,230
we're really excited about and we want

00:21:05,930 --> 00:21:12,740
to talk to you about today is called

00:21:09,230 --> 00:21:14,380
Apollo Federation and this is something

00:21:12,740 --> 00:21:17,120
we've been working on closely with

00:21:14,380 --> 00:21:21,230
Expedia as well as companies like New

00:21:17,120 --> 00:21:23,060
York Times Airbnb on a technical

00:21:21,230 --> 00:21:25,160
architecture that lets you have the best

00:21:23,060 --> 00:21:27,230
of both worlds a single graph for your

00:21:25,160 --> 00:21:30,860
org but where the implementation is

00:21:27,230 --> 00:21:32,630
federated across multiple systems and it

00:21:30,860 --> 00:21:34,340
looks something like this we're gonna

00:21:32,630 --> 00:21:36,260
take that data graph layer that sits

00:21:34,340 --> 00:21:38,300
between your your capabilities and your

00:21:36,260 --> 00:21:43,010
apps we're gonna divide it into two

00:21:38,300 --> 00:21:45,410
parts part of it is gonna be what we

00:21:43,010 --> 00:21:49,340
might call it gateway a piece of shared

00:21:45,410 --> 00:21:51,680
infrastructure that presents a complete

00:21:49,340 --> 00:21:53,270
graph that's where the clients are gonna

00:21:51,680 --> 00:21:56,480
query that's what's gonna execute your

00:21:53,270 --> 00:21:57,500
graphical queries right it's also where

00:21:56,480 --> 00:21:59,300
you're going to centralize the

00:21:57,500 --> 00:22:00,770
management and the control over the

00:21:59,300 --> 00:22:03,980
graph so questions like where does the

00:22:00,770 --> 00:22:06,190
safe list live how do i how do i access

00:22:03,980 --> 00:22:09,710
the history of this schema for example

00:22:06,190 --> 00:22:12,950
the second layer is going to be where

00:22:09,710 --> 00:22:15,380
the actual definition of the graph lives

00:22:12,950 --> 00:22:17,480
instead of one monolithic schema now

00:22:15,380 --> 00:22:20,450
that layer is going to be an array of

00:22:17,480 --> 00:22:24,230
schemas that composed together into a

00:22:20,450 --> 00:22:27,020
single graph and in this model each

00:22:24,230 --> 00:22:29,030
schema lives with the team that's

00:22:27,020 --> 00:22:31,250
responsible for that part of the domain

00:22:29,030 --> 00:22:33,050
model or that part of the graph so you

00:22:31,250 --> 00:22:35,210
might have a product team that owns the

00:22:33,050 --> 00:22:38,180
product catalog an Accounts team that

00:22:35,210 --> 00:22:41,420
owns user accounts a reviews team that

00:22:38,180 --> 00:22:42,590
owns reviews written by users each of

00:22:41,420 --> 00:22:44,690
these teams may be working in a

00:22:42,590 --> 00:22:46,370
different language they have a different

00:22:44,690 --> 00:22:50,420
development lifecycle they may be using

00:22:46,370 --> 00:22:51,710
a different CI CD system but with the

00:22:50,420 --> 00:22:53,120
right infrastructure we can bring all

00:22:51,710 --> 00:22:55,940
that back together into a single data

00:22:53,120 --> 00:22:57,860
graph and there's a third piece to the

00:22:55,940 --> 00:23:00,740
puzzle and this is where having a data

00:22:57,860 --> 00:23:02,210
graph platform comes in it's great that

00:23:00,740 --> 00:23:03,920
we have a shared asset and it's great

00:23:02,210 --> 00:23:06,080
that we've divided responsibilities but

00:23:03,920 --> 00:23:08,390
things need owners you're gonna need a

00:23:06,080 --> 00:23:10,430
graph owner or a graph architect that

00:23:08,390 --> 00:23:12,050
has an overall responsibility for the

00:23:10,430 --> 00:23:16,310
shape and the health of that graph and

00:23:12,050 --> 00:23:17,960
so alongside separate services and a

00:23:16,310 --> 00:23:21,050
piece of infrastructure you can rely on

00:23:17,960 --> 00:23:22,400
you're gonna want to lling an

00:23:21,050 --> 00:23:24,920
infrastructure that manages the

00:23:22,400 --> 00:23:28,340
lifecycle of the data graph and how that

00:23:24,920 --> 00:23:31,520
changes over time so for example a key

00:23:28,340 --> 00:23:33,200
workflow in this model is what happens

00:23:31,520 --> 00:23:37,370
when the team that owns the review

00:23:33,200 --> 00:23:38,870
schema makes a change well we want to do

00:23:37,370 --> 00:23:40,250
really the same thing that we saw

00:23:38,870 --> 00:23:41,990
earlier with the schema change

00:23:40,250 --> 00:23:43,670
validation right we want to be able to

00:23:41,990 --> 00:23:45,860
take that new change from the reviews

00:23:43,670 --> 00:23:47,810
team compose it with what we have from

00:23:45,860 --> 00:23:49,280
the other teams validate that that's

00:23:47,810 --> 00:23:51,920
compatible with all the different use

00:23:49,280 --> 00:23:53,930
cases of the overall data graph and if

00:23:51,920 --> 00:23:55,310
so do a managed rollout of that change

00:23:53,930 --> 00:23:58,580
to the Gateway and thus to all the

00:23:55,310 --> 00:24:00,590
applications right on the other hand if

00:23:58,580 --> 00:24:02,960
a product team tries to push a change

00:24:00,590 --> 00:24:04,850
that doesn't end up being compatible

00:24:02,960 --> 00:24:06,740
with all the use cases of the graph we

00:24:04,850 --> 00:24:10,010
want to stop that as part of the

00:24:06,740 --> 00:24:13,550
continuous delivery pipeline so there's

00:24:10,010 --> 00:24:17,960
a set of workflows and tools that allow

00:24:13,550 --> 00:24:20,090
you to scale this so that there is this

00:24:17,960 --> 00:24:23,840
independent development velocity that

00:24:20,090 --> 00:24:25,820
each team can adopt but that again comes

00:24:23,840 --> 00:24:26,809
together into a single data graph that

00:24:25,820 --> 00:24:30,529
the whole organization

00:24:26,809 --> 00:24:32,960
can use and leverage James Baxley is

00:24:30,529 --> 00:24:37,129
gonna come up a little bit later and do

00:24:32,960 --> 00:24:39,950
a demo of that ask him lots of questions

00:24:37,129 --> 00:24:42,379
he's got time for that in his talk what

00:24:39,950 --> 00:24:44,299
I showed you earlier this technology for

00:24:42,379 --> 00:24:46,279
having a gateway for executing queries

00:24:44,299 --> 00:24:48,499
for defining micro services and so on

00:24:46,279 --> 00:24:51,620
all of this is MIT code that we're

00:24:48,499 --> 00:24:53,120
releasing in just about a week but we're

00:24:51,620 --> 00:24:55,249
happy to give everybody an early look

00:24:53,120 --> 00:24:57,409
drop us a line or come find any of us

00:24:55,249 --> 00:24:58,909
during the day and we'll get you set up

00:24:57,409 --> 00:25:01,730
we're really excited about this and I

00:24:58,909 --> 00:25:03,009
think you're gonna find it super cool

00:25:01,730 --> 00:25:05,749
stuff

00:25:03,009 --> 00:25:07,549
one more thing now that we've got this

00:25:05,749 --> 00:25:11,059
whole graph there's a fourth and final

00:25:07,549 --> 00:25:13,159
stage in my mind and this is a little

00:25:11,059 --> 00:25:15,259
bit further future-looking but i think

00:25:13,159 --> 00:25:18,320
it's valuable to think in terms of where

00:25:15,259 --> 00:25:19,490
this asset can take us once we've gotten

00:25:18,320 --> 00:25:21,740
to the point where we really have

00:25:19,490 --> 00:25:23,809
modeled our data and we've made it

00:25:21,740 --> 00:25:26,059
accessible to all these different use

00:25:23,809 --> 00:25:28,789
cases I think about this is running the

00:25:26,059 --> 00:25:30,499
business on the data graph and some

00:25:28,789 --> 00:25:32,600
examples of what people are doing today

00:25:30,499 --> 00:25:34,279
that I think over time we'll be able to

00:25:32,600 --> 00:25:35,840
formalize and we'll be able to bring

00:25:34,279 --> 00:25:38,779
more and more product and infrastructure

00:25:35,840 --> 00:25:41,960
support to our ideas like public and

00:25:38,779 --> 00:25:43,759
partner api's so if I have if I want a

00:25:41,960 --> 00:25:45,470
partner ecosystem if I really want to be

00:25:43,759 --> 00:25:48,019
a platform and not just a company with

00:25:45,470 --> 00:25:49,549
apps maybe the data graph is the most

00:25:48,019 --> 00:25:52,730
effective way to do that because I don't

00:25:49,549 --> 00:25:55,009
want to mandate exactly how my partners

00:25:52,730 --> 00:25:56,509
get to use my data I don't want them to

00:25:55,009 --> 00:25:58,789
have to consume that data through these

00:25:56,509 --> 00:26:01,100
point-to-point api's or through really

00:25:58,789 --> 00:26:03,169
heavy rest payloads that give them all

00:26:01,100 --> 00:26:04,490
the data at once I actually want all

00:26:03,169 --> 00:26:05,990
that fine-grained knowledge of what my

00:26:04,490 --> 00:26:08,869
partners are doing just as much as I

00:26:05,990 --> 00:26:10,220
want it for my own developers right so

00:26:08,869 --> 00:26:11,899
public and partner api's are one

00:26:10,220 --> 00:26:14,149
direction you can take this another

00:26:11,899 --> 00:26:16,039
direction you can go is what about

00:26:14,149 --> 00:26:18,049
interactive use of the graph what about

00:26:16,039 --> 00:26:20,509
instead of having to build a bunch of

00:26:18,049 --> 00:26:22,940
custom line of business apps internally

00:26:20,509 --> 00:26:25,100
for my support team what if my support

00:26:22,940 --> 00:26:27,259
team when they're trying to resolve a

00:26:25,100 --> 00:26:29,450
billing question from a customer can

00:26:27,259 --> 00:26:31,340
just go into the graph and execute a pre

00:26:29,450 --> 00:26:33,440
authored query that someone's written

00:26:31,340 --> 00:26:35,119
and registered into a system doesn't

00:26:33,440 --> 00:26:38,299
that replace a lot of that software we

00:26:35,119 --> 00:26:40,549
had to write before or what if I have

00:26:38,299 --> 00:26:43,969
batch processes or scratch

00:26:40,549 --> 00:26:46,929
it's that I can run not against these

00:26:43,969 --> 00:26:48,979
custom api's or directly against

00:26:46,929 --> 00:26:50,570
services which causes this tight

00:26:48,979 --> 00:26:52,159
coupling but rather against the graph

00:26:50,570 --> 00:26:55,580
right we have companies that are

00:26:52,159 --> 00:26:58,239
starting to explore that and finally you

00:26:55,580 --> 00:27:01,099
know think about a world with gdpr or

00:26:58,239 --> 00:27:04,459
California's you know consumer Privacy

00:27:01,099 --> 00:27:07,580
Act governments are starting to take an

00:27:04,459 --> 00:27:10,609
interest in how we manage our data and I

00:27:07,580 --> 00:27:12,259
think rightly so consumers were starting

00:27:10,609 --> 00:27:14,959
to expect companies to have a pretty

00:27:12,259 --> 00:27:17,149
principled approach to where that data

00:27:14,959 --> 00:27:19,639
lives and a really clear understanding

00:27:17,149 --> 00:27:21,529
where it did and did not go and I think

00:27:19,639 --> 00:27:24,919
the data graph really speaks to that in

00:27:21,529 --> 00:27:26,539
a thoughtful way because again I have

00:27:24,919 --> 00:27:28,759
this fine-grained understanding I can

00:27:26,539 --> 00:27:31,489
ask that question of the graph and I can

00:27:28,759 --> 00:27:34,159
know precisely where a particular piece

00:27:31,489 --> 00:27:36,739
of privacy sensitive information right

00:27:34,159 --> 00:27:38,389
may have gone or I can enforce rules

00:27:36,739 --> 00:27:40,669
that prevent that data from leaving the

00:27:38,389 --> 00:27:42,529
organization at the data graph level and

00:27:40,669 --> 00:27:43,909
know that every application no matter

00:27:42,529 --> 00:27:46,849
who's writing it or how they're writing

00:27:43,909 --> 00:27:48,320
it will will follow that policy so

00:27:46,849 --> 00:27:50,479
whether it's governance

00:27:48,320 --> 00:27:52,219
whether it's using the metadata about

00:27:50,479 --> 00:27:54,289
how the graph is used for business

00:27:52,219 --> 00:27:55,609
intelligence or any of these other use

00:27:54,289 --> 00:27:57,289
cases I think what we're gonna see over

00:27:55,609 --> 00:28:00,079
the coming year is more and more

00:27:57,289 --> 00:28:02,389
interest in the value of my graph not

00:28:00,079 --> 00:28:03,979
just in connecting my apps to my data

00:28:02,389 --> 00:28:05,959
but in understanding how those

00:28:03,979 --> 00:28:07,459
connections work and having a say in

00:28:05,959 --> 00:28:11,179
what the policy for those connections

00:28:07,459 --> 00:28:13,729
may be so that's that those are the

00:28:11,179 --> 00:28:17,690
stages that's what we want you to go

00:28:13,729 --> 00:28:20,119
through today and as you hear James and

00:28:17,690 --> 00:28:23,179
Danyelle as you hear from Expedia and

00:28:20,119 --> 00:28:25,309
SurveyMonkey think about where are we

00:28:23,179 --> 00:28:27,979
where can we go next what do we need to

00:28:25,309 --> 00:28:29,659
get there how do we get that and I hope

00:28:27,979 --> 00:28:33,510
you'll find it's a productive and

00:28:29,659 --> 00:28:38,230
enjoyable afternoon so thank you

00:28:33,510 --> 00:28:38,230

YouTube URL: https://www.youtube.com/watch?v=OtzygO29Klw


