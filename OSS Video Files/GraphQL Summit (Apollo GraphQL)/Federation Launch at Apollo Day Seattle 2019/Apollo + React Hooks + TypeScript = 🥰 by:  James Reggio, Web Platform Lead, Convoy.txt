Title: Apollo + React Hooks + TypeScript = ðŸ¥° by:  James Reggio, Web Platform Lead, Convoy
Publication date: 2019-07-19
Playlist: Federation Launch at Apollo Day Seattle 2019
Description: 
	Explore Apollo + React Hooks + TypeScript = ðŸ¥°  with James Reggio, Web Platform Lead at Convoy

Resources:
ApolloGraphQL - https://www.apollographql.com/
Learn GraphQL using Apollo's Tutorials: https://odyssey.apollographql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Captions: 
	00:00:03,750 --> 00:00:09,160
again my name is James Reggio I'm the

00:00:07,509 --> 00:00:11,950
tech lead on the web platform team at

00:00:09,160 --> 00:00:14,129
convoy I really appreciate the apology

00:00:11,950 --> 00:00:16,770
m-- inviting me to speak here today

00:00:14,129 --> 00:00:18,850
they've been a great partner to us

00:00:16,770 --> 00:00:21,460
convoy was a company that was founded

00:00:18,850 --> 00:00:23,170
right around the time that graph QL was

00:00:21,460 --> 00:00:25,390
announced on the scene so we've actually

00:00:23,170 --> 00:00:26,380
been able to embrace graft you all from

00:00:25,390 --> 00:00:29,170
the start

00:00:26,380 --> 00:00:31,330
specifically Apollo and grow with them

00:00:29,170 --> 00:00:33,670
as you can also probably see from the

00:00:31,330 --> 00:00:36,550
title of my talk I'm gonna be taking us

00:00:33,670 --> 00:00:39,640
back to the front end I saw earlier from

00:00:36,550 --> 00:00:41,559
a show of hands that maybe 20% of the

00:00:39,640 --> 00:00:43,329
people here have worked with hooks but

00:00:41,559 --> 00:00:45,579
would you give me another show of hands

00:00:43,329 --> 00:00:49,899
if you've ever worked with Apollo and

00:00:45,579 --> 00:00:52,269
react on the front end great ok so that

00:00:49,899 --> 00:00:54,129
looks more like 50% of of y'all have

00:00:52,269 --> 00:00:56,350
worked in the front end what I'm gonna

00:00:54,129 --> 00:00:58,210
be doing with this talk is I'm gonna try

00:00:56,350 --> 00:01:00,819
to tell a story using some practical

00:00:58,210 --> 00:01:02,949
examples of code that I pulled from our

00:01:00,819 --> 00:01:04,960
apps about the way that we evolved the

00:01:02,949 --> 00:01:07,960
way that we write graph QL for the

00:01:04,960 --> 00:01:09,940
client at Conway there's been sort of

00:01:07,960 --> 00:01:11,950
three distinct patterns that we've

00:01:09,940 --> 00:01:15,040
embraced and they've always been sort of

00:01:11,950 --> 00:01:17,380
the best practices at the time but the

00:01:15,040 --> 00:01:20,200
you know that the transition from each

00:01:17,380 --> 00:01:22,300
has to sort of be motivated in order to

00:01:20,200 --> 00:01:23,650
justify the refactoring work involved so

00:01:22,300 --> 00:01:25,990
I'm going to explain with some code

00:01:23,650 --> 00:01:28,930
samples how we made those decisions and

00:01:25,990 --> 00:01:30,610
what benefits we witnessed before I get

00:01:28,930 --> 00:01:33,010
into that let me just tell you a word or

00:01:30,610 --> 00:01:35,350
two about convoy convoy is a Seattle

00:01:33,010 --> 00:01:38,020
area tech startup founded four years ago

00:01:35,350 --> 00:01:39,790
we are basically out to revolutionize

00:01:38,020 --> 00:01:41,950
the trucking industry in the United

00:01:39,790 --> 00:01:43,270
States and the best way to think about

00:01:41,950 --> 00:01:46,000
what we do is that we provide a

00:01:43,270 --> 00:01:48,010
marketplace for truckers and carriers

00:01:46,000 --> 00:01:49,420
there sorry for shippers and carriers to

00:01:48,010 --> 00:01:51,580
connect so on one side of that

00:01:49,420 --> 00:01:53,680
marketplace we have hundreds of

00:01:51,580 --> 00:01:56,830
enterprise businesses they tend to be

00:01:53,680 --> 00:01:58,630
pretty large like Niagara or Unilever or

00:01:56,830 --> 00:02:00,220
anheuser-busch and then on the other

00:01:58,630 --> 00:02:02,230
side of the marketplace we have tens of

00:02:00,220 --> 00:02:04,540
thousands of small business owners who

00:02:02,230 --> 00:02:08,860
actually own the trucks and move the

00:02:04,540 --> 00:02:11,050
cargo we build the marketplace and we we

00:02:08,860 --> 00:02:13,240
focused particularly on reducing waste

00:02:11,050 --> 00:02:14,650
in the trucking industry most people are

00:02:13,240 --> 00:02:16,210
pretty familiar with the fact that like

00:02:14,650 --> 00:02:17,920
every single package

00:02:16,210 --> 00:02:19,660
good that we consume here in the United

00:02:17,920 --> 00:02:21,250
States gets to them by a truck and that

00:02:19,660 --> 00:02:23,110
trucking is really important to the US

00:02:21,250 --> 00:02:25,080
economy but the thing that a lot of

00:02:23,110 --> 00:02:28,060
people don't know is how wasteful it is

00:02:25,080 --> 00:02:30,250
according to recent estimates almost 40%

00:02:28,060 --> 00:02:33,280
of trucks on the road are running empty

00:02:30,250 --> 00:02:35,320
with no cargo in the back and that waste

00:02:33,280 --> 00:02:37,480
is terrible for the environment it's

00:02:35,320 --> 00:02:39,370
also terrible for our economy because it

00:02:37,480 --> 00:02:40,780
drives up the cost of consumer goods and

00:02:39,370 --> 00:02:43,000
it means that people aren't making as

00:02:40,780 --> 00:02:44,940
much money as they could be so we're

00:02:43,000 --> 00:02:47,530
focused on reducing that level of waste

00:02:44,940 --> 00:02:49,860
to speak more about the technology at

00:02:47,530 --> 00:02:53,230
convoy we actually just this week

00:02:49,860 --> 00:02:55,570
surpassed the hundred engineer mark and

00:02:53,230 --> 00:02:57,990
as I said earlier we started the company

00:02:55,570 --> 00:03:00,370
about four years ago and we at that time

00:02:57,990 --> 00:03:02,980
decided to embrace the JavaScript and

00:03:00,370 --> 00:03:04,510
typescript ecosystem so our entire stack

00:03:02,980 --> 00:03:06,100
is some amount of JavaScript or

00:03:04,510 --> 00:03:07,600
typescript when we've been converting

00:03:06,100 --> 00:03:12,550
more and more towards typescript over

00:03:07,600 --> 00:03:15,310
time the the let's see so we have about

00:03:12,550 --> 00:03:18,010
a half dozen apps out in the wild their

00:03:15,310 --> 00:03:20,560
mixture of react and react native and we

00:03:18,010 --> 00:03:22,510
also have a roughly 20 to 25 services in

00:03:20,560 --> 00:03:24,520
our service-oriented back-end so we're

00:03:22,510 --> 00:03:26,980
growing fairly quickly there were 30

00:03:24,520 --> 00:03:29,020
engineers just a year ago so you can

00:03:26,980 --> 00:03:32,020
imagine that we need to think about how

00:03:29,020 --> 00:03:33,700
we scale our practices and I said a

00:03:32,020 --> 00:03:35,950
moment ago that we were early adopters

00:03:33,700 --> 00:03:38,380
of graph QL what was great about the

00:03:35,950 --> 00:03:40,240
timing was that we basically chose to

00:03:38,380 --> 00:03:42,250
embrace Apollo right when it was

00:03:40,240 --> 00:03:44,980
released and we chose it because it had

00:03:42,250 --> 00:03:46,270
both the client and a server offering we

00:03:44,980 --> 00:03:47,890
chose it because it offered more

00:03:46,270 --> 00:03:49,870
flexibility than what Facebook had to

00:03:47,890 --> 00:03:52,570
offer with relay and we chose it because

00:03:49,870 --> 00:03:54,430
the team behind Apollo was incredibly

00:03:52,570 --> 00:03:56,830
transparent about the roadmap the

00:03:54,430 --> 00:03:58,480
shortcomings and what what they intended

00:03:56,830 --> 00:04:00,820
to do with the product we have no

00:03:58,480 --> 00:04:03,640
regrets about it but as most people know

00:04:00,820 --> 00:04:05,440
JavaScript moves really quickly and I

00:04:03,640 --> 00:04:07,000
would contend that client JavaScript

00:04:05,440 --> 00:04:09,970
moves even faster than the rest of the

00:04:07,000 --> 00:04:11,410
ecosystem in general so every three

00:04:09,970 --> 00:04:13,470
months it felt like there was something

00:04:11,410 --> 00:04:16,660
new showing up some new shiny way to

00:04:13,470 --> 00:04:18,940
write a client JavaScript to connect the

00:04:16,660 --> 00:04:20,890
graph QL database to or the graph QL API

00:04:18,940 --> 00:04:22,600
to our front-end over the past three

00:04:20,890 --> 00:04:24,580
years we've seen a huge number of Apollo

00:04:22,600 --> 00:04:26,530
client features released we've seen

00:04:24,580 --> 00:04:28,480
major evolution in tooling which we

00:04:26,530 --> 00:04:29,560
heard about earlier today we've also had

00:04:28,480 --> 00:04:31,900
like evolution and so

00:04:29,560 --> 00:04:33,610
industry best practices and just last

00:04:31,900 --> 00:04:35,260
November the react team kind of turned

00:04:33,610 --> 00:04:38,919
the whole world on its head and

00:04:35,260 --> 00:04:41,800
introduced react hooks so we're a

00:04:38,919 --> 00:04:43,780
business even though we're still fairly

00:04:41,800 --> 00:04:45,370
small like any large company and we need

00:04:43,780 --> 00:04:47,350
to be able to justify the changes that

00:04:45,370 --> 00:04:49,690
we make to our development model and so

00:04:47,350 --> 00:04:52,180
on the web platform team we tend to

00:04:49,690 --> 00:04:54,250
think a lot about whether the the

00:04:52,180 --> 00:04:55,480
features that are have been released to

00:04:54,250 --> 00:04:57,639
the market that we could consider

00:04:55,480 --> 00:04:59,770
adopting are going to increase the

00:04:57,639 --> 00:05:01,600
robustness or the ergonomics of the

00:04:59,770 --> 00:05:03,160
development experience we want to see

00:05:01,600 --> 00:05:05,800
like a major step change function in

00:05:03,160 --> 00:05:07,540
both before we choose to adopt and just

00:05:05,800 --> 00:05:09,400
to clarify what I mean by that with

00:05:07,540 --> 00:05:11,710
robustness I'm speaking of like general

00:05:09,400 --> 00:05:12,760
correctness and the facilities and the

00:05:11,710 --> 00:05:14,770
code to make sure that you're not

00:05:12,760 --> 00:05:16,990
writing and introducing bugs and an

00:05:14,770 --> 00:05:19,330
ergonomic speaks to just is it fun to

00:05:16,990 --> 00:05:22,660
write code in this environment so we do

00:05:19,330 --> 00:05:24,100
pay attention to both of those I'm what

00:05:22,660 --> 00:05:25,750
I'm going to do is we're going to hop

00:05:24,100 --> 00:05:27,900
over to code editor and we're going to

00:05:25,750 --> 00:05:31,510
take a look at three distinct phases of

00:05:27,900 --> 00:05:33,160
a component as we sort of began as we

00:05:31,510 --> 00:05:34,900
would have written it back in 2016

00:05:33,160 --> 00:05:36,280
and then sort of as we began to move

00:05:34,900 --> 00:05:38,260
into some of the technologies that were

00:05:36,280 --> 00:05:39,700
available last year and then finally

00:05:38,260 --> 00:05:42,370
what it would look like today and our

00:05:39,700 --> 00:05:44,050
code bases we begin to embrace hooks my

00:05:42,370 --> 00:05:45,490
hope with this is not necessarily to

00:05:44,050 --> 00:05:47,770
explain how all of the older

00:05:45,490 --> 00:05:49,300
technologies work if you've encountered

00:05:47,770 --> 00:05:50,800
them then you've probably some of the

00:05:49,300 --> 00:05:53,590
pain points will may resonate with you

00:05:50,800 --> 00:05:55,210
but lecture the older technologies were

00:05:53,590 --> 00:05:57,130
deprecated because they're difficult to

00:05:55,210 --> 00:05:59,020
understand and explain so I'm not going

00:05:57,130 --> 00:06:00,870
to spend too much time on that instead

00:05:59,020 --> 00:06:03,729
what I'm hoping you'll gain from this is

00:06:00,870 --> 00:06:05,380
you know maybe maybe you'll see where

00:06:03,729 --> 00:06:06,400
your company is or you'll see like the

00:06:05,380 --> 00:06:08,350
code base that you're working and

00:06:06,400 --> 00:06:11,260
represented in here and what you'll see

00:06:08,350 --> 00:06:13,389
is some of the benefits that may may

00:06:11,260 --> 00:06:14,979
occur should you migrate forward because

00:06:13,389 --> 00:06:19,330
we always want to be justifying it with

00:06:14,979 --> 00:06:20,500
very specific value propositions so I'm

00:06:19,330 --> 00:06:23,229
gonna move over to my editor now

00:06:20,500 --> 00:06:26,710
hopefully I'll have a better better luck

00:06:23,229 --> 00:06:27,960
presenting with these color scheme how

00:06:26,710 --> 00:06:29,500
does that look and everybody read that

00:06:27,960 --> 00:06:32,530
all right

00:06:29,500 --> 00:06:37,210
thank you so let's why in the clock

00:06:32,530 --> 00:06:39,419
clock back to 2016 in 2016 just as

00:06:37,210 --> 00:06:41,860
Danielle said there was a like a huge

00:06:39,419 --> 00:06:42,969
there was massive adoption of redux for

00:06:41,860 --> 00:06:45,819
managing client state

00:06:42,969 --> 00:06:47,349
and react was was popular it was solid

00:06:45,819 --> 00:06:49,659
at that point and everybody was

00:06:47,349 --> 00:06:51,159
basically refactoring the code base to

00:06:49,659 --> 00:06:54,249
use this concept called higher-order

00:06:51,159 --> 00:06:57,389
components higher-order components are

00:06:54,249 --> 00:07:02,019
this nice encapsulation technique that

00:06:57,389 --> 00:07:04,029
maps to how react handles api's at the

00:07:02,019 --> 00:07:06,579
component level the idea was basically

00:07:04,029 --> 00:07:08,110
that you'd separate a concern out of

00:07:06,579 --> 00:07:09,939
your components maybe it would be local

00:07:08,110 --> 00:07:13,389
state management or global state

00:07:09,939 --> 00:07:14,769
management or API API data fetching and

00:07:13,389 --> 00:07:17,169
you put it in another component that

00:07:14,769 --> 00:07:20,049
injects that data into your component

00:07:17,169 --> 00:07:23,139
it's this nice approach to encapsulation

00:07:20,049 --> 00:07:24,249
but it had a lot of rough edges so what

00:07:23,139 --> 00:07:26,589
I'm going to do is I'm going to walk you

00:07:24,249 --> 00:07:28,479
through sort of a mock component that

00:07:26,589 --> 00:07:30,249
you could have seen in one of our apps

00:07:28,479 --> 00:07:32,649
and we're gonna see how this component

00:07:30,249 --> 00:07:37,059
evolved first from with using Hawkes

00:07:32,649 --> 00:07:38,979
onward to to to other iterations so if

00:07:37,059 --> 00:07:41,019
we look at the left pane we're gonna see

00:07:38,979 --> 00:07:43,059
this shipment details page and there's a

00:07:41,019 --> 00:07:44,559
lot of things in here that actually look

00:07:43,059 --> 00:07:47,679
exactly like they did in Danielle's

00:07:44,559 --> 00:07:49,929
talk you'll see that we're having some

00:07:47,679 --> 00:07:52,419
props passed in that contain the results

00:07:49,929 --> 00:07:54,550
of a query down here we're also grabbing

00:07:52,419 --> 00:07:55,779
some functions out of the props that

00:07:54,550 --> 00:07:58,269
we're going to pass onward and these

00:07:55,779 --> 00:07:59,739
functions actually map to mutations we

00:07:58,269 --> 00:08:02,110
have that common boilerplate in the

00:07:59,739 --> 00:08:04,539
middle which is like common to every

00:08:02,110 --> 00:08:06,099
single iteration of this component which

00:08:04,539 --> 00:08:08,199
is that we have to handle all these sort

00:08:06,099 --> 00:08:10,419
of edge cases around errors loading

00:08:08,199 --> 00:08:12,579
States and maybe some business logic

00:08:10,419 --> 00:08:14,919
errors around like a shipment not being

00:08:12,579 --> 00:08:17,049
found and then ultimately we go and we

00:08:14,919 --> 00:08:18,819
render some other child components in

00:08:17,049 --> 00:08:20,979
this case we have a shipper summary a

00:08:18,819 --> 00:08:23,079
carrier summary and a little stops

00:08:20,979 --> 00:08:26,579
editor that would allow us to visualize

00:08:23,079 --> 00:08:30,519
and aggregate stops to to the shipment

00:08:26,579 --> 00:08:32,229
this is fairly standard reactants I will

00:08:30,519 --> 00:08:35,079
say that like this was a major step

00:08:32,229 --> 00:08:37,509
forward not having to worry about data

00:08:35,079 --> 00:08:39,490
logic and any kind of fetching logic in

00:08:37,509 --> 00:08:41,919
this component was it was a huge step

00:08:39,490 --> 00:08:43,329
forward from the past where you'd

00:08:41,919 --> 00:08:45,519
usually use some kind of lifecycle

00:08:43,329 --> 00:08:48,430
method like component did mount to make

00:08:45,519 --> 00:08:50,170
a fetch to some REST API and then parse

00:08:48,430 --> 00:08:51,130
it and store it in the state like we're

00:08:50,170 --> 00:08:53,910
not doing that anymore

00:08:51,130 --> 00:08:56,800
and that encapsulation was a major win

00:08:53,910 --> 00:08:59,470
let me show you now though how

00:08:56,800 --> 00:09:01,540
the the fetching does occur as I scroll

00:08:59,470 --> 00:09:04,570
down here we're going to see a bunch of

00:09:01,540 --> 00:09:06,209
the higher-order components each

00:09:04,570 --> 00:09:08,410
higher-order component here is

00:09:06,209 --> 00:09:10,899
represented with a call to this graph QL

00:09:08,410 --> 00:09:14,020
method this was basically the way the

00:09:10,899 --> 00:09:16,029
only way to bind to a graph QL API when

00:09:14,020 --> 00:09:19,089
Apollo client was launched back in 2016

00:09:16,029 --> 00:09:20,500
it was modeled after what Redux was

00:09:19,089 --> 00:09:23,410
doing with the connect higher-order

00:09:20,500 --> 00:09:27,279
component you'll see that we have one in

00:09:23,410 --> 00:09:28,800
here that that defines a query and then

00:09:27,279 --> 00:09:31,480
we have these two others that are

00:09:28,800 --> 00:09:32,080
injecting some mutations into our

00:09:31,480 --> 00:09:34,240
component

00:09:32,080 --> 00:09:35,800
it seems pretty reasonable at first

00:09:34,240 --> 00:09:37,930
glance but there are some really pointy

00:09:35,800 --> 00:09:40,270
bits about this that would oftentimes

00:09:37,930 --> 00:09:41,709
lead to a good half an hour to half a

00:09:40,270 --> 00:09:44,410
day of debugging to try to figure out

00:09:41,709 --> 00:09:47,410
what went wrong the first thing about it

00:09:44,410 --> 00:09:49,990
is that these higher-order components

00:09:47,410 --> 00:09:54,070
don't naturally layer on to one another

00:09:49,990 --> 00:09:55,089
they all define props and they pass

00:09:54,070 --> 00:09:57,250
through the props that they receive and

00:09:55,089 --> 00:09:59,320
then add some more but if you have

00:09:57,250 --> 00:10:01,209
multiple mutation higher-order

00:09:59,320 --> 00:10:02,829
components for instance you might

00:10:01,209 --> 00:10:04,510
actually find that one of them is going

00:10:02,829 --> 00:10:06,160
to override the other unless you give it

00:10:04,510 --> 00:10:09,310
a unique name this is something that

00:10:06,160 --> 00:10:10,839
actually like led to I've lost plenty of

00:10:09,310 --> 00:10:12,160
time to trying to debug this especially

00:10:10,839 --> 00:10:14,050
when the higher-order components

00:10:12,160 --> 00:10:16,510
themselves are defined in another file

00:10:14,050 --> 00:10:17,800
it's very easy to layer on a couple and

00:10:16,510 --> 00:10:19,690
then realize that you're not getting all

00:10:17,800 --> 00:10:21,370
the information you expect another

00:10:19,690 --> 00:10:24,160
problem with them is that it's really

00:10:21,370 --> 00:10:26,290
really difficult to type them when we

00:10:24,160 --> 00:10:28,300
began we did consider using typescript

00:10:26,290 --> 00:10:30,220
but there wasn't much value to it

00:10:28,300 --> 00:10:33,279
because it was so difficult to express

00:10:30,220 --> 00:10:35,470
typings for higher-order components even

00:10:33,279 --> 00:10:38,860
the tools that will do code gen nowadays

00:10:35,470 --> 00:10:40,720
don't really give 100% accurate types so

00:10:38,860 --> 00:10:42,160
you don't have any ability to statically

00:10:40,720 --> 00:10:44,800
verify say that you're getting all the

00:10:42,160 --> 00:10:46,600
props that you expect or that that

00:10:44,800 --> 00:10:49,089
you're not doing something illegal or or

00:10:46,600 --> 00:10:51,279
error-prone one of the other things that

00:10:49,089 --> 00:10:53,320
is unfortunate about this kind of in the

00:10:51,279 --> 00:10:56,649
category but not necessarily a

00:10:53,320 --> 00:10:59,140
showstopper is that when we when we want

00:10:56,649 --> 00:11:01,120
to specify values for the variables to

00:10:59,140 --> 00:11:04,570
these queries and mutations we reach

00:11:01,120 --> 00:11:07,089
into the props but we do it here way

00:11:04,570 --> 00:11:09,220
down on the page like outside of the

00:11:07,089 --> 00:11:10,690
component itself you typically think

00:11:09,220 --> 00:11:11,920
about props right alongside the

00:11:10,690 --> 00:11:13,720
ponent and when you think about

00:11:11,920 --> 00:11:15,340
refactoring props he'll usually do it

00:11:13,720 --> 00:11:17,620
right here in the component but it's

00:11:15,340 --> 00:11:20,170
really easy then to forget that hey I

00:11:17,620 --> 00:11:22,540
need to come down here and change the

00:11:20,170 --> 00:11:24,640
usage of the props again this is

00:11:22,540 --> 00:11:26,950
exacerbated when you factor these out to

00:11:24,640 --> 00:11:30,370
other files so that's that's less than

00:11:26,950 --> 00:11:31,840
ideal there's one other thing that is

00:11:30,370 --> 00:11:34,300
unfortunate about higher-order

00:11:31,840 --> 00:11:36,460
components which is that if you wash up

00:11:34,300 --> 00:11:38,590
the the reactive bugger you're gonna see

00:11:36,460 --> 00:11:40,810
that each one of them actually inserts a

00:11:38,590 --> 00:11:42,850
component into the visual hierarchy and

00:11:40,810 --> 00:11:46,120
so when you look at your debugger in a

00:11:42,850 --> 00:11:48,130
graph QL app oftentimes you'll see more

00:11:46,120 --> 00:11:49,620
sort of more higher-order components

00:11:48,130 --> 00:11:52,630
than you'll see visual components and

00:11:49,620 --> 00:11:54,280
that's just more or less a nuisance

00:11:52,630 --> 00:11:56,410
there's nothing really painful about

00:11:54,280 --> 00:11:58,600
that except for when you start using

00:11:56,410 --> 00:12:00,580
this in react native we have a react

00:11:58,600 --> 00:12:02,770
native app and obviously react native

00:12:00,580 --> 00:12:04,570
runs on mobile phones but one of the

00:12:02,770 --> 00:12:07,690
things about running react native is

00:12:04,570 --> 00:12:11,380
that you actually are using a like let's

00:12:07,690 --> 00:12:14,230
say there's kind of an it's a kneecapped

00:12:11,380 --> 00:12:15,820
form of the the the JavaScript runtime

00:12:14,230 --> 00:12:17,230
it's not able to jet compile your code

00:12:15,820 --> 00:12:19,060
so there's a lot of there's a whole

00:12:17,230 --> 00:12:20,710
class of performance benefits that

00:12:19,060 --> 00:12:22,270
you're not able to enjoy when you're

00:12:20,710 --> 00:12:24,580
running react native code and we

00:12:22,270 --> 00:12:27,070
actually did see that this increased

00:12:24,580 --> 00:12:29,350
component hierarchy depth would lead to

00:12:27,070 --> 00:12:30,370
performance degradation and our app so

00:12:29,350 --> 00:12:31,630
it was something that was actually a

00:12:30,370 --> 00:12:34,660
little problematic and we spent time

00:12:31,630 --> 00:12:37,210
trying to reduce the number of queries

00:12:34,660 --> 00:12:38,860
we use and like make more complex

00:12:37,210 --> 00:12:40,690
mutations and things to work around that

00:12:38,860 --> 00:12:41,740
which isn't really how you want to think

00:12:40,690 --> 00:12:44,890
about it because then we start breaking

00:12:41,740 --> 00:12:46,570
the encapsulation there's one positive

00:12:44,890 --> 00:12:47,980
thing I forgot to cover right up front

00:12:46,570 --> 00:12:50,140
so I'm gonna I'm gonna backtrack for a

00:12:47,980 --> 00:12:52,210
second and speak to that before we move

00:12:50,140 --> 00:12:54,610
on and see how we can actually improve

00:12:52,210 --> 00:12:57,130
upon the bad and the myth and that is

00:12:54,610 --> 00:12:59,200
that we embrace this concept called

00:12:57,130 --> 00:13:00,760
component local fragments which is

00:12:59,200 --> 00:13:03,940
something that we borrowed from relay

00:13:00,760 --> 00:13:06,670
relay is Facebook's graph QL client API

00:13:03,940 --> 00:13:08,230
and like I said earlier we decided not

00:13:06,670 --> 00:13:10,210
to embrace it because it wasn't part of

00:13:08,230 --> 00:13:12,460
a broader ecosystem and it was too

00:13:10,210 --> 00:13:14,320
inflexible for the use cases that we

00:13:12,460 --> 00:13:16,030
envisioned but one of the things that it

00:13:14,320 --> 00:13:18,730
did well was that it encouraged you to

00:13:16,030 --> 00:13:20,980
break up your queries and put little

00:13:18,730 --> 00:13:22,090
fragments of your queries alongside the

00:13:20,980 --> 00:13:24,760
components that use the

00:13:22,090 --> 00:13:27,280
data so what that looks like in practice

00:13:24,760 --> 00:13:29,890
here is if I go into the carrier summary

00:13:27,280 --> 00:13:32,170
component let's see what I mean

00:13:29,890 --> 00:13:33,580
the curious summary component has a very

00:13:32,170 --> 00:13:35,830
uninteresting render method it just

00:13:33,580 --> 00:13:37,600
takes the carrier and it renders the

00:13:35,830 --> 00:13:39,150
name and the rating but what I want to

00:13:37,600 --> 00:13:41,920
show you here is that we're also

00:13:39,150 --> 00:13:43,180
attaching this graph to elf fragment to

00:13:41,920 --> 00:13:45,310
the carrier summary component that

00:13:43,180 --> 00:13:48,280
specifies precisely what fields were

00:13:45,310 --> 00:13:50,500
expecting on the carrier type this is

00:13:48,280 --> 00:13:52,690
the fragment is like the the most basic

00:13:50,500 --> 00:13:55,240
form of reusability within graph QL and

00:13:52,690 --> 00:13:57,610
the idea of co-locating it with the UI

00:13:55,240 --> 00:13:59,440
that depends on that data is something

00:13:57,610 --> 00:14:01,180
that is very powerful because it gives

00:13:59,440 --> 00:14:02,770
developers confidence that they're going

00:14:01,180 --> 00:14:04,540
to get the data that they asked for and

00:14:02,770 --> 00:14:06,970
when they're refactoring it makes them

00:14:04,540 --> 00:14:08,650
confident that they can remove a field

00:14:06,970 --> 00:14:10,540
the latter is really important because

00:14:08,650 --> 00:14:12,280
I'll say that I've worked in code bases

00:14:10,540 --> 00:14:13,870
where all the fragments queries and you

00:14:12,280 --> 00:14:15,690
tations are basically in one central

00:14:13,870 --> 00:14:18,040
file you might have something like a

00:14:15,690 --> 00:14:19,600
shipment summary and then full shipment

00:14:18,040 --> 00:14:22,330
fragments or something along those lines

00:14:19,600 --> 00:14:24,610
those things tend to become append-only

00:14:22,330 --> 00:14:26,580
and over time you end up with something

00:14:24,610 --> 00:14:28,270
that approximates the rest api because

00:14:26,580 --> 00:14:30,160
developers tend to feel very

00:14:28,270 --> 00:14:32,230
uncomfortable removing something that

00:14:30,160 --> 00:14:35,770
might feel that might have an impact on

00:14:32,230 --> 00:14:39,100
some other bit of the UI so we did

00:14:35,770 --> 00:14:40,750
embrace this approach to co-locating the

00:14:39,100 --> 00:14:42,700
data dependencies with alongside where

00:14:40,750 --> 00:14:44,290
they're used and the only downside to

00:14:42,700 --> 00:14:46,450
that is that they're a little bit

00:14:44,290 --> 00:14:48,130
error-prone speaks to the selection sets

00:14:46,450 --> 00:14:49,900
being error-prone we have a little bit

00:14:48,130 --> 00:14:52,480
of a problem where we if we were to

00:14:49,900 --> 00:14:55,420
remove rating right here there's nothing

00:14:52,480 --> 00:14:57,610
that would prevent us from using it in

00:14:55,420 --> 00:14:58,990
the response and that's where like

00:14:57,610 --> 00:15:01,540
typescript is going to come in and

00:14:58,990 --> 00:15:02,830
really save us so this is what things

00:15:01,540 --> 00:15:05,170
look like this was the state of the art

00:15:02,830 --> 00:15:06,790
in 2016 I would say that we were on all

00:15:05,170 --> 00:15:09,160
the best practices at the time and in

00:15:06,790 --> 00:15:10,480
that we definitely were able to find

00:15:09,160 --> 00:15:12,940
great productivity with this approach

00:15:10,480 --> 00:15:14,680
but there was a lot that left that could

00:15:12,940 --> 00:15:15,960
have been improved most notably we

00:15:14,680 --> 00:15:19,180
really wanted to get on the typescript

00:15:15,960 --> 00:15:20,980
so as the as the years went by and our

00:15:19,180 --> 00:15:22,870
code bases became more complex and we

00:15:20,980 --> 00:15:24,370
were constantly re-evaluating whether it

00:15:22,870 --> 00:15:26,620
was time to maybe migrate forward and

00:15:24,370 --> 00:15:29,260
find another approach two things

00:15:26,620 --> 00:15:31,150
happened the first is that the react

00:15:29,260 --> 00:15:32,800
community started to frown upon higher

00:15:31,150 --> 00:15:34,430
order components they're really

00:15:32,800 --> 00:15:36,949
difficult to understand

00:15:34,430 --> 00:15:38,959
it's very like the you know the

00:15:36,949 --> 00:15:40,519
ergonomics of this are not great and

00:15:38,959 --> 00:15:42,199
when you look under the hood at what's

00:15:40,519 --> 00:15:44,350
going on here it becomes even more

00:15:42,199 --> 00:15:46,730
confusing so there was a move towards

00:15:44,350 --> 00:15:48,350
making these a little bit more explicit

00:15:46,730 --> 00:15:50,449
and moving them directly into the render

00:15:48,350 --> 00:15:53,990
method and that concept was called

00:15:50,449 --> 00:15:55,509
render prop components so that happened

00:15:53,990 --> 00:15:57,589
and another thing that happens

00:15:55,509 --> 00:15:59,209
simultaneous to that is that code

00:15:57,589 --> 00:16:01,189
generation for typescript became a

00:15:59,209 --> 00:16:03,019
little bit more mature I'm gonna swipe

00:16:01,189 --> 00:16:05,089
right here and take us over to what that

00:16:03,019 --> 00:16:07,579
looks like in 2018

00:16:05,089 --> 00:16:09,559
you'll see the same component the

00:16:07,579 --> 00:16:10,850
shipment details page but now we have

00:16:09,559 --> 00:16:12,019
all of instead of having all the

00:16:10,850 --> 00:16:12,410
higher-order components at the very

00:16:12,019 --> 00:16:15,079
bottom

00:16:12,410 --> 00:16:17,329
they've all been hoisted up into the the

00:16:15,079 --> 00:16:19,759
render method that component itself and

00:16:17,329 --> 00:16:21,259
I think that like what you probably just

00:16:19,759 --> 00:16:23,660
saw is that we're now back in callback

00:16:21,259 --> 00:16:25,370
hell right like if you've ever developed

00:16:23,660 --> 00:16:26,809
for node before promises were a thing

00:16:25,370 --> 00:16:28,370
this should look familiar

00:16:26,809 --> 00:16:30,680
you basically have all these little

00:16:28,370 --> 00:16:32,059
function calls that eventually take a

00:16:30,680 --> 00:16:34,160
callback that takes a function that

00:16:32,059 --> 00:16:35,749
takes a callback text function now we're

00:16:34,160 --> 00:16:38,420
eight layers deep before we're doing any

00:16:35,749 --> 00:16:40,309
useful logic it's definitely a pain

00:16:38,420 --> 00:16:43,009
point although it's not necessarily like

00:16:40,309 --> 00:16:44,839
a functional problem this approach did

00:16:43,009 --> 00:16:46,730
solve a number of different things the

00:16:44,839 --> 00:16:49,429
most important thing that it did was it

00:16:46,730 --> 00:16:51,889
solved the problem around typing these

00:16:49,429 --> 00:16:54,230
query and mutation components are much

00:16:51,889 --> 00:16:56,749
easier to type and there's a tool that

00:16:54,230 --> 00:16:59,059
we used called a graphical code

00:16:56,749 --> 00:17:01,370
generator that actually generated them

00:16:59,059 --> 00:17:02,689
for us so I'm going to show you that

00:17:01,370 --> 00:17:07,339
real quick just because I think it's

00:17:02,689 --> 00:17:09,079
kind of interesting the this isn't the

00:17:07,339 --> 00:17:10,429
same I'll say this this isn't the same

00:17:09,079 --> 00:17:12,409
code generator that the Apollo team

00:17:10,429 --> 00:17:15,319
released they released the the code

00:17:12,409 --> 00:17:16,399
generator a little bit after this and we

00:17:15,319 --> 00:17:18,500
had already sort of gotten comfortable

00:17:16,399 --> 00:17:20,209
with this one and in the templates and

00:17:18,500 --> 00:17:21,770
the type formats that it provides but

00:17:20,209 --> 00:17:23,779
the one that Apollo provides is just as

00:17:21,770 --> 00:17:25,789
good so I'd say you should definitely

00:17:23,779 --> 00:17:27,289
check that out but I'll say that like

00:17:25,789 --> 00:17:28,820
what's what's simple about the code

00:17:27,289 --> 00:17:30,470
generator is all you have to do is just

00:17:28,820 --> 00:17:32,690
point it for both of the code generator

00:17:30,470 --> 00:17:34,130
just pointed at your schema you pointed

00:17:32,690 --> 00:17:35,570
out where all of all of your graph you

00:17:34,130 --> 00:17:37,880
all documents are which is to say like

00:17:35,570 --> 00:17:41,270
every type script file check it for

00:17:37,880 --> 00:17:43,340
check it for fragments queries mutations

00:17:41,270 --> 00:17:45,140
and then you say we want the the

00:17:43,340 --> 00:17:47,720
typescript package with react Apollo

00:17:45,140 --> 00:17:48,210
integration and what that would do for

00:17:47,720 --> 00:17:51,710
us

00:17:48,210 --> 00:17:54,600
is it generates generates this big file

00:17:51,710 --> 00:17:57,149
that has all of the different types from

00:17:54,600 --> 00:17:58,620
our API represented here what's nice is

00:17:57,149 --> 00:18:00,450
that that's all type information so it's

00:17:58,620 --> 00:18:02,309
gonna get compiled out and it won't

00:18:00,450 --> 00:18:04,350
won't blow at your ultimate bundle size

00:18:02,309 --> 00:18:06,539
but this is really nice because we can

00:18:04,350 --> 00:18:08,130
start having type safety around around

00:18:06,539 --> 00:18:10,529
the queries and also around like the

00:18:08,130 --> 00:18:11,970
variables that we pass into them and one

00:18:10,529 --> 00:18:15,480
of the neat things about it is it solves

00:18:11,970 --> 00:18:16,919
this problem around around checking that

00:18:15,480 --> 00:18:19,440
the fragment for a given component

00:18:16,919 --> 00:18:20,700
agrees with what we're using so I'm

00:18:19,440 --> 00:18:23,279
gonna do actually is I'm going to

00:18:20,700 --> 00:18:25,020
comment out rating and save and you'll

00:18:23,279 --> 00:18:27,720
see down here that this watcher is going

00:18:25,020 --> 00:18:29,340
to regenerate the types and then we get

00:18:27,720 --> 00:18:30,990
the red squiggly on carrier because

00:18:29,340 --> 00:18:33,600
rating is no longer on the carrier

00:18:30,990 --> 00:18:35,730
summary fragment this was extremely

00:18:33,600 --> 00:18:38,309
powerful it enabled us to begin to

00:18:35,730 --> 00:18:40,140
introduce typescript without having to

00:18:38,309 --> 00:18:42,809
go and model and duplicate a bunch of

00:18:40,140 --> 00:18:46,409
types in our API and this was extremely

00:18:42,809 --> 00:18:48,059
valuable development one of the other

00:18:46,409 --> 00:18:50,490
things that it did for us is that our

00:18:48,059 --> 00:18:52,919
that the code generator does for use it

00:18:50,490 --> 00:18:54,809
generates typed components for every

00:18:52,919 --> 00:18:56,610
operation so this shipment details

00:18:54,809 --> 00:18:58,740
component actually has the shipment

00:18:56,610 --> 00:19:00,960
details query in it similarly this

00:18:58,740 --> 00:19:02,909
mutation this mutation so now we all

00:19:00,960 --> 00:19:04,700
have we have all of this inside the

00:19:02,909 --> 00:19:06,600
render function the overhead of

00:19:04,700 --> 00:19:09,659
understanding higher-order components is

00:19:06,600 --> 00:19:12,179
gone the only bad thing about it is that

00:19:09,659 --> 00:19:14,520
we have this nasty like callback hell

00:19:12,179 --> 00:19:17,399
and the component hierarchy remain

00:19:14,520 --> 00:19:19,440
remains extra deep there's also this

00:19:17,399 --> 00:19:21,990
nuisance around all this common code for

00:19:19,440 --> 00:19:23,159
managing the edge cases but we weren't

00:19:21,990 --> 00:19:26,070
able to improve upon that in that

00:19:23,159 --> 00:19:29,279
iteration we can fast forward now though

00:19:26,070 --> 00:19:31,620
because this was in mid 2018 at the end

00:19:29,279 --> 00:19:33,480
of 2018 in November of last year the

00:19:31,620 --> 00:19:35,820
react team announced hooks which was

00:19:33,480 --> 00:19:38,159
what they were actually inspired by the

00:19:35,820 --> 00:19:39,779
the migration towards these callback

00:19:38,159 --> 00:19:41,880
components or these rendered prop

00:19:39,779 --> 00:19:43,620
components somebody had built a babel

00:19:41,880 --> 00:19:45,419
plugin that would flatten this out for

00:19:43,620 --> 00:19:47,700
you and do a syntax transform that would

00:19:45,419 --> 00:19:50,220
turn these into function calls and in

00:19:47,700 --> 00:19:51,750
simple little imperative functions and

00:19:50,220 --> 00:19:54,000
that the team said well we don't really

00:19:51,750 --> 00:19:55,470
want to use a syntax transform for that

00:19:54,000 --> 00:19:56,850
that's not robust enough but maybe we

00:19:55,470 --> 00:19:59,010
can figure out a development model that

00:19:56,850 --> 00:20:01,070
brings forth the same kind of ergonomics

00:19:59,010 --> 00:20:02,420
so that's how hooks were born

00:20:01,070 --> 00:20:05,630
I'm going to show you now what that

00:20:02,420 --> 00:20:07,520
component looks like any using hooks you

00:20:05,630 --> 00:20:09,440
can see that everything is sort of moved

00:20:07,520 --> 00:20:11,720
back to the left the left gutter we're

00:20:09,440 --> 00:20:14,060
only one level of indentation you can

00:20:11,720 --> 00:20:16,040
also see that instead of having those

00:20:14,060 --> 00:20:18,290
those individual components for each

00:20:16,040 --> 00:20:20,270
operation we now just have some simple

00:20:18,290 --> 00:20:22,280
function calls and these function calls

00:20:20,270 --> 00:20:23,750
were were generated by the same code

00:20:22,280 --> 00:20:26,180
generator that we're using earlier that

00:20:23,750 --> 00:20:27,470
graph GL code generator so there are

00:20:26,180 --> 00:20:29,720
automatically going to have all the

00:20:27,470 --> 00:20:31,820
typing information you want so if I

00:20:29,720 --> 00:20:34,400
start typing you know shipment here it's

00:20:31,820 --> 00:20:36,830
going to have carrier ship shipper stops

00:20:34,400 --> 00:20:38,450
the fragments that we specified we have

00:20:36,830 --> 00:20:39,980
all this nice type of safety and you

00:20:38,450 --> 00:20:41,960
know everything's nullable which is kind

00:20:39,980 --> 00:20:43,850
of a pain to deal with but at least as

00:20:41,960 --> 00:20:46,780
daniel said you're aware of the fact

00:20:43,850 --> 00:20:49,130
that you need to do that null checking

00:20:46,780 --> 00:20:51,530
one of the other nice things about this

00:20:49,130 --> 00:20:53,060
is that there was another concept that

00:20:51,530 --> 00:20:55,100
was introduced to react that allowed us

00:20:53,060 --> 00:20:56,660
and it allowed us to remove some of that

00:20:55,100 --> 00:20:58,510
boilerplate error handling

00:20:56,660 --> 00:21:01,100
you know something called air boundaries

00:20:58,510 --> 00:21:02,870
the the concept of an error boundary is

00:21:01,100 --> 00:21:05,030
that you can put a component in your

00:21:02,870 --> 00:21:06,770
visual hierarchy that will catch errors

00:21:05,030 --> 00:21:08,840
that are thrown or exceptions that are

00:21:06,770 --> 00:21:10,610
thrown from any child component and then

00:21:08,840 --> 00:21:12,440
perform some kind of behavior like

00:21:10,610 --> 00:21:14,090
render an error message so we took

00:21:12,440 --> 00:21:16,370
advantage of that as we begin to migrate

00:21:14,090 --> 00:21:17,480
towards hooks and the way that that

00:21:16,370 --> 00:21:19,580
looks I'll show you I'll walk you

00:21:17,480 --> 00:21:21,560
through how that works if you look at

00:21:19,580 --> 00:21:23,900
our app this might be like where the

00:21:21,560 --> 00:21:25,310
router would be if we had a router we

00:21:23,900 --> 00:21:26,630
added a component here called error

00:21:25,310 --> 00:21:29,600
boundary that just sort of wraps the

00:21:26,630 --> 00:21:31,640
page that were rendering inside the air

00:21:29,600 --> 00:21:34,250
boundary it's a really simple little

00:21:31,640 --> 00:21:35,810
feature called there's a little simple

00:21:34,250 --> 00:21:37,940
static method that you can add that's

00:21:35,810 --> 00:21:40,010
called get derived State from error it

00:21:37,940 --> 00:21:42,200
basically will catch any error that was

00:21:40,010 --> 00:21:44,000
thrown by any child component and allow

00:21:42,200 --> 00:21:45,290
you to set some state so what we do here

00:21:44,000 --> 00:21:47,630
is we just take the error we set some

00:21:45,290 --> 00:21:49,460
state and then if we have an error we

00:21:47,630 --> 00:21:51,830
render something different it's really

00:21:49,460 --> 00:21:53,480
simple and obviously like what we do in

00:21:51,830 --> 00:21:54,680
our apps is more sophisticated we look

00:21:53,480 --> 00:21:55,940
at the source of the error we look

00:21:54,680 --> 00:21:58,580
whether it's transient like a network

00:21:55,940 --> 00:22:01,220
failure or maybe more like a 500 and

00:21:58,580 --> 00:22:03,020
render different things but that enabled

00:22:01,220 --> 00:22:04,460
us to eliminate one of those

00:22:03,020 --> 00:22:06,050
conditionals from this list we don't

00:22:04,460 --> 00:22:06,560
have to think about error handling in

00:22:06,050 --> 00:22:08,330
here anymore

00:22:06,560 --> 00:22:11,300
and the way that we're able to do that

00:22:08,330 --> 00:22:13,970
in the query itself is that we override

00:22:11,300 --> 00:22:17,990
it the way that the use query hook or

00:22:13,970 --> 00:22:19,250
so with hooks it's a lot easier too it's

00:22:17,990 --> 00:22:21,740
a lot easier to extend them and build

00:22:19,250 --> 00:22:23,659
meta hooks and and add some like your

00:22:21,740 --> 00:22:25,610
sent some of your own business logic to

00:22:23,659 --> 00:22:27,970
them all you really have to do is

00:22:25,610 --> 00:22:31,519
override the built in one and then

00:22:27,970 --> 00:22:33,320
modify the behavior as you see fit and

00:22:31,519 --> 00:22:35,840
return the same result so we were just

00:22:33,320 --> 00:22:37,669
looking for an error from the API and if

00:22:35,840 --> 00:22:39,740
we have when we throw it it's really

00:22:37,669 --> 00:22:41,809
really simple there's just like one

00:22:39,740 --> 00:22:43,759
little thing you have to do and the code

00:22:41,809 --> 00:22:46,009
generator config to say hey import my

00:22:43,759 --> 00:22:49,519
custom used query as opposed to the one

00:22:46,009 --> 00:22:50,779
from the client library so what's really

00:22:49,519 --> 00:22:53,059
nice about this and now we're going to

00:22:50,779 --> 00:22:55,279
stop in a place where all of the bad

00:22:53,059 --> 00:22:57,200
things that we had identified from 2016

00:22:55,279 --> 00:22:58,450
have been addressed and the only thing

00:22:57,200 --> 00:23:02,509
that we haven't really been able to

00:22:58,450 --> 00:23:03,590
address is that the loading state the

00:23:02,509 --> 00:23:06,769
loading state requires a bit of

00:23:03,590 --> 00:23:08,419
boilerplate what's interesting about

00:23:06,769 --> 00:23:10,809
that is that the react team already has

00:23:08,419 --> 00:23:12,830
something for that it's called suspense

00:23:10,809 --> 00:23:14,840
it's something that I haven't released

00:23:12,830 --> 00:23:18,559
quite yet so I'm not recommending you

00:23:14,840 --> 00:23:19,940
use it obviously and there's a lot of

00:23:18,559 --> 00:23:21,590
problems with it I see somebody shaking

00:23:19,940 --> 00:23:23,000
their head haven't released it it's

00:23:21,590 --> 00:23:25,100
definitely not robust but there's some

00:23:23,000 --> 00:23:27,409
something about this development model

00:23:25,100 --> 00:23:29,149
that is really interesting and I suspect

00:23:27,409 --> 00:23:31,429
that we'll have something akin to this

00:23:29,149 --> 00:23:32,750
at some point at some point this year or

00:23:31,429 --> 00:23:36,289
everybody sort of suspects that we'll

00:23:32,750 --> 00:23:38,210
see the idea though is that similar to

00:23:36,289 --> 00:23:40,669
the error boundaries all we have to do

00:23:38,210 --> 00:23:43,120
is go to our app and add a different

00:23:40,669 --> 00:23:45,950
component that says hey anything that

00:23:43,120 --> 00:23:48,740
suspends beneath here should render some

00:23:45,950 --> 00:23:50,120
fallback UI the only thing this is used

00:23:48,740 --> 00:23:51,710
for right now is actually for lazy

00:23:50,120 --> 00:23:54,139
component loading but you could see how

00:23:51,710 --> 00:23:56,299
it might be usable for fetching the data

00:23:54,139 --> 00:23:58,250
for a given page and what i'm doing here

00:23:56,299 --> 00:24:00,490
is is importing that and rendering the

00:23:58,250 --> 00:24:03,649
loading indicator if if we're suspended

00:24:00,490 --> 00:24:06,200
so the final final shape of this

00:24:03,649 --> 00:24:08,330
component ultimately looks like this

00:24:06,200 --> 00:24:10,909
where we have a couple of operations

00:24:08,330 --> 00:24:13,490
here from Apollo we're able to thread

00:24:10,909 --> 00:24:16,250
our props directly in using just some

00:24:13,490 --> 00:24:18,470
imperative function indications there's

00:24:16,250 --> 00:24:19,909
no crazy like composition of

00:24:18,470 --> 00:24:22,129
higher-order components there's no

00:24:19,909 --> 00:24:24,440
really deeply nested hierarchy of

00:24:22,129 --> 00:24:26,779
components here like this all reads very

00:24:24,440 --> 00:24:27,210
nicely and what's nice about that is it

00:24:26,779 --> 00:24:29,040
means

00:24:27,210 --> 00:24:31,140
the frameworks getting more and more out

00:24:29,040 --> 00:24:33,030
of our way as we progress there's less a

00:24:31,140 --> 00:24:35,430
like Karen feeding of the framework

00:24:33,030 --> 00:24:36,900
involved and developers with this level

00:24:35,430 --> 00:24:38,850
of clarity can focus more on the

00:24:36,900 --> 00:24:42,990
business logic that is like the essence

00:24:38,850 --> 00:24:44,550
of what we're trying to build I'm going

00:24:42,990 --> 00:24:47,160
to go back to my slide deck here and

00:24:44,550 --> 00:24:48,690
just say that we don't know what else is

00:24:47,160 --> 00:24:51,750
coming in the future maybe suspense

00:24:48,690 --> 00:24:53,340
right but what this is showing hopefully

00:24:51,750 --> 00:24:55,320
is that there's been a clear and

00:24:53,340 --> 00:24:57,570
consistent drumbeat of innovation on the

00:24:55,320 --> 00:24:58,980
front end both around urban economics

00:24:57,570 --> 00:25:01,380
and just like making it easier to write

00:24:58,980 --> 00:25:03,600
the code as well as around making it

00:25:01,380 --> 00:25:07,470
less error-prone to write client code

00:25:03,600 --> 00:25:10,320
attaches to a graph QL API convoy

00:25:07,470 --> 00:25:11,940
continues to want to we continue to try

00:25:10,320 --> 00:25:13,950
to innovate ourselves we've built

00:25:11,940 --> 00:25:16,620
certain things for a graph GL like our

00:25:13,950 --> 00:25:18,630
own client cache and we do have some

00:25:16,620 --> 00:25:19,890
additional little bits of tooling here

00:25:18,630 --> 00:25:22,620
and there but I'll say that every time

00:25:19,890 --> 00:25:24,000
we we build something ourselves the

00:25:22,620 --> 00:25:25,230
Apollo team comes around and build

00:25:24,000 --> 00:25:26,550
something even better like six months

00:25:25,230 --> 00:25:29,940
later so it's been a really good

00:25:26,550 --> 00:25:31,440
ecosystem to be a member of and the I

00:25:29,940 --> 00:25:32,500
think that's sort of all I have for you

00:25:31,440 --> 00:25:37,759
today

00:25:32,500 --> 00:25:37,759

YouTube URL: https://www.youtube.com/watch?v=IxmrRiA9Gso


