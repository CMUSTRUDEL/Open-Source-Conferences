Title: Introducing Apollo Federation with: James Baxley III, Engineering Manager at Apollo
Publication date: 2019-07-19
Playlist: Federation Launch at Apollo Day Seattle 2019
Description: 
	
Captions: 
	00:00:02,780 --> 00:00:05,310
Thank You Watson hey everybody how's it

00:00:04,799 --> 00:00:07,740
going

00:00:05,310 --> 00:00:11,099
enjoy your day so far cool well I'm

00:00:07,740 --> 00:00:13,769
James like I said and I lead our open

00:00:11,099 --> 00:00:16,109
source and our solutions team at Apollo

00:00:13,769 --> 00:00:18,480
which is for most companies a little bit

00:00:16,109 --> 00:00:21,090
of an odd combination but it's a it's

00:00:18,480 --> 00:00:22,529
one that we hold really dearly to how we

00:00:21,090 --> 00:00:24,029
do open source work and how we work with

00:00:22,529 --> 00:00:25,710
our customers and the reason why we had

00:00:24,029 --> 00:00:27,029
everyone here today wasn't just so we

00:00:25,710 --> 00:00:29,609
could show you this new cool stuff but

00:00:27,029 --> 00:00:31,320
really this is an opportunity for the

00:00:29,609 --> 00:00:33,450
graphical community which in and of

00:00:31,320 --> 00:00:34,620
itself is still a young community but

00:00:33,450 --> 00:00:37,320
one that is going through just

00:00:34,620 --> 00:00:40,230
incredible growth and growing pains

00:00:37,320 --> 00:00:42,329
because of that and so we are here as

00:00:40,230 --> 00:00:44,640
the Apollo team to learn from you to

00:00:42,329 --> 00:00:46,980
understand what's not working what is

00:00:44,640 --> 00:00:48,539
working how can we help and support your

00:00:46,980 --> 00:00:51,000
teams and what you're trying to do

00:00:48,539 --> 00:00:52,920
better and because of that we like our

00:00:51,000 --> 00:00:54,059
open source team the team that builds

00:00:52,920 --> 00:00:56,699
like the core Federation in the

00:00:54,059 --> 00:00:58,649
programming model but also today to sit

00:00:56,699 --> 00:01:00,180
right next to any of the customers that

00:00:58,649 --> 00:01:02,789
we're working with so we can understand

00:01:00,180 --> 00:01:04,920
what is working for you what isn't was

00:01:02,789 --> 00:01:06,090
that API clear or there no docks like

00:01:04,920 --> 00:01:08,670
what is the problem that is preventing

00:01:06,090 --> 00:01:10,409
you from going through those phases that

00:01:08,670 --> 00:01:11,820
Matt was talking about what's stopping

00:01:10,409 --> 00:01:15,119
you from shipping that feature faster

00:01:11,820 --> 00:01:17,700
better and more secure and throughout a

00:01:15,119 --> 00:01:20,250
lot of that over the past few years

00:01:17,700 --> 00:01:22,200
really at this point as we saw teams

00:01:20,250 --> 00:01:23,790
adopt graph QL one of the biggest

00:01:22,200 --> 00:01:25,860
problems they ran into was how

00:01:23,790 --> 00:01:27,780
effectively they could scale that across

00:01:25,860 --> 00:01:29,310
their entire organization this wasn't

00:01:27,780 --> 00:01:30,840
just like how much traffic could they

00:01:29,310 --> 00:01:32,729
send through it was literally they had

00:01:30,840 --> 00:01:34,560
more bodies to contribute than they

00:01:32,729 --> 00:01:36,990
could effectively contribute so that we

00:01:34,560 --> 00:01:38,490
were just teams were losing their

00:01:36,990 --> 00:01:40,560
ability to go to market their ability to

00:01:38,490 --> 00:01:42,689
move faster with their business because

00:01:40,560 --> 00:01:44,490
the right underlying primitives weren't

00:01:42,689 --> 00:01:46,110
there so we've been working with teams

00:01:44,490 --> 00:01:47,369
for quite a while and we think we

00:01:46,110 --> 00:01:49,890
finally have a really strong approach

00:01:47,369 --> 00:01:52,140
for that but I'll start with what didn't

00:01:49,890 --> 00:01:54,720
work so how many people here are

00:01:52,140 --> 00:01:58,070
familiar with schema stitching how many

00:01:54,720 --> 00:02:01,229
of you are using it cool decent number

00:01:58,070 --> 00:02:04,200
so schema Szczecin was our first really

00:02:01,229 --> 00:02:06,420
our first principle take on what it

00:02:04,200 --> 00:02:08,489
looks like for teams to build a single

00:02:06,420 --> 00:02:10,280
data graph for multiple services the

00:02:08,489 --> 00:02:12,620
problem is we really didn't listen

00:02:10,280 --> 00:02:14,239
effectively and as kind of the lead

00:02:12,620 --> 00:02:15,530
Torstein I can fully admit fault so if

00:02:14,239 --> 00:02:17,269
you're dealing with schema stitching

00:02:15,530 --> 00:02:19,480
issues I'm sorry come find me afterwards

00:02:17,269 --> 00:02:21,409
and you can chew my ear out that's fine

00:02:19,480 --> 00:02:22,610
the reason it was wrong approaches

00:02:21,409 --> 00:02:24,590
because we weren't focusing on what the

00:02:22,610 --> 00:02:26,540
real value of a data graph was for a

00:02:24,590 --> 00:02:27,980
company we were thinking more along the

00:02:26,540 --> 00:02:30,590
lines of well this is a really great way

00:02:27,980 --> 00:02:32,690
to stitch them services together you can

00:02:30,590 --> 00:02:34,549
post some third party services in and

00:02:32,690 --> 00:02:36,140
you can really quickly get up and

00:02:34,549 --> 00:02:37,250
running but problem is you really

00:02:36,140 --> 00:02:39,860
quickly got up and running and then you

00:02:37,250 --> 00:02:40,970
immediately like went off a cliff and so

00:02:39,860 --> 00:02:43,340
you had to learn how to fly on your own

00:02:40,970 --> 00:02:45,440
which was no good for anybody and the

00:02:43,340 --> 00:02:47,480
problems here was you ended up with this

00:02:45,440 --> 00:02:48,980
really tightly coupled gateway where you

00:02:47,480 --> 00:02:50,690
had to write a lot of custom merging

00:02:48,980 --> 00:02:52,879
code and you had to manage a lot of that

00:02:50,690 --> 00:02:54,260
which means that your teams were no

00:02:52,879 --> 00:02:56,959
longer actually shipping on their own

00:02:54,260 --> 00:02:58,099
then I had an entirely new level of

00:02:56,959 --> 00:03:00,049
coordination you had to do within your

00:02:58,099 --> 00:03:02,450
organization so the intent to move

00:03:00,049 --> 00:03:03,859
faster and ship products faster actually

00:03:02,450 --> 00:03:07,609
ended up getting a whole bunch slower

00:03:03,859 --> 00:03:09,200
which is not what you wanted so we kind

00:03:07,609 --> 00:03:10,819
of took a step back we were supporting

00:03:09,200 --> 00:03:12,440
stitching it really wasn't the meaning

00:03:10,819 --> 00:03:14,239
needs to our customers and the open

00:03:12,440 --> 00:03:17,090
source community at large so we've said

00:03:14,239 --> 00:03:19,400
ok let's let's listen again and really

00:03:17,090 --> 00:03:22,819
hear what is actually stopping teams

00:03:19,400 --> 00:03:24,530
from being effective so we we wanted to

00:03:22,819 --> 00:03:26,329
take another visit this we really wanted

00:03:24,530 --> 00:03:28,669
to start from a very principle take on

00:03:26,329 --> 00:03:30,139
it what are our kind of core guiding

00:03:28,669 --> 00:03:33,049
principles here and how we build things

00:03:30,139 --> 00:03:34,940
that both the API the docs the tutorials

00:03:33,049 --> 00:03:37,090
are customers that they really can all

00:03:34,940 --> 00:03:39,169
kind of rally around an anchor behind

00:03:37,090 --> 00:03:41,090
also is a good way to say things that

00:03:39,169 --> 00:03:42,410
we're not going to do because if you're

00:03:41,090 --> 00:03:44,299
familiar with the open source ecosystem

00:03:42,410 --> 00:03:45,859
libraries can just balloon and balloon

00:03:44,299 --> 00:03:47,209
and balloon until you have something

00:03:45,859 --> 00:03:48,500
that doesn't really work for anybody so

00:03:47,209 --> 00:03:50,359
we wanted to make sure we were anchored

00:03:48,500 --> 00:03:52,120
really tightly and the principles that

00:03:50,359 --> 00:03:55,519
would help your businesses be successful

00:03:52,120 --> 00:03:57,079
so through a lot of conversations with

00:03:55,519 --> 00:03:59,180
the community and our customers this is

00:03:57,079 --> 00:04:00,709
what we came up with that we wanted the

00:03:59,180 --> 00:04:02,769
new version of stitching the new way to

00:04:00,709 --> 00:04:06,859
distribute a data graph to be

00:04:02,769 --> 00:04:09,530
declarative in nature to separate your

00:04:06,859 --> 00:04:11,870
concerns by teams and kind of a natural

00:04:09,530 --> 00:04:14,060
proper separation that it still needed

00:04:11,870 --> 00:04:15,379
to be client first like the the path of

00:04:14,060 --> 00:04:17,570
adoption of graph kill is still very

00:04:15,379 --> 00:04:19,609
steadily client first so that has to be

00:04:17,570 --> 00:04:21,409
kind of the core model here and that

00:04:19,609 --> 00:04:23,570
ultimately it can't be another new thing

00:04:21,409 --> 00:04:25,490
for companies to learn you already have

00:04:23,570 --> 00:04:26,030
embarked on this new journey with graph

00:04:25,490 --> 00:04:27,890
QL

00:04:26,030 --> 00:04:30,050
if we ask you or if the community asked

00:04:27,890 --> 00:04:32,360
you to learn something else in order to

00:04:30,050 --> 00:04:33,920
do it at scale then you you're doubling

00:04:32,360 --> 00:04:35,510
down on investment that remain isn't

00:04:33,920 --> 00:04:36,830
paying off for you yet so we really

00:04:35,510 --> 00:04:38,840
wanted to keep kind of core to the

00:04:36,830 --> 00:04:41,900
language and also how we can help shape

00:04:38,840 --> 00:04:44,510
and grow the language itself as you all

00:04:41,900 --> 00:04:46,870
get into using it more sort of those

00:04:44,510 --> 00:04:50,510
actually mean what does it mean to be a

00:04:46,870 --> 00:04:53,030
declarative part of the graph so mainly

00:04:50,510 --> 00:04:54,890
what this means is that teams should be

00:04:53,030 --> 00:04:57,050
able to visualize and understand and

00:04:54,890 --> 00:04:58,430
expose their portions of the graph they

00:04:57,050 --> 00:05:00,320
should be able to declare the

00:04:58,430 --> 00:05:03,320
capabilities that they have as their

00:05:00,320 --> 00:05:05,240
team over the entire data graph for the

00:05:03,320 --> 00:05:06,950
entire org so if my team works on

00:05:05,240 --> 00:05:08,750
reviews that doesn't mean that I just

00:05:06,950 --> 00:05:11,090
own the review types I need to also say

00:05:08,750 --> 00:05:12,560
that I own a little bit of product and a

00:05:11,090 --> 00:05:14,870
little bit the user because collectively

00:05:12,560 --> 00:05:16,670
my team owns those things that's how my

00:05:14,870 --> 00:05:18,680
organization is set up so I need to be

00:05:16,670 --> 00:05:19,730
able to declaratively state that and I

00:05:18,680 --> 00:05:22,130
need to be able to do it statically

00:05:19,730 --> 00:05:24,080
because I need to not run into I

00:05:22,130 --> 00:05:25,880
deployed and now I had this runtime

00:05:24,080 --> 00:05:28,070
exception because we weren't able to

00:05:25,880 --> 00:05:30,700
really understand how you're part of the

00:05:28,070 --> 00:05:33,800
graph impacted another part of the graph

00:05:30,700 --> 00:05:35,390
we also needed separated by concern a

00:05:33,800 --> 00:05:36,800
lot of times those teams would get

00:05:35,390 --> 00:05:38,060
started we'd find that they were

00:05:36,800 --> 00:05:40,550
separating their concerns really by

00:05:38,060 --> 00:05:42,290
tight so a teamed own the user the

00:05:40,550 --> 00:05:44,270
accounts types and another team would

00:05:42,290 --> 00:05:45,770
own the products types but this wasn't

00:05:44,270 --> 00:05:48,050
really the right natural separation

00:05:45,770 --> 00:05:50,900
because like I said there is overlap and

00:05:48,050 --> 00:05:52,100
how that work so the team's the

00:05:50,900 --> 00:05:53,990
separation here really needs to be

00:05:52,100 --> 00:05:55,820
argument around the use case and the

00:05:53,990 --> 00:05:57,980
underlying data model that you are

00:05:55,820 --> 00:05:59,900
supporting all the way through so like

00:05:57,980 --> 00:06:01,400
your on call should probably be focused

00:05:59,900 --> 00:06:03,020
just a part of on call that you can fix

00:06:01,400 --> 00:06:03,980
that way you're not scrambling at 2:00

00:06:03,020 --> 00:06:05,630
a.m. in the morning trying to figure out

00:06:03,980 --> 00:06:06,950
how to debug the user stuff because

00:06:05,630 --> 00:06:08,570
you're on the reviews team that's not a

00:06:06,950 --> 00:06:11,660
really good separation that's a bad

00:06:08,570 --> 00:06:13,940
experience for people it needs to be

00:06:11,660 --> 00:06:15,680
client first really your client should

00:06:13,940 --> 00:06:17,870
have no idea if you're using monolithic

00:06:15,680 --> 00:06:20,360
or federated graph or if you have like

00:06:17,870 --> 00:06:21,800
one pretty chunky service and a lot of

00:06:20,360 --> 00:06:23,720
smaller ones around that the the

00:06:21,800 --> 00:06:25,460
composition there is not important to

00:06:23,720 --> 00:06:26,330
the client it specifically is not

00:06:25,460 --> 00:06:27,980
something they should be worried about

00:06:26,330 --> 00:06:30,560
because that's a it's an improper

00:06:27,980 --> 00:06:32,690
boundary for them to care instead the

00:06:30,560 --> 00:06:34,070
company should be working together to

00:06:32,690 --> 00:06:36,050
build a single data graph that makes

00:06:34,070 --> 00:06:37,850
sense for the product you shouldn't be

00:06:36,050 --> 00:06:39,100
thinking just about your user service in

00:06:37,850 --> 00:06:40,450
isolation

00:06:39,100 --> 00:06:43,360
think about how it impacts the overall

00:06:40,450 --> 00:06:45,010
consumption of that graph a user needs

00:06:43,360 --> 00:06:47,260
to go to reviews or views or relate as a

00:06:45,010 --> 00:06:49,570
product and you know build your portion

00:06:47,260 --> 00:06:51,550
of that so the client can consume it in

00:06:49,570 --> 00:06:53,050
a natural way you don't need to put

00:06:51,550 --> 00:06:54,100
these arbitrary entry points in the

00:06:53,050 --> 00:06:57,910
graph that don't really make sense

00:06:54,100 --> 00:06:59,560
because the model is wrong at the end of

00:06:57,910 --> 00:07:00,880
the day it's just graph QL this is not

00:06:59,560 --> 00:07:02,890
new concepts there's no learning

00:07:00,880 --> 00:07:04,510
overhead all the tooling that you

00:07:02,890 --> 00:07:06,790
already use already works whether it's

00:07:04,510 --> 00:07:09,100
the vs code integration or graphical or

00:07:06,790 --> 00:07:11,320
even syntax highlighting and github it's

00:07:09,100 --> 00:07:13,420
those small developer quality-of-life

00:07:11,320 --> 00:07:14,950
things that you can't afford to get rid

00:07:13,420 --> 00:07:15,940
of because you already sort of learn

00:07:14,950 --> 00:07:17,380
them you've already started to teach

00:07:15,940 --> 00:07:19,360
your teams you've on board and new

00:07:17,380 --> 00:07:22,420
engineers you have as a company have

00:07:19,360 --> 00:07:25,840
invested into this so graph QL is kind

00:07:22,420 --> 00:07:27,610
of the core primitive there so with

00:07:25,840 --> 00:07:28,870
these principles from our customers we

00:07:27,610 --> 00:07:30,610
started to really understand okay let's

00:07:28,870 --> 00:07:31,510
take a look at your schema what would it

00:07:30,610 --> 00:07:33,550
look like for you to break this apart

00:07:31,510 --> 00:07:35,020
and a lot of times we started seeing

00:07:33,550 --> 00:07:37,180
teams kind of start out at this plot

00:07:35,020 --> 00:07:39,640
where they had separated by types they

00:07:37,180 --> 00:07:42,610
had a user type and a product type and a

00:07:39,640 --> 00:07:44,740
review type and this is where Federation

00:07:42,610 --> 00:07:46,090
really isn't even just about how you run

00:07:44,740 --> 00:07:48,310
your services it's not necessarily just

00:07:46,090 --> 00:07:50,350
a micro service architecture we're

00:07:48,310 --> 00:07:52,630
really trying to build here is a culture

00:07:50,350 --> 00:07:54,280
in the community around separating your

00:07:52,630 --> 00:07:56,620
concerns in how you actually build your

00:07:54,280 --> 00:07:58,450
schema in the type's itself so whether

00:07:56,620 --> 00:08:00,070
those are local graphical modules or

00:07:58,450 --> 00:08:01,960
split off into full separate micro

00:08:00,070 --> 00:08:03,520
services the idea here is you want to

00:08:01,960 --> 00:08:05,560
really be able to understand the

00:08:03,520 --> 00:08:07,630
responsibilities of each parts of your

00:08:05,560 --> 00:08:09,250
organization and how they contribute to

00:08:07,630 --> 00:08:10,870
the graph this isn't just the rest

00:08:09,250 --> 00:08:12,880
endpoint this is used by like matt said

00:08:10,870 --> 00:08:14,200
kind of everyone who gets their hand on

00:08:12,880 --> 00:08:19,150
it so you really need to make sure that

00:08:14,200 --> 00:08:20,320
it accurately represents your company so

00:08:19,150 --> 00:08:21,730
in practice you kind of want something

00:08:20,320 --> 00:08:23,470
that looks a little bit more like this

00:08:21,730 --> 00:08:24,340
and if they're the account service

00:08:23,470 --> 00:08:25,360
you're really happy because now you'll

00:08:24,340 --> 00:08:27,700
have one field to care about right

00:08:25,360 --> 00:08:30,190
that's great but if you're the product

00:08:27,700 --> 00:08:32,200
service you need to say I'm responsible

00:08:30,190 --> 00:08:35,050
for products what I'm also responsible

00:08:32,200 --> 00:08:37,240
for our products extend the concept of a

00:08:35,050 --> 00:08:39,700
user where we introduce the idea of the

00:08:37,240 --> 00:08:42,070
recent purchases of that user that our

00:08:39,700 --> 00:08:43,330
products related to them so as the team

00:08:42,070 --> 00:08:44,920
that's thinking about this that's got

00:08:43,330 --> 00:08:46,750
their product manager focused on the

00:08:44,920 --> 00:08:48,460
features that they need to show that's

00:08:46,750 --> 00:08:50,440
the kind of the separation that they

00:08:48,460 --> 00:08:51,700
want to be able to do and the review

00:08:50,440 --> 00:08:53,820
service need to be able to go even

00:08:51,700 --> 00:08:56,890
other than that and not just reference

00:08:53,820 --> 00:08:58,780
things like the author and the product

00:08:56,890 --> 00:09:00,790
and the user here then you'd be able to

00:08:58,780 --> 00:09:03,970
extend those types so you should be a

00:09:00,790 --> 00:09:05,920
both able to collaborate on types to

00:09:03,970 --> 00:09:07,690
critique to create really what

00:09:05,920 --> 00:09:10,300
effectively is your composite type for

00:09:07,690 --> 00:09:12,010
your overall graph but you also need to

00:09:10,300 --> 00:09:13,390
be able to refer to other types from

00:09:12,010 --> 00:09:15,070
other services because it is

00:09:13,390 --> 00:09:16,510
fundamentally a graph and that's how

00:09:15,070 --> 00:09:18,820
clients get the most use out of this

00:09:16,510 --> 00:09:20,470
stuff it's the actual representation of

00:09:18,820 --> 00:09:22,270
your data so you need to be able to have

00:09:20,470 --> 00:09:23,980
a programming model that really

00:09:22,270 --> 00:09:28,090
effectively supports what that looks

00:09:23,980 --> 00:09:30,280
like so with that all in mind I want to

00:09:28,090 --> 00:09:31,690
walk through a little demo showing what

00:09:30,280 --> 00:09:33,910
what this can actually look like for you

00:09:31,690 --> 00:09:37,660
as you start to run things so in honor

00:09:33,910 --> 00:09:38,920
of holo we'll jump down cool okay um can

00:09:37,660 --> 00:09:40,330
everyone see this how about in the back

00:09:38,920 --> 00:09:42,310
this is our first code sample today can

00:09:40,330 --> 00:09:44,080
you see it okay cool hopefully the light

00:09:42,310 --> 00:09:46,270
theme will work out for everybody

00:09:44,080 --> 00:09:49,930
so we'll start pretty small here again

00:09:46,270 --> 00:09:51,220
we just have a user schema there's some

00:09:49,930 --> 00:09:52,930
funky directives here we'll get into

00:09:51,220 --> 00:09:54,250
that in a little bit but fundamentally

00:09:52,930 --> 00:09:56,860
what we have here is a pretty small

00:09:54,250 --> 00:09:59,170
example of a graph Gil server it has a

00:09:56,860 --> 00:10:01,390
pretty small schema and a couple

00:09:59,170 --> 00:10:03,550
resolvers for it and that really is

00:10:01,390 --> 00:10:05,650
about it so again this could be a graph

00:10:03,550 --> 00:10:07,750
you'll module or its own micro service

00:10:05,650 --> 00:10:09,190
that gets built out well the core thing

00:10:07,750 --> 00:10:11,830
here is that it's just a part of the

00:10:09,190 --> 00:10:12,940
graph there is an entry point where you

00:10:11,830 --> 00:10:14,920
could come in and you can find the

00:10:12,940 --> 00:10:17,560
currently logged in user and there's a

00:10:14,920 --> 00:10:20,080
few fields that this service understands

00:10:17,560 --> 00:10:23,200
about a user and that's it pretty simple

00:10:20,080 --> 00:10:27,580
right let's see if I can click the right

00:10:23,200 --> 00:10:28,990
tab there we go in a very similar vein

00:10:27,580 --> 00:10:30,280
you have the products team that we've

00:10:28,990 --> 00:10:32,500
talked about and the product team owns

00:10:30,280 --> 00:10:34,360
their portion of the graph they have an

00:10:32,500 --> 00:10:36,280
entry point in the graph and they have

00:10:34,360 --> 00:10:38,110
the idea of a product so again there's

00:10:36,280 --> 00:10:40,270
nothing really kind of crazy about how

00:10:38,110 --> 00:10:41,560
this stuff works together but really

00:10:40,270 --> 00:10:42,430
what you want to be able to do is you

00:10:41,560 --> 00:10:44,110
want to be able to compose these

00:10:42,430 --> 00:10:45,100
together and this is actually one of the

00:10:44,110 --> 00:10:47,230
things that schema stitching did

00:10:45,100 --> 00:10:49,750
relatively well when the only thing you

00:10:47,230 --> 00:10:50,980
really care about is extending kind of

00:10:49,750 --> 00:10:52,990
route entry points into the other

00:10:50,980 --> 00:10:54,280
services it's one of the views of like

00:10:52,990 --> 00:10:56,260
what a graph Kalkan gateway it could be

00:10:54,280 --> 00:10:58,780
which is really a way to orchestrate

00:10:56,260 --> 00:11:00,220
kind of whole sections of the graph so

00:10:58,780 --> 00:11:02,530
you can start to build that out and what

00:11:00,220 --> 00:11:03,790
that looks like if we were to explore

00:11:02,530 --> 00:11:07,550
that

00:11:03,790 --> 00:11:12,800
trying to jump down here we can get a

00:11:07,550 --> 00:11:15,529
user in their name and we can get top

00:11:12,800 --> 00:11:19,160
products and we can get the price of

00:11:15,529 --> 00:11:20,930
those so nothing about this is super

00:11:19,160 --> 00:11:22,160
crazy super brand-new can everyone see

00:11:20,930 --> 00:11:24,880
them in the back the light mood for this

00:11:22,160 --> 00:11:28,640
is not super crazy that okay everybody

00:11:24,880 --> 00:11:30,200
cool so this is pretty simple right this

00:11:28,640 --> 00:11:32,690
is just a simple little graphical

00:11:30,200 --> 00:11:35,390
gateway moving things between two ways

00:11:32,690 --> 00:11:37,700
two services here but what starts to get

00:11:35,390 --> 00:11:39,020
really interesting is as a company that

00:11:37,700 --> 00:11:40,160
doesn't really give you that much value

00:11:39,020 --> 00:11:41,690
because you're not you don't have a data

00:11:40,160 --> 00:11:43,640
graph at this point you have like

00:11:41,690 --> 00:11:45,440
essentially your rest in points in a new

00:11:43,640 --> 00:11:46,580
query language which is somewhat

00:11:45,440 --> 00:11:48,500
beneficial but you're kind of missing

00:11:46,580 --> 00:11:49,700
the overall big picture what you really

00:11:48,500 --> 00:11:51,050
want to be able to do is to connect

00:11:49,700 --> 00:11:53,779
these pieces together you want to be

00:11:51,050 --> 00:11:56,270
able to extend what we call entities and

00:11:53,779 --> 00:11:58,339
you want to be able to refer to them and

00:11:56,270 --> 00:12:00,770
extend them from other services so this

00:11:58,339 --> 00:12:02,750
is the review service you notice a few

00:12:00,770 --> 00:12:04,459
core things here one is it doesn't

00:12:02,750 --> 00:12:06,050
actually define a route entry points

00:12:04,459 --> 00:12:07,970
there's nothing in the Federation model

00:12:06,050 --> 00:12:09,709
that says that my service actually has

00:12:07,970 --> 00:12:11,420
to have an entry point for my clients to

00:12:09,709 --> 00:12:13,370
be able to query this maybe it doesn't

00:12:11,420 --> 00:12:15,080
make sense in the products like fetching

00:12:13,370 --> 00:12:17,120
reviews on their own outside of the

00:12:15,080 --> 00:12:18,320
scope of a user product is it really

00:12:17,120 --> 00:12:19,550
something that you care about it's not

00:12:18,320 --> 00:12:21,080
something you want to expose to your

00:12:19,550 --> 00:12:23,480
client so you shouldn't have to do that

00:12:21,080 --> 00:12:26,270
in your programming model either then

00:12:23,480 --> 00:12:28,220
beyond that we refer to a user and a

00:12:26,270 --> 00:12:29,870
product from the service just like it

00:12:28,220 --> 00:12:31,820
was a local schema starting to actually

00:12:29,870 --> 00:12:34,040
create that graph that bi-directional

00:12:31,820 --> 00:12:36,380
graph and then we can extend the user

00:12:34,040 --> 00:12:37,279
and we can add in their reviews the same

00:12:36,380 --> 00:12:39,620
thing for the products because

00:12:37,279 --> 00:12:43,670
fundamentally that is how our service

00:12:39,620 --> 00:12:46,700
works if you use schema stitching sorry

00:12:43,670 --> 00:12:48,860
there's a step back there if you use

00:12:46,700 --> 00:12:50,089
schema stitching this is where you have

00:12:48,860 --> 00:12:51,529
to start to put some code in the Gateway

00:12:50,089 --> 00:12:52,520
you have to start to figure out how am I

00:12:51,529 --> 00:12:54,800
going to merge this all together

00:12:52,520 --> 00:12:55,970
well the Federation you don't have to so

00:12:54,800 --> 00:12:58,130
it's funny directives that I was talking

00:12:55,970 --> 00:12:59,839
about the key directive here and these

00:12:58,130 --> 00:13:02,390
external directives this is a way to

00:12:59,839 --> 00:13:04,130
statically define the relationship and

00:13:02,390 --> 00:13:06,050
the capabilities of how this graph is

00:13:04,130 --> 00:13:07,190
linked and the benefit of static means

00:13:06,050 --> 00:13:08,690
that your editor knows what you're

00:13:07,190 --> 00:13:10,610
talking about your tooling knows are

00:13:08,690 --> 00:13:12,170
talking about and you can detect

00:13:10,610 --> 00:13:13,080
problems and integration issues long

00:13:12,170 --> 00:13:15,750
before you ever go into

00:13:13,080 --> 00:13:18,030
production and with adding a few those

00:13:15,750 --> 00:13:20,700
things in there now we start to form an

00:13:18,030 --> 00:13:23,580
actual overall graph so let me delete

00:13:20,700 --> 00:13:26,700
this top products bit down here and I

00:13:23,580 --> 00:13:29,460
will go into reviews and I will get the

00:13:26,700 --> 00:13:31,800
body of a review back so let's take a

00:13:29,460 --> 00:13:33,570
look at this simple graph Gale query

00:13:31,800 --> 00:13:35,460
write your client has no idea it's just

00:13:33,570 --> 00:13:37,650
a normal simple graphical query but

00:13:35,460 --> 00:13:39,660
using the Apollo gateway package for

00:13:37,650 --> 00:13:59,490
Apollo server I can actually run this

00:13:39,660 --> 00:14:01,260
again sometimes there we go so this

00:13:59,490 --> 00:14:04,020
request is actually federated across

00:14:01,260 --> 00:14:06,090
multiple services so we start first at

00:14:04,020 --> 00:14:07,950
the account service where we're asking

00:14:06,090 --> 00:14:09,990
for the name because that's what my

00:14:07,950 --> 00:14:12,450
query asks for but because those

00:14:09,990 --> 00:14:14,970
services define their capabilities the

00:14:12,450 --> 00:14:17,400
Gateway knows that I also need the ID of

00:14:14,970 --> 00:14:19,620
a user and the reason why I need an ID

00:14:17,400 --> 00:14:21,840
of the user is because the review

00:14:19,620 --> 00:14:23,580
service understands the ID of the user

00:14:21,840 --> 00:14:25,260
and it knows how to connect those two

00:14:23,580 --> 00:14:27,390
things together it knows how to make

00:14:25,260 --> 00:14:29,880
that relationship in the graph actually

00:14:27,390 --> 00:14:31,560
happen so as I get into reviews then I

00:14:29,880 --> 00:14:34,830
can come in and I actually fetch from

00:14:31,560 --> 00:14:37,050
the review service and for the user with

00:14:34,830 --> 00:14:39,390
their ID information I can then come in

00:14:37,050 --> 00:14:42,000
and fetch the body of that information I

00:14:39,390 --> 00:14:43,890
can get the review service now none of

00:14:42,000 --> 00:14:45,960
this required any additional code in the

00:14:43,890 --> 00:14:49,050
Gateway in fact the Gateway itself is

00:14:45,960 --> 00:14:51,360
quite small it's just a list of the

00:14:49,050 --> 00:14:52,380
services it's where to find these

00:14:51,360 --> 00:14:54,060
services to understand their

00:14:52,380 --> 00:14:55,890
capabilities and then to be able to

00:14:54,060 --> 00:14:57,120
connect to them and now there's a lot

00:14:55,890 --> 00:14:58,410
more customization that goes into this

00:14:57,120 --> 00:15:00,030
but I would be kind of overwhelming for

00:14:58,410 --> 00:15:01,710
a quick talk but find me afterwards if

00:15:00,030 --> 00:15:03,720
you want to know more about it but the

00:15:01,710 --> 00:15:05,880
benefit here is we are able to merge all

00:15:03,720 --> 00:15:07,680
of this stuff together and it doesn't

00:15:05,880 --> 00:15:10,830
really stop there we can keep going and

00:15:07,680 --> 00:15:13,530
if we go into reviews have products and

00:15:10,830 --> 00:15:14,700
products have a name and a price but we

00:15:13,530 --> 00:15:17,940
also want to know if they're in stock

00:15:14,700 --> 00:15:20,490
and what the shipping available estimate

00:15:17,940 --> 00:15:22,740
is so with a complex query like this

00:15:20,490 --> 00:15:24,540
which is a not complex from a client

00:15:22,740 --> 00:15:26,350
standpoint it's a pretty easy thing to

00:15:24,540 --> 00:15:27,820
do and it's a pretty common UI

00:15:26,350 --> 00:15:29,380
but this touches a lot of your

00:15:27,820 --> 00:15:31,300
organization because funnily it's

00:15:29,380 --> 00:15:33,040
building the product side of your data

00:15:31,300 --> 00:15:34,870
graph when the whole purpose for having

00:15:33,040 --> 00:15:36,820
a data graph is to empower your client

00:15:34,870 --> 00:15:38,920
teams to work more efficiently but with

00:15:36,820 --> 00:15:41,740
this request I'm going to the account

00:15:38,920 --> 00:15:44,020
service binge the review service then to

00:15:41,740 --> 00:15:46,690
the product service and then to the

00:15:44,020 --> 00:15:48,970
inventory service so all these teams own

00:15:46,690 --> 00:15:50,140
their own responsibilities they link

00:15:48,970 --> 00:15:52,390
together as different parts of the graph

00:15:50,140 --> 00:15:54,820
and fundamentally the client has no idea

00:15:52,390 --> 00:15:56,980
but now your team's can ship iterate and

00:15:54,820 --> 00:16:00,100
check their work more independently and

00:15:56,980 --> 00:16:01,540
you have that much more of excitement

00:16:00,100 --> 00:16:04,330
but also the ability to ship just so

00:16:01,540 --> 00:16:05,920
much faster because of that so it's a

00:16:04,330 --> 00:16:07,380
really quick demo walking through how

00:16:05,920 --> 00:16:10,180
Federation actually works in practice

00:16:07,380 --> 00:16:11,800
but let's kind of talk through how that

00:16:10,180 --> 00:16:13,360
works like it's cool to see those

00:16:11,800 --> 00:16:14,830
services come apart but what does it

00:16:13,360 --> 00:16:16,420
actually mean as you break down your

00:16:14,830 --> 00:16:19,780
schema and as you start to try this

00:16:16,420 --> 00:16:21,970
stuff out so Federation works through

00:16:19,780 --> 00:16:24,430
three kind of core concepts one is the

00:16:21,970 --> 00:16:26,740
idea of entities and keys the other

00:16:24,430 --> 00:16:28,990
another is type references and the third

00:16:26,740 --> 00:16:30,190
is type extensions and you notice we

00:16:28,990 --> 00:16:31,570
kind of have covered these two out the

00:16:30,190 --> 00:16:33,070
talk as you start to talk about the

00:16:31,570 --> 00:16:35,530
boundaries between types and how you

00:16:33,070 --> 00:16:37,330
work on them but these the model here

00:16:35,530 --> 00:16:39,430
really came from a ton of conversations

00:16:37,330 --> 00:16:41,470
with customers like yourselves who are

00:16:39,430 --> 00:16:44,860
trying to adopt a data graph at a large

00:16:41,470 --> 00:16:46,420
scale so what are these let's get into

00:16:44,860 --> 00:16:48,010
integers and keys who here is familiar

00:16:46,420 --> 00:16:50,910
with the node interface of the notes

00:16:48,010 --> 00:16:54,100
back from real a very few right a couple

00:16:50,910 --> 00:16:55,060
so when Facebook created got QL one of

00:16:54,100 --> 00:16:56,530
the things that they want to do for

00:16:55,060 --> 00:17:00,580
their clients was to be able to have

00:16:56,530 --> 00:17:02,470
this idea of accessing a single node

00:17:00,580 --> 00:17:04,750
given an ID at any point in time so I

00:17:02,470 --> 00:17:06,490
have this single nice ID it's a string

00:17:04,750 --> 00:17:07,900
and I can use it to reference whether

00:17:06,490 --> 00:17:09,850
it's a friend or a group or something

00:17:07,900 --> 00:17:11,770
like that and this is a really powerful

00:17:09,850 --> 00:17:13,150
concept and it works really great when

00:17:11,770 --> 00:17:15,939
you try and create these dependencies

00:17:13,150 --> 00:17:17,800
between systems the problem is most

00:17:15,939 --> 00:17:20,170
people's data doesn't work with a single

00:17:17,800 --> 00:17:22,150
ID you really want to have a better way

00:17:20,170 --> 00:17:24,880
to control what it means to look up

00:17:22,150 --> 00:17:26,920
something in your data system and the

00:17:24,880 --> 00:17:29,320
role of an entity is that they create a

00:17:26,920 --> 00:17:30,760
connection point in the graph they're

00:17:29,320 --> 00:17:33,820
not just a standard type they create a a

00:17:30,760 --> 00:17:35,920
union type ultimately but these are

00:17:33,820 --> 00:17:37,000
points where you can start to reference

00:17:35,920 --> 00:17:39,000
and extend from

00:17:37,000 --> 00:17:42,310
other services so there a spot to say I

00:17:39,000 --> 00:17:44,770
understand that I am a product and that

00:17:42,310 --> 00:17:46,210
you can fetch me if you have the UPC and

00:17:44,770 --> 00:17:47,650
that's what we do with the key directive

00:17:46,210 --> 00:17:50,740
so that's the idea of an entity and a

00:17:47,650 --> 00:17:52,450
key the key is how you can refer to that

00:17:50,740 --> 00:17:53,680
entity it's just like a primary key no

00:17:52,450 --> 00:17:55,720
database in fact most times that's

00:17:53,680 --> 00:17:56,820
exactly what it is there's nothing crazy

00:17:55,720 --> 00:17:59,440
there

00:17:56,820 --> 00:18:00,280
you also need type references and if

00:17:59,440 --> 00:18:02,590
you're familiar with the graphical

00:18:00,280 --> 00:18:03,880
language this is like duh of course you

00:18:02,590 --> 00:18:05,560
need type references how could you do it

00:18:03,880 --> 00:18:06,730
without you couldn't build a graph if

00:18:05,560 --> 00:18:09,430
you didn't have these kind of references

00:18:06,730 --> 00:18:10,990
but because we have entities and because

00:18:09,430 --> 00:18:14,260
we have keys we can start to create

00:18:10,990 --> 00:18:16,510
references across services across teams

00:18:14,260 --> 00:18:18,730
we can start to create these these

00:18:16,510 --> 00:18:21,490
dependencies but they're declarative

00:18:18,730 --> 00:18:23,230
because they're written in SDL because

00:18:21,490 --> 00:18:25,360
they're static because they're validated

00:18:23,230 --> 00:18:27,850
we now know that your understanding of

00:18:25,360 --> 00:18:30,760
UPC and mine under name understanding of

00:18:27,850 --> 00:18:33,280
UPC is the same if you change yours it's

00:18:30,760 --> 00:18:35,440
gonna change my service as well we need

00:18:33,280 --> 00:18:38,170
to be able to coordinate between that so

00:18:35,440 --> 00:18:39,610
an entity once it's part of the graft

00:18:38,170 --> 00:18:41,860
and other services can start to

00:18:39,610 --> 00:18:45,220
reference it so in this case or if you

00:18:41,860 --> 00:18:47,020
can reference a product and then you

00:18:45,220 --> 00:18:48,400
want to be able to extend types and this

00:18:47,020 --> 00:18:50,290
is my favorite part it really is I think

00:18:48,400 --> 00:18:51,790
what makes this model shine because

00:18:50,290 --> 00:18:53,740
you're building a collaborative graph

00:18:51,790 --> 00:18:55,660
you're working together on a type there

00:18:53,740 --> 00:18:57,340
isn't a team that owns the user type or

00:18:55,660 --> 00:18:58,840
the product type because it means so

00:18:57,340 --> 00:19:00,970
much more than that you have to have

00:18:58,840 --> 00:19:03,070
currently in cart you need to have

00:19:00,970 --> 00:19:05,380
reviews for it you need to have the most

00:19:03,070 --> 00:19:07,120
often purchased there's a lot of other

00:19:05,380 --> 00:19:08,860
value that you bring to customers which

00:19:07,120 --> 00:19:10,960
is why it's not just like any other site

00:19:08,860 --> 00:19:12,790
or any other app and building out these

00:19:10,960 --> 00:19:14,680
extensions forming these collaborative

00:19:12,790 --> 00:19:16,390
things allow for organizations to

00:19:14,680 --> 00:19:18,010
actually really shine and how they build

00:19:16,390 --> 00:19:19,000
a data graph they don't have to be

00:19:18,010 --> 00:19:20,920
fighting over this they don't have to

00:19:19,000 --> 00:19:22,540
have ten different user types which then

00:19:20,920 --> 00:19:24,220
confuse their client teams they can have

00:19:22,540 --> 00:19:26,860
one because that's the model that their

00:19:24,220 --> 00:19:28,600
customer or their user understands this

00:19:26,860 --> 00:19:30,880
lets you build a graph in both

00:19:28,600 --> 00:19:34,600
directions which is kind of critical for

00:19:30,880 --> 00:19:36,640
okay once you have all this and once you

00:19:34,600 --> 00:19:37,930
have all this statically defined then

00:19:36,640 --> 00:19:40,330
you can start to understand how you

00:19:37,930 --> 00:19:42,310
could take a query like this and break

00:19:40,330 --> 00:19:44,280
it down and this is what happens in the

00:19:42,310 --> 00:19:47,170
Apollo gateway is we have a

00:19:44,280 --> 00:19:49,480
sophisticated query planner that says I

00:19:47,170 --> 00:19:50,260
know the dependencies of these services

00:19:49,480 --> 00:19:52,360
so

00:19:50,260 --> 00:19:54,940
I see a query come in I can decompose

00:19:52,360 --> 00:19:56,800
that into the work that needs to be done

00:19:54,940 --> 00:19:58,510
across services it's very much like a

00:19:56,800 --> 00:20:00,100
database planner again this is a lot of

00:19:58,510 --> 00:20:01,840
built on the shoulders of giants here

00:20:00,100 --> 00:20:04,810
just taking it to kind of more modern

00:20:01,840 --> 00:20:07,630
API technology so given a query like

00:20:04,810 --> 00:20:09,280
this I know that the user service or the

00:20:07,630 --> 00:20:10,720
account service is what provides the

00:20:09,280 --> 00:20:12,220
user and their user name and their

00:20:10,720 --> 00:20:14,320
review service is what provides the

00:20:12,220 --> 00:20:15,670
reviews in their body and I know how to

00:20:14,320 --> 00:20:17,830
link them together so I can start to

00:20:15,670 --> 00:20:19,320
build out these sub queries I can cache

00:20:17,830 --> 00:20:22,330
this work it gets to be a really

00:20:19,320 --> 00:20:25,620
efficient way to take client work and

00:20:22,330 --> 00:20:27,700
break it apart amongst all your services

00:20:25,620 --> 00:20:29,140
and this was really great we were really

00:20:27,700 --> 00:20:30,310
really excited about this we're like yes

00:20:29,140 --> 00:20:31,810
we finally have a better solution to

00:20:30,310 --> 00:20:34,180
stitching people aren't gonna hate us

00:20:31,810 --> 00:20:35,440
anymore it's gonna be great and then we

00:20:34,180 --> 00:20:38,200
started to like give it to some teams to

00:20:35,440 --> 00:20:39,910
try and they pretty quickly hit a few

00:20:38,200 --> 00:20:41,980
extra boundaries they hit a few things

00:20:39,910 --> 00:20:44,050
that were like I agree this is great in

00:20:41,980 --> 00:20:46,270
principle but in practice this doesn't

00:20:44,050 --> 00:20:49,270
quite work because in practice I have

00:20:46,270 --> 00:20:52,300
like this old net app and I also have my

00:20:49,270 --> 00:20:53,920
new Java app and my dotnet app from a

00:20:52,300 --> 00:20:56,620
few years ago thinks that products are

00:20:53,920 --> 00:20:58,690
askew but really they're a UPC but

00:20:56,620 --> 00:21:00,220
that's legacy and they're stuff I can't

00:20:58,690 --> 00:21:01,660
get rid of that so I really need to be

00:21:00,220 --> 00:21:04,420
able to understand that an entity could

00:21:01,660 --> 00:21:06,610
be referred to by multiple keys or maybe

00:21:04,420 --> 00:21:09,400
even compound keys where it's the

00:21:06,610 --> 00:21:11,410
author's ID in the product ID and this

00:21:09,400 --> 00:21:13,960
is where the model expands to really fit

00:21:11,410 --> 00:21:15,640
real world scenarios and you'll notice

00:21:13,960 --> 00:21:18,400
there's a seems a little bit on with the

00:21:15,640 --> 00:21:20,320
key directive where Fields is actually a

00:21:18,400 --> 00:21:22,660
what we call a field set but really it

00:21:20,320 --> 00:21:24,610
is a selection set of graph QL the

00:21:22,660 --> 00:21:25,750
benefit here mean again it's just craft

00:21:24,610 --> 00:21:28,180
well you don't have to learn something

00:21:25,750 --> 00:21:30,340
new you get all the nice editor features

00:21:28,180 --> 00:21:32,560
you get hover you get type-ahead and you

00:21:30,340 --> 00:21:34,990
get validation we know that the author

00:21:32,560 --> 00:21:38,230
is an author type and that ID is an is

00:21:34,990 --> 00:21:39,610
an integer or an ID type so when you use

00:21:38,230 --> 00:21:41,140
that in your resolvers when you use that

00:21:39,610 --> 00:21:43,320
in your dependencies all the stuff links

00:21:41,140 --> 00:21:45,940
up and connects together really nicely

00:21:43,320 --> 00:21:47,710
you also need to be able to do composite

00:21:45,940 --> 00:21:49,450
fields services have implicit

00:21:47,710 --> 00:21:51,550
dependencies that's kind of how services

00:21:49,450 --> 00:21:53,230
work these resolvers though these

00:21:51,550 --> 00:21:54,490
linkages that you have built out they

00:21:53,230 --> 00:21:55,780
move in their own service and then you

00:21:54,490 --> 00:21:57,700
realize you forgot like half of the

00:21:55,780 --> 00:21:59,770
stuff at the old services needed to to

00:21:57,700 --> 00:22:01,870
resolve that data so that's where we add

00:21:59,770 --> 00:22:03,260
the idea of a requires directive that

00:22:01,870 --> 00:22:05,480
lets you extend in

00:22:03,260 --> 00:22:07,310
say I need more than just ask you to

00:22:05,480 --> 00:22:09,380
calculate the shipping estimates I also

00:22:07,310 --> 00:22:11,480
need the size and the weight of that

00:22:09,380 --> 00:22:13,700
product so the product service which can

00:22:11,480 --> 00:22:15,410
provide that whenever someone wants the

00:22:13,700 --> 00:22:18,200
shipping estimates go ahead and give

00:22:15,410 --> 00:22:20,090
that data as to that way my inventory

00:22:18,200 --> 00:22:23,570
service has that when it does its work

00:22:20,090 --> 00:22:25,370
this is a really powerful way to create

00:22:23,570 --> 00:22:27,590
these added dependencies within the

00:22:25,370 --> 00:22:30,620
graph these added linkages all that can

00:22:27,590 --> 00:22:31,880
be validated and typed and then the more

00:22:30,620 --> 00:22:35,660
we talk about teams the more that they

00:22:31,880 --> 00:22:37,010
were interested in how they could get

00:22:35,660 --> 00:22:40,040
extra use out of their existing

00:22:37,010 --> 00:22:41,840
denormalization a lot of teams have data

00:22:40,040 --> 00:22:44,690
in a lot of places this is both a good

00:22:41,840 --> 00:22:45,950
and a bad thing but for the places where

00:22:44,690 --> 00:22:48,020
you have it you want to be able to use

00:22:45,950 --> 00:22:48,440
it and prevent extra work from being

00:22:48,020 --> 00:22:50,150
done

00:22:48,440 --> 00:22:53,390
you don't want chatty micro-services and

00:22:50,150 --> 00:22:55,310
with the provides directive you can do

00:22:53,390 --> 00:22:57,500
that you can say that as the review

00:22:55,310 --> 00:22:58,760
service we also store the user name of

00:22:57,500 --> 00:22:59,960
the author because that's when they

00:22:58,760 --> 00:23:01,610
submitted the review that's one of the

00:22:59,960 --> 00:23:03,890
data that we captured so whatever a

00:23:01,610 --> 00:23:06,350
client is asking for the username as

00:23:03,890 --> 00:23:07,850
part of the reviews you don't need to go

00:23:06,350 --> 00:23:09,830
to the author service because I have it

00:23:07,850 --> 00:23:11,570
so you can create these shortcuts within

00:23:09,830 --> 00:23:13,640
the query planner all to give your team

00:23:11,570 --> 00:23:17,230
the flexibility that it needs in order

00:23:13,640 --> 00:23:19,190
to effectively control its data graph

00:23:17,230 --> 00:23:20,360
Matt showed the architecture for this

00:23:19,190 --> 00:23:21,740
this probably won't come as a surprise

00:23:20,360 --> 00:23:24,050
for you I'm pretty sure anyone could

00:23:21,740 --> 00:23:26,030
draw this down it's a gateway and a few

00:23:24,050 --> 00:23:28,370
services the goal here is it's got to be

00:23:26,030 --> 00:23:29,990
that simple if it requires this weird

00:23:28,370 --> 00:23:31,670
architecture if it doesn't work with

00:23:29,990 --> 00:23:32,870
your weird architecture because we all

00:23:31,670 --> 00:23:35,150
have weird architectures right that's

00:23:32,870 --> 00:23:36,770
part of building things if it doesn't

00:23:35,150 --> 00:23:38,930
work and if you have to restructure your

00:23:36,770 --> 00:23:40,520
stuff then you really can't get any

00:23:38,930 --> 00:23:43,040
benefit out of this and you lose the

00:23:40,520 --> 00:23:44,750
benefit of a data graph so it's it's

00:23:43,040 --> 00:23:46,790
just a gateway and some services we call

00:23:44,750 --> 00:23:48,290
these federated services and we have a

00:23:46,790 --> 00:23:50,240
JavaScript gateway that works to connect

00:23:48,290 --> 00:23:52,280
these together but the benefit here is

00:23:50,240 --> 00:23:53,870
that these services can be anything you

00:23:52,280 --> 00:23:57,320
want them to be we'll talk about that in

00:23:53,870 --> 00:23:58,190
just a second but the Gateway itself is

00:23:57,320 --> 00:24:01,760
a feature-rich

00:23:58,190 --> 00:24:03,590
query executor and graph QL gateway it's

00:24:01,760 --> 00:24:05,150
built on top of Apollo server so all the

00:24:03,590 --> 00:24:07,010
tools you already use from that whether

00:24:05,150 --> 00:24:09,350
it's your monitoring tools your

00:24:07,010 --> 00:24:09,929
authentication it's just Apollo server

00:24:09,350 --> 00:24:11,789
and

00:24:09,929 --> 00:24:13,710
with a query planner built on top of it

00:24:11,789 --> 00:24:15,210
to use the gateway and it's a really

00:24:13,710 --> 00:24:17,309
quick way to get started as we showed in

00:24:15,210 --> 00:24:19,350
those example codes it's almost no code

00:24:17,309 --> 00:24:21,869
it's a pretty quick thing to spin up and

00:24:19,350 --> 00:24:22,980
it can scale really really far and

00:24:21,869 --> 00:24:24,749
horizontal because you don't have to

00:24:22,980 --> 00:24:27,869
have any custom work in there it's like

00:24:24,749 --> 00:24:29,429
infrastructure like Matt said I think

00:24:27,869 --> 00:24:31,980
this is the most exciting thing to me is

00:24:29,429 --> 00:24:35,100
that Federation is not tied or limited

00:24:31,980 --> 00:24:36,149
to JavaScript at all in fact all of

00:24:35,100 --> 00:24:38,249
these languages either have

00:24:36,149 --> 00:24:39,809
implementations already or there's

00:24:38,249 --> 00:24:41,879
active discussions within the community

00:24:39,809 --> 00:24:44,220
about implementing the Federation spec

00:24:41,879 --> 00:24:46,080
in these languages and the Federation

00:24:44,220 --> 00:24:50,549
spec is a pretty thin bit of graph QL

00:24:46,080 --> 00:24:52,080
that lets a lets the Gateway connect to

00:24:50,549 --> 00:24:54,690
these services it's what powers

00:24:52,080 --> 00:24:56,519
composition it's what powers the actual

00:24:54,690 --> 00:24:59,100
query execution as you go into those

00:24:56,519 --> 00:25:00,809
services so it's a pretty small way for

00:24:59,100 --> 00:25:02,909
other languages to be able to interact

00:25:00,809 --> 00:25:04,529
with that in fact at Apollo for our

00:25:02,909 --> 00:25:06,749
graph manager it's built on both

00:25:04,529 --> 00:25:09,659
JavaScript and Kotlin and so we use

00:25:06,749 --> 00:25:11,309
Federation and we use a Federation JVM

00:25:09,659 --> 00:25:12,899
project that we've open-source in order

00:25:11,309 --> 00:25:14,759
to connect those things together but

00:25:12,899 --> 00:25:17,279
whether it's go or dotnet a ruby or

00:25:14,759 --> 00:25:18,720
sangria or a Scala all these things are

00:25:17,279 --> 00:25:20,970
already being built by community so you

00:25:18,720 --> 00:25:23,490
can build use the right tool for the job

00:25:20,970 --> 00:25:24,929
for that service that the team knows but

00:25:23,490 --> 00:25:27,269
they can still collaborate on the

00:25:24,929 --> 00:25:29,429
overall data graph so that really gnarly

00:25:27,269 --> 00:25:31,080
check out code that's written in Scala

00:25:29,429 --> 00:25:33,330
the front-end team doesn't have to touch

00:25:31,080 --> 00:25:35,429
that they can write their own shaping

00:25:33,330 --> 00:25:37,169
logic in another service and they can

00:25:35,429 --> 00:25:38,879
compose together to form a single graph

00:25:37,169 --> 00:25:40,590
without building more and more layers of

00:25:38,879 --> 00:25:44,279
back-end for front-end and other ways to

00:25:40,590 --> 00:25:45,899
shake this data together and from all

00:25:44,279 --> 00:25:48,330
these conversations our goal with apollo

00:25:45,899 --> 00:25:50,879
has always been to provide the tools

00:25:48,330 --> 00:25:52,379
that you need to adopt graph QL at scale

00:25:50,879 --> 00:25:54,179
whether these are our open source

00:25:52,379 --> 00:25:56,369
libraries some of our tooling

00:25:54,179 --> 00:25:58,169
integrations or a full graph manager

00:25:56,369 --> 00:26:00,210
because as you get into this stuff it

00:25:58,169 --> 00:26:02,070
gets harder and harder to scale for your

00:26:00,210 --> 00:26:03,720
team because you're doing more work it

00:26:02,070 --> 00:26:05,580
isn't that the technology is implicitly

00:26:03,720 --> 00:26:08,369
hard it's it's doing more and more and

00:26:05,580 --> 00:26:10,320
more very very quickly so Apollo is here

00:26:08,369 --> 00:26:12,179
to kind of help you to use that both

00:26:10,320 --> 00:26:14,730
through the open source technology but

00:26:12,179 --> 00:26:16,950
also through our commercial platform and

00:26:14,730 --> 00:26:18,149
through our graph manager and one of the

00:26:16,950 --> 00:26:20,309
biggest problems with schema stitching

00:26:18,149 --> 00:26:21,530
is that it pretty much immediately lost

00:26:20,309 --> 00:26:23,690
all the benefits of

00:26:21,530 --> 00:26:25,550
form you couldn't see metrics you

00:26:23,690 --> 00:26:27,170
couldn't ship the stuff independently

00:26:25,550 --> 00:26:29,870
teams had to build their own registries

00:26:27,170 --> 00:26:32,510
and it really just it was an effective

00:26:29,870 --> 00:26:34,460
way to work but if you have a federated

00:26:32,510 --> 00:26:36,110
ready data graph then it's easy to

00:26:34,460 --> 00:26:38,110
update the graph there's no Gateway

00:26:36,110 --> 00:26:41,150
reload teams can do it on their own

00:26:38,110 --> 00:26:44,060
there's an even greater need for agility

00:26:41,150 --> 00:26:46,310
and safety so that as individual teams

00:26:44,060 --> 00:26:48,770
change their server they're not going to

00:26:46,310 --> 00:26:49,820
break the overall production graph we're

00:26:48,770 --> 00:26:51,440
not going to break your graph or your

00:26:49,820 --> 00:26:53,630
graph or your graph because they have

00:26:51,440 --> 00:26:56,000
this validation implicitly built into it

00:26:53,630 --> 00:26:58,070
and it needs a clean integration with

00:26:56,000 --> 00:26:59,870
your existing infrastructure Apollo has

00:26:58,070 --> 00:27:01,940
always been about incremental adoption

00:26:59,870 --> 00:27:04,010
that includes how you actually run the

00:27:01,940 --> 00:27:05,450
stuff it doesn't require some custom

00:27:04,010 --> 00:27:08,170
binary some custom weights or on the

00:27:05,450 --> 00:27:10,220
code it fits into your existing setup

00:27:08,170 --> 00:27:14,000
and there needs to be a smooth adoption

00:27:10,220 --> 00:27:15,050
path for it the teams that you have

00:27:14,000 --> 00:27:16,730
working on this stuff

00:27:15,050 --> 00:27:17,990
they're tooling needs to not break they

00:27:16,730 --> 00:27:19,850
don't link the switch over to Federation

00:27:17,990 --> 00:27:21,080
and now have to download new extensions

00:27:19,850 --> 00:27:24,470
or download a new way to think about the

00:27:21,080 --> 00:27:26,030
data graph it should just work so with

00:27:24,470 --> 00:27:27,800
that we're announcing the craft manager

00:27:26,030 --> 00:27:29,510
which Matt talked about so this allows

00:27:27,800 --> 00:27:31,400
you to do things like manage deploy ways

00:27:29,510 --> 00:27:33,380
and federated service checks and

00:27:31,400 --> 00:27:35,300
distributed choices and these are kind

00:27:33,380 --> 00:27:37,370
of the core tools that teams need as

00:27:35,300 --> 00:27:39,680
they adopt a stuff at scale to really be

00:27:37,370 --> 00:27:41,780
successful so I can actually walk

00:27:39,680 --> 00:27:44,870
through what this looks like and one

00:27:41,780 --> 00:27:47,660
more little demo Thanks all right so

00:27:44,870 --> 00:27:48,860
we'll go back to the Gateway here and I

00:27:47,660 --> 00:27:51,620
have this gateway for pulling from these

00:27:48,860 --> 00:27:53,420
services but this really is kind of

00:27:51,620 --> 00:27:54,830
limiting in production because I'm now

00:27:53,420 --> 00:27:57,080
tied to a deploy of the Gateway to

00:27:54,830 --> 00:27:58,760
update any of this stuff and that's

00:27:57,080 --> 00:28:00,440
really not what you want so instead I'm

00:27:58,760 --> 00:28:04,610
gonna load up the that's the right thing

00:28:00,440 --> 00:28:06,890
yep so I'm gonna finish setting up this

00:28:04,610 --> 00:28:07,610
graph and the graph manager I'll walk

00:28:06,890 --> 00:28:09,860
through this together

00:28:07,610 --> 00:28:11,930
so hopefully the demo gods will be with

00:28:09,860 --> 00:28:14,450
me today as we go through this so

00:28:11,930 --> 00:28:16,430
instead of running this service list

00:28:14,450 --> 00:28:17,750
what I want to be able to do is to be

00:28:16,430 --> 00:28:19,760
able to push things to the graph

00:28:17,750 --> 00:28:21,140
registry and that's what's gonna power

00:28:19,760 --> 00:28:23,270
my gateway that's what's gonna allow

00:28:21,140 --> 00:28:24,860
those manage deploys that happen allow

00:28:23,270 --> 00:28:25,820
teams to check and we're kind of

00:28:24,860 --> 00:28:28,040
independently on this

00:28:25,820 --> 00:28:30,190
so because code ten box is pretty great

00:28:28,040 --> 00:28:32,860
they

00:28:30,190 --> 00:28:37,690
these secret keys so don't tell anyone

00:28:32,860 --> 00:28:41,200
but these are secret babe I'm just gonna

00:28:37,690 --> 00:28:42,670
paste this value in here cool so you

00:28:41,200 --> 00:28:45,010
can't see it here unfortunately because

00:28:42,670 --> 00:28:46,540
of the light theme but there are a few

00:28:45,010 --> 00:28:47,590
different things that I'm gonna go

00:28:46,540 --> 00:28:50,530
through do and I'll tell you what they

00:28:47,590 --> 00:28:51,970
are because they're all white yeah if

00:28:50,530 --> 00:28:54,160
you can see them so let me move this

00:28:51,970 --> 00:28:59,620
over here and I'll walk you through

00:28:54,160 --> 00:29:02,550
what's actually gonna happen okay so I

00:28:59,620 --> 00:29:04,600
think this first one will go with this

00:29:02,550 --> 00:29:05,860
alright so the first thing I'm gonna do

00:29:04,600 --> 00:29:08,320
here is I'm gonna take the account

00:29:05,860 --> 00:29:10,660
service and I'm gonna push it to the

00:29:08,320 --> 00:29:12,670
registry ok so this is your new script

00:29:10,660 --> 00:29:13,809
uses the Apollo CLI it's really easy to

00:29:12,670 --> 00:29:16,030
set up in your continuous delivery

00:29:13,809 --> 00:29:17,320
pipeline whenever a service rolls out

00:29:16,030 --> 00:29:19,150
you want to be able to update that in

00:29:17,320 --> 00:29:21,640
the registry so the registry and your

00:29:19,150 --> 00:29:23,980
clients know the absolute sort the truth

00:29:21,640 --> 00:29:26,890
of what service is running at that point

00:29:23,980 --> 00:29:30,160
in time so pretty quickly went up and I

00:29:26,890 --> 00:29:32,140
loaded this accounts type so with that

00:29:30,160 --> 00:29:35,080
alone I can come in here and I can

00:29:32,140 --> 00:29:36,460
remove this whole service list and we're

00:29:35,080 --> 00:29:39,250
gonna really cut down the shape of our

00:29:36,460 --> 00:29:43,150
graph for a minute here and we're gonna

00:29:39,250 --> 00:29:47,380
go with just a single gateway okay so

00:29:43,150 --> 00:29:49,090
that should restart the Gateway and now

00:29:47,380 --> 00:29:51,730
we have a new graph and if I come over

00:29:49,090 --> 00:29:53,290
and I reload what the graph looks like I

00:29:51,730 --> 00:29:55,210
should get a whole bunch of things

00:29:53,290 --> 00:29:57,820
saying that this does not exist anymore

00:29:55,210 --> 00:30:00,250
and yep reviews doesn't exist anymore in

00:29:57,820 --> 00:30:03,429
fact if we look at the schema now all we

00:30:00,250 --> 00:30:06,520
have is the user so that gateway this

00:30:03,429 --> 00:30:09,190
gateway here is now pulling directly

00:30:06,520 --> 00:30:10,510
from the registry so you don't have to

00:30:09,190 --> 00:30:11,590
worry about rolling out your gateway to

00:30:10,510 --> 00:30:13,510
it whenever you make changes here

00:30:11,590 --> 00:30:16,510
because it pulls it constantly to make

00:30:13,510 --> 00:30:17,770
sure it's always up-to-date and I can

00:30:16,510 --> 00:30:20,200
even run a query against this and show

00:30:17,770 --> 00:30:22,870
you that it's still going to the correct

00:30:20,200 --> 00:30:24,580
sources because we pass in the URL and

00:30:22,870 --> 00:30:29,040
all the information so if I close out

00:30:24,580 --> 00:30:32,220
the schema and click the play button

00:30:29,040 --> 00:30:32,220
over here

00:30:33,990 --> 00:30:41,850
oh thank you

00:30:39,380 --> 00:30:43,230
cool so we're still doing execution

00:30:41,850 --> 00:30:44,820
still doing it across all the federated

00:30:43,230 --> 00:30:46,140
services but I want start to be able to

00:30:44,820 --> 00:30:48,120
add to this so let's add the product

00:30:46,140 --> 00:30:49,529
service and so this we're gonna take a

00:30:48,120 --> 00:30:52,440
wild guess because I can't see this

00:30:49,529 --> 00:30:52,740
because oh so we'll see all right thank

00:30:52,440 --> 00:30:54,600
you

00:30:52,740 --> 00:30:56,789
so we're gonna push the product service

00:30:54,600 --> 00:30:58,559
as well so it's the same thing but this

00:30:56,789 --> 00:31:00,240
is a totally separate team they're in

00:30:58,559 --> 00:31:02,760
their own CI pipeline they have their

00:31:00,240 --> 00:31:04,890
own github or their own git repository

00:31:02,760 --> 00:31:06,990
for this project it's his own thing so

00:31:04,890 --> 00:31:09,000
as it ships then it gets to push the

00:31:06,990 --> 00:31:11,760
registry and then the graph updates

00:31:09,000 --> 00:31:14,840
so let's come back to the graph and pull

00:31:11,760 --> 00:31:18,390
down the schema again with playground

00:31:14,840 --> 00:31:19,679
and now I have a product cycle no change

00:31:18,390 --> 00:31:20,850
the schema the schema did actually

00:31:19,679 --> 00:31:22,529
restart at all

00:31:20,850 --> 00:31:24,600
all active queries that are running

00:31:22,529 --> 00:31:26,399
through it would still have been live

00:31:24,600 --> 00:31:28,200
while this new service came online

00:31:26,399 --> 00:31:29,909
that's a really critical thing because

00:31:28,200 --> 00:31:31,950
as you roll out services you still have

00:31:29,909 --> 00:31:33,419
people using your app hopefully right so

00:31:31,950 --> 00:31:35,070
you can't take them offline when you

00:31:33,419 --> 00:31:36,899
roll this stuff out so you need to be

00:31:35,070 --> 00:31:39,899
able to drain queries going to the old

00:31:36,899 --> 00:31:41,760
set up the old graph let them finish and

00:31:39,899 --> 00:31:43,110
then as new queries come in they need to

00:31:41,760 --> 00:31:44,640
go to the new graph and start going to

00:31:43,110 --> 00:31:47,100
the new services and all those

00:31:44,640 --> 00:31:48,330
dependencies so again this isn't really

00:31:47,100 --> 00:31:49,440
graph at this point you have some cool

00:31:48,330 --> 00:31:50,909
services that are together

00:31:49,440 --> 00:31:52,860
so let's actually connect them together

00:31:50,909 --> 00:31:56,390
so I'll go through and I can have my

00:31:52,860 --> 00:31:59,340
helper is this reviews I think thank you

00:31:56,390 --> 00:32:15,899
so we'll push reviews it'll go to the

00:31:59,340 --> 00:32:19,679
registry on speaker Wi-Fi well it's gone

00:32:15,899 --> 00:32:22,429
to race you Wow does that well go ahead

00:32:19,679 --> 00:32:22,429
and push inventory

00:32:28,160 --> 00:32:30,950
let's see if we lost internet connection

00:32:29,690 --> 00:32:33,460
and this happened earlier today I'm

00:32:30,950 --> 00:32:33,460
Christine lux

00:32:48,759 --> 00:32:54,259
so up okay well I don't know if it's

00:32:52,729 --> 00:32:56,570
unable to run that many services at one

00:32:54,259 --> 00:32:59,690
- what we'll try that one more time

00:32:56,570 --> 00:33:02,469
and if it doesn't work so again we'll

00:32:59,690 --> 00:33:02,469
push reviews

00:33:06,560 --> 00:33:09,480
okay well it does look like the

00:33:08,310 --> 00:33:11,640
Democratic in any way through super well

00:33:09,480 --> 00:33:13,080
today you saw from the first two

00:33:11,640 --> 00:33:14,640
services you're able to push the

00:33:13,080 --> 00:33:17,040
registry and the stuff will update the

00:33:14,640 --> 00:33:18,660
gateway this works across all the

00:33:17,040 --> 00:33:21,060
services when you're not running on a

00:33:18,660 --> 00:33:22,980
code sandbox container in the middle of

00:33:21,060 --> 00:33:25,110
the demo time but the other side of this

00:33:22,980 --> 00:33:27,180
is it isn't just the manage deploys you

00:33:25,110 --> 00:33:29,190
also be able to see how that traffic is

00:33:27,180 --> 00:33:32,520
actually running so if I go back over

00:33:29,190 --> 00:33:35,010
and I go to engine now I actually have

00:33:32,520 --> 00:33:36,810
my full graph there I can start to see

00:33:35,010 --> 00:33:39,000
my different fields there's the user

00:33:36,810 --> 00:33:41,010
type from that upload and I can start to

00:33:39,000 --> 00:33:43,050
see metrics as they come in so as you

00:33:41,010 --> 00:33:44,820
run queries against this you'll start to

00:33:43,050 --> 00:33:47,130
be able to come back and see the traces

00:33:44,820 --> 00:33:50,280
that com and again I think speaker Wi-Fi

00:33:47,130 --> 00:33:51,300
is not super cool helpful right now but

00:33:50,280 --> 00:33:54,030
if we were to take a look at some of the

00:33:51,300 --> 00:33:57,120
operations on this then I can look at

00:33:54,030 --> 00:33:58,740
this reviews for user and look at this

00:33:57,120 --> 00:34:00,270
operation of it so that's our single one

00:33:58,740 --> 00:34:02,460
and then this one should be the one that

00:34:00,270 --> 00:34:03,780
goes to products as well the benefit

00:34:02,460 --> 00:34:06,240
here is now I can actually start to see

00:34:03,780 --> 00:34:07,950
that I'm going to multiple services I'm

00:34:06,240 --> 00:34:09,750
going to both the account service and

00:34:07,950 --> 00:34:11,700
the product service and able to resolve

00:34:09,750 --> 00:34:13,590
those together and I can do this all the

00:34:11,700 --> 00:34:15,960
way down the trace so as I go from

00:34:13,590 --> 00:34:18,149
service dependency service dependency I

00:34:15,960 --> 00:34:20,159
can actually monitor and see what the

00:34:18,149 --> 00:34:22,260
slow part of that process is what are my

00:34:20,159 --> 00:34:24,060
bottlenecks in this process and I can

00:34:22,260 --> 00:34:28,290
effectively observe and manage my

00:34:24,060 --> 00:34:29,310
overall graph and then Evans who's up

00:34:28,290 --> 00:34:31,260
next is going to talk a little bit more

00:34:29,310 --> 00:34:32,850
about the idea of schema validation but

00:34:31,260 --> 00:34:34,980
with the ability to ship and iterate

00:34:32,850 --> 00:34:36,720
faster the ability to deploy on your own

00:34:34,980 --> 00:34:38,909
it becomes that much more critical that

00:34:36,720 --> 00:34:41,520
you protect your deployments but you

00:34:38,909 --> 00:34:41,940
don't unnecessarily deploy something to

00:34:41,520 --> 00:34:44,490
production

00:34:41,940 --> 00:34:47,250
that really isn't going to work for the

00:34:44,490 --> 00:34:51,090
rest of the graph so with that you have

00:34:47,250 --> 00:34:52,679
a federated service check so on a CI

00:34:51,090 --> 00:34:54,360
whenever I run a check I can check to

00:34:52,679 --> 00:34:55,860
make sure that not only is this not

00:34:54,360 --> 00:34:57,360
going to break any clients this new

00:34:55,860 --> 00:34:58,710
shape but it's also not going to break

00:34:57,360 --> 00:35:01,020
any other services and their

00:34:58,710 --> 00:35:04,200
dependencies together so we'll give this

00:35:01,020 --> 00:35:06,630
a shot and see if this works

00:35:04,200 --> 00:35:08,720
yeah so what we've gone through here is

00:35:06,630 --> 00:35:11,190
I was checking the inventory service and

00:35:08,720 --> 00:35:13,380
there was no breaking changes between it

00:35:11,190 --> 00:35:14,910
and so here I'm able to roll that out

00:35:13,380 --> 00:35:16,680
this works with github it integrates

00:35:14,910 --> 00:35:18,390
fully with your CI and your team's can

00:35:16,680 --> 00:35:18,670
confidently ship to production any that

00:35:18,390 --> 00:35:21,940
you

00:35:18,670 --> 00:35:23,829
they need so that's a little bit of

00:35:21,940 --> 00:35:24,819
managed Federation I'm happy to talk

00:35:23,829 --> 00:35:27,609
with you more afterwards to show you

00:35:24,819 --> 00:35:28,900
more in demos but ultimately we're

00:35:27,609 --> 00:35:29,980
really excited a federation really

00:35:28,900 --> 00:35:31,779
excite about working with you and your

00:35:29,980 --> 00:35:33,609
teams on adopting this and how it works

00:35:31,779 --> 00:35:35,230
for you and what doesn't work please

00:35:33,609 --> 00:35:37,089
tell us that we can fix it and improve

00:35:35,230 --> 00:35:39,310
it and add new features for you to ship

00:35:37,089 --> 00:35:46,739
your graph effectively thank you so much

00:35:39,310 --> 00:35:46,739

YouTube URL: https://www.youtube.com/watch?v=WIeoBYRbprQ


