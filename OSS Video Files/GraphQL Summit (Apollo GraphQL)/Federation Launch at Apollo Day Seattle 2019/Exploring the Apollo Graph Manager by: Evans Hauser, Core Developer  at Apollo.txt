Title: Exploring the Apollo Graph Manager by: Evans Hauser, Core Developer  at Apollo
Publication date: 2019-07-19
Playlist: Federation Launch at Apollo Day Seattle 2019
Description: 
	
Captions: 
	00:00:00,600 --> 00:00:06,240
[Applause]

00:00:02,330 --> 00:00:08,849
Thank You Watson so this talk is all

00:00:06,240 --> 00:00:10,230
about the Apollo graph manager we're

00:00:08,849 --> 00:00:12,750
going to start off with a basic

00:00:10,230 --> 00:00:15,030
introduction into what it is and then

00:00:12,750 --> 00:00:18,539
we're gonna dive into a demo for the

00:00:15,030 --> 00:00:20,820
rest of the time so I'm Evans I'm a core

00:00:18,539 --> 00:00:22,650
developer on the Apollo platform and the

00:00:20,820 --> 00:00:24,779
reason I'm so excited to talk to you

00:00:22,650 --> 00:00:27,060
today is because for the past year and a

00:00:24,779 --> 00:00:27,810
half I've been developing a graph QL

00:00:27,060 --> 00:00:30,840
application

00:00:27,810 --> 00:00:33,719
it's the graph manager and and the

00:00:30,840 --> 00:00:35,730
reason that that I'm pumped is because

00:00:33,719 --> 00:00:37,380
I've found that over that year and a

00:00:35,730 --> 00:00:40,230
half we've developed so many good

00:00:37,380 --> 00:00:44,100
workflows that that I'm excited to share

00:00:40,230 --> 00:00:45,930
with you today and and over that that

00:00:44,100 --> 00:00:47,940
year and a half I've realized something

00:00:45,930 --> 00:00:49,500
interesting is is that in order to do

00:00:47,940 --> 00:00:51,930
graph queue all right and to have a data

00:00:49,500 --> 00:00:54,840
graph we need to have a data graph

00:00:51,930 --> 00:00:59,699
platform let's dig into what exactly a

00:00:54,840 --> 00:01:01,739
data graph platform is well it starts

00:00:59,699 --> 00:01:04,320
with a graph QL layer so it starts with

00:01:01,739 --> 00:01:06,600
the producer of a data graph that's

00:01:04,320 --> 00:01:08,729
oftentimes Apollo server we use Apollo

00:01:06,600 --> 00:01:10,140
server internally and we delegate to a

00:01:08,729 --> 00:01:12,990
bunch of different micro services

00:01:10,140 --> 00:01:16,770
separated based on concerns like schemas

00:01:12,990 --> 00:01:19,680
and operations we also have consumers so

00:01:16,770 --> 00:01:21,540
oftentimes a web client you may have an

00:01:19,680 --> 00:01:23,100
iOS client and an android client I'm

00:01:21,540 --> 00:01:27,150
excited for them those are going to come

00:01:23,100 --> 00:01:29,220
to Apollo for now we have a CLI and AVS

00:01:27,150 --> 00:01:32,970
code integration and those end up being

00:01:29,220 --> 00:01:34,710
native clients so in addition to the

00:01:32,970 --> 00:01:37,860
producer and the consumer of the graph

00:01:34,710 --> 00:01:41,360
QL API we have a graph manager and what

00:01:37,860 --> 00:01:43,530
the graph manager does is provide

00:01:41,360 --> 00:01:45,030
solutions to workflows that are

00:01:43,530 --> 00:01:47,310
necessary for graphical development

00:01:45,030 --> 00:01:50,520
during the demo we're going to focus on

00:01:47,310 --> 00:01:52,380
a couple different key workflows

00:01:50,520 --> 00:01:55,110
including schema tracking performance

00:01:52,380 --> 00:01:56,430
insights protected schema changes and a

00:01:55,110 --> 00:01:59,520
little bit about the client

00:01:56,430 --> 00:02:01,890
identification in order to support these

00:01:59,520 --> 00:02:03,329
workflows we get a bunch of data from a

00:02:01,890 --> 00:02:05,399
variety of locations including

00:02:03,329 --> 00:02:08,039
continuous integration and the Apollo

00:02:05,399 --> 00:02:10,289
server usage metrics and these metrics

00:02:08,039 --> 00:02:11,910
are are quite useful in the graph

00:02:10,289 --> 00:02:13,470
manager and they're even more useful

00:02:11,910 --> 00:02:16,800
outside of the graph manage

00:02:13,470 --> 00:02:19,110
in integrations such as the vs code

00:02:16,800 --> 00:02:22,830
integration that we're gonna dive in to

00:02:19,110 --> 00:02:26,640
today so let's let's jump right into a

00:02:22,830 --> 00:02:28,740
demo I think that's enough of that what

00:02:26,640 --> 00:02:31,020
we're going to use for a demo is is the

00:02:28,740 --> 00:02:33,420
space explorer app so this is a an

00:02:31,020 --> 00:02:36,330
Apollo project built on top of a data

00:02:33,420 --> 00:02:37,890
graph and this is and ends up being our

00:02:36,330 --> 00:02:39,390
full stack tutorial so you're able to

00:02:37,890 --> 00:02:40,770
follow along with it later

00:02:39,390 --> 00:02:43,230
I made some additions for the sake of

00:02:40,770 --> 00:02:47,220
this demo but for the majority of it

00:02:43,230 --> 00:02:49,800
it's the same so this is a data graph

00:02:47,220 --> 00:02:54,180
that delegates to a REST API the space X

00:02:49,800 --> 00:02:56,850
API and we're able to click on different

00:02:54,180 --> 00:02:59,610
missions but we're able to add things to

00:02:56,850 --> 00:03:02,070
our cart our cart is a local state we're

00:02:59,610 --> 00:03:04,890
gonna here cash we're gonna hear more

00:03:02,070 --> 00:03:07,020
about that in Danielle's talk and then

00:03:04,890 --> 00:03:09,330
inside of our part we're able to book

00:03:07,020 --> 00:03:12,360
our our chips and then eventually when

00:03:09,330 --> 00:03:15,720
booked trips shows up we we can click on

00:03:12,360 --> 00:03:17,820
that and and cancel them for for the

00:03:15,720 --> 00:03:19,020
demo and the code portion of the client

00:03:17,820 --> 00:03:22,970
side we're gonna focus on this

00:03:19,020 --> 00:03:26,459
experience so keep that in mind so now

00:03:22,970 --> 00:03:29,040
that we've seen the the client side of

00:03:26,459 --> 00:03:33,540
the application in the front-end we also

00:03:29,040 --> 00:03:37,080
have a server running in this case it's

00:03:33,540 --> 00:03:42,060
it's deployed to both Roku and locally

00:03:37,080 --> 00:03:43,920
locally for the demo and that exposes

00:03:42,060 --> 00:03:47,970
that data graph so with that data graph

00:03:43,920 --> 00:03:50,280
we have a data graph manager so this is

00:03:47,970 --> 00:03:52,290
engine many of you know it as engine

00:03:50,280 --> 00:03:55,350
today we're rebranding it as the graph

00:03:52,290 --> 00:03:59,489
manager and this is the the dashboard to

00:03:55,350 --> 00:04:01,580
do the manager so right right away we we

00:03:59,489 --> 00:04:05,580
jump in and we see the schema Explorer

00:04:01,580 --> 00:04:07,290
which provides us a easy and intuitive

00:04:05,580 --> 00:04:09,959
entry point into understanding what

00:04:07,290 --> 00:04:13,440
fields we have available and if we have

00:04:09,959 --> 00:04:15,989
descriptions we can see those now this

00:04:13,440 --> 00:04:20,640
represents the current state of our

00:04:15,989 --> 00:04:24,500
production schema and the there's

00:04:20,640 --> 00:04:26,280
there's also a history of that schema so

00:04:24,500 --> 00:04:28,770
when when

00:04:26,280 --> 00:04:32,310
new deploys are pushed and the schema

00:04:28,770 --> 00:04:34,290
changes we keep track of a change log

00:04:32,310 --> 00:04:36,150
and and this is quite useful if if I

00:04:34,290 --> 00:04:40,530
want to understand who's changed what

00:04:36,150 --> 00:04:43,980
who I need to ping about what changed so

00:04:40,530 --> 00:04:45,720
for example here Danielle made a change

00:04:43,980 --> 00:04:51,500
that added the canceled trip mutation

00:04:45,720 --> 00:04:54,210
and I might ask her you know why cool so

00:04:51,500 --> 00:04:59,520
that's that's the schema registry side

00:04:54,210 --> 00:05:02,580
of things in addition to the the schema

00:04:59,520 --> 00:05:07,410
itself we also have usage metrics I have

00:05:02,580 --> 00:05:09,570
to refresh this page to see them too so

00:05:07,410 --> 00:05:17,390
they may be the Internet's not working I

00:05:09,570 --> 00:05:17,390
hope that's not the case so so we have

00:05:19,460 --> 00:05:24,200
let's see that's odd

00:05:28,490 --> 00:05:34,160
okay well so we have usage metrics for

00:05:32,449 --> 00:05:36,050
each field and we're gonna dive into

00:05:34,160 --> 00:05:40,280
what exactly that means

00:05:36,050 --> 00:05:44,110
all this all's not lost because we yeah

00:05:40,280 --> 00:05:47,030
so we have usage metrics per field per

00:05:44,110 --> 00:05:51,289
and and that's captured from our

00:05:47,030 --> 00:05:56,080
structured logs that come from Apollo

00:05:51,289 --> 00:05:58,750
server let's let's dive into how that

00:05:56,080 --> 00:06:04,090
usage data is useful in your day-to-day

00:05:58,750 --> 00:06:08,090
development workflow so this is the

00:06:04,090 --> 00:06:10,280
that's server is this big enough real so

00:06:08,090 --> 00:06:12,289
here we have the the book trips

00:06:10,280 --> 00:06:13,400
component so this was that that

00:06:12,289 --> 00:06:15,590
component on the right side of the

00:06:13,400 --> 00:06:17,780
screen that gave you the list of all of

00:06:15,590 --> 00:06:19,250
the trips that you booked and and here

00:06:17,780 --> 00:06:23,479
we see in our development environment

00:06:19,250 --> 00:06:26,449
the you should statistics for your query

00:06:23,479 --> 00:06:29,060
and you're able to to get this as you

00:06:26,449 --> 00:06:31,819
write a query so the reason this is so

00:06:29,060 --> 00:06:35,419
valuable is as a front-end or full stack

00:06:31,819 --> 00:06:36,889
developer I oftentimes I'm not thinking

00:06:35,419 --> 00:06:40,009
too hard about performance when I'm

00:06:36,889 --> 00:06:41,599
writing my queries and then then ice

00:06:40,009 --> 00:06:43,190
might see something expensive like the

00:06:41,599 --> 00:06:46,520
trips so this is coming from the SpaceX

00:06:43,190 --> 00:06:47,780
API might be slow so what that prompts

00:06:46,520 --> 00:06:51,919
me to do is think about my loading

00:06:47,780 --> 00:06:54,259
States and I can create my app around

00:06:51,919 --> 00:06:57,199
those performance characteristics or

00:06:54,259 --> 00:06:58,370
even if I need to like tell somebody

00:06:57,199 --> 00:07:01,099
about this performance correct

00:06:58,370 --> 00:07:02,780
characteristics to give a user a certain

00:07:01,099 --> 00:07:04,729
experience I can go to a back-end

00:07:02,780 --> 00:07:06,710
developer and talk to them I might go to

00:07:04,729 --> 00:07:10,130
the schema history in order to determine

00:07:06,710 --> 00:07:14,210
who's responsible for that field let's

00:07:10,130 --> 00:07:20,000
dive into the the cart contents so here

00:07:14,210 --> 00:07:23,320
we have a mutation component with some

00:07:20,000 --> 00:07:26,389
cash updates so oftentimes I found that

00:07:23,320 --> 00:07:28,310
the front-end requirements change and I

00:07:26,389 --> 00:07:30,590
need to add some more data to a

00:07:28,310 --> 00:07:32,270
component or or have a different

00:07:30,590 --> 00:07:34,490
experience in the UI I need to have some

00:07:32,270 --> 00:07:38,419
optimistic updates so in this case our

00:07:34,490 --> 00:07:40,160
book trips returns a simple boolean well

00:07:38,419 --> 00:07:42,680
I want something

00:07:40,160 --> 00:07:44,810
I want to update my cache on the front

00:07:42,680 --> 00:07:47,570
end so that I immediately get an update

00:07:44,810 --> 00:07:49,010
in my book trips so as a full stack

00:07:47,570 --> 00:07:55,460
developer I can jump into the server and

00:07:49,010 --> 00:07:57,740
do that so here we have a mutation so

00:07:55,460 --> 00:08:00,860
this is a palo server this is a schema

00:07:57,740 --> 00:08:06,380
definition language and i'm going to

00:08:00,860 --> 00:08:08,870
update this mutation in place so I'm

00:08:06,380 --> 00:08:10,850
gonna use a trip update response this is

00:08:08,870 --> 00:08:12,830
a really common best practice for

00:08:10,850 --> 00:08:15,410
mutations so instead of returning a

00:08:12,830 --> 00:08:17,390
boolean we want to return an object that

00:08:15,410 --> 00:08:19,220
allows us to provide some more data as

00:08:17,390 --> 00:08:20,930
well as maybe provide some more errors

00:08:19,220 --> 00:08:25,670
maybe an error code depending on the

00:08:20,930 --> 00:08:28,490
complexity of your UI or your data graph

00:08:25,670 --> 00:08:34,690
consumer so I'm also going to change the

00:08:28,490 --> 00:08:34,690
the book trips mutation result

00:08:49,240 --> 00:08:55,209
awesome so now that I've made an update

00:08:52,179 --> 00:08:58,449
to the schema and to the resolver I'm

00:08:55,209 --> 00:09:03,279
gonna create a commit and push that up

00:08:58,449 --> 00:09:11,139
to my remote I'm also going to make a

00:09:03,279 --> 00:09:16,059
pull request and this pull request will

00:09:11,139 --> 00:09:20,410
will kick off a continuous that's

00:09:16,059 --> 00:09:24,089
unexpected you don't see that very often

00:09:20,410 --> 00:09:29,619
I'm glad we recorded that four nines is

00:09:24,089 --> 00:09:34,779
really great so what this does is it

00:09:29,619 --> 00:09:36,699
kicks off a deploy rather a CI job in

00:09:34,779 --> 00:09:40,480
circle so we had to set that up and

00:09:36,699 --> 00:09:43,119
connect that with the the graph manager

00:09:40,480 --> 00:09:45,429
and what it does is it runs a service

00:09:43,119 --> 00:09:46,420
check so this is the entry point to

00:09:45,429 --> 00:09:49,449
schema validation

00:09:46,420 --> 00:09:52,269
it's Apollo service check and what the

00:09:49,449 --> 00:09:54,220
service check does is takes your changes

00:09:52,269 --> 00:09:57,220
to a schema so in this case we changed

00:09:54,220 --> 00:09:59,470
boolean to trip update response and it

00:09:57,220 --> 00:10:01,689
compares that against the traffic that's

00:09:59,470 --> 00:10:04,360
running against your server or your data

00:10:01,689 --> 00:10:08,339
graph and if there are any operations

00:10:04,360 --> 00:10:11,799
that that update those those changes

00:10:08,339 --> 00:10:14,350
break then we'll get a failed build so

00:10:11,799 --> 00:10:16,920
here I see that I've I failed my build

00:10:14,350 --> 00:10:19,600
and and I don't really know why I don't

00:10:16,920 --> 00:10:23,709
not really aware of any consumers except

00:10:19,600 --> 00:10:25,360
myself or not even aware of consumers

00:10:23,709 --> 00:10:27,399
because I'm trying to keep my my schema

00:10:25,360 --> 00:10:30,999
agile so I'm gonna click in for more

00:10:27,399 --> 00:10:33,420
details and and what I see here is that

00:10:30,999 --> 00:10:35,949
it turns out there's there's a lot more

00:10:33,420 --> 00:10:37,329
clients than I expected there's there's

00:10:35,949 --> 00:10:39,459
an iOS client there's an android client

00:10:37,329 --> 00:10:42,069
and and those all use the field pretty

00:10:39,459 --> 00:10:43,629
intensely so we can't make this change

00:10:42,069 --> 00:10:47,559
otherwise we're gonna break these

00:10:43,629 --> 00:10:49,509
clients if I don't really know why I can

00:10:47,559 --> 00:10:51,369
look into the the documentation and

00:10:49,509 --> 00:10:53,529
understand that a boolean is a scalar so

00:10:51,369 --> 00:10:55,779
it doesn't require a selection set

00:10:53,529 --> 00:10:59,049
whereas a trip update response requires

00:10:55,779 --> 00:11:01,470
a selection set this is inspired by one

00:10:59,049 --> 00:11:04,650
of the internal use cases we found for

00:11:01,470 --> 00:11:09,900
are supporting the CLI that I can talk

00:11:04,650 --> 00:11:15,300
about more if if a build fails but what

00:11:09,900 --> 00:11:18,480
we're going to do is we're going to do

00:11:15,300 --> 00:11:21,120
something called field rollover instead

00:11:18,480 --> 00:11:25,440
of an in-place update so this is another

00:11:21,120 --> 00:11:26,850
best practice for making in-place

00:11:25,440 --> 00:11:28,320
updates that might be breaking so what

00:11:26,850 --> 00:11:30,720
I'm going to do is I'm going to create a

00:11:28,320 --> 00:11:32,460
new mutation with a different name that

00:11:30,720 --> 00:11:34,740
returns trip update response and then

00:11:32,460 --> 00:11:38,570
I'm going to deprecated so what that

00:11:34,740 --> 00:11:38,570
looks like is creating a new mutation

00:11:39,860 --> 00:11:49,140
then I'm gonna update book trips to

00:11:45,120 --> 00:11:54,770
return the same values that it used to

00:11:49,140 --> 00:11:57,930
and then I'm going to deprecated and

00:11:54,770 --> 00:12:05,430
provide a good reason why so what a

00:11:57,930 --> 00:12:18,530
deprecation does is is it's enabled by a

00:12:05,430 --> 00:12:18,530
deprecated okay so what it deprecated

00:12:19,160 --> 00:12:25,350
directive does is it tells the clients

00:12:23,550 --> 00:12:27,150
that you should no longer use this field

00:12:25,350 --> 00:12:29,490
so in in graphical playground and

00:12:27,150 --> 00:12:33,540
graphical it won't show up anymore so

00:12:29,490 --> 00:12:35,160
that we won't use it the reason and what

00:12:33,540 --> 00:12:36,810
we have here is shown to the client

00:12:35,160 --> 00:12:40,980
developer so we want to make that

00:12:36,810 --> 00:12:45,450
reasonable then I also have to update

00:12:40,980 --> 00:12:48,200
the the mutation to include the new book

00:12:45,450 --> 00:12:48,200
trips with response

00:12:51,620 --> 00:12:56,810
and then I'm going to return the book

00:12:54,620 --> 00:13:03,380
trips mutation to its original

00:12:56,810 --> 00:13:08,750
functionality and I'm running prettier

00:13:03,380 --> 00:13:13,580
so hopefully this stuff all works cool

00:13:08,750 --> 00:13:20,240
I'm gonna make another commit and I'm

00:13:13,580 --> 00:13:24,110
gonna push that up so we can go back to

00:13:20,240 --> 00:13:28,010
our git and we see that we have another

00:13:24,110 --> 00:13:32,600
commit running with a CI job so fingers

00:13:28,010 --> 00:13:35,240
crossed it works and we we get a passing

00:13:32,600 --> 00:13:37,240
change so as I said this is filled

00:13:35,240 --> 00:13:40,520
rollover this is a super common way to

00:13:37,240 --> 00:13:42,320
make a perceived breaking change to the

00:13:40,520 --> 00:13:47,720
graph and an augment your functionality

00:13:42,320 --> 00:13:50,240
in a safe way so our service check

00:13:47,720 --> 00:13:52,570
passes which is awesome it's always nice

00:13:50,240 --> 00:13:56,030
to know that we have that security

00:13:52,570 --> 00:13:58,190
because I've had the experience of

00:13:56,030 --> 00:14:01,190
making an invert and change and not

00:13:58,190 --> 00:14:03,560
feeling too good about it so let's let's

00:14:01,190 --> 00:14:07,280
squash and merge this what that does is

00:14:03,560 --> 00:14:09,590
it'll kick off a deploy and what we're

00:14:07,280 --> 00:14:11,090
we're waiting on there is the the

00:14:09,590 --> 00:14:14,030
service to be deployed and then we call

00:14:11,090 --> 00:14:16,430
service push which will update our

00:14:14,030 --> 00:14:21,740
schema history as well as our latest

00:14:16,430 --> 00:14:24,380
schema Explorer while we wait on that we

00:14:21,740 --> 00:14:25,490
can look into exactly what changed to

00:14:24,380 --> 00:14:27,560
make sure that we actually made the

00:14:25,490 --> 00:14:29,420
change we want ideally you would do this

00:14:27,560 --> 00:14:33,380
before the squash but for the sake of

00:14:29,420 --> 00:14:33,800
the demo I squash first so we see book

00:14:33,380 --> 00:14:37,220
trips

00:14:33,800 --> 00:14:42,070
first and and then we we also see book

00:14:37,220 --> 00:14:45,560
trips with response that's awesome so

00:14:42,070 --> 00:14:49,520
now we can look into our schema history

00:14:45,560 --> 00:14:51,230
and see that we have the new schema

00:14:49,520 --> 00:14:54,290
change with the deprecation and the

00:14:51,230 --> 00:14:58,610
field added and i think this is really

00:14:54,290 --> 00:15:01,430
where the the Explorer shines is is when

00:14:58,610 --> 00:15:03,620
when we have to do this i refresh the

00:15:01,430 --> 00:15:07,400
page in order to get the new schema and

00:15:03,620 --> 00:15:11,330
let's go so so we see the deprecated and

00:15:07,400 --> 00:15:13,010
we see the new new mutation where it

00:15:11,330 --> 00:15:15,500
really shines is we can go over to the

00:15:13,010 --> 00:15:18,800
deprecations tab and see exactly what

00:15:15,500 --> 00:15:21,530
field has been fields rather have been

00:15:18,800 --> 00:15:24,890
deprecated and we can see how long or

00:15:21,530 --> 00:15:27,800
rather how many requests are being done

00:15:24,890 --> 00:15:29,690
against that field so there are a couple

00:15:27,800 --> 00:15:32,330
we've done this many times and there are

00:15:29,690 --> 00:15:35,060
many deprecated fields in our in our

00:15:32,330 --> 00:15:38,150
data graph internally and so I I come to

00:15:35,060 --> 00:15:39,950
this page a lot in order to determine if

00:15:38,150 --> 00:15:42,230
I can defecate something how many people

00:15:39,950 --> 00:15:44,390
are on which version of the CLI and and

00:15:42,230 --> 00:15:47,240
it really helps me have confidence that

00:15:44,390 --> 00:15:49,940
I can make changes to the data graph to

00:15:47,240 --> 00:15:52,160
keep it agile and make sure that like

00:15:49,940 --> 00:15:54,230
when something can be removed I can

00:15:52,160 --> 00:15:58,720
remove it so that I'm not dealing with

00:15:54,230 --> 00:16:01,820
tech debt and and cruft in my codebase

00:15:58,720 --> 00:16:03,800
awesome so let's that's that's the

00:16:01,820 --> 00:16:05,860
server side of deprecations let's take a

00:16:03,800 --> 00:16:09,560
look at the the client side of

00:16:05,860 --> 00:16:14,150
deprecations I'll have to remember which

00:16:09,560 --> 00:16:17,750
desktop on one so let's refresh this

00:16:14,150 --> 00:16:20,900
schema and what we see here is is that

00:16:17,750 --> 00:16:23,000
we we get an a warning message for each

00:16:20,900 --> 00:16:25,520
deprecated field in in our application

00:16:23,000 --> 00:16:27,770
this is an Apollo project that's that's

00:16:25,520 --> 00:16:29,210
set up and wired in with the Apollo

00:16:27,770 --> 00:16:33,710
extension Daniel is going to talk about

00:16:29,210 --> 00:16:36,410
that more so stay tuned and so we know

00:16:33,710 --> 00:16:39,010
that we need to do something else we

00:16:36,410 --> 00:16:40,460
need to use book trips with response

00:16:39,010 --> 00:16:42,560
that's awesome

00:16:40,460 --> 00:16:45,080
that doesn't really tell me why like as

00:16:42,560 --> 00:16:47,510
a client of Elham Arabi like why so I

00:16:45,080 --> 00:16:49,850
can go to the schema history tab and say

00:16:47,510 --> 00:16:51,170
who deprecated this field and then I can

00:16:49,850 --> 00:16:56,330
go talk to them if there's some tribal

00:16:51,170 --> 00:16:59,930
knowledge that I need to achieve awesome

00:16:56,330 --> 00:17:04,640
I always like to see the the application

00:16:59,930 --> 00:17:09,260
work so I'm gonna pull out my stashed

00:17:04,640 --> 00:17:13,520
changes which will this this uses the

00:17:09,260 --> 00:17:16,910
the new do new launches and then we do

00:17:13,520 --> 00:17:20,990
some cache updates to our

00:17:16,910 --> 00:17:23,120
local state here and we can look into

00:17:20,990 --> 00:17:27,079
what exactly experienced that that gives

00:17:23,120 --> 00:17:32,450
us on the front end so when we when we

00:17:27,079 --> 00:17:35,750
add something to our cart and then we

00:17:32,450 --> 00:17:38,930
will book it so immediately when we see

00:17:35,750 --> 00:17:40,310
the bon voyage we see our cart update so

00:17:38,930 --> 00:17:43,040
that's that's the power of an optimistic

00:17:40,310 --> 00:17:45,110
update and the power of changing our

00:17:43,040 --> 00:17:51,170
data requirements over time in a safe

00:17:45,110 --> 00:17:54,350
manner so what we've seen here is the

00:17:51,170 --> 00:17:56,660
the Apollo platform and this is just a

00:17:54,350 --> 00:18:00,490
taste of the Apollo platform we've seen

00:17:56,660 --> 00:18:02,510
schema change control we've seen

00:18:00,490 --> 00:18:03,890
performance insight protective schema

00:18:02,510 --> 00:18:07,040
changes a little bit of client

00:18:03,890 --> 00:18:10,100
identification especially with the the

00:18:07,040 --> 00:18:11,930
schema validation and and to change we

00:18:10,100 --> 00:18:13,730
needed to make and that gives us an

00:18:11,930 --> 00:18:18,050
information about who we need to talk to

00:18:13,730 --> 00:18:20,420
about those deprecated fields and we've

00:18:18,050 --> 00:18:22,640
heard a lot about Federation so I'm sure

00:18:20,420 --> 00:18:25,760
you all are wondering how this stuff

00:18:22,640 --> 00:18:30,050
works with Federation I was - to be

00:18:25,760 --> 00:18:32,270
honest I was like No so we can go over

00:18:30,050 --> 00:18:36,020
to our luckily this is a demo so I've

00:18:32,270 --> 00:18:37,760
prepped a federated mat variant of our

00:18:36,020 --> 00:18:41,600
schema so we can hop over to our

00:18:37,760 --> 00:18:45,260
federated variant and and see that to

00:18:41,600 --> 00:18:47,270
the user we have the same schema and to

00:18:45,260 --> 00:18:50,810
our vs code integration we have the same

00:18:47,270 --> 00:18:53,840
sort of I mean slightly fewer requests

00:18:50,810 --> 00:18:57,110
because it's you know a new service but

00:18:53,840 --> 00:18:58,640
it's it's completely transparent to the

00:18:57,110 --> 00:19:00,650
to the client and the consumer and the

00:18:58,640 --> 00:19:04,100
vs code integration what's different is

00:19:00,650 --> 00:19:06,050
that internally we know that we have

00:19:04,100 --> 00:19:08,510
different services so all of these

00:19:06,050 --> 00:19:10,040
different services we see the extend

00:19:08,510 --> 00:19:13,490
launch that comes from the launch

00:19:10,040 --> 00:19:16,250
service we know that we have different

00:19:13,490 --> 00:19:21,140
services that all provide data to the

00:19:16,250 --> 00:19:25,940
API and so that's great that's that's

00:19:21,140 --> 00:19:27,920
huge we we compose and build time are

00:19:25,940 --> 00:19:29,420
able to create a schema that is

00:19:27,920 --> 00:19:32,090
transparent to the

00:19:29,420 --> 00:19:33,650
to the consumer there's also a lot of

00:19:32,090 --> 00:19:36,590
complexity in here for each different

00:19:33,650 --> 00:19:38,450
service presumably a different team is

00:19:36,590 --> 00:19:43,150
working on each one so they need to be

00:19:38,450 --> 00:19:48,679
worked on individually in isolation so

00:19:43,150 --> 00:19:52,880
let's jump over to our user or account

00:19:48,679 --> 00:19:54,049
schema and and determine you know how

00:19:52,880 --> 00:19:57,530
this works

00:19:54,049 --> 00:19:59,090
as as a individual developer I know

00:19:57,530 --> 00:20:00,860
nothing about the Rockets or the

00:19:59,090 --> 00:20:03,049
launches all I know is that I want to

00:20:00,860 --> 00:20:08,090
change log into boolean because I'm an

00:20:03,049 --> 00:20:10,400
anarchist and then let's hop over to

00:20:08,090 --> 00:20:12,440
like normally this would be done in CI I

00:20:10,400 --> 00:20:16,490
think it's interesting to illustrate it

00:20:12,440 --> 00:20:21,169
as as a command run from your CLI or my

00:20:16,490 --> 00:20:25,730
terminal and so we this should be not

00:20:21,169 --> 00:20:27,890
users this should be it counts and we

00:20:25,730 --> 00:20:29,750
run we can run service check the the

00:20:27,890 --> 00:20:31,850
only thing that changes is we add a

00:20:29,750 --> 00:20:33,290
service name that corresponds to the

00:20:31,850 --> 00:20:34,850
individual service that I'm running so

00:20:33,290 --> 00:20:37,850
you can the beauty of this is you can

00:20:34,850 --> 00:20:39,290
run these in separate CI pipelines so

00:20:37,850 --> 00:20:41,240
that your teams can be completely

00:20:39,290 --> 00:20:45,799
isolated from each other this is big

00:20:41,240 --> 00:20:47,679
enough for y'all cool so let's run it

00:20:45,799 --> 00:20:51,110
moment of truth

00:20:47,679 --> 00:20:51,950
so we we can see that we're able to run

00:20:51,110 --> 00:20:55,880
this in isolation

00:20:51,950 --> 00:20:59,679
and see the same sort of breaking change

00:20:55,880 --> 00:21:01,490
and I can solve this on my own and

00:20:59,679 --> 00:21:03,980
there's something really special

00:21:01,490 --> 00:21:07,340
happening here when a service check

00:21:03,980 --> 00:21:09,710
happens we're composing the the changes

00:21:07,340 --> 00:21:12,679
to your current service with the rest of

00:21:09,710 --> 00:21:14,600
your production service so what that

00:21:12,679 --> 00:21:16,370
means is that there's only one service

00:21:14,600 --> 00:21:17,870
that's being modified and you only care

00:21:16,370 --> 00:21:20,179
about your individual service because

00:21:17,870 --> 00:21:23,440
you know we we commit atomically so

00:21:20,179 --> 00:21:25,669
presumably you're your production is is

00:21:23,440 --> 00:21:27,799
static and you can you can add to it and

00:21:25,669 --> 00:21:30,230
and that happens one at a time over and

00:21:27,799 --> 00:21:34,190
over and we see here that that we've

00:21:30,230 --> 00:21:37,690
broken clients again so that's with the

00:21:34,190 --> 00:21:37,690
federated metrics that James mentioned

00:21:40,360 --> 00:21:47,020
so that's the the apollo platform we're

00:21:43,730 --> 00:21:54,470
really excited about it and thank you

00:21:47,020 --> 00:21:54,470

YouTube URL: https://www.youtube.com/watch?v=28si95VO4Ws


