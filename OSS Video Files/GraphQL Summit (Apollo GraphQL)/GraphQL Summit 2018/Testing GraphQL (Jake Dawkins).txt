Title: Testing GraphQL (Jake Dawkins)
Publication date: 2018-12-05
Playlist: GraphQL Summit 2018
Description: 
	Talk from GraphQL Summit 2018 - Nov 7, 2018

Jake Dawkins, an Apollo Architect, focusing on making the GraphQL ecosystem easier to use at any scale. After putting multiple GraphQL services into production and assisting with countless more, Jake has learned a thing or two about how teams implement GraphQL within their organization.

Teams that adopt GraphQL see it become a powerful, yet critical part of how their applications work. The schemas that power these apps act as an important agreement between servers and clients. So how do you support such an important piece of infrastructure? With tests of course! This talk is a deep dive into how to test the Apollo Platform, giving you the security you need to go into production.

Resources:
Learn more about Apollo:  https://www.apollographql.com/
Join Apollo's community Slack group:  https://www.apollographql.com/slack/
Learn more:  https://summit.graphql.com
Captions: 
	00:00:05,630 --> 00:00:09,850
hi everybody how's it goin how's it goin

00:00:08,270 --> 00:00:12,640
this room is wonderful by the way

00:00:09,850 --> 00:00:15,349
how many people just by a show of hands

00:00:12,640 --> 00:00:17,240
really love testing like it's it's a

00:00:15,349 --> 00:00:19,099
wonderful thing you're here because you

00:00:17,240 --> 00:00:20,510
love it that's great I'm assuming most

00:00:19,099 --> 00:00:22,640
of those aren't sarcastic

00:00:20,510 --> 00:00:23,840
what about hate testing like this is the

00:00:22,640 --> 00:00:25,939
bane of your existence you're here

00:00:23,840 --> 00:00:28,099
because it's awful and terrible and how

00:00:25,939 --> 00:00:29,930
many of you have just never tested like

00:00:28,099 --> 00:00:31,910
unit tests and integration tested I mean

00:00:29,930 --> 00:00:33,470
you know test in production yeah any

00:00:31,910 --> 00:00:35,390
above okay cool

00:00:33,470 --> 00:00:37,190
yeah well my name is Jake Dawkins and

00:00:35,390 --> 00:00:38,240
I'm here to talk about all of the above

00:00:37,190 --> 00:00:41,960
except for testing and production

00:00:38,240 --> 00:00:43,730
hopefully a little bit about myself as

00:00:41,960 --> 00:00:45,800
Jesse mentioned I'm an Apollo architect

00:00:43,730 --> 00:00:47,330
I work on the Apollo team and really

00:00:45,800 --> 00:00:49,340
just what that means is I'm here to help

00:00:47,330 --> 00:00:51,830
you navigate the graph QL ecosystem in

00:00:49,340 --> 00:00:54,530
Apollo's tools specifically around some

00:00:51,830 --> 00:00:58,010
ideas of best practices schema design

00:00:54,530 --> 00:00:59,720
and testing that's the talk these these

00:00:58,010 --> 00:01:01,310
are things that we we get special

00:00:59,720 --> 00:01:03,009
exposure to and unique exposure to

00:01:01,310 --> 00:01:04,970
working with some really large companies

00:01:03,009 --> 00:01:07,490
everybody does things differently and

00:01:04,970 --> 00:01:09,229
seeing how people do things it really

00:01:07,490 --> 00:01:11,810
gives us insight into how to make things

00:01:09,229 --> 00:01:13,399
better so hopefully if you haven't had

00:01:11,810 --> 00:01:14,810
experience with testing especially with

00:01:13,399 --> 00:01:16,850
Apollo's tooling whether it be on the

00:01:14,810 --> 00:01:19,340
client or server this will be

00:01:16,850 --> 00:01:21,319
enlightening and wonderful for you so

00:01:19,340 --> 00:01:23,509
what am I going to be talking about

00:01:21,319 --> 00:01:25,549
exactly so I'm gonna go into like a

00:01:23,509 --> 00:01:27,829
little ideological sidebar talk about

00:01:25,549 --> 00:01:30,200
the purpose of testing the effectiveness

00:01:27,829 --> 00:01:31,280
of different kinds of testing and then

00:01:30,200 --> 00:01:33,139
I'm gonna go a little bit into the weeds

00:01:31,280 --> 00:01:35,240
and talk about testing your clients and

00:01:33,139 --> 00:01:37,969
testing your servers so without further

00:01:35,240 --> 00:01:40,909
ado let's get into some ideology about

00:01:37,969 --> 00:01:42,819
the purpose of testing so a lot of

00:01:40,909 --> 00:01:45,229
people raise their hands why do you test

00:01:42,819 --> 00:01:46,789
for me it comes down to like two main

00:01:45,229 --> 00:01:48,319
categories there are other reasons you

00:01:46,789 --> 00:01:50,810
know everybody has their own preferences

00:01:48,319 --> 00:01:53,209
but I like to think of the testing

00:01:50,810 --> 00:01:54,950
falling into two categories of safety of

00:01:53,209 --> 00:01:57,350
your production code because you don't

00:01:54,950 --> 00:01:58,909
want to test things in production you

00:01:57,350 --> 00:02:00,740
know have your users be the first ones

00:01:58,909 --> 00:02:03,979
to find bugs that's generally a bad idea

00:02:00,740 --> 00:02:05,539
and second thing that I think is often

00:02:03,979 --> 00:02:09,679
not talked about very much as a

00:02:05,539 --> 00:02:11,780
documentation I can't imagine

00:02:09,679 --> 00:02:13,820
alright I can't count how many projects

00:02:11,780 --> 00:02:16,100
that I've come into and the

00:02:13,820 --> 00:02:18,250
documentation is kind of lacking for

00:02:16,100 --> 00:02:19,930
lack of a better term or in case

00:02:18,250 --> 00:02:22,300
is where I wrote the code there just

00:02:19,930 --> 00:02:23,470
wasn't documentation and it's been three

00:02:22,300 --> 00:02:26,560
months and I have no idea what I wrote

00:02:23,470 --> 00:02:29,080
anymore so where do you look i I think

00:02:26,560 --> 00:02:30,670
that tests not only are they generally

00:02:29,080 --> 00:02:32,530
describing in plain text in the title

00:02:30,670 --> 00:02:34,420
what they're supposed to do they also

00:02:32,530 --> 00:02:36,520
show you how to use the function and its

00:02:34,420 --> 00:02:38,770
expected behavior so documentation I

00:02:36,520 --> 00:02:41,440
think is a really important aspect of

00:02:38,770 --> 00:02:43,870
tests that people often look over up

00:02:41,440 --> 00:02:47,800
next talk about the effectiveness of

00:02:43,870 --> 00:02:51,239
tests so I like to think of testing and

00:02:47,800 --> 00:02:54,310
the mindset of the Pareto principle and

00:02:51,239 --> 00:02:56,190
for the 99% of people who don't know or

00:02:54,310 --> 00:02:58,900
care what that means it just means that

00:02:56,190 --> 00:03:00,190
most of the time like 80% of the

00:02:58,900 --> 00:03:02,920
benefits you're gonna get from something

00:03:00,190 --> 00:03:05,080
come from like 20% of the work in other

00:03:02,920 --> 00:03:06,790
words like you do 20% of the work you

00:03:05,080 --> 00:03:08,440
get 80% of the benefit in other words

00:03:06,790 --> 00:03:11,590
the other 80% of your work isn't really

00:03:08,440 --> 00:03:14,170
wasted it's just less beneficial than

00:03:11,590 --> 00:03:16,690
the beginning part so for this talk I'm

00:03:14,170 --> 00:03:19,209
gonna try to focus around helping you

00:03:16,690 --> 00:03:22,600
choose what 20% to test especially when

00:03:19,209 --> 00:03:25,209
it comes to Apollo's tooling I would be

00:03:22,600 --> 00:03:27,400
I would be a terrible presenter if I

00:03:25,209 --> 00:03:29,590
didn't mention Kent C Dodds and his

00:03:27,400 --> 00:03:31,120
wonderful work around testing he just

00:03:29,590 --> 00:03:34,000
released a JavaScript testing course but

00:03:31,120 --> 00:03:35,709
he's also done a whole lot more he he

00:03:34,000 --> 00:03:37,299
proposed this idea of a testing trophy

00:03:35,709 --> 00:03:39,130
so I mean we've all seen pyramids like

00:03:37,299 --> 00:03:42,160
food pyramid testing pyramid you know

00:03:39,130 --> 00:03:44,590
the two most popular ones Great Pyramid

00:03:42,160 --> 00:03:46,239
whatever and then we have this this

00:03:44,590 --> 00:03:48,519
testing trophy which kind of breaks up

00:03:46,239 --> 00:03:50,799
the value of tests especially the return

00:03:48,519 --> 00:03:52,120
on value by proportion and what you

00:03:50,799 --> 00:03:54,250
really need to know from this chart here

00:03:52,120 --> 00:03:56,350
is that your static test your static

00:03:54,250 --> 00:03:58,090
typing static analysis is gonna get you

00:03:56,350 --> 00:04:00,760
a lot of benefit especially when it's

00:03:58,090 --> 00:04:02,110
automatic the next most beneficial part

00:04:00,760 --> 00:04:05,079
of these tests is going to be

00:04:02,110 --> 00:04:06,250
integration tests these aren't unit

00:04:05,079 --> 00:04:07,900
tests which unit tests just test

00:04:06,250 --> 00:04:09,549
individual functions individual

00:04:07,900 --> 00:04:11,680
components in isolation whereas

00:04:09,549 --> 00:04:14,739
integration tests test how these pieces

00:04:11,680 --> 00:04:16,720
come together I like to think of it as

00:04:14,739 --> 00:04:18,549
in saying like if you want more

00:04:16,720 --> 00:04:19,870
confidence in your code you should be

00:04:18,549 --> 00:04:21,370
testing the parts of your code that

00:04:19,870 --> 00:04:24,940
you're least confident with or that are

00:04:21,370 --> 00:04:27,360
most likely to break because these these

00:04:24,940 --> 00:04:29,560
pieces while they most might be the most

00:04:27,360 --> 00:04:32,169
the most difficult to test or the most

00:04:29,560 --> 00:04:33,639
intimidating a test not only in doing so

00:04:32,169 --> 00:04:35,229
you learn a whole lot about it you will

00:04:33,639 --> 00:04:38,259
also be more confident in your code

00:04:35,229 --> 00:04:39,969
going into production so for those

00:04:38,259 --> 00:04:41,499
reasons I'm gonna be talking a lot in

00:04:39,969 --> 00:04:43,449
this talk about integration testing I

00:04:41,499 --> 00:04:45,669
will talk about the other forms of

00:04:43,449 --> 00:04:47,050
testing with regards to client and

00:04:45,669 --> 00:04:50,740
server applications but integration

00:04:47,050 --> 00:04:53,310
testing will be my focus here so let's

00:04:50,740 --> 00:04:55,930
jump off the sidebar and talk about

00:04:53,310 --> 00:04:58,840
testing clients so when I talk about

00:04:55,930 --> 00:05:01,870
this I'm mostly meaning testing react

00:04:58,840 --> 00:05:04,090
Apollo and Apollo clients projects these

00:05:01,870 --> 00:05:06,819
are using react as the few layer for

00:05:04,090 --> 00:05:08,050
example v this is what I have the most

00:05:06,819 --> 00:05:09,669
experience with so this is what I'm

00:05:08,050 --> 00:05:11,289
gonna talk about these ideas can

00:05:09,669 --> 00:05:11,830
transfer but this is this is what I'm

00:05:11,289 --> 00:05:13,960
talking about

00:05:11,830 --> 00:05:16,060
so first off let's just sort of out

00:05:13,960 --> 00:05:18,879
static typing and what it means for a

00:05:16,060 --> 00:05:20,949
react application generally what we're

00:05:18,879 --> 00:05:23,800
talking about static typing is assigning

00:05:20,949 --> 00:05:26,289
types to props so your components they

00:05:23,800 --> 00:05:27,939
get props and you're saying hey this

00:05:26,289 --> 00:05:29,469
prop is gonna be a number this prop is

00:05:27,939 --> 00:05:32,020
gonna be an object and defining the

00:05:29,469 --> 00:05:33,669
shape of that prop ideally if we're

00:05:32,020 --> 00:05:36,219
talking about react projects that use

00:05:33,669 --> 00:05:38,139
Apollo and use graph QL what you're

00:05:36,219 --> 00:05:40,719
talking about is these types coming from

00:05:38,139 --> 00:05:42,430
your production schema so since graph QL

00:05:40,719 --> 00:05:43,599
is a strongly typed language we know

00:05:42,430 --> 00:05:44,169
exactly what we're supposed to be

00:05:43,599 --> 00:05:45,699
getting back

00:05:44,169 --> 00:05:48,099
we know when something might be null and

00:05:45,699 --> 00:05:49,419
might not be there and we also know when

00:05:48,099 --> 00:05:52,000
they're definitely going to be there and

00:05:49,419 --> 00:05:54,639
when you can rely on it the the Apollo

00:05:52,000 --> 00:05:56,529
CLI actually if you saw Jeff's talk this

00:05:54,639 --> 00:05:58,089
morning he was talking about it and Adam

00:05:56,529 --> 00:06:00,310
Mary showed some more automatic type

00:05:58,089 --> 00:06:03,099
generation the Apollo CLI really helps

00:06:00,310 --> 00:06:04,599
with this especially with your with your

00:06:03,099 --> 00:06:05,830
production schemas you got you know you

00:06:04,599 --> 00:06:07,360
can also have the different versions of

00:06:05,830 --> 00:06:10,449
your schemas tagged differently for dev

00:06:07,360 --> 00:06:11,919
or otherwise it makes this really easy

00:06:10,449 --> 00:06:13,089
to do and I'll show more of these

00:06:11,919 --> 00:06:14,139
examples later on but for now I'm just

00:06:13,089 --> 00:06:15,430
gonna skip straight ahead the unit

00:06:14,139 --> 00:06:19,149
testing I'll go through this and then

00:06:15,430 --> 00:06:21,310
show examples unit testing this is a

00:06:19,149 --> 00:06:23,740
this is just testing testing in

00:06:21,310 --> 00:06:25,659
isolation so testing components showing

00:06:23,740 --> 00:06:27,039
them in isolation and I just like to

00:06:25,659 --> 00:06:30,129
think of this in react as usually as

00:06:27,039 --> 00:06:31,569
props in render logic out you may have

00:06:30,129 --> 00:06:32,979
some small interactions with these items

00:06:31,569 --> 00:06:35,229
but generally if you're testing

00:06:32,979 --> 00:06:36,610
something in isolation you're like okay

00:06:35,229 --> 00:06:38,740
I click the button is it firing the

00:06:36,610 --> 00:06:41,430
function that's the prop like it's not

00:06:38,740 --> 00:06:44,500
too in-depth of test with unit testing

00:06:41,430 --> 00:06:46,840
for this I would highly recommend

00:06:44,500 --> 00:06:47,890
testing library also by Camp Dodds it is

00:06:46,840 --> 00:06:49,900
wonderful

00:06:47,890 --> 00:06:52,480
all the examples that I'll be showing

00:06:49,900 --> 00:06:55,030
will be using react testing library as

00:06:52,480 --> 00:06:57,310
kind of a scaffolding for it but yeah

00:06:55,030 --> 00:06:59,110
moving right along

00:06:57,310 --> 00:07:02,200
there's also integration testing that

00:06:59,110 --> 00:07:03,460
you can do and this is really just

00:07:02,200 --> 00:07:05,440
making sure all the pieces fit together

00:07:03,460 --> 00:07:07,360
so you have all these units all these

00:07:05,440 --> 00:07:08,800
tiny pieces what happens when you try to

00:07:07,360 --> 00:07:10,690
render them together what happens when

00:07:08,800 --> 00:07:11,140
one component tries to render all of its

00:07:10,690 --> 00:07:13,090
children

00:07:11,140 --> 00:07:14,890
does it crash and burn is it passing it

00:07:13,090 --> 00:07:16,180
the correct props and really this is

00:07:14,890 --> 00:07:18,100
also important because when you change

00:07:16,180 --> 00:07:19,570
those things in the future you're also

00:07:18,100 --> 00:07:20,440
changing potentially how they interact

00:07:19,570 --> 00:07:22,090
with each other and if you're not

00:07:20,440 --> 00:07:25,080
careful you break everything in

00:07:22,090 --> 00:07:27,460
production but there's also more to this

00:07:25,080 --> 00:07:29,080
not only you have to figure out you know

00:07:27,460 --> 00:07:30,669
is this rendering the right thing you

00:07:29,080 --> 00:07:34,210
also have you're loading your error

00:07:30,669 --> 00:07:35,470
states things that aren't really going

00:07:34,210 --> 00:07:36,669
to be at the from your mind when you're

00:07:35,470 --> 00:07:39,310
developing because you know you may have

00:07:36,669 --> 00:07:40,030
data mocked and it may be right at your

00:07:39,310 --> 00:07:41,440
fingertips

00:07:40,030 --> 00:07:43,090
but in production you're gonna have a

00:07:41,440 --> 00:07:44,860
loading State almost every single time

00:07:43,090 --> 00:07:46,390
you're gonna have an error State maybe

00:07:44,860 --> 00:07:47,350
more times than you'd like and these are

00:07:46,390 --> 00:07:49,780
things that you should definitely be

00:07:47,350 --> 00:07:51,760
testing for one of the tools that we

00:07:49,780 --> 00:07:54,640
offer for this especially in the react

00:07:51,760 --> 00:07:56,560
world is a mocked provider which if

00:07:54,640 --> 00:07:58,660
you're familiar with react Apollo it

00:07:56,560 --> 00:08:00,520
works by wrapping your entire component

00:07:58,660 --> 00:08:02,500
tree in a provider that has access to

00:08:00,520 --> 00:08:03,669
things like the client and the cache so

00:08:02,500 --> 00:08:05,380
whenever you're a query and your

00:08:03,669 --> 00:08:07,180
mutation components later on try to make

00:08:05,380 --> 00:08:09,040
a query in a mutation they can look at

00:08:07,180 --> 00:08:10,270
the context and see hey here's our

00:08:09,040 --> 00:08:13,060
client this is what we're actually using

00:08:10,270 --> 00:08:15,840
to make requests so we provide this tool

00:08:13,060 --> 00:08:18,700
to make that a little easier for you

00:08:15,840 --> 00:08:20,200
next up we have into in testing and this

00:08:18,700 --> 00:08:21,400
is a little bit outside of the scope of

00:08:20,200 --> 00:08:23,500
this talks I'm not gonna go too much

00:08:21,400 --> 00:08:25,479
into depth of this but this is making

00:08:23,500 --> 00:08:27,460
sure your app is usable starting up the

00:08:25,479 --> 00:08:29,169
app generally inside of you know like a

00:08:27,460 --> 00:08:30,820
chrome window or inside of a web

00:08:29,169 --> 00:08:32,919
environment and making sure you can

00:08:30,820 --> 00:08:34,450
actually do things like login and then

00:08:32,919 --> 00:08:36,250
once you're logged in hey can I actually

00:08:34,450 --> 00:08:37,510
navigate like our my or my

00:08:36,250 --> 00:08:39,669
authentication header is getting passed

00:08:37,510 --> 00:08:41,770
around properly to make sure app is

00:08:39,669 --> 00:08:43,030
actually usable because you know unit

00:08:41,770 --> 00:08:44,440
tests are great and all but if the app

00:08:43,030 --> 00:08:47,170
doesn't start up or the user can't log

00:08:44,440 --> 00:08:48,850
in that's a pretty big problem cyperus

00:08:47,170 --> 00:08:50,260
is a tool that's really great for this

00:08:48,850 --> 00:08:52,810
it's a really great experience that I've

00:08:50,260 --> 00:08:54,630
used in the past but I won't be showing

00:08:52,810 --> 00:08:57,459
example specifically of that today but

00:08:54,630 --> 00:08:58,310
speaking of examples I will be showing a

00:08:57,459 --> 00:09:00,380
demo of some

00:08:58,310 --> 00:09:02,420
the other things and now if I can

00:09:00,380 --> 00:09:04,210
hopefully get out of this in Mira my

00:09:02,420 --> 00:09:08,630
displays give me one second

00:09:04,210 --> 00:09:14,200
lovely get this here get my terminal

00:09:08,630 --> 00:09:14,200
window back up okie dokie

00:09:14,270 --> 00:09:20,060
[Music]

00:09:16,839 --> 00:09:22,010
wonderful okay is that visible can

00:09:20,060 --> 00:09:24,500
everybody see that pretty well okay kind

00:09:22,010 --> 00:09:27,230
of yell if not good

00:09:24,500 --> 00:09:29,390
awesome so here's what we have we have a

00:09:27,230 --> 00:09:31,490
very simple test that all this is going

00:09:29,390 --> 00:09:33,290
to do is render a single react component

00:09:31,490 --> 00:09:34,880
in isolation this is an example of a

00:09:33,290 --> 00:09:36,440
unit test full react that I was talking

00:09:34,880 --> 00:09:38,420
about if we want to look at this

00:09:36,440 --> 00:09:39,860
component real quick because the vs code

00:09:38,420 --> 00:09:41,900
is wonderful I could jump straight to it

00:09:39,860 --> 00:09:44,600
this is a very simple component it takes

00:09:41,900 --> 00:09:46,370
in a site it takes in a rocket and it

00:09:44,600 --> 00:09:47,870
renders the Rockets name the rocket type

00:09:46,370 --> 00:09:50,089
and the site that the rocket is gonna be

00:09:47,870 --> 00:09:52,730
launched from this is actually a code

00:09:50,089 --> 00:09:55,760
snippet from our full stack tutorial

00:09:52,730 --> 00:09:57,350
that we published last night

00:09:55,760 --> 00:09:59,270
and it is available for everybody to go

00:09:57,350 --> 00:10:00,950
check out so if any of these examples I

00:09:59,270 --> 00:10:02,900
go through too quickly

00:10:00,950 --> 00:10:04,190
feel free to hop on this later and check

00:10:02,900 --> 00:10:06,350
it out it's really good it's all still

00:10:04,190 --> 00:10:07,550
tested the tests are published and you

00:10:06,350 --> 00:10:10,460
can go run them for yourselves and mess

00:10:07,550 --> 00:10:13,160
around them copy paste whatever so yeah

00:10:10,460 --> 00:10:14,900
back at our test we have this render

00:10:13,160 --> 00:10:16,670
function that we're importing from test

00:10:14,900 --> 00:10:17,960
utils which I'll explain in a second but

00:10:16,670 --> 00:10:19,460
all you need to know is this is the

00:10:17,960 --> 00:10:21,920
react testing libraries render method

00:10:19,460 --> 00:10:23,450
and down here whenever actually call

00:10:21,920 --> 00:10:25,550
this render method I'm passing at our

00:10:23,450 --> 00:10:27,320
component giving it some props and it's

00:10:25,550 --> 00:10:29,690
gonna render it to a DOM and then I can

00:10:27,320 --> 00:10:30,980
make assertions against it like try to

00:10:29,690 --> 00:10:32,780
get something by text you know the

00:10:30,980 --> 00:10:35,450
Apollo launch pad the big Falcon rocket

00:10:32,780 --> 00:10:36,500
one and then bfr because we saw that all

00:10:35,450 --> 00:10:38,900
three of these things should be

00:10:36,500 --> 00:10:40,040
rendering and if I hit save on this you

00:10:38,900 --> 00:10:42,410
can see they rerun I'm not just trying

00:10:40,040 --> 00:10:45,290
to do some like some magic here and just

00:10:42,410 --> 00:10:47,540
pretend like tests are passing so yeah

00:10:45,290 --> 00:10:49,970
that's a very simple unit test rendering

00:10:47,540 --> 00:10:52,250
a component out not going too crazy with

00:10:49,970 --> 00:10:55,370
it up next we have something a little

00:10:52,250 --> 00:10:58,130
more crazy we have a login page which if

00:10:55,370 --> 00:11:00,200
I look at this one this has an Apollo

00:10:58,130 --> 00:11:01,880
consumer component which gives us access

00:11:00,200 --> 00:11:03,860
to the Apollo client so that we can

00:11:01,880 --> 00:11:05,930
update the cache later on and we also

00:11:03,860 --> 00:11:07,790
have a mutation component here and we're

00:11:05,930 --> 00:11:09,650
trying to log in a user essentially the

00:11:07,790 --> 00:11:11,610
login form is just UI so it's not that

00:11:09,650 --> 00:11:13,110
important for the sake of this talk

00:11:11,610 --> 00:11:15,209
all we know is that we're passing it a

00:11:13,110 --> 00:11:17,220
mutation called login and that login

00:11:15,209 --> 00:11:20,220
form can then call it whenever the user

00:11:17,220 --> 00:11:22,170
click Submit so what are we wanting to

00:11:20,220 --> 00:11:24,060
do here well step one we should wanna

00:11:22,170 --> 00:11:25,320
make sure that a render is like this is

00:11:24,060 --> 00:11:26,970
making a mutation so it's not gonna

00:11:25,320 --> 00:11:28,769
immediately you know make a query or

00:11:26,970 --> 00:11:30,329
anything like all we want to know here

00:11:28,769 --> 00:11:31,320
is that it renders first off so that we

00:11:30,329 --> 00:11:33,329
can actually click the login button

00:11:31,320 --> 00:11:35,970
right so let's go back to our login

00:11:33,329 --> 00:11:39,360
example test here because this isn't the

00:11:35,970 --> 00:11:41,250
full log intestacy so we have this

00:11:39,360 --> 00:11:43,920
render component still and if we try to

00:11:41,250 --> 00:11:46,850
render our login page just by itself and

00:11:43,920 --> 00:11:46,850
I'm gonna unskipable

00:11:51,200 --> 00:11:57,029
it says could not find client in the

00:11:54,360 --> 00:11:58,110
context of Apollo consumer and that has

00:11:57,029 --> 00:11:59,790
to do with the fact that the thing that

00:11:58,110 --> 00:12:01,950
I mentioned a minute ago is that at the

00:11:59,790 --> 00:12:03,570
top of your tree Apollo's query and

00:12:01,950 --> 00:12:05,430
mutation components are always looking

00:12:03,570 --> 00:12:07,380
for that Apollo provider and if you

00:12:05,430 --> 00:12:10,050
don't have it it's not you're not gonna

00:12:07,380 --> 00:12:12,450
have a good time you will get this so on

00:12:10,050 --> 00:12:14,329
this next test down you can see that I

00:12:12,450 --> 00:12:16,980
take this much provider that we have

00:12:14,329 --> 00:12:18,390
which mocks out the client and mocks out

00:12:16,980 --> 00:12:20,160
the cache so you don't have to manually

00:12:18,390 --> 00:12:21,720
do that stuff yourself and then you can

00:12:20,160 --> 00:12:23,339
also pass it an array of mocks which

00:12:21,720 --> 00:12:24,930
I'll explain in a second but for right

00:12:23,339 --> 00:12:25,980
now I'm not gonna worry about it I'm

00:12:24,930 --> 00:12:28,410
just trying to get this thing to render

00:12:25,980 --> 00:12:35,040
like I said so now if I save this and

00:12:28,410 --> 00:12:36,149
run this test and then we can check to

00:12:35,040 --> 00:12:39,860
make sure the login button actually

00:12:36,149 --> 00:12:41,880
shows up so this is a great and all but

00:12:39,860 --> 00:12:42,870
there's a little bit more because you

00:12:41,880 --> 00:12:45,480
know what happens if you click the

00:12:42,870 --> 00:12:47,370
button does it explode or does it

00:12:45,480 --> 00:12:47,760
actually log you in so let's check that

00:12:47,370 --> 00:12:49,740
out

00:12:47,760 --> 00:12:52,529
we have this much more involved test

00:12:49,740 --> 00:12:54,029
here login and that that mock provider

00:12:52,529 --> 00:12:55,620
logic that I had just then like where

00:12:54,029 --> 00:12:57,420
I'm actually taking mock provider and

00:12:55,620 --> 00:13:00,180
wrapping the component with it I I just

00:12:57,420 --> 00:13:03,180
I made a custom renderer in react test

00:13:00,180 --> 00:13:04,680
render or testing library and it's

00:13:03,180 --> 00:13:06,149
called read and render Apollo and that's

00:13:04,680 --> 00:13:08,699
all it's doing is this this login

00:13:06,149 --> 00:13:11,399
component here is the exact same test as

00:13:08,699 --> 00:13:13,410
the last our last test I showed you it's

00:13:11,399 --> 00:13:15,000
just wrapping it's just wrapping this

00:13:13,410 --> 00:13:16,980
login with a mock provider I just did

00:13:15,000 --> 00:13:17,820
that to save time considering you know

00:13:16,980 --> 00:13:19,649
if you're writing a hundred of these

00:13:17,820 --> 00:13:21,149
things or more than you don't want to

00:13:19,649 --> 00:13:22,740
have those two lines every single time

00:13:21,149 --> 00:13:24,329
because that gets really cumbersome

00:13:22,740 --> 00:13:25,709
really quick so

00:13:24,329 --> 00:13:27,689
you can see that I'm still like I'm

00:13:25,709 --> 00:13:28,860
still testing this if I if I were to

00:13:27,689 --> 00:13:30,629
break this then it would break these

00:13:28,860 --> 00:13:33,269
tests on the right but this is the same

00:13:30,629 --> 00:13:37,619
test so what happens if I want to click

00:13:33,269 --> 00:13:39,239
it well a couple of things so whenever I

00:13:37,619 --> 00:13:42,029
click it it's gonna fire off a mutation

00:13:39,239 --> 00:13:43,649
I showed you the MOX array a second ago

00:13:42,029 --> 00:13:46,170
that you can pass to the mock provider

00:13:43,649 --> 00:13:49,259
and this is actually this is actually

00:13:46,170 --> 00:13:52,019
really powerful so what the marks do is

00:13:49,259 --> 00:13:53,970
they act as a matcher so anytime that

00:13:52,019 --> 00:13:56,369
this request here gets made in other

00:13:53,970 --> 00:13:59,489
words anytime this login user mutation

00:13:56,369 --> 00:14:02,279
gets fired with these variables a great

00:13:59,489 --> 00:14:03,809
you know this just can return this email

00:14:02,279 --> 00:14:05,790
the mocked Apollo client instance is

00:14:03,809 --> 00:14:07,499
gonna return it and your component is

00:14:05,790 --> 00:14:09,749
gonna see this response you know the

00:14:07,499 --> 00:14:11,879
data with login ABC this is a login

00:14:09,749 --> 00:14:14,639
token it's a horrible login token but

00:14:11,879 --> 00:14:16,860
you know nonetheless so yeah then we get

00:14:14,639 --> 00:14:19,649
down here to render Apollo we render our

00:14:16,860 --> 00:14:22,230
login component and we pass it our mocks

00:14:19,649 --> 00:14:23,519
and we also are gonna pass it a instance

00:14:22,230 --> 00:14:26,429
of the cache that we just instantiate it

00:14:23,519 --> 00:14:27,540
right here just just so we can check it

00:14:26,429 --> 00:14:28,980
later and make sure that the cache

00:14:27,540 --> 00:14:32,610
updates that I pointed to actually

00:14:28,980 --> 00:14:33,959
happen so yeah then fire event is

00:14:32,610 --> 00:14:35,699
something that comes from react testing

00:14:33,959 --> 00:14:38,249
library so I can fire a change event on

00:14:35,699 --> 00:14:41,069
the login input type in our super secure

00:14:38,249 --> 00:14:43,350
email no password because security is

00:14:41,069 --> 00:14:46,829
unimportant at least for this Abdul

00:14:43,350 --> 00:14:49,379
quote and then I'm gonna click the login

00:14:46,829 --> 00:14:50,579
button and what's gonna happen then is

00:14:49,379 --> 00:14:52,379
the components going to enter the

00:14:50,579 --> 00:14:54,119
loading State so this mock provider it

00:14:52,379 --> 00:14:55,499
actually does trigger the loading

00:14:54,119 --> 00:14:57,299
stating your components so you can test

00:14:55,499 --> 00:14:58,769
that and then what I'm gonna do is I'm

00:14:57,299 --> 00:15:01,739
actually just gonna wait until the login

00:14:58,769 --> 00:15:03,269
button shows back up now in the app like

00:15:01,739 --> 00:15:04,169
the login button button wouldn't show

00:15:03,269 --> 00:15:05,579
back up because you're getting

00:15:04,169 --> 00:15:07,319
redirected back to other parts of the

00:15:05,579 --> 00:15:09,269
app but when I'm talking about this

00:15:07,319 --> 00:15:10,589
component find this mutation unless I

00:15:09,269 --> 00:15:11,639
were to redirect this button would just

00:15:10,589 --> 00:15:13,019
show straight back up so I'm just

00:15:11,639 --> 00:15:14,910
waiting for the button to show back up

00:15:13,019 --> 00:15:16,829
to know that my mutation finished and

00:15:14,910 --> 00:15:18,209
then afterwards I'm taking that cache

00:15:16,829 --> 00:15:19,829
instance that I had above and I'm

00:15:18,209 --> 00:15:22,259
running a query against it just to see

00:15:19,829 --> 00:15:24,929
if my is logged in was updated and if I

00:15:22,259 --> 00:15:27,209
change this to like his logins then this

00:15:24,929 --> 00:15:29,610
would fail and it would say yeah

00:15:27,209 --> 00:15:32,069
is logged in is not on the type object

00:15:29,610 --> 00:15:34,259
of Reuters not on route query another

00:15:32,069 --> 00:15:37,649
was saying this isn't in the cache what

00:15:34,259 --> 00:15:40,170
are you doing but if I do test it I

00:15:37,649 --> 00:15:42,990
pull off the is logged-in object from

00:15:40,170 --> 00:15:44,220
the response of this query and I can

00:15:42,990 --> 00:15:47,369
check to make sure that is true so in

00:15:44,220 --> 00:15:48,569
other words the login worked so that is

00:15:47,369 --> 00:15:50,730
just a really quick run-through there

00:15:48,569 --> 00:15:51,869
you know quite a few more examples of

00:15:50,730 --> 00:15:54,029
this in the project that you can go look

00:15:51,869 --> 00:15:55,829
at yourself but for the sake of right

00:15:54,029 --> 00:15:58,019
now that's all we're gonna look at and

00:15:55,829 --> 00:16:00,269
please give me a moment while I unmerry

00:15:58,019 --> 00:16:06,149
my displays this might be might not work

00:16:00,269 --> 00:16:08,689
very well where did it go yeah there's

00:16:06,149 --> 00:16:13,079
Google Chrome come back thank you

00:16:08,689 --> 00:16:14,220
alright now on to testing servers this

00:16:13,079 --> 00:16:15,480
is what I'm actually really excited

00:16:14,220 --> 00:16:17,309
about because we haven't written an

00:16:15,480 --> 00:16:19,709
article about this one recently I

00:16:17,309 --> 00:16:21,749
actually wrote the the testing Apollo or

00:16:19,709 --> 00:16:23,759
react Apollo has query mutation

00:16:21,749 --> 00:16:25,019
components a couple months ago so these

00:16:23,759 --> 00:16:26,339
are things that we've already gotten

00:16:25,019 --> 00:16:27,089
feedback on already talked about it

00:16:26,339 --> 00:16:28,649
publicly

00:16:27,089 --> 00:16:30,480
whereas testing surface is something

00:16:28,649 --> 00:16:33,869
that everybody kind of has their own

00:16:30,480 --> 00:16:35,399
idea for right now especially like

00:16:33,869 --> 00:16:36,899
static typing is one thing that people

00:16:35,399 --> 00:16:38,939
would generally say it's like yeah this

00:16:36,899 --> 00:16:41,100
is a really easy thing to do right I

00:16:38,939 --> 00:16:42,389
mean you have your static types you know

00:16:41,100 --> 00:16:45,149
what your resolver is gonna be returning

00:16:42,389 --> 00:16:47,249
right but then it gets more complicated

00:16:45,149 --> 00:16:49,559
in that type generation for resolvers

00:16:47,249 --> 00:16:51,420
especially isn't that straightforward at

00:16:49,559 --> 00:16:52,800
least not to do automatically you can

00:16:51,420 --> 00:16:54,179
definitely type your resolvers but the

00:16:52,800 --> 00:16:56,069
problem with typing them automatically

00:16:54,179 --> 00:16:58,889
is that resolvers aren't required to

00:16:56,069 --> 00:17:00,809
return anything even recognizable to the

00:16:58,889 --> 00:17:02,879
user until the very leaf so like the

00:17:00,809 --> 00:17:04,230
very end of the execution is when

00:17:02,879 --> 00:17:06,179
resolvers are actually expected to

00:17:04,230 --> 00:17:07,829
return something that's like consistent

00:17:06,179 --> 00:17:09,630
with the schema or solvers along the way

00:17:07,829 --> 00:17:12,120
don't have to return anything they can

00:17:09,630 --> 00:17:13,740
return anything and it's really hard to

00:17:12,120 --> 00:17:15,809
generate types automatically for that

00:17:13,740 --> 00:17:18,179
unless you enforce some restrictions

00:17:15,809 --> 00:17:20,189
saying like an object type has to return

00:17:18,179 --> 00:17:22,679
a javascript object in the shape of the

00:17:20,189 --> 00:17:25,770
type that it's returning which you can

00:17:22,679 --> 00:17:27,299
do like that that's fine but default

00:17:25,770 --> 00:17:29,429
resolvers also make this hard like if

00:17:27,299 --> 00:17:30,750
you were to return that from a parent

00:17:29,429 --> 00:17:33,240
and you just return the correct shape

00:17:30,750 --> 00:17:35,700
and not provide those child resolvers

00:17:33,240 --> 00:17:37,080
period then you don't you don't have to

00:17:35,700 --> 00:17:38,399
type them because they don't exist but

00:17:37,080 --> 00:17:40,140
you do have to type the parent correctly

00:17:38,399 --> 00:17:41,429
so you have this weird world where you

00:17:40,140 --> 00:17:45,240
can kind of do anything you want with

00:17:41,429 --> 00:17:46,770
the resolvers of next unit testing is

00:17:45,240 --> 00:17:50,039
actually something that's very enjoyable

00:17:46,770 --> 00:17:50,490
it it can really leverage graph QL as

00:17:50,039 --> 00:17:53,340
dependency

00:17:50,490 --> 00:17:54,960
Injection very well and the reason and

00:17:53,340 --> 00:17:57,270
I'll talk about like what this is in a

00:17:54,960 --> 00:17:58,890
second why this is important but at the

00:17:57,270 --> 00:18:00,650
end of the day testing resolvers and

00:17:58,890 --> 00:18:02,580
data sources are pretty simple because

00:18:00,650 --> 00:18:04,559
resolvers are dysfunctions and data

00:18:02,580 --> 00:18:06,540
sources are just classes so if you've

00:18:04,559 --> 00:18:08,880
ever tested a javascript function you

00:18:06,540 --> 00:18:10,200
can test resolvers as long as you as

00:18:08,880 --> 00:18:13,650
long as you were using dependency

00:18:10,200 --> 00:18:15,150
injection wisely the the next part of

00:18:13,650 --> 00:18:17,370
this which is something that's new that

00:18:15,150 --> 00:18:18,630
we've actually been working on i've been

00:18:17,370 --> 00:18:21,030
working on for quite a while trying to

00:18:18,630 --> 00:18:23,100
figure out how people do this right now

00:18:21,030 --> 00:18:25,830
and how they want to do this is

00:18:23,100 --> 00:18:27,300
integration testing and what i mean by

00:18:25,830 --> 00:18:30,050
integration testing is testing the

00:18:27,300 --> 00:18:33,510
execution of an operation not testing

00:18:30,050 --> 00:18:35,820
expresses like HTTP semantics logic or

00:18:33,510 --> 00:18:37,740
anything like that I'm saying give it an

00:18:35,820 --> 00:18:39,540
operation does it run through all the

00:18:37,740 --> 00:18:40,950
resolvers properly does one resolve or

00:18:39,540 --> 00:18:42,600
pass the correct information to the next

00:18:40,950 --> 00:18:44,640
one all the way down the chain and is

00:18:42,600 --> 00:18:47,370
the response somewhat regular like we

00:18:44,640 --> 00:18:48,360
expect to see so a tool that I'll show

00:18:47,370 --> 00:18:49,620
in a second that we've actually built

00:18:48,360 --> 00:18:51,870
for this is called a policy server

00:18:49,620 --> 00:18:53,580
testing you can install it just like you

00:18:51,870 --> 00:18:55,410
install any other Apollo server instance

00:18:53,580 --> 00:18:59,130
or integration like a Paula server

00:18:55,410 --> 00:19:01,140
express happy KOA anything you want so

00:18:59,130 --> 00:19:03,660
I'll show that in a second but before I

00:19:01,140 --> 00:19:05,730
forget and in testing is also very

00:19:03,660 --> 00:19:07,590
possible with this this actually does

00:19:05,730 --> 00:19:10,050
check the HTTP semantics and all the fun

00:19:07,590 --> 00:19:12,059
that comes with that you have to provide

00:19:10,050 --> 00:19:13,400
actual HTTP requests do it and you

00:19:12,059 --> 00:19:15,660
actually have to start up a real server

00:19:13,400 --> 00:19:18,929
so I'm gonna show how to do all those

00:19:15,660 --> 00:19:19,350
things you know easy easy easy said as

00:19:18,929 --> 00:19:21,420
done

00:19:19,350 --> 00:19:25,050
let's see however here bring up my

00:19:21,420 --> 00:19:26,700
terminal once again and cool so this

00:19:25,050 --> 00:19:28,740
isn't the same project this this

00:19:26,700 --> 00:19:31,140
tutorial is all in the same project but

00:19:28,740 --> 00:19:32,850
I'm gonna show you how to test this this

00:19:31,140 --> 00:19:35,220
login mutation that we just ran the

00:19:32,850 --> 00:19:36,990
client side so if I actually open up

00:19:35,220 --> 00:19:38,970
this resolver real quick so you can see

00:19:36,990 --> 00:19:41,100
what it looks like it's it's a realist

00:19:38,970 --> 00:19:42,660
it's a relatively short resolver what is

00:19:41,100 --> 00:19:45,120
doing is it's taking an email argument

00:19:42,660 --> 00:19:47,220
and it's taking a context object which

00:19:45,120 --> 00:19:48,300
has data sources on it and this is what

00:19:47,220 --> 00:19:50,580
I was talking about with dependency

00:19:48,300 --> 00:19:52,679
injection is that other than buffer at

00:19:50,580 --> 00:19:54,990
least which is which is a node thing

00:19:52,679 --> 00:19:57,720
other than that this function this

00:19:54,990 --> 00:19:59,940
resolver only uses things that are

00:19:57,720 --> 00:20:01,200
passed to it as arguments directly same

00:19:59,940 --> 00:20:02,910
thing with every other resolver in this

00:20:01,200 --> 00:20:04,200
file we're not actually importing

00:20:02,910 --> 00:20:05,610
anything at the top of this file

00:20:04,200 --> 00:20:07,289
and using it inside the resolvers

00:20:05,610 --> 00:20:09,120
because that makes it a little bit

00:20:07,289 --> 00:20:10,110
harder to mock and most of the time you

00:20:09,120 --> 00:20:11,909
can pass these things through his

00:20:10,110 --> 00:20:13,789
arguments whether it be on the context

00:20:11,909 --> 00:20:16,970
or actual arguments to a graph QL

00:20:13,789 --> 00:20:20,010
operation so yeah here is just you know

00:20:16,970 --> 00:20:21,870
looking up a user from the user API data

00:20:20,010 --> 00:20:23,399
source and if the user is there then

00:20:21,870 --> 00:20:26,070
it's returning a token back to the user

00:20:23,399 --> 00:20:28,409
so they can make authenticated requests

00:20:26,070 --> 00:20:31,380
just let me get rid that so back to this

00:20:28,409 --> 00:20:33,600
test so this test is just checking to

00:20:31,380 --> 00:20:35,669
see if it returns a base64 encoded email

00:20:33,600 --> 00:20:38,309
it's successful because you know these

00:20:35,669 --> 00:20:40,500
tokens are very secure so what we're

00:20:38,309 --> 00:20:43,260
doing here is we have these mocks at the

00:20:40,500 --> 00:20:44,820
top of the file and I'm just tried these

00:20:43,260 --> 00:20:46,980
are all just function mocks and I'm just

00:20:44,820 --> 00:20:49,409
mocking the return value of this finder

00:20:46,980 --> 00:20:51,840
create user which exists on data sources

00:20:49,409 --> 00:20:52,980
user API dot finder create user it's the

00:20:51,840 --> 00:20:54,690
same function that the resolver was

00:20:52,980 --> 00:20:56,850
calling I'm mocking this to just return

00:20:54,690 --> 00:20:59,100
true once just to simulate hey we looked

00:20:56,850 --> 00:21:01,019
up a user and they exist I promise and

00:20:59,100 --> 00:21:03,779
then we're actually just running the

00:21:01,019 --> 00:21:05,159
resolver so I just imported the resolve

00:21:03,779 --> 00:21:06,690
the entire resolver map from the other

00:21:05,159 --> 00:21:09,059
file and I'm just calling resolvers

00:21:06,690 --> 00:21:10,409
mutation login and I'm passing it

00:21:09,059 --> 00:21:12,090
nothing for the parent type because it

00:21:10,409 --> 00:21:14,190
doesn't need one I'm passing in an email

00:21:12,090 --> 00:21:15,750
super secure email and I'm passing it

00:21:14,190 --> 00:21:17,549
our mock context which includes this

00:21:15,750 --> 00:21:18,899
data source and which includes this mock

00:21:17,549 --> 00:21:20,730
and then all I'm doing is I'm just

00:21:18,899 --> 00:21:23,370
checking to make sure that the result of

00:21:20,730 --> 00:21:25,590
that resolver is the correct thing it's

00:21:23,370 --> 00:21:26,850
that simple and I'm also doing it like

00:21:25,590 --> 00:21:28,080
an extra step here and I'm saying was

00:21:26,850 --> 00:21:29,070
the data source actually call with the

00:21:28,080 --> 00:21:31,440
correct function or the correct

00:21:29,070 --> 00:21:32,880
arguments you don't have to do that I do

00:21:31,440 --> 00:21:35,929
that just because I like testing and

00:21:32,880 --> 00:21:38,940
that's just who I am so love it or not

00:21:35,929 --> 00:21:41,730
hop over to a data source very similar

00:21:38,940 --> 00:21:44,820
idea this data source is a rest data

00:21:41,730 --> 00:21:49,019
source instance it's making requests you

00:21:44,820 --> 00:21:51,330
know straight to a SpaceX API so for

00:21:49,019 --> 00:21:53,519
example for this launch API dot get all

00:21:51,330 --> 00:21:56,159
launches it looks kind of similar I'm

00:21:53,519 --> 00:21:59,070
taking I'm mocking the actual underlying

00:21:56,159 --> 00:22:00,299
get function on that data source because

00:21:59,070 --> 00:22:02,519
I have the instance at the data source

00:22:00,299 --> 00:22:04,380
so I can just say data source dot get

00:22:02,519 --> 00:22:07,200
and I can mock that I can override it

00:22:04,380 --> 00:22:08,519
just for the sake of this test and what

00:22:07,200 --> 00:22:10,500
that allows me to do is it allows me to

00:22:08,519 --> 00:22:12,120
still test to make sure that I'm

00:22:10,500 --> 00:22:13,559
handling a response properly it still

00:22:12,120 --> 00:22:14,620
allows me to make sure I'm transforming

00:22:13,559 --> 00:22:17,890
that you know that

00:22:14,620 --> 00:22:19,720
rest api request properly and then i can

00:22:17,890 --> 00:22:21,700
just call the data sources method and

00:22:19,720 --> 00:22:23,260
then i can make sure that it equals our

00:22:21,700 --> 00:22:25,539
formatted mock launched like it's

00:22:23,260 --> 00:22:27,460
supposed to this this is a really good

00:22:25,539 --> 00:22:30,279
pattern and it works pretty well i've

00:22:27,460 --> 00:22:31,929
i've done this quite a good bit and same

00:22:30,279 --> 00:22:33,970
thing i can then call make sure that the

00:22:31,929 --> 00:22:36,130
underlying i get the you know the fetch

00:22:33,970 --> 00:22:40,360
the fetch implementation is being called

00:22:36,130 --> 00:22:41,740
with the proper URL this works well but

00:22:40,360 --> 00:22:44,679
there's another step that we have to go

00:22:41,740 --> 00:22:47,110
into I promised integration test so here

00:22:44,679 --> 00:22:50,500
we are this is actually something that's

00:22:47,110 --> 00:22:53,049
kind of fun I I don't this tool and with

00:22:50,500 --> 00:22:55,559
the help of people and it's it's really

00:22:53,049 --> 00:22:57,940
fun to use personally so I'm gonna do it

00:22:55,559 --> 00:22:59,110
ignore this knock that doesn't it's not

00:22:57,940 --> 00:23:03,309
supposed to exist because we're not

00:22:59,110 --> 00:23:07,779
actually mocking the HTTP cost at all so

00:23:03,309 --> 00:23:10,570
let's take a look at this where did that

00:23:07,779 --> 00:23:12,850
go I'm not gonna do this first row

00:23:10,570 --> 00:23:14,440
because it's really commented you can go

00:23:12,850 --> 00:23:17,049
look at this one laters the integration

00:23:14,440 --> 00:23:18,399
test file at the root of the repo so

00:23:17,049 --> 00:23:21,640
yeah let's look at this this is saying

00:23:18,399 --> 00:23:23,799
fetch is a single launch and what this

00:23:21,640 --> 00:23:25,659
is doing is a couple of things first off

00:23:23,799 --> 00:23:27,399
this function here construct test server

00:23:25,659 --> 00:23:29,020
this isn't part of the Apollo server

00:23:27,399 --> 00:23:31,210
testing this is just a function that I

00:23:29,020 --> 00:23:34,260
wrote I'll actually show it to you it's

00:23:31,210 --> 00:23:36,460
Oh Mike in this area here we are

00:23:34,260 --> 00:23:39,340
construct test server all it's doing is

00:23:36,460 --> 00:23:41,289
it's taking our user API our datasource

00:23:39,340 --> 00:23:41,799
it's taking our launch api or other data

00:23:41,289 --> 00:23:43,960
source

00:23:41,799 --> 00:23:46,870
it's instantiating them and just passing

00:23:43,960 --> 00:23:49,590
them to a you know a class instantiation

00:23:46,870 --> 00:23:51,760
of a new apollo server this is just if

00:23:49,590 --> 00:23:55,450
this is just to make sure that we're not

00:23:51,760 --> 00:23:57,760
having to use like our our our

00:23:55,450 --> 00:23:59,529
production Apollo server class instance

00:23:57,760 --> 00:24:01,210
cuz usually an integration test that's

00:23:59,529 --> 00:24:03,940
not gonna be feasible we want to mock

00:24:01,210 --> 00:24:05,470
some things so we're yeah we're

00:24:03,940 --> 00:24:07,570
reinstating a new instance of Apollo

00:24:05,470 --> 00:24:09,250
server we're passing it our our

00:24:07,570 --> 00:24:12,399
production type deaths our production

00:24:09,250 --> 00:24:13,779
resolvers we're passing it a context

00:24:12,399 --> 00:24:15,909
function that we're either saying

00:24:13,779 --> 00:24:17,919
default context is like yeah we want to

00:24:15,909 --> 00:24:20,480
use the server's actual context function

00:24:17,919 --> 00:24:22,790
otherwise we just want to use

00:24:20,480 --> 00:24:25,160
and an overwritten one that we can write

00:24:22,790 --> 00:24:26,660
and then data sources just as if you

00:24:25,160 --> 00:24:28,250
were in San Shi a ting an actual policy

00:24:26,660 --> 00:24:30,860
server class we're just passing some

00:24:28,250 --> 00:24:32,419
data sources along so that's what

00:24:30,860 --> 00:24:33,710
construct test server does you don't

00:24:32,419 --> 00:24:34,940
have to have a function for that I just

00:24:33,710 --> 00:24:38,020
didn't want to write this multiple times

00:24:34,940 --> 00:24:40,549
so if I go back down to my test

00:24:38,020 --> 00:24:41,870
construct test server it returns the

00:24:40,549 --> 00:24:43,340
server so if you said a new Apollo

00:24:41,870 --> 00:24:45,350
server and whatever the return of that

00:24:43,340 --> 00:24:47,450
is that's what this is and it returns

00:24:45,350 --> 00:24:49,160
our two data sources and the reason I

00:24:47,450 --> 00:24:50,780
did it like this is because I wanted to

00:24:49,160 --> 00:24:52,160
actually access those data sources so I

00:24:50,780 --> 00:24:54,500
could do the same thing a mock those

00:24:52,160 --> 00:24:58,010
underlying bottom level bottom of the

00:24:54,500 --> 00:25:01,669
stack get calls I can mock those actual

00:24:58,010 --> 00:25:03,230
in this case those sequal eyes find all

00:25:01,669 --> 00:25:04,850
mock you know find all functions I can

00:25:03,230 --> 00:25:06,740
actually mock those if I want to so I

00:25:04,850 --> 00:25:08,630
don't have to you know actually spin up

00:25:06,740 --> 00:25:10,730
an in-memory instance of sequel I'd or

00:25:08,630 --> 00:25:12,110
you know if you're using something you

00:25:10,730 --> 00:25:13,610
know a little heavier like Postgres you

00:25:12,110 --> 00:25:15,380
don't have to spin up and instance a

00:25:13,610 --> 00:25:17,360
Postgres for this I'm just mocking that

00:25:15,380 --> 00:25:19,580
but leaving the rest in stock but

00:25:17,360 --> 00:25:21,350
leaving the rest in place so leaving all

00:25:19,580 --> 00:25:24,110
the data transform logic leaving

00:25:21,350 --> 00:25:27,520
everything else in place and then here

00:25:24,110 --> 00:25:29,900
is the part that we exported from the

00:25:27,520 --> 00:25:32,510
Apollo server testing library it's this

00:25:29,900 --> 00:25:36,830
create test server so what does this do

00:25:32,510 --> 00:25:38,480
let's let's take a look great test

00:25:36,830 --> 00:25:42,140
server no wait

00:25:38,480 --> 00:25:45,320
yeah this thing this thing keep going

00:25:42,140 --> 00:25:46,250
yeah so this is a little this is a

00:25:45,320 --> 00:25:49,040
little more complicated

00:25:46,250 --> 00:25:50,690
essentially it exports the return of

00:25:49,040 --> 00:25:53,240
this is two things it's a query and a

00:25:50,690 --> 00:25:55,100
mutate function and these kind of look

00:25:53,240 --> 00:25:58,580
similar to Apollo client if you've ever

00:25:55,100 --> 00:26:01,580
used like the client that I don't like

00:25:58,580 --> 00:26:03,710
that client dot whatever like client

00:26:01,580 --> 00:26:04,940
query and you can pass it a query and

00:26:03,710 --> 00:26:07,340
then you know whatever your query name

00:26:04,940 --> 00:26:08,780
is this is what that looks like it also

00:26:07,340 --> 00:26:10,010
allows you to pass variables along which

00:26:08,780 --> 00:26:11,270
you will see in just a second I hope I

00:26:10,010 --> 00:26:13,610
didn't break anything by editing that

00:26:11,270 --> 00:26:17,390
file but we'll see cuz live coding is

00:26:13,610 --> 00:26:19,250
great let's get back down to it yeah so

00:26:17,390 --> 00:26:20,780
I'm getting query from that create test

00:26:19,250 --> 00:26:22,880
client and what this actually does is

00:26:20,780 --> 00:26:25,130
some of the things talked about this

00:26:22,880 --> 00:26:27,770
morning with Apollo server 2.2 is a new

00:26:25,130 --> 00:26:28,880
request pipeline and Martin wall are

00:26:27,770 --> 00:26:32,150
gonna be talking more about that

00:26:28,880 --> 00:26:33,320
tomorrow but this is a new execution

00:26:32,150 --> 00:26:33,770
model for Apollo server and how it

00:26:33,320 --> 00:26:36,080
actually

00:26:33,770 --> 00:26:38,150
runs queries so we actually added in a

00:26:36,080 --> 00:26:39,940
utility if you saw it at the top of that

00:26:38,150 --> 00:26:42,740
file I don't think it's still open now

00:26:39,940 --> 00:26:44,450
called execute operation to the base

00:26:42,740 --> 00:26:46,430
class of Apollo server so you can

00:26:44,450 --> 00:26:48,590
actually call queries directly from the

00:26:46,430 --> 00:26:51,020
Apollo server class so that's what this

00:26:48,590 --> 00:26:52,520
is doing is it's running an operation

00:26:51,020 --> 00:26:54,800
against the class running everything

00:26:52,520 --> 00:26:57,320
through the real request pipeline giving

00:26:54,800 --> 00:26:59,510
you exactly what you should get from

00:26:57,320 --> 00:27:01,850
Apollo server so then if I take this

00:26:59,510 --> 00:27:03,380
query and I run an actual query against

00:27:01,850 --> 00:27:06,980
it I'll get launched query for this

00:27:03,380 --> 00:27:09,020
example is just up above here query

00:27:06,980 --> 00:27:11,600
launch again you know it gets passing

00:27:09,020 --> 00:27:13,010
variables through has an ID it has it is

00:27:11,600 --> 00:27:15,650
booked which is actually looking up from

00:27:13,010 --> 00:27:17,780
the sequel ID database we have a rocket

00:27:15,650 --> 00:27:20,060
you know it's it's not a trivial query

00:27:17,780 --> 00:27:22,940
it does a couple things from multiple

00:27:20,060 --> 00:27:26,240
different data sources and if I where'd

00:27:22,940 --> 00:27:27,350
that go yeah if I run this test it'll

00:27:26,240 --> 00:27:28,460
actually write it a snapshot because I

00:27:27,350 --> 00:27:30,140
didn't feel like writing these tests in

00:27:28,460 --> 00:27:33,860
line but if I go look at it

00:27:30,140 --> 00:27:36,020
snapshots integration book trips

00:27:33,860 --> 00:27:37,970
fetches list of launches I wrote a lot

00:27:36,020 --> 00:27:38,960
of these because they're fun single

00:27:37,970 --> 00:27:41,960
launch this is what it actually returns

00:27:38,960 --> 00:27:44,750
it returns data and data is an object

00:27:41,960 --> 00:27:45,920
that has launch ID is booked true on it

00:27:44,750 --> 00:27:48,050
because this is actually something that

00:27:45,920 --> 00:27:51,020
was written to the database it returns

00:27:48,050 --> 00:27:52,850
the mission with the Falcon the Falcon

00:27:51,020 --> 00:27:54,680
satellite and it returns the rocket so

00:27:52,850 --> 00:27:56,090
this is this is as good as you're gonna

00:27:54,680 --> 00:27:57,770
get with integration testing it hooks

00:27:56,090 --> 00:27:59,450
directly into a polish server it gives

00:27:57,770 --> 00:28:02,090
you exactly what you want with the

00:27:59,450 --> 00:28:03,860
exclusion of the HTTP semantics and the

00:28:02,090 --> 00:28:05,540
actual rest lookups through the actual

00:28:03,860 --> 00:28:08,360
database looks up lookups this is

00:28:05,540 --> 00:28:09,800
everything in the middle so what if you

00:28:08,360 --> 00:28:12,410
wanted to do everything else what if you

00:28:09,800 --> 00:28:14,530
wanted to test with real queries this

00:28:12,410 --> 00:28:16,310
isn't part of a public server testing

00:28:14,530 --> 00:28:17,630
mostly because there are a lot of a

00:28:16,310 --> 00:28:19,190
public server integrations and I didn't

00:28:17,630 --> 00:28:20,660
want to write one and maintain one for

00:28:19,190 --> 00:28:21,740
every single one of these because

00:28:20,660 --> 00:28:24,260
there's a little bit different for every

00:28:21,740 --> 00:28:27,290
single one but I have this start test

00:28:24,260 --> 00:28:29,210
server function that I wrote and you can

00:28:27,290 --> 00:28:30,950
do the same thing this it's not a lot of

00:28:29,210 --> 00:28:33,230
code so if you want it to copy and paste

00:28:30,950 --> 00:28:34,340
it not that bad I left in the code here

00:28:33,230 --> 00:28:36,890
if you're using Apollo server express

00:28:34,340 --> 00:28:38,720
the top lines that you would do but for

00:28:36,890 --> 00:28:40,670
example what this does is it takes an

00:28:38,720 --> 00:28:42,140
instance of Apollo server

00:28:40,670 --> 00:28:43,340
this can be your production instance if

00:28:42,140 --> 00:28:45,260
you want especially if you have a

00:28:43,340 --> 00:28:46,520
staging environment set up with your

00:28:45,260 --> 00:28:47,870
databases with your

00:28:46,520 --> 00:28:49,400
services if you have a staging

00:28:47,870 --> 00:28:53,300
environment this is all that you need

00:28:49,400 --> 00:28:55,130
and what it's doing is it's starting the

00:28:53,300 --> 00:28:57,680
server on a dynamic port so it picks a

00:28:55,130 --> 00:29:00,260
port and it creates a new Apollo HTTP

00:28:57,680 --> 00:29:02,000
link and then it actually calls the

00:29:00,260 --> 00:29:03,830
execute function with that link with

00:29:02,000 --> 00:29:06,350
your query and variables so this is

00:29:03,830 --> 00:29:08,510
testing everything that there is to test

00:29:06,350 --> 00:29:10,910
this is testing the HTTP semantics you

00:29:08,510 --> 00:29:12,590
can pass it headers this is testing the

00:29:10,910 --> 00:29:14,060
entire execution opera execution

00:29:12,590 --> 00:29:16,460
pipeline that we showed in the last

00:29:14,060 --> 00:29:18,920
integration test this is testing the

00:29:16,460 --> 00:29:21,460
actual underlying fetch calls this is

00:29:18,920 --> 00:29:23,600
testing everything that you can test and

00:29:21,460 --> 00:29:25,430
these tests are actually even shorter

00:29:23,600 --> 00:29:27,830
than last one like get list of launches

00:29:25,430 --> 00:29:29,540
all I'm doing is I'm calling this export

00:29:27,830 --> 00:29:31,640
of graph QL function from that with a

00:29:29,540 --> 00:29:34,160
query with some variables and then I'm

00:29:31,640 --> 00:29:35,650
snapshotting the results and I'll show

00:29:34,160 --> 00:29:38,120
you those to prove that they exist

00:29:35,650 --> 00:29:40,250
there's a list of launches I forced it

00:29:38,120 --> 00:29:41,450
page size 1 so it only you know showed

00:29:40,250 --> 00:29:43,550
me once I'll have a huge snapshot just

00:29:41,450 --> 00:29:46,040
to show on stage but this is what it is

00:29:43,550 --> 00:29:49,190
it shows you a launches array and it

00:29:46,040 --> 00:29:50,630
shows you individual launches with

00:29:49,190 --> 00:29:52,610
missions mission patches and names

00:29:50,630 --> 00:29:57,050
because that's all we asked for so let

00:29:52,610 --> 00:30:00,740
me hop on back to my slides if I can let

00:29:57,050 --> 00:30:06,830
me see here where'd it go here we go on

00:30:00,740 --> 00:30:10,310
mirror displays and there we go

00:30:06,830 --> 00:30:14,090
back to that and back to this delightful

00:30:10,310 --> 00:30:15,590
ok my parting words is I want to say

00:30:14,090 --> 00:30:17,390
that testing is essential especially for

00:30:15,590 --> 00:30:19,820
large companies especially for large

00:30:17,390 --> 00:30:21,380
projects testing is essential so it

00:30:19,820 --> 00:30:22,940
should also be easy and it should also

00:30:21,380 --> 00:30:24,260
be effective and that's that's what I'm

00:30:22,940 --> 00:30:26,150
here for that's what we're here for

00:30:24,260 --> 00:30:27,560
we're here to make these tools we're

00:30:26,150 --> 00:30:29,810
here to maintain them we're here to make

00:30:27,560 --> 00:30:31,700
your lives a little bit easier so maybe

00:30:29,810 --> 00:30:33,430
you know a few more of you would raise

00:30:31,700 --> 00:30:36,560
your hands and say that you like testing

00:30:33,430 --> 00:30:37,970
so yeah that's that's all I have for you

00:30:36,560 --> 00:30:40,320
I hope you check out the projects and

00:30:37,970 --> 00:30:42,380
thank you so much for your time

00:30:40,320 --> 00:30:42,380
you

00:30:43,880 --> 00:30:46,289

YouTube URL: https://www.youtube.com/watch?v=loA3FwbVt90


