Title: query { lovesGraphQL(company: 'SurveyMonkey') { value } } (Louise Fox)
Publication date: 2018-12-05
Playlist: GraphQL Summit 2018
Description: 
	Talk from GraphQL Summit 2018 - Nov 8, 2018

Louise Fox, Engineering Manager at SurveyMonkey, leads the Web Platform team where her team is focused on Reimagining SurveyMonkey. Find out how SurveyMonkey’s use of GraphQL transformed its web architecture from a system tightly integrated/coupled with the backend to a scalable and flexible architecture while improving web and developer performance. From many to mono, we will explore SurveyMonkey’s journey of reimagining its frontend and how the use of GraphQL made that possible.

Learn more:  https://summit.graphql.com
Captions: 
	00:00:02,820 --> 00:00:08,469
hello thank you guys so much for

00:00:05,529 --> 00:00:10,090
attending this awesome summit and thank

00:00:08,469 --> 00:00:11,500
you Apollo for putting it on it's pretty

00:00:10,090 --> 00:00:13,480
incredible this is what makes the

00:00:11,500 --> 00:00:17,410
community so great all this incredible

00:00:13,480 --> 00:00:19,510
support and so first I just want to

00:00:17,410 --> 00:00:22,600
point out and that's my dog Atari he

00:00:19,510 --> 00:00:29,080
actually is that cute and then sweet

00:00:22,600 --> 00:00:32,379
looking all right so my name is Lewis

00:00:29,080 --> 00:00:34,480
Fox I'm an engineering manager at Survey

00:00:32,379 --> 00:00:37,239
Monkey and on the web platform team

00:00:34,480 --> 00:00:39,430
which focus on reimagining the front end

00:00:37,239 --> 00:00:42,250
at Survey Monkey as you can imagine I'm

00:00:39,430 --> 00:00:45,070
a fan of graph QL Apollo developer

00:00:42,250 --> 00:00:46,480
productivity and even more so I have a

00:00:45,070 --> 00:00:50,470
little special place in my heart for

00:00:46,480 --> 00:00:52,210
service workers and people say this

00:00:50,470 --> 00:00:55,050
picture is me and my natural element

00:00:52,210 --> 00:00:57,850
outside of working at Survey Monkey I

00:00:55,050 --> 00:01:00,130
like to build things so I work on my

00:00:57,850 --> 00:01:02,260
house and I've been living without

00:01:00,130 --> 00:01:04,600
normal power for about two years I have

00:01:02,260 --> 00:01:07,689
two 15 amp circuits of power my whole

00:01:04,600 --> 00:01:10,509
house one of course completely dedicated

00:01:07,689 --> 00:01:15,009
to the Internet so I guess that makes me

00:01:10,509 --> 00:01:16,929
a slight bit eccentric how many of you

00:01:15,009 --> 00:01:19,329
guys have used Survey Monkey to take a

00:01:16,929 --> 00:01:20,709
survey all right cool

00:01:19,329 --> 00:01:23,649
how many of you guys have actually

00:01:20,709 --> 00:01:25,929
created a survey on Survey Monkey okay a

00:01:23,649 --> 00:01:28,600
little bit less but still feel cool well

00:01:25,929 --> 00:01:32,490
we actually have 16 million active users

00:01:28,600 --> 00:01:35,649
and we to this date we've answered over

00:01:32,490 --> 00:01:39,130
47 billion questions so we have a lot of

00:01:35,649 --> 00:01:45,789
data around questions and a lot of good

00:01:39,130 --> 00:01:48,609
good ways to answer them so when I talk

00:01:45,789 --> 00:01:51,969
about Survey Monkey and graph QL I have

00:01:48,609 --> 00:01:53,889
exciting news and that is that we are on

00:01:51,969 --> 00:01:57,060
our journey to powering all of

00:01:53,889 --> 00:02:00,159
SurveyMonkey with graph QL Paulo and

00:01:57,060 --> 00:02:02,349
this is a really big shift for Survey

00:02:00,159 --> 00:02:03,969
Monkey and it's really allowing us to

00:02:02,349 --> 00:02:08,200
reimagine what our front-end can look

00:02:03,969 --> 00:02:12,350
like so I wanted to start this talk out

00:02:08,200 --> 00:02:14,580
with a percentage seventy-five percent

00:02:12,350 --> 00:02:16,590
so this is the number that we were

00:02:14,580 --> 00:02:19,650
actually able to reduce our payload on

00:02:16,590 --> 00:02:21,420
our test of Apollo graph to elf this is

00:02:19,650 --> 00:02:24,140
a huge number and you can just imagine

00:02:21,420 --> 00:02:26,460
how this will influence the front end

00:02:24,140 --> 00:02:31,470
but I think an even more important

00:02:26,460 --> 00:02:33,570
number is actually this one 43% and this

00:02:31,470 --> 00:02:35,750
is how much we were able to improve our

00:02:33,570 --> 00:02:39,870
time cell interaction on our test pages

00:02:35,750 --> 00:02:42,180
so this is drek directly affects our

00:02:39,870 --> 00:02:43,980
customers how they view Survey Monkey

00:02:42,180 --> 00:02:46,730
how they can interact and how fast they

00:02:43,980 --> 00:02:49,770
can actually get the answers they need

00:02:46,730 --> 00:02:52,890
but it also affects our competitiveness

00:02:49,770 --> 00:02:54,270
as a company think of how this how many

00:02:52,890 --> 00:02:56,190
more people will want to come to Sri

00:02:54,270 --> 00:03:00,690
Lanka if we have fast pages that can

00:02:56,190 --> 00:03:02,580
load data in like this graph QL really

00:03:00,690 --> 00:03:04,410
enables us to reimagine the front-end

00:03:02,580 --> 00:03:08,460
and think differently about how we fetch

00:03:04,410 --> 00:03:13,200
data and hydrate our components so I

00:03:08,460 --> 00:03:14,760
want to talk about 2019 all right but

00:03:13,200 --> 00:03:17,280
actually I really want to talk about

00:03:14,760 --> 00:03:18,510
2009 because that's an important year

00:03:17,280 --> 00:03:20,100
for Survey Monkey but it's also

00:03:18,510 --> 00:03:22,620
important year for other things too so

00:03:20,100 --> 00:03:24,390
what happened in 2009 just a quick

00:03:22,620 --> 00:03:26,970
reminder we elected our first

00:03:24,390 --> 00:03:28,080
african-american president Obama got a

00:03:26,970 --> 00:03:30,360
dog

00:03:28,080 --> 00:03:32,670
we had a jet land in the Hudson but

00:03:30,360 --> 00:03:35,220
miraculously everyone was safe and we

00:03:32,670 --> 00:03:38,430
discovered water on the moon so a lot of

00:03:35,220 --> 00:03:39,930
really cool things happen in 2009 well

00:03:38,430 --> 00:03:43,700
cool thing happened for Survey Monkey

00:03:39,930 --> 00:03:46,530
too and that we had a monolithic

00:03:43,700 --> 00:03:49,500
monolithic dotnet shop and we switched

00:03:46,530 --> 00:03:52,230
it over to Python microservices but we

00:03:49,500 --> 00:03:52,740
actually took it in a bit of a different

00:03:52,230 --> 00:03:57,630
direction

00:03:52,740 --> 00:04:00,240
we created micro webs so we have these

00:03:57,630 --> 00:04:05,760
individual teams where we had a service

00:04:00,240 --> 00:04:08,459
and we had a devoted micro web and this

00:04:05,760 --> 00:04:12,930
allowed for teams to work very rapidly

00:04:08,459 --> 00:04:16,200
and an autonomously and but it also

00:04:12,930 --> 00:04:19,920
created these little Cylons so what we

00:04:16,200 --> 00:04:21,750
saw happening over time is really that

00:04:19,920 --> 00:04:23,570
they weren't so isolated that they

00:04:21,750 --> 00:04:26,420
started calling other services

00:04:23,570 --> 00:04:28,850
and then our services start calling our

00:04:26,420 --> 00:04:31,100
services and this continued and

00:04:28,850 --> 00:04:34,010
continued until we had webs actually

00:04:31,100 --> 00:04:37,460
calling webs and then we got bigger as a

00:04:34,010 --> 00:04:40,730
company and we got even bigger and even

00:04:37,460 --> 00:04:44,300
bigger and finally we had 35 different

00:04:40,730 --> 00:04:45,830
deployables and we had six different

00:04:44,300 --> 00:04:48,650
frameworks and when I'm talking about

00:04:45,830 --> 00:04:52,220
frameworks I'm talking about jQuery I'm

00:04:48,650 --> 00:04:55,460
talking about our homegrown backbone

00:04:52,220 --> 00:04:57,800
that we made I'm talking about react Elm

00:04:55,460 --> 00:04:59,840
all sorts of things and oftentimes we

00:04:57,800 --> 00:05:02,990
were loading all of those on the same

00:04:59,840 --> 00:05:05,480
page so that's that's an interesting

00:05:02,990 --> 00:05:08,660
place to be and it really did affect our

00:05:05,480 --> 00:05:10,040
our customers our name is Survey Monkey

00:05:08,660 --> 00:05:12,440
so you would think we would have kind of

00:05:10,040 --> 00:05:15,260
one definition of water Survey maps but

00:05:12,440 --> 00:05:17,180
when we actually audited our webs we

00:05:15,260 --> 00:05:20,840
realized we had eight different versions

00:05:17,180 --> 00:05:23,540
of a model of a survey and so everyone

00:05:20,840 --> 00:05:26,120
was recreating what a survey was in

00:05:23,540 --> 00:05:28,430
regards to their particular web we also

00:05:26,120 --> 00:05:31,430
had four different locations of business

00:05:28,430 --> 00:05:34,010
logic and authorization so for a

00:05:31,430 --> 00:05:38,630
developer it wasn't clear where to put

00:05:34,010 --> 00:05:40,490
this data and it got to the point where

00:05:38,630 --> 00:05:44,450
it was affecting productivity it was

00:05:40,490 --> 00:05:46,940
affecting how fast we could get our

00:05:44,450 --> 00:05:49,400
products I was affecting the consistency

00:05:46,940 --> 00:05:52,880
of experience and it was affecting our

00:05:49,400 --> 00:05:54,350
happiness as developers it really was at

00:05:52,880 --> 00:05:56,240
that point where we were asked

00:05:54,350 --> 00:05:58,430
we were just maintaining we were just

00:05:56,240 --> 00:06:00,890
making sure that our our apps were in

00:05:58,430 --> 00:06:06,170
sync with each other and we were able to

00:06:00,890 --> 00:06:08,330
just get by so we knew we need to

00:06:06,170 --> 00:06:10,340
reimagine the front-end but we also

00:06:08,330 --> 00:06:12,470
realized that we needed to reimagine the

00:06:10,340 --> 00:06:14,210
backend as well and this is a tricky

00:06:12,470 --> 00:06:16,040
place because essentially we're

00:06:14,210 --> 00:06:19,780
reimagining SurveyMonkey from a

00:06:16,040 --> 00:06:22,880
technical perspective so what do you do

00:06:19,780 --> 00:06:25,460
well the first decision is to care as an

00:06:22,880 --> 00:06:28,820
engineer we cared we wanted to see

00:06:25,460 --> 00:06:30,070
SurveyMonkey be more technical and to

00:06:28,820 --> 00:06:32,330
have the latest and greatest

00:06:30,070 --> 00:06:33,550
technologies that actually influence the

00:06:32,330 --> 00:06:37,150
end users

00:06:33,550 --> 00:06:38,860
experience so though it led to the

00:06:37,150 --> 00:06:41,530
creation of the web platform team the

00:06:38,860 --> 00:06:43,750
team that was specifically designed to

00:06:41,530 --> 00:06:46,180
to help out with reimagining the

00:06:43,750 --> 00:06:47,920
front-end in particular so this was

00:06:46,180 --> 00:06:50,590
really exciting for Surrey when we

00:06:47,920 --> 00:06:52,600
finally got our chance and there was a

00:06:50,590 --> 00:06:55,240
mixture of emotions between being

00:06:52,600 --> 00:06:56,500
ecstatic and oh no we really have to

00:06:55,240 --> 00:06:58,750
think about this and come up with a

00:06:56,500 --> 00:07:02,890
solution that actually works for serving

00:06:58,750 --> 00:07:05,020
Lucky's needs so we set up with a couple

00:07:02,890 --> 00:07:08,080
of guiding principles what what the web

00:07:05,020 --> 00:07:10,810
platform would do first we're in charge

00:07:08,080 --> 00:07:12,010
of some innovation we're gonna look at

00:07:10,810 --> 00:07:14,650
the architecture we're gonna look at

00:07:12,010 --> 00:07:16,990
technologies frameworks how it works

00:07:14,650 --> 00:07:18,760
with CI CD what kind of standards we

00:07:16,990 --> 00:07:21,400
need to have in place as a company to

00:07:18,760 --> 00:07:24,280
work and then how do we operationalize

00:07:21,400 --> 00:07:26,560
this how do we set up observability

00:07:24,280 --> 00:07:28,960
performance and make consistent UX

00:07:26,560 --> 00:07:31,930
experience and then because we do have

00:07:28,960 --> 00:07:33,760
35 different webs how do we onboard

00:07:31,930 --> 00:07:37,150
everyone onto this and how do we form

00:07:33,760 --> 00:07:39,460
partnerships with these webs and these

00:07:37,150 --> 00:07:41,050
teams and create tools and guardrails

00:07:39,460 --> 00:07:44,430
that help them succeed while

00:07:41,050 --> 00:07:47,950
transitioning over to this new platform

00:07:44,430 --> 00:07:51,820
so as a reminder we had this Python

00:07:47,950 --> 00:07:55,420
based team setup of micro webs and micro

00:07:51,820 --> 00:07:58,120
services and a ton of them and we ended

00:07:55,420 --> 00:08:01,180
up landing on something like this and so

00:07:58,120 --> 00:08:04,690
a mono repo that had a consolidation set

00:08:01,180 --> 00:08:07,810
of webs a design system that was in

00:08:04,690 --> 00:08:09,340
charge of making sure we had Survey

00:08:07,810 --> 00:08:11,920
Monkey branded components that we could

00:08:09,340 --> 00:08:15,490
share throughout the webs and our key

00:08:11,920 --> 00:08:19,540
around this was the graph API now what

00:08:15,490 --> 00:08:21,370
this allowed us to do is to separate the

00:08:19,540 --> 00:08:25,630
backend from the front so essentially

00:08:21,370 --> 00:08:28,210
decouple those two and allow us to work

00:08:25,630 --> 00:08:31,180
in parallel both improving our

00:08:28,210 --> 00:08:33,040
architecture and infrastructure and this

00:08:31,180 --> 00:08:34,990
was really the key and I think the

00:08:33,040 --> 00:08:36,760
success of what we've had going on on

00:08:34,990 --> 00:08:38,350
the web platform is we're no longer

00:08:36,760 --> 00:08:40,570
dependent on the backend to be done

00:08:38,350 --> 00:08:43,930
first we can work in parallel as they

00:08:40,570 --> 00:08:47,430
improve we improve so that's a really

00:08:43,930 --> 00:08:47,430
exciting thing that we did

00:08:47,619 --> 00:08:52,699
so this mono repo right here and let me

00:08:51,559 --> 00:08:55,040
just tell you a little bit more about

00:08:52,699 --> 00:08:56,869
how we came up with this so we came from

00:08:55,040 --> 00:09:00,559
a standpoint of having all of these

00:08:56,869 --> 00:09:04,189
repos in various different locations and

00:09:00,559 --> 00:09:06,259
it was really hard to search for for-4

00:09:04,189 --> 00:09:09,439
code it was really hard to tell what

00:09:06,259 --> 00:09:10,519
other teams were doing oftentimes we

00:09:09,439 --> 00:09:12,769
were working on the same thing as

00:09:10,519 --> 00:09:14,660
another team and we just had no idea and

00:09:12,769 --> 00:09:15,739
other times we couldn't share code

00:09:14,660 --> 00:09:18,649
because we were working in different

00:09:15,739 --> 00:09:23,049
frameworks so that was very very hard to

00:09:18,649 --> 00:09:25,069
do if we had a cross-functional project

00:09:23,049 --> 00:09:26,809
things weren't released at the same time

00:09:25,069 --> 00:09:29,480
making an inconsistent user experience

00:09:26,809 --> 00:09:31,129
so having everything centralized in one

00:09:29,480 --> 00:09:35,269
location made it really easy to search

00:09:31,129 --> 00:09:37,399
to do a cop atomic commits where we

00:09:35,269 --> 00:09:39,559
could just do one commit across all of

00:09:37,399 --> 00:09:42,470
the web´s and the graph API and that

00:09:39,559 --> 00:09:45,019
worked really really well for first

00:09:42,470 --> 00:09:47,139
SurveyMonkey and we also did want to

00:09:45,019 --> 00:09:49,429
recognize that some people have

00:09:47,139 --> 00:09:53,269
particular expertise in a certain area

00:09:49,429 --> 00:09:54,980
of our web and we wanted to keep that so

00:09:53,269 --> 00:09:58,189
we solve this problem by having code on

00:09:54,980 --> 00:10:00,679
our files i'm so that we have people who

00:09:58,189 --> 00:10:02,569
know the code review it and make sure

00:10:00,679 --> 00:10:09,980
that it is approved by someone with that

00:10:02,569 --> 00:10:11,720
domain expert knowledge okay so a couple

00:10:09,980 --> 00:10:13,369
of really cool things that came out of

00:10:11,720 --> 00:10:16,759
this mono repo tooling that I just

00:10:13,369 --> 00:10:19,369
wanted to point out is because we had

00:10:16,759 --> 00:10:22,220
our graph API and the same repo we were

00:10:19,369 --> 00:10:26,239
able to actually use schemas to validate

00:10:22,220 --> 00:10:28,489
our queries and this was really great in

00:10:26,239 --> 00:10:30,589
terms of preventing errors from hitting

00:10:28,489 --> 00:10:34,489
production so not only could be tested

00:10:30,589 --> 00:10:36,619
in our actual vs code but we could

00:10:34,489 --> 00:10:38,929
actually test it in CI before it

00:10:36,619 --> 00:10:43,100
actually hit production so you guys have

00:10:38,929 --> 00:10:45,439
heard about the new vs code extensions

00:10:43,100 --> 00:10:47,720
that Apollo's releases this week and

00:10:45,439 --> 00:10:50,149
that is amazing because what used to be

00:10:47,720 --> 00:10:53,119
kind of limited to mono repo is now

00:10:50,149 --> 00:10:55,220
available to everyone and we can say

00:10:53,119 --> 00:10:57,920
firsthand that this has been definitely

00:10:55,220 --> 00:11:00,649
part of why we were so successful in our

00:10:57,920 --> 00:11:03,410
our first initiative and I would highly

00:11:00,649 --> 00:11:04,940
recommend every team to use it I'm so

00:11:03,410 --> 00:11:09,800
we're really excited about those added

00:11:04,940 --> 00:11:12,470
features too okay so the next thing that

00:11:09,800 --> 00:11:14,690
we thought about as a company and as a

00:11:12,470 --> 00:11:17,540
team was the language and graph QL

00:11:14,690 --> 00:11:20,899
framework like I said before we came

00:11:17,540 --> 00:11:23,449
from a Python shop our services are in

00:11:20,899 --> 00:11:26,000
Python and our webs are in Python so it

00:11:23,449 --> 00:11:28,910
made sense that look at potentially

00:11:26,000 --> 00:11:32,540
having a graph QL server written in

00:11:28,910 --> 00:11:34,760
Python but when we actually evaluated

00:11:32,540 --> 00:11:37,310
the various different options we found

00:11:34,760 --> 00:11:39,560
that the adoption that Apollo had was

00:11:37,310 --> 00:11:43,070
kind of undeniable the community the

00:11:39,560 --> 00:11:44,990
ecosystem and the documentation it was

00:11:43,070 --> 00:11:48,139
it was really something that we needed

00:11:44,990 --> 00:11:50,389
and so we went with Apollo ecosystem and

00:11:48,139 --> 00:11:52,040
I think it worked out really well for us

00:11:50,389 --> 00:11:57,529
and was part of the reason we were

00:11:52,040 --> 00:12:00,470
successful for this initial trial I also

00:11:57,529 --> 00:12:04,010
want to point out too that with with

00:12:00,470 --> 00:12:06,980
node the async nature of it it works

00:12:04,010 --> 00:12:14,600
really well with the i/o nature of the

00:12:06,980 --> 00:12:17,690
graph QL API so not only in our graph

00:12:14,600 --> 00:12:21,470
Gale server but in our webs we switched

00:12:17,690 --> 00:12:23,990
over from Python Python with a ginger

00:12:21,470 --> 00:12:27,019
template and homegrown back background

00:12:23,990 --> 00:12:33,880
sometimes reacts sometimes jQuery and

00:12:27,019 --> 00:12:38,209
sometimes all of those combined to just

00:12:33,880 --> 00:12:41,300
react always Apollo node and our

00:12:38,209 --> 00:12:44,569
homegrown WDS which is our design system

00:12:41,300 --> 00:12:46,430
for shared components so even though we

00:12:44,569 --> 00:12:49,010
selected Apollo we still had a lot of

00:12:46,430 --> 00:12:53,510
decisions that we could make in terms of

00:12:49,010 --> 00:12:55,370
constructing our architecture so Paul

00:12:53,510 --> 00:12:58,160
has a couple of different options in

00:12:55,370 --> 00:12:59,779
terms of fetching data I think that the

00:12:58,160 --> 00:13:02,750
recommendation is really to have these

00:12:59,779 --> 00:13:05,269
separate requests and you can have these

00:13:02,750 --> 00:13:06,680
small reusable components with the data

00:13:05,269 --> 00:13:09,200
encapsulated

00:13:06,680 --> 00:13:12,950
and we have these separate requests the

00:13:09,200 --> 00:13:16,820
the data comes back just as just in the

00:13:12,950 --> 00:13:19,000
order that it's received and it's it

00:13:16,820 --> 00:13:21,080
shows up on the page as you get it back

00:13:19,000 --> 00:13:22,970
and this is really nice

00:13:21,080 --> 00:13:24,440
but there are some issues it's not as

00:13:22,970 --> 00:13:26,510
performant which they should be - and

00:13:24,440 --> 00:13:29,480
you can potentially have some overhead

00:13:26,510 --> 00:13:34,370
your api's if you don't have caching

00:13:29,480 --> 00:13:36,589
setup for us this became kind of an

00:13:34,370 --> 00:13:39,080
issue for us because we we are not on

00:13:36,589 --> 00:13:40,850
HTTP - so we were sending a lot of

00:13:39,080 --> 00:13:43,640
requests and because we don't have

00:13:40,850 --> 00:13:45,680
multiplexing that HTTP offers hb2 offers

00:13:43,640 --> 00:13:48,529
and we were seeing some performance

00:13:45,680 --> 00:13:50,300
issues so we went with batching and and

00:13:48,529 --> 00:13:51,649
so we have those small reusable

00:13:50,300 --> 00:13:53,690
components that you can just drop in

00:13:51,649 --> 00:13:57,770
place on the pages with the data

00:13:53,690 --> 00:13:59,510
encapsulated and that's nice but it's

00:13:57,770 --> 00:14:01,279
only as fast as your slowest query on

00:13:59,510 --> 00:14:04,070
the page and so that's definitely a

00:14:01,279 --> 00:14:05,570
downside you also have the option to use

00:14:04,070 --> 00:14:06,470
fragments and definitely in the areas

00:14:05,570 --> 00:14:08,870
that makes sense

00:14:06,470 --> 00:14:12,980
for sure and but the reason I point this

00:14:08,870 --> 00:14:14,779
out is because when you are kind of

00:14:12,980 --> 00:14:17,600
rolling out a new architecture you're

00:14:14,779 --> 00:14:22,279
gonna run into issues where you can't do

00:14:17,600 --> 00:14:24,500
what's best and I think this is a case

00:14:22,279 --> 00:14:26,570
where we can't do it because we don't

00:14:24,500 --> 00:14:29,450
have HDB - and it affects performance

00:14:26,570 --> 00:14:32,510
and the one thing that I want to show

00:14:29,450 --> 00:14:34,940
and highlight about Apollo is up that's

00:14:32,510 --> 00:14:37,279
okay and because we can increment we

00:14:34,940 --> 00:14:39,589
improve and Apollo kind of has offered

00:14:37,279 --> 00:14:42,709
this really a smooth transition to just

00:14:39,589 --> 00:14:46,810
in currently improve an adopt a few L as

00:14:42,709 --> 00:14:49,880
your organization improves their

00:14:46,810 --> 00:14:52,010
infrastructure so here you have the

00:14:49,880 --> 00:14:55,010
batching which we have and when we

00:14:52,010 --> 00:14:57,890
switch over to http - it's a two line

00:14:55,010 --> 00:14:59,060
change and that's really nice because we

00:14:57,890 --> 00:15:00,589
don't feel like we're trapped in a

00:14:59,060 --> 00:15:02,390
corner we didn't make a wrong decision

00:15:00,589 --> 00:15:05,060
that's gonna be affecting us for years

00:15:02,390 --> 00:15:07,160
ahead we know that there's a clear path

00:15:05,060 --> 00:15:09,560
to get to where we want to be and that's

00:15:07,160 --> 00:15:12,130
really cool and I think it's a says a

00:15:09,560 --> 00:15:14,959
lot about the Paulo team for having that

00:15:12,130 --> 00:15:16,339
forethought to think about users and how

00:15:14,959 --> 00:15:18,889
they might

00:15:16,339 --> 00:15:22,939
to incrementally adapt their best

00:15:18,889 --> 00:15:24,920
practices and for us we just are happy

00:15:22,939 --> 00:15:26,809
feel good knowing that we didn't we

00:15:24,920 --> 00:15:28,819
didn't mess up you know we're gonna be

00:15:26,809 --> 00:15:33,649
okay we're gonna we're gonna get better

00:15:28,819 --> 00:15:35,470
and and that Apollo has thought about

00:15:33,649 --> 00:15:39,290
how we can transition once our

00:15:35,470 --> 00:15:41,240
infrastructure improves another thing

00:15:39,290 --> 00:15:43,699
that I want to point out about Apollo

00:15:41,240 --> 00:15:46,339
and one of the reasons we we chose to go

00:15:43,699 --> 00:15:48,949
with it was that it encouraged these ux

00:15:46,339 --> 00:15:52,129
state it really has for any easier at

00:15:48,949 --> 00:15:54,350
the heart of the decisions and so this

00:15:52,129 --> 00:15:57,920
is their render prop for query and you

00:15:54,350 --> 00:15:59,749
can see here that it returns an error

00:15:57,920 --> 00:16:03,110
and loading and the data which is your

00:15:59,749 --> 00:16:04,759
normal state so if there's an error we

00:16:03,110 --> 00:16:06,470
throw it and we catch it with an air

00:16:04,759 --> 00:16:08,449
boundary get some of that extra data

00:16:06,470 --> 00:16:11,779
around what happened and show an error

00:16:08,449 --> 00:16:13,459
card and then if it's loading which we

00:16:11,779 --> 00:16:15,170
show a skeleton view and for the end

00:16:13,459 --> 00:16:16,490
user this is a really great case that

00:16:15,170 --> 00:16:18,259
they had that immediate response of

00:16:16,490 --> 00:16:20,600
what's happening in the page and they

00:16:18,259 --> 00:16:23,959
know that they got in there or it's just

00:16:20,600 --> 00:16:26,870
loading and so this is what it looks

00:16:23,959 --> 00:16:29,600
like when when you actually render it we

00:16:26,870 --> 00:16:33,339
had those those really nice skeletons

00:16:29,600 --> 00:16:33,339
and then the data comes in and renders

00:16:33,670 --> 00:16:40,910
okay so I wanted to talk about how this

00:16:38,120 --> 00:16:43,160
affects an organization when you

00:16:40,910 --> 00:16:44,540
implement graph QL cuz there was a lot

00:16:43,160 --> 00:16:46,009
of things we didn't we knew it was going

00:16:44,540 --> 00:16:48,170
to improve our end user and we knew it

00:16:46,009 --> 00:16:49,429
was going to improve our developers but

00:16:48,170 --> 00:16:51,709
there was a lot of other people that it

00:16:49,429 --> 00:16:53,449
helped out as well so let's just quickly

00:16:51,709 --> 00:16:55,910
talk about the user they get a

00:16:53,449 --> 00:17:00,350
performance game they get consistent UX

00:16:55,910 --> 00:17:03,379
experience more emphasis on various

00:17:00,350 --> 00:17:05,990
states so that's great and for the

00:17:03,379 --> 00:17:09,589
developer we saw an improvement in

00:17:05,990 --> 00:17:12,799
velocity because we weren't rewriting

00:17:09,589 --> 00:17:14,240
all this code and we could share more we

00:17:12,799 --> 00:17:16,049
we saw that we could focus on more

00:17:14,240 --> 00:17:20,819
interesting problems and

00:17:16,049 --> 00:17:22,199
and I have to recreate the wheel for the

00:17:20,819 --> 00:17:24,179
designer it was great because we could

00:17:22,199 --> 00:17:25,709
have those conversations between the

00:17:24,179 --> 00:17:28,769
product engineers and designers about

00:17:25,709 --> 00:17:30,450
the various different states and set

00:17:28,769 --> 00:17:31,830
them up and it was easier for us to

00:17:30,450 --> 00:17:33,179
implement them because we don't have to

00:17:31,830 --> 00:17:36,869
recreate it all the time we're working

00:17:33,179 --> 00:17:38,129
with one framework and for the product

00:17:36,869 --> 00:17:40,559
manager this is something we didn't

00:17:38,129 --> 00:17:42,059
release expect it provided them more

00:17:40,559 --> 00:17:43,889
consistent timelines of how long it

00:17:42,059 --> 00:17:47,519
would take us to actually complete a

00:17:43,889 --> 00:17:50,399
project so this was really cool and they

00:17:47,519 --> 00:17:52,019
were able to kind of know that when we

00:17:50,399 --> 00:17:53,340
were forming our schemas we were

00:17:52,019 --> 00:17:56,039
thinking about the end user and their

00:17:53,340 --> 00:17:57,809
based on the experience so that was that

00:17:56,039 --> 00:17:59,989
was a really nice fun that we had just

00:17:57,809 --> 00:18:03,299
go in this a little bit more in depth

00:17:59,989 --> 00:18:07,019
we had performance gains that consistent

00:18:03,299 --> 00:18:10,289
user experience a cohesive UX state and

00:18:07,019 --> 00:18:15,419
we added improved responsiveness and web

00:18:10,289 --> 00:18:17,489
excessively with our WDS library for

00:18:15,419 --> 00:18:19,859
engineering we had code visibility

00:18:17,489 --> 00:18:22,619
sharing the ease of cross-functional

00:18:19,859 --> 00:18:25,379
changes the Pala tools are amazing for

00:18:22,619 --> 00:18:28,440
discoverability those reusable

00:18:25,379 --> 00:18:30,749
components with encapsulated data just

00:18:28,440 --> 00:18:33,690
made it super simple to take for

00:18:30,749 --> 00:18:35,009
instance a upgrade mobile and places

00:18:33,690 --> 00:18:36,710
somewhere else and not have to worry

00:18:35,009 --> 00:18:39,629
about the data that it was consuming

00:18:36,710 --> 00:18:42,989
local development as you saw from our

00:18:39,629 --> 00:18:46,409
own linting that we had and the new

00:18:42,989 --> 00:18:48,480
stuff that Apollo has just released it's

00:18:46,409 --> 00:18:51,830
just constantly improving and raising

00:18:48,480 --> 00:18:51,830
the bar and what it's like to develop

00:18:51,889 --> 00:18:58,040
and then for our product

00:18:55,190 --> 00:19:01,490
managers we saw improved feature

00:18:58,040 --> 00:19:03,140
velocity we added built-in performance

00:19:01,490 --> 00:19:05,240
support and we were able to standardize

00:19:03,140 --> 00:19:07,130
metrics and have it really easy to track

00:19:05,240 --> 00:19:09,950
how features were doing in production

00:19:07,130 --> 00:19:11,570
and we reduced the amount of resources

00:19:09,950 --> 00:19:14,060
ever needed we didn't have to do these

00:19:11,570 --> 00:19:15,740
complex aggregations that we were

00:19:14,060 --> 00:19:19,090
previously doing with all of the api's

00:19:15,740 --> 00:19:22,630
coming in at once more consistent more

00:19:19,090 --> 00:19:25,730
consistent data coming in and less bugs

00:19:22,630 --> 00:19:28,670
and this increased focus on production

00:19:25,730 --> 00:19:31,330
which just by the nature of Apollo

00:19:28,670 --> 00:19:37,310
always keeping that kind of the queer

00:19:31,330 --> 00:19:39,320
schemas close to the actual product all

00:19:37,310 --> 00:19:40,970
right so I just want to let everyone

00:19:39,320 --> 00:19:42,530
know that we're going live this month so

00:19:40,970 --> 00:19:44,560
we're super excited we've decked out so

00:19:42,530 --> 00:19:47,360
every monkey in the latest and greatest

00:19:44,560 --> 00:19:48,770
and we're super excited to to be here

00:19:47,360 --> 00:19:50,920
and be a part of this community

00:19:48,770 --> 00:19:54,260
I also wanted to let everyone know that

00:19:50,920 --> 00:19:56,420
we're hiring so if you're interested in

00:19:54,260 --> 00:20:00,560
complex problems you like Apollo you

00:19:56,420 --> 00:20:01,570
like graph QL and come talk to us thank

00:20:00,560 --> 00:20:09,130
you guys

00:20:01,570 --> 00:20:09,130

YouTube URL: https://www.youtube.com/watch?v=dstMUwyF5oU


