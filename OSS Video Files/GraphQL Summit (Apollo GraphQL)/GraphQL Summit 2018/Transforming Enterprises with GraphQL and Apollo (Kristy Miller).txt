Title: Transforming Enterprises with GraphQL and Apollo (Kristy Miller)
Publication date: 2018-12-05
Playlist: GraphQL Summit 2018
Description: 
	Talk from GraphQL Summit 2018 - Nov 8, 2018

Kristy Miller, Senior Developer at Poetic Systems, leads development teams and crafts solutions to help our clients achieve their goals. As I push myself and our industry, I want to inspire women everywhere to feel like they can achieve their biggest dreams: It doesn't matter your background or your gender if you have the drive and the passion, you have the courage to pursue it.

Learn more:  https://summit.graphql.com
Captions: 
	00:00:06,109 --> 00:00:11,850
hey everyone this is transforming

00:00:09,059 --> 00:00:13,080
enterprises with Groucho and Apollo I'm

00:00:11,850 --> 00:00:15,809
here today to talk about

00:00:13,080 --> 00:00:17,700
we introduced an graphical air traffic

00:00:15,809 --> 00:00:19,590
controller into an established

00:00:17,700 --> 00:00:21,689
organization and how you can do the same

00:00:19,590 --> 00:00:23,790
thing in order to change your clients

00:00:21,689 --> 00:00:25,020
technology landscape and to start

00:00:23,790 --> 00:00:27,750
behaving more like some of the other

00:00:25,020 --> 00:00:31,380
startups and technology companies here

00:00:27,750 --> 00:00:35,040
at Summit but first who are we and Who

00:00:31,380 --> 00:00:37,470
am I I'll start off with myself I'm

00:00:35,040 --> 00:00:39,989
Christy Miller San Francisco is my

00:00:37,470 --> 00:00:40,500
hometown but Houston is my current home

00:00:39,989 --> 00:00:42,750
base

00:00:40,500 --> 00:00:44,970
it is much cooler and has way more

00:00:42,750 --> 00:00:48,780
delicious food than you might imagine

00:00:44,970 --> 00:00:51,299
I promise due to my calli Texas

00:00:48,780 --> 00:00:53,879
I love the San Francisco Giants and the

00:00:51,299 --> 00:00:56,190
Houston Astros unfortunately this means

00:00:53,879 --> 00:00:58,580
I am still a little bit bummed that the

00:00:56,190 --> 00:01:02,400
Astros didn't make it to the series and

00:00:58,580 --> 00:01:05,790
the Giants did not resign Hunter hunter

00:01:02,400 --> 00:01:08,280
Panthers contract so what brought me to

00:01:05,790 --> 00:01:10,200
summit I'm a well I'm a senior developer

00:01:08,280 --> 00:01:14,369
at poetic systems who lives in the weeds

00:01:10,200 --> 00:01:16,860
of grass ql everyday poetic is Houston's

00:01:14,369 --> 00:01:19,980
corner of Silicon Valley we are a small

00:01:16,860 --> 00:01:21,840
agile agency who work with work with a

00:01:19,980 --> 00:01:24,690
range of different companies from

00:01:21,840 --> 00:01:27,000
startups to large enterprises from

00:01:24,690 --> 00:01:29,250
building an app to detect if an athlete

00:01:27,000 --> 00:01:31,740
has a concussion to using machine

00:01:29,250 --> 00:01:36,420
learning to predict a user's likelihood

00:01:31,740 --> 00:01:38,550
of to lease an apartment excuse me and

00:01:36,420 --> 00:01:39,990
we are currently doing our first joint

00:01:38,550 --> 00:01:42,570
venture with a near billion dollar

00:01:39,990 --> 00:01:45,210
company we love to stay ahead of the

00:01:42,570 --> 00:01:47,610
ahead of the curve and thrive in the

00:01:45,210 --> 00:01:52,350
unknown the company was founded by Matt

00:01:47,610 --> 00:01:54,090
Hager right back there who you'll most

00:01:52,350 --> 00:01:56,190
likely find upstairs at the shift booth

00:01:54,090 --> 00:01:59,010
if you have not checked it out I highly

00:01:56,190 --> 00:02:00,750
recommend it after he dropped out of

00:01:59,010 --> 00:02:03,120
high school and started hacking code for

00:02:00,750 --> 00:02:05,190
an oil and gas company in our 11 years

00:02:03,120 --> 00:02:07,290
it has grown from a small development

00:02:05,190 --> 00:02:09,899
team sitting at a kitchen table to a

00:02:07,290 --> 00:02:12,450
team of innovators with in a high-rise

00:02:09,899 --> 00:02:14,310
with cold brew on tap but the spirit has

00:02:12,450 --> 00:02:16,230
remained the same we don't really care

00:02:14,310 --> 00:02:17,819
about your resume but if you're

00:02:16,230 --> 00:02:19,739
passionate about technology are

00:02:17,819 --> 00:02:22,560
motivated by pushing our industry

00:02:19,739 --> 00:02:24,450
forward and love tacos we would love to

00:02:22,560 --> 00:02:26,610
hear from you

00:02:24,450 --> 00:02:30,390
this is one of the reasons why you PS

00:02:26,610 --> 00:02:33,360
came to poetic I should be clear this is

00:02:30,390 --> 00:02:37,769
not UPS the United Parcel Service this

00:02:33,360 --> 00:02:40,080
is UPS Universal Plant Services you may

00:02:37,769 --> 00:02:42,959
not have heard of this UPS but they are

00:02:40,080 --> 00:02:45,709
big UPS started out as a single location

00:02:42,959 --> 00:02:48,720
in Deer Park nearly three decades ago

00:02:45,709 --> 00:02:52,590
and now they do over 450 million dollars

00:02:48,720 --> 00:02:54,750
in revenue each year have over 2,600

00:02:52,590 --> 00:02:56,459
employees and operate across North

00:02:54,750 --> 00:02:58,340
America they are kind of like the

00:02:56,459 --> 00:03:00,480
special ops of the energy sector

00:02:58,340 --> 00:03:02,819
companies call them on-site for these

00:03:00,480 --> 00:03:04,829
really nice repairs or maintenance of

00:03:02,819 --> 00:03:06,450
these massive technical machines that

00:03:04,829 --> 00:03:10,170
are integral for energy production

00:03:06,450 --> 00:03:11,730
refinery and delivery due to the range

00:03:10,170 --> 00:03:13,560
of services that they provide in the

00:03:11,730 --> 00:03:15,450
amount of ground they can cover their

00:03:13,560 --> 00:03:19,620
logistics operations are extremely

00:03:15,450 --> 00:03:22,849
technical and very complex in October of

00:03:19,620 --> 00:03:24,959
2017 the executive team at UPS

00:03:22,849 --> 00:03:26,819
recognizes their operations and their

00:03:24,959 --> 00:03:28,859
technology were not as efficient as

00:03:26,819 --> 00:03:30,180
possible and if they wanted to keep

00:03:28,859 --> 00:03:33,269
growing at the pace that they were or

00:03:30,180 --> 00:03:35,430
faster things would need to change the

00:03:33,269 --> 00:03:37,799
whole company has an amazing growth

00:03:35,430 --> 00:03:40,160
mindset and looks to many companies that

00:03:37,799 --> 00:03:43,079
summit as role models now peers

00:03:40,160 --> 00:03:48,569
technologically so that brings me to

00:03:43,079 --> 00:03:50,130
what bright poetic and ups together ups

00:03:48,569 --> 00:03:51,540
reached out to poetic to conduct a

00:03:50,130 --> 00:03:53,160
strategy around to evaluate their

00:03:51,540 --> 00:03:55,500
business processes and technology

00:03:53,160 --> 00:03:57,299
architecture fees a poetics reputation

00:03:55,500 --> 00:04:00,150
for bringing visions like theirs to

00:03:57,299 --> 00:04:03,030
fortune during poetics initial strategy

00:04:00,150 --> 00:04:04,530
round with ups pre notice a number of

00:04:03,030 --> 00:04:07,530
issues that had started to accrue over

00:04:04,530 --> 00:04:09,450
time the company had undergone rapid

00:04:07,530 --> 00:04:11,310
growth over the past years primarily

00:04:09,450 --> 00:04:13,349
through mergers and acquisitions and

00:04:11,310 --> 00:04:15,420
each of those previous companies had

00:04:13,349 --> 00:04:17,430
their own set of defined processes and

00:04:15,420 --> 00:04:20,370
tool sets to accomplish their day-to-day

00:04:17,430 --> 00:04:22,320
tasks and that left ups operating and

00:04:20,370 --> 00:04:25,979
maintaining a number of different

00:04:22,320 --> 00:04:27,300
technology stacks ups as development

00:04:25,979 --> 00:04:29,280
teams have been asked to look at

00:04:27,300 --> 00:04:32,460
operational problems but not from a

00:04:29,280 --> 00:04:33,810
global company wide scale that can work

00:04:32,460 --> 00:04:35,909
in some industries and for some

00:04:33,810 --> 00:04:37,070
businesses but ups relies on

00:04:35,909 --> 00:04:38,750
applications like raw

00:04:37,070 --> 00:04:41,570
their business segments to accomplish

00:04:38,750 --> 00:04:43,730
their goals additionally applications

00:04:41,570 --> 00:04:46,220
were not prioritized for UPS craftsmen

00:04:43,730 --> 00:04:47,570
these are the highly skilled repair and

00:04:46,220 --> 00:04:50,000
maintenance technicians that are out in

00:04:47,570 --> 00:04:51,950
the field every day by not being

00:04:50,000 --> 00:04:54,320
optimized for mobile use especially in

00:04:51,950 --> 00:04:58,190
situations where internet connections

00:04:54,320 --> 00:05:01,040
can be few and far between unfortunately

00:04:58,190 --> 00:05:02,600
what this resulted in was resources not

00:05:01,040 --> 00:05:06,560
being used their full potential and

00:05:02,600 --> 00:05:08,120
broken practices user adoption of new

00:05:06,560 --> 00:05:10,010
applications were low and in some

00:05:08,120 --> 00:05:12,350
instances employees preferred to stick

00:05:10,010 --> 00:05:14,870
to the manual methods of doing their

00:05:12,350 --> 00:05:16,520
day-to-day tasks using time tracking as

00:05:14,870 --> 00:05:18,380
an example craftsman would take a

00:05:16,520 --> 00:05:21,080
picture of their time cards on their

00:05:18,380 --> 00:05:23,620
phone to send to an office admin to

00:05:21,080 --> 00:05:26,240
input into one of multiple systems

00:05:23,620 --> 00:05:28,580
during the strategy round we mapped out

00:05:26,240 --> 00:05:32,020
UPS's entire information technology

00:05:28,580 --> 00:05:35,450
architecture and this is what we found

00:05:32,020 --> 00:05:37,160
if you can't read this don't worry all

00:05:35,450 --> 00:05:39,500
you really need to understand is those a

00:05:37,160 --> 00:05:42,560
bit convoluted here's some of the

00:05:39,500 --> 00:05:44,420
highlights custom applications rely on

00:05:42,560 --> 00:05:46,880
data from multiple back-end systems

00:05:44,420 --> 00:05:49,940
these could be third-party or in-house

00:05:46,880 --> 00:05:51,560
custom-built solutions not all companies

00:05:49,940 --> 00:05:54,560
are using the same application for the

00:05:51,560 --> 00:05:56,090
same process timekeeping for example is

00:05:54,560 --> 00:05:57,740
done in four different systems not

00:05:56,090 --> 00:06:00,860
everyone was doing that same phone

00:05:57,740 --> 00:06:04,610
snapshots process when we dug into the

00:06:00,860 --> 00:06:06,770
data we found manual time entry methods

00:06:04,610 --> 00:06:08,840
excuse me when we dug into the data we

00:06:06,770 --> 00:06:11,270
found that manual time entry methods

00:06:08,840 --> 00:06:12,950
slowed down processing if entry delays

00:06:11,270 --> 00:06:15,020
ever grew in scale for other

00:06:12,950 --> 00:06:16,850
organizations they would run the risk of

00:06:15,020 --> 00:06:18,740
having errors in billing reconciliation

00:06:16,850 --> 00:06:20,960
and delaying payments to workers

00:06:18,740 --> 00:06:24,410
obviously a massive problem for larger

00:06:20,960 --> 00:06:26,420
corporations project management

00:06:24,410 --> 00:06:28,790
management tools were not consistent

00:06:26,420 --> 00:06:30,080
across the company any time employees

00:06:28,790 --> 00:06:32,060
had to learn a completely new

00:06:30,080 --> 00:06:34,640
application suite when they go to

00:06:32,060 --> 00:06:36,680
different business units or data is lost

00:06:34,640 --> 00:06:38,990
because unable to be shared between the

00:06:36,680 --> 00:06:43,250
system's there is a real financial cost

00:06:38,990 --> 00:06:44,930
to the company overall we found 32

00:06:43,250 --> 00:06:46,700
different technologies that in one way

00:06:44,930 --> 00:06:49,640
or another relied on each other

00:06:46,700 --> 00:06:50,800
this left a web of information to sort

00:06:49,640 --> 00:06:54,009
through which bino me

00:06:50,800 --> 00:06:55,930
is unique to UPS businesses businesses

00:06:54,009 --> 00:06:59,139
spend as much time as 80%

00:06:55,930 --> 00:07:00,699
cleaning and preparing data there were

00:06:59,139 --> 00:07:02,080
also some key items that came to light

00:07:00,699 --> 00:07:04,090
about their operations that weren't

00:07:02,080 --> 00:07:06,610
really issues but did play a major role

00:07:04,090 --> 00:07:10,090
in our decision-making process for

00:07:06,610 --> 00:07:12,639
finding a solution UPS has daily and

00:07:10,090 --> 00:07:14,500
weekly syncs that that sync between

00:07:12,639 --> 00:07:16,720
systems to keep data consistent across

00:07:14,500 --> 00:07:20,020
their backends there are four primarily

00:07:16,720 --> 00:07:21,370
primary databases with custom api's that

00:07:20,020 --> 00:07:24,400
are used by each of their front ends

00:07:21,370 --> 00:07:26,289
there's a third-party ERP custom

00:07:24,400 --> 00:07:28,960
solutions for manpower dispatch this is

00:07:26,289 --> 00:07:30,460
how you get a craftsman onto a job to

00:07:28,960 --> 00:07:33,069
the job site and all the steps in

00:07:30,460 --> 00:07:35,740
between timekeeping reporting and new

00:07:33,069 --> 00:07:37,659
hire paperwork and they also use

00:07:35,740 --> 00:07:41,229
SharePoint for document storage and

00:07:37,659 --> 00:07:43,300
company-wide forms after looking over

00:07:41,229 --> 00:07:45,550
UPS's architecture we came up with a

00:07:43,300 --> 00:07:47,770
vision of a modern technology stack is

00:07:45,550 --> 00:07:50,770
maintainable scaleable and most

00:07:47,770 --> 00:07:52,539
importantly built for the future our

00:07:50,770 --> 00:07:54,060
goal was to simplify the front-ends

00:07:52,539 --> 00:07:56,469
connection to back-end services

00:07:54,060 --> 00:07:58,690
compartmentalized business capabilities

00:07:56,469 --> 00:08:00,639
into smaller modules and allow each

00:07:58,690 --> 00:08:04,169
front-end to ask for exactly what data

00:08:00,639 --> 00:08:06,279
they needed nothing more nothing less

00:08:04,169 --> 00:08:09,430
without caring about which of the

00:08:06,279 --> 00:08:11,500
backends the data belong to when

00:08:09,430 --> 00:08:13,240
discussing how each front-end would each

00:08:11,500 --> 00:08:16,360
would interact with the current back-end

00:08:13,240 --> 00:08:18,099
services a concept of aircraft fuel air

00:08:16,360 --> 00:08:20,469
traffic controller came to the forefront

00:08:18,099 --> 00:08:22,060
the air traffic controller would be

00:08:20,469 --> 00:08:23,979
responsible for fetching and merging

00:08:22,060 --> 00:08:25,810
data the front-end requested from each

00:08:23,979 --> 00:08:27,580
back-end service before returning it to

00:08:25,810 --> 00:08:32,079
the client and that is what we're

00:08:27,580 --> 00:08:34,630
building in grad school we saw a huge

00:08:32,079 --> 00:08:36,849
potential to restructure how friends

00:08:34,630 --> 00:08:39,099
interacted with ups as back-end services

00:08:36,849 --> 00:08:41,800
and a way to lay the groundwork for a

00:08:39,099 --> 00:08:43,930
more dynamic infrastructure by doing

00:08:41,800 --> 00:08:45,520
this we are reducing redundant code on

00:08:43,930 --> 00:08:47,740
the front end to have a single end point

00:08:45,520 --> 00:08:52,420
and we took the data requirements to the

00:08:47,740 --> 00:08:54,190
client instead of the server one of the

00:08:52,420 --> 00:08:55,959
beautiful things about the future at UPS

00:08:54,190 --> 00:08:58,209
is that we're introducing graph QL

00:08:55,959 --> 00:09:00,130
incrementally across the organization

00:08:58,209 --> 00:09:01,959
this is accomplished by first building

00:09:00,130 --> 00:09:04,030
the air traffic controller to

00:09:01,959 --> 00:09:06,970
communicate with UPS is existing

00:09:04,030 --> 00:09:08,980
rest API is having the ability to build

00:09:06,970 --> 00:09:11,410
on top of their existing systems not

00:09:08,980 --> 00:09:15,340
only accelerated our timeline but it

00:09:11,410 --> 00:09:17,260
also was a cost benefit to ups as we

00:09:15,340 --> 00:09:19,720
look ahead not everything will live in

00:09:17,260 --> 00:09:21,280
the current existing systems as each of

00:09:19,720 --> 00:09:23,320
their business capabilities are

00:09:21,280 --> 00:09:25,540
reimagined for the future they will

00:09:23,320 --> 00:09:27,700
become their own gradual micro services

00:09:25,540 --> 00:09:29,650
each of those micro services will be

00:09:27,700 --> 00:09:31,750
responsible for their own curtains

00:09:29,650 --> 00:09:34,300
database connections module different

00:09:31,750 --> 00:09:37,810
model definitions and custom business

00:09:34,300 --> 00:09:39,550
logic aligning all of UPS's IT systems

00:09:37,810 --> 00:09:41,620
with business capabilities will pay

00:09:39,550 --> 00:09:45,100
dividends down the road as they optimize

00:09:41,620 --> 00:09:47,350
their information data-driven companies

00:09:45,100 --> 00:09:50,380
are 23 times more likely to acquire

00:09:47,350 --> 00:09:52,600
customers six times more likely to

00:09:50,380 --> 00:09:56,020
retain current ones in 19 times more

00:09:52,600 --> 00:09:58,480
likely to improve our life in the sense

00:09:56,020 --> 00:10:00,670
the gradual air traffic controller is

00:09:58,480 --> 00:10:02,230
nothing more than a router for data the

00:10:00,670 --> 00:10:04,390
front end can request data from a

00:10:02,230 --> 00:10:06,430
multitude of different services without

00:10:04,390 --> 00:10:08,500
needing to know the exact service that's

00:10:06,430 --> 00:10:10,360
being fetched from the air traffic the

00:10:08,500 --> 00:10:12,460
air traffic controller then fetches it

00:10:10,360 --> 00:10:14,050
from the correct data source all within

00:10:12,460 --> 00:10:18,730
a single request from the front end

00:10:14,050 --> 00:10:21,730
creating a truly universal API as an

00:10:18,730 --> 00:10:24,160
added bonus the vast number of developer

00:10:21,730 --> 00:10:26,380
tools available has has have helped

00:10:24,160 --> 00:10:28,120
increase developer productivity by

00:10:26,380 --> 00:10:30,339
giving us insights into how each of the

00:10:28,120 --> 00:10:32,440
front ends are interacting with the air

00:10:30,339 --> 00:10:34,450
traffic controller they even provide us

00:10:32,440 --> 00:10:36,730
the ability to track performance down to

00:10:34,450 --> 00:10:38,980
the individual resolver to be able to

00:10:36,730 --> 00:10:43,780
identify taxing queries before our

00:10:38,980 --> 00:10:45,970
initial launch in January of mixture it

00:10:43,780 --> 00:10:48,100
is great in all but there were a few

00:10:45,970 --> 00:10:49,900
features that got me super stoked when

00:10:48,100 --> 00:10:52,839
starting to wound kicking off this

00:10:49,900 --> 00:10:54,490
project with ups this project is why

00:10:52,839 --> 00:10:56,020
Allah what I love most about this

00:10:54,490 --> 00:10:57,880
industry because it gives us this

00:10:56,020 --> 00:10:59,950
opportunity to act like students every

00:10:57,880 --> 00:11:01,300
day no it's all because we get happy

00:10:59,950 --> 00:11:04,210
hour in the office every now and then

00:11:01,300 --> 00:11:05,290
but it's because we get to come in and

00:11:04,210 --> 00:11:07,210
be presented with new learning

00:11:05,290 --> 00:11:09,370
opportunities with each new project

00:11:07,210 --> 00:11:11,400
comes a new set of problems to solve

00:11:09,370 --> 00:11:14,140
while UPS is by no means unique

00:11:11,400 --> 00:11:15,700
companies across the world have in are

00:11:14,140 --> 00:11:16,390
experiencing the same challenges that

00:11:15,700 --> 00:11:19,090
they are

00:11:16,390 --> 00:11:21,130
this project gave poetic and ups an

00:11:19,090 --> 00:11:24,780
incredible opportunity to share our

00:11:21,130 --> 00:11:27,190
specialized knowledge and grow as a team

00:11:24,780 --> 00:11:28,510
so this past summer I was doing a

00:11:27,190 --> 00:11:30,370
typical late night scroll through

00:11:28,510 --> 00:11:33,610
Twitter when a tweet from a new blog

00:11:30,370 --> 00:11:35,980
post by Apollo caught my eye the post

00:11:33,610 --> 00:11:38,890
was announcing a new feature of Apollo's

00:11:35,980 --> 00:11:41,140
server 2.0 that I knew immediately would

00:11:38,890 --> 00:11:45,340
be so beneficial for the UPS air traffic

00:11:41,140 --> 00:11:48,610
controller of course I am referring to

00:11:45,340 --> 00:11:50,470
the Apollo rest data source I sprung up

00:11:48,610 --> 00:11:51,820
out of bed grab my computer and

00:11:50,470 --> 00:11:54,220
installed the release candidate

00:11:51,820 --> 00:11:56,950
immediately to get playing with it

00:11:54,220 --> 00:11:58,960
within 30 minutes I had spun up a brand

00:11:56,950 --> 00:12:01,390
new Apollo server and was fetching data

00:11:58,960 --> 00:12:02,620
from a REST API and I will tell you this

00:12:01,390 --> 00:12:05,460
it was one of the most pleasant

00:12:02,620 --> 00:12:08,200
developer experiences I have ever had

00:12:05,460 --> 00:12:09,610
the part that took the longest was

00:12:08,200 --> 00:12:13,140
trying to figure out where my API keys

00:12:09,610 --> 00:12:18,040
were in this back-end REST API was using

00:12:13,140 --> 00:12:20,140
over their website this blew my mind the

00:12:18,040 --> 00:12:23,290
next day I was able to hook up two of

00:12:20,140 --> 00:12:25,300
UPS as existing dotnet REST API x' with

00:12:23,290 --> 00:12:28,540
the required authentication before lunch

00:12:25,300 --> 00:12:29,950
as a big even bigger bonus we didn't

00:12:28,540 --> 00:12:31,690
have to worry about handling resource

00:12:29,950 --> 00:12:34,380
caching it was all handled under the

00:12:31,690 --> 00:12:37,600
hood within the rest data source class

00:12:34,380 --> 00:12:39,280
in order to implement a new data source

00:12:37,600 --> 00:12:41,820
into your Apollo server you create a

00:12:39,280 --> 00:12:45,430
class that extends the rest data source

00:12:41,820 --> 00:12:48,400
and create methods to call your get or

00:12:45,430 --> 00:12:50,230
post methods on your REST API each data

00:12:48,400 --> 00:12:51,850
source you then define is passed into

00:12:50,230 --> 00:12:54,070
your Apollo server on startup and

00:12:51,850 --> 00:12:56,710
becomes available in your resolver so

00:12:54,070 --> 00:13:00,520
you fetch the data from your correct

00:12:56,710 --> 00:13:02,800
data source as they come in in this

00:13:00,520 --> 00:13:05,380
example I've created a simple REST data

00:13:02,800 --> 00:13:07,600
source that calls the to get methods on

00:13:05,380 --> 00:13:09,910
a movie database one is just to search

00:13:07,600 --> 00:13:14,130
for movies by a search term the other is

00:13:09,910 --> 00:13:17,440
to grab a movie by its movie ID and

00:13:14,130 --> 00:13:18,910
hopefully that's playing so switching

00:13:17,440 --> 00:13:21,250
over to playground again this took me

00:13:18,910 --> 00:13:23,350
all of 30 minutes to set up when this

00:13:21,250 --> 00:13:25,740
was first announced you can easily

00:13:23,350 --> 00:13:27,920
search for a movie using Star Wars and

00:13:25,740 --> 00:13:30,769
return a list of

00:13:27,920 --> 00:13:33,220
movies that match that term about a

00:13:30,769 --> 00:13:33,220
second

00:13:34,779 --> 00:13:40,399
and I'll grab an ID for Star Wars The

00:13:37,850 --> 00:13:43,190
Force awakens and I can then search for

00:13:40,399 --> 00:13:47,720
that movie and get the single movie by

00:13:43,190 --> 00:13:54,199
its ID really awesome work by the Apollo

00:13:47,720 --> 00:13:56,360
team I use the word serendipity in this

00:13:54,199 --> 00:13:58,970
scenario because while we knew graph G

00:13:56,360 --> 00:14:01,040
on Apollo made it super simple to send a

00:13:58,970 --> 00:14:03,260
single request to the server and fetch

00:14:01,040 --> 00:14:05,690
data from a multi multiple back-end

00:14:03,260 --> 00:14:08,000
services the rest data source was

00:14:05,690 --> 00:14:10,370
released at the exact perfect moment to

00:14:08,000 --> 00:14:13,699
help UPS transition into the world of

00:14:10,370 --> 00:14:15,709
graph QL after discovering the benefits

00:14:13,699 --> 00:14:17,949
of the rest data source we knew we

00:14:15,709 --> 00:14:20,180
needed the same thing for a graph QL API

00:14:17,949 --> 00:14:22,430
following in the footsteps of the Apollo

00:14:20,180 --> 00:14:26,269
team we built the graph QL data source

00:14:22,430 --> 00:14:28,160
the idea here is that your air traffic

00:14:26,269 --> 00:14:30,410
controller can now follow the same

00:14:28,160 --> 00:14:33,649
pattern of fetching data from remote API

00:14:30,410 --> 00:14:36,370
s no matter if it's rest or grass QL

00:14:33,649 --> 00:14:38,839
after defining your graph QL data source

00:14:36,370 --> 00:14:40,970
and passing it in to your Apollo server

00:14:38,839 --> 00:14:43,579
it becomes available in each of your

00:14:40,970 --> 00:14:46,610
resolvers context objects just as the

00:14:43,579 --> 00:14:48,440
rest one is allowing you to call queries

00:14:46,610 --> 00:14:52,160
and mutations just as you would from the

00:14:48,440 --> 00:14:53,839
client the key benefit here is now the

00:14:52,160 --> 00:14:56,240
client can request data from two

00:14:53,839 --> 00:14:58,310
different style api's without having to

00:14:56,240 --> 00:15:00,170
hook up the front-end to yet another API

00:14:58,310 --> 00:15:02,240
source it asks the air traffic

00:15:00,170 --> 00:15:03,769
controller for specific field and the

00:15:02,240 --> 00:15:06,560
resolver fetches the data from their

00:15:03,769 --> 00:15:08,630
respectful homes in this example I

00:15:06,560 --> 00:15:11,980
created a query called get movie with

00:15:08,630 --> 00:15:14,510
Studio information gets a movie ID and

00:15:11,980 --> 00:15:16,490
calling the REST API the movie database

00:15:14,510 --> 00:15:18,860
API gets that movie's information and

00:15:16,490 --> 00:15:21,260
using the studio name that's returned it

00:15:18,860 --> 00:15:25,160
calls the fictitious Hollywood studios

00:15:21,260 --> 00:15:28,329
API which is a graph QL API and returns

00:15:25,160 --> 00:15:31,010
the data merged together to the client

00:15:28,329 --> 00:15:32,360
by combining the two data sources it

00:15:31,010 --> 00:15:34,519
gives our air traffic controller

00:15:32,360 --> 00:15:38,480
unlimited options for fetching data from

00:15:34,519 --> 00:15:40,060
remote sources bringing it back to the

00:15:38,480 --> 00:15:42,709
future at ups

00:15:40,060 --> 00:15:44,390
breaking business capabilities into

00:15:42,709 --> 00:15:46,700
smaller modules meant that we had to

00:15:44,390 --> 00:15:48,860
find a solution for keeping our graph QL

00:15:46,700 --> 00:15:51,200
air traffic controller in sync with each

00:15:48,860 --> 00:15:55,820
new module that itself could be another

00:15:51,200 --> 00:15:57,740
graph QL API schema searching allows us

00:15:55,820 --> 00:15:59,510
to connect each new module into the air

00:15:57,740 --> 00:16:02,149
traffic controller without duplicating

00:15:59,510 --> 00:16:03,980
type definitions queries or mutations

00:16:02,149 --> 00:16:06,200
the air traffic controller is

00:16:03,980 --> 00:16:09,440
responsible for introspecting the remote

00:16:06,200 --> 00:16:11,690
schemas for each module and merging them

00:16:09,440 --> 00:16:14,810
together to build the universal API our

00:16:11,690 --> 00:16:16,339
friends will interact with the biggest

00:16:14,810 --> 00:16:19,670
benefits that we sell from this approach

00:16:16,339 --> 00:16:22,459
where each module is now responsible for

00:16:19,670 --> 00:16:24,560
maintaining their own credence each

00:16:22,459 --> 00:16:26,180
module is independently deployed instead

00:16:24,560 --> 00:16:27,589
of everything living in this huge

00:16:26,180 --> 00:16:30,170
massive codebase

00:16:27,589 --> 00:16:32,420
each module now has access to Earth's

00:16:30,170 --> 00:16:36,110
eye each front-end now has access to

00:16:32,420 --> 00:16:38,240
each modules queries and mutations from

00:16:36,110 --> 00:16:39,890
a single endpoint and the air traffic

00:16:38,240 --> 00:16:42,740
controller is responsible for knowing

00:16:39,890 --> 00:16:45,230
how to delegate parts of parts of the

00:16:42,740 --> 00:16:46,910
query to the relevant sub schemas it

00:16:45,230 --> 00:16:49,279
also provides the ability to add

00:16:46,910 --> 00:16:51,170
resolvers between schemas making it

00:16:49,279 --> 00:16:54,709
really easy to merge data from different

00:16:51,170 --> 00:16:58,070
modules schema switching at its most

00:16:54,709 --> 00:17:00,320
basic level is pretty easy to implement

00:16:58,070 --> 00:17:01,850
into your Apollo server today but I

00:17:00,320 --> 00:17:03,949
highly recommend everyone stick around

00:17:01,850 --> 00:17:06,890
the main ballroom for the 12 p.m. talk

00:17:03,949 --> 00:17:08,150
on the future schema composition as it

00:17:06,890 --> 00:17:10,760
is going to be a very exciting

00:17:08,150 --> 00:17:13,419
announcement well we are still using the

00:17:10,760 --> 00:17:16,429
current iteration in this phase of ups

00:17:13,419 --> 00:17:18,319
schema schema composition allows with

00:17:16,429 --> 00:17:20,059
our alliance with our direction of

00:17:18,319 --> 00:17:22,459
keeping modulars modules

00:17:20,059 --> 00:17:24,620
compartmentalized and contained we're

00:17:22,459 --> 00:17:26,900
really excited to for the future of

00:17:24,620 --> 00:17:30,260
schema composition and what it can do to

00:17:26,900 --> 00:17:33,520
help UPS in their air traffic controller

00:17:30,260 --> 00:17:33,520
when we build the future

00:17:36,850 --> 00:17:41,750
our work with ups is active and not

00:17:39,890 --> 00:17:43,910
every piece of our vision is complete

00:17:41,750 --> 00:17:46,070
but through this first phase poetics

00:17:43,910 --> 00:17:48,620
team has been very impressed with how

00:17:46,070 --> 00:17:50,720
easy it is to work with graphs ql in an

00:17:48,620 --> 00:17:53,090
enterprise environment there's often an

00:17:50,720 --> 00:17:55,310
impulse to shy away from using the

00:17:53,090 --> 00:17:57,230
newest technology in practice for fear

00:17:55,310 --> 00:17:59,330
of it not being ready we're not having a

00:17:57,230 --> 00:18:02,240
big enough name but we found a

00:17:59,330 --> 00:18:04,280
like-minded partner with ups and their

00:18:02,240 --> 00:18:07,640
vision with their vision who could see

00:18:04,280 --> 00:18:09,140
the benefits of using graph QL seeing

00:18:07,640 --> 00:18:11,060
that the Bennett that using graph 200

00:18:09,140 --> 00:18:13,850
was the clearest route to getting ahead

00:18:11,060 --> 00:18:16,640
in their business graph ul is truly the

00:18:13,850 --> 00:18:19,190
next chapter and a lighting Enterprise

00:18:16,640 --> 00:18:21,710
technology with over R to business

00:18:19,190 --> 00:18:23,510
capabilities ultimately our goal and

00:18:21,710 --> 00:18:26,780
UPS's goal is to deliver an amazing

00:18:23,510 --> 00:18:28,700
customer experience by reducing

00:18:26,780 --> 00:18:31,190
redundant technologies monitoring

00:18:28,700 --> 00:18:33,740
application performance and use prior to

00:18:31,190 --> 00:18:35,360
our initial launch and long after and

00:18:33,740 --> 00:18:38,780
being able to build on top of their

00:18:35,360 --> 00:18:40,040
existing dotnet REST API x' UPS has

00:18:38,780 --> 00:18:43,430
taken the next step

00:18:40,040 --> 00:18:44,840
and we're excited to keep pushing graph

00:18:43,430 --> 00:18:47,170
fuel and what we can do with future

00:18:44,840 --> 00:18:50,030
projects with ups and our other partners

00:18:47,170 --> 00:18:51,480
thank you for listening and enjoy the

00:18:50,030 --> 00:18:58,989
rest of summit

00:18:51,480 --> 00:18:58,989

YouTube URL: https://www.youtube.com/watch?v=OoHNwY9Rirw


