Title: Destined to Fail (Jesper Rasmussen)
Publication date: 2018-12-05
Playlist: GraphQL Summit 2018
Description: 
	Talk from GraphQL Summit 2018 - Nov 7, 2018

Jesper Rasmussen, Software Engineer at TV 2 Denmark, examines why you need GraphQL. Considering running a GraphQL API gateway? Have you ever thought about the number of things that could go wrong, when users consume the data exposed? What happens when a service you depend upon is gone? Whatâ€™s the maximum amount of data you could live without?

Learn more:  https://summit.graphql.com
Captions: 
	00:00:02,800 --> 00:00:10,629
all right so hello my name is Jesper I

00:00:07,750 --> 00:00:14,980
work as a software engineer at a Danish

00:00:10,629 --> 00:00:17,980
television company called tv2 and I'm

00:00:14,980 --> 00:00:20,920
here to talk about failure and it's not

00:00:17,980 --> 00:00:25,390
the most uplifting subject but it's

00:00:20,920 --> 00:00:27,280
pretty important at least for us and so

00:00:25,390 --> 00:00:31,150
I was trying to brainstorm for some

00:00:27,280 --> 00:00:33,610
tiles for the talk here and I came up

00:00:31,150 --> 00:00:41,200
with some different ideas so this is one

00:00:33,610 --> 00:00:44,440
of them and another one like a little

00:00:41,200 --> 00:00:47,079
bit click baby and this one basically my

00:00:44,440 --> 00:00:49,270
favorite so every time we have like an

00:00:47,079 --> 00:00:51,790
incident at tv2 every time our streaming

00:00:49,270 --> 00:00:54,010
service is down we categorize it as a

00:00:51,790 --> 00:00:57,370
major incident so this pretty much

00:00:54,010 --> 00:01:02,860
became synonymously with our basic

00:00:57,370 --> 00:01:05,350
entire spring but anyway none of the the

00:01:02,860 --> 00:01:07,799
tiles actually got good reviews at the

00:01:05,350 --> 00:01:09,909
test run I did recently so I basically

00:01:07,799 --> 00:01:15,880
figured I should stick to the original

00:01:09,909 --> 00:01:19,509
title but basically all about the tiles

00:01:15,880 --> 00:01:21,429
that I have considered are basically the

00:01:19,509 --> 00:01:26,920
same topic so it's about embracing

00:01:21,429 --> 00:01:28,539
failure so when we look at the ways

00:01:26,920 --> 00:01:32,709
different things can fail and especially

00:01:28,539 --> 00:01:37,359
in graph QL a lot of people will try to

00:01:32,709 --> 00:01:39,639
avoid having failures and we've done

00:01:37,359 --> 00:01:42,340
that as well and we've tried to seal off

00:01:39,639 --> 00:01:44,590
everything and make sure that you get a

00:01:42,340 --> 00:01:47,679
response every time but instead of

00:01:44,590 --> 00:01:49,630
actually doing that we figured at one

00:01:47,679 --> 00:01:52,299
point it would be may probably make

00:01:49,630 --> 00:01:54,459
better sense to have a look at instead

00:01:52,299 --> 00:01:56,289
of trying to avoid failure just figuring

00:01:54,459 --> 00:02:00,459
out how to handle it in a in a better

00:01:56,289 --> 00:02:03,759
way and just learn the most from it when

00:02:00,459 --> 00:02:07,239
it happens so to understand why why this

00:02:03,759 --> 00:02:09,090
is important to us at least let's try to

00:02:07,239 --> 00:02:14,050
have a look at the company I work for

00:02:09,090 --> 00:02:16,010
so cb2 is basically the largest Danish

00:02:14,050 --> 00:02:18,890
commercial television bra

00:02:16,010 --> 00:02:22,280
casters so we have the single most

00:02:18,890 --> 00:02:26,620
popular TV station in antutu in Denmark

00:02:22,280 --> 00:02:29,090
and as such we have a subscription-based

00:02:26,620 --> 00:02:32,450
streaming service that allows us to

00:02:29,090 --> 00:02:34,310
stream all our content and it's one of

00:02:32,450 --> 00:02:35,840
the most popular in Denmark as you can

00:02:34,310 --> 00:02:38,720
see in the bottom right there it's

00:02:35,840 --> 00:02:40,730
except for the yoga those guys we don't

00:02:38,720 --> 00:02:42,470
actually know how large Netflix is in

00:02:40,730 --> 00:02:45,920
Denmark because they don't want to give

00:02:42,470 --> 00:02:51,079
out any numbers but and we can actually

00:02:45,920 --> 00:02:54,739
share any numbers either so I just it's

00:02:51,079 --> 00:02:57,280
just safe to say that about 1 in 13 in

00:02:54,739 --> 00:03:01,159
Denmark has a paid subscription service

00:02:57,280 --> 00:03:04,700
paid subscription at our service and

00:03:01,159 --> 00:03:08,209
just a small side note here the entire

00:03:04,700 --> 00:03:11,299
population of Denmark is somewhere

00:03:08,209 --> 00:03:14,659
around in the middle of Los Angeles and

00:03:11,299 --> 00:03:20,150
New York so we're 5.7 million in in

00:03:14,659 --> 00:03:22,970
total so anyway the streaming service

00:03:20,150 --> 00:03:25,129
that we run everyone who has probably

00:03:22,970 --> 00:03:26,650
worked at a streaming service or

00:03:25,129 --> 00:03:29,629
something like that

00:03:26,650 --> 00:03:34,430
software's service kind of deal will

00:03:29,629 --> 00:03:37,579
know that customers are pretty picky

00:03:34,430 --> 00:03:40,910
around their services so if your service

00:03:37,579 --> 00:03:45,919
fails and especially in the case of our

00:03:40,910 --> 00:03:48,829
service people will leave so we tend to

00:03:45,919 --> 00:03:51,109
do live streaming whenever there's a

00:03:48,829 --> 00:03:54,859
soccer world cup for instance was one of

00:03:51,109 --> 00:03:57,260
our main events of this year and every

00:03:54,859 --> 00:04:00,949
time we have those events we will see a

00:03:57,260 --> 00:04:02,780
rise in traffic and and some added

00:04:00,949 --> 00:04:05,230
pressure to our entire setup and I'll

00:04:02,780 --> 00:04:10,510
get back to that shortly

00:04:05,230 --> 00:04:13,099
so let's have a look at the way that our

00:04:10,510 --> 00:04:17,479
services run so currently we're running

00:04:13,099 --> 00:04:19,880
a grafter lag as a gateway we're using

00:04:17,479 --> 00:04:22,580
Apollo server 1 we're looking into

00:04:19,880 --> 00:04:24,530
switching to server 2 as well but we

00:04:22,580 --> 00:04:26,680
haven't gotten around to it yet we're

00:04:24,530 --> 00:04:29,420
using the Facebook data loader for

00:04:26,680 --> 00:04:31,280
communicating with our rest services

00:04:29,420 --> 00:04:35,540
and I'll get back to the architecture of

00:04:31,280 --> 00:04:38,000
that shortly as well so right now most

00:04:35,540 --> 00:04:41,600
of our our client platforms are actually

00:04:38,000 --> 00:04:45,500
using graph QL we basically transition

00:04:41,600 --> 00:04:48,850
from having an old monolith into a bunch

00:04:45,500 --> 00:04:50,660
of different micro services and then

00:04:48,850 --> 00:04:52,160
originally all the clients would

00:04:50,660 --> 00:04:54,290
communicate straight with the micro

00:04:52,160 --> 00:04:57,830
services and we basically starting to

00:04:54,290 --> 00:05:00,980
seal those off so graph QL is becoming

00:04:57,830 --> 00:05:05,930
the single API endpoint for our our

00:05:00,980 --> 00:05:08,750
service and as you can see it's web iOS

00:05:05,930 --> 00:05:13,100
Android Apple TV and Smart TVs and

00:05:08,750 --> 00:05:15,440
Google cast and whatever so unlike an

00:05:13,100 --> 00:05:19,460
average day we have around 12 million

00:05:15,440 --> 00:05:22,400
queries and that's actually excluding a

00:05:19,460 --> 00:05:26,840
lot of the web queries because we're

00:05:22,400 --> 00:05:30,830
fortunate that web actually does they do

00:05:26,840 --> 00:05:32,480
like a static rendering of the pages so

00:05:30,830 --> 00:05:34,670
instead of them actually calling us

00:05:32,480 --> 00:05:38,180
every time a person goes to browse the

00:05:34,670 --> 00:05:41,180
web front page of of our service they

00:05:38,180 --> 00:05:44,000
will actually create static output like

00:05:41,180 --> 00:05:48,860
once every minute and just query us on

00:05:44,000 --> 00:05:51,230
at that time so we really like web so

00:05:48,860 --> 00:05:53,270
this is basically how our stack looks

00:05:51,230 --> 00:05:56,780
like so all the clients are talking

00:05:53,270 --> 00:05:59,330
directly to to the Gateway and they're

00:05:56,780 --> 00:06:02,030
talking graph QL of course and then the

00:05:59,330 --> 00:06:05,840
Gateway will communicate with our mark

00:06:02,030 --> 00:06:09,350
services using rest and we have not yet

00:06:05,840 --> 00:06:12,350
implemented graph QL on on the services

00:06:09,350 --> 00:06:12,890
we might do that at one point or not not

00:06:12,350 --> 00:06:15,800
yet at least

00:06:12,890 --> 00:06:17,930
and then as you'll notice in the bottom

00:06:15,800 --> 00:06:20,210
there's a lot of different external

00:06:17,930 --> 00:06:22,400
services and they have a lot of

00:06:20,210 --> 00:06:25,280
different emojis and those are basically

00:06:22,400 --> 00:06:26,990
to signal as we have some external

00:06:25,280 --> 00:06:29,120
services that we really like those are

00:06:26,990 --> 00:06:33,590
the unicorns and then we have some that

00:06:29,120 --> 00:06:36,290
we really try to avoid using but we have

00:06:33,590 --> 00:06:39,470
to but yeah just in general we have a

00:06:36,290 --> 00:06:43,220
lot of different dependencies on both

00:06:39,470 --> 00:06:45,350
internal and external services whenever

00:06:43,220 --> 00:06:47,570
goes to play some content or a service

00:06:45,350 --> 00:06:49,610
we have to figure out if they have the

00:06:47,570 --> 00:06:52,220
proper subscription if they have

00:06:49,610 --> 00:06:56,840
entitlement to watch the actual content

00:06:52,220 --> 00:06:59,480
they're trying to watch etcetera so as a

00:06:56,840 --> 00:07:02,330
newcomer that that might seem like a

00:06:59,480 --> 00:07:04,550
pretty solid setup and it basically is

00:07:02,330 --> 00:07:08,090
we got all the the different advantages

00:07:04,550 --> 00:07:11,570
from from searching to my to ref go like

00:07:08,090 --> 00:07:15,350
lower response times better packaging

00:07:11,570 --> 00:07:17,600
lower payloads stuff like that so it's

00:07:15,350 --> 00:07:20,900
pretty stable in general but as a wise

00:07:17,600 --> 00:07:26,120
man once said everything feels all the

00:07:20,900 --> 00:07:28,310
time so benefit from from Amazon was

00:07:26,120 --> 00:07:30,530
actually a question that at one point

00:07:28,310 --> 00:07:33,230
enhance your interview around how they

00:07:30,530 --> 00:07:35,000
avoided having failure and he said well

00:07:33,230 --> 00:07:38,090
everything fails all the time so it's

00:07:35,000 --> 00:07:40,580
not a matter of how show boy failure

00:07:38,090 --> 00:07:44,540
it's a matter of limiting the time

00:07:40,580 --> 00:07:47,000
between failure and actual recovery so

00:07:44,540 --> 00:07:49,640
they basically build a culture around

00:07:47,000 --> 00:07:52,130
embracing failure and instead of trying

00:07:49,640 --> 00:07:56,180
to avoid it figure out how to recover

00:07:52,130 --> 00:08:00,550
from it as fast as possible alright so

00:07:56,180 --> 00:08:04,220
moving back to the the architecture here

00:08:00,550 --> 00:08:06,590
so based on that based on the fact that

00:08:04,220 --> 00:08:08,750
we will have failure so from our point

00:08:06,590 --> 00:08:12,710
of view the most error-prone parts of

00:08:08,750 --> 00:08:15,560
our setup is this so basically

00:08:12,710 --> 00:08:20,570
everything below our graphical server is

00:08:15,560 --> 00:08:22,370
is at risk at some point or at least is

00:08:20,570 --> 00:08:25,450
the the part that we can count the the

00:08:22,370 --> 00:08:30,440
least on all right so what happens when

00:08:25,450 --> 00:08:32,450
when these start to fail so look at some

00:08:30,440 --> 00:08:34,580
of the common things that that can occur

00:08:32,450 --> 00:08:36,200
when you are running a gateway and

00:08:34,580 --> 00:08:40,219
you're talking to other services so

00:08:36,200 --> 00:08:41,990
first off unexpected response from a

00:08:40,219 --> 00:08:45,440
service so one of the things that we've

00:08:41,990 --> 00:08:49,370
seen done both at our place and also

00:08:45,440 --> 00:08:52,510
others too is that you kind of depend on

00:08:49,370 --> 00:08:55,010
a service that are returning an array of

00:08:52,510 --> 00:08:56,570
some entities that you want to expose

00:08:55,010 --> 00:08:57,800
using graphical and

00:08:56,570 --> 00:08:59,840
all the sudden the service starts

00:08:57,800 --> 00:09:02,540
replying with a single object

00:08:59,840 --> 00:09:05,510
so you're basically expecting an array

00:09:02,540 --> 00:09:06,970
and then instead you're you're getting

00:09:05,510 --> 00:09:09,830
something completely different

00:09:06,970 --> 00:09:11,600
we've seen that a few times and what

00:09:09,830 --> 00:09:12,770
basically the worst thing that can

00:09:11,600 --> 00:09:15,380
happen is that you're getting like an

00:09:12,770 --> 00:09:18,590
HTML standard error page from an engine

00:09:15,380 --> 00:09:21,470
X or Apache and that's pretty lousy if

00:09:18,590 --> 00:09:24,830
you're expecting JSON but basically

00:09:21,470 --> 00:09:26,840
that's based on assumption so you're

00:09:24,830 --> 00:09:29,360
assuming that the service you're calling

00:09:26,840 --> 00:09:30,950
is returning something and you should

00:09:29,360 --> 00:09:32,720
never assume things especially when

00:09:30,950 --> 00:09:35,090
you're dealing with other people other

00:09:32,720 --> 00:09:39,800
developers other services that you don't

00:09:35,090 --> 00:09:41,690
control all right so the next thing the

00:09:39,800 --> 00:09:44,870
response is to transparent so I'm

00:09:41,690 --> 00:09:47,600
guessing most of you who have dealt with

00:09:44,870 --> 00:09:51,370
graphical before I've seen an error

00:09:47,600 --> 00:09:55,430
array like this or something similar so

00:09:51,370 --> 00:09:57,950
one of the things that we usually see in

00:09:55,430 --> 00:10:02,990
both at our company and other places is

00:09:57,950 --> 00:10:06,110
that developers tend to figure out a way

00:10:02,990 --> 00:10:09,320
to automate error handling as much as

00:10:06,110 --> 00:10:12,500
possible which is a good thing but also

00:10:09,320 --> 00:10:13,940
it means that if you're doing that you

00:10:12,500 --> 00:10:16,280
might have end up in a situation where

00:10:13,940 --> 00:10:18,590
you're basically providing a strike

00:10:16,280 --> 00:10:21,560
trace to your client which is pretty

00:10:18,590 --> 00:10:25,220
cool if it's an interim plant but from

00:10:21,560 --> 00:10:28,610
our case we had an issue at one point

00:10:25,220 --> 00:10:32,500
where we figured out that by delivering

00:10:28,610 --> 00:10:35,540
a stack trace to to the client we would

00:10:32,500 --> 00:10:37,730
unexpectedly actually reveal our

00:10:35,540 --> 00:10:39,590
back-end structure so we had some

00:10:37,730 --> 00:10:42,200
internal services that were being called

00:10:39,590 --> 00:10:44,480
in a specific manner and by delivering a

00:10:42,200 --> 00:10:47,120
stack trace to the client we were

00:10:44,480 --> 00:10:49,010
actually exposing where the internal

00:10:47,120 --> 00:10:52,250
services were running and actually also

00:10:49,010 --> 00:10:56,510
how they were functioning so don't do

00:10:52,250 --> 00:10:58,780
that that's the basic idea of handling

00:10:56,510 --> 00:11:02,750
that I'll get back to that shortly

00:10:58,780 --> 00:11:05,330
yeah so let's have a look at those so

00:11:02,750 --> 00:11:07,850
basically if you want to handle those

00:11:05,330 --> 00:11:10,280
two types of failure there are a lot of

00:11:07,850 --> 00:11:11,530
different things you can do so first of

00:11:10,280 --> 00:11:14,270
all

00:11:11,530 --> 00:11:17,960
make sure that your clients are actually

00:11:14,270 --> 00:11:20,800
able to handle the arrows you throw we

00:11:17,960 --> 00:11:25,550
had a bunch of different error types in

00:11:20,800 --> 00:11:27,680
in our API and we figured out at one

00:11:25,550 --> 00:11:32,020
point so the client developers were just

00:11:27,680 --> 00:11:36,700
basically doing assumptions based on

00:11:32,020 --> 00:11:39,650
naming of errors we were thrown and that

00:11:36,700 --> 00:11:43,190
basically cost some issues where you you

00:11:39,650 --> 00:11:45,770
had client code that were doing string

00:11:43,190 --> 00:11:51,710
comparisons just to check on an error

00:11:45,770 --> 00:11:53,930
type so basically don't do that another

00:11:51,710 --> 00:11:58,210
suggestion is make sure you wrap your

00:11:53,930 --> 00:12:01,280
errors so lock whatever you need to lock

00:11:58,210 --> 00:12:03,800
in order to be able to debug the issue

00:12:01,280 --> 00:12:05,840
you you're experiencing and then just

00:12:03,800 --> 00:12:08,540
expose the bare minimum for the client

00:12:05,840 --> 00:12:13,550
developer to actually do his debugging

00:12:08,540 --> 00:12:15,530
as well yeah so automation automation of

00:12:13,550 --> 00:12:18,740
errors is a good idea but just make sure

00:12:15,530 --> 00:12:20,450
that you're not overdoing it

00:12:18,740 --> 00:12:23,630
from the final one is mock your

00:12:20,450 --> 00:12:27,890
dependencies so one of the things that

00:12:23,630 --> 00:12:29,660
we experienced is that during spring we

00:12:27,890 --> 00:12:31,310
had some issues which I'll get back to

00:12:29,660 --> 00:12:36,320
with slow services that we were

00:12:31,310 --> 00:12:38,470
depending on so in order to handle those

00:12:36,320 --> 00:12:41,900
from Norris who work a ring around them

00:12:38,470 --> 00:12:43,250
it's pretty good idea to try to make a

00:12:41,900 --> 00:12:45,620
mock of those there are different ways

00:12:43,250 --> 00:12:54,400
of doing that when I'll actually show an

00:12:45,620 --> 00:12:58,910
example later on alright so another one

00:12:54,400 --> 00:13:00,170
slow response from services and those

00:12:58,910 --> 00:13:02,230
can basically be caused by a lot of

00:13:00,170 --> 00:13:06,260
different factors like a slow network

00:13:02,230 --> 00:13:09,980
service that is overburdened stuff like

00:13:06,260 --> 00:13:13,640
that and this is basically a graph from

00:13:09,980 --> 00:13:17,690
back in February on our streaming

00:13:13,640 --> 00:13:22,580
service so this is like a regular Monday

00:13:17,690 --> 00:13:24,710
night during February we were kind of

00:13:22,580 --> 00:13:26,930
stressed out in February

00:13:24,710 --> 00:13:29,870
so what's happening here is this is

00:13:26,930 --> 00:13:32,000
basically the the average response time

00:13:29,870 --> 00:13:35,720
from our gateway and as you'll notice

00:13:32,000 --> 00:13:38,930
here at 8 p.m. there's like a slight

00:13:35,720 --> 00:13:42,020
peak in in the response time so what

00:13:38,930 --> 00:13:44,870
happened was that at 8 o'clock we had a

00:13:42,020 --> 00:13:49,160
really really popular TV show that went

00:13:44,870 --> 00:13:50,690
on-air in the traditional broadcast so

00:13:49,160 --> 00:13:52,130
at that point a lot of people were tuned

00:13:50,690 --> 00:13:54,860
into a streaming service just to watch

00:13:52,130 --> 00:13:59,060
it live and that was ok we could handle

00:13:54,860 --> 00:14:02,870
that but the problem was like 40 minutes

00:13:59,060 --> 00:14:04,670
after when the program was ending there

00:14:02,870 --> 00:14:07,280
was like a speaker announcement every

00:14:04,670 --> 00:14:09,530
single time and they said ok so you've

00:14:07,280 --> 00:14:11,960
seen this episode you can watch the next

00:14:09,530 --> 00:14:13,550
episode if you're using our streaming

00:14:11,960 --> 00:14:14,930
service just go to the streaming service

00:14:13,550 --> 00:14:18,500
now and you can watch the next episode

00:14:14,930 --> 00:14:20,720
so what happened was usually within 1-2

00:14:18,500 --> 00:14:25,040
minutes our traffic would increase by a

00:14:20,720 --> 00:14:26,750
thousand percent and at that point we

00:14:25,040 --> 00:14:28,940
had some some slow services we were

00:14:26,750 --> 00:14:29,840
unaware of because we didn't see the

00:14:28,940 --> 00:14:33,350
patterns emerging

00:14:29,840 --> 00:14:38,270
on a regular day only when we had like

00:14:33,350 --> 00:14:42,260
really massive load so what's worse than

00:14:38,270 --> 00:14:43,700
then the actual response time going up

00:14:42,260 --> 00:14:47,840
what's this

00:14:43,700 --> 00:14:52,100
so this is our error rates and basically

00:14:47,840 --> 00:14:53,870
within 10 minutes from when the sneak

00:14:52,100 --> 00:14:56,450
preview of the next episode was was

00:14:53,870 --> 00:15:00,410
available during the 10 minutes after

00:14:56,450 --> 00:15:02,330
that we would have around 110 120

00:15:00,410 --> 00:15:05,240
thousand internal request timeouts

00:15:02,330 --> 00:15:09,170
between services which basically

00:15:05,240 --> 00:15:11,330
resulted in thousands of customers who

00:15:09,170 --> 00:15:17,180
were unable to playback content or even

00:15:11,330 --> 00:15:18,050
unable to browse our service so the

00:15:17,180 --> 00:15:20,720
problems we were having

00:15:18,050 --> 00:15:23,270
we ended up figuring out that those were

00:15:20,720 --> 00:15:26,810
basically related to a single network

00:15:23,270 --> 00:15:29,180
issue which caused a slight delay in a

00:15:26,810 --> 00:15:32,060
single service which ended up basically

00:15:29,180 --> 00:15:36,620
causing a cascading failure across the

00:15:32,060 --> 00:15:38,430
board so one of the things we learned

00:15:36,620 --> 00:15:40,020
from that and

00:15:38,430 --> 00:15:42,300
basically one of the biggest issues that

00:15:40,020 --> 00:15:46,279
we've had over the last year has been

00:15:42,300 --> 00:15:50,670
internal network traffic either through

00:15:46,279 --> 00:15:52,890
network problems or basically the way

00:15:50,670 --> 00:15:57,060
our infrastructure was running we're

00:15:52,890 --> 00:16:00,630
running a darker set up and right now we

00:15:57,060 --> 00:16:03,570
move to using Q bonitas which basically

00:16:00,630 --> 00:16:07,140
fixed a lot of the network issues but to

00:16:03,570 --> 00:16:09,480
make sure that we handle like Network

00:16:07,140 --> 00:16:13,490
timeouts in a more decent fashion we

00:16:09,480 --> 00:16:19,430
basically looked into another way of

00:16:13,490 --> 00:16:22,440
basically securing our our gateway so

00:16:19,430 --> 00:16:24,990
let's have a look at that so I don't

00:16:22,440 --> 00:16:28,740
know how many of you who know the the

00:16:24,990 --> 00:16:31,830
circuit breaker pattern it was basically

00:16:28,740 --> 00:16:33,990
made popular by a guy called Michael

00:16:31,830 --> 00:16:38,490
Nygaard in a book called release it

00:16:33,990 --> 00:16:41,130
which is a really good book and it's

00:16:38,490 --> 00:16:44,610
basically a way of handling cascading

00:16:41,130 --> 00:16:46,380
failure isolating faulty systems you

00:16:44,610 --> 00:16:49,940
have and sparing them from actually

00:16:46,380 --> 00:16:53,520
being even more overloaded

00:16:49,940 --> 00:16:55,529
so the pattern basically is named by a

00:16:53,520 --> 00:16:57,209
traditional circuit panel circuit

00:16:55,529 --> 00:16:59,880
breaker of course like the one you have

00:16:57,209 --> 00:17:03,810
in your house and the concept here is

00:16:59,880 --> 00:17:07,679
pretty simple so it's a matter of

00:17:03,810 --> 00:17:11,339
failing fast and so what a circuit

00:17:07,679 --> 00:17:13,439
breaker usually will do is when it's

00:17:11,339 --> 00:17:15,780
running normally it's running in the so

00:17:13,439 --> 00:17:19,920
called closed state so it's doing that

00:17:15,780 --> 00:17:24,449
for for every request and then you can

00:17:19,920 --> 00:17:29,850
set up parameters like so if if I have

00:17:24,449 --> 00:17:33,210
five succeed five failing requests after

00:17:29,850 --> 00:17:35,780
after another the circuit breaker will

00:17:33,210 --> 00:17:39,059
will transition into an open state and

00:17:35,780 --> 00:17:40,950
what that means is that when the circuit

00:17:39,059 --> 00:17:42,990
breaker is in an open state instead of

00:17:40,950 --> 00:17:43,520
actually contacting the service that's

00:17:42,990 --> 00:17:46,669
failing

00:17:43,520 --> 00:17:51,179
just give it just give back like a

00:17:46,669 --> 00:17:52,650
standard response and then usually after

00:17:51,179 --> 00:17:56,130
a period of time

00:17:52,650 --> 00:17:59,550
or a number of attempts you can say okay

00:17:56,130 --> 00:18:01,950
so we've waited ten seconds the circuit

00:17:59,550 --> 00:18:04,110
breaker will let one request through to

00:18:01,950 --> 00:18:06,630
the actual service and if that still

00:18:04,110 --> 00:18:09,240
fails the circuit breaker will go back

00:18:06,630 --> 00:18:12,750
into open state and still just return

00:18:09,240 --> 00:18:17,940
the default answer in case the actual

00:18:12,750 --> 00:18:19,590
request you send through succeeds you

00:18:17,940 --> 00:18:23,220
will move back to the closed State and

00:18:19,590 --> 00:18:37,460
everything's working normally all right

00:18:23,220 --> 00:18:37,460
so demo time just gonna see here

00:18:48,590 --> 00:18:58,970
all right so basically what I have here

00:18:59,330 --> 00:19:07,680
what I have here is a pretty standard

00:19:02,820 --> 00:19:09,240
Apollo server one implementation it's

00:19:07,680 --> 00:19:12,150
basically the same as you would see in

00:19:09,240 --> 00:19:16,710
the default example that that they used

00:19:12,150 --> 00:19:19,140
to run so just to make this appropriate

00:19:16,710 --> 00:19:21,990
for for my talk I've changed the

00:19:19,140 --> 00:19:23,310
original which is based on books so now

00:19:21,990 --> 00:19:26,670
it's movies of course because it's a

00:19:23,310 --> 00:19:30,330
streaming service so basically what I'm

00:19:26,670 --> 00:19:33,810
doing here is I have a service running

00:19:30,330 --> 00:19:38,220
on my laptop which just basically gives

00:19:33,810 --> 00:19:40,410
me a list of movies so right now the

00:19:38,220 --> 00:19:46,620
service actually responds pretty quickly

00:19:40,410 --> 00:19:50,220
and I'm exposing that to graph QL by

00:19:46,620 --> 00:19:52,740
using this pretty simple schema and just

00:19:50,220 --> 00:19:56,100
fetching through like a default

00:19:52,740 --> 00:19:58,320
implementation fetch some movies within

00:19:56,100 --> 00:20:05,400
two seconds and then just give me JSON

00:19:58,320 --> 00:20:07,020
back all right so you'll notice that I'm

00:20:05,400 --> 00:20:09,030
basically just asking for movies

00:20:07,020 --> 00:20:12,150
give me the tile give me the description

00:20:09,030 --> 00:20:14,630
and when I fire the request response

00:20:12,150 --> 00:20:18,270
pretty pretty quickly

00:20:14,630 --> 00:20:20,040
but what happens if all of the sudden

00:20:18,270 --> 00:20:24,480
this service that I built starts

00:20:20,040 --> 00:20:27,000
responding really slow so let's have a

00:20:24,480 --> 00:20:31,950
look at that I'm just going to move to

00:20:27,000 --> 00:20:35,130
there so what I did is the service right

00:20:31,950 --> 00:20:38,330
now is running through a stubbing tool

00:20:35,130 --> 00:20:40,650
called mountebank which we use for

00:20:38,330 --> 00:20:43,650
basically marking all our dependencies

00:20:40,650 --> 00:20:45,690
and the cool thing about months Bank is

00:20:43,650 --> 00:20:47,970
that you're able to basically use it as

00:20:45,690 --> 00:20:49,980
a proxy so you can send requests through

00:20:47,970 --> 00:20:51,890
months Bank and it will go to the

00:20:49,980 --> 00:20:55,350
service that you're depending on and

00:20:51,890 --> 00:20:57,660
record basically all of the request

00:20:55,350 --> 00:21:00,090
response which means that you can

00:20:57,660 --> 00:21:02,010
basically replay them at a later point

00:21:00,090 --> 00:21:04,620
but one of the other cool things that

00:21:02,010 --> 00:21:08,760
you can do is that you can tell months

00:21:04,620 --> 00:21:12,990
bank that hey wait for like a second or

00:21:08,760 --> 00:21:16,230
two before you actually respond so it's

00:21:12,990 --> 00:21:19,050
basically based on JSON so I'm just

00:21:16,230 --> 00:21:21,780
going to inject this is basically the

00:21:19,050 --> 00:21:23,880
imposter setup that I set up for this

00:21:21,780 --> 00:21:26,790
demo so you'll notice here it's just

00:21:23,880 --> 00:21:29,400
it's just the Ison party that is

00:21:26,790 --> 00:21:32,640
returning right now and it's set to wait

00:21:29,400 --> 00:21:35,580
for a thousand milliseconds but what

00:21:32,640 --> 00:21:38,460
happens if I say hey just just wait for

00:21:35,580 --> 00:21:41,550
ten seconds in step as I look at how our

00:21:38,460 --> 00:21:44,730
service will react then so I'm just

00:21:41,550 --> 00:21:49,620
going to go back here and do the same

00:21:44,730 --> 00:21:51,530
request and it's waiting for for two

00:21:49,620 --> 00:21:54,030
seconds and this is like the default

00:21:51,530 --> 00:21:57,120
Network timeout so I just got a fetch

00:21:54,030 --> 00:22:03,240
and it waited two seconds and it said it

00:21:57,120 --> 00:22:06,510
timed out alright and that's one way of

00:22:03,240 --> 00:22:08,880
doing it but of course every time I'm

00:22:06,510 --> 00:22:11,340
doing this request what happens is graph

00:22:08,880 --> 00:22:14,760
QL or the Apollo server will actually

00:22:11,340 --> 00:22:16,830
try to talk to the service that is this

00:22:14,760 --> 00:22:20,040
giving giving me the the movies of

00:22:16,830 --> 00:22:23,250
course which in term could mean that the

00:22:20,040 --> 00:22:26,100
services being basically crashed by me

00:22:23,250 --> 00:22:30,890
because I'm doing more requests and it

00:22:26,100 --> 00:22:36,140
doesn't have any time to recover okay so

00:22:30,890 --> 00:22:38,840
let's see how that would work if I did a

00:22:36,140 --> 00:22:45,170
circuit breaker implementation is that

00:22:38,840 --> 00:22:48,270
so for this camera just used an

00:22:45,170 --> 00:22:52,340
implementation called hystrix Jas which

00:22:48,270 --> 00:22:55,290
basically is based on Netflix did a

00:22:52,340 --> 00:22:57,390
library for doing circuit breaker called

00:22:55,290 --> 00:23:01,140
hystrix and we're actually using that

00:22:57,390 --> 00:23:03,390
for some of our Java services to limit

00:23:01,140 --> 00:23:06,480
the way they talk to other services as

00:23:03,390 --> 00:23:09,000
well and there's like a JavaScript

00:23:06,480 --> 00:23:10,470
version of that which basically

00:23:09,000 --> 00:23:13,070
implements the entire circuit breaker

00:23:10,470 --> 00:23:15,150
panel so let's just have a look at that

00:23:13,070 --> 00:23:15,900
so I'm just going to switch to using

00:23:15,150 --> 00:23:18,570
history

00:23:15,900 --> 00:23:20,280
since that and the previous

00:23:18,570 --> 00:23:22,500
implementation was pretty simple so it's

00:23:20,280 --> 00:23:25,860
just like fetch this and then when you

00:23:22,500 --> 00:23:29,190
get a response converted to JSON so what

00:23:25,860 --> 00:23:33,180
hystrix does is instead of just actually

00:23:29,190 --> 00:23:38,010
just firing your request you wrap it

00:23:33,180 --> 00:23:41,790
inside a command so in this example I've

00:23:38,010 --> 00:23:44,940
basically just said okay give me a

00:23:41,790 --> 00:23:48,690
command structure and then run this

00:23:44,940 --> 00:23:50,700
function which basically just says okay

00:23:48,690 --> 00:23:52,340
so fetch the movies which is the same

00:23:50,700 --> 00:23:54,780
implementation that I used to have and

00:23:52,340 --> 00:23:57,630
then just return it to JSON so if

00:23:54,780 --> 00:24:02,190
everything just goes well it'll just act

00:23:57,630 --> 00:24:05,400
just like it did before but if not it'll

00:24:02,190 --> 00:24:10,860
just basically reject my promise and

00:24:05,400 --> 00:24:15,840
just give me a null value back so I'm

00:24:10,860 --> 00:24:19,530
just going to run that here okay so

00:24:15,840 --> 00:24:24,300
let's see what happens now so this is a

00:24:19,530 --> 00:24:26,730
live demo this is not good all right so

00:24:24,300 --> 00:24:28,860
you'll notice here that it said instead

00:24:26,730 --> 00:24:32,520
of this network timeout I'm now getting

00:24:28,860 --> 00:24:34,890
like a response here and the service

00:24:32,520 --> 00:24:37,020
over here said that the service that the

00:24:34,890 --> 00:24:40,790
craft girl was talking to has timed out

00:24:37,020 --> 00:24:44,940
so I'm going to do a few more requests

00:24:40,790 --> 00:24:47,580
and you'll notice that it just keeps

00:24:44,940 --> 00:24:49,020
failing but each time it's actually

00:24:47,580 --> 00:24:53,460
talking to a search to figure out if

00:24:49,020 --> 00:24:55,830
it's working up until now so what's

00:24:53,460 --> 00:24:58,290
happening now is that it's not letting

00:24:55,830 --> 00:25:02,580
any requests through so I can do this

00:24:58,290 --> 00:25:04,260
all day long and it won't it's basically

00:25:02,580 --> 00:25:06,210
just the graphical server that just

00:25:04,260 --> 00:25:08,610
gives me a standard response telling me

00:25:06,210 --> 00:25:11,280
to back off because the service that I'm

00:25:08,610 --> 00:25:16,760
trying to get to is probably in a

00:25:11,280 --> 00:25:20,040
default difficult state all right so

00:25:16,760 --> 00:25:22,770
I've set a window - I think it's like 20

00:25:20,040 --> 00:25:25,980
seconds so after 20 seconds it'll try to

00:25:22,770 --> 00:25:28,080
send a single request through just to

00:25:25,980 --> 00:25:29,149
measure if the service is actually okay

00:25:28,080 --> 00:25:32,330
or not

00:25:29,149 --> 00:25:34,639
so it lets one through and there's still

00:25:32,330 --> 00:25:40,399
a timeout so it reverts back into the

00:25:34,639 --> 00:25:43,460
open state okay so basically now the

00:25:40,399 --> 00:25:45,769
service that is less being overburdened

00:25:43,460 --> 00:25:47,599
it's only getting a single request every

00:25:45,769 --> 00:25:52,369
ten or twenty seconds I can remember

00:25:47,599 --> 00:25:54,679
actually so what happens when I go back

00:25:52,369 --> 00:26:02,629
to this service actually responding

00:25:54,679 --> 00:26:05,269
quickly again let's go back here so some

00:26:02,629 --> 00:26:06,950
time is passed and possibly this one

00:26:05,269 --> 00:26:10,190
query that I'm going to execute now will

00:26:06,950 --> 00:26:11,899
be passed through it is and then you'll

00:26:10,190 --> 00:26:14,929
notice that the service is actually

00:26:11,899 --> 00:26:17,749
responding as intended again and this

00:26:14,929 --> 00:26:21,159
the circuit is closed and we're back to

00:26:17,749 --> 00:26:30,399
actually calling the service each time

00:26:21,159 --> 00:26:30,399
alright so just going to go back to this

00:26:35,050 --> 00:26:46,310
there you go okay so as you notice here

00:26:42,500 --> 00:26:49,010
I had like five failing requests until

00:26:46,310 --> 00:26:52,250
the health is actually calculated and

00:26:49,010 --> 00:26:55,850
then it moved into an open state then it

00:26:52,250 --> 00:26:57,710
had a delay ten seconds and then

00:26:55,850 --> 00:27:01,010
afterward ten seconds it let's run

00:26:57,710 --> 00:27:03,050
through and as you noticed that once it

00:27:01,010 --> 00:27:05,240
failed it would return to the home state

00:27:03,050 --> 00:27:07,760
when when it succeeded and the service

00:27:05,240 --> 00:27:10,480
was recovering everything went very well

00:27:07,760 --> 00:27:15,140
and we went back to the closed State

00:27:10,480 --> 00:27:16,430
okay so just to recap some of the things

00:27:15,140 --> 00:27:19,760
that we talked about

00:27:16,430 --> 00:27:23,270
so basically when you're doing error

00:27:19,760 --> 00:27:26,090
handling or doing graphical as an API

00:27:23,270 --> 00:27:28,490
gateway keep in mind that you really

00:27:26,090 --> 00:27:30,770
don't know what you're providing in a

00:27:28,490 --> 00:27:33,710
sense that you're depending on a lot of

00:27:30,770 --> 00:27:37,130
services that are lying below your field

00:27:33,710 --> 00:27:39,830
of work possibly and you need to make

00:27:37,130 --> 00:27:42,320
sure that whenever you're talking to

00:27:39,830 --> 00:27:47,120
other services that you abstract them in

00:27:42,320 --> 00:27:49,130
a decent way and it's also pretty

00:27:47,120 --> 00:27:51,140
important that when you're talking to

00:27:49,130 --> 00:27:54,560
other services that you actually are

00:27:51,140 --> 00:27:58,430
able to debug the communication you have

00:27:54,560 --> 00:28:03,980
with with those sources measure measure

00:27:58,430 --> 00:28:07,370
and measure so whenever if whenever you

00:28:03,980 --> 00:28:10,190
have an issue with service being faulty

00:28:07,370 --> 00:28:12,260
or something going wrong make sure you

00:28:10,190 --> 00:28:15,710
have a lot of measurements we have like

00:28:12,260 --> 00:28:18,770
a ton of measurements on basically

00:28:15,710 --> 00:28:21,290
everything that happens when a query is

00:28:18,770 --> 00:28:25,010
fired on a gateway through to each

00:28:21,290 --> 00:28:27,080
separate call down the line along with

00:28:25,010 --> 00:28:28,970
of course logging for for each step as

00:28:27,080 --> 00:28:34,090
well especially when things go wrong

00:28:28,970 --> 00:28:38,690
it's pretty neat to have decent tracing

00:28:34,090 --> 00:28:41,210
all right communication is hard so if

00:28:38,690 --> 00:28:44,630
you're talking to client developers and

00:28:41,210 --> 00:28:47,149
you're basically exposing your API to a

00:28:44,630 --> 00:28:50,330
client developer make sure that

00:28:47,149 --> 00:28:52,399
your data and your errors are not up for

00:28:50,330 --> 00:28:55,789
interpretation so we've had like

00:28:52,399 --> 00:28:58,820
different client developers doing their

00:28:55,789 --> 00:29:01,219
own interpretation of our API and the

00:28:58,820 --> 00:29:04,549
errors they got back which basically led

00:29:01,219 --> 00:29:08,239
to different clients doing different

00:29:04,549 --> 00:29:10,759
ways of handling the errors some smart

00:29:08,239 --> 00:29:12,950
TVs for instance just throwing JSON at

00:29:10,759 --> 00:29:13,899
the face of the user that's not a good

00:29:12,950 --> 00:29:17,239
idea

00:29:13,899 --> 00:29:18,769
so yeah talk to a client developers and

00:29:17,239 --> 00:29:23,239
make sure that you're on the same page

00:29:18,769 --> 00:29:25,429
and finally mock your dependencies so

00:29:23,239 --> 00:29:28,429
whenever possible use something like

00:29:25,429 --> 00:29:31,729
wire mock or months Bank and you can

00:29:28,429 --> 00:29:34,039
proxy your your service calls and make

00:29:31,729 --> 00:29:36,409
sure that everything is working just as

00:29:34,039 --> 00:29:38,920
like just as you wanted and that's

00:29:36,409 --> 00:29:43,170
basically it thank you

00:29:38,920 --> 00:29:45,230
[Applause]

00:29:43,170 --> 00:29:45,230

YouTube URL: https://www.youtube.com/watch?v=K6_GVXsT8Zs


