Title: A Fullstack GraphQL App in 2 Minutes with the Vue CLI and Apollo (Guillaume Chau)
Publication date: 2018-12-05
Playlist: GraphQL Summit 2018
Description: 
	Talk from GraphQL Summit 2018 - Nov 7, 2018

Guillaume Chau is a Vue.js Core Team member working on vue-cli, vue-devtools and vue-curated. He also created of the integrations with Apollo GraphQL (vue-apollo) and Meteor (vue-meteor) to help developer build highly interactive and realtime Vue-powered apps, and he contributes to the ecosystem with tools like vue-virtual-scroller and v-tooltip. The new Vue CLI is now the standard build tools to create Vue.js app. With its plugin system, you can add new features like Apollo GraphQL in an instant. Only a few minutes are required to create a full-stack Vue.js and GraphQL app and then you can start creating the next killer-app!

Learn more:  https://summit.graphql.com
Captions: 
	00:00:03,480 --> 00:00:12,789
okay so hi everyone yeah today I'm going

00:00:09,430 --> 00:00:15,430
to talk about you and how it like fits

00:00:12,789 --> 00:00:18,910
into the graph cable ecosystem and the

00:00:15,430 --> 00:00:21,400
graph community I'm also going to talk

00:00:18,910 --> 00:00:25,180
about user ID which is something I've

00:00:21,400 --> 00:00:29,320
been working on this year so I'm

00:00:25,180 --> 00:00:37,030
Guillaume you can find me on Twitter at

00:00:29,320 --> 00:00:38,650
Actium yeah it's a bit cat so first I'm

00:00:37,030 --> 00:00:42,030
going to talk about yesterday I know you

00:00:38,650 --> 00:00:46,600
you can create you project very quickly

00:00:42,030 --> 00:00:49,680
then I go over to the Apollo integration

00:00:46,600 --> 00:00:53,020
and then talk about a little bit about

00:00:49,680 --> 00:00:57,760
server-side rendering so first creating

00:00:53,020 --> 00:01:01,030
a project with you slide which is a new

00:00:57,760 --> 00:01:04,030
tool we list this year so you can

00:01:01,030 --> 00:01:06,880
install it with this package at UCLA and

00:01:04,030 --> 00:01:12,030
it's basically the tool that allows you

00:01:06,880 --> 00:01:18,670
to create develop build and deploy on

00:01:12,030 --> 00:01:22,359
anything really your app so it's a very

00:01:18,670 --> 00:01:25,029
flexible and very powerful tool so it's

00:01:22,359 --> 00:01:26,740
previously the view slag was just the

00:01:25,029 --> 00:01:29,819
scaffolding tool to generate new

00:01:26,740 --> 00:01:33,579
projects and now it's way more powerful

00:01:29,819 --> 00:01:35,950
so how to get started using it install

00:01:33,579 --> 00:01:38,709
the package globally then use the view

00:01:35,950 --> 00:01:41,859
create command to create the new project

00:01:38,709 --> 00:01:45,549
then you can go into the project and

00:01:41,859 --> 00:01:49,270
then use the civil the few commands

00:01:45,549 --> 00:01:52,419
available to you like self to to start

00:01:49,270 --> 00:01:55,389
to development a server using webpack or

00:01:52,419 --> 00:02:00,729
for example build to create the

00:01:55,389 --> 00:02:03,249
distribution files and it's like built

00:02:00,729 --> 00:02:07,179
with a lot of features like we're back

00:02:03,249 --> 00:02:07,899
for latest bball and like a lot of

00:02:07,179 --> 00:02:11,460
things

00:02:07,899 --> 00:02:13,920
typescript PWA a modern mode with a

00:02:11,460 --> 00:02:18,320
I built for modern brothers on the bill

00:02:13,920 --> 00:02:21,930
for legacy browsers and all the like

00:02:18,320 --> 00:02:24,330
popular testing frameworks everything

00:02:21,930 --> 00:02:28,430
you can see is built-in in side view

00:02:24,330 --> 00:02:33,180
slide which is great how do we do this

00:02:28,430 --> 00:02:35,370
because yeah that's a lot of things so

00:02:33,180 --> 00:02:38,430
we built a new a system which is based

00:02:35,370 --> 00:02:42,210
on plugins and it allows you to pick the

00:02:38,430 --> 00:02:45,630
features you really want and like mix

00:02:42,210 --> 00:02:47,940
them up together and also if you forgot

00:02:45,630 --> 00:02:51,390
to add something you can add it later so

00:02:47,940 --> 00:02:53,220
let's say you forgot to add just for

00:02:51,390 --> 00:02:55,680
unit testing you can add it after

00:02:53,220 --> 00:02:58,440
creating the project you don't have to

00:02:55,680 --> 00:03:02,340
create a new project and copy the source

00:02:58,440 --> 00:03:04,740
files over and also you can upgrade the

00:03:02,340 --> 00:03:06,930
features for example if just as a

00:03:04,740 --> 00:03:09,530
breaking change in the configuration we

00:03:06,930 --> 00:03:13,950
can unload this for you in the the

00:03:09,530 --> 00:03:16,260
related this typing okay so bringing API

00:03:13,950 --> 00:03:18,810
is very powerful it allows you to like

00:03:16,260 --> 00:03:20,820
generate files modified the web pack

00:03:18,810 --> 00:03:23,370
configuration register new commands and

00:03:20,820 --> 00:03:28,050
we got a lot of community plugins

00:03:23,370 --> 00:03:32,250
already with only a few months since

00:03:28,050 --> 00:03:34,800
release and that's not all because I've

00:03:32,250 --> 00:03:36,900
been working on this very specific part

00:03:34,800 --> 00:03:39,120
of the slide which is the fusilade UI

00:03:36,900 --> 00:03:42,150
which is the graphical user interface

00:03:39,120 --> 00:03:46,110
from your salah which i'm going to show

00:03:42,150 --> 00:03:48,900
you a little bit just after that so how

00:03:46,110 --> 00:03:53,750
you do use it you just run a terminal

00:03:48,900 --> 00:03:58,620
and run this view UI comma there is also

00:03:53,750 --> 00:04:00,090
an erection app barber for this but by

00:03:58,620 --> 00:04:04,230
default you don't need to download

00:04:00,090 --> 00:04:07,910
electron for the to use this so let's go

00:04:04,230 --> 00:04:07,910
ahead and check it out

00:04:09,110 --> 00:04:15,420
so I'm gonna switch over here so what

00:04:13,230 --> 00:04:18,090
you see here is the new project manager

00:04:15,420 --> 00:04:21,810
when you can like have all the projects

00:04:18,090 --> 00:04:23,940
you are using with user value I at a

00:04:21,810 --> 00:04:33,750
glance and we are going to create a new

00:04:23,940 --> 00:04:38,370
project let's say the most Amit okay

00:04:33,750 --> 00:04:48,440
next I'm going to pick a few features

00:04:38,370 --> 00:04:52,010
like pewter CSS purposes complete files

00:04:48,440 --> 00:04:58,070
next and then you can configure

00:04:52,010 --> 00:05:01,070
parameters go ahead and choose the

00:04:58,070 --> 00:05:01,070
standard

00:05:01,660 --> 00:05:08,349
we good so now it's creating a project

00:05:05,520 --> 00:05:10,509
it's basically what it does it it's

00:05:08,349 --> 00:05:14,830
installing juice leggings

00:05:10,509 --> 00:05:16,930
for example the I selected yes means

00:05:14,830 --> 00:05:19,389
so it's enjoying this right ringing yes

00:05:16,930 --> 00:05:22,449
st. and then running the generators

00:05:19,389 --> 00:05:27,280
inside those plugins to create new files

00:05:22,449 --> 00:05:32,190
in your project so here you go we are in

00:05:27,280 --> 00:05:36,940
our new project this is the dashboard

00:05:32,190 --> 00:05:39,789
where you can put widgets like for

00:05:36,940 --> 00:05:44,289
example this vary on the network kill

00:05:39,789 --> 00:05:48,490
widget here you got the plugins the

00:05:44,289 --> 00:05:54,490
dependencies configuration strings like

00:05:48,490 --> 00:05:58,659
this example with all the bureau latest

00:05:54,490 --> 00:06:01,449
in rules and the tasks so if I go ahead

00:05:58,659 --> 00:06:04,300
and run the web pack task you get a

00:06:01,449 --> 00:06:08,099
dashboard with all kind of nice stats

00:06:04,300 --> 00:06:11,650
and then you can open the app directly

00:06:08,099 --> 00:06:13,990
so you go I didn't use the terminal at

00:06:11,650 --> 00:06:18,870
all to create project and really I think

00:06:13,990 --> 00:06:23,380
it's pretty cool ok I'm going back to

00:06:18,870 --> 00:06:27,520
presentation okay so now integrating

00:06:23,380 --> 00:06:28,509
Apollo in today's how do we do that it's

00:06:27,520 --> 00:06:33,610
very complicated

00:06:28,509 --> 00:06:38,169
step one run this command there is no

00:06:33,610 --> 00:06:41,319
other steps so just when you add Apollo

00:06:38,169 --> 00:06:43,690
and it will install do so by picking

00:06:41,319 --> 00:06:46,120
Apollo into your project and when the

00:06:43,690 --> 00:06:49,960
generator is to create new files in your

00:06:46,120 --> 00:06:51,789
project and set everything up for you so

00:06:49,960 --> 00:06:54,699
what does it say that it's setting up

00:06:51,789 --> 00:06:58,300
the my view Apollo integration library

00:06:54,699 --> 00:07:00,909
for you it's also giving you built in

00:06:58,300 --> 00:07:04,030
graphical file support if you want to

00:07:00,909 --> 00:07:06,430
use that and also as built in Apollo

00:07:04,030 --> 00:07:10,029
server so which you want to build a full

00:07:06,430 --> 00:07:14,949
stack graph pool app you can really do

00:07:10,029 --> 00:07:18,620
that and it also integrates with Apollo

00:07:14,949 --> 00:07:25,580
so let's do another let's go back to our

00:07:18,620 --> 00:07:27,710
demo so I can my picking you I can add

00:07:25,580 --> 00:07:30,860
new plugins with this button you can

00:07:27,710 --> 00:07:33,110
also do it with the common I showed you

00:07:30,860 --> 00:07:36,290
with the terminal you can see we have a

00:07:33,110 --> 00:07:38,900
very nice search field and we can like

00:07:36,290 --> 00:07:44,270
search for gargoyle for example when I'm

00:07:38,900 --> 00:07:49,180
gonna install it locally so I'm going to

00:07:44,270 --> 00:07:49,180
select the Apollo plugin

00:07:52,570 --> 00:08:01,030
so well after it's finished installing

00:07:57,160 --> 00:08:03,790
it begins can present you with prompts

00:08:01,030 --> 00:08:07,390
which are inputs like this

00:08:03,790 --> 00:08:09,370
so this blinking is for example asking

00:08:07,390 --> 00:08:12,070
you if you want to install

00:08:09,370 --> 00:08:16,440
example code into your project so let's

00:08:12,070 --> 00:08:19,990
select this if you want to also generate

00:08:16,440 --> 00:08:22,000
basic files for your built-in Apollo

00:08:19,990 --> 00:08:24,970
server if you want to enable automatic

00:08:22,000 --> 00:08:29,140
mocking and if we want to configure

00:08:24,970 --> 00:08:33,030
enzyme so we want to do that I'm going

00:08:29,140 --> 00:08:33,030
to open enjoin

00:08:42,490 --> 00:08:54,810
okay so let's create a new service and

00:08:46,740 --> 00:08:54,810
call it it's a graph you will submit

00:08:55,140 --> 00:09:03,810
okay then we can have it's very small

00:09:05,520 --> 00:09:16,890
I will copy over the API key okay got it

00:09:11,810 --> 00:09:22,170
so here we can input the service ID

00:09:16,890 --> 00:09:26,820
which is crafty will sum it we can also

00:09:22,170 --> 00:09:28,620
put the API key and tarts a way to

00:09:26,820 --> 00:09:30,560
differentiate between different

00:09:28,620 --> 00:09:33,540
development environments like

00:09:30,560 --> 00:09:37,260
development staging or even prediction

00:09:33,540 --> 00:09:40,440
so I'm going to create a new dev tag and

00:09:37,260 --> 00:09:46,500
also directly publish the schema to an

00:09:40,440 --> 00:09:49,110
John so let it finish and this is going

00:09:46,500 --> 00:09:51,860
to take a little bit more time so I'm

00:09:49,110 --> 00:09:57,110
going to switch to the console output

00:09:51,860 --> 00:10:00,360
for this so you can see it it's it

00:09:57,110 --> 00:10:02,310
installing new dependencies into your

00:10:00,360 --> 00:10:05,040
project so that's the thing which is

00:10:02,310 --> 00:10:10,500
taking a bit bit of time here but it

00:10:05,040 --> 00:10:12,959
also just before that run the generator

00:10:10,500 --> 00:10:17,370
for the pegging so like adding new files

00:10:12,959 --> 00:10:17,880
and modifying your existing files in the

00:10:17,370 --> 00:10:20,520
project

00:10:17,880 --> 00:10:24,149
and also maybe you noticed I'm using

00:10:20,520 --> 00:10:26,360
visual IUI to develop user a UI which is

00:10:24,149 --> 00:10:26,360
nice

00:10:26,959 --> 00:10:39,510
something is going to finish soon let's

00:10:32,430 --> 00:10:41,750
go back here still no terminal so this

00:10:39,510 --> 00:10:41,750
one

00:10:45,580 --> 00:10:53,019
that's that way did you ever use the new

00:10:48,880 --> 00:10:57,640
Bissell I know buddy

00:10:53,019 --> 00:11:00,250
it's okay you can try it so here we got

00:10:57,640 --> 00:11:04,079
after the the installation is complete

00:11:00,250 --> 00:11:06,610
we got a github like the few of

00:11:04,079 --> 00:11:10,000
everything the plugin has done to our

00:11:06,610 --> 00:11:14,290
project so it generated a bunch of files

00:11:10,000 --> 00:11:18,760
on also modified existing price like the

00:11:14,290 --> 00:11:22,930
s9 configuration to integrate with our

00:11:18,760 --> 00:11:28,829
cough chills kima it also created a

00:11:22,930 --> 00:11:33,760
bunch of server files in the project and

00:11:28,829 --> 00:11:39,279
it also modified our entry point to

00:11:33,760 --> 00:11:43,360
include view Apollo directly so we can

00:11:39,279 --> 00:11:46,420
go ahead and commit the change so let's

00:11:43,360 --> 00:11:49,720
say I am going to commit with add Apollo

00:11:46,420 --> 00:11:53,250
and now we got you clicking the view

00:11:49,720 --> 00:11:57,160
sliding Apollo installed in our project

00:11:53,250 --> 00:11:59,890
so if we go to configuration we see

00:11:57,160 --> 00:12:02,850
there is a new screen here which is

00:11:59,890 --> 00:12:06,550
provided by the Apollo plug-in so we can

00:12:02,850 --> 00:12:11,770
configure a few things but the Apollo

00:12:06,550 --> 00:12:13,810
server and you also get new tasks so

00:12:11,770 --> 00:12:22,550
let's say you want to run the Apollo

00:12:13,810 --> 00:12:25,760
server if you use this test okay

00:12:22,550 --> 00:12:29,090
yeah so first I need to like go to

00:12:25,760 --> 00:12:32,300
parameters so you can change visually

00:12:29,090 --> 00:12:37,360
exchanged parameters for the task and

00:12:32,300 --> 00:12:37,360
then you can be running run it again

00:12:37,420 --> 00:12:42,170
okay

00:12:38,890 --> 00:12:45,170
and you directly get the graphical

00:12:42,170 --> 00:12:49,100
playground ready to for you to like

00:12:45,170 --> 00:12:52,610
start using your API right away you own

00:12:49,100 --> 00:12:55,010
you may also have noticed there is there

00:12:52,610 --> 00:12:59,030
is a thing here which are called

00:12:55,010 --> 00:13:01,420
suggestions so as soon as I told the the

00:12:59,030 --> 00:13:04,790
plug-in I had this in suggestion

00:13:01,420 --> 00:13:07,700
explaining to you that you can use a new

00:13:04,790 --> 00:13:12,290
configuration new tasks and also new

00:13:07,700 --> 00:13:15,830
widgets I can like make it go away you

00:13:12,290 --> 00:13:19,580
can also directly open online and if you

00:13:15,830 --> 00:13:22,700
are new to below you may not know about

00:13:19,580 --> 00:13:25,880
the enjoying side of things so we can

00:13:22,700 --> 00:13:30,830
just click continue and we will open the

00:13:25,880 --> 00:13:33,830
service on unjoin for you and you can

00:13:30,830 --> 00:13:36,890
also publish the schema so it's a tip to

00:13:33,830 --> 00:13:38,960
let you know you can use this Apple

00:13:36,890 --> 00:13:43,130
schema published test to publish your

00:13:38,960 --> 00:13:49,220
schema to App Engine so I'm going to

00:13:43,130 --> 00:13:55,490
like start way back again open the

00:13:49,220 --> 00:13:58,870
project in code okay and I'm just going

00:13:55,490 --> 00:14:02,390
to change the file so we get a batch of

00:13:58,870 --> 00:14:06,890
craftable things going on so when I

00:14:02,390 --> 00:14:10,400
selected add example code when I

00:14:06,890 --> 00:14:13,340
installed the pain it generated a few

00:14:10,400 --> 00:14:17,680
files here like this one with a lot of

00:14:13,340 --> 00:14:21,980
queries and some gov cable files as well

00:14:17,680 --> 00:14:25,810
so here I can go to the app and here we

00:14:21,980 --> 00:14:30,880
go we have a graph tool up with a server

00:14:25,810 --> 00:14:35,190
so I can have sense messages

00:14:30,880 --> 00:14:35,190
I can upload files

00:14:39,270 --> 00:14:51,920
okay so that's great still no terminal

00:14:42,450 --> 00:14:51,920
almost no code so let's start this this

00:14:53,089 --> 00:15:00,560
okay

00:14:55,760 --> 00:15:03,990
you can also in the dashboard to add

00:15:00,560 --> 00:15:09,329
widgets for ensign so you can have a

00:15:03,990 --> 00:15:12,510
quick glance at what's going on in your

00:15:09,329 --> 00:15:14,820
API so I'm gonna head go ahead and add a

00:15:12,510 --> 00:15:19,470
few of those and then you can configure

00:15:14,820 --> 00:15:22,800
them and select which unjoin service you

00:15:19,470 --> 00:15:27,089
want to use which tag and let's say last

00:15:22,800 --> 00:15:31,050
hour it's fine and now we got stats from

00:15:27,089 --> 00:15:35,730
ensign directly into inside you so I you

00:15:31,050 --> 00:15:38,720
I so I can do the same here you can

00:15:35,730 --> 00:15:46,130
change the type let's say service time

00:15:38,720 --> 00:15:49,230
and here I can get your percentage nice

00:15:46,130 --> 00:15:56,810
we've got some stats right into missile

00:15:49,230 --> 00:16:00,290
I okay going back to the presentation

00:15:56,810 --> 00:16:00,290
which is here

00:16:02,280 --> 00:16:06,670
okay

00:16:04,240 --> 00:16:09,760
no a little bit of server-side rendering

00:16:06,670 --> 00:16:14,380
so this is the name of the package I

00:16:09,760 --> 00:16:20,399
created for this and did you even like

00:16:14,380 --> 00:16:23,620
hear about server-side rendering yes so

00:16:20,399 --> 00:16:26,080
just before to get started it's very

00:16:23,620 --> 00:16:27,940
complicated again you need to run this

00:16:26,080 --> 00:16:30,930
command and that's it

00:16:27,940 --> 00:16:36,130
you don't you have server-side rendering

00:16:30,930 --> 00:16:39,130
so a little bit of refresh for those of

00:16:36,130 --> 00:16:42,130
you that may not know about server-side

00:16:39,130 --> 00:16:45,880
rendering so although we do that first

00:16:42,130 --> 00:16:50,080
we have a client entry which is for the

00:16:45,880 --> 00:16:52,720
browser on inside we create an app so we

00:16:50,080 --> 00:16:55,660
create the view app and we like add the

00:16:52,720 --> 00:17:01,330
water and this event read the New York

00:16:55,660 --> 00:17:03,790
store and Apollo and then we mount it so

00:17:01,330 --> 00:17:07,839
that's basically what you do when you

00:17:03,790 --> 00:17:11,559
usually create a view up but the new

00:17:07,839 --> 00:17:13,270
thing is we have in several entry so the

00:17:11,559 --> 00:17:15,459
several entry should be different

00:17:13,270 --> 00:17:18,550
because it's on the server and there's

00:17:15,459 --> 00:17:23,709
no browser there is no window and we

00:17:18,550 --> 00:17:25,990
need to do more things then this is the

00:17:23,709 --> 00:17:28,000
same as the the client we need to create

00:17:25,990 --> 00:17:31,780
the app otherwise you won't go anywhere

00:17:28,000 --> 00:17:37,150
and then we need to prefetch all the

00:17:31,780 --> 00:17:41,500
apollo queries to render the app in the

00:17:37,150 --> 00:17:44,440
state after like in the same States as

00:17:41,500 --> 00:17:46,300
if you already loaded everything so if

00:17:44,440 --> 00:17:49,990
you only had the client side of things

00:17:46,300 --> 00:17:52,600
you open the app and then there is

00:17:49,990 --> 00:17:55,710
loading loading indicator for example

00:17:52,600 --> 00:18:00,070
and then you get data back from your

00:17:55,710 --> 00:18:02,710
graph Google API but on the server it's

00:18:00,070 --> 00:18:07,210
not possible because we don't want to

00:18:02,710 --> 00:18:09,160
render those loading like indicators so

00:18:07,210 --> 00:18:12,190
we need to prefetch everything before

00:18:09,160 --> 00:18:15,520
rendering their components and then we

00:18:12,190 --> 00:18:18,450
finally render the app into HTML so we

00:18:15,520 --> 00:18:21,250
can send the HTML back to the client

00:18:18,450 --> 00:18:26,529
this is very good for a lot of things

00:18:21,250 --> 00:18:29,399
like performance on SEO so that's why

00:18:26,529 --> 00:18:31,539
I'm talking about it

00:18:29,399 --> 00:18:35,649
prefetching is two main meat of this

00:18:31,539 --> 00:18:37,960
because we need to gather the whole all

00:18:35,649 --> 00:18:39,909
the graph QL squares inside your

00:18:37,960 --> 00:18:43,049
components and then we have to execute

00:18:39,909 --> 00:18:49,169
them and then we have to render the app

00:18:43,049 --> 00:18:53,110
so how it is how its work first I'm

00:18:49,169 --> 00:18:55,419
creating a fake tree of all the

00:18:53,110 --> 00:18:57,460
components of in the app so basically

00:18:55,419 --> 00:19:02,620
calling the render functions everywhere

00:18:57,460 --> 00:19:04,960
and basically to like walk to have the

00:19:02,620 --> 00:19:07,750
whole tree of the app and then be able

00:19:04,960 --> 00:19:11,529
being able to walk it to collect the

00:19:07,750 --> 00:19:13,630
Krays so we collect them and then as

00:19:11,529 --> 00:19:18,399
soon as we have all the queries we need

00:19:13,630 --> 00:19:21,190
to fetch while we execute them and we by

00:19:18,399 --> 00:19:25,450
executing then we store the result in

00:19:21,190 --> 00:19:29,289
the apollo cache and then we render the

00:19:25,450 --> 00:19:31,960
app those two last steps we are over

00:19:29,289 --> 00:19:34,720
acting fetch policy from apollo so we

00:19:31,960 --> 00:19:38,769
are saying when we execute queries we

00:19:34,720 --> 00:19:42,880
are saying you need to fetch so if if

00:19:38,769 --> 00:19:43,740
for example you put cash only it won't

00:19:42,880 --> 00:19:47,980
work

00:19:43,740 --> 00:19:50,169
also on the last step render the app we

00:19:47,980 --> 00:19:53,440
are changing it to like cash only

00:19:50,169 --> 00:19:59,559
because we already fetched all the

00:19:53,440 --> 00:20:06,960
results so let's demo this so I'm going

00:19:59,559 --> 00:20:06,960
back to this slide sorry

00:20:07,059 --> 00:20:12,490
I'm going to install the the user like

00:20:09,880 --> 00:20:19,480
picking SSR for to add server-side

00:20:12,490 --> 00:20:21,549
rendering okay installing so this time

00:20:19,480 --> 00:20:26,409
there is no the configuration of this

00:20:21,549 --> 00:20:28,179
pin should be much faster and basically

00:20:26,409 --> 00:20:31,450
what the speaking is doing for you is

00:20:28,179 --> 00:20:34,179
converting all your application code to

00:20:31,450 --> 00:20:36,309
be is amorphic which means it will be

00:20:34,179 --> 00:20:39,730
able to run both from the client and the

00:20:36,309 --> 00:20:42,460
server and also to for example to create

00:20:39,730 --> 00:20:47,380
a route for each request instead of

00:20:42,460 --> 00:20:50,770
having a global water so all of this

00:20:47,380 --> 00:20:53,350
like good practices and work you have to

00:20:50,770 --> 00:21:00,150
do to get SSA right is being done for

00:20:53,350 --> 00:21:00,150
you rightly so should be done anytime

00:21:05,680 --> 00:21:17,070
okay so we got again add a few and he we

00:21:13,360 --> 00:21:20,800
got new scripts new dependencies the

00:21:17,070 --> 00:21:23,950
html5 changed because we need to give

00:21:20,800 --> 00:21:26,370
more information to view how to render

00:21:23,950 --> 00:21:33,910
the server side of things

00:21:26,370 --> 00:21:36,330
okay let's skip I'm just going to link

00:21:33,910 --> 00:21:36,330
the files

00:21:40,750 --> 00:21:49,809
okay mmm I'm going to run the Apollo

00:21:45,640 --> 00:21:55,539
server again so we got a server running

00:21:49,809 --> 00:21:58,480
and here we got a new task for SSR so

00:21:55,539 --> 00:22:04,419
I'm going to use SSL which is the web

00:21:58,480 --> 00:22:06,880
app development mode but using SSR so

00:22:04,419 --> 00:22:08,650
it's doing basically two compilations

00:22:06,880 --> 00:22:12,750
one for the client and one for the

00:22:08,650 --> 00:22:16,870
server and if I could open the app you

00:22:12,750 --> 00:22:20,640
go we got the server-side render it up

00:22:16,870 --> 00:22:25,120
with casual so if we open the source

00:22:20,640 --> 00:22:30,549
maybe a little bit you can see here that

00:22:25,120 --> 00:22:34,539
there's a lot more things that you may

00:22:30,549 --> 00:22:38,350
find on HPA so for example view is able

00:22:34,539 --> 00:22:41,919
to automatically render the critical CSS

00:22:38,350 --> 00:22:44,980
for your app which means all the

00:22:41,919 --> 00:22:48,820
rendered component for the current route

00:22:44,980 --> 00:22:51,370
will have the CSS put inside the HTML to

00:22:48,820 --> 00:22:56,909
speed up the rendering so the first

00:22:51,370 --> 00:23:01,450
paint will be much sooner and we also

00:22:56,909 --> 00:23:05,970
hit the HTML with the Dallas or the a

00:23:01,450 --> 00:23:11,530
and B messages as I just sent and also

00:23:05,970 --> 00:23:14,110
the image I uploaded and at the end of

00:23:11,530 --> 00:23:18,250
the file you can see there's the state

00:23:14,110 --> 00:23:23,039
of the Apollo cash generated for you so

00:23:18,250 --> 00:23:26,590
it's then using this to initialize the

00:23:23,039 --> 00:23:30,880
Apollo cash when the Clank side starts

00:23:26,590 --> 00:23:34,840
so Apollo so that Apollo is an executing

00:23:30,880 --> 00:23:40,659
increase again so it's it renders like

00:23:34,840 --> 00:23:43,690
immediately so if I go back this year

00:23:40,659 --> 00:23:46,830
I'm like it's still a nice PA but you

00:23:43,690 --> 00:23:46,830
get SSR for free

00:23:46,980 --> 00:23:57,860
so if I go to this decode sorry

00:23:51,740 --> 00:24:00,800
is it the right one no yes you see here

00:23:57,860 --> 00:24:03,860
that this hood the two different entries

00:24:00,800 --> 00:24:06,200
the client entry the server entry and

00:24:03,860 --> 00:24:10,040
the main file so the main file was

00:24:06,200 --> 00:24:12,559
automatically modified for you to wrap

00:24:10,040 --> 00:24:16,309
all your application code in to create

00:24:12,559 --> 00:24:19,970
up so if you remember my little schema

00:24:16,309 --> 00:24:22,790
from the from before so it's creating an

00:24:19,970 --> 00:24:27,200
app creating the route or integrating

00:24:22,790 --> 00:24:28,790
Apollo and then returning the app on the

00:24:27,200 --> 00:24:32,210
client side of things it's very simple

00:24:28,790 --> 00:24:36,080
you just create the app we also load a

00:24:32,210 --> 00:24:38,390
synchronous components cusp you support

00:24:36,080 --> 00:24:41,540
a synchronous components as well and we

00:24:38,390 --> 00:24:44,270
just mount the app on the HTML so what's

00:24:41,540 --> 00:24:47,840
going to happen here is Joo is going to

00:24:44,270 --> 00:24:50,450
hydrate the the HTML because you already

00:24:47,840 --> 00:24:52,490
have the HTML from several so view

00:24:50,450 --> 00:24:55,220
doesn't have to do the job again and

00:24:52,490 --> 00:24:58,040
it's going just to attach like the

00:24:55,220 --> 00:25:01,100
component instances into the Dom nodes

00:24:58,040 --> 00:25:05,030
and also attach event listeners and

00:25:01,100 --> 00:25:07,330
stuff like that and the entry server is

00:25:05,030 --> 00:25:11,630
a bit different because it needs to

00:25:07,330 --> 00:25:15,740
prefetch the Apple quiz so is the

00:25:11,630 --> 00:25:18,890
prefetching so we get we provided the

00:25:15,740 --> 00:25:22,970
app and the routes components we will

00:25:18,890 --> 00:25:27,550
resolve so for example here is the home

00:25:22,970 --> 00:25:34,429
route with the slash week if I go back

00:25:27,550 --> 00:25:39,190
the app it's the default route so slash

00:25:34,429 --> 00:25:42,260
and there's another route with about

00:25:39,190 --> 00:25:44,330
okay so depending on the route you get

00:25:42,260 --> 00:25:46,790
different components so you don't need

00:25:44,330 --> 00:25:53,390
to prefetch the queries from a component

00:25:46,790 --> 00:25:56,210
which isn't rendered and then we so we

00:25:53,390 --> 00:25:59,540
create the app we prefetch all the

00:25:56,210 --> 00:26:02,440
queries so that's here where I create

00:25:59,540 --> 00:26:07,029
the factory and then we

00:26:02,440 --> 00:26:09,909
you saved the Apollo cash state and we

00:26:07,029 --> 00:26:19,629
render the app and then it gets rendered

00:26:09,909 --> 00:26:25,899
into HTML okay let's go back slides

00:26:19,629 --> 00:26:28,899
right so so far we got a project Apollo

00:26:25,899 --> 00:26:32,110
SS are still new terminal no code

00:26:28,899 --> 00:26:33,899
required which is pretty nice tank but

00:26:32,110 --> 00:26:37,210
there is still room for improvement

00:26:33,899 --> 00:26:41,009
specifically for a sister so I'm going

00:26:37,210 --> 00:26:45,179
to talk about this because I worked on

00:26:41,009 --> 00:26:49,090
this potato recently so the problem is

00:26:45,179 --> 00:26:51,669
when we create a fake instance tree we

00:26:49,090 --> 00:26:55,690
will lie on you evilly you rely on the

00:26:51,669 --> 00:26:58,600
internals like very the ugly things like

00:26:55,690 --> 00:27:02,470
underscore methods and stuff like that

00:26:58,600 --> 00:27:08,169
so it's it's pretty bad because it can

00:27:02,470 --> 00:27:10,480
break if view internals change also if

00:27:08,169 --> 00:27:13,299
you want to use third-party libraries

00:27:10,480 --> 00:27:17,889
let's say validation library which

00:27:13,299 --> 00:27:21,370
modifies the view prototype and and then

00:27:17,889 --> 00:27:23,500
you use this validate in your components

00:27:21,370 --> 00:27:27,460
basically you screwed up you need to

00:27:23,500 --> 00:27:30,370
mock the plugins to work when when we

00:27:27,460 --> 00:27:34,059
like frag this take this the the yup

00:27:30,370 --> 00:27:37,409
tree and also faking the artery is

00:27:34,059 --> 00:27:40,690
basically another render of the app

00:27:37,409 --> 00:27:44,139
there is another way of doing this which

00:27:40,690 --> 00:27:48,009
is the the way we act Apollo as being

00:27:44,139 --> 00:27:51,759
choosing recently is doing multiple

00:27:48,009 --> 00:27:55,240
vendors at the app to stabilize and

00:27:51,759 --> 00:27:58,450
collect and the queries and execute the

00:27:55,240 --> 00:28:02,169
quiz so basically when you run your

00:27:58,450 --> 00:28:04,929
react app with Apollo you can render the

00:28:02,169 --> 00:28:08,710
you may render the app like 10 times

00:28:04,929 --> 00:28:11,019
before the server returned returns the

00:28:08,710 --> 00:28:15,050
HTML so that's pretty bad for

00:28:11,019 --> 00:28:18,350
performance so the solution is using the

00:28:15,050 --> 00:28:21,050
blew server-side render which is already

00:28:18,350 --> 00:28:23,600
a synchronous because we support a

00:28:21,050 --> 00:28:27,440
synchronous component with the dynamic

00:28:23,600 --> 00:28:29,630
imports and I created a new life cycle

00:28:27,440 --> 00:28:31,580
hood in the view components which is SSR

00:28:29,630 --> 00:28:35,390
prefetch which is just waiting for

00:28:31,580 --> 00:28:38,170
chroma to be resolved before going on

00:28:35,390 --> 00:28:41,210
and rendering this specific component

00:28:38,170 --> 00:28:44,630
which means there is a new way of doing

00:28:41,210 --> 00:28:48,740
the prefetching so first we we let the

00:28:44,630 --> 00:28:51,650
the officer service I render do the work

00:28:48,740 --> 00:28:53,809
of creating the the instance and then we

00:28:51,650 --> 00:28:55,670
execute the queries we wait for them

00:28:53,809 --> 00:28:58,580
before rendering the component and then

00:28:55,670 --> 00:29:02,030
we continue with the children so what

00:28:58,580 --> 00:29:05,390
that means is we get we got to use a

00:29:02,030 --> 00:29:08,750
public API so no longer breaking as soon

00:29:05,390 --> 00:29:11,690
as internals change we support all kind

00:29:08,750 --> 00:29:15,250
of libraries as soon as they can run on

00:29:11,690 --> 00:29:19,309
the server and we don't do any extra

00:29:15,250 --> 00:29:26,300
render so basically get much better

00:29:19,309 --> 00:29:33,200
performance so let's just go back Oh No

00:29:26,300 --> 00:29:38,690
ours and the right thing Oh lost my

00:29:33,200 --> 00:29:42,320
mouse where's my mouse okay okay so

00:29:38,690 --> 00:29:46,030
let's go back to the UI and just jump

00:29:42,320 --> 00:29:50,059
over a project which is already having

00:29:46,030 --> 00:29:52,760
all of this so this is currently work in

00:29:50,059 --> 00:29:55,760
progress or not available yet so I'm

00:29:52,760 --> 00:30:01,420
going to import a project which uses

00:29:55,760 --> 00:30:04,570
this already so if I go ahead and like

00:30:01,420 --> 00:30:04,570
stop this

00:30:04,740 --> 00:30:07,740
okay

00:30:13,470 --> 00:30:22,970
oh yeah as the other server still

00:30:16,470 --> 00:30:22,970
running which is fine you can just

00:30:23,909 --> 00:30:29,239
right he's here okay

00:30:29,900 --> 00:30:38,570
so if you open the app we were fresh

00:30:33,920 --> 00:30:41,570
we got SSR so it's working but the the

00:30:38,570 --> 00:30:45,290
most interesting part of this is going

00:30:41,570 --> 00:30:48,950
to the source code very quickly using

00:30:45,290 --> 00:30:50,950
open an editor all right and then we go

00:30:48,950 --> 00:30:53,900
to the source

00:30:50,950 --> 00:30:54,590
7:3 and this is the file that changed

00:30:53,900 --> 00:30:58,670
the most

00:30:54,590 --> 00:31:03,440
so just to remind you of what was going

00:30:58,670 --> 00:31:07,130
on with the other one look like this so

00:31:03,440 --> 00:31:10,850
that's the old one that's the new one so

00:31:07,130 --> 00:31:14,990
basically you creating the app pushing

00:31:10,850 --> 00:31:19,220
the route to view Reuter letting you

00:31:14,990 --> 00:31:22,910
render the app and then we just inject

00:31:19,220 --> 00:31:24,980
the the Apollo cache state into HTML so

00:31:22,910 --> 00:31:30,010
basically you have nothing to do for

00:31:24,980 --> 00:31:30,010
this to work which is pretty great thing

00:31:30,100 --> 00:31:33,100
okay

00:31:35,030 --> 00:31:40,280
that was the last demo lots of lots of

00:31:37,340 --> 00:31:44,890
demos today so all of this stuff is

00:31:40,280 --> 00:31:48,860
coming Grayson so basically we need to

00:31:44,890 --> 00:31:52,870
create a new version of you for this to

00:31:48,860 --> 00:31:56,930
work but it's going to convey soon so

00:31:52,870 --> 00:31:59,840
this is my little notice about my patron

00:31:56,930 --> 00:32:01,820
because I'm trying to have to get more

00:31:59,840 --> 00:32:05,810
time to work on open source projects

00:32:01,820 --> 00:32:07,760
like the ones you saw so if you weren't

00:32:05,810 --> 00:32:10,790
interested you can go to pattern that

00:32:07,760 --> 00:32:13,670
comes sakuya and support me I already

00:32:10,790 --> 00:32:16,730
got a lot few patrons so thanks to them

00:32:13,670 --> 00:32:19,420
and also my main sponsor which is view

00:32:16,730 --> 00:32:23,090
school thanks so thanks musical and

00:32:19,420 --> 00:32:27,800
that's it so you can find me on a Creon

00:32:23,090 --> 00:32:34,210
and github.com Acquia thank you

00:32:27,800 --> 00:32:34,210

YouTube URL: https://www.youtube.com/watch?v=-RwhOCr-QZA


