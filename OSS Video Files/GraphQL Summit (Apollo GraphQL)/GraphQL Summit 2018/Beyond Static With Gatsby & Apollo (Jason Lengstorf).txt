Title: Beyond Static With Gatsby & Apollo (Jason Lengstorf)
Publication date: 2018-12-05
Playlist: GraphQL Summit 2018
Description: 
	Talk from GraphQL Summit 2018 - Nov 8, 2018

Jason Lengstorf, Developer Advocate at Gatsby, is a developer, occasional designer, and frequent speaker. He’s passionate about building tools, systems, and training materials to create high-performance teams and apps. For most of us, “static sites” only work for simple sites, like personal blogs. But static sites can do so much more! In this talk, learn how Gatsby & Apollo help you build apps that combine the performance and workflow benefits of static sites with the flexibility and power of server-driven sites.

Resources:
Learn about Summit - https://summit.graphql.com
Checkout the Apollo docs - https://www.apollographql.com/docs/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Captions: 
	00:00:04,740 --> 00:00:08,130
hi everybody

00:00:10,960 --> 00:00:15,020
these are good bright right bright

00:00:13,070 --> 00:00:18,320
lights I can't see anything at all so

00:00:15,020 --> 00:00:20,510
that's promising hi I'm Jason I work as

00:00:18,320 --> 00:00:22,010
a developer avocado or advocate

00:00:20,510 --> 00:00:26,119
depending on how you pronounce it at

00:00:22,010 --> 00:00:27,500
Gatsby I formerly worked at IBM if you

00:00:26,119 --> 00:00:30,170
were here last year you may have seen me

00:00:27,500 --> 00:00:31,460
talking about IBM things and I currently

00:00:30,170 --> 00:00:34,580
live in Portland Oregon

00:00:31,460 --> 00:00:36,170
and I'm here to make a sweeping

00:00:34,580 --> 00:00:38,809
Proclamation with absolutely no

00:00:36,170 --> 00:00:41,780
hyperbole about how app should be in

00:00:38,809 --> 00:00:44,870
production you should use graph QL for

00:00:41,780 --> 00:00:46,820
absolutely everything and you should

00:00:44,870 --> 00:00:49,489
serve your entire app as static assets

00:00:46,820 --> 00:00:55,970
and any other solution is incredibly and

00:00:49,489 --> 00:00:57,250
completely wrong I'm kidding kind of and

00:00:55,970 --> 00:01:00,110
the reason I say that is because

00:00:57,250 --> 00:01:03,500
development today is different than it

00:01:00,110 --> 00:01:05,690
used to be who here remembers developing

00:01:03,500 --> 00:01:09,560
like WordPress sites or movable-type

00:01:05,690 --> 00:01:13,369
sites or Drupal or Magento things like

00:01:09,560 --> 00:01:19,100
that anybody's still doing that a couple

00:01:13,369 --> 00:01:22,430
hands so the monolithic CMS used to own

00:01:19,100 --> 00:01:25,039
everything but now monolithic CMS

00:01:22,430 --> 00:01:26,179
solutions are starting to die and I

00:01:25,039 --> 00:01:28,250
don't mean that they're dying like

00:01:26,179 --> 00:01:29,840
they're ceasing to be used I mean that

00:01:28,250 --> 00:01:31,189
they're shifting they're changing

00:01:29,840 --> 00:01:34,399
they're becoming something different and

00:01:31,189 --> 00:01:37,009
today instead of one monolithic CMS

00:01:34,399 --> 00:01:39,289
solution that you need to get all of

00:01:37,009 --> 00:01:40,700
your data in whether or not the CMS was

00:01:39,289 --> 00:01:44,320
built to handle that kind of data

00:01:40,700 --> 00:01:47,119
now we have this idea of headless CMS's

00:01:44,320 --> 00:01:48,799
even though the classic monolithic CMS's

00:01:47,119 --> 00:01:50,990
are starting to move to move this way

00:01:48,799 --> 00:01:53,119
you're seeing WordPress as a headless

00:01:50,990 --> 00:01:55,039
CMS you're seeing Magento they either

00:01:53,119 --> 00:01:58,009
have or are working toward a headless

00:01:55,039 --> 00:02:01,460
solution you're seeing a whole suite of

00:01:58,009 --> 00:02:03,560
new content management systems that are

00:02:01,460 --> 00:02:07,340
strictly designed to be headless things

00:02:03,560 --> 00:02:09,170
like contentful things like I don't know

00:02:07,340 --> 00:02:10,460
and now that I'm trying to think of some

00:02:09,170 --> 00:02:13,280
I'm gonna forget them all but I promise

00:02:10,460 --> 00:02:14,810
they exist and the trend is really clear

00:02:13,280 --> 00:02:17,270
here like things are going headless and

00:02:14,810 --> 00:02:19,220
what this means is that we're moving to

00:02:17,270 --> 00:02:19,950
something new we're moving to something

00:02:19,220 --> 00:02:21,780
that

00:02:19,950 --> 00:02:24,810
you've been calling the content mesh at

00:02:21,780 --> 00:02:27,900
Gatsby and what we mean by a content

00:02:24,810 --> 00:02:30,180
mesh is that websites are no longer all

00:02:27,900 --> 00:02:31,680
coming from the same place so if you

00:02:30,180 --> 00:02:33,840
look at a website like this if you were

00:02:31,680 --> 00:02:35,519
doing this in say WordPress what you

00:02:33,840 --> 00:02:37,319
would end up doing is you would have

00:02:35,519 --> 00:02:39,060
your WordPress site you would upload

00:02:37,319 --> 00:02:40,560
some assets and some text that's what

00:02:39,060 --> 00:02:43,980
WordPress is good at it's good at

00:02:40,560 --> 00:02:46,620
managing assets content but then you

00:02:43,980 --> 00:02:48,450
need to put some items for sale so you

00:02:46,620 --> 00:02:50,190
have to hammer some plugins solution

00:02:48,450 --> 00:02:51,870
that hacks around WordPress is content

00:02:50,190 --> 00:02:54,989
management system to make it work for

00:02:51,870 --> 00:02:57,060
commerce and then you need search so you

00:02:54,989 --> 00:02:58,940
have to hack some plug-in solution into

00:02:57,060 --> 00:03:03,120
WordPress to make search work well and

00:02:58,940 --> 00:03:05,670
that's not ideal so today what happens

00:03:03,120 --> 00:03:07,019
is we just use different services for

00:03:05,670 --> 00:03:10,049
the things that they're uniquely good at

00:03:07,019 --> 00:03:12,239
we pull in search from algo Lea because

00:03:10,049 --> 00:03:14,430
algo Lea is uniquely good at search we

00:03:12,239 --> 00:03:16,260
pull in assets from cloud Neri because

00:03:14,430 --> 00:03:18,660
at cloud Neri is uniquely good at

00:03:16,260 --> 00:03:20,370
managing assets we pull in content from

00:03:18,660 --> 00:03:22,980
contentful because that's what it's

00:03:20,370 --> 00:03:25,200
built to do we pull in our commerce

00:03:22,980 --> 00:03:27,389
stuff from stripe or Shopify because

00:03:25,200 --> 00:03:28,650
that's what it's built to do we're using

00:03:27,389 --> 00:03:30,840
the tools for the thing that they're

00:03:28,650 --> 00:03:32,130
supposed to be used for we're not being

00:03:30,840 --> 00:03:34,530
forced to choose the thing that's

00:03:32,130 --> 00:03:36,630
closest to our needs and then shoehorn

00:03:34,530 --> 00:03:38,370
everything else into it this is a huge

00:03:36,630 --> 00:03:40,590
shift in the way that we make websites

00:03:38,370 --> 00:03:43,139
and it's absolutely amazing because it

00:03:40,590 --> 00:03:46,799
gives us power we never had before we

00:03:43,139 --> 00:03:48,510
can now take our data and manage it in

00:03:46,799 --> 00:03:50,519
the place that makes sense to manage it

00:03:48,510 --> 00:03:53,310
if you find that you have a bunch of

00:03:50,519 --> 00:03:55,350
tabular data put it into air table you

00:03:53,310 --> 00:03:59,220
don't have to figure out a way to manage

00:03:55,350 --> 00:04:01,650
tabular data in Magento or in whatever

00:03:59,220 --> 00:04:03,000
your your CMS solution is you don't you

00:04:01,650 --> 00:04:04,920
know you can just use the thing that's

00:04:03,000 --> 00:04:06,690
great at it but you don't have to use

00:04:04,920 --> 00:04:08,670
our table for everything you can combine

00:04:06,690 --> 00:04:10,769
different services we can load our data

00:04:08,670 --> 00:04:12,480
from anywhere using these api's these

00:04:10,769 --> 00:04:16,109
headless services allow us to pull this

00:04:12,480 --> 00:04:17,880
data in from everywhere and that means

00:04:16,109 --> 00:04:20,340
that we can build custom UIs that

00:04:17,880 --> 00:04:22,889
combine multiple data sources we can

00:04:20,340 --> 00:04:24,900
pull in our data from a hundred places

00:04:22,889 --> 00:04:26,520
if we want to that is incredibly

00:04:24,900 --> 00:04:28,740
powerful this has been popularized as

00:04:26,520 --> 00:04:31,480
the jam stack if you've been looking at

00:04:28,740 --> 00:04:33,220
this space JavaScript API is and mark

00:04:31,480 --> 00:04:35,800
it allows you to build a completely

00:04:33,220 --> 00:04:38,350
static site using data from all over the

00:04:35,800 --> 00:04:41,500
place it's really really powerful it's

00:04:38,350 --> 00:04:44,040
also terrible and what's terrible about

00:04:41,500 --> 00:04:46,420
it is that there are atrocious

00:04:44,040 --> 00:04:49,180
performance pitfalls when you start

00:04:46,420 --> 00:04:51,190
loading 100 API is in 1 UI how many

00:04:49,180 --> 00:04:54,160
people have done that how many people

00:04:51,190 --> 00:04:55,660
made it super fast how many people made

00:04:54,160 --> 00:04:58,690
it super fast with less than six weeks

00:04:55,660 --> 00:04:59,770
of dev effort I legacy any hands it's

00:04:58,690 --> 00:05:00,600
really bright up there so I can't see

00:04:59,770 --> 00:05:04,480
you

00:05:00,600 --> 00:05:07,180
it also gives complex business logic

00:05:04,480 --> 00:05:08,590
that typically gets put into the UI now

00:05:07,180 --> 00:05:10,900
we're combining data from multiple

00:05:08,590 --> 00:05:13,270
places you need your Shopify orders and

00:05:10,900 --> 00:05:16,090
you need some some stripe data to

00:05:13,270 --> 00:05:18,160
process like refunds and payments and

00:05:16,090 --> 00:05:19,510
then you want to also pull in some CMS

00:05:18,160 --> 00:05:20,890
stuff maybe some analytics things you

00:05:19,510 --> 00:05:22,060
got to plug that in to search you

00:05:20,890 --> 00:05:24,790
shouldn't be managing all that in our

00:05:22,060 --> 00:05:26,800
UIs that's kind of messy and on top of

00:05:24,790 --> 00:05:28,870
that our UI end up being really tightly

00:05:26,800 --> 00:05:30,730
coupled with the backends that we're

00:05:28,870 --> 00:05:33,970
building that's a big problem we don't

00:05:30,730 --> 00:05:35,860
want that this leads to things like tons

00:05:33,970 --> 00:05:37,720
of tons of requests being sent things

00:05:35,860 --> 00:05:39,730
like you you're bound to your slowest

00:05:37,720 --> 00:05:42,790
request if you don't build properly you

00:05:39,730 --> 00:05:44,890
have content reflows you've got jank the

00:05:42,790 --> 00:05:46,510
flash of on size content your fonts are

00:05:44,890 --> 00:05:49,480
flashing in and out lots and lots of

00:05:46,510 --> 00:05:51,670
problems here and also you end up with

00:05:49,480 --> 00:05:53,790
front-end teams managing full stack apps

00:05:51,670 --> 00:05:57,220
front-end teams shouldn't be building

00:05:53,790 --> 00:05:59,380
the business logic the backend or data

00:05:57,220 --> 00:06:02,800
tier for apps they're front-end teams

00:05:59,380 --> 00:06:05,530
let them build front ends so this is not

00:06:02,800 --> 00:06:06,850
necessarily the best way forward then we

00:06:05,530 --> 00:06:09,670
get into things like state management

00:06:06,850 --> 00:06:13,000
now who here has worked on say like a

00:06:09,670 --> 00:06:14,230
Redux instance that is managed by more

00:06:13,000 --> 00:06:18,040
than I don't know

00:06:14,230 --> 00:06:20,710
five teams any hands I worked on one of

00:06:18,040 --> 00:06:22,510
those at IBM and I'll tell you what no

00:06:20,710 --> 00:06:24,100
one knew what was going on so every

00:06:22,510 --> 00:06:26,710
single new thing that happened in that

00:06:24,100 --> 00:06:28,120
react app was a new action in redux

00:06:26,710 --> 00:06:29,110
whether or not it already existed we

00:06:28,120 --> 00:06:30,160
just didn't even bother trying to

00:06:29,110 --> 00:06:32,470
understand what other people were doing

00:06:30,160 --> 00:06:36,940
because our state management was so out

00:06:32,470 --> 00:06:39,430
of control so and then just beyond that

00:06:36,940 --> 00:06:41,140
like this is what we see with the

00:06:39,430 --> 00:06:42,580
content mesh this is the the loading

00:06:41,140 --> 00:06:43,550
screen I didn't scroll I didn't speed

00:06:42,580 --> 00:06:45,740
this up this is just what

00:06:43,550 --> 00:06:48,380
looks like to load a page on a lot of

00:06:45,740 --> 00:06:50,390
news sites you have content for a second

00:06:48,380 --> 00:06:52,100
it jumps around something pops in

00:06:50,390 --> 00:06:54,440
something else pops in the ad network

00:06:52,100 --> 00:06:56,330
finally loads so it pops again and then

00:06:54,440 --> 00:06:58,160
finally after five six seconds you can

00:06:56,330 --> 00:07:00,170
start reading the thing that you came to

00:06:58,160 --> 00:07:02,510
to read if you're on a slow Network this

00:07:00,170 --> 00:07:04,160
will happen for 10 15 20 seconds and it

00:07:02,510 --> 00:07:06,920
makes it completely unusable who here is

00:07:04,160 --> 00:07:08,990
like rage quit most of the top ten lists

00:07:06,920 --> 00:07:10,460
that they've seen on social media listen

00:07:08,990 --> 00:07:11,750
but me every time I just don't even

00:07:10,460 --> 00:07:14,350
click them anymore because they're so

00:07:11,750 --> 00:07:17,930
hard to use the web sites are so janky

00:07:14,350 --> 00:07:20,900
so how do we do this how do we tame this

00:07:17,930 --> 00:07:22,970
content mesh what is our solution to

00:07:20,900 --> 00:07:25,580
making this actually work we've got this

00:07:22,970 --> 00:07:28,040
incredible power how can we use this

00:07:25,580 --> 00:07:29,720
power to build good experiences for our

00:07:28,040 --> 00:07:32,440
users to have a manageable app a

00:07:29,720 --> 00:07:35,720
maintainable state as we move forward as

00:07:32,440 --> 00:07:36,980
developers so the first thing we want to

00:07:35,720 --> 00:07:38,810
do is we want to centralize all that

00:07:36,980 --> 00:07:40,070
data with graph QL I'm not going to go

00:07:38,810 --> 00:07:41,660
deep into the details of graph QL

00:07:40,070 --> 00:07:43,820
because everybody here has done an

00:07:41,660 --> 00:07:46,010
excellent job of doing that so far over

00:07:43,820 --> 00:07:47,780
these last couple of days then the next

00:07:46,010 --> 00:07:50,570
thing you want to do is serve only

00:07:47,780 --> 00:07:52,100
optimize static assets that lets us get

00:07:50,570 --> 00:07:53,900
away from some of these problems the

00:07:52,100 --> 00:07:57,350
jank the flash of unstyled content all

00:07:53,900 --> 00:08:01,310
that good stuff so why should we

00:07:57,350 --> 00:08:02,930
centralize our data the key benefits for

00:08:01,310 --> 00:08:04,850
me at least when I was working at IBM

00:08:02,930 --> 00:08:06,740
and trying to introduce this concept was

00:08:04,850 --> 00:08:08,390
we wanted better explore ability we

00:08:06,740 --> 00:08:11,150
wanted a single source of truth we

00:08:08,390 --> 00:08:12,560
wanted to know that the API was the way

00:08:11,150 --> 00:08:14,870
that it was you could go and look at it

00:08:12,560 --> 00:08:16,430
somewhere and make a call about whether

00:08:14,870 --> 00:08:19,310
or not the thing you needed actually

00:08:16,430 --> 00:08:22,850
existed it's more scalable and team

00:08:19,310 --> 00:08:24,470
friendly when you have a graph QL API

00:08:22,850 --> 00:08:25,850
but a front-end developer can go and

00:08:24,470 --> 00:08:28,250
explore without having to email somebody

00:08:25,850 --> 00:08:29,990
or get in slack and ask how it works or

00:08:28,250 --> 00:08:31,340
try to find a swagger doc and then

00:08:29,990 --> 00:08:34,160
determine whether or not that doc is up

00:08:31,340 --> 00:08:36,950
to date all of those things slow people

00:08:34,160 --> 00:08:39,650
down and they drag people's motivation

00:08:36,950 --> 00:08:41,660
and that ultimately leads to longer

00:08:39,650 --> 00:08:44,030
iteration times it leads to frustrated

00:08:41,660 --> 00:08:45,500
and demotivated teams and at the end of

00:08:44,030 --> 00:08:46,730
the day a worse experience for your

00:08:45,500 --> 00:08:48,500
customers because things are taking

00:08:46,730 --> 00:08:50,660
longer to get to them you're not fixing

00:08:48,500 --> 00:08:52,010
problems and introducing new features at

00:08:50,660 --> 00:08:55,250
the speed that would make their lives

00:08:52,010 --> 00:08:56,430
better and ultimately you end up with a

00:08:55,250 --> 00:08:58,350
consistent shareable

00:08:56,430 --> 00:09:00,390
dead flow because if everything's coming

00:08:58,350 --> 00:09:03,570
through graph QL the tools you build

00:09:00,390 --> 00:09:06,860
expect graph QL and graph QL is designed

00:09:03,570 --> 00:09:10,350
in such a way that you don't need

00:09:06,860 --> 00:09:12,120
complex workflows to like handle the

00:09:10,350 --> 00:09:15,000
results of different REST API queries

00:09:12,120 --> 00:09:16,529
you always get data loading error you

00:09:15,000 --> 00:09:18,660
always get an error message if there's a

00:09:16,529 --> 00:09:20,399
problem you have these now you've got

00:09:18,660 --> 00:09:22,620
these conventions these consistencies

00:09:20,399 --> 00:09:24,660
that you can use to wrap all these data

00:09:22,620 --> 00:09:26,010
layers that give you the ability to have

00:09:24,660 --> 00:09:27,950
predictable UIs

00:09:26,010 --> 00:09:31,320
which means that you can make shared

00:09:27,950 --> 00:09:33,120
like shareable and consistent UI

00:09:31,320 --> 00:09:34,730
libraries that allow you to do

00:09:33,120 --> 00:09:36,750
incredible things

00:09:34,730 --> 00:09:38,430
the second part of my argument is that

00:09:36,750 --> 00:09:41,370
you should go static for everything and

00:09:38,430 --> 00:09:42,899
the first benefit here is just blazing

00:09:41,370 --> 00:09:44,820
fast performance if you're gonna stand

00:09:42,899 --> 00:09:46,170
up all things considered a static file

00:09:44,820 --> 00:09:48,480
is going to be the server rendered file

00:09:46,170 --> 00:09:50,100
every time if all other performance

00:09:48,480 --> 00:09:52,649
optimizations are made and if your

00:09:50,100 --> 00:09:54,390
server is beating a static file it's

00:09:52,649 --> 00:09:56,670
because your server has been cached so

00:09:54,390 --> 00:09:58,980
that it's serving a static file right so

00:09:56,670 --> 00:10:01,080
that's always going to be a performance

00:09:58,980 --> 00:10:03,779
game you also get a simpler deployment

00:10:01,080 --> 00:10:06,300
flow when you are serving static files

00:10:03,779 --> 00:10:09,330
all you have to do is generate the

00:10:06,300 --> 00:10:11,760
static files and put them somewhere you

00:10:09,330 --> 00:10:14,300
don't need these complex c ICD workflows

00:10:11,760 --> 00:10:16,830
you don't need these really in-depth

00:10:14,300 --> 00:10:19,620
DevOps things you get a lot of reducing

00:10:16,830 --> 00:10:21,510
DevOps overhead so you don't need a load

00:10:19,620 --> 00:10:22,830
balancer you don't need to auto scale

00:10:21,510 --> 00:10:24,420
containers you don't need to worry about

00:10:22,830 --> 00:10:25,709
global availability you just put it on a

00:10:24,420 --> 00:10:28,080
CDN and you forget about it

00:10:25,709 --> 00:10:29,550
not to mention instead of having to pay

00:10:28,080 --> 00:10:30,959
for all of that infrastructure instead

00:10:29,550 --> 00:10:32,670
of spinning a bare-metal servers to

00:10:30,959 --> 00:10:34,560
handle black friday launch put the whole

00:10:32,670 --> 00:10:35,850
thing on cloud front and forget about it

00:10:34,560 --> 00:10:37,860
it just goes away

00:10:35,850 --> 00:10:40,560
and so let me talk a little bit about

00:10:37,860 --> 00:10:43,920
how this works in Gatsby the way that we

00:10:40,560 --> 00:10:45,480
handle this problem is we create we

00:10:43,920 --> 00:10:47,279
expose node api's that allow you to

00:10:45,480 --> 00:10:48,720
create this content mesh you can take

00:10:47,279 --> 00:10:51,270
data from any back-end a REST API

00:10:48,720 --> 00:10:53,430
another graph QL data source you can

00:10:51,270 --> 00:10:55,350
pull in excel sheets you can pull in

00:10:53,430 --> 00:10:57,149
JSON files you can even use graph QL on

00:10:55,350 --> 00:11:00,360
the file system and pull in things like

00:10:57,149 --> 00:11:02,820
your images or markdown files then we

00:11:00,360 --> 00:11:04,920
early bind that data at Build time so

00:11:02,820 --> 00:11:06,959
that you as a developer don't need to

00:11:04,920 --> 00:11:08,510
worry about data access in production

00:11:06,959 --> 00:11:12,560
it's all bound at the build

00:11:08,510 --> 00:11:14,900
okay that generates static assets those

00:11:12,560 --> 00:11:16,640
static assets are heavily performance

00:11:14,900 --> 00:11:17,930
tuned under the hood we do code

00:11:16,640 --> 00:11:20,330
splitting we optimize for the purple

00:11:17,930 --> 00:11:22,340
pattern we do prefetching we optimize

00:11:20,330 --> 00:11:24,440
assets we generate source sets we do

00:11:22,340 --> 00:11:25,130
lazy loading all sorts of things so that

00:11:24,440 --> 00:11:26,930
you don't have to think about

00:11:25,130 --> 00:11:28,820
performance it just happens the way that

00:11:26,930 --> 00:11:31,070
you wanted to happen and then we make it

00:11:28,820 --> 00:11:34,310
really simple to deploy to somewhere

00:11:31,070 --> 00:11:37,790
like nullify or to s3 whatever you want

00:11:34,310 --> 00:11:41,660
to use as your CDN you just dump the

00:11:37,790 --> 00:11:43,880
artifact that's generated by Gatsby into

00:11:41,660 --> 00:11:48,410
your CDN and your site is life those

00:11:43,880 --> 00:11:50,060
changes are made our goal here oh sorry

00:11:48,410 --> 00:11:51,770
and then there's a whole other step once

00:11:50,060 --> 00:11:54,140
that gets to the browser we rehydrate it

00:11:51,770 --> 00:11:55,670
into a react app right so you're not

00:11:54,140 --> 00:11:58,010
giving up anything by doing this you're

00:11:55,670 --> 00:11:59,420
building a react app we're turning that

00:11:58,010 --> 00:12:02,060
into static files that you can then

00:11:59,420 --> 00:12:03,830
serve at the edge in your CDN and then

00:12:02,060 --> 00:12:05,690
once it gets to your client it

00:12:03,830 --> 00:12:07,880
rehydrates into a react acts you don't

00:12:05,690 --> 00:12:10,190
sacrifice any of the power of react in

00:12:07,880 --> 00:12:12,110
the apps that you're serving our goal

00:12:10,190 --> 00:12:14,270
here is to make the right thing the easy

00:12:12,110 --> 00:12:16,010
thing our intention whenever we do

00:12:14,270 --> 00:12:19,330
anything in Gatsby is to try to think

00:12:16,010 --> 00:12:20,750
about this as what is the laziest

00:12:19,330 --> 00:12:22,490
shortcut iasts

00:12:20,750 --> 00:12:23,810
under the Gunness decision that somebody

00:12:22,490 --> 00:12:25,970
can make while they're using this tool

00:12:23,810 --> 00:12:27,350
and how can we make sure that the

00:12:25,970 --> 00:12:29,180
defaults are in place so that when

00:12:27,350 --> 00:12:30,800
somebody takes that shortcut or when

00:12:29,180 --> 00:12:33,290
somebody doesn't look at the config

00:12:30,800 --> 00:12:35,300
somebody just opens it and ships it they

00:12:33,290 --> 00:12:37,610
get an excellent end result the user

00:12:35,300 --> 00:12:39,620
experience is fantastic for the person

00:12:37,610 --> 00:12:41,210
who's using it right we want those

00:12:39,620 --> 00:12:43,040
defaults in place we want to take a

00:12:41,210 --> 00:12:44,390
whole class of problems off your plate

00:12:43,040 --> 00:12:47,570
so that you can think about building

00:12:44,390 --> 00:12:50,000
apps not about tuning apps or shipping

00:12:47,570 --> 00:12:51,470
apps just build it commit it to github

00:12:50,000 --> 00:12:54,590
and forget it it's gonna go live and

00:12:51,470 --> 00:12:55,850
it's gonna be fast and so at this point

00:12:54,590 --> 00:12:57,800
I imagine a lot of people are thinking

00:12:55,850 --> 00:12:59,870
in their heads like oh well my app has

00:12:57,800 --> 00:13:02,900
dynamic data so I can't do early binding

00:12:59,870 --> 00:13:05,380
I can't do this at build time I need

00:13:02,900 --> 00:13:08,300
dynamic apps so Gatsby's on for me and

00:13:05,380 --> 00:13:11,690
at this point is where I remind you that

00:13:08,300 --> 00:13:14,240
static assets are not static apps okay a

00:13:11,690 --> 00:13:15,500
javascript file is a static asset but

00:13:14,240 --> 00:13:19,280
you can do a lot of dynamic things with

00:13:15,500 --> 00:13:20,910
it so react apps are dynamic right I

00:13:19,280 --> 00:13:23,490
don't think anybody would would

00:13:20,910 --> 00:13:26,280
you with that Gatsby is shipping react

00:13:23,490 --> 00:13:28,760
apps to the browser so something

00:13:26,280 --> 00:13:33,300
something something transitive property

00:13:28,760 --> 00:13:34,230
Gatsby apps are dynamic right so let's

00:13:33,300 --> 00:13:35,940
look a little bit of how this actually

00:13:34,230 --> 00:13:38,580
works let's use a we'll do some

00:13:35,940 --> 00:13:40,650
visualization so in Gatsby we start with

00:13:38,580 --> 00:13:42,990
content from wherever you want to grab

00:13:40,650 --> 00:13:47,610
it from and we put all that into Gatsby

00:13:42,990 --> 00:13:49,410
through our content mesh api's then your

00:13:47,610 --> 00:13:52,800
workflow is to start building things

00:13:49,410 --> 00:13:54,330
with reacting graph QL in the in your

00:13:52,800 --> 00:13:56,460
just regular react components the way

00:13:54,330 --> 00:13:58,920
that you would anywhere once you're done

00:13:56,460 --> 00:14:01,020
we generate static assets that you can

00:13:58,920 --> 00:14:02,430
then deploy to your preferred CDN it's

00:14:01,020 --> 00:14:03,780
not you can put it in an s3 bucket and

00:14:02,430 --> 00:14:05,370
use cloud front you can just deploy it

00:14:03,780 --> 00:14:07,440
straight to nullify whatever you prefer

00:14:05,370 --> 00:14:10,340
once that's done it goes to the browser

00:14:07,440 --> 00:14:13,860
and it becomes a react app again okay

00:14:10,340 --> 00:14:18,870
but then what happens how do we get that

00:14:13,860 --> 00:14:20,970
dynamic step into our code that's where

00:14:18,870 --> 00:14:23,550
Apollo comes in right Gatsby and Apollo

00:14:20,970 --> 00:14:25,290
are completely compatible and so let's

00:14:23,550 --> 00:14:27,960
take a look at a store or an example

00:14:25,290 --> 00:14:29,400
this is our swag store Gatsby has a

00:14:27,960 --> 00:14:31,680
program where anybody who contributes to

00:14:29,400 --> 00:14:33,690
the Gatsby core is able to receive one

00:14:31,680 --> 00:14:34,860
free item of swag from our store you get

00:14:33,690 --> 00:14:36,240
a pre are merged will send you a

00:14:34,860 --> 00:14:38,100
discount code will invite you to join

00:14:36,240 --> 00:14:39,960
our organization as a maintainer and you

00:14:38,100 --> 00:14:42,780
can claim that for a t-shirt some socks

00:14:39,960 --> 00:14:43,890
a hat whatever you're feeling and the

00:14:42,780 --> 00:14:47,160
way that this works under the hood is

00:14:43,890 --> 00:14:50,370
that at Build time we pull in Shopify

00:14:47,160 --> 00:14:52,110
product information so we early bind all

00:14:50,370 --> 00:14:54,300
of this we get these images optimized so

00:14:52,110 --> 00:14:56,490
they load super fast we pull in the

00:14:54,300 --> 00:14:59,460
product data so that it's server-side

00:14:56,490 --> 00:15:02,880
rendered and SEO available and then on

00:14:59,460 --> 00:15:05,220
the client side we use auth0 to do user

00:15:02,880 --> 00:15:07,740
management and we use the Shopify buy

00:15:05,220 --> 00:15:09,780
SDK to manage adding and removing items

00:15:07,740 --> 00:15:13,260
from the cart and actually going to a

00:15:09,780 --> 00:15:16,620
checkout this managed by Shopify on the

00:15:13,260 --> 00:15:18,300
the dashboard side we show people how

00:15:16,620 --> 00:15:20,010
many contributions they've made we show

00:15:18,300 --> 00:15:23,010
them their most recent contribution and

00:15:20,010 --> 00:15:24,210
then down here we show them some issues

00:15:23,010 --> 00:15:26,790
that we'd love to get their help with

00:15:24,210 --> 00:15:30,330
right and the way that we manage that is

00:15:26,790 --> 00:15:31,830
by making async calls to get up and now

00:15:30,330 --> 00:15:34,740
we whitelist are we

00:15:31,830 --> 00:15:37,350
we we make we mark this section of the

00:15:34,740 --> 00:15:38,760
app as client only which means the

00:15:37,350 --> 00:15:41,570
Gaspee doesn't try to server-side render

00:15:38,760 --> 00:15:43,950
it and that gives us the ability to make

00:15:41,570 --> 00:15:46,170
literally anything we want here we can

00:15:43,950 --> 00:15:48,000
drop a whole new set of routers you

00:15:46,170 --> 00:15:49,380
could drop an existing react app on to

00:15:48,000 --> 00:15:53,310
this page and it would just work the way

00:15:49,380 --> 00:15:57,210
that you expect so I tweeted a little

00:15:53,310 --> 00:16:00,660
while ago all the code that it takes to

00:15:57,210 --> 00:16:04,560
build a Gatsby site using Apollo in the

00:16:00,660 --> 00:16:06,180
browser but rather than just show you

00:16:04,560 --> 00:16:09,300
those screenshots I figured it would be

00:16:06,180 --> 00:16:10,560
fun to try and build this and so bear

00:16:09,300 --> 00:16:14,360
with me because we're about to start

00:16:10,560 --> 00:16:17,610
live coding let me get rid of these and

00:16:14,360 --> 00:16:20,010
okay so what we're gonna do here is

00:16:17,610 --> 00:16:22,130
we're gonna take this this gatsby site

00:16:20,010 --> 00:16:24,300
right now what this Gatsby site does is

00:16:22,130 --> 00:16:26,520
it prints hello world

00:16:24,300 --> 00:16:29,220
I added some general styles so that we

00:16:26,520 --> 00:16:33,540
can see how that works and what we need

00:16:29,220 --> 00:16:36,150
to do is add a graph QL back end to it

00:16:33,540 --> 00:16:38,610
then we're gonna get that building after

00:16:36,150 --> 00:16:40,110
that we're gonna add a palo and get some

00:16:38,610 --> 00:16:41,340
client-side data and we're gonna do that

00:16:40,110 --> 00:16:44,460
all on the same component we're gonna do

00:16:41,340 --> 00:16:46,560
it all in this index j s so all of these

00:16:44,460 --> 00:16:47,970
files are empty right now they just I

00:16:46,560 --> 00:16:49,230
just put notes in here so that you

00:16:47,970 --> 00:16:52,200
didn't have to see me look up where

00:16:49,230 --> 00:16:57,600
these api's are and we're gonna start

00:16:52,200 --> 00:16:58,920
with configuring our gatsby site and the

00:16:57,600 --> 00:17:00,810
way that we do that is we export an

00:16:58,920 --> 00:17:03,690
object and in it we include an array of

00:17:00,810 --> 00:17:06,600
plugins so the only plug-in we're gonna

00:17:03,690 --> 00:17:10,410
use in this example is the gatsby source

00:17:06,600 --> 00:17:17,610
graph QL and this was built by Mikhail

00:17:10,410 --> 00:17:19,530
Novakovich stitching in graph QL and in

00:17:17,610 --> 00:17:22,800
this we're gonna put in a type name

00:17:19,530 --> 00:17:24,120
which we're gonna call RM API and we're

00:17:22,800 --> 00:17:25,500
gonna put in a field name this is what

00:17:24,120 --> 00:17:27,240
we're actually gonna query against and

00:17:25,500 --> 00:17:30,960
this is how we namespace to avoid

00:17:27,240 --> 00:17:34,500
collisions and finally we're gonna put

00:17:30,960 --> 00:17:35,790
in the URL I shot myself in the foot

00:17:34,500 --> 00:17:38,190
with this earlier so I'm gonna be really

00:17:35,790 --> 00:17:44,100
careful about remembering whether it's

00:17:38,190 --> 00:17:49,890
URL or URI and with that we're done so

00:17:44,100 --> 00:17:52,590
let's run gatsby develop and if the demo

00:17:49,890 --> 00:17:55,590
gods are kind what will happen is we

00:17:52,590 --> 00:18:01,650
will get our site running at localhost

00:17:55,590 --> 00:18:04,950
8080 underscore graph QL so let's start

00:18:01,650 --> 00:18:10,590
in graph QL and what we can see in here

00:18:04,950 --> 00:18:13,320
is we've got in our Docs let's make that

00:18:10,590 --> 00:18:14,700
a little bigger we've got things that

00:18:13,320 --> 00:18:16,260
are kind of internal to gatsby we

00:18:14,700 --> 00:18:18,030
generate our sites and the plugins that

00:18:16,260 --> 00:18:19,289
are available things like that but then

00:18:18,030 --> 00:18:21,210
down here we've stitched in the rick and

00:18:19,289 --> 00:18:22,559
morty api so we can look at the rick and

00:18:21,210 --> 00:18:24,120
morty api and see that we've got

00:18:22,559 --> 00:18:27,299
characters and that's going to return

00:18:24,120 --> 00:18:29,190
things like the named species so on and

00:18:27,299 --> 00:18:34,710
so forth for this particular example

00:18:29,190 --> 00:18:37,140
let's just grab the name and image of

00:18:34,710 --> 00:18:43,470
one of our characters and so we're gonna

00:18:37,140 --> 00:18:46,770
grab the name and image of rick okay so

00:18:43,470 --> 00:18:50,700
we run that get some data and now we've

00:18:46,770 --> 00:18:54,059
got data so let's put that into our site

00:18:50,700 --> 00:18:56,880
so i'm gonna jump in and let's go right

00:18:54,059 --> 00:19:03,169
into our page and in order to do this i

00:18:56,880 --> 00:19:05,820
need to import graph QL from gatsby and

00:19:03,169 --> 00:19:07,980
we have a special way of handling build

00:19:05,820 --> 00:19:09,659
time graph QL queries which is why we

00:19:07,980 --> 00:19:11,909
export our home graph QL tag template

00:19:09,659 --> 00:19:13,289
literal and we're going to export a

00:19:11,909 --> 00:19:14,940
constant you can name it whatever you

00:19:13,289 --> 00:19:17,390
want I'm gonna name it gatsby query to

00:19:14,940 --> 00:19:24,929
make things clear and we do a graph QL

00:19:17,390 --> 00:19:28,740
in here I'm going to oops let's paste

00:19:24,929 --> 00:19:30,840
this and what this means is now when

00:19:28,740 --> 00:19:33,000
gatsby runs it's gonna run this graph to

00:19:30,840 --> 00:19:35,280
all query and pass it in as a data

00:19:33,000 --> 00:19:36,780
problem right since this is a demo i'm

00:19:35,280 --> 00:19:40,620
gonna take some shortcuts so I'm going

00:19:36,780 --> 00:19:43,500
to just D structure this so that I can

00:19:40,620 --> 00:19:46,159
get to the data that I need and I'm also

00:19:43,500 --> 00:19:46,159
going to

00:19:48,150 --> 00:19:54,960
grab out this character's name and let's

00:19:51,810 --> 00:19:58,400
start there let me restart the server

00:19:54,960 --> 00:19:58,400
because we just added a graph QL query

00:19:58,700 --> 00:20:06,300
and once this starts I can go back to

00:20:02,010 --> 00:20:08,100
here let's reload the site and we end up

00:20:06,300 --> 00:20:10,850
with Rick Sanchez with the dollar sign

00:20:08,100 --> 00:20:17,430
because I did very silly things here

00:20:10,850 --> 00:20:19,860
there we go next

00:20:17,430 --> 00:20:24,780
let's add in the character image so

00:20:19,860 --> 00:20:26,010
we'll do a character image we're gonna

00:20:24,780 --> 00:20:27,930
do an alt tag because accessibility

00:20:26,010 --> 00:20:32,490
matters we'll do the character dot name

00:20:27,930 --> 00:20:35,510
and just to make sure that this doesn't

00:20:32,490 --> 00:20:39,060
blow out our size let's do a style tag

00:20:35,510 --> 00:20:40,860
switch back over and we get our image

00:20:39,060 --> 00:20:42,870
right so this takes very little effort

00:20:40,860 --> 00:20:44,340
it's very fast to get going but now we

00:20:42,870 --> 00:20:47,280
want to add some dynamic data so how are

00:20:44,340 --> 00:20:50,190
we gonna do that let's add this by

00:20:47,280 --> 00:20:52,050
creating a an Apollo client and the

00:20:50,190 --> 00:20:55,650
Apollo client that we want to create is

00:20:52,050 --> 00:20:58,590
going to start by importing the Apollo

00:20:55,650 --> 00:21:02,540
client and I pre-installed all of the

00:20:58,590 --> 00:21:04,290
packages on this so that Wow okay

00:21:02,540 --> 00:21:06,900
pre-installed all the packages so that

00:21:04,290 --> 00:21:08,780
we didn't have to watch npm run so i'm

00:21:06,900 --> 00:21:12,750
gonna run this from apollo boost and

00:21:08,780 --> 00:21:14,610
also because we're gonna run this in SSR

00:21:12,750 --> 00:21:16,860
mode server-side rendering we're going

00:21:14,610 --> 00:21:18,990
to import our own fetch from isomorphic

00:21:16,860 --> 00:21:21,470
fetch and that allows the fetch to run

00:21:18,990 --> 00:21:23,700
not only in the browser but also in node

00:21:21,470 --> 00:21:26,310
once we've got those two pieces i'm

00:21:23,700 --> 00:21:30,390
going to do export console client equals

00:21:26,310 --> 00:21:40,010
new apollo client i'm gonna put in the

00:21:30,390 --> 00:21:40,010
uri this time and let's add fetch

00:21:40,059 --> 00:21:45,230
okay so now we've got a client but one

00:21:44,270 --> 00:21:46,580
of the things that's interesting about

00:21:45,230 --> 00:21:48,050
Gatsby is that Gatsby

00:21:46,580 --> 00:21:49,880
we have opinions about the way that

00:21:48,050 --> 00:21:52,280
things run so we provide a router and

00:21:49,880 --> 00:21:54,920
that router takes the components that

00:21:52,280 --> 00:21:57,650
are in the pages directory and uses them

00:21:54,920 --> 00:21:59,330
as individually addressable routes so we

00:21:57,650 --> 00:22:00,950
can't just use the Apollo provider

00:21:59,330 --> 00:22:02,330
around our page or we'd end up

00:22:00,950 --> 00:22:03,680
unmounting and remounting the provider

00:22:02,330 --> 00:22:04,220
every time that we move that's not a

00:22:03,680 --> 00:22:07,250
good idea

00:22:04,220 --> 00:22:09,620
but gatsby does have the ability to to

00:22:07,250 --> 00:22:11,000
handle a wrap root element api call in

00:22:09,620 --> 00:22:12,980
both the browser and the server side

00:22:11,000 --> 00:22:14,270
rendering mode so the way that we're

00:22:12,980 --> 00:22:19,400
going to manage that is we're going to

00:22:14,270 --> 00:22:25,700
import react we're going to import the

00:22:19,400 --> 00:22:27,890
Apollo provider from react Apollo we are

00:22:25,700 --> 00:22:33,950
going to import the client that we just

00:22:27,890 --> 00:22:38,870
created and then we're going to export a

00:22:33,950 --> 00:22:41,809
constant called wrap root element which

00:22:38,870 --> 00:22:44,030
is the API that Gatsby uses to manage

00:22:41,809 --> 00:22:48,860
that and that receives our root element

00:22:44,030 --> 00:22:54,350
as its as one of its props and down here

00:22:48,860 --> 00:22:58,730
we just add our provider and we're gonna

00:22:54,350 --> 00:23:00,380
wrap that around the root element so at

00:22:58,730 --> 00:23:02,600
this point we've defined it but we

00:23:00,380 --> 00:23:06,040
haven't actually used it we need to go

00:23:02,600 --> 00:23:08,290
into gatsby browser and gatsby SSR to

00:23:06,040 --> 00:23:12,980
export it so we're just going to export

00:23:08,290 --> 00:23:15,920
wrap root element from source

00:23:12,980 --> 00:23:19,850
Apolo wrapper element and i'm going to

00:23:15,920 --> 00:23:24,110
literally copy paste this into the SSR

00:23:19,850 --> 00:23:26,450
as well and so what this gives us is now

00:23:24,110 --> 00:23:28,670
when gatsby restarts it's gonna wrap the

00:23:26,450 --> 00:23:30,410
entire gatsby app in an apollo provider

00:23:28,670 --> 00:23:34,960
and that's not gonna give us problems

00:23:30,410 --> 00:23:34,960
when we run so let's stop and start and

00:23:36,040 --> 00:23:41,059
once it gets rebuilt okay everything

00:23:39,140 --> 00:23:42,410
built without error our lookup loads

00:23:41,059 --> 00:23:45,770
without error but nothing's happening

00:23:42,410 --> 00:23:47,570
yet so let's add an actual query and

00:23:45,770 --> 00:23:50,020
what we're gonna do is go back into our

00:23:47,570 --> 00:23:55,130
page index

00:23:50,020 --> 00:23:58,070
we're going to import the query from

00:23:55,130 --> 00:24:03,710
react Apollo and we're also going to

00:23:58,070 --> 00:24:06,010
import gql from graph QL tag and then

00:24:03,710 --> 00:24:09,500
down here we're going to define our

00:24:06,010 --> 00:24:11,000
query so the the API that I pulled in is

00:24:09,500 --> 00:24:12,830
the same doggy API that you've seen in a

00:24:11,000 --> 00:24:14,930
lot of Apollo demos I'm not going to go

00:24:12,830 --> 00:24:17,270
through the graphical part of this I'm

00:24:14,930 --> 00:24:19,550
just gonna put the query straight in so

00:24:17,270 --> 00:24:21,800
we do gql and remember this is a

00:24:19,550 --> 00:24:24,260
client-side query and they grab the

00:24:21,800 --> 00:24:26,150
Gatsby query is a server-side query or a

00:24:24,260 --> 00:24:29,570
build time query which means that

00:24:26,150 --> 00:24:31,550
they're using different graph QL tags so

00:24:29,570 --> 00:24:36,020
in here we're gonna pull in our dog and

00:24:31,550 --> 00:24:39,860
I feel like rick is a Bichon Frise kind

00:24:36,020 --> 00:24:42,680
of guy so let's get the breed and then

00:24:39,860 --> 00:24:46,100
I'm going to alias the display image as

00:24:42,680 --> 00:24:49,270
source and what I meant by export was

00:24:46,100 --> 00:24:52,040
constant okay everybody with me so far

00:24:49,270 --> 00:24:57,430
now we can come in here we can create a

00:24:52,040 --> 00:25:00,950
query we're gonna make the query the

00:24:57,430 --> 00:25:04,850
Apollo query oh my god here we go

00:25:00,950 --> 00:25:08,170
nervous fingers and inside we get our

00:25:04,850 --> 00:25:13,430
render prop we're gonna pull out data

00:25:08,170 --> 00:25:15,260
loading an error we're going to do the

00:25:13,430 --> 00:25:19,700
the kind of shortcut thing of saying if

00:25:15,260 --> 00:25:24,290
we're loading let's show a span that

00:25:19,700 --> 00:25:27,640
says loading if we have an error let's

00:25:24,290 --> 00:25:27,640
return the actual error message

00:25:29,460 --> 00:25:34,200
and I can spell it and down here what

00:25:32,490 --> 00:25:37,919
I'm gonna do is assuming we're not

00:25:34,200 --> 00:25:40,799
loading or or having an error I can

00:25:37,919 --> 00:25:44,580
return an image with the source of data

00:25:40,799 --> 00:25:50,309
dog source because I a Lea sit and I can

00:25:44,580 --> 00:25:52,470
do an alt of data dog breed and again

00:25:50,309 --> 00:25:59,309
I'm gonna set a style just to constrain

00:25:52,470 --> 00:26:10,950
the width okay so everybody hold your

00:25:59,309 --> 00:26:12,630
breath we're gonna give this a shot and

00:26:10,950 --> 00:26:15,240
so that's it in about ten minutes we

00:26:12,630 --> 00:26:18,059
were able to build a completely dynamic

00:26:15,240 --> 00:26:19,679
app using graph QL on the back end graph

00:26:18,059 --> 00:26:21,419
QL on the front end and what that means

00:26:19,679 --> 00:26:23,700
is ooh buddy

00:26:21,419 --> 00:26:26,100
zoom out a little bit you can try this

00:26:23,700 --> 00:26:27,299
yourself right now go to gasp bjs org

00:26:26,100 --> 00:26:28,830
we've got a quick start we've got a

00:26:27,299 --> 00:26:33,240
tutorial if you're really new to Gatsby

00:26:28,830 --> 00:26:34,260
or to react or graph QL and remember you

00:26:33,240 --> 00:26:36,059
should be using graph two you offer

00:26:34,260 --> 00:26:39,299
everything you should be serving static

00:26:36,059 --> 00:26:40,799
your entire app is static assets please

00:26:39,299 --> 00:26:42,480
start doing that right now please find

00:26:40,799 --> 00:26:44,940
me for questions if you--if you want to

00:26:42,480 --> 00:26:46,780
give that a shot and thank you very very

00:26:44,940 --> 00:26:53,160
much for having me

00:26:46,780 --> 00:26:53,160

YouTube URL: https://www.youtube.com/watch?v=wNUg1jpj9T0


