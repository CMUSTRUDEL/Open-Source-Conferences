Title: Backend Agnostic Requests with GraphQL Style Querying (Conor Hastings)
Publication date: 2018-12-05
Playlist: GraphQL Summit 2018
Description: 
	Talk from GraphQL Summit 2018 - Nov 8, 2018

Conor Hastings, Senior UI Engineer at Netflix, believes that GraphQL offers tons of benefits. The colocation of data is the most revolutionary to me. What if we could utilize existing the GraphQL query parser but talk to any backend? I'll explore how we can use GraphQL style data fetching without a GraphQL backend to bring colocation of data everywhere.

Learn more:  https://summit.graphql.com
Captions: 
	00:00:05,580 --> 00:00:13,020
oh yeah hello okay everyone hear me okay

00:00:10,470 --> 00:00:15,210
thank you for the applause just to be

00:00:13,020 --> 00:00:17,580
transparent I wrote that down before

00:00:15,210 --> 00:00:18,660
thanking you for the applause so if you

00:00:17,580 --> 00:00:22,619
didn't applaud it would've been super

00:00:18,660 --> 00:00:25,110
awkward so thank you so graphical

00:00:22,619 --> 00:00:26,910
without graph QL graphical inspired

00:00:25,110 --> 00:00:29,700
queries for collocating data request

00:00:26,910 --> 00:00:31,169
with components what did that mean I

00:00:29,700 --> 00:00:32,399
don't really know

00:00:31,169 --> 00:00:34,680
I think co-locate was on a

00:00:32,399 --> 00:00:39,750
word-of-the-day calendar for me when I

00:00:34,680 --> 00:00:42,870
made this CFP so it sounded cool and I

00:00:39,750 --> 00:00:46,440
sent it in but basically this will go

00:00:42,870 --> 00:00:48,929
through essentially how graph QL

00:00:46,440 --> 00:00:51,239
introduces a lot of constraints a brown

00:00:48,929 --> 00:00:53,789
building application not every

00:00:51,239 --> 00:00:54,989
application needs to make use of all

00:00:53,789 --> 00:00:56,219
those constraints not have a very

00:00:54,989 --> 00:00:58,170
application at the time to make all the

00:00:56,219 --> 00:00:59,879
constraints or the ability to you might

00:00:58,170 --> 00:01:02,039
not control the backend you might be

00:00:59,879 --> 00:01:03,470
doing like some half-day project where

00:01:02,039 --> 00:01:06,000
you want to use graphical style querying

00:01:03,470 --> 00:01:08,360
but you'll still want kind of that

00:01:06,000 --> 00:01:12,960
expressiveness that graphical provides

00:01:08,360 --> 00:01:14,760
so briefly just go through what I will

00:01:12,960 --> 00:01:17,040
talk about today what are the design

00:01:14,760 --> 00:01:19,050
principles of graph QL like what of the

00:01:17,040 --> 00:01:21,170
people that create a graphical say graph

00:01:19,050 --> 00:01:23,430
gills should be and what it should do

00:01:21,170 --> 00:01:25,530
what's inherently appealing about it

00:01:23,430 --> 00:01:30,030
like why do we want to use it at all or

00:01:25,530 --> 00:01:33,300
should we just not care can I use just

00:01:30,030 --> 00:01:37,110
parts of graph QL there's typing there's

00:01:33,300 --> 00:01:40,070
querying lots of things that are part of

00:01:37,110 --> 00:01:45,030
that girl but can you just use the part

00:01:40,070 --> 00:01:47,460
of it yeah so graph girl is amazing at

00:01:45,030 --> 00:01:50,370
the sum of its parts but some of its

00:01:47,460 --> 00:01:54,120
parts are also amazing on their own so

00:01:50,370 --> 00:01:57,540
the cool turn affair is yeah

00:01:54,120 --> 00:01:59,550
so I'm Conor Hastings I watched a lot of

00:01:57,540 --> 00:02:00,720
talks in preparation for this and a lot

00:01:59,550 --> 00:02:02,250
of times they introduce themselves I'm

00:02:00,720 --> 00:02:05,340
like a third slide to like seem it

00:02:02,250 --> 00:02:07,380
serious so I decided to do that too I

00:02:05,340 --> 00:02:09,989
thought it was cool

00:02:07,380 --> 00:02:11,129
I'm a UI engineering Netflix working on

00:02:09,989 --> 00:02:12,810
internal products so I don't know

00:02:11,129 --> 00:02:16,830
anything about Netflix comm works if

00:02:12,810 --> 00:02:19,890
you're interested not the one to ask

00:02:16,830 --> 00:02:22,560
I'm on Twitter still come on our github

00:02:19,890 --> 00:02:25,260
Conor Hastings and here in the physical

00:02:22,560 --> 00:02:29,970
world if it did the world exists I'm on

00:02:25,260 --> 00:02:32,360
this stage so just briefly go through

00:02:29,970 --> 00:02:36,690
the graph filled with design principles

00:02:32,360 --> 00:02:38,130
there's five this one going through the

00:02:36,690 --> 00:02:43,260
graphical spec in preparation for this

00:02:38,130 --> 00:02:44,370
and I'm working on a project I looked at

00:02:43,260 --> 00:02:45,810
the design principles that's the part

00:02:44,370 --> 00:02:47,010
that really struck me the most it might

00:02:45,810 --> 00:02:50,010
have been because it was just at the top

00:02:47,010 --> 00:02:51,990
and I was lazy and you want to read the

00:02:50,010 --> 00:02:54,720
whole thing but it was also really

00:02:51,990 --> 00:02:58,860
interesting so the first one that comes

00:02:54,720 --> 00:03:01,709
up is hierarchical data the query is

00:02:58,860 --> 00:03:04,250
naturally hierarchal most modern

00:03:01,709 --> 00:03:06,180
applications are essentially view layers

00:03:04,250 --> 00:03:08,670
displaying hierarchical data if you

00:03:06,180 --> 00:03:11,130
think of something like Facebook it's a

00:03:08,670 --> 00:03:12,959
hierarchy of like post comments those

00:03:11,130 --> 00:03:17,220
comments have comments there's people

00:03:12,959 --> 00:03:18,780
involved I guess so you can imagine a

00:03:17,220 --> 00:03:21,420
world in which you use this hierarchy to

00:03:18,780 --> 00:03:25,050
stub components out and all the other

00:03:21,420 --> 00:03:28,500
things graphical queries are powerful

00:03:25,050 --> 00:03:31,800
for product centric this one is great to

00:03:28,500 --> 00:03:34,080
me I feel like oftentimes when you're

00:03:31,800 --> 00:03:36,720
working like a strict back in front-end

00:03:34,080 --> 00:03:40,220
environment it feels like the API is

00:03:36,720 --> 00:03:43,980
created almost in direct defiance to the

00:03:40,220 --> 00:03:45,300
front end consumer so you're like either

00:03:43,980 --> 00:03:47,280
having fights with your back in engineer

00:03:45,300 --> 00:03:48,870
hopefully not or you're like doing all

00:03:47,280 --> 00:03:51,180
these weird client-side transformations

00:03:48,870 --> 00:03:54,540
that break and are super brittle and you

00:03:51,180 --> 00:03:58,100
don't really want to have so good for

00:03:54,540 --> 00:04:00,360
you graph QL for being product centric

00:03:58,100 --> 00:04:02,310
strong typing I think that's kind of

00:04:00,360 --> 00:04:04,260
like the backbone of the graphical

00:04:02,310 --> 00:04:07,650
server implementation you have a schema

00:04:04,260 --> 00:04:09,900
it's tied to know exactly what you're

00:04:07,650 --> 00:04:12,000
going to get what type you're gonna get

00:04:09,900 --> 00:04:14,269
which allows for a lot of freedom on the

00:04:12,000 --> 00:04:17,729
front end and doing stuff like type Jen

00:04:14,269 --> 00:04:20,750
so I won't talk about this a lot though

00:04:17,729 --> 00:04:24,510
I'll actually actively ignore it so

00:04:20,750 --> 00:04:27,030
client specified queries very similar to

00:04:24,510 --> 00:04:29,340
the first two but the client is the one

00:04:27,030 --> 00:04:29,620
we flipped it the backends not a thing

00:04:29,340 --> 00:04:32,919
like

00:04:29,620 --> 00:04:34,510
yeah this is what you got go ahead the

00:04:32,919 --> 00:04:36,780
clients kind of in control it says what

00:04:34,510 --> 00:04:39,900
it wants in the back and get it back I

00:04:36,780 --> 00:04:44,979
like to think of this as a kin to a

00:04:39,900 --> 00:04:48,760
world in which a REST API or RPC API is

00:04:44,979 --> 00:04:50,199
you call and order a pizza and it comes

00:04:48,760 --> 00:04:52,060
your half and it's like 40 pizza

00:04:50,199 --> 00:04:54,460
toppings on it and it's like take off

00:04:52,060 --> 00:04:56,199
the 37 you don't want and here's like

00:04:54,460 --> 00:04:59,620
the three toppings you have and your

00:04:56,199 --> 00:05:01,660
pizzas kind of gross now and you still

00:04:59,620 --> 00:05:02,050
eat it because pizza but you're not that

00:05:01,660 --> 00:05:04,600
happy

00:05:02,050 --> 00:05:05,979
whereas in grad school you're like I

00:05:04,600 --> 00:05:07,830
want these for toppings they're like

00:05:05,979 --> 00:05:11,380
okay here you go

00:05:07,830 --> 00:05:15,789
which is polite and how pizza shops work

00:05:11,380 --> 00:05:18,220
so why not api's and then the last one

00:05:15,789 --> 00:05:21,729
is it's introspective meaning you can

00:05:18,220 --> 00:05:23,289
actually query the schema introspective

00:05:21,729 --> 00:05:25,600
like fancy word that I kind of don't

00:05:23,289 --> 00:05:27,010
understand but basically you can ask the

00:05:25,600 --> 00:05:28,930
schema both sides as how graphical is

00:05:27,010 --> 00:05:31,419
powered but I won't get too much into

00:05:28,930 --> 00:05:34,960
that you guys I'll say you can't use it

00:05:31,419 --> 00:05:37,120
later so then what's appealing about

00:05:34,960 --> 00:05:38,620
grass qol why do we want to use it I

00:05:37,120 --> 00:05:41,770
think I drove a little into there but

00:05:38,620 --> 00:05:45,280
I'll go a little further there the query

00:05:41,770 --> 00:05:47,260
system extremely powerful like I said so

00:05:45,280 --> 00:05:49,539
that's why we were just discussed you

00:05:47,260 --> 00:05:51,070
have things like query directives which

00:05:49,539 --> 00:05:55,840
allow you to implement things like

00:05:51,070 --> 00:05:57,039
Apollo's defer skip include and other

00:05:55,840 --> 00:05:58,419
things that aren't part of the

00:05:57,039 --> 00:06:01,000
necessarily part of the language

00:05:58,419 --> 00:06:03,810
specification that you can kind of build

00:06:01,000 --> 00:06:06,669
out yourself you can use it to build out

00:06:03,810 --> 00:06:08,139
sample implementations and maybe it goes

00:06:06,669 --> 00:06:08,919
into the spec maybe it never does maybe

00:06:08,139 --> 00:06:11,320
beats just for you

00:06:08,919 --> 00:06:12,180
I know one of the talks mentioned schema

00:06:11,320 --> 00:06:15,150
directives

00:06:12,180 --> 00:06:17,560
there's also query directives super

00:06:15,150 --> 00:06:20,289
super super nice to work with I think

00:06:17,560 --> 00:06:22,720
left data over the wire again a big

00:06:20,289 --> 00:06:25,240
topic of graph you oh you're only

00:06:22,720 --> 00:06:26,440
getting those for toppings so it's less

00:06:25,240 --> 00:06:29,199
being sent over the wire and I think

00:06:26,440 --> 00:06:30,520
increasingly mobile world and high

00:06:29,199 --> 00:06:32,020
latency world where we're actually

00:06:30,520 --> 00:06:34,180
thinking about our apps worldwide and

00:06:32,020 --> 00:06:35,919
not just for like 12 people that live

00:06:34,180 --> 00:06:38,050
next door to us with high speed internet

00:06:35,919 --> 00:06:40,450
this is increasingly more important

00:06:38,050 --> 00:06:42,980
sitting with reducing round trips to the

00:06:40,450 --> 00:06:46,430
server high latency environments are

00:06:42,980 --> 00:06:49,850
not going to want to do that so don't do

00:06:46,430 --> 00:06:51,890
it if you don't have to and developer

00:06:49,850 --> 00:06:53,900
tooling like graphical it's very nice to

00:06:51,890 --> 00:06:55,520
be able to write a schema before you

00:06:53,900 --> 00:06:59,450
have a front-end Hoppe and make sure the

00:06:55,520 --> 00:07:01,460
queries make sense and kind of iterate

00:06:59,450 --> 00:07:04,580
on the API before a front-end really

00:07:01,460 --> 00:07:07,760
exists and then I know almost nothing

00:07:04,580 --> 00:07:08,900
I'm lazy so if you know anything else

00:07:07,760 --> 00:07:10,700
tell me

00:07:08,900 --> 00:07:14,360
and also I listen to a lot of talk so I

00:07:10,700 --> 00:07:16,460
did learn from those hopefully but then

00:07:14,360 --> 00:07:19,820
you come to the problem of not needing

00:07:16,460 --> 00:07:22,370
to solve all those problems and you have

00:07:19,820 --> 00:07:25,730
constraints around time or constraints

00:07:22,370 --> 00:07:27,710
around tooling that you're using and you

00:07:25,730 --> 00:07:31,910
just might not need to solve all those

00:07:27,710 --> 00:07:34,190
problems so you really want to use graph

00:07:31,910 --> 00:07:36,380
QL you go to your boss you know like I

00:07:34,190 --> 00:07:37,910
want graph QL it's gonna send low state

00:07:36,380 --> 00:07:41,450
over the wire you know it's gonna be so

00:07:37,910 --> 00:07:43,670
fast and then your boss like you make

00:07:41,450 --> 00:07:45,980
internal apps at Netflix for 200 users

00:07:43,670 --> 00:07:48,230
at all sit in a Netflix office high

00:07:45,980 --> 00:07:50,030
speed internet and we really don't care

00:07:48,230 --> 00:07:52,370
about how much data goes over the wire

00:07:50,030 --> 00:07:56,830
because it will still be relatively fast

00:07:52,370 --> 00:07:56,830
and you're like true

00:07:56,930 --> 00:08:03,350
I'll talk together next 101

00:08:00,200 --> 00:08:04,790
it's a short-lived application so you

00:08:03,350 --> 00:08:06,800
don't necessarily want to take the time

00:08:04,790 --> 00:08:08,720
to create the types

00:08:06,800 --> 00:08:11,000
that's a slow-moving clock or egg it's a

00:08:08,720 --> 00:08:13,070
regular speed moving clock but it's

00:08:11,000 --> 00:08:17,510
still time I guess that wait that's

00:08:13,070 --> 00:08:18,980
nothing okay anyway sorry yeah so it's

00:08:17,510 --> 00:08:20,750
just might be like a hack project hack

00:08:18,980 --> 00:08:23,180
day you want the expressiveness of the

00:08:20,750 --> 00:08:25,940
query but you don't want to write all

00:08:23,180 --> 00:08:27,890
the types because you're lazy like I am

00:08:25,940 --> 00:08:29,810
or you don't control the backend data

00:08:27,890 --> 00:08:31,250
source there's a lot of things like that

00:08:29,810 --> 00:08:34,160
can be spun up quickly using something

00:08:31,250 --> 00:08:35,810
like firebase where you're not

00:08:34,160 --> 00:08:40,610
necessarily in charge of how that day is

00:08:35,810 --> 00:08:41,690
coming back yeah but you still want or

00:08:40,610 --> 00:08:44,300
you're just experimenting something you

00:08:41,690 --> 00:08:46,490
still want that query expressiveness but

00:08:44,300 --> 00:08:47,840
you really can't have the other parts so

00:08:46,490 --> 00:08:49,010
it's not available to you you can't have

00:08:47,840 --> 00:08:51,730
this junk ID then you can't have the

00:08:49,010 --> 00:08:54,680
introspect to it now but that's cool

00:08:51,730 --> 00:08:57,080
it's all about the query system which i

00:08:54,680 --> 00:08:59,810
think is the revolutionary part of graph

00:08:57,080 --> 00:09:01,820
QL that you can look at a component and

00:08:59,810 --> 00:09:05,750
you see what exactly the data it's going

00:09:01,820 --> 00:09:08,330
to get and it's super easy to work with

00:09:05,750 --> 00:09:10,910
someone that's new to a team can pop in

00:09:08,330 --> 00:09:14,510
be like oh this is missing row with

00:09:10,910 --> 00:09:18,410
title row with and then they have the

00:09:14,510 --> 00:09:19,700
data they want which is nice because no

00:09:18,410 --> 00:09:21,940
one wants to feel bad I mean your first

00:09:19,700 --> 00:09:21,940
day of work

00:09:22,930 --> 00:09:29,570
yep that's me falling off a couch at

00:09:26,240 --> 00:09:32,060
Netflix so we've all felt like this I

00:09:29,570 --> 00:09:34,700
think working with unknown REST API is

00:09:32,060 --> 00:09:36,290
where it's or inside of a large

00:09:34,700 --> 00:09:39,380
front-end application we're just not

00:09:36,290 --> 00:09:41,510
sure how the data is controlled and we

00:09:39,380 --> 00:09:45,340
just want to fall down and give up I

00:09:41,510 --> 00:09:50,060
think this was within my first two weeks

00:09:45,340 --> 00:09:52,640
so it's just like not made for the front

00:09:50,060 --> 00:09:56,390
end and that's what people say and

00:09:52,640 --> 00:10:01,760
that's a who gets blamed so let's make

00:09:56,390 --> 00:10:03,800
stuff for uh what you see is what you

00:10:01,760 --> 00:10:05,120
get I think if you've been around for a

00:10:03,800 --> 00:10:06,940
long time you might remember this

00:10:05,120 --> 00:10:09,720
worried in a very bad way

00:10:06,940 --> 00:10:12,460
you think things like Dreamweaver and

00:10:09,720 --> 00:10:14,290
front-page maybe I don't remember

00:10:12,460 --> 00:10:15,520
exactly what that one's called the kind

00:10:14,290 --> 00:10:18,280
of just making these drag-and-drop you

00:10:15,520 --> 00:10:20,890
eyes but for me with graphical it makes

00:10:18,280 --> 00:10:22,420
a lot of sense the data you see the

00:10:20,890 --> 00:10:23,470
query is like you're gonna get back that

00:10:22,420 --> 00:10:26,460
data you're gonna get it back in that

00:10:23,470 --> 00:10:29,110
shape you can be confident about that

00:10:26,460 --> 00:10:32,620
it's not gonna be like Dreamweaver it

00:10:29,110 --> 00:10:34,150
will be better yeah

00:10:32,620 --> 00:10:39,100
decorative decorative data fetching

00:10:34,150 --> 00:10:40,870
another super important one you can look

00:10:39,100 --> 00:10:44,380
at this thing right alongside a

00:10:40,870 --> 00:10:47,350
component and today okay this is sweet

00:10:44,380 --> 00:10:49,420
I'm getting its data like we said it's

00:10:47,350 --> 00:10:52,030
hierarchal just like the data will be

00:10:49,420 --> 00:10:53,350
and what a component receives and the

00:10:52,030 --> 00:10:54,610
hierarchical nature it can really

00:10:53,350 --> 00:10:58,270
influence with thinking of how you build

00:10:54,610 --> 00:10:59,740
an application looking at a craft well

00:10:58,270 --> 00:11:02,830
query can influence how you might break

00:10:59,740 --> 00:11:03,430
down a component architecture or vice

00:11:02,830 --> 00:11:06,280
versa

00:11:03,430 --> 00:11:08,140
you might structure a thing there's I

00:11:06,280 --> 00:11:09,760
mean schema first of all make query

00:11:08,140 --> 00:11:12,520
first development or I think that

00:11:09,760 --> 00:11:13,810
graphical enables and going to a swagger

00:11:12,520 --> 00:11:19,630
page and being annoyed

00:11:13,810 --> 00:11:21,460
doesn't really allow for that so just

00:11:19,630 --> 00:11:23,950
for like an example of a traditional app

00:11:21,460 --> 00:11:26,380
read apps or something like it I mean no

00:11:23,950 --> 00:11:28,750
insult to read us I've used it heavily

00:11:26,380 --> 00:11:31,720
and continue to and this is probably

00:11:28,750 --> 00:11:33,040
like really bad redux but you might see

00:11:31,720 --> 00:11:35,440
something like this in an app because

00:11:33,040 --> 00:11:38,380
not everyone writes perfect code we all

00:11:35,440 --> 00:11:41,260
work under time constraints so you to

00:11:38,380 --> 00:11:43,360
first save work and someone's like we

00:11:41,260 --> 00:11:45,640
need that row with you can handle that

00:11:43,360 --> 00:11:47,410
it's your first day and you've been

00:11:45,640 --> 00:11:50,560
working in the industry for some viewers

00:11:47,410 --> 00:11:52,060
maybe I don't know and you see you just

00:11:50,560 --> 00:11:55,390
get user get settings and you're like oh

00:11:52,060 --> 00:11:56,850
okay cool there's 42 settings and I

00:11:55,390 --> 00:11:59,110
don't know anything about this user

00:11:56,850 --> 00:12:01,510
whereas in the graphical world you would

00:11:59,110 --> 00:12:03,850
see something like this you're like ID

00:12:01,510 --> 00:12:08,800
name created a column with Fame and

00:12:03,850 --> 00:12:11,320
you're like oh well with nice sweet I

00:12:08,800 --> 00:12:13,960
think like the graphical racism as I'll

00:12:11,320 --> 00:12:15,610
say again and again is just like a

00:12:13,960 --> 00:12:17,650
beautiful gift to the world I think of

00:12:15,610 --> 00:12:18,819
it a lot like I think of myself like

00:12:17,650 --> 00:12:21,970
just

00:12:18,819 --> 00:12:24,189
i fantastic.if yeah yeah that was

00:12:21,970 --> 00:12:27,209
Christmas morning that was my gift to my

00:12:24,189 --> 00:12:29,630
parents we forgot to get them something

00:12:27,209 --> 00:12:32,710
they didn't like it

00:12:29,630 --> 00:12:32,710
[Music]

00:12:33,040 --> 00:12:38,340
so I've talked a lot about the query

00:12:35,140 --> 00:12:40,540
system now and how sweet it is and

00:12:38,340 --> 00:12:43,510
you're thinking can we just use the

00:12:40,540 --> 00:12:44,890
query system because I there's a lot of

00:12:43,510 --> 00:12:47,260
legitimate reasons why you might not use

00:12:44,890 --> 00:12:48,700
all graph QL or you might want to do

00:12:47,260 --> 00:12:50,020
some kind of iterative approach where

00:12:48,700 --> 00:12:52,330
you're kind of experimenting with if

00:12:50,020 --> 00:12:53,590
you'll want to use it and do you really

00:12:52,330 --> 00:12:54,820
want to build out the whole thing if you

00:12:53,590 --> 00:12:58,270
don't even know if that's gonna be your

00:12:54,820 --> 00:13:01,420
final choice I was originally just gonna

00:12:58,270 --> 00:13:04,420
on the top right now and say no but I

00:13:01,420 --> 00:13:08,950
thought that would be really rude and so

00:13:04,420 --> 00:13:11,530
yes you can kind of so the graphical

00:13:08,950 --> 00:13:14,020
jazz team they've really done a

00:13:11,530 --> 00:13:17,470
fantastic job modularizing everything

00:13:14,020 --> 00:13:20,500
that's a part of graphical also you can

00:13:17,470 --> 00:13:23,980
use like Jeff's a parser just types just

00:13:20,500 --> 00:13:26,070
visitors so if you're willing to give up

00:13:23,980 --> 00:13:29,560
like some of the things that graph QL

00:13:26,070 --> 00:13:30,940
you can then use the query system it's

00:13:29,560 --> 00:13:34,350
kind of like a state management and

00:13:30,940 --> 00:13:37,360
fetch system with your components and

00:13:34,350 --> 00:13:39,040
not have everything else so if we look

00:13:37,360 --> 00:13:41,170
back earlier you can still get the

00:13:39,040 --> 00:13:42,850
hierarchal data structure you still get

00:13:41,170 --> 00:13:43,960
product-centric hopefully you're

00:13:42,850 --> 00:13:45,610
thinking about the product and not just

00:13:43,960 --> 00:13:50,490
making weird queries on purpose to be

00:13:45,610 --> 00:13:53,050
rude strong typing yeah bye sorry

00:13:50,490 --> 00:13:55,150
clients with white queries yep still got

00:13:53,050 --> 00:13:56,380
them introspective well you can't

00:13:55,150 --> 00:13:59,080
introspect on a schema that doesn't

00:13:56,380 --> 00:14:01,510
exist so I put the strikethrough there

00:13:59,080 --> 00:14:04,420
and the appeal we get the queries it

00:14:01,510 --> 00:14:06,850
soon we get the kind of the shape of the

00:14:04,420 --> 00:14:09,340
data along with the component which is

00:14:06,850 --> 00:14:11,440
very nice less data sent over the wire

00:14:09,340 --> 00:14:13,030
now we're not gonna get that but there's

00:14:11,440 --> 00:14:14,830
gonna be like a middleman that takes all

00:14:13,030 --> 00:14:18,120
the toppings for you so it's kind of

00:14:14,830 --> 00:14:22,300
opaque to you that they sent you the

00:14:18,120 --> 00:14:23,200
gigantic pizza topping pizza reducing

00:14:22,300 --> 00:14:26,110
around trips you're not really gonna get

00:14:23,200 --> 00:14:27,850
that but you can do interesting things

00:14:26,110 --> 00:14:29,920
or Brown interesting optimizations when

00:14:27,850 --> 00:14:31,510
a library is controlling the fetching as

00:14:29,920 --> 00:14:35,890
opposed to you controlling it yourself

00:14:31,510 --> 00:14:37,750
and so you do get some some wins there

00:14:35,890 --> 00:14:39,720
potentially or some losses if you're

00:14:37,750 --> 00:14:41,650
really good at this stuff

00:14:39,720 --> 00:14:43,580
developer tooling like you're not gonna

00:14:41,650 --> 00:14:47,390
get graphical you don't have a schema

00:14:43,580 --> 00:14:51,620
there's nothing to introspect against so

00:14:47,390 --> 00:14:54,830
how route QL is a library I've been

00:14:51,620 --> 00:14:56,990
working on name pending someone

00:14:54,830 --> 00:14:59,150
suggested the name half QL which I felt

00:14:56,990 --> 00:15:02,090
a lot better and I'm really jealous of

00:14:59,150 --> 00:15:03,110
them for being good at naming things but

00:15:02,090 --> 00:15:05,300
theoretically you could do this however

00:15:03,110 --> 00:15:07,550
you want you could do similar things so

00:15:05,300 --> 00:15:08,810
what I'm doing here this is not

00:15:07,550 --> 00:15:11,420
something that I would recommend using

00:15:08,810 --> 00:15:13,550
in production like actually please don't

00:15:11,420 --> 00:15:18,260
I'll close the astir you tracker if

00:15:13,550 --> 00:15:21,100
someone does but yeah it's just a me to

00:15:18,260 --> 00:15:23,690
some of the paradigms from about

00:15:21,100 --> 00:15:25,310
libraries like Apollo and just implement

00:15:23,690 --> 00:15:28,010
them in like a query system only kind of

00:15:25,310 --> 00:15:30,110
way so yeah I basically just rarely

00:15:28,010 --> 00:15:34,820
Apollo documentation and copied a lot of

00:15:30,110 --> 00:15:36,560
stuff so since it uses a graphical

00:15:34,820 --> 00:15:39,380
parser though if it's not a valid

00:15:36,560 --> 00:15:40,070
graphical query it won't be valid I'll

00:15:39,380 --> 00:15:45,860
call it half cool

00:15:40,070 --> 00:15:48,020
a valid Haskell query so anything like

00:15:45,860 --> 00:15:50,930
imagine a world in which you then have a

00:15:48,020 --> 00:15:53,690
actual graph go back and these queries

00:15:50,930 --> 00:15:55,790
will still theoretically work there's

00:15:53,690 --> 00:15:57,440
some small differences in the library

00:15:55,790 --> 00:15:58,850
implementation you could implement

00:15:57,440 --> 00:16:01,370
something better that make it easier and

00:15:58,850 --> 00:16:02,810
I've been playing around with a CLI tool

00:16:01,370 --> 00:16:03,380
that would just automate the transition

00:16:02,810 --> 00:16:07,610
to Apollo

00:16:03,380 --> 00:16:09,580
if you had a back-end which would make

00:16:07,610 --> 00:16:13,400
it maybe I'd open nature tracker again

00:16:09,580 --> 00:16:16,070
so let's look at some code because I

00:16:13,400 --> 00:16:17,150
could just be making all this up I guess

00:16:16,070 --> 00:16:18,890
looking at code I could still be making

00:16:17,150 --> 00:16:23,870
it up but maybe I'm more likely to

00:16:18,890 --> 00:16:25,340
believe me so this is a and keep in mind

00:16:23,870 --> 00:16:28,190
that these are all like very naive

00:16:25,340 --> 00:16:29,300
implementations I didn't write the query

00:16:28,190 --> 00:16:31,670
in line on purpose so it would be

00:16:29,300 --> 00:16:36,050
created every time I was just doing this

00:16:31,670 --> 00:16:38,360
quickly and basically so you want to

00:16:36,050 --> 00:16:42,910
such a post ID title you show the title

00:16:38,360 --> 00:16:45,980
you're loading really simple to grok

00:16:42,910 --> 00:16:48,800
passing that variable and then this is

00:16:45,980 --> 00:16:50,960
the same thing except using route ql fql

00:16:48,800 --> 00:16:53,470
whatever we want to call it you'll

00:16:50,960 --> 00:16:56,500
notice like a couple differences

00:16:53,470 --> 00:16:58,420
in that it's not passing in actually the

00:16:56,500 --> 00:17:01,720
post ID here so you're probably like oh

00:16:58,420 --> 00:17:06,130
how how they're gonna know what posts

00:17:01,720 --> 00:17:08,910
again if there's no post ID and I said

00:17:06,130 --> 00:17:13,060
the same thing I was like oh I mess up

00:17:08,910 --> 00:17:14,560
but so this is extra prop for now I've

00:17:13,060 --> 00:17:16,540
done some experimentation about moving

00:17:14,560 --> 00:17:18,640
to standard arguments but not quite

00:17:16,540 --> 00:17:20,020
there yet but you essentially will get

00:17:18,640 --> 00:17:22,780
the prop so that field you're the

00:17:20,020 --> 00:17:25,360
selection set and you return this object

00:17:22,780 --> 00:17:27,970
that will have like route params query

00:17:25,360 --> 00:17:30,700
params and a request body if it's a

00:17:27,970 --> 00:17:33,010
mutation and so this will essentially be

00:17:30,700 --> 00:17:35,620
the thing that is then constructed into

00:17:33,010 --> 00:17:37,600
a URL that is called you can pass an

00:17:35,620 --> 00:17:40,210
endpoint into this thing directly or

00:17:37,600 --> 00:17:42,520
there's a provider component similar to

00:17:40,210 --> 00:17:46,330
Apollo where you could kind of pass in

00:17:42,520 --> 00:17:48,100
your config but theoretically yeah this

00:17:46,330 --> 00:17:51,980
will just this is what is used to just

00:17:48,100 --> 00:17:53,490
construct a query how does this work so

00:17:51,980 --> 00:17:56,530
[Music]

00:17:53,490 --> 00:17:57,640
basically for now you can pass in just a

00:17:56,530 --> 00:17:59,350
string directly and I'll parse it for

00:17:57,640 --> 00:18:01,510
you or you could pass in the ast

00:17:59,350 --> 00:18:03,910
probably gonna move the parsing I hope

00:18:01,510 --> 00:18:06,760
you said less work for me and less

00:18:03,910 --> 00:18:07,720
surface area for mistakes when I think

00:18:06,760 --> 00:18:08,920
it's ready been established in the

00:18:07,720 --> 00:18:11,380
community that people are willing to

00:18:08,920 --> 00:18:12,930
parse their own queries so I don't know

00:18:11,380 --> 00:18:15,970
why I would offer something otherwise

00:18:12,930 --> 00:18:19,690
but yeah so just go and then once it

00:18:15,970 --> 00:18:22,630
have the AFT essentially can you see

00:18:19,690 --> 00:18:23,770
that well enough yeah so we'll go

00:18:22,630 --> 00:18:26,260
through this it's going through

00:18:23,770 --> 00:18:27,550
selection set and it's getting basically

00:18:26,260 --> 00:18:30,730
it's calling that method it's getting

00:18:27,550 --> 00:18:33,220
the thing the it's basically getting the

00:18:30,730 --> 00:18:34,420
params preprints body it assumes if

00:18:33,220 --> 00:18:37,570
you're doing a query that'll be a get

00:18:34,420 --> 00:18:40,720
requests otherwise a post request but

00:18:37,570 --> 00:18:44,110
you can override that with put and the

00:18:40,720 --> 00:18:45,340
like whatever you want and then it's

00:18:44,110 --> 00:18:47,680
gonna go from there

00:18:45,340 --> 00:18:50,290
form the parameter string form the query

00:18:47,680 --> 00:18:51,820
string and then form of fetch and I use

00:18:50,290 --> 00:18:54,490
its library called fetch to dupe which

00:18:51,820 --> 00:18:58,710
was made by when my colleagues James

00:18:54,490 --> 00:19:00,700
Smith essentially this allows you to

00:18:58,710 --> 00:19:02,650
implement a lot of the same caching

00:19:00,700 --> 00:19:06,280
things that Apollo does it has cache

00:19:02,650 --> 00:19:08,770
cache first cache only network only

00:19:06,280 --> 00:19:10,270
cash only so a lot of stuff kind of just

00:19:08,770 --> 00:19:12,490
comes for free in the same way that

00:19:10,270 --> 00:19:14,110
Apollo have the things you can pass in

00:19:12,490 --> 00:19:16,450
those options which again makes

00:19:14,110 --> 00:19:21,370
potential migration to true graphical

00:19:16,450 --> 00:19:26,380
simpler and then you can pass resolvers

00:19:21,370 --> 00:19:29,140
directly into the query or you can pass

00:19:26,380 --> 00:19:32,380
it into like a bigger route resolver

00:19:29,140 --> 00:19:34,810
into the provider component and that one

00:19:32,380 --> 00:19:39,730
this one will take precedence but you

00:19:34,810 --> 00:19:41,350
can do it I believe in you but the

00:19:39,730 --> 00:19:42,730
resolver obviously exists on the client

00:19:41,350 --> 00:19:46,360
side be if there is no server side

00:19:42,730 --> 00:19:49,270
implementation of graph girl here so we

00:19:46,360 --> 00:19:51,310
can take a look at some examples so this

00:19:49,270 --> 00:19:56,350
is uh just using a higher-order

00:19:51,310 --> 00:19:58,180
component it's getting person posting to

00:19:56,350 --> 00:20:01,180
do which is like a pretty classic app

00:19:58,180 --> 00:20:05,200
that everyone does people post in to do

00:20:01,180 --> 00:20:07,210
this maybe it's like your life dashboard

00:20:05,200 --> 00:20:09,790
and post means something else to you I

00:20:07,210 --> 00:20:12,220
don't know is the first three things I

00:20:09,790 --> 00:20:14,530
thought of you'll see the 2ds are

00:20:12,220 --> 00:20:16,210
changing so you can use like the poll

00:20:14,530 --> 00:20:19,780
interval option which is something to

00:20:16,210 --> 00:20:21,730
Apolo subscriptions I'm not convinced

00:20:19,780 --> 00:20:25,000
enough about it to work hard enough to

00:20:21,730 --> 00:20:26,650
put them in here and I think polling

00:20:25,000 --> 00:20:31,000
works fine and updating the cache works

00:20:26,650 --> 00:20:32,590
fine which you will be able to do and

00:20:31,000 --> 00:20:36,940
then same thing but with a brand new

00:20:32,590 --> 00:20:39,070
prot same exact thing yeah and then

00:20:36,940 --> 00:20:44,740
essentially mutations work in a similar

00:20:39,070 --> 00:20:47,530
way that is with you know I would a

00:20:44,740 --> 00:20:50,380
component and then render prop and then

00:20:47,530 --> 00:20:53,140
this I actually just did this morning

00:20:50,380 --> 00:20:55,630
and put the slider and do they woke up

00:20:53,140 --> 00:21:00,790
early so query deferral which is similar

00:20:55,630 --> 00:21:02,440
to at defer directive inside Apollo to

00:21:00,790 --> 00:21:06,430
me this was especially an interesting

00:21:02,440 --> 00:21:07,960
case because with you are making the

00:21:06,430 --> 00:21:10,360
same number of round trips and one of

00:21:07,960 --> 00:21:12,880
those round trips might be super

00:21:10,360 --> 00:21:16,030
unimportant but take up the majority of

00:21:12,880 --> 00:21:17,170
the query like the to do is like you

00:21:16,030 --> 00:21:19,309
might not care to see your to-do list

00:21:17,170 --> 00:21:21,470
before you will know who you are

00:21:19,309 --> 00:21:22,759
because it's like memento or something

00:21:21,470 --> 00:21:26,570
I've never actually seen that movie so I

00:21:22,759 --> 00:21:29,299
don't know what happens but you'll see

00:21:26,570 --> 00:21:32,570
here like this is if we just have a

00:21:29,299 --> 00:21:35,600
generic query without deferring it takes

00:21:32,570 --> 00:21:38,360
like a really long time and then we

00:21:35,600 --> 00:21:40,070
display all our data here we kind of get

00:21:38,360 --> 00:21:42,889
everything really quickly except the to

00:21:40,070 --> 00:21:47,090
do is and then eventually those two dues

00:21:42,889 --> 00:21:49,970
come in so it's like a much nicer

00:21:47,090 --> 00:21:51,649
interface and that's using just like the

00:21:49,970 --> 00:21:53,539
same exact directive syntax at the

00:21:51,649 --> 00:21:54,590
potiphar so this is like one of the

00:21:53,539 --> 00:21:57,440
things that really shows you the power

00:21:54,590 --> 00:22:00,950
of directives is that I was able to

00:21:57,440 --> 00:22:03,980
accidentally wake up at 6 a.m. and defer

00:22:00,950 --> 00:22:05,809
requests and then put it in here

00:22:03,980 --> 00:22:08,269
dangerously leave their gifts though I'm

00:22:05,809 --> 00:22:12,200
not one of those people that lives on

00:22:08,269 --> 00:22:13,220
the edge of live coding now you're

00:22:12,200 --> 00:22:16,149
saying how they never can use in a real

00:22:13,220 --> 00:22:19,879
world app hopefully you think no because

00:22:16,149 --> 00:22:21,110
I've told you not to and really think

00:22:19,879 --> 00:22:25,580
quotes and usually when people put

00:22:21,110 --> 00:22:27,769
things in quotes they mean yeah so yeah

00:22:25,580 --> 00:22:33,049
I can kind of have it's only used by me

00:22:27,769 --> 00:22:37,399
though which is nice so does anyone know

00:22:33,049 --> 00:22:40,909
what this is from yep the MIDI clueless

00:22:37,399 --> 00:22:45,080
hit 1995 movie starring Alicia

00:22:40,909 --> 00:22:46,700
Silverstone based on I think Emma the

00:22:45,080 --> 00:22:50,840
book but I don't know and it's

00:22:46,700 --> 00:22:51,860
unimportant to graph QL I remember

00:22:50,840 --> 00:22:54,559
watching this movie before their first

00:22:51,860 --> 00:22:57,830
time and seeing this and I was so super

00:22:54,559 --> 00:22:59,059
duper jealous of share because she had

00:22:57,830 --> 00:23:00,470
this thing that showed her all her

00:22:59,059 --> 00:23:04,600
clothes and it could make outfits for

00:23:00,470 --> 00:23:07,639
her and I was like mom I need this app

00:23:04,600 --> 00:23:08,990
except I didn't call an app if I don't

00:23:07,639 --> 00:23:12,169
think things were called apps until

00:23:08,990 --> 00:23:16,460
pretty recently it's like give me that

00:23:12,169 --> 00:23:19,249
computer thing and so I was like I need

00:23:16,460 --> 00:23:22,009
to try it see this library actually does

00:23:19,249 --> 00:23:25,659
anything and so I built a react native

00:23:22,009 --> 00:23:25,659
app through my own closet

00:23:26,330 --> 00:23:32,760
so this was built by me in 2018 share

00:23:30,600 --> 00:23:35,100
that is much better than mine she has a

00:23:32,760 --> 00:23:36,960
machine learning which like tells her

00:23:35,100 --> 00:23:38,910
bra outfits mattre not which it seems

00:23:36,960 --> 00:23:40,770
like she had like the best development

00:23:38,910 --> 00:23:42,390
team in 1995 I don't know why other

00:23:40,770 --> 00:23:46,770
people weren't hiring them away from her

00:23:42,390 --> 00:23:49,500
closet but yeah so I was able to use

00:23:46,770 --> 00:23:52,860
library make requests get my clothes I

00:23:49,500 --> 00:23:55,860
plan outfits in here sometimes wake up

00:23:52,860 --> 00:24:01,200
the next morning reduce decision tree of

00:23:55,860 --> 00:24:03,870
the morning and it's super nice yeah so

00:24:01,200 --> 00:24:06,030
I will not pretend like I totally meant

00:24:03,870 --> 00:24:07,500
in this on my own although for like 10

00:24:06,030 --> 00:24:10,650
seconds I thought I did before I use

00:24:07,500 --> 00:24:12,720
Google so there's graphical anywhere

00:24:10,650 --> 00:24:14,310
which is made by Apollo team and that

00:24:12,720 --> 00:24:18,570
kind of allows you to execute anything

00:24:14,310 --> 00:24:20,610
in a schema list way I need like

00:24:18,570 --> 00:24:24,180
compliant graph girl query there's some

00:24:20,610 --> 00:24:25,680
differences around like you would have

00:24:24,180 --> 00:24:27,480
to make the fetch yourself so you would

00:24:25,680 --> 00:24:31,740
essentially maybe call to github REST

00:24:27,480 --> 00:24:34,050
API or make and then you'd pass you'd

00:24:31,740 --> 00:24:36,930
pass in that data along with the query

00:24:34,050 --> 00:24:38,340
and get back what you want and then this

00:24:36,930 --> 00:24:41,340
is one that I actually super recommend

00:24:38,340 --> 00:24:43,680
if you want to do an incremental move to

00:24:41,340 --> 00:24:45,540
graph QL is Apollo link rest which

00:24:43,680 --> 00:24:47,130
allows you to decorate queries with a

00:24:45,540 --> 00:24:50,760
draft if it's going to hit a REST API

00:24:47,130 --> 00:24:52,080
and you pass in a path argument and so

00:24:50,760 --> 00:24:53,060
if you're actually going to move your

00:24:52,080 --> 00:24:56,250
organization Negresco

00:24:53,060 --> 00:24:58,380
this is really nice I haven't actually

00:24:56,250 --> 00:24:59,850
tried it so I dunno if I super I'll take

00:24:58,380 --> 00:25:02,730
that back to super recommend and make it

00:24:59,850 --> 00:25:04,950
just a recommend but it looks cool and

00:25:02,730 --> 00:25:08,550
if it works like I said it does I bet it

00:25:04,950 --> 00:25:10,350
is job and then probably all these

00:25:08,550 --> 00:25:12,720
things probably probably the exact same

00:25:10,350 --> 00:25:13,980
thing maybe because other people are

00:25:12,720 --> 00:25:16,170
smarter than me and graph fields been

00:25:13,980 --> 00:25:20,160
around for a long time okay

00:25:16,170 --> 00:25:22,680
so I'll just now briefly recap what is

00:25:20,160 --> 00:25:24,900
currently supported so you can query

00:25:22,680 --> 00:25:26,870
them you to any arbitrary back-end using

00:25:24,900 --> 00:25:30,060
render props with high order components

00:25:26,870 --> 00:25:34,140
and every query is graphical compliance

00:25:30,060 --> 00:25:36,450
it or it will fail polling for new data

00:25:34,140 --> 00:25:38,429
is full the interval which I generally

00:25:36,450 --> 00:25:40,769
found works

00:25:38,429 --> 00:25:44,159
cases or stale data like was mentioned

00:25:40,769 --> 00:25:48,149
before sale days generally okay for a

00:25:44,159 --> 00:25:51,269
lot of things similar caching options to

00:25:48,149 --> 00:25:53,730
Apolo caching data you can read and

00:25:51,269 --> 00:25:55,679
write from the cache soon it's um I'd

00:25:53,730 --> 00:25:57,539
say it's supporting now oh I guess I

00:25:55,679 --> 00:26:01,289
didn't it's on my computer I'm waiting

00:25:57,539 --> 00:26:02,100
for some other library merges and then

00:26:01,289 --> 00:26:03,419
probably some other stuff that I'm

00:26:02,100 --> 00:26:04,619
forgetting because I do a lot of just

00:26:03,419 --> 00:26:07,350
like I said I like 6:00 in the morning

00:26:04,619 --> 00:26:09,679
or 2:00 in the morning or weird times

00:26:07,350 --> 00:26:14,929
and I just don't remember what I do and

00:26:09,679 --> 00:26:22,830
it's poorly documented to be up front

00:26:14,929 --> 00:26:24,690
what's coming top level deferred queries

00:26:22,830 --> 00:26:26,909
I added the ice which would slide with

00:26:24,690 --> 00:26:29,610
on this morning so I forgot to say it

00:26:26,909 --> 00:26:31,200
because there you go

00:26:29,610 --> 00:26:32,549
because I did this morning so I've moved

00:26:31,200 --> 00:26:37,440
it from the what's coming side to the

00:26:32,549 --> 00:26:38,999
what supportive slide so one problem

00:26:37,440 --> 00:26:42,240
I've run into actually using this with

00:26:38,999 --> 00:26:44,999
my clothing app is currently it only

00:26:42,240 --> 00:26:47,070
supports making requests at the top

00:26:44,999 --> 00:26:48,509
level of this election set so you can't

00:26:47,070 --> 00:26:51,899
have a sub selection set request or

00:26:48,509 --> 00:26:55,350
resolver which becomes an issue as

00:26:51,899 --> 00:26:56,340
especially if something grows and for

00:26:55,350 --> 00:26:57,690
deferring data at a lower level

00:26:56,340 --> 00:27:01,799
depending on how your data is being

00:26:57,690 --> 00:27:03,840
fetched I think I found a way to move to

00:27:01,799 --> 00:27:06,360
arguments which will it be both more in

00:27:03,840 --> 00:27:09,269
line with Apollo and other graphical

00:27:06,360 --> 00:27:12,269
implementations and allow an easier kind

00:27:09,269 --> 00:27:15,179
of transition like kind of probably like

00:27:12,269 --> 00:27:19,019
a one-line CLI change if you actually

00:27:15,179 --> 00:27:21,149
have a schema in this world by the

00:27:19,019 --> 00:27:22,919
automated migration path even though I

00:27:21,149 --> 00:27:24,269
told you not to use it I guess this is

00:27:22,919 --> 00:27:27,269
just for me to do for fun to see if I

00:27:24,269 --> 00:27:28,980
can and often it take updates like I

00:27:27,269 --> 00:27:32,429
said that's coming very soon it's just

00:27:28,980 --> 00:27:36,299
waiting on emerge and direct access to

00:27:32,429 --> 00:27:40,230
the cache so basically this is just

00:27:36,299 --> 00:27:41,429
meant as an experiment to show there's a

00:27:40,230 --> 00:27:44,460
lot of stuff you can do with graph QL

00:27:41,429 --> 00:27:47,429
that's not necessarily full graph QL I

00:27:44,460 --> 00:27:50,039
think it's really we've just been

00:27:47,429 --> 00:27:50,970
scratching the surface of what graph QL

00:27:50,039 --> 00:27:55,169
can do

00:27:50,970 --> 00:27:57,570
and thinking about impasse just fetching

00:27:55,169 --> 00:27:59,880
data is interesting these a lot of the

00:27:57,570 --> 00:28:01,049
world exists in hierarchies and there

00:27:59,880 --> 00:28:02,220
might be other things we could do with

00:28:01,049 --> 00:28:04,190
it

00:28:02,220 --> 00:28:07,620
and I think it's really empowered

00:28:04,190 --> 00:28:09,270
Corning site developers to have more

00:28:07,620 --> 00:28:10,679
control over their data and I think it's

00:28:09,270 --> 00:28:14,610
powerful just as a state management

00:28:10,679 --> 00:28:16,830
system and if you make some sacrifices

00:28:14,610 --> 00:28:19,140
you can still leverage the graphical

00:28:16,830 --> 00:28:20,880
pretty system and other parts of graphs

00:28:19,140 --> 00:28:23,100
well while having full graphical

00:28:20,880 --> 00:28:24,750
implementation and that's because like

00:28:23,100 --> 00:28:25,980
the hard work of the apology and the

00:28:24,750 --> 00:28:28,590
graphical teams are really multiple eyes

00:28:25,980 --> 00:28:31,110
everything and let so you do kind of

00:28:28,590 --> 00:28:34,830
wacky experiments in your home late at

00:28:31,110 --> 00:28:37,950
night yeah that's it I'm still still

00:28:34,830 --> 00:28:39,440
Conor give that Conor Hastings my real

00:28:37,950 --> 00:28:43,500
name I tried to be professional there

00:28:39,440 --> 00:28:44,940
but it's not that professional and yeah

00:28:43,500 --> 00:28:48,000
I'm at this conference in the physical

00:28:44,940 --> 00:28:49,559
world it might be even though standing

00:28:48,000 --> 00:28:51,270
soon so you find me in asking questions

00:28:49,559 --> 00:28:52,530
or telling me stuff you probably know

00:28:51,270 --> 00:28:55,049
more than me so you probably tell me

00:28:52,530 --> 00:28:56,340
stuff and yeah thank you for your time

00:28:55,049 --> 00:29:02,420
Thanks

00:28:56,340 --> 00:29:02,420

YouTube URL: https://www.youtube.com/watch?v=NFex3VVctsQ


