Title: Hard-Learned GraphQL Lessons: Based on a True Story (Natalie Qabazard & Aditi Garg)
Publication date: 2018-12-05
Playlist: GraphQL Summit 2018
Description: 
	Talk from GraphQL Summit 2018 - Nov 8, 2018

- Aditi Garg is a Software Engineer who wishes the world was written in Javascript and works as a full-stack developer on Truliaâ€™s Local team. 
- Natalie Qabazard is a Senior Software Engineer working on the Trulia team at Zillow Group and she actively works with React, Typescript, GraphQL, and AWS.

A beginner GraphQL developer may have questions for which only some answers can be found in docs, blog posts, & threads online. Come hear from 2 Trulia engineers who answered their own questions when building GraphQL data sources. They'll share tips & best practices they established at Trulia.

Learn more:  https://summit.graphql.com
Captions: 
	00:00:04,840 --> 00:00:10,780
hi everyone can you hear me well in the

00:00:07,450 --> 00:00:12,340
back okay my name is Natalie and I'm

00:00:10,780 --> 00:00:14,350
here with a DD we're gonna talk about

00:00:12,340 --> 00:00:17,590
our hard-learned graph QL lessons

00:00:14,350 --> 00:00:19,960
because we were both developers working

00:00:17,590 --> 00:00:23,530
on graph QL at Trulia for the first time

00:00:19,960 --> 00:00:24,970
with a lot of questions and we couldn't

00:00:23,530 --> 00:00:27,250
find a lot of the answers to our

00:00:24,970 --> 00:00:29,740
questions online because it's relatively

00:00:27,250 --> 00:00:31,330
new so we've powered through a lot of

00:00:29,740 --> 00:00:35,350
our challenges and now we're here to

00:00:31,330 --> 00:00:37,090
share our learnings so fun fact I

00:00:35,350 --> 00:00:40,540
actually don't work at Trulia anymore as

00:00:37,090 --> 00:00:42,989
of a week ago I work at slack but I was

00:00:40,540 --> 00:00:46,540
at Trulia for three and a half years and

00:00:42,989 --> 00:00:49,329
we were working on a team that focused

00:00:46,540 --> 00:00:50,950
on local information around properties

00:00:49,329 --> 00:00:54,070
that our users were gonna come and check

00:00:50,950 --> 00:00:56,739
out so if you are someone looking to buy

00:00:54,070 --> 00:00:58,780
or rent a home you come to Trulia but we

00:00:56,739 --> 00:01:01,000
show you all the information about a

00:00:58,780 --> 00:01:02,469
neighborhood crime statistics but we'll

00:01:01,000 --> 00:01:03,070
get into that a little bit later in this

00:01:02,469 --> 00:01:07,509
talk

00:01:03,070 --> 00:01:10,179
did you want to do stuff so hi I'm a DD

00:01:07,509 --> 00:01:12,640
and I work on the local team at Trulia

00:01:10,179 --> 00:01:14,860
and with what that means is I work on

00:01:12,640 --> 00:01:18,580
neighborhood information and information

00:01:14,860 --> 00:01:22,599
of the locality for properties and my

00:01:18,580 --> 00:01:24,550
fact not so fun is I basically have been

00:01:22,599 --> 00:01:26,679
in a low-carb diet for about two years

00:01:24,550 --> 00:01:28,690
now and I practice intermittent fasting

00:01:26,679 --> 00:01:31,780
so it's impossible to ever get lunch

00:01:28,690 --> 00:01:34,509
with Natalie and I love making fresh

00:01:31,780 --> 00:01:36,190
pasta from scratch which is very carbee

00:01:34,509 --> 00:01:37,720
it's super fun to make and then also

00:01:36,190 --> 00:01:39,190
really fun to eat it at the end but

00:01:37,720 --> 00:01:43,270
unfortunately I didi can't have a lot of

00:01:39,190 --> 00:01:45,390
my pasta but anyway so let's get into it

00:01:43,270 --> 00:01:48,069
what is truly a for those who don't know

00:01:45,390 --> 00:01:49,869
Trulia is a website you go to to find

00:01:48,069 --> 00:01:52,209
out where you would like to live or

00:01:49,869 --> 00:01:54,429
what's on the market in terms of homes

00:01:52,209 --> 00:01:56,709
to buy homes to rent you can have a

00:01:54,429 --> 00:02:00,310
mortgage estimator as well and a ton of

00:01:56,709 --> 00:02:04,810
data to see about properties on on the

00:02:00,310 --> 00:02:06,970
MLS listings around we specifically like

00:02:04,810 --> 00:02:08,619
we said work on the local team and the

00:02:06,970 --> 00:02:12,459
local team set out to build a brand new

00:02:08,619 --> 00:02:13,750
page as of January of this year and it

00:02:12,459 --> 00:02:17,620
was going to be a brand new page called

00:02:13,750 --> 00:02:18,640
the neighborhood page now Zillow oh by

00:02:17,620 --> 00:02:20,530
the way Zillow owns

00:02:18,640 --> 00:02:23,050
if you didn't know Zillow Trulia

00:02:20,530 --> 00:02:25,270
realtor.com Redfin they all have

00:02:23,050 --> 00:02:27,670
property pages so you see the listing

00:02:25,270 --> 00:02:29,440
prices all the information relates to

00:02:27,670 --> 00:02:31,840
the property but they don't have

00:02:29,440 --> 00:02:34,510
neighborhood pages and what we found was

00:02:31,840 --> 00:02:36,280
that 85% of our users think the

00:02:34,510 --> 00:02:38,950
neighborhood is as important if not more

00:02:36,280 --> 00:02:40,630
important than the home itself so that

00:02:38,950 --> 00:02:42,940
was a huge opportunity for us to dive

00:02:40,630 --> 00:02:45,100
into neighborhoods and aggregate a lot

00:02:42,940 --> 00:02:48,069
of the data that we already had on other

00:02:45,100 --> 00:02:51,130
pages and kind of assemble it into one

00:02:48,069 --> 00:02:53,230
place so here's what it looks like here

00:02:51,130 --> 00:02:55,150
is what the neighborhood page for outer

00:02:53,230 --> 00:02:56,920
Richmond looks like and if you're a San

00:02:55,150 --> 00:02:59,019
Francisco local you'll see that the

00:02:56,920 --> 00:03:01,209
photo looks super nice and kind of sunny

00:02:59,019 --> 00:03:03,250
whereas auto Richmond is tends to be

00:03:01,209 --> 00:03:05,530
foggy but anyway it's a beautiful photo

00:03:03,250 --> 00:03:08,019
a lot of the Trulia photographers that

00:03:05,530 --> 00:03:10,060
we hired got photos of not only out of

00:03:08,019 --> 00:03:12,850
Richmond but many many neighborhoods in

00:03:10,060 --> 00:03:15,180
the Bay Area and in Austin and we're

00:03:12,850 --> 00:03:19,209
expanding to more cities like Denver and

00:03:15,180 --> 00:03:21,459
Boston Boston and Austin Rhymes but

00:03:19,209 --> 00:03:23,590
anyway so we have photos we have some

00:03:21,459 --> 00:03:25,450
drone footage as well so any drone fans

00:03:23,590 --> 00:03:27,010
in the audience you can come to our

00:03:25,450 --> 00:03:29,440
neighborhood pages and see what it's

00:03:27,010 --> 00:03:31,570
like to see an aerial view of Austin and

00:03:29,440 --> 00:03:33,730
some neighborhoods in the Bay Area and

00:03:31,570 --> 00:03:35,500
we also have a lot of quick facts to see

00:03:33,730 --> 00:03:37,900
about the inventory of what you can buy

00:03:35,500 --> 00:03:40,060
or rent in the area and price ranges and

00:03:37,900 --> 00:03:42,010
we are in San Francisco so you can buy

00:03:40,060 --> 00:03:44,220
something for 700,000 all the way up to

00:03:42,010 --> 00:03:46,630
six million in one little neighborhood

00:03:44,220 --> 00:03:48,459
and we have a map with an outline of the

00:03:46,630 --> 00:03:50,410
neighborhood now if you go down the page

00:03:48,459 --> 00:03:52,239
we have in the next section is called

00:03:50,410 --> 00:03:54,610
explore the area this is where we show

00:03:52,239 --> 00:03:56,560
amenities that are powered by the Yelp

00:03:54,610 --> 00:03:58,510
API to tell you more about the

00:03:56,560 --> 00:04:00,519
restaurants grocery stores nightlife in

00:03:58,510 --> 00:04:03,250
the area and plot them on the map so

00:04:00,519 --> 00:04:05,350
that you can see these denser blobs on

00:04:03,250 --> 00:04:07,299
the map relative to where you're looking

00:04:05,350 --> 00:04:08,769
to live and kind of figure out the space

00:04:07,299 --> 00:04:10,930
there because if you're moving across

00:04:08,769 --> 00:04:12,790
country from a city like New York to San

00:04:10,930 --> 00:04:14,590
Francisco it's gonna be hard to know

00:04:12,790 --> 00:04:15,760
what outer Richmond is really like so

00:04:14,590 --> 00:04:17,590
we're trying to make that easier for

00:04:15,760 --> 00:04:19,780
some of our users so we have the

00:04:17,590 --> 00:04:21,190
amenities section here if you scroll

00:04:19,780 --> 00:04:23,380
down you can see some thumbnails of the

00:04:21,190 --> 00:04:26,169
businesses in the area and then we have

00:04:23,380 --> 00:04:28,330
something called what locals say now if

00:04:26,169 --> 00:04:29,830
you are moving from New York to San

00:04:28,330 --> 00:04:32,210
Francisco and you go visit outer

00:04:29,830 --> 00:04:33,800
Richmond you're gonna know

00:04:32,210 --> 00:04:35,750
what the neighborhood is like based on

00:04:33,800 --> 00:04:37,669
what it looks like but you might not be

00:04:35,750 --> 00:04:39,410
able to talk to a lot of locals and get

00:04:37,669 --> 00:04:41,509
a sense of what they think it's like to

00:04:39,410 --> 00:04:43,370
live in outer Richmond so we've asked

00:04:41,509 --> 00:04:45,710
those locals what it's like and if we

00:04:43,370 --> 00:04:48,110
say does this neighborhood sidewalks

00:04:45,710 --> 00:04:49,490
does it have grocery stores is a dog

00:04:48,110 --> 00:04:51,800
friendly and so we've aggregated that

00:04:49,490 --> 00:04:53,900
data there we also have full text

00:04:51,800 --> 00:04:56,060
reviews that River that our reviewers

00:04:53,900 --> 00:04:57,470
submit to us and tell us what it's like

00:04:56,060 --> 00:05:00,560
in their words to live in out at

00:04:57,470 --> 00:05:02,599
Richmond a little bit lower on the page

00:05:00,560 --> 00:05:05,060
we have the safety and crime section so

00:05:02,599 --> 00:05:07,430
we plot all of the the crime incidents

00:05:05,060 --> 00:05:09,139
in the area on this map to help you

00:05:07,430 --> 00:05:11,620
understand where the prevalence of crime

00:05:09,139 --> 00:05:14,449
is in the city and we also service

00:05:11,620 --> 00:05:16,340
surface schools data on the page for

00:05:14,449 --> 00:05:18,770
families with kids who are looking to

00:05:16,340 --> 00:05:21,050
move to an area with great schools now

00:05:18,770 --> 00:05:23,060
this is not a pitch for a truly a

00:05:21,050 --> 00:05:24,830
neighborhood page I promise I'm

00:05:23,060 --> 00:05:27,800
explaining this because we're gonna go

00:05:24,830 --> 00:05:29,570
into case study details and the lessons

00:05:27,800 --> 00:05:31,580
that we're gonna share later on here and

00:05:29,570 --> 00:05:33,800
we want you to know contextually where

00:05:31,580 --> 00:05:35,630
this fits on the page and how we learned

00:05:33,800 --> 00:05:37,880
what we did when you're working on

00:05:35,630 --> 00:05:38,810
graphic you all here so a little bit

00:05:37,880 --> 00:05:40,820
about how it was built

00:05:38,810 --> 00:05:42,830
we used react components obviously and

00:05:40,820 --> 00:05:46,159
we wrote many of them using type script

00:05:42,830 --> 00:05:48,650
I'm personally a type script fangirl we

00:05:46,159 --> 00:05:50,449
also use next Jas which gives us a lot

00:05:48,650 --> 00:05:52,219
of tooling around server-side rendering

00:05:50,449 --> 00:05:55,130
and gives us a lot of helpful routing

00:05:52,219 --> 00:05:58,370
out of the box we also use app Apollo

00:05:55,130 --> 00:06:01,009
client and server and graph QL obviously

00:05:58,370 --> 00:06:03,349
so let's go more into the graph QL piece

00:06:01,009 --> 00:06:05,870
you guys have already heard many times

00:06:03,349 --> 00:06:07,520
where graph kill is so important and we

00:06:05,870 --> 00:06:09,320
use it similarly to a lot of other

00:06:07,520 --> 00:06:11,539
companies it's a gateway to all our

00:06:09,320 --> 00:06:14,389
micro services all the clients now

00:06:11,539 --> 00:06:16,219
access the data using graph QL and the

00:06:14,389 --> 00:06:18,229
benefit it gives us is that we can put

00:06:16,219 --> 00:06:21,650
presentation logic into this layer for

00:06:18,229 --> 00:06:23,960
example if the if user comes to Trulia

00:06:21,650 --> 00:06:25,699
and he doesn't have a profile image we

00:06:23,960 --> 00:06:27,380
could check on the clients each client

00:06:25,699 --> 00:06:30,110
whether it was null and then surface an

00:06:27,380 --> 00:06:32,060
avatar but in this case we can just set

00:06:30,110 --> 00:06:34,130
a default image in the graph cure layer

00:06:32,060 --> 00:06:35,960
and send it back to each client so that

00:06:34,130 --> 00:06:39,440
logic doesn't have to be replicated in

00:06:35,960 --> 00:06:42,589
Android iOS and web over and over but

00:06:39,440 --> 00:06:44,659
how do we design this together well we

00:06:42,589 --> 00:06:45,920
go for a domain driven design and I

00:06:44,659 --> 00:06:47,990
think most of you must have been

00:06:45,920 --> 00:06:50,270
president for the keynote yesterday when

00:06:47,990 --> 00:06:51,290
Jeff mentioned federated schemas were a

00:06:50,270 --> 00:06:54,290
big fan of that

00:06:51,290 --> 00:06:56,060
so we've have a mono repo with all our

00:06:54,290 --> 00:06:58,850
domains and our that's the data sources

00:06:56,060 --> 00:07:00,680
repo and this way experts can work on

00:06:58,850 --> 00:07:03,320
their piece without stepping on each

00:07:00,680 --> 00:07:05,210
other's toes and also our types our

00:07:03,320 --> 00:07:07,790
namespace with that domain which

00:07:05,210 --> 00:07:09,440
sacrifices some reusability but we've

00:07:07,790 --> 00:07:11,720
seen that it helps us move really fast

00:07:09,440 --> 00:07:13,760
but then how does the source of truth

00:07:11,720 --> 00:07:16,700
come together because it has to be one

00:07:13,760 --> 00:07:18,890
big entire schema so what we do is some

00:07:16,700 --> 00:07:22,340
schema stitching in the graphical server

00:07:18,890 --> 00:07:24,380
we take that other repo as an input and

00:07:22,340 --> 00:07:26,570
we merge all the schemas for all the

00:07:24,380 --> 00:07:29,270
domains and make an executable schema

00:07:26,570 --> 00:07:31,490
out of it and then the server exposes a

00:07:29,270 --> 00:07:33,250
graphical playground endpoint where you

00:07:31,490 --> 00:07:35,510
can come and look at the documentation

00:07:33,250 --> 00:07:37,460
developers can see how to make these

00:07:35,510 --> 00:07:39,530
actual queries and get some data back

00:07:37,460 --> 00:07:41,900
now it's going to explain a little bit

00:07:39,530 --> 00:07:44,660
about how a domain datasource looks like

00:07:41,900 --> 00:07:46,970
so we have this helpful flowchart here

00:07:44,660 --> 00:07:48,770
to kind of help you visualize how the

00:07:46,970 --> 00:07:50,840
setup looks at Trulia when it comes to

00:07:48,770 --> 00:07:53,030
graph QL so we have the client

00:07:50,840 --> 00:07:55,370
application that's sending a query the

00:07:53,030 --> 00:07:59,930
Apollo client to our graph QL datasource

00:07:55,370 --> 00:08:01,790
and this is a isolated modular data

00:07:59,930 --> 00:08:04,280
source that relates to any one of our

00:08:01,790 --> 00:08:05,960
micro services that we have so something

00:08:04,280 --> 00:08:07,730
like amenities has its own data source

00:08:05,960 --> 00:08:10,370
something like crime statistics has its

00:08:07,730 --> 00:08:12,830
own data source so we have a data source

00:08:10,370 --> 00:08:15,230
it has a resolver a service connector

00:08:12,830 --> 00:08:18,440
and the query propagates through these

00:08:15,230 --> 00:08:19,970
three components and the connector in

00:08:18,440 --> 00:08:21,800
the data source is what eventually

00:08:19,970 --> 00:08:24,230
connects to the base connector in our

00:08:21,800 --> 00:08:27,080
server and all this is doing is handling

00:08:24,230 --> 00:08:28,940
our get put post calls that are coming

00:08:27,080 --> 00:08:30,950
through and propagates them out to the

00:08:28,940 --> 00:08:32,690
external micro services that we have and

00:08:30,950 --> 00:08:34,520
then once we get a response from those

00:08:32,690 --> 00:08:35,870
micro services the response comes and

00:08:34,520 --> 00:08:38,000
propagates back all the way to the

00:08:35,870 --> 00:08:40,070
client so this happens for each of our

00:08:38,000 --> 00:08:43,040
data sources and what we have in our

00:08:40,070 --> 00:08:45,260
graph QL server is a lot of the common

00:08:43,040 --> 00:08:47,180
stuff that we want to use so the base

00:08:45,260 --> 00:08:49,100
connector is there we have some logging

00:08:47,180 --> 00:08:52,490
functionality there and some error

00:08:49,100 --> 00:08:54,440
handling happens there as well so with

00:08:52,490 --> 00:08:57,470
that we want to start sharing our first

00:08:54,440 --> 00:08:59,840
lesson now I want to talk about how this

00:08:57,470 --> 00:09:01,760
came about first before I dive into real

00:08:59,840 --> 00:09:04,610
what the learning was so when it came

00:09:01,760 --> 00:09:07,940
time to build the neighborhood page what

00:09:04,610 --> 00:09:09,980
we did was us web developers sat down

00:09:07,940 --> 00:09:11,960
with the mobile developers so we have

00:09:09,980 --> 00:09:13,910
our iOS and Android developers some in

00:09:11,960 --> 00:09:15,860
the audience as well and we started

00:09:13,910 --> 00:09:17,630
talking about okay we all need to build

00:09:15,860 --> 00:09:19,910
this neighborhood page let's decide on a

00:09:17,630 --> 00:09:21,680
common schema that works for all of us

00:09:19,910 --> 00:09:24,650
so that there's a single source of truth

00:09:21,680 --> 00:09:26,390
in the graph QL layer and we can move

00:09:24,650 --> 00:09:28,370
forward from there so let's take an

00:09:26,390 --> 00:09:30,410
example like the school's section on the

00:09:28,370 --> 00:09:32,330
neighborhood page we get some product

00:09:30,410 --> 00:09:34,640
specs and they say that we want to

00:09:32,330 --> 00:09:36,560
display only three categories in the

00:09:34,640 --> 00:09:39,590
school section elementary schools middle

00:09:36,560 --> 00:09:40,970
schools and high schools so we decide

00:09:39,590 --> 00:09:43,400
okay we're going to show those three

00:09:40,970 --> 00:09:45,020
categories but the response that comes

00:09:43,400 --> 00:09:47,450
back from our existing schools

00:09:45,020 --> 00:09:50,390
micro-service also includes preschools

00:09:47,450 --> 00:09:52,130
as a possible field so now comes the

00:09:50,390 --> 00:09:54,050
question should we include preschools

00:09:52,130 --> 00:09:56,270
because maybe in the future product

00:09:54,050 --> 00:09:59,330
might want to add preschools or do we

00:09:56,270 --> 00:10:00,770
leave it out for now and based on a lot

00:09:59,330 --> 00:10:02,810
of the other talks in the conference so

00:10:00,770 --> 00:10:05,930
far you might be able to predict what we

00:10:02,810 --> 00:10:09,110
did we decided to trim out preschools

00:10:05,930 --> 00:10:10,610
within the graph QL data source and only

00:10:09,110 --> 00:10:12,350
returned the three categories that we

00:10:10,610 --> 00:10:14,840
need here's what's great about that

00:10:12,350 --> 00:10:17,480
let's assume we included preschools in

00:10:14,840 --> 00:10:20,210
the data source then our clients in

00:10:17,480 --> 00:10:21,860
three different places in web iOS and

00:10:20,210 --> 00:10:24,860
Android would have to add business logic

00:10:21,860 --> 00:10:26,330
to trim it out that's terrible

00:10:24,860 --> 00:10:28,190
so we would rather have one source of

00:10:26,330 --> 00:10:30,110
truth in the graph QL data source and as

00:10:28,190 --> 00:10:32,180
we know it's a lot easier to add fields

00:10:30,110 --> 00:10:35,480
later than to remove fields if you add

00:10:32,180 --> 00:10:37,580
one preemptively with that comes a

00:10:35,480 --> 00:10:39,830
second example where we actually added

00:10:37,580 --> 00:10:41,930
fields we didn't need so we have

00:10:39,830 --> 00:10:43,250
something called a reviewer and like I

00:10:41,930 --> 00:10:45,200
mentioned on the neighborhood page we

00:10:43,250 --> 00:10:47,660
have the local safe section and each of

00:10:45,200 --> 00:10:49,940
those users who wrote a review is called

00:10:47,660 --> 00:10:52,490
a reviewer they have a name they have a

00:10:49,940 --> 00:10:55,760
profile image and the profile image is a

00:10:52,490 --> 00:10:57,110
URL to some specific size of their

00:10:55,760 --> 00:10:59,720
profile image that they've shared with

00:10:57,110 --> 00:11:02,300
us so we have tiny small and medium as

00:10:59,720 --> 00:11:05,480
the possible options now we decided the

00:11:02,300 --> 00:11:07,370
schema early on so mobile apps decided

00:11:05,480 --> 00:11:10,370
to use tiny and medium because it was

00:11:07,370 --> 00:11:11,930
available as a field to use but what

00:11:10,370 --> 00:11:13,490
they noticed is that when they were

00:11:11,930 --> 00:11:15,740
querying for

00:11:13,490 --> 00:11:18,050
and medium photos they weren't getting a

00:11:15,740 --> 00:11:20,120
value back because we actually didn't

00:11:18,050 --> 00:11:22,550
have a tiny or medium version of the

00:11:20,120 --> 00:11:24,589
photo to return we only had the small

00:11:22,550 --> 00:11:27,770
version so we were kind of in a pickle

00:11:24,589 --> 00:11:29,420
they said okay what are our options here

00:11:27,770 --> 00:11:31,370
we can't remove the field because

00:11:29,420 --> 00:11:34,220
they're already using it so why don't we

00:11:31,370 --> 00:11:36,680
just backfill the value for those keys

00:11:34,220 --> 00:11:39,560
and actually just send them the URL for

00:11:36,680 --> 00:11:41,270
the small image instead which is not

00:11:39,560 --> 00:11:43,010
ideal because if you're querying for a

00:11:41,270 --> 00:11:45,890
tiny or medium size and you get a small

00:11:43,010 --> 00:11:47,930
size back it's kind of confusing but

00:11:45,890 --> 00:11:50,120
that's one way to go second way to go is

00:11:47,930 --> 00:11:52,279
to deprecate the fields but that's like

00:11:50,120 --> 00:11:54,680
a soft no and you get this error message

00:11:52,279 --> 00:11:57,350
it says you know you use a small use a

00:11:54,680 --> 00:11:58,760
small one instead and with graph kill

00:11:57,350 --> 00:12:01,040
there isn't any versioning which makes

00:11:58,760 --> 00:12:03,589
it kind of hard to address the certain

00:12:01,040 --> 00:12:06,140
situation so anyway this is like a

00:12:03,589 --> 00:12:07,700
learning lesson for all of you to to

00:12:06,140 --> 00:12:10,610
consider that you should not include

00:12:07,700 --> 00:12:11,899
fields that you don't need and make sure

00:12:10,610 --> 00:12:13,700
that you're returning values for the

00:12:11,899 --> 00:12:16,250
fields that you're agreeing to support

00:12:13,700 --> 00:12:18,950
otherwise I might put unis in the tough

00:12:16,250 --> 00:12:22,670
spot all this to say there's no need to

00:12:18,950 --> 00:12:25,310
future-proof your schemas so lesson

00:12:22,670 --> 00:12:27,620
number two well lesson 1 is a perfect

00:12:25,310 --> 00:12:29,270
segue into this because you shouldn't be

00:12:27,620 --> 00:12:31,520
mapping everything from your back-end

00:12:29,270 --> 00:12:34,100
api's to your graphical schemas

00:12:31,520 --> 00:12:36,140
especially when it comes to your IDs why

00:12:34,100 --> 00:12:38,420
do I say that let me give you an example

00:12:36,140 --> 00:12:39,709
so on this screen you can see that we're

00:12:38,420 --> 00:12:41,839
requesting for amenities for a

00:12:39,709 --> 00:12:43,940
neighborhood and you get different kinds

00:12:41,839 --> 00:12:46,459
like restaurants activities and

00:12:43,940 --> 00:12:49,279
entertainment on the right-hand side you

00:12:46,459 --> 00:12:52,910
can see the type of an amenity it has an

00:12:49,279 --> 00:12:55,279
ID a name and a category also this goes

00:12:52,910 --> 00:12:57,589
back to when I said we namespace all our

00:12:55,279 --> 00:13:00,170
domains this entire type is namespace

00:12:57,589 --> 00:13:01,880
with the amenities domain so what

00:13:00,170 --> 00:13:05,540
happened this looks good on first glance

00:13:01,880 --> 00:13:07,579
we ran into a caching issue why this is

00:13:05,540 --> 00:13:09,860
the raw graphical response and you see a

00:13:07,579 --> 00:13:11,899
subset of the response and you see there

00:13:09,860 --> 00:13:13,610
are two items there's a peas area

00:13:11,899 --> 00:13:15,020
Delfina which is a restaurant and if you

00:13:13,610 --> 00:13:17,300
haven't been it's a great restaurant in

00:13:15,020 --> 00:13:19,970
San Francisco and the second one is a

00:13:17,300 --> 00:13:22,760
coin-op game room which is like Emporium

00:13:19,970 --> 00:13:24,890
it's a arcade and they both have the ID

00:13:22,760 --> 00:13:27,050
one two three four and type them amenity

00:13:24,890 --> 00:13:29,000
so the reason why this is

00:13:27,050 --> 00:13:31,670
cousin the back end the IDS are unique

00:13:29,000 --> 00:13:34,279
only per category and we mapped them

00:13:31,670 --> 00:13:37,130
straight over but let's look at the way

00:13:34,279 --> 00:13:39,230
a polo processes this a pole is really

00:13:37,130 --> 00:13:42,170
smart so a polo client tries to use the

00:13:39,230 --> 00:13:44,750
cash to get his data so it goes to item

00:13:42,170 --> 00:13:46,519
of Xero looks in the cache for ID one

00:13:44,750 --> 00:13:49,640
two three four and type name amenity

00:13:46,519 --> 00:13:52,279
finds nothing finishes processing this

00:13:49,640 --> 00:13:53,149
and puts it in the cache then it goes to

00:13:52,279 --> 00:13:55,399
the next item

00:13:53,149 --> 00:13:58,370
it looks at ID one two three four type

00:13:55,399 --> 00:14:00,320
name amenity amenity finds it because it

00:13:58,370 --> 00:14:03,130
just put it in the cache fetches that

00:14:00,320 --> 00:14:05,810
instead so the rapport query actually

00:14:03,130 --> 00:14:08,000
caches based on those two fields which

00:14:05,810 --> 00:14:10,339
is ID and type name and they need to be

00:14:08,000 --> 00:14:13,880
unique together so the result we ended

00:14:10,339 --> 00:14:16,760
up getting was p0 Delfina twice look at

00:14:13,880 --> 00:14:19,000
that so this was a mistake we made on

00:14:16,760 --> 00:14:21,649
our end and we fixed quickly by

00:14:19,000 --> 00:14:24,500
appending the category to the ID and

00:14:21,649 --> 00:14:26,660
what this did was it made the ID unique

00:14:24,500 --> 00:14:28,459
again so watch your IDs carefully

00:14:26,660 --> 00:14:30,920
another thing that you could have done

00:14:28,459 --> 00:14:32,839
would be to force fetch this query but

00:14:30,920 --> 00:14:35,180
if you're not using the caching that

00:14:32,839 --> 00:14:36,740
Apollo gives to you for free then maybe

00:14:35,180 --> 00:14:39,740
there's something wrong in the way

00:14:36,740 --> 00:14:42,980
you're requesting your data so that's

00:14:39,740 --> 00:14:45,200
lesson number two let's go to lesson

00:14:42,980 --> 00:14:47,420
number three this is also my favorite

00:14:45,200 --> 00:14:49,820
lesson because Natalie was mentioning

00:14:47,420 --> 00:14:52,640
earlier our stack includes next yes

00:14:49,820 --> 00:14:54,620
that gives us isomorphic rendering so

00:14:52,640 --> 00:14:56,410
you write your pages and then they get

00:14:54,620 --> 00:14:59,089
rendered in the client and the server

00:14:56,410 --> 00:15:01,940
server-side rendering is awesome like

00:14:59,089 --> 00:15:03,920
you can give the user something to look

00:15:01,940 --> 00:15:07,279
at so quickly you have all these

00:15:03,920 --> 00:15:10,490
benefits from SEO awesome right not

00:15:07,279 --> 00:15:12,890
always so let's look at an example to

00:15:10,490 --> 00:15:15,350
understand why so Natalie explained the

00:15:12,890 --> 00:15:17,720
review earlier this is the reviews query

00:15:15,350 --> 00:15:20,089
on the left hand side so we request for

00:15:17,720 --> 00:15:22,699
the text of a review from an API called

00:15:20,089 --> 00:15:25,699
the reviews API which takes about 60

00:15:22,699 --> 00:15:28,430
milliseconds and then we get the user ID

00:15:25,699 --> 00:15:31,160
associated with that text and make a

00:15:28,430 --> 00:15:33,860
different call to the user API which

00:15:31,160 --> 00:15:35,779
takes double that amount and with that

00:15:33,860 --> 00:15:37,820
call we get the name and the profile

00:15:35,779 --> 00:15:40,370
image of the user so more details about

00:15:37,820 --> 00:15:42,650
the user and initially on for

00:15:40,370 --> 00:15:44,600
Paige load on the server we were using

00:15:42,650 --> 00:15:47,510
we were using this query to render a

00:15:44,600 --> 00:15:49,130
markup but we decided this is taking too

00:15:47,510 --> 00:15:51,560
long what can we do

00:15:49,130 --> 00:15:53,810
maybe we can remove reviewer information

00:15:51,560 --> 00:15:56,060
out and use it at a later time

00:15:53,810 --> 00:15:58,970
so that's what we ended up doing we

00:15:56,060 --> 00:16:00,860
decided not to SSR everything we wrote a

00:15:58,970 --> 00:16:02,630
query to fetch the reviewer information

00:16:00,860 --> 00:16:04,940
at a later time which is called the

00:16:02,630 --> 00:16:07,010
fetch reverse query turn the SSR

00:16:04,940 --> 00:16:09,170
defaults over there so it's only fired

00:16:07,010 --> 00:16:11,060
on the client and rehydrated the page

00:16:09,170 --> 00:16:13,190
with that information to give you an

00:16:11,060 --> 00:16:15,020
example of what that looks like here you

00:16:13,190 --> 00:16:16,610
can see that when the page first loads

00:16:15,020 --> 00:16:18,950
so the mark-up that's got from the

00:16:16,610 --> 00:16:21,500
client all the reviews have truly a user

00:16:18,950 --> 00:16:22,880
and as soon as the client loads it

00:16:21,500 --> 00:16:25,100
starts firing the query for fetch

00:16:22,880 --> 00:16:27,320
reviewers rehydrates the page with the

00:16:25,100 --> 00:16:29,779
actual review information this help to

00:16:27,320 --> 00:16:32,029
get some performance benefits so you

00:16:29,779 --> 00:16:34,130
have to be intentional about your SSR

00:16:32,029 --> 00:16:37,730
and think carefully about what your

00:16:34,130 --> 00:16:40,520
server-side rendering the next lesson is

00:16:37,730 --> 00:16:42,410
also about being intentional but about

00:16:40,520 --> 00:16:44,270
null ability so this is something that

00:16:42,410 --> 00:16:47,779
can trip you up and you have to be very

00:16:44,270 --> 00:16:49,910
careful about it to give you an example

00:16:47,779 --> 00:16:52,130
we were looking at the neighborhood page

00:16:49,910 --> 00:16:54,920
before and these are all the sections on

00:16:52,130 --> 00:16:56,600
that page so the nice photos we saw the

00:16:54,920 --> 00:16:59,180
amenities in the neighborhood the

00:16:56,600 --> 00:17:02,120
reviews the crime information the

00:16:59,180 --> 00:17:04,010
schools and initially in our schema all

00:17:02,120 --> 00:17:06,319
our arguments were not able and all our

00:17:04,010 --> 00:17:08,300
fields were nullable so we require a

00:17:06,319 --> 00:17:10,309
neighborhood ID to make this query and

00:17:08,300 --> 00:17:13,339
that neighbor ID is a nullable value

00:17:10,309 --> 00:17:14,839
when the client passes it to us the page

00:17:13,339 --> 00:17:17,390
looks something like this which you

00:17:14,839 --> 00:17:19,760
already saw before it's beautiful we

00:17:17,390 --> 00:17:22,520
love it but what happens when the client

00:17:19,760 --> 00:17:24,410
messes up so in this case the client

00:17:22,520 --> 00:17:26,689
actually passes a null value for the

00:17:24,410 --> 00:17:28,309
neighborhood ID so what you're seeing on

00:17:26,689 --> 00:17:30,920
the left hand side is just the footer

00:17:28,309 --> 00:17:33,080
and the header of troller calm because

00:17:30,920 --> 00:17:35,059
those queries actually don't depend on

00:17:33,080 --> 00:17:37,790
the neighborhood query so they loaded

00:17:35,059 --> 00:17:39,500
fine for the rest of the page hmm I

00:17:37,790 --> 00:17:43,370
don't know if that's even useful at this

00:17:39,500 --> 00:17:45,830
point if our neighborhood ID was a non

00:17:43,370 --> 00:17:47,660
malleable value and we'd passed null to

00:17:45,830 --> 00:17:50,120
it the page would have aired out and

00:17:47,660 --> 00:17:52,450
honestly I feel the error is more useful

00:17:50,120 --> 00:17:54,230
than the page you guys saw before so

00:17:52,450 --> 00:17:56,660
being intentional

00:17:54,230 --> 00:17:59,120
stability is a great thing think about

00:17:56,660 --> 00:18:01,280
your error boundaries make sections that

00:17:59,120 --> 00:18:03,500
you think feels that you think are

00:18:01,280 --> 00:18:05,720
needed to present the data as a bare

00:18:03,500 --> 00:18:07,340
minimum to the user not nullable make

00:18:05,720 --> 00:18:09,260
arguments that you think are needed for

00:18:07,340 --> 00:18:13,820
critically requesting data not nullable

00:18:09,260 --> 00:18:16,850
and you'll be dandy okay to finish us

00:18:13,820 --> 00:18:18,260
off as our last lesson 5 so what

00:18:16,850 --> 00:18:20,000
happened when we first started

00:18:18,260 --> 00:18:21,679
developing all of the code for the

00:18:20,000 --> 00:18:24,049
neighborhood pages we were thinking

00:18:21,679 --> 00:18:26,720
about the code structure we wanted in

00:18:24,049 --> 00:18:28,400
our repo we thought okay there are a lot

00:18:26,720 --> 00:18:30,040
of sections on this page that don't

00:18:28,400 --> 00:18:33,410
really relate to each other so we can

00:18:30,040 --> 00:18:35,120
co-locate them as peers and in an

00:18:33,410 --> 00:18:37,070
isolated way to make each of them

00:18:35,120 --> 00:18:39,230
modular so you have the amenities

00:18:37,070 --> 00:18:41,870
section on its own the review section on

00:18:39,230 --> 00:18:43,580
its own the crime section on its own and

00:18:41,870 --> 00:18:45,830
I'm talking about this more in terms of

00:18:43,580 --> 00:18:48,620
react components so when it came time

00:18:45,830 --> 00:18:51,140
for us to write our graph QL queries we

00:18:48,620 --> 00:18:53,480
thought where do we want them to live we

00:18:51,140 --> 00:18:55,850
thought at first we should co-locate the

00:18:53,480 --> 00:18:58,490
small queries that we had with the react

00:18:55,850 --> 00:19:00,500
components that we were building so we

00:18:58,490 --> 00:19:02,750
would have the amenities query with the

00:19:00,500 --> 00:19:04,190
amenities react component together and

00:19:02,750 --> 00:19:06,049
then there would be some higher-order

00:19:04,190 --> 00:19:09,049
component at the root level that would

00:19:06,049 --> 00:19:12,320
build them all together but we ran into

00:19:09,049 --> 00:19:14,929
some performance problems what we saw is

00:19:12,320 --> 00:19:17,809
that the time to render was super long

00:19:14,929 --> 00:19:20,419
and we didn't know why so we did a lot

00:19:17,809 --> 00:19:22,880
of digging and figured out that it

00:19:20,419 --> 00:19:26,120
really depends on the way react apollo

00:19:22,880 --> 00:19:28,100
works so what we did was we joined all

00:19:26,120 --> 00:19:30,260
of them into one large query at the root

00:19:28,100 --> 00:19:32,330
level and executed it once on the server

00:19:30,260 --> 00:19:34,880
got the data to hydrate all of the react

00:19:32,330 --> 00:19:37,010
components as the sub components and it

00:19:34,880 --> 00:19:38,929
was a lot better but let me go in a

00:19:37,010 --> 00:19:40,940
little bit more detail in terms of how

00:19:38,929 --> 00:19:42,860
the tree traversal works so that you may

00:19:40,940 --> 00:19:44,660
understand a bit more why the small

00:19:42,860 --> 00:19:47,030
queries ended up giving us terrible

00:19:44,660 --> 00:19:48,590
performance so you have the root

00:19:47,030 --> 00:19:50,690
component at the top that's joining all

00:19:48,590 --> 00:19:53,559
the components together you have these

00:19:50,690 --> 00:19:56,750
sub components that live as children and

00:19:53,559 --> 00:19:58,850
with react Apollo you have the root

00:19:56,750 --> 00:20:00,860
component that has hopefully a query

00:19:58,850 --> 00:20:02,150
associated with it that's in charge of

00:20:00,860 --> 00:20:04,250
getting all the data that the sub

00:20:02,150 --> 00:20:05,990
components will need but when you have

00:20:04,250 --> 00:20:07,440
small queries that are co-located with

00:20:05,990 --> 00:20:10,460
the react components in

00:20:07,440 --> 00:20:12,899
Julie in the child of the root component

00:20:10,460 --> 00:20:15,240
these these child components are

00:20:12,899 --> 00:20:16,830
simultaneously waiting and they're

00:20:15,240 --> 00:20:19,049
waiting for the data from the root query

00:20:16,830 --> 00:20:21,570
to come down and hydrate before they

00:20:19,049 --> 00:20:24,240
render but we end up having is if you

00:20:21,570 --> 00:20:26,669
have a ton of small queries associated

00:20:24,240 --> 00:20:28,500
with the react components you're waiting

00:20:26,669 --> 00:20:30,840
for each query to execute and resolve

00:20:28,500 --> 00:20:32,370
and then it's going to take a long time

00:20:30,840 --> 00:20:34,649
in that resolve chain before it

00:20:32,370 --> 00:20:36,779
propagates up and then finally renders

00:20:34,649 --> 00:20:39,840
the whole Dom tree of react components

00:20:36,779 --> 00:20:42,509
so that's something to consider but you

00:20:39,840 --> 00:20:45,360
have some options here so one option is

00:20:42,509 --> 00:20:46,860
to do like we did one large query but if

00:20:45,360 --> 00:20:48,450
you don't want to do that and you want

00:20:46,860 --> 00:20:50,610
to maintain the code structure that we

00:20:48,450 --> 00:20:52,950
initially set out to do you can have the

00:20:50,610 --> 00:20:54,659
small queries there but set SSR to false

00:20:52,950 --> 00:20:57,659
kind of similar to what a DD was saying

00:20:54,659 --> 00:20:59,429
earlier this basically turns off the

00:20:57,659 --> 00:21:01,620
execution of the queries on the server

00:20:59,429 --> 00:21:03,929
and waits to fire it on the client-side

00:21:01,620 --> 00:21:06,360
so that your time to render is a lot

00:21:03,929 --> 00:21:08,220
quicker and another option is to have

00:21:06,360 --> 00:21:10,799
the small queries co-located with the

00:21:08,220 --> 00:21:13,320
react components but then export them up

00:21:10,799 --> 00:21:15,330
to the root and have the root query

00:21:13,320 --> 00:21:16,799
executed them all but then you have to

00:21:15,330 --> 00:21:18,629
also make sure your performance doesn't

00:21:16,799 --> 00:21:22,559
take a hit if you if you decide to go

00:21:18,629 --> 00:21:24,090
that route so final lesson is small

00:21:22,559 --> 00:21:26,340
modular queries may not be that

00:21:24,090 --> 00:21:28,470
performant even if you want to keep your

00:21:26,340 --> 00:21:30,600
code organized so that's something to

00:21:28,470 --> 00:21:33,450
make sure you look into when you're

00:21:30,600 --> 00:21:35,549
going to develop it so we're going to

00:21:33,450 --> 00:21:37,500
quickly we recap all that we learned

00:21:35,549 --> 00:21:42,059
today and we learned personally over the

00:21:37,500 --> 00:21:44,370
past year so first one is don't over

00:21:42,059 --> 00:21:46,529
future-proof your schemas so there are a

00:21:44,370 --> 00:21:49,350
lot of tools available right now to map

00:21:46,529 --> 00:21:51,809
your data tables or your back-end ap is

00:21:49,350 --> 00:21:54,149
to graph your schema use them sparingly

00:21:51,809 --> 00:21:57,299
try to understand what's happening and

00:21:54,149 --> 00:21:59,700
don't over future-proof them and this

00:21:57,299 --> 00:22:01,350
specially applies to IDs make sure

00:21:59,700 --> 00:22:03,720
they're unique or you might run into

00:22:01,350 --> 00:22:05,460
some caching issues like us but the

00:22:03,720 --> 00:22:07,289
underlying thing is to understand what

00:22:05,460 --> 00:22:08,700
technologies you're using and how

00:22:07,289 --> 00:22:12,629
they're working so you can make sure

00:22:08,700 --> 00:22:15,149
that your schema looks right you don't

00:22:12,629 --> 00:22:17,549
have to SSR everything that sounds

00:22:15,149 --> 00:22:19,049
counterintuitive sometimes but whatever

00:22:17,549 --> 00:22:20,410
is on the top half of the page that the

00:22:19,049 --> 00:22:21,670
user is looking at

00:22:20,410 --> 00:22:23,320
that's all you need to SSR and

00:22:21,670 --> 00:22:26,680
everything else can be loaded onto the

00:22:23,320 --> 00:22:29,080
client being intentional when it comes

00:22:26,680 --> 00:22:31,300
to no ability so think about your error

00:22:29,080 --> 00:22:33,670
boundaries and the data you really need

00:22:31,300 --> 00:22:36,160
to critically have a bare minimum page

00:22:33,670 --> 00:22:37,630
for the user and a lot of qualifiers

00:22:36,160 --> 00:22:39,040
there but that's the truth be

00:22:37,630 --> 00:22:41,290
intentional make those things not

00:22:39,040 --> 00:22:43,630
nullable graph QL gives us the ability

00:22:41,290 --> 00:22:45,630
to pick and choose the data that we

00:22:43,630 --> 00:22:49,270
request for so use it wisely

00:22:45,630 --> 00:22:51,460
and lastly small modular queries may not

00:22:49,270 --> 00:22:53,740
be performing in our case they weren't

00:22:51,460 --> 00:22:55,450
so it's good to know basically how

00:22:53,740 --> 00:22:57,340
everything's working again this was a

00:22:55,450 --> 00:22:57,940
case where we didn't understand how to

00:22:57,340 --> 00:23:00,640
react

00:22:57,940 --> 00:23:02,320
Apollo don.t traversal was happening so

00:23:00,640 --> 00:23:06,580
look at the technologies are using and

00:23:02,320 --> 00:23:08,410
do what works best for you that's all we

00:23:06,580 --> 00:23:10,450
have for today but if you have any

00:23:08,410 --> 00:23:13,300
questions about pasta intermittent

00:23:10,450 --> 00:23:15,550
fasting broth qo feel free to tweet

00:23:13,300 --> 00:23:17,890
Natalie or I also there are team members

00:23:15,550 --> 00:23:19,450
here today from Trulia come and talk to

00:23:17,890 --> 00:23:21,760
us about our stack and how we use graph

00:23:19,450 --> 00:23:26,240
QL thank you

00:23:21,760 --> 00:23:26,240

YouTube URL: https://www.youtube.com/watch?v=eUrtRzqN0h0


