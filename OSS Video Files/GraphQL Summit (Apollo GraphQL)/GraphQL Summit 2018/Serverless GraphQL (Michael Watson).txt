Title: Serverless GraphQL (Michael Watson)
Publication date: 2018-12-05
Playlist: GraphQL Summit 2018
Description: 
	Talk from GraphQL Summit 2018 - Nov 8, 2018

Michael Watson, a Customer Success Engineer at Apollo, showcases how GraphQL and serverless work great together with the Apollo GraphQL Platform! Serverless enables you to not only isolate the resources feeding your GraphQL server, but also your GraphQL server. We're working on supporting Apollo Server running in various serverless environments like AWS Lambda and Azure Functions. 

Learn more about Apollo:  https://www.apollographql.com/

Join Apollo's community Slack group:  https://www.apollographql.com/slack/

Learn more:  https://summit.graphql.com
Captions: 
	00:00:05,930 --> 00:00:09,460
[Applause]

00:00:07,570 --> 00:00:12,400
you so much first I just want to say

00:00:09,460 --> 00:00:14,500
thanks to everyone that's here all the

00:00:12,400 --> 00:00:17,200
sponsors just all the companies like

00:00:14,500 --> 00:00:19,510
this really is the start of a huge wave

00:00:17,200 --> 00:00:21,070
and I'm just so excited be a part of it

00:00:19,510 --> 00:00:23,560
and get to be here and talk to you learn

00:00:21,070 --> 00:00:25,480
more about service so to talk about

00:00:23,560 --> 00:00:27,279
service really quick let's just take a

00:00:25,480 --> 00:00:29,199
few seconds to talk about what it is

00:00:27,279 --> 00:00:30,880
so server list doesn't mean you don't

00:00:29,199 --> 00:00:33,340
have a server it's really an abstraction

00:00:30,880 --> 00:00:35,140
away from you right so what is that I

00:00:33,340 --> 00:00:37,300
have this block of code it's gonna do

00:00:35,140 --> 00:00:39,940
some stuff I want that to run but I

00:00:37,300 --> 00:00:42,250
don't really care about anything else

00:00:39,940 --> 00:00:43,329
I want to make it scale and I also kind

00:00:42,250 --> 00:00:44,379
of wanted to do everything else in the

00:00:43,329 --> 00:00:46,270
cloud for me and I don't want to think

00:00:44,379 --> 00:00:48,940
about it and at the end of the day I

00:00:46,270 --> 00:00:50,949
have money and they'll take my money for

00:00:48,940 --> 00:00:52,510
it right so my husband code just run it

00:00:50,949 --> 00:00:55,629
I'll pay you for whatever I use cool

00:00:52,510 --> 00:00:57,219
that's the idea of service right now

00:00:55,629 --> 00:00:58,870
let's let's kind of think of a use case

00:00:57,219 --> 00:01:01,809
of why serverless is something that's

00:00:58,870 --> 00:01:04,150
compelling so right sharing applications

00:01:01,809 --> 00:01:05,980
I'm sure everyone here has used that in

00:01:04,150 --> 00:01:08,260
some capacity right so what are the

00:01:05,980 --> 00:01:10,360
aspects of that you have two basic

00:01:08,260 --> 00:01:12,130
services you need and this is really

00:01:10,360 --> 00:01:14,619
breaking in oversimplifying this use

00:01:12,130 --> 00:01:17,290
case but you essentially have the first

00:01:14,619 --> 00:01:19,600
service which is requesting a ride and

00:01:17,290 --> 00:01:22,540
then you also have to get a drivers

00:01:19,600 --> 00:01:23,710
location right but those two items if

00:01:22,540 --> 00:01:26,590
they're built in something like a

00:01:23,710 --> 00:01:28,030
traditional monolith we now have maybe

00:01:26,590 --> 00:01:30,520
different end points served from that

00:01:28,030 --> 00:01:32,439
monolith and when we start looking at

00:01:30,520 --> 00:01:35,740
that from a infrastructure this is

00:01:32,439 --> 00:01:37,600
really just me saying hey let's say it

00:01:35,740 --> 00:01:39,880
takes five minutes for the driver to

00:01:37,600 --> 00:01:42,939
arrive right so I requested the ride

00:01:39,880 --> 00:01:44,710
once but then let's say my app updates

00:01:42,939 --> 00:01:47,920
the location of the driver of 15 seconds

00:01:44,710 --> 00:01:50,829
every 15 seconds which is probably a lot

00:01:47,920 --> 00:01:52,750
less right so that would be 20 requests

00:01:50,829 --> 00:01:54,460
in that time for the driver to actually

00:01:52,750 --> 00:01:56,170
arrive to me right and if we start

00:01:54,460 --> 00:01:58,509
thinking about as the monolith is

00:01:56,170 --> 00:01:59,979
growing in its capacity we're really

00:01:58,509 --> 00:02:02,740
gonna be just scaling that out right

00:01:59,979 --> 00:02:04,299
this is just a horizontal scale and so

00:02:02,740 --> 00:02:05,469
the whole concept of serverless is we

00:02:04,299 --> 00:02:07,689
can now break this down into an

00:02:05,469 --> 00:02:09,970
individual pool of resources that can

00:02:07,689 --> 00:02:11,830
now have scale sets inside of that right

00:02:09,970 --> 00:02:14,770
I want my resource pool to grow when it

00:02:11,830 --> 00:02:17,110
needs to but I also want to shrink so I

00:02:14,770 --> 00:02:19,510
can deal with more resources maybe

00:02:17,110 --> 00:02:20,580
there's some areas where the rides take

00:02:19,510 --> 00:02:23,310
a little bit longer to

00:02:20,580 --> 00:02:25,770
so there's a little bit more requests

00:02:23,310 --> 00:02:27,390
that are coming from other aspects or in

00:02:25,770 --> 00:02:30,540
the ideal scenario which is why everyone

00:02:27,390 --> 00:02:31,740
wants you service oh it only took four

00:02:30,540 --> 00:02:33,840
mints for the drivers get there so I

00:02:31,740 --> 00:02:36,120
want to use less of those resources now

00:02:33,840 --> 00:02:38,730
this is really oversimplifying where

00:02:36,120 --> 00:02:40,710
we're taking a lot of assumptions in

00:02:38,730 --> 00:02:42,660
here that like those resources map

00:02:40,710 --> 00:02:45,060
one-to-one as far as the load and the

00:02:42,660 --> 00:02:47,640
data payload right so but thinking about

00:02:45,060 --> 00:02:48,750
that you know we have this nice way

00:02:47,640 --> 00:02:50,760
where we can have this serverless

00:02:48,750 --> 00:02:52,260
architecture through our whole stack but

00:02:50,760 --> 00:02:54,360
the main thing I want you to take away

00:02:52,260 --> 00:02:56,460
from today is that serverless isn't a

00:02:54,360 --> 00:02:58,470
silver bullet for everything right there

00:02:56,460 --> 00:03:01,380
are use cases or surplused doesn't make

00:02:58,470 --> 00:03:02,700
any sense and you really want to make

00:03:01,380 --> 00:03:04,800
sure that server list is just another

00:03:02,700 --> 00:03:06,600
tool in your tool chest to build great

00:03:04,800 --> 00:03:09,240
software fruit and great experiences for

00:03:06,600 --> 00:03:11,190
your users so let's talk about like some

00:03:09,240 --> 00:03:13,950
of the pain points one of the first pain

00:03:11,190 --> 00:03:16,140
points is really around the cold start

00:03:13,950 --> 00:03:17,430
right and so the concept is with server

00:03:16,140 --> 00:03:19,950
lists you actually have a container

00:03:17,430 --> 00:03:21,690
that's being initialized for you and it

00:03:19,950 --> 00:03:25,230
has actually initialized more containers

00:03:21,690 --> 00:03:27,180
as you scale up but inside of that if we

00:03:25,230 --> 00:03:29,430
actually put server lists at each one of

00:03:27,180 --> 00:03:30,810
our pieces there's a little cold start

00:03:29,430 --> 00:03:32,640
to start that container up for that

00:03:30,810 --> 00:03:34,140
first request and if all of those

00:03:32,640 --> 00:03:36,780
chained together and we actually end up

00:03:34,140 --> 00:03:38,400
building out multiple server list pieces

00:03:36,780 --> 00:03:41,250
in our infrastructure you can actually

00:03:38,400 --> 00:03:42,420
then having a long cold start you really

00:03:41,250 --> 00:03:43,560
need to think about what's the

00:03:42,420 --> 00:03:46,350
application use case

00:03:43,560 --> 00:03:47,760
how are my users gonna be using this so

00:03:46,350 --> 00:03:49,400
I actually came from a background as

00:03:47,760 --> 00:03:51,330
you're working in Azure functions and

00:03:49,400 --> 00:03:54,150
one of the things we actually recommend

00:03:51,330 --> 00:03:55,440
into our users all the time is just use

00:03:54,150 --> 00:03:57,060
a time trigger and run every five

00:03:55,440 --> 00:03:58,050
minutes and it'll keep your function

00:03:57,060 --> 00:03:59,640
block live and you'll never have to

00:03:58,050 --> 00:04:01,050
worry about that right so this is

00:03:59,640 --> 00:04:03,060
actually something that is recommended

00:04:01,050 --> 00:04:05,190
by cloud providers that you can do that

00:04:03,060 --> 00:04:07,170
and actually in AWS lambda there's

00:04:05,190 --> 00:04:09,870
actually a template in there to do that

00:04:07,170 --> 00:04:11,640
for you right you think about what is

00:04:09,870 --> 00:04:13,830
the cost of my server list

00:04:11,640 --> 00:04:15,989
infrastructure going to be right if we

00:04:13,830 --> 00:04:17,820
think about it as far as requests number

00:04:15,989 --> 00:04:19,470
of times that function runs you know

00:04:17,820 --> 00:04:21,959
typically you get like the first million

00:04:19,470 --> 00:04:23,630
free right so we're talking about 43,000

00:04:21,959 --> 00:04:26,040
runs if we just run every five minutes

00:04:23,630 --> 00:04:27,930
AWS I think just increased a fifteen

00:04:26,040 --> 00:04:30,690
minute run time before your cold start

00:04:27,930 --> 00:04:32,970
kicks in so this is actually a real

00:04:30,690 --> 00:04:34,020
option but the the point I want to make

00:04:32,970 --> 00:04:36,270
here is that there

00:04:34,020 --> 00:04:37,590
our options there are things around here

00:04:36,270 --> 00:04:41,129
but you really just want to understand

00:04:37,590 --> 00:04:42,629
what are you trying to do there but one

00:04:41,129 --> 00:04:45,330
thing about server lists that I do think

00:04:42,629 --> 00:04:47,220
is a great place so we've had a lot of

00:04:45,330 --> 00:04:48,479
other talks about you know this concept

00:04:47,220 --> 00:04:50,669
of graphical kind of being at the

00:04:48,479 --> 00:04:52,199
gateway and with Apollo server

00:04:50,669 --> 00:04:54,300
potentially stitching together other

00:04:52,199 --> 00:04:56,400
graph QL services there's a lot of

00:04:54,300 --> 00:05:01,199
options in there but serverless has a

00:04:56,400 --> 00:05:02,580
really nice place inside of this now if

00:05:01,199 --> 00:05:04,440
we start thinking like what what can I

00:05:02,580 --> 00:05:06,330
do with service today so we have great

00:05:04,440 --> 00:05:10,500
documentation on AWS lambda it's

00:05:06,330 --> 00:05:12,120
fantastic I'm always very impressed with

00:05:10,500 --> 00:05:14,460
the Doc's there and and the effort there

00:05:12,120 --> 00:05:15,870
if you look at the server list framework

00:05:14,460 --> 00:05:19,080
they have great stuff of how to do it on

00:05:15,870 --> 00:05:21,360
AWS but you know to be honest it seems

00:05:19,080 --> 00:05:24,150
like serverless is just kind of a WSS

00:05:21,360 --> 00:05:26,849
space right now right and so what about

00:05:24,150 --> 00:05:29,039
Azure raise of hands how many people in

00:05:26,849 --> 00:05:32,849
here have used Azure or use a sure in

00:05:29,039 --> 00:05:34,169
some capacity that's like a third of the

00:05:32,849 --> 00:05:36,659
people in here all right so there's

00:05:34,169 --> 00:05:39,270
there's something there so why not add

00:05:36,659 --> 00:05:43,440
your functions so let's see actually get

00:05:39,270 --> 00:05:47,729
into a little demo so how many people

00:05:43,440 --> 00:05:48,630
participated in October fests yes

00:05:47,729 --> 00:05:49,979
awesome

00:05:48,630 --> 00:05:51,509
really happy that some people

00:05:49,979 --> 00:05:55,620
participated so I did a lightning talk

00:05:51,509 --> 00:05:57,990
on Apollo server at Oktoberfest and what

00:05:55,620 --> 00:06:04,680
I committed oh this isn't even the right

00:05:57,990 --> 00:06:06,710
I got dragged over okay there we go

00:06:04,680 --> 00:06:09,360
I was like gosh you see a blank screen

00:06:06,710 --> 00:06:11,490
so I made a commitment there well I

00:06:09,360 --> 00:06:14,400
wanted to work on Azure function support

00:06:11,490 --> 00:06:16,650
for Apollo server so I got up stage kind

00:06:14,400 --> 00:06:18,630
of talked about that and I started

00:06:16,650 --> 00:06:20,789
working on it and there's actually

00:06:18,630 --> 00:06:22,199
another community member Leo that I want

00:06:20,789 --> 00:06:24,840
to thank at the end of this that did a

00:06:22,199 --> 00:06:26,520
lot of work towards us as well but the

00:06:24,840 --> 00:06:28,050
concept here is just like with AWS we

00:06:26,520 --> 00:06:29,759
should just be able to have a handler

00:06:28,050 --> 00:06:31,469
that just takes everything from our

00:06:29,759 --> 00:06:34,199
normal config and Apollo server right

00:06:31,469 --> 00:06:37,259
everything should just work normal as is

00:06:34,199 --> 00:06:39,509
now if I look at this one of the big

00:06:37,259 --> 00:06:41,279
benefits and what I love about Visual

00:06:39,509 --> 00:06:43,740
Studio code and the environment with

00:06:41,279 --> 00:06:46,080
Azure functions is the experience for

00:06:43,740 --> 00:06:47,430
developers so right now we're actually

00:06:46,080 --> 00:06:47,940
going to start up as four functions

00:06:47,430 --> 00:06:49,770
locally

00:06:47,940 --> 00:06:51,750
and it's great because I just pressed a

00:06:49,770 --> 00:06:53,670
play button you know I I came from a

00:06:51,750 --> 00:06:55,410
dotnet background where now a Visual

00:06:53,670 --> 00:06:57,180
Studio is a big beast but there are some

00:06:55,410 --> 00:06:58,500
nice little aspects and one of the

00:06:57,180 --> 00:07:00,420
things I love about it is this crisp

00:06:58,500 --> 00:07:03,510
experience that now we're just sitting

00:07:00,420 --> 00:07:06,750
in here debugging and if I want I can

00:07:03,510 --> 00:07:11,220
now come in here I'll pull playground up

00:07:06,750 --> 00:07:14,100
I love moon so the best but I can

00:07:11,220 --> 00:07:15,390
actually come in here and look at that

00:07:14,100 --> 00:07:19,770
is hitting my breakpoints right in my

00:07:15,390 --> 00:07:21,780
idea now check out the call stack I got

00:07:19,770 --> 00:07:23,250
my site I actually can see where in my

00:07:21,780 --> 00:07:26,360
query where everything's going through

00:07:23,250 --> 00:07:28,590
and now I can also step through this and

00:07:26,360 --> 00:07:30,540
see how my call stack is actually

00:07:28,590 --> 00:07:31,760
changed I have a lot of insight right in

00:07:30,540 --> 00:07:34,230
here and I don't have to do anything

00:07:31,760 --> 00:07:35,880
right it is just a Nasra function

00:07:34,230 --> 00:07:39,060
package you can just start up a new

00:07:35,880 --> 00:07:40,920
project and now you can start using

00:07:39,060 --> 00:07:43,320
everything with Apollo server everything

00:07:40,920 --> 00:07:46,740
we're showing you know today tomorrow or

00:07:43,320 --> 00:07:48,690
yesterday not tomorrow is all available

00:07:46,740 --> 00:07:51,240
right there cuz it's just all included

00:07:48,690 --> 00:07:52,830
in the same package and the best part

00:07:51,240 --> 00:07:54,720
about this too is it's not only just

00:07:52,830 --> 00:07:58,590
that you know everything we were showing

00:07:54,720 --> 00:08:00,419
about Apollo engine let's did I I didn't

00:07:58,590 --> 00:08:01,710
hit through the breakpoints that's

00:08:00,419 --> 00:08:06,150
probably the first thing to like finish

00:08:01,710 --> 00:08:09,900
the request now I am gonna you know just

00:08:06,150 --> 00:08:12,480
let you know the service that I'm using

00:08:09,900 --> 00:08:15,630
is on a free database in Azure so it

00:08:12,480 --> 00:08:17,990
runs very slow but it should return its

00:08:15,630 --> 00:08:17,990
results

00:08:22,469 --> 00:08:27,250
right so there we go so this is actually

00:08:25,449 --> 00:08:29,800
just a simple application that gets all

00:08:27,250 --> 00:08:32,110
of the US site flow data's for all our

00:08:29,800 --> 00:08:33,969
river systems I love fly-fishing so I'm

00:08:32,110 --> 00:08:35,469
always really interested in like well

00:08:33,969 --> 00:08:36,789
what's the rivers and flows gonna be

00:08:35,469 --> 00:08:40,329
like today so I can get out there this

00:08:36,789 --> 00:08:42,399
weekend so I get this nice nice context

00:08:40,329 --> 00:08:42,700
and then if I switch over I should see

00:08:42,399 --> 00:08:44,050
you

00:08:42,700 --> 00:08:45,940
there's my request in Apollo engine

00:08:44,050 --> 00:08:46,959
alright so now it's just everything we

00:08:45,940 --> 00:08:48,610
were talking about everything else being

00:08:46,959 --> 00:08:50,560
shown it's now all right there all those

00:08:48,610 --> 00:08:54,550
pipelines we were talking about it's all

00:08:50,560 --> 00:09:00,220
right there so let me switch back to my

00:08:54,550 --> 00:09:02,820
slides real quick right so I want to

00:09:00,220 --> 00:09:05,620
leave you with the thought process of

00:09:02,820 --> 00:09:08,470
right where can server lists fit inside

00:09:05,620 --> 00:09:10,300
of your stack right we have this concept

00:09:08,470 --> 00:09:11,320
of you're hearing a lot of teams are

00:09:10,300 --> 00:09:13,630
doing this a scheme is stitching

00:09:11,320 --> 00:09:16,540
multiple graph QL servers together right

00:09:13,630 --> 00:09:18,339
this is where server lists in a lot of

00:09:16,540 --> 00:09:20,769
various use cases can have a lot of

00:09:18,339 --> 00:09:22,329
value right if you think about what some

00:09:20,769 --> 00:09:24,730
of those other requirements are around

00:09:22,329 --> 00:09:28,209
like cold start it's very easy to work

00:09:24,730 --> 00:09:31,720
around that and lastly I want to give a

00:09:28,209 --> 00:09:34,420
big things I have no clue who leo is so

00:09:31,720 --> 00:09:37,540
I was working on a shore function stuff

00:09:34,420 --> 00:09:40,120
and then I saw a PR about I want to say

00:09:37,540 --> 00:09:42,910
three weeks ago from leo for support for

00:09:40,120 --> 00:09:45,550
a her phones and so actually thanks to a

00:09:42,910 --> 00:09:48,490
lot of his work it was much easier for

00:09:45,550 --> 00:09:50,260
me to finish up some of the other stuff

00:09:48,490 --> 00:09:51,640
because you know I have other things I

00:09:50,260 --> 00:09:53,769
have to do that your functions was kind

00:09:51,640 --> 00:09:55,360
of a side thing for me so I want to give

00:09:53,769 --> 00:09:58,779
a big thing to him and I also want give

00:09:55,360 --> 00:10:03,459
a big big thanks to my wife who let me

00:09:58,779 --> 00:10:05,470
sacrifice a lot of nights to code but

00:10:03,459 --> 00:10:06,940
yeah I just want to say thank you if you

00:10:05,470 --> 00:10:08,980
have any questions about Azure functions

00:10:06,940 --> 00:10:11,050
with like Apollo server I'm very happy

00:10:08,980 --> 00:10:12,610
to talk about it and if you really want

00:10:11,050 --> 00:10:14,680
to just talk about graph QL I'm always

00:10:12,610 --> 00:10:16,690
happy to talk about it and share what

00:10:14,680 --> 00:10:17,370
we're doing at Apollo thank you very

00:10:16,690 --> 00:10:22,250
much

00:10:17,370 --> 00:10:22,250

YouTube URL: https://www.youtube.com/watch?v=PjNaJdCAywA


