Title: What's next for Apollo Client (Peggy Rayzis)
Publication date: 2018-12-05
Playlist: GraphQL Summit 2018
Description: 
	Talk from GraphQL Summit 2018 - Nov 7, 2018

Peggy Rayzis, an Engineering Manager at Apollo, shares how Apollo Client 2.5 revolutionizes state management for React apps now that apollo-link-state is merged into the core library. She discusses how to manage local state with Apollo Client, as well as some of the new tooling available with the Apollo CLI and VS Code extension.

Learn more about Apollo:  https://www.apollographql.com/

Join Apollo's community Slack group:  https://www.apollographql.com/slack/

Learn more:  https://summit.graphql.com
Captions: 
	00:00:02,820 --> 00:00:12,040
all right what subgraph Cuba

00:00:05,979 --> 00:00:15,340
summit awesome it feels so great to be

00:00:12,040 --> 00:00:18,160
here today with all of you I see a lot

00:00:15,340 --> 00:00:21,970
of familiar faces in the crowd a lot of

00:00:18,160 --> 00:00:24,369
new ones too and I mean look at this

00:00:21,970 --> 00:00:26,560
venue it feels absolutely amazing to be

00:00:24,369 --> 00:00:28,689
here on this stage in this absolutely

00:00:26,560 --> 00:00:31,749
incredible venue

00:00:28,689 --> 00:00:34,510
little-known fact a lot of really famous

00:00:31,749 --> 00:00:37,000
people have actually performed here so I

00:00:34,510 --> 00:00:40,359
mean Lady Gaga has been on this stage

00:00:37,000 --> 00:00:42,160
we've had Skrillex wu-tang clan so I

00:00:40,359 --> 00:00:44,920
kind of wanted to set the mood a little

00:00:42,160 --> 00:00:46,809
bit before before my talk and kind of

00:00:44,920 --> 00:00:49,629
you know getting the the concert vibes

00:00:46,809 --> 00:00:52,149
you know have a little fun with it so if

00:00:49,629 --> 00:00:56,170
everybody could if you are able please

00:00:52,149 --> 00:00:57,820
stand up I know it's right before lunch

00:00:56,170 --> 00:01:00,309
come on all right

00:00:57,820 --> 00:01:07,390
so please stand up I want you all to put

00:01:00,309 --> 00:01:12,820
your hands in the air and if you love

00:01:07,390 --> 00:01:16,540
graph QL let me hear you scream all

00:01:12,820 --> 00:01:18,730
right awesome okay I mean I'm not as

00:01:16,540 --> 00:01:21,070
cool as Lady Gaga or Skrillex but my

00:01:18,730 --> 00:01:23,970
name is Peggy and I am an engineering

00:01:21,070 --> 00:01:28,120
manager at Apollo where I lead a team

00:01:23,970 --> 00:01:31,330
focused on making the Apollo developer

00:01:28,120 --> 00:01:34,660
experience awesome so what does exactly

00:01:31,330 --> 00:01:37,090
does that entail so my priority is to

00:01:34,660 --> 00:01:40,570
make sure that all of you in this room

00:01:37,090 --> 00:01:42,940
are successful with graph QL so

00:01:40,570 --> 00:01:45,640
literally everything that we build from

00:01:42,940 --> 00:01:48,850
our open source libraries to our cloud

00:01:45,640 --> 00:01:51,250
service to our developer tooling all of

00:01:48,850 --> 00:01:53,710
it is designed to help developers just

00:01:51,250 --> 00:01:57,190
like you ship apps to production faster

00:01:53,710 --> 00:01:58,960
and write better code and I think I

00:01:57,190 --> 00:02:01,450
think that mission is resonated with a

00:01:58,960 --> 00:02:05,320
lot of developers because Apollo has

00:02:01,450 --> 00:02:08,080
grown over 400% in the past year and

00:02:05,320 --> 00:02:09,360
it's been absolutely incredible to see

00:02:08,080 --> 00:02:12,210
Apollo client take

00:02:09,360 --> 00:02:15,840
this way we're actually reaching nearly

00:02:12,210 --> 00:02:18,000
half a million downloads per week and I

00:02:15,840 --> 00:02:20,670
don't think this is an accident I think

00:02:18,000 --> 00:02:22,530
it's not really because graph QL and

00:02:20,670 --> 00:02:24,950
Apollo or trendy it's it's really

00:02:22,530 --> 00:02:28,290
because they solve real world problems

00:02:24,950 --> 00:02:30,570
that react developers face every single

00:02:28,290 --> 00:02:32,460
day and I think all of you in this room

00:02:30,570 --> 00:02:35,850
who built to react out before you can

00:02:32,460 --> 00:02:37,830
probably attest to this so I think

00:02:35,850 --> 00:02:40,680
probably one of the hardest problems

00:02:37,830 --> 00:02:44,190
that we face as react developers is how

00:02:40,680 --> 00:02:46,350
to manage state in our applications so

00:02:44,190 --> 00:02:49,320
first we have to pick a state management

00:02:46,350 --> 00:02:52,380
library and the most popular choice is

00:02:49,320 --> 00:02:54,150
probably redux and then you know after

00:02:52,380 --> 00:02:55,950
we picked the right library then we have

00:02:54,150 --> 00:02:57,860
to worry about choosing the right

00:02:55,950 --> 00:03:01,200
middleware we have to worry about

00:02:57,860 --> 00:03:04,050
asynchronous action creators and and

00:03:01,200 --> 00:03:05,550
data normalization and and selectors and

00:03:04,050 --> 00:03:08,040
all these things that just take like

00:03:05,550 --> 00:03:11,040
conserve will mental overhead and then

00:03:08,040 --> 00:03:13,200
on top of all of that before we've even

00:03:11,040 --> 00:03:14,820
made our first network request we also

00:03:13,200 --> 00:03:16,590
have to think about how we're going to

00:03:14,820 --> 00:03:20,519
build complicated features like

00:03:16,590 --> 00:03:23,459
pagination and optimistic UI and this

00:03:20,519 --> 00:03:26,040
can be a huge burden so what Apollo does

00:03:23,459 --> 00:03:28,890
is it takes all of that complexity and

00:03:26,040 --> 00:03:31,200
it it removes a lot of it significantly

00:03:28,890 --> 00:03:33,660
thanks to its intelligent cache and its

00:03:31,200 --> 00:03:36,870
built-in Network stack so instead of

00:03:33,660 --> 00:03:39,600
writing thousands of lines of redux

00:03:36,870 --> 00:03:42,330
boilerplate all we have to do is just

00:03:39,600 --> 00:03:44,519
simply write a query and in that query

00:03:42,330 --> 00:03:47,760
we describe the data requirements that

00:03:44,519 --> 00:03:49,739
our components have and once we have

00:03:47,760 --> 00:03:52,590
that query we then just render a query

00:03:49,739 --> 00:03:54,090
component bind it to our UI and then

00:03:52,590 --> 00:03:56,310
Apollo client just takes care of the

00:03:54,090 --> 00:03:58,260
rest it tracks your loading State for

00:03:56,310 --> 00:04:00,299
you attracts your error state for you it

00:03:58,260 --> 00:04:02,760
even provides handy helpers like fetch

00:04:00,299 --> 00:04:05,700
more to execute things like pagination

00:04:02,760 --> 00:04:07,920
so it really just takes all of that

00:04:05,700 --> 00:04:11,190
complexity over here and just boils it

00:04:07,920 --> 00:04:14,540
down to graph QL queries and and UI

00:04:11,190 --> 00:04:17,340
which is what we know so I think

00:04:14,540 --> 00:04:19,830
typically when people think of managing

00:04:17,340 --> 00:04:20,650
data with Apollo client they're usually

00:04:19,830 --> 00:04:23,740
thinking of data

00:04:20,650 --> 00:04:26,590
from a remote graph API but over the

00:04:23,740 --> 00:04:28,810
past year more and more developers are

00:04:26,590 --> 00:04:32,110
actually starting to manage their local

00:04:28,810 --> 00:04:34,720
data with Apollo 2 so when I talk about

00:04:32,110 --> 00:04:37,660
local data I mean things like maybe

00:04:34,720 --> 00:04:40,539
device API results or the network status

00:04:37,660 --> 00:04:42,100
weather modal is open or not and you can

00:04:40,539 --> 00:04:45,100
actually manage that data with Apollo

00:04:42,100 --> 00:04:47,289
client 2 alongside your remote data and

00:04:45,100 --> 00:04:51,250
that's what Apollo link-state gives you

00:04:47,289 --> 00:04:53,710
so this this idea has really taken off I

00:04:51,250 --> 00:04:55,750
mean in the past year now over 30

00:04:53,710 --> 00:04:57,550
percent of Apollo client users are

00:04:55,750 --> 00:05:01,000
actually using Apollo link-state to

00:04:57,550 --> 00:05:03,910
manage their local data and it's really

00:05:01,000 --> 00:05:06,370
amazing to see how far it's come because

00:05:03,910 --> 00:05:09,100
it actually just started off as an

00:05:06,370 --> 00:05:11,139
experimental idea we we previewed it

00:05:09,100 --> 00:05:13,720
right on this stage at graph QL Summit a

00:05:11,139 --> 00:05:17,169
year ago and it's really resonated with

00:05:13,720 --> 00:05:19,930
developers and I think for a couple of

00:05:17,169 --> 00:05:21,789
reasons but probably the the most

00:05:19,930 --> 00:05:23,680
compelling is that it's really an

00:05:21,789 --> 00:05:26,889
elegant programming model and it solves

00:05:23,680 --> 00:05:30,610
a real need which is why companies like

00:05:26,889 --> 00:05:33,400
Netflix and Airbnb and Hilton are all

00:05:30,610 --> 00:05:35,860
using Apollo client to manage their

00:05:33,400 --> 00:05:38,650
local data with Apollo link state in

00:05:35,860 --> 00:05:39,909
production and this is huge and you'll

00:05:38,650 --> 00:05:41,530
actually hear from some of the

00:05:39,909 --> 00:05:43,330
developers on these teams today you've

00:05:41,530 --> 00:05:44,680
probably heard from Adam Neary how

00:05:43,330 --> 00:05:47,139
they're using it at Airbnb

00:05:44,680 --> 00:05:49,539
you'll hear talk from shruti at PayPal

00:05:47,139 --> 00:05:52,500
later will she'll talk about PayPal

00:05:49,539 --> 00:05:55,389
migration from Redux to graph QL and

00:05:52,500 --> 00:05:58,419
it's just truly amazing to kind of see

00:05:55,389 --> 00:05:59,979
the rapid adoption that we've had from

00:05:58,419 --> 00:06:02,710
companies who are now managing their

00:05:59,979 --> 00:06:04,720
local data with Apollo client so what

00:06:02,710 --> 00:06:07,210
caused this to happen like why why did

00:06:04,720 --> 00:06:09,820
it take off so quickly and I think it's

00:06:07,210 --> 00:06:13,270
because developers they want one source

00:06:09,820 --> 00:06:14,889
of truth when managing their data so one

00:06:13,270 --> 00:06:16,360
of the most compelling benefits of

00:06:14,889 --> 00:06:18,669
Apollo client is that it actually

00:06:16,360 --> 00:06:22,330
handles all of this data so you have

00:06:18,669 --> 00:06:23,860
your your data from your your graph API

00:06:22,330 --> 00:06:26,439
and then you have

00:06:23,860 --> 00:06:28,569
your local data you can even store data

00:06:26,439 --> 00:06:31,060
from legacy rest endpoints in the Apollo

00:06:28,569 --> 00:06:34,270
cache as well and you can do all of this

00:06:31,060 --> 00:06:36,159
without the need for a separate redux or

00:06:34,270 --> 00:06:38,979
mob X store that then you have to

00:06:36,159 --> 00:06:41,319
synchronize so having this one source of

00:06:38,979 --> 00:06:44,590
truth in this case the Apollo cache it's

00:06:41,319 --> 00:06:48,669
it significantly reduces complexity and

00:06:44,590 --> 00:06:50,860
mental overhead as you're developing so

00:06:48,669 --> 00:06:53,469
okay so we have the Apollo cache we're

00:06:50,860 --> 00:06:56,229
storing all this data in it and another

00:06:53,469 --> 00:06:58,710
reason why you know managing local data

00:06:56,229 --> 00:07:01,689
with Apollo is so revolutionary is that

00:06:58,710 --> 00:07:04,180
graph QL just becomes this unified

00:07:01,689 --> 00:07:06,279
interface to all of your apps data and

00:07:04,180 --> 00:07:08,889
you end up clearing all of your apps

00:07:06,279 --> 00:07:12,490
data the same way so here's kind of a

00:07:08,889 --> 00:07:14,979
sample query we have you know remote

00:07:12,490 --> 00:07:17,349
data coming from our graph QL API and

00:07:14,979 --> 00:07:19,599
then we have some local data - and the

00:07:17,349 --> 00:07:21,430
local data we we prefix with that client

00:07:19,599 --> 00:07:23,590
directive and that's how Apollo client

00:07:21,430 --> 00:07:26,259
knows to send that part of the query to

00:07:23,590 --> 00:07:27,759
the cache so and this is really great

00:07:26,259 --> 00:07:29,889
because when you think of a react

00:07:27,759 --> 00:07:31,719
components they're not just made up of

00:07:29,889 --> 00:07:33,879
one kind of data right like you have

00:07:31,719 --> 00:07:36,509
your react components they're made up of

00:07:33,879 --> 00:07:39,550
many kinds of data you know whether it's

00:07:36,509 --> 00:07:41,710
remote data or information about the

00:07:39,550 --> 00:07:44,800
network status or a modal and with graph

00:07:41,710 --> 00:07:47,229
QL we can query all of that data in

00:07:44,800 --> 00:07:52,150
exactly the same way and just pass it

00:07:47,229 --> 00:07:55,539
down simply to our component so finally

00:07:52,150 --> 00:07:58,569
I think the other reason why this idea

00:07:55,539 --> 00:08:01,060
has caught on so quickly is because the

00:07:58,569 --> 00:08:03,879
early adopters of managing local state

00:08:01,060 --> 00:08:05,770
with Apollo were sold on the promise of

00:08:03,879 --> 00:08:08,229
bringing the excellent developer tooling

00:08:05,770 --> 00:08:11,409
that we know in love with graph QL on

00:08:08,229 --> 00:08:14,650
the server over to the client so I think

00:08:11,409 --> 00:08:17,199
if we could leverage graph QL static

00:08:14,650 --> 00:08:19,990
typing and maybe the concept of a client

00:08:17,199 --> 00:08:21,639
schema we could enjoy the same features

00:08:19,990 --> 00:08:23,919
that we have on the server and like

00:08:21,639 --> 00:08:26,710
graph QL playground for example like

00:08:23,919 --> 00:08:28,810
autocomplete and jump to schema

00:08:26,710 --> 00:08:32,680
definitions that we experience when we

00:08:28,810 --> 00:08:34,390
write queries for remote data so when we

00:08:32,680 --> 00:08:36,100
launched Apollo link-state none

00:08:34,390 --> 00:08:37,900
this was actually built yet it was

00:08:36,100 --> 00:08:39,580
really just a promise it was an idea

00:08:37,900 --> 00:08:41,830
that we had in her head

00:08:39,580 --> 00:08:43,990
however we quickly followed up with an

00:08:41,830 --> 00:08:45,970
early working version of Apollo dev

00:08:43,990 --> 00:08:48,550
tools that would actually stitch

00:08:45,970 --> 00:08:51,010
together your client schema and your

00:08:48,550 --> 00:08:54,460
remote schema from within graphical so

00:08:51,010 --> 00:08:56,170
over here the the liked photos that was

00:08:54,460 --> 00:08:57,460
coming from your client schema the dog

00:08:56,170 --> 00:09:00,160
and the dog queries that was coming from

00:08:57,460 --> 00:09:01,330
your remote schema and Apollo client dev

00:09:00,160 --> 00:09:02,740
tools would just stitch that all

00:09:01,330 --> 00:09:04,450
together and that was kind of our first

00:09:02,740 --> 00:09:08,500
proof of concept this was really just

00:09:04,450 --> 00:09:10,390
the beginning so for the last six months

00:09:08,500 --> 00:09:14,050
we've really focused on taking this idea

00:09:10,390 --> 00:09:16,300
and making it bigger and really just

00:09:14,050 --> 00:09:21,280
delivering on this promise of excellent

00:09:16,300 --> 00:09:23,080
developer tooling and I think with one

00:09:21,280 --> 00:09:25,810
source of truth for all the data in our

00:09:23,080 --> 00:09:28,410
app one unified interface for querying

00:09:25,810 --> 00:09:30,610
local and remote data with graph QL and

00:09:28,410 --> 00:09:33,370
excellent developer tooling Apollo

00:09:30,610 --> 00:09:35,290
really does help react developers by

00:09:33,370 --> 00:09:38,050
eliminating the barriers to building

00:09:35,290 --> 00:09:40,330
data-driven apps and weren't really

00:09:38,050 --> 00:09:42,330
truly invested in making sure that all

00:09:40,330 --> 00:09:45,490
developers can benefit from our software

00:09:42,330 --> 00:09:48,580
so recently I asked a question on

00:09:45,490 --> 00:09:51,190
Twitter asking if any bootcamp students

00:09:48,580 --> 00:09:53,380
or developers new to programming had

00:09:51,190 --> 00:09:55,120
used Apollo before and I didn't really

00:09:53,380 --> 00:09:58,120
know what to expect but I was absolutely

00:09:55,120 --> 00:10:00,040
blown away by their responses it was

00:09:58,120 --> 00:10:03,010
really cool to see so many new

00:10:00,040 --> 00:10:04,840
developers had chosen Apollo because it

00:10:03,010 --> 00:10:06,820
actually simplified state management in

00:10:04,840 --> 00:10:09,580
their apps and they were able to learn

00:10:06,820 --> 00:10:11,950
graph QL and get up and running and only

00:10:09,580 --> 00:10:14,740
two weeks and I think this is really a

00:10:11,950 --> 00:10:17,080
testament to how straightforward data

00:10:14,740 --> 00:10:21,100
management becomes when you build your

00:10:17,080 --> 00:10:23,470
app with Apollo so Apollo isn't just for

00:10:21,100 --> 00:10:25,510
developers starting out however although

00:10:23,470 --> 00:10:27,940
we pride ourselves on a great getting

00:10:25,510 --> 00:10:30,850
started experience we also want to make

00:10:27,940 --> 00:10:32,030
sure that our software scales for large

00:10:30,850 --> 00:10:34,940
engineering argument

00:10:32,030 --> 00:10:36,320
Asians so as you heard in Adams talk

00:10:34,940 --> 00:10:39,410
earlier this morning

00:10:36,320 --> 00:10:42,230
Airbnb uses Apollo client to manage the

00:10:39,410 --> 00:10:44,540
remote graph API data their local data

00:10:42,230 --> 00:10:46,760
and their legacy rest data all in a

00:10:44,540 --> 00:10:48,440
single request and actually since

00:10:46,760 --> 00:10:49,130
they've switched some of their apps to

00:10:48,440 --> 00:10:51,290
Apollo

00:10:49,130 --> 00:10:58,370
they haven't even needed to load Redux

00:10:51,290 --> 00:11:00,860
at all so this is really cool and kind

00:10:58,370 --> 00:11:02,360
of what we've learned throughout the the

00:11:00,860 --> 00:11:04,730
past couple months just speaking with

00:11:02,360 --> 00:11:06,980
developers on large teams and small

00:11:04,730 --> 00:11:08,690
teams is whether you're new to

00:11:06,980 --> 00:11:11,240
programming or whether you work on a

00:11:08,690 --> 00:11:13,940
large team everybody wants a

00:11:11,240 --> 00:11:17,000
straightforward opinionated way to

00:11:13,940 --> 00:11:18,800
manage data in their applications they

00:11:17,000 --> 00:11:21,350
don't want to write a ton of boilerplate

00:11:18,800 --> 00:11:23,750
they don't want to synchronize between a

00:11:21,350 --> 00:11:25,340
bunch of different stores all they want

00:11:23,750 --> 00:11:27,530
to do is just specify their data

00:11:25,340 --> 00:11:29,690
requirements and have it show up on the

00:11:27,530 --> 00:11:33,350
page and Apollo really fills that need

00:11:29,690 --> 00:11:34,940
perfectly and I think all of these

00:11:33,350 --> 00:11:37,550
learnings are really what have

00:11:34,940 --> 00:11:40,820
influenced our plan for the next version

00:11:37,550 --> 00:11:46,880
of Apollo client which is why we are so

00:11:40,820 --> 00:11:49,100
excited to announce Apollo client 2.5 so

00:11:46,880 --> 00:11:51,590
we have a lot of really awesome features

00:11:49,100 --> 00:11:54,440
to show you and the best part is is that

00:11:51,590 --> 00:11:57,320
you can actually try it today just by

00:11:54,440 --> 00:12:01,520
installing the Alpha so let's see

00:11:57,320 --> 00:12:04,010
exactly what is in Apollo client 2.5 and

00:12:01,520 --> 00:12:06,620
I think the major headline here which I

00:12:04,010 --> 00:12:10,340
am so stoked about is that we are

00:12:06,620 --> 00:12:13,600
merging Apollo link-state into core so

00:12:10,340 --> 00:12:16,820
yeah I'm super pumped about this because

00:12:13,600 --> 00:12:18,380
just having maintained the project for

00:12:16,820 --> 00:12:21,290
many months before I was an engineering

00:12:18,380 --> 00:12:24,200
manager literally 70% I think of the

00:12:21,290 --> 00:12:27,050
bugs piled on the repository where as a

00:12:24,200 --> 00:12:29,690
result of miscommunication between the

00:12:27,050 --> 00:12:32,180
client resetting the store and Apollo

00:12:29,690 --> 00:12:33,980
links Nate not being able to adapt so by

00:12:32,180 --> 00:12:35,810
making this decision and merging it into

00:12:33,980 --> 00:12:38,780
core we're eliminating a whole class of

00:12:35,810 --> 00:12:40,310
bugs and making it much more stable for

00:12:38,780 --> 00:12:41,320
things like server-side rendering and

00:12:40,310 --> 00:12:42,760
also

00:12:41,320 --> 00:12:45,610
instances where you would need to reset

00:12:42,760 --> 00:12:47,500
the store so okay so we're merging it

00:12:45,610 --> 00:12:48,820
into core like what exactly does this

00:12:47,500 --> 00:12:52,420
look like and how can I get started

00:12:48,820 --> 00:12:54,970
today so the first thing you're going to

00:12:52,420 --> 00:12:58,330
want to do is define your core data

00:12:54,970 --> 00:13:00,700
model with client schemas so client

00:12:58,330 --> 00:13:02,830
schemas are just like the schemas that

00:13:00,700 --> 00:13:04,180
you write on the server and the

00:13:02,830 --> 00:13:06,940
difference here is that you're going to

00:13:04,180 --> 00:13:10,210
actually use the extend keyword to

00:13:06,940 --> 00:13:12,340
extend your remote schemas types now

00:13:10,210 --> 00:13:15,460
this not only allows you to define

00:13:12,340 --> 00:13:18,310
queries and mutations but it also allows

00:13:15,460 --> 00:13:21,250
you to extend server types like launch

00:13:18,310 --> 00:13:23,620
here and add virtual fields onto your

00:13:21,250 --> 00:13:25,480
data which are then stripped out before

00:13:23,620 --> 00:13:27,640
you send that request through to your

00:13:25,480 --> 00:13:28,810
server so this is really cool and it's

00:13:27,640 --> 00:13:31,150
not something that you could easily

00:13:28,810 --> 00:13:33,850
achieve with something like redux these

00:13:31,150 --> 00:13:35,860
virtual fields but it's also worth

00:13:33,850 --> 00:13:38,140
mentioning that these schemas are not

00:13:35,860 --> 00:13:40,540
enforced at runtime like on the server

00:13:38,140 --> 00:13:42,730
instead we're using these schemas to

00:13:40,540 --> 00:13:47,290
inform and power our developer tooling

00:13:42,730 --> 00:13:49,900
and making it much more intelligent so

00:13:47,290 --> 00:13:51,910
once you have your schema then you'll

00:13:49,900 --> 00:13:54,010
just specify your resolvers which are

00:13:51,910 --> 00:13:56,320
just like the resolvers that you write

00:13:54,010 --> 00:13:58,450
on the server the only difference is

00:13:56,320 --> 00:14:00,550
that the Apollo cache has actually been

00:13:58,450 --> 00:14:03,460
added to the context so then you can

00:14:00,550 --> 00:14:04,900
read and write to it seamlessly and what

00:14:03,460 --> 00:14:07,270
we really like about this is it's just

00:14:04,900 --> 00:14:10,300
one familiar programming model across

00:14:07,270 --> 00:14:12,160
the client and the server it's elegant

00:14:10,300 --> 00:14:14,560
and it's intuitive and you only have to

00:14:12,160 --> 00:14:17,140
use it once and then you can immediately

00:14:14,560 --> 00:14:19,060
be productive on both the client and the

00:14:17,140 --> 00:14:21,820
server which allows you to collaborate

00:14:19,060 --> 00:14:23,560
better with your teammates and also you

00:14:21,820 --> 00:14:26,010
know get new developers spun up quickly

00:14:23,560 --> 00:14:29,260
on your stack when you just have one way

00:14:26,010 --> 00:14:31,600
to to write resolvers across the client

00:14:29,260 --> 00:14:34,240
in the server so okay so we have our

00:14:31,600 --> 00:14:35,740
schema we then we have our resolvers and

00:14:34,240 --> 00:14:38,110
what do we do next

00:14:35,740 --> 00:14:40,690
so finally you'll write your query and

00:14:38,110 --> 00:14:43,210
you'll specify client fields with the

00:14:40,690 --> 00:14:45,570
client directive and then all you have

00:14:43,210 --> 00:14:49,080
to do is just bind it to your UI as you

00:14:45,570 --> 00:14:50,970
we do so one of the things we we really

00:14:49,080 --> 00:14:54,660
care about and we wanted to accomplish

00:14:50,970 --> 00:14:56,850
with this latest version was making sure

00:14:54,660 --> 00:14:59,430
that we could enable code splitting

00:14:56,850 --> 00:15:01,770
so at Apollo we really care about making

00:14:59,430 --> 00:15:04,110
your apps performance and following all

00:15:01,770 --> 00:15:06,450
of the latest front-end development best

00:15:04,110 --> 00:15:09,120
practices so we've built into the

00:15:06,450 --> 00:15:11,130
ability to dynamically add resolvers

00:15:09,120 --> 00:15:12,660
from within your components and that's

00:15:11,130 --> 00:15:14,820
something that we could only accomplish

00:15:12,660 --> 00:15:16,920
by merging a poly link state into core

00:15:14,820 --> 00:15:20,070
so that was a huge reason why we did it

00:15:16,920 --> 00:15:22,140
and it's really cool to see you know if

00:15:20,070 --> 00:15:24,570
if you're using this in an app you'll

00:15:22,140 --> 00:15:27,120
only load those resolvers once that

00:15:24,570 --> 00:15:30,000
component has mounted so it's a really

00:15:27,120 --> 00:15:33,210
great way to execute code splitting with

00:15:30,000 --> 00:15:35,580
Apollo and that's not all we also have

00:15:33,210 --> 00:15:38,730
some other really exciting highly

00:15:35,580 --> 00:15:40,740
requested features so now local state

00:15:38,730 --> 00:15:42,690
management has support for subscriptions

00:15:40,740 --> 00:15:45,180
which is awesome especially if you're

00:15:42,690 --> 00:15:48,630
working like with device api's doing any

00:15:45,180 --> 00:15:51,270
sort of you know position tracking you

00:15:48,630 --> 00:15:54,510
also have the ability to export local

00:15:51,270 --> 00:15:56,850
fields as variables for server data so

00:15:54,510 --> 00:15:59,010
one of the things we heard a lot was

00:15:56,850 --> 00:16:01,050
people kind of wanted to chain a vent so

00:15:59,010 --> 00:16:03,300
almost like sagas for example they

00:16:01,050 --> 00:16:05,400
wanted to read a value from the cache

00:16:03,300 --> 00:16:08,040
and then they wanted to use that value

00:16:05,400 --> 00:16:10,470
as a variable for a query that was sent

00:16:08,040 --> 00:16:12,540
to their server so we piloted this with

00:16:10,470 --> 00:16:14,850
the Apollo link rest and it worked out

00:16:12,540 --> 00:16:16,770
really well so we're bringing it to

00:16:14,850 --> 00:16:19,110
Apollo client as well so now you'll be

00:16:16,770 --> 00:16:21,470
able to export these local fields as

00:16:19,110 --> 00:16:23,910
variables for your server data and

00:16:21,470 --> 00:16:26,640
finally we also have the concept of

00:16:23,910 --> 00:16:28,350
cache initializers so before about the

00:16:26,640 --> 00:16:30,780
palo link state you could write your

00:16:28,350 --> 00:16:32,400
default state to the cache kind of like

00:16:30,780 --> 00:16:34,440
you know you have initial state and

00:16:32,400 --> 00:16:36,660
redux and now we have the concept of

00:16:34,440 --> 00:16:38,250
these cache initializers so you can use

00:16:36,660 --> 00:16:40,410
them for local data you can use them for

00:16:38,250 --> 00:16:42,270
remote data they can be synchronous if

00:16:40,410 --> 00:16:44,310
you specify them in the constructor they

00:16:42,270 --> 00:16:45,750
can also be asynchronous as well so

00:16:44,310 --> 00:16:47,520
we're really excited to kind of see the

00:16:45,750 --> 00:16:49,740
applications of these and how people

00:16:47,520 --> 00:16:50,300
will use them creatively to prime the

00:16:49,740 --> 00:16:54,950
Apollo

00:16:50,300 --> 00:16:56,870
however they wish so with all this focus

00:16:54,950 --> 00:16:58,790
on the Apollo cash and us kind of

00:16:56,870 --> 00:17:00,560
dumping more and more data into it it

00:16:58,790 --> 00:17:04,100
was really important to us that we kept

00:17:00,560 --> 00:17:06,080
the cash fast and performant so Ben did

00:17:04,100 --> 00:17:08,180
a lot of a really really excellent work

00:17:06,080 --> 00:17:11,630
we are connecting the Apollo in memory

00:17:08,180 --> 00:17:14,140
cache to the point where it's now on par

00:17:11,630 --> 00:17:17,150
with the fastest graph QL cache

00:17:14,140 --> 00:17:18,650
implementations in the world and users

00:17:17,150 --> 00:17:21,470
who have tested this out have been

00:17:18,650 --> 00:17:24,560
reporting improved speeds by two times

00:17:21,470 --> 00:17:26,780
on average which is amazing and it's

00:17:24,560 --> 00:17:28,400
stable now so all of you can try it it's

00:17:26,780 --> 00:17:31,370
really awesome and if you want to learn

00:17:28,400 --> 00:17:33,860
more exactly about how Ben did it

00:17:31,370 --> 00:17:35,780
definitely check out his talk tomorrow

00:17:33,860 --> 00:17:37,520
it's going to be in the lodge

00:17:35,780 --> 00:17:39,440
it's called Apollo client caching in

00:17:37,520 --> 00:17:39,920
depth so don't miss that one it's going

00:17:39,440 --> 00:17:41,710
to be awesome

00:17:39,920 --> 00:17:45,440
[Music]

00:17:41,710 --> 00:17:47,690
cool so but that's not all we you know

00:17:45,440 --> 00:17:49,310
we wanted to we wanted to deliver on

00:17:47,690 --> 00:17:52,040
this promise that we had made when we

00:17:49,310 --> 00:17:55,040
first set off building local state

00:17:52,040 --> 00:17:57,980
management for Apollo and we wanted to

00:17:55,040 --> 00:18:01,130
build out amazing tooling that leverages

00:17:57,980 --> 00:18:03,380
graph QL type system for local data

00:18:01,130 --> 00:18:06,050
because at the end of the day it's not

00:18:03,380 --> 00:18:09,500
just about what code we write it's also

00:18:06,050 --> 00:18:11,390
about how we write it we spend a lot of

00:18:09,500 --> 00:18:13,250
time in our editors we spend a lot of

00:18:11,390 --> 00:18:14,990
time in browser developer tools and on

00:18:13,250 --> 00:18:17,570
the command line so it's really

00:18:14,990 --> 00:18:21,530
essential that all of our tools work

00:18:17,570 --> 00:18:25,280
seamlessly so that's why we're really

00:18:21,530 --> 00:18:28,820
excited to announce that Apollo vs code

00:18:25,280 --> 00:18:30,500
is finally live so you might have seen

00:18:28,820 --> 00:18:32,900
some teasers on Twitter for the past

00:18:30,500 --> 00:18:34,940
couple months but we've really been

00:18:32,900 --> 00:18:37,400
working so hard on getting this right

00:18:34,940 --> 00:18:39,860
for all of you and we are so excited to

00:18:37,400 --> 00:18:42,740
share it with the world so who wants to

00:18:39,860 --> 00:18:45,220
see it I'm gonna need a little more

00:18:42,740 --> 00:18:48,220
enthusiasm okay awesome

00:18:45,220 --> 00:18:51,770
[Applause]

00:18:48,220 --> 00:18:54,559
okay so hopefully this video is working

00:18:51,770 --> 00:18:57,110
as we write our queries you'll

00:18:54,559 --> 00:18:59,779
see over here that you immediately get

00:18:57,110 --> 00:19:02,179
real-time metrics from Apollo engine of

00:18:59,779 --> 00:19:05,120
the performance cost of that query

00:19:02,179 --> 00:19:07,039
you also get autocomplete because the vs

00:19:05,120 --> 00:19:10,490
code extension will connect to your

00:19:07,039 --> 00:19:11,570
schema via the schema registry and this

00:19:10,490 --> 00:19:13,999
is really cool

00:19:11,570 --> 00:19:17,179
so you'll see here you kind of have all

00:19:13,999 --> 00:19:19,129
the autocomplete as you add new fields

00:19:17,179 --> 00:19:20,120
those engine metrics are going to pop up

00:19:19,129 --> 00:19:22,129
immediately

00:19:20,120 --> 00:19:23,960
so as you're developing you already know

00:19:22,129 --> 00:19:30,230
how expensive your queries are going to

00:19:23,960 --> 00:19:32,570
be and you can adjust for that what's

00:19:30,230 --> 00:19:35,600
also really cool is that you can switch

00:19:32,570 --> 00:19:37,580
your schemas so perhaps maybe you have a

00:19:35,600 --> 00:19:39,649
new version of your schema that you want

00:19:37,580 --> 00:19:41,659
to test out you can just seamlessly

00:19:39,649 --> 00:19:43,580
switch to that schema from within your

00:19:41,659 --> 00:19:45,649
editor and you'll see here that in the

00:19:43,580 --> 00:19:47,869
next version of our schema that name

00:19:45,649 --> 00:19:51,309
field is actually going to be deprecated

00:19:47,869 --> 00:19:53,749
so we a Lea sits a full name in order to

00:19:51,309 --> 00:19:56,149
avoid those warnings and then

00:19:53,749 --> 00:19:58,429
furthermore you can actually peek to the

00:19:56,149 --> 00:19:59,929
real schema definition from within your

00:19:58,429 --> 00:20:03,080
query so you don't have to be jumping

00:19:59,929 --> 00:20:05,119
around across multiple files you kind of

00:20:03,080 --> 00:20:07,369
just have it all right there all of that

00:20:05,119 --> 00:20:10,249
information at your fingertips so you

00:20:07,369 --> 00:20:11,840
can make smart decisions about how

00:20:10,249 --> 00:20:15,679
you're writing your queries as you're

00:20:11,840 --> 00:20:18,409
developing so just to recap what we just

00:20:15,679 --> 00:20:20,809
saw with apollo vs code and remote

00:20:18,409 --> 00:20:23,629
schemas so what you're going to do it's

00:20:20,809 --> 00:20:25,580
really simple to just connect your BS

00:20:23,629 --> 00:20:28,039
code extension to the engine registry

00:20:25,580 --> 00:20:30,110
and the s code will then pull down your

00:20:28,039 --> 00:20:32,480
schema from the registry and it will

00:20:30,110 --> 00:20:35,240
give you real time autocomplete as

00:20:32,480 --> 00:20:37,580
you're writing queries and it will also

00:20:35,240 --> 00:20:39,799
give you in line tracing metrics on the

00:20:37,580 --> 00:20:43,429
performance of each field right from

00:20:39,799 --> 00:20:45,200
Apollo Engine then it will also view

00:20:43,429 --> 00:20:47,029
your schema change history to see if

00:20:45,200 --> 00:20:48,710
there are any deprecation warnings and

00:20:47,029 --> 00:20:51,919
it will let you know about that right

00:20:48,710 --> 00:20:53,629
from within the editor you'll also be

00:20:51,919 --> 00:20:55,909
able to switch between schema tags

00:20:53,629 --> 00:20:57,649
seamlessly from your editor in case you

00:20:55,909 --> 00:21:00,169
want to you know test out different

00:20:57,649 --> 00:21:03,200
versions and then you'll also be able to

00:21:00,169 --> 00:21:05,179
peek schema definitions as well so this

00:21:03,200 --> 00:21:05,510
is all really cool stuff that you can do

00:21:05,179 --> 00:21:08,810
with

00:21:05,510 --> 00:21:11,320
Motz Chema's but we're not done yet so

00:21:08,810 --> 00:21:14,210
we've actually built in support for

00:21:11,320 --> 00:21:16,880
client-side schemas and apollo vs code

00:21:14,210 --> 00:21:18,860
as well and this is something super cool

00:21:16,880 --> 00:21:21,860
I don't think any other state management

00:21:18,860 --> 00:21:26,320
library on the planet can do this so I'm

00:21:21,860 --> 00:21:29,150
super pumped to show you this demo too

00:21:26,320 --> 00:21:31,100
so we are just going to let this play

00:21:29,150 --> 00:21:39,980
out because it looks like it's kind of

00:21:31,100 --> 00:21:42,350
the end there so you'll see here that it

00:21:39,980 --> 00:21:44,930
has support for the client directive so

00:21:42,350 --> 00:21:47,030
it's not going to air out upon that

00:21:44,930 --> 00:21:49,010
directive you can actually peek the

00:21:47,030 --> 00:21:51,650
definition and see where it is in your

00:21:49,010 --> 00:21:54,140
client schema which is really cool you

00:21:51,650 --> 00:21:56,480
can add doc strings to document the

00:21:54,140 --> 00:21:58,280
fields in your client schema which is a

00:21:56,480 --> 00:21:59,840
really good best practice for just

00:21:58,280 --> 00:22:05,420
making sure that your code is self

00:21:59,840 --> 00:22:08,000
documenting you can also hover and

00:22:05,420 --> 00:22:10,520
you'll see the doc string there you can

00:22:08,000 --> 00:22:11,900
jump to the fragment definition which is

00:22:10,520 --> 00:22:14,630
really cool so you just click on that

00:22:11,900 --> 00:22:17,060
and you'll see each place in your code

00:22:14,630 --> 00:22:18,620
that fragment is used all from within

00:22:17,060 --> 00:22:22,940
that one file so you're not constantly

00:22:18,620 --> 00:22:26,660
switching around the other cool thing is

00:22:22,940 --> 00:22:29,030
that if you don't have a particular

00:22:26,660 --> 00:22:31,220
field in your schema it will alert you

00:22:29,030 --> 00:22:34,070
so you know okay hey I need to add cart

00:22:31,220 --> 00:22:35,960
items to my client schema and you don't

00:22:34,070 --> 00:22:38,060
have to define your schema all in one

00:22:35,960 --> 00:22:39,860
file you can actually define your schema

00:22:38,060 --> 00:22:42,710
right inside the gql function right

00:22:39,860 --> 00:22:44,660
there just to get that error out of the

00:22:42,710 --> 00:22:48,920
way and then move it once you're ready

00:22:44,660 --> 00:22:52,040
to to your main schema so once we move

00:22:48,920 --> 00:22:56,150
it over to our main schema you'll be

00:22:52,040 --> 00:22:56,600
able to see that we don't get errors

00:22:56,150 --> 00:22:58,820
anymore

00:22:56,600 --> 00:23:01,100
so the other thing that's really cool is

00:22:58,820 --> 00:23:02,540
you know all of the types in our

00:23:01,100 --> 00:23:04,610
client-side schema they have to be

00:23:02,540 --> 00:23:07,100
extensions of the types from our remote

00:23:04,610 --> 00:23:09,410
schema so I'm kind of hungry I'm

00:23:07,100 --> 00:23:11,450
misspelling things and I type lunch here

00:23:09,410 --> 00:23:14,400
well lunch is not a field in my remote

00:23:11,450 --> 00:23:16,170
schema it's launched so Apollo BS code

00:23:14,400 --> 00:23:17,520
oh that that fields not in my remote

00:23:16,170 --> 00:23:21,180
schema and it will alert me immediately

00:23:17,520 --> 00:23:22,650
so I don't make that mistake so all of

00:23:21,180 --> 00:23:24,360
this is really amazing

00:23:22,650 --> 00:23:27,720
tooling just by writing our client-side

00:23:24,360 --> 00:23:30,840
schema we get autocomplete intelligence

00:23:27,720 --> 00:23:32,910
we we get to peek our clients schema

00:23:30,840 --> 00:23:34,700
definitions and it's all right there at

00:23:32,910 --> 00:23:38,010
our fingertips

00:23:34,700 --> 00:23:40,020
so to recap what we just saw apollo vs

00:23:38,010 --> 00:23:42,180
code will connect to your client schema

00:23:40,020 --> 00:23:43,950
and it will do this automatically we

00:23:42,180 --> 00:23:46,260
have some sane defaults in place but if

00:23:43,950 --> 00:23:48,120
you need to you know look in certain

00:23:46,260 --> 00:23:50,610
directories you can do that as well it

00:23:48,120 --> 00:23:53,190
will warn you if you incorrectly extend

00:23:50,610 --> 00:23:55,230
a type from your server schema it will

00:23:53,190 --> 00:23:57,420
give you autocomplete for local queries

00:23:55,230 --> 00:23:59,550
it will allow you to peek client schema

00:23:57,420 --> 00:24:03,150
definitions and it will also tell you

00:23:59,550 --> 00:24:06,000
each place in your code that you use a

00:24:03,150 --> 00:24:08,790
specific client fragment as well as doc

00:24:06,000 --> 00:24:11,280
strings - so we're super pumped about

00:24:08,790 --> 00:24:13,980
this I think it's super revolutionary

00:24:11,280 --> 00:24:17,700
and it's just a really amazing way to

00:24:13,980 --> 00:24:21,930
leverage graph QL rich type system for

00:24:17,700 --> 00:24:25,920
local development so that's not all

00:24:21,930 --> 00:24:29,100
we've also added typescript code gen for

00:24:25,920 --> 00:24:31,020
client schemas to the Apollo CLI so just

00:24:29,100 --> 00:24:35,640
a quick show of hands who's a typescript

00:24:31,020 --> 00:24:38,220
fan okay I see a lot here yes so if you

00:24:35,640 --> 00:24:40,170
are into typescript this is huge I know

00:24:38,220 --> 00:24:42,480
Adam Mary and the team at Airbnb have

00:24:40,170 --> 00:24:43,770
been using this with great success so

00:24:42,480 --> 00:24:49,470
you should definitely check it out if

00:24:43,770 --> 00:24:51,660
you are into static typing so we are

00:24:49,470 --> 00:24:55,080
super excited about the future here I

00:24:51,660 --> 00:24:57,570
think you know all of this amazing

00:24:55,080 --> 00:24:59,250
tooling is really great but we we want

00:24:57,570 --> 00:25:00,540
you to be able to know how to use it we

00:24:59,250 --> 00:25:03,150
want you to be able to know how to use

00:25:00,540 --> 00:25:06,210
it correctly so that's why we're

00:25:03,150 --> 00:25:09,060
doubling down on our investment in and

00:25:06,210 --> 00:25:11,970
teaching these concepts which is why we

00:25:09,060 --> 00:25:16,860
are announcing the official Apollo

00:25:11,970 --> 00:25:18,480
tutorial has launched today so this is

00:25:16,860 --> 00:25:20,100
really amazing I think it's been a long

00:25:18,480 --> 00:25:22,620
time coming people have really been

00:25:20,100 --> 00:25:24,780
for this but this tutorial will walk you

00:25:22,620 --> 00:25:27,059
through everything I just described in

00:25:24,780 --> 00:25:29,880
my presentation so you'll learn the

00:25:27,059 --> 00:25:31,919
Apollo platform by building and

00:25:29,880 --> 00:25:35,190
deploying a real world full stack

00:25:31,919 --> 00:25:36,900
application and we intentionally you

00:25:35,190 --> 00:25:39,150
know made this a little bit more complex

00:25:36,900 --> 00:25:42,090
than hello world because we want you to

00:25:39,150 --> 00:25:43,350
be able to quickly just get up and

00:25:42,090 --> 00:25:45,530
running with building a proof of concept

00:25:43,350 --> 00:25:48,289
at your company so we've included

00:25:45,530 --> 00:25:50,850
real-world features like pagination

00:25:48,289 --> 00:25:53,880
authentication local state management

00:25:50,850 --> 00:25:57,030
testing connecting to the vs code it's

00:25:53,880 --> 00:25:59,159
all right here right in this tutorial so

00:25:57,030 --> 00:26:00,900
definitely check it out and let us know

00:25:59,159 --> 00:26:08,340
what you think it's available today at

00:26:00,900 --> 00:26:09,720
Apollo graph QL comm slash Docs so so

00:26:08,340 --> 00:26:11,610
that's kind of what we've been working

00:26:09,720 --> 00:26:13,380
on and what's available today but I

00:26:11,610 --> 00:26:15,330
think you know we're always kind of have

00:26:13,380 --> 00:26:19,080
our mind set on the future and what's

00:26:15,330 --> 00:26:21,600
next with Apollo client we've already

00:26:19,080 --> 00:26:24,030
started thinking about Apollo client 3.0

00:26:21,600 --> 00:26:25,559
and what's on the roadmap so I wanted to

00:26:24,030 --> 00:26:27,570
just kind of take the time and give you

00:26:25,559 --> 00:26:31,559
a little bit of preview of what we're

00:26:27,570 --> 00:26:33,510
thinking about next so the first thing

00:26:31,559 --> 00:26:36,720
that's on our roadmap is merging Apollo

00:26:33,510 --> 00:26:38,820
boost into client core so if you're

00:26:36,720 --> 00:26:40,679
unfamiliar Apollo boost is just a really

00:26:38,820 --> 00:26:44,010
easy way to get up and running with

00:26:40,679 --> 00:26:46,169
Apollo client it has the in-memory cache

00:26:44,010 --> 00:26:48,270
and the link chain already set up for

00:26:46,169 --> 00:26:50,970
you out of the box and we've heard a lot

00:26:48,270 --> 00:26:53,850
of feedback from people that this was

00:26:50,970 --> 00:26:55,950
really great like they loved using it we

00:26:53,850 --> 00:26:58,710
also have some handy functions as well

00:26:55,950 --> 00:27:00,720
that you don't get with the core API and

00:26:58,710 --> 00:27:02,820
we want to just bring that amazing

00:27:00,720 --> 00:27:05,190
Apollo boost developer experience into

00:27:02,820 --> 00:27:06,870
core but at the same time we don't want

00:27:05,190 --> 00:27:09,179
to bloat your bundles with a bunch of

00:27:06,870 --> 00:27:11,400
unnecessary dependencies so we're also

00:27:09,179 --> 00:27:12,600
working on getting that bundle size down

00:27:11,400 --> 00:27:15,210
so that way

00:27:12,600 --> 00:27:17,159
adding boost into core isn't going to

00:27:15,210 --> 00:27:18,780
inflate your bundle size so that's

00:27:17,159 --> 00:27:21,840
something that we're actively working on

00:27:18,780 --> 00:27:23,640
to make sure that your bundle size stays

00:27:21,840 --> 00:27:28,320
small but you're also having that great

00:27:23,640 --> 00:27:30,179
developer experience so the second thing

00:27:28,320 --> 00:27:31,080
on our roadmap which is highly requested

00:27:30,179 --> 00:27:33,899
is

00:27:31,080 --> 00:27:35,460
cash and validation so I think you know

00:27:33,899 --> 00:27:38,149
everyone is kind of run into this at

00:27:35,460 --> 00:27:40,769
some point where you need to invalidate

00:27:38,149 --> 00:27:43,710
multiple queries from the Apollo client

00:27:40,769 --> 00:27:45,570
cache and we're finally tackling this on

00:27:43,710 --> 00:27:47,279
its it's a hard problem to solve but

00:27:45,570 --> 00:27:49,500
it's something we're committed to

00:27:47,279 --> 00:27:51,480
solving so some things that we've been

00:27:49,500 --> 00:27:53,760
exploring we were thinking of maybe

00:27:51,480 --> 00:27:56,279
introducing the concept of cash tags and

00:27:53,760 --> 00:27:58,350
sending tags from the server to the

00:27:56,279 --> 00:28:00,539
client to automatically invalidate

00:27:58,350 --> 00:28:03,210
queries and we're also exploring the

00:28:00,539 --> 00:28:05,700
idea of garbage collection as well so if

00:28:03,210 --> 00:28:07,289
queries haven't been fetched in a long

00:28:05,700 --> 00:28:09,149
time just automatically and Vic Toews

00:28:07,289 --> 00:28:11,340
from the cache so the cache isn't

00:28:09,149 --> 00:28:13,769
growing too large so we're actively

00:28:11,340 --> 00:28:15,600
working on that and we would love you

00:28:13,769 --> 00:28:19,230
know any feedback or use cases that your

00:28:15,600 --> 00:28:22,169
teams could provide and the third thing

00:28:19,230 --> 00:28:24,299
that we're also working on everyone has

00:28:22,169 --> 00:28:27,389
been asking me what is Apollo client

00:28:24,299 --> 00:28:28,289
doing about hooks and hooks are really

00:28:27,389 --> 00:28:30,720
awesome

00:28:28,289 --> 00:28:33,029
you know the react calm at react comp

00:28:30,720 --> 00:28:35,070
the react team released an alpha about

00:28:33,029 --> 00:28:36,690
two weeks ago and I think they're really

00:28:35,070 --> 00:28:38,909
great but we need to let the dust settle

00:28:36,690 --> 00:28:41,220
a little bit it's only just an alpha

00:28:38,909 --> 00:28:43,049
they're not stable yet so we really want

00:28:41,220 --> 00:28:45,299
to see kind of where things shake out

00:28:43,049 --> 00:28:47,399
with suspense and also async server

00:28:45,299 --> 00:28:49,860
rendering before we make any decisions

00:28:47,399 --> 00:28:52,950
about changing the reactive palo api to

00:28:49,860 --> 00:28:54,480
support hooks so we're actively working

00:28:52,950 --> 00:28:56,940
with the react team on this and we're

00:28:54,480 --> 00:28:58,830
really excited to kind of see how the

00:28:56,940 --> 00:29:01,350
future of reactive ULBs and how that

00:28:58,830 --> 00:29:03,690
influences apollo client but one thing's

00:29:01,350 --> 00:29:04,500
for sure wherever react goes we're going

00:29:03,690 --> 00:29:07,289
to go with it

00:29:04,500 --> 00:29:09,750
we want to make sure that you know how

00:29:07,289 --> 00:29:12,210
you're writing Apollo client apps is

00:29:09,750 --> 00:29:14,279
exactly following the best practices

00:29:12,210 --> 00:29:18,000
that you would be taking when writing

00:29:14,279 --> 00:29:20,820
react apps so this is a lot of stuff and

00:29:18,000 --> 00:29:22,710
we can't do it alone we really want your

00:29:20,820 --> 00:29:26,220
help so if you're interested in

00:29:22,710 --> 00:29:28,260
contributing I highly encourage you to

00:29:26,220 --> 00:29:30,179
check out the Apollo feature request

00:29:28,260 --> 00:29:31,980
repo where all this is going down

00:29:30,179 --> 00:29:33,899
give us your use cases give us your

00:29:31,980 --> 00:29:35,490
feedback you know if you've ever

00:29:33,899 --> 00:29:36,120
experimented with any of these things

00:29:35,490 --> 00:29:36,659
yourself

00:29:36,120 --> 00:29:38,460
we definitely

00:29:36,659 --> 00:29:43,710
want your help and we want to hear from

00:29:38,460 --> 00:29:45,629
all of you so we know how hard state

00:29:43,710 --> 00:29:48,029
management and react apps can be and

00:29:45,629 --> 00:29:50,340
we've really been laser focused over the

00:29:48,029 --> 00:29:52,109
past year on getting this right because

00:29:50,340 --> 00:29:54,149
at the end of the day our main goal is

00:29:52,109 --> 00:29:57,059
to make sure that all of you in this

00:29:54,149 --> 00:29:59,759
room are happy and productive using

00:29:57,059 --> 00:30:01,529
graph QL and I think part of that is

00:29:59,759 --> 00:30:04,470
really giving you the guidance to do

00:30:01,529 --> 00:30:06,330
state management the right way and I

00:30:04,470 --> 00:30:09,960
think with all of the new tooling with

00:30:06,330 --> 00:30:11,820
vs code and the Apollo CLI in addition

00:30:09,960 --> 00:30:13,919
to the elegant programming model that

00:30:11,820 --> 00:30:16,169
managing local data with Apollo gives

00:30:13,919 --> 00:30:18,899
you is really where the future of

00:30:16,169 --> 00:30:21,059
front-end development is heading so I

00:30:18,899 --> 00:30:22,859
know you're going to love all of this so

00:30:21,059 --> 00:30:24,989
definitely just try it out let me know

00:30:22,859 --> 00:30:26,940
what you think and come find me later if

00:30:24,989 --> 00:30:30,060
you want to talk state management with

00:30:26,940 --> 00:30:36,020
Apollo client thank you all so much

00:30:30,060 --> 00:30:36,020

YouTube URL: https://www.youtube.com/watch?v=WM7YsPzWuTA


