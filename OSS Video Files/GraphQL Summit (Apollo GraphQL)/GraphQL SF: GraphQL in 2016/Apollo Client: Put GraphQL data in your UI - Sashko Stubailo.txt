Title: Apollo Client: Put GraphQL data in your UI - Sashko Stubailo
Publication date: 2016-06-02
Playlist: GraphQL SF: GraphQL in 2016
Description: 
	At GraphQL San Francisco's first meetup, Apollo Stack's Sashko Stubailo talks about how you can easily build full-stack apps with GraphQL, Apollo, and Redux. 

Join GraphQL San Francisco for updates on future events: http://www.meetup.com/GraphQL-SF/
Read our event summary on Medium: https://medium.com/apollo-stack/graphql-in-2016-a-growing-ecosystem-89846d9bb29e#.tis6c7a0r
Captions: 
	00:00:02,070 --> 00:00:07,589
our next speaker is my colleague sashko

00:00:05,010 --> 00:00:12,059
Stabilo who will be talking about Apollo

00:00:07,589 --> 00:00:14,250
client graph QL client for any type of

00:00:12,059 --> 00:00:17,970
JavaScript framework front-end framework

00:00:14,250 --> 00:00:20,489
that is great yeah so you guys heard

00:00:17,970 --> 00:00:23,009
just now a bunch of stuff about back-end

00:00:20,489 --> 00:00:26,309
graph QL but that's not usually where I

00:00:23,009 --> 00:00:28,079
live I think for all my programming life

00:00:26,309 --> 00:00:30,119
have been a friend developer I only

00:00:28,079 --> 00:00:32,790
learned how to write a line of PHP like

00:00:30,119 --> 00:00:35,010
maybe four years after I wrote my first

00:00:32,790 --> 00:00:37,470
line of HTML and then JavaScript so

00:00:35,010 --> 00:00:39,990
anyway that's a lot of cool stuff but

00:00:37,470 --> 00:00:43,470
what I want to talk about is how do you

00:00:39,990 --> 00:00:44,400
put graph QL data in your UI there's a

00:00:43,470 --> 00:00:46,140
lot of great answers this question

00:00:44,400 --> 00:00:48,090
actually if you probably google around

00:00:46,140 --> 00:00:50,880
for graphical clients there's a lot of

00:00:48,090 --> 00:00:52,829
different options out there but I think

00:00:50,880 --> 00:00:54,690
the thing that I really want to focus on

00:00:52,829 --> 00:00:55,620
with Apollo client is just answering

00:00:54,690 --> 00:01:00,739
this question the most straightforward

00:00:55,620 --> 00:01:02,940
way humanly possible because graph QL

00:01:00,739 --> 00:01:05,129
has a lot of really great tools that are

00:01:02,940 --> 00:01:08,070
really fun to use for example if you

00:01:05,129 --> 00:01:09,390
guys have used graph QL at all you might

00:01:08,070 --> 00:01:12,420
have seen this tool called graphical

00:01:09,390 --> 00:01:14,790
what you think is like the greatest

00:01:12,420 --> 00:01:16,979
thing handed down from the benevolent

00:01:14,790 --> 00:01:19,530
graphic you'll dictators I think it's

00:01:16,979 --> 00:01:22,530
the kind of thing where you know you can

00:01:19,530 --> 00:01:24,330
talk about graph QL all you want but I

00:01:22,530 --> 00:01:26,340
think this is the moment when you see

00:01:24,330 --> 00:01:27,630
this tool where you just explore your

00:01:26,340 --> 00:01:29,010
schema and you type the fuels that you

00:01:27,630 --> 00:01:30,659
want you get exactly the thing you asked

00:01:29,010 --> 00:01:32,100
for I think that's when people release

00:01:30,659 --> 00:01:34,290
that's when I really really got it and I

00:01:32,100 --> 00:01:36,570
was like wow like you can't do this with

00:01:34,290 --> 00:01:38,460
rest like come on there's like tons of

00:01:36,570 --> 00:01:39,960
services built around trying to do this

00:01:38,460 --> 00:01:43,500
with rest and they're not really that

00:01:39,960 --> 00:01:47,040
good sorry services and I think like

00:01:43,500 --> 00:01:49,200
this is also the value is the graphical

00:01:47,040 --> 00:01:50,400
syntax it's so nice because you know you

00:01:49,200 --> 00:01:52,320
could do the same thing and you could

00:01:50,400 --> 00:01:54,689
type out giant JSON objects with many

00:01:52,320 --> 00:01:57,090
fields they could have lots of colons

00:01:54,689 --> 00:01:58,259
and brackets and fun stuff like that but

00:01:57,090 --> 00:01:59,939
there's none of that here it's just a

00:01:58,259 --> 00:02:01,590
very simple thing designed to do one

00:01:59,939 --> 00:02:03,810
thing which is fetch data and it feels

00:02:01,590 --> 00:02:05,430
great to use and then you're like okay

00:02:03,810 --> 00:02:07,619
great I've set up my graph kill server

00:02:05,430 --> 00:02:09,239
maybe I used to back into the service or

00:02:07,619 --> 00:02:12,090
something to gave me a graph QL schema

00:02:09,239 --> 00:02:13,859
that I can explore with graphical but

00:02:12,090 --> 00:02:14,510
now what right now probably the next

00:02:13,859 --> 00:02:15,769
thing we want to do

00:02:14,510 --> 00:02:17,120
is build an app on top of that because

00:02:15,769 --> 00:02:19,010
you're probably not going to give you

00:02:17,120 --> 00:02:21,489
users the graphical to play around with

00:02:19,010 --> 00:02:25,040
directly you want to give them a UI and

00:02:21,489 --> 00:02:27,950
what I found was there was a bit of a

00:02:25,040 --> 00:02:30,049
gap there where you have a lot of fun

00:02:27,950 --> 00:02:32,450
with graphical you can see exactly where

00:02:30,049 --> 00:02:33,980
it's going but then it's not quite as

00:02:32,450 --> 00:02:35,930
easy to build an app on top of it as the

00:02:33,980 --> 00:02:38,569
syntax might suggest as the experience

00:02:35,930 --> 00:02:39,590
using graphical might suggest sometimes

00:02:38,569 --> 00:02:41,269
you have to do some complex setup

00:02:39,590 --> 00:02:43,069
perhaps you have to modify your schema

00:02:41,269 --> 00:02:45,109
to use something like relay sometimes

00:02:43,069 --> 00:02:47,150
you you can't always use the schema that

00:02:45,109 --> 00:02:49,220
you started out with there's also not

00:02:47,150 --> 00:02:51,530
too many super great examples of full

00:02:49,220 --> 00:02:53,120
stack graph QL apps out there there's a

00:02:51,530 --> 00:02:56,000
couple but there's nothing that I think

00:02:53,120 --> 00:02:59,599
I really lets people get started super

00:02:56,000 --> 00:03:02,299
easily so that's why we decided to build

00:02:59,599 --> 00:03:04,670
Apollo client and the public client is a

00:03:02,299 --> 00:03:06,980
thing where you npm install Apollo

00:03:04,670 --> 00:03:09,260
client you copy and paste the query from

00:03:06,980 --> 00:03:11,810
graphical into your JavaScript code and

00:03:09,260 --> 00:03:13,760
you're done you have the data in your UI

00:03:11,810 --> 00:03:16,730
you've built an app on top of your graph

00:03:13,760 --> 00:03:18,349
QL endpoint you know and if you don't

00:03:16,730 --> 00:03:20,090
need any super special features if all

00:03:18,349 --> 00:03:23,629
you want to do is display that data then

00:03:20,090 --> 00:03:25,790
you're basically done let's go a little

00:03:23,629 --> 00:03:27,560
bit you know check out what queries and

00:03:25,790 --> 00:03:28,910
mutations look like and it's not very

00:03:27,560 --> 00:03:30,769
surprising they look probably exactly

00:03:28,910 --> 00:03:31,790
like what you would expect right you

00:03:30,769 --> 00:03:33,709
check that query you typed in the

00:03:31,790 --> 00:03:36,739
graphical you put that string into your

00:03:33,709 --> 00:03:39,680
UI code it's highlighted in green here

00:03:36,739 --> 00:03:41,269
and my wonderful color scheme you throw

00:03:39,680 --> 00:03:42,680
some variables and their variables are

00:03:41,269 --> 00:03:44,870
kind of like arguments to graph QL

00:03:42,680 --> 00:03:48,650
queries you can see that the feed query

00:03:44,870 --> 00:03:50,810
takes a feed type which can be top or

00:03:48,650 --> 00:03:53,299
hot or one of these things you see on

00:03:50,810 --> 00:03:54,739
Reddit and the same thing with mutations

00:03:53,299 --> 00:03:56,060
a mutation graph kill is also a nice

00:03:54,739 --> 00:03:57,739
query that you can type into graphical

00:03:56,060 --> 00:03:59,299
and then you can paste into your app and

00:03:57,739 --> 00:04:01,489
you can call it the same way you call

00:03:59,299 --> 00:04:02,930
any of your react callbacks for example

00:04:01,489 --> 00:04:04,940
just by passing in some arguments and

00:04:02,930 --> 00:04:06,669
those get passed to the server and the

00:04:04,940 --> 00:04:08,780
thing that you want happens and

00:04:06,669 --> 00:04:10,220
specifically in the react integration

00:04:08,780 --> 00:04:11,449
for Apollo we also have an angular one

00:04:10,220 --> 00:04:13,250
but in the back one we have some very

00:04:11,449 --> 00:04:14,780
tight integration with Redux so you can

00:04:13,250 --> 00:04:16,729
get your data from your props of your

00:04:14,780 --> 00:04:18,079
component from the redux state or from

00:04:16,729 --> 00:04:21,799
the arguments that are passed into your

00:04:18,079 --> 00:04:24,590
mutation so what kind of features can

00:04:21,799 --> 00:04:25,669
you expect from a graph QL client so you

00:04:24,590 --> 00:04:27,020
know it's pretty easy to imagine what

00:04:25,669 --> 00:04:28,450
happens when you send a single graph QL

00:04:27,020 --> 00:04:30,710
query to the server

00:04:28,450 --> 00:04:31,790
but real life is not as simple right

00:04:30,710 --> 00:04:33,680
you're not just having a read-only

00:04:31,790 --> 00:04:34,880
display drew data so a lot of the

00:04:33,680 --> 00:04:37,550
features that you might want out of a

00:04:34,880 --> 00:04:38,840
graphical client come in when you either

00:04:37,550 --> 00:04:41,000
are modifying that data or you want to

00:04:38,840 --> 00:04:43,640
refresh it in different ways so today in

00:04:41,000 --> 00:04:45,440
Apollo client you can call mutations and

00:04:43,640 --> 00:04:47,570
have the data beery fetched and

00:04:45,440 --> 00:04:49,310
integrated back into your store you can

00:04:47,570 --> 00:04:51,770
pass polling intervals or manually

00:04:49,310 --> 00:04:54,080
refetch to get new data when you want to

00:04:51,770 --> 00:04:56,000
and you can even wire up an external

00:04:54,080 --> 00:04:57,590
data source to pipe data directly into

00:04:56,000 --> 00:04:59,540
your client side store and see that

00:04:57,590 --> 00:05:01,640
reflected in your UI components right so

00:04:59,540 --> 00:05:03,980
you know you might have a user type in

00:05:01,640 --> 00:05:05,600
your graph kill schema you can just get

00:05:03,980 --> 00:05:07,520
new data about that user from WebSocket

00:05:05,600 --> 00:05:09,590
throw it into the store and have that

00:05:07,520 --> 00:05:11,330
update your UI there's a lot of great

00:05:09,590 --> 00:05:12,680
features were thinking about along and

00:05:11,330 --> 00:05:14,870
tomorrow's features probably in the next

00:05:12,680 --> 00:05:16,940
month or two but some of the great

00:05:14,870 --> 00:05:18,200
things that you would expect from a full

00:05:16,940 --> 00:05:19,910
stack data loading system like

00:05:18,200 --> 00:05:21,500
optimistic UI which is the ability

00:05:19,910 --> 00:05:22,880
essentially to have a fake mutation

00:05:21,500 --> 00:05:24,830
happen on the client before it actually

00:05:22,880 --> 00:05:26,330
comes back from the server some nice

00:05:24,830 --> 00:05:28,160
features around pagination just to make

00:05:26,330 --> 00:05:31,160
it easier to fetch data when you already

00:05:28,160 --> 00:05:32,780
have some of it and the ability to do

00:05:31,160 --> 00:05:34,190
some of what relays most flagship

00:05:32,780 --> 00:05:36,260
features are about which is composed

00:05:34,190 --> 00:05:38,420
fragments from different UI components

00:05:36,260 --> 00:05:42,440
into larger queries when you want to

00:05:38,420 --> 00:05:45,800
reduce the number of round trips so what

00:05:42,440 --> 00:05:47,060
is it that enables Apollo client or is

00:05:45,800 --> 00:05:48,500
going to enable Apollo client to have

00:05:47,060 --> 00:05:50,690
such a simple syntax where you just copy

00:05:48,500 --> 00:05:53,030
and paste the query but yet have all

00:05:50,690 --> 00:05:55,280
these cool features you expect from your

00:05:53,030 --> 00:05:58,850
fancy clients like reef etching

00:05:55,280 --> 00:06:00,740
pagination you know all that kind of

00:05:58,850 --> 00:06:02,290
stuff and it's really just three things

00:06:00,740 --> 00:06:04,850
and these are three things that I think

00:06:02,290 --> 00:06:06,800
any what I would say a sufficiently

00:06:04,850 --> 00:06:07,760
smart graphical client should have the

00:06:06,800 --> 00:06:10,130
one thing you should have is a

00:06:07,760 --> 00:06:11,420
normalized cache so just like relay you

00:06:10,130 --> 00:06:13,400
don't want to store the results of your

00:06:11,420 --> 00:06:15,830
graph QL queries on the client as just

00:06:13,400 --> 00:06:17,300
giant blobs of JSON because you can't

00:06:15,830 --> 00:06:19,070
really do much with that because if you

00:06:17,300 --> 00:06:20,390
do two queries for the same data and

00:06:19,070 --> 00:06:20,780
you're just storing them as is in your

00:06:20,390 --> 00:06:22,670
store

00:06:20,780 --> 00:06:24,470
there's no way to understand that those

00:06:22,670 --> 00:06:26,390
two subtrees of the query represent the

00:06:24,470 --> 00:06:28,880
same data so you can't do something like

00:06:26,390 --> 00:06:30,320
fetch a giant query that includes some

00:06:28,880 --> 00:06:32,390
news feed items and then update just one

00:06:30,320 --> 00:06:33,350
item by calling that smaller query and

00:06:32,390 --> 00:06:35,510
that's something you can do once you

00:06:33,350 --> 00:06:37,550
have a normalized cash with query

00:06:35,510 --> 00:06:39,440
manipulation which is basically the

00:06:37,550 --> 00:06:40,790
ability to operate on queries before you

00:06:39,440 --> 00:06:41,490
send them to the server or maybe even at

00:06:40,790 --> 00:06:43,530
build time so

00:06:41,490 --> 00:06:44,940
you don't have to do it at runtime you

00:06:43,530 --> 00:06:46,020
can avoid typing certain fields right

00:06:44,940 --> 00:06:47,849
for example if you always want to

00:06:46,020 --> 00:06:49,139
research the IDS of your objects we

00:06:47,849 --> 00:06:50,669
always want to fetch the type names of

00:06:49,139 --> 00:06:52,169
your objects because your UI depends on

00:06:50,669 --> 00:06:53,330
that or your logic depends on that you

00:06:52,169 --> 00:06:56,220
should be able to do automatically and

00:06:53,330 --> 00:06:59,250
the last thing I think is a nice store

00:06:56,220 --> 00:07:02,250
so a Pollock line gets this for free

00:06:59,250 --> 00:07:04,050
thanks Dan so Apollo client is totally

00:07:02,250 --> 00:07:05,099
built on top of redux you don't have to

00:07:04,050 --> 00:07:06,660
care about the fact that it's built on

00:07:05,099 --> 00:07:09,210
top of redux but it was just a super

00:07:06,660 --> 00:07:11,280
simple model that let us have a totally

00:07:09,210 --> 00:07:13,680
serializable store that moves in very

00:07:11,280 --> 00:07:15,300
concrete steps and let's implement some

00:07:13,680 --> 00:07:16,680
of these features like optimistic UI a

00:07:15,300 --> 00:07:19,349
server-side rendering and store

00:07:16,680 --> 00:07:21,900
hydration with basically no code because

00:07:19,349 --> 00:07:24,720
it was always supported by redux and of

00:07:21,900 --> 00:07:25,949
course as indicated by this tweet I saw

00:07:24,720 --> 00:07:27,240
a couple hours ago and thought it was

00:07:25,949 --> 00:07:29,250
really cool

00:07:27,240 --> 00:07:31,380
it works with redux dev tools so if

00:07:29,250 --> 00:07:33,030
you've ever had a fancy data fetching

00:07:31,380 --> 00:07:34,110
system and you're wondering when is it

00:07:33,030 --> 00:07:36,630
fetching the data what data is a

00:07:34,110 --> 00:07:38,039
fetching Y you can now do that just by

00:07:36,630 --> 00:07:39,270
opening your redux dev tools if you're

00:07:38,039 --> 00:07:41,009
already using redux it integrates with

00:07:39,270 --> 00:07:42,720
your existing store and just see what

00:07:41,009 --> 00:07:44,460
actions are going on there okay it

00:07:42,720 --> 00:07:45,599
decided to pull this time okay I decided

00:07:44,460 --> 00:07:51,060
to send this mutation with these

00:07:45,599 --> 00:07:54,690
variables from my from my props so let's

00:07:51,060 --> 00:07:56,310
check out an app so I just have a couple

00:07:54,690 --> 00:07:58,380
of simple things I want to show you

00:07:56,310 --> 00:07:59,759
about this application I'm not going to

00:07:58,380 --> 00:08:00,900
try to do any live coding that didn't

00:07:59,759 --> 00:08:04,320
really work out too well last time I

00:08:00,900 --> 00:08:05,849
tried to do it but this is uh this is

00:08:04,320 --> 00:08:07,409
the app that we're calling get hunt I

00:08:05,849 --> 00:08:12,960
guess I should show you the app first I

00:08:07,409 --> 00:08:14,909
would probably be beneficial so you can

00:08:12,960 --> 00:08:17,490
actually go to it yourself and go to get

00:08:14,909 --> 00:08:19,500
hunt calm and well this is kind of like

00:08:17,490 --> 00:08:20,789
product hunt for github we chose this

00:08:19,500 --> 00:08:22,560
particular example because it's both

00:08:20,789 --> 00:08:24,389
loading data from a local sequel

00:08:22,560 --> 00:08:26,099
database and also from the github API

00:08:24,389 --> 00:08:28,469
which demonstrates graph kills ability

00:08:26,099 --> 00:08:29,819
to paper over multiple data sources so

00:08:28,469 --> 00:08:30,900
let me just show you a couple of the

00:08:29,819 --> 00:08:33,719
things that we already kind of talked

00:08:30,900 --> 00:08:36,000
about one is the ability to load a query

00:08:33,719 --> 00:08:38,520
so you can see here we have this feed

00:08:36,000 --> 00:08:40,620
query and that has the stuff that we

00:08:38,520 --> 00:08:45,240
wanted I actually was editing it earlier

00:08:40,620 --> 00:08:46,470
so let me unedited and let's say we want

00:08:45,240 --> 00:08:48,510
to demonstrate one of these features so

00:08:46,470 --> 00:08:53,370
let's say we want it for example at a

00:08:48,510 --> 00:08:55,440
pol interval we fetch it every second I

00:08:53,370 --> 00:08:58,530
said I wouldn't do any live coding but

00:08:55,440 --> 00:09:01,650
sorry so we're going to NPM start this

00:08:58,530 --> 00:09:04,170
and so now since we just added some

00:09:01,650 --> 00:09:07,620
really simple polling what we can do is

00:09:04,170 --> 00:09:09,750
we can take this app you know we can run

00:09:07,620 --> 00:09:14,670
it in multiple tabs which is what you

00:09:09,750 --> 00:09:18,690
would expect and then and then it

00:09:14,670 --> 00:09:20,460
doesn't work oh oh I know I know it's

00:09:18,690 --> 00:09:26,160
because I don't have my github API key

00:09:20,460 --> 00:09:26,970
so don't look at that because we're

00:09:26,160 --> 00:09:29,010
loading data from the github API

00:09:26,970 --> 00:09:37,650
obviously we can't run without it so as

00:09:29,010 --> 00:09:39,540
you can see here if I log in that's what

00:09:37,650 --> 00:09:42,420
I get for trying to lab code anyway

00:09:39,540 --> 00:09:44,130
moving on you can try it out in the

00:09:42,420 --> 00:09:46,230
deployed version basically if you upvote

00:09:44,130 --> 00:09:47,550
in one tab you'll see the upload appear

00:09:46,230 --> 00:09:49,920
in the other tab if the query is polling

00:09:47,550 --> 00:09:52,320
so that's how you get data with a query

00:09:49,920 --> 00:09:54,330
there's also a place where you want to

00:09:52,320 --> 00:09:57,480
be able to up vote which is a mutation

00:09:54,330 --> 00:09:58,890
so let's find the vote mutation yeah so

00:09:57,480 --> 00:10:02,520
here you can see a mutation this is the

00:09:58,890 --> 00:10:06,120
thing that drives the ability to up put

00:10:02,520 --> 00:10:07,500
one of the news feed items yeah and

00:10:06,120 --> 00:10:08,760
that's that's pretty much about it

00:10:07,500 --> 00:10:12,270
that's all I needed to build this app

00:10:08,760 --> 00:10:15,900
that lets you both submit items so vote

00:10:12,270 --> 00:10:17,460
on them and check it out so if you just

00:10:15,900 --> 00:10:22,940
go here and you start uploading you can

00:10:17,460 --> 00:10:24,960
see what other people have been doing so

00:10:22,940 --> 00:10:27,090
yeah so you can also run this app

00:10:24,960 --> 00:10:30,930
locally if you clone it from github at

00:10:27,090 --> 00:10:32,370
our repository and I just want to go

00:10:30,930 --> 00:10:33,540
over a few of the metal goat medicals we

00:10:32,370 --> 00:10:34,740
have for Apollo client because I think

00:10:33,540 --> 00:10:36,960
this could be really be a cool project

00:10:34,740 --> 00:10:38,339
so number one thing is being totally

00:10:36,960 --> 00:10:40,350
community driven what we want to do is

00:10:38,339 --> 00:10:41,910
we want to build the best tool for the

00:10:40,350 --> 00:10:43,230
widest range of people to just fetch

00:10:41,910 --> 00:10:45,540
data in their app the way they want it

00:10:43,230 --> 00:10:49,020
to be so I welcome you all to come

00:10:45,540 --> 00:10:49,890
submit issues and feature requests I can

00:10:49,020 --> 00:10:51,450
help you find different ways to

00:10:49,890 --> 00:10:53,430
contribute small pull requests that you

00:10:51,450 --> 00:10:54,660
can do to get the stuff going you want

00:10:53,430 --> 00:10:56,940
to be as modular and transparent as

00:10:54,660 --> 00:10:58,800
possible so like I said with the Redux

00:10:56,940 --> 00:11:00,150
dev tools before we want to make it easy

00:10:58,800 --> 00:11:01,589
to understand exactly what your app is

00:11:00,150 --> 00:11:03,089
doing and not have that happen out from

00:11:01,589 --> 00:11:04,950
under you you want to make it

00:11:03,089 --> 00:11:06,300
incremental and compatible so we're

00:11:04,950 --> 00:11:07,620
starting with react and angular

00:11:06,300 --> 00:11:09,059
integration but we want to have as many

00:11:07,620 --> 00:11:10,319
integrations as possible from as

00:11:09,059 --> 00:11:13,319
many different people as possible with

00:11:10,319 --> 00:11:14,519
any view layer or technology as well as

00:11:13,319 --> 00:11:16,169
being compatible with any graph QL

00:11:14,519 --> 00:11:18,389
server you can find that spec compliant

00:11:16,169 --> 00:11:19,469
and finally we want to be production

00:11:18,389 --> 00:11:21,389
tested which is why we've started

00:11:19,469 --> 00:11:22,949
integrating into our own production apps

00:11:21,389 --> 00:11:27,239
starting about a week ago and hopefully

00:11:22,949 --> 00:11:28,679
be deployed a week from now so yeah that

00:11:27,239 --> 00:11:30,209
was Apollo client it's pretty simple not

00:11:28,679 --> 00:11:31,709
too many bills and Wilson's about it but

00:11:30,209 --> 00:11:34,949
it'll get the data from your graph kill

00:11:31,709 --> 00:11:44,429
server interior UI so come check it out

00:11:34,949 --> 00:11:49,189
and come contribute alright questions

00:11:44,429 --> 00:11:49,189
from the audience I read one right here

00:11:54,739 --> 00:11:59,249
so the question was how closely

00:11:57,209 --> 00:12:01,589
integrated are the parts of Apollo

00:11:59,249 --> 00:12:04,079
client so for example if he didn't want

00:12:01,589 --> 00:12:06,899
to use Redux would that be possible

00:12:04,079 --> 00:12:09,149
yeah so it's one of those things where

00:12:06,899 --> 00:12:10,889
it's modular on the inside right now you

00:12:09,149 --> 00:12:12,569
would probably have a hard time NPM

00:12:10,889 --> 00:12:14,399
installing Apollo client and using it

00:12:12,569 --> 00:12:15,809
without Redux but actually we were just

00:12:14,399 --> 00:12:16,829
earlier having conversation on github

00:12:15,809 --> 00:12:19,709
with some people who want to implement

00:12:16,829 --> 00:12:20,999
alternative graph QL clients but we used

00:12:19,709 --> 00:12:22,499
some of the internal machinery machinery

00:12:20,999 --> 00:12:24,539
about normalizing and denormalizing

00:12:22,499 --> 00:12:25,619
graph QL data for example one thing you

00:12:24,539 --> 00:12:28,169
could do that would be really exciting

00:12:25,619 --> 00:12:30,209
is just use Apollo clients normalization

00:12:28,169 --> 00:12:32,549
functionality to read and write from

00:12:30,209 --> 00:12:34,289
just plain objects so you could populate

00:12:32,549 --> 00:12:35,699
your store or your object however you

00:12:34,289 --> 00:12:38,459
want and then just use a graphical query

00:12:35,699 --> 00:12:39,749
and your UI to read that out and one

00:12:38,459 --> 00:12:41,939
more thing I want to mention about Redux

00:12:39,749 --> 00:12:43,079
is I was talking about it here because I

00:12:41,939 --> 00:12:44,699
think it's a really important part of

00:12:43,079 --> 00:12:46,919
the implementation but you really don't

00:12:44,699 --> 00:12:50,069
have to know how it works we also have

00:12:46,919 --> 00:12:52,829
implemented a integration on the output

00:12:50,069 --> 00:12:55,289
end with rxjs so you can do a query with

00:12:52,829 --> 00:12:56,549
apollo that returns an observable that's

00:12:55,289 --> 00:12:57,899
actually how the react integration works

00:12:56,549 --> 00:12:59,849
is uses the observable that's how the

00:12:57,899 --> 00:13:02,309
angular integration works so yeah you

00:12:59,849 --> 00:13:04,829
npm install' Apollo client do client

00:13:02,309 --> 00:13:07,859
watch query get an observable and use it

00:13:04,829 --> 00:13:10,609
with whatever you want ok we had another

00:13:07,859 --> 00:13:10,609
question back there

00:13:14,770 --> 00:13:20,060
so the question was the papering over

00:13:18,290 --> 00:13:23,690
the github API does that happen

00:13:20,060 --> 00:13:25,610
client-side or server-side it happens on

00:13:23,690 --> 00:13:28,100
the server side and there's a couple of

00:13:25,610 --> 00:13:29,570
really great reasons why and this code

00:13:28,100 --> 00:13:31,820
is maybe not the the best code that you

00:13:29,570 --> 00:13:36,380
would want ever but there's one really

00:13:31,820 --> 00:13:38,120
interesting feature of github that has

00:13:36,380 --> 00:13:39,920
to do with etags and caching so the

00:13:38,120 --> 00:13:42,830
github API only gives you five thousand

00:13:39,920 --> 00:13:43,850
requests per hour unless I assume you do

00:13:42,830 --> 00:13:46,550
something that cause them to give you

00:13:43,850 --> 00:13:48,080
more but we figured maybe more than five

00:13:46,550 --> 00:13:49,940
thousand people would want to use this

00:13:48,080 --> 00:13:53,060
app in an hour or maybe look at five

00:13:49,940 --> 00:13:54,260
thousand repositories and so there's

00:13:53,060 --> 00:13:56,930
this great feature which says if you

00:13:54,260 --> 00:13:58,160
fetch an item before you can send them

00:13:56,930 --> 00:14:00,140
the e tag which is basically like a

00:13:58,160 --> 00:14:02,330
cache key and it doesn't count against

00:14:00,140 --> 00:14:03,680
your rate limit the next time and so

00:14:02,330 --> 00:14:05,930
this is kind of a feature that you want

00:14:03,680 --> 00:14:07,760
when you're accessing the REST API and

00:14:05,930 --> 00:14:09,710
what we've done here we've implemented

00:14:07,760 --> 00:14:11,090
something that we call a connector and a

00:14:09,710 --> 00:14:13,730
connector is something that you call

00:14:11,090 --> 00:14:16,310
from inside your resolvers so you just

00:14:13,730 --> 00:14:17,900
do github get me this API URL and it

00:14:16,310 --> 00:14:19,580
does the caching for you transparently

00:14:17,900 --> 00:14:21,080
so no matter how many graphical requests

00:14:19,580 --> 00:14:22,490
you're doing how many different fields

00:14:21,080 --> 00:14:23,690
are accessing it's always calling this

00:14:22,490 --> 00:14:26,060
connector and doing that caching

00:14:23,690 --> 00:14:27,680
globally so if you were calling your get

00:14:26,060 --> 00:14:29,000
up API from the client you wouldn't even

00:14:27,680 --> 00:14:30,950
be able to do this and I think one of

00:14:29,000 --> 00:14:32,060
the biggest benefits of graph QL is the

00:14:30,950 --> 00:14:34,520
fact that the client doesn't have to be

00:14:32,060 --> 00:14:36,200
aware of specifics of the API or even

00:14:34,520 --> 00:14:38,240
what different api's are involved in

00:14:36,200 --> 00:14:40,850
fetching a certain query so I think a

00:14:38,240 --> 00:14:42,260
while it is possible to resolve graph

00:14:40,850 --> 00:14:44,120
kill-crazy entirely on the client by

00:14:42,260 --> 00:14:45,080
calling the API directly I think I

00:14:44,120 --> 00:14:48,440
wouldn't want to do that in my

00:14:45,080 --> 00:14:50,710
Production apps we have another question

00:14:48,440 --> 00:14:50,710
over there

00:14:53,010 --> 00:14:58,480
so the question was how do you do

00:14:55,930 --> 00:15:03,220
pagination without something like relay

00:14:58,480 --> 00:15:05,380
connections yeah so I guess one way to

00:15:03,220 --> 00:15:07,960
interpret this question is this app has

00:15:05,380 --> 00:15:09,760
pages so you can click next page and you

00:15:07,960 --> 00:15:12,070
go to another page but that's not really

00:15:09,760 --> 00:15:13,660
what the question is about because while

00:15:12,070 --> 00:15:15,250
this is indeed pagination it's the

00:15:13,660 --> 00:15:17,350
ability to look at different pages of a

00:15:15,250 --> 00:15:21,400
set of data really does something with

00:15:17,350 --> 00:15:24,250
cursors which is essentially allowing

00:15:21,400 --> 00:15:26,290
you to fetch a certain segment of

00:15:24,250 --> 00:15:27,790
something like a news feed and then tell

00:15:26,290 --> 00:15:28,990
relay to fetch more time or items of

00:15:27,790 --> 00:15:30,490
that news feed and it remembers which

00:15:28,990 --> 00:15:33,060
ones it's already fetched and only

00:15:30,490 --> 00:15:36,190
fetches the ones that are new and relay

00:15:33,060 --> 00:15:37,930
implements this via a specific API

00:15:36,190 --> 00:15:39,820
interface on the graphical server called

00:15:37,930 --> 00:15:40,150
the relay connection I think is what

00:15:39,820 --> 00:15:43,510
it's called

00:15:40,150 --> 00:15:45,340
but basically that has certain fields

00:15:43,510 --> 00:15:46,990
that give it various cursors the ability

00:15:45,340 --> 00:15:49,210
to get the next item the previous item

00:15:46,990 --> 00:15:50,920
the list in Apollo client one of our

00:15:49,210 --> 00:15:52,540
main goals is to not impose that

00:15:50,920 --> 00:15:54,130
restriction so we want to work like I

00:15:52,540 --> 00:15:55,480
said with any possible graph Kilis or

00:15:54,130 --> 00:15:58,480
you can come up with so our idea

00:15:55,480 --> 00:15:59,890
currently is to have pagination plugins

00:15:58,480 --> 00:16:01,330
so remember when I told you about the

00:15:59,890 --> 00:16:03,550
phase where you manipulate the query

00:16:01,330 --> 00:16:04,900
before sending it to the client we want

00:16:03,550 --> 00:16:06,970
to do is have the ability for people to

00:16:04,900 --> 00:16:08,860
ship different versions of pagination

00:16:06,970 --> 00:16:10,630
that can be applied almost as middleware

00:16:08,860 --> 00:16:12,220
on the client on the query and so you

00:16:10,630 --> 00:16:13,720
can have something that for example

00:16:12,220 --> 00:16:15,520
using a skip and limit which is the most

00:16:13,720 --> 00:16:17,800
basic form of pagination or maybe just

00:16:15,520 --> 00:16:19,390
page numbers you can implement any

00:16:17,800 --> 00:16:21,280
custom logic you want to look into the

00:16:19,390 --> 00:16:22,810
store and see what pages you have

00:16:21,280 --> 00:16:24,670
already and manipulate the query in

00:16:22,810 --> 00:16:27,430
whatever way you want so I think rather

00:16:24,670 --> 00:16:28,720
than implementing a spec that has a

00:16:27,430 --> 00:16:30,610
generalized version I think I want

00:16:28,720 --> 00:16:32,770
people to be able to write any graphical

00:16:30,610 --> 00:16:34,240
server they feel like and then modify

00:16:32,770 --> 00:16:36,670
Apollo client and the way they need to

00:16:34,240 --> 00:16:37,630
make it work with that schema I don't

00:16:36,670 --> 00:16:41,670
know if that answer your question okay

00:16:37,630 --> 00:16:41,670
we have time over one more question

00:16:49,680 --> 00:16:55,690
so the question was have you considered

00:16:52,449 --> 00:16:57,279
using something like immutable js4 the

00:16:55,690 --> 00:17:00,759
do you normalized cash on the front end

00:16:57,279 --> 00:17:02,380
ah Lee's right here it's so excited the

00:17:00,759 --> 00:17:04,900
creator of immutable Jeremy teen um

00:17:02,380 --> 00:17:06,939
anyway uh we have an open issue that's

00:17:04,900 --> 00:17:08,679
like at some point refactored using

00:17:06,939 --> 00:17:10,419
mutable J s so it's one of the things

00:17:08,679 --> 00:17:13,000
that you could come and help us

00:17:10,419 --> 00:17:15,699
contribute so I see a couple of benefits

00:17:13,000 --> 00:17:17,470
from using mutable J s so first we're

00:17:15,699 --> 00:17:19,569
doing the kind of regular issue Redux

00:17:17,470 --> 00:17:21,040
pattern right now which says you want to

00:17:19,569 --> 00:17:22,540
be able to compare objects using triple

00:17:21,040 --> 00:17:23,910
equals to check when they haven't

00:17:22,540 --> 00:17:26,860
changed and that's one thing we do

00:17:23,910 --> 00:17:29,530
already to avoid firing query

00:17:26,860 --> 00:17:31,000
modifications when we don't need to but

00:17:29,530 --> 00:17:32,500
that requires us to clone objects all

00:17:31,000 --> 00:17:34,660
the time and I think immutable J s is

00:17:32,500 --> 00:17:36,520
perfectly designed to avoid cloning

00:17:34,660 --> 00:17:38,830
objects all the time to get a similar

00:17:36,520 --> 00:17:42,220
effect and there's also question there

00:17:38,830 --> 00:17:43,540
about about garbage collection I think

00:17:42,220 --> 00:17:45,429
garbage collection needs to be a little

00:17:43,540 --> 00:17:48,100
bit more semantics with how the actual

00:17:45,429 --> 00:17:49,510
store is what kinds of queries are being

00:17:48,100 --> 00:17:52,540
watched and when you might want to load

00:17:49,510 --> 00:17:53,799
and unload those queries so I imagine

00:17:52,540 --> 00:17:55,860
the immutable J's will make our

00:17:53,799 --> 00:17:57,730
development workflow much easier and

00:17:55,860 --> 00:17:59,559
perhaps give us some performance

00:17:57,730 --> 00:18:01,929
benefits in certain cases but I don't I

00:17:59,559 --> 00:18:03,669
don't see it yet happy helping us with

00:18:01,929 --> 00:18:05,530
garbage collection right now by the way

00:18:03,669 --> 00:18:07,990
the store grows monotonically forever

00:18:05,530 --> 00:18:09,669
which it turns out is fine for most apps

00:18:07,990 --> 00:18:11,350
actually it only grows if you fetch new

00:18:09,669 --> 00:18:13,240
data if you prefetch the same data it

00:18:11,350 --> 00:18:14,970
just replaces it okay

00:18:13,240 --> 00:18:18,059
let's thank sashko again first talk

00:18:14,970 --> 00:18:18,059
thank you

00:18:18,470 --> 00:18:20,530

YouTube URL: https://www.youtube.com/watch?v=u1E0CbGeICo


