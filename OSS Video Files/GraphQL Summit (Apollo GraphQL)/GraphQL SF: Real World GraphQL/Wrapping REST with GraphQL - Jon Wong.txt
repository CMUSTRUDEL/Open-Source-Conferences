Title: Wrapping REST with GraphQL - Jon Wong
Publication date: 2018-02-21
Playlist: GraphQL SF: Real World GraphQL
Description: 
	At GraphQL SF 2/15/18, Jon Wong from Coursera speaks about wrapping REST with GraphQL.

Follow us on Twitter to get notified about future meetups: https://twitter.com/apollographql

ðŸ‘‰Full Description

In this day and age, dealing with REST endpoints is a requirement â€” but don't let that stop you from using GraphQL!

Learn how the Coursera engineering team took advantage of REST to build out their GraphQL servers, some of the strategies we learned along the way, and hear about some of the tools, libraries, and workflows that make layering GraphQL on top of your REST APIs a breeze.

ðŸ‘‰Slides

https://docs.google.com/presentation/d/e/2PACX-1vRoW7FdRjxJ8wVKCK1NTkdmsSIemGRbUgz7YjR8dYSEC2MeZFK2UyjDC8j48P-ra8v8efj-rpbXVAw3/pub?start=false&loop=false&delayms=3000

ðŸ‘‰Interested in Speaking?

We'd love to hear from you! Please message https://twitter.com/evanshauser
Captions: 
	00:00:02,800 --> 00:00:06,970
so today I'm going to talk to you about

00:00:04,450 --> 00:00:09,700
rapping rest with graph QL it's probably

00:00:06,970 --> 00:00:11,530
a thing that you deal with who here uses

00:00:09,700 --> 00:00:13,840
a REST API on a day to day basis

00:00:11,530 --> 00:00:15,070
raise your hands there's some people who

00:00:13,840 --> 00:00:17,830
don't raise their hands it's kind of

00:00:15,070 --> 00:00:19,450
strange to me but that's okay I rest I'm

00:00:17,830 --> 00:00:20,830
gonna kind of skip over the definition

00:00:19,450 --> 00:00:23,140
of some of these things rest is going to

00:00:20,830 --> 00:00:24,940
be your high level like you have a

00:00:23,140 --> 00:00:26,890
resource URL and you have an ID

00:00:24,940 --> 00:00:28,480
afterwards there's like a whole there's

00:00:26,890 --> 00:00:30,580
different specs and schemas around it

00:00:28,480 --> 00:00:32,230
not everyone follows it fully but

00:00:30,580 --> 00:00:33,489
generally this is the thing that you get

00:00:32,230 --> 00:00:35,140
whenever you ask someone for an API

00:00:33,489 --> 00:00:37,150
they're gonna give you a REST API

00:00:35,140 --> 00:00:39,190
hopefully that's graph QL at some point

00:00:37,150 --> 00:00:41,380
but that's not today you're gonna have

00:00:39,190 --> 00:00:43,300
to deal with the rest I guarantee you a

00:00:41,380 --> 00:00:46,780
little bit about myself my name is John

00:00:43,300 --> 00:00:49,239
I work as Evans mentioned at Coursera

00:00:46,780 --> 00:00:49,600
it's an education company and check it

00:00:49,239 --> 00:00:52,300
out

00:00:49,600 --> 00:00:54,070
I'm sure you can figure it out I work on

00:00:52,300 --> 00:00:55,960
the front end infrastructure team where

00:00:54,070 --> 00:00:57,790
we deal a lot with the workflows

00:00:55,960 --> 00:00:59,860
processes tools libraries all the things

00:00:57,790 --> 00:01:02,020
that our front-end developers do you do

00:00:59,860 --> 00:01:04,509
in use to to build great products at

00:01:02,020 --> 00:01:06,189
Coursera and at Coursera we've been

00:01:04,509 --> 00:01:09,399
using graph QL for about a year and a

00:01:06,189 --> 00:01:12,189
half now for a little bit more context a

00:01:09,399 --> 00:01:16,359
lot of Coursera you know actually all of

00:01:12,189 --> 00:01:19,329
Coursera is powered by REST API s and we

00:01:16,359 --> 00:01:20,950
wanted to a year and a half ago try and

00:01:19,329 --> 00:01:23,469
figure out what was the best way to get

00:01:20,950 --> 00:01:24,520
from rest to graph QL so a lot of the

00:01:23,469 --> 00:01:26,740
things that you're going to be hearing

00:01:24,520 --> 00:01:28,479
here are strategies things that we've

00:01:26,740 --> 00:01:31,329
learned in that process of getting to

00:01:28,479 --> 00:01:33,219
graph QL as well as reflections because

00:01:31,329 --> 00:01:34,630
that happened a year and a half ago so

00:01:33,219 --> 00:01:35,979
what are the things that we've learned

00:01:34,630 --> 00:01:37,599
since then what are the strategies that

00:01:35,979 --> 00:01:39,549
I might use today if I had to redo the

00:01:37,599 --> 00:01:41,289
same thing over again and hopefully that

00:01:39,549 --> 00:01:42,819
you can use these strategies as you are

00:01:41,289 --> 00:01:44,590
trying to migrate to graph kill

00:01:42,819 --> 00:01:46,409
hopefully at your company or

00:01:44,590 --> 00:01:49,779
organization or your project or whatever

00:01:46,409 --> 00:01:52,630
so who is this talk for this talk is for

00:01:49,779 --> 00:01:55,179
people who know what graph QL is people

00:01:52,630 --> 00:01:57,819
who obviously know arrests is people who

00:01:55,179 --> 00:01:58,899
want to get too graphic UL and trying to

00:01:57,819 --> 00:01:59,619
figure out how are they going to deal

00:01:58,899 --> 00:02:03,549
with all of this

00:01:59,619 --> 00:02:05,560
incumbent rest things and again I'm

00:02:03,549 --> 00:02:08,530
gonna skip over the basics of graph QL

00:02:05,560 --> 00:02:10,060
here this should be for people were kind

00:02:08,530 --> 00:02:14,200
of like in the process of doing these

00:02:10,060 --> 00:02:16,569
sorts of things so at a high level I'm

00:02:14,200 --> 00:02:19,390
going to cover a few different section

00:02:16,569 --> 00:02:22,120
the first is strategies for actually

00:02:19,390 --> 00:02:23,980
proving that you need and/or he should

00:02:22,120 --> 00:02:25,390
have graph QL this is really important

00:02:23,980 --> 00:02:27,189
if you can't convince anyone at your

00:02:25,390 --> 00:02:29,859
organization that you need graph ul or

00:02:27,189 --> 00:02:31,390
use graph QL the rest of it is slightly

00:02:29,859 --> 00:02:34,000
a moot point it's gonna be hard to do if

00:02:31,390 --> 00:02:36,730
you don't have any buy-in the second is

00:02:34,000 --> 00:02:39,760
schema fine your rest api's if you've

00:02:36,730 --> 00:02:41,439
seen any rest api recently there is no

00:02:39,760 --> 00:02:42,939
documentation built in it can kind of

00:02:41,439 --> 00:02:44,980
just return whatever it thinks that it

00:02:42,939 --> 00:02:47,680
should return it might not be well

00:02:44,980 --> 00:02:49,480
documented and if it's documented it

00:02:47,680 --> 00:02:50,200
might be in a like a markdown document

00:02:49,480 --> 00:02:53,530
or something like that

00:02:50,200 --> 00:02:56,560
you're gonna need schemas the third is

00:02:53,530 --> 00:02:58,510
being a good tenant so if you are trying

00:02:56,560 --> 00:03:00,519
to build graph QL on top of these rest

00:02:58,510 --> 00:03:02,560
services someone else owns those rest

00:03:00,519 --> 00:03:03,939
services they're going to complain if

00:03:02,560 --> 00:03:05,169
you do weird things and if they complain

00:03:03,939 --> 00:03:07,659
then maybe you don't get to use graph QL

00:03:05,169 --> 00:03:09,639
so finding ways to make sure that you

00:03:07,659 --> 00:03:11,620
are a good tenant when using graph QL as

00:03:09,639 --> 00:03:13,510
well as the last piece pulling it all

00:03:11,620 --> 00:03:15,280
together and creating and hosting that

00:03:13,510 --> 00:03:17,919
graph QL layer that you can use for all

00:03:15,280 --> 00:03:20,230
of your client development needs so

00:03:17,919 --> 00:03:22,510
first let's talk about proving out graph

00:03:20,230 --> 00:03:23,829
KO let's actually figure out if graph

00:03:22,510 --> 00:03:26,379
kill is the thing that you need and this

00:03:23,829 --> 00:03:28,659
is an important decision to make at for

00:03:26,379 --> 00:03:30,609
any technology whether it's react or

00:03:28,659 --> 00:03:32,290
graph yell or whatever it is always make

00:03:30,609 --> 00:03:33,879
sure that it actually solves a problem

00:03:32,290 --> 00:03:36,879
at your company not just some a shiny

00:03:33,879 --> 00:03:38,769
tool here's one way to do it one is that

00:03:36,879 --> 00:03:40,359
you don't even need to build a graph to

00:03:38,769 --> 00:03:42,220
a server to figure out if graph kill is

00:03:40,359 --> 00:03:43,479
the solution for some of your needs you

00:03:42,220 --> 00:03:45,280
can actually build all this in the

00:03:43,479 --> 00:03:47,139
browser it's all JavaScript you can

00:03:45,280 --> 00:03:49,659
import it into your like web pack thing

00:03:47,139 --> 00:03:51,940
this is a link to a great blog post on

00:03:49,659 --> 00:03:53,979
graph killer org about how to actually

00:03:51,940 --> 00:03:56,049
structure your first graph QL schema in

00:03:53,979 --> 00:03:57,190
your browser and it all it's going to do

00:03:56,049 --> 00:03:58,840
is you're just going to delegate rest

00:03:57,190 --> 00:04:00,849
requests or you know if you just mock

00:03:58,840 --> 00:04:02,290
some JSON there and that way you can see

00:04:00,849 --> 00:04:04,810
you know it's graph heal the thing that

00:04:02,290 --> 00:04:08,049
makes sense for my product in my and the

00:04:04,810 --> 00:04:09,609
things that I'm writing other other ways

00:04:08,049 --> 00:04:11,709
to do this so you might be able to

00:04:09,609 --> 00:04:14,349
prototype this using services like

00:04:11,709 --> 00:04:16,509
Amazon apps Inc and graph cool those are

00:04:14,349 --> 00:04:19,720
systems that have basically hosted graph

00:04:16,509 --> 00:04:21,820
QL servers so again trying this out

00:04:19,720 --> 00:04:24,159
trying out the whole system figuring out

00:04:21,820 --> 00:04:26,050
all the technical decisions first before

00:04:24,159 --> 00:04:28,419
actually diving into building your own

00:04:26,050 --> 00:04:29,770
graph QL server because building your

00:04:28,419 --> 00:04:31,360
own graph kills server comes with a

00:04:29,770 --> 00:04:33,960
a lot of other problems that you might

00:04:31,360 --> 00:04:35,830
you might not want to deal with just yet

00:04:33,960 --> 00:04:36,819
here's the second big thing that you're

00:04:35,830 --> 00:04:39,190
going to need you're gonna need to

00:04:36,819 --> 00:04:41,409
schema file your rest api's again this

00:04:39,190 --> 00:04:44,199
is important because graph QL itself is

00:04:41,409 --> 00:04:46,659
built on schemas you need to have some

00:04:44,199 --> 00:04:48,400
sort of a catalog of what your REST API

00:04:46,659 --> 00:04:50,650
is going to be able to provide in order

00:04:48,400 --> 00:04:55,030
to create the graph 12-part the graph QL

00:04:50,650 --> 00:04:57,479
API into that so the technical the sort

00:04:55,030 --> 00:05:00,550
of high-level decisions that we had to

00:04:57,479 --> 00:05:01,990
decide on - to figure out how we were

00:05:00,550 --> 00:05:04,479
going to generate our graphical schema

00:05:01,990 --> 00:05:05,530
came in three flavors one is should we

00:05:04,479 --> 00:05:07,840
write these by hand

00:05:05,530 --> 00:05:10,300
should we auto generate these or maybe

00:05:07,840 --> 00:05:12,130
should we do a mix of both and this is

00:05:10,300 --> 00:05:15,490
important again because you need a

00:05:12,130 --> 00:05:16,569
schema for your graph QL server so I'm

00:05:15,490 --> 00:05:18,699
going to go through some of the pros and

00:05:16,569 --> 00:05:21,250
cons for each of those different options

00:05:18,699 --> 00:05:22,930
that you had so the first is manually

00:05:21,250 --> 00:05:24,550
writing your graphical schema this

00:05:22,930 --> 00:05:26,830
sounds great this is gonna be in all of

00:05:24,550 --> 00:05:28,330
you tutorials and your Apollo launch pad

00:05:26,830 --> 00:05:30,699
you're going to be writing schema

00:05:28,330 --> 00:05:32,800
definition language that's your SDL and

00:05:30,699 --> 00:05:34,719
it's pretty simple you can see here it's

00:05:32,800 --> 00:05:37,240
a little washed out but you can see it's

00:05:34,719 --> 00:05:38,650
just here's a type pet it has a name it

00:05:37,240 --> 00:05:40,330
needs a string it's going to return you

00:05:38,650 --> 00:05:42,520
a string they're pretty straightforward

00:05:40,330 --> 00:05:43,750
to write and that's great you know I

00:05:42,520 --> 00:05:45,340
know there's a lot of schema Lang

00:05:43,750 --> 00:05:48,520
schemas out there that can be a little

00:05:45,340 --> 00:05:51,580
bit you know strange graphical is is

00:05:48,520 --> 00:05:53,110
really really easy to read the other

00:05:51,580 --> 00:05:54,759
thing that's beneficial here when you're

00:05:53,110 --> 00:05:57,009
creating your graphical schema your big

00:05:54,759 --> 00:05:59,199
ref qo schema when you're manually doing

00:05:57,009 --> 00:06:01,180
it you have a lot of flexibility so if

00:05:59,199 --> 00:06:03,759
this field was actually supposed to be a

00:06:01,180 --> 00:06:05,500
number instead of an ID or maybe this

00:06:03,759 --> 00:06:07,330
this number or was supposed to be a

00:06:05,500 --> 00:06:09,370
string or something like that you can

00:06:07,330 --> 00:06:11,919
you can make that change in the graph QL

00:06:09,370 --> 00:06:14,380
layer and not have to deal with what the

00:06:11,919 --> 00:06:16,719
actual underlying type was and it allows

00:06:14,380 --> 00:06:19,599
you allows you to really easily compose

00:06:16,719 --> 00:06:21,759
your different rest resources so as you

00:06:19,599 --> 00:06:23,380
translate more rest things into graph QL

00:06:21,759 --> 00:06:26,409
you'll be able to start linking them

00:06:23,380 --> 00:06:29,259
into a graph the cons from writing on

00:06:26,409 --> 00:06:30,849
manual graph QL schema this is going to

00:06:29,259 --> 00:06:32,349
get out of date really quickly you have

00:06:30,849 --> 00:06:34,240
one schema over here which is your graph

00:06:32,349 --> 00:06:36,699
QL schema and you have your rest api

00:06:34,240 --> 00:06:38,560
over here and they have no relation to

00:06:36,699 --> 00:06:40,599
each other someone wrote this at some

00:06:38,560 --> 00:06:42,639
point in time to match up to arrest the

00:06:40,599 --> 00:06:43,689
API over here but as your developers

00:06:42,639 --> 00:06:45,159
continue to write

00:06:43,689 --> 00:06:47,619
stay pee eyes it's gonna get out of date

00:06:45,159 --> 00:06:48,939
it's a problem it also means that you

00:06:47,619 --> 00:06:51,099
don't have a single source of truth if

00:06:48,939 --> 00:06:53,829
your REST API are not based on this

00:06:51,099 --> 00:06:55,509
schema at all then you don't know which

00:06:53,829 --> 00:06:58,389
one to go to if you have a question

00:06:55,509 --> 00:07:00,009
about what do these api's provide your

00:06:58,389 --> 00:07:01,719
graphical schema might have some stuff

00:07:00,009 --> 00:07:04,629
but it might be different than again the

00:07:01,719 --> 00:07:05,739
underlying rest api you could go to the

00:07:04,629 --> 00:07:07,149
other side of the spectrum and say you

00:07:05,739 --> 00:07:08,679
know we're gonna auto generate all of

00:07:07,149 --> 00:07:10,989
our schemas i'm not going to touch any

00:07:08,679 --> 00:07:12,729
of these things and this is great so if

00:07:10,989 --> 00:07:16,089
you have the ability to if you have a

00:07:12,729 --> 00:07:17,589
really really consistent rest api maybe

00:07:16,089 --> 00:07:20,139
you're using a framework may be using

00:07:17,589 --> 00:07:22,509
swagger slash open api i think that's

00:07:20,139 --> 00:07:25,839
the same same thing now you can actually

00:07:22,509 --> 00:07:29,439
reuse those same schemas to generate a

00:07:25,839 --> 00:07:31,809
graph QL schema at Coursera we have our

00:07:29,439 --> 00:07:33,729
own schema definitely definition

00:07:31,809 --> 00:07:35,529
language we call a courier and we use

00:07:33,729 --> 00:07:38,409
that schema language as our source of

00:07:35,529 --> 00:07:41,679
truth we use that to auto-generate our

00:07:38,409 --> 00:07:44,319
graph QL schema and that provides us the

00:07:41,679 --> 00:07:46,779
ability to support both rest and graph

00:07:44,319 --> 00:07:48,489
QL clients if your REST API over here

00:07:46,779 --> 00:07:49,869
supporting clients over here and you

00:07:48,489 --> 00:07:51,519
have a graphical thing that's based on

00:07:49,869 --> 00:07:53,139
the REST API then they're always going

00:07:51,519 --> 00:07:58,269
to be in sync and you can support both

00:07:53,139 --> 00:08:00,639
clients as necessary cons there's these

00:07:58,269 --> 00:08:02,469
are big cons one is that changing or

00:08:00,639 --> 00:08:05,229
modifying the types is actually really

00:08:02,469 --> 00:08:07,239
high friction so you can't just change a

00:08:05,229 --> 00:08:08,739
number to a string now you have to go

00:08:07,239 --> 00:08:09,789
all the way back to the source you have

00:08:08,739 --> 00:08:12,219
to go all the way you got to you got to

00:08:09,789 --> 00:08:14,229
work in Scala or your back-end language

00:08:12,219 --> 00:08:16,569
whatever it is you have to go and change

00:08:14,229 --> 00:08:18,009
that thing deploy some back-end services

00:08:16,569 --> 00:08:19,779
if your front-end developer like myself

00:08:18,009 --> 00:08:22,449
that's just that sounds like a lot of

00:08:19,779 --> 00:08:24,249
friction and on top of that your auto

00:08:22,449 --> 00:08:26,019
generation layer you know in this case

00:08:24,249 --> 00:08:28,239
we have a custom schema definitely

00:08:26,019 --> 00:08:31,329
definition language or even if it's

00:08:28,239 --> 00:08:32,740
swagger or any other API schema you have

00:08:31,329 --> 00:08:34,839
to have the auto generation layer

00:08:32,740 --> 00:08:37,389
understand how to translate that schema

00:08:34,839 --> 00:08:39,550
to graph you out so if graph you'll has

00:08:37,389 --> 00:08:40,899
a new operation or if this API has some

00:08:39,550 --> 00:08:43,180
new thing you're gonna have to deal with

00:08:40,899 --> 00:08:45,189
that process as well so there's still

00:08:43,180 --> 00:08:46,959
some stuff lost in translation between

00:08:45,189 --> 00:08:48,579
your base schema that you're

00:08:46,959 --> 00:08:52,959
auto-generating your schema from your

00:08:48,579 --> 00:08:55,689
graph QL schema from the third option is

00:08:52,959 --> 00:08:58,270
of course a combination of both you get

00:08:55,689 --> 00:09:01,720
all the strengths and none of the weak

00:08:58,270 --> 00:09:02,950
so the pros one is and that might not

00:09:01,720 --> 00:09:03,730
actually be true but let's yeah let's

00:09:02,950 --> 00:09:06,160
just go with it

00:09:03,730 --> 00:09:08,740
um so the first thing is you don't have

00:09:06,160 --> 00:09:11,470
to manually translate all of your atomic

00:09:08,740 --> 00:09:13,990
rest resources and what I mean is at

00:09:11,470 --> 00:09:17,160
Coursera we have 600 to 800 different

00:09:13,990 --> 00:09:19,990
rest resources manually trying to create

00:09:17,160 --> 00:09:22,000
you've representations of that in

00:09:19,990 --> 00:09:25,029
graphical sounds like a really really

00:09:22,000 --> 00:09:26,650
boring task if we have the auto

00:09:25,029 --> 00:09:29,020
generation layer that knows how to

00:09:26,650 --> 00:09:31,750
translate one rest resource to graph QL

00:09:29,020 --> 00:09:33,480
let's just run that 600 times let's let

00:09:31,750 --> 00:09:35,860
the computers do our hard work for us

00:09:33,480 --> 00:09:38,020
but because we're combining both the

00:09:35,860 --> 00:09:41,170
auto-generated stuff with the manual

00:09:38,020 --> 00:09:43,080
stuff we can also extend those types as

00:09:41,170 --> 00:09:45,940
needed or we can compose different

00:09:43,080 --> 00:09:47,500
resources together which ultimately your

00:09:45,940 --> 00:09:49,770
clients are just composing those rest

00:09:47,500 --> 00:09:53,500
resources themselves for their products

00:09:49,770 --> 00:09:56,170
the cons your source of truth now isn't

00:09:53,500 --> 00:09:59,170
your basic back-end API it's graph 2

00:09:56,170 --> 00:10:02,140
well that's not the hugest con that

00:09:59,170 --> 00:10:03,910
might be ok but for some people this

00:10:02,140 --> 00:10:05,620
might this might be a deal breaker and

00:10:03,910 --> 00:10:07,270
so you have to think about this as

00:10:05,620 --> 00:10:09,610
you're trying to figure out how am I

00:10:07,270 --> 00:10:13,990
going to get to graph QL from all of

00:10:09,610 --> 00:10:15,610
these resting another question that

00:10:13,990 --> 00:10:17,650
you're going to have to ask yourself as

00:10:15,610 --> 00:10:19,750
you're translating your REST API is over

00:10:17,650 --> 00:10:22,870
into graph QL is how you're gonna

00:10:19,750 --> 00:10:25,060
actually expose those api's within graph

00:10:22,870 --> 00:10:26,770
QL and there's a few different options

00:10:25,060 --> 00:10:28,420
I'm not gonna go through the pros and

00:10:26,770 --> 00:10:29,800
cons of both but I'm gonna cover the two

00:10:28,420 --> 00:10:31,780
the two things that we kind of

00:10:29,800 --> 00:10:33,220
deliberated between and that and and

00:10:31,780 --> 00:10:36,280
well I guess I am going through the pros

00:10:33,220 --> 00:10:38,589
and cons some of the benefits of both so

00:10:36,280 --> 00:10:41,080
if you see here in this query in the top

00:10:38,589 --> 00:10:43,930
we see this pets v1 resource and then I

00:10:41,080 --> 00:10:46,660
find by name filter that gets you a pet

00:10:43,930 --> 00:10:48,880
by a name and then the other option

00:10:46,660 --> 00:10:50,890
which is your your more prototypical

00:10:48,880 --> 00:10:55,720
graph QL example which is fine pet by

00:10:50,890 --> 00:10:58,930
name and in the first case this name

00:10:55,720 --> 00:11:01,839
spacing fields in graph QL based on

00:10:58,930 --> 00:11:04,240
their their rest resource is a lot more

00:11:01,839 --> 00:11:06,130
restful it feels like you know you're

00:11:04,240 --> 00:11:09,250
gonna have sections of namespaces each

00:11:06,130 --> 00:11:10,670
corresponding to each API and this is

00:11:09,250 --> 00:11:12,920
good I mean this is a

00:11:10,670 --> 00:11:15,110
very easy way for any developer that

00:11:12,920 --> 00:11:17,240
uses rest to be able to use graph QL

00:11:15,110 --> 00:11:18,740
out-of-the-box because it looks just

00:11:17,240 --> 00:11:21,140
like the rest API is that they were

00:11:18,740 --> 00:11:23,060
using and on top of that if you need to

00:11:21,140 --> 00:11:25,190
be able to filter by a particular type

00:11:23,060 --> 00:11:27,560
or if you need some fields on this

00:11:25,190 --> 00:11:28,520
resource it's very easy to find where

00:11:27,560 --> 00:11:30,050
they are when you're looking through

00:11:28,520 --> 00:11:31,670
graphical and you have all these types

00:11:30,050 --> 00:11:33,740
it's very easy to find because it's all

00:11:31,670 --> 00:11:35,480
in the same section they're all named

00:11:33,740 --> 00:11:40,040
spaced by the the rest resource that

00:11:35,480 --> 00:11:42,710
they have the other option is to do it

00:11:40,040 --> 00:11:45,680
around use cases and this is kind of

00:11:42,710 --> 00:11:47,930
more graph QL like in that you describe

00:11:45,680 --> 00:11:50,120
maybe a page or maybe you describe an

00:11:47,930 --> 00:11:53,090
exact here are the things that I'm going

00:11:50,120 --> 00:11:55,100
to need for one exact use case and list

00:11:53,090 --> 00:11:59,390
them out here and in this case we're

00:11:55,100 --> 00:12:02,450
gonna find a pet by a name the this this

00:11:59,390 --> 00:12:06,110
feels better but for someone coming from

00:12:02,450 --> 00:12:08,330
rest it what we found is that if we went

00:12:06,110 --> 00:12:10,790
with this route we would see a ton of

00:12:08,330 --> 00:12:13,910
pollution in this global namespace now

00:12:10,790 --> 00:12:16,040
that now there's 800 different things if

00:12:13,910 --> 00:12:17,600
we have multiple resources that are

00:12:16,040 --> 00:12:19,370
named different courses it could be a

00:12:17,600 --> 00:12:21,170
fine course by name we don't know which

00:12:19,370 --> 00:12:23,600
course is that what is what what that's

00:12:21,170 --> 00:12:26,870
actually gonna mean so there's again

00:12:23,600 --> 00:12:29,570
there's benefits and drawbacks to both

00:12:26,870 --> 00:12:32,630
whether you go with the restful sort of

00:12:29,570 --> 00:12:34,970
namespacing route or the use-case route

00:12:32,630 --> 00:12:36,470
I'm sorry I don't have a silver bullet

00:12:34,970 --> 00:12:39,050
for you here you just have to figure it

00:12:36,470 --> 00:12:40,670
out and just stick with it don't do both

00:12:39,050 --> 00:12:42,980
but doing both

00:12:40,670 --> 00:12:46,190
it might help but you just be cognizant

00:12:42,980 --> 00:12:48,680
that it's gonna get messy and just like

00:12:46,190 --> 00:12:50,330
rest its gonna its graphical is not

00:12:48,680 --> 00:12:52,610
going to fix that problem for you it's

00:12:50,330 --> 00:12:53,990
still going to be messy so just find a

00:12:52,610 --> 00:12:56,030
decision that you you're comfortable

00:12:53,990 --> 00:12:58,520
with some rules that determine how you

00:12:56,030 --> 00:13:00,860
deal with restful resources versus your

00:12:58,520 --> 00:13:04,640
use case resources and just stick with

00:13:00,860 --> 00:13:06,830
it so I'm going to cover a little bit

00:13:04,640 --> 00:13:09,230
about managing your API request volume

00:13:06,830 --> 00:13:10,670
and this is going to be pretty relevant

00:13:09,230 --> 00:13:13,340
for those of us who are building graph

00:13:10,670 --> 00:13:15,800
QL servers and this is important because

00:13:13,340 --> 00:13:17,390
the way the graph hill works every field

00:13:15,800 --> 00:13:19,610
is going to get resolved and every one

00:13:17,390 --> 00:13:21,770
of those fields might resolve against a

00:13:19,610 --> 00:13:23,210
REST API and what that means is that

00:13:21,770 --> 00:13:24,589
you're gonna get a ton of REST API

00:13:23,210 --> 00:13:26,149
requests

00:13:24,589 --> 00:13:27,980
and you're definitely gonna get

00:13:26,149 --> 00:13:31,519
throttled speaking from personal

00:13:27,980 --> 00:13:35,000
experience so here's a few top-level

00:13:31,519 --> 00:13:38,570
really easy ways to guard your safeguard

00:13:35,000 --> 00:13:41,300
your your your graph QL server from

00:13:38,570 --> 00:13:43,459
getting destroyed and these aren't

00:13:41,300 --> 00:13:44,570
really relevant to rest yet these are

00:13:43,459 --> 00:13:46,940
just high-level things that you should

00:13:44,570 --> 00:13:49,190
be doing regardless so this first one is

00:13:46,940 --> 00:13:51,709
query complexity and what it does is

00:13:49,190 --> 00:13:53,899
that it takes your query and then make

00:13:51,709 --> 00:13:56,209
some does some hand waving and says hey

00:13:53,899 --> 00:13:57,560
there's a few fields like this and in

00:13:56,209 --> 00:14:00,649
this case we see there's two fields

00:13:57,560 --> 00:14:02,420
droid and ID as well as three fields

00:14:00,649 --> 00:14:04,399
pet's name and age and it's going to

00:14:02,420 --> 00:14:06,560
multiply those last three fields by the

00:14:04,399 --> 00:14:09,170
limit and it's gonna say 63 is your

00:14:06,560 --> 00:14:11,390
magic number and this is great now you

00:14:09,170 --> 00:14:14,440
have a number to determine what how many

00:14:11,390 --> 00:14:18,350
possible rest requests you might have

00:14:14,440 --> 00:14:20,089
and based on how many times you Traverse

00:14:18,350 --> 00:14:21,860
things and how many nested fields you go

00:14:20,089 --> 00:14:23,300
and how many limits you have this could

00:14:21,860 --> 00:14:26,450
be up in the thousands

00:14:23,300 --> 00:14:28,370
this query complexity you can change the

00:14:26,450 --> 00:14:30,260
weight if you have one API that's really

00:14:28,370 --> 00:14:32,930
really slow and you want to say okay

00:14:30,260 --> 00:14:35,839
anybody that uses this one API give them

00:14:32,930 --> 00:14:38,180
a huge query complexity in any case what

00:14:35,839 --> 00:14:40,820
this is intended to do is that at static

00:14:38,180 --> 00:14:42,350
analysis time at compile time determine

00:14:40,820 --> 00:14:45,079
are we gonna be able to serve this

00:14:42,350 --> 00:14:46,579
request efficiently if not throw it away

00:14:45,079 --> 00:14:47,959
I don't even care I don't even have to

00:14:46,579 --> 00:14:50,420
run this to know that it's gonna take

00:14:47,959 --> 00:14:53,420
too long to return so that's query

00:14:50,420 --> 00:14:54,740
complexity the second is okay so this

00:14:53,420 --> 00:14:57,079
alright we're gonna talk a little bit

00:14:54,740 --> 00:14:59,180
about this emoji so this emoji is

00:14:57,079 --> 00:15:01,490
supposed to be the guy it's supposed to

00:14:59,180 --> 00:15:02,990
be man gesturing no and then I tried to

00:15:01,490 --> 00:15:05,959
find the skin type that matched my

00:15:02,990 --> 00:15:08,449
complexion and that's what I got it

00:15:05,959 --> 00:15:11,570
looks like a piece of poop kind of just

00:15:08,449 --> 00:15:12,860
a ghost maybe and this is I don't know

00:15:11,570 --> 00:15:15,680
what happened because this looks great

00:15:12,860 --> 00:15:17,270
on my computer in any case another thing

00:15:15,680 --> 00:15:20,240
that you can check is maximum query

00:15:17,270 --> 00:15:21,949
depth and this is because of the nature

00:15:20,240 --> 00:15:24,110
of graph QL because it's a graph you can

00:15:21,949 --> 00:15:26,300
have cycles and so if you're traversing

00:15:24,110 --> 00:15:28,370
like this you're going from joy to pets

00:15:26,300 --> 00:15:30,940
- owner - pets - owner - pets - owner -

00:15:28,370 --> 00:15:33,410
pets - owner - pets that can go forever

00:15:30,940 --> 00:15:34,820
so you can just say you know what you

00:15:33,410 --> 00:15:37,370
probably don't need to go that many

00:15:34,820 --> 00:15:39,050
times you can stop after five or so so

00:15:37,370 --> 00:15:40,910
this is just a very easy check to see

00:15:39,050 --> 00:15:43,490
you know what this query is not gonna do

00:15:40,910 --> 00:15:46,460
this isn't great let's let's throw this

00:15:43,490 --> 00:15:48,050
away here's the ghost emoji again and

00:15:46,460 --> 00:15:50,810
this is what it's supposed to is this

00:15:48,050 --> 00:15:54,050
guy on the right but doing the but doing

00:15:50,810 --> 00:15:55,790
the X in any case the another option

00:15:54,050 --> 00:15:57,920
that you can use to really safeguard

00:15:55,790 --> 00:15:59,870
your your system is using persisted

00:15:57,920 --> 00:16:01,730
queries so even though you have this

00:15:59,870 --> 00:16:03,950
query complexity thing you even though

00:16:01,730 --> 00:16:06,529
you have this maximum query depth thing

00:16:03,950 --> 00:16:09,500
you want to make sure that not anyone

00:16:06,529 --> 00:16:11,300
can arbitrarily hit your system because

00:16:09,500 --> 00:16:13,460
graph kill is going to again shoot a lot

00:16:11,300 --> 00:16:15,529
of requests out and so what it'll do is

00:16:13,460 --> 00:16:17,020
that'll take this query on the Left

00:16:15,529 --> 00:16:19,610
which may or may not be really complex

00:16:17,020 --> 00:16:21,680
and at compile time you're gonna verify

00:16:19,610 --> 00:16:23,920
it and say yes I put my stamp of

00:16:21,680 --> 00:16:26,690
approval on this I'm gonna give it an ID

00:16:23,920 --> 00:16:29,000
this ID in this case is some query ID

00:16:26,690 --> 00:16:30,920
and when you make this request to your

00:16:29,000 --> 00:16:33,170
graph you endpoint instead of sending

00:16:30,920 --> 00:16:36,350
this big query document you send just

00:16:33,170 --> 00:16:38,720
the ID and that we can verify on our

00:16:36,350 --> 00:16:41,060
system to say yes we verified that this

00:16:38,720 --> 00:16:43,220
ID is created by our team and that we

00:16:41,060 --> 00:16:44,930
will actually serve this request this is

00:16:43,220 --> 00:16:46,459
more of a security thing but it's also a

00:16:44,930 --> 00:16:48,140
good way to make sure that you know your

00:16:46,459 --> 00:16:49,610
your queries have passed all the

00:16:48,140 --> 00:16:51,680
verification steps in order to create

00:16:49,610 --> 00:16:52,610
that ID and that means that random

00:16:51,680 --> 00:16:55,010
people can't just hook up to your

00:16:52,610 --> 00:17:00,080
graphical and spam your spam your

00:16:55,010 --> 00:17:02,360
servers also very important this is si

00:17:00,080 --> 00:17:05,540
you may want batch a batch api's you're

00:17:02,360 --> 00:17:07,220
gonna need batch api's your rest api is

00:17:05,540 --> 00:17:09,439
if you look on the right side you'll

00:17:07,220 --> 00:17:11,480
recognize like slash API slash people

00:17:09,439 --> 00:17:13,010
and then maybe it returns you a list of

00:17:11,480 --> 00:17:14,980
friend IDs and you're gonna go ahead and

00:17:13,010 --> 00:17:16,939
iterate over all the friend IDs to grab

00:17:14,980 --> 00:17:18,530
individual friends and you're gonna make

00:17:16,939 --> 00:17:21,020
four different requests to different

00:17:18,530 --> 00:17:24,679
api's this is going to blow up real fast

00:17:21,020 --> 00:17:26,120
so if you have an API like the bottom if

00:17:24,679 --> 00:17:28,910
you if you can't see on the bottom it

00:17:26,120 --> 00:17:30,860
says query parameter IDs equal and has a

00:17:28,910 --> 00:17:33,440
list a comma separated list of all the

00:17:30,860 --> 00:17:35,390
IDS you get one request but you get all

00:17:33,440 --> 00:17:37,870
the information back that you that you

00:17:35,390 --> 00:17:41,150
need and this will save you a ton of

00:17:37,870 --> 00:17:42,890
pain and heartache over all the all the

00:17:41,150 --> 00:17:46,790
big fan out of requests that you're

00:17:42,890 --> 00:17:49,160
gonna get in graph QL don't get

00:17:46,790 --> 00:17:50,600
throttled really really important make

00:17:49,160 --> 00:17:50,990
sure that you whitelist your graph QL

00:17:50,600 --> 00:17:53,510
sir

00:17:50,990 --> 00:17:55,040
against your api's because again you're

00:17:53,510 --> 00:17:58,670
going to be generating a ton of requests

00:17:55,040 --> 00:18:01,640
here you can send a header as a secret

00:17:58,670 --> 00:18:03,410
this one says DJ mask oh and this just

00:18:01,640 --> 00:18:07,400
makes sure again that you you have a way

00:18:03,410 --> 00:18:10,280
to authenticate your graph ul server and

00:18:07,400 --> 00:18:12,470
then if you are implementing the

00:18:10,280 --> 00:18:15,440
graphical server yourself you'll want to

00:18:12,470 --> 00:18:16,760
memorize a lot of your rest calls so as

00:18:15,440 --> 00:18:18,350
you traverse through all of these

00:18:16,760 --> 00:18:20,770
resources you're going to be retrieving

00:18:18,350 --> 00:18:23,300
all this stuff from different API s

00:18:20,770 --> 00:18:24,400
you're gonna be using IDs a lot and

00:18:23,300 --> 00:18:27,830
that's how you're gonna be able to

00:18:24,400 --> 00:18:29,630
access things and rest turns out if you

00:18:27,830 --> 00:18:32,090
go from here like say you go from droid

00:18:29,630 --> 00:18:35,510
to pets to owner to pets and you go back

00:18:32,090 --> 00:18:37,309
over the same person or the same entity

00:18:35,510 --> 00:18:39,410
with the same ID there's no need to make

00:18:37,309 --> 00:18:41,059
another request you can memorize that

00:18:39,410 --> 00:18:42,290
and save yourself a ton of requests and

00:18:41,059 --> 00:18:44,270
just serve it from memory because you

00:18:42,290 --> 00:18:46,370
know in the execution chain that you've

00:18:44,270 --> 00:18:48,170
already retrieved this information if

00:18:46,370 --> 00:18:50,420
you use JavaScript this is your data

00:18:48,170 --> 00:18:52,040
loader if you've heard that before and

00:18:50,420 --> 00:18:55,960
in other languages there's different

00:18:52,040 --> 00:18:58,309
options from them wise in this so

00:18:55,960 --> 00:19:00,080
wrapping it all up we're gonna pull all

00:18:58,309 --> 00:19:02,390
this together you have a schema that

00:19:00,080 --> 00:19:05,090
you've generated or manually created or

00:19:02,390 --> 00:19:07,850
a combination of both from your REST API

00:19:05,090 --> 00:19:09,050
s as well as a server that's going to be

00:19:07,850 --> 00:19:10,820
a really good tenant and it's going to

00:19:09,050 --> 00:19:13,520
be able to make a ton of these requests

00:19:10,820 --> 00:19:16,940
to your REST API s and you're gonna have

00:19:13,520 --> 00:19:19,190
to ask then some graph QL related

00:19:16,940 --> 00:19:21,950
questions so the first question here is

00:19:19,190 --> 00:19:24,260
who creates the graph so we have

00:19:21,950 --> 00:19:26,660
individual rest resources that we pulled

00:19:24,260 --> 00:19:28,160
into graph QL but we've done nothing to

00:19:26,660 --> 00:19:30,320
actually link them and to make them a

00:19:28,160 --> 00:19:32,600
graph and that's an important question

00:19:30,320 --> 00:19:34,940
to have because one that's the kind of

00:19:32,600 --> 00:19:36,290
the benefit of graph QL but it's also a

00:19:34,940 --> 00:19:39,170
question that you haven't had to deal

00:19:36,290 --> 00:19:40,700
with in rest and rest you probably know

00:19:39,170 --> 00:19:42,590
that this is a list of friends so you're

00:19:40,700 --> 00:19:44,720
gonna go make this API call with this ID

00:19:42,590 --> 00:19:47,000
but for the first time we're actually

00:19:44,720 --> 00:19:49,460
ensuring in the type system and in the

00:19:47,000 --> 00:19:51,679
graph QL API that this actually is going

00:19:49,460 --> 00:19:53,780
to return you a friend

00:19:51,679 --> 00:19:55,610
and so those relationships are what

00:19:53,780 --> 00:19:57,410
create your graph and and there's a

00:19:55,610 --> 00:19:59,929
decision there which is should you put

00:19:57,410 --> 00:20:02,090
this in your rest layer like do do your

00:19:59,929 --> 00:20:03,200
rest api's know that this is going to be

00:20:02,090 --> 00:20:07,100
a friend

00:20:03,200 --> 00:20:08,840
a friend ID or friend relation or does

00:20:07,100 --> 00:20:10,910
this only go into the graph QL later

00:20:08,840 --> 00:20:12,230
it's not a huge decision but it's

00:20:10,910 --> 00:20:13,910
important to know that you're gonna need

00:20:12,230 --> 00:20:16,160
to store some information about the

00:20:13,910 --> 00:20:17,960
graph because this does not exist and

00:20:16,160 --> 00:20:21,830
generally does not exist in the rest

00:20:17,960 --> 00:20:23,930
world another thing that's important is

00:20:21,830 --> 00:20:25,280
that we've talked a lot about all the

00:20:23,930 --> 00:20:28,360
little decisions we have to make around

00:20:25,280 --> 00:20:30,310
throttling around how we deal with

00:20:28,360 --> 00:20:32,120
persistent queries how we deal with

00:20:30,310 --> 00:20:35,480
constructing the rest calls and

00:20:32,120 --> 00:20:37,310
memorizing the calls and you shouldn't

00:20:35,480 --> 00:20:38,510
have to keep rebuilding that every time

00:20:37,310 --> 00:20:39,560
you're building a new resolving your

00:20:38,510 --> 00:20:40,940
graph QL server

00:20:39,560 --> 00:20:43,040
you shouldn't have to keep dealing with

00:20:40,940 --> 00:20:45,500
authentication and authorization and

00:20:43,040 --> 00:20:48,440
that sort of stuff in fact if you use

00:20:45,500 --> 00:20:50,060
things like open API or swagger you

00:20:48,440 --> 00:20:51,860
might be able to combine all of that and

00:20:50,060 --> 00:20:54,170
encapsulate all of that into one place

00:20:51,860 --> 00:20:56,270
and using a library like graph kill

00:20:54,170 --> 00:20:58,010
binding you can actually say you know

00:20:56,270 --> 00:20:59,990
what I figured out all the problems I

00:20:58,010 --> 00:21:01,640
figured out how to access my REST API is

00:20:59,990 --> 00:21:03,770
if they look like this I figured out all

00:21:01,640 --> 00:21:07,070
the authentication I'm gonna package all

00:21:03,770 --> 00:21:08,930
that up into a little module so if we

00:21:07,070 --> 00:21:12,550
look on the left here you would give

00:21:08,930 --> 00:21:15,560
this system for example your open API

00:21:12,550 --> 00:21:17,450
schema which is a rest schema and it's

00:21:15,560 --> 00:21:19,010
gonna auto generate your graph QL stuff

00:21:17,450 --> 00:21:21,230
for you like I mentioned it's going to

00:21:19,010 --> 00:21:23,030
generate that schema and you can see

00:21:21,230 --> 00:21:26,390
what those eventually resolve to those

00:21:23,030 --> 00:21:31,250
result to get pet slash some finder and

00:21:26,390 --> 00:21:35,030
it gives you a instance of your API that

00:21:31,250 --> 00:21:36,740
now you can use to ping and if you use

00:21:35,030 --> 00:21:38,600
your graphical server you can use this

00:21:36,740 --> 00:21:41,900
and it's gonna handle all of the work

00:21:38,600 --> 00:21:43,400
around translating it to rest you need

00:21:41,900 --> 00:21:44,240
to only solve that once and then you can

00:21:43,400 --> 00:21:47,840
reuse it everywhere

00:21:44,240 --> 00:21:49,820
that's really really nice beyond that

00:21:47,840 --> 00:21:52,190
you're also going to want to extend your

00:21:49,820 --> 00:21:54,200
graph ultimately there's a lot of third

00:21:52,190 --> 00:21:56,300
party or external API s that you don't

00:21:54,200 --> 00:21:57,650
control that maybe you don't have inside

00:21:56,300 --> 00:22:00,740
of your graph or maybe you don't own the

00:21:57,650 --> 00:22:02,990
service luckily for us using directives

00:22:00,740 --> 00:22:05,120
using the links that were mentioned

00:22:02,990 --> 00:22:07,520
earlier you can use a link called Apollo

00:22:05,120 --> 00:22:08,450
link rest which was written by Frederick

00:22:07,520 --> 00:22:12,860
who's sitting on the couch over there

00:22:08,450 --> 00:22:15,590
and this allows you to express very very

00:22:12,860 --> 00:22:16,669
restful things inside of your graph QL

00:22:15,590 --> 00:22:19,070
schema but

00:22:16,669 --> 00:22:21,049
nice about this is the dream which is

00:22:19,070 --> 00:22:22,429
you can access all of your data through

00:22:21,049 --> 00:22:26,450
graph QL and you're not gonna need to

00:22:22,429 --> 00:22:29,239
know anything else so as an overview I'm

00:22:26,450 --> 00:22:30,529
covered how you're gonna actually figure

00:22:29,239 --> 00:22:30,980
out if graph kill is the right thing for

00:22:30,529 --> 00:22:33,019
you

00:22:30,980 --> 00:22:35,029
second covering how you're going to

00:22:33,019 --> 00:22:37,519
capture and catalog all your rest api's

00:22:35,029 --> 00:22:39,320
third being a good tenant making sure

00:22:37,519 --> 00:22:40,909
that you're using REST API is well

00:22:39,320 --> 00:22:41,359
because it's definitely gonna be a

00:22:40,909 --> 00:22:43,549
problem

00:22:41,359 --> 00:22:45,109
as well as how you're gonna end up using

00:22:43,549 --> 00:22:55,340
and building your own graph fuel-air

00:22:45,109 --> 00:22:57,799
thank you yeah time for questions yeah

00:22:55,340 --> 00:23:00,769
so to repeat the question I your this

00:22:57,799 --> 00:23:02,690
was asking about persistent queries and

00:23:00,769 --> 00:23:05,090
how to deal with the management of like

00:23:02,690 --> 00:23:05,659
and and whitelisting the servers and

00:23:05,090 --> 00:23:07,999
stuff like that

00:23:05,659 --> 00:23:09,909
I you know those are all options to deal

00:23:07,999 --> 00:23:11,629
with making sure that you're writing

00:23:09,909 --> 00:23:13,909
queries that will get through your

00:23:11,629 --> 00:23:16,100
systems our graphical service sit behind

00:23:13,909 --> 00:23:17,210
in our V PC years and I don't know I'm

00:23:16,100 --> 00:23:20,299
just saying words I don't know what I

00:23:17,210 --> 00:23:22,070
mean something such that it we know that

00:23:20,299 --> 00:23:23,419
it's internal so it knows that it's an

00:23:22,070 --> 00:23:25,070
internal client and so we don't really

00:23:23,419 --> 00:23:27,200
need to deal with those things but I

00:23:25,070 --> 00:23:28,909
mention it generally because some people

00:23:27,200 --> 00:23:32,450
have graphical servers external from

00:23:28,909 --> 00:23:34,730
their rest servers yeah awesome I think

00:23:32,450 --> 00:23:36,710
one question yeah last question yeah so

00:23:34,730 --> 00:23:39,080
this the question is how do you end up

00:23:36,710 --> 00:23:41,869
annotating query complexity for

00:23:39,080 --> 00:23:43,549
different resolvers and fields the way

00:23:41,869 --> 00:23:45,440
that sangrÃ­a does it is that it allows

00:23:43,549 --> 00:23:47,179
you to determine based on the actual

00:23:45,440 --> 00:23:49,879
type that you're generating what the

00:23:47,179 --> 00:23:51,230
weight of that query is and so again if

00:23:49,879 --> 00:23:53,059
you have an API that you know is very

00:23:51,230 --> 00:23:55,549
slow you give it a large query complex

00:23:53,059 --> 00:23:57,049
query complexity score but again this is

00:23:55,549 --> 00:23:58,460
all hand wavy the numbers don't mean

00:23:57,049 --> 00:24:01,580
anything unless you make them mean

00:23:58,460 --> 00:24:03,769
something resolver you say this is a

00:24:01,580 --> 00:24:05,929
five versus this is it yeah so generally

00:24:03,769 --> 00:24:07,940
their baseline is like okay it's one for

00:24:05,929 --> 00:24:10,009
every field and then multiply it by a

00:24:07,940 --> 00:24:13,700
limit whenever you see a limit and then

00:24:10,009 --> 00:24:15,919
if you have a custom one add 25 maybe

00:24:13,700 --> 00:24:18,320
multiply it by PI like it's really up to

00:24:15,919 --> 00:24:20,179
you to figure what that looks like yes

00:24:18,320 --> 00:24:23,109
all right thank you do you want to ask a

00:24:20,179 --> 00:24:23,109
truly last question Oh

00:24:23,890 --> 00:24:28,970
the question was should your secret be

00:24:27,530 --> 00:24:30,950
bundled into the system

00:24:28,970 --> 00:24:32,480
that's just generally a security thing

00:24:30,950 --> 00:24:34,100
just to make sure that you know you're

00:24:32,480 --> 00:24:36,650
not thought on your services as nothing

00:24:34,100 --> 00:24:38,270
to do with graph Gail oh this is in the

00:24:36,650 --> 00:24:40,280
graph you'll server layer not the client

00:24:38,270 --> 00:24:41,810
layer so in the server it would be

00:24:40,280 --> 00:24:43,340
making the rest request and that needs

00:24:41,810 --> 00:24:44,750
the authentication not your client your

00:24:43,340 --> 00:24:46,940
client still making graphical queries

00:24:44,750 --> 00:24:48,760
you don't deal with that part yeah all

00:24:46,940 --> 00:24:53,819
right thank you awesome thank you John

00:24:48,760 --> 00:24:53,819

YouTube URL: https://www.youtube.com/watch?v=iW4il6wUlvs


