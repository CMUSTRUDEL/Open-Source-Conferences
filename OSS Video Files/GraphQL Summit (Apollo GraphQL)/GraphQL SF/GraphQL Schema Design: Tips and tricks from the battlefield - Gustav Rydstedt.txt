Title: GraphQL Schema Design: Tips and tricks from the battlefield - Gustav Rydstedt
Publication date: 2017-11-16
Playlist: GraphQL SF
Description: 
	Verbling CTO and Co-Founder Gustav Rydstedt presents at our Practical GraphQL meetup on 1/19/17.

Join GraphQL San Francisco for updates on future events: http://www.meetup.com/GraphQL-SF/

Resources:
ApolloGraphQL - https://www.apollographql.com/
Learn GraphQL using Apollo's Tutorials: https://odyssey.apollographql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Captions: 
	00:00:02,240 --> 00:00:07,340
my name is Gustav I'm the CTO and

00:00:05,750 --> 00:00:10,130
co-founder of a company called burbling

00:00:07,340 --> 00:00:11,420
I didn't see when he did the whole reach

00:00:10,130 --> 00:00:12,920
a hand I kind of are going to get a

00:00:11,420 --> 00:00:15,650
better idea cuz we're going to talk

00:00:12,920 --> 00:00:17,150
about some tips and tricks and I kind of

00:00:15,650 --> 00:00:20,930
want to get a feel for where people are

00:00:17,150 --> 00:00:22,820
so who's who's like never done anything

00:00:20,930 --> 00:00:25,550
graphic y'all this is Sai curious here

00:00:22,820 --> 00:00:27,890
to check a cool whose cat have been

00:00:25,550 --> 00:00:30,860
dipping their toes in a little bit check

00:00:27,890 --> 00:00:34,640
it out and who's like full-blown graphs

00:00:30,860 --> 00:00:37,940
do all in production wow this is like a

00:00:34,640 --> 00:00:39,739
cool mix of people so I guess I'll I'll

00:00:37,940 --> 00:00:41,690
keep it so in the middle and you guys

00:00:39,739 --> 00:00:44,239
like stop me when you want to hear more

00:00:41,690 --> 00:00:49,130
or tell me I'm stupid or some things to

00:00:44,239 --> 00:00:51,410
do for that so burbling is a language

00:00:49,130 --> 00:00:54,649
learning platform we connect language

00:00:51,410 --> 00:00:56,989
teachers with with learners and it's a

00:00:54,649 --> 00:00:58,850
video platform and we build tools and

00:00:56,989 --> 00:01:02,420
payments around that used to facilitate

00:00:58,850 --> 00:01:04,969
that sort of transaction been around for

00:01:02,420 --> 00:01:07,220
about four years it's still very small

00:01:04,969 --> 00:01:13,670
small team but we're growing fast and uh

00:01:07,220 --> 00:01:15,650
and the we started using graph feel

00:01:13,670 --> 00:01:18,710
right actually when Facebook first

00:01:15,650 --> 00:01:22,189
released the first version of relay then

00:01:18,710 --> 00:01:23,659
go full-blown sort of production but we

00:01:22,189 --> 00:01:25,909
started tipping our toes a little bit

00:01:23,659 --> 00:01:28,640
starting it out trying it out on some

00:01:25,909 --> 00:01:30,920
features today about a year and a half

00:01:28,640 --> 00:01:34,280
later pretty close to a hundred percent

00:01:30,920 --> 00:01:37,610
migrated away from from rest as a main

00:01:34,280 --> 00:01:39,770
sort of interface we're about two

00:01:37,610 --> 00:01:42,200
hundred graphs do all types if you want

00:01:39,770 --> 00:01:45,320
which is not huge but it's not small

00:01:42,200 --> 00:01:49,460
either about 250 mutations on those

00:01:45,320 --> 00:01:53,090
types and we start off as I said we

00:01:49,460 --> 00:01:55,189
started off at rest like everybody else

00:01:53,090 --> 00:01:56,930
and we have this like you know you start

00:01:55,189 --> 00:01:58,310
a company you have this grand idea I was

00:01:56,930 --> 00:02:00,560
like all we're going to go for rest out

00:01:58,310 --> 00:02:01,490
with the cool thing back then and you're

00:02:00,560 --> 00:02:03,350
like you start planning out your

00:02:01,490 --> 00:02:05,990
interface and everything seems perfect

00:02:03,350 --> 00:02:08,450
everything seems great and you code it

00:02:05,990 --> 00:02:11,090
up and you go to bed feeling really good

00:02:08,450 --> 00:02:13,030
and then you wake up and you have like

00:02:11,090 --> 00:02:15,819
10 times more features you're

00:02:13,030 --> 00:02:17,620
more users and you start getting these

00:02:15,819 --> 00:02:19,930
requests from like front-end engineers

00:02:17,620 --> 00:02:21,730
right you can saying like hey really I

00:02:19,930 --> 00:02:24,040
like this thing you build like this cool

00:02:21,730 --> 00:02:26,800
interface but I really don't want to

00:02:24,040 --> 00:02:28,620
make like multiple round trips here to

00:02:26,800 --> 00:02:31,270
get the same data can we start like

00:02:28,620 --> 00:02:33,250
compacting them in and making one custom

00:02:31,270 --> 00:02:35,170
endpoint or maybe multiple or let's just

00:02:33,250 --> 00:02:37,030
all have custom endpoints all over the

00:02:35,170 --> 00:02:39,250
place I feel like you guys know where

00:02:37,030 --> 00:02:42,850
this lands right like you start with

00:02:39,250 --> 00:02:45,100
perfect idea and you end up somewhere

00:02:42,850 --> 00:02:47,890
where you have all these aggregated end

00:02:45,100 --> 00:02:50,140
points you want you know you want this

00:02:47,890 --> 00:02:52,300
little piece of user but you also maybe

00:02:50,140 --> 00:02:54,250
want there you know for us it could be

00:02:52,300 --> 00:02:57,610
like you want to take the lessons that

00:02:54,250 --> 00:02:59,590
they're taking and this becomes really

00:02:57,610 --> 00:03:01,330
messy especially in the backend when you

00:02:59,590 --> 00:03:04,120
try to be really good about caching

00:03:01,330 --> 00:03:08,230
you're trying to be it gets really messy

00:03:04,120 --> 00:03:10,360
so at least in my head when I started

00:03:08,230 --> 00:03:11,950
seeing the cracks of rest you start

00:03:10,360 --> 00:03:14,590
thinking about it what is like you like

00:03:11,950 --> 00:03:17,590
whatever you have this language that I

00:03:14,590 --> 00:03:19,269
could give to to the front engineers

00:03:17,590 --> 00:03:21,070
right that thinking like oh I want these

00:03:19,269 --> 00:03:23,500
things you know

00:03:21,070 --> 00:03:25,000
give me these things and package them up

00:03:23,500 --> 00:03:27,489
in a cool way and then send it back

00:03:25,000 --> 00:03:29,920
right I feel like we all had those ideas

00:03:27,489 --> 00:03:32,680
but nobody had like the time and the

00:03:29,920 --> 00:03:34,030
money or like the resources to implement

00:03:32,680 --> 00:03:36,760
something like that it was sort of a

00:03:34,030 --> 00:03:38,380
vision and Facebook has a lot of money

00:03:36,760 --> 00:03:40,930
and they're a lot smarter than I am

00:03:38,380 --> 00:03:45,880
so they can mow this really cool idea so

00:03:40,930 --> 00:03:48,640
we we jumped on board right away and you

00:03:45,880 --> 00:03:52,030
know really lucky we did like we're

00:03:48,640 --> 00:03:54,340
loving it we don't want to go back but I

00:03:52,030 --> 00:03:55,540
want to talk about some of the learnings

00:03:54,340 --> 00:03:57,579
and some of the things that we did we

00:03:55,540 --> 00:04:00,549
learn it along the way so let's make a

00:03:57,579 --> 00:04:03,400
list the way I was thinking about doing

00:04:00,549 --> 00:04:05,340
this let's first talk sort of Grand

00:04:03,400 --> 00:04:08,799
Designs

00:04:05,340 --> 00:04:10,480
sort of the bigger picture stuff and

00:04:08,799 --> 00:04:13,000
then we go on some really granular stuff

00:04:10,480 --> 00:04:15,579
if you guys want to hear more about the

00:04:13,000 --> 00:04:19,570
big-picture stuff or look less you shout

00:04:15,579 --> 00:04:22,630
out tell me something let's start start

00:04:19,570 --> 00:04:26,830
at the very top so the way that I think

00:04:22,630 --> 00:04:29,409
that you go from a a rest house if it's

00:04:26,830 --> 00:04:31,870
you guys are still sort of dabbling and

00:04:29,409 --> 00:04:34,180
try to get convinced to go there the way

00:04:31,870 --> 00:04:37,330
that I think you need to go is really to

00:04:34,180 --> 00:04:41,710
get into a graph sort of mindset and

00:04:37,330 --> 00:04:44,289
this is might not seem so obvious but I

00:04:41,710 --> 00:04:45,310
think that's like the first thing that

00:04:44,289 --> 00:04:48,330
you have to do you have to start

00:04:45,310 --> 00:04:51,940
thinking and graph and not in endpoints

00:04:48,330 --> 00:04:55,000
rest is very much about defining an

00:04:51,940 --> 00:04:56,889
endpoint to do a certain thing sort of

00:04:55,000 --> 00:04:59,139
try to scrap that from your head and

00:04:56,889 --> 00:05:02,050
instill instead think about how to model

00:04:59,139 --> 00:05:05,500
your data in graph think about all the

00:05:02,050 --> 00:05:07,449
both direct database models and abstract

00:05:05,500 --> 00:05:09,370
models that exist within your

00:05:07,449 --> 00:05:13,719
application and start thinking about

00:05:09,370 --> 00:05:16,060
them as a graph really I think the the

00:05:13,719 --> 00:05:19,270
most basic thing to do is get a big

00:05:16,060 --> 00:05:20,889
sheet of paper and you start mapping

00:05:19,270 --> 00:05:23,229
outs like okay I'm going to start off

00:05:20,889 --> 00:05:25,750
you know take whatever database you have

00:05:23,229 --> 00:05:27,520
and you start mapping out all the tables

00:05:25,750 --> 00:05:29,590
or the models together and then you

00:05:27,520 --> 00:05:33,909
start doing all the edges between them

00:05:29,590 --> 00:05:41,319
how do these connect right once you do

00:05:33,909 --> 00:05:43,150
this then take take all the abstract

00:05:41,319 --> 00:05:44,770
things that could happen around them and

00:05:43,150 --> 00:05:47,500
we'll talk a little bit more about that

00:05:44,770 --> 00:05:49,870
but that always say it starts by mapping

00:05:47,500 --> 00:05:52,479
that whole space out and then stop

00:05:49,870 --> 00:05:55,300
thinking about designing endpoints into

00:05:52,479 --> 00:05:58,029
this graph you're saying like all my fun

00:05:55,300 --> 00:06:00,759
engineers now have this graph how do I

00:05:58,029 --> 00:06:03,039
empower the display of the data of this

00:06:00,759 --> 00:06:04,360
graph don't think about like how did

00:06:03,039 --> 00:06:06,430
they get into the graph how do they

00:06:04,360 --> 00:06:07,960
choreographed use assume that they can

00:06:06,430 --> 00:06:09,159
create the graph in some way I mean

00:06:07,960 --> 00:06:13,930
there are lots of ways to do it after

00:06:09,159 --> 00:06:15,779
all but that is the mindset I think that

00:06:13,930 --> 00:06:19,000
it probably is the biggest thing if you

00:06:15,779 --> 00:06:21,099
take away from this like try to force

00:06:19,000 --> 00:06:25,330
yourself into a graph mindset quartic

00:06:21,099 --> 00:06:29,500
slant but that's been another thing I

00:06:25,330 --> 00:06:31,360
would say is approach carefully grasp QL

00:06:29,500 --> 00:06:34,810
and Anna sort of the environment around

00:06:31,360 --> 00:06:37,060
it is like a crazy Swiss Army knife with

00:06:34,810 --> 00:06:39,139
all the that you do want so I would

00:06:37,060 --> 00:06:42,379
say approach it

00:06:39,139 --> 00:06:43,999
err and really plan out how are you

00:06:42,379 --> 00:06:47,060
going to build out your schema because

00:06:43,999 --> 00:06:50,689
you can I feel like in a lot of ways you

00:06:47,060 --> 00:06:51,860
can go wrong in many ways you can build

00:06:50,689 --> 00:06:52,520
up schemas they're not going to be

00:06:51,860 --> 00:06:55,249
performant

00:06:52,520 --> 00:06:56,840
they're gonna use represent bad data

00:06:55,249 --> 00:06:59,330
they're not going to scale it's not

00:06:56,840 --> 00:07:01,669
gonna so I would say really take care

00:06:59,330 --> 00:07:06,529
before you really jump in to graphically

00:07:01,669 --> 00:07:08,900
also plan out your your schema so start

00:07:06,529 --> 00:07:12,050
out a small test you know if you jump on

00:07:08,900 --> 00:07:14,090
board start taking one thing map out

00:07:12,050 --> 00:07:16,250
that one thing it could be like a user

00:07:14,090 --> 00:07:18,080
profile start thinking about what are

00:07:16,250 --> 00:07:20,659
these components how to represent this

00:07:18,080 --> 00:07:22,550
in my graphs do all schema right start

00:07:20,659 --> 00:07:24,560
there don't try to do a full-fledged

00:07:22,550 --> 00:07:27,469
thing and the entire application start

00:07:24,560 --> 00:07:30,020
small and invest time in really thinking

00:07:27,469 --> 00:07:32,150
about we'll talk more about naming but

00:07:30,020 --> 00:07:34,159
but really think about how this is going

00:07:32,150 --> 00:07:40,490
to be used now and how it's going to be

00:07:34,159 --> 00:07:42,650
used for a long time ahead I think also

00:07:40,490 --> 00:07:45,620
it's important that to still realize

00:07:42,650 --> 00:07:47,509
that you know this came out of Facebook

00:07:45,620 --> 00:07:50,810
Facebook has a lot of resources and they

00:07:47,509 --> 00:07:52,879
have a lot of tools built around graphs

00:07:50,810 --> 00:07:54,469
ql that we necessarily as a community

00:07:52,879 --> 00:07:56,629
don't really have access to there's a

00:07:54,469 --> 00:08:01,430
lot of great stuff coming out of places

00:07:56,629 --> 00:08:04,659
like this but if if your application or

00:08:01,430 --> 00:08:07,689
your company has specific domains where

00:08:04,659 --> 00:08:09,800
you know there there isn't really way

00:08:07,689 --> 00:08:12,860
set in stone way to do authentication

00:08:09,800 --> 00:08:15,589
and graphs ql security is and you know

00:08:12,860 --> 00:08:18,379
it's a completely mapped out like

00:08:15,589 --> 00:08:20,509
ddossing for example or monitoring these

00:08:18,379 --> 00:08:22,490
are things that are not like they

00:08:20,509 --> 00:08:24,620
haven't been around for 15-20 years

00:08:22,490 --> 00:08:26,419
about you we don't really yet know what

00:08:24,620 --> 00:08:28,159
the best practices is here so if those

00:08:26,419 --> 00:08:30,830
are things that are super important to

00:08:28,159 --> 00:08:36,500
your company like you should think

00:08:30,830 --> 00:08:38,149
carefully about it when you map out I

00:08:36,500 --> 00:08:41,560
touched a little bit on this but when

00:08:38,149 --> 00:08:44,360
you map out your your schema don't only

00:08:41,560 --> 00:08:46,790
take your your databases

00:08:44,360 --> 00:08:50,209
you know several database and map mouth

00:08:46,790 --> 00:08:52,820
also think about abstract components of

00:08:50,209 --> 00:08:55,300
the application I think this is really

00:08:52,820 --> 00:08:57,890
we're we're graphic you all becomes

00:08:55,300 --> 00:09:00,140
really powerful one thing we do is like

00:08:57,890 --> 00:09:01,700
we actually map some third party API is

00:09:00,140 --> 00:09:04,400
that we used to call on the front end

00:09:01,700 --> 00:09:08,470
and we map we wrap them in a graphic UL

00:09:04,400 --> 00:09:11,540
schema that's a little cool thing but

00:09:08,470 --> 00:09:13,970
there are more abstract models in your

00:09:11,540 --> 00:09:17,030
application they're not necessarily core

00:09:13,970 --> 00:09:19,910
data models that could be really nicely

00:09:17,030 --> 00:09:21,980
useful of Lee Byron he brought up for

00:09:19,910 --> 00:09:25,550
example a search is a really important

00:09:21,980 --> 00:09:27,740
thing in a graph QL conference you can

00:09:25,550 --> 00:09:30,560
create really powerful models where

00:09:27,740 --> 00:09:33,050
where they are sort of back a search for

00:09:30,560 --> 00:09:36,290
example you search and and then the

00:09:33,050 --> 00:09:38,960
search result might be your your data

00:09:36,290 --> 00:09:41,620
models but you can wrap that in a lot of

00:09:38,960 --> 00:09:44,780
metadata suggested search or you know

00:09:41,620 --> 00:09:47,330
you know closer search list you can

00:09:44,780 --> 00:09:51,020
really dig deep down and represent more

00:09:47,330 --> 00:09:53,450
abstract relationship between models we

00:09:51,020 --> 00:09:55,250
have a cool thing for example we have in

00:09:53,450 --> 00:09:57,140
our back-end we have a model for a

00:09:55,250 --> 00:09:59,780
student we have about model for a

00:09:57,140 --> 00:10:02,810
teacher we don't have a direct model for

00:09:59,780 --> 00:10:04,400
a relationship between a student and a

00:10:02,810 --> 00:10:07,280
teacher but that's something that you

00:10:04,400 --> 00:10:09,200
can easily define in graphs QL so start

00:10:07,280 --> 00:10:11,990
also thinking about like what are the

00:10:09,200 --> 00:10:15,830
relationships between the edges of these

00:10:11,990 --> 00:10:17,660
different data bus models so yeah I take

00:10:15,830 --> 00:10:20,180
away I guess don't you stamp your

00:10:17,660 --> 00:10:25,340
database and that's your graphic you all

00:10:20,180 --> 00:10:28,820
think think more what I'll show you acid

00:10:25,340 --> 00:10:32,600
metadata and search results are some

00:10:28,820 --> 00:10:34,040
ideas one really important thing and

00:10:32,600 --> 00:10:36,230
this is also brought up at the graphical

00:10:34,040 --> 00:10:39,850
conference was great design for the

00:10:36,230 --> 00:10:44,180
future graphic you all is a version less

00:10:39,850 --> 00:10:44,660
API so you really want to think hard

00:10:44,180 --> 00:10:48,500
about it

00:10:44,660 --> 00:10:50,390
naming is hard we know that it's even

00:10:48,500 --> 00:10:55,160
more true graphical if you like because

00:10:50,390 --> 00:10:57,230
of the version list of it can a new

00:10:55,160 --> 00:10:59,000
engineer that comes on board does can he

00:10:57,230 --> 00:11:02,360
is open up graphical or something can

00:10:59,000 --> 00:11:04,130
you understand the entire schema are you

00:11:02,360 --> 00:11:05,370
leaking implementation details for

00:11:04,130 --> 00:11:11,520
example

00:11:05,370 --> 00:11:13,950
is it is the naming and your schema is

00:11:11,520 --> 00:11:18,570
it supporting version 2 version 3 of

00:11:13,950 --> 00:11:21,680
your feature or your app does it also

00:11:18,570 --> 00:11:25,290
supports new environments regions

00:11:21,680 --> 00:11:28,050
devices right think about these things

00:11:25,290 --> 00:11:30,420
carefully because if you don't you're

00:11:28,050 --> 00:11:33,270
going to end up extending the schema

00:11:30,420 --> 00:11:37,890
into eternity right and we don't want

00:11:33,270 --> 00:11:39,720
that another thing that I think is worth

00:11:37,890 --> 00:11:41,730
don't forget about your fundamentals you

00:11:39,720 --> 00:11:48,270
learning computer sign this school

00:11:41,730 --> 00:11:49,920
whatever you plant modernize your grass

00:11:48,270 --> 00:11:52,830
we don't want to end up with these

00:11:49,920 --> 00:11:54,410
enormous objects that contain all the

00:11:52,830 --> 00:11:57,210
data you want for application right

00:11:54,410 --> 00:11:58,500
module lives think about like how do

00:11:57,210 --> 00:12:00,930
these different aspects of my

00:11:58,500 --> 00:12:02,430
application how they tie in together and

00:12:00,930 --> 00:12:04,950
how can I be smart how can I be a good

00:12:02,430 --> 00:12:07,440
computer scientist or a good coder and I

00:12:04,950 --> 00:12:10,670
how do i model Isis don't forget about

00:12:07,440 --> 00:12:12,750
your core like sort of object-oriented

00:12:10,670 --> 00:12:17,310
concepts when you're designing your

00:12:12,750 --> 00:12:19,140
schemas still think about it single

00:12:17,310 --> 00:12:21,150
responsibility first of all like one

00:12:19,140 --> 00:12:23,550
model should probably represent one

00:12:21,150 --> 00:12:26,910
thing if it's representing five things

00:12:23,550 --> 00:12:31,050
you probably you should probably think

00:12:26,910 --> 00:12:34,260
it had emancipation details pretty

00:12:31,050 --> 00:12:37,830
obvious but but can be you know it

00:12:34,260 --> 00:12:39,540
happens to the best of us don't carry

00:12:37,830 --> 00:12:43,680
States to the grass this is sort of a

00:12:39,540 --> 00:12:46,980
guess a lower level thing but as you're

00:12:43,680 --> 00:12:49,500
crying the grass you don't want to be

00:12:46,980 --> 00:12:56,160
you don't want to be carrying data

00:12:49,500 --> 00:12:57,420
through edges to rely on the resolvers I

00:12:56,160 --> 00:13:00,360
don't know if that makes sense so if I

00:12:57,420 --> 00:13:03,450
start here at some node and I pick up

00:13:00,360 --> 00:13:06,210
data on the way of my path I don't want

00:13:03,450 --> 00:13:09,330
to rely on the fact that I enter the

00:13:06,210 --> 00:13:12,060
grass of this place to create resolve

00:13:09,330 --> 00:13:15,960
the data model over here each model

00:13:12,060 --> 00:13:18,300
should be resolvable hopefully by itself

00:13:15,960 --> 00:13:21,270
with little to no other data does that

00:13:18,300 --> 00:13:23,550
make sense okay so that was the last

00:13:21,270 --> 00:13:26,780
Shack but I have seen it and it does

00:13:23,550 --> 00:13:26,780
happen if you don't think about it

00:13:26,820 --> 00:13:31,680
self-talk I mean one of the most

00:13:28,260 --> 00:13:34,260
powerful thing about open I think is the

00:13:31,680 --> 00:13:36,000
self documentation but it doesn't really

00:13:34,260 --> 00:13:40,560
happen myself you have to be diligent

00:13:36,000 --> 00:13:43,140
about it as a team you know always

00:13:40,560 --> 00:13:46,260
always fill out field and object

00:13:43,140 --> 00:13:48,000
descriptions seems pretty obvious but I

00:13:46,260 --> 00:13:49,260
actually ended up writing a test and

00:13:48,000 --> 00:13:51,090
make sure it's like if you're committing

00:13:49,260 --> 00:13:54,690
something you better have a description

00:13:51,090 --> 00:13:56,640
on the field or object like these things

00:13:54,690 --> 00:13:59,280
are important things to start off early

00:13:56,640 --> 00:14:01,500
so you get the sort of this super

00:13:59,280 --> 00:14:03,900
powerful self documentation aspect of

00:14:01,500 --> 00:14:07,140
Open Graph

00:14:03,900 --> 00:14:10,170
used to power enums don't use use you

00:14:07,140 --> 00:14:11,610
know floating strings that are some you

00:14:10,170 --> 00:14:13,500
know they could be an arbitrary thing

00:14:11,610 --> 00:14:16,470
you're bringing an on engine new

00:14:13,500 --> 00:14:19,500
engineer and he sees this cool you know

00:14:16,470 --> 00:14:21,450
cool objects like you know what what can

00:14:19,500 --> 00:14:23,880
these welcome this field be like show me

00:14:21,450 --> 00:14:25,500
actually show me the values so don't

00:14:23,880 --> 00:14:27,810
forget forget the power D now it's easy

00:14:25,500 --> 00:14:30,620
if you slap a string in there and be

00:14:27,810 --> 00:14:33,600
cool with it but used enum

00:14:30,620 --> 00:14:35,970
naming there me naming again like hard

00:14:33,600 --> 00:14:38,820
about it you know people are going to

00:14:35,970 --> 00:14:40,770
read this maybe when you're gone you

00:14:38,820 --> 00:14:43,760
know ten years from now if the products

00:14:40,770 --> 00:14:46,740
still around so think hard about it

00:14:43,760 --> 00:14:48,570
okay so that was kind of my high level

00:14:46,740 --> 00:14:53,040
stuff now I'm going to just go on some

00:14:48,570 --> 00:14:56,780
really like detailed stuff that we found

00:14:53,040 --> 00:14:56,780
some some using

00:14:57,020 --> 00:15:04,230
polymorphism this is my there might be

00:14:59,610 --> 00:15:09,480
some controversy here open graph QL like

00:15:04,230 --> 00:15:11,760
my opinion is don't don't do it if you

00:15:09,480 --> 00:15:17,100
disagree we can go outside outside or

00:15:11,760 --> 00:15:19,980
something but there's some support as

00:15:17,100 --> 00:15:23,120
the other unions that there's some basic

00:15:19,980 --> 00:15:27,600
support force or some polymorphism my

00:15:23,120 --> 00:15:30,089
honest opinion is you don't use the same

00:15:27,600 --> 00:15:31,920
way that that some probably more

00:15:30,089 --> 00:15:33,540
prism probably isn't very well-suited

00:15:31,920 --> 00:15:36,689
for your for your actual a database

00:15:33,540 --> 00:15:39,089
back-end don't do nothing and in graph

00:15:36,689 --> 00:15:41,490
QL your resolvers are going to be much

00:15:39,089 --> 00:15:44,870
harder to do if an object is represented

00:15:41,490 --> 00:15:48,120
by potentially an N number of other

00:15:44,870 --> 00:15:50,279
resolvers you're gonna yeah you're going

00:15:48,120 --> 00:15:52,559
to have a harder time cashing that that

00:15:50,279 --> 00:15:54,930
resolver it's going to be harder to

00:15:52,559 --> 00:15:59,009
argue what the data came from it's going

00:15:54,930 --> 00:16:01,079
to be harder to test so I mean here's a

00:15:59,009 --> 00:16:03,930
simple thing that we do you know a user

00:16:01,079 --> 00:16:06,779
can also be a teacher can also be an

00:16:03,930 --> 00:16:09,749
admin we use represent them as direct

00:16:06,779 --> 00:16:14,519
objects they might be represented as the

00:16:09,749 --> 00:16:18,959
same sort of same object in the backend

00:16:14,519 --> 00:16:20,999
but it seems much easier to to argue

00:16:18,959 --> 00:16:24,509
about the data this way but I would love

00:16:20,999 --> 00:16:26,530
to hear if you guys don't agree you tell

00:16:24,509 --> 00:16:29,449
me off

00:16:26,530 --> 00:16:34,980
[Music]

00:16:29,449 --> 00:16:38,399
use while you're designing your schemas

00:16:34,980 --> 00:16:41,120
use the opportunity to dry up your

00:16:38,399 --> 00:16:43,860
client-side code so here's some examples

00:16:41,120 --> 00:16:46,470
so here's the long thing where I'm

00:16:43,860 --> 00:16:50,939
checking if this user that is queried

00:16:46,470 --> 00:16:53,370
it's actually the same user that I'm

00:16:50,939 --> 00:16:55,319
logged in s the common thing I'm looking

00:16:53,370 --> 00:16:57,300
at my own profile you know for example

00:16:55,319 --> 00:17:00,179
this code can can show up everywhere

00:16:57,300 --> 00:17:03,179
just take the opportunity to extend your

00:17:00,179 --> 00:17:05,490
user schema with some you know

00:17:03,179 --> 00:17:08,159
contextual information based on the who

00:17:05,490 --> 00:17:11,699
I medicated as I can used to do user dot

00:17:08,159 --> 00:17:13,589
is me it's not always like sometimes you

00:17:11,699 --> 00:17:15,689
stamp your you user model and you're

00:17:13,589 --> 00:17:16,919
like oh that was it well think about

00:17:15,689 --> 00:17:18,029
some of the cooler things that you can

00:17:16,919 --> 00:17:20,970
actually help out your front-end

00:17:18,029 --> 00:17:23,610
engineers do here's another thing is

00:17:20,970 --> 00:17:26,370
admin instead of doing some like pulling

00:17:23,610 --> 00:17:28,319
down all the roles to the front-end and

00:17:26,370 --> 00:17:29,789
doing and include or something you can

00:17:28,319 --> 00:17:32,149
use do a simple thing like that has

00:17:29,789 --> 00:17:32,149
rolled

00:17:34,330 --> 00:17:39,470
authenticated crane this might make

00:17:37,370 --> 00:17:43,399
sense for some of you guys have done you

00:17:39,470 --> 00:17:44,960
know graphic rail for a long time but it

00:17:43,399 --> 00:17:47,330
might not be obvious that when you're

00:17:44,960 --> 00:17:49,519
visiting a node as an authenticated user

00:17:47,330 --> 00:17:52,000
you can do some really cool things so

00:17:49,519 --> 00:17:55,100
here I'm visiting a teacher fragment

00:17:52,000 --> 00:17:58,039
from an authenticated user and I can

00:17:55,100 --> 00:18:01,159
actually get my my lessons I that's a

00:17:58,039 --> 00:18:03,049
pretty cool thing I'm moving into the

00:18:01,159 --> 00:18:07,190
graph as it with an authenticated

00:18:03,049 --> 00:18:08,720
context and it really empowers I you can

00:18:07,190 --> 00:18:10,549
do really really cool things so don't

00:18:08,720 --> 00:18:12,409
forget about that you have that

00:18:10,549 --> 00:18:13,970
information I have the information I am

00:18:12,409 --> 00:18:16,669
logged in as this person what is my

00:18:13,970 --> 00:18:19,909
relation to this data this object that I

00:18:16,669 --> 00:18:24,529
use looked at there's more my progress

00:18:19,909 --> 00:18:26,840
we have on the lesson I'm following

00:18:24,529 --> 00:18:29,299
instead of like querying some long

00:18:26,840 --> 00:18:30,679
things like follow followers or

00:18:29,299 --> 00:18:34,970
something I can use ask am i following

00:18:30,679 --> 00:18:36,649
this teacher with me as logged in it's

00:18:34,970 --> 00:18:38,570
really powerful so start thinking about

00:18:36,649 --> 00:18:40,850
that too it's like what okay I'm looking

00:18:38,570 --> 00:18:42,620
at this model what can i gather from it

00:18:40,850 --> 00:18:48,200
that I don't have to like offload on the

00:18:42,620 --> 00:18:51,500
on the client okay here's another pretty

00:18:48,200 --> 00:18:56,269
powerful concept that when you are

00:18:51,500 --> 00:18:59,899
coming into an object or a node in your

00:18:56,269 --> 00:19:02,120
graph it's sometimes pretty useful at

00:18:59,899 --> 00:19:05,529
least like makes you code pre-clear if

00:19:02,120 --> 00:19:08,450
you know who your parent is so here's a

00:19:05,529 --> 00:19:11,360
hoo hoo the edge that you you got there

00:19:08,450 --> 00:19:14,679
so here's a pretty straight for example

00:19:11,360 --> 00:19:17,409
I'm getting into this lesson connection

00:19:14,679 --> 00:19:21,919
so I want to see the this is just some

00:19:17,409 --> 00:19:25,610
some lesson query and if I coming from a

00:19:21,919 --> 00:19:27,500
teacher I actually want to see the

00:19:25,610 --> 00:19:30,830
lessons from someone who taught lessons

00:19:27,500 --> 00:19:34,639
and if I'm coming from a user I want to

00:19:30,830 --> 00:19:38,480
know the lessons that that user took

00:19:34,639 --> 00:19:40,070
does that make sense it's easy to get

00:19:38,480 --> 00:19:42,769
this and your code is going to use

00:19:40,070 --> 00:19:46,950
become a lot simpler if you're able to

00:19:42,769 --> 00:19:50,370
argue about the the edge that you

00:19:46,950 --> 00:19:54,320
came there with don't forget that you

00:19:50,370 --> 00:19:54,320
have that information as your Aquarian

00:19:55,430 --> 00:20:02,550
this is sort of the last thing we we

00:19:57,990 --> 00:20:05,820
there's a lot of discussion and sort of

00:20:02,550 --> 00:20:07,860
ideas on how to dedicate best ingress QL

00:20:05,820 --> 00:20:10,440
I don't know if the community of the

00:20:07,860 --> 00:20:12,510
whole is landed on what is best you know

00:20:10,440 --> 00:20:16,080
you could like hide the entire schema

00:20:12,510 --> 00:20:19,140
behind another another endpoint or

00:20:16,080 --> 00:20:20,790
something you could split up objects so

00:20:19,140 --> 00:20:23,250
that like certain models are

00:20:20,790 --> 00:20:25,080
authenticated what we've done that we

00:20:23,250 --> 00:20:29,130
think it's pretty useful is being able

00:20:25,080 --> 00:20:31,650
to on a field by field basis argue if

00:20:29,130 --> 00:20:34,590
the authenticated user should have

00:20:31,650 --> 00:20:36,930
access or not here's an example we

00:20:34,590 --> 00:20:38,580
created this this simple middleware that

00:20:36,930 --> 00:20:42,510
is just for it

00:20:38,580 --> 00:20:45,780
where I can say if I am an admin or if I

00:20:42,510 --> 00:20:49,620
myself you know allow the resolver to

00:20:45,780 --> 00:20:51,960
continue on email we found field by

00:20:49,620 --> 00:20:54,690
field authentication to be a lot simpler

00:20:51,960 --> 00:21:00,330
than any alternatives also interested to

00:20:54,690 --> 00:21:03,090
hear what you guys think but it's it's a

00:21:00,330 --> 00:21:05,820
lot easier than having to block entire

00:21:03,090 --> 00:21:07,860
edge traversal for example if you cut it

00:21:05,820 --> 00:21:08,970
off because I'm not it just gets really

00:21:07,860 --> 00:21:10,880
hard you have to deal with a lot of

00:21:08,970 --> 00:21:13,380
nulls and a lot of throwing errors and

00:21:10,880 --> 00:21:15,630
so we don't do that we you say you're

00:21:13,380 --> 00:21:20,220
not ask this person allowed to enter

00:21:15,630 --> 00:21:22,470
this view yeah that's pretty much it you

00:21:20,220 --> 00:21:25,410
know verbling is always looking for

00:21:22,470 --> 00:21:28,680
people we're growing really fast we're

00:21:25,410 --> 00:21:30,900
doing exciting graphs do all stuff so

00:21:28,680 --> 00:21:34,610
yeah open up for some questions or you

00:21:30,900 --> 00:21:34,610
know so it's made or something

00:21:39,800 --> 00:21:46,640
thanks cuz I'll yeah do you have any

00:21:42,420 --> 00:21:46,640
questions over there

00:21:52,020 --> 00:21:58,930
so look you're kind of lessons learned

00:21:55,470 --> 00:22:01,120
did you give much thought to kind of the

00:21:58,930 --> 00:22:04,300
performance perspective of okay you want

00:22:01,120 --> 00:22:07,660
to create these more simple types and

00:22:04,300 --> 00:22:10,780
keepers like have more types explosion

00:22:07,660 --> 00:22:12,550
versus generic types how does that have

00:22:10,780 --> 00:22:18,640
a perfect match for going and loading

00:22:12,550 --> 00:22:21,460
all this data so the question is a more

00:22:18,640 --> 00:22:23,620
complex object versus simple or use more

00:22:21,460 --> 00:22:25,750
object right so we're building a graph

00:22:23,620 --> 00:22:28,450
of data mmm if you're not getting all

00:22:25,750 --> 00:22:30,550
this data at one time you really get

00:22:28,450 --> 00:22:31,750
into you like a n-squared scenario where

00:22:30,550 --> 00:22:32,710
you've got to keep going back to the

00:22:31,750 --> 00:22:37,840
source of truth and getting more and

00:22:32,710 --> 00:22:39,310
more data yeah so we use the data loader

00:22:37,840 --> 00:22:43,330
from Facebook and also some other

00:22:39,310 --> 00:22:46,330
caching so you know yeah there certainly

00:22:43,330 --> 00:22:47,710
you can certainly make circular sort of

00:22:46,330 --> 00:22:49,990
traversals that will have some

00:22:47,710 --> 00:22:53,410
performance impact I'm pretty sure you

00:22:49,990 --> 00:22:56,740
can DDoS our site or now if you go you

00:22:53,410 --> 00:22:59,140
know we go try it's something that we're

00:22:56,740 --> 00:23:00,970
working on but yeah we're caching layers

00:22:59,140 --> 00:23:04,690
working pretty well so if you're you

00:23:00,970 --> 00:23:06,940
know if you're if you graph end up if

00:23:04,690 --> 00:23:09,340
you're traversal ends up every querying

00:23:06,940 --> 00:23:11,200
the same ID of is the same object that's

00:23:09,340 --> 00:23:20,920
you know that resolver has ever done

00:23:11,200 --> 00:23:24,280
once per proper sort of call well you

00:23:20,920 --> 00:23:26,440
know yeah per project per per ID we do

00:23:24,280 --> 00:23:33,810
one yeah but we don't batch up no we

00:23:26,440 --> 00:23:33,810
don't do that more questions

00:23:38,100 --> 00:23:43,260
hi thanks for birthday to my way and so

00:23:41,250 --> 00:23:45,480
if you do feel that field authentication

00:23:43,260 --> 00:23:47,040
and how do you handle like if you're

00:23:45,480 --> 00:23:48,690
another sign the gate agree return no

00:23:47,040 --> 00:23:50,640
yeah

00:23:48,690 --> 00:23:52,500
so you're from and you have to check for

00:23:50,640 --> 00:23:54,330
every field if it's if it's

00:23:52,500 --> 00:23:57,180
authenticated or not so you have to

00:23:54,330 --> 00:24:01,820
check all the null ability right yeah I

00:23:57,180 --> 00:24:03,870
mean this is sort of this is an early I

00:24:01,820 --> 00:24:05,640
remember I was in discussions with the

00:24:03,870 --> 00:24:09,480
Facebook guys and I think this was kind

00:24:05,640 --> 00:24:12,120
of a a design pattern that that the grad

00:24:09,480 --> 00:24:14,280
school community kind of was forced into

00:24:12,120 --> 00:24:18,060
because the decisions made by Facebook

00:24:14,280 --> 00:24:20,460
and that's like you should be able to

00:24:18,060 --> 00:24:21,990
deal with nulls like you should be able

00:24:20,460 --> 00:24:24,570
to deal with all you would with most of

00:24:21,990 --> 00:24:26,160
your fields being all at some point so

00:24:24,570 --> 00:24:29,010
that's kind of I guess we've kind of

00:24:26,160 --> 00:24:31,200
embraced it like we're kind of okay with

00:24:29,010 --> 00:24:33,780
dealing with Knowles because there's a

00:24:31,200 --> 00:24:36,240
lot of other things around rescue of the

00:24:33,780 --> 00:24:36,540
like kind of demands you to deal with

00:24:36,240 --> 00:24:42,540
them

00:24:36,540 --> 00:24:44,210
so yeah all right thank you hey uh a

00:24:42,540 --> 00:24:47,760
little bit more high-level question

00:24:44,210 --> 00:24:51,990
initially you started out by saying rest

00:24:47,760 --> 00:24:55,740
as convoluted in a sense especially as

00:24:51,990 --> 00:24:58,710
you delivered over long term but then

00:24:55,740 --> 00:25:01,850
you went into a rant about planning for

00:24:58,710 --> 00:25:04,530
the future sorry the rant or letters

00:25:01,850 --> 00:25:07,200
think about the model domain driven

00:25:04,530 --> 00:25:09,300
design object-oriented encapsulation and

00:25:07,200 --> 00:25:11,220
so on and so on and I think this is

00:25:09,300 --> 00:25:13,860
great but here's the question would you

00:25:11,220 --> 00:25:16,290
still consider using rest for certain

00:25:13,860 --> 00:25:18,480
parts of the application stack where it

00:25:16,290 --> 00:25:19,980
makes sense because I always believe you

00:25:18,480 --> 00:25:22,560
know single technology is never the

00:25:19,980 --> 00:25:26,010
solution you should apply a tool where

00:25:22,560 --> 00:25:29,820
it's needed this right yeah sure I mean

00:25:26,010 --> 00:25:32,040
I think with the power of of graphical

00:25:29,820 --> 00:25:35,220
comes in consideration with the clients

00:25:32,040 --> 00:25:35,850
I mean it's a it's a Cray language for

00:25:35,220 --> 00:25:38,670
the client

00:25:35,850 --> 00:25:42,360
so certainly rest for back-end services

00:25:38,670 --> 00:25:45,780
or you know for other yeah

00:25:42,360 --> 00:25:49,230
certainly yeah it's it's not a but but

00:25:45,780 --> 00:25:52,039
I'd say for no we wouldn't go back to

00:25:49,230 --> 00:25:58,309
rest for for any sort of Klein

00:25:52,039 --> 00:26:01,119
side code so all right we have time for

00:25:58,309 --> 00:26:01,119
one more question

00:26:02,710 --> 00:26:08,049
Hey

00:26:04,129 --> 00:26:10,820
so you said you used a relay from Orion

00:26:08,049 --> 00:26:14,899
Janos that beam

00:26:10,820 --> 00:26:17,539
good mutations you know I hear a lot of

00:26:14,899 --> 00:26:19,009
complaints and I agree they are the

00:26:17,539 --> 00:26:21,499
interface is not completely

00:26:19,009 --> 00:26:24,649
straightforward I've heard rumbles about

00:26:21,499 --> 00:26:30,080
it changing but the new things coming

00:26:24,649 --> 00:26:31,970
out I'm looking forward to that but yeah

00:26:30,080 --> 00:26:32,690
other than other than the rights it's

00:26:31,970 --> 00:26:34,639
been pretty good

00:26:32,690 --> 00:26:38,149
I mean it was rockin the beginning is it

00:26:34,639 --> 00:26:40,369
was immature when we first landed it so

00:26:38,149 --> 00:26:44,239
bleh yeah my biggest gripe is for all

00:26:40,369 --> 00:26:45,919
mutations and then I was hoping that

00:26:44,239 --> 00:26:48,259
that sort of an idea behind

00:26:45,919 --> 00:26:50,869
subscriptions would have gone faster I

00:26:48,259 --> 00:26:53,179
mean there doesn't seem to be super

00:26:50,869 --> 00:26:56,149
clear consensus at least outside of

00:26:53,179 --> 00:26:57,889
Facebook kind of how to do it we've been

00:26:56,149 --> 00:27:00,139
trying to you know we experimenting with

00:26:57,889 --> 00:27:02,349
it but yeah other than that it's pretty

00:27:00,139 --> 00:27:02,349
good

00:27:06,130 --> 00:27:09,260
all right let's give ourselves another

00:27:08,440 --> 00:27:14,180
round of applause

00:27:09,260 --> 00:27:14,180

YouTube URL: https://www.youtube.com/watch?v=R8Ny0i5S978


