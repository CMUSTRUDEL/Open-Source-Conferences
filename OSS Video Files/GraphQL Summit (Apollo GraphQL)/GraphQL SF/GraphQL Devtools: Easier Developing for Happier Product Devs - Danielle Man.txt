Title: GraphQL Devtools: Easier Developing for Happier Product Devs - Danielle Man
Publication date: 2017-11-16
Playlist: GraphQL SF
Description: 
	Apollo engineer Danielle Man presents her vision for GraphQL dev tools at our Practical GraphQL meetup on 1/19/17.

Join GraphQL San Francisco for updates on future events: http://www.meetup.com/GraphQL-SF/
Captions: 
	00:00:02,980 --> 00:00:08,889
hi everyone I'm Danielle and I'm a

00:00:05,920 --> 00:00:10,629
front-end web developer here at MDG so

00:00:08,889 --> 00:00:12,129
thank you very much for coming and

00:00:10,629 --> 00:00:14,199
sharing in this meetup at our office

00:00:12,129 --> 00:00:15,459
today which are around graph tool and

00:00:14,199 --> 00:00:17,800
I'm sure you guys are familiar with our

00:00:15,459 --> 00:00:21,429
Apollo project and then we built two

00:00:17,800 --> 00:00:23,470
services on top of those tools and our

00:00:21,429 --> 00:00:26,650
services are both built using graphic QL

00:00:23,470 --> 00:00:29,050
so as a seven web developer on our

00:00:26,650 --> 00:00:30,640
Services team that means that graphic UL

00:00:29,050 --> 00:00:32,349
is a huge part of my workflow every day

00:00:30,640 --> 00:00:35,199
because it's how I get data from our

00:00:32,349 --> 00:00:37,780
server into our app and the app code

00:00:35,199 --> 00:00:39,820
that I work on and then I also work on

00:00:37,780 --> 00:00:43,629
our graphical performance insights tools

00:00:39,820 --> 00:00:45,280
so there's that effect as well and so

00:00:43,629 --> 00:00:48,129
the title of my talk is easier

00:00:45,280 --> 00:00:50,620
developing for happier developers oh and

00:00:48,129 --> 00:00:52,510
that's not only very vague but it's kind

00:00:50,620 --> 00:00:55,960
of cheesy so I just wanted to explain it

00:00:52,510 --> 00:00:58,179
I firmly believe that any developers in

00:00:55,960 --> 00:01:01,269
graphic UL is a happier developer than

00:00:58,179 --> 00:01:03,449
someone who is using other things like

00:01:01,269 --> 00:01:06,040
that's the whole reason graticule exists

00:01:03,449 --> 00:01:07,510
and I called it easier developing for

00:01:06,040 --> 00:01:09,010
happier developers because what i'm

00:01:07,510 --> 00:01:11,830
going to be telling you about today is a

00:01:09,010 --> 00:01:13,810
project that the apollo team did about a

00:01:11,830 --> 00:01:16,180
month ago called apollo client chrome

00:01:13,810 --> 00:01:18,280
dev tools and it's something I'm really

00:01:16,180 --> 00:01:20,860
excited about because I think that dev

00:01:18,280 --> 00:01:22,390
tools are essential art and essential

00:01:20,860 --> 00:01:26,020
tool for every front-end developers

00:01:22,390 --> 00:01:27,550
workflow and you should want and feel

00:01:26,020 --> 00:01:29,500
like you deserve dev tools for every

00:01:27,550 --> 00:01:31,420
part of your stack so I'll be talking

00:01:29,500 --> 00:01:33,130
about sort of graph tool dev tools and

00:01:31,420 --> 00:01:36,520
in the context of these Apollo client

00:01:33,130 --> 00:01:38,950
dev tools we built so here I've just got

00:01:36,520 --> 00:01:41,440
a sneak peek of our dev tools if you

00:01:38,950 --> 00:01:42,790
have never seen them before you can see

00:01:41,440 --> 00:01:45,130
I've got the chrome developer console

00:01:42,790 --> 00:01:47,020
open I'm on the Apollo tab and these are

00:01:45,130 --> 00:01:49,660
the dev tools but I'll get into that a

00:01:47,020 --> 00:01:52,360
lot more later so what I'm going to talk

00:01:49,660 --> 00:01:54,640
about is first why we bought these dev

00:01:52,360 --> 00:01:55,990
tools why we felt the need and then I'm

00:01:54,640 --> 00:01:58,360
gonna go over some of the main features

00:01:55,990 --> 00:02:00,850
of our dev tools and then I'm gonna talk

00:01:58,360 --> 00:02:02,620
about how the existence of these dev

00:02:00,850 --> 00:02:04,150
tools over the last month has vastly

00:02:02,620 --> 00:02:06,340
improved my workflow as a front-end

00:02:04,150 --> 00:02:08,950
developer and then I'll finish up with

00:02:06,340 --> 00:02:10,479
sort of my vision of how I think dev

00:02:08,950 --> 00:02:13,430
tools could be really impactful and

00:02:10,479 --> 00:02:17,189
awesome for everyone in the future

00:02:13,430 --> 00:02:19,230
yeah so let's get into it so there are

00:02:17,189 --> 00:02:22,920
lots of reasons why we all love graph QL

00:02:19,230 --> 00:02:24,930
it's strongly typed it only gives you

00:02:22,920 --> 00:02:28,109
exactly what you asked for it simplifies

00:02:24,930 --> 00:02:29,659
your client logic etc but if you're

00:02:28,109 --> 00:02:31,950
gonna start building with graph QL

00:02:29,659 --> 00:02:33,720
there's sort of more that you need aside

00:02:31,950 --> 00:02:35,700
from just graph QL which is like a

00:02:33,720 --> 00:02:37,680
protocol to get your data you're going

00:02:35,700 --> 00:02:40,139
to need to be able to cache data in your

00:02:37,680 --> 00:02:41,370
app if you're building progressive web

00:02:40,139 --> 00:02:43,680
apps you're going to want to be able to

00:02:41,370 --> 00:02:45,560
provide optimistic UI you're going to be

00:02:43,680 --> 00:02:48,780
able to want to paginate your data like

00:02:45,560 --> 00:02:50,700
one of the main one of the main uses for

00:02:48,780 --> 00:02:52,739
Facebook's graph QL I think at the

00:02:50,700 --> 00:02:53,730
beginning was like their newsfeed so

00:02:52,739 --> 00:02:56,549
you're gonna be able to want to do all

00:02:53,730 --> 00:02:58,109
of these things and all of this logic is

00:02:56,549 --> 00:03:00,060
quite complex but it's not actually

00:02:58,109 --> 00:03:03,359
related to your own app logic so that's

00:03:00,060 --> 00:03:05,010
where graph QL clients come in because

00:03:03,359 --> 00:03:06,239
it's complex logic but you don't want to

00:03:05,010 --> 00:03:09,120
have to build it yourself and then

00:03:06,239 --> 00:03:10,680
repeat it in every app so our open

00:03:09,120 --> 00:03:12,780
source team has a lot of awesome

00:03:10,680 --> 00:03:14,609
graphical clients and projects we

00:03:12,780 --> 00:03:16,980
primarily I think have Apollo client

00:03:14,609 --> 00:03:18,329
Apollo iOS Apollo enjoyed cooking in

00:03:16,980 --> 00:03:21,030
addition to all these other graphical

00:03:18,329 --> 00:03:23,639
tools that we have and when we started

00:03:21,030 --> 00:03:27,479
building with graph QL and Apollo client

00:03:23,639 --> 00:03:28,620
on our Services team at the beginning we

00:03:27,479 --> 00:03:30,599
sort of started to realize that these

00:03:28,620 --> 00:03:33,030
clients are quite complicated and so

00:03:30,599 --> 00:03:36,479
under the hood of the open source team

00:03:33,030 --> 00:03:39,269
or of a follower client that the open

00:03:36,479 --> 00:03:40,919
source team Bella is Redux so Apollo

00:03:39,269 --> 00:03:42,599
client uses the Redux store to store

00:03:40,919 --> 00:03:44,849
everything and to be able to cast your

00:03:42,599 --> 00:03:46,349
data and stuff but when I first started

00:03:44,849 --> 00:03:48,060
using Apollo client I didn't know any of

00:03:46,349 --> 00:03:49,829
this because like the whole point of

00:03:48,060 --> 00:03:52,139
Apollo client is it abstracts this away

00:03:49,829 --> 00:03:53,519
for you so you can use it and like the

00:03:52,139 --> 00:03:55,440
abstract did way that they built it and

00:03:53,519 --> 00:03:57,449
you don't have to know this yet when I

00:03:55,440 --> 00:04:00,389
started having to debug like deep

00:03:57,449 --> 00:04:02,220
problems in my app specifically and I

00:04:00,389 --> 00:04:04,590
started needing to be able to view the

00:04:02,220 --> 00:04:07,169
cat food my app I started having to

00:04:04,590 --> 00:04:09,060
delve into this and like go into the

00:04:07,169 --> 00:04:11,069
Redux dev tools and view the story of my

00:04:09,060 --> 00:04:12,629
cache and stuff and it was kind of

00:04:11,069 --> 00:04:14,400
complex especially for someone who

00:04:12,629 --> 00:04:17,130
didn't build Apollo client to start with

00:04:14,400 --> 00:04:18,570
and for me this was pretty easy to do

00:04:17,130 --> 00:04:20,459
because I could just walk across the

00:04:18,570 --> 00:04:22,320
room and go to someone who actually

00:04:20,459 --> 00:04:25,020
built Apollo client and get them to help

00:04:22,320 --> 00:04:26,250
me but I imagine for a lot of people who

00:04:25,020 --> 00:04:28,230
use Apollo and our other

00:04:26,250 --> 00:04:30,330
some tools who don't have that luxury

00:04:28,230 --> 00:04:33,630
like debugging can be kind of complex

00:04:30,330 --> 00:04:35,550
and so a few months ago when we first

00:04:33,630 --> 00:04:37,860
started dogfooding our own open source

00:04:35,550 --> 00:04:39,300
stuff on our services team we started

00:04:37,860 --> 00:04:41,190
realizing that this might not be super

00:04:39,300 --> 00:04:42,840
easy for all of our users like outside

00:04:41,190 --> 00:04:44,370
of the company and so we started

00:04:42,840 --> 00:04:46,860
throwing around this idea of Apollo

00:04:44,370 --> 00:04:49,560
client dev tools sort of over lunch

00:04:46,860 --> 00:04:51,420
conversations we would talk about what

00:04:49,560 --> 00:04:52,650
types of features we want what types of

00:04:51,420 --> 00:04:55,530
things we want to be able to see and

00:04:52,650 --> 00:04:57,870
stuff and then a month ago we had a

00:04:55,530 --> 00:04:59,700
company-wide engineering hack week so I

00:04:57,870 --> 00:05:01,110
actually got to pair up with some of our

00:04:59,700 --> 00:05:05,960
core contributors on the open source

00:05:01,110 --> 00:05:08,970
team and like build these tools and so

00:05:05,960 --> 00:05:11,669
this is just a picture of the Redux dev

00:05:08,970 --> 00:05:12,960
tools and the whole point is that you

00:05:11,669 --> 00:05:14,790
can see like all the three decks

00:05:12,960 --> 00:05:16,890
specific stuff like the actions and the

00:05:14,790 --> 00:05:18,600
dispatchers but when you use Apollo

00:05:16,890 --> 00:05:20,310
client like you don't care about any of

00:05:18,600 --> 00:05:21,540
that stuff as a user like you only want

00:05:20,310 --> 00:05:22,830
to be able to see this stuff on the

00:05:21,540 --> 00:05:24,930
right which is the state of your cache

00:05:22,830 --> 00:05:28,140
and so the whole point of our dev tools

00:05:24,930 --> 00:05:29,250
was to allow you to sort of develop they

00:05:28,140 --> 00:05:31,710
can get the same debugging experience

00:05:29,250 --> 00:05:34,710
but like way better because you could

00:05:31,710 --> 00:05:36,419
debug at sort of the abstracted layer of

00:05:34,710 --> 00:05:40,710
what you're used to using a Polock

00:05:36,419 --> 00:05:42,120
client at so the next thing I'll do is

00:05:40,710 --> 00:05:45,300
just talk about the features that I've

00:05:42,120 --> 00:05:46,680
been hyping up in our dev tools the

00:05:45,300 --> 00:05:48,810
three main features are one there's a

00:05:46,680 --> 00:05:51,090
graphical implementation so we put

00:05:48,810 --> 00:05:52,440
graphical into the dev tools and that's

00:05:51,090 --> 00:05:54,300
huge and if you guys don't know what

00:05:52,440 --> 00:05:55,320
graphical is it's just an IDE to be able

00:05:54,300 --> 00:05:58,590
to talk to your graph QL

00:05:55,320 --> 00:06:00,600
endpoints another one is we put a query

00:05:58,590 --> 00:06:02,430
watcher into the dev tools so you can

00:06:00,600 --> 00:06:05,340
now see like every query that your app

00:06:02,430 --> 00:06:06,750
is using in the dev tools which is also

00:06:05,340 --> 00:06:08,070
huge because that's something that you

00:06:06,750 --> 00:06:10,340
just like simply could not do before

00:06:08,070 --> 00:06:13,320
like you didn't you didn't actually know

00:06:10,340 --> 00:06:16,020
and then three we made a store inspector

00:06:13,320 --> 00:06:18,510
so this does show the same technical

00:06:16,020 --> 00:06:20,390
data is the Redux store but it shows it

00:06:18,510 --> 00:06:24,300
in an Apollo client friendly way so

00:06:20,390 --> 00:06:26,010
graph QL is a graph so your cache is

00:06:24,300 --> 00:06:27,479
actually a graph like different objects

00:06:26,010 --> 00:06:29,490
have different references to other

00:06:27,479 --> 00:06:30,660
objects and when you're inspecting your

00:06:29,490 --> 00:06:32,669
cache you want to be able to follow

00:06:30,660 --> 00:06:36,570
these references and so that's what our

00:06:32,669 --> 00:06:38,370
store inspector does so I have a few

00:06:36,570 --> 00:06:39,210
general videos to show you the dev tools

00:06:38,370 --> 00:06:42,410
the

00:06:39,210 --> 00:06:42,410
is the first one with graphical

00:07:01,990 --> 00:07:06,400
see and so it's a pretty simple video

00:07:04,300 --> 00:07:08,620
anyone who's used graphical before

00:07:06,400 --> 00:07:12,400
that's probably very familiar that we

00:07:08,620 --> 00:07:14,650
have changes to CSS a little bit but I

00:07:12,400 --> 00:07:16,750
just wanted to go over it sort of the

00:07:14,650 --> 00:07:19,660
features that you just saw of this

00:07:16,750 --> 00:07:22,780
feature in bulleted form so first off

00:07:19,660 --> 00:07:24,310
putting graphical into the dev tools it

00:07:22,780 --> 00:07:26,889
puts an IDE for your graph QL and

00:07:24,310 --> 00:07:28,960
point-like straight into the same page

00:07:26,889 --> 00:07:30,789
that your app is looking at and so what

00:07:28,960 --> 00:07:33,460
this means is typically if you're going

00:07:30,789 --> 00:07:34,630
to setup graphical its graphical it's

00:07:33,460 --> 00:07:36,430
not something we made it something

00:07:34,630 --> 00:07:38,800
Facebook made and exposes the react

00:07:36,430 --> 00:07:40,960
component so you can take it and in a

00:07:38,800 --> 00:07:43,180
separate route on your app you can plop

00:07:40,960 --> 00:07:47,440
it there or maybe you can set up like a

00:07:43,180 --> 00:07:49,180
separate URL with this graphical IDE but

00:07:47,440 --> 00:07:50,830
when you set up graphical that way you

00:07:49,180 --> 00:07:52,900
usually have to end up implementing

00:07:50,830 --> 00:07:55,330
custom logic like login buttons or

00:07:52,900 --> 00:07:57,490
something and it can be like a little

00:07:55,330 --> 00:07:59,620
bit of a process to setup but by putting

00:07:57,490 --> 00:08:01,449
it here into the dev tools we were able

00:07:59,620 --> 00:08:03,190
to leverage the fact that Apollo client

00:08:01,449 --> 00:08:05,860
already has all of that configuration

00:08:03,190 --> 00:08:07,419
for you so you don't have to worry about

00:08:05,860 --> 00:08:09,130
your query headers or your

00:08:07,419 --> 00:08:10,960
authentication or anything because it

00:08:09,130 --> 00:08:13,360
just automatically takes that data from

00:08:10,960 --> 00:08:15,970
Apollo client and it's magically there

00:08:13,360 --> 00:08:17,620
so there's no configuration necessary to

00:08:15,970 --> 00:08:19,889
set up an IDE to talk to your server

00:08:17,620 --> 00:08:23,080
endpoint which we think is huge

00:08:19,889 --> 00:08:26,650
one of my favorite features of graphical

00:08:23,080 --> 00:08:28,120
is the schema Explorer so a schema Auto

00:08:26,650 --> 00:08:30,310
documentation I think is an awesome

00:08:28,120 --> 00:08:31,780
feature of having the dev tools in the

00:08:30,310 --> 00:08:33,550
same page as your app because if you

00:08:31,780 --> 00:08:35,529
want to go and see if something is

00:08:33,550 --> 00:08:37,329
implemented by your back-end team or

00:08:35,529 --> 00:08:39,909
like see if something about your schema

00:08:37,329 --> 00:08:42,039
has changed you just can go explore your

00:08:39,909 --> 00:08:43,390
schema right there and you don't have to

00:08:42,039 --> 00:08:45,399
ask them you don't have to hope that

00:08:43,390 --> 00:08:48,850
they've updated their documentation like

00:08:45,399 --> 00:08:51,040
it just gives you the hard truth through

00:08:48,850 --> 00:08:53,230
this implementation of graphical you can

00:08:51,040 --> 00:08:54,910
query your endpoint directly which it

00:08:53,230 --> 00:08:57,550
always does but one of the cool things

00:08:54,910 --> 00:09:00,070
we've added is this load from cache

00:08:57,550 --> 00:09:01,420
button and so this allows you to

00:09:00,070 --> 00:09:03,880
actually query the state of your cache

00:09:01,420 --> 00:09:06,070
and so you can sort of see what your

00:09:03,880 --> 00:09:09,459
client would see and see what data is

00:09:06,070 --> 00:09:10,779
left to be fetched and then lastly one

00:09:09,459 --> 00:09:12,459
of my favorite parts about putting

00:09:10,779 --> 00:09:13,750
graphical into the dev tools is that

00:09:12,459 --> 00:09:16,569
it's in the same

00:09:13,750 --> 00:09:18,129
Paige as your app itself and so as a

00:09:16,569 --> 00:09:20,350
front-end developer I have this vision

00:09:18,129 --> 00:09:23,379
of what the ideal front-end developer

00:09:20,350 --> 00:09:25,899
experience would be and my vision is you

00:09:23,379 --> 00:09:28,389
never have to leave your app to develop

00:09:25,899 --> 00:09:30,100
it to debug it to improve it like all

00:09:28,389 --> 00:09:32,649
you have to do is have your editor with

00:09:30,100 --> 00:09:34,209
your code and then your browser with

00:09:32,649 --> 00:09:36,579
your app and your dev tools and like

00:09:34,209 --> 00:09:38,769
that's it and so putting graphical in

00:09:36,579 --> 00:09:40,389
here is huge because now you don't have

00:09:38,769 --> 00:09:42,399
to leave your app to get information

00:09:40,389 --> 00:09:46,870
about the data your app is getting like

00:09:42,399 --> 00:09:49,839
it's just all there okay the next is the

00:09:46,870 --> 00:09:54,129
query watcher so here's my next demo

00:09:49,839 --> 00:09:55,930
video you can see we're now looking at

00:09:54,129 --> 00:09:58,660
the queries that this specific page is

00:09:55,930 --> 00:10:02,529
showing but as we change pages this list

00:09:58,660 --> 00:10:05,410
of queries actually also changes and if

00:10:02,529 --> 00:10:07,149
we click on one of these queries you can

00:10:05,410 --> 00:10:09,430
see they're kind of shifting in color

00:10:07,149 --> 00:10:10,990
that means they're reloading you can see

00:10:09,430 --> 00:10:12,879
a really nicely syntax highlighted

00:10:10,990 --> 00:10:16,750
version of the entire query string and

00:10:12,879 --> 00:10:18,459
the variables it's using and it's pretty

00:10:16,750 --> 00:10:20,410
quick but if you caught it there's a

00:10:18,459 --> 00:10:22,269
running graphical button and what that

00:10:20,410 --> 00:10:24,579
does is it copies your entire query

00:10:22,269 --> 00:10:26,259
string and the variables and it takes it

00:10:24,579 --> 00:10:27,850
to the graphical pane it pastes it there

00:10:26,259 --> 00:10:30,370
it clicks the run a graphical button for

00:10:27,850 --> 00:10:32,170
you and it fetches the data so like that

00:10:30,370 --> 00:10:33,639
all happens super quick that's

00:10:32,170 --> 00:10:35,139
definitely my favorite part of like the

00:10:33,639 --> 00:10:38,800
whole dev tools but I'll get into that

00:10:35,139 --> 00:10:41,649
later okay so the bullet-pointed list of

00:10:38,800 --> 00:10:43,839
features here when you see the list of

00:10:41,649 --> 00:10:45,459
active queries in your app and as I

00:10:43,839 --> 00:10:47,019
mentioned in the beginning this is

00:10:45,459 --> 00:10:49,529
something that just didn't exist before

00:10:47,019 --> 00:10:51,550
like you could never see this so simply

00:10:49,529 --> 00:10:53,470
one of my favorite parts about being

00:10:51,550 --> 00:10:55,120
able to see this list is you can really

00:10:53,470 --> 00:10:57,759
easily visualize the different data

00:10:55,120 --> 00:10:59,199
densities of your pages so for example

00:10:57,759 --> 00:11:00,730
your logins page it takes very little

00:10:59,199 --> 00:11:02,889
data because all it needs is data about

00:11:00,730 --> 00:11:04,300
your account but I showed a page up

00:11:02,889 --> 00:11:06,220
there where there were a ton of graphs

00:11:04,300 --> 00:11:08,589
and those graphs are live polling data

00:11:06,220 --> 00:11:11,649
so that they update and stuff that page

00:11:08,589 --> 00:11:12,910
has huge data densities and so as you

00:11:11,649 --> 00:11:14,410
click through the different pages you

00:11:12,910 --> 00:11:17,379
can see these densities really easily

00:11:14,410 --> 00:11:18,790
and I think that's pretty cool and if

00:11:17,379 --> 00:11:21,069
you're using react and you're using the

00:11:18,790 --> 00:11:22,870
dev tools you can see the react

00:11:21,069 --> 00:11:24,910
component that the queries are wrapped

00:11:22,870 --> 00:11:26,630
around which is really valuable because

00:11:24,910 --> 00:11:28,250
if you actually want to

00:11:26,630 --> 00:11:30,350
into your code and like find away this

00:11:28,250 --> 00:11:32,090
query is and find the component that's

00:11:30,350 --> 00:11:34,130
getting its data and consuming the data

00:11:32,090 --> 00:11:37,070
now you already know the name so you can

00:11:34,130 --> 00:11:39,260
just find that super easily you can

00:11:37,070 --> 00:11:41,120
inspect your query strings this is

00:11:39,260 --> 00:11:43,340
particularly valuable if you're using

00:11:41,120 --> 00:11:44,840
fragments that I may be shared across

00:11:43,340 --> 00:11:48,650
queries so they might be stored in

00:11:44,840 --> 00:11:50,690
different files and so here in my pit

00:11:48,650 --> 00:11:52,550
which hopefully people can see and we

00:11:50,690 --> 00:11:54,020
have a query that's using a fragment and

00:11:52,550 --> 00:11:56,630
so normally those are in separate files

00:11:54,020 --> 00:11:58,180
but here you can see it all in one and

00:11:56,630 --> 00:12:00,560
you can view the variables that it used

00:11:58,180 --> 00:12:02,690
which is actually a huge feature because

00:12:00,560 --> 00:12:04,910
a lot of times variables are dynamic so

00:12:02,690 --> 00:12:07,280
they change based on buttons the user

00:12:04,910 --> 00:12:09,140
has clicked on their app or based on the

00:12:07,280 --> 00:12:10,970
URL that the user has so you don't

00:12:09,140 --> 00:12:13,730
always know what query what query

00:12:10,970 --> 00:12:16,970
variables are running um but here you

00:12:13,730 --> 00:12:18,530
can see so you know and then as I said

00:12:16,970 --> 00:12:19,760
before this run and graphical button

00:12:18,530 --> 00:12:23,480
there's like definitely my favorite part

00:12:19,760 --> 00:12:25,310
so before if I wanted to sort of figure

00:12:23,480 --> 00:12:27,470
out and recreate some query that my

00:12:25,310 --> 00:12:30,530
client had done what I would have to do

00:12:27,470 --> 00:12:32,870
is figure out where the query lives copy

00:12:30,530 --> 00:12:34,580
that paste into graphical find all the

00:12:32,870 --> 00:12:36,320
fragments it was using and different

00:12:34,580 --> 00:12:38,300
files copy those paste them into

00:12:36,320 --> 00:12:39,950
graphical and then if I wanted to

00:12:38,300 --> 00:12:42,770
recreate the variables and my client was

00:12:39,950 --> 00:12:44,330
using since our variables are dynamic I

00:12:42,770 --> 00:12:47,030
would usually have to let go and

00:12:44,330 --> 00:12:48,680
console.log something like read what

00:12:47,030 --> 00:12:51,140
variables I use paste them into

00:12:48,680 --> 00:12:52,460
graphical and then I could do it so it

00:12:51,140 --> 00:12:53,930
could usually take like 10 minutes to

00:12:52,460 --> 00:12:55,910
set all this up just to recreate one

00:12:53,930 --> 00:12:58,490
state but this run in graphical ven

00:12:55,910 --> 00:13:00,440
takes like one second it's amazing it

00:12:58,490 --> 00:13:04,280
saved me like hours I think in just a

00:13:00,440 --> 00:13:09,500
month ok the last feature is the store

00:13:04,280 --> 00:13:13,280
inspector so here here's my demo video

00:13:09,500 --> 00:13:15,800
for that you can see a list of all of

00:13:13,280 --> 00:13:18,110
the objects by their ID and then you can

00:13:15,800 --> 00:13:19,670
search them and you can open them as a

00:13:18,110 --> 00:13:21,860
tree so this is actually a reference to

00:13:19,670 --> 00:13:23,300
a different object and I clicked a

00:13:21,860 --> 00:13:25,430
little arrow that was very next to it so

00:13:23,300 --> 00:13:28,910
it hopped to that other object that's

00:13:25,430 --> 00:13:31,100
what you saw there so the value of

00:13:28,910 --> 00:13:33,230
having a store like this is that you can

00:13:31,100 --> 00:13:35,150
inspect your client cache in an Apollo

00:13:33,230 --> 00:13:37,790
client friendly way because we normalize

00:13:35,150 --> 00:13:40,610
all your queries and so any

00:13:37,790 --> 00:13:42,260
you make a query for some object and we

00:13:40,610 --> 00:13:44,180
already have a version of that object

00:13:42,260 --> 00:13:45,550
stored in the cache we take the IDS and

00:13:44,180 --> 00:13:47,720
we match them and we merge them together

00:13:45,550 --> 00:13:49,820
and so the cache is actually kind of

00:13:47,720 --> 00:13:51,470
flat but like in our mental model that's

00:13:49,820 --> 00:13:54,860
all at graph so you want to be able to

00:13:51,470 --> 00:13:56,810
traverse the different links and so

00:13:54,860 --> 00:13:58,430
that's like a huge part of why we

00:13:56,810 --> 00:14:00,410
implemented this ourselves even though

00:13:58,430 --> 00:14:02,630
it does already exist in the Redux dev

00:14:00,410 --> 00:14:03,950
tools and then definitely the best part

00:14:02,630 --> 00:14:06,380
of this is being able to search through

00:14:03,950 --> 00:14:09,560
your store so this search it allows you

00:14:06,380 --> 00:14:11,750
to search by both key and value and this

00:14:09,560 --> 00:14:13,640
is huge because in really really big

00:14:11,750 --> 00:14:15,500
client offs where your cache is huge

00:14:13,640 --> 00:14:18,740
like it would be literally impossible to

00:14:15,500 --> 00:14:21,080
find like some small string without a

00:14:18,740 --> 00:14:22,510
search function so the search is

00:14:21,080 --> 00:14:25,040
enormous

00:14:22,510 --> 00:14:27,590
ok so I just wanted to show you like a

00:14:25,040 --> 00:14:30,560
side by side of sort of redux dev tool

00:14:27,590 --> 00:14:33,590
search or redox dev tool serve voices

00:14:30,560 --> 00:14:37,010
are store you can kind of see the

00:14:33,590 --> 00:14:39,200
difference there okay so workflow

00:14:37,010 --> 00:14:40,820
improvements that I have personally

00:14:39,200 --> 00:14:42,890
experienced I've already sort of

00:14:40,820 --> 00:14:44,810
divulged them off but in an organized

00:14:42,890 --> 00:14:47,180
manner I'll just say that definitely the

00:14:44,810 --> 00:14:48,800
biggest benefit of having the dev tools

00:14:47,180 --> 00:14:51,860
is that everything is all in one place

00:14:48,800 --> 00:14:53,840
so most things were in one place like I

00:14:51,860 --> 00:14:55,460
could edit my CSS and my JavaScript I

00:14:53,840 --> 00:14:56,780
could learn things about my network

00:14:55,460 --> 00:14:58,940
already through the chrome dev tools

00:14:56,780 --> 00:15:00,890
because they're great but now I can also

00:14:58,940 --> 00:15:02,960
learn everything I need to about data

00:15:00,890 --> 00:15:04,670
from my server like also through the dev

00:15:02,960 --> 00:15:08,180
tools like I cannot emphasize enough how

00:15:04,670 --> 00:15:10,820
awesome that is and so I just sort of

00:15:08,180 --> 00:15:13,310
tends to size that more well tell you a

00:15:10,820 --> 00:15:15,740
story of something I experienced trying

00:15:13,310 --> 00:15:19,010
to implement a client feature using a

00:15:15,740 --> 00:15:20,840
REST API I'm like a different team that

00:15:19,010 --> 00:15:24,050
wasn't at this company so the first

00:15:20,840 --> 00:15:26,660
thing I had to do was spec out what my

00:15:24,050 --> 00:15:30,440
client needed like what my future needed

00:15:26,660 --> 00:15:32,990
like the right API see if they already

00:15:30,440 --> 00:15:35,150
had what I needed but they didn't so I

00:15:32,990 --> 00:15:36,740
had to spec out my endpoint and then I

00:15:35,150 --> 00:15:39,050
had to write documentation for it and

00:15:36,740 --> 00:15:40,550
then I had to take it to my back-end

00:15:39,050 --> 00:15:43,190
team and convince them that they should

00:15:40,550 --> 00:15:45,620
implement it fast and then wait for them

00:15:43,190 --> 00:15:46,760
to implement it and then once I had the

00:15:45,620 --> 00:15:48,500
implementation and there was some

00:15:46,760 --> 00:15:49,720
documentation I had to figure out how to

00:15:48,500 --> 00:15:51,550
actually query the endpoint

00:15:49,720 --> 00:15:53,889
because I had to get you know like the

00:15:51,550 --> 00:15:55,360
authentication headers and stuff in so I

00:15:53,889 --> 00:15:56,800
finally figured out that stuff I figured

00:15:55,360 --> 00:16:00,009
out the variables and I made an AJAX

00:15:56,800 --> 00:16:03,370
call but of course I came up with an

00:16:00,009 --> 00:16:05,889
error and so I opened postman and this

00:16:03,370 --> 00:16:10,449
might seem like a long story but that is

00:16:05,889 --> 00:16:12,689
exactly the point so I opened up postman

00:16:10,449 --> 00:16:15,519
I copied all my headers into postman I

00:16:12,689 --> 00:16:16,930
like rerun mega query and postman I like

00:16:15,519 --> 00:16:18,129
tested man point till it worked it

00:16:16,930 --> 00:16:20,379
turned out that the whole reason it

00:16:18,129 --> 00:16:23,529
didn't work was from some silly typo

00:16:20,379 --> 00:16:24,910
which totally sucked so I finally like

00:16:23,529 --> 00:16:27,910
got something that worked I copied it

00:16:24,910 --> 00:16:29,199
back into Ajax I got my data of course

00:16:27,910 --> 00:16:31,389
there was no way to inspect it so I

00:16:29,199 --> 00:16:33,009
logged it to the console I had this JSON

00:16:31,389 --> 00:16:34,389
blog that I been like opened all these

00:16:33,009 --> 00:16:36,759
tiny carrots for it to figure out what

00:16:34,389 --> 00:16:38,500
it actually showed me and finally once I

00:16:36,759 --> 00:16:40,000
decided that it was correct I could

00:16:38,500 --> 00:16:43,240
actually go and do my job which was to

00:16:40,000 --> 00:16:46,540
write the front-end for this data but

00:16:43,240 --> 00:16:48,069
now thanks to graph QL is awesome

00:16:46,540 --> 00:16:50,620
workflow and then the added awesomeness

00:16:48,069 --> 00:16:53,589
of the new dev tools this same workflow

00:16:50,620 --> 00:16:56,139
it is much simpler so all you have to do

00:16:53,589 --> 00:16:58,300
is open the dev tools and inspect the

00:16:56,139 --> 00:16:59,800
state of your schema in a sky using

00:16:58,300 --> 00:17:02,319
graphical is like schema Auto

00:16:59,800 --> 00:17:03,970
documentation that I talked about that

00:17:02,319 --> 00:17:05,230
if something's not there you do have to

00:17:03,970 --> 00:17:08,829
go and like talk to your back-end team

00:17:05,230 --> 00:17:10,360
of course but like you'll know and it's

00:17:08,829 --> 00:17:11,770
there and ready because thanks to this

00:17:10,360 --> 00:17:13,120
introspection query like you know the

00:17:11,770 --> 00:17:14,949
hard truth of what your server has

00:17:13,120 --> 00:17:17,079
available so once you know it's ready

00:17:14,949 --> 00:17:18,909
you just write your query you're already

00:17:17,079 --> 00:17:21,010
in your app you can validate that the

00:17:18,909 --> 00:17:23,620
data is correct because graphical shows

00:17:21,010 --> 00:17:26,409
you the data you don't have to like log

00:17:23,620 --> 00:17:27,760
it to the console and then you write

00:17:26,409 --> 00:17:29,610
your query you get it perfect and then

00:17:27,760 --> 00:17:34,419
you just like go and pop it in your code

00:17:29,610 --> 00:17:36,309
so this is like huge no more relying on

00:17:34,419 --> 00:17:40,630
Doc's no more test and guess and check

00:17:36,309 --> 00:17:42,850
you know like exactly what to do okay so

00:17:40,630 --> 00:17:44,860
the last part of my talk is sort of like

00:17:42,850 --> 00:17:46,150
my vision for the future of like how I

00:17:44,860 --> 00:17:48,610
think dev tools could be awesome

00:17:46,150 --> 00:17:51,159
especially for graphic you all and so

00:17:48,610 --> 00:17:54,700
these are just sort of a few speculative

00:17:51,159 --> 00:17:57,370
ideas that hopefully you get excited

00:17:54,700 --> 00:17:59,230
about because I'm excited about them so

00:17:57,370 --> 00:18:00,850
what idea for like a dev tool

00:17:59,230 --> 00:18:02,170
improvement would be the idea of

00:18:00,850 --> 00:18:04,390
workspaces

00:18:02,170 --> 00:18:05,980
so this past November the chrome dev

00:18:04,390 --> 00:18:08,620
tools team they announced this like

00:18:05,980 --> 00:18:10,630
experimental thing where you could have

00:18:08,620 --> 00:18:11,950
workspaces where if you change the

00:18:10,630 --> 00:18:14,020
assess and the dev tools like that would

00:18:11,950 --> 00:18:16,540
actually save to disk and like change

00:18:14,020 --> 00:18:18,549
files on your disk some idea here with

00:18:16,540 --> 00:18:20,770
graphic you'll dev tool workspaces is

00:18:18,549 --> 00:18:22,600
what if you could change parameters of

00:18:20,770 --> 00:18:24,400
your query so like maybe your query has

00:18:22,600 --> 00:18:25,990
a pull interval or something and you

00:18:24,400 --> 00:18:27,580
could change that like right through the

00:18:25,990 --> 00:18:29,290
dev tool so you could change like some

00:18:27,580 --> 00:18:33,390
other thing about your query and like

00:18:29,290 --> 00:18:37,360
save that right to disk another idea is

00:18:33,390 --> 00:18:40,419
snapshots of the client side store so

00:18:37,360 --> 00:18:42,280
the idea here is since we now know like

00:18:40,419 --> 00:18:44,770
exactly what the state of your caches at

00:18:42,280 --> 00:18:46,660
certain points what if if you wanted to

00:18:44,770 --> 00:18:48,850
report a bug all you had to do is like

00:18:46,660 --> 00:18:51,070
click this export button I would like

00:18:48,850 --> 00:18:52,570
export it to a file and then you just

00:18:51,070 --> 00:18:55,059
send that along with your bug report and

00:18:52,570 --> 00:18:57,370
like there's no more problems of like I

00:18:55,059 --> 00:19:02,460
can't I can't

00:18:57,370 --> 00:19:04,690
what's the word we reproduced yeah

00:19:02,460 --> 00:19:07,090
there's no more problem of like I can't

00:19:04,690 --> 00:19:09,400
reproduce because if you see the bug and

00:19:07,090 --> 00:19:11,230
you just like export the state of your

00:19:09,400 --> 00:19:13,840
cache like they'll be able to see the

00:19:11,230 --> 00:19:16,450
bug too and then another idea here would

00:19:13,840 --> 00:19:17,919
be you can compare like how a pull

00:19:16,450 --> 00:19:21,340
request changes the state of your cache

00:19:17,919 --> 00:19:23,110
so like maybe before and after like a

00:19:21,340 --> 00:19:24,460
particular commit you could compare what

00:19:23,110 --> 00:19:25,929
the states of the cache would be and

00:19:24,460 --> 00:19:27,610
either make sure that they don't change

00:19:25,929 --> 00:19:31,540
or make sure that they change in exactly

00:19:27,610 --> 00:19:34,630
the way that you wanted another idea

00:19:31,540 --> 00:19:36,460
here could be errors so what if you

00:19:34,630 --> 00:19:38,440
could show graph QL errors like really

00:19:36,460 --> 00:19:40,270
really nicely somehow in the dev tools

00:19:38,440 --> 00:19:41,590
because currently they're kind of

00:19:40,270 --> 00:19:44,110
cryptic I don't know if you guys have

00:19:41,590 --> 00:19:46,750
had this feeling but like they're kind

00:19:44,110 --> 00:19:48,130
of hidden sometimes and then also here

00:19:46,750 --> 00:19:49,480
like what if you could print errors from

00:19:48,130 --> 00:19:51,280
a graph QL so every right to your

00:19:49,480 --> 00:19:53,350
console so this would also tie into the

00:19:51,280 --> 00:19:55,809
idea of like never having to leave your

00:19:53,350 --> 00:19:56,890
app to like debug something because it

00:19:55,809 --> 00:20:01,500
would just come right to your client

00:19:56,890 --> 00:20:04,510
console and then a final idea would be

00:20:01,500 --> 00:20:06,490
maybe some graphs about performance so

00:20:04,510 --> 00:20:08,200
what if you could show some sort of

00:20:06,490 --> 00:20:11,590
version of the network tab on the dev

00:20:08,200 --> 00:20:13,870
tools but in a graph QL friendly way or

00:20:11,590 --> 00:20:15,160
what if you could show like the fields

00:20:13,870 --> 00:20:16,720
that all of those queries

00:20:15,160 --> 00:20:18,790
in that list we're using specifically

00:20:16,720 --> 00:20:20,800
and then like compare that against what

00:20:18,790 --> 00:20:23,380
your scheme is actually offering to make

00:20:20,800 --> 00:20:25,780
sure that you're offering like things

00:20:23,380 --> 00:20:28,780
that are aligned and so here at the

00:20:25,780 --> 00:20:31,690
bottom I've put the link to our github

00:20:28,780 --> 00:20:33,670
repo it's a github con slash Apollo

00:20:31,690 --> 00:20:36,220
stack slash Apollo client dev tools and

00:20:33,670 --> 00:20:38,980
so if you guys have any ideas or feature

00:20:36,220 --> 00:20:40,720
requests or anything you should just go

00:20:38,980 --> 00:20:41,920
to our github repo and like open an

00:20:40,720 --> 00:20:45,550
issue we'd love to have a conversation

00:20:41,920 --> 00:20:46,750
with you and that's a perfect time to

00:20:45,550 --> 00:20:49,420
something we're actually doing really

00:20:46,750 --> 00:20:50,530
soon called Apollo contributor week so

00:20:49,420 --> 00:20:53,230
we're always looking for more

00:20:50,530 --> 00:20:54,790
contributors to our Apollo tools because

00:20:53,230 --> 00:20:56,620
we firmly believe that the people who

00:20:54,790 --> 00:20:58,240
use our power tools are like the best

00:20:56,620 --> 00:20:59,380
people to contribute to them because

00:20:58,240 --> 00:21:01,630
they're the ones whose lives we would

00:20:59,380 --> 00:21:03,280
make better and the whole contributor

00:21:01,630 --> 00:21:05,080
week was actually inspired by our hack

00:21:03,280 --> 00:21:06,970
week because I normally don't work on

00:21:05,080 --> 00:21:08,710
our open source team but I got to work

00:21:06,970 --> 00:21:10,090
with like the core people and make this

00:21:08,710 --> 00:21:11,950
tool that has been amazing for my

00:21:10,090 --> 00:21:13,660
workflow so that's the whole idea of

00:21:11,950 --> 00:21:14,620
contributor week is like opening up to

00:21:13,660 --> 00:21:16,750
the whole community

00:21:14,620 --> 00:21:19,240
so you should come to contribute a week

00:21:16,750 --> 00:21:20,800
or participate and get help and

00:21:19,240 --> 00:21:22,780
mentorship from our core team to like

00:21:20,800 --> 00:21:27,430
build things into Apollo that you've

00:21:22,780 --> 00:21:29,350
always wanted ok so here is just a

00:21:27,430 --> 00:21:32,620
screenshot of the Chrome Web Store with

00:21:29,350 --> 00:21:34,510
our dev tools it's an extension you can

00:21:32,620 --> 00:21:37,200
find it in the web store if you just

00:21:34,510 --> 00:21:39,640
search for Apollo or your graph QL and

00:21:37,200 --> 00:21:41,650
if you're using a public client like you

00:21:39,640 --> 00:21:44,470
should definitely download these we've

00:21:41,650 --> 00:21:45,790
already got 1,100 people like happily

00:21:44,470 --> 00:21:48,430
using them and we've had some great

00:21:45,790 --> 00:21:49,630
feedback but just a time to what I said

00:21:48,430 --> 00:21:52,060
up at the beginning at the beginning

00:21:49,630 --> 00:21:54,280
about graph QL dev tools in general if

00:21:52,060 --> 00:21:55,600
you're not using Apollo um I hope that

00:21:54,280 --> 00:21:57,220
I've made it clear that there are some

00:21:55,600 --> 00:21:59,320
really great benefits that are coming

00:21:57,220 --> 00:22:01,990
from graph QL specifically so whatever

00:21:59,320 --> 00:22:03,820
your graph QL stack might be I hope I've

00:22:01,990 --> 00:22:05,680
inspired you to maybe spend a week and

00:22:03,820 --> 00:22:08,110
make your own graph QL dev tools because

00:22:05,680 --> 00:22:11,740
a week of time now will save you like

00:22:08,110 --> 00:22:13,710
many many weeks over in the future and

00:22:11,740 --> 00:22:17,740
I'm a much much happier developer myself

00:22:13,710 --> 00:22:19,780
thanks to the dev tools so easier

00:22:17,740 --> 00:22:21,760
developing for happier developers I hope

00:22:19,780 --> 00:22:22,930
that that title is a little bit more

00:22:21,760 --> 00:22:33,970
clear now

00:22:22,930 --> 00:22:39,700
thank you all for listening alright

00:22:33,970 --> 00:22:44,050
questions over here is the extension

00:22:39,700 --> 00:22:49,300
plug and a propane store or on the

00:22:44,050 --> 00:22:51,130
network tab oh it was a while back in my

00:22:49,300 --> 00:22:55,630
slides so the extension is actually its

00:22:51,130 --> 00:22:57,760
own tab in there like does it look at

00:22:55,630 --> 00:23:00,730
the network to like figure out the

00:22:57,760 --> 00:23:04,000
queries no it looks at the Apollo client

00:23:00,730 --> 00:23:06,520
I can use it to you free day with relay

00:23:04,000 --> 00:23:09,520
no unfortunately this is a product line

00:23:06,520 --> 00:23:11,320
specific but a little bit under the hood

00:23:09,520 --> 00:23:13,030
of an implementation is what we've done

00:23:11,320 --> 00:23:16,480
is we've exposed the Apollo client

00:23:13,030 --> 00:23:18,250
object onto the window object so yeah

00:23:16,480 --> 00:23:20,560
all the data it's showing is like stuff

00:23:18,250 --> 00:23:25,840
specifically from Apollo client make

00:23:20,560 --> 00:23:32,830
sense mm-hmm maybe it's time for someone

00:23:25,840 --> 00:23:35,200
to build relay dev tools yeah does this

00:23:32,830 --> 00:23:37,570
work at all with SSR so let's see the

00:23:35,200 --> 00:23:40,540
query is that the server kind of I guess

00:23:37,570 --> 00:23:42,730
execute um

00:23:40,540 --> 00:23:45,220
I don't actually know I would love to

00:23:42,730 --> 00:23:47,800
talk to you after I might not be the

00:23:45,220 --> 00:23:50,040
person for that question yeah sorry

00:23:47,800 --> 00:23:50,040
about that

00:24:00,669 --> 00:24:05,409
is there a way to set headers in the

00:24:02,679 --> 00:24:07,619
graphical dev tool so that we can stew

00:24:05,409 --> 00:24:10,749
things like send an authorization header

00:24:07,619 --> 00:24:12,429
so what this implementation of graphical

00:24:10,749 --> 00:24:15,159
does is it just makes queries through

00:24:12,429 --> 00:24:17,049
Apollo client itself so if you set up a

00:24:15,159 --> 00:24:18,609
pala client in your app and you've got

00:24:17,049 --> 00:24:20,950
queries working through Apollo client

00:24:18,609 --> 00:24:22,629
like it's making queries through like

00:24:20,950 --> 00:24:25,480
the same interface your app is making

00:24:22,629 --> 00:24:27,009
and so if you want to set specific like

00:24:25,480 --> 00:24:28,419
authorization headers that you would

00:24:27,009 --> 00:24:32,129
probably do that in their Pollak line

00:24:28,419 --> 00:24:32,129
config but it should already be there

00:24:40,269 --> 00:24:45,070
all right if there are no more questions

00:24:42,849 --> 00:24:45,920
let's thank Danielle again for an

00:24:45,070 --> 00:24:54,459
amazing talk

00:24:45,920 --> 00:24:54,459

YouTube URL: https://www.youtube.com/watch?v=3mkgOnSdg2c


