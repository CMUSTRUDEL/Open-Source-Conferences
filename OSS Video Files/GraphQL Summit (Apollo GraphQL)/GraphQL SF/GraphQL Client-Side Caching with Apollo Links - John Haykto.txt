Title: GraphQL Client-Side Caching with Apollo Links - John Haykto
Publication date: 2018-02-21
Playlist: GraphQL SF
Description: 
	At GraphQL SF 2/15/18, John Haykto from Xero speaks about client-side caching in GraphQL.

Follow us on Twitter to get notified about future meetups: https://twitter.com/apollographql

ðŸ‘‰Full Description

An exploration of the current state of client-side caching with Apollo and how Apollo Links can make managing your client-side cache easier and more scaleable.

ðŸ‘‰Slides

https://docs.google.com/presentation/d/1MyqHyTSE8z1kGEacGUm0iXmyPDgjq0bprOZ4VaZCKNU/present?slide=id.g1c27fe4e61_0_78

ðŸ‘‰Interested in Speaking?

We'd love to hear from you! Please message https://twitter.com/evanshauser
Captions: 
	00:00:00,459 --> 00:00:06,290
here we go I'm John hate Co I'm a

00:00:04,010 --> 00:00:08,870
software engineer at zero where I work

00:00:06,290 --> 00:00:11,870
on our expenses app on the website and

00:00:08,870 --> 00:00:15,580
I'm here to talk all about client-side

00:00:11,870 --> 00:00:19,400
caching what Apollo makes easy for us

00:00:15,580 --> 00:00:23,029
where we've had problems and kind of how

00:00:19,400 --> 00:00:25,449
we've gone around those problems but

00:00:23,029 --> 00:00:29,810
first a bit of background this is a

00:00:25,449 --> 00:00:31,820
example gif of our app and the main

00:00:29,810 --> 00:00:34,909
reason I'm showing this here is to show

00:00:31,820 --> 00:00:37,460
that we have a lot of lists a lot of

00:00:34,909 --> 00:00:41,960
filters each one of those tabs has its

00:00:37,460 --> 00:00:44,089
own list and they're all cached so that

00:00:41,960 --> 00:00:45,620
gives us a very non-trivial problem in

00:00:44,089 --> 00:00:48,829
terms of managing them we heard some

00:00:45,620 --> 00:00:51,379
people talking about cache management

00:00:48,829 --> 00:00:53,559
when Evan was up here earlier so I'm

00:00:51,379 --> 00:00:57,309
interested to talk to all of you after

00:00:53,559 --> 00:01:01,639
yeah lots of cash management going on

00:00:57,309 --> 00:01:06,530
and Apollo's made that pretty easy for

00:01:01,639 --> 00:01:10,340
us in some ways first up in place

00:01:06,530 --> 00:01:13,610
updates we don't have to write any cash

00:01:10,340 --> 00:01:18,110
management code if we just want our data

00:01:13,610 --> 00:01:21,560
to be updated in place so ignoring cases

00:01:18,110 --> 00:01:23,360
where I for instance create an expense

00:01:21,560 --> 00:01:26,630
and expect it to show up on a list that

00:01:23,360 --> 00:01:29,600
requires some manual cash management but

00:01:26,630 --> 00:01:31,880
if I'm just updating an expense like I'm

00:01:29,600 --> 00:01:34,520
improving it declining it stuff like

00:01:31,880 --> 00:01:37,520
that it all happens in place no code

00:01:34,520 --> 00:01:43,790
from my perspective very easy a great

00:01:37,520 --> 00:01:45,290
developer experience now that case where

00:01:43,790 --> 00:01:47,750
you create an expense and you expect to

00:01:45,290 --> 00:01:49,120
show up on a list and it doesn't is a

00:01:47,750 --> 00:01:52,280
pretty important case

00:01:49,120 --> 00:01:56,690
similarly deleting the expense it should

00:01:52,280 --> 00:01:58,729
go away if you submit an expense it

00:01:56,690 --> 00:02:01,310
should show up on the submitted list so

00:01:58,729 --> 00:02:02,900
I have this quote I have no idea who

00:02:01,310 --> 00:02:04,909
felt Carlton is I don't know if he

00:02:02,900 --> 00:02:06,310
actually said this but he said there are

00:02:04,909 --> 00:02:09,499
only two hard things in computer science

00:02:06,310 --> 00:02:10,909
cache and validation and naming things

00:02:09,499 --> 00:02:12,770
so that's what I'm going to talk about

00:02:10,909 --> 00:02:16,800
next

00:02:12,770 --> 00:02:18,959
now the way I think most people solve

00:02:16,800 --> 00:02:21,900
this with the Apollo client right now is

00:02:18,959 --> 00:02:24,840
with this update option that you attach

00:02:21,900 --> 00:02:27,810
to a mutation and this gives you direct

00:02:24,840 --> 00:02:30,330
access to your cache so this is their

00:02:27,810 --> 00:02:32,489
example from the docs but if we wanted

00:02:30,330 --> 00:02:33,090
to create a to-do we would read from the

00:02:32,489 --> 00:02:35,459
store

00:02:33,090 --> 00:02:37,790
push it on a list write it back to the

00:02:35,459 --> 00:02:42,450
cache and it would be updated everywhere

00:02:37,790 --> 00:02:45,650
so in this case this is very easy to do

00:02:42,450 --> 00:02:50,010
great developer experience no problems

00:02:45,650 --> 00:02:51,690
but if we go back to something like this

00:02:50,010 --> 00:02:55,319
where we have a lot of different lists

00:02:51,690 --> 00:02:58,799
to manage and variables are involved as

00:02:55,319 --> 00:03:03,510
well in these queries it becomes a lot

00:02:58,799 --> 00:03:05,190
more complicated you'll see that these

00:03:03,510 --> 00:03:08,280
things are basically hard-coded right

00:03:05,190 --> 00:03:11,220
now the query is hard-coded as this to

00:03:08,280 --> 00:03:13,440
do web query so we already know what

00:03:11,220 --> 00:03:16,709
we're reading from the cache but in the

00:03:13,440 --> 00:03:19,530
case of variable base lists you don't

00:03:16,709 --> 00:03:22,170
actually know what lists exist in your

00:03:19,530 --> 00:03:24,780
cache because the user could click

00:03:22,170 --> 00:03:26,130
anything they could choose this employee

00:03:24,780 --> 00:03:27,630
they could use that employee they can

00:03:26,130 --> 00:03:30,299
choose the submitted status they could

00:03:27,630 --> 00:03:32,730
choose the approved status all these

00:03:30,299 --> 00:03:35,250
different cases still need to be handled

00:03:32,730 --> 00:03:39,420
here but we don't have access to them we

00:03:35,250 --> 00:03:43,799
don't know what's happened so the first

00:03:39,420 --> 00:03:47,670
solution we had to that was to store it

00:03:43,799 --> 00:03:51,269
so the Apollo cache stores things by

00:03:47,670 --> 00:03:54,000
unique query and variable keys and we

00:03:51,269 --> 00:03:56,310
would literally listen in redux for all

00:03:54,000 --> 00:03:58,290
these query results and say okay cool

00:03:56,310 --> 00:04:03,180
successful list query let's remember

00:03:58,290 --> 00:04:05,220
that so we can update it later all to

00:04:03,180 --> 00:04:08,519
get around the fact that we don't know

00:04:05,220 --> 00:04:12,650
what queries existed in our cache when

00:04:08,519 --> 00:04:16,440
we're trying to update them and it works

00:04:12,650 --> 00:04:20,940
but it's really complicated all this

00:04:16,440 --> 00:04:27,390
code is weird and it's prone to bugs

00:04:20,940 --> 00:04:30,930
and we've had some but on top of that I

00:04:27,390 --> 00:04:33,660
would like to add that this code has to

00:04:30,930 --> 00:04:36,480
be all the complex cash management code

00:04:33,660 --> 00:04:38,850
that will pass to this callback has to

00:04:36,480 --> 00:04:43,020
be replicated wherever we call this

00:04:38,850 --> 00:04:44,640
mutation so if I had create to do in

00:04:43,020 --> 00:04:46,710
another part of our app in a different

00:04:44,640 --> 00:04:49,740
component I would have to rewrite all

00:04:46,710 --> 00:04:51,480
this code and that's another thing that

00:04:49,740 --> 00:04:53,130
would be very prone to bugs you forget

00:04:51,480 --> 00:04:55,230
to add your update and then QA comes

00:04:53,130 --> 00:04:59,600
back and says hey I created this to do

00:04:55,230 --> 00:05:03,120
it's not on the list what's going on so

00:04:59,600 --> 00:05:06,810
we're thinking about ways that we can

00:05:03,120 --> 00:05:10,170
make this a bit easier and what we came

00:05:06,810 --> 00:05:13,530
up with was to use links which were

00:05:10,170 --> 00:05:16,860
introduced with Apollo client 2 and some

00:05:13,530 --> 00:05:20,130
quick background on links they basically

00:05:16,860 --> 00:05:21,900
sit in your networking layer and they

00:05:20,130 --> 00:05:24,690
have access to all the queries you're

00:05:21,900 --> 00:05:28,740
making all the responses and that makes

00:05:24,690 --> 00:05:31,470
it very very convenient for knowing

00:05:28,740 --> 00:05:34,020
what's in your cache at any point so

00:05:31,470 --> 00:05:37,350
this is an example usage of it we're

00:05:34,020 --> 00:05:39,510
calling it a watch mutation link I'm not

00:05:37,350 --> 00:05:42,780
sure about the name but I think the API

00:05:39,510 --> 00:05:45,330
is good we pass it a cache so it can

00:05:42,780 --> 00:05:49,470
update your cache for you then we

00:05:45,330 --> 00:05:51,810
provide this map which I've made pretty

00:05:49,470 --> 00:05:54,090
much equivalent to the create to do

00:05:51,810 --> 00:05:57,120
example and Apollo's Docs

00:05:54,090 --> 00:05:59,700
so we're saying for any safe to do

00:05:57,120 --> 00:06:04,290
mutation that comes back I want to

00:05:59,700 --> 00:06:07,440
update every to-do list and we pass you

00:06:04,290 --> 00:06:09,360
the mutation results the variables the

00:06:07,440 --> 00:06:13,160
query result the query variables and

00:06:09,360 --> 00:06:17,400
that means all this code is in one place

00:06:13,160 --> 00:06:19,200
if I call safe to do no matter from

00:06:17,400 --> 00:06:20,880
where in my app from what component I

00:06:19,200 --> 00:06:26,130
don't need to write this code ever again

00:06:20,880 --> 00:06:30,420
it's tested it's testable and it makes

00:06:26,130 --> 00:06:36,030
things a bit easier

00:06:30,420 --> 00:06:37,830
because we can just delete this the link

00:06:36,030 --> 00:06:39,960
knows exactly what's in your cache it

00:06:37,830 --> 00:06:42,990
knows all the queries have been made all

00:06:39,960 --> 00:06:46,260
the mutations that have come back we no

00:06:42,990 --> 00:06:49,970
longer need to provide anything to

00:06:46,260 --> 00:06:49,970
something like this we have access to it

00:06:52,880 --> 00:07:02,010
so I think the two problems this really

00:06:57,840 --> 00:07:05,160
solved with these update options is that

00:07:02,010 --> 00:07:07,560
this struggles to scale from a

00:07:05,160 --> 00:07:10,590
developer's perspective as the number of

00:07:07,560 --> 00:07:12,150
queries grow so as we get all these

00:07:10,590 --> 00:07:18,510
crazy lists that we're trying to manage

00:07:12,150 --> 00:07:21,570
and it means that you have to duplicate

00:07:18,510 --> 00:07:23,370
this code every time you call it I think

00:07:21,570 --> 00:07:26,640
an implication of that that I'd like to

00:07:23,370 --> 00:07:29,820
highlight is that using these update

00:07:26,640 --> 00:07:35,340
options very much ties cash management

00:07:29,820 --> 00:07:37,200
logic to your components which they

00:07:35,340 --> 00:07:39,030
shouldn't really be responsible for the

00:07:37,200 --> 00:07:40,380
component doesn't really shouldn't

00:07:39,030 --> 00:07:42,480
really have a conception of what's going

00:07:40,380 --> 00:07:44,310
on in your cache at any one moment it's

00:07:42,480 --> 00:07:46,620
just saying hey I want to create it to

00:07:44,310 --> 00:07:50,490
do and this other component cares about

00:07:46,620 --> 00:07:52,620
the list and that's it so doing it

00:07:50,490 --> 00:07:55,020
through a link also extracts all this

00:07:52,620 --> 00:07:58,320
logic but the components shouldn't

00:07:55,020 --> 00:08:04,200
really have to care about away into just

00:07:58,320 --> 00:08:06,780
the network layer and this we could

00:08:04,200 --> 00:08:11,190
write actually a very very similar link

00:08:06,780 --> 00:08:12,960
which would accomplish the automatic

00:08:11,190 --> 00:08:17,160
in-place updates that Apollo already

00:08:12,960 --> 00:08:19,050
provides for us and I think that's some

00:08:17,160 --> 00:08:19,880
that tells us we're going down the right

00:08:19,050 --> 00:08:24,390
path

00:08:19,880 --> 00:08:27,510
because someone was talking about

00:08:24,390 --> 00:08:30,060
automatic cache updates earlier if we

00:08:27,510 --> 00:08:31,680
could generalize this callback for when

00:08:30,060 --> 00:08:33,660
you're moving from a list based off the

00:08:31,680 --> 00:08:36,630
filter adding to a list based off a

00:08:33,660 --> 00:08:40,580
filter you have automatic cache updating

00:08:36,630 --> 00:08:40,580
and there's nothing you have to do

00:08:42,160 --> 00:08:48,950
see I think I have some extra time so I

00:08:46,130 --> 00:08:51,080
wanted to do a bit of a throwback this

00:08:48,950 --> 00:08:53,900
is what we were doing a year ago

00:08:51,080 --> 00:08:57,080
actually and the way people used to

00:08:53,900 --> 00:08:59,600
update their cache based off a mutation

00:08:57,080 --> 00:09:02,480
was reducer and this was something that

00:08:59,600 --> 00:09:04,550
actually lived on the query so whatever

00:09:02,480 --> 00:09:06,680
component was making your list query you

00:09:04,550 --> 00:09:09,260
would have this reducer and it have

00:09:06,680 --> 00:09:12,160
access to the previous result which is

00:09:09,260 --> 00:09:15,950
whatever's in your cache the action

00:09:12,160 --> 00:09:20,180
which is really the mutation and the

00:09:15,950 --> 00:09:21,920
variables and Apollo deprecated this

00:09:20,180 --> 00:09:24,830
that's why there's a star there please

00:09:21,920 --> 00:09:28,730
don't try this at home but it looks a

00:09:24,830 --> 00:09:34,610
lot like this and I think that

00:09:28,730 --> 00:09:37,850
simplicity is a good thing and we can

00:09:34,610 --> 00:09:40,730
see previous result basically with my

00:09:37,850 --> 00:09:44,600
query and action variables basically a

00:09:40,730 --> 00:09:48,050
mutation but something that this has

00:09:44,600 --> 00:09:50,150
similar to our links is that you could

00:09:48,050 --> 00:09:52,430
update your list based off a lot of

00:09:50,150 --> 00:09:55,880
different mutations very easily in one

00:09:52,430 --> 00:10:01,250
place and you could do that here as well

00:09:55,880 --> 00:10:03,980
just by passing some more callbacks so

00:10:01,250 --> 00:10:06,620
that's all I have I really like to talk

00:10:03,980 --> 00:10:07,940
to people that have also had problems

00:10:06,620 --> 00:10:09,440
with cache management

00:10:07,940 --> 00:10:10,790
this is something that my team and I

00:10:09,440 --> 00:10:14,420
have been talking about for a while and

00:10:10,790 --> 00:10:16,040
by team I mean to people um so I love to

00:10:14,420 --> 00:10:17,390
talk to people who have been solving

00:10:16,040 --> 00:10:20,870
this in different ways learning about

00:10:17,390 --> 00:10:24,070
different use cases I really think this

00:10:20,870 --> 00:10:27,740
is a very easy way to go in terms of

00:10:24,070 --> 00:10:29,890
managing the cache and I hope you will

00:10:27,740 --> 00:10:29,890
too

00:10:30,480 --> 00:10:36,059

YouTube URL: https://www.youtube.com/watch?v=8ZKpIB1pDw8


