Title: Evolving GraphQLHub - Clay Allsopp
Publication date: 2017-11-16
Playlist: GraphQL SF
Description: 
	At GraphQL San Francisco's first meetup, Clay Allsopp of Teespring talks about how he's taken a more idiomatic approach to GraphQL after building GraphQLHub, a site and npm module that lets you query popular APIs with GraphQL.

Join GraphQL San Francisco for updates on future events: http://www.meetup.com/GraphQL-SF/
Read our event summary on Medium: https://medium.com/apollo-stack/graphql-in-2016-a-growing-ecosystem-89846d9bb29e#.tis6c7a0r
Captions: 
	00:00:00,000 --> 00:00:06,299
our next speaker is clay also clay is

00:00:03,899 --> 00:00:08,099
the creator of graph google hub which is

00:00:06,299 --> 00:00:13,259
a website but also an open source

00:00:08,099 --> 00:00:16,859
project where you can query api's like

00:00:13,259 --> 00:00:21,150
github Twitter reddit hacker news with

00:00:16,859 --> 00:00:25,080
graph q oh cool so I'm talk about

00:00:21,150 --> 00:00:27,119
evolving a graph cube and as we were

00:00:25,080 --> 00:00:29,880
saying uh did this work it was kind of

00:00:27,119 --> 00:00:32,700
word that will graph yo hub is wait a

00:00:29,880 --> 00:00:34,649
query popular API is using graph to L so

00:00:32,700 --> 00:00:38,219
for example when cat renews reddit

00:00:34,649 --> 00:00:40,530
Twitter existing rest api's and it's a

00:00:38,219 --> 00:00:43,320
it's a website so you can go to graph yo

00:00:40,530 --> 00:00:45,390
ho kaam you can poke around it's also an

00:00:43,320 --> 00:00:48,360
NPM module so if you ever want to lie to

00:00:45,390 --> 00:00:50,039
include the ability to query reddit or

00:00:48,360 --> 00:00:51,960
Twitter using graph ql in your own apps

00:00:50,039 --> 00:00:53,789
you can just NPM install graphical hub

00:00:51,960 --> 00:00:55,980
schemas and you're good to go there's

00:00:53,789 --> 00:00:58,020
also a medium publication where I right

00:00:55,980 --> 00:00:59,789
about a lot of like graph ql in depth

00:00:58,020 --> 00:01:02,280
topics which is also cool and under this

00:00:59,789 --> 00:01:05,909
sort of like umbrella and that's graph

00:01:02,280 --> 00:01:09,930
20 hub com I can't do this trick I can

00:01:05,909 --> 00:01:11,369
do this trick sweet so wyd we've demoed

00:01:09,930 --> 00:01:14,130
a lot of graphical and this is an

00:01:11,369 --> 00:01:17,880
example of our graphical using the

00:01:14,130 --> 00:01:19,200
hacker news schema that we have so you

00:01:17,880 --> 00:01:20,790
can see that we're do you know much data

00:01:19,200 --> 00:01:22,500
from hacker news much of like posts

00:01:20,790 --> 00:01:25,320
we're getting the authors we're getting

00:01:22,500 --> 00:01:26,880
all kinds of really awesome data on the

00:01:25,320 --> 00:01:28,380
side you can kind of see the different

00:01:26,880 --> 00:01:30,180
API as we offer and how this is part of

00:01:28,380 --> 00:01:32,310
the schema I won't go into too much in

00:01:30,180 --> 00:01:34,049
depth but it's fun you should play

00:01:32,310 --> 00:01:35,759
around and you know put in your own

00:01:34,049 --> 00:01:39,060
Twitter handles or hacker news handles

00:01:35,759 --> 00:01:40,799
and see what's out there but the

00:01:39,060 --> 00:01:47,850
interesting thing is how this is evolved

00:01:40,799 --> 00:01:49,140
over the past year or so whoops cool and

00:01:47,850 --> 00:01:51,780
basically it started with these rest

00:01:49,140 --> 00:01:53,850
api's that i converted to sort of like

00:01:51,780 --> 00:01:54,930
graph to all queries and then I kind of

00:01:53,850 --> 00:01:56,549
got a better understanding of gravity

00:01:54,930 --> 00:01:58,380
well after doing this a few times and

00:01:56,549 --> 00:02:00,540
made a more idiomatic approach to graft

00:01:58,380 --> 00:02:02,790
you well and that's a version that's

00:02:00,540 --> 00:02:04,649
more compatible with relay and then I

00:02:02,790 --> 00:02:06,869
also like as more people started to use

00:02:04,649 --> 00:02:08,580
the service looked into performance and

00:02:06,869 --> 00:02:11,069
how do you actually instrument a graph

00:02:08,580 --> 00:02:12,710
GL server so the first part of this

00:02:11,069 --> 00:02:14,270
comes from

00:02:12,710 --> 00:02:16,040
like real a like I thought really it was

00:02:14,270 --> 00:02:18,230
very very cool and I wanted to build

00:02:16,040 --> 00:02:20,810
some apps using relay but one of the

00:02:18,230 --> 00:02:22,280
prerequisites of relay is that you have

00:02:20,810 --> 00:02:24,980
a graph ql server and I didn't have one

00:02:22,280 --> 00:02:28,390
of those lying around in August and like

00:02:24,980 --> 00:02:30,800
no one did so I decided to roll my own

00:02:28,390 --> 00:02:34,070
and what I wanted to do is I want to

00:02:30,800 --> 00:02:36,050
write this I wanted to write article on

00:02:34,070 --> 00:02:37,400
how to build a hacker news client with

00:02:36,050 --> 00:02:40,100
relay which seems that a really cool way

00:02:37,400 --> 00:02:42,020
to dog food relay right but there's no

00:02:40,100 --> 00:02:45,530
hacker news graft you old server so

00:02:42,020 --> 00:02:46,790
instead when I wrote this I said hey you

00:02:45,530 --> 00:02:49,670
can use this thing called graft you I'll

00:02:46,790 --> 00:02:52,850
hub and that lets you query hacker news

00:02:49,670 --> 00:02:55,220
using graph ql and internet let's use

00:02:52,850 --> 00:02:56,600
relay and lets you you know Cole like to

00:02:55,220 --> 00:03:01,340
locate queries and do the awesome stuff

00:02:56,600 --> 00:03:03,980
at Joe is just talking about so this was

00:03:01,340 --> 00:03:05,360
the version of the the schema at that

00:03:03,980 --> 00:03:07,670
point in time so you can see you like

00:03:05,360 --> 00:03:09,860
we're getting the top stories there's a

00:03:07,670 --> 00:03:12,470
slight by field I've returns an ID

00:03:09,860 --> 00:03:15,950
there's this thing called kids which

00:03:12,470 --> 00:03:18,230
seems trying to funky and a lot of us is

00:03:15,950 --> 00:03:20,630
actually derived from the actual hacker

00:03:18,230 --> 00:03:23,780
news rest api so hacker news the hacker

00:03:20,630 --> 00:03:28,160
news rest api let uses the word kids it

00:03:23,780 --> 00:03:30,850
uses ids score these are all like nouns

00:03:28,160 --> 00:03:33,230
that i borrow directly from the rest api

00:03:30,850 --> 00:03:34,670
but one of the cool benefits of having

00:03:33,230 --> 00:03:36,290
someone draft you'll server as you can

00:03:34,670 --> 00:03:39,260
see in the original hacker news API

00:03:36,290 --> 00:03:41,420
these t these kids are actually just ids

00:03:39,260 --> 00:03:43,310
and so if you want to actually find an

00:03:41,420 --> 00:03:45,200
ace of information for this kid you have

00:03:43,310 --> 00:03:46,970
to do like another rest query so if you

00:03:45,200 --> 00:03:48,860
want to do like in kids you to do in

00:03:46,970 --> 00:03:50,930
rest queries and doing that on the

00:03:48,860 --> 00:03:53,150
client would kind of suck so this is all

00:03:50,930 --> 00:03:54,410
actually a little bit done in parallel

00:03:53,150 --> 00:03:55,730
on the server and that's when the

00:03:54,410 --> 00:03:57,230
benefits of gravity wells you can do

00:03:55,730 --> 00:03:59,060
these kind of like parallelization

00:03:57,230 --> 00:04:04,070
optimizations and the client doesn't

00:03:59,060 --> 00:04:05,660
have to know about it that's like syrup

00:04:04,070 --> 00:04:07,100
for a more extreme example you know

00:04:05,660 --> 00:04:08,930
we're dating five kids we're getting

00:04:07,100 --> 00:04:12,560
five more stories based on those that's

00:04:08,930 --> 00:04:13,670
like 25 total rest api calls on it and

00:04:12,560 --> 00:04:16,010
this is all done on the server which is

00:04:13,670 --> 00:04:17,210
nice and it's all very declarative now

00:04:16,010 --> 00:04:20,000
lets us write this at the end of the day

00:04:17,210 --> 00:04:22,669
a nice little real a container for a

00:04:20,000 --> 00:04:24,770
hacker news story and so as like a

00:04:22,669 --> 00:04:25,500
person writing an app a mobile app or

00:04:24,770 --> 00:04:26,790
web app all

00:04:25,500 --> 00:04:28,260
have to do is you know drop in this

00:04:26,790 --> 00:04:32,430
little bit of gravity well and I'm good

00:04:28,260 --> 00:04:34,890
to go and so that was like around

00:04:32,430 --> 00:04:37,020
September ish and I added more support

00:04:34,890 --> 00:04:39,750
for like after news Twitter reddit some

00:04:37,020 --> 00:04:42,570
more I naturally had Twitter I'll get to

00:04:39,750 --> 00:04:44,250
that in a minute but the next part of

00:04:42,570 --> 00:04:46,160
like my exploration of all this this

00:04:44,250 --> 00:04:48,420
ecosystem is actually doing mutations

00:04:46,160 --> 00:04:53,250
mutations are a little bit more

00:04:48,420 --> 00:04:55,290
complicated than just getting data

00:04:53,250 --> 00:04:58,740
mutations are inherently like hairy

00:04:55,290 --> 00:05:01,080
thing you need to like change the data

00:04:58,740 --> 00:05:02,160
in a way both on the server and the

00:05:01,080 --> 00:05:03,960
client and have some kind of like

00:05:02,160 --> 00:05:06,990
loading state while that happens maybe

00:05:03,960 --> 00:05:09,240
do a optimistic update and the cool

00:05:06,990 --> 00:05:12,120
thing is if you use relay really has a

00:05:09,240 --> 00:05:14,460
very kind of well-defined system of how

00:05:12,120 --> 00:05:15,360
to do mutations but to buy into it you

00:05:14,460 --> 00:05:20,520
have to buy into all the other

00:05:15,360 --> 00:05:22,800
mechanisms that relay prescribes so

00:05:20,520 --> 00:05:24,600
essentially really assumes that your

00:05:22,800 --> 00:05:26,310
graph ql server isn't just random graph

00:05:24,600 --> 00:05:29,460
to well it's actually a well-defined

00:05:26,310 --> 00:05:31,500
graph ql structure so for example it

00:05:29,460 --> 00:05:33,780
expects a top-level node field where you

00:05:31,500 --> 00:05:36,479
can query any object in your entire

00:05:33,780 --> 00:05:38,940
universe of objects it defines a

00:05:36,479 --> 00:05:42,030
structure for pagination which Joe is

00:05:38,940 --> 00:05:43,350
just talking about and these are things

00:05:42,030 --> 00:05:45,840
that like most rest api is i don't

00:05:43,350 --> 00:05:47,760
support out of the box a lot of things

00:05:45,840 --> 00:05:49,710
you know as we've talked about use like

00:05:47,760 --> 00:05:51,090
limit and offset they might do cursor

00:05:49,710 --> 00:05:52,680
pagination they might do it in some

00:05:51,090 --> 00:05:58,710
other funky way that's not quite the way

00:05:52,680 --> 00:06:00,780
that relay thinks about it and so to

00:05:58,710 --> 00:06:01,979
make this you know illustrative the way

00:06:00,780 --> 00:06:04,710
that relay wants you to think about it

00:06:01,979 --> 00:06:06,330
is as your data as it truly as a graph

00:06:04,710 --> 00:06:09,330
so you can query any of these different

00:06:06,330 --> 00:06:10,740
objects in your graph independently you

00:06:09,330 --> 00:06:13,560
can query the current user or you can

00:06:10,740 --> 00:06:17,520
query any comment or post and the edges

00:06:13,560 --> 00:06:20,850
connected to them using global unique

00:06:17,520 --> 00:06:23,460
IDs and so the problem with the original

00:06:20,850 --> 00:06:25,050
hacker news API I had kind of

00:06:23,460 --> 00:06:26,700
constructed with graph G well is that it

00:06:25,050 --> 00:06:28,890
didn't conform to this at all it was

00:06:26,700 --> 00:06:30,000
just like kids and these other nouns and

00:06:28,890 --> 00:06:32,760
verbs that really didn't really know

00:06:30,000 --> 00:06:35,340
what to do with and then I kind of

00:06:32,760 --> 00:06:37,650
evolved that into this new version which

00:06:35,340 --> 00:06:39,000
actually has proper pagination so you

00:06:37,650 --> 00:06:40,730
can see that there's like a

00:06:39,000 --> 00:06:42,660
page info feign which tells you

00:06:40,730 --> 00:06:45,330
information about how the cursors work

00:06:42,660 --> 00:06:48,600
it uses edges correctly in cursors and

00:06:45,330 --> 00:06:50,160
nodes it uses like query fragments to

00:06:48,600 --> 00:06:53,010
pick out which type of node you're going

00:06:50,160 --> 00:06:57,740
to return and the way I think about this

00:06:53,010 --> 00:07:00,450
is actually as a like idiomatic graph ql

00:06:57,740 --> 00:07:02,340
so instead of you know like a hodgepodge

00:07:00,450 --> 00:07:03,960
of different techniques this actually

00:07:02,340 --> 00:07:06,630
adds a little bit more formal structure

00:07:03,960 --> 00:07:08,250
to your graph ql endpoint I'm sure

00:07:06,630 --> 00:07:09,570
everyone's use different rest api sore

00:07:08,250 --> 00:07:11,130
you know they might they might all

00:07:09,570 --> 00:07:13,200
nominally be rest but they have very

00:07:11,130 --> 00:07:14,790
different patterns between them I have

00:07:13,200 --> 00:07:16,830
imagined that very easily happening with

00:07:14,790 --> 00:07:20,220
different graph to all servers where if

00:07:16,830 --> 00:07:21,930
you kind of take your application of

00:07:20,220 --> 00:07:24,150
rest and then just like kind of poured

00:07:21,930 --> 00:07:25,890
it wholesale over to draft ql you can

00:07:24,150 --> 00:07:27,810
end up with a very different ecosystem

00:07:25,890 --> 00:07:29,820
of gravity-well queries that's not going

00:07:27,810 --> 00:07:31,320
to be portable or take advantage of a

00:07:29,820 --> 00:07:33,150
lot of the client side work like wait

00:07:31,320 --> 00:07:34,470
like and relay or other like crack to

00:07:33,150 --> 00:07:40,440
our clients that are coming down the

00:07:34,470 --> 00:07:41,940
pipe so eventually I arrived at this

00:07:40,440 --> 00:07:45,479
conclusion that hey I should like adopt

00:07:41,940 --> 00:07:47,430
this idiomatic graph ql structure and

00:07:45,479 --> 00:07:51,750
along the way like more people started

00:07:47,430 --> 00:07:54,030
using graph ql hub so performance is

00:07:51,750 --> 00:07:55,620
really important here's like a rough

00:07:54,030 --> 00:07:57,780
graph of the queries per day for graft

00:07:55,620 --> 00:07:59,160
wheel from the past week I don't know

00:07:57,780 --> 00:08:00,930
what where a lot of these come from but

00:07:59,160 --> 00:08:06,030
it's pretty cool it's enough data to

00:08:00,930 --> 00:08:08,610
actually have some interesting light

00:08:06,030 --> 00:08:10,650
instrumentation behind so this is like

00:08:08,610 --> 00:08:13,620
the number of raw queries that graph qo

00:08:10,650 --> 00:08:16,260
hub gets and this is the queries broken

00:08:13,620 --> 00:08:19,440
down by which field and resolver so you

00:08:16,260 --> 00:08:21,210
can see like the hacker news API calls

00:08:19,440 --> 00:08:23,130
are broken down they take approximately

00:08:21,210 --> 00:08:25,620
light to less than a second some of the

00:08:23,130 --> 00:08:27,060
reddit API calls are super fast and then

00:08:25,620 --> 00:08:28,380
there's a lot of fields in here that

00:08:27,060 --> 00:08:30,200
I've just like omitted because they're

00:08:28,380 --> 00:08:33,060
in memory and they're instantaneous I

00:08:30,200 --> 00:08:36,180
know that this is 50 the fifty percent

00:08:33,060 --> 00:08:37,530
time so basically median and then if you

00:08:36,180 --> 00:08:39,270
go to like ninety-five percent of the

00:08:37,530 --> 00:08:41,120
time there's some like funky hacker news

00:08:39,270 --> 00:08:43,440
API calls that Tate like over a minute

00:08:41,120 --> 00:08:45,420
and it's really important to instrument

00:08:43,440 --> 00:08:46,890
this like whenever you whenever you

00:08:45,420 --> 00:08:48,540
eventually launch a graph to all server

00:08:46,890 --> 00:08:51,120
in production you want to understand how

00:08:48,540 --> 00:08:52,620
it works it's it's not like an arrest

00:08:51,120 --> 00:08:55,170
where you can kind of instrument each

00:08:52,620 --> 00:08:56,640
point like a new relic you're going to

00:08:55,170 --> 00:08:57,960
have one graft you'll end point and you

00:08:56,640 --> 00:09:00,930
actually need to instrument a system a

00:08:57,960 --> 00:09:02,580
little bit more in depth and it wasn't

00:09:00,930 --> 00:09:04,650
it still isn't really understood and the

00:09:02,580 --> 00:09:06,240
open source community how you do this it

00:09:04,650 --> 00:09:08,490
really depends on what implementation of

00:09:06,240 --> 00:09:10,170
graphical server you're using and in

00:09:08,490 --> 00:09:12,540
this case like I use a vanilla

00:09:10,170 --> 00:09:13,770
JavaScript one and I actually you can

00:09:12,540 --> 00:09:15,839
actually go on get up and see like how

00:09:13,770 --> 00:09:18,870
this works it's basically I got drop in

00:09:15,839 --> 00:09:21,420
middleware that you add and you can pipe

00:09:18,870 --> 00:09:22,830
it out to in this case I'm using quinta

00:09:21,420 --> 00:09:24,450
I oh but you can imagine putting it into

00:09:22,830 --> 00:09:29,339
stats d or whatever other metrics

00:09:24,450 --> 00:09:31,920
service you want and finally like it's

00:09:29,339 --> 00:09:33,390
really cool to see as I've kind of like

00:09:31,920 --> 00:09:35,940
made these changes and people I took

00:09:33,390 --> 00:09:37,950
this little journey with graph ql how

00:09:35,940 --> 00:09:40,140
the community is sort of responded so

00:09:37,950 --> 00:09:41,580
for example the the Twitter in point on

00:09:40,140 --> 00:09:43,650
graph tol hub is entirely like a

00:09:41,580 --> 00:09:44,880
community thing just like a pull request

00:09:43,650 --> 00:09:48,060
that was open one day I thought was

00:09:44,880 --> 00:09:49,740
super awesome and again this is all like

00:09:48,060 --> 00:09:51,570
open source if you're interested in how

00:09:49,740 --> 00:09:53,070
any of this code works under the hood or

00:09:51,570 --> 00:09:57,750
you want to contribute back to it like

00:09:53,070 --> 00:09:59,850
go for it and here's an example of that

00:09:57,750 --> 00:10:03,330
Twitter in point so you can see that

00:09:59,850 --> 00:10:05,040
light this is still kind of using a lot

00:10:03,330 --> 00:10:08,100
of techniques that are just taking from

00:10:05,040 --> 00:10:09,540
rest so for example tweets returns an

00:10:08,100 --> 00:10:12,060
actual array of tweets not like a

00:10:09,540 --> 00:10:13,920
pagination construct and it's actually

00:10:12,060 --> 00:10:16,080
kind of hard with api's that don't

00:10:13,920 --> 00:10:18,300
natively support cursors to add the kind

00:10:16,080 --> 00:10:19,950
of cursor based pagination and so it'll

00:10:18,300 --> 00:10:21,360
be cool you know throughout this year to

00:10:19,950 --> 00:10:23,550
see more and more api's adopting that

00:10:21,360 --> 00:10:28,589
perhaps using graphical natively or

00:10:23,550 --> 00:10:31,350
inside of rest itself so yeah I know

00:10:28,589 --> 00:10:33,330
that was a really fast talk but thanks

00:10:31,350 --> 00:10:36,110
for listening and check out graph qol

00:10:33,330 --> 00:10:36,110
hub it's pretty neat

00:10:41,310 --> 00:10:54,610
do you have any questions from the

00:10:43,570 --> 00:10:57,910
audience so the question was if anyone's

00:10:54,610 --> 00:11:00,910
tried wrapping the Wikipedia API and

00:10:57,910 --> 00:11:04,450
graph your hub no um that sounds really

00:11:00,910 --> 00:11:05,950
cool you should do it though I I've

00:11:04,450 --> 00:11:07,839
played an open PR for the Facebook API

00:11:05,950 --> 00:11:09,700
which I think we kind of interesting to

00:11:07,839 --> 00:11:12,820
see in graphical I'm sure lie to this

00:11:09,700 --> 00:11:14,710
guy has an opinion on how it works but

00:11:12,820 --> 00:11:16,240
you lie like you know there's so many

00:11:14,710 --> 00:11:18,880
api's out there and be really cool just

00:11:16,240 --> 00:11:21,040
to see like how well we've how well they

00:11:18,880 --> 00:11:31,120
can adopt a graph qo and like go for it

00:11:21,040 --> 00:11:33,520
yeah there's another question so the

00:11:31,120 --> 00:11:36,430
question was if all the api's can be

00:11:33,520 --> 00:11:38,080
consumed by relay so it's actually

00:11:36,430 --> 00:11:40,450
pretty funny the first hacker news

00:11:38,080 --> 00:11:42,400
graphic UL binding i did basically

00:11:40,450 --> 00:11:44,350
worked with relay by coincidence it

00:11:42,400 --> 00:11:46,570
happened to be that all the ids and

00:11:44,350 --> 00:11:48,010
hector news are universally unique I

00:11:46,570 --> 00:11:49,540
didn't like impose any restrictions

00:11:48,010 --> 00:11:50,890
whereas like another API is that's not

00:11:49,540 --> 00:11:52,000
the case at all I'd read it like some of

00:11:50,890 --> 00:11:53,380
the right at AP is or like you're going

00:11:52,000 --> 00:11:55,810
to get ID televisions unless you do

00:11:53,380 --> 00:11:57,640
something more intelligent so for now

00:11:55,810 --> 00:11:59,440
the hacker news ones do there's a

00:11:57,640 --> 00:12:01,150
mutations API that's just like a simple

00:11:59,440 --> 00:12:03,700
key value store that's definitely

00:12:01,150 --> 00:12:04,930
compatible with relay the other ones

00:12:03,700 --> 00:12:06,250
probably need a little bit more love to

00:12:04,930 --> 00:12:09,250
date up to like the pagination sort of

00:12:06,250 --> 00:12:13,920
stuff I didn't like PRS would be awesome

00:12:09,250 --> 00:12:13,920
if you're if you're into that so yeah oh

00:12:15,570 --> 00:12:19,170
there's one more question

00:12:25,620 --> 00:12:30,390
so the question was with your experience

00:12:28,980 --> 00:12:32,790
of building graphical hub is there

00:12:30,390 --> 00:12:36,060
anything about graphic ql or relay that

00:12:32,790 --> 00:12:37,710
you would change if you could i think a

00:12:36,060 --> 00:12:40,770
lot of the work the apollo folks are

00:12:37,710 --> 00:12:43,279
doing light with integrating Redux into

00:12:40,770 --> 00:12:47,460
like a draftable clients pretty cool

00:12:43,279 --> 00:12:49,290
besides that like I'm interested to see

00:12:47,460 --> 00:12:51,060
how instrumentation and performance

00:12:49,290 --> 00:12:52,950
factors in as more people adopt draft

00:12:51,060 --> 00:12:55,430
well more widely I think it's not a very

00:12:52,950 --> 00:12:58,380
well explored or understood thing like

00:12:55,430 --> 00:12:59,970
this really awesome issues that have

00:12:58,380 --> 00:13:02,339
comments on it but there's no rules like

00:12:59,970 --> 00:13:04,350
drop in solution right now so it'll be

00:13:02,339 --> 00:13:05,760
cool to see like how that evolves but

00:13:04,350 --> 00:13:07,260
nothing specific to the actual like

00:13:05,760 --> 00:13:11,490
format graphical or anything at this

00:13:07,260 --> 00:13:13,760
point okay let's thank clay again first

00:13:11,490 --> 00:13:13,760

YouTube URL: https://www.youtube.com/watch?v=HVXmMll29fY


