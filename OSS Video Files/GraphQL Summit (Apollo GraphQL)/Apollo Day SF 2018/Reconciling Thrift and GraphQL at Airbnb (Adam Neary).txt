Title: Reconciling Thrift and GraphQL at Airbnb (Adam Neary)
Publication date: 2018-06-05
Playlist: Apollo Day SF 2018
Description: 
	Talk from Apollo Day SF (May 31, 2018)

Adam Neary, technical lead at Airbnb, describes his team's approach to transitioning Airbnb's product engineering stack to Apollo and GraphQL, leveraging the company's investments in Thrift-based microservices while gaining the product development benefits of GraphQL and the full-stack Apollo suite of tools. Adam shows how infrastructure and product engineers collaborated on design requirements and gives a close look at some of the design and implementation they're rolling out in production.

* Learn more at https://www.apollographql.com (https://www.apollographql.com/)

* Read our technical blog: https://dev-blog.apollodata.com (https://dev-blog.apollodata.com/)

* Join Apollo's Community Slack group: https://www.apollographql.com/slack

* Register for the 3rd annual GraphQL Summit 2018, the world's largest GraphQL developer conference: https://summit.graphql.com/
Captions: 
	00:00:01,920 --> 00:00:06,390
thanks everyone I'm Adam Neary I'm a

00:00:04,230 --> 00:00:08,130
front-end engineer at Airbnb I know it's

00:00:06,390 --> 00:00:09,930
been a long day of talk so far I

00:00:08,130 --> 00:00:11,580
appreciate everyone sticking it out to

00:00:09,930 --> 00:00:13,769
the afternoon and I hope we got some

00:00:11,580 --> 00:00:15,000
interesting content for you I want to

00:00:13,769 --> 00:00:16,379
thank the previous presenters I actually

00:00:15,000 --> 00:00:17,580
was so psyched about some of the stuff

00:00:16,379 --> 00:00:19,800
James was talking about it's not about

00:00:17,580 --> 00:00:21,570
skipping my own talk and getting rolling

00:00:19,800 --> 00:00:23,010
with suspense I think it's gonna be some

00:00:21,570 --> 00:00:25,740
really really cool stuff coming down the

00:00:23,010 --> 00:00:27,270
road and so if you were at the very

00:00:25,740 --> 00:00:29,640
first talks to Matt said the best

00:00:27,270 --> 00:00:31,740
practice is to have node like across the

00:00:29,640 --> 00:00:33,780
whole stack especially at the the server

00:00:31,740 --> 00:00:35,850
level you might be on a team where

00:00:33,780 --> 00:00:37,050
that's just not possible at Airbnb we

00:00:35,850 --> 00:00:39,089
were definitely on the team where that

00:00:37,050 --> 00:00:40,559
was not possible so I want to talk to

00:00:39,089 --> 00:00:41,609
you about kind of the the journey that

00:00:40,559 --> 00:00:43,199
we went through the process we went

00:00:41,609 --> 00:00:44,699
through and the talk today I'm going to

00:00:43,199 --> 00:00:46,889
split into two parts first of all like

00:00:44,699 --> 00:00:49,079
why we set ourselves up the way we did

00:00:46,889 --> 00:00:51,179
and then we're gonna talk about how we

00:00:49,079 --> 00:00:53,190
set it up so if you're a manager or

00:00:51,179 --> 00:00:54,629
you're a sort of a more architect sort

00:00:53,190 --> 00:00:56,789
of person the first half is kind of more

00:00:54,629 --> 00:00:57,989
geared towards you and if you're an

00:00:56,789 --> 00:00:59,639
engineer free down on the weeds like the

00:00:57,989 --> 00:01:01,769
second half is is more geared towards

00:00:59,639 --> 00:01:04,290
you so hopefully a little bit of

00:01:01,769 --> 00:01:05,760
something for everyone first a little

00:01:04,290 --> 00:01:07,380
bit about me so I have a bit of a

00:01:05,760 --> 00:01:08,789
non-traditional background for front-end

00:01:07,380 --> 00:01:11,460
engineer I got started in management

00:01:08,789 --> 00:01:12,570
consulting I actually built a data

00:01:11,460 --> 00:01:13,740
science practice at one of the old

00:01:12,570 --> 00:01:15,930
traditional firms and helped them grow

00:01:13,740 --> 00:01:18,359
from 60 or pardon me from 12 people to

00:01:15,930 --> 00:01:20,100
about 60 people over a few years I would

00:01:18,359 --> 00:01:23,759
later the lead data analyst on the

00:01:20,100 --> 00:01:24,929
largest Ponzi scheme in the universe and

00:01:23,759 --> 00:01:26,609
so you know your sequel queries are

00:01:24,929 --> 00:01:29,939
important when the FBI is there with

00:01:26,609 --> 00:01:32,100
assault rifles guarding you I then

00:01:29,939 --> 00:01:34,140
launched at lunch to start up in in New

00:01:32,100 --> 00:01:36,420
York I have all these Twitter followers

00:01:34,140 --> 00:01:38,399
because if you crash a start-up hard you

00:01:36,420 --> 00:01:40,259
get a thousand times the the Twitter

00:01:38,399 --> 00:01:41,700
followers so we built an awesome team

00:01:40,259 --> 00:01:44,249
raised a lot of money crashed it hard

00:01:41,700 --> 00:01:45,950
everyone quit we raised more money built

00:01:44,249 --> 00:01:48,600
a new team crashed it just as hard

00:01:45,950 --> 00:01:50,100
everyone quit eventually I found my way

00:01:48,600 --> 00:01:52,140
to Airbnb where I could just write

00:01:50,100 --> 00:01:54,299
front-end code all day and it's amazing

00:01:52,140 --> 00:01:58,399
I'm gonna be it I will be at Airbnb

00:01:54,299 --> 00:02:01,229
until the heat death of the universe so

00:01:58,399 --> 00:02:02,819
why did we set up things the way we set

00:02:01,229 --> 00:02:04,770
up well let's start in the beginning

00:02:02,819 --> 00:02:07,380
right in the beginning Airbnb was just a

00:02:04,770 --> 00:02:09,240
rails app a monolithic rails app and

00:02:07,380 --> 00:02:10,530
there were just full stack engineers and

00:02:09,240 --> 00:02:12,930
so the data model all the way through

00:02:10,530 --> 00:02:15,660
presentation into the API and into the

00:02:12,930 --> 00:02:17,610
UI was like literally just like er be

00:02:15,660 --> 00:02:19,500
and models and resources so that's

00:02:17,610 --> 00:02:21,120
pretty simple but then over time a

00:02:19,500 --> 00:02:23,370
couple things changed first of all so

00:02:21,120 --> 00:02:25,560
you have these shared data models and so

00:02:23,370 --> 00:02:27,840
in our case like the listing resource is

00:02:25,560 --> 00:02:30,240
the gnarliest today it's like 4,000

00:02:27,840 --> 00:02:32,190
lines of Ruby and it's miserable you can

00:02:30,240 --> 00:02:34,080
see all the teams that Airbnb like all

00:02:32,190 --> 00:02:36,450
editing it all at the same time the

00:02:34,080 --> 00:02:38,640
mandatory reviewers are grisly it's just

00:02:36,450 --> 00:02:40,440
it's a terrible situation and so having

00:02:38,640 --> 00:02:43,610
these shared data models that Airbnb has

00:02:40,440 --> 00:02:46,080
been a huge source of strife add to that

00:02:43,610 --> 00:02:48,480
the emergence a few years ago or five

00:02:46,080 --> 00:02:49,860
five six years ago of native apps meant

00:02:48,480 --> 00:02:51,540
that you couldn't just have a rails app

00:02:49,860 --> 00:02:54,270
you really needed a more like thoughtful

00:02:51,540 --> 00:02:57,930
setup and so the transition the shift

00:02:54,270 --> 00:02:59,760
that we witnessed was we moved to Java

00:02:57,930 --> 00:03:02,730
on the backend and so a sort of an

00:02:59,760 --> 00:03:04,260
emerging micro services environment Ruby

00:03:02,730 --> 00:03:06,300
on Rails continued to be where the API

00:03:04,260 --> 00:03:08,190
was defined so that continued to be the

00:03:06,300 --> 00:03:10,440
case and then there was an emergence of

00:03:08,190 --> 00:03:13,140
front-end at Airbnb so you know real

00:03:10,440 --> 00:03:15,690
strong web team as well as iOS and

00:03:13,140 --> 00:03:18,720
Android going on on the UI so this is

00:03:15,690 --> 00:03:21,240
the result and specifically on the

00:03:18,720 --> 00:03:22,800
backend side big investments in thrift

00:03:21,240 --> 00:03:25,230
so we have a particular services

00:03:22,800 --> 00:03:27,720
oriented architecture where everything

00:03:25,230 --> 00:03:30,240
is defined in thrift and delivered via

00:03:27,720 --> 00:03:31,410
these Java services specifically all of

00:03:30,240 --> 00:03:32,280
these services are all talking to each

00:03:31,410 --> 00:03:34,830
other it's a really sophisticated

00:03:32,280 --> 00:03:36,390
payments infrastructure at Airbnb who's

00:03:34,830 --> 00:03:38,640
we're paying people like constantly in

00:03:36,390 --> 00:03:40,890
every currency in the universe I believe

00:03:38,640 --> 00:03:43,080
that in Cuba there actually it wired up

00:03:40,890 --> 00:03:45,390
to the API to like deliver cash in a bag

00:03:43,080 --> 00:03:46,950
you know as needed in places where the

00:03:45,390 --> 00:03:48,480
infrastructure isn't in place so Airbnb

00:03:46,950 --> 00:03:50,489
is like right there with our friends

00:03:48,480 --> 00:03:52,050
from PayPal on tackling some interesting

00:03:50,489 --> 00:03:53,610
problems if you're not familiar with

00:03:52,050 --> 00:03:55,830
thrift the way it works this is a super

00:03:53,610 --> 00:03:57,000
strongly typed data object so there's a

00:03:55,830 --> 00:03:58,860
little bit small for those in the back

00:03:57,000 --> 00:04:00,600
but you're actually defining every

00:03:58,860 --> 00:04:04,170
single object you could interact with as

00:04:00,600 --> 00:04:06,690
a strong type and similarly the requests

00:04:04,170 --> 00:04:08,010
and the responses are strongly typed so

00:04:06,690 --> 00:04:11,280
you'll have these environments where

00:04:08,010 --> 00:04:12,810
thrift is your defining all the possible

00:04:11,280 --> 00:04:15,930
ways that a service could be interacted

00:04:12,810 --> 00:04:18,090
with and all the possible specific

00:04:15,930 --> 00:04:20,870
format of the responses and so this is a

00:04:18,090 --> 00:04:24,330
this is a very different scenario from

00:04:20,870 --> 00:04:26,039
what we what we were proposing from a

00:04:24,330 --> 00:04:28,889
graph QL standpoint so if this is where

00:04:26,039 --> 00:04:30,900
we were you know a year ago a

00:04:28,889 --> 00:04:32,009
and the very excited engineers came in

00:04:30,900 --> 00:04:34,590
and said why don't we do something like

00:04:32,009 --> 00:04:36,330
this why don't we make it why don't we

00:04:34,590 --> 00:04:37,740
make it all front-end you guys can just

00:04:36,330 --> 00:04:40,590
sit around and drink martinis and we'll

00:04:37,740 --> 00:04:42,389
just own all of it and so you know that

00:04:40,590 --> 00:04:45,539
you can imagine how that conversation

00:04:42,389 --> 00:04:48,180
went there was a that when the when

00:04:45,539 --> 00:04:50,069
graph QL was officially passed I was in

00:04:48,180 --> 00:04:51,360
the median at Airbnb and I swear to god

00:04:50,069 --> 00:04:53,370
there was like a job engineer in the

00:04:51,360 --> 00:04:55,680
corner like smoking a cigarette quietly

00:04:53,370 --> 00:04:57,740
the whole meeting like put the cigarette

00:04:55,680 --> 00:05:02,279
out on the table and like walked out

00:04:57,740 --> 00:05:04,710
none of this is true but you could you

00:05:02,279 --> 00:05:06,330
could definitely sense all the excited

00:05:04,710 --> 00:05:07,620
you know front-end engineers talking

00:05:06,330 --> 00:05:10,050
about the benefits of graph QL in like

00:05:07,620 --> 00:05:12,629
all these silent back-end engineers just

00:05:10,050 --> 00:05:15,810
waiting to to shut it down and I think

00:05:12,629 --> 00:05:18,319
the the the perception was this like you

00:05:15,810 --> 00:05:20,400
know if we have like if you look at this

00:05:18,319 --> 00:05:21,629
screenshot right we've got this idea of

00:05:20,400 --> 00:05:23,580
user interface where we're looking at a

00:05:21,629 --> 00:05:26,159
listing and we can think about how we're

00:05:23,580 --> 00:05:27,659
gonna define it in the API and with this

00:05:26,159 --> 00:05:29,159
model we're like the front ends just

00:05:27,659 --> 00:05:31,319
gonna everything it's going to be opaque

00:05:29,159 --> 00:05:34,469
to back-end engineers it starts out with

00:05:31,319 --> 00:05:36,569
a martini glass icon because initially

00:05:34,469 --> 00:05:39,960
everything takes 120 milliseconds pretty

00:05:36,569 --> 00:05:41,250
good to go and to fill this query we

00:05:39,960 --> 00:05:42,839
would need to hit a listing service hit

00:05:41,250 --> 00:05:44,849
our photos service and presumably

00:05:42,839 --> 00:05:47,550
there's a service to fulfill reviews and

00:05:44,849 --> 00:05:49,319
so I think the fear in fact I know the

00:05:47,550 --> 00:05:51,149
fear from the from the backend engineers

00:05:49,319 --> 00:05:53,550
was on Monday this response could be a

00:05:51,149 --> 00:05:54,899
hundred twenty milliseconds and the fact

00:05:53,550 --> 00:05:57,240
that this is opaque to the back-end

00:05:54,899 --> 00:05:59,310
engineers not really a problem but then

00:05:57,240 --> 00:06:02,310
on Tuesday all of a sudden the API

00:05:59,310 --> 00:06:05,159
response takes 220 milliseconds and that

00:06:02,310 --> 00:06:07,800
same opaqueness becomes an angry icon

00:06:05,159 --> 00:06:09,270
and what I'm trying to demonstrate here

00:06:07,800 --> 00:06:10,469
it's a little bit nuanced is that

00:06:09,270 --> 00:06:12,270
actually on the API

00:06:10,469 --> 00:06:13,949
the only thing has changed is that a

00:06:12,270 --> 00:06:16,050
client engineer like sort of not

00:06:13,949 --> 00:06:19,080
knowingly has added a very expensive

00:06:16,050 --> 00:06:20,639
field to a query and that same query is

00:06:19,080 --> 00:06:22,439
now hitting the pricing service and it

00:06:20,639 --> 00:06:25,229
takes 200 milliseconds we've actually

00:06:22,439 --> 00:06:29,219
like changed the page load time for this

00:06:25,229 --> 00:06:30,719
page by like you know 50% 40% and to the

00:06:29,219 --> 00:06:31,680
back-end engineer that owns this service

00:06:30,719 --> 00:06:34,529
they're going to see their performance

00:06:31,680 --> 00:06:36,389
numbers like just rock it dramatically

00:06:34,529 --> 00:06:38,940
without any changes to their service so

00:06:36,389 --> 00:06:40,560
this is a very serious concern and one

00:06:38,940 --> 00:06:42,120
that was like almost devastating to the

00:06:40,560 --> 00:06:42,690
cause when it comes to graph QL on

00:06:42,120 --> 00:06:44,580
Apollo

00:06:42,690 --> 00:06:46,410
at Airbnb and so we really needed to

00:06:44,580 --> 00:06:48,870
address this and think about how we

00:06:46,410 --> 00:06:51,320
could make the thrift environment that

00:06:48,870 --> 00:06:54,810
we had set up work a little bit more

00:06:51,320 --> 00:06:57,210
compatible with Apollo and graph QL as

00:06:54,810 --> 00:06:59,010
opposed to being in competition all

00:06:57,210 --> 00:07:01,380
right so what does that look like so the

00:06:59,010 --> 00:07:03,450
great compromise of 2018 the Brandon

00:07:01,380 --> 00:07:04,860
Street cords we decided to come up with

00:07:03,450 --> 00:07:07,410
something a little bit more balanced

00:07:04,860 --> 00:07:08,910
right and so this is what balanced looks

00:07:07,410 --> 00:07:11,160
like for us where we're actually gonna

00:07:08,910 --> 00:07:13,650
have the API definition and the user

00:07:11,160 --> 00:07:16,350
interface defined in graph QL delivered

00:07:13,650 --> 00:07:18,030
via react but not only the data models

00:07:16,350 --> 00:07:20,190
would exist in the sort of back-end

00:07:18,030 --> 00:07:22,500
infrastructure but also the presentation

00:07:20,190 --> 00:07:24,720
logic so this very this logic around how

00:07:22,500 --> 00:07:26,400
the the data models would be delivered

00:07:24,720 --> 00:07:28,080
to the front-end would still be written

00:07:26,400 --> 00:07:29,340
in these Java services in fact we

00:07:28,080 --> 00:07:31,800
created these services called

00:07:29,340 --> 00:07:34,110
presentation services that are intended

00:07:31,800 --> 00:07:36,200
to provide that sort of guarantee around

00:07:34,110 --> 00:07:38,130
performance and an optimization that

00:07:36,200 --> 00:07:41,970
especially the high traffic pages

00:07:38,130 --> 00:07:43,170
require right so now all of a sudden we

00:07:41,970 --> 00:07:44,730
have a little bit more sophistication

00:07:43,170 --> 00:07:46,170
and we start to think about some of the

00:07:44,730 --> 00:07:48,000
advanced features that you were hearing

00:07:46,170 --> 00:07:51,300
about earlier today get super excited

00:07:48,000 --> 00:07:52,410
about partial query caching and some of

00:07:51,300 --> 00:07:54,690
the things like James was talking around

00:07:52,410 --> 00:07:55,710
around deferring part of the query well

00:07:54,690 --> 00:07:57,720
all of a sudden we can start to take

00:07:55,710 --> 00:07:59,760
advantage of those things and actually

00:07:57,720 --> 00:08:01,830
under the hood a lot of the presentation

00:07:59,760 --> 00:08:05,040
services will guarantee what each of

00:08:01,830 --> 00:08:06,840
those underlying services look like for

00:08:05,040 --> 00:08:09,900
us so we might be able to query listings

00:08:06,840 --> 00:08:12,090
by ID or reviews by listing ID that

00:08:09,900 --> 00:08:13,620
really expensive listing quote all of a

00:08:12,090 --> 00:08:14,940
sudden that's now mapped to an endpoint

00:08:13,620 --> 00:08:17,280
that we can understand from a

00:08:14,940 --> 00:08:19,380
performance standpoint and sort of fetch

00:08:17,280 --> 00:08:20,640
later as we need to so this is a great

00:08:19,380 --> 00:08:23,190
balance for us and it's something we're

00:08:20,640 --> 00:08:25,140
spending a lot of time on I also think

00:08:23,190 --> 00:08:26,520
like the grain of understanding has

00:08:25,140 --> 00:08:28,560
shifted here and this is a bit more

00:08:26,520 --> 00:08:29,940
nuanced where I think in some of the

00:08:28,560 --> 00:08:31,350
presentations earlier today we were

00:08:29,940 --> 00:08:33,210
talking about the client engineers

00:08:31,350 --> 00:08:35,580
understanding performance at the field

00:08:33,210 --> 00:08:36,840
level I think the reality is for people

00:08:35,580 --> 00:08:39,150
like me who really care about

00:08:36,840 --> 00:08:41,760
performance having field level analytics

00:08:39,150 --> 00:08:43,380
is like really useful and powerful the

00:08:41,760 --> 00:08:44,760
reality is like a lot of Engineers at

00:08:43,380 --> 00:08:46,560
Airbnb are super busy they've got

00:08:44,760 --> 00:08:49,140
experiments to get out and I think that

00:08:46,560 --> 00:08:50,700
that field level granularity has become

00:08:49,140 --> 00:08:52,320
a source of problems in the past

00:08:50,700 --> 00:08:54,060
for performance regressions because

00:08:52,320 --> 00:08:55,840
those downstream requests aren't well

00:08:54,060 --> 00:08:56,980
enough understood by the client engineer

00:08:55,840 --> 00:08:58,570
to make sure that when they're building

00:08:56,980 --> 00:09:00,010
that new feature that they're not

00:08:58,570 --> 00:09:02,200
integrating a field that blows them up

00:09:00,010 --> 00:09:04,990
and so I think we're shifting the

00:09:02,200 --> 00:09:08,380
narrative around performance because now

00:09:04,990 --> 00:09:10,900
we have a number of thrift services that

00:09:08,380 --> 00:09:12,700
we can understand we can understand the

00:09:10,900 --> 00:09:15,250
performance at the thrift service

00:09:12,700 --> 00:09:16,450
endpoint level so for example if we've

00:09:15,250 --> 00:09:20,440
got a query that goes and hits the

00:09:16,450 --> 00:09:22,600
listing resource and it's got 30

00:09:20,440 --> 00:09:23,470
some-odd fields all of those fields are

00:09:22,600 --> 00:09:25,420
roughly the same performance

00:09:23,470 --> 00:09:27,040
characteristic like fetching nine of

00:09:25,420 --> 00:09:30,790
them versus fetching 12 of them on the

00:09:27,040 --> 00:09:32,380
server is nominal cost and so being able

00:09:30,790 --> 00:09:33,460
to just hit that request and say I know

00:09:32,380 --> 00:09:35,050
that I'm going to get this information

00:09:33,460 --> 00:09:36,970
just go ahead and fetch everything on

00:09:35,050 --> 00:09:38,680
the server when we get to graph QL will

00:09:36,970 --> 00:09:41,440
down select to the fields that we need

00:09:38,680 --> 00:09:43,720
is a much more palatable much more

00:09:41,440 --> 00:09:45,580
understandable experience for a client

00:09:43,720 --> 00:09:47,110
engineer so we can say things as simple

00:09:45,580 --> 00:09:49,810
as hey when I'm rendering this page if

00:09:47,110 --> 00:09:51,760
you fetch the quote it will be slow like

00:09:49,810 --> 00:09:53,200
everybody understands that and so that's

00:09:51,760 --> 00:09:55,240
where a lot of the conversations going

00:09:53,200 --> 00:09:57,550
now is listen the reviews are a little

00:09:55,240 --> 00:09:59,320
bit slower the quote is really slow and

00:09:57,550 --> 00:10:01,690
so if we just think of it in terms of

00:09:59,320 --> 00:10:03,460
these big high-level endpoints

00:10:01,690 --> 00:10:04,840
all the client engineers can be much

00:10:03,460 --> 00:10:07,840
more aware of the performance

00:10:04,840 --> 00:10:10,180
implications of their of the choices

00:10:07,840 --> 00:10:11,590
they're making so this also shifts a

00:10:10,180 --> 00:10:13,090
narrative around over fetching because

00:10:11,590 --> 00:10:15,850
you hear a lot about over fetching

00:10:13,090 --> 00:10:17,800
certainly like over fetching data if

00:10:15,850 --> 00:10:20,770
you're on a roof deck and hi they're bad

00:10:17,800 --> 00:10:22,450
on us on a phone and you're fetching 30

00:10:20,770 --> 00:10:24,520
extra fields because the native client

00:10:22,450 --> 00:10:26,730
needed it back in the day like that kind

00:10:24,520 --> 00:10:28,960
of over fetching is very very expensive

00:10:26,730 --> 00:10:31,030
over fetching in terms of hitting extra

00:10:28,960 --> 00:10:33,820
services you shouldn't need to hit also

00:10:31,030 --> 00:10:35,380
not as bad still expensive but over

00:10:33,820 --> 00:10:37,510
fetching individual fields against

00:10:35,380 --> 00:10:39,760
thrift endpoints nominally cheap for us

00:10:37,510 --> 00:10:41,110
and so it's really shifted the way that

00:10:39,760 --> 00:10:42,460
people think about over fetching if

00:10:41,110 --> 00:10:43,540
you're hitting a service just grab

00:10:42,460 --> 00:10:45,670
everything the service is going to

00:10:43,540 --> 00:10:47,560
deliver to you at the same cost and will

00:10:45,670 --> 00:10:49,690
down select fields later and that's

00:10:47,560 --> 00:10:53,130
really simplified the the activity for

00:10:49,690 --> 00:10:53,130
the back end as well as the front end so

00:10:53,250 --> 00:10:58,060
what does this look like sort of like

00:10:55,480 --> 00:11:00,520
more tactically well this is yesterday's

00:10:58,060 --> 00:11:03,010
architecture so we have web iOS and

00:11:00,520 --> 00:11:04,600
Android apps they go through an API

00:11:03,010 --> 00:11:06,940
gateway and they hit the presentation

00:11:04,600 --> 00:11:08,830
services and the thrift service

00:11:06,940 --> 00:11:09,290
functions are defined very crisply in

00:11:08,830 --> 00:11:11,600
these pairs

00:11:09,290 --> 00:11:13,459
patience services and they use thrift to

00:11:11,600 --> 00:11:13,880
hit the other services most of them in

00:11:13,459 --> 00:11:15,529
Java

00:11:13,880 --> 00:11:17,600
some of them remaining in Ruby every

00:11:15,529 --> 00:11:19,880
time I say Ruby is Deborah deprecated at

00:11:17,600 --> 00:11:22,670
Airbnb I get an email from someone so

00:11:19,880 --> 00:11:25,699
ruby is deprecated at Airbnb deal with

00:11:22,670 --> 00:11:29,019
the consequences later right so what do

00:11:25,699 --> 00:11:31,339
we do so instead of building one massive

00:11:29,019 --> 00:11:32,720
graph QL server that would own this

00:11:31,339 --> 00:11:35,630
whole process we actually built a

00:11:32,720 --> 00:11:38,839
library which we may open source and you

00:11:35,630 --> 00:11:40,699
can use yourself that does the thrifter

00:11:38,839 --> 00:11:41,930
graph ul translations and I'll get into

00:11:40,699 --> 00:11:43,910
some of the details around kind of how

00:11:41,930 --> 00:11:45,670
that works in a minute but the general

00:11:43,910 --> 00:11:48,139
idea is that actually in order to take

00:11:45,670 --> 00:11:50,300
presentation service that delivers data

00:11:48,139 --> 00:11:52,310
and thrift and make it sort of graph QL

00:11:50,300 --> 00:11:53,839
enabled you just include the library and

00:11:52,310 --> 00:11:55,910
it knows how to go into all the services

00:11:53,839 --> 00:11:57,500
publish the graphic UL schema and then

00:11:55,910 --> 00:12:00,079
map over the requests so that when I say

00:11:57,500 --> 00:12:03,800
I want a listing by ID it knows how to

00:12:00,079 --> 00:12:06,230
go and get that and deliver that data so

00:12:03,800 --> 00:12:07,970
step two we built the graph QL gateway

00:12:06,230 --> 00:12:09,920
service this is built in node and it

00:12:07,970 --> 00:12:11,029
does use Apollo server so we're able to

00:12:09,920 --> 00:12:13,160
take advantage of some of the dope

00:12:11,029 --> 00:12:15,829
features you heard about earlier today

00:12:13,160 --> 00:12:17,180
and so instead of the API request going

00:12:15,829 --> 00:12:18,850
straight to the presentation service we

00:12:17,180 --> 00:12:20,959
now have graph QL as a place where

00:12:18,850 --> 00:12:23,000
schema stitching in the query routing

00:12:20,959 --> 00:12:25,040
and also query registration happens

00:12:23,000 --> 00:12:27,350
we'll talk a bit about how we're

00:12:25,040 --> 00:12:28,519
thinking about query registration but

00:12:27,350 --> 00:12:30,709
it's the graph QL service that will

00:12:28,519 --> 00:12:32,510
receive the request just basically treat

00:12:30,709 --> 00:12:34,130
all the presentation services as master

00:12:32,510 --> 00:12:39,290
resolvers sends the query down to the

00:12:34,130 --> 00:12:40,850
services and we get those back and so

00:12:39,290 --> 00:12:43,760
the last thing that we have is you know

00:12:40,850 --> 00:12:46,730
all of the great Apollo toolset allows

00:12:43,760 --> 00:12:49,069
us to compile the graph QL pardon me

00:12:46,730 --> 00:12:51,500
allows us to compile the thrift

00:12:49,069 --> 00:12:53,029
definitions to a graph QL schema that's

00:12:51,500 --> 00:12:56,060
sort of stitched together in a cohesive

00:12:53,029 --> 00:12:57,860
way we're exploring typescript at Airbnb

00:12:56,060 --> 00:12:59,750
fingers crossed I think it looks pretty

00:12:57,860 --> 00:13:01,069
good I think we're probably going to go

00:12:59,750 --> 00:13:04,730
in that direction but I'll probably also

00:13:01,069 --> 00:13:06,800
get emails about that until that becomes

00:13:04,730 --> 00:13:08,569
official but a lot of the stuff that's

00:13:06,800 --> 00:13:10,639
going on and then from the apollo

00:13:08,569 --> 00:13:12,800
toolset allows us to compile to

00:13:10,639 --> 00:13:15,410
typescript and get generated graph QL

00:13:12,800 --> 00:13:17,480
client code that the web iOS and Android

00:13:15,410 --> 00:13:21,769
clients can all use there's actually

00:13:17,480 --> 00:13:23,329
like really a useful process for us so

00:13:21,769 --> 00:13:23,850
how are we doing that

00:13:23,329 --> 00:13:25,680
if that

00:13:23,850 --> 00:13:28,170
at the high level I wanted to step you

00:13:25,680 --> 00:13:29,490
through some examples in specific so if

00:13:28,170 --> 00:13:31,080
you're thinking about whether or not to

00:13:29,490 --> 00:13:34,020
get involved with graph QL and you have

00:13:31,080 --> 00:13:35,400
a different sort of data set up you know

00:13:34,020 --> 00:13:36,900
what does this actually look like for

00:13:35,400 --> 00:13:39,330
you and what are those services need to

00:13:36,900 --> 00:13:41,550
actually deliver this is an example of

00:13:39,330 --> 00:13:44,670
what we call a product detail page this

00:13:41,550 --> 00:13:46,740
is one of the new luxury listings and so

00:13:44,670 --> 00:13:48,390
we'll be launching the luxury vertical

00:13:46,740 --> 00:13:50,780
at Airbnb very shortly and you'll be

00:13:48,390 --> 00:13:54,300
able to book all these beautiful homes

00:13:50,780 --> 00:13:56,610
and so when we think about a page like

00:13:54,300 --> 00:13:59,040
this I think of this as a simple or a

00:13:56,610 --> 00:14:00,570
basic use case because the UI is

00:13:59,040 --> 00:14:03,090
actually smart enough to kind of know

00:14:00,570 --> 00:14:05,220
like which fields on the page need to be

00:14:03,090 --> 00:14:06,570
populated by which attributes and so you

00:14:05,220 --> 00:14:08,760
really do just look at the information

00:14:06,570 --> 00:14:10,650
you need for the page submit a query

00:14:08,760 --> 00:14:12,930
when it comes back you map those over so

00:14:10,650 --> 00:14:15,000
listings by ID you know put the name up

00:14:12,930 --> 00:14:17,100
there you put the summary down here I've

00:14:15,000 --> 00:14:18,930
got a field called person capacity and

00:14:17,100 --> 00:14:20,940
that that goes in there and then

00:14:18,930 --> 00:14:23,640
subsequent stuff down below which we may

00:14:20,940 --> 00:14:25,740
defer or may not come from other end

00:14:23,640 --> 00:14:30,000
points other thrift endpoints which

00:14:25,740 --> 00:14:32,790
become other graph QL nodes for us and

00:14:30,000 --> 00:14:34,830
the thrift IDL and the graph QL query

00:14:32,790 --> 00:14:37,020
are immediately coupled right and so

00:14:34,830 --> 00:14:38,610
again very small for the people in the

00:14:37,020 --> 00:14:41,850
back but what you see here is listings

00:14:38,610 --> 00:14:43,560
by ID response has 30 fields a new

00:14:41,850 --> 00:14:45,150
reality has actually quite a few more

00:14:43,560 --> 00:14:46,860
because there are many deprecated fields

00:14:45,150 --> 00:14:51,390
that would be annotated accordingly in

00:14:46,860 --> 00:14:53,670
thrift and this thrift IDL then gets

00:14:51,390 --> 00:14:55,920
compiled to graph QL as a schema and

00:14:53,670 --> 00:14:57,240
then you see us making a request for

00:14:55,920 --> 00:14:59,700
just those fields that we need so you

00:14:57,240 --> 00:15:01,560
see within the luxury home service which

00:14:59,700 --> 00:15:03,510
is a presentation service for us

00:15:01,560 --> 00:15:06,150
you see listings by ID you submit the

00:15:03,510 --> 00:15:08,610
listing ID you pick out name summary in

00:15:06,150 --> 00:15:10,770
person capacity and you subsequently

00:15:08,610 --> 00:15:13,410
request well at the same time request

00:15:10,770 --> 00:15:15,180
services by listing ID pass in the ID

00:15:13,410 --> 00:15:16,800
and you get back the specific

00:15:15,180 --> 00:15:19,590
information you need for those for those

00:15:16,800 --> 00:15:21,150
requests so to the to the client the

00:15:19,590 --> 00:15:23,340
idea that we're used in a presentation

00:15:21,150 --> 00:15:25,020
service is actually totally opaque you

00:15:23,340 --> 00:15:26,610
really just have a logical schema that

00:15:25,020 --> 00:15:29,640
you can use to request the data you need

00:15:26,610 --> 00:15:32,000
and then on our system with no code

00:15:29,640 --> 00:15:34,740
written on the back end like whatsoever

00:15:32,000 --> 00:15:36,750
this is actually going to fire off to

00:15:34,740 --> 00:15:37,420
thrift service requests within the

00:15:36,750 --> 00:15:39,130
presentations

00:15:37,420 --> 00:15:41,200
servus those are gonna make downstream

00:15:39,130 --> 00:15:43,390
requests accordingly based on the logic

00:15:41,200 --> 00:15:45,250
that they've got coded in Java that we

00:15:43,390 --> 00:15:46,420
on the client don't see we get that back

00:15:45,250 --> 00:15:48,700
and it assembles that and sends it back

00:15:46,420 --> 00:15:51,190
to the client so it's totally seamless

00:15:48,700 --> 00:15:54,310
and in this like simple use case that's

00:15:51,190 --> 00:15:56,410
that's all that's needed but actually at

00:15:54,310 --> 00:15:59,230
Airbnb more than half of the api's are

00:15:56,410 --> 00:16:00,670
quite a bit more complicated so I'd be

00:15:59,230 --> 00:16:03,010
interested in I'm happy to talk after

00:16:00,670 --> 00:16:05,560
the talk if many of you have similar use

00:16:03,010 --> 00:16:06,610
cases where we're actually moving much

00:16:05,560 --> 00:16:09,940
more in the direction of the back-end

00:16:06,610 --> 00:16:11,830
driving the UI which is a little bit

00:16:09,940 --> 00:16:14,350
tricky right so we look at a page like

00:16:11,830 --> 00:16:16,090
search where I spent a year of my career

00:16:14,350 --> 00:16:18,490
at Airbnb was you know building this

00:16:16,090 --> 00:16:19,630
system we're gonna have many sections

00:16:18,490 --> 00:16:22,120
that get passed down so what does that

00:16:19,630 --> 00:16:23,560
look like specifically well at the

00:16:22,120 --> 00:16:24,970
beginning we have some refinements

00:16:23,560 --> 00:16:26,980
almost like filters that you would apply

00:16:24,970 --> 00:16:29,110
that would it deliver you the subsequent

00:16:26,980 --> 00:16:30,610
search then we've got a banner that we

00:16:29,110 --> 00:16:32,380
want to show you we've got a carousel of

00:16:30,610 --> 00:16:34,030
homes that we're going to show you some

00:16:32,380 --> 00:16:36,730
larger cards for some new things we're

00:16:34,030 --> 00:16:38,230
launching it experiences carousel and

00:16:36,730 --> 00:16:40,450
then some cards around experiences

00:16:38,230 --> 00:16:42,010
reality is like depending upon the user

00:16:40,450 --> 00:16:44,410
depending upon when you're logged in or

00:16:42,010 --> 00:16:46,870
logged out whether we're CDN caching or

00:16:44,410 --> 00:16:50,320
not which market you're in your previous

00:16:46,870 --> 00:16:52,180
search history all these variables drive

00:16:50,320 --> 00:16:54,670
like a pretty dynamic system that we

00:16:52,180 --> 00:16:56,620
call search and so when you think about

00:16:54,670 --> 00:16:57,730
a system like that I remember all the

00:16:56,620 --> 00:16:59,530
folks who are saying well graph QL

00:16:57,730 --> 00:17:01,330
doesn't really like support that kind of

00:16:59,530 --> 00:17:02,170
notion because it's actually the

00:17:01,330 --> 00:17:04,600
back-end that's going to deliver

00:17:02,170 --> 00:17:06,700
everything and so you think of all these

00:17:04,600 --> 00:17:08,860
sections and all the types of code and

00:17:06,700 --> 00:17:11,230
how that gets defined in thrift and

00:17:08,860 --> 00:17:13,660
actually it turns out graph QL as a

00:17:11,230 --> 00:17:17,890
language does support this kind of API

00:17:13,660 --> 00:17:19,480
it does support this kind of query and

00:17:17,890 --> 00:17:21,220
it doesn't with interfaces and unions

00:17:19,480 --> 00:17:23,410
and so if you're in a situation where

00:17:21,220 --> 00:17:25,390
you've got super complex back-end logic

00:17:23,410 --> 00:17:27,340
that's going to drive the UI I would

00:17:25,390 --> 00:17:29,020
invite you to explore interfaces and

00:17:27,340 --> 00:17:31,330
unions and see if that might help

00:17:29,020 --> 00:17:33,790
like redefine how you're going to end up

00:17:31,330 --> 00:17:35,770
rendering the UI so in this case in the

00:17:33,790 --> 00:17:38,410
thrift IDL you have these a refinement

00:17:35,770 --> 00:17:40,540
section defined accordingly you have a

00:17:38,410 --> 00:17:42,070
home's carousel section defined

00:17:40,540 --> 00:17:44,740
accordingly all of the different data

00:17:42,070 --> 00:17:46,900
types that map to the different types of

00:17:44,740 --> 00:17:48,850
sections are all in our case are ready

00:17:46,900 --> 00:17:50,500
to find in thrift and so it's really

00:17:48,850 --> 00:17:52,210
interesting as we we've had this dis

00:17:50,500 --> 00:17:54,340
connect where the backend engineers are

00:17:52,210 --> 00:17:56,530
defining these types we get a design we

00:17:54,340 --> 00:17:58,000
design the new UI we're going to them

00:17:56,530 --> 00:17:59,890
and saying hey listen can you define a

00:17:58,000 --> 00:18:01,270
thrift object that looks kind of like

00:17:59,890 --> 00:18:03,610
this because I only need a title and

00:18:01,270 --> 00:18:05,530
subtitle and an image and then they go

00:18:03,610 --> 00:18:07,600
back and do that and and to Steve's

00:18:05,530 --> 00:18:09,970
conversation from the brigade talk

00:18:07,600 --> 00:18:11,710
there's this like linear process where

00:18:09,970 --> 00:18:13,780
we define what we need go through a

00:18:11,710 --> 00:18:14,860
proposal around the API it's kind of a

00:18:13,780 --> 00:18:16,630
nightmare

00:18:14,860 --> 00:18:18,160
but it turns out if you have the

00:18:16,630 --> 00:18:19,870
sections to find properly in thrift

00:18:18,160 --> 00:18:23,680
those compile writes a graph QL is

00:18:19,870 --> 00:18:25,600
standard logic around an interface so we

00:18:23,680 --> 00:18:27,550
would say listen on a refinement section

00:18:25,600 --> 00:18:29,200
give me these fields on a home carousel

00:18:27,550 --> 00:18:31,000
section give me these fields on

00:18:29,200 --> 00:18:33,130
information section give me these fields

00:18:31,000 --> 00:18:34,780
and so on but what's cool for us is the

00:18:33,130 --> 00:18:36,280
quarry doesn't live like that the query

00:18:34,780 --> 00:18:38,380
actually lives co-located with the

00:18:36,280 --> 00:18:39,820
component so as we get new sections as

00:18:38,380 --> 00:18:41,680
we get new types of data that we want to

00:18:39,820 --> 00:18:44,200
be able to render on search and other

00:18:41,680 --> 00:18:46,240
pages we actually can define the section

00:18:44,200 --> 00:18:47,620
type pull in the mock data do all of

00:18:46,240 --> 00:18:49,120
that in real time and then say hey

00:18:47,620 --> 00:18:51,190
listen this is the actual schema that we

00:18:49,120 --> 00:18:52,810
need for this new section back-end team

00:18:51,190 --> 00:18:57,400
can deliver it very quickly like two

00:18:52,810 --> 00:19:00,580
months my inbox is gonna be full but I

00:18:57,400 --> 00:19:03,040
might get home but you know that that's

00:19:00,580 --> 00:19:05,050
basically this idea like it works very

00:19:03,040 --> 00:19:07,030
it works very cohesively for us and so

00:19:05,050 --> 00:19:08,530
we're emerging in a model where this is

00:19:07,030 --> 00:19:11,140
actually gonna be the de-facto way that

00:19:08,530 --> 00:19:12,760
most API is at Airbnb are built where we

00:19:11,140 --> 00:19:14,830
have this really flexible notion of an

00:19:12,760 --> 00:19:16,750
API it's getting defined in a way that

00:19:14,830 --> 00:19:18,550
actually the UI doesn't even know what

00:19:16,750 --> 00:19:19,870
its rendering it's sort of dumb it's

00:19:18,550 --> 00:19:21,850
gonna have a title and subtitle and an

00:19:19,870 --> 00:19:23,380
image and all of these constellation of

00:19:21,850 --> 00:19:26,290
back-end services are gonna drive this

00:19:23,380 --> 00:19:27,640
UI but Apollo and graph QL are gonna be

00:19:26,290 --> 00:19:31,050
there to support us so that we have a

00:19:27,640 --> 00:19:34,240
cohesive way to receive that information

00:19:31,050 --> 00:19:36,550
so we're built a gateway service and

00:19:34,240 --> 00:19:38,140
what does it actually do and and how

00:19:36,550 --> 00:19:39,070
does it work and why are we here and

00:19:38,140 --> 00:19:41,830
what does it all mean

00:19:39,070 --> 00:19:42,220
so one thing we do is the graphic eval

00:19:41,830 --> 00:19:44,200
schema

00:19:42,220 --> 00:19:45,670
ven's the production schema so when

00:19:44,200 --> 00:19:47,080
you're in development you're actually

00:19:45,670 --> 00:19:48,310
hitting the production server to say

00:19:47,080 --> 00:19:50,490
what does the current schema write we

00:19:48,310 --> 00:19:52,900
spend a lot of time making sure that the

00:19:50,490 --> 00:19:54,640
schema is always sort of backwards

00:19:52,900 --> 00:19:56,800
compatible a breaking change goes

00:19:54,640 --> 00:19:58,120
through quite a bit of rigor around what

00:19:56,800 --> 00:20:00,160
does that mean for us and how do we how

00:19:58,120 --> 00:20:01,630
do we manage it and so one of the things

00:20:00,160 --> 00:20:03,700
the Gateway service does is make sure

00:20:01,630 --> 00:20:04,130
that definitive schema is available for

00:20:03,700 --> 00:20:06,950
Iowa

00:20:04,130 --> 00:20:09,560
web and Android development all

00:20:06,950 --> 00:20:11,210
happening at once in continuous

00:20:09,560 --> 00:20:13,420
integration this is actually in process

00:20:11,210 --> 00:20:15,470
I shouldn't say we've built it this part

00:20:13,420 --> 00:20:17,360
where what we want to do is take the

00:20:15,470 --> 00:20:19,850
production queries and send them to the

00:20:17,360 --> 00:20:20,930
service to be whitelisted because a in

00:20:19,850 --> 00:20:22,640
production we don't want people just

00:20:20,930 --> 00:20:23,260
running arbitrary queries against our

00:20:22,640 --> 00:20:25,760
back-end

00:20:23,260 --> 00:20:27,890
obvious reasons but also because that

00:20:25,760 --> 00:20:29,990
helps convert these very lengthy queries

00:20:27,890 --> 00:20:31,820
to to hashes and so if you can imagine

00:20:29,990 --> 00:20:34,760
if your search query needs to say well

00:20:31,820 --> 00:20:36,560
for the 30 types of you know UI sections

00:20:34,760 --> 00:20:38,300
that I know how to render here are all

00:20:36,560 --> 00:20:40,490
the possible fields for each one and

00:20:38,300 --> 00:20:42,500
every time we run a search it needs to

00:20:40,490 --> 00:20:45,080
send that entire query up that's you

00:20:42,500 --> 00:20:46,700
know less than ideal and so converting

00:20:45,080 --> 00:20:49,400
those lengthy production queries to a

00:20:46,700 --> 00:20:51,620
simple hash is pretty useful so there's

00:20:49,400 --> 00:20:53,540
an automatic or automated persisted

00:20:51,620 --> 00:20:55,340
queries as a feature of Apollo and we're

00:20:53,540 --> 00:20:57,500
kind of working with the folks on a

00:20:55,340 --> 00:21:00,470
similar implementation that meets our

00:20:57,500 --> 00:21:01,970
particular needs so that all happens in

00:21:00,470 --> 00:21:03,650
CI and we're looking forward to a lot of

00:21:01,970 --> 00:21:05,600
the schema validations the same sorts of

00:21:03,650 --> 00:21:09,020
things that are gonna happen there for

00:21:05,600 --> 00:21:11,810
us and then the introspection queries

00:21:09,020 --> 00:21:13,790
happens so in this case every service is

00:21:11,810 --> 00:21:16,130
responsible for not breaking its own

00:21:13,790 --> 00:21:18,530
schema and if it does we'll catch it via

00:21:16,130 --> 00:21:20,570
this this mechanism because the server

00:21:18,530 --> 00:21:22,100
just kind of runs and you know basically

00:21:20,570 --> 00:21:24,530
anytime we deploy a new presentation

00:21:22,100 --> 00:21:26,150
service that will trigger an

00:21:24,530 --> 00:21:28,940
introspection query from the Gateway

00:21:26,150 --> 00:21:31,130
service which will interpret the which

00:21:28,940 --> 00:21:32,480
will discover the schema the graph QL

00:21:31,130 --> 00:21:34,280
schema comes back and it gets stitched

00:21:32,480 --> 00:21:35,990
together and so this allows us to have

00:21:34,280 --> 00:21:38,150
this very decentralized set of

00:21:35,990 --> 00:21:40,400
presentation services and every time

00:21:38,150 --> 00:21:41,780
they're deployed this service kind of

00:21:40,400 --> 00:21:45,140
knows what the current state of all

00:21:41,780 --> 00:21:46,640
those services are again usually moving

00:21:45,140 --> 00:21:49,310
forward all that you know adding adding

00:21:46,640 --> 00:21:51,110
fields and this is how those get

00:21:49,310 --> 00:21:52,730
discovered and delivered down into to

00:21:51,110 --> 00:21:55,250
development so it's no longer the case

00:21:52,730 --> 00:21:57,440
as with rails years ago where you would

00:21:55,250 --> 00:21:59,990
just have a quarry pardon me a pull

00:21:57,440 --> 00:22:02,600
request where you're adding a model and

00:21:59,990 --> 00:22:05,000
API resources and the UI that manage it

00:22:02,600 --> 00:22:06,170
those those days are passes for us if

00:22:05,000 --> 00:22:08,600
someone wants to add a field to a

00:22:06,170 --> 00:22:10,760
presentation service they'll add that

00:22:08,600 --> 00:22:12,250
deploy that by virtue of having deployed

00:22:10,760 --> 00:22:14,960
it it will show up in the graph QL

00:22:12,250 --> 00:22:17,720
gateway and then engineers can then

00:22:14,960 --> 00:22:20,190
build against it immediately

00:22:17,720 --> 00:22:21,810
and then the API gateway itself so this

00:22:20,190 --> 00:22:23,100
is where the the excitement happens so

00:22:21,810 --> 00:22:26,070
the API gateway is in charge of

00:22:23,100 --> 00:22:28,320
authentication but not authorization a

00:22:26,070 --> 00:22:31,500
request comes in and all the context

00:22:28,320 --> 00:22:33,090
around that API the user what cookies

00:22:31,500 --> 00:22:35,160
and experiments they're in what language

00:22:33,090 --> 00:22:37,050
they use what currency use all of that's

00:22:35,160 --> 00:22:39,030
defined the Java service called the API

00:22:37,050 --> 00:22:41,370
gateway that's passed down to graph QL

00:22:39,030 --> 00:22:43,410
which passes it through almost directly

00:22:41,370 --> 00:22:46,290
there's very little that graph QL does

00:22:43,410 --> 00:22:48,510
in terms of that type of you know

00:22:46,290 --> 00:22:49,830
setting HTML headers etc it's actually

00:22:48,510 --> 00:22:52,170
the presentation services that are

00:22:49,830 --> 00:22:53,340
responsible for authorization so when

00:22:52,170 --> 00:22:55,710
the API gateway sends that information

00:22:53,340 --> 00:22:57,210
through the get graph QL gateway the

00:22:55,710 --> 00:22:58,920
presentation services are responsible

00:22:57,210 --> 00:23:00,330
for using that information because all

00:22:58,920 --> 00:23:01,980
of the services are responsible for

00:23:00,330 --> 00:23:03,810
knowing if this page is getting CDN

00:23:01,980 --> 00:23:05,640
cache to act a certain way if you have a

00:23:03,810 --> 00:23:10,380
certain experiment profile you know vary

00:23:05,640 --> 00:23:12,600
response accordingly etc so that's the

00:23:10,380 --> 00:23:14,010
crux of it what's next for us so we're

00:23:12,600 --> 00:23:15,810
at the very beginning as this is

00:23:14,010 --> 00:23:18,720
hopefully was clear we're launching this

00:23:15,810 --> 00:23:19,950
in production this week and on some of

00:23:18,720 --> 00:23:21,900
the earlier stuff and we've got

00:23:19,950 --> 00:23:24,570
long-running high traffic pages coming

00:23:21,900 --> 00:23:26,880
very shortly and so the idea for us is

00:23:24,570 --> 00:23:30,170
to have all the core flows in typescript

00:23:26,880 --> 00:23:33,300
and graphic UL by the end of the year

00:23:30,170 --> 00:23:35,250
again we're exploring typescript I hope

00:23:33,300 --> 00:23:37,020
it I hope that happens the server

00:23:35,250 --> 00:23:38,670
rendering via our new Hyperloop

00:23:37,020 --> 00:23:40,740
rendering engine so we've got a new open

00:23:38,670 --> 00:23:42,630
source project or we're excited to tell

00:23:40,740 --> 00:23:43,950
the universe about when it's ready and

00:23:42,630 --> 00:23:45,510
actually I were going to be

00:23:43,950 --> 00:23:47,220
collaborating quite closely I think with

00:23:45,510 --> 00:23:49,080
the Apollo team around making sure that

00:23:47,220 --> 00:23:51,450
server rendering happens in a data aware

00:23:49,080 --> 00:23:53,280
way so I'm excited about that

00:23:51,450 --> 00:23:56,390
state management with Apollo link-state

00:23:53,280 --> 00:23:58,710
couldn't agree with everyone more we

00:23:56,390 --> 00:24:01,230
absolutely we just can't afford to have

00:23:58,710 --> 00:24:04,620
90% of our data manage with Apollo and

00:24:01,230 --> 00:24:06,990
then I mean even just a the file size of

00:24:04,620 --> 00:24:09,120
loading Redux to say nothing for the

00:24:06,990 --> 00:24:11,010
complexity would be a non-starter so

00:24:09,120 --> 00:24:14,070
having all of our data in Apollo is like

00:24:11,010 --> 00:24:16,590
a must as well as we're gonna have some

00:24:14,070 --> 00:24:18,240
REST API is around for a long time it's

00:24:16,590 --> 00:24:20,670
just a reality of a large code base and

00:24:18,240 --> 00:24:23,160
so being able to handle those with

00:24:20,670 --> 00:24:25,320
Apollo is is critical for us we're all

00:24:23,160 --> 00:24:27,060
so keen on persisting data on devices so

00:24:25,320 --> 00:24:29,610
this is one initiative that I'm deeply

00:24:27,060 --> 00:24:30,840
embedded in is making sure that by the

00:24:29,610 --> 00:24:34,470
end of the year when you low

00:24:30,840 --> 00:24:35,820
Airbnb as a second time visitor and you

00:24:34,470 --> 00:24:38,220
have presuming you have serviceworker

00:24:35,820 --> 00:24:40,650
because you have a modern browser 85% of

00:24:38,220 --> 00:24:43,890
our users have serviceworker so being

00:24:40,650 --> 00:24:45,690
able to wake your your last session

00:24:43,890 --> 00:24:48,240
bring your last search results in or

00:24:45,690 --> 00:24:49,590
have your itinerary available if you're

00:24:48,240 --> 00:24:51,150
going to your home and you're on web you

00:24:49,590 --> 00:24:52,650
want to know what the Wi-Fi password for

00:24:51,150 --> 00:24:54,660
your listing is you know all of that's

00:24:52,650 --> 00:24:56,070
going to be available without without a

00:24:54,660 --> 00:24:57,660
network connection so persisting that

00:24:56,070 --> 00:24:59,490
data on the device is critical for us

00:24:57,660 --> 00:25:01,680
and and and tons of things we haven't

00:24:59,490 --> 00:25:04,380
thought of yet so very exciting time for

00:25:01,680 --> 00:25:06,060
Airbnb and you know I think if you have

00:25:04,380 --> 00:25:08,040
you know thanks to the core team at

00:25:06,060 --> 00:25:10,020
Airbnb some of whom were here and it

00:25:08,040 --> 00:25:12,180
certainly the Apollo team but if I leave

00:25:10,020 --> 00:25:14,670
you with one thing today it's like you

00:25:12,180 --> 00:25:15,960
know we were in a state well six months

00:25:14,670 --> 00:25:18,930
eight months ago where people were

00:25:15,960 --> 00:25:20,820
saying no - no DeGraff ql you know with

00:25:18,930 --> 00:25:22,350
pretty strong voices and I think a lot

00:25:20,820 --> 00:25:24,600
of the objections that people raised

00:25:22,350 --> 00:25:27,240
seemed valid at the time but upon you

00:25:24,600 --> 00:25:29,340
know further an evaluation proved to be

00:25:27,240 --> 00:25:31,200
things that Apollo in particular added a

00:25:29,340 --> 00:25:33,000
layer for us around graph QL that made a

00:25:31,200 --> 00:25:34,710
lot of those objections go away and I

00:25:33,000 --> 00:25:37,950
think if you've got a similar sort of

00:25:34,710 --> 00:25:39,930
set of complexity and your backends to

00:25:37,950 --> 00:25:41,070
find Ingo or Scala and that's just

00:25:39,930 --> 00:25:43,830
listen we're not putting node in

00:25:41,070 --> 00:25:46,110
production you know take a break have

00:25:43,830 --> 00:25:47,880
some conversations give us an email and

00:25:46,110 --> 00:25:48,990
we may be able to talk away talk through

00:25:47,880 --> 00:25:50,580
some ways that you could get it live

00:25:48,990 --> 00:25:51,870
because I think for us the level of

00:25:50,580 --> 00:25:53,640
excitement among native and web

00:25:51,870 --> 00:25:56,490
engineers to have Apollo and graph QL

00:25:53,640 --> 00:25:58,560
live is just enormous and so being able

00:25:56,490 --> 00:26:00,750
to address those objections proactively

00:25:58,560 --> 00:26:02,910
was what made the difference for us so

00:26:00,750 --> 00:26:05,420
we're super excited about it thanks for

00:26:02,910 --> 00:26:05,420
listening everybody

00:26:07,020 --> 00:26:09,080

YouTube URL: https://www.youtube.com/watch?v=tSoEAjvvtYI


