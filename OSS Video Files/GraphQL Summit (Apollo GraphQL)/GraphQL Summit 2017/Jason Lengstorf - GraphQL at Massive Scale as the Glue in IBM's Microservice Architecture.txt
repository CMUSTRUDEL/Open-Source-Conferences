Title: Jason Lengstorf - GraphQL at Massive Scale as the Glue in IBM's Microservice Architecture
Publication date: 2017-11-09
Playlist: GraphQL Summit 2017
Description: 
	Jason Lengstorf, Senior Software Engineer at IBM, gave this talk at GraphQL Summit 2017. Learn more: summit.graphql.com

How do you hunt down a data source among 30+ teams on 6 continents in a microservice architecture where docs are at the bottom of the priority list and requirements are in constant state of flux? GraphQL is solving complex data problems for IBM at global scale â€” with a surprisingly simple solution.

See his slides: https://code.lengstorf.com/presentations/graphql-microservices/slides/#/

Resources:
Learn more about Summit - https://summit.graphql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Learn GraphQL using Apollo's Tutorials: https://odyssey.apollographql.com/
Captions: 
	00:00:03,639 --> 00:00:08,349
so today as we mentioned I'm gonna be

00:00:06,819 --> 00:00:12,009
talking about what we're doing with

00:00:08,349 --> 00:00:13,240
graph QL at IBM and so before we get

00:00:12,009 --> 00:00:16,510
started just a little bit about Who I am

00:00:13,240 --> 00:00:19,180
I am a web developer I've been doing it

00:00:16,510 --> 00:00:21,970
for quite a while I'm currently working

00:00:19,180 --> 00:00:24,070
as a developer and kind of in a

00:00:21,970 --> 00:00:27,270
front-end architect role at IBM cloud

00:00:24,070 --> 00:00:31,120
which is a bluemix we just did a rebrand

00:00:27,270 --> 00:00:32,469
I'm also a former workaholic and I'm a

00:00:31,120 --> 00:00:34,989
big advocate for that it'll actually

00:00:32,469 --> 00:00:37,810
usually see me speaking on work-life

00:00:34,989 --> 00:00:40,300
balance but that's for a different time

00:00:37,810 --> 00:00:42,280
I'm also really obsessed with processes

00:00:40,300 --> 00:00:45,190
and performance and that's a lot of what

00:00:42,280 --> 00:00:49,540
we're talking about today and I'm 96

00:00:45,190 --> 00:00:51,130
years old on the inside so graph chill

00:00:49,540 --> 00:00:52,840
is one of the most exciting things that

00:00:51,130 --> 00:00:55,030
I've seen in quite a while

00:00:52,840 --> 00:00:57,610
there usually I look at new technology

00:00:55,030 --> 00:00:59,590
and I see what's coming up and I'm kind

00:00:57,610 --> 00:01:01,210
of like that's cool but I see a lot of

00:00:59,590 --> 00:01:04,839
things that solve that same problem so

00:01:01,210 --> 00:01:06,219
I'm not like I'm not eager to jump into

00:01:04,839 --> 00:01:09,610
it I kind of want to wait and see what

00:01:06,219 --> 00:01:10,900
happens with graph QL I'm not gonna go

00:01:09,610 --> 00:01:12,220
too deep into the benefits because I

00:01:10,900 --> 00:01:15,250
assume that we're probably gonna hear a

00:01:12,220 --> 00:01:16,990
lot about those today so when I saw

00:01:15,250 --> 00:01:19,510
graph QL I realized that it was solving

00:01:16,990 --> 00:01:21,610
a couple problems that that had not been

00:01:19,510 --> 00:01:23,020
solved previously the first one and the

00:01:21,610 --> 00:01:25,119
one that I think is the most important

00:01:23,020 --> 00:01:27,400
is front-end developer ergonomics the

00:01:25,119 --> 00:01:29,560
the ability to get into a front-end code

00:01:27,400 --> 00:01:31,270
base and just build something you don't

00:01:29,560 --> 00:01:33,520
have to worry about your HTTP request

00:01:31,270 --> 00:01:34,510
layer or setting up fetch or really even

00:01:33,520 --> 00:01:36,340
understanding how any of that

00:01:34,510 --> 00:01:38,860
asynchronous stuff works you just

00:01:36,340 --> 00:01:41,020
install the Apollo client and it just

00:01:38,860 --> 00:01:42,720
happens which i think is is a really

00:01:41,020 --> 00:01:44,830
really big development on the front-end

00:01:42,720 --> 00:01:46,420
there are a lot of really good things on

00:01:44,830 --> 00:01:48,909
the backend too centralized data layers

00:01:46,420 --> 00:01:50,409
centralized documentation like holy crap

00:01:48,909 --> 00:01:53,439
especially when you're looking at a

00:01:50,409 --> 00:01:54,549
company the size of IBM I mean I don't

00:01:53,439 --> 00:01:56,140
know how big your company is but I'm

00:01:54,549 --> 00:01:58,750
willing to bet the documentation is bad

00:01:56,140 --> 00:02:01,659
so to scale that up times 400,000 people

00:01:58,750 --> 00:02:03,880
and and you'll get an idea of what we're

00:02:01,659 --> 00:02:05,350
struggling with so when I saw a graphic

00:02:03,880 --> 00:02:08,229
uol I wanted to get it into production

00:02:05,350 --> 00:02:10,390
immediately I was ready to tear out our

00:02:08,229 --> 00:02:12,670
entire middle tier replace it with graph

00:02:10,390 --> 00:02:14,709
QL and just like save the world right I

00:02:12,670 --> 00:02:15,650
was I was on I was on a white horse and

00:02:14,709 --> 00:02:19,800
I was on a mission

00:02:15,650 --> 00:02:21,630
but the problem was I immediately met a

00:02:19,800 --> 00:02:23,250
lot of resistance and so part of this

00:02:21,630 --> 00:02:24,900
I'm gonna chalk up to the fact that like

00:02:23,250 --> 00:02:26,459
there's just a little bit of

00:02:24,900 --> 00:02:28,580
entrenchment at IBM there are some

00:02:26,459 --> 00:02:30,780
people who've been there forever and

00:02:28,580 --> 00:02:32,730
they just don't like change and that's

00:02:30,780 --> 00:02:35,280
fine but there were also a lot of really

00:02:32,730 --> 00:02:38,010
really good questions and I'm gonna talk

00:02:35,280 --> 00:02:40,410
about those but before I do let me let

00:02:38,010 --> 00:02:43,110
me set the scene of kind of what we do

00:02:40,410 --> 00:02:44,790
at IBM cloud and how its built before I

00:02:43,110 --> 00:02:48,600
before I start talking about the

00:02:44,790 --> 00:02:51,269
specific challenges so IBM cloud is a

00:02:48,600 --> 00:02:53,310
node micro service architecture we're

00:02:51,269 --> 00:02:56,280
currently set up with over 30 micro

00:02:53,310 --> 00:02:59,850
service teams each one of those micro

00:02:56,280 --> 00:03:02,970
services is a completely individual

00:02:59,850 --> 00:03:04,709
codebase so it's a repo with a couple

00:03:02,970 --> 00:03:06,989
shared NPM modules for things like our

00:03:04,709 --> 00:03:08,489
session management and authorization but

00:03:06,989 --> 00:03:12,000
otherwise they're just kind of build

00:03:08,489 --> 00:03:13,350
whatever you want this has a good upside

00:03:12,000 --> 00:03:17,510
because teams are able to control their

00:03:13,350 --> 00:03:21,510
workflow but it also has some downsides

00:03:17,510 --> 00:03:22,829
and one of the biggest downsides is that

00:03:21,510 --> 00:03:24,750
because we don't have a lot of

00:03:22,829 --> 00:03:26,730
centralization things are changing in

00:03:24,750 --> 00:03:28,799
30-plus directions at once if you look

00:03:26,730 --> 00:03:30,989
at our code base right now it gets a

00:03:28,799 --> 00:03:32,430
little crazy and you have problems where

00:03:30,989 --> 00:03:34,470
somebody has to get on a slack Channel

00:03:32,430 --> 00:03:35,730
and say hey our app just broke we think

00:03:34,470 --> 00:03:37,410
it's this end point does anybody know

00:03:35,730 --> 00:03:38,790
who works on that so that I can ask them

00:03:37,410 --> 00:03:42,390
what's different because there's

00:03:38,790 --> 00:03:44,640
definitely not documentation front-ends

00:03:42,390 --> 00:03:46,500
have to touch a lot of backends to get

00:03:44,640 --> 00:03:47,970
data which means that we're reaching to

00:03:46,500 --> 00:03:50,040
a lot of places and it's hard to know

00:03:47,970 --> 00:03:51,600
like if you're on a back-end team and

00:03:50,040 --> 00:03:53,430
you need to make a breaking change it's

00:03:51,600 --> 00:03:55,290
really difficult to know which front

00:03:53,430 --> 00:03:57,079
ends are using your stuff which means

00:03:55,290 --> 00:03:59,819
that a lot of times the way that we fix

00:03:57,079 --> 00:04:01,560
breaking changes is we just break it and

00:03:59,819 --> 00:04:03,900
we wait for the front-end teams to tell

00:04:01,560 --> 00:04:05,790
us that something broke which is I mean

00:04:03,900 --> 00:04:07,410
a terrifying way to approach enterprise

00:04:05,790 --> 00:04:10,890
development but that's kind of what we

00:04:07,410 --> 00:04:12,660
got right now internal documentation and

00:04:10,890 --> 00:04:14,670
architecture is inconsistent we we

00:04:12,660 --> 00:04:16,560
usually try to put swagger Doc's up with

00:04:14,670 --> 00:04:17,850
any api's that we write typically

00:04:16,560 --> 00:04:21,380
speaking those swagger Doc's are about

00:04:17,850 --> 00:04:24,390
80% complete and about 99% out-of-date

00:04:21,380 --> 00:04:26,340
and the code can be wildly inconsistent

00:04:24,390 --> 00:04:28,820
between micro-services if you navigate

00:04:26,340 --> 00:04:30,770
through the bluemix or the IBM cloud

00:04:28,820 --> 00:04:32,090
front end right now and watch your

00:04:30,770 --> 00:04:34,280
network tab you're gonna notice that

00:04:32,090 --> 00:04:36,890
you're loading dojo probably dojo one

00:04:34,280 --> 00:04:38,630
and two polymer you're gonna load

00:04:36,890 --> 00:04:41,810
angular probably all five flavors of

00:04:38,630 --> 00:04:44,060
angular you're gonna load react you will

00:04:41,810 --> 00:04:45,830
also load jQuery at some point in time

00:04:44,060 --> 00:04:48,050
you might load jQuery on all the pages

00:04:45,830 --> 00:04:49,370
with dojo I am actually working on a

00:04:48,050 --> 00:04:52,730
micro service to rescue it right now

00:04:49,370 --> 00:04:55,160
that loads react polymer dojo and jQuery

00:04:52,730 --> 00:04:57,650
all in the same micro service so we we

00:04:55,160 --> 00:04:59,060
have a lot of kind of wild-west approach

00:04:57,650 --> 00:05:00,260
to front-end because a lot of it was

00:04:59,060 --> 00:05:03,410
built back when people thought that

00:05:00,260 --> 00:05:04,760
front-end was just like a thing like who

00:05:03,410 --> 00:05:08,840
cares it's CSS just throw up a couple

00:05:04,760 --> 00:05:10,430
lines of color right so this this is

00:05:08,840 --> 00:05:12,500
something graph QL offers some great

00:05:10,430 --> 00:05:14,300
solutions to this problem the the

00:05:12,500 --> 00:05:16,610
biggest one for me changes get

00:05:14,300 --> 00:05:18,650
centralized if a back-end team is gonna

00:05:16,610 --> 00:05:20,870
make a breaking change they only have to

00:05:18,650 --> 00:05:22,580
let the graph QL layer know and graph QL

00:05:20,870 --> 00:05:24,830
can then deprecated the right fields add

00:05:22,580 --> 00:05:27,500
node add notes give people the ability

00:05:24,830 --> 00:05:29,930
to find the upgrade documentation so

00:05:27,500 --> 00:05:32,240
that all of the teams are aware before

00:05:29,930 --> 00:05:34,190
something breaks that it will break in

00:05:32,240 --> 00:05:37,460
the future which is not something that

00:05:34,190 --> 00:05:39,050
we can easily do now data access is

00:05:37,460 --> 00:05:41,060
happening through a single endpoint I

00:05:39,050 --> 00:05:43,280
don't really need to go too deep into

00:05:41,060 --> 00:05:45,050
the details on this but making one HTTP

00:05:43,280 --> 00:05:48,050
request is usually a lot better than

00:05:45,050 --> 00:05:49,250
making xx documentation get is

00:05:48,050 --> 00:05:50,870
centralized and it's consistent you

00:05:49,250 --> 00:05:52,700
can't release a graph QL schema without

00:05:50,870 --> 00:05:55,100
making it documented in at least a

00:05:52,700 --> 00:05:57,650
rudimentary fashion and we bundle

00:05:55,100 --> 00:06:00,170
graphical with everything that we that

00:05:57,650 --> 00:06:02,120
we release so even if we don't actually

00:06:00,170 --> 00:06:04,130
write Docs for it you can go and explore

00:06:02,120 --> 00:06:07,550
and try the queries and see if they work

00:06:04,130 --> 00:06:10,670
which is a huge step up from our current

00:06:07,550 --> 00:06:12,320
developer workflow we also get a cleaner

00:06:10,670 --> 00:06:13,730
separation between the data and the

00:06:12,320 --> 00:06:15,110
presentation layer which is a pro

00:06:13,730 --> 00:06:17,240
something that we really struggle with

00:06:15,110 --> 00:06:20,120
because a lot of us are used to building

00:06:17,240 --> 00:06:21,290
like monolithic apps where the front end

00:06:20,120 --> 00:06:23,000
in the back end in the middle tier are

00:06:21,290 --> 00:06:25,370
all kind of part of the same codebase

00:06:23,000 --> 00:06:26,780
but it leads to leakage where things

00:06:25,370 --> 00:06:29,030
that should be happening on the back end

00:06:26,780 --> 00:06:30,680
get handled on the front end and then

00:06:29,030 --> 00:06:32,630
when something breaks you're not sure if

00:06:30,680 --> 00:06:34,130
it broke on the front end in the middle

00:06:32,630 --> 00:06:35,510
tier where we actually massage the data

00:06:34,130 --> 00:06:36,770
a little bit or if it was actually a

00:06:35,510 --> 00:06:38,720
problem on the back end and that leads

00:06:36,770 --> 00:06:40,370
to a lot of confusion and a lot of our

00:06:38,720 --> 00:06:41,990
back-end devs getting paged at 3 o'clock

00:06:40,370 --> 00:06:42,650
in the morning because somebody did

00:06:41,990 --> 00:06:43,699
something stupid

00:06:42,650 --> 00:06:45,620
the front end but we didn't know how to

00:06:43,699 --> 00:06:47,600
trace it which is something that we

00:06:45,620 --> 00:06:50,210
really want to get away with however

00:06:47,600 --> 00:06:52,759
when we start getting into what graphic

00:06:50,210 --> 00:06:57,080
you all can do we run into complications

00:06:52,759 --> 00:06:58,520
the first one is who owns this like what

00:06:57,080 --> 00:06:59,960
does this mean that every team is gonna

00:06:58,520 --> 00:07:02,720
have to hand over control of their data

00:06:59,960 --> 00:07:04,100
to one single team that seems like a

00:07:02,720 --> 00:07:06,139
non-starter

00:07:04,100 --> 00:07:07,970
how can teams make independent changes

00:07:06,139 --> 00:07:09,440
if if there's one team managing the

00:07:07,970 --> 00:07:10,759
graphic you'll microservice and a

00:07:09,440 --> 00:07:13,070
back-end team wants to update their

00:07:10,759 --> 00:07:14,660
graph QL schema what does that mean do

00:07:13,070 --> 00:07:15,860
they have to submit a pull request and

00:07:14,660 --> 00:07:19,190
they're at the whim of whoever this

00:07:15,860 --> 00:07:21,139
gatekeeper is can one bad commit take

00:07:19,190 --> 00:07:22,910
down the whole service if I force push

00:07:21,139 --> 00:07:26,330
to master which we can't actually do

00:07:22,910 --> 00:07:28,460
anymore I turn that off but if somebody

00:07:26,330 --> 00:07:29,690
were to like reenable that and force

00:07:28,460 --> 00:07:31,729
push to master take down the whole

00:07:29,690 --> 00:07:34,760
service does every single team suffer

00:07:31,729 --> 00:07:36,740
because one person made a bad choice and

00:07:34,760 --> 00:07:38,620
beyond that doesn't adding an extra

00:07:36,740 --> 00:07:42,620
layer actually make it harder to

00:07:38,620 --> 00:07:44,509
reconcile these problems so we needed to

00:07:42,620 --> 00:07:46,610
find a way to get the benefits of graph

00:07:44,509 --> 00:07:49,220
QL but we weren't sure if we could

00:07:46,610 --> 00:07:51,229
afford the trade-offs and so that's kind

00:07:49,220 --> 00:07:53,660
of where this journey kicked off we

00:07:51,229 --> 00:07:55,430
needed to get some answers and the the

00:07:53,660 --> 00:07:58,010
questions that we wanted to solve were

00:07:55,430 --> 00:08:01,070
first could we centralize our data layer

00:07:58,010 --> 00:08:03,039
but let teams keep control of it second

00:08:01,070 --> 00:08:05,630
is there a way that we could actually

00:08:03,039 --> 00:08:07,430
improve our error handling rather than

00:08:05,630 --> 00:08:12,020
keeping it at the status quo or worse

00:08:07,430 --> 00:08:14,180
making it more confusing and which is

00:08:12,020 --> 00:08:15,800
what I just said and can we make it so

00:08:14,180 --> 00:08:17,900
easy that teams actually want to switch

00:08:15,800 --> 00:08:20,510
can we get people excited to move over

00:08:17,900 --> 00:08:22,190
and use this service and then the last

00:08:20,510 --> 00:08:24,229
one was this can we build a service that

00:08:22,190 --> 00:08:26,960
will work at IBM scale you know where

00:08:24,229 --> 00:08:28,849
we're currently serving from half a

00:08:26,960 --> 00:08:30,169
dozen data centers around the world with

00:08:28,849 --> 00:08:33,099
you know millions of unique visitors

00:08:30,169 --> 00:08:35,810
like this is this has got to be robust

00:08:33,099 --> 00:08:37,490
so the first challenge that we had can

00:08:35,810 --> 00:08:40,279
we centralize data but decentralized

00:08:37,490 --> 00:08:41,810
control of that data and where we landed

00:08:40,279 --> 00:08:43,490
on this was the ideal solution is that

00:08:41,810 --> 00:08:46,190
each team would be able to maintain a

00:08:43,490 --> 00:08:47,990
graph QL schema but we wanted a way for

00:08:46,190 --> 00:08:50,120
that schema to be aggregated into a

00:08:47,990 --> 00:08:52,220
central micro service so effectively we

00:08:50,120 --> 00:08:54,110
get the best of both worlds

00:08:52,220 --> 00:08:56,300
but that led us to a question which was

00:08:54,110 --> 00:08:58,310
we're gonna need some kind of a

00:08:56,300 --> 00:08:59,899
nice format if this is gonna work we

00:08:58,310 --> 00:09:01,220
can't just let every team build whatever

00:08:59,899 --> 00:09:04,339
they want and expect that things are

00:09:01,220 --> 00:09:06,980
gonna be fine so we worked on this and

00:09:04,339 --> 00:09:08,870
we landed on what we call data sources I

00:09:06,980 --> 00:09:10,339
don't think that I'm originating that

00:09:08,870 --> 00:09:12,200
term it's just kind of the the what

00:09:10,339 --> 00:09:14,390
we've used to to encapsulate the entire

00:09:12,200 --> 00:09:15,709
thing so your schema your resolvers a

00:09:14,390 --> 00:09:17,870
few other components that I'll talk

00:09:15,709 --> 00:09:20,180
about right now so when you look at a

00:09:17,870 --> 00:09:22,250
traditional Apollo server tutorial

00:09:20,180 --> 00:09:23,720
typically what happens is you you see

00:09:22,250 --> 00:09:25,310
somebody will say all right so you're

00:09:23,720 --> 00:09:27,200
gonna build a schema you're gonna build

00:09:25,310 --> 00:09:28,579
some resolvers and then some stuff

00:09:27,200 --> 00:09:31,970
happens and now you have an Apollo

00:09:28,579 --> 00:09:34,880
server and they kind of leave the data

00:09:31,970 --> 00:09:36,440
access and and all of the other like

00:09:34,880 --> 00:09:37,339
foundational bits that make that work

00:09:36,440 --> 00:09:40,700
they kind of leave that to your

00:09:37,339 --> 00:09:42,290
imagination so we wanted to remove the

00:09:40,700 --> 00:09:43,910
imagination from it and make it

00:09:42,290 --> 00:09:46,250
something much more clearly defined that

00:09:43,910 --> 00:09:48,140
people could realistically repeat

00:09:46,250 --> 00:09:49,790
without having to learn how graph tool

00:09:48,140 --> 00:09:51,500
works under the hood we wanted somebody

00:09:49,790 --> 00:09:53,930
to be able to download a template and

00:09:51,500 --> 00:09:55,700
just build something right away so what

00:09:53,930 --> 00:09:57,980
we did was we we borrowed from Jonas

00:09:55,700 --> 00:10:01,040
Helfer who wrote an article about how to

00:09:57,980 --> 00:10:04,820
structure graph QL servers and we added

00:10:01,040 --> 00:10:07,490
a model and we added a connector so the

00:10:04,820 --> 00:10:09,529
model is just what tells the datasource

00:10:07,490 --> 00:10:11,990
where data comes from in our case we've

00:10:09,529 --> 00:10:14,390
actually optimized for REST API s we

00:10:11,990 --> 00:10:15,740
typically wrap REST API s there's some

00:10:14,390 --> 00:10:18,709
history to that come find me later if

00:10:15,740 --> 00:10:20,870
you want to know it and then the Qunari

00:10:18,709 --> 00:10:22,459
the connector is what tells the

00:10:20,870 --> 00:10:24,079
datasource where the data is and the

00:10:22,459 --> 00:10:26,810
model is your typical crud layer it's

00:10:24,079 --> 00:10:29,959
you know get items by ID or set item by

00:10:26,810 --> 00:10:33,829
ID and we wrap all of that with a common

00:10:29,959 --> 00:10:35,480
export which makes it into a plugin so

00:10:33,829 --> 00:10:38,060
this gives us the advantage of having

00:10:35,480 --> 00:10:40,490
each data source as an independent repo

00:10:38,060 --> 00:10:42,140
so we get no bottlenecks each team is

00:10:40,490 --> 00:10:44,120
able to commit and deploy code directly

00:10:42,140 --> 00:10:46,430
to their data source with no oversight

00:10:44,120 --> 00:10:48,709
from anyone else we have no loss of

00:10:46,430 --> 00:10:51,020
control so the team actually owns their

00:10:48,709 --> 00:10:53,060
data I own the graph QL micro-service

00:10:51,020 --> 00:10:54,529
but I have no idea what teams are doing

00:10:53,060 --> 00:10:57,920
with the data on it and I should I

00:10:54,529 --> 00:10:59,899
shouldn't need to know that and we get

00:10:57,920 --> 00:11:02,959
to avoid the accidental breakage problem

00:10:59,899 --> 00:11:04,760
if somebody writes bad code and it goes

00:11:02,959 --> 00:11:06,050
into their data source I will see that

00:11:04,760 --> 00:11:07,310
their data source has a breaking build

00:11:06,050 --> 00:11:09,920
when they move to bump the packaged

00:11:07,310 --> 00:11:12,560
version in the graph QL micro-service so

00:11:09,920 --> 00:11:13,639
that means that we can see like hey

00:11:12,560 --> 00:11:14,750
you've got a breaking build you need to

00:11:13,639 --> 00:11:17,029
fix that before I can merge these

00:11:14,750 --> 00:11:18,380
changes and that's great also they can't

00:11:17,029 --> 00:11:20,149
actually we set it up on Symantec

00:11:18,380 --> 00:11:21,769
release so if their build is breaking

00:11:20,149 --> 00:11:23,240
they can't actually publish to the NPM

00:11:21,769 --> 00:11:23,600
repo for us to update it in the first

00:11:23,240 --> 00:11:25,430
place

00:11:23,600 --> 00:11:26,360
so we put some checks and balances in to

00:11:25,430 --> 00:11:28,250
make sure that you would have to try

00:11:26,360 --> 00:11:32,329
really really hard to do something

00:11:28,250 --> 00:11:33,920
stupid with this this setup so now that

00:11:32,329 --> 00:11:35,959
we've got external data sources how do

00:11:33,920 --> 00:11:38,240
we actually combine them so we start out

00:11:35,959 --> 00:11:40,459
we've got you know our set of data

00:11:38,240 --> 00:11:41,959
sources and the way that we approach

00:11:40,459 --> 00:11:44,600
this was we built what we're calling

00:11:41,959 --> 00:11:46,639
Gramps which is the the I can't actually

00:11:44,600 --> 00:11:49,550
say the whole thing it's graph QL Apollo

00:11:46,639 --> 00:11:51,529
micro-service pattern server Gramps and

00:11:49,550 --> 00:11:53,120
the the joke for me is that I basically

00:11:51,529 --> 00:11:54,860
think of this middleware being like get

00:11:53,120 --> 00:11:58,070
your data off my lawn because it lets

00:11:54,860 --> 00:11:59,839
everybody control their data but but we

00:11:58,070 --> 00:12:03,260
get to control the the data source so

00:11:59,839 --> 00:12:06,110
the graph QL middleware here sits on top

00:12:03,260 --> 00:12:08,060
of Apollo server and it pulls all those

00:12:06,110 --> 00:12:10,100
data sources together and composes them

00:12:08,060 --> 00:12:11,630
together and it gives us the ability if

00:12:10,100 --> 00:12:14,420
we wanted where we could very easily

00:12:11,630 --> 00:12:15,529
have schema stitching in place to plug

00:12:14,420 --> 00:12:17,300
them together and if you haven't heard

00:12:15,529 --> 00:12:20,209
about schema stitching yet it's like my

00:12:17,300 --> 00:12:22,610
favorite new feature and all this gives

00:12:20,209 --> 00:12:25,250
us a single graph QL endpoint which I am

00:12:22,610 --> 00:12:26,750
super excited about and this was really

00:12:25,250 --> 00:12:28,459
important to us to make the

00:12:26,750 --> 00:12:30,800
implementation easy enough that you

00:12:28,459 --> 00:12:32,630
could put it on a single slide so let's

00:12:30,800 --> 00:12:34,610
take a look this is a usual graph QL

00:12:32,630 --> 00:12:36,019
server I cheated a little bit by making

00:12:34,610 --> 00:12:39,529
the text small so I apologize if you

00:12:36,019 --> 00:12:41,120
can't read it so in order to convert

00:12:39,529 --> 00:12:43,220
this over basically what we've got here

00:12:41,120 --> 00:12:45,130
is we're using graph QL Express we're

00:12:43,220 --> 00:12:46,970
importing a schema and we're importing a

00:12:45,130 --> 00:12:50,570
context which we're calling my data

00:12:46,970 --> 00:12:53,540
access and plugging those into a graph

00:12:50,570 --> 00:12:56,870
QL endpoint so in order to use Gramps we

00:12:53,540 --> 00:12:59,630
have to import the Gramps middleware we

00:12:56,870 --> 00:13:02,540
then swap out the schema and the data

00:12:59,630 --> 00:13:04,519
access that are local for install data

00:13:02,540 --> 00:13:08,750
points read packages that we're getting

00:13:04,519 --> 00:13:11,389
from NPM we add the middleware in

00:13:08,750 --> 00:13:12,709
between body parser and Gramps Express I

00:13:11,389 --> 00:13:16,220
haven't tested it I don't think it

00:13:12,709 --> 00:13:19,339
matters the order and then finally we

00:13:16,220 --> 00:13:22,190
the the middleware attaches the schema

00:13:19,339 --> 00:13:23,699
in context to the request object which

00:13:22,190 --> 00:13:25,619
I've read is bad for performance

00:13:23,699 --> 00:13:26,699
I'm not sure how to do it otherwise so

00:13:25,619 --> 00:13:30,239
if somebody wants to submit a pull

00:13:26,699 --> 00:13:32,309
request please help me but basically

00:13:30,239 --> 00:13:34,379
what it does is it takes the the grant

00:13:32,309 --> 00:13:37,139
schema in context which with a combined

00:13:34,379 --> 00:13:39,149
output of the different data sources and

00:13:37,139 --> 00:13:42,509
attaches them to graph QL express like

00:13:39,149 --> 00:13:43,889
you would normally so this way we don't

00:13:42,509 --> 00:13:45,809
actually need anybody to know anything

00:13:43,889 --> 00:13:47,730
about how this stuff works they just

00:13:45,809 --> 00:13:49,859
import their data source drop it into

00:13:47,730 --> 00:13:52,199
that data sources array and they've got

00:13:49,859 --> 00:13:55,559
their data source deployed to our graph

00:13:52,199 --> 00:13:57,509
QL production server so the next

00:13:55,559 --> 00:13:59,699
challenge was how can we overcome error

00:13:57,509 --> 00:14:01,109
handling and make it actually useful so

00:13:59,699 --> 00:14:03,209
we looked at you know what actually

00:14:01,109 --> 00:14:04,230
makes an error helpful the first thing

00:14:03,209 --> 00:14:05,609
is a clear description of what went

00:14:04,230 --> 00:14:07,410
wrong like obviously you don't want an

00:14:05,609 --> 00:14:08,549
error that's like you know what

00:14:07,410 --> 00:14:10,439
nullpointerexception

00:14:08,549 --> 00:14:12,449
so a clear description of what went

00:14:10,439 --> 00:14:14,189
wrong clarity about where the error

00:14:12,449 --> 00:14:16,859
occurred so we want to know did did

00:14:14,189 --> 00:14:18,600
graph QL have a problem or was it an

00:14:16,859 --> 00:14:21,089
underlying data access issue like did

00:14:18,600 --> 00:14:23,009
the did the server throw a 500 or did

00:14:21,089 --> 00:14:24,869
graph QL throw a 500 we need to have

00:14:23,009 --> 00:14:26,910
that clarity because I don't want the

00:14:24,869 --> 00:14:28,619
back-end team to get paged because my

00:14:26,910 --> 00:14:29,999
service went down that's a dick move I

00:14:28,619 --> 00:14:31,619
want to make sure that the people who

00:14:29,999 --> 00:14:34,829
write the code are the ones cleaning up

00:14:31,619 --> 00:14:37,139
the code we also want information to

00:14:34,829 --> 00:14:39,329
help with tracing bugs so we wanted

00:14:37,139 --> 00:14:41,399
things like error codes or links to

00:14:39,329 --> 00:14:43,709
documentation links to the the model

00:14:41,399 --> 00:14:45,689
that failed things like that and a

00:14:43,709 --> 00:14:48,149
unique ID so that we're able to show a

00:14:45,689 --> 00:14:50,519
client-side error and then link that to

00:14:48,149 --> 00:14:52,379
or correlate that to actual like

00:14:50,519 --> 00:14:55,049
sensitive data on the server side this

00:14:52,379 --> 00:14:57,269
was important to us so on the client

00:14:55,049 --> 00:14:59,160
side we came up with a model I borrowed

00:14:57,269 --> 00:15:02,220
something that I forget the name of it's

00:14:59,160 --> 00:15:05,759
like Apollo graph QL errors or something

00:15:02,220 --> 00:15:11,669
which extends boom which is a library

00:15:05,759 --> 00:15:13,799
for making errors effectively so we we

00:15:11,669 --> 00:15:16,649
use this to create some custom fields we

00:15:13,799 --> 00:15:18,059
add a description link to Doc's which i

00:15:16,649 --> 00:15:19,679
think is probably the most important

00:15:18,059 --> 00:15:21,299
thing that we've got here the target

00:15:19,679 --> 00:15:24,059
endpoint so what we were trying to load

00:15:21,299 --> 00:15:25,589
and some other things the the error code

00:15:24,059 --> 00:15:28,829
what the status code was from the server

00:15:25,589 --> 00:15:30,749
and then there's the the grid there in

00:15:28,829 --> 00:15:33,959
production obviously we can't show all

00:15:30,749 --> 00:15:35,309
of that so we end up we we might have

00:15:33,959 --> 00:15:36,950
our Doc's linked to something behind our

00:15:35,309 --> 00:15:38,990
firewall that's pretty calm

00:15:36,950 --> 00:15:40,910
we also may not be exposing that

00:15:38,990 --> 00:15:42,500
endpoint publicly look obviously you can

00:15:40,910 --> 00:15:43,820
find it but we don't necessarily want to

00:15:42,500 --> 00:15:45,560
just tell you like hey go hammer on this

00:15:43,820 --> 00:15:48,020
endpoint and see what's there

00:15:45,560 --> 00:15:50,410
so in production we strip out the the

00:15:48,020 --> 00:15:53,750
docks link in the target endpoint but

00:15:50,410 --> 00:15:56,150
because we've hadded that common grid in

00:15:53,750 --> 00:15:59,960
our server logs you can see here the

00:15:56,150 --> 00:16:00,290
grid is uh it starts with 1784 so on the

00:15:59,960 --> 00:16:03,350
server

00:16:00,290 --> 00:16:04,730
you've got 1784 and we can just do a

00:16:03,350 --> 00:16:06,590
quick search if the client opens a

00:16:04,730 --> 00:16:08,000
ticket and sends us the error we can

00:16:06,590 --> 00:16:09,920
then go to the server logs look it up

00:16:08,000 --> 00:16:11,390
figure out you know what they hit and

00:16:09,920 --> 00:16:13,250
what they were trying to get the data

00:16:11,390 --> 00:16:14,750
that they passed along with it and this

00:16:13,250 --> 00:16:16,480
is all configurable you can you can

00:16:14,750 --> 00:16:18,410
update like which things are being

00:16:16,480 --> 00:16:21,650
passed through to the client and which

00:16:18,410 --> 00:16:23,810
ones aren't so what this means for us is

00:16:21,650 --> 00:16:26,690
that errors are going to be normalized

00:16:23,810 --> 00:16:28,880
across all data sources support tickets

00:16:26,690 --> 00:16:31,220
can directly reference details in the

00:16:28,880 --> 00:16:32,510
logs so again you send in your your

00:16:31,220 --> 00:16:34,330
error message and we can go to the log

00:16:32,510 --> 00:16:36,380
and look up exactly which error you had

00:16:34,330 --> 00:16:38,660
errors are clear they come with

00:16:36,380 --> 00:16:40,460
documentation obviously this relies on

00:16:38,660 --> 00:16:42,470
us writing that documentation but I'm

00:16:40,460 --> 00:16:44,330
really working on fixing that culture at

00:16:42,470 --> 00:16:45,800
IBM and we're having good progress like

00:16:44,330 --> 00:16:47,300
the teams that we've worked with have

00:16:45,800 --> 00:16:48,920
been really receptive to this because as

00:16:47,300 --> 00:16:50,990
soon as somebody sees the power of

00:16:48,920 --> 00:16:52,670
writing well-tested well-documented code

00:16:50,990 --> 00:16:55,550
it's typically pretty hard for him to go

00:16:52,670 --> 00:16:57,410
back and then the source of the given

00:16:55,550 --> 00:17:00,110
error is immediately clear I know that

00:16:57,410 --> 00:17:01,940
the back end through a 500 and I'm not

00:17:00,110 --> 00:17:05,000
just getting like a mystery mystery

00:17:01,940 --> 00:17:06,410
graph QL error but we didn't want to

00:17:05,000 --> 00:17:08,540
like force this on anybody so it is

00:17:06,410 --> 00:17:10,220
opt-in so to add it all you have to do

00:17:08,540 --> 00:17:12,620
is just grab the format error function

00:17:10,220 --> 00:17:14,600
out of the the grams context or the

00:17:12,620 --> 00:17:15,860
grams object if you don't want it you

00:17:14,600 --> 00:17:18,319
can use a completely different error

00:17:15,860 --> 00:17:19,610
formatting library if you do want it you

00:17:18,319 --> 00:17:22,370
just have to throw that in no changes

00:17:19,610 --> 00:17:24,260
otherwise the third thing we wanted to

00:17:22,370 --> 00:17:25,819
do was make development so easy that

00:17:24,260 --> 00:17:28,459
teams actually wanted to use it and we

00:17:25,819 --> 00:17:30,590
we knew that if we wanted teams to start

00:17:28,459 --> 00:17:32,060
using graph QL I needed to make the

00:17:30,590 --> 00:17:33,470
right thing the easy thing like that's

00:17:32,060 --> 00:17:34,670
my mantra at IBM I need to make the

00:17:33,470 --> 00:17:36,650
right thing the easy thing how can i

00:17:34,670 --> 00:17:39,530
smooth the path so that the thing that I

00:17:36,650 --> 00:17:42,050
want you to do is less painful more

00:17:39,530 --> 00:17:43,700
rewarding more prestigious whatever then

00:17:42,050 --> 00:17:45,950
the thing that you were doing previously

00:17:43,700 --> 00:17:47,510
and so all the tools that I build are

00:17:45,950 --> 00:17:49,190
built from that foundation how can I

00:17:47,510 --> 00:17:49,940
convince developers that I'm making

00:17:49,190 --> 00:17:51,500
their life easier

00:17:49,940 --> 00:17:54,889
not adding another pilot crap to their

00:17:51,500 --> 00:17:57,559
stack so we went to the data source

00:17:54,889 --> 00:17:59,960
starter kit this was the first thing we

00:17:57,559 --> 00:18:01,700
give people a data source starter kit

00:17:59,960 --> 00:18:03,559
that effectively has all the pieces you

00:18:01,700 --> 00:18:06,259
need to deploy you can deploy the

00:18:03,559 --> 00:18:08,000
starter kit and it will work we also

00:18:06,259 --> 00:18:09,200
added a step-by-step tutorial that walks

00:18:08,000 --> 00:18:11,029
you through each line of code that

00:18:09,200 --> 00:18:14,029
you're gonna alter in the starter kit to

00:18:11,029 --> 00:18:16,399
end up with a working data source right

00:18:14,029 --> 00:18:18,019
now it wraps the IMDB API which is an

00:18:16,399 --> 00:18:20,480
open source API which unfortunately was

00:18:18,019 --> 00:18:22,820
very unstable I found out after I spent

00:18:20,480 --> 00:18:25,279
three days building it so I've since

00:18:22,820 --> 00:18:27,230
rebuilt and we wrapped the xkcd API

00:18:25,279 --> 00:18:28,519
which is a lot smaller a little easier

00:18:27,230 --> 00:18:31,190
to implement and I'll be rewriting this

00:18:28,519 --> 00:18:32,720
tutorial over the next week or so we put

00:18:31,190 --> 00:18:34,250
the test coverage up at 100% you so you

00:18:32,720 --> 00:18:37,340
got 100% unit test coverage out of the

00:18:34,250 --> 00:18:39,230
box and we pre-configured it to easily

00:18:37,340 --> 00:18:41,269
plug into Travis CI and code climate all

00:18:39,230 --> 00:18:42,409
you have to do is go to those places for

00:18:41,269 --> 00:18:45,559
code Clement you have to grab a test

00:18:42,409 --> 00:18:49,549
coverage reporter ID and for Travis you

00:18:45,559 --> 00:18:52,220
just have to turn it on and so the the

00:18:49,549 --> 00:18:53,179
code is there but don't look at that yet

00:18:52,220 --> 00:18:57,860
because I haven't made the open source

00:18:53,179 --> 00:18:59,960
announcement so we we also built a CLI

00:18:57,860 --> 00:19:01,850
to make development easier so we we

00:18:59,960 --> 00:19:03,649
built a CLI command called Gramps if you

00:19:01,850 --> 00:19:06,259
are working in a Gramps code base and

00:19:03,649 --> 00:19:08,299
you run Gramps - - live it will hit live

00:19:06,259 --> 00:19:11,240
API endpoints and you will get that data

00:19:08,299 --> 00:19:12,590
if you use - - mock you get mock data

00:19:11,240 --> 00:19:14,570
assuming that you was that you've

00:19:12,590 --> 00:19:16,909
created mock resolvers otherwise you

00:19:14,570 --> 00:19:19,700
just get a bunch of hello world and we

00:19:16,909 --> 00:19:21,620
we give you a information about where

00:19:19,700 --> 00:19:24,019
you can go look at graphical to test

00:19:21,620 --> 00:19:25,909
your data source in your browser the

00:19:24,019 --> 00:19:27,710
problem was when we actually started

00:19:25,909 --> 00:19:30,590
using us in production we ran into a

00:19:27,710 --> 00:19:32,330
snag where once the graphical micro

00:19:30,590 --> 00:19:35,269
service had somebody's data source in it

00:19:32,330 --> 00:19:36,620
when they wanted to make changes they

00:19:35,269 --> 00:19:38,240
would have two instances of that data

00:19:36,620 --> 00:19:40,940
source which caused a collision and gave

00:19:38,240 --> 00:19:42,139
me a bunch of headaches so we had to

00:19:40,940 --> 00:19:44,000
look at a way to solve that problem and

00:19:42,139 --> 00:19:46,340
the way that we overcame that was with

00:19:44,000 --> 00:19:48,409
having a local data source override so

00:19:46,340 --> 00:19:49,940
if you specify a data source I'll check

00:19:48,409 --> 00:19:51,769
for a name collision and turn off the

00:19:49,940 --> 00:19:54,110
one that's installed on the grant server

00:19:51,769 --> 00:19:56,720
so that you're able to develop the one

00:19:54,110 --> 00:19:58,700
locally however to make sure that that

00:19:56,720 --> 00:20:00,889
doesn't leak into production we add

00:19:58,700 --> 00:20:03,049
warnings I actually had a lot of

00:20:00,889 --> 00:20:03,630
warnings because I want to make damn

00:20:03,049 --> 00:20:05,640
sure that

00:20:03,630 --> 00:20:09,690
you know that this is not production

00:20:05,640 --> 00:20:11,310
code this is just for testing so the

00:20:09,690 --> 00:20:12,360
last challenge that we had was we wanted

00:20:11,310 --> 00:20:15,810
to build something that would work at

00:20:12,360 --> 00:20:17,430
global scale and fortunately for us we

00:20:15,810 --> 00:20:19,290
didn't have to do a damn thing the

00:20:17,430 --> 00:20:20,610
Apollo server just worked so round of

00:20:19,290 --> 00:20:22,680
applause to those guys because they've

00:20:20,610 --> 00:20:24,630
done a great job of building excellent

00:20:22,680 --> 00:20:26,310
software that works at scale

00:20:24,630 --> 00:20:27,390
so we were just like I was blown away I

00:20:26,310 --> 00:20:28,380
put it up in production I was like

00:20:27,390 --> 00:20:33,960
alright let's hammer on it and then it

00:20:28,380 --> 00:20:35,370
just worked I was like ok so this was a

00:20:33,960 --> 00:20:37,350
really kind of interesting ride for us

00:20:35,370 --> 00:20:40,680
because we so I learned about graph QL

00:20:37,350 --> 00:20:41,550
in like March or April right I'd heard

00:20:40,680 --> 00:20:42,540
about it but I hadn't really done

00:20:41,550 --> 00:20:45,090
anything with it so I built my first

00:20:42,540 --> 00:20:47,220
little toy app and I think I finished it

00:20:45,090 --> 00:20:50,340
in April got really excited about it

00:20:47,220 --> 00:20:51,990
started working on it at IBM in May we

00:20:50,340 --> 00:20:54,870
got it into production in July which is

00:20:51,990 --> 00:20:56,880
a crazy tight turnaround for an

00:20:54,870 --> 00:20:58,530
enterprise level project which we kind

00:20:56,880 --> 00:21:01,050
of did by just like not asking anybody

00:20:58,530 --> 00:21:04,230
for permission and building it which I

00:21:01,050 --> 00:21:06,380
would highly recommend like it's it's so

00:21:04,230 --> 00:21:09,030
much more liberating than the meetings

00:21:06,380 --> 00:21:10,590
but then so we we went on then and

00:21:09,030 --> 00:21:11,790
realized like after the dust settled

00:21:10,590 --> 00:21:13,440
there were there were two big things

00:21:11,790 --> 00:21:15,930
that I realized and and this is where I

00:21:13,440 --> 00:21:17,910
actually saw that I'd built something

00:21:15,930 --> 00:21:20,790
that that maybe was bigger than I

00:21:17,910 --> 00:21:22,800
thought because I was like holy you

00:21:20,790 --> 00:21:25,230
know what I just did if people were to

00:21:22,800 --> 00:21:28,230
open-source these these data sources and

00:21:25,230 --> 00:21:31,410
put them up on NPM then a company like

00:21:28,230 --> 00:21:34,620
say universe to use the schema stitching

00:21:31,410 --> 00:21:37,380
example could open source there there

00:21:34,620 --> 00:21:40,320
graph QL API as a grants data source and

00:21:37,380 --> 00:21:42,810
you as a developer could then build a

00:21:40,320 --> 00:21:44,490
custom app install the Gramps data

00:21:42,810 --> 00:21:46,560
source for universe and write your own

00:21:44,490 --> 00:21:48,150
data source that stitches with universe

00:21:46,560 --> 00:21:50,540
now you don't have to maintain a

00:21:48,150 --> 00:21:52,650
universe wrapper it's maintained for you

00:21:50,540 --> 00:21:54,750
hopefully by universe because they'll

00:21:52,650 --> 00:21:56,160
get control over that API but maybe by a

00:21:54,750 --> 00:21:58,740
third-party developer maybe by you

00:21:56,160 --> 00:22:01,740
whoever whoever ends up doing it but now

00:21:58,740 --> 00:22:06,390
the entire community can have access to

00:22:01,740 --> 00:22:08,130
to locally built graph QL servers that

00:22:06,390 --> 00:22:12,300
are wrapped in rest and API endpoints

00:22:08,130 --> 00:22:13,590
and they will be able to like get the

00:22:12,300 --> 00:22:15,840
same benefit as we get from installing

00:22:13,590 --> 00:22:17,220
Express or installing the Apollo client

00:22:15,840 --> 00:22:18,630
when something changes we just

00:22:17,220 --> 00:22:20,909
upgrade the version and we get the new

00:22:18,630 --> 00:22:22,289
benefits and then the second thing we

00:22:20,909 --> 00:22:23,520
realized is after I kind of talked

00:22:22,289 --> 00:22:24,900
through that with myself I was like this

00:22:23,520 --> 00:22:27,120
could be really useful to people

00:22:24,900 --> 00:22:29,970
and so we're really excited we we're

00:22:27,120 --> 00:22:32,490
releasing it under the MIT license and

00:22:29,970 --> 00:22:34,200
we've really really hope that people are

00:22:32,490 --> 00:22:35,970
excited to use it where we're calling it

00:22:34,200 --> 00:22:39,270
Gramps like I said it's up on github

00:22:35,970 --> 00:22:41,700
it's up on NPM please go look at the

00:22:39,270 --> 00:22:43,350
docs and look at the at the pull

00:22:41,700 --> 00:22:46,080
requests and issues that are out that

00:22:43,350 --> 00:22:47,100
are out there now and get involved you

00:22:46,080 --> 00:22:48,500
know this is something that you think

00:22:47,100 --> 00:22:51,030
could be used for here for your company

00:22:48,500 --> 00:22:52,409
open issues open pull requests let us

00:22:51,030 --> 00:22:53,970
know what you would need please build

00:22:52,409 --> 00:22:55,950
data sources like that's gonna be the

00:22:53,970 --> 00:22:57,570
thing that if this is going to be useful

00:22:55,950 --> 00:22:59,400
for you build the data source for your

00:22:57,570 --> 00:23:01,080
company using the grants format and and

00:22:59,400 --> 00:23:02,820
drop it out there it's there's nothing

00:23:01,080 --> 00:23:04,140
magical about the format it's not going

00:23:02,820 --> 00:23:07,049
to prevent it from being compatible with

00:23:04,140 --> 00:23:08,130
any other graph QL server it's just a

00:23:07,049 --> 00:23:11,280
way that we can make these things

00:23:08,130 --> 00:23:13,020
shareable and and move them on so thank

00:23:11,280 --> 00:23:13,920
you very much for your time I hope you

00:23:13,020 --> 00:23:20,549
enjoyed the rest of the conference

00:23:13,920 --> 00:23:20,549

YouTube URL: https://www.youtube.com/watch?v=T3FbZsYXi50


