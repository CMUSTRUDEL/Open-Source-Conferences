Title: Dan Schafer - GraphQL: Client-Driven Development
Publication date: 2017-11-09
Playlist: GraphQL Summit 2017
Description: 
	Dan Schafer, Software Engineer at Facebook, gave this talk at GraphQL Summit 2017. Learn more: summit.graphql.com

The evolution of GraphQL—from fragments to mutations to subscriptions—has always been accomplished from a client-first perspective. This talk will describe how that was accomplished in the early days of GraphQL, and how GraphQL might continue to evolve in the future.
Captions: 
	00:00:03,850 --> 00:00:08,480
client-driven development suite ah so as

00:00:06,859 --> 00:00:10,550
Lee mentioned my name is Dan Schaffer

00:00:08,480 --> 00:00:11,990
I'm a software engineer at Facebook I've

00:00:10,550 --> 00:00:14,330
been there a little over seven years

00:00:11,990 --> 00:00:17,300
spent two years working on the newsfeed

00:00:14,330 --> 00:00:19,070
team and then sort of my fate aligned

00:00:17,300 --> 00:00:20,690
with Lee and schrock we started working

00:00:19,070 --> 00:00:21,950
on graph QL and I've been the

00:00:20,690 --> 00:00:25,820
worst-dressed member of the trio ever

00:00:21,950 --> 00:00:28,190
since so what I want to talk about today

00:00:25,820 --> 00:00:30,740
is some of the fundamental

00:00:28,190 --> 00:00:32,419
characteristics of graph QL and how they

00:00:30,740 --> 00:00:34,250
evolved because I think an important

00:00:32,419 --> 00:00:36,170
aspect of it is you know we talk about

00:00:34,250 --> 00:00:38,329
graph QL we're talking about the spec we

00:00:36,170 --> 00:00:39,800
talk about how it's open source and it

00:00:38,329 --> 00:00:41,989
did not sort of emerge from this

00:00:39,800 --> 00:00:43,639
primordial void right there was a lot of

00:00:41,989 --> 00:00:46,789
development that went into a lot of

00:00:43,639 --> 00:00:48,499
evolution even before we even started

00:00:46,789 --> 00:00:49,639
talking about open sourcing it and I

00:00:48,499 --> 00:00:51,409
actually want to start with this quote

00:00:49,639 --> 00:00:52,699
which I've got sort of the link down

00:00:51,409 --> 00:00:54,289
there it's from a blog post that

00:00:52,699 --> 00:00:56,329
predates the spec it actually are a

00:00:54,289 --> 00:00:58,940
variant on it made it into the spec and

00:00:56,329 --> 00:01:01,249
it says graph QL is unapologetically

00:00:58,940 --> 00:01:02,510
driven by the requirements of views and

00:01:01,249 --> 00:01:04,519
the front-end engineers that write them

00:01:02,510 --> 00:01:06,020
we start with their way of thinking in

00:01:04,519 --> 00:01:09,200
requirements and bow the language and

00:01:06,020 --> 00:01:10,130
runtime necessary to enable that and I

00:01:09,200 --> 00:01:12,890
think that's really important I think

00:01:10,130 --> 00:01:14,600
that really informs a lot of what graph

00:01:12,890 --> 00:01:17,090
QL is and I think a lot of why people

00:01:14,600 --> 00:01:18,530
like it and when I think about the

00:01:17,090 --> 00:01:20,690
history of graph QL it really has

00:01:18,530 --> 00:01:23,360
informed all three phases of this the

00:01:20,690 --> 00:01:24,950
prototype phase that original crazy six

00:01:23,360 --> 00:01:26,660
months when we were developing it the

00:01:24,950 --> 00:01:28,040
evolution until we decided to open

00:01:26,660 --> 00:01:29,930
source it and in the open source space

00:01:28,040 --> 00:01:31,790
and I'm not going to talk too much about

00:01:29,930 --> 00:01:33,320
that third one because I actually don't

00:01:31,790 --> 00:01:35,330
have that great of perspective on it

00:01:33,320 --> 00:01:37,100
that one is really informed by this room

00:01:35,330 --> 00:01:38,510
it's informed by the community but I do

00:01:37,100 --> 00:01:40,190
want to talk about some of the evolution

00:01:38,510 --> 00:01:43,070
in the prototype in the and the

00:01:40,190 --> 00:01:44,630
evolution so let's start with the

00:01:43,070 --> 00:01:46,220
prototype and I'm actually going to

00:01:44,630 --> 00:01:47,990
blatantly steal from a talk that I gave

00:01:46,220 --> 00:01:49,700
a while ago talking about these

00:01:47,990 --> 00:01:52,190
characteristics of our graph QL servers

00:01:49,700 --> 00:01:53,900
what are these fundamental precepts that

00:01:52,190 --> 00:01:55,850
guided us and I said we think in terms

00:01:53,900 --> 00:01:57,590
of graphs and not endpoints we want to

00:01:55,850 --> 00:02:00,440
have a single source of truth and we

00:01:57,590 --> 00:02:01,490
have a thin graph QL API layer and I was

00:02:00,440 --> 00:02:03,590
thinking about these things I'm saying

00:02:01,490 --> 00:02:05,090
why do we believe these things we've

00:02:03,590 --> 00:02:06,620
been doing it for so long it's just sort

00:02:05,090 --> 00:02:08,539
of natural to us at this point at

00:02:06,620 --> 00:02:10,340
Facebook but they must have come from

00:02:08,539 --> 00:02:12,530
somewhere and when I think about where

00:02:10,340 --> 00:02:14,090
they came from they really did come from

00:02:12,530 --> 00:02:16,300
the development of the original graph

00:02:14,090 --> 00:02:17,320
view of prototype where we had this eye

00:02:16,300 --> 00:02:19,150
Wes client that we were trying to build

00:02:17,320 --> 00:02:21,490
we were trying to build a native iOS app

00:02:19,150 --> 00:02:22,630
not one those gonna be html5 and they

00:02:21,490 --> 00:02:25,690
were building it out and they were using

00:02:22,630 --> 00:02:27,610
fql which if you've used fql it was a

00:02:25,690 --> 00:02:30,220
sequel like interface double Dahlia to

00:02:27,610 --> 00:02:32,980
query for Facebook's graph and they were

00:02:30,220 --> 00:02:35,410
trying to build a newsfeed and so their

00:02:32,980 --> 00:02:37,180
query looked something like this and

00:02:35,410 --> 00:02:38,650
this is one of these cases where slides

00:02:37,180 --> 00:02:40,270
don't really do something justice

00:02:38,650 --> 00:02:41,620
because I feel like it's easy to look at

00:02:40,270 --> 00:02:42,970
this query and say yeah that's an

00:02:41,620 --> 00:02:45,190
exaggeration for the sake of the slide

00:02:42,970 --> 00:02:47,020
let me assure you this is a massive

00:02:45,190 --> 00:02:49,060
simplification of what they were trying

00:02:47,020 --> 00:02:50,350
to do there were at least six or seven

00:02:49,060 --> 00:02:52,240
joins just like in the original

00:02:50,350 --> 00:02:53,950
prototype trying to fetch all the data

00:02:52,240 --> 00:02:55,420
and I probably need to tell anyone in

00:02:53,950 --> 00:02:56,770
this room like the client developers

00:02:55,420 --> 00:02:59,080
were not happy they wanted something

00:02:56,770 --> 00:03:00,760
better and so if I break down what our

00:02:59,080 --> 00:03:02,470
server looked like at the time it looked

00:03:00,760 --> 00:03:04,420
a little bit like this we had this a

00:03:02,470 --> 00:03:06,430
massive monolith of all of our business

00:03:04,420 --> 00:03:07,420
logic and all of our storage and all of

00:03:06,430 --> 00:03:10,420
the things that powered dub-dub-dub

00:03:07,420 --> 00:03:13,000
facebook.com/ and then fql was a wrapper

00:03:10,420 --> 00:03:14,530
on top of that and so now leaves rock

00:03:13,000 --> 00:03:15,970
and i are sitting on the second floor of

00:03:14,530 --> 00:03:17,590
building 16 trying to figure out like

00:03:15,970 --> 00:03:19,390
how are we going to make this better for

00:03:17,590 --> 00:03:20,920
the developers and so we're like well

00:03:19,390 --> 00:03:23,320
we're not gonna use fql and the diagram

00:03:20,920 --> 00:03:25,150
looked a little bit like this and it's

00:03:23,320 --> 00:03:27,670
probably not surprising what we ended up

00:03:25,150 --> 00:03:29,860
putting in right we just filled in that

00:03:27,670 --> 00:03:32,140
thin API layer reusing the existing

00:03:29,860 --> 00:03:34,000
business logic and thinking in terms of

00:03:32,140 --> 00:03:36,220
the existing graph that we had these

00:03:34,000 --> 00:03:38,170
ideas that we ended up sort of forming

00:03:36,220 --> 00:03:40,450
the core of graph QL they came about

00:03:38,170 --> 00:03:42,610
because the client needed it the client

00:03:40,450 --> 00:03:44,410
needed graph QL to fill this void in

00:03:42,610 --> 00:03:46,510
order to let us ship and therefore these

00:03:44,410 --> 00:03:47,650
became its precepts and I think this is

00:03:46,510 --> 00:03:49,450
something that I find consistently

00:03:47,650 --> 00:03:51,730
throughout time is what the client needs

00:03:49,450 --> 00:03:55,630
if it's compelling if it makes sense

00:03:51,730 --> 00:03:56,830
that informs how graph QL changes and so

00:03:55,630 --> 00:03:58,959
I want to go through the evolution of

00:03:56,830 --> 00:04:00,700
graph QL and really talk about three

00:03:58,959 --> 00:04:02,500
major developments I'm not gonna I

00:04:00,700 --> 00:04:03,340
promise it will be in three parts but I

00:04:02,500 --> 00:04:04,720
don't want to give away what the

00:04:03,340 --> 00:04:07,510
developments are because I think at

00:04:04,720 --> 00:04:09,459
times they're surprising because they

00:04:07,510 --> 00:04:11,170
really weren't informed by oh we need to

00:04:09,459 --> 00:04:13,750
change graph QL no one woke up and said

00:04:11,170 --> 00:04:15,190
graph you'll should do this instead we

00:04:13,750 --> 00:04:16,600
worked on the clients and we found we

00:04:15,190 --> 00:04:18,700
are having trouble scaling it in three

00:04:16,600 --> 00:04:19,810
different ways and the first way that we

00:04:18,700 --> 00:04:22,930
were having trouble scaling it was in

00:04:19,810 --> 00:04:24,729
our models so we have a graph QL query

00:04:22,930 --> 00:04:25,990
this is sort of the canonical query it's

00:04:24,729 --> 00:04:27,250
just like gonna get me it's gonna get my

00:04:25,990 --> 00:04:29,060
name it's gonna get my profile picture

00:04:27,250 --> 00:04:31,010
this is probably for our prototype

00:04:29,060 --> 00:04:33,590
of a profile view in the iOS app and

00:04:31,010 --> 00:04:35,180
somebody says great uh we want to show

00:04:33,590 --> 00:04:37,460
your nickname in parentheses that's easy

00:04:35,180 --> 00:04:38,710
enough right scrappy I'll just just add

00:04:37,460 --> 00:04:41,030
the nickname field and we're done

00:04:38,710 --> 00:04:42,770
well unfortunately we're not done

00:04:41,030 --> 00:04:44,150
because the way that we were modeling

00:04:42,770 --> 00:04:45,740
graph fuel at the time was using

00:04:44,150 --> 00:04:48,650
something called core data which is a

00:04:45,740 --> 00:04:50,750
built-in ORM that I ORM like facade that

00:04:48,650 --> 00:04:53,600
iOS provides you that a lot gives you

00:04:50,750 --> 00:04:55,190
sort of this you know FB user object

00:04:53,600 --> 00:04:56,180
which is going to have a name field and

00:04:55,190 --> 00:04:57,560
it's going to have a profile picture

00:04:56,180 --> 00:04:59,630
field and it means that you're not

00:04:57,560 --> 00:05:01,970
dealing with arbitrary JSON or arbitrary

00:04:59,630 --> 00:05:03,980
dictionaries or arbitrary arrays and so

00:05:01,970 --> 00:05:05,870
when we added this nicknamed field we

00:05:03,980 --> 00:05:07,940
actually can't use it yet we have to

00:05:05,870 --> 00:05:09,590
update the model so I want to walk

00:05:07,940 --> 00:05:11,240
through what the process of updating the

00:05:09,590 --> 00:05:17,570
model would look like we're gonna go

00:05:11,240 --> 00:05:20,060
we're gonna open up Xcode and we're

00:05:17,570 --> 00:05:21,410
going to see a screen like this and the

00:05:20,060 --> 00:05:22,430
process to add this nickname field is

00:05:21,410 --> 00:05:23,960
really quite simple

00:05:22,430 --> 00:05:25,370
we're gonna click that one that's over

00:05:23,960 --> 00:05:26,720
there on the left and then we're gonna

00:05:25,370 --> 00:05:28,970
select our entity in this case our

00:05:26,720 --> 00:05:30,170
entities person or maybe user and then

00:05:28,970 --> 00:05:31,940
there's the attributes and you see that

00:05:30,170 --> 00:05:33,020
tiny + sign we're gonna add an attribute

00:05:31,940 --> 00:05:34,130
and we're going to name it nickname and

00:05:33,020 --> 00:05:35,570
we're gonna make sure we spelled

00:05:34,130 --> 00:05:37,100
nickname right because if we typo it

00:05:35,570 --> 00:05:38,660
we're gonna get no error dialog it's

00:05:37,100 --> 00:05:40,310
just gonna be null and we're gonna set

00:05:38,660 --> 00:05:41,450
the type the types gonna be string we

00:05:40,310 --> 00:05:43,370
already knew that but we're gonna say it

00:05:41,450 --> 00:05:44,960
anyway cuz it's good for us and then

00:05:43,370 --> 00:05:46,400
we're gonna go and change this code gen

00:05:44,960 --> 00:05:47,780
and all of this is going to spit out

00:05:46,400 --> 00:05:50,360
this giant completely incomprehensible

00:05:47,780 --> 00:05:52,130
XML file that is now our additional

00:05:50,360 --> 00:05:54,080
source of truth on how to use models and

00:05:52,130 --> 00:05:55,580
client developers love this and we made

00:05:54,080 --> 00:05:56,770
no changes and all lived happily ever

00:05:55,580 --> 00:05:59,660
after

00:05:56,770 --> 00:06:01,340
that was not what client developers

00:05:59,660 --> 00:06:03,920
wanted this actually became a massive

00:06:01,340 --> 00:06:06,650
slowdown in their workflow and so we

00:06:03,920 --> 00:06:09,830
decided is this is silly the output of

00:06:06,650 --> 00:06:12,680
this whole thing is a giant XML file the

00:06:09,830 --> 00:06:14,720
input is a list of queries and a list of

00:06:12,680 --> 00:06:17,690
schemas we could just write a script to

00:06:14,720 --> 00:06:19,820
that we don't need a giant X code sized

00:06:17,690 --> 00:06:21,860
app in order to generate xml from a

00:06:19,820 --> 00:06:23,240
schema and from graph key well and so we

00:06:21,860 --> 00:06:26,060
decided to go with the generated code

00:06:23,240 --> 00:06:27,200
which we referred to as cogent and so

00:06:26,060 --> 00:06:28,940
what code gem would do is it would do

00:06:27,200 --> 00:06:30,620
that it would take this query in it

00:06:28,940 --> 00:06:33,470
outputs this xml file and you're done

00:06:30,620 --> 00:06:35,450
this is great like we've we've solved

00:06:33,470 --> 00:06:37,850
this problem for people but we had an

00:06:35,450 --> 00:06:40,250
additional problem now because in order

00:06:37,850 --> 00:06:42,110
to do this code gen we needed an input

00:06:40,250 --> 00:06:43,880
file we needed

00:06:42,110 --> 00:06:45,470
all of our graph QL to be defined in

00:06:43,880 --> 00:06:46,490
static queries and if you talk to

00:06:45,470 --> 00:06:48,650
someone from Facebook they'll talk about

00:06:46,490 --> 00:06:51,350
graph QL files and that's because we

00:06:48,650 --> 00:06:52,940
moved all of our logic out of sort of

00:06:51,350 --> 00:06:54,380
the code you know it's no longer strings

00:06:52,940 --> 00:06:57,140
in the code it's no longer templates and

00:06:54,380 --> 00:06:59,510
into doc graph QL files on our native

00:06:57,140 --> 00:07:00,050
clients at this time and this isn't too

00:06:59,510 --> 00:07:02,630
bad

00:07:00,050 --> 00:07:05,840
accepting presents one problem what do

00:07:02,630 --> 00:07:07,160
we do when we want to do code reuse and

00:07:05,840 --> 00:07:08,690
I'm talking about good code reviews

00:07:07,160 --> 00:07:10,280
right we want to use functions we want

00:07:08,690 --> 00:07:11,810
to extract things into helpers we're not

00:07:10,280 --> 00:07:14,360
going to just you know copy paste things

00:07:11,810 --> 00:07:16,370
all over the place well when we used to

00:07:14,360 --> 00:07:18,050
generate our graph QL like queries like

00:07:16,370 --> 00:07:20,240
this and this is pretty close to what we

00:07:18,050 --> 00:07:21,800
would do that one's easy you just write

00:07:20,240 --> 00:07:23,600
a function you call a function it does

00:07:21,800 --> 00:07:25,760
the same thing if you want to reuse some

00:07:23,600 --> 00:07:28,940
graph ul fields you just use functions

00:07:25,760 --> 00:07:31,160
we know to reuse code but if I'm in this

00:07:28,940 --> 00:07:34,070
particular graph QL query how do I go

00:07:31,160 --> 00:07:35,300
about reusing a set of fields and this

00:07:34,070 --> 00:07:36,620
section is probably sounding really

00:07:35,300 --> 00:07:38,770
silly right now because the answer is

00:07:36,620 --> 00:07:41,090
obvious I'm going to just use a fragment

00:07:38,770 --> 00:07:43,730
well that's why we have fragments

00:07:41,090 --> 00:07:46,850
fragments did not exist in graph QL

00:07:43,730 --> 00:07:49,130
until this moment it wasn't until we

00:07:46,850 --> 00:07:51,650
realized we needed static queries for

00:07:49,130 --> 00:07:53,780
the clients to work and we needed some

00:07:51,650 --> 00:07:55,520
way of reusing things within graph QL in

00:07:53,780 --> 00:07:58,070
order to avoid having people copy paste

00:07:55,520 --> 00:07:59,000
that we introduced fragments and the way

00:07:58,070 --> 00:08:01,280
that we introduced fragments was

00:07:59,000 --> 00:08:02,900
somewhat interesting we added it on the

00:08:01,280 --> 00:08:04,520
client so the client would write this

00:08:02,900 --> 00:08:06,560
you know this is sort of graph QL that

00:08:04,520 --> 00:08:08,600
we all know and love but the server

00:08:06,560 --> 00:08:10,850
sides like hey I just know about queries

00:08:08,600 --> 00:08:12,830
so we would be fragmented and this is

00:08:10,850 --> 00:08:14,750
what we would send to the server and we

00:08:12,830 --> 00:08:16,550
did this for a long time I actually went

00:08:14,750 --> 00:08:17,720
and found the original diffs the

00:08:16,550 --> 00:08:19,400
original one that Shrock wrote to

00:08:17,720 --> 00:08:22,280
integrate fragments into the code base

00:08:19,400 --> 00:08:24,470
the one for parsing and it was something

00:08:22,280 --> 00:08:26,060
like three or four months we're like the

00:08:24,470 --> 00:08:27,500
clients like yeah fragments are great

00:08:26,060 --> 00:08:29,060
this is fantastic we're going to keep

00:08:27,500 --> 00:08:30,980
using these in the servers like I know I

00:08:29,060 --> 00:08:32,420
don't care like just just send me a

00:08:30,980 --> 00:08:34,610
query a query is my primitive and

00:08:32,420 --> 00:08:36,020
eventually we realized hey you know

00:08:34,610 --> 00:08:37,610
these fragment things they're pretty

00:08:36,020 --> 00:08:38,810
cool they're valuable for the client

00:08:37,610 --> 00:08:39,590
they actually make the server's life a

00:08:38,810 --> 00:08:41,840
lot easier too

00:08:39,590 --> 00:08:44,180
this is worth integrating but this for

00:08:41,840 --> 00:08:45,980
me was sort of a canonical example of

00:08:44,180 --> 00:08:48,020
client driven development we had a

00:08:45,980 --> 00:08:49,880
problem on the client we fixed it in

00:08:48,020 --> 00:08:51,620
graph QL on the client and left the

00:08:49,880 --> 00:08:54,080
server alone and said let's make sure

00:08:51,620 --> 00:08:55,670
this makes sense because fragments you

00:08:54,080 --> 00:08:57,050
know in hindsight make perfect

00:08:55,670 --> 00:08:58,340
of course you need fragments how else

00:08:57,050 --> 00:09:00,260
would you do it they have supporting

00:08:58,340 --> 00:09:02,150
graphical it's great at the time we had

00:09:00,260 --> 00:09:03,380
no idea at the time this could have been

00:09:02,150 --> 00:09:05,540
a complete blunder this could have been

00:09:03,380 --> 00:09:07,490
the wrong direction to take graph QL so

00:09:05,540 --> 00:09:08,960
we tested it on the client validated

00:09:07,490 --> 00:09:10,400
that it made sense and that said yes

00:09:08,960 --> 00:09:15,170
this is part of the language going

00:09:10,400 --> 00:09:18,320
forward so scaling models is what led us

00:09:15,170 --> 00:09:19,460
to add fragments to the language but the

00:09:18,320 --> 00:09:20,960
next problem that we face now that we

00:09:19,460 --> 00:09:22,750
had our models making more sense was

00:09:20,960 --> 00:09:25,730
scaling views

00:09:22,750 --> 00:09:28,580
so in particular we had these XML files

00:09:25,730 --> 00:09:30,620
and we didn't want them anymore because

00:09:28,580 --> 00:09:33,260
the big issue with these XML files that

00:09:30,620 --> 00:09:34,940
I sort of gets skated by how long and

00:09:33,260 --> 00:09:36,680
boring they are is the fact that they

00:09:34,940 --> 00:09:39,560
represent these models that are mutable

00:09:36,680 --> 00:09:41,540
if I have a user and I want to you know

00:09:39,560 --> 00:09:43,760
change their name I would just take this

00:09:41,540 --> 00:09:45,650
name thing and I would just say yeah doc

00:09:43,760 --> 00:09:46,880
changed my name from Dan to Daniel

00:09:45,650 --> 00:09:48,860
that's fine that's a thing I could do

00:09:46,880 --> 00:09:50,570
and then save it and make sure I get all

00:09:48,860 --> 00:09:52,790
my thread affine stuff right because

00:09:50,570 --> 00:09:54,110
thanks core data but this is not how

00:09:52,790 --> 00:09:56,450
sort of the direction that we were

00:09:54,110 --> 00:09:58,880
moving right we were moving towards

00:09:56,450 --> 00:10:01,880
these view layers like react like

00:09:58,880 --> 00:10:05,720
component kit on iOS and like litho that

00:10:01,880 --> 00:10:07,820
had this very like I guess opinionated

00:10:05,720 --> 00:10:09,920
way on how we should do views right we

00:10:07,820 --> 00:10:11,360
didn't want to be arbitrary mutating

00:10:09,920 --> 00:10:12,980
things we were moving away from model

00:10:11,360 --> 00:10:14,630
view controller and we were moving

00:10:12,980 --> 00:10:16,790
towards us one-way data flow concepts

00:10:14,630 --> 00:10:18,260
and this one-way data flow concept ended

00:10:16,790 --> 00:10:21,380
up being given a name it's called flux

00:10:18,260 --> 00:10:23,390
if you've ever used Redux or any other

00:10:21,380 --> 00:10:25,730
JavaScript library that ends in X you're

00:10:23,390 --> 00:10:27,710
probably familiar with the concept if

00:10:25,730 --> 00:10:29,120
you've ever seen a talk on flux you have

00:10:27,710 --> 00:10:30,560
probably seen this diagram because I

00:10:29,120 --> 00:10:33,740
think we're required by law to show it

00:10:30,560 --> 00:10:36,020
in every single talk on flux but the

00:10:33,740 --> 00:10:37,130
general concept was our models are no

00:10:36,020 --> 00:10:39,110
law there not even in this diagram

00:10:37,130 --> 00:10:41,210
anymore we don't have these models that

00:10:39,110 --> 00:10:43,790
you can mutate instead we have these

00:10:41,210 --> 00:10:45,680
actions and you take an action and that

00:10:43,790 --> 00:10:47,210
goes and does a mutation and talks to a

00:10:45,680 --> 00:10:49,660
dispatcher which talks to a store and

00:10:47,210 --> 00:10:51,860
you get vended another immutable model

00:10:49,660 --> 00:10:55,610
if leaves introducing me I have to say

00:10:51,860 --> 00:10:57,110
immutable at least once so this is the

00:10:55,610 --> 00:10:58,550
pattern that all of our apps are moving

00:10:57,110 --> 00:10:59,870
towards is what our JavaScript apps are

00:10:58,550 --> 00:11:01,070
moving towards is what our iOS apps

00:10:59,870 --> 00:11:03,410
we're moving towards us what our Android

00:11:01,070 --> 00:11:05,060
apps are moving towards and at the time

00:11:03,410 --> 00:11:07,640
we actually could fill in a lot of these

00:11:05,060 --> 00:11:09,680
boxes we could say well you know this is

00:11:07,640 --> 00:11:12,350
about 2013 we have our graph

00:11:09,680 --> 00:11:13,939
and they get to a dispatcher which is

00:11:12,350 --> 00:11:16,579
like some form of graph fuel engine on

00:11:13,939 --> 00:11:18,259
the client which goes to some store that

00:11:16,579 --> 00:11:20,089
stores all of these immutable models and

00:11:18,259 --> 00:11:22,160
then then vents them to our reactive

00:11:20,089 --> 00:11:24,019
views are you know react components our

00:11:22,160 --> 00:11:26,209
early prototypes of component kit or

00:11:24,019 --> 00:11:29,149
litho components but then there's this

00:11:26,209 --> 00:11:31,730
missing box this action how do we go

00:11:29,149 --> 00:11:33,980
about changing the data how do we go

00:11:31,730 --> 00:11:35,449
about doing writes in graph QL and of

00:11:33,980 --> 00:11:37,550
course the answer that we know now is

00:11:35,449 --> 00:11:39,439
this is graphical mutations but again

00:11:37,550 --> 00:11:41,300
graph queue mutations didn't come about

00:11:39,439 --> 00:11:42,829
because we were like you know graph QL

00:11:41,300 --> 00:11:44,660
is great it's great for reading we

00:11:42,829 --> 00:11:46,429
needed to do writes we had a problem on

00:11:44,660 --> 00:11:48,350
our clients we were having trouble

00:11:46,429 --> 00:11:49,699
building out this architecture making

00:11:48,350 --> 00:11:52,009
sure we were keeping things consistent

00:11:49,699 --> 00:11:54,170
without a way of doing mutations in the

00:11:52,009 --> 00:11:58,610
domain language that was rapidly taking

00:11:54,170 --> 00:12:00,920
over our apps and so I stood before that

00:11:58,610 --> 00:12:03,079
static graph QL queries are what led to

00:12:00,920 --> 00:12:04,730
fragments really flux is what led to

00:12:03,079 --> 00:12:06,679
graphical mutations we had this flux

00:12:04,730 --> 00:12:08,480
architecture and we needed a way to make

00:12:06,679 --> 00:12:11,179
it work in our apps and so graphical

00:12:08,480 --> 00:12:12,619
mutations emerged and this I think is

00:12:11,179 --> 00:12:14,629
there's a lot of questions that we

00:12:12,619 --> 00:12:16,279
occasionally get about mutations you

00:12:14,629 --> 00:12:17,959
know why do we have top-level mutations

00:12:16,279 --> 00:12:20,059
why is there sort of this long list of

00:12:17,959 --> 00:12:23,089
things that you can do you know why

00:12:20,059 --> 00:12:25,189
aren't there a you know special field on

00:12:23,089 --> 00:12:27,499
user that says rename instead of a

00:12:25,189 --> 00:12:29,240
top-level user rename or why is it

00:12:27,499 --> 00:12:31,459
action based why isn't it crud why isn't

00:12:29,240 --> 00:12:33,889
there an update user or a delete user or

00:12:31,459 --> 00:12:35,720
a create user and the answer really does

00:12:33,889 --> 00:12:37,490
come back to this diagram we were like

00:12:35,720 --> 00:12:38,600
well we have these actions and flux and

00:12:37,490 --> 00:12:40,999
we model that want to model them in

00:12:38,600 --> 00:12:42,620
graph QL and in most of the flux

00:12:40,999 --> 00:12:44,209
patterns at the time you didn't really

00:12:42,620 --> 00:12:46,370
have that be crud based it was action

00:12:44,209 --> 00:12:47,629
based and it didn't make sense to put

00:12:46,370 --> 00:12:49,370
them on individual objects because there

00:12:47,629 --> 00:12:50,809
was just a top list of all the actions

00:12:49,370 --> 00:12:52,549
you could take and so graph via

00:12:50,809 --> 00:12:54,019
mutations followed this and as leaves

00:12:52,549 --> 00:12:56,089
pointed out a couple times we probably

00:12:54,019 --> 00:12:57,889
missed named it it probably should have

00:12:56,089 --> 00:13:00,889
been graphical actions because that

00:12:57,889 --> 00:13:02,689
really was what it was designed to do so

00:13:00,889 --> 00:13:06,019
we had mutations and we knew that we

00:13:02,689 --> 00:13:07,910
needed them and it again feel silly to

00:13:06,019 --> 00:13:09,889
say this but this was not obvious at the

00:13:07,910 --> 00:13:12,230
time you know there were people point

00:13:09,889 --> 00:13:13,850
out it's graph QL the queue is

00:13:12,230 --> 00:13:16,009
presumably queried depending on how

00:13:13,850 --> 00:13:17,990
you're back when aiming it like wouldn't

00:13:16,009 --> 00:13:19,519
there be like graph ml for graph

00:13:17,990 --> 00:13:21,259
mutation language like you will still

00:13:19,519 --> 00:13:22,070
find occasional references to that like

00:13:21,259 --> 00:13:23,210
code name

00:13:22,070 --> 00:13:24,650
our code base because we're like yeah

00:13:23,210 --> 00:13:25,790
like there's graphic you all four reads

00:13:24,650 --> 00:13:27,290
and graph ml4 writes and they're

00:13:25,790 --> 00:13:29,000
completely different systems and

00:13:27,290 --> 00:13:30,650
eventually what we converged on is what

00:13:29,000 --> 00:13:32,870
you see today mutations are just sort of

00:13:30,650 --> 00:13:34,550
a second top level concept but again we

00:13:32,870 --> 00:13:36,410
needed to validate that hypothesis that

00:13:34,550 --> 00:13:39,350
this was actually the right thing for

00:13:36,410 --> 00:13:41,810
the clients which is weird because like

00:13:39,350 --> 00:13:43,400
how do you build mutations only on the

00:13:41,810 --> 00:13:45,650
client without ever telling the server

00:13:43,400 --> 00:13:47,660
about it well what we did is we took our

00:13:45,650 --> 00:13:49,130
existing system our existing system

00:13:47,660 --> 00:13:51,410
looked a little bit like this if you

00:13:49,130 --> 00:13:53,660
wanted to like a post you would hit this

00:13:51,410 --> 00:13:55,220
end point / 1 / like and it would give

00:13:53,660 --> 00:13:58,490
you an incredibly helpful response like

00:13:55,220 --> 00:13:59,840
true and you say alright thank you that

00:13:58,490 --> 00:14:01,190
was that was useful I'm gonna go do a

00:13:59,840 --> 00:14:03,230
graph gol query now in order to get the

00:14:01,190 --> 00:14:04,550
data I needed anyway and you do this

00:14:03,230 --> 00:14:06,860
graph QL query and you get a response

00:14:04,550 --> 00:14:08,030
back what we said is well this is

00:14:06,860 --> 00:14:09,680
actually really annoying and people

00:14:08,030 --> 00:14:11,360
would started working around this using

00:14:09,680 --> 00:14:13,520
our batch API they had said all right

00:14:11,360 --> 00:14:15,350
issue this post request and then once

00:14:13,520 --> 00:14:17,420
that finishes issue this graph QL query

00:14:15,350 --> 00:14:18,440
and give you both responses back I'll

00:14:17,420 --> 00:14:20,930
throw out the true cuz that's useless

00:14:18,440 --> 00:14:22,340
and I'll use the graph QL response and

00:14:20,930 --> 00:14:24,470
this is actually what a lot of our

00:14:22,340 --> 00:14:25,640
sophisticated writes look like at the

00:14:24,470 --> 00:14:29,540
time because they only want to do one

00:14:25,640 --> 00:14:31,490
round-trip so we said ok we will shim

00:14:29,540 --> 00:14:33,590
that correct behavior on the client a

00:14:31,490 --> 00:14:35,540
behavior that does a write and gives you

00:14:33,590 --> 00:14:36,980
a graph QL response back behind a

00:14:35,540 --> 00:14:39,170
client-side concept of graphical

00:14:36,980 --> 00:14:40,730
mutations the server still unaware of

00:14:39,170 --> 00:14:42,500
mutations it's just it's just got our

00:14:40,730 --> 00:14:44,690
queries and our existing right endpoints

00:14:42,500 --> 00:14:46,910
but from the client side you could write

00:14:44,690 --> 00:14:48,590
mutations like you would today we wanted

00:14:46,910 --> 00:14:49,910
to incremental e add value for the

00:14:48,590 --> 00:14:51,980
client developer we could take this to

00:14:49,910 --> 00:14:53,330
client devs and say hey is this better

00:14:51,980 --> 00:14:54,890
than it was before and almost always

00:14:53,330 --> 00:14:57,650
they said oh heck yes I don't want to

00:14:54,890 --> 00:14:59,030
write those batch if you guys myself so

00:14:57,650 --> 00:15:00,140
we had them write a configuration file

00:14:59,030 --> 00:15:01,540
which I'm going to skip through because

00:15:00,140 --> 00:15:04,070
I'm really ashamed of it it's super ugly

00:15:01,540 --> 00:15:05,480
but once they wrote that you could just

00:15:04,070 --> 00:15:07,310
write this graph QL which should look

00:15:05,480 --> 00:15:10,160
really familiar it's just a graph gala

00:15:07,310 --> 00:15:11,480
mutation and then we would Auto generate

00:15:10,160 --> 00:15:12,470
this code which I'll leave on the screen

00:15:11,480 --> 00:15:13,900
because this is all the code that

00:15:12,470 --> 00:15:15,740
developers did not have to write anymore

00:15:13,900 --> 00:15:17,570
right this is the stuff that they were

00:15:15,740 --> 00:15:18,860
writing before it was a mess you had to

00:15:17,570 --> 00:15:20,900
get stuff right you had to order patch

00:15:18,860 --> 00:15:22,220
requests it's ugly I don't want to write

00:15:20,900 --> 00:15:24,650
this developers didn't want to write

00:15:22,220 --> 00:15:26,270
this and now they didn't have to and so

00:15:24,650 --> 00:15:28,220
we did that on the client and we

00:15:26,270 --> 00:15:29,390
validated that let's say you know first

00:15:28,220 --> 00:15:31,610
six months or so and we said you know

00:15:29,390 --> 00:15:33,200
what this is good instead now instead of

00:15:31,610 --> 00:15:34,580
making them write these annoying JSON

00:15:33,200 --> 00:15:35,900
configuration files let's add a

00:15:34,580 --> 00:15:38,870
top-level concept of each

00:15:35,900 --> 00:15:41,180
on the server but again five six months

00:15:38,870 --> 00:15:42,860
between when the client had mutations

00:15:41,180 --> 00:15:44,930
and the client was using it to when the

00:15:42,860 --> 00:15:47,240
servers like yeah this is good this is

00:15:44,930 --> 00:15:51,380
worth codifying this is worth making a

00:15:47,240 --> 00:15:52,820
part of graph QL so the third thing that

00:15:51,380 --> 00:15:54,500
we had to scale you know we had to scale

00:15:52,820 --> 00:15:55,970
our models we introduced fragments we

00:15:54,500 --> 00:15:57,890
had to scale our views we introduced

00:15:55,970 --> 00:15:59,510
mutations and now we have to scale our

00:15:57,890 --> 00:16:02,000
updates you can probably guess where

00:15:59,510 --> 00:16:03,650
this is going because our app now had

00:16:02,000 --> 00:16:05,810
the ability to show a screen like this

00:16:03,650 --> 00:16:06,830
and you could tap the like button and it

00:16:05,810 --> 00:16:08,720
would update and you would get an update

00:16:06,830 --> 00:16:10,100
account and then all your friends in the

00:16:08,720 --> 00:16:12,110
audience would tap the like button and

00:16:10,100 --> 00:16:14,300
you would keep staring at this screen

00:16:12,110 --> 00:16:16,430
which is again not what you want the app

00:16:14,300 --> 00:16:18,530
doesn't feel alive we want a view that

00:16:16,430 --> 00:16:20,270
looks a little bit more like this this

00:16:18,530 --> 00:16:26,660
is a video from a bug report where we

00:16:20,270 --> 00:16:28,430
messed up our throttling so there are a

00:16:26,660 --> 00:16:29,870
few different ways of doing this and in

00:16:28,430 --> 00:16:31,520
particular the client was already

00:16:29,870 --> 00:16:33,080
capable of doing this with our existing

00:16:31,520 --> 00:16:34,190
infrastructure because what the client

00:16:33,080 --> 00:16:35,870
would do is the client would send a

00:16:34,190 --> 00:16:38,270
request for like sentence and then we

00:16:35,870 --> 00:16:40,610
just keep doing that and now we have

00:16:38,270 --> 00:16:42,080
live updates and needless to say this

00:16:40,610 --> 00:16:43,940
was not fun for the clients because

00:16:42,080 --> 00:16:45,320
polling is annoying and it's not fun for

00:16:43,940 --> 00:16:47,180
the server's because polling is even

00:16:45,320 --> 00:16:48,260
more annoying there and I said that this

00:16:47,180 --> 00:16:49,970
section is going to be on scaling

00:16:48,260 --> 00:16:51,410
updates so we'll throw that out and say

00:16:49,970 --> 00:16:52,460
this is probably not how we're going to

00:16:51,410 --> 00:16:55,580
want to build all of the live

00:16:52,460 --> 00:16:57,830
interactions in our app now I'm not

00:16:55,580 --> 00:16:59,960
going to go into too much detail here

00:16:57,830 --> 00:17:01,280
because we actually have two additional

00:16:59,960 --> 00:17:03,020
talks from folks at Facebook talking

00:17:01,280 --> 00:17:04,940
about live updates right we're gonna

00:17:03,020 --> 00:17:07,070
have Rob Zhu talking later today in

00:17:04,940 --> 00:17:09,530
detail on graph giel subscriptions how

00:17:07,070 --> 00:17:11,870
it works today and then tomorrow we're

00:17:09,530 --> 00:17:12,950
gonna have Rodrigo Munez who knows who's

00:17:11,870 --> 00:17:14,360
going to be talking about graph you'll

00:17:12,950 --> 00:17:15,890
live and how we're building reactive

00:17:14,360 --> 00:17:17,330
queries at Facebook and so if you're

00:17:15,890 --> 00:17:20,540
interested in subscriptions are live

00:17:17,330 --> 00:17:22,970
highly recommend those two talks and so

00:17:20,540 --> 00:17:24,380
I'm gonna focus in particular on one

00:17:22,970 --> 00:17:26,150
aspect of the development of

00:17:24,380 --> 00:17:28,040
subscriptions I want to talk about that

00:17:26,150 --> 00:17:29,690
initial implementation of subscriptions

00:17:28,040 --> 00:17:32,150
it was about four months long from

00:17:29,690 --> 00:17:33,470
January 2015 to May 2015 because I think

00:17:32,150 --> 00:17:35,600
that's the part that really exemplifies

00:17:33,470 --> 00:17:39,260
the client driven development model that

00:17:35,600 --> 00:17:41,300
I'm describing today so let's pull up

00:17:39,260 --> 00:17:42,290
our favorite client server diagram but

00:17:41,300 --> 00:17:44,030
since we're talking about subscriptions

00:17:42,290 --> 00:17:45,620
we can't really pretend that there's a

00:17:44,030 --> 00:17:47,540
sort of a stateless app server that only

00:17:45,620 --> 00:17:48,980
gets requests and responses now we have

00:17:47,540 --> 00:17:49,700
to introduce that sort of third tier

00:17:48,980 --> 00:17:52,220
what is actually

00:17:49,700 --> 00:17:54,409
backing our subscriptions and so if we

00:17:52,220 --> 00:17:55,850
look at what polling looked like it

00:17:54,409 --> 00:17:57,409
looked pretty much like this we don't

00:17:55,850 --> 00:17:58,970
really need anything stateful because

00:17:57,409 --> 00:18:01,130
the clients just hammering us over and

00:17:58,970 --> 00:18:03,620
over again and we wanted to build

00:18:01,130 --> 00:18:04,880
something better and we're doing client

00:18:03,620 --> 00:18:06,830
different development so the obvious

00:18:04,880 --> 00:18:08,870
first thing to tackle is this thing on

00:18:06,830 --> 00:18:10,970
the Left what can we do to make the

00:18:08,870 --> 00:18:12,529
clients life better here and if you've

00:18:10,970 --> 00:18:14,330
seen the addition of subscription to the

00:18:12,529 --> 00:18:15,769
spec if you've experimented with it you

00:18:14,330 --> 00:18:17,240
can probably guess what we concluded

00:18:15,769 --> 00:18:19,370
which is we wanted to have this new

00:18:17,240 --> 00:18:20,659
subscription keyword it would act like

00:18:19,370 --> 00:18:22,340
another root field except now it's a

00:18:20,659 --> 00:18:23,539
subscription root field you would send

00:18:22,340 --> 00:18:24,980
that to the server and then the server

00:18:23,539 --> 00:18:27,440
would send you responses back whenever

00:18:24,980 --> 00:18:29,120
an event happened and this one actually

00:18:27,440 --> 00:18:30,320
is much closer this is like less than a

00:18:29,120 --> 00:18:32,510
month or a little over a month between

00:18:30,320 --> 00:18:34,269
them because I said that we were doing

00:18:32,510 --> 00:18:36,470
client driven development but

00:18:34,269 --> 00:18:38,419
subscriptions are hard to just do on the

00:18:36,470 --> 00:18:40,880
client right you need the server to know

00:18:38,419 --> 00:18:42,169
about them so our variant on client

00:18:40,880 --> 00:18:44,539
driven development here wasn't to

00:18:42,169 --> 00:18:46,399
exclusively have it on the client it was

00:18:44,539 --> 00:18:47,990
to minimize the impact on the rest of

00:18:46,399 --> 00:18:49,250
the system because again we wanted to

00:18:47,990 --> 00:18:51,230
test this we wanted to make sure it made

00:18:49,250 --> 00:18:52,399
sense so we have this subscribe and we

00:18:51,230 --> 00:18:55,309
have this publish and now we need to

00:18:52,399 --> 00:18:57,409
implement it and again we're just

00:18:55,309 --> 00:18:59,029
testing there's an experiment and so

00:18:57,409 --> 00:19:00,860
what we decided to do is rather than

00:18:59,029 --> 00:19:03,139
hooking it up to an existing pub/sub

00:19:00,860 --> 00:19:05,779
system or building our own or doing

00:19:03,139 --> 00:19:06,830
anything particularly like good we were

00:19:05,779 --> 00:19:08,539
just going to use our caching layer

00:19:06,830 --> 00:19:10,370
we're gonna say you notice subscription

00:19:08,539 --> 00:19:13,159
is it's a key in our caching layer that

00:19:10,370 --> 00:19:14,899
we'll put a TTL on and so we did we took

00:19:13,159 --> 00:19:17,419
our caching layer but like nope this is

00:19:14,899 --> 00:19:20,779
a pub subsystem now and we built the

00:19:17,419 --> 00:19:22,639
initial prototype and it worked pretty

00:19:20,779 --> 00:19:25,309
well for the client client said yeah I

00:19:22,639 --> 00:19:27,590
can subscribe to these like updates we

00:19:25,309 --> 00:19:29,870
used it for live comments as well and in

00:19:27,590 --> 00:19:32,149
fact even before we replace that you

00:19:29,870 --> 00:19:33,889
know crazy diagram we rolled out graft

00:19:32,149 --> 00:19:35,510
Kiel subscriptions we did live likes on

00:19:33,889 --> 00:19:37,130
iOS and said yeah

00:19:35,510 --> 00:19:38,570
this works end to end it's a good

00:19:37,130 --> 00:19:39,679
experience for the developer we were

00:19:38,570 --> 00:19:41,179
able to build something that we weren't

00:19:39,679 --> 00:19:43,760
able to build before with our existing

00:19:41,179 --> 00:19:45,409
primitives and so at that point we said

00:19:43,760 --> 00:19:47,240
all right now this is probably worth

00:19:45,409 --> 00:19:49,070
doing right let's you know bring in the

00:19:47,240 --> 00:19:51,139
experts on a pub sub system we worked

00:19:49,070 --> 00:19:52,460
with a facebook messenger team and took

00:19:51,139 --> 00:19:54,260
the pub sub system that they were using

00:19:52,460 --> 00:19:56,419
for messenger and had that power graph

00:19:54,260 --> 00:19:58,129
go subscriptions and so by summer of

00:19:56,419 --> 00:19:59,059
2015 the diagram looked a little bit

00:19:58,129 --> 00:20:00,529
like this

00:19:59,059 --> 00:20:03,110
I demo this talk and people were asking

00:20:00,529 --> 00:20:07,360
why a robot keynote has a really good

00:20:03,110 --> 00:20:07,360
but I've no explanation other than that

00:20:09,850 --> 00:20:15,650
so that's how three sort of core

00:20:12,679 --> 00:20:17,570
concepts in graph QL made it into graph

00:20:15,650 --> 00:20:18,710
QL this is you know and if you look at

00:20:17,570 --> 00:20:20,990
sort of the top level things you can

00:20:18,710 --> 00:20:23,059
type when graph QL came about this sort

00:20:20,990 --> 00:20:25,490
of initial version it didn't have

00:20:23,059 --> 00:20:27,440
fragment didn't have mutation didn't

00:20:25,490 --> 00:20:29,809
have subscription it was just query and

00:20:27,440 --> 00:20:31,250
then over the course of these three

00:20:29,809 --> 00:20:33,470
years of internal development we said

00:20:31,250 --> 00:20:34,880
you know what these are valid concepts

00:20:33,470 --> 00:20:37,010
they make clients lives easier and

00:20:34,880 --> 00:20:39,200
therefore that's what belongs in graph

00:20:37,010 --> 00:20:40,640
QL and so I want to talk a little bit

00:20:39,200 --> 00:20:41,900
about open source and you know this

00:20:40,640 --> 00:20:43,580
diagram it was of course wrong because

00:20:41,900 --> 00:20:45,320
there's no endpoint for this graph T was

00:20:43,580 --> 00:20:48,260
going to be keep moving and it's gonna

00:20:45,320 --> 00:20:50,750
keep evolving and I actually want to

00:20:48,260 --> 00:20:52,700
talk about one final thing that made it

00:20:50,750 --> 00:20:55,669
into graph QL or actually didn't make it

00:20:52,700 --> 00:20:59,059
into graph QL because this is probably

00:20:55,669 --> 00:21:00,830
in 2014 or so we had a team come to us

00:20:59,059 --> 00:21:02,960
and they say hey we're running a bunch

00:21:00,830 --> 00:21:04,940
of a/b tests in order to try and figure

00:21:02,960 --> 00:21:06,350
out you know is this good you know is

00:21:04,940 --> 00:21:07,940
this is this the better behavior is this

00:21:06,350 --> 00:21:09,890
one and we need to fetch a different

00:21:07,940 --> 00:21:13,100
data and the data we need to fetch is

00:21:09,890 --> 00:21:14,210
expensive so we really don't want to

00:21:13,100 --> 00:21:15,410
have to like write eight different

00:21:14,210 --> 00:21:17,210
queries for our three different tests

00:21:15,410 --> 00:21:18,500
and we really don't want to over fetch

00:21:17,210 --> 00:21:20,480
and we said yep you're right

00:21:18,500 --> 00:21:22,190
that's a perfectly valid use case you

00:21:20,480 --> 00:21:24,110
only want to fetch this field if we're

00:21:22,190 --> 00:21:28,400
in the nick name test group and so in

00:21:24,110 --> 00:21:30,440
2014 we said sweet we will just go on to

00:21:28,400 --> 00:21:32,780
every single field in the entire schema

00:21:30,440 --> 00:21:33,980
and add two optional fields that take

00:21:32,780 --> 00:21:35,840
it's not even boolean so they actually

00:21:33,980 --> 00:21:38,030
take strings the string true or the

00:21:35,840 --> 00:21:39,799
string false and you can use that to

00:21:38,030 --> 00:21:41,900
control it and then we special taste it

00:21:39,799 --> 00:21:43,370
in the graph QL engine to say if one of

00:21:41,900 --> 00:21:46,010
these two special fields is set don't

00:21:43,370 --> 00:21:48,530
actually run the resolver and and it

00:21:46,010 --> 00:21:51,140
worked like this actually existed in

00:21:48,530 --> 00:21:53,179
graph QL for probably two or three years

00:21:51,140 --> 00:21:55,100
as fields make graphical a little bit

00:21:53,179 --> 00:21:57,440
annoying to use but it solved the

00:21:55,100 --> 00:21:59,210
clients issue but this was one of the

00:21:57,440 --> 00:22:01,549
things back right before we open sourced

00:21:59,210 --> 00:22:04,190
it that we took a look at and said wait

00:22:01,549 --> 00:22:06,679
a second this never feels quite right

00:22:04,190 --> 00:22:08,780
it's not really a field we're actually

00:22:06,679 --> 00:22:10,160
trying to tell the server something

00:22:08,780 --> 00:22:11,900
we're trying to direct it to do

00:22:10,160 --> 00:22:13,669
something and so we want to add a new

00:22:11,900 --> 00:22:15,050
concept and so I actually think

00:22:13,669 --> 00:22:16,519
directives are an interesting case where

00:22:15,050 --> 00:22:19,729
we didn't add too

00:22:16,519 --> 00:22:21,349
right away but by the time we added them

00:22:19,729 --> 00:22:23,059
we added them because we had a use case

00:22:21,349 --> 00:22:25,519
for a client that we've been using for

00:22:23,059 --> 00:22:27,320
three years that we were very convinced

00:22:25,519 --> 00:22:29,839
was valid and that we'd messed up the

00:22:27,320 --> 00:22:31,700
first time we said this you know fields

00:22:29,839 --> 00:22:33,259
to do this are not right it's a weird

00:22:31,700 --> 00:22:35,330
special case and so we added this

00:22:33,259 --> 00:22:37,369
concept and I think that's interesting

00:22:35,330 --> 00:22:39,440
both in that it shows even things as

00:22:37,369 --> 00:22:40,489
innocuous as directives came about

00:22:39,440 --> 00:22:43,309
through this client driven development

00:22:40,489 --> 00:22:44,719
model and then I also I also think that

00:22:43,309 --> 00:22:45,739
what James described earlier is really

00:22:44,719 --> 00:22:48,349
interesting because he talked about

00:22:45,739 --> 00:22:49,879
using directives for future development

00:22:48,349 --> 00:22:52,700
the fact that you can experiment with

00:22:49,879 --> 00:22:54,259
this and this is very much by design I'm

00:22:52,700 --> 00:22:55,849
like I'm thinking back to as we're

00:22:54,259 --> 00:22:57,950
building out directors this idea that

00:22:55,849 --> 00:22:59,690
you can use a directive to say hey I

00:22:57,950 --> 00:23:01,159
don't know if this is the right behavior

00:22:59,690 --> 00:23:02,989
or not this is not something that we

00:23:01,159 --> 00:23:04,279
should put in the spec that we should

00:23:02,989 --> 00:23:05,570
codify that we should say every

00:23:04,279 --> 00:23:07,609
graphical client and server should have

00:23:05,570 --> 00:23:09,679
to use but I think it's gonna be good

00:23:07,609 --> 00:23:12,139
and I want to experiment with it and I

00:23:09,679 --> 00:23:13,969
want to be able to say hey I tried this

00:23:12,139 --> 00:23:16,219
out I use this for three months on my

00:23:13,969 --> 00:23:18,200
clients it made my life better I think

00:23:16,219 --> 00:23:20,029
this is a valid thing that more people

00:23:18,200 --> 00:23:21,349
are going to want and so I'm seeing this

00:23:20,029 --> 00:23:24,200
more and more I hope to see a lot of it

00:23:21,349 --> 00:23:25,489
in the talks today because to me that's

00:23:24,200 --> 00:23:27,529
really the future of client driven

00:23:25,489 --> 00:23:29,509
development for graph QL now I think

00:23:27,529 --> 00:23:31,609
back to mutations and subscriptions and

00:23:29,509 --> 00:23:33,739
like we just like pack the parsers like

00:23:31,609 --> 00:23:35,659
there was no no sort of like formal way

00:23:33,739 --> 00:23:36,829
of doing it like it was just like yeah

00:23:35,659 --> 00:23:39,079
yeah just like make it accept this

00:23:36,829 --> 00:23:41,029
keyword and that's trickier to do with a

00:23:39,079 --> 00:23:42,739
community right when you have multiple

00:23:41,029 --> 00:23:44,989
clients view multiple servers and so we

00:23:42,739 --> 00:23:46,969
need a way to keep evolving graph QL

00:23:44,989 --> 00:23:50,029
because it's not static and it's never

00:23:46,969 --> 00:23:51,979
going to be done and so you know it's

00:23:50,029 --> 00:23:53,419
been interesting as I you know prep this

00:23:51,979 --> 00:23:56,479
talk as I practice this talk which I

00:23:53,419 --> 00:24:00,200
promise I did seeing sort of the

00:23:56,479 --> 00:24:02,570
evolution you know from from 2012 you

00:24:00,200 --> 00:24:03,829
know in the floor to of building 16 just

00:24:02,570 --> 00:24:04,909
sort of in the in this corner where no

00:24:03,829 --> 00:24:06,769
one was sitting so we could get some

00:24:04,909 --> 00:24:08,389
work done you know all the way to today

00:24:06,769 --> 00:24:10,129
and I don't think we could have imagined

00:24:08,389 --> 00:24:11,659
that you know it would have had

00:24:10,129 --> 00:24:12,649
mutations it would have subscriptions I

00:24:11,659 --> 00:24:14,839
don't even know if we were imagining

00:24:12,649 --> 00:24:17,149
that it would be used widely at Facebook

00:24:14,839 --> 00:24:19,129
let alone having a conference with 600

00:24:17,149 --> 00:24:21,769
plus people you know all here to talk

00:24:19,129 --> 00:24:23,869
about graph QL and so I think you know

00:24:21,769 --> 00:24:26,299
to try and forecast the next five years

00:24:23,869 --> 00:24:27,109
of graph QL at least in my mind is

00:24:26,299 --> 00:24:28,249
almost impossible

00:24:27,109 --> 00:24:29,359
we couldn't guess then where it would

00:24:28,249 --> 00:24:30,440
evolve we're not gonna be able to guess

00:24:29,359 --> 00:24:32,149
now but if

00:24:30,440 --> 00:24:33,889
had to hazard a guess if you made me put

00:24:32,149 --> 00:24:35,149
my chips on something I think it's gonna

00:24:33,889 --> 00:24:36,950
still be client driven I think the

00:24:35,149 --> 00:24:38,090
clients gonna dictate what they want

00:24:36,950 --> 00:24:41,000
what's going to make their lives easier

00:24:38,090 --> 00:24:47,569
and graph you Olaf Allah thank you

00:24:41,000 --> 00:24:47,569

YouTube URL: https://www.youtube.com/watch?v=vQkGO5q52uE


