Title: Scott Taylor - Moving the New York Times to GraphQL
Publication date: 2017-11-08
Playlist: GraphQL Summit 2017
Description: 
	Scott Taylor, Senior Software Engineer at The New York Times, gave this talk at GraphQL Summit 2017. Learn more: summit.graphql.com

The desktop, mobile, and intâ€™l versions of the NYT run on different stacks. If someone new starts on our team tomorrow, I want to point them at 1 page of docs on how to get up and running, and preferably, start building apps the same day. We are moving towards this reality with GraphQL.

See his slides: https://www.slideshare.net/ScottTaylor1/the-new-york-times-moving-to-graphql
Captions: 
	00:00:03,310 --> 00:00:09,019
okay thank you for having me at the

00:00:06,620 --> 00:00:11,450
graph QL Summit you know when I was

00:00:09,019 --> 00:00:13,099
learning graph QL like most people over

00:00:11,450 --> 00:00:15,620
the past year or so I ended up watching

00:00:13,099 --> 00:00:17,360
a bunch of talks from last year's summit

00:00:15,620 --> 00:00:20,269
on YouTube so it's kind of surreal to be

00:00:17,360 --> 00:00:24,189
here now but I'm here for the New York

00:00:20,269 --> 00:00:29,420
Times or as our president says the

00:00:24,189 --> 00:00:33,770
failing New York Times so hopefully

00:00:29,420 --> 00:00:35,990
we're not failing technologically but

00:00:33,770 --> 00:00:38,510
I'm Scott Taylor I am a software

00:00:35,990 --> 00:00:41,960
engineer on the web frameworks team at

00:00:38,510 --> 00:00:44,810
the New York Times I'm also a member of

00:00:41,960 --> 00:00:47,210
the WordPress core team I let it release

00:00:44,810 --> 00:00:48,860
of WordPress a couple years ago but I'm

00:00:47,210 --> 00:00:51,140
really just a big fan of open source

00:00:48,860 --> 00:00:53,840
software and I'm really delighted to see

00:00:51,140 --> 00:00:55,400
Facebook recently adopt the MIT license

00:00:53,840 --> 00:00:58,010
for all these projects that we use and

00:00:55,400 --> 00:01:04,549
love some of that got settled in some

00:00:58,010 --> 00:01:07,759
form or fashion right I'm also a

00:01:04,549 --> 00:01:10,579
musician I always say mainly I spend a

00:01:07,759 --> 00:01:12,460
lot of time coding but you can find me

00:01:10,579 --> 00:01:15,079
on twitter at wonder boy music which is

00:01:12,460 --> 00:01:17,659
my fake booking agency from back when I

00:01:15,079 --> 00:01:20,030
I played in a band a lot and then I'm s

00:01:17,659 --> 00:01:23,140
Taylor on github my wife and I live in

00:01:20,030 --> 00:01:27,140
Brooklyn and as quickly here's our cats

00:01:23,140 --> 00:01:32,899
we have a waffles Willa Celine Dion and

00:01:27,140 --> 00:01:35,810
Barry Manilow so I'm here to talk about

00:01:32,899 --> 00:01:38,659
our use of and switch to graph QL and

00:01:35,810 --> 00:01:41,359
react in the present and future at the

00:01:38,659 --> 00:01:45,259
New York Times 100% of the New York

00:01:41,359 --> 00:01:47,439
Times is not on graph QL yet but I

00:01:45,259 --> 00:01:49,249
envision a future where it is and

00:01:47,439 --> 00:01:50,899
currently we're in the middle of

00:01:49,249 --> 00:01:55,819
something many of you may be familiar

00:01:50,899 --> 00:01:57,109
with which is a reap lat form and as we

00:01:55,819 --> 00:01:59,359
all know these things never go as

00:01:57,109 --> 00:02:01,729
planned they always take way more time

00:01:59,359 --> 00:02:03,170
than anybody budgeted for but in the

00:02:01,729 --> 00:02:04,959
midst of these soul-searching adventures

00:02:03,170 --> 00:02:07,429
so you know we learn a lot along the way

00:02:04,959 --> 00:02:09,560
so for us pretty much everything it's

00:02:07,429 --> 00:02:12,260
changing but until everything has

00:02:09,560 --> 00:02:13,940
completely changed 100% of our traffic

00:02:12,260 --> 00:02:15,280
points the new platforms you know we saw

00:02:13,940 --> 00:02:17,560
the old platforms

00:02:15,280 --> 00:02:19,000
even more challenging is supporting

00:02:17,560 --> 00:02:22,300
these you know old and new platforms at

00:02:19,000 --> 00:02:25,360
the same time but at a high level you

00:02:22,300 --> 00:02:27,430
know our goals regardless of what

00:02:25,360 --> 00:02:31,000
technology we're using is to simplify

00:02:27,430 --> 00:02:35,830
our stack this idea is there one place

00:02:31,000 --> 00:02:38,020
we can add and retrieve data I think we

00:02:35,830 --> 00:02:39,640
all know any company we've worked at

00:02:38,020 --> 00:02:42,010
when we spit up a new project a lot of

00:02:39,640 --> 00:02:43,750
times we hunt down the REST API s we

00:02:42,010 --> 00:02:45,640
figure out if we need authentication and

00:02:43,750 --> 00:02:47,709
then we're writing the seventeenth

00:02:45,640 --> 00:02:49,870
version of the HTTP client that talks to

00:02:47,709 --> 00:02:53,290
that service so is there a way we can

00:02:49,870 --> 00:02:55,300
not do that we also were interested in

00:02:53,290 --> 00:03:00,070
like a common language and repository

00:02:55,300 --> 00:03:02,110
for creating and reusing components what

00:03:00,070 --> 00:03:04,390
happens a lot is we build what we think

00:03:02,110 --> 00:03:06,070
is the perfect monolith and then we need

00:03:04,390 --> 00:03:08,350
something that doesn't work with the CMS

00:03:06,070 --> 00:03:10,050
or slightly different and somebody may

00:03:08,350 --> 00:03:12,340
end up spinning up a completely new

00:03:10,050 --> 00:03:14,890
project that may copy/paste a lot of

00:03:12,340 --> 00:03:17,760
code between frameworks and that happens

00:03:14,890 --> 00:03:21,280
at the times way more than it should and

00:03:17,760 --> 00:03:23,080
how do we make onboarding easier so if I

00:03:21,280 --> 00:03:25,600
come to the times it would you know if

00:03:23,080 --> 00:03:28,000
I'm a new employee wouldn't it be great

00:03:25,600 --> 00:03:30,340
if I could sit down and within minutes

00:03:28,000 --> 00:03:32,799
spin up a node server and be hacking and

00:03:30,340 --> 00:03:35,590
looking at graph QL and building apps so

00:03:32,799 --> 00:03:38,739
that would be a really nice feature so

00:03:35,590 --> 00:03:40,810
this is our current platform which will

00:03:38,739 --> 00:03:43,530
refer to as old but is still current

00:03:40,810 --> 00:03:45,850
so hopefully you recognize our homepage

00:03:43,530 --> 00:03:48,519
that's the result of our last free

00:03:45,850 --> 00:03:51,220
platform the current iteration of the

00:03:48,519 --> 00:03:52,959
New York Times you see today and if

00:03:51,220 --> 00:03:57,430
you're part of the allocation you may

00:03:52,959 --> 00:03:59,049
see our new design but it wasn't that

00:03:57,430 --> 00:04:03,340
long ago that we were working on our

00:03:59,049 --> 00:04:04,660
last tree platform it was a PHP platform

00:04:03,340 --> 00:04:06,970
we launched about three or four years

00:04:04,660 --> 00:04:09,130
ago and uh I like to say I remember

00:04:06,970 --> 00:04:11,980
being at the champagne toast for this

00:04:09,130 --> 00:04:14,049
replac forum where our CEO was like oh

00:04:11,980 --> 00:04:15,130
congratulations is so beautiful we're

00:04:14,049 --> 00:04:17,350
never going to take this long in a

00:04:15,130 --> 00:04:18,820
project ever again and the interesting

00:04:17,350 --> 00:04:21,850
thing is we're already that same length

00:04:18,820 --> 00:04:23,320
of time into this reef flat form which

00:04:21,850 --> 00:04:25,620
is fine it's going to be worth it this

00:04:23,320 --> 00:04:31,169
time for sure

00:04:25,620 --> 00:04:34,560
so why rhe platform and there are some

00:04:31,169 --> 00:04:37,169
really good reasons TV platform and one

00:04:34,560 --> 00:04:39,540
of the main ones is consistency so when

00:04:37,169 --> 00:04:41,729
we change designs maybe a design pattern

00:04:39,540 --> 00:04:43,290
or design language we want to be

00:04:41,729 --> 00:04:46,830
reflected across our entire suite of

00:04:43,290 --> 00:04:50,220
projects we don't want to have to touch

00:04:46,830 --> 00:04:52,229
5 or 10 code bases to make a design

00:04:50,220 --> 00:04:54,300
change or if we don't set up these

00:04:52,229 --> 00:04:57,120
frameworks properly a completely

00:04:54,300 --> 00:05:00,180
unrelated change we require us to push 6

00:04:57,120 --> 00:05:03,060
projects to production we don't want to

00:05:00,180 --> 00:05:06,180
do that all right now our desktop and

00:05:03,060 --> 00:05:10,320
mobile apps are actually separate code

00:05:06,180 --> 00:05:11,630
bases and separate projects so you know

00:05:10,320 --> 00:05:14,760
the project I'm working on it's really

00:05:11,630 --> 00:05:17,100
you know at its you know main reason is

00:05:14,760 --> 00:05:20,190
you know putting those into one op our

00:05:17,100 --> 00:05:22,289
iPhone and iPad apps have actually

00:05:20,190 --> 00:05:22,740
recently been rewritten as one app and

00:05:22,289 --> 00:05:24,090
Swift

00:05:22,740 --> 00:05:26,900
believe it or not those were two

00:05:24,090 --> 00:05:29,880
separate code bases for a long time and

00:05:26,900 --> 00:05:33,389
what we're trying now is our Android and

00:05:29,880 --> 00:05:36,990
iOS apps are actually rendering HTML web

00:05:33,389 --> 00:05:38,760
views for their content so that we can

00:05:36,990 --> 00:05:42,750
change that in one place and push those

00:05:38,760 --> 00:05:44,000
design changes without having to do you

00:05:42,750 --> 00:05:46,470
know an app store refresh or anything

00:05:44,000 --> 00:05:49,650
you know one day this could be react

00:05:46,470 --> 00:05:51,120
native you know but um so we're really

00:05:49,650 --> 00:05:52,560
trying to condense the number of places

00:05:51,120 --> 00:05:56,400
we have to change when we make changes

00:05:52,560 --> 00:05:58,229
as a company a few technical things like

00:05:56,400 --> 00:06:01,110
well we're doing this we're also doing

00:05:58,229 --> 00:06:02,700
some other big projects we're moving our

00:06:01,110 --> 00:06:04,919
data center apps to Google cloud

00:06:02,700 --> 00:06:06,539
platform and your new york times

00:06:04,919 --> 00:06:10,020
actually has some great plugins i wanted

00:06:06,539 --> 00:06:11,580
to shout out for interacting with google

00:06:10,020 --> 00:06:15,750
container engine and Google App Engine

00:06:11,580 --> 00:06:18,470
and stuff our data internally is moving

00:06:15,750 --> 00:06:21,479
to this great kind of like data pipeline

00:06:18,470 --> 00:06:25,050
written on Kafka and using protobufs and

00:06:21,479 --> 00:06:26,550
some other Google pieces and then also I

00:06:25,050 --> 00:06:29,820
think we've developed a really great

00:06:26,550 --> 00:06:31,919
internal piece that has been open source

00:06:29,820 --> 00:06:34,740
called kit which man which kind of

00:06:31,919 --> 00:06:36,780
manages configuration hell for you for

00:06:34,740 --> 00:06:39,080
web pack apps and Babel configuration

00:06:36,780 --> 00:06:43,069
I've become a huge fan of

00:06:39,080 --> 00:06:46,750
Kitt's but what we're here today to talk

00:06:43,069 --> 00:06:50,479
about is graph UL at the new york times

00:06:46,750 --> 00:06:52,580
and at a high level it's two parts

00:06:50,479 --> 00:06:55,400
you know our graph QL server is actually

00:06:52,580 --> 00:06:58,159
a sangria app written in scala which is

00:06:55,400 --> 00:06:59,389
maintained by a data team called sami

00:06:58,159 --> 00:07:01,520
stat and we actually have a couple

00:06:59,389 --> 00:07:04,849
members here somewhere in the crowd I

00:07:01,520 --> 00:07:07,729
see one and then the front-end is

00:07:04,849 --> 00:07:08,900
currently a universal relay app then

00:07:07,729 --> 00:07:10,699
where you know you're using node and

00:07:08,900 --> 00:07:13,460
Express and that's maintained by the

00:07:10,699 --> 00:07:15,590
team that I'm on I joined the web

00:07:13,460 --> 00:07:18,169
frameworks team after we already had a

00:07:15,590 --> 00:07:20,479
running app with a few routes and Olav

00:07:18,169 --> 00:07:22,250
for my team is somewhere in here but he

00:07:20,479 --> 00:07:24,650
had our friend Jared McDonald from web

00:07:22,250 --> 00:07:26,509
frameworks originally spun up this app

00:07:24,650 --> 00:07:28,129
and that serves as the basis of what

00:07:26,509 --> 00:07:32,120
we've been building for the past year

00:07:28,129 --> 00:07:34,819
and a half so reacting graph Cal to New

00:07:32,120 --> 00:07:37,490
York Times like why and what's

00:07:34,819 --> 00:07:40,039
interesting is that the last tree

00:07:37,490 --> 00:07:41,389
platform these tools didn't exist which

00:07:40,039 --> 00:07:43,879
is kind of crazy if you think about it

00:07:41,389 --> 00:07:45,770
because it was only I guess four years

00:07:43,879 --> 00:07:50,090
ago now maybe a little bit longer and

00:07:45,770 --> 00:07:51,729
you know we've had some great talent at

00:07:50,090 --> 00:07:54,949
the New York Times on our graphics team

00:07:51,729 --> 00:07:56,539
Jeremy Ashkenaz who built backbone and

00:07:54,949 --> 00:07:58,969
underscore and CoffeeScript and all

00:07:56,539 --> 00:08:00,620
these great things you know he worked

00:07:58,969 --> 00:08:05,539
with us for a long time Michael Bostock

00:08:00,620 --> 00:08:07,069
who wrote d3 and so we actually had a

00:08:05,539 --> 00:08:09,020
lot of momentum around building our apps

00:08:07,069 --> 00:08:10,580
around the kind of the MVC architecture

00:08:09,020 --> 00:08:14,810
I think a lot of us were used to at the

00:08:10,580 --> 00:08:17,360
time around backbone but you know our

00:08:14,810 --> 00:08:18,560
friend Olaf and another friend James

00:08:17,360 --> 00:08:21,740
Lowry from the summit a team were

00:08:18,560 --> 00:08:23,360
starting to explore demand-driven

00:08:21,740 --> 00:08:25,009
architecture a couple years later and

00:08:23,360 --> 00:08:27,349
they were looking at things like Falkor

00:08:25,009 --> 00:08:31,250
but eventually there was momentum

00:08:27,349 --> 00:08:33,320
America round graph QL and so we moved

00:08:31,250 --> 00:08:36,050
forward with it we thought it was really

00:08:33,320 --> 00:08:38,180
cool but graph QL in some ways is still

00:08:36,050 --> 00:08:40,909
brand new and organizationally we're

00:08:38,180 --> 00:08:42,440
really still kind of figuring it out so

00:08:40,909 --> 00:08:44,690
even in the year or so of implementing

00:08:42,440 --> 00:08:46,579
graph QL you know we've learned a lot we

00:08:44,690 --> 00:08:49,220
have pivoted a lot we've changed the way

00:08:46,579 --> 00:08:50,959
we view apps we've drastically changed

00:08:49,220 --> 00:08:52,160
the way we work you know we've changed

00:08:50,959 --> 00:08:52,790
and the way we see the world has changed

00:08:52,160 --> 00:08:56,900
and it's

00:08:52,790 --> 00:08:58,460
really been this wild ride and you know

00:08:56,900 --> 00:09:01,520
everything starts so innocent and simple

00:08:58,460 --> 00:09:02,960
you know the graph QL site kind of lays

00:09:01,520 --> 00:09:05,000
it out plain and clear for us you know

00:09:02,960 --> 00:09:08,150
gives us some guidelines and it gives us

00:09:05,000 --> 00:09:10,790
some best practices if if they exist I'm

00:09:08,150 --> 00:09:12,580
not totally sure but like but in

00:09:10,790 --> 00:09:14,360
organizations thinking a muscle memory

00:09:12,580 --> 00:09:17,360
doesn't change overnight

00:09:14,360 --> 00:09:19,730
so we're also you know we're part of a

00:09:17,360 --> 00:09:22,550
big technology organization with you

00:09:19,730 --> 00:09:24,440
know I think 300 engineers with all

00:09:22,550 --> 00:09:28,310
their own histories preferences ideas

00:09:24,440 --> 00:09:32,210
and specialties but graph QL suggests a

00:09:28,310 --> 00:09:33,800
few things which is like we all know a

00:09:32,210 --> 00:09:36,020
preferred building the graph QL schema

00:09:33,800 --> 00:09:39,500
that describes how clients use the data

00:09:36,020 --> 00:09:42,080
rather than mirroring the data so in two

00:09:39,500 --> 00:09:43,010
original iterations to get started you

00:09:42,080 --> 00:09:46,550
know we did what a lot of people do

00:09:43,010 --> 00:09:48,710
which we mirrored the data I even did

00:09:46,550 --> 00:09:50,510
some side you know little prototypes

00:09:48,710 --> 00:09:51,590
with WordPress the first thing I did was

00:09:50,510 --> 00:09:52,850
mirror they did it cuz it's the easiest

00:09:51,590 --> 00:09:56,480
way to get started you don't have to

00:09:52,850 --> 00:09:57,920
think about much and if you're gonna do

00:09:56,480 --> 00:09:59,240
that if you're gonna do scheme is like

00:09:57,920 --> 00:10:02,840
that it actually makes a lot of sense to

00:09:59,240 --> 00:10:05,540
auto-generate those schemas because if

00:10:02,840 --> 00:10:07,610
you're in the maratha mindset are still

00:10:05,540 --> 00:10:08,990
using these documented REST API s you

00:10:07,610 --> 00:10:12,050
don't want to be missing data

00:10:08,990 --> 00:10:13,340
when app developers go to use it but

00:10:12,050 --> 00:10:15,890
with the luxury of time

00:10:13,340 --> 00:10:17,060
you can create your schema gradually you

00:10:15,890 --> 00:10:19,120
know making decisions about what to

00:10:17,060 --> 00:10:23,090
include and like what to leave behind

00:10:19,120 --> 00:10:25,370
but another guideline is versioning and

00:10:23,090 --> 00:10:27,650
the basically says not to version the

00:10:25,370 --> 00:10:29,330
schema like we do our rest endpoints but

00:10:27,650 --> 00:10:31,280
because we're doing so many much free

00:10:29,330 --> 00:10:32,390
platforming at the same time to where we

00:10:31,280 --> 00:10:36,220
were gonna have a whole different

00:10:32,390 --> 00:10:38,570
pipeline and based on you know protobufs

00:10:36,220 --> 00:10:41,180
we actually are f-first schema was

00:10:38,570 --> 00:10:43,280
really a placeholder until we had what

00:10:41,180 --> 00:10:44,570
we considered the real one but because

00:10:43,280 --> 00:10:46,370
we did that we ended up having to

00:10:44,570 --> 00:10:50,360
rewrite all of our apps which is kind of

00:10:46,370 --> 00:10:51,890
like a one-time cost but when your app

00:10:50,360 --> 00:10:56,000
starts to grow and get gets bigger that

00:10:51,890 --> 00:10:58,310
gets very prohibitive yeah so our main

00:10:56,000 --> 00:11:00,530
pivots we're that we know we mirrored

00:10:58,310 --> 00:11:02,630
data and then we version the schema and

00:11:00,530 --> 00:11:05,210
generated from protobufs but then we

00:11:02,630 --> 00:11:06,530
decided to actually not do the protobuf

00:11:05,210 --> 00:11:06,920
thing we want to give ourselves some

00:11:06,530 --> 00:11:09,079
flex

00:11:06,920 --> 00:11:11,269
ability so that we could give you AI

00:11:09,079 --> 00:11:13,730
developers a little more flexibility in

00:11:11,269 --> 00:11:15,589
adding fields but even doing that we

00:11:13,730 --> 00:11:18,110
actually realized that we can go

00:11:15,589 --> 00:11:19,850
overboard on that too because we took

00:11:18,110 --> 00:11:21,410
some of art a lot design language and

00:11:19,850 --> 00:11:24,110
pushed it all the way into our graphic

00:11:21,410 --> 00:11:27,560
you all types and if you go too

00:11:24,110 --> 00:11:29,180
overboard on heterogeneous types or

00:11:27,560 --> 00:11:31,310
things like trying to type too much

00:11:29,180 --> 00:11:34,310
content you can actually end up with

00:11:31,310 --> 00:11:40,360
really crazy fragment size and query

00:11:34,310 --> 00:11:42,560
size so the other piece was relay and

00:11:40,360 --> 00:11:44,300
relay was selected very early in the

00:11:42,560 --> 00:11:46,430
process and you know that that's

00:11:44,300 --> 00:11:49,699
decision seems like it was a long time

00:11:46,430 --> 00:11:50,959
ago but if you chart out relay you know

00:11:49,699 --> 00:11:52,970
it's only been a year and a half since

00:11:50,959 --> 00:11:55,820
relay was open sourced which is insane

00:11:52,970 --> 00:11:57,769
if you think about it I mean when I

00:11:55,820 --> 00:11:59,449
joined the team at the end of last year

00:11:57,769 --> 00:12:01,519
even as we were learning the ins and

00:11:59,449 --> 00:12:04,430
outs of really classic there's a lot of

00:12:01,519 --> 00:12:08,180
chatter about relay to and what was what

00:12:04,430 --> 00:12:09,889
was relate to gonna do and really

00:12:08,180 --> 00:12:11,630
classic seemed fine but then you would

00:12:09,889 --> 00:12:13,190
watch a Joseph on a talk and he'd say

00:12:11,630 --> 00:12:16,490
this is why it's so bad and here's why

00:12:13,190 --> 00:12:17,779
modern is so good and we just assume

00:12:16,490 --> 00:12:19,910
that you know really modern was gonna do

00:12:17,779 --> 00:12:23,300
all these things for us we evaluated

00:12:19,910 --> 00:12:24,829
Apollo lightly during this time but the

00:12:23,300 --> 00:12:28,160
general consensus was late let's let's

00:12:24,829 --> 00:12:31,370
wait and see what really modern does so

00:12:28,160 --> 00:12:33,500
real a modern dropped that was relayed

00:12:31,370 --> 00:12:34,970
to that we've been waiting for him and I

00:12:33,500 --> 00:12:38,000
was so excited I ran to my computer that

00:12:34,970 --> 00:12:39,620
day to do a hello world app and actually

00:12:38,000 --> 00:12:41,899
Sasuke oh did the same thing so I

00:12:39,620 --> 00:12:46,310
tweeted this basically we both made

00:12:41,899 --> 00:12:48,589
these little hello worlds but one thing

00:12:46,310 --> 00:12:53,230
that kind of became clear to us at least

00:12:48,589 --> 00:12:55,459
was that relay classic was kind of dead

00:12:53,230 --> 00:12:57,410
it seemed like all the momentum was

00:12:55,459 --> 00:13:01,670
going towards modern and modern does

00:12:57,410 --> 00:13:04,959
have a classic mode but um if modern was

00:13:01,670 --> 00:13:07,850
written because Facebook realized

00:13:04,959 --> 00:13:09,920
classic was not built to perform that

00:13:07,850 --> 00:13:14,209
really left us with two options for the

00:13:09,920 --> 00:13:17,810
future so of course real a modern or

00:13:14,209 --> 00:13:19,910
Apollo and at this point we still think

00:13:17,810 --> 00:13:22,550
we're going to update it early modern we

00:13:19,910 --> 00:13:24,110
questions about the ecosystem but we

00:13:22,550 --> 00:13:26,810
decided it might be a good time to kind

00:13:24,110 --> 00:13:31,070
of rethink everything around we're going

00:13:26,810 --> 00:13:33,980
to use this data layer so what became

00:13:31,070 --> 00:13:37,400
obvious to us when we started moving the

00:13:33,980 --> 00:13:39,290
x to node and I think he may all agree

00:13:37,400 --> 00:13:42,380
with this is that the NPM and node

00:13:39,290 --> 00:13:44,660
ecosystem moves extremely fast and in

00:13:42,380 --> 00:13:47,980
the process creates kind of epic amounts

00:13:44,660 --> 00:13:50,720
of vaporware and abandonware

00:13:47,980 --> 00:13:52,760
so we have to constantly reevaluate our

00:13:50,720 --> 00:13:54,980
decisions and assumptions when we're

00:13:52,760 --> 00:13:57,740
building a solvent at solid foundation

00:13:54,980 --> 00:13:59,210
for the future and these frameworks

00:13:57,740 --> 00:14:00,830
aren't on one line install they end up

00:13:59,210 --> 00:14:02,750
being a collection of packages that

00:14:00,830 --> 00:14:05,300
enable stuff like single page app

00:14:02,750 --> 00:14:06,950
routing isomorphic rendering and then

00:14:05,300 --> 00:14:10,910
advanced pieces like store rehydration

00:14:06,950 --> 00:14:12,470
and persistent queries so I'm going to

00:14:10,910 --> 00:14:15,230
walk through some differences behind

00:14:12,470 --> 00:14:17,570
really classic modern Apollo and all

00:14:15,230 --> 00:14:20,120
these projects work there are trade-offs

00:14:17,570 --> 00:14:21,860
with each all these platforms will

00:14:20,120 --> 00:14:25,700
continue to evolve and I want to help

00:14:21,860 --> 00:14:27,950
evolve relay in Apollo but part of the

00:14:25,700 --> 00:14:29,510
job of evaluating what framework is

00:14:27,950 --> 00:14:31,280
right is understanding how these

00:14:29,510 --> 00:14:36,560
projects work how they that they're the

00:14:31,280 --> 00:14:38,330
same and how they're different so the

00:14:36,560 --> 00:14:41,330
ecosystem around relay classic is not

00:14:38,330 --> 00:14:42,770
vast but it does exist server-side

00:14:41,330 --> 00:14:45,650
rendering is actually a non-negotiable

00:14:42,770 --> 00:14:48,500
for us any decisions we make have to

00:14:45,650 --> 00:14:49,880
have server-side rendering in mind and

00:14:48,500 --> 00:14:52,010
these are the writing libraries you need

00:14:49,880 --> 00:14:56,150
to make server-side rendering work with

00:14:52,010 --> 00:14:58,100
really classic so really classic has a

00:14:56,150 --> 00:15:02,240
hard requirement on using a router in a

00:14:58,100 --> 00:15:05,570
particular way so we specify queries

00:15:02,240 --> 00:15:08,210
directly on the route and then for graph

00:15:05,570 --> 00:15:11,090
QL strings we use the relayed QL tag

00:15:08,210 --> 00:15:13,520
template literal and the relay babel

00:15:11,090 --> 00:15:14,960
plug-in does all the magic with parsing

00:15:13,520 --> 00:15:18,800
these templates and actual queries that

00:15:14,960 --> 00:15:20,000
we can send to our server queries in

00:15:18,800 --> 00:15:22,460
really classic use kind of like this

00:15:20,000 --> 00:15:23,990
shorthand graphical notation and this

00:15:22,460 --> 00:15:25,100
can be a little bit of a mind bender for

00:15:23,990 --> 00:15:26,750
people if you don't already have a

00:15:25,100 --> 00:15:30,340
vision of what the query looks like in

00:15:26,750 --> 00:15:33,830
your mind or in graph in graphical and

00:15:30,340 --> 00:15:35,810
then route params kind of automatically

00:15:33,830 --> 00:15:37,970
map from the path prop and our past the

00:15:35,810 --> 00:15:43,100
query bars past as query bars to the

00:15:37,970 --> 00:15:44,959
query fragments in real a classic can

00:15:43,100 --> 00:15:47,990
contain variables local to each instance

00:15:44,959 --> 00:15:50,240
the component so every time you know

00:15:47,990 --> 00:15:53,420
card media is rendered here a different

00:15:50,240 --> 00:15:56,089
crop could be requested these local

00:15:53,420 --> 00:15:57,890
variables can trickle down in the child

00:15:56,089 --> 00:16:02,750
components and can actually be informed

00:15:57,890 --> 00:16:04,970
by parent components to so this time EMA

00:16:02,750 --> 00:16:06,680
system is great for writing flexible

00:16:04,970 --> 00:16:08,420
components but it has a cost of

00:16:06,680 --> 00:16:10,220
deferring a lot of work to really

00:16:08,420 --> 00:16:12,649
internally to transform these dynamic

00:16:10,220 --> 00:16:17,480
fragments into pieces of static queries

00:16:12,649 --> 00:16:18,769
that can be sent to the server the query

00:16:17,480 --> 00:16:21,050
that gets constructed is resolved a lot

00:16:18,769 --> 00:16:23,810
of magic and a lot of complexity is

00:16:21,050 --> 00:16:25,820
hidden from the developer for instance

00:16:23,810 --> 00:16:28,430
really doesn't send field aliases that

00:16:25,820 --> 00:16:30,380
you specified to the graph QL server but

00:16:28,430 --> 00:16:31,940
when you specify arguments on a field it

00:16:30,380 --> 00:16:34,459
does alias those fields and send them

00:16:31,940 --> 00:16:36,649
and knowing that these type of types of

00:16:34,459 --> 00:16:37,790
fragments exists is important for when

00:16:36,649 --> 00:16:42,709
we look at how these components are

00:16:37,790 --> 00:16:45,730
written in really a modern in Apollo in

00:16:42,709 --> 00:16:48,050
real a classic reef etching and

00:16:45,730 --> 00:16:49,940
pagination are accomplished using one

00:16:48,050 --> 00:16:52,730
loan mechanism which is set variables

00:16:49,940 --> 00:16:54,550
and this is also how client only day

00:16:52,730 --> 00:16:56,690
that can be requested in real a classic

00:16:54,550 --> 00:16:58,579
which is you know calling set variables

00:16:56,690 --> 00:17:01,790
in component about and toggling its

00:16:58,579 --> 00:17:04,339
client set variables is also what

00:17:01,790 --> 00:17:05,059
triggers the cryptic node query and I

00:17:04,339 --> 00:17:07,189
would actually love to have a

00:17:05,059 --> 00:17:10,100
conversation with somebody maybe Ely

00:17:07,189 --> 00:17:12,679
about I can explain to me how why and

00:17:10,100 --> 00:17:14,480
when this works the way does I don't

00:17:12,679 --> 00:17:17,929
know 100 percent get it yet

00:17:14,480 --> 00:17:20,209
and you know my description is that

00:17:17,929 --> 00:17:24,319
mutations look like flux on drugs in

00:17:20,209 --> 00:17:26,419
real a classic so we know what time to

00:17:24,319 --> 00:17:30,500
talk about how mutations work this how

00:17:26,419 --> 00:17:32,059
they looking really classic so that's a

00:17:30,500 --> 00:17:34,010
trip through really classic but we

00:17:32,059 --> 00:17:36,280
didn't look at the SSR part and this is

00:17:34,010 --> 00:17:39,440
what you have to do on the server to

00:17:36,280 --> 00:17:41,690
extract data from your routes and then

00:17:39,440 --> 00:17:45,020
render the app with it and I've abridged

00:17:41,690 --> 00:17:46,700
the implementation details a bit but

00:17:45,020 --> 00:17:47,690
this actually ties us because we need

00:17:46,700 --> 00:17:50,510
server rendering

00:17:47,690 --> 00:17:53,150
we have to use isomorphic relay router

00:17:50,510 --> 00:17:56,180
and that project actually has no plans

00:17:53,150 --> 00:17:58,970
to support really modern meaning it's

00:17:56,180 --> 00:18:01,570
abandoned we're at that point I actually

00:17:58,970 --> 00:18:04,310
have a PR so it even supports react 16

00:18:01,570 --> 00:18:08,050
because what happens here is that when a

00:18:04,310 --> 00:18:10,610
project becomes you know isn't updated

00:18:08,050 --> 00:18:13,040
isomorphic real a router actually wants

00:18:10,610 --> 00:18:16,880
an older version of react relay router

00:18:13,040 --> 00:18:19,370
which has updated to support react 16 so

00:18:16,880 --> 00:18:22,640
because this dependency is off

00:18:19,370 --> 00:18:25,700
and because react relay router uses a

00:18:22,640 --> 00:18:29,750
react prop types internally we need

00:18:25,700 --> 00:18:31,580
somebody to upgrade there so unless they

00:18:29,750 --> 00:18:34,010
modernize themselves they can't be used

00:18:31,580 --> 00:18:35,780
if really modern and the been in these

00:18:34,010 --> 00:18:42,430
libraries will take away that SSR piece

00:18:35,780 --> 00:18:44,630
which we need so relay modern is new and

00:18:42,430 --> 00:18:47,620
it's a great project but there really

00:18:44,630 --> 00:18:51,890
hasn't become an ecosystem around it yet

00:18:47,620 --> 00:18:56,510
found relay is the relay companion to

00:18:51,890 --> 00:18:58,670
the found routing library it does do a

00:18:56,510 --> 00:19:00,740
server-side rendering component but a

00:18:58,670 --> 00:19:03,560
big reason it does that as I hunted down

00:19:00,740 --> 00:19:06,160
the author on on Twitter DMS and I was

00:19:03,560 --> 00:19:09,800
like I need this can you help me

00:19:06,160 --> 00:19:11,480
so perhaps something that's not totally

00:19:09,800 --> 00:19:13,310
known about relay modern is that query

00:19:11,480 --> 00:19:15,530
renderer does not work out of the box on

00:19:13,310 --> 00:19:19,430
the server so you actually need a

00:19:15,530 --> 00:19:21,500
similar mechanism to what isomorphic

00:19:19,430 --> 00:19:22,970
relay router does to get your data on

00:19:21,500 --> 00:19:26,630
the server so that you can do server

00:19:22,970 --> 00:19:29,090
rendering relay modern does include a

00:19:26,630 --> 00:19:33,890
bunch of useful tools stuff like query

00:19:29,090 --> 00:19:36,080
response cache and there's also it's a

00:19:33,890 --> 00:19:38,270
me go to this slide it's a lot easier to

00:19:36,080 --> 00:19:40,400
set up the network pieces of really

00:19:38,270 --> 00:19:42,230
modern and actually switch out with more

00:19:40,400 --> 00:19:47,200
advanced implementations once you have

00:19:42,230 --> 00:19:50,240
them but um we really need found relay

00:19:47,200 --> 00:19:52,370
to do this which gives us a static route

00:19:50,240 --> 00:19:55,310
config so that we can extract the routes

00:19:52,370 --> 00:19:59,980
to have queries and hydrate that data

00:19:55,310 --> 00:19:59,980
ahead of rendering so

00:20:00,899 --> 00:20:04,840
component fragments and modern look very

00:20:03,460 --> 00:20:06,999
similar to classic but use some

00:20:04,840 --> 00:20:10,299
different API methods which I've shown

00:20:06,999 --> 00:20:11,649
here real a modern uses a babble plug-in

00:20:10,299 --> 00:20:14,529
but it's actually a different babble

00:20:11,649 --> 00:20:17,710
plug-in than real a classic does and

00:20:14,529 --> 00:20:20,769
this introduces static fragments ascetic

00:20:17,710 --> 00:20:22,690
queries so there are no more local

00:20:20,769 --> 00:20:26,470
variables and variables are only passed

00:20:22,690 --> 00:20:29,710
at the top level of a query now so all

00:20:26,470 --> 00:20:32,139
fragments need to be static at Build

00:20:29,710 --> 00:20:33,730
time so the relay compiler can turn them

00:20:32,139 --> 00:20:36,159
into artifacts at the babble plugin uses

00:20:33,730 --> 00:20:37,809
this actually was already happening in

00:20:36,159 --> 00:20:39,879
relay classic but it was happening

00:20:37,809 --> 00:20:42,190
because of that magic so if you look at

00:20:39,879 --> 00:20:43,990
your queries that are being sent in

00:20:42,190 --> 00:20:45,279
relay classic they actually looked like

00:20:43,990 --> 00:20:50,830
static queries but they were just

00:20:45,279 --> 00:20:52,600
assembled at runtime so if we remember

00:20:50,830 --> 00:20:55,059
our dynamic component from classic that

00:20:52,600 --> 00:20:57,220
had a local variable that complexity

00:20:55,059 --> 00:20:59,379
goes away but we probably have to

00:20:57,220 --> 00:21:02,379
rethink the portion of our app that

00:20:59,379 --> 00:21:03,610
deals with crops now so unraveling that

00:21:02,379 --> 00:21:06,460
complexity is actually been a challenge

00:21:03,610 --> 00:21:08,499
for us and there are several components

00:21:06,460 --> 00:21:10,840
that expected to only receive one crop

00:21:08,499 --> 00:21:12,610
so the logic we were using to retrieve

00:21:10,840 --> 00:21:14,830
the crop from the result wasn't the

00:21:12,610 --> 00:21:16,570
greatest so we actually mean to like

00:21:14,830 --> 00:21:21,009
iterate over that list of crops now and

00:21:16,570 --> 00:21:23,230
like find the one we're looking for but

00:21:21,009 --> 00:21:25,119
real a modern also has more more options

00:21:23,230 --> 00:21:27,490
than just set variables so you can

00:21:25,119 --> 00:21:31,090
create a refetch container which is

00:21:27,490 --> 00:21:32,799
almost the same api and the

00:21:31,090 --> 00:21:35,110
documentation says this is good for load

00:21:32,799 --> 00:21:37,690
more I think about reef fetches more for

00:21:35,110 --> 00:21:39,999
like inland updates like a feature like

00:21:37,690 --> 00:21:44,320
search or maybe doing that client only

00:21:39,999 --> 00:21:46,269
data thing a pagination container or one

00:21:44,320 --> 00:21:47,860
actually even fit on the slide but it's

00:21:46,269 --> 00:21:51,850
actually pretty powerful because if you

00:21:47,860 --> 00:21:54,279
use this configuration infinite scroll

00:21:51,850 --> 00:21:56,559
is really easy because you get this

00:21:54,279 --> 00:22:00,240
method where you can do a you know just

00:21:56,559 --> 00:22:00,240
load more number of items which is great

00:22:01,080 --> 00:22:05,289
so mutations in real a modern actually

00:22:03,759 --> 00:22:08,919
use an imperative API that's very

00:22:05,289 --> 00:22:10,779
similar to Apollo's the documentation is

00:22:08,919 --> 00:22:12,840
a little tough and I think anybody

00:22:10,779 --> 00:22:16,499
that's tried doing mutations in any

00:22:12,840 --> 00:22:18,720
of these has found this I got lucky

00:22:16,499 --> 00:22:19,830
because I was able to like read the code

00:22:18,720 --> 00:22:22,470
and kind of know what was happening

00:22:19,830 --> 00:22:25,499
internally but I don't think every

00:22:22,470 --> 00:22:28,919
developer is gonna do that so here's an

00:22:25,499 --> 00:22:31,740
example of real a modern updating their

00:22:28,919 --> 00:22:34,110
store and you kind of have an option you

00:22:31,740 --> 00:22:37,379
can use these cryptic flux configs or

00:22:34,110 --> 00:22:39,929
you can do the connection handler API

00:22:37,379 --> 00:22:41,190
like this I got it to work but I

00:22:39,929 --> 00:22:43,289
actually have no idea if this is correct

00:22:41,190 --> 00:22:48,419
it's kind of its kind of like filing my

00:22:43,289 --> 00:22:52,649
taxes like it happened I don't you know

00:22:48,419 --> 00:22:54,480
is anybody right here so at this point

00:22:52,649 --> 00:22:57,090
you know we have some knowledge about

00:22:54,480 --> 00:22:59,309
really modern but we have a rhotic

00:22:57,090 --> 00:23:02,460
routing library that's you know version

00:22:59,309 --> 00:23:04,139
zero three zero alpha nine and we

00:23:02,460 --> 00:23:06,509
realized our graph QL schema it's not

00:23:04,139 --> 00:23:10,499
totally jive with their response

00:23:06,509 --> 00:23:12,330
normalizer and relay compiler so we

00:23:10,499 --> 00:23:15,019
wanted to take a look at Apollo and see

00:23:12,330 --> 00:23:17,009
what Apollo could do for us

00:23:15,019 --> 00:23:18,990
Jeremy J ed who's one of the lead

00:23:17,009 --> 00:23:21,240
engineers said that the times had done

00:23:18,990 --> 00:23:23,129
an initial review of Apollo and it had

00:23:21,240 --> 00:23:24,450
been impressed but a lot of us were

00:23:23,129 --> 00:23:27,419
skeptical because we were waiting for

00:23:24,450 --> 00:23:29,490
relay 2 so we kind of blew that off but

00:23:27,419 --> 00:23:32,429
um what happens to is that the x

00:23:29,490 --> 00:23:35,940
codebase already is too big to try out a

00:23:32,429 --> 00:23:37,470
new framework so these you know relay an

00:23:35,940 --> 00:23:39,990
Apollo had these idioms that kind of

00:23:37,470 --> 00:23:41,940
extend everywhere so you it's hard to

00:23:39,990 --> 00:23:44,789
just pick one piece to run part of the

00:23:41,940 --> 00:23:47,519
framework on so I actually did some

00:23:44,789 --> 00:23:50,909
projects on the side using WordPress to

00:23:47,519 --> 00:23:52,470
where I made I made a relay version of a

00:23:50,909 --> 00:23:55,619
theme I made an Apollo version the theme

00:23:52,470 --> 00:23:58,590
and I used react native as well to kind

00:23:55,619 --> 00:24:01,619
of try this stuff out and see how easy

00:23:58,590 --> 00:24:04,289
it was what the ergonomics were like so

00:24:01,619 --> 00:24:06,269
I enjoyed Apollo and I felt like it was

00:24:04,289 --> 00:24:08,129
it was natural and what was nice though

00:24:06,269 --> 00:24:09,659
is that every time I hit a corner case

00:24:08,129 --> 00:24:11,999
in the app where I needed to reach out

00:24:09,659 --> 00:24:17,850
for a package there were there was an

00:24:11,999 --> 00:24:20,070
ecosystem around it so with Apollo you

00:24:17,850 --> 00:24:21,809
can use any router you won and this

00:24:20,070 --> 00:24:26,010
actually includes a react router version

00:24:21,809 --> 00:24:28,740
4 so anyone that's used relay with those

00:24:26,010 --> 00:24:33,150
other tools I showed for classic in

00:24:28,740 --> 00:24:37,290
react writer version for static route

00:24:33,150 --> 00:24:40,200
configs don't really exist so using a

00:24:37,290 --> 00:24:41,760
writer version for with relay and

00:24:40,200 --> 00:24:45,480
needing server-side rendering is kind of

00:24:41,760 --> 00:24:47,430
an anti-pattern right now in the case of

00:24:45,480 --> 00:24:49,350
react native you don't have the same

00:24:47,430 --> 00:24:52,020
problem you don't have to serve our

00:24:49,350 --> 00:24:54,630
client limitation so you can treat

00:24:52,020 --> 00:24:57,800
everything like it's client only and the

00:24:54,630 --> 00:25:01,590
same is true for react native and Apollo

00:24:57,800 --> 00:25:03,180
an Apollo client - you know which just

00:25:01,590 --> 00:25:04,560
dropped we have not upgraded to that yet

00:25:03,180 --> 00:25:09,030
so most of all I'm gonna show you is

00:25:04,560 --> 00:25:11,340
based on Apollo 1 but our router loses

00:25:09,030 --> 00:25:13,170
all of its complexity you know none of

00:25:11,340 --> 00:25:15,870
the data fetching is tied to the router

00:25:13,170 --> 00:25:20,730
itself so you can use any project you

00:25:15,870 --> 00:25:22,110
want for your routing needs and when you

00:25:20,730 --> 00:25:24,180
want to do server-side rendering with

00:25:22,110 --> 00:25:26,220
Apollo you know there's a one line

00:25:24,180 --> 00:25:28,800
change here which is SSR mode equals

00:25:26,220 --> 00:25:34,170
true which is pretty amazing

00:25:28,800 --> 00:25:35,730
and when we used it on the client it's

00:25:34,170 --> 00:25:38,040
even easier we can actually just reuse

00:25:35,730 --> 00:25:40,290
that state we got from the server and

00:25:38,040 --> 00:25:42,750
there's great Doc's around this - about

00:25:40,290 --> 00:25:48,710
how you setup this in your template to

00:25:42,750 --> 00:25:51,690
let read that data so queries become

00:25:48,710 --> 00:25:53,340
decorators on components and they don't

00:25:51,690 --> 00:25:56,340
need to leak all the way to the top of

00:25:53,340 --> 00:25:57,990
the route so they can live anywhere in

00:25:56,340 --> 00:26:01,140
the tree that you render a component and

00:25:57,990 --> 00:26:02,970
the component itself handles the loading

00:26:01,140 --> 00:26:04,620
and error state of each individual query

00:26:02,970 --> 00:26:06,630
which that's also in a lot of these

00:26:04,620 --> 00:26:12,360
frameworks the router is handling that

00:26:06,630 --> 00:26:15,120
for every Rob client only queries are

00:26:12,360 --> 00:26:17,910
easy to specify so one of the only

00:26:15,120 --> 00:26:21,060
reasons we use real a set variables is

00:26:17,910 --> 00:26:23,640
to toggle is client during component did

00:26:21,060 --> 00:26:25,460
mount so when Apollo is walking your

00:26:23,640 --> 00:26:29,250
tree of react components on the server

00:26:25,460 --> 00:26:33,690
it will skip requesting a query that has

00:26:29,250 --> 00:26:35,460
SS are false and this is huge for us in

00:26:33,690 --> 00:26:38,190
relay classic we had to specify these

00:26:35,460 --> 00:26:39,350
queries on the route conditionally we

00:26:38,190 --> 00:26:40,880
had we kind of

00:26:39,350 --> 00:26:44,000
places to awkwardly had to call set

00:26:40,880 --> 00:26:48,230
variables to toggle certain nodes within

00:26:44,000 --> 00:26:49,850
a top-level query the graph QL decorator

00:26:48,230 --> 00:26:51,650
makes it easy to provide data to a

00:26:49,850 --> 00:26:54,830
component deeply nested in our overall

00:26:51,650 --> 00:26:56,960
tree or even conditionally load react

00:26:54,830 --> 00:27:00,080
components and their data on the client

00:26:56,960 --> 00:27:01,220
in response to user actions so we have a

00:27:00,080 --> 00:27:04,760
lot of modules that are maybe at the

00:27:01,220 --> 00:27:06,320
bottom well below the fold that we can

00:27:04,760 --> 00:27:11,840
defer until the user actually Scrolls

00:27:06,320 --> 00:27:14,360
down there and what's great about these

00:27:11,840 --> 00:27:16,490
ecosystem choices is that there's

00:27:14,360 --> 00:27:18,860
multiple choices available using Fowler

00:27:16,490 --> 00:27:23,090
web pack to parse graph QL fragments

00:27:18,860 --> 00:27:25,250
into their ast representation the

00:27:23,090 --> 00:27:27,950
flipside is that Apollo does not enforce

00:27:25,250 --> 00:27:30,289
colocation of fragments and does not

00:27:27,950 --> 00:27:32,570
perform data masking on notes like relay

00:27:30,289 --> 00:27:34,460
does and this is one area where

00:27:32,570 --> 00:27:37,520
knowledge of relay really helps because

00:27:34,460 --> 00:27:39,080
colocation is a great practice for

00:27:37,520 --> 00:27:42,490
ensuring that you are only requesting

00:27:39,080 --> 00:27:42,490
the data you need for a component

00:27:42,820 --> 00:27:48,500
fragments and Apollo can be placed as

00:27:45,679 --> 00:27:51,320
static members on components but this is

00:27:48,500 --> 00:27:52,490
not required it is a good convention so

00:27:51,320 --> 00:27:57,700
that your fragments can be easily

00:27:52,490 --> 00:27:57,700
imported into other components like so

00:27:58,299 --> 00:28:04,760
but there's also this option of using

00:28:00,740 --> 00:28:06,530
graph QL tag flush loader that's where

00:28:04,760 --> 00:28:08,409
you can specify your graph QL free

00:28:06,530 --> 00:28:12,500
queries and fragments in separate files

00:28:08,409 --> 00:28:14,480
which is nice and very tempting it is

00:28:12,500 --> 00:28:16,850
also possible that there is too much

00:28:14,480 --> 00:28:18,590
flexibility allowed by apollo here so

00:28:16,850 --> 00:28:21,020
it's really up to your team to enforce

00:28:18,590 --> 00:28:26,900
your relevant graph QL fragment

00:28:21,020 --> 00:28:29,120
standards on your projects Apollo does

00:28:26,900 --> 00:28:32,720
not require any special container logic

00:28:29,120 --> 00:28:35,150
before exposing these fetching api's you

00:28:32,720 --> 00:28:39,380
always have access to refetch in fact

00:28:35,150 --> 00:28:40,820
more on the data prop so I'm going to

00:28:39,380 --> 00:28:42,740
skip describing mutations in Apollo

00:28:40,820 --> 00:28:44,900
they're an advanced topic and

00:28:42,740 --> 00:28:48,340
documentation on apollo site is more

00:28:44,900 --> 00:28:50,809
exhaustive than it is elsewhere but

00:28:48,340 --> 00:28:52,600
what's also important for us around

00:28:50,809 --> 00:28:54,880
documentation is that when we

00:28:52,600 --> 00:28:56,680
bored new members on our team we want to

00:28:54,880 --> 00:28:58,630
be able to point at documentation for a

00:28:56,680 --> 00:29:01,150
lot of these things one of the biggest

00:28:58,630 --> 00:29:04,090
fears is that a small number of people

00:29:01,150 --> 00:29:05,350
become experts and then somebody leaves

00:29:04,090 --> 00:29:07,690
the company somebody goes to a different

00:29:05,350 --> 00:29:09,010
team and you have this small cadre of

00:29:07,690 --> 00:29:11,800
people that held all the knowledge in

00:29:09,010 --> 00:29:15,700
their heads so when we picked these

00:29:11,800 --> 00:29:17,020
frameworks it's nice if with just

00:29:15,700 --> 00:29:18,790
pointing somebody at some documentation

00:29:17,020 --> 00:29:21,580
that says please read this article about

00:29:18,790 --> 00:29:22,930
Apollo or relay go here to understand

00:29:21,580 --> 00:29:28,180
how these things work or even providing

00:29:22,930 --> 00:29:30,430
tutorials so another problem you know

00:29:28,180 --> 00:29:32,770
once we've picked our framework and we

00:29:30,430 --> 00:29:35,020
figured out the economics of composing

00:29:32,770 --> 00:29:37,330
queries and implementing features like

00:29:35,020 --> 00:29:39,520
refetch and pagination we're still left

00:29:37,330 --> 00:29:45,630
with some challenges around data and

00:29:39,520 --> 00:29:48,970
react I recently wrote a manifesto about

00:29:45,630 --> 00:29:52,870
how frustrating dealing with HTML can be

00:29:48,970 --> 00:29:55,930
in the reacting graph QL universe so for

00:29:52,870 --> 00:29:58,870
organizations that have many years worth

00:29:55,930 --> 00:30:01,450
of content in their CMS it's often the

00:29:58,870 --> 00:30:03,310
case that the data for whatever reason

00:30:01,450 --> 00:30:06,250
and I'm not going to name names this is

00:30:03,310 --> 00:30:13,630
a safe space but that data will have a

00:30:06,250 --> 00:30:15,540
lot of HTML on it so freeform HTML can

00:30:13,630 --> 00:30:18,310
appear in many forms permutations

00:30:15,540 --> 00:30:22,450
varying degrees of complexity and safety

00:30:18,310 --> 00:30:25,120
and some freeform HTML is harmless you

00:30:22,450 --> 00:30:27,090
know other bits simply won't survive the

00:30:25,120 --> 00:30:30,430
trek from database to reactor renderer

00:30:27,090 --> 00:30:35,260
and some free form HTML contains

00:30:30,430 --> 00:30:37,750
JavaScript and some free form HTML was

00:30:35,260 --> 00:30:40,000
composed using JavaScript for a certain

00:30:37,750 --> 00:30:43,950
target platform and so without the

00:30:40,000 --> 00:30:43,950
platform it's actually missing context

00:30:44,880 --> 00:30:52,780
so one way to deal with HTML is to parse

00:30:48,610 --> 00:30:54,190
it into structured data and the New York

00:30:52,780 --> 00:30:57,610
Times actually implements structured

00:30:54,190 --> 00:30:59,680
data as a pair of types and basically

00:30:57,610 --> 00:31:02,500
what happens is that our editor in our

00:30:59,680 --> 00:31:04,570
main CMS which is called scoop we have a

00:31:02,500 --> 00:31:05,770
new WYSIWYG interface to where you can

00:31:04,570 --> 00:31:08,170
enter content and then

00:31:05,770 --> 00:31:10,180
his tools around adding an image or

00:31:08,170 --> 00:31:13,870
maybe adding a tweet and actually

00:31:10,180 --> 00:31:15,910
getting a JSON representation of this so

00:31:13,870 --> 00:31:18,220
we have two types blocking in and in

00:31:15,910 --> 00:31:20,500
line using inline Union and they're both

00:31:18,220 --> 00:31:24,790
heterogeneous and represent and other

00:31:20,500 --> 00:31:27,430
types this allows us to render HTML into

00:31:24,790 --> 00:31:29,830
proper react components but

00:31:27,430 --> 00:31:32,470
heterogeneous types can create extremely

00:31:29,830 --> 00:31:33,970
complex graph QL fragments and they

00:31:32,470 --> 00:31:36,160
create can create very large career

00:31:33,970 --> 00:31:38,050
queries when composing them you know we

00:31:36,160 --> 00:31:41,800
have some queries that can get as big as

00:31:38,050 --> 00:31:44,710
like 15k 20k and this is why persistent

00:31:41,800 --> 00:31:46,720
queries where we only send the ID of the

00:31:44,710 --> 00:31:48,310
query instead of the whole body is

00:31:46,720 --> 00:31:52,740
essential for our long-term data

00:31:48,310 --> 00:31:56,740
strategy the depth of any particular

00:31:52,740 --> 00:31:59,380
blob of HTML nodes it's mostly unknown

00:31:56,740 --> 00:32:02,710
before you parse it so creating proper

00:31:59,380 --> 00:32:04,120
fragments to query all available data

00:32:02,710 --> 00:32:07,120
can actually be complicated because

00:32:04,120 --> 00:32:10,090
recursion of unknown or infinite death

00:32:07,120 --> 00:32:12,190
depth is actually an unsolved problem I

00:32:10,090 --> 00:32:14,530
think in graph QL and somebody can

00:32:12,190 --> 00:32:19,900
correct me if that is not so but it

00:32:14,530 --> 00:32:23,200
appears to be the case so scripts in

00:32:19,900 --> 00:32:24,430
HTML which are not something we like but

00:32:23,200 --> 00:32:28,180
something we have to deal with in some

00:32:24,430 --> 00:32:31,060
form or fashion because a big portion of

00:32:28,180 --> 00:32:31,930
our New York Times freeform HTML is

00:32:31,060 --> 00:32:35,530
actually some of our most popular

00:32:31,930 --> 00:32:37,270
content so the New York Times it's

00:32:35,530 --> 00:32:40,140
obviously known for its compelling

00:32:37,270 --> 00:32:42,820
journalism and it's often lauded for its

00:32:40,140 --> 00:32:44,140
interactive and visual storytelling and

00:32:42,820 --> 00:32:46,990
so many of our assets

00:32:44,140 --> 00:32:50,020
you know like charts graphs and embedded

00:32:46,990 --> 00:32:52,390
modules are actually built to render on

00:32:50,020 --> 00:32:54,040
the new platforms the old platforms in

00:32:52,390 --> 00:32:57,010
web views kind of anywhere they're

00:32:54,040 --> 00:32:59,710
supposed to be portable and so in our

00:32:57,010 --> 00:33:02,260
move to react one of the most

00:32:59,710 --> 00:33:04,450
challenging tasks we've had is to figure

00:33:02,260 --> 00:33:06,820
out how to take these generic modules

00:33:04,450 --> 00:33:08,830
and load them using react on the server

00:33:06,820 --> 00:33:11,920
and client without completely destroying

00:33:08,830 --> 00:33:13,390
them in the process and these things do

00:33:11,920 --> 00:33:18,160
not always play well with react and

00:33:13,390 --> 00:33:19,539
isomorphic rendering and sometimes it's

00:33:18,160 --> 00:33:20,859
not as simple

00:33:19,539 --> 00:33:23,619
is doing what we see here and I think

00:33:20,859 --> 00:33:25,869
we've all done this any number of times

00:33:23,619 --> 00:33:28,479
it's where we get HTML and we think

00:33:25,869 --> 00:33:30,369
dangerous who said any HTML will do the

00:33:28,479 --> 00:33:32,590
trick your JavaScript will not execute

00:33:30,369 --> 00:33:34,899
and a lot of times what actually needs

00:33:32,590 --> 00:33:37,210
to happen is that that string needs to

00:33:34,899 --> 00:33:38,559
be parsed and if you don't have

00:33:37,210 --> 00:33:40,869
structured data that string needs to be

00:33:38,559 --> 00:33:42,940
parsed the scripts need to be removed

00:33:40,869 --> 00:33:45,690
and you actually need a mechanism for

00:33:42,940 --> 00:33:48,039
loading those scripts asynchronously and

00:33:45,690 --> 00:33:49,749
then kind of setting state to re-render

00:33:48,039 --> 00:33:52,559
your content once the scripts are

00:33:49,749 --> 00:33:58,359
available it's gnarly but we're doing it

00:33:52,559 --> 00:34:01,479
in react 16 there is some light here

00:33:58,359 --> 00:34:03,940
because there's now a react Dom hydrate

00:34:01,479 --> 00:34:06,099
and so when you do server rendering and

00:34:03,940 --> 00:34:08,950
you use hydrate on the client it'll

00:34:06,099 --> 00:34:10,210
actually reuse the existing nodes you

00:34:08,950 --> 00:34:12,280
have on the page without blowing them

00:34:10,210 --> 00:34:15,010
away react Dom render does the

00:34:12,280 --> 00:34:16,899
equivalent of blanking out your target

00:34:15,010 --> 00:34:21,149
node before it renders it again with a

00:34:16,899 --> 00:34:27,520
client so we've raised this issue with

00:34:21,149 --> 00:34:28,629
the react team yes so this has been our

00:34:27,520 --> 00:34:31,869
biggest headache probably for most of

00:34:28,629 --> 00:34:32,649
the year and since our old platforms are

00:34:31,869 --> 00:34:34,089
still running

00:34:32,649 --> 00:34:35,740
you know these embedded Interactive's

00:34:34,089 --> 00:34:38,679
work everywhere except our newest

00:34:35,740 --> 00:34:42,490
platform a lot of these we've actually

00:34:38,679 --> 00:34:45,879
opted to load in these legacy modules we

00:34:42,490 --> 00:34:48,369
call them using iframes and the iframe

00:34:45,879 --> 00:34:53,200
itself is like I mentioned some of this

00:34:48,369 --> 00:34:55,000
content can actually contain JavaScript

00:34:53,200 --> 00:34:58,299
that expects to be in a certain runtime

00:34:55,000 --> 00:35:00,940
in the MIT 5 environment I described you

00:34:58,299 --> 00:35:02,980
know we had required a s config at the

00:35:00,940 --> 00:35:04,480
top of the top of the head you know we

00:35:02,980 --> 00:35:06,780
loaded require and so some of these

00:35:04,480 --> 00:35:09,339
embedded modules just call require

00:35:06,780 --> 00:35:11,530
assuming that's already there like what

00:35:09,339 --> 00:35:13,900
do you do when you're in react now and

00:35:11,530 --> 00:35:16,599
we can't ditch all this content I mean

00:35:13,900 --> 00:35:19,000
there's thousands of these things so

00:35:16,599 --> 00:35:21,339
we've decided an iframe is kind of the

00:35:19,000 --> 00:35:23,470
best place we have a route that loads

00:35:21,339 --> 00:35:26,109
and it's an Express route that looks

00:35:23,470 --> 00:35:29,200
very similar to how an YT 5 looked just

00:35:26,109 --> 00:35:31,750
for these embedded modules but when we

00:35:29,200 --> 00:35:32,829
do that we're essentially reverting our

00:35:31,750 --> 00:35:34,959
UI for the

00:35:32,829 --> 00:35:37,569
ethics team you know to the days of

00:35:34,959 --> 00:35:40,180
Flash and Java applets you know we give

00:35:37,569 --> 00:35:44,170
them a rectangle and say this is all you

00:35:40,180 --> 00:35:48,549
get which they're not thrilled with so

00:35:44,170 --> 00:35:51,640
luckily sub from the react team exposed

00:35:48,549 --> 00:35:55,299
a dirty solution here for us apparently

00:35:51,640 --> 00:35:57,519
if you call danger to set any HTML on

00:35:55,299 --> 00:35:59,680
the server and then call it with

00:35:57,519 --> 00:36:00,849
anything different on the client it'll

00:35:59,680 --> 00:36:04,930
leave alone what you had in the server

00:36:00,849 --> 00:36:09,959
so we're gonna try that I don't know

00:36:04,930 --> 00:36:09,959
that it will work I will report back so

00:36:11,009 --> 00:36:16,150
you know we're we're in the middle of

00:36:13,450 --> 00:36:19,719
this hailstorm of repot forming like

00:36:16,150 --> 00:36:21,339
we're really nowhere yet but what's next

00:36:19,719 --> 00:36:24,789
for us we're gonna try to figure out

00:36:21,339 --> 00:36:28,269
react 16 and one of the problems there

00:36:24,789 --> 00:36:31,029
is that the ecosystem are all of our

00:36:28,269 --> 00:36:32,829
dependencies ready for react 16 and the

00:36:31,029 --> 00:36:34,989
answer for most people's probably no and

00:36:32,829 --> 00:36:36,849
for us the answer's no I mean there's a

00:36:34,989 --> 00:36:42,400
handful of libraries that until they

00:36:36,849 --> 00:36:44,650
update we can't even really try that's

00:36:42,400 --> 00:36:46,029
just that's that's really the blunt

00:36:44,650 --> 00:36:47,829
truth I'd like to know two ecosystem

00:36:46,029 --> 00:36:50,160
it's great for a million reasons like

00:36:47,829 --> 00:36:51,849
that so that can be a frustrating part

00:36:50,160 --> 00:36:55,739
we're gonna continue following

00:36:51,849 --> 00:36:58,719
developments with relay and Apollo and

00:36:55,739 --> 00:37:01,420
you know maybe we'll help push the relay

00:36:58,719 --> 00:37:02,859
ecosystem with all these pieces we need

00:37:01,420 --> 00:37:04,569
for server-side rendering and all that

00:37:02,859 --> 00:37:06,910
but it becomes one of those things where

00:37:04,569 --> 00:37:08,559
if we do it the we met we kind of feel

00:37:06,910 --> 00:37:10,449
like we have to maintain it so we've

00:37:08,559 --> 00:37:14,049
really nice if somebody else did it for

00:37:10,449 --> 00:37:15,819
us obviously you know in lieu of that

00:37:14,049 --> 00:37:18,640
you know we'll see what we can do I have

00:37:15,819 --> 00:37:20,019
a lot of things I have this is not me

00:37:18,640 --> 00:37:24,039
announcing this but I have a kind of

00:37:20,019 --> 00:37:25,449
have this idea lab called graph QL dot

00:37:24,039 --> 00:37:27,849
WordPress where I'm working on a bunch

00:37:25,449 --> 00:37:31,469
of projects to where I can open source

00:37:27,849 --> 00:37:33,910
kind of a solution for building a

00:37:31,469 --> 00:37:35,349
wordpress theme on relay to where

00:37:33,910 --> 00:37:36,729
everything's kind of there for you to

00:37:35,349 --> 00:37:37,809
get started and you can build on top of

00:37:36,729 --> 00:37:41,469
it

00:37:37,809 --> 00:37:43,509
same with react native so that's mostly

00:37:41,469 --> 00:37:45,819
for me so I can do projects for somebody

00:37:43,509 --> 00:37:46,690
and doesn't take much time but I want to

00:37:45,819 --> 00:37:48,069
make it where it's easy to

00:37:46,690 --> 00:37:49,930
that stuff and I also really want to

00:37:48,069 --> 00:37:52,690
help solve some of these problems with

00:37:49,930 --> 00:37:54,339
the relay ecosystem we're gonna continue

00:37:52,690 --> 00:37:57,339
evolving our schema we're obviously

00:37:54,339 --> 00:37:59,710
looking at is it worth it for us to try

00:37:57,339 --> 00:38:01,660
schema stitching and I actually sent our

00:37:59,710 --> 00:38:03,790
team a picture of the Gramps slide from

00:38:01,660 --> 00:38:05,410
earlier from IBM and some of the data

00:38:03,790 --> 00:38:08,430
guys were like this is awesome

00:38:05,410 --> 00:38:12,220
so we'll see what happens with that and

00:38:08,430 --> 00:38:15,280
you know this ecosystem moves so fast

00:38:12,220 --> 00:38:17,920
CSS nsj was he wasn't even like on our

00:38:15,280 --> 00:38:19,240
radar a year and a half ago and so we're

00:38:17,920 --> 00:38:21,339
already like seriously looking at the

00:38:19,240 --> 00:38:24,849
emotion library which launched in July

00:38:21,339 --> 00:38:26,410
you know I mean it's really insane but I

00:38:24,849 --> 00:38:27,819
think we're all trying to solve a lot of

00:38:26,410 --> 00:38:30,010
these problems about what does it mean

00:38:27,819 --> 00:38:33,430
to be this enterprise level of react up

00:38:30,010 --> 00:38:37,030
and how do we optimize about getting rid

00:38:33,430 --> 00:38:37,930
of dead CSS and you know isolating our

00:38:37,030 --> 00:38:41,829
components to where they're really

00:38:37,930 --> 00:38:44,170
atomic units and all that so the last

00:38:41,829 --> 00:38:48,849
little bit here I will say is we're

00:38:44,170 --> 00:38:50,710
hiring all the jobs are at the top I'll

00:38:48,849 --> 00:38:53,740
publish these slides on Twitter as soon

00:38:50,710 --> 00:38:56,170
as I get down basically but um to

00:38:53,740 --> 00:38:57,640
feature teams I know for sure have the

00:38:56,170 --> 00:38:58,930
stuff I'm talking about if you if you're

00:38:57,640 --> 00:39:00,940
interested in that want to help us solve

00:38:58,930 --> 00:39:03,849
those problems we know we have a home

00:39:00,940 --> 00:39:05,619
screen team we have a story team our

00:39:03,849 --> 00:39:07,480
data team I think is in some form of

00:39:05,619 --> 00:39:10,780
hiring and we have a couple of those

00:39:07,480 --> 00:39:12,040
members here Jennifer and Jeff will try

00:39:10,780 --> 00:39:14,800
to point them out and as we're all

00:39:12,040 --> 00:39:17,140
talking but talk to them about graph QL

00:39:14,800 --> 00:39:22,390
and Scala and they're using the finagle

00:39:17,140 --> 00:39:24,030
project from Twitter and I think that's

00:39:22,390 --> 00:39:31,809
it so thank you very much

00:39:24,030 --> 00:39:31,809

YouTube URL: https://www.youtube.com/watch?v=W-u-vZUSnIk


