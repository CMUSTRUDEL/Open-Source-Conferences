Title: Ryan Chenkie - Handling Authentication and Authorization in GraphQL
Publication date: 2017-11-08
Playlist: GraphQL Summit 2017
Description: 
	Ryan Chenkie, Developer Advocate at Auth0, gave this talk at GraphQL Summit 2017. Learn more: summit.graphql.com

Auth for GraphQL can be tricky. It's easy to lock down the entire endpoint but this is often too much. How do we get more specific? Let's talk about the available options and best practices for auth in GraphQL. You'll come away knowing everything you need to get a working auth solution in place.
Captions: 
	00:00:03,319 --> 00:00:08,400
all right thank you everybody welcome

00:00:05,609 --> 00:00:10,260
back from lunch so my name is Ryan and I

00:00:08,400 --> 00:00:13,260
work at a company called auth0

00:00:10,260 --> 00:00:15,379
likely mentioned and we aim to make it

00:00:13,260 --> 00:00:17,490
really simple for you to solve the

00:00:15,379 --> 00:00:20,130
authentication authorization and

00:00:17,490 --> 00:00:21,450
identity piece in your app and today I

00:00:20,130 --> 00:00:23,610
want to talk to you a little bit about

00:00:21,450 --> 00:00:26,030
how we can maybe think about handling

00:00:23,610 --> 00:00:28,590
auth kind of authorization

00:00:26,030 --> 00:00:33,090
authentication in general within graph

00:00:28,590 --> 00:00:34,890
QL a topic that is widely requested but

00:00:33,090 --> 00:00:37,499
one that there's a lot of different

00:00:34,890 --> 00:00:38,460
options about and a lot of various caste

00:00:37,499 --> 00:00:40,350
you could take I'd like to give you a

00:00:38,460 --> 00:00:42,140
little bit of a glimpse into what you

00:00:40,350 --> 00:00:44,219
can do or what some of those options are

00:00:42,140 --> 00:00:47,309
so like I mentioned my name is Ryan

00:00:44,219 --> 00:00:49,260
I'm Google sorry go Google developer

00:00:47,309 --> 00:00:52,109
expert but also a developer advocate at

00:00:49,260 --> 00:00:55,379
all zero I also teach a lot so I teach

00:00:52,109 --> 00:00:57,899
at angular Cassio for better or worse

00:00:55,379 --> 00:00:59,460
I'm still doing a lot of angular I know

00:00:57,899 --> 00:01:01,769
this is kind of a react crowd this week

00:00:59,460 --> 00:01:04,350
but I'm still doing a lot of angular and

00:01:01,769 --> 00:01:07,500
I also am starting off with my pal Lukas

00:01:04,350 --> 00:01:10,050
ruble key graph QL workshops calm so we

00:01:07,500 --> 00:01:12,300
are gonna aim to take teams from kind of

00:01:10,050 --> 00:01:14,010
beginner level graph QL through to

00:01:12,300 --> 00:01:16,350
production-ready and that's going to

00:01:14,010 --> 00:01:19,140
cover kind of the basics all the way

00:01:16,350 --> 00:01:21,210
through to some advanced topics so at

00:01:19,140 --> 00:01:23,910
all cereal we are really jazzed about

00:01:21,210 --> 00:01:25,590
graph QL I don't need to kind of

00:01:23,910 --> 00:01:28,170
convince you about the benefits of it's

00:01:25,590 --> 00:01:29,490
AI everybody here it seems knows why

00:01:28,170 --> 00:01:31,380
it's beneficial to use in your

00:01:29,490 --> 00:01:33,150
application and we've seen those

00:01:31,380 --> 00:01:36,900
benefits in this tool that we've got

00:01:33,150 --> 00:01:38,310
in-house this tool called Phoenix so it

00:01:36,900 --> 00:01:40,860
all 0 we're growing really quickly

00:01:38,310 --> 00:01:43,350
there's a lot of new employees week

00:01:40,860 --> 00:01:45,780
after week who are joining up and what

00:01:43,350 --> 00:01:47,820
we found is that it takes a lot of

00:01:45,780 --> 00:01:49,890
effort for these new employees to get

00:01:47,820 --> 00:01:52,860
provisioned with all the resources they

00:01:49,890 --> 00:01:55,080
need to do their job so a new employee

00:01:52,860 --> 00:01:59,490
might need access to our github

00:01:55,080 --> 00:02:01,980
organization or our NPM org and instead

00:01:59,490 --> 00:02:03,720
of going and trying to find the person

00:02:01,980 --> 00:02:06,090
who's got credentials to give somebody

00:02:03,720 --> 00:02:08,310
access to these things we said you know

00:02:06,090 --> 00:02:09,899
what we need to make this simpler so

00:02:08,310 --> 00:02:12,270
what we did is we came up with this

00:02:09,899 --> 00:02:14,760
internal tool called Phoenix which

00:02:12,270 --> 00:02:15,720
automates this all and so basically what

00:02:14,760 --> 00:02:18,360
happens is you go into

00:02:15,720 --> 00:02:20,580
lack and you say hey Phoenix I need to

00:02:18,360 --> 00:02:23,070
get access to whatever so in this case

00:02:20,580 --> 00:02:25,320
this is this is me getting access to our

00:02:23,070 --> 00:02:28,560
NPM work and I said I need to get access

00:02:25,320 --> 00:02:30,840
as an administrator there and so what

00:02:28,560 --> 00:02:33,210
Phoenix does is it goes and it pings

00:02:30,840 --> 00:02:34,800
your manager and it tells them that you

00:02:33,210 --> 00:02:36,750
want to get access and then your manager

00:02:34,800 --> 00:02:39,030
is able to provision you automatically

00:02:36,750 --> 00:02:40,830
so this really helps to smooth

00:02:39,030 --> 00:02:44,580
everything out it makes it much simpler

00:02:40,830 --> 00:02:45,780
to do provisioning now when we were

00:02:44,580 --> 00:02:48,480
thinking about provisioning we're

00:02:45,780 --> 00:02:50,970
thinking you know provisioning is really

00:02:48,480 --> 00:02:55,470
at the core of it all about permissions

00:02:50,970 --> 00:02:57,959
so if you are a new employee you need to

00:02:55,470 --> 00:03:01,410
first have some kind of permission to be

00:02:57,959 --> 00:03:03,810
able to ask for permissions to something

00:03:01,410 --> 00:03:05,430
else so you know maybe you're a

00:03:03,810 --> 00:03:06,930
single-channel guest in slack who

00:03:05,430 --> 00:03:08,640
somehow got wind that there's this

00:03:06,930 --> 00:03:10,380
Phoenix thing we need to make sure that

00:03:08,640 --> 00:03:12,270
you aren't that single-channel guest

00:03:10,380 --> 00:03:14,970
that you actually have authorization to

00:03:12,270 --> 00:03:17,100
ask for something and then conversely if

00:03:14,970 --> 00:03:19,020
you're a manager you need to have the

00:03:17,100 --> 00:03:21,870
appropriate permissions level to grant

00:03:19,020 --> 00:03:23,489
those provisioning to grant that

00:03:21,870 --> 00:03:26,100
provisioning to whoever's asking for it

00:03:23,489 --> 00:03:27,900
so at the core of it this provisioning

00:03:26,100 --> 00:03:32,130
tool that we've created has a lot to do

00:03:27,900 --> 00:03:34,500
with permissions so we said okay we're

00:03:32,130 --> 00:03:37,140
gonna go to some graph QL and we abdomen

00:03:34,500 --> 00:03:38,370
graph QL it's been excellent but we need

00:03:37,140 --> 00:03:42,239
to think about authentication and

00:03:38,370 --> 00:03:44,250
authorization in graph QL so okay we're

00:03:42,239 --> 00:03:47,400
you know an authentication company

00:03:44,250 --> 00:03:49,650
surely we can figure this out so we did

00:03:47,400 --> 00:03:55,019
is you know any subject matter expert

00:03:49,650 --> 00:03:58,320
does we went to Stack Overflow and what

00:03:55,019 --> 00:04:00,090
we saw at Stack Overflow was something

00:03:58,320 --> 00:04:03,269
that you know we weren't too excited

00:04:00,090 --> 00:04:04,890
about we saw something like this we you

00:04:03,269 --> 00:04:07,920
know how do you do authentication and

00:04:04,890 --> 00:04:09,690
authorization in graph QL and this is

00:04:07,920 --> 00:04:12,690
fake by the way I just made that up

00:04:09,690 --> 00:04:14,880
but but what you'll find when you ask

00:04:12,690 --> 00:04:16,470
around the community is you know you

00:04:14,880 --> 00:04:19,200
handle it any way you like

00:04:16,470 --> 00:04:20,640
however you're you doing auth in your

00:04:19,200 --> 00:04:23,669
typical stack you know just try to

00:04:20,640 --> 00:04:25,280
translate that to graph QL but this

00:04:23,669 --> 00:04:28,470
makes a lot of people feel little bits

00:04:25,280 --> 00:04:29,430
like this you know they they say okay

00:04:28,470 --> 00:04:30,990
well that's not really the answer

00:04:29,430 --> 00:04:33,450
that I'm looking for I really want to

00:04:30,990 --> 00:04:35,070
know how to do this the problem is that

00:04:33,450 --> 00:04:36,780
graph QL doesn't have an opinion really

00:04:35,070 --> 00:04:40,140
about authentication it doesn't

00:04:36,780 --> 00:04:41,550
prescribe any one way to do it and you

00:04:40,140 --> 00:04:44,040
know the day you know that's not

00:04:41,550 --> 00:04:47,250
terribly helpful but it's it's a reality

00:04:44,040 --> 00:04:48,660
of the spec the spec is you know it

00:04:47,250 --> 00:04:49,770
doesn't make any prescription on that

00:04:48,660 --> 00:04:51,810
because it leaves it up to you and

00:04:49,770 --> 00:04:53,070
that's a good thing but at the same time

00:04:51,810 --> 00:04:55,980
we want to know how to figure this out

00:04:53,070 --> 00:04:58,380
so what I'd like to do today is look at

00:04:55,980 --> 00:05:01,110
two ways that we might think about this

00:04:58,380 --> 00:05:04,710
two things that we can do to kind of get

00:05:01,110 --> 00:05:07,260
going with off in our graph QL api's so

00:05:04,710 --> 00:05:09,330
the first one that we'll look at is how

00:05:07,260 --> 00:05:11,090
we can maybe wrap our resolvers with

00:05:09,330 --> 00:05:14,460
something that is smart about

00:05:11,090 --> 00:05:16,440
authentication the second one is how we

00:05:14,460 --> 00:05:18,420
would leverage custom directives so

00:05:16,440 --> 00:05:20,460
there's a very powerful thing within

00:05:18,420 --> 00:05:23,580
graph QL custom directives we've seen a

00:05:20,460 --> 00:05:25,320
bit about that during the summit we'll

00:05:23,580 --> 00:05:29,310
take a look at how we might use those to

00:05:25,320 --> 00:05:31,440
to benefit ourselves at our API so to

00:05:29,310 --> 00:05:33,720
think about this let's let's look at

00:05:31,440 --> 00:05:36,810
what we kind of need to be mindful of

00:05:33,720 --> 00:05:39,510
when we're thinking about API off so API

00:05:36,810 --> 00:05:41,520
authentication requires a lot of things

00:05:39,510 --> 00:05:43,500
but it requires us to think about a few

00:05:41,520 --> 00:05:46,050
things and these are a few of those

00:05:43,500 --> 00:05:47,820
things so first of all is the data

00:05:46,050 --> 00:05:49,350
that's being requested is it private or

00:05:47,820 --> 00:05:51,600
is it public in the first place

00:05:49,350 --> 00:05:53,850
should it be reserved for only those

00:05:51,600 --> 00:05:56,010
users who have proven that they are who

00:05:53,850 --> 00:05:58,410
they say they are and who have access to

00:05:56,010 --> 00:06:00,900
certain things or is it public data is a

00:05:58,410 --> 00:06:03,870
wide open to the Internet we also need

00:06:00,900 --> 00:06:06,120
to ask ourselves does the request that's

00:06:03,870 --> 00:06:07,620
coming in contain authentication

00:06:06,120 --> 00:06:09,630
information in the first place

00:06:07,620 --> 00:06:12,840
does it keep it contains some piece of

00:06:09,630 --> 00:06:15,480
info that tells our API that the user is

00:06:12,840 --> 00:06:17,580
authenticated or not and then finally is

00:06:15,480 --> 00:06:21,960
that information if it does exist is it

00:06:17,580 --> 00:06:24,060
valid so we could spend some time

00:06:21,960 --> 00:06:26,730
talking about all the ways that you

00:06:24,060 --> 00:06:28,530
might get a user to prove that they are

00:06:26,730 --> 00:06:30,210
who they say they are we could talk

00:06:28,530 --> 00:06:32,730
about OAuth we could talk about best

00:06:30,210 --> 00:06:34,440
practices for username password storage

00:06:32,730 --> 00:06:36,480
that kind of thing but that's a whole

00:06:34,440 --> 00:06:37,980
other topic that's it's a very broad

00:06:36,480 --> 00:06:40,380
topic I'd be happy to chat with you

00:06:37,980 --> 00:06:42,620
after about those things if you like but

00:06:40,380 --> 00:06:45,650
for now we're just going to stick with

00:06:42,620 --> 00:06:47,690
kind of the the assumption that we've

00:06:45,650 --> 00:06:50,030
already got some kind of authentication

00:06:47,690 --> 00:06:51,949
mechanism in place and at all zero we

00:06:50,030 --> 00:06:53,780
really like JSON web tokens a show of

00:06:51,949 --> 00:06:55,490
hands anybody using JSON web tokens in

00:06:53,780 --> 00:06:57,919
their applications okay that's great

00:06:55,490 --> 00:06:59,990
that's quite a few of us we really like

00:06:57,919 --> 00:07:01,520
this when you authenticate with osteo

00:06:59,990 --> 00:07:03,199
you're gonna get a JSON web token back

00:07:01,520 --> 00:07:07,010
and then you can use that to protect

00:07:03,199 --> 00:07:08,389
your API etc so if you don't know a

00:07:07,010 --> 00:07:09,919
whole lot of budgets and web tokens yet

00:07:08,389 --> 00:07:14,510
feel free to have it look at this site

00:07:09,919 --> 00:07:17,360
JWT IO you can find some info there all

00:07:14,510 --> 00:07:18,830
right so if we take a look back at how

00:07:17,360 --> 00:07:21,650
we might do authentication with a rest

00:07:18,830 --> 00:07:23,060
we can see something like this so we

00:07:21,650 --> 00:07:24,979
might have some kind of middleware

00:07:23,060 --> 00:07:27,110
pattern so if we're using node we might

00:07:24,979 --> 00:07:29,389
set up a middleware that says ok let's

00:07:27,110 --> 00:07:32,900
take the requests coming in let's run

00:07:29,389 --> 00:07:34,610
some functions you see if the user has a

00:07:32,900 --> 00:07:37,130
piece of authentication information in

00:07:34,610 --> 00:07:39,080
this case maybe the JSON web token

00:07:37,130 --> 00:07:41,030
existing on the authorization header of

00:07:39,080 --> 00:07:42,139
the request and if that's all valid

00:07:41,030 --> 00:07:43,639
let's send them through to the next

00:07:42,139 --> 00:07:46,669
function but if not let's send back a

00:07:43,639 --> 00:07:48,410
401 and basically kick them out and so

00:07:46,669 --> 00:07:50,090
the great thing about this when we're

00:07:48,410 --> 00:07:52,910
doing something in rest is then we can

00:07:50,090 --> 00:07:54,410
just apply this to any of the routes and

00:07:52,910 --> 00:07:56,930
if the endpoints that we want to protect

00:07:54,410 --> 00:07:58,370
right so if we have private data routes

00:07:56,930 --> 00:08:00,320
so we can just stick that middleware on

00:07:58,370 --> 00:08:01,970
if we have a group of them we can stick

00:08:00,320 --> 00:08:03,919
it on there and we can be selective

00:08:01,970 --> 00:08:06,979
about which endpoints should be

00:08:03,919 --> 00:08:08,720
protected so when we start thinking

00:08:06,979 --> 00:08:10,550
about graph QL we might be tempted to

00:08:08,720 --> 00:08:11,870
say okay well let's maybe take that

00:08:10,550 --> 00:08:15,229
approach let's try to do something

00:08:11,870 --> 00:08:17,000
similar the problem is we don't want

00:08:15,229 --> 00:08:18,650
something like this we don't want to

00:08:17,000 --> 00:08:21,020
have our single graph QL endpoints and

00:08:18,650 --> 00:08:22,370
then apply that middleware because we're

00:08:21,020 --> 00:08:23,810
going to have this kind of

00:08:22,370 --> 00:08:26,960
all-or-nothing

00:08:23,810 --> 00:08:28,910
scenario in this case so instead we want

00:08:26,960 --> 00:08:30,800
to have something that isn't a catch-all

00:08:28,910 --> 00:08:32,930
solution isn't going to be all or

00:08:30,800 --> 00:08:35,089
nothing we want something that gives us

00:08:32,930 --> 00:08:38,360
information about that authenticated

00:08:35,089 --> 00:08:40,339
user so a piece of data about who it is

00:08:38,360 --> 00:08:42,140
it's making the request and from a JSON

00:08:40,339 --> 00:08:44,959
web token this can come from the payload

00:08:42,140 --> 00:08:46,339
of the token and we want also some way

00:08:44,959 --> 00:08:49,730
to handle authentication errors

00:08:46,339 --> 00:08:52,520
appropriately so as was touched on in a

00:08:49,730 --> 00:08:53,900
previous talk you know you might you

00:08:52,520 --> 00:08:55,790
might have the case where you're you're

00:08:53,900 --> 00:08:58,910
getting back status codes that are only

00:08:55,790 --> 00:09:01,040
- hundreds from your graph QL API even

00:08:58,910 --> 00:09:02,780
if something has gone wrong and quite

00:09:01,040 --> 00:09:04,580
often that's the useful case so that we

00:09:02,780 --> 00:09:06,380
can just you know pick up any errors

00:09:04,580 --> 00:09:09,710
that might exist in our response and use

00:09:06,380 --> 00:09:12,470
those but not necessarily rely on 401 or

00:09:09,710 --> 00:09:15,740
other 400 series series errors to tell

00:09:12,470 --> 00:09:17,600
us that something is gone wrong alright

00:09:15,740 --> 00:09:19,280
so how do we get there well the first

00:09:17,600 --> 00:09:23,240
thing that we can look at again is

00:09:19,280 --> 00:09:24,560
wrapping our resolvers so to get to that

00:09:23,240 --> 00:09:26,390
point let's think about these kind of

00:09:24,560 --> 00:09:28,250
two steps authentication and

00:09:26,390 --> 00:09:30,050
authorization so I think about it like

00:09:28,250 --> 00:09:33,230
this first we have to verify that the

00:09:30,050 --> 00:09:35,510
authentication is good make sure that

00:09:33,230 --> 00:09:36,980
the JSON web token hasn't expired make

00:09:35,510 --> 00:09:38,720
sure that it hasn't been tampered with

00:09:36,980 --> 00:09:41,450
which would then invalidate its

00:09:38,720 --> 00:09:43,220
signature and then we need to use that

00:09:41,450 --> 00:09:47,720
if we know it's valid to make

00:09:43,220 --> 00:09:51,140
authorization decisions in our API so

00:09:47,720 --> 00:09:53,000
let's start out with this so this is not

00:09:51,140 --> 00:09:55,130
the ideal final scenario but we'll start

00:09:53,000 --> 00:09:57,650
here and we'll it will work along so

00:09:55,130 --> 00:09:59,030
we've got this middleware that is kind

00:09:57,650 --> 00:09:59,990
of following a bit of a similar pattern

00:09:59,030 --> 00:10:01,910
to what we had before

00:09:59,990 --> 00:10:05,030
we've got this JSON web token middleware

00:10:01,910 --> 00:10:07,190
which just takes a secret key that we

00:10:05,030 --> 00:10:08,990
provide it checks the JSON web token

00:10:07,190 --> 00:10:10,700
that comes in against that secret key to

00:10:08,990 --> 00:10:14,180
make sure they met everything matches up

00:10:10,700 --> 00:10:15,830
and if that is good then we're going to

00:10:14,180 --> 00:10:19,730
take the payload from the token and

00:10:15,830 --> 00:10:21,860
attach it to the request object to you

00:10:19,730 --> 00:10:23,150
know a user object on there and what's

00:10:21,860 --> 00:10:26,090
going to happen then is that's going to

00:10:23,150 --> 00:10:28,370
become available in our resolver context

00:10:26,090 --> 00:10:29,720
argument and so the thing we're doing

00:10:28,370 --> 00:10:31,940
here is we're just stacking stacking

00:10:29,720 --> 00:10:34,610
these middlewares so or first using that

00:10:31,940 --> 00:10:36,230
jot check middleware that jot middleware

00:10:34,610 --> 00:10:39,650
that you see and then we're going to

00:10:36,230 --> 00:10:43,160
attach information from the token to the

00:10:39,650 --> 00:10:45,650
request afterwards so where this becomes

00:10:43,160 --> 00:10:48,440
useful is that now when we have a query

00:10:45,650 --> 00:10:51,830
or medication or anything we can take

00:10:48,440 --> 00:10:54,140
our context and we can grab that user

00:10:51,830 --> 00:10:55,850
object from it and so then we might

00:10:54,140 --> 00:10:58,760
delegate to some model where we take

00:10:55,850 --> 00:11:01,670
maybe the sub claim so usually sub is

00:10:58,760 --> 00:11:03,590
the user ID in a JSON web token I might

00:11:01,670 --> 00:11:05,840
take that and we might go off and fetch

00:11:03,590 --> 00:11:08,930
something like articles by that user ID

00:11:05,840 --> 00:11:09,360
and so this kind of gets to that whole

00:11:08,930 --> 00:11:12,860
idea

00:11:09,360 --> 00:11:15,839
of the viewer kind of pattern where our

00:11:12,860 --> 00:11:18,390
response is from our API are relative to

00:11:15,839 --> 00:11:20,700
whoever it is that's viewing the API at

00:11:18,390 --> 00:11:23,250
the time and that viewer pattern becomes

00:11:20,700 --> 00:11:25,980
available through taking that user ID

00:11:23,250 --> 00:11:30,089
from the token and then using that to go

00:11:25,980 --> 00:11:31,529
and get the data then we can also add

00:11:30,089 --> 00:11:34,320
other things in where we can do

00:11:31,529 --> 00:11:35,610
authorization checks so there's a few

00:11:34,320 --> 00:11:38,310
different ways to do authorization in

00:11:35,610 --> 00:11:41,760
general you might have a set of roles in

00:11:38,310 --> 00:11:44,250
your your API so something like admins

00:11:41,760 --> 00:11:47,130
or managers or like a user role and

00:11:44,250 --> 00:11:50,269
those might map to certain sets of

00:11:47,130 --> 00:11:52,110
permissions that people might have

00:11:50,269 --> 00:11:53,970
alternatively and what you would get

00:11:52,110 --> 00:11:56,850
with all-zero is this concept of scopes

00:11:53,970 --> 00:11:59,040
and with a scope you can get I would say

00:11:56,850 --> 00:12:00,209
a little bit more fine-grained the way

00:11:59,040 --> 00:12:03,630
that it usually looks is you would have

00:12:00,209 --> 00:12:06,630
something like a verb and a noun so a

00:12:03,630 --> 00:12:09,240
user can read articles or write comments

00:12:06,630 --> 00:12:11,339
or whatever the case might be and then

00:12:09,240 --> 00:12:13,350
this becomes this kind of bag of scopes

00:12:11,339 --> 00:12:16,320
that you can sort of dish out to users

00:12:13,350 --> 00:12:18,899
as needed maybe it's based on a role and

00:12:16,320 --> 00:12:21,990
so at the time that you're that you're

00:12:18,899 --> 00:12:23,940
minting your token you can put any kind

00:12:21,990 --> 00:12:26,730
of scopes into it that you your user

00:12:23,940 --> 00:12:28,019
might need and so then in our resolvers

00:12:26,730 --> 00:12:30,540
what happens is we can go and we can

00:12:28,019 --> 00:12:32,880
check for those scopes so in this case

00:12:30,540 --> 00:12:35,640
if the user has a scope of read articles

00:12:32,880 --> 00:12:37,339
and they're good to go but if not we're

00:12:35,640 --> 00:12:39,449
gonna do something else

00:12:37,339 --> 00:12:41,490
so that's all happening in the resolver

00:12:39,449 --> 00:12:43,290
and the problem I guess with it is it's

00:12:41,490 --> 00:12:46,110
gonna get a bit repetitive eventually

00:12:43,290 --> 00:12:48,329
for doing that for every single resolver

00:12:46,110 --> 00:12:49,560
it's not gonna scale that well so

00:12:48,329 --> 00:12:53,670
instead why don't we take a look at how

00:12:49,560 --> 00:12:55,709
we can wrap our resolvers so here's a

00:12:53,670 --> 00:12:58,620
resolver with a scope check so basically

00:12:55,709 --> 00:13:00,870
we've we're starting to delegate to this

00:12:58,620 --> 00:13:03,209
this other resolver called check scope

00:13:00,870 --> 00:13:05,399
and resolve it's gonna take the scope

00:13:03,209 --> 00:13:07,740
that the user has in their JSON web

00:13:05,399 --> 00:13:09,089
token it's gonna take a set of expected

00:13:07,740 --> 00:13:11,850
scope so what we want them to have

00:13:09,089 --> 00:13:13,380
perhaps an array and then we're going to

00:13:11,850 --> 00:13:16,019
give it some kind of controller some

00:13:13,380 --> 00:13:17,790
kind of other thing that's going to do

00:13:16,019 --> 00:13:20,850
some kind of delegation to our business

00:13:17,790 --> 00:13:23,010
logic and then all it becomes is that

00:13:20,850 --> 00:13:25,110
when we go for articles by author

00:13:23,010 --> 00:13:27,089
we just have to pass in the scope that

00:13:25,110 --> 00:13:29,250
the user has that we know and trust that

00:13:27,089 --> 00:13:31,620
they have we're going to pass in what we

00:13:29,250 --> 00:13:33,120
expect them to have and then finally the

00:13:31,620 --> 00:13:36,029
controller that's going to handle that

00:13:33,120 --> 00:13:40,860
piece now we can reuse this across our

00:13:36,029 --> 00:13:42,630
API so I mentioned the beginning when I

00:13:40,860 --> 00:13:44,220
was shown this that it wasn't maybe the

00:13:42,630 --> 00:13:46,139
ideal way to go because we were stacking

00:13:44,220 --> 00:13:48,630
our middlewares so the problem is that

00:13:46,139 --> 00:13:51,660
if you send an adjacent web token that

00:13:48,630 --> 00:13:53,910
is invalid if it's expired or if it

00:13:51,660 --> 00:13:55,290
doesn't contain the proper or if it's

00:13:53,910 --> 00:13:57,630
not verifiable if it's been tampered

00:13:55,290 --> 00:13:59,639
with or whatnot you're just gonna get a

00:13:57,630 --> 00:14:01,649
401 back usually right away because

00:13:59,639 --> 00:14:03,320
you're using that middleware so instead

00:14:01,649 --> 00:14:05,670
what we can do is we can make our

00:14:03,320 --> 00:14:08,910
resolver wrappers a little bit smarter

00:14:05,670 --> 00:14:09,990
and we can take that verification piece

00:14:08,910 --> 00:14:13,680
and we can just move it into the

00:14:09,990 --> 00:14:15,209
resolver so now instead of having more

00:14:13,680 --> 00:14:17,940
of an all-or-nothing thing where we're

00:14:15,209 --> 00:14:20,370
gonna get the token get past that

00:14:17,940 --> 00:14:21,870
middleware or not what we've got instead

00:14:20,370 --> 00:14:25,320
is a verification that's happening right

00:14:21,870 --> 00:14:28,649
in place so what you see here is that

00:14:25,320 --> 00:14:30,060
we're taking in the the authorization

00:14:28,649 --> 00:14:32,399
header that's going to exist on the

00:14:30,060 --> 00:14:37,920
context and then we're doing a JWT

00:14:32,399 --> 00:14:40,709
verification right in place here so

00:14:37,920 --> 00:14:43,230
that's the other nice part about this is

00:14:40,709 --> 00:14:45,300
that instead of relying on like 401

00:14:43,230 --> 00:14:46,410
errors or any other sorts of errors that

00:14:45,300 --> 00:14:48,510
we might get from our middleware

00:14:46,410 --> 00:14:50,370
instead what we can do is we can use

00:14:48,510 --> 00:14:53,339
errors that are more appropriate for our

00:14:50,370 --> 00:14:55,649
graph QL API so you might have used

00:14:53,339 --> 00:14:57,630
Apollo errors you can create some kind

00:14:55,649 --> 00:15:00,300
of authorization error and if the user

00:14:57,630 --> 00:15:02,250
doesn't have the appropriate level of

00:15:00,300 --> 00:15:04,230
authorization or if something goes wrong

00:15:02,250 --> 00:15:06,000
with their token you can just throw one

00:15:04,230 --> 00:15:07,680
of those errors and what that's going to

00:15:06,000 --> 00:15:10,829
give you now is something more like this

00:15:07,680 --> 00:15:12,510
instead of a 401 so in this case you can

00:15:10,829 --> 00:15:14,399
just take that message you are not

00:15:12,510 --> 00:15:19,019
authorized do what you need to with it

00:15:14,399 --> 00:15:20,160
in your client application another

00:15:19,019 --> 00:15:21,720
approach that we might take and

00:15:20,160 --> 00:15:23,880
something that's very interesting that

00:15:21,720 --> 00:15:27,930
that I really like is the concept of

00:15:23,880 --> 00:15:30,120
custom directives so if we want to do

00:15:27,930 --> 00:15:33,029
something that's not relying solely on

00:15:30,120 --> 00:15:34,380
these custom resolvers that we built we

00:15:33,029 --> 00:15:36,779
can we can take a look at this pattern

00:15:34,380 --> 00:15:37,200
so it helps answer the question what if

00:15:36,779 --> 00:15:39,600
we want

00:15:37,200 --> 00:15:41,700
to start to limit access to specific

00:15:39,600 --> 00:15:44,160
fields what if we want to have the

00:15:41,700 --> 00:15:46,500
ability to mark off particular fields

00:15:44,160 --> 00:15:49,290
that a user must have a certain level of

00:15:46,500 --> 00:15:50,760
as a Shinto get access to and with

00:15:49,290 --> 00:15:53,910
custom directives we've got that option

00:15:50,760 --> 00:15:56,070
now you are probably familiar with this

00:15:53,910 --> 00:15:58,650
if you've taken a look at the directives

00:15:56,070 --> 00:15:59,970
included with craft UL so you know we

00:15:58,650 --> 00:16:01,620
can do things where we include a

00:15:59,970 --> 00:16:04,710
specific field and our client queries

00:16:01,620 --> 00:16:07,680
based on some condition now we wouldn't

00:16:04,710 --> 00:16:10,530
use something like this to do any kind

00:16:07,680 --> 00:16:12,720
of limitation on our return data and the

00:16:10,530 --> 00:16:16,200
reason is that we can't trust the client

00:16:12,720 --> 00:16:18,390
to provide the appropriate boolean value

00:16:16,200 --> 00:16:20,100
because they could spoof it easily we

00:16:18,390 --> 00:16:22,070
need to be taking that out of their

00:16:20,100 --> 00:16:25,410
hands and using the information from

00:16:22,070 --> 00:16:27,780
their authentication / authorization

00:16:25,410 --> 00:16:29,550
info which in this case is the JSON web

00:16:27,780 --> 00:16:32,330
token when you take something from that

00:16:29,550 --> 00:16:34,860
and use that to to answer this question

00:16:32,330 --> 00:16:38,940
so the directive then is going to move

00:16:34,860 --> 00:16:40,800
into our schema so what we can do is

00:16:38,940 --> 00:16:42,600
something that looks like this we can

00:16:40,800 --> 00:16:46,470
define some directives I've got two here

00:16:42,600 --> 00:16:49,380
is authenticated and has scope has scope

00:16:46,470 --> 00:16:51,840
takes an arguments which is an array or

00:16:49,380 --> 00:16:53,250
a list of strings and then we can just

00:16:51,840 --> 00:16:56,190
start tacking these on in places that we

00:16:53,250 --> 00:16:58,350
need so in this case we're saying that

00:16:56,190 --> 00:17:00,600
to get this query at all this all

00:16:58,350 --> 00:17:03,090
articles query the user needs to be

00:17:00,600 --> 00:17:05,280
authenticated and then if the user wants

00:17:03,090 --> 00:17:07,020
to get at the review comments the

00:17:05,280 --> 00:17:08,670
reviewer comments well they have to have

00:17:07,020 --> 00:17:11,850
a particular scope in this case you need

00:17:08,670 --> 00:17:13,230
to be able to read comments now there's

00:17:11,850 --> 00:17:16,020
a bunch of different ways that we could

00:17:13,230 --> 00:17:17,970
go about defining custom directives and

00:17:16,020 --> 00:17:20,459
making them do what we need them to do

00:17:17,970 --> 00:17:22,800
to make the appropriate authorization

00:17:20,459 --> 00:17:24,180
checks and everything like that this is

00:17:22,800 --> 00:17:25,920
kind of one way you might go about it

00:17:24,180 --> 00:17:29,370
there's a lot of code that I've omitted

00:17:25,920 --> 00:17:32,000
here there's a lot of stuff that happens

00:17:29,370 --> 00:17:34,800
but basically we've got these two

00:17:32,000 --> 00:17:36,060
directive resolvers we'll call them this

00:17:34,800 --> 00:17:37,770
is where you would do your

00:17:36,060 --> 00:17:40,410
authentication logic like we've seen

00:17:37,770 --> 00:17:43,200
before in our custom resolver wrappers

00:17:40,410 --> 00:17:45,330
and then you would throw errors if

00:17:43,200 --> 00:17:47,250
that's the case if the the user isn't

00:17:45,330 --> 00:17:49,130
authenticated and then once you've got

00:17:47,250 --> 00:17:51,950
those you can you

00:17:49,130 --> 00:17:55,430
the ast and walked down the ast and

00:17:51,950 --> 00:17:57,500
replace basically any of the resolvers

00:17:55,430 --> 00:18:00,050
that you see with a directive with this

00:17:57,500 --> 00:18:01,160
custom directive resolver so there's a

00:18:00,050 --> 00:18:03,920
lot of code that goes into that I've

00:18:01,160 --> 00:18:05,030
omitted it here for brevity but if you'd

00:18:03,920 --> 00:18:06,920
like to take a look at how you might

00:18:05,030 --> 00:18:10,220
implement that you can check out this

00:18:06,920 --> 00:18:11,810
repo and I think this is really nice

00:18:10,220 --> 00:18:14,210
with this pattern I think we get this

00:18:11,810 --> 00:18:15,890
clean API so we get this really nice

00:18:14,210 --> 00:18:17,990
declarative way of being able to say

00:18:15,890 --> 00:18:19,910
okay this user has to be authenticated

00:18:17,990 --> 00:18:21,650
or they have to have a particular scope

00:18:19,910 --> 00:18:23,750
and by the way it doesn't have to be

00:18:21,650 --> 00:18:26,420
something like has scope a Gibby has

00:18:23,750 --> 00:18:27,980
roll so maybe a user if you've got a

00:18:26,420 --> 00:18:30,260
model that's a bit simpler where you've

00:18:27,980 --> 00:18:33,140
just got a few roles you could attach

00:18:30,260 --> 00:18:36,140
something like has role admin has role

00:18:33,140 --> 00:18:37,310
manager whatever the case may be the

00:18:36,140 --> 00:18:39,700
other nice thing we get is this

00:18:37,310 --> 00:18:42,590
possibility for kind of per field

00:18:39,700 --> 00:18:44,720
authorization so we can omit certain

00:18:42,590 --> 00:18:47,120
fields from being returned if we don't

00:18:44,720 --> 00:18:49,430
want a user to get access to specific

00:18:47,120 --> 00:18:52,870
fields and we've got really nice

00:18:49,430 --> 00:18:55,670
resolver level authentication checks so

00:18:52,870 --> 00:18:57,830
those are the two ways that I thought

00:18:55,670 --> 00:19:00,230
would be useful to to go over but the

00:18:57,830 --> 00:19:03,560
truth is there are a lot of ways to do

00:19:00,230 --> 00:19:04,910
authentication and graphic UL and there

00:19:03,560 --> 00:19:07,100
are a lot of different opinions about it

00:19:04,910 --> 00:19:09,310
I think too so we heard from Tony this

00:19:07,100 --> 00:19:11,690
morning that they decided to take

00:19:09,310 --> 00:19:14,390
authentication out of the API layer

00:19:11,690 --> 00:19:15,920
leave it in the business layer and make

00:19:14,390 --> 00:19:18,890
sure that the API doesn't have a concept

00:19:15,920 --> 00:19:21,320
of it but you might choose to do it in

00:19:18,890 --> 00:19:22,940
your API and that's a valid choice again

00:19:21,320 --> 00:19:24,280
graph QL does make any prescription

00:19:22,940 --> 00:19:26,690
about how you would handle

00:19:24,280 --> 00:19:27,950
authentication there are lots of ways to

00:19:26,690 --> 00:19:29,330
do it there are many more than I've

00:19:27,950 --> 00:19:32,420
shown here but those are two of the ways

00:19:29,330 --> 00:19:34,810
that we found work pretty well with a

00:19:32,420 --> 00:19:37,670
graph QL so I would recommend that you

00:19:34,810 --> 00:19:39,890
maybe try a few out and you'll be afraid

00:19:37,670 --> 00:19:42,410
to kind of mix and match a couple of

00:19:39,890 --> 00:19:44,420
them again there's no one right way

00:19:42,410 --> 00:19:50,470
you've got to do what works best for

00:19:44,420 --> 00:19:53,690
your business domain so at this point I

00:19:50,470 --> 00:19:56,320
have a slide that isn't showing up the

00:19:53,690 --> 00:20:02,160
slide is the one that I showed earlier

00:19:56,320 --> 00:20:04,390
on oh geez

00:20:02,160 --> 00:20:07,330
okay we'll forget that the slide was

00:20:04,390 --> 00:20:09,250
that sac overflow screenshot which

00:20:07,330 --> 00:20:11,920
basically says how do you do

00:20:09,250 --> 00:20:13,120
authentication with graph QL however you

00:20:11,920 --> 00:20:14,980
want basically so that's where we're

00:20:13,120 --> 00:20:18,190
back at really after taking a little bit

00:20:14,980 --> 00:20:19,810
of a tour of its that's just kind of the

00:20:18,190 --> 00:20:22,360
fact of life I guess right now with

00:20:19,810 --> 00:20:23,560
graph QL but I hope that those two

00:20:22,360 --> 00:20:25,810
methods kind of give you some kind of

00:20:23,560 --> 00:20:27,760
inspiration to go and try it out and see

00:20:25,810 --> 00:20:29,860
what works best for your particular

00:20:27,760 --> 00:20:31,750
application so if you have any questions

00:20:29,860 --> 00:20:34,150
about that at all I am more than happy

00:20:31,750 --> 00:20:37,210
to to chat with you after I'll be around

00:20:34,150 --> 00:20:39,940
all day and yeah

00:20:37,210 --> 00:20:43,120
let me know if those work out for you or

00:20:39,940 --> 00:20:44,470
if something else is is more appropriate

00:20:43,120 --> 00:20:46,360
for your app so you can find me on

00:20:44,470 --> 00:20:48,190
Twitter I'm at Ryan Chang key you can

00:20:46,360 --> 00:20:50,440
get these slides at the bitly link and

00:20:48,190 --> 00:20:53,780
check out graph QL workshops if you are

00:20:50,440 --> 00:20:59,010
interested in training thank you

00:20:53,780 --> 00:20:59,010

YouTube URL: https://www.youtube.com/watch?v=4_Bcw7BULC8


