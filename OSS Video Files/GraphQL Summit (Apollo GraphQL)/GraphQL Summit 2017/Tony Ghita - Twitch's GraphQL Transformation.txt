Title: Tony Ghita - Twitch's GraphQL Transformation
Publication date: 2017-11-07
Playlist: GraphQL Summit 2017
Description: 
	Tony Ghita, Senior Software Engineer at Twitch, gave this talk at GraphQL Summit 2017. Learn more: summit.graphql.com

Adopting GraphQL at Twitch transformed our workflow in a SOA with 100+ microservices (and 1 monolith). Dozens of teams are now focused on building features instead of plumbing data. I'll share experiences and best practices from our journey implementing a Go API gateway with a myriad of backends.

See the slides here: https://speakerdeck.com/tonyghita/twitchs-graphql-transformation-with-notes
Captions: 
	00:00:03,620 --> 00:00:08,639
alright so hey guys I'm Tony and I'll be

00:00:07,350 --> 00:00:12,690
talking about twitch in our graphical

00:00:08,639 --> 00:00:14,459
transformation so my full name is Tony

00:00:12,690 --> 00:00:16,230
guida and it also happens to be my

00:00:14,459 --> 00:00:20,970
handle I'm like every single website on

00:00:16,230 --> 00:00:23,880
the internet so follow me on twitch and

00:00:20,970 --> 00:00:26,010
twitter using the handle if you want

00:00:23,880 --> 00:00:28,560
like any more information to stock me

00:00:26,010 --> 00:00:33,510
any further just check the Equifax dump

00:00:28,560 --> 00:00:34,710
go find my social security number so I'm

00:00:33,510 --> 00:00:36,510
gonna engineer twitch on the API

00:00:34,710 --> 00:00:38,880
platform team and I've been leading the

00:00:36,510 --> 00:00:42,270
graph QL API implementation efforts for

00:00:38,880 --> 00:00:43,110
the past year or so and before we get

00:00:42,270 --> 00:00:44,730
started notice some of the other

00:00:43,110 --> 00:00:47,160
speakers yesterday shared some pictures

00:00:44,730 --> 00:00:49,950
of their pets so before we start I'd

00:00:47,160 --> 00:00:55,079
like to share specters of my teenage

00:00:49,950 --> 00:00:57,540
puppy Finn so this has been some times

00:00:55,079 --> 00:00:59,489
he's mischievous he threw his ball in

00:00:57,540 --> 00:01:01,649
the toilet I don't know why he wanted me

00:00:59,489 --> 00:01:02,700
to like play with them or something but

00:01:01,649 --> 00:01:05,790
mostly he's a really good boy

00:01:02,700 --> 00:01:08,159
so I guess I don't really wrestle bears

00:01:05,790 --> 00:01:09,659
I thought I would put that like line in

00:01:08,159 --> 00:01:12,090
my intro and it would go into some box

00:01:09,659 --> 00:01:13,830
and I won't ever see it so apologies

00:01:12,090 --> 00:01:14,250
leave that you had to read that terrible

00:01:13,830 --> 00:01:16,620
joke

00:01:14,250 --> 00:01:18,500
but if if there was ever a bear that I

00:01:16,620 --> 00:01:20,729
was wrestling it'd probably be this guy

00:01:18,500 --> 00:01:23,190
alright so back to our regularly

00:01:20,729 --> 00:01:25,530
scheduled programming twitch in our

00:01:23,190 --> 00:01:28,350
graph kill transformation so for those

00:01:25,530 --> 00:01:31,640
of you who are not familiar twitch it is

00:01:28,350 --> 00:01:36,270
a social video platform for gamers and

00:01:31,640 --> 00:01:38,970
it looks something like this so this is

00:01:36,270 --> 00:01:41,520
twitch and it's also our newest web app

00:01:38,970 --> 00:01:42,869
and we're actually right now in the

00:01:41,520 --> 00:01:45,450
process of ramping up traffic so this

00:01:42,869 --> 00:01:47,430
app as I speak and we hope to be serving

00:01:45,450 --> 00:01:50,610
it to 90% of logged in users by the end

00:01:47,430 --> 00:01:51,930
of tomorrow and the the novel thing

00:01:50,610 --> 00:01:53,939
about this is this is all powered by our

00:01:51,930 --> 00:01:57,720
graphical API it's written in typescript

00:01:53,939 --> 00:02:01,259
uses a power client and it's written to

00:01:57,720 --> 00:02:02,850
react so it's I think probably the most

00:02:01,259 --> 00:02:05,100
remarkable thing about this is that it's

00:02:02,850 --> 00:02:06,710
been completely rewritten and over just

00:02:05,100 --> 00:02:10,950
like just the past six months so

00:02:06,710 --> 00:02:15,930
basically no time so how do we get

00:02:10,950 --> 00:02:19,910
twitch on graph QL well it required a

00:02:15,930 --> 00:02:22,230
pretty big paradigm shift in our part so

00:02:19,910 --> 00:02:24,900
for a lot of us rest has been synonymous

00:02:22,230 --> 00:02:29,910
with api's for the entire length of our

00:02:24,900 --> 00:02:35,310
careers so going from a well-known get

00:02:29,910 --> 00:02:37,080
users friends to this query here it's

00:02:35,310 --> 00:02:38,459
not what's so straightforward we have to

00:02:37,080 --> 00:02:39,870
start thinking in terms of data and

00:02:38,459 --> 00:02:42,239
relationships between the data instead

00:02:39,870 --> 00:02:45,690
of endpoints but as we went through this

00:02:42,239 --> 00:02:47,220
process we found it was like adding a

00:02:45,690 --> 00:02:51,080
new like a missing unit test to our

00:02:47,220 --> 00:02:53,099
overall systems so the new perspective

00:02:51,080 --> 00:02:56,540
changed how we thought about aspects of

00:02:53,099 --> 00:02:56,540
our service oriented architectures so

00:02:56,569 --> 00:03:02,209
just adding a different API that totally

00:03:00,480 --> 00:03:05,900
didn't adhere to any of the standards

00:03:02,209 --> 00:03:08,160
just completely blew our minds so

00:03:05,900 --> 00:03:09,420
through the whole process we ended up

00:03:08,160 --> 00:03:12,560
with much improved services so I

00:03:09,420 --> 00:03:14,489
especially just talked about this about

00:03:12,560 --> 00:03:16,379
putting the right things in the right

00:03:14,489 --> 00:03:18,660
places and I think that extends beyond

00:03:16,379 --> 00:03:20,819
client and server and we found that it

00:03:18,660 --> 00:03:22,550
is sense you like the API gateway and

00:03:20,819 --> 00:03:25,110
also the services behind there as well

00:03:22,550 --> 00:03:30,690
so I think that's a little bit

00:03:25,110 --> 00:03:31,739
unexpected but yeah so I'm hoping to

00:03:30,690 --> 00:03:32,190
share with you our journey to adopt

00:03:31,739 --> 00:03:34,440
graticule

00:03:32,190 --> 00:03:35,819
and I'll share it also some things I

00:03:34,440 --> 00:03:38,400
wish I knew when I was starting out and

00:03:35,819 --> 00:03:41,129
I hope this encouraged you to start your

00:03:38,400 --> 00:03:44,190
own journey if you haven't already or to

00:03:41,129 --> 00:03:47,790
continue if you already have so at

00:03:44,190 --> 00:03:50,819
twitch we have about 600 engineers I'm

00:03:47,790 --> 00:03:52,769
one of the nerds and we've had massive

00:03:50,819 --> 00:03:55,140
growth over the past year so something

00:03:52,769 --> 00:03:59,549
like 2x the engineers so lots of new

00:03:55,140 --> 00:04:03,750
faces I'm one of them but our

00:03:59,549 --> 00:04:06,150
architecture looks like this so I work

00:04:03,750 --> 00:04:08,250
on the API gateway team that's the API

00:04:06,150 --> 00:04:10,319
gateway it takes requests coming from

00:04:08,250 --> 00:04:12,780
the internet it goes to the endpoint

00:04:10,319 --> 00:04:13,830
you've asked for and it far fishes out

00:04:12,780 --> 00:04:17,310
all the requests to the back-end

00:04:13,830 --> 00:04:20,789
services so hopefully this looks pretty

00:04:17,310 --> 00:04:23,610
familiar to you we have over a hundred

00:04:20,789 --> 00:04:26,210
of these micro services it's a little

00:04:23,610 --> 00:04:28,590
bit crazy it's kind of like a soup of

00:04:26,210 --> 00:04:32,040
services

00:04:28,590 --> 00:04:33,510
and we have a pretty massive monolith

00:04:32,040 --> 00:04:35,820
although it's shrinking as we migrate

00:04:33,510 --> 00:04:37,890
away from it so hopefully it sounds like

00:04:35,820 --> 00:04:41,910
kind of a familiar architecture to you

00:04:37,890 --> 00:04:44,070
and hopefully you can relate our

00:04:41,910 --> 00:04:46,620
services are actually written and go so

00:04:44,070 --> 00:04:50,250
that's where our graphical API would

00:04:46,620 --> 00:04:51,390
come to live as well so I haven't heard

00:04:50,250 --> 00:04:53,730
too much of that but hopefully there's

00:04:51,390 --> 00:04:55,980
some Gophers out here the Gophers are

00:04:53,730 --> 00:04:57,210
actually goes mascot so I think it's

00:04:55,980 --> 00:05:02,700
probably probably one of the coolest

00:04:57,210 --> 00:05:05,070
part of languages so our most of our

00:05:02,700 --> 00:05:06,450
services are also written in go so they

00:05:05,070 --> 00:05:10,550
kind of look like that they're all

00:05:06,450 --> 00:05:10,550
Gophers but they look kind of different

00:05:11,030 --> 00:05:16,860
but everything speaks rest in JSON so I

00:05:14,610 --> 00:05:19,169
mean I imagine most companies have been

00:05:16,860 --> 00:05:23,520
infinitely implementing this as their

00:05:19,169 --> 00:05:25,050
API for last decade or so so here's a

00:05:23,520 --> 00:05:28,650
rough timeline in the steps we took to

00:05:25,050 --> 00:05:32,310
build a graphical API we actually

00:05:28,650 --> 00:05:35,190
started graphical summit 2016 and we

00:05:32,310 --> 00:05:38,640
came to graphical summit knowing next

00:05:35,190 --> 00:05:40,620
nothing and we're about to throw a

00:05:38,640 --> 00:05:43,440
horror API traffic on graphic you'll

00:05:40,620 --> 00:05:45,570
like by tomorrow so that's kind of scary

00:05:43,440 --> 00:05:47,430
but I'm gonna take you along as the

00:05:45,570 --> 00:05:50,280
steps we take to get there and what I

00:05:47,430 --> 00:05:56,070
learned along the way so this is

00:05:50,280 --> 00:06:00,330
actually graph kill summit last year so

00:05:56,070 --> 00:06:01,890
we came here and we we were like man

00:06:00,330 --> 00:06:03,360
this graph you think sounds kind of cool

00:06:01,890 --> 00:06:07,729
but I don't really know anything about

00:06:03,360 --> 00:06:10,770
it and we just really took time to like

00:06:07,729 --> 00:06:12,990
marinate in the ideas that were coming

00:06:10,770 --> 00:06:14,970
out of this talk and we realized that

00:06:12,990 --> 00:06:16,380
graph Gale solved many of the issues we

00:06:14,970 --> 00:06:19,430
were experiencing at the API gateway

00:06:16,380 --> 00:06:22,919
level so things like verging api's or

00:06:19,430 --> 00:06:24,540
end points over fetching data or just

00:06:22,919 --> 00:06:26,610
even providing a good developer

00:06:24,540 --> 00:06:29,130
experience or things that we really

00:06:26,610 --> 00:06:31,620
cared about and we're pleased to see

00:06:29,130 --> 00:06:34,320
that graph Gale really provided a nice

00:06:31,620 --> 00:06:36,390
solution and we came away from the

00:06:34,320 --> 00:06:39,120
summit with all sorts ideas about how we

00:06:36,390 --> 00:06:42,169
could use graph QL to make our lives API

00:06:39,120 --> 00:06:42,169
gateway engineers but

00:06:45,100 --> 00:06:52,190
so we set out to build proof of concept

00:06:48,110 --> 00:06:54,970
shortly after the summit and our best

00:06:52,190 --> 00:06:59,600
idea at the time was wrapping our

00:06:54,970 --> 00:07:01,580
existing or creating rest endpoints from

00:06:59,600 --> 00:07:02,900
graph QL so we would use graph kill on

00:07:01,580 --> 00:07:04,580
the back end so hydrate all the data

00:07:02,900 --> 00:07:08,330
needed for rest endpoints but we'd still

00:07:04,580 --> 00:07:10,460
expose the the rest endpoints to our

00:07:08,330 --> 00:07:12,260
consumers so that sounded like a pretty

00:07:10,460 --> 00:07:14,270
good idea because we had a lot of work

00:07:12,260 --> 00:07:20,360
to do migrating of the monolith into our

00:07:14,270 --> 00:07:22,910
API gateway but that was kind of like

00:07:20,360 --> 00:07:25,850
just building a faster horse where this

00:07:22,910 --> 00:07:28,070
is like a famous quote mr. tribute to

00:07:25,850 --> 00:07:29,900
Henry Ford but the gist of it is like if

00:07:28,070 --> 00:07:31,400
Henry Ford had asked his customers if

00:07:29,900 --> 00:07:32,960
they should build like we should build

00:07:31,400 --> 00:07:35,180
they they probably tell him they want a

00:07:32,960 --> 00:07:36,289
faster horse rather than a car and in

00:07:35,180 --> 00:07:37,970
this case we definitely started off

00:07:36,289 --> 00:07:41,840
looking for a faster horse instead of a

00:07:37,970 --> 00:07:44,450
car but anyway you start on a prototype

00:07:41,840 --> 00:07:45,680
and it was the most simple thing I could

00:07:44,450 --> 00:07:48,560
think of was just like a single type

00:07:45,680 --> 00:07:53,120
with some fields and inquiry to get that

00:07:48,560 --> 00:07:56,090
type back nothing complex just fetching

00:07:53,120 --> 00:07:57,919
data from a single service and this

00:07:56,090 --> 00:08:00,289
wasn't enough to kind of really get our

00:07:57,919 --> 00:08:03,020
feet wet so we learned how to resolve

00:08:00,289 --> 00:08:07,430
types and fields also how to load data

00:08:03,020 --> 00:08:09,650
efficiently so we we add this query

00:08:07,430 --> 00:08:11,780
which allows you to look up users by IDs

00:08:09,650 --> 00:08:15,229
and by names so if you ask for the same

00:08:11,780 --> 00:08:18,580
user like if an ID and a name points the

00:08:15,229 --> 00:08:21,889
same user gentleman to load at once so

00:08:18,580 --> 00:08:23,060
it toss like how you integrate a service

00:08:21,889 --> 00:08:26,000
even though it's just a single service

00:08:23,060 --> 00:08:29,270
it was still kind of at the summit last

00:08:26,000 --> 00:08:30,740
year is kind of a nebulous concept so it

00:08:29,270 --> 00:08:32,450
was really nice to just get it done and

00:08:30,740 --> 00:08:34,190
really understand that it's not magic

00:08:32,450 --> 00:08:36,459
and and it's actually pretty

00:08:34,190 --> 00:08:36,459
straightforward

00:08:37,209 --> 00:08:41,919
so the proof of concept was pretty

00:08:39,830 --> 00:08:45,380
promising really all right cool

00:08:41,919 --> 00:08:47,110
brusqueness do let's see how types get

00:08:45,380 --> 00:08:49,430
composed together maybe it can help us

00:08:47,110 --> 00:08:53,200
hydrate our data for arrests endpoints

00:08:49,430 --> 00:08:53,200
so I said some baby steps and

00:08:53,880 --> 00:09:02,370
came up with a plan to implement our

00:08:58,650 --> 00:09:04,740
logged out front page in graph kill so I

00:09:02,370 --> 00:09:06,480
took a like s Dean Dan Shafer meth

00:09:04,740 --> 00:09:08,250
mentioned I took a client driven

00:09:06,480 --> 00:09:10,020
approach and look they're like what is

00:09:08,250 --> 00:09:12,240
the data I need here

00:09:10,020 --> 00:09:13,620
looks like we need some streams we also

00:09:12,240 --> 00:09:16,350
need to fetch some games like their

00:09:13,620 --> 00:09:18,710
their cover art and how many people are

00:09:16,350 --> 00:09:22,440
viewing at the time the name of the game

00:09:18,710 --> 00:09:25,260
and if you squint real hard you probably

00:09:22,440 --> 00:09:27,330
can't see it but streams also has some

00:09:25,260 --> 00:09:31,950
information about like users and the

00:09:27,330 --> 00:09:34,080
games that are being streamed so this

00:09:31,950 --> 00:09:36,090
actually turned out to be still fairly

00:09:34,080 --> 00:09:38,820
simple obviously this is simplified for

00:09:36,090 --> 00:09:41,640
the slide but the gist of it is right

00:09:38,820 --> 00:09:43,800
here so you have a user you have a

00:09:41,640 --> 00:09:45,660
stream you have games and you have ways

00:09:43,800 --> 00:09:46,980
to get those three objects and you can

00:09:45,660 --> 00:09:48,690
see inside the stream we have a

00:09:46,980 --> 00:09:54,510
broadcaster which is a user and a game

00:09:48,690 --> 00:09:57,690
and so on so through this exercise we

00:09:54,510 --> 00:09:59,430
learn how to compose types and also it

00:09:57,690 --> 00:10:02,100
was our first foray into doing

00:09:59,430 --> 00:10:04,640
pagination and graph QL which i think is

00:10:02,100 --> 00:10:07,170
a little non-obvious at first

00:10:04,640 --> 00:10:10,110
so type composition was pretty

00:10:07,170 --> 00:10:11,610
straightforward you just returned in the

00:10:10,110 --> 00:10:13,050
other type you only have to make a type

00:10:11,610 --> 00:10:14,340
once and then you can compose it

00:10:13,050 --> 00:10:16,620
anywhere you want in your schema that's

00:10:14,340 --> 00:10:19,380
awesome but once we had to put

00:10:16,620 --> 00:10:23,880
pagination in schema we really had not a

00:10:19,380 --> 00:10:27,210
good way to know like how to proceed our

00:10:23,880 --> 00:10:28,770
back-end services did pagination in all

00:10:27,210 --> 00:10:31,680
sorts of different ways so some did

00:10:28,770 --> 00:10:35,670
offset limit some did cursors some had

00:10:31,680 --> 00:10:38,100
some weird timestamp offset pagination

00:10:35,670 --> 00:10:41,070
is kind of all over the place and this

00:10:38,100 --> 00:10:43,830
manifested itself in our REST API so we

00:10:41,070 --> 00:10:45,510
had this like nebulous nest of different

00:10:43,830 --> 00:10:47,760
ways of doing things so as an API

00:10:45,510 --> 00:10:52,020
consumer that wasn't super nice and as

00:10:47,760 --> 00:10:56,240
someone making a graphical API I didn't

00:10:52,020 --> 00:10:58,290
want to make the same mistakes again so

00:10:56,240 --> 00:11:00,600
graph QL actually made a really nice

00:10:58,290 --> 00:11:05,640
place to add a translation layer to use

00:11:00,600 --> 00:11:07,450
cursors for pagination and it didn't

00:11:05,640 --> 00:11:10,090
matter if the service underneath

00:11:07,450 --> 00:11:12,820
was using offset limit or some time

00:11:10,090 --> 00:11:14,590
stamps or whatever it could we could use

00:11:12,820 --> 00:11:16,770
graphic you'll as a translation layer to

00:11:14,590 --> 00:11:23,230
just expose this very standard interface

00:11:16,770 --> 00:11:23,920
of cursors so the query looks something

00:11:23,230 --> 00:11:27,390
like this

00:11:23,920 --> 00:11:30,670
so let's say we're going through games

00:11:27,390 --> 00:11:35,710
you can specify just get the first ten

00:11:30,670 --> 00:11:38,230
after a 0 1 s 4 and then you can get

00:11:35,710 --> 00:11:38,590
some data on there and you can go on and

00:11:38,230 --> 00:11:40,420
on

00:11:38,590 --> 00:11:43,000
paginating through the cursors that you

00:11:40,420 --> 00:11:44,470
get back on the edges and if you're not

00:11:43,000 --> 00:11:46,150
familiar with this I'm actually gonna

00:11:44,470 --> 00:11:49,510
get to in a second but we found the

00:11:46,150 --> 00:11:51,850
specification put out by relay and

00:11:49,510 --> 00:11:54,910
really latched on to it as like the way

00:11:51,850 --> 00:11:56,350
to make pagination really nice I'm not

00:11:54,910 --> 00:11:59,110
gonna go too much into like the real a

00:11:56,350 --> 00:12:01,410
pagination method but I think the big

00:11:59,110 --> 00:12:04,690
way big takeaway from this step was that

00:12:01,410 --> 00:12:07,300
you can use graph QL as your translation

00:12:04,690 --> 00:12:09,610
layer from your clients cube back-end

00:12:07,300 --> 00:12:12,820
services and really standardize the

00:12:09,610 --> 00:12:14,470
interface and this is awesome this is

00:12:12,820 --> 00:12:16,630
you don't have to like check

00:12:14,470 --> 00:12:18,610
documentation like oh man I'm trying to

00:12:16,630 --> 00:12:20,290
get streams like what is how do I get

00:12:18,610 --> 00:12:22,750
the next one

00:12:20,290 --> 00:12:25,720
you can kind of just assume it's gonna

00:12:22,750 --> 00:12:26,980
work in a certain way imagination is

00:12:25,720 --> 00:12:30,250
only one example where we saw this kind

00:12:26,980 --> 00:12:32,530
of opportunity standardize our API we'd

00:12:30,250 --> 00:12:34,960
eventually see this standardization kind

00:12:32,530 --> 00:12:37,450
of work its way down to the backend as

00:12:34,960 --> 00:12:40,270
well so now that we're doing cursors

00:12:37,450 --> 00:12:41,350
everywhere backend services are also

00:12:40,270 --> 00:12:43,870
like oh yeah but hey we should probably

00:12:41,350 --> 00:12:46,530
take that standard as well and graph Cal

00:12:43,870 --> 00:12:48,940
gives you a good kind of buffer layer to

00:12:46,530 --> 00:12:50,560
not expose clients of those changes and

00:12:48,940 --> 00:12:53,530
also to be able to make those changes

00:12:50,560 --> 00:12:54,880
freely on the background I do want to

00:12:53,530 --> 00:12:56,800
point to the real a cursor connection

00:12:54,880 --> 00:12:58,480
spec though because I think it's really

00:12:56,800 --> 00:13:00,700
good and if you haven't read it I

00:12:58,480 --> 00:13:03,760
encourage you to do so it's pretty short

00:13:00,700 --> 00:13:07,720
and succinct so there's a short link to

00:13:03,760 --> 00:13:09,250
it ok cool

00:13:07,720 --> 00:13:11,650
so we're progressing along in our

00:13:09,250 --> 00:13:15,490
prototype pretty well by now but we've

00:13:11,650 --> 00:13:17,380
really punted on what to do for off I

00:13:15,490 --> 00:13:19,390
kind of had an idea that it wouldn't

00:13:17,380 --> 00:13:20,339
work well with our current current auth

00:13:19,390 --> 00:13:22,709
system

00:13:20,339 --> 00:13:24,329
but we're at the point where we couldn't

00:13:22,709 --> 00:13:27,360
if we want things graph kill we couldn't

00:13:24,329 --> 00:13:32,370
like punt on it any longer so it's time

00:13:27,360 --> 00:13:33,600
to face the challenge head-on ah okay so

00:13:32,370 --> 00:13:35,970
when we talk about loss we really mean

00:13:33,600 --> 00:13:38,370
authentication like who's making the

00:13:35,970 --> 00:13:40,079
request and authorization which is what

00:13:38,370 --> 00:13:45,839
is the authenticated user a lot to do or

00:13:40,079 --> 00:13:49,110
see so this is our familiar API gateway

00:13:45,839 --> 00:13:50,519
to micro services architecture again

00:13:49,110 --> 00:13:52,889
request flow through the API gateway

00:13:50,519 --> 00:13:55,949
first and then endpoints a great data

00:13:52,889 --> 00:13:58,050
for many back-end services the way

00:13:55,949 --> 00:14:01,889
authentication authorization work here

00:13:58,050 --> 00:14:02,399
is every request is authenticated as it

00:14:01,889 --> 00:14:03,930
comes in

00:14:02,399 --> 00:14:06,240
and then when it reaches the endpoint

00:14:03,930 --> 00:14:07,980
every endpoint knows what data it needs

00:14:06,240 --> 00:14:10,470
to get from other services so we just do

00:14:07,980 --> 00:14:12,029
authorization there and we did it this

00:14:10,470 --> 00:14:15,600
way to make it easy for service owners

00:14:12,029 --> 00:14:18,089
to not have to do worry about too much

00:14:15,600 --> 00:14:20,459
when they're exposing data so we're like

00:14:18,089 --> 00:14:23,420
hey we're the API gave a team we'll take

00:14:20,459 --> 00:14:23,420
care of it for you don't worry about it

00:14:24,559 --> 00:14:30,240
yeah so we get authorization tokens and

00:14:27,660 --> 00:14:32,420
send them to the services and this that

00:14:30,240 --> 00:14:36,600
then the services can know like okay

00:14:32,420 --> 00:14:39,839
this request is authenticated here's

00:14:36,600 --> 00:14:41,999
your data or conversely like bounce you

00:14:39,839 --> 00:14:47,459
out and we don't need go to services at

00:14:41,999 --> 00:14:50,339
that time okay but in graph QL that

00:14:47,459 --> 00:14:51,929
doesn't really map extremely well you

00:14:50,339 --> 00:14:54,480
can have your lab one endpoint first of

00:14:51,929 --> 00:14:56,670
all and the queries are not static

00:14:54,480 --> 00:14:58,769
anymore anyone can request any kind of

00:14:56,670 --> 00:15:03,839
data that will hit any amount of peckin

00:14:58,769 --> 00:15:06,600
services so what do we do we thought

00:15:03,839 --> 00:15:08,670
about just taking a first pass over and

00:15:06,600 --> 00:15:12,870
kind of analyzing what are the

00:15:08,670 --> 00:15:16,259
authorization needs but I think I'm a

00:15:12,870 --> 00:15:19,139
complicated and once we got like the

00:15:16,259 --> 00:15:21,120
token for that and say we had a massive

00:15:19,139 --> 00:15:23,009
massive amount of authorization logic

00:15:21,120 --> 00:15:24,509
they need to happen would we pass that

00:15:23,009 --> 00:15:26,759
token to every single service like I

00:15:24,509 --> 00:15:28,970
don't not every service would care about

00:15:26,759 --> 00:15:33,689
that information and it seemed kind of

00:15:28,970 --> 00:15:34,320
kind of strange okay that's fine

00:15:33,689 --> 00:15:35,700
we could

00:15:34,320 --> 00:15:37,830
right to make it so that every resolver

00:15:35,700 --> 00:15:41,910
calls the authorization service as

00:15:37,830 --> 00:15:45,110
needed and then maybe merge the tokens

00:15:41,910 --> 00:15:47,010
together some of those service but I

00:15:45,110 --> 00:15:50,310
don't know it seemed kind of weird to

00:15:47,010 --> 00:15:52,410
like didn't really fit it didn't really

00:15:50,310 --> 00:15:55,350
feel good so we thought pretty hard

00:15:52,410 --> 00:15:57,120
about it and then asked around some

00:15:55,350 --> 00:15:58,470
other people how they did it and I think

00:15:57,120 --> 00:15:59,880
this is actually Dan Schafer I don't

00:15:58,470 --> 00:16:04,920
know if he's still here but he's like

00:15:59,880 --> 00:16:07,500
hey check out my talk so we did and I

00:16:04,920 --> 00:16:09,810
like this talk later but the essence of

00:16:07,500 --> 00:16:11,730
it is basically push authorization below

00:16:09,810 --> 00:16:13,320
the API layer just like get it out like

00:16:11,730 --> 00:16:15,240
that's not the right place for it in

00:16:13,320 --> 00:16:17,010
graph QL and I think it's also not the

00:16:15,240 --> 00:16:19,170
right place for it in rest as well

00:16:17,010 --> 00:16:22,560
but it wasn't as a parent because it

00:16:19,170 --> 00:16:24,420
kind of just worked then this this

00:16:22,560 --> 00:16:25,920
actually greatly simplifies API

00:16:24,420 --> 00:16:28,860
development you're just passing data

00:16:25,920 --> 00:16:33,210
back and forth now so as Dan Schafer

00:16:28,860 --> 00:16:34,800
says keep the API layer thin so this

00:16:33,210 --> 00:16:37,110
really enforced a good separation of

00:16:34,800 --> 00:16:38,550
concerns and it's not something we would

00:16:37,110 --> 00:16:45,780
have came if we were just like kept

00:16:38,550 --> 00:16:46,890
adding rest endpoints okay and I kind of

00:16:45,780 --> 00:16:48,480
made it look easy like we just kind of

00:16:46,890 --> 00:16:51,270
moved the box out of the graph view

00:16:48,480 --> 00:16:53,700
layer and into the service layer but it

00:16:51,270 --> 00:16:57,150
is actually super hard to convince all

00:16:53,700 --> 00:16:59,430
these you know tens of teams that they

00:16:57,150 --> 00:17:01,110
need to now consider all this

00:16:59,430 --> 00:17:05,310
authorization business logic in their

00:17:01,110 --> 00:17:07,110
service but it really feels like the

00:17:05,310 --> 00:17:09,089
right thing to do and I think we all

00:17:07,110 --> 00:17:12,360
kind of came to an agreement that we'll

00:17:09,089 --> 00:17:14,390
be better off for it and I think the end

00:17:12,360 --> 00:17:19,140
result be way better than then otherwise

00:17:14,390 --> 00:17:20,370
so if I can wrap that up and kind of

00:17:19,140 --> 00:17:22,920
take away there is I think keep it

00:17:20,370 --> 00:17:24,780
simple so that may not be the right

00:17:22,920 --> 00:17:26,060
approach for you it may be actually more

00:17:24,780 --> 00:17:28,920
complicated for you to do it that way

00:17:26,060 --> 00:17:31,110
but don't make it more complicated than

00:17:28,920 --> 00:17:33,210
you can afford I guess so if you have

00:17:31,110 --> 00:17:36,420
logical abstractions like a gateway and

00:17:33,210 --> 00:17:38,700
then services use them and maybe if you

00:17:36,420 --> 00:17:41,490
don't in what you're growing consider

00:17:38,700 --> 00:17:42,750
planning to make those those layers so

00:17:41,490 --> 00:17:45,780
keep the API layer as thin as possible

00:17:42,750 --> 00:17:47,530
and allow services domain over their own

00:17:45,780 --> 00:17:48,880
business logic so they can change it as

00:17:47,530 --> 00:17:51,070
and the API doesn't need to know about

00:17:48,880 --> 00:17:53,500
it

00:17:51,070 --> 00:17:57,040
here's elected and shapers talk I highly

00:17:53,500 --> 00:17:58,780
recommend you watch this it's really

00:17:57,040 --> 00:18:03,850
good and that's where these ideas came

00:17:58,780 --> 00:18:07,510
from okay so we kind of figured out most

00:18:03,850 --> 00:18:08,800
of the nuts and bolts so at this point

00:18:07,510 --> 00:18:10,720
we were kind of like shopping around our

00:18:08,800 --> 00:18:12,910
prototypes of teams and showing the the

00:18:10,720 --> 00:18:14,800
potential of it like we were loading all

00:18:12,910 --> 00:18:19,030
the front page like logged out logged in

00:18:14,800 --> 00:18:21,010
and those are pages that took tens of

00:18:19,030 --> 00:18:22,270
rest requests to load and now we were

00:18:21,010 --> 00:18:24,490
just loading in a single graphical

00:18:22,270 --> 00:18:25,810
request so it became really obvious at

00:18:24,490 --> 00:18:27,400
this point that graph GL was something

00:18:25,810 --> 00:18:32,350
that we could really really benefit from

00:18:27,400 --> 00:18:34,960
and we were lucky to catch the our

00:18:32,350 --> 00:18:37,540
clients team at the start of a rewrite

00:18:34,960 --> 00:18:40,860
so they were they sought to like

00:18:37,540 --> 00:18:43,180
modernize their stack and kind of uh

00:18:40,860 --> 00:18:46,030
sort things out in the right way for

00:18:43,180 --> 00:18:50,050
them and they caught on to this

00:18:46,030 --> 00:18:52,030
graphical thing and all of a sudden went

00:18:50,050 --> 00:18:54,910
from just me contributing to graphic UL

00:18:52,030 --> 00:18:59,020
to like everyone and this really caught

00:18:54,910 --> 00:19:01,180
me off guard so we got lucky in finding

00:18:59,020 --> 00:19:02,920
support and I'm so thankful for this

00:19:01,180 --> 00:19:07,630
because it really kicked off our whole

00:19:02,920 --> 00:19:09,040
movement but suddenly we had a bunch of

00:19:07,630 --> 00:19:11,440
contributions to the API from all over

00:19:09,040 --> 00:19:14,800
the company and I just wasn't able to

00:19:11,440 --> 00:19:15,700
keep up so while the prototype was like

00:19:14,800 --> 00:19:19,090
super effective

00:19:15,700 --> 00:19:22,870
I want try to give you some tips on like

00:19:19,090 --> 00:19:24,580
what I wish I knew before it's like so

00:19:22,870 --> 00:19:28,420
you can anticipate the success and maybe

00:19:24,580 --> 00:19:34,360
you have a better time than then than I

00:19:28,420 --> 00:19:35,290
did so it's I was talking about I forgot

00:19:34,360 --> 00:19:37,420
about something about this but it's

00:19:35,290 --> 00:19:39,160
largely like impossible to give good

00:19:37,420 --> 00:19:40,630
advice about specific implementations on

00:19:39,160 --> 00:19:43,060
the back end of graph yo like there's

00:19:40,630 --> 00:19:44,170
some things that come out but I think

00:19:43,060 --> 00:19:45,670
there's so many trade-offs they have to

00:19:44,170 --> 00:19:47,500
make that largely depend on like the

00:19:45,670 --> 00:19:50,020
skill operate and the technological

00:19:47,500 --> 00:19:52,150
choices that you made that it's not

00:19:50,020 --> 00:19:54,820
always clear like what works for one

00:19:52,150 --> 00:19:56,620
company may not work for another so when

00:19:54,820 --> 00:19:58,030
you find practices that are good for you

00:19:56,620 --> 00:20:01,070
and your implementation and document

00:19:58,030 --> 00:20:03,019
them and really be aggressive about this

00:20:01,070 --> 00:20:04,429
and explain why you're taking the

00:20:03,019 --> 00:20:06,590
current approach so that when the next

00:20:04,429 --> 00:20:08,809
developer picks it up and they also have

00:20:06,590 --> 00:20:10,820
no idea about graph QL it's a little bit

00:20:08,809 --> 00:20:12,289
less of a shock for them and they'll

00:20:10,820 --> 00:20:17,149
have a great reference to work off of

00:20:12,289 --> 00:20:19,429
and won't be so lost and kind of in the

00:20:17,149 --> 00:20:21,279
same vein when you find something that

00:20:19,429 --> 00:20:23,299
works for your schema and for your data

00:20:21,279 --> 00:20:27,230
write it down on a style guide and

00:20:23,299 --> 00:20:28,789
iterate on it so we're continuously

00:20:27,230 --> 00:20:30,350
working on ours as we find things that

00:20:28,789 --> 00:20:32,840
work and things that don't and they

00:20:30,350 --> 00:20:34,789
break down in certain situations but I

00:20:32,840 --> 00:20:37,730
think it's super invaluable to have one

00:20:34,789 --> 00:20:40,519
and I wish it would start writing one

00:20:37,730 --> 00:20:41,869
earlier from the style guide and from

00:20:40,519 --> 00:20:43,850
the documentation you can start to write

00:20:41,869 --> 00:20:46,519
linters and this kind of automates the

00:20:43,850 --> 00:20:50,179
style of this automates the effort of

00:20:46,519 --> 00:20:52,070
enforcing the style guide and kind of

00:20:50,179 --> 00:20:53,509
takes away the need for the mechanical

00:20:52,070 --> 00:20:56,480
feedback and pull requests that you may

00:20:53,509 --> 00:20:58,070
get from onboarding new developers into

00:20:56,480 --> 00:21:00,169
contributing to your graphical code base

00:20:58,070 --> 00:21:02,659
and it helps new developers get up to

00:21:00,169 --> 00:21:05,960
speed without really requiring them to

00:21:02,659 --> 00:21:10,940
ask you a is this okay

00:21:05,960 --> 00:21:12,859
you can just say run the linter fight

00:21:10,940 --> 00:21:16,369
boilerplate so I think this may be a

00:21:12,859 --> 00:21:18,049
little bit more a function of the

00:21:16,369 --> 00:21:20,539
language we use so we use go on the back

00:21:18,049 --> 00:21:22,070
end like I mentioned and it seems like

00:21:20,539 --> 00:21:23,389
for my experiences that there's a lot of

00:21:22,070 --> 00:21:26,840
boilerplate involved in getting some

00:21:23,389 --> 00:21:29,119
some types working in the API and that

00:21:26,840 --> 00:21:30,549
looks like this so that's our user type

00:21:29,119 --> 00:21:33,859
that we introduced a couple slides back

00:21:30,549 --> 00:21:36,529
it's got an ID in our name and the way

00:21:33,859 --> 00:21:39,259
that translate in our implementation is

00:21:36,529 --> 00:21:41,149
we make a user resolver struct and then

00:21:39,259 --> 00:21:45,289
that user resolver struct has methods on

00:21:41,149 --> 00:21:47,840
it that map directly to those names so

00:21:45,289 --> 00:21:50,149
you can see here all it's really doing

00:21:47,840 --> 00:21:52,700
is like loading the user checking some

00:21:50,149 --> 00:21:55,399
errors or if it's not there and then

00:21:52,700 --> 00:21:56,600
just returning a value so that's that's

00:21:55,399 --> 00:21:57,739
pretty boring stuff and you don't really

00:21:56,600 --> 00:22:04,100
want to get into the business of writing

00:21:57,739 --> 00:22:07,580
that so you'll come start rescue here

00:22:04,100 --> 00:22:10,940
and it's actually really easy to

00:22:07,580 --> 00:22:13,410
generate code and go so that's what we

00:22:10,940 --> 00:22:15,210
do and I encourage you to do the same in

00:22:13,410 --> 00:22:16,260
in your implementation maybe even if

00:22:15,210 --> 00:22:17,850
there's not so much of a boilerplate

00:22:16,260 --> 00:22:18,870
involved but just to kind of enforce

00:22:17,850 --> 00:22:21,780
standards or to like give your

00:22:18,870 --> 00:22:25,470
developers a good set of rails to to

00:22:21,780 --> 00:22:30,390
ride on so to speak right now we're just

00:22:25,470 --> 00:22:32,490
generating our resolver kind of schema

00:22:30,390 --> 00:22:34,230
so pretty much everything but the last

00:22:32,490 --> 00:22:37,740
like return value where we have to know

00:22:34,230 --> 00:22:41,030
what the the schema field maps to in at

00:22:37,740 --> 00:22:43,710
the service layer at the model there

00:22:41,030 --> 00:22:46,830
that's that like last line is only one

00:22:43,710 --> 00:22:48,180
we need to really write our backends are

00:22:46,830 --> 00:22:50,550
kind of nebulous and they're not really

00:22:48,180 --> 00:22:52,350
standardized but as they move towards

00:22:50,550 --> 00:22:55,650
that way and as they maybe implement

00:22:52,350 --> 00:22:58,680
like IDL's like G RPC or protobuf or

00:22:55,650 --> 00:23:01,500
thrift or whatever maybe the dream is to

00:22:58,680 --> 00:23:03,840
kind of tie that to the graph QL schema

00:23:01,500 --> 00:23:06,660
and then generate the full thing front

00:23:03,840 --> 00:23:14,250
to back so essentially requiring teams

00:23:06,660 --> 00:23:16,440
not to code anything in the API layer so

00:23:14,250 --> 00:23:19,380
I'm gonna make maybe a bold statement

00:23:16,440 --> 00:23:21,630
claiming that graphical knowledge share

00:23:19,380 --> 00:23:23,430
to your colleagues is probably an order

00:23:21,630 --> 00:23:25,430
of magnitude harder than any of the

00:23:23,430 --> 00:23:29,280
technical challenges in building an API

00:23:25,430 --> 00:23:31,650
so be really aggressive about automating

00:23:29,280 --> 00:23:33,360
that knowledge share that's something I

00:23:31,650 --> 00:23:34,500
really hadn't considered but I think

00:23:33,360 --> 00:23:38,400
would have made a big difference in

00:23:34,500 --> 00:23:41,520
getting stuff to speed it's kind of

00:23:38,400 --> 00:23:44,670
makes me think of a quote that maybe

00:23:41,520 --> 00:23:47,040
you've heard before but it goes if you

00:23:44,670 --> 00:23:51,030
want to go fast go alone and if you want

00:23:47,040 --> 00:23:52,920
to go far go together and I think that's

00:23:51,030 --> 00:23:54,390
super valid here like we were able to

00:23:52,920 --> 00:23:57,570
iterate really fast just like me I'm

00:23:54,390 --> 00:24:03,810
working on prototype but I can't like

00:23:57,570 --> 00:24:05,190
rewrite twitch myself so if you do want

00:24:03,810 --> 00:24:08,280
to see the rewritten website I encourage

00:24:05,190 --> 00:24:10,290
you to check it out on go twitch.tv

00:24:08,280 --> 00:24:12,780
and compare it with the experience on

00:24:10,290 --> 00:24:15,180
old twitch there's like a beta flag you

00:24:12,780 --> 00:24:17,310
can you can select to go back to the old

00:24:15,180 --> 00:24:18,630
version I hope you find that it loads

00:24:17,310 --> 00:24:23,190
like much faster and so just a nicer

00:24:18,630 --> 00:24:24,090
experience in general I think I have one

00:24:23,190 --> 00:24:25,770
more minute so I'm gonna power through

00:24:24,090 --> 00:24:26,440
this I have some bonus slides that

00:24:25,770 --> 00:24:30,070
didn't really

00:24:26,440 --> 00:24:34,470
like prototype timeline but I wish I

00:24:30,070 --> 00:24:36,879
knew this before I started as well so

00:24:34,470 --> 00:24:38,110
with respecting all ability I made a

00:24:36,879 --> 00:24:42,220
pretty subtle mistake in our early

00:24:38,110 --> 00:24:48,370
prototype that propagated to our our

00:24:42,220 --> 00:24:50,710
current application and you can see here

00:24:48,370 --> 00:24:53,980
we have the user query with a noble user

00:24:50,710 --> 00:24:56,649
type returned and the quarry at the top

00:24:53,980 --> 00:24:58,809
is specifically designed to demonstrate

00:24:56,649 --> 00:25:03,700
this nobility fail so we asked for a

00:24:58,809 --> 00:25:06,370
user that does not exist and the way

00:25:03,700 --> 00:25:09,279
we've implemented our API now which

00:25:06,370 --> 00:25:12,220
lazily loads the user until the field is

00:25:09,279 --> 00:25:13,779
resolved so the thought was like hey we

00:25:12,220 --> 00:25:15,820
probably don't need to make the extra

00:25:13,779 --> 00:25:17,669
lookup if the ID is good we just passed

00:25:15,820 --> 00:25:20,259
it to you that the next service and

00:25:17,669 --> 00:25:23,289
we're good we've optimized the calls

00:25:20,259 --> 00:25:26,289
awesomely but this is really not the

00:25:23,289 --> 00:25:30,009
response we want at all it should

00:25:26,289 --> 00:25:32,669
actually look more like like this so

00:25:30,009 --> 00:25:35,019
this has caused us a bunch of headaches

00:25:32,669 --> 00:25:36,309
on the client side because now you can't

00:25:35,019 --> 00:25:39,820
really trust what the schema is telling

00:25:36,309 --> 00:25:42,220
you so if I can give you any advice is

00:25:39,820 --> 00:25:47,740
don't prematurely optimize and load data

00:25:42,220 --> 00:25:50,019
at the node level and for errors do the

00:25:47,740 --> 00:25:54,700
minimum to make errors useful and assume

00:25:50,019 --> 00:25:56,019
that no one will really look at them so

00:25:54,700 --> 00:26:01,539
be lazy about it

00:25:56,019 --> 00:26:03,340
but you do want to if assume that people

00:26:01,539 --> 00:26:06,970
will just throw away the entire response

00:26:03,340 --> 00:26:08,559
if you if you give back errors but maybe

00:26:06,970 --> 00:26:09,940
be nice to clients that want to do more

00:26:08,559 --> 00:26:11,950
sophisticated behavior around that and

00:26:09,940 --> 00:26:15,549
given them enough information like where

00:26:11,950 --> 00:26:16,929
the the path they are occurring or maybe

00:26:15,549 --> 00:26:21,340
like just some simple code that you can

00:26:16,929 --> 00:26:23,620
use to translate for mutations

00:26:21,340 --> 00:26:25,870
specifically in errors there's a special

00:26:23,620 --> 00:26:27,730
case I think that our validation errors

00:26:25,870 --> 00:26:33,279
and those should probably go on the

00:26:27,730 --> 00:26:35,440
payload the mutation payload reserve the

00:26:33,279 --> 00:26:37,029
areas for the like the the the bottom

00:26:35,440 --> 00:26:39,070
level errors array for service type

00:26:37,029 --> 00:26:39,570
issues where you're comfortable throwing

00:26:39,070 --> 00:26:42,570
just

00:26:39,570 --> 00:26:45,090
tire response away there's a good

00:26:42,570 --> 00:26:47,340
article on designing mutations that

00:26:45,090 --> 00:26:49,050
talks about like payloads in inputs and

00:26:47,340 --> 00:26:53,940
stuff like that so I encourage you to

00:26:49,050 --> 00:26:55,680
check that out so who knows what's next

00:26:53,940 --> 00:26:57,540
I'm not really sure maybe we'll add

00:26:55,680 --> 00:26:59,160
subscriptions or something I don't

00:26:57,540 --> 00:27:01,610
really know I'm looking looking forward

00:26:59,160 --> 00:27:04,020
to just reveling in this success so

00:27:01,610 --> 00:27:05,370
thanks guys for listening I hope it

00:27:04,020 --> 00:27:08,820
encourages you to continue your journey

00:27:05,370 --> 00:27:09,960
or start it wherever you may be but

00:27:08,820 --> 00:27:14,989
thanks

00:27:09,960 --> 00:27:14,989

YouTube URL: https://www.youtube.com/watch?v=BRMzYompjAM


