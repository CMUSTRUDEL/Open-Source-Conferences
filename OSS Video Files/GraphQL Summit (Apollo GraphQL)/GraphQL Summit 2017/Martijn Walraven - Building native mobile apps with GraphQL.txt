Title: Martijn Walraven - Building native mobile apps with GraphQL
Publication date: 2017-11-07
Playlist: GraphQL Summit 2017
Description: 
	Martijn Walraven, Open Source Developer at Apollo, gave this talk at GraphQL Summit 2017. Learn more: summit.graphql.com

Development of GraphQL started in 2012 as part of Facebookâ€™s effort to move from web-based to truly native mobile apps, and GraphQL has powered Facebookâ€™s main iOS and Android apps for the last five years. There is a lot to learn from the native GraphQL clients Facebook has developed for internal use over the years. In this session, I will talk about the Apollo community's efforts to take those lessons, and build fully-featured open source GraphQL clients for Android and iOS. Both Apollo Android and Apollo iOS have [will have in October] recently reached 1.0, and I will discuss some of the latest developments and future plans for both projects.
Captions: 
	00:00:03,379 --> 00:00:10,430
hi I'm Martin Martin more even I am an

00:00:08,209 --> 00:00:13,309
open source developer on the Apollo team

00:00:10,430 --> 00:00:16,850
and I'll be talking about building

00:00:13,309 --> 00:00:18,920
native mobile apps with graph QL and you

00:00:16,850 --> 00:00:20,870
might be thinking that sounds really

00:00:18,920 --> 00:00:22,820
interesting like we've been using Pratt

00:00:20,870 --> 00:00:26,150
QL with Web Apps and now we're taking it

00:00:22,820 --> 00:00:28,460
to native that sounds interesting maybe

00:00:26,150 --> 00:00:33,920
it's experimental maybe it's something

00:00:28,460 --> 00:00:36,230
new but in fact this is the first the

00:00:33,920 --> 00:00:39,170
first ever app that used graph QL this

00:00:36,230 --> 00:00:43,069
is a fully native app it's been in

00:00:39,170 --> 00:00:46,550
production since 2012 and what's

00:00:43,069 --> 00:00:48,829
interesting about this is that there was

00:00:46,550 --> 00:00:50,960
in the context of this app the first

00:00:48,829 --> 00:00:53,389
sort of modern native version of the

00:00:50,960 --> 00:00:56,600
main Facebook app that graph draw was

00:00:53,389 --> 00:00:59,149
developed was created so the team that

00:00:56,600 --> 00:01:02,420
was responsible for the rewrite the team

00:00:59,149 --> 00:01:04,820
at Facebook actually came up with graph

00:01:02,420 --> 00:01:08,530
QL as a direct result of thinking about

00:01:04,820 --> 00:01:11,600
sort of the best way of writing a

00:01:08,530 --> 00:01:14,479
writing an API for mobile apps so it's

00:01:11,600 --> 00:01:19,219
no coincidence that graph QL is a really

00:01:14,479 --> 00:01:22,609
great match for mobile apps and I'd like

00:01:19,219 --> 00:01:25,549
to tell you a little bit more about sort

00:01:22,609 --> 00:01:30,950
of why I think mobile developers should

00:01:25,549 --> 00:01:32,659
be really excited about graph QL and so

00:01:30,950 --> 00:01:34,789
we know what the answer to the question

00:01:32,659 --> 00:01:37,479
sort of what would a great mobile a

00:01:34,789 --> 00:01:40,789
great app for mobile apps look like is

00:01:37,479 --> 00:01:42,590
and if I would have to say that in one

00:01:40,789 --> 00:01:44,479
sentence I would say it's it's really

00:01:42,590 --> 00:01:46,609
the ability for clients to specify their

00:01:44,479 --> 00:01:51,799
data needs against those capabilities

00:01:46,609 --> 00:01:54,320
that the server exposes and imagine

00:01:51,799 --> 00:01:56,479
yourself sort of explaining this to a

00:01:54,320 --> 00:01:58,310
mobile developer or convincing yourself

00:01:56,479 --> 00:02:01,009
as a mobile developer that using graph

00:01:58,310 --> 00:02:03,770
QL is a great idea the first thing you

00:02:01,009 --> 00:02:05,359
might come up with and this is again

00:02:03,770 --> 00:02:07,429
especially important for mobile

00:02:05,359 --> 00:02:09,679
developers is that there's a great

00:02:07,429 --> 00:02:12,830
performance benefit to using graph gel

00:02:09,679 --> 00:02:16,819
over something like rests so using graph

00:02:12,830 --> 00:02:20,060
QL allows you to avoid over fetching

00:02:16,819 --> 00:02:22,760
it avoids sending data that you don't

00:02:20,060 --> 00:02:24,590
actually need for your UI which of

00:02:22,760 --> 00:02:28,250
course is especially important on mobile

00:02:24,590 --> 00:02:30,830
networks maybe even more important it

00:02:28,250 --> 00:02:34,010
avoids extra round trips so mobile

00:02:30,830 --> 00:02:37,130
networks in particular often have fairly

00:02:34,010 --> 00:02:39,739
high latency so if you sort of first

00:02:37,130 --> 00:02:41,989
have to get data and then based on that

00:02:39,739 --> 00:02:43,549
data perform additional requests to get

00:02:41,989 --> 00:02:48,830
other data that you also need for your

00:02:43,549 --> 00:02:51,590
UI some of that can get pretty slow but

00:02:48,830 --> 00:02:54,110
I think right after sort of listing

00:02:51,590 --> 00:02:56,170
these benefits it quickly becomes clear

00:02:54,110 --> 00:03:00,170
that this is just part of the story so

00:02:56,170 --> 00:03:07,040
graph QL is definitely not just about

00:03:00,170 --> 00:03:08,569
performance and I think one of the main

00:03:07,040 --> 00:03:11,660
benefits and a lot of a lot of other

00:03:08,569 --> 00:03:13,790
talks have mentioned these as well is

00:03:11,660 --> 00:03:18,440
that it empowers and unblocks app

00:03:13,790 --> 00:03:19,819
developers and I think mobile teams in

00:03:18,440 --> 00:03:21,230
most companies are separate teams

00:03:19,819 --> 00:03:23,030
they're separate from the backend they

00:03:21,230 --> 00:03:25,010
usually sort of use use different

00:03:23,030 --> 00:03:30,200
languages they have a very different

00:03:25,010 --> 00:03:33,019
culture and there's often sort of a bit

00:03:30,200 --> 00:03:34,970
of conflict between the mobile

00:03:33,019 --> 00:03:39,290
developers and the back-end developers

00:03:34,970 --> 00:03:45,410
because from a mobile developer once the

00:03:39,290 --> 00:03:47,180
data for a particular screen or flow as

00:03:45,410 --> 00:03:49,790
efficiently as possible but back-end

00:03:47,180 --> 00:03:52,160
developers really don't want to write

00:03:49,790 --> 00:03:55,340
app or even add version specific

00:03:52,160 --> 00:03:57,769
endpoints so the idea of craft QL is

00:03:55,340 --> 00:03:59,510
really that back-end developers can

00:03:57,769 --> 00:04:01,299
focus on exposing those capabilities

00:03:59,510 --> 00:04:03,950
they don't have to write endpoints and

00:04:01,299 --> 00:04:05,120
app developers can focus on what they're

00:04:03,950 --> 00:04:08,599
good at

00:04:05,120 --> 00:04:10,910
writing a great UI and a they can use

00:04:08,599 --> 00:04:13,220
graph QL to describe those data

00:04:10,910 --> 00:04:18,260
requirements for the their UI in a very

00:04:13,220 --> 00:04:23,120
convenient way one sort of other benefit

00:04:18,260 --> 00:04:25,370
of graph QL that seem more important for

00:04:23,120 --> 00:04:27,260
mobile developers than for web

00:04:25,370 --> 00:04:31,249
developers is the idea of continuous

00:04:27,260 --> 00:04:33,869
schema evolution so mobile apps

00:04:31,249 --> 00:04:36,629
tend to stay out in the wild for a long

00:04:33,869 --> 00:04:38,729
time people don't always upgrade they're

00:04:36,629 --> 00:04:42,149
not always able to upgrade because

00:04:38,729 --> 00:04:45,270
they're all devices they're not able to

00:04:42,149 --> 00:04:47,639
run the latest OS version and it's also

00:04:45,270 --> 00:04:50,039
maybe they're they they don't really

00:04:47,639 --> 00:04:51,479
feel like upgrading it's a depending on

00:04:50,039 --> 00:04:53,939
your operating system it's actually in

00:04:51,479 --> 00:04:56,339
action you have to take so you often

00:04:53,939 --> 00:05:00,979
have to deal with versions that can be

00:04:56,339 --> 00:05:04,559
sort of years out-of-date and if you use

00:05:00,979 --> 00:05:07,139
restful api that means you sort of have

00:05:04,559 --> 00:05:08,939
to keep up those different versions and

00:05:07,139 --> 00:05:10,559
you have to keep supporting them or you

00:05:08,939 --> 00:05:14,099
have to drop support for older clients

00:05:10,559 --> 00:05:15,719
with ref ql you can just keep evolving

00:05:14,099 --> 00:05:17,819
your schema and all the clients will

00:05:15,719 --> 00:05:22,619
will keep working and in fact at

00:05:17,819 --> 00:05:24,689
Facebook the claim is that even the

00:05:22,619 --> 00:05:26,369
original app from 2012 still runs

00:05:24,689 --> 00:05:32,009
against the same endpoint so that's

00:05:26,369 --> 00:05:33,869
quite impressive one really important

00:05:32,009 --> 00:05:36,110
point that I want to make for mobile

00:05:33,869 --> 00:05:38,580
developers is that adopting graph QL

00:05:36,110 --> 00:05:40,680
doesn't require you to sort of rewrite

00:05:38,580 --> 00:05:41,669
your complete mobile app it's quite easy

00:05:40,680 --> 00:05:46,169
to get started

00:05:41,669 --> 00:05:49,349
so graph QL from the client perspective

00:05:46,169 --> 00:05:53,309
is no more than a simple HTTP request in

00:05:49,349 --> 00:05:56,519
the common case and you can use any HTTP

00:05:53,309 --> 00:05:58,979
client or client library to perform a

00:05:56,519 --> 00:06:02,430
requests basically you can treat graph

00:05:58,979 --> 00:06:04,800
QL as an endpoint the only difference is

00:06:02,430 --> 00:06:06,869
that you define the data for that

00:06:04,800 --> 00:06:10,889
endpoint on your client instead of on

00:06:06,869 --> 00:06:13,709
the server but the response you get back

00:06:10,889 --> 00:06:19,289
can be treated exactly the way you would

00:06:13,709 --> 00:06:21,209
treat a response from a REST API of

00:06:19,289 --> 00:06:22,619
course there's more you can do and it's

00:06:21,209 --> 00:06:25,559
here that we've really learned a lot

00:06:22,619 --> 00:06:27,209
from the the Facebook teams that have

00:06:25,559 --> 00:06:28,949
worked on the mobile apps the internal

00:06:27,209 --> 00:06:30,629
Facebook libraries in both iOS and

00:06:28,949 --> 00:06:35,430
Android have some really advanced

00:06:30,629 --> 00:06:39,050
capabilities and in the Apollo community

00:06:35,430 --> 00:06:42,309
we've worked on iOS Android versions of

00:06:39,050 --> 00:06:45,789
native clients that take advantage of

00:06:42,309 --> 00:06:48,459
those same capabilities and to start out

00:06:45,789 --> 00:06:51,009
there's the idea of aesthetic type

00:06:48,459 --> 00:06:54,879
safety so graph Jia has a great type

00:06:51,009 --> 00:06:58,019
system but the results you get back in

00:06:54,879 --> 00:07:00,849
most cases is Jason and dealing with

00:06:58,019 --> 00:07:04,119
untyped Jason from a type language like

00:07:00,849 --> 00:07:06,429
Swift of Java or Java it's a real pain

00:07:04,119 --> 00:07:08,469
end up sort of having two castes having

00:07:06,429 --> 00:07:12,999
to deal with errors manually or you have

00:07:08,469 --> 00:07:14,919
to write a mapping layer and it's a

00:07:12,999 --> 00:07:16,869
shame because you do have type

00:07:14,919 --> 00:07:18,369
information available in your schema

00:07:16,869 --> 00:07:23,309
there's a clearly defined contract

00:07:18,369 --> 00:07:23,309
between the client and the server so

00:07:24,029 --> 00:07:31,559
I'll be showing this in Xcode Apollo iOS

00:07:27,819 --> 00:07:34,719
the experience in Android is similar

00:07:31,559 --> 00:07:39,159
what these native clients allow you to

00:07:34,719 --> 00:07:43,839
do is generate code based on your graph

00:07:39,159 --> 00:07:50,069
QL query so here for instance the query

00:07:43,839 --> 00:07:52,929
that gets posts gets translated into a

00:07:50,069 --> 00:07:55,539
into a data object and every time I make

00:07:52,929 --> 00:07:59,110
a change to my query so if I remove the

00:07:55,539 --> 00:08:01,869
title here for instance I get a compile

00:07:59,110 --> 00:08:05,049
time error I can be sure that the data I

00:08:01,869 --> 00:08:09,269
I try to sort of bind to my UI is

00:08:05,049 --> 00:08:13,539
actually there and it works both ways so

00:08:09,269 --> 00:08:16,119
if I try to fetch data that isn't part

00:08:13,539 --> 00:08:20,349
of the schema I get a sort of nice

00:08:16,119 --> 00:08:22,360
inline validation error so this really

00:08:20,349 --> 00:08:25,749
improves the developer experience you

00:08:22,360 --> 00:08:27,569
can and that's what I was referring to

00:08:25,749 --> 00:08:30,309
with the idea of static type safety

00:08:27,569 --> 00:08:33,309
there are other benefits and I can't

00:08:30,309 --> 00:08:35,279
really go into too much detail here for

00:08:33,309 --> 00:08:38,759
those of you who are familiar with

00:08:35,279 --> 00:08:42,309
clients like Apollo client and relay

00:08:38,759 --> 00:08:44,680
know about normalized caching and this

00:08:42,309 --> 00:08:48,250
is a big benefit for mobile apps as well

00:08:44,680 --> 00:08:50,379
especially if you if you make the cache

00:08:48,250 --> 00:08:52,439
persistent and it really allows you to

00:08:50,379 --> 00:08:55,149
sort of keep query results consistent

00:08:52,439 --> 00:08:56,140
improve the performance of your app by

00:08:55,149 --> 00:09:01,030
loading

00:08:56,140 --> 00:09:03,040
data from a persistent cache and it can

00:09:01,030 --> 00:09:06,160
also fundamentally change a programming

00:09:03,040 --> 00:09:08,320
model of your app when you switch from

00:09:06,160 --> 00:09:11,470
sort of model view controller to more

00:09:08,320 --> 00:09:14,640
one one way dataflow architectures it's

00:09:11,470 --> 00:09:17,230
it's really suited for that

00:09:14,640 --> 00:09:21,040
so I mentioned Apollo iOS and Apollo

00:09:17,230 --> 00:09:23,140
Android to community projects we have a

00:09:21,040 --> 00:09:26,430
great list of sort of contributors and

00:09:23,140 --> 00:09:31,240
users these are some of the people that

00:09:26,430 --> 00:09:34,900
are using these these clients if you're

00:09:31,240 --> 00:09:37,990
interested please join join our slack

00:09:34,900 --> 00:09:41,260
channel get in touch start using the

00:09:37,990 --> 00:09:44,560
clients open issues contribute open PRS

00:09:41,260 --> 00:09:47,620
and I'm looking forward to working with

00:09:44,560 --> 00:09:49,770
more mobile developers on improving

00:09:47,620 --> 00:09:57,600
these clients

00:09:49,770 --> 00:09:57,600

YouTube URL: https://www.youtube.com/watch?v=jSB0X05GXP4


