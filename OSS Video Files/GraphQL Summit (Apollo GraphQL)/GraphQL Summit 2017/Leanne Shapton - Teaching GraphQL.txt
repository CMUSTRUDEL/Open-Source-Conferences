Title: Leanne Shapton - Teaching GraphQL
Publication date: 2017-11-07
Playlist: GraphQL Summit 2017
Description: 
	Leanne Shapton, Software Developer at Shopify, gave this talk at GraphQL Summit 2017. Learn more: summit.graphql.com

Youâ€™ve made the technical decision to start using GraphQL. Now, how do you level up the rest of your team? This talk will introduce a mental model of GraphQL to make learning more efficient for beginners. The concept map will explain relationships between existing knowledge (e.g. REST, CRUD and client-server basics) and group GraphQL concepts. We'll also highlight common errors made by first-time GraphQL users.

See a blog version of this talk here: https://medium.com/@leeshapton/mental-maps-for-teaching-graphql-to-beginners-9db9b85ac957
Captions: 
	00:00:03,520 --> 00:00:08,450
thanks so much for that introduction we

00:00:05,930 --> 00:00:12,019
I'm really excited to be here so thank

00:00:08,450 --> 00:00:15,530
you for having me as mentioned my name

00:00:12,019 --> 00:00:18,320
is Leanne Shapton I work at Shopify I'm

00:00:15,530 --> 00:00:21,560
a software developer they're located in

00:00:18,320 --> 00:00:24,170
Toronto Canada Shopify is an e-commerce

00:00:21,560 --> 00:00:26,740
platform that allows people to sell

00:00:24,170 --> 00:00:29,089
products online like many platforms

00:00:26,740 --> 00:00:31,910
Shopify encourages third-party

00:00:29,089 --> 00:00:34,399
developers to build apps and services on

00:00:31,910 --> 00:00:36,649
top of our software and the work I do is

00:00:34,399 --> 00:00:39,730
primarily around extending Shopify

00:00:36,649 --> 00:00:43,399
platform to enable developers to do this

00:00:39,730 --> 00:00:45,739
so I joined Shopify actually back in

00:00:43,399 --> 00:00:48,649
January of this year when I started I

00:00:45,739 --> 00:00:50,660
joined the storefront API team at the

00:00:48,649 --> 00:00:52,760
time the team was busy preparing to

00:00:50,660 --> 00:00:56,000
launch Shopify his first public graph QL

00:00:52,760 --> 00:00:58,300
API which they successfully did this

00:00:56,000 --> 00:01:01,059
spring at our conference called unite in

00:00:58,300 --> 00:01:04,010
prepping for this launch my

00:01:01,059 --> 00:01:06,259
responsibility was to create example

00:01:04,010 --> 00:01:09,729
react apps that would show developers

00:01:06,259 --> 00:01:12,560
how to consume our new graph QL API

00:01:09,729 --> 00:01:14,420
before joining Shopify I had heard of

00:01:12,560 --> 00:01:17,869
graph QL but I had not yet worked with

00:01:14,420 --> 00:01:19,340
it so I began the process that as a

00:01:17,869 --> 00:01:23,840
software developers are all too familiar

00:01:19,340 --> 00:01:26,450
with is learning a new language if you

00:01:23,840 --> 00:01:28,700
read my description to my talk teaching

00:01:26,450 --> 00:01:30,740
graph QL lessons from a beginner you

00:01:28,700 --> 00:01:33,200
either related it to it because you

00:01:30,740 --> 00:01:35,420
yourself are new to graph QL or your

00:01:33,200 --> 00:01:37,579
team lead and your company has decided

00:01:35,420 --> 00:01:39,500
to adopt graph QL as part of their stack

00:01:37,579 --> 00:01:42,470
and you're responsible with her teaching

00:01:39,500 --> 00:01:44,240
the rest of your team so what we'll talk

00:01:42,470 --> 00:01:46,040
about today is I actually I'm gonna

00:01:44,240 --> 00:01:49,549
speak about my experience learning graph

00:01:46,040 --> 00:01:51,350
QL and also speak to other developers

00:01:49,549 --> 00:01:53,780
that Shopify their experience learning

00:01:51,350 --> 00:01:55,880
graph QL but I wanted to talk about how

00:01:53,780 --> 00:01:57,500
we learn new skills just briefly I'm

00:01:55,880 --> 00:02:00,530
going to introduce a model for learning

00:01:57,500 --> 00:02:01,850
new skills and we'll see in this model

00:02:00,530 --> 00:02:04,399
that there's a big difference between

00:02:01,850 --> 00:02:05,990
beginners and experts and how they see a

00:02:04,399 --> 00:02:08,360
problem and how they tackle a problem

00:02:05,990 --> 00:02:11,090
and using that information I'm gonna

00:02:08,360 --> 00:02:15,190
deliver tools that I think are useful

00:02:11,090 --> 00:02:15,190
for teaching graph QL to beginners

00:02:15,590 --> 00:02:18,680
so starting with a model for learning

00:02:17,090 --> 00:02:20,870
new skills we have all been there as

00:02:18,680 --> 00:02:22,730
beginners we've all started to learn

00:02:20,870 --> 00:02:24,530
something new and sometimes things come

00:02:22,730 --> 00:02:27,920
really easily and sometimes they just

00:02:24,530 --> 00:02:29,989
don't stick so in educational research

00:02:27,920 --> 00:02:32,569
there's this thing called the Dreyfus

00:02:29,989 --> 00:02:34,910
model of skill acquisition it is a 5

00:02:32,569 --> 00:02:36,560
stage model that explains each learner

00:02:34,910 --> 00:02:40,130
will go through these different stages

00:02:36,560 --> 00:02:42,230
as they acquire new skills I first heard

00:02:40,130 --> 00:02:44,569
about this model at a workshop in

00:02:42,230 --> 00:02:47,090
Toronto by Greg Wilson called how to

00:02:44,569 --> 00:02:49,069
teach programming and other things Greg

00:02:47,090 --> 00:02:51,769
took this 5 stage model and actually

00:02:49,069 --> 00:02:55,040
simplified it into a 3 stage model I'm

00:02:51,769 --> 00:02:57,620
gonna actually use his 3 stage model for

00:02:55,040 --> 00:02:59,450
the purpose of my talk today so when you

00:02:57,620 --> 00:03:01,700
start learning something new you would

00:02:59,450 --> 00:03:03,920
identify as a beginner at this stage you

00:03:01,700 --> 00:03:06,200
don't know what you don't know you will

00:03:03,920 --> 00:03:08,810
make false associations based on surface

00:03:06,200 --> 00:03:10,730
similarities for example you may hear

00:03:08,810 --> 00:03:12,709
grass QL and think it's a programming

00:03:10,730 --> 00:03:15,170
language that makes charts because those

00:03:12,709 --> 00:03:17,060
are the types of grass that you know it

00:03:15,170 --> 00:03:19,459
is not and it will be clear in the tools

00:03:17,060 --> 00:03:25,459
that I show later but this is not that

00:03:19,459 --> 00:03:28,910
crazy of an idea because it's not that

00:03:25,459 --> 00:03:30,709
crazy of an idea because if you are new

00:03:28,910 --> 00:03:33,410
to a new domain you don't have enough

00:03:30,709 --> 00:03:35,090
context and therefore you rely on other

00:03:33,410 --> 00:03:36,739
domain knowledge that you do know to

00:03:35,090 --> 00:03:38,650
fill in those gaps and this is sometimes

00:03:36,739 --> 00:03:41,720
where you make false associations

00:03:38,650 --> 00:03:44,690
another common feeling amongst beginners

00:03:41,720 --> 00:03:46,370
is that feeling of being stuck we don't

00:03:44,690 --> 00:03:48,769
have the experience if you're new to a

00:03:46,370 --> 00:03:50,480
new domain to look at a problem and know

00:03:48,769 --> 00:03:51,670
what's important about that problem and

00:03:50,480 --> 00:03:54,170
the steps to solve that problem

00:03:51,670 --> 00:03:55,880
therefore you require step-by-step

00:03:54,170 --> 00:03:58,359
instructions to do anything in that

00:03:55,880 --> 00:04:02,859
domain this is very frustrating as

00:03:58,359 --> 00:04:04,970
beginners as you develop new context and

00:04:02,859 --> 00:04:06,319
gain more knowledge you graduate from

00:04:04,970 --> 00:04:07,970
being a beginner to a competent

00:04:06,319 --> 00:04:10,040
practitioner and this is a really good

00:04:07,970 --> 00:04:12,859
place to be because you've developed a

00:04:10,040 --> 00:04:15,609
useable mental model that is good enough

00:04:12,859 --> 00:04:18,380
to solve normal everyday problems

00:04:15,609 --> 00:04:20,600
another thing when you're competent

00:04:18,380 --> 00:04:22,580
practitioner is that your mental model

00:04:20,600 --> 00:04:24,260
may not be completely accurate but

00:04:22,580 --> 00:04:26,450
that's ok for example you can drive a

00:04:24,260 --> 00:04:27,930
car every single day and know how to

00:04:26,450 --> 00:04:29,550
change the oil or two

00:04:27,930 --> 00:04:32,610
to the tire but you would still bring

00:04:29,550 --> 00:04:34,380
your car to a mechanic to get the brakes

00:04:32,610 --> 00:04:35,990
fixed you have a good enough mental

00:04:34,380 --> 00:04:37,800
model to use your car every day

00:04:35,990 --> 00:04:39,210
another thing that competent

00:04:37,800 --> 00:04:40,979
practitioners do because they have

00:04:39,210 --> 00:04:43,080
enough experience they can look at a

00:04:40,979 --> 00:04:45,000
problem identify what's important about

00:04:43,080 --> 00:04:47,550
that problem and know the steps to solve

00:04:45,000 --> 00:04:50,970
that so they imply analytical

00:04:47,550 --> 00:04:52,590
decision-making as you gain a lot of

00:04:50,970 --> 00:04:55,139
experience you graduate from a competent

00:04:52,590 --> 00:04:56,970
practitioner up to an expert at this

00:04:55,139 --> 00:04:58,770
level your mental model is actually so

00:04:56,970 --> 00:05:00,479
complex that you may not know the

00:04:58,770 --> 00:05:02,340
individual components that make this up

00:05:00,479 --> 00:05:04,139
and therefore you will look at a

00:05:02,340 --> 00:05:06,060
solution and intuitively know the answer

00:05:04,139 --> 00:05:07,949
if this is almost like second nature so

00:05:06,060 --> 00:05:09,690
it's hard to know you may not actually

00:05:07,949 --> 00:05:12,900
recognize the steps that you take to

00:05:09,690 --> 00:05:14,310
solve a problem because you have so much

00:05:12,900 --> 00:05:14,940
experience in the domain that you

00:05:14,310 --> 00:05:17,430
intuitively

00:05:14,940 --> 00:05:19,470
know know the answer they say it takes

00:05:17,430 --> 00:05:21,360
about 10,000 hours of practice to become

00:05:19,470 --> 00:05:22,919
an expert so today we're not concerned

00:05:21,360 --> 00:05:24,810
with becoming experts but we all

00:05:22,919 --> 00:05:26,550
concerned with developing a good enough

00:05:24,810 --> 00:05:30,419
mental model so we can solve normal

00:05:26,550 --> 00:05:32,310
everyday problems in graph QL so a big

00:05:30,419 --> 00:05:34,229
difference between beginners and

00:05:32,310 --> 00:05:37,020
competent practitioners is knowledge and

00:05:34,229 --> 00:05:38,760
contacts knowledge is really easy to

00:05:37,020 --> 00:05:40,260
consume you can read a lot of text you

00:05:38,760 --> 00:05:42,599
can read the docs you can watch YouTube

00:05:40,260 --> 00:05:45,030
videos but it's the context that makes

00:05:42,599 --> 00:05:46,949
the difference without the context you

00:05:45,030 --> 00:05:49,139
don't have a mental model so that when

00:05:46,949 --> 00:05:51,300
you learn new information about graph QL

00:05:49,139 --> 00:05:53,280
you have no good place to store it and

00:05:51,300 --> 00:05:55,470
this makes remembering or retrieving

00:05:53,280 --> 00:05:56,610
that information later very difficult it

00:05:55,470 --> 00:05:58,500
makes learning actually not that

00:05:56,610 --> 00:06:00,270
effective so we're competent

00:05:58,500 --> 00:06:01,560
practitioners have a really good mental

00:06:00,270 --> 00:06:03,870
model so they learn more effectively

00:06:01,560 --> 00:06:05,669
when they hear new things about graph QL

00:06:03,870 --> 00:06:07,169
sitting in the audience listening to all

00:06:05,669 --> 00:06:09,210
these conference talks they're able to

00:06:07,169 --> 00:06:10,979
take that knowledge and store it in a

00:06:09,210 --> 00:06:12,389
good place so then later when you're

00:06:10,979 --> 00:06:16,050
back at work you can remember and

00:06:12,389 --> 00:06:18,030
retrieve that more efficiently so I've

00:06:16,050 --> 00:06:19,800
used this term a bunch mental models and

00:06:18,030 --> 00:06:21,919
I just before going further in my talk I

00:06:19,800 --> 00:06:24,509
want to make sure I properly define it

00:06:21,919 --> 00:06:26,789
mental models are conceptual frameworks

00:06:24,509 --> 00:06:28,680
they consist of both generalizations and

00:06:26,789 --> 00:06:30,900
assumptions but they're good to use to

00:06:28,680 --> 00:06:32,820
understand the working of things so the

00:06:30,900 --> 00:06:35,400
ranger this talk I'm gonna focus on

00:06:32,820 --> 00:06:39,210
building a graph QL mental model for

00:06:35,400 --> 00:06:41,370
beginners I really like this quote all

00:06:39,210 --> 00:06:43,650
models are wrong but some are useful

00:06:41,370 --> 00:06:45,330
so in preparing for this talk I started

00:06:43,650 --> 00:06:47,070
with the mental model that I use to

00:06:45,330 --> 00:06:49,500
learn graphic QL in order to build those

00:06:47,070 --> 00:06:51,780
react example apps I then took this

00:06:49,500 --> 00:06:54,090
model mental model showed it to a bunch

00:06:51,780 --> 00:06:55,650
of developers that Shopify asked them

00:06:54,090 --> 00:06:57,510
what they'd found complete confusing

00:06:55,650 --> 00:06:59,310
what made sense to them what they

00:06:57,510 --> 00:07:03,240
already knew and where some of the gaps

00:06:59,310 --> 00:07:05,370
were what I discovered talking to a

00:07:03,240 --> 00:07:07,710
bunch of developers about API is that

00:07:05,370 --> 00:07:10,169
there's some key ideas that are top of

00:07:07,710 --> 00:07:13,860
mind these being client-server basics

00:07:10,169 --> 00:07:16,680
crud operations HTT methods and Russell

00:07:13,860 --> 00:07:18,180
api's so when I build my mental models

00:07:16,680 --> 00:07:19,710
today I'm gonna do it in stages I'm

00:07:18,180 --> 00:07:21,690
gonna start with these key ideas I'm

00:07:19,710 --> 00:07:23,820
gonna lay the framework of kind of what

00:07:21,690 --> 00:07:25,919
we already know about api's I'm gonna

00:07:23,820 --> 00:07:27,449
introduce some new concepts that are

00:07:25,919 --> 00:07:29,430
related to graph QL and then I'm gonna

00:07:27,449 --> 00:07:32,100
add those concepts on top of our mental

00:07:29,430 --> 00:07:33,720
map I'm also going to share some

00:07:32,100 --> 00:07:35,789
insights from my experience learning

00:07:33,720 --> 00:07:38,820
graph QL as well as well as other

00:07:35,789 --> 00:07:40,680
developers that tropi five about kind of

00:07:38,820 --> 00:07:43,740
what is well understood within these key

00:07:40,680 --> 00:07:46,020
ideas and what may not be super well

00:07:43,740 --> 00:07:47,820
understood and the things that aren't

00:07:46,020 --> 00:07:52,080
well understood may lead to confusion

00:07:47,820 --> 00:07:54,599
when learning graph QL later as I show

00:07:52,080 --> 00:07:56,820
you several iterations of this mental

00:07:54,599 --> 00:07:58,260
map I've used some symbols so like the

00:07:56,820 --> 00:08:01,080
light bulb recognizes key earth

00:07:58,260 --> 00:08:03,300
identifies key ideas and the pink arrows

00:08:01,080 --> 00:08:06,389
will draw associations between these key

00:08:03,300 --> 00:08:08,760
ideas the reason for this is to model

00:08:06,389 --> 00:08:12,330
how the mind works the mind will group

00:08:08,760 --> 00:08:13,680
ideas in particular with patient's and

00:08:12,330 --> 00:08:15,660
then we'll draw associations between

00:08:13,680 --> 00:08:19,650
that so it's easier to remember and

00:08:15,660 --> 00:08:21,270
retrieve that information later let's

00:08:19,650 --> 00:08:23,849
start with what our developer already

00:08:21,270 --> 00:08:26,039
knows when we talk about restful api is

00:08:23,849 --> 00:08:28,110
most developers understand this

00:08:26,039 --> 00:08:29,370
client-server model really well we know

00:08:28,110 --> 00:08:31,169
that there's a client that's a user

00:08:29,370 --> 00:08:33,539
interface it could be a mobile app or

00:08:31,169 --> 00:08:35,940
web browser which communicates to a

00:08:33,539 --> 00:08:36,900
server that's over there that separate

00:08:35,940 --> 00:08:38,669
it from the client and this

00:08:36,900 --> 00:08:41,969
communication often happens over a

00:08:38,669 --> 00:08:43,770
network we also know that it's a uniform

00:08:41,969 --> 00:08:46,050
interface we might not use this term but

00:08:43,770 --> 00:08:47,910
we know that regardless of what client I

00:08:46,050 --> 00:08:50,490
am I'm gonna interact with the API in

00:08:47,910 --> 00:08:52,950
the same way so if I'm a mobile app or a

00:08:50,490 --> 00:08:54,780
web browser I will hit

00:08:52,950 --> 00:08:57,810
resource endpoint to get data from that

00:08:54,780 --> 00:09:00,270
particular resource the other concepts

00:08:57,810 --> 00:09:04,220
that define what a restful api are are

00:09:00,270 --> 00:09:07,740
the constraints that make an API restful

00:09:04,220 --> 00:09:09,450
may art as well are not as top of mind

00:09:07,740 --> 00:09:11,250
to developers they may be known but we

00:09:09,450 --> 00:09:13,080
may take them for granted so that

00:09:11,250 --> 00:09:15,030
there's a layered system so the client

00:09:13,080 --> 00:09:16,770
interacts with a server or communicates

00:09:15,030 --> 00:09:18,510
with the server and that server may

00:09:16,770 --> 00:09:20,190
inter have another endpoint that the

00:09:18,510 --> 00:09:23,070
clients not really concerned about that

00:09:20,190 --> 00:09:25,050
it's statelessness so that the client

00:09:23,070 --> 00:09:28,050
holds the state between the requests and

00:09:25,050 --> 00:09:32,250
response lifecycle and we can the client

00:09:28,050 --> 00:09:33,960
can cache responses from a server when

00:09:32,250 --> 00:09:35,580
we talk about cred operations most

00:09:33,960 --> 00:09:37,830
developers know that stands for create

00:09:35,580 --> 00:09:39,570
read update and delete and these

00:09:37,830 --> 00:09:43,370
operations are defined on a particular

00:09:39,570 --> 00:09:45,870
resource what is not clear to developers

00:09:43,370 --> 00:09:49,410
is that the cut of crud operations

00:09:45,870 --> 00:09:51,450
actually map to an HTTP method we for

00:09:49,410 --> 00:09:54,780
example will use a get request to either

00:09:51,450 --> 00:09:57,470
fetch data from our server and that

00:09:54,780 --> 00:10:00,330
server will execute a read operation

00:09:57,470 --> 00:10:02,100
similarly with a post if we want to

00:10:00,330 --> 00:10:04,200
create a resource we'll use an HTTP POST

00:10:02,100 --> 00:10:06,390
request and that will execute the Krait

00:10:04,200 --> 00:10:08,520
operation on our resource this is sort

00:10:06,390 --> 00:10:10,590
of a mapping that we may take for

00:10:08,520 --> 00:10:14,160
granted or it may not have ever been

00:10:10,590 --> 00:10:15,930
clear to us so let's take these key

00:10:14,160 --> 00:10:19,380
ideas and lay them out on a framework so

00:10:15,930 --> 00:10:22,350
I have my client I also have a server

00:10:19,380 --> 00:10:25,170
that has my data and be doing these two

00:10:22,350 --> 00:10:27,300
concept is my restful enter a P I so my

00:10:25,170 --> 00:10:29,910
interface the restful api is that were

00:10:27,300 --> 00:10:32,130
most familiar with group a servers data

00:10:29,910 --> 00:10:36,300
by resource and they have multiple

00:10:32,130 --> 00:10:38,910
endpoints to that client would access to

00:10:36,300 --> 00:10:41,370
be able to get that resources data on

00:10:38,910 --> 00:10:44,550
each resource we define crud operations

00:10:41,370 --> 00:10:49,170
to modify or fetch data related to that

00:10:44,550 --> 00:10:50,790
resource so if I'm a client that's

00:10:49,170 --> 00:10:52,050
interacting with a restful api that

00:10:50,790 --> 00:10:54,360
we're most familiar with and have

00:10:52,050 --> 00:10:56,970
compared to a lot in this conference is

00:10:54,360 --> 00:11:00,300
i would use an HTTP GET request to a

00:10:56,970 --> 00:11:02,550
particular UI uri which would execute

00:11:00,300 --> 00:11:04,740
execute the read function on that

00:11:02,550 --> 00:11:05,750
resource that read operation would fetch

00:11:04,740 --> 00:11:07,730
the breeze

00:11:05,750 --> 00:11:14,360
data from the server and then return it

00:11:07,730 --> 00:11:16,160
to me in an HTML XML or JSON response so

00:11:14,360 --> 00:11:18,800
let's talk about some graph QL concepts

00:11:16,160 --> 00:11:21,560
when I survey developers at Shopify I

00:11:18,800 --> 00:11:24,230
asked them to define or explain what

00:11:21,560 --> 00:11:25,880
they thought graph QL was a lot of

00:11:24,230 --> 00:11:27,410
front-end developers were aware of one

00:11:25,880 --> 00:11:29,570
of the big pros of graph QL that the

00:11:27,410 --> 00:11:31,250
client can dictate the format of data in

00:11:29,570 --> 00:11:34,490
the response which solves that over

00:11:31,250 --> 00:11:36,230
fetching problem what is not really

00:11:34,490 --> 00:11:39,110
clear to a lot of developers is what

00:11:36,230 --> 00:11:40,760
graph QL actually is so the definition

00:11:39,110 --> 00:11:44,870
of graph QL being a query language for

00:11:40,760 --> 00:11:47,120
API developers couldn't explain that

00:11:44,870 --> 00:11:50,090
well right had never been explained to

00:11:47,120 --> 00:11:52,280
them also that there's only one endpoint

00:11:50,090 --> 00:11:54,980
when it comes to graph QL and it returns

00:11:52,280 --> 00:11:58,510
a data graph there's a type type system

00:11:54,980 --> 00:11:58,510
that defines all queryable data

00:11:59,710 --> 00:12:05,090
describing what the graph and graph QL

00:12:02,240 --> 00:12:08,240
was is a very clarifying concepts if

00:12:05,090 --> 00:12:10,850
you're new to B graph QL understanding

00:12:08,240 --> 00:12:13,460
that this servers data is organized in

00:12:10,850 --> 00:12:15,890
this graph data structure makes a lot of

00:12:13,460 --> 00:12:19,670
sense and is a key point to clarify

00:12:15,890 --> 00:12:22,370
early on that what graph QL will do is

00:12:19,670 --> 00:12:24,320
the node of this data graph will be the

00:12:22,370 --> 00:12:26,360
represent your objects and the edges

00:12:24,320 --> 00:12:28,310
between these in your data graph will

00:12:26,360 --> 00:12:31,250
represent the relationship between these

00:12:28,310 --> 00:12:33,020
objects and that graph QL requires a

00:12:31,250 --> 00:12:34,640
type system so each object that you

00:12:33,020 --> 00:12:37,310
represent in your data graph that will

00:12:34,640 --> 00:12:40,010
be accessible by your graph QL API needs

00:12:37,310 --> 00:12:41,660
to be fun to find it in your schema as a

00:12:40,010 --> 00:12:44,210
type so for example we have the type

00:12:41,660 --> 00:12:46,040
shop and as two fields name and products

00:12:44,210 --> 00:12:47,540
the products is an array of another

00:12:46,040 --> 00:12:52,790
object type that we would have to define

00:12:47,540 --> 00:12:54,530
in our schema being product like any

00:12:52,790 --> 00:12:56,000
programming language thing is kind of

00:12:54,530 --> 00:12:57,589
out of the box for you and some of these

00:12:56,000 --> 00:13:00,410
things that come out of the box for

00:12:57,589 --> 00:13:02,000
graph QL is it defines query type for

00:13:00,410 --> 00:13:03,530
you so this is just another object type

00:13:02,000 --> 00:13:05,990
but you don't have to define it yourself

00:13:03,530 --> 00:13:08,060
it's an entry point into your data graph

00:13:05,990 --> 00:13:10,990
and it represents the tree of all

00:13:08,060 --> 00:13:13,700
objects that are queryable by your API

00:13:10,990 --> 00:13:17,300
other things that come out of the box

00:13:13,700 --> 00:13:19,020
with graph QL is it defines object types

00:13:17,300 --> 00:13:21,990
like scalar values so introduced

00:13:19,020 --> 00:13:23,490
boolean x' and they define it already

00:13:21,990 --> 00:13:25,860
for you so you don't have to do that

00:13:23,490 --> 00:13:28,290
the second key idea when it comes to

00:13:25,860 --> 00:13:31,500
graph QL are resolvers this was also

00:13:28,290 --> 00:13:34,080
another clarifying point for developers

00:13:31,500 --> 00:13:36,480
is that a resolver is what's responsible

00:13:34,080 --> 00:13:39,750
for accessing your data so we're we're

00:13:36,480 --> 00:13:42,840
used to crediting or modifying the data

00:13:39,750 --> 00:13:45,240
from our server in graph QL resolvers

00:13:42,840 --> 00:13:46,970
are responsible for this and where crud

00:13:45,240 --> 00:13:49,440
operations are defined on a resource

00:13:46,970 --> 00:13:51,750
resolvers are defined on an individual

00:13:49,440 --> 00:13:55,920
object so each object type in our data

00:13:51,750 --> 00:13:58,050
graph will be backed by a resolver so

00:13:55,920 --> 00:14:01,590
when we add those key ideas on top of

00:13:58,050 --> 00:14:03,720
our existing mental map we can see that

00:14:01,590 --> 00:14:05,730
graph QL API is just another interface

00:14:03,720 --> 00:14:09,510
it can exist at the same time as a

00:14:05,730 --> 00:14:13,050
restful api and there's only one

00:14:09,510 --> 00:14:15,870
endpoint it organizes our servers data

00:14:13,050 --> 00:14:19,200
in a data graph where the entry point is

00:14:15,870 --> 00:14:20,700
the query type each node is defined as

00:14:19,200 --> 00:14:23,460
an object type in our schema and is

00:14:20,700 --> 00:14:26,520
backed by a resolver so we kind of take

00:14:23,460 --> 00:14:30,300
that in will notice that graph QL API is

00:14:26,520 --> 00:14:32,940
actually a restful api itself and that's

00:14:30,300 --> 00:14:35,220
because graph QL you if you looked at

00:14:32,940 --> 00:14:37,050
our mental model you will notice that

00:14:35,220 --> 00:14:38,700
graph QL follows all of the five

00:14:37,050 --> 00:14:41,040
mandatory curtain strains that make an

00:14:38,700 --> 00:14:42,810
API wrestle it still uses the

00:14:41,040 --> 00:14:44,790
client-server architecture it's a

00:14:42,810 --> 00:14:46,980
uniform interface so regardless if I

00:14:44,790 --> 00:14:49,830
have a mobile app or I'm a web browser

00:14:46,980 --> 00:14:51,450
I'm gonna hit just one endpoint it's

00:14:49,830 --> 00:14:53,130
still a layered system that the client

00:14:51,450 --> 00:14:56,370
the server can have another endpoint but

00:14:53,130 --> 00:14:57,480
my client doesn't care the client will

00:14:56,370 --> 00:15:00,060
still hold the state between the

00:14:57,480 --> 00:15:04,410
requests and response lifecycle and the

00:15:00,060 --> 00:15:06,030
client can cache the response from the

00:15:04,410 --> 00:15:09,270
server which we heard earlier in a talk

00:15:06,030 --> 00:15:11,250
today but graph QL is more than that it

00:15:09,270 --> 00:15:13,110
adds additional things to this contract

00:15:11,250 --> 00:15:14,310
between client and server and those were

00:15:13,110 --> 00:15:16,440
some of the key ideas that I talked

00:15:14,310 --> 00:15:20,340
about being one endpoint that it needs

00:15:16,440 --> 00:15:22,230
has to have a type system and that it

00:15:20,340 --> 00:15:24,870
also organizes the data in this data

00:15:22,230 --> 00:15:26,220
graph and this is what makes the

00:15:24,870 --> 00:15:28,380
difference between what we're used to

00:15:26,220 --> 00:15:32,180
with common restful api s and graph QL

00:15:28,380 --> 00:15:35,000
and makes Y fetching and modifying data

00:15:32,180 --> 00:15:38,360
graph QL API is different from what

00:15:35,000 --> 00:15:41,960
we're used to so what's really confusing

00:15:38,360 --> 00:15:44,930
to developers is that use an HTTP POST

00:15:41,960 --> 00:15:47,000
request to fetch data and not modify

00:15:44,930 --> 00:15:49,520
data on a server and this is because

00:15:47,000 --> 00:15:52,130
with our common restful api is we define

00:15:49,520 --> 00:15:55,160
crud on our resources and there's a

00:15:52,130 --> 00:15:57,200
mapping between the and the HTTP

00:15:55,160 --> 00:16:00,790
requests because we don't define crud on

00:15:57,200 --> 00:16:03,770
our graph QL API there's no mapping so I

00:16:00,790 --> 00:16:06,170
H TP method request is actually not

00:16:03,770 --> 00:16:08,720
important we're using the HTTP POST

00:16:06,170 --> 00:16:10,340
request because it has a body and the

00:16:08,720 --> 00:16:13,160
reason we need a body is the client

00:16:10,340 --> 00:16:15,560
dictates what objects that are queried

00:16:13,160 --> 00:16:18,380
on the API and the format that they are

00:16:15,560 --> 00:16:21,560
returned so you see I have an HTTP POST

00:16:18,380 --> 00:16:23,990
request I'm including an nested group of

00:16:21,560 --> 00:16:29,060
objects that I want back from the server

00:16:23,990 --> 00:16:31,610
and my API will start executing starting

00:16:29,060 --> 00:16:33,530
at the query route based on the objects

00:16:31,610 --> 00:16:36,890
I sent it as my client I'm gonna start

00:16:33,530 --> 00:16:39,110
traversing the data graph for those

00:16:36,890 --> 00:16:41,360
objects and every object I hit I'm gonna

00:16:39,110 --> 00:16:43,790
execute the resolver the resolver is

00:16:41,360 --> 00:16:47,300
responsible for creating the JSON that's

00:16:43,790 --> 00:16:49,570
sent back to the client and it does this

00:16:47,300 --> 00:16:52,970
by taking the name of the object as the

00:16:49,570 --> 00:16:58,760
key value and the resolved value as the

00:16:52,970 --> 00:17:01,100
vault value so one of the things that we

00:16:58,760 --> 00:17:02,930
learn early on in graph QL is that the

00:17:01,100 --> 00:17:04,580
server's JSON response mirrors the

00:17:02,930 --> 00:17:06,350
clients request and this is why the

00:17:04,580 --> 00:17:08,270
client can dictate the format of their

00:17:06,350 --> 00:17:14,089
quest and it makes sense when you think

00:17:08,270 --> 00:17:17,209
about it because we layout we dictate

00:17:14,089 --> 00:17:20,839
how the we're gonna reverse the data

00:17:17,209 --> 00:17:23,959
graph on the API based on the nested

00:17:20,839 --> 00:17:26,900
objects we sent to send to the API so it

00:17:23,959 --> 00:17:29,210
will start executing traversing that

00:17:26,900 --> 00:17:31,670
data graph and build the JSON response

00:17:29,210 --> 00:17:33,500
at each object level and the object name

00:17:31,670 --> 00:17:37,370
becomes the key value as I said and the

00:17:33,500 --> 00:17:39,520
resolve value becomes the value so how

00:17:37,370 --> 00:17:41,600
does this work for modifying data

00:17:39,520 --> 00:17:44,330
another thing that comes out of the box

00:17:41,600 --> 00:17:45,820
is grass QL is mutation type mutation

00:17:44,330 --> 00:17:48,780
type is defined for us and this is

00:17:45,820 --> 00:17:51,700
a second entry point into our data graph

00:17:48,780 --> 00:17:53,890
so like other object types we can define

00:17:51,700 --> 00:17:56,820
fields on our mutation types and these

00:17:53,890 --> 00:18:00,030
fields are going to be what are our

00:17:56,820 --> 00:18:03,730
mutations that we allow on our API

00:18:00,030 --> 00:18:06,100
sample I have an mutation called mutate

00:18:03,730 --> 00:18:09,250
resource tree I passed an argument of

00:18:06,100 --> 00:18:12,220
what I want to update and then it's the

00:18:09,250 --> 00:18:14,290
it's gonna return the object type mutate

00:18:12,220 --> 00:18:16,180
resource three payload I'll have to

00:18:14,290 --> 00:18:18,250
define that object type in my schema and

00:18:16,180 --> 00:18:20,140
it may have fields that relate to other

00:18:18,250 --> 00:18:27,250
object types that already exist in our

00:18:20,140 --> 00:18:29,710
data graph so my mutation ends up

00:18:27,250 --> 00:18:31,540
looking something like this I'm still

00:18:29,710 --> 00:18:33,790
using HTTP POST request because you

00:18:31,540 --> 00:18:38,680
remember my HTTP method doesn't matter

00:18:33,790 --> 00:18:41,590
because it's not mapping to a particular

00:18:38,680 --> 00:18:43,660
operation on my API instead I'm using a

00:18:41,590 --> 00:18:46,090
post request because I care about that

00:18:43,660 --> 00:18:49,620
body that I'm sending I still like

00:18:46,090 --> 00:18:53,380
sending a query I still need to send

00:18:49,620 --> 00:18:55,060
what response what format of objects I

00:18:53,380 --> 00:18:56,920
want what objects I want back from the

00:18:55,060 --> 00:18:59,350
server and went in which format but I

00:18:56,920 --> 00:19:01,690
defined a few other things I'm now gonna

00:18:59,350 --> 00:19:04,510
start at the mutation route and I'm also

00:19:01,690 --> 00:19:08,260
going to tell which field I want to

00:19:04,510 --> 00:19:10,150
execute on the mutation type so just

00:19:08,260 --> 00:19:12,700
like when I was fetching data this time

00:19:10,150 --> 00:19:14,950
I'm gonna start traversing the data

00:19:12,700 --> 00:19:16,540
graph at the mutation type the first

00:19:14,950 --> 00:19:19,030
thing that gets resolved is the mutation

00:19:16,540 --> 00:19:22,540
resolver so I'm going to execute my

00:19:19,030 --> 00:19:24,520
mutation my data is mutated and then I'm

00:19:22,540 --> 00:19:27,220
going to start building my JSON response

00:19:24,520 --> 00:19:30,010
by transverse traversing that data graph

00:19:27,220 --> 00:19:34,330
for what objects I want back from my

00:19:30,010 --> 00:19:35,920
server and my JSON response that I get

00:19:34,330 --> 00:19:38,080
back to the server still mirrors that

00:19:35,920 --> 00:19:41,410
request that I sent in my the clients

00:19:38,080 --> 00:19:43,690
initial request so I'm gonna end with

00:19:41,410 --> 00:19:45,340
some aha moments for myself learning

00:19:43,690 --> 00:19:47,740
graph QL as well as speaking to other

00:19:45,340 --> 00:19:50,160
developers the fact that graph QL is a

00:19:47,740 --> 00:19:53,590
REST API and more makes a lot of sense

00:19:50,160 --> 00:19:55,600
that there's additional things that are

00:19:53,590 --> 00:19:57,670
required between the contact with the

00:19:55,600 --> 00:19:59,030
client and the server there's one

00:19:57,670 --> 00:20:01,610
endpoint there's a day

00:19:59,030 --> 00:20:04,610
and a type system another very

00:20:01,610 --> 00:20:07,250
clarifying concept was that the data

00:20:04,610 --> 00:20:08,960
server was organized in a data graph so

00:20:07,250 --> 00:20:11,630
nodes represent objects and

00:20:08,960 --> 00:20:13,250
relationships between these objects are

00:20:11,630 --> 00:20:15,530
described by edges

00:20:13,250 --> 00:20:17,330
there's no mapping between functions in

00:20:15,530 --> 00:20:19,880
pomona on the server and HTTP methods

00:20:17,330 --> 00:20:21,530
this is kind of a hurdle for a lot of

00:20:19,880 --> 00:20:23,150
developers new to graph QL to get over

00:20:21,530 --> 00:20:28,490
because we're so it's so ingrained that

00:20:23,150 --> 00:20:30,050
if we want to get our fetch data on our

00:20:28,490 --> 00:20:31,460
server we're using you get requests and

00:20:30,050 --> 00:20:33,440
if we're modifying something we're using

00:20:31,460 --> 00:20:35,840
a post request so to use a post request

00:20:33,440 --> 00:20:37,760
and not modify data on the server can be

00:20:35,840 --> 00:20:39,140
confusing and the fact that our

00:20:37,760 --> 00:20:41,570
functions are resolvers and they're

00:20:39,140 --> 00:20:44,600
defined on each object instead of crud

00:20:41,570 --> 00:20:47,000
operations defined on a resource so I'll

00:20:44,600 --> 00:20:49,430
end with this cartoon I think it's

00:20:47,000 --> 00:20:52,340
important when teaching people about

00:20:49,430 --> 00:20:53,750
graph QL or if beginners on your team to

00:20:52,340 --> 00:20:55,100
really clarify some of these key

00:20:53,750 --> 00:20:56,690
concepts because it will make their

00:20:55,100 --> 00:20:59,270
learning experience that much easier

00:20:56,690 --> 00:21:00,560
when you tell them to read Docs or try

00:20:59,270 --> 00:21:01,880
different tutorials they'll be able to

00:21:00,560 --> 00:21:04,130
take this information they're learning

00:21:01,880 --> 00:21:05,840
and store it somewhere useful so that

00:21:04,130 --> 00:21:07,220
they can remember and retrieve it a lot

00:21:05,840 --> 00:21:11,150
better and making their learning more

00:21:07,220 --> 00:21:14,150
effective if you found these mental Maps

00:21:11,150 --> 00:21:15,770
helpful today I post it a medium post

00:21:14,150 --> 00:21:17,900
with all the diagrams include it and

00:21:15,770 --> 00:21:20,330
tweet it about it this morning so feel

00:21:17,900 --> 00:21:23,000
free to use them these mental models

00:21:20,330 --> 00:21:26,330
should be adapted evolve as you learn

00:21:23,000 --> 00:21:28,280
new things make them apply to your

00:21:26,330 --> 00:21:29,970
workspaces and yeah feel free to use

00:21:28,280 --> 00:21:36,440
them and thank you so much

00:21:29,970 --> 00:21:36,440

YouTube URL: https://www.youtube.com/watch?v=RNLNyRm8yAQ


