Title: Danielle Man - Devtools for GraphQL
Publication date: 2017-11-08
Playlist: GraphQL Summit 2017
Description: 
	Danielle Man, Software Engineer at Apollo, gave this talk at GraphQL Summit 2017. Learn more: summit.graphql.com

People often choose to develop with GraphQL because of its improved performance and easier maintenance. One of the best benefits though is that it simplifies and streamlines the frontend development experience. In this talk, Iâ€™ll share how the Apollo Client Devtools allow GraphQL developers to better understand how the client manages their app state, how the devtools makes for an improved frontend dev experience, and why GraphQL lends itself to awesome developer tools in general.

See her slides: https://t.co/1biUZoS0p1
Captions: 
	00:00:03,870 --> 00:00:09,429
hello everybody my name is Danielle and

00:00:07,540 --> 00:00:10,900
I'm a front-end web developer at the

00:00:09,429 --> 00:00:12,460
Media Development Group where we build

00:00:10,900 --> 00:00:14,019
open-source tools and commercial

00:00:12,460 --> 00:00:16,810
products for graphical under the brand

00:00:14,019 --> 00:00:19,029
name Apollo so I'm really really excited

00:00:16,810 --> 00:00:20,650
to be able to be here today and talk to

00:00:19,029 --> 00:00:22,839
you about one of my favorite graphical

00:00:20,650 --> 00:00:24,970
ecosystem one of my favorite tools in

00:00:22,839 --> 00:00:27,489
the graphical ecosystem which is the

00:00:24,970 --> 00:00:29,859
graphical developer tools that exist and

00:00:27,489 --> 00:00:31,060
first before I start I'm just a little

00:00:29,859 --> 00:00:36,100
bit curious how many of you guys are

00:00:31,060 --> 00:00:39,070
friend and developers here today that's

00:00:36,100 --> 00:00:40,510
awesome and of you guys who are friend

00:00:39,070 --> 00:00:43,840
and developers how many of you have used

00:00:40,510 --> 00:00:45,190
a public client or relay ok that's a lot

00:00:43,840 --> 00:00:47,850
of hands and how many of you have used

00:00:45,190 --> 00:00:51,429
the dev tools for Apollo client or relay

00:00:47,850 --> 00:00:53,739
okay so less people I'm hoping that my

00:00:51,429 --> 00:00:54,940
talk speaks to your heart and I'm hoping

00:00:53,739 --> 00:00:56,469
that for the rest of you all you get

00:00:54,940 --> 00:01:01,629
introduced to a really exciting thing in

00:00:56,469 --> 00:01:03,210
the ecosystem um so one of the girls one

00:01:01,629 --> 00:01:05,590
of the design principles for graph QL

00:01:03,210 --> 00:01:07,120
that is my favorite principle that Dan

00:01:05,590 --> 00:01:09,370
actually highlighted in his talk is that

00:01:07,120 --> 00:01:10,930
graph QL is product centric my favorite

00:01:09,370 --> 00:01:12,930
line in the graph scale spike is line

00:01:10,930 --> 00:01:15,370
that says graph QL is unapologetically

00:01:12,930 --> 00:01:17,080
written for a friend and front-end

00:01:15,370 --> 00:01:18,640
engineers and the views that they have

00:01:17,080 --> 00:01:20,800
to write but if you're going to get

00:01:18,640 --> 00:01:23,080
started with writing a friend and graph

00:01:20,800 --> 00:01:24,400
QL there's a whole lot of stuff that you

00:01:23,080 --> 00:01:26,590
want to be able to do to manage your

00:01:24,400 --> 00:01:29,380
data layer that's not necessarily tied

00:01:26,590 --> 00:01:31,120
to the actual app logic that is going to

00:01:29,380 --> 00:01:32,920
be building features for your users and

00:01:31,120 --> 00:01:34,390
helping your business so you want to

00:01:32,920 --> 00:01:35,710
make a performant web app you want to

00:01:34,390 --> 00:01:37,690
have all these really cool things like

00:01:35,710 --> 00:01:40,600
optimistic UI when a user clicks a

00:01:37,690 --> 00:01:42,430
button or pagination that's really easy

00:01:40,600 --> 00:01:45,010
to handle and of course caching for

00:01:42,430 --> 00:01:46,240
queries so if you like move to a tab and

00:01:45,010 --> 00:01:48,880
move back to a tab the query that

00:01:46,240 --> 00:01:50,350
rendered the first tab gets cached and

00:01:48,880 --> 00:01:52,720
this is where graphic EULA clients come

00:01:50,350 --> 00:01:55,120
in the two most popular clients for

00:01:52,720 --> 00:01:56,620
graph QL that exists today I really and

00:01:55,120 --> 00:01:57,730
Apollo client but there are also some

00:01:56,620 --> 00:01:59,620
other really cool ones that are out

00:01:57,730 --> 00:02:01,150
there and what those clients allow you

00:01:59,620 --> 00:02:02,710
to do is they allow you to fetch your

00:02:01,150 --> 00:02:04,870
data and do all these really complicated

00:02:02,710 --> 00:02:06,010
things that are necessary for you to

00:02:04,870 --> 00:02:08,080
write products that are really

00:02:06,010 --> 00:02:11,110
performant for users but then allow you

00:02:08,080 --> 00:02:12,840
to focus on the actual app logic and not

00:02:11,110 --> 00:02:15,460
have to worry too much about it yourself

00:02:12,840 --> 00:02:16,510
so it's really cool these graph QL

00:02:15,460 --> 00:02:18,670
clients

00:02:16,510 --> 00:02:20,260
because they allow you to just really

00:02:18,670 --> 00:02:22,569
focus on the queries that your code

00:02:20,260 --> 00:02:24,069
needs to have and not worry too much

00:02:22,569 --> 00:02:25,360
about like what the queries have to

00:02:24,069 --> 00:02:27,610
compile to and the how they get

00:02:25,360 --> 00:02:30,159
transported over the wire with HTTP etc

00:02:27,610 --> 00:02:31,930
so when you write graph kill friends

00:02:30,159 --> 00:02:33,370
with them you just really get to focus

00:02:31,930 --> 00:02:35,319
at this abstract level of writing

00:02:33,370 --> 00:02:36,700
queries kind of like if you choose to

00:02:35,319 --> 00:02:38,349
write your friend and with react you get

00:02:36,700 --> 00:02:40,810
to focus at the abstract level of

00:02:38,349 --> 00:02:42,700
writing react components but what every

00:02:40,810 --> 00:02:44,440
developer knows is that the experience

00:02:42,700 --> 00:02:47,049
of writing something doesn't actually

00:02:44,440 --> 00:02:48,730
end with the code that you write in your

00:02:47,049 --> 00:02:50,620
editor unless you are a perfect

00:02:48,730 --> 00:02:52,030
developer that's in that like ridden

00:02:50,620 --> 00:02:53,260
every single piece of code and it's

00:02:52,030 --> 00:02:56,709
always just like the first time you've

00:02:53,260 --> 00:02:58,120
been it which is not me so most of the

00:02:56,709 --> 00:02:59,470
time when you're writing code you write

00:02:58,120 --> 00:03:01,150
a lot of code in your editor and then

00:02:59,470 --> 00:03:02,760
what actually happens is you spend a lot

00:03:01,150 --> 00:03:06,549
of time in the weeds debugging your code

00:03:02,760 --> 00:03:08,290
in your browser itself and what's really

00:03:06,549 --> 00:03:10,000
important is that you have the right

00:03:08,290 --> 00:03:13,030
developer tools to help you be able to

00:03:10,000 --> 00:03:15,430
develop and debug in the same way that

00:03:13,030 --> 00:03:17,859
you were developing at this abstract

00:03:15,430 --> 00:03:19,599
level of writing queries so when we're

00:03:17,859 --> 00:03:22,510
thinking about building dev tools for

00:03:19,599 --> 00:03:24,220
Apollo client originally we thought to

00:03:22,510 --> 00:03:26,319
ourselves when you use a tool like

00:03:24,220 --> 00:03:28,389
Apollo client you're gaining a lot of

00:03:26,319 --> 00:03:30,010
functionality but you're using you're

00:03:28,389 --> 00:03:32,230
losing fine-grained control over what

00:03:30,010 --> 00:03:34,690
exactly is happening with her query

00:03:32,230 --> 00:03:36,940
caches because you're leaving that up to

00:03:34,690 --> 00:03:38,380
your graphical client and so we wondered

00:03:36,940 --> 00:03:39,880
what are the things that you crucially

00:03:38,380 --> 00:03:41,560
need from your friend and dev tools to

00:03:39,880 --> 00:03:44,019
be able to answer those questions and

00:03:41,560 --> 00:03:45,700
the first two questions that came to

00:03:44,019 --> 00:03:47,260
mind to me where you want to be able to

00:03:45,700 --> 00:03:49,389
ask your graphical client what's the

00:03:47,260 --> 00:03:50,829
state of my cache and how does my cast

00:03:49,389 --> 00:03:53,950
change in response to things like

00:03:50,829 --> 00:03:55,569
mutations and this makes a lot of sense

00:03:53,950 --> 00:03:57,370
because Apollo client and relay are both

00:03:55,569 --> 00:03:59,950
graphical caching clients that help you

00:03:57,370 --> 00:04:01,569
manage the state exactly so the

00:03:59,950 --> 00:04:03,609
anchoring feature of both the Apollo

00:04:01,569 --> 00:04:04,840
client and relay dev tools for front-end

00:04:03,609 --> 00:04:06,790
developers which I think intuitively

00:04:04,840 --> 00:04:08,769
makes a lot of sense is that you can

00:04:06,790 --> 00:04:10,599
view the state of your cache in a way

00:04:08,769 --> 00:04:12,370
that's really user friendly so you can

00:04:10,599 --> 00:04:13,930
view all of the types that exist in your

00:04:12,370 --> 00:04:16,060
cache and all the objects that got put

00:04:13,930 --> 00:04:17,859
there you can follow object references

00:04:16,060 --> 00:04:18,940
you can search through the entire state

00:04:17,859 --> 00:04:20,799
of your cache which is really really

00:04:18,940 --> 00:04:22,510
nice and of course you can view your

00:04:20,799 --> 00:04:23,919
data in a user-friendly way such that

00:04:22,510 --> 00:04:25,690
you don't have to care about the

00:04:23,919 --> 00:04:26,460
underlying JavaScript implementation

00:04:25,690 --> 00:04:29,810
that really are

00:04:26,460 --> 00:04:31,919
the client is actually soaring data in

00:04:29,810 --> 00:04:33,539
the real a dev tools also have this

00:04:31,919 --> 00:04:36,030
really cool feature where you can see

00:04:33,539 --> 00:04:37,560
cash tips on the different mutations

00:04:36,030 --> 00:04:39,449
that come through so you see a mutation

00:04:37,560 --> 00:04:41,220
come through you see how your cash is

00:04:39,449 --> 00:04:43,680
actually updated and I think that's

00:04:41,220 --> 00:04:45,449
really cool and I think that this state

00:04:43,680 --> 00:04:48,060
Explorer is really the foundational

00:04:45,449 --> 00:04:50,819
aspect that any graphical caching dev

00:04:48,060 --> 00:04:52,620
tools really needs to have but what I

00:04:50,819 --> 00:04:54,630
think is a cool direction for dev tools

00:04:52,620 --> 00:04:56,449
in graph QL is once you've hit this

00:04:54,630 --> 00:04:59,160
foundational milestone of being able to

00:04:56,449 --> 00:05:02,370
enable users to debug the state of their

00:04:59,160 --> 00:05:04,530
cache thinking about ways you can enable

00:05:02,370 --> 00:05:07,229
developers to become more productive

00:05:04,530 --> 00:05:08,880
developers themselves so one of the

00:05:07,229 --> 00:05:10,919
funny things about product design is

00:05:08,880 --> 00:05:12,720
that sometimes you don't necessarily

00:05:10,919 --> 00:05:14,370
know which features are gonna end up

00:05:12,720 --> 00:05:15,990
being the most useful to your users

00:05:14,370 --> 00:05:17,340
until you've actually built some

00:05:15,990 --> 00:05:20,610
features and put them out there in the

00:05:17,340 --> 00:05:22,169
wild and seeing what people like so when

00:05:20,610 --> 00:05:24,060
we built the Apollo client dev tools

00:05:22,169 --> 00:05:25,979
originally and there were three of us

00:05:24,060 --> 00:05:28,050
that worked on this project and we each

00:05:25,979 --> 00:05:29,819
built a different feature and the future

00:05:28,050 --> 00:05:31,349
that I thought would hands-down be the

00:05:29,819 --> 00:05:32,520
most useful feature was the one where

00:05:31,349 --> 00:05:33,930
you got to explore the state of your

00:05:32,520 --> 00:05:35,009
cache I was like of course it's a

00:05:33,930 --> 00:05:39,060
caching client that's what I'm gonna

00:05:35,009 --> 00:05:40,650
want um but my favorite feature of the

00:05:39,060 --> 00:05:42,120
dev tools and what I think is a lot more

00:05:40,650 --> 00:05:43,740
interesting are the things that you are

00:05:42,120 --> 00:05:45,300
enabled to do to become a more

00:05:43,740 --> 00:05:47,550
productive developer like once you've

00:05:45,300 --> 00:05:49,110
hit that base foundation so this is a

00:05:47,550 --> 00:05:50,940
really interesting panel in the Apollo

00:05:49,110 --> 00:05:52,770
client dev tools that allows you to see

00:05:50,940 --> 00:05:55,650
all the queries that your query

00:05:52,770 --> 00:05:57,449
that your client code is making and you

00:05:55,650 --> 00:05:59,159
get to see the exact strings that got

00:05:57,449 --> 00:06:00,630
put together to make the queries you get

00:05:59,159 --> 00:06:02,759
to see the variables that got put

00:06:00,630 --> 00:06:04,919
together to make the queries and hands

00:06:02,759 --> 00:06:06,509
down my favorite feature and the dev

00:06:04,919 --> 00:06:08,400
tools is the surrounding graphical

00:06:06,509 --> 00:06:11,610
button which is kind of at the top right

00:06:08,400 --> 00:06:13,620
of that screenshot on the left and when

00:06:11,610 --> 00:06:15,389
you click that button you get taken over

00:06:13,620 --> 00:06:17,520
to this embedded graphical which is

00:06:15,389 --> 00:06:19,500
inside the dev tools and it coffee is

00:06:17,520 --> 00:06:21,060
your entire query signature which could

00:06:19,500 --> 00:06:22,349
have been composed from fragments and

00:06:21,060 --> 00:06:23,789
different files in your client like

00:06:22,349 --> 00:06:25,860
oftentimes it's hard to put that

00:06:23,789 --> 00:06:28,139
together so it takes the entire query

00:06:25,860 --> 00:06:29,490
signature it puts it into graphical it

00:06:28,139 --> 00:06:31,800
takes all your variables that puts it

00:06:29,490 --> 00:06:33,589
into a graphical it runs the data for

00:06:31,800 --> 00:06:35,460
you and it gets all your data back and

00:06:33,589 --> 00:06:36,360
literally every time I've clicked that

00:06:35,460 --> 00:06:38,280
button

00:06:36,360 --> 00:06:41,370
for me it saved me several minutes of

00:06:38,280 --> 00:06:43,500
time because I have to usually without

00:06:41,370 --> 00:06:45,330
this like figure out what variables got

00:06:43,500 --> 00:06:47,099
sent to my query oh maybe console.log

00:06:45,330 --> 00:06:49,650
them maybe like open up a bunch of

00:06:47,099 --> 00:06:51,210
different objects in my console with

00:06:49,650 --> 00:06:53,610
like little carrots because I had a lot

00:06:51,210 --> 00:06:54,840
of data that was nested and so I've

00:06:53,610 --> 00:06:56,550
clicked this button so many times

00:06:54,840 --> 00:06:58,919
because every time I want to debug a

00:06:56,550 --> 00:07:01,560
different component in my UI the first

00:06:58,919 --> 00:07:03,780
step is figuring out what data was

00:07:01,560 --> 00:07:05,460
hydrating that component and seeing if

00:07:03,780 --> 00:07:07,020
maybe like the reason my component

00:07:05,460 --> 00:07:08,909
wasn't rendering the way I was expecting

00:07:07,020 --> 00:07:12,150
was because the data was different or if

00:07:08,909 --> 00:07:13,469
it was because my component has a bug so

00:07:12,150 --> 00:07:14,939
this button is easily my favorite

00:07:13,469 --> 00:07:17,310
feature in the Apollo client dev tools

00:07:14,939 --> 00:07:18,840
and it's really powerful because allows

00:07:17,310 --> 00:07:20,159
you to save a lot of time because you

00:07:18,840 --> 00:07:23,129
don't have to switch between so many

00:07:20,159 --> 00:07:25,349
contexts in your dev tools so have this

00:07:23,129 --> 00:07:27,389
vision of being a front-end dev where

00:07:25,349 --> 00:07:29,159
you don't have to switch between Windows

00:07:27,389 --> 00:07:30,629
to do different things that are

00:07:29,159 --> 00:07:32,879
important for your experience as a

00:07:30,629 --> 00:07:34,139
developer so when you want to figure out

00:07:32,879 --> 00:07:36,060
what data you're getting from your API

00:07:34,139 --> 00:07:37,590
sometimes you have to go to postman and

00:07:36,060 --> 00:07:39,990
you have to copy all of the request

00:07:37,590 --> 00:07:41,669
headers that work for your request and

00:07:39,990 --> 00:07:44,069
put them into postman C request could be

00:07:41,669 --> 00:07:45,599
authenticated etc and I have this vision

00:07:44,069 --> 00:07:47,190
where you would be able to do everything

00:07:45,599 --> 00:07:48,629
in one place so you don't have to leave

00:07:47,190 --> 00:07:50,190
your app as you're building it and

00:07:48,629 --> 00:07:51,419
debugging it you can just stay in the

00:07:50,190 --> 00:07:53,639
same place and it would make the

00:07:51,419 --> 00:07:56,490
experience a lot better I think

00:07:53,639 --> 00:07:59,550
ultimately being able to leverage all of

00:07:56,490 --> 00:08:02,940
this stuff together and your browser is

00:07:59,550 --> 00:08:04,020
really really powerful thing and I think

00:08:02,940 --> 00:08:05,370
there are a lot of different things we

00:08:04,020 --> 00:08:07,919
could add to the dev tools there's a lot

00:08:05,370 --> 00:08:09,240
of stuff in my head and in the heads of

00:08:07,919 --> 00:08:10,680
other people that we've talked about

00:08:09,240 --> 00:08:12,870
that could make dev tools really really

00:08:10,680 --> 00:08:16,199
powerful so I don't have too much more

00:08:12,870 --> 00:08:17,520
time to talk about it but please like I

00:08:16,199 --> 00:08:19,770
didn't expect to be able to look at this

00:08:17,520 --> 00:08:21,360
slide very long and but please I believe

00:08:19,770 --> 00:08:22,770
the dev tools we have for Apollo client

00:08:21,360 --> 00:08:24,240
and really are just the beginning of

00:08:22,770 --> 00:08:27,210
what could be really powerful tools for

00:08:24,240 --> 00:08:29,009
basketball and I think that graphic you

00:08:27,210 --> 00:08:32,339
all really ones up your ability is a

00:08:29,009 --> 00:08:34,740
front-end developer to be more um to be

00:08:32,339 --> 00:08:37,140
more productive and with dev tools you

00:08:34,740 --> 00:08:38,519
could be even even more productive so

00:08:37,140 --> 00:08:41,039
please come talk to us in the graphic

00:08:38,519 --> 00:08:42,599
yoga Raj and send me messages on Twitter

00:08:41,039 --> 00:08:44,339
come talk to me after the talk I'd love

00:08:42,599 --> 00:08:47,820
to talk about future of dev tools with

00:08:44,339 --> 00:08:49,880
you and thanks for the time

00:08:47,820 --> 00:08:49,880

YouTube URL: https://www.youtube.com/watch?v=XRKUB0QCRUU


