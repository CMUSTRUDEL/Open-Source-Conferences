Title: Johannes Schickling - Building GraphQL-Native Microservices
Publication date: 2017-11-09
Playlist: GraphQL Summit 2017
Description: 
	Johannes Schickling, founder at Graphcool, gave this talk at GraphQL Summit 2017. Learn more: summit.graphql.com

GraphQL primarily has been used in two ways: as a proxy layer or as the foundation for greenfield projects. This talk will dive deep into best practices when implementing scalable GraphQL microservices from scratch covering everything from authentication, permissions and event-driven business processes.

Resources:
Learn more about Summit - https://summit.graphql.com/
Explore the GraphQL FAQs - https://www.apollographql.com/docs/resources/faq
Checkout the Apollo docs - https://www.apollographql.com/docs/
Learn GraphQL using Apollo's Tutorials: https://odyssey.apollographql.com/
Captions: 
	00:00:03,389 --> 00:00:08,309
Wow it's really exciting to be here

00:00:06,479 --> 00:00:10,740
thanks so much for for the nice

00:00:08,309 --> 00:00:11,999
introduction Utley so I want to share

00:00:10,740 --> 00:00:13,740
with you today

00:00:11,999 --> 00:00:16,110
basically all learnings over the last

00:00:13,740 --> 00:00:17,610
two years what we learned from running

00:00:16,110 --> 00:00:20,070
Groff cool

00:00:17,610 --> 00:00:23,970
in production what we've learned from

00:00:20,070 --> 00:00:26,210
working with the community so yeah

00:00:23,970 --> 00:00:28,470
I'm Jana chickling I'm based in Berlin

00:00:26,210 --> 00:00:31,890
spending more and more time also here in

00:00:28,470 --> 00:00:35,039
San Francisco work at Groff cool have a

00:00:31,890 --> 00:00:38,550
lot of I've quite a background in like

00:00:35,039 --> 00:00:43,140
node rust Swift go and build a VR

00:00:38,550 --> 00:00:44,790
company before but today I am pleased to

00:00:43,140 --> 00:00:48,030
not have to give an introduction to

00:00:44,790 --> 00:00:50,130
graph kill but I want to talk very

00:00:48,030 --> 00:00:54,329
briefly about our history what what Lee

00:00:50,130 --> 00:00:56,370
has already teased briefly recapped the

00:00:54,329 --> 00:00:58,100
state of the art of how graphical

00:00:56,370 --> 00:01:00,600
backends are being written from scratch

00:00:58,100 --> 00:01:02,969
I want to announce something really

00:01:00,600 --> 00:01:05,299
exciting today and give a quick live

00:01:02,969 --> 00:01:07,680
demo of that so let's start off with

00:01:05,299 --> 00:01:10,110
with our history so maybe you've seen

00:01:07,680 --> 00:01:12,570
some of our open source projects so far

00:01:10,110 --> 00:01:14,610
so for example we've written this little

00:01:12,570 --> 00:01:17,159
this probably the smallest graphical

00:01:14,610 --> 00:01:20,520
client so far which you can use pose in

00:01:17,159 --> 00:01:24,390
the front and back-end together with

00:01:20,520 --> 00:01:26,909
Facebook we've also worked out graphical

00:01:24,390 --> 00:01:29,190
config which is the foundation for quite

00:01:26,909 --> 00:01:31,920
a couple of graphical tools one of which

00:01:29,190 --> 00:01:34,619
is the graph Kelsey lie which helps you

00:01:31,920 --> 00:01:37,159
with common workflows like fetching your

00:01:34,619 --> 00:01:39,360
graphical schema for front-end tools and

00:01:37,159 --> 00:01:42,479
just a couple of weeks ago we've

00:01:39,360 --> 00:01:44,850
released the graphical playground which

00:01:42,479 --> 00:01:49,290
is a more kind of feature complete

00:01:44,850 --> 00:01:51,330
graphical graphical IDE that standalone

00:01:49,290 --> 00:01:53,759
as electron app and like supports

00:01:51,330 --> 00:01:56,400
features like subscriptions and a more

00:01:53,759 --> 00:01:59,549
powerful history and so on so feel free

00:01:56,400 --> 00:02:01,799
to check that out so we really got

00:01:59,549 --> 00:02:05,820
started like in beginning and off to the

00:02:01,799 --> 00:02:09,060
end of 2015 when we were building our

00:02:05,820 --> 00:02:10,769
first graphical server and as I've

00:02:09,060 --> 00:02:12,690
implemented the first version of that it

00:02:10,769 --> 00:02:14,700
really struck me that like this mapping

00:02:12,690 --> 00:02:16,680
from your API to your database like

00:02:14,700 --> 00:02:17,310
that's very generic and as a problem

00:02:16,680 --> 00:02:19,110
that

00:02:17,310 --> 00:02:21,720
back in service in general wanted to

00:02:19,110 --> 00:02:23,580
wanted to solve and like I've tried out

00:02:21,720 --> 00:02:25,290
parts in firebase in the in the past but

00:02:23,580 --> 00:02:28,350
it was always too limited

00:02:25,290 --> 00:02:30,959
so graph KL finally unlocked really the

00:02:28,350 --> 00:02:34,230
potential of of back-end service so long

00:02:30,959 --> 00:02:37,560
story short we started to build back-end

00:02:34,230 --> 00:02:40,080
service based on on graph kill so in

00:02:37,560 --> 00:02:43,770
February 2016

00:02:40,080 --> 00:02:46,110
we've cranked up the the first the first

00:02:43,770 --> 00:02:48,480
prototype a couple of months later and a

00:02:46,110 --> 00:02:51,090
lot of iterations later we unloaded the

00:02:48,480 --> 00:02:54,600
first hundred developers to to our to a

00:02:51,090 --> 00:02:56,940
preview and to make it since back then

00:02:54,600 --> 00:02:59,940
was quite difficult to get started was

00:02:56,940 --> 00:03:02,790
fronting technologies of graphical and

00:02:59,940 --> 00:03:04,440
we wanted to help the community to get

00:03:02,790 --> 00:03:07,470
there faster so we've created learn

00:03:04,440 --> 00:03:10,230
relay as a learning resource to learn

00:03:07,470 --> 00:03:14,459
relay and a couple of months later learn

00:03:10,230 --> 00:03:17,670
Apollo and yeah this year and in May

00:03:14,459 --> 00:03:19,980
we've officially launched graphical on

00:03:17,670 --> 00:03:22,680
product on that hacker news and the same

00:03:19,980 --> 00:03:25,920
at the same month we've also had our

00:03:22,680 --> 00:03:29,400
first conference in Berlin where a lot

00:03:25,920 --> 00:03:31,410
of you were were as well so based on the

00:03:29,400 --> 00:03:33,720
learnings we had from Lerna from balloon

00:03:31,410 --> 00:03:35,910
Apollo and learn relay and together was

00:03:33,720 --> 00:03:37,950
with our amazing community we created

00:03:35,910 --> 00:03:40,230
how to graph girl where I'm now super

00:03:37,950 --> 00:03:42,030
excited that more than 250,000 people

00:03:40,230 --> 00:03:46,530
actually went through that and and

00:03:42,030 --> 00:03:49,260
learned graph kill so yeah we've seen

00:03:46,530 --> 00:03:51,660
like a lot of people building apps using

00:03:49,260 --> 00:03:53,940
graph cool so by now we have like more

00:03:51,660 --> 00:03:56,280
than 50,000 services deployed and on

00:03:53,940 --> 00:03:58,829
graph cool serving serving more than

00:03:56,280 --> 00:04:02,040
1,000 requests per second our back-end

00:03:58,829 --> 00:04:05,250
is implemented in in Scala using sangria

00:04:02,040 --> 00:04:08,489
up front and was like the since the very

00:04:05,250 --> 00:04:10,170
beginning we've used relay and had like

00:04:08,489 --> 00:04:12,329
also a couple side projects in Apollo

00:04:10,170 --> 00:04:14,730
and really seen that that evolution

00:04:12,329 --> 00:04:16,440
which is amazing and we are also super

00:04:14,730 --> 00:04:18,750
fortunate to have to have such an

00:04:16,440 --> 00:04:22,109
amazing community in our slack where we

00:04:18,750 --> 00:04:24,270
have not more than 5,000 people and yeah

00:04:22,109 --> 00:04:26,669
so based on all of these graphical

00:04:24,270 --> 00:04:29,310
servers said that we've seen when going

00:04:26,669 --> 00:04:31,409
into production I wanted to share like a

00:04:29,310 --> 00:04:33,539
couple of insights with you

00:04:31,409 --> 00:04:35,460
and recap for the ones who are just

00:04:33,539 --> 00:04:39,719
getting into graphic how he can build

00:04:35,460 --> 00:04:42,419
graphical servers so historically and

00:04:39,719 --> 00:04:44,550
this is this is what what Lee and and

00:04:42,419 --> 00:04:47,849
then and so on has already presented

00:04:44,550 --> 00:04:49,919
graph Corel is typically known as a as a

00:04:47,849 --> 00:04:52,379
API gateway technology as a proxy

00:04:49,919 --> 00:04:54,360
technology so then you really take graph

00:04:52,379 --> 00:04:57,120
KL and put it in front of your existing

00:04:54,360 --> 00:04:59,189
services in existing infrastructure but

00:04:57,120 --> 00:05:01,020
that has made graphical incredibly

00:04:59,189 --> 00:05:04,440
popular and now people start thinking

00:05:01,020 --> 00:05:07,080
about why should we like keep building

00:05:04,440 --> 00:05:10,590
our api's and rest why don't we just use

00:05:07,080 --> 00:05:13,229
graph KL from the beginning and this is

00:05:10,590 --> 00:05:14,940
what like Apollo I think you already

00:05:13,229 --> 00:05:17,280
also talked about this is like a

00:05:14,940 --> 00:05:19,259
graphical first approach and the more

00:05:17,280 --> 00:05:22,340
technical terms what we call graph KL

00:05:19,259 --> 00:05:25,590
native a graphical native backends and

00:05:22,340 --> 00:05:27,440
so this is really I think an important

00:05:25,590 --> 00:05:30,090
way to think about this that you have

00:05:27,440 --> 00:05:32,370
one graphical as an API gateway

00:05:30,090 --> 00:05:35,099
technology but also you can use graph KL

00:05:32,370 --> 00:05:36,719
to build servers from scratch and it

00:05:35,099 --> 00:05:38,430
gets especially interesting when you

00:05:36,719 --> 00:05:41,759
combine both of these and this is where

00:05:38,430 --> 00:05:43,860
what so many talks are also about about

00:05:41,759 --> 00:05:46,110
graphical schema stitching where it can

00:05:43,860 --> 00:05:48,659
take existing graphical micro services

00:05:46,110 --> 00:05:51,479
and compose them together in an API

00:05:48,659 --> 00:05:52,889
gateway so schema searching for those of

00:05:51,479 --> 00:05:55,680
you who don't know is basically the idea

00:05:52,889 --> 00:05:58,589
of taking one or multiple graphical

00:05:55,680 --> 00:06:00,990
api's schemas stitch and combining them

00:05:58,589 --> 00:06:03,180
together extending them into a new API

00:06:00,990 --> 00:06:04,919
into your new schema so there are a lot

00:06:03,180 --> 00:06:07,889
of interesting implementations

00:06:04,919 --> 00:06:10,919
spearheaded by graphical tools but

00:06:07,889 --> 00:06:13,620
there's also graphical Weaver and a

00:06:10,919 --> 00:06:16,520
couple of others and this unlocks like a

00:06:13,620 --> 00:06:19,740
whole variety of great possibilities

00:06:16,520 --> 00:06:21,120
there are also some challenges that we

00:06:19,740 --> 00:06:22,919
have to face where we have to come up

00:06:21,120 --> 00:06:24,509
with best practices how you would map

00:06:22,919 --> 00:06:26,879
types from

00:06:24,509 --> 00:06:30,150
from these graphical native api's to

00:06:26,879 --> 00:06:34,379
your graphical gateway but this isn't

00:06:30,150 --> 00:06:36,419
super super exciting area really so if

00:06:34,379 --> 00:06:37,289
you were to build a graphical server

00:06:36,419 --> 00:06:40,020
from scratch

00:06:37,289 --> 00:06:43,830
I think the ecosystem is in a phenomenal

00:06:40,020 --> 00:06:44,090
state so the idea basically what you

00:06:43,830 --> 00:06:46,460
need

00:06:44,090 --> 00:06:48,830
do to implement a graphical server is

00:06:46,460 --> 00:06:51,590
one as you have to define your API

00:06:48,830 --> 00:06:54,590
schema and then actually implement that

00:06:51,590 --> 00:06:58,220
API using typically a pattern that's

00:06:54,590 --> 00:06:59,389
called resolvers so the ecosystem is

00:06:58,220 --> 00:07:02,449
pretty much sure by now

00:06:59,389 --> 00:07:04,130
so in pretty much every language and for

00:07:02,449 --> 00:07:07,250
every technology you have great

00:07:04,130 --> 00:07:09,620
libraries graphical jazz poll server

00:07:07,250 --> 00:07:12,770
graphical tools and node if sangria and

00:07:09,620 --> 00:07:14,990
Scala graphene and Python and Java you

00:07:12,770 --> 00:07:17,570
have a real thriving community like

00:07:14,990 --> 00:07:20,150
pretty much in every language so once

00:07:17,570 --> 00:07:22,190
you've chosen your your technology now

00:07:20,150 --> 00:07:24,380
we can actually start implementing your

00:07:22,190 --> 00:07:26,720
your graphical server there's a ton of

00:07:24,380 --> 00:07:28,610
stuff that you need to do so most

00:07:26,720 --> 00:07:31,160
importantly as you're building a new

00:07:28,610 --> 00:07:32,780
server you want to persist you want to

00:07:31,160 --> 00:07:34,729
read the data from somewhere and you

00:07:32,780 --> 00:07:38,389
want to persist the data so you really

00:07:34,729 --> 00:07:40,460
want to map your API to a database you

00:07:38,389 --> 00:07:43,729
probably need to implement some for the

00:07:40,460 --> 00:07:45,500
API controls such as like pagination how

00:07:43,729 --> 00:07:48,020
you order your data how you filter your

00:07:45,500 --> 00:07:51,410
data you mostly also need an

00:07:48,020 --> 00:07:53,990
authentication authorization system if

00:07:51,410 --> 00:07:56,650
you want to build a real-time app it

00:07:53,990 --> 00:07:59,750
makes also sense to provide a graphical

00:07:56,650 --> 00:08:01,099
subscription API but most importantly

00:07:59,750 --> 00:08:03,470
where you really want to get to is

00:08:01,099 --> 00:08:06,020
implementing your business logic so a

00:08:03,470 --> 00:08:08,539
lot of these things that I just talked

00:08:06,020 --> 00:08:10,430
about can be solved by better building

00:08:08,539 --> 00:08:12,650
blocks and a lot of and some of these is

00:08:10,430 --> 00:08:14,180
where I really want to focus on and this

00:08:12,650 --> 00:08:16,190
was basically when we started out with

00:08:14,180 --> 00:08:16,700
graphical this was what it all was all

00:08:16,190 --> 00:08:18,169
about

00:08:16,700 --> 00:08:20,470
we wanted to build better building

00:08:18,169 --> 00:08:24,139
blocks for building graphical servers

00:08:20,470 --> 00:08:26,240
but we started out as a back-end service

00:08:24,139 --> 00:08:31,510
that's maybe the enlightening moment

00:08:26,240 --> 00:08:33,950
here it's too early so we wanted to

00:08:31,510 --> 00:08:37,190
we've build a back-end service so far

00:08:33,950 --> 00:08:42,169
and well this is really really easy to

00:08:37,190 --> 00:08:44,570
get started with it's too dark well it's

00:08:42,169 --> 00:08:46,760
really easy to get started with and you

00:08:44,570 --> 00:08:49,370
get good off the ground quickly there

00:08:46,760 --> 00:08:51,290
are also a couple of limitations around

00:08:49,370 --> 00:08:53,810
that and we've received a lot of

00:08:51,290 --> 00:08:57,500
feedback so you have to notice that like

00:08:53,810 --> 00:08:59,540
so far we've had like a web-based

00:08:57,500 --> 00:09:02,330
console where where click together your

00:08:59,540 --> 00:09:04,160
back ends and that arguably is not the

00:09:02,330 --> 00:09:06,770
best approach of how you implement your

00:09:04,160 --> 00:09:09,140
back end so together with our community

00:09:06,770 --> 00:09:10,940
we've got a lot of feedback around how

00:09:09,140 --> 00:09:12,890
to evolve the workflows you want to have

00:09:10,940 --> 00:09:15,380
a local development workflow you want to

00:09:12,890 --> 00:09:17,090
be integrated into a continuous

00:09:15,380 --> 00:09:20,180
integration continuous delivery and

00:09:17,090 --> 00:09:22,700
general get more flexibility but most

00:09:20,180 --> 00:09:25,790
importantly there's really this big

00:09:22,700 --> 00:09:27,950
problem around vendor lock-in so for

00:09:25,790 --> 00:09:31,160
example when parts got acquired and shut

00:09:27,950 --> 00:09:33,680
down that really scares a lot of people

00:09:31,160 --> 00:09:36,560
and that that's very understandable so

00:09:33,680 --> 00:09:38,840
we try to see how can we address all of

00:09:36,560 --> 00:09:42,020
these all of these concerns all of these

00:09:38,840 --> 00:09:47,050
questions and took a really really big

00:09:42,020 --> 00:09:50,210
step forward so as of today graph cool

00:09:47,050 --> 00:09:52,340
we will open source graph cool and turn

00:09:50,210 --> 00:09:55,150
it into a open source back-end

00:09:52,340 --> 00:09:55,150
development framework

00:09:59,480 --> 00:10:05,420
so that means you can run graphical

00:10:01,970 --> 00:10:08,690
completely open locally deployed on your

00:10:05,420 --> 00:10:11,180
own clusters get involved in the in the

00:10:08,690 --> 00:10:14,480
open-source development process so we're

00:10:11,180 --> 00:10:15,950
super super excited about this so I want

00:10:14,480 --> 00:10:18,080
to quickly walk you through some of the

00:10:15,950 --> 00:10:20,750
features and afterwards give you a quick

00:10:18,080 --> 00:10:22,880
demo so at a core of the graphical

00:10:20,750 --> 00:10:24,770
framework is what we call a graphical

00:10:22,880 --> 00:10:26,480
database it's not really a database

00:10:24,770 --> 00:10:28,820
rather than abstraction I'll get to that

00:10:26,480 --> 00:10:31,520
in a second it also comes with a

00:10:28,820 --> 00:10:33,080
powerful permission system that enables

00:10:31,520 --> 00:10:35,660
you to implement authentication

00:10:33,080 --> 00:10:37,610
authorization workflows it integrates

00:10:35,660 --> 00:10:40,460
out-of-the-box with functions as a

00:10:37,610 --> 00:10:43,100
service like AWS lambda and service

00:10:40,460 --> 00:10:45,950
functions to implement is event-driven

00:10:43,100 --> 00:10:48,110
business logic it also comes with an

00:10:45,950 --> 00:10:49,460
graphical subscription API that you can

00:10:48,110 --> 00:10:51,980
use directly in your front-end

00:10:49,460 --> 00:10:53,900
application and since the world has very

00:10:51,980 --> 00:10:55,580
much changed from like back in the days

00:10:53,900 --> 00:10:58,370
where you have like rails and you build

00:10:55,580 --> 00:10:59,750
monolith and the cloud wasn't really

00:10:58,370 --> 00:11:02,450
that much of a thing where you have like

00:10:59,750 --> 00:11:03,980
cloud dedicated infrastructure this has

00:11:02,450 --> 00:11:06,770
changed completely now you have like

00:11:03,980 --> 00:11:08,870
queues and s3 and all of that so we

00:11:06,770 --> 00:11:11,540
really designed it from the ground up to

00:11:08,870 --> 00:11:14,060
run in the cloud and that's what what's

00:11:11,540 --> 00:11:17,090
called cloud native so the runtime is

00:11:14,060 --> 00:11:19,130
actually cloud native so at the core of

00:11:17,090 --> 00:11:20,870
the graphical framework is this

00:11:19,130 --> 00:11:23,210
graphical database again it's an

00:11:20,870 --> 00:11:26,150
abstraction of an actual database so

00:11:23,210 --> 00:11:27,680
currently it's using my sequel as a

00:11:26,150 --> 00:11:30,380
storage engine we're also working

00:11:27,680 --> 00:11:33,560
towards a Postgres search engine and

00:11:30,380 --> 00:11:37,100
it's really a an abstraction to two

00:11:33,560 --> 00:11:40,160
dimensions so one to query mutate and

00:11:37,100 --> 00:11:42,370
stream your data and secondly also to

00:11:40,160 --> 00:11:45,410
evolve your data model in your underling

00:11:42,370 --> 00:11:48,740
schema of your of your database through

00:11:45,410 --> 00:11:51,230
graphical STL so by using rough kill

00:11:48,740 --> 00:11:53,360
this is effectively like language and

00:11:51,230 --> 00:11:56,060
technology agnostic so can be used like

00:11:53,360 --> 00:11:59,330
from within any any back-end

00:11:56,060 --> 00:12:01,670
implementation like Python or a node and

00:11:59,330 --> 00:12:04,190
that makes it really exciting so the

00:12:01,670 --> 00:12:06,920
core idea is really you define your data

00:12:04,190 --> 00:12:09,710
model using graphical SEL which you have

00:12:06,920 --> 00:12:11,360
here on the Left where you first sample

00:12:09,710 --> 00:12:13,160
have a user model in a post model and

00:12:11,360 --> 00:12:16,100
out of that

00:12:13,160 --> 00:12:19,519
the framework generates a crud style API

00:12:16,100 --> 00:12:23,509
that he can use use from your graphical

00:12:19,519 --> 00:12:25,790
gateway or you use it directly from

00:12:23,509 --> 00:12:28,310
other back-end applications or your your

00:12:25,790 --> 00:12:31,129
front-end so at a core of that there is

00:12:28,310 --> 00:12:33,920
an efficient implementation of a caching

00:12:31,129 --> 00:12:38,060
mechanism and advanced data loader

00:12:33,920 --> 00:12:40,670
engine and based on this crud API you

00:12:38,060 --> 00:12:44,149
get a lot of advanced graphical features

00:12:40,670 --> 00:12:46,879
out of the box so for example pagination

00:12:44,149 --> 00:12:50,899
mechanism so that can be either offset

00:12:46,879 --> 00:12:54,170
based or or cursor based it also comes

00:12:50,899 --> 00:12:56,060
with a filter engine work so pretty much

00:12:54,170 --> 00:12:58,279
everything that you can express with

00:12:56,060 --> 00:13:00,769
sequel queries you can also Express

00:12:58,279 --> 00:13:03,560
using this graphical based filter system

00:13:00,769 --> 00:13:06,529
and also a concept we call nested

00:13:03,560 --> 00:13:07,970
mutations is really powerful for for

00:13:06,529 --> 00:13:10,879
front-end development workflows where

00:13:07,970 --> 00:13:13,220
you want to create entire subtrees of

00:13:10,879 --> 00:13:16,220
data in one go and we're also currently

00:13:13,220 --> 00:13:18,970
working towards supporting more flexible

00:13:16,220 --> 00:13:22,519
aggregations in the Indus API directly

00:13:18,970 --> 00:13:24,110
so the architecture is fairly simple

00:13:22,519 --> 00:13:26,449
so obviously you have like your

00:13:24,110 --> 00:13:28,459
graphical client somewhere you have your

00:13:26,449 --> 00:13:32,569
development environment and you deploy

00:13:28,459 --> 00:13:34,810
that to your cloud so at its core you

00:13:32,569 --> 00:13:37,790
have a database and the crud API

00:13:34,810 --> 00:13:40,550
abstracting the other way if you want to

00:13:37,790 --> 00:13:44,630
use an api gateway then you can use that

00:13:40,550 --> 00:13:47,449
as a proxy and to tie in your your

00:13:44,630 --> 00:13:50,269
legacy systems additionally to this

00:13:47,449 --> 00:13:53,149
graphical database it also comes with an

00:13:50,269 --> 00:13:56,089
event gateway this event gateway

00:13:53,149 --> 00:13:58,189
combines it with functions as service

00:13:56,089 --> 00:13:59,839
like a double is lambda and makes it

00:13:58,189 --> 00:14:04,069
easy to integrate with the external API

00:13:59,839 --> 00:14:08,779
and based on the event gateway this also

00:14:04,069 --> 00:14:11,449
feeds a subscription API the this entire

00:14:08,779 --> 00:14:16,430
architecture is can be deployed either

00:14:11,449 --> 00:14:19,329
on your own cloud or can be deployed

00:14:16,430 --> 00:14:22,490
on-premise using docker and kubernetes

00:14:19,329 --> 00:14:26,579
so to get started you just need to

00:14:22,490 --> 00:14:28,410
basically install a graph call using NPM

00:14:26,579 --> 00:14:31,529
run graphical in it that sets up a new

00:14:28,410 --> 00:14:34,319
project for you use define your data

00:14:31,529 --> 00:14:37,889
model deploy it and you have a ready to

00:14:34,319 --> 00:14:39,540
use graphical endpoint so at the core of

00:14:37,889 --> 00:14:42,749
a service definition you have a

00:14:39,540 --> 00:14:45,869
graphical Yama file which points to your

00:14:42,749 --> 00:14:49,189
graphical data model you can you can

00:14:45,869 --> 00:14:52,139
define data based permission rules and

00:14:49,189 --> 00:14:55,499
authentication but also a synchronous

00:14:52,139 --> 00:14:59,639
asynchronous data a synchronous logic

00:14:55,499 --> 00:15:01,470
flows and as we've already seen the your

00:14:59,639 --> 00:15:04,920
data model you specify using graphical

00:15:01,470 --> 00:15:07,999
SCL so I think the easiest way for you

00:15:04,920 --> 00:15:15,029
to show this is to run a quick demo

00:15:07,999 --> 00:15:18,779
so hopefully this works it's this big

00:15:15,029 --> 00:15:21,959
enough otherwise I make it bigger so you

00:15:18,779 --> 00:15:25,279
basically just need to run a graph cool

00:15:21,959 --> 00:15:30,089
in it this sets up a new project for you

00:15:25,279 --> 00:15:32,100
so in this project we basically have two

00:15:30,089 --> 00:15:35,069
graphical Yama file and a type stud

00:15:32,100 --> 00:15:37,589
graph gal file so let's open that graph

00:15:35,069 --> 00:15:39,899
types does graph KL file here we have a

00:15:37,589 --> 00:15:43,259
user model which has a name and a date

00:15:39,899 --> 00:15:47,069
of birth so we can just say graph cool

00:15:43,259 --> 00:15:50,279
deploy here we say we want to deploy it

00:15:47,069 --> 00:15:56,179
to a local development cluster we call

00:15:50,279 --> 00:16:00,230
this summit demo this is deploying and

00:15:56,179 --> 00:16:03,389
we have a graphical API that we can use

00:16:00,230 --> 00:16:07,649
and here we can do things like give me

00:16:03,389 --> 00:16:12,739
all users and their name and their date

00:16:07,649 --> 00:16:16,829
of birth we can also work with relations

00:16:12,739 --> 00:16:23,470
so let's quickly uncomment this deploy

00:16:16,829 --> 00:16:27,950
this again reload the schema

00:16:23,470 --> 00:16:31,490
and can say for every user we also want

00:16:27,950 --> 00:16:33,800
their posts and their debt title so

00:16:31,490 --> 00:16:36,470
obviously we don't have any data in

00:16:33,800 --> 00:16:39,350
there yet so you can use crud style

00:16:36,470 --> 00:16:42,080
mutations to do so so for example

00:16:39,350 --> 00:16:44,990
creating a user where's a date of birth

00:16:42,080 --> 00:16:47,120
and so on so I'm not going to go too

00:16:44,990 --> 00:16:49,220
deep into that since I've prepared a

00:16:47,120 --> 00:16:53,630
little demo which also includes in the

00:16:49,220 --> 00:16:55,610
API gateway so first I want to walk you

00:16:53,630 --> 00:16:56,960
through the project setup that's also an

00:16:55,610 --> 00:17:00,500
get up so you can check it out

00:16:56,960 --> 00:17:02,170
afterwards and then we gonna get we're

00:17:00,500 --> 00:17:08,420
gonna run it and hope that it works

00:17:02,170 --> 00:17:11,360
so edit score you have the index yes

00:17:08,420 --> 00:17:14,120
well so it's written in typescript but

00:17:11,360 --> 00:17:15,770
it also works in in JavaScript and so

00:17:14,120 --> 00:17:19,490
let's quickly walk through what what

00:17:15,770 --> 00:17:24,439
this does so it's using graphical tools

00:17:19,490 --> 00:17:27,800
and it basically creates an HTTP link to

00:17:24,439 --> 00:17:30,620
your graphical database you then extend

00:17:27,800 --> 00:17:32,570
your schema to what your schema should

00:17:30,620 --> 00:17:35,870
actually look like if you implement the

00:17:32,570 --> 00:17:38,990
resolvers by deferring to your graphical

00:17:35,870 --> 00:17:42,260
database and composing it this way and

00:17:38,990 --> 00:17:44,930
that's that's basically it so the schema

00:17:42,260 --> 00:17:50,390
that we want to have here is we want to

00:17:44,930 --> 00:17:53,090
say we we still kind of like like we

00:17:50,390 --> 00:17:55,910
think about how has real a expected the

00:17:53,090 --> 00:18:00,170
API so we for whatever reason we we use

00:17:55,910 --> 00:18:02,270
it here in this demo and so the viewer

00:18:00,170 --> 00:18:07,040
type has the currently authenticated

00:18:02,270 --> 00:18:08,960
user and has all top posts and these

00:18:07,040 --> 00:18:11,870
types that are being referenced here are

00:18:08,960 --> 00:18:15,110
just being used based on your your

00:18:11,870 --> 00:18:17,150
graphical database so let's take a look

00:18:15,110 --> 00:18:20,240
at the implementation and we also have

00:18:17,150 --> 00:18:24,440
an auth mutation so let's take a look at

00:18:20,240 --> 00:18:27,200
an implementation so for for example for

00:18:24,440 --> 00:18:31,160
the currently authenticated user we get

00:18:27,200 --> 00:18:33,890
from the HTTP context we get chain

00:18:31,160 --> 00:18:35,910
ability authorization header we extract

00:18:33,890 --> 00:18:38,520
user ID out of that and

00:18:35,910 --> 00:18:40,950
we just delegate the user the the user

00:18:38,520 --> 00:18:43,140
query back to the to the graphical

00:18:40,950 --> 00:18:46,020
database so the entire mapping that you

00:18:43,140 --> 00:18:48,330
would have before we delegate to

00:18:46,020 --> 00:18:50,880
or Postgres that's really now a

00:18:48,330 --> 00:18:54,240
graphical request study that you can

00:18:50,880 --> 00:18:58,200
just forward the same for top four for

00:18:54,240 --> 00:19:01,410
your top posts here we can map your your

00:18:58,200 --> 00:19:04,310
arguments and also for here we're

00:19:01,410 --> 00:19:08,990
implementing an authentication mutation

00:19:04,310 --> 00:19:11,400
so which is really just getting a user

00:19:08,990 --> 00:19:16,310
comparing that the passwords really

00:19:11,400 --> 00:19:20,760
securely here and creating a JWT so

00:19:16,310 --> 00:19:26,280
let's let's quickly do so so the first I

00:19:20,760 --> 00:19:38,570
will deploy this again I'll deploy this

00:19:26,280 --> 00:19:42,450
locally them are 1000 and I get here

00:19:38,570 --> 00:19:45,150
Rothko endpoint copy that

00:19:42,450 --> 00:19:47,670
put it here into my environment variable

00:19:45,150 --> 00:19:53,490
since this is the way how I can figure

00:19:47,670 --> 00:19:57,960
my graphical environment reloaded

00:19:53,490 --> 00:20:01,500
so let's actually take a look at at the

00:19:57,960 --> 00:20:03,770
API which should be which should be

00:20:01,500 --> 00:20:03,770
empty

00:20:04,520 --> 00:20:13,320
so you can say all posts we don't have

00:20:09,990 --> 00:20:20,430
anything in here but I've prepared a

00:20:13,320 --> 00:20:21,870
little seed script make this a bit

00:20:20,430 --> 00:20:28,390
bigger

00:20:21,870 --> 00:20:31,890
so here I have like all posts and here

00:20:28,390 --> 00:20:34,090
the little data set I've prepared is

00:20:31,890 --> 00:20:37,960
from a couple of people you probably

00:20:34,090 --> 00:20:40,540
know and you does API really enables you

00:20:37,960 --> 00:20:43,050
to to do all of these craft features

00:20:40,540 --> 00:20:49,780
that I told you about before so you can

00:20:43,050 --> 00:20:56,500
filter by where the title contains Tesla

00:20:49,780 --> 00:20:59,590
and the author name contains Elin and

00:20:56,500 --> 00:21:04,900
you just get that back so the underlying

00:20:59,590 --> 00:21:10,650
API works so now let's start the graph

00:21:04,900 --> 00:21:15,850
Gale gateway this is now running here

00:21:10,650 --> 00:21:20,200
first we want to authenticate it's a

00:21:15,850 --> 00:21:24,880
very secure password let's grab that

00:21:20,200 --> 00:21:27,090
context here say the authorization

00:21:24,880 --> 00:21:27,090
header

00:21:29,409 --> 00:21:36,230
stirrers and let's check whether we

00:21:32,989 --> 00:21:38,779
authenticate it and there we are so we

00:21:36,230 --> 00:21:42,259
get all posts that we've ever written

00:21:38,779 --> 00:21:46,940
and yeah so this is just a really really

00:21:42,259 --> 00:21:50,109
brief demo of how it works when you want

00:21:46,940 --> 00:21:51,350
to use a graphical database directly

00:21:50,109 --> 00:21:53,840
yeah

00:21:51,350 --> 00:21:58,100
and that's basically all I have today

00:21:53,840 --> 00:21:59,779
the key takeaways are I think it's

00:21:58,100 --> 00:22:02,419
really powerful to think about these two

00:21:59,779 --> 00:22:05,690
use cases for graph kill one as a bait

00:22:02,419 --> 00:22:09,529
as a gateway technology but also as with

00:22:05,690 --> 00:22:11,570
this graph Gale first approach second

00:22:09,529 --> 00:22:14,869
again the graphical framework is not

00:22:11,570 --> 00:22:17,389
open source and all that I've shown on

00:22:14,869 --> 00:22:19,070
what I focused on right now is really

00:22:17,389 --> 00:22:21,080
this graph kill database pattern and

00:22:19,070 --> 00:22:23,210
this is what we are focusing more and

00:22:21,080 --> 00:22:25,600
more on we also want to make this a

00:22:23,210 --> 00:22:28,279
standalone component that he can use

00:22:25,600 --> 00:22:30,590
inside but also outside of the the

00:22:28,279 --> 00:22:34,159
framework and if you have any feedback

00:22:30,590 --> 00:22:36,859
about that we would love to hear it so

00:22:34,159 --> 00:22:39,109
you find everything you need on our

00:22:36,859 --> 00:22:41,889
website you can follow us on Twitter or

00:22:39,109 --> 00:22:44,179
check out our github repositories or

00:22:41,889 --> 00:22:46,090
find us here at the conference there are

00:22:44,179 --> 00:22:48,799
a couple of us here with a green t-shirt

00:22:46,090 --> 00:22:52,280
feel free to to find us and talk to us

00:22:48,799 --> 00:22:59,200
and yeah enjoy your lunch

00:22:52,280 --> 00:22:59,200

YouTube URL: https://www.youtube.com/watch?v=WhYjSFKNhBA


