Title: James Baxley - Universal GraphQL: How to use GraphQL beyond the frontend
Publication date: 2017-11-08
Playlist: GraphQL Summit 2017
Description: 
	James Baxley, Software Engineer at Apollo, gave this talk at GraphQL Summit 2017. Learn more: summit.graphql.com

Once you get used to the powerful features that come with using GraphQL for you application, you will want to use it everywhere you manage data. Thanks to the flexibility of Apollo Client, anything that runs JavaScript can use GraphQL. From simple terminal apps to full fledged IOT systems, GraphQL should be your learn once, use anywhere way to manage data.
Captions: 
	00:00:03,360 --> 00:00:08,309
all right this is awesome it's so great

00:00:06,390 --> 00:00:10,590
to see everybody this morning such a

00:00:08,309 --> 00:00:13,019
great packed house and yeah I like Li

00:00:10,590 --> 00:00:15,379
said normally I'm just out in my V hive

00:00:13,019 --> 00:00:17,850
so if you ever want some honey reach out

00:00:15,379 --> 00:00:19,730
but today I won't worry about bees

00:00:17,850 --> 00:00:22,380
although I could later if you want me to

00:00:19,730 --> 00:00:24,960
instead I want to talk about a new idea

00:00:22,380 --> 00:00:26,220
that isn't really new at all but I'm

00:00:24,960 --> 00:00:28,290
gonna call it nude so hopefully you get

00:00:26,220 --> 00:00:29,360
more excited about it called universal

00:00:28,290 --> 00:00:34,289
craft QL

00:00:29,360 --> 00:00:36,270
so first I'm James I work at Apollo I'm

00:00:34,289 --> 00:00:37,230
an open source developer which means

00:00:36,270 --> 00:00:39,120
that I could spend most of my time

00:00:37,230 --> 00:00:40,890
actually working on open source software

00:00:39,120 --> 00:00:43,079
which one is just a really incredible

00:00:40,890 --> 00:00:45,720
thing but also too it helps me to stay

00:00:43,079 --> 00:00:48,450
informed and excited about what's going

00:00:45,720 --> 00:00:50,489
on the community and recently my big

00:00:48,450 --> 00:00:52,920
focus has actually been about Apollo

00:00:50,489 --> 00:00:54,510
client 2.0 and how can we take what

00:00:52,920 --> 00:00:56,239
we've learned with the 1.0 and improve

00:00:54,510 --> 00:00:59,550
it and make your apps better and faster

00:00:56,239 --> 00:01:01,140
and we've been working on it for a few

00:00:59,550 --> 00:01:03,899
months now and it's it's getting pretty

00:01:01,140 --> 00:01:05,610
close to be ready for release and as we

00:01:03,899 --> 00:01:06,630
worked on it we started to realize that

00:01:05,610 --> 00:01:09,870
there was a lot of new opportunities

00:01:06,630 --> 00:01:11,610
with it but you couldn't do with 1.0 and

00:01:09,870 --> 00:01:13,440
a lot of that learnings has actually

00:01:11,610 --> 00:01:15,659
helped to inform this talk and the idea

00:01:13,440 --> 00:01:18,299
of using graph QL everywhere that you

00:01:15,659 --> 00:01:19,890
manage any kind of data so it's helped

00:01:18,299 --> 00:01:23,909
to kind of inform the idea of universal

00:01:19,890 --> 00:01:26,520
graph QL in practice so because what is

00:01:23,909 --> 00:01:28,979
a universal craft kill client and so

00:01:26,520 --> 00:01:31,020
with Apollo client 2.0 what we want to

00:01:28,979 --> 00:01:33,150
have is a way for you to manage all of

00:01:31,020 --> 00:01:34,049
your data so if you're unfamiliar to

00:01:33,150 --> 00:01:35,610
having been following along with the

00:01:34,049 --> 00:01:37,820
release candidates or the betas and then

00:01:35,610 --> 00:01:41,549
the broken betas and then the fix Beto's

00:01:37,820 --> 00:01:43,049
apollo client 2.0 is for big changes one

00:01:41,549 --> 00:01:45,270
is it takes the network stack and it

00:01:43,049 --> 00:01:47,189
completely makes it customizable so if

00:01:45,270 --> 00:01:49,170
there's a composable network stacks they

00:01:47,189 --> 00:01:50,820
use a project called apollo link which

00:01:49,170 --> 00:01:53,850
is I think a really really amazing

00:01:50,820 --> 00:01:55,439
project it allows for a modular cache so

00:01:53,850 --> 00:01:57,479
depending on the shape of your data and

00:01:55,439 --> 00:01:59,340
what you're doing you can kind of tune

00:01:57,479 --> 00:02:01,079
fine tune that cache to be as performant

00:01:59,340 --> 00:02:02,579
as you can so yeah like really really

00:02:01,079 --> 00:02:04,189
large data sets but I don't do a lot of

00:02:02,579 --> 00:02:06,930
mutations and you can really focus on

00:02:04,189 --> 00:02:08,399
near-instant reads or if you're actively

00:02:06,930 --> 00:02:09,720
making a lot of optimistic updates

00:02:08,399 --> 00:02:11,970
mutations then maybe you want to have a

00:02:09,720 --> 00:02:13,770
quicker write system it's a faster

00:02:11,970 --> 00:02:15,780
runtime our benchmarking has it around

00:02:13,770 --> 00:02:16,430
five times the speed of the Apollo

00:02:15,780 --> 00:02:18,799
client one point

00:02:16,430 --> 00:02:20,840
release and it's a smaller package it's

00:02:18,799 --> 00:02:22,489
actually about half the size of with 1.0

00:02:20,840 --> 00:02:23,629
and part of that was making it modular

00:02:22,489 --> 00:02:25,099
but the other part was also just

00:02:23,629 --> 00:02:26,930
improving some of the way that we did

00:02:25,099 --> 00:02:30,530
code sharing and reducing things that

00:02:26,930 --> 00:02:32,510
weren't necessary anymore so we've

00:02:30,530 --> 00:02:34,280
learned a lot building Apollo over the

00:02:32,510 --> 00:02:37,400
past few years and I've been part of the

00:02:34,280 --> 00:02:39,799
project since it began but most recently

00:02:37,400 --> 00:02:42,109
joined the team the summer actually and

00:02:39,799 --> 00:02:43,579
so when we were evaluating why we needed

00:02:42,109 --> 00:02:45,859
to rewrite something or like make an

00:02:43,579 --> 00:02:48,379
improvement making the decision for 2.0

00:02:45,859 --> 00:02:50,000
's not something that we take lightly so

00:02:48,379 --> 00:02:51,349
we had to think like why are we actually

00:02:50,000 --> 00:02:53,840
gonna do this what is it about graph QL

00:02:51,349 --> 00:02:55,819
and that we're not taking advantage of

00:02:53,840 --> 00:02:58,159
right now it really comes down to this

00:02:55,819 --> 00:02:59,900
idea that graph QL is about describing

00:02:58,159 --> 00:03:01,489
your data right you want to be able to

00:02:59,900 --> 00:03:05,269
just say this is what I'm looking for

00:03:01,489 --> 00:03:08,209
and then go ahead and make it work so

00:03:05,269 --> 00:03:09,920
graph QL is the language of your data

00:03:08,209 --> 00:03:12,439
it's about describing your data

00:03:09,920 --> 00:03:14,239
requirements and then allowing the codes

00:03:12,439 --> 00:03:17,000
to fulfill them to trust to be able to

00:03:14,239 --> 00:03:18,439
fill it so it's it's a it's an

00:03:17,000 --> 00:03:20,540
adjustment from the rest mentality which

00:03:18,439 --> 00:03:22,250
is I want this general set of data and

00:03:20,540 --> 00:03:23,239
then the server just gives me everything

00:03:22,250 --> 00:03:25,010
that they think that I'm going to need

00:03:23,239 --> 00:03:26,690
and it moves that idea over to the

00:03:25,010 --> 00:03:28,340
client to say this is exactly what I

00:03:26,690 --> 00:03:30,829
need for my UI or for my application

00:03:28,340 --> 00:03:32,359
purposes so I'm going to describe it and

00:03:30,829 --> 00:03:33,440
then I just expect you to fulfill it for

00:03:32,359 --> 00:03:35,569
me it's a really really good assistant

00:03:33,440 --> 00:03:37,370
essentially so it's a descriptive

00:03:35,569 --> 00:03:40,459
language to go between your client and

00:03:37,370 --> 00:03:41,569
your server and so it's really cool like

00:03:40,459 --> 00:03:44,510
if you look on the left of the slide

00:03:41,569 --> 00:03:46,069
here you can see a graphical query and

00:03:44,510 --> 00:03:47,870
fun fact this is actually the query that

00:03:46,069 --> 00:03:49,220
one of the queries that powers engine

00:03:47,870 --> 00:03:50,750
which is a new product that we launched

00:03:49,220 --> 00:03:52,790
yesterday if you want to learn more

00:03:50,750 --> 00:03:54,470
about it you can go to the garage and

00:03:52,790 --> 00:03:57,290
I'll show you it

00:03:54,470 --> 00:03:58,579
but idea is I want to describe my data

00:03:57,290 --> 00:04:00,229
and then I want to get it back in the

00:03:58,579 --> 00:04:01,940
exact same shape so there's no

00:04:00,229 --> 00:04:03,620
unnecessary fields it matches what I

00:04:01,940 --> 00:04:05,720
wrote exactly you can use things like

00:04:03,620 --> 00:04:08,359
alias to even rename and remap on the

00:04:05,720 --> 00:04:12,229
fly which is a really really powerful

00:04:08,359 --> 00:04:14,299
thing it also is really great because if

00:04:12,229 --> 00:04:16,280
you you can use static descriptions and

00:04:14,299 --> 00:04:17,900
then there's a way to have dynamic

00:04:16,280 --> 00:04:19,880
execution of it so using things like

00:04:17,900 --> 00:04:21,949
variables and directives you can take

00:04:19,880 --> 00:04:23,599
runtime information and apply it to your

00:04:21,949 --> 00:04:26,419
data but you can still get all the

00:04:23,599 --> 00:04:28,190
benefits of static queries think about

00:04:26,419 --> 00:04:30,350
our dev tooling you can have it have

00:04:28,190 --> 00:04:32,090
better security support for it you

00:04:30,350 --> 00:04:33,980
and like send those over to your server

00:04:32,090 --> 00:04:35,270
and say if you don't see this query then

00:04:33,980 --> 00:04:36,760
just reject it because it's somebody

00:04:35,270 --> 00:04:39,620
else

00:04:36,760 --> 00:04:40,790
so graph QL ultimately is really great

00:04:39,620 --> 00:04:42,380
because it lets you to describe your

00:04:40,790 --> 00:04:45,050
data and your data requirements and then

00:04:42,380 --> 00:04:46,340
just trust that it gets fulfilled so

00:04:45,050 --> 00:04:47,420
then we're thinking okay yeah this is

00:04:46,340 --> 00:04:48,530
great we all know this we're all it's

00:04:47,420 --> 00:04:50,690
really excited about here that's why

00:04:48,530 --> 00:04:53,300
we're all here so where are we right now

00:04:50,690 --> 00:04:55,820
and this was this summer so we have

00:04:53,300 --> 00:04:57,500
Apollo client which is really great for

00:04:55,820 --> 00:04:59,660
web use and for react native

00:04:57,500 --> 00:05:01,340
applications such as a JavaScript client

00:04:59,660 --> 00:05:04,000
so anywhere that you can run JavaScript

00:05:01,340 --> 00:05:06,560
you can run it which is pretty exciting

00:05:04,000 --> 00:05:10,280
but the idea is you just you bind data

00:05:06,560 --> 00:05:11,930
to you UI we also have Apollo iOS and

00:05:10,280 --> 00:05:14,420
Android so if you're writing native

00:05:11,930 --> 00:05:16,430
clients then you can use those so taking

00:05:14,420 --> 00:05:18,590
the same idea of a normalized cache and

00:05:16,430 --> 00:05:22,040
using the type system and moving that

00:05:18,590 --> 00:05:24,110
into your native code base and then we

00:05:22,040 --> 00:05:27,410
have crafty old tools along with Apollo

00:05:24,110 --> 00:05:29,210
server which makes building craft heal

00:05:27,410 --> 00:05:30,830
servers really easy and graph you old

00:05:29,210 --> 00:05:32,780
tools really just makes building a way

00:05:30,830 --> 00:05:34,280
to execute a graphical query really easy

00:05:32,780 --> 00:05:36,440
it isn't necessarily limit to just a

00:05:34,280 --> 00:05:38,120
server but even something like craft

00:05:36,440 --> 00:05:39,560
Cavell tools it takes the idea of

00:05:38,120 --> 00:05:41,480
describing the data that you want to

00:05:39,560 --> 00:05:43,040
show instead of request and it turned

00:05:41,480 --> 00:05:44,480
that into your application so you're

00:05:43,040 --> 00:05:45,920
using the schema definition language

00:05:44,480 --> 00:05:47,390
here to generate your application

00:05:45,920 --> 00:05:49,130
because it's more about being able to

00:05:47,390 --> 00:05:52,520
easily understand and explain what's

00:05:49,130 --> 00:05:54,020
going on so that's really great but

00:05:52,520 --> 00:05:56,180
ultimately what we were seeing is it

00:05:54,020 --> 00:05:58,340
kind of limited ourselves the idea of

00:05:56,180 --> 00:05:59,690
just like innovating and replacing what

00:05:58,340 --> 00:06:02,450
we were doing with our existing REST API

00:05:59,690 --> 00:06:04,670
s but what we were missing out on was

00:06:02,450 --> 00:06:06,950
the idea of providing a really clean way

00:06:04,670 --> 00:06:09,170
to tell your application what data you

00:06:06,950 --> 00:06:12,410
needed and then piping together a source

00:06:09,170 --> 00:06:14,810
for it to resolve so we stopped back and

00:06:12,410 --> 00:06:16,370
we're like hmm how can we actually start

00:06:14,810 --> 00:06:17,630
to expand that what new opportunities

00:06:16,370 --> 00:06:19,760
are there what are some new horizons

00:06:17,630 --> 00:06:22,670
that we can explore using just craft

00:06:19,760 --> 00:06:24,440
fuel as the way that we do it and so

00:06:22,670 --> 00:06:26,540
like Lee mentioned actually was

00:06:24,440 --> 00:06:29,060
originally a designer I studied

00:06:26,540 --> 00:06:30,910
architecture and art and I got into

00:06:29,060 --> 00:06:33,500
software from a design standpoint and

00:06:30,910 --> 00:06:35,090
when I approached all these things and

00:06:33,500 --> 00:06:36,470
we see like our back-end team is loving

00:06:35,090 --> 00:06:38,419
building this our front-end teams loving

00:06:36,470 --> 00:06:40,040
using it and I talked to my peers who

00:06:38,419 --> 00:06:41,960
are designers and they're really

00:06:40,040 --> 00:06:44,210
frustrated because you know they have

00:06:41,960 --> 00:06:45,440
like a thousand pictures of cats

00:06:44,210 --> 00:06:47,210
the computer that they use to mock up

00:06:45,440 --> 00:06:48,919
stuff and they're just kind of like

00:06:47,210 --> 00:06:49,880
missing the whole point maybe I have

00:06:48,919 --> 00:06:53,840
weird friends maybe they don't really

00:06:49,880 --> 00:06:55,759
use cats but you know the idea is like

00:06:53,840 --> 00:06:57,289
hey we're trying to design something for

00:06:55,759 --> 00:06:58,849
our users but we don't actually know

00:06:57,289 --> 00:07:00,860
what our users are using and so you get

00:06:58,849 --> 00:07:02,150
these situations where like unless

00:07:00,860 --> 00:07:04,310
you're air B&B and you actually have

00:07:02,150 --> 00:07:06,139
beautiful places on your app you're like

00:07:04,310 --> 00:07:07,160
oh look at this wonderful idea and this

00:07:06,139 --> 00:07:08,410
wonderful image and then you actually

00:07:07,160 --> 00:07:10,940
see it in production you're like ooh

00:07:08,410 --> 00:07:13,210
this was like a really old phone and

00:07:10,940 --> 00:07:15,110
it's really pixely and that's no good so

00:07:13,210 --> 00:07:16,460
what if we could actually design with

00:07:15,110 --> 00:07:18,050
real data and what if we could make that

00:07:16,460 --> 00:07:19,849
really easy and you don't want to add

00:07:18,050 --> 00:07:22,220
say they have to have your design team

00:07:19,849 --> 00:07:24,560
become engineers because that's wasting

00:07:22,220 --> 00:07:26,180
their potential instead you want to make

00:07:24,560 --> 00:07:28,280
it really easy for them to select what

00:07:26,180 --> 00:07:30,199
they want to put into the UI and start

00:07:28,280 --> 00:07:32,120
to iterate on that design and even you

00:07:30,199 --> 00:07:35,419
want them to be able to propose new ways

00:07:32,120 --> 00:07:37,490
to access things so with graph QL you

00:07:35,419 --> 00:07:39,770
can focus on designing for real people

00:07:37,490 --> 00:07:42,470
and so this is actually a shout out to

00:07:39,770 --> 00:07:45,259
Airbnb and physically John Gould for

00:07:42,470 --> 00:07:47,690
react sketch app and it allows you to

00:07:45,259 --> 00:07:49,909
write react and to render it in sketch

00:07:47,690 --> 00:07:51,560
to be able to keep a universal component

00:07:49,909 --> 00:07:53,330
library and to iterate on designs using

00:07:51,560 --> 00:07:56,270
react which I think hopefully we all

00:07:53,330 --> 00:07:57,470
love I know I do so we're taking a look

00:07:56,270 --> 00:08:00,250
at that and we're like well what if we

00:07:57,470 --> 00:08:02,960
actually use real data sources in sketch

00:08:00,250 --> 00:08:05,570
and ironically using react Apollo

00:08:02,960 --> 00:08:08,060
server-side rendering functions we can

00:08:05,570 --> 00:08:09,380
render graph QL data right into react

00:08:08,060 --> 00:08:11,479
app so I don't know if we can get it

00:08:09,380 --> 00:08:14,270
back on the screen there we go so this

00:08:11,479 --> 00:08:16,639
is an example from the repo that uses

00:08:14,270 --> 00:08:18,440
Apollo client and it's using I think

00:08:16,639 --> 00:08:19,969
graph cool as a service and that that's

00:08:18,440 --> 00:08:22,130
real data pulling from graph Tyrell

00:08:19,969 --> 00:08:24,229
rendered in sketch so you can actually

00:08:22,130 --> 00:08:26,180
move that layer and not just be a

00:08:24,229 --> 00:08:29,289
client-server negotiation but actually

00:08:26,180 --> 00:08:31,430
move graph QL early into your process

00:08:29,289 --> 00:08:33,620
and with this you can actually create

00:08:31,430 --> 00:08:35,300
production ready design components so

00:08:33,620 --> 00:08:37,339
it's not just how do I make this look

00:08:35,300 --> 00:08:39,529
but it's this is the data that I want to

00:08:37,339 --> 00:08:41,479
be requested from the product level team

00:08:39,529 --> 00:08:43,099
from the design team all the way to

00:08:41,479 --> 00:08:45,350
production with this kind of codebase

00:08:43,099 --> 00:08:48,079
and so you can kind of unify your entire

00:08:45,350 --> 00:08:49,850
team around graph QL and react something

00:08:48,079 --> 00:08:51,560
like react and then you have your

00:08:49,850 --> 00:08:53,690
production data at UI and your

00:08:51,560 --> 00:08:56,270
production data requirements paired

00:08:53,690 --> 00:08:58,699
together all the way from sketch to the

00:08:56,270 --> 00:09:01,680
actual native app

00:08:58,699 --> 00:09:03,029
another really cool thing that you can

00:09:01,680 --> 00:09:04,740
do is something like schema stitching

00:09:03,029 --> 00:09:07,230
which I'll get into a little bit later

00:09:04,740 --> 00:09:08,939
is you can actually and as well as using

00:09:07,230 --> 00:09:10,769
graphical tools mocking services you can

00:09:08,939 --> 00:09:12,870
just start faking your data until you

00:09:10,769 --> 00:09:14,490
got our point where you need it so one

00:09:12,870 --> 00:09:15,660
of the issues that we heard was like Oh

00:09:14,490 --> 00:09:16,949
graph field makes is so much faster

00:09:15,660 --> 00:09:18,629
which is really really great we can

00:09:16,949 --> 00:09:20,790
iterate on products we can just describe

00:09:18,629 --> 00:09:21,870
our data and get it but then our

00:09:20,790 --> 00:09:23,220
back-end teams starting to really like

00:09:21,870 --> 00:09:24,389
get mad at us because we're asking for

00:09:23,220 --> 00:09:25,529
all these new things over and over and

00:09:24,389 --> 00:09:28,949
over again because we're so far ahead of

00:09:25,529 --> 00:09:30,480
them and we're like oh you're right

00:09:28,949 --> 00:09:31,800
that's not a problem that we actually

00:09:30,480 --> 00:09:33,930
solve that's a Jo problem that everyone

00:09:31,800 --> 00:09:35,639
still has so it is what if you could

00:09:33,930 --> 00:09:37,230
actually as a front-end team just

00:09:35,639 --> 00:09:39,689
describe what you wanted the data to

00:09:37,230 --> 00:09:41,790
eventually look like and mock on top of

00:09:39,689 --> 00:09:42,899
your existing server and used like

00:09:41,790 --> 00:09:45,449
something like schema stitching or

00:09:42,899 --> 00:09:46,769
graphical tools mocking to temporarily

00:09:45,449 --> 00:09:48,569
say this is what the scheme is going to

00:09:46,769 --> 00:09:50,309
look like go ahead and build your friend

00:09:48,569 --> 00:09:52,019
with it and then eventually when the

00:09:50,309 --> 00:09:54,269
services team gets to it then we just

00:09:52,019 --> 00:09:57,360
removed that Mach portion and so this is

00:09:54,269 --> 00:09:59,490
using Apollo launch pad which unless you

00:09:57,360 --> 00:10:00,990
actually ride a graph QL server and you

00:09:59,490 --> 00:10:03,629
can actually use this to mock on top of

00:10:00,990 --> 00:10:04,769
your company's existing graphical app so

00:10:03,629 --> 00:10:06,569
if you don't have access to server

00:10:04,769 --> 00:10:09,149
infrastructure you can just borrow ours

00:10:06,569 --> 00:10:10,499
and write your app on top of it and then

00:10:09,149 --> 00:10:13,679
just start building what you want to

00:10:10,499 --> 00:10:15,269
build so that's really awesome we can

00:10:13,679 --> 00:10:17,399
take what we're doing the graph QL and

00:10:15,269 --> 00:10:19,679
even the traditional client-server

00:10:17,399 --> 00:10:22,439
request we can move it further into our

00:10:19,679 --> 00:10:23,730
process so our team universally uses

00:10:22,439 --> 00:10:26,399
graphic you all at this point which is

00:10:23,730 --> 00:10:27,899
super exciting but we're still just kind

00:10:26,399 --> 00:10:29,490
of stuck with like okay we have a client

00:10:27,899 --> 00:10:32,040
we have some server that uses graph QL

00:10:29,490 --> 00:10:34,679
and that's really great but what else

00:10:32,040 --> 00:10:37,620
can we do so what is the tomorrow look

00:10:34,679 --> 00:10:39,029
like for graph QL so what if you could

00:10:37,620 --> 00:10:41,819
use different data sources you know

00:10:39,029 --> 00:10:43,290
ultimately the spec is independent of

00:10:41,819 --> 00:10:45,389
how it the data gets resolved it just

00:10:43,290 --> 00:10:47,759
says given this query you should get

00:10:45,389 --> 00:10:49,319
back this result so what if you could

00:10:47,759 --> 00:10:50,579
start to stream some of those results

00:10:49,319 --> 00:10:52,350
you know what if you could say like

00:10:50,579 --> 00:10:54,089
alright I want this bit of information

00:10:52,350 --> 00:10:56,069
and I eventually want this but like

00:10:54,089 --> 00:10:57,569
don't make me wait on it so we'll just

00:10:56,069 --> 00:10:59,850
wait until just defer it for a little

00:10:57,569 --> 00:11:01,439
bit later what if you'd actually manage

00:10:59,850 --> 00:11:03,540
all your application state so instead of

00:11:01,439 --> 00:11:06,420
using something like redux or mob x you

00:11:03,540 --> 00:11:07,860
could just use graph QL everywhere what

00:11:06,420 --> 00:11:10,170
if you could use your existing rest in

00:11:07,860 --> 00:11:10,440
points or a third party services rest

00:11:10,170 --> 00:11:11,700
and

00:11:10,440 --> 00:11:14,280
because they haven't updated and moved

00:11:11,700 --> 00:11:15,960
to graph yet and what if you could just

00:11:14,280 --> 00:11:17,730
use data from anywhere like what what

00:11:15,960 --> 00:11:19,650
are the possibilities here if we make it

00:11:17,730 --> 00:11:21,270
really really easy to just describe your

00:11:19,650 --> 00:11:24,750
data and then you plug in and wait to

00:11:21,270 --> 00:11:26,790
resolve it so one of these idea is like

00:11:24,750 --> 00:11:29,640
streaming server side rendering so react

00:11:26,790 --> 00:11:30,660
16 came out with way better performance

00:11:29,640 --> 00:11:32,430
for server-side rendering because it

00:11:30,660 --> 00:11:34,770
allows you actually stream your server

00:11:32,430 --> 00:11:36,960
render to your client which is really

00:11:34,770 --> 00:11:39,000
great but it kind of still has a

00:11:36,960 --> 00:11:40,200
limitation of USOF to resolve some data

00:11:39,000 --> 00:11:41,820
unless you're just rendering an app

00:11:40,200 --> 00:11:44,490
shell so how can we make it really

00:11:41,820 --> 00:11:46,950
really easy to render your data and your

00:11:44,490 --> 00:11:49,590
UI as fast as possible and right now

00:11:46,950 --> 00:11:51,120
react Apollo has a way to do server-side

00:11:49,590 --> 00:11:52,560
rendering that's really really easy you

00:11:51,120 --> 00:11:54,540
just it goes all the way down your tree

00:11:52,560 --> 00:11:56,160
it finds any data source it waits until

00:11:54,540 --> 00:11:57,780
they resolve the continues going down

00:11:56,160 --> 00:11:59,940
and you get all of your data and then

00:11:57,780 --> 00:12:01,170
you actually render your app so it's

00:11:59,940 --> 00:12:02,310
being used in production by a lot of

00:12:01,170 --> 00:12:03,930
companies it actually works really

00:12:02,310 --> 00:12:06,030
really well but we always want to try

00:12:03,930 --> 00:12:08,280
and make that faster so what if instead

00:12:06,030 --> 00:12:09,870
of doing a to pass render what did you

00:12:08,280 --> 00:12:12,060
just say all right I want you to stream

00:12:09,870 --> 00:12:14,730
this react app over the clients and you

00:12:12,060 --> 00:12:16,500
could expect that the SIRT the render

00:12:14,730 --> 00:12:18,270
process is going to go down your tree

00:12:16,500 --> 00:12:19,800
it's going to build your UI and any

00:12:18,270 --> 00:12:22,710
times it finds a data source that it's

00:12:19,800 --> 00:12:24,630
missing it pauses it gets that data and

00:12:22,710 --> 00:12:26,040
then it streams it back and what if the

00:12:24,630 --> 00:12:27,390
data source itself is actually streaming

00:12:26,040 --> 00:12:28,740
and you want to say after given amount

00:12:27,390 --> 00:12:30,180
of time if this doesn't resolve on the

00:12:28,740 --> 00:12:31,680
server then just go ahead and send it

00:12:30,180 --> 00:12:33,630
over and pick it up later on the client

00:12:31,680 --> 00:12:35,430
and so you can say like I want to do a

00:12:33,630 --> 00:12:36,960
partial render half of it on the server

00:12:35,430 --> 00:12:39,660
and the rest of it on the client and it

00:12:36,960 --> 00:12:41,310
just worked automatically for you so

00:12:39,660 --> 00:12:43,770
using a tools like the deferred

00:12:41,310 --> 00:12:47,130
directive that we actually announced a

00:12:43,770 --> 00:12:48,690
little while ago or streaming as well as

00:12:47,130 --> 00:12:51,000
react Apollo you can actually start to

00:12:48,690 --> 00:12:53,450
get some of these benefits in graph

00:12:51,000 --> 00:12:56,220
gills tomorrow don't try it right now

00:12:53,450 --> 00:12:58,860
and then what if you could use existing

00:12:56,220 --> 00:13:00,720
resting points so graph QL is amazing

00:12:58,860 --> 00:13:02,400
with directives and so what if you can

00:13:00,720 --> 00:13:04,230
start to write these client side only

00:13:02,400 --> 00:13:05,760
directives and you say like all right I

00:13:04,230 --> 00:13:07,890
have an existing rest in point it's that

00:13:05,760 --> 00:13:10,260
users email and given their email you're

00:13:07,890 --> 00:13:11,970
giving back an user but one of the

00:13:10,260 --> 00:13:13,260
issues with rest is you have these like

00:13:11,970 --> 00:13:15,089
waterfall requests that you have to

00:13:13,260 --> 00:13:16,950
manage so you have to manage the loading

00:13:15,089 --> 00:13:18,780
States the air state the waterfall

00:13:16,950 --> 00:13:20,430
request where you cache all that

00:13:18,780 --> 00:13:23,769
information so when you're doing this

00:13:20,430 --> 00:13:25,600
you have to build essentially a client

00:13:23,769 --> 00:13:28,119
data management clients to be able to do

00:13:25,600 --> 00:13:30,009
it instead if you're already having it's

00:13:28,119 --> 00:13:31,509
already using Apollo want to just use it

00:13:30,009 --> 00:13:33,309
it has all the benefits it has

00:13:31,509 --> 00:13:35,920
normalized caching so what if you could

00:13:33,309 --> 00:13:38,529
just write at rest and then you could

00:13:35,920 --> 00:13:39,459
take a break and just let it work and

00:13:38,529 --> 00:13:41,769
you could even be able to use

00:13:39,459 --> 00:13:43,299
information to create waterfall requests

00:13:41,769 --> 00:13:44,920
and it would just do it for you where

00:13:43,299 --> 00:13:46,899
you do something like app provides and

00:13:44,920 --> 00:13:49,269
you say given the ID from that previous

00:13:46,899 --> 00:13:51,009
request use it as the ID variable in

00:13:49,269 --> 00:13:53,499
this next request and again you can just

00:13:51,009 --> 00:13:54,699
quickly iterate on these ideas and use

00:13:53,499 --> 00:13:56,259
this in production with services that

00:13:54,699 --> 00:13:58,119
you don't control so whether you want to

00:13:56,259 --> 00:14:00,459
do that on the client or do this on the

00:13:58,119 --> 00:14:03,549
server with kakhiel tools both of them

00:14:00,459 --> 00:14:04,929
would be able to be able to work and

00:14:03,549 --> 00:14:07,029
then I think the one that makes me most

00:14:04,929 --> 00:14:09,519
excited is just accessing all of your

00:14:07,029 --> 00:14:12,129
data having worked and led a team of

00:14:09,519 --> 00:14:13,749
developers before it gets kind of really

00:14:12,129 --> 00:14:15,699
hard to teach all the different ways to

00:14:13,749 --> 00:14:17,589
manage data it's like alright so you're

00:14:15,699 --> 00:14:19,149
new here this is really great reiax

00:14:17,589 --> 00:14:20,199
pretty great like a lot of tutorials

00:14:19,149 --> 00:14:22,629
just learn to react and you can build

00:14:20,199 --> 00:14:24,220
our app but if you want to use data you

00:14:22,629 --> 00:14:26,529
got to do graph QL so I gotta do queries

00:14:24,220 --> 00:14:27,910
mutations you've gotta learn Redux you

00:14:26,529 --> 00:14:30,579
gotta learn to read out saga so that you

00:14:27,910 --> 00:14:32,199
can do like chains of events we have

00:14:30,579 --> 00:14:33,279
local component state I don't really

00:14:32,199 --> 00:14:35,079
know when to tell you when to use there

00:14:33,279 --> 00:14:37,299
when not to but like hopefully just kind

00:14:35,079 --> 00:14:38,589
of figure it out and so then it's like

00:14:37,299 --> 00:14:41,290
the end of the first week and they're

00:14:38,589 --> 00:14:44,230
like I'm just gonna go and try and like

00:14:41,290 --> 00:14:45,429
leave because this is too much so if we

00:14:44,230 --> 00:14:47,259
made it really easy and you said yeah

00:14:45,429 --> 00:14:48,970
you just write graph QL and then you

00:14:47,259 --> 00:14:50,829
just say for this field I want you to

00:14:48,970 --> 00:14:53,019
use it's on the client so just look to

00:14:50,829 --> 00:14:54,879
the client graph QL execution and not to

00:14:53,019 --> 00:14:55,749
the server and even better than that

00:14:54,879 --> 00:14:57,100
what if you didn't have to write

00:14:55,749 --> 00:14:58,720
separate queries or it's like well this

00:14:57,100 --> 00:15:00,910
is my client query and this is my server

00:14:58,720 --> 00:15:02,379
query what did you get in line them and

00:15:00,910 --> 00:15:04,149
you could just say this field or this

00:15:02,379 --> 00:15:06,459
selection set bring it from the client

00:15:04,149 --> 00:15:08,319
go ahead and resolve it and then get the

00:15:06,459 --> 00:15:09,669
server response at the same time merge

00:15:08,319 --> 00:15:13,179
those things together forming my UI Oh

00:15:09,669 --> 00:15:14,379
update well with Apollo client 2.0 you

00:15:13,179 --> 00:15:16,119
can actually do that you'll be able to

00:15:14,379 --> 00:15:18,009
do that you can say this is just graphic

00:15:16,119 --> 00:15:20,230
well that's how you manage data you

00:15:18,009 --> 00:15:23,980
render with react and you manage data

00:15:20,230 --> 00:15:26,529
with Apollo and all these tomorrow

00:15:23,980 --> 00:15:28,720
events are driven by this idea of using

00:15:26,529 --> 00:15:30,189
the spec and not change like not the

00:15:28,720 --> 00:15:32,379
spec doesn't need additions for us it's

00:15:30,189 --> 00:15:34,329
incredibly powerful right now but it's

00:15:32,379 --> 00:15:36,189
so new that we still haven't taken full

00:15:34,329 --> 00:15:37,390
advantage of it yet and the spec allows

00:15:36,189 --> 00:15:39,130
for directives and kind

00:15:37,390 --> 00:15:41,830
ad hoc directives as you want it both on

00:15:39,130 --> 00:15:44,560
the client only server only or client to

00:15:41,830 --> 00:15:46,210
server usage so something like skip and

00:15:44,560 --> 00:15:49,000
include exists as a really great example

00:15:46,210 --> 00:15:51,700
of how you can actually build these

00:15:49,000 --> 00:15:53,410
tools to make your app better so we can

00:15:51,700 --> 00:15:54,160
take this these directives we'd start

00:15:53,410 --> 00:15:55,960
adding our own

00:15:54,160 --> 00:15:58,720
so you just npm install this package

00:15:55,960 --> 00:16:00,130
that can handle a directive for you and

00:15:58,720 --> 00:16:03,910
then you just improve what you can do

00:16:00,130 --> 00:16:05,410
with your data so now that we can like

00:16:03,910 --> 00:16:07,180
describe our data better and more

00:16:05,410 --> 00:16:09,100
specifically like in their query we can

00:16:07,180 --> 00:16:11,110
say resolve it from here this is rest

00:16:09,100 --> 00:16:13,840
day this is client data and then our

00:16:11,110 --> 00:16:15,400
servers or our response sections are

00:16:13,840 --> 00:16:17,500
still really good at resolving data like

00:16:15,400 --> 00:16:18,460
given this information use a resolver

00:16:17,500 --> 00:16:19,810
and pull it from here

00:16:18,460 --> 00:16:21,640
it's not something we all understand

00:16:19,810 --> 00:16:23,830
it's just functions but there's still a

00:16:21,640 --> 00:16:26,080
really big gap in between describing

00:16:23,830 --> 00:16:29,170
your data and resolve it so what can we

00:16:26,080 --> 00:16:30,520
do to connect those dots so there's

00:16:29,170 --> 00:16:31,030
three new ways that you can connect

00:16:30,520 --> 00:16:33,730
those Doc's

00:16:31,030 --> 00:16:35,410
one is Apollo link one is with schema

00:16:33,730 --> 00:16:39,640
stitching and then one is using Apollo

00:16:35,410 --> 00:16:41,290
engine so what is Apollo link

00:16:39,640 --> 00:16:42,910
honestly Apollo link is the most

00:16:41,290 --> 00:16:44,590
exciting part about the to point out to

00:16:42,910 --> 00:16:46,060
me even though I didn't get to work on

00:16:44,590 --> 00:16:48,700
it quite as much as I would have liked

00:16:46,060 --> 00:16:50,560
to because it was just so well done one

00:16:48,700 --> 00:16:52,900
of our team members Evans Houser wrote

00:16:50,560 --> 00:16:56,350
just an incredible way to describe data

00:16:52,900 --> 00:16:57,310
and when I'm like on a flight I just

00:16:56,350 --> 00:16:59,830
write up all the links cuz they're

00:16:57,310 --> 00:17:02,980
honestly fun and they can do so much I'm

00:16:59,830 --> 00:17:04,810
also kind of weird so I apologize but

00:17:02,980 --> 00:17:07,810
Apollo links are about creating a

00:17:04,810 --> 00:17:09,820
components based request chain so how do

00:17:07,810 --> 00:17:12,850
we control the execution of looking up

00:17:09,820 --> 00:17:13,930
data and then there's gonna be a lot of

00:17:12,850 --> 00:17:15,699
things that you want to do with that you

00:17:13,930 --> 00:17:17,470
want to handle errors and you're able to

00:17:15,699 --> 00:17:18,910
do side effects like logging services

00:17:17,470 --> 00:17:20,560
you don't have to be able to show a

00:17:18,910 --> 00:17:22,720
global loading state for all your

00:17:20,560 --> 00:17:24,070
operations going on at once you may want

00:17:22,720 --> 00:17:26,829
to change the shape that gets back from

00:17:24,070 --> 00:17:28,500
the server from another instance so you

00:17:26,829 --> 00:17:30,310
could write this really really long

00:17:28,500 --> 00:17:31,780
control function which you could

00:17:30,310 --> 00:17:34,240
actually do with Apollo client 1.0 it

00:17:31,780 --> 00:17:36,310
just was not very easy and so no one did

00:17:34,240 --> 00:17:37,780
it but what if you could have these

00:17:36,310 --> 00:17:40,420
individual components that says like

00:17:37,780 --> 00:17:42,940
okay if you ever see an error just send

00:17:40,420 --> 00:17:45,190
that error to sentry and that's it and

00:17:42,940 --> 00:17:46,630
then just keep going and then you had

00:17:45,190 --> 00:17:48,610
another one that says this is how I log

00:17:46,630 --> 00:17:49,810
in and you just save that and use it

00:17:48,610 --> 00:17:51,520
across all of your applications

00:17:49,810 --> 00:17:53,500
Apollo link actually should do

00:17:51,520 --> 00:17:56,770
that it's the request primitive design

00:17:53,500 --> 00:17:59,320
for the graph QL age so this is actually

00:17:56,770 --> 00:18:01,360
an Apollo link so this is creating an

00:17:59,320 --> 00:18:02,950
error handler and all you do is say on

00:18:01,360 --> 00:18:03,580
air and then given the errors do

00:18:02,950 --> 00:18:05,050
something with it

00:18:03,580 --> 00:18:07,390
and then you just include it in your

00:18:05,050 --> 00:18:10,510
link or in your Apollo client stack and

00:18:07,390 --> 00:18:12,940
now it just works and so you can see how

00:18:10,510 --> 00:18:15,430
how little you have to write table start

00:18:12,940 --> 00:18:19,030
to do some really powerful things and

00:18:15,430 --> 00:18:20,500
you can reuse them everywhere so what do

00:18:19,030 --> 00:18:22,900
you mean reuse them everywhere what if

00:18:20,500 --> 00:18:24,940
you could actually use graph QL to build

00:18:22,900 --> 00:18:27,040
graph QL just kind of a look a little

00:18:24,940 --> 00:18:29,080
bit of a weird thing it's very meta

00:18:27,040 --> 00:18:30,670
but with schema stitching you can

00:18:29,080 --> 00:18:33,940
actually do that given graph QL

00:18:30,670 --> 00:18:35,830
micro-services you can say pull this set

00:18:33,940 --> 00:18:37,870
of schema from this set of applications

00:18:35,830 --> 00:18:39,400
and this set from over here and merge

00:18:37,870 --> 00:18:42,340
them all together into one schema so my

00:18:39,400 --> 00:18:43,240
client only has to look at one place so

00:18:42,340 --> 00:18:45,550
the reality is this is actually

00:18:43,240 --> 00:18:47,500
available now if calcul tools and you

00:18:45,550 --> 00:18:49,450
use apollo links to make these requests

00:18:47,500 --> 00:18:50,770
so if you have an application-level air

00:18:49,450 --> 00:18:52,540
handler that you want to use for your

00:18:50,770 --> 00:18:53,920
service you can use it on the client and

00:18:52,540 --> 00:18:56,020
you can use on the server to stitch

00:18:53,920 --> 00:18:58,990
together multiple schemas or maybe that

00:18:56,020 --> 00:19:00,460
you've shipped the github api where you

00:18:58,990 --> 00:19:01,780
need to make a pre-flight request to log

00:19:00,460 --> 00:19:03,550
in and then you want to be able to add

00:19:01,780 --> 00:19:05,710
any kind of authentication header to the

00:19:03,550 --> 00:19:07,630
request itself that works on the client

00:19:05,710 --> 00:19:09,400
and on the server or anywhere else you

00:19:07,630 --> 00:19:11,170
want to run it maybe it's a CLI that

00:19:09,400 --> 00:19:13,600
you're building you can just save and

00:19:11,170 --> 00:19:15,400
install that NPM like that you can

00:19:13,600 --> 00:19:17,260
impede install that Apollo link and then

00:19:15,400 --> 00:19:19,990
you start using it it can it since it's

00:19:17,260 --> 00:19:21,850
able to return multiple responses you

00:19:19,990 --> 00:19:24,550
can do like asynchronous work really

00:19:21,850 --> 00:19:26,740
easily and then you can stitch together

00:19:24,550 --> 00:19:29,590
success so you can take the query on the

00:19:26,740 --> 00:19:32,140
Left which has the Ticketmaster universe

00:19:29,590 --> 00:19:33,610
API and then using dark skies API and

00:19:32,140 --> 00:19:35,710
this just shows how I've mainly wired

00:19:33,610 --> 00:19:38,080
them together on the Left I have my

00:19:35,710 --> 00:19:39,160
event and then I have location well the

00:19:38,080 --> 00:19:41,200
issue is I need to know the location

00:19:39,160 --> 00:19:43,540
from the event because I don't actually

00:19:41,200 --> 00:19:45,610
know that so instead you can stitch

00:19:43,540 --> 00:19:48,000
together the schema on the right that

00:19:45,610 --> 00:19:50,140
uses the city name and passes it through

00:19:48,000 --> 00:19:52,150
schema stitching to that location

00:19:50,140 --> 00:19:53,770
resolver so then the client doesn't need

00:19:52,150 --> 00:19:55,450
to know where the data comes from they

00:19:53,770 --> 00:20:00,760
just are able to describe it and it just

00:19:55,450 --> 00:20:02,740
works and then the third step is Apollo

00:20:00,760 --> 00:20:04,600
engine and Apollo engine is about

00:20:02,740 --> 00:20:05,260
unlocking your craft QL so you don't

00:20:04,600 --> 00:20:07,120
have to

00:20:05,260 --> 00:20:08,290
it can make your app faster it can help

00:20:07,120 --> 00:20:10,450
you to understand what's going on with

00:20:08,290 --> 00:20:13,210
it and the future can do a lot of things

00:20:10,450 --> 00:20:14,560
like providing batching or defers for

00:20:13,210 --> 00:20:16,090
you that way you don't have to wait for

00:20:14,560 --> 00:20:17,850
your server to implement it or you don't

00:20:16,090 --> 00:20:20,140
have to worry about it

00:20:17,850 --> 00:20:21,880
so really Apollo engine is about helping

00:20:20,140 --> 00:20:24,040
you to understand and improve your graph

00:20:21,880 --> 00:20:26,410
QL application so it's a layer in your

00:20:24,040 --> 00:20:28,300
stack that sits between your client and

00:20:26,410 --> 00:20:29,800
your server and it helps to fulfill

00:20:28,300 --> 00:20:31,060
those requests and provide you

00:20:29,800 --> 00:20:34,000
information on what's going on

00:20:31,060 --> 00:20:36,250
so using Apollo link and using schema

00:20:34,000 --> 00:20:37,570
searching and using engine it helps you

00:20:36,250 --> 00:20:39,760
to understand to not have to worry about

00:20:37,570 --> 00:20:40,840
how you resolve that data you can go

00:20:39,760 --> 00:20:42,520
back to building your product by

00:20:40,840 --> 00:20:45,850
describing what you want and then just

00:20:42,520 --> 00:20:47,140
having it resolved for you so this is

00:20:45,850 --> 00:20:48,430
really awesome now we've got graph QL

00:20:47,140 --> 00:20:49,630
kind of like everywhere in our

00:20:48,430 --> 00:20:51,450
application we're using it on our

00:20:49,630 --> 00:20:53,470
clients we're using it on our servers

00:20:51,450 --> 00:20:55,600
but where else can we go I mean

00:20:53,470 --> 00:20:58,390
JavaScript scarily runs everywhere right

00:20:55,600 --> 00:20:59,560
now I try to in every Tokio shout out to

00:20:58,390 --> 00:21:02,230
ken wheeler for building a crossbow

00:20:59,560 --> 00:21:04,000
controlled with crash QL but now I can

00:21:02,230 --> 00:21:05,950
actually give a shout out to because ok

00:21:04,000 --> 00:21:08,770
grow has a golf ball that you can

00:21:05,950 --> 00:21:10,540
control with graph QL in the lounge so I

00:21:08,770 --> 00:21:11,800
highly recommend you go try it out and

00:21:10,540 --> 00:21:16,930
see if you get a hole-in-one with

00:21:11,800 --> 00:21:19,120
mutation so what if we could actually do

00:21:16,930 --> 00:21:20,710
like Internet of Things things that we

00:21:19,120 --> 00:21:22,570
are doing in the lounge right over there

00:21:20,710 --> 00:21:24,040
what if you could do peer-to-peer where

00:21:22,570 --> 00:21:25,630
you don't actually have a server but

00:21:24,040 --> 00:21:27,370
maybe your phone is connect to each

00:21:25,630 --> 00:21:30,100
other and use graph QL is that language

00:21:27,370 --> 00:21:31,690
since it's more about describing and

00:21:30,100 --> 00:21:33,310
fulfilling what the data you're

00:21:31,690 --> 00:21:34,570
requesting it's not necessarily about

00:21:33,310 --> 00:21:36,490
who's the client and who's the server

00:21:34,570 --> 00:21:37,960
it's I'm asking for data and I'm

00:21:36,490 --> 00:21:40,900
returning it it's a conversation about

00:21:37,960 --> 00:21:42,910
your data what if you had Alexa that was

00:21:40,900 --> 00:21:45,010
powered and hooked up with craf ql api

00:21:42,910 --> 00:21:46,810
and you could ask it things like hey

00:21:45,010 --> 00:21:49,270
Alexa how is my app running on engine

00:21:46,810 --> 00:21:51,730
which has a graph QL API itself or you

00:21:49,270 --> 00:21:53,800
could use a web hook and do a mutation

00:21:51,730 --> 00:21:55,600
and say like an Alexa could warn you

00:21:53,800 --> 00:21:56,590
when your build failed on Travis which I

00:21:55,600 --> 00:21:59,710
would not turn on because I would get

00:21:56,590 --> 00:22:01,180
warnings all the time and like a crazy

00:21:59,710 --> 00:22:03,580
idea is what if you built a graph QL

00:22:01,180 --> 00:22:04,960
driven package manager you know like

00:22:03,580 --> 00:22:06,970
package managers about managing a

00:22:04,960 --> 00:22:09,010
dependency graph of what your app needs

00:22:06,970 --> 00:22:10,600
to build and run so like what if you use

00:22:09,010 --> 00:22:12,700
graph kill to describe that both on the

00:22:10,600 --> 00:22:16,570
file system and making those requests

00:22:12,700 --> 00:22:18,520
from something like NPM so all of this

00:22:16,570 --> 00:22:20,380
is possible with Apollo client to

00:22:18,520 --> 00:22:22,630
we know which is really really close and

00:22:20,380 --> 00:22:24,370
because we're all space themed I try and

00:22:22,630 --> 00:22:26,920
like one small step for graphic you all

00:22:24,370 --> 00:22:29,470
and one giant leap for data so we need

00:22:26,920 --> 00:22:31,780
to like actually release the 2.0 once

00:22:29,470 --> 00:22:34,420
it's ready to be able to do this and

00:22:31,780 --> 00:22:35,950
actually let's see yeah okay it's ready

00:22:34,420 --> 00:22:39,660
now so let me just go ahead and do that

00:22:35,950 --> 00:22:41,950
so let me real quick jump over here and

00:22:39,660 --> 00:22:57,929
here up okay cool there's a pull request

00:22:41,950 --> 00:23:02,230
built and it should we alright alright

00:22:57,929 --> 00:23:03,940
so like any good professional chef on a

00:23:02,230 --> 00:23:06,220
cooking show I've prepared an Apollo

00:23:03,940 --> 00:23:09,370
client 2.0 prior and we pull it out the

00:23:06,220 --> 00:23:10,929
oven real quick so it is actually

00:23:09,370 --> 00:23:14,710
already on NPM you can install Apollo

00:23:10,929 --> 00:23:16,860
client it's been live since yesterday so

00:23:14,710 --> 00:23:19,179
try it out and tell me what you think

00:23:16,860 --> 00:23:27,340
all right let me get back to the

00:23:19,179 --> 00:23:30,490
presentation all right so it is taking

00:23:27,340 --> 00:23:32,380
off so thank you for listening to me

00:23:30,490 --> 00:23:33,550
today this is a super big honor for me

00:23:32,380 --> 00:23:35,230
to be able to talk to all of you

00:23:33,550 --> 00:23:36,640
about graph QL and things that I'm

00:23:35,230 --> 00:23:39,220
really passionate about and working on

00:23:36,640 --> 00:23:40,840
everyday and honestly please come and

00:23:39,220 --> 00:23:43,300
join the fun it's really easy to

00:23:40,840 --> 00:23:45,130
contribute we have over 700 contributors

00:23:43,300 --> 00:23:47,590
have made the 2.0 and other Apollo

00:23:45,130 --> 00:23:49,630
products possible so essentially it's

00:23:47,590 --> 00:23:51,730
you so thank you for helping to build

00:23:49,630 --> 00:23:53,140
graph QL into what it is today

00:23:51,730 --> 00:23:55,030
helping to build Apollo and make it

00:23:53,140 --> 00:23:56,710
really easy use it super easy to get

00:23:55,030 --> 00:23:57,970
started just go to polygraph Gail calm

00:23:56,710 --> 00:23:59,559
and you can figure out what you want to

00:23:57,970 --> 00:24:01,330
work on and hopefully we can work

00:23:59,559 --> 00:24:03,460
together and ship some really amazing

00:24:01,330 --> 00:24:05,860
things you can also find me at Jay

00:24:03,460 --> 00:24:08,050
Baxley III on a third but it's hard to

00:24:05,860 --> 00:24:09,850
write that so you can find me kind of

00:24:08,050 --> 00:24:13,530
anywhere I'm pretty active on Twitter

00:24:09,850 --> 00:24:13,530
and medium but thank you so much

00:24:15,500 --> 00:24:17,560

YouTube URL: https://www.youtube.com/watch?v=O1VmITpdEl4


