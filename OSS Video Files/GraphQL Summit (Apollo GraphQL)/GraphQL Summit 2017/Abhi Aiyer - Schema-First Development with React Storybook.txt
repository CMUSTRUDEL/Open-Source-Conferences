Title: Abhi Aiyer - Schema-First Development with React Storybook
Publication date: 2017-11-08
Playlist: GraphQL Summit 2017
Description: 
	Abhi Aiyer, Senior Software Engineer at Workpop, gave this talk at GraphQL Summit 2017. Learn more: summit.graphql.com

As a community we preach Schema first development, but once the schemas are decided how do UI developers make GraphQL user interfaces happen? apollo-storybook-decorator is a way you can write production level front end code all in React Storybook.
Captions: 
	00:00:03,270 --> 00:00:08,590
all right hey mom

00:00:06,550 --> 00:00:10,900
okay guys I don't have a lot of time so

00:00:08,590 --> 00:00:13,360
let's get through this really quickly so

00:00:10,900 --> 00:00:15,039
today well first of all I'm a bi I'm

00:00:13,360 --> 00:00:17,619
from Los Angeles California I work at a

00:00:15,039 --> 00:00:19,720
company called work pop comm do you want

00:00:17,619 --> 00:00:22,269
to join our team interesting color

00:00:19,720 --> 00:00:24,699
choice by the way goes really good with

00:00:22,269 --> 00:00:28,599
the graph QL pink and we're hiring so

00:00:24,699 --> 00:00:30,220
that's cool last year at this conference

00:00:28,599 --> 00:00:32,320
I believe Danielle talked about

00:00:30,220 --> 00:00:34,330
graphical first development and we

00:00:32,320 --> 00:00:35,760
outlined these three stages

00:00:34,330 --> 00:00:39,010
all right there's schema design

00:00:35,760 --> 00:00:42,160
implementation and then monitoring but

00:00:39,010 --> 00:00:44,649
having taken all those those those those

00:00:42,160 --> 00:00:46,690
wisdoms from that talk and applying it

00:00:44,649 --> 00:00:48,940
to my own company I found out that

00:00:46,690 --> 00:00:51,550
there's a lot it's a lot different it

00:00:48,940 --> 00:00:53,020
actually looks like this it's super it's

00:00:51,550 --> 00:00:55,000
a lot more complicated than we think and

00:00:53,020 --> 00:00:57,879
so I kind of want to go into these steps

00:00:55,000 --> 00:00:59,199
of of a workflow that and then I'll get

00:00:57,879 --> 00:01:02,410
into some tips on how to be productive

00:00:59,199 --> 00:01:05,620
but everything in graph QL starts with

00:01:02,410 --> 00:01:07,270
types and so if you get that right your

00:01:05,620 --> 00:01:09,250
whole time is gonna be amazing if you

00:01:07,270 --> 00:01:11,229
get the types right then you can code

00:01:09,250 --> 00:01:12,790
gen code gen is a big part of your

00:01:11,229 --> 00:01:15,130
workflow because if we're gonna be

00:01:12,790 --> 00:01:17,710
supporting iOS and Android you'd love to

00:01:15,130 --> 00:01:21,009
you know code gen all their queries

00:01:17,710 --> 00:01:23,049
mutations etc so types in code gen go

00:01:21,009 --> 00:01:26,409
together and then you hit this review

00:01:23,049 --> 00:01:27,520
stage with graph QL first development

00:01:26,409 --> 00:01:29,020
there's an assumption that everyone

00:01:27,520 --> 00:01:31,540
agrees on the types but that's not true

00:01:29,020 --> 00:01:33,310
people have their own opinions and so

00:01:31,540 --> 00:01:35,439
you can see that this review stage goes

00:01:33,310 --> 00:01:37,600
back to types and it's an infinite loop

00:01:35,439 --> 00:01:39,250
until people are really resolved in like

00:01:37,600 --> 00:01:41,530
all the things that we they built are

00:01:39,250 --> 00:01:43,390
the types that have been declared after

00:01:41,530 --> 00:01:45,640
you do that and after you have a set of

00:01:43,390 --> 00:01:47,680
types and set of queries or mutations

00:01:45,640 --> 00:01:49,780
that you want to use you're gonna start

00:01:47,680 --> 00:01:52,360
mocking and mocking is probably the key

00:01:49,780 --> 00:01:53,950
to productivity here mocking allows you

00:01:52,360 --> 00:01:55,509
to do a lot of interesting things

00:01:53,950 --> 00:01:57,909
without having dependencies between

00:01:55,509 --> 00:02:00,130
teams so once you have the moxx done you

00:01:57,909 --> 00:02:02,770
split into two pretty much two teams if

00:02:00,130 --> 00:02:05,200
you have the people for it you go into

00:02:02,770 --> 00:02:07,420
the client implementations react you

00:02:05,200 --> 00:02:09,820
know an android iOS you can use a palo

00:02:07,420 --> 00:02:11,710
relay and on the server there's a plenty

00:02:09,820 --> 00:02:13,810
of server libraries that can help you

00:02:11,710 --> 00:02:15,580
with a graph killer server once the two

00:02:13,810 --> 00:02:16,880
sides are done you integrate the

00:02:15,580 --> 00:02:18,740
integrate and find all the

00:02:16,880 --> 00:02:21,530
bugs that you probably wrote and then

00:02:18,740 --> 00:02:23,810
you ship in my answer at the end so

00:02:21,530 --> 00:02:25,580
types and coach ends a good productivity

00:02:23,810 --> 00:02:27,290
tip is you should organize your types in

00:02:25,580 --> 00:02:29,570
a single repository it really worked out

00:02:27,290 --> 00:02:31,610
for us and then you can just write a

00:02:29,570 --> 00:02:34,160
bunch of scripts to do Co gen in that

00:02:31,610 --> 00:02:36,680
one repo and you know Apollo cogent is a

00:02:34,160 --> 00:02:39,590
great tool it outputs a schema JSON file

00:02:36,680 --> 00:02:42,380
that the Android and iOS apps use also

00:02:39,590 --> 00:02:44,780
Swift types and some Java models and

00:02:42,380 --> 00:02:46,460
then review I'll say this again make

00:02:44,780 --> 00:02:47,900
sure everyone agrees on the API before

00:02:46,460 --> 00:02:49,700
you build something because if you

00:02:47,900 --> 00:02:54,560
change it later you're not gonna have a

00:02:49,700 --> 00:02:55,670
good time so what is mocking what is

00:02:54,560 --> 00:02:57,440
mocking while you do allows you to

00:02:55,670 --> 00:02:59,600
develop features faster you can iterate

00:02:57,440 --> 00:03:01,490
on your user interface independently

00:02:59,600 --> 00:03:03,410
from the backend you can develop

00:03:01,490 --> 00:03:04,910
features in parallel so two teams can

00:03:03,410 --> 00:03:07,750
work on the same thing at the same time

00:03:04,910 --> 00:03:09,260
and you know for this to really work

00:03:07,750 --> 00:03:11,840
successfully you need to be able to

00:03:09,260 --> 00:03:13,610
generate fake data so I put two links

00:03:11,840 --> 00:03:17,540
here if you want to use an actual like

00:03:13,610 --> 00:03:19,670
fake proxy the guys from api's grew they

00:03:17,540 --> 00:03:21,530
have a graph field faker and if you want

00:03:19,670 --> 00:03:23,360
to just get a JavaScript library that

00:03:21,530 --> 00:03:26,390
generates fake data you can use faker J

00:03:23,360 --> 00:03:28,250
yes how does a what is the mock do in

00:03:26,390 --> 00:03:29,570
essence and graph kill mock is just

00:03:28,250 --> 00:03:31,520
something that intercepts the network

00:03:29,570 --> 00:03:33,100
interface and returns static data that's

00:03:31,520 --> 00:03:35,420
all it does so you can see the client is

00:03:33,100 --> 00:03:36,560
pretending it's you know it's assuming

00:03:35,420 --> 00:03:38,450
that's gonna make it to the graph Gale

00:03:36,560 --> 00:03:39,470
server but this mock is standing in

00:03:38,450 --> 00:03:42,620
between it and it's gonna actually

00:03:39,470 --> 00:03:45,470
return all that stuff mocking on Android

00:03:42,620 --> 00:03:47,630
so that I think today we can improve our

00:03:45,470 --> 00:03:49,310
art in the community if we had standard

00:03:47,630 --> 00:03:52,940
libraries to do mocking across all the

00:03:49,310 --> 00:03:56,090
platforms but right now in Android we as

00:03:52,940 --> 00:03:57,860
HTTP client ok HTTP and then you just

00:03:56,090 --> 00:03:59,450
write an interceptor to intercept all

00:03:57,860 --> 00:04:01,970
HTTP requests that are coming from the

00:03:59,450 --> 00:04:04,160
device and then you can return you know

00:04:01,970 --> 00:04:07,190
just a mock JSON object for your query

00:04:04,160 --> 00:04:09,290
same thing in iOS we use Apollo Android

00:04:07,190 --> 00:04:10,580
and iOS by the way you just intercept

00:04:09,290 --> 00:04:13,040
everything based on you know the

00:04:10,580 --> 00:04:16,070
operation strength and then this is

00:04:13,040 --> 00:04:17,570
where I come in monkey on the web so we

00:04:16,070 --> 00:04:19,520
have storybook right if you're a UI

00:04:17,570 --> 00:04:21,350
developer storybook and now supports

00:04:19,520 --> 00:04:23,510
angular 2 props to the storybook team

00:04:21,350 --> 00:04:25,750
and view and all that there's a view

00:04:23,510 --> 00:04:28,390
Apollo we act Apollo and angular

00:04:25,750 --> 00:04:31,510
Paulo so you can actually get started in

00:04:28,390 --> 00:04:33,490
story book with all your mocks so I

00:04:31,510 --> 00:04:35,350
built an Apollo story book decorator

00:04:33,490 --> 00:04:37,150
it's on github it's really cool if

00:04:35,350 --> 00:04:39,100
you're using the react and I hope to

00:04:37,150 --> 00:04:41,200
support other frameworks in the future

00:04:39,100 --> 00:04:43,240
but it allows you to build user faces in

00:04:41,200 --> 00:04:44,650
isolation and that's the biggest key is

00:04:43,240 --> 00:04:46,780
like you want to be able to mark all

00:04:44,650 --> 00:04:48,580
your data build your components and

00:04:46,780 --> 00:04:50,380
integrate it with the server and a

00:04:48,580 --> 00:04:53,020
storybook decorator that allows you to

00:04:50,380 --> 00:04:55,240
do that all you gotta do is define your

00:04:53,020 --> 00:04:58,540
schema and mock resolvers right so here

00:04:55,240 --> 00:05:01,330
I'm creating a basic type definition for

00:04:58,540 --> 00:05:04,120
name and I'm making a mock resolver

00:05:01,330 --> 00:05:07,780
which in this case it uses the faker j/s

00:05:04,120 --> 00:05:09,669
library to return if a name then I add

00:05:07,780 --> 00:05:12,730
the storybook decorator to my app which

00:05:09,669 --> 00:05:15,220
is pretty cool nothing more to say there

00:05:12,730 --> 00:05:16,630
and then you just write a story it's

00:05:15,220 --> 00:05:18,790
that simple you'd write a storybook

00:05:16,630 --> 00:05:20,860
story this is react by the way but if

00:05:18,790 --> 00:05:22,960
you look at this function hello world

00:05:20,860 --> 00:05:24,970
like this could be sent to production

00:05:22,960 --> 00:05:26,260
and if if the integration phase worked

00:05:24,970 --> 00:05:27,790
out for you you don't have to write any

00:05:26,260 --> 00:05:29,620
more code the same code that you put in

00:05:27,790 --> 00:05:31,960
your story you can launch the production

00:05:29,620 --> 00:05:33,970
and so I wish I could give a demo during

00:05:31,960 --> 00:05:37,990
a lightning talk but I can't but just

00:05:33,970 --> 00:05:40,180
this this stuff works and thanks and if

00:05:37,990 --> 00:05:43,510
you want to follow me I'm on Twitter and

00:05:40,180 --> 00:05:46,510
medium and I worked with Nick Burke to

00:05:43,510 --> 00:05:48,010
do the react Apollo tutorial on how to

00:05:46,510 --> 00:05:50,410
graph Gale so if anyone here is trying

00:05:48,010 --> 00:05:52,600
to learn that's a good resource also the

00:05:50,410 --> 00:05:55,600
co-host with Johanna sickling Johannes

00:05:52,600 --> 00:05:57,610
where are you we have a podcast called

00:05:55,600 --> 00:06:00,160
graphical radio hopefully a lot of you

00:05:57,610 --> 00:06:00,790
guys are listeners and if you want to be

00:06:00,160 --> 00:06:03,290
on the show

00:06:00,790 --> 00:06:07,109
hit me up so that's it thanks

00:06:03,290 --> 00:06:07,109

YouTube URL: https://www.youtube.com/watch?v=uGCyJlIkmTQ


