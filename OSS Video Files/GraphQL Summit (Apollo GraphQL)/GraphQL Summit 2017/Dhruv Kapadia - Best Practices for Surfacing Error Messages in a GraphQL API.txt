Title: Dhruv Kapadia - Best Practices for Surfacing Error Messages in a GraphQL API
Publication date: 2017-11-07
Playlist: GraphQL Summit 2017
Description: 
	Dhruv Kapadia, Software Engineer at Khan Academy, gave this talk at GraphQL Summit 2017. Learn more: summit.graphql.com

Good error messages are very helpful for API callers, but many GraphQL developers struggle with finding the right way to report these messages to an end user. In this talk, we'll discuss best practices to surface error messages in an easy and reliable way.
Captions: 
	00:00:03,389 --> 00:00:07,290
so yeah as I said my name is drew I

00:00:05,609 --> 00:00:10,290
worked mostly on the back end at Khan

00:00:07,290 --> 00:00:12,389
Academy and about nine months ago Khan

00:00:10,290 --> 00:00:14,400
Academy started using graph QL in

00:00:12,389 --> 00:00:17,640
production and really we found it easy

00:00:14,400 --> 00:00:21,000
to adopt we have a large existing

00:00:17,640 --> 00:00:22,740
internal API and we have lots of

00:00:21,000 --> 00:00:24,720
developers who depend on it but we found

00:00:22,740 --> 00:00:26,630
it easy to take parts of that and start

00:00:24,720 --> 00:00:28,830
rolling it out across the organization

00:00:26,630 --> 00:00:30,840
but one thing we've run into issues and

00:00:28,830 --> 00:00:34,590
over the last year is how to handle

00:00:30,840 --> 00:00:36,600
errors so errors are inevitable in any

00:00:34,590 --> 00:00:38,490
sort of API you know you have a database

00:00:36,600 --> 00:00:40,350
that fails or a user might send some

00:00:38,490 --> 00:00:42,510
sort of invalid input or maybe you make

00:00:40,350 --> 00:00:45,660
a mistake and deploy something bad to

00:00:42,510 --> 00:00:47,460
production and we've made some mistakes

00:00:45,660 --> 00:00:49,020
and how we handle errors in graph QL

00:00:47,460 --> 00:00:50,850
over the last year and so I want to talk

00:00:49,020 --> 00:00:54,630
about some of those mistakes and the

00:00:50,850 --> 00:00:57,180
lessons we've learned as a result so to

00:00:54,630 --> 00:00:58,770
dive right in one thing we learned is

00:00:57,180 --> 00:01:00,899
that some errors really aren't errors at

00:00:58,770 --> 00:01:04,860
all and we can start with a simple

00:01:00,899 --> 00:01:08,850
example here I'm can imagine a signup

00:01:04,860 --> 00:01:11,760
form that we have on our site we want to

00:01:08,850 --> 00:01:13,710
allow the users they fail bail

00:01:11,760 --> 00:01:16,979
validation we want to say hey you know

00:01:13,710 --> 00:01:18,390
this email address hey can you so how

00:01:16,979 --> 00:01:19,619
might we do this in graph QL I'm gonna

00:01:18,390 --> 00:01:22,049
start with the simplest possible

00:01:19,619 --> 00:01:23,400
approaches where we started and then I'm

00:01:22,049 --> 00:01:27,750
gonna go back and tell you why it's not

00:01:23,400 --> 00:01:30,090
quite ideal so we could define a simple

00:01:27,750 --> 00:01:31,950
mutation you know create a user and if

00:01:30,090 --> 00:01:35,220
we're successful give me back the users

00:01:31,950 --> 00:01:36,869
ID and their email and on the server

00:01:35,220 --> 00:01:39,119
side the code would would be also pretty

00:01:36,869 --> 00:01:41,460
simple you know we check to see if the

00:01:39,119 --> 00:01:43,530
user exists and if they do we throw a

00:01:41,460 --> 00:01:46,110
JavaScript error we stop execution and

00:01:43,530 --> 00:01:48,180
then we move on if they don't exist we

00:01:46,110 --> 00:01:51,659
send it back we create the user no big

00:01:48,180 --> 00:01:53,820
deal so if we are unsuccessful with that

00:01:51,659 --> 00:01:57,509
code the response might be what you see

00:01:53,820 --> 00:02:00,030
on off there right we see that we were

00:01:57,509 --> 00:02:02,369
unsuccessful that null battle and create

00:02:00,030 --> 00:02:04,229
user and then we can go look at the

00:02:02,369 --> 00:02:05,610
errors list and say hey there's an email

00:02:04,229 --> 00:02:07,200
exist errors I should highlight the

00:02:05,610 --> 00:02:09,179
field in our or form

00:02:07,200 --> 00:02:10,439
you've probably seen this errors list

00:02:09,179 --> 00:02:13,790
before this is something that the

00:02:10,439 --> 00:02:16,080
graphical spec does like where you and

00:02:13,790 --> 00:02:17,700
during execution

00:02:16,080 --> 00:02:19,800
so since we threw an error in our

00:02:17,700 --> 00:02:22,770
mutation and ends up here and that

00:02:19,800 --> 00:02:26,340
that's simple it works what happens if

00:02:22,770 --> 00:02:27,480
we then want to add another validation

00:02:26,340 --> 00:02:30,540
step we want to check to see if your

00:02:27,480 --> 00:02:32,190
passwords too weak so we could add

00:02:30,540 --> 00:02:34,470
another thing to this errors list maybe

00:02:32,190 --> 00:02:35,940
we throw two errors but then it's kind

00:02:34,470 --> 00:02:39,660
of hard for us to know which of these

00:02:35,940 --> 00:02:41,520
two errors go with which field maybe we

00:02:39,660 --> 00:02:44,100
can start adding more data to our errors

00:02:41,520 --> 00:02:45,870
we could say like you need to include a

00:02:44,100 --> 00:02:49,170
field for every error so that we know

00:02:45,870 --> 00:02:51,990
where to show it in the UI this starts

00:02:49,170 --> 00:02:53,790
to feel again pretty brittle what if

00:02:51,990 --> 00:02:55,590
down the road we want a different

00:02:53,790 --> 00:02:58,800
mutation or a different component that

00:02:55,590 --> 00:03:00,450
has wearers for a field or doesn't want

00:02:58,800 --> 00:03:03,090
to specify a feel but once it's best by

00:03:00,450 --> 00:03:04,710
multiple fields it also starts to feel

00:03:03,090 --> 00:03:06,360
like we're standardizing on the format

00:03:04,710 --> 00:03:09,120
of an error we're stabilizing on a

00:03:06,360 --> 00:03:12,750
schema here and that that feels not

00:03:09,120 --> 00:03:15,480
quite right let's go back and look at

00:03:12,750 --> 00:03:17,430
that original query so here we're

00:03:15,480 --> 00:03:20,940
explicitly trying to create a user

00:03:17,430 --> 00:03:24,420
we're also explicitly asking for the ID

00:03:20,940 --> 00:03:27,750
and email of that user the way that our

00:03:24,420 --> 00:03:30,930
code is written now we're also employed

00:03:27,750 --> 00:03:33,300
we're implicitly depending on errors and

00:03:30,930 --> 00:03:37,320
implicitly expecting the schema to be

00:03:33,300 --> 00:03:38,940
consistent so you know that that doesn't

00:03:37,320 --> 00:03:41,130
really feel like the graph QL approach

00:03:38,940 --> 00:03:43,170
which which really goes for an explicit

00:03:41,130 --> 00:03:44,910
way of defining our data and why not do

00:03:43,170 --> 00:03:47,520
that for errors here as well

00:03:44,910 --> 00:03:51,090
so we could treat this sort of error as

00:03:47,520 --> 00:03:52,950
another type of data we can try to

00:03:51,090 --> 00:03:54,600
create a user and if we're unsuccessful

00:03:52,950 --> 00:03:56,040
instead of throwing an error we just get

00:03:54,600 --> 00:03:59,520
that success or failure back as a

00:03:56,040 --> 00:04:01,890
boolean and then in this case get a list

00:03:59,520 --> 00:04:03,720
of user errors which have a field and a

00:04:01,890 --> 00:04:05,670
message but that doesn't have to be true

00:04:03,720 --> 00:04:07,500
down the road you know if we change our

00:04:05,670 --> 00:04:09,600
format we know what components depend on

00:04:07,500 --> 00:04:11,070
this type of error and another mutation

00:04:09,600 --> 00:04:13,920
can have a different contract with a

00:04:11,070 --> 00:04:16,890
different component so we maintain

00:04:13,920 --> 00:04:18,480
flexibility for future so that was our

00:04:16,890 --> 00:04:20,220
first lesson which was just don't treat

00:04:18,480 --> 00:04:23,460
validation errors I think Tony talked

00:04:20,220 --> 00:04:25,050
about this in his talk as as errors you

00:04:23,460 --> 00:04:26,700
should treat them as data and build them

00:04:25,050 --> 00:04:28,880
into your schema inspect that clients

00:04:26,700 --> 00:04:28,880
that

00:04:29,550 --> 00:04:34,530
sorry for the mic okay so that was a

00:04:32,790 --> 00:04:35,940
subtle mistake I'm gonna talk about two

00:04:34,530 --> 00:04:39,110
smaller ones in the time that I have

00:04:35,940 --> 00:04:40,950
left there they're not as as as

00:04:39,110 --> 00:04:42,990
important or at least sorry they're not

00:04:40,950 --> 00:04:45,720
as like in depth but I think they're

00:04:42,990 --> 00:04:47,490
important to keep in mind so the second

00:04:45,720 --> 00:04:51,090
mistake we made was just not monitoring

00:04:47,490 --> 00:04:52,620
our errors correctly so here is a screen

00:04:51,090 --> 00:04:53,880
shot of Khan Academy's error dashboard

00:04:52,620 --> 00:04:56,640
I'm sure many of you have something

00:04:53,880 --> 00:04:59,070
similar at your jobs we keep track of

00:04:56,640 --> 00:05:01,980
the number of requests that end up here

00:04:59,070 --> 00:05:03,360
as a 500 error and 500 usually tells us

00:05:01,980 --> 00:05:05,580
is back in developers if something went

00:05:03,360 --> 00:05:06,930
wrong and I need to go investigate and

00:05:05,580 --> 00:05:10,650
if I see a spike like this I need to

00:05:06,930 --> 00:05:12,780
really investigate so when we started

00:05:10,650 --> 00:05:14,130
employing graph QL we we found this

00:05:12,780 --> 00:05:16,980
approach didn't work the way that we

00:05:14,130 --> 00:05:18,390
expected it to and we we missed issues

00:05:16,980 --> 00:05:20,580
that we should have detected with this

00:05:18,390 --> 00:05:23,100
sort of monitoring so let's go back to

00:05:20,580 --> 00:05:24,480
this code I showed earlier I told you

00:05:23,100 --> 00:05:27,570
again it's not ideal to do it this way

00:05:24,480 --> 00:05:28,710
but let's say we deploy this code we

00:05:27,570 --> 00:05:31,500
probably want to keep track of the

00:05:28,710 --> 00:05:33,510
number of errors that happen the number

00:05:31,500 --> 00:05:37,440
of times that this email exists error

00:05:33,510 --> 00:05:39,680
gets thrown so how can we know that an

00:05:37,440 --> 00:05:42,570
error happened so that we can track it

00:05:39,680 --> 00:05:44,070
on the client-side we see the error in

00:05:42,570 --> 00:05:45,270
the list like we know that an error

00:05:44,070 --> 00:05:46,770
happened because there's something in

00:05:45,270 --> 00:05:48,420
that errors key

00:05:46,770 --> 00:05:53,310
but what's confusing is if you look at

00:05:48,420 --> 00:05:54,660
the status code that you get back you it

00:05:53,310 --> 00:05:56,400
makes it seem like everything is ok you

00:05:54,660 --> 00:05:58,620
know chrome has this really nice green

00:05:56,400 --> 00:06:01,170
dot says like hey don't worry we got

00:05:58,620 --> 00:06:02,580
this and and so our existing our

00:06:01,170 --> 00:06:04,350
existing tools from wondering just

00:06:02,580 --> 00:06:05,670
ignored this as an issue we weren't

00:06:04,350 --> 00:06:08,610
getting notified that something was

00:06:05,670 --> 00:06:09,930
happening in our production servers so

00:06:08,610 --> 00:06:11,400
the lesson here is simple really just

00:06:09,930 --> 00:06:13,860
don't do that make sure you're tracking

00:06:11,400 --> 00:06:15,510
your errors and for us that that was

00:06:13,860 --> 00:06:18,390
also really simple like when we execute

00:06:15,510 --> 00:06:20,220
our graphical query we can just log if

00:06:18,390 --> 00:06:22,500
there were errors and that's not the

00:06:20,220 --> 00:06:24,000
only way to solve this problem I just

00:06:22,500 --> 00:06:25,950
talked about the the spec doesn't define

00:06:24,000 --> 00:06:28,650
anything about the transport layer and

00:06:25,950 --> 00:06:30,150
whether you need to say 200 or 500 so if

00:06:28,650 --> 00:06:31,920
you wanted to you could just respond

00:06:30,150 --> 00:06:34,440
with 500 and maybe that works for your

00:06:31,920 --> 00:06:37,170
use case we chose to do it this way and

00:06:34,440 --> 00:06:38,610
leave it as 200 log it separately

00:06:37,170 --> 00:06:41,280
because that let us do things like

00:06:38,610 --> 00:06:42,420
support multiple graph QL queries in the

00:06:41,280 --> 00:06:43,380
same HTTP request

00:06:42,420 --> 00:06:45,840
it also lets us do

00:06:43,380 --> 00:06:47,760
things like partial query success and

00:06:45,840 --> 00:06:51,410
not necessarily mess up our clients that

00:06:47,760 --> 00:06:52,650
do something when they get a 500 message

00:06:51,410 --> 00:06:54,150
awesome

00:06:52,650 --> 00:06:56,130
so last mistake I want to talk about

00:06:54,150 --> 00:06:58,110
today is just we didn't provide enough

00:06:56,130 --> 00:07:01,050
information to our developers when I

00:06:58,110 --> 00:07:02,910
started with a graph QL errors are

00:07:01,050 --> 00:07:04,800
really good debugging tools you know as

00:07:02,910 --> 00:07:07,140
a new developer working on a new API

00:07:04,800 --> 00:07:09,090
errors help you figure out what went

00:07:07,140 --> 00:07:12,600
wrong so that you can make it you can

00:07:09,090 --> 00:07:14,580
you can take action in our internal API

00:07:12,600 --> 00:07:16,830
if I made a mistake and I deployed some

00:07:14,580 --> 00:07:19,050
code this is the sort of message I would

00:07:16,830 --> 00:07:20,640
get back it has a stack trace it tells

00:07:19,050 --> 00:07:22,850
me exactly where a problem happened I

00:07:20,640 --> 00:07:25,830
can go investigate that pretty quickly

00:07:22,850 --> 00:07:27,900
when we rolled out graph QL this was

00:07:25,830 --> 00:07:30,320
what you would get as a client developer

00:07:27,900 --> 00:07:32,430
you would just get a string of the error

00:07:30,320 --> 00:07:34,290
maybe that would tell you enough to

00:07:32,430 --> 00:07:35,760
figure out what went wrong but you

00:07:34,290 --> 00:07:37,440
didn't have a stack trace you didn't

00:07:35,760 --> 00:07:39,630
necessarily even know what part of your

00:07:37,440 --> 00:07:41,130
query caused the problem and this caused

00:07:39,630 --> 00:07:42,920
a lot of pain for our developers as they

00:07:41,130 --> 00:07:45,150
started ramping up and get graph QL

00:07:42,920 --> 00:07:46,920
again the lesson here is pretty simple

00:07:45,150 --> 00:07:49,530
just it tried to provide as much

00:07:46,920 --> 00:07:53,010
information as possible into your error

00:07:49,530 --> 00:07:55,080
to make it actionable so this is this is

00:07:53,010 --> 00:07:57,300
easy to fix you just try to include

00:07:55,080 --> 00:08:00,060
things like a stack trace or a request

00:07:57,300 --> 00:08:01,830
ID or a trace and I think something Tony

00:08:00,060 --> 00:08:06,390
said earlier too resonated which was

00:08:01,830 --> 00:08:08,670
just don't don't depend on this being a

00:08:06,390 --> 00:08:10,320
schema that you can rely on right treat

00:08:08,670 --> 00:08:11,640
this as debugging information so that

00:08:10,320 --> 00:08:13,710
it's helpful to you but you don't

00:08:11,640 --> 00:08:15,030
necessarily have to rely on it being

00:08:13,710 --> 00:08:16,790
there forever and clients don't

00:08:15,030 --> 00:08:18,600
necessarily rely on it being consistent

00:08:16,790 --> 00:08:20,400
these sorts of errors should be

00:08:18,600 --> 00:08:22,170
exceptional and they should help you in

00:08:20,400 --> 00:08:25,080
debugging not necessarily on a day to

00:08:22,170 --> 00:08:27,660
day basis great just to wrap up real

00:08:25,080 --> 00:08:28,560
quick some errors are really our data

00:08:27,660 --> 00:08:30,660
you should treat them that way

00:08:28,560 --> 00:08:31,620
especially validation errors make sure

00:08:30,660 --> 00:08:33,690
that you're not making the same mistake

00:08:31,620 --> 00:08:35,700
that we are and track your errors when

00:08:33,690 --> 00:08:37,919
you deploy to production and then make

00:08:35,700 --> 00:08:40,110
sure that you make errors actionable so

00:08:37,919 --> 00:08:42,419
that developers know how to take take

00:08:40,110 --> 00:08:44,099
action so thanks so much I hope you find

00:08:42,419 --> 00:08:45,450
this useful and you learn from our

00:08:44,099 --> 00:08:47,670
mistakes if you want to chat about this

00:08:45,450 --> 00:08:48,610
find you later

00:08:47,670 --> 00:08:53,259
you

00:08:48,610 --> 00:08:53,259

YouTube URL: https://www.youtube.com/watch?v=-wRXk_QZ3Ko


