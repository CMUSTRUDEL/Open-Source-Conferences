Title: FSOSS 2015 - Trevor Woerner - Introducing Linux to your Embedded Company
Publication date: 2015-11-12
Playlist: FSOSS 2015
Description: 
	FSOSS 2015 - Trevor Woerner - Introducing Linux to your Embedded Company
Captions: 
	00:00:00,000 --> 00:00:06,420
presentation introducing Linux for your

00:00:03,330 --> 00:00:08,519
tummy trimmer Warner as in the program

00:00:06,420 --> 00:00:14,849
has been programming and working with

00:00:08,519 --> 00:00:17,580
Linux a system since looking up three at

00:00:14,849 --> 00:00:20,010
the University professionally he has one

00:00:17,580 --> 00:00:24,199
with Leonard ostensibly as well as for

00:00:20,010 --> 00:00:27,150
various rtos and their metal systems

00:00:24,199 --> 00:00:29,849
some of the architectures he has worked

00:00:27,150 --> 00:00:33,930
with include arm cortex a8 and

00:00:29,849 --> 00:00:38,760
cornflakes and mix add milk pick coal

00:00:33,930 --> 00:00:43,170
fire 8051 SADC's empowered see so here

00:00:38,760 --> 00:00:47,460
stripe thanks sounds good well thanks

00:00:43,170 --> 00:00:48,960
for coming out as was said the

00:00:47,460 --> 00:00:52,350
introduction I've been working with

00:00:48,960 --> 00:00:54,930
Linux for quite a few years now since

00:00:52,350 --> 00:00:56,940
about two thousand i've been using linux

00:00:54,930 --> 00:01:03,030
almost exclusively at home since about

00:00:56,940 --> 00:01:04,650
the mid-90s and i just love it it when i

00:01:03,030 --> 00:01:06,210
was in university and people would say

00:01:04,650 --> 00:01:07,830
you know my fellow classmates say what

00:01:06,210 --> 00:01:09,960
kind of job do you want you know where

00:01:07,830 --> 00:01:11,430
do you want to work and stuff back in

00:01:09,960 --> 00:01:13,439
the 90s we weren't one hundred percent

00:01:11,430 --> 00:01:14,760
sure if linux was you know going to make

00:01:13,439 --> 00:01:17,430
it i mean it was still kind of a

00:01:14,760 --> 00:01:18,869
struggling project back then and all I

00:01:17,430 --> 00:01:19,979
would say is I just want to work in

00:01:18,869 --> 00:01:23,850
minutes I just want to work in late

00:01:19,979 --> 00:01:26,009
that's all I wanted to do and by chance

00:01:23,850 --> 00:01:27,360
and luck and whatnot some of the first

00:01:26,009 --> 00:01:30,360
jobs i ended up i mean there's many

00:01:27,360 --> 00:01:32,520
things that you can do in linux some of

00:01:30,360 --> 00:01:35,100
my first jobs just happened to be

00:01:32,520 --> 00:01:37,079
embedded type stuff and so I ended up

00:01:35,100 --> 00:01:40,079
carving out a career pretty much doing

00:01:37,079 --> 00:01:43,799
embedded linux and i found that when I

00:01:40,079 --> 00:01:45,509
would take jobs doing embedded Linux the

00:01:43,799 --> 00:01:47,610
vast majority of what these companies

00:01:45,509 --> 00:01:49,649
were looking for was someone to help

00:01:47,610 --> 00:01:51,780
them it was a company that traditionally

00:01:49,649 --> 00:01:53,189
wasn't doing embedded linux stuff they

00:01:51,780 --> 00:01:56,219
were embedded companies they would be

00:01:53,189 --> 00:01:58,860
using pea sauce or vxworks or whatever

00:01:56,219 --> 00:02:00,689
and someone somewhere in the company had

00:01:58,860 --> 00:02:02,790
heard about this thing called linux and

00:02:00,689 --> 00:02:04,680
they want to give it a try and so they

00:02:02,790 --> 00:02:09,509
would hire someone like me to come in

00:02:04,680 --> 00:02:10,950
and and that's pretty much what i've

00:02:09,509 --> 00:02:12,629
been doing a lot of them my career

00:02:10,950 --> 00:02:13,770
and I was at a conference recently I

00:02:12,629 --> 00:02:15,720
bumped into another guy another

00:02:13,770 --> 00:02:18,780
trentonian we were in Seattle and I bump

00:02:15,720 --> 00:02:22,769
into a John Tony and of course and he

00:02:18,780 --> 00:02:24,599
works for xilinx and he had almost

00:02:22,769 --> 00:02:26,489
exactly the same experiences that I had

00:02:24,599 --> 00:02:28,980
we were sitting there talking about you

00:02:26,489 --> 00:02:31,140
know the struggles of introducing Linux

00:02:28,980 --> 00:02:34,050
to a company that traditionally doesn't

00:02:31,140 --> 00:02:36,569
use Linux and I found it so hilarious

00:02:34,050 --> 00:02:39,180
that so many times in my career would go

00:02:36,569 --> 00:02:40,290
through the same cycle and this other

00:02:39,180 --> 00:02:42,269
guy had gone through the exact same

00:02:40,290 --> 00:02:44,130
cycles at various places where he had

00:02:42,269 --> 00:02:45,540
worked so i said well i got to make a

00:02:44,130 --> 00:02:47,340
talk about this like i talked about this

00:02:45,540 --> 00:02:53,340
and let people know you know how the

00:02:47,340 --> 00:02:54,690
things are so my talk is targeted

00:02:53,340 --> 00:02:58,799
imagine a situation where you have in

00:02:54,690 --> 00:03:01,190
bed company and someone somewhere with

00:02:58,799 --> 00:03:04,829
clout decides that they want try linux

00:03:01,190 --> 00:03:06,540
and you are either the person that's

00:03:04,829 --> 00:03:08,489
been hired to help them do this or

00:03:06,540 --> 00:03:11,459
you've worked for this company for a

00:03:08,489 --> 00:03:13,200
number of years and you know you're

00:03:11,459 --> 00:03:14,610
known as the Linux person so you're

00:03:13,200 --> 00:03:16,889
throwing on to this project you know

00:03:14,610 --> 00:03:19,620
this is this talk is for you this is who

00:03:16,889 --> 00:03:21,900
who this talk is for now you'll notice

00:03:19,620 --> 00:03:23,790
that I said someone with clout decides

00:03:21,900 --> 00:03:26,639
to run Linux because of my experience if

00:03:23,790 --> 00:03:28,799
you're the grunt at the bottom saying

00:03:26,639 --> 00:03:32,190
hey let's use less left musics what

00:03:28,799 --> 00:03:36,060
doesn't work so much it's impossible to

00:03:32,190 --> 00:03:38,790
just say let's try linux if you were in

00:03:36,060 --> 00:03:40,709
the lower echelons of your company and

00:03:38,790 --> 00:03:42,930
you think that you should be using Linux

00:03:40,709 --> 00:03:44,850
really the only way to do that is to

00:03:42,930 --> 00:03:47,459
take your product bring it home if you

00:03:44,850 --> 00:03:49,680
can get linux running on it and then

00:03:47,459 --> 00:03:51,630
port all the software to it and then add

00:03:49,680 --> 00:03:53,069
50 features to it and then bring it in

00:03:51,630 --> 00:03:54,329
and say look what i did in two days and

00:03:53,069 --> 00:03:56,489
got all these other features and a

00:03:54,329 --> 00:03:58,889
thousand other things to just simply say

00:03:56,489 --> 00:04:01,049
we should try linux only works from the

00:03:58,889 --> 00:04:03,630
top down in my experience because

00:04:01,049 --> 00:04:05,910
switching to linux is a company-wide

00:04:03,630 --> 00:04:07,680
decision i mean it's not just the

00:04:05,910 --> 00:04:09,660
developers that are impacted it's not

00:04:07,680 --> 00:04:11,130
just the sales people now have to learn

00:04:09,660 --> 00:04:14,639
a little bit about linux your field

00:04:11,130 --> 00:04:17,039
techs have to learn about linux the

00:04:14,639 --> 00:04:19,260
production staff your test engineers

00:04:17,039 --> 00:04:21,209
everyone has to learn about linux has to

00:04:19,260 --> 00:04:23,190
learn a little bit about how to use it

00:04:21,209 --> 00:04:26,640
and what not and so

00:04:23,190 --> 00:04:28,620
driving that sort of change is something

00:04:26,640 --> 00:04:31,470
that really only happens from the top

00:04:28,620 --> 00:04:34,890
because frankly engineers are people and

00:04:31,470 --> 00:04:37,350
people hate change and it's surprising

00:04:34,890 --> 00:04:40,530
to me that engineers who work in high

00:04:37,350 --> 00:04:42,540
tech which changes every minute would be

00:04:40,530 --> 00:04:44,490
so adverse to change but you know try

00:04:42,540 --> 00:04:47,010
getting people to change their editor

00:04:44,490 --> 00:04:48,570
what text editor they use or what

00:04:47,010 --> 00:04:50,910
operating system they're using on their

00:04:48,570 --> 00:04:54,750
desktop or what not it's not something

00:04:50,910 --> 00:04:56,820
they all take to easily but the funny

00:04:54,750 --> 00:04:58,950
thing is of course that when the CEO

00:04:56,820 --> 00:05:00,600
stands up for the head of IT or they had

00:04:58,950 --> 00:05:01,890
a head of engineering or whatever when

00:05:00,600 --> 00:05:03,690
they stand up and say hey let's use

00:05:01,890 --> 00:05:05,370
Linux Arnett's project the funny thing

00:05:03,690 --> 00:05:07,350
is that everyone applauds of course head

00:05:05,370 --> 00:05:08,820
ones like yeah that sounds great and

00:05:07,350 --> 00:05:10,290
then of course you start having a couple

00:05:08,820 --> 00:05:11,880
meetings you know and you're like yeah

00:05:10,290 --> 00:05:13,760
this is great we're all on board you

00:05:11,880 --> 00:05:16,320
were all cheering you all love this idea

00:05:13,760 --> 00:05:17,490
but then of course as you start going

00:05:16,320 --> 00:05:19,470
through these meetings you realize that

00:05:17,490 --> 00:05:21,300
really you're the only person who wants

00:05:19,470 --> 00:05:22,710
this change never one else is just

00:05:21,300 --> 00:05:24,510
sitting there trying to figure out how

00:05:22,710 --> 00:05:26,310
can we not make this change how can we

00:05:24,510 --> 00:05:30,960
not get linux in this company because

00:05:26,310 --> 00:05:32,610
that terrifies me so that was one of my

00:05:30,960 --> 00:05:35,040
big mistakes I would go into these

00:05:32,610 --> 00:05:36,720
meetings saying hey the CEO wants it

00:05:35,040 --> 00:05:38,790
everyone cheered it when thought this is

00:05:36,720 --> 00:05:40,530
a great idea so why is everyone fighting

00:05:38,790 --> 00:05:43,730
me on this why am I having such a hard

00:05:40,530 --> 00:05:48,780
time here I don't get this so that was a

00:05:43,730 --> 00:05:51,000
bit of an eye-opener and what I found

00:05:48,780 --> 00:05:54,030
that you need is that it's better if you

00:05:51,000 --> 00:05:59,100
can go in to this kind of situation with

00:05:54,030 --> 00:06:02,430
a bit of information about how to

00:05:59,100 --> 00:06:04,140
advocate for linux and also things are

00:06:02,430 --> 00:06:05,250
going to get thrown at you that as an

00:06:04,140 --> 00:06:08,430
engineer you've probably never thought

00:06:05,250 --> 00:06:10,740
of never really cared about and if you

00:06:08,430 --> 00:06:13,980
can say something at that point that

00:06:10,740 --> 00:06:15,660
sensible and factual that's a lot better

00:06:13,980 --> 00:06:17,370
than saying oh let me google that let me

00:06:15,660 --> 00:06:20,040
go I'll check on that later oh you know

00:06:17,370 --> 00:06:24,090
if you have just a couple you know

00:06:20,040 --> 00:06:26,850
things in your arsenal and these are

00:06:24,090 --> 00:06:28,169
things I mean I talked to this friend of

00:06:26,850 --> 00:06:30,260
mine and other people and stuff like

00:06:28,169 --> 00:06:32,400
that and it's just funny how the same

00:06:30,260 --> 00:06:34,510
arguments keep coming up over and over

00:06:32,400 --> 00:06:36,790
again and if you're

00:06:34,510 --> 00:06:42,130
you know expecting them then it can be

00:06:36,790 --> 00:06:43,840
can help you along and and not only do

00:06:42,130 --> 00:06:46,780
you want to be sitting in every meeting

00:06:43,840 --> 00:06:50,740
defending Linux all the time it's great

00:06:46,780 --> 00:06:53,280
to be able to say okay if we use open

00:06:50,740 --> 00:06:55,990
source if we use Linux these are the

00:06:53,280 --> 00:06:59,800
amazing things that we can reap from

00:06:55,990 --> 00:07:01,300
this you know and and many of the people

00:06:59,800 --> 00:07:02,710
you'll be working with aren't really

00:07:01,300 --> 00:07:04,690
aware of open source say they've heard

00:07:02,710 --> 00:07:07,540
about Lansing may have heard a story

00:07:04,690 --> 00:07:09,040
about some swearing that lynus did on a

00:07:07,540 --> 00:07:10,690
mailing list somewhere you know and

00:07:09,040 --> 00:07:14,440
that's what they know about Linux you

00:07:10,690 --> 00:07:17,770
know so if you have these things in your

00:07:14,440 --> 00:07:19,810
pocket and it can help my first

00:07:17,770 --> 00:07:24,070
clarification I want to talk about is

00:07:19,810 --> 00:07:25,690
legal stuff and I really it I spent a

00:07:24,070 --> 00:07:27,850
long time thinking you know should I

00:07:25,690 --> 00:07:31,150
include this because obviously I'm not a

00:07:27,850 --> 00:07:32,890
lawyer and even when i was doing recent

00:07:31,150 --> 00:07:34,360
and the GPL everyone thinks they

00:07:32,890 --> 00:07:38,020
understand the GPL right everyone's

00:07:34,360 --> 00:07:39,790
wrong of course you know even when I was

00:07:38,020 --> 00:07:42,280
doing research to put my slides together

00:07:39,790 --> 00:07:45,160
I find Pete you know i would ask basic

00:07:42,280 --> 00:07:46,960
questions you know google basic

00:07:45,160 --> 00:07:49,150
questions and you can find all sorts of

00:07:46,960 --> 00:07:50,590
people saying no no the GPL says this no

00:07:49,150 --> 00:07:54,150
it says that and five pages later

00:07:50,590 --> 00:07:56,080
they're still arguing and it's crazy but

00:07:54,150 --> 00:07:57,670
anyway put this in because it's

00:07:56,080 --> 00:08:00,070
important because it will come up it's

00:07:57,670 --> 00:08:01,810
inevitable it's inevitable that at some

00:08:00,070 --> 00:08:03,610
point someone in the meeting is going to

00:08:01,810 --> 00:08:05,050
say we can't use Linux because it's GPL

00:08:03,610 --> 00:08:08,800
therefore that means we have to release

00:08:05,050 --> 00:08:15,850
all our source code for free so survey

00:08:08,800 --> 00:08:17,380
says but that's not true the GPL the GPL

00:08:15,850 --> 00:08:20,140
has this really strong notion of

00:08:17,380 --> 00:08:22,540
derivative work if you download GPL

00:08:20,140 --> 00:08:25,000
software and you modify you make a

00:08:22,540 --> 00:08:28,030
derivative of it then yes you do have to

00:08:25,000 --> 00:08:29,770
release that but if you write something

00:08:28,030 --> 00:08:31,990
completely from scratch you start from

00:08:29,770 --> 00:08:34,590
nothing you write some code blah blah

00:08:31,990 --> 00:08:37,630
and you pair that with a linux kernel

00:08:34,590 --> 00:08:39,760
there's no just because the Colonel's

00:08:37,630 --> 00:08:42,280
GPL doesn't mean that you have to then

00:08:39,760 --> 00:08:44,080
release your source code I can

00:08:42,280 --> 00:08:47,500
understand why people get confused about

00:08:44,080 --> 00:08:51,250
this as we'll see later but

00:08:47,500 --> 00:08:53,950
the kernel provides specific clauses in

00:08:51,250 --> 00:08:55,690
it that says that if you are interfacing

00:08:53,950 --> 00:08:57,970
with the colonel exclusively through the

00:08:55,690 --> 00:09:00,880
syscall interface that does not

00:08:57,970 --> 00:09:03,220
constitute a derivative work so you know

00:09:00,880 --> 00:09:04,390
write your code parrot where the colonel

00:09:03,220 --> 00:09:06,790
you're fine you know if you're doing

00:09:04,390 --> 00:09:09,730
user space stuff and you have a kernel

00:09:06,790 --> 00:09:10,990
and the Linux kernel underneath you

00:09:09,730 --> 00:09:13,720
don't have to release your sources

00:09:10,990 --> 00:09:16,120
essentially now of course a lot of the

00:09:13,720 --> 00:09:18,580
confusion comes over what's a derivative

00:09:16,120 --> 00:09:20,830
work that's where you know things get a

00:09:18,580 --> 00:09:24,460
bit muddy device driver independent you

00:09:20,830 --> 00:09:26,800
know Colonel modifications and you know

00:09:24,460 --> 00:09:28,900
making to a GPL library if you have C

00:09:26,800 --> 00:09:30,280
code and you linked to a GPL library do

00:09:28,900 --> 00:09:36,810
you then have to release your sources

00:09:30,280 --> 00:09:40,660
what if it's lgpl survey says that

00:09:36,810 --> 00:09:42,610
device drivers of course and I'm

00:09:40,660 --> 00:09:44,230
standing here saying that if you write a

00:09:42,610 --> 00:09:45,520
device driver it is a derivative work

00:09:44,230 --> 00:09:47,170
and you have to release it there are a

00:09:45,520 --> 00:09:48,160
lot of people who agree with me there

00:09:47,170 --> 00:09:50,230
are a lot of people who don't agree with

00:09:48,160 --> 00:09:51,670
that in fact a lot of companies have

00:09:50,230 --> 00:09:55,150
actually gone to courts and fought

00:09:51,670 --> 00:09:58,330
multi-year battles over this so it's not

00:09:55,150 --> 00:10:00,460
clear and cut if you're right an

00:09:58,330 --> 00:10:05,650
independent program yes colonel

00:10:00,460 --> 00:10:09,550
modification it's Colonel modification

00:10:05,650 --> 00:10:10,839
is a derivative work essentially you

00:10:09,550 --> 00:10:12,400
can't create a modification to the

00:10:10,839 --> 00:10:14,320
chrome without having the sources so

00:10:12,400 --> 00:10:16,540
it's kind of de River work but a lot of

00:10:14,320 --> 00:10:19,870
people will argue for example in the

00:10:16,540 --> 00:10:22,240
kernel you have the colonel although

00:10:19,870 --> 00:10:25,000
it's written in C is very modular in is

00:10:22,240 --> 00:10:27,190
very object oriented in the sense you

00:10:25,000 --> 00:10:28,600
know you have multiple schedulers for

00:10:27,190 --> 00:10:30,430
exam process schedulers you have

00:10:28,600 --> 00:10:32,050
completely fair you have deadlines you

00:10:30,430 --> 00:10:34,390
have a whole bunch of these and you have

00:10:32,050 --> 00:10:36,910
like IO schedulers and stuff like that

00:10:34,390 --> 00:10:38,770
you have it's very modular you can pull

00:10:36,910 --> 00:10:40,600
out a scheduler and write your own and

00:10:38,770 --> 00:10:42,250
put it in there and so people will say

00:10:40,600 --> 00:10:44,440
well I'm not modifying the colonel I'm

00:10:42,250 --> 00:10:46,900
writing a new class so that's not a

00:10:44,440 --> 00:10:48,400
derivative work well the people who

00:10:46,900 --> 00:10:52,120
wrote the colonel disagree with that and

00:10:48,400 --> 00:10:54,160
you know now this one actually I hate to

00:10:52,120 --> 00:10:56,680
admit it this one actually surprised me

00:10:54,160 --> 00:10:57,320
linking to a GPA library if you write

00:10:56,680 --> 00:11:00,140
code

00:10:57,320 --> 00:11:02,570
and you are making use of a library and

00:11:00,140 --> 00:11:04,250
you're linking to it and it's GPL you

00:11:02,570 --> 00:11:06,500
have to release your sources that's how

00:11:04,250 --> 00:11:09,440
the GPL works it's considered a

00:11:06,500 --> 00:11:12,620
derivative work if it's an LG field

00:11:09,440 --> 00:11:16,970
library then no you don't the G Lib C

00:11:12,620 --> 00:11:20,120
library is lgpl so if you write C code

00:11:16,970 --> 00:11:26,390
you link to that and also if you look at

00:11:20,120 --> 00:11:31,190
GCC GCC also has special clauses in it

00:11:26,390 --> 00:11:35,420
because when you compile with GCC it has

00:11:31,190 --> 00:11:38,900
to add you know extra code to start up

00:11:35,420 --> 00:11:40,820
your program to do the runtime linker to

00:11:38,900 --> 00:11:42,740
link in so that the colonel connects you

00:11:40,820 --> 00:11:48,350
run your code and all that stuff that

00:11:42,740 --> 00:11:50,930
does not violate the GPL so anyway so in

00:11:48,350 --> 00:11:53,780
essence writing C program so the point

00:11:50,930 --> 00:11:57,920
of this is that writing C code you know

00:11:53,780 --> 00:11:59,930
on top of using G lipsy and not using

00:11:57,920 --> 00:12:02,270
any GPL libraries you don't have to

00:11:59,930 --> 00:12:04,790
release your coat on top of Linux if

00:12:02,270 --> 00:12:06,680
you're running Linux there are some

00:12:04,790 --> 00:12:09,020
fuzziness about whether you're

00:12:06,680 --> 00:12:11,630
statically linking versus dynamically

00:12:09,020 --> 00:12:13,580
linking even I'm not a hundred percent

00:12:11,630 --> 00:12:15,020
sure on that so I'm just telling you

00:12:13,580 --> 00:12:18,530
there's some you know there's some

00:12:15,020 --> 00:12:20,150
fuzziness there but I'm not a lawyer but

00:12:18,530 --> 00:12:22,910
you know these are the kind of things

00:12:20,150 --> 00:12:24,950
like knowing knowing these sorts of

00:12:22,910 --> 00:12:26,480
things and the arguments that have been

00:12:24,950 --> 00:12:29,620
made and the historic things that have

00:12:26,480 --> 00:12:31,790
gone on is is good to have in your

00:12:29,620 --> 00:12:34,280
pocket when you're sitting in a meeting

00:12:31,790 --> 00:12:35,690
and people are saying we can't use Linux

00:12:34,280 --> 00:12:37,900
in our product because we have to

00:12:35,690 --> 00:12:40,250
release all their sources you know

00:12:37,900 --> 00:12:42,350
what's really interesting about the GPL

00:12:40,250 --> 00:12:47,410
no effect or the people don't recognize

00:12:42,350 --> 00:12:50,930
or realize is that the you know the

00:12:47,410 --> 00:12:54,110
requirements of the GPL the v2

00:12:50,930 --> 00:12:56,930
specifically don't kick in until you

00:12:54,110 --> 00:12:59,060
actually distribute your product even if

00:12:56,930 --> 00:13:01,940
you have linked to a GPL library if you

00:12:59,060 --> 00:13:05,720
have written a device driver if you have

00:13:01,940 --> 00:13:07,580
modified GPL sources you don't have to

00:13:05,720 --> 00:13:09,350
release that if you use that internally

00:13:07,580 --> 00:13:11,000
at home you don't give it to a friend

00:13:09,350 --> 00:13:14,240
you don't sell it you don't do a

00:13:11,000 --> 00:13:16,880
thing the GPL protects your right gives

00:13:14,240 --> 00:13:18,590
you the right to modify GPL code

00:13:16,880 --> 00:13:20,630
privately as long as you never

00:13:18,590 --> 00:13:24,020
distribute it the moment you distribute

00:13:20,630 --> 00:13:25,490
is when these things kick in and then

00:13:24,020 --> 00:13:26,990
you start following you know you have to

00:13:25,490 --> 00:13:29,630
release your sources all that sort of

00:13:26,990 --> 00:13:32,600
stuff you have to comply with all the

00:13:29,630 --> 00:13:35,080
clauses and stuff like that what this

00:13:32,600 --> 00:13:39,290
also means is that if you take something

00:13:35,080 --> 00:13:41,180
some tool and you modify it internally

00:13:39,290 --> 00:13:44,150
you use it internally at your company

00:13:41,180 --> 00:13:46,040
you don't have to release that you don't

00:13:44,150 --> 00:13:47,540
have to you know make the sources

00:13:46,040 --> 00:13:49,580
available as long as you don't

00:13:47,540 --> 00:13:51,740
distribute now distribute of course is

00:13:49,580 --> 00:13:54,680
commonly understood to mean either

00:13:51,740 --> 00:13:56,630
selling obviously but also giving away

00:13:54,680 --> 00:13:58,910
you give someone a free copy you've

00:13:56,630 --> 00:14:03,490
distributed it so now these things kick

00:13:58,910 --> 00:14:06,230
in but that's a you know something that

00:14:03,490 --> 00:14:08,920
but anyway I just want to I'm still not

00:14:06,230 --> 00:14:11,630
a lawyer a lot of this stuff is you know

00:14:08,920 --> 00:14:15,050
another thing that bill you'll sometimes

00:14:11,630 --> 00:14:16,760
hear is what you know linux it's

00:14:15,050 --> 00:14:19,370
developed by an international community

00:14:16,760 --> 00:14:21,200
of ragtag developers and if there are

00:14:19,370 --> 00:14:22,760
problems we have no one to call you know

00:14:21,200 --> 00:14:24,560
who do we call it two in the morning

00:14:22,760 --> 00:14:27,140
when you know things fail and you know

00:14:24,560 --> 00:14:30,080
who we're going to get support from well

00:14:27,140 --> 00:14:31,490
this is not really entirely true name

00:14:30,080 --> 00:14:33,110
you're back in the early days this was

00:14:31,490 --> 00:14:35,660
one hundred percent true you know a lot

00:14:33,110 --> 00:14:39,530
of college grads university people

00:14:35,660 --> 00:14:40,790
working on this stuff nowadays over

00:14:39,530 --> 00:14:42,890
eighty percent of the kernel development

00:14:40,790 --> 00:14:46,580
is done by people who are paid to do

00:14:42,890 --> 00:14:48,440
this work the lone programmer living in

00:14:46,580 --> 00:14:50,510
their mother's basement just doesn't

00:14:48,440 --> 00:14:54,230
apply anymore that myth has been gone

00:14:50,510 --> 00:14:57,080
for years this is this number eighty

00:14:54,230 --> 00:14:59,240
percent comes from a report that is

00:14:57,080 --> 00:15:01,640
created by the linux foundation itself

00:14:59,240 --> 00:15:03,710
every year greg kroah-hartman sifts

00:15:01,640 --> 00:15:05,839
through all the change sets and stuff

00:15:03,710 --> 00:15:09,920
from one point to another in the kernel

00:15:05,839 --> 00:15:12,170
and he puts it into buckets if it's so

00:15:09,920 --> 00:15:13,880
in so at Red Hat then it goes in the Red

00:15:12,170 --> 00:15:16,280
Hat bucket if it's so and so at linaro

00:15:13,880 --> 00:15:17,839
it goes on the morrow bucket and if you

00:15:16,280 --> 00:15:21,200
actually submit a patch to the colonel

00:15:17,839 --> 00:15:22,670
and it's so and so at gmail then and he

00:15:21,200 --> 00:15:24,170
doesn't know you he'll actually send you

00:15:22,670 --> 00:15:24,540
an email at some point and say hey you

00:15:24,170 --> 00:15:26,580
work

00:15:24,540 --> 00:15:29,780
some were you paid to do this who what

00:15:26,580 --> 00:15:35,400
bucket do I put you in you know and and

00:15:29,780 --> 00:15:36,990
they will and they make a report every

00:15:35,400 --> 00:15:42,180
year every once in a while you can see

00:15:36,990 --> 00:15:44,970
it on lwn and talking about who you know

00:15:42,180 --> 00:15:46,950
who writes the Linux kernel and there

00:15:44,970 --> 00:15:49,920
are just literally hundreds of

00:15:46,950 --> 00:15:54,450
consultants and companies that they're

00:15:49,920 --> 00:15:56,190
big names there are people who are like

00:15:54,450 --> 00:15:57,960
penguin onyx and free electrons are kind

00:15:56,190 --> 00:15:59,880
of localized to Germany and France kind

00:15:57,960 --> 00:16:02,490
of you know but they'll work for you

00:15:59,880 --> 00:16:05,100
know free electrons just recently did

00:16:02,490 --> 00:16:07,470
some paid work to provide upstream

00:16:05,100 --> 00:16:09,030
support for the nine dollar tip computer

00:16:07,470 --> 00:16:12,900
that was just recently released for

00:16:09,030 --> 00:16:15,150
example you know open source knows no

00:16:12,900 --> 00:16:16,380
international boundaries so I mean

00:16:15,150 --> 00:16:17,880
there's no reason why you couldn't

00:16:16,380 --> 00:16:19,890
contact these people and have them do

00:16:17,880 --> 00:16:22,320
some work for you or provide some

00:16:19,890 --> 00:16:24,570
consultancy if you were in the last

00:16:22,320 --> 00:16:26,880
phase of a project and we're looking for

00:16:24,570 --> 00:16:29,250
some help for example and not to mention

00:16:26,880 --> 00:16:30,680
of course everyone every Linux vendor of

00:16:29,250 --> 00:16:33,960
course is more than happy to provide

00:16:30,680 --> 00:16:35,820
consultancy support but as a corollary

00:16:33,960 --> 00:16:37,770
to that argument of who do we call

00:16:35,820 --> 00:16:39,800
there's no one to call oh you know we're

00:16:37,770 --> 00:16:42,270
in trouble if something goes wrong

00:16:39,800 --> 00:16:44,670
what's funny is that what I've noticed

00:16:42,270 --> 00:16:46,890
is that just because you have a contract

00:16:44,670 --> 00:16:48,870
with a company doesn't necessarily mean

00:16:46,890 --> 00:16:51,480
that that company has someone who can

00:16:48,870 --> 00:16:53,280
help you with your problem I don't

00:16:51,480 --> 00:16:55,320
necessarily want to name names but I was

00:16:53,280 --> 00:16:57,690
at a company that was working with a

00:16:55,320 --> 00:16:59,610
specific proprietary vendor and they

00:16:57,690 --> 00:17:04,730
were doing some really corner stuff it

00:16:59,610 --> 00:17:11,400
was gateways networking type stuff and

00:17:04,730 --> 00:17:13,560
they were using a sdn stuff and they

00:17:11,400 --> 00:17:15,000
found a bug basically in the proprietary

00:17:13,560 --> 00:17:16,890
code that they were using and they had

00:17:15,000 --> 00:17:18,480
no way of solving it no way of looking

00:17:16,890 --> 00:17:22,050
into it they called the company and said

00:17:18,480 --> 00:17:24,330
when we do this it fails it crashes and

00:17:22,050 --> 00:17:26,070
everyone at the company said whom that's

00:17:24,330 --> 00:17:28,350
interesting well don't do that you know

00:17:26,070 --> 00:17:31,110
and they literally provided no support

00:17:28,350 --> 00:17:32,640
whatsoever so it just because you have

00:17:31,110 --> 00:17:33,890
someone to call and you're paying them

00:17:32,640 --> 00:17:36,650
big bucks doesn't

00:17:33,890 --> 00:17:39,410
there's anyone at that company often if

00:17:36,650 --> 00:17:40,790
you're lucky at a company of hundreds of

00:17:39,410 --> 00:17:41,960
engineers there might only be a small

00:17:40,790 --> 00:17:44,690
handful of people who could actually

00:17:41,960 --> 00:17:46,760
help you and what if they leave you know

00:17:44,690 --> 00:17:51,200
I mean then you're stuck in the lurch

00:17:46,760 --> 00:17:53,510
anyway a better approach is to i think

00:17:51,200 --> 00:17:56,930
is to form bonds with the the community

00:17:53,510 --> 00:17:58,910
if you have someone in the Linux

00:17:56,930 --> 00:18:01,010
community that you know and is helping

00:17:58,910 --> 00:18:05,510
you chances are they'll continue helping

00:18:01,010 --> 00:18:11,600
you for years to come the real time one

00:18:05,510 --> 00:18:14,030
one of my favorites it's too bad this is

00:18:11,600 --> 00:18:16,310
only a one-hour talk because I could go

00:18:14,030 --> 00:18:19,100
on about stuff that I've heard about

00:18:16,310 --> 00:18:23,450
real-time Linux allegedly or real hard

00:18:19,100 --> 00:18:25,520
real time this one you know our product

00:18:23,450 --> 00:18:27,620
is so complex and it has to run really

00:18:25,520 --> 00:18:29,630
fast so we need real-time and Linux

00:18:27,620 --> 00:18:31,400
isn't real time so it's not going to fit

00:18:29,630 --> 00:18:34,240
the bill you know there's so many things

00:18:31,400 --> 00:18:37,520
wrong with that real time is not fast

00:18:34,240 --> 00:18:39,470
real-time you're saying it's real time

00:18:37,520 --> 00:18:43,490
does not mean it's fast in fact it's

00:18:39,470 --> 00:18:46,840
like it's almost in every case having a

00:18:43,490 --> 00:18:50,600
realtime kernel is almost always slower

00:18:46,840 --> 00:18:54,770
real-time implies you know

00:18:50,600 --> 00:18:56,420
predictability and and and you know for

00:18:54,770 --> 00:18:58,820
example I've got a QB truck bored at

00:18:56,420 --> 00:19:02,270
home to running an upstream four or five

00:18:58,820 --> 00:19:04,850
kernel and at that time RT four was the

00:19:02,270 --> 00:19:07,520
latest for four or five so I ran this

00:19:04,850 --> 00:19:09,830
thing called cyclic test basically you

00:19:07,520 --> 00:19:12,200
start a bunch of threads and each of

00:19:09,830 --> 00:19:14,480
those threads will decide I'm going to

00:19:12,200 --> 00:19:16,670
sleep for this long and it takes a

00:19:14,480 --> 00:19:18,440
timestamp and then it sleeps and then it

00:19:16,670 --> 00:19:20,270
wakes up and then it checks to see how

00:19:18,440 --> 00:19:22,760
far off it was so if i'm going to sleep

00:19:20,270 --> 00:19:24,260
for two seconds and then I wake up and

00:19:22,760 --> 00:19:25,880
it's two and a half seconds later then

00:19:24,260 --> 00:19:28,760
there's a half second of jitter there

00:19:25,880 --> 00:19:30,590
that's not as hard real-time as you want

00:19:28,760 --> 00:19:33,680
the idea is that if you say two seconds

00:19:30,590 --> 00:19:35,930
you want two seconds this on the left is

00:19:33,680 --> 00:19:40,990
not the real time colonel this is just

00:19:35,930 --> 00:19:40,990
plain 405 this is the real time colonel

00:19:41,420 --> 00:19:46,320
the minimum the fastest that any of this

00:19:44,580 --> 00:19:49,760
can go is actually without the real-time

00:19:46,320 --> 00:19:53,120
stuff and on average it's actually

00:19:49,760 --> 00:19:57,000
faster than the real time the difference

00:19:53,120 --> 00:20:01,500
what real time gives you is this column

00:19:57,000 --> 00:20:04,380
here there are spikes you know there's

00:20:01,500 --> 00:20:08,490
non-deterministic spikes in the non

00:20:04,380 --> 00:20:11,460
real-time that occur they happen they're

00:20:08,490 --> 00:20:13,500
nasty but looking at the averages we can

00:20:11,460 --> 00:20:15,030
see that they're very rare events I mean

00:20:13,500 --> 00:20:18,600
they don't really affect the average at

00:20:15,030 --> 00:20:23,880
all whereas in a realtime kernel you are

00:20:18,600 --> 00:20:26,010
trading determinism for speed basically

00:20:23,880 --> 00:20:27,390
and of course this is done with linux

00:20:26,010 --> 00:20:28,800
and you could say oh that's because my

00:20:27,390 --> 00:20:31,440
night real-time garbage is something

00:20:28,800 --> 00:20:35,429
that this is the same for any colonel

00:20:31,440 --> 00:20:38,460
any vendor this is not linux pacific you

00:20:35,429 --> 00:20:39,929
see this all the time with real time so

00:20:38,460 --> 00:20:42,990
people saying that the real time stuff

00:20:39,929 --> 00:20:46,500
and of course in dublin a couple weeks

00:20:42,990 --> 00:20:49,050
ago the linux foundation decided that

00:20:46,500 --> 00:20:50,640
real time was so important for linux it

00:20:49,050 --> 00:20:53,160
was so important that they've actually

00:20:50,640 --> 00:20:55,290
made Thomas gliksin er the guy who's

00:20:53,160 --> 00:20:57,809
been driving real time for quite a while

00:20:55,290 --> 00:21:01,140
they make him a fellow so he's basically

00:20:57,809 --> 00:21:03,570
given free rein to do as much he doesn't

00:21:01,140 --> 00:21:06,059
have to you know he's getting paid to

00:21:03,570 --> 00:21:08,850
work on real time full time you know a

00:21:06,059 --> 00:21:10,980
lot of these people you know kind of

00:21:08,850 --> 00:21:12,510
work on it as a side project or they

00:21:10,980 --> 00:21:14,040
work on it because their company wants

00:21:12,510 --> 00:21:16,500
them to work on it but then they switch

00:21:14,040 --> 00:21:20,309
to other things Thomas now has free rein

00:21:16,500 --> 00:21:22,590
to work on this exclusively so that's

00:21:20,309 --> 00:21:24,960
really great so we're going to see a lot

00:21:22,590 --> 00:21:28,830
more stuff basically happening with

00:21:24,960 --> 00:21:30,960
linux in real time my personal pet peeve

00:21:28,830 --> 00:21:35,490
is that there are lots of hardware based

00:21:30,960 --> 00:21:38,670
stuff that hurts RT performance and my

00:21:35,490 --> 00:21:41,070
sort of feeling this is me saying this

00:21:38,670 --> 00:21:42,630
is that if you're relying on a software

00:21:41,070 --> 00:21:45,390
schedule for real time you've already

00:21:42,630 --> 00:21:46,710
lost I mean as soon as you say hey I'm

00:21:45,390 --> 00:21:48,929
going to write some software and I'm

00:21:46,710 --> 00:21:52,130
going to you know make that real time

00:21:48,929 --> 00:21:54,200
the only true way that you can have real

00:21:52,130 --> 00:21:56,720
is if you're doing it in hardware if

00:21:54,200 --> 00:21:59,660
you're using an FPGA or if you're using

00:21:56,720 --> 00:22:01,510
a you know multi colors are so cheap

00:21:59,660 --> 00:22:03,560
nowadays they're pretty much free

00:22:01,510 --> 00:22:04,940
instead of using symmetric

00:22:03,560 --> 00:22:06,530
multiprocessing where you're basically

00:22:04,940 --> 00:22:08,870
saying I'm going to have four cores

00:22:06,530 --> 00:22:10,640
doing the same thing if you carve out

00:22:08,870 --> 00:22:13,340
one of them for example in an a

00:22:10,640 --> 00:22:14,900
symmetric multiprocessing system and you

00:22:13,340 --> 00:22:16,940
say these three cores are going to run

00:22:14,900 --> 00:22:19,520
linux and this one's going to be doing

00:22:16,940 --> 00:22:21,200
what I tell it to do then you might be

00:22:19,520 --> 00:22:23,780
able to achieve something that

00:22:21,200 --> 00:22:25,340
approaches real time a good example of

00:22:23,780 --> 00:22:29,690
that is the BeagleBone the BeagleBone

00:22:25,340 --> 00:22:35,630
which is a TI satara processor has these

00:22:29,690 --> 00:22:37,220
PR you forget what Pru stands for but

00:22:35,630 --> 00:22:38,660
basically they're these little real-time

00:22:37,220 --> 00:22:42,680
units they're kind of patched on the

00:22:38,660 --> 00:22:45,020
side of it and allow it to they don't

00:22:42,680 --> 00:22:48,530
run linux they basically run what you

00:22:45,020 --> 00:22:51,920
want them to so they are able to respond

00:22:48,530 --> 00:22:55,220
and react the software without having to

00:22:51,920 --> 00:22:56,990
go through the scheduler basically so

00:22:55,220 --> 00:22:58,880
that's all the nasty stuff that's people

00:22:56,990 --> 00:23:01,460
coming at you and say no then it's is no

00:22:58,880 --> 00:23:06,050
good you know now we want to talk about

00:23:01,460 --> 00:23:09,200
why linux is so great so this is my

00:23:06,050 --> 00:23:12,740
metaphor for an embedded device from you

00:23:09,200 --> 00:23:15,620
know the 90s simple single function nice

00:23:12,740 --> 00:23:18,380
and easy nowadays this is what embedded

00:23:15,620 --> 00:23:23,660
devices look like I mean your cell phone

00:23:18,380 --> 00:23:27,020
has Wi-Fi and a multi-gigabit processor

00:23:23,660 --> 00:23:30,410
multi-core eight cores and cameras and

00:23:27,020 --> 00:23:33,830
near-field communication and USB ports

00:23:30,410 --> 00:23:36,500
and SD cards all sorts of stuff I mean

00:23:33,830 --> 00:23:37,610
it's incredible the amount of stuff is

00:23:36,500 --> 00:23:39,230
you were putting together in a bad

00:23:37,610 --> 00:23:42,080
system people today are not satisfied

00:23:39,230 --> 00:23:44,390
with a blinking light and a switch you

00:23:42,080 --> 00:23:46,880
know they want touch screens they want

00:23:44,390 --> 00:23:50,870
fancy scrolling they want html5 they

00:23:46,880 --> 00:23:52,520
want a fancy GUI interface to configure

00:23:50,870 --> 00:23:56,180
it and they're not happy with static

00:23:52,520 --> 00:23:58,580
HTML it's got to be live it's got to

00:23:56,180 --> 00:24:01,600
switch back and forth it's got to be you

00:23:58,580 --> 00:24:01,600
know all sorts of stuff

00:24:02,380 --> 00:24:08,450
can I say that creating an embedded

00:24:06,380 --> 00:24:11,840
device today is much more complicated in

00:24:08,450 --> 00:24:15,200
the past I would suggest it's probably

00:24:11,840 --> 00:24:17,810
going up exponentially but developer

00:24:15,200 --> 00:24:19,040
output isn't I mean how much code can

00:24:17,810 --> 00:24:20,960
you write in a day are you writing

00:24:19,040 --> 00:24:23,750
exponentially more code than you were 10

00:24:20,960 --> 00:24:26,000
years ago you know and we do know for a

00:24:23,750 --> 00:24:27,980
fact but this has we do know this that

00:24:26,000 --> 00:24:30,560
adding people to a project is kind of

00:24:27,980 --> 00:24:32,240
productive the best teams are 1 to 10

00:24:30,560 --> 00:24:35,660
and it doesn't matter what you're using

00:24:32,240 --> 00:24:37,070
agile or waterfall or traditional the

00:24:35,660 --> 00:24:40,460
methodology doesn't matter the only

00:24:37,070 --> 00:24:42,770
thing that changes is you know agile is

00:24:40,460 --> 00:24:44,270
allegedly eighty percent successful

00:24:42,770 --> 00:24:45,800
whereas waterfalls only seventy-six

00:24:44,270 --> 00:24:47,330
percent successful on the team of one to

00:24:45,800 --> 00:24:49,340
ten you know that sort of thing you're

00:24:47,330 --> 00:24:52,780
just changing the absolute numbers but

00:24:49,340 --> 00:24:56,120
one to ten most successful 10 to 25

00:24:52,780 --> 00:24:59,090
marginally successful teams of 25 or

00:24:56,120 --> 00:25:00,920
more working on one project below fifty

00:24:59,090 --> 00:25:03,590
percent in success rate I mean the

00:25:00,920 --> 00:25:05,210
chances are so you can't just add you

00:25:03,590 --> 00:25:07,670
can't double your team size and hope to

00:25:05,210 --> 00:25:09,410
double your output so how do you tackle

00:25:07,670 --> 00:25:11,990
that how do you have you create a device

00:25:09,410 --> 00:25:13,910
that has all sorts of amazing doodads

00:25:11,990 --> 00:25:18,370
and gizmos and supports all sorts of

00:25:13,910 --> 00:25:21,320
stuff you know well you use Linux right

00:25:18,370 --> 00:25:22,790
I call this a little Narwhal effect i

00:25:21,320 --> 00:25:24,560
work from linaro for a while and it was

00:25:22,790 --> 00:25:27,770
the first time that i was introduced to

00:25:24,560 --> 00:25:30,230
this and it's it's an amazing trend that

00:25:27,770 --> 00:25:33,590
we're seeing and we're seeing it at the

00:25:30,230 --> 00:25:35,300
most amazing companies these aren't no

00:25:33,590 --> 00:25:37,670
name companies these are companies you

00:25:35,300 --> 00:25:40,850
know this is st this is why away this is

00:25:37,670 --> 00:25:43,490
a McCrea man all sorts of amazing if

00:25:40,850 --> 00:25:45,650
you're developing a product that does X

00:25:43,490 --> 00:25:52,130
how much time do you want your

00:25:45,650 --> 00:25:55,490
developers to spend doing y where y is a

00:25:52,130 --> 00:25:57,890
bootloader or your CI loop or your test

00:25:55,490 --> 00:26:00,440
framework or your c library you know

00:25:57,890 --> 00:26:03,350
back in the day it wasn't unheard of to

00:26:00,440 --> 00:26:05,300
say let's start a new project ok let's

00:26:03,350 --> 00:26:07,730
start working on our c compiler for this

00:26:05,300 --> 00:26:10,610
SOC because there's no support for it

00:26:07,730 --> 00:26:13,490
anywhere or the support is incredibly

00:26:10,610 --> 00:26:15,320
expensive that's not crazy it would

00:26:13,490 --> 00:26:18,140
be crazy today if you were trying to

00:26:15,320 --> 00:26:20,120
create you know a cell phone to say hey

00:26:18,140 --> 00:26:23,630
let's start by you know putting together

00:26:20,120 --> 00:26:27,320
our compiler in that just you wouldn't

00:26:23,630 --> 00:26:30,050
really be competitive if you you and

00:26:27,320 --> 00:26:32,510
what's amazing too is a few use open

00:26:30,050 --> 00:26:35,000
source not only do you get this stuff

00:26:32,510 --> 00:26:37,010
but you in many cases get multiple

00:26:35,000 --> 00:26:39,380
options for each of them I mean there

00:26:37,010 --> 00:26:41,480
are half a dozen web servers you know as

00:26:39,380 --> 00:26:45,740
a patchy ninja necks and all those and

00:26:41,480 --> 00:26:48,050
there's GCC in llvm and there's a 4c

00:26:45,740 --> 00:26:50,330
libraries you got G lib see you've got

00:26:48,050 --> 00:26:55,340
muscle you've got you see let's see you

00:26:50,330 --> 00:26:57,110
know that and device drivers I mean you

00:26:55,340 --> 00:26:59,630
don't want to be fiddling around trying

00:26:57,110 --> 00:27:04,040
to write a USB to support every

00:26:59,630 --> 00:27:07,490
imaginable jet drive or jump drive that

00:27:04,040 --> 00:27:11,480
you can in that you can plug into it you

00:27:07,490 --> 00:27:14,630
want to be focusing on what happens once

00:27:11,480 --> 00:27:16,670
that drive gets inserted you know as an

00:27:14,630 --> 00:27:19,880
example and this comes from my friend at

00:27:16,670 --> 00:27:28,059
xilinx xilinx recently released this

00:27:19,880 --> 00:27:32,450
amazing device it's it's got quad-core

00:27:28,059 --> 00:27:36,020
64-bit ARM a53 so you know SiC latest

00:27:32,450 --> 00:27:39,020
technology it's got dual our 5s which

00:27:36,020 --> 00:27:43,130
are 32-bit processor got dual Maui for

00:27:39,020 --> 00:27:49,340
hundreds on it it's got amazing amounts

00:27:43,130 --> 00:27:51,679
of like FP FPGA logic of course because

00:27:49,340 --> 00:27:56,059
of xilinx it's got an amazing power

00:27:51,679 --> 00:28:00,110
management I see its supports trustzone

00:27:56,059 --> 00:28:02,360
in hardware it does PCIe it does 100

00:28:00,110 --> 00:28:04,160
gigabit ethernet it does all this

00:28:02,360 --> 00:28:05,840
amazing stuff this is a vice that they

00:28:04,160 --> 00:28:09,380
just came out with you know quad core

00:28:05,840 --> 00:28:11,690
this dual core that over blah if this

00:28:09,380 --> 00:28:13,850
landed on your desk how long do you

00:28:11,690 --> 00:28:16,059
think it would take you to get this up

00:28:13,850 --> 00:28:16,059
and running

00:28:17,220 --> 00:28:24,539
well using open source software using

00:28:20,909 --> 00:28:27,120
Linux after two days they had full SMP

00:28:24,539 --> 00:28:29,640
Linux running on the quads devices and

00:28:27,120 --> 00:28:31,200
running multiple VMs it took them two

00:28:29,640 --> 00:28:33,780
days it took the software developers

00:28:31,200 --> 00:28:35,070
this literally landed on their desk two

00:28:33,780 --> 00:28:37,590
days later they had it all up and

00:28:35,070 --> 00:28:40,799
running you know because they didn't

00:28:37,590 --> 00:28:43,110
have to focus on GCC or a debugger or a

00:28:40,799 --> 00:28:44,880
c library or any of that stuff they just

00:28:43,110 --> 00:28:46,559
you know the compilers are there

00:28:44,880 --> 00:28:51,059
everything's all set to go they just

00:28:46,559 --> 00:28:53,940
have to put it together so the linaro

00:28:51,059 --> 00:28:56,880
effect is that it allows you to focus on

00:28:53,940 --> 00:29:00,960
your product the thing that makes you

00:28:56,880 --> 00:29:03,030
unique and basically the pad line is

00:29:00,960 --> 00:29:05,070
like stop competing on boot loaders like

00:29:03,030 --> 00:29:07,110
if you're trying to make an android

00:29:05,070 --> 00:29:08,970
phone stop arguing that your bootloader

00:29:07,110 --> 00:29:10,799
is better than your competitors you know

00:29:08,970 --> 00:29:12,960
that's not what you need to be focusing

00:29:10,799 --> 00:29:15,500
on linaro in case you're not aware as a

00:29:12,960 --> 00:29:18,120
company was formed by a bunch of people

00:29:15,500 --> 00:29:20,159
who worked at arm and the arm ecosystem

00:29:18,120 --> 00:29:22,350
is still a mess today but it was even

00:29:20,159 --> 00:29:25,470
messier back then and you had a lot of

00:29:22,350 --> 00:29:28,500
soc vendors producing these arm chips

00:29:25,470 --> 00:29:30,720
and every one of these companies would

00:29:28,500 --> 00:29:33,480
have a team of ten developers to add

00:29:30,720 --> 00:29:36,330
support to GCC a team of Denton

00:29:33,480 --> 00:29:38,610
developers that was adding support to G

00:29:36,330 --> 00:29:40,140
lipsy a team that did the power

00:29:38,610 --> 00:29:42,360
management a team that did the pin

00:29:40,140 --> 00:29:44,100
muxing and you had all DC so every

00:29:42,360 --> 00:29:46,500
company had like all these teams of

00:29:44,100 --> 00:29:49,470
people and finally these people at arm's

00:29:46,500 --> 00:29:50,580
said you know this is a waste we're

00:29:49,470 --> 00:29:52,320
going to start this company called

00:29:50,580 --> 00:29:53,940
linaro and what we're going to do is

00:29:52,320 --> 00:29:56,730
we're going to you have to pay to be in

00:29:53,940 --> 00:29:59,100
linaro unfortunately but for all the

00:29:56,730 --> 00:30:00,870
members that are in a member would pay

00:29:59,100 --> 00:30:03,059
money to be in part of inara but then

00:30:00,870 --> 00:30:05,309
they donate engineers so out of their

00:30:03,059 --> 00:30:07,679
team of ten compiler engineers they'll

00:30:05,309 --> 00:30:09,240
donate to and this company will donate

00:30:07,679 --> 00:30:11,280
to in that company will donate to now

00:30:09,240 --> 00:30:13,559
suddenly at linaro you have a team of

00:30:11,280 --> 00:30:19,140
you know 14 people or so who are all

00:30:13,559 --> 00:30:21,570
experts in GCC and all 14 people work to

00:30:19,140 --> 00:30:25,470
add support for all of the member

00:30:21,570 --> 00:30:28,649
companies so it's an amazing model and

00:30:25,470 --> 00:30:30,370
like I said what's amazing is that it's

00:30:28,649 --> 00:30:33,070
it's these high

00:30:30,370 --> 00:30:35,800
companies doing it it's st it's it's

00:30:33,070 --> 00:30:37,660
Huawei it's you know it's not some

00:30:35,800 --> 00:30:40,210
companies you've never heard of who are

00:30:37,660 --> 00:30:41,920
struggling to fight bankruptcy off and

00:30:40,210 --> 00:30:44,200
are just making a last-ditch attempt

00:30:41,920 --> 00:30:46,000
these are intelligent companies that are

00:30:44,200 --> 00:30:47,620
coming together and saying we got to

00:30:46,000 --> 00:30:49,480
stop competing on boot loaders because

00:30:47,620 --> 00:30:51,070
this is stupid how many how many ways

00:30:49,480 --> 00:30:53,230
can you boot an ARM chip you know

00:30:51,070 --> 00:30:57,370
honestly let's just do it once and we'll

00:30:53,230 --> 00:31:00,370
all use it and then we'll compete on low

00:30:57,370 --> 00:31:01,870
power or graphics capability or

00:31:00,370 --> 00:31:05,429
something that's going to make you

00:31:01,870 --> 00:31:09,160
unique you know so infrastructure costs

00:31:05,429 --> 00:31:11,800
earlier I said how much time would you

00:31:09,160 --> 00:31:13,780
want to waste on why if your product

00:31:11,800 --> 00:31:16,830
does it but how much money would you

00:31:13,780 --> 00:31:22,600
want to you know waste on these things

00:31:16,830 --> 00:31:26,370
you know again I gave a talk last year

00:31:22,600 --> 00:31:30,580
at the toronto GTA linux users group and

00:31:26,370 --> 00:31:33,820
i tried if you're doing cortex-m

00:31:30,580 --> 00:31:36,220
development i tried to basically say hey

00:31:33,820 --> 00:31:37,990
you could use this free tool or you

00:31:36,220 --> 00:31:40,120
could pay to use you know these

00:31:37,990 --> 00:31:41,650
proprietary tools i tried to figure out

00:31:40,120 --> 00:31:44,590
how much proprietary tools cost it's

00:31:41,650 --> 00:31:47,200
actually impossible because you can use

00:31:44,590 --> 00:31:49,179
them as a USB dongle you can buy five

00:31:47,200 --> 00:31:52,030
packs you can buy ten pets you can do a

00:31:49,179 --> 00:31:54,700
recurring yearly subscription it's

00:31:52,030 --> 00:31:57,030
literally impossible to say okay GCC

00:31:54,700 --> 00:31:59,380
free or you can pay this amount because

00:31:57,030 --> 00:32:03,190
trying to figure out how to buy a

00:31:59,380 --> 00:32:04,540
compiler in most cases is confusing and

00:32:03,190 --> 00:32:06,760
they do that on purpose of course

00:32:04,540 --> 00:32:08,679
because if they can slip you a 10 pack

00:32:06,760 --> 00:32:10,179
and that's what they are selling you

00:32:08,679 --> 00:32:11,860
then you don't really realize you could

00:32:10,179 --> 00:32:14,890
use a USB dongle and be half the price

00:32:11,860 --> 00:32:19,420
you know so infrastructure you have

00:32:14,890 --> 00:32:25,960
amazing infrastructure and and one thing

00:32:19,420 --> 00:32:28,090
to harnessing OSS is about parity you're

00:32:25,960 --> 00:32:31,380
not going to it's not like you can use

00:32:28,090 --> 00:32:33,850
Linux and release your product in a week

00:32:31,380 --> 00:32:35,740
linux isn't the magic bullet that's

00:32:33,850 --> 00:32:37,990
going to get you there but linux will

00:32:35,740 --> 00:32:40,870
give you parody linux means that you can

00:32:37,990 --> 00:32:43,190
start with what makes you unique you're

00:32:40,870 --> 00:32:49,550
not starting you know

00:32:43,190 --> 00:32:53,510
that's it brings you into the game in

00:32:49,550 --> 00:32:55,460
terms of tools an amazing tool that is

00:32:53,510 --> 00:32:58,480
available I don't know of a tool like

00:32:55,460 --> 00:33:07,220
this anywhere else this is openembedded

00:32:58,480 --> 00:33:09,380
which is part of the Yocto project no

00:33:07,220 --> 00:33:17,150
openembedded as part of the octo project

00:33:09,380 --> 00:33:18,650
yep no yeah great sure yeah so again in

00:33:17,150 --> 00:33:21,350
the same way that Thomas collects nor is

00:33:18,650 --> 00:33:23,810
a fellow of the Linux Foundation which

00:33:21,350 --> 00:33:28,520
allows in Gizem free rein the gentleman

00:33:23,810 --> 00:33:31,580
in charge of the Yocto project is also a

00:33:28,520 --> 00:33:33,890
fellow and that allows him Richard Purdy

00:33:31,580 --> 00:33:37,430
which gives him the flexibility to work

00:33:33,890 --> 00:33:40,550
on this full time and the Yocto project

00:33:37,430 --> 00:33:43,280
is the build system that's endorsed by

00:33:40,550 --> 00:33:44,690
the Linux Foundation and basically if

00:33:43,280 --> 00:33:48,680
you're doing embedded Linux this is a

00:33:44,690 --> 00:33:51,650
good tool to look at I love it I'm very

00:33:48,680 --> 00:33:54,440
fond of it I use it quite a bit it

00:33:51,650 --> 00:33:57,440
gathers your sources it compiles them

00:33:54,440 --> 00:34:00,140
you have a bunch of configurations a

00:33:57,440 --> 00:34:02,300
bunch of bsp and stuff like that it

00:34:00,140 --> 00:34:04,340
takes your sources it patches them it

00:34:02,300 --> 00:34:06,230
compiles them it generates packages it

00:34:04,340 --> 00:34:09,200
takes those packages generates images

00:34:06,230 --> 00:34:11,150
creates an SDK for your developers it

00:34:09,200 --> 00:34:16,250
pretty much does everything but walk the

00:34:11,150 --> 00:34:21,080
dog it's a incredible project but what's

00:34:16,250 --> 00:34:23,360
amazing about the Yocto project and

00:34:21,080 --> 00:34:26,450
openembedded the tool that you know does

00:34:23,360 --> 00:34:29,840
the recipes and provides the metadata

00:34:26,450 --> 00:34:32,180
upon which this is built is it allows

00:34:29,840 --> 00:34:35,360
you to set policy you can say something

00:34:32,180 --> 00:34:37,610
like I want to create an image for my

00:34:35,360 --> 00:34:41,630
device and I don't want there to be any

00:34:37,610 --> 00:34:44,060
gplv3 code on my image anywhere you set

00:34:41,630 --> 00:34:45,910
that as a configuration it goes off and

00:34:44,060 --> 00:34:48,410
build your image and if by accident

00:34:45,910 --> 00:34:51,200
you've somehow slipped in a package that

00:34:48,410 --> 00:34:52,970
is gplv3 the bill fails it stops and it

00:34:51,200 --> 00:34:53,820
says so your policy is being violated

00:34:52,970 --> 00:34:58,200
here

00:34:53,820 --> 00:35:01,560
you know so it allows say management to

00:34:58,200 --> 00:35:04,170
say hey let's set a licensing policy on

00:35:01,560 --> 00:35:06,570
our product you know maybe you would say

00:35:04,170 --> 00:35:08,820
let's not have any GPL that would be

00:35:06,570 --> 00:35:10,710
kind of hard to do but you know but you

00:35:08,820 --> 00:35:12,870
can say I don't want any affair or

00:35:10,710 --> 00:35:14,790
license or I don't want any Apache or I

00:35:12,870 --> 00:35:17,430
don't only want many Mozilla you can

00:35:14,790 --> 00:35:19,890
actually specify and what it also does

00:35:17,430 --> 00:35:22,680
too is that when it does a successful

00:35:19,890 --> 00:35:24,540
build it'll then generate a manifest and

00:35:22,680 --> 00:35:26,550
it says this is your image these are all

00:35:24,540 --> 00:35:27,900
the packages that are in the image these

00:35:26,550 --> 00:35:30,270
are all the licenses for all those

00:35:27,900 --> 00:35:33,240
packages so that if you want to be

00:35:30,270 --> 00:35:34,950
licensed compliant it's easy for you to

00:35:33,240 --> 00:35:36,990
then just take that manifest from your

00:35:34,950 --> 00:35:38,940
build slap it on your website and say

00:35:36,990 --> 00:35:42,720
this is what's in the product and these

00:35:38,940 --> 00:35:44,490
are all the licenses you know the Yocto

00:35:42,720 --> 00:35:47,940
project is an umbrella project that

00:35:44,490 --> 00:35:54,170
includes bitbake and openembedded the

00:35:47,940 --> 00:35:57,360
 sample distribution it includes a

00:35:54,170 --> 00:36:00,570
testing framework it includes all sorts

00:35:57,360 --> 00:36:02,910
of amazing stuff and what's really

00:36:00,570 --> 00:36:06,330
incredible about it to which this is

00:36:02,910 --> 00:36:08,760
really the seller for me is that let's

00:36:06,330 --> 00:36:11,670
say today you're developing your product

00:36:08,760 --> 00:36:14,370
on an arm your device's arm-based and

00:36:11,670 --> 00:36:17,040
that becomes obsolete and tomorrow you

00:36:14,370 --> 00:36:19,800
decide that you want to do emit 64 based

00:36:17,040 --> 00:36:23,430
you literally change one or two lines of

00:36:19,800 --> 00:36:27,390
configuration restart the build and out

00:36:23,430 --> 00:36:32,880
pops out your image but now compiled for

00:36:27,390 --> 00:36:34,710
Amit 64 it's an incredible to let you

00:36:32,880 --> 00:36:38,130
get back to that a little bit later in

00:36:34,710 --> 00:36:41,130
terms of tools you know I don't know of

00:36:38,130 --> 00:36:43,410
any ecosystem that has as much variety

00:36:41,130 --> 00:36:45,000
you don't like get you subversion you

00:36:43,410 --> 00:36:47,910
know like Somerton you see that you

00:36:45,000 --> 00:36:49,590
don't like CVS use mercurial I mean you

00:36:47,910 --> 00:36:51,630
don't like the up to project a lot of

00:36:49,590 --> 00:36:53,700
people you know find it very big I could

00:36:51,630 --> 00:36:56,430
do a whole talk in fact they give entire

00:36:53,700 --> 00:36:58,800
day presentations on this sort of stuff

00:36:56,430 --> 00:37:00,480
you find it too big to cabo use

00:36:58,800 --> 00:37:01,980
buildroot you know you just want to

00:37:00,480 --> 00:37:05,010
compile their cross to lengies your

00:37:01,980 --> 00:37:06,349
friend you know testing there's an

00:37:05,010 --> 00:37:08,700
entire site

00:37:06,349 --> 00:37:09,990
dedicated to listing all the open source

00:37:08,700 --> 00:37:14,490
test tools that you could possibly

00:37:09,990 --> 00:37:16,800
imagine and going back to like one year

00:37:14,490 --> 00:37:18,420
when you're giving this proposition to

00:37:16,800 --> 00:37:20,490
your company and saying this is why we

00:37:18,420 --> 00:37:22,920
should use Linux one of the amazing

00:37:20,490 --> 00:37:25,080
things like I don't know a lot of

00:37:22,920 --> 00:37:26,790
companies for example who do code review

00:37:25,080 --> 00:37:28,619
they're all like I'll code reuse hard

00:37:26,790 --> 00:37:30,089
how do we do that call it such a pain

00:37:28,619 --> 00:37:32,280
getting everyone together we're going to

00:37:30,089 --> 00:37:36,180
look at code everyone falls asleep it's

00:37:32,280 --> 00:37:39,540
horrible well try Garrett you know

00:37:36,180 --> 00:37:41,910
Garrett is an amazing tool if you

00:37:39,540 --> 00:37:45,119
haven't you know heard of it or used you

00:37:41,910 --> 00:37:48,030
ties in to get for example and it ties

00:37:45,119 --> 00:37:49,800
into Jenkins you commit your code your

00:37:48,030 --> 00:37:51,180
Garret your Garret server will then take

00:37:49,800 --> 00:37:54,240
that code compile it do just a quick

00:37:51,180 --> 00:37:56,220
compile and say oh well this patch

00:37:54,240 --> 00:37:58,320
doesn't compile so let's forget about

00:37:56,220 --> 00:38:01,680
that it does that automatically for you

00:37:58,320 --> 00:38:04,260
if it does compile then it provides the

00:38:01,680 --> 00:38:05,670
diff and people can log into the server

00:38:04,260 --> 00:38:07,589
and they can look through the code in

00:38:05,670 --> 00:38:10,230
line by line they can provide comments

00:38:07,589 --> 00:38:13,080
and you can comment on comments and you

00:38:10,230 --> 00:38:16,380
can push changes and then you can see

00:38:13,080 --> 00:38:18,270
the latest v2 the v3 the v4 of that pad

00:38:16,380 --> 00:38:19,800
and then when everyone checked and

00:38:18,270 --> 00:38:22,410
there's a voting system that you can

00:38:19,800 --> 00:38:24,570
enable on it and if it gets you know if

00:38:22,410 --> 00:38:27,180
there's ten developers and it gets eight

00:38:24,570 --> 00:38:29,580
votes then Garrett will commit it to

00:38:27,180 --> 00:38:31,950
your master branch of some repository

00:38:29,580 --> 00:38:33,390
somewhere I mean it's a beautiful system

00:38:31,950 --> 00:38:35,580
you know it's just amazing all these

00:38:33,390 --> 00:38:38,099
tools are available bugzilla how many

00:38:35,580 --> 00:38:44,430
companies have I introduced bugzilla to

00:38:38,099 --> 00:38:46,619
hear the amazing you know whereas if

00:38:44,430 --> 00:38:49,920
you're just using you know some

00:38:46,619 --> 00:38:52,680
proprietary you know you could still use

00:38:49,920 --> 00:38:55,530
this but this ties in so well with the

00:38:52,680 --> 00:38:59,970
open-source workflow getting back to

00:38:55,530 --> 00:39:03,510
obsolescence I wish I could have found

00:38:59,970 --> 00:39:05,099
more data this was data that i found on

00:39:03,510 --> 00:39:07,950
old website wish i could find more

00:39:05,099 --> 00:39:09,720
recent data but we see a trend and i

00:39:07,950 --> 00:39:11,970
don't think that the trend is reversing

00:39:09,720 --> 00:39:15,690
so i do believe this data about this is

00:39:11,970 --> 00:39:16,940
about late 60s 1960s 1970s and this

00:39:15,690 --> 00:39:19,730
unfortunately is only nine

00:39:16,940 --> 00:39:24,200
299 but what we're looking at here is

00:39:19,730 --> 00:39:28,430
the length of the lifetime of various

00:39:24,200 --> 00:39:31,160
processors so if you built a product on

00:39:28,430 --> 00:39:33,079
a given processor and you were buying

00:39:31,160 --> 00:39:35,450
those chips because you were making your

00:39:33,079 --> 00:39:37,460
device how long would it be before that

00:39:35,450 --> 00:39:38,869
manufacturer sent you a notice saying oh

00:39:37,460 --> 00:39:40,160
by the way we're end of life in this

00:39:38,869 --> 00:39:43,930
processor you might want to start

00:39:40,160 --> 00:39:48,140
redesigning your product back in the day

00:39:43,930 --> 00:39:50,359
microchip pic 16 the zilog does that AV

00:39:48,140 --> 00:39:53,390
is in here as well we're looking at

00:39:50,359 --> 00:39:56,690
lifetimes of 34 years if you designed a

00:39:53,390 --> 00:39:59,089
product you know back in the 70s based

00:39:56,690 --> 00:40:01,940
on the set a tee it could be buying that

00:39:59,089 --> 00:40:04,099
chip for 34 years and still cranking out

00:40:01,940 --> 00:40:06,950
your product you know no modifications

00:40:04,099 --> 00:40:08,900
required nowadays you're lucky if a

00:40:06,950 --> 00:40:12,200
processor lasts two to three years

00:40:08,900 --> 00:40:14,599
unless you buy the military version of a

00:40:12,200 --> 00:40:17,810
processor in which case you're literally

00:40:14,599 --> 00:40:20,780
spending magnitudes more for that

00:40:17,810 --> 00:40:23,210
processor then those SOC vendors will

00:40:20,780 --> 00:40:27,460
guarantee a lifetime of maybe ten years

00:40:23,210 --> 00:40:30,470
but the fact is if you're designing a

00:40:27,460 --> 00:40:32,450
device unless you expect the lifetime of

00:40:30,470 --> 00:40:37,190
that device to only be one or two years

00:40:32,450 --> 00:40:39,829
the question isn't if that processor is

00:40:37,190 --> 00:40:41,869
going to go obsolete it's when how long

00:40:39,829 --> 00:40:44,450
when are you going to have to migrate to

00:40:41,869 --> 00:40:47,240
a new board to a new device and of

00:40:44,450 --> 00:40:49,760
course the CPU is just but one component

00:40:47,240 --> 00:40:52,190
of an embedded device that literally has

00:40:49,760 --> 00:40:55,069
hundreds of components on it I worked at

00:40:52,190 --> 00:40:57,710
a company they had to redesign their

00:40:55,069 --> 00:40:59,119
product was based on the 386 and 386 is

00:40:57,710 --> 00:41:00,920
one of those chips that just goes on

00:40:59,119 --> 00:41:03,560
forever i mean i think someone somewhere

00:41:00,920 --> 00:41:05,869
is still making 386 s but they had to

00:41:03,560 --> 00:41:09,170
redesign their board because the memory

00:41:05,869 --> 00:41:11,060
chips they were using that supplier had

00:41:09,170 --> 00:41:13,609
end of life to that product so they had

00:41:11,060 --> 00:41:14,869
to upgrade the processor and everything

00:41:13,609 --> 00:41:17,329
else they had to redesign the entire

00:41:14,869 --> 00:41:20,839
board simply because some little crummy

00:41:17,329 --> 00:41:23,680
little piece of 20 cent chip had gone

00:41:20,839 --> 00:41:25,250
end-of-life you know it's a disaster

00:41:23,680 --> 00:41:28,460
linux

00:41:25,250 --> 00:41:31,220
that same company in the last seven

00:41:28,460 --> 00:41:33,830
years four times now has had to move to

00:41:31,220 --> 00:41:35,900
new boards and literally moving to a new

00:41:33,830 --> 00:41:38,870
board never took more than one or two

00:41:35,900 --> 00:41:40,700
days if you are a company and you're

00:41:38,870 --> 00:41:42,410
designing your hardware from scratch and

00:41:40,700 --> 00:41:43,640
writing your software from scratch and

00:41:42,410 --> 00:41:45,620
there a lot of companies still doing

00:41:43,640 --> 00:41:48,980
that unfortunately how long would it

00:41:45,620 --> 00:41:50,690
take you to throw away your existing

00:41:48,980 --> 00:41:52,730
board and have a completely different

00:41:50,690 --> 00:41:55,130
new board a completely different process

00:41:52,730 --> 00:41:57,290
or everything memory how long would it

00:41:55,130 --> 00:42:01,150
take you to migrate to that if you're

00:41:57,290 --> 00:42:04,070
using Linux literally days or hours I

00:42:01,150 --> 00:42:07,370
don't know of a better proposition a

00:42:04,070 --> 00:42:09,260
better way to sell Linux than that this

00:42:07,370 --> 00:42:12,590
is something Greg kroah-hartman said in

00:42:09,260 --> 00:42:15,470
2006 I believe it's still valid today I

00:42:12,590 --> 00:42:19,340
certainly don't know of any anything

00:42:15,470 --> 00:42:21,800
that opposes this even back in 2006

00:42:19,340 --> 00:42:24,830
Linux supports more devices device

00:42:21,800 --> 00:42:26,660
drivers out of the box than any other

00:42:24,830 --> 00:42:29,210
operating system ever has and what's

00:42:26,660 --> 00:42:33,560
cool about device drivers if you have

00:42:29,210 --> 00:42:36,620
Intel baseboard and it has say a Rolla

00:42:33,560 --> 00:42:38,390
link Ethernet chip on it and then you

00:42:36,620 --> 00:42:40,370
buy another board and say it has a Mitch

00:42:38,390 --> 00:42:44,630
processor but it has the exact same raw

00:42:40,370 --> 00:42:46,130
raw leaked ethernet by chip on it that

00:42:44,630 --> 00:42:47,930
driver will still can you have to

00:42:46,130 --> 00:42:50,510
recompile it obviously but that driver

00:42:47,930 --> 00:42:55,190
will work on mips the driver interface

00:42:50,510 --> 00:42:57,110
is so well designed or well done that

00:42:55,190 --> 00:42:58,820
it's not as if you have to rewrite all

00:42:57,110 --> 00:43:01,970
your drivers it's not like you look in

00:42:58,820 --> 00:43:03,800
the linux kernel and you find art x86

00:43:01,970 --> 00:43:06,650
and all the drivers and our charm and

00:43:03,800 --> 00:43:09,230
all the drivers you find our charm art

00:43:06,650 --> 00:43:10,730
intel our tips below blah and then you

00:43:09,230 --> 00:43:12,980
find the drivers over here somewhere

00:43:10,730 --> 00:43:15,800
else because the drivers are agnostic to

00:43:12,980 --> 00:43:18,590
platform so that's amazing there aren't

00:43:15,800 --> 00:43:22,970
very many people vendors who can claim

00:43:18,590 --> 00:43:25,460
that and net bsd for decades has said oh

00:43:22,970 --> 00:43:29,930
we run on the most number of processors

00:43:25,460 --> 00:43:31,670
that was true for a while back in 2006

00:43:29,930 --> 00:43:35,810
it wasn't true anymore hasn't been true

00:43:31,670 --> 00:43:36,720
since i honestly don't know of any so if

00:43:35,810 --> 00:43:39,359
you

00:43:36,720 --> 00:43:45,060
base your embedded device on some

00:43:39,359 --> 00:43:47,369
proprietary board or OS and it's running

00:43:45,060 --> 00:43:51,210
on some board and that board goes

00:43:47,369 --> 00:43:54,000
obsolete you have to pray that your

00:43:51,210 --> 00:43:56,070
vendor is going to support whatever you

00:43:54,000 --> 00:43:58,470
move to or what ends up happening of

00:43:56,070 --> 00:43:59,730
course is that you basically wait to see

00:43:58,470 --> 00:44:02,400
what your vendor is going to support

00:43:59,730 --> 00:44:04,830
menu by that which isn't always the best

00:44:02,400 --> 00:44:09,900
linux allows you to move to anything i

00:44:04,830 --> 00:44:12,330
mean it's just but for me it worked i

00:44:09,900 --> 00:44:18,290
can't imagine doing anything differently

00:44:12,330 --> 00:44:21,420
but so some tips if you are the company

00:44:18,290 --> 00:44:24,240
thinking about moving to linux try to

00:44:21,420 --> 00:44:28,040
have at least one linux knowledgeable

00:44:24,240 --> 00:44:28,040
person on the team that might help

00:44:29,480 --> 00:44:35,580
include the software team right at the

00:44:32,369 --> 00:44:39,470
start of your project i interviewed at a

00:44:35,580 --> 00:44:43,230
company many years ago and quite funny

00:44:39,470 --> 00:44:44,910
they they kept harping on my GCC

00:44:43,230 --> 00:44:46,560
experience and I was like yeah I used

00:44:44,910 --> 00:44:48,619
GCC all I've been using it for years I

00:44:46,560 --> 00:44:51,510
know but if you ever ported Linux so a

00:44:48,619 --> 00:44:53,609
GCC tuna have you ever supporters a new

00:44:51,510 --> 00:44:55,710
platform with GCC have you ever you know

00:44:53,609 --> 00:44:57,810
it's like well no it's not I mean

00:44:55,710 --> 00:44:59,010
there's millions of people use GCC but

00:44:57,810 --> 00:45:01,290
there's not a lot of people who really

00:44:59,010 --> 00:45:03,990
have to worry about adding support to a

00:45:01,290 --> 00:45:05,400
new and so I kept asking why that's such

00:45:03,990 --> 00:45:07,830
an odd question why do you keep asking

00:45:05,400 --> 00:45:09,930
that well their Hardware team had spent

00:45:07,830 --> 00:45:12,540
two years deciding what their next

00:45:09,930 --> 00:45:14,339
platform was going to be and after two

00:45:12,540 --> 00:45:17,130
years they said here's our platform

00:45:14,339 --> 00:45:18,750
software team go crazy let's get linux

00:45:17,130 --> 00:45:20,369
running on it and the first thing the

00:45:18,750 --> 00:45:23,070
software team realized is that GCC

00:45:20,369 --> 00:45:25,530
didn't support that SOC south they were

00:45:23,070 --> 00:45:27,570
running around and of course the logical

00:45:25,530 --> 00:45:29,790
thing to do would be to switch to a new

00:45:27,570 --> 00:45:31,170
platform but no they were adamant that

00:45:29,790 --> 00:45:33,720
they weren't going to throw away the two

00:45:31,170 --> 00:45:36,240
years that they had spent researching

00:45:33,720 --> 00:45:38,220
this so it was now up to their software

00:45:36,240 --> 00:45:41,099
team to get the compiler working for

00:45:38,220 --> 00:45:43,260
that so it's important to include if

00:45:41,099 --> 00:45:44,970
you're going to use Linux it's important

00:45:43,260 --> 00:45:45,999
to include the software team from the

00:45:44,970 --> 00:45:48,699
start of the project

00:45:45,999 --> 00:45:50,469
and even for hardware selection it just

00:45:48,699 --> 00:45:51,789
make it so much easier if you're going

00:45:50,469 --> 00:45:55,299
to base your product of something that's

00:45:51,789 --> 00:45:58,119
well supported and try to focus on

00:45:55,299 --> 00:46:03,269
what's important from the products point

00:45:58,119 --> 00:46:05,889
of view so many times people will say oh

00:46:03,269 --> 00:46:07,499
we're not going to use get because it

00:46:05,889 --> 00:46:09,999
doesn't have this one feature that

00:46:07,499 --> 00:46:11,679
perforce has you know where we've been

00:46:09,999 --> 00:46:13,269
using perforce for decades and it's the

00:46:11,679 --> 00:46:15,969
best and it has this amazing feature and

00:46:13,269 --> 00:46:18,219
get doesn't mat so but your product

00:46:15,969 --> 00:46:20,349
doesn't care whether get has some

00:46:18,219 --> 00:46:22,749
feature that perforce doesn't you know

00:46:20,349 --> 00:46:29,079
if your team is happier with get then

00:46:22,749 --> 00:46:33,659
use get Utah tips for you as the

00:46:29,079 --> 00:46:36,609
engineer helping to get to linux going

00:46:33,659 --> 00:46:37,749
change is hard for everyone there are a

00:46:36,609 --> 00:46:41,949
lot of people are not going to be happy

00:46:37,749 --> 00:46:46,239
with change and you know it's important

00:46:41,949 --> 00:46:48,369
to be sensitive to that and try to focus

00:46:46,239 --> 00:46:50,409
on the opportunities you know i started

00:46:48,369 --> 00:46:53,739
my talk with sort of the how do you

00:46:50,409 --> 00:46:55,719
defend linux but i wanted to end on all

00:46:53,739 --> 00:46:58,989
the glorious things that linux gives you

00:46:55,719 --> 00:47:01,269
because if if that's the way that you

00:46:58,989 --> 00:47:04,139
frame your argument then i think people

00:47:01,269 --> 00:47:08,759
are happier that way so i've discovered

00:47:04,139 --> 00:47:11,859
so in conclusion if you can clarify

00:47:08,759 --> 00:47:16,449
legal issues where do you get support

00:47:11,859 --> 00:47:20,769
and the fallacy of real time then that's

00:47:16,449 --> 00:47:23,409
helpful and then advocate if you can

00:47:20,769 --> 00:47:27,149
talk about focusing on your product

00:47:23,409 --> 00:47:27,149
instead of wasting resources

00:47:27,839 --> 00:47:32,799
infrastructure costs the plethora of

00:47:30,279 --> 00:47:35,889
tools that are available and the

00:47:32,799 --> 00:47:38,999
inevitable obsolescence that is just a

00:47:35,889 --> 00:47:43,739
fact of embedded development nowadays i

00:47:38,999 --> 00:47:43,739
think that just helps everything alone

00:47:44,370 --> 00:47:58,000
any questions thank you yeah yeah you

00:47:56,320 --> 00:48:02,040
need someone with clout need someone

00:47:58,000 --> 00:48:02,040
higher it has to be driven from birth

00:48:03,750 --> 00:48:10,390
yep technically savvy yeah yeah he got

00:48:07,840 --> 00:48:16,810
together with the CEO buddies and heard

00:48:10,390 --> 00:48:19,390
the word linux and yeah exactly exactly

00:48:16,810 --> 00:48:21,040
like that you know these CEOs they like

00:48:19,390 --> 00:48:23,280
to get together in Hawaii for their

00:48:21,040 --> 00:48:26,710
annual retreats you know and stuff and

00:48:23,280 --> 00:48:28,420
you know they may not be technical but

00:48:26,710 --> 00:48:31,660
they understand the language of money

00:48:28,420 --> 00:48:33,450
they understand the language of getting

00:48:31,660 --> 00:48:35,440
out there and being successful and

00:48:33,450 --> 00:48:38,560
anything that's going to give them that

00:48:35,440 --> 00:48:41,650
edge to be successful and you know you

00:48:38,560 --> 00:48:44,590
don't get to be CEO and have a company

00:48:41,650 --> 00:48:47,140
that survives for any length of time by

00:48:44,590 --> 00:48:50,530
burying your head in the sand they do

00:48:47,140 --> 00:48:52,480
hear about these things and that's why

00:48:50,530 --> 00:48:54,100
you know that's why we're lucky that

00:48:52,480 --> 00:48:56,230
they hear about these things and they

00:48:54,100 --> 00:48:57,940
say for our next product let's try this

00:48:56,230 --> 00:48:59,770
you know I heard about this thing and

00:48:57,940 --> 00:49:03,220
I've heard some great things about it

00:48:59,770 --> 00:49:05,230
maybe it will work for us you know but

00:49:03,220 --> 00:49:08,850
yeah they're not technical but they're

00:49:05,230 --> 00:49:08,850
not they're not out of it either

00:49:13,880 --> 00:49:18,410

YouTube URL: https://www.youtube.com/watch?v=CyQhUr-0k3o


