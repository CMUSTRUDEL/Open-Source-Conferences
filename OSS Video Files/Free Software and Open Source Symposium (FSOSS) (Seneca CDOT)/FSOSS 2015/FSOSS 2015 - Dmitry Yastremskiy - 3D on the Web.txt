Title: FSOSS 2015 - Dmitry Yastremskiy - 3D on the Web
Publication date: 2015-11-16
Playlist: FSOSS 2015
Description: 
	FSOSS 2015 - Dmitry Yastremskiy - 3D on the Web
Captions: 
	00:00:21,170 --> 00:00:35,940
three day with morning everyone my name

00:00:31,590 --> 00:00:40,860
is Dimitri I sinica graduate and I

00:00:35,940 --> 00:00:45,059
worked also see that where I worked on

00:00:40,860 --> 00:00:47,910
several projects and all of them were

00:00:45,059 --> 00:00:50,579
related to 3d in the browser so I

00:00:47,910 --> 00:00:54,899
thought that I can share you a little

00:00:50,579 --> 00:01:01,620
bit how it looks like how to look how 3d

00:00:54,899 --> 00:01:05,519
looks like in the browser so today we

00:01:01,620 --> 00:01:10,830
will be talking about a brief history of

00:01:05,519 --> 00:01:16,740
3g on the web a little bit i'll show you

00:01:10,830 --> 00:01:21,560
how it works listing the code and i'll

00:01:16,740 --> 00:01:27,619
also show you some libraries well about

00:01:21,560 --> 00:01:27,619
to use and much easier

00:01:27,640 --> 00:01:33,850
the basic way of using 3g in the browser

00:01:31,060 --> 00:01:37,470
and i'll show you code comparisons to

00:01:33,850 --> 00:01:40,930
prove that it's much easier to do and

00:01:37,470 --> 00:01:51,190
the last thing will be some examples oh

00:01:40,930 --> 00:01:56,229
it looks like to start off the very

00:01:51,190 --> 00:02:00,250
first in 3d in the browser was a thing

00:01:56,229 --> 00:02:05,050
called vrml thing stands for virtual

00:02:00,250 --> 00:02:07,990
reality model language was very first

00:02:05,050 --> 00:02:13,980
thing and you need to install a java

00:02:07,990 --> 00:02:19,420
plugin for that and have the limited

00:02:13,980 --> 00:02:25,989
abilities so basically died and then

00:02:19,420 --> 00:02:32,430
took over adobe flash which was for many

00:02:25,989 --> 00:02:35,890
years available and you could use it to

00:02:32,430 --> 00:02:40,660
render 3d graphics in the browser but we

00:02:35,890 --> 00:02:48,070
all know that was resource consuming

00:02:40,660 --> 00:02:51,070
know IG also vulnerable and you had to

00:02:48,070 --> 00:02:57,420
install again plugin in order to use it

00:02:51,070 --> 00:02:57,420
so just recently died as well

00:03:00,380 --> 00:03:09,950
for you my heard of OpenGL it's a

00:03:05,890 --> 00:03:13,750
open-source graphics library that is

00:03:09,950 --> 00:03:17,060
available for desktops for various

00:03:13,750 --> 00:03:22,700
operation systems and this is a library

00:03:17,060 --> 00:03:25,720
that enables you to make graphics on

00:03:22,700 --> 00:03:33,310
your computer using your graphics card

00:03:25,720 --> 00:03:36,770
but when started a smartphone rice they

00:03:33,310 --> 00:03:42,680
realized that they need also to render

00:03:36,770 --> 00:03:49,400
graphics on mobile devices but OpenGL

00:03:42,680 --> 00:03:52,540
was too sophisticated and the hardware

00:03:49,400 --> 00:03:55,820
of mobile devices not as fast and

00:03:52,540 --> 00:03:59,030
performant as on desktops so they had to

00:03:55,820 --> 00:04:02,890
come up with a simpler version of OpenGL

00:03:59,030 --> 00:04:06,710
called OpenGL ES which is stands for

00:04:02,890 --> 00:04:10,040
embedded systems so this is a simpler

00:04:06,710 --> 00:04:14,320
version of OpenGL and this is what they

00:04:10,040 --> 00:04:20,560
use in on Apple devices in iOS or

00:04:14,320 --> 00:04:28,400
Android devices in order to run graphics

00:04:20,560 --> 00:04:33,160
and a later on Mozilla realized that we

00:04:28,400 --> 00:04:35,630
also need to bring bring graphics

00:04:33,160 --> 00:04:39,910
support 3d graphics support in the

00:04:35,630 --> 00:04:43,390
browser and the

00:04:39,910 --> 00:04:47,770
started to do thing called WebGL which

00:04:43,390 --> 00:04:55,690
is essentially OpenGL ES but for the

00:04:47,770 --> 00:04:58,240
browser and why opengl es now the open

00:04:55,690 --> 00:05:00,640
jail because browsers we still have on

00:04:58,240 --> 00:05:02,620
desktops and mobile device we want to

00:05:00,640 --> 00:05:07,620
make sure that everything works

00:05:02,620 --> 00:05:11,530
everywhere exactly the same so WebGL

00:05:07,620 --> 00:05:15,730
became library for browser in order to

00:05:11,530 --> 00:05:18,850
render 3d graphics it I it released in

00:05:15,730 --> 00:05:23,190
2011 have to say at stable version was

00:05:18,850 --> 00:05:33,880
released just 2013 so spray a new

00:05:23,190 --> 00:05:38,560
technology so WebGL is the library that

00:05:33,880 --> 00:05:41,440
basically consists of two parts the part

00:05:38,560 --> 00:05:44,950
that is run on the graphics card and

00:05:41,440 --> 00:05:50,140
there's language used for it called glsl

00:05:44,950 --> 00:05:54,730
it's like c's style language and another

00:05:50,140 --> 00:05:58,600
part is javascript that can talk to that

00:05:54,730 --> 00:06:01,570
portion on on the GPU so JavaScript

00:05:58,600 --> 00:06:04,720
enables you to connect your web page to

00:06:01,570 --> 00:06:08,740
your graphics card basically and as you

00:06:04,720 --> 00:06:13,150
can see a WebGL supported by all the

00:06:08,740 --> 00:06:16,090
browsers started these versions it's

00:06:13,150 --> 00:06:22,030
pretty old screenshot so the Verge's

00:06:16,090 --> 00:06:26,410
gone much farther but IE starting 11

00:06:22,030 --> 00:06:29,110
supports it and all the major browsers

00:06:26,410 --> 00:06:31,060
they all support it so it works just

00:06:29,110 --> 00:06:33,690
right out of the box you don't need to

00:06:31,060 --> 00:06:33,690
install anything

00:06:35,270 --> 00:06:42,660
no no it just 11 started to support it

00:06:39,720 --> 00:06:49,970
not even fully just partially but it was

00:06:42,660 --> 00:06:49,970
already something yes its minimum my 11

00:06:53,360 --> 00:07:01,139
it supports yeah the new 1a edge it's

00:06:57,599 --> 00:07:11,280
all supported it's just what was before

00:07:01,139 --> 00:07:14,729
I 11 does not support it okay so

00:07:11,280 --> 00:07:20,599
basically how it looks like so they the

00:07:14,729 --> 00:07:23,240
idea of WebGL due to for you to a flawed

00:07:20,599 --> 00:07:28,169
graphics computation to a graphics card

00:07:23,240 --> 00:07:31,970
so you can release some computation

00:07:28,169 --> 00:07:35,870
power on your cpu so how it's done

00:07:31,970 --> 00:07:40,280
basically a graphics card understand a

00:07:35,870 --> 00:07:43,440
thing called shader what shader is

00:07:40,280 --> 00:07:47,940
essentially a program just piece of code

00:07:43,440 --> 00:07:51,979
written in glsl language which is which

00:07:47,940 --> 00:07:55,080
looks like sea but it has its own

00:07:51,979 --> 00:07:59,009
prototypes and I mean data types and

00:07:55,080 --> 00:08:05,300
constructors like vector for for example

00:07:59,009 --> 00:08:10,800
but it's a regular C style procedural

00:08:05,300 --> 00:08:16,349
language and the idea is that you can

00:08:10,800 --> 00:08:19,440
have you must always have to two types

00:08:16,349 --> 00:08:21,229
of shaders one is called vertex shader

00:08:19,440 --> 00:08:25,039
another one called fragment shader

00:08:21,229 --> 00:08:28,180
vertex shader is all the dots of the

00:08:25,039 --> 00:08:32,269
figure that you're

00:08:28,180 --> 00:08:34,820
sent to that you'd like to draw those

00:08:32,269 --> 00:08:38,209
are vertices this where you send to this

00:08:34,820 --> 00:08:42,380
portion and fragment shader is basically

00:08:38,209 --> 00:08:45,649
how to color it your figure this is goes

00:08:42,380 --> 00:08:50,950
to a fragment shader so imagine we just

00:08:45,649 --> 00:08:56,829
need to draw one picture one frame and

00:08:50,950 --> 00:08:56,829
in our code in JavaScript we basically

00:08:57,310 --> 00:09:04,339
in grit will say we decide create a

00:09:00,950 --> 00:09:07,100
simple triangle so in our code we just

00:09:04,339 --> 00:09:13,089
piss find basically three dots aight

00:09:07,100 --> 00:09:17,769
i'll just draw ya say we have this

00:09:13,089 --> 00:09:24,300
triangle which will have coordinates 00

00:09:17,769 --> 00:09:28,360
so this is what we want your will be

00:09:24,300 --> 00:09:35,500
01 so basically we pass these three

00:09:28,360 --> 00:09:39,519
coordinate to our vertex shader and it

00:09:35,500 --> 00:09:43,120
knows okay so i can draw a triangle out

00:09:39,519 --> 00:09:45,839
of these three points and basically all

00:09:43,120 --> 00:09:45,839
the sir

00:09:49,050 --> 00:10:11,130
oh sorry yes that is right okay at least

00:10:09,240 --> 00:10:17,220
your nose guy you know guys how it's

00:10:11,130 --> 00:10:20,430
right all right okay so it's not it

00:10:17,220 --> 00:10:22,589
doesn't really matter at this point so

00:10:20,430 --> 00:10:27,600
you send these three points to your

00:10:22,589 --> 00:10:29,790
vertex shader and it knows okay I can

00:10:27,600 --> 00:10:33,300
make a triangle out of it which is

00:10:29,790 --> 00:10:39,209
basically a basic figure that makes all

00:10:33,300 --> 00:10:43,350
kinds of shapes you want and or then it

00:10:39,209 --> 00:10:46,560
goes to the fragment shader and looks

00:10:43,350 --> 00:10:49,230
okay what color we can apply what color

00:10:46,560 --> 00:10:54,000
is specified for this particular figure

00:10:49,230 --> 00:10:56,430
and here for example just a green car so

00:10:54,000 --> 00:11:01,020
it takes this tray and go and pixel by

00:10:56,430 --> 00:11:04,250
pixel or Sarai's it and give it a green

00:11:01,020 --> 00:11:07,110
color or for example we could specify

00:11:04,250 --> 00:11:10,110
color for each vertice so it will be

00:11:07,110 --> 00:11:12,480
interpolated evenly and you have smooth

00:11:10,110 --> 00:11:16,140
transitions of the cars but this is

00:11:12,480 --> 00:11:22,040
basically how it works for just for one

00:11:16,140 --> 00:11:22,040
frame for one draw okay

00:11:23,380 --> 00:11:31,940
and so I have to mention that there is

00:11:29,120 --> 00:11:35,420
two parts the portion that turns on

00:11:31,940 --> 00:11:38,590
graphics card and there is also portion

00:11:35,420 --> 00:11:41,480
that around the CPU which is JavaScript

00:11:38,590 --> 00:11:47,510
and in JavaScript you usually specifying

00:11:41,480 --> 00:11:54,350
shapes and how the animation like

00:11:47,510 --> 00:11:58,190
whatever you want to do with it so for

00:11:54,350 --> 00:12:03,470
example this is will be example in glsl

00:11:58,190 --> 00:12:08,540
out draw a cube and as you can see here

00:12:03,470 --> 00:12:12,770
we give it coordinates for each face of

00:12:08,540 --> 00:12:16,580
the cube so basically this XYZ that so

00:12:12,770 --> 00:12:21,860
and here's four dots or it's basically

00:12:16,580 --> 00:12:28,280
just grabbing this for dot and create

00:12:21,860 --> 00:12:32,930
out of it two triangles this is how we

00:12:28,280 --> 00:12:37,000
can make you but the thing is you can

00:12:32,930 --> 00:12:41,930
see it home how much many lines of code

00:12:37,000 --> 00:12:44,360
requires just to draw a simple cube so

00:12:41,930 --> 00:12:51,770
here we specify vertices and here we

00:12:44,360 --> 00:12:55,040
specify colors but so so you can see

00:12:51,770 --> 00:12:58,340
speak it can be pray tell engine to

00:12:55,040 --> 00:13:02,120
write simple things so people realize

00:12:58,340 --> 00:13:06,590
that and they thought we can probably

00:13:02,120 --> 00:13:09,400
make life easier so there's a lot of

00:13:06,590 --> 00:13:12,620
different graphics libraries came out

00:13:09,400 --> 00:13:19,360
written in JavaScript to help you to

00:13:12,620 --> 00:13:22,360
abstract WebGL and just put it in simple

00:13:19,360 --> 00:13:22,360
functions

00:13:23,160 --> 00:13:33,690
probably the most known will be unity

00:13:28,470 --> 00:13:38,590
where they have their own plug-in to

00:13:33,690 --> 00:13:42,430
export graphics to the browser and also

00:13:38,590 --> 00:13:46,210
Babylon jas which is written by

00:13:42,430 --> 00:13:52,210
Microsoft many other libraries but the

00:13:46,210 --> 00:13:55,960
most popular is it's called 3gs this is

00:13:52,210 --> 00:13:58,000
one that we we're using and this is this

00:13:55,960 --> 00:14:01,240
is the most popular library everybody's

00:13:58,000 --> 00:14:05,320
using it like even Google or Microsoft

00:14:01,240 --> 00:14:10,090
for their demos or many companies used

00:14:05,320 --> 00:14:13,930
already it started in 2010 by Spanish

00:14:10,090 --> 00:14:17,830
geico Ricardo caballo if you remember I

00:14:13,930 --> 00:14:24,520
said that WebGL was released in 2011 but

00:14:17,830 --> 00:14:27,460
this start 2010 this because you you

00:14:24,520 --> 00:14:30,310
were still able to render graphics in

00:14:27,460 --> 00:14:33,940
the browser before WebGL but you would

00:14:30,310 --> 00:14:37,030
use a thing called can canvass render

00:14:33,940 --> 00:14:41,110
which is entirely on cpu and can be

00:14:37,030 --> 00:14:43,390
really a heavy to render but still

00:14:41,110 --> 00:14:45,670
possible but then when WebGL was

00:14:43,390 --> 00:14:48,400
introduced they picked up pretty quickly

00:14:45,670 --> 00:14:53,320
and started to develop things for WebGL

00:14:48,400 --> 00:14:56,590
as well since we pay popular library has

00:14:53,320 --> 00:15:00,240
big community support i think over 600

00:14:56,590 --> 00:15:03,970
contributors has many different

00:15:00,240 --> 00:15:07,140
extensions you can plug things such as

00:15:03,970 --> 00:15:11,050
VR helmet so different controllers

00:15:07,140 --> 00:15:15,120
supports many file formats including all

00:15:11,050 --> 00:15:20,650
the new ones and all the industry

00:15:15,120 --> 00:15:23,520
supports and write plugins for for this

00:15:20,650 --> 00:15:23,520
library as well

00:15:24,320 --> 00:15:32,339
so if we would start to use this

00:15:28,440 --> 00:15:37,529
language this is how much would take to

00:15:32,339 --> 00:15:42,449
write simple cube in 3gs basically you

00:15:37,529 --> 00:15:44,850
just specifying the geometry so here

00:15:42,449 --> 00:15:47,250
which is Boggs geometry when we would

00:15:44,850 --> 00:15:50,130
like to create a shape we need to create

00:15:47,250 --> 00:15:51,870
geometry we need to create material for

00:15:50,130 --> 00:15:55,829
it and combine the two this how we'll

00:15:51,870 --> 00:15:58,050
get the figure so the one line this way

00:15:55,829 --> 00:16:04,529
we specify Germany was saying that we

00:15:58,050 --> 00:16:06,870
won't have cube 200-500 by 200 then the

00:16:04,529 --> 00:16:09,660
next line will say ok we would like to

00:16:06,870 --> 00:16:14,579
use this type of material which is very

00:16:09,660 --> 00:16:17,339
basic material as a red color and then

00:16:14,579 --> 00:16:19,850
we combine the two simply to get this

00:16:17,339 --> 00:16:19,850
cube

00:16:22,080 --> 00:16:32,130
and this is just a couple of seconds

00:16:25,560 --> 00:16:34,410
this is how looks like simple example my

00:16:32,130 --> 00:16:37,290
cheesier to get into actually I start

00:16:34,410 --> 00:16:40,410
when I started to use this library had

00:16:37,290 --> 00:16:43,680
no idea about WebGL how to use it but it

00:16:40,410 --> 00:16:45,330
let me just to develop 3d graphics in

00:16:43,680 --> 00:16:51,000
the browser without knowledge of WebGL

00:16:45,330 --> 00:16:54,900
at all and to go further I wanted to

00:16:51,000 --> 00:16:58,680
give just a little bit of 3d basics so

00:16:54,900 --> 00:17:02,070
in 3d graphics they use Cartesian

00:16:58,680 --> 00:17:07,050
coordinate system which is a house three

00:17:02,070 --> 00:17:12,770
dimension so x y and z i have to mention

00:17:07,050 --> 00:17:16,200
that basically a WebGL or canvas

00:17:12,770 --> 00:17:21,000
wherever you see in the browser it's

00:17:16,200 --> 00:17:24,770
actually all 2d and our job to make make

00:17:21,000 --> 00:17:27,330
it 3g it's kind of illusion or

00:17:24,770 --> 00:17:31,830
perspective that we make so we can see

00:17:27,330 --> 00:17:35,220
things like like 3d but but the fact is

00:17:31,830 --> 00:17:38,120
is actually study picture so in order to

00:17:35,220 --> 00:17:43,920
make things 3d they introduce the third

00:17:38,120 --> 00:17:49,500
axis for example Z and this particular

00:17:43,920 --> 00:17:53,850
picture the directions of ax is not the

00:17:49,500 --> 00:17:57,290
most common way usually why is up by

00:17:53,850 --> 00:17:57,290
anyways there's three axis

00:18:00,389 --> 00:18:10,090
so what do we need in order to create

00:18:05,940 --> 00:18:12,970
some graphics in the browser first of

00:18:10,090 --> 00:18:16,450
all it will be a scene where we have all

00:18:12,970 --> 00:18:21,580
the objects where they all located so

00:18:16,450 --> 00:18:26,789
it's online you create scene we have

00:18:21,580 --> 00:18:30,519
seen now it can place their some camera

00:18:26,789 --> 00:18:32,529
because we actually need to see what is

00:18:30,519 --> 00:18:36,879
going on the scene even though

00:18:32,529 --> 00:18:39,759
technically we're supposed to see it

00:18:36,879 --> 00:18:44,679
without camera but what like what camera

00:18:39,759 --> 00:18:48,850
does you can constrain your viewport so

00:18:44,679 --> 00:18:55,870
when you instantiate camera use is fine

00:18:48,850 --> 00:18:59,590
the near plan playing far plane and this

00:18:55,870 --> 00:19:02,409
is will be your frost own where you can

00:18:59,590 --> 00:19:05,169
see things so even though your scene can

00:19:02,409 --> 00:19:07,539
be much much bigger you can constrain

00:19:05,169 --> 00:19:11,740
your camera to see just this particular

00:19:07,539 --> 00:19:13,690
part and there's two types of cameras

00:19:11,740 --> 00:19:16,659
available perspective camera the

00:19:13,690 --> 00:19:19,600
traditional one and our graphic camera

00:19:16,659 --> 00:19:23,080
which is more like four maps or strategy

00:19:19,600 --> 00:19:26,909
games example again very easy to

00:19:23,080 --> 00:19:26,909
instantiate camera just one why

00:19:28,960 --> 00:19:39,470
then we need to add some objects to our

00:19:32,269 --> 00:19:41,809
scene so let's add a cube first of all

00:19:39,470 --> 00:19:45,739
we specify in geometry we would like to

00:19:41,809 --> 00:19:49,489
have a box size one by one by one then

00:19:45,739 --> 00:19:52,999
we need to give it some look material

00:19:49,489 --> 00:19:55,389
here in this case you can give it some

00:19:52,999 --> 00:19:59,330
color or you can add the texture to it

00:19:55,389 --> 00:20:04,279
very easy to do as well just one line

00:19:59,330 --> 00:20:07,220
where you specify path to a picture and

00:20:04,279 --> 00:20:12,649
then you combine geometry and material

00:20:07,220 --> 00:20:18,279
and here we go you have your cube three

00:20:12,649 --> 00:20:22,129
lines of code and then also we need to

00:20:18,279 --> 00:20:24,460
give some light to our sin like we're

00:20:22,129 --> 00:20:30,679
trying to enter you guys to trying to

00:20:24,460 --> 00:20:32,690
mimic reality in and reality at night

00:20:30,679 --> 00:20:34,669
you can't really see objects right in

00:20:32,690 --> 00:20:38,109
some light to see objects here is

00:20:34,669 --> 00:20:42,259
exactly the same story all the materials

00:20:38,109 --> 00:20:44,409
they react on the light so if there is

00:20:42,259 --> 00:20:49,749
no light you won't see anything and

00:20:44,409 --> 00:20:54,710
again how you instantiate white one wine

00:20:49,749 --> 00:20:57,309
and this is you just position it and add

00:20:54,710 --> 00:20:57,309
to the scene

00:20:58,610 --> 00:21:04,200
so so far we were talking about

00:21:01,740 --> 00:21:11,880
basically about one adore call or one

00:21:04,200 --> 00:21:14,160
frame just do some your picture ones but

00:21:11,880 --> 00:21:19,679
what if what if you would like to

00:21:14,160 --> 00:21:22,700
animate your scene so you want to see

00:21:19,679 --> 00:21:26,010
things are dating maybe interact with it

00:21:22,700 --> 00:21:28,260
how you how you can do it basically you

00:21:26,010 --> 00:21:32,190
just draw this picture again and again

00:21:28,260 --> 00:21:34,919
and again and the ideal frame rate if

00:21:32,190 --> 00:21:36,990
you draw it was around 60 times per

00:21:34,919 --> 00:21:42,450
second this is the smoothest picture you

00:21:36,990 --> 00:21:45,780
can get but the and this is how it's

00:21:42,450 --> 00:21:51,020
done you just basically make a recursive

00:21:45,780 --> 00:21:54,510
call of the your animate function but

00:21:51,020 --> 00:21:57,690
our computers very fast today and if you

00:21:54,510 --> 00:22:01,500
just simply execute a recursive function

00:21:57,690 --> 00:22:04,289
it will be executed many many times per

00:22:01,500 --> 00:22:06,390
second which would say thousands of

00:22:04,289 --> 00:22:10,010
times per second and would be basically

00:22:06,390 --> 00:22:15,830
overflow will be very difficult to

00:22:10,010 --> 00:22:20,090
proceed for a computer so browsers

00:22:15,830 --> 00:22:22,500
developers they came up with the API of

00:22:20,090 --> 00:22:26,130
function called request animation frame

00:22:22,500 --> 00:22:29,070
which basically controls the frame rate

00:22:26,130 --> 00:22:32,370
and if your computer is a little bit too

00:22:29,070 --> 00:22:35,780
slow it will drop the frame rate if it's

00:22:32,370 --> 00:22:39,570
fast it will try to and breeze it but

00:22:35,780 --> 00:22:41,250
the purpose of dysfunction is to make

00:22:39,570 --> 00:22:44,820
sure that your computer is not going

00:22:41,250 --> 00:22:50,669
crazy and renders the graphic as smooth

00:22:44,820 --> 00:22:54,659
as possible so it was really convenient

00:22:50,669 --> 00:22:57,330
to use and also another beauty with if

00:22:54,659 --> 00:22:59,269
you switch to another tab everything the

00:22:57,330 --> 00:23:03,570
graphic gets past so it doesn't consume

00:22:59,269 --> 00:23:06,029
your battery or computation power so

00:23:03,570 --> 00:23:10,109
this is how you animate something you

00:23:06,029 --> 00:23:13,259
just recursively call animation function

00:23:10,109 --> 00:23:18,210
and you in this function you can specify

00:23:13,259 --> 00:23:20,299
all the not the movements you would like

00:23:18,210 --> 00:23:25,980
for example you can you would like to

00:23:20,299 --> 00:23:31,320
see your cube rotate so you basically

00:23:25,980 --> 00:23:35,220
add all your animation here and the

00:23:31,320 --> 00:23:37,950
another essential thing for 3d graphics

00:23:35,220 --> 00:23:39,840
not only in the browser it's used in all

00:23:37,950 --> 00:23:42,840
2d graphics basically how you can

00:23:39,840 --> 00:23:45,059
interact with it because so far we just

00:23:42,840 --> 00:23:49,980
saw things but we couldn't really touch

00:23:45,059 --> 00:23:55,350
it so the way how you can distinguish

00:23:49,980 --> 00:24:01,519
objects was a drop technology called the

00:23:55,350 --> 00:24:08,309
ray Kasten it's a relatively simple and

00:24:01,519 --> 00:24:10,859
how it's done basically ray shoots from

00:24:08,309 --> 00:24:14,369
certain point point towards your objects

00:24:10,859 --> 00:24:17,609
and if the tray intersects your object

00:24:14,369 --> 00:24:21,330
the the information gets returned about

00:24:17,609 --> 00:24:27,350
that object so for example you cut your

00:24:21,330 --> 00:24:31,830
mouth you click in on on your cube

00:24:27,350 --> 00:24:35,549
behind the scenes it takes the point

00:24:31,830 --> 00:24:38,480
where you clicked and shoot ray would

00:24:35,549 --> 00:24:41,820
say into the center of the scene if

00:24:38,480 --> 00:24:44,100
intersection happened you get back

00:24:41,820 --> 00:24:46,799
information about the object then you

00:24:44,100 --> 00:24:53,149
can manipulate with it it's very simple

00:24:46,799 --> 00:24:57,389
and enables you to interact with objects

00:24:53,149 --> 00:24:58,620
so talking about all those previous

00:24:57,389 --> 00:25:01,740
things

00:24:58,620 --> 00:25:07,770
this would be the result so this is our

00:25:01,740 --> 00:25:11,490
scene and we added camera so we can see

00:25:07,770 --> 00:25:16,350
just this small portion of the scene so

00:25:11,490 --> 00:25:20,010
we added our object and we added some

00:25:16,350 --> 00:25:27,890
light so you can see actually shadow

00:25:20,010 --> 00:25:32,220
here and I can animate it this is done

00:25:27,890 --> 00:25:36,630
by calling the recursively that animate

00:25:32,220 --> 00:25:39,050
loop and the lasting the ray Kasten this

00:25:36,630 --> 00:25:42,260
is how it works so basically you just

00:25:39,050 --> 00:25:45,929
you can interact with the subjects

00:25:42,260 --> 00:25:48,900
because it was an intersection of the

00:25:45,929 --> 00:25:57,330
object was detected and now we know now

00:25:48,900 --> 00:25:59,520
that we can interact with it and another

00:25:57,330 --> 00:26:02,400
thing that they wanted to show as I

00:25:59,520 --> 00:26:06,270
mentioned that we don't really see

00:26:02,400 --> 00:26:09,090
objects at night so here's just the same

00:26:06,270 --> 00:26:13,790
story if I turn off the light oh sorry

00:26:09,090 --> 00:26:13,790
just jump to the next page

00:26:14,740 --> 00:26:21,920
so if we turn out the life we can see

00:26:17,360 --> 00:26:23,900
anything once we add light you see so

00:26:21,920 --> 00:26:25,850
this important thing to know because

00:26:23,900 --> 00:26:28,550
sometimes people when they just start

00:26:25,850 --> 00:26:30,230
the the add objects to the scene but

00:26:28,550 --> 00:26:33,560
they can't see anything and be panic

00:26:30,230 --> 00:26:41,240
where is it I can so don't forget about

00:26:33,560 --> 00:26:44,420
white people done a lot a lot of cool

00:26:41,240 --> 00:26:47,180
stuff with with this team and this way i

00:26:44,420 --> 00:26:51,980
want to show you just quickly its pretty

00:26:47,180 --> 00:26:56,570
long demo but this is a coding in real

00:26:51,980 --> 00:27:04,820
time in virtual reality so well was used

00:26:56,570 --> 00:27:08,030
oculus rift helmet and Mozilla Firefox

00:27:04,820 --> 00:27:12,440
version of the browser that supports we

00:27:08,030 --> 00:27:17,510
r & 3gs basically to build this scene

00:27:12,440 --> 00:27:23,330
and while what person's doing here he he

00:27:17,510 --> 00:27:29,630
writes TGS code to see things in this

00:27:23,330 --> 00:27:34,280
industry in this virtual reality looks

00:27:29,630 --> 00:27:36,710
really amazing but the point is so it

00:27:34,280 --> 00:27:40,400
supports 3gs libraries for so many

00:27:36,710 --> 00:27:45,650
things so you can easily hook up now NVR

00:27:40,400 --> 00:27:47,660
device and and use it or different

00:27:45,650 --> 00:27:51,830
controller such as leap motion for

00:27:47,660 --> 00:27:55,330
example and I'll just

00:27:51,830 --> 00:27:55,330
for a bit

00:27:58,600 --> 00:28:01,890
Mansu in here

00:28:03,490 --> 00:28:09,529
so this is how you can see here the

00:28:06,710 --> 00:28:14,000
person writes called real time and you

00:28:09,529 --> 00:28:17,980
can see the result real time as well but

00:28:14,000 --> 00:28:17,980
this was easily done just in the browser

00:28:24,990 --> 00:28:36,220
ok so I wanted to show you some examples

00:28:30,720 --> 00:28:40,030
how it was a use different it I worked

00:28:36,220 --> 00:28:43,150
at see that and the last project I

00:28:40,030 --> 00:28:53,400
worked on was a data visualization tool

00:28:43,150 --> 00:28:58,770
and we used 3gs to build it so this is a

00:28:53,400 --> 00:29:04,630
data visualization tool where you can

00:28:58,770 --> 00:29:09,880
bring your own data set and visualize it

00:29:04,630 --> 00:29:13,360
so it will make things more more

00:29:09,880 --> 00:29:16,720
appealing so for example we have a data

00:29:13,360 --> 00:29:21,250
set of earthquake happened over just two

00:29:16,720 --> 00:29:27,910
month around the world and you can see

00:29:21,250 --> 00:29:31,360
there's many many earthquakes happen or

00:29:27,910 --> 00:29:33,970
for example you can choose another team

00:29:31,360 --> 00:29:40,930
played this is basically another example

00:29:33,970 --> 00:29:47,130
I we have some currencies over a period

00:29:40,930 --> 00:29:50,770
of time and you can compare them and see

00:29:47,130 --> 00:29:54,370
do some analytics basically but so the

00:29:50,770 --> 00:29:59,770
all the 3d graphics was done using 3gs

00:29:54,370 --> 00:30:03,610
and here you can also upload your local

00:29:59,770 --> 00:30:06,790
files or you can provide google

00:30:03,610 --> 00:30:10,230
spreadsheet or even use box if your box

00:30:06,790 --> 00:30:13,200
user and fetch stuff from there so

00:30:10,230 --> 00:30:16,960
different ways to upload data and

00:30:13,200 --> 00:30:20,650
visualize it so this this is a project

00:30:16,960 --> 00:30:21,549
we worked one working on at CDOT and

00:30:20,650 --> 00:30:26,739
there

00:30:21,549 --> 00:30:30,929
leadership of katie is here another

00:30:26,739 --> 00:30:30,929
example that i would like to show you

00:30:32,759 --> 00:30:35,940
get it

00:30:40,100 --> 00:30:42,850
sorry

00:30:44,590 --> 00:30:51,990
it's company called we're all is this

00:30:48,490 --> 00:30:55,929
Canadian company it was located in

00:30:51,990 --> 00:30:58,720
Toronto now they got acquired by company

00:30:55,929 --> 00:31:02,230
called box Silicon Valley company and

00:30:58,720 --> 00:31:05,380
they all moved to Silicon Valley but it

00:31:02,230 --> 00:31:08,110
is a Canadian company and they used 3gs

00:31:05,380 --> 00:31:15,270
to build their things as well so this is

00:31:08,110 --> 00:31:21,580
a online editor which basically allows

00:31:15,270 --> 00:31:26,340
you to do interactive 3d presentations

00:31:21,580 --> 00:31:29,890
for different campaigns for example and

00:31:26,340 --> 00:31:32,770
you can share it you can collaborate

00:31:29,890 --> 00:31:37,210
with some other people so it's really a

00:31:32,770 --> 00:31:39,990
powerful tool tool which is available

00:31:37,210 --> 00:31:39,990
online

00:31:43,450 --> 00:31:53,679
and it was a used 3gs to build a such

00:31:47,860 --> 00:31:57,309
thing these guys actually were all

00:31:53,679 --> 00:31:59,559
company were partners for the project

00:31:57,309 --> 00:32:03,580
for the previous project I just show you

00:31:59,559 --> 00:32:08,500
for the visualization tool and the last

00:32:03,580 --> 00:32:12,429
one project like to show which also used

00:32:08,500 --> 00:32:18,909
3gs and it's also Canadian company and

00:32:12,429 --> 00:32:24,309
the prototype was built at CDOT so this

00:32:18,909 --> 00:32:26,230
is really cool 3d online editor as well

00:32:24,309 --> 00:32:31,659
but it's much more sophisticated than

00:32:26,230 --> 00:32:34,980
the previous one here you can do

00:32:31,659 --> 00:32:39,519
basically whatever allows you to do

00:32:34,980 --> 00:32:42,549
desktop software and you can export

00:32:39,519 --> 00:32:49,750
import things that's very cool and

00:32:42,549 --> 00:32:51,669
really sophisticated so these are

00:32:49,750 --> 00:32:54,220
examples that I wanted to show there is

00:32:51,669 --> 00:32:58,029
many many examples of line different

00:32:54,220 --> 00:33:01,149
games presentations people use it for

00:32:58,029 --> 00:33:06,299
many many things if you would like to

00:33:01,149 --> 00:33:08,710
see you go the website T 3gs dollar work

00:33:06,299 --> 00:33:14,289
you will be surprised how many great

00:33:08,710 --> 00:33:16,570
examples are there and this is basically

00:33:14,289 --> 00:33:18,250
concludes my presentation if you would

00:33:16,570 --> 00:33:22,919
like to see slides they're available

00:33:18,250 --> 00:33:27,519
online this is a relatively short link

00:33:22,919 --> 00:33:30,700
should be able to write it down and if

00:33:27,519 --> 00:33:33,389
you guys have any questions I'll happy

00:33:30,700 --> 00:33:33,389
to answer them

00:33:47,880 --> 00:33:54,880
well yeah it's it's like it's it it's

00:33:52,630 --> 00:33:57,010
little bit different things so I'm

00:33:54,880 --> 00:33:59,370
pretty sure you can integrate all were

00:33:57,010 --> 00:34:04,630
you need basically it's just a browser

00:33:59,370 --> 00:34:07,800
so it depends how your project works as

00:34:04,630 --> 00:34:18,750
long as you run things in the browser

00:34:07,800 --> 00:34:22,000
you can use it well in my understanding

00:34:18,750 --> 00:34:26,980
the were you talking about it serves the

00:34:22,000 --> 00:34:29,620
things from the server side right so you

00:34:26,980 --> 00:34:32,170
can use it you know to serve even code

00:34:29,620 --> 00:34:34,510
for this thing but so but the end point

00:34:32,170 --> 00:34:36,340
it has to be run in the browser not

00:34:34,510 --> 00:34:39,010
quite sure how you can combine this

00:34:36,340 --> 00:34:40,870
thing but I'm pretty sure it should be

00:34:39,010 --> 00:34:43,710
not a problem because it's like two

00:34:40,870 --> 00:34:43,710
separate things

00:34:52,490 --> 00:34:55,270
animation

00:34:55,379 --> 00:35:12,029
because now I can see the edges sure so

00:35:09,089 --> 00:35:17,039
about those edges and things you can use

00:35:12,029 --> 00:35:21,809
anti a lesson so you can small edges so

00:35:17,039 --> 00:35:25,890
it will be costly for performance but

00:35:21,809 --> 00:35:28,769
will look nicer how you optimize things

00:35:25,890 --> 00:35:32,849
well you try to put as less as possible

00:35:28,769 --> 00:35:34,740
into your animation loop because this is

00:35:32,849 --> 00:35:39,420
where it gets heavy when you put too

00:35:34,740 --> 00:35:44,299
much stuff to animate if you would like

00:35:39,420 --> 00:35:48,599
to really optimize things 3gs supports

00:35:44,299 --> 00:35:51,720
shaders I was talking about in the start

00:35:48,599 --> 00:35:55,799
of the presentation so shaders since

00:35:51,720 --> 00:35:57,869
they running on the graphics card your

00:35:55,799 --> 00:36:02,630
job is to put as much as you can to the

00:35:57,869 --> 00:36:08,299
shaders because imagine we have

00:36:02,630 --> 00:36:12,450
processors 248 course but graphics card

00:36:08,299 --> 00:36:15,349
they actually have thousands of course

00:36:12,450 --> 00:36:19,470
and they can run those shaders

00:36:15,349 --> 00:36:22,200
simultaneously so if you wanna optimize

00:36:19,470 --> 00:36:26,460
things you just try to write your own

00:36:22,200 --> 00:36:29,160
shaders but 3gs constantly like the guys

00:36:26,460 --> 00:36:31,730
who developing things for 3gs they

00:36:29,160 --> 00:36:36,890
constantly working on optimizations and

00:36:31,730 --> 00:36:42,210
there are become many methods available

00:36:36,890 --> 00:36:46,829
to offload computation to a graphic card

00:36:42,210 --> 00:36:49,920
without even knowing WebGL so two ways

00:36:46,829 --> 00:36:53,339
you either learn glsl and flawed things

00:36:49,920 --> 00:36:57,109
to shader or you wait until methods will

00:36:53,339 --> 00:36:57,109
be developed how to do it easier

00:36:58,760 --> 00:37:10,370
okay yeah just open your lines of

00:37:06,030 --> 00:37:10,370
cordless sample the carbonates and

00:37:12,849 --> 00:37:17,279
and other like

00:37:26,890 --> 00:37:36,799
well so the deer like a reputation cube

00:37:31,969 --> 00:37:38,719
the one that is a at the end not

00:37:36,799 --> 00:37:42,140
question how many lines there but let's

00:37:38,719 --> 00:37:47,689
say minimum 10 times less than if you

00:37:42,140 --> 00:37:50,479
write just yourself for WebGL and for

00:37:47,689 --> 00:37:52,609
example to rotate cube in 3gs you you

00:37:50,479 --> 00:37:55,219
just in your animation loop specifying

00:37:52,609 --> 00:37:58,669
that it will be rotation around this

00:37:55,219 --> 00:38:04,759
axis and how much to rotate it's one

00:37:58,669 --> 00:38:09,469
line in WebGL you will have to write a

00:38:04,759 --> 00:38:13,729
formula that would calculate for each

00:38:09,469 --> 00:38:18,099
vertex will calculate the position in

00:38:13,729 --> 00:38:21,319
the in the air so for each frame all the

00:38:18,099 --> 00:38:24,529
all the points will be calculated frame

00:38:21,319 --> 00:38:28,429
by frame so this is basically the

00:38:24,529 --> 00:38:31,969
difference that you have to you have to

00:38:28,429 --> 00:38:34,939
do everything manually and put some

00:38:31,969 --> 00:38:39,349
formulas in order just to simply related

00:38:34,939 --> 00:38:42,909
whereas 3gs requires your one line if I

00:38:39,349 --> 00:38:42,909
answer your question

00:38:47,150 --> 00:38:55,250
I'm sorry good i canna say it again oh

00:38:57,140 --> 00:39:06,720
well oh icic in the online editor you

00:39:01,530 --> 00:39:09,360
mean well that this is what the tool for

00:39:06,720 --> 00:39:13,350
online edges are written it allows you

00:39:09,360 --> 00:39:15,570
just to use a preset figures or you can

00:39:13,350 --> 00:39:22,290
even manipulate them you can stretch

00:39:15,570 --> 00:39:24,450
them scale up or add something to you

00:39:22,290 --> 00:39:27,930
can combine meshes so you just do it

00:39:24,450 --> 00:39:31,560
like and like you're in Photoshop doing

00:39:27,930 --> 00:39:33,960
something so it's mai-chi you don't have

00:39:31,560 --> 00:39:36,180
to write any code for that you just use

00:39:33,960 --> 00:39:39,120
your mouse if I click like you would

00:39:36,180 --> 00:39:43,380
draw something in a regular program it's

00:39:39,120 --> 00:39:46,860
just online editor so the deer was made

00:39:43,380 --> 00:39:52,770
in either online editor or maybe desktop

00:39:46,860 --> 00:39:59,370
graphics editor but it's and it wasn't

00:39:52,770 --> 00:40:02,640
written just in points oh yeah it's very

00:39:59,370 --> 00:40:05,700
completely you will get lost see them to

00:40:02,640 --> 00:40:07,230
draw a sphere its initial is very

00:40:05,700 --> 00:40:10,890
complicated and not even talking about

00:40:07,230 --> 00:40:12,780
dears but then there is on the internet

00:40:10,890 --> 00:40:15,210
there are so many models already built

00:40:12,780 --> 00:40:18,950
available for you you just grab them use

00:40:15,210 --> 00:40:18,950
do all something out of it

00:40:24,819 --> 00:40:33,950
unity for example yes yes exactly it's a

00:40:30,619 --> 00:40:37,369
very simple process so you can go Claire

00:40:33,950 --> 00:40:41,119
I or and dry it yourself just to create

00:40:37,369 --> 00:40:43,720
a cube stretch out make ice word out

00:40:41,119 --> 00:40:48,099
with or something it's very easy just

00:40:43,720 --> 00:40:48,099
check out playa del año

00:40:50,770 --> 00:40:53,610
so much

00:40:54,660 --> 00:40:56,660
Oh

00:40:58,760 --> 00:41:07,490
well it's getting there you can see more

00:41:03,590 --> 00:41:10,700
and more this is because WebGL is pretty

00:41:07,490 --> 00:41:17,420
new thing they just was stable release

00:41:10,700 --> 00:41:19,130
2013 and disparate my sheet so the

00:41:17,420 --> 00:41:21,770
people were weighted to support of all

00:41:19,130 --> 00:41:27,290
the browsers so in iOS they start to

00:41:21,770 --> 00:41:30,220
support from my OS 8 18 and so it

00:41:27,290 --> 00:41:34,730
happened there just basically one year

00:41:30,220 --> 00:41:37,550
it became popular that's why it's not so

00:41:34,730 --> 00:41:43,280
you because here but it is actually if

00:41:37,550 --> 00:41:46,010
you google apps built using 3gs there

00:41:43,280 --> 00:41:49,010
will be many and many of them sometimes

00:41:46,010 --> 00:41:52,460
it's just not obvious but people just

00:41:49,010 --> 00:41:55,250
even put some little 3d things on their

00:41:52,460 --> 00:41:57,500
website just to make it look nice that's

00:41:55,250 --> 00:42:00,590
if there is no in purpose for it so if

00:41:57,500 --> 00:42:06,680
you see something 3g most likely it's

00:42:00,590 --> 00:42:10,730
done by 3gs but yeah it's it it's taken

00:42:06,680 --> 00:42:16,240
over you will see more and more things

00:42:10,730 --> 00:42:16,240
in the in the browser 3d

00:42:27,800 --> 00:42:47,330
we have very simple it depends if you

00:42:44,330 --> 00:42:50,840
for example are in a model that it will

00:42:47,330 --> 00:42:55,700
take time it depends on the format if

00:42:50,840 --> 00:43:01,070
you build if you have all your shapes in

00:42:55,700 --> 00:43:05,720
the code it will be much faster if you

00:43:01,070 --> 00:43:08,060
even have coordinates for your figure it

00:43:05,720 --> 00:43:11,000
will be even faster so it depends how it

00:43:08,060 --> 00:43:13,700
was written and there isn't many

00:43:11,000 --> 00:43:16,880
examples in different us use others

00:43:13,700 --> 00:43:19,040
sophisticated online editors their run

00:43:16,880 --> 00:43:21,920
pretty smoothly in the browser so it's

00:43:19,040 --> 00:43:25,960
only it depends how the code is written

00:43:21,920 --> 00:43:34,800
there is not much troubles with the

00:43:25,960 --> 00:43:38,110
performance there are some formats

00:43:34,800 --> 00:43:40,720
available there are pretty compressed

00:43:38,110 --> 00:43:47,620
like the new one was just released

00:43:40,720 --> 00:43:52,260
called GL TF this is a next version I

00:43:47,620 --> 00:43:52,260
mean this is from the others of colada

00:43:52,290 --> 00:44:04,030
format but this format has most of the

00:44:00,600 --> 00:44:07,800
model is in binary format so it can be

00:44:04,030 --> 00:44:12,190
loaded to faster to the system and also

00:44:07,800 --> 00:44:16,810
the hierarchy an old metadata is stored

00:44:12,190 --> 00:44:19,420
in JSON which is also very fast because

00:44:16,810 --> 00:44:22,420
its native format for JavaScript whereas

00:44:19,420 --> 00:44:27,460
for example colada is used to is a xml

00:44:22,420 --> 00:44:30,100
format and parsing really takes time so

00:44:27,460 --> 00:44:33,220
you just need to look into the formats

00:44:30,100 --> 00:44:35,440
and the the most promising is GL tf2

00:44:33,220 --> 00:44:40,870
just supports it all the you know

00:44:35,440 --> 00:44:47,040
importers exporters available so it's a

00:44:40,870 --> 00:44:50,070
really good format together yes please

00:44:47,040 --> 00:44:53,860
so where do you hide so where do you

00:44:50,070 --> 00:45:00,430
think about freedom lives

00:44:53,860 --> 00:45:03,100
oh absolutely I think all the software

00:45:00,430 --> 00:45:05,140
is moving to the browser as you can see

00:45:03,100 --> 00:45:07,300
our application getting more

00:45:05,140 --> 00:45:10,900
sophisticated and there will be more and

00:45:07,300 --> 00:45:14,740
more use of 3d special especially in

00:45:10,900 --> 00:45:16,720
virtual reality there will be many

00:45:14,740 --> 00:45:19,810
things well ball through the browser

00:45:16,720 --> 00:45:26,470
just easier to deliver the only problem

00:45:19,810 --> 00:45:29,170
is so far that the code and the models

00:45:26,470 --> 00:45:31,660
the weight and insert the size of it is

00:45:29,170 --> 00:45:35,620
too big so you just have to wait until

00:45:31,660 --> 00:45:38,290
it's all audit but there there is also

00:45:35,620 --> 00:45:40,720
new formats get developed where they're

00:45:38,290 --> 00:45:43,000
insanely binaries format which can be

00:45:40,720 --> 00:45:46,240
loaded much faster to the system so all

00:45:43,000 --> 00:45:49,600
the industries moving towards browsers

00:45:46,240 --> 00:45:54,940
browsers anyways and 3d graphics it

00:45:49,600 --> 00:45:57,480
would be like a huge part of it my

00:45:54,940 --> 00:45:57,480
opinion

00:45:58,360 --> 00:46:02,910
guys any other questions

00:46:07,810 --> 00:46:11,790
I'm sure how to debug it

00:46:18,030 --> 00:46:29,380
well too it's easy to debug it because

00:46:26,080 --> 00:46:38,010
3gs is pure JavaScript and they make

00:46:29,380 --> 00:46:42,520
sure well there are some tools available

00:46:38,010 --> 00:46:45,840
for for Chrome browser to debug WebGL

00:46:42,520 --> 00:46:52,290
particularly if you want to go that deep

00:46:45,840 --> 00:46:55,720
you can you can debug even WebGL but the

00:46:52,290 --> 00:46:57,430
3gs guys doing good job making sure that

00:46:55,720 --> 00:47:00,250
you don't have to deal with it so

00:46:57,430 --> 00:47:02,170
everything works as expected so if you

00:47:00,250 --> 00:47:05,410
would like to debug something you'll

00:47:02,170 --> 00:47:15,550
probably debug your own code in WebGL

00:47:05,410 --> 00:47:20,110
Ireland and 3gs yes it's pretty

00:47:15,550 --> 00:47:23,560
difficult to debug because this is not

00:47:20,110 --> 00:47:26,920
native format for browser it still gives

00:47:23,560 --> 00:47:30,070
you some error messages so you can see

00:47:26,920 --> 00:47:34,440
which line gives you troubles and even

00:47:30,070 --> 00:47:40,950
some hints but it's not as a powerful as

00:47:34,440 --> 00:47:44,590
chrome devtools but I already saw some

00:47:40,950 --> 00:47:48,910
shader debuggers that make things much

00:47:44,590 --> 00:47:51,210
easier to the back so some problem

00:47:48,910 --> 00:47:51,210
anymore

00:47:52,700 --> 00:48:13,400
oh well I'm yes I'm Michelle you done so

00:47:56,990 --> 00:48:16,700
thank you guys for visiting presenters

00:48:13,400 --> 00:48:19,480
for the smokage so I think I get to do

00:48:16,700 --> 00:48:19,480

YouTube URL: https://www.youtube.com/watch?v=H05o-ORi9Ug


