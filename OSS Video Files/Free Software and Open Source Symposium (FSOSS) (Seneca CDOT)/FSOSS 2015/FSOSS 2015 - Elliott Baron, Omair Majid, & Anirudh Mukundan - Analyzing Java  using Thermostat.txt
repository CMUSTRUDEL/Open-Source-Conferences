Title: FSOSS 2015 - Elliott Baron, Omair Majid, & Anirudh Mukundan - Analyzing Java  using Thermostat
Publication date: 2015-11-16
Playlist: FSOSS 2015
Description: 
	FSOSS 2015 - Elliott Baron, Omair Majid, & Anirudh Mukundan - Analyzing Java Applications using Thermostat
Captions: 
	00:00:00,000 --> 00:00:06,150
Marty welcome to day two of that sauce

00:00:03,290 --> 00:00:10,320
my name is mike martin i'm a chocolatier

00:00:06,150 --> 00:00:11,730
auctioneers school of ICT and this

00:00:10,320 --> 00:00:14,400
morning we're going to be talking about

00:00:11,730 --> 00:00:17,460
analyzing java applications using

00:00:14,400 --> 00:00:19,980
thermostat by three gentlemen some red

00:00:17,460 --> 00:00:24,859
hat and that would be Elliot Karen old

00:00:19,980 --> 00:00:24,859
mare Omar so the old air Reggie and any

00:00:34,190 --> 00:00:41,550
good morning everyone thank you for

00:00:37,050 --> 00:00:45,960
coming today so what is thermostat

00:00:41,550 --> 00:00:49,710
thermoset patient tool for hotspot JVM

00:00:45,960 --> 00:00:52,850
so it's a so we wanted a program that

00:00:49,710 --> 00:00:56,010
can that users can use to monitor their

00:00:52,850 --> 00:01:00,780
their their JVMs when they're running

00:00:56,010 --> 00:01:02,699
openjdk a thermostat can can monitor

00:01:00,780 --> 00:01:05,909
multiple JVMs running across multiple

00:01:02,699 --> 00:01:08,880
different hosts it has a plug-in

00:01:05,909 --> 00:01:10,530
architecture so in fact most of the

00:01:08,880 --> 00:01:18,600
built-in functionality or actually

00:01:10,530 --> 00:01:20,549
plugins the so our goal was for users to

00:01:18,600 --> 00:01:25,830
be able to add their own functionality

00:01:20,549 --> 00:01:29,100
to thermostat and make use of what the

00:01:25,830 --> 00:01:30,630
data that thermoset can collect will be

00:01:29,100 --> 00:01:34,860
going into this in a little more detail

00:01:30,630 --> 00:01:37,049
later on thermostat has a the client the

00:01:34,860 --> 00:01:40,200
thermostat client has a command line and

00:01:37,049 --> 00:01:43,320
a graphical user interface and we'll be

00:01:40,200 --> 00:01:45,930
showing that off during our demo and of

00:01:43,320 --> 00:01:48,210
course it's open source it's actually

00:01:45,930 --> 00:01:51,530
under the same license as openjdk so if

00:01:48,210 --> 00:01:57,119
your company or application is using

00:01:51,530 --> 00:01:59,369
openjdk then you can use thermostat okay

00:01:57,119 --> 00:02:01,790
so now i'm going to talk a little bit

00:01:59,369 --> 00:02:04,120
about what you can do with herbicide

00:02:01,790 --> 00:02:07,720
first i like to talk about some of the

00:02:04,120 --> 00:02:10,479
non intrusive monitoring it can do so

00:02:07,720 --> 00:02:13,840
you can do things like measure the CPU

00:02:10,479 --> 00:02:17,170
usage across your entire machine and you

00:02:13,840 --> 00:02:20,490
can also go down to each JVM and monitor

00:02:17,170 --> 00:02:23,350
the CPU usage within each of those jvm

00:02:20,490 --> 00:02:26,950
within each JVM it can also monitor the

00:02:23,350 --> 00:02:30,100
different memory regions of the heat so

00:02:26,950 --> 00:02:31,720
you can see whether or not your program

00:02:30,100 --> 00:02:39,250
is using a lot of memory and whether or

00:02:31,720 --> 00:02:41,140
not it's being used if whether or not

00:02:39,250 --> 00:02:43,000
the objects like that that are allocated

00:02:41,140 --> 00:02:44,860
end up sticking around for a long time

00:02:43,000 --> 00:02:48,730
or whether they get cleaned up a garbage

00:02:44,860 --> 00:02:51,010
collector on that note you can also

00:02:48,730 --> 00:02:52,950
measure how much time is being spent

00:02:51,010 --> 00:02:56,830
doing garbage collection in your program

00:02:52,950 --> 00:02:58,360
and you can also monitor the amount of

00:02:56,830 --> 00:03:01,900
classes that are loading over time your

00:02:58,360 --> 00:03:05,920
program and also jmx notifications so if

00:03:01,900 --> 00:03:09,820
you have if you have an agent that you

00:03:05,920 --> 00:03:11,709
load into your jvm that publishes custom

00:03:09,820 --> 00:03:14,020
jmx confirmations you can monitor those

00:03:11,709 --> 00:03:15,640
and service that and also some that are

00:03:14,020 --> 00:03:19,230
built in so this this will show you

00:03:15,640 --> 00:03:22,239
every time a garbage collection is done

00:03:19,230 --> 00:03:24,130
some of the more intrusive and active

00:03:22,239 --> 00:03:27,550
metrics that you can measure you can

00:03:24,130 --> 00:03:28,930
perform heat dumps on each JVM and

00:03:27,550 --> 00:03:30,610
analyze the results of that so it will

00:03:28,930 --> 00:03:32,500
tell you all the different objects that

00:03:30,610 --> 00:03:36,310
are allocated you can search through

00:03:32,500 --> 00:03:38,890
them another thing you can do is thread

00:03:36,310 --> 00:03:40,239
state recording so this is also slightly

00:03:38,890 --> 00:03:43,180
intrusive so you get a little bit of

00:03:40,239 --> 00:03:44,500
degradation so you have to manually

00:03:43,180 --> 00:03:48,610
enable this and this would actually give

00:03:44,500 --> 00:03:50,110
you a timeline of what each the state of

00:03:48,610 --> 00:03:53,980
each threats you can see which thread is

00:03:50,110 --> 00:03:56,260
running which is blocked and that can be

00:03:53,980 --> 00:03:58,470
very useful as well you can also

00:03:56,260 --> 00:04:01,380
manually invoke the garbage collector on

00:03:58,470 --> 00:04:05,080
the JDM just by clicking a button you

00:04:01,380 --> 00:04:07,989
can also now do instrument to CPU

00:04:05,080 --> 00:04:10,600
profiling so you can go to your jvm and

00:04:07,989 --> 00:04:10,870
click start profiling let it run for as

00:04:10,600 --> 00:04:14,470
long

00:04:10,870 --> 00:04:15,489
one and then click stop profiling and a

00:04:14,470 --> 00:04:17,799
little you to sink the little session

00:04:15,489 --> 00:04:19,600
and we'll show you what the amount of

00:04:17,799 --> 00:04:22,650
time or what percentage of time is being

00:04:19,600 --> 00:04:24,940
spent in each any chunk that our method

00:04:22,650 --> 00:04:27,520
another thing you can do relate to the

00:04:24,940 --> 00:04:29,440
thread monitoring is if you are

00:04:27,520 --> 00:04:32,860
wondering threads and you know that a

00:04:29,440 --> 00:04:35,380
bunch of threads would stay blocked for

00:04:32,860 --> 00:04:42,190
a long time then you can actually check

00:04:35,380 --> 00:04:45,010
for deadlox so how does thermostat work

00:04:42,190 --> 00:04:48,699
so firstly we have the agent so there

00:04:45,010 --> 00:04:52,690
can be there can be multiple so the

00:04:48,699 --> 00:04:54,880
agent's job is to collect data from the

00:04:52,690 --> 00:04:57,070
target ATM and then pass it over to

00:04:54,880 --> 00:04:59,080
George there can be multiple agents

00:04:57,070 --> 00:05:05,680
running across multiple hosts each

00:04:59,080 --> 00:05:08,220
monitoring many JPM's so next up is the

00:05:05,680 --> 00:05:12,970
storage for storage we use MongoDB

00:05:08,220 --> 00:05:17,260
because it's it's highly scalable and is

00:05:12,970 --> 00:05:19,900
performant we so this is where the data

00:05:17,260 --> 00:05:22,030
that agent collects goes they use a

00:05:19,900 --> 00:05:24,910
thermoset they use this they use the

00:05:22,030 --> 00:05:30,550
thermostat storage API to send over the

00:05:24,910 --> 00:05:33,610
data and on the other side we have the

00:05:30,550 --> 00:05:36,910
client so the client collects the data

00:05:33,610 --> 00:05:40,750
using the same thurisaz storage API from

00:05:36,910 --> 00:05:45,120
E from the MongoDB storage and displace

00:05:40,750 --> 00:05:48,699
it chose analysis etc hung we have a

00:05:45,120 --> 00:05:52,810
thermostat command line shell and we

00:05:48,699 --> 00:05:55,510
also have a thermostat duty and how the

00:05:52,810 --> 00:05:58,720
client works is that there is a model

00:05:55,510 --> 00:06:01,510
view controller track so the controller

00:05:58,720 --> 00:06:02,430
uses the third site uses the storage API

00:06:01,510 --> 00:06:06,270
to get

00:06:02,430 --> 00:06:09,300
up from storage and the view shows

00:06:06,270 --> 00:06:11,970
displays it up so this abstraction lets

00:06:09,300 --> 00:06:13,740
us have different types of clients such

00:06:11,970 --> 00:06:16,320
as the command line shell versus the

00:06:13,740 --> 00:06:18,330
graphical user interface and this could

00:06:16,320 --> 00:06:23,460
also be excited on in the future with

00:06:18,330 --> 00:06:27,690
reps like a mobile plan and lastly the

00:06:23,460 --> 00:06:32,790
command channel so what if you wanted

00:06:27,690 --> 00:06:35,670
some user user initiated action to to

00:06:32,790 --> 00:06:40,020
interface with the tube so what if you

00:06:35,670 --> 00:06:43,170
want some user initiated action to for

00:06:40,020 --> 00:06:45,090
the agent to do you've seen that the

00:06:43,170 --> 00:06:48,300
agent and quiet are actually be coupled

00:06:45,090 --> 00:06:52,140
with the source being the middle middle

00:06:48,300 --> 00:06:55,770
man and this is actually in fact

00:06:52,140 --> 00:06:58,320
possible because we have e we have a

00:06:55,770 --> 00:07:00,270
fight we have client API LX you can make

00:06:58,320 --> 00:07:03,600
it directly agent so for example with

00:07:00,270 --> 00:07:07,680
you if you wanted to be so if you want

00:07:03,600 --> 00:07:09,600
to eat CA if you want to be ancient to

00:07:07,680 --> 00:07:17,100
shut down the TPM you could use economic

00:07:09,600 --> 00:07:20,880
they're gonna chop it up but or garbage

00:07:17,100 --> 00:07:26,610
collection um and then expanding on that

00:07:20,880 --> 00:07:29,280
we have numerous security considerations

00:07:26,610 --> 00:07:32,730
Riverside so rather than just talking

00:07:29,280 --> 00:07:35,760
directly to the MongoDB storage we built

00:07:32,730 --> 00:07:37,110
this secure web layer which acts as an

00:07:35,760 --> 00:07:39,890
intermediary between all of the

00:07:37,110 --> 00:07:43,320
different components and the storage so

00:07:39,890 --> 00:07:45,750
the client needs to authenticate with

00:07:43,320 --> 00:07:46,940
this Web layer in order to access to

00:07:45,750 --> 00:07:50,790
read or write anything from the storage

00:07:46,940 --> 00:07:52,740
so does the agents and there's a diverse

00:07:50,790 --> 00:07:54,960
set of capabilities that control whether

00:07:52,740 --> 00:07:59,340
or not specific agents and clients are

00:07:54,960 --> 00:08:02,340
allowed to do this on top of that we

00:07:59,340 --> 00:08:03,139
have optional encryption for all of the

00:08:02,340 --> 00:08:06,080
different communicate

00:08:03,139 --> 00:08:08,479
i goes on thermostat so you can enable

00:08:06,080 --> 00:08:10,460
encryption / just a command channel you

00:08:08,479 --> 00:08:13,189
can also enable encryption from the

00:08:10,460 --> 00:08:18,590
secure web layer to the vacuum storage

00:08:13,189 --> 00:08:20,659
being MongoDB and then since all in

00:08:18,590 --> 00:08:25,639
today client agent communication happens

00:08:20,659 --> 00:08:28,969
over HTTPS that's also encrypted so

00:08:25,639 --> 00:08:31,460
we've been enough sauce for a couple

00:08:28,969 --> 00:08:32,750
years and one thing is we really wanted

00:08:31,460 --> 00:08:35,659
to do is highlighting the new features

00:08:32,750 --> 00:08:37,570
that have been implemented in thermostat

00:08:35,659 --> 00:08:40,839
since we were last here clearing middle

00:08:37,570 --> 00:08:46,010
some of the more user-facing highlights

00:08:40,839 --> 00:08:50,269
we've done a heap tree map view which

00:08:46,010 --> 00:08:52,130
shows you spatially how much each object

00:08:50,269 --> 00:08:55,579
is for how much a type of object is

00:08:52,130 --> 00:08:58,760
being allocated in your heat another

00:08:55,579 --> 00:09:01,699
thing we've mentioned before is the CPU

00:08:58,760 --> 00:09:05,690
based profiling on demand we've

00:09:01,699 --> 00:09:09,380
implemented a new set up the GUI so the

00:09:05,690 --> 00:09:10,670
first time you run thermostat a little

00:09:09,380 --> 00:09:12,170
bit complicate you had to go through

00:09:10,670 --> 00:09:14,029
read guides in order to figure out how

00:09:12,170 --> 00:09:15,920
to actually set up thermostat now we

00:09:14,029 --> 00:09:19,220
have a wizard that helps you through

00:09:15,920 --> 00:09:21,709
that and the only nice thing for the

00:09:19,220 --> 00:09:24,470
command line users we have tab

00:09:21,709 --> 00:09:27,140
completion now another thing we're going

00:09:24,470 --> 00:09:29,410
to show up I all metrics so you can

00:09:27,140 --> 00:09:33,410
count the number of characters being

00:09:29,410 --> 00:09:36,680
written and read in your program we have

00:09:33,410 --> 00:09:38,449
more garbage collection details so this

00:09:36,680 --> 00:09:40,279
can tell you what garbage collect you're

00:09:38,449 --> 00:09:43,880
running and what sort of tunable

00:09:40,279 --> 00:09:46,070
parameters exists that you could use and

00:09:43,880 --> 00:09:47,209
aside from the interface and feature you

00:09:46,070 --> 00:09:51,140
girls have done some security

00:09:47,209 --> 00:09:53,420
improvements so this has involved moving

00:09:51,140 --> 00:09:56,329
some functionality out of the agent in

00:09:53,420 --> 00:09:58,339
two separate processes so that if you if

00:09:56,329 --> 00:10:01,279
you're running the agent as a privilege

00:09:58,339 --> 00:10:03,769
user you don't have to worry about

00:10:01,279 --> 00:10:07,819
network phasing courts so those will be

00:10:03,769 --> 00:10:11,480
run as a less privileged user all right

00:10:07,819 --> 00:10:13,610
and now we're going to have a demo so

00:10:11,480 --> 00:10:15,470
I'm going to run this in two parts

00:10:13,610 --> 00:10:17,569
basically first I'm going to show how

00:10:15,470 --> 00:10:20,149
thermostat actually looks and with the

00:10:17,569 --> 00:10:22,339
basic things are and then I'm actually

00:10:20,149 --> 00:10:24,589
going to run a number of small programs

00:10:22,339 --> 00:10:27,019
to demonstrate how particular features

00:10:24,589 --> 00:10:30,079
work and when some of the tools that we

00:10:27,019 --> 00:10:35,930
have developed come in handy so let's do

00:10:30,079 --> 00:10:38,509
that first let me start by showing you

00:10:35,930 --> 00:10:41,089
the setup so I'm going to do there was

00:10:38,509 --> 00:10:42,740
that so our main program is called

00:10:41,089 --> 00:10:44,689
thermostat and then we give it a

00:10:42,740 --> 00:10:47,959
separate set of commands to indicate

00:10:44,689 --> 00:10:51,499
what to do so I'm going to run web

00:10:47,959 --> 00:11:01,040
storage set up which bit sorry honk a

00:10:51,499 --> 00:11:03,470
man who is called web storage service so

00:11:01,040 --> 00:11:07,790
this brings up our setup GUI it's a

00:11:03,470 --> 00:11:10,179
little small on the screen actually but

00:11:07,790 --> 00:11:13,459
you should be able to see it here

00:11:10,179 --> 00:11:14,809
basically we can Elliot just talked

00:11:13,459 --> 00:11:17,149
about all the ways we can configure

00:11:14,809 --> 00:11:18,949
thermostat using security and so on and

00:11:17,149 --> 00:11:20,749
so forth and this provides a convenient

00:11:18,949 --> 00:11:22,970
way so you don't have to go editing

00:11:20,749 --> 00:11:26,360
individual text files you can just use

00:11:22,970 --> 00:11:28,429
one central place to set up security I'm

00:11:26,360 --> 00:11:31,910
going to do custom set up so I can enter

00:11:28,429 --> 00:11:34,730
some known information i'm going to

00:11:31,910 --> 00:11:36,939
enter the username and password for our

00:11:34,730 --> 00:11:36,939
database

00:11:43,040 --> 00:11:46,519
and then I'm going to click next and

00:11:44,899 --> 00:11:50,410
then i'm going to enter user names and

00:11:46,519 --> 00:11:50,410
passwords for our various tools

00:12:01,310 --> 00:12:06,140
so now the setup is actually running

00:12:03,620 --> 00:12:07,970
doing it's in creating users locking

00:12:06,140 --> 00:12:10,370
down the database and finally it's

00:12:07,970 --> 00:12:12,050
actually running the command that I said

00:12:10,370 --> 00:12:14,510
in the beginning which is web storage

00:12:12,050 --> 00:12:16,520
service so now the thermostat agent is

00:12:14,510 --> 00:12:18,260
running our storage is running and now

00:12:16,520 --> 00:12:21,200
we're just going to use the client to

00:12:18,260 --> 00:12:26,890
see it with what that I thermostat has

00:12:21,200 --> 00:12:29,360
collected so that's just thermostat GUI

00:12:26,890 --> 00:12:32,779
which brings up the thermos that goody

00:12:29,360 --> 00:12:36,800
here you can see it has multiple parts

00:12:32,779 --> 00:12:38,570
on the left it's a tray of individual

00:12:36,800 --> 00:12:42,440
machine so that thermostat knows about

00:12:38,570 --> 00:12:44,210
and a JVM that thermostat knows about we

00:12:42,440 --> 00:12:46,880
can see various information if I

00:12:44,210 --> 00:12:49,940
maximize it here we can see information

00:12:46,880 --> 00:12:52,070
about the machine suggest the overview

00:12:49,940 --> 00:12:56,120
information like the processor memory

00:12:52,070 --> 00:13:01,220
and so on we can see details about how

00:12:56,120 --> 00:13:04,339
much CPU cycles this machine is using so

00:13:01,220 --> 00:13:07,880
well here we can see it has four cpus

00:13:04,339 --> 00:13:10,940
and that's how their usage looks like we

00:13:07,880 --> 00:13:13,760
can see various memory regions I'm just

00:13:10,940 --> 00:13:17,260
going to show free memory here actually

00:13:13,760 --> 00:13:21,470
used memory here and uncheck everything

00:13:17,260 --> 00:13:23,480
else and for the last minute we can see

00:13:21,470 --> 00:13:27,380
this is how the memory usage on this

00:13:23,480 --> 00:13:29,960
machine was if your machine is nima

00:13:27,380 --> 00:13:32,120
capable thermostat also knows how the

00:13:29,960 --> 00:13:34,280
numa notes are being utilized and

00:13:32,120 --> 00:13:38,210
finally if you really want you can add

00:13:34,280 --> 00:13:44,900
nodes at notes per vm so i can say this

00:13:38,210 --> 00:13:47,540
is why I important server and save it if

00:13:44,900 --> 00:13:51,200
you click on the JVM you can see various

00:13:47,540 --> 00:13:53,930
piece of information about it we can see

00:13:51,200 --> 00:13:56,150
some basics like the process ID when it

00:13:53,930 --> 00:13:58,700
was started whether it's stopped or if

00:13:56,150 --> 00:14:00,950
it's running but also very jealous

00:13:58,700 --> 00:14:03,200
specific information such as the main

00:14:00,950 --> 00:14:05,660
class the command line that we use to

00:14:03,200 --> 00:14:08,600
start this program the version of the

00:14:05,660 --> 00:14:11,380
JVM the hotspot version even things like

00:14:08,600 --> 00:14:14,960
what particular BM arguments were used

00:14:11,380 --> 00:14:21,140
we can see information specific to the

00:14:14,960 --> 00:14:23,360
to this jvm such as the cpu usage we can

00:14:21,140 --> 00:14:25,460
vary the time so we can use the data for

00:14:23,360 --> 00:14:27,650
just the last minute or the last three

00:14:25,460 --> 00:14:31,310
hours or however long thermostat was

00:14:27,650 --> 00:14:34,190
running for there's also a profiler I'm

00:14:31,310 --> 00:14:35,840
going to come back to this in a bit we

00:14:34,190 --> 00:14:38,270
can see information about the garbage

00:14:35,840 --> 00:14:39,830
collector that this JVM is running right

00:14:38,270 --> 00:14:42,980
now you can see it's the parallel

00:14:39,830 --> 00:14:45,890
collector not sure if it's very readable

00:14:42,980 --> 00:14:47,720
but it's there and if you click on this

00:14:45,890 --> 00:14:50,120
you can get information about all the

00:14:47,720 --> 00:14:51,740
various parameters that support so we

00:14:50,120 --> 00:14:54,470
know that this particular garbage

00:14:51,740 --> 00:15:02,150
collector can use use parallel GC

00:14:54,470 --> 00:15:03,770
survival ratio and so on you can see how

00:15:02,150 --> 00:15:06,470
often garbage collection has been

00:15:03,770 --> 00:15:09,230
happening on this JVM oh this one

00:15:06,470 --> 00:15:11,960
particular actually if you look at the

00:15:09,230 --> 00:15:14,540
name is the command channels which is

00:15:11,960 --> 00:15:16,340
really run one stool a bit and stop so

00:15:14,540 --> 00:15:18,860
it's really not doing much what if we

00:15:16,340 --> 00:15:20,900
move over to the web storage service you

00:15:18,860 --> 00:15:22,910
can see how different garbage collectors

00:15:20,900 --> 00:15:26,990
have been working on different regions

00:15:22,910 --> 00:15:28,430
of this JVM on the older generation

00:15:26,990 --> 00:15:30,680
there hasn't been much garbage

00:15:28,430 --> 00:15:35,890
collection but there has been a lot in

00:15:30,680 --> 00:15:38,270
the newer generation again if your vm is

00:15:35,890 --> 00:15:40,040
noumea capable will show you more

00:15:38,270 --> 00:15:43,690
information about the Numa notes here

00:15:40,040 --> 00:15:46,070
right now it's basically no information

00:15:43,690 --> 00:15:48,940
you can also find out how many classes

00:15:46,070 --> 00:15:53,600
are being loaded in how the JVM behaves

00:15:48,940 --> 00:15:56,030
race a lot you can also see the various

00:15:53,600 --> 00:15:58,880
memory region sizes that are available

00:15:56,030 --> 00:16:01,340
in this JVM and how their sizes are

00:15:58,880 --> 00:16:03,650
changing based on time and again you can

00:16:01,340 --> 00:16:06,860
view this information for the last few

00:16:03,650 --> 00:16:11,420
hours or just the last minute whatever

00:16:06,860 --> 00:16:13,340
you're interested in so I'm not sure how

00:16:11,420 --> 00:16:15,410
many people here are familiar with the

00:16:13,340 --> 00:16:17,450
general how the generational garbage

00:16:15,410 --> 00:16:19,490
collector it's your work but you can see

00:16:17,450 --> 00:16:22,820
that new objects are first being

00:16:19,490 --> 00:16:25,190
allocated in the top region here what's

00:16:22,820 --> 00:16:27,590
labeled as Eden and once that fills up

00:16:25,190 --> 00:16:32,180
things get promoted to the

00:16:27,590 --> 00:16:35,330
the regions we also have information

00:16:32,180 --> 00:16:38,950
about the total size so here on the top

00:16:35,330 --> 00:16:41,840
you see the total allocated heap size

00:16:38,950 --> 00:16:43,700
sorry the total available heap size and

00:16:41,840 --> 00:16:45,860
on the bottom here you see what's

00:16:43,700 --> 00:16:48,830
actually being used and the difference

00:16:45,860 --> 00:16:53,210
is your margin of error that the JVM can

00:16:48,830 --> 00:16:55,130
allocate an extra objects it we can also

00:16:53,210 --> 00:16:57,590
show you information about how much I

00:16:55,130 --> 00:17:00,380
owe this VM is doing so we can see the

00:16:57,590 --> 00:17:04,160
characters red on the top here and the

00:17:00,380 --> 00:17:05,960
characters written on the bottom here we

00:17:04,160 --> 00:17:08,780
also have a lot of memory information

00:17:05,960 --> 00:17:10,760
about threads as Elliott mentioned you

00:17:08,780 --> 00:17:12,920
know some information we collect all the

00:17:10,760 --> 00:17:15,470
time so we know how many threads are

00:17:12,920 --> 00:17:17,210
running at any time but we also have a

00:17:15,470 --> 00:17:20,120
lot more detailed information that you

00:17:17,210 --> 00:17:21,740
have to go in and enable on demand I'm

00:17:20,120 --> 00:17:25,370
going to come back to this and show all

00:17:21,740 --> 00:17:28,370
that too there's also jmx notifications

00:17:25,370 --> 00:17:30,170
so we if we actually enable that we're

00:17:28,370 --> 00:17:32,510
going to find out every single jmx

00:17:30,170 --> 00:17:35,540
notification that happens in this JVM

00:17:32,510 --> 00:17:37,730
and then that gets plotted and recorded

00:17:35,540 --> 00:17:42,350
oh just like everything else that

00:17:37,730 --> 00:17:45,320
thermostat does so that was an overview

00:17:42,350 --> 00:17:47,900
of thermostat the tool itself now let's

00:17:45,320 --> 00:17:51,320
see some concrete use cases that thermos

00:17:47,900 --> 00:17:53,150
that actually helps with so I'm going to

00:17:51,320 --> 00:17:59,780
run a few demo programs here just to

00:17:53,150 --> 00:18:02,330
illustrate that this first demo you can

00:17:59,780 --> 00:18:06,140
see by name is kind of broken we'll see

00:18:02,330 --> 00:18:07,970
how in a minute so now i have no idea

00:18:06,140 --> 00:18:10,100
that what this program is doing all i've

00:18:07,970 --> 00:18:12,290
been told is that it doesn't work right

00:18:10,100 --> 00:18:15,170
and now we're going to use thermostat to

00:18:12,290 --> 00:18:19,340
investigate why so first i'm going to

00:18:15,170 --> 00:18:24,050
hop over to this program let's see some

00:18:19,340 --> 00:18:26,540
basics the name is called sorry the main

00:18:24,050 --> 00:18:28,490
class is called GC example so well

00:18:26,540 --> 00:18:32,180
that's a hand let's see what GC is doing

00:18:28,490 --> 00:18:34,640
here oh my god so there's a lot of

00:18:32,180 --> 00:18:36,410
garbage collection happening here a lot

00:18:34,640 --> 00:18:39,410
in the older generation a lot in the

00:18:36,410 --> 00:18:40,700
newer generation and newer generation

00:18:39,410 --> 00:18:44,180
garbage collection is on

00:18:40,700 --> 00:18:45,320
a up well it's not too bad but if you

00:18:44,180 --> 00:18:46,850
have so much garbage collection

00:18:45,320 --> 00:18:49,190
happening in the older generation on the

00:18:46,850 --> 00:18:50,750
top that's a big problem because often

00:18:49,190 --> 00:18:53,270
that means your Jamie M is completely

00:18:50,750 --> 00:18:55,700
stopped so if you have a server that's

00:18:53,270 --> 00:18:57,290
running processing Network requests it's

00:18:55,700 --> 00:19:00,350
not doing anything else except the

00:18:57,290 --> 00:19:02,210
garbage collector for that time and well

00:19:00,350 --> 00:19:04,520
let's see what else we can find out

00:19:02,210 --> 00:19:10,670
about this I'm going to help over to the

00:19:04,520 --> 00:19:14,150
memories pad here let's see so the Eden

00:19:10,670 --> 00:19:17,450
region I just said is where new objects

00:19:14,150 --> 00:19:20,630
get allocated in and that's good so new

00:19:17,450 --> 00:19:23,120
objects are going there but whenever GC

00:19:20,630 --> 00:19:25,340
happens we also get stuff appearing in

00:19:23,120 --> 00:19:28,160
the older generation and that's a bad

00:19:25,340 --> 00:19:30,500
idea because really objects that are

00:19:28,160 --> 00:19:32,120
being allocated frequently and probably

00:19:30,500 --> 00:19:35,540
dying very frequently should get

00:19:32,120 --> 00:19:37,310
promoted to the older generation a fixed

00:19:35,540 --> 00:19:41,560
seemed sort of obvious now we just need

00:19:37,310 --> 00:19:50,300
to increase these sizes so let's do that

00:19:41,560 --> 00:19:53,060
I'm going to stop this JVM so the script

00:19:50,300 --> 00:19:58,360
that I used to start this was passing a

00:19:53,060 --> 00:19:58,360
few jela plagues let's add a few more

00:20:05,010 --> 00:20:10,680
so the fixed version I'm just going to

00:20:07,140 --> 00:20:12,600
add a new flag that says tweak the sizes

00:20:10,680 --> 00:20:14,820
and make the new region a little bit

00:20:12,600 --> 00:20:18,210
bigger clearly there are heuristics that

00:20:14,820 --> 00:20:22,650
jvm computed were not so great so let's

00:20:18,210 --> 00:20:25,410
run this fixed demo now and i'm going to

00:20:22,650 --> 00:20:29,910
hop back over to thermostat look at this

00:20:25,410 --> 00:20:31,770
new version and look our GC stop we're

00:20:29,910 --> 00:20:34,440
not getting any major garbage collection

00:20:31,770 --> 00:20:37,170
we're getting a lot in smaller in the

00:20:34,440 --> 00:20:39,810
newer generation but that's fine and if

00:20:37,170 --> 00:20:41,700
you hop over to the memory size there's

00:20:39,810 --> 00:20:43,560
not much turn in the old region which is

00:20:41,700 --> 00:20:45,720
fantastic because our applications

00:20:43,560 --> 00:20:54,560
performance just went up by a few orders

00:20:45,720 --> 00:20:54,560
of magnitude let's try another example

00:20:55,010 --> 00:20:59,220
again I'm not I have a look at the

00:20:57,630 --> 00:21:01,100
source code I don't know what it's doing

00:20:59,220 --> 00:21:03,830
I've been told there's a problem here

00:21:01,100 --> 00:21:07,530
we're going to start with the name again

00:21:03,830 --> 00:21:10,550
that's often a very good hand leaks well

00:21:07,530 --> 00:21:13,170
let's see if something is leaking here

00:21:10,550 --> 00:21:15,960
nothing particular on the cpu which is

00:21:13,170 --> 00:21:21,360
fantastic there's some garbage

00:21:15,960 --> 00:21:23,100
collection happening okay the size of

00:21:21,360 --> 00:21:26,400
the old generation is going that seems

00:21:23,100 --> 00:21:28,410
like a problem oh look our heap size is

00:21:26,400 --> 00:21:32,340
going continuously looks like we have a

00:21:28,410 --> 00:21:35,100
Java heat at Java heap leak let's

00:21:32,340 --> 00:21:36,270
trigger a thread sorry a heap dump I'm

00:21:35,100 --> 00:21:38,670
going to click the button on the top

00:21:36,270 --> 00:21:40,770
here that's going to dump the heap of

00:21:38,670 --> 00:21:45,600
this JVM and then I'm going to analyze

00:21:40,770 --> 00:21:49,560
it so I double click here and now I get

00:21:45,600 --> 00:21:52,740
a few options I see a heap tree map so

00:21:49,560 --> 00:21:54,960
that shows me what's in the heap looks

00:21:52,740 --> 00:22:00,060
like this byte array is pretty much the

00:21:54,960 --> 00:22:01,980
biggest object in our heap but what is

00:22:00,060 --> 00:22:03,330
allocating and what's holding this fight

00:22:01,980 --> 00:22:06,090
all right let's see if we can find out a

00:22:03,330 --> 00:22:10,050
little more let's go to a histogram tab

00:22:06,090 --> 00:22:14,070
I can sort by instances or size in here

00:22:10,050 --> 00:22:16,950
I'm going to sort by size descending and

00:22:14,070 --> 00:22:18,800
again top culprit seems to be byte array

00:22:16,950 --> 00:22:23,150
oh but look at this

00:22:18,800 --> 00:22:25,610
on it's a hashmap note with 20,000

00:22:23,150 --> 00:22:29,660
instances this looks like there's a map

00:22:25,610 --> 00:22:32,420
that we're not using correctly let's see

00:22:29,660 --> 00:22:38,630
what this program does actually I'm

00:22:32,420 --> 00:22:44,660
going to stop this look at this source

00:22:38,630 --> 00:22:52,220
phone here it's running a leaks program

00:22:44,660 --> 00:22:55,520
so let me open this one up so let's

00:22:52,220 --> 00:22:58,310
scroll down looks like there is

00:22:55,520 --> 00:23:02,870
something called a session data there's

00:22:58,310 --> 00:23:05,540
some user information here and look okay

00:23:02,870 --> 00:23:08,840
so there's a map called session data

00:23:05,540 --> 00:23:11,090
that we used to get the user ID and if

00:23:08,840 --> 00:23:14,720
there's no such thing then we save the

00:23:11,090 --> 00:23:16,400
user ID oh ok well the key here is wrong

00:23:14,720 --> 00:23:19,850
it should be user ID that we used

00:23:16,400 --> 00:23:21,440
earlier it looks like a thermostat we

00:23:19,850 --> 00:23:25,010
found out that the problem what the

00:23:21,440 --> 00:23:26,690
problem was so let's fix that I'm going

00:23:25,010 --> 00:23:28,940
to come in out this replace it with the

00:23:26,690 --> 00:23:31,130
correct version which is just using the

00:23:28,940 --> 00:23:34,550
fixed key that we used in the code

00:23:31,130 --> 00:23:42,890
earlier here and let's rebuild and

00:23:34,550 --> 00:23:46,190
retest so let's run demo to again I'm

00:23:42,890 --> 00:23:48,350
going to go back to thermostat and look

00:23:46,190 --> 00:23:50,390
the heap isn't going crazy anymore it's

00:23:48,350 --> 00:23:52,520
staying fairly constant again with

00:23:50,390 --> 00:23:54,860
thermostat we're able to point out what

00:23:52,520 --> 00:23:57,290
went wrong and basically narrow down the

00:23:54,860 --> 00:24:03,520
culprit to something fairly small in a

00:23:57,290 --> 00:24:08,540
couple minutes let's try another demo

00:24:03,520 --> 00:24:10,310
this time this time I'm going to run

00:24:08,540 --> 00:24:13,690
what is called the dining philosophers

00:24:10,310 --> 00:24:16,700
program so any of you use taking a

00:24:13,690 --> 00:24:19,190
operating systems course it's probably

00:24:16,700 --> 00:24:21,350
heard of this this is a classical

00:24:19,190 --> 00:24:24,020
program where you have three

00:24:21,350 --> 00:24:26,270
philosophers that are trying to eat so

00:24:24,020 --> 00:24:27,800
here's how they work they think for a

00:24:26,270 --> 00:24:30,110
little while then they pick up their

00:24:27,800 --> 00:24:32,330
left fork then they pick up their right

00:24:30,110 --> 00:24:34,580
for it and they try to eat now

00:24:32,330 --> 00:24:36,620
sitting in that circular table and there

00:24:34,580 --> 00:24:39,380
are three philosophers and three forks

00:24:36,620 --> 00:24:41,149
so if they all stop thinking at the same

00:24:39,380 --> 00:24:42,740
time they're going to pick up there left

00:24:41,149 --> 00:24:44,779
for it no one's going to have a right

00:24:42,740 --> 00:24:49,659
fork and they're all going to stay stuck

00:24:44,779 --> 00:24:51,890
like that so I'm going to run that now

00:24:49,659 --> 00:24:56,870
okay it looks like we have our

00:24:51,890 --> 00:24:59,990
philosophers one the left fork another

00:24:56,870 --> 00:25:01,820
one got the left fork a third one got a

00:24:59,990 --> 00:25:03,919
left fork and now they're all waiting

00:25:01,820 --> 00:25:08,260
for right Forks as you can see down here

00:25:03,919 --> 00:25:08,260
let's see if there was a it also stabbed

00:25:09,039 --> 00:25:15,049
first I'm going to go over to the

00:25:12,049 --> 00:25:17,389
threats tab okay we can see there are

00:25:15,049 --> 00:25:20,750
some threads running there's a number of

00:25:17,389 --> 00:25:23,179
demon threads plus a toll sorry there's

00:25:20,750 --> 00:25:25,970
a total number of threads on top here

00:25:23,179 --> 00:25:28,730
which is the sum of your regular threat

00:25:25,970 --> 00:25:32,299
and your demon threads and your regular

00:25:28,730 --> 00:25:33,860
threats are just three let's take a look

00:25:32,299 --> 00:25:37,309
at it I'm going to enable thread

00:25:33,860 --> 00:25:38,840
monitoring and now thermostat is telling

00:25:37,309 --> 00:25:41,269
you the state of every single thread

00:25:38,840 --> 00:25:43,610
that is running in the JVM it shows me

00:25:41,269 --> 00:25:46,549
what the state of the thread is what

00:25:43,610 --> 00:25:50,690
their names are so now i can see that l

00:25:46,549 --> 00:25:53,750
is here is in state red and so it's Bob

00:25:50,690 --> 00:25:55,730
and Mallory I'm sorry about the small

00:25:53,750 --> 00:25:59,840
font sizes but hopefully you can get the

00:25:55,730 --> 00:26:02,179
idea and the colors match to state here

00:25:59,840 --> 00:26:07,519
so we can see that all three of them are

00:26:02,179 --> 00:26:10,070
waiting for something I'm going to hop

00:26:07,519 --> 00:26:11,929
over to deadlock detection to see if the

00:26:10,070 --> 00:26:14,299
Messiah can tell us exactly what happens

00:26:11,929 --> 00:26:18,529
here so I'm going to hit the tech

00:26:14,299 --> 00:26:20,870
deadlock and now it's shown me a list of

00:26:18,529 --> 00:26:23,059
threats that are that I've deadlock it's

00:26:20,870 --> 00:26:26,570
telling me how they are and it's showing

00:26:23,059 --> 00:26:29,299
you a visualization of that so now I see

00:26:26,570 --> 00:26:31,549
that Bob is waiting on Mallory Mallory

00:26:29,299 --> 00:26:35,380
is waiting on Alice and Alice is waiting

00:26:31,549 --> 00:26:35,380
on Bob a classical deadlock

00:26:39,390 --> 00:26:49,750
let's try one more demo in this case I

00:26:48,010 --> 00:26:51,430
have another problem somebody has

00:26:49,750 --> 00:26:53,710
written an application that was supposed

00:26:51,430 --> 00:26:55,360
to be massively parallel and they've

00:26:53,710 --> 00:26:57,760
just found out at the day before

00:26:55,360 --> 00:26:59,890
deployment into production that it's not

00:26:57,760 --> 00:27:01,450
really working that fast and now they're

00:26:59,890 --> 00:27:03,100
stumped because they have lots of

00:27:01,450 --> 00:27:04,690
threads and they have lots of resources

00:27:03,100 --> 00:27:06,940
that they're trying to use and they have

00:27:04,690 --> 00:27:08,260
no idea what's going on wrong so let's

00:27:06,940 --> 00:27:10,090
see if thermostatic can point out the

00:27:08,260 --> 00:27:12,640
problem without digging into this source

00:27:10,090 --> 00:27:15,540
code at all again I'm going to look at

00:27:12,640 --> 00:27:25,690
the threads here go to the timeline and

00:27:15,540 --> 00:27:28,930
enable that let me zoom in just a bit so

00:27:25,690 --> 00:27:31,240
now I got my two threads Alice Hera and

00:27:28,930 --> 00:27:33,610
Bob now these are the threats are

00:27:31,240 --> 00:27:36,430
supposed to be working in parallel but I

00:27:33,610 --> 00:27:40,060
notice a funny trend here when alice is

00:27:36,430 --> 00:27:43,600
blue bob is red when bob is blue alice

00:27:40,060 --> 00:27:45,430
is red it looks like so and looking up

00:27:43,600 --> 00:27:47,170
the codes here that means when one of

00:27:45,430 --> 00:27:50,800
them is runnable the other one is

00:27:47,170 --> 00:27:52,630
waiting clearly these threads are

00:27:50,800 --> 00:27:55,180
supposed to be parallel are actually

00:27:52,630 --> 00:27:58,090
using some shared resource in a very

00:27:55,180 --> 00:27:59,890
incorrect way so now we know what to

00:27:58,090 --> 00:28:01,600
look at that there's some one resource

00:27:59,890 --> 00:28:08,950
that they're all using that we should

00:28:01,600 --> 00:28:10,630
fix again with thermostat we didn't have

00:28:08,950 --> 00:28:13,420
a look into the source code at all we

00:28:10,630 --> 00:28:19,420
know what the problem is then now we can

00:28:13,420 --> 00:28:21,390
go ahead and solve it so now there's one

00:28:19,420 --> 00:28:23,620
more program that I have a problem with

00:28:21,390 --> 00:28:26,020
apparently this program was supposed to

00:28:23,620 --> 00:28:27,940
run in a certain amount of time and I

00:28:26,020 --> 00:28:29,950
just found out before I put it into

00:28:27,940 --> 00:28:31,600
production or before i submit it for

00:28:29,950 --> 00:28:33,850
marketing if I'm a student that it's not

00:28:31,600 --> 00:28:35,200
running fast now well chief thermostat

00:28:33,850 --> 00:28:38,430
can help us point out what the problem

00:28:35,200 --> 00:28:41,350
is so again I'm going to go to

00:28:38,430 --> 00:28:43,450
thermostat I am going to open up the

00:28:41,350 --> 00:28:47,260
profiler here and I'm going to

00:28:43,450 --> 00:28:49,120
instrument and profile this code so when

00:28:47,260 --> 00:28:50,500
I click start profiling thermostat

00:28:49,120 --> 00:28:52,780
instruments a program

00:28:50,500 --> 00:28:55,540
so it records every single method enter

00:28:52,780 --> 00:28:57,700
and exit and then I'm going to run this

00:28:55,540 --> 00:29:00,550
program so this program is doing

00:28:57,700 --> 00:29:03,520
something I don't know what let's see if

00:29:00,550 --> 00:29:05,650
thermostat Tulsa let's play it is so the

00:29:03,520 --> 00:29:07,720
program exited after doing whatever it

00:29:05,650 --> 00:29:09,700
was supposed to do but we can open up

00:29:07,720 --> 00:29:13,990
this session after what's that and see

00:29:09,700 --> 00:29:15,610
exactly what it note recorded so we know

00:29:13,990 --> 00:29:18,700
there are basically four methods here

00:29:15,610 --> 00:29:22,000
it's a small program there's a new main

00:29:18,700 --> 00:29:24,850
task there is sort words read file and

00:29:22,000 --> 00:29:29,320
print words and I can sort it by the

00:29:24,850 --> 00:29:31,570
total time or the percentage to see that

00:29:29,320 --> 00:29:33,940
okay it's a print worse that's a problem

00:29:31,570 --> 00:29:36,610
in fact it's taking like ninety three

00:29:33,940 --> 00:29:38,980
percent of my cpu cycles so now i know

00:29:36,610 --> 00:29:41,560
exactly where to focus my optimization

00:29:38,980 --> 00:29:43,510
efforts on i can ignore completely the

00:29:41,560 --> 00:29:45,820
rest of the program and just focus on

00:29:43,510 --> 00:29:50,190
optimizing this one particular piece of

00:29:45,820 --> 00:29:53,440
code one thing I haven't shown

00:29:50,190 --> 00:29:56,620
previously is that thermostat records

00:29:53,440 --> 00:29:59,890
all historical data so if i go to edit

00:29:56,620 --> 00:30:01,840
and enable show that vm processes i can

00:29:59,890 --> 00:30:04,210
see all these stadiums that have a

00:30:01,840 --> 00:30:08,050
little cost in there oh sorry it's not

00:30:04,210 --> 00:30:10,150
very visible up there is that a little

00:30:08,050 --> 00:30:12,850
better yet so you feel a little list of

00:30:10,150 --> 00:30:14,680
crosses here these are dead JVMs well we

00:30:12,850 --> 00:30:17,290
can still look at their data for example

00:30:14,680 --> 00:30:19,450
this Jam IAM that just died we can still

00:30:17,290 --> 00:30:21,820
have its profiling information available

00:30:19,450 --> 00:30:25,030
and for one of their previous examples

00:30:21,820 --> 00:30:31,870
we still have their memory classes and

00:30:25,030 --> 00:30:34,060
so on all available so that was the GUI

00:30:31,870 --> 00:30:39,730
demo now I'm going to let Elliot do the

00:30:34,060 --> 00:30:44,670
client demos so this will be great it's

00:30:39,730 --> 00:30:44,670
on the show I am client programs that

00:30:45,710 --> 00:30:50,289
if we just run to help take Angela list

00:30:48,409 --> 00:30:52,820
of all the commands that you can use

00:30:50,289 --> 00:30:58,520
alternatively you can just run the vents

00:30:52,820 --> 00:31:02,510
that shell which now let you run any

00:30:58,520 --> 00:31:05,409
commands you want in sequence so the

00:31:02,510 --> 00:31:08,630
first thing I want to point out is the

00:31:05,409 --> 00:31:10,370
after the offender set okay it's got a

00:31:08,630 --> 00:31:14,360
little minus that indicates that it's

00:31:10,370 --> 00:31:15,740
not connected to the storage so the

00:31:14,360 --> 00:31:19,940
first thing we're going to do is run

00:31:15,740 --> 00:31:26,960
connect and pass the URL of our secure

00:31:19,940 --> 00:31:33,710
storage and then asks for username and

00:31:26,960 --> 00:31:36,409
password so this is what we input when

00:31:33,710 --> 00:31:38,210
we were doing the GUI said oh okay and

00:31:36,409 --> 00:31:40,070
now it's changed a plus which means

00:31:38,210 --> 00:31:43,510
we're connected so now we can do things

00:31:40,070 --> 00:31:45,860
like list the available be ends and you

00:31:43,510 --> 00:31:50,330
show with you very long strings that

00:31:45,860 --> 00:31:52,520
correspond to what the VMS ideas so if

00:31:50,330 --> 00:31:56,600
we want to do something like craig

00:31:52,520 --> 00:31:58,580
information about the vm one thing

00:31:56,600 --> 00:32:00,740
that's nice now is that we have a tab

00:31:58,580 --> 00:32:03,559
completion for the very long strings so

00:32:00,740 --> 00:32:07,820
we wanted to do thick the last one so

00:32:03,559 --> 00:32:13,159
i'll just type EV and have and it auto

00:32:07,820 --> 00:32:15,110
complete the entire BMI so press enter

00:32:13,159 --> 00:32:17,990
any give us information that's similar

00:32:15,110 --> 00:32:22,549
wait to see the vm overview town of the

00:32:17,990 --> 00:32:30,350
GUI another thing you can do is find the

00:32:22,549 --> 00:32:34,760
end command so this gives you a lot of

00:32:30,350 --> 00:32:37,790
options kind of like a mechanism for

00:32:34,760 --> 00:32:43,160
finding a particular vm so let's say I

00:32:37,790 --> 00:32:53,690
want to find again that has saved the

00:32:43,160 --> 00:32:59,270
work man in main quad there so i didn't

00:32:53,690 --> 00:33:00,830
have a client so i can do i can ask what

00:32:59,270 --> 00:33:03,799
gilts the show unjust and pick them all

00:33:00,830 --> 00:33:07,580
and it turns out a lot of reading about

00:33:03,799 --> 00:33:09,230
that particular vm so this is something

00:33:07,580 --> 00:33:10,960
that would be able to that would be nice

00:33:09,230 --> 00:33:13,460
to use in the future where you could

00:33:10,960 --> 00:33:15,350
create like a pipeline on the command

00:33:13,460 --> 00:33:17,720
line so you search for a particular vm

00:33:15,350 --> 00:33:25,030
ID gives you that you pass up the river

00:33:17,720 --> 00:33:25,030
from cekam and then i will connect

00:33:30,980 --> 00:33:40,640
so that excuse me oh thanks app so that

00:33:37,970 --> 00:33:42,530
was what thermostat looks like out of

00:33:40,640 --> 00:33:45,200
the box but one of the big things that

00:33:42,530 --> 00:33:48,350
we wanted to do when we first created

00:33:45,200 --> 00:33:50,510
thermostat was at support for plugins so

00:33:48,350 --> 00:33:53,000
the idea with plugins is you can

00:33:50,510 --> 00:33:55,850
customize and extend the agent or the

00:33:53,000 --> 00:33:57,740
client to basically do anything that

00:33:55,850 --> 00:34:00,440
existing thermostat can do you can

00:33:57,740 --> 00:34:02,870
collect record analyze your own metrics

00:34:00,440 --> 00:34:05,090
you can integrate your own tools whether

00:34:02,870 --> 00:34:09,139
they're specific to your company or your

00:34:05,090 --> 00:34:10,850
production systems in fact most the

00:34:09,139 --> 00:34:14,780
thermostat is actually both exactly that

00:34:10,850 --> 00:34:17,000
way functionality that is core part of

00:34:14,780 --> 00:34:18,859
thermostat and doesn't look like its

00:34:17,000 --> 00:34:21,020
external it's actually implemented as

00:34:18,859 --> 00:34:22,879
plugins the plugins should ship with

00:34:21,020 --> 00:34:25,450
thermostat but their religious plugins

00:34:22,879 --> 00:34:27,649
in fact if I disabled all the plugins

00:34:25,450 --> 00:34:29,869
the you I would look pretty much empty

00:34:27,649 --> 00:34:31,550
right now there's just a little window

00:34:29,869 --> 00:34:35,119
and everything else that populates

00:34:31,550 --> 00:34:37,399
information is plugins we load these

00:34:35,119 --> 00:34:39,800
plugins using osgi so they're sort of

00:34:37,399 --> 00:34:43,010
contain and we have a well-defined API

00:34:39,800 --> 00:34:45,440
that basically describes the thermoset

00:34:43,010 --> 00:34:47,389
API that your plugins can and can't use

00:34:45,440 --> 00:34:50,810
which basically means you have a little

00:34:47,389 --> 00:34:52,700
bit of guarantee that this part of the

00:34:50,810 --> 00:34:55,629
thermostat API will continue working and

00:34:52,700 --> 00:34:57,920
this part isn't really available for you

00:34:55,629 --> 00:35:00,109
what is using a plug-in might look like

00:34:57,920 --> 00:35:02,630
well let's do a little bit of a demo

00:35:00,109 --> 00:35:06,710
here for that I am going back to

00:35:02,630 --> 00:35:08,990
thermostat here so I have a custom

00:35:06,710 --> 00:35:12,260
application here that I'm going to start

00:35:08,990 --> 00:35:14,680
just short late let's compile and run

00:35:12,260 --> 00:35:14,680
that

00:35:18,250 --> 00:35:25,320
I have a custom plugin that I'm going to

00:35:22,390 --> 00:35:31,990
install in thermostat set up correctly

00:35:25,320 --> 00:35:35,940
ok and now I'm going to restart

00:35:31,990 --> 00:35:35,940
thermostat so pick up suddenly plug-in

00:35:36,120 --> 00:35:42,850
and again I'm going to do the GUI just

00:35:41,410 --> 00:35:46,150
because I like looking at colors and

00:35:42,850 --> 00:35:48,610
pictures so now I have a custom program

00:35:46,150 --> 00:35:49,810
running this program is kind of

00:35:48,610 --> 00:35:51,490
different from all other programs

00:35:49,810 --> 00:35:53,290
because this is the one that I care most

00:35:51,490 --> 00:35:55,300
about I don't really care about how

00:35:53,290 --> 00:35:57,400
thermostat does I care about this

00:35:55,300 --> 00:36:00,220
program that I've developed that really

00:35:57,400 --> 00:36:02,620
wants to send emails just notify people

00:36:00,220 --> 00:36:04,780
about my awesome product so if this

00:36:02,620 --> 00:36:07,030
program is sending out 100 emails every

00:36:04,780 --> 00:36:08,860
second I'm really happy and this program

00:36:07,030 --> 00:36:11,410
is sending at one email per second I

00:36:08,860 --> 00:36:13,900
actually care and that number of emails

00:36:11,410 --> 00:36:16,120
I send out is the one I really really

00:36:13,900 --> 00:36:19,420
care about so I've extended thermostat

00:36:16,120 --> 00:36:23,320
to add that you notice a little tab here

00:36:19,420 --> 00:36:28,900
up here called emails so the custom

00:36:23,320 --> 00:36:31,900
program sent out emails and look if I go

00:36:28,900 --> 00:36:34,720
back and now thermostat knows it has

00:36:31,900 --> 00:36:37,210
looked into their program I identified

00:36:34,720 --> 00:36:39,060
how that program is performing so we can

00:36:37,210 --> 00:36:42,700
record how many emails that program is

00:36:39,060 --> 00:36:44,350
sending and this is really important

00:36:42,700 --> 00:36:45,700
because compared to all the other

00:36:44,350 --> 00:36:47,260
metrics that we talked about they're

00:36:45,700 --> 00:36:49,870
generally applicable to all programs

00:36:47,260 --> 00:36:51,610
this one is really really specific to

00:36:49,870 --> 00:36:53,260
this program that I care about and it

00:36:51,610 --> 00:36:55,960
gives you a better idea of performance

00:36:53,260 --> 00:37:00,430
than every other metric because this is

00:36:55,960 --> 00:37:02,020
the end result of my program so based on

00:37:00,430 --> 00:37:03,670
ideas like this you can extend

00:37:02,020 --> 00:37:06,640
thermostat to provide features that

00:37:03,670 --> 00:37:08,230
aren't available out of the box and of

00:37:06,640 --> 00:37:10,360
course you can contribute these features

00:37:08,230 --> 00:37:16,840
upstream and will happily take them of

00:37:10,360 --> 00:37:19,840
course so just a little bit about

00:37:16,840 --> 00:37:23,100
history here thermostat is sort of a new

00:37:19,840 --> 00:37:26,500
project it was first announced in

00:37:23,100 --> 00:37:29,560
February of 2012 at foss them when we

00:37:26,500 --> 00:37:31,420
did our first release in May 2012 like a

00:37:29,560 --> 00:37:35,020
tarball version released

00:37:31,420 --> 00:37:36,579
we said hey it works and we've had a few

00:37:35,020 --> 00:37:39,250
releases since then we've done major

00:37:36,579 --> 00:37:41,650
releases and minor releases so we kind

00:37:39,250 --> 00:37:44,619
of have an idea of back porting features

00:37:41,650 --> 00:37:47,319
of keeping up to keeping up with

00:37:44,619 --> 00:37:49,240
security issues so it's not like we're

00:37:47,319 --> 00:37:51,490
completely new we're fairly new we're

00:37:49,240 --> 00:37:53,950
working and we're progressing greatly

00:37:51,490 --> 00:37:55,869
but we have a little bit of experience

00:37:53,950 --> 00:37:57,549
and we have done things and we kind of

00:37:55,869 --> 00:38:06,490
have an idea about how to go about doing

00:37:57,549 --> 00:38:10,119
more so standard API versioning so in

00:38:06,490 --> 00:38:13,540
the near future we'll be releasing or it

00:38:10,119 --> 00:38:15,579
will include changes that will not be

00:38:13,540 --> 00:38:18,549
breaking the API so basically if you've

00:38:15,579 --> 00:38:21,400
built a plug-in for thermostat 1280 X

00:38:18,549 --> 00:38:25,359
then they should they'll work with

00:38:21,400 --> 00:38:27,640
thermacell 124 however we will be our

00:38:25,359 --> 00:38:30,250
next major release will be thermostat 2

00:38:27,640 --> 00:38:31,780
point 0 and that will potentially have

00:38:30,250 --> 00:38:34,780
changes that will break the existing API

00:38:31,780 --> 00:38:38,859
in order to incorporate our newer

00:38:34,780 --> 00:38:41,440
features and as for support for the

00:38:38,859 --> 00:38:44,980
older thermostat one talk two versions

00:38:41,440 --> 00:38:57,700
will be mainly doing bug fixes focus on

00:38:44,980 --> 00:39:03,480
security if necessary yep we're doing a

00:38:57,700 --> 00:39:06,369
complete overhaul of the plugin api so

00:39:03,480 --> 00:39:09,220
right now in America right plug in there

00:39:06,369 --> 00:39:12,220
is room at a boiling point is we kokes

00:39:09,220 --> 00:39:14,980
right so one thing we're gonna do is ask

00:39:12,220 --> 00:39:17,049
for the code and move to something if

00:39:14,980 --> 00:39:21,130
you done any sort of Android app

00:39:17,049 --> 00:39:24,430
development a life cycle all similar to

00:39:21,130 --> 00:39:27,099
that another thing that you'll be able

00:39:24,430 --> 00:39:29,190
to do with this is data collected by

00:39:27,099 --> 00:39:31,020
thermostat will have

00:39:29,190 --> 00:39:33,720
contact supplier tubes and you know that

00:39:31,020 --> 00:39:37,890
a specific number is the time stamp and

00:39:33,720 --> 00:39:41,730
not just a number so but I by doing this

00:39:37,890 --> 00:39:46,560
you can set you can type plugins okay I

00:39:41,730 --> 00:39:50,599
want to register to the 237 that I'm

00:39:46,560 --> 00:39:53,310
interested in doing member and

00:39:50,599 --> 00:39:56,280
thermostat will automatically send this

00:39:53,310 --> 00:39:58,310
information to your plugin another thing

00:39:56,280 --> 00:40:01,770
we'd like to do is to be able to

00:39:58,310 --> 00:40:04,260
pipeline these this information so you

00:40:01,770 --> 00:40:06,869
can send something to one plug-in which

00:40:04,260 --> 00:40:09,900
will get sent to the open that will get

00:40:06,869 --> 00:40:13,349
sent to another place another thing we

00:40:09,900 --> 00:40:15,690
like to work on is integration with

00:40:13,349 --> 00:40:21,540
performance profile at BP that's a very

00:40:15,690 --> 00:40:24,810
mature application for monitoring native

00:40:21,540 --> 00:40:26,849
code and we've had some recent

00:40:24,810 --> 00:40:29,190
collaboration with a tcp games they're

00:40:26,849 --> 00:40:32,430
wonderful guides and we're looking

00:40:29,190 --> 00:40:35,400
forward to leveraging their expertise as

00:40:32,430 --> 00:40:37,980
a very stable project but also we'd like

00:40:35,400 --> 00:40:41,339
to integrate some of their functionality

00:40:37,980 --> 00:40:43,560
so right now for the cpu information

00:40:41,339 --> 00:40:46,980
we're doing things like reading from /

00:40:43,560 --> 00:40:49,290
problem and that that information the

00:40:46,980 --> 00:40:51,300
format of that vary depending on what

00:40:49,290 --> 00:40:53,220
kind of architecture you have so

00:40:51,300 --> 00:40:56,849
something that would be nice if p skiing

00:40:53,220 --> 00:40:59,880
can handle all this so we'd ask it for

00:40:56,849 --> 00:41:02,089
cpu information and it knows how to

00:40:59,880 --> 00:41:05,099
obtain that and give it back to us in a

00:41:02,089 --> 00:41:07,170
portable way another thing we were

00:41:05,099 --> 00:41:09,810
looking into doing is integrating bike

00:41:07,170 --> 00:41:14,520
man so this is a tool that will allow

00:41:09,810 --> 00:41:17,130
you to inject pro points into running

00:41:14,520 --> 00:41:19,680
java virtual machine so it's very

00:41:17,130 --> 00:41:22,380
flexible very expressive and we're so

00:41:19,680 --> 00:41:24,750
nailing up the details about how we'd

00:41:22,380 --> 00:41:26,640
like to go about doing that and then of

00:41:24,750 --> 00:41:28,920
course always adding more security

00:41:26,640 --> 00:41:30,990
improvements i'm thinking this will take

00:41:28,920 --> 00:41:32,819
the form of slowing out more parts of

00:41:30,990 --> 00:41:35,540
the agent adding more privilege

00:41:32,819 --> 00:41:35,540
separation

00:41:36,989 --> 00:41:43,839
so you so please tries out we are if

00:41:41,979 --> 00:41:45,759
you're using red hat it's in the

00:41:43,839 --> 00:41:47,739
thermostat is included in the Red Hat

00:41:45,759 --> 00:41:50,200
software collections and if you are

00:41:47,739 --> 00:41:51,489
running fedora it's part of the

00:41:50,200 --> 00:41:53,559
repositories you can just use the

00:41:51,489 --> 00:41:56,200
package manager to install it and of

00:41:53,559 --> 00:42:01,779
course you can find the source releases

00:41:56,200 --> 00:42:05,619
on the site and interested in

00:42:01,779 --> 00:42:08,440
contributing we have there are Phil

00:42:05,619 --> 00:42:10,329
there are many potential tasks one is

00:42:08,440 --> 00:42:12,969
courting it according thermostat to

00:42:10,329 --> 00:42:16,029
other architectures and operating

00:42:12,969 --> 00:42:17,979
systems you could add new clients as i

00:42:16,029 --> 00:42:20,680
talked about how we have been an

00:42:17,979 --> 00:42:24,759
abstraction so you can perhaps have a

00:42:20,680 --> 00:42:26,890
mobile or web client add that and that

00:42:24,759 --> 00:42:29,710
is the that's where you can find the

00:42:26,890 --> 00:42:33,369
thermostat mailing list you can see up

00:42:29,710 --> 00:42:36,670
to date with the developments that are

00:42:33,369 --> 00:42:38,440
going on in head and yeah please join

00:42:36,670 --> 00:42:42,190
the IRC channel if you have any

00:42:38,440 --> 00:42:49,059
questions to talk about where to go we

00:42:42,190 --> 00:42:51,819
will respond and yeah and say Melissa

00:42:49,059 --> 00:42:55,650
for the mailing list and yeah thank you

00:42:51,819 --> 00:42:55,650
for listening in question

00:43:10,660 --> 00:43:18,620
we haven't tested on other jes but that

00:43:16,100 --> 00:43:21,460
said a lot of the API that we use and

00:43:18,620 --> 00:43:24,110
was the hooks that we use currently are

00:43:21,460 --> 00:43:26,150
for your rather should be part of other

00:43:24,110 --> 00:43:29,450
dangers as well so we're actually

00:43:26,150 --> 00:43:31,430
running on openjdk but for example for

00:43:29,450 --> 00:43:36,200
those jdk is taking over dedicated

00:43:31,430 --> 00:43:38,360
adding some cigarette sauce to it and so

00:43:36,200 --> 00:43:40,760
the eight guys that we use should be

00:43:38,360 --> 00:43:43,070
able to there too we haven't done

00:43:40,760 --> 00:43:45,950
extensive tests but it should work out

00:43:43,070 --> 00:43:49,180
of the box in Oracle's jdk i don't know

00:43:45,950 --> 00:43:49,180
about I be okay

00:43:57,890 --> 00:44:04,160
that will see the kinds of features

00:44:00,320 --> 00:44:06,470
you're using so out of the box last time

00:44:04,160 --> 00:44:08,300
if you ran the numbers in to say common

00:44:06,470 --> 00:44:09,950
will present so I think two percent or

00:44:08,300 --> 00:44:12,470
through per se if you're just running

00:44:09,950 --> 00:44:13,880
the agent on the same machine that's

00:44:12,470 --> 00:44:16,190
where you're running your production

00:44:13,880 --> 00:44:18,380
game you if you enable all the optional

00:44:16,190 --> 00:44:21,020
features that we have so you're crazy

00:44:18,380 --> 00:44:23,000
normal enable profiling there's gonna be

00:44:21,020 --> 00:44:24,710
a significant slowdown but out of the

00:44:23,000 --> 00:44:27,470
box you don't do anything that should

00:44:24,710 --> 00:44:29,000
really hurt before is all this data that

00:44:27,470 --> 00:44:30,800
were collecting recording by default

00:44:29,000 --> 00:44:33,410
this stuff that they gave you already

00:44:30,800 --> 00:44:37,010
exposing we're just quickly recording it

00:44:33,410 --> 00:44:39,410
and calling it a day all the expensive

00:44:37,010 --> 00:44:41,840
or informational all the interesting

00:44:39,410 --> 00:44:43,940
information really that requires digging

00:44:41,840 --> 00:44:48,370
into the jinniyah really disrupting the

00:44:43,940 --> 00:44:48,370
program we don't anyone that by default

00:44:51,400 --> 00:44:58,340
do you have a way to petition off data

00:44:55,190 --> 00:45:02,720
based on daily package name or something

00:44:58,340 --> 00:45:04,610
like that because in our environment you

00:45:02,720 --> 00:45:06,200
know you have this chunk of stuff that's

00:45:04,610 --> 00:45:08,660
the web server is part of the Jade

00:45:06,200 --> 00:45:10,340
gathered chuckles stuff this you know

00:45:08,660 --> 00:45:12,020
some other jar that we're using for

00:45:10,340 --> 00:45:14,720
things and we just need to look at this

00:45:12,020 --> 00:45:19,269
area and it can be very confusing having

00:45:14,720 --> 00:45:24,579
all the rest of the stuff in your sled

00:45:19,269 --> 00:45:26,439
you can search in the GUI so the tablet

00:45:24,579 --> 00:45:29,439
or the tree on the left that shows you

00:45:26,439 --> 00:45:32,499
all the different dms if you would just

00:45:29,439 --> 00:45:34,989
go and search by I think you should be

00:45:32,499 --> 00:45:38,499
able to search by Pat package name which

00:45:34,989 --> 00:45:40,209
would just show you Jamie ezek are part

00:45:38,499 --> 00:45:42,819
of the package but it bright lights

00:45:40,209 --> 00:45:45,939
attached I could keep analysis and the

00:45:42,819 --> 00:45:49,209
profile analysis you can we just I sleep

00:45:45,939 --> 00:45:51,549
after your areas well that's on the JVM

00:45:49,209 --> 00:45:53,049
basic work so you would select one of

00:45:51,549 --> 00:45:56,529
the gene names like interested in and

00:45:53,049 --> 00:46:00,159
then enable close on demand so he's all

00:45:56,529 --> 00:46:02,469
like 12 yes well it's all on debut so

00:46:00,159 --> 00:46:04,869
you have that's on that's on a junior

00:46:02,469 --> 00:46:10,319
basis so you have to you want to do eat

00:46:04,869 --> 00:46:10,319
them you would do it for a single JVM

00:46:10,469 --> 00:46:17,019
but then after that the only thing you

00:46:15,519 --> 00:46:19,269
can do is search for a particular class

00:46:17,019 --> 00:46:21,939
you don't have an ability to say ignore

00:46:19,269 --> 00:46:26,949
all this this we would do a bike class

00:46:21,939 --> 00:46:29,529
my classmates not my people but we do

00:46:26,949 --> 00:46:31,509
have a we do filtering magnet yeah

00:46:29,529 --> 00:46:33,039
there's a look at me like one thing we

00:46:31,509 --> 00:46:35,259
have to we can build everything so you

00:46:33,039 --> 00:46:37,509
can say show me all it well should we

00:46:35,259 --> 00:46:41,529
like a higher instances of class Buddha

00:46:37,509 --> 00:46:43,179
heart and not that well but not the

00:46:41,529 --> 00:46:47,019
extent to which you're thinking of

00:46:43,179 --> 00:46:49,209
higher price believe yeah this is a most

00:46:47,019 --> 00:46:51,429
agree that we really have doesn't do

00:46:49,209 --> 00:46:53,060
that much project on your route is

00:46:51,429 --> 00:46:58,790
actually working on

00:46:53,060 --> 00:47:01,550
you talk about that um so just to get

00:46:58,790 --> 00:47:04,700
like a brief overview where I'm working

00:47:01,550 --> 00:47:07,430
on adding some filtering to the object

00:47:04,700 --> 00:47:09,710
browser and the class you're so that you

00:47:07,430 --> 00:47:11,150
can have like a search bar and Goku

00:47:09,710 --> 00:47:14,780
stealth and we're also being about

00:47:11,150 --> 00:47:19,840
integrating object query language so

00:47:14,780 --> 00:47:25,280
that we can give you more specific

00:47:19,840 --> 00:47:32,090
search functionality so so those are

00:47:25,280 --> 00:47:34,100
future ideas about

00:47:32,090 --> 00:47:36,530
if you have suggestions for features

00:47:34,100 --> 00:47:40,040
please feel free to call dogs always

00:47:36,530 --> 00:47:43,310
looking to help that would be here that

00:47:40,040 --> 00:47:45,110
positive but yeah I mean to everybody in

00:47:43,310 --> 00:47:46,880
your production needs I would obviously

00:47:45,110 --> 00:47:51,310
be willing to consider public different

00:47:46,880 --> 00:47:51,310
hit us up on the mailing list or IRC

00:47:54,950 --> 00:48:04,700
how you discovered populate all the

00:48:01,039 --> 00:48:04,700
fabrics which you have

00:48:11,470 --> 00:48:21,050
so it's on a natural system basis so we

00:48:15,850 --> 00:48:24,800
is a discovery mechanism that's built

00:48:21,050 --> 00:48:27,590
into the junior and there are these

00:48:24,800 --> 00:48:29,990
ain't just perf directories in your temp

00:48:27,590 --> 00:48:34,190
directory and how karma stuff works is

00:48:29,990 --> 00:48:38,000
any of the gems that it has access to

00:48:34,190 --> 00:48:39,590
read it will discover those so ideally

00:48:38,000 --> 00:48:42,350
if you're running the agent as root

00:48:39,590 --> 00:48:44,420
it'll be able to discover all of the

00:48:42,350 --> 00:48:46,430
debuts on machine belong to any user if

00:48:44,420 --> 00:48:49,310
you're just running it as a gift or user

00:48:46,430 --> 00:48:51,830
it will just show you that user JVMs on

00:48:49,310 --> 00:48:54,260
that machine and that's on an her agent

00:48:51,830 --> 00:48:56,060
basis so if you're running service that

00:48:54,260 --> 00:48:58,300
you have agents running on multiple

00:48:56,060 --> 00:49:02,559
machines that will show you them all so

00:48:58,300 --> 00:49:06,450
large organization

00:49:02,559 --> 00:49:09,630
servers all yep

00:49:06,450 --> 00:49:13,020
yep the agent so each agent has to run

00:49:09,630 --> 00:49:14,820
on the Eiffel physical machine well the

00:49:13,020 --> 00:49:16,560
eight or the very location or commercial

00:49:14,820 --> 00:49:17,609
Virginia but the age is a very

00:49:16,560 --> 00:49:20,750
lightweight they're designed

00:49:17,609 --> 00:49:24,060
specifically to have very low already

00:49:20,750 --> 00:49:27,030
just add on to that the mechanism that

00:49:24,060 --> 00:49:29,310
we actually use is the same as jps so

00:49:27,030 --> 00:49:32,220
Jes actually this coercive process I

00:49:29,310 --> 00:49:34,800
firmest that should discovery too but it

00:49:32,220 --> 00:49:37,680
doesn't go out and prove anything we try

00:49:34,800 --> 00:49:44,130
to avoid doing any network in the agent

00:49:37,680 --> 00:49:45,660
if possible now we're good as these

00:49:44,130 --> 00:49:47,970
might be able to uh station the machines

00:49:45,660 --> 00:49:55,260
if you enable that but of themselves

00:49:47,970 --> 00:49:58,970
there are over there is the Comanchero

00:49:55,260 --> 00:50:02,790
mechanism that's the five items that so

00:49:58,970 --> 00:50:05,310
the it'll littell listen on port for

00:50:02,790 --> 00:50:09,329
incoming commands and board those on to

00:50:05,310 --> 00:50:12,630
the agent yep that's how the garbage

00:50:09,329 --> 00:50:14,849
collection mechanism and also the team

00:50:12,630 --> 00:50:19,200
dumps press button to GUI that's how it

00:50:14,849 --> 00:50:20,369
is the request gets under manager yes is

00:50:19,200 --> 00:50:23,670
there a number of actions that I'm

00:50:20,369 --> 00:50:26,220
listed here that such as GC and lvm and

00:50:23,670 --> 00:50:28,440
so on that are actually based on that

00:50:26,220 --> 00:50:31,109
the client connected to the agent asking

00:50:28,440 --> 00:50:33,660
it to do so but it's not as I hated

00:50:31,109 --> 00:50:40,079
custom protocol and those are all

00:50:33,660 --> 00:50:41,849
capability-based like I don't remember

00:50:40,079 --> 00:50:43,380
the details oven off my head it's like

00:50:41,849 --> 00:50:45,810
some sort of wire protocol we kind of

00:50:43,380 --> 00:50:50,099
came up when quickly oh it's not a

00:50:45,810 --> 00:50:50,720
standard yeah and although it is not

00:50:50,099 --> 00:50:55,490
mentioned

00:50:50,720 --> 00:50:59,960
debasis also in your configuration for

00:50:55,490 --> 00:51:01,940
the agent and storage you can specify

00:50:59,960 --> 00:51:03,950
what users want to be able to kill

00:51:01,940 --> 00:51:06,250
certain p.m. so you can't just go in and

00:51:03,950 --> 00:51:09,500
kill any miyama mining machine

00:51:06,250 --> 00:51:11,090
thermostatic so we get a capability so

00:51:09,500 --> 00:51:15,500
you can configure it so it doesn't do

00:51:11,090 --> 00:51:17,119
that I think if there were questions we

00:51:15,500 --> 00:51:21,490
should take them outside but after

00:51:17,119 --> 00:51:21,490

YouTube URL: https://www.youtube.com/watch?v=jwCc9yIufvQ


