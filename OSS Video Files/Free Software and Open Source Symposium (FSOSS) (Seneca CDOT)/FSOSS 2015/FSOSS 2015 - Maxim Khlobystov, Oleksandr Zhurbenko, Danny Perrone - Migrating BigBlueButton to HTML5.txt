Title: FSOSS 2015 - Maxim Khlobystov, Oleksandr Zhurbenko, Danny Perrone - Migrating BigBlueButton to HTML5
Publication date: 2015-11-12
Playlist: FSOSS 2015
Description: 
	FSOSS 2015 - Maxim Khlobystov, Oleksandr Zhurbenko, Danny Perrone - Migrating BigBlueButton to HTML5
Captions: 
	00:00:00,260 --> 00:00:10,880
so we have might seem focused off I exam

00:00:06,990 --> 00:00:13,769
is abencoe penny per 0 and this is the

00:00:10,880 --> 00:00:15,269
top specifically to mention this in case

00:00:13,769 --> 00:00:20,270
any of you are actually in the wrong

00:00:15,269 --> 00:00:26,580
room this is migrating bigbluebutton to

00:00:20,270 --> 00:00:29,640
html5 now these three guys are from

00:00:26,580 --> 00:00:35,390
siegel center open source development

00:00:29,640 --> 00:00:41,250
which is in Seneca College where we

00:00:35,390 --> 00:00:45,480
where I said we are the time but we're a

00:00:41,250 --> 00:00:47,910
group of people to various aspects of

00:00:45,480 --> 00:00:51,120
open source integrated into various

00:00:47,910 --> 00:00:55,949
courses within the college and where we

00:00:51,120 --> 00:00:58,980
are where we employ students in the back

00:00:55,949 --> 00:01:01,710
end of their time at Seneca we actually

00:00:58,980 --> 00:01:06,390
employ them to extend that time and do

00:01:01,710 --> 00:01:09,930
research open-source products many of

00:01:06,390 --> 00:01:12,299
which exist in the market and big blue

00:01:09,930 --> 00:01:14,670
button is one of those we didn't write

00:01:12,299 --> 00:01:20,909
the original but we've been working on

00:01:14,670 --> 00:01:26,400
it for a long time and on enough

00:01:20,909 --> 00:01:32,520
different series of projects the latest

00:01:26,400 --> 00:01:36,390
one is to import sorry not import to

00:01:32,520 --> 00:01:39,810
modify back to use html5 which i believe

00:01:36,390 --> 00:01:42,960
is instead of flesh from yes that's a

00:01:39,810 --> 00:01:44,640
bulb will it really do both so it's a

00:01:42,960 --> 00:01:48,010
separate quiet additional client okay

00:01:44,640 --> 00:01:50,590
sorry additional client to the classroom

00:01:48,010 --> 00:01:58,630
so service yourself then we'll get both

00:01:50,590 --> 00:02:00,670
but obviously html5 is open and always a

00:01:58,630 --> 00:02:02,500
good thing otherwise room be able to

00:02:00,670 --> 00:02:10,570
come to one of these festivals every

00:02:02,500 --> 00:02:13,630
year so um Hannah budget um I'll start

00:02:10,570 --> 00:02:16,450
with short of it early overview of big

00:02:13,630 --> 00:02:21,940
blue button and explain why and how we

00:02:16,450 --> 00:02:24,550
decided to migrate to html5 people wagon

00:02:21,940 --> 00:02:28,210
project started in 2007 in carleton

00:02:24,550 --> 00:02:31,240
university as my tears project of one of

00:02:28,210 --> 00:02:34,000
the current contributors the initial

00:02:31,240 --> 00:02:36,880
purpose was to allow remote students to

00:02:34,000 --> 00:02:39,450
participate instead in as at the time

00:02:36,880 --> 00:02:45,730
they were using an expensive commercial

00:02:39,450 --> 00:02:49,540
product since then project grew up we've

00:02:45,730 --> 00:02:55,540
had 12 major releases and last months we

00:02:49,540 --> 00:02:58,120
finally reached 1 point 0 beta I did

00:02:55,540 --> 00:03:01,950
this screen shots yesterday maybe we

00:02:58,120 --> 00:03:06,910
have a bit more commits or Forks but

00:03:01,950 --> 00:03:09,790
during the last eight years we got more

00:03:06,910 --> 00:03:12,400
than 11,000 commits made with people

00:03:09,790 --> 00:03:18,100
from almost every continent in the world

00:03:12,400 --> 00:03:21,730
and more than 2,700 Forks people bottoms

00:03:18,100 --> 00:03:27,459
localization covers more than ninety

00:03:21,730 --> 00:03:30,220
percent in 60 different languages the

00:03:27,459 --> 00:03:34,239
goal of the project is to provide every

00:03:30,220 --> 00:03:36,700
student high-quality learning experience

00:03:34,239 --> 00:03:40,300
high quality online learning experience

00:03:36,700 --> 00:03:46,390
and we intend to do this with big blue

00:03:40,300 --> 00:03:49,690
button this is our main complex client

00:03:46,390 --> 00:03:51,850
flash-based there are just two roles in

00:03:49,690 --> 00:03:56,769
the client you can be the represent or a

00:03:51,850 --> 00:03:58,270
viewer if you represent er then you have

00:03:56,769 --> 00:04:01,510
access to

00:03:58,270 --> 00:04:03,910
mmm death cheering you can upload the

00:04:01,510 --> 00:04:05,880
presentation PDF or PowerPoint you can

00:04:03,910 --> 00:04:10,600
go through all slides you can write

00:04:05,880 --> 00:04:13,120
shape some figures or shapes and right

00:04:10,600 --> 00:04:16,030
on top of your slide if you want to

00:04:13,120 --> 00:04:19,120
highlight your point or just draw

00:04:16,030 --> 00:04:22,480
something the features which are

00:04:19,120 --> 00:04:29,770
available two bottles are sharing audio

00:04:22,480 --> 00:04:31,240
webcams and public and private chat at

00:04:29,770 --> 00:04:33,400
some point we decided to create an

00:04:31,240 --> 00:04:42,130
alternative way of how people can access

00:04:33,400 --> 00:04:44,100
the system as flash really shouldn't be

00:04:42,130 --> 00:04:47,830
the only way people can access

00:04:44,100 --> 00:04:49,390
bigbluebutton but we want to cherish

00:04:47,830 --> 00:04:53,380
multiplyin to be developed in parallel

00:04:49,390 --> 00:04:54,730
with flash this means that people still

00:04:53,380 --> 00:04:57,820
want to see new features in the flash

00:04:54,730 --> 00:04:59,620
client in the bank line and we animal

00:04:57,820 --> 00:05:04,450
fat version with the supposed to catch

00:04:59,620 --> 00:05:07,080
up at some point and mmm maybe

00:05:04,450 --> 00:05:14,020
eventually will replace flesh with html5

00:05:07,080 --> 00:05:17,800
and make a term main line through this

00:05:14,020 --> 00:05:21,040
goal we have to go we have to go through

00:05:17,800 --> 00:05:25,200
three main versions of html5 client the

00:05:21,040 --> 00:05:30,010
first version we released in May it's a

00:05:25,200 --> 00:05:34,240
stable ready to go html5 client but it

00:05:30,010 --> 00:05:36,480
covers just the viewer perspective with

00:05:34,240 --> 00:05:39,850
your perspective of the client the

00:05:36,480 --> 00:05:42,419
second version the next one will include

00:05:39,850 --> 00:05:48,550
video and desk sharing features and the

00:05:42,419 --> 00:05:51,870
last main iteration will have all of the

00:05:48,550 --> 00:05:51,870
presenter functionality features

00:05:54,090 --> 00:05:58,560
this is not a first attempt to create an

00:05:56,940 --> 00:06:01,199
html5 client for the big blue button

00:05:58,560 --> 00:06:04,830
it's actually the third but first two

00:06:01,199 --> 00:06:11,780
were more than like proofs of concept

00:06:04,830 --> 00:06:16,370
maybe they were simple not just apps and

00:06:11,780 --> 00:06:19,080
we had a lot of problems building them

00:06:16,370 --> 00:06:21,090
we had we had a lot of custom code there

00:06:19,080 --> 00:06:24,360
and we had to implement all the data

00:06:21,090 --> 00:06:27,320
synchronization and communication

00:06:24,360 --> 00:06:30,720
between client and server ourselves and

00:06:27,320 --> 00:06:32,910
it took too long to implement even even

00:06:30,720 --> 00:06:34,650
simple feature for example we had just

00:06:32,910 --> 00:06:36,680
one person working on the flash client

00:06:34,650 --> 00:06:39,410
and three people working in shame 05 and

00:06:36,680 --> 00:06:45,630
features in the flash client appeared

00:06:39,410 --> 00:06:50,539
faster than in html5 the way it was hmff

00:06:45,630 --> 00:06:55,500
client would never catch up flash but

00:06:50,539 --> 00:07:00,090
then we found meter meter is a solid

00:06:55,500 --> 00:07:04,139
open source framework which extends not

00:07:00,090 --> 00:07:07,530
Jess and mongodb and it has his own

00:07:04,139 --> 00:07:10,530
package manager who is with a lot of

00:07:07,530 --> 00:07:15,780
different packages and its main thranx

00:07:10,530 --> 00:07:22,560
is its real-time updates so the way it

00:07:15,780 --> 00:07:24,510
works um meteor runs a main one MongoDB

00:07:22,560 --> 00:07:26,430
on the server side and it also has a

00:07:24,510 --> 00:07:29,639
local local minimum go on the client

00:07:26,430 --> 00:07:31,260
side and every page meter serves is an

00:07:29,639 --> 00:07:33,720
actual handlebars template which is

00:07:31,260 --> 00:07:35,669
synchronized with the server so when you

00:07:33,720 --> 00:07:38,820
changed anything on the server side

00:07:35,669 --> 00:07:40,200
meter synchronize your blog local

00:07:38,820 --> 00:07:42,720
database with the server starts I

00:07:40,200 --> 00:07:46,289
database and then it changes your

00:07:42,720 --> 00:07:51,840
template it made so simple to implement

00:07:46,289 --> 00:07:53,789
in features with meters that so that all

00:07:51,840 --> 00:07:57,000
the way also we have a previous up and

00:07:53,789 --> 00:08:00,990
development for more than a year we were

00:07:57,000 --> 00:08:03,479
able to start from scratch and to get

00:08:00,990 --> 00:08:05,810
the same functionality in roughly four

00:08:03,479 --> 00:08:05,810
months

00:08:06,620 --> 00:08:12,990
now the other big piece of technology we

00:08:09,930 --> 00:08:15,689
use in our project is less as a poet our

00:08:12,990 --> 00:08:19,039
CSS code base you can do big we had

00:08:15,689 --> 00:08:24,360
around five thousand lines of code and

00:08:19,039 --> 00:08:26,520
we switch to less three main things we

00:08:24,360 --> 00:08:32,099
use from that is nesting variables and

00:08:26,520 --> 00:08:34,680
mix-ins nothing means that in CA if you

00:08:32,099 --> 00:08:37,469
want to refer to two different child

00:08:34,680 --> 00:08:39,949
elements in CSS you have to actually

00:08:37,469 --> 00:08:44,490
write two separate blocks of code or

00:08:39,949 --> 00:08:47,850
three or yeah depends on the number of

00:08:44,490 --> 00:08:51,720
elements even referred to but unless you

00:08:47,850 --> 00:08:55,410
can refer to one of two all of them in

00:08:51,720 --> 00:08:58,889
the same block of code variables mix-ins

00:08:55,410 --> 00:09:01,290
are basically code reuse and allow them

00:08:58,889 --> 00:09:09,120
but they allowed us to reduce the amount

00:09:01,290 --> 00:09:14,399
of God we have Rafael Jess and radius

00:09:09,120 --> 00:09:17,360
are the last two technologies views in

00:09:14,399 --> 00:09:19,829
html5 client purple jess is it

00:09:17,360 --> 00:09:25,670
lightweight JavaScript library which is

00:09:19,829 --> 00:09:25,670
designed to work with a CG animation

00:09:25,730 --> 00:09:30,149
frankly speaking there are a few more

00:09:27,870 --> 00:09:32,339
especially writers in the web but which

00:09:30,149 --> 00:09:38,069
was Rafael just because of its Exxon

00:09:32,339 --> 00:09:40,709
browser support it works even in ie6 at

00:09:38,069 --> 00:09:42,240
some point we had to start communicating

00:09:40,709 --> 00:09:46,380
with the rest of big blue button with

00:09:42,240 --> 00:09:48,360
the other components and clients and we

00:09:46,380 --> 00:09:50,970
already had register our project and we

00:09:48,360 --> 00:09:53,730
found that it implements a standard

00:09:50,970 --> 00:09:57,149
publish-subscribe paradigm it means

00:09:53,730 --> 00:10:00,839
there are channels and clients can

00:09:57,149 --> 00:10:02,670
either can subscribe and publish those

00:10:00,839 --> 00:10:05,760
channels without knowing who received a

00:10:02,670 --> 00:10:08,880
message and when somebody publishes

00:10:05,760 --> 00:10:10,889
anything to the channel radius handles

00:10:08,880 --> 00:10:14,730
that message and make sure that all of

00:10:10,889 --> 00:10:17,189
the subscribers receive it and this is

00:10:14,730 --> 00:10:18,570
how we implement the communication

00:10:17,189 --> 00:10:21,990
within the blue button

00:10:18,570 --> 00:10:27,210
we send publish and subscribe to address

00:10:21,990 --> 00:10:30,210
our messages this were my own

00:10:27,210 --> 00:10:31,680
technologies used in html5 and maxing

00:10:30,210 --> 00:10:33,900
we'll talk more about the actual

00:10:31,680 --> 00:10:42,360
development problems we faced during the

00:10:33,900 --> 00:10:46,380
development yes Alex mentioned that Alex

00:10:42,360 --> 00:10:47,730
mentioned that we use the variety of

00:10:46,380 --> 00:10:50,700
different technologies in big blue

00:10:47,730 --> 00:10:52,770
button and a good example of a place

00:10:50,700 --> 00:10:56,730
where we apply those technologies is the

00:10:52,770 --> 00:11:00,090
UI of our html5 client first of all the

00:10:56,730 --> 00:11:04,770
UI is our html5 client is multi-platform

00:11:00,090 --> 00:11:07,890
and that means that we really were

00:11:04,770 --> 00:11:10,440
trying to make it work as fast as user

00:11:07,890 --> 00:11:12,150
friendly as and as a reliable on a

00:11:10,440 --> 00:11:14,190
mobile device is a dozen a desktop

00:11:12,150 --> 00:11:16,740
computer and when it comes to

00:11:14,190 --> 00:11:18,300
development for mobile browser your

00:11:16,740 --> 00:11:21,480
actual mobile browser you need to

00:11:18,300 --> 00:11:25,410
consider a few things first of all you

00:11:21,480 --> 00:11:28,170
really want to provide a consistent

00:11:25,410 --> 00:11:30,180
experience between different browsers

00:11:28,170 --> 00:11:33,390
between different devices so that means

00:11:30,180 --> 00:11:35,280
if one feature if for example desktop

00:11:33,390 --> 00:11:37,770
view that's the version of your

00:11:35,280 --> 00:11:40,230
application has some feature that

00:11:37,770 --> 00:11:43,350
feature must exist on any other device

00:11:40,230 --> 00:11:46,860
and behave in some similar way and at

00:11:43,350 --> 00:11:50,250
the same time you really need to have a

00:11:46,860 --> 00:11:52,830
way to adjust the UI to each specific

00:11:50,250 --> 00:11:59,580
case based on the device type the device

00:11:52,830 --> 00:12:02,040
size device resolution and the CSS

00:11:59,580 --> 00:12:04,620
feature that we did that you using CSS

00:12:02,040 --> 00:12:07,410
30 CSS and she says feature that allowed

00:12:04,620 --> 00:12:09,720
us to control our style sheet in that

00:12:07,410 --> 00:12:16,440
style sheets in that way is called media

00:12:09,720 --> 00:12:21,300
queries media queries basically supplied

00:12:16,440 --> 00:12:25,080
they provide the set of predefined

00:12:21,300 --> 00:12:28,740
objects as well as the associated

00:12:25,080 --> 00:12:31,050
conditions that the developer can check

00:12:28,740 --> 00:12:32,490
for in an application and those

00:12:31,050 --> 00:12:34,950
condition can condition

00:12:32,490 --> 00:12:37,380
can be based on such things as they are

00:12:34,950 --> 00:12:40,170
tied to a device and they can base to

00:12:37,380 --> 00:12:43,980
such things like resolution of the

00:12:40,170 --> 00:12:45,660
screen or aspect ratio or even

00:12:43,980 --> 00:12:49,830
orientation of the device is a portrait

00:12:45,660 --> 00:12:55,980
or landscape then teach of those

00:12:49,830 --> 00:12:58,740
conditions is still quite limited but in

00:12:55,980 --> 00:13:02,850
order to to achieve your goal you can

00:12:58,740 --> 00:13:05,510
mix and match them our usage of media

00:13:02,850 --> 00:13:08,670
queries actually evolved over time and

00:13:05,510 --> 00:13:11,339
first we had only a desktop version of

00:13:08,670 --> 00:13:14,490
the clients who desktop you and you can

00:13:11,339 --> 00:13:19,140
imagine that it worked really well it

00:13:14,490 --> 00:13:20,700
was stable but as a as a version of the

00:13:19,140 --> 00:13:22,800
client that designed specifically for a

00:13:20,700 --> 00:13:25,500
desktop you can imagine them when you

00:13:22,800 --> 00:13:29,040
enter the client enter the meeting from

00:13:25,500 --> 00:13:32,610
mobile device in a landscape view on

00:13:29,040 --> 00:13:34,950
your small screens phone all the

00:13:32,610 --> 00:13:37,649
elements just looked really extremely

00:13:34,950 --> 00:13:41,310
small and at the same time when you

00:13:37,649 --> 00:13:44,040
entered when you handle device in a

00:13:41,310 --> 00:13:46,589
portrait view the horizontally oriented

00:13:44,040 --> 00:13:49,980
you I just didn't make any sense at all

00:13:46,589 --> 00:13:52,380
so that's when we realized that we need

00:13:49,980 --> 00:13:56,550
to add some more views to our

00:13:52,380 --> 00:13:59,670
application and we separated the desktop

00:13:56,550 --> 00:14:01,560
view and we separated the portrait view

00:13:59,670 --> 00:14:04,770
and the landscape view and at the same

00:14:01,560 --> 00:14:07,980
time we learn how to detect the mobile

00:14:04,770 --> 00:14:10,020
device so we basically at that point we

00:14:07,980 --> 00:14:12,930
had four different views for a desktop

00:14:10,020 --> 00:14:18,870
for mobile and for a landscape and

00:14:12,930 --> 00:14:22,190
portrait for each of them but it was

00:14:18,870 --> 00:14:24,810
actually not enough you can imagine

00:14:22,190 --> 00:14:28,890
let's say I have a phone 5 inch phone

00:14:24,810 --> 00:14:31,860
and also a tablet which sizes let's say

00:14:28,890 --> 00:14:33,450
10 inches so twice bigger and we ask

00:14:31,860 --> 00:14:37,320
ourselves a question do we really need

00:14:33,450 --> 00:14:39,149
to see the same button covering the same

00:14:37,320 --> 00:14:41,070
percentage of the screen on both devices

00:14:39,149 --> 00:14:44,160
on a small device and twice bigger

00:14:41,070 --> 00:14:45,580
device no right because in that case the

00:14:44,160 --> 00:14:49,570
button would be

00:14:45,580 --> 00:14:54,070
either too large on that on your tablet

00:14:49,570 --> 00:14:55,570
or extremely small on your phone so we

00:14:54,070 --> 00:14:57,580
also need the time we desperately need

00:14:55,570 --> 00:15:00,160
at some separation not only between

00:14:57,580 --> 00:15:02,590
desktop and mobile but also within the

00:15:00,160 --> 00:15:07,000
mobile devices so we needed to separate

00:15:02,590 --> 00:15:10,600
our style sheets the tablet and phone

00:15:07,000 --> 00:15:13,300
views now we did it using a the same

00:15:10,600 --> 00:15:17,350
media queries but in that case we used

00:15:13,300 --> 00:15:20,350
what is called CSS pixels those are

00:15:17,350 --> 00:15:23,650
different from the regular pixels we are

00:15:20,350 --> 00:15:24,970
all used to to see any specific agents

00:15:23,650 --> 00:15:29,800
of the device when you're buying a new

00:15:24,970 --> 00:15:32,290
device for example and those we all know

00:15:29,800 --> 00:15:35,410
that the resolution pixels that are in

00:15:32,290 --> 00:15:39,310
specification are in our case pointless

00:15:35,410 --> 00:15:40,810
because these days devices completely

00:15:39,310 --> 00:15:43,750
different devices with different

00:15:40,810 --> 00:15:48,220
physical sizes can have quite similar

00:15:43,750 --> 00:15:50,730
resolutions but we needed to rely on the

00:15:48,220 --> 00:15:53,650
actual physical size and CSS pixels

00:15:50,730 --> 00:15:56,470
designed specifically for mobile

00:15:53,650 --> 00:15:58,900
developers and as a result they they are

00:15:56,470 --> 00:16:07,600
based on the actual physical size of the

00:15:58,900 --> 00:16:11,340
device so yeah so basically using the

00:16:07,600 --> 00:16:13,720
CSS pixels allow does guarantee that the

00:16:11,340 --> 00:16:16,330
resolution of the tablet the bigger

00:16:13,720 --> 00:16:17,800
device will always be bigger than the

00:16:16,330 --> 00:16:21,850
resolution on phone which is much

00:16:17,800 --> 00:16:23,740
smaller you can see that we are trying

00:16:21,850 --> 00:16:26,800
to use really cutting-edge to

00:16:23,740 --> 00:16:31,990
cutting-edge html5 technologies here and

00:16:26,800 --> 00:16:35,020
in such cases you sometimes in such

00:16:31,990 --> 00:16:38,080
cases sometimes new features backfire

00:16:35,020 --> 00:16:41,140
and first of all day they can affect the

00:16:38,080 --> 00:16:43,090
compatibility between browsers so you

00:16:41,140 --> 00:16:44,290
may lost lost support for some of the

00:16:43,090 --> 00:16:51,700
browser's they need recover your

00:16:44,290 --> 00:16:54,690
application and in our case so in that

00:16:51,700 --> 00:16:57,520
case you really need to be patient and

00:16:54,690 --> 00:16:59,150
now you need to be careful and and of

00:16:57,520 --> 00:17:01,730
course patient because in

00:16:59,150 --> 00:17:04,070
in most parts that that means that you

00:17:01,730 --> 00:17:06,530
need basically we need need to write the

00:17:04,070 --> 00:17:10,910
same code but for each of the major

00:17:06,530 --> 00:17:15,470
browsers like three times for example in

00:17:10,910 --> 00:17:18,460
our the good example of of that on our

00:17:15,470 --> 00:17:22,550
end is what we call the full screen mode

00:17:18,460 --> 00:17:24,170
in html5 client of the blue button you

00:17:22,550 --> 00:17:27,760
have an option of going to a separate

00:17:24,170 --> 00:17:31,100
view where you can only see the

00:17:27,760 --> 00:17:32,330
presentation itself and listen to the

00:17:31,100 --> 00:17:34,610
audio and that's it without any

00:17:32,330 --> 00:17:36,710
unnecessary distraction so it's some

00:17:34,610 --> 00:17:39,380
sort of no distraction view similar to

00:17:36,710 --> 00:17:41,810
what the YouTube website has with the

00:17:39,380 --> 00:17:45,500
videos you can just watch and listen

00:17:41,810 --> 00:17:48,860
that that's it and in order to implement

00:17:45,500 --> 00:17:52,460
that we use the full screen API which s

00:17:48,860 --> 00:17:55,070
for right now is exists only as a

00:17:52,460 --> 00:17:58,280
extremely early draft of html5

00:17:55,070 --> 00:18:00,590
specification and that means that all

00:17:58,280 --> 00:18:03,920
the browser supported but they do it

00:18:00,590 --> 00:18:06,730
come they did it differently and that

00:18:03,920 --> 00:18:10,010
that basically means two things that

00:18:06,730 --> 00:18:13,810
means that there are differences in

00:18:10,010 --> 00:18:17,150
naming conventions so the functions and

00:18:13,810 --> 00:18:20,450
events for example all the variables

00:18:17,150 --> 00:18:22,970
that you use in the from the API I have

00:18:20,450 --> 00:18:26,030
completely different names so you need

00:18:22,970 --> 00:18:27,590
to to do to write similar code but with

00:18:26,030 --> 00:18:30,470
with different naming conventions and

00:18:27,590 --> 00:18:32,090
that's even not the worst problem the

00:18:30,470 --> 00:18:34,670
worst is that the implementations

00:18:32,090 --> 00:18:37,730
themselves can can differ and that means

00:18:34,670 --> 00:18:40,460
that you not only need to copy paste of

00:18:37,730 --> 00:18:42,770
your your code and change the naming but

00:18:40,460 --> 00:18:45,950
also the implement the behavior of the

00:18:42,770 --> 00:18:47,750
function can can can be different in in

00:18:45,950 --> 00:18:51,020
the case of fullscreen API for example

00:18:47,750 --> 00:18:53,690
you have events that are triggered every

00:18:51,020 --> 00:18:57,170
time for every time something happens

00:18:53,690 --> 00:18:59,150
with the interaction between user a full

00:18:57,170 --> 00:19:02,450
screen for example the user enters the

00:18:59,150 --> 00:19:05,240
full screen mode and some event is

00:19:02,450 --> 00:19:07,820
triggered and in firefox from our

00:19:05,240 --> 00:19:09,740
experience in firefox and chrome those

00:19:07,820 --> 00:19:12,520
events just need to be applied to

00:19:09,740 --> 00:19:15,559
different elements so you that

00:19:12,520 --> 00:19:17,600
makes the idea of one implementation

00:19:15,559 --> 00:19:20,570
even with different naming but one

00:19:17,600 --> 00:19:23,270
implementation just just impossible so

00:19:20,570 --> 00:19:25,400
you really need to write three different

00:19:23,270 --> 00:19:31,100
different functionality for each of the

00:19:25,400 --> 00:19:34,640
browsers and another another important

00:19:31,100 --> 00:19:36,160
aspect of html5 development that needs

00:19:34,640 --> 00:19:39,620
to be considered when you'll turn

00:19:36,160 --> 00:19:42,950
transitioning to the mobile is also

00:19:39,620 --> 00:19:45,950
performance and in our case we faced a

00:19:42,950 --> 00:19:47,780
performance challenge when we were

00:19:45,950 --> 00:19:51,860
implementing the feature that we called

00:19:47,780 --> 00:19:55,370
sliding menu just a little of background

00:19:51,860 --> 00:19:57,799
here of course we all know that that

00:19:55,370 --> 00:20:00,200
space is very valuable on a mobile

00:19:57,799 --> 00:20:02,780
devices and in big blue button we have

00:20:00,200 --> 00:20:05,690
three modules so it's a user list

00:20:02,780 --> 00:20:08,419
whiteboard and the chat and we couldn't

00:20:05,690 --> 00:20:11,690
really feed all of them on the mobile

00:20:08,419 --> 00:20:14,809
screen by default so we decided to put

00:20:11,690 --> 00:20:16,970
on the whiteboard a chat and the user

00:20:14,809 --> 00:20:21,169
list and those here the list of options

00:20:16,970 --> 00:20:23,980
available we put it on an offset menus

00:20:21,169 --> 00:20:27,410
so it so many that is hidden by default

00:20:23,980 --> 00:20:30,010
but by clicking the button the hamburger

00:20:27,410 --> 00:20:32,660
button you can just trigger the menu and

00:20:30,010 --> 00:20:34,990
also you we've all used to such it kind

00:20:32,660 --> 00:20:39,049
of men use the offset menus that slide

00:20:34,990 --> 00:20:41,120
from the side and we used to see those

00:20:39,049 --> 00:20:43,340
you know the net effect native

00:20:41,120 --> 00:20:45,740
applications to mobile devices so we

00:20:43,340 --> 00:20:49,780
really wanted to implement to to provide

00:20:45,740 --> 00:20:52,370
the same kind of experience to user and

00:20:49,780 --> 00:20:54,650
the native versions of those menus

00:20:52,370 --> 00:20:57,650
usually have animations so we added

00:20:54,650 --> 00:21:00,080
animations as well and that's where we

00:20:57,650 --> 00:21:03,950
had a terrific performance problem

00:21:00,080 --> 00:21:07,610
performance challenge first of all if

00:21:03,950 --> 00:21:10,690
since we have a html5 application we

00:21:07,610 --> 00:21:13,970
used jquery a lot and it was it was

00:21:10,690 --> 00:21:15,620
obvious just what the we just

00:21:13,970 --> 00:21:19,070
implemented the first implementation of

00:21:15,620 --> 00:21:21,860
this side sliding menu we did it through

00:21:19,070 --> 00:21:25,010
the jquery through animate method in

00:21:21,860 --> 00:21:25,970
jquery and we noticed that it worked

00:21:25,010 --> 00:21:27,650
really slow

00:21:25,970 --> 00:21:31,720
if we could do anything with the

00:21:27,650 --> 00:21:35,570
performance of that that's when we

00:21:31,720 --> 00:21:37,520
switch to CSS animations she SAT

00:21:35,570 --> 00:21:41,780
animations I'm much faster and there are

00:21:37,520 --> 00:21:43,880
a few reasons for that first of all

00:21:41,780 --> 00:21:47,480
there is the GPU acceleration so the

00:21:43,880 --> 00:21:50,210
hardware is trying to basically separate

00:21:47,480 --> 00:21:52,700
the each animation trying to put each

00:21:50,210 --> 00:21:56,450
animation to a separate separate GPU

00:21:52,700 --> 00:21:58,280
layer and in that way it can be

00:21:56,450 --> 00:22:00,740
performed in parallel with everything

00:21:58,280 --> 00:22:03,710
else and as a result it's it's obviously

00:22:00,740 --> 00:22:05,390
different much faster without any any

00:22:03,710 --> 00:22:09,130
unnecessary interaction with anything

00:22:05,390 --> 00:22:11,980
else and also since we moved our

00:22:09,130 --> 00:22:16,550
animation logic from the JavaScript to

00:22:11,980 --> 00:22:18,140
CSS there there's no memory problems

00:22:16,550 --> 00:22:20,840
anymore because there is no like garbage

00:22:18,140 --> 00:22:25,820
collector and no more memory overhead in

00:22:20,840 --> 00:22:28,640
that sense and also CSS animations

00:22:25,820 --> 00:22:32,000
implement what is called request

00:22:28,640 --> 00:22:35,540
animation frame principle and that's

00:22:32,000 --> 00:22:38,240
basically browsers with browsers way of

00:22:35,540 --> 00:22:42,970
optimizing animations the browser is

00:22:38,240 --> 00:22:45,700
trying to combine close animations by

00:22:42,970 --> 00:22:49,010
putting them together into one unit and

00:22:45,700 --> 00:22:51,890
repaint perform the rendering of that

00:22:49,010 --> 00:22:55,580
unit into one repaint cycle so that

00:22:51,890 --> 00:22:57,980
means the browser needs less cycle

00:22:55,580 --> 00:23:03,080
repaint cycles to perform the whole

00:22:57,980 --> 00:23:06,110
animation yeah so so just basically

00:23:03,080 --> 00:23:08,300
don't don't forget that even even though

00:23:06,110 --> 00:23:12,560
our gadgets are quite powerful nowadays

00:23:08,300 --> 00:23:16,810
since still still a shim still the

00:23:12,560 --> 00:23:19,610
desktop computer some something can go

00:23:16,810 --> 00:23:21,530
really fast on desktop computer but not

00:23:19,610 --> 00:23:24,670
on the mobile device you need to to do

00:23:21,530 --> 00:23:30,020
some performance performance adjustments

00:23:24,670 --> 00:23:32,090
and that's that was a short overview of

00:23:30,020 --> 00:23:34,070
the challenges of our experience of

00:23:32,090 --> 00:23:36,470
development features and big blue button

00:23:34,070 --> 00:23:39,740
for a big blue button html5 client for

00:23:36,470 --> 00:23:42,480
the last year or so and

00:23:39,740 --> 00:23:45,390
that's those features are already

00:23:42,480 --> 00:23:47,280
implemented and the Danny will talk more

00:23:45,390 --> 00:23:53,280
about the future feature the future of

00:23:47,280 --> 00:23:54,870
people but initiative of our client so

00:23:53,280 --> 00:23:57,120
as Max and said those are all the

00:23:54,870 --> 00:23:59,130
features that we currently have inside

00:23:57,120 --> 00:24:01,530
our client and so now I'm going to

00:23:59,130 --> 00:24:03,540
discuss the features that we are

00:24:01,530 --> 00:24:06,780
currently developing and hoping to get

00:24:03,540 --> 00:24:08,490
real soon so we're currently trying to

00:24:06,780 --> 00:24:11,010
roll up features that will make the

00:24:08,490 --> 00:24:14,640
html5 client more of a full-fledged

00:24:11,010 --> 00:24:16,350
client and make it an equal competitor

00:24:14,640 --> 00:24:19,050
with our flash client and so they can

00:24:16,350 --> 00:24:22,130
both be on part is currently before the

00:24:19,050 --> 00:24:25,890
html5 client lacked some features that

00:24:22,130 --> 00:24:27,870
you just won't be able to get and the

00:24:25,890 --> 00:24:29,970
flash client would always be your choice

00:24:27,870 --> 00:24:32,640
if you want some of those features so

00:24:29,970 --> 00:24:34,710
we're currently trying implemented some

00:24:32,640 --> 00:24:37,110
presenter features and there's always

00:24:34,710 --> 00:24:38,670
more presenter features being added so

00:24:37,110 --> 00:24:40,920
you can have more control over a

00:24:38,670 --> 00:24:43,890
presentation if you are presenting

00:24:40,920 --> 00:24:46,200
through the html5 plan and the key

00:24:43,890 --> 00:24:48,900
feature I'm going to discuss is html5

00:24:46,200 --> 00:24:53,340
video and that was the key feature we

00:24:48,900 --> 00:24:57,780
were lacking that the flash client had

00:24:53,340 --> 00:25:00,390
and that is coming to an end now and

00:24:57,780 --> 00:25:03,420
that's why I'm going to be discussing so

00:25:00,390 --> 00:25:07,470
specifically with html5 video it is the

00:25:03,420 --> 00:25:09,690
presenter screen so with the flash

00:25:07,470 --> 00:25:11,970
client presenter they can share their

00:25:09,690 --> 00:25:14,790
desktop and they can also broadcast

00:25:11,970 --> 00:25:16,470
webcams and previously they smell 5

00:25:14,790 --> 00:25:18,960
client wouldn't be able to receive that

00:25:16,470 --> 00:25:21,930
video and that's because the flash

00:25:18,960 --> 00:25:24,330
client was for the most part the only

00:25:21,930 --> 00:25:27,690
client that was meant to see this video

00:25:24,330 --> 00:25:30,420
and for it because of that it was in the

00:25:27,690 --> 00:25:33,540
format that was viewable only by flash

00:25:30,420 --> 00:25:36,690
and at the time that was acceptable but

00:25:33,540 --> 00:25:38,820
now with html5 we have to have a

00:25:36,690 --> 00:25:43,620
different way of delivering video that

00:25:38,820 --> 00:25:47,700
the html5 client can display and so this

00:25:43,620 --> 00:25:49,660
feature is done thanks to a technology

00:25:47,700 --> 00:25:51,730
called web RTC

00:25:49,660 --> 00:25:56,020
and so that's the end for web real-time

00:25:51,730 --> 00:25:58,120
communication and so it is it's an API

00:25:56,020 --> 00:26:00,460
and it's implemented by the web browser

00:25:58,120 --> 00:26:03,040
and what it does is it allows for

00:26:00,460 --> 00:26:06,250
browser to browser or peer-to-peer

00:26:03,040 --> 00:26:08,950
communication and it is secure

00:26:06,250 --> 00:26:11,620
communication and this communication is

00:26:08,950 --> 00:26:14,170
done it's in the browser and it can be

00:26:11,620 --> 00:26:16,780
done with coal need JavaScript so that

00:26:14,170 --> 00:26:19,330
makes it perfect for our html5 client

00:26:16,780 --> 00:26:24,040
you don't have to have additional

00:26:19,330 --> 00:26:27,220
plugins or any other type of add-on or

00:26:24,040 --> 00:26:29,680
any other type of technology it can be

00:26:27,220 --> 00:26:34,380
done through an HTML page with pure

00:26:29,680 --> 00:26:37,690
JavaScript the next big component in

00:26:34,380 --> 00:26:40,000
receiving video is free switch so free

00:26:37,690 --> 00:26:42,700
switch is an open source project and is

00:26:40,000 --> 00:26:44,770
a software telephone switch it's a core

00:26:42,700 --> 00:26:47,650
component of big blue button already and

00:26:44,770 --> 00:26:49,720
it's what we use for the audio mixer so

00:26:47,650 --> 00:26:52,660
in the big blue button meeting many

00:26:49,720 --> 00:26:55,990
people can share or receive audio and

00:26:52,660 --> 00:26:58,420
what happens is all the different users

00:26:55,990 --> 00:27:00,340
they can send in their different audio

00:26:58,420 --> 00:27:03,550
streams from their microphone or any

00:27:00,340 --> 00:27:06,040
peripheral and what will happen is it

00:27:03,550 --> 00:27:08,710
will get sent to free switch and this

00:27:06,040 --> 00:27:11,440
audio mixer it will combine all the

00:27:08,710 --> 00:27:14,740
audio streams into one stream and send

00:27:11,440 --> 00:27:16,900
that stream out so instead of some other

00:27:14,740 --> 00:27:18,760
type of telephony software where

00:27:16,900 --> 00:27:21,400
everyone shares their individuals

00:27:18,760 --> 00:27:24,790
streamed each peer they all get sent to

00:27:21,400 --> 00:27:27,100
one local server or one server then that

00:27:24,790 --> 00:27:29,740
server will mix it and send out one

00:27:27,100 --> 00:27:32,700
stream so it's much more efficient than

00:27:29,740 --> 00:27:37,030
if all the peers were communicating and

00:27:32,700 --> 00:27:39,490
free switch has their latest release 1.6

00:27:37,030 --> 00:27:43,000
the now support video and they do

00:27:39,490 --> 00:27:45,610
something similar with video and so what

00:27:43,000 --> 00:27:48,310
they have accomplished is many people

00:27:45,610 --> 00:27:50,440
can send in a video stream to free

00:27:48,310 --> 00:27:53,020
switch and what free switch is going to

00:27:50,440 --> 00:27:55,720
do is instead of relaying the individual

00:27:53,020 --> 00:27:59,050
streams each user is on the server side

00:27:55,720 --> 00:28:02,740
it will combine all the streams it will

00:27:59,050 --> 00:28:03,370
tile each of the video streams into any

00:28:02,740 --> 00:28:06,160
layout

00:28:03,370 --> 00:28:11,230
you wish and then it will send out one

00:28:06,160 --> 00:28:13,480
video stream as previously previously in

00:28:11,230 --> 00:28:16,809
other video implementations all the

00:28:13,480 --> 00:28:19,600
individual streams would get sent to the

00:28:16,809 --> 00:28:22,000
server and then it would relay it but

00:28:19,600 --> 00:28:25,960
then that meant you had a video stream

00:28:22,000 --> 00:28:28,030
for each you each video stream that you

00:28:25,960 --> 00:28:30,670
received was its own video stream which

00:28:28,030 --> 00:28:33,280
created a lot of overhead but now you

00:28:30,670 --> 00:28:37,750
can just receive one video stream and

00:28:33,280 --> 00:28:39,910
the next big component of receiving

00:28:37,750 --> 00:28:43,690
video is a component of free switch and

00:28:39,910 --> 00:28:46,000
that is called mod verlo so mod ver

00:28:43,690 --> 00:28:48,580
though is a free switch endpoint and

00:28:46,000 --> 00:28:51,760
what it does is it allows you to use

00:28:48,580 --> 00:28:54,910
JSON and send messages and receive

00:28:51,760 --> 00:28:57,550
messages to the free switch server using

00:28:54,910 --> 00:29:01,090
secure web sockets so their initial

00:28:57,550 --> 00:29:04,120
target is WebRTC and the purpose was to

00:29:01,090 --> 00:29:06,640
simplify coding and implementing calls

00:29:04,120 --> 00:29:11,020
from the web browser and other devices

00:29:06,640 --> 00:29:13,720
directly to the server so at web RTC we

00:29:11,020 --> 00:29:16,360
can have a call originated from an html5

00:29:13,720 --> 00:29:19,570
web page and it will connect directly to

00:29:16,360 --> 00:29:22,980
the free switch server and is just done

00:29:19,570 --> 00:29:26,679
using javascript and json messages and

00:29:22,980 --> 00:29:29,679
what this allows us to do is it allows

00:29:26,679 --> 00:29:33,370
you to share all web browser support

00:29:29,679 --> 00:29:35,620
media so in this case desktop sharing or

00:29:33,370 --> 00:29:40,750
sharing your screen we can capture that

00:29:35,620 --> 00:29:42,850
and send it to the free switch server so

00:29:40,750 --> 00:29:45,070
screen sharing was the main purpose of

00:29:42,850 --> 00:29:49,360
implementing video into the html5 client

00:29:45,070 --> 00:29:52,720
and so this started with the web browser

00:29:49,360 --> 00:29:55,120
so this is still a fairly new technology

00:29:52,720 --> 00:29:57,250
it's fully supported by Firefox and

00:29:55,120 --> 00:29:59,470
Google Chrome but it's still a

00:29:57,250 --> 00:30:02,740
relatively new feature and they both

00:29:59,470 --> 00:30:09,179
handle them fairly differently so a

00:30:02,740 --> 00:30:12,220
Firefox for example you we've created a

00:30:09,179 --> 00:30:15,490
web browser extension for both google

00:30:12,220 --> 00:30:16,509
chrome and firefox and so with firefox

00:30:15,490 --> 00:30:20,769
for example

00:30:16,509 --> 00:30:23,320
I had to make a extension and what that

00:30:20,769 --> 00:30:25,779
extension does is it will set different

00:30:23,320 --> 00:30:28,359
flags and Firefox that will allow you to

00:30:25,779 --> 00:30:31,899
share your screen and you also for

00:30:28,359 --> 00:30:35,469
security reasons have to add your domain

00:30:31,899 --> 00:30:37,690
to a whitelist so that way a rogue

00:30:35,469 --> 00:30:41,349
webpage cannot just try to broadcast

00:30:37,690 --> 00:30:43,269
your screen to their server and once

00:30:41,349 --> 00:30:46,149
you've accomplished that you can just

00:30:43,269 --> 00:30:48,909
access the screen sharing API just like

00:30:46,149 --> 00:30:51,279
any other JavaScript API with google

00:30:48,909 --> 00:30:53,259
chrome though it's a bit different

00:30:51,279 --> 00:30:55,449
because of google chrome they have

00:30:53,259 --> 00:30:58,179
implemented screen sharing as an

00:30:55,449 --> 00:31:01,509
extension level API so what this means

00:30:58,179 --> 00:31:04,599
is you have to have an extension that

00:31:01,509 --> 00:31:08,139
will enable screen sharing it will also

00:31:04,599 --> 00:31:11,049
na your domain to a white list of

00:31:08,139 --> 00:31:14,019
allowable domains but you also have to

00:31:11,049 --> 00:31:17,529
have the extension as a communication

00:31:14,019 --> 00:31:20,229
layer so what will happen is your web

00:31:17,529 --> 00:31:22,690
page will communicate with the extension

00:31:20,229 --> 00:31:25,449
it will send messages back and forth and

00:31:22,690 --> 00:31:28,599
say that wants to request the user

00:31:25,449 --> 00:31:30,789
screen and so that extension will then

00:31:28,599 --> 00:31:33,399
receive that message and communicate

00:31:30,789 --> 00:31:37,569
with google chrome itself the extension

00:31:33,399 --> 00:31:41,739
level API and then that extension API if

00:31:37,569 --> 00:31:45,359
it think if the user has enabled the

00:31:41,739 --> 00:31:47,499
correct permissions then it will request

00:31:45,359 --> 00:31:49,359
permission from the user so the user

00:31:47,499 --> 00:31:52,690
will be able to select what they want to

00:31:49,359 --> 00:31:54,849
share and then it will send it to the

00:31:52,690 --> 00:31:57,329
extension then the extension needs to

00:31:54,849 --> 00:32:01,029
communicate it back to the web page and

00:31:57,329 --> 00:32:04,089
so that got your able to do that locally

00:32:01,029 --> 00:32:08,679
but now what we want to do is take that

00:32:04,089 --> 00:32:10,479
video and send it off through web RTC so

00:32:08,679 --> 00:32:13,569
once we've obtained permission from the

00:32:10,479 --> 00:32:16,449
web browser and obtained a screen we can

00:32:13,569 --> 00:32:18,429
make a web RTC call so just like we

00:32:16,449 --> 00:32:21,999
would make a web RTC call with a

00:32:18,429 --> 00:32:24,539
microphone or requesting a web camera we

00:32:21,999 --> 00:32:27,429
have a screen so we can pass that as

00:32:24,539 --> 00:32:30,190
just like any other piece of hardware

00:32:27,429 --> 00:32:32,769
and then from our client are

00:32:30,190 --> 00:32:35,799
client JavaScript we would connect to

00:32:32,769 --> 00:32:39,429
the the free switch endpoint mod verdot

00:32:35,799 --> 00:32:42,580
and then mod ver though we connect us to

00:32:39,429 --> 00:32:45,070
free switch and then free switch it

00:32:42,580 --> 00:32:47,259
would receive our video stream and it

00:32:45,070 --> 00:32:49,659
would receive any other video stream as

00:32:47,259 --> 00:32:53,289
being shared to the server and would mix

00:32:49,659 --> 00:32:55,179
them all together and send us back that

00:32:53,289 --> 00:33:01,899
one video stream and that one video

00:32:55,179 --> 00:33:03,970
stream is html5 compatible and snow in

00:33:01,899 --> 00:33:07,690
our finished product we can send and

00:33:03,970 --> 00:33:09,970
receive web RTC audio webcam video and

00:33:07,690 --> 00:33:12,730
desktop video so the main purpose of

00:33:09,970 --> 00:33:16,960
this was the desktop video being sent

00:33:12,730 --> 00:33:20,379
from a flash client and this is now

00:33:16,960 --> 00:33:23,710
implemented but we also have the ability

00:33:20,379 --> 00:33:27,059
now to share and broadcast your screen

00:33:23,710 --> 00:33:31,750
from the html5 client and once we have

00:33:27,059 --> 00:33:33,340
receiving fully ready we can begin

00:33:31,750 --> 00:33:36,009
working on these other presenter

00:33:33,340 --> 00:33:39,669
features like broadcasting and then

00:33:36,009 --> 00:33:41,710
eventually when other video streams get

00:33:39,669 --> 00:33:44,320
added such as webcam when they get

00:33:41,710 --> 00:33:46,600
shared over web RTC we can receive them

00:33:44,320 --> 00:33:50,460
without having to make a change and we

00:33:46,600 --> 00:33:53,350
can also have support for audio and

00:33:50,460 --> 00:33:55,840
through this using the mod Berto

00:33:53,350 --> 00:33:58,990
endpoint on free switch it forces secure

00:33:55,840 --> 00:34:02,889
communication because mod Berto forces

00:33:58,990 --> 00:34:05,440
you to use secure web sockets so because

00:34:02,889 --> 00:34:10,810
of this we now had to serve the html5

00:34:05,440 --> 00:34:14,919
client from HTTPS and use us use secure

00:34:10,810 --> 00:34:17,740
sockets and now as I said with free

00:34:14,919 --> 00:34:20,020
switch 1.6 the video mixing it's much

00:34:17,740 --> 00:34:22,089
more efficient video streaming because

00:34:20,020 --> 00:34:24,819
instead of having to receive and then

00:34:22,089 --> 00:34:26,530
bid individual video stream for each

00:34:24,819 --> 00:34:29,050
video string you want to display and the

00:34:26,530 --> 00:34:31,480
overhead of creating each new video

00:34:29,050 --> 00:34:33,490
stream we can just receive one stream

00:34:31,480 --> 00:34:36,550
and all the processing is done on the

00:34:33,490 --> 00:34:39,550
server and another important feature of

00:34:36,550 --> 00:34:42,730
this was on Mac reconnection through

00:34:39,550 --> 00:34:45,730
using the secure web sockets mod berto

00:34:42,730 --> 00:34:49,350
automatically reconnect if a call was

00:34:45,730 --> 00:34:52,480
dropped and so that saves a lot of

00:34:49,350 --> 00:34:55,419
programming time for us we don't have to

00:34:52,480 --> 00:34:58,270
worry about a video stream or an audio

00:34:55,419 --> 00:35:00,400
stream being dropped if it gets dropped

00:34:58,270 --> 00:35:05,260
Mauger though will automatically

00:35:00,400 --> 00:35:10,150
reconnect it for us and so now an hour

00:35:05,260 --> 00:35:13,810
that is a desktop video and it is now

00:35:10,150 --> 00:35:17,730
being sent to the html5 client and that

00:35:13,810 --> 00:35:19,780
is that was one the last few major

00:35:17,730 --> 00:35:23,290
components that we want to have in the

00:35:19,780 --> 00:35:27,570
html5 client and so now we have that the

00:35:23,290 --> 00:35:31,470
html5 client is much more an equal

00:35:27,570 --> 00:35:35,109
competitor with our flash client and

00:35:31,470 --> 00:35:38,740
these are the important links for the

00:35:35,109 --> 00:35:42,160
big lubin project or github repo or

00:35:38,740 --> 00:35:47,560
documentation and our public demo for

00:35:42,160 --> 00:35:49,740
big blue button why should are there any

00:35:47,560 --> 00:35:49,740
questions

00:35:56,080 --> 00:35:58,710
yes

00:36:10,910 --> 00:36:18,120
well the html5 client is now publicly

00:36:14,670 --> 00:36:20,670
available for testing on our on the last

00:36:18,120 --> 00:36:23,100
link our public demo we have all our

00:36:20,670 --> 00:36:27,750
source code available on the first link

00:36:23,100 --> 00:36:29,580
and our beta has been released and is

00:36:27,750 --> 00:36:34,710
available for testing now and it is

00:36:29,580 --> 00:36:37,530
being tested now and once testing has

00:36:34,710 --> 00:36:41,130
been completed and we no longer have

00:36:37,530 --> 00:36:53,900
major issues we can try to schedule a

00:36:41,130 --> 00:36:57,720
release picture of the big blue button

00:36:53,900 --> 00:37:00,420
ordered by development and an action

00:36:57,720 --> 00:37:07,650
plan oh how you communicate interact

00:37:00,420 --> 00:37:10,650
assembles what you integrate how we

00:37:07,650 --> 00:37:14,270
communicate with the developers of flash

00:37:10,650 --> 00:37:16,770
client and the big blue button project

00:37:14,270 --> 00:37:19,200
through see that we work with them very

00:37:16,770 --> 00:37:23,730
closely and we communicate with them

00:37:19,200 --> 00:37:27,090
every day and they we give them updates

00:37:23,730 --> 00:37:30,150
on our client and we communicate all

00:37:27,090 --> 00:37:33,420
changes back and forth between the big

00:37:30,150 --> 00:37:36,570
blue button server work our html5 client

00:37:33,420 --> 00:37:39,300
and we go to visit them a few times a

00:37:36,570 --> 00:37:45,180
year and have lots of back-and-forth

00:37:39,300 --> 00:37:48,650
communication they are located in Ottawa

00:37:45,180 --> 00:37:48,650
of blindside networks

00:37:49,900 --> 00:37:57,770
there's a dozen or so people working on

00:37:54,830 --> 00:37:59,840
that client and blindside networks and

00:37:57,770 --> 00:38:02,630
then deschanel five client consists of

00:37:59,840 --> 00:38:08,840
myself max them Alex and one of the

00:38:02,630 --> 00:38:11,710
workers for blindside networks and you

00:38:08,840 --> 00:38:11,710
have your questions

00:38:14,200 --> 00:38:16,800
yes

00:38:20,440 --> 00:38:33,380
no we have we found some issues with

00:38:29,450 --> 00:38:36,440
data synchronization due to a large

00:38:33,380 --> 00:38:38,330
audience of people testing and that was

00:38:36,440 --> 00:38:41,620
just something that we had never

00:38:38,330 --> 00:38:45,680
experienced before with local testing

00:38:41,620 --> 00:38:49,040
but now on the public server we have

00:38:45,680 --> 00:38:52,460
people who can test it for us and can

00:38:49,040 --> 00:38:56,870
run it for several days inform us of any

00:38:52,460 --> 00:39:00,920
bugs and we are currently addressing any

00:38:56,870 --> 00:39:05,330
issues if there are any and then when we

00:39:00,920 --> 00:39:14,660
see fit we can move forward to a proper

00:39:05,330 --> 00:39:17,650
release any more questions yes anybody

00:39:14,660 --> 00:39:17,650
wants to contribute

00:39:18,330 --> 00:39:25,770
actions yes of course so the first link

00:39:22,470 --> 00:39:28,530
there is the big boob on repository for

00:39:25,770 --> 00:39:31,590
the big blue button account and our

00:39:28,530 --> 00:39:34,860
documentation is on the second length or

00:39:31,590 --> 00:39:37,230
on biblia and org and we have all the

00:39:34,860 --> 00:39:39,060
documentation prepared for anybody who

00:39:37,230 --> 00:39:40,860
wants to set up a big blue bun server

00:39:39,060 --> 00:39:43,200
and for anybody who wants to begin

00:39:40,860 --> 00:39:47,580
development and it tells you all the

00:39:43,200 --> 00:39:50,640
steps to submit a pull request submit a

00:39:47,580 --> 00:39:53,850
bug and just how to develop and set it

00:39:50,640 --> 00:39:55,530
up and then so you can visit both links

00:39:53,850 --> 00:39:57,780
and you should have all the information

00:39:55,530 --> 00:40:05,780
you have and then you can contribute to

00:39:57,780 --> 00:40:05,780
big blue button anybody else

00:40:07,559 --> 00:40:10,910

YouTube URL: https://www.youtube.com/watch?v=AbHdNoLyMbM


