Title: FSOSS 2016: Monitoring Java Application Performance Using Thermostat
Publication date: 2016-11-24
Playlist: FSOSS 2016
Description: 
	Speakers:  Jie Kang, Alex Macdonald, Josh Matsuoka, RedHat

Traditionally, proprietary tools for Java application monitoring have reigned superior over their Open Source counter-parts, with little competition. Until now. Thermostat is an Open Source JVM instrumentation tool that aims to change the way you monitor and visualize JVM activity. In addition to an introducing to the tool and giving a live demonstration showing current and in-development features, we will be discussing our development style and how anyone can start making contributions to Thermostat. Come hear about our latest stable release and in-development features, and learn how to set-up and use Thermostat today.
Captions: 
	00:00:21,449 --> 00:00:27,900
so first we'll start with the agenda in

00:00:25,840 --> 00:00:32,349
the beginning we'll give a little bit of

00:00:27,900 --> 00:00:34,390
a demo and then moving straight on let's

00:00:32,349 --> 00:00:35,940
start into the demos so first we have

00:00:34,390 --> 00:00:39,190
thermostatic docker

00:00:35,940 --> 00:00:42,309
next we'll have plug-in development and

00:00:39,190 --> 00:00:48,100
then third a second bite man finally

00:00:42,309 --> 00:00:51,520
we'll close off the community so what is

00:00:48,100 --> 00:00:53,440
understand simple this way to describe

00:00:51,520 --> 00:00:56,140
the result is an instrumentation tool

00:00:53,440 --> 00:00:58,510
for hotspot idea so basically whenever

00:00:56,140 --> 00:01:00,309
you have JVM applications or Java

00:00:58,510 --> 00:01:03,129
applications running a thermostat is

00:01:00,309 --> 00:01:04,600
there to monitor those applications and

00:01:03,129 --> 00:01:07,870
it'll give you an information on them

00:01:04,600 --> 00:01:09,580
such as CP usage memory you know let you

00:01:07,870 --> 00:01:11,650
see how how long garbage collections

00:01:09,580 --> 00:01:14,220
take that unlike you take keep docks and

00:01:11,650 --> 00:01:19,630
analyze them and much much more

00:01:14,220 --> 00:01:21,159
so along with thermos size overview we

00:01:19,630 --> 00:01:23,920
have the components of the thermostat

00:01:21,159 --> 00:01:26,560
and so basically how that works so

00:01:23,920 --> 00:01:30,220
thermostat consists of three major

00:01:26,560 --> 00:01:33,579
components - agent storage and client so

00:01:30,220 --> 00:01:35,439
starting off with the agent there what's

00:01:33,579 --> 00:01:37,810
that agent is basically the monitoring

00:01:35,439 --> 00:01:39,490
device so when you have an agent running

00:01:37,810 --> 00:01:41,290
on a machine it's going to be the one

00:01:39,490 --> 00:01:43,280
that monitors all the Java applications

00:01:41,290 --> 00:01:47,240
and then sense

00:01:43,280 --> 00:01:50,600
data to the storage so the storage is

00:01:47,240 --> 00:01:53,060
burned all the data is kept at the

00:01:50,600 --> 00:01:57,170
moment service that supports MongoDB as

00:01:53,060 --> 00:01:58,909
the backend and there is potential for

00:01:57,170 --> 00:02:01,159
switching to other things like us well

00:01:58,909 --> 00:02:03,710
not but the code isn't there we have

00:02:01,159 --> 00:02:07,159
another thing to note about the storage

00:02:03,710 --> 00:02:08,959
is that it accepts both direct

00:02:07,159 --> 00:02:11,750
connections and connections through an

00:02:08,959 --> 00:02:15,140
HTTP instance so the monolith DB

00:02:11,750 --> 00:02:16,910
back-end you can run an agent directly

00:02:15,140 --> 00:02:19,910
connected to the moment EE and

00:02:16,910 --> 00:02:24,050
interviews the MongoDB Java driver to

00:02:19,910 --> 00:02:27,590
send information to run or you can also

00:02:24,050 --> 00:02:30,140
run a web layer the thermostat layer on

00:02:27,590 --> 00:02:32,450
top of the moment to be vector and have

00:02:30,140 --> 00:02:34,459
users such as the agent or the client

00:02:32,450 --> 00:02:36,530
access that instead and this gives you a

00:02:34,459 --> 00:02:41,180
little extra layer of security and it

00:02:36,530 --> 00:02:43,340
opens up opportunities for HD finally we

00:02:41,180 --> 00:02:45,980
have the clients which is generally the

00:02:43,340 --> 00:02:48,500
most interesting part since it shows

00:02:45,980 --> 00:02:50,480
basically all the data and the

00:02:48,500 --> 00:02:55,570
thermostat of it woman offers a GUI

00:02:50,480 --> 00:02:55,570
client a graphical user interface and Cl

00:02:55,580 --> 00:03:01,650
along with the clients and the agent we

00:02:59,730 --> 00:03:04,830
also have a command channel and this is

00:03:01,650 --> 00:03:06,660
basically a connection between clients

00:03:04,830 --> 00:03:09,360
and agents that allow the client to

00:03:06,660 --> 00:03:14,150
request things from the region so this

00:03:09,360 --> 00:03:27,540
would be things like in thermostat

00:03:14,150 --> 00:03:29,850
complete permission is to kill any Jamie

00:03:27,540 --> 00:03:31,980
oh that's game on this all of that stuff

00:03:29,850 --> 00:03:36,690
will go through into prevention rather

00:03:31,980 --> 00:03:38,970
than through storage so while we're here

00:03:36,690 --> 00:03:42,150
the best way to get a good idea of what

00:03:38,970 --> 00:03:44,480
their step is to see is to see there

00:03:42,150 --> 00:03:44,480
were several

00:03:50,470 --> 00:03:56,190
so to the terminal

00:04:01,370 --> 00:04:04,540
this is a first

00:04:05,020 --> 00:04:07,980
posit Ori

00:04:10,430 --> 00:04:17,239
so as I said before if there was sadness

00:04:13,189 --> 00:04:19,370
of do components but before you ever on

00:04:17,239 --> 00:04:21,620
the thermostat we need to set up all the

00:04:19,370 --> 00:04:23,240
credentials and things like that so for

00:04:21,620 --> 00:04:25,220
example when the agent connects the

00:04:23,240 --> 00:04:27,229
storage there's a username the password

00:04:25,220 --> 00:04:29,180
event when the client connects to the

00:04:27,229 --> 00:04:31,580
storage that's also username a testament

00:04:29,180 --> 00:04:33,979
for that and we do have a pretty

00:04:31,580 --> 00:04:36,800
extensive credential and access control

00:04:33,979 --> 00:04:38,120
system but for the purposes of the demo

00:04:36,800 --> 00:04:43,360
thank you baby

00:04:38,120 --> 00:04:43,360
and easy so we do have a setup command

00:04:45,190 --> 00:04:51,669
so once we've done that we can start the

00:04:49,160 --> 00:04:51,669
web storage

00:04:53,669 --> 00:04:58,560
and so what this is going to give us

00:04:55,620 --> 00:05:01,319
it's both the mama BB backhand as well

00:04:58,560 --> 00:05:04,139
as an HTTP layer on top of that so once

00:05:01,319 --> 00:05:08,060
this is running agents of clients can

00:05:04,139 --> 00:05:08,060
access it so the next step would be to

00:05:11,660 --> 00:05:14,860
to start the agent

00:05:16,969 --> 00:05:24,019
defaults and this is the once as I said

00:05:21,919 --> 00:05:27,019
before this is what's monitoring all of

00:05:24,019 --> 00:05:29,239
your java applications and sending that

00:05:27,019 --> 00:05:31,309
information to the storage and finally

00:05:29,239 --> 00:05:35,029
we're going to look at everything that's

00:05:31,309 --> 00:05:37,569
happened through the moving user

00:05:35,029 --> 00:05:37,569
interface

00:05:40,569 --> 00:05:46,210
their thermostat is up and we can see on

00:05:43,899 --> 00:05:48,129
the sidebar we have JPS

00:05:46,210 --> 00:05:50,979
we have the host machine information

00:05:48,129 --> 00:05:55,110
about that as you can see I'm running

00:05:50,979 --> 00:05:57,580
IntelliJ on the sides seek information

00:05:55,110 --> 00:06:00,999
garbage collection over here there's a

00:05:57,580 --> 00:06:08,909
button for garbage collection do keep

00:06:00,999 --> 00:06:15,119
thumbs threads you can see my threads

00:06:08,909 --> 00:06:15,119
should also be profile the threads

00:06:16,580 --> 00:06:22,400
see every single thread that's currently

00:06:18,680 --> 00:06:25,400
running and the state is in overtime

00:06:22,400 --> 00:06:32,410
new features the spectroscope father so

00:06:25,400 --> 00:06:38,080
you can see stacktrace it's running a

00:06:32,410 --> 00:06:38,080
bunch of other things beside a nutshell

00:06:39,910 --> 00:06:46,970
one thing to note is that at the moment

00:06:45,260 --> 00:06:49,250
what I just showed you I ran the web

00:06:46,970 --> 00:06:52,880
storage the agents of the Kuti we also

00:06:49,250 --> 00:06:53,720
provide some easy commands of hope it

00:06:52,880 --> 00:06:59,060
brings together

00:06:53,720 --> 00:07:00,320
so let's orach runs web storage was we

00:06:59,060 --> 00:07:02,750
need the storage across the web layer

00:07:00,320 --> 00:07:05,000
and then we have web sort of service it

00:07:02,750 --> 00:07:07,030
run this web storage and web layer as

00:07:05,000 --> 00:07:09,830
well as the agent on the local machine

00:07:07,030 --> 00:07:13,940
and then we also have an even quicker

00:07:09,830 --> 00:07:16,400
command and I'm going to close

00:07:13,940 --> 00:07:18,210
everything they just before run this

00:07:16,400 --> 00:07:20,940
it's going to basically

00:07:18,210 --> 00:07:23,280
everything before you all connected so

00:07:20,940 --> 00:07:26,100
it's much easier now to get started with

00:07:23,280 --> 00:07:28,610
there the staff have yourself looking at

00:07:26,100 --> 00:07:28,610
GPS

00:07:29,740 --> 00:07:35,389
the key thing to note about thermoset

00:07:32,569 --> 00:07:38,180
compared to other java forefathers is

00:07:35,389 --> 00:07:40,009
that all of our systems agent-client and

00:07:38,180 --> 00:07:42,349
storage are designed to work with

00:07:40,009 --> 00:07:44,449
distributed environments so what that

00:07:42,349 --> 00:07:46,370
means is if you have multiple machines

00:07:44,449 --> 00:07:48,410
you can set it up so that you have

00:07:46,370 --> 00:07:50,690
agents on some machines which are

00:07:48,410 --> 00:07:53,449
monitoring all the applications running

00:07:50,690 --> 00:07:56,030
there you have say a storage on another

00:07:53,449 --> 00:07:58,160
machine web layer where the agents will

00:07:56,030 --> 00:08:00,650
send them stop machine and then finally

00:07:58,160 --> 00:08:04,460
if you need client access you can access

00:08:00,650 --> 00:08:06,650
web layer through any machine so that's

00:08:04,460 --> 00:08:10,880
pretty powerful

00:08:06,650 --> 00:08:15,180
so back to the slides

00:08:10,880 --> 00:08:20,270
the next topic is thermostat the doctor

00:08:15,180 --> 00:08:21,660
I'm also going to be doing history so

00:08:20,270 --> 00:08:23,310
doctor

00:08:21,660 --> 00:08:29,310
we've had some presentations earlier

00:08:23,310 --> 00:08:31,170
today which I'll be the doctor today we

00:08:29,310 --> 00:08:34,289
also have another one I'm just dealing

00:08:31,170 --> 00:08:36,930
the thermostat and doctor so pick over

00:08:34,289 --> 00:08:38,910
you the doctor itself it's basically a

00:08:36,930 --> 00:08:40,940
tool to support docker containers and

00:08:38,910 --> 00:08:43,140
those containers are software containers

00:08:40,940 --> 00:08:45,780
that you're basically my sleeve in

00:08:43,140 --> 00:08:46,350
userspace instances so for layman's

00:08:45,780 --> 00:08:49,080
terms

00:08:46,350 --> 00:08:51,030
they're basically super lightweight the

00:08:49,080 --> 00:08:54,690
VMS that rot on the machine

00:08:51,030 --> 00:08:56,700
through the doctor system and the great

00:08:54,690 --> 00:08:59,250
advantage of that is that if you have a

00:08:56,700 --> 00:09:01,110
docker container but you build on your

00:08:59,250 --> 00:09:03,510
machine and then you give it to someone

00:09:01,110 --> 00:09:06,740
else who run software and runs that

00:09:03,510 --> 00:09:06,740
container it's going to run

00:09:07,220 --> 00:09:13,820
any issues which is going so thermoset a

00:09:10,100 --> 00:09:15,650
doctor basically we have as I said

00:09:13,820 --> 00:09:18,260
before the components storage an agent

00:09:15,650 --> 00:09:20,810
and we have deployed those components

00:09:18,260 --> 00:09:23,980
into dock containers so there's a

00:09:20,810 --> 00:09:27,980
storage container and an agent container

00:09:23,980 --> 00:09:30,590
the caveat to all this is that if you

00:09:27,980 --> 00:09:32,810
have containers that are running job

00:09:30,590 --> 00:09:34,660
applications normally those applications

00:09:32,810 --> 00:09:38,420
are isolated usually container system

00:09:34,660 --> 00:09:40,820
but with a little configuration you can

00:09:38,420 --> 00:09:43,520
also have thermostats containerized

00:09:40,820 --> 00:09:46,460
agent monitor those other job

00:09:43,520 --> 00:09:48,170
applications so that are going to

00:09:46,460 --> 00:09:49,310
they're little more detail web storage

00:09:48,170 --> 00:09:50,900
is pretty simple

00:09:49,310 --> 00:09:53,660
it runs the web storage in their

00:09:50,900 --> 00:09:55,040
container I'll show you that later and

00:09:53,660 --> 00:09:56,150
then the agent container which is a

00:09:55,040 --> 00:09:58,250
little more complicated

00:09:56,150 --> 00:10:02,860
it runs the agent but there are some

00:09:58,250 --> 00:10:02,860
requirements for the other applications

00:10:27,010 --> 00:10:33,760
so in the dr. demo that I've created the

00:10:31,209 --> 00:10:35,410
agent doctor and the storage doctor and

00:10:33,760 --> 00:10:39,399
I'll just give a quick run through of

00:10:35,410 --> 00:10:52,720
the doctor pounds so the first would be

00:10:39,399 --> 00:10:55,149
the storage at the beginning so it's a

00:10:52,720 --> 00:10:57,190
from Florida container so basically it

00:10:55,149 --> 00:11:00,010
takes the fedora based continuum that's

00:10:57,190 --> 00:11:02,920
a pump that got some labels to make it

00:11:00,010 --> 00:11:06,730
easily identifiable and then basically

00:11:02,920 --> 00:11:09,160
installs femicide on in the container so

00:11:06,730 --> 00:11:11,350
the dnf'd install out here the material

00:11:09,160 --> 00:11:14,260
abatement such as are the dependencies

00:11:11,350 --> 00:11:17,709
for building for a set except the

00:11:14,260 --> 00:11:19,959
environment variables required for the

00:11:17,709 --> 00:11:21,720
storage so the port but the story just

00:11:19,959 --> 00:11:26,459
Wilson on will be

00:11:21,720 --> 00:11:28,920
and then it runs as you see HD clone

00:11:26,459 --> 00:11:33,420
clones or auditory and then it just

00:11:28,920 --> 00:11:35,759
builds it so it's pretty simple then at

00:11:33,420 --> 00:11:38,189
the end we set the run script to be run

00:11:35,759 --> 00:11:40,319
thermoset storage and what those this

00:11:38,189 --> 00:11:43,800
does is when the dock container starts

00:11:40,319 --> 00:11:47,509
it will run that script so in that vein

00:11:43,800 --> 00:11:47,509
let's take a look at the script

00:11:51,050 --> 00:11:59,390
and it sets a bunch of required

00:11:55,790 --> 00:12:01,160
configuration options disclaimer this is

00:11:59,390 --> 00:12:04,040
all working fungus and the latest

00:12:01,160 --> 00:12:08,150
thought so it's subject to change but it

00:12:04,040 --> 00:12:10,640
is working and at the very end you'll

00:12:08,150 --> 00:12:12,950
see that it runs there mr. Holman /bin

00:12:10,640 --> 00:12:14,660
slash thermostat web storage which is

00:12:12,950 --> 00:12:18,140
basically what you saw me around with a

00:12:14,660 --> 00:12:20,000
local machine so all that's really doing

00:12:18,140 --> 00:12:22,640
is running web storage in a container

00:12:20,000 --> 00:12:25,990
and then allowing people to access that

00:12:22,640 --> 00:12:25,990
through the Dockers

00:12:29,390 --> 00:12:34,910
so the next one would be the agent

00:12:31,910 --> 00:12:34,910
Parker

00:12:36,590 --> 00:12:41,000
take a quick look through the dockerfile

00:12:38,450 --> 00:12:44,030
you see those it's pretty much the same

00:12:41,000 --> 00:12:47,780
thing called here it says also the

00:12:44,030 --> 00:12:50,630
requirements for other containers it

00:12:47,780 --> 00:12:52,550
basically runs the same thing with the

00:12:50,630 --> 00:12:54,680
configuration required for the agent and

00:12:52,550 --> 00:12:58,750
then it has a script that's run there

00:12:54,680 --> 00:12:58,750
estate agents okay look at that script

00:13:00,250 --> 00:13:05,360
you'll see that it does set up all

00:13:03,380 --> 00:13:08,180
potentials and whatnot and then it just

00:13:05,360 --> 00:13:10,760
runs meeting so this is also pretty

00:13:08,180 --> 00:13:14,380
simple compared to what I was just doing

00:13:10,760 --> 00:13:20,330
a little going back to that doctor KOB

00:13:14,380 --> 00:13:22,880
the key points about monitoring other

00:13:20,330 --> 00:13:25,910
applications that are also in containers

00:13:22,880 --> 00:13:27,850
that generally not exposed to the

00:13:25,910 --> 00:13:30,810
outside department and that's that's

00:13:27,850 --> 00:13:33,890
pretty on purpose on the same

00:13:30,810 --> 00:13:35,150
so one of the containers inside there

00:13:33,890 --> 00:13:37,460
but that makes it a little difficult

00:13:35,150 --> 00:13:40,520
when you want to monitor it yourself

00:13:37,460 --> 00:13:42,950
because they're isolated so the

00:13:40,520 --> 00:13:46,310
requirements for thermostat to monitor

00:13:42,950 --> 00:13:48,860
another application in a container is

00:13:46,310 --> 00:13:51,080
that container needs to expose the temp

00:13:48,860 --> 00:13:54,470
folder so we can access a chest press

00:13:51,080 --> 00:13:56,480
data it also needs to mount the

00:13:54,470 --> 00:13:58,430
thermostat agent image and this is so

00:13:56,480 --> 00:14:00,050
that the thermostat agent cumulative

00:13:58,430 --> 00:14:02,420
Jarvis for profiling

00:14:00,050 --> 00:14:04,820
and then finally needs to share the

00:14:02,420 --> 00:14:07,450
hosts network of GID space and this is

00:14:04,820 --> 00:14:09,980
so thermoset the agent can actually see

00:14:07,450 --> 00:14:12,980
this container

00:14:09,980 --> 00:14:15,700
so let me talk through all that that's

00:14:12,980 --> 00:14:15,700
that's right

00:14:22,470 --> 00:14:28,340
so the running agent doctor is gonna run

00:14:24,630 --> 00:14:31,110
our agent it's a container with the name

00:14:28,340 --> 00:14:34,290
it also needs to connect to the storage

00:14:31,110 --> 00:14:36,000
so this floor type key basically figures

00:14:34,290 --> 00:14:38,700
out what the IP address and storage

00:14:36,000 --> 00:14:42,060
container goods that's the connection to

00:14:38,700 --> 00:14:44,910
it as a bunch of variables here and note

00:14:42,060 --> 00:14:47,910
here the in the docker run it must be

00:14:44,910 --> 00:14:52,320
privileged it must have the most PID and

00:14:47,910 --> 00:14:54,960
that web stack and it must also load the

00:14:52,320 --> 00:14:58,520
volume of the slash dollars so these are

00:14:54,960 --> 00:14:58,520
requirements so that the agent

00:15:00,680 --> 00:15:07,910
to go to the storage bond pretty similar

00:15:04,820 --> 00:15:10,270
as credentials for connections and it

00:15:07,910 --> 00:15:10,270
just runs

00:15:21,980 --> 00:15:26,270
yeah so the storage just started output

00:15:24,740 --> 00:15:29,920
is pretty similar to the local machine

00:15:26,270 --> 00:15:29,920
except this is in a container

00:15:34,590 --> 00:15:40,920
hawker display my right I've sent off

00:15:37,920 --> 00:15:43,320
there's not any proof but please if you

00:15:40,920 --> 00:15:44,760
ever use doctor yourself do not make the

00:15:43,320 --> 00:15:46,860
setting there's articles online

00:15:44,760 --> 00:15:50,610
explaining why this is very bad

00:15:46,860 --> 00:15:53,010
to sum it up if you allow doctor to be

00:15:50,610 --> 00:15:56,340
used by a user without them access you

00:15:53,010 --> 00:16:01,520
are allowing access for that based on

00:15:56,340 --> 00:16:01,520
how often was the details

00:16:02,390 --> 00:16:07,730
yeah so don't run docker as a user

00:16:04,850 --> 00:16:10,370
pretending to be Britain's better but

00:16:07,730 --> 00:16:13,519
for this demo since I don't want to all

00:16:10,370 --> 00:16:15,920
the time so you can see here docker PS

00:16:13,519 --> 00:16:19,310
the storage containers huh

00:16:15,920 --> 00:16:22,899
running support $8.99 and have to be

00:16:19,310 --> 00:16:26,570
inspected you can see down here that

00:16:22,899 --> 00:16:30,519
it's IP address with 170 to about 1700

00:16:26,570 --> 00:16:30,519
Roger so if I were to take a browser

00:16:32,450 --> 00:16:36,370
try to connect to it

00:16:46,280 --> 00:16:51,830
then it shows the identification of

00:16:49,190 --> 00:16:54,080
market so thermostat surgeon is up and

00:16:51,830 --> 00:16:57,160
running and it's an entertainer so next

00:16:54,080 --> 00:16:57,160
we can run the agent

00:17:00,490 --> 00:17:09,770
so since the agent needs the hosts

00:17:03,560 --> 00:17:12,040
network access now we have the agent

00:17:09,770 --> 00:17:12,040
running

00:17:17,350 --> 00:17:20,939
yes

00:17:19,230 --> 00:17:22,620
we have both the agent and web storage

00:17:20,939 --> 00:17:25,529
containers running that the agent

00:17:22,620 --> 00:17:27,480
connected to the web search engine so in

00:17:25,529 --> 00:17:30,480
that requirement can now go with a GUI

00:17:27,480 --> 00:17:33,409
client and we should be able to see the

00:17:30,480 --> 00:17:33,409
agent in storage

00:17:42,990 --> 00:17:49,400
here set the star gol through 170 lat

00:17:56,210 --> 00:18:00,559
then I didn't put up a point this out

00:17:58,879 --> 00:18:03,490
before but my spirit I said the passer

00:18:00,559 --> 00:18:03,490
and using

00:18:17,990 --> 00:18:21,159
I incarnate

00:18:21,850 --> 00:18:27,920
and you can see Caribbean up the

00:18:24,289 --> 00:18:30,710
thermostat agent upgrade and it's a shot

00:18:27,920 --> 00:18:32,990
one thing to note is that because this

00:18:30,710 --> 00:18:35,840
agent is running in a container it does

00:18:32,990 --> 00:18:37,460
not monitor any applications that are

00:18:35,840 --> 00:18:41,000
running on the local machine so if you

00:18:37,460 --> 00:18:42,890
see here this agent only sees itself

00:18:41,000 --> 00:18:45,140
anymore because I haven't started any

00:18:42,890 --> 00:18:46,970
other containers but if you compare that

00:18:45,140 --> 00:18:49,430
to my previous example when I ran the

00:18:46,970 --> 00:18:51,140
agent on this machine it was able to see

00:18:49,430 --> 00:18:53,060
all the applications like IntelliJ and

00:18:51,140 --> 00:18:55,400
whatnot so in this case it doesn't see

00:18:53,060 --> 00:18:57,980
them but the purpose of this agent

00:18:55,400 --> 00:19:02,270
containers to look at containment to

00:18:57,980 --> 00:19:03,680
look at other containers so if you

00:19:02,270 --> 00:19:09,440
wanted to see the local machine stuff

00:19:03,680 --> 00:19:15,940
you would just run the agent moving on I

00:19:09,440 --> 00:19:20,400
can also start a small job application

00:19:15,940 --> 00:19:20,400
the choir that was written

00:19:21,800 --> 00:19:26,290
it's a simple hello world web server

00:19:30,830 --> 00:19:40,580
besides you can see that it contains a

00:19:33,260 --> 00:19:43,810
single Java file it really just responds

00:19:40,580 --> 00:19:48,160
to the get request so it's pretty simple

00:19:43,810 --> 00:19:48,160
we're gonna run that in a container

00:19:49,820 --> 00:19:55,820
it's basically running the application

00:20:02,520 --> 00:20:08,040
and it started so now that we have a JVM

00:20:05,730 --> 00:20:10,400
in the container you note that in these

00:20:08,040 --> 00:20:14,070
arguments out here it's also using

00:20:10,400 --> 00:20:16,590
educativo special tentacles volumes from

00:20:14,070 --> 00:20:19,530
the agent as I said before Amanda dr.

00:20:16,590 --> 00:20:21,330
Thomas tempo in its rows so these are

00:20:19,530 --> 00:20:24,000
all the requirements for any container

00:20:21,330 --> 00:20:28,130
to be monitored by the agent so if we go

00:20:24,000 --> 00:20:30,300
to our qu the hello world that's show up

00:20:28,130 --> 00:20:33,390
so it all means

00:20:30,300 --> 00:20:36,000
dr. Thomas or changes we are now able to

00:20:33,390 --> 00:20:38,120
monitor other JTA applications that are

00:20:36,000 --> 00:20:38,120
running

00:20:46,110 --> 00:20:51,690
besides next session will be a plug-in

00:20:50,100 --> 00:20:54,450
development

00:20:51,690 --> 00:20:55,320
all right so that's DISA I'm gonna be

00:20:54,450 --> 00:20:57,870
talk to you guys a little bit about

00:20:55,320 --> 00:20:59,580
budget bill for thermostat and the idea

00:20:57,870 --> 00:21:01,110
is that you can extend there was set to

00:20:59,580 --> 00:21:02,850
be just so anything you wanted to throw

00:21:01,110 --> 00:21:04,320
a plug-in API you can extend the agent

00:21:02,850 --> 00:21:08,190
you can extend storage and you can send

00:21:04,320 --> 00:21:10,440
a client to represent any dated one so

00:21:08,190 --> 00:21:11,850
as I said customizing the agent or

00:21:10,440 --> 00:21:13,620
client to collect record metal

00:21:11,850 --> 00:21:15,059
anthropometrics a new trade route tools

00:21:13,620 --> 00:21:16,350
in there was done and we'll see an

00:21:15,059 --> 00:21:18,450
example how you can do that

00:21:16,350 --> 00:21:20,370
so mostly built-in function on the in

00:21:18,450 --> 00:21:21,870
thermostat are implemented as plugins if

00:21:20,370 --> 00:21:23,220
you go back to the GUI and you look at

00:21:21,870 --> 00:21:25,740
all those tabs every single one of those

00:21:23,220 --> 00:21:29,940
it's a plugin and we load them using the

00:21:25,740 --> 00:21:31,529
framework called OSGi and what OSGi is

00:21:29,940 --> 00:21:33,600
it's basically a module organization

00:21:31,529 --> 00:21:35,820
framework it splits your code into sense

00:21:33,600 --> 00:21:38,399
of bundles which export set of services

00:21:35,820 --> 00:21:39,690
and the set of packages and once you've

00:21:38,399 --> 00:21:41,100
registered your bubble on the framework

00:21:39,690 --> 00:21:43,200
and the other bundle is registered can

00:21:41,100 --> 00:21:44,580
see the expert package and services so

00:21:43,200 --> 00:21:45,899
it makes your code very popular it's a

00:21:44,580 --> 00:21:49,679
really easy and test it makes it really

00:21:45,899 --> 00:21:51,960
easy to extend as well so before we jump

00:21:49,679 --> 00:21:53,580
right into developing a plugin way to

00:21:51,960 --> 00:21:55,529
talk a little bit about the structure of

00:21:53,580 --> 00:21:57,480
thermostat so they're typically

00:21:55,529 --> 00:21:59,730
organized into several modules and each

00:21:57,480 --> 00:22:01,110
of these is a novice GI bundle so if you

00:21:59,730 --> 00:22:02,460
open up any of the folders in the source

00:22:01,110 --> 00:22:03,299
you'll see stuff like lights you'll

00:22:02,460 --> 00:22:06,269
activate

00:22:03,299 --> 00:22:07,139
agent common and these are all these are

00:22:06,269 --> 00:22:09,809
all bundles and they all extend

00:22:07,139 --> 00:22:12,110
different things so let's start up open

00:22:09,809 --> 00:22:12,110
source

00:22:14,680 --> 00:22:18,880
so for example let's take the Pensacola

00:22:17,650 --> 00:22:21,100
we'll see the Med module and a

00:22:18,880 --> 00:22:23,380
distribution distribution is earlier can

00:22:21,100 --> 00:22:25,750
help us in jars go and it also in system

00:22:23,380 --> 00:22:27,190
said look in XML we'll talk about and

00:22:25,750 --> 00:22:31,780
you see this command modular right here

00:22:27,190 --> 00:22:33,070
if we look at this I'm looking so there

00:22:31,780 --> 00:22:34,930
were sides made the project so a little

00:22:33,070 --> 00:22:36,370
bit using these complex MLS if you have

00:22:34,930 --> 00:22:37,300
if you ever have any doubts about the

00:22:36,370 --> 00:22:38,410
build or you want to see what's

00:22:37,300 --> 00:22:39,820
happening with the build you can just

00:22:38,410 --> 00:22:44,050
look in these policies right with the

00:22:39,820 --> 00:22:45,700
speakers so rate right here's where we

00:22:44,050 --> 00:22:48,370
built the bundle we use the Babel bundle

00:22:45,700 --> 00:22:50,680
plugin and you can see the name of the

00:22:48,370 --> 00:22:54,150
bundle the vendor and what packages that

00:22:50,680 --> 00:22:54,150
experts and which ones are private

00:23:04,720 --> 00:23:10,200
so that this little said when the doctor

00:23:07,200 --> 00:23:10,200
here

00:23:34,180 --> 00:23:38,860
unless you can't see it's basically just

00:23:36,250 --> 00:23:40,150
a set of like XML like tags so for

00:23:38,860 --> 00:23:41,710
example we have the bubble symbolic name

00:23:40,150 --> 00:23:43,420
tag inside of there is a new bundle

00:23:41,710 --> 00:23:45,550
there's a bundle vendor tag that's the

00:23:43,420 --> 00:23:47,050
that's the vendor and this export back

00:23:45,550 --> 00:23:48,760
to your private package as well and that

00:23:47,050 --> 00:23:50,790
just tells you which packages to

00:23:48,760 --> 00:23:53,020
spotless exporting each one to private

00:23:50,790 --> 00:23:54,910
so plugins should usually start with an

00:23:53,020 --> 00:23:56,560
idea of what you wanted to do so let's

00:23:54,910 --> 00:23:57,880
say you have some Java program that's

00:23:56,560 --> 00:24:00,280
doing a lot to communication on say a

00:23:57,880 --> 00:24:02,200
TCP socket supports and you're concerned

00:24:00,280 --> 00:24:04,000
that make this suggestion really go what

00:24:02,200 --> 00:24:07,180
you could do is we're firm set plug-in

00:24:04,000 --> 00:24:08,410
to monitor incoming TCP connections and

00:24:07,180 --> 00:24:09,520
packets and then you can display how

00:24:08,410 --> 00:24:11,680
many are being receive this certain

00:24:09,520 --> 00:24:16,900
address and that's what we've done here

00:24:11,680 --> 00:24:18,160
with our plugin first up before we go

00:24:16,900 --> 00:24:19,780
into that that one thing you can do is

00:24:18,160 --> 00:24:22,590
make getting started to develop a lot

00:24:19,780 --> 00:24:25,770
easier and that is maven archetypes and

00:24:22,590 --> 00:24:25,770
right now

00:24:29,750 --> 00:24:34,100
so

00:24:31,730 --> 00:24:35,659
we're just in our basic numbers that

00:24:34,100 --> 00:24:36,980
boss you're here if you LS you can see

00:24:35,659 --> 00:24:38,870
all the modules that you saw on your

00:24:36,980 --> 00:24:41,740
television and now you want to run this

00:24:38,870 --> 00:24:43,789
one command even our new table generator

00:24:41,740 --> 00:24:46,360
it'll do it'll still a few things

00:24:43,789 --> 00:24:46,360
crystal

00:25:23,850 --> 00:25:30,980
so being an architect generate during

00:25:27,870 --> 00:25:30,980
the whole project searching for us

00:25:31,770 --> 00:25:35,700
so you'll see it'll prompt you for the

00:25:33,870 --> 00:25:37,140
number and we provide to our types of

00:25:35,700 --> 00:25:39,030
thermoset there's a single module on

00:25:37,140 --> 00:25:40,410
multi module we're interested in the

00:25:39,030 --> 00:25:44,490
multicultural right now so we'll run

00:25:40,410 --> 00:25:48,350
that and it'll ask you for a few things

00:25:44,490 --> 00:25:48,350
group ideas so let's do

00:25:48,700 --> 00:25:52,720
artifact ideas to me if you're plugging

00:25:54,169 --> 00:25:59,750
velocity perversion and activities

00:26:01,590 --> 00:26:05,250
you say yes and it'll generate that for

00:26:04,200 --> 00:26:08,909
you and then when we go back to a

00:26:05,250 --> 00:26:13,590
television look at the structure slider

00:26:08,909 --> 00:26:15,570
plug-in right here and that's generated

00:26:13,590 --> 00:26:17,580
an agent that clients Aloha this region

00:26:15,570 --> 00:26:18,750
storage common for us so we don't need

00:26:17,580 --> 00:26:20,039
to worry about the directory structure

00:26:18,750 --> 00:26:23,760
underneath link but it's all been

00:26:20,039 --> 00:26:27,150
carrying for us so going back to our TCP

00:26:23,760 --> 00:26:29,250
plugin let's that look we can see just

00:26:27,150 --> 00:26:32,610
how will you extend these various

00:26:29,250 --> 00:26:34,740
components so it's down here you'll see

00:26:32,610 --> 00:26:36,330
I've got an agent so this is going to

00:26:34,740 --> 00:26:37,919
gather the data from the system with our

00:26:36,330 --> 00:26:39,570
packets and it's going to let the

00:26:37,919 --> 00:26:40,470
storage because the command which is the

00:26:39,570 --> 00:26:42,299
command obeyed

00:26:40,470 --> 00:26:44,250
there's some duty code so we've added a

00:26:42,299 --> 00:26:45,840
time to the GUI which you'll see and

00:26:44,250 --> 00:26:47,490
there's comment and in here you'll find

00:26:45,840 --> 00:26:49,320
to the way we interface with storage and

00:26:47,490 --> 00:26:50,940
that's the down and that was the data

00:26:49,320 --> 00:26:54,270
access objects base will we use query

00:26:50,940 --> 00:26:58,070
sort of data as do it so let's look at

00:26:54,270 --> 00:26:58,070
the agent it's fairly simple

00:27:25,700 --> 00:27:30,140
okay

00:27:28,010 --> 00:27:31,220
so a little bit of good in here but the

00:27:30,140 --> 00:27:32,780
main things you want a attempt to do

00:27:31,220 --> 00:27:34,820
right here the sixth sense based back

00:27:32,780 --> 00:27:36,290
end what that does there was that

00:27:34,820 --> 00:27:37,970
seventy agent it'll look for any classes

00:27:36,290 --> 00:27:39,410
I've said that it'll register that as a

00:27:37,970 --> 00:27:43,280
back end it will make sure it runs that

00:27:39,410 --> 00:27:46,030
sees this bundle because we've got our

00:27:43,280 --> 00:27:48,290
down here which case storage and

00:27:46,030 --> 00:27:49,700
basically what we do is we have a one

00:27:48,290 --> 00:27:51,110
second timer and every step you know

00:27:49,700 --> 00:27:53,090
Chuck's the father where I put it with

00:27:51,110 --> 00:27:55,580
that information to and reset this or

00:27:53,090 --> 00:27:59,049
that switch so that's our agent

00:27:55,580 --> 00:27:59,049
extension and

00:28:07,640 --> 00:28:11,270
we go to the pom you'll see that we're

00:28:09,500 --> 00:28:14,210
building this as a bundle with the name

00:28:11,270 --> 00:28:18,080
snap agent and we have private package

00:28:14,210 --> 00:28:19,850
for exporting package so we have we have

00:28:18,080 --> 00:28:21,679
our data being gathered so how do we

00:28:19,850 --> 00:28:25,929
sort the storage we do that with our tau

00:28:21,679 --> 00:28:25,929
the implementation is down here

00:28:28,720 --> 00:28:32,920
at basically when this gets activated we

00:28:30,760 --> 00:28:34,600
registered we register in the database

00:28:32,920 --> 00:28:38,410
that I'll supposed to do with them and

00:28:34,600 --> 00:28:40,540
then we basically have to with two main

00:28:38,410 --> 00:28:42,460
queries here we have an ad which outside

00:28:40,540 --> 00:28:43,780
storage area and we have a query tab

00:28:42,460 --> 00:28:47,400
which will basically just tell you how

00:28:43,780 --> 00:28:49,420
many items are registered under this PT

00:28:47,400 --> 00:28:51,780
trysting with slightly more interesting

00:28:49,420 --> 00:28:51,780
codes

00:28:54,370 --> 00:28:58,900
which is here or interesting controller

00:28:56,650 --> 00:29:01,440
thermostat for its duty code use this

00:28:58,900 --> 00:29:03,730
the model the model-view-controller

00:29:01,440 --> 00:29:05,409
better and what that does is it just

00:29:03,730 --> 00:29:08,049
separates a good program logic from UI

00:29:05,409 --> 00:29:09,610
code all of your UI code goes into the

00:29:08,049 --> 00:29:11,980
view and all of your program logic could

00:29:09,610 --> 00:29:16,659
separate out into the controller at the

00:29:11,980 --> 00:29:17,710
moment so you can start this we grab our

00:29:16,659 --> 00:29:21,580
death we grab our doubt from the

00:29:17,710 --> 00:29:23,650
framework and then we set a timer and

00:29:21,580 --> 00:29:25,929
every so often located the date on the

00:29:23,650 --> 00:29:28,870
grab and our panel which is what it's

00:29:25,929 --> 00:29:30,279
gets out the GUI eat is basically just a

00:29:28,870 --> 00:29:33,340
basic header panel so we don't have a

00:29:30,279 --> 00:29:35,850
title of top hands going around so let's

00:29:33,340 --> 00:29:35,850
run this

00:29:42,620 --> 00:29:45,760
okay I've already got the servant

00:29:50,680 --> 00:29:53,680
so we can't run thermoset look little

00:29:52,390 --> 00:29:57,120
bit things about quickly it runs

00:29:53,680 --> 00:29:57,120
everything for us excuses

00:30:12,970 --> 00:30:19,300
so this is an expectation of my fans

00:30:16,330 --> 00:30:23,410
my daughter demersal Runnings

00:30:19,300 --> 00:30:23,410
just try and bind to an idea

00:31:25,320 --> 00:31:28,500
if you go here and you get all the

00:31:26,640 --> 00:31:30,920
agents you'll see that our agent is

00:31:28,500 --> 00:31:30,920
running right here

00:31:49,920 --> 00:31:53,340
the main thing to take away from this is

00:31:51,390 --> 00:31:54,630
a thermoset extremely customizable and

00:31:53,340 --> 00:31:56,309
you got any other tools you want to use

00:31:54,630 --> 00:31:58,590
you can easily integrate them to

00:31:56,309 --> 00:32:00,030
thermoset for example here I've done

00:31:58,590 --> 00:32:02,100
some I've done some integration between

00:32:00,030 --> 00:32:03,480
the system tab there's a consistent up

00:32:02,100 --> 00:32:05,370
script running in the background that

00:32:03,480 --> 00:32:07,620
gathers data from TCP packets are being

00:32:05,370 --> 00:32:09,090
received output such a Bible summers I

00:32:07,620 --> 00:32:11,690
can then read and press on the data view

00:32:09,090 --> 00:32:11,690
all the same tool

00:32:19,600 --> 00:32:24,070
don't look reticent don't look right now

00:32:31,590 --> 00:32:36,659
there we go okay so our agents running

00:32:35,070 --> 00:32:38,370
and you'll see a seat up here six and up

00:32:36,659 --> 00:32:41,249
and if you look at that it's got a nice

00:32:38,370 --> 00:32:42,629
graph and this is you this is displaying

00:32:41,249 --> 00:32:44,879
the number of packets it's receiving at

00:32:42,629 --> 00:32:46,740
the center support you can see outside

00:32:44,879 --> 00:32:48,360
of it going up the cyber support happens

00:32:46,740 --> 00:32:50,580
to be the one we use for communicating

00:32:48,360 --> 00:32:51,720
with storage Minerva said so you can see

00:32:50,580 --> 00:32:52,919
all the communication that's going on

00:32:51,720 --> 00:32:56,309
between Stewart and everything else in

00:32:52,919 --> 00:32:58,049
Stanford do it so that's basically

00:32:56,309 --> 00:33:00,090
plug-in development we've got a lot of

00:32:58,049 --> 00:33:02,429
great resources on our wiki website they

00:33:00,090 --> 00:33:04,110
can I look at you're interested and up

00:33:02,429 --> 00:33:05,669
next to the example the complex plugin

00:33:04,110 --> 00:33:10,369
also really cool on this Alex talked

00:33:05,669 --> 00:33:10,369
about like that thank you

00:33:14,110 --> 00:33:17,110
all right so I'm going to be talking

00:33:15,610 --> 00:33:18,850
about a plugin that's currently under

00:33:17,110 --> 00:33:20,409
development for the next service that we

00:33:18,850 --> 00:33:24,010
complete and that is going to be the

00:33:20,409 --> 00:33:25,269
bite man look but what is bite man

00:33:24,010 --> 00:33:27,370
before I go into what the plugin

00:33:25,269 --> 00:33:28,990
actually does well bite man is a tool

00:33:27,370 --> 00:33:32,799
for monitoring debugging and testing

00:33:28,990 --> 00:33:36,220
Java code and it does this using the

00:33:32,799 --> 00:33:38,740
Java JVM tool interface agent it allows

00:33:36,220 --> 00:33:41,919
it to extract more intricate details

00:33:38,740 --> 00:33:44,110
from the JVM and what you can do is you

00:33:41,919 --> 00:33:47,409
can install this agent through the

00:33:44,110 --> 00:33:51,340
command line and conject DSL specific

00:33:47,409 --> 00:33:53,260
code into the JVM to monitor what's

00:33:51,340 --> 00:33:55,870
going on within your Java program that a

00:33:53,260 --> 00:33:59,649
more intimate look so we're able to

00:33:55,870 --> 00:34:02,380
inject and trace code in the JVM either

00:33:59,649 --> 00:34:04,480
the JVM startup or you can inject a rule

00:34:02,380 --> 00:34:08,020
into JVM when an application is already

00:34:04,480 --> 00:34:10,030
running this injecting code has access

00:34:08,020 --> 00:34:12,040
to all application methods public or

00:34:10,030 --> 00:34:16,260
private or otherwise I mean these girls

00:34:12,040 --> 00:34:19,389
can be unloaded and pre injected at will

00:34:16,260 --> 00:34:20,919
so the rules have a basic syntax that

00:34:19,389 --> 00:34:23,440
looks something like you see before you

00:34:20,919 --> 00:34:28,000
it kind of represents the basic Java

00:34:23,440 --> 00:34:29,649
syntax so we have a unique name for the

00:34:28,000 --> 00:34:32,020
rule because the rules get loaded and

00:34:29,649 --> 00:34:33,669
unloaded by rolling we have a class

00:34:32,020 --> 00:34:37,210
which is going to be the classic you're

00:34:33,669 --> 00:34:38,589
looking to monitor in specified method

00:34:37,210 --> 00:34:41,919
name so say for instance when this

00:34:38,589 --> 00:34:44,710
method gets hit do something and then

00:34:41,919 --> 00:34:45,970
coming out keyword for entry or exit so

00:34:44,710 --> 00:34:48,280
say if you want to monitor what happens

00:34:45,970 --> 00:34:49,869
when you enter a specific method person

00:34:48,280 --> 00:34:53,290
is what happens when you exit specific

00:34:49,869 --> 00:34:55,480
method inside of an if statement you can

00:34:53,290 --> 00:34:57,910
add a condition to add a bit more

00:34:55,480 --> 00:34:59,950
robustness to your bite man rules to

00:34:57,910 --> 00:35:01,540
give it a bit more logic and the dude is

00:34:59,950 --> 00:35:04,930
the action that actually gets performed

00:35:01,540 --> 00:35:06,970
by the right-hand rule and I'm gonna

00:35:04,930 --> 00:35:09,599
give you a quick demo on how I can

00:35:06,970 --> 00:35:09,599
actually works

00:35:19,520 --> 00:35:22,780
all right so

00:35:26,260 --> 00:35:29,940
sorry different keepers leo

00:35:38,730 --> 00:35:44,609
okay so today I've prepared a really

00:35:40,859 --> 00:35:47,070
basic demo using hello world so I type

00:35:44,609 --> 00:35:50,820
in hello world here you can see on the

00:35:47,070 --> 00:35:53,010
screen that I printed the world but I've

00:35:50,820 --> 00:35:54,960
also written a more complex version I

00:35:53,010 --> 00:35:56,790
use a brutal rule that we can use to

00:35:54,960 --> 00:36:00,770
monitor what happens to this specific of

00:35:56,790 --> 00:36:00,770
the world and when it's running

00:36:14,130 --> 00:36:18,630
just the show there's no magic gonna

00:36:16,079 --> 00:36:20,160
have a little it looks like but we're

00:36:18,630 --> 00:36:22,349
gonna inject a roll into this to see

00:36:20,160 --> 00:36:25,200
what's going on so if I type in Java and

00:36:22,349 --> 00:36:27,569
then use the job an agent arguments

00:36:25,200 --> 00:36:30,089
apply fighting at home so Bateman can be

00:36:27,569 --> 00:36:31,950
supplied as a jar so we're gonna point

00:36:30,089 --> 00:36:34,349
to that and then we're gonna use the

00:36:31,950 --> 00:36:35,759
script flag to import this ruled I've

00:36:34,349 --> 00:36:38,269
written now we're gonna run the program

00:36:35,759 --> 00:36:38,269
as we had before

00:36:52,400 --> 00:36:55,150
alas

00:36:56,390 --> 00:37:01,490
okay listen I might have ran the program

00:36:59,029 --> 00:37:02,720
something different happened not only

00:37:01,490 --> 00:37:05,240
did it just say eh' hello world

00:37:02,720 --> 00:37:07,339
all your base are belong to us so let's

00:37:05,240 --> 00:37:14,150
take a look at what actually happened

00:37:07,339 --> 00:37:16,250
here we're gonna take a look at the bite

00:37:14,150 --> 00:37:17,900
animal that I rhythm now just to give a

00:37:16,250 --> 00:37:19,400
basic introduction to what the syntax is

00:37:17,900 --> 00:37:21,289
like so here is my basic rule it's

00:37:19,400 --> 00:37:23,750
called example rule and when it hits a

00:37:21,289 --> 00:37:26,900
class helloworld main method when it

00:37:23,750 --> 00:37:29,089
enters is true so it's going to do the

00:37:26,900 --> 00:37:31,130
action trace line all your kissable and

00:37:29,089 --> 00:37:32,930
I'm here the action trace lab is

00:37:31,130 --> 00:37:35,029
actually an alias for a system but dot

00:37:32,930 --> 00:37:37,069
print line so I was able to basically

00:37:35,029 --> 00:37:39,769
print that line before any of the code

00:37:37,069 --> 00:37:41,329
runs within any method so that's kind of

00:37:39,769 --> 00:37:43,549
looks a really simple example how you

00:37:41,329 --> 00:37:45,349
can use bite handles to trigger

00:37:43,549 --> 00:37:51,200
different events when you're running

00:37:45,349 --> 00:37:52,609
your code but we wanted to we feel it

00:37:51,200 --> 00:37:55,099
was a very powerful tool and it's very

00:37:52,609 --> 00:37:57,769
good to have 737 you want to debug your

00:37:55,099 --> 00:37:59,750
different tests Java programs so what

00:37:57,769 --> 00:38:01,910
third side does is automatically

00:37:59,750 --> 00:38:03,559
installs the agent we have a graphical

00:38:01,910 --> 00:38:05,450
user interface for injecting and

00:38:03,559 --> 00:38:07,420
unloading rules as well as for

00:38:05,450 --> 00:38:10,160
visualizing your metrics so we have

00:38:07,420 --> 00:38:12,670
whole returns back in JSON format

00:38:10,160 --> 00:38:15,680
metrics so you can get a mortgage pit

00:38:12,670 --> 00:38:17,359
run down what's actually happening as

00:38:15,680 --> 00:38:19,339
well as we have a little craps tab that

00:38:17,359 --> 00:38:22,490
you can use to visualize the data as

00:38:19,339 --> 00:38:23,930
it's coming in so if they have a very

00:38:22,490 --> 00:38:25,700
very simple example just to demonstrate

00:38:23,930 --> 00:38:27,200
how you can use this to look at

00:38:25,700 --> 00:38:28,970
different classes so I prepared a little

00:38:27,200 --> 00:38:31,490
application based on the consumers and

00:38:28,970 --> 00:38:34,220
producers problem for those of you good

00:38:31,490 --> 00:38:35,839
up now it's a pretty basic example I

00:38:34,220 --> 00:38:37,430
used to show how different processes

00:38:35,839 --> 00:38:38,869
communicate with each other so we're

00:38:37,430 --> 00:38:40,279
gonna have a bunch of producers that are

00:38:38,869 --> 00:38:41,340
going to be generating and placing items

00:38:40,279 --> 00:38:42,900
into a sip

00:38:41,340 --> 00:38:45,300
it's size Q that's shaped between

00:38:42,900 --> 00:38:47,280
producers and consumers consumers

00:38:45,300 --> 00:38:49,710
unavailable are going to be taking items

00:38:47,280 --> 00:38:51,330
out of the queue so the problem that

00:38:49,710 --> 00:38:52,680
here is the consumers can't type

00:38:51,330 --> 00:38:56,100
something if there's nothing in the

00:38:52,680 --> 00:38:58,680
queue so that's the wouldn't so here's

00:38:56,100 --> 00:39:00,690
the basic rundown of the code that's

00:38:58,680 --> 00:39:02,700
going on here so when the producer is

00:39:00,690 --> 00:39:05,250
available to add items to the cukes it's

00:39:02,700 --> 00:39:06,830
not full do so and likewise the consumer

00:39:05,250 --> 00:39:10,560
will take me excited when available

00:39:06,830 --> 00:39:12,270
sorry but a quick Batman rule to count

00:39:10,560 --> 00:39:14,970
the number of times each of the actions

00:39:12,270 --> 00:39:17,130
are being performed so it's pretty much

00:39:14,970 --> 00:39:19,200
like the Lexus bimanual - oh except it

00:39:17,130 --> 00:39:21,030
uses this bottom keyword and you can use

00:39:19,200 --> 00:39:22,890
it to declare variables that are going

00:39:21,030 --> 00:39:26,430
to be incremented by another Batman with

00:39:22,890 --> 00:39:28,590
a grid and the option here doom who send

00:39:26,430 --> 00:39:30,030
will send the metrics back my thermostat

00:39:28,590 --> 00:39:33,300
so we can see what's actually going on

00:39:30,030 --> 00:39:34,860
so it will have the marker producer

00:39:33,300 --> 00:39:36,750
it'll say that we hit the add item

00:39:34,860 --> 00:39:40,020
method and then current times that we

00:39:36,750 --> 00:39:41,430
hit that message and here's a rule that

00:39:40,020 --> 00:39:44,400
basically just increments the garment

00:39:41,430 --> 00:39:47,480
that I had just a clip and I'm going to

00:39:44,400 --> 00:39:47,480
show you how this works

00:39:56,150 --> 00:40:05,570
but how this package is a charming I

00:39:58,160 --> 00:40:08,170
know around the side here let's get up

00:40:05,570 --> 00:40:08,170
and run

00:40:08,240 --> 00:40:10,840
and

00:40:14,730 --> 00:40:17,960
we're gonna run it under set

00:40:32,930 --> 00:40:38,660
we preserve that - come on okay

00:40:36,410 --> 00:40:40,339
so you can see that my ajar is

00:40:38,660 --> 00:40:41,720
recognized here on the left-hand side so

00:40:40,339 --> 00:40:44,930
I'm going to move over to the Batman

00:40:41,720 --> 00:40:46,849
plugin and here we have a graphical user

00:40:44,930 --> 00:40:49,099
interface for objecting and unobjective

00:40:46,849 --> 00:40:50,960
rules so on the left hand side is a I'm

00:40:49,099 --> 00:40:53,539
going to put in a rule that pertains

00:40:50,960 --> 00:40:55,220
specifically to this program and then

00:40:53,539 --> 00:40:58,089
I'm going to load it in and we're going

00:40:55,220 --> 00:40:58,089
to see what happens

00:41:04,320 --> 00:41:09,990
so I have my rules the left-hand side

00:41:06,060 --> 00:41:11,850
here over and you can see that the rules

00:41:09,990 --> 00:41:13,140
have been injected notice on the

00:41:11,850 --> 00:41:13,470
background of the terminology moved a

00:41:13,140 --> 00:41:15,180
bit

00:41:13,470 --> 00:41:17,580
it just gives confirmation to evils have

00:41:15,180 --> 00:41:19,890
been installed so we're gonna go to the

00:41:17,580 --> 00:41:21,900
metrics tab and I'm going to run our

00:41:19,890 --> 00:41:24,180
program so I have two different sets

00:41:21,900 --> 00:41:25,800
here basically the program is going to

00:41:24,180 --> 00:41:28,290
terminate once the consumers taking 15

00:41:25,800 --> 00:41:29,550
items out of the queue and in one

00:41:28,290 --> 00:41:31,170
instance the producers and consumers

00:41:29,550 --> 00:41:32,850
will be looking and taking attendance at

00:41:31,170 --> 00:41:34,800
a very constant rate whereas the other

00:41:32,850 --> 00:41:36,120
one consumer is very hasty it really

00:41:34,800 --> 00:41:37,920
wants those items it's going to be

00:41:36,120 --> 00:41:40,230
looking at it really you're really

00:41:37,920 --> 00:41:42,720
faster so if you're on the balanced

00:41:40,230 --> 00:41:44,760
version here you can see the metrics

00:41:42,720 --> 00:41:47,580
going in through the net metrics out a

00:41:44,760 --> 00:41:48,990
little same have the different numbers

00:41:47,580 --> 00:41:51,210
pertaining to how many times these

00:41:48,990 --> 00:41:55,050
methods are being called you can see

00:41:51,210 --> 00:41:56,370
that the program so in equal balance the

00:41:55,050 --> 00:41:58,440
whole program talked about seven point

00:41:56,370 --> 00:42:01,410
seven seven somethings if we're good to

00:41:58,440 --> 00:42:03,420
look here we can confirm that the

00:42:01,410 --> 00:42:06,330
consumer has indeed taken kicking

00:42:03,420 --> 00:42:08,160
offense out of the cube and a whole

00:42:06,330 --> 00:42:10,080
bunch of different metrics related to

00:42:08,160 --> 00:42:12,150
how many times they slept or waiting to

00:42:10,080 --> 00:42:15,180
look at the items or we're producing

00:42:12,150 --> 00:42:16,910
items into the producer so let's take a

00:42:15,180 --> 00:42:19,950
look at the other one and we care

00:42:16,910 --> 00:42:22,170
something else so what I just did was I

00:42:19,950 --> 00:42:25,920
just injected those rules because I was

00:42:22,170 --> 00:42:28,430
going to be installing new rules for our

00:42:25,920 --> 00:42:28,430
fresh slate

00:42:31,400 --> 00:42:36,960
now every run the program but this time

00:42:35,100 --> 00:42:42,390
consumers are looking a lot faster

00:42:36,960 --> 00:42:45,240
reading after 15 times of taking up this

00:42:42,390 --> 00:42:47,010
random took 7.11 seconds what's

00:42:45,240 --> 00:42:49,350
interesting to note here is its consumer

00:42:47,010 --> 00:42:51,060
actually waiting for 47 times so in the

00:42:49,350 --> 00:42:52,710
last example they were taking a fairly

00:42:51,060 --> 00:42:56,550
even race I think the consumer must take

00:42:52,710 --> 00:42:58,710
in took yeah so the consumer made in

00:42:56,550 --> 00:43:01,500
about 15 times but businesses it took a

00:42:58,710 --> 00:43:03,660
lot more we can use the graph type here

00:43:01,500 --> 00:43:06,150
to kind of visualize what was going on

00:43:03,660 --> 00:43:08,660
so the first two here are the ones that

00:43:06,150 --> 00:43:11,850
I just remember so this is a consumer I

00:43:08,660 --> 00:43:13,350
had a lot more calls but the other

00:43:11,850 --> 00:43:15,960
example where they won't even give a

00:43:13,350 --> 00:43:18,120
more localized and more you can be

00:43:15,960 --> 00:43:21,270
distributed so this can be a very

00:43:18,120 --> 00:43:22,710
beautiful example of how to kind of

00:43:21,270 --> 00:43:23,850
probe and figure out what's going on

00:43:22,710 --> 00:43:25,260
with your code when you're not quite

00:43:23,850 --> 00:43:26,790
sure what's going on to say for instance

00:43:25,260 --> 00:43:28,260
if you look at these two things you both

00:43:26,790 --> 00:43:30,120
did the same thing but they took a

00:43:28,260 --> 00:43:31,800
different amount of time and if you're

00:43:30,120 --> 00:43:33,630
not knowing how to go in and actually

00:43:31,800 --> 00:43:35,610
tribute these different events to see

00:43:33,630 --> 00:43:42,330
what's going on you might not be able to

00:43:35,610 --> 00:43:44,520
figure out what your problematic is all

00:43:42,330 --> 00:43:46,050
right so as I said before this plugin

00:43:44,520 --> 00:43:48,840
isn't currently available in the release

00:43:46,050 --> 00:43:50,430
that we had just done in July as us

00:43:48,840 --> 00:43:52,800
potentially slated for our next release

00:43:50,430 --> 00:43:53,670
which would be Somerset 2.0 things that

00:43:52,800 --> 00:43:55,470
we're going to be working on in the

00:43:53,670 --> 00:43:57,600
meantime is improving the workflow here

00:43:55,470 --> 00:44:01,200
and just extremely Google's nascent

00:43:57,600 --> 00:44:02,580
shirt better digital image so if you

00:44:01,200 --> 00:44:03,700
thought my name is Google go check it

00:44:02,580 --> 00:44:05,950
out

00:44:03,700 --> 00:44:08,890
really neat little tool and check out

00:44:05,950 --> 00:44:10,420
the things as well I just briefly want

00:44:08,890 --> 00:44:12,510
to touch on the development the

00:44:10,420 --> 00:44:15,099
community I have ceramic there instead

00:44:12,510 --> 00:44:16,930
so if you ever want to get thermoset

00:44:15,099 --> 00:44:18,310
started run around your machine that's

00:44:16,930 --> 00:44:20,500
very simple if you're running fedora

00:44:18,310 --> 00:44:21,369
then Justina install thermostat or if

00:44:20,500 --> 00:44:23,530
you're using an older version of

00:44:21,369 --> 00:44:25,359
authority run young installer and stuff

00:44:23,530 --> 00:44:28,570
and this will get you our latest stable

00:44:25,359 --> 00:44:30,460
release on common sense but if you want

00:44:28,570 --> 00:44:32,230
something more cutting-edge come visit

00:44:30,460 --> 00:44:36,579
our website and download the newest

00:44:32,230 --> 00:44:41,950
stuff that we're working on we use open

00:44:36,579 --> 00:44:44,920
jdk 1.7 or above we use MongoDB for our

00:44:41,950 --> 00:44:49,510
original use mercurial and all of our

00:44:44,920 --> 00:44:51,670
products go with Nick Nemeth and have

00:44:49,510 --> 00:44:53,980
this different development methodology

00:44:51,670 --> 00:44:55,510
where all of the stuff that we're

00:44:53,980 --> 00:44:58,060
currently working on go to the latest

00:44:55,510 --> 00:44:59,109
branch so this is their worst at 2.0 and

00:44:58,060 --> 00:45:00,640
everything that we're currently working

00:44:59,109 --> 00:45:02,650
out goes there and then once it's time

00:45:00,640 --> 00:45:04,240
for a release we back board all of our

00:45:02,650 --> 00:45:06,820
things that we just made it made sure

00:45:04,240 --> 00:45:07,480
the API is very stable and that's what's

00:45:06,820 --> 00:45:09,550
get released

00:45:07,480 --> 00:45:11,109
so our latest release actually took

00:45:09,550 --> 00:45:12,730
place in July of this year it's

00:45:11,109 --> 00:45:15,339
thermostat one one since that introduced

00:45:12,730 --> 00:45:16,480
the local command efficacy as well as

00:45:15,339 --> 00:45:18,160
the number of different features such as

00:45:16,480 --> 00:45:20,579
the final um command that you can use to

00:45:18,160 --> 00:45:23,140
search for VMs through the command line

00:45:20,579 --> 00:45:25,810
and our Metro coverage that's pretty

00:45:23,140 --> 00:45:27,339
cool but we're looking forward to the

00:45:25,810 --> 00:45:28,720
future what's the latest and greatest so

00:45:27,339 --> 00:45:31,569
there are sexy photo hopefully coming

00:45:28,720 --> 00:45:33,310
sometime in your future we're looking at

00:45:31,569 --> 00:45:34,510
currently at the main integration is

00:45:33,310 --> 00:45:36,490
going into there as well as a whole

00:45:34,510 --> 00:45:40,420
bunch of things gave a lot of factoring

00:45:36,490 --> 00:45:45,130
and Windows support maybe that's getting

00:45:40,420 --> 00:45:46,750
there I'm an athlete again in touch with

00:45:45,130 --> 00:45:48,069
us if you think there's a plugin that

00:45:46,750 --> 00:45:51,550
you think would be really useful for

00:45:48,069 --> 00:45:53,170
people come let us know our website as

00:45:51,550 --> 00:45:55,569
she was working on pretty recently is

00:45:53,170 --> 00:45:57,310
looking nice and fresh you can download

00:45:55,569 --> 00:45:58,570
all of our source on there as well

00:45:57,310 --> 00:46:01,210
I don't how to get involved with

00:45:58,570 --> 00:46:03,820
Thurmond stuff come see how visit us on

00:46:01,210 --> 00:46:05,860
freenode we're on channel thermostat I'm

00:46:03,820 --> 00:46:07,450
joining up for a mailing list if you

00:46:05,860 --> 00:46:09,550
think you have found a bugger you have

00:46:07,450 --> 00:46:11,950
an idea for a plugin for us to shoot us

00:46:09,550 --> 00:46:14,290
an email and come about Zilla so if

00:46:11,950 --> 00:46:15,760
you're interested in participating in

00:46:14,290 --> 00:46:17,200
project but there's a whole bunch of

00:46:15,760 --> 00:46:20,500
different bugs you checking out and

00:46:17,200 --> 00:46:24,400
start getting used to and contributing

00:46:20,500 --> 00:46:26,940
punches to you know stuff and fat I'd

00:46:24,400 --> 00:46:26,940
like to thank you

00:46:40,740 --> 00:46:58,220
my goodness regular job applications

00:46:53,660 --> 00:47:02,160
wandering on like for example say a

00:46:58,220 --> 00:47:05,099
bunch of web applications and then can I

00:47:02,160 --> 00:47:08,640
run thermostat on each individual what

00:47:05,099 --> 00:47:11,099
about web server and these web servers

00:47:08,640 --> 00:47:13,260
are requesting each other there's like

00:47:11,099 --> 00:47:15,510
100 first one here other request to

00:47:13,260 --> 00:47:19,070
another service another request going

00:47:15,510 --> 00:47:24,930
there can you trace that whole

00:47:19,070 --> 00:47:27,839
transaction from like start to end what

00:47:24,930 --> 00:47:31,440
is this just one one ah I'm running it

00:47:27,839 --> 00:47:33,210
on one machine if you if you run to the

00:47:31,440 --> 00:47:35,730
thermostat agent on each of those

00:47:33,210 --> 00:47:40,800
servers then it will be able to monitor

00:47:35,730 --> 00:47:44,310
and get that data from those servers in

00:47:40,800 --> 00:47:47,339
terms of tracing it calls themselves you

00:47:44,310 --> 00:47:49,080
can profile the app each individual

00:47:47,339 --> 00:47:51,960
application and see what calls are being

00:47:49,080 --> 00:47:54,470
made but in terms of connecting all of

00:47:51,960 --> 00:47:57,920
that data together I would say

00:47:54,470 --> 00:47:57,920
thermostat doesn't

00:48:00,250 --> 00:48:05,760
you can't take the data analyze it

00:48:03,190 --> 00:48:05,760
yourself

00:48:17,910 --> 00:48:25,869
pretty how they threw Sephardi so by

00:48:22,270 --> 00:48:28,420
default the agents only monitor a small

00:48:25,869 --> 00:48:30,849
subset of information so it doesn't do

00:48:28,420 --> 00:48:33,820
the fred monogram of the sector's

00:48:30,849 --> 00:48:36,340
profiling both of those things you have

00:48:33,820 --> 00:48:39,730
to turn on themselves because those are

00:48:36,340 --> 00:48:44,470
are much more intrusive to the

00:48:39,730 --> 00:48:46,750
application so I'd say it's very non

00:48:44,470 --> 00:48:50,320
visible when you just run it in five

00:48:46,750 --> 00:48:55,570
people but the information you get will

00:48:50,320 --> 00:48:58,690
be CPU memory heap data garbage

00:48:55,570 --> 00:49:01,570
collection father stuff but like one of

00:48:58,690 --> 00:49:03,460
them more specific information so you

00:49:01,570 --> 00:49:07,540
want to profile the method calls that

00:49:03,460 --> 00:49:09,940
are happening you can start button the

00:49:07,540 --> 00:49:12,450
user has to start that themselves and

00:49:09,940 --> 00:49:12,450
then from that point

00:49:21,970 --> 00:49:24,030

YouTube URL: https://www.youtube.com/watch?v=WUMEVeWB3yI


