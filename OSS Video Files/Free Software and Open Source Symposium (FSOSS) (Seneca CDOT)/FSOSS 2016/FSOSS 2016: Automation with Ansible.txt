Title: FSOSS 2016: Automation with Ansible
Publication date: 2016-11-24
Playlist: FSOSS 2016
Description: 
	Speaker: Hong Zhan Huang, Research Assistant with Seneca CDOT

The concept of automation is not new but it is increasingly becoming a fabric that envelopes our world. Ansible is one such tool that automates the management of systems and application and it does so in a simple and fundamental way. Come learn how to make this tool your own.
Captions: 
	00:00:04,520 --> 00:00:09,290
before we begin this talk well title is

00:00:07,460 --> 00:00:13,520
automation with ansible as you can see

00:00:09,290 --> 00:00:15,080
up there before I begin to talk how many

00:00:13,520 --> 00:00:17,600
people are already somewhat initiated

00:00:15,080 --> 00:00:23,450
with an zabal or automation tools in

00:00:17,600 --> 00:00:25,520
general okay a number of you so to

00:00:23,450 --> 00:00:27,140
preface this I may rely on somebody to

00:00:25,520 --> 00:00:31,820
answer questions because I am NOT most

00:00:27,140 --> 00:00:32,840
initiated on this right now kind of

00:00:31,820 --> 00:00:38,000
silly coming from the speaker himself

00:00:32,840 --> 00:00:39,530
but just know what Michael mo anyway so

00:00:38,000 --> 00:00:40,670
good to see that some people are

00:00:39,530 --> 00:00:42,680
initiated but good to see that some

00:00:40,670 --> 00:00:44,390
people are also not initiated all this

00:00:42,680 --> 00:00:47,600
presentation I've prepared for mostly

00:00:44,390 --> 00:00:49,100
beginners kind of audience people that

00:00:47,600 --> 00:00:50,930
have not really tried automation with

00:00:49,100 --> 00:00:52,910
these kind tools anyway they may have

00:00:50,930 --> 00:00:55,270
done some automation before with their

00:00:52,910 --> 00:00:58,130
own batch scripts what have you but

00:00:55,270 --> 00:00:59,480
these tools are probably something

00:00:58,130 --> 00:01:01,880
should really look into if you want to

00:00:59,480 --> 00:01:07,340
automate your workflow whether its large

00:01:01,880 --> 00:01:08,749
or very small so i wouldn't reactivated

00:01:07,340 --> 00:01:11,060
myself actually this is what i actually

00:01:08,749 --> 00:01:13,909
did this friend ation so i could learn a

00:01:11,060 --> 00:01:17,090
kind of selfish pretty greedy but that's

00:01:13,909 --> 00:01:20,029
that's my reasoning so again the title

00:01:17,090 --> 00:01:21,590
is automation with Angela but honestly

00:01:20,029 --> 00:01:22,909
the Angela part is not the most

00:01:21,590 --> 00:01:24,740
important part of the foundation even

00:01:22,909 --> 00:01:26,929
though it is the main line of it the

00:01:24,740 --> 00:01:29,299
theme of it is actually automation with

00:01:26,929 --> 00:01:31,240
X I could've been talking about

00:01:29,299 --> 00:01:33,289
something like puppet or chef or

00:01:31,240 --> 00:01:35,509
automation with bash scripts even if it

00:01:33,289 --> 00:01:37,609
came down it the idea is to really

00:01:35,509 --> 00:01:40,609
initiate who who are not initiated in

00:01:37,609 --> 00:01:42,289
this kind of topic quickly and easily so

00:01:40,609 --> 00:01:45,529
they can start doing it and see how

00:01:42,289 --> 00:01:47,719
great it is so that's the main thing

00:01:45,529 --> 00:01:49,579
that the talk and that's kind of what

00:01:47,719 --> 00:01:51,139
it's going to entail but the reason that

00:01:49,579 --> 00:01:53,770
we chose ansible for this is that I

00:01:51,139 --> 00:01:57,039
believe it's the one that has the lowest

00:01:53,770 --> 00:01:59,779
barriers and it's really easy to enter

00:01:57,039 --> 00:02:03,259
so and we'll talk about why that is and

00:01:59,779 --> 00:02:07,520
why this choice was made so with that

00:02:03,259 --> 00:02:09,050
said let's get into it I suppose so this

00:02:07,520 --> 00:02:11,180
is the agenda for today we're going to

00:02:09,050 --> 00:02:13,220
talk about what is ansible what can it

00:02:11,180 --> 00:02:15,620
possibly do some of the main principles

00:02:13,220 --> 00:02:17,520
behind it describing you know its design

00:02:15,620 --> 00:02:19,350
goals the infrastructure of it

00:02:17,520 --> 00:02:21,540
and then the terminology you need to get

00:02:19,350 --> 00:02:26,040
initiated to you actually using it and a

00:02:21,540 --> 00:02:29,040
little quick demo of it in oven in

00:02:26,040 --> 00:02:35,130
action and then a little bit of Q&A to

00:02:29,040 --> 00:02:36,000
end it off so what what is an zabal I've

00:02:35,130 --> 00:02:37,200
been talking about for a little bit

00:02:36,000 --> 00:02:39,540
already but what am I actually talking

00:02:37,200 --> 00:02:41,610
about so let's just have a little bit of

00:02:39,540 --> 00:02:44,100
a blurb so we've kind of talked about

00:02:41,610 --> 00:02:46,020
some kind of automation tool but it was

00:02:44,100 --> 00:02:47,940
written in Python it's also open source

00:02:46,020 --> 00:02:50,910
it's also free you can check out on

00:02:47,940 --> 00:02:54,690
github has 19,000 plus stars pretty

00:02:50,910 --> 00:02:56,880
popular project a lot of commits and it

00:02:54,690 --> 00:03:00,030
has a pretty quick release cycle to once

00:02:56,880 --> 00:03:01,890
every four months or thereabouts so it

00:03:00,030 --> 00:03:04,680
changes pretty often and adds new

00:03:01,890 --> 00:03:07,800
features constantly changing but to add

00:03:04,680 --> 00:03:09,540
new features are very useful and this is

00:03:07,800 --> 00:03:10,920
also one of reasons why I think it's a

00:03:09,540 --> 00:03:12,570
good tool to again invested into perhaps

00:03:10,920 --> 00:03:14,750
because the community is there and it

00:03:12,570 --> 00:03:17,910
keeps growing and to enter it is

00:03:14,750 --> 00:03:19,500
possibly something very beneficial for

00:03:17,910 --> 00:03:21,570
yourself and it's not something I'll

00:03:19,500 --> 00:03:24,920
just die off because it's constantly

00:03:21,570 --> 00:03:27,180
growing and changing very quickly and so

00:03:24,920 --> 00:03:29,550
with that with those few tidbits out of

00:03:27,180 --> 00:03:32,010
the way I use the word automation tool a

00:03:29,550 --> 00:03:33,300
few times already i think but i think

00:03:32,010 --> 00:03:34,800
findable is really more than that and a

00:03:33,300 --> 00:03:37,650
lot of these tools are really more than

00:03:34,800 --> 00:03:39,600
just tools some of them are languages

00:03:37,650 --> 00:03:41,970
they provide a language for you to

00:03:39,600 --> 00:03:44,130
automate with they provide the engine

00:03:41,970 --> 00:03:47,220
which you use the language to which

00:03:44,130 --> 00:03:48,270
drives the language rather and with

00:03:47,220 --> 00:03:49,740
these tools that combined with the

00:03:48,270 --> 00:03:51,300
community that ansible it's built it's

00:03:49,740 --> 00:03:53,880
become more of a platform than just a

00:03:51,300 --> 00:03:56,580
tool or a language or an engine it's

00:03:53,880 --> 00:03:58,350
something that is living and growing and

00:03:56,580 --> 00:04:01,680
expanding and something that you can

00:03:58,350 --> 00:04:02,970
participate in and so keeping that I

00:04:01,680 --> 00:04:06,690
think it's a it's a good choice to me

00:04:02,970 --> 00:04:07,890
before you do to try out but really

00:04:06,690 --> 00:04:10,920
what's important is what can you really

00:04:07,890 --> 00:04:14,100
do what can this automation platform

00:04:10,920 --> 00:04:15,690
tool language engine do for you well I

00:04:14,100 --> 00:04:18,570
can do quite a few things as you could

00:04:15,690 --> 00:04:20,130
imagine different different automation

00:04:18,570 --> 00:04:22,380
tools would probably do very serious

00:04:20,130 --> 00:04:24,230
similar things and here are some of the

00:04:22,380 --> 00:04:26,280
things they can do probably

00:04:24,230 --> 00:04:28,770
configuration management seems like a

00:04:26,280 --> 00:04:30,870
pretty obvious thing to automate

00:04:28,770 --> 00:04:34,830
application deployment you'll so you'll

00:04:30,870 --> 00:04:36,060
see it come out pretty often because of

00:04:34,830 --> 00:04:37,770
the ability to orchestrate a

00:04:36,060 --> 00:04:38,849
configuration management when you have

00:04:37,770 --> 00:04:40,590
to figure in management and

00:04:38,849 --> 00:04:42,030
orchestration together you can kind of

00:04:40,590 --> 00:04:44,159
really start thinking that way I can

00:04:42,030 --> 00:04:46,289
actually deploy a whole application

00:04:44,159 --> 00:04:49,319
through these two kind of features and

00:04:46,289 --> 00:04:51,150
system provisioning is pretty pretty

00:04:49,319 --> 00:04:53,039
obvious as well to have a fresh system

00:04:51,150 --> 00:04:54,930
and then configure it and manage it and

00:04:53,039 --> 00:04:57,629
orchestrate it and the last one is

00:04:54,930 --> 00:05:00,030
probably actually anything why do I say

00:04:57,629 --> 00:05:01,500
that at all it's not just entirely

00:05:00,030 --> 00:05:03,240
hyperbole it's mostly hyper of label

00:05:01,500 --> 00:05:06,150
it's not entirely Everett really when

00:05:03,240 --> 00:05:07,440
you have the above four points does that

00:05:06,150 --> 00:05:08,970
not essentially allow you to do almost

00:05:07,440 --> 00:05:11,280
anything in terms of deployment and

00:05:08,970 --> 00:05:14,400
provisioning of your application or to

00:05:11,280 --> 00:05:15,990
your systems your nodes so probably

00:05:14,400 --> 00:05:20,310
actually anything if you do the first

00:05:15,990 --> 00:05:22,380
four things and it could be simple it

00:05:20,310 --> 00:05:28,580
could be complex and but with those four

00:05:22,380 --> 00:05:31,050
points you can do all those things so

00:05:28,580 --> 00:05:32,969
that's just a brief you know what is

00:05:31,050 --> 00:05:33,990
ends well what can you possibly do now

00:05:32,969 --> 00:05:36,030
let's move on to the main principles

00:05:33,990 --> 00:05:38,610
we're just really meat of the talk to

00:05:36,030 --> 00:05:43,650
describe what ends will actually how it

00:05:38,610 --> 00:05:45,479
works so design goals there were some

00:05:43,650 --> 00:05:47,750
design goals like went into an zabal

00:05:45,479 --> 00:05:50,639
when it was first created it had to be

00:05:47,750 --> 00:05:52,620
really simple simple as follow the main

00:05:50,639 --> 00:05:57,060
line word here it had to be that have

00:05:52,620 --> 00:05:59,370
really low or be really easy to use very

00:05:57,060 --> 00:06:01,050
few moving parts so we can easily manage

00:05:59,370 --> 00:06:02,759
it once you've installed it you don't

00:06:01,050 --> 00:06:04,860
need to constantly do maintenance on

00:06:02,759 --> 00:06:06,500
your installation of all your nodes that

00:06:04,860 --> 00:06:08,969
you're trying to manage or automate it

00:06:06,500 --> 00:06:11,580
had to have a very easy and descriptive

00:06:08,969 --> 00:06:14,940
language so not everyone necessary has

00:06:11,580 --> 00:06:17,370
coding skills or is part of that side of

00:06:14,940 --> 00:06:19,050
your company but it would be nice of

00:06:17,370 --> 00:06:21,990
everyone even though they don't have the

00:06:19,050 --> 00:06:23,610
same familiarity with with coding what

00:06:21,990 --> 00:06:25,650
happy to be able to understand what is

00:06:23,610 --> 00:06:28,620
happening just by reading it very human

00:06:25,650 --> 00:06:31,039
readable had to be secure like anything

00:06:28,620 --> 00:06:33,150
else don't want any security holes and

00:06:31,039 --> 00:06:34,860
lastly it has to be powerful actually

00:06:33,150 --> 00:06:40,380
needs to be able to do what you want to

00:06:34,860 --> 00:06:41,580
do so six pretty simple design goals and

00:06:40,380 --> 00:06:43,349
it

00:06:41,580 --> 00:06:47,340
make sense some of the tools that are

00:06:43,349 --> 00:06:48,990
out there that aren't ansible have maybe

00:06:47,340 --> 00:06:51,800
more moving parts so it's harder to

00:06:48,990 --> 00:06:54,719
manage it has perhaps language that is

00:06:51,800 --> 00:06:56,400
more difficult to read let's say

00:06:54,719 --> 00:06:57,750
compared to a bash script it can be it

00:06:56,400 --> 00:06:59,280
can become daunting to read after a

00:06:57,750 --> 00:07:01,710
while so having something easy to read

00:06:59,280 --> 00:07:03,870
is actually really important and being

00:07:01,710 --> 00:07:05,009
easy to use is why I'm doing the song

00:07:03,870 --> 00:07:07,050
the best place to give a little bit of

00:07:05,009 --> 00:07:11,539
entry to enter this kind of sphere of

00:07:07,050 --> 00:07:16,560
the IT world that's become a very very

00:07:11,539 --> 00:07:18,750
cemented fabric of this community so

00:07:16,560 --> 00:07:20,400
with the design goals in mind how was it

00:07:18,750 --> 00:07:24,419
achieved how do they actually do maybe

00:07:20,400 --> 00:07:27,000
six of those things so openssh is the

00:07:24,419 --> 00:07:28,620
really the only protocol that's used in

00:07:27,000 --> 00:07:29,789
ansible there's also some other programs

00:07:28,620 --> 00:07:31,620
you can fall back on it's not the only

00:07:29,789 --> 00:07:33,330
transport method for communicating

00:07:31,620 --> 00:07:35,610
between the controller and the nodes

00:07:33,330 --> 00:07:38,370
that it wants to manage but openssh is

00:07:35,610 --> 00:07:39,960
the default and it's been around for a

00:07:38,370 --> 00:07:42,000
while it's very robust it's been well

00:07:39,960 --> 00:07:46,409
tested that's why they decide to use

00:07:42,000 --> 00:07:48,779
openssh and so that brings in like the

00:07:46,409 --> 00:07:51,169
security point which is pretty important

00:07:48,779 --> 00:07:54,719
the second point is there are no agents

00:07:51,169 --> 00:07:56,430
because we only use SSH actually so you

00:07:54,719 --> 00:07:59,400
don't have to install any damon's or no

00:07:56,430 --> 00:08:01,770
demons run on your nodes at all there's

00:07:59,400 --> 00:08:02,759
no no maintenance of those damon's you

00:08:01,770 --> 00:08:04,110
don't have to start them up you don't

00:08:02,759 --> 00:08:06,150
have to mean you have to check on the

00:08:04,110 --> 00:08:09,509
Microsoft there so because there's no

00:08:06,150 --> 00:08:11,969
agents they don't pull a your controller

00:08:09,509 --> 00:08:14,550
note all the control node just talks to

00:08:11,969 --> 00:08:17,580
them through ssh very very simple very

00:08:14,550 --> 00:08:20,940
low overhead and it's very easy because

00:08:17,580 --> 00:08:22,529
well node X doesn't have anything on it

00:08:20,940 --> 00:08:24,750
actually that there is no ansible on

00:08:22,529 --> 00:08:27,120
node X the only thing that Angela's on

00:08:24,750 --> 00:08:30,169
is your controller computer so you saw a

00:08:27,120 --> 00:08:33,000
sensation you do what you need to do and

00:08:30,169 --> 00:08:35,250
yeah mo so yeah mo is the language of

00:08:33,000 --> 00:08:38,310
ansible it's very easy to read very

00:08:35,250 --> 00:08:39,599
human readable much more human readable

00:08:38,310 --> 00:08:41,909
to me then compared to something like

00:08:39,599 --> 00:08:44,339
JSON which is also not terrible to read

00:08:41,909 --> 00:08:47,910
but this is very easy it actually looks

00:08:44,339 --> 00:08:49,290
like regular English almost so these

00:08:47,910 --> 00:08:50,730
three points for how I to achieve some

00:08:49,290 --> 00:08:53,819
of the six things id let's do foreigners

00:08:50,730 --> 00:08:55,110
with design goals and it I think it

00:08:53,819 --> 00:09:00,779
makes a lot of sense to me

00:08:55,110 --> 00:09:03,149
the way to do it so we talked a little

00:09:00,779 --> 00:09:05,820
about infrastructure next to kind of

00:09:03,149 --> 00:09:09,000
illustrate what ansible looks like when

00:09:05,820 --> 00:09:12,029
it's doing what it does and to kind of

00:09:09,000 --> 00:09:14,339
contrast that we have an example with

00:09:12,029 --> 00:09:16,019
with agents so with agents this is not

00:09:14,339 --> 00:09:18,570
ansible as well doesn't have any agents

00:09:16,019 --> 00:09:19,769
at all so with agents you have the

00:09:18,570 --> 00:09:21,779
controller computer which could be

00:09:19,769 --> 00:09:23,700
something called the master and you have

00:09:21,779 --> 00:09:26,579
your notes and each of them has but it

00:09:23,700 --> 00:09:28,860
has an agent it's called Agent X and the

00:09:26,579 --> 00:09:30,480
notes would have to continually pull the

00:09:28,860 --> 00:09:31,230
controller to talk to it and what have

00:09:30,480 --> 00:09:34,730
you there would be a two-way

00:09:31,230 --> 00:09:39,240
communication but you have it such that

00:09:34,730 --> 00:09:41,820
the nodes need to always pull the master

00:09:39,240 --> 00:09:42,779
at some point to talk to it and you

00:09:41,820 --> 00:09:44,610
would need to maintain each of these

00:09:42,779 --> 00:09:45,959
nodes to have this Damon or this agent

00:09:44,610 --> 00:09:49,560
running in the background all the time

00:09:45,959 --> 00:09:51,779
so you get it becomes hard to deploy

00:09:49,560 --> 00:09:54,329
because you need to install things onto

00:09:51,779 --> 00:09:57,300
your nodes and it may become hard to

00:09:54,329 --> 00:10:01,380
maintain if it's a complicated system so

00:09:57,300 --> 00:10:04,320
with agents is contrary to without

00:10:01,380 --> 00:10:06,540
agents so there are no agents in ansible

00:10:04,320 --> 00:10:10,769
so the controller just talks to the

00:10:06,540 --> 00:10:14,190
notes through ssh that's really it

00:10:10,769 --> 00:10:17,790
actually there isn't much else to it as

00:10:14,190 --> 00:10:20,579
I understand much like how you sh to

00:10:17,790 --> 00:10:22,860
your remote machine to do work on it to

00:10:20,579 --> 00:10:24,990
send a file to it this is exactly what

00:10:22,860 --> 00:10:30,350
answell does there is no need for any

00:10:24,990 --> 00:10:30,350
other control mechanism it's just SSH

00:10:32,540 --> 00:10:35,930
so we now move on to some of the

00:10:34,490 --> 00:10:37,970
terminology that's involved in ansible

00:10:35,930 --> 00:10:42,470
which will then allow you to really

00:10:37,970 --> 00:10:44,450
understand a little stuff there i think

00:10:42,470 --> 00:10:46,670
i'm going to describe six of terms next

00:10:44,450 --> 00:10:48,110
but there are many many more terms that

00:10:46,670 --> 00:10:49,340
are involved in ansible that i won't be

00:10:48,110 --> 00:10:51,230
covering today this is more of an

00:10:49,340 --> 00:10:52,970
introductory talk but these I think

00:10:51,230 --> 00:10:54,710
there was the six main terms that you

00:10:52,970 --> 00:10:57,830
could start off with and beat and get

00:10:54,710 --> 00:11:02,000
into an zabal first is inventory then

00:10:57,830 --> 00:11:04,700
playbooks plays tasks modules and

00:11:02,000 --> 00:11:05,690
handlers so they're ever done in such a

00:11:04,700 --> 00:11:08,330
way because the kind of play need to

00:11:05,690 --> 00:11:12,620
play into each other and we'll go with

00:11:08,330 --> 00:11:14,750
inventory as our first thing to describe

00:11:12,620 --> 00:11:16,970
so the inventory is really what it

00:11:14,750 --> 00:11:18,890
sounds like it's a list of all of your

00:11:16,970 --> 00:11:21,050
targeted nodes that you want to automate

00:11:18,890 --> 00:11:23,420
or manage or provision from your

00:11:21,050 --> 00:11:26,240
controller machine it has an i and i

00:11:23,420 --> 00:11:27,890
like a file structure so it's just very

00:11:26,240 --> 00:11:30,200
simple-looking is just a list and maybe

00:11:27,890 --> 00:11:34,040
some groupings and that's really about

00:11:30,200 --> 00:11:36,470
it it defaults as it's actually a host

00:11:34,040 --> 00:11:38,570
file that's located in at CD as well it

00:11:36,470 --> 00:11:42,170
hosts it looks somewhat similar to your

00:11:38,570 --> 00:11:44,510
regular at sea hosts file but possibly a

00:11:42,170 --> 00:11:45,800
little simpler you can all sort

00:11:44,510 --> 00:11:48,340
information about the host in them you

00:11:45,800 --> 00:11:50,030
can start variables you can store

00:11:48,340 --> 00:11:53,060
different ways you wanna interact with

00:11:50,030 --> 00:11:53,870
those hosts if you like and you can go

00:11:53,060 --> 00:11:55,070
from there you can make it as

00:11:53,870 --> 00:11:58,550
complicated or as simple as you like

00:11:55,070 --> 00:12:00,020
they can be statically static creatives

00:11:58,550 --> 00:12:01,580
just like a set list that you write

00:12:00,020 --> 00:12:04,790
yourself or you can have a list be

00:12:01,580 --> 00:12:07,160
popular dynamically through different

00:12:04,790 --> 00:12:09,470
sources for today we will only be

00:12:07,160 --> 00:12:10,160
covering a static in our demo dynamic

00:12:09,470 --> 00:12:15,290
it's not something i'll be covering

00:12:10,160 --> 00:12:18,440
today so the next in top o is the

00:12:15,290 --> 00:12:20,810
playbook the playbook as it sounds is

00:12:18,440 --> 00:12:24,080
the entry point to anne's will

00:12:20,810 --> 00:12:26,750
automation it is the recipe it is it is

00:12:24,080 --> 00:12:28,790
the it is your strategy to make the

00:12:26,750 --> 00:12:32,660
touchdown in four downs and bin football

00:12:28,790 --> 00:12:33,740
it is it is it is the playbook it

00:12:32,660 --> 00:12:36,590
contains all the information of how you

00:12:33,740 --> 00:12:39,710
you want your node to reach the desired

00:12:36,590 --> 00:12:41,690
state what desire state means is really

00:12:39,710 --> 00:12:45,510
up to you but all of that is the signed

00:12:41,690 --> 00:12:47,190
or is defined in this playbook this file

00:12:45,510 --> 00:12:50,670
and it can also store variables about

00:12:47,190 --> 00:12:52,620
the host or how it wants to get to the

00:12:50,670 --> 00:12:54,240
desired state whether you have some

00:12:52,620 --> 00:12:56,640
let's say Apache configuration that

00:12:54,240 --> 00:12:58,170
needs a certain parameter in this way

00:12:56,640 --> 00:12:59,910
you can define it here and the PlayBook

00:12:58,170 --> 00:13:01,370
will play into that and use that during

00:12:59,910 --> 00:13:03,900
the provisioning process of your note

00:13:01,370 --> 00:13:08,730
but essentially the PlayBook is what it

00:13:03,900 --> 00:13:10,470
sounds like it is a playbook so next

00:13:08,730 --> 00:13:12,450
star plays out what order play books

00:13:10,470 --> 00:13:15,390
about plays you have four downs to make

00:13:12,450 --> 00:13:17,970
the touchdown so you have maybe 44 place

00:13:15,390 --> 00:13:19,680
to make to get to get there so to define

00:13:17,970 --> 00:13:22,380
it's like a executed provisioning or

00:13:19,680 --> 00:13:25,410
process from start to finish that's a

00:13:22,380 --> 00:13:27,690
play so your strategy to get the next

00:13:25,410 --> 00:13:29,610
down you know 10 10 10 yards down the

00:13:27,690 --> 00:13:31,350
line that's the play that's the play

00:13:29,610 --> 00:13:33,480
maybe maybe a four plays in your

00:13:31,350 --> 00:13:35,850
playbook and that's the whole playbook

00:13:33,480 --> 00:13:39,630
and play books are obviously made of

00:13:35,850 --> 00:13:41,660
place the language is very English and

00:13:39,630 --> 00:13:44,700
it should be pretty easy to understand

00:13:41,660 --> 00:13:47,610
just from just I'm hearing it I think so

00:13:44,700 --> 00:13:50,940
tasks it's a block that defines a single

00:13:47,610 --> 00:13:54,540
procedure to be executed so plays are

00:13:50,940 --> 00:13:56,910
made from tasks so each action that you

00:13:54,540 --> 00:13:59,250
need to finish that play that is a task

00:13:56,910 --> 00:14:02,220
and one important thing about tasks is

00:13:59,250 --> 00:14:04,980
that they're run sequentially so there's

00:14:02,220 --> 00:14:06,750
no real confusion about how at asked for

00:14:04,980 --> 00:14:08,430
seeds because it will follow one after

00:14:06,750 --> 00:14:12,390
the other it'll be one two three four

00:14:08,430 --> 00:14:13,350
ABCD so reading it when you read when we

00:14:12,390 --> 00:14:15,810
add to the demo and you read the the

00:14:13,350 --> 00:14:19,700
ammo file you'll see exactly what's

00:14:15,810 --> 00:14:19,700
happening because it's sequential

00:14:21,830 --> 00:14:29,160
next we have modules so modules are the

00:14:26,310 --> 00:14:31,440
actual work unit of a playbook they're

00:14:29,160 --> 00:14:32,610
the things that actually do what you

00:14:31,440 --> 00:14:35,190
want to do they're the little programs

00:14:32,610 --> 00:14:38,460
that are that are set by ansible to the

00:14:35,190 --> 00:14:41,880
managed nodes so I said that Anne's will

00:14:38,460 --> 00:14:43,860
only use SSH it's essentially it SSH is

00:14:41,880 --> 00:14:46,110
copies this little program over to your

00:14:43,860 --> 00:14:47,610
node and runs it on your node and then

00:14:46,110 --> 00:14:51,630
removes it from the node when the job is

00:14:47,610 --> 00:14:55,080
done so modules do the actual work and a

00:14:51,630 --> 00:14:56,339
task calls a module so we have a

00:14:55,080 --> 00:14:58,650
one-to-one relation seeking a task in

00:14:56,339 --> 00:15:00,120
module oil does that one thing and it

00:14:58,650 --> 00:15:05,880
moves on to the next task and they

00:15:00,120 --> 00:15:07,380
complete the play eventually so the next

00:15:05,880 --> 00:15:09,990
thing to talk about our handlers they

00:15:07,380 --> 00:15:11,850
are the kind of like that they're kind

00:15:09,990 --> 00:15:14,279
of like task actually but their task

00:15:11,850 --> 00:15:17,400
that only runs once at the end of a play

00:15:14,279 --> 00:15:22,260
and it can be triggered by a task so for

00:15:17,400 --> 00:15:27,270
example let's say you install a web

00:15:22,260 --> 00:15:29,310
server let's say and you configure it at

00:15:27,270 --> 00:15:31,560
some point you may want to restart it if

00:15:29,310 --> 00:15:32,760
you change the configuration so you can

00:15:31,560 --> 00:15:35,220
trigger it such that if you change the

00:15:32,760 --> 00:15:37,680
creation run this handler that then

00:15:35,220 --> 00:15:40,670
restarts the service and so on and so

00:15:37,680 --> 00:15:43,620
forth they're kind of like an end of end

00:15:40,670 --> 00:15:45,660
of play thing to do like just to clean

00:15:43,620 --> 00:15:51,420
up or or restarting services is that I

00:15:45,660 --> 00:15:54,360
think how they're normally used so you

00:15:51,420 --> 00:15:55,470
get to see that it kind of looks like it

00:15:54,360 --> 00:15:57,900
kind of looks like this the

00:15:55,470 --> 00:16:01,020
encapsulation of a playbook a play the

00:15:57,900 --> 00:16:02,520
task the modules and the handlers there

00:16:01,020 --> 00:16:06,270
are additional pieces are within it that

00:16:02,520 --> 00:16:09,450
can be in a playbook such as variables

00:16:06,270 --> 00:16:11,580
and and and enrolls and in different

00:16:09,450 --> 00:16:13,110
pieces but we won't really be covering

00:16:11,580 --> 00:16:15,680
so many of those today for this in

00:16:13,110 --> 00:16:15,680
directory demo

00:16:19,340 --> 00:16:31,050
and so we'll move on to the dead animal

00:16:22,470 --> 00:16:34,940
portion of the presentation yep not

00:16:31,050 --> 00:16:36,840
quite right some stuff there already

00:16:34,940 --> 00:16:38,880
that's clear that some of that stuff

00:16:36,840 --> 00:16:40,410
probably I should clear that earlier but

00:16:38,880 --> 00:16:43,590
I change the text size doesn't look

00:16:40,410 --> 00:16:45,210
weird right is that fairly visible for

00:16:43,590 --> 00:16:48,540
everybody in the audience it should be

00:16:45,210 --> 00:16:52,830
bigger and in the back is it okay pretty

00:16:48,540 --> 00:16:55,620
good I like that so the the demo today

00:16:52,830 --> 00:16:58,470
will be kind of a something of us start

00:16:55,620 --> 00:17:00,840
to finish a very basic start to finish

00:16:58,470 --> 00:17:02,880
you're using Angela we're going to start

00:17:00,840 --> 00:17:06,930
from the installation and we're going to

00:17:02,880 --> 00:17:10,350
go to executing a playbook and seeing

00:17:06,930 --> 00:17:11,880
the results of it for the demo I've

00:17:10,350 --> 00:17:13,500
already prepared some of the pieces so

00:17:11,880 --> 00:17:15,089
we won't really need to really install

00:17:13,500 --> 00:17:17,820
but I'm gonna talk about anyway so we

00:17:15,089 --> 00:17:20,640
can get that out of the way so ansible

00:17:17,820 --> 00:17:22,820
is I mentioned really really easy to

00:17:20,640 --> 00:17:25,980
install you only need to install it on

00:17:22,820 --> 00:17:28,199
one machine your controller machine that

00:17:25,980 --> 00:17:31,260
could be your laptop it could be your

00:17:28,199 --> 00:17:33,090
your Raspberry Pi it could be your main

00:17:31,260 --> 00:17:34,890
desktop that's the only thing actually

00:17:33,090 --> 00:17:37,170
needs needs and double everything that

00:17:34,890 --> 00:17:39,330
anvil controls doesn't need anything

00:17:37,170 --> 00:17:41,250
well well I thought maybe that's not

00:17:39,330 --> 00:17:43,260
true doesn't it needs it needs it needs

00:17:41,250 --> 00:17:45,200
some things but for the most part those

00:17:43,260 --> 00:17:48,660
are all provided already on your system

00:17:45,200 --> 00:17:51,180
you need you need Python because and it

00:17:48,660 --> 00:17:53,730
was written in Python you'll need SSH

00:17:51,180 --> 00:17:55,140
which is normally fried as well so very

00:17:53,730 --> 00:17:58,560
standard things that are already part of

00:17:55,140 --> 00:18:00,270
your system you will not need to install

00:17:58,560 --> 00:18:02,550
so anne's will only need to be installed

00:18:00,270 --> 00:18:04,290
once and on your control system there

00:18:02,550 --> 00:18:07,500
are few ways to do this if you run a

00:18:04,290 --> 00:18:12,420
distribution like something rail-based

00:18:07,500 --> 00:18:14,790
such as rail or santos or fedora you can

00:18:12,420 --> 00:18:17,490
just do your usual yum install or dnf

00:18:14,790 --> 00:18:19,500
install and it's already it's already in

00:18:17,490 --> 00:18:22,380
the repositories but you'll need to add

00:18:19,500 --> 00:18:24,300
the repositories for rail and centos

00:18:22,380 --> 00:18:25,980
because it's in the airpo repository but

00:18:24,300 --> 00:18:27,930
otherwise it's already there for you to

00:18:25,980 --> 00:18:29,850
use from adoro you can already do just

00:18:27,930 --> 00:18:32,429
tnf install

00:18:29,850 --> 00:18:34,140
and it'll be there for you same same

00:18:32,429 --> 00:18:35,760
thing goes for a debian based

00:18:34,140 --> 00:18:40,500
distributions you'll just use apps

00:18:35,760 --> 00:18:46,080
instead of Yammer tnf so just to show

00:18:40,500 --> 00:18:47,210
you yeah I'm list ansible as you can see

00:18:46,080 --> 00:18:49,950
I've already installed ansible it's

00:18:47,210 --> 00:18:52,910
pretty simple so if you were to install

00:18:49,950 --> 00:18:55,679
it maybe I'm installed and tangible

00:18:52,910 --> 00:18:57,840
fairly straightforward if you're running

00:18:55,679 --> 00:18:59,640
something that doesn't have a package

00:18:57,840 --> 00:19:02,789
manager of sorts you can also install it

00:18:59,640 --> 00:19:04,250
via pip because it is Python so that

00:19:02,789 --> 00:19:06,510
should be fairly straightforward as well

00:19:04,250 --> 00:19:07,679
and the last thing you can do is you can

00:19:06,510 --> 00:19:09,870
install from source which is also

00:19:07,679 --> 00:19:11,309
actually really straightforward the

00:19:09,870 --> 00:19:12,870
build process is not very complicated

00:19:11,309 --> 00:19:14,580
you can also just get the binaries and

00:19:12,870 --> 00:19:16,049
they have a pretty good set of a

00:19:14,580 --> 00:19:17,549
straightforward documentation you can

00:19:16,049 --> 00:19:19,350
use on the answer website to get

00:19:17,549 --> 00:19:21,390
yourself started with a source

00:19:19,350 --> 00:19:23,730
installation if you would if you prefer

00:19:21,390 --> 00:19:25,710
to be on the latest release otherwise

00:19:23,730 --> 00:19:30,090
the package manager is I would say is I

00:19:25,710 --> 00:19:33,630
was why I would recommend so with that

00:19:30,090 --> 00:19:37,530
out of the way as I said ansible is

00:19:33,630 --> 00:19:40,850
using SSH only so what would you need to

00:19:37,530 --> 00:19:44,190
do to have it connect to your notes

00:19:40,850 --> 00:19:45,690
probably just to have ssh keys which is

00:19:44,190 --> 00:19:47,640
the recommended way to connect to a

00:19:45,690 --> 00:19:51,150
different nodes I know it sounds really

00:19:47,640 --> 00:19:52,620
silly because it is really silly because

00:19:51,150 --> 00:19:54,179
it's really simple right it's just you

00:19:52,620 --> 00:19:58,470
just need your ssh keys install them

00:19:54,179 --> 00:20:01,559
onto your nodes and there you go for for

00:19:58,470 --> 00:20:02,909
this demo I have a one two and three if

00:20:01,559 --> 00:20:08,309
you caught that quickly let's try that

00:20:02,909 --> 00:20:11,280
again yeah one two and three so one is

00:20:08,309 --> 00:20:14,370
my controller node my controller machine

00:20:11,280 --> 00:20:16,520
rather and two and three are two of the

00:20:14,370 --> 00:20:19,049
machines that will manage with ansible

00:20:16,520 --> 00:20:22,740
i've already installed the ssh keys on

00:20:19,049 --> 00:20:25,919
to both the notes two and three so we

00:20:22,740 --> 00:20:28,440
can essentially already get to work so

00:20:25,919 --> 00:20:30,419
just to just to show you an zabal is

00:20:28,440 --> 00:20:34,549
installed and it should be working and

00:20:30,419 --> 00:20:34,549
just do version and it's working

00:20:35,420 --> 00:20:40,010
so let's interact with a note in some

00:20:38,990 --> 00:20:41,510
way to show that it's actually working

00:20:40,010 --> 00:20:44,360
and with those nodes it can actually

00:20:41,510 --> 00:20:46,520
communicate with them properly will do

00:20:44,360 --> 00:20:47,720
will do some some ad hoc commands start

00:20:46,520 --> 00:20:50,660
with and then we'll go into the PlayBook

00:20:47,720 --> 00:20:52,160
afterwards to show what that's about the

00:20:50,660 --> 00:20:54,410
I now command commands are really too

00:20:52,160 --> 00:20:57,440
interesting but we can show them anyway

00:20:54,410 --> 00:21:00,050
so to use Ann's will you use the command

00:20:57,440 --> 00:21:04,130
ansible and the first permit here all is

00:21:00,050 --> 00:21:06,080
listing the hosts you want target and so

00:21:04,130 --> 00:21:09,920
all the targets would be both nodes 2

00:21:06,080 --> 00:21:14,150
and 3 so let's do dash M which stands

00:21:09,920 --> 00:21:18,530
for module so we'll do a ping there is a

00:21:14,150 --> 00:21:21,500
pink module success so we can

00:21:18,530 --> 00:21:24,170
successfully talk to both of our notes

00:21:21,500 --> 00:21:27,620
via ansible doesn't really do anything

00:21:24,170 --> 00:21:30,110
just does ping and pong and nothing has

00:21:27,620 --> 00:21:31,820
changed about them success you can see

00:21:30,110 --> 00:21:35,090
that the animal gives you very very

00:21:31,820 --> 00:21:37,190
human readable output it tells you to

00:21:35,090 --> 00:21:39,380
host it it tried to access or try to

00:21:37,190 --> 00:21:42,560
effect and tells you the success or

00:21:39,380 --> 00:21:44,000
failure of your command and what may

00:21:42,560 --> 00:21:46,580
have changed during the course of that

00:21:44,000 --> 00:21:50,930
command if anything so very simple

00:21:46,580 --> 00:21:52,640
looking very easy so I mentioned the

00:21:50,930 --> 00:21:53,750
inventory earlier and let's let's just

00:21:52,640 --> 00:21:57,230
briefly take a look at before we move

00:21:53,750 --> 00:22:02,480
forward I said that the default was in

00:21:57,230 --> 00:22:06,530
an zabal at CN zabal hosts so I made a

00:22:02,480 --> 00:22:08,030
really simple looking it's a really

00:22:06,530 --> 00:22:10,450
simple looking inventory file it just

00:22:08,030 --> 00:22:14,860
has a grouping that's called a sauce and

00:22:10,450 --> 00:22:19,760
f sauce 1s are two other nodes I have

00:22:14,860 --> 00:22:22,750
that's it of course you could have more

00:22:19,760 --> 00:22:24,680
complicated set of groupings if you like

00:22:22,750 --> 00:22:28,610
we will actually make any changes here

00:22:24,680 --> 00:22:30,230
but let's say you had web you want host

00:22:28,610 --> 00:22:31,820
web servers on certain nodes and we

00:22:30,230 --> 00:22:35,630
could have sauce 18 here as well and

00:22:31,820 --> 00:22:38,690
let's say you had database and we're put

00:22:35,630 --> 00:22:40,970
a sauce to in there so the you make

00:22:38,690 --> 00:22:42,590
grouping such that host can be part of

00:22:40,970 --> 00:22:43,910
different groups so they can be affected

00:22:42,590 --> 00:22:47,500
by different playbooks that affect

00:22:43,910 --> 00:22:49,990
different groups of those hosts

00:22:47,500 --> 00:22:53,020
and you can mix and match and you can

00:22:49,990 --> 00:22:55,660
define more about them if you like you

00:22:53,020 --> 00:22:57,610
can also make children children groups

00:22:55,660 --> 00:22:59,650
which are composed or parent parent

00:22:57,610 --> 00:23:01,570
groups which are made out of children

00:22:59,650 --> 00:23:04,090
groups so for example if we have web and

00:23:01,570 --> 00:23:06,520
DV be good at something called all and

00:23:04,090 --> 00:23:12,130
all can be comprised of both web and DB

00:23:06,520 --> 00:23:17,680
groups so that's a rather simple looking

00:23:12,130 --> 00:23:20,200
ini like file inventory so now that we

00:23:17,680 --> 00:23:22,690
have the inventory and we see what posts

00:23:20,200 --> 00:23:25,270
were affecting and we've done a hat

00:23:22,690 --> 00:23:27,540
Holcomb and that does a ping maybe let's

00:23:25,270 --> 00:23:29,530
try some other ad hoc commands and

00:23:27,540 --> 00:23:31,480
subduing all it's actually it's actually

00:23:29,530 --> 00:23:35,080
do a sauce because that's the name of

00:23:31,480 --> 00:23:37,180
our group so using dash a we can you put

00:23:35,080 --> 00:23:42,250
in different arguments we can do

00:23:37,180 --> 00:23:44,890
something such as let's say bin I guess

00:23:42,250 --> 00:23:47,230
and date and I suppose this you just

00:23:44,890 --> 00:23:52,720
give us the date maybe I should put my

00:23:47,230 --> 00:23:56,650
user as well a success we got today's

00:23:52,720 --> 00:23:59,440
date and time so these high command's

00:23:56,650 --> 00:24:02,500
are also really rather straightforward

00:23:59,440 --> 00:24:05,680
they also i think are very very English

00:24:02,500 --> 00:24:09,280
to me you have just the ansible command

00:24:05,680 --> 00:24:11,230
the hosts it will affect some parameter

00:24:09,280 --> 00:24:13,900
whether a would be arguments and M would

00:24:11,230 --> 00:24:15,520
be four modules for a would be the

00:24:13,900 --> 00:24:17,140
command you want to burn this instance

00:24:15,520 --> 00:24:19,120
if we you're going to want to run the

00:24:17,140 --> 00:24:21,340
arguing of stash date dash you the user

00:24:19,120 --> 00:24:22,990
you want to run it as and and so on and

00:24:21,340 --> 00:24:25,870
so forth so I think it's very simple

00:24:22,990 --> 00:24:28,030
there's not really much to it it's much

00:24:25,870 --> 00:24:30,510
easier than then I first thought when I

00:24:28,030 --> 00:24:33,190
had to note knew nothing about ansible

00:24:30,510 --> 00:24:36,190
so we front the man dog commands which

00:24:33,190 --> 00:24:37,240
is cool but not super exciting we

00:24:36,190 --> 00:24:38,500
haven't really done anything I suppose

00:24:37,240 --> 00:24:41,020
I'm really provisioning they haven't

00:24:38,500 --> 00:24:45,460
changed anything which we maybe want we

00:24:41,020 --> 00:24:47,050
want to try out so I have a little some

00:24:45,460 --> 00:24:48,880
play books that I made which are

00:24:47,050 --> 00:24:50,680
extremely simple and you can kind of

00:24:48,880 --> 00:24:52,810
tell what they do by reading them it

00:24:50,680 --> 00:24:56,070
installs the paci or installs a web

00:24:52,810 --> 00:24:57,720
server and every move is one so

00:24:56,070 --> 00:24:59,730
let's actually take a look at what a

00:24:57,720 --> 00:25:01,620
playbook looks like we have talked about

00:24:59,730 --> 00:25:02,580
it and what it comprises it but let's

00:25:01,620 --> 00:25:04,440
actually take a look at what looks like

00:25:02,580 --> 00:25:09,360
what yeah mole looks like and why it's

00:25:04,440 --> 00:25:13,230
easy to to read let's actually make this

00:25:09,360 --> 00:25:14,880
the only screen for now so when ya mo we

00:25:13,230 --> 00:25:16,380
know you have a file to denote it is a

00:25:14,880 --> 00:25:18,780
yellow file you have these three dashes

00:25:16,380 --> 00:25:21,540
at the top that's how I know is it's a

00:25:18,780 --> 00:25:25,920
yeah mol file and so this is the

00:25:21,540 --> 00:25:29,010
playbook we have really only one play in

00:25:25,920 --> 00:25:32,160
this book and that is install and start

00:25:29,010 --> 00:25:34,410
apache so the directive here is the name

00:25:32,160 --> 00:25:37,260
so the name of the play is install and

00:25:34,410 --> 00:25:38,400
start apache i would think that if you

00:25:37,260 --> 00:25:39,750
didn't know anything about coding you

00:25:38,400 --> 00:25:43,970
could just beat the names like well this

00:25:39,750 --> 00:25:43,970
probably installs and starts a paci

00:25:44,720 --> 00:25:49,800
probably and so we have we have we are

00:25:47,940 --> 00:25:51,390
hosts which is the group that we had

00:25:49,800 --> 00:25:54,080
before the f sauce group which is the

00:25:51,390 --> 00:25:58,500
note 2 and 3 that we showed you before

00:25:54,080 --> 00:26:00,510
we have the remote user so on that

00:25:58,500 --> 00:26:03,570
machine I have a user called a mom

00:26:00,510 --> 00:26:06,090
that's me and we can be and we can use

00:26:03,570 --> 00:26:08,910
that user to do our provisioning we can

00:26:06,090 --> 00:26:12,150
use to become directives here to say I

00:26:08,910 --> 00:26:13,830
want to become I want to compute

00:26:12,150 --> 00:26:15,510
actually because we're gonna do some

00:26:13,830 --> 00:26:17,420
things to do yum install we need to be

00:26:15,510 --> 00:26:21,540
rude when you'd have sudo permissions

00:26:17,420 --> 00:26:24,480
and yeah that's really the first chunk

00:26:21,540 --> 00:26:26,460
of the play setting that up and now we

00:26:24,480 --> 00:26:29,790
have some tasks which actually do what

00:26:26,460 --> 00:26:33,900
you want it the first task is to let's

00:26:29,790 --> 00:26:35,280
install eh DVD and how are we doing that

00:26:33,900 --> 00:26:37,650
this is 0 this is the module actually

00:26:35,280 --> 00:26:39,480
this is the young module there are a lot

00:26:37,650 --> 00:26:41,280
of modules that really mirror what you

00:26:39,480 --> 00:26:44,880
normally do on the command line whether

00:26:41,280 --> 00:26:49,140
it's copying a file running your package

00:26:44,880 --> 00:26:51,570
manager or more complicated things are

00:26:49,140 --> 00:26:53,520
we starting your service as well so you

00:26:51,570 --> 00:26:55,710
have yum you tell it the module you want

00:26:53,520 --> 00:26:58,410
to do and these are the directives for

00:26:55,710 --> 00:27:00,240
that module on the anvil documentation

00:26:58,410 --> 00:27:01,560
they tell you really really clearly what

00:27:00,240 --> 00:27:02,820
these what these with these directives

00:27:01,560 --> 00:27:05,580
do and they have many examples to show

00:27:02,820 --> 00:27:07,920
you exactly how it works so it might

00:27:05,580 --> 00:27:09,779
look that may not make sense see right

00:27:07,920 --> 00:27:10,739
now but it should be

00:27:09,779 --> 00:27:12,210
fairly clear once you do a little bit

00:27:10,739 --> 00:27:14,700
reading but even reading this I think

00:27:12,210 --> 00:27:16,229
it's not too terrible you have the name

00:27:14,700 --> 00:27:18,210
which is the name of the package you

00:27:16,229 --> 00:27:21,090
want to install here and this is the

00:27:18,210 --> 00:27:23,279
state so we talked about bringing

00:27:21,090 --> 00:27:25,469
ourselves to the desired state and the 0

00:27:23,279 --> 00:27:28,019
state for us for this particular package

00:27:25,469 --> 00:27:29,729
is we want to bring it to the latest so

00:27:28,019 --> 00:27:32,219
we want to install the latest version of

00:27:29,729 --> 00:27:36,299
our web server that's available at from

00:27:32,219 --> 00:27:40,559
yum the second one is a directive called

00:27:36,299 --> 00:27:44,219
copy demo file and the template here is

00:27:40,559 --> 00:27:46,589
a module that templates a file from a

00:27:44,219 --> 00:27:48,299
source to your destination which is a

00:27:46,589 --> 00:27:52,289
remote machine so in this case it would

00:27:48,299 --> 00:27:54,119
template this file or copy it over to my

00:27:52,289 --> 00:27:55,969
notes two and three and what I'm copying

00:27:54,119 --> 00:27:59,009
is I'm copping this index.html file

00:27:55,969 --> 00:28:01,019
that's located in at CD ansible and the

00:27:59,009 --> 00:28:05,089
destination will be the remote machine

00:28:01,019 --> 00:28:08,429
of RW HTML and will also change the

00:28:05,089 --> 00:28:10,499
ownership of that file to Apache as well

00:28:08,429 --> 00:28:13,559
as a group to apache and also change its

00:28:10,499 --> 00:28:16,019
install permissions as well our next

00:28:13,559 --> 00:28:21,659
task is to enable it the actual web

00:28:16,019 --> 00:28:24,869
service so we have the service module we

00:28:21,659 --> 00:28:26,129
have the name of the service and what do

00:28:24,869 --> 00:28:30,690
we want to do to it we want to enable

00:28:26,129 --> 00:28:34,619
the service and this is what I can go

00:28:30,690 --> 00:28:37,200
before that how a task can can invoke a

00:28:34,619 --> 00:28:40,379
handler by using the notify directive

00:28:37,200 --> 00:28:43,289
here we can specify which handler to

00:28:40,379 --> 00:28:45,119
invoke based on the name and for this

00:28:43,289 --> 00:28:46,139
one its start httpd so we've enabled the

00:28:45,119 --> 00:28:48,119
service but we haven't actually started

00:28:46,139 --> 00:28:49,169
the service in our provision here so

00:28:48,119 --> 00:28:52,019
that's why we're having to handle or do

00:28:49,169 --> 00:28:53,009
that piece it's pretty silly but we

00:28:52,019 --> 00:28:54,809
could have done it as an actual task

00:28:53,009 --> 00:28:56,009
probably but just to descend Emma

00:28:54,809 --> 00:28:58,320
straight how handle is work I just want

00:28:56,009 --> 00:29:00,659
have a very simple example and here's

00:28:58,320 --> 00:29:03,719
the handler at the end you have the name

00:29:00,659 --> 00:29:06,059
of it which is start httpd and then you

00:29:03,719 --> 00:29:08,759
have similarly to be above the service

00:29:06,059 --> 00:29:10,830
the name of the service and the state

00:29:08,759 --> 00:29:13,639
you want to be in which is start it you

00:29:10,830 --> 00:29:18,559
want to start the service

00:29:13,639 --> 00:29:22,279
a very silly silly example so it's not

00:29:18,559 --> 00:29:24,289
assume that now and let's go that for a

00:29:22,279 --> 00:29:26,450
bit so now that we have our playbook and

00:29:24,289 --> 00:29:29,440
we've seen it how do we run the playbook

00:29:26,450 --> 00:29:31,789
what does it look like when it runs so

00:29:29,440 --> 00:29:34,879
it's an zabal playbook that's the

00:29:31,789 --> 00:29:36,950
command and all you do is give it the

00:29:34,879 --> 00:29:39,259
name of the playbook and for our

00:29:36,950 --> 00:29:42,589
purposes its installed ash Apache yamo

00:29:39,259 --> 00:29:48,579
and let see what happens what's going to

00:29:42,589 --> 00:29:52,369
happen oh no password is required oh

00:29:48,579 --> 00:29:53,690
dear I forgot to say I reprovision my

00:29:52,369 --> 00:29:57,009
bm's this morning and forgot to make the

00:29:53,690 --> 00:29:57,009
changes because I broke them last night

00:29:57,489 --> 00:30:04,519
this is what happens when you do this

00:29:59,329 --> 00:30:06,409
kind of thing oh yeah well um let's see

00:30:04,519 --> 00:30:10,669
how should we do this in every quick wit

00:30:06,409 --> 00:30:13,389
ah let us let's just sit over here so

00:30:10,669 --> 00:30:15,289
let's let's do a really also silly thing

00:30:13,389 --> 00:30:19,369
since we're already in the midst of

00:30:15,289 --> 00:30:20,419
doing silly things so let's just edit I

00:30:19,369 --> 00:30:25,579
don't think we have been here actually

00:30:20,419 --> 00:30:27,649
let's just edit the suit over so I know

00:30:25,579 --> 00:30:30,019
don't don't dude don't do this don't do

00:30:27,649 --> 00:30:33,169
it don't do this i don't i don't

00:30:30,019 --> 00:30:35,509
recommend doing this normally but for

00:30:33,169 --> 00:30:43,399
the sake of doing it will uncomment this

00:30:35,509 --> 00:30:45,529
line here don't try this at home if you

00:30:43,399 --> 00:30:50,329
do don't don't don't tell them I told

00:30:45,529 --> 00:30:52,099
you do it yeah so a little so the

00:30:50,329 --> 00:30:56,529
command to allow me to make this change

00:30:52,099 --> 00:30:56,529
I think darn

00:31:00,320 --> 00:31:15,860
yeah it's been a little well actually in

00:31:07,140 --> 00:31:15,860
front of Sita if I tell you before W

00:31:16,340 --> 00:31:23,610
okay I assume that did what it did thank

00:31:19,440 --> 00:31:25,020
you to my fellows that see that so did

00:31:23,610 --> 00:31:30,960
it do what it wanted to do yes it did

00:31:25,020 --> 00:31:33,180
okay okay that's fine so well I'm not

00:31:30,960 --> 00:31:34,560
gonna bother changing s sauce to it for

00:31:33,180 --> 00:31:37,950
showing that it fails is probably

00:31:34,560 --> 00:31:40,530
another good thing to show so it's not

00:31:37,950 --> 00:31:42,600
really got you but typically you're

00:31:40,530 --> 00:31:44,250
required to use a password for sudo for

00:31:42,600 --> 00:31:46,230
this demo I want to use no passwords so

00:31:44,250 --> 00:31:48,840
just make it look very clean and nothing

00:31:46,230 --> 00:31:52,140
will go wrong that's never the case

00:31:48,840 --> 00:31:53,460
these demos is it but anyway let's go

00:31:52,140 --> 00:31:55,350
back to taking a look over here actually

00:31:53,460 --> 00:31:57,210
let's clear this up so let's run this

00:31:55,350 --> 00:31:59,430
again and hopefully we get some

00:31:57,210 --> 00:32:03,420
different results for this for one the

00:31:59,430 --> 00:32:04,950
notes okay so we didn't ask that up the

00:32:03,420 --> 00:32:06,960
test setup is the initial stuff where it

00:32:04,950 --> 00:32:11,010
sets up all the tasks that you had a

00:32:06,960 --> 00:32:13,350
sign in the playbook um yeah actually

00:32:11,010 --> 00:32:14,370
looks right all the red is confusing

00:32:13,350 --> 00:32:18,480
because it's like oh no it's nothing

00:32:14,370 --> 00:32:20,310
didn't work but I could do any of our

00:32:18,480 --> 00:32:21,390
sauce too but just to show you what it

00:32:20,310 --> 00:32:24,270
looks like in during a failure is

00:32:21,390 --> 00:32:26,820
probably a good example actually in a

00:32:24,270 --> 00:32:28,890
failure you see that all the texts and

00:32:26,820 --> 00:32:31,560
read very clear the fleming failed but

00:32:28,890 --> 00:32:34,440
you also get this JSON like output that

00:32:31,560 --> 00:32:36,720
tells you it's something changed about

00:32:34,440 --> 00:32:39,810
that task if I change anything and this

00:32:36,720 --> 00:32:41,490
is false did it fail it's true what was

00:32:39,810 --> 00:32:45,600
the standard error and standard out

00:32:41,490 --> 00:32:47,310
outputs so sudo password is required we

00:32:45,600 --> 00:32:51,270
really easily know what the problem was

00:32:47,310 --> 00:32:53,100
when we ran that command and pretty

00:32:51,270 --> 00:32:54,720
pretty good pretty good to know but

00:32:53,100 --> 00:32:56,760
otherwise fs1 was okay because we

00:32:54,720 --> 00:32:59,340
allowed it to use no password for sudo

00:32:56,760 --> 00:33:01,350
and we see that the setup worked out

00:32:59,340 --> 00:33:03,270
fine for that task and or for that node

00:33:01,350 --> 00:33:05,040
rather of those tasks and we see the

00:33:03,270 --> 00:33:07,290
second task was our install HTTP task

00:33:05,040 --> 00:33:11,100
you see that something changed about f

00:33:07,290 --> 00:33:12,720
sauce 1 nothing changed we install HD

00:33:11,100 --> 00:33:18,720
DVD that's what that's what changed

00:33:12,720 --> 00:33:22,590
and the copy demo file oh oh no more

00:33:18,720 --> 00:33:24,299
errors so we see that it failed to copy

00:33:22,590 --> 00:33:25,830
the actual demo file and let's retest it

00:33:24,299 --> 00:33:29,570
actually it's not likely reason to read

00:33:25,830 --> 00:33:32,940
why so again something tried to change

00:33:29,570 --> 00:33:34,799
but it also failed and here's the

00:33:32,940 --> 00:33:37,860
message aborting because the target uses

00:33:34,799 --> 00:33:39,570
selinux but python bindings aren't

00:33:37,860 --> 00:33:41,059
installed this is actually something I

00:33:39,570 --> 00:33:43,710
should've gone over as I gotcha earlier

00:33:41,059 --> 00:33:46,890
for CentOS and for all the distributions

00:33:43,710 --> 00:33:48,929
this particular Linux selinux python

00:33:46,890 --> 00:33:51,090
bindings is required to be installed on

00:33:48,929 --> 00:33:52,350
the nodes and this is not required for

00:33:51,090 --> 00:33:53,850
distributions that already have it

00:33:52,350 --> 00:33:56,010
installed such as fedora I believe has

00:33:53,850 --> 00:33:58,350
been installed and I think probably open

00:33:56,010 --> 00:34:00,299
to as well but for something that's slow

00:33:58,350 --> 00:34:02,340
moving like centos and rel you're going

00:34:00,299 --> 00:34:04,320
to need to install those either as part

00:34:02,340 --> 00:34:05,940
of your PlayBook initially or just to

00:34:04,320 --> 00:34:08,399
install them manually and just how the

00:34:05,940 --> 00:34:09,929
nodes have that already before you do

00:34:08,399 --> 00:34:11,399
any playbook stuff but I would probably

00:34:09,929 --> 00:34:13,440
recommend adding it to your PlayBook so

00:34:11,399 --> 00:34:19,889
you don't you don't be don't become like

00:34:13,440 --> 00:34:22,889
me today so bit of a bit of a snag there

00:34:19,889 --> 00:34:24,929
but let's actually just do that let's

00:34:22,889 --> 00:34:26,010
just install that so we can the CC the

00:34:24,929 --> 00:34:33,470
rest of myself what I was expecting

00:34:26,010 --> 00:34:35,669
earlier that's why selinux adesh Python

00:34:33,470 --> 00:34:40,230
so this is install the bindings that we

00:34:35,669 --> 00:34:44,609
wanted and so the copy demo file should

00:34:40,230 --> 00:34:46,589
not fail this time I've been saying that

00:34:44,609 --> 00:34:50,039
a lot haven't I

00:34:46,589 --> 00:34:51,409
uh anyhow let's run the command again

00:34:50,039 --> 00:34:57,450
actually let's run the command yeah oh

00:34:51,409 --> 00:34:58,890
hey okay okay okay that's a that's a

00:34:57,450 --> 00:35:01,650
that's the word I was more more or less

00:34:58,890 --> 00:35:03,930
expecting so as you can see we've runs

00:35:01,650 --> 00:35:05,219
come in a few times and not on purpose

00:35:03,930 --> 00:35:09,269
but I was planning to run a few times

00:35:05,219 --> 00:35:11,549
not in this way but you see that for the

00:35:09,269 --> 00:35:14,400
test setup it's okay you saw that before

00:35:11,549 --> 00:35:16,380
we had changed f sauce 1 when we did the

00:35:14,400 --> 00:35:18,719
HTTP install but this time it says okay

00:35:16,380 --> 00:35:21,269
because the state of that task has

00:35:18,719 --> 00:35:23,759
already been reached on that node so you

00:35:21,269 --> 00:35:24,930
don't need to do it again it so it knows

00:35:23,759 --> 00:35:26,009
that the state has been reached and

00:35:24,930 --> 00:35:28,259
that's the whole point of these

00:35:26,009 --> 00:35:30,660
playbooks to reach a desired state so

00:35:28,259 --> 00:35:32,549
each task is trying to reach that state

00:35:30,660 --> 00:35:34,049
and you know you'd see that the copy

00:35:32,549 --> 00:35:35,910
demo file task has changed something

00:35:34,049 --> 00:35:38,339
about f sauce 1 so the state has been

00:35:35,910 --> 00:35:40,710
reached and you can see that our next

00:35:38,339 --> 00:35:42,390
task enable the service has also changed

00:35:40,710 --> 00:35:45,499
up sauce 1 so that has also been reached

00:35:42,390 --> 00:35:48,029
and our handler was invoked because of

00:35:45,499 --> 00:35:52,349
this previous task that we had it notify

00:35:48,029 --> 00:35:53,519
please start the service now and they

00:35:52,349 --> 00:35:55,499
know that the hey you know I know this

00:35:53,519 --> 00:35:59,009
particular piece is because that the s

00:35:55,499 --> 00:36:00,569
las 2 is not getting properly but on the

00:35:59,009 --> 00:36:02,099
recap below it's kind of like a sports

00:36:00,569 --> 00:36:03,749
recap you know you can text your instant

00:36:02,099 --> 00:36:05,999
replay of what happened you see that s

00:36:03,749 --> 00:36:08,099
last one is yellow so yellow means

00:36:05,999 --> 00:36:10,349
something has changed and all the tasks

00:36:08,099 --> 00:36:12,390
were okay that means they work properly

00:36:10,349 --> 00:36:15,690
and how many things changed about F

00:36:12,390 --> 00:36:17,369
sauce 13 things unreachable it wasn't

00:36:15,690 --> 00:36:19,559
are beautiful and nothing failed for

00:36:17,369 --> 00:36:22,289
apps last one restless too nothing was

00:36:19,559 --> 00:36:24,479
okay nothing was changed it was visible

00:36:22,289 --> 00:36:26,729
blood s all failed so you can get a

00:36:24,479 --> 00:36:28,229
really really clean output just from

00:36:26,729 --> 00:36:29,849
reading the output of doing your

00:36:28,229 --> 00:36:32,549
PlayBook to see what has changed about

00:36:29,849 --> 00:36:34,799
your system and we're you're where

00:36:32,549 --> 00:36:36,539
you're at right now so when you're going

00:36:34,799 --> 00:36:37,890
to play book again it'll don't go do

00:36:36,539 --> 00:36:43,799
anything unless it needs to do something

00:36:37,890 --> 00:36:45,450
which is a which is very nice so we've

00:36:43,799 --> 00:36:49,549
supposedly changed something about these

00:36:45,450 --> 00:36:51,869
nodes what did we change about them so

00:36:49,549 --> 00:36:53,519
just to show that everything does work

00:36:51,869 --> 00:36:55,559
not just that the ends well put says

00:36:53,519 --> 00:36:59,599
something has changed so if we do

00:36:55,559 --> 00:37:03,289
assistance ESL status httpd

00:36:59,599 --> 00:37:04,519
well we should see that's running which

00:37:03,289 --> 00:37:06,589
is which is great that's what I we

00:37:04,519 --> 00:37:09,880
expect it and we should all see that our

00:37:06,589 --> 00:37:13,369
demo file I believe should be there

00:37:09,880 --> 00:37:16,430
believe I could curl it may be can I

00:37:13,369 --> 00:37:19,509
curl it yes FS osmotic 16 there's our

00:37:16,430 --> 00:37:22,999
there's our demo file just an ascii art

00:37:19,509 --> 00:37:26,180
so you can see that everything that we

00:37:22,999 --> 00:37:28,369
did happened on the actual note itself

00:37:26,180 --> 00:37:32,329
and as wasn't just playing a trick on me

00:37:28,369 --> 00:37:35,180
as it did earlier that that's how i'm

00:37:32,329 --> 00:37:39,799
going to describe it yeah so and you can

00:37:35,180 --> 00:37:42,890
see that was that easy what can i press

00:37:39,799 --> 00:37:44,509
the easy bun was I pretty simple yes but

00:37:42,890 --> 00:37:46,369
that's probably also because this is a

00:37:44,509 --> 00:37:47,479
very simple deployment we really didn't

00:37:46,369 --> 00:37:49,190
really do any except install a web

00:37:47,479 --> 00:38:01,369
server and have changed the index.html

00:37:49,190 --> 00:38:06,380
file yes when the file failed to call

00:38:01,369 --> 00:38:10,279
yep she started on no to you mean yea or

00:38:06,380 --> 00:38:12,619
no one on the one i know'd one because

00:38:10,279 --> 00:38:16,009
it said the second time around is it

00:38:12,619 --> 00:38:18,049
three changes in the system oh that it

00:38:16,009 --> 00:38:20,630
would copy the file and not restart

00:38:18,049 --> 00:38:25,730
apache

00:38:20,630 --> 00:38:27,380
I would also hope that actually hmm so

00:38:25,730 --> 00:38:32,080
again I'm not the most initiated in anza

00:38:27,380 --> 00:38:32,080
but I will ask the field well the field

00:38:34,030 --> 00:38:41,600
that makes total sense thank you for

00:38:39,230 --> 00:38:44,030
example of edge next if you don't want

00:38:41,600 --> 00:38:46,550
to restart the service and it doesn't

00:38:44,030 --> 00:38:51,280
need to you can ease reload instead of

00:38:46,550 --> 00:38:51,280
research and I'll just update it and fix

00:38:52,360 --> 00:38:58,920
also handlers are triggered at the end

00:38:56,640 --> 00:39:05,130
that that's true yet I did mention that

00:38:58,920 --> 00:39:06,240
yeah thank you for affirming that so now

00:39:05,130 --> 00:39:07,769
that we've seen it it has done like I

00:39:06,240 --> 00:39:12,420
said this was a very simple visioning it

00:39:07,769 --> 00:39:13,500
almost did nothing I would say so I said

00:39:12,420 --> 00:39:16,109
that was really pop it was it's a

00:39:13,500 --> 00:39:22,440
powerful tool for your simple and non

00:39:16,109 --> 00:39:24,269
simple tasks and so actually ansible has

00:39:22,440 --> 00:39:25,200
a really good set of examples to give

00:39:24,269 --> 00:39:26,970
you some best practices and how you

00:39:25,200 --> 00:39:27,990
actually really write a playbook for an

00:39:26,970 --> 00:39:30,029
application that's potentially

00:39:27,990 --> 00:39:31,680
multi-tiered if you have a database you

00:39:30,029 --> 00:39:35,730
have a web service you have different

00:39:31,680 --> 00:39:36,779
moving pieces altogether and so I did

00:39:35,730 --> 00:39:40,490
not attempt to write these because I

00:39:36,779 --> 00:39:43,140
didn't feel I had enough enough enough

00:39:40,490 --> 00:39:45,299
efficiency to fight them but let's look

00:39:43,140 --> 00:39:47,760
at something I thought was pretty

00:39:45,299 --> 00:39:51,059
complicated so we have a wordpress dash

00:39:47,760 --> 00:39:53,180
engine X playbook here which i think is

00:39:51,059 --> 00:39:55,500
a pretty good Emma straighter sure how

00:39:53,180 --> 00:39:57,029
complicate something can get within it

00:39:55,500 --> 00:40:00,390
within roofing reason for today is a

00:39:57,029 --> 00:40:03,779
today's talk at least so we have a site

00:40:00,390 --> 00:40:08,220
yamo which is the aim of or which is the

00:40:03,779 --> 00:40:09,450
playbook for this particular example you

00:40:08,220 --> 00:40:11,269
see some of the things you see that it

00:40:09,450 --> 00:40:14,519
is the ammo file you see that it has

00:40:11,269 --> 00:40:16,349
this one play and you see that has hosts

00:40:14,519 --> 00:40:18,809
it wants to target as well as a remote

00:40:16,349 --> 00:40:20,369
user it will become when it does what it

00:40:18,809 --> 00:40:21,450
wants to do it's come into these other

00:40:20,369 --> 00:40:23,190
pieces because it's necessary to eat

00:40:21,450 --> 00:40:25,230
them because that's being it's being

00:40:23,190 --> 00:40:27,119
route rather rather than becoming some

00:40:25,230 --> 00:40:31,200
user then that becomes route so this is

00:40:27,119 --> 00:40:33,720
something I mentioned prior roles so you

00:40:31,200 --> 00:40:35,039
can set of rules as reusable code like

00:40:33,720 --> 00:40:36,509
you would think in a sea program your

00:40:35,039 --> 00:40:38,700
includes you include all these functions

00:40:36,509 --> 00:40:42,900
you want to use and what have you so

00:40:38,700 --> 00:40:45,660
roles are fully functioning encapsulated

00:40:42,900 --> 00:40:47,789
playbooks that do what they are what

00:40:45,660 --> 00:40:49,319
they are supposed to do and for this

00:40:47,789 --> 00:40:51,750
case it here there's some common things

00:40:49,319 --> 00:40:54,829
here it likely installs a my sequel and

00:40:51,750 --> 00:40:57,450
engine X and a PHP and WordPress so

00:40:54,829 --> 00:40:58,740
playbooks if you were to write one all

00:40:57,450 --> 00:40:59,730
by yourself it might become really

00:40:58,740 --> 00:41:02,519
really really long if you got a really

00:40:59,730 --> 00:41:04,769
complicated piece of software so what

00:41:02,519 --> 00:41:06,569
fans will has is it has roles which are

00:41:04,769 --> 00:41:08,309
like include files you mean you reuse

00:41:06,569 --> 00:41:10,020
playbooks at you done before in smaller

00:41:08,309 --> 00:41:12,600
chunks into your

00:41:10,020 --> 00:41:14,310
application you can obviously modify to

00:41:12,600 --> 00:41:16,710
have different parameters when you're

00:41:14,310 --> 00:41:17,790
running these roles again but the fact

00:41:16,710 --> 00:41:19,380
that you can come correct

00:41:17,790 --> 00:41:21,030
compartmentalize and modular eyes all

00:41:19,380 --> 00:41:22,320
your playbooks into smaller pieces which

00:41:21,030 --> 00:41:24,510
then can be run in a much larger

00:41:22,320 --> 00:41:27,270
application and reuse them is one of the

00:41:24,510 --> 00:41:28,230
strengths of writing these playbooks so

00:41:27,270 --> 00:41:32,690
let's take a look at some of the roles

00:41:28,230 --> 00:41:36,150
briefly we see that there is a rolls

00:41:32,690 --> 00:41:38,970
directory and let's look at the the my

00:41:36,150 --> 00:41:40,950
skill when I suppose so it has its

00:41:38,970 --> 00:41:43,350
handlers it has its tasks and it has

00:41:40,950 --> 00:41:45,600
some templates the place of I believe in

00:41:43,350 --> 00:41:46,590
this area are just the file is the

00:41:45,600 --> 00:41:48,780
configures files you want to copy over

00:41:46,590 --> 00:41:52,770
to the remote machine and let's take a

00:41:48,780 --> 00:41:56,010
look at the the tasks I suppose so it

00:41:52,770 --> 00:41:58,020
has a main ya know this is similar to

00:41:56,010 --> 00:42:01,200
what we had seen before so again it's

00:41:58,020 --> 00:42:06,150
just another playbook and it has some

00:42:01,200 --> 00:42:07,050
arguments here rather than rather it

00:42:06,150 --> 00:42:09,840
looks like another flavor but it's

00:42:07,050 --> 00:42:13,350
really just some tasks that you want to

00:42:09,840 --> 00:42:14,760
perform so you can see that it's doing

00:42:13,350 --> 00:42:16,410
very similar things what I did was doing

00:42:14,760 --> 00:42:18,060
before you have the template here where

00:42:16,410 --> 00:42:20,100
copies of the creation fall over you

00:42:18,060 --> 00:42:23,900
have a notify to restart the service

00:42:20,100 --> 00:42:26,280
here and and send such and so forth

00:42:23,900 --> 00:42:28,040
rather then they'll notify the handler

00:42:26,280 --> 00:42:32,070
which will then restart service and

00:42:28,040 --> 00:42:34,760
you'll try to enable it and have it

00:42:32,070 --> 00:42:34,760
start here

00:42:37,020 --> 00:42:39,990
and you can do to do as many of these

00:42:38,520 --> 00:42:41,700
you want use many roles as you want as

00:42:39,990 --> 00:42:43,530
needed for your applications so you can

00:42:41,700 --> 00:42:46,350
essentially do a very programmatic way

00:42:43,530 --> 00:42:49,530
of assembling all the building blocks of

00:42:46,350 --> 00:42:51,840
any application you want as well

00:42:49,530 --> 00:42:53,850
actually as a very large community up to

00:42:51,840 --> 00:42:55,860
call danceable galaxy where users submit

00:42:53,850 --> 00:42:57,470
their own roles and their own building

00:42:55,860 --> 00:43:00,000
blocks so that you can reuse them and so

00:42:57,470 --> 00:43:03,060
you can build off of them to make your

00:43:00,000 --> 00:43:05,010
own applications and playbooks work as

00:43:03,060 --> 00:43:10,020
they should so you can map your complex

00:43:05,010 --> 00:43:14,550
or simple simple use cases as you would

00:43:10,020 --> 00:43:18,210
like and so let's just go back to our

00:43:14,550 --> 00:43:20,130
playbook for a bit here and here's a

00:43:18,210 --> 00:43:22,770
really hair here's the the retry file

00:43:20,130 --> 00:43:25,680
that that was produced when we had a

00:43:22,770 --> 00:43:27,090
failure of our playbook earlier it just

00:43:25,680 --> 00:43:28,560
kind of tells you that well something

00:43:27,090 --> 00:43:31,260
something failed and let's just actually

00:43:28,560 --> 00:43:33,540
just take a quick look at it and that

00:43:31,260 --> 00:43:38,160
the hopes that it failed on that's what

00:43:33,540 --> 00:43:39,780
that's what the veto will have and so

00:43:38,160 --> 00:43:41,880
that's that's a that's a brief demo of

00:43:39,780 --> 00:43:46,340
what you can expect was ansible from

00:43:41,880 --> 00:43:49,500
very very simple from 0 to maybe 1 or

00:43:46,340 --> 00:43:52,920
0.5 of the journey for learning as well

00:43:49,500 --> 00:43:55,530
but I would think that the journey here

00:43:52,920 --> 00:43:56,490
was really simple I think just going

00:43:55,530 --> 00:43:57,600
from here you can probably get started

00:43:56,490 --> 00:43:59,250
already and make your own playbook

00:43:57,600 --> 00:44:01,650
that's much better than mine that will

00:43:59,250 --> 00:44:04,500
actually work the first time and that

00:44:01,650 --> 00:44:06,420
will have the needed they need things

00:44:04,500 --> 00:44:07,980
installed on the nodes through your

00:44:06,420 --> 00:44:09,600
PlayBook not manually installing a vm

00:44:07,980 --> 00:44:12,270
like I did we're having to manually

00:44:09,600 --> 00:44:16,590
change the password to use no password

00:44:12,270 --> 00:44:20,250
for sudo and so let's say I go back to

00:44:16,590 --> 00:44:23,940
our slides for a brief moment so that

00:44:20,250 --> 00:44:25,890
was the demo to get started I really

00:44:23,940 --> 00:44:28,170
recommend reading the ansible

00:44:25,890 --> 00:44:30,690
documentation it's actually really good

00:44:28,170 --> 00:44:32,990
that's Morse how I got started when I

00:44:30,690 --> 00:44:35,970
started researching this for this talk

00:44:32,990 --> 00:44:38,040
just reading documentation was enough to

00:44:35,970 --> 00:44:40,410
get me this far at least and they have a

00:44:38,040 --> 00:44:42,780
lot of examples of every module that

00:44:40,410 --> 00:44:44,820
you've seen me use and see haven't see

00:44:42,780 --> 00:44:45,840
me use is has all the examples you need

00:44:44,820 --> 00:44:47,310
to actually under send how to use them

00:44:45,840 --> 00:44:49,110
which i think is really the only part

00:44:47,310 --> 00:44:50,820
that's complicated about using

00:44:49,110 --> 00:44:52,530
ansible it's probably just the modules

00:44:50,820 --> 00:44:56,070
everything else is kind of is naming to

00:44:52,530 --> 00:44:57,570
name the task to name the play and n 2

00:44:56,070 --> 00:44:59,400
so 4 and and and really just structure

00:44:57,570 --> 00:45:01,700
your your application the way you want

00:44:59,400 --> 00:45:04,770
to your diploma the way you want to and

00:45:01,700 --> 00:45:06,780
so that that's the that's actually the

00:45:04,770 --> 00:45:08,040
end of my contest for the talk I woke

00:45:06,780 --> 00:45:10,410
them out for questions that hopefully i

00:45:08,040 --> 00:45:22,800
can answer if not hope for the field can

00:45:10,410 --> 00:45:26,000
answer it yes I assume you did a lot of

00:45:22,800 --> 00:45:29,820
research on trying to figure out which

00:45:26,000 --> 00:45:32,970
you want to use and I'm guessing you

00:45:29,820 --> 00:45:35,550
chose hands full for some reason he tell

00:45:32,970 --> 00:45:37,770
us what are the advantages of using

00:45:35,550 --> 00:45:40,530
vegetable over something like Shaffer

00:45:37,770 --> 00:45:41,670
puppet so I described it a bit earlier

00:45:40,530 --> 00:45:44,070
but three feet the question actually

00:45:41,670 --> 00:45:45,990
what why did I choose anvil why would I

00:45:44,070 --> 00:45:49,530
not choose something like chef or puppet

00:45:45,990 --> 00:45:52,200
or otherwise I think the main point was

00:45:49,530 --> 00:45:54,000
how easy it was to install ansible from

00:45:52,200 --> 00:45:56,070
what I initially read all you had to do

00:45:54,000 --> 00:45:58,110
was install ansible one time and there

00:45:56,070 --> 00:46:01,110
are no other pieces need on any other

00:45:58,110 --> 00:46:02,460
nodes and that the language was really

00:46:01,110 --> 00:46:04,350
reading readable me from the from the

00:46:02,460 --> 00:46:06,210
get-go also it's recommended to learn

00:46:04,350 --> 00:46:07,860
ansible from so my colleagues already so

00:46:06,210 --> 00:46:16,560
that was also a good pushing point to

00:46:07,860 --> 00:46:21,589
learn ansible yes sure let's uh let's

00:46:16,560 --> 00:46:24,420
bring that back actually yes

00:46:21,589 --> 00:46:31,650
let's run that with 125 up again

00:46:24,420 --> 00:46:33,089
actually okay and so will play is so

00:46:31,650 --> 00:46:35,069
when you are learning and you got the

00:46:33,089 --> 00:46:36,569
output come back to your voice does it

00:46:35,069 --> 00:46:50,640
save it in the log file as well

00:46:36,569 --> 00:46:52,410
automatically I'm something that was one

00:46:50,640 --> 00:46:54,869
question the other question I had was I

00:46:52,410 --> 00:46:56,940
noticed that the service so for example

00:46:54,869 --> 00:46:59,099
when you were really stalling because

00:46:56,940 --> 00:47:01,740
you never really gave that command to do

00:46:59,099 --> 00:47:07,589
it so you can automatically decide to do

00:47:01,740 --> 00:47:13,170
fine job so how would it what's actually

00:47:07,589 --> 00:47:14,339
do so we we use jump because we had the

00:47:13,170 --> 00:47:17,069
young module there actually is a nap

00:47:14,339 --> 00:47:19,040
module that you can use to install for

00:47:17,069 --> 00:47:21,480
this shows that you zapped instead

00:47:19,040 --> 00:47:24,000
that's just a let's just be another

00:47:21,480 --> 00:47:27,000
plugin justit's just it ok not Apache

00:47:24,000 --> 00:47:30,290
done yeah well so let's bring up the

00:47:27,000 --> 00:47:32,780
playbook again so we did use the young

00:47:30,290 --> 00:47:34,920
module here which is why it uses yum

00:47:32,780 --> 00:47:36,569
there are some default parameters that

00:47:34,920 --> 00:47:38,369
it goes with to tell you how to use

00:47:36,569 --> 00:47:43,260
young but otherwise you can define them

00:47:38,369 --> 00:47:46,319
as as needed here I believe using yum

00:47:43,260 --> 00:47:49,640
normally just uses with with dash Y at

00:47:46,319 --> 00:47:52,380
least I believe and latest you can say

00:47:49,640 --> 00:47:55,349
you can use the state to determine how

00:47:52,380 --> 00:47:56,790
it acts you can also remove remove the

00:47:55,349 --> 00:47:58,170
package with a different state which

00:47:56,790 --> 00:48:01,380
would be absent instead of latest for

00:47:58,170 --> 00:48:04,799
example apps instead of present really

00:48:01,380 --> 00:48:08,730
what what what you do for your task just

00:48:04,799 --> 00:48:09,780
depends on the module you call and to

00:48:08,730 --> 00:48:11,099
answer your second wish of what the law

00:48:09,780 --> 00:48:13,170
or the first mission with the logs I

00:48:11,099 --> 00:48:15,329
didn't really research too much what the

00:48:13,170 --> 00:48:16,559
logging but I know that one of the main

00:48:15,329 --> 00:48:18,720
points ansible was to have a really

00:48:16,559 --> 00:48:20,760
auditable language so that you could go

00:48:18,720 --> 00:48:22,950
back and see who made these changes what

00:48:20,760 --> 00:48:24,480
change has happened but I can't really

00:48:22,950 --> 00:48:25,740
answer you on where those logs to be

00:48:24,480 --> 00:48:28,890
store because I didn't really quite look

00:48:25,740 --> 00:48:30,839
into that piece if the field could has

00:48:28,890 --> 00:48:32,790
points on that then feel free to answer

00:48:30,839 --> 00:48:34,770
that

00:48:32,790 --> 00:48:37,110
I guess we're not know hopefully

00:48:34,770 --> 00:48:40,800
hopefully know if next time different

00:48:37,110 --> 00:48:46,110
question so you showed access control

00:48:40,800 --> 00:48:48,120
using sudo and sshs root in the larger

00:48:46,110 --> 00:48:49,590
example are there are other methods of

00:48:48,120 --> 00:48:53,660
escalating privileges in order to be

00:48:49,590 --> 00:48:57,870
able to execute things in the system I

00:48:53,660 --> 00:48:59,550
believe there are but for for my

00:48:57,870 --> 00:49:02,190
knowledge base for this demo this is all

00:48:59,550 --> 00:49:11,340
I really looked into for privilege

00:49:02,190 --> 00:49:13,590
escalation yes if you'd like to yeah

00:49:11,340 --> 00:49:21,020
this is yeah this is a gonna have here

00:49:13,590 --> 00:49:21,020
yeah yep

00:49:21,900 --> 00:49:24,700
actually sorry you in the blue sure I

00:49:23,860 --> 00:49:34,210
think believe you had your hand up

00:49:24,700 --> 00:49:36,010
earlier do you have a question I believe

00:49:34,210 --> 00:49:40,450
so yes that's what the latest director

00:49:36,010 --> 00:49:45,010
will say no no no this is this is just a

00:49:40,450 --> 00:49:47,740
silly example yep are there any other

00:49:45,010 --> 00:49:49,570
further questions about the presentation

00:49:47,740 --> 00:49:54,430
or even comment so i would like those as

00:49:49,570 --> 00:49:57,460
well now that maybe i should ask the

00:49:54,430 --> 00:49:59,770
question actually do you feel that this

00:49:57,460 --> 00:50:01,930
is a really easy tool to use would you

00:49:59,770 --> 00:50:03,790
maybe start using it if you haven't

00:50:01,930 --> 00:50:06,880
already would you recommend to your

00:50:03,790 --> 00:50:08,620
friends and family and mom and dad maybe

00:50:06,880 --> 00:50:11,110
not that far maybe not that far okay i

00:50:08,620 --> 00:50:12,640
understand and i think i think time is

00:50:11,110 --> 00:50:15,250
kind of a running short for this

00:50:12,640 --> 00:50:17,560
presentation so I'll just close it off

00:50:15,250 --> 00:50:18,970
with a few a few things the next coming

00:50:17,560 --> 00:50:20,950
up is actually called automate all the

00:50:18,970 --> 00:50:22,960
things introduction to Jenkins if you

00:50:20,950 --> 00:50:27,460
enjoyed the automation portion of this

00:50:22,960 --> 00:50:30,490
talk please come and very actually just

00:50:27,460 --> 00:50:32,320
sit say exactly where you are and you'll

00:50:30,490 --> 00:50:33,880
enjoy the next talk it's by Justin

00:50:32,320 --> 00:50:35,680
flower as a former colleague of mine and

00:50:33,880 --> 00:50:38,710
he is quite good at this kind of thing

00:50:35,680 --> 00:50:40,210
which is coming up right next and I are

00:50:38,710 --> 00:50:47,200
there any students actually in the

00:50:40,210 --> 00:50:49,840
audience Seneca students okay okay fair

00:50:47,200 --> 00:50:53,050
enough fair enough just indulge me for

00:50:49,840 --> 00:50:57,130
just a minute so I'm partisan taxi taxi

00:50:53,050 --> 00:50:59,350
I'm an RA here and we have we're trying

00:50:57,130 --> 00:51:00,940
to do a bit more of a open out reached

00:50:59,350 --> 00:51:02,650
if you want to get involved with us so

00:51:00,940 --> 00:51:06,130
I've made a few links the first link

00:51:02,650 --> 00:51:07,840
tinyurl com that see Jeff sauce is a

00:51:06,130 --> 00:51:09,520
link to our wiki page you can find out

00:51:07,840 --> 00:51:10,870
more about us and what we do and you

00:51:09,520 --> 00:51:13,690
want to get involved as a co-op student

00:51:10,870 --> 00:51:16,600
or otherwise please come by and the

00:51:13,690 --> 00:51:18,190
second link c dash public dash talks we

00:51:16,600 --> 00:51:20,080
actually have internal demo is kind of

00:51:18,190 --> 00:51:21,460
like doing talks like this but usually

00:51:20,080 --> 00:51:23,470
they're mostly internal only and it's

00:51:21,460 --> 00:51:26,080
only for us but we're having a few talks

00:51:23,470 --> 00:51:27,790
once each month for this semester and

00:51:26,080 --> 00:51:29,470
the next will be coming up in November

00:51:27,790 --> 00:51:31,180
if you like to participate in them

00:51:29,470 --> 00:51:33,370
please come by or they're open to anyone

00:51:31,180 --> 00:51:35,410
in the I TS schools and you can go to

00:51:33,370 --> 00:51:40,530
that link to find out the schedule and

00:51:35,410 --> 00:51:40,530
pick and thanks for coming

00:51:48,460 --> 00:51:50,520

YouTube URL: https://www.youtube.com/watch?v=zISLFRhcfw0


