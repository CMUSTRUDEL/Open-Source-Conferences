Title: FSOSS 2016: Running Containers Using Openshift and Kubernetes
Publication date: 2016-11-24
Playlist: FSOSS 2016
Description: 
	Speaker: Zak Hassan, Software Engineer with RedHat

Running Docker Containers in Kubernetes/OpenShiftv3.
Captions: 
	00:00:04,630 --> 00:00:10,100
today what I want to do is I want to

00:00:06,680 --> 00:00:13,720
give you the foundation of how to

00:00:10,100 --> 00:00:16,850
develop applications on openshift and

00:00:13,720 --> 00:00:17,900
agenda for today is going to be I'm

00:00:16,850 --> 00:00:21,800
going to tell you a little bit about

00:00:17,900 --> 00:00:24,320
what passes then I'm going to go into

00:00:21,800 --> 00:00:25,790
architecture i'm going to show you where

00:00:24,320 --> 00:00:28,730
Cooper Nettie's fits in the picture

00:00:25,790 --> 00:00:32,090
where dr. fits in the picture and we're

00:00:28,730 --> 00:00:34,370
open shift fits in the picture I'm going

00:00:32,090 --> 00:00:36,890
to go through some some concepts some

00:00:34,370 --> 00:00:39,890
terminology before giving you a live

00:00:36,890 --> 00:00:42,530
demo of an application that's running in

00:00:39,890 --> 00:00:46,160
the end i'm probably going to ask one

00:00:42,530 --> 00:00:48,289
volunteer or maybe more than that to go

00:00:46,160 --> 00:00:50,929
on a website and type in something and

00:00:48,289 --> 00:00:54,440
it's going to be persisted to a

00:00:50,929 --> 00:00:58,309
database running in darker and i'll have

00:00:54,440 --> 00:01:02,239
the front-end running no Jess so I got a

00:00:58,309 --> 00:01:04,070
lot of stuff for you guys but first

00:01:02,239 --> 00:01:09,940
we're going to go through the concepts

00:01:04,070 --> 00:01:13,990
and try to understand the foundation so

00:01:09,940 --> 00:01:20,000
open shift open shift is a pass

00:01:13,990 --> 00:01:22,280
platform-as-a-service so it runs on top

00:01:20,000 --> 00:01:26,740
of cooper Nettie's and cooper Nettie's

00:01:22,280 --> 00:01:29,720
runs on top of docker so dr. is a no

00:01:26,740 --> 00:01:31,850
virtualization system that lets you do a

00:01:29,720 --> 00:01:34,250
lot more than traditional virtual

00:01:31,850 --> 00:01:36,440
machines right as you saw the

00:01:34,250 --> 00:01:38,780
presentation right before my

00:01:36,440 --> 00:01:42,170
presentation he gave a lot of really

00:01:38,780 --> 00:01:45,320
nice demos and went through the docker

00:01:42,170 --> 00:01:48,200
file so if you guys have any questions

00:01:45,320 --> 00:01:50,950
please just interrupt me at any time I'm

00:01:48,200 --> 00:01:53,620
more than happy to go into any details

00:01:50,950 --> 00:02:00,110
so you don't have to wait till end of

00:01:53,620 --> 00:02:03,410
for Q&A you can ask me any time so this

00:02:00,110 --> 00:02:06,260
is the stack so you got darker then you

00:02:03,410 --> 00:02:09,349
got Cooper Nettie's that does the darker

00:02:06,260 --> 00:02:12,650
orchestration and then you have the pads

00:02:09,349 --> 00:02:16,240
on top of that to manage things and do a

00:02:12,650 --> 00:02:18,640
lot more for you so has open shifts

00:02:16,240 --> 00:02:22,180
what do I get from you know developed my

00:02:18,640 --> 00:02:25,600
applications are open shift right so

00:02:22,180 --> 00:02:29,350
it's self-service Polly got so nowadays

00:02:25,600 --> 00:02:31,210
folks work on big teams and sometimes I

00:02:29,350 --> 00:02:32,710
work with a lot of teams some teams want

00:02:31,210 --> 00:02:35,170
to develop their application in Java

00:02:32,710 --> 00:02:39,180
some teams want to do it a node some

00:02:35,170 --> 00:02:42,160
teams want to do it in Python right and

00:02:39,180 --> 00:02:44,380
they got their darker containers they

00:02:42,160 --> 00:02:47,710
give you a rest endpoint an API you can

00:02:44,380 --> 00:02:50,530
communicate with so folks are able to

00:02:47,710 --> 00:02:52,150
develop polygon applications in multiple

00:02:50,530 --> 00:02:54,670
different languages put them in

00:02:52,150 --> 00:02:56,980
containers have a rest api in front of

00:02:54,670 --> 00:02:58,570
it and have applications be able to

00:02:56,980 --> 00:03:00,790
integrate with each other more

00:02:58,570 --> 00:03:03,460
seamlessly thanks doctor thanks to

00:03:00,790 --> 00:03:07,300
cooper Nettie's and thanks to the open

00:03:03,460 --> 00:03:09,160
shift team 24 along those functionality

00:03:07,300 --> 00:03:12,010
to be available so there's a lot of

00:03:09,160 --> 00:03:15,190
automation as well there's a UI i'm

00:03:12,010 --> 00:03:18,360
going to show you there's also scaling

00:03:15,190 --> 00:03:22,300
so if you have a docker container right

00:03:18,360 --> 00:03:24,100
and you got requests come in so you have

00:03:22,300 --> 00:03:27,570
a certain amount of CPU certain amount

00:03:24,100 --> 00:03:30,010
of memory how about scaling it across

00:03:27,570 --> 00:03:34,960
creating more containers what if your

00:03:30,010 --> 00:03:37,420
container dies what do you do so there's

00:03:34,960 --> 00:03:44,770
there's technology to solve those

00:03:37,420 --> 00:03:47,110
problems so open shift is is it

00:03:44,770 --> 00:03:50,320
something that usually people do on

00:03:47,110 --> 00:03:52,060
premise so for example some folks want

00:03:50,320 --> 00:03:55,060
to do cloud computing public cloud and

00:03:52,060 --> 00:03:57,490
then there's private cloud right so some

00:03:55,060 --> 00:04:00,070
folks want to do their cloud internally

00:03:57,490 --> 00:04:02,320
private they want to run their stuff in

00:04:00,070 --> 00:04:08,290
dr. containers and they want to have

00:04:02,320 --> 00:04:13,390
microservices so open shift allows those

00:04:08,290 --> 00:04:14,709
types of opportunities so let's just go

00:04:13,390 --> 00:04:17,380
into a little bit of the cluster

00:04:14,709 --> 00:04:19,420
architecture of what does a cluster look

00:04:17,380 --> 00:04:22,570
like when you're dealing with Cooper

00:04:19,420 --> 00:04:24,610
Nettie's and open shift so as I

00:04:22,570 --> 00:04:26,950
mentioned previously openshift runs on

00:04:24,610 --> 00:04:28,969
top of coronaries so it follows the same

00:04:26,950 --> 00:04:32,019
principle so you have a mass

00:04:28,969 --> 00:04:35,599
sure which is that blue box over there

00:04:32,019 --> 00:04:38,869
which is a scheduler and manages the

00:04:35,599 --> 00:04:40,579
cluster nodes so these are our minions I

00:04:38,869 --> 00:04:44,269
think they change the name now they call

00:04:40,579 --> 00:04:48,429
it urban Eddie nodes but these are

00:04:44,269 --> 00:04:51,969
minions that you know go and do the work

00:04:48,429 --> 00:04:58,399
schedule jobs create containers in there

00:04:51,969 --> 00:05:00,709
so usually it's good to set up nodes in

00:04:58,399 --> 00:05:03,229
different data centers for example you

00:05:00,709 --> 00:05:04,759
might have one data center in east coast

00:05:03,229 --> 00:05:08,599
you might have data center in west coast

00:05:04,759 --> 00:05:12,860
and then you have your your pods get

00:05:08,599 --> 00:05:16,219
scheduled on those notes so i knows i

00:05:12,860 --> 00:05:20,659
haven't covered the pods section but

00:05:16,219 --> 00:05:23,809
it's coming so this is the open shift

00:05:20,659 --> 00:05:26,389
architecture so you have the routing

00:05:23,809 --> 00:05:29,469
layer which i will explain in a few

00:05:26,389 --> 00:05:32,149
slides you have the persistent storage

00:05:29,469 --> 00:05:34,819
which will come up in a few slides it's

00:05:32,149 --> 00:05:38,329
a way that usually when you have docker

00:05:34,819 --> 00:05:40,729
containers if that container dies and

00:05:38,329 --> 00:05:43,610
you have data on there you lose your

00:05:40,729 --> 00:05:46,369
data but well persistent storage allows

00:05:43,610 --> 00:05:48,979
you to do is you can mount up volume and

00:05:46,369 --> 00:05:51,769
then you can set up persistent volume

00:05:48,979 --> 00:05:54,589
claims and persistent volumes that are

00:05:51,769 --> 00:05:59,449
mapped to maybe network file storage or

00:05:54,589 --> 00:06:02,799
maybe SEF or maybe even cinder or a lot

00:05:59,449 --> 00:06:05,839
of other you know or even amazon EBS

00:06:02,799 --> 00:06:07,729
right so there's a lot of options in

00:06:05,839 --> 00:06:11,029
terms of how do i store my data and keep

00:06:07,729 --> 00:06:14,079
it safe somewhere right and then we have

00:06:11,029 --> 00:06:17,179
services because pods are going to die

00:06:14,079 --> 00:06:19,459
they're going to come to life they're

00:06:17,179 --> 00:06:22,549
going to die and that's the life cycle

00:06:19,459 --> 00:06:24,919
of a pod right but we have a replication

00:06:22,549 --> 00:06:29,239
controller that's gonna if it dies it

00:06:24,919 --> 00:06:33,589
will create a new one right but our

00:06:29,239 --> 00:06:37,179
services that layer that allows you to

00:06:33,589 --> 00:06:37,179
get your request in

00:06:37,780 --> 00:06:50,090
so what we're going to do is give me one

00:06:46,100 --> 00:06:55,630
second running low on battery but so

00:06:50,090 --> 00:07:00,350
paws are unique and they have unique IP

00:06:55,630 --> 00:07:04,640
these IP is change and they're not

00:07:00,350 --> 00:07:07,400
guaranteed to be the same so the thing

00:07:04,640 --> 00:07:10,670
with pods if your IP is going to

00:07:07,400 --> 00:07:12,770
continuously change then how can you

00:07:10,670 --> 00:07:16,820
actually set up service to say listen to

00:07:12,770 --> 00:07:19,070
this IP address go to this host and pull

00:07:16,820 --> 00:07:25,400
data from that web service if that IP

00:07:19,070 --> 00:07:29,890
keeps changing so pods are great they

00:07:25,400 --> 00:07:33,380
let you have one shared IP address among

00:07:29,890 --> 00:07:36,320
multiple darker containers so the boxes

00:07:33,380 --> 00:07:39,650
that you see in the middle there you see

00:07:36,320 --> 00:07:41,060
a tomcat you see a MongoDB database and

00:07:39,650 --> 00:07:43,880
you see a bunch of other containers in

00:07:41,060 --> 00:07:46,820
there all those containers can

00:07:43,880 --> 00:07:50,780
communicate together in that same box

00:07:46,820 --> 00:07:55,940
and this is like just basically a

00:07:50,780 --> 00:07:57,890
package for example you have a bunch

00:07:55,940 --> 00:07:59,690
like two or three docker containers and

00:07:57,890 --> 00:08:03,230
you want to package them together and

00:07:59,690 --> 00:08:06,470
have it shipped as one piece and this

00:08:03,230 --> 00:08:09,100
node can get scaled out so you can scale

00:08:06,470 --> 00:08:12,370
it out to three you can tell cool

00:08:09,100 --> 00:08:16,820
openshift okay make sure i have three

00:08:12,370 --> 00:08:20,650
instances of this this pod and if it one

00:08:16,820 --> 00:08:20,650
of them dies bring it back to life

00:08:23,020 --> 00:08:29,530
so now we're going to go a little bit

00:08:25,960 --> 00:08:32,440
further right so we have two of our our

00:08:29,530 --> 00:08:35,800
notes right we have two of our notes it

00:08:32,440 --> 00:08:39,190
has a three or two or three or any more

00:08:35,800 --> 00:08:42,729
than that docker containers and it sits

00:08:39,190 --> 00:08:43,779
behind something called the service so

00:08:42,729 --> 00:08:45,959
we're going to talk about service

00:08:43,779 --> 00:08:48,970
discovery it's coming up in a few slides

00:08:45,959 --> 00:08:52,170
but I'm going to just briefly touch on

00:08:48,970 --> 00:08:57,010
it a little bit so remember how I said

00:08:52,170 --> 00:09:00,579
pods are something that has an IP

00:08:57,010 --> 00:09:03,459
address that can change so if I'm

00:09:00,579 --> 00:09:06,399
developing applications I don't want a

00:09:03,459 --> 00:09:08,380
hardcore an IP address by hardcore IP

00:09:06,399 --> 00:09:12,910
address that IP address changed guess

00:09:08,380 --> 00:09:16,000
what I can't access my data so services

00:09:12,910 --> 00:09:20,709
let you have one static IP address that

00:09:16,000 --> 00:09:24,010
let you get make requests and let you

00:09:20,709 --> 00:09:26,520
discover others pods that are running

00:09:24,010 --> 00:09:34,570
other containers that are running within

00:09:26,520 --> 00:09:37,390
your your cluster so the environment

00:09:34,570 --> 00:09:42,970
variables are something they get

00:09:37,390 --> 00:09:45,730
injected into the darker pot and their

00:09:42,970 --> 00:09:48,480
shared across and their shared across

00:09:45,730 --> 00:09:48,480
the cluster right

00:09:50,840 --> 00:09:57,910
so when I have a web application right

00:09:54,850 --> 00:10:03,500
and I want to run it in Coober Nettie's

00:09:57,910 --> 00:10:08,410
openshift right how does a user type in

00:10:03,500 --> 00:10:08,410
its browser and hit my docker container

00:10:08,500 --> 00:10:14,420
we have a concept called routes an open

00:10:12,470 --> 00:10:17,540
shift it's not a coup pernetti's concept

00:10:14,420 --> 00:10:21,530
but it's an open shift concept so our

00:10:17,540 --> 00:10:23,180
routes are based on H a proxy there's

00:10:21,530 --> 00:10:26,840
there's something available right now

00:10:23,180 --> 00:10:28,700
it's called nginx ingress which is

00:10:26,840 --> 00:10:31,190
something similar to this that's a

00:10:28,700 --> 00:10:32,870
cooper Nettie's thing but i'm going to

00:10:31,190 --> 00:10:36,950
focus more on this piece here because I

00:10:32,870 --> 00:10:40,220
wanted to nail this this concept of you

00:10:36,950 --> 00:10:43,880
have a route that knows an IP address of

00:10:40,220 --> 00:10:48,140
your service right and it'll have it'll

00:10:43,880 --> 00:10:51,950
make a URL and when you hit that URL and

00:10:48,140 --> 00:10:54,050
we'll go through hit the service it will

00:10:51,950 --> 00:10:56,240
go through the service and it'll hit one

00:10:54,050 --> 00:10:57,950
of your pods if you said you want to

00:10:56,240 --> 00:11:00,830
scale this out you want to have three

00:10:57,950 --> 00:11:03,440
pods then it's going to either hit one

00:11:00,830 --> 00:11:05,300
of these pods you have other clients

00:11:03,440 --> 00:11:07,610
that are hitting the same service they

00:11:05,300 --> 00:11:11,990
might hit part number to another client

00:11:07,610 --> 00:11:13,640
might hit part number three but routes

00:11:11,990 --> 00:11:18,170
are something that gets set up by an

00:11:13,640 --> 00:11:25,070
administrator their containers also so

00:11:18,170 --> 00:11:26,330
they have their their pods and now we're

00:11:25,070 --> 00:11:29,510
going to get into service discovery

00:11:26,330 --> 00:11:31,730
right so when you when you have your

00:11:29,510 --> 00:11:33,770
application as I mentioned before and

00:11:31,730 --> 00:11:36,110
you don't know that the IP address for

00:11:33,770 --> 00:11:38,180
that application right you can discover

00:11:36,110 --> 00:11:40,460
these services using environment

00:11:38,180 --> 00:11:42,980
variables so in your application you can

00:11:40,460 --> 00:11:46,010
just basically discover where is my mom

00:11:42,980 --> 00:11:48,380
go database going to be hosted pull that

00:11:46,010 --> 00:11:53,120
environment variable and then read from

00:11:48,380 --> 00:11:55,010
your database whether using you know any

00:11:53,120 --> 00:11:58,190
other you know database solution there's

00:11:55,010 --> 00:12:00,500
a lot more out there but mom goes as an

00:11:58,190 --> 00:12:01,850
example that I'm using today so

00:12:00,500 --> 00:12:03,450
basically the environment variables are

00:12:01,850 --> 00:12:08,700
going to follow this pattern

00:12:03,450 --> 00:12:10,710
service name service address the second

00:12:08,700 --> 00:12:13,020
part is something static and then the

00:12:10,710 --> 00:12:24,510
first two words are going to be

00:12:13,020 --> 00:12:27,870
something that is a more dynamic so now

00:12:24,510 --> 00:12:30,780
that we know a little bit about darker

00:12:27,870 --> 00:12:33,030
and how they fit into tuku benetti's and

00:12:30,780 --> 00:12:37,830
opening shift now let's talk about

00:12:33,030 --> 00:12:39,480
deployment right so I'm developing a

00:12:37,830 --> 00:12:43,650
java application for example or a

00:12:39,480 --> 00:12:47,460
node.js application and when I write my

00:12:43,650 --> 00:12:50,880
code right I'm working with a big team

00:12:47,460 --> 00:12:53,730
of engineers right and somebody deploy

00:12:50,880 --> 00:12:56,850
some code up right I have my stuff

00:12:53,730 --> 00:13:00,300
running in development I don't want to

00:12:56,850 --> 00:13:03,180
disrupt the team so there's this concept

00:13:00,300 --> 00:13:04,890
of rolling update somebody might be

00:13:03,180 --> 00:13:06,870
testing some stuff they might be using

00:13:04,890 --> 00:13:09,810
the application to look at some stuff I

00:13:06,870 --> 00:13:11,430
don't want anything to go down right so

00:13:09,810 --> 00:13:16,140
there's that concept of rolling

00:13:11,430 --> 00:13:18,030
deployment so what wrong deployment is

00:13:16,140 --> 00:13:21,090
basically is you have your old

00:13:18,030 --> 00:13:24,680
application code and then you have your

00:13:21,090 --> 00:13:28,080
new code and then if you have it

00:13:24,680 --> 00:13:31,440
clustered out like scaled out multiple

00:13:28,080 --> 00:13:36,090
parts then what happens is the rolling

00:13:31,440 --> 00:13:38,550
process takes one pot down it creates a

00:13:36,090 --> 00:13:40,650
new part with a new code then it does

00:13:38,550 --> 00:13:43,020
the next one and then the next one in

00:13:40,650 --> 00:13:47,220
the list until it rolls out your new

00:13:43,020 --> 00:13:49,140
code there's another way to but that's a

00:13:47,220 --> 00:13:50,940
default way but a different way of doing

00:13:49,140 --> 00:13:54,300
things is if you don't care about

00:13:50,940 --> 00:13:56,550
downtime and you just want to just get

00:13:54,300 --> 00:13:59,730
everything deployed in you want to rip

00:13:56,550 --> 00:14:01,110
out the positive currently running then

00:13:59,730 --> 00:14:04,110
what you can do is you can use recreate

00:14:01,110 --> 00:14:05,840
which what it does is it shuts on all

00:14:04,110 --> 00:14:09,180
the running instances of the old

00:14:05,840 --> 00:14:12,450
application and then it deploys the new

00:14:09,180 --> 00:14:15,090
one and if you're interested in more of

00:14:12,450 --> 00:14:16,070
custom deployments and if your use cases

00:14:15,090 --> 00:14:18,830
a little different

00:14:16,070 --> 00:14:23,930
a little bit more complex then there's a

00:14:18,830 --> 00:14:26,750
custom way to do deployments as well so

00:14:23,930 --> 00:14:32,480
if I deploy an application it's a web

00:14:26,750 --> 00:14:35,630
application and one of the the URLs is

00:14:32,480 --> 00:14:39,530
thrown a 404 are a bad request for

00:14:35,630 --> 00:14:42,470
example right how do I make sure that

00:14:39,530 --> 00:14:46,340
darker doesn't deploy my application

00:14:42,470 --> 00:14:49,490
when my service is in running the simple

00:14:46,340 --> 00:14:53,060
answer is health probs so what health

00:14:49,490 --> 00:14:56,660
probes do is you give it a URL and you

00:14:53,060 --> 00:14:59,240
say if this URL is alive then that means

00:14:56,660 --> 00:15:02,000
my part is running and it's good if this

00:14:59,240 --> 00:15:04,130
part this URL is not a life and that

00:15:02,000 --> 00:15:06,770
means my application isn't good so I

00:15:04,130 --> 00:15:09,230
want to know I don't want my users see

00:15:06,770 --> 00:15:11,570
that my application is down I want to

00:15:09,230 --> 00:15:13,970
know and I want the application to show

00:15:11,570 --> 00:15:17,900
me that it's not working there's also

00:15:13,970 --> 00:15:19,160
script a way to set a script to check

00:15:17,900 --> 00:15:22,760
and see if things are running correctly

00:15:19,160 --> 00:15:25,700
and then there's TCP socket check so you

00:15:22,760 --> 00:15:32,090
can check a specific tpc socket if it's

00:15:25,700 --> 00:15:35,380
up so now that we recover the core

00:15:32,090 --> 00:15:40,820
concepts we're going to get into

00:15:35,380 --> 00:15:45,620
security so when you're running all

00:15:40,820 --> 00:15:47,360
these doctor containers right you might

00:15:45,620 --> 00:15:48,590
not want to give everybody access right

00:15:47,360 --> 00:15:51,470
you want to give a certain group of

00:15:48,590 --> 00:15:54,380
people access like for example i'm

00:15:51,470 --> 00:15:56,630
working on in a company I don't want to

00:15:54,380 --> 00:15:59,270
give access to every single team race so

00:15:56,630 --> 00:16:02,990
I'll have specific access for my team to

00:15:59,270 --> 00:16:04,850
work on specific things right so there's

00:16:02,990 --> 00:16:06,770
two levels of authorization there's

00:16:04,850 --> 00:16:10,100
crossed cluster policy and then there's

00:16:06,770 --> 00:16:13,280
local policy so you can set up policy to

00:16:10,100 --> 00:16:16,010
say that this developer he can deploy

00:16:13,280 --> 00:16:18,710
applications for example or he can read

00:16:16,010 --> 00:16:21,380
what's running but he can't you know

00:16:18,710 --> 00:16:23,720
delete my router he can't delete all

00:16:21,380 --> 00:16:25,220
these paws and and do more advanced

00:16:23,720 --> 00:16:28,310
things right that could mess up my

00:16:25,220 --> 00:16:28,940
system I mean it solves the problem of

00:16:28,310 --> 00:16:31,100
giving every

00:16:28,940 --> 00:16:32,450
root access right but you don't want to

00:16:31,100 --> 00:16:34,970
give everybody root access you want a

00:16:32,450 --> 00:16:37,850
little bit of control and have controls

00:16:34,970 --> 00:16:42,350
set in place where things are not going

00:16:37,850 --> 00:16:44,600
to be broken so I was just going to go

00:16:42,350 --> 00:16:47,270
into brief part I could be talking about

00:16:44,600 --> 00:16:49,490
hours about this this security policy

00:16:47,270 --> 00:16:51,260
and then going through each example but

00:16:49,490 --> 00:16:56,390
I wanted to give you guys a demo

00:16:51,260 --> 00:16:58,130
something that's running so I'm going to

00:16:56,390 --> 00:17:00,020
go to the next step so this is kind of

00:16:58,130 --> 00:17:03,710
setting the Paveway of what my demo is

00:17:00,020 --> 00:17:05,870
going to be about so we have this

00:17:03,710 --> 00:17:09,290
concept an open shift called source to

00:17:05,870 --> 00:17:12,020
image right so you saw in the previous

00:17:09,290 --> 00:17:14,630
talk they showed you a docker file you

00:17:12,020 --> 00:17:18,620
said what is that I got to write all

00:17:14,630 --> 00:17:20,360
those darker commands darker has a lot

00:17:18,620 --> 00:17:23,480
of best practices when you're writing

00:17:20,360 --> 00:17:26,209
darker files and a lot sometimes people

00:17:23,480 --> 00:17:27,980
don't know what that these are the best

00:17:26,209 --> 00:17:29,570
practices that they're implementing some

00:17:27,980 --> 00:17:33,980
people are running docker containers as

00:17:29,570 --> 00:17:37,700
root so we have controls in place with

00:17:33,980 --> 00:17:40,190
an open shift that make sure that when

00:17:37,700 --> 00:17:46,670
you run an application it doesn't run as

00:17:40,190 --> 00:17:52,310
root and also which you can overwrite if

00:17:46,670 --> 00:17:56,900
you want to write but basically what it

00:17:52,310 --> 00:17:58,220
does is it in takes your source code so

00:17:56,900 --> 00:18:00,410
you write your java application you

00:17:58,220 --> 00:18:02,240
don't care about setting up darker and

00:18:00,410 --> 00:18:05,050
you don't care about writing darker

00:18:02,240 --> 00:18:07,280
files because you are a Java developer

00:18:05,050 --> 00:18:10,040
so what you do is when you write your

00:18:07,280 --> 00:18:12,890
java application right you check it in

00:18:10,040 --> 00:18:16,040
to get what you can see over here and

00:18:12,890 --> 00:18:19,190
once you're checking them to get i'm

00:18:16,040 --> 00:18:22,100
going to show you the process of taking

00:18:19,190 --> 00:18:24,140
that source code and generating a docker

00:18:22,100 --> 00:18:26,530
image from that without writing one line

00:18:24,140 --> 00:18:26,530
of docker

00:18:27,140 --> 00:18:33,540
so what happens is open shift will take

00:18:29,580 --> 00:18:36,920
that source code you'll do a build once

00:18:33,540 --> 00:18:41,400
it does it build it will go ahead and

00:18:36,920 --> 00:18:44,970
put that image it will put that image

00:18:41,400 --> 00:18:50,940
into its internal darker registry and

00:18:44,970 --> 00:18:52,350
after that it'll go and deploy and once

00:18:50,940 --> 00:19:04,950
it deploys your application is going to

00:18:52,350 --> 00:19:06,960
be up so what if some know what it does

00:19:04,950 --> 00:19:11,340
is we have this technology called source

00:19:06,960 --> 00:19:13,620
to image so it detects if you have a

00:19:11,340 --> 00:19:15,870
java application right you're going to

00:19:13,620 --> 00:19:18,870
be using maven for example and if you

00:19:15,870 --> 00:19:23,220
use a maven we do a build and then once

00:19:18,870 --> 00:19:27,650
we generate your artifact then we we run

00:19:23,220 --> 00:19:30,809
it yes so we build your source code and

00:19:27,650 --> 00:19:33,030
then we create for you an image and then

00:19:30,809 --> 00:19:35,070
we we have that image ready for you to

00:19:33,030 --> 00:19:39,840
use and an image that's not running as

00:19:35,070 --> 00:19:42,020
root so you're going to see that in the

00:19:39,840 --> 00:19:42,020
demo

00:19:44,789 --> 00:19:51,070
so now that i'm working on a team right

00:19:48,820 --> 00:19:53,619
i might have you know two or three

00:19:51,070 --> 00:19:56,049
developers for developers more than that

00:19:53,619 --> 00:19:58,749
may be right and we're all continuously

00:19:56,049 --> 00:20:01,179
changing code right so if we're

00:19:58,749 --> 00:20:03,729
continuously changing code and i have my

00:20:01,179 --> 00:20:05,590
stuff deployed up there I don't want to

00:20:03,729 --> 00:20:08,109
be the guy that gets pinged all the time

00:20:05,590 --> 00:20:09,999
and say can you deploy my code can you

00:20:08,109 --> 00:20:12,729
deploy my code can you deploy my code

00:20:09,999 --> 00:20:16,119
right so there's this concept of web

00:20:12,729 --> 00:20:19,899
hooks so what web hooks lets you do is

00:20:16,119 --> 00:20:23,049
you basically give that web hook to get

00:20:19,899 --> 00:20:25,229
hub for example you set that in one of

00:20:23,049 --> 00:20:28,389
the configurations with in github and

00:20:25,229 --> 00:20:31,539
that web hook will go and do a ping here

00:20:28,389 --> 00:20:33,399
and it'll trigger another bill to happen

00:20:31,539 --> 00:20:35,499
so now what you have is you have

00:20:33,399 --> 00:20:39,909
something that's rolling out your latest

00:20:35,499 --> 00:20:42,789
code so as I mentioned it does build

00:20:39,909 --> 00:20:45,220
your container but now the code changes

00:20:42,789 --> 00:20:48,129
and get it's not up to date so when you

00:20:45,220 --> 00:20:50,379
want to use web hooks that lets you keep

00:20:48,129 --> 00:20:53,279
your changes up to date and these are

00:20:50,379 --> 00:20:57,330
configurations you'd have to set in your

00:20:53,279 --> 00:21:00,159
deployment so we talked a bit about

00:20:57,330 --> 00:21:02,109
persistent storage how pause when they

00:21:00,159 --> 00:21:05,019
die you lose your data if you have a

00:21:02,109 --> 00:21:09,129
database you don't want you don't want a

00:21:05,019 --> 00:21:12,519
database to to be running and then your

00:21:09,129 --> 00:21:14,649
data is gone after your pod dice right

00:21:12,519 --> 00:21:16,749
or maybe you might have a data center or

00:21:14,649 --> 00:21:19,869
something and you have like you know a

00:21:16,749 --> 00:21:23,289
bunch of machines one machine something

00:21:19,869 --> 00:21:26,019
breaks or something happens you want

00:21:23,289 --> 00:21:30,309
your data to be to survive right so

00:21:26,019 --> 00:21:33,129
there is some options so you can do

00:21:30,309 --> 00:21:34,929
temporary stuff which is empty dirt then

00:21:33,129 --> 00:21:37,599
there's host path which you store it in

00:21:34,929 --> 00:21:39,970
a host path then there's network storage

00:21:37,599 --> 00:21:43,029
which is a lot better so if you're doing

00:21:39,970 --> 00:21:46,389
network storage you have network file

00:21:43,029 --> 00:21:48,429
storage which is not something new

00:21:46,389 --> 00:21:51,429
networks are foster's been around for a

00:21:48,429 --> 00:21:55,029
while there's SEF which is quite you

00:21:51,429 --> 00:21:56,830
know our emerging technology and I

00:21:55,029 --> 00:21:59,710
believe Red Hat acquired SEF

00:21:56,830 --> 00:22:03,610
this Gloucester FS and then there's

00:21:59,710 --> 00:22:06,149
amazon EBS volume it's also good report

00:22:03,610 --> 00:22:12,669
their cinder then there's Google Cloud

00:22:06,149 --> 00:22:14,529
persistent storage or persistent disk so

00:22:12,669 --> 00:22:18,340
but this is something you'd have to set

00:22:14,529 --> 00:22:19,929
up yourself because when you're setting

00:22:18,340 --> 00:22:21,760
up your persistent volume and persistent

00:22:19,929 --> 00:22:23,409
storage you tell it how much storage you

00:22:21,760 --> 00:22:26,470
need and you set all those

00:22:23,409 --> 00:22:28,330
configurations within your crew

00:22:26,470 --> 00:22:30,130
benetti's manifest file so this is not

00:22:28,330 --> 00:22:36,850
something that's set up for you you got

00:22:30,130 --> 00:22:42,880
to set it up yourself so what about

00:22:36,850 --> 00:22:45,100
passwords right passwords you don't want

00:22:42,880 --> 00:22:46,570
to put in your docker file you don't

00:22:45,100 --> 00:22:47,830
want to put your passwords and darker

00:22:46,570 --> 00:22:51,070
files and you don't want to put on

00:22:47,830 --> 00:22:53,350
docker hub because for a simple reason

00:22:51,070 --> 00:22:55,960
is anybody can get it anybody can do

00:22:53,350 --> 00:22:58,720
whatever they want with it but if you're

00:22:55,960 --> 00:23:00,789
developing application and you you you

00:22:58,720 --> 00:23:04,210
want your secrets to be there then you

00:23:00,789 --> 00:23:07,029
can set up secrets where this is going

00:23:04,210 --> 00:23:09,730
to be mounted on a volume right it's

00:23:07,029 --> 00:23:13,409
going to melt it as file and when you

00:23:09,730 --> 00:23:18,639
set it up you can have it in a way where

00:23:13,409 --> 00:23:22,480
basically it's stored in a volume and

00:23:18,639 --> 00:23:24,250
shared across your pod and then you have

00:23:22,480 --> 00:23:27,429
the it's shared within the name space as

00:23:24,250 --> 00:23:29,409
well you can do that and also you can

00:23:27,429 --> 00:23:33,909
perform actions on behalf of the pot

00:23:29,409 --> 00:23:37,269
with these secrets and it's basically

00:23:33,909 --> 00:23:39,789
this llamo file this is a configuration

00:23:37,269 --> 00:23:41,620
file and a lot of these concepts that I

00:23:39,789 --> 00:23:44,080
mentioned earlier a lot of this stuff

00:23:41,620 --> 00:23:46,990
can be set up with llamo files so you

00:23:44,080 --> 00:23:50,429
would maintain a llamo file that would

00:23:46,990 --> 00:23:50,429
do your configurations and set up

00:23:51,400 --> 00:23:57,650
so labels are another thing that's quite

00:23:55,070 --> 00:24:00,050
important to know about because it's a

00:23:57,650 --> 00:24:02,030
way that you group objects together so

00:24:00,050 --> 00:24:05,870
from you know deploying an application

00:24:02,030 --> 00:24:08,150
right and this application I want to

00:24:05,870 --> 00:24:10,790
bring it down I want to search for all

00:24:08,150 --> 00:24:14,920
instances of this application labels let

00:24:10,790 --> 00:24:17,420
you search so you can do like OC delete

00:24:14,920 --> 00:24:20,990
all instances of this app I'll show you

00:24:17,420 --> 00:24:23,060
that in a demo then you can map services

00:24:20,990 --> 00:24:25,820
for example when services want to

00:24:23,060 --> 00:24:28,640
discover where your pods are you tell

00:24:25,820 --> 00:24:30,680
the service the label and then we'll go

00:24:28,640 --> 00:24:37,100
out and search for it and I'll find your

00:24:30,680 --> 00:24:41,120
pod and that's how they map together so

00:24:37,100 --> 00:24:42,830
now let's talk about scaling right so

00:24:41,120 --> 00:24:45,440
it's not good enough to have just one

00:24:42,830 --> 00:24:48,680
docker container and that's your whole

00:24:45,440 --> 00:24:51,190
application right so when you have when

00:24:48,680 --> 00:24:53,650
you want to scale out your containers

00:24:51,190 --> 00:24:56,870
Kubra ladies has this concept of

00:24:53,650 --> 00:25:02,960
replication controllers which are

00:24:56,870 --> 00:25:06,050
responsible for replicating your pots so

00:25:02,960 --> 00:25:08,090
on the left here we have 11 docker

00:25:06,050 --> 00:25:12,800
container then on the right we have

00:25:08,090 --> 00:25:15,080
three we have one pot on the left we

00:25:12,800 --> 00:25:16,790
have three on the right we're using a

00:25:15,080 --> 00:25:18,890
replication controller we're setting a

00:25:16,790 --> 00:25:21,800
configuration in there saying that we

00:25:18,890 --> 00:25:23,510
want at all times I want my application

00:25:21,800 --> 00:25:28,420
to be about three instances of my

00:25:23,510 --> 00:25:28,420
application always running at all times

00:25:32,029 --> 00:25:46,399
so let's let's go into a demo here so i

00:25:39,200 --> 00:25:48,649
got amazon here amazon ec2 so it's

00:25:46,399 --> 00:25:50,960
accessible through public IP address so

00:25:48,649 --> 00:25:53,210
it makes it a little bit easier I didn't

00:25:50,960 --> 00:25:55,279
want to develop something on my local

00:25:53,210 --> 00:25:58,580
box and then show you that this was a

00:25:55,279 --> 00:26:03,469
little bit better so I'm doing a one

00:25:58,580 --> 00:26:05,719
node on amazon one node cluster it's not

00:26:03,469 --> 00:26:11,330
even across there's a single mode cooper

00:26:05,719 --> 00:26:13,789
Nettie's environment right you could do

00:26:11,330 --> 00:26:16,789
the whole you know one master and

00:26:13,789 --> 00:26:19,159
multiple minions if you want but for

00:26:16,789 --> 00:26:28,070
sake of simplicity I thought one node

00:26:19,159 --> 00:26:30,879
would be enough for us so if we go over

00:26:28,070 --> 00:26:30,879
to this

00:26:36,850 --> 00:26:43,570
right we're going to go into the console

00:26:40,450 --> 00:26:46,020
right this is the open shift origin

00:26:43,570 --> 00:26:46,020
console

00:26:54,890 --> 00:27:00,710
alright so I create a project for us

00:26:57,530 --> 00:27:04,070
usually when you get to this point you

00:27:00,710 --> 00:27:07,160
always create project which is this but

00:27:04,070 --> 00:27:12,680
I've already created a project but it's

00:27:07,160 --> 00:27:15,260
an empty project right so we talked

00:27:12,680 --> 00:27:16,880
about we want to see source code get

00:27:15,260 --> 00:27:18,920
turned into a docker file I don't want

00:27:16,880 --> 00:27:20,900
to write a docker file right you want to

00:27:18,920 --> 00:27:25,520
develop code and not have to write a

00:27:20,900 --> 00:27:30,350
docker file this is the way so i am

00:27:25,520 --> 00:27:34,310
going to go and get my get URL so this

00:27:30,350 --> 00:27:39,710
is my get URL this is a node.js

00:27:34,310 --> 00:27:43,070
application as you can see this is a

00:27:39,710 --> 00:27:45,920
fork of the open shift nodejs example

00:27:43,070 --> 00:27:49,550
but I've added a lot more to it which is

00:27:45,920 --> 00:27:54,110
it lets you my example as a way to

00:27:49,550 --> 00:27:57,950
persist data into MongoDB be within the

00:27:54,110 --> 00:28:01,130
container but let's make this a little

00:27:57,950 --> 00:28:03,860
bit more interesting I'm going to ask

00:28:01,130 --> 00:28:07,190
one volunteer to login to the website

00:28:03,860 --> 00:28:11,960
that i give them and type in something

00:28:07,190 --> 00:28:13,910
and try and log into this out not log

00:28:11,960 --> 00:28:15,470
into this application but just just fill

00:28:13,910 --> 00:28:18,290
out the form and we're going to see the

00:28:15,470 --> 00:28:20,150
the information show up here so it's

00:28:18,290 --> 00:28:22,430
going to ask you like what's your

00:28:20,150 --> 00:28:24,080
favorite food and then you type it in

00:28:22,430 --> 00:28:27,470
and you press add and it's going to be

00:28:24,080 --> 00:28:28,880
added to the list and if you more than

00:28:27,470 --> 00:28:31,460
welcome to have more than one person do

00:28:28,880 --> 00:28:33,530
it as well so i'm going to set this up

00:28:31,460 --> 00:28:38,990
and i wanted this to be a more

00:28:33,530 --> 00:28:42,530
interactive demo for that purpose okay

00:28:38,990 --> 00:28:45,410
so i think i went a little bit fast let

00:28:42,530 --> 00:28:48,740
me let me slow down a little bit for you

00:28:45,410 --> 00:28:52,310
guys so you're here this is where you

00:28:48,740 --> 00:28:56,120
got to on the project so first thing you

00:28:52,310 --> 00:28:58,460
do is you say add project okay when you

00:28:56,120 --> 00:29:01,340
get to add project there's a lot of

00:28:58,460 --> 00:29:03,110
templates already created so a lot of

00:29:01,340 --> 00:29:05,480
these templates they'll go and create

00:29:03,110 --> 00:29:07,929
for you darker image and then it will

00:29:05,480 --> 00:29:11,169
deploy it for you so there's jenkins the

00:29:07,929 --> 00:29:13,830
wild flight is Ruby PHP Perl Python no

00:29:11,169 --> 00:29:17,529
Jess and a lot of other stuff

00:29:13,830 --> 00:29:21,610
elasticsearch and also Kabana stuff as

00:29:17,529 --> 00:29:24,399
well then Marie DB in my sequel all

00:29:21,610 --> 00:29:28,149
right but the one that we're going to go

00:29:24,399 --> 00:29:37,110
through is this one here which I'm going

00:29:28,149 --> 00:29:37,110
to give it a get URL which is this one

00:29:38,220 --> 00:29:45,460
okay and when I give it this kit you're

00:29:40,809 --> 00:29:49,840
all i want i want this application to go

00:29:45,460 --> 00:29:53,320
and fetch my get code and create for me

00:29:49,840 --> 00:30:00,639
a docker container so let's see it in

00:29:53,320 --> 00:30:05,259
action so it's doing the bills it is

00:30:00,639 --> 00:30:08,669
doing the deployment and now it's doing

00:30:05,259 --> 00:30:11,619
the built for the node.js application

00:30:08,669 --> 00:30:14,499
will check the logs as well just to see

00:30:11,619 --> 00:30:18,279
what's going on there but that's you

00:30:14,499 --> 00:30:20,619
know what let's look at the logs so we

00:30:18,279 --> 00:30:22,389
want to know this build what's the

00:30:20,619 --> 00:30:23,440
progress on it okay so now we got to the

00:30:22,389 --> 00:30:25,899
point of building the node.js

00:30:23,440 --> 00:30:27,639
application and now what it's doing is

00:30:25,899 --> 00:30:31,210
it built the image and it pushed it to

00:30:27,639 --> 00:30:34,869
the local image registry here and now

00:30:31,210 --> 00:30:40,559
it's successfully pushed so that means

00:30:34,869 --> 00:30:40,559
we should have our container here okay

00:30:41,149 --> 00:30:49,639
alright so now that we have our

00:30:43,700 --> 00:30:53,239
container let's take a look at it so

00:30:49,639 --> 00:30:55,669
this is my application here so I'll be

00:30:53,239 --> 00:31:04,519
the first person to put my favorite food

00:30:55,669 --> 00:31:08,929
in here fish and chips that's my

00:31:04,519 --> 00:31:11,690
favorite food okay I'm going to put this

00:31:08,929 --> 00:31:15,409
in bit ly and make it a short URL that

00:31:11,690 --> 00:31:29,690
anybody can anybody can type in their

00:31:15,409 --> 00:31:32,690
computer ok so the URL is right here so

00:31:29,690 --> 00:31:37,330
anybody wants to do I have any

00:31:32,690 --> 00:31:40,539
volunteers here want to give it a try

00:31:37,330 --> 00:31:40,539
all right

00:32:01,080 --> 00:32:22,840
you got it oh wait one second okay so

00:32:21,429 --> 00:32:28,090
there's been a lot of people on this

00:32:22,840 --> 00:32:32,620
site then like wow there's a lot of

00:32:28,090 --> 00:32:34,540
sushi fans here and somebody puts a

00:32:32,620 --> 00:32:38,380
curse on in there I don't know why but

00:32:34,540 --> 00:32:45,160
I'm scared for my life right now you're

00:32:38,380 --> 00:32:48,669
my favorite I'm scared right now but uh

00:32:45,160 --> 00:32:51,130
so so we have our application so let's

00:32:48,669 --> 00:32:53,559
let's check the logs let's check the

00:32:51,130 --> 00:33:00,070
logs and see what what happened there

00:32:53,559 --> 00:33:02,799
right so we'll go into the application

00:33:00,070 --> 00:33:05,049
here and we'll check out the lights see

00:33:02,799 --> 00:33:07,150
what's going on here so there's a lot of

00:33:05,049 --> 00:33:11,650
stuff here so fish and chips fish and

00:33:07,150 --> 00:33:15,490
chips sushi sushi guys can see the logs

00:33:11,650 --> 00:33:18,160
right things are coming through apples

00:33:15,490 --> 00:33:22,890
and where do we have Zach a sign in

00:33:18,160 --> 00:33:22,890
there somewhere I'm gonna find you a PHS

00:33:27,230 --> 00:33:30,460
[Applause]

00:33:32,630 --> 00:33:45,690
gotcha haha find the right speed quickly

00:33:37,970 --> 00:33:48,030
I'll find you somehow so so now that

00:33:45,690 --> 00:33:51,090
we're here and now that we have an

00:33:48,030 --> 00:33:53,520
application there right so we talked

00:33:51,090 --> 00:33:56,250
about those concepts right which was we

00:33:53,520 --> 00:33:59,640
have a pod right as you can see we have

00:33:56,250 --> 00:34:01,110
these parts here one and two and then we

00:33:59,640 --> 00:34:03,780
have this which is the bill that

00:34:01,110 --> 00:34:06,750
completed and of course you can always

00:34:03,780 --> 00:34:09,750
check back and see you know bills that

00:34:06,750 --> 00:34:12,690
changed but I want to make this even

00:34:09,750 --> 00:34:15,840
more interesting all right I want to go

00:34:12,690 --> 00:34:17,550
into that web application and then I'm

00:34:15,840 --> 00:34:19,530
going to make a change I want to push it

00:34:17,550 --> 00:34:21,810
to get I'm going to trigger another

00:34:19,530 --> 00:34:23,520
build and let's see this application

00:34:21,810 --> 00:34:27,810
change maybe we'll change the title or

00:34:23,520 --> 00:34:29,370
something make it simple so yeah let's

00:34:27,810 --> 00:34:32,490
make that demo a little bit more

00:34:29,370 --> 00:34:35,270
interesting then so let's make this

00:34:32,490 --> 00:34:35,270
title something

00:34:40,130 --> 00:34:55,300
let's put in here instead of favorite

00:34:44,270 --> 00:35:01,130
food will do music yeah music music

00:34:55,300 --> 00:35:10,520
orders okay and this time no Zach in

00:35:01,130 --> 00:35:12,470
there alright alright so I'm going to go

00:35:10,520 --> 00:35:15,610
into my terminal here and

00:35:12,470 --> 00:35:15,610
[Music]

00:35:36,170 --> 00:35:39,170
alright

00:35:46,510 --> 00:35:57,980
so so you can get so as you can see just

00:35:56,060 --> 00:36:00,230
just for the sake of no smoke and

00:35:57,980 --> 00:36:06,140
mirrors you can see it might get change

00:36:00,230 --> 00:36:11,480
here okay let's see you'll see you see

00:36:06,140 --> 00:36:15,440
the actual changes now so this is our

00:36:11,480 --> 00:36:17,660
build right it it requires our builds

00:36:15,440 --> 00:36:19,760
and it shows like all the all the bills

00:36:17,660 --> 00:36:25,310
and stuff right but when we were more

00:36:19,760 --> 00:36:28,970
interested in is the deployment here so

00:36:25,310 --> 00:36:31,610
we want to trigger a deployment so we

00:36:28,970 --> 00:36:34,700
can click this button but I happen to be

00:36:31,610 --> 00:36:39,680
a fan of the terminal so we're going to

00:36:34,700 --> 00:36:42,440
be using terminal okay so basically I

00:36:39,680 --> 00:36:44,210
put that command in there OC deploy the

00:36:42,440 --> 00:36:45,920
application I want the latest

00:36:44,210 --> 00:36:52,810
application and I want it in my name

00:36:45,920 --> 00:36:56,600
space this project F sauce 20 2016 right

00:36:52,810 --> 00:36:59,530
so i click that so now it's doing a

00:36:56,600 --> 00:36:59,530
rolling deployment

00:37:07,420 --> 00:37:13,720
alright as you can see it's taking down

00:37:10,599 --> 00:37:16,900
my node.js application let's bring it

00:37:13,720 --> 00:37:25,089
back up the latest code saw that right

00:37:16,900 --> 00:37:27,970
is pretty quick soft okay all right see

00:37:25,089 --> 00:37:35,790
our bills let's make sure we check and

00:37:27,970 --> 00:37:35,790
see nope still running

00:37:39,680 --> 00:37:43,240
yeah but still running

00:38:02,359 --> 00:38:12,710
yep right so we got the latest one now

00:38:05,210 --> 00:38:12,710
so it should be should be up here

00:38:15,970 --> 00:38:22,230
i'm at my browser oh goodness

00:38:26,330 --> 00:38:38,560
you know what let's do this I am NOT

00:38:36,080 --> 00:38:38,560
hacking

00:38:38,740 --> 00:38:41,990
[Music]

00:38:47,130 --> 00:38:54,840
so what I did there was I just deleted

00:38:49,860 --> 00:38:56,520
everything and using labels as i

00:38:54,840 --> 00:38:59,580
mentioned i promise i was going to show

00:38:56,520 --> 00:39:00,570
you guys how to use labels and in this

00:38:59,580 --> 00:39:05,930
case i showed you how to delete

00:39:00,570 --> 00:39:12,620
everything so so now that we got there

00:39:05,930 --> 00:39:15,810
this should be offline now so all right

00:39:12,620 --> 00:39:22,110
now we have nothing running except the

00:39:15,810 --> 00:39:26,190
polls build artifact but we can also so

00:39:22,110 --> 00:39:27,420
these commands that i'm running maybe i

00:39:26,190 --> 00:39:28,860
should actually cover these commands

00:39:27,420 --> 00:39:29,820
actually because these are very

00:39:28,860 --> 00:39:33,420
important if you're going to be

00:39:29,820 --> 00:39:35,010
developing stuff and a lot of times you

00:39:33,420 --> 00:39:37,620
know you're going to be using the

00:39:35,010 --> 00:39:41,100
terminal for a lot of system admin stuff

00:39:37,620 --> 00:39:42,420
so OC is our command and what it lets

00:39:41,100 --> 00:39:44,430
you do is it lets you do a lot of things

00:39:42,420 --> 00:39:46,650
like login it lets you deploy

00:39:44,430 --> 00:39:50,280
applications it lets you said you know

00:39:46,650 --> 00:39:52,290
security it lets you some but you have

00:39:50,280 --> 00:39:54,540
to have permissions in order to use a

00:39:52,290 --> 00:39:58,530
lot of those you know high security

00:39:54,540 --> 00:40:01,320
things it lets you check builds see a

00:39:58,530 --> 00:40:04,290
build success or failure so if you don't

00:40:01,320 --> 00:40:07,710
want to use the UI then you can just do

00:40:04,290 --> 00:40:08,850
a lot of your work off the terminal but

00:40:07,710 --> 00:40:10,020
i wanted to show the UI because i

00:40:08,850 --> 00:40:14,280
thought it's a little bit more

00:40:10,020 --> 00:40:18,510
interesting than green screen but so

00:40:14,280 --> 00:40:22,200
this is also you get pods I'll see get

00:40:18,510 --> 00:40:27,840
services we have nothing and also you

00:40:22,200 --> 00:40:32,580
get all but these are a lot of the

00:40:27,840 --> 00:40:34,800
commands that that exists right so so

00:40:32,580 --> 00:40:38,160
let's let's get back to our demo and

00:40:34,800 --> 00:40:43,950
let's let's let's show show the latest

00:40:38,160 --> 00:40:46,100
you know move the application favorite

00:40:43,950 --> 00:40:46,100
movie

00:40:46,450 --> 00:40:55,299
music yeah i think i miss my coffee down

00:40:51,529 --> 00:40:55,299
here yeah

00:41:04,990 --> 00:41:13,920
alright so there goes our built so this

00:41:11,860 --> 00:41:26,890
time let's just watch the build and see

00:41:13,920 --> 00:41:29,050
things building so so you can press this

00:41:26,890 --> 00:41:31,090
button here follow if you want to follow

00:41:29,050 --> 00:41:33,040
the build and see like the progress of

00:41:31,090 --> 00:41:35,200
the build what's happening in the build

00:41:33,040 --> 00:41:41,680
and then you're going to see the image

00:41:35,200 --> 00:41:46,330
getting pushed at the end okay so since

00:41:41,680 --> 00:41:48,540
we're build is done our application is

00:41:46,330 --> 00:41:48,540
up

00:41:50,619 --> 00:42:02,730
so let's see if we're in business we are

00:41:56,170 --> 00:42:06,940
in business so we somebody did it

00:42:02,730 --> 00:42:08,859
somebody did it you are my music Zac oh

00:42:06,940 --> 00:42:13,930
my goodness somebody's really quick at

00:42:08,859 --> 00:42:15,970
typing here okay all right it's like I'm

00:42:13,930 --> 00:42:25,059
favor everything no they were music

00:42:15,970 --> 00:42:28,480
favorite food okay so so now they

00:42:25,059 --> 00:42:30,819
understand so now debugging let's talk a

00:42:28,480 --> 00:42:34,180
little bit about the bugging right so i

00:42:30,819 --> 00:42:36,849
have my application great it's on cooper

00:42:34,180 --> 00:42:39,640
Nettie's openshift so on the pass it's

00:42:36,849 --> 00:42:45,940
running something something goes wrong

00:42:39,640 --> 00:42:48,759
right what do i do what best thing is to

00:42:45,940 --> 00:42:52,930
do is first you just check what pods are

00:42:48,759 --> 00:42:58,269
running right so you can see our node.js

00:42:52,930 --> 00:42:59,710
applications running right so now that

00:42:58,269 --> 00:43:02,710
are not jess is application is running

00:42:59,710 --> 00:43:05,410
let's let's look at the logs from here

00:43:02,710 --> 00:43:11,739
or maybe let's ssh into it let's go into

00:43:05,410 --> 00:43:14,160
that box right let's get in let's get in

00:43:11,739 --> 00:43:14,160
here

00:43:26,940 --> 00:43:32,569
take a little bit know what forget that

00:43:41,720 --> 00:43:46,910
okay so as you can see the terminal

00:43:44,690 --> 00:43:49,310
let's just actually get inside the

00:43:46,910 --> 00:43:51,500
terminal and do things so like I can

00:43:49,310 --> 00:43:54,410
check and see okay I deployed my code

00:43:51,500 --> 00:43:57,200
let's go into views i'm pretty sure i

00:43:54,410 --> 00:43:59,480
put music there for some reason my

00:43:57,200 --> 00:44:02,030
changes are not showing up so what I

00:43:59,480 --> 00:44:03,859
just get in this HTML file and let's see

00:44:02,030 --> 00:44:10,640
let's see if my changes are actually in

00:44:03,859 --> 00:44:14,630
there alright so let's see if my music

00:44:10,640 --> 00:44:16,730
changes in there it's there right so you

00:44:14,630 --> 00:44:19,280
can you can do your lot of like

00:44:16,730 --> 00:44:22,340
debugging in your doctor container here

00:44:19,280 --> 00:44:25,609
within the web console you can do it on

00:44:22,340 --> 00:44:27,440
terminal 2 it's taking awhile so but a

00:44:25,609 --> 00:44:31,369
little easier and a little easier to

00:44:27,440 --> 00:44:34,030
read on the on the web console so this

00:44:31,369 --> 00:44:36,080
tab is very important so for example if

00:44:34,030 --> 00:44:39,500
this if there's something that's not

00:44:36,080 --> 00:44:41,750
working right you can use this tab to

00:44:39,500 --> 00:44:47,869
kind of see when things break and when

00:44:41,750 --> 00:44:50,089
something goes wrong right and this is

00:44:47,869 --> 00:44:52,550
your environment variables so for

00:44:50,089 --> 00:44:54,740
example your database username

00:44:52,550 --> 00:44:58,839
password and a lot of the things that

00:44:54,740 --> 00:45:02,510
the application is using right are here

00:44:58,839 --> 00:45:05,800
so we are going to quickly take a look

00:45:02,510 --> 00:45:05,800
at the server side code

00:45:07,180 --> 00:45:13,420
so let's look at how I connected to that

00:45:09,940 --> 00:45:15,099
 database right so I i have this

00:45:13,420 --> 00:45:17,140
node.js application is connecting to

00:45:15,099 --> 00:45:20,079
 what I'm doing is I'm checking the

00:45:17,140 --> 00:45:22,240
poor environment variable here and I'm

00:45:20,079 --> 00:45:25,569
checking this node.js application IP

00:45:22,240 --> 00:45:29,650
here and then I'm also checking the URL

00:45:25,569 --> 00:45:32,380
for mongodb so once I take the URL I set

00:45:29,650 --> 00:45:38,260
up using environment variables I do a

00:45:32,380 --> 00:45:41,349
lot of my wiring right so i can probably

00:45:38,260 --> 00:45:43,540
like run you know run this application

00:45:41,349 --> 00:45:49,300
something goes down it can come back up

00:45:43,540 --> 00:45:51,609
easily and IP addresses changed right as

00:45:49,300 --> 00:45:53,530
i mentioned pause change but when you

00:45:51,609 --> 00:45:57,430
use an environment variable it's a lot

00:45:53,530 --> 00:46:04,559
easier to discover where your your your

00:45:57,430 --> 00:46:04,559
databases are all right so

00:46:06,299 --> 00:46:13,229
so I'm actually getting to almost at the

00:46:10,529 --> 00:46:16,079
end so I wanted to leave a little bit of

00:46:13,229 --> 00:46:17,849
time for for questions or something that

00:46:16,079 --> 00:46:24,359
somebody is more interested in diving

00:46:17,849 --> 00:46:35,029
into more in depth or I'm going to call

00:46:24,359 --> 00:46:35,029
it a the end is there any questions yeah

00:46:36,049 --> 00:46:44,160
yeah it's it's basically melted as a

00:46:40,890 --> 00:46:51,539
volume but it's like a text file text

00:46:44,160 --> 00:46:54,660
file folder community college no it's

00:46:51,539 --> 00:46:56,969
the actual user name password but it's

00:46:54,660 --> 00:47:04,799
not available outside it's only within

00:46:56,969 --> 00:47:06,900
your pod ever you're basically taking

00:47:04,799 --> 00:47:09,359
the Yama and then pushing it to the copy

00:47:06,900 --> 00:47:11,099
API and then that create triggers the

00:47:09,359 --> 00:47:14,189
creation of the secret and the secret

00:47:11,099 --> 00:47:16,799
gets mounted as a volume and you have to

00:47:14,189 --> 00:47:19,859
mull to yourself like part i wanted to

00:47:16,799 --> 00:47:21,599
mention is within your pod definition

00:47:19,859 --> 00:47:24,089
you have to actually save volumes and

00:47:21,599 --> 00:47:27,420
then you have to specifically ask it to

00:47:24,089 --> 00:47:30,589
mount your secret so that's a extra step

00:47:27,420 --> 00:47:30,589
that you would have to do

00:47:31,740 --> 00:47:39,240
sorry yeah your hand up as well yeah so

00:47:35,369 --> 00:47:41,460
Q are setting up a stateful server first

00:47:39,240 --> 00:47:46,680
service and you have a running on

00:47:41,460 --> 00:47:50,640
multiple pause how does how do you send

00:47:46,680 --> 00:47:52,619
up such that the router make sure that

00:47:50,640 --> 00:47:55,560
the address address always goes to the

00:47:52,619 --> 00:47:58,020
same bye that's that's called sticky

00:47:55,560 --> 00:48:04,530
session and that's like a load balancer

00:47:58,020 --> 00:48:06,510
thing so why would you want to keep it

00:48:04,530 --> 00:48:09,410
going to the same one are you trying to

00:48:06,510 --> 00:48:13,740
do a be testing because it's dave foley

00:48:09,410 --> 00:48:16,140
require the service requires to know the

00:48:13,740 --> 00:48:17,910
service needs to know what he has

00:48:16,140 --> 00:48:23,040
already done for you to provide the next

00:48:17,910 --> 00:48:24,510
part of what it's answering such as

00:48:23,040 --> 00:48:27,780
logging into small the web apps we

00:48:24,510 --> 00:48:29,170
ground right I have to know that you've

00:48:27,780 --> 00:48:34,030
dedicated before

00:48:29,170 --> 00:48:36,660
oh oh okay all right so there's there's

00:48:34,030 --> 00:48:39,940
something called SSO single sign-on

00:48:36,660 --> 00:48:42,910
authentication right so that's something

00:48:39,940 --> 00:48:45,250
that if you would you be interested in

00:48:42,910 --> 00:48:46,900
doing like single sign-on right then

00:48:45,250 --> 00:48:53,380
what you would do is you would set up

00:48:46,900 --> 00:48:55,000
ldap right within the sso and then once

00:48:53,380 --> 00:48:58,869
you set up your LDAP then the SS all

00:48:55,000 --> 00:49:01,180
gives you tooling to you know set up

00:48:58,869 --> 00:49:03,400
security where when requests come in it

00:49:01,180 --> 00:49:06,010
goes directly gets routed to the bestest

00:49:03,400 --> 00:49:07,900
ol web console and then it authenticates

00:49:06,010 --> 00:49:09,400
the user but I think what you are

00:49:07,900 --> 00:49:13,150
interested in more is you want to

00:49:09,400 --> 00:49:17,589
develop your own authentication I would

00:49:13,150 --> 00:49:19,930
suggest to take a look at the Y user

00:49:17,589 --> 00:49:22,030
goes to the website they need to get

00:49:19,930 --> 00:49:24,010
directly to a specific to jam whichever

00:49:22,030 --> 00:49:25,180
doesn't matter the first time and then

00:49:24,010 --> 00:49:26,349
after that they have to keep getting

00:49:25,180 --> 00:49:28,829
sent to that container where they're

00:49:26,349 --> 00:49:31,329
still logged in hast a container go down

00:49:28,829 --> 00:49:36,900
ok so then best thing to do in that

00:49:31,329 --> 00:49:40,140
situation then create a creator an

00:49:36,900 --> 00:49:43,510
application that talks to the Kobe API

00:49:40,140 --> 00:49:46,599
right and discovers which pause there

00:49:43,510 --> 00:49:49,960
are set the pod as a label right and

00:49:46,599 --> 00:49:54,160
then each request that comes in just we

00:49:49,960 --> 00:49:58,990
redirect to that specific pod so you can

00:49:54,160 --> 00:50:03,250
the choices based on ingress address um

00:49:58,990 --> 00:50:08,140
I got a double check on that part but ok

00:50:03,250 --> 00:50:14,750
I got an example say I set up a bunch of

00:50:08,140 --> 00:50:17,420
containers called Linux student however

00:50:14,750 --> 00:50:19,130
when my student comes in over the

00:50:17,420 --> 00:50:23,090
network I'm going to redirect them to

00:50:19,130 --> 00:50:25,400
one of the containers if he sets up

00:50:23,090 --> 00:50:28,910
another ssh session I want him to go to

00:50:25,400 --> 00:50:31,730
that same container so that he will see

00:50:28,910 --> 00:50:33,500
his processes that he's running he not

00:50:31,730 --> 00:50:35,240
if he gets on a different container and

00:50:33,500 --> 00:50:39,230
does PSC it's not going to see the

00:50:35,240 --> 00:50:42,560
processes running right okay let's do

00:50:39,230 --> 00:50:45,770
this maybe I'll give you I'll give you

00:50:42,560 --> 00:50:47,570
my red hat email yeah and then you can

00:50:45,770 --> 00:50:48,620
just touch base with me afterwards and

00:50:47,570 --> 00:50:50,810
i'll i'll try and get you the

00:50:48,620 --> 00:50:55,820
information or whatever information i

00:50:50,810 --> 00:50:58,070
can i can help with okay yeah question

00:50:55,820 --> 00:51:02,810
is who Jesus really the right solution

00:50:58,070 --> 00:51:05,720
for this problem yeah and any English

00:51:02,810 --> 00:51:07,640
it's obvious it yeah it may also remain

00:51:05,720 --> 00:51:09,470
the services they can't deal with the

00:51:07,640 --> 00:51:11,570
interstate um there's something on the

00:51:09,470 --> 00:51:14,330
road now I'm not sure if that hundred

00:51:11,570 --> 00:51:16,940
percent will fit and combined ages um

00:51:14,330 --> 00:51:18,890
it's more for like four clusters come

00:51:16,940 --> 00:51:21,680
you wouldn't want Iran database fastest

00:51:18,890 --> 00:51:24,440
in covenant is revealing yeah this is a

00:51:21,680 --> 00:51:26,510
radius is more like a yeah but it's

00:51:24,440 --> 00:51:29,480
probably something simple that they call

00:51:26,510 --> 00:51:32,450
your pet set so yeah pet cells exist

00:51:29,480 --> 00:51:36,290
headsets exist here and open shift yeah

00:51:32,450 --> 00:51:37,760
yeah I did I didn't want to continue I

00:51:36,290 --> 00:51:39,740
didn't want to talk about pizzas but

00:51:37,760 --> 00:51:42,800
like yeah pet says do exist but that's

00:51:39,740 --> 00:51:47,410
another topic and like I said if you

00:51:42,800 --> 00:51:47,410
want we can touch base offline

00:51:49,829 --> 00:51:57,339
so is this openshift for example us

00:51:53,259 --> 00:51:59,529
that's a red hats answer to sort of like

00:51:57,339 --> 00:52:02,739
OpenStack but instead of VMs and bare

00:51:59,529 --> 00:52:08,339
metal it's our containers is that which

00:52:02,739 --> 00:52:10,959
it is yeah it kind of the soul like so

00:52:08,339 --> 00:52:12,459
OpenStack is more of you know virtual

00:52:10,959 --> 00:52:14,169
machines and then you have a hypervisor

00:52:12,459 --> 00:52:16,179
and you have that sort of setup right

00:52:14,169 --> 00:52:18,130
this is a little bit more lightweight

00:52:16,179 --> 00:52:20,349
for me and this is my personal opinion

00:52:18,130 --> 00:52:22,479
that this is more lightweight you have

00:52:20,349 --> 00:52:25,119
dr. containers which is more emerging

00:52:22,479 --> 00:52:28,179
technology right but I mean some folks

00:52:25,119 --> 00:52:31,029
say they might want to set up they might

00:52:28,179 --> 00:52:34,239
want to set up VMs using OpenStack and

00:52:31,029 --> 00:52:36,999
then run open shift on top of OpenStack

00:52:34,239 --> 00:52:38,349
and then have their doctor containers on

00:52:36,999 --> 00:52:42,569
top of some people want to mix both

00:52:38,349 --> 00:52:42,569
which both are viable options

00:52:46,480 --> 00:52:50,109
so you come closer go read through

00:52:48,970 --> 00:52:53,890
environment variables but other

00:52:50,109 --> 00:52:58,260
alternatives like a cluster eNOS I know

00:52:53,890 --> 00:52:58,260
is president who may also something I

00:52:59,970 --> 00:53:04,720
mean it's possible it's possible but I

00:53:03,070 --> 00:53:06,369
mean the environment variables are like

00:53:04,720 --> 00:53:09,310
the Trident through a lot of people

00:53:06,369 --> 00:53:13,080
usually use environment variables to do

00:53:09,310 --> 00:53:13,080
things like this service discovery

00:53:15,840 --> 00:53:20,530
openshift pretty yucky it's the same

00:53:18,850 --> 00:53:24,010
scheduler it's the same Cooper Cooper

00:53:20,530 --> 00:53:26,200
Nettie's and like our engineering

00:53:24,010 --> 00:53:29,530
department we have folks that you know

00:53:26,200 --> 00:53:33,910
help out with making bug fixes on Cooper

00:53:29,530 --> 00:53:35,200
Nettie's as well so yeah we use Cooper

00:53:33,910 --> 00:53:38,590
Nerys with pulling Cooper nails as a

00:53:35,200 --> 00:53:41,670
dependency to open shift and this is

00:53:38,590 --> 00:53:41,670
also written go as well

00:53:44,780 --> 00:53:50,680
anything else thank you

00:54:01,809 --> 00:54:03,869

YouTube URL: https://www.youtube.com/watch?v=RnGgqHPU6dU


