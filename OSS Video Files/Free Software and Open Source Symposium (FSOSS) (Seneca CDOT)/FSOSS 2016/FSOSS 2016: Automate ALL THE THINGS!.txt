Title: FSOSS 2016: Automate ALL THE THINGS!
Publication date: 2016-11-24
Playlist: FSOSS 2016
Description: 
	Speaker: Justin Flowers, Software Developer for NexJ Systems

When you hear Jenkins, you probably think continuous integration and automated builds. Or you think of an English butler dressed in a penguin suit. In either case, Jenkins goes far beyond being a simple CI tool. This presentation aims to introduce beginner to intermediate Jenkins users to the wonderful world of automation that everyone's favourite CI server enables. Topics to be covered will include making projects, adding triggers and parameters, working with build pipelines and flows, amazing plugins, clever workaround and outside the box tricks.
Captions: 
	00:00:04,680 --> 00:00:09,610
hello everyone and welcome to automate

00:00:07,600 --> 00:00:13,030
all the things an introduction to

00:00:09,610 --> 00:00:14,889
Jenkins just a rundown for our plan

00:00:13,030 --> 00:00:16,540
today we're going to start with an

00:00:14,889 --> 00:00:18,580
introduction I'm going to quickly move

00:00:16,540 --> 00:00:20,529
into describing what Jenkins is and what

00:00:18,580 --> 00:00:22,779
it's all about then we're going to do a

00:00:20,529 --> 00:00:24,369
little demo on Jenkin jobs and get you

00:00:22,779 --> 00:00:26,590
all familiar on sort of common

00:00:24,369 --> 00:00:28,989
approaches to building and deploying and

00:00:26,590 --> 00:00:31,090
some other neat stuff once you've got an

00:00:28,989 --> 00:00:32,590
idea of how Jenkins works we're going to

00:00:31,090 --> 00:00:34,840
discuss some killer plugins that you

00:00:32,590 --> 00:00:35,559
absolutely need to have and then we're

00:00:34,840 --> 00:00:37,540
going to work through some

00:00:35,559 --> 00:00:39,820
recommendations and best practices and

00:00:37,540 --> 00:00:42,310
some cautionary tales and worst

00:00:39,820 --> 00:00:46,120
practices and finally wrap it up neatly

00:00:42,310 --> 00:00:49,300
with some conclusions just to start off

00:00:46,120 --> 00:00:50,980
as Barry said I'm Justin I'm here

00:00:49,300 --> 00:00:52,720
because I love to give presentations I

00:00:50,980 --> 00:00:55,660
love Jenkins and I love open-source

00:00:52,720 --> 00:00:58,989
technology I'm a graduate of software

00:00:55,660 --> 00:01:00,790
development I worked at CDOT for a year

00:00:58,989 --> 00:01:02,860
as a research assistant and now i'm

00:01:00,790 --> 00:01:05,049
working at next j systems for the

00:01:02,860 --> 00:01:07,210
performance team doing automation of

00:01:05,049 --> 00:01:08,860
analysis and load tests so I've been in

00:01:07,210 --> 00:01:11,640
develops for about two years and

00:01:08,860 --> 00:01:14,050
interested in software for at least six

00:01:11,640 --> 00:01:17,590
and I'd like to start off today with a

00:01:14,050 --> 00:01:19,990
quote it's from a 1920s Spanish poet and

00:01:17,590 --> 00:01:23,380
playwright and he says besides black art

00:01:19,990 --> 00:01:27,610
or black magics there is only automation

00:01:23,380 --> 00:01:30,610
and mechanization and with that let's

00:01:27,610 --> 00:01:33,100
talk about what Jenkins is so there's a

00:01:30,610 --> 00:01:35,740
lot of buzz words goin around Jenkins

00:01:33,100 --> 00:01:37,540
and automation servers and sort of the

00:01:35,740 --> 00:01:39,190
industry in general and if you're not

00:01:37,540 --> 00:01:41,710
deep in it it can be sort of meaningless

00:01:39,190 --> 00:01:43,330
to you so you got to be agile and you

00:01:41,710 --> 00:01:45,549
got to be liens that you can implement

00:01:43,330 --> 00:01:47,650
develops automation to get continuous

00:01:45,549 --> 00:01:50,740
integration continuous deployment and

00:01:47,650 --> 00:01:54,000
continuous delivery goals and all this

00:01:50,740 --> 00:01:57,340
stuff that involves circles and cogs but

00:01:54,000 --> 00:01:59,860
like Jenkins would and does provide for

00:01:57,340 --> 00:02:02,470
continuous integration needs it does fit

00:01:59,860 --> 00:02:04,780
well into agile methodologies it is a

00:02:02,470 --> 00:02:06,939
develops tool and it could foster lean

00:02:04,780 --> 00:02:08,379
development but really if there's

00:02:06,939 --> 00:02:11,080
anything I could leave you with today

00:02:08,379 --> 00:02:13,480
it's that Jenkins it's just an

00:02:11,080 --> 00:02:15,249
automation server that's all it is I

00:02:13,480 --> 00:02:16,000
could end the presentation right here

00:02:15,249 --> 00:02:17,440
and I would

00:02:16,000 --> 00:02:19,660
satisfied because that is the most

00:02:17,440 --> 00:02:23,140
important thing everyone needs to take

00:02:19,660 --> 00:02:24,670
from today it can do a lot I mean it can

00:02:23,140 --> 00:02:27,100
it can do automation through Jenkins

00:02:24,670 --> 00:02:28,390
jobs so you can build and deploy in size

00:02:27,100 --> 00:02:30,460
than anything you really want and

00:02:28,390 --> 00:02:32,860
because of that it can support complex

00:02:30,460 --> 00:02:35,260
processes and pipelines so if you need

00:02:32,860 --> 00:02:36,820
to automate a complex process Jenkins is

00:02:35,260 --> 00:02:38,440
a great tool to do that because you can

00:02:36,820 --> 00:02:41,830
learn quickly with it and get your work

00:02:38,440 --> 00:02:44,140
done quickly with it and wraps all this

00:02:41,830 --> 00:02:46,840
and an amazing access control so you can

00:02:44,140 --> 00:02:49,720
give users so you can make everyone who

00:02:46,840 --> 00:02:51,130
has to use your system have accounts and

00:02:49,720 --> 00:02:52,870
you can define what accounts are and

00:02:51,130 --> 00:02:55,180
what groups and then what groups can do

00:02:52,870 --> 00:02:56,530
what things who can see what builds who

00:02:55,180 --> 00:02:58,180
can control what builds who can

00:02:56,530 --> 00:03:00,520
configure builds and more most

00:02:58,180 --> 00:03:02,110
importantly where those builds can run

00:03:00,520 --> 00:03:05,440
what machines they're allowed to have

00:03:02,110 --> 00:03:07,209
them on it also provides amazing

00:03:05,440 --> 00:03:10,030
out-of-the-box notifications and

00:03:07,209 --> 00:03:12,220
monitoring support so if you want to get

00:03:10,030 --> 00:03:14,230
an email every time a run goes through

00:03:12,220 --> 00:03:17,170
or you want to get a ping on your

00:03:14,230 --> 00:03:19,780
favorite a slack channel when something

00:03:17,170 --> 00:03:23,739
goes wrong it's very easy to set up or

00:03:19,780 --> 00:03:25,480
add and finally Jenkins is incredibly

00:03:23,739 --> 00:03:28,209
extensible it's it's got a lot of

00:03:25,480 --> 00:03:30,370
plugins it's very modular there's not a

00:03:28,209 --> 00:03:36,040
lot that is under the Sun that you can't

00:03:30,370 --> 00:03:37,780
do with it and sure as a concession you

00:03:36,040 --> 00:03:39,310
can use it for automating your builds

00:03:37,780 --> 00:03:40,959
and deploys and tests and it's really

00:03:39,310 --> 00:03:43,780
good at that because it's going to let

00:03:40,959 --> 00:03:46,150
you consolidate the steps of producing

00:03:43,780 --> 00:03:49,269
setting up or starting and then finally

00:03:46,150 --> 00:03:51,459
testing a programmer system but I'm here

00:03:49,269 --> 00:03:52,840
to say I mean it can be used for

00:03:51,459 --> 00:03:55,000
anything else it's just an automation

00:03:52,840 --> 00:03:57,220
server so say you have to wrap a

00:03:55,000 --> 00:03:58,900
command-line interface tool what if

00:03:57,220 --> 00:04:01,299
you're the only person on your team that

00:03:58,900 --> 00:04:02,650
knows bash you need everyone on the team

00:04:01,299 --> 00:04:04,900
to use a tool that's been written in

00:04:02,650 --> 00:04:06,459
bash a very quick way to get it

00:04:04,900 --> 00:04:08,739
accessible to all these members is to

00:04:06,459 --> 00:04:10,480
just wrap it in Jenkins see I provide a

00:04:08,739 --> 00:04:12,070
front end and then make anyone who needs

00:04:10,480 --> 00:04:14,079
to use it have an account and you can

00:04:12,070 --> 00:04:15,610
track who's using the tool and you can

00:04:14,079 --> 00:04:18,280
get permissions on what they can do with

00:04:15,610 --> 00:04:20,709
it it's also great for any sort of

00:04:18,280 --> 00:04:22,500
complex environment setup you have given

00:04:20,709 --> 00:04:25,060
you need it to be quick and across os's

00:04:22,500 --> 00:04:26,860
so say you wanted to give push button

00:04:25,060 --> 00:04:28,960
access to a bunch of docker containers

00:04:26,860 --> 00:04:29,650
and ms equal servers you could do that

00:04:28,960 --> 00:04:32,050
very quick

00:04:29,650 --> 00:04:34,540
with almost no experience with Jenkins

00:04:32,050 --> 00:04:36,340
and then finally if you need to monitor

00:04:34,540 --> 00:04:37,960
processes it's another great tool to

00:04:36,340 --> 00:04:40,120
reach for if you need to know how a

00:04:37,960 --> 00:04:41,560
specific tool went every run and you

00:04:40,120 --> 00:04:42,759
don't want to create your own cron job

00:04:41,560 --> 00:04:45,340
that's going to send you emails about

00:04:42,759 --> 00:04:47,020
its status you can add it to Jenkins get

00:04:45,340 --> 00:04:49,539
Jenkins to schedule it and then have it

00:04:47,020 --> 00:04:52,830
do all of your monitoring and emailing

00:04:49,539 --> 00:04:52,830
when it comes to failures or successes

00:04:53,400 --> 00:04:59,289
so just to clarify it is not just a CI

00:04:56,620 --> 00:05:01,240
server because it can do way more it's

00:04:59,289 --> 00:05:03,310
not just a fad because it's going to not

00:05:01,240 --> 00:05:05,289
going to be going away soon and in

00:05:03,310 --> 00:05:07,210
itself it is definitely not a be all and

00:05:05,289 --> 00:05:10,440
end all because it's totally designed to

00:05:07,210 --> 00:05:13,210
play nicely with friends given all that

00:05:10,440 --> 00:05:16,090
where does Jenkins fit in to your server

00:05:13,210 --> 00:05:18,340
system so it's really meant to be in the

00:05:16,090 --> 00:05:20,050
middle Jenkins wants to do everything

00:05:18,340 --> 00:05:22,030
that humans really shouldn't be doing in

00:05:20,050 --> 00:05:23,410
your processes anything that can be

00:05:22,030 --> 00:05:26,770
automated in your hole saw through a

00:05:23,410 --> 00:05:28,630
cycle so a pretty common workflow would

00:05:26,770 --> 00:05:29,680
be for a developer to push their code to

00:05:28,630 --> 00:05:32,650
some sort of source code management

00:05:29,680 --> 00:05:34,599
system like github and for Jenkins to

00:05:32,650 --> 00:05:36,789
pick up the changes it could then

00:05:34,599 --> 00:05:38,680
automatically start building a series of

00:05:36,789 --> 00:05:40,440
docker containers that has your app and

00:05:38,680 --> 00:05:42,610
bring them up while simultaneously

00:05:40,440 --> 00:05:45,220
talking to your database and preparing

00:05:42,610 --> 00:05:46,960
it for a dry run tests and in the end it

00:05:45,220 --> 00:05:49,419
can launch the test and do this whole

00:05:46,960 --> 00:05:50,680
this whole process automated let the

00:05:49,419 --> 00:05:52,990
developer really having to say anything

00:05:50,680 --> 00:05:57,669
all he has to do is implicitly push to a

00:05:52,990 --> 00:05:59,080
test branch and he'll get that just a

00:05:57,669 --> 00:06:02,139
brief history this is something really

00:05:59,080 --> 00:06:04,780
funny to me Jenkins started off as the

00:06:02,139 --> 00:06:08,110
Hudson project in 2004 under sun

00:06:04,780 --> 00:06:10,150
microsystems and after oracle took over

00:06:08,110 --> 00:06:12,400
there was a dispute over infrastructure

00:06:10,150 --> 00:06:14,740
in 2010 oracle was claiming the rights

00:06:12,400 --> 00:06:17,409
to a lot of the technology and so they

00:06:14,740 --> 00:06:18,880
had a negotiations where oracle gave up

00:06:17,409 --> 00:06:20,680
and relented on a lot of those rights

00:06:18,880 --> 00:06:22,210
but one thing that stuck was they had to

00:06:20,680 --> 00:06:24,430
claim the right to the Hudson name and

00:06:22,210 --> 00:06:26,740
so being a bunch of awesome software

00:06:24,430 --> 00:06:29,590
developers they decided to rebel

00:06:26,740 --> 00:06:32,770
entirely and fork Hudson creating their

00:06:29,590 --> 00:06:35,830
very own github project literally only

00:06:32,770 --> 00:06:39,010
changing the name to Jenkins as of 2013

00:06:35,830 --> 00:06:41,830
Jenkins on github had 567 project

00:06:39,010 --> 00:06:42,990
members and 1,100 public repos and the

00:06:41,830 --> 00:06:46,710
original Hudson

00:06:42,990 --> 00:06:52,440
30-2 project members and 17 repositories

00:06:46,710 --> 00:06:53,490
so Jenkins is definitely taken over okay

00:06:52,440 --> 00:06:55,410
nitty-gritty of what we're going to be

00:06:53,490 --> 00:06:58,470
looking at in our demo we're going to be

00:06:55,410 --> 00:07:00,120
talking about freestyle jobs approaches

00:06:58,470 --> 00:07:02,550
to automated building and deployment and

00:07:00,120 --> 00:07:06,860
some other fun stuff on demand and

00:07:02,550 --> 00:07:06,860
triggered jobs and parameterizing builds

00:07:07,460 --> 00:07:14,190
okay so jobs and Jenkins just a quick

00:07:10,830 --> 00:07:16,440
run through what is the anatomy of a job

00:07:14,190 --> 00:07:18,150
what are they composed of well there's

00:07:16,440 --> 00:07:19,650
six main things there's general

00:07:18,150 --> 00:07:21,660
properties such as the name and

00:07:19,650 --> 00:07:26,100
description a bunch of other boring sort

00:07:21,660 --> 00:07:27,990
of makes sense properties there's source

00:07:26,100 --> 00:07:29,430
code management controls so if you want

00:07:27,990 --> 00:07:31,650
to pull your coat or if you're building

00:07:29,430 --> 00:07:34,410
something how you would talk to your

00:07:31,650 --> 00:07:36,270
repos build triggers when you want your

00:07:34,410 --> 00:07:38,100
build to go off build environment

00:07:36,270 --> 00:07:41,190
controls these are sort of like the

00:07:38,100 --> 00:07:42,420
miscellaneous category to draw a bag of

00:07:41,190 --> 00:07:44,070
whatever you want to add and then the

00:07:42,420 --> 00:07:47,550
meeting potatoes which are build steps

00:07:44,070 --> 00:07:49,590
and post build actions and a general

00:07:47,550 --> 00:07:51,780
workflow would just be to make a job to

00:07:49,590 --> 00:07:53,670
find parameters for it configure your

00:07:51,780 --> 00:07:56,220
properties and source code management if

00:07:53,670 --> 00:07:59,250
it does exist define some build steps

00:07:56,220 --> 00:08:01,080
and define some post build actions and

00:07:59,250 --> 00:08:04,400
with all that meaningless stuff said

00:08:01,080 --> 00:08:04,400
let's do a demo

00:08:10,150 --> 00:08:17,770
okay so i've got a Jenkins server setup

00:08:15,130 --> 00:08:19,240
here on my localhost I don't know is is

00:08:17,770 --> 00:08:22,660
that so tiny that no one can read it

00:08:19,240 --> 00:08:27,310
should I I'll just make it bigger for

00:08:22,660 --> 00:08:30,490
good practice yeah so let's start off

00:08:27,310 --> 00:08:32,400
with a very simple freestyle job so jobs

00:08:30,490 --> 00:08:35,310
are the fundamental building block of

00:08:32,400 --> 00:08:37,480
Jenkins pretty much all of your

00:08:35,310 --> 00:08:39,760
automation is going to be inside jobs

00:08:37,480 --> 00:08:40,930
and controlled that way let's just make

00:08:39,760 --> 00:08:43,840
a very simple one that we're going to

00:08:40,930 --> 00:08:45,880
call hello world it's going to be a

00:08:43,840 --> 00:08:53,530
freestyle project we're going to hit

00:08:45,880 --> 00:08:56,950
okay all right general properties name

00:08:53,530 --> 00:08:59,860
hello world description prince hello

00:08:56,950 --> 00:09:02,920
worlds to the console that's all we want

00:08:59,860 --> 00:09:05,800
this job to do we're going to gloss over

00:09:02,920 --> 00:09:07,030
a bunch of other fun configuration stuff

00:09:05,800 --> 00:09:09,520
and go straight to the meat and potatoes

00:09:07,030 --> 00:09:11,920
which are your build steps this is where

00:09:09,520 --> 00:09:14,560
you define exactly what should happen in

00:09:11,920 --> 00:09:16,030
your automation so as you can see

00:09:14,560 --> 00:09:18,190
there's a lot of options here can

00:09:16,030 --> 00:09:21,460
execute a Windows batch command execute

00:09:18,190 --> 00:09:23,800
shell invoke answer Gradle call maven

00:09:21,460 --> 00:09:25,990
these are all sort of the built-in stuff

00:09:23,800 --> 00:09:27,910
and I have a neat plugin that gives me

00:09:25,990 --> 00:09:29,740
the ability to call other projects but

00:09:27,910 --> 00:09:32,860
I'll show that in a bit let's just do

00:09:29,740 --> 00:09:35,050
something simple execute show by the way

00:09:32,860 --> 00:09:36,460
I'm running this off a bunt too so if I

00:09:35,050 --> 00:09:37,810
were going to do execute windows batch

00:09:36,460 --> 00:09:41,910
command that wouldn't make a terrible

00:09:37,810 --> 00:09:48,820
amount of sense here so let's just echo

00:09:41,910 --> 00:09:50,980
hello world can hit apply save and now

00:09:48,820 --> 00:09:55,300
we've made our very first incredibly

00:09:50,980 --> 00:10:00,490
simple job if we wanted to run it all

00:09:55,300 --> 00:10:03,670
we'd have to say is build now you'll see

00:10:00,490 --> 00:10:06,730
a build history it has a new entry for

00:10:03,670 --> 00:10:09,790
number one you can click it ok we have a

00:10:06,730 --> 00:10:12,990
build it was today approximately 20

00:10:09,790 --> 00:10:15,730
seconds ago and if we go to the output

00:10:12,990 --> 00:10:18,490
we can see all it does is like a hello

00:10:15,730 --> 00:10:20,880
world and say hey nothing exited 0 so

00:10:18,490 --> 00:10:20,880
I'm very happy

00:10:22,860 --> 00:10:27,090
now let's do something a little more

00:10:24,610 --> 00:10:30,220
interesting so I've set up a repository

00:10:27,090 --> 00:10:33,190
called hello world and it's a very

00:10:30,220 --> 00:10:37,510
simple Java program that's just prints

00:10:33,190 --> 00:10:46,150
out hello f sauce let's try and get this

00:10:37,510 --> 00:10:50,860
built in Jenkins do item let's call it a

00:10:46,150 --> 00:10:57,880
simple build example we go to freestyle

00:10:50,860 --> 00:10:59,410
projects and continue I'm going to skip

00:10:57,880 --> 00:11:02,140
over the description and we're going to

00:10:59,410 --> 00:11:04,540
go straight to source code management so

00:11:02,140 --> 00:11:06,310
we want to add a git repo here for

00:11:04,540 --> 00:11:09,000
anyone who hasn't used it before it's

00:11:06,310 --> 00:11:15,970
pretty simple to bind you just take the

00:11:09,000 --> 00:11:18,640
HTTPS URL and you stick it in here now

00:11:15,970 --> 00:11:21,700
I've got some pre-configured credentials

00:11:18,640 --> 00:11:24,100
here but it's really simple to add them

00:11:21,700 --> 00:11:25,600
you would just click here and give a

00:11:24,100 --> 00:11:28,920
username and password or you can

00:11:25,600 --> 00:11:31,810
configure SSH keys if you're so inclined

00:11:28,920 --> 00:11:33,550
and I'm telling it just to watch my

00:11:31,810 --> 00:11:35,790
master branch so pull anything you're

00:11:33,550 --> 00:11:37,900
going to try and build pull off master

00:11:35,790 --> 00:11:39,310
the triggers I'm going to do this one

00:11:37,900 --> 00:11:40,810
manually so I'm going to skip everything

00:11:39,310 --> 00:11:50,860
I'm going to go straight back to the

00:11:40,810 --> 00:11:53,700
build servers so let's um do some simple

00:11:50,860 --> 00:11:53,700
compiling in Java

00:11:56,290 --> 00:12:01,959
so for our build steps we're going to

00:11:58,240 --> 00:12:04,779
add an SSH command something to note is

00:12:01,959 --> 00:12:07,720
when Jenkins pulls your repo it's going

00:12:04,779 --> 00:12:09,550
to create a folder for your job and it's

00:12:07,720 --> 00:12:12,220
going to create that in the Jenkins

00:12:09,550 --> 00:12:14,709
workspace so all of this code or these

00:12:12,220 --> 00:12:17,709
three files will go into the workspace

00:12:14,709 --> 00:12:20,050
that I'm n and from the SS h's

00:12:17,709 --> 00:12:23,019
perspective i'll be starting there so

00:12:20,050 --> 00:12:25,000
what i can do really is i know that this

00:12:23,019 --> 00:12:26,470
helloworld dot java program will be

00:12:25,000 --> 00:12:30,279
pulled and we'll be right in front of me

00:12:26,470 --> 00:12:34,180
so i can just do java sea hello world's

00:12:30,279 --> 00:12:36,220
printer java and that should compile it

00:12:34,180 --> 00:12:40,269
and if i wanted to prove that it was

00:12:36,220 --> 00:12:43,110
working just call Java HelloWorld

00:12:40,269 --> 00:12:45,459
printer after and it would run it

00:12:43,110 --> 00:12:49,870
assuming I've been putting any typos and

00:12:45,459 --> 00:12:51,759
I don't get demo luck this builds should

00:12:49,870 --> 00:12:54,130
go very fine so it's just going to pull

00:12:51,759 --> 00:12:59,980
do a Java Sea create the dot class file

00:12:54,130 --> 00:13:02,829
and then run it no air is thank God and

00:12:59,980 --> 00:13:05,500
there we go it's successfully compiled

00:13:02,829 --> 00:13:09,130
hello world printer and called Java on

00:13:05,500 --> 00:13:13,810
the class it's a prince hello f sauce so

00:13:09,130 --> 00:13:15,250
that's a very very simple build now say

00:13:13,810 --> 00:13:16,810
this this doesn't really help us because

00:13:15,250 --> 00:13:19,930
it's not really producing anything it

00:13:16,810 --> 00:13:22,360
just demonstrates that it can compile so

00:13:19,930 --> 00:13:25,300
let's um let's add the ability to create

00:13:22,360 --> 00:13:27,250
a jar for anyone who doesn't know Java

00:13:25,300 --> 00:13:28,990
you need a manifest file to create jars

00:13:27,250 --> 00:13:30,730
but for anyone who does I'm just going

00:13:28,990 --> 00:13:32,199
to say I've got this manifest file here

00:13:30,730 --> 00:13:38,440
and all it's going to do is call hello

00:13:32,199 --> 00:13:43,029
world's printer so the next step would

00:13:38,440 --> 00:13:46,750
be pretty easy all I need to do is say

00:13:43,029 --> 00:13:47,980
jar CFM now I give it a location to put

00:13:46,750 --> 00:13:50,290
the jar into I'm just going to put it

00:13:47,980 --> 00:13:54,279
into temps I don't have to mess around

00:13:50,290 --> 00:13:57,490
with any permissions say hello print

00:13:54,279 --> 00:14:02,170
hello world printer jar I want to do

00:13:57,490 --> 00:14:04,990
it's using my manifest file and I want

00:14:02,170 --> 00:14:06,850
to include all the class files I have

00:14:04,990 --> 00:14:09,459
compiled here

00:14:06,850 --> 00:14:11,410
okay so logically it's just going to do

00:14:09,459 --> 00:14:13,690
the exact same thing as before it's

00:14:11,410 --> 00:14:15,459
going to pull a hello world java it's

00:14:13,690 --> 00:14:17,470
going to compile it run it to prove that

00:14:15,459 --> 00:14:24,660
it works and then additionally it's

00:14:17,470 --> 00:14:24,660
going to jar it up save this build now

00:14:26,439 --> 00:14:34,819
didn't break on me okay cool so I ran

00:14:32,449 --> 00:14:37,429
the commands and it didn't exit 0 let's

00:14:34,819 --> 00:14:41,689
prove that that actually exists let's go

00:14:37,429 --> 00:14:44,449
to temp Stu an LL and there you can see

00:14:41,689 --> 00:14:47,629
it created hello world printer jar at 12

00:14:44,449 --> 00:14:51,259
21 oh no you can't of course not there

00:14:47,629 --> 00:14:58,939
you go now you can see that um it

00:14:51,259 --> 00:15:01,790
created hello world printer jar is it

00:14:58,939 --> 00:15:03,529
back there we go okay see I created

00:15:01,790 --> 00:15:05,689
hello world printer dodge are there and

00:15:03,529 --> 00:15:09,350
if I want to prove that it works i can

00:15:05,689 --> 00:15:10,939
do with java jar hello world printer and

00:15:09,350 --> 00:15:14,589
it prints out hello f sauce well it's

00:15:10,939 --> 00:15:14,589
incredibly tiny and no one can see it

00:15:14,860 --> 00:15:19,240
there we go that's a little easier to

00:15:17,089 --> 00:15:19,240
read

00:15:23,150 --> 00:15:27,860
alright and one last thing so now we

00:15:25,880 --> 00:15:30,710
actually produce a jar file and we can

00:15:27,860 --> 00:15:33,680
control where it goes and we're building

00:15:30,710 --> 00:15:36,470
code uniquely from a repo so if we want

00:15:33,680 --> 00:15:38,000
to change this using our get or if we

00:15:36,470 --> 00:15:39,680
want to push changes to this on github

00:15:38,000 --> 00:15:41,920
then they'll be picked up by our build

00:15:39,680 --> 00:15:44,450
and they'll be automatically put in

00:15:41,920 --> 00:15:47,090
let's do one last very simple thing to

00:15:44,450 --> 00:15:50,680
demonstrate how you could use Jenkins in

00:15:47,090 --> 00:15:53,780
a sort of generic way and let's add a

00:15:50,680 --> 00:15:55,190
version parameter here so jobs can take

00:15:53,780 --> 00:15:57,830
parameters before their hand and

00:15:55,190 --> 00:15:59,690
parameters are pretty much just

00:15:57,830 --> 00:16:03,050
variables that you have access to inside

00:15:59,690 --> 00:16:07,220
the job so we can create a string

00:16:03,050 --> 00:16:10,610
parameter here and call it version the

00:16:07,220 --> 00:16:12,680
default value which going to say XXX and

00:16:10,610 --> 00:16:19,690
for the description we're going to say a

00:16:12,680 --> 00:16:26,290
version number that looks like 1 dot 0 0

00:16:19,690 --> 00:16:30,740
for 2 dot 27 it's a very simple

00:16:26,290 --> 00:16:32,900
versioning system and the way that we

00:16:30,740 --> 00:16:35,240
would get our jar to include this

00:16:32,900 --> 00:16:38,870
version would be very simple we just do

00:16:35,240 --> 00:16:43,490
a hyphen and now we know that will have

00:16:38,870 --> 00:16:45,470
access to the version variable so we

00:16:43,490 --> 00:16:48,740
just do this and what will happen is

00:16:45,470 --> 00:16:51,920
everything else will run normally but

00:16:48,740 --> 00:16:53,930
when you're jarring up your archive or

00:16:51,920 --> 00:16:55,580
when you're creating your archive it

00:16:53,930 --> 00:17:01,220
will add this version number before the

00:16:55,580 --> 00:17:02,240
dot jar so i can hit save now when i try

00:17:01,220 --> 00:17:05,959
to build it's going to ask me for

00:17:02,240 --> 00:17:10,780
parameters i'll say i'm creating one

00:17:05,959 --> 00:17:10,780
point 01 here and do it builds

00:17:13,100 --> 00:17:24,140
it runs it doesn't complain if i go to

00:17:17,010 --> 00:17:26,910
my temp ll piped into a grip for hello

00:17:24,140 --> 00:17:34,429
see there's hello world's printer 1

00:17:26,910 --> 00:17:34,429
point 0 1 run it hello f sauce

00:17:35,610 --> 00:17:39,750
so that's a very simple job that can be

00:17:37,650 --> 00:17:42,660
created very quickly let's look at

00:17:39,750 --> 00:17:44,730
something a little more exciting so I've

00:17:42,660 --> 00:17:49,140
got a very simple spring app that I've

00:17:44,730 --> 00:17:50,730
built and it runs in maven this thing

00:17:49,140 --> 00:17:51,720
was failing circa five minutes ago

00:17:50,730 --> 00:17:56,750
because I couldn't get my internet

00:17:51,720 --> 00:17:58,860
working but give it a shot in a second

00:17:56,750 --> 00:18:00,929
so I don't know if anyone here knows

00:17:58,860 --> 00:18:04,970
maven but it's basically a build system

00:18:00,929 --> 00:18:06,809
for java and it's very simple to define

00:18:04,970 --> 00:18:08,490
customizations for how it should build

00:18:06,809 --> 00:18:13,620
things and to define dependencies for

00:18:08,490 --> 00:18:16,470
what your builds require so just

00:18:13,620 --> 00:18:18,660
starting off of course provided a repo

00:18:16,470 --> 00:18:20,549
URL if you want to see that repo it's

00:18:18,660 --> 00:18:22,799
just right here so it's my spring app

00:18:20,549 --> 00:18:25,020
and I'll i would go in and show you the

00:18:22,799 --> 00:18:26,940
code but it's it's very deep it's

00:18:25,020 --> 00:18:30,559
enterprise-d so it's really not worth

00:18:26,940 --> 00:18:30,559
the time to show you a hello world call

00:18:31,790 --> 00:18:38,429
so I've got the repo and now down to the

00:18:36,570 --> 00:18:40,080
build steps so this is a step you guys

00:18:38,429 --> 00:18:43,470
have never seen before and it's called

00:18:40,080 --> 00:18:45,330
invoke top level maven targets it's

00:18:43,470 --> 00:18:48,299
basically the equivalent to doing

00:18:45,330 --> 00:18:50,429
execute shell with maven and passing a

00:18:48,299 --> 00:18:53,549
series of parameters but it gives you

00:18:50,429 --> 00:18:56,130
this very nifty UI for controlling all

00:18:53,549 --> 00:18:58,500
the properties of it and it provides a

00:18:56,130 --> 00:18:59,910
much better errors and sort of much

00:18:58,500 --> 00:19:03,929
better feedback in terms of what's

00:18:59,910 --> 00:19:05,309
happening on the maven side and as you

00:19:03,929 --> 00:19:08,549
can see I just tell it where my pom.xml

00:19:05,309 --> 00:19:10,590
is or the maven specific file and I tell

00:19:08,549 --> 00:19:13,320
it what goals I want to do so in this

00:19:10,590 --> 00:19:16,640
case I want it to spring booter to build

00:19:13,320 --> 00:19:19,320
the jar for my spring application and

00:19:16,640 --> 00:19:22,740
then right after that I do something

00:19:19,320 --> 00:19:29,960
sort of weird I copy the built jar to

00:19:22,740 --> 00:19:29,960
Jenkins home user contents so

00:19:31,460 --> 00:19:37,940
if I just run this it's pretty simple

00:19:42,380 --> 00:19:50,660
Oh looks like it's not giving up check

00:19:47,330 --> 00:19:53,210
out the output for this builds there we

00:19:50,660 --> 00:19:58,550
go cool so it was able to connect to

00:19:53,210 --> 00:20:02,150
github pull our code and do a successful

00:19:58,550 --> 00:20:04,670
compile so this on its own doesn't

00:20:02,150 --> 00:20:06,620
really do much but we can look at a more

00:20:04,670 --> 00:20:09,830
complicated deploy example and show you

00:20:06,620 --> 00:20:13,010
how this might be useful another thing

00:20:09,830 --> 00:20:16,670
to note is I've setup Jenkins on a vm on

00:20:13,010 --> 00:20:19,610
this local laptop and I've installed it

00:20:16,670 --> 00:20:22,580
as a slave so you can see here there's

00:20:19,610 --> 00:20:24,470
master which is my main up onto the

00:20:22,580 --> 00:20:26,960
laptop what you're seeing now then you

00:20:24,470 --> 00:20:28,550
can see local a bun to vm and like i

00:20:26,960 --> 00:20:30,710
said that's just a slave it's a vm

00:20:28,550 --> 00:20:34,700
installed on my machine that jenkins can

00:20:30,710 --> 00:20:36,950
access and control that's important to

00:20:34,700 --> 00:20:40,550
note because i limit where this

00:20:36,950 --> 00:20:43,430
deployment project can run i say

00:20:40,550 --> 00:20:45,050
specifically only run it on my vm so

00:20:43,430 --> 00:20:46,820
when i deploy I never want to deploy to

00:20:45,050 --> 00:20:49,190
my master this would for example

00:20:46,820 --> 00:20:50,930
represent a case where you only want to

00:20:49,190 --> 00:20:52,400
build on your master or you could you

00:20:50,930 --> 00:20:53,600
could represent an opposite case where

00:20:52,400 --> 00:20:55,940
you only want to build on your slaves

00:20:53,600 --> 00:20:58,160
and deployed your master but for the

00:20:55,940 --> 00:21:00,080
most part it's a it's not suggested to

00:20:58,160 --> 00:21:01,610
allow anyone to control the master or to

00:21:00,080 --> 00:21:03,320
really do a lot of projects on it

00:21:01,610 --> 00:21:06,470
because it controls your whole Jenkins

00:21:03,320 --> 00:21:07,670
configuration so for source code

00:21:06,470 --> 00:21:09,200
management nothing because I'm not

00:21:07,670 --> 00:21:12,290
really doing anything with source code

00:21:09,200 --> 00:21:13,760
and in the build environment you'll see

00:21:12,290 --> 00:21:15,650
that there's one step here called copy

00:21:13,760 --> 00:21:18,830
files into the jobs workspace before

00:21:15,650 --> 00:21:22,130
building this is a remnant of the copy

00:21:18,830 --> 00:21:23,120
artifacts plugin it's basically what

00:21:22,130 --> 00:21:24,770
it's going to do is it's going to look

00:21:23,120 --> 00:21:26,420
on the master and look in the User

00:21:24,770 --> 00:21:28,880
Content folder on the master for any

00:21:26,420 --> 00:21:30,890
files and I can tell it to copy a

00:21:28,880 --> 00:21:32,240
specific file into the workspace for

00:21:30,890 --> 00:21:34,460
this project which is going to be

00:21:32,240 --> 00:21:36,200
running on the slave the key thing to

00:21:34,460 --> 00:21:39,380
recognize you is that the slave has no

00:21:36,200 --> 00:21:40,850
access to the jar on its own it can't

00:21:39,380 --> 00:21:43,010
really see it because the master built

00:21:40,850 --> 00:21:45,530
it and the master kept it on its own

00:21:43,010 --> 00:21:47,510
drive with this plugin which was very

00:21:45,530 --> 00:21:49,610
quick to install and very sort of simple

00:21:47,510 --> 00:21:51,620
to understand and use does is it copies

00:21:49,610 --> 00:21:53,350
things from the master over to this

00:21:51,620 --> 00:21:56,919
builds before I run it

00:21:53,350 --> 00:22:04,419
and so in this simple example all I do

00:21:56,919 --> 00:22:13,480
is copy the jar over and right so I do

00:22:04,419 --> 00:22:15,520
build now it runs and as you can see it

00:22:13,480 --> 00:22:17,770
prints out hello f sauce followed by a

00:22:15,520 --> 00:22:19,720
bunch of spring stuff by the way Michael

00:22:17,770 --> 00:22:23,309
thanks for taking my ass keyword art

00:22:19,720 --> 00:22:28,929
idea I thought I was pretty unique but

00:22:23,309 --> 00:22:33,010
apparently not um okay so let's let's do

00:22:28,929 --> 00:22:37,690
on one last sort of fun thing here say I

00:22:33,010 --> 00:22:40,960
wants to have a builds sometimes deploy

00:22:37,690 --> 00:22:42,520
at the same time but not always a very

00:22:40,960 --> 00:22:45,299
simple way I could accomplish this

00:22:42,520 --> 00:22:49,020
that's sort of very easy to understand

00:22:45,299 --> 00:22:51,100
it's not a parameter to my first project

00:22:49,020 --> 00:22:52,720
so there's lots of different kinds of

00:22:51,100 --> 00:22:55,360
parameters and the one I'm going to be

00:22:52,720 --> 00:22:58,570
using now is a boolean parameter so

00:22:55,360 --> 00:23:03,730
boolean just means true or false here I

00:22:58,570 --> 00:23:04,960
can say a deploy after builds default

00:23:03,730 --> 00:23:06,610
value is going to be false because I

00:23:04,960 --> 00:23:08,200
don't normally want to deploy after I

00:23:06,610 --> 00:23:10,630
build or I might want to just test it

00:23:08,200 --> 00:23:15,220
normally and for the description i would

00:23:10,630 --> 00:23:22,360
say whether or not to deploy to the

00:23:15,220 --> 00:23:26,470
local vm after building then i can go

00:23:22,360 --> 00:23:29,830
down to my build steps and i can add one

00:23:26,470 --> 00:23:32,020
additional step trigger or no sorry

00:23:29,830 --> 00:23:34,510
conditional step so a conditional step

00:23:32,020 --> 00:23:36,100
goes off depending on a series of

00:23:34,510 --> 00:23:37,990
conditions this time we're going to tell

00:23:36,100 --> 00:23:39,309
it we have a boolean one and we're just

00:23:37,990 --> 00:23:41,909
going to give it the parameter we have

00:23:39,309 --> 00:23:41,909
directly

00:23:44,310 --> 00:23:49,630
so in very much the same way i could use

00:23:47,320 --> 00:23:51,490
dollars variable name to access a

00:23:49,630 --> 00:23:56,980
parameter in the script i can do the

00:23:51,490 --> 00:24:01,060
exact same thing here and then I tell it

00:23:56,980 --> 00:24:02,620
what to do given this option so I'll

00:24:01,060 --> 00:24:05,050
just say trigger a call in another

00:24:02,620 --> 00:24:09,870
project and the project i want to call

00:24:05,050 --> 00:24:16,470
is my more complicated deploy example

00:24:09,870 --> 00:24:18,250
hit apply and save so now if i run it

00:24:16,470 --> 00:24:25,360
again it's going to ask me for

00:24:18,250 --> 00:24:27,340
parameters if i click it there we go so

00:24:25,360 --> 00:24:30,010
it's going to ask me for parameters and

00:24:27,340 --> 00:24:34,140
i can tell it yes i want to deploy after

00:24:30,010 --> 00:24:34,140
my build when I had a build

00:24:40,000 --> 00:24:44,530
it's going to run the raven the raven

00:24:42,130 --> 00:24:46,450
the maven build and then it's going to

00:24:44,530 --> 00:24:51,520
call my other projects and if we click

00:24:46,450 --> 00:24:54,240
here you can see something's in the

00:24:51,520 --> 00:24:54,240
quiet period

00:25:01,130 --> 00:25:07,520
and it's done check out the console

00:25:04,880 --> 00:25:09,560
output for this guy let me see how the

00:25:07,520 --> 00:25:11,570
left sauce again and oh yeah you can see

00:25:09,560 --> 00:25:13,340
that it's a building on the local a

00:25:11,570 --> 00:25:18,860
bunch of young because it says building

00:25:13,340 --> 00:25:23,440
remotely on a local Ubuntu VM okay so

00:25:18,860 --> 00:25:25,750
that is my demo that's a pretty simple

00:25:23,440 --> 00:25:28,010
explanation of how you can get through

00:25:25,750 --> 00:25:29,710
building and deploying with Jenkins and

00:25:28,010 --> 00:25:34,010
sort of some fun things you can do with

00:25:29,710 --> 00:25:35,660
parameterization and triggers now given

00:25:34,010 --> 00:25:37,670
all that there's a series of killer

00:25:35,660 --> 00:25:38,780
plugins that you're absolutely going to

00:25:37,670 --> 00:25:40,190
need and you're definitely going to want

00:25:38,780 --> 00:25:44,390
to know about before you go out into the

00:25:40,190 --> 00:25:46,040
wild and start playing so the first one

00:25:44,390 --> 00:25:48,380
would be that I would suggest to be the

00:25:46,040 --> 00:25:50,300
primer eyes job triggers plugin and that

00:25:48,380 --> 00:25:53,810
was the plugin that let me set up that

00:25:50,300 --> 00:25:55,400
optional deploy after build step and

00:25:53,810 --> 00:25:58,280
what it does is it lets you make jobs

00:25:55,400 --> 00:26:00,740
composed composed of build steps of

00:25:58,280 --> 00:26:03,440
other jobs now normally this sort of

00:26:00,740 --> 00:26:05,000
goes against some some Jenkins aspects

00:26:03,440 --> 00:26:07,160
because you meant to build workflows or

00:26:05,000 --> 00:26:08,690
sort of chain projects in a way such

00:26:07,160 --> 00:26:11,180
that they implicitly call the next ones

00:26:08,690 --> 00:26:21,740
that are necessary on their line but I

00:26:11,180 --> 00:26:23,960
find Jenkins is pretty unusable steps

00:26:21,740 --> 00:26:26,300
this way then it's an easy way to allow

00:26:23,960 --> 00:26:28,300
for the elimination of repetition and to

00:26:26,300 --> 00:26:30,350
encapsulate all of your functionality

00:26:28,300 --> 00:26:32,480
and it's just a lot of fun to use you

00:26:30,350 --> 00:26:34,280
can take these complicated workflows

00:26:32,480 --> 00:26:35,930
where you have to run a test but really

00:26:34,280 --> 00:26:38,450
it's going across different nodes and

00:26:35,930 --> 00:26:41,000
needs to do cleanup before and after and

00:26:38,450 --> 00:26:45,920
show it just like a simple list that you

00:26:41,000 --> 00:26:47,870
can see in a major project the next to

00:26:45,920 --> 00:26:50,510
be another one that I demonstrated the

00:26:47,870 --> 00:26:53,150
copy two slaves plugin this one's really

00:26:50,510 --> 00:26:54,830
easy to use and just incredibly powerful

00:26:53,150 --> 00:26:56,540
if you want to move logs around or you

00:26:54,830 --> 00:26:59,030
need to move build artifacts so you need

00:26:56,540 --> 00:27:00,650
to get just something from your slaves

00:26:59,030 --> 00:27:02,750
to your master or from your master to

00:27:00,650 --> 00:27:06,620
your slaves it's very easy to use and

00:27:02,750 --> 00:27:09,110
very essential another one that I use

00:27:06,620 --> 00:27:10,940
frequently at least at next J is the

00:27:09,110 --> 00:27:12,920
locks and latches plugin and it's

00:27:10,940 --> 00:27:13,929
incredibly good if you have concurrent

00:27:12,920 --> 00:27:15,879
jobs that

00:27:13,929 --> 00:27:18,369
absolutely cannot run at the same time

00:27:15,879 --> 00:27:21,909
you can set up your schedules so that

00:27:18,369 --> 00:27:23,169
they automatically don't do that but say

00:27:21,909 --> 00:27:25,299
you're not quite sure about it or your

00:27:23,169 --> 00:27:27,100
little fuzzy or say if these two

00:27:25,299 --> 00:27:28,419
database operations run at once your

00:27:27,100 --> 00:27:30,129
data sets going to be ruined and it's

00:27:28,419 --> 00:27:32,559
going to take you 40 hours to regenerate

00:27:30,129 --> 00:27:34,600
that then it's good just have a double

00:27:32,559 --> 00:27:37,690
back and say this is my database operate

00:27:34,600 --> 00:27:39,519
my database operations lock while

00:27:37,690 --> 00:27:43,149
anything is running that's on this lock

00:27:39,519 --> 00:27:44,799
another one cannot start so you can't

00:27:43,149 --> 00:27:46,360
have to clean up operations start at

00:27:44,799 --> 00:27:48,009
once or have a clean up operation go at

00:27:46,360 --> 00:27:52,179
the same time as as some sort of

00:27:48,009 --> 00:27:54,279
creational operation another one that I

00:27:52,179 --> 00:27:56,590
use a lot is the parameterize scheduler

00:27:54,279 --> 00:27:59,919
so it lets you create schedules for your

00:27:56,590 --> 00:28:02,200
Jenkins jobs that except parameters when

00:27:59,919 --> 00:28:05,080
calling them so the original scheduler

00:28:02,200 --> 00:28:06,940
plugin only takes a time sort of to

00:28:05,080 --> 00:28:09,730
start it but this lets you put in

00:28:06,940 --> 00:28:12,399
parameters so you can control it and I

00:28:09,730 --> 00:28:15,100
know the syntax is really ugly that's

00:28:12,399 --> 00:28:17,769
just an artifact of it being cron syntax

00:28:15,100 --> 00:28:19,570
so you've got to use your Kron notation

00:28:17,769 --> 00:28:22,690
at the beginning and then sort of define

00:28:19,570 --> 00:28:25,149
parameters after that % and it doesn't

00:28:22,690 --> 00:28:27,879
really work very well for individual

00:28:25,149 --> 00:28:29,529
runs but wait and a Jenkins pro tip if

00:28:27,879 --> 00:28:31,990
you need something to run on only one

00:28:29,529 --> 00:28:34,179
day you can schedule it for just one day

00:28:31,990 --> 00:28:37,860
of the year and pray that you remember

00:28:34,179 --> 00:28:40,899
before that day next year to delete it

00:28:37,860 --> 00:28:42,909
and then the last like absolutely

00:28:40,899 --> 00:28:45,369
mission critical plugin is the green

00:28:42,909 --> 00:28:48,249
balls plugin you didn't see this in my

00:28:45,369 --> 00:28:50,919
demo but by default jenkins comes with

00:28:48,249 --> 00:28:52,779
blue balls for success so when something

00:28:50,919 --> 00:28:56,259
runs right is blue no that's that's

00:28:52,779 --> 00:28:58,210
that's just wrong like I can't take that

00:28:56,259 --> 00:29:00,879
it needs to be green the story here is

00:28:58,210 --> 00:29:04,149
the the inventor is Japanese and in

00:29:00,879 --> 00:29:06,909
Japan their original like old-fashioned

00:29:04,149 --> 00:29:08,499
street lights use blue and so they

00:29:06,909 --> 00:29:09,610
eventually changed the blue to green

00:29:08,499 --> 00:29:11,080
because nobody could see it from a

00:29:09,610 --> 00:29:13,389
distance but they sort of it was like a

00:29:11,080 --> 00:29:16,330
vestigial they kept calling it blue for

00:29:13,389 --> 00:29:17,919
go but that just doesn't fly here and I

00:29:16,330 --> 00:29:20,379
can't take it blue to me means like

00:29:17,919 --> 00:29:23,320
medium like didn't break but didn't go

00:29:20,379 --> 00:29:24,759
perfectly okay so now that we've talked

00:29:23,320 --> 00:29:26,060
about all that let's talk about some

00:29:24,759 --> 00:29:28,670
recommendations invest

00:29:26,060 --> 00:29:30,140
misses the first 5 i'm going to talk

00:29:28,670 --> 00:29:31,700
about our straight from the jenkins

00:29:30,140 --> 00:29:33,260
website and I sort of went through them

00:29:31,700 --> 00:29:35,090
and pruned for the ones that I think are

00:29:33,260 --> 00:29:37,100
best for beginners and for a mass

00:29:35,090 --> 00:29:38,720
audience so it's like these are the ones

00:29:37,100 --> 00:29:40,790
that are just if everyone knew them or

00:29:38,720 --> 00:29:44,030
everyone remembered them and use them I

00:29:40,790 --> 00:29:45,680
think we'd all be fine so the number one

00:29:44,030 --> 00:29:47,240
that I would say is to always secure

00:29:45,680 --> 00:29:49,640
Jenkins if you're going to be using

00:29:47,240 --> 00:29:51,440
Jenkins don't just let anyone connect

00:29:49,640 --> 00:29:53,600
don't allow anonymous access don't let

00:29:51,440 --> 00:29:55,220
anyone configure whatever they want make

00:29:53,600 --> 00:29:56,870
sure anyone who needs to use it has an

00:29:55,220 --> 00:29:59,450
account make sure that anonymous users

00:29:56,870 --> 00:30:01,580
can at best view console output and make

00:29:59,450 --> 00:30:04,970
sure that the users that you sign in and

00:30:01,580 --> 00:30:08,000
sign up have like really well defined

00:30:04,970 --> 00:30:10,250
groups and really well defines controls

00:30:08,000 --> 00:30:12,440
in terms of granularity just make sure

00:30:10,250 --> 00:30:16,670
everyone can do pretty much only what

00:30:12,440 --> 00:30:19,160
they need to and nothing more next one

00:30:16,670 --> 00:30:20,570
this is one that I'm guilty of and I

00:30:19,160 --> 00:30:22,250
find it's something that everyone would

00:30:20,570 --> 00:30:24,200
say they should do and everyone says is

00:30:22,250 --> 00:30:27,080
like you have to do it but then nobody

00:30:24,200 --> 00:30:28,730
remembers and everyone forgets and so

00:30:27,080 --> 00:30:31,220
it's like it it's just better to avoid

00:30:28,730 --> 00:30:34,340
this sort of a headache then to have a

00:30:31,220 --> 00:30:35,930
butt like two weeks of automation just

00:30:34,340 --> 00:30:38,420
go down the drain and have another two

00:30:35,930 --> 00:30:40,160
weeks of work to get it to go and Annie

00:30:38,420 --> 00:30:42,500
a neat thing here is you can actually

00:30:40,160 --> 00:30:45,080
have Jenkins automate the backup process

00:30:42,500 --> 00:30:50,090
of Jenkins itself so you can just make a

00:30:45,080 --> 00:30:51,290
job that will do that for you the third

00:30:50,090 --> 00:30:53,210
would be to take steps to ensure

00:30:51,290 --> 00:30:56,540
failures are reported as soon as

00:30:53,210 --> 00:30:58,220
possible so when I started off I didn't

00:30:56,540 --> 00:31:01,640
set up any sort of email notifications

00:30:58,220 --> 00:31:04,790
or any sort of any sort of notifications

00:31:01,640 --> 00:31:06,950
at all so when a job or whether a job

00:31:04,790 --> 00:31:08,540
went good or not I wouldn't know I just

00:31:06,950 --> 00:31:10,790
have to like monitor my Jenkins and

00:31:08,540 --> 00:31:12,560
watch it constantly and that works in

00:31:10,790 --> 00:31:14,030
development when you know that nothing

00:31:12,560 --> 00:31:16,100
is really meant to work and that

00:31:14,030 --> 00:31:18,260
everything's sort of in a half-built

00:31:16,100 --> 00:31:20,030
state but it doesn't really work when

00:31:18,260 --> 00:31:22,070
you depend on it and you need a lot of

00:31:20,030 --> 00:31:24,530
testing or a lot of a lot of building

00:31:22,070 --> 00:31:27,260
done quickly so this lets you figure out

00:31:24,530 --> 00:31:29,830
once something's broken or even more

00:31:27,260 --> 00:31:32,690
importantly I use this to figure out

00:31:29,830 --> 00:31:34,670
when when I was in a deadly loop because

00:31:32,690 --> 00:31:37,280
we got about 700 emails in about two

00:31:34,670 --> 00:31:38,570
minutes or something so it's it's

00:31:37,280 --> 00:31:40,190
important to do this and it helps

00:31:38,570 --> 00:31:41,960
it's it's worth it it's very quick to

00:31:40,190 --> 00:31:43,549
set up email functionality I shot myself

00:31:41,960 --> 00:31:45,340
in the foot by not doing it because it

00:31:43,549 --> 00:31:47,120
could have taken two minutes to get as

00:31:45,340 --> 00:31:52,759
like successful and unsuccessful

00:31:47,120 --> 00:31:54,230
messages the second last one is to set

00:31:52,759 --> 00:31:56,269
up Jenkins on the petition that as the

00:31:54,230 --> 00:31:57,889
most free disk space this isn't

00:31:56,269 --> 00:32:00,139
absolutely necessary but it's one of

00:31:57,889 --> 00:32:02,120
those just good practices it's better to

00:32:00,139 --> 00:32:04,159
over allocate and under allocate in

00:32:02,120 --> 00:32:06,230
terms of this sort of project in the

00:32:04,159 --> 00:32:07,880
sort of system so this is just something

00:32:06,230 --> 00:32:09,409
to keep on your mind maybe you could

00:32:07,880 --> 00:32:11,809
separate the workspaces for your

00:32:09,409 --> 00:32:14,659
projects onto a separate partition than

00:32:11,809 --> 00:32:17,389
the Jenkins installation itself lots of

00:32:14,659 --> 00:32:19,820
choices and the last one this one's a

00:32:17,389 --> 00:32:21,259
lot like backup it's sort of obvious

00:32:19,820 --> 00:32:22,879
when you say it but no one really thinks

00:32:21,259 --> 00:32:24,889
of it and that's what you should write

00:32:22,879 --> 00:32:26,870
jobs for your maintenance tasks such as

00:32:24,889 --> 00:32:29,419
cleaning up your database cleaning up

00:32:26,870 --> 00:32:31,490
your logs making your environment

00:32:29,419 --> 00:32:33,350
clinical so getting it prepared the way

00:32:31,490 --> 00:32:35,600
it's meant to by restarting services and

00:32:33,350 --> 00:32:36,799
making sure everything is fresh this is

00:32:35,600 --> 00:32:38,690
something that's really valuable that

00:32:36,799 --> 00:32:41,450
most people forget because it's they

00:32:38,690 --> 00:32:46,700
sort of put it into a specific peg for

00:32:41,450 --> 00:32:48,009
what Jenkins is meant to do these are

00:32:46,700 --> 00:32:51,139
just some personal recommendations

00:32:48,009 --> 00:32:52,549
caveat these are things that I notice

00:32:51,139 --> 00:32:55,009
I've been burnt by when I forget to do

00:32:52,549 --> 00:32:57,590
them the first one is to enable

00:32:55,009 --> 00:32:58,730
timestamps console logging by default

00:32:57,590 --> 00:33:01,009
with Jenkins doesn't come with

00:32:58,730 --> 00:33:02,720
timestamps they assume your tool will be

00:33:01,009 --> 00:33:05,149
outputting the time stance that you want

00:33:02,720 --> 00:33:06,740
that you care about I've had some issues

00:33:05,149 --> 00:33:08,330
with that and time stands can be really

00:33:06,740 --> 00:33:09,830
valuable because you can tell it to show

00:33:08,330 --> 00:33:12,259
either the exact time that had happened

00:33:09,830 --> 00:33:15,679
or the relative time that it got the

00:33:12,259 --> 00:33:18,110
console output inside the inside the

00:33:15,679 --> 00:33:19,399
context of the run so you can see like

00:33:18,110 --> 00:33:21,230
oh this was five minutes into the run

00:33:19,399 --> 00:33:24,919
this was ten minutes into the run so on

00:33:21,230 --> 00:33:27,019
and so forth another would be to make

00:33:24,919 --> 00:33:30,529
sure to click the option to delete your

00:33:27,019 --> 00:33:32,269
workspace before builds this is a great

00:33:30,529 --> 00:33:34,190
sanity check and it just really lets you

00:33:32,269 --> 00:33:36,470
make sure that whatever your building is

00:33:34,190 --> 00:33:39,019
exactly what you want and it's cleanly

00:33:36,470 --> 00:33:41,809
what you want and it doesn't include any

00:33:39,019 --> 00:33:44,779
old artifacts or any old code that will

00:33:41,809 --> 00:33:46,730
influence your output and then my last

00:33:44,779 --> 00:33:48,980
one it's just always use locks just

00:33:46,730 --> 00:33:50,480
always use locks if you have two

00:33:48,980 --> 00:33:51,270
operations that cannot happen at the

00:33:50,480 --> 00:33:52,380
same time

00:33:51,270 --> 00:33:53,970
I don't care if you're a hundred percent

00:33:52,380 --> 00:33:56,160
confident that there's no way they could

00:33:53,970 --> 00:34:01,110
be triggered at the same time just make

00:33:56,160 --> 00:34:04,530
sure that they don't okay for some

00:34:01,110 --> 00:34:06,440
cautionary tales the worst practices I'm

00:34:04,530 --> 00:34:09,060
going to lead this section with a quote

00:34:06,440 --> 00:34:11,190
if you automate a mess you get an

00:34:09,060 --> 00:34:12,870
automated mess this is said by Rod

00:34:11,190 --> 00:34:15,659
Michael who's a director at rockwell

00:34:12,870 --> 00:34:17,909
automation and Bill Gates said something

00:34:15,659 --> 00:34:19,740
to a similar tune it's it's very true

00:34:17,909 --> 00:34:22,110
and it's it's sort of what this area is

00:34:19,740 --> 00:34:23,790
all about and by the way these are just

00:34:22,110 --> 00:34:25,740
based on my personal failings where I've

00:34:23,790 --> 00:34:27,630
made huge mistakes this isn't based on

00:34:25,740 --> 00:34:30,210
some list of like the top 20 worst

00:34:27,630 --> 00:34:32,159
things you can do with Jenkins because

00:34:30,210 --> 00:34:34,169
for the most part you won't be able to

00:34:32,159 --> 00:34:35,610
find a top list of the 20 worst things

00:34:34,169 --> 00:34:37,530
you can do with Jenkins just no one

00:34:35,610 --> 00:34:40,830
seems to talk about it so let's talk

00:34:37,530 --> 00:34:43,230
about it now I would suggest avoiding

00:34:40,830 --> 00:34:46,080
overly long jobs they can be very

00:34:43,230 --> 00:34:49,320
unwieldly very hard to work with if you

00:34:46,080 --> 00:34:50,880
make a change you won't necessarily see

00:34:49,320 --> 00:34:53,159
that change or understand what it does

00:34:50,880 --> 00:34:55,230
when you go back to it and if you forget

00:34:53,159 --> 00:34:58,320
to save or something happens it can be

00:34:55,230 --> 00:34:59,700
really frustrating to go back and clean

00:34:58,320 --> 00:35:02,460
up the job and get it back to the state

00:34:59,700 --> 00:35:05,190
it's supposed to be in usually these

00:35:02,460 --> 00:35:06,300
unwieldly jobs point towards poor

00:35:05,190 --> 00:35:09,390
factoring of the steps in your

00:35:06,300 --> 00:35:12,720
automation so you you didn't make small

00:35:09,390 --> 00:35:15,420
enough atomic steps it can also point to

00:35:12,720 --> 00:35:17,060
using Jenkins as a crutch so Jenkins is

00:35:15,420 --> 00:35:19,620
very versatile and can do lots of things

00:35:17,060 --> 00:35:22,080
that doesn't mean you should build all

00:35:19,620 --> 00:35:23,730
of your processes into Jenkins using

00:35:22,080 --> 00:35:26,040
only Jenkins there might be a better

00:35:23,730 --> 00:35:27,900
tool for example maven if you have a

00:35:26,040 --> 00:35:29,820
complicated Java build maybe it'd be

00:35:27,900 --> 00:35:31,830
worth your time to get it running on

00:35:29,820 --> 00:35:34,320
maven and then just wrap that maven call

00:35:31,830 --> 00:35:36,480
in Jenkins and get all the same

00:35:34,320 --> 00:35:39,960
monitoring we have a much more robust to

00:35:36,480 --> 00:35:41,790
build specific tool to depend on and

00:35:39,960 --> 00:35:44,010
then I would say if you're not using

00:35:41,790 --> 00:35:45,690
Jenkins plugins or functionality you're

00:35:44,010 --> 00:35:47,610
sort of trying to do it your own or

00:35:45,690 --> 00:35:51,180
build your own hack that get something

00:35:47,610 --> 00:35:54,510
done that's often something that can

00:35:51,180 --> 00:35:56,630
cause really large projects and a two

00:35:54,510 --> 00:35:58,860
simple ways you can avoid this just by

00:35:56,630 --> 00:36:01,170
factoring your steps into smaller jobs

00:35:58,860 --> 00:36:04,080
making sure each piece is very atomic

00:36:01,170 --> 00:36:04,950
and does only what it needs to and then

00:36:04,080 --> 00:36:07,020
another way as I said

00:36:04,950 --> 00:36:08,460
earlier is to wrap a tool that might be

00:36:07,020 --> 00:36:13,560
more equipped to the job you're trying

00:36:08,460 --> 00:36:15,869
to do in Jenkins my next biggest

00:36:13,560 --> 00:36:19,339
cautionary tale would be to not reinvent

00:36:15,869 --> 00:36:21,950
the wheel always google first everyone

00:36:19,339 --> 00:36:25,050
like this is Jenkins it's got a huge

00:36:21,950 --> 00:36:27,540
community of developers and of users and

00:36:25,050 --> 00:36:28,829
there's just all these plugins so if you

00:36:27,540 --> 00:36:30,570
have a problem there's not a plug-in

00:36:28,829 --> 00:36:32,460
that already solves it there's probably

00:36:30,570 --> 00:36:34,560
someone else that's done something very

00:36:32,460 --> 00:36:36,690
similar if not exactly the same to what

00:36:34,560 --> 00:36:38,700
you need on the internet who asked

00:36:36,690 --> 00:36:41,970
questions on stack overflow God answers

00:36:38,700 --> 00:36:43,980
and got it all put together another

00:36:41,970 --> 00:36:46,470
thing I would say would be to use same

00:36:43,980 --> 00:36:48,900
standards and your job naming you can

00:36:46,470 --> 00:36:51,210
have lots of builds and when you sort of

00:36:48,900 --> 00:36:52,530
get into the automation world and you

00:36:51,210 --> 00:36:53,490
get into Jenkins it's sort of like a bug

00:36:52,530 --> 00:36:56,970
you start wanting to automate everything

00:36:53,490 --> 00:36:59,280
and get everything on on like push

00:36:56,970 --> 00:37:00,900
button control and so you end up

00:36:59,280 --> 00:37:03,240
creating all these jobs all at once and

00:37:00,900 --> 00:37:06,660
you lab bring up as an example bring up

00:37:03,240 --> 00:37:08,579
versus turn on versus start up this is

00:37:06,660 --> 00:37:09,930
just arbitrary they're all different for

00:37:08,579 --> 00:37:12,210
no reason and it's going to make it very

00:37:09,930 --> 00:37:14,670
hard to read and understand your jobs so

00:37:12,210 --> 00:37:16,200
unless they have a reason unless there's

00:37:14,670 --> 00:37:18,420
a meaning between the three different

00:37:16,200 --> 00:37:21,390
terms just pick one and use it

00:37:18,420 --> 00:37:24,690
everywhere and also spaces can be the

00:37:21,390 --> 00:37:26,220
devil be very careful of spaces just in

00:37:24,690 --> 00:37:27,390
your titles in your descriptions and

00:37:26,220 --> 00:37:29,910
your parameters and anything you're

00:37:27,390 --> 00:37:32,970
going to be calling or expanding be

00:37:29,910 --> 00:37:34,710
careful with spaces and then also rename

00:37:32,970 --> 00:37:36,960
your jobs with care because sometimes

00:37:34,710 --> 00:37:38,670
your pipelines will be broken sometimes

00:37:36,960 --> 00:37:42,630
Jenkins can't refactor all of your jobs

00:37:38,670 --> 00:37:44,160
correctly or or just forget some and in

00:37:42,630 --> 00:37:45,750
those cases your builds will quickly

00:37:44,160 --> 00:37:48,480
stop working for reasons that you don't

00:37:45,750 --> 00:37:50,040
really understand until you look at the

00:37:48,480 --> 00:37:52,050
console and see that it's calling an old

00:37:50,040 --> 00:37:56,359
job name from four months ago that you

00:37:52,050 --> 00:37:56,359
haven't run in a couple a couple months

00:37:56,839 --> 00:38:01,290
okay Plus let's deal with some

00:37:58,920 --> 00:38:05,700
conclusions here the biggest one eat

00:38:01,290 --> 00:38:08,099
your apples news Jenkins okay so Jenkins

00:38:05,700 --> 00:38:11,220
is for automation it is a complex tool

00:38:08,099 --> 00:38:13,170
with many purposes and possibilities it

00:38:11,220 --> 00:38:14,670
can do a lot but its main purpose is to

00:38:13,170 --> 00:38:16,500
do what the humans in your system

00:38:14,670 --> 00:38:18,240
shouldn't be if you have an automated

00:38:16,500 --> 00:38:18,660
mess that doesn't mean it will get any

00:38:18,240 --> 00:38:20,730
better

00:38:18,660 --> 00:38:23,610
with Jenkins at the same rate if you've

00:38:20,730 --> 00:38:26,550
got a human doing a very very efficient

00:38:23,610 --> 00:38:28,050
process manually it's the same problem

00:38:26,550 --> 00:38:32,040
that's that's what Jenkins is there to

00:38:28,050 --> 00:38:33,930
solve it's not only for CI or building

00:38:32,040 --> 00:38:35,130
and testing but at the same rate it

00:38:33,930 --> 00:38:36,900
should never be used as a crutch for

00:38:35,130 --> 00:38:41,820
avoiding better processes that should be

00:38:36,900 --> 00:38:44,880
wrapped in it second Jenkins is a Swiss

00:38:41,820 --> 00:38:47,100
Army knife it is incredibly extensible

00:38:44,880 --> 00:38:48,870
it has a huge library of plugins and

00:38:47,100 --> 00:38:51,660
amazing community of developers and

00:38:48,870 --> 00:38:54,240
users and it plays nice with other

00:38:51,660 --> 00:38:55,770
frameworks due to this it's designed to

00:38:54,240 --> 00:38:57,990
be the glue that fits in between all

00:38:55,770 --> 00:39:02,510
your servers all your systems and gets

00:38:57,990 --> 00:39:05,070
your whole soft recycle on track and

00:39:02,510 --> 00:39:07,890
finally Jenkins can speed your work

00:39:05,070 --> 00:39:10,350
quickly it is very quick to learn

00:39:07,890 --> 00:39:12,540
Jenkins and to get your human beings

00:39:10,350 --> 00:39:15,330
back to doing human work and it provides

00:39:12,540 --> 00:39:19,350
robust modular interfaces for automating

00:39:15,330 --> 00:39:21,690
monitoring and controlling access to

00:39:19,350 --> 00:39:24,840
this work so it's very quick to pick up

00:39:21,690 --> 00:39:29,130
and very quick to get working for you

00:39:24,840 --> 00:39:30,960
and I'd like to leave with one last

00:39:29,130 --> 00:39:33,480
quote from Larry well the original

00:39:30,960 --> 00:39:36,170
author of pearl he says their group

00:39:33,480 --> 00:39:40,080
three great virtues of any programmer

00:39:36,170 --> 00:39:42,090
laziness and patience and hubris and I

00:39:40,080 --> 00:39:43,800
think with a little of all three anyone

00:39:42,090 --> 00:39:47,310
can use Jenkins in the way it's meant to

00:39:43,800 --> 00:39:49,550
and see serious value with it thanks

00:39:47,310 --> 00:39:49,550
everyone

00:39:50,970 --> 00:40:01,560
I should also mention next J my company

00:39:58,080 --> 00:40:03,410
is hiring if you're interested in seeing

00:40:01,560 --> 00:40:07,020
an opportunity at a fun java enterprise

00:40:03,410 --> 00:40:09,980
company give them a call and make sure

00:40:07,020 --> 00:40:14,250
that you say Justin flowers referred you

00:40:09,980 --> 00:40:17,310
ok I was ok put that out as well no not

00:40:14,250 --> 00:40:20,190
you not you sure unless they say Justin

00:40:17,310 --> 00:40:23,160
referred me yeah actually been a great

00:40:20,190 --> 00:40:25,560
employer for Seneca crime good grades

00:40:23,160 --> 00:40:27,840
button but yeah is he Oh grace yeah

00:40:25,560 --> 00:40:30,570
grace is still there yeah he's a manager

00:40:27,840 --> 00:40:33,540
now and he was the first correct me if

00:40:30,570 --> 00:40:36,960
I'm wrong danza she first VSD graduate

00:40:33,540 --> 00:40:39,090
is that yeah yeah graduate to work for

00:40:36,960 --> 00:40:40,350
for next day so that was about four or

00:40:39,090 --> 00:40:42,240
five years ago when you didn't love my

00:40:40,350 --> 00:40:44,700
video so lots of pave the path for me

00:40:42,240 --> 00:40:48,810
yeah that's what I did awesome so anyhow

00:40:44,700 --> 00:40:51,470
more about me yes it's about Q&A from

00:40:48,810 --> 00:40:57,540
what I understand so uh any questions

00:40:51,470 --> 00:40:59,940
questions uh Andrew um so in your demo

00:40:57,540 --> 00:41:03,090
you showed automating builds using

00:40:59,940 --> 00:41:06,060
schedules and by clicking buttons how

00:41:03,090 --> 00:41:09,770
easy is it to make it hook into a github

00:41:06,060 --> 00:41:12,750
repo to specifically got to a bill when

00:41:09,770 --> 00:41:14,370
changes are made to the repo so there's

00:41:12,750 --> 00:41:16,860
two ways you can approach that you can

00:41:14,370 --> 00:41:18,930
either schedule polling for a repo so

00:41:16,860 --> 00:41:21,960
like watch this repo every x amount of

00:41:18,930 --> 00:41:24,150
hours or minutes and get changes or you

00:41:21,960 --> 00:41:28,350
can set up what are called github hooks

00:41:24,150 --> 00:41:29,580
that will basically call an end point on

00:41:28,350 --> 00:41:32,370
your Jenkins server when there's a

00:41:29,580 --> 00:41:34,080
change to the source code and it will

00:41:32,370 --> 00:41:37,110
tell Jenkins hey there's been a change

00:41:34,080 --> 00:41:38,130
start this build pull this code I didn't

00:41:37,110 --> 00:41:39,900
demonstrate it here because that's a

00:41:38,130 --> 00:41:41,280
little more confusing and it's it's a

00:41:39,900 --> 00:41:43,380
lot more going into github and

00:41:41,280 --> 00:41:45,300
configuring like endpoints and settings

00:41:43,380 --> 00:41:47,400
there but there's like a million

00:41:45,300 --> 00:41:49,470
tutorials on it and anyone can really do

00:41:47,400 --> 00:41:50,960
it it's just it's sort of slow and not

00:41:49,470 --> 00:41:53,820
really worth it for a tutorial purposes

00:41:50,960 --> 00:41:56,760
but it's very simple to have it builds

00:41:53,820 --> 00:42:00,369
triggered on changes to code bases

00:41:56,760 --> 00:42:04,570
yeah shows so thing is those books

00:42:00,369 --> 00:42:07,330
better can they be kept private not

00:42:04,570 --> 00:42:09,640
positive but I believe so I'm not sure

00:42:07,330 --> 00:42:13,900
about access control in terms of the

00:42:09,640 --> 00:42:16,089
github hooks you could have your oxygen

00:42:13,900 --> 00:42:19,660
in the guitar before itself which could

00:42:16,089 --> 00:42:25,570
send it to your I think that is oh no

00:42:19,660 --> 00:42:27,580
it's not it's not sure you set up hooks

00:42:25,570 --> 00:42:29,980
for the the settings of your account and

00:42:27,580 --> 00:42:32,020
four different repos but all it does is

00:42:29,980 --> 00:42:43,300
in the settings for that repo it sends a

00:42:32,020 --> 00:42:45,190
request to your endpoint right your

00:42:43,300 --> 00:42:47,560
endpoint yes but you can add security

00:42:45,190 --> 00:42:54,700
for that you can have it to let not just

00:42:47,560 --> 00:42:56,890
anyone can ping your endpoint yep it's

00:42:54,700 --> 00:42:57,849
it like I would go through it but really

00:42:56,890 --> 00:43:00,430
you can just play around with your own

00:42:57,849 --> 00:43:01,810
when it comes to security sure your

00:43:00,430 --> 00:43:04,720
endpoint has to be accessible but you

00:43:01,810 --> 00:43:06,880
can make it so that only likes let only

00:43:04,720 --> 00:43:08,470
github is the one that can actually like

00:43:06,880 --> 00:43:13,869
talk to your thing or like at least

00:43:08,470 --> 00:43:16,710
validate with your thing okay cool sorry

00:43:13,869 --> 00:43:16,710
you've had your hand up

00:43:19,750 --> 00:43:27,520
mm-hmm yeah there's a series of it's

00:43:25,960 --> 00:43:30,700
called groovy scripts that allow you to

00:43:27,520 --> 00:43:32,110
basically call your jobs from what looks

00:43:30,700 --> 00:43:35,110
like a scripting language or like Java

00:43:32,110 --> 00:43:36,610
you can definitely do that I'm sort of a

00:43:35,110 --> 00:43:38,410
person my opinion is that you should

00:43:36,610 --> 00:43:40,300
probably keep your build and your

00:43:38,410 --> 00:43:42,190
processes out of Jenkins in terms of

00:43:40,300 --> 00:43:43,990
anything that's so complex that you

00:43:42,190 --> 00:43:45,970
would want to language around it so i

00:43:43,990 --> 00:43:47,980
would suggest maybe putting it into aunt

00:43:45,970 --> 00:43:49,630
or an ansible if you have that

00:43:47,980 --> 00:43:51,790
complicated of a workflow but it does

00:43:49,630 --> 00:43:53,800
provide a very nifty system for

00:43:51,790 --> 00:43:55,780
controlling Jenkins itself through the

00:43:53,800 --> 00:44:00,580
source code and that's the groovy build

00:43:55,780 --> 00:44:12,370
scripts if you're interested any other

00:44:00,580 --> 00:44:15,930
questions Michael master you said that

00:44:12,370 --> 00:44:19,180
master goes down oh you're kaput yeah

00:44:15,930 --> 00:44:22,560
anyway if the master you look different

00:44:19,180 --> 00:44:25,150
Master to that handle it based on

00:44:22,560 --> 00:44:26,650
so I'm not positive about that but I

00:44:25,150 --> 00:44:28,270
imagine if it doesn't come out of the

00:44:26,650 --> 00:44:30,940
box then there's a plugin that will

00:44:28,270 --> 00:44:32,830
allow you to do that you can set up lots

00:44:30,940 --> 00:44:35,650
of different slaves and lots of

00:44:32,830 --> 00:44:37,120
redundancy in terms of what to do excuse

00:44:35,650 --> 00:44:40,120
me what to do when the non master node

00:44:37,120 --> 00:44:42,910
goes down but from my experience and

00:44:40,120 --> 00:44:44,110
from what I've done you really want to

00:44:42,910 --> 00:44:46,990
lock down the master node and make sure

00:44:44,110 --> 00:44:49,150
that it like it's very safe so I don't

00:44:46,990 --> 00:44:54,100
know maybe maybe a lot to all to get

00:44:49,150 --> 00:44:57,660
back to you on that one all right if

00:44:54,100 --> 00:45:02,370
there's no other questions give soft

00:44:57,660 --> 00:45:02,370
organization group here's a little

00:45:12,240 --> 00:45:14,300

YouTube URL: https://www.youtube.com/watch?v=zQ9mivQyTgU


