Title: FSOSS 2014 Day 1 Sergio Durigan Junior GDB, Your Next Best Friend
Publication date: 2014-10-31
Playlist: FSOSS 2014
Description: 
	
Captions: 
	00:00:14,589 --> 00:00:21,529
click on junior he's a new Harper easy

00:00:19,820 --> 00:00:24,829
to be maintainer and if the software

00:00:21,529 --> 00:00:28,250
activist it's working out at Red Hat in

00:00:24,829 --> 00:00:32,000
Toronto and it'll be talking about Jimmy

00:00:28,250 --> 00:00:36,550
B we just love your next best friend hmm

00:00:32,000 --> 00:00:40,309
thank you very much can you hear me okay

00:00:36,550 --> 00:00:44,120
mm-hmm so um first of all thank you for

00:00:40,309 --> 00:00:47,329
coming as you may have noticed english

00:00:44,120 --> 00:00:49,970
is not my name native language so you

00:00:47,329 --> 00:00:54,410
will excuse me for any mistakes at a

00:00:49,970 --> 00:00:58,640
commit I'm gonna talk about GD b which

00:00:54,410 --> 00:01:01,970
is project that i work on for a few

00:00:58,640 --> 00:01:06,829
years now my intention with this

00:01:01,970 --> 00:01:10,430
presentation is to cover a field what i

00:01:06,829 --> 00:01:13,520
call not so new features that gb has so

00:01:10,430 --> 00:01:17,810
but people usually don't know about them

00:01:13,520 --> 00:01:20,570
people think well most people think that

00:01:17,810 --> 00:01:25,340
gb is basically a tool for doing next

00:01:20,570 --> 00:01:28,280
next next sprint and that's it and if I

00:01:25,340 --> 00:01:30,740
if you live this room today with the

00:01:28,280 --> 00:01:37,549
feeling that it can do more with GDB

00:01:30,740 --> 00:01:41,979
then my mission is accomplished and okay

00:01:37,549 --> 00:01:41,979
so let's start

00:01:42,740 --> 00:01:49,590
you sorry because I look up every time

00:01:46,650 --> 00:01:51,540
because the screen is not mirror in my

00:01:49,590 --> 00:01:56,280
computer so i have to look at some times

00:01:51,540 --> 00:02:00,690
oh no it's okay thank you so this these

00:01:56,280 --> 00:02:03,240
are those slides are free you can modify

00:02:00,690 --> 00:02:06,360
them I can't pass the link they are in a

00:02:03,240 --> 00:02:08,759
git server my my own get server so I can

00:02:06,360 --> 00:02:11,790
pass provide the link later if you want

00:02:08,759 --> 00:02:17,190
you download and use them for your own

00:02:11,790 --> 00:02:19,980
presentation I intend to cover a few

00:02:17,190 --> 00:02:23,700
topics here which basically i'm gonna

00:02:19,980 --> 00:02:25,890
i'm gonna give a very brief introduction

00:02:23,700 --> 00:02:29,510
about JD be about the project how the

00:02:25,890 --> 00:02:32,670
project was created why it was created

00:02:29,510 --> 00:02:35,880
then I'm gonna I'm gonna I'm gonna start

00:02:32,670 --> 00:02:39,480
talking about the features that I want

00:02:35,880 --> 00:02:41,550
you to know so the first saw the first

00:02:39,480 --> 00:02:45,269
feature that I think is going to be

00:02:41,550 --> 00:02:48,480
useful for you its core fios core fire

00:02:45,269 --> 00:02:51,239
support maybe you know about car files

00:02:48,480 --> 00:02:54,420
maybe you know how to use them but I

00:02:51,239 --> 00:02:57,660
think it's a good feature to mention and

00:02:54,420 --> 00:03:00,510
it's not specific to gdb it's actually

00:02:57,660 --> 00:03:02,340
uh it says oh it's it's from the

00:03:00,510 --> 00:03:06,620
operating system right so in jelly bean

00:03:02,340 --> 00:03:09,060
knows how to read code files oh sorry

00:03:06,620 --> 00:03:11,670
I'm going to talk about mucha process

00:03:09,060 --> 00:03:15,600
support on GD b which is basically the

00:03:11,670 --> 00:03:17,370
ability that gb recently acquired to the

00:03:15,600 --> 00:03:21,480
bug more than one process at the same

00:03:17,370 --> 00:03:24,230
time right so you can debug you can

00:03:21,480 --> 00:03:26,959
actually debug more but simultaneously

00:03:24,230 --> 00:03:30,390
several processes at the same time and

00:03:26,959 --> 00:03:35,340
I'm going to give a use case where this

00:03:30,390 --> 00:03:37,340
might be useful for you also going to

00:03:35,340 --> 00:03:41,220
talk about system type s ET probes

00:03:37,340 --> 00:03:43,799
support so this is something that i

00:03:41,220 --> 00:03:46,680
implemented on gdb so it's a it's like

00:03:43,799 --> 00:03:50,850
my my own advertisement for you but

00:03:46,680 --> 00:03:53,010
basically going to talk about what this

00:03:50,850 --> 00:03:55,680
means I mean what is a word assistant

00:03:53,010 --> 00:03:58,700
typist City probe and how gdb makes

00:03:55,680 --> 00:04:01,469
use of it or can't make use of it and

00:03:58,700 --> 00:04:06,150
how you can insert the probes in your

00:04:01,469 --> 00:04:08,819
program and use it inside gdb i'm also

00:04:06,150 --> 00:04:13,319
going to talk about so i think i think

00:04:08,819 --> 00:04:15,900
so someone may have deciphered what is

00:04:13,319 --> 00:04:20,039
written that diversity buggy reverse the

00:04:15,900 --> 00:04:26,370
body so basically its ability that gdp

00:04:20,039 --> 00:04:28,860
has since 2009 actually to reverse the

00:04:26,370 --> 00:04:30,690
execution of your program when you for

00:04:28,860 --> 00:04:33,660
example your debugging program and you

00:04:30,690 --> 00:04:37,470
pass the point where you want it to be

00:04:33,660 --> 00:04:39,090
so you can go back and most people don't

00:04:37,470 --> 00:04:44,550
know about it but it's been there since

00:04:39,090 --> 00:04:47,160
2009 so then less of all python

00:04:44,550 --> 00:04:49,979
scripting which is a must have in every

00:04:47,160 --> 00:04:52,860
presentation that i do about gdb because

00:04:49,979 --> 00:04:54,599
people want to know about what is what

00:04:52,860 --> 00:04:57,300
what is this python scripting support

00:04:54,599 --> 00:05:00,780
that you'd be now has since 2009 as well

00:04:57,300 --> 00:05:03,510
and i'm going to show you a qu little

00:05:00,780 --> 00:05:07,169
examples of how Python scripting support

00:05:03,510 --> 00:05:09,810
on GD bees it's nice it's it's good to

00:05:07,169 --> 00:05:11,789
keep in mind that when i say python

00:05:09,810 --> 00:05:14,099
scripting support i'm not saying that GD

00:05:11,789 --> 00:05:16,770
weekend the bug python scripts now it's

00:05:14,099 --> 00:05:20,070
not that but it's the ability that you

00:05:16,770 --> 00:05:22,260
have now to extend GD bees features

00:05:20,070 --> 00:05:26,270
using python scripting so you can make

00:05:22,260 --> 00:05:30,240
python scripts and that use some

00:05:26,270 --> 00:05:33,780
internal gdb mechanisms which are

00:05:30,240 --> 00:05:36,259
exposed to python and you can use them

00:05:33,780 --> 00:05:38,460
in your python script to extend gdp and

00:05:36,259 --> 00:05:41,130
then i'm going to conclude the

00:05:38,460 --> 00:05:44,759
presentation so if you have any

00:05:41,130 --> 00:05:47,639
questions just feel free to ask me and

00:05:44,759 --> 00:05:50,250
at any time no need to wait for the QA

00:05:47,639 --> 00:05:52,349
actually i'm not sure if there's going

00:05:50,250 --> 00:05:56,900
to be a lot of time to get ready because

00:05:52,349 --> 00:05:59,190
it these lies are quite extensive i

00:05:56,900 --> 00:06:02,389
think it's also good to mention that the

00:05:59,190 --> 00:06:06,000
examples that i'm gonna give here are

00:06:02,389 --> 00:06:09,240
simple examples of course so maybe very

00:06:06,000 --> 00:06:14,069
simple but my intention is not to

00:06:09,240 --> 00:06:16,680
no lose too many time talking about

00:06:14,069 --> 00:06:19,710
every example my intentions just to give

00:06:16,680 --> 00:06:23,849
you a brief overview of of the feature

00:06:19,710 --> 00:06:26,220
so if you have some deep questions and

00:06:23,849 --> 00:06:28,199
you want to ask me outside when the

00:06:26,220 --> 00:06:34,110
presentation is over feel free to do

00:06:28,199 --> 00:06:39,630
that as well so let's start well GDB GDB

00:06:34,110 --> 00:06:45,240
is a GU projects the bugger this is not

00:06:39,630 --> 00:06:47,550
a database right so yeah so sometimes

00:06:45,240 --> 00:06:50,240
people ask me if I work with databases

00:06:47,550 --> 00:06:54,090
and they asked me to check on their

00:06:50,240 --> 00:06:58,020
sequel syntax oh sorry I can't do that

00:06:54,090 --> 00:06:59,780
so basically gb is the bugger so if you

00:06:58,020 --> 00:07:02,940
don't know whether the bugger is maybe

00:06:59,780 --> 00:07:06,419
you were in the wrong room because my

00:07:02,940 --> 00:07:09,000
intention is not to explain how to use

00:07:06,419 --> 00:07:12,889
GDB basic features of GV right my

00:07:09,000 --> 00:07:15,300
intention is to be a bit advanced it so

00:07:12,889 --> 00:07:18,090
another choose gdb you're going to need

00:07:15,300 --> 00:07:23,370
a compiler of course which will compile

00:07:18,090 --> 00:07:26,880
code and that that's G flag is a magic

00:07:23,370 --> 00:07:29,280
that you tell the compiler to put the

00:07:26,880 --> 00:07:32,400
bug info or debug information on our

00:07:29,280 --> 00:07:36,389
binary and then you can use that binary

00:07:32,400 --> 00:07:38,639
and gdb knows how to read that debug

00:07:36,389 --> 00:07:40,940
information and correlate the binary

00:07:38,639 --> 00:07:43,639
with the source code that you have so

00:07:40,940 --> 00:07:49,830
that's basically how the bugger words

00:07:43,639 --> 00:07:53,180
right all right before anything else I'm

00:07:49,830 --> 00:07:53,180
going to show you a magic trick

00:07:54,160 --> 00:07:58,830
so oops

00:08:04,810 --> 00:08:21,949
for a simple oops the GDP guy forgets

00:08:14,090 --> 00:08:24,620
about Sgt right happens let me start the

00:08:21,949 --> 00:08:28,370
buggy the program here and I don't know

00:08:24,620 --> 00:08:35,360
if how many of you know about contracts

00:08:28,370 --> 00:08:38,839
a in gdb really wow okay so it's going

00:08:35,360 --> 00:08:41,539
to be interesting well people are used

00:08:38,839 --> 00:08:44,410
to this interface right when you when

00:08:41,539 --> 00:08:48,050
they use gdb they expect this interface

00:08:44,410 --> 00:08:50,570
however you can get what we call a taxi

00:08:48,050 --> 00:08:53,450
user interface which is actually an any

00:08:50,570 --> 00:08:57,529
curse based interface by doing chrome

00:08:53,450 --> 00:09:00,589
through X a well so this is not very

00:08:57,529 --> 00:09:03,740
documented unfortunately and this is our

00:09:00,589 --> 00:09:05,990
fault we should document this more and

00:09:03,740 --> 00:09:08,899
we should actually take care of this

00:09:05,990 --> 00:09:20,620
more because this is kind of buggy yeah

00:09:08,899 --> 00:09:24,740
GDP has bugs right yeah control x 8 so

00:09:20,620 --> 00:09:26,990
basically it happen it works just like

00:09:24,740 --> 00:09:30,380
if you are debugging on inside imix for

00:09:26,990 --> 00:09:33,740
example so you can step and it will take

00:09:30,380 --> 00:09:37,970
you the cursor moves you to the church

00:09:33,740 --> 00:09:40,730
where the instruction is so yeah this is

00:09:37,970 --> 00:09:43,190
a very good interface I use it a lot

00:09:40,730 --> 00:09:45,470
actually so this is not a newbie

00:09:43,190 --> 00:09:47,240
interface or it this is a this is

00:09:45,470 --> 00:09:49,850
another kind of interface that GDP

00:09:47,240 --> 00:09:53,360
offers and I think it's good that users

00:09:49,850 --> 00:09:57,560
know about it if you don't like it you

00:09:53,360 --> 00:10:02,060
can you can create it by contract say

00:09:57,560 --> 00:10:06,160
again and it you return to the to the

00:10:02,060 --> 00:10:06,160
default prompt alright so

00:10:07,120 --> 00:10:12,890
alright let's talk about core files so

00:10:09,860 --> 00:10:17,590
core files of our frozen images of the

00:10:12,890 --> 00:10:20,030
system right so basically you are

00:10:17,590 --> 00:10:26,390
basically asking the system to take a

00:10:20,030 --> 00:10:28,340
snapshot of your program okay and you

00:10:26,390 --> 00:10:31,490
can generate generate a car fire inside

00:10:28,340 --> 00:10:34,880
gdb you'll be supported and it can

00:10:31,490 --> 00:10:36,890
generate core file comment inside gdb so

00:10:34,880 --> 00:10:39,620
at any time your program that doesn't

00:10:36,890 --> 00:10:42,500
need to be in a sec 4 or something it

00:10:39,620 --> 00:10:45,470
just needs to be stopped it and gdb can

00:10:42,500 --> 00:10:50,120
generate a car fire but you can also

00:10:45,470 --> 00:10:52,010
generate a core file or the system the

00:10:50,120 --> 00:10:54,650
Linux kernel can generate a car file for

00:10:52,010 --> 00:10:57,830
you for example in special situations

00:10:54,650 --> 00:11:02,540
for example when your program crashes by

00:10:57,830 --> 00:11:04,370
segmentation fault linux the links the

00:11:02,540 --> 00:11:09,140
linux kernel will generate a car fire

00:11:04,370 --> 00:11:11,240
for you and well you just have to tell

00:11:09,140 --> 00:11:13,610
to tell it that it can generate the core

00:11:11,240 --> 00:11:17,210
file and you do that by setting the new

00:11:13,610 --> 00:11:20,200
you limit the you limit is a it's

00:11:17,210 --> 00:11:24,200
actually a better show comment but it

00:11:20,200 --> 00:11:27,590
instructs the kernel that it can

00:11:24,200 --> 00:11:32,240
actually write a core file at in the you

00:11:27,590 --> 00:11:34,160
limited the unlimited parent parameter

00:11:32,240 --> 00:11:36,380
that you passed actually tells the

00:11:34,160 --> 00:11:37,970
kernel that it doesn't need to worry

00:11:36,380 --> 00:11:40,430
about the size of the of the curve file

00:11:37,970 --> 00:11:43,850
so if you for example if you want to

00:11:40,430 --> 00:11:47,660
generate core files up to a certain size

00:11:43,850 --> 00:11:50,270
you can specify with the dash c and the

00:11:47,660 --> 00:11:56,570
size so not here i'm just using you

00:11:50,270 --> 00:12:00,560
unlimited for this so and then you can

00:11:56,570 --> 00:12:02,120
open the core file with the gdb program

00:12:00,560 --> 00:12:06,110
the binary that you have and the core

00:12:02,120 --> 00:12:11,650
file how many of you know knew about

00:12:06,110 --> 00:12:11,650
this sorry nice ok so

00:12:12,860 --> 00:12:22,760
thought all of you knew okay so for

00:12:18,650 --> 00:12:25,940
example here I have a program that

00:12:22,760 --> 00:12:29,980
crashes right I don't remember the code

00:12:25,940 --> 00:12:34,370
but ok so basically the crash is because

00:12:29,980 --> 00:12:42,430
it's kind of good yeah yeah it's it's

00:12:34,370 --> 00:12:42,430
not very light anyway maybe Phi

00:12:49,410 --> 00:12:57,449
it's all right that's okay all right so

00:12:53,490 --> 00:13:00,420
pay attention to this Creek not that so

00:12:57,449 --> 00:13:03,300
basically the crash happens because I'm

00:13:00,420 --> 00:13:08,579
I'm trying to differ as the reference a

00:13:03,300 --> 00:13:10,920
pointer which is a star X which is new

00:13:08,579 --> 00:13:14,819
and I'm trying to assign the value of

00:13:10,920 --> 00:13:16,589
five by the referencing so the program

00:13:14,819 --> 00:13:20,160
is going to crash here if we're under

00:13:16,589 --> 00:13:26,970
the binary without setting you limit

00:13:20,160 --> 00:13:29,910
first you see that it crashes and you

00:13:26,970 --> 00:13:31,740
see a message a misleading message

00:13:29,910 --> 00:13:33,899
actually saying that the car has been

00:13:31,740 --> 00:13:35,790
dumped but if you look at the director

00:13:33,899 --> 00:13:37,889
you you won't see any core files here

00:13:35,790 --> 00:13:41,839
because you haven't set the you limit

00:13:37,889 --> 00:13:46,259
before so now i'm going to set it and

00:13:41,839 --> 00:13:50,819
limit it and now i'm going to run again

00:13:46,259 --> 00:13:52,800
and now you have the core dot and the

00:13:50,819 --> 00:13:55,560
number here is a PID of the program

00:13:52,800 --> 00:14:00,209
right so it's just a identification

00:13:55,560 --> 00:14:05,779
number and now I have you can let me go

00:14:00,209 --> 00:14:05,779
back to the screen you can open the

00:14:06,630 --> 00:14:13,230
program and when you do that gdb is

00:14:10,500 --> 00:14:17,070
going to put you at exactly at the exact

00:14:13,230 --> 00:14:19,530
location of the segmentation fault right

00:14:17,070 --> 00:14:21,990
so you basically don't have to worry

00:14:19,530 --> 00:14:25,170
about okay you can always run the

00:14:21,990 --> 00:14:27,600
program inside GD b and g DB will stop

00:14:25,170 --> 00:14:30,690
in this line as well because the program

00:14:27,600 --> 00:14:34,140
crashes but if you're dealing with a for

00:14:30,690 --> 00:14:38,700
example at Red Hat sometimes I have to

00:14:34,140 --> 00:14:40,770
solve a customer issue and I I cannot

00:14:38,700 --> 00:14:43,080
replicate the issue in my machine so

00:14:40,770 --> 00:14:46,350
what I ask them is to provide a core

00:14:43,080 --> 00:14:48,990
files sometimes and they provide a court

00:14:46,350 --> 00:14:52,140
file and with the car fire I can open it

00:14:48,990 --> 00:14:55,380
with gdb and GDB shows me exactly where

00:14:52,140 --> 00:14:57,980
the issue happen and well not only this

00:14:55,380 --> 00:15:03,000
you can now you can ask for back-trace

00:14:57,980 --> 00:15:06,240
right so you know the cold frame the the

00:15:03,000 --> 00:15:09,810
call stack you can print variables right

00:15:06,240 --> 00:15:11,760
so now you you can print X and then

00:15:09,810 --> 00:15:13,640
you're going to see that X is new and

00:15:11,760 --> 00:15:17,490
that's why you have a segmentation fault

00:15:13,640 --> 00:15:21,210
so this is a very very old feature

00:15:17,490 --> 00:15:23,430
actually core files are I don't know

00:15:21,210 --> 00:15:28,370
when they were introduced in the in the

00:15:23,430 --> 00:15:31,620
UNIX systems but this is a very old

00:15:28,370 --> 00:15:34,830
feature that gdb supports for a long

00:15:31,620 --> 00:15:36,900
time and people sometimes don't know

00:15:34,830 --> 00:15:43,010
about it so I think it's gotcha you have

00:15:36,900 --> 00:15:46,710
this knowledge so because car files are

00:15:43,010 --> 00:15:48,630
frozen images of off your program you

00:15:46,710 --> 00:15:51,480
cannot run the program from that point

00:15:48,630 --> 00:15:53,820
right well we it actually doesn't make

00:15:51,480 --> 00:15:55,350
much sense to run the program because if

00:15:53,820 --> 00:15:57,720
you have a segmentation fault from there

00:15:55,350 --> 00:16:01,650
you want to fix it and run the program

00:15:57,720 --> 00:16:03,870
again maybe but you cannot run the

00:16:01,650 --> 00:16:06,810
program from from that point so you can

00:16:03,870 --> 00:16:08,670
only inspect what happened at that point

00:16:06,810 --> 00:16:10,200
and that's it so if you wrote me if you

00:16:08,670 --> 00:16:14,790
want you to run the program you have to

00:16:10,200 --> 00:16:20,940
run it again and that's all right

00:16:14,790 --> 00:16:23,880
okay so switch into mucha process so if

00:16:20,940 --> 00:16:27,270
you if you consider this as I said those

00:16:23,880 --> 00:16:30,120
are very simple examples and you may be

00:16:27,270 --> 00:16:33,150
thinking okay I'm never going to be so

00:16:30,120 --> 00:16:36,000
dumped you you know the refer is a

00:16:33,150 --> 00:16:40,230
variable which is which has been a sign

00:16:36,000 --> 00:16:47,940
at zero in the line before and but ok

00:16:40,230 --> 00:16:49,530
those are simple yeah sure oh you I was

00:16:47,940 --> 00:16:53,190
in your presentation information that

00:16:49,530 --> 00:16:54,900
Jimmy or not we will never refuse to the

00:16:53,190 --> 00:17:01,740
bugger programming I have a patch for

00:16:54,900 --> 00:17:04,140
that man sorry so consider you have this

00:17:01,740 --> 00:17:07,530
problem and what I'm gonna do is I'm

00:17:04,140 --> 00:17:11,460
gonna run the make file which will

00:17:07,530 --> 00:17:15,630
compile the SEC v dot C well what is the

00:17:11,460 --> 00:17:19,890
problem with sag V dot 0 the file name

00:17:15,630 --> 00:17:24,590
already tells okay so I'm gonna run make

00:17:19,890 --> 00:17:27,860
actually and if you if you just do that

00:17:24,590 --> 00:17:27,860
let me show you

00:17:30,769 --> 00:17:38,700
but so here I can't remem make and

00:17:35,460 --> 00:17:41,249
you're going to see the car fire here

00:17:38,700 --> 00:17:47,159
because i SAT there you limit but i'm

00:17:41,249 --> 00:17:56,309
not interested in car file and what

00:17:47,159 --> 00:17:58,139
happens if i run make inside gdb okay so

00:17:56,309 --> 00:18:02,669
if i run magic inside you to be you see

00:17:58,139 --> 00:18:05,129
that gb notice is that there was a

00:18:02,669 --> 00:18:08,100
segmentation fault but it doesn't know

00:18:05,129 --> 00:18:09,989
or it can tell where the signature for

00:18:08,100 --> 00:18:13,259
happen because it didn't happen and make

00:18:09,989 --> 00:18:15,029
it happen somewhere below where i make

00:18:13,259 --> 00:18:18,929
all the program that called the program

00:18:15,029 --> 00:18:21,269
so how do you stop or how do you make

00:18:18,929 --> 00:18:23,879
sure to be stopped at the exact point

00:18:21,269 --> 00:18:26,519
where the segmentation fault happens by

00:18:23,879 --> 00:18:29,820
running make not by very sick v dot c

00:18:26,519 --> 00:18:39,109
which will be you know a cheat but

00:18:29,820 --> 00:18:39,109
anyway how do you do that I'm sorry but

00:18:39,499 --> 00:18:46,559
yes you have to type some comments okay

00:18:42,929 --> 00:18:50,369
so basically the most interesting

00:18:46,559 --> 00:18:57,059
comments here are just set the deck and

00:18:50,369 --> 00:18:59,580
fork to off this common inserts gdb to

00:18:57,059 --> 00:19:02,909
actually well when a program called

00:18:59,580 --> 00:19:05,879
calls fork gdb usually leaves the fork

00:19:02,909 --> 00:19:08,039
alone and well you can run them I'm not

00:19:05,879 --> 00:19:11,489
interested in it so I'm just interested

00:19:08,039 --> 00:19:13,499
in the program that i'm debugging but if

00:19:11,489 --> 00:19:16,499
you want you to be to get hold of that

00:19:13,499 --> 00:19:18,659
fork and stop it you have to set the

00:19:16,499 --> 00:19:21,210
attachment fork off right so that's the

00:19:18,659 --> 00:19:25,340
first option we have to do and then you

00:19:21,210 --> 00:19:28,409
have to set non-stop on which means that

00:19:25,340 --> 00:19:31,139
GD b is not going to stop for some

00:19:28,409 --> 00:19:34,919
events that you would in other cases

00:19:31,139 --> 00:19:36,960
this is a this is a kind of this this is

00:19:34,919 --> 00:19:39,450
more complex than that but i'm not going

00:19:36,960 --> 00:19:42,749
to enter into many details but basically

00:19:39,450 --> 00:19:44,250
you have to set nonstop to on and the

00:19:42,749 --> 00:19:48,450
target a sink

00:19:44,250 --> 00:19:50,310
on is not needed but it's it's good it's

00:19:48,450 --> 00:19:55,070
good if you said it right so because

00:19:50,310 --> 00:19:58,080
target async on basically tells gdb also

00:19:55,070 --> 00:20:00,990
together is with non stop it tells you

00:19:58,080 --> 00:20:03,660
to be that the programs are going to be

00:20:00,990 --> 00:20:05,490
running and that gdb doesn't need to

00:20:03,660 --> 00:20:07,650
stop them when something happens for

00:20:05,490 --> 00:20:10,470
example if you have two processes

00:20:07,650 --> 00:20:13,860
running and one of them hits a

00:20:10,470 --> 00:20:16,220
breakpoint the default mode mode of gdb

00:20:13,860 --> 00:20:19,350
should solve all of the process right

00:20:16,220 --> 00:20:21,660
until you take some action do what you

00:20:19,350 --> 00:20:23,550
want and then you hit continue so with

00:20:21,660 --> 00:20:25,530
those options you can actually tell you

00:20:23,550 --> 00:20:27,660
to be I just want you to stop the

00:20:25,530 --> 00:20:32,940
process that heat the break point and

00:20:27,660 --> 00:20:38,430
the others can keep running all right so

00:20:32,940 --> 00:20:42,120
let's do that Talia we intend to improve

00:20:38,430 --> 00:20:44,870
it right so you can submit bugs to to us

00:20:42,120 --> 00:20:48,690
or complains to our mailing lists

00:20:44,870 --> 00:20:51,330
because we intend to improve it okay so

00:20:48,690 --> 00:20:56,030
basically let me remove the car fire

00:20:51,330 --> 00:20:56,030
again segi and

00:20:59,690 --> 00:21:11,799
if I I'm gonna use the various the dash

00:21:05,090 --> 00:21:14,960
key dash Q modifier ggb which means that

00:21:11,799 --> 00:21:18,879
makes you DB not print all of those

00:21:14,960 --> 00:21:26,539
licenses stuff then it princes usually

00:21:18,879 --> 00:21:33,950
so I'm gonna set the touch and fork off

00:21:26,539 --> 00:21:37,399
sorry set target a sink on and set no it

00:21:33,950 --> 00:21:45,259
stopped on and then I'm going to really

00:21:37,399 --> 00:21:47,480
and very heavy sorry did yeah okay so

00:21:45,259 --> 00:21:50,299
what happened here is that gdb started

00:21:47,480 --> 00:21:59,330
all of the processes but it started make

00:21:50,299 --> 00:22:03,820
which invoke at GCC which invoke it GCC

00:21:59,330 --> 00:22:09,110
vocal cc1 invoke it s which is the

00:22:03,820 --> 00:22:14,769
assembler and then make invoke it SEC v

00:22:09,110 --> 00:22:17,450
which finally crashed so GCC sorry GDB

00:22:14,769 --> 00:22:21,289
was aware of everything that happened

00:22:17,450 --> 00:22:25,879
and you can see you can see here by by

00:22:21,289 --> 00:22:28,070
those message for example inferior is GD

00:22:25,879 --> 00:22:31,220
b parlance for the program being the

00:22:28,070 --> 00:22:35,360
booked right so when when gdb tells that

00:22:31,220 --> 00:22:38,480
inferior six exited normally in three or

00:22:35,360 --> 00:22:41,480
five exited normally it is telling you

00:22:38,480 --> 00:22:44,389
that he was aware of if we were six and

00:22:41,480 --> 00:22:48,409
e 46 ended its job no nothing happened

00:22:44,389 --> 00:22:51,289
so by now you should have only two

00:22:48,409 --> 00:22:54,470
inferiors under the control of gdp make

00:22:51,289 --> 00:22:56,840
and SEC v which is a problem that

00:22:54,470 --> 00:22:59,090
crashes so if you do if you inferiors

00:22:56,840 --> 00:23:01,549
you're going to see that you have make

00:22:59,090 --> 00:23:04,220
and you have sec v and now and now you

00:23:01,549 --> 00:23:09,139
can actually the bug well if you if you

00:23:04,220 --> 00:23:12,470
want it you could debug the inferior one

00:23:09,139 --> 00:23:13,460
which is make or defer the inferior

00:23:12,470 --> 00:23:17,899
seven which is I

00:23:13,460 --> 00:23:19,580
v and if you you can switch actually by

00:23:17,899 --> 00:23:23,450
using the inferior comment for example

00:23:19,580 --> 00:23:25,700
if you do if you're one you're going to

00:23:23,450 --> 00:23:28,250
be the buggy make and now you can

00:23:25,700 --> 00:23:30,740
inspect make you can print variables

00:23:28,250 --> 00:23:35,059
inside make but here i don't have the

00:23:30,740 --> 00:23:37,460
bug info from XO doesn't work and back

00:23:35,059 --> 00:23:39,919
to your 7 which is sec v and now

00:23:37,460 --> 00:23:42,289
contract say and i have the exact

00:23:39,919 --> 00:23:45,490
location of the sackful so basically

00:23:42,289 --> 00:23:48,220
motor process is is there to facilitate

00:23:45,490 --> 00:23:52,429
when you have several processes being

00:23:48,220 --> 00:23:54,169
launched and you have a failure in the

00:23:52,429 --> 00:23:56,390
chain and you when you want to catch as

00:23:54,169 --> 00:24:05,590
active there's that point of the failure

00:23:56,390 --> 00:24:05,590
so that's it any questions so far okay

00:24:09,799 --> 00:24:18,359
it's my English it was my English 8 all

00:24:15,929 --> 00:24:21,929
right i'm from brazil i haven't

00:24:18,359 --> 00:24:24,509
mentioned so yeah I can't speak

00:24:21,929 --> 00:24:28,139
Portuguese if so I know I know actually

00:24:24,509 --> 00:24:34,049
that myself is brilliant so when I'm not

00:24:28,139 --> 00:24:38,539
I'm not gonna talk to him hmm have you

00:24:34,049 --> 00:24:38,539
watched the word cut yeah it was a shame

00:24:42,440 --> 00:24:47,489
all right time for his own actually I

00:24:45,029 --> 00:24:52,109
just did the handle so let's move to

00:24:47,489 --> 00:24:54,599
system to fsd perps so uh I don't want

00:24:52,109 --> 00:24:56,789
to talk too much about this because it

00:24:54,599 --> 00:25:01,079
would seem that I am promoting myself

00:24:56,789 --> 00:25:04,440
which I am indeed but I don't want to

00:25:01,079 --> 00:25:08,129
talk too much about it but basically

00:25:04,440 --> 00:25:10,229
system tab SD probes are user space

00:25:08,129 --> 00:25:13,049
probes so if you know system tap you

00:25:10,229 --> 00:25:15,839
know that assistant app can can put

00:25:13,049 --> 00:25:18,539
probes on the linux kernel right so you

00:25:15,839 --> 00:25:21,629
can actually inspect the linux kernel

00:25:18,539 --> 00:25:25,169
while it's running which is just step is

00:25:21,629 --> 00:25:27,809
a very nice feature we have friends here

00:25:25,169 --> 00:25:30,449
from ahead for redhead who just gave a

00:25:27,809 --> 00:25:35,669
presentation about this and tap so you

00:25:30,449 --> 00:25:39,979
can ask them later and what system tab

00:25:35,669 --> 00:25:39,979
has another well not just in that but

00:25:40,759 --> 00:25:45,359
yeah it's it's under the system type

00:25:43,319 --> 00:25:49,079
umbrella but it's not a specific just

00:25:45,359 --> 00:25:51,089
isn't that right it's a very nice

00:25:49,079 --> 00:25:54,899
feature which is called a user space

00:25:51,089 --> 00:25:59,129
probe so how does it work do you have to

00:25:54,899 --> 00:26:01,019
mess with kernel modules as you do when

00:25:59,129 --> 00:26:03,149
you when you want you put a probe in the

00:26:01,019 --> 00:26:06,209
little scarred up no you don't you

00:26:03,149 --> 00:26:10,679
actually just need one header file which

00:26:06,209 --> 00:26:13,289
is the SIS / st th and that's it right

00:26:10,679 --> 00:26:16,469
and with that header fire you don't need

00:26:13,289 --> 00:26:19,149
a library you don't need to to pass a

00:26:16,469 --> 00:26:21,460
magical parameter to GCC or

00:26:19,149 --> 00:26:24,879
just system tab you actually don't need

00:26:21,460 --> 00:26:28,119
to invoke assistant that at all you just

00:26:24,879 --> 00:26:31,149
need the one header file which is a very

00:26:28,119 --> 00:26:34,570
very very piece of art in terms of

00:26:31,149 --> 00:26:38,739
assembly in terms of dealing with elf

00:26:34,570 --> 00:26:42,460
and sections and headers so I reckon if

00:26:38,739 --> 00:26:44,499
you have a curiosity of how things work

00:26:42,460 --> 00:26:45,879
under the hood I recommend you take a

00:26:44,499 --> 00:26:47,589
look at the they had a fire in our

00:26:45,879 --> 00:26:51,429
system you're going to be you're going

00:26:47,589 --> 00:26:53,259
to be amazed by by how it works and if

00:26:51,429 --> 00:26:55,149
you can understand then you you explain

00:26:53,259 --> 00:26:59,289
to me later because I can't send it back

00:26:55,149 --> 00:27:03,099
sorry so basically you just need to

00:26:59,289 --> 00:27:08,049
include the header file and and then you

00:27:03,099 --> 00:27:09,879
can use the macros step underscore

00:27:08,049 --> 00:27:13,629
underscore underline underscore

00:27:09,879 --> 00:27:16,499
underscore a step underscore probe and a

00:27:13,629 --> 00:27:20,200
number what's that number that number

00:27:16,499 --> 00:27:22,389
forms of how many arguments you want the

00:27:20,200 --> 00:27:24,759
probes you have so in my case I'm just

00:27:22,389 --> 00:27:28,960
passing one argument to the probe which

00:27:24,759 --> 00:27:32,259
is a the letter e the variable way the

00:27:28,960 --> 00:27:35,919
two first arguments are you have always

00:27:32,259 --> 00:27:37,749
you provide two arguments if even if you

00:27:35,919 --> 00:27:39,909
want to create a prob with all arguments

00:27:37,749 --> 00:27:42,849
you have to provide the first argument

00:27:39,909 --> 00:27:47,139
which we call the provider which we

00:27:42,849 --> 00:27:49,989
basically named after the file that we

00:27:47,139 --> 00:27:51,639
are or the project for example and the

00:27:49,989 --> 00:27:54,519
second argument is the name of the probe

00:27:51,639 --> 00:27:57,609
so that it can refer to it inside gdb or

00:27:54,519 --> 00:28:01,179
assistant app and then a probe can have

00:27:57,609 --> 00:28:03,549
up to 12 arguments right so you can

00:28:01,179 --> 00:28:06,219
create probe probe without documents or

00:28:03,549 --> 00:28:09,239
with 12 agreements each one and that's

00:28:06,219 --> 00:28:13,059
it that's that's all that's all you need

00:28:09,239 --> 00:28:16,899
you can compile your program just as you

00:28:13,059 --> 00:28:19,960
were compiling it before and you can use

00:28:16,899 --> 00:28:23,169
system tab if you want to check that the

00:28:19,960 --> 00:28:28,029
probes have been included by using this

00:28:23,169 --> 00:28:31,690
comment right which is a basically a

00:28:28,029 --> 00:28:34,349
it's it's just it's you're just telling

00:28:31,690 --> 00:28:38,559
system tab to list all of the probes

00:28:34,349 --> 00:28:44,109
inside the object example a step that's

00:28:38,559 --> 00:28:49,419
it right so this has been available

00:28:44,109 --> 00:28:52,809
since 2012 the 7 dot 5 release and it is

00:28:49,419 --> 00:28:56,830
integrated the I mean okay so we have

00:28:52,809 --> 00:28:59,859
the probes and now what what I made is I

00:28:56,830 --> 00:29:02,169
made a wage for gdb to read information

00:28:59,859 --> 00:29:05,859
about the probes in your file in our

00:29:02,169 --> 00:29:08,859
object file so and I integrate this with

00:29:05,859 --> 00:29:11,109
the breakpoint mechanism within inside

00:29:08,859 --> 00:29:15,309
gdb so basically that means that you can

00:29:11,109 --> 00:29:21,519
put a breakpoint in the probe that's

00:29:15,309 --> 00:29:25,200
what I meant and the most interesting

00:29:21,519 --> 00:29:27,969
part I would say is that you don't need

00:29:25,200 --> 00:29:30,669
the bug information in more in order to

00:29:27,969 --> 00:29:33,519
access the probes and the arguments so

00:29:30,669 --> 00:29:38,529
you can compile with without me without

00:29:33,519 --> 00:29:40,179
dash G and with dash 0 3 if you want and

00:29:38,529 --> 00:29:41,979
you still have access to to the

00:29:40,179 --> 00:29:47,499
arguments of the probe without debug

00:29:41,979 --> 00:29:50,919
info which is a great thing yeah I just

00:29:47,499 --> 00:29:54,429
just said that so inside gtb you have a

00:29:50,919 --> 00:29:58,269
new comment called info probes which

00:29:54,429 --> 00:30:03,009
lists the probes that GD knows about you

00:29:58,269 --> 00:30:05,799
also have break dash probe dash step and

00:30:03,009 --> 00:30:11,259
the probe name or you can use Dash P

00:30:05,799 --> 00:30:13,149
which is a shotgun fruit and you can

00:30:11,259 --> 00:30:14,859
inside you'll be of course you can print

00:30:13,149 --> 00:30:20,320
the arguments of the probe that you are

00:30:14,859 --> 00:30:21,729
so if you want to print the number of

00:30:20,320 --> 00:30:25,059
arguments you're going to use the

00:30:21,729 --> 00:30:28,299
internal variable called under under

00:30:25,059 --> 00:30:32,039
under line probe underline argh argh see

00:30:28,299 --> 00:30:37,799
with the dollar sign up front of it and

00:30:32,039 --> 00:30:37,799
for the rest of arguments from 0 to 11

00:30:39,450 --> 00:30:47,800
well when I when I implemented this it

00:30:42,610 --> 00:30:52,750
was 10 I think and then then they

00:30:47,800 --> 00:30:54,280
increase you to 12 so it's it well it's

00:30:52,750 --> 00:30:57,610
basically a decision from the system

00:30:54,280 --> 00:31:00,520
system tab maintainers but I don't I

00:30:57,610 --> 00:31:03,730
don't see a problem but maybe registers

00:31:00,520 --> 00:31:09,460
maybe yeah maybe I think the problem

00:31:03,730 --> 00:31:13,000
will be registers in there okay evening

00:31:09,460 --> 00:31:16,030
classes well yeah you you can pass

00:31:13,000 --> 00:31:18,670
classes but the problem is you know I'm

00:31:16,030 --> 00:31:22,600
actually going to talk about it later if

00:31:18,670 --> 00:31:24,010
you pass for example structures you have

00:31:22,600 --> 00:31:26,200
to have the debug info for the

00:31:24,010 --> 00:31:28,630
structures because gdb doesn't know the

00:31:26,200 --> 00:31:31,990
layout of the search in the memory so it

00:31:28,630 --> 00:31:34,600
needs the debug info so my advice is

00:31:31,990 --> 00:31:38,530
that if you want to pass for our

00:31:34,600 --> 00:31:40,270
structure just think about what fields

00:31:38,530 --> 00:31:43,960
in this structure you really want to

00:31:40,270 --> 00:31:45,400
access and pass those fields right don't

00:31:43,960 --> 00:31:47,440
pass this structure as a whole because

00:31:45,400 --> 00:31:49,870
otherwise you need the buggy for

00:31:47,440 --> 00:31:53,470
accessing or you need you to make some

00:31:49,870 --> 00:31:55,990
tricks with the compiling an oblique

00:31:53,470 --> 00:31:59,020
obridge file with the beginning full and

00:31:55,990 --> 00:32:03,880
loading this as as a single file gdb and

00:31:59,020 --> 00:32:08,320
it gets messy private members of class

00:32:03,880 --> 00:32:12,820
yeah I mean you can probe well if you

00:32:08,320 --> 00:32:16,810
have access to to it a probe is a marker

00:32:12,820 --> 00:32:19,000
right so it basically works where you

00:32:16,810 --> 00:32:20,790
are in the code so if you have access to

00:32:19,000 --> 00:32:24,010
private member's where you put the probe

00:32:20,790 --> 00:32:28,510
then yes but you if you don't dine in

00:32:24,010 --> 00:32:30,960
the class that's it yeah yeah that's it

00:32:28,510 --> 00:32:33,640
it's like a you're calling a function

00:32:30,960 --> 00:32:40,530
which which is actually starting a probe

00:32:33,640 --> 00:32:40,530
inside the right all right so

00:32:40,640 --> 00:32:49,110
yeah so this is an example the book

00:32:43,920 --> 00:32:52,640
session i think i'm not going to to do

00:32:49,110 --> 00:32:57,000
the hands-on on this because uh yeah

00:32:52,640 --> 00:32:59,550
yeah time constraints but basically what

00:32:57,000 --> 00:33:03,360
i'm doing here is uh I just compiled my

00:32:59,550 --> 00:33:06,390
MA program with without dash G actually

00:33:03,360 --> 00:33:09,630
as I saw and now i'm using four probes

00:33:06,390 --> 00:33:12,150
in the first comet to list the probes in

00:33:09,630 --> 00:33:15,030
gdb is telling me that i have one probe

00:33:12,150 --> 00:33:19,980
called my probe and the provider example

00:33:15,030 --> 00:33:22,620
step that's it and i put a breakpoint in

00:33:19,980 --> 00:33:26,940
that probe around the program the perp

00:33:22,620 --> 00:33:29,880
the breakpoint was hit I asked gdb how

00:33:26,940 --> 00:33:32,850
many arguments that probe had one and I

00:33:29,880 --> 00:33:38,220
printed the argument which is 10 which

00:33:32,850 --> 00:33:43,170
is basically as you see is Seth right so

00:33:38,220 --> 00:33:45,710
it's a very simple example oops so why

00:33:43,170 --> 00:33:50,070
not go why am I going to use this I

00:33:45,710 --> 00:33:54,150
don't know it's it's up to you but i'm

00:33:50,070 --> 00:33:57,090
just showing the future no seriously

00:33:54,150 --> 00:33:59,580
this this is this has been used inside

00:33:57,090 --> 00:34:01,830
gb the support has been used inside you

00:33:59,580 --> 00:34:07,010
to be to improve for example the loading

00:34:01,830 --> 00:34:12,060
of shared libraries inside gb so before

00:34:07,010 --> 00:34:15,780
gdb had to had to put few strategical

00:34:12,060 --> 00:34:19,620
break points on the loader on g ellipses

00:34:15,780 --> 00:34:20,879
loader in order to know well nutritional

00:34:19,620 --> 00:34:22,919
few informations about the library

00:34:20,879 --> 00:34:25,860
that's going to be loaded in each of the

00:34:22,919 --> 00:34:30,450
program user space and into the program

00:34:25,860 --> 00:34:34,080
space sorry and 4gb has to know about it

00:34:30,450 --> 00:34:35,879
for you right because you might want to

00:34:34,080 --> 00:34:38,040
debug the library you might want to know

00:34:35,879 --> 00:34:42,960
where the library has been loaded for

00:34:38,040 --> 00:34:46,550
example so with this support which was

00:34:42,960 --> 00:34:49,440
implemented by a friend from red red hat

00:34:46,550 --> 00:34:52,800
he basically replaced at the break

00:34:49,440 --> 00:34:55,500
points inside the inside the

00:34:52,800 --> 00:34:59,250
the loader by assistant that probes

00:34:55,500 --> 00:35:02,070
right so it was really really really

00:34:59,250 --> 00:35:05,790
fast I mean we're talking about he made

00:35:02,070 --> 00:35:09,360
a test with a 1000 libraries being

00:35:05,790 --> 00:35:11,880
loaded and I can't remember the numbers

00:35:09,360 --> 00:35:16,170
exactly but i remember it was something

00:35:11,880 --> 00:35:21,020
like for example with pre previously you

00:35:16,170 --> 00:35:24,060
had 300 seconds which is five minutes

00:35:21,020 --> 00:35:25,440
for gdb to you know get information

00:35:24,060 --> 00:35:28,590
about everything that was being loaded

00:35:25,440 --> 00:35:33,810
and with his patch that uses system tab

00:35:28,590 --> 00:35:36,720
probes the time was 30 seconds so he was

00:35:33,810 --> 00:35:39,780
amazing and this support is already

00:35:36,720 --> 00:35:43,050
upstream so you are already benefiting

00:35:39,780 --> 00:35:45,480
from from this right and it uses this

00:35:43,050 --> 00:35:48,600
code so basically what what I like most

00:35:45,480 --> 00:35:53,070
about probes is that probes are

00:35:48,600 --> 00:35:55,500
basically are a good way for you to name

00:35:53,070 --> 00:35:58,710
breakpoints right so you can create

00:35:55,500 --> 00:36:01,830
probes inside your code and you know

00:35:58,710 --> 00:36:04,320
that no matter how you reorganize the

00:36:01,830 --> 00:36:07,020
code the probe will always be named the

00:36:04,320 --> 00:36:10,170
same so you can for example you can make

00:36:07,020 --> 00:36:14,910
a script for gdb that will always put a

00:36:10,170 --> 00:36:17,550
breakpoint in probe blah and you always

00:36:14,910 --> 00:36:19,500
know that probe block will be there so

00:36:17,550 --> 00:36:21,180
you don't have to worry about line

00:36:19,500 --> 00:36:23,340
number you don't have to worry about for

00:36:21,180 --> 00:36:24,960
example i change this function from this

00:36:23,340 --> 00:36:27,570
fire to that file so i have to rewrite

00:36:24,960 --> 00:36:30,510
no you always know that break but that

00:36:27,570 --> 00:36:33,420
the probe will be called blah and you

00:36:30,510 --> 00:36:37,190
always have access to it so this is one

00:36:33,420 --> 00:36:42,950
of the things that the end user can use

00:36:37,190 --> 00:36:45,619
this feature for so so this is an idea

00:36:42,950 --> 00:36:48,940
okay reverse the buggy how many of you

00:36:45,619 --> 00:36:54,010
knew that gdb can do reverse the buggy

00:36:48,940 --> 00:36:57,589
Wow okay I'm impressed all right since

00:36:54,010 --> 00:37:00,770
2009 as I said so oh the implementation

00:36:57,589 --> 00:37:06,440
is a bit messy unfortunately but it

00:37:00,770 --> 00:37:09,820
works for for most cases where you can

00:37:06,440 --> 00:37:15,770
only use a intel architectures right x86

00:37:09,820 --> 00:37:19,339
x86 is four and this year IBM posted the

00:37:15,770 --> 00:37:22,490
bounty for for someone who wanted to to

00:37:19,339 --> 00:37:24,920
implement the support for powerpc so it

00:37:22,490 --> 00:37:27,890
was a five thousand dollars or something

00:37:24,920 --> 00:37:30,710
like that and now we're seeing par pc

00:37:27,890 --> 00:37:36,349
patches in the Middle East oh look look

00:37:30,710 --> 00:37:38,329
at what money can do right yeah and the

00:37:36,349 --> 00:37:42,680
sad thing about it is that the hacker

00:37:38,329 --> 00:37:44,780
passed away a few actually i think was

00:37:42,680 --> 00:37:49,970
one year for a one year after he

00:37:44,780 --> 00:37:54,260
implemented the feature so have you ever

00:37:49,970 --> 00:37:57,290
heard that sorry oh if I die or oh if I

00:37:54,260 --> 00:37:59,599
if I you know if I am fired from the job

00:37:57,290 --> 00:38:02,300
who's going to take care of the code so

00:37:59,599 --> 00:38:03,760
this is the same case the guy died and

00:38:02,300 --> 00:38:05,810
nobody's looking at the code

00:38:03,760 --> 00:38:12,200
unfortunately the code this be

00:38:05,810 --> 00:38:13,760
unmaintained 4 6 2010 I'd say and yeah

00:38:12,200 --> 00:38:17,660
we're looking for maintainer so if you

00:38:13,760 --> 00:38:20,690
look at the FSF website at the actually

00:38:17,660 --> 00:38:24,020
the new org website you're going to see

00:38:20,690 --> 00:38:26,450
the high-priority projects for FSF and

00:38:24,020 --> 00:38:28,190
you're going to see that reverse the bug

00:38:26,450 --> 00:38:30,349
me for GD b is there so we're looking

00:38:28,190 --> 00:38:33,950
for Martinez for this code so if anyone

00:38:30,349 --> 00:38:36,849
would like to volunteer now I give you

00:38:33,950 --> 00:38:39,279
my water maybe I don't know

00:38:36,849 --> 00:38:42,450
so happening I don't have five thousand

00:38:39,279 --> 00:38:49,380
dollars like at the IBM so yeah just

00:38:42,450 --> 00:38:53,019
okay so well it's pretty easy to use so

00:38:49,380 --> 00:38:56,170
what you have to remember is to that

00:38:53,019 --> 00:38:57,970
common target record foo however it has

00:38:56,170 --> 00:39:00,700
been simplified a bit so you can

00:38:57,970 --> 00:39:04,269
actually just do a record and that's it

00:39:00,700 --> 00:39:07,749
so you must tell gdb that you wanted to

00:39:04,269 --> 00:39:10,869
record the program from that point on so

00:39:07,749 --> 00:39:13,630
that gdb knows how to retro see right

00:39:10,869 --> 00:39:23,019
how to step back when you want so I'm

00:39:13,630 --> 00:39:30,150
gonna show you a few yes what what do

00:39:23,019 --> 00:39:33,039
you mean by ever oh yeah they go back

00:39:30,150 --> 00:39:35,920
actually no because in that in that case

00:39:33,039 --> 00:39:38,130
the the process will be killed so

00:39:35,920 --> 00:39:40,720
there's there's no way for gdb to

00:39:38,130 --> 00:39:44,259
resurrect the process and put right it

00:39:40,720 --> 00:39:46,479
would be very high yeah this this this

00:39:44,259 --> 00:39:49,019
feature is actually very useful when you

00:39:46,479 --> 00:39:51,640
are in a hurry for example in your he

00:39:49,019 --> 00:39:54,039
nnnn and you passed the point that he

00:39:51,640 --> 00:39:57,430
wanted to write which happens to me a

00:39:54,039 --> 00:40:01,390
lot and I always forget you to set the

00:39:57,430 --> 00:40:08,589
reversible yawn so yeah each our old up

00:40:01,390 --> 00:40:11,789
food right so what I did here is a is a

00:40:08,589 --> 00:40:11,789
small example of a

00:40:12,839 --> 00:40:25,859
I should have created mcfine all right

00:40:20,930 --> 00:40:29,910
so if I oh by the way em if you notice

00:40:25,859 --> 00:40:33,089
I'm using a I'm using fedora and i'm

00:40:29,910 --> 00:40:36,359
using the GDB which comes with fedora so

00:40:33,089 --> 00:40:39,180
this is all upstream this is all

00:40:36,359 --> 00:40:43,380
available for everyone so I'm not using

00:40:39,180 --> 00:40:46,170
the last bude of GBM i have it here but

00:40:43,380 --> 00:40:50,400
a music fedora and i'm using the duty

00:40:46,170 --> 00:40:55,950
black that ship is with it so yeah so

00:40:50,400 --> 00:40:59,430
basically ada out and then you start the

00:40:55,950 --> 00:41:02,640
program and this is a very dumb problem

00:40:59,430 --> 00:41:07,789
right so yeah you just do record and

00:41:02,640 --> 00:41:07,789
then you can step

00:41:09,329 --> 00:41:24,869
ah next next step next next next step

00:41:18,289 --> 00:41:28,200
next oh so now i see that i should

00:41:24,869 --> 00:41:31,890
haven't I shouldn't have have typed the

00:41:28,200 --> 00:41:38,430
the lacs the last next so just do a

00:41:31,890 --> 00:41:43,219
reverse next due to be yeah goes back so

00:41:38,430 --> 00:41:48,059
I do a reverse next gtb goes back again

00:41:43,219 --> 00:41:54,089
and again so if you print a here I'm

00:41:48,059 --> 00:41:57,839
going to see that a is 30 so reverse

00:41:54,089 --> 00:42:00,440
next in print ay ay ay is zero so yeah

00:41:57,839 --> 00:42:07,529
it's uh it's basically going back right

00:42:00,440 --> 00:42:09,450
no no magic tricks here and you can you

00:42:07,529 --> 00:42:12,799
can go back all the way to the to the

00:42:09,450 --> 00:42:16,680
beginning of your program right yeah yes

00:42:12,799 --> 00:42:18,479
if you have a couple of breakpoints you

00:42:16,680 --> 00:42:21,809
ran to the next breakpoint and you do a

00:42:18,479 --> 00:42:24,390
reverse next uh will that take you back

00:42:21,809 --> 00:42:26,279
to the previous point that you did a

00:42:24,390 --> 00:42:31,579
next or will it take you back to just

00:42:26,279 --> 00:42:34,380
the previous instruction if you just oh

00:42:31,579 --> 00:42:35,969
ok ok I I see what you mean all right

00:42:34,380 --> 00:42:38,729
you're a breakpoint wine we do a few

00:42:35,969 --> 00:42:40,559
next and let me say I just run and then

00:42:38,729 --> 00:42:42,690
it goes for a point to when you do a

00:42:40,559 --> 00:42:48,180
reverse next where does it take back hmm

00:42:42,690 --> 00:42:52,170
I don't know let's make a test so let me

00:42:48,180 --> 00:43:01,160
remember their the couch I just see it's

00:42:52,170 --> 00:43:05,329
a buggy turn to remember the okay so

00:43:01,160 --> 00:43:07,349
let's put a breakpoint on on function I

00:43:05,329 --> 00:43:09,859
can't see the name of the function

00:43:07,349 --> 00:43:09,859
action

00:43:10,970 --> 00:43:20,460
thank you so let's put a breakpoint on

00:43:14,970 --> 00:43:30,140
function foo and and then another

00:43:20,460 --> 00:43:35,480
function bar all right break foo oops

00:43:30,140 --> 00:43:39,650
break bar and you have to start the

00:43:35,480 --> 00:43:48,829
program actually so before recording it

00:43:39,650 --> 00:43:48,829
all right so continue and then continue

00:43:49,160 --> 00:44:02,609
so you're in bart so you do reverse next

00:43:52,529 --> 00:44:05,700
here oh let me just reverse next okay so

00:44:02,609 --> 00:44:11,970
you hope I think that wasn't good enough

00:44:05,700 --> 00:44:15,859
for it to kill one instruction not fact

00:44:11,970 --> 00:44:20,520
where you really so no

00:44:15,859 --> 00:44:24,030
step over verse 13 points yeah can you

00:44:20,520 --> 00:44:28,230
reply to you Rick Larissa Oh reverse

00:44:24,030 --> 00:44:31,799
continue yeah okay yeah oh yeah yeah

00:44:28,230 --> 00:44:33,390
yeah okay the reverse tags out that was

00:44:31,799 --> 00:44:37,109
fine structure but it can also bring

00:44:33,390 --> 00:44:40,010
those great point okay yeah yeah that's

00:44:37,109 --> 00:44:42,720
it thank you for answering dead to me

00:44:40,010 --> 00:44:46,109
yeah as you as you have you see and I

00:44:42,720 --> 00:44:48,599
don't use this feature a lot but uh well

00:44:46,109 --> 00:44:53,099
it may be very useful for other people

00:44:48,599 --> 00:44:55,770
and yeah well if you're if you were

00:44:53,099 --> 00:45:00,210
actually debugging a lot of reverse

00:44:55,770 --> 00:45:04,140
comments you can there's set Zack

00:45:00,210 --> 00:45:08,450
direction reverse and then next becomes

00:45:04,140 --> 00:45:14,599
reverse next and reverse next becomes X

00:45:08,450 --> 00:45:23,930
see yeah it's a it's a little trick yeah

00:45:14,599 --> 00:45:29,369
the wonders of cl i right okay yep five

00:45:23,930 --> 00:45:33,900
oops yeah I I tell them it's cetera here

00:45:29,369 --> 00:45:37,520
all right so yeah Python support any

00:45:33,900 --> 00:45:37,520
more questions about the reversal boogie

00:45:39,710 --> 00:45:46,110
core files and not know because in court

00:45:43,530 --> 00:45:49,080
for remember I did what I told you core

00:45:46,110 --> 00:45:51,960
files don't allow you to continue the

00:45:49,080 --> 00:45:54,840
program to run the program so it is

00:45:51,960 --> 00:46:01,350
basically a frozen image so you have

00:45:54,840 --> 00:46:06,650
that and that's it all right ok Python

00:46:01,350 --> 00:46:13,260
support yeah well the motivation is uh I

00:46:06,650 --> 00:46:17,430
my my ex seen leader had a had a phrase

00:46:13,260 --> 00:46:22,200
that I think sums up some very well what

00:46:17,430 --> 00:46:25,770
gdb is so he usually told me or told

00:46:22,200 --> 00:46:28,770
everybody that GD b is a multi-layer the

00:46:25,770 --> 00:46:30,780
buggy so you can for you can choose to

00:46:28,770 --> 00:46:33,900
forget about everything that you'll be

00:46:30,780 --> 00:46:37,560
offers in the book just assembly or you

00:46:33,900 --> 00:46:41,490
can put what gdb already offers in its

00:46:37,560 --> 00:46:45,990
CLI any and now you have another layer

00:46:41,490 --> 00:46:50,070
right very candid book c c++ fortran so

00:46:45,990 --> 00:46:53,460
you have necks you have step and with

00:46:50,070 --> 00:46:56,610
python we just added another layer where

00:46:53,460 --> 00:47:00,060
you can specify things that are specific

00:46:56,610 --> 00:47:02,510
to your project so I'm gonna talk about

00:47:00,060 --> 00:47:05,160
it later but uh there are several

00:47:02,510 --> 00:47:08,790
several projects that are already

00:47:05,160 --> 00:47:12,120
providing Python scripts for GD be in

00:47:08,790 --> 00:47:16,260
order to for example if you debug if you

00:47:12,120 --> 00:47:21,120
are going to debug ghalib from genome

00:47:16,260 --> 00:47:24,710
right galip offers a set of Python

00:47:21,120 --> 00:47:27,720
scripts for gdb that can help you

00:47:24,710 --> 00:47:30,960
printing specific information of jalebi

00:47:27,720 --> 00:47:33,060
data structures so those Python scripts

00:47:30,960 --> 00:47:35,430
are only specific to to delete it

00:47:33,060 --> 00:47:38,400
doesn't make sense for Choo choos then I

00:47:35,430 --> 00:47:40,890
don't know a GCC because GCC doesn't

00:47:38,400 --> 00:47:44,310
have the same data structures so 4G lip

00:47:40,890 --> 00:47:47,100
what we create what not not for Julie

00:47:44,310 --> 00:47:49,890
but for every kind of project out there

00:47:47,100 --> 00:47:51,250
that use gdb what we created is a way

00:47:49,890 --> 00:47:55,750
for

00:47:51,250 --> 00:47:59,230
them to customize gdb for their needs

00:47:55,750 --> 00:48:01,410
right so python is basically that python

00:47:59,230 --> 00:48:05,880
scripting supports basically that

00:48:01,410 --> 00:48:11,740
fortunately is very well maintained so

00:48:05,880 --> 00:48:18,460
the code is relatively relatively well

00:48:11,740 --> 00:48:21,040
maintained and we well the guy that was

00:48:18,460 --> 00:48:22,660
adding new features to to python is not

00:48:21,040 --> 00:48:25,390
working on other things inside right

00:48:22,660 --> 00:48:31,140
head so Python support is a kind of a

00:48:25,390 --> 00:48:35,230
you know frozen no but it was being

00:48:31,140 --> 00:48:37,210
extended until one year ago so you are

00:48:35,230 --> 00:48:40,240
going to see very new features in Python

00:48:37,210 --> 00:48:43,710
support and oh and gdb now has support

00:48:40,240 --> 00:48:45,940
to guy oh gee no guy which is the news

00:48:43,710 --> 00:48:50,350
which is a canoe implementation of

00:48:45,940 --> 00:48:53,290
scheme which is a dialect of Lisp so you

00:48:50,350 --> 00:48:59,170
can also implement those things in gayo

00:48:53,290 --> 00:49:01,960
if you want it's all right and Lisp yeah

00:48:59,170 --> 00:49:05,650
I just told that several projects okay

00:49:01,960 --> 00:49:10,390
so yeah chewies two simple examples here

00:49:05,650 --> 00:49:13,840
so this this one is amazing i think gb

00:49:10,390 --> 00:49:15,970
knows about call stacks and it knows

00:49:13,840 --> 00:49:18,480
about who is being called by who which

00:49:15,970 --> 00:49:23,530
function is called which function and

00:49:18,480 --> 00:49:25,510
break points in gdb have contain have

00:49:23,530 --> 00:49:29,340
conditions so you can specify

00:49:25,510 --> 00:49:32,440
breakpoints that trigger only on a

00:49:29,340 --> 00:49:35,620
certain only when a certain condition is

00:49:32,440 --> 00:49:40,870
met right however you cannot use those

00:49:35,620 --> 00:49:43,870
two information together on gdb because

00:49:40,870 --> 00:49:47,920
you can you can say to gdp for example

00:49:43,870 --> 00:49:50,080
break this function only if this

00:49:47,920 --> 00:49:52,720
function is being called by that

00:49:50,080 --> 00:49:55,570
function you cannot do that with gdb

00:49:52,720 --> 00:49:58,830
with the regular scripting language that

00:49:55,570 --> 00:50:01,450
GDB offers so the solution is python and

00:49:58,830 --> 00:50:03,340
this is the solution so most part of it

00:50:01,450 --> 00:50:06,760
is comment right

00:50:03,340 --> 00:50:10,270
and what the solution is what this code

00:50:06,760 --> 00:50:14,230
is doing is basically it is iterating

00:50:10,270 --> 00:50:17,560
over each frame of the function of the

00:50:14,230 --> 00:50:19,870
core of the called function and it's any

00:50:17,560 --> 00:50:23,710
and it's see if that frame belongs to

00:50:19,870 --> 00:50:27,490
the function that you want or I think I

00:50:23,710 --> 00:50:29,440
confuse myself okay so it's basically it

00:50:27,490 --> 00:50:33,490
iterating over the over the frames of

00:50:29,440 --> 00:50:37,600
the called function and it's see if any

00:50:33,490 --> 00:50:42,520
of those frames belong to the function

00:50:37,600 --> 00:50:44,650
that you want gdb to stop when it's in

00:50:42,520 --> 00:50:51,910
the coaching it's in the coaching right

00:50:44,650 --> 00:50:54,580
so it's a very simple code and well this

00:50:51,910 --> 00:50:57,070
is actually up three right so you

00:50:54,580 --> 00:51:00,370
already have access to it if you if

00:50:57,070 --> 00:51:02,020
you're running a relatively new gdb you

00:51:00,370 --> 00:51:06,340
have access to it if you don't need to

00:51:02,020 --> 00:51:11,700
call this yourself but I'm gonna show

00:51:06,340 --> 00:51:11,700
you how it works so oops

00:51:12,640 --> 00:51:23,849
how is my time Wow but it's the last

00:51:19,329 --> 00:51:26,289
presentation so ladies go straight yeah

00:51:23,849 --> 00:51:33,430
I will be stepping over someone else

00:51:26,289 --> 00:51:38,319
yeah yeah sure all right so color is so

00:51:33,430 --> 00:51:46,359
i have 1 dot C which up which as you can

00:51:38,319 --> 00:51:50,589
see that's and bar are calling foo but I

00:51:46,359 --> 00:51:56,859
want you to be to stop only when foo is

00:51:50,589 --> 00:52:04,170
being called by bar and not bad so what

00:51:56,859 --> 00:52:04,170
I do is let me see if I can

00:52:06,070 --> 00:52:08,130
Oh

00:52:11,220 --> 00:52:19,070
justice usse leaving the skin

00:52:19,940 --> 00:52:33,880
yes that's it so break foo if caller yes

00:52:29,720 --> 00:52:38,770
I ever remember if if I have to put this

00:52:33,880 --> 00:52:51,250
underline or not but anyway there's core

00:52:38,770 --> 00:52:51,250
bar and run oops no I was wrong just

00:52:58,460 --> 00:53:06,170
see work yeah so yeah as you can see

00:53:02,470 --> 00:53:09,619
mars calling is calling foo but if you

00:53:06,170 --> 00:53:14,210
remember the code boss was calling fool

00:53:09,619 --> 00:53:17,480
first so gb just ignored that calling

00:53:14,210 --> 00:53:19,970
that that hit right and only stopped at

00:53:17,480 --> 00:53:22,580
foo and bar was calling so this is this

00:53:19,970 --> 00:53:25,339
is amazing this is a very powerful

00:53:22,580 --> 00:53:28,730
example of how Python script can help

00:53:25,339 --> 00:53:30,980
you in my opinion and I was I was

00:53:28,730 --> 00:53:37,460
actually going to show another example

00:53:30,980 --> 00:53:40,550
which is a printing printing C++ shrinks

00:53:37,460 --> 00:53:43,450
right STD strings inside gtb so if you

00:53:40,550 --> 00:53:47,030
ever printed a C++ ringside you to be

00:53:43,450 --> 00:53:49,280
you probably notice that Jilly prints

00:53:47,030 --> 00:53:53,480
the whole class and not the string

00:53:49,280 --> 00:53:58,160
itself so in my example which is also

00:53:53,480 --> 00:54:00,650
upstream we will benefit from it in this

00:53:58,160 --> 00:54:03,950
example that I use you just type print

00:54:00,650 --> 00:54:05,839
string and you see the shrink and you

00:54:03,950 --> 00:54:09,680
you're not going to see the stds shrink

00:54:05,839 --> 00:54:15,520
class entirely right but unfortunately I

00:54:09,680 --> 00:54:18,770
think I don't have time anymore anyway

00:54:15,520 --> 00:54:25,130
when you print the differing you you see

00:54:18,770 --> 00:54:31,130
something like this how many of you saw

00:54:25,130 --> 00:54:33,650
this before okay nice so basically we

00:54:31,130 --> 00:54:36,230
are interested in this in this string

00:54:33,650 --> 00:54:42,800
which is here which is inside the M data

00:54:36,230 --> 00:54:47,210
plus and MP field so the code to access

00:54:42,800 --> 00:54:48,740
this which is up string already and it's

00:54:47,210 --> 00:54:51,200
interesting because this code is not

00:54:48,740 --> 00:54:55,280
part of gdb it is part of lib standard

00:54:51,200 --> 00:54:58,160
C++ which is a project withings GCC so

00:54:55,280 --> 00:55:00,890
gdb does not maintain this code but this

00:54:58,160 --> 00:55:04,820
code actually uses the Python scripting

00:55:00,890 --> 00:55:08,060
support of gdb to accessed it well this

00:55:04,820 --> 00:55:12,220
is all boilerplate to actually access

00:55:08,060 --> 00:55:12,220
the the real type of this of this thing

00:55:12,480 --> 00:55:18,550
here is a is the most interesting line

00:55:15,460 --> 00:55:21,210
right so you have you are accessing the

00:55:18,550 --> 00:55:24,430
right field wear this ring clips and

00:55:21,210 --> 00:55:27,100
then you and then you can print and

00:55:24,430 --> 00:55:31,180
you're going to see only this ring not

00:55:27,100 --> 00:55:35,290
the not out not the whole class printed

00:55:31,180 --> 00:55:38,400
right so the conclusion the debugger you

00:55:35,290 --> 00:55:42,910
knew has changed for the better I hope

00:55:38,400 --> 00:55:45,250
we are working towards implement

00:55:42,910 --> 00:55:49,690
improving the multi-process feature

00:55:45,250 --> 00:55:53,050
which I talked later not previously

00:55:49,690 --> 00:55:55,630
sorry and basically the idea is to bring

00:55:53,050 --> 00:55:58,780
this multi-process feature on g DB

00:55:55,630 --> 00:56:01,450
server because of the cloud stuff that

00:55:58,780 --> 00:56:04,480
now everybody the bugs things in the

00:56:01,450 --> 00:56:07,300
cloud so you run a GDB server there and

00:56:04,480 --> 00:56:10,140
GDB locally so we want to be able to use

00:56:07,300 --> 00:56:14,290
multi-process on gb server as well

00:56:10,140 --> 00:56:16,660
scalability right so which is very tight

00:56:14,290 --> 00:56:18,930
to to the moocher process improvement

00:56:16,660 --> 00:56:23,470
because when you start debugging

00:56:18,930 --> 00:56:27,910
thousands of processes gdb just breaks

00:56:23,470 --> 00:56:32,410
down so it cannot hold the requirements

00:56:27,910 --> 00:56:37,810
and improvements for c++ basically we

00:56:32,410 --> 00:56:40,900
are working towards making the book is

00:56:37,810 --> 00:56:44,410
the the bug experience for c++ code

00:56:40,900 --> 00:56:48,040
better so we'll be kind of sucks when

00:56:44,410 --> 00:56:51,490
you double C++ code unfortunately so

00:56:48,040 --> 00:56:58,810
we're trying to improve that and okay

00:56:51,490 --> 00:57:02,850
thank you everybody Red Hat for actually

00:56:58,810 --> 00:57:02,850
I should be working now so

00:57:03,829 --> 00:57:10,380
redhead just kindly let me come here and

00:57:07,890 --> 00:57:15,539
give this presentation to you and have

00:57:10,380 --> 00:57:17,400
sauce and okay so one more thing I'm

00:57:15,539 --> 00:57:20,880
from liberal liberal planets Ontario's

00:57:17,400 --> 00:57:23,010
as plays told that the last minute in

00:57:20,880 --> 00:57:25,579
the last presentation so if you are

00:57:23,010 --> 00:57:31,619
interested in free software and

00:57:25,579 --> 00:57:33,809
philosophy just you know go to church of

00:57:31,619 --> 00:57:37,559
this website subscribe to our mailing

00:57:33,809 --> 00:57:40,260
list meet with us we usually meet face

00:57:37,559 --> 00:57:43,950
to face once a month so we're trying to

00:57:40,260 --> 00:57:48,900
revive the group and yeah I think many

00:57:43,950 --> 00:57:53,930
of you here may may like free software

00:57:48,900 --> 00:57:59,400
but maybe you don't know yet or anyway

00:57:53,930 --> 00:58:03,240
you're very invited to join us okay so i

00:57:59,400 --> 00:58:06,000
think that's it if you have questions I

00:58:03,240 --> 00:58:10,500
don't have I don't have time anymore i

00:58:06,000 --> 00:58:13,410
think but you can ask outside or if you

00:58:10,500 --> 00:58:15,270
if you if you are a speaker i'll be in

00:58:13,410 --> 00:58:17,910
the speaker's dinner as well so you can

00:58:15,270 --> 00:58:21,349
talk to me there no problem and yeah

00:58:17,910 --> 00:58:21,349
that's it thank you very much

00:58:30,710 --> 00:58:33,710

YouTube URL: https://www.youtube.com/watch?v=0hHne2zYkvE


