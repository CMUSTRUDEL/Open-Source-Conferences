Title: FSOSS 2013 MongoDB: Advantages of an Open Source NoSQL Database
Publication date: 2013-10-28
Playlist: FSOSS 2013
Description: 
	MongoDB: Advantages of an Open Source NoSQL Database presentation by Kevin Cearns
Captions: 
	00:00:00,890 --> 00:00:08,400
welcome mr. Arnold you have said it I

00:00:05,640 --> 00:00:10,679
just want to welcome you all today we

00:00:08,400 --> 00:00:13,830
have women s cabin please dad was

00:00:10,679 --> 00:00:15,269
talking about mobile DD relational

00:00:13,830 --> 00:00:18,180
databases have been with us for such a

00:00:15,269 --> 00:00:21,420
long time but big data came on board and

00:00:18,180 --> 00:00:23,880
when the variety of the kind atoms were

00:00:21,420 --> 00:00:25,710
getting increased and so did the kind of

00:00:23,880 --> 00:00:28,439
data into semi-structured and

00:00:25,710 --> 00:00:30,390
unstructured then relational databases

00:00:28,439 --> 00:00:32,820
were not able to handle that and that's

00:00:30,390 --> 00:00:35,640
where the no sequel database came and

00:00:32,820 --> 00:00:37,739
mongodb was reading open source no

00:00:35,640 --> 00:00:39,690
sequel databases about which heavens

00:00:37,739 --> 00:00:42,320
Bennett Cochran he's an IT consultant

00:00:39,690 --> 00:00:46,590
and his previous life he was an IT

00:00:42,320 --> 00:00:48,960
director focusing on at that point to

00:00:46,590 --> 00:00:51,480
advantage of print media company and now

00:00:48,960 --> 00:00:54,809
I'm focusing a lot on the open source

00:00:51,480 --> 00:00:57,210
and no sequel databases as well so

00:00:54,809 --> 00:01:04,170
welcome please join me in giving a warm

00:00:57,210 --> 00:01:06,750
welcome thank you as a quick question

00:01:04,170 --> 00:01:09,030
how many actually use MongoDB in

00:01:06,750 --> 00:01:10,979
production running regarding directory

00:01:09,030 --> 00:01:12,360
sites know so the only thing like

00:01:10,979 --> 00:01:13,770
running actually live sites here they're

00:01:12,360 --> 00:01:16,229
just kind of touching it or playing

00:01:13,770 --> 00:01:20,310
around with it okay how many know about

00:01:16,229 --> 00:01:21,960
 at all and how many so just you

00:01:20,310 --> 00:01:27,710
just heard about it I guess that's kind

00:01:21,960 --> 00:01:31,140
of all right well Who am I i'm kevin and

00:01:27,710 --> 00:01:33,799
i run a infra company that provides

00:01:31,140 --> 00:01:36,150
infrastructure and platform services for

00:01:33,799 --> 00:01:38,880
for small to medium-sized to large

00:01:36,150 --> 00:01:41,009
companies we provide the operations

00:01:38,880 --> 00:01:41,970
around it as well so we provide from the

00:01:41,009 --> 00:01:44,130
infrastructure right up to the

00:01:41,970 --> 00:01:45,869
application stack essentially whatever a

00:01:44,130 --> 00:01:49,770
customer requires to keep their website

00:01:45,869 --> 00:01:52,439
running is what we do we just recently

00:01:49,770 --> 00:01:54,869
became a hot engine or sorry mongodb Inc

00:01:52,439 --> 00:01:56,600
partner they changed their name I'm not

00:01:54,869 --> 00:01:58,590
going to be think partner in Canada

00:01:56,600 --> 00:02:00,390
really this against because we started

00:01:58,590 --> 00:02:02,670
getting requests from customers to

00:02:00,390 --> 00:02:03,930
support more MongoDB and we thought it'd

00:02:02,670 --> 00:02:05,640
be nice to have a way to go back and

00:02:03,930 --> 00:02:07,500
have some kind of a second tier support

00:02:05,640 --> 00:02:11,190
and updates and patches from the actual

00:02:07,500 --> 00:02:12,360
guys who develop the software I think

00:02:11,190 --> 00:02:13,890
there's only a few of us in candidate

00:02:12,360 --> 00:02:17,760
we're actually a mom going to be part

00:02:13,890 --> 00:02:19,680
but i'm sure that will increase so i

00:02:17,760 --> 00:02:24,060
guess before I fetch bombo DB who / what

00:02:19,680 --> 00:02:25,410
what is no SQL window sequel if there's

00:02:24,060 --> 00:02:27,300
a great book out there by Martin Fowler

00:02:25,410 --> 00:02:29,880
called a note sequel distilled which I

00:02:27,300 --> 00:02:31,110
highly recommend you pick up if you're

00:02:29,880 --> 00:02:34,890
all interested in then kind of outside a

00:02:31,110 --> 00:02:36,090
relational database world and again I

00:02:34,890 --> 00:02:40,920
guess no sequel is one of those terms

00:02:36,090 --> 00:02:42,810
that's kind of ill-defined kind of hard

00:02:40,920 --> 00:02:44,280
to nail down kind of like Klout whether

00:02:42,810 --> 00:02:47,070
what is cloud it's got a million if

00:02:44,280 --> 00:02:50,640
definitions of what cloud is but for the

00:02:47,070 --> 00:02:54,750
most part no sequel matches mostly as

00:02:50,640 --> 00:02:56,820
criterias it doesn't use sequel although

00:02:54,750 --> 00:02:59,910
there are ways you can there are methods

00:02:56,820 --> 00:03:02,489
to get the same kind of sequel results

00:02:59,910 --> 00:03:05,250
out of it no sequel database there

00:03:02,489 --> 00:03:08,040
Jeremy open source and one of the big

00:03:05,250 --> 00:03:09,690
driving needs for no sequel came from

00:03:08,040 --> 00:03:12,330
the need I guess to what's called web

00:03:09,690 --> 00:03:14,450
scale applications you ever had the kind

00:03:12,330 --> 00:03:19,560
of cluster Oracle or sequel server or

00:03:14,450 --> 00:03:22,920
MySQL running one woody be at scale

00:03:19,560 --> 00:03:25,590
across multiple many boxes is a much

00:03:22,920 --> 00:03:27,299
easier exercise than running in our

00:03:25,590 --> 00:03:30,720
experience during the additional label

00:03:27,299 --> 00:03:33,030
relational models there's some I guess

00:03:30,720 --> 00:03:35,640
give and take in having the flexibility

00:03:33,030 --> 00:03:38,670
to run at scale across multiple boxes

00:03:35,640 --> 00:03:40,350
but for the most part that's what kind

00:03:38,670 --> 00:03:44,450
of has driven the need to have inflicted

00:03:40,350 --> 00:03:47,250
Sandra and register the need to kind of

00:03:44,450 --> 00:03:50,160
support tens of thousand hundred

00:03:47,250 --> 00:03:51,630
thousand or millions of users yep number

00:03:50,160 --> 00:03:53,730
two they guessed with the web we didn't

00:03:51,630 --> 00:03:55,500
really know in a corporate world

00:03:53,730 --> 00:03:57,180
enterprise world you know you've got 200

00:03:55,500 --> 00:03:58,200
people in your department technical your

00:03:57,180 --> 00:03:59,519
apartment you know you kind of know the

00:03:58,200 --> 00:04:00,870
numbers you're working with but as far

00:03:59,519 --> 00:04:02,519
as web goes it's hard to know whether I

00:04:00,870 --> 00:04:04,799
mean one person using application or a

00:04:02,519 --> 00:04:07,049
million by using application so i think

00:04:04,799 --> 00:04:11,940
most scale across boxes really quickly

00:04:07,049 --> 00:04:16,320
and easily operates without a schema now

00:04:11,940 --> 00:04:19,560
schema is a bit of a this just turn up

00:04:16,320 --> 00:04:21,299
schema left is a bit of a catch-22 it

00:04:19,560 --> 00:04:22,860
really is not schema-less in a sense it

00:04:21,299 --> 00:04:25,349
is skinless and that you don't have to

00:04:22,860 --> 00:04:26,970
define the table structures but you

00:04:25,349 --> 00:04:27,600
still have to give some thought to how

00:04:26,970 --> 00:04:30,540
you're going to lay out

00:04:27,600 --> 00:04:32,130
cheer your database because there are

00:04:30,540 --> 00:04:35,010
many there are many gotchas if you do

00:04:32,130 --> 00:04:37,710
that wrong so it is schema-less in the

00:04:35,010 --> 00:04:39,480
sense taking this update item for

00:04:37,710 --> 00:04:40,890
documents and it's in a collection but

00:04:39,480 --> 00:04:44,730
you still kind of gets methought to the

00:04:40,890 --> 00:04:46,230
overall database structure it's a shift

00:04:44,730 --> 00:04:48,050
away from the relational model then

00:04:46,230 --> 00:04:50,640
there are kind of guess for kind of key

00:04:48,050 --> 00:04:52,800
categories of multiple databases today

00:04:50,640 --> 00:04:54,720
and they are the key but are you the

00:04:52,800 --> 00:04:59,700
document bakes the car loan based and

00:04:54,720 --> 00:05:01,440
the graph techno sequel databases so

00:04:59,700 --> 00:05:05,400
that's kind of the general definition of

00:05:01,440 --> 00:05:06,750
what Milt sequel databases mean so what

00:05:05,400 --> 00:05:11,160
does MongoDB and I guess how does it fit

00:05:06,750 --> 00:05:14,040
into that no sequel world this was I

00:05:11,160 --> 00:05:16,260
guess kind of thought that our first

00:05:14,040 --> 00:05:17,850
hearing of MongoDB keen about we're

00:05:16,260 --> 00:05:19,440
operations guys so we make sure things

00:05:17,850 --> 00:05:21,150
are we we instead of infrastructure many

00:05:19,440 --> 00:05:22,830
things are running we often them

00:05:21,150 --> 00:05:25,410
supporting developers and and their

00:05:22,830 --> 00:05:27,780
clients who have developers and the

00:05:25,410 --> 00:05:31,500
first project we heard about MongoDB was

00:05:27,780 --> 00:05:33,000
his mid-2010 a large retail site when

00:05:31,500 --> 00:05:36,930
large retail sites in Canada was going

00:05:33,000 --> 00:05:38,420
to run on being rebuilt and we were

00:05:36,930 --> 00:05:41,580
building infrastructure for it and

00:05:38,420 --> 00:05:44,130
because the timeline was so tight they

00:05:41,580 --> 00:05:45,840
had issues with the customer defining

00:05:44,130 --> 00:05:49,410
what their products were so every single

00:05:45,840 --> 00:05:50,250
day the product fields a variable

00:05:49,410 --> 00:05:52,320
different attributes around those

00:05:50,250 --> 00:05:53,310
products changed the point where they

00:05:52,320 --> 00:05:54,810
couldn't keep went back on redesigning

00:05:53,310 --> 00:05:57,180
the database to account for new

00:05:54,810 --> 00:05:58,500
attributes so I thought let's start

00:05:57,180 --> 00:06:01,260
putting our product information in

00:05:58,500 --> 00:06:04,170
multiple database take advantage of the

00:06:01,260 --> 00:06:05,970
schema lyst nature of it so they came to

00:06:04,170 --> 00:06:07,740
us that we're going to run MongoDB and

00:06:05,970 --> 00:06:09,930
rock this was our and practice with our

00:06:07,740 --> 00:06:12,270
first reaction to it yes we have to run

00:06:09,930 --> 00:06:14,550
we had weeks to set it up never heard of

00:06:12,270 --> 00:06:16,770
it before didn't know what it was

00:06:14,550 --> 00:06:18,180
housing to run and was going to be

00:06:16,770 --> 00:06:19,410
happening to handle a couple hundred

00:06:18,180 --> 00:06:23,760
thousand you need to use every single

00:06:19,410 --> 00:06:25,560
day so luckily the guys who built it

00:06:23,760 --> 00:06:28,470
built a very good product and for the

00:06:25,560 --> 00:06:33,990
most part it ran out of the box and we'd

00:06:28,470 --> 00:06:37,350
have to do a whole lot to babysit it it

00:06:33,990 --> 00:06:38,940
began in 2007 and it was actually

00:06:37,350 --> 00:06:41,220
initially conceived as part of a larger

00:06:38,940 --> 00:06:43,050
initiative on tangents part

00:06:41,220 --> 00:06:45,570
they were kind of building out a a

00:06:43,050 --> 00:06:49,200
platform of the service offering much

00:06:45,570 --> 00:06:50,640
like a sure and the one would be news

00:06:49,200 --> 00:06:52,650
let me kind of database with a

00:06:50,640 --> 00:06:56,640
persistent data storage for that dot

00:06:52,650 --> 00:06:58,380
platform but over time they realize they

00:06:56,640 --> 00:07:01,320
had something in the database itself and

00:06:58,380 --> 00:07:04,230
they kind of shifted their focus to the

00:07:01,320 --> 00:07:05,940
actual data store and kind of the other

00:07:04,230 --> 00:07:09,420
pieces of kind of coming to play now on

00:07:05,940 --> 00:07:10,950
that MongoDB Inc has a modding service

00:07:09,420 --> 00:07:12,480
and a backup service and they're working

00:07:10,950 --> 00:07:14,370
on contains integration service as well

00:07:12,480 --> 00:07:16,800
they're kind of building services to

00:07:14,370 --> 00:07:19,380
support the database but the initial I

00:07:16,800 --> 00:07:21,630
design was for a much much broader

00:07:19,380 --> 00:07:22,710
initiative and they home backed out the

00:07:21,630 --> 00:07:26,970
database once he realized they had

00:07:22,710 --> 00:07:29,520
something in the database 2009 was open

00:07:26,970 --> 00:07:31,860
sourced with the DA GPL license and

00:07:29,520 --> 00:07:34,230
version 14 was released in march two

00:07:31,860 --> 00:07:37,169
thousand ten our first introduction to

00:07:34,230 --> 00:07:41,640
it was 1.6 which was just a few months

00:07:37,169 --> 00:07:44,190
later so we were kind of one stable

00:07:41,640 --> 00:07:46,740
version above production-ready running a

00:07:44,190 --> 00:07:51,060
large retail site in canada so it was it

00:07:46,740 --> 00:07:52,880
was interesting experience as mentioned

00:07:51,060 --> 00:07:55,710
i think this is this is from this month

00:07:52,880 --> 00:07:58,290
MongoDB is actually the number six

00:07:55,710 --> 00:08:01,620
database now are ranked by DB engines

00:07:58,290 --> 00:08:04,890
and I believe it's the number one note

00:08:01,620 --> 00:08:08,550
sequel database it is and we can see

00:08:04,890 --> 00:08:09,840
that actually there are 11 and 13 or the

00:08:08,550 --> 00:08:12,419
other notable databases we have a

00:08:09,840 --> 00:08:14,640
document database and we have the column

00:08:12,419 --> 00:08:18,150
one and we have a key value one already

00:08:14,640 --> 00:08:20,100
in the top 13 databases so no sequel is

00:08:18,150 --> 00:08:21,180
has the momentum has legs and I think

00:08:20,100 --> 00:08:28,280
it's going to be heroes day for quite a

00:08:21,180 --> 00:08:32,070
while so what is MongoDB well it's a

00:08:28,280 --> 00:08:35,190
document database it's an open source

00:08:32,070 --> 00:08:38,280
database it's high performance that's

00:08:35,190 --> 00:08:40,169
it's very fast database it's easily

00:08:38,280 --> 00:08:42,810
horizontally scalable and it's full

00:08:40,169 --> 00:08:46,280
featured in every iteration every stable

00:08:42,810 --> 00:08:46,280
release kind of introduces new features

00:08:46,760 --> 00:08:52,770
so I guess the first question is what's

00:08:49,050 --> 00:08:54,960
a document database and the MongoDB

00:08:52,770 --> 00:08:57,960
sense a document database isn't a word

00:08:54,960 --> 00:09:03,030
signed a PDF file its most it's it's a

00:08:57,960 --> 00:09:04,680
JSON document you can store actual

00:09:03,030 --> 00:09:06,660
binary files like PDFs and images and

00:09:04,680 --> 00:09:09,480
documents in in bodegas oh it's

00:09:06,660 --> 00:09:10,530
called grid at desk so you can you can

00:09:09,480 --> 00:09:13,260
use those and they've actually got very

00:09:10,530 --> 00:09:14,850
large installs running great advice

00:09:13,260 --> 00:09:16,830
relations in the petabytes of scrub file

00:09:14,850 --> 00:09:20,340
storage for the most part we talk about

00:09:16,830 --> 00:09:24,870
document database we mean a JSON style

00:09:20,340 --> 00:09:25,860
of documents it's open source which is I

00:09:24,870 --> 00:09:28,950
guess why we're here talking about it

00:09:25,860 --> 00:09:31,530
today you can it's on github so you can

00:09:28,950 --> 00:09:33,750
download the source cheers what they use

00:09:31,530 --> 00:09:35,160
to track the issues and bug reports and

00:09:33,750 --> 00:09:37,530
again you can create a count sonjeera

00:09:35,160 --> 00:09:39,650
and just and you can calculate dating

00:09:37,530 --> 00:09:43,830
track issues that you might be having

00:09:39,650 --> 00:09:46,500
its licensed under the day GPL and you

00:09:43,830 --> 00:09:47,850
can get commercial licenses and they're

00:09:46,500 --> 00:09:49,560
very open to the community as well so

00:09:47,850 --> 00:09:54,360
you can submit contributions to the code

00:09:49,560 --> 00:09:59,760
of you if you are if you'd like so it's

00:09:54,360 --> 00:10:01,560
written in c++ and it uses memory mapped

00:09:59,760 --> 00:10:05,430
files which is a guess how it gains its

00:10:01,560 --> 00:10:07,440
its speed it runs nearly everywhere

00:10:05,430 --> 00:10:09,060
there's window installs there's Linux

00:10:07,440 --> 00:10:11,250
versions of it and there's a Mac

00:10:09,060 --> 00:10:12,870
versions of it I believe that the

00:10:11,250 --> 00:10:15,120
largest installed base though would

00:10:12,870 --> 00:10:16,980
probably be Linux by mapping there's

00:10:15,120 --> 00:10:20,060
there are a few windows but i'm not sure

00:10:16,980 --> 00:10:22,530
Benny actually writing a production

00:10:20,060 --> 00:10:25,200
other data is here lies back down to the

00:10:22,530 --> 00:10:30,990
beasts on and it has a full support for

00:10:25,200 --> 00:10:32,940
primary and secondary indexes so in the

00:10:30,990 --> 00:10:34,950
credit I guess the graph of where things

00:10:32,940 --> 00:10:38,340
stand as far as Mongol goes you have

00:10:34,950 --> 00:10:41,570
your very fast very scalable memcache

00:10:38,340 --> 00:10:44,610
and then you have your MongoDB which is

00:10:41,570 --> 00:10:45,810
has more functionality but still doesn't

00:10:44,610 --> 00:10:47,730
lose much on the performance and

00:10:45,810 --> 00:10:49,140
scalability and then you have your

00:10:47,730 --> 00:10:51,600
traditional relational database model

00:10:49,140 --> 00:10:54,120
which is uh at the bottom I guess this

00:10:51,600 --> 00:10:56,070
isn't quite true the RDI BMS can become

00:10:54,120 --> 00:10:58,890
quite scalable and performance-oriented

00:10:56,070 --> 00:11:02,040
but i think the effort to get to get up

00:10:58,890 --> 00:11:04,940
there is a is higher in both manpower

00:11:02,040 --> 00:11:04,940
and in cost

00:11:06,380 --> 00:11:14,130
so it's full feature you can do ad hoc

00:11:09,690 --> 00:11:16,680
queries has aggregation features rich

00:11:14,130 --> 00:11:19,860
query capabilities geospatial is built

00:11:16,680 --> 00:11:21,600
into it it supports both programming

00:11:19,860 --> 00:11:27,899
languages and it has a very flexible

00:11:21,600 --> 00:11:30,480
schema so if we look I guess the

00:11:27,899 --> 00:11:31,770
traditional view we have the table in

00:11:30,480 --> 00:11:35,370
view which will be a collection in

00:11:31,770 --> 00:11:37,760
MongoDB we have rows in the relational

00:11:35,370 --> 00:11:42,060
side which would kind of be documents

00:11:37,760 --> 00:11:44,700
indexes and index foreign keys is a

00:11:42,060 --> 00:11:46,560
reference or actually an embedded

00:11:44,700 --> 00:11:48,959
document as well and the idea of

00:11:46,560 --> 00:11:54,060
partitions is called starting in in

00:11:48,959 --> 00:11:57,899
MongoDB so here's your typical

00:11:54,060 --> 00:12:00,330
relational model if your article and

00:11:57,899 --> 00:12:03,470
your tables around reference by keys and

00:12:00,330 --> 00:12:06,959
then here's your MongoDB equivalent

00:12:03,470 --> 00:12:09,209
where you have a JSON document which has

00:12:06,959 --> 00:12:13,620
its embedded in it itself other

00:12:09,209 --> 00:12:18,120
documents and arrays to create the

00:12:13,620 --> 00:12:19,440
document i guess the ability cool one of

00:12:18,120 --> 00:12:20,820
the drivers behind it too is also i

00:12:19,440 --> 00:12:23,279
guess that impedance mismatch between

00:12:20,820 --> 00:12:25,230
what's actually in the tables and what's

00:12:23,279 --> 00:12:27,000
in memory the document method or

00:12:25,230 --> 00:12:29,430
document store method kind of removes

00:12:27,000 --> 00:12:32,160
that so i'm an invoice or in this case

00:12:29,430 --> 00:12:34,350
an article what's in memory what I

00:12:32,160 --> 00:12:39,810
present to the actual end user looks

00:12:34,350 --> 00:12:41,400
like that and I work with that versus

00:12:39,810 --> 00:12:44,220
working with that to build it into

00:12:41,400 --> 00:12:45,870
something that is usable so what I

00:12:44,220 --> 00:12:51,089
present' is it's much closer to actually

00:12:45,870 --> 00:12:54,870
how the data is stored one of the cool

00:12:51,089 --> 00:12:57,690
features is replication running a

00:12:54,870 --> 00:13:00,060
production MongoDB is recommends running

00:12:57,690 --> 00:13:01,560
in at least a replica set which they

00:13:00,060 --> 00:13:03,589
caught a percocet do you have your

00:13:01,560 --> 00:13:05,850
primary and you have your secondaries

00:13:03,589 --> 00:13:08,010
they recommend running with at least

00:13:05,850 --> 00:13:11,820
three in that set so wonderful cuts one

00:13:08,010 --> 00:13:14,029
primary two secondaries and you can read

00:13:11,820 --> 00:13:17,010
from the secondary so you get some a

00:13:14,029 --> 00:13:18,810
scalability that way as well but she

00:13:17,010 --> 00:13:19,260
writes the primary and then it's written

00:13:18,810 --> 00:13:21,750
to the stuff

00:13:19,260 --> 00:13:23,610
berries and application and this spill

00:13:21,750 --> 00:13:25,970
over to is actually automatic as well so

00:13:23,610 --> 00:13:28,500
the primary box the primary box dies a

00:13:25,970 --> 00:13:31,080
second ago pickup become a primary and

00:13:28,500 --> 00:13:35,400
application will function as if a box

00:13:31,080 --> 00:13:38,060
never died there's a dis a brief a brief

00:13:35,400 --> 00:13:41,700
few seconds there well it pulls and it

00:13:38,060 --> 00:13:43,200
promotes a secondary to two primary for

00:13:41,700 --> 00:13:44,340
the most part it happens without anybody

00:13:43,200 --> 00:13:45,930
actually knowing about into you I'm

00:13:44,340 --> 00:13:46,680
going to go oh my primary box is down or

00:13:45,930 --> 00:13:49,620
you've got some kind of monitoring

00:13:46,680 --> 00:13:51,300
software in place and this is going to

00:13:49,620 --> 00:13:52,440
build out of the box and I'll kind of do

00:13:51,300 --> 00:13:57,780
it down won't show you how easy it is to

00:13:52,440 --> 00:13:59,280
kind of run and cover up a set and then

00:13:57,780 --> 00:14:01,440
they use what's called sharding now

00:13:59,280 --> 00:14:03,750
starting out you let you put multiple

00:14:01,440 --> 00:14:07,110
data on multiple boxes so in this case

00:14:03,750 --> 00:14:09,510
here the replication this server here

00:14:07,110 --> 00:14:10,680
would have the entire data set so your

00:14:09,510 --> 00:14:12,210
entire application will live on the

00:14:10,680 --> 00:14:14,370
primary and it's actually mirror to the

00:14:12,210 --> 00:14:17,640
secondaries so the data is consistent on

00:14:14,370 --> 00:14:21,240
all three servers in a shorter

00:14:17,640 --> 00:14:23,520
environment the data is actually split

00:14:21,240 --> 00:14:25,920
up so you have your data spread across

00:14:23,520 --> 00:14:28,860
four machine so machine one will have

00:14:25,920 --> 00:14:32,100
you know one two three machine too will

00:14:28,860 --> 00:14:33,960
have four to six they did spread across

00:14:32,100 --> 00:14:36,330
the servers and it handles that

00:14:33,960 --> 00:14:37,800
balancing automatically as well so when

00:14:36,330 --> 00:14:39,570
you throw data at it you have a charting

00:14:37,800 --> 00:14:41,190
set up it will actually figure out what

00:14:39,570 --> 00:14:42,870
data should live on which box and you

00:14:41,190 --> 00:14:44,940
know the rebel where the data lives you

00:14:42,870 --> 00:14:46,110
talk to your manga less service and it

00:14:44,940 --> 00:14:48,060
figures out which server actually has

00:14:46,110 --> 00:14:51,990
the data collects it and purchase it

00:14:48,060 --> 00:14:53,880
back to the driver and this is a

00:14:51,990 --> 00:14:57,030
actually picture of how the whole thing

00:14:53,880 --> 00:14:58,380
we're going to be set up you have your

00:14:57,030 --> 00:15:01,700
client which would probably be your

00:14:58,380 --> 00:15:03,990
driver talk to a Mongol s process and

00:15:01,700 --> 00:15:05,880
the config server kind of gives an idea

00:15:03,990 --> 00:15:08,310
of where helping just set up which how

00:15:05,880 --> 00:15:10,320
the shards are set up and wes is

00:15:08,310 --> 00:15:12,270
essentially the router the request comes

00:15:10,320 --> 00:15:14,040
in for data wonder what's looks good

00:15:12,270 --> 00:15:15,690
we're going to live i live on short one

00:15:14,040 --> 00:15:18,690
without the chart one and talks to

00:15:15,690 --> 00:15:20,160
primary and gets data sense it back if

00:15:18,690 --> 00:15:22,710
the data lives actually across multiple

00:15:20,160 --> 00:15:24,420
servers it'll talk to all the boxes pull

00:15:22,710 --> 00:15:28,200
the data back aggregated and submit it

00:15:24,420 --> 00:15:30,900
back as well replicas and the shards

00:15:28,200 --> 00:15:32,570
actually consists of replica sets so the

00:15:30,900 --> 00:15:35,480
data is so this data has

00:15:32,570 --> 00:15:36,950
unique data from this server but the

00:15:35,480 --> 00:15:38,600
data is consistent across the replica

00:15:36,950 --> 00:15:42,880
set so again if you lose if this box

00:15:38,600 --> 00:15:42,880
dies the applications for functions

00:15:45,970 --> 00:15:51,260
MongoDB org slash downloads is where you

00:15:49,160 --> 00:15:53,860
can pick up MongoDB I think it's

00:15:51,260 --> 00:15:59,660
actually 247 now looks the most recent

00:15:53,860 --> 00:16:03,080
most recent version and running MongoDB

00:15:59,660 --> 00:16:07,430
is fairly easy these four lines get you

00:16:03,080 --> 00:16:17,360
up and running with MongoDB and i think

00:16:07,430 --> 00:16:22,250
i'm going to try a demo here can you all

00:16:17,360 --> 00:16:24,490
see that is that the big enough okay so

00:16:22,250 --> 00:16:28,280
I've got the I've downloaded the mongodb

00:16:24,490 --> 00:16:35,390
file off the download site and i have a

00:16:28,280 --> 00:16:37,850
small script here that will just on

00:16:35,390 --> 00:16:43,160
target and it will actually fire up a

00:16:37,850 --> 00:16:51,290
MongoDB process this line here is the

00:16:43,160 --> 00:16:52,580
line that starts up the process so

00:16:51,290 --> 00:16:55,670
you're often like with I guess unix in

00:16:52,580 --> 00:16:57,680
the command line so all we're doing here

00:16:55,670 --> 00:16:59,480
is calling the binary for specifying the

00:16:57,680 --> 00:17:02,030
data path which in this case give me

00:16:59,480 --> 00:17:03,550
directory one we're going to fork it's

00:17:02,030 --> 00:17:07,880
we're going to back around the process

00:17:03,550 --> 00:17:09,890
log of pens but is going to say if you

00:17:07,880 --> 00:17:11,959
start up again don't trash the lock the

00:17:09,890 --> 00:17:14,449
lucky the log I just append to instead a

00:17:11,959 --> 00:17:17,089
lot of paths defines a lot path small

00:17:14,449 --> 00:17:19,370
files this is don't go crazy and it's

00:17:17,089 --> 00:17:20,600
running a little devil and so am I

00:17:19,370 --> 00:17:22,910
believe me don't create dark journals

00:17:20,600 --> 00:17:25,790
and the port specifies the quarter it

00:17:22,910 --> 00:17:28,430
runs on and there are defaults here as

00:17:25,790 --> 00:17:31,160
well if you don't specify the DB path it

00:17:28,430 --> 00:17:34,670
will assume to be in / data if you don't

00:17:31,160 --> 00:17:37,300
specify the port by default it around 27

00:17:34,670 --> 00:17:37,300
or 17

00:17:38,210 --> 00:17:59,790
so if all goes well we should have a

00:17:44,970 --> 00:18:14,490
process running here and it is running

00:17:59,790 --> 00:18:16,320
on 27 017 so what does that mean it

00:18:14,490 --> 00:18:31,160
means I have a server nuts you guys kind

00:18:16,320 --> 00:18:35,010
of small down there so I have a database

00:18:31,160 --> 00:18:38,460
running one would you be now and this

00:18:35,010 --> 00:18:39,870
kind of gets you started the one the one

00:18:38,460 --> 00:18:42,330
problem that i do have with mum would

00:18:39,870 --> 00:18:46,400
you be if i have any problems at all is

00:18:42,330 --> 00:18:46,400
that it's it's too easy to do this

00:18:46,520 --> 00:18:50,940
things like mongolab and Longo HQ if you

00:18:49,590 --> 00:18:51,990
want to use you don't have the effort of

00:18:50,940 --> 00:18:53,580
Russia running long would you be

00:18:51,990 --> 00:18:55,470
yourself wearing a replica sets and

00:18:53,580 --> 00:18:57,480
backups and all those things up to kind

00:18:55,470 --> 00:18:59,940
of play into operations compliance

00:18:57,480 --> 00:19:01,830
requirements security and backing up and

00:18:59,940 --> 00:19:04,470
bill oberst and high availability and

00:19:01,830 --> 00:19:06,930
all that stuff a lot of developers use

00:19:04,470 --> 00:19:09,330
one will lapse and HQ so it's kind

00:19:06,930 --> 00:19:11,370
of a database as a service they work

00:19:09,330 --> 00:19:12,780
great here on amazon they run amazon

00:19:11,370 --> 00:19:16,950
server so there's no lately say with the

00:19:12,780 --> 00:19:21,150
database makes it very easy but too

00:19:16,950 --> 00:19:22,500
often we find that developers I guess

00:19:21,150 --> 00:19:23,940
the ease of which developers can develop

00:19:22,500 --> 00:19:26,370
applications now and use services like

00:19:23,940 --> 00:19:28,410
Amazon and labs and Heroku and all

00:19:26,370 --> 00:19:30,720
these services kind of remove the

00:19:28,410 --> 00:19:32,820
important group the impression that

00:19:30,720 --> 00:19:34,140
operations and sis administration is

00:19:32,820 --> 00:19:37,130
actually requirement anymore an

00:19:34,140 --> 00:19:39,630
important work effort it's kind of been

00:19:37,130 --> 00:19:41,040
nullified in the Senate though we don't

00:19:39,630 --> 00:19:43,410
looked upon as being required anymore

00:19:41,040 --> 00:19:45,570
and what we find is if you don't use

00:19:43,410 --> 00:19:47,190
those services you fire for instance

00:19:45,570 --> 00:19:48,510
you're running a standalone instance and

00:19:47,190 --> 00:19:50,010
you can actually start talking up this

00:19:48,510 --> 00:19:51,030
could be a full-fledged application but

00:19:50,010 --> 00:19:51,760
you could handle its kind of huge

00:19:51,030 --> 00:19:53,380
traffic as well

00:19:51,760 --> 00:19:54,670
they start talking to this thing and

00:19:53,380 --> 00:19:56,110
they create new databases you don't they

00:19:54,670 --> 00:20:07,660
actually do any work as far as creating

00:19:56,110 --> 00:20:12,030
the database goes if I do an insert and

00:20:07,660 --> 00:20:14,890
let's do uh so we can recall in the

00:20:12,030 --> 00:20:17,110
province of relational an MA I no sequel

00:20:14,890 --> 00:20:18,790
a collection the table so right now

00:20:17,110 --> 00:20:25,660
there's no tables in this in this in

00:20:18,790 --> 00:20:41,280
this database so if I make one called a

00:20:25,660 --> 00:20:45,280
fast buck insert there's now an f sauce

00:20:41,280 --> 00:20:47,440
table so all you was just a certain a

00:20:45,280 --> 00:20:49,870
salon document and it created because it

00:20:47,440 --> 00:20:51,970
didn't exist it creates it and the work

00:20:49,870 --> 00:20:56,350
same with the database doesn't exist it

00:20:51,970 --> 00:20:58,510
creates it so if you kind of are

00:20:56,350 --> 00:21:02,350
comparing it back to the world of my

00:20:58,510 --> 00:21:06,040
sequel and ms SQL and oracle just you

00:21:02,350 --> 00:21:10,150
don't get this kind of flexibility with

00:21:06,040 --> 00:21:12,220
it so there's the DBA role is kind of

00:21:10,150 --> 00:21:14,470
relegated to the side because developers

00:21:12,220 --> 00:21:18,190
can just throw data at a database and it

00:21:14,470 --> 00:21:20,230
creates it which which can be a problem

00:21:18,190 --> 00:21:21,880
if you're not having it properly backed

00:21:20,230 --> 00:21:27,040
up and maintained and make sure it's in

00:21:21,880 --> 00:21:29,260
here and all kind of stuff so this is an

00:21:27,040 --> 00:21:32,470
example of quickly getting able to

00:21:29,260 --> 00:21:35,770
actually run a standalone instance of

00:21:32,470 --> 00:21:37,450
MongoDB and I believe there should only

00:21:35,770 --> 00:21:46,930
be one MongoDB process running right now

00:21:37,450 --> 00:21:51,130
I get a bunch of a docker tests but

00:21:46,930 --> 00:21:54,520
here's the one I did I started up more

00:21:51,130 --> 00:21:58,710
than 120 7017 so I'm just going to kill

00:21:54,520 --> 00:21:58,710
this guy and I'll do an example of

00:22:01,600 --> 00:22:11,840
and he's dead so let's do a replica set

00:22:09,200 --> 00:22:18,320
instead so that was one wild again since

00:22:11,840 --> 00:22:20,360
running here I'm going to do the same

00:22:18,320 --> 00:22:24,260
thing is that under three instances

00:22:20,360 --> 00:22:26,840
running on porch 27 or 17 or 18 or 19

00:22:24,260 --> 00:22:28,760
and all I'm going to do really is just

00:22:26,840 --> 00:22:32,360
specify the fact they belong to a

00:22:28,760 --> 00:22:42,020
replica sect and i'll call it a cassette

00:22:32,360 --> 00:22:45,049
FS OSS so if i start this guy up you

00:22:42,020 --> 00:22:53,510
shouldn't end up with three instances

00:22:45,049 --> 00:22:58,480
running and there they are 27 0 190 180

00:22:53,510 --> 00:23:07,669
17 now they should be complaining that

00:22:58,480 --> 00:23:08,780
she had people to that the configuration

00:23:07,669 --> 00:23:10,610
is not actually working right now but

00:23:08,780 --> 00:23:12,020
I've started them up I said you're in a

00:23:10,610 --> 00:23:15,559
replica set but nothing's actually been

00:23:12,020 --> 00:23:24,950
done through up of a set so let's log

00:23:15,559 --> 00:23:27,350
back into the shell and by default 2701

00:23:24,950 --> 00:23:28,460
seven will be the port shell wants

00:23:27,350 --> 00:23:35,120
to connect to so that's what I'm

00:23:28,460 --> 00:23:37,820
connector to actually right now and i'm

00:23:35,120 --> 00:23:40,100
just going to initiate the replica set

00:23:37,820 --> 00:23:41,690
so I've won the first blocks and I'm

00:23:40,100 --> 00:23:46,970
running replica set now so I probably

00:23:41,690 --> 00:23:52,340
get an RF status now and they're am I'm

00:23:46,970 --> 00:23:54,200
a whole number of one and if I give you

00:23:52,340 --> 00:23:55,789
some time yet so its analysis now our

00:23:54,200 --> 00:23:57,679
primary so you can see just kind of kick

00:23:55,789 --> 00:24:01,190
this up in the primary so now I'm

00:23:57,679 --> 00:24:03,490
actually the primary so let's add the

00:24:01,190 --> 00:24:03,490
other guys

00:24:07,240 --> 00:24:18,320
27 0 18 i believe and nine now the one

00:24:16,460 --> 00:24:21,080
thing here that's always a gotcha is the

00:24:18,320 --> 00:24:24,950
fact you have to use the name you can't

00:24:21,080 --> 00:24:27,590
use localhost or 127 001 replicas have

00:24:24,950 --> 00:24:29,750
tables to live on separate boxes so they

00:24:27,590 --> 00:24:32,000
kind of add that safeguard to say no you

00:24:29,750 --> 00:24:35,870
can't represent a local host but use a

00:24:32,000 --> 00:24:40,779
hostname you're okay so if I do an RS

00:24:35,870 --> 00:24:43,039
status now I've got a couple boxes here

00:24:40,779 --> 00:24:44,990
this guy is actually running secondary

00:24:43,039 --> 00:24:49,070
and its third one here are still syncing

00:24:44,990 --> 00:24:56,299
up and now we're we're good so there is

00:24:49,070 --> 00:24:57,769
now three rough of assets running so in

00:24:56,299 --> 00:25:01,909
the real world these will be three

00:24:57,769 --> 00:25:05,750
separate boxes but for the demo we'll

00:25:01,909 --> 00:25:07,909
just have it different ports now data

00:25:05,750 --> 00:25:17,230
says I'm on primary data now well

00:25:07,909 --> 00:25:17,230
actually if I do a insert

00:25:29,150 --> 00:25:39,570
there's my document that is created and

00:25:34,920 --> 00:25:42,950
I'm on the primary box right now so

00:25:39,570 --> 00:25:52,130
let's do let's do something nasty and

00:25:42,950 --> 00:26:02,220
let's kill the primary box black is that

00:25:52,130 --> 00:26:04,770
27 00 17 so 24 so he should be dead so

00:26:02,220 --> 00:26:18,270
now there's only two running and they

00:26:04,770 --> 00:26:27,620
were secondaries so let me connect to 27

00:26:18,270 --> 00:26:38,940
for 18 and he should become our primary

00:26:27,620 --> 00:26:41,010
nope the 09 game primary serious so that

00:26:38,940 --> 00:26:43,320
happened without me doing anything this

00:26:41,010 --> 00:26:46,650
guy just one box dies and boom I got new

00:26:43,320 --> 00:26:52,800
box and if i do a DB dot i should they

00:26:46,650 --> 00:26:56,810
go to i use tests show collections there

00:26:52,800 --> 00:26:56,810
was my FS and then i'd give a DB klein

00:26:59,150 --> 00:27:04,650
if it's luck with me so just like that

00:27:02,430 --> 00:27:08,250
you've got replication across mobile

00:27:04,650 --> 00:27:10,200
boxes but i think is production pretty

00:27:08,250 --> 00:27:12,150
cool you have to kind of have to do this

00:27:10,200 --> 00:27:15,750
in the in the relational model role in

00:27:12,150 --> 00:27:17,250
my sequel world or it's not like this so

00:27:15,750 --> 00:27:23,160
it's kind of cool actually how you can

00:27:17,250 --> 00:27:25,680
get this so that's the demo somewhere

00:27:23,160 --> 00:27:29,760
the demo actually worked but this guy

00:27:25,680 --> 00:27:32,520
gets a recap of what i learned over the

00:27:29,760 --> 00:27:36,420
manga shell is a lets you run JavaScript

00:27:32,520 --> 00:27:39,210
pretty much so you can insert documents

00:27:36,420 --> 00:27:40,370
you can create the document database you

00:27:39,210 --> 00:27:45,210
can

00:27:40,370 --> 00:27:47,490
guess status of the database and here

00:27:45,210 --> 00:27:51,840
it's going to create a variable call it

00:27:47,490 --> 00:27:53,580
user if we switch to the database and we

00:27:51,840 --> 00:27:55,560
do our insert and again there's no

00:27:53,580 --> 00:27:57,150
collection creation require you don't

00:27:55,560 --> 00:28:00,080
think create the table to do the insert

00:27:57,150 --> 00:28:02,760
it will exist it will it will create it

00:28:00,080 --> 00:28:04,290
same thing with the actual documents

00:28:02,760 --> 00:28:05,790
itself which is kind of handy when you

00:28:04,290 --> 00:28:07,860
have an application that's changing

00:28:05,790 --> 00:28:10,320
requirements all the time if all of a

00:28:07,860 --> 00:28:12,180
sudden you've got a application that has

00:28:10,320 --> 00:28:14,100
an invoice for example know you're

00:28:12,180 --> 00:28:15,930
getting is the birth name last name date

00:28:14,100 --> 00:28:17,940
and an order number and also make a

00:28:15,930 --> 00:28:20,880
whiny why I need the total or the an

00:28:17,940 --> 00:28:22,830
item for that you can just throw make

00:28:20,880 --> 00:28:25,830
the next insert in the database for the

00:28:22,830 --> 00:28:27,180
collection have those new attributes you

00:28:25,830 --> 00:28:29,010
don't go back through and figure out how

00:28:27,180 --> 00:28:30,240
to sort it out and great nulls and all

00:28:29,010 --> 00:28:36,690
that kind of stuff to get it all nice

00:28:30,240 --> 00:28:40,530
and clean find one justice finds to be

00:28:36,690 --> 00:28:43,200
the first object now what you got here

00:28:40,530 --> 00:28:44,970
is in the ID so the idea essentially I

00:28:43,200 --> 00:28:48,150
guess is it guess you could say it's the

00:28:44,970 --> 00:28:52,680
primary key of the via the collection

00:28:48,150 --> 00:28:55,980
itself it's automatically indexed you

00:28:52,680 --> 00:28:57,360
can specify a an object ID your so you

00:28:55,980 --> 00:28:59,460
don't have to use that the one that long

00:28:57,360 --> 00:29:01,020
ago will generate you can use another

00:28:59,460 --> 00:29:04,650
you can specify a natural key to use

00:29:01,020 --> 00:29:08,430
instead and it's immutable of course

00:29:04,650 --> 00:29:10,290
it's a 12 x value and the kind of mac

00:29:08,430 --> 00:29:15,960
address from protest i do have such a

00:29:10,290 --> 00:29:18,270
unique value so this is inserting

00:29:15,960 --> 00:29:20,580
another more complicated JSON document

00:29:18,270 --> 00:29:22,650
in which case we have arrays in it and

00:29:20,580 --> 00:29:25,260
comments but if you're familiar with

00:29:22,650 --> 00:29:27,210
JSON it's very easy to do and I think

00:29:25,260 --> 00:29:29,250
this is why Mongo's have picked up so

00:29:27,210 --> 00:29:31,080
quickly in the developed world because

00:29:29,250 --> 00:29:34,980
it kind of speaks the same language that

00:29:31,080 --> 00:29:36,770
developers already speaking so we do a

00:29:34,980 --> 00:29:42,510
fine here and there's the there's the

00:29:36,770 --> 00:29:44,610
out value we can query an array we can

00:29:42,510 --> 00:29:47,400
actually say find me and has got tags

00:29:44,610 --> 00:29:49,170
that has a venture in it and even get

00:29:47,400 --> 00:29:50,670
very very complicated very complex if

00:29:49,170 --> 00:29:51,930
you go to the MongoDB network site for

00:29:50,670 --> 00:29:53,280
documentation look at the aggregation

00:29:51,930 --> 00:29:53,980
framework you can get very complicated

00:29:53,280 --> 00:29:58,059
for

00:29:53,980 --> 00:30:01,120
is that has native findings for twelve

00:29:58,059 --> 00:30:03,730
languages so it's out there for all of

00:30:01,120 --> 00:30:06,700
the internet even black has link support

00:30:03,730 --> 00:30:12,010
as well so you're done a developer scale

00:30:06,700 --> 00:30:13,840
of PHP Ruby nodejs is the interesting

00:30:12,010 --> 00:30:15,840
one there's been a lot of I guess

00:30:13,840 --> 00:30:19,210
because you've got now a nodejs

00:30:15,840 --> 00:30:22,150
JavaScript world application server and

00:30:19,210 --> 00:30:24,220
a MongoDB or database that talks JSON

00:30:22,150 --> 00:30:25,870
eventually got in JavaScript and json

00:30:24,220 --> 00:30:28,870
enough we talked to bottom and there's a

00:30:25,870 --> 00:30:31,110
term for now called the mean stack so as

00:30:28,870 --> 00:30:36,630
opposed to laugh it's now mean you just

00:30:31,110 --> 00:30:38,740
MongoDB express angularjs and nodejs so

00:30:36,630 --> 00:30:40,090
one of them were part of the groups in

00:30:38,740 --> 00:30:41,710
Toronto right now is actually the end or

00:30:40,090 --> 00:30:44,280
a Jewish group there's lots of momentum

00:30:41,710 --> 00:30:46,120
around the idea of being able to write

00:30:44,280 --> 00:30:47,590
JavaScript top to the bottom and again I

00:30:46,120 --> 00:30:50,650
guess this is trend toward making it

00:30:47,590 --> 00:30:52,270
over lives easier that they can kind of

00:30:50,650 --> 00:30:54,220
talk the same language from top to

00:30:52,270 --> 00:30:56,530
bottom you don't need to have a full a

00:30:54,220 --> 00:30:59,049
full team of people to manage databases

00:30:56,530 --> 00:31:00,370
and hard drives and networking and all

00:30:59,049 --> 00:31:02,799
that stuff that kind of goes away in

00:31:00,370 --> 00:31:07,419
Newton's credit card in the kitchen

00:31:02,799 --> 00:31:10,179
table you work the driver is actually

00:31:07,419 --> 00:31:13,900
connect with the servers they translate

00:31:10,179 --> 00:31:15,490
the beasts on to the native type the

00:31:13,900 --> 00:31:17,080
Mongol shell is not a driver but works

00:31:15,490 --> 00:31:18,730
like one in some ways you can we can

00:31:17,080 --> 00:31:23,020
kind of you can test your queries and

00:31:18,730 --> 00:31:25,090
your your fines in it and installing

00:31:23,020 --> 00:31:26,799
them usually just means whatever driver

00:31:25,090 --> 00:31:28,179
you're using or framework you're using

00:31:26,799 --> 00:31:37,030
and usually when they're there for

00:31:28,179 --> 00:31:40,900
package management's so gem NPM okay so

00:31:37,030 --> 00:31:42,100
some case studies that site we talked

00:31:40,900 --> 00:31:45,130
about the beginning was actually the

00:31:42,100 --> 00:31:47,830
walmart dossier site it ran in canada

00:31:45,130 --> 00:31:51,190
for a year before got pulled back down

00:31:47,830 --> 00:31:56,260
to the states for political reasons but

00:31:51,190 --> 00:31:59,950
i ran in canada for a year and this was

00:31:56,260 --> 00:32:02,169
our thought was that though oh my god

00:31:59,950 --> 00:32:05,230
what his mom would be be could you pick

00:32:02,169 --> 00:32:07,530
a more public site to test us on

00:32:05,230 --> 00:32:11,290
and I it actually worked out very well

00:32:07,530 --> 00:32:12,700
we deployed it in the because we had my

00:32:11,290 --> 00:32:15,640
experience with kind of that replica set

00:32:12,700 --> 00:32:17,559
idea we deployed it in a now not

00:32:15,640 --> 00:32:18,370
supported way it's only one going to be

00:32:17,559 --> 00:32:20,530
which is the old traditional

00:32:18,370 --> 00:32:23,020
master-slave model but I was only a

00:32:20,530 --> 00:32:25,390
model we kind of understood time so we

00:32:23,020 --> 00:32:27,520
deployed it that way so you would have

00:32:25,390 --> 00:32:28,929
had no i'm at a failover he wouldn't had

00:32:27,520 --> 00:32:31,830
that advantage we but it had to fail it

00:32:28,929 --> 00:32:34,090
over and manager ourselves but for

00:32:31,830 --> 00:32:35,380
someone to know if we're kind of having

00:32:34,090 --> 00:32:40,120
a few weeks to kind of get it running

00:32:35,380 --> 00:32:42,250
and figuring it out it ran it ran really

00:32:40,120 --> 00:32:43,780
really well and for the year man in

00:32:42,250 --> 00:32:45,700
canada there we didn't have any downtime

00:32:43,780 --> 00:32:50,200
at all via the one hundred percent of

00:32:45,700 --> 00:32:53,260
time on a product that you kind of

00:32:50,200 --> 00:32:54,280
learned in a few weeks nothing is a good

00:32:53,260 --> 00:32:55,750
testament to actually help stable to

00:32:54,280 --> 00:33:00,130
project actually is and that was back in

00:32:55,750 --> 00:33:03,730
1.6 company stated run it foursquare

00:33:00,130 --> 00:33:07,179
runs it craigslist runs it in there

00:33:03,730 --> 00:33:09,040
after the next cake study but it was

00:33:07,179 --> 00:33:10,510
built very quickly the reason for the

00:33:09,040 --> 00:33:11,710
reason for again i mentioned the

00:33:10,510 --> 00:33:12,880
getting was the fact that the schema

00:33:11,710 --> 00:33:15,669
kept changing for the product

00:33:12,880 --> 00:33:18,130
information so the buckley application

00:33:15,669 --> 00:33:20,710
actually ran in mysql so all the site

00:33:18,130 --> 00:33:23,290
navigation the law gonzalez that ran in

00:33:20,710 --> 00:33:25,929
mysql all it is all the live d'mongo at

00:33:23,290 --> 00:33:28,090
the time was just the actual products so

00:33:25,929 --> 00:33:29,710
if you went to look at a camera you know

00:33:28,090 --> 00:33:31,929
the image reference was there the

00:33:29,710 --> 00:33:33,760
description the price I lived in

00:33:31,929 --> 00:33:37,750
but how you got to that camera in the

00:33:33,760 --> 00:33:39,970
site was all kind by my sequel early on

00:33:37,750 --> 00:33:42,549
I guess you just a few years ago the

00:33:39,970 --> 00:33:45,880
most part MongoDB existed in that's in

00:33:42,549 --> 00:33:49,059
that way a small application or small

00:33:45,880 --> 00:33:51,250
use of it inside a larger relational

00:33:49,059 --> 00:33:53,169
model so you have booked application

00:33:51,250 --> 00:33:55,090
running in my sequel or other regional

00:33:53,169 --> 00:33:55,990
database and you'd have a small thing

00:33:55,090 --> 00:33:58,750
that kind of thing quite that the

00:33:55,990 --> 00:34:00,960
relational model but we'll try it in the

00:33:58,750 --> 00:34:04,059
 and would run my side my sequel

00:34:00,960 --> 00:34:05,500
only an 8020 split my seek will be in 20

00:34:04,059 --> 00:34:08,590
of eighty percent and one will be twenty

00:34:05,500 --> 00:34:11,500
percent but over the years last last

00:34:08,590 --> 00:34:13,659
year's it's it's changed we're finding

00:34:11,500 --> 00:34:16,540
more and more now that people actually

00:34:13,659 --> 00:34:18,970
start with they build entirely

00:34:16,540 --> 00:34:21,580
 and then where it makes sense

00:34:18,970 --> 00:34:24,419
back into relational database there are

00:34:21,580 --> 00:34:26,409
some things one will can't do

00:34:24,419 --> 00:34:28,889
transactions for example if you have

00:34:26,409 --> 00:34:31,990
doing any kind of ecommerce stuff

00:34:28,889 --> 00:34:34,000
there's no if there's a comic operations

00:34:31,990 --> 00:34:36,129
within the document itself but not

00:34:34,000 --> 00:34:38,429
across documents so those kind of things

00:34:36,129 --> 00:34:41,050
have to happen the best bet is my sequel

00:34:38,429 --> 00:34:44,379
but for the most part people kind of

00:34:41,050 --> 00:34:49,780
start now in and where it needs to

00:34:44,379 --> 00:34:51,399
be relational they fit that in another

00:34:49,780 --> 00:34:53,020
thing one knows who what Redis is the

00:34:51,399 --> 00:34:55,599
Redis is a kind of a key to key value

00:34:53,020 --> 00:34:57,099
store I heard we did a Mongol to be made

00:34:55,599 --> 00:34:59,980
up a few weeks ago and someone made a

00:34:57,099 --> 00:35:01,300
good at the point to set up whatever

00:34:59,980 --> 00:35:02,980
database you in and running have

00:35:01,300 --> 00:35:04,210
brightest in front of it so if you

00:35:02,980 --> 00:35:05,260
running my sequel have read it in front

00:35:04,210 --> 00:35:06,970
of it have you running one would it be

00:35:05,260 --> 00:35:08,590
I've write us in front of it and we're

00:35:06,970 --> 00:35:10,990
finding a lot of a lot of installs now

00:35:08,590 --> 00:35:13,270
are even ignoring the whole my sequel

00:35:10,990 --> 00:35:15,790
 battle they're actually having to

00:35:13,270 --> 00:35:19,109
read us and my tan Mongol combination

00:35:15,790 --> 00:35:19,109
that are now running applications

00:35:20,520 --> 00:35:27,369
craigslist is here I guess just to kind

00:35:22,660 --> 00:35:29,170
of show the fact that it can scale so 5

00:35:27,369 --> 00:35:33,760
billion documents can't care about 10

00:35:29,170 --> 00:35:35,680
terabytes of data I believe them the

00:35:33,760 --> 00:35:38,830
craigslist use case was that they have

00:35:35,680 --> 00:35:43,180
their life or production a list of I

00:35:38,830 --> 00:35:46,510
guess items and they archive that stuff

00:35:43,180 --> 00:35:48,609
off David David chained at all so the

00:35:46,510 --> 00:35:51,750
issue they had was and the why mother

00:35:48,609 --> 00:35:54,310
was beneficial for them one was the size

00:35:51,750 --> 00:35:57,190
but two they would make changes in the

00:35:54,310 --> 00:35:58,780
live production database and they would

00:35:57,190 --> 00:36:00,760
replicate that into the recurring

00:35:58,780 --> 00:36:02,080
database so but schema changed in the

00:36:00,760 --> 00:36:03,550
production database they'd have to worry

00:36:02,080 --> 00:36:06,550
about national changes in the archive

00:36:03,550 --> 00:36:08,170
database as well so with MongoDB now

00:36:06,550 --> 00:36:09,460
they don't worry about any of that so

00:36:08,170 --> 00:36:11,619
it's if the production database which is

00:36:09,460 --> 00:36:12,670
I believe install my sequel changes they

00:36:11,619 --> 00:36:13,900
don't have to rebel actually I can

00:36:12,670 --> 00:36:15,700
change in the archive structure as well

00:36:13,900 --> 00:36:21,820
they can just build a data back in and

00:36:15,700 --> 00:36:23,650
back it up that way meteors are cool a

00:36:21,820 --> 00:36:28,210
cool one it's a again kind of in that

00:36:23,650 --> 00:36:30,609
vein of JavaScript top to bottom but out

00:36:28,210 --> 00:36:34,380
of the box meteor actually uses mobile

00:36:30,609 --> 00:36:34,380
TV as its as its data store

00:36:34,420 --> 00:36:40,000
so you can you can specify other

00:36:36,859 --> 00:36:46,640
databases but out of the box it uses a

00:36:40,000 --> 00:36:48,890
MongoDB so what about the community I

00:36:46,640 --> 00:36:53,119
actually run the MongoDB user group in

00:36:48,890 --> 00:36:56,000
Toronto we started off with what sneak

00:36:53,119 --> 00:36:58,700
we're almost 400 people now in a couple

00:36:56,000 --> 00:37:01,040
years and it came I really started the

00:36:58,700 --> 00:37:04,339
group because that you should be kerns

00:37:01,040 --> 00:37:05,630
with walmart again not being introduced

00:37:04,339 --> 00:37:07,790
something new there was much media kind

00:37:05,630 --> 00:37:11,480
of support around it I thread up the

00:37:07,790 --> 00:37:12,859
group and it's grown to 400 now we have

00:37:11,480 --> 00:37:15,950
meetings who tried to one every single

00:37:12,859 --> 00:37:17,510
month from x is not always easy to do

00:37:15,950 --> 00:37:21,050
with one everyone but the most of every

00:37:17,510 --> 00:37:22,310
month and we do talks sometimes I do an

00:37:21,050 --> 00:37:24,560
Operations talk because I kind of cover

00:37:22,310 --> 00:37:25,790
the important stuff like backing up it

00:37:24,560 --> 00:37:27,859
and security and all those things and

00:37:25,790 --> 00:37:31,310
then there's the developer talks who

00:37:27,859 --> 00:37:34,190
talked about how they use MongoDB but

00:37:31,310 --> 00:37:36,260
you can find this at the meetup com will

00:37:34,190 --> 00:37:39,589
you do beers afterwards so it's very

00:37:36,260 --> 00:37:41,690
informal and there's actually a google

00:37:39,589 --> 00:37:44,900
plus group as well so you can find this

00:37:41,690 --> 00:37:46,550
on there and i'll post all kinds of

00:37:44,900 --> 00:37:48,079
information about you know articles i

00:37:46,550 --> 00:37:49,640
found or after you have these are

00:37:48,079 --> 00:37:57,589
pictures from the last meet up we had

00:37:49,640 --> 00:38:03,170
need to talk on angularjs this is a

00:37:57,589 --> 00:38:04,849
great resource they mumbles on to two

00:38:03,170 --> 00:38:06,680
things right in my opinion one the

00:38:04,849 --> 00:38:07,940
documentation rocks if you're living in

00:38:06,680 --> 00:38:10,660
the open source world documentation

00:38:07,940 --> 00:38:15,109
sometimes isn't isn't always the best

00:38:10,660 --> 00:38:19,970
but the documents on mon go by the

00:38:15,109 --> 00:38:22,490
document source on model DV calm and is

00:38:19,970 --> 00:38:25,040
incredible there's a lot of data it's

00:38:22,490 --> 00:38:26,480
always up to date if you don't have an

00:38:25,040 --> 00:38:28,609
if you want an answer to a question

00:38:26,480 --> 00:38:32,089
you've got you can find it on the model

00:38:28,609 --> 00:38:35,839
DV site so first of all dr. patient is

00:38:32,089 --> 00:38:37,339
rock solid to education is free so you

00:38:35,839 --> 00:38:39,619
can take these courses and i believe the

00:38:37,339 --> 00:38:41,770
node json' started up on lending you can

00:38:39,619 --> 00:38:44,089
still sign up for mongodb and anoche s

00:38:41,770 --> 00:38:46,670
but they're free courses there are seven

00:38:44,089 --> 00:38:49,340
weeks so you go online and you

00:38:46,670 --> 00:38:50,450
you watch the the videos you answer the

00:38:49,340 --> 00:38:52,070
questions there's homework assignments

00:38:50,450 --> 00:38:54,110
and your graded as well so I watch if

00:38:52,070 --> 00:38:55,820
you get more than sixty percent ready

00:38:54,110 --> 00:38:59,630
person you get a certificate saying you

00:38:55,820 --> 00:39:01,310
completed it and it's free so you you

00:38:59,630 --> 00:39:05,750
kind of start from knowing nothing about

00:39:01,310 --> 00:39:08,450
it to being certified do it to to a

00:39:05,750 --> 00:39:11,750
degree but they've started out with just

00:39:08,450 --> 00:39:13,910
the Python language first and then

00:39:11,750 --> 00:39:16,250
believe added Java and no j/s ever since

00:39:13,910 --> 00:39:24,770
and there's one for actual DP age as

00:39:16,250 --> 00:39:30,410
well so references the github link is

00:39:24,770 --> 00:39:31,700
where you can find jira is where

00:39:30,410 --> 00:39:34,690
the the bug tracking you can create

00:39:31,700 --> 00:39:38,090
accounts on these and track issues

00:39:34,690 --> 00:39:41,240
education MongoDB com is where you find

00:39:38,090 --> 00:39:44,690
the education site and the docs site

00:39:41,240 --> 00:39:46,760
docs on mobility network is great things

00:39:44,690 --> 00:39:50,300
between those education and docs you

00:39:46,760 --> 00:39:51,950
know it's again living in an open source

00:39:50,300 --> 00:39:53,390
where else sometimes the two these are

00:39:51,950 --> 00:39:56,210
always in the lac are those two things

00:39:53,390 --> 00:39:58,960
and and maybe why they're so successful

00:39:56,210 --> 00:40:01,250
because they kind of figured that out

00:39:58,960 --> 00:40:04,640
the supports their the answers the

00:40:01,250 --> 00:40:07,190
questions is there and I guess that's it

00:40:04,640 --> 00:40:09,800
I thank you for will you learn a little

00:40:07,190 --> 00:40:11,060
bit about mom would he be and I guess

00:40:09,800 --> 00:40:13,480
there's any questions much I between

00:40:11,060 --> 00:40:13,480
human error

00:40:36,680 --> 00:40:42,119
yes if you go to actually sit again you

00:40:39,480 --> 00:40:44,400
did the docs thumb site it has all the

00:40:42,119 --> 00:40:46,319
driver page as well so if you go doc w

00:40:44,400 --> 00:40:48,119
org there's a driver section there as

00:40:46,319 --> 00:40:49,619
all the driver information and it has

00:40:48,119 --> 00:40:53,569
everything I know about the driver

00:40:49,619 --> 00:40:53,569
itself there's a large section on Java

00:40:58,309 --> 00:41:12,480
correct correct it's a binary at the

00:41:08,970 --> 00:41:15,050
base on file which is kind of nice to as

00:41:12,480 --> 00:41:17,339
far as backing up those there are

00:41:15,050 --> 00:41:19,079
MongoDB dump commands so you can even

00:41:17,339 --> 00:41:21,089
dump the database long would you be

00:41:19,079 --> 00:41:25,230
export-import are going to stuff but

00:41:21,089 --> 00:41:26,849
because it is a binary file what you can

00:41:25,230 --> 00:41:28,290
do sometimes is you can if you're

00:41:26,849 --> 00:41:29,400
running primary secondary and secondary

00:41:28,290 --> 00:41:31,349
for example you can use the secondaries

00:41:29,400 --> 00:41:32,460
of the backup on which what you should

00:41:31,349 --> 00:41:35,970
do we run the backups off the

00:41:32,460 --> 00:41:38,490
secondaries and so you could stop a

00:41:35,970 --> 00:41:40,049
database on a secondary application

00:41:38,490 --> 00:41:42,359
still functioning it has a primary and

00:41:40,049 --> 00:41:45,329
secondary still copy those files

00:41:42,359 --> 00:41:46,980
somewhere else fire secondary again and

00:41:45,329 --> 00:41:48,329
you have a backup so long have those

00:41:46,980 --> 00:41:51,480
data files you have everything you need

00:41:48,329 --> 00:41:52,920
to recover from sometimes that that's a

00:41:51,480 --> 00:41:55,799
use case for backing up you shut down up

00:41:52,920 --> 00:41:58,049
secondary carpet the files off sometimes

00:41:55,799 --> 00:41:59,940
you store you can snap shot them be flv

00:41:58,049 --> 00:42:02,190
I'm running but that's that's a common

00:41:59,940 --> 00:42:04,440
use of secondaries you can actually also

00:42:02,190 --> 00:42:06,960
have secondary data centers for backups

00:42:04,440 --> 00:42:10,260
you can have second areas that replicate

00:42:06,960 --> 00:42:11,940
at an interval you want to keep

00:42:10,260 --> 00:42:14,099
something sometimes the developer will

00:42:11,940 --> 00:42:15,960
make a mistake and they'll blow a table

00:42:14,099 --> 00:42:18,420
and it comes you say I need this data

00:42:15,960 --> 00:42:20,190
now but replications occur do you know

00:42:18,420 --> 00:42:22,230
that data set that's common amongst all

00:42:20,190 --> 00:42:23,839
three up with the sets but you have a

00:42:22,230 --> 00:42:26,490
box of that replicates every half hour

00:42:23,839 --> 00:42:28,260
so you've got a copy now of these for

00:42:26,490 --> 00:42:30,869
every hour replicates so you have these

00:42:28,260 --> 00:42:31,920
kind of archive snapshots so you can

00:42:30,869 --> 00:42:33,980
kind of do all kinds of cool things with

00:42:31,920 --> 00:42:33,980
it

00:42:42,160 --> 00:42:56,690
yep so for example if I'm you deciding

00:42:45,529 --> 00:42:58,940
on what to do to keep in mind yet yep I

00:42:56,690 --> 00:43:00,979
guess the if you're running in

00:42:58,940 --> 00:43:03,709
production definitely running replica

00:43:00,979 --> 00:43:05,269
sets they take they've taken they've

00:43:03,709 --> 00:43:06,319
they've made a large effort actually to

00:43:05,269 --> 00:43:08,450
remove a lot of the gotchas that we

00:43:06,319 --> 00:43:11,079
found for ourselves we first rolled out

00:43:08,450 --> 00:43:13,670
one little bit they kind of corrected

00:43:11,079 --> 00:43:15,499
the journaling is on by default now this

00:43:13,670 --> 00:43:17,569
is two point oh they now have journaling

00:43:15,499 --> 00:43:20,959
available so if the box crashes you

00:43:17,569 --> 00:43:22,910
don't lose the data but definitely

00:43:20,959 --> 00:43:24,799
running the replica set so make sure

00:43:22,910 --> 00:43:26,719
you've got the data on the least two or

00:43:24,799 --> 00:43:30,829
three boxes or q3 instances or ever

00:43:26,719 --> 00:43:34,549
running I mean they're like there really

00:43:30,829 --> 00:43:35,809
isn't I guess you fall into the standard

00:43:34,549 --> 00:43:37,579
kind of best practice versus

00:43:35,809 --> 00:43:39,410
administration you know make sure there

00:43:37,579 --> 00:43:40,699
are backups that are occurring if you

00:43:39,410 --> 00:43:41,869
have security issues make sure that

00:43:40,699 --> 00:43:43,130
they're that there's that you've got

00:43:41,869 --> 00:43:44,599
security facts the music the

00:43:43,130 --> 00:43:46,549
authentication methods with the MongoDB

00:43:44,599 --> 00:43:48,739
make sure that people actually the data

00:43:46,549 --> 00:43:51,729
they're allowed to access the best

00:43:48,739 --> 00:43:55,190
practice really I guess come into

00:43:51,729 --> 00:43:58,880
standard kind of BB a system in kind of

00:43:55,190 --> 00:44:00,799
best practices again you can even you

00:43:58,880 --> 00:44:03,940
can get running pretty quickly now with

00:44:00,799 --> 00:44:06,199
just a few commands with the replica set

00:44:03,940 --> 00:44:07,670
if you're a developer you might want to

00:44:06,199 --> 00:44:11,089
just try starting up with like among the

00:44:07,670 --> 00:44:12,109
lab Armando HQ they take if you're so if

00:44:11,089 --> 00:44:13,940
your developer don't have the kind of

00:44:12,109 --> 00:44:15,349
operations background but they do that

00:44:13,940 --> 00:44:17,089
for you so are you doing easily just

00:44:15,349 --> 00:44:18,499
talking to a database and they're

00:44:17,089 --> 00:44:19,940
worrying about replication and Charlene

00:44:18,499 --> 00:44:23,299
all that stuff you just ask you to data

00:44:19,940 --> 00:44:24,859
in inserting data so as a start if your

00:44:23,299 --> 00:44:27,109
developer maybe one of those is the

00:44:24,859 --> 00:44:30,890
better way to go then you can you get an

00:44:27,109 --> 00:44:33,709
idea of how to talk to no but as

00:44:30,890 --> 00:44:35,059
far as a DBA goes you know make sure

00:44:33,709 --> 00:44:36,880
you're running replica sets make sure

00:44:35,059 --> 00:44:39,949
your data is across more than one box

00:44:36,880 --> 00:44:42,440
make sure you've got backups make sure

00:44:39,949 --> 00:44:46,959
the database is secure always kind of

00:44:42,440 --> 00:44:46,959
been a best practice still apply I

00:44:58,089 --> 00:45:09,079
believe I believe so yeah as a JSON

00:45:01,940 --> 00:45:11,390
document well on behalf of some if I

00:45:09,079 --> 00:45:16,359
just wanted to give you a small token of

00:45:11,390 --> 00:45:16,359
appreciation that's a faux pas thank you

00:45:22,089 --> 00:45:29,319
they're talking fast no okay I can't

00:45:27,049 --> 00:45:29,319

YouTube URL: https://www.youtube.com/watch?v=B9QVaUNK0A0


