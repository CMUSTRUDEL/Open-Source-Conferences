Title: FSOSS 2013 Open Source Computer Graphics Software
Publication date: 2013-10-28
Playlist: FSOSS 2013
Description: 
	Open Source Computer Graphics Software presentation by Greg Blair
Captions: 
	00:00:03,890 --> 00:00:10,790
video effects package for broadcast TV

00:00:07,340 --> 00:00:15,960
if I'm video servers implemented opencl

00:00:10,790 --> 00:00:19,590
termina street racers 3d service booklet

00:00:15,960 --> 00:00:24,050
digital projectors for imax and the next

00:00:19,590 --> 00:00:24,050
generation projector for a chinese club

00:00:24,140 --> 00:00:30,840
in the heterogeneous GPU field and DSP

00:00:28,650 --> 00:00:37,559
imaging applications to the face opencl

00:00:30,840 --> 00:00:43,890
running you're welcome like what thank

00:00:37,559 --> 00:00:46,410
you thank you okay what I want to do is

00:00:43,890 --> 00:00:48,300
just quickly go over some of the history

00:00:46,410 --> 00:00:50,340
and I want what I want to do is rattle

00:00:48,300 --> 00:00:52,590
through these slides rather quickly and

00:00:50,340 --> 00:00:55,410
we have some some demos that i'll be

00:00:52,590 --> 00:00:57,780
running afterwards and what have you so

00:00:55,410 --> 00:01:00,270
it all kind of started in the 70s people

00:00:57,780 --> 00:01:02,870
figuring out geometry how to draw lines

00:01:00,270 --> 00:01:05,489
and circles and and do things with it

00:01:02,870 --> 00:01:08,580
the extension on simple lines and

00:01:05,489 --> 00:01:11,990
circles and polygons was curves where

00:01:08,580 --> 00:01:14,820
you use splines and nerves to do more

00:01:11,990 --> 00:01:17,939
complicated lines things with nice

00:01:14,820 --> 00:01:19,979
curves that didn't have corners and

00:01:17,939 --> 00:01:22,830
stuff like that so where was this stuff

00:01:19,979 --> 00:01:27,119
used typically CAD systems on the

00:01:22,830 --> 00:01:31,950
AutoCAD mature packages that defined oh

00:01:27,119 --> 00:01:35,610
my gosh so mature packages for doing

00:01:31,950 --> 00:01:39,090
line editing and doing drawings machine

00:01:35,610 --> 00:01:41,820
tool manufacturing using geometry

00:01:39,090 --> 00:01:43,920
typically from a CAD package package to

00:01:41,820 --> 00:01:46,259
carve out metal and manufacture metal

00:01:43,920 --> 00:01:48,479
parts in CNC machine shops and stuff

00:01:46,259 --> 00:01:52,020
like that the other thing that was huge

00:01:48,479 --> 00:01:54,720
in let's say point line polygon surface

00:01:52,020 --> 00:01:57,450
mapping with GIS all the mapping systems

00:01:54,720 --> 00:02:02,939
got their start the surveyors instantly

00:01:57,450 --> 00:02:05,250
embraced it using CAD to create surveys

00:02:02,939 --> 00:02:09,479
of whatever the survey and building new

00:02:05,250 --> 00:02:12,180
subdivisions etc etc etc the other

00:02:09,479 --> 00:02:13,830
extreme high end was flight simulators

00:02:12,180 --> 00:02:15,750
people started using the techno

00:02:13,830 --> 00:02:17,550
LG and building predominantly

00:02:15,750 --> 00:02:19,140
vector-based flight simulators they

00:02:17,550 --> 00:02:20,810
weren't very realistic by today's

00:02:19,140 --> 00:02:23,880
standards and but they would draw

00:02:20,810 --> 00:02:25,560
wireframe diagrams or runways and this

00:02:23,880 --> 00:02:27,210
that and everything else and they put

00:02:25,560 --> 00:02:28,980
pilots in the flight simulators and

00:02:27,210 --> 00:02:32,540
shake them around with hydraulic rams

00:02:28,980 --> 00:02:39,210
and move to platform and simulate the

00:02:32,540 --> 00:02:41,280
airplane in the 80s the logical

00:02:39,210 --> 00:02:43,620
progression was to understand what we

00:02:41,280 --> 00:02:47,220
call frame buffer graphics where you

00:02:43,620 --> 00:02:51,780
treat an image as just an XY array with

00:02:47,220 --> 00:02:54,950
pixels and you do interesting things to

00:02:51,780 --> 00:02:58,080
to color the pixels so for doing 3d

00:02:54,950 --> 00:02:59,910
imaging there's sort of three main

00:02:58,080 --> 00:03:02,970
technologies the first thing that but

00:02:59,910 --> 00:03:05,280
was developed with polygon scanline

00:03:02,970 --> 00:03:07,740
rendering and how that works is you take

00:03:05,280 --> 00:03:11,310
a polygon which could be arbitrary

00:03:07,740 --> 00:03:13,020
shaped thing with lots of edges and what

00:03:11,310 --> 00:03:15,959
have you and you break it all up into

00:03:13,020 --> 00:03:17,580
triangles and then your ass right to

00:03:15,959 --> 00:03:19,500
triangles you sort the triangles from

00:03:17,580 --> 00:03:21,540
back to front and top the bottom and you

00:03:19,500 --> 00:03:23,400
go through your lists and when you see a

00:03:21,540 --> 00:03:25,920
triangle that triangles red so you make

00:03:23,400 --> 00:03:28,440
that pixel in the screen red you trundle

00:03:25,920 --> 00:03:31,140
over and you find a triangle over here

00:03:28,440 --> 00:03:34,739
this one's green so you make the picture

00:03:31,140 --> 00:03:37,170
green next step up with ray tracing and

00:03:34,739 --> 00:03:40,040
ray tracing is where you have an XY grid

00:03:37,170 --> 00:03:43,140
of your screen and you cast an eye a

00:03:40,040 --> 00:03:45,090
vector from your eye or array through

00:03:43,140 --> 00:03:48,480
each pixel on the screen so you cast

00:03:45,090 --> 00:03:50,790
array through the top left corner the

00:03:48,480 --> 00:03:55,380
pixel beside it shoot all these rays

00:03:50,790 --> 00:03:57,750
again if you have 1k by 1k screen you

00:03:55,380 --> 00:03:59,310
have a million rays that you cast and

00:03:57,750 --> 00:04:01,410
when it when it goes through the screen

00:03:59,310 --> 00:04:03,900
if then you intersect that with your

00:04:01,410 --> 00:04:06,090
geometry if it hits the geometry you

00:04:03,900 --> 00:04:08,100
bounce it around subject to the laws of

00:04:06,090 --> 00:04:11,070
physics that you want to do in your in

00:04:08,100 --> 00:04:12,690
your your simulation and if it doesn't

00:04:11,070 --> 00:04:16,500
hit your audit you just color that pixel

00:04:12,690 --> 00:04:20,070
background ray tracing can do fairly

00:04:16,500 --> 00:04:26,639
complex things transparency lens effects

00:04:20,070 --> 00:04:29,520
stuff like that and complex shadows and

00:04:26,639 --> 00:04:31,860
ray tracing is is really computationally

00:04:29,520 --> 00:04:34,169
intensive and it's going to be a

00:04:31,860 --> 00:04:35,909
research item forever so never going to

00:04:34,169 --> 00:04:38,249
have computers fast enough to retrace

00:04:35,909 --> 00:04:40,889
the complexity of scenes that people

00:04:38,249 --> 00:04:45,990
want to do further development was

00:04:40,889 --> 00:04:48,060
radiosity in which you treat light as an

00:04:45,990 --> 00:04:49,830
area so it's like a fluorescent light

00:04:48,060 --> 00:04:51,509
fixture light comes out of the whole

00:04:49,830 --> 00:04:54,300
fluorescent fixture not just a point

00:04:51,509 --> 00:04:56,189
source so typically for ray tracing and

00:04:54,300 --> 00:04:58,919
poly line scan rendering the lighting

00:04:56,189 --> 00:05:00,779
model is just a point source well even

00:04:58,919 --> 00:05:04,219
the Sun does anybody know the diameter

00:05:00,779 --> 00:05:07,830
of the sun when you see it in the sky

00:05:04,219 --> 00:05:09,659
it's a half a degree so that's that's

00:05:07,830 --> 00:05:10,919
not a point source even though you in

00:05:09,659 --> 00:05:12,509
your computer model you've probably

00:05:10,919 --> 00:05:14,909
treated as a point source a half a

00:05:12,509 --> 00:05:17,849
degree is an area it's not a something

00:05:14,909 --> 00:05:19,680
that's infinitesimally small so the

00:05:17,849 --> 00:05:22,919
movie industry really embraced frame

00:05:19,680 --> 00:05:26,310
buffer rendering and one of the first

00:05:22,919 --> 00:05:29,430
movies that was all all CG was the movie

00:05:26,310 --> 00:05:31,379
Tron I think that was 19 80 or 81 Star

00:05:29,430 --> 00:05:35,400
Wars the first Star Wars was done in it

00:05:31,379 --> 00:05:38,310
in 1977 they typically use vector

00:05:35,400 --> 00:05:40,349
graphics out of a video camera set up in

00:05:38,310 --> 00:05:42,089
front of a computer model it would draw

00:05:40,349 --> 00:05:43,439
the vector graphics fall lines and

00:05:42,089 --> 00:05:46,229
circles everything else would take a

00:05:43,439 --> 00:05:48,569
picture clear the screen draw the next

00:05:46,229 --> 00:05:51,199
frame take a picture and that's how they

00:05:48,569 --> 00:05:57,089
how they did the original star wars in

00:05:51,199 --> 00:06:00,569
77 so here's a sample picture of what

00:05:57,089 --> 00:06:03,000
you might get with scanline conversion

00:06:00,569 --> 00:06:05,849
you take your 3d objects you convert

00:06:03,000 --> 00:06:07,860
them all the triangles and apply your

00:06:05,849 --> 00:06:09,870
lady model sort the triangles top the

00:06:07,860 --> 00:06:13,439
bottom back to front scan convert each

00:06:09,870 --> 00:06:17,669
line and generate your picture ray

00:06:13,439 --> 00:06:20,339
tracing again you have the the camera in

00:06:17,669 --> 00:06:24,029
the image or your I threw for each pixel

00:06:20,339 --> 00:06:27,479
on the screen you cast array if it hits

00:06:24,029 --> 00:06:29,969
your geometry and your scene you apply

00:06:27,479 --> 00:06:35,099
the physics such as if it's a mirror or

00:06:29,969 --> 00:06:37,319
a transparent surface and you color the

00:06:35,099 --> 00:06:39,120
pixel on your screen and with that color

00:06:37,319 --> 00:06:40,470
information the other thing you can do

00:06:39,120 --> 00:06:43,380
with ray tracing gets much

00:06:40,470 --> 00:06:48,870
more realistic shadows that you can't

00:06:43,380 --> 00:06:50,670
get so if you notice the beer mug at the

00:06:48,870 --> 00:06:52,080
bottom there there's a dice and then a

00:06:50,670 --> 00:06:54,210
beer mug to the left and then a wine

00:06:52,080 --> 00:06:56,610
glass notice the shadow from the beer

00:06:54,210 --> 00:06:59,880
mug it's a nice soft shadow you can't do

00:06:56,610 --> 00:07:02,870
that practically with scanline renderer

00:06:59,880 --> 00:07:06,180
so ray tracing is pretty hot stuff and

00:07:02,870 --> 00:07:09,560
here's a sample of radiosity so with

00:07:06,180 --> 00:07:12,840
radiosity you have much much better

00:07:09,560 --> 00:07:17,160
lighting information and area surfaces

00:07:12,840 --> 00:07:18,990
so the shadows in this scene are pretty

00:07:17,160 --> 00:07:20,790
good compared to what you'd get either

00:07:18,990 --> 00:07:26,700
with ray tracing nerves or certainly

00:07:20,790 --> 00:07:28,740
with a scanline renderer and and any

00:07:26,700 --> 00:07:32,970
questions on radiosity or the type of

00:07:28,740 --> 00:07:35,790
things you can do with it so another

00:07:32,970 --> 00:07:37,800
radiosity picture again with the direct

00:07:35,790 --> 00:07:40,470
illumination that you typically get with

00:07:37,800 --> 00:07:43,320
a polygon scan converter on the on the

00:07:40,470 --> 00:07:45,540
left and radiosity again treating the

00:07:43,320 --> 00:07:48,090
light source as an area instead of a

00:07:45,540 --> 00:07:50,280
point and you have really nice shadows

00:07:48,090 --> 00:07:51,450
as you can see much much better stuff so

00:07:50,280 --> 00:07:54,090
what happens if you put the two together

00:07:51,450 --> 00:07:56,820
so here's some radiosity the light on

00:07:54,090 --> 00:07:59,400
that's on the stairs going up you see if

00:07:56,820 --> 00:08:01,740
the radiosity model there but take a

00:07:59,400 --> 00:08:04,050
look at the reflections on the floor so

00:08:01,740 --> 00:08:05,490
there's actually a door with a yellow

00:08:04,050 --> 00:08:08,910
door with windows so you can see the

00:08:05,490 --> 00:08:12,390
reflections on the fake marble floor in

00:08:08,910 --> 00:08:14,400
the bottom of the image so if you

00:08:12,390 --> 00:08:15,690
combine really austin ray tracing you

00:08:14,400 --> 00:08:17,690
get something that's really really nice

00:08:15,690 --> 00:08:20,040
however there's a cost so the more

00:08:17,690 --> 00:08:22,229
computationally complex your algorithm

00:08:20,040 --> 00:08:27,570
is and the more triangles longer it

00:08:22,229 --> 00:08:30,390
takes to render each frame so in the 90s

00:08:27,570 --> 00:08:32,339
a lot of a heavy lifting the research

00:08:30,390 --> 00:08:35,250
has been done in the in the 80s figuring

00:08:32,339 --> 00:08:37,200
out how how to reduce a polygon scan

00:08:35,250 --> 00:08:39,330
conversion how to do ray tracing how to

00:08:37,200 --> 00:08:43,919
do radiosity how to make really nice

00:08:39,330 --> 00:08:45,420
pictures so what was happening is you

00:08:43,919 --> 00:08:47,910
could in the 90s you do real-time

00:08:45,420 --> 00:08:50,280
rendering which was massive beef up

00:08:47,910 --> 00:08:53,160
until then you might take 50 minutes an

00:08:50,280 --> 00:08:54,300
hour two hours per frame and use many

00:08:53,160 --> 00:08:57,180
many computers

00:08:54,300 --> 00:08:59,580
to surrender all the frames required for

00:08:57,180 --> 00:09:02,820
a movie so there are massive render farm

00:08:59,580 --> 00:09:04,860
set up in Hollywood there was a using

00:09:02,820 --> 00:09:06,390
supercomputers was a company in Toronto

00:09:04,860 --> 00:09:09,899
at yonge and eglinton had one of the

00:09:06,390 --> 00:09:12,089
early Cray supercomputers and they were

00:09:09,899 --> 00:09:15,480
using supercomputers through to render

00:09:12,089 --> 00:09:19,050
all the other frames another thing that

00:09:15,480 --> 00:09:22,440
happened along this time is on commodity

00:09:19,050 --> 00:09:28,920
hardware pcs you had a lot of 640 by 480

00:09:22,440 --> 00:09:32,070
images 800 x 600 1024 x 768 and near the

00:09:28,920 --> 00:09:34,560
end of the 80s 1280 x 1024 so if you

00:09:32,070 --> 00:09:38,820
kept the screen size small you could do

00:09:34,560 --> 00:09:42,089
real-time computer animation and this

00:09:38,820 --> 00:09:44,910
was huge and computer games picked up on

00:09:42,089 --> 00:09:48,450
a comp Castle Wolfenstein doom quake by

00:09:44,910 --> 00:09:50,070
doing 320 x 240 very low resolution

00:09:48,450 --> 00:09:57,510
images they could do enough of them in

00:09:50,070 --> 00:09:59,760
real time that it was real time again in

00:09:57,510 --> 00:10:02,610
the in the 90s we had various graphic

00:09:59,760 --> 00:10:05,610
libraries that you would call there were

00:10:02,610 --> 00:10:08,700
two big contenders there was figs which

00:10:05,610 --> 00:10:10,680
was a complex instruction set had very

00:10:08,700 --> 00:10:12,089
complicated subroutine parameters you

00:10:10,680 --> 00:10:14,579
have a subroutine that you'd have the

00:10:12,089 --> 00:10:16,260
call with the twenty two parameters you

00:10:14,579 --> 00:10:21,240
had to get them all right or it wouldn't

00:10:16,260 --> 00:10:24,060
work and that the the whole market was

00:10:21,240 --> 00:10:28,290
ruled by SGI so those that hated SGI

00:10:24,060 --> 00:10:29,760
promoted figs and if you wear SGI you

00:10:28,290 --> 00:10:31,709
ignored everybody else and they

00:10:29,760 --> 00:10:34,920
eventually went away in the SGI model

00:10:31,709 --> 00:10:37,079
one it was a RISC instruction set again

00:10:34,920 --> 00:10:38,670
it was a state machine a whole bunch of

00:10:37,079 --> 00:10:43,079
subroutine calls with one or two

00:10:38,670 --> 00:10:45,540
parameters sometimes more but often very

00:10:43,079 --> 00:10:47,430
simple so it would change the state

00:10:45,540 --> 00:10:50,070
machine so it would say okay we want

00:10:47,430 --> 00:10:51,690
background illumination on we want this

00:10:50,070 --> 00:10:53,250
lighting model we want that lighting

00:10:51,690 --> 00:10:55,560
model we want to do this we want to do

00:10:53,250 --> 00:10:57,360
that you set all these flags then you

00:10:55,560 --> 00:10:59,910
draw your drama cheek and say hit it and

00:10:57,360 --> 00:11:03,000
it would go to work and render out your

00:10:59,910 --> 00:11:05,279
whole image so it was really easy to

00:11:03,000 --> 00:11:08,130
program and it was very simple to

00:11:05,279 --> 00:11:10,020
understand and that's why it won over

00:11:08,130 --> 00:11:17,790
or fix the fix is really complex

00:11:10,020 --> 00:11:22,500
companies like son intergraph HP they

00:11:17,790 --> 00:11:25,410
all had figs workstations but I Silicon

00:11:22,500 --> 00:11:27,600
Graphics really won so and then in the

00:11:25,410 --> 00:11:32,280
2000s what we started to see was custom

00:11:27,600 --> 00:11:34,290
hardware and the custom hardware the

00:11:32,280 --> 00:11:37,710
first thing we saw was GPUs which had

00:11:34,290 --> 00:11:39,960
hundreds of processing course a typical

00:11:37,710 --> 00:11:42,600
GPU today has eight hundred a thousand

00:11:39,960 --> 00:11:45,480
twelve hundred processing course and the

00:11:42,600 --> 00:11:48,900
concept of programmable shaders on the

00:11:45,480 --> 00:11:51,120
GPU so program will shaders you instruct

00:11:48,900 --> 00:11:54,540
the GPU how you want things calculated

00:11:51,120 --> 00:11:56,550
and you run the code on the GPU well

00:11:54,540 --> 00:11:58,440
immediately everybody said well we want

00:11:56,550 --> 00:12:00,510
to do general-purpose calculations on

00:11:58,440 --> 00:12:04,590
the GPU we're not interested in graphics

00:12:00,510 --> 00:12:07,110
and that led to OpenGL which we'll talk

00:12:04,590 --> 00:12:08,970
about in a moment of to the other thing

00:12:07,110 --> 00:12:11,280
happen with custom hardware is you had

00:12:08,970 --> 00:12:14,220
real-time video so the broadcast

00:12:11,280 --> 00:12:17,880
television companies these technologies

00:12:14,220 --> 00:12:19,560
are used to work grass valley all the

00:12:17,880 --> 00:12:21,390
broadcast television companies all

00:12:19,560 --> 00:12:24,030
started making video servers so instead

00:12:21,390 --> 00:12:27,150
of having it at a television station

00:12:24,030 --> 00:12:29,490
rooms and rooms and rooms full of tape

00:12:27,150 --> 00:12:31,590
decks and and a whole management staff

00:12:29,490 --> 00:12:34,320
and database system of keeping track

00:12:31,590 --> 00:12:36,210
work yeah tape was it has to play that

00:12:34,320 --> 00:12:38,610
the nine o'clock moved tonight we have

00:12:36,210 --> 00:12:41,940
to have it in intake theft number three

00:12:38,610 --> 00:12:43,590
and nine o'clock it comes life and out

00:12:41,940 --> 00:12:47,610
plays the movie of the week or wherever

00:12:43,590 --> 00:12:49,530
it is so with real-time computer

00:12:47,610 --> 00:12:52,770
graphics the capability of doing in and

00:12:49,530 --> 00:12:55,230
out you could store your video compress

00:12:52,770 --> 00:12:57,510
on a hard drive and then play it back in

00:12:55,230 --> 00:13:00,120
real time so this made rooms and rooms

00:12:57,510 --> 00:13:01,890
of tape drives who said mechanical the

00:13:00,120 --> 00:13:03,600
tape drives were dirty what happens if

00:13:01,890 --> 00:13:06,480
it read error on the tape in the middle

00:13:03,600 --> 00:13:08,100
of the tape you'll lose the movie so a

00:13:06,480 --> 00:13:09,870
lot of the problems and hassles the

00:13:08,100 --> 00:13:11,490
broadcast television went away when

00:13:09,870 --> 00:13:16,290
they're able to do real-time computer

00:13:11,490 --> 00:13:18,300
video on the hardware at the time so

00:13:16,290 --> 00:13:22,259
where are we now right now you have

00:13:18,300 --> 00:13:24,059
massive computer power OpenGL

00:13:22,259 --> 00:13:26,069
it's really matured the shaders are much

00:13:24,059 --> 00:13:27,839
more complex or they can be much more

00:13:26,069 --> 00:13:30,929
complex you can have very simple shaders

00:13:27,839 --> 00:13:32,939
and very complex shaders GPU programming

00:13:30,929 --> 00:13:34,499
general-purpose GPU programming you

00:13:32,939 --> 00:13:37,470
don't have to just do graphics on your

00:13:34,499 --> 00:13:39,600
GPU so there's sort of two contenders

00:13:37,470 --> 00:13:42,239
number one is CUDA which a proprietary

00:13:39,600 --> 00:13:44,009
closed source they from a company called

00:13:42,239 --> 00:13:46,109
nvidia they really want you in the

00:13:44,009 --> 00:13:47,850
nvidia camp if you're in the nvidia camp

00:13:46,109 --> 00:13:51,119
and you're right for cuda they have you

00:13:47,850 --> 00:13:52,979
you're not party to open open CL and

00:13:51,119 --> 00:13:54,419
they're happy because you will sell lots

00:13:52,979 --> 00:13:56,399
of graphics card foot it's good for

00:13:54,419 --> 00:13:59,179
NVIDIA not very good for the open source

00:13:56,399 --> 00:14:01,799
community then there's the opencl

00:13:59,179 --> 00:14:03,660
initiative and there's a lot of things

00:14:01,799 --> 00:14:06,059
what's whatevers include is in opencl

00:14:03,660 --> 00:14:09,809
whatever is open CL is also in cuda so

00:14:06,059 --> 00:14:12,629
it's not really a a religious you have

00:14:09,809 --> 00:14:14,669
use one or the other if you're up to it

00:14:12,629 --> 00:14:18,689
you can actually implement both although

00:14:14,669 --> 00:14:22,799
certainly if you do opencl if you have

00:14:18,689 --> 00:14:25,589
more options so computer vision also

00:14:22,799 --> 00:14:28,199
happened in the 2010s this is this

00:14:25,589 --> 00:14:30,859
decade license plate recognition facial

00:14:28,199 --> 00:14:34,259
recognition also to tracking algorithms

00:14:30,859 --> 00:14:41,179
augmented reality putting yourself in

00:14:34,259 --> 00:14:45,119
the video and taking it from there so

00:14:41,179 --> 00:14:47,009
open so are some linux linux is most

00:14:45,119 --> 00:14:49,350
people in the room knows an open source

00:14:47,009 --> 00:14:51,299
environment and there's tons and tons

00:14:49,350 --> 00:14:56,730
and tons of open source computer

00:14:51,299 --> 00:14:58,259
graphics systems that run commodity off

00:14:56,730 --> 00:15:00,119
the shelf and one of the reasons is a

00:14:58,259 --> 00:15:01,949
lot of the stuff comes at universities

00:15:00,119 --> 00:15:03,660
and universities don't have a lot of

00:15:01,949 --> 00:15:05,609
money to waste on you know fancy

00:15:03,660 --> 00:15:06,809
computing systems that are valid for

00:15:05,609 --> 00:15:10,259
about three months and then they're

00:15:06,809 --> 00:15:13,129
obsolete so if you go with the open

00:15:10,259 --> 00:15:18,449
source community you're not locked into

00:15:13,129 --> 00:15:20,189
a specific vendor if someone else comes

00:15:18,449 --> 00:15:22,229
up with a new release of the software

00:15:20,189 --> 00:15:24,179
you don't have to upgrade your hardware

00:15:22,229 --> 00:15:28,499
to run the latest release sometimes you

00:15:24,179 --> 00:15:30,269
do most of times you don't and all the

00:15:28,499 --> 00:15:32,759
deb systems the c compilers and

00:15:30,269 --> 00:15:34,529
everything else they're free graphic

00:15:32,759 --> 00:15:36,060
libraries are free you you don't have to

00:15:34,529 --> 00:15:37,680
license this from that guy or

00:15:36,060 --> 00:15:41,520
ison something from somebody else uses

00:15:37,680 --> 00:15:44,100
stuff another thing is no bloat you

00:15:41,520 --> 00:15:46,680
compile the code what you can pile is

00:15:44,100 --> 00:15:48,120
what you get you don't have 16 million

00:15:46,680 --> 00:15:50,610
different options that you're never

00:15:48,120 --> 00:15:52,710
going to use or I mean the historical

00:15:50,610 --> 00:15:54,390
story of Microsoft and Excel putting the

00:15:52,710 --> 00:15:56,070
fight simulator in Excel because

00:15:54,390 --> 00:15:59,310
somebody working on the team thought it

00:15:56,070 --> 00:16:03,060
was cool and you know that they just had

00:15:59,310 --> 00:16:06,540
this huge blow project and another thing

00:16:03,060 --> 00:16:08,490
is the the toolchain often leads

00:16:06,540 --> 00:16:12,240
commercial vendors in whatever is

00:16:08,490 --> 00:16:14,010
happening in that field and specifically

00:16:12,240 --> 00:16:17,280
a new languages and optimization

00:16:14,010 --> 00:16:19,860
techniques if the open source compilers

00:16:17,280 --> 00:16:21,990
are really hot they have some of the

00:16:19,860 --> 00:16:24,030
best optimizers in the world for

00:16:21,990 --> 00:16:27,570
optimizing the assembly code to make it

00:16:24,030 --> 00:16:30,720
execute quickly there they're up on all

00:16:27,570 --> 00:16:33,030
the latest standards the C++ 11 was the

00:16:30,720 --> 00:16:37,950
latest standard canoe and the canoe

00:16:33,030 --> 00:16:40,380
toolchain in 2010 had support for C++ 11

00:16:37,950 --> 00:16:41,970
it was mature it was complete because

00:16:40,380 --> 00:16:43,410
it'd been a lot of hackers that have

00:16:41,970 --> 00:16:44,940
been monitoring what's going on as

00:16:43,410 --> 00:16:47,400
standard when this was proposed they

00:16:44,940 --> 00:16:50,220
coated up and that's proposed a coded up

00:16:47,400 --> 00:16:52,170
and the whole founded was anointed guess

00:16:50,220 --> 00:16:57,120
what there was nothing to do that they

00:16:52,170 --> 00:17:01,290
basically supported these c11 extensions

00:16:57,120 --> 00:17:05,670
for C C++ so in 2010 you had very mature

00:17:01,290 --> 00:17:08,070
support from the new tool chain and here

00:17:05,670 --> 00:17:10,500
we are 2013 in microsoft support it's

00:17:08,070 --> 00:17:13,140
better than it was in twenty ten and 20

00:17:10,500 --> 00:17:15,480
2011 they came up with some stuff in

00:17:13,140 --> 00:17:16,890
early 2012 it was a little better but if

00:17:15,480 --> 00:17:19,080
you looked at the the release notes

00:17:16,890 --> 00:17:20,550
there were still like 11 things that

00:17:19,080 --> 00:17:23,190
they hadn't got around to implementing

00:17:20,550 --> 00:17:24,690
so it was just a nightmare so you try do

00:17:23,190 --> 00:17:26,610
the right thing you want to drop the

00:17:24,690 --> 00:17:28,860
latest standard so you're right code for

00:17:26,610 --> 00:17:30,930
the latest standard and you find out it

00:17:28,860 --> 00:17:32,310
won't compile in Microsoft so what's the

00:17:30,930 --> 00:17:35,400
point of having the latest standard

00:17:32,310 --> 00:17:37,470
other thing is a lot of universities put

00:17:35,400 --> 00:17:39,810
the packages up there's a lot of grad

00:17:37,470 --> 00:17:41,280
student work than class projects and

00:17:39,810 --> 00:17:47,660
everything else that are being put up

00:17:41,280 --> 00:17:49,950
and you can download and the way you go

00:17:47,660 --> 00:17:52,590
open source 3d rendering

00:17:49,950 --> 00:17:57,180
blender which you're going to be showing

00:17:52,590 --> 00:18:01,860
some stuff is a very very complete 3d

00:17:57,180 --> 00:18:05,010
rendering system who here has any Maya

00:18:01,860 --> 00:18:08,580
or 3d studio or side effects experience

00:18:05,010 --> 00:18:12,000
I know there's a school at Seneca the

00:18:08,580 --> 00:18:13,680
teaches this sort of stuff so basically

00:18:12,000 --> 00:18:15,360
anything you can do admire you can

00:18:13,680 --> 00:18:19,110
probably find something that's similar

00:18:15,360 --> 00:18:21,420
to do the same thing in blender there's

00:18:19,110 --> 00:18:25,710
a spectacular particle system for doing

00:18:21,420 --> 00:18:28,830
hair for grass fire smoke clouds water

00:18:25,710 --> 00:18:31,260
effects waves drips splashes whatever

00:18:28,830 --> 00:18:33,330
you want and you have it they got ray

00:18:31,260 --> 00:18:36,570
tracing in there so you can do optical

00:18:33,330 --> 00:18:39,120
effects and lenses there's also another

00:18:36,570 --> 00:18:41,310
ray tracer got POV persistence of vision

00:18:39,120 --> 00:18:43,740
it was one of the very early open source

00:18:41,310 --> 00:18:45,570
public domain reg races so there's a lot

00:18:43,740 --> 00:18:51,030
of stuff out there that you can get a

00:18:45,570 --> 00:18:54,300
POV ray tracing model and an Romish so

00:18:51,030 --> 00:18:59,310
vector graphics y vector who knows what

00:18:54,300 --> 00:19:12,870
vector graphics is anyone care to define

00:18:59,310 --> 00:19:14,640
it exactly so what it is you don't

00:19:12,870 --> 00:19:16,350
actually store the pixels as an image or

00:19:14,640 --> 00:19:18,540
like a photograph or a picture you store

00:19:16,350 --> 00:19:20,310
the geometry so say here's the size of

00:19:18,540 --> 00:19:22,860
your screen let's star betray say it's a

00:19:20,310 --> 00:19:26,610
thousand by a thousand it's may got to

00:19:22,860 --> 00:19:28,890
make it square okay and you say move to

00:19:26,610 --> 00:19:31,350
500 500 to Senator screen and draw a

00:19:28,890 --> 00:19:33,960
line the x-axis that's a hundred long

00:19:31,350 --> 00:19:36,120
and so it'll it'll define the jobs you

00:19:33,960 --> 00:19:38,370
base on the screen size of wherever you

00:19:36,120 --> 00:19:42,540
created the geometry at now if you want

00:19:38,370 --> 00:19:44,310
to scale it to its 2000 by 2000 then you

00:19:42,540 --> 00:19:47,820
just do the same thing but only instead

00:19:44,310 --> 00:19:50,070
of saying it's a thousand by thousand

00:19:47,820 --> 00:19:52,620
say it's 2000 by 2000 so you moved to

00:19:50,070 --> 00:19:55,110
the fifty percent point instead of being

00:19:52,620 --> 00:19:57,360
500 500 with a thousand thousand screen

00:19:55,110 --> 00:20:00,990
is now a thousand thousand in the two

00:19:57,360 --> 00:20:02,700
thousand two thousand screen so scale

00:20:00,990 --> 00:20:03,810
independence is really great especially

00:20:02,700 --> 00:20:05,670
if you have computer

00:20:03,810 --> 00:20:07,860
graphics objects that are shrinking or

00:20:05,670 --> 00:20:10,020
expanding and stuff like that so if you

00:20:07,860 --> 00:20:12,390
have a vector representation of it then

00:20:10,020 --> 00:20:14,370
you don't have all sorts of tales and

00:20:12,390 --> 00:20:16,050
artifacts and stuff like that this

00:20:14,370 --> 00:20:17,910
package called inkscape it'll take a

00:20:16,050 --> 00:20:19,890
vector in our toy a raster image a

00:20:17,910 --> 00:20:24,770
picture a JPEG file or whatever from a

00:20:19,890 --> 00:20:29,940
camera and convert it to vector

00:20:24,770 --> 00:20:31,290
whose use Photoshop I guess I have to

00:20:29,940 --> 00:20:37,920
put my hand like this I don't use it

00:20:31,290 --> 00:20:40,770
much who uses Oh what's your

00:20:37,920 --> 00:20:54,480
experience anyone really prefer one

00:20:40,770 --> 00:20:57,840
package to the other heard yeah yeah

00:20:54,480 --> 00:21:00,270
that's true I find someone will show me

00:20:57,840 --> 00:21:04,110
something cool in in Photoshop so I'll

00:21:00,270 --> 00:21:06,750
google that Yallah 550 youtube videos

00:21:04,110 --> 00:21:07,890
show me how to do it in Photoshop and 37

00:21:06,750 --> 00:21:10,080
that showed me how to do it in

00:21:07,890 --> 00:21:13,640
guess what the end results the same so I

00:21:10,080 --> 00:21:15,900
haven't been encumbered by by using

00:21:13,640 --> 00:21:18,990
there's also a bunch of cool effects

00:21:15,900 --> 00:21:22,710
such as bump mapping that you can done

00:21:18,990 --> 00:21:25,380
it can be do that you can do this cool

00:21:22,710 --> 00:21:28,470
mature plug in libraries you can plug in

00:21:25,380 --> 00:21:30,210
stuff it's easy to add a plug-in into

00:21:28,470 --> 00:21:32,640
the framework so if you want to try

00:21:30,210 --> 00:21:35,100
out a new algorithm you can use as

00:21:32,640 --> 00:21:36,720
a test bed and write a plugin to

00:21:35,100 --> 00:21:37,950
experiment with your new algorithm you

00:21:36,720 --> 00:21:39,540
don't have to go right this whole

00:21:37,950 --> 00:21:41,040
infrastructure that knows how to load

00:21:39,540 --> 00:21:43,170
and save and do the set and everything

00:21:41,040 --> 00:21:46,440
else so just being able to add right add

00:21:43,170 --> 00:21:47,700
your own plug-in easily and have a full

00:21:46,440 --> 00:21:50,010
source code is something you don't

00:21:47,700 --> 00:21:51,510
understand you can just look at it look

00:21:50,010 --> 00:21:56,640
at the source code and figure out what's

00:21:51,510 --> 00:22:00,240
happening bullet physics anyone heard of

00:21:56,640 --> 00:22:06,060
bullet physics well we'll be running the

00:22:00,240 --> 00:22:08,400
demo so it's a physics package so

00:22:06,060 --> 00:22:11,430
physics package is good old F equals

00:22:08,400 --> 00:22:14,010
mass times acceleration and object stays

00:22:11,430 --> 00:22:17,470
at rest unless acted on by an external

00:22:14,010 --> 00:22:19,659
force and in

00:22:17,470 --> 00:22:23,950
all the laws of physics and a lot of

00:22:19,659 --> 00:22:26,200
things you drop something it bounces it

00:22:23,950 --> 00:22:28,539
tumbles you drop it on its edge on a

00:22:26,200 --> 00:22:32,350
corner it's going to bounce differently

00:22:28,539 --> 00:22:35,200
and I'll run some demos that show that

00:22:32,350 --> 00:22:37,270
so there's rigid body dynamics where

00:22:35,200 --> 00:22:40,000
things are hard this is kind of a soft

00:22:37,270 --> 00:22:44,200
body dynamic object although it kind of

00:22:40,000 --> 00:22:45,970
behaves more as a soft body so rigid

00:22:44,200 --> 00:22:49,059
body dynamics is things that are hard

00:22:45,970 --> 00:22:53,409
things that don't deform if it deforms

00:22:49,059 --> 00:22:56,500
or flexes is typically a soft body cloth

00:22:53,409 --> 00:22:59,650
is a very computationally involved

00:22:56,500 --> 00:23:02,950
problem cloth the way it hangs it isn't

00:22:59,650 --> 00:23:04,990
a physics problem when you're you're

00:23:02,950 --> 00:23:07,330
you're sure it hangs down it's physics

00:23:04,990 --> 00:23:10,150
there's constraints it has a certain

00:23:07,330 --> 00:23:13,299
diameter it's not going to really

00:23:10,150 --> 00:23:15,970
stretch down gravity pulls it down it's

00:23:13,299 --> 00:23:19,150
taught on the top here without

00:23:15,970 --> 00:23:21,520
stretching it that if the cloth hangs

00:23:19,150 --> 00:23:23,799
down and and this is this is a physics

00:23:21,520 --> 00:23:25,510
problem but it's a very complex physics

00:23:23,799 --> 00:23:27,669
problem because if you take a think of

00:23:25,510 --> 00:23:30,130
cloth is a bunch of patches connected

00:23:27,669 --> 00:23:32,289
patches that are acted on by gravity

00:23:30,130 --> 00:23:34,059
they're all interacted when gravity

00:23:32,289 --> 00:23:35,289
pulls this patch is going to affect all

00:23:34,059 --> 00:23:36,909
its neighbors when each one of those

00:23:35,289 --> 00:23:38,890
neighbors moves it's going to affect

00:23:36,909 --> 00:23:41,559
their neighbors if you then apply

00:23:38,890 --> 00:23:46,659
additional physics such as a fan or wind

00:23:41,559 --> 00:23:48,460
that blows a cloth you have a lot more

00:23:46,659 --> 00:23:51,280
dynamics you have external forces acting

00:23:48,460 --> 00:23:53,049
on the cloth so cloth is that it might

00:23:51,280 --> 00:23:58,960
seem like a dumb and stupid problem but

00:23:53,049 --> 00:24:00,909
it's really expresses the the maturity

00:23:58,960 --> 00:24:02,740
of a physics package if you if your

00:24:00,909 --> 00:24:05,350
physics package does a really nice job

00:24:02,740 --> 00:24:08,110
at cloth it's a good physics package if

00:24:05,350 --> 00:24:12,039
it kind of botches cloth up well it

00:24:08,110 --> 00:24:15,400
needs some work and bullet as is the de

00:24:12,039 --> 00:24:19,030
facto standard for most game engines and

00:24:15,400 --> 00:24:21,400
animation packages Maya uses it 3d

00:24:19,030 --> 00:24:23,409
studio uses its side effects uses it

00:24:21,400 --> 00:24:28,750
blender uses it everybody uses it and

00:24:23,409 --> 00:24:31,000
you can use it too so open source

00:24:28,750 --> 00:24:33,610
computer vision opencv

00:24:31,000 --> 00:24:38,170
it's a state-of-the-art computer vision

00:24:33,610 --> 00:24:39,850
it's a maintained by Intel until funds

00:24:38,170 --> 00:24:41,890
the project and there they've open

00:24:39,850 --> 00:24:45,910
source said oh oh i don't know the early

00:24:41,890 --> 00:24:47,500
2000s like 99 or so and it just keeps

00:24:45,910 --> 00:24:49,660
getting better and better and better and

00:24:47,500 --> 00:24:52,540
what's really nice about opencv open

00:24:49,660 --> 00:24:55,930
computer vision is you have like the

00:24:52,540 --> 00:24:58,600
best algorithms in the world for doing

00:24:55,930 --> 00:25:00,730
whatever you want to do face recognition

00:24:58,600 --> 00:25:03,670
license plate recognition i'll run an

00:25:00,730 --> 00:25:05,860
example of that session image

00:25:03,670 --> 00:25:07,510
stabilization who's seen video that

00:25:05,860 --> 00:25:09,100
that's all handheld is jumping all over

00:25:07,510 --> 00:25:12,400
the place we can run it through video

00:25:09,100 --> 00:25:14,620
stabilization and clean all that up a

00:25:12,400 --> 00:25:18,610
lot of that has to do with with object

00:25:14,620 --> 00:25:21,040
tracking if you know an object in the

00:25:18,610 --> 00:25:23,980
scene is constant and an object in the

00:25:21,040 --> 00:25:25,750
frame isn't then you know you can

00:25:23,980 --> 00:25:30,190
construct a motion vector where that's

00:25:25,750 --> 00:25:33,040
moved from frame to frame so if you have

00:25:30,190 --> 00:25:35,200
something a camera a shaky camera of

00:25:33,040 --> 00:25:37,780
this room a lot of things don't change

00:25:35,200 --> 00:25:39,730
and the the algorithms can calculate

00:25:37,780 --> 00:25:42,370
motion vectors and put the picture back

00:25:39,730 --> 00:25:43,720
together so it's nice and smooth we have

00:25:42,370 --> 00:25:47,290
some time i'll show some beautiful

00:25:43,720 --> 00:25:53,440
stabilized footage 3d vision and

00:25:47,290 --> 00:25:57,180
geometry from 2d images so 2d images you

00:25:53,440 --> 00:26:00,880
use one camera you take a picture stereo

00:25:57,180 --> 00:26:02,410
use two cameras take a picture you need

00:26:00,880 --> 00:26:06,790
not be expensive these are just five

00:26:02,410 --> 00:26:08,950
dollar webcams two cables USB into your

00:26:06,790 --> 00:26:11,260
computer and you can generate 3d depth

00:26:08,950 --> 00:26:12,910
maps Terry love you a lot of guys are

00:26:11,260 --> 00:26:15,550
doing that type of stuff to do death

00:26:12,910 --> 00:26:17,590
maps for robotics so a robot can

00:26:15,550 --> 00:26:20,320
navigate the two cameras on the robot

00:26:17,590 --> 00:26:22,180
and construct a 3d death map and figures

00:26:20,320 --> 00:26:24,010
out there's a rock dead ahead don't

00:26:22,180 --> 00:26:25,780
don't approach the rock keep to the

00:26:24,010 --> 00:26:27,640
right go around the rock and resume your

00:26:25,780 --> 00:26:34,030
course when you're me when you handle

00:26:27,640 --> 00:26:36,540
the rock geometry from 2d images you can

00:26:34,030 --> 00:26:38,980
you can take a picture of an object and

00:26:36,540 --> 00:26:42,190
bring it into the computer and and

00:26:38,980 --> 00:26:45,430
generate the geometry from it to make

00:26:42,190 --> 00:26:48,530
things fast opencl is using

00:26:45,430 --> 00:26:53,000
opencv open computer vision is using the

00:26:48,530 --> 00:26:58,210
opencl GPU standard it also supports

00:26:53,000 --> 00:26:58,210
CUDA but this this huge interest in the

00:26:58,540 --> 00:27:04,040
opencl because it's it's open and it's

00:27:01,280 --> 00:27:07,310
on more platforms in CUDA and speaking

00:27:04,040 --> 00:27:09,470
of platforms opencv runs on android runs

00:27:07,310 --> 00:27:12,260
an iOS runs on linux runs on the

00:27:09,470 --> 00:27:14,480
microsoft as well as well as diverse

00:27:12,260 --> 00:27:18,380
platforms such as a Raspberry Pi in the

00:27:14,480 --> 00:27:20,750
BeagleBone and who's done any cool work

00:27:18,380 --> 00:27:22,190
are just with a smartphone some sort of

00:27:20,750 --> 00:27:25,220
computer vision error than face

00:27:22,190 --> 00:27:27,890
recognition face tracking there's also

00:27:25,220 --> 00:27:32,180
two demos on YouTube where you can use a

00:27:27,890 --> 00:27:34,010
mouse or a object you tell the software

00:27:32,180 --> 00:27:35,930
this is my mouse and as you move the

00:27:34,010 --> 00:27:38,750
mouse around the video camera will track

00:27:35,930 --> 00:27:42,620
its position and generate XY characters

00:27:38,750 --> 00:27:51,200
that that drive your screen so anybody

00:27:42,620 --> 00:27:53,810
know ok ffmpeg open source video so

00:27:51,200 --> 00:27:58,280
ffmpeg is is the the heart of what's

00:27:53,810 --> 00:28:01,970
behind the iOS video magic iOS uses

00:27:58,280 --> 00:28:03,800
ffmpeg to read and write compressed

00:28:01,970 --> 00:28:07,400
video streams guess what it's open

00:28:03,800 --> 00:28:11,570
source and came from Linux so of course

00:28:07,400 --> 00:28:14,120
it runs on OS X IOT Linux Android and I

00:28:11,570 --> 00:28:16,760
believe Microsoft as well and the video

00:28:14,120 --> 00:28:18,860
land VLC media player is huge it's by

00:28:16,760 --> 00:28:22,090
far the most popular media player and

00:28:18,860 --> 00:28:24,410
it's used everywhere on most platforms

00:28:22,090 --> 00:28:26,780
there's other open source video software

00:28:24,410 --> 00:28:30,020
doom 9 is a website that supports

00:28:26,780 --> 00:28:33,380
virtualdub which is a windows program

00:28:30,020 --> 00:28:35,770
but it's open source for doing all sorts

00:28:33,380 --> 00:28:40,940
of video editing and stuff like that and

00:28:35,770 --> 00:28:44,030
avi symp is as another plug-in that can

00:28:40,940 --> 00:28:48,530
do so open source computational

00:28:44,030 --> 00:28:51,050
photography of panorama there's the hug

00:28:48,530 --> 00:28:53,120
in package image stitching in panoramas

00:28:51,050 --> 00:28:54,650
most smart phones you can take your

00:28:53,120 --> 00:28:55,760
smart phone out of your pocket and go in

00:28:54,650 --> 00:28:57,560
the camera and you can say make a

00:28:55,760 --> 00:28:58,380
panorama and you can pan around like

00:28:57,560 --> 00:29:00,900
this

00:28:58,380 --> 00:29:03,360
no generator 360-degree picture the

00:29:00,900 --> 00:29:05,550
algorithms are essentially hugging again

00:29:03,360 --> 00:29:08,220
huggins open source some of it uses

00:29:05,550 --> 00:29:11,160
opencv there's a state of the art it's

00:29:08,220 --> 00:29:14,040
hard to beat it I mean there's just the

00:29:11,160 --> 00:29:16,530
bestest that's no one and it works well

00:29:14,040 --> 00:29:18,450
and well enough that the you know your

00:29:16,530 --> 00:29:21,480
your standard smartphone cameras

00:29:18,450 --> 00:29:23,460
supports generating panoramas using the

00:29:21,480 --> 00:29:28,260
algorithms that are in open source

00:29:23,460 --> 00:29:30,000
huggin QT PFS GUI high-definition

00:29:28,260 --> 00:29:32,100
resolution you take several pictures of

00:29:30,000 --> 00:29:33,540
the same scene so some of the pictures

00:29:32,100 --> 00:29:36,270
they're under exposed some are just

00:29:33,540 --> 00:29:38,490
right for some are over so you take the

00:29:36,270 --> 00:29:40,530
portions of each image you segment the

00:29:38,490 --> 00:29:42,420
image and discover what's over and under

00:29:40,530 --> 00:29:47,730
and just write and piece together a

00:29:42,420 --> 00:29:50,460
sample image that has higher dynamic

00:29:47,730 --> 00:29:54,630
range and what your your any of the

00:29:50,460 --> 00:30:00,180
pictures you captured there's the first

00:29:54,630 --> 00:30:04,310
10 10 left okay okay so dark table and

00:30:00,180 --> 00:30:10,860
raw therapy are the open source

00:30:04,310 --> 00:30:12,360
equivalents to light table from Adobe so

00:30:10,860 --> 00:30:15,300
anything you do in light table you can

00:30:12,360 --> 00:30:17,760
do in dark table or sorry Lightroom like

00:30:15,300 --> 00:30:19,470
room so it's dark tables they knock off

00:30:17,760 --> 00:30:23,220
or not help knock off the open source

00:30:19,470 --> 00:30:25,110
equivalent open source computer graphics

00:30:23,220 --> 00:30:30,560
so number one I say figure out what you

00:30:25,110 --> 00:30:34,110
need number two research it number three

00:30:30,560 --> 00:30:37,800
just you know take what you can find and

00:30:34,110 --> 00:30:41,040
start hacking away you go and the other

00:30:37,800 --> 00:30:43,620
thing is what's really hot in open

00:30:41,040 --> 00:30:46,230
source computer graphics and web GL and

00:30:43,620 --> 00:30:49,310
OpenGL ES OpenGL it's a graphic language

00:30:46,230 --> 00:30:52,620
that you use to create imagery WebGL is

00:30:49,310 --> 00:30:56,580
that graphics language inside a web

00:30:52,620 --> 00:30:58,530
browser so opengl es es stands for

00:30:56,580 --> 00:31:02,130
embedded systems so it's all your

00:30:58,530 --> 00:31:04,380
smartphones and tablets and many of your

00:31:02,130 --> 00:31:08,490
arm to process the devices Raspberry Pi

00:31:04,380 --> 00:31:11,670
beagle bones tablets and its really

00:31:08,490 --> 00:31:12,210
winning Microsoft is really hurting the

00:31:11,670 --> 00:31:14,970
last year

00:31:12,210 --> 00:31:19,170
are over 1 billion Android devices schip

00:31:14,970 --> 00:31:21,060
vs 200,000 desktop machine ship so intel

00:31:19,170 --> 00:31:25,830
has a few things that they're they're

00:31:21,060 --> 00:31:28,470
busy with turn figura opencl and web CL

00:31:25,830 --> 00:31:33,720
so opencl allows you to general a

00:31:28,470 --> 00:31:36,180
general purpose program the GPU to solve

00:31:33,720 --> 00:31:38,420
other problems AJ is going to be talking

00:31:36,180 --> 00:31:41,070
after I talk a little bit about opencl

00:31:38,420 --> 00:31:43,560
the thing to remember is just because

00:31:41,070 --> 00:31:45,240
you have a thousand cores in your laptop

00:31:43,560 --> 00:31:47,910
or whatever it doesn't mean that you

00:31:45,240 --> 00:31:50,670
that you're you have a parallel problem

00:31:47,910 --> 00:31:53,130
so but if you do have a parallel problem

00:31:50,670 --> 00:31:54,660
where you can do parallel calculations

00:31:53,130 --> 00:31:56,160
there's calculation on different cores

00:31:54,660 --> 00:31:58,290
at the same time you can have huge

00:31:56,160 --> 00:31:59,820
performance increases it doesn't take

00:31:58,290 --> 00:32:02,600
too much to imagine what if you have a

00:31:59,820 --> 00:32:05,700
thousand tours doing the job what and

00:32:02,600 --> 00:32:17,670
that was basically what i wanted to do

00:32:05,700 --> 00:32:28,720
on the slideshow I got a bunch of demos

00:32:17,670 --> 00:32:30,669
here this

00:32:28,720 --> 00:32:34,539
rates a Mandelbrot picture it's just an

00:32:30,669 --> 00:32:42,490
example of something that uses a frame

00:32:34,539 --> 00:32:48,730
buffer to make a picture takes about 18

00:32:42,490 --> 00:32:50,289
seconds so any moment now okay so no big

00:32:48,730 --> 00:32:52,210
thing it's just a demonstration of a

00:32:50,289 --> 00:32:57,580
simple dumb and stupid program that just

00:32:52,210 --> 00:33:00,850
takes an array whatever size it is 1024

00:32:57,580 --> 00:33:11,490
x 768 or whatever for each each pixel

00:33:00,850 --> 00:33:11,490
does it there's a calculation and I

00:33:14,669 --> 00:33:23,190
mentioned bullet so that's the physics

00:33:20,799 --> 00:33:23,190
package

00:33:33,030 --> 00:33:37,830
I'm just clicking the mouse to fire

00:33:34,230 --> 00:33:41,270
things at the object so you can see the

00:33:37,830 --> 00:33:45,090
fired at the floor just keeps going

00:33:41,270 --> 00:34:17,040
knock the boxes wherever you want again

00:33:45,090 --> 00:34:18,990
rigid body dynamics there should be a

00:34:17,040 --> 00:34:21,900
menu that pops up and there's about 25

00:34:18,990 --> 00:34:42,929
bullet demos this is sorry it's not

00:34:21,900 --> 00:34:45,380
working oh there we go okay so we saw

00:34:42,929 --> 00:34:45,380
that one

00:34:50,099 --> 00:34:54,200
you

00:34:52,140 --> 00:34:54,200
you

00:34:55,760 --> 00:34:57,820
you

00:35:08,859 --> 00:35:11,859
plot

00:35:38,790 --> 00:35:47,820
so you'll find that most your games are

00:35:41,950 --> 00:35:49,960
using a bullet to solve the

00:35:47,820 --> 00:35:52,510
intersections and the dynamics of what's

00:35:49,960 --> 00:35:56,590
going on even though when you start

00:35:52,510 --> 00:36:00,240
shooting at something did you register a

00:35:56,590 --> 00:36:00,240
hit or or what have you

00:36:04,480 --> 00:36:09,440
so you can see some deformation the

00:36:07,099 --> 00:36:14,210
wheels as it goes down and over the bump

00:36:09,440 --> 00:36:16,630
and stuff like that a lot of physics

00:36:14,210 --> 00:36:16,630
going on

00:36:26,299 --> 00:36:30,500
let's see what else we got here

00:37:08,220 --> 00:37:21,339
play your webcam in so this looks for

00:37:18,700 --> 00:37:27,039
red so guess what we found some red in

00:37:21,339 --> 00:37:29,920
the room anymore red yeah there's some

00:37:27,039 --> 00:37:33,130
more red up there so anyway computer

00:37:29,920 --> 00:37:34,809
vision again this is a these are five

00:37:33,130 --> 00:37:39,220
dollar webcams this is a ten-dollar

00:37:34,809 --> 00:37:40,839
webcams a lot of is not a high barrier

00:37:39,220 --> 00:37:43,619
to being able to fool around with this

00:37:40,839 --> 00:37:46,569
stuff there's lots of excellent books

00:37:43,619 --> 00:37:50,950
lots of tutorials Oh license plate

00:37:46,569 --> 00:37:55,829
recognition I should show that too where

00:37:50,950 --> 00:37:55,829
is it it's really fast

00:38:06,590 --> 00:38:09,590
argh

00:38:12,239 --> 00:38:22,919
I lost it anyway I'm sorry um I guess

00:38:20,249 --> 00:38:25,409
that's about it for our main talk any

00:38:22,919 --> 00:38:26,999
questions or what can we do to get you

00:38:25,409 --> 00:38:39,269
guys all excited to go play with

00:38:26,999 --> 00:38:46,469
open-source graphics for weight aspect

00:38:39,269 --> 00:38:49,259
what would you like to do i would say

00:38:46,469 --> 00:38:51,179
play with blender and it's a mature

00:38:49,259 --> 00:38:56,449
package isn't even a blender for dummies

00:38:51,179 --> 00:38:59,129
book out there that so I mean and it's

00:38:56,449 --> 00:39:01,559
thousands of tutorials blender you

00:38:59,129 --> 00:39:04,529
download it install it it's free price

00:39:01,559 --> 00:39:06,929
is right just Google blender tutorials

00:39:04,529 --> 00:39:10,099
and you'll find blender tutorials on

00:39:06,929 --> 00:39:10,099
everything you can possibly imagine

00:39:35,660 --> 00:39:48,809
we should have sound but so why not find

00:39:45,240 --> 00:39:52,369
a tutorial tutorial on water and you'll

00:39:48,809 --> 00:39:52,369
find everything you want about water

00:40:07,970 --> 00:40:13,140
well the blender he began they have

00:40:10,650 --> 00:40:14,759
their user interface and they've stuck

00:40:13,140 --> 00:40:16,920
to it so when you go from release to

00:40:14,759 --> 00:40:18,930
release what worked last week works this

00:40:16,920 --> 00:40:20,880
week with the new release so you'll find

00:40:18,930 --> 00:40:23,880
new parameters new options and things

00:40:20,880 --> 00:40:26,430
are better but main they have their user

00:40:23,880 --> 00:40:27,720
base to protect and they just can't

00:40:26,430 --> 00:40:35,279
change it arbitrarily and have

00:40:27,720 --> 00:40:37,410
everything disappear well they made

00:40:35,279 --> 00:40:39,119
everything open and no one wanted to

00:40:37,410 --> 00:40:41,039
spend fifty thousand bucks or half

00:40:39,119 --> 00:40:45,240
million dollars on a reality engine to

00:40:41,039 --> 00:40:51,750
when you could buy a a at the time a

00:40:45,240 --> 00:40:54,029
thousand-dollar pc with a $300 graphics

00:40:51,750 --> 00:40:58,740
card in and that did eighty percent of

00:40:54,029 --> 00:41:12,299
what the half moon dollar box did so it

00:40:58,740 --> 00:41:16,519
went away it's open source this standard

00:41:12,299 --> 00:41:16,519
is administered by the Khronos group and

00:41:17,869 --> 00:41:24,779
any vendors up is welcome to adopt the

00:41:21,779 --> 00:41:26,220
standard and then publish or manufacture

00:41:24,779 --> 00:41:27,990
hardware that means the spec and the

00:41:26,220 --> 00:41:29,880
whole thing about meeting the spec if

00:41:27,990 --> 00:41:31,740
you meet the spec your application no

00:41:29,880 --> 00:41:33,630
matter who wrote it should run on that

00:41:31,740 --> 00:41:35,970
new hardware because it's compliant with

00:41:33,630 --> 00:41:37,680
the with the spec and there's compliance

00:41:35,970 --> 00:41:39,990
suites that you run so you can vary

00:41:37,680 --> 00:41:42,440
by that your your hardware properly

00:41:39,990 --> 00:41:58,500
functions everything works properly then

00:41:42,440 --> 00:42:02,940
you're done absolutely there's all sorts

00:41:58,500 --> 00:42:05,849
of stuff on on particle emitters so you

00:42:02,940 --> 00:42:07,380
can you know shoot pulses the light or

00:42:05,849 --> 00:42:10,140
wherever you want out of your ray guns

00:42:07,380 --> 00:42:12,089
and you'll know love you can turn on a

00:42:10,140 --> 00:42:13,950
ray tracing so it will refract and

00:42:12,089 --> 00:42:28,140
reflect through lens elements and stuff

00:42:13,950 --> 00:42:31,790
to do whatever you want so what's

00:42:28,140 --> 00:42:34,740
popular crumbling landscapes shaken by

00:42:31,790 --> 00:42:38,720
earthquakes buildings crumbling no

00:42:34,740 --> 00:42:38,720
spaceships have always been a big hit Oh

00:42:54,920 --> 00:43:04,500
trust me a lot of students who have zero

00:42:57,750 --> 00:43:06,089
budget know it's there oh they do they

00:43:04,500 --> 00:43:07,770
do it's just that they've been told by

00:43:06,089 --> 00:43:09,869
Auto that well there's a lot of its per

00:43:07,770 --> 00:43:11,819
bottle if you're going up on a contract

00:43:09,869 --> 00:43:13,650
and you're bidding against 10 animation

00:43:11,819 --> 00:43:15,690
studios and everybody's using my own

00:43:13,650 --> 00:43:18,119
you're using someone else clients going

00:43:15,690 --> 00:43:19,799
to look at you and wonder why is

00:43:18,119 --> 00:43:22,230
everybody using Maya and you're using

00:43:19,799 --> 00:43:24,180
something else so there's that bet to be

00:43:22,230 --> 00:43:25,680
understood but if you if you have a

00:43:24,180 --> 00:43:28,349
creative team that's better than the

00:43:25,680 --> 00:43:29,970
creative team of your competitors and

00:43:28,349 --> 00:43:32,220
you have a chance if you if you're just

00:43:29,970 --> 00:43:34,049
as good as anybody else from what you're

00:43:32,220 --> 00:43:36,750
distinguishing factor why they should

00:43:34,049 --> 00:43:39,240
choose you you don't have anything other

00:43:36,750 --> 00:43:41,970
then perhaps your cost is lower but

00:43:39,240 --> 00:43:45,000
again Maya's get down to 2,500 bucks

00:43:41,970 --> 00:43:46,770
used to be like 40,000 so 2,500 bucks a

00:43:45,000 --> 00:43:48,809
seat times the number of seats you have

00:43:46,770 --> 00:43:51,300
it's going to be a sizable chunk of coin

00:43:48,809 --> 00:44:04,110
if you got 80 or 100 seats

00:43:51,300 --> 00:44:08,700
but vs blender which is free I know I

00:44:04,110 --> 00:44:10,860
don't put well basically just sure it it

00:44:08,700 --> 00:44:12,390
matches up the pixels in one frame with

00:44:10,860 --> 00:44:13,770
an from the left Cameron want and the

00:44:12,390 --> 00:44:16,320
picture from the right Cameron those

00:44:13,770 --> 00:44:18,240
notices dispersion and that fits lines

00:44:16,320 --> 00:44:20,370
it knows it knows the inter actual

00:44:18,240 --> 00:44:22,590
spacing here so if it's a line from this

00:44:20,370 --> 00:44:24,720
camera and that camera to the identical

00:44:22,590 --> 00:44:33,930
pictures in each free and just solve the

00:44:24,720 --> 00:44:38,010
geometry just triangulates it's all you

00:44:33,930 --> 00:44:39,360
know on the web oh this is I like this

00:44:38,010 --> 00:44:42,150
one because it's got lots of examples

00:44:39,360 --> 00:44:52,650
mastering opencv with practical computer

00:44:42,150 --> 00:44:56,630
vision projects so here's grant that's

00:44:52,650 --> 00:44:59,400
true there's packages such as sin alara

00:44:56,630 --> 00:45:02,790
that's fairly mature I wouldn't it's not

00:44:59,400 --> 00:45:04,200
as that as as it's not avid but it is

00:45:02,790 --> 00:45:06,480
unless you're doing something really

00:45:04,200 --> 00:45:12,620
bizarre you can do ninety percent of

00:45:06,480 --> 00:45:12,620
things with it yeah

00:45:39,430 --> 00:45:57,800
okay go ahead yeah I designed the

00:45:54,170 --> 00:45:59,270
digital projector for imax and got a

00:45:57,800 --> 00:46:02,180
phone call from the chinese government

00:45:59,270 --> 00:46:05,990
saying come to China design one for us

00:46:02,180 --> 00:46:09,080
and I said no I'll design you a better

00:46:05,990 --> 00:46:11,150
one and I went to China and build a

00:46:09,080 --> 00:46:12,590
better one there was no cost barred we

00:46:11,150 --> 00:46:14,000
didn't have any constraints we just

00:46:12,590 --> 00:46:16,250
built the best projector and possibly

00:46:14,000 --> 00:46:18,590
could the same time we put together two

00:46:16,250 --> 00:46:23,930
GT 3d pipeline converting 2d movies to

00:46:18,590 --> 00:46:29,480
3d movies so we had 80 seats of Chinese

00:46:23,930 --> 00:46:31,190
operators using blender too because of

00:46:29,480 --> 00:46:34,310
the costs of nin blunder was free and if

00:46:31,190 --> 00:46:36,080
you buy 3d studio or Maya was expensive

00:46:34,310 --> 00:46:39,859
so by using blender we kept the cost now

00:46:36,080 --> 00:46:42,710
than it was great and I had to Train 80

00:46:39,859 --> 00:46:44,090
people in Chinese how to use bunder

00:46:42,710 --> 00:46:45,770
which was very fascinating we had

00:46:44,090 --> 00:46:47,570
translators and so I'll tell a

00:46:45,770 --> 00:46:49,820
translator the Riverway in Chinese and

00:46:47,570 --> 00:46:51,830
then run around make sure everybody got

00:46:49,820 --> 00:46:53,450
it thump on their keyboards and to

00:46:51,830 --> 00:46:55,520
everybody understood at the end of our

00:46:53,450 --> 00:46:57,800
training period we had 80 proficient

00:46:55,520 --> 00:47:13,790
blender operators that were able to work

00:46:57,800 --> 00:47:14,440
on the project any other questions well

00:47:13,790 --> 00:47:16,000
it all

00:47:14,440 --> 00:47:21,190
the number of triangles you have and

00:47:16,000 --> 00:47:23,260
again if you have a big budget big

00:47:21,190 --> 00:47:24,690
triangle budgets you're going to need

00:47:23,260 --> 00:47:27,130
more resources to do it quickly

00:47:24,690 --> 00:47:29,829
typically render farms multiple

00:47:27,130 --> 00:47:33,849
computers component commodity computers

00:47:29,829 --> 00:47:37,660
and and away you go so inexpensively you

00:47:33,849 --> 00:47:39,339
can put a render farm together you don't

00:47:37,660 --> 00:47:41,050
have to license stuff amaya to run the

00:47:39,339 --> 00:47:53,130
render farm so that's all there anyway

00:47:41,050 --> 00:47:53,130

YouTube URL: https://www.youtube.com/watch?v=2p7a2aYZb2s


