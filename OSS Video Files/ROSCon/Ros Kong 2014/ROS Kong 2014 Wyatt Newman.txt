Title: ROS Kong 2014 Wyatt Newman
Publication date: 2014-07-17
Playlist: Ros Kong 2014
Description: 
	Unaltered video by Open Robotics from https://roscon.ros.org/hk/2014/ under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,000 --> 00:00:03,149
so hi everyone my name's Chris

00:00:01,709 --> 00:00:05,370
swettenham and I'm a research associate

00:00:03,149 --> 00:00:07,799
with the advanced robotics laboratory at

00:00:05,370 --> 00:00:08,820
the University of Hong Kong and I'm here

00:00:07,799 --> 00:00:10,469
to tell you a bit about how i've been

00:00:08,820 --> 00:00:13,950
using ross and integrating with the

00:00:10,469 --> 00:00:15,509
Atlas robot from Boston Dynamics the

00:00:13,950 --> 00:00:17,010
advanced robotics laboratory is a new

00:00:15,509 --> 00:00:19,260
laboratory established less than two

00:00:17,010 --> 00:00:20,970
years ago with the goal of putting Hong

00:00:19,260 --> 00:00:22,710
Kong on the map in the field of robotics

00:00:20,970 --> 00:00:24,090
we're a small team with only eight

00:00:22,710 --> 00:00:25,439
full-time members along with many

00:00:24,090 --> 00:00:26,490
students who have helped for a few

00:00:25,439 --> 00:00:28,920
months each over the course of the

00:00:26,490 --> 00:00:30,960
project our main focus right now is

00:00:28,920 --> 00:00:32,940
participating as team HKU in the DARPA

00:00:30,960 --> 00:00:34,020
Robotics Challenge imagine most of you

00:00:32,940 --> 00:00:35,219
have heard of it but in case you're not

00:00:34,020 --> 00:00:39,120
familiar with the detailed here's a

00:00:35,219 --> 00:00:40,530
quick overview so the doppler robotics

00:00:39,120 --> 00:00:42,300
challenge is the latest in a line of

00:00:40,530 --> 00:00:44,640
ambitious challenges organized and

00:00:42,300 --> 00:00:46,590
funded by DARPA this time inspired by

00:00:44,640 --> 00:00:49,140
the disaster response scenarios such as

00:00:46,590 --> 00:00:51,390
the one faced by injure face by Japan

00:00:49,140 --> 00:00:52,800
after the Fukushima disaster so the

00:00:51,390 --> 00:00:54,989
competition features eight task to be

00:00:52,800 --> 00:00:56,699
performed by the team's robots including

00:00:54,989 --> 00:00:59,640
difficult terrain to be navigated and

00:00:56,699 --> 00:01:01,350
challenging manipulation tasks there was

00:00:59,640 --> 00:01:03,960
a virtual robotics challenge using cloud

00:01:01,350 --> 00:01:05,250
same last summer and the robotics

00:01:03,960 --> 00:01:06,659
challenge trials were held at the

00:01:05,250 --> 00:01:09,240
homestead speedway in Miami last

00:01:06,659 --> 00:01:10,619
December I'm not certain of the exact

00:01:09,240 --> 00:01:12,299
number of teams still running right now

00:01:10,619 --> 00:01:13,950
but I think they're about six teams

00:01:12,299 --> 00:01:16,170
competing with their own robots and

00:01:13,950 --> 00:01:17,970
seven teams using the Atlas including

00:01:16,170 --> 00:01:19,409
team HKU but as mentioned previously

00:01:17,970 --> 00:01:22,619
we're the only team to have purchased

00:01:19,409 --> 00:01:24,900
the Atlas ourselves so Atlas is

00:01:22,619 --> 00:01:26,670
currently configured has 28 joints

00:01:24,900 --> 00:01:29,610
including six degrees of freedom in the

00:01:26,670 --> 00:01:31,079
arms is hydraulically actuated with an

00:01:29,610 --> 00:01:33,420
onboard computer that provides several

00:01:31,079 --> 00:01:35,460
built-in behaviors including balancing

00:01:33,420 --> 00:01:37,020
and walking it's designed to be used

00:01:35,460 --> 00:01:39,770
with a multi-sensor cell head from

00:01:37,020 --> 00:01:42,780
carnegie robotics which combines an IMU

00:01:39,770 --> 00:01:45,000
stereo cameras and an fpga for onboard

00:01:42,780 --> 00:01:49,229
stereo matching and a Hoku your laser

00:01:45,000 --> 00:01:50,700
scanner the wrists on atlas have six six

00:01:49,229 --> 00:01:52,860
degree-of-freedom force torque sensors

00:01:50,700 --> 00:01:55,049
and a choice of hands most teams

00:01:52,860 --> 00:01:57,140
received one pair of hands from iRobot

00:01:55,049 --> 00:01:59,340
and one pair of hands from sandia labs

00:01:57,140 --> 00:02:01,079
since we were purchasing parts ourselves

00:01:59,340 --> 00:02:05,280
we were only able to purchase the the

00:02:01,079 --> 00:02:06,600
Sandia Labs hands so even before we got

00:02:05,280 --> 00:02:08,099
our hands on the real Atlas we

00:02:06,600 --> 00:02:10,979
participated in the virtual challenge

00:02:08,099 --> 00:02:12,170
using gazebo and the DRC sim package to

00:02:10,979 --> 00:02:14,330
simulate Atlas and the channel

00:02:12,170 --> 00:02:15,860
tasks this was great because it allowed

00:02:14,330 --> 00:02:17,480
us to head start developing for Atlas

00:02:15,860 --> 00:02:19,700
and even now we test many things in

00:02:17,480 --> 00:02:21,650
gazebo before using the real robot since

00:02:19,700 --> 00:02:23,569
it's much faster to reiterate on and

00:02:21,650 --> 00:02:27,020
it's a lot less expensive when Atlas

00:02:23,569 --> 00:02:28,430
falls over and that said a lot of

00:02:27,020 --> 00:02:30,770
differences between the real Atlas and

00:02:28,430 --> 00:02:33,050
one and DRC sim the inertial properties

00:02:30,770 --> 00:02:34,730
seem to match the real Atlas well the

00:02:33,050 --> 00:02:37,670
joint talk limits and the sensor noise

00:02:34,730 --> 00:02:39,590
levels don't seem to match the real out

00:02:37,670 --> 00:02:40,850
listen I experience so that I think

00:02:39,590 --> 00:02:43,220
these these are things that should be

00:02:40,850 --> 00:02:46,130
quite easy to improve on and we have to

00:02:43,220 --> 00:02:47,989
look into that in the future maybe see

00:02:46,130 --> 00:02:51,200
if we can make suggestions of what the

00:02:47,989 --> 00:02:52,850
actual value should be we've also been

00:02:51,200 --> 00:02:55,549
developing our own balancing controllers

00:02:52,850 --> 00:02:57,950
and as we did that we noticed a lot of

00:02:55,549 --> 00:02:59,750
contact chatter which leads to a lot of

00:02:57,950 --> 00:03:02,630
noise in the force torque sensors in the

00:02:59,750 --> 00:03:04,220
ankles we haven't yet experimented with

00:03:02,630 --> 00:03:06,680
the new physics engines that are

00:03:04,220 --> 00:03:11,930
available in later releases of gazebo so

00:03:06,680 --> 00:03:13,280
that's something we hope to try soon in

00:03:11,930 --> 00:03:15,500
continuing in order of things that

00:03:13,280 --> 00:03:18,500
increasingly hard to fix the DRC sim

00:03:15,500 --> 00:03:21,709
gives you perfect talk sources in the

00:03:18,500 --> 00:03:24,530
joints within limits whereas the real

00:03:21,709 --> 00:03:25,910
Atlas is hydraulically actuated the

00:03:24,530 --> 00:03:28,130
significant friction that leads to

00:03:25,910 --> 00:03:30,890
hysteresis which is hopefully visible in

00:03:28,130 --> 00:03:35,780
this diagram of the actuator effort

00:03:30,890 --> 00:03:37,549
versus the achieve joint angle so that's

00:03:35,780 --> 00:03:39,290
been especially significant in the

00:03:37,549 --> 00:03:42,049
development of our compliant controller

00:03:39,290 --> 00:03:47,120
that uses direct control of the electro

00:03:42,049 --> 00:03:49,130
hydraulic actuators that said now that

00:03:47,120 --> 00:03:50,269
we have the compliant controller we

00:03:49,130 --> 00:03:52,280
actually have something that behaves a

00:03:50,269 --> 00:03:53,840
lot more like a direct talk source so

00:03:52,280 --> 00:03:56,720
everything that's developed on top of it

00:03:53,840 --> 00:03:58,430
we can test more directly in gazebo but

00:03:56,720 --> 00:04:00,760
I think something like this would be

00:03:58,430 --> 00:04:04,100
reasonably straightforward to emulate

00:04:00,760 --> 00:04:07,269
inside the the Atlas plugin for gazebo

00:04:04,100 --> 00:04:09,230
so that's another thing to look into

00:04:07,269 --> 00:04:10,970
finally Atlas comes with built-in

00:04:09,230 --> 00:04:13,430
behaviors for build it offer for

00:04:10,970 --> 00:04:16,190
balancing stepping in walking and during

00:04:13,430 --> 00:04:17,810
the VRC these work fine in gazebo thanks

00:04:16,190 --> 00:04:21,500
to a binary blob shipped by Boston

00:04:17,810 --> 00:04:23,840
Dynamics unfortunately when when the

00:04:21,500 --> 00:04:25,389
real Atlas shipped the DRC sim models

00:04:23,840 --> 00:04:27,520
were all updated to match the

00:04:25,389 --> 00:04:28,990
the real final version of the robot but

00:04:27,520 --> 00:04:32,710
Boston Dynamics didn't update their

00:04:28,990 --> 00:04:34,300
binary blob so the mass for instance of

00:04:32,710 --> 00:04:35,949
Atlas and the center of mass are all

00:04:34,300 --> 00:04:37,599
different and so the old walking

00:04:35,949 --> 00:04:39,699
controller doesn't work anymore you can

00:04:37,599 --> 00:04:43,060
always switch back to the old models and

00:04:39,699 --> 00:04:45,189
then the walking works in gazebo but all

00:04:43,060 --> 00:04:47,319
of our own behaviors would would behave

00:04:45,189 --> 00:04:49,090
in unexpected ways so that's something I

00:04:47,319 --> 00:04:51,340
don't think can be fixed very easily

00:04:49,090 --> 00:04:55,270
unless Boston Dynamics decide to ship a

00:04:51,340 --> 00:04:56,469
new version of their controller so once

00:04:55,270 --> 00:04:57,729
the real lattice was delivered we

00:04:56,469 --> 00:05:00,219
started trying to make it work with our

00:04:57,729 --> 00:05:02,199
software the multi sent head in the

00:05:00,219 --> 00:05:05,050
sandia hands already have ross drivers

00:05:02,199 --> 00:05:06,969
that match the DRC some interfaces Atlas

00:05:05,050 --> 00:05:09,729
itself ships with an API but no Ross

00:05:06,969 --> 00:05:11,439
support so one of the first task when we

00:05:09,729 --> 00:05:13,629
received the Atlas last August was to

00:05:11,439 --> 00:05:16,060
create a Ross interface and we created a

00:05:13,629 --> 00:05:18,490
Ross API that more or less matches the

00:05:16,060 --> 00:05:20,129
the DRC same one we started by hacking

00:05:18,490 --> 00:05:21,879
on the example code for the API

00:05:20,129 --> 00:05:23,800
intending to replace it with something

00:05:21,879 --> 00:05:25,029
better soon so of course always happens

00:05:23,800 --> 00:05:31,240
we're still using the same thing a year

00:05:25,029 --> 00:05:33,279
later so on top of the base across API

00:05:31,240 --> 00:05:35,650
for Atlas based on joint commands or

00:05:33,279 --> 00:05:37,150
Atlas command messages we wanted a way

00:05:35,650 --> 00:05:38,469
to allow multiple nodes developed by

00:05:37,150 --> 00:05:40,330
different people to be able to control

00:05:38,469 --> 00:05:42,759
subsets of the joints and handoff

00:05:40,330 --> 00:05:44,080
control to each other in a safe way we

00:05:42,759 --> 00:05:46,330
have an abstraction layer called the

00:05:44,080 --> 00:05:47,710
low-level joint controller and that is

00:05:46,330 --> 00:05:49,629
the only node giving joint commands

00:05:47,710 --> 00:05:51,250
directly to Atlas now the nodes make

00:05:49,629 --> 00:05:53,949
service calls to register with it as

00:05:51,250 --> 00:05:56,710
behaviors and each behavior is a node

00:05:53,949 --> 00:05:58,240
that accepts actions and can then ask

00:05:56,710 --> 00:05:59,560
the low-level joint controller for

00:05:58,240 --> 00:06:02,979
temporary control over a subset of

00:05:59,560 --> 00:06:04,810
joints these invitations can be

00:06:02,979 --> 00:06:07,270
short-lived as in the case of recorded

00:06:04,810 --> 00:06:08,560
trajectories or long-lived like you're

00:06:07,270 --> 00:06:10,899
continuously running balancing

00:06:08,560 --> 00:06:12,339
controller we've recently added an

00:06:10,899 --> 00:06:14,229
option to control each joint by the

00:06:12,339 --> 00:06:16,839
position and velocity control or

00:06:14,229 --> 00:06:18,819
compliant position control so here's a

00:06:16,839 --> 00:06:20,949
short example of Atlas using compliant

00:06:18,819 --> 00:06:26,740
control on the arms to grab an egg and

00:06:20,949 --> 00:06:28,779
it can grab other objects as well so

00:06:26,740 --> 00:06:30,909
based on the force torque sensors in the

00:06:28,779 --> 00:06:34,020
wrists it can gently grab anything and

00:06:30,909 --> 00:06:34,020
that'll be part of our demo later

00:06:35,730 --> 00:06:41,140
so as part of the simulated disaster

00:06:39,010 --> 00:06:43,000
response scenario communications between

00:06:41,140 --> 00:06:45,520
the operators and the robot are severely

00:06:43,000 --> 00:06:47,650
restricted the machines on the robot

00:06:45,520 --> 00:06:49,780
side are called the field computer or FC

00:06:47,650 --> 00:06:52,590
and the machines on the operator side

00:06:49,780 --> 00:06:54,880
are the operator control station or OCS

00:06:52,590 --> 00:06:57,850
DARPA imposed latency and bandwidth

00:06:54,880 --> 00:06:59,560
restrictions between the FC and OCS with

00:06:57,850 --> 00:07:01,180
the exact methods and restrictions

00:06:59,560 --> 00:07:02,800
varying as the competition has evolved

00:07:01,180 --> 00:07:04,540
during the virtual challenge we had

00:07:02,800 --> 00:07:06,580
limit on the total number of bytes sent

00:07:04,540 --> 00:07:10,420
and a limit on the total number of bytes

00:07:06,580 --> 00:07:13,180
received during one attempt at one of

00:07:10,420 --> 00:07:16,000
the tasks we were just talking ttp Ross

00:07:13,180 --> 00:07:17,530
over the limited connection and our

00:07:16,000 --> 00:07:19,270
field computer nodes running in a cloud

00:07:17,530 --> 00:07:21,430
server instance and our local machines

00:07:19,270 --> 00:07:23,500
connected to the remote Marsh master as

00:07:21,430 --> 00:07:26,500
well obviously Ross isn't designed to be

00:07:23,500 --> 00:07:28,450
used this way and their web many topics

00:07:26,500 --> 00:07:29,710
that use a lot of bandwidth so as we

00:07:28,450 --> 00:07:31,030
encountered topics of a particularly

00:07:29,710 --> 00:07:32,500
problematic we would find some

00:07:31,030 --> 00:07:35,710
workaround for that topic and move on to

00:07:32,500 --> 00:07:37,720
the next typically we'd create services

00:07:35,710 --> 00:07:39,010
that would pull the remote end for a

00:07:37,720 --> 00:07:41,580
snapshot of the data we were interested

00:07:39,010 --> 00:07:43,390
in as configured by local user interface

00:07:41,580 --> 00:07:44,860
topics that were particularly

00:07:43,390 --> 00:07:49,090
problematic there include the clock

00:07:44,860 --> 00:07:50,890
topic since we were running Zeebo so we

00:07:49,090 --> 00:07:52,420
tried remapping the clock topic but that

00:07:50,890 --> 00:07:55,570
doesn't actually work with Ross CPP as

00:07:52,420 --> 00:07:57,780
it turns out so we ended up manually

00:07:55,570 --> 00:07:59,800
clearing the use sim time parameter

00:07:57,780 --> 00:08:01,270
after launching the remote nodes and

00:07:59,800 --> 00:08:04,240
before launching a local once i was

00:08:01,270 --> 00:08:05,650
quite horrible so this whole thing this

00:08:04,240 --> 00:08:07,510
whole setup was quite error-prone during

00:08:05,650 --> 00:08:09,760
actual operation since the task of

00:08:07,510 --> 00:08:10,840
managing network resources then too tall

00:08:09,760 --> 00:08:12,360
mesh with anything else that the

00:08:10,840 --> 00:08:14,380
operator was concerned with other time

00:08:12,360 --> 00:08:15,400
and we know from the forums that we

00:08:14,380 --> 00:08:17,470
weren't the only ones to try this

00:08:15,400 --> 00:08:19,420
approach of using Ross to communicate

00:08:17,470 --> 00:08:21,070
directly over the restricted network

00:08:19,420 --> 00:08:23,140
connection it didn't work too well for

00:08:21,070 --> 00:08:24,580
us so it was far too easy to introduce

00:08:23,140 --> 00:08:28,210
new topics that would use up a lot of

00:08:24,580 --> 00:08:30,790
bandwidth so for the net next iteration

00:08:28,210 --> 00:08:32,890
we went for an approach based on

00:08:30,790 --> 00:08:34,540
explicit white listing of topics between

00:08:32,890 --> 00:08:37,240
two distinct set of Ross nodes with

00:08:34,540 --> 00:08:39,400
their own masters on each end a node

00:08:37,240 --> 00:08:40,810
called Ross net tunnel is started it

00:08:39,400 --> 00:08:43,210
reads the yeah mph alf initial

00:08:40,810 --> 00:08:45,280
configuration and it establishes a link

00:08:43,210 --> 00:08:47,230
between the two ends and the

00:08:45,280 --> 00:08:47,710
configuration file can specify both the

00:08:47,230 --> 00:08:49,240
rate limit

00:08:47,710 --> 00:08:51,220
tender bandwidth limit per topic and

00:08:49,240 --> 00:08:54,880
topics can be set as reliable or

00:08:51,220 --> 00:08:56,380
unreliable it uses Ross topic tools to

00:08:54,880 --> 00:08:58,540
forward messages without having to

00:08:56,380 --> 00:08:59,980
deserialize them I actually found that

00:08:58,540 --> 00:09:02,220
with a few extra template

00:08:59,980 --> 00:09:06,040
specializations you can also forward

00:09:02,220 --> 00:09:07,630
Ross service calls transparently with

00:09:06,040 --> 00:09:10,300
that without having to know the service

00:09:07,630 --> 00:09:12,340
definition but I decided against

00:09:10,300 --> 00:09:14,920
forwarding services in the net tunnel

00:09:12,340 --> 00:09:17,020
because you making service calls when

00:09:14,920 --> 00:09:18,610
you know you're going to have a high

00:09:17,020 --> 00:09:19,840
latency seems like a pretty bad idea

00:09:18,610 --> 00:09:22,210
similarly since we knew we had low

00:09:19,840 --> 00:09:25,840
bandwidth forwarding dynamic reconfigure

00:09:22,210 --> 00:09:27,490
didn't seem like a great idea we can't

00:09:25,840 --> 00:09:30,180
we could forward Ross parameters we

00:09:27,490 --> 00:09:33,820
haven't found a need for it yet and

00:09:30,180 --> 00:09:35,500
finally we support special syntax in the

00:09:33,820 --> 00:09:37,990
amyl file for actions which just

00:09:35,500 --> 00:09:39,730
generates the five topics in the two

00:09:37,990 --> 00:09:45,780
different directions were quite for each

00:09:39,730 --> 00:09:45,780
action so that was our approach in Miami

00:09:47,100 --> 00:09:52,690
I've recently learned of of WP eyes

00:09:51,070 --> 00:09:54,990
package so that's something to compare

00:09:52,690 --> 00:09:57,190
it with this was only an approach for

00:09:54,990 --> 00:09:59,290
controlling the topics between the two

00:09:57,190 --> 00:10:02,370
ends it doesn't deal with by itself with

00:09:59,290 --> 00:10:02,370
compression or anything like that

00:10:03,720 --> 00:10:07,510
another thing we developed is a tool

00:10:05,740 --> 00:10:10,000
called HQ make this was to help the

00:10:07,510 --> 00:10:11,320
transition from Ross build catkin you

00:10:10,000 --> 00:10:13,480
can give it a package name or list

00:10:11,320 --> 00:10:14,890
package names and it will invoke the

00:10:13,480 --> 00:10:17,350
appropriate build command in the correct

00:10:14,890 --> 00:10:19,150
order it also speeds up the

00:10:17,350 --> 00:10:21,280
configuration step for catkin packages

00:10:19,150 --> 00:10:24,120
by using the whitelist feature so only

00:10:21,280 --> 00:10:26,470
relevant packages are configured and

00:10:24,120 --> 00:10:33,550
most importantly it uses a cow say to

00:10:26,470 --> 00:10:36,070
report build output next we've been

00:10:33,550 --> 00:10:37,900
recently using smash to develop some

00:10:36,070 --> 00:10:39,310
state machines for demonstrations it's

00:10:37,900 --> 00:10:43,030
very flexible and we've been able to

00:10:39,310 --> 00:10:46,330
wrap everything from action requests to

00:10:43,030 --> 00:10:48,190
command line tool executions and messy

00:10:46,330 --> 00:10:50,080
topic-based workflows that we hope to

00:10:48,190 --> 00:10:54,130
transition to action servers in due

00:10:50,080 --> 00:10:55,810
course they're many stages where it's

00:10:54,130 --> 00:10:59,500
not possible to operate fully

00:10:55,810 --> 00:11:01,630
automatically so our state machine will

00:10:59,500 --> 00:11:04,300
stop and ask the user to visualize

00:11:01,630 --> 00:11:06,820
the next step and intervene manually if

00:11:04,300 --> 00:11:08,440
necessary so I'm going to take you

00:11:06,820 --> 00:11:11,140
through the stages in one of our state

00:11:08,440 --> 00:11:17,440
machines which is the grasping demo that

00:11:11,140 --> 00:11:18,820
you'll be able to see you later today so

00:11:17,440 --> 00:11:20,620
the first step after we have Atlas

00:11:18,820 --> 00:11:22,960
booted up and safely on the ground is to

00:11:20,620 --> 00:11:24,610
initialize our localization node this

00:11:22,960 --> 00:11:27,670
uses the laser scanner to track the

00:11:24,610 --> 00:11:29,470
position of multiple planes the user

00:11:27,670 --> 00:11:31,830
helps it identify the plains of interest

00:11:29,470 --> 00:11:33,880
by selecting patches on each plane and

00:11:31,830 --> 00:11:39,490
after that the no-contract them without

00:11:33,880 --> 00:11:41,320
further user intervention it then uses

00:11:39,490 --> 00:11:44,050
these planes to estimate the position of

00:11:41,320 --> 00:11:45,670
atlas and publish a map frame it

00:11:44,050 --> 00:11:48,280
continuously fits the plant to the laser

00:11:45,670 --> 00:11:49,630
scans using ransack it can track the

00:11:48,280 --> 00:11:51,340
position of the robot within a few

00:11:49,630 --> 00:11:53,640
centimeters which is close to the

00:11:51,340 --> 00:11:55,600
accuracy of the hockey or laser itself

00:11:53,640 --> 00:11:57,040
currently this only works in our lab we

00:11:55,600 --> 00:12:02,080
hope to extend it to other environment

00:11:57,040 --> 00:12:04,960
in the future and the next step ask the

00:12:02,080 --> 00:12:06,310
user to pick a destination for Atlas we

00:12:04,960 --> 00:12:08,410
have an interactive marker that shows

00:12:06,310 --> 00:12:10,540
the workspace for one of Alice's arms

00:12:08,410 --> 00:12:12,130
and we can move it around so that the

00:12:10,540 --> 00:12:13,720
workspace covers the region of interest

00:12:12,130 --> 00:12:15,970
in this case an object that we're going

00:12:13,720 --> 00:12:18,250
to pick up the market position then

00:12:15,970 --> 00:12:23,530
gives us a goal for the next step which

00:12:18,250 --> 00:12:25,030
is walking so based on the walking goal

00:12:23,530 --> 00:12:27,250
and the current position estimate from

00:12:25,030 --> 00:12:29,080
the map frame are walking node computes

00:12:27,250 --> 00:12:31,360
a sequence of steps in several segments

00:12:29,080 --> 00:12:33,910
that can include turns large steps

00:12:31,360 --> 00:12:35,440
forward and small correction steps since

00:12:33,910 --> 00:12:37,600
the walking is only accurate to a few

00:12:35,440 --> 00:12:39,880
centimeters after executing each segment

00:12:37,600 --> 00:12:42,310
it really evaluate its current position

00:12:39,880 --> 00:12:44,290
and recompute the subsequent segments to

00:12:42,310 --> 00:12:47,140
reach the goal until it's satisfied it's

00:12:44,290 --> 00:12:49,120
close enough now each step the user can

00:12:47,140 --> 00:12:51,340
visualize the planned steps in case of

00:12:49,120 --> 00:12:55,960
problems can interactively enter steps

00:12:51,340 --> 00:12:58,770
using an xbox 360 controller so here's a

00:12:55,960 --> 00:12:58,770
full clip of the walking

00:13:10,220 --> 00:13:14,360
one of the utilities we developed very

00:13:12,510 --> 00:13:16,950
early on is a tool called play file and

00:13:14,360 --> 00:13:18,990
this is simply a yam will format for

00:13:16,950 --> 00:13:20,490
saved poses and trajectories and a

00:13:18,990 --> 00:13:22,260
command-line tool that reads these files

00:13:20,490 --> 00:13:24,930
into a joint trajectory message and

00:13:22,260 --> 00:13:27,090
invokes an action server we can also

00:13:24,930 --> 00:13:28,620
specify for each joint whether it it

00:13:27,090 --> 00:13:31,800
will be controlled by position control

00:13:28,620 --> 00:13:33,180
compliant control or not affected it's a

00:13:31,800 --> 00:13:35,130
simple tool but we've made a lot of use

00:13:33,180 --> 00:13:37,590
of it for a quick experimentation and

00:13:35,130 --> 00:13:40,080
for tying things together at this stage

00:13:37,590 --> 00:13:41,910
in the demonstration we use it to move

00:13:40,080 --> 00:13:43,290
the arm into pre graphs pose without

00:13:41,910 --> 00:13:47,370
knocking over the objects we're trying

00:13:43,290 --> 00:13:48,630
to grab to one if one interesting thing

00:13:47,370 --> 00:13:51,180
we've been able to do with this Andy

00:13:48,630 --> 00:13:54,510
Irons is use the built-in stereo cameras

00:13:51,180 --> 00:13:56,130
to reliably grasp an object we use ICP

00:13:54,510 --> 00:13:57,960
to match your model to the point cloud

00:13:56,130 --> 00:13:59,550
coming from the hand cameras and that

00:13:57,960 --> 00:14:00,810
allows us to reach the object much more

00:13:59,550 --> 00:14:03,210
accurately than if we use the head

00:14:00,810 --> 00:14:04,620
because we're eliminating all the

00:14:03,210 --> 00:14:07,710
position error from the joints in the

00:14:04,620 --> 00:14:09,000
arm so this stage we've got the hand in

00:14:07,710 --> 00:14:11,070
what we expect will be a good position

00:14:09,000 --> 00:14:12,900
for the cameras and the user can check

00:14:11,070 --> 00:14:15,630
that the camera has the object in view

00:14:12,900 --> 00:14:16,740
and move the hand around in the camera

00:14:15,630 --> 00:14:23,040
frame to give you a better view if

00:14:16,740 --> 00:14:24,660
necessary so now if the point cloud and

00:14:23,040 --> 00:14:26,760
the position estimate for the object all

00:14:24,660 --> 00:14:30,060
look reasonable and the user can approve

00:14:26,760 --> 00:14:31,290
an automatic approach otherwise the gold

00:14:30,060 --> 00:14:34,070
can also be set manually with an

00:14:31,290 --> 00:14:34,070
interactive marker

00:14:41,240 --> 00:14:45,860
so once the goal for the hand has been

00:14:43,339 --> 00:14:47,690
set we invoke an action client

00:14:45,860 --> 00:14:49,250
specialized for small accurate movement

00:14:47,690 --> 00:14:50,570
to move the hand to the goal if

00:14:49,250 --> 00:14:52,490
everything looks good the user can then

00:14:50,570 --> 00:14:54,170
close the hand we make a second small

00:14:52,490 --> 00:14:56,180
local movement to raise the object and

00:14:54,170 --> 00:14:58,040
then we execute another safe trajectory

00:14:56,180 --> 00:15:08,720
to hand over the object or human

00:14:58,040 --> 00:15:10,940
operator so I've got I've got time left

00:15:08,720 --> 00:15:14,660
I'm going to alter quickly mention we

00:15:10,940 --> 00:15:17,360
have we have made use of move it we used

00:15:14,660 --> 00:15:20,390
it in Miami and it got us a point on the

00:15:17,360 --> 00:15:21,890
door task we aren't using it right now

00:15:20,390 --> 00:15:24,440
because unfortunately all of our movie

00:15:21,890 --> 00:15:29,930
experts have moved on to other projects

00:15:24,440 --> 00:15:32,209
so but in so not experience um I think

00:15:29,930 --> 00:15:33,529
that the the planning component of movie

00:15:32,209 --> 00:15:35,899
is definitely something i want to

00:15:33,529 --> 00:15:38,649
reintegrate in the future we don't have

00:15:35,899 --> 00:15:42,589
any any type of planning at the moment

00:15:38,649 --> 00:15:46,040
we did encounter problems with the

00:15:42,589 --> 00:15:48,700
interactive user interface for move it

00:15:46,040 --> 00:15:52,070
one of the problems is that actually

00:15:48,700 --> 00:15:54,890
Atlas his arms only have six degrees of

00:15:52,070 --> 00:15:56,899
freedom and is very easy to bind it into

00:15:54,890 --> 00:15:58,490
awkward positions so when you're moving

00:15:56,899 --> 00:16:01,370
it around with the interactive markers

00:15:58,490 --> 00:16:08,630
it can be quite difficult to reach a

00:16:01,370 --> 00:16:10,130
destination also actually in terms of

00:16:08,630 --> 00:16:13,010
interfaces we've tried a lot of

00:16:10,130 --> 00:16:16,130
different things for specifying a goal

00:16:13,010 --> 00:16:18,079
and I think specifying where the object

00:16:16,130 --> 00:16:20,089
is that you're interested in and then

00:16:18,079 --> 00:16:22,790
automatic imputing the pose you want to

00:16:20,089 --> 00:16:25,130
reach is is a much more efficient

00:16:22,790 --> 00:16:26,930
approach in terms of just the amount of

00:16:25,130 --> 00:16:30,110
time it takes for the user to specify it

00:16:26,930 --> 00:16:34,120
than then trying to manually move the

00:16:30,110 --> 00:16:34,120
hand in RVs towards the object

00:16:38,620 --> 00:16:42,890
so that's it for this talk after the

00:16:41,510 --> 00:16:44,210
lightning talks will be running a demo

00:16:42,890 --> 00:16:46,070
several times and you'll be able to see

00:16:44,210 --> 00:16:47,510
many of the tools and behaviors I've

00:16:46,070 --> 00:16:51,070
mentioned today put into practice on the

00:16:47,510 --> 00:16:51,070

YouTube URL: https://www.youtube.com/watch?v=2Mvkgjp2Qxs


