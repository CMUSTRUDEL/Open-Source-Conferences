Title: ROSCon 2012 - URDF and You
Publication date: 2014-08-31
Playlist: ROSCon 2012
Description: 
	David Lu
URDF and YOU

Slides: http://www.cse.wustl.edu/~dvl1/?p=93
Captions: 
	00:00:00,030 --> 00:00:06,299
all right good morning so welcome to our

00:00:02,460 --> 00:00:08,250
first session in anger as it were to get

00:00:06,299 --> 00:00:09,480
into the details sort of slightly a

00:00:08,250 --> 00:00:11,790
nightmare when you have to introduce

00:00:09,480 --> 00:00:13,469
people and their names are difficult to

00:00:11,790 --> 00:00:17,580
pronounce I guess we're just gonna have

00:00:13,469 --> 00:00:19,140
to call this guy david liu bang bang but

00:00:17,580 --> 00:00:23,000
maybe he'll go by David so David's gonna

00:00:19,140 --> 00:00:23,000
talk about you RDF please welcome David

00:00:26,660 --> 00:00:30,750
hi good morning it's a pleasure to be

00:00:29,220 --> 00:00:34,020
talking to all of you here at the

00:00:30,750 --> 00:00:35,760
inaugural Ross Kahn my name is David boo

00:00:34,020 --> 00:00:39,300
I'm a PhD student at Washington

00:00:35,760 --> 00:00:40,770
University working on expressive motion

00:00:39,300 --> 00:00:43,290
for improving human robot interaction

00:00:40,770 --> 00:00:44,489
and not as it turns out you are yet you

00:00:43,290 --> 00:00:46,260
already F is just something that I've

00:00:44,489 --> 00:00:48,450
spent a lot of time working with I

00:00:46,260 --> 00:00:50,280
didn't actually develop the standards so

00:00:48,450 --> 00:00:54,180
take everything I say with a slight

00:00:50,280 --> 00:00:57,030
grain of salt uh so yes we're talking

00:00:54,180 --> 00:00:59,430
about you RDF today most of you RDF not

00:00:57,030 --> 00:01:02,280
as much about you I'm sorry

00:00:59,430 --> 00:01:05,040
and you RDF is the unified robot

00:01:02,280 --> 00:01:06,990
description format and what that is is

00:01:05,040 --> 00:01:09,150
it's a file format that allows you to go

00:01:06,990 --> 00:01:11,270
from a physical specification for your

00:01:09,150 --> 00:01:18,119
robot like we have on the left this is

00:01:11,270 --> 00:01:21,299
wash use b21 are named Lewis and then

00:01:18,119 --> 00:01:25,650
you go from that to a XML representation

00:01:21,299 --> 00:01:28,320
of your robot and then it can go into a

00:01:25,650 --> 00:01:30,780
number of different Ross programs and

00:01:28,320 --> 00:01:32,820
nodes such as our VA's as you see all

00:01:30,780 --> 00:01:34,680
the way on the right there throughout

00:01:32,820 --> 00:01:36,869
this talk there will be little blue

00:01:34,680 --> 00:01:38,939
boxes on the bottom that will reference

00:01:36,869 --> 00:01:41,340
wiki pages where you can find more

00:01:38,939 --> 00:01:42,899
information everything that I don't talk

00:01:41,340 --> 00:01:45,630
about in this talk related to you RDF

00:01:42,899 --> 00:01:48,990
can be found on the wiki page in the

00:01:45,630 --> 00:01:52,680
specification there and so when we get

00:01:48,990 --> 00:01:54,299
down to it you argue oh the general

00:01:52,680 --> 00:01:56,759
outline is I'm going to start with the

00:01:54,299 --> 00:01:58,439
overall XML specification all the

00:01:56,759 --> 00:02:01,740
elements that you can put into you RDF

00:01:58,439 --> 00:02:04,890
and then the where those elements are

00:02:01,740 --> 00:02:07,560
used throughout Ross then I'm gonna also

00:02:04,890 --> 00:02:09,720
talk about the tools that you can use to

00:02:07,560 --> 00:02:11,550
examine and modify your you RDF files

00:02:09,720 --> 00:02:13,460
and then I'm going to end with some of

00:02:11,550 --> 00:02:15,140
the limitations of you RDF

00:02:13,460 --> 00:02:16,790
things that you can't model or at least

00:02:15,140 --> 00:02:20,390
you can't model without some small

00:02:16,790 --> 00:02:23,540
amount of black magic so when we get

00:02:20,390 --> 00:02:27,170
down to it you RDF is XML and it's made

00:02:23,540 --> 00:02:29,840
up of links and joints so here we have

00:02:27,170 --> 00:02:31,940
at the top our XML specification the

00:02:29,840 --> 00:02:34,160
overall wrapper tag is called robot

00:02:31,940 --> 00:02:36,800
oddly enough and then inside we have

00:02:34,160 --> 00:02:40,520
links and joints so here we have two

00:02:36,800 --> 00:02:43,360
links link to the past and link hogs Rob

00:02:40,520 --> 00:02:47,350
and they are connected with a joint

00:02:43,360 --> 00:02:50,300
joint expenditure and with that we can

00:02:47,350 --> 00:02:54,560
reconnect the joint we connect the two

00:02:50,300 --> 00:02:57,380
links with that joint with them having a

00:02:54,560 --> 00:02:59,140
parent and child relationship and with

00:02:57,380 --> 00:03:02,360
that you can specify specify the

00:02:59,140 --> 00:03:04,700
topology of your robot and so figure out

00:03:02,360 --> 00:03:06,230
what is connected to what so the head

00:03:04,700 --> 00:03:07,250
bones connected to the neck bone the

00:03:06,230 --> 00:03:08,540
neck bones connected to the shoulder

00:03:07,250 --> 00:03:11,090
bone the shoulder bones connected to the

00:03:08,540 --> 00:03:13,430
left arm back and right arm and through

00:03:11,090 --> 00:03:17,450
this you can create a tree structure

00:03:13,430 --> 00:03:20,570
every node every link has exactly one

00:03:17,450 --> 00:03:23,300
parent a node can have multiple children

00:03:20,570 --> 00:03:24,800
and what this means is we get this tree

00:03:23,300 --> 00:03:29,300
structure where there is a root node

00:03:24,800 --> 00:03:32,660
that is the common ancestor of all the

00:03:29,300 --> 00:03:35,090
different links in your model and so on

00:03:32,660 --> 00:03:39,260
the left here you can see the XML

00:03:35,090 --> 00:03:41,030
representation for this model first we

00:03:39,260 --> 00:03:44,270
start off by specifying all of our links

00:03:41,030 --> 00:03:47,240
and their names and then the joints that

00:03:44,270 --> 00:03:48,830
connect them important to note here that

00:03:47,240 --> 00:03:51,470
the order for these doesn't actually

00:03:48,830 --> 00:03:52,760
matter you can put them in in any order

00:03:51,470 --> 00:03:59,090
and they'll all be linked together in

00:03:52,760 --> 00:04:03,410
the end and so if we take a look at the

00:03:59,090 --> 00:04:05,060
example I have of Lois our robot we can

00:04:03,410 --> 00:04:07,190
divide them up into five parts we have

00:04:05,060 --> 00:04:09,830
the base and the body which can rotate

00:04:07,190 --> 00:04:13,970
separately and then three pieces for the

00:04:09,830 --> 00:04:16,790
pan/tilt unit on the top and so again we

00:04:13,970 --> 00:04:20,090
have the links that I specify up here

00:04:16,790 --> 00:04:23,690
and then I have all of the joints that

00:04:20,090 --> 00:04:27,669
connect them in the order and width so

00:04:23,690 --> 00:04:27,669
the base is the most common ancestor

00:04:28,270 --> 00:04:33,500
so that specifies the topology of our

00:04:31,219 --> 00:04:35,840
robot but we would also like to be able

00:04:33,500 --> 00:04:38,210
to specify the geometry of the robot and

00:04:35,840 --> 00:04:40,250
in Ross all the geometry is represented

00:04:38,210 --> 00:04:43,039
with coordinate frames and TF and T f

00:04:40,250 --> 00:04:45,469
stands for transforms now to find out

00:04:43,039 --> 00:04:47,300
more about transforms stay tuned

00:04:45,469 --> 00:04:50,689
tomorrow at 11:00 telle will be talking

00:04:47,300 --> 00:04:53,750
about understanding TF but just as a

00:04:50,689 --> 00:04:55,759
quick overview in Ross we can specify

00:04:53,750 --> 00:04:58,039
any number of different coordinate

00:04:55,759 --> 00:05:00,139
frames and then translate any data that

00:04:58,039 --> 00:05:02,840
we have into any of those coordinate

00:05:00,139 --> 00:05:04,580
frames relative to each other and so the

00:05:02,840 --> 00:05:08,060
difference between two coordinate frames

00:05:04,580 --> 00:05:11,330
is called a transform and it consists of

00:05:08,060 --> 00:05:12,800
a parent frame and a child frame again

00:05:11,330 --> 00:05:16,069
giving us a structure much like we find

00:05:12,800 --> 00:05:17,840
in you RDF and then the difference is

00:05:16,069 --> 00:05:21,229
marked by the translation and rotation

00:05:17,840 --> 00:05:24,139
the translation is specified XYZ in

00:05:21,229 --> 00:05:25,789
meters and the rotation in TF is

00:05:24,139 --> 00:05:27,439
specified by a quaternion and

00:05:25,789 --> 00:05:29,960
fortunately for all those people who

00:05:27,439 --> 00:05:32,180
like me haven't quite been able to wrap

00:05:29,960 --> 00:05:34,729
their head around quaternions in you RDF

00:05:32,180 --> 00:05:38,120
it's specified as roll pitch and yaw in

00:05:34,729 --> 00:05:41,089
radians just a quick note on convention

00:05:38,120 --> 00:05:43,460
in all the visualisations of these

00:05:41,089 --> 00:05:45,830
reference frames the x axis is marked in

00:05:43,460 --> 00:05:49,759
red and rotations about that axis are

00:05:45,830 --> 00:05:52,310
roll y axis is green rotations about

00:05:49,759 --> 00:05:54,500
that are called pitch and then rotations

00:05:52,310 --> 00:05:56,750
about the z axis are yaw marked in blue

00:05:54,500 --> 00:06:00,259
and that's typically the order that

00:05:56,750 --> 00:06:03,409
you'll see things in XYZ RGB roll pitch

00:06:00,259 --> 00:06:06,469
yaw so if we actually want to put this

00:06:03,409 --> 00:06:09,979
into our you RDF files now we do so with

00:06:06,469 --> 00:06:12,259
the origin tag and so on the top left we

00:06:09,979 --> 00:06:14,569
have the default with no difference

00:06:12,259 --> 00:06:16,069
between reference frames and you can do

00:06:14,569 --> 00:06:19,099
it one of three different ways you can

00:06:16,069 --> 00:06:21,319
do it with no tag and then that just

00:06:19,099 --> 00:06:23,240
defaults to no difference you can

00:06:21,319 --> 00:06:25,759
specify an empty origin tag or you can

00:06:23,240 --> 00:06:29,839
specify the XYZ and roll pitch and yaw

00:06:25,759 --> 00:06:32,479
to be 0 then top right you can see the

00:06:29,839 --> 00:06:35,000
an offset just in half a meter in the X

00:06:32,479 --> 00:06:37,219
Direction then in the bottom left we've

00:06:35,000 --> 00:06:39,520
we're adding another dimension adding a

00:06:37,219 --> 00:06:41,199
offset in the Y direction

00:06:39,520 --> 00:06:44,949
and then in the bottom right I'm adding

00:06:41,199 --> 00:06:49,569
a 90-degree turn in around the z axis

00:06:44,949 --> 00:06:53,500
specified in the ah there and if we

00:06:49,569 --> 00:06:55,599
actually apply this to our robot all the

00:06:53,500 --> 00:06:58,470
links are specified at the top and then

00:06:55,599 --> 00:07:02,139
I want to specify that the body link is

00:06:58,470 --> 00:07:04,300
0.4 meters above the base link so I just

00:07:02,139 --> 00:07:07,780
do that with the origin tag that you can

00:07:04,300 --> 00:07:10,509
see there and then I want to specify

00:07:07,780 --> 00:07:14,560
that the PTU base is about a meter above

00:07:10,509 --> 00:07:17,530
that and I do that in the reference

00:07:14,560 --> 00:07:19,780
frame of the body so I do in the

00:07:17,530 --> 00:07:23,590
reference frame of the parent link and

00:07:19,780 --> 00:07:27,130
put the and that creates the reference

00:07:23,590 --> 00:07:28,930
frame for the child link and so you can

00:07:27,130 --> 00:07:33,300
see that I've added the origin tag there

00:07:28,930 --> 00:07:37,419
for the XYZ offset to the pto base and

00:07:33,300 --> 00:07:40,419
then finally there's we can do that

00:07:37,419 --> 00:07:42,849
again to specify that the middle part of

00:07:40,419 --> 00:07:44,770
the PTU is another 55 millimeters above

00:07:42,849 --> 00:07:51,580
that with the bottom origin tag that you

00:07:44,770 --> 00:07:53,259
see there and this is all the info you

00:07:51,580 --> 00:07:55,930
need to do some fairly interesting

00:07:53,259 --> 00:07:59,409
things such as get the transforms for

00:07:55,930 --> 00:08:00,820
your robot and that will give you a

00:07:59,409 --> 00:08:02,530
visualization like the one you see on

00:08:00,820 --> 00:08:05,169
the right there with the different

00:08:02,530 --> 00:08:07,690
reference frames but the logical

00:08:05,169 --> 00:08:11,139
question is how do you get from the XML

00:08:07,690 --> 00:08:14,229
to the actual transforms so the first

00:08:11,139 --> 00:08:17,289
thing that you do is you load the you

00:08:14,229 --> 00:08:18,940
RDF into the parameter server and so the

00:08:17,289 --> 00:08:20,919
parameter server it was mentioned before

00:08:18,940 --> 00:08:23,409
as one of these core services that is

00:08:20,919 --> 00:08:26,229
offered and if you put this line into

00:08:23,409 --> 00:08:29,289
your launch file what you do it will set

00:08:26,229 --> 00:08:32,979
the parameter named robot description to

00:08:29,289 --> 00:08:36,760
the contents of the text files and this

00:08:32,979 --> 00:08:39,700
is using a common macro to help find the

00:08:36,760 --> 00:08:42,700
package so all of the you RDF in this

00:08:39,700 --> 00:08:44,050
talk are in a package called Ross Hanyu

00:08:42,700 --> 00:08:47,079
RDF and there'll be a link to that

00:08:44,050 --> 00:08:49,810
repository at the end and so this will

00:08:47,079 --> 00:08:52,600
load it into the parameter server the

00:08:49,810 --> 00:08:53,380
next step is to run the robot state

00:08:52,600 --> 00:08:56,230
publisher

00:08:53,380 --> 00:08:58,510
and what this does is it takes in joint

00:08:56,230 --> 00:09:01,330
message joint state messages and for

00:08:58,510 --> 00:09:06,040
each one of those it will output a set

00:09:01,330 --> 00:09:09,010
of transforms and you can find more info

00:09:06,040 --> 00:09:12,220
on this at the wiki page it's important

00:09:09,010 --> 00:09:14,230
to note here though that the robot state

00:09:12,220 --> 00:09:15,880
publisher will not output the transforms

00:09:14,230 --> 00:09:18,430
unless you provide it with joint state

00:09:15,880 --> 00:09:20,710
messages the joint state messages can be

00:09:18,430 --> 00:09:23,740
provided by the driver that is running

00:09:20,710 --> 00:09:25,600
the actual Hardware of your robot or if

00:09:23,740 --> 00:09:28,210
you just want to visualize what your

00:09:25,600 --> 00:09:30,400
model looks like you can use the joint

00:09:28,210 --> 00:09:32,290
state publisher which is a note that I

00:09:30,400 --> 00:09:34,900
wrote a couple years ago in order to

00:09:32,290 --> 00:09:36,400
visualize these you RDF files and so

00:09:34,900 --> 00:09:40,660
what that'll do is it'll just publish

00:09:36,400 --> 00:09:42,580
the default joint state messages and so

00:09:40,660 --> 00:09:45,130
you might be asking what is actually in

00:09:42,580 --> 00:09:47,530
these joint state messages and right now

00:09:45,130 --> 00:09:49,690
it doesn't make sense because all of the

00:09:47,530 --> 00:09:52,570
joints that we've specified so far have

00:09:49,690 --> 00:09:56,470
been fixed meaning they don't move and

00:09:52,570 --> 00:09:58,990
so what the joint state publisher will

00:09:56,470 --> 00:10:00,550
actually do is just publish empty joint

00:09:58,990 --> 00:10:02,670
state messages in order to get the robot

00:10:00,550 --> 00:10:06,430
state publisher to publish transforms

00:10:02,670 --> 00:10:07,120
but most robots actually move so how do

00:10:06,430 --> 00:10:10,480
we do that

00:10:07,120 --> 00:10:14,080
we can specify and the joint types to be

00:10:10,480 --> 00:10:15,490
one of several different types so we

00:10:14,080 --> 00:10:17,470
already explored the fixed joint which

00:10:15,490 --> 00:10:20,050
you can see all the way on the left next

00:10:17,470 --> 00:10:22,710
we have continuous joints those can

00:10:20,050 --> 00:10:25,810
rotate about an axis like a wheel

00:10:22,710 --> 00:10:28,360
infinitely in either direction so first

00:10:25,810 --> 00:10:31,350
you can see the rotating about the x

00:10:28,360 --> 00:10:34,600
axis and then rotating about the y axis

00:10:31,350 --> 00:10:36,250
you can also have revolute joints which

00:10:34,600 --> 00:10:38,860
are like continuous joints in that they

00:10:36,250 --> 00:10:41,830
rotate around an axis but they have a

00:10:38,860 --> 00:10:44,500
specified upper and lower bound so they

00:10:41,830 --> 00:10:48,460
can't rotate all the way around finally

00:10:44,500 --> 00:10:51,070
you have the prismatic joints which move

00:10:48,460 --> 00:10:53,080
translate as opposed to rotate and they

00:10:51,070 --> 00:10:54,730
move along an axis that you can specify

00:10:53,080 --> 00:10:57,160
so you can see that all the way on the

00:10:54,730 --> 00:10:59,230
right there's two other types of joints

00:10:57,160 --> 00:11:01,120
I haven't actually seen them used ever

00:10:59,230 --> 00:11:02,620
but just so you know that that are in

00:11:01,120 --> 00:11:05,230
the specification you have a planar

00:11:02,620 --> 00:11:06,480
joint which is like a mouse can move

00:11:05,230 --> 00:11:08,490
within a plane

00:11:06,480 --> 00:11:11,760
and then you also have a floating joint

00:11:08,490 --> 00:11:14,510
which does not specify or allows you to

00:11:11,760 --> 00:11:16,949
have all six degrees of freedom free and

00:11:14,510 --> 00:11:20,100
so if we were to actually put that into

00:11:16,949 --> 00:11:22,800
our model again the relationship between

00:11:20,100 --> 00:11:26,070
the base and the body that can rotate

00:11:22,800 --> 00:11:29,130
fully around forever so we specify as a

00:11:26,070 --> 00:11:32,660
continuous joint and we specify the axis

00:11:29,130 --> 00:11:35,579
to be the z axis with that vector there

00:11:32,660 --> 00:11:37,320
the connection between the body and the

00:11:35,579 --> 00:11:39,959
base is fixed they don't move relative

00:11:37,320 --> 00:11:43,829
to each other so we leave that one as is

00:11:39,959 --> 00:11:48,540
then we have the the pan part of the pan

00:11:43,829 --> 00:11:50,370
tilt unit that has a it can go high

00:11:48,540 --> 00:11:52,560
radians backwards and PI radians the

00:11:50,370 --> 00:11:54,029
other way it cannot go all the way

00:11:52,560 --> 00:11:59,100
around so we specify that to be a

00:11:54,029 --> 00:12:02,600
revolute joint and with its bounds there

00:11:59,100 --> 00:12:05,519
and it also goes around the z axis and

00:12:02,600 --> 00:12:07,079
then finally the pan joint at the very

00:12:05,519 --> 00:12:10,320
air that sorry the tilt joint at the

00:12:07,079 --> 00:12:14,850
very top hat can go 0.5 4 radians up and

00:12:10,320 --> 00:12:17,130
0.8 2 radians down and in order to get

00:12:14,850 --> 00:12:20,250
it so that the positive direction is up

00:12:17,130 --> 00:12:22,350
and the negative direction is down we

00:12:20,250 --> 00:12:27,000
set the access to the vector 0 negative

00:12:22,350 --> 00:12:32,639
1 0 and so this allows us to specify all

00:12:27,000 --> 00:12:34,769
the geometry of this model now what we

00:12:32,639 --> 00:12:37,230
can do is we can actually specify in the

00:12:34,769 --> 00:12:41,639
joint state message the angles of these

00:12:37,230 --> 00:12:43,589
actual of these joints and you can again

00:12:41,639 --> 00:12:45,690
do it either with your driver or if

00:12:43,589 --> 00:12:47,339
you're just wanting to test things out

00:12:45,690 --> 00:12:49,860
again you can use the joint state

00:12:47,339 --> 00:12:52,050
publisher again with the use GUI

00:12:49,860 --> 00:12:53,699
parameter set to true it'll pop up a

00:12:52,050 --> 00:12:56,579
window and then you can set the joint

00:12:53,699 --> 00:13:00,029
angles by hand and then this will

00:12:56,579 --> 00:13:01,829
publish to TF another just another

00:13:00,029 --> 00:13:04,410
functionality of joints a publisher you

00:13:01,829 --> 00:13:07,350
can also use it to combine joint state

00:13:04,410 --> 00:13:09,839
messages using the source list parameter

00:13:07,350 --> 00:13:12,829
so on our robot the pan/tilt unit is

00:13:09,839 --> 00:13:17,089
controlled by a separate node than the

00:13:12,829 --> 00:13:19,410
the base and so we published those two

00:13:17,089 --> 00:13:20,520
joint States separately and then they're

00:13:19,410 --> 00:13:22,650
combined in the joints

00:13:20,520 --> 00:13:25,020
publisher to publish one joint state

00:13:22,650 --> 00:13:26,190
message which is how the robot state

00:13:25,020 --> 00:13:32,070
publisher actually wants that

00:13:26,190 --> 00:13:33,690
information and so you might be asking

00:13:32,070 --> 00:13:36,210
how does the robot state publisher

00:13:33,690 --> 00:13:38,220
actually do this what it does is it

00:13:36,210 --> 00:13:39,840
takes in the joint States and calculates

00:13:38,220 --> 00:13:41,550
the forward kinematics using the

00:13:39,840 --> 00:13:45,840
kinematics and dynamics library for more

00:13:41,550 --> 00:13:48,660
crows and then publishes the relative

00:13:45,840 --> 00:13:50,220
transforms also using this library you

00:13:48,660 --> 00:13:52,560
can use a service call to get the

00:13:50,220 --> 00:13:54,600
inverse kinematics so given a transform

00:13:52,560 --> 00:13:57,210
what are the joint angles that will get

00:13:54,600 --> 00:13:59,640
you to that transform and so you can go

00:13:57,210 --> 00:14:01,860
both ways on this you can the easiest

00:13:59,640 --> 00:14:03,870
way to set this up using electric or

00:14:01,860 --> 00:14:07,500
more modern versions is to use the arm

00:14:03,870 --> 00:14:09,510
navigation wizard which will set up the

00:14:07,500 --> 00:14:14,610
kinematic chains and all of the code

00:14:09,510 --> 00:14:16,200
that you need to do that and so I'll

00:14:14,610 --> 00:14:18,930
pause here for a second see if there are

00:14:16,200 --> 00:14:24,870
any questions or show it just bore John

00:14:18,930 --> 00:14:27,450
word alright so this allows us to

00:14:24,870 --> 00:14:29,460
specify a full kinematic model of our

00:14:27,450 --> 00:14:31,890
robots but there are other things that

00:14:29,460 --> 00:14:34,050
we would like to do with the you RDF

00:14:31,890 --> 00:14:37,680
specifically model what it looks like

00:14:34,050 --> 00:14:39,270
and so this allows us to expand the link

00:14:37,680 --> 00:14:41,910
tag that we were previously just

00:14:39,270 --> 00:14:45,150
specifying with a name and so we can

00:14:41,910 --> 00:14:48,450
specify the visual tag and two tags that

00:14:45,150 --> 00:14:50,720
go in there our geometry and material so

00:14:48,450 --> 00:14:53,490
with things like geometry we can specify

00:14:50,720 --> 00:14:56,100
primitive 3d shapes like a sphere with a

00:14:53,490 --> 00:14:58,860
radius of 0.5 as you can see here and

00:14:56,100 --> 00:15:02,940
then we can also specify materials what

00:14:58,860 --> 00:15:05,370
we want the shape to be look like here

00:15:02,940 --> 00:15:09,480
we're specifying a color named red that

00:15:05,370 --> 00:15:11,670
it uses the RGB a values 1 0 0 similarly

00:15:09,480 --> 00:15:13,800
we can also make a cylinder like you see

00:15:11,670 --> 00:15:17,730
on the bottom and then since we already

00:15:13,800 --> 00:15:19,860
defined the red material up above we can

00:15:17,730 --> 00:15:22,170
just refer to it by its name as you see

00:15:19,860 --> 00:15:24,450
on the bottom there there's one other

00:15:22,170 --> 00:15:27,410
primitive shape that you can use and

00:15:24,450 --> 00:15:31,230
it's a box specified with a

00:15:27,410 --> 00:15:33,550
XYZ size and then you can also specify

00:15:31,230 --> 00:15:36,580
the material to be a certain texture

00:15:33,550 --> 00:15:40,180
specified here with the package protocol

00:15:36,580 --> 00:15:41,709
and using the logo for Ross Conn as the

00:15:40,180 --> 00:15:43,930
texture and so you can see it paste it

00:15:41,709 --> 00:15:46,450
on there

00:15:43,930 --> 00:15:51,100
however most robots aren't composed of

00:15:46,450 --> 00:15:54,519
just cylinders boxes and spheres so we

00:15:51,100 --> 00:15:55,870
also allow you to specify a mesh which

00:15:54,519 --> 00:15:59,140
you can create in any number of

00:15:55,870 --> 00:16:02,890
different programs sketchup blender or

00:15:59,140 --> 00:16:05,950
whatever your choice is here we're I'm

00:16:02,890 --> 00:16:08,170
using the shoulder pan link from the pr2

00:16:05,950 --> 00:16:10,240
and you can see it visualized there on

00:16:08,170 --> 00:16:12,250
the right you might also notice that I

00:16:10,240 --> 00:16:14,170
don't specify material for this one and

00:16:12,250 --> 00:16:16,450
that's because this is actually in the

00:16:14,170 --> 00:16:20,170
colada format which which is an XML

00:16:16,450 --> 00:16:21,850
format all its own that contains a lot

00:16:20,170 --> 00:16:24,459
of different information about how it is

00:16:21,850 --> 00:16:27,010
to be drawn on and rendered and so you

00:16:24,459 --> 00:16:29,079
can see this is what the actual there's

00:16:27,010 --> 00:16:31,390
image data associated with it this is

00:16:29,079 --> 00:16:35,649
what the coloring and normals look like

00:16:31,390 --> 00:16:37,899
for that so there's one other important

00:16:35,649 --> 00:16:40,660
tag in the visual tag and that is the

00:16:37,899 --> 00:16:44,079
origin so we already specified the

00:16:40,660 --> 00:16:46,930
origin in the joint tag why do we need

00:16:44,079 --> 00:16:49,810
to specify another origin for the link

00:16:46,930 --> 00:16:52,839
tag so the best way to see that is by

00:16:49,810 --> 00:16:54,880
looking at an example like this where we

00:16:52,839 --> 00:16:57,880
have a sphere as the parent link and

00:16:54,880 --> 00:17:01,089
then a blue box which I'm calling leg as

00:16:57,880 --> 00:17:03,520
the child link and we want that box to

00:17:01,089 --> 00:17:07,809
rotate around the sphere where the two

00:17:03,520 --> 00:17:09,010
are touching and so there's a number of

00:17:07,809 --> 00:17:10,900
different ways you can do this you can

00:17:09,010 --> 00:17:12,669
do it just by specifying the joint

00:17:10,900 --> 00:17:15,250
origin as we were doing before

00:17:12,669 --> 00:17:17,679
and that the way you would do that is

00:17:15,250 --> 00:17:20,050
put in a y and z offset of half a meter

00:17:17,679 --> 00:17:21,459
each and it'll be drawn up there and if

00:17:20,050 --> 00:17:24,910
it doesn't move it'll actually look

00:17:21,459 --> 00:17:27,610
correct however if you actually start to

00:17:24,910 --> 00:17:32,380
rotate it the child link is going to

00:17:27,610 --> 00:17:34,660
rotate around the y axis of its origin

00:17:32,380 --> 00:17:36,820
frame and so when we rotate it it

00:17:34,660 --> 00:17:39,309
actually looks like this and that's not

00:17:36,820 --> 00:17:41,530
what we want so in order to get to

00:17:39,309 --> 00:17:44,440
rotate properly we want to put the joint

00:17:41,530 --> 00:17:47,350
origin down where it's going to rotate

00:17:44,440 --> 00:17:48,970
about and so you can see

00:17:47,350 --> 00:17:51,580
we've specified that with just the y

00:17:48,970 --> 00:17:54,220
offset and then we create another

00:17:51,580 --> 00:17:56,500
reference frame half a meter up from

00:17:54,220 --> 00:17:57,520
that for the link origin frame and

00:17:56,500 --> 00:18:00,370
that's where it's going to draw the

00:17:57,520 --> 00:18:03,280
origin of the box which is the center

00:18:00,370 --> 00:18:04,960
and so now when we rotate this it'll

00:18:03,280 --> 00:18:08,110
actually rotate as we expect it to

00:18:04,960 --> 00:18:10,840
around that axis

00:18:08,110 --> 00:18:15,340
you could also theoretically specify it

00:18:10,840 --> 00:18:18,730
with just the visual origin using the

00:18:15,340 --> 00:18:21,130
same half to half meters and this will

00:18:18,730 --> 00:18:22,870
put both of the origins for the links at

00:18:21,130 --> 00:18:24,850
the center of the sphere and this is not

00:18:22,870 --> 00:18:27,580
what you want because this will create

00:18:24,850 --> 00:18:29,380
problems for any reference frames you

00:18:27,580 --> 00:18:31,240
create down the line and while this

00:18:29,380 --> 00:18:33,400
model will actually rotate around the

00:18:31,240 --> 00:18:34,900
correct axis if you were trying to

00:18:33,400 --> 00:18:37,630
rotate around any other axis it wouldn't

00:18:34,900 --> 00:18:40,900
work so in general you should specify

00:18:37,630 --> 00:18:42,520
both a joint origin and a link origin to

00:18:40,900 --> 00:18:46,780
get things drawn correctly and moving

00:18:42,520 --> 00:18:49,570
correctly so if we take a look at the

00:18:46,780 --> 00:18:52,150
example we have for Luis we've created a

00:18:49,570 --> 00:18:55,120
lot more links I've created this with

00:18:52,150 --> 00:18:57,850
just these simple shapes that I talked

00:18:55,120 --> 00:19:01,300
about before and we have the different

00:18:57,850 --> 00:19:04,360
colors and using robot state publisher

00:19:01,300 --> 00:19:07,630
we publish a number or all a transform

00:19:04,360 --> 00:19:10,330
for each one of the links an important

00:19:07,630 --> 00:19:13,300
debugging note if you don't specify a

00:19:10,330 --> 00:19:15,010
transform for every link the visual

00:19:13,300 --> 00:19:17,860
elements in our viz will appear at the

00:19:15,010 --> 00:19:20,590
origin of all your reference frames and

00:19:17,860 --> 00:19:22,090
therefore not be a not happy structure

00:19:20,590 --> 00:19:24,310
that you want even if it's just fixed

00:19:22,090 --> 00:19:30,970
links so you need to specify TF frames

00:19:24,310 --> 00:19:32,950
for each one of those yeah and so this

00:19:30,970 --> 00:19:36,070
is the visualization that we have for

00:19:32,950 --> 00:19:39,810
Louis some other things that you might

00:19:36,070 --> 00:19:42,730
want to put into your you RDF files are

00:19:39,810 --> 00:19:46,330
information about collision detection so

00:19:42,730 --> 00:19:49,540
on the top we have the base the visual

00:19:46,330 --> 00:19:52,480
element for this link specified as the

00:19:49,540 --> 00:19:54,400
mesh for the base of the pr2 and this is

00:19:52,480 --> 00:19:57,280
a very detailed mesh has a lot of

00:19:54,400 --> 00:19:59,020
different facets and coloring and if you

00:19:57,280 --> 00:20:00,999
want to do collision detection with this

00:19:59,020 --> 00:20:02,559
it would actually take a bit of time

00:20:00,999 --> 00:20:04,779
just because of all the different parts

00:20:02,559 --> 00:20:08,049
and so what you are DF allows you to do

00:20:04,779 --> 00:20:10,419
is specify another element another

00:20:08,049 --> 00:20:12,879
geometry for the collision detection and

00:20:10,419 --> 00:20:16,659
so on the bottom right you can see there

00:20:12,879 --> 00:20:19,689
the a simpler mesh that is used for

00:20:16,659 --> 00:20:21,459
collision detection and has many fewer

00:20:19,689 --> 00:20:25,299
facets and therefore is a lot easier to

00:20:21,459 --> 00:20:28,019
compute collision detection for again

00:20:25,299 --> 00:20:30,579
more information on this wiki page also

00:20:28,019 --> 00:20:33,339
you known and sashan will be talking

00:20:30,579 --> 00:20:36,909
about this next a little bit in the

00:20:33,339 --> 00:20:38,559
emotion planning session there are also

00:20:36,909 --> 00:20:39,999
a lot of physical properties to your

00:20:38,559 --> 00:20:42,579
robot that you would want to describe

00:20:39,999 --> 00:20:44,529
both for the links and the joints for

00:20:42,579 --> 00:20:45,909
the links you would want to specify some

00:20:44,529 --> 00:20:47,949
information about its inertial

00:20:45,909 --> 00:20:51,129
properties which we do with the inertial

00:20:47,949 --> 00:20:54,129
tag you can specify a mass you can

00:20:51,129 --> 00:20:56,649
specify another origin tag which refers

00:20:54,129 --> 00:21:00,639
to the center of gravity of your link

00:20:56,649 --> 00:21:02,439
and then the inertia the moment of

00:21:00,639 --> 00:21:04,719
inertia is specified by the matrix shown

00:21:02,439 --> 00:21:07,689
here and since this matrix is

00:21:04,719 --> 00:21:11,109
symmetrical you only have to specify six

00:21:07,689 --> 00:21:12,459
of the numbers as I do here and then for

00:21:11,109 --> 00:21:14,049
the joints there are also a number of

00:21:12,459 --> 00:21:15,729
physical properties that you would want

00:21:14,049 --> 00:21:20,559
a model we've already talked about the

00:21:15,729 --> 00:21:22,389
hard lower and upper limits for the four

00:21:20,559 --> 00:21:24,819
revolute joints but we can also specify

00:21:22,389 --> 00:21:27,249
soft limits which we want the

00:21:24,819 --> 00:21:29,019
controllers to operate in and not

00:21:27,249 --> 00:21:31,989
actually go to the hard limits and we do

00:21:29,019 --> 00:21:33,819
that with the safety controller tag we

00:21:31,989 --> 00:21:37,539
can also specify some information about

00:21:33,819 --> 00:21:39,159
the dynamics of the joint and the you

00:21:37,539 --> 00:21:44,709
can also put in the calibration

00:21:39,159 --> 00:21:47,289
information here another note there are

00:21:44,709 --> 00:21:49,149
some required attributes for some of

00:21:47,289 --> 00:21:51,459
these tags which you may not actually

00:21:49,149 --> 00:21:53,439
need for instance if you're just

00:21:51,459 --> 00:21:55,119
specifying the kinematics of a revolute

00:21:53,439 --> 00:21:56,709
joint you would think that you'd only

00:21:55,119 --> 00:21:58,509
have to specify the upper and lower

00:21:56,709 --> 00:22:01,329
bounds but you actually have to specify

00:21:58,509 --> 00:22:03,969
the effort and velocity the units are on

00:22:01,329 --> 00:22:07,539
the wiki page for most of my models I

00:22:03,969 --> 00:22:09,069
just put in default values and then

00:22:07,539 --> 00:22:12,129
there's a number of other tanks that are

00:22:09,069 --> 00:22:14,210
used by gazebo and these are general or

00:22:12,129 --> 00:22:17,659
at least documented as PR

00:22:14,210 --> 00:22:19,639
specific or and supported for using

00:22:17,659 --> 00:22:21,169
specifically in gazebo and so you have

00:22:19,639 --> 00:22:22,940
things like the transmission which

00:22:21,169 --> 00:22:26,330
describes the motor that's actually used

00:22:22,940 --> 00:22:29,749
to actuate the joints with links to the

00:22:26,330 --> 00:22:31,759
actual package that you is used to run

00:22:29,749 --> 00:22:34,190
that and other information about that

00:22:31,759 --> 00:22:37,220
actuation and then there are other

00:22:34,190 --> 00:22:39,919
gazebo specific properties that will be

00:22:37,220 --> 00:22:41,659
used an example of which I show here so

00:22:39,919 --> 00:22:43,820
whether you not you want gravity to

00:22:41,659 --> 00:22:45,440
affect this link and what the

00:22:43,820 --> 00:22:46,269
coefficients of friction are and things

00:22:45,440 --> 00:22:48,919
like that

00:22:46,269 --> 00:22:50,990
again another plug for it talk there'll

00:22:48,919 --> 00:22:52,879
be a lot more information about gazebo

00:22:50,990 --> 00:22:56,179
and the properties of the models that

00:22:52,879 --> 00:23:00,889
you use in there later today 245 by John

00:22:56,179 --> 00:23:03,830
Hsu and Nick Koenig and so that wraps up

00:23:00,889 --> 00:23:05,779
the types of things that you can see in

00:23:03,830 --> 00:23:09,049
a you RDF file and that you might want

00:23:05,779 --> 00:23:10,309
to create yourself it's not its most the

00:23:09,049 --> 00:23:12,080
things there's still a couple other

00:23:10,309 --> 00:23:15,110
elements that you might see in there and

00:23:12,080 --> 00:23:17,450
we'll talk about those in a few minutes

00:23:15,110 --> 00:23:19,309
but first I want to talk about some of

00:23:17,450 --> 00:23:22,429
the tools that you can use with you rdf

00:23:19,309 --> 00:23:25,970
so there's two different api's there's

00:23:22,429 --> 00:23:28,610
the main api which is in c++ it was

00:23:25,970 --> 00:23:31,340
recently split into you RDF parser and

00:23:28,610 --> 00:23:34,159
you are to give interface there's and

00:23:31,340 --> 00:23:36,679
robot state publisher is you written

00:23:34,159 --> 00:23:39,200
using that and then in the you RDF

00:23:36,679 --> 00:23:42,289
parser package there are two helpful

00:23:39,200 --> 00:23:44,029
scripts check you RDF does a parse of

00:23:42,289 --> 00:23:46,249
your you RDF file to make sure there are

00:23:44,029 --> 00:23:48,830
no problems without loading it into the

00:23:46,249 --> 00:23:51,440
parameter server and then you RDF to

00:23:48,830 --> 00:23:53,269
graphviz creates a visualization of the

00:23:51,440 --> 00:23:55,129
tree structure that you create in your

00:23:53,269 --> 00:23:56,269
you RDF file as you can see part of the

00:23:55,129 --> 00:23:59,179
tree for the pr2

00:23:56,269 --> 00:24:02,450
on the right here and then there's also

00:23:59,179 --> 00:24:04,970
a Python API being developed partially

00:24:02,450 --> 00:24:09,320
by myself and also by Kelsey Hawkins and

00:24:04,970 --> 00:24:11,149
Thomas Maillard are you guys here okay

00:24:09,320 --> 00:24:13,580
well they're helping to my version is

00:24:11,149 --> 00:24:15,919
called you RDF Python and it's used to

00:24:13,580 --> 00:24:18,710
implement joint state publisher and some

00:24:15,919 --> 00:24:21,139
other tools there are a number of

00:24:18,710 --> 00:24:22,970
different conversion tools out there as

00:24:21,139 --> 00:24:25,220
I mentioned before there's Claddagh and

00:24:22,970 --> 00:24:27,570
there's a package for converting between

00:24:25,220 --> 00:24:30,049
colada and new rdf out there

00:24:27,570 --> 00:24:32,309
there's also ivy con which is used for

00:24:30,049 --> 00:24:33,989
translating different kinds of meshes so

00:24:32,309 --> 00:24:36,090
the meshes don't have to be Claddagh

00:24:33,989 --> 00:24:38,909
they can also be a number of other types

00:24:36,090 --> 00:24:40,379
STL is pretty common and then there's

00:24:38,909 --> 00:24:42,509
also a program that I wrote as an

00:24:40,379 --> 00:24:44,970
internship a couple years ago called sim

00:24:42,509 --> 00:24:47,159
mechanics EU RDF and that uses the same

00:24:44,970 --> 00:24:50,549
mechanics plug into different CAD

00:24:47,159 --> 00:24:52,080
programs like pro engineer to take the

00:24:50,549 --> 00:24:55,590
geometry of a model that you've built in

00:24:52,080 --> 00:24:57,989
there and export it to a u RDF file with

00:24:55,590 --> 00:25:00,299
a little bit of work and then so on the

00:24:57,989 --> 00:25:02,879
bottom right there is a model made using

00:25:00,299 --> 00:25:07,259
this tool by one of the members of the

00:25:02,879 --> 00:25:09,210
user group but the biggest tool that is

00:25:07,259 --> 00:25:12,720
out there for helping you improve your

00:25:09,210 --> 00:25:14,070
you RDF files is Zack Rowe and so just a

00:25:12,720 --> 00:25:15,899
couple statistics if you were to

00:25:14,070 --> 00:25:18,119
actually write out the full you RDF for

00:25:15,899 --> 00:25:21,029
a number of different models it can get

00:25:18,119 --> 00:25:25,349
quite big the erratic the create now and

00:25:21,029 --> 00:25:28,619
the b21 Louis all have around about five

00:25:25,349 --> 00:25:31,109
hundred lines in them but then it starts

00:25:28,619 --> 00:25:31,950
to get a bit bigger the Kara bot rosy

00:25:31,109 --> 00:25:33,720
and the pr2

00:25:31,950 --> 00:25:35,190
are a little bit bigger with the pr2

00:25:33,720 --> 00:25:36,179
having over three thousand lines of code

00:25:35,190 --> 00:25:39,200
if you actually write the whole thing

00:25:36,179 --> 00:25:42,419
out this means two things first of all

00:25:39,200 --> 00:25:45,149
these files get very hard to edit a lot

00:25:42,419 --> 00:25:47,039
of the geometry is interdependent and if

00:25:45,149 --> 00:25:48,330
you want to change one dimension of your

00:25:47,039 --> 00:25:49,590
robot you'll actually have to change

00:25:48,330 --> 00:25:50,419
that number in a number of different

00:25:49,590 --> 00:25:52,409
places

00:25:50,419 --> 00:25:55,950
second there's also a lot of redundancy

00:25:52,409 --> 00:25:58,619
the pr2 s arms are almost exactly the

00:25:55,950 --> 00:25:59,700
same with some minor changes and so if

00:25:58,619 --> 00:26:02,239
you were to write out the entire thing

00:25:59,700 --> 00:26:05,609
you would have to input it in twice and

00:26:02,239 --> 00:26:07,220
so Zack Row is a macro tool that allows

00:26:05,609 --> 00:26:11,399
you to get around a lot of those

00:26:07,220 --> 00:26:14,820
problems it's used very similar to you

00:26:11,399 --> 00:26:17,099
RDF so the top is the launch file line

00:26:14,820 --> 00:26:19,710
that you would use to load a you RDF

00:26:17,099 --> 00:26:21,629
file into the parameter server and the

00:26:19,710 --> 00:26:24,269
bottom is how you do it to load a Zack

00:26:21,629 --> 00:26:25,950
row you RDF into the parameter server so

00:26:24,269 --> 00:26:28,470
instead of loading the contents of a

00:26:25,950 --> 00:26:31,580
text file you run that command using

00:26:28,470 --> 00:26:34,669
these acro script and then use it your

00:26:31,580 --> 00:26:38,070
zacchara file and that will include in

00:26:34,669 --> 00:26:40,780
all of the different it'll run these

00:26:38,070 --> 00:26:42,610
acro scripts on that file and then

00:26:40,780 --> 00:26:45,820
put the output of that into the

00:26:42,610 --> 00:26:48,190
parameter server and so zacchara has a

00:26:45,820 --> 00:26:50,920
number of useful tools you can include

00:26:48,190 --> 00:26:54,490
entire other files you can also define

00:26:50,920 --> 00:26:57,040
properties so here I have a cylinder

00:26:54,490 --> 00:27:01,420
that I've given the properties width and

00:26:57,040 --> 00:27:03,040
length and I specify the parameters that

00:27:01,420 --> 00:27:06,250
I want at the top with these accro

00:27:03,040 --> 00:27:09,340
property tag and then when I actually

00:27:06,250 --> 00:27:11,950
define the cylinder I can for the visual

00:27:09,340 --> 00:27:14,290
element I use the width divided by two

00:27:11,950 --> 00:27:17,350
for the radius so you can do simple math

00:27:14,290 --> 00:27:19,930
on these and then the length is the body

00:27:17,350 --> 00:27:23,880
length and then I can use those same

00:27:19,930 --> 00:27:25,960
values for the collision geometry and

00:27:23,880 --> 00:27:28,060
then one of the other great things you

00:27:25,960 --> 00:27:32,200
can do is use those same numbers for

00:27:28,060 --> 00:27:34,420
specifying your joints so when I want to

00:27:32,200 --> 00:27:37,650
specify where the box should be attached

00:27:34,420 --> 00:27:41,790
I specify it to be at to have the origin

00:27:37,650 --> 00:27:45,430
but body length divided by two up and

00:27:41,790 --> 00:27:46,960
what that does is it allows me to if I

00:27:45,430 --> 00:27:49,000
want to just change the length I can

00:27:46,960 --> 00:27:50,920
change that parameter and the entire

00:27:49,000 --> 00:27:54,280
model will still reflect that change

00:27:50,920 --> 00:27:56,230
that I've made the most powerful part of

00:27:54,280 --> 00:28:01,000
Sacro is the ability to write full

00:27:56,230 --> 00:28:03,490
macros so here I have a macro for the

00:28:01,000 --> 00:28:06,700
part that I'm calling leg and it takes

00:28:03,490 --> 00:28:08,260
two parameters prefix and reflect and so

00:28:06,700 --> 00:28:12,400
if you look down at the bottom I use

00:28:08,260 --> 00:28:16,930
that macro twice using the new commands

00:28:12,400 --> 00:28:19,240
acro leg and I used the prefix right and

00:28:16,930 --> 00:28:21,910
left and the reflect parameter one and

00:28:19,240 --> 00:28:24,340
minus one and so then it's just a simple

00:28:21,910 --> 00:28:26,950
substitution for the link name so it

00:28:24,340 --> 00:28:29,920
becomes either a right leg or left leg

00:28:26,950 --> 00:28:32,350
and then the origin tag I can specify

00:28:29,920 --> 00:28:34,900
using that reflect parameter and simple

00:28:32,350 --> 00:28:36,550
math to either be on the right side or

00:28:34,900 --> 00:28:39,480
the left side depending on what the

00:28:36,550 --> 00:28:42,010
reflect parameter is and so using these

00:28:39,480 --> 00:28:44,890
features of Zack row you can create a

00:28:42,010 --> 00:28:50,620
lot of smaller and more easily

00:28:44,890 --> 00:28:52,740
maintainable you RDF files so now I want

00:28:50,620 --> 00:28:53,880
to get into a couple of the different

00:28:52,740 --> 00:28:57,030
limitation

00:28:53,880 --> 00:28:59,520
that there are for you RDF so this is a

00:28:57,030 --> 00:29:02,340
common structure that you'll see called

00:28:59,520 --> 00:29:05,700
a four bar linkage they can happen a

00:29:02,340 --> 00:29:09,150
number of different parameters here and

00:29:05,700 --> 00:29:11,160
so what you see is there's the red bar

00:29:09,150 --> 00:29:12,840
connected to the blue and the green bar

00:29:11,160 --> 00:29:14,940
and both the blue and green bar are

00:29:12,840 --> 00:29:17,280
connected to the yellow bar and this

00:29:14,940 --> 00:29:22,560
creates a graph structure with a loop in

00:29:17,280 --> 00:29:25,710
it and we in reality if you just actuate

00:29:22,560 --> 00:29:27,180
one of these angles say the blue and red

00:29:25,710 --> 00:29:30,330
angle all of the rest will move

00:29:27,180 --> 00:29:33,630
accordingly however there is no easy way

00:29:30,330 --> 00:29:36,540
to represent this in you RDF because as

00:29:33,630 --> 00:29:40,440
I mentioned at the top each link has

00:29:36,540 --> 00:29:43,050
exactly one parent so the yellow link

00:29:40,440 --> 00:29:46,080
can't have parents in both the blue and

00:29:43,050 --> 00:29:49,560
the green links and therefore if we just

00:29:46,080 --> 00:29:52,290
actuate one of the joints you get

00:29:49,560 --> 00:29:54,420
something like this where all the other

00:29:52,290 --> 00:29:56,880
links don't move in accordance with the

00:29:54,420 --> 00:30:00,360
one like there are ways to get around

00:29:56,880 --> 00:30:05,480
this one way of doing it is by actuating

00:30:00,360 --> 00:30:07,980
all of the virtual motors individually

00:30:05,480 --> 00:30:09,870
using the values from the other ones you

00:30:07,980 --> 00:30:12,660
can do this also using joint state

00:30:09,870 --> 00:30:14,760
publisher using the mimic tag however

00:30:12,660 --> 00:30:16,830
the mimic tag which has been referenced

00:30:14,760 --> 00:30:18,780
in a lot of places I think is actually

00:30:16,830 --> 00:30:22,800
only officially supported by the joint

00:30:18,780 --> 00:30:24,870
state publisher node so you have to use

00:30:22,800 --> 00:30:30,480
a bit of hackery if you have this kind

00:30:24,870 --> 00:30:32,340
of structure in your robot other things

00:30:30,480 --> 00:30:34,650
that are difficult to model as I

00:30:32,340 --> 00:30:38,430
mentioned the 4-bar linkage functional

00:30:34,650 --> 00:30:40,860
gears also have a bit of the graph

00:30:38,430 --> 00:30:42,840
problem where both of the gears are

00:30:40,860 --> 00:30:44,010
attached to some solid object but

00:30:42,840 --> 00:30:46,740
they're also touching each other and

00:30:44,010 --> 00:30:49,500
interacting with each other you have to

00:30:46,740 --> 00:30:52,110
do again hacking to get those to appear

00:30:49,500 --> 00:30:54,390
to be working correctly there's also

00:30:52,110 --> 00:30:56,520
things like pulleys again the same sort

00:30:54,390 --> 00:30:59,070
of dependency issues but with the added

00:30:56,520 --> 00:31:00,990
problem of the fact that a rope is a

00:30:59,070 --> 00:31:03,150
flexible material and there's no good

00:31:00,990 --> 00:31:05,670
way to model flexible materials except

00:31:03,150 --> 00:31:07,500
as a bunch of smaller inflexible links

00:31:05,670 --> 00:31:10,370
and so that makes the

00:31:07,500 --> 00:31:13,080
difficult it also makes modeling

00:31:10,370 --> 00:31:16,650
flexible things such as huggable robots

00:31:13,080 --> 00:31:18,870
or people or whatever a lot more

00:31:16,650 --> 00:31:20,460
difficult there are also certain types

00:31:18,870 --> 00:31:24,120
of joints that you have to do a little

00:31:20,460 --> 00:31:26,700
bit of extra work to represent shoulders

00:31:24,120 --> 00:31:29,700
have three degrees of angular freedom

00:31:26,700 --> 00:31:32,210
and if you want to represent that the

00:31:29,700 --> 00:31:35,610
most common way to do that is by using

00:31:32,210 --> 00:31:37,530
three single degree of freedom joints

00:31:35,610 --> 00:31:41,040
and little placeholder links in between

00:31:37,530 --> 00:31:43,740
them which is which works and is used in

00:31:41,040 --> 00:31:46,230
a lot of places but isn't exactly an

00:31:43,740 --> 00:31:52,640
elegant solution to that and then also

00:31:46,230 --> 00:31:55,980
just one other note that uncomplimentary

00:31:52,640 --> 00:31:59,430
I was making the CAD models I tried to

00:31:55,980 --> 00:32:02,160
make a you RDF with a couple thousand

00:31:59,430 --> 00:32:03,840
different links and the will arise

00:32:02,160 --> 00:32:06,810
Willow Garage guys just laughed at me

00:32:03,840 --> 00:32:09,150
for trying to push that many transforms

00:32:06,810 --> 00:32:11,100
through TF so you have to do a certain

00:32:09,150 --> 00:32:15,390
bit of optimization there to get it to

00:32:11,100 --> 00:32:18,540
actually work and then one of the other

00:32:15,390 --> 00:32:22,560
big limitations of you RDF is where this

00:32:18,540 --> 00:32:25,440
information actually is so the core of

00:32:22,560 --> 00:32:27,570
you RDF has information that we talked

00:32:25,440 --> 00:32:29,910
about the topography the geometry the

00:32:27,570 --> 00:32:31,920
visual information and the joint types

00:32:29,910 --> 00:32:34,650
and that information primarily just

00:32:31,920 --> 00:32:36,240
resides in the you RDF however there's a

00:32:34,650 --> 00:32:39,840
number of other places where this

00:32:36,240 --> 00:32:42,780
information can be there's the pr2 only

00:32:39,840 --> 00:32:45,270
specific tags which still haven't gained

00:32:42,780 --> 00:32:48,330
official release status and are only

00:32:45,270 --> 00:32:51,270
used on the pr2 and so that's all the

00:32:48,330 --> 00:32:53,490
things that go into gazebo different

00:32:51,270 --> 00:32:56,180
sensor information the actuation the

00:32:53,490 --> 00:32:59,730
code that you use to run these joints

00:32:56,180 --> 00:33:02,040
those exist only in the pr2 specific

00:32:59,730 --> 00:33:04,050
tags then there's information like the

00:33:02,040 --> 00:33:06,630
physical properties the inertial and

00:33:04,050 --> 00:33:08,610
friction coefficients those are

00:33:06,630 --> 00:33:10,800
specified in both the you RDF and some

00:33:08,610 --> 00:33:13,310
of the specific gazebo tags and then

00:33:10,800 --> 00:33:16,260
information about the color of links is

00:33:13,310 --> 00:33:18,990
specified both in you RDF and the gazebo

00:33:16,260 --> 00:33:21,000
tags as well and then you can also have

00:33:18,990 --> 00:33:21,480
information that depending on what

00:33:21,000 --> 00:33:24,530
version

00:33:21,480 --> 00:33:28,320
using is either located in individual

00:33:24,530 --> 00:33:31,530
llamó configuration files or in electric

00:33:28,320 --> 00:33:34,140
and more recent releases in SRD f which

00:33:31,530 --> 00:33:36,809
is the semantic robot description format

00:33:34,140 --> 00:33:39,960
and so that has information about the

00:33:36,809 --> 00:33:42,450
hierarchy the different part defining

00:33:39,960 --> 00:33:45,000
different parts this is an arm this is

00:33:42,450 --> 00:33:47,190
ace end effector type things information

00:33:45,000 --> 00:33:49,350
about kinematic chains and other

00:33:47,190 --> 00:33:51,059
semantic information and then there's

00:33:49,350 --> 00:33:54,750
also a bit of collision information

00:33:51,059 --> 00:33:58,080
that's either specified in gamal or rdf

00:33:54,750 --> 00:33:59,990
and so that's what elements should you

00:33:58,080 --> 00:34:04,169
check to see whether or not they collide

00:33:59,990 --> 00:34:05,880
that information is in the SRD effort

00:34:04,169 --> 00:34:07,980
config files whereas the actual

00:34:05,880 --> 00:34:10,440
collision geometries are defined in the

00:34:07,980 --> 00:34:11,850
you RDF and then there's other

00:34:10,440 --> 00:34:15,179
information like the parameterization

00:34:11,850 --> 00:34:18,510
that is only specified in the zacchara

00:34:15,179 --> 00:34:21,000
files and then there's also modular

00:34:18,510 --> 00:34:23,040
pieces which there isn't a really good

00:34:21,000 --> 00:34:25,320
way to represent here so if you want to

00:34:23,040 --> 00:34:27,899
bolt a connect onto the top of your

00:34:25,320 --> 00:34:30,090
robot you actually have to compile a new

00:34:27,899 --> 00:34:32,070
you RDF for it to be considered

00:34:30,090 --> 00:34:34,290
functionally a part of it there's no way

00:34:32,070 --> 00:34:37,530
to easily add these parts together or

00:34:34,290 --> 00:34:38,669
even to create a actual hierarchy of

00:34:37,530 --> 00:34:41,540
separate models

00:34:38,669 --> 00:34:44,970
you have to just make one giant file so

00:34:41,540 --> 00:34:48,540
the you end you RDF actually stands for

00:34:44,970 --> 00:34:51,050
unified however there are numerous

00:34:48,540 --> 00:34:53,760
places where this information can be

00:34:51,050 --> 00:34:57,480
however despite these limitations there

00:34:53,760 --> 00:35:00,030
are you are DFS as you've probably seen

00:34:57,480 --> 00:35:03,660
in this talk are used in a number of

00:35:00,030 --> 00:35:07,950
different key systems to ross and so

00:35:03,660 --> 00:35:10,170
having a functional you RDF of the robot

00:35:07,950 --> 00:35:12,600
that you're using will allow you to

00:35:10,170 --> 00:35:15,570
avoid all sorts of hard-coding of

00:35:12,600 --> 00:35:18,210
different geometries and connectivities

00:35:15,570 --> 00:35:20,280
into specific nodes and instead put it

00:35:18,210 --> 00:35:25,440
in this common resource that can be used

00:35:20,280 --> 00:35:27,810
across many different systems so that's

00:35:25,440 --> 00:35:30,750
what I've got my contact information is

00:35:27,810 --> 00:35:32,400
there you can also get all of the you

00:35:30,750 --> 00:35:34,260
are DFS and some of the launch files

00:35:32,400 --> 00:35:37,320
used in this talk at

00:35:34,260 --> 00:35:39,450
the Washu repository and there's a

00:35:37,320 --> 00:35:41,370
hyperlink for it there and these slides

00:35:39,450 --> 00:35:44,160
will also be posted in the future and

00:35:41,370 --> 00:35:57,950
with that I will gladly take questions

00:35:44,160 --> 00:36:02,910
thank you very much um effort

00:35:57,950 --> 00:36:07,350
what is effort I don't know there there

00:36:02,910 --> 00:36:12,120
are the actual units of that are on the

00:36:07,350 --> 00:36:13,920
are on the specification online it's a

00:36:12,120 --> 00:36:15,630
physical property that if I'd paid more

00:36:13,920 --> 00:36:17,280
attention to in physics that I would be

00:36:15,630 --> 00:36:21,590
able to answer that oh wait I think

00:36:17,280 --> 00:36:24,570
session has an answer either force or

00:36:21,590 --> 00:36:27,180
torque depending on what kind of joint

00:36:24,570 --> 00:36:28,380
it is that's the lovely thing about

00:36:27,180 --> 00:36:35,100
having other people in the room who know

00:36:28,380 --> 00:36:36,780
what I'm talking about yes the question

00:36:35,100 --> 00:36:40,230
is is there something like as a crow for

00:36:36,780 --> 00:36:42,330
launch files I believe as a crow is

00:36:40,230 --> 00:36:45,960
written in a way that you can use it in

00:36:42,330 --> 00:36:47,670
general for any sort of XML somebody

00:36:45,960 --> 00:36:57,620
else said yes I think it's just using

00:36:47,670 --> 00:37:01,470
Zach roe or you can use the Zach roe

00:36:57,620 --> 00:37:04,620
script to create any sort of XML files

00:37:01,470 --> 00:37:07,860
so none of it is actually you RDF

00:37:04,620 --> 00:37:09,660
specific so the answer is yes I don't

00:37:07,860 --> 00:37:13,160
know anybody who's doing it yet but you

00:37:09,660 --> 00:37:13,160
could be that person yes

00:37:15,900 --> 00:37:22,150
yes--that's pre-processed and so the you

00:37:19,060 --> 00:37:23,740
don't gain any actual performance

00:37:22,150 --> 00:37:25,210
upgrades when you actually use it in

00:37:23,740 --> 00:37:28,030
your code because what's actually loaded

00:37:25,210 --> 00:37:30,160
into the parameter server is the full

00:37:28,030 --> 00:37:32,850
you RDF that's outputted from that so it

00:37:30,160 --> 00:37:32,850
is pre processed

00:37:46,780 --> 00:37:51,460
the question is how do you do if you

00:37:49,930 --> 00:37:53,470
have a robot where you have certain

00:37:51,460 --> 00:37:54,940
physical properties defined how do you

00:37:53,470 --> 00:37:57,310
define the other physical properties

00:37:54,940 --> 00:37:59,080
like moment of inertia I don't have a

00:37:57,310 --> 00:38:00,790
good answer for that maybe it'll be

00:37:59,080 --> 00:38:06,070
touched on in the gazebo talk I'm not

00:38:00,790 --> 00:38:08,530
sure but it's you can either get it from

00:38:06,070 --> 00:38:12,310
sort of sort of other modeling software

00:38:08,530 --> 00:38:13,420
such as the CAD programs but I don't

00:38:12,310 --> 00:38:17,130
know how you'd actually calculate the

00:38:13,420 --> 00:38:17,130
moment of inertia yes

00:38:27,180 --> 00:38:33,300
the question was on the differences

00:38:28,980 --> 00:38:35,940
between VRML right and yard yep

00:38:33,300 --> 00:38:37,680
I don't know VRML so I don't have that

00:38:35,940 --> 00:38:39,900
much of an answer to that you RDF I

00:38:37,680 --> 00:38:42,300
believe is a propriety proprietary

00:38:39,900 --> 00:38:46,490
format not proprietary a format made

00:38:42,300 --> 00:38:50,070
specifically for Ross is that correct so

00:38:46,490 --> 00:38:52,470
it's sort of designed for the specific

00:38:50,070 --> 00:38:55,920
use cases of you know creating these TF

00:38:52,470 --> 00:38:57,480
trees and that sort of thing and I

00:38:55,920 --> 00:38:59,190
believe there are ways to interconvert

00:38:57,480 --> 00:39:00,780
between them but I don't know as much

00:38:59,190 --> 00:39:06,020
about the are mail to answer that

00:39:00,780 --> 00:39:06,020
question specifically yeah

00:39:12,369 --> 00:39:21,020
the question is if there's any work for

00:39:14,750 --> 00:39:22,640
editing your defiles blender plugins

00:39:21,020 --> 00:39:24,500
yeah I believe there's a number of

00:39:22,640 --> 00:39:26,780
different efforts out there Simic annex

00:39:24,500 --> 00:39:30,260
to you rdf was my one sort of plug into

00:39:26,780 --> 00:39:36,740
I think somebody is doing an internship

00:39:30,260 --> 00:39:40,970
on writing a converter for salt for

00:39:36,740 --> 00:39:42,950
different CAD models I think there are

00:39:40,970 --> 00:39:44,660
some people working on that just in my

00:39:42,950 --> 00:39:46,849
own work I've tried to create a couple

00:39:44,660 --> 00:39:49,190
scripts myself but I don't know how much

00:39:46,849 --> 00:39:51,579
of a concerted effort there is from the

00:39:49,190 --> 00:39:51,579
top down

00:39:59,289 --> 00:40:02,260
the question is is there a way to

00:40:00,609 --> 00:40:05,710
convert from you are do you have to sim

00:40:02,260 --> 00:40:08,049
mechanics at the moment no the Simek

00:40:05,710 --> 00:40:12,069
annex models have a bit more information

00:40:08,049 --> 00:40:13,839
than the you RDF and part of the process

00:40:12,069 --> 00:40:16,240
of writing that script was condensing it

00:40:13,839 --> 00:40:17,770
down to the relevant information but

00:40:16,240 --> 00:40:19,869
there's currently no conversion in the

00:40:17,770 --> 00:40:21,520
other direction that's not to say that

00:40:19,869 --> 00:40:24,220
the open-source community can't support

00:40:21,520 --> 00:40:32,880
ways to do that if there is a need for

00:40:24,220 --> 00:40:35,230
that but currently there is one sorry

00:40:32,880 --> 00:40:37,480
yes there is you rdf to colada and

00:40:35,230 --> 00:40:45,670
Claddagh is a bit more of a standard of

00:40:37,480 --> 00:40:47,940
that other programs can sometimes use is

00:40:45,670 --> 00:40:47,940
it what

00:40:48,150 --> 00:40:54,780
yes so by specific question was is this

00:40:52,080 --> 00:40:57,030
you rdf model and in particular yes it

00:40:54,780 --> 00:40:59,610
is using those gazebo tags and

00:40:57,030 --> 00:41:01,290
simulation parameters it's loaded into

00:40:59,610 --> 00:41:03,890
gazebo as we'll hear a little bit more

00:41:01,290 --> 00:41:03,890
about later today

00:41:12,880 --> 00:41:15,630
mm-hmm

00:41:24,680 --> 00:41:29,539
yeah so the question was on using

00:41:27,589 --> 00:41:32,809
simplified geometry for the collision

00:41:29,539 --> 00:41:34,730
elements and yes you can use any sort of

00:41:32,809 --> 00:41:37,309
simpler geometries so you mentioned just

00:41:34,730 --> 00:41:38,930
using a bounding box that is completely

00:41:37,309 --> 00:41:41,119
acceptable in that you can just specify

00:41:38,930 --> 00:41:44,230
a box element as opposed to the full

00:41:41,119 --> 00:41:47,890
mesh and that'll be in order quicker

00:41:44,230 --> 00:41:51,500
last I checked there were still some

00:41:47,890 --> 00:41:53,720
bugs in the in the collision detection

00:41:51,500 --> 00:41:56,410
so that cylinders didn't work but I'll

00:41:53,720 --> 00:41:56,410
have to double check that

00:42:13,650 --> 00:42:18,370
not that I know of

00:42:15,460 --> 00:42:20,260
there might be and but I haven't figured

00:42:18,370 --> 00:42:22,210
out that black magic myself oh sorry the

00:42:20,260 --> 00:42:24,730
question was are there tools to help you

00:42:22,210 --> 00:42:27,220
map the textures on to the various

00:42:24,730 --> 00:42:29,080
geometries and not to my knowledge there

00:42:27,220 --> 00:42:30,910
might be but somebody with more

00:42:29,080 --> 00:42:32,550
knowledge of 3d geometry would have to

00:42:30,910 --> 00:42:34,900
answer that

00:42:32,550 --> 00:42:36,160
not on the wiki page currently I've been

00:42:34,900 --> 00:42:37,780
trying to figure that out and when I do

00:42:36,160 --> 00:42:41,920
figure it out I will update it or

00:42:37,780 --> 00:42:43,650
perhaps you come the biggest way as I

00:42:41,920 --> 00:42:47,410
mentioned is using the macro of

00:42:43,650 --> 00:42:50,770
technology that will help reduce a lot

00:42:47,410 --> 00:42:53,530
of the complexity other than that it's

00:42:50,770 --> 00:42:55,240
just a bit of clever writing and you

00:42:53,530 --> 00:42:57,250
know being able to represent your robot

00:42:55,240 --> 00:43:00,190
in an efficient way there are various

00:42:57,250 --> 00:43:05,770
ways to merge meshes together using

00:43:00,190 --> 00:43:08,740
tools that are out there but really this

00:43:05,770 --> 00:43:10,420
is not aimed to be an efficient sort of

00:43:08,740 --> 00:43:13,270
representation more a complete

00:43:10,420 --> 00:43:15,700
representation the question was whether

00:43:13,270 --> 00:43:18,480
you can change the you RDF dynamically

00:43:15,700 --> 00:43:20,680
if say you either attach something or

00:43:18,480 --> 00:43:24,580
there's damage here robot like you

00:43:20,680 --> 00:43:27,550
mentioned currently you can you could

00:43:24,580 --> 00:43:30,730
reload the parameter the RDF parameter

00:43:27,550 --> 00:43:32,470
into your model into the parameter

00:43:30,730 --> 00:43:34,480
server but then you'd have to make some

00:43:32,470 --> 00:43:36,520
functionality for whatever uses that

00:43:34,480 --> 00:43:38,050
model to reload the model so currently I

00:43:36,520 --> 00:43:41,080
don't believe there's any particularly

00:43:38,050 --> 00:43:42,880
good way to do that so yeah as you said

00:43:41,080 --> 00:43:45,870
there are ways to do that with to attach

00:43:42,880 --> 00:43:45,870

YouTube URL: https://www.youtube.com/watch?v=g9WHxOpAUns


