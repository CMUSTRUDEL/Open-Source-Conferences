Title: ROSCon 2012 - Measuring and Tracking Code Quality in ROS
Publication date: 2014-08-31
Playlist: ROSCon 2012
Description: 
	Benjamin Pitzer
Measuring and Tracking Code Quality in ROS
Captions: 
	00:00:03,170 --> 00:00:07,550
all right next up we have been pitzer

00:00:06,020 --> 00:00:09,740
from bosch who's going to be talking

00:00:07,550 --> 00:00:11,269
about measuring and tracking code in

00:00:09,740 --> 00:00:13,490
Ross which I know we've had a lot of

00:00:11,269 --> 00:00:15,800
people talk about this weekend so very

00:00:13,490 --> 00:00:17,689
exciting and then i'm from bosch

00:00:15,800 --> 00:00:20,690
research in technology center in palo

00:00:17,689 --> 00:00:22,910
alto and I'm German so that's why it's

00:00:20,690 --> 00:00:26,720
sort of in my blood to to care about

00:00:22,910 --> 00:00:27,949
quality good quality and I'm going to

00:00:26,720 --> 00:00:28,970
talk about this today but I'm not going

00:00:27,949 --> 00:00:31,640
to talk about is I'm not going to

00:00:28,970 --> 00:00:35,090
educate you on how to write C++ or

00:00:31,640 --> 00:00:37,159
Python or anything I we started to look

00:00:35,090 --> 00:00:38,479
into analyzing the quality where are we

00:00:37,159 --> 00:00:41,180
right now where should we be in the

00:00:38,479 --> 00:00:43,190
future and try to understand what's

00:00:41,180 --> 00:00:47,809
going on right now and i will present

00:00:43,190 --> 00:00:50,589
the first result of that so what we've

00:00:47,809 --> 00:00:53,180
seen in the past and those are known

00:00:50,589 --> 00:00:55,040
known statistics is that we have an

00:00:53,180 --> 00:00:57,559
amazing growth over the past recent

00:00:55,040 --> 00:00:59,540
years in ross in terms of the content

00:00:57,559 --> 00:01:00,860
but also in the terms of contributors

00:00:59,540 --> 00:01:03,140
that's why you guys are all here and

00:01:00,860 --> 00:01:05,740
this is like this is really amazing all

00:01:03,140 --> 00:01:08,659
right so it's amazing to have all this

00:01:05,740 --> 00:01:11,119
others like new packages coming up and

00:01:08,659 --> 00:01:13,640
so on just to give you a little bit

00:01:11,119 --> 00:01:15,950
perspective on this actually you know if

00:01:13,640 --> 00:01:18,170
you compare the code size available on

00:01:15,950 --> 00:01:19,969
Ross compared to compared to other open

00:01:18,170 --> 00:01:23,210
source projects is we are doing pretty

00:01:19,969 --> 00:01:26,179
good right so we beat chromium which is

00:01:23,210 --> 00:01:28,700
a massive repository not quite there at

00:01:26,179 --> 00:01:30,679
the Linux kernel level yet but maybe you

00:01:28,700 --> 00:01:32,179
know if we you know project this out in

00:01:30,679 --> 00:01:36,829
the future maybe a few years down the

00:01:32,179 --> 00:01:38,630
road so if you look at look at Ross's

00:01:36,829 --> 00:01:40,579
like 7.3 million lines of code is

00:01:38,630 --> 00:01:42,649
everything I could find and I just call

00:01:40,579 --> 00:01:44,570
through it and looked at it the only

00:01:42,649 --> 00:01:46,700
twenty-seven percent of this this cause

00:01:44,570 --> 00:01:49,009
actually released this is electric

00:01:46,700 --> 00:01:50,929
that's not fair to yet and this whole

00:01:49,009 --> 00:01:53,929
other seventy-three percent is not not

00:01:50,929 --> 00:01:55,039
released yet what does it mean Morgan

00:01:53,929 --> 00:01:57,950
and other people who have talked about

00:01:55,039 --> 00:02:00,590
this idea of you know vetted code and

00:01:57,950 --> 00:02:02,450
this wild code so probably a lot of the

00:02:00,590 --> 00:02:04,639
seventy-three percent is actually wild

00:02:02,450 --> 00:02:06,289
code that it's just there and nobody

00:02:04,639 --> 00:02:10,520
knows that it's there it's maybe not

00:02:06,289 --> 00:02:12,379
even on the wiki and and we have no idea

00:02:10,520 --> 00:02:16,849
what's actually good and what's bad and

00:02:12,379 --> 00:02:17,600
or in our code base and so this is why

00:02:16,849 --> 00:02:20,630
i'm giving this

00:02:17,600 --> 00:02:24,440
talk and and how you know how can we

00:02:20,630 --> 00:02:27,140
care more about quality so the reason

00:02:24,440 --> 00:02:29,600
why we should care is that can be really

00:02:27,140 --> 00:02:33,050
bad consequences if you if you write bad

00:02:29,600 --> 00:02:35,120
code here's a very bad one we're

00:02:33,050 --> 00:02:37,100
actually like a rocket crashed just

00:02:35,120 --> 00:02:40,130
because of you know weird floating-point

00:02:37,100 --> 00:02:41,960
to integer conversion and by holiday

00:02:40,130 --> 00:02:44,330
standards and then the tools that we

00:02:41,960 --> 00:02:48,110
have nowadays this should never ever

00:02:44,330 --> 00:02:49,820
happen again but if you look into ross

00:02:48,110 --> 00:02:51,800
code and other code base as well there

00:02:49,820 --> 00:02:54,230
are still those are those cases in there

00:02:51,800 --> 00:02:57,380
this is a very very bad case but there's

00:02:54,230 --> 00:02:59,410
other things which you should also care

00:02:57,380 --> 00:03:01,460
about and one of the things is

00:02:59,410 --> 00:03:03,620
maintenance and development right so we

00:03:01,460 --> 00:03:04,940
have all this code lying around and we

00:03:03,620 --> 00:03:07,190
need to maintain it we need to bring it

00:03:04,940 --> 00:03:10,160
to you know the next releases the neck

00:03:07,190 --> 00:03:12,530
sweater and groovy and whatever and it's

00:03:10,160 --> 00:03:14,900
it's hard like if your code is spaghetti

00:03:12,530 --> 00:03:17,750
code it's it's hard to maintain it and

00:03:14,900 --> 00:03:20,240
if it's in a world structured and you

00:03:17,750 --> 00:03:22,340
know well tested it's much easier as

00:03:20,240 --> 00:03:24,890
actually impure empirically proven that

00:03:22,340 --> 00:03:27,020
if you spend more time in the very early

00:03:24,890 --> 00:03:29,090
stages of developing code you can also

00:03:27,020 --> 00:03:31,640
reduce the entire development cycle

00:03:29,090 --> 00:03:33,800
because you know you you just don't get

00:03:31,640 --> 00:03:37,040
into this like nasty bugs that only turn

00:03:33,800 --> 00:03:40,010
out way way down the road something that

00:03:37,040 --> 00:03:42,380
we personally care about as a company is

00:03:40,010 --> 00:03:46,580
also the commercial applications for us

00:03:42,380 --> 00:03:48,890
and in industry there's in like a long

00:03:46,580 --> 00:03:51,320
history of standardizing and making sure

00:03:48,890 --> 00:03:54,170
that code is actually up to a certain

00:03:51,320 --> 00:03:55,670
level and I so C and C++ is one of those

00:03:54,170 --> 00:03:57,590
examples where you know people actually

00:03:55,670 --> 00:03:59,090
have sat down and wrote wrote down

00:03:57,590 --> 00:04:01,340
what's what's good and what's bad and

00:03:59,090 --> 00:04:03,470
there's other things too like misra

00:04:01,340 --> 00:04:04,820
which is being used in automotive and

00:04:03,470 --> 00:04:08,990
the aviation industry and also the

00:04:04,820 --> 00:04:11,810
safety integrity level and right no none

00:04:08,990 --> 00:04:13,610
of those standards this is used in open

00:04:11,810 --> 00:04:18,370
source and it's not just for assets and

00:04:13,610 --> 00:04:21,140
in other open source projects as well so

00:04:18,370 --> 00:04:23,240
what was what is actually called quality

00:04:21,140 --> 00:04:25,280
and this is a definition that I

00:04:23,240 --> 00:04:28,370
personally came up with so it's not

00:04:25,280 --> 00:04:31,280
guaranteed to be super correct but for

00:04:28,370 --> 00:04:33,920
me there's two aspects to it one is

00:04:31,280 --> 00:04:35,780
the sort of external quality and if you

00:04:33,920 --> 00:04:37,370
think about a rose note you know if I

00:04:35,780 --> 00:04:40,280
read what this roster was supposed to do

00:04:37,370 --> 00:04:42,020
and I started and I you know expected to

00:04:40,280 --> 00:04:44,210
do exactly that and not only that but

00:04:42,020 --> 00:04:46,370
also with a good performance and also

00:04:44,210 --> 00:04:49,190
with you know maybe good look and feel

00:04:46,370 --> 00:04:52,639
any good interface it's sort of like the

00:04:49,190 --> 00:04:55,970
the user facing side but then there's

00:04:52,639 --> 00:04:59,240
also an internal quality and I touched

00:04:55,970 --> 00:05:00,650
on this before things like this is the

00:04:59,240 --> 00:05:02,990
code readable can I understand what it's

00:05:00,650 --> 00:05:05,120
doing is this is really important to you

00:05:02,990 --> 00:05:09,050
know maintain it over a longer period of

00:05:05,120 --> 00:05:11,720
time the same with complexity you know

00:05:09,050 --> 00:05:15,620
if you have the function which is a

00:05:11,720 --> 00:05:17,360
three hundred lines long that's that's

00:05:15,620 --> 00:05:19,610
really complex and really hard to

00:05:17,360 --> 00:05:21,860
understand first of all is really hard

00:05:19,610 --> 00:05:24,290
to find bugs if there are any inside and

00:05:21,860 --> 00:05:28,450
it's also hard to maintain over over the

00:05:24,290 --> 00:05:33,710
next cycles and also testability and I

00:05:28,450 --> 00:05:38,300
have some examples of that later on on

00:05:33,710 --> 00:05:40,669
this topic so how can we how can we

00:05:38,300 --> 00:05:42,620
measure coat because only if you can

00:05:40,669 --> 00:05:43,880
measure some code quality because only

00:05:42,620 --> 00:05:46,340
if you measure it can measure something

00:05:43,880 --> 00:05:48,110
we can actually improve it and can

00:05:46,340 --> 00:05:51,350
manage it and see you know have this

00:05:48,110 --> 00:05:54,050
goal we want to go to one way of doing

00:05:51,350 --> 00:05:55,729
it maybe not the best one but you know

00:05:54,050 --> 00:05:57,770
it works you're just throw a bunch of

00:05:55,729 --> 00:06:00,950
people into a room and see how much they

00:05:57,770 --> 00:06:03,560
curse about the code probably not very

00:06:00,950 --> 00:06:07,100
reproducible so there are few have

00:06:03,560 --> 00:06:09,440
certain certain measures let us I've

00:06:07,100 --> 00:06:12,220
been established over the past one of an

00:06:09,440 --> 00:06:14,660
easy one is common to quote ratio and

00:06:12,220 --> 00:06:16,160
you know it's simply accounting the

00:06:14,660 --> 00:06:21,350
lines which are contained your comments

00:06:16,160 --> 00:06:24,110
versus code and yeah if you know it

00:06:21,350 --> 00:06:26,780
should be a rough a certain level and so

00:06:24,110 --> 00:06:30,110
we have run some experiments or some

00:06:26,780 --> 00:06:33,080
analysis on on Ross about this measure

00:06:30,110 --> 00:06:35,300
and this is a statistic that we came up

00:06:33,080 --> 00:06:37,850
with here you can see three different

00:06:35,300 --> 00:06:41,990
parts one is one of our own modules

00:06:37,850 --> 00:06:43,529
Bosch common sorry for the non not very

00:06:41,990 --> 00:06:45,659
good action here

00:06:43,529 --> 00:06:49,439
there's roscommon which is a very core

00:06:45,659 --> 00:06:51,719
part in Ross and sort of the as

00:06:49,439 --> 00:06:54,569
reference the entire electric

00:06:51,719 --> 00:06:58,109
distribution and you can already see

00:06:54,569 --> 00:07:01,019
that there's that there's differences in

00:06:58,109 --> 00:07:03,569
the literature like a comment to code

00:07:01,019 --> 00:07:06,869
ratio buff 0.2 is sort of the

00:07:03,569 --> 00:07:08,669
recommended value and you know you can

00:07:06,869 --> 00:07:11,489
say that there's about seventy to eighty

00:07:08,669 --> 00:07:13,649
percent of our code is above that so

00:07:11,489 --> 00:07:15,779
that's okay but be really interesting

00:07:13,649 --> 00:07:18,929
part is like this this part here right

00:07:15,779 --> 00:07:21,989
so there's actually a lot of code which

00:07:18,929 --> 00:07:23,189
is which is not very well documented now

00:07:21,989 --> 00:07:24,869
the interesting parts actually this part

00:07:23,189 --> 00:07:26,549
here right so there's a lot of code

00:07:24,869 --> 00:07:29,699
which is sort of like over documented

00:07:26,549 --> 00:07:31,559
and it turns out that in in browse it's

00:07:29,699 --> 00:07:34,529
very common to use this fat bsd header

00:07:31,559 --> 00:07:36,829
in c++ code and that contributes a lot

00:07:34,529 --> 00:07:40,499
of comments in this analysis right so

00:07:36,829 --> 00:07:41,879
which means that you know there's a

00:07:40,499 --> 00:07:43,739
bunch of code which basically just

00:07:41,879 --> 00:07:49,379
consists of this header so is that good

00:07:43,739 --> 00:07:51,269
I don't know a second measure that also

00:07:49,379 --> 00:07:55,379
commonly used is the cyclomatic

00:07:51,269 --> 00:07:58,279
complexity and it's a crazy word for

00:07:55,379 --> 00:08:00,479
something very simple it's basically how

00:07:58,279 --> 00:08:02,729
how many decisions do you have in your

00:08:00,479 --> 00:08:04,919
code like this simple example there is

00:08:02,729 --> 00:08:08,099
two all right so one if and another if

00:08:04,919 --> 00:08:10,409
and the cyclomatic complexity is defined

00:08:08,099 --> 00:08:12,569
by the number of decisions plus one so

00:08:10,409 --> 00:08:16,769
it would be three four for this example

00:08:12,569 --> 00:08:19,139
and this sort of tells you on how how

00:08:16,769 --> 00:08:21,149
complex your code is right so if you

00:08:19,139 --> 00:08:23,069
have too many ifs and switches and all

00:08:21,149 --> 00:08:24,419
the stuff going on in one function you

00:08:23,069 --> 00:08:27,509
probably want to split it up into

00:08:24,419 --> 00:08:29,009
multiple ones to make sure you still get

00:08:27,509 --> 00:08:31,079
what's going on and you can chest in

00:08:29,009 --> 00:08:34,669
little chunks instead of you're trying

00:08:31,079 --> 00:08:37,769
to test this whole big blob of code and

00:08:34,669 --> 00:08:40,169
if you if you look again on some

00:08:37,769 --> 00:08:43,709
statistics here it's the navigation

00:08:40,169 --> 00:08:46,829
stack Ross chrome and electric again a

00:08:43,709 --> 00:08:49,139
recommended value for like recommend max

00:08:46,829 --> 00:08:51,209
value in this case would be 10 for this

00:08:49,139 --> 00:08:55,000
complexity and turns out there's

00:08:51,209 --> 00:08:57,070
actually a largest number the biggest

00:08:55,000 --> 00:08:59,680
this number of code of functions are

00:08:57,070 --> 00:09:01,960
actually below this video's value so

00:08:59,680 --> 00:09:04,720
this promising but again you know let's

00:09:01,960 --> 00:09:06,730
look at this let's look at this this

00:09:04,720 --> 00:09:10,150
part here right so because this is where

00:09:06,730 --> 00:09:12,820
the Box are in the end and here's just

00:09:10,150 --> 00:09:14,530
one blob yeah you read it no I'm sorry

00:09:12,820 --> 00:09:16,780
because it's actually you know actually

00:09:14,530 --> 00:09:19,960
a function that it's over 200 lines long

00:09:16,780 --> 00:09:24,100
and you know it has four levels of

00:09:19,960 --> 00:09:25,960
nesting and you know there's thousands

00:09:24,100 --> 00:09:27,970
of paths that can possibly go through

00:09:25,960 --> 00:09:31,270
the code so it was impossible to test

00:09:27,970 --> 00:09:36,640
and understand in that sense so this is

00:09:31,270 --> 00:09:39,280
this is not good so another another

00:09:36,640 --> 00:09:42,070
measure that's sort of reflects the

00:09:39,280 --> 00:09:43,900
maintainability of code and it's you can

00:09:42,070 --> 00:09:46,300
see it's sort of correlated to to the

00:09:43,900 --> 00:09:49,690
one before is the number of function

00:09:46,300 --> 00:09:52,120
calls so how many you know function

00:09:49,690 --> 00:09:57,340
calls we have in a individual function

00:09:52,120 --> 00:09:59,440
and the point is that if you have a

00:09:57,340 --> 00:10:00,790
large number it's more difficult to

00:09:59,440 --> 00:10:03,430
understand what's going on again right

00:10:00,790 --> 00:10:05,260
so if you know if we have one function

00:10:03,430 --> 00:10:06,220
you have hundreds of branches all you

00:10:05,260 --> 00:10:07,420
have to read through all the sub

00:10:06,220 --> 00:10:08,740
functions you actually understand

00:10:07,420 --> 00:10:11,560
conceptually what what the code is doing

00:10:08,740 --> 00:10:14,140
and how is handling all this which one

00:10:11,560 --> 00:10:18,520
calls and so on it for this example it's

00:10:14,140 --> 00:10:20,950
it's two games so that's that's pretty

00:10:18,520 --> 00:10:25,000
easy and here once again if we if we

00:10:20,950 --> 00:10:27,280
graph this over sort of the entire Ross

00:10:25,000 --> 00:10:29,020
universe compared to Ross calm and we

00:10:27,280 --> 00:10:31,870
also have as comparison some of our

00:10:29,020 --> 00:10:35,410
inbox internal product code let me use

00:10:31,870 --> 00:10:41,050
you can actually see already there's a

00:10:35,410 --> 00:10:43,180
clear difference in quality for our own

00:10:41,050 --> 00:10:45,760
product code as well as Ross Kong that's

00:10:43,180 --> 00:10:49,030
actually pretty good so there's you know

00:10:45,760 --> 00:10:51,520
a very very good modular modularization

00:10:49,030 --> 00:10:54,790
and you know very clear structure of the

00:10:51,520 --> 00:10:59,170
code whereas in total for the whole Ross

00:10:54,790 --> 00:11:01,960
electric universe it's also a very high

00:10:59,170 --> 00:11:03,550
level you here but in total I mean you

00:11:01,960 --> 00:11:07,209
cannot really see that here but in

00:11:03,550 --> 00:11:08,410
totally the compliance so to say to

00:11:07,209 --> 00:11:13,810
those values it's not

00:11:08,410 --> 00:11:18,279
so good so let's let's jump to a sort of

00:11:13,810 --> 00:11:21,699
macro perspective on things again in the

00:11:18,279 --> 00:11:23,470
next slide I did a comparison of some of

00:11:21,699 --> 00:11:25,810
the other open source packages that we

00:11:23,470 --> 00:11:29,290
use very commonly referred about Oh PCV

00:11:25,810 --> 00:11:32,980
and pcl and here is also chromium again

00:11:29,290 --> 00:11:36,430
as as an example and I you know was just

00:11:32,980 --> 00:11:37,870
interested in the same the same metrics

00:11:36,430 --> 00:11:40,629
that I showed you before there's a

00:11:37,870 --> 00:11:43,149
fourth one in here which is the number

00:11:40,629 --> 00:11:44,889
of parameters for per function I can

00:11:43,149 --> 00:11:46,569
imagine again you know if you have a

00:11:44,889 --> 00:11:49,449
large number of function function

00:11:46,569 --> 00:11:52,000
parameters that's also not not so good

00:11:49,449 --> 00:11:56,620
and to understand and to maintain as

00:11:52,000 --> 00:12:00,850
well and so if we if you look at this

00:11:56,620 --> 00:12:03,430
here there's actually very little

00:12:00,850 --> 00:12:05,889
difference between those those different

00:12:03,430 --> 00:12:08,319
projects on a on a large scale but you

00:12:05,889 --> 00:12:11,500
know tears STC DM is again the comment

00:12:08,319 --> 00:12:13,120
to code ratio which turns out for

00:12:11,500 --> 00:12:16,930
electric which is this yellow blob here

00:12:13,120 --> 00:12:22,420
and a pcl is this lighter blue one here

00:12:16,930 --> 00:12:24,310
is actually pretty high and so something

00:12:22,420 --> 00:12:26,980
to say about this is also again so this

00:12:24,310 --> 00:12:31,689
this bsd header probably contributes a

00:12:26,980 --> 00:12:33,670
lot a lot here in this case and actually

00:12:31,689 --> 00:12:36,279
turns out chromium which is this gray

00:12:33,670 --> 00:12:37,779
one here is very fully documented and

00:12:36,279 --> 00:12:43,139
it's true if you look at the code it's

00:12:37,779 --> 00:12:46,300
not good for for the other values the

00:12:43,139 --> 00:12:47,850
cyclomatic complexity and and the other

00:12:46,300 --> 00:12:52,079
ones you can actually see a clear trend

00:12:47,850 --> 00:12:55,630
so the chromium project is probably the

00:12:52,079 --> 00:12:57,639
most maintained and most structured

00:12:55,630 --> 00:13:00,399
project of all of them right now and you

00:12:57,639 --> 00:13:06,069
can see see that reflected in in all of

00:13:00,399 --> 00:13:10,029
those those values quite well so from

00:13:06,069 --> 00:13:11,379
that but the numbers i showed you so far

00:13:10,029 --> 00:13:13,509
in the graphs i showed you so far is

00:13:11,379 --> 00:13:15,579
sort of like a one-time it's an allison

00:13:13,509 --> 00:13:19,300
said we did but what we actually want to

00:13:15,579 --> 00:13:21,370
to come to is more like i can on the fly

00:13:19,300 --> 00:13:22,380
looking at those metrics and see if he

00:13:21,370 --> 00:13:25,690
can improve

00:13:22,380 --> 00:13:26,980
improve on this on a daily basis and so

00:13:25,690 --> 00:13:31,690
what I want to show you now very briefly

00:13:26,980 --> 00:13:36,670
is I can get it to work is my vision of

00:13:31,690 --> 00:13:39,070
this shift it over quick so you can see

00:13:36,670 --> 00:13:43,900
here is not the raw squeaky it's

00:13:39,070 --> 00:13:47,590
actually just a copy of it and allows me

00:13:43,900 --> 00:13:49,150
to play around with some stuff so here's

00:13:47,590 --> 00:13:51,070
the Ross come stag what I added here

00:13:49,150 --> 00:13:53,910
just just to get a get a feel for how

00:13:51,070 --> 00:14:00,490
this could work as a new metrics section

00:13:53,910 --> 00:14:04,570
and so this is empty right now but I can

00:14:00,490 --> 00:14:06,010
copy in one of the macros that Maloney

00:14:04,570 --> 00:14:09,070
is talking about so that's a new one

00:14:06,010 --> 00:14:14,020
that I maybe contribute three soon and

00:14:09,070 --> 00:14:15,460
that macro we will show up expense to

00:14:14,020 --> 00:14:18,430
something like this right so we can see

00:14:15,460 --> 00:14:21,700
the actual quantitative metrics for the

00:14:18,430 --> 00:14:22,950
code generated by by the built-in

00:14:21,700 --> 00:14:26,410
release system that we have right now

00:14:22,950 --> 00:14:29,200
and as well as the the code quality

00:14:26,410 --> 00:14:31,270
metrics similar to the way that I showed

00:14:29,200 --> 00:14:33,100
you in the slides so far and it was

00:14:31,270 --> 00:14:35,620
great so this can actually help to

00:14:33,100 --> 00:14:37,090
improve right so if you if you see this

00:14:35,620 --> 00:14:40,600
you see that your code is maybe not so

00:14:37,090 --> 00:14:42,220
good right you check in some changes and

00:14:40,600 --> 00:14:44,740
next day the crawler went through all of

00:14:42,220 --> 00:14:50,260
this and you have an updated metric and

00:14:44,740 --> 00:14:52,660
I think what this also helps us to ya to

00:14:50,260 --> 00:14:54,700
get like a better understanding for all

00:14:52,660 --> 00:14:58,350
of us what cool quality means but also

00:14:54,700 --> 00:14:58,350
to highlight good quality in the system

00:14:59,730 --> 00:15:05,520
okay let me quickly jump back to this

00:15:03,070 --> 00:15:05,520
one here

00:15:06,570 --> 00:15:15,600
so almost done I just want to give a few

00:15:12,360 --> 00:15:18,480
principles and guidelines how to improve

00:15:15,600 --> 00:15:21,000
code quality and how to work on this

00:15:18,480 --> 00:15:23,700
together as a community there's a few

00:15:21,000 --> 00:15:26,310
things that we already have in place but

00:15:23,700 --> 00:15:29,490
not many people know about this there's

00:15:26,310 --> 00:15:33,270
actually a coding style guide at least

00:15:29,490 --> 00:15:35,240
for c++ tears on the wiki and that also

00:15:33,270 --> 00:15:38,550
contains naming conventions and also

00:15:35,240 --> 00:15:41,370
guidelines about n handling exceptions

00:15:38,550 --> 00:15:43,620
and Ross and this is this is really good

00:15:41,370 --> 00:15:45,180
and you should all take a look at this

00:15:43,620 --> 00:15:48,210
and actually develop your coat according

00:15:45,180 --> 00:15:49,470
to this because that also makes makes it

00:15:48,210 --> 00:15:51,390
much easier for other people to

00:15:49,470 --> 00:15:53,160
understand your code and to build on top

00:15:51,390 --> 00:15:56,790
of it and maybe even you'll contribute

00:15:53,160 --> 00:16:00,390
patches and fix this to your code the

00:15:56,790 --> 00:16:02,790
same exists for unit testing though unit

00:16:00,390 --> 00:16:06,810
testing is something that no takes a lot

00:16:02,790 --> 00:16:08,730
of time to to build up and so on so even

00:16:06,810 --> 00:16:11,490
though there exists guidelines ended on

00:16:08,730 --> 00:16:14,160
this it's not used very often in right

00:16:11,490 --> 00:16:15,930
now something that some things that we

00:16:14,160 --> 00:16:17,700
don't have right now are actually like

00:16:15,930 --> 00:16:19,590
principles on how to do things right

00:16:17,700 --> 00:16:22,530
like object oriented design something

00:16:19,590 --> 00:16:24,240
but now every you nobody comes up with

00:16:22,530 --> 00:16:25,860
their own scheme how to build Ross nodes

00:16:24,240 --> 00:16:28,680
and how to tie it all together out with

00:16:25,860 --> 00:16:30,690
more complex systems so I think it would

00:16:28,680 --> 00:16:32,580
be good to to have a consensus how to

00:16:30,690 --> 00:16:36,000
how to do or best best practices how to

00:16:32,580 --> 00:16:37,860
do this this stuff and also principles

00:16:36,000 --> 00:16:38,990
about the develop environment I think

00:16:37,860 --> 00:16:41,250
it's a very important point because

00:16:38,990 --> 00:16:43,380
right now there's nothing like everybody

00:16:41,250 --> 00:16:45,810
can do whatever they want right so use a

00:16:43,380 --> 00:16:49,410
text editorial use Emacs or eclipse or

00:16:45,810 --> 00:16:51,270
Visual Studio right but there's not a

00:16:49,410 --> 00:16:53,820
really good consensus on how to do

00:16:51,270 --> 00:16:55,410
things very well and in productive

00:16:53,820 --> 00:16:57,990
environment like environments like we

00:16:55,410 --> 00:16:59,580
have at bosch there's a you know they're

00:16:57,990 --> 00:17:01,020
very good principles and you know the

00:16:59,580 --> 00:17:05,820
development environments the tool chains

00:17:01,020 --> 00:17:08,579
sort of unified and that helps to to get

00:17:05,820 --> 00:17:13,170
the quality up so what can we do to

00:17:08,579 --> 00:17:15,360
actually ensure and improve quality one

00:17:13,170 --> 00:17:17,160
thing that we already do in half is the

00:17:15,360 --> 00:17:19,449
continuous integration system which is

00:17:17,160 --> 00:17:21,669
great and I encourage everybody to get

00:17:19,449 --> 00:17:25,149
you know their code out into the release

00:17:21,669 --> 00:17:27,880
system built you know sent stuff to

00:17:25,149 --> 00:17:30,130
Hudson have it built on a clean system

00:17:27,880 --> 00:17:32,409
Steve it compiles and all the different

00:17:30,130 --> 00:17:33,970
distributions and all the distance if

00:17:32,409 --> 00:17:36,279
different you want two versions and so

00:17:33,970 --> 00:17:39,010
on this really helps to to make sure

00:17:36,279 --> 00:17:41,019
that you know your code runs and once

00:17:39,010 --> 00:17:42,490
it's in the release process it will also

00:17:41,019 --> 00:17:44,200
most likely to live on in the next

00:17:42,490 --> 00:17:47,519
versions and then it's you know very

00:17:44,200 --> 00:17:50,230
easy to maintain it over the time

00:17:47,519 --> 00:17:53,740
something that we also sort of have mr.

00:17:50,230 --> 00:17:55,960
buck checker there's track that some

00:17:53,740 --> 00:17:58,779
project use but there's no centralized

00:17:55,960 --> 00:18:02,110
one right everybody who everybody's kind

00:17:58,779 --> 00:18:04,120
of using the own thing if at all and I

00:18:02,110 --> 00:18:07,419
think we we should we should improve

00:18:04,120 --> 00:18:10,299
that another thing that's very common to

00:18:07,419 --> 00:18:13,990
an industrial environment is code review

00:18:10,299 --> 00:18:15,880
and I know only from from you know very

00:18:13,990 --> 00:18:19,570
specific place I know willows just doing

00:18:15,880 --> 00:18:21,340
it in some instances but this is

00:18:19,570 --> 00:18:24,909
actually very helpful and even if it

00:18:21,340 --> 00:18:26,470
seems that it's very big / had to do by

00:18:24,909 --> 00:18:28,120
just doing some you know Pierre probe

00:18:26,470 --> 00:18:30,760
programming which is essentially code

00:18:28,120 --> 00:18:32,559
review or you know just going like

00:18:30,760 --> 00:18:35,559
stepping through the cope with somebody

00:18:32,559 --> 00:18:38,529
else real quick helps to really a you

00:18:35,559 --> 00:18:42,870
know get understand what other people

00:18:38,529 --> 00:18:46,450
are doing get the code level higher and

00:18:42,870 --> 00:18:47,980
then something something else that's

00:18:46,450 --> 00:18:50,590
pretty common in industrial environments

00:18:47,980 --> 00:18:52,269
is that I'm not very common in Ross

00:18:50,590 --> 00:18:54,929
Orion and other open source projects is

00:18:52,269 --> 00:18:57,070
a test driven development right so

00:18:54,929 --> 00:18:58,029
creating the test environment before you

00:18:57,070 --> 00:18:59,500
actually create the code and then

00:18:58,029 --> 00:19:02,289
develop the code so that it will

00:18:59,500 --> 00:19:04,450
actually passed your tests and then not

00:19:02,289 --> 00:19:06,039
backwards not you know create some blob

00:19:04,450 --> 00:19:08,470
of colon and try to figure others will

00:19:06,039 --> 00:19:11,470
build test for it but it depends right

00:19:08,470 --> 00:19:13,240
it depends on your environment you know

00:19:11,470 --> 00:19:16,840
I understand that a university lab may

00:19:13,240 --> 00:19:19,899
not have the same goals then we as a

00:19:16,840 --> 00:19:21,789
company and then something the last

00:19:19,899 --> 00:19:23,529
thing is obviously static code analysis

00:19:21,789 --> 00:19:26,260
and this is something I presented today

00:19:23,529 --> 00:19:31,870
as a tool that would that could help us

00:19:26,260 --> 00:19:32,650
in the future so just briefly some some

00:19:31,870 --> 00:19:34,810
final remarks

00:19:32,650 --> 00:19:37,270
I think what we should do as a

00:19:34,810 --> 00:19:39,280
communities we should promote a high

00:19:37,270 --> 00:19:41,170
quality software development so if

00:19:39,280 --> 00:19:43,120
somebody goes to Ross they should feel

00:19:41,170 --> 00:19:45,310
that we're doing good stuff they should

00:19:43,120 --> 00:19:48,130
you know immediately see it and know

00:19:45,310 --> 00:19:50,560
that our code is great and the way so we

00:19:48,130 --> 00:19:52,720
can do that and I'm sure there's many

00:19:50,560 --> 00:19:54,610
more as as I mentioned the best

00:19:52,720 --> 00:19:57,010
practices how to develop staff code

00:19:54,610 --> 00:20:00,370
standards transparent metrics as I

00:19:57,010 --> 00:20:04,630
showed on wiki but maybe also incentives

00:20:00,370 --> 00:20:08,170
right so Melanie showed this nice

00:20:04,630 --> 00:20:10,060
highlighted search results that's that's

00:20:08,170 --> 00:20:11,590
a great way to incentivize having good

00:20:10,060 --> 00:20:13,810
cold out there also may be like

00:20:11,590 --> 00:20:15,820
certificates and bachelors like the I

00:20:13,810 --> 00:20:18,400
don't know like maybe Ross industrial

00:20:15,820 --> 00:20:25,090
approved code package or or something

00:20:18,400 --> 00:20:28,030
like that also as I mentioned making use

00:20:25,090 --> 00:20:30,070
of automated tools like I don't want to

00:20:28,030 --> 00:20:31,390
sit there and you know measure measure

00:20:30,070 --> 00:20:32,830
the code quality all the time I think

00:20:31,390 --> 00:20:34,450
there should be an automated system and

00:20:32,830 --> 00:20:37,060
we have a lot of stuff in place already

00:20:34,450 --> 00:20:41,020
for that and I don't want to repeat that

00:20:37,060 --> 00:20:42,670
again and lastly i think i think

00:20:41,020 --> 00:20:44,530
something that's very important is also

00:20:42,670 --> 00:20:46,300
we don't want to discourage anybody so

00:20:44,530 --> 00:20:48,040
even if I you know talk about you know

00:20:46,300 --> 00:20:50,500
we should have to raise the bar and we

00:20:48,040 --> 00:20:53,020
create higher code quality I think wild

00:20:50,500 --> 00:20:55,420
code is better than no code so i think

00:20:53,020 --> 00:20:57,010
that's it I just want to briefly mention

00:20:55,420 --> 00:21:00,370
the tools that we've used from

00:20:57,010 --> 00:21:03,240
programming research QA c++ and cure

00:21:00,370 --> 00:21:06,490
verify our two tools use the raw spooky

00:21:03,240 --> 00:21:08,410
to for the integration and lastly some

00:21:06,490 --> 00:21:11,080
some acknowledgement acknowledgments for

00:21:08,410 --> 00:21:15,180
programming research to be so kind to

00:21:11,080 --> 00:21:15,180
give us the tools thank

00:21:18,570 --> 00:21:23,880
so the question was that they are a

00:21:21,809 --> 00:21:26,389
number of packages which seem to be

00:21:23,880 --> 00:21:29,429
abandoned and not maintained anymore and

00:21:26,389 --> 00:21:32,880
the question is if there's any thoughts

00:21:29,429 --> 00:21:34,380
on how to create metrics for those codes

00:21:32,880 --> 00:21:36,299
or make them make those packages more

00:21:34,380 --> 00:21:38,940
transparent to the system and I think

00:21:36,299 --> 00:21:41,250
the answer is I think we already have

00:21:38,940 --> 00:21:43,289
lots of tools in place for this like the

00:21:41,250 --> 00:21:45,809
for example you know all the subversion

00:21:43,289 --> 00:21:47,220
systems or source code systems they tell

00:21:45,809 --> 00:21:49,169
us all this information you know how

00:21:47,220 --> 00:21:51,240
many commits there are how many people

00:21:49,169 --> 00:21:53,610
download stuff and so on I think we need

00:21:51,240 --> 00:21:56,009
to aggregate it and the wiki i think is

00:21:53,610 --> 00:21:58,110
a great place for that we can probably

00:21:56,009 --> 00:22:02,009
very easily add some more raw stock

00:21:58,110 --> 00:22:03,720
drops or wiki macros to to identify

00:22:02,009 --> 00:22:06,139
those and to make this more transparent

00:22:03,720 --> 00:22:06,139

YouTube URL: https://www.youtube.com/watch?v=FyUzJpldm-M


