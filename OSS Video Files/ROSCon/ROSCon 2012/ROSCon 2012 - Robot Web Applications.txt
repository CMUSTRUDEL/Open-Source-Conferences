Title: ROSCon 2012 - Robot Web Applications
Publication date: 2014-08-31
Playlist: ROSCon 2012
Description: 
	Benjamin Pitzer
Robot Web Applications
Captions: 
	00:00:00,170 --> 00:00:05,339
alright Sarah is unable to make it today

00:00:03,060 --> 00:00:08,940
so we have been pitzer up again he's

00:00:05,339 --> 00:00:13,920
speaking about robot web applications so

00:00:08,940 --> 00:00:18,750
code quality I'm just kidding web

00:00:13,920 --> 00:00:20,250
applications why do we need roller

00:00:18,750 --> 00:00:25,350
rapidly applications other than that

00:00:20,250 --> 00:00:27,779
it's awesome I think Ross right now is

00:00:25,350 --> 00:00:32,489
it's not very diverse so you can run it

00:00:27,779 --> 00:00:34,410
on Linux I've seen windows today maybe a

00:00:32,489 --> 00:00:36,510
little bit of mac we saw Android

00:00:34,410 --> 00:00:39,300
yesterday but I think there's there's a

00:00:36,510 --> 00:00:41,850
lot more out there and the web is

00:00:39,300 --> 00:00:43,079
actually sort of you know HTML and the

00:00:41,850 --> 00:00:45,090
web is sort of like a unifying factor

00:00:43,079 --> 00:00:49,289
and this is why we what we looked into

00:00:45,090 --> 00:00:51,629
this this use case web applications have

00:00:49,289 --> 00:00:52,770
the unique advantage if they run in the

00:00:51,629 --> 00:00:54,360
browser you don't need to install

00:00:52,770 --> 00:00:57,570
anything all right so just open your

00:00:54,360 --> 00:01:04,140
browser go to a web page and you control

00:00:57,570 --> 00:01:05,519
your robot and also taps into a much

00:01:04,140 --> 00:01:08,490
larger ecosystem that we're dealing with

00:01:05,519 --> 00:01:11,159
right now right now all you guys that

00:01:08,490 --> 00:01:12,240
are here well you as a roboticist right

00:01:11,159 --> 00:01:14,189
so we have a form of background in

00:01:12,240 --> 00:01:16,979
robotics you know how to deal with

00:01:14,189 --> 00:01:19,140
hardware and and you know maybe didn't

00:01:16,979 --> 00:01:21,210
deal with linux and all those stuff but

00:01:19,140 --> 00:01:23,340
kids at school these days their own

00:01:21,210 --> 00:01:28,049
JavaScript as a program language or Java

00:01:23,340 --> 00:01:30,240
right so you know how come web

00:01:28,049 --> 00:01:33,299
applications are otherwise you access

00:01:30,240 --> 00:01:40,770
this you know whole different types of

00:01:33,299 --> 00:01:42,420
people just as a brief history of of

00:01:40,770 --> 00:01:45,299
what's been going on in this in this

00:01:42,420 --> 00:01:47,490
area so we have seen a very cool talk

00:01:45,299 --> 00:01:50,130
about Ross Java which is a native

00:01:47,490 --> 00:01:53,579
implementation of Ross in Java and it

00:01:50,130 --> 00:01:56,399
brings Ross to to android phones there's

00:01:53,579 --> 00:01:59,340
a project called Ross cereal that many

00:01:56,399 --> 00:02:02,070
of you may know that allows to run Ross

00:01:59,340 --> 00:02:03,630
on arduino boards for example and you

00:02:02,070 --> 00:02:06,540
know create a point-to-point connection

00:02:03,630 --> 00:02:09,300
to from those boards to like a real real

00:02:06,540 --> 00:02:12,450
Ross communication system something

00:02:09,300 --> 00:02:13,560
similar is ross bridge and this is

00:02:12,450 --> 00:02:17,040
something that we also use

00:02:13,560 --> 00:02:19,770
using our project that also allows to

00:02:17,040 --> 00:02:21,750
create a very thin layer of faux

00:02:19,770 --> 00:02:24,680
communication where you can basically

00:02:21,750 --> 00:02:26,910
use any any other system to connect Ross

00:02:24,680 --> 00:02:29,010
without implementing a whole

00:02:26,910 --> 00:02:34,380
communication layer like Ross cpp or a

00:02:29,010 --> 00:02:35,970
spy and then on the website on the

00:02:34,380 --> 00:02:38,670
website of things there's also web UI

00:02:35,970 --> 00:02:42,930
which is a project start by Willow

00:02:38,670 --> 00:02:45,569
Garage which allows to to create and

00:02:42,930 --> 00:02:48,959
launch apps for the pr2 through website

00:02:45,569 --> 00:02:51,360
and we ourselves about two years ago

00:02:48,959 --> 00:02:53,580
started the remote lab project and our

00:02:51,360 --> 00:02:56,819
goal was to to get more people involved

00:02:53,580 --> 00:02:59,160
using our PR 2 and the way to go was to

00:02:56,819 --> 00:03:00,920
create a web interface for people so

00:02:59,160 --> 00:03:03,540
that they can use our robot in our lab

00:03:00,920 --> 00:03:05,819
remotely and what I'm going to talk

00:03:03,540 --> 00:03:07,470
about today is basically an evolvement

00:03:05,819 --> 00:03:11,250
of this remote lab project and

00:03:07,470 --> 00:03:14,940
specifically the yeah the the web

00:03:11,250 --> 00:03:16,470
application aspect of us so if you if

00:03:14,940 --> 00:03:19,109
you look at the infrastructure what we

00:03:16,470 --> 00:03:21,690
need to bring robots to the web on the

00:03:19,109 --> 00:03:23,700
left side there's basically what you

00:03:21,690 --> 00:03:25,650
have now right now and the Ross

00:03:23,700 --> 00:03:28,410
ecosystem so we have some sort of robot

00:03:25,650 --> 00:03:31,350
hardware and this big computational

00:03:28,410 --> 00:03:34,950
graph on Ross nodes which are drivers

00:03:31,350 --> 00:03:38,400
and algorithms and all those tools but

00:03:34,950 --> 00:03:39,780
those like those communication layers or

00:03:38,400 --> 00:03:42,230
those communication systems in between

00:03:39,780 --> 00:03:43,950
those nodes they're not really made for

00:03:42,230 --> 00:03:46,350
communications through the internet or

00:03:43,950 --> 00:03:49,230
even to be able to plug into like a

00:03:46,350 --> 00:03:52,470
browser and in that sense so that's why

00:03:49,230 --> 00:03:55,829
we had to build this bridge system which

00:03:52,470 --> 00:03:57,030
actually allowed us to funnel all those

00:03:55,829 --> 00:04:00,840
different communication streams from

00:03:57,030 --> 00:04:03,989
Ross into a single very thin serialized

00:04:00,840 --> 00:04:07,049
communication that can also deal with

00:04:03,989 --> 00:04:09,180
all the low bandwidth and glue late high

00:04:07,049 --> 00:04:11,940
latency situations that we have through

00:04:09,180 --> 00:04:16,079
the internet and then on the remote

00:04:11,940 --> 00:04:17,600
client side we had to build some

00:04:16,079 --> 00:04:19,950
infrastructure that allowed us to

00:04:17,600 --> 00:04:22,200
unravel what comes through this ross

00:04:19,950 --> 00:04:24,510
bridge stream and also that allowed us

00:04:22,200 --> 00:04:26,940
to program ross in a way that we used to

00:04:24,510 --> 00:04:29,640
at least we are used to as water

00:04:26,940 --> 00:04:31,380
assists in Python or C++ but once you

00:04:29,640 --> 00:04:33,390
have that going you can actually use a

00:04:31,380 --> 00:04:36,060
lot of tools that are already out there

00:04:33,390 --> 00:04:39,450
for for web programming to be two gu

00:04:36,060 --> 00:04:41,910
ease using WebGL which I will show in a

00:04:39,450 --> 00:04:46,140
minute and also things like HTML and all

00:04:41,910 --> 00:04:49,380
this crazy web libraries so let's talk

00:04:46,140 --> 00:04:52,260
code a little bit how can we create a

00:04:49,380 --> 00:04:55,830
connection to Ross through through a web

00:04:52,260 --> 00:04:59,370
browser so this assumes a little bit

00:04:55,830 --> 00:05:02,190
that I've seen a web page so here's a

00:04:59,370 --> 00:05:04,020
very simple script in JavaScript that

00:05:02,190 --> 00:05:06,810
would be embedded into a website that

00:05:04,020 --> 00:05:10,470
actually creates a connection to to Ross

00:05:06,810 --> 00:05:12,300
and it's really just actually just one

00:05:10,470 --> 00:05:14,760
line of code right so you have create a

00:05:12,300 --> 00:05:17,940
new note that node connects in this case

00:05:14,760 --> 00:05:21,150
to a local host which is so there's a

00:05:17,940 --> 00:05:24,150
web rosbridge running on the low closed

00:05:21,150 --> 00:05:27,720
system then and since javascript is

00:05:24,150 --> 00:05:29,550
inherently callback based we have to

00:05:27,720 --> 00:05:30,930
create or we have to register a call

00:05:29,550 --> 00:05:31,800
back when this node actually registers

00:05:30,930 --> 00:05:34,260
and when the connection is established

00:05:31,800 --> 00:05:37,020
and then once you have that you can do

00:05:34,260 --> 00:05:38,370
fun stuff with it right so the first

00:05:37,020 --> 00:05:40,380
thing that we are going to do is

00:05:38,370 --> 00:05:44,490
obviously publish publishing and

00:05:40,380 --> 00:05:47,880
subscriber messages and this works very

00:05:44,490 --> 00:05:51,180
similar to to Ross CPP so here in this

00:05:47,880 --> 00:05:52,620
case you have an interval what that

00:05:51,180 --> 00:05:56,340
means javascript is basically that this

00:05:52,620 --> 00:05:58,950
function here gets called every 1,000

00:05:56,340 --> 00:06:01,140
milliseconds every second you get a

00:05:58,950 --> 00:06:05,940
publish event and just published the

00:06:01,140 --> 00:06:08,400
time to a to a string and the publisher

00:06:05,940 --> 00:06:10,919
looks looks also very similar and the 22

00:06:08,400 --> 00:06:15,030
rasa TV or a spy the difference here is

00:06:10,919 --> 00:06:18,660
that you in JavaScript you don't have to

00:06:15,030 --> 00:06:21,360
explicitly have types for for us

00:06:18,660 --> 00:06:23,040
messages so you just pass a string what

00:06:21,360 --> 00:06:25,470
the type is supposed to be and you

00:06:23,040 --> 00:06:29,340
create a JSON object that is sort of

00:06:25,470 --> 00:06:32,310
arranged in the way that that this type

00:06:29,340 --> 00:06:34,650
is in Ross and then ross bridge takes

00:06:32,310 --> 00:06:36,270
care of the rest so when this data comes

00:06:34,650 --> 00:06:38,460
to rosbridge it gets unpacked and put

00:06:36,270 --> 00:06:39,600
into the right message and send down the

00:06:38,460 --> 00:06:42,090
pipe to

00:06:39,600 --> 00:06:44,160
to the rest of the Ross world and

00:06:42,090 --> 00:06:46,590
similar the subscriber so here we just

00:06:44,160 --> 00:06:49,650
subscribe to the same message type again

00:06:46,590 --> 00:06:53,010
just to see to see if it works so we

00:06:49,650 --> 00:06:56,700
assume the string object and then we we

00:06:53,010 --> 00:06:58,200
put it out and so here's here's how it

00:06:56,700 --> 00:07:00,030
looks like the simple code that it

00:06:58,200 --> 00:07:10,620
showed so you connect the ross bridge

00:07:00,030 --> 00:07:12,420
and a we receive it's time so the next

00:07:10,620 --> 00:07:14,960
thing that they want to do is actually

00:07:12,420 --> 00:07:18,870
controlling robots through the web and

00:07:14,960 --> 00:07:23,010
use again a very very simple example how

00:07:18,870 --> 00:07:24,800
to do that here we just use simple

00:07:23,010 --> 00:07:28,440
buttons and from those buttons we get

00:07:24,800 --> 00:07:30,600
some sort of like key key message and

00:07:28,440 --> 00:07:35,030
what we construct as this JSON object

00:07:30,600 --> 00:07:37,680
again up here and it contains the

00:07:35,030 --> 00:07:39,690
velocity information so up and down we

00:07:37,680 --> 00:07:41,580
send a linear velocity and left and

00:07:39,690 --> 00:07:45,030
right we send a rotational velocity and

00:07:41,580 --> 00:07:47,940
once again we just put that into this

00:07:45,030 --> 00:07:50,640
one single line of line of code and our

00:07:47,940 --> 00:07:53,570
web browser now publishes command

00:07:50,640 --> 00:07:56,730
velocities in this case to the turtles m

00:07:53,570 --> 00:08:00,840
and here's how this looks like here this

00:07:56,730 --> 00:08:04,620
system actually runs on an iPad and it's

00:08:00,840 --> 00:08:06,930
connected to our computer and total sim

00:08:04,620 --> 00:08:09,450
and the interesting part about this is

00:08:06,930 --> 00:08:12,630
also here took the turtle sin is also a

00:08:09,450 --> 00:08:14,040
web implementation so in this case even

00:08:12,630 --> 00:08:16,950
though there's an iPad and computer

00:08:14,040 --> 00:08:19,590
there's actually no no actual Ross node

00:08:16,950 --> 00:08:21,210
running in C++ or Python everything's

00:08:19,590 --> 00:08:23,100
running through web browser so here we

00:08:21,210 --> 00:08:27,320
have one browser connecting to another

00:08:23,100 --> 00:08:27,320
browser which i think is quite exciting

00:08:28,280 --> 00:08:33,719
so then we also want to have more

00:08:31,260 --> 00:08:36,510
complex behavior in the browser and then

00:08:33,719 --> 00:08:39,330
action loop is the next thing in line to

00:08:36,510 --> 00:08:42,000
to get this and we also implemented a

00:08:39,330 --> 00:08:45,480
version of action lip in JavaScript to

00:08:42,000 --> 00:08:47,310
allow that and again so it's quite

00:08:45,480 --> 00:08:50,339
similar to what you're used to in Python

00:08:47,310 --> 00:08:51,420
or C++ so you create an action client

00:08:50,339 --> 00:08:53,940
object you

00:08:51,420 --> 00:08:56,130
you have the same function place call

00:08:53,940 --> 00:09:00,120
back behavior so you wait for the server

00:08:56,130 --> 00:09:02,220
to come up you create a goal you send

00:09:00,120 --> 00:09:04,170
the goal to the action action server and

00:09:02,220 --> 00:09:06,899
then you wait for the results to come

00:09:04,170 --> 00:09:09,930
and when they come in this case they get

00:09:06,899 --> 00:09:13,199
printed out and this is basically the

00:09:09,930 --> 00:09:15,449
same implementation of the the Fibonacci

00:09:13,199 --> 00:09:22,860
tutorial that are also on the the Ross

00:09:15,449 --> 00:09:27,209
wiki available in C++ and Python and

00:09:22,860 --> 00:09:29,459
here again kind of boring but this is is

00:09:27,209 --> 00:09:32,579
what happens so the connection gets gets

00:09:29,459 --> 00:09:35,190
established here in this case the action

00:09:32,579 --> 00:09:38,760
server actually runs runs on a desktop

00:09:35,190 --> 00:09:40,230
in Python so we have browser connecting

00:09:38,760 --> 00:09:48,360
connecting to a desktop here in this

00:09:40,230 --> 00:09:50,850
case so once we have established sort of

00:09:48,360 --> 00:09:52,050
like this low level of of Ross we want

00:09:50,850 --> 00:09:54,959
to move on to more high-level

00:09:52,050 --> 00:09:57,209
functionality and there's two two things

00:09:54,959 --> 00:09:59,339
that we want to do with our robots one

00:09:57,209 --> 00:10:01,079
is want to visualize them and we want to

00:09:59,339 --> 00:10:02,339
control them in a much more

00:10:01,079 --> 00:10:06,480
sophisticated way than just sending

00:10:02,339 --> 00:10:09,440
simple keystroke keystroke events so one

00:10:06,480 --> 00:10:13,320
thing that we had to implement is ADF

00:10:09,440 --> 00:10:15,660
implementation this is not just a

00:10:13,320 --> 00:10:18,690
warning here is not a full-blown TF that

00:10:15,660 --> 00:10:20,220
you're used to in in C++ it's sort of a

00:10:18,690 --> 00:10:23,490
stripped-down version it cannot do time

00:10:20,220 --> 00:10:25,470
travel and so on so it's it's much more

00:10:23,490 --> 00:10:27,810
simplistic but it does the job it can

00:10:25,470 --> 00:10:31,190
subscribe to the TF topics it gets all

00:10:27,810 --> 00:10:34,649
of them and yeah you can do things like

00:10:31,190 --> 00:10:37,319
visualization and to make wizard ization

00:10:34,649 --> 00:10:39,510
super simple we also created a bunch of

00:10:37,319 --> 00:10:41,730
truth to that so one is the what we call

00:10:39,510 --> 00:10:46,260
a visitation manager which basically

00:10:41,730 --> 00:10:49,050
creates entire environment like oh grow

00:10:46,260 --> 00:10:52,220
uses for arvest and you can just drop in

00:10:49,050 --> 00:10:55,290
different topics different sensor nodes

00:10:52,220 --> 00:10:58,110
and visualize them in the web browser

00:10:55,290 --> 00:11:00,360
and that's what you see here so once the

00:10:58,110 --> 00:11:02,550
notice established first we need to

00:11:00,360 --> 00:11:04,889
create a transform listener then we just

00:11:02,550 --> 00:11:07,589
simply create a visualization manager

00:11:04,889 --> 00:11:10,019
that thing actually hooks up to one of

00:11:07,589 --> 00:11:13,170
the new html5 concepts which is called a

00:11:10,019 --> 00:11:15,749
canvas so it's a generic field in HTML

00:11:13,170 --> 00:11:18,509
that you can draw on and then we

00:11:15,749 --> 00:11:20,579
initialize initialize that with as a

00:11:18,509 --> 00:11:22,829
manager with our node and the TF

00:11:20,579 --> 00:11:24,329
listener that we just created and then

00:11:22,829 --> 00:11:27,720
in this simple example we just add

00:11:24,329 --> 00:11:29,699
adequate to visualize and the grid is

00:11:27,720 --> 00:11:33,119
supposed to be centered the autumn

00:11:29,699 --> 00:11:35,339
combined topic and it's yeah has title

00:11:33,119 --> 00:11:37,980
the size of 10 that's basically what

00:11:35,339 --> 00:11:40,049
this is doing so it's just a few lines

00:11:37,980 --> 00:11:43,739
of code and the output is this so we

00:11:40,049 --> 00:11:46,949
have actually three rendering in the web

00:11:43,739 --> 00:11:49,619
browser that that uses WebGL so it's

00:11:46,949 --> 00:11:57,809
hardware accelerated rendering and we

00:11:49,619 --> 00:11:59,489
can visualize 3d data and the same way

00:11:57,809 --> 00:12:01,889
we can add grits we can also a mess i

00:11:59,489 --> 00:12:04,649
mentioned before other cool stuff for

00:12:01,889 --> 00:12:07,529
example a robot model and here we use

00:12:04,649 --> 00:12:10,290
the exact same techniques that that ross

00:12:07,529 --> 00:12:13,919
also uses to describe robots so we use

00:12:10,290 --> 00:12:19,139
the the UDF as a resource for the robot

00:12:13,919 --> 00:12:21,209
model and the UDF SP effort in the talk

00:12:19,139 --> 00:12:24,149
also contains visualization information

00:12:21,209 --> 00:12:25,889
so it contains the meshes and all the

00:12:24,149 --> 00:12:29,639
arrangement of netizens and the textures

00:12:25,889 --> 00:12:31,769
and so on and our web visualization can

00:12:29,639 --> 00:12:33,839
use all of this this resources to

00:12:31,769 --> 00:12:37,829
actually visualize this in the browser

00:12:33,839 --> 00:12:39,480
as well the same way arvest can do and

00:12:37,829 --> 00:12:43,019
the second thing that we add here is a

00:12:39,480 --> 00:12:48,499
point cloud too so just from the RGB d

00:12:43,019 --> 00:12:48,499
camera the point cloud stream

00:12:51,100 --> 00:12:57,730
and so you can see see that so here the

00:12:54,940 --> 00:13:01,120
shuttlepod rendering so we see the robot

00:12:57,730 --> 00:13:06,070
model send it on the grid as well as the

00:13:01,120 --> 00:13:09,880
point cloud so as you can already see

00:13:06,070 --> 00:13:13,120
here since it's a web web environment we

00:13:09,880 --> 00:13:16,330
cannot expect a stream point cloud data

00:13:13,120 --> 00:13:18,910
with 30 frames per second in full

00:13:16,330 --> 00:13:21,040
resolution so we have to scale back a

00:13:18,910 --> 00:13:23,190
little bit for the web so technique that

00:13:21,040 --> 00:13:27,490
we use Geo's also described today we

00:13:23,190 --> 00:13:29,890
compress the punch out or we sample the

00:13:27,490 --> 00:13:32,860
point cloud so it's not as dense anymore

00:13:29,890 --> 00:13:39,240
using the octree filter and we also

00:13:32,860 --> 00:13:39,240
publish it in yeah smaller frequencies

00:13:39,690 --> 00:13:45,810
so lastly what we also want to do here

00:13:43,150 --> 00:13:48,400
is control the robot and one really cool

00:13:45,810 --> 00:13:51,010
tool for doing that and it hasn't been

00:13:48,400 --> 00:13:54,100
mentioned well here is interactive

00:13:51,010 --> 00:13:58,890
markers so we have seen markers in orvis

00:13:54,100 --> 00:14:02,470
probably for just visualizing points and

00:13:58,890 --> 00:14:05,440
yeah just just any arbitrary marker or

00:14:02,470 --> 00:14:08,410
shape in harvest and interactive Marcus

00:14:05,440 --> 00:14:09,820
actually adds interactive capabilities

00:14:08,410 --> 00:14:12,670
to those markers so you can actually

00:14:09,820 --> 00:14:15,940
move them around and those those actions

00:14:12,670 --> 00:14:17,980
trigger new ross topics that gets sent

00:14:15,940 --> 00:14:20,070
to a server and then you can actually

00:14:17,980 --> 00:14:23,500
use those markers to control your robot

00:14:20,070 --> 00:14:26,860
and so in this case the the turbot

00:14:23,500 --> 00:14:29,080
actually uses has a marker server that

00:14:26,860 --> 00:14:30,910
allows you to to steer and control the

00:14:29,080 --> 00:14:34,440
turtlebot and we can just drop this in

00:14:30,910 --> 00:14:36,310
here into a web visualization and and

00:14:34,440 --> 00:14:40,090
drive the robot around using those

00:14:36,310 --> 00:14:42,520
markers so you can see those arrows so

00:14:40,090 --> 00:14:45,400
we can steer forward backward and then

00:14:42,520 --> 00:14:48,820
this fancy ring you can you can turn

00:14:45,400 --> 00:14:54,340
basically I see it seagoing now and that

00:14:48,820 --> 00:14:55,840
that turns turns the robot so something

00:14:54,340 --> 00:14:58,270
that's really really cool about those

00:14:55,840 --> 00:15:02,290
interactive markers is that once you

00:14:58,270 --> 00:15:04,060
implement the API and the infrastructure

00:15:02,290 --> 00:15:06,070
to visualize and interact

00:15:04,060 --> 00:15:07,540
with them you have you have sort of

00:15:06,070 --> 00:15:09,880
created like a generic way of

00:15:07,540 --> 00:15:13,750
interacting with robots so the same way

00:15:09,880 --> 00:15:15,760
this turtle what interactive mark IV

00:15:13,750 --> 00:15:18,790
sedation works the same way we can also

00:15:15,760 --> 00:15:19,990
interact with a po2 so no line we don't

00:15:18,790 --> 00:15:22,600
need to add anything to our

00:15:19,990 --> 00:15:24,490
infrastructure to enable this or you

00:15:22,600 --> 00:15:27,250
know to any other interactive market app

00:15:24,490 --> 00:15:31,780
location which which is really really

00:15:27,250 --> 00:15:34,810
exciting so putting this all together we

00:15:31,780 --> 00:15:36,460
can really really easily create very

00:15:34,810 --> 00:15:38,950
complex web applications that allow us

00:15:36,460 --> 00:15:41,560
to interact with root of the robot to

00:15:38,950 --> 00:15:44,710
visualize certain things you can also

00:15:41,560 --> 00:15:47,550
see that we plucked in a camera stream a

00:15:44,710 --> 00:15:49,600
live camera stream from the camera and

00:15:47,550 --> 00:15:51,940
what's not not really showing you right

00:15:49,600 --> 00:15:54,870
now is we can also plug all the stuff

00:15:51,940 --> 00:15:57,580
into a very nice GUI we are not really

00:15:54,870 --> 00:15:59,230
creative designers or there are

00:15:57,580 --> 00:16:01,810
certainly people that can can do that

00:15:59,230 --> 00:16:05,670
and I've seen already very amazing

00:16:01,810 --> 00:16:10,920
things what people do with this stuff

00:16:05,670 --> 00:16:14,020
just as a note web is not a local

00:16:10,920 --> 00:16:18,280
connection we've heard this before there

00:16:14,020 --> 00:16:19,870
are certain limitations to the web and

00:16:18,280 --> 00:16:22,870
we have to we have to really make sure

00:16:19,870 --> 00:16:25,900
that we address those once we one thing

00:16:22,870 --> 00:16:29,350
that we noticed and we've also heard

00:16:25,900 --> 00:16:31,060
that before from Tully is that there's

00:16:29,350 --> 00:16:32,860
actually quite some overhead in TF and

00:16:31,060 --> 00:16:34,270
it creates quite and bandwidth you'll

00:16:32,860 --> 00:16:37,210
never notice that if you just look on a

00:16:34,270 --> 00:16:39,730
local lan connection but if you go to

00:16:37,210 --> 00:16:41,710
the web it really hurts and so on the

00:16:39,730 --> 00:16:43,720
right on top image here you see actually

00:16:41,710 --> 00:16:45,250
this is repped you can't really read it

00:16:43,720 --> 00:16:47,500
but that's basically the traffic

00:16:45,250 --> 00:16:52,270
generated by TF in in kilobytes per

00:16:47,500 --> 00:16:54,730
second and this is quite a lot and you

00:16:52,270 --> 00:16:57,700
cannot just pump this all over the over

00:16:54,730 --> 00:17:01,240
the web so what we created is little

00:16:57,700 --> 00:17:04,570
helpful packages in this case I call it

00:17:01,240 --> 00:17:07,480
a TF manager that basically listens to

00:17:04,570 --> 00:17:10,240
all the TF messages and it publishes

00:17:07,480 --> 00:17:12,820
only changes in the TF system and that

00:17:10,240 --> 00:17:14,980
really reduces the bandwidth for our web

00:17:12,820 --> 00:17:16,680
application and you can see that here so

00:17:14,980 --> 00:17:19,440
here actually

00:17:16,680 --> 00:17:21,720
done with the pr2 so only those spikes

00:17:19,440 --> 00:17:23,460
of the TF message only a cure and

00:17:21,720 --> 00:17:26,250
actually like move an arm or a sudden

00:17:23,460 --> 00:17:28,530
moving the base around and that really

00:17:26,250 --> 00:17:30,590
greatly reduced or our bandwidth another

00:17:28,530 --> 00:17:35,630
thing that I mentioned before was the

00:17:30,590 --> 00:17:39,720
pcl filter that really helped to get the

00:17:35,630 --> 00:17:43,590
bandwidth down so just some just some

00:17:39,720 --> 00:17:45,630
takeaways we all love Ross and we all

00:17:43,590 --> 00:17:47,130
have robots they are awesome but robots

00:17:45,630 --> 00:17:51,180
and the web together that's really

00:17:47,130 --> 00:17:53,160
awesome so this infrastructure ross

00:17:51,180 --> 00:17:55,710
gesture just mentioned really allows to

00:17:53,160 --> 00:17:58,620
really rapidly prototype systems to

00:17:55,710 --> 00:18:02,130
control robots from any system that

00:17:58,620 --> 00:18:03,450
supports web browsers and I mean there's

00:18:02,130 --> 00:18:04,680
some caveats to it like some of the

00:18:03,450 --> 00:18:06,900
technologies that I've shown like this

00:18:04,680 --> 00:18:09,480
WebGL is not supported on all of the

00:18:06,900 --> 00:18:13,560
browsers yet but it's just a matter of

00:18:09,480 --> 00:18:14,970
time also programming robots and

00:18:13,560 --> 00:18:16,830
javascript is super easy you have seen

00:18:14,970 --> 00:18:18,900
it it's just a few lines of code and

00:18:16,830 --> 00:18:21,780
you're up there is very very small

00:18:18,900 --> 00:18:23,160
boilerplate that you need to do you

00:18:21,780 --> 00:18:25,980
don't need to compile anything you just

00:18:23,160 --> 00:18:28,410
fire up a editor or and create a web

00:18:25,980 --> 00:18:30,060
page and you're done right and you don't

00:18:28,410 --> 00:18:32,100
need to a specific operating system to

00:18:30,060 --> 00:18:33,990
do that you can do that from from

00:18:32,100 --> 00:18:36,120
anywhere in any system that that you

00:18:33,990 --> 00:18:37,830
want to do it and it's also very easy to

00:18:36,120 --> 00:18:40,800
deploy right so you just put drop your

00:18:37,830 --> 00:18:42,180
web web page somewhere and you can

00:18:40,800 --> 00:18:45,900
access it from your iPhone your computer

00:18:42,180 --> 00:18:48,240
and any other system and just as a

00:18:45,900 --> 00:18:49,530
takeaway again sending large data

00:18:48,240 --> 00:18:52,770
streams to the browser is a very bad

00:18:49,530 --> 00:18:55,080
idea and so if you want to develop

00:18:52,770 --> 00:18:56,790
anything in this area we make sure that

00:18:55,080 --> 00:19:01,020
you you know what you're sending to your

00:18:56,790 --> 00:19:02,430
browser that's pretty much it I'm happy

00:19:01,020 --> 00:19:05,460
to take questions here's just a list of

00:19:02,430 --> 00:19:08,190
the contributors to our project and also

00:19:05,460 --> 00:19:09,420
a link to our web page we're also all

00:19:08,190 --> 00:19:11,910
the tutorials that our show today you

00:19:09,420 --> 00:19:13,970
can look them up on this web page thank

00:19:11,910 --> 00:19:13,970
you

00:19:26,510 --> 00:19:30,870
so the question was in the example where

00:19:28,980 --> 00:19:33,060
there was the iPad and the computer the

00:19:30,870 --> 00:19:35,730
turtles in computer there was a Roscoe

00:19:33,060 --> 00:19:37,560
running yes so the raw score was running

00:19:35,730 --> 00:19:39,030
on the desktop computer so there was two

00:19:37,560 --> 00:19:40,980
things running on the desktop one was

00:19:39,030 --> 00:19:44,690
raw score and the other one was ross

00:19:40,980 --> 00:19:44,690
bridge to create the connection

00:20:11,779 --> 00:20:18,369
so the question was what GL support is

00:20:15,769 --> 00:20:20,960
still pretty sparse on systems is their

00:20:18,369 --> 00:20:25,940
support for just to the native 2d

00:20:20,960 --> 00:20:27,469
rendering so the answer is no right now

00:20:25,940 --> 00:20:29,149
we don't have any any other way of

00:20:27,469 --> 00:20:30,559
rendering 3d graphics so the

00:20:29,149 --> 00:20:33,309
visualization manager that I showed you

00:20:30,559 --> 00:20:35,359
really relies on on WebGL right now

00:20:33,309 --> 00:20:39,499
though the the example that I showed

00:20:35,359 --> 00:20:41,059
with the yeah the ipad and the turtle

00:20:39,499 --> 00:20:42,919
sim and the turtle sim was also running

00:20:41,059 --> 00:20:44,210
and the web browser and the turtle sim

00:20:42,919 --> 00:20:46,399
in this case was not programmed in WebGL

00:20:44,210 --> 00:20:48,919
so that was just using standard canvas

00:20:46,399 --> 00:20:52,129
elements and you can do that it would

00:20:48,919 --> 00:20:55,639
just be very painful and very slow to

00:20:52,129 --> 00:20:57,499
render 3d graphics in that way so but I

00:20:55,639 --> 00:20:59,239
think I mean we have been monitoring

00:20:57,499 --> 00:21:01,700
this virtual development for quite a

00:20:59,239 --> 00:21:03,950
while now and it's getting more and more

00:21:01,700 --> 00:21:06,049
support in traction from the browser

00:21:03,950 --> 00:21:08,719
developers so I think it's just a matter

00:21:06,049 --> 00:21:12,820
of time until it gets into all the

00:21:08,719 --> 00:21:12,820
mobile devices and also all the browsers

00:21:22,930 --> 00:21:28,810
the question is is Java 3d still around

00:21:26,050 --> 00:21:31,030
and can that be used actually I don't

00:21:28,810 --> 00:21:32,380
know if it's litter still around when we

00:21:31,030 --> 00:21:34,930
started this whole project we looked

00:21:32,380 --> 00:21:36,760
into two different ways of doing the

00:21:34,930 --> 00:21:38,740
same thing that we're doing now and java

00:21:36,760 --> 00:21:41,700
3d was one of the things oh 3 d and

00:21:38,740 --> 00:21:45,640
other technologies but we didn't see

00:21:41,700 --> 00:21:48,190
real progress in that in those areas so

00:21:45,640 --> 00:21:50,580
I actually don't know i think WebGL is

00:21:48,190 --> 00:21:50,580

YouTube URL: https://www.youtube.com/watch?v=9hiUPMC-3KE


