Title: ROSCon 2012 - Keynote: ROS: Past, Present, and Future (1of2)
Publication date: 2014-08-31
Playlist: ROSCon 2012
Description: 
	Morgan Quigley
Captions: 
	00:00:00,030 --> 00:00:05,520
it's my great pleasure to introduce our

00:00:01,560 --> 00:00:07,799
first speaker of the day Morgan Quigley

00:00:05,520 --> 00:00:10,889
this is far and away my favorite picture

00:00:07,799 --> 00:00:12,330
of Morgan and you know if he's

00:00:10,889 --> 00:00:15,780
embarrassed by it he shouldn't have put

00:00:12,330 --> 00:00:19,289
it on his webpage so I don't know how

00:00:15,780 --> 00:00:22,619
many of you know Morgan he's he's a grad

00:00:19,289 --> 00:00:23,939
student at Stanford and goes way back in

00:00:22,619 --> 00:00:26,550
Ross I think it's fair to say that he's

00:00:23,939 --> 00:00:30,960
the really the grandfather Godfather of

00:00:26,550 --> 00:00:34,050
Ross and he's going to tell you a story

00:00:30,960 --> 00:00:36,630
about the history of Ross how it got

00:00:34,050 --> 00:00:38,040
started where it is now and some ideas

00:00:36,630 --> 00:00:40,170
for where it's gonna go but I thought

00:00:38,040 --> 00:00:45,090
I'd give you a little context for Morgan

00:00:40,170 --> 00:00:47,940
so I went back into the track revision

00:00:45,090 --> 00:00:51,000
logs and just pulled up some things from

00:00:47,940 --> 00:00:53,390
you know four years ago so these are

00:00:51,000 --> 00:01:00,000
some commit messages from Morgan I like

00:00:53,390 --> 00:01:02,609
codon codon codon you know Morgan likes

00:01:00,000 --> 00:01:04,470
Ruby and he was I think really

00:01:02,609 --> 00:01:06,240
disappointed that we never managed to

00:01:04,470 --> 00:01:07,830
make any of the core components in Ross

00:01:06,240 --> 00:01:11,520
in Ruby I think he would have been much

00:01:07,830 --> 00:01:13,830
happier if we'd done that and if you've

00:01:11,520 --> 00:01:16,320
if you've if you've done anything with

00:01:13,830 --> 00:01:19,170
Ross you've used Morgan's code ross cpp

00:01:16,320 --> 00:01:20,909
ross pack all those core tools from way

00:01:19,170 --> 00:01:22,500
back Morgan wrote all that stuff and if

00:01:20,909 --> 00:01:26,610
you've ever seen any of those tools

00:01:22,500 --> 00:01:27,930
respond with hooray that's Morgan that's

00:01:26,610 --> 00:01:30,079
in the code that's in the comments

00:01:27,930 --> 00:01:37,229
that's talking to you on the console so

00:01:30,079 --> 00:01:39,100
with that okay Bryan thanks for

00:01:37,229 --> 00:01:41,680
reduction thanks for setting up this

00:01:39,100 --> 00:01:43,509
meaning thanks everyone for coming I'm

00:01:41,680 --> 00:01:44,920
Morgan quickly like Byrne said I have

00:01:43,509 --> 00:01:46,900
less hair now than in that last picture

00:01:44,920 --> 00:01:49,540
unfortunately I suppose that's the way

00:01:46,900 --> 00:01:52,090
things tend to go so let's see I'm gonna

00:01:49,540 --> 00:01:53,890
talk about Ross past present future I'm

00:01:52,090 --> 00:01:55,060
still in school hopefully not for too

00:01:53,890 --> 00:01:56,740
much longer but I'm still in school

00:01:55,060 --> 00:01:58,090
this is joint work with tons of people

00:01:56,740 --> 00:02:00,399
as you can imagine on a large group

00:01:58,090 --> 00:02:03,130
project like this at Stanford Willow

00:02:00,399 --> 00:02:04,840
Garage institutions around the world I

00:02:03,130 --> 00:02:06,310
listed some of the names of kind of the

00:02:04,840 --> 00:02:07,840
early days contributors of Ross but

00:02:06,310 --> 00:02:10,149
obviously the community has exploded

00:02:07,840 --> 00:02:11,440
since then and we would love to put all

00:02:10,149 --> 00:02:12,700
the thousands of names of contributors

00:02:11,440 --> 00:02:14,650
on here but that'd be a big slide and to

00:02:12,700 --> 00:02:18,510
be squinting so let's just go with those

00:02:14,650 --> 00:02:21,130
the last is my advisor injury at Sanford

00:02:18,510 --> 00:02:22,750
okay so the outline first I'll talk just

00:02:21,130 --> 00:02:25,450
have a general overview what is going on

00:02:22,750 --> 00:02:26,580
with Ross then talk about the past kind

00:02:25,450 --> 00:02:28,450
of the early days where we came from

00:02:26,580 --> 00:02:29,470
hopefully that will serve a little bit

00:02:28,450 --> 00:02:30,880
to explain some of the kind of

00:02:29,470 --> 00:02:31,299
assumptions or things that are built on

00:02:30,880 --> 00:02:32,709
the Ross

00:02:31,299 --> 00:02:34,569
talk about the president where we're now

00:02:32,709 --> 00:02:36,190
what's going on with Ross what cool

00:02:34,569 --> 00:02:37,390
stuff is happening and then I'll turn

00:02:36,190 --> 00:02:39,190
crack pot a little bit and talk about

00:02:37,390 --> 00:02:41,739
some random ideas for the future which

00:02:39,190 --> 00:02:43,090
would be fun okay so first of all why is

00:02:41,739 --> 00:02:44,320
your about softer important I think a

00:02:43,090 --> 00:02:46,120
lot of us in this room already kind of

00:02:44,320 --> 00:02:48,459
get this but I think this is still

00:02:46,120 --> 00:02:50,620
important just to briefly overview robot

00:02:48,459 --> 00:02:54,280
hardware is currently more capable than

00:02:50,620 --> 00:02:56,230
the new robot software if you look at

00:02:54,280 --> 00:02:58,359
teleoperated robots systems they can do

00:02:56,230 --> 00:02:59,920
pretty amazing things at those pictures

00:02:58,359 --> 00:03:01,480
on the bottom there we did a demo for

00:02:59,920 --> 00:03:03,220
the DARPA arm H program that I mean

00:03:01,480 --> 00:03:05,410
we're all making low-cost robot hands

00:03:03,220 --> 00:03:07,030
and then we can run them on these DARPA

00:03:05,410 --> 00:03:08,739
has a platform with two Barrett Rams on

00:03:07,030 --> 00:03:10,810
them so we can have like a data glove

00:03:08,739 --> 00:03:12,390
and a master/slave system and you can

00:03:10,810 --> 00:03:14,350
just do ridiculous things quite easily

00:03:12,390 --> 00:03:16,600
right there I was picking up a power

00:03:14,350 --> 00:03:18,880
drill with the data glove and a master

00:03:16,600 --> 00:03:20,560
save running the Barrett you know

00:03:18,880 --> 00:03:21,730
turning the drill on and off turning

00:03:20,560 --> 00:03:23,170
flash lights on and off we're then

00:03:21,730 --> 00:03:25,570
putting batteries in the flashlights in

00:03:23,170 --> 00:03:26,980
the screen and shot picking up all sorts

00:03:25,570 --> 00:03:28,600
of tools finger gaming them up and in

00:03:26,980 --> 00:03:30,790
the grasp things that are just easy to

00:03:28,600 --> 00:03:32,709
do for people and easy to do if you have

00:03:30,790 --> 00:03:33,340
a high bandwidth tile operated system

00:03:32,709 --> 00:03:35,200
with low latency

00:03:33,340 --> 00:03:36,730
very difficult to do with software so I

00:03:35,200 --> 00:03:38,079
think that's good that's not an insult

00:03:36,730 --> 00:03:39,700
at all it's exciting it's exciting time

00:03:38,079 --> 00:03:42,489
apart and exciting time to be in the

00:03:39,700 --> 00:03:45,130
field but even with teleoperation even

00:03:42,489 --> 00:03:46,209
if we did happen to have you know tell

00:03:45,130 --> 00:03:48,040
operated systems that can ruin all the

00:03:46,209 --> 00:03:49,449
robots in the world a lot of the

00:03:48,040 --> 00:03:50,799
applications that we look to as

00:03:49,449 --> 00:03:52,310
roboticists are going to be tough to do

00:03:50,799 --> 00:03:54,590
without with

00:03:52,310 --> 00:03:56,150
to teleoperation so it's unlikely I

00:03:54,590 --> 00:03:57,410
think if we wants to do eldercare for

00:03:56,150 --> 00:03:59,569
example that we're gonna have a Gigabit

00:03:57,410 --> 00:04:01,730
Ethernet pipe to every every home in the

00:03:59,569 --> 00:04:04,010
world maybe someday but it's not

00:04:01,730 --> 00:04:05,390
imminent at least it's always same so we

00:04:04,010 --> 00:04:07,130
have communications latency problems

00:04:05,390 --> 00:04:09,140
throughput problems and then of course

00:04:07,130 --> 00:04:10,790
it's nice to be able to understand the

00:04:09,140 --> 00:04:14,050
environment enough to be intelligent and

00:04:10,790 --> 00:04:16,400
not you know hurt people hurt robots

00:04:14,050 --> 00:04:18,019
crash into things the environment to do

00:04:16,400 --> 00:04:19,519
all do all that requires some reasoning

00:04:18,019 --> 00:04:20,389
and some knowledge and understanding

00:04:19,519 --> 00:04:23,169
about what's going on in the world

00:04:20,389 --> 00:04:26,990
around you which means lots of software

00:04:23,169 --> 00:04:28,370
now next why is it hard it's hard I

00:04:26,990 --> 00:04:30,380
think because it's a huge problem and

00:04:28,370 --> 00:04:31,550
that the expertise required to make

00:04:30,380 --> 00:04:33,470
these things work and to build more

00:04:31,550 --> 00:04:36,020
systems is distributed among tons and

00:04:33,470 --> 00:04:37,610
tons of people across the world to do

00:04:36,020 --> 00:04:39,520
take all the things to work together and

00:04:37,610 --> 00:04:42,020
pies mass integration of everyone's work

00:04:39,520 --> 00:04:43,669
tying lots of systems together time lots

00:04:42,020 --> 00:04:45,500
of knowledge bases together lots of

00:04:43,669 --> 00:04:47,240
cultural issues as well as technical

00:04:45,500 --> 00:04:48,380
issues there and at the same time we're

00:04:47,240 --> 00:04:49,669
trying to integrate all these class of

00:04:48,380 --> 00:04:51,380
things we have to keep them running fast

00:04:49,669 --> 00:04:53,060
because it's a robot so we don't want to

00:04:51,380 --> 00:04:54,290
just sit there and wait for you know

00:04:53,060 --> 00:04:54,740
minutes on end while we think about what

00:04:54,290 --> 00:05:03,020
to do next

00:04:54,740 --> 00:05:05,479
it just look bad on videos okay what

00:05:03,020 --> 00:05:07,280
does Ross do so it's several things at

00:05:05,479 --> 00:05:08,570
once the term Ross I guess it can become

00:05:07,280 --> 00:05:09,650
kind of overloaded when they say oh I'm

00:05:08,570 --> 00:05:11,630
using Ross it's like whoa what are you

00:05:09,650 --> 00:05:14,090
actually using there's an it's core I'm

00:05:11,630 --> 00:05:15,710
a messaging layer there's a it sends

00:05:14,090 --> 00:05:19,490
messages from programs to other programs

00:05:15,710 --> 00:05:21,020
can I think though also was perhaps even

00:05:19,490 --> 00:05:23,750
more valuable is a set of integration

00:05:21,020 --> 00:05:25,130
conventions so over time we just as a

00:05:23,750 --> 00:05:26,240
community have started to do things kind

00:05:25,130 --> 00:05:29,380
of a certain way there's a certain

00:05:26,240 --> 00:05:32,930
message that encapsulates laser scans

00:05:29,380 --> 00:05:36,470
let's see there's also useful common

00:05:32,930 --> 00:05:37,820
tools like tools to log data tools to

00:05:36,470 --> 00:05:39,289
show things on the screen those are also

00:05:37,820 --> 00:05:40,820
valuable and sometimes when we say we're

00:05:39,289 --> 00:05:42,139
using Ross really that's what we mean is

00:05:40,820 --> 00:05:43,370
we're using these visualization tools

00:05:42,139 --> 00:05:46,430
with these particular data streaming

00:05:43,370 --> 00:05:47,930
tools there's also implementations of

00:05:46,430 --> 00:05:50,780
algorithms that we read about in papers

00:05:47,930 --> 00:05:52,370
that are now vetted and in code I would

00:05:50,780 --> 00:05:54,919
hope that we don't need if we're doing

00:05:52,370 --> 00:05:56,810
2d slam for example we can just use the

00:05:54,919 --> 00:05:57,979
grid fast slam that's that's in Rob's

00:05:56,810 --> 00:05:59,300
time we don't have to code it up again

00:05:57,979 --> 00:06:00,979
because there's a veteran implementation

00:05:59,300 --> 00:06:02,599
now that has been tested with robots all

00:06:00,979 --> 00:06:04,020
across the world we can just use it we

00:06:02,599 --> 00:06:05,370
don't have to work on it again

00:06:04,020 --> 00:06:07,139
but most importantly there's an active

00:06:05,370 --> 00:06:09,000
community there's us there's our friends

00:06:07,139 --> 00:06:10,500
on the email list who weren't here today

00:06:09,000 --> 00:06:13,590
there's people coming through the

00:06:10,500 --> 00:06:15,659
pipeline there's those of us who who

00:06:13,590 --> 00:06:19,440
work in this domain who then can help

00:06:15,659 --> 00:06:21,810
each other out next equally importantly

00:06:19,440 --> 00:06:24,750
what does girls not do we worked hard to

00:06:21,810 --> 00:06:26,099
enforce it's a habit not rather in force

00:06:24,750 --> 00:06:27,659
structure on your programs code or data

00:06:26,099 --> 00:06:29,069
that's a great thing or that's a

00:06:27,659 --> 00:06:31,229
terrible thing depending on who you ask

00:06:29,069 --> 00:06:32,490
depending on whether people like to work

00:06:31,229 --> 00:06:34,319
in formal environments or informal

00:06:32,490 --> 00:06:35,669
environments the idea we wanted to have

00:06:34,319 --> 00:06:37,440
is that that's optional and so you can

00:06:35,669 --> 00:06:39,000
kind of put your own structure there if

00:06:37,440 --> 00:06:40,409
you like lots of structure or you can

00:06:39,000 --> 00:06:41,639
just be kind of wild and crazy if you're

00:06:40,409 --> 00:06:44,360
like me and have a hard time thinking

00:06:41,639 --> 00:06:46,710
that same thing for more than 30 seconds

00:06:44,360 --> 00:06:48,210
security is not in Ross we're not

00:06:46,710 --> 00:06:49,800
screwed people who were aware of that I

00:06:48,210 --> 00:06:52,289
figured that it was better to actually

00:06:49,800 --> 00:06:54,030
not do security and say oh she'd use a

00:06:52,289 --> 00:06:56,940
VPN or whatever rather than to pretend

00:06:54,030 --> 00:06:58,469
to do security and do it wrong we don't

00:06:56,940 --> 00:07:00,780
operate in hard real-time very well

00:06:58,469 --> 00:07:01,949
that's hard to do as I'm sure they're

00:07:00,780 --> 00:07:03,930
lost people here there who are experts

00:07:01,949 --> 00:07:05,759
in hard real-time to do that well

00:07:03,930 --> 00:07:07,800
requires a lot of structure and metadata

00:07:05,759 --> 00:07:09,240
and careful planning for the framework

00:07:07,800 --> 00:07:11,789
there are others out there in the world

00:07:09,240 --> 00:07:13,949
iroko some rocker2 that they do that

00:07:11,789 --> 00:07:15,630
very well and we tend to just say Oh for

00:07:13,949 --> 00:07:17,630
hard real-time we bridge to a real Kosan

00:07:15,630 --> 00:07:19,740
and it's awesome

00:07:17,630 --> 00:07:22,590
okay so that's kind of a debrief

00:07:19,740 --> 00:07:24,080
drive-by overview next talk about kind

00:07:22,590 --> 00:07:25,860
of early days of Ross where we came from

00:07:24,080 --> 00:07:27,719
which hopefully will help to explain

00:07:25,860 --> 00:07:31,919
some assumptions and ways of doing

00:07:27,719 --> 00:07:33,270
things in the system so it kind of at

00:07:31,919 --> 00:07:34,860
least from my perspective I started to

00:07:33,270 --> 00:07:37,139
work on this stuff with a stayer project

00:07:34,860 --> 00:07:38,460
or Stanford AI robot this was a big

00:07:37,139 --> 00:07:41,310
interdisciplinary project at Stanford

00:07:38,460 --> 00:07:44,009
started in 2005 but the same same time I

00:07:41,310 --> 00:07:45,750
got to Stanford what we wanted to do in

00:07:44,009 --> 00:07:46,949
that project was to integrate lots of

00:07:45,750 --> 00:07:48,599
state-of-the-art research on the same

00:07:46,949 --> 00:07:50,159
platform so oftentimes what happens in

00:07:48,599 --> 00:07:51,779
in robotics and in other fields as well

00:07:50,159 --> 00:07:53,840
is everyone kind of works on their own

00:07:51,779 --> 00:07:56,190
piece of a large problem and then they

00:07:53,840 --> 00:07:57,810
sort of you know stay in their own silo

00:07:56,190 --> 00:07:59,279
I guess what we wanted to do instead was

00:07:57,810 --> 00:08:01,409
to force everybody no matter how much

00:07:59,279 --> 00:08:03,810
grumbling occurs to to crush all these

00:08:01,409 --> 00:08:05,039
sub projects on the same robot and the

00:08:03,810 --> 00:08:06,330
idea was that we would learn things in

00:08:05,039 --> 00:08:07,949
the process that we wouldn't learn if we

00:08:06,330 --> 00:08:10,979
were just for example only - in computer

00:08:07,949 --> 00:08:12,630
vision with a camera on our desk or if

00:08:10,979 --> 00:08:13,949
we were only doing grasping with with a

00:08:12,630 --> 00:08:15,509
robot that wasn't sensing this in time

00:08:13,949 --> 00:08:16,339
or whatever the idea was that there

00:08:15,509 --> 00:08:18,259
would be

00:08:16,339 --> 00:08:19,609
coupling between these projects that

00:08:18,259 --> 00:08:23,509
would be interesting and lead to new

00:08:19,609 --> 00:08:24,559
insights for scale we had I went that

00:08:23,509 --> 00:08:26,149
actually through the list a couple of

00:08:24,559 --> 00:08:28,309
days ago and I found the names of about

00:08:26,149 --> 00:08:30,769
a hundred people over the years several

00:08:28,309 --> 00:08:31,819
course projects working on this thing so

00:08:30,769 --> 00:08:32,899
that means you have the excitement of

00:08:31,819 --> 00:08:35,689
kind of there's a deadline into the

00:08:32,899 --> 00:08:36,769
quarter list let's go crazy parallel

00:08:35,689 --> 00:08:39,019
research threads and all the sudden

00:08:36,769 --> 00:08:40,430
mains the previous page but then two

00:08:39,019 --> 00:08:41,990
platforms that were constantly evolving

00:08:40,430 --> 00:08:44,389
those pictures are taken at one point in

00:08:41,990 --> 00:08:46,730
time usually every every month the robot

00:08:44,389 --> 00:08:48,319
look totally different which was good at

00:08:46,730 --> 00:08:52,850
first forced us to work on some stuff

00:08:48,319 --> 00:08:55,160
for software compatibility in terms of

00:08:52,850 --> 00:08:56,870
software needs we had usually two

00:08:55,160 --> 00:08:58,519
onboard computers on a laptop on each of

00:08:56,870 --> 00:09:01,750
these robots and then go into a cluster

00:08:58,519 --> 00:09:04,129
of around six off board computers

00:09:01,750 --> 00:09:06,379
sometimes up to 20 but usually about

00:09:04,129 --> 00:09:07,639
five or six the idea was then we would

00:09:06,379 --> 00:09:10,189
incorporate lots of open source

00:09:07,639 --> 00:09:12,139
libraries which of course is good and

00:09:10,189 --> 00:09:14,120
bad I know it also brings in some

00:09:12,139 --> 00:09:15,139
complexity but we wanted to have each of

00:09:14,120 --> 00:09:16,399
these sub projects whether it's the

00:09:15,139 --> 00:09:18,019
navigation system or the vision system

00:09:16,399 --> 00:09:20,180
be able to treat the others as black

00:09:18,019 --> 00:09:21,649
boxes so that you could if you're

00:09:20,180 --> 00:09:22,970
working on manipulation you could just

00:09:21,649 --> 00:09:24,199
assume that the navigation system would

00:09:22,970 --> 00:09:26,779
drive you to a location and it would

00:09:24,199 --> 00:09:28,490
work that you know as we all know I

00:09:26,779 --> 00:09:30,949
think from running on big robot projects

00:09:28,490 --> 00:09:32,839
that that is an assumption that tends to

00:09:30,949 --> 00:09:34,370
be violated oftentimes and so then it's

00:09:32,839 --> 00:09:35,470
healthy then to to force yourself to

00:09:34,370 --> 00:09:37,309
make these things work

00:09:35,470 --> 00:09:39,019
because of the large numbers of people

00:09:37,309 --> 00:09:40,699
and they're rotating crew of people

00:09:39,019 --> 00:09:42,110
working on this project we were pushed

00:09:40,699 --> 00:09:45,939
hard for easy debugging and crash

00:09:42,110 --> 00:09:45,939
tolerance and robustness in the system

00:09:46,180 --> 00:09:50,839
so we came up with this idea for these

00:09:48,680 --> 00:09:52,790
early software frameworks were

00:09:50,839 --> 00:09:54,829
essentially there's a supervisory node

00:09:52,790 --> 00:09:56,300
which sentence it to the top has a list

00:09:54,829 --> 00:09:58,430
of connections that are between

00:09:56,300 --> 00:09:59,870
components programs can launch the

00:09:58,430 --> 00:10:01,730
register with the supervisor node and

00:09:59,870 --> 00:10:03,170
the supervisor gives them a list of of

00:10:01,730 --> 00:10:04,490
peers that they should kind of watch out

00:10:03,170 --> 00:10:07,040
for and sort of ping them periodically

00:10:04,490 --> 00:10:08,569
and connect to them so when you do that

00:10:07,040 --> 00:10:09,889
then you could take these little sub

00:10:08,569 --> 00:10:12,800
programs you could launch them manually

00:10:09,889 --> 00:10:14,120
on UNIX shells inside debuggers there

00:10:12,800 --> 00:10:16,879
could be demons were stirred up and fire

00:10:14,120 --> 00:10:18,079
everybody off this is kind of where

00:10:16,879 --> 00:10:19,370
things started and I think you can kind

00:10:18,079 --> 00:10:21,319
of see the beginnings of Rossum here

00:10:19,370 --> 00:10:23,449
this wasn't fully developed at the time

00:10:21,319 --> 00:10:24,370
the list of appears was static it wasn't

00:10:23,449 --> 00:10:27,350
dynamic

00:10:24,370 --> 00:10:27,760
other problems occurred as well but but

00:10:27,350 --> 00:10:29,320
this is

00:10:27,760 --> 00:10:32,860
that the big picture idea is starting to

00:10:29,320 --> 00:10:34,210
take form here the idea of a computation

00:10:32,860 --> 00:10:35,740
graph is essentially this is the

00:10:34,210 --> 00:10:38,050
graphical version of the text file that

00:10:35,740 --> 00:10:39,640
used to be contained by the Supervisory

00:10:38,050 --> 00:10:41,230
nose so instead of just a big XML file

00:10:39,640 --> 00:10:43,060
you can actually plot them with the

00:10:41,230 --> 00:10:45,100
graph here and you can see that if you

00:10:43,060 --> 00:10:46,840
make a graph the notes the circles in

00:10:45,100 --> 00:10:48,430
the graph are programs the UNIX process

00:10:46,840 --> 00:10:50,230
ease the edges are data streams which

00:10:48,430 --> 00:10:53,260
are connecting on the fly as things pop

00:10:50,230 --> 00:10:55,060
up the insight and the usefulness for

00:10:53,260 --> 00:10:57,220
looking at this graph is to say that

00:10:55,060 --> 00:10:59,080
this is a sparse graph and that's good

00:10:57,220 --> 00:11:01,090
the sparsity means that we can actually

00:10:59,080 --> 00:11:02,230
cut this graph up into several pieces

00:11:01,090 --> 00:11:04,030
put them in different computers and

00:11:02,230 --> 00:11:05,740
actually get a benefit to parallelism if

00:11:04,030 --> 00:11:07,780
this graph was a super dense

00:11:05,740 --> 00:11:08,980
you know spider web or rat's nest then

00:11:07,780 --> 00:11:10,540
it'd be difficult because everyone just

00:11:08,980 --> 00:11:13,600
be waiting in everything else but often

00:11:10,540 --> 00:11:15,780
times and robotics these there are kind

00:11:13,600 --> 00:11:17,380
of cliques or subgroups that are highly

00:11:15,780 --> 00:11:18,490
intercommunicating a lot and then

00:11:17,380 --> 00:11:19,900
they're totally separate whether it's

00:11:18,490 --> 00:11:22,030
like a navigation system you can imagine

00:11:19,900 --> 00:11:23,740
has like five or ten programs they talk

00:11:22,030 --> 00:11:24,790
to each other a lot but they really

00:11:23,740 --> 00:11:25,900
don't talk to very much to a computer

00:11:24,790 --> 00:11:28,330
vision system or to a manipulation

00:11:25,900 --> 00:11:30,040
system the other thing that's nice is

00:11:28,330 --> 00:11:32,920
most these links are low bandwidth which

00:11:30,040 --> 00:11:34,870
means that we can oftentimes fork them

00:11:32,920 --> 00:11:36,730
apart and put part of it off the robot

00:11:34,870 --> 00:11:38,020
pervert on the robot or maybe not have a

00:11:36,730 --> 00:11:40,600
great connection between them but you

00:11:38,020 --> 00:11:43,720
still get a benefit to to splitting up

00:11:40,600 --> 00:11:45,280
into parallelism so we had this joke

00:11:43,720 --> 00:11:47,170
kind of ongoing joke in this project of

00:11:45,280 --> 00:11:49,630
the fetcher stapler is like the ultimate

00:11:47,170 --> 00:11:51,010
problem in robotics so you know you're

00:11:49,630 --> 00:11:52,210
sitting on your can there you want to

00:11:51,010 --> 00:11:53,350
staple some papers you know and how you

00:11:52,210 --> 00:11:55,090
don't know the papers with - so you're

00:11:53,350 --> 00:11:56,320
like robot please fetch me a stapler and

00:11:55,090 --> 00:11:58,330
then it just goes on to tears off down

00:11:56,320 --> 00:12:01,420
the hall it's kind of an older

00:11:58,330 --> 00:12:03,040
navigation system they're running it

00:12:01,420 --> 00:12:05,410
does a dance here to park in front of

00:12:03,040 --> 00:12:07,060
the door because the arm was teeny tiny

00:12:05,410 --> 00:12:08,350
at this point in the robots life so you

00:12:07,060 --> 00:12:09,610
had to get the robot in just the right

00:12:08,350 --> 00:12:12,940
space could kind of reach out and

00:12:09,610 --> 00:12:13,990
actually be able to reach the door but

00:12:12,940 --> 00:12:15,790
the idea here is there's tons of

00:12:13,990 --> 00:12:17,020
programs running they're all kind of

00:12:15,790 --> 00:12:18,280
sharing control of the robot

00:12:17,020 --> 00:12:19,810
everyone's running at the same time

00:12:18,280 --> 00:12:21,430
there's three computers on the robot and

00:12:19,810 --> 00:12:23,290
I think three off the robot for this

00:12:21,430 --> 00:12:24,700
experiment so then we kind of switched

00:12:23,290 --> 00:12:26,290
this out of navigation mode which at the

00:12:24,700 --> 00:12:28,120
time could handle cluttered seems better

00:12:26,290 --> 00:12:30,250
and then now there's a computer vision

00:12:28,120 --> 00:12:31,540
system that is zooming the camera all

00:12:30,250 --> 00:12:33,430
over the place ooming in and out looking

00:12:31,540 --> 00:12:35,620
left and right looking for the ultimate

00:12:33,430 --> 00:12:36,850
object the stapler there so you can see

00:12:35,620 --> 00:12:38,620
it's on the edge of the table again

00:12:36,850 --> 00:12:40,120
because of this goofy girl out at the

00:12:38,620 --> 00:12:41,320
time had this little teeny arm so you

00:12:40,120 --> 00:12:43,839
had to be you know

00:12:41,320 --> 00:12:45,850
close then we get it we predict a grass

00:12:43,839 --> 00:12:47,980
point on there grab it pull it into the

00:12:45,850 --> 00:12:50,320
payload of the robot and then drive back

00:12:47,980 --> 00:12:51,730
and the point isn't necessarily that the

00:12:50,320 --> 00:12:53,259
stapler fetching problem is like the

00:12:51,730 --> 00:12:56,079
ultimate problem for mankind it's rather

00:12:53,259 --> 00:12:58,180
that the idea of integrating tons of

00:12:56,079 --> 00:12:59,470
subsystems on a single robot it causes

00:12:58,180 --> 00:13:01,740
you and forces you to learn

00:12:59,470 --> 00:13:03,970
interdependencies between systems and

00:13:01,740 --> 00:13:05,920
the idea of the kind of this big picture

00:13:03,970 --> 00:13:08,350
of a complex robot doing complex tasks

00:13:05,920 --> 00:13:09,610
is is sort of forces you to deal with

00:13:08,350 --> 00:13:13,509
them I guess when you're all running

00:13:09,610 --> 00:13:14,709
together and of course the end of the

00:13:13,509 --> 00:13:18,240
day you can sit there and then you can

00:13:14,709 --> 00:13:18,240
staple your papers and that's just great

00:13:19,949 --> 00:13:24,250
okay so what have we learned from stair

00:13:22,720 --> 00:13:25,779
the idea of doing this enforcing that

00:13:24,250 --> 00:13:27,670
difficult is these large demonstrations

00:13:25,779 --> 00:13:28,569
was to learn some things so one thing

00:13:27,670 --> 00:13:30,670
that came out of it is that

00:13:28,569 --> 00:13:32,500
multiprocessing is a great thing this

00:13:30,670 --> 00:13:34,089
you know someone had this idea back in

00:13:32,500 --> 00:13:37,620
the 1960s as well turns out they were

00:13:34,089 --> 00:13:40,389
right virtual memory is a wonderful idea

00:13:37,620 --> 00:13:42,220
it contains crashes when you try to

00:13:40,389 --> 00:13:43,569
segfault a program invert in you know

00:13:42,220 --> 00:13:45,130
multi-processing it just takes that one

00:13:43,569 --> 00:13:48,370
program down your core dump that guy and

00:13:45,130 --> 00:13:50,170
the rest of the system stays up it also

00:13:48,370 --> 00:13:52,540
helps you identify which component is

00:13:50,170 --> 00:13:53,769
the cause of the crash we in our early

00:13:52,540 --> 00:13:55,120
kind of early early days actually

00:13:53,769 --> 00:13:56,910
birthed before even the stuff I plotted

00:13:55,120 --> 00:13:59,680
here it was had a multi-threaded

00:13:56,910 --> 00:14:01,209
framework that I worked on and the trick

00:13:59,680 --> 00:14:02,980
was that is that oftentimes what would

00:14:01,209 --> 00:14:04,540
happen is one subsystem like so you have

00:14:02,980 --> 00:14:05,740
a vision system they would run off the

00:14:04,540 --> 00:14:07,269
end of the image and go trash somebody

00:14:05,740 --> 00:14:08,529
else's memory and then the other sub

00:14:07,269 --> 00:14:10,480
system would then crashed five minutes

00:14:08,529 --> 00:14:12,160
later and it's often hard times hard to

00:14:10,480 --> 00:14:13,510
tell of course when you unravel that who

00:14:12,160 --> 00:14:14,589
was that followed with a feeling who was

00:14:13,510 --> 00:14:16,899
the first guy that walked up the end of

00:14:14,589 --> 00:14:18,819
his memory with with multiprocessing

00:14:16,899 --> 00:14:19,300
virtual memories isolation you don't

00:14:18,819 --> 00:14:21,010
have that problem

00:14:19,300 --> 00:14:22,449
yeah actually dunno like who went down

00:14:21,010 --> 00:14:24,160
and that's great

00:14:22,449 --> 00:14:25,600
the second major point we learned is

00:14:24,160 --> 00:14:27,639
there Reconnective all links help

00:14:25,600 --> 00:14:29,350
debugging that means that in in the

00:14:27,639 --> 00:14:31,209
stair case we had a static list of

00:14:29,350 --> 00:14:32,740
connections that were desired in Rosses

00:14:31,209 --> 00:14:34,510
all dynamic but anyway regardless of

00:14:32,740 --> 00:14:37,000
that if these data links between the

00:14:34,510 --> 00:14:39,130
peers can reinitiate themselves then you

00:14:37,000 --> 00:14:40,750
can do lots of fun things you can keep a

00:14:39,130 --> 00:14:42,009
large system up so on the stair program

00:14:40,750 --> 00:14:43,540
right there say we had for that that

00:14:42,009 --> 00:14:45,370
stapler demo we had about 30 programs

00:14:43,540 --> 00:14:47,139
running if there's just one that you're

00:14:45,370 --> 00:14:49,089
actually hacking on that that day you

00:14:47,139 --> 00:14:50,889
can control see that guy you know change

00:14:49,089 --> 00:14:52,839
two lines of code launched him again and

00:14:50,889 --> 00:14:54,079
then he just connects back into the

00:14:52,839 --> 00:14:56,269
whole system and everything

00:14:54,079 --> 00:14:58,759
60 tons of time from having to turn it

00:14:56,269 --> 00:15:00,499
off and on the entire system also

00:14:58,759 --> 00:15:02,269
equally importantly you can then run a

00:15:00,499 --> 00:15:03,739
subsist or sub-site of those programs

00:15:02,269 --> 00:15:06,649
inside debugger so there it's visual

00:15:03,739 --> 00:15:08,029
studio or gdb or whatever and then when

00:15:06,649 --> 00:15:09,110
you want to oftentimes any buggers of

00:15:08,029 --> 00:15:10,519
course you hit a breakpoint you'll

00:15:09,110 --> 00:15:12,230
modify a line of code you want to

00:15:10,519 --> 00:15:13,850
recompile and rerun it well when you do

00:15:12,230 --> 00:15:16,040
that he had to kill a process and start

00:15:13,850 --> 00:15:17,749
it again so if the system can kind of

00:15:16,040 --> 00:15:18,889
reestablish itself without having to go

00:15:17,749 --> 00:15:22,009
all the way down all the way back up it

00:15:18,889 --> 00:15:23,569
saves time to time ok so what did we

00:15:22,009 --> 00:15:25,220
learn that was bad

00:15:23,569 --> 00:15:27,499
we learned that external dependencies

00:15:25,220 --> 00:15:30,049
are a big deal I think like a lot of

00:15:27,499 --> 00:15:32,269
projects we start off with a giant shell

00:15:30,049 --> 00:15:34,429
script called install dependencies SH

00:15:32,269 --> 00:15:36,439
this is great when it's like five lines

00:15:34,429 --> 00:15:39,980
long and then typically over time the

00:15:36,439 --> 00:15:41,179
project grows more things are coming in

00:15:39,980 --> 00:15:43,249
you have oh I just need to add a few

00:15:41,179 --> 00:15:44,839
more lines to take this package in then

00:15:43,249 --> 00:15:46,459
there's a new release of a boon to us

00:15:44,839 --> 00:15:47,839
and I have a bunch of if blocks then

00:15:46,459 --> 00:15:49,399
someone wants to use fedora so you have

00:15:47,839 --> 00:15:50,959
another if block that contains that

00:15:49,399 --> 00:15:52,670
previous if block it just goes on and on

00:15:50,959 --> 00:15:54,379
and on and by the end of this I think we

00:15:52,670 --> 00:15:55,369
had like a hundred lines long shell

00:15:54,379 --> 00:15:58,249
script that no one really knew how it

00:15:55,369 --> 00:15:59,360
works anymore and it sort of worked on

00:15:58,249 --> 00:16:01,790
some platforms and then it was just

00:15:59,360 --> 00:16:03,829
confusing so the other thing is that

00:16:01,790 --> 00:16:05,749
it's tempting to rewrite functionality

00:16:03,829 --> 00:16:07,639
unless it's completely trivial for the

00:16:05,749 --> 00:16:09,709
authors and the users of subsystems to

00:16:07,639 --> 00:16:11,420
install all the dependencies that means

00:16:09,709 --> 00:16:13,459
that if it requires more than like one

00:16:11,420 --> 00:16:15,499
shell command that's like 20 characters

00:16:13,459 --> 00:16:16,639
long people don't own and eventually

00:16:15,499 --> 00:16:17,899
they'll say like oh I'd love to use

00:16:16,639 --> 00:16:19,309
OpenCV but you know that particular

00:16:17,899 --> 00:16:21,019
version doesn't compile on this weird

00:16:19,309 --> 00:16:22,850
linux retributions I'm using so all I

00:16:21,019 --> 00:16:24,139
really need to do is just increase the

00:16:22,850 --> 00:16:26,089
contrast of an image so I'll just hold

00:16:24,139 --> 00:16:27,889
it up it's like five lines and over the

00:16:26,089 --> 00:16:30,350
time everyone does that and everyone has

00:16:27,889 --> 00:16:32,119
basically coded up ports parts of OpenCV

00:16:30,350 --> 00:16:33,619
that don't talk to each other and that

00:16:32,119 --> 00:16:36,529
are all kind of broken in various ways

00:16:33,619 --> 00:16:39,019
so the idea is that dependencies are a

00:16:36,529 --> 00:16:40,040
big deal and what's even bigger deal is

00:16:39,019 --> 00:16:41,389
it need to be really really really

00:16:40,040 --> 00:16:42,649
really easy to bring in otherwise

00:16:41,389 --> 00:16:45,350
there's just too much friction than

00:16:42,649 --> 00:16:46,220
people know know okay so another thing

00:16:45,350 --> 00:16:48,169
we learned

00:16:46,220 --> 00:16:50,540
simultaneous development on a single

00:16:48,169 --> 00:16:51,949
repository just doesn't scale it is

00:16:50,540 --> 00:16:52,970
obvious for for those of you who are

00:16:51,949 --> 00:16:55,249
experts in enterprise software

00:16:52,970 --> 00:16:57,139
development I wasn't at the time the

00:16:55,249 --> 00:16:58,879
paradox here is we all want kind of the

00:16:57,139 --> 00:17:00,139
whole everyone else to just like hold on

00:16:58,879 --> 00:17:02,629
for a minute while we work on our code

00:17:00,139 --> 00:17:04,069
as fast as possible and of course the

00:17:02,629 --> 00:17:05,740
problem there is that serializing

00:17:04,069 --> 00:17:09,169
development instead of

00:17:05,740 --> 00:17:10,759
so really what we need to do is have

00:17:09,169 --> 00:17:12,709
methods where each subsystem can be

00:17:10,759 --> 00:17:15,529
developed on their own targeting a

00:17:12,709 --> 00:17:16,970
stable stable versions of other

00:17:15,529 --> 00:17:19,159
subsystems and you kind of all just sort

00:17:16,970 --> 00:17:20,779
of decide well okay it's time to move on

00:17:19,159 --> 00:17:23,389
to the next kind of clunk forward and

00:17:20,779 --> 00:17:24,769
everyone will move forward this problem

00:17:23,389 --> 00:17:27,409
of course not unique to robotics but I

00:17:24,769 --> 00:17:28,549
think that it's a big deal sort of as

00:17:27,409 --> 00:17:30,320
any as any project for any software

00:17:28,549 --> 00:17:33,259
project start some search growing in

00:17:30,320 --> 00:17:34,490
size okay so all the time we're doing

00:17:33,259 --> 00:17:35,570
the stair project there's also this

00:17:34,490 --> 00:17:37,669
project called the personal robotics

00:17:35,570 --> 00:17:39,320
program at Stanford this was run by Eric

00:17:37,669 --> 00:17:42,110
Berger Kenan where brick and Ken

00:17:39,320 --> 00:17:43,759
Salisbury and they produced iRobot there

00:17:42,110 --> 00:17:46,249
which you'll find looks mysteriously

00:17:43,759 --> 00:17:48,409
like a pea or two because it is it's

00:17:46,249 --> 00:17:51,379
made out of wood and fabric instead of

00:17:48,409 --> 00:17:52,909
metal but that's okay let's see so the

00:17:51,379 --> 00:17:54,320
idea that Eric had is the software

00:17:52,909 --> 00:17:55,999
designer for this is use tons and tons

00:17:54,320 --> 00:17:58,190
of tiny programs all talking through a

00:17:55,999 --> 00:17:59,840
central server and what Eric worked hard

00:17:58,190 --> 00:18:00,980
on is making these programs it's simple

00:17:59,840 --> 00:18:03,259
to write it's they'd like it's like a

00:18:00,980 --> 00:18:05,419
single console screen and VI for example

00:18:03,259 --> 00:18:07,399
is the whole program the idea he had

00:18:05,419 --> 00:18:08,720
which was great is that the the reflex

00:18:07,399 --> 00:18:09,980
when you want to do a new feature should

00:18:08,720 --> 00:18:12,139
be to write a new little program as

00:18:09,980 --> 00:18:14,419
opposed to adding you know a couple more

00:18:12,139 --> 00:18:15,499
pages of code to an existing program if

00:18:14,419 --> 00:18:16,700
you can make these things small enough

00:18:15,499 --> 00:18:17,749
and easy enough to iterate then you can

00:18:16,700 --> 00:18:20,059
just crank them out and when you want

00:18:17,749 --> 00:18:21,200
the robot to do you know new tasks X you

00:18:20,059 --> 00:18:23,740
can just make a new program that happens

00:18:21,200 --> 00:18:25,789
to be 20 or 30 lines long as opposed to

00:18:23,740 --> 00:18:28,669
trying to add and sort of get these

00:18:25,789 --> 00:18:31,070
giant monolithic pieces of code Eric

00:18:28,669 --> 00:18:33,710
also was he and pushing for us to not

00:18:31,070 --> 00:18:35,450
wrap the main function I was tempted in

00:18:33,710 --> 00:18:37,159
my earlier frameworks

00:18:35,450 --> 00:18:38,360
I would like write these giant macros

00:18:37,159 --> 00:18:40,429
and say it at the end of it you just say

00:18:38,360 --> 00:18:42,529
like run in all caps with parentheses

00:18:40,429 --> 00:18:43,730
you know of course and no one ever

00:18:42,529 --> 00:18:45,409
really knew it was going on and actually

00:18:43,730 --> 00:18:47,570
I would kind of forget myself but it

00:18:45,409 --> 00:18:50,299
would like you know expand in macros 20

00:18:47,570 --> 00:18:53,210
ways and stringify everything and and

00:18:50,299 --> 00:18:55,100
that's just bad that's just bad so this

00:18:53,210 --> 00:18:57,110
this idea of leaving main visible it

00:18:55,100 --> 00:18:58,820
cost you a few lines of boilerplate but

00:18:57,110 --> 00:19:00,320
the idea is we should push hard to get

00:18:58,820 --> 00:19:02,119
that boilerplate down as opposed to

00:19:00,320 --> 00:19:02,809
hiding the main function and generating

00:19:02,119 --> 00:19:06,619
these things on the fly off

00:19:02,809 --> 00:19:08,509
pre-processors at the same time we're

00:19:06,619 --> 00:19:10,070
doing all that there's a large famous

00:19:08,509 --> 00:19:12,230
open-source robotics program called

00:19:10,070 --> 00:19:15,980
player stage run by the brilliant brian

00:19:12,230 --> 00:19:17,600
jerky right here and players large at

00:19:15,980 --> 00:19:18,150
least for me from my up my own just sort

00:19:17,600 --> 00:19:19,380
of develop

00:19:18,150 --> 00:19:20,880
I guess the the main thing that brought

00:19:19,380 --> 00:19:22,290
to me was that it's oftentimes more

00:19:20,880 --> 00:19:23,910
natural to think of connecting data

00:19:22,290 --> 00:19:26,670
streams instead of connecting UNIX

00:19:23,910 --> 00:19:28,080
processes that's kind of a sea change in

00:19:26,670 --> 00:19:30,480
thinking because instead of like you

00:19:28,080 --> 00:19:31,800
have a instead of thinking about gee

00:19:30,480 --> 00:19:33,150
this programs gonna start up it has this

00:19:31,800 --> 00:19:34,800
particular port I'm gonna connect it to

00:19:33,150 --> 00:19:36,570
that pretty good program and said you

00:19:34,800 --> 00:19:38,970
say there's things called images in the

00:19:36,570 --> 00:19:40,380
world and that we should publish them

00:19:38,970 --> 00:19:42,180
and other people can subscribe to the

00:19:40,380 --> 00:19:44,370
images it's great

00:19:42,180 --> 00:19:45,930
this is Laos allows us to be dynamic

00:19:44,370 --> 00:19:47,640
which means that there can just be

00:19:45,930 --> 00:19:48,990
messages called laser scans flying

00:19:47,640 --> 00:19:50,250
around and people who are interested in

00:19:48,990 --> 00:19:51,240
laser scans can subscribe to them you

00:19:50,250 --> 00:19:52,380
don't have to know ahead of time who's

00:19:51,240 --> 00:19:54,780
going to subscribe to them it couldn't

00:19:52,380 --> 00:19:56,340
be all on the fly and dynamic the other

00:19:54,780 --> 00:19:58,080
ingredients that I had from from player

00:19:56,340 --> 00:20:00,150
is that the framework doesn't need to

00:19:58,080 --> 00:20:02,640
enforce a programming style meaning that

00:20:00,150 --> 00:20:05,820
the framework or the message passing

00:20:02,640 --> 00:20:07,080
layer so we say doesn't need to say well

00:20:05,820 --> 00:20:08,790
you should code Googlebot in this

00:20:07,080 --> 00:20:10,740
particular way people can do kind of

00:20:08,790 --> 00:20:12,630
whatever they want and that's okay

00:20:10,740 --> 00:20:13,890
because really what we care about at the

00:20:12,630 --> 00:20:15,510
end of the day is messages that are

00:20:13,890 --> 00:20:17,070
flying around and exactly how those

00:20:15,510 --> 00:20:19,200
messages are produced and consumed and

00:20:17,070 --> 00:20:22,500
processed it is a you know it is up to

00:20:19,200 --> 00:20:24,600
the person writing the claim so even

00:20:22,500 --> 00:20:26,310
this little list of goals I guess that

00:20:24,600 --> 00:20:28,290
we all kind of brought to the table was

00:20:26,310 --> 00:20:29,460
let's be flexible let's let people do

00:20:28,290 --> 00:20:30,570
kind of whatever they want if they wants

00:20:29,460 --> 00:20:32,490
to be highly formalized that's great

00:20:30,570 --> 00:20:34,250
they can do that if they want to just be

00:20:32,490 --> 00:20:37,200
wild and crazy they can do that too

00:20:34,250 --> 00:20:39,000
let's be thin meaning don't wrap up main

00:20:37,200 --> 00:20:40,380
let's use as many libraries as possible

00:20:39,000 --> 00:20:41,940
let's try even to encourage folks to

00:20:40,380 --> 00:20:43,530
push functionality into libraries so you

00:20:41,940 --> 00:20:44,940
can have for example a command line

00:20:43,530 --> 00:20:47,580
version of a program or as well as a

00:20:44,940 --> 00:20:49,320
Ross node library program you can also

00:20:47,580 --> 00:20:50,490
um pull the library out and use it in

00:20:49,320 --> 00:20:53,610
someone else's robotics framework -

00:20:50,490 --> 00:20:55,320
that's great multilingual I'm sort of a

00:20:53,610 --> 00:20:56,850
C C++ person from way back

00:20:55,320 --> 00:20:59,040
whathave discovers that people who write

00:20:56,850 --> 00:21:02,520
a Python get more done faster so I'm

00:20:59,040 --> 00:21:04,710
trying to learn that open source is a

00:21:02,520 --> 00:21:06,510
good thing it's tricky though to make

00:21:04,710 --> 00:21:08,310
sure you can get people to all agree on

00:21:06,510 --> 00:21:09,930
that and one way that that seems to work

00:21:08,310 --> 00:21:11,400
better is to use the BSD license because

00:21:09,930 --> 00:21:13,080
that's sort of been known there are

00:21:11,400 --> 00:21:15,000
companies such as Apple Computer who do

00:21:13,080 --> 00:21:18,450
great things with BSD license to open

00:21:15,000 --> 00:21:20,820
source code so that's that's why we want

00:21:18,450 --> 00:21:22,050
BSD is to encourage commercial take on

00:21:20,820 --> 00:21:23,580
the thing and not have to worry about

00:21:22,050 --> 00:21:25,140
any kind of licensing difficulties at

00:21:23,580 --> 00:21:28,040
all because BST is is not to be

00:21:25,140 --> 00:21:28,040
commercial safe I guess

00:21:28,080 --> 00:21:32,490
okay so that's kind of early day stuff

00:21:29,550 --> 00:21:34,740
now I'll do kind of a whirlwind tour of

00:21:32,490 --> 00:21:35,910
what's going on in Ross it's tricky and

00:21:34,740 --> 00:21:37,200
in group like this because I think there

00:21:35,910 --> 00:21:38,640
lots of us here have used Ross for a

00:21:37,200 --> 00:21:41,370
while there are lots of us here also who

00:21:38,640 --> 00:21:42,750
are just getting into the system so some

00:21:41,370 --> 00:21:44,550
of us will probably be too slow and some

00:21:42,750 --> 00:21:46,680
of it will be too fast for various parts

00:21:44,550 --> 00:21:48,360
of the community here and that's okay so

00:21:46,680 --> 00:21:52,200
here's a bunch of robots they all run

00:21:48,360 --> 00:21:53,580
arras is neat let's see so architectural

00:21:52,200 --> 00:21:56,100
II it's a peer-to-peer distributed

00:21:53,580 --> 00:21:57,630
system which means that there are lots

00:21:56,100 --> 00:21:59,840
of small programs we call them nodes if

00:21:57,630 --> 00:22:02,340
you put them on a graphical sense

00:21:59,840 --> 00:22:03,600
there's a master program sitting on top

00:22:02,340 --> 00:22:06,090
but that's really only a name service

00:22:03,600 --> 00:22:07,710
think of it like DNS in that it's who

00:22:06,090 --> 00:22:09,290
you call when you want to find out who

00:22:07,710 --> 00:22:11,280
your peers are and where they live so

00:22:09,290 --> 00:22:12,000
even though there is a master everyone's

00:22:11,280 --> 00:22:13,290
connected to it

00:22:12,000 --> 00:22:14,580
there's not actually a lot of bandwidth

00:22:13,290 --> 00:22:17,340
to the master at all it's really ends up

00:22:14,580 --> 00:22:19,800
being a bunch of a bunch of queries and

00:22:17,340 --> 00:22:21,420
it doesn't get hammered too bad so the

00:22:19,800 --> 00:22:24,510
communication that the bulk of these

00:22:21,420 --> 00:22:26,160
data streams are over TCP or UDP between

00:22:24,510 --> 00:22:27,840
unix peer-to-peer processes so each

00:22:26,160 --> 00:22:29,820
process comes up he launches a socket

00:22:27,840 --> 00:22:30,930
and then the master tells them where to

00:22:29,820 --> 00:22:33,750
find these sockets and then they start

00:22:30,930 --> 00:22:35,790
blasting data directly to each other so

00:22:33,750 --> 00:22:37,410
a simple probably simple situation is

00:22:35,790 --> 00:22:39,660
pipelines when you have one program

00:22:37,410 --> 00:22:41,100
feeds the next phase the next so in this

00:22:39,660 --> 00:22:42,990
little case we have a camera driver node

00:22:41,100 --> 00:22:45,390
it's talking over some magic peripheral

00:22:42,990 --> 00:22:46,680
bus to a camera but that's okay

00:22:45,390 --> 00:22:47,820
no one else needs to know exactly what

00:22:46,680 --> 00:22:49,500
peripheral bus or how that's happening

00:22:47,820 --> 00:22:51,300
because the other day all it does is

00:22:49,500 --> 00:22:52,080
published an image message stream of

00:22:51,300 --> 00:22:54,720
these things so then there's another

00:22:52,080 --> 00:22:56,280
face recognition guy and all he does is

00:22:54,720 --> 00:22:57,660
take in images it doesn't care where

00:22:56,280 --> 00:23:00,270
images come from they can come from this

00:22:57,660 --> 00:23:01,890
it can come from live cameras really

00:23:00,270 --> 00:23:03,510
what it's doing is its own black boxes

00:23:01,890 --> 00:23:05,160
it's it's looking for faces and pictures

00:23:03,510 --> 00:23:06,900
and then it outputs little data

00:23:05,160 --> 00:23:09,960
structures called faces which maybe is a

00:23:06,900 --> 00:23:11,550
matrix or something those things feed a

00:23:09,960 --> 00:23:13,350
dialogue manager just in this little

00:23:11,550 --> 00:23:14,670
example it really doesn't care who's

00:23:13,350 --> 00:23:16,020
upstream of it or who's downstream

00:23:14,670 --> 00:23:18,000
really what it's trying to do is look

00:23:16,020 --> 00:23:19,260
for faces and and think about you know

00:23:18,000 --> 00:23:22,380
did I see this person before should I

00:23:19,260 --> 00:23:23,940
talk to them that outputs text strings

00:23:22,380 --> 00:23:25,980
in this example which then go to speech

00:23:23,940 --> 00:23:27,090
synthesis again the point of here is

00:23:25,980 --> 00:23:28,200
that each of these black boxes is

00:23:27,090 --> 00:23:29,610
isolated from the others and it really

00:23:28,200 --> 00:23:30,780
doesn't matter we could take them out of

00:23:29,610 --> 00:23:32,340
this particular pipeline and put them in

00:23:30,780 --> 00:23:33,390
a different pipeline and that the hope

00:23:32,340 --> 00:23:35,460
is that these things are generic enough

00:23:33,390 --> 00:23:39,770
and then the flexibility there in the

00:23:35,460 --> 00:23:39,770

YouTube URL: https://www.youtube.com/watch?v=-E1O98qrfBY


