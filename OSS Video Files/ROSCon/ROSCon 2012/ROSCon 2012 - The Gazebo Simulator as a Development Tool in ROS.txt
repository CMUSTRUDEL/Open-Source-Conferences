Title: ROSCon 2012 - The Gazebo Simulator as a Development Tool in ROS
Publication date: 2014-08-31
Playlist: ROSCon 2012
Description: 
	John Hsu and Nate Koenig

Slides: http://roscon.ros.org/wp-uploads/2012/06/Gazebo%20ROSCon%20presentation.pdf
Captions: 
	00:00:00,920 --> 00:00:06,420
so now I think they're just getting set

00:00:04,049 --> 00:00:09,090
up here but I'd like to introduce John

00:00:06,420 --> 00:00:11,340
Hsu and Nate Koenig there they're

00:00:09,090 --> 00:00:13,530
speaking about gazebo in general and I

00:00:11,340 --> 00:00:15,389
know that's it's been there's been a lot

00:00:13,530 --> 00:00:17,279
of interest in that as well recently and

00:00:15,389 --> 00:00:20,340
it's good to have some of the original

00:00:17,279 --> 00:00:24,779
and continuing developers available to

00:00:20,340 --> 00:00:27,150
to discuss it thanks so I'll get started

00:00:24,779 --> 00:00:28,920
while John setting up so I'm bait

00:00:27,150 --> 00:00:31,140
connect and I've been working closely

00:00:28,920 --> 00:00:33,450
with John for the past two and a half

00:00:31,140 --> 00:00:39,390
years now working on developing and

00:00:33,450 --> 00:00:41,070
maintaining gazebo so we're going to

00:00:39,390 --> 00:00:44,700
indulge you with lots of good gazebo

00:00:41,070 --> 00:00:47,610
stuff so we're going to basically talk

00:00:44,700 --> 00:00:51,930
about overview of gazebo exactly what it

00:00:47,610 --> 00:00:54,210
is why you should use it which is a very

00:00:51,930 --> 00:00:56,340
important feature and then I will delve

00:00:54,210 --> 00:00:58,739
into some more of the details about the

00:00:56,340 --> 00:01:00,629
architecture of gazebo creating own

00:00:58,739 --> 00:01:03,420
world your own environments to do

00:01:00,629 --> 00:01:05,489
interesting things with robots John will

00:01:03,420 --> 00:01:08,460
come over and take charge of developing

00:01:05,489 --> 00:01:10,650
robot models itself and we'll go into

00:01:08,460 --> 00:01:13,290
how you can write client code to

00:01:10,650 --> 00:01:18,270
interface with gazebo and do fun and

00:01:13,290 --> 00:01:21,390
interesting things so gazebo started

00:01:18,270 --> 00:01:23,960
about 10 years ago down at USC it was

00:01:21,390 --> 00:01:27,150
originally developed as a tool to

00:01:23,960 --> 00:01:29,130
accurately simulate or as accurate as we

00:01:27,150 --> 00:01:31,110
could simulate outdoor environments for

00:01:29,130 --> 00:01:33,930
projects that we had going at the time

00:01:31,110 --> 00:01:36,060
so also during this time player was the

00:01:33,930 --> 00:01:38,909
one big game in town so we obviously

00:01:36,060 --> 00:01:41,250
built interfaces for player since then

00:01:38,909 --> 00:01:45,780
we have grown to incorporate both Ross

00:01:41,250 --> 00:01:47,939
and also support your own custom code

00:01:45,780 --> 00:01:51,149
that doesn't need to exist in Ross or in

00:01:47,939 --> 00:01:53,070
player so over the years people have

00:01:51,149 --> 00:01:56,310
done very interesting things with gazebo

00:01:53,070 --> 00:01:59,969
from developing models of eggs so that

00:01:56,310 --> 00:02:02,610
you don't destroy your fancy new PR 2 by

00:01:59,969 --> 00:02:06,000
squishing eggs and so they developed a

00:02:02,610 --> 00:02:07,740
nice model of eggs that would would

00:02:06,000 --> 00:02:10,800
break if you apply too much pressure and

00:02:07,740 --> 00:02:12,180
developed controllers for gripper one of

00:02:10,800 --> 00:02:13,780
the first early one of the first

00:02:12,180 --> 00:02:16,840
projects to use gazebo developed

00:02:13,780 --> 00:02:18,640
learning gates for hexapod robots and

00:02:16,840 --> 00:02:20,709
they use this to both visualize the

00:02:18,640 --> 00:02:25,000
results and evaluate how well they

00:02:20,709 --> 00:02:28,690
performed so complex indoor environments

00:02:25,000 --> 00:02:30,430
can be set up such as indoor factory

00:02:28,690 --> 00:02:32,380
settings where they use this environment

00:02:30,430 --> 00:02:36,459
to test controllers for mobile robots

00:02:32,380 --> 00:02:39,850
and industrial arms and grippers you can

00:02:36,459 --> 00:02:42,520
also use multiple robots such as soccer

00:02:39,850 --> 00:02:45,520
or do coverage analysis by dispersing

00:02:42,520 --> 00:02:47,790
robots in indoor spaces and finally you

00:02:45,520 --> 00:02:51,900
can of course uses the pr2 to do complex

00:02:47,790 --> 00:02:54,100
motion planning and mobile manipulation

00:02:51,900 --> 00:02:56,230
so I'm going to go into a little bit

00:02:54,100 --> 00:02:59,739
more of how gazebo is set up and how it

00:02:56,230 --> 00:03:02,050
runs so historically gazebo was a

00:02:59,739 --> 00:03:04,660
monolithic system it was basically

00:03:02,050 --> 00:03:07,720
wrapping a physics engine with some

00:03:04,660 --> 00:03:11,860
visualization code and interfaces to

00:03:07,720 --> 00:03:13,780
give you a convenient access to generate

00:03:11,860 --> 00:03:15,360
extensive data having actuators do

00:03:13,780 --> 00:03:17,140
interesting things in the environment

00:03:15,360 --> 00:03:19,180
over the years it got more and more

00:03:17,140 --> 00:03:21,760
complex and this spurred us to do a

00:03:19,180 --> 00:03:24,040
massive rewrite which is now gazebo one

00:03:21,760 --> 00:03:26,110
point O so we've separated out the

00:03:24,040 --> 00:03:28,209
server and the client trying to take

00:03:26,110 --> 00:03:30,329
advantage of better threading models

00:03:28,209 --> 00:03:33,100
better support from multi process

00:03:30,329 --> 00:03:34,900
execution so the server you can think of

00:03:33,100 --> 00:03:37,630
this as just running a physics engine

00:03:34,900 --> 00:03:40,060
and data generation and the client can

00:03:37,630 --> 00:03:42,250
be anything from the GUI that we ship

00:03:40,060 --> 00:03:44,380
with gazebo to your own client code and

00:03:42,250 --> 00:03:47,590
there's multiple ways that you can talk

00:03:44,380 --> 00:03:49,750
to gazebo one of them is B is via socket

00:03:47,590 --> 00:03:52,180
communication and another way is through

00:03:49,750 --> 00:03:55,359
plugins and we'll go into those and a

00:03:52,180 --> 00:03:58,000
little bit more detail later on we've

00:03:55,359 --> 00:04:01,120
simplified the this plug-in interface so

00:03:58,000 --> 00:04:02,650
before it was this complex set of

00:04:01,120 --> 00:04:04,750
controllers that you'd have to define in

00:04:02,650 --> 00:04:07,480
a very rigid architecture now you have a

00:04:04,750 --> 00:04:10,030
very open plug-in API which lets you

00:04:07,480 --> 00:04:12,790
control any aspect of gazebo from forces

00:04:10,030 --> 00:04:15,940
applied to bodies to gravity and various

00:04:12,790 --> 00:04:19,660
world properties and finally we rewrote

00:04:15,940 --> 00:04:22,360
the description format for gazebo so it

00:04:19,660 --> 00:04:25,000
more closely matches you RDF with a few

00:04:22,360 --> 00:04:26,190
extra features for things like defining

00:04:25,000 --> 00:04:28,440
your scene

00:04:26,190 --> 00:04:32,520
and your lighting models and things like

00:04:28,440 --> 00:04:34,080
that so there's four basic components to

00:04:32,520 --> 00:04:35,670
gazebo as you could probably guess from

00:04:34,080 --> 00:04:38,010
what I've been saying there's a physics

00:04:35,670 --> 00:04:40,230
engine and historically we've been using

00:04:38,010 --> 00:04:42,450
o de because that was the physics engine

00:04:40,230 --> 00:04:44,580
around at the time so we still support o

00:04:42,450 --> 00:04:46,770
de and we're about eighty percent into

00:04:44,580 --> 00:04:48,150
getting bulletin which will be nice to

00:04:46,770 --> 00:04:51,750
have a comparison between these two

00:04:48,150 --> 00:04:54,300
engines for rendering we've always used

00:04:51,750 --> 00:04:56,730
OpenGL we've moved on to ogre which has

00:04:54,300 --> 00:05:00,090
a lot of nice features lets us integrate

00:04:56,730 --> 00:05:03,150
some new fancy game based technology

00:05:00,090 --> 00:05:05,040
into gazebo itself in terms of

00:05:03,150 --> 00:05:07,040
interfaces we eventually have plugins

00:05:05,040 --> 00:05:09,900
and inter process communication which

00:05:07,040 --> 00:05:12,090
uses Google protobuf and boost asio to

00:05:09,900 --> 00:05:14,220
do socket based communication and

00:05:12,090 --> 00:05:17,220
finally a set of user interfaces the

00:05:14,220 --> 00:05:20,250
primary of which is cutie but we also

00:05:17,220 --> 00:05:24,090
have this ability to support your own

00:05:20,250 --> 00:05:26,490
custom gooeys within gazebo that act as

00:05:24,090 --> 00:05:29,610
overlay and OpenGL through the CEO GUI

00:05:26,490 --> 00:05:30,930
library so what this looks like in a

00:05:29,610 --> 00:05:33,080
running cingulate and a running system

00:05:30,930 --> 00:05:35,190
is after a little bit of initialization

00:05:33,080 --> 00:05:37,440
gazebo essentially just runs through a

00:05:35,190 --> 00:05:39,450
loop of updating physics generating

00:05:37,440 --> 00:05:41,400
extensive data and then communicating

00:05:39,450 --> 00:05:43,710
with some external client and sending

00:05:41,400 --> 00:05:45,150
data back and forth and on the client

00:05:43,710 --> 00:05:46,800
side the client is extremely lightweight

00:05:45,150 --> 00:05:51,360
and simple just getting user input

00:05:46,800 --> 00:05:54,990
through some gooey and visualizing data

00:05:51,360 --> 00:05:56,460
from the system so you can replace this

00:05:54,990 --> 00:05:57,750
client with anything you want it doesn't

00:05:56,460 --> 00:06:02,100
have to be our GUI you can create your

00:05:57,750 --> 00:06:05,700
own thing whatever it is and talk to the

00:06:02,100 --> 00:06:08,220
running server through topics so I'm

00:06:05,700 --> 00:06:10,290
going to go into developing model

00:06:08,220 --> 00:06:12,650
environments for your robots and this is

00:06:10,290 --> 00:06:15,450
fairly important because you want your

00:06:12,650 --> 00:06:17,280
environment to ideally match what your

00:06:15,450 --> 00:06:20,010
robot is going to operate in so you can

00:06:17,280 --> 00:06:23,430
get good data out and test your

00:06:20,010 --> 00:06:25,380
algorithms properly so your environments

00:06:23,430 --> 00:06:27,950
can range from very simple to very

00:06:25,380 --> 00:06:30,900
complex so if you're interested in

00:06:27,950 --> 00:06:32,730
focusing on a very specific aspect of an

00:06:30,900 --> 00:06:34,260
algorithm you can create a very simple

00:06:32,730 --> 00:06:36,330
environment with a ground plane and a

00:06:34,260 --> 00:06:38,250
few boxes and just quickly iterate over

00:06:36,330 --> 00:06:38,910
a particular feature that you were

00:06:38,250 --> 00:06:40,890
concerned

00:06:38,910 --> 00:06:42,930
if you're interested in outdoor

00:06:40,890 --> 00:06:44,640
environments aerial robots legged robots

00:06:42,930 --> 00:06:47,100
that type of thing you can create trains

00:06:44,640 --> 00:06:49,230
and simulate outdoor environments

00:06:47,100 --> 00:06:51,690
realistically and finally you can create

00:06:49,230 --> 00:06:54,000
indoor environments in this case we just

00:06:51,690 --> 00:06:56,820
extruded the map the blueprint of Willow

00:06:54,000 --> 00:06:58,350
Garage and we use this fairly regularly

00:06:56,820 --> 00:07:02,490
to do motion planning and mobile

00:06:58,350 --> 00:07:05,220
manipulation and indoor settings so

00:07:02,490 --> 00:07:07,230
David mentioned most of this stuff in

00:07:05,220 --> 00:07:09,570
his talk on you RDF there's a few simple

00:07:07,230 --> 00:07:11,460
shapes you can use from cylinders two

00:07:09,570 --> 00:07:14,400
boxes to sears which are all built into

00:07:11,460 --> 00:07:16,230
gazebo and then you can incorporate 3d

00:07:14,400 --> 00:07:18,330
meshes from various sources you can

00:07:16,230 --> 00:07:20,550
either make it yourself via Sketchup or

00:07:18,330 --> 00:07:22,980
blender or SolidWorks or your favorite

00:07:20,550 --> 00:07:24,090
tool or download it from the Google 3d

00:07:22,980 --> 00:07:27,210
warehouse which has been a great

00:07:24,090 --> 00:07:28,800
resource and if you want to create hype

00:07:27,210 --> 00:07:30,450
Maps just load up your favorite image

00:07:28,800 --> 00:07:32,490
editor and create a grayscale image and

00:07:30,450 --> 00:07:34,290
gazebo does the rest to interpret white

00:07:32,490 --> 00:07:39,180
values as high and black values is low

00:07:34,290 --> 00:07:41,460
so a word on meshes these can be

00:07:39,180 --> 00:07:44,000
problematic for people to use mostly

00:07:41,460 --> 00:07:46,680
because there's a lot of different

00:07:44,000 --> 00:07:49,230
parameters that you can mess with with

00:07:46,680 --> 00:07:51,870
meshes that can have bad effects when

00:07:49,230 --> 00:07:53,730
you bring them into gazebo so the one

00:07:51,870 --> 00:07:56,280
thing to note is that gazebo is not a 3d

00:07:53,730 --> 00:07:58,560
modeler so you should use get Sketchup

00:07:56,280 --> 00:08:00,030
or blender to do all that kind of stuff

00:07:58,560 --> 00:08:02,910
because evil will just take in your data

00:08:00,030 --> 00:08:06,570
and use what it gets so along those

00:08:02,910 --> 00:08:08,520
lines when you export meshes to be used

00:08:06,570 --> 00:08:09,900
in gazebo it's always a good idea to

00:08:08,520 --> 00:08:12,630
make sure that they're at coordinates 0

00:08:09,900 --> 00:08:15,510
0 0 this will make it very easy for you

00:08:12,630 --> 00:08:18,169
to position it logically in a world and

00:08:15,510 --> 00:08:23,280
I'll make your life a lot easier because

00:08:18,169 --> 00:08:26,220
evil itself doesn't have a defined unit

00:08:23,280 --> 00:08:27,990
that it lives by we try to promote the

00:08:26,220 --> 00:08:29,970
idea that you use metric and makes it

00:08:27,990 --> 00:08:32,400
easy for you to share models and world

00:08:29,970 --> 00:08:35,969
amongst yourselves but you could use

00:08:32,400 --> 00:08:37,520
English units if you want so it was

00:08:35,969 --> 00:08:40,050
previously mentioned something about

00:08:37,520 --> 00:08:42,180
creating texture maps and applying them

00:08:40,050 --> 00:08:45,750
to meshes and problems associated with

00:08:42,180 --> 00:08:47,460
that I recommend looking up tutorials

00:08:45,750 --> 00:08:50,400
online blender gives you the most power

00:08:47,460 --> 00:08:52,490
to control textures and meshes but it's

00:08:50,400 --> 00:08:54,470
also the one causing those headache

00:08:52,490 --> 00:08:57,110
so you'll have to decide what's right

00:08:54,470 --> 00:08:58,700
for you but you should pay attention to

00:08:57,110 --> 00:09:00,170
how you set up your meshes in terms of

00:08:58,700 --> 00:09:01,820
ambient light properties diffuse

00:09:00,170 --> 00:09:03,709
properties whether your normals are

00:09:01,820 --> 00:09:05,420
correct all these have effects on

00:09:03,709 --> 00:09:07,730
whether your models show up at all

00:09:05,420 --> 00:09:09,440
whether they have whether they look

00:09:07,730 --> 00:09:11,149
light or dark things along those lines

00:09:09,440 --> 00:09:13,160
and you can go online and look through

00:09:11,149 --> 00:09:15,350
some of our tutorials and our mailing

00:09:13,160 --> 00:09:17,060
list and i can give you lots of tips and

00:09:15,350 --> 00:09:19,310
tricks but i myself am not an expert

00:09:17,060 --> 00:09:23,959
this is getting into the realm of

00:09:19,310 --> 00:09:25,190
artists and i am not an artist so when

00:09:23,959 --> 00:09:26,810
you're doing this you should also keep

00:09:25,190 --> 00:09:29,029
in mind that these measures are going to

00:09:26,810 --> 00:09:32,779
be put into simulation so you don't want

00:09:29,029 --> 00:09:34,880
to have overly complex meshes and models

00:09:32,779 --> 00:09:36,770
which will unduly slow down and

00:09:34,880 --> 00:09:39,080
negatively impact your simulation so

00:09:36,770 --> 00:09:40,820
keep an eye out for really high polygon

00:09:39,080 --> 00:09:44,720
counts and you can play certain tricks

00:09:40,820 --> 00:09:47,690
like using light maps to make low

00:09:44,720 --> 00:09:49,610
polygon models look really good and

00:09:47,690 --> 00:09:51,050
again there's tutorials online that do

00:09:49,610 --> 00:09:55,610
this for you will tell you how to do

00:09:51,050 --> 00:09:57,980
this so you can organize your resources

00:09:55,610 --> 00:09:59,779
on a per project basis all you need to

00:09:57,980 --> 00:10:01,250
do is create a directory structure with

00:09:59,779 --> 00:10:03,560
your models and your materials and

00:10:01,250 --> 00:10:06,490
textures and tell gazebo about this by

00:10:03,560 --> 00:10:10,790
either using an environment variable or

00:10:06,490 --> 00:10:12,920
using an API call both operate in the

00:10:10,790 --> 00:10:17,089
same way and you can adjust this as you

00:10:12,920 --> 00:10:19,520
need for your various projects so

00:10:17,089 --> 00:10:21,709
another note on efficiency when you're

00:10:19,520 --> 00:10:23,570
creating your environments anything that

00:10:21,709 --> 00:10:26,390
doesn't need to be simulated dynamically

00:10:23,570 --> 00:10:29,149
as in doesn't need to let's say role

00:10:26,390 --> 00:10:30,800
when you push it or fall down you should

00:10:29,149 --> 00:10:34,700
define this as being static this

00:10:30,800 --> 00:10:37,310
bypasses the dynamic update step in the

00:10:34,700 --> 00:10:39,740
physics engine it's a lot more efficient

00:10:37,310 --> 00:10:41,920
at the cost of it doesn't actually have

00:10:39,740 --> 00:10:44,029
mass or inertia and any of those

00:10:41,920 --> 00:10:46,610
properties however you can still collide

00:10:44,029 --> 00:10:48,200
with it and recently in gazebo one point

00:10:46,610 --> 00:10:49,760
oh there's an animation engine which

00:10:48,200 --> 00:10:51,410
lets you animate these things so you can

00:10:49,760 --> 00:10:55,180
still move them around through a

00:10:51,410 --> 00:10:57,860
programmatic way via plugin or a topic

00:10:55,180 --> 00:10:59,810
when you're constructing models you can

00:10:57,860 --> 00:11:01,490
do you can struct them in a variety of

00:10:59,810 --> 00:11:04,190
ways so this is a very simple example of

00:11:01,490 --> 00:11:05,960
a table if you want to attach the top of

00:11:04,190 --> 00:11:08,330
the table to a set of legs you

00:11:05,960 --> 00:11:09,920
can use either joints which add

00:11:08,330 --> 00:11:11,660
additional constraints to your system

00:11:09,920 --> 00:11:13,760
and therefore slows everything down in

00:11:11,660 --> 00:11:16,250
this case it's it's kind of silly to do

00:11:13,760 --> 00:11:18,200
that because the constraints are ideally

00:11:16,250 --> 00:11:21,500
0 at all times so it has to solve this

00:11:18,200 --> 00:11:24,440
very rigid stiff constraint so ideally

00:11:21,500 --> 00:11:26,540
you would make this as a composite link

00:11:24,440 --> 00:11:28,520
that is composed of multiple collision

00:11:26,540 --> 00:11:32,780
objects which improves efficiency and

00:11:28,520 --> 00:11:35,900
still maintains the same behavior and of

00:11:32,780 --> 00:11:37,820
course in the ideal world gazebo looks

00:11:35,900 --> 00:11:40,430
exactly like the real world we're not

00:11:37,820 --> 00:11:42,920
quite there yet so this slide is mostly

00:11:40,430 --> 00:11:44,330
a set of pointers to go by when you're

00:11:42,920 --> 00:11:46,820
sitting down and creating your own world

00:11:44,330 --> 00:11:49,910
and you don't bang your head against the

00:11:46,820 --> 00:11:52,670
wall so start out simple that's a number

00:11:49,910 --> 00:11:53,930
one rule of thumb slowly add things to

00:11:52,670 --> 00:11:55,310
your environment so you understand

00:11:53,930 --> 00:11:56,870
exactly what you're doing and how

00:11:55,310 --> 00:12:00,530
parameter different parameters affect

00:11:56,870 --> 00:12:02,680
the way gazebo looks and how it acts so

00:12:00,530 --> 00:12:04,970
things like start with one light source

00:12:02,680 --> 00:12:06,470
it's amazing how far you can get with

00:12:04,970 --> 00:12:08,030
one light source and I see lots of

00:12:06,470 --> 00:12:09,860
worlds all the time with 20 different

00:12:08,030 --> 00:12:14,320
light sources and they wonder why things

00:12:09,860 --> 00:12:17,840
look strange so if you're familiar with

00:12:14,320 --> 00:12:19,400
vertex shaders and per pixel shaders you

00:12:17,840 --> 00:12:22,040
can easily add these in just put them in

00:12:19,400 --> 00:12:25,760
your resource path ogre and gazebo

00:12:22,040 --> 00:12:27,290
handle these nicely just use them as you

00:12:25,760 --> 00:12:30,530
will if you want to contribute back

00:12:27,290 --> 00:12:33,320
please patches I love new fancy visual

00:12:30,530 --> 00:12:36,770
effects if you want to add some more

00:12:33,320 --> 00:12:38,900
interesting features like a dynamic sky

00:12:36,770 --> 00:12:42,380
moving clouds that's all taken care of

00:12:38,900 --> 00:12:44,030
for for you in SDF and you can add fog

00:12:42,380 --> 00:12:46,100
and various parameters of that nature to

00:12:44,030 --> 00:12:49,340
give a sense of distance and depth of

00:12:46,100 --> 00:12:52,190
field so at this point I'm going to hand

00:12:49,340 --> 00:12:54,580
it over to John to talk about robot

00:12:52,190 --> 00:12:54,580
modeling

00:12:59,240 --> 00:13:05,910
alright thanks Nate uh that's good

00:13:02,850 --> 00:13:07,320
introduction for gazebo I think and I'm

00:13:05,910 --> 00:13:11,880
going to talk a little bit about robot

00:13:07,320 --> 00:13:13,740
modeling and specifically it's quite a

00:13:11,880 --> 00:13:16,140
bit of effort to build a good

00:13:13,740 --> 00:13:19,650
representation of a robot in simulation

00:13:16,140 --> 00:13:21,630
but before we start I think we should

00:13:19,650 --> 00:13:24,570
probably think about what is the model

00:13:21,630 --> 00:13:28,920
and obvious it looks like that this is

00:13:24,570 --> 00:13:30,840
kind of the representation for row for

00:13:28,920 --> 00:13:33,900
robot model in simulation so base is a

00:13:30,840 --> 00:13:38,640
collection of lengths joint sensors

00:13:33,900 --> 00:13:40,320
actuators and plugins and you need both

00:13:38,640 --> 00:13:47,040
of these components to have a functional

00:13:40,320 --> 00:13:52,440
robot that can perform useful tasks so

00:13:47,040 --> 00:13:55,470
if your physics guy like me I consider a

00:13:52,440 --> 00:13:58,070
few balls on a spring robot model and

00:13:55,470 --> 00:14:02,340
you can do this quite easily in gazebo

00:13:58,070 --> 00:14:04,770
here is just a few spheres that are on

00:14:02,340 --> 00:14:06,660
this prismatic joint and they're

00:14:04,770 --> 00:14:08,430
attached vs spring at different

00:14:06,660 --> 00:14:16,170
frequencies different spring stiffness

00:14:08,430 --> 00:14:17,910
and let's see yeah and somewhat and the

00:14:16,170 --> 00:14:19,500
springs can be similar at via the

00:14:17,910 --> 00:14:25,890
physics engine or I can be done by a

00:14:19,500 --> 00:14:30,780
plugin another example is a simple robot

00:14:25,890 --> 00:14:32,970
arm something like a scarer arm and you

00:14:30,780 --> 00:14:35,600
can actually hang code the senior idea

00:14:32,970 --> 00:14:38,490
with a text editor in about 10 minutes

00:14:35,600 --> 00:14:41,460
that's one i think i like about you RDF

00:14:38,490 --> 00:14:43,260
but normally you built a simplified

00:14:41,460 --> 00:14:47,970
version of the model for debugging

00:14:43,260 --> 00:14:50,100
purposes with very with as much a few

00:14:47,970 --> 00:14:52,470
joints as you can and less visual

00:14:50,100 --> 00:14:54,570
effects but then you can evolve the

00:14:52,470 --> 00:14:55,830
model at better looking visualization

00:14:54,570 --> 00:14:58,010
meshes and have better coalition

00:14:55,830 --> 00:15:02,520
measures and they can look much better

00:14:58,010 --> 00:15:03,840
in the end so here I think these models

00:15:02,520 --> 00:15:05,550
comes

00:15:03,840 --> 00:15:07,800
if you check out gazebo as if now you

00:15:05,550 --> 00:15:13,740
should get all three of these robot

00:15:07,800 --> 00:15:17,160
models in the source code all right so

00:15:13,740 --> 00:15:19,680
maybe this is preaching to the choir but

00:15:17,160 --> 00:15:22,500
why do we need a 3d dynamics simulator

00:15:19,680 --> 00:15:24,420
and there are many simulation fidelity

00:15:22,500 --> 00:15:26,580
there's many simulators out there for

00:15:24,420 --> 00:15:31,410
different purposes things like stage for

00:15:26,580 --> 00:15:35,040
2d simulation from a 3d perspective a

00:15:31,410 --> 00:15:36,770
couple things that gazebo can do I feel

00:15:35,040 --> 00:15:39,090
like I should highlight are the

00:15:36,770 --> 00:15:42,060
basically dynamic simulation this means

00:15:39,090 --> 00:15:46,700
constraint richer body dynamics with

00:15:42,060 --> 00:15:50,070
contacts and there's some caveat though

00:15:46,700 --> 00:15:52,710
given that web based off of the open

00:15:50,070 --> 00:15:55,970
source projects OD and bullet they are

00:15:52,710 --> 00:15:58,170
essentially LCP type of solvers so

00:15:55,970 --> 00:16:00,830
there's this trade-off game you have to

00:15:58,170 --> 00:16:03,360
play between having a very accurate

00:16:00,830 --> 00:16:06,690
quad-core accurate dynamic simulation

00:16:03,360 --> 00:16:10,560
and efficient real-time safe simulation

00:16:06,690 --> 00:16:13,560
so you can have the looks right what I

00:16:10,560 --> 00:16:15,810
call the low-frequency dynamics but

00:16:13,560 --> 00:16:18,270
interactive so it's good for debugging

00:16:15,810 --> 00:16:20,850
your code running real time you can look

00:16:18,270 --> 00:16:22,110
at the screen you can adjust tell the

00:16:20,850 --> 00:16:24,240
operation bar and see how the robot

00:16:22,110 --> 00:16:26,610
moves and make sure that everything else

00:16:24,240 --> 00:16:29,280
through the chain of software comments

00:16:26,610 --> 00:16:31,800
gets passed down correctly or there's

00:16:29,280 --> 00:16:34,340
the non interactive version if you're

00:16:31,800 --> 00:16:37,080
not patient you can crank up the

00:16:34,340 --> 00:16:39,090
accuracy of the physics solver and let

00:16:37,080 --> 00:16:43,320
it run overnight for regression testing

00:16:39,090 --> 00:16:47,460
for example or things like Monte Carlo

00:16:43,320 --> 00:16:49,590
simulations and types of analysis that

00:16:47,460 --> 00:16:53,310
you wouldn't do looking at the GUI

00:16:49,590 --> 00:16:54,840
screen so in addition to dynamics

00:16:53,310 --> 00:16:59,010
there's visual stimulation as night to

00:16:54,840 --> 00:17:03,080
mentioned we use ogre to produce 3d

00:16:59,010 --> 00:17:05,750
images range depth sensor data and

00:17:03,080 --> 00:17:08,700
lastly to tie everything together

00:17:05,750 --> 00:17:11,100
closing loop between visual in dynamic

00:17:08,700 --> 00:17:13,590
simulation that's one of the benefits

00:17:11,100 --> 00:17:15,950
you get from a simulation engine light

00:17:13,590 --> 00:17:15,950
gazebo

00:17:17,419 --> 00:17:24,809
so too I guess to avoid simulation ism

00:17:22,350 --> 00:17:27,470
where you debug your code your Bureau

00:17:24,809 --> 00:17:30,779
model you test everything out then you

00:17:27,470 --> 00:17:33,659
pour everything to the robot and get

00:17:30,779 --> 00:17:35,549
some totally unexpected result it's

00:17:33,659 --> 00:17:37,289
important to understand I think the

00:17:35,549 --> 00:17:39,629
underlying processes that's going on

00:17:37,289 --> 00:17:41,999
inside a simulation engine I just want

00:17:39,629 --> 00:17:45,269
to highlight some of the main points I

00:17:41,999 --> 00:17:47,309
think that important so in can see both

00:17:45,269 --> 00:17:50,580
the equations of motions are modeled by

00:17:47,309 --> 00:17:53,090
the Newton Euler equations and it's

00:17:50,580 --> 00:17:56,460
using a first-order time integration

00:17:53,090 --> 00:17:59,190
which means the your air bound goes down

00:17:56,460 --> 00:18:01,279
linearly with the time step size the

00:17:59,190 --> 00:18:04,379
constraints currently our frictionless

00:18:01,279 --> 00:18:06,749
joints they can be revolute or prismatic

00:18:04,379 --> 00:18:10,919
as David mentioned earlier with the you

00:18:06,749 --> 00:18:15,690
idiot intro and collision in simulation

00:18:10,919 --> 00:18:19,940
right now the odeon bullet can do

00:18:15,690 --> 00:18:23,279
inelastic collisions quite nicely but

00:18:19,940 --> 00:18:24,600
elastic collisions are still something

00:18:23,279 --> 00:18:28,769
that we need to work on to make it

00:18:24,600 --> 00:18:33,179
better and lastly for contact dynamics

00:18:28,769 --> 00:18:36,269
the the friction the friction is being

00:18:33,179 --> 00:18:40,169
simulated as a friction pyramid rather

00:18:36,269 --> 00:18:47,970
than a perfect person comb and that's

00:18:40,169 --> 00:18:52,289
for efficiency purposes alright so once

00:18:47,970 --> 00:18:54,149
you start modeling the robot in there's

00:18:52,289 --> 00:18:57,749
a couple you might have seen worse like

00:18:54,149 --> 00:18:59,820
you idea of an SDF normal I wanted to

00:18:57,749 --> 00:19:04,100
talk a little bit about your IDF was

00:18:59,820 --> 00:19:06,090
developed as a efficient subset of

00:19:04,100 --> 00:19:08,970
information about robot model that's

00:19:06,090 --> 00:19:14,940
needed by various components in Ross

00:19:08,970 --> 00:19:17,129
such as TF such as the robot mechanism

00:19:14,940 --> 00:19:20,490
control or motion planning or simulation

00:19:17,129 --> 00:19:25,240
engine and on the other hand SDF is

00:19:20,490 --> 00:19:28,260
written for gazebos specifically it

00:19:25,240 --> 00:19:34,780
accounts for more things things like

00:19:28,260 --> 00:19:38,250
lighting sensors physics seen OpenGL

00:19:34,780 --> 00:19:41,580
descriptions shading for example are all

00:19:38,250 --> 00:19:46,630
encompassed in the SDF this group

00:19:41,580 --> 00:19:49,360
redundant but SDF the main differences

00:19:46,630 --> 00:19:51,690
between you IDF and STFU have a tree

00:19:49,360 --> 00:19:54,640
structural requirement versus a graph

00:19:51,690 --> 00:19:56,800
where in your idea you right now that

00:19:54,640 --> 00:20:00,070
requires that the kinematic chain is a

00:19:56,800 --> 00:20:03,610
tree which means every every link has

00:20:00,070 --> 00:20:05,440
only one parent the transformations are

00:20:03,610 --> 00:20:07,870
defined in a way that the parent of the

00:20:05,440 --> 00:20:10,360
link is another parent and I want to

00:20:07,870 --> 00:20:12,310
mention this because in SDF all the

00:20:10,360 --> 00:20:16,570
links inside the model are parented from

00:20:12,310 --> 00:20:19,780
the model coordinate system so in Ross

00:20:16,570 --> 00:20:21,550
there's your IDF to SDF converter in the

00:20:19,780 --> 00:20:23,250
Ross package and know that details are

00:20:21,550 --> 00:20:25,960
on the wiki that you can look at

00:20:23,250 --> 00:20:28,390
currently there's a some of the models

00:20:25,960 --> 00:20:31,330
that I mentioned earlier in simple ones

00:20:28,390 --> 00:20:33,400
that I shipped with gazebo and of course

00:20:31,330 --> 00:20:37,270
we encourage people to contribute by

00:20:33,400 --> 00:20:39,430
other email or patches and soon so

00:20:37,270 --> 00:20:42,970
hopefully soon we'll have online model

00:20:39,430 --> 00:20:46,110
database that we can use for people to

00:20:42,970 --> 00:20:46,110
submit models more easily

00:20:50,000 --> 00:20:55,220
okay this might be very basic but I

00:20:52,040 --> 00:20:58,310
thought I should mention it briefly so

00:20:55,220 --> 00:21:02,660
what's inside of a link link is defined

00:20:58,310 --> 00:21:04,520
by inertia coalition and visual and the

00:21:02,660 --> 00:21:07,850
inertia term is essentially just the M

00:21:04,520 --> 00:21:09,950
in FMA the collision geometry is used by

00:21:07,850 --> 00:21:12,560
the collision detection algorithm to

00:21:09,950 --> 00:21:15,110
generate contact joints which are fed to

00:21:12,560 --> 00:21:21,050
the physics engine for updating dynamics

00:21:15,110 --> 00:21:23,240
and and lastly the visual geometry which

00:21:21,050 --> 00:21:26,840
can be specified separately is used by

00:21:23,240 --> 00:21:29,180
the rendering engine to generate images

00:21:26,840 --> 00:21:36,560
for either GUI or for the camera sensors

00:21:29,180 --> 00:21:39,400
in your model so a little bit about

00:21:36,560 --> 00:21:42,470
joints again this is rudimentary and

00:21:39,400 --> 00:21:43,850
there are user-defined joints which are

00:21:42,470 --> 00:21:46,690
usually constraints and degrees of

00:21:43,850 --> 00:21:50,000
freedom between links they can be

00:21:46,690 --> 00:21:51,410
prismatic revolute we have a there's a

00:21:50,000 --> 00:21:56,110
revolute two joints which were designed

00:21:51,410 --> 00:21:59,210
for car like suspension constraints and

00:21:56,110 --> 00:22:01,880
other ones such as universal ballscrew

00:21:59,210 --> 00:22:06,110
joints which can be defined in your SDF

00:22:01,880 --> 00:22:09,710
or you IDF I believe yeah that's true

00:22:06,110 --> 00:22:11,660
and also there's dynamically created

00:22:09,710 --> 00:22:13,070
contact joints so these are again

00:22:11,660 --> 00:22:15,140
created by the collision detection

00:22:13,070 --> 00:22:18,760
engine and generate and remove

00:22:15,140 --> 00:22:18,760
dynamically at every update cycle

00:22:23,740 --> 00:22:30,309
so sensors gazebo supports a few sensors

00:22:27,580 --> 00:22:32,320
right now there's the camera tour Kinect

00:22:30,309 --> 00:22:36,010
sensor which generate images in point

00:22:32,320 --> 00:22:37,570
cloud based on the GPU there is a laser

00:22:36,010 --> 00:22:39,940
range sensor which gives you the

00:22:37,570 --> 00:22:42,970
distance to an object simulating a laser

00:22:39,940 --> 00:22:45,370
ray choice that can be done in both cpu

00:22:42,970 --> 00:22:47,530
and lately in there's a GPU

00:22:45,370 --> 00:22:49,750
implementation for it depending on your

00:22:47,530 --> 00:22:54,790
resource allocation eat you can shift it

00:22:49,750 --> 00:22:57,190
around the also there's contact sensors

00:22:54,790 --> 00:22:59,380
which gives you back the coalition

00:22:57,190 --> 00:23:01,030
information such as the forces at a

00:22:59,380 --> 00:23:05,710
contact and normal the contact position

00:23:01,030 --> 00:23:07,330
in and the last two the RFID sensor

00:23:05,710 --> 00:23:10,300
which gives you back kind of the

00:23:07,330 --> 00:23:14,140
relative model pose relative model

00:23:10,300 --> 00:23:17,370
position information and the force

00:23:14,140 --> 00:23:20,200
torque sensor which gives the force

00:23:17,370 --> 00:23:22,900
approximation at the joints right now

00:23:20,200 --> 00:23:24,340
we're looking to extend that to a more

00:23:22,900 --> 00:23:31,570
general force torque sensor in the

00:23:24,340 --> 00:23:33,340
future so another thing to keep in mind

00:23:31,570 --> 00:23:35,320
when building robot models how to keep

00:23:33,340 --> 00:23:37,900
it efficient especially a lot of the

00:23:35,320 --> 00:23:43,750
application requires real time or near

00:23:37,900 --> 00:23:46,750
real-time performance there's a couple

00:23:43,750 --> 00:23:48,970
of main bottlenecks that I listed here

00:23:46,750 --> 00:23:54,450
they are physics collision and rendering

00:23:48,970 --> 00:23:54,450
so the physics which is cpu-based

00:23:54,510 --> 00:24:00,370
basically the it's driven by the number

00:23:57,910 --> 00:24:01,809
of joints in the model which could come

00:24:00,370 --> 00:24:03,520
from either contact joints or

00:24:01,809 --> 00:24:04,929
user-defined joints in general it's a

00:24:03,520 --> 00:24:08,410
good idea to keep the number of joints

00:24:04,929 --> 00:24:11,650
to a minimal if you can also the if you

00:24:08,410 --> 00:24:13,990
can model if you model a closed-loop

00:24:11,650 --> 00:24:17,290
kinematic it's obviously it's going to

00:24:13,990 --> 00:24:23,380
take longer to solve than a tree tree

00:24:17,290 --> 00:24:27,220
like structure and for collision

00:24:23,380 --> 00:24:30,190
detection the one thing to keep in mind

00:24:27,220 --> 00:24:32,919
is that geometric primitives are much

00:24:30,190 --> 00:24:35,679
more efficient for the engines than a

00:24:32,919 --> 00:24:37,180
try mesh and this is obvious because you

00:24:35,679 --> 00:24:38,770
have to compare the

00:24:37,180 --> 00:24:40,540
you have to go through the list of

00:24:38,770 --> 00:24:45,160
triangles of a try mesh when you're

00:24:40,540 --> 00:24:47,410
doing the collision detection so either

00:24:45,160 --> 00:24:50,920
you stick with try to use primitive

00:24:47,410 --> 00:24:53,740
collision geometries or keep the number

00:24:50,920 --> 00:24:56,710
of tri mesh as slow as possible and this

00:24:53,740 --> 00:24:59,700
as a rule of thumb I you know I put this

00:24:56,710 --> 00:25:02,500
number of 5k that's based on my desktop

00:24:59,700 --> 00:25:06,280
for the pr2 running a real time for link

00:25:02,500 --> 00:25:09,550
so that number may vary depends on your

00:25:06,280 --> 00:25:13,990
computational resource similarly for the

00:25:09,550 --> 00:25:15,850
GPU if you have try mesh a rendering

00:25:13,990 --> 00:25:19,900
visual you want to keep the number of

00:25:15,850 --> 00:25:22,860
triangles low so since that the image

00:25:19,900 --> 00:25:26,140
sensor generation is done by the GPU

00:25:22,860 --> 00:25:29,140
that is also potentially could be a

00:25:26,140 --> 00:25:30,910
resource intensive process so if you're

00:25:29,140 --> 00:25:34,120
trying to simulate a 5 megapixel camera

00:25:30,910 --> 00:25:38,490
in summation you can't expect a 20 Hertz

00:25:34,120 --> 00:25:38,490
update rate for example on a desktop

00:25:43,299 --> 00:25:49,179
so in case that the accuracy of dynamics

00:25:47,470 --> 00:25:51,220
is important to you there's a couple

00:25:49,179 --> 00:25:53,230
things I want to mention of how to make

00:25:51,220 --> 00:25:57,429
the simulation more accurate more

00:25:53,230 --> 00:26:00,220
accurate and since we're currently stuck

00:25:57,429 --> 00:26:03,669
with the maximal appointed formulation

00:26:00,220 --> 00:26:05,919
for dynamics there's the few things we

00:26:03,669 --> 00:26:11,110
can do are controlling this time step

00:26:05,919 --> 00:26:13,419
size how to pick a time step size for a

00:26:11,110 --> 00:26:17,080
dynamic model typically this is driven

00:26:13,419 --> 00:26:19,960
by something like a dynamic control

00:26:17,080 --> 00:26:22,389
around your robot so if your MCB is

00:26:19,960 --> 00:26:24,549
running at kilohertz you probably don't

00:26:22,389 --> 00:26:26,440
want to go pick a lower frequency than

00:26:24,549 --> 00:26:28,749
that so for example the pr2 is one kill

00:26:26,440 --> 00:26:30,820
heard the pr2 simulator is current

00:26:28,749 --> 00:26:33,460
currently set at one kill her for

00:26:30,820 --> 00:26:36,779
efficiency purposes and it turns out

00:26:33,460 --> 00:26:39,039
that the we didn't have to change the

00:26:36,779 --> 00:26:41,559
PID gains for most of the joints

00:26:39,039 --> 00:26:47,109
probably by luck and that chair too is a

00:26:41,559 --> 00:26:49,389
pretty dynamically benign model but if

00:26:47,109 --> 00:26:51,159
you decrease the time step size as I

00:26:49,389 --> 00:26:53,739
said it's the error decreases linear

00:26:51,159 --> 00:27:00,759
with dt and you can get a better model

00:26:53,739 --> 00:27:03,700
but with the cost of performance so on

00:27:00,759 --> 00:27:05,679
the other side there's the there's many

00:27:03,700 --> 00:27:09,309
parameters in the solver that you can

00:27:05,679 --> 00:27:10,480
tweak to make things perform better one

00:27:09,309 --> 00:27:14,590
of the obvious will not want to point

00:27:10,480 --> 00:27:16,720
out is this ITER's parameter which is

00:27:14,590 --> 00:27:19,090
essentially the number of integrations

00:27:16,720 --> 00:27:21,309
for the constraint for satisfaction

00:27:19,090 --> 00:27:24,009
algorithm and you can look it up if

00:27:21,309 --> 00:27:26,859
you're curious I think there is some

00:27:24,009 --> 00:27:31,119
documentation on the wiki young how the

00:27:26,859 --> 00:27:33,929
inner workings of the LCP type solvers

00:27:31,119 --> 00:27:38,679
there's probably a lot of documentation

00:27:33,929 --> 00:27:42,220
and the last point is that if you're

00:27:38,679 --> 00:27:44,769
modeling the physics there's certain

00:27:42,220 --> 00:27:47,950
amount of emission that is done when you

00:27:44,769 --> 00:27:50,320
model a robot so for example most of the

00:27:47,950 --> 00:27:54,419
joints are the transmission that's are

00:27:50,320 --> 00:27:54,419
not modeled on the pr2 they're simply a

00:27:56,000 --> 00:28:03,890
a revolute joint for example and so with

00:28:00,650 --> 00:28:05,960
that you if you want better simulation

00:28:03,890 --> 00:28:08,630
you actually have to go into the details

00:28:05,960 --> 00:28:11,180
of a joint and model the components and

00:28:08,630 --> 00:28:13,340
again that's going to be computationally

00:28:11,180 --> 00:28:16,010
heavy but you can get better results

00:28:13,340 --> 00:28:19,010
that way one thing I want to mention is

00:28:16,010 --> 00:28:21,440
the for example the pr2 gripper which

00:28:19,010 --> 00:28:25,880
has a very low efficiency but high

00:28:21,440 --> 00:28:27,920
mechanical reduction joint and to

00:28:25,880 --> 00:28:29,810
simulate that as a simple prismatic

00:28:27,920 --> 00:28:32,210
joint actually turns out to be less

00:28:29,810 --> 00:28:33,530
efficient than simulating as a screw

00:28:32,210 --> 00:28:37,840
joint which has two components are

00:28:33,530 --> 00:28:42,020
rotational in a prismatic portion so

00:28:37,840 --> 00:28:45,250
those are the things that kind of makes

00:28:42,020 --> 00:28:48,020
a lot of difference when you model robot

00:28:45,250 --> 00:28:49,970
so now that suppose you have a robot

00:28:48,020 --> 00:28:51,920
modeled in simulation and it's up and

00:28:49,970 --> 00:28:54,020
running you turn at you you hit the

00:28:51,920 --> 00:28:56,230
start button the robots it's there maybe

00:28:54,020 --> 00:28:59,210
the arms fall down that's pretty much in

00:28:56,230 --> 00:29:01,370
what we inside a gazebo we have a

00:28:59,210 --> 00:29:03,320
convenient tool for you to interact with

00:29:01,370 --> 00:29:05,690
the joints you can specify John torques

00:29:03,320 --> 00:29:08,660
and you can specify PID term some

00:29:05,690 --> 00:29:10,700
velocity and position for the for each

00:29:08,660 --> 00:29:14,870
of the joints into the model so it's a

00:29:10,700 --> 00:29:16,700
nice quick test to make sure that things

00:29:14,870 --> 00:29:21,740
are moving correctly the joints are in

00:29:16,700 --> 00:29:23,600
the right locations and to move forward

00:29:21,740 --> 00:29:24,980
with simulation normally the next step

00:29:23,600 --> 00:29:28,160
is to come up with a programmatic

00:29:24,980 --> 00:29:30,680
control so you have to decide what level

00:29:28,160 --> 00:29:35,690
of abstraction is needed to model the

00:29:30,680 --> 00:29:39,260
robots software input I 0 for the again

00:29:35,690 --> 00:29:42,560
take pr2 for example things are broken

00:29:39,260 --> 00:29:44,150
down at the Rost level so the plugins in

00:29:42,560 --> 00:29:46,670
the simulation essentially broadcasts

00:29:44,150 --> 00:29:49,400
the same interface in terms of ross

00:29:46,670 --> 00:29:51,560
topics and services which means all the

00:29:49,400 --> 00:29:56,530
higher level components can be then can

00:29:51,560 --> 00:30:02,120
be reused with minimal adjustment and

00:29:56,530 --> 00:30:04,160
the way to program the interface the the

00:30:02,120 --> 00:30:08,120
best approach is probably to use plugins

00:30:04,160 --> 00:30:09,290
and as mentioned or we'll cover this

00:30:08,120 --> 00:30:09,779
later on but there are different levels

00:30:09,290 --> 00:30:11,429
of

00:30:09,779 --> 00:30:13,259
against world plugins which gives you

00:30:11,429 --> 00:30:15,570
access to all the models inside the

00:30:13,259 --> 00:30:18,119
world or model plugins which has a

00:30:15,570 --> 00:30:20,279
narrow scope essentially just the model

00:30:18,119 --> 00:30:25,109
that you attach it to and you have

00:30:20,279 --> 00:30:30,779
access to the links and a joint all

00:30:25,109 --> 00:30:32,519
right so last last few slides on robot

00:30:30,779 --> 00:30:35,999
modeling I want to mention some of the

00:30:32,519 --> 00:30:40,049
common pitfalls that people see in

00:30:35,999 --> 00:30:45,779
simulation and there's a video there

00:30:40,049 --> 00:30:47,549
before I play that there's because the

00:30:45,779 --> 00:30:49,950
visual in the collision measures are

00:30:47,549 --> 00:30:52,219
decoupled so a lot of times things to

00:30:49,950 --> 00:30:55,859
come up mismatched with wrong scale or

00:30:52,219 --> 00:30:57,779
the joints are located in correctly so

00:30:55,859 --> 00:30:59,729
there are nice visualization tools

00:30:57,779 --> 00:31:01,200
inside a cosy vocally that lets you view

00:30:59,729 --> 00:31:04,979
things to make sure things are right

00:31:01,200 --> 00:31:10,139
this is an example of what I call self

00:31:04,979 --> 00:31:13,049
up writing cup and what happens is your

00:31:10,139 --> 00:31:14,429
model cups or plates and you try to tip

00:31:13,049 --> 00:31:19,469
them over they come back on themselves

00:31:14,429 --> 00:31:22,320
so that's usually this is caused by

00:31:19,469 --> 00:31:25,950
things like CG being outside of the body

00:31:22,320 --> 00:31:28,499
of the model and again you can visualize

00:31:25,950 --> 00:31:36,419
CG location so the GUI is a pretty handy

00:31:28,499 --> 00:31:38,279
tool for first order debugging so from

00:31:36,419 --> 00:31:44,820
entering a lot of the answers to our

00:31:38,279 --> 00:31:47,219
questions or this is kind of what you

00:31:44,820 --> 00:31:49,619
see typically you start simulation in

00:31:47,219 --> 00:31:50,879
your model disappear then you look

00:31:49,619 --> 00:31:55,979
around and later on the folds down

00:31:50,879 --> 00:31:58,669
somewhere else far away so I blame to

00:31:55,979 --> 00:32:02,009
sound the interpenetration correction of

00:31:58,669 --> 00:32:04,049
the of the physics tension and there's

00:32:02,009 --> 00:32:06,379
been some work done to try to make that

00:32:04,049 --> 00:32:10,960
better in the future in the near future

00:32:06,379 --> 00:32:15,399
and these videos are unreal

00:32:10,960 --> 00:32:17,110
but but so that's what the so when you

00:32:15,399 --> 00:32:18,909
bring up the GUI so the way to fixes is

00:32:17,110 --> 00:32:20,770
either you start up the GUI and use the

00:32:18,909 --> 00:32:22,539
you step through the simulation one step

00:32:20,770 --> 00:32:28,029
at a time to see where the penetration

00:32:22,539 --> 00:32:37,630
occurs or basically spawn your object

00:32:28,029 --> 00:32:40,950
away from all the other objects so this

00:32:37,630 --> 00:32:44,980
example I don't have a nice video if I'd

00:32:40,950 --> 00:32:46,390
then bother reproducing but in the

00:32:44,980 --> 00:32:48,279
beginning when we started the PRT

00:32:46,390 --> 00:32:50,200
simulation or I'm sure a lot of you've

00:32:48,279 --> 00:32:52,120
seen this where you model your robot you

00:32:50,200 --> 00:32:55,419
start simulation and the arms kind of

00:32:52,120 --> 00:32:59,320
tour around in the crazy way and the

00:32:55,419 --> 00:33:01,270
robot dances around there's a few bugs

00:32:59,320 --> 00:33:03,250
that were fixed along the way to make

00:33:01,270 --> 00:33:05,500
that behavior go away but you can still

00:33:03,250 --> 00:33:07,390
do it if you write if you use improper

00:33:05,500 --> 00:33:10,149
values of inertia so you have a plug-in

00:33:07,390 --> 00:33:14,740
applies to larger force to the body part

00:33:10,149 --> 00:33:16,919
and most the time you can do you can

00:33:14,740 --> 00:33:19,419
figure out I salay the problem by

00:33:16,919 --> 00:33:22,720
disabling the plugins or you can do it

00:33:19,419 --> 00:33:25,179
by decreasing the number of time steps

00:33:22,720 --> 00:33:28,570
and stepping through the physics slowly

00:33:25,179 --> 00:33:35,770
to see where the instability originates

00:33:28,570 --> 00:33:37,120
from some of the harder to fix problems

00:33:35,770 --> 00:33:40,149
with the physics engine and that's kind

00:33:37,120 --> 00:33:45,880
of the quirk of this LCP style solver is

00:33:40,149 --> 00:33:50,230
that as I mentioned earlier for for

00:33:45,880 --> 00:33:54,360
numerically stiff systems or if you have

00:33:50,230 --> 00:33:56,710
connected body with large mass ratios so

00:33:54,360 --> 00:33:59,409
you start simulation and the things are

00:33:56,710 --> 00:34:02,980
just jittering around non non stop so

00:33:59,409 --> 00:34:05,860
look at if you look at that pendulum in

00:34:02,980 --> 00:34:08,109
the car so you can fix this one of

00:34:05,860 --> 00:34:11,800
several ways one is by reducing the

00:34:08,109 --> 00:34:14,139
stiffness in your system by so oh D has

00:34:11,800 --> 00:34:16,030
this blurb that recommends all the mass

00:34:14,139 --> 00:34:18,490
be unit masses but you don't have to go

00:34:16,030 --> 00:34:21,909
to that extreme you can help by just

00:34:18,490 --> 00:34:24,020
knowing if you're connecting a 1000

00:34:21,909 --> 00:34:27,110
kilogram body to some

00:34:24,020 --> 00:34:30,200
that's one gram and then you kind of

00:34:27,110 --> 00:34:32,390
expect the system to be much stiffer you

00:34:30,200 --> 00:34:35,270
can correct it by increasing the number

00:34:32,390 --> 00:34:37,880
of iterations for the solution so that's

00:34:35,270 --> 00:34:40,040
where that either parameter comes in

00:34:37,880 --> 00:34:43,870
handy or you could do it by decreasing

00:34:40,040 --> 00:34:47,720
the time step size and that's kind of

00:34:43,870 --> 00:34:50,090
the the two main things that I would

00:34:47,720 --> 00:34:52,010
recommend tweaking with if you're having

00:34:50,090 --> 00:34:53,899
trouble with it dynamically correct

00:34:52,010 --> 00:35:00,980
getting correct dynamic behavior of your

00:34:53,899 --> 00:35:03,740
simulation okay so I'm going to hand

00:35:00,980 --> 00:35:09,620
back to my colleagues night to finish up

00:35:03,740 --> 00:35:12,170
with some physical interfaces okay

00:35:09,620 --> 00:35:18,890
thanks John so the last bit that we're

00:35:12,170 --> 00:35:22,310
going to talk about is how to interface

00:35:18,890 --> 00:35:23,750
your code to gazebo so ideally you have

00:35:22,310 --> 00:35:25,700
all these environments and models and

00:35:23,750 --> 00:35:27,200
you want to do something interesting fun

00:35:25,700 --> 00:35:29,660
and cool with it so how do you go about

00:35:27,200 --> 00:35:32,090
doing that we've mentioned plugins which

00:35:29,660 --> 00:35:35,360
gives you a lot of control over gazebo

00:35:32,090 --> 00:35:37,190
and it can also come at a certain

00:35:35,360 --> 00:35:39,380
expense so you can do lots of bad things

00:35:37,190 --> 00:35:40,850
but we figure it's better to let you

00:35:39,380 --> 00:35:43,460
have complete control than too little

00:35:40,850 --> 00:35:45,350
control so there's four different types

00:35:43,460 --> 00:35:47,090
of plugins that you can use one being

00:35:45,350 --> 00:35:48,470
system level plugins which are loaded

00:35:47,090 --> 00:35:51,380
directly from the command line so these

00:35:48,470 --> 00:35:53,720
are actually loaded before gazebo begins

00:35:51,380 --> 00:35:55,610
its initialization process so you can

00:35:53,720 --> 00:35:59,060
control exactly how Zeebo is brought up

00:35:55,610 --> 00:36:00,740
let's say we're level plugins are a

00:35:59,060 --> 00:36:02,720
little bit more low level so a world

00:36:00,740 --> 00:36:04,490
that is spawned it has stuff in it you

00:36:02,720 --> 00:36:06,350
can create a plug-in for that and

00:36:04,490 --> 00:36:09,260
control all the models in the entire

00:36:06,350 --> 00:36:10,670
world a little bit lower is a model

00:36:09,260 --> 00:36:12,650
level plugin which is probably the most

00:36:10,670 --> 00:36:13,940
common plug-in that you'll deal with and

00:36:12,650 --> 00:36:15,950
this is a plug-in that's directly

00:36:13,940 --> 00:36:19,100
connected to a specific model within the

00:36:15,950 --> 00:36:21,650
world and you can do things like control

00:36:19,100 --> 00:36:24,170
the position of a ba model set its

00:36:21,650 --> 00:36:26,000
velocity control the links to do things

00:36:24,170 --> 00:36:28,250
like have a differential drive or

00:36:26,000 --> 00:36:31,600
inverse command inverse kinematic

00:36:28,250 --> 00:36:34,400
controller let's say and slightly

00:36:31,600 --> 00:36:36,230
analogous to that is having a controller

00:36:34,400 --> 00:36:37,509
for sensors so you can do things like

00:36:36,230 --> 00:36:39,849
past data around

00:36:37,509 --> 00:36:45,429
apply noise models any kind of filtering

00:36:39,849 --> 00:36:48,039
that you want so the there's lots of

00:36:45,429 --> 00:36:51,149
documentation on how to create plugins

00:36:48,039 --> 00:36:53,319
I'm not going to go into the sea level

00:36:51,149 --> 00:36:55,059
abstraction of how to go about doing it

00:36:53,319 --> 00:36:57,489
but it's a very thin wrapper that

00:36:55,059 --> 00:36:58,989
requires a very just a few very specific

00:36:57,489 --> 00:37:02,739
lines of code and then you can do pretty

00:36:58,989 --> 00:37:06,969
much anything you want so there's two

00:37:02,739 --> 00:37:08,889
sets of plugins there's gazebo specific

00:37:06,969 --> 00:37:10,989
plugins that exist in the gazebo sources

00:37:08,889 --> 00:37:15,039
and there's Ross plugins that act as a

00:37:10,989 --> 00:37:17,409
bridge between gazebo and Ross so that

00:37:15,039 --> 00:37:20,499
interfaces is pretty minimal it's

00:37:17,409 --> 00:37:22,119
essentially taking data from topics and

00:37:20,499 --> 00:37:24,849
services and bin and translating them

00:37:22,119 --> 00:37:28,269
into a format that gazebo can understand

00:37:24,849 --> 00:37:31,059
and use so if you happen to have or

00:37:28,269 --> 00:37:32,529
develop plugins along the way please

00:37:31,059 --> 00:37:37,079
contribute them back either in Ross

00:37:32,529 --> 00:37:41,319
packages or to the gazebo website and

00:37:37,079 --> 00:37:42,729
through track on there oh and in the

00:37:41,319 --> 00:37:46,539
future along with the model database

00:37:42,729 --> 00:37:49,059
we're going to have the option to upload

00:37:46,539 --> 00:37:50,259
and browse people's plugins so that you

00:37:49,059 --> 00:37:53,889
can see what people have done in the

00:37:50,259 --> 00:37:56,619
past and contribute plugins for specific

00:37:53,889 --> 00:38:00,699
models or worlds so we're going to group

00:37:56,619 --> 00:38:03,819
source this thing so the other way you

00:38:00,699 --> 00:38:06,130
can talk with gazebo is through inter

00:38:03,819 --> 00:38:07,809
process communication via sockets so

00:38:06,130 --> 00:38:10,389
this is extremely similar to Ross in

00:38:07,809 --> 00:38:15,009
fact when we rewrote this it we pretty

00:38:10,389 --> 00:38:17,949
much had Ross and then gazebo and did a

00:38:15,009 --> 00:38:20,079
lot of copying so it looks very similar

00:38:17,949 --> 00:38:23,559
so if you're happy and familiar with the

00:38:20,079 --> 00:38:25,149
way Ross works you can get up to speed

00:38:23,559 --> 00:38:27,099
pretty quickly with the way gazebo works

00:38:25,149 --> 00:38:30,939
the main difference is that we use

00:38:27,099 --> 00:38:32,919
Google proto buffs to do our message

00:38:30,939 --> 00:38:35,739
passing and serialization and all that

00:38:32,919 --> 00:38:37,959
stuff so when do you use topics and want

00:38:35,739 --> 00:38:39,909
to use plugins so topics are great if

00:38:37,959 --> 00:38:42,189
you want to run the server remotely and

00:38:39,909 --> 00:38:44,049
you want to run your code and some other

00:38:42,189 --> 00:38:46,630
location if you want to start and stop

00:38:44,049 --> 00:38:48,159
your client code many times and let the

00:38:46,630 --> 00:38:51,369
server keep running then you probably

00:38:48,159 --> 00:38:53,289
should use topics if you want direct

00:38:51,369 --> 00:38:55,329
low level control to the way gazebo

00:38:53,289 --> 00:38:57,910
operates you should probably use plugins

00:38:55,329 --> 00:38:59,710
then and typically what people use is a

00:38:57,910 --> 00:39:01,660
combination of these two so you write a

00:38:59,710 --> 00:39:04,869
plug-in that does something specific

00:39:01,660 --> 00:39:08,259
within gazebo expose that through a

00:39:04,869 --> 00:39:13,720
topic and then have some code talk to

00:39:08,259 --> 00:39:16,180
that plugin via topic so unrelated to

00:39:13,720 --> 00:39:17,440
topics and plugins we had to throw in a

00:39:16,180 --> 00:39:20,799
slide about the various command line

00:39:17,440 --> 00:39:22,599
tools that we have available so similar

00:39:20,799 --> 00:39:24,519
to Ross topic there's a jeezy topic to

00:39:22,599 --> 00:39:27,279
see exactly what topics are being

00:39:24,519 --> 00:39:28,769
published information about them if you

00:39:27,279 --> 00:39:30,819
want to see the current status of

00:39:28,769 --> 00:39:32,380
simulator without bringing up the GUI

00:39:30,819 --> 00:39:34,210
you can run gz stats and that gives you

00:39:32,380 --> 00:39:35,890
all the information about performance

00:39:34,210 --> 00:39:40,119
whether it's paused running that type of

00:39:35,890 --> 00:39:42,069
thing gz factory allows you to spawn and

00:39:40,119 --> 00:39:44,890
remove models from a running simulation

00:39:42,069 --> 00:39:48,039
and this is very similar to the gazebo

00:39:44,890 --> 00:39:51,309
the gazebo version in ross of spawn

00:39:48,039 --> 00:39:54,190
model but this takes you rdf specific

00:39:51,309 --> 00:39:56,680
code and spawns it into gazebo and if

00:39:54,190 --> 00:39:59,319
you want to generate take you RDF

00:39:56,680 --> 00:40:03,819
convert it into a siebel format you can

00:39:59,319 --> 00:40:06,730
use a you rdf to model so there's lots

00:40:03,819 --> 00:40:10,239
of places to get help from answers ross

00:40:06,730 --> 00:40:13,269
org to our mailing list to the wiki and

00:40:10,239 --> 00:40:16,239
the tutorials online you can ask me

00:40:13,269 --> 00:40:18,279
today and tomorrow anything that you

00:40:16,239 --> 00:40:20,470
want to contribute or work on let us

00:40:18,279 --> 00:40:26,289
know we're happy to help in any way

00:40:20,470 --> 00:40:28,619
shape that we can so with that have any

00:40:26,289 --> 00:40:28,619
questions

00:40:35,980 --> 00:40:40,460
the question was can you parameterize

00:40:38,119 --> 00:40:44,480
plugins yes so the way plugins are

00:40:40,460 --> 00:40:48,800
defined is it's a single line of XML and

00:40:44,480 --> 00:40:51,880
you can put in any amount of XML tags

00:40:48,800 --> 00:40:55,190
within that element that you want and

00:40:51,880 --> 00:40:57,920
read it in your plugin so there's you

00:40:55,190 --> 00:40:59,150
can reference other links within a model

00:40:57,920 --> 00:41:01,550
you can reference other models within

00:40:59,150 --> 00:41:03,170
world you can put in your own custom

00:41:01,550 --> 00:41:05,089
parameters so for example there's a diff

00:41:03,170 --> 00:41:07,700
drive plug in and you can specify

00:41:05,089 --> 00:41:10,970
parameters that are along the lines of

00:41:07,700 --> 00:41:13,819
which links are the wheels and the wheel

00:41:10,970 --> 00:41:17,210
radius sighs and go from there this

00:41:13,819 --> 00:41:19,369
question is can I talk a little bit more

00:41:17,210 --> 00:41:24,920
about the human character model in

00:41:19,369 --> 00:41:27,349
gazebo so this that video was a ongoing

00:41:24,920 --> 00:41:29,359
work of intern at Willow Garage called

00:41:27,349 --> 00:41:33,140
his name is Neha dola from University of

00:41:29,359 --> 00:41:35,420
tongue Munich and he's integrating the

00:41:33,140 --> 00:41:38,990
ability to take motion-capture data and

00:41:35,420 --> 00:41:41,630
apply it to human skeleton mesh and

00:41:38,990 --> 00:41:44,299
animate that so we're currently at the

00:41:41,630 --> 00:41:46,940
point where we're at the level of

00:41:44,299 --> 00:41:49,190
working out why a model jitters a little

00:41:46,940 --> 00:41:51,530
so it's like ninety-five percent done

00:41:49,190 --> 00:41:53,900
within the next release you'll have

00:41:51,530 --> 00:41:56,540
complete access so if you take say the

00:41:53,900 --> 00:41:58,849
CMU motion cap dataset or create your

00:41:56,540 --> 00:42:00,200
own data set you can apply it to a model

00:41:58,849 --> 00:42:02,809
within gazebo and have characters

00:42:00,200 --> 00:42:04,130
walking around so any support for

00:42:02,809 --> 00:42:08,780
distributed simulation that's a great

00:42:04,130 --> 00:42:12,170
question so distributing the physics

00:42:08,780 --> 00:42:14,540
engine is somewhat complicated and you

00:42:12,170 --> 00:42:16,609
can you could think of it in terms of

00:42:14,540 --> 00:42:20,349
breaking it apart in a few different

00:42:16,609 --> 00:42:22,910
ways you can either distribute say the

00:42:20,349 --> 00:42:24,170
models at different machines or you can

00:42:22,910 --> 00:42:28,280
segment the world in two different

00:42:24,170 --> 00:42:32,780
locations we've talked about this off

00:42:28,280 --> 00:42:36,349
and on however the most bang for our

00:42:32,780 --> 00:42:38,720
buck is currently optimizing our current

00:42:36,349 --> 00:42:41,390
physics simulations and once we enter

00:42:38,720 --> 00:42:43,430
the realm of well we we have no more

00:42:41,390 --> 00:42:45,140
room to go in terms of computational

00:42:43,430 --> 00:42:46,609
power to simulate the environments that

00:42:45,140 --> 00:42:48,320
we need then we'll have to start looking

00:42:46,609 --> 00:42:51,740
at how to distribute it but it's a

00:42:48,320 --> 00:42:56,420
it's a hard problem so sometime in the

00:42:51,740 --> 00:42:59,390
future maybe but not right now so the

00:42:56,420 --> 00:43:02,960
question is can I in the old gazebo we

00:42:59,390 --> 00:43:07,010
could specify a mean and Gaussian to add

00:43:02,960 --> 00:43:12,200
noise to a model right now does not

00:43:07,010 --> 00:43:15,830
exist however creating Gaussian noise is

00:43:12,200 --> 00:43:19,490
fairly easy so that the tools to do it

00:43:15,830 --> 00:43:20,960
are there if you send an email to the

00:43:19,490 --> 00:43:25,550
mailing list that means I'll work on it

00:43:20,960 --> 00:43:29,240
faster and you can contribute patches

00:43:25,550 --> 00:43:31,480
yes I think in the in the Ross plug in

00:43:29,240 --> 00:43:35,570
there is a parameter for a Gaussian

00:43:31,480 --> 00:43:38,810
noise for some of the i believe the

00:43:35,570 --> 00:43:40,880
position data that's being generated so

00:43:38,810 --> 00:43:42,770
you can certainly write a plug-in that

00:43:40,880 --> 00:43:45,530
takes in those parameters and have your

00:43:42,770 --> 00:43:46,940
own simple model that generates that

00:43:45,530 --> 00:43:50,210
adds noise to the data coming from

00:43:46,940 --> 00:43:52,010
gazebo that's okay I have two questions

00:43:50,210 --> 00:43:57,100
so I'll take one from this side and one

00:43:52,010 --> 00:44:00,680
from this side good so the question was

00:43:57,100 --> 00:44:02,990
have people done more sophisticated work

00:44:00,680 --> 00:44:06,890
in terms of adding just adding noise

00:44:02,990 --> 00:44:10,760
that's not Gaussian to mimic real life

00:44:06,890 --> 00:44:13,430
sensor data so the most that we've done

00:44:10,760 --> 00:44:15,590
internally is being able to produce bear

00:44:13,430 --> 00:44:20,930
images of that nature that's not

00:44:15,590 --> 00:44:23,060
necessarily a noise model per se but we

00:44:20,930 --> 00:44:24,830
haven't received any word of people

00:44:23,060 --> 00:44:28,130
doing anything more complex that's not

00:44:24,830 --> 00:44:35,050
to say people haven't it just as them

00:44:28,130 --> 00:44:35,050
has done come across to my radar yet yes

00:44:35,740 --> 00:44:41,240
so I the question is can i happily run

00:44:38,779 --> 00:44:46,760
gazebo on my laptop it's unfortunate you

00:44:41,240 --> 00:44:49,519
said happily so it depends on what you

00:44:46,760 --> 00:44:52,400
want to get out of the simulation so I

00:44:49,519 --> 00:44:56,390
have a laptop that's two years old and I

00:44:52,400 --> 00:45:02,720
can run gazebo on it you have to set

00:44:56,390 --> 00:45:06,890
your expectations appropriately so if

00:45:02,720 --> 00:45:09,140
you want to generate the full pr2 sensor

00:45:06,890 --> 00:45:12,200
suite of data you're not going to be

00:45:09,140 --> 00:45:14,900
happy if you want to simulate some basic

00:45:12,200 --> 00:45:17,690
things maybe use the animation engine or

00:45:14,900 --> 00:45:21,619
a single camera or things along that

00:45:17,690 --> 00:45:32,720
nature then you might be happy ok that

00:45:21,619 --> 00:45:34,819
think that's it thanks thank you

00:45:32,720 --> 00:45:36,859
everyone we now have a break for a half

00:45:34,819 --> 00:45:39,170
hour so we've got will be resuming at

00:45:36,859 --> 00:45:41,329
four just a reminder if you if you're

00:45:39,170 --> 00:45:43,130
like to do a lightning talk please catch

00:45:41,329 --> 00:45:45,680
up with Ken Conley by the end of the

00:45:43,130 --> 00:45:46,910
break and also we know that the day is

00:45:45,680 --> 00:45:48,710
getting late the talks are going to be

00:45:46,910 --> 00:45:50,990
going faster and faster until we get the

00:45:48,710 --> 00:45:53,230
three-minute / talk at the at the end of

00:45:50,990 --> 00:45:53,230

YouTube URL: https://www.youtube.com/watch?v=FB4O4B4SMys


