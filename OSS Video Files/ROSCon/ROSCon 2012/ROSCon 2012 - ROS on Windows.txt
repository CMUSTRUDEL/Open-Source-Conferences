Title: ROSCon 2012 - ROS on Windows
Publication date: 2014-08-31
Playlist: ROSCon 2012
Description: 
	Daniel Stonier
ROS on Windows
Slides: http://files.yujinrobot.com/win_ros/presentations/roscon_2012/win_ros.pdf
Captions: 
	00:00:03,340 --> 00:00:09,230
all right good afternoon everyone the

00:00:06,800 --> 00:00:11,930
this is the the last session of Ross con

00:00:09,230 --> 00:00:17,630
and keeping that in mind all of these

00:00:11,930 --> 00:00:20,450
talks are fairly short so the the first

00:00:17,630 --> 00:00:24,650
talk is given by Dan Stoney from Eugene

00:00:20,450 --> 00:00:26,960
robot and his topic is Ross on Windows

00:00:24,650 --> 00:00:29,620
which I know we're all very intrigued to

00:00:26,960 --> 00:00:29,620
see how that's going

00:01:18,980 --> 00:01:32,990
okay alrighty today I'm just going to

00:01:31,730 --> 00:01:36,050
give an overview on what we've been

00:01:32,990 --> 00:01:37,970
doing in this area over the last year or

00:01:36,050 --> 00:01:41,570
two it's been pretty slow progress it's

00:01:37,970 --> 00:01:43,220
just a small side project it will also

00:01:41,570 --> 00:01:44,780
be a little bit of an intro to catkin

00:01:43,220 --> 00:01:46,730
which i think probably most of you

00:01:44,780 --> 00:01:49,520
aren't aware of yet but it's slipped in

00:01:46,730 --> 00:01:52,040
under the radar for fret areas Ross's

00:01:49,520 --> 00:01:58,130
new build system you probably won't

00:01:52,040 --> 00:01:59,270
really see that until groovy as Ryan

00:01:58,130 --> 00:02:01,220
said we don't have much time that was

00:01:59,270 --> 00:02:02,810
going to do some demos but I'll just

00:02:01,220 --> 00:02:04,730
keep it to screenshots if people want to

00:02:02,810 --> 00:02:07,700
see some live demos afterwards you can

00:02:04,730 --> 00:02:10,510
catch up with me then ok when I think of

00:02:07,700 --> 00:02:12,800
Windows on Ross I usually think of this

00:02:10,510 --> 00:02:17,570
I think it's probably the most unloved

00:02:12,800 --> 00:02:19,100
topic here in this room in my case I

00:02:17,570 --> 00:02:24,140
feel that way a little bit too which is

00:02:19,100 --> 00:02:26,660
a bit sad difficulty I think at the

00:02:24,140 --> 00:02:28,820
moment is we have two kinds of people

00:02:26,660 --> 00:02:31,670
we've got people like us where lonex

00:02:28,820 --> 00:02:34,850
deaths we absolutely don't want to do

00:02:31,670 --> 00:02:37,250
any Windows programming and then you've

00:02:34,850 --> 00:02:39,110
got Windows devs who take a look at

00:02:37,250 --> 00:02:41,030
grass and I've been contacted by quite a

00:02:39,110 --> 00:02:42,500
few over the last year and a half and

00:02:41,030 --> 00:02:44,510
they really want to get involved but

00:02:42,500 --> 00:02:47,630
they look at the build environment go

00:02:44,510 --> 00:02:55,550
whoa I have no idea what to do and they

00:02:47,630 --> 00:02:58,400
disappear after about a week you know

00:02:55,550 --> 00:03:00,050
ideal world we could just we could play

00:02:58,400 --> 00:03:02,150
in Linux and Windows guys would play in

00:03:00,050 --> 00:03:05,080
Windows so why should we try and I know

00:03:02,150 --> 00:03:08,150
each other and get this thing working

00:03:05,080 --> 00:03:10,880
these are a few use cases which have

00:03:08,150 --> 00:03:13,520
cropped up at my company when I came

00:03:10,880 --> 00:03:16,340
into Eugene it was a 100 percent window

00:03:13,520 --> 00:03:18,350
shop and I very quickly grabbed the

00:03:16,340 --> 00:03:21,800
control systems put them on a Linux

00:03:18,350 --> 00:03:24,560
board and after about a year or so and

00:03:21,800 --> 00:03:27,170
moved them to Ross so in a Windows

00:03:24,560 --> 00:03:28,519
environment not only with the rest of my

00:03:27,170 --> 00:03:30,890
company but with most of the rest of

00:03:28,519 --> 00:03:32,620
Korea you've got users you've got

00:03:30,890 --> 00:03:35,680
factory guys you've got tens

00:03:32,620 --> 00:03:37,540
most of them are running Windows so I

00:03:35,680 --> 00:03:39,310
very quickly had to find a way to

00:03:37,540 --> 00:03:42,879
connect otherwise our Control Board was

00:03:39,310 --> 00:03:45,340
going to be very isolated so I had to

00:03:42,879 --> 00:03:47,110
supply some tools for which the test

00:03:45,340 --> 00:03:48,519
engineers could test with for which the

00:03:47,110 --> 00:03:51,069
factory engineers could monitor the

00:03:48,519 --> 00:03:52,629
robot with and a little bit later it's

00:03:51,069 --> 00:03:56,430
starting to happen now where we need to

00:03:52,629 --> 00:03:58,450
connect with the software teams so

00:03:56,430 --> 00:04:00,190
initially we were just looking at

00:03:58,450 --> 00:04:02,799
developing to some simple quick Windows

00:04:00,190 --> 00:04:06,519
programs dump that on the on the factory

00:04:02,799 --> 00:04:08,440
engineer and run with that but you've

00:04:06,519 --> 00:04:10,209
got other reasons as well some sensors

00:04:08,440 --> 00:04:14,200
only have Windows drivers

00:04:10,209 --> 00:04:16,600
that's quite often an issue over the

00:04:14,200 --> 00:04:18,609
last year we've been interacting with

00:04:16,600 --> 00:04:20,049
groups either software groups or groups

00:04:18,609 --> 00:04:21,729
with Windows robots or Windows

00:04:20,049 --> 00:04:25,360
interfaces and we need to actually build

00:04:21,729 --> 00:04:28,860
a bridge to them and often you'll want

00:04:25,360 --> 00:04:34,479
to use a PC sitting in a room somewhere

00:04:28,860 --> 00:04:37,600
that's almost always Windows so our

00:04:34,479 --> 00:04:40,300
goals are fairly modest we're not aiming

00:04:37,600 --> 00:04:42,280
to recreate the entire Ross ecosystem

00:04:40,300 --> 00:04:44,229
that's something that I don't think can

00:04:42,280 --> 00:04:45,850
be done on Windows it's just a really

00:04:44,229 --> 00:04:48,070
complex system and Windows doesn't scale

00:04:45,850 --> 00:04:50,800
for that particularly with regards to

00:04:48,070 --> 00:04:51,370
the third-party libraries your raw step

00:04:50,800 --> 00:04:53,530
system

00:04:51,370 --> 00:04:58,539
there's just nothing which replaces our

00:04:53,530 --> 00:05:01,150
AA step on Windows so we're just aiming

00:04:58,539 --> 00:05:04,270
to recreate the Ross runtime the Ross

00:05:01,150 --> 00:05:11,530
comms so we can communicate particularly

00:05:04,270 --> 00:05:13,419
the messages and the giri's over the

00:05:11,530 --> 00:05:16,570
last two and a half years I've seen

00:05:13,419 --> 00:05:19,000
three relatively big hacks from Windows

00:05:16,570 --> 00:05:23,200
users trying to port Ross to Windows and

00:05:19,000 --> 00:05:24,520
they've all just disappeared the biggest

00:05:23,200 --> 00:05:26,680
problem is that built environments so

00:05:24,520 --> 00:05:29,770
these guys have taken Ross package by

00:05:26,680 --> 00:05:33,849
package often and built package by

00:05:29,770 --> 00:05:35,380
package the dependencies as well and as

00:05:33,849 --> 00:05:37,539
soon as Ross upgrades to the next

00:05:35,380 --> 00:05:39,639
version it's a lot of work to do that

00:05:37,539 --> 00:05:40,690
all again it's not an incremental way of

00:05:39,639 --> 00:05:44,110
managing it and so that build

00:05:40,690 --> 00:05:46,370
environment just kills it so

00:05:44,110 --> 00:05:48,200
if you avoid the building environment

00:05:46,370 --> 00:05:49,490
it's just not going to happen the first

00:05:48,200 --> 00:05:51,230
thing we had to sort of really tackle

00:05:49,490 --> 00:05:53,750
was to to make sure that build

00:05:51,230 --> 00:05:57,590
environment was compatible on with what

00:05:53,750 --> 00:06:01,240
we have in Ross on Linux so the big

00:05:57,590 --> 00:06:01,240
problem is that make files on the bash

00:06:01,360 --> 00:06:06,920
so at the end of Diamondback Troy

00:06:05,270 --> 00:06:08,870
Strauss I made will I started working on

00:06:06,920 --> 00:06:12,800
a new C make Python base build

00:06:08,870 --> 00:06:18,320
environment and I'll start giving an

00:06:12,800 --> 00:06:20,060
intro into how that works ok so the

00:06:18,320 --> 00:06:21,470
original Ross build it had the make all

00:06:20,060 --> 00:06:23,930
the back also the bat I forgot to add

00:06:21,470 --> 00:06:27,500
there so we're just moving to a purely C

00:06:23,930 --> 00:06:30,380
make plus Python build environment it's

00:06:27,500 --> 00:06:32,240
going to be very disruptive it's really

00:06:30,380 --> 00:06:34,400
gone under the radar at the moment

00:06:32,240 --> 00:06:36,320
you can link to it you could still build

00:06:34,400 --> 00:06:39,590
the old way with Ross build that will

00:06:36,320 --> 00:06:42,080
eventually disappear but it has some

00:06:39,590 --> 00:06:44,240
considerable benefits you've got a much

00:06:42,080 --> 00:06:46,310
faster build you're only running C make

00:06:44,240 --> 00:06:48,440
on your project on your package on the

00:06:46,310 --> 00:06:49,940
whole system one time previously when

00:06:48,440 --> 00:06:51,440
you did Ross make your Ross making few

00:06:49,940 --> 00:06:53,690
robot you're probably compiling

00:06:51,440 --> 00:06:55,910
something like 200 packages like we have

00:06:53,690 --> 00:06:59,180
for our robots so you'll come in Vic

00:06:55,910 --> 00:07:02,150
indicating see make 200 times and that's

00:06:59,180 --> 00:07:02,960
a huge cost for a compile it

00:07:02,150 --> 00:07:05,120
cross-platform

00:07:02,960 --> 00:07:08,000
so I'm also using this for cross

00:07:05,120 --> 00:07:10,160
compiling on ARM chips it's really easy

00:07:08,000 --> 00:07:12,200
to setup for cross compiling it's easy

00:07:10,160 --> 00:07:15,890
to set up for cross compiling with mingw

00:07:12,200 --> 00:07:18,250
and it's also easy to set up on a

00:07:15,890 --> 00:07:20,530
Windows machine for Microsoft compiler

00:07:18,250 --> 00:07:22,460
it separates a source from the build

00:07:20,530 --> 00:07:26,000
always a clean thing to do

00:07:22,460 --> 00:07:27,710
got more standard usage a lot of the

00:07:26,000 --> 00:07:31,250
calls that we were doing with custom

00:07:27,710 --> 00:07:32,720
Ross XXX calls in C make they've gone

00:07:31,250 --> 00:07:36,140
back to trying to make it as standard as

00:07:32,720 --> 00:07:37,360
possible I keep things as unsurprising

00:07:36,140 --> 00:07:40,160
as possible for the new user

00:07:37,360 --> 00:07:42,800
it's got iOS integration it's got an

00:07:40,160 --> 00:07:45,490
install step and packaging is will also

00:07:42,800 --> 00:07:45,490
be a lot easier

00:07:48,599 --> 00:07:53,429
so at the moment the current release

00:07:51,119 --> 00:07:55,679
Furret a you can have packages which are

00:07:53,429 --> 00:07:59,909
either Rossville the original style or

00:07:55,679 --> 00:08:02,279
catkin and you can see willow has

00:07:59,909 --> 00:08:05,879
converted their core stacks to catkin

00:08:02,279 --> 00:08:07,349
just to try a lot for friday everybody

00:08:05,879 --> 00:08:08,849
else's tax they've managed to link

00:08:07,349 --> 00:08:10,589
things in such a way so that it's

00:08:08,849 --> 00:08:15,029
completely compatible with existing

00:08:10,589 --> 00:08:16,770
stacks so you get willows core stacks

00:08:15,029 --> 00:08:18,179
and then you bring in your own stacks on

00:08:16,770 --> 00:08:23,099
top and you can still compile the old

00:08:18,179 --> 00:08:26,330
way eventually that first circle I hope

00:08:23,099 --> 00:08:30,569
will subscribe the second circle and

00:08:26,330 --> 00:08:36,149
windows on Ross is also using the CAC

00:08:30,569 --> 00:08:39,240
and stacks so a bit of history in

00:08:36,149 --> 00:08:41,550
electric Troy was proof of concept in

00:08:39,240 --> 00:08:43,560
the the idea you probably would have

00:08:41,550 --> 00:08:46,079
seen that in the packages if you saw a

00:08:43,560 --> 00:08:49,620
Ross PLC make in some of the core

00:08:46,079 --> 00:08:51,600
packages that was the alternate built in

00:08:49,620 --> 00:08:53,069
ferrate you no longer have an eternal

00:08:51,600 --> 00:08:55,230
build it's now exclusive one of the

00:08:53,069 --> 00:09:00,000
other and hopefully coming groovy and

00:08:55,230 --> 00:09:02,069
Beyond will be all the way to catkin so

00:09:00,000 --> 00:09:04,850
to change your package to a catkin

00:09:02,069 --> 00:09:07,019
package it's a little bit undefined yet

00:09:04,850 --> 00:09:11,790
there's not much documentation it's

00:09:07,019 --> 00:09:14,339
probably going to change this is a the

00:09:11,790 --> 00:09:16,410
two areas where it changes one is in

00:09:14,339 --> 00:09:18,360
your manifest at XML it drops out a lot

00:09:16,410 --> 00:09:19,769
of the requirements there the other one

00:09:18,360 --> 00:09:22,860
is in your C make C make is where

00:09:19,769 --> 00:09:24,329
everything happens now so you can see

00:09:22,860 --> 00:09:26,009
you define your project at the top with

00:09:24,329 --> 00:09:27,689
a catkin project call that's it's a few

00:09:26,009 --> 00:09:29,759
variables and and sets things up for

00:09:27,689 --> 00:09:32,250
your package when you look for

00:09:29,759 --> 00:09:34,939
dependencies now you do things that seem

00:09:32,250 --> 00:09:37,620
like way you use a fine package call and

00:09:34,939 --> 00:09:40,110
all of the other catkin packages built

00:09:37,620 --> 00:09:42,000
by Ross will generate C make fine

00:09:40,110 --> 00:09:44,040
package modules so it integrates with

00:09:42,000 --> 00:09:48,930
that your dependencies now will require

00:09:44,040 --> 00:09:50,279
on fine package calls as well your

00:09:48,930 --> 00:09:51,660
messaging system is a little bit

00:09:50,279 --> 00:09:54,259
different you can see that there in the

00:09:51,660 --> 00:09:54,259
green as well

00:09:57,790 --> 00:10:04,370
so to build a set of catkin stacks this

00:10:02,810 --> 00:10:07,070
is what it looks like you also installed

00:10:04,370 --> 00:10:08,240
your your list of stacks you put that

00:10:07,070 --> 00:10:10,460
into a source directory you make a

00:10:08,240 --> 00:10:13,460
parallel build directory and then you

00:10:10,460 --> 00:10:21,620
just invocate see make compile it make

00:10:13,460 --> 00:10:24,980
install very simple this is the see make

00:10:21,620 --> 00:10:29,720
step you can see it's traversing the

00:10:24,980 --> 00:10:31,670
entire stack tree it starts out with

00:10:29,720 --> 00:10:33,610
catkin which sets everything up and down

00:10:31,670 --> 00:10:35,420
below in the red you can see it

00:10:33,610 --> 00:10:41,690
traversing the different stacks that

00:10:35,420 --> 00:10:51,280
have been built by catkin okay going

00:10:41,690 --> 00:10:53,930
back to Windows our game plan we've got

00:10:51,280 --> 00:10:55,040
in Eugene our control team we're not

00:10:53,930 --> 00:10:56,690
terribly interested in building huge

00:10:55,040 --> 00:10:58,330
windows apps we don't really want to go

00:10:56,690 --> 00:11:02,240
to Windows have to build a simple

00:10:58,330 --> 00:11:03,950
monitoring or Diagnostics app so we're

00:11:02,240 --> 00:11:06,440
quite happy using I mean job mingw

00:11:03,950 --> 00:11:08,570
cross-compiler to do that we do static

00:11:06,440 --> 00:11:10,460
bills which makes it fantastic for

00:11:08,570 --> 00:11:13,310
deployment we just give the factory

00:11:10,460 --> 00:11:16,160
engineer a static binary and we don't

00:11:13,310 --> 00:11:19,610
have any problems with deployment for

00:11:16,160 --> 00:11:21,500
cross-platform GUI zwi using QT so we

00:11:19,610 --> 00:11:24,170
can build these natively or we can build

00:11:21,500 --> 00:11:27,580
them with the mingw cross compiler so we

00:11:24,170 --> 00:11:27,580
can use them as well as the factory guys

00:11:27,760 --> 00:11:34,430
for Windows devs the typical build

00:11:32,990 --> 00:11:37,010
approach is to use one of the visual

00:11:34,430 --> 00:11:39,110
studio IDs so we're looking at packaging

00:11:37,010 --> 00:11:42,550
together an SDK for them and then they

00:11:39,110 --> 00:11:42,550
can do whatever they want on top of that

00:11:43,360 --> 00:11:51,950
okay the mingw cross compiler we're

00:11:46,400 --> 00:11:54,770
using mingw cross it's now branching out

00:11:51,950 --> 00:11:56,030
to be a much more bigger environment for

00:11:54,770 --> 00:11:57,560
different cross compilers as well but

00:11:56,030 --> 00:12:01,310
originally it was just the means UW

00:11:57,560 --> 00:12:07,279
cross compiler it's a fantastic little

00:12:01,310 --> 00:12:10,209
project you just download a a root tree

00:12:07,279 --> 00:12:12,589
and they've got build scripts for

00:12:10,209 --> 00:12:15,079
probably about 50 or 60 different

00:12:12,589 --> 00:12:17,149
packages already so you just tell it to

00:12:15,079 --> 00:12:20,509
compile you can drop this on Fedora

00:12:17,149 --> 00:12:20,990
Ubuntu again - it works the same way on

00:12:20,509 --> 00:12:24,470
all of them

00:12:20,990 --> 00:12:28,970
there's usually no problems so we drop

00:12:24,470 --> 00:12:31,519
that down onto the system I've got a

00:12:28,970 --> 00:12:33,259
package in Windrose which helps set that

00:12:31,519 --> 00:12:36,019
up it also adds a couple of utilities

00:12:33,259 --> 00:12:38,120
which help us with Ross it will go away

00:12:36,019 --> 00:12:40,009
and compile it takes about eight hours

00:12:38,120 --> 00:12:44,360
on a on a quad core to compile takes

00:12:40,009 --> 00:12:46,569
ages but once it's set up it's no

00:12:44,360 --> 00:12:46,569
problem

00:12:48,670 --> 00:12:53,829
okay it's not showing up very well

00:13:04,529 --> 00:13:19,049
or maybe don't touch that okay that's an

00:13:14,579 --> 00:13:21,899
example of compiling the core catkin

00:13:19,049 --> 00:13:22,439
stacks at the moment we ported the Ross

00:13:21,899 --> 00:13:25,259
coms

00:13:22,439 --> 00:13:27,109
the messages the the common stack will

00:13:25,259 --> 00:13:30,809
gradually add to that as we go along so

00:13:27,109 --> 00:13:32,429
cook it also compiles our QT Ross stack

00:13:30,809 --> 00:13:36,059
as well so we can build QT programs

00:13:32,429 --> 00:13:39,749
around it so it's like a typical see

00:13:36,059 --> 00:13:41,009
make call like the one we did before but

00:13:39,749 --> 00:13:43,049
here we're specifying two extra files

00:13:41,009 --> 00:13:46,799
are specifying a toolchain file i'm also

00:13:43,049 --> 00:13:48,569
specifying any ross config file these

00:13:46,799 --> 00:13:51,829
are two files to see make files which

00:13:48,569 --> 00:13:55,979
are located in the mean GW cross tree

00:13:51,829 --> 00:14:00,719
and they help define where your tool

00:13:55,979 --> 00:14:02,189
chain is where your system Rudy's and

00:14:00,719 --> 00:14:05,629
also some build variables particularly

00:14:02,189 --> 00:14:05,629
boost needs a bit of help to build

00:14:06,109 --> 00:14:12,569
so once you've configured you drop in

00:14:10,499 --> 00:14:13,619
your compiled you can compile you can

00:14:12,569 --> 00:14:15,989
install too but you don't need the

00:14:13,619 --> 00:14:17,159
install step for this process in this

00:14:15,989 --> 00:14:18,359
one is a little bit different you can

00:14:17,159 --> 00:14:21,659
actually drop into the particular

00:14:18,359 --> 00:14:23,609
package in your tree and just compile

00:14:21,659 --> 00:14:28,529
that one package you don't have to

00:14:23,609 --> 00:14:29,909
compile the whole thing this is an

00:14:28,529 --> 00:14:33,659
example this is the tool chain

00:14:29,909 --> 00:14:35,369
configuration file for mingw us this

00:14:33,659 --> 00:14:37,199
will this is standard for pretty much

00:14:35,369 --> 00:14:39,359
any cross compiler so I do the same

00:14:37,199 --> 00:14:40,649
thing with um cross compilers you just

00:14:39,359 --> 00:14:45,959
define the variables in the appropriate

00:14:40,649 --> 00:14:48,029
way in a way you go this is the C mate

00:14:45,959 --> 00:14:51,149
case variables are used for Ross so you

00:14:48,029 --> 00:14:53,399
can see I've got a couple of variables

00:14:51,149 --> 00:14:54,779
set to help boost particularly for

00:14:53,399 --> 00:15:00,629
static and power or some another

00:14:54,779 --> 00:15:04,919
variable which helps Windows to this is

00:15:00,629 --> 00:15:06,809
the end result so I have a with my basic

00:15:04,919 --> 00:15:08,219
QT Ross application to have a master

00:15:06,809 --> 00:15:09,599
chooser so you can use environment

00:15:08,219 --> 00:15:11,899
environment variables to find your

00:15:09,599 --> 00:15:17,309
master or you can plug in your URL and

00:15:11,899 --> 00:15:20,119
Ross IP that's been okay for about two

00:15:17,309 --> 00:15:20,119
years it's fairly safe

00:15:23,810 --> 00:15:27,290
this is really bad

00:15:39,340 --> 00:15:43,470
it's not be much at all so every that I

00:15:44,190 --> 00:15:49,210
hope those are too confusing

00:15:46,710 --> 00:15:54,880
moving on to to Windows and the

00:15:49,210 --> 00:15:58,600
Microsoft compiler this is a list of

00:15:54,880 --> 00:16:00,610
what we want to do to start out with we

00:15:58,600 --> 00:16:01,630
just need to make sure we have build

00:16:00,610 --> 00:16:03,300
scripts and installers for the

00:16:01,630 --> 00:16:07,240
choristers dependencies that's good

00:16:03,300 --> 00:16:11,290
we're using the Windows SDK which is

00:16:07,240 --> 00:16:12,940
great because it's free Express it was

00:16:11,290 --> 00:16:15,610
originally using Express but that one

00:16:12,940 --> 00:16:17,529
only comes with a 32-bit compiler so we

00:16:15,610 --> 00:16:20,710
dropped back to the SDK it gives you a

00:16:17,529 --> 00:16:23,200
32-bit 64-bit compiles using in the end

00:16:20,710 --> 00:16:26,170
make generator so it's very similar to

00:16:23,200 --> 00:16:32,260
the Ross environment and from that we we

00:16:26,170 --> 00:16:33,839
compile and we package the Ross SDK in

00:16:32,260 --> 00:16:36,100
the last couple of months we've got the

00:16:33,839 --> 00:16:37,690
runtime environment up and working as

00:16:36,100 --> 00:16:39,670
well so we've got raw score or stop

00:16:37,690 --> 00:16:43,000
across launch all of your standard

00:16:39,670 --> 00:16:46,710
command line variables running to so the

00:16:43,000 --> 00:16:50,440
goal with this is for my part is to get

00:16:46,710 --> 00:16:52,360
the build environment up to a point

00:16:50,440 --> 00:16:53,950
where Windows devs can just come in and

00:16:52,360 --> 00:16:55,870
they can start porting the stacks

00:16:53,950 --> 00:16:57,580
themselves and they don't have to worry

00:16:55,870 --> 00:16:59,260
about the build environment or upgrading

00:16:57,580 --> 00:17:01,000
the build environment also to make sure

00:16:59,260 --> 00:17:06,990
that they've got the tools they're ready

00:17:01,000 --> 00:17:06,990
to use and they can run with that

00:17:07,140 --> 00:17:12,400
haven't got much time there so breeze

00:17:09,670 --> 00:17:13,810
through this the Windows compiler is

00:17:12,400 --> 00:17:17,199
pretty much the same except you've got

00:17:13,810 --> 00:17:20,110
no cross compile call we've got a

00:17:17,199 --> 00:17:21,550
temporary posit or e4 patches so while

00:17:20,110 --> 00:17:28,000
they're getting upstream they can reside

00:17:21,550 --> 00:17:31,240
there with the SDK you can then build a

00:17:28,000 --> 00:17:34,630
project around it we've been doing some

00:17:31,240 --> 00:17:37,270
testing with MS Express I'll skip the

00:17:34,630 --> 00:17:40,780
run time give you some examples this is

00:17:37,270 --> 00:17:42,190
the runtime environment we've got a raw

00:17:40,780 --> 00:17:45,250
score running with the talk run listener

00:17:42,190 --> 00:17:46,990
there this one is using your MS Project

00:17:45,250 --> 00:17:48,370
setting up a talk where analysts are

00:17:46,990 --> 00:17:50,230
inside MS Project and running a raw

00:17:48,370 --> 00:17:53,640
score outside it gives you the full

00:17:50,230 --> 00:17:53,640
debugging environment as well

00:17:55,450 --> 00:18:00,490
if you're interested in helping the

00:18:00,850 --> 00:18:06,170
build environment needs a fair bit of

00:18:03,950 --> 00:18:07,880
intimate knowledge of the whole sea make

00:18:06,170 --> 00:18:10,220
Python catkin environment that's a

00:18:07,880 --> 00:18:11,810
pretty hard entry point if there are

00:18:10,220 --> 00:18:13,220
people interested in Windows we're

00:18:11,810 --> 00:18:14,690
almost at the point where it's easy to

00:18:13,220 --> 00:18:15,800
come in and just start doing reporting

00:18:14,690 --> 00:18:17,720
on of stacks

00:18:15,800 --> 00:18:20,360
so in conclusion we've got two methods

00:18:17,720 --> 00:18:22,880
your windows one for the linus guys the

00:18:20,360 --> 00:18:24,710
cross-compiler with the static means UW

00:18:22,880 --> 00:18:26,390
builds one for the windows devs

00:18:24,710 --> 00:18:27,830
I'm not sure we'll ever get Windows

00:18:26,390 --> 00:18:31,670
dudes really appreciating the power of

00:18:27,830 --> 00:18:34,700
the Ross built environment but at least

00:18:31,670 --> 00:18:44,830
we can provide a bridge across to our

00:18:34,700 --> 00:18:47,900
robots okay any questions Ross launch

00:18:44,830 --> 00:18:50,540
yes I've got some examples in the

00:18:47,900 --> 00:18:52,040
windows Ross repository it will launch

00:18:50,540 --> 00:18:54,500
the talk and listen a virus launch

00:18:52,040 --> 00:18:56,710
that's no problem okay thank you very

00:18:54,500 --> 00:18:56,710

YouTube URL: https://www.youtube.com/watch?v=N6UhwSzbKq0


