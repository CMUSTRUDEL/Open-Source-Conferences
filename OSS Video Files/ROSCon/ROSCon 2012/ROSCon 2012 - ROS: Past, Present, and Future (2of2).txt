Title: ROSCon 2012 - ROS: Past, Present, and Future (2of2)
Publication date: 2014-08-31
Playlist: ROSCon 2012
Description: 
	Keynote presentation by Morgan Quigley
Captions: 
	00:00:05,450 --> 00:00:12,120
okay so names uh nodes topics they all

00:00:08,940 --> 00:00:13,920
have names so the idea there is that you

00:00:12,120 --> 00:00:16,560
have say this localization system is

00:00:13,920 --> 00:00:20,640
taking in laser scans odometry maps and

00:00:16,560 --> 00:00:24,390
putting out robot poses the idea is that

00:00:20,640 --> 00:00:28,290
you have multiple ports you can connect

00:00:24,390 --> 00:00:29,700
them to each other at runtime the you

00:00:28,290 --> 00:00:31,410
can put them into namespaces so say you

00:00:29,700 --> 00:00:33,300
have actually two laser scanners like on

00:00:31,410 --> 00:00:36,329
the bottom there you they're identical

00:00:33,300 --> 00:00:37,710
they run the same driver node you would

00:00:36,329 --> 00:00:38,910
want to be able to distinguish the

00:00:37,710 --> 00:00:40,949
messages that they are outputting so you

00:00:38,910 --> 00:00:41,850
don't want to have a say you have one on

00:00:40,949 --> 00:00:43,920
the front of your obat on the back of

00:00:41,850 --> 00:00:45,960
robot if they both were broadcasting to

00:00:43,920 --> 00:00:47,039
the topic laser they would get all

00:00:45,960 --> 00:00:48,090
confused and you wouldn't be able to

00:00:47,039 --> 00:00:50,850
have a way of distinguishing which

00:00:48,090 --> 00:00:52,500
message belongs to which laser instead

00:00:50,850 --> 00:00:54,120
what you can do is we have this kind of

00:00:52,500 --> 00:00:56,309
colon equals sin tax on the command line

00:00:54,120 --> 00:00:58,890
and what that does is one that launches

00:00:56,309 --> 00:01:00,539
up it replaces everything the hard-coded

00:00:58,890 --> 00:01:02,190
strings called scan there and the laser

00:01:00,539 --> 00:01:04,350
driver it replaces it with front laser

00:01:02,190 --> 00:01:05,430
so you don't have to change the source

00:01:04,350 --> 00:01:06,750
code and recompile the source code

00:01:05,430 --> 00:01:08,700
because this can all happen on the fly

00:01:06,750 --> 00:01:11,130
you can do like a man line you can do it

00:01:08,700 --> 00:01:13,430
in automated way so they don't have to

00:01:11,130 --> 00:01:15,660
type these things all the time

00:01:13,430 --> 00:01:18,660
namespaces is an idea so that you can

00:01:15,660 --> 00:01:20,280
encapsulate the the set of strings that

00:01:18,660 --> 00:01:21,420
things work with and so they don't crush

00:01:20,280 --> 00:01:23,220
other ones just like we like to have

00:01:21,420 --> 00:01:25,430
directories on file systems so that we

00:01:23,220 --> 00:01:27,480
can have multiple files then readme.txt

00:01:25,430 --> 00:01:29,130
in this case we can do the same thing

00:01:27,480 --> 00:01:31,230
with these nodes and topic names you can

00:01:29,130 --> 00:01:33,210
push them all down into into namespaces

00:01:31,230 --> 00:01:34,410
we even used the the slash system

00:01:33,210 --> 00:01:35,760
because the file system is such a good

00:01:34,410 --> 00:01:38,400
idea and so working with so well for so

00:01:35,760 --> 00:01:41,850
long we'll use it again so the slash is

00:01:38,400 --> 00:01:43,710
essentially the namespace telander okay

00:01:41,850 --> 00:01:45,150
so messages messages are implemented by

00:01:43,710 --> 00:01:46,980
code generator this is one of things we

00:01:45,150 --> 00:01:50,210
learned from the stair project you can

00:01:46,980 --> 00:01:53,160
write messages by hand it's terrible

00:01:50,210 --> 00:01:54,210
it's just I mean you take basically what

00:01:53,160 --> 00:01:55,410
you wanted to have a small data

00:01:54,210 --> 00:01:56,610
structure you want to them take the data

00:01:55,410 --> 00:01:58,740
structure and serialize it in d

00:01:56,610 --> 00:02:00,050
sterilize it maybe make some md5 sums

00:01:58,740 --> 00:02:02,370
make sure it hasn't changed over time

00:02:00,050 --> 00:02:03,780
that's a great thing for code generator

00:02:02,370 --> 00:02:05,430
to do it's a terrible thing for human

00:02:03,780 --> 00:02:08,039
being to do we used to write them all by

00:02:05,430 --> 00:02:10,170
hand and it's just terrible well anyway

00:02:08,039 --> 00:02:11,760
so there's no the ross we have two

00:02:10,170 --> 00:02:13,020
thousand messages i checked out all the

00:02:11,760 --> 00:02:16,230
raw source code i could find on the

00:02:13,020 --> 00:02:17,910
internet and had my some script sift

00:02:16,230 --> 00:02:18,720
through it the interesting thing here is

00:02:17,910 --> 00:02:20,100
that graph on the

00:02:18,720 --> 00:02:22,290
right so that's showing the the number

00:02:20,100 --> 00:02:23,460
of data members in each message that I

00:02:22,290 --> 00:02:24,900
could find on all the Ross code I

00:02:23,460 --> 00:02:26,850
thought on the internet it looks like

00:02:24,900 --> 00:02:28,470
most of them are one two three or four

00:02:26,850 --> 00:02:29,940
fields per message which is great

00:02:28,470 --> 00:02:31,800
because the idea it there is you want to

00:02:29,940 --> 00:02:33,240
make it low friction to create new

00:02:31,800 --> 00:02:35,400
message types into factory

00:02:33,240 --> 00:02:36,930
functionalities multiple programs so we

00:02:35,400 --> 00:02:38,340
want to have it so that you can if you

00:02:36,930 --> 00:02:40,080
have a particular data structure in your

00:02:38,340 --> 00:02:42,000
code that looks like that's the logical

00:02:40,080 --> 00:02:43,770
place to kind of chop program into as

00:02:42,000 --> 00:02:45,990
the program grows we wanted to be easy

00:02:43,770 --> 00:02:48,270
to then make a new message type with

00:02:45,990 --> 00:02:50,040
that particular chunk of data in it so

00:02:48,270 --> 00:02:52,410
that you can then send it around that

00:02:50,040 --> 00:02:54,120
lets you have more small programs which

00:02:52,410 --> 00:02:56,010
usually leads to finer grained debugging

00:02:54,120 --> 00:02:58,860
load balancing across the system and so

00:02:56,010 --> 00:03:02,040
on so for example we have a three lines

00:02:58,860 --> 00:03:04,380
of code there that joystick message you

00:03:02,040 --> 00:03:05,820
know it's a array of floating-point

00:03:04,380 --> 00:03:07,080
numbers for the joystick axes an array

00:03:05,820 --> 00:03:09,360
of discrete numbers for the buttons and

00:03:07,080 --> 00:03:10,709
then you type and make and then it will

00:03:09,360 --> 00:03:12,630
spit out a thousand lines of code which

00:03:10,709 --> 00:03:13,920
implement that data structure in you

00:03:12,630 --> 00:03:15,420
know five or however many languages you

00:03:13,920 --> 00:03:17,010
have installed so you don't do this

00:03:15,420 --> 00:03:19,380
yourself and computers are great they're

00:03:17,010 --> 00:03:21,240
very patient at this task okay so

00:03:19,380 --> 00:03:22,680
services I've been talking so far

00:03:21,240 --> 00:03:24,239
everything has been in data streams

00:03:22,680 --> 00:03:25,019
which means you have a sequence of

00:03:24,239 --> 00:03:27,120
messages one after the other

00:03:25,019 --> 00:03:29,190
uni-directional on the connection

00:03:27,120 --> 00:03:30,810
sometimes transactions are more natural

00:03:29,190 --> 00:03:32,130
and so at first and the stair project we

00:03:30,810 --> 00:03:34,350
would then have data streams pointing

00:03:32,130 --> 00:03:35,459
both directions and you'd have kind of a

00:03:34,350 --> 00:03:37,200
state machine on one side that would

00:03:35,459 --> 00:03:39,330
take incoming queries and then push them

00:03:37,200 --> 00:03:40,920
back down that's fine but it's even

00:03:39,330 --> 00:03:41,880
easier if you just want to have an

00:03:40,920 --> 00:03:43,650
object for that so there's a thing

00:03:41,880 --> 00:03:45,959
called color service that supports

00:03:43,650 --> 00:03:47,549
transactions so the kind of classic

00:03:45,959 --> 00:03:50,220
example for this is a knowledge base if

00:03:47,549 --> 00:03:51,660
you want to query it you can send a

00:03:50,220 --> 00:03:53,400
query to the thing wait for a little bit

00:03:51,660 --> 00:03:54,239
i'll send you a response back and you

00:03:53,400 --> 00:03:55,680
just don't have to write the state

00:03:54,239 --> 00:03:58,799
machine yourself to handle the two data

00:03:55,680 --> 00:04:00,150
streams as you can imagine with large

00:03:58,799 --> 00:04:02,100
distributed systems that are running on

00:04:00,150 --> 00:04:03,810
lots of machines in parallel this can

00:04:02,100 --> 00:04:05,430
set up bottlenecks you can imagine that

00:04:03,810 --> 00:04:06,780
every node wants to query the whole

00:04:05,430 --> 00:04:08,519
knowledge base at the same time

00:04:06,780 --> 00:04:10,860
basically everything grinds to a halt

00:04:08,519 --> 00:04:12,810
until the knowledge base comes back so

00:04:10,860 --> 00:04:14,580
you know it's a balanced thing it's

00:04:12,810 --> 00:04:15,930
sometimes can simplify codes of your

00:04:14,580 --> 00:04:17,669
services but the idea would be to don't

00:04:15,930 --> 00:04:18,660
don't overdo it especially when you have

00:04:17,669 --> 00:04:20,130
something that needs to get hammered a

00:04:18,660 --> 00:04:24,030
lot it's tends to be much more efficient

00:04:20,130 --> 00:04:25,830
to do that with the data stream process

00:04:24,030 --> 00:04:27,360
management so we the whole thing as I've

00:04:25,830 --> 00:04:29,599
been talking here is let's have lots of

00:04:27,360 --> 00:04:30,810
small programs to do a complicated task

00:04:29,599 --> 00:04:32,310
it

00:04:30,810 --> 00:04:33,690
terrible to have some awesome L by hand

00:04:32,310 --> 00:04:36,000
basically you lost Mel by hand kind of

00:04:33,690 --> 00:04:37,740
while you're debugging and then it

00:04:36,000 --> 00:04:41,070
becomes not cool after like the first or

00:04:37,740 --> 00:04:42,660
second time so the idea we can kind of

00:04:41,070 --> 00:04:43,650
encode all the things all those little

00:04:42,660 --> 00:04:45,810
terminals that you would have and you'd

00:04:43,650 --> 00:04:48,180
have your whole giant desktop child with

00:04:45,810 --> 00:04:50,700
terminals you can read all those in XML

00:04:48,180 --> 00:04:51,690
syntax and then including all the

00:04:50,700 --> 00:04:53,490
parameters you're doing on the command

00:04:51,690 --> 00:04:55,260
line all their node remapping name your

00:04:53,490 --> 00:04:56,790
mapping all that kind of stuff you can

00:04:55,260 --> 00:04:58,560
just put those in an XML file they can

00:04:56,790 --> 00:05:00,300
include other XML files if you want them

00:04:58,560 --> 00:05:01,290
separate them out some functionality and

00:05:00,300 --> 00:05:03,060
then you just have one shell commands

00:05:01,290 --> 00:05:04,590
like rock songs p or two at launch you

00:05:03,060 --> 00:05:06,870
hit enter you kind of sit back for a few

00:05:04,590 --> 00:05:09,660
seconds it'll then for cough 56

00:05:06,870 --> 00:05:11,280
processes which then spawn out 538

00:05:09,660 --> 00:05:13,440
topics last time I checked this the

00:05:11,280 --> 00:05:14,760
robot hand that I'm working on it's a

00:05:13,440 --> 00:05:16,830
similar thing at smaller scale so you

00:05:14,760 --> 00:05:18,990
just sort of hit rossa launch and 12

00:05:16,830 --> 00:05:20,550
processes fly up equally important is at

00:05:18,990 --> 00:05:22,320
the end of the day when you want to turn

00:05:20,550 --> 00:05:23,910
it off you can just hit one control C

00:05:22,320 --> 00:05:25,620
and then it goes through and does the

00:05:23,910 --> 00:05:28,320
right thing it'll first ask them gently

00:05:25,620 --> 00:05:29,729
to turn off if the processes don't it

00:05:28,320 --> 00:05:36,300
gives them a second term in a cig kill

00:05:29,729 --> 00:05:39,169
as needed um saves tons of time so they

00:05:36,300 --> 00:05:41,550
do here abstractions is that with time

00:05:39,169 --> 00:05:43,080
isn't this difficult to say what exactly

00:05:41,550 --> 00:05:44,760
the best way should be so I brought that

00:05:43,080 --> 00:05:46,350
i put the laser scan pictures down here

00:05:44,760 --> 00:05:47,580
because you can imagine there's a data

00:05:46,350 --> 00:05:49,320
structure that hold the laser scan i

00:05:47,580 --> 00:05:50,520
could come up with one you can come up

00:05:49,320 --> 00:05:53,100
with one they could be equally

00:05:50,520 --> 00:05:54,300
semantically valid there's really no

00:05:53,100 --> 00:05:56,280
difference between them it's just they

00:05:54,300 --> 00:05:58,710
happen to use the data like the fields

00:05:56,280 --> 00:06:00,180
are named a little bit differently maybe

00:05:58,710 --> 00:06:01,289
I have more comments in mine or

00:06:00,180 --> 00:06:02,940
something or you have more comments in

00:06:01,289 --> 00:06:06,060
yours semantically there's no difference

00:06:02,940 --> 00:06:07,889
so it's 11 method to do this is just to

00:06:06,060 --> 00:06:09,810
say by Fiat like this is the laser scan

00:06:07,889 --> 00:06:11,160
message annual use it another way that

00:06:09,810 --> 00:06:12,360
we've found to be even more useful in

00:06:11,160 --> 00:06:14,460
the community is just to sort of let

00:06:12,360 --> 00:06:16,139
these things bubble up and there's a

00:06:14,460 --> 00:06:17,370
multiple schools of thought on that some

00:06:16,139 --> 00:06:19,620
people don't like this and would rather

00:06:17,370 --> 00:06:21,780
sit you know the other approach would be

00:06:19,620 --> 00:06:23,160
to have a committee and to talk about it

00:06:21,780 --> 00:06:24,539
and to try to come up with something

00:06:23,160 --> 00:06:26,340
that is that is clearly the best that

00:06:24,539 --> 00:06:27,600
works personal projects what we're

00:06:26,340 --> 00:06:31,500
trying here instead is just to let these

00:06:27,600 --> 00:06:34,080
things happen and over time say there's

00:06:31,500 --> 00:06:35,340
a great utilities that use particular

00:06:34,080 --> 00:06:36,600
storms and messages everyone just kind

00:06:35,340 --> 00:06:39,360
of Margaret to that if they are truly

00:06:36,600 --> 00:06:40,349
semantically equal and equally equally

00:06:39,360 --> 00:06:41,640
good technically then that'll just

00:06:40,349 --> 00:06:43,689
become the standard I guess and we can

00:06:41,640 --> 00:06:45,759
adopt that over time so I

00:06:43,689 --> 00:06:47,679
tend to kind of like this decentralized

00:06:45,759 --> 00:06:52,629
approach that's what we're trying to

00:06:47,679 --> 00:06:54,399
push them over time here so with large

00:06:52,629 --> 00:06:55,929
open source projects is tricky one of

00:06:54,399 --> 00:06:58,739
the trickiest things is to have everyone

00:06:55,929 --> 00:07:00,309
and meet the needs of contributors so

00:06:58,739 --> 00:07:02,079
contributors need to find each other

00:07:00,309 --> 00:07:04,179
first of all it's tricky over the

00:07:02,079 --> 00:07:05,619
internet because sometimes it you know

00:07:04,179 --> 00:07:08,139
we're sort of separated by this email

00:07:05,619 --> 00:07:09,279
barrier so it's hard to to know who's

00:07:08,139 --> 00:07:10,479
working on what all around the world

00:07:09,279 --> 00:07:11,709
it's great to have meetings like this is

00:07:10,479 --> 00:07:14,139
we can actually see each other as faces

00:07:11,709 --> 00:07:15,639
on these human beings but sometimes it's

00:07:14,139 --> 00:07:16,959
hard and so the idea is that we need to

00:07:15,639 --> 00:07:18,339
have a way to to find out what each

00:07:16,959 --> 00:07:20,559
other is working on to publish each

00:07:18,339 --> 00:07:21,939
other's work and to be able to say if

00:07:20,559 --> 00:07:23,050
I'm doing some particular sub task I'd

00:07:21,939 --> 00:07:24,579
like to find who else in the world is

00:07:23,050 --> 00:07:27,119
working on that sub task and is the way

00:07:24,579 --> 00:07:29,110
we can work together so to do that

00:07:27,119 --> 00:07:30,489
contributors also need to have credit

00:07:29,110 --> 00:07:32,349
for their own work and and feel like

00:07:30,489 --> 00:07:33,729
they own it because they should because

00:07:32,349 --> 00:07:35,829
of their own work and then have

00:07:33,729 --> 00:07:38,079
licensing freedom as they say feel so to

00:07:35,829 --> 00:07:40,300
do to kind of meet these goals we made

00:07:38,079 --> 00:07:41,619
the roth build system to be a federal

00:07:40,300 --> 00:07:43,619
called a federated build system which

00:07:41,619 --> 00:07:45,729
means that instead of having one giant

00:07:43,619 --> 00:07:47,919
code repository at one particular

00:07:45,729 --> 00:07:49,509
university or company instead everyone

00:07:47,919 --> 00:07:50,649
can run their own code repositories

00:07:49,509 --> 00:07:51,909
which is kind of the way that everyone

00:07:50,649 --> 00:07:54,669
does robotics right now anyway so we

00:07:51,909 --> 00:07:56,439
just decided let's tickle that the

00:07:54,669 --> 00:07:57,579
parallel build system means that you can

00:07:56,439 --> 00:07:59,229
check out code from lots of different

00:07:57,579 --> 00:08:00,909
positive stories you typed Ross make and

00:07:59,229 --> 00:08:03,189
then a little fork off a bunch of GCC

00:08:00,909 --> 00:08:04,659
jobs and try to make it somewhat

00:08:03,189 --> 00:08:06,459
efficient to build this all these

00:08:04,659 --> 00:08:08,439
packages that you want to do and then

00:08:06,459 --> 00:08:10,269
link all these packages together if I'm

00:08:08,439 --> 00:08:11,669
using a you know some library that

00:08:10,269 --> 00:08:13,629
someone else has written it's another

00:08:11,669 --> 00:08:15,429
institution that wants to tie it to mine

00:08:13,629 --> 00:08:18,129
it is we try to reduce the friction than

00:08:15,429 --> 00:08:19,989
doing that so it make it easier to find

00:08:18,129 --> 00:08:21,610
each other this Ross org I think with a

00:08:19,989 --> 00:08:23,800
lot of us have robably seen that there's

00:08:21,610 --> 00:08:25,419
a demon that runs every night that goes

00:08:23,800 --> 00:08:26,619
and checks out all the robot code that

00:08:25,419 --> 00:08:27,819
knows about in the world that are

00:08:26,619 --> 00:08:30,189
registered with it it crawls through

00:08:27,819 --> 00:08:31,599
that to find what packages are there if

00:08:30,189 --> 00:08:33,879
there's built-in documentation that can

00:08:31,599 --> 00:08:35,110
find that's great if not it still tries

00:08:33,879 --> 00:08:36,309
to kind of pull out some key words that

00:08:35,110 --> 00:08:38,649
can found in the manifest so that when

00:08:36,309 --> 00:08:39,849
you search for any particular widget if

00:08:38,649 --> 00:08:41,219
you have 1i have a new hardware driver

00:08:39,849 --> 00:08:43,809
for a new widget that you just bought

00:08:41,219 --> 00:08:45,279
hopefully you can find that the Ross

00:08:43,809 --> 00:08:46,660
that organ Dexter will then help you

00:08:45,279 --> 00:08:50,019
point to someone that's working with

00:08:46,660 --> 00:08:51,339
them over time number of packages has

00:08:50,019 --> 00:08:52,959
steadily grown were approached in the

00:08:51,339 --> 00:08:56,820
4,000 package mark which is very

00:08:52,959 --> 00:08:58,260
exciting ok so versioning um

00:08:56,820 --> 00:08:59,760
is something that open source tends to

00:08:58,260 --> 00:09:00,990
have a hard time with and we're

00:08:59,760 --> 00:09:03,120
certainly no exception but we're trying

00:09:00,990 --> 00:09:04,560
to have a structure to kind of stabilize

00:09:03,120 --> 00:09:06,030
things a bit as we go forward I talked

00:09:04,560 --> 00:09:07,350
to the very beginning about this paradox

00:09:06,030 --> 00:09:08,550
of you know we just want to work on our

00:09:07,350 --> 00:09:10,290
own stuff and have everyone else kind of

00:09:08,550 --> 00:09:11,760
hold still for a while the way that

00:09:10,290 --> 00:09:13,560
we've tried to do this is a kind of

00:09:11,760 --> 00:09:15,270
delineating here between vetted software

00:09:13,560 --> 00:09:18,120
and what I like takaya i like to call it

00:09:15,270 --> 00:09:20,460
wild software so that is software has

00:09:18,120 --> 00:09:21,570
gone through a view process whether it's

00:09:20,460 --> 00:09:22,950
at Willow Garage you're at other

00:09:21,570 --> 00:09:26,250
universities or wherever or some

00:09:22,950 --> 00:09:29,040
combination meaning that it does work it

00:09:26,250 --> 00:09:32,100
has things like unit tests it passes

00:09:29,040 --> 00:09:35,190
them the idea so it goes into there and

00:09:32,100 --> 00:09:37,230
the vetted software thing and it gets

00:09:35,190 --> 00:09:39,300
essentially built up by the build system

00:09:37,230 --> 00:09:41,970
into out packages on the moon too or

00:09:39,300 --> 00:09:43,500
other packages essentially we've tried

00:09:41,970 --> 00:09:45,420
to keep this lightweight so that is its

00:09:43,500 --> 00:09:48,480
try to reduce the friction to publishing

00:09:45,420 --> 00:09:50,070
code a stack consists of a bunch of

00:09:48,480 --> 00:09:51,270
packages with version number with the

00:09:50,070 --> 00:09:52,650
version number attached to them so sort

00:09:51,270 --> 00:09:54,690
of like a collection packages at one

00:09:52,650 --> 00:09:55,980
point in time you sort of put a stick in

00:09:54,690 --> 00:09:58,590
the ground and say this is a stack and

00:09:55,980 --> 00:09:59,880
this is its burden if you take a giant

00:09:58,590 --> 00:10:01,740
pile of stacks and put them together

00:09:59,880 --> 00:10:03,270
then we call that a distribution it

00:10:01,740 --> 00:10:04,830
seems like the the a boon to model has

00:10:03,270 --> 00:10:06,210
been successful so far and that's

00:10:04,830 --> 00:10:08,160
basically every six months they roll out

00:10:06,210 --> 00:10:10,230
a new collection of packages with

00:10:08,160 --> 00:10:12,390
version numbers attached to them and so

00:10:10,230 --> 00:10:14,010
we're trying to follow is that so you

00:10:12,390 --> 00:10:15,510
can say that I want to develop for the

00:10:14,010 --> 00:10:18,210
particular distribution of rafts weather

00:10:15,510 --> 00:10:20,520
is this e total or 40 or whatever wants

00:10:18,210 --> 00:10:21,990
to do and you can just sort of keep

00:10:20,520 --> 00:10:24,540
installing those a package a--'s and

00:10:21,990 --> 00:10:26,130
then it's guaranteed that for that

00:10:24,540 --> 00:10:28,710
particular distribution we're not going

00:10:26,130 --> 00:10:29,490
to make breaking changes to it and six

00:10:28,710 --> 00:10:30,900
months later there'll be a new

00:10:29,490 --> 00:10:32,040
distribution which has new whiz-bang

00:10:30,900 --> 00:10:33,300
features and that's great you can after

00:10:32,040 --> 00:10:36,150
it if he wants you but you don't have to

00:10:33,300 --> 00:10:37,080
and you can maintain your sort of your

00:10:36,150 --> 00:10:38,880
own leaf nodes and your own

00:10:37,080 --> 00:10:41,390
functionality without worrying that the

00:10:38,880 --> 00:10:43,980
world's going to shift underneath you

00:10:41,390 --> 00:10:45,360
the next part is this wild software I

00:10:43,980 --> 00:10:47,310
feel pretty strongly about this there's

00:10:45,360 --> 00:10:48,680
about 2.5 million lines of code last

00:10:47,310 --> 00:10:51,090
time I checked it out took like two days

00:10:48,680 --> 00:10:52,380
my strong hypothesis is that any

00:10:51,090 --> 00:10:55,020
co-chairing at all is better than ill

00:10:52,380 --> 00:10:57,090
co-chairing so even if I wrote a program

00:10:55,020 --> 00:10:58,800
like two years ago and haven't touched a

00:10:57,090 --> 00:11:00,360
sense I do a lot of that it's still

00:10:58,800 --> 00:11:01,950
better if it's out on the internet as

00:11:00,360 --> 00:11:04,710
opposed to being hidden on my own

00:11:01,950 --> 00:11:06,090
computer so even if someone writes

00:11:04,710 --> 00:11:07,230
something really cool abandons it

00:11:06,090 --> 00:11:09,210
doesn't compile anymore is totally

00:11:07,230 --> 00:11:10,170
broken that's still better than not

00:11:09,210 --> 00:11:11,279
actually going then

00:11:10,170 --> 00:11:13,320
existed or no one ever looked at a

00:11:11,279 --> 00:11:15,240
problem before and what we found is that

00:11:13,320 --> 00:11:17,550
useful code eventually will find its way

00:11:15,240 --> 00:11:19,050
into the vetted system if you do write

00:11:17,550 --> 00:11:21,089
some some whiz-bang feature that's

00:11:19,050 --> 00:11:22,680
awesome and even if you abandon it odds

00:11:21,089 --> 00:11:23,820
are at some point someone else working

00:11:22,680 --> 00:11:25,560
on the same problem will kind of find

00:11:23,820 --> 00:11:27,420
this thing and and at a very least take

00:11:25,560 --> 00:11:29,220
your be able to build on your ideas

00:11:27,420 --> 00:11:30,630
maybe not even take your source code but

00:11:29,220 --> 00:11:34,139
bill and the ideas and it is a positive

00:11:30,630 --> 00:11:35,760
thing okay I also talked to beginning

00:11:34,139 --> 00:11:37,980
about external dependencies and my

00:11:35,760 --> 00:11:40,560
problems with those in previous projects

00:11:37,980 --> 00:11:41,790
a high quality open-source cord code is

00:11:40,560 --> 00:11:44,670
out there there's tons of it it's

00:11:41,790 --> 00:11:46,740
awesome but it's sometimes hard I can

00:11:44,670 --> 00:11:47,730
get tedious with all trying to get all

00:11:46,740 --> 00:11:50,100
these dependencies if you're trying to

00:11:47,730 --> 00:11:51,690
have version X of you know this program

00:11:50,100 --> 00:11:54,089
of version y of that one and keep them

00:11:51,690 --> 00:11:55,320
all compiling and building together we

00:11:54,089 --> 00:11:58,199
tried to formalize this process a bit

00:11:55,320 --> 00:11:59,790
with a real step it's just turns for

00:11:58,199 --> 00:12:02,550
Ross dependency tracker dependency

00:11:59,790 --> 00:12:04,380
manager so that one other thing that's

00:12:02,550 --> 00:12:05,880
interesting with Linux is that everyone

00:12:04,380 --> 00:12:07,860
has kind of their own names for things

00:12:05,880 --> 00:12:09,720
so for example if you want to install so

00:12:07,860 --> 00:12:12,360
you can compile against OpenGL at the

00:12:09,720 --> 00:12:14,070
time that i made this slide at least in

00:12:12,360 --> 00:12:16,230
a boon to it was some obscure

00:12:14,070 --> 00:12:17,850
combination of GL and mesa with dashes

00:12:16,230 --> 00:12:18,930
in between fedora it's the same

00:12:17,850 --> 00:12:21,570
characters but some of them are

00:12:18,930 --> 00:12:23,279
capitalized and switched around and

00:12:21,570 --> 00:12:25,050
stallone this kind of repeats itself

00:12:23,279 --> 00:12:26,970
with lots of dependencies you'll find

00:12:25,050 --> 00:12:29,070
that the fedora or great hat way in the

00:12:26,970 --> 00:12:31,829
debian ubuntu way are basically the same

00:12:29,070 --> 00:12:33,540
but different so we tried to have 11

00:12:31,829 --> 00:12:36,510
collection this is a bunch of llamo

00:12:33,540 --> 00:12:38,730
files that sort of store a semantic idea

00:12:36,510 --> 00:12:39,810
like OpenGL into the actual packages

00:12:38,730 --> 00:12:41,550
that that's needed on a bunch of

00:12:39,810 --> 00:12:43,440
different systems the idea for doing

00:12:41,550 --> 00:12:44,519
this is that then you can say i want to

00:12:43,440 --> 00:12:45,930
install the dependencies for this

00:12:44,519 --> 00:12:47,519
package so i can type a i'll step

00:12:45,930 --> 00:12:49,560
install our biz and then it'll kind of

00:12:47,519 --> 00:12:51,480
grind for a bit and then give you an apt

00:12:49,560 --> 00:12:52,769
get string that has like 50 packages you

00:12:51,480 --> 00:12:57,810
need installing these hit enter and it

00:12:52,769 --> 00:12:59,519
just goes ok so now let's just having a

00:12:57,810 --> 00:13:01,110
little bit more the minimum of scenario

00:12:59,519 --> 00:13:02,850
and ross is if you have two notes one's

00:13:01,110 --> 00:13:05,069
publishing to another one this is the

00:13:02,850 --> 00:13:06,180
very first tutorial that we do and i

00:13:05,069 --> 00:13:07,260
think a lot of people here probably

00:13:06,180 --> 00:13:09,149
familiar with it i'll just go through

00:13:07,260 --> 00:13:10,769
really quickly just for those who aren't

00:13:09,149 --> 00:13:12,569
too kind of just show the whole thing i

00:13:10,769 --> 00:13:13,980
want to show here is that it should be

00:13:12,569 --> 00:13:14,940
simple to do simple things so this is a

00:13:13,980 --> 00:13:16,860
pretty simple thing we want to have

00:13:14,940 --> 00:13:20,329
messages fly from one node to the other

00:13:16,860 --> 00:13:22,680
guy so we worked hard to get this small

00:13:20,329 --> 00:13:23,370
this fits on one screen fold there's two

00:13:22,680 --> 00:13:25,020
includes

00:13:23,370 --> 00:13:26,279
you have a little bit of boilerplate but

00:13:25,020 --> 00:13:27,839
the idea again as I said before is that

00:13:26,279 --> 00:13:29,430
we're trying not to wrap up me so the

00:13:27,839 --> 00:13:30,660
main function is very visible there just

00:13:29,430 --> 00:13:33,330
like it has been since the dawn of

00:13:30,660 --> 00:13:34,650
prehistory it there's a bit of

00:13:33,330 --> 00:13:36,540
boilerplate kind of a stanchion a few

00:13:34,650 --> 00:13:37,950
things the few objects and then you just

00:13:36,540 --> 00:13:40,680
start publishing messages in a spin loop

00:13:37,950 --> 00:13:42,570
at the bottom we tried to keep this

00:13:40,680 --> 00:13:44,130
simple I would love to even get rid of

00:13:42,570 --> 00:13:45,839
more lines in here feel free to please

00:13:44,130 --> 00:13:47,310
offer feedback if there's a way to to

00:13:45,839 --> 00:13:50,160
get the simple example even simpler I

00:13:47,310 --> 00:13:51,810
love them the other side of this now

00:13:50,160 --> 00:13:53,400
let's accepting these messages there's a

00:13:51,810 --> 00:13:55,710
this is doing that the sea call back

00:13:53,400 --> 00:13:56,880
type mechanism you can also do c++ there

00:13:55,710 --> 00:13:58,350
are also more advanced languages out

00:13:56,880 --> 00:14:01,890
there like Python that do it even easier

00:13:58,350 --> 00:14:03,240
and more elegantly but the idea here is

00:14:01,890 --> 00:14:04,620
that you sort of have a little bit of

00:14:03,240 --> 00:14:07,110
boilerplate instantiate a few objects

00:14:04,620 --> 00:14:10,529
and then just call back start firing and

00:14:07,110 --> 00:14:13,260
you can do stuff so that's the simple

00:14:10,529 --> 00:14:14,430
note um there the Ross universe has tons

00:14:13,260 --> 00:14:15,690
of different notes there's a bunch of

00:14:14,430 --> 00:14:18,350
hardware driver nodes as you'd expect

00:14:15,690 --> 00:14:20,130
that talk to you know tons of popular

00:14:18,350 --> 00:14:22,140
widgets that we can all buy as

00:14:20,130 --> 00:14:23,580
roboticist mobile bases manipulators

00:14:22,140 --> 00:14:26,370
cameras laser scanners all sorts of

00:14:23,580 --> 00:14:27,990
sensors they're all there lots of them

00:14:26,370 --> 00:14:29,160
it's kind of fun now you can oftentimes

00:14:27,990 --> 00:14:30,900
if you want to buy a popular widget

00:14:29,160 --> 00:14:32,160
you'll just go on Ross org and type in

00:14:30,900 --> 00:14:33,450
the name of whatever widget you just

00:14:32,160 --> 00:14:34,800
purchased and hopefully somewhere across

00:14:33,450 --> 00:14:38,070
the world someone's used it before and

00:14:34,800 --> 00:14:39,750
has wrapped it up to the tools so we

00:14:38,070 --> 00:14:43,010
have kind of meta tools that can work

00:14:39,750 --> 00:14:46,050
with message streams like echoing or

00:14:43,010 --> 00:14:47,390
chopping up message dreams converting

00:14:46,050 --> 00:14:49,490
them from one format to another

00:14:47,390 --> 00:14:52,890
visualizing things debugging tools

00:14:49,490 --> 00:14:54,810
logging that's all great control either

00:14:52,890 --> 00:14:58,589
navigation systems bridges to other

00:14:54,810 --> 00:15:00,480
control frameworks perception pipelines

00:14:58,589 --> 00:15:03,180
vision slam you can never have enough

00:15:00,480 --> 00:15:06,390
opencv enter project it's great just

00:15:03,180 --> 00:15:08,310
great so let's see kind of level see

00:15:06,390 --> 00:15:09,270
planning systems raising systems these

00:15:08,310 --> 00:15:10,770
are all kind of out there and they're

00:15:09,270 --> 00:15:12,420
also universe more of them show up every

00:15:10,770 --> 00:15:14,310
week it's fantastic and the idea being

00:15:12,420 --> 00:15:15,510
that if these sort of dynamic message

00:15:14,310 --> 00:15:18,060
networks like we're talking about you

00:15:15,510 --> 00:15:19,800
can instantiate more of these things at

00:15:18,060 --> 00:15:20,790
the time you can just kind of pull stuff

00:15:19,800 --> 00:15:21,900
up and they'll and hopefully they'll

00:15:20,790 --> 00:15:25,529
talk to each other and do the reasonable

00:15:21,900 --> 00:15:27,150
things so that was kind of a drive-by of

00:15:25,529 --> 00:15:28,560
a lot of girls so now let's just look at

00:15:27,150 --> 00:15:31,110
some awesome robots the idea here is

00:15:28,560 --> 00:15:32,610
that I want to just show what people are

00:15:31,110 --> 00:15:34,880
doing with Rost across the world most of

00:15:32,610 --> 00:15:37,260
this stuff is pulled from the reorg blog

00:15:34,880 --> 00:15:38,700
but the idea would be that a lot of us

00:15:37,260 --> 00:15:40,110
very much included tend to work in kind

00:15:38,700 --> 00:15:41,460
of our own silo and our own problems and

00:15:40,110 --> 00:15:44,400
it's easy to lose track of what's going

00:15:41,460 --> 00:15:46,220
on outside and to get ideas of what

00:15:44,400 --> 00:15:48,150
people can what you can do with Ross so

00:15:46,220 --> 00:15:49,800
we started out with what i like to call

00:15:48,150 --> 00:15:52,790
big BOTS these are like human scale

00:15:49,800 --> 00:15:56,100
things lots of computers lots of sensors

00:15:52,790 --> 00:15:59,520
the famous pr2 at UC berkeley folding

00:15:56,100 --> 00:16:00,720
towels similar platforms that are no

00:15:59,520 --> 00:16:01,830
similar but different i guess in terms

00:16:00,720 --> 00:16:03,630
of their all human scale with

00:16:01,830 --> 00:16:07,080
manipulators in lots of sensors on them

00:16:03,630 --> 00:16:08,430
all around the world small BOTS I call a

00:16:07,080 --> 00:16:12,380
small box mall but if you can pick it up

00:16:08,430 --> 00:16:14,310
so they're typically these things are

00:16:12,380 --> 00:16:15,240
mobile platforms with cameras on them

00:16:14,310 --> 00:16:16,710
but there are certainly lots of

00:16:15,240 --> 00:16:18,480
exceptions like the now platform they

00:16:16,710 --> 00:16:22,740
have lots of lots of dolphin can do neat

00:16:18,480 --> 00:16:24,720
things this this class in placed my

00:16:22,740 --> 00:16:26,490
classification of you can pick it up it

00:16:24,720 --> 00:16:28,050
tends to run linux on a network or a

00:16:26,490 --> 00:16:29,640
small form-factor embedded system but

00:16:28,050 --> 00:16:32,610
still runs ross internally on the robot

00:16:29,640 --> 00:16:34,530
itself then we go down to microbots

00:16:32,610 --> 00:16:35,970
which i call it if it doesn't run Ross

00:16:34,530 --> 00:16:39,780
internally but instead is tethered to a

00:16:35,970 --> 00:16:40,980
nearby UNIX host so we have you penned

00:16:39,780 --> 00:16:44,910
as awesome stuff with these little

00:16:40,980 --> 00:16:46,440
modular widgets Lego NXT even can you

00:16:44,910 --> 00:16:49,650
can tether that to a machine and have

00:16:46,440 --> 00:16:50,670
that bridge over to Ross there's a whole

00:16:49,650 --> 00:16:53,040
different world here called Ross

00:16:50,670 --> 00:16:55,470
industrial they have a demo set up next

00:16:53,040 --> 00:16:57,060
door so this is interesting because

00:16:55,470 --> 00:16:59,730
you're also has lots of cutting-edge

00:16:57,060 --> 00:17:00,960
high level features in we do all sorts

00:16:59,730 --> 00:17:02,700
of crazy things that connects and you

00:17:00,960 --> 00:17:04,500
have point cloud libraries and crazy

00:17:02,700 --> 00:17:06,420
stuff and planners and whatever and it's

00:17:04,500 --> 00:17:08,490
great industrial robots is kind of the

00:17:06,420 --> 00:17:10,410
opposite it's rock solid low level

00:17:08,490 --> 00:17:12,540
controls which means that they run 24 7

00:17:10,410 --> 00:17:14,280
365 they never crashed they don't just

00:17:12,540 --> 00:17:16,589
like segfault randomly and have to kind

00:17:14,280 --> 00:17:18,660
of reboot sometimes they just work the

00:17:16,589 --> 00:17:20,040
idea of ralphs industrial is to to

00:17:18,660 --> 00:17:25,740
combine these two worlds and to try to

00:17:20,040 --> 00:17:28,440
get the best able hands so this is sort

00:17:25,740 --> 00:17:29,460
of this hand on there on the right there

00:17:28,440 --> 00:17:33,500
is when I work on sisses kind of a

00:17:29,460 --> 00:17:35,400
shameless plug here large wheels

00:17:33,500 --> 00:17:36,480
autonomous lawnmowers is probably the

00:17:35,400 --> 00:17:41,510
most awesome thing I've ever heard of

00:17:36,480 --> 00:17:43,200
that's good flying things so the upenn

00:17:41,510 --> 00:17:46,080
quadrotors if you haven't seen the

00:17:43,200 --> 00:17:47,220
videos yet you must like now that I

00:17:46,080 --> 00:17:49,050
looked at it last night I think they

00:17:47,220 --> 00:17:50,550
have 6 million views which is probably

00:17:49,050 --> 00:17:50,910
some the most popular robotics videos of

00:17:50,550 --> 00:17:56,100
all time

00:17:50,910 --> 00:17:57,450
very very cool on the water and there's

00:17:56,100 --> 00:18:01,050
someone more athletic than I think all

00:17:57,450 --> 00:18:03,390
of us in this room that's okay so robots

00:18:01,050 --> 00:18:07,140
you know boats or sensor equipped

00:18:03,390 --> 00:18:08,880
devices so simulation simulators you can

00:18:07,140 --> 00:18:10,320
never quite have enough simulation the

00:18:08,880 --> 00:18:12,420
hardware development crowd knows this

00:18:10,320 --> 00:18:15,060
and I think us in robotics are also

00:18:12,420 --> 00:18:16,680
trying to adapt the grub or pick up this

00:18:15,060 --> 00:18:19,260
viewpoint more and more even with like

00:18:16,680 --> 00:18:21,750
high level abstract robotics is the

00:18:19,260 --> 00:18:23,040
automatic regression testing is like the

00:18:21,750 --> 00:18:24,930
best thing ever for large projects

00:18:23,040 --> 00:18:26,610
essentially it's oftentimes hard to know

00:18:24,930 --> 00:18:29,220
if you're working on one little module

00:18:26,610 --> 00:18:30,540
and sort of 20 connections away if

00:18:29,220 --> 00:18:32,490
you've done something that breaks that

00:18:30,540 --> 00:18:34,830
other guy's code it's hard to know that

00:18:32,490 --> 00:18:36,030
and essentially what happens there is

00:18:34,830 --> 00:18:37,830
that there's a set of assumptions built

00:18:36,030 --> 00:18:39,930
into any software program and the

00:18:37,830 --> 00:18:41,100
problem is if you don't violate your own

00:18:39,930 --> 00:18:42,240
assumptions but you didn't quite

00:18:41,100 --> 00:18:44,220
communicate all those assumptions to

00:18:42,240 --> 00:18:46,110
sort of the rest of your team and then

00:18:44,220 --> 00:18:48,840
one little tweak eventually will will

00:18:46,110 --> 00:18:50,550
sort of cause us to all fail and have

00:18:48,840 --> 00:18:52,950
adult time and large projects robotics

00:18:50,550 --> 00:18:54,720
not being very uh not particularly novel

00:18:52,950 --> 00:18:55,920
in this problem but simulation from

00:18:54,720 --> 00:18:58,710
robotics is that is the way to kind of

00:18:55,920 --> 00:19:00,330
fight against this so here's a plug for

00:18:58,710 --> 00:19:03,840
gazebo this cool video they recently

00:19:00,330 --> 00:19:05,970
made should you need to do like

00:19:03,840 --> 00:19:08,090
low-flying radar avoiding thing through

00:19:05,970 --> 00:19:14,520
fractal terrains you can do that here in

00:19:08,090 --> 00:19:15,990
to evil layers in craters okay so gazebo

00:19:14,520 --> 00:19:19,050
has been around for a while it is

00:19:15,990 --> 00:19:20,910
fantastic you can simulate all sorts of

00:19:19,050 --> 00:19:25,980
sensors on them you can simulate laser

00:19:20,910 --> 00:19:27,360
scanning reasonable physics popular

00:19:25,980 --> 00:19:28,560
robots they have already programmed up

00:19:27,360 --> 00:19:30,810
in there and here's a peer two and a

00:19:28,560 --> 00:19:32,160
cuca you bought you can see you can

00:19:30,810 --> 00:19:34,020
manipulate the world they manipulated

00:19:32,160 --> 00:19:35,970
models out there and even complicated

00:19:34,020 --> 00:19:38,720
kinematic chains like a humanoid are

00:19:35,970 --> 00:19:38,720
being simulated here

00:19:46,890 --> 00:19:51,570
okay so that was kind of where we are

00:19:48,810 --> 00:19:52,740
now in the Ross world now I'd like to

00:19:51,570 --> 00:19:55,310
kind of go off the rails a little bit

00:19:52,740 --> 00:19:57,390
and talk about some ideas for the future

00:19:55,310 --> 00:19:59,700
just to be clear here these views are my

00:19:57,390 --> 00:20:01,380
own I don't particularly have any I

00:19:59,700 --> 00:20:02,970
don't claim any sway I guess / /

00:20:01,380 --> 00:20:04,500
disproportionate sway over the future of

00:20:02,970 --> 00:20:06,780
Ross especially not for its contributors

00:20:04,500 --> 00:20:08,220
or their organizations but what that

00:20:06,780 --> 00:20:09,750
other way now let's have some fun so

00:20:08,220 --> 00:20:11,670
some of these ideas are kind of nutty

00:20:09,750 --> 00:20:12,780
that's okay today I'm trying to sort of

00:20:11,670 --> 00:20:13,740
set the stage here for lightning talks

00:20:12,780 --> 00:20:16,680
that it's okay to look like a fool

00:20:13,740 --> 00:20:17,910
sometimes so here's just three random

00:20:16,680 --> 00:20:20,250
ideas I have of things we can work on

00:20:17,910 --> 00:20:23,220
the future I call it super master a

00:20:20,250 --> 00:20:25,410
master of a master essentially micro

00:20:23,220 --> 00:20:26,550
apps and an open dynamic firmware that's

00:20:25,410 --> 00:20:28,560
what were the most crackpot of these of

00:20:26,550 --> 00:20:29,880
these 30 days and they'll be fun so the

00:20:28,560 --> 00:20:31,800
first possibility here super masters uh

00:20:29,880 --> 00:20:33,990
Ross breaks if you can't talk to a

00:20:31,800 --> 00:20:35,670
master basically so by breaking I mean

00:20:33,990 --> 00:20:36,870
that connections won't form and you

00:20:35,670 --> 00:20:38,460
can't find your peers if you already or

00:20:36,870 --> 00:20:39,690
know where your peers are you can keep

00:20:38,460 --> 00:20:41,580
going those data streams can keep going

00:20:39,690 --> 00:20:42,600
that's fine but if you if you turn to

00:20:41,580 --> 00:20:44,010
launch a new program and it needs to

00:20:42,600 --> 00:20:46,320
talk to a master to find out you know

00:20:44,010 --> 00:20:48,060
who else there is that does not work if

00:20:46,320 --> 00:20:49,770
you can select the master obviously so

00:20:48,060 --> 00:20:52,260
there's some situations where that

00:20:49,770 --> 00:20:54,330
doesn't work if you have multiple robots

00:20:52,260 --> 00:20:55,650
that are spread apart spatially in a

00:20:54,330 --> 00:20:57,900
building of course we all know is there

00:20:55,650 --> 00:20:59,190
a lot of cysts that Wi-Fi is we love it

00:20:57,900 --> 00:21:00,300
and we hate it at the same time there's

00:20:59,190 --> 00:21:01,860
always in any building no matter how

00:21:00,300 --> 00:21:04,110
many access points you have there's dead

00:21:01,860 --> 00:21:05,610
spots so that's fun that's a problem

00:21:04,110 --> 00:21:07,110
then if you're in a dead spot of course

00:21:05,610 --> 00:21:08,550
because you can't find master and you

00:21:07,110 --> 00:21:10,860
can't find who your peers are and even

00:21:08,550 --> 00:21:12,840
even worse if the master is running off

00:21:10,860 --> 00:21:14,070
of a mobile robot and you need to

00:21:12,840 --> 00:21:15,900
connect to something even on your own

00:21:14,070 --> 00:21:17,520
robot if you can't talk to the master

00:21:15,900 --> 00:21:19,650
you can't find out that that processes

00:21:17,520 --> 00:21:21,500
running on your own robot that's problem

00:21:19,650 --> 00:21:23,730
so awkward computers for the same reason

00:21:21,500 --> 00:21:26,010
you can have similar problems if you

00:21:23,730 --> 00:21:27,660
have a data like a compute cluster and

00:21:26,010 --> 00:21:29,400
you're trying to incorporate that

00:21:27,660 --> 00:21:30,720
compute cluster in your Ross network you

00:21:29,400 --> 00:21:31,950
have to sort of choose one side or the

00:21:30,720 --> 00:21:33,510
other of that wireless link you're going

00:21:31,950 --> 00:21:35,910
to put the master on the mobile robot or

00:21:33,510 --> 00:21:37,890
the Masters on the off board cluster and

00:21:35,910 --> 00:21:39,090
so there's there's problems with subnets

00:21:37,890 --> 00:21:41,000
on either side of those depending on

00:21:39,090 --> 00:21:42,990
where you are when the master goes down

00:21:41,000 --> 00:21:44,820
ambient functionality like say you want

00:21:42,990 --> 00:21:46,620
to have a robot that drives an elevator

00:21:44,820 --> 00:21:48,030
or turns light switches on or at least

00:21:46,620 --> 00:21:49,740
maybe even queries what state the lights

00:21:48,030 --> 00:21:52,170
are in or queries the HVAC system or

00:21:49,740 --> 00:21:53,880
whatever it's hard to say who owns that

00:21:52,170 --> 00:21:56,070
functionality it probably belongs to the

00:21:53,880 --> 00:21:57,810
building if anybody and so it's hard to

00:21:56,070 --> 00:21:58,909
say what Ross master that those funks

00:21:57,810 --> 00:22:00,769
damage that live in

00:21:58,909 --> 00:22:02,570
so the idea here with that master

00:22:00,769 --> 00:22:05,450
connect to a super master by that I mean

00:22:02,570 --> 00:22:06,679
it can subscribe to the sort of the

00:22:05,450 --> 00:22:09,440
information being propagated through a

00:22:06,679 --> 00:22:11,029
master one level above it which would

00:22:09,440 --> 00:22:12,470
then take it the topic services

00:22:11,029 --> 00:22:13,700
parameters sort of all the the state

00:22:12,470 --> 00:22:15,859
captured in that master would then

00:22:13,700 --> 00:22:17,059
propagate down somehow and then of

00:22:15,859 --> 00:22:18,259
course to make it even more awesome

00:22:17,059 --> 00:22:19,729
would want to expand this how our cookie

00:22:18,259 --> 00:22:23,059
so you can have super super masters and

00:22:19,729 --> 00:22:26,809
all sorts of crazy complexity if you do

00:22:23,059 --> 00:22:28,460
this somehow fun things can happen so we

00:22:26,809 --> 00:22:30,529
can have smart environments here where's

00:22:28,460 --> 00:22:32,090
to say there's a geo geo reference with

00:22:30,529 --> 00:22:34,489
latitude longitude or Wi-Fi reference

00:22:32,090 --> 00:22:35,690
with mac addresses you can inquiry some

00:22:34,489 --> 00:22:37,429
central repository somewhere on the

00:22:35,690 --> 00:22:38,840
internet and say hey I'm in this

00:22:37,429 --> 00:22:41,359
particular building meaning that i saw

00:22:38,840 --> 00:22:42,710
this particular MAC address what is here

00:22:41,359 --> 00:22:44,659
that's interesting you could then get

00:22:42,710 --> 00:22:46,190
back a response which has hosting import

00:22:44,659 --> 00:22:47,720
of a public Ross master you can connect

00:22:46,190 --> 00:22:49,970
to their and if you connected that then

00:22:47,720 --> 00:22:50,929
you can maintain or obtain ambient for

00:22:49,970 --> 00:22:52,789
things from the building so say like

00:22:50,929 --> 00:22:54,440
maps of the building if a building is

00:22:52,789 --> 00:22:55,580
cool enough to have a public Ross master

00:22:54,440 --> 00:22:56,809
in it it probably's been mapped a few

00:22:55,580 --> 00:22:58,729
times so then you shouldn't have to

00:22:56,809 --> 00:23:00,229
offer yourself basically you should be

00:22:58,729 --> 00:23:01,849
able to download that stuff maybe

00:23:00,229 --> 00:23:04,009
download locations of outlets or

00:23:01,849 --> 00:23:06,859
charging ports where the elevators are

00:23:04,009 --> 00:23:08,450
topologically in the building maybe work

00:23:06,859 --> 00:23:10,820
the lighting systems or HVAC systems or

00:23:08,450 --> 00:23:12,139
other fun stuff that's one possibility

00:23:10,820 --> 00:23:13,909
another possibility if you have a team

00:23:12,139 --> 00:23:16,759
of robots sometimes it's hard to say

00:23:13,909 --> 00:23:17,809
which you know if you have a team who

00:23:16,759 --> 00:23:19,789
should be controlling the other robots

00:23:17,809 --> 00:23:20,659
so maybe you could instantiate a super

00:23:19,789 --> 00:23:21,979
master and one of these team members

00:23:20,659 --> 00:23:23,599
that's out kind of rolling around

00:23:21,979 --> 00:23:25,789
together and that's super master then

00:23:23,599 --> 00:23:28,899
can sort of run high level programs

00:23:25,789 --> 00:23:32,539
which dictate behavior of the whole team

00:23:28,899 --> 00:23:35,149
so the trick here older several but one

00:23:32,539 --> 00:23:36,259
trick is that how do you sort of

00:23:35,149 --> 00:23:37,580
incorporate information from this other

00:23:36,259 --> 00:23:40,039
name space without colliding in your own

00:23:37,580 --> 00:23:41,239
essentially that's like if you were to

00:23:40,039 --> 00:23:42,229
take a whole bunch of directories and

00:23:41,239 --> 00:23:43,609
just sort of concatenate all their

00:23:42,229 --> 00:23:45,379
contents you'd probably have name

00:23:43,609 --> 00:23:47,509
collisions so maybe we can get around

00:23:45,379 --> 00:23:49,340
this by prepending um that the dot dot

00:23:47,509 --> 00:23:50,659
syntax has been around since sort of the

00:23:49,340 --> 00:23:52,369
dawn of time and file systems to say

00:23:50,659 --> 00:23:54,919
sort of go up a level and we could use

00:23:52,369 --> 00:23:57,409
that maybe a reserved keyword or

00:23:54,919 --> 00:23:58,519
something other other challenges are we

00:23:57,409 --> 00:24:01,999
need to have policies for data

00:23:58,519 --> 00:24:03,409
synchronization meaning that when your

00:24:01,999 --> 00:24:05,029
super master has like Mork things

00:24:03,409 --> 00:24:06,769
connect to it sort of at what level and

00:24:05,029 --> 00:24:09,259
what frequency do you do propagate that

00:24:06,769 --> 00:24:11,089
down to the sub masters and then be able

00:24:09,259 --> 00:24:12,290
to similarly handle these dropouts their

00:24:11,089 --> 00:24:14,180
disappearances

00:24:12,290 --> 00:24:15,740
gracefully if the whole reason for using

00:24:14,180 --> 00:24:16,970
the super masters is because Wi-Fi let's

00:24:15,740 --> 00:24:18,520
go down then we should sort of in the

00:24:16,970 --> 00:24:20,390
design of this thing built in together

00:24:18,520 --> 00:24:22,010
okay so I'm not pretending to have the

00:24:20,390 --> 00:24:24,860
answers to these challenges no we can

00:24:22,010 --> 00:24:26,810
talk about them later whatever okay so

00:24:24,860 --> 00:24:28,610
here's another random possibility micro

00:24:26,810 --> 00:24:29,630
apps everyone loves apps you can just

00:24:28,610 --> 00:24:32,570
can't have enough apps it's like the

00:24:29,630 --> 00:24:33,950
best buzzword ever right now why I think

00:24:32,570 --> 00:24:35,600
there's a couple reasons why it's number

00:24:33,950 --> 00:24:36,680
one it's easy to find if I have a cell

00:24:35,600 --> 00:24:37,700
phone I want to turn it into a

00:24:36,680 --> 00:24:39,380
flashlight I can just search for

00:24:37,700 --> 00:24:40,820
flashlights on the Android store and

00:24:39,380 --> 00:24:43,010
there's like 500 results that come back

00:24:40,820 --> 00:24:44,900
I can pick any one of them click it in

00:24:43,010 --> 00:24:46,070
like 30 seconds later I have the whole

00:24:44,900 --> 00:24:47,750
thing downloaded installed you're

00:24:46,070 --> 00:24:48,980
running on my phone it's great and it's

00:24:47,750 --> 00:24:50,480
very different from the experience that

00:24:48,980 --> 00:24:53,750
we used to have a software of course on

00:24:50,480 --> 00:24:55,060
pcs so the great thing about apps also i

00:24:53,750 --> 00:24:56,750
think is that they limited to one task

00:24:55,060 --> 00:24:58,040
typically if you download a little

00:24:56,750 --> 00:24:59,750
program like a flashlight on your phone

00:24:58,040 --> 00:25:01,160
is called flashlight and you push it and

00:24:59,750 --> 00:25:03,050
has like a big button and you do that

00:25:01,160 --> 00:25:04,070
and does this thing they use the work

00:25:03,050 --> 00:25:05,210
meaning that you don't have to like look

00:25:04,070 --> 00:25:06,650
at the help file because they're so

00:25:05,210 --> 00:25:08,750
simple and the scope is so narrow that

00:25:06,650 --> 00:25:11,750
it does its thing so i don't need to

00:25:08,750 --> 00:25:13,370
sell apps apps are great apps also

00:25:11,750 --> 00:25:15,350
attended target virtual machines which

00:25:13,370 --> 00:25:16,850
means the much simpler to program so

00:25:15,350 --> 00:25:18,560
instead of for example just going back

00:25:16,850 --> 00:25:19,400
to splash that example it's not actually

00:25:18,560 --> 00:25:20,750
looking and like the chain of

00:25:19,400 --> 00:25:22,820
microcontrollers on my phone and like

00:25:20,750 --> 00:25:24,920
what's the output gpio and you know how

00:25:22,820 --> 00:25:26,690
do I toggle it in whatever instead it's

00:25:24,920 --> 00:25:28,580
a virtual machine meditating and so it's

00:25:26,690 --> 00:25:32,060
making one call to the API layer to say

00:25:28,580 --> 00:25:33,410
please turn on the LED so in doing that

00:25:32,060 --> 00:25:34,970
in sort of isolating the hardware and

00:25:33,410 --> 00:25:36,500
running everything on virtual machine it

00:25:34,970 --> 00:25:38,180
widens the pool of programmers because

00:25:36,500 --> 00:25:39,590
you don't have to have everyone be like

00:25:38,180 --> 00:25:40,880
you know hardware software co designers

00:25:39,590 --> 00:25:43,280
and it's easier to maintain

00:25:40,880 --> 00:25:44,300
compatibility as you move the hardware

00:25:43,280 --> 00:25:45,680
forward you can sort as long as the

00:25:44,300 --> 00:25:48,740
implement that compatibility layer it at

00:25:45,680 --> 00:25:50,660
all work so the proposal here is that

00:25:48,740 --> 00:25:52,730
let's have these micro apps they can

00:25:50,660 --> 00:25:54,020
live in a temporary namespace and then

00:25:52,730 --> 00:25:55,760
in that temporary namespace we have a

00:25:54,020 --> 00:25:58,280
consistent set of topics like for

00:25:55,760 --> 00:25:59,930
example map you just subscribe to map

00:25:58,280 --> 00:26:02,410
again map subscribe to image you get an

00:25:59,930 --> 00:26:04,910
image and of course there's lots of

00:26:02,410 --> 00:26:08,120
subtleties there it won't be as good as

00:26:04,910 --> 00:26:09,440
a regular ralphs node the trick here is

00:26:08,120 --> 00:26:10,340
there's a sort of inherent tension I

00:26:09,440 --> 00:26:11,780
guess when you're creating these app

00:26:10,340 --> 00:26:13,850
environments are programmed frameworks

00:26:11,780 --> 00:26:14,870
in general of what is like simple it's

00:26:13,850 --> 00:26:16,670
going to just throw amount of simple and

00:26:14,870 --> 00:26:18,710
what's too simple and what's too

00:26:16,670 --> 00:26:20,630
complicated so that's that's certainly

00:26:18,710 --> 00:26:24,140
tough and it has to be iterated on of

00:26:20,630 --> 00:26:25,490
course I'm sure security Ross like I

00:26:24,140 --> 00:26:27,710
said before wasn't designed a security

00:26:25,490 --> 00:26:30,530
mind you can always kind of cause mayhem

00:26:27,710 --> 00:26:32,290
if you if you want mayhem but I think we

00:26:30,530 --> 00:26:35,900
can protect at least against bugs if not

00:26:32,290 --> 00:26:37,370
genius malicious hackers by running

00:26:35,900 --> 00:26:38,660
these apps in a temporary namespace and

00:26:37,370 --> 00:26:40,429
then if we add some functionality to the

00:26:38,660 --> 00:26:43,309
master so that you can't reach up to

00:26:40,429 --> 00:26:44,840
global identifiers for some programs and

00:26:43,309 --> 00:26:46,070
then also when you install the apps of

00:26:44,840 --> 00:26:48,080
some sort of manager program you could

00:26:46,070 --> 00:26:49,640
by granting permission to it just like

00:26:48,080 --> 00:26:51,559
on our phones and we install a program

00:26:49,640 --> 00:26:53,170
or an app we say like you can access the

00:26:51,559 --> 00:26:55,370
network you can access the file system

00:26:53,170 --> 00:26:56,660
by doing that you could then sort of

00:26:55,370 --> 00:26:58,070
have an analogy there where determines

00:26:56,660 --> 00:27:00,500
which these topics and services are

00:26:58,070 --> 00:27:03,260
visible in the in this sort of micro app

00:27:00,500 --> 00:27:05,000
temporary namespace a manager program

00:27:03,260 --> 00:27:06,140
that would need to launch these things

00:27:05,000 --> 00:27:07,370
probably to download them off the

00:27:06,140 --> 00:27:08,900
internet somewhere else oh but then to

00:27:07,370 --> 00:27:10,550
create these temporary namespaces

00:27:08,900 --> 00:27:12,679
destroy them when they're done and then

00:27:10,550 --> 00:27:15,290
also if we want to have a consistent set

00:27:12,679 --> 00:27:17,330
of topics available like map or odometry

00:27:15,290 --> 00:27:18,620
or whatever we need to listen to

00:27:17,330 --> 00:27:20,150
whatever the particular robot is that

00:27:18,620 --> 00:27:21,290
we're reporting this platform to and

00:27:20,150 --> 00:27:22,790
then it's going to rebroadcast then

00:27:21,290 --> 00:27:25,040
maybe mashup the data structure a little

00:27:22,790 --> 00:27:26,390
bit into something that is standard at

00:27:25,040 --> 00:27:29,480
least we could claim will be the same on

00:27:26,390 --> 00:27:31,790
all on all robots for all time okay so

00:27:29,480 --> 00:27:33,170
now this is the most fun one um this is

00:27:31,790 --> 00:27:36,440
pretty pretty far out there crackpot

00:27:33,170 --> 00:27:38,559
wise but the idea here is open and

00:27:36,440 --> 00:27:41,630
dynamic from where I like to call it so

00:27:38,559 --> 00:27:43,640
usually in robotics we have a bunch of

00:27:41,630 --> 00:27:45,590
software running whether it's on

00:27:43,640 --> 00:27:47,120
reticular operating system in Ross we

00:27:45,590 --> 00:27:49,250
have a driver node which then talks to

00:27:47,120 --> 00:27:51,110
usually a driver library sitting on top

00:27:49,250 --> 00:27:52,820
of the operating system that kind of

00:27:51,110 --> 00:27:54,830
does some magic and then it talks to a

00:27:52,820 --> 00:27:56,150
black box piece of firmware that does

00:27:54,830 --> 00:27:58,309
more magic and then we get data streams

00:27:56,150 --> 00:27:59,600
out of it at the end of the day so it's

00:27:58,309 --> 00:28:00,950
kind of fun thought experiment to see

00:27:59,600 --> 00:28:04,460
you know what if we shake this up a

00:28:00,950 --> 00:28:06,770
little bit so this is kind of a cartoon

00:28:04,460 --> 00:28:08,270
of what I just said we have a the orange

00:28:06,770 --> 00:28:10,370
box there is like kind of the UNIX world

00:28:08,270 --> 00:28:13,160
and there's a bunch of processes there

00:28:10,370 --> 00:28:15,110
they send data to each other then kind

00:28:13,160 --> 00:28:16,700
of out of that box there's these lines

00:28:15,110 --> 00:28:18,170
these peripheral buses each widget will

00:28:16,700 --> 00:28:20,210
have its own peripheral busted it lives

00:28:18,170 --> 00:28:21,770
on and then they kind of do their own

00:28:20,210 --> 00:28:23,510
thing another way to look at this is uh

00:28:21,770 --> 00:28:25,280
it's kind of like this basically here's

00:28:23,510 --> 00:28:26,420
a world that we can do things in we can

00:28:25,280 --> 00:28:27,650
be clever in and then here's a world

00:28:26,420 --> 00:28:30,290
that we just sort of have to take as it

00:28:27,650 --> 00:28:31,880
so it's interesting to think what if we

00:28:30,290 --> 00:28:34,309
change us a little bit the way that this

00:28:31,880 --> 00:28:35,720
has handled right here we have just you

00:28:34,309 --> 00:28:37,910
know world we don't control oftentimes

00:28:35,720 --> 00:28:38,870
what manufacturers do is we put a little

00:28:37,910 --> 00:28:41,120
functionalities past

00:28:38,870 --> 00:28:42,980
in the firmware and then we try to then

00:28:41,120 --> 00:28:44,600
have it so that the the host code can

00:28:42,980 --> 00:28:45,800
then do all sorts of crazy things on the

00:28:44,600 --> 00:28:47,870
host and so then that makes the driver

00:28:45,800 --> 00:28:49,640
library get more complicated but since

00:28:47,870 --> 00:28:52,730
it's easier to modify an update software

00:28:49,640 --> 00:28:55,250
then firmware this tends to be a good

00:28:52,730 --> 00:28:56,780
trade-off to make so it's interesting

00:28:55,250 --> 00:28:58,070
then and take a step back and say well

00:28:56,780 --> 00:29:00,800
let's look at the embedded system world

00:28:58,070 --> 00:29:02,300
a little bit last year was amazing the

00:29:00,800 --> 00:29:04,809
first time ever more of these smart

00:29:02,300 --> 00:29:07,490
phones were sold in personal computers

00:29:04,809 --> 00:29:08,600
arm-based microcontrollers are becoming

00:29:07,490 --> 00:29:10,040
common they're becoming kind of

00:29:08,600 --> 00:29:12,020
everywhere these are 32-bit machines

00:29:10,040 --> 00:29:14,000
with you know pipelines and memory

00:29:12,020 --> 00:29:16,790
systems that are fast and all sorts of

00:29:14,000 --> 00:29:18,920
things and because of that essentially

00:29:16,790 --> 00:29:20,660
we can put more and more smartest into

00:29:18,920 --> 00:29:22,100
our robots into the actual hardware

00:29:20,660 --> 00:29:24,230
without adding cost or complexity

00:29:22,100 --> 00:29:26,000
anymore I call my dad that the night I

00:29:24,230 --> 00:29:27,740
asked him this is a computer we bought

00:29:26,000 --> 00:29:29,660
like in the early 90s or something is it

00:29:27,740 --> 00:29:30,980
what's funny this is like 15 years ago

00:29:29,660 --> 00:29:34,030
and he still remembered exactly how much

00:29:30,980 --> 00:29:37,340
he paid for it was so painful is it

00:29:34,030 --> 00:29:40,580
3,500 dollars for a 60 megahertz Pentium

00:29:37,340 --> 00:29:42,110
the original p5's that same

00:29:40,580 --> 00:29:44,240
functionality they like sort of 60

00:29:42,110 --> 00:29:45,530
megahertz 32-bit type machine now is in

00:29:44,240 --> 00:29:46,640
an arm system-on-chip it's five

00:29:45,530 --> 00:29:49,580
millimeter square and it costs five

00:29:46,640 --> 00:29:51,559
dollars you know that obviously the

00:29:49,580 --> 00:29:52,820
computer had a hard disk the single chip

00:29:51,559 --> 00:29:54,860
doesn't have a hard disk but you know

00:29:52,820 --> 00:29:56,540
the in terms of just the actual count of

00:29:54,860 --> 00:29:58,940
MIPS of how many instructions we execute

00:29:56,540 --> 00:30:00,260
there now becoming comparable with with

00:29:58,940 --> 00:30:04,040
what we used to call computers is now a

00:30:00,260 --> 00:30:08,840
single chip device sort of a shameless

00:30:04,040 --> 00:30:10,610
plug here so here's a here's a hand I

00:30:08,840 --> 00:30:13,270
brought props your phone this is a hand

00:30:10,610 --> 00:30:15,950
of a working on for a while it's a

00:30:13,270 --> 00:30:17,690
system it has 13 of these arm

00:30:15,950 --> 00:30:19,520
system-on-chips in it so then if you

00:30:17,690 --> 00:30:23,090
look at all those kind of MIPS counts

00:30:19,520 --> 00:30:25,100
together you get 2000 nips every kind of

00:30:23,090 --> 00:30:26,480
link here every finger every motor

00:30:25,100 --> 00:30:28,340
controller has it has its own arm

00:30:26,480 --> 00:30:29,570
system-on-chip running in it and so it's

00:30:28,340 --> 00:30:30,770
interesting to then think what we could

00:30:29,570 --> 00:30:32,059
what can we actually do in this thing

00:30:30,770 --> 00:30:33,530
maybe I'd actually don't need to have an

00:30:32,059 --> 00:30:34,700
artist running on a host of our main

00:30:33,530 --> 00:30:38,179
back and do all these functionality in

00:30:34,700 --> 00:30:39,770
the hardware itself every year these

00:30:38,179 --> 00:30:40,730
things get faster so embedded systems

00:30:39,770 --> 00:30:42,770
are still enjoying this kind of

00:30:40,730 --> 00:30:43,940
exponential frequency scaling stuff that

00:30:42,770 --> 00:30:46,610
used to happen on desktops and was

00:30:43,940 --> 00:30:47,840
exciting this is still happening on in

00:30:46,610 --> 00:30:50,060
the embedded world so arm

00:30:47,840 --> 00:30:51,290
microcontrollers you know whether

00:30:50,060 --> 00:30:52,640
they're calling micron tours and call

00:30:51,290 --> 00:30:54,860
them computers every want to they get

00:30:52,640 --> 00:30:56,000
faster every year super phones you know

00:30:54,860 --> 00:30:57,440
every time you buy a new super phone

00:30:56,000 --> 00:31:00,170
it's it's better than your previous one

00:30:57,440 --> 00:31:01,400
has more awesomeness so if we can look

00:31:00,170 --> 00:31:03,320
at that as this now we have this

00:31:01,400 --> 00:31:04,460
basically a bunch of embedded systems we

00:31:03,320 --> 00:31:05,780
can tie them together and end up with a

00:31:04,460 --> 00:31:07,310
real computer maybe we can do the

00:31:05,780 --> 00:31:08,900
real-time needs the system inside the

00:31:07,310 --> 00:31:11,390
hardware itself as opposed to on an AR

00:31:08,900 --> 00:31:12,770
toss back on a PC the advantage of doing

00:31:11,390 --> 00:31:14,390
that is if we have lots of little

00:31:12,770 --> 00:31:16,880
processors that are each quite powerful

00:31:14,390 --> 00:31:20,210
it's inferiorly simple to configure them

00:31:16,880 --> 00:31:22,300
and get them running and maybe less pain

00:31:20,210 --> 00:31:26,000
dealing with with art houses and stuff

00:31:22,300 --> 00:31:27,770
so modularity the idea here we have on

00:31:26,000 --> 00:31:29,480
this hand is that these fingers

00:31:27,770 --> 00:31:31,010
essentially just separate off so they're

00:31:29,480 --> 00:31:31,850
mine ethically detached and then each of

00:31:31,010 --> 00:31:36,260
them is their sense of their own

00:31:31,850 --> 00:31:37,670
complete system but the point of this

00:31:36,260 --> 00:31:39,410
exercise is that each finger in and of

00:31:37,670 --> 00:31:40,880
itself has a 1 kilohertz real-time

00:31:39,410 --> 00:31:42,110
controller going inside of it which

00:31:40,880 --> 00:31:43,820
means that the the upstream connection

00:31:42,110 --> 00:31:45,350
can be quite low bandwidth and full of

00:31:43,820 --> 00:31:46,820
jitter and all sorts of bad things like

00:31:45,350 --> 00:31:49,520
that but it's okay because the finger

00:31:46,820 --> 00:31:50,750
behavior is controlled by the V on the

00:31:49,520 --> 00:31:52,460
devices in the hardware and it's always

00:31:50,750 --> 00:31:53,960
going to hit its one time or 1 kilohertz

00:31:52,460 --> 00:31:58,280
control loop because it is not doing

00:31:53,960 --> 00:31:59,870
anything else ok so that sells a one

00:31:58,280 --> 00:32:01,040
problem I guess the other problem though

00:31:59,870 --> 00:32:04,160
is once we started playing that game

00:32:01,040 --> 00:32:05,390
it's hard to iterate so the great thing

00:32:04,160 --> 00:32:06,620
about our toss running on a real

00:32:05,390 --> 00:32:08,420
computer is you can actually have a real

00:32:06,620 --> 00:32:10,760
screen you can you know change line of

00:32:08,420 --> 00:32:11,720
code rebuild it run it again do all the

00:32:10,760 --> 00:32:13,940
great things we can do in self

00:32:11,720 --> 00:32:15,980
trituration that's tricky and firmware

00:32:13,940 --> 00:32:17,000
of course and you know typically in

00:32:15,980 --> 00:32:18,290
firmware it's like you want to change

00:32:17,000 --> 00:32:19,430
the line of code as I go okay whatever

00:32:18,290 --> 00:32:21,020
I'll pull this thing off i'll stick a

00:32:19,430 --> 00:32:24,050
jtag programmer on that cross compile

00:32:21,020 --> 00:32:25,670
you know hit it hit program you sort of

00:32:24,050 --> 00:32:28,490
walk to the water felt and you come back

00:32:25,670 --> 00:32:30,680
and it's going again that's painful I

00:32:28,490 --> 00:32:31,670
made this hand so that you can there's

00:32:30,680 --> 00:32:33,650
boot loaders on each of these arm

00:32:31,670 --> 00:32:36,050
microcontrollers all the internal power

00:32:33,650 --> 00:32:37,340
systems are switchable so that you can

00:32:36,050 --> 00:32:38,510
then sort of make force everything to

00:32:37,340 --> 00:32:41,090
reset to boot loader and reflash the

00:32:38,510 --> 00:32:42,530
whole thing and that's fun um and you

00:32:41,090 --> 00:32:43,760
can you know single shell script you can

00:32:42,530 --> 00:32:45,530
program although recommend chores in the

00:32:43,760 --> 00:32:46,760
hand takes about a minute over ethernet

00:32:45,530 --> 00:32:47,990
10 minutes over can bus is really

00:32:46,760 --> 00:32:49,550
exciting the first time it happens and

00:32:47,990 --> 00:32:52,790
it's just terrible every time it after

00:32:49,550 --> 00:32:55,040
that so the proposal here is to make

00:32:52,790 --> 00:32:56,630
what I call live from where so lots

00:32:55,040 --> 00:32:58,250
affirmed were gets burned into flash

00:32:56,630 --> 00:32:59,900
there's kind of least the way I like

00:32:58,250 --> 00:33:01,340
this world there's sort of two things

00:32:59,900 --> 00:33:02,660
there's like the critical code that has

00:33:01,340 --> 00:33:04,610
to set up all the peripherals and stuff

00:33:02,660 --> 00:33:06,179
it's super boring and you have to like

00:33:04,610 --> 00:33:07,470
read data sheets for hours on end

00:33:06,179 --> 00:33:08,879
and then you sort of get these obscure

00:33:07,470 --> 00:33:10,019
registered settings and you sort of

00:33:08,879 --> 00:33:11,399
never change them ever again then

00:33:10,019 --> 00:33:13,490
there's the fun part the interesting

00:33:11,399 --> 00:33:16,080
part which is like the control loops the

00:33:13,490 --> 00:33:17,070
the other parts of maybe the the packet

00:33:16,080 --> 00:33:19,019
generation there some things that's

00:33:17,070 --> 00:33:20,730
interesting to deal with but especially

00:33:19,019 --> 00:33:23,369
the in our cases roboticists the

00:33:20,730 --> 00:33:24,629
controllers oftentimes that's the part

00:33:23,369 --> 00:33:26,730
you want to tweak because once you get

00:33:24,629 --> 00:33:28,980
the sort of base like bare metal stuff

00:33:26,730 --> 00:33:30,179
going then that's just going to work the

00:33:28,980 --> 00:33:31,200
experimentation cycle that's where it's

00:33:30,179 --> 00:33:33,210
painful if you want to just change one

00:33:31,200 --> 00:33:34,350
line of like some control code you don't

00:33:33,210 --> 00:33:35,429
want to have to then wait for your 10

00:33:34,350 --> 00:33:37,980
minutes for all of your controllers to

00:33:35,429 --> 00:33:39,539
reflash so the idea there is a let's

00:33:37,980 --> 00:33:41,549
have well first we'll be able to

00:33:39,539 --> 00:33:42,990
synchronize parameters to Ross primary

00:33:41,549 --> 00:33:44,100
server that make sense the second part

00:33:42,990 --> 00:33:45,509
that part of having both face the bottom

00:33:44,100 --> 00:33:46,679
is dynamic code injection of this

00:33:45,509 --> 00:33:48,690
interesting parts this is where it gets

00:33:46,679 --> 00:33:51,299
fully crack pop but they do here is that

00:33:48,690 --> 00:33:52,769
a Ross host maybe you can ask your

00:33:51,299 --> 00:33:55,350
microcontroller like where is some free

00:33:52,769 --> 00:33:57,269
memory that you have spun out a GCC

00:33:55,350 --> 00:33:58,830
linker script which means you can you

00:33:57,269 --> 00:34:00,330
can peg your object code to particular

00:33:58,830 --> 00:34:02,009
locations in memory peggle or memory

00:34:00,330 --> 00:34:03,480
segment sides you want them then cross

00:34:02,009 --> 00:34:05,190
compile you have this binary blob now

00:34:03,480 --> 00:34:07,320
and then just copy that thing into

00:34:05,190 --> 00:34:09,690
microcontroller memory and cast a

00:34:07,320 --> 00:34:11,399
function pointer gonna be awesome so

00:34:09,690 --> 00:34:16,049
we'll see how this goes anyway this is a

00:34:11,399 --> 00:34:17,940
problem so there are some features that

00:34:16,049 --> 00:34:19,500
can help you know these things we used

00:34:17,940 --> 00:34:20,669
to call microcontrollers or sort every

00:34:19,500 --> 00:34:21,869
year they get looked more like a

00:34:20,669 --> 00:34:23,940
computer they have memory protection

00:34:21,869 --> 00:34:25,409
units now they're super fancy ones have

00:34:23,940 --> 00:34:27,419
memory are virtual memory not all them

00:34:25,409 --> 00:34:28,799
though you can have different classes of

00:34:27,419 --> 00:34:30,899
exception handlers for user mode and

00:34:28,799 --> 00:34:33,510
supervisor mode so I think this might

00:34:30,899 --> 00:34:35,129
actually be possible we'll see if it is

00:34:33,510 --> 00:34:36,809
possible to be fun because you can then

00:34:35,129 --> 00:34:38,220
now you can tweak things quickly you can

00:34:36,809 --> 00:34:39,780
change the line of code cross compile it

00:34:38,220 --> 00:34:41,399
copying the memory and you're up and

00:34:39,780 --> 00:34:43,710
going again without this long and

00:34:41,399 --> 00:34:44,909
arduous wait time so at the end of the

00:34:43,710 --> 00:34:46,049
day the idea is not only is it open

00:34:44,909 --> 00:34:48,149
source former but it's actually live

00:34:46,049 --> 00:34:49,710
from her meaning that we can tweak

00:34:48,149 --> 00:34:51,210
things that run them again just like we

00:34:49,710 --> 00:34:52,980
love doing in all systems we can tweak

00:34:51,210 --> 00:34:54,799
your ass node you know control see it

00:34:52,980 --> 00:34:56,879
launch it again and it's up and running

00:34:54,799 --> 00:35:00,450
maybe we can do the same with with

00:34:56,879 --> 00:35:02,190
snippets of code and firmer itself ok so

00:35:00,450 --> 00:35:03,869
I've talked about three kind of main

00:35:02,190 --> 00:35:06,270
ideas today I first talked about the

00:35:03,869 --> 00:35:08,190
past the olden days of Ross some of the

00:35:06,270 --> 00:35:11,040
sources of inspiration we have the stair

00:35:08,190 --> 00:35:13,049
project p r1 at stanford the player

00:35:11,040 --> 00:35:14,490
stage project lots of other ideas also

00:35:13,049 --> 00:35:16,079
kind of got thrown into a blender and we

00:35:14,490 --> 00:35:18,690
ended up with with ross ideas at the end

00:35:16,079 --> 00:35:19,559
i did a whirlwind kind of drive-by of

00:35:18,690 --> 00:35:22,439
some ross function

00:35:19,559 --> 00:35:24,329
LD a fun slide show and then I just kind

00:35:22,439 --> 00:35:26,430
of went crackpot and had three fun ideas

00:35:24,329 --> 00:35:29,390
for the future so thanks to everyone for

00:35:26,430 --> 00:35:29,390
all your time thanks for coming

00:35:39,550 --> 00:35:44,540
okay sure the question was how can we

00:35:43,040 --> 00:35:46,130
compare what I was just kind of spouting

00:35:44,540 --> 00:35:48,680
off about this live from our idea with

00:35:46,130 --> 00:35:49,550
things like Arduino these which in case

00:35:48,680 --> 00:35:51,380
you're not familiar with it is a very

00:35:49,550 --> 00:35:52,340
popular platform right now for for

00:35:51,380 --> 00:35:53,570
dealing with small 8-bit

00:35:52,340 --> 00:35:55,100
microcontrollers and I guess they're

00:35:53,570 --> 00:35:58,130
moving on it's a 32-bit arm stuff now

00:35:55,100 --> 00:36:00,410
you can plug this it's a very low cost

00:35:58,130 --> 00:36:02,750
modules you can plug into USB and they

00:36:00,410 --> 00:36:03,980
have all the hardware in a nice ide you

00:36:02,750 --> 00:36:08,240
can sort of click go in and it all

00:36:03,980 --> 00:36:09,290
happens so it's a great question first

00:36:08,240 --> 00:36:11,170
of all let me try to think a little bit

00:36:09,290 --> 00:36:13,220
on how to respond to that reasonably I

00:36:11,170 --> 00:36:14,930
think I guess what I'm seeing here is

00:36:13,220 --> 00:36:16,580
that sometimes we don't need to flash

00:36:14,930 --> 00:36:18,020
the whole thing if there's a complicated

00:36:16,580 --> 00:36:19,250
program running on the microcontroller

00:36:18,020 --> 00:36:21,350
like for example these these finger

00:36:19,250 --> 00:36:22,940
microcontrollers I have there's quite a

00:36:21,350 --> 00:36:24,290
bit going on on these things there's a

00:36:22,940 --> 00:36:26,240
bootloader that runs there sort of the

00:36:24,290 --> 00:36:28,070
three second bootloader delay there's a

00:36:26,240 --> 00:36:29,240
bunch of configuration that needs to

00:36:28,070 --> 00:36:30,920
happen to bring them up and to get them

00:36:29,240 --> 00:36:32,360
running I guess what i was hoping is

00:36:30,920 --> 00:36:35,570
that we can sort of have an analog to a

00:36:32,360 --> 00:36:36,830
unix process launch so that I mean on a

00:36:35,570 --> 00:36:38,240
big UNIX machine you have a bunch of

00:36:36,830 --> 00:36:39,680
these things running you can just sort

00:36:38,240 --> 00:36:42,110
of say I want to run this piece of code

00:36:39,680 --> 00:36:43,370
now we call it a process it inserts an

00:36:42,110 --> 00:36:45,110
entering a process table and it gets

00:36:43,370 --> 00:36:46,730
scheduled and they do would be I guess

00:36:45,110 --> 00:36:48,260
more similar to that so if we can have

00:36:46,730 --> 00:36:50,590
kind of a micro version of a scheduler

00:36:48,260 --> 00:36:52,760
an actual process table on these things

00:36:50,590 --> 00:36:54,230
be able to maybe switch them on and off

00:36:52,760 --> 00:36:56,090
and almost like you're calling processes

00:36:54,230 --> 00:36:57,740
if that makes sense so it's sort of the

00:36:56,090 --> 00:36:59,390
equivalent I've guess of installing a

00:36:57,740 --> 00:37:01,040
UNIX process and launching it versus

00:36:59,390 --> 00:37:04,820
reimaging a whole hard drive that make

00:37:01,040 --> 00:37:07,220
sense the question was if we were to to

00:37:04,820 --> 00:37:09,110
do things over what would we what would

00:37:07,220 --> 00:37:13,220
we do differently what could we add on

00:37:09,110 --> 00:37:15,290
to the system I suppose it would be good

00:37:13,220 --> 00:37:17,270
and this can also be done retro actively

00:37:15,290 --> 00:37:19,670
of course to have kind of templates if

00:37:17,270 --> 00:37:21,800
you will that can impose structure on

00:37:19,670 --> 00:37:22,940
nodes that want structure I think it's

00:37:21,800 --> 00:37:24,250
always important to keep that optional

00:37:22,940 --> 00:37:26,060
but sometimes one of the common

00:37:24,250 --> 00:37:27,680
criticisms we hear is that there's not

00:37:26,060 --> 00:37:29,420
enough structure in droves I think it'd

00:37:27,680 --> 00:37:31,040
be good to have sort of various levels

00:37:29,420 --> 00:37:32,510
of structure that you can add like you

00:37:31,040 --> 00:37:34,220
can have a node that complies with sort

00:37:32,510 --> 00:37:35,690
of feature spec you know X Y Z or

00:37:34,220 --> 00:37:37,250
whatever that sort of implements these

00:37:35,690 --> 00:37:39,320
hooks into it then it behaves like other

00:37:37,250 --> 00:37:40,700
nodes there are other more structured

00:37:39,320 --> 00:37:42,080
frameworks out there that do this I

00:37:40,700 --> 00:37:43,490
think it's I think it's a good thing I

00:37:42,080 --> 00:37:44,990
think it's good to leave it optional but

00:37:43,490 --> 00:37:46,700
I think that having sort of a sort of

00:37:44,990 --> 00:37:47,750
default set of if you want to formalize

00:37:46,700 --> 00:37:48,800
things a little bit here's how it could

00:37:47,750 --> 00:37:51,010
look I think that that's a good thing to

00:37:48,800 --> 00:37:51,010
add

00:37:56,300 --> 00:38:00,690
right so the question is I kind of spell

00:37:59,400 --> 00:38:02,790
it off a bit about having let's have

00:38:00,690 --> 00:38:04,980
more Ross masters and masters of masters

00:38:02,790 --> 00:38:07,890
and Stefan the question is can we just

00:38:04,980 --> 00:38:10,380
get rid of masters altogether it's a

00:38:07,890 --> 00:38:11,610
great question and I think that there

00:38:10,380 --> 00:38:13,740
are systems out there that do this I

00:38:11,610 --> 00:38:14,760
think zeroconf or avahi they tend to do

00:38:13,740 --> 00:38:16,080
this you just sort of plug things in

00:38:14,760 --> 00:38:17,400
your network and then they send out

00:38:16,080 --> 00:38:19,020
discovery packets and periodically

00:38:17,400 --> 00:38:21,360
things discover each other and it's

00:38:19,020 --> 00:38:23,550
awesome I think that that's probably

00:38:21,360 --> 00:38:25,260
possible I think one trick to that is

00:38:23,550 --> 00:38:26,550
that this the stuff I've seen and I'm

00:38:25,260 --> 00:38:27,300
not very experienced at zero conference

00:38:26,550 --> 00:38:29,070
sure there are people in this room that

00:38:27,300 --> 00:38:31,290
are far better than I I've seen it

00:38:29,070 --> 00:38:32,940
mostly work on local network segments if

00:38:31,290 --> 00:38:34,800
you want to tie systems together over

00:38:32,940 --> 00:38:36,000
bigger bigger Hobbes that you can't just

00:38:34,800 --> 00:38:37,080
send a broadcast packets of the whole

00:38:36,000 --> 00:38:40,530
internet and hope that someone's going

00:38:37,080 --> 00:38:42,150
to respond I think that there could be a

00:38:40,530 --> 00:38:43,440
balance there may be of that local

00:38:42,150 --> 00:38:45,150
systems could find each other and

00:38:43,440 --> 00:38:46,650
configure each other one thing that's

00:38:45,150 --> 00:38:48,240
good though about the the master one

00:38:46,650 --> 00:38:50,340
thing is useful is the parameter server

00:38:48,240 --> 00:38:51,900
and that in that case it really is just

00:38:50,340 --> 00:38:53,430
sort of needs to be a program that

00:38:51,900 --> 00:38:56,100
everyone can talk to and find for

00:38:53,430 --> 00:38:57,210
configuration but there could be some

00:38:56,100 --> 00:38:59,640
sort of a balance there that we could

00:38:57,210 --> 00:39:00,660
find I guess good question i don't

00:38:59,640 --> 00:39:03,200
really have a solid answer for that as

00:39:00,660 --> 00:39:03,200
you can tell i'm sure

00:39:12,880 --> 00:39:22,490
hey question was why am I still in

00:39:18,710 --> 00:39:31,100
school I'm working on that we're getting

00:39:22,490 --> 00:39:33,140
close thanks for the question okay great

00:39:31,100 --> 00:39:34,070
thanks the question i guess a

00:39:33,140 --> 00:39:36,020
questionnaire if I understand it

00:39:34,070 --> 00:39:37,790
correctly cook me from wrong is that can

00:39:36,020 --> 00:39:39,680
we implement security at the nasty layer

00:39:37,790 --> 00:39:42,830
are the things we can do to improve the

00:39:39,680 --> 00:39:44,600
screen okay great yeah that's a good

00:39:42,830 --> 00:39:46,400
idea I am that's a good idea we could

00:39:44,600 --> 00:39:48,140
maybe use this layer to be would

00:39:46,400 --> 00:39:50,210
actually improve security right now Ross

00:39:48,140 --> 00:39:51,440
is pretty open any process can connect

00:39:50,210 --> 00:39:52,640
any other process you say that I want to

00:39:51,440 --> 00:39:54,020
subscribe to your camera feed you'll

00:39:52,640 --> 00:39:55,550
just give it to you it doesn't ask who

00:39:54,020 --> 00:39:58,250
you are and do you have a certificate if

00:39:55,550 --> 00:40:00,320
you should see that that's a great quite

00:39:58,250 --> 00:40:02,300
good idea we could use the essentially

00:40:00,320 --> 00:40:04,850
local masters maybe on each process or

00:40:02,300 --> 00:40:06,680
NH some each host and then when it's

00:40:04,850 --> 00:40:07,640
time to link host together maybe that's

00:40:06,680 --> 00:40:09,620
where we can impose security

00:40:07,640 --> 00:40:10,790
restrictions and actually try to maybe

00:40:09,620 --> 00:40:12,200
talk to a person to know something

00:40:10,790 --> 00:40:16,480
that's computer security and try to do

00:40:12,200 --> 00:40:16,480
the right thing it's great thanks

00:40:20,880 --> 00:40:28,860
so question there should everything be

00:40:23,140 --> 00:40:31,090
implemented or else that would be scary

00:40:28,860 --> 00:40:32,500
okay so there there are things Rost as

00:40:31,090 --> 00:40:34,030
well there are things Ross doesn't do as

00:40:32,500 --> 00:40:35,830
well so currently I guess the biggest

00:40:34,030 --> 00:40:36,910
hole is the the real time needs there

00:40:35,830 --> 00:40:38,950
are robots in the world that need

00:40:36,910 --> 00:40:41,020
real-time performance they run on art

00:40:38,950 --> 00:40:42,580
houses on you know industrial boxes that

00:40:41,020 --> 00:40:46,450
look all hardcore with bolts on them and

00:40:42,580 --> 00:40:48,130
stuff they that probably is good to keep

00:40:46,450 --> 00:40:50,260
that thing locked down tight by the

00:40:48,130 --> 00:40:51,310
people that build that robot it's good

00:40:50,260 --> 00:40:54,160
to have that thing respond every

00:40:51,310 --> 00:40:56,170
millisecond with the new update I think

00:40:54,160 --> 00:40:57,610
in systems like that that's that's great

00:40:56,170 --> 00:40:58,690
tighten that down all the way and then

00:40:57,610 --> 00:41:01,840
it's nice to run sort of our

00:40:58,690 --> 00:41:03,700
freewheeling fun system on top I think

00:41:01,840 --> 00:41:06,370
there are other systems that we could

00:41:03,700 --> 00:41:08,200
that also don't fit Ross very well the

00:41:06,370 --> 00:41:09,250
microcontroller world is hard so so one

00:41:08,200 --> 00:41:10,720
of the assumptions built in Ross's that

00:41:09,250 --> 00:41:13,030
every node is running an xml RPC server

00:41:10,720 --> 00:41:14,770
for configuration you can't do that in

00:41:13,030 --> 00:41:16,420
like four kilobytes of RAM it would be

00:41:14,770 --> 00:41:19,780
awesome maybe someone can but I can't

00:41:16,420 --> 00:41:22,210
anyway I think there are there are other

00:41:19,780 --> 00:41:23,560
worlds and other sort of domains in

00:41:22,210 --> 00:41:25,300
which it might make more sense to have a

00:41:23,560 --> 00:41:26,680
lighter weight framework and we've tried

00:41:25,300 --> 00:41:28,030
pretty hard to keep Ross lightweight but

00:41:26,680 --> 00:41:30,760
I think there's a sort of lightweight as

00:41:28,030 --> 00:41:32,170
a relative term and as processor scale

00:41:30,760 --> 00:41:34,950
down to tiny and tinier it's how it's

00:41:32,170 --> 00:41:34,950
hard to keep that the same

00:41:47,760 --> 00:41:49,820

YouTube URL: https://www.youtube.com/watch?v=3wnab6AjAwc


