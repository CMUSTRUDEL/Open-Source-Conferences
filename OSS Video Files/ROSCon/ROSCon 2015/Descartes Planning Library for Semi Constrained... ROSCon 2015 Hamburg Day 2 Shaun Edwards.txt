Title: Descartes Planning Library for Semi Constrained... ROSCon 2015 Hamburg Day 2 Shaun Edwards
Publication date: 2015-12-08
Playlist: ROSCon 2015
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2015 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,350 --> 00:00:06,390
thanks telly so I don't know why I

00:00:04,680 --> 00:00:10,200
signed up for two talks

00:00:06,390 --> 00:00:12,840
I'm really tired at this point I ain't

00:00:10,200 --> 00:00:14,460
working but I can't even really take

00:00:12,840 --> 00:00:16,920
credit for this project

00:00:14,460 --> 00:00:19,590
Jorge nicho who's a research engineer at

00:00:16,920 --> 00:00:22,170
Southwest Research is the primary

00:00:19,590 --> 00:00:25,310
developer I just got lucky enough to

00:00:22,170 --> 00:00:30,410
come to Ross con so all the work is

00:00:25,310 --> 00:00:30,410
really Jorge deserves a lot of credit so

00:00:30,650 --> 00:00:35,730
all right well we'll start with the

00:00:32,520 --> 00:00:37,530
application need so Descartes is a path

00:00:35,730 --> 00:00:40,620
planner I hinted that in my previous

00:00:37,530 --> 00:00:41,820
talk what it was for and Dave Coleman

00:00:40,620 --> 00:00:44,129
actually did a good job of outlining

00:00:41,820 --> 00:00:48,090
what is four but we never talked about

00:00:44,129 --> 00:00:52,100
the applications and in kind of a

00:00:48,090 --> 00:00:54,960
general abstract way Descartes solves

00:00:52,100 --> 00:00:57,899
the problem of Semite constrains reject

00:00:54,960 --> 00:01:00,059
arees but what does that really mean it

00:00:57,899 --> 00:01:04,589
means that the degrees of freedom of

00:01:00,059 --> 00:01:06,450
your process or your path are less than

00:01:04,589 --> 00:01:09,540
the degrees of freedom that your robot

00:01:06,450 --> 00:01:11,189
provides so you may have a six degree of

00:01:09,540 --> 00:01:14,990
freedom trajectory that you want to

00:01:11,189 --> 00:01:18,570
follow but your robot has seven joints

00:01:14,990 --> 00:01:20,310
and this happens a lot with robots that

00:01:18,570 --> 00:01:23,580
have more than six joints or even

00:01:20,310 --> 00:01:27,600
processes like machining or blending or

00:01:23,580 --> 00:01:29,520
painting where the constraints are a

00:01:27,600 --> 00:01:30,750
little bit fuzzy so maybe you have five

00:01:29,520 --> 00:01:32,610
degrees of freedom because you don't

00:01:30,750 --> 00:01:35,310
care about the the role about the tool

00:01:32,610 --> 00:01:36,900
or when you're painting maybe you know a

00:01:35,310 --> 00:01:38,490
little bit of angle difference is okay

00:01:36,900 --> 00:01:42,320
because it's paint and who's gonna

00:01:38,490 --> 00:01:45,930
notice right but those those kind of

00:01:42,320 --> 00:01:48,200
semi constraints really open up the

00:01:45,930 --> 00:01:50,880
planning space if you can utilize them

00:01:48,200 --> 00:01:56,340
but that's not that's not the case in

00:01:50,880 --> 00:01:58,740
traditional industrial robotics so say

00:01:56,340 --> 00:02:01,200
you have a painting application you know

00:01:58,740 --> 00:02:02,790
and you want to paint an object in front

00:02:01,200 --> 00:02:04,770
of you how do you currently solve that

00:02:02,790 --> 00:02:07,829
problem well there are definitely tools

00:02:04,770 --> 00:02:11,069
for doing this in the industrial space

00:02:07,829 --> 00:02:13,200
but they all have require you to make

00:02:11,069 --> 00:02:14,130
this arbitrary assignment of a six

00:02:13,200 --> 00:02:16,260
degree of freedom

00:02:14,130 --> 00:02:19,260
path because that's all the industrial

00:02:16,260 --> 00:02:23,250
tools understand if you have a redundant

00:02:19,260 --> 00:02:24,960
axis so you have a 707 axis robot you

00:02:23,250 --> 00:02:26,700
have to give it a seventh parameter that

00:02:24,960 --> 00:02:29,940
tells it generally like where the elbow

00:02:26,700 --> 00:02:31,710
should be but again these these should

00:02:29,940 --> 00:02:35,400
be free parameters these shouldn't be

00:02:31,710 --> 00:02:37,290
things that you have to set also by

00:02:35,400 --> 00:02:39,900
setting these things you may actually

00:02:37,290 --> 00:02:43,100
tell get your robot in a weird spot like

00:02:39,900 --> 00:02:45,360
near singularity where then the the

00:02:43,100 --> 00:02:48,720
timing of your trajectory becomes

00:02:45,360 --> 00:02:50,610
suspect and for things like painting you

00:02:48,720 --> 00:02:51,840
actually want very good timing on your

00:02:50,610 --> 00:02:54,810
trajectory because that's what

00:02:51,840 --> 00:02:56,580
guarantees you'll get an even coat but

00:02:54,810 --> 00:02:58,350
you know if you do the traditional

00:02:56,580 --> 00:03:01,710
approach that may or may not be true you

00:02:58,350 --> 00:03:03,870
may not be able to guarantee timing so

00:03:01,710 --> 00:03:05,400
what are the limitations of the you know

00:03:03,870 --> 00:03:07,920
the current solution the traditional

00:03:05,400 --> 00:03:10,350
industrial solution well first and

00:03:07,920 --> 00:03:14,130
foremost you get reduced workspace so

00:03:10,350 --> 00:03:15,900
you look at the graphic there the robot

00:03:14,130 --> 00:03:17,940
vendors will show you in their data

00:03:15,900 --> 00:03:19,920
sheets this really gigantic workspace

00:03:17,940 --> 00:03:22,830
they'll talk about reach my robot has a

00:03:19,920 --> 00:03:25,050
one meter reach but that's really a

00:03:22,830 --> 00:03:27,330
three degree of freedom workspace

00:03:25,050 --> 00:03:29,790
because you can only reach that point in

00:03:27,330 --> 00:03:32,370
one orientation and generally that's not

00:03:29,790 --> 00:03:33,690
useful unless you're lucky enough to to

00:03:32,370 --> 00:03:37,380
have to go to that point in that

00:03:33,690 --> 00:03:40,350
orientation so when we we reduce the

00:03:37,380 --> 00:03:42,240
workspace by imposing more constraints

00:03:40,350 --> 00:03:45,120
so for example six degree of freedom

00:03:42,240 --> 00:03:47,280
workspace may look like what's pictured

00:03:45,120 --> 00:03:49,710
up there all of a sudden you take this

00:03:47,280 --> 00:03:54,420
really big reach and you you kind of

00:03:49,710 --> 00:03:57,060
condensed it down and if it's like the

00:03:54,420 --> 00:03:59,460
current solution really requires you to

00:03:57,060 --> 00:04:02,040
specify a six degree of freedom path

00:03:59,460 --> 00:04:04,310
then really what the workspace looks

00:04:02,040 --> 00:04:06,660
like is what's pictured up there

00:04:04,310 --> 00:04:08,700
actually I just kind of threw that that

00:04:06,660 --> 00:04:10,500
visual in there if anybody wants to work

00:04:08,700 --> 00:04:12,300
on a tool to actually produce visuals

00:04:10,500 --> 00:04:15,810
that show workspaces that would be an

00:04:12,300 --> 00:04:18,299
awesome tool but you know visually

00:04:15,810 --> 00:04:20,549
that's kind of what it looks like so

00:04:18,299 --> 00:04:22,650
when you're when you're specifying these

00:04:20,549 --> 00:04:25,590
paths you're relying a lot on human

00:04:22,650 --> 00:04:27,610
intuition you you want the human

00:04:25,590 --> 00:04:29,560
operator that's using these tools to

00:04:27,610 --> 00:04:32,590
essentially say well you know I'm gonna

00:04:29,560 --> 00:04:34,090
set the orientation at this because that

00:04:32,590 --> 00:04:36,879
keeps my elbow out of the way and I

00:04:34,090 --> 00:04:39,310
won't run into things but you know human

00:04:36,879 --> 00:04:41,680
intuition only goes so far

00:04:39,310 --> 00:04:43,150
and certainly collisions singularities

00:04:41,680 --> 00:04:46,150
and joint limits they really don't get

00:04:43,150 --> 00:04:48,099
accounted for in current solutions but

00:04:46,150 --> 00:04:52,719
we know within Ross we can handle these

00:04:48,099 --> 00:04:54,849
things all right so what is Descartes

00:04:52,719 --> 00:04:57,460
well it's a planning library for some

00:04:54,849 --> 00:04:59,740
might constrained trajectories you know

00:04:57,460 --> 00:05:01,810
in the software world we like to say you

00:04:59,740 --> 00:05:03,789
know do one thing and do it well that

00:05:01,810 --> 00:05:04,830
typically means you're a new project and

00:05:03,789 --> 00:05:07,840
you you can only do one thing

00:05:04,830 --> 00:05:10,060
traditionally so that's probably more

00:05:07,840 --> 00:05:11,590
true about what we're doing now but I'll

00:05:10,060 --> 00:05:14,139
take credit for it we do one thing and

00:05:11,590 --> 00:05:16,240
we do it pretty well we had some

00:05:14,139 --> 00:05:17,979
requirements so again generate these

00:05:16,240 --> 00:05:22,990
common-sense paths that I was talking

00:05:17,979 --> 00:05:25,270
about find easy solutions fast but we

00:05:22,990 --> 00:05:27,340
also want to solve the hard problems but

00:05:25,270 --> 00:05:29,949
given enough time right so that that

00:05:27,340 --> 00:05:33,310
that seems tractable we should be able

00:05:29,949 --> 00:05:35,860
to find that handle hybrid trajectories

00:05:33,310 --> 00:05:39,039
so this idea that you have joint and

00:05:35,860 --> 00:05:41,139
Cartesian motion kind of interspersed so

00:05:39,039 --> 00:05:42,879
you might define a joint point and then

00:05:41,139 --> 00:05:45,099
say okay from that point I want to move

00:05:42,879 --> 00:05:48,310
in a straight line right so I have a

00:05:45,099 --> 00:05:50,460
bunch of Cartesian poses that that's

00:05:48,310 --> 00:05:54,069
real important because a lot of the

00:05:50,460 --> 00:05:55,870
tools within Ross either specify one or

00:05:54,069 --> 00:05:57,370
the other you get are all Cartesian

00:05:55,870 --> 00:05:59,710
points are all joint points but you

00:05:57,370 --> 00:06:01,330
can't like mix them but in real

00:05:59,710 --> 00:06:04,199
applications you often do want to mix

00:06:01,330 --> 00:06:05,919
them and then we have this additional

00:06:04,199 --> 00:06:09,400
requirement that we want to be able to

00:06:05,919 --> 00:06:11,529
do fast replanting or cached planning so

00:06:09,400 --> 00:06:14,229
in a traditional om PL movement

00:06:11,529 --> 00:06:15,460
application you solve a problem and you

00:06:14,229 --> 00:06:17,979
throw it out

00:06:15,460 --> 00:06:20,259
we saw Dave Coleman's improvements where

00:06:17,979 --> 00:06:24,279
he would keep experience graphs so that

00:06:20,259 --> 00:06:26,409
he could solve similar problems are the

00:06:24,279 --> 00:06:28,810
same problem very quickly this is kind

00:06:26,409 --> 00:06:30,479
of in that same thing where if we made

00:06:28,810 --> 00:06:33,939
slight modifications to the trajectory

00:06:30,479 --> 00:06:39,550
via GUI or based on some sensor feedback

00:06:33,939 --> 00:06:41,080
that that would plan very quickly so I'm

00:06:39,550 --> 00:06:43,870
going to start with

00:06:41,080 --> 00:06:46,120
an example so the first example I gave

00:06:43,870 --> 00:06:48,069
in my talk this morning was blending

00:06:46,120 --> 00:06:49,509
right that used a cart in the on the

00:06:48,069 --> 00:06:52,090
back end but that wasn't the first

00:06:49,509 --> 00:06:55,810
application the first application was

00:06:52,090 --> 00:06:58,960
what we call robotic routing essentially

00:06:55,810 --> 00:07:01,180
it was using a robot to cut thin sheet

00:06:58,960 --> 00:07:03,879
metal into kind of very complex shapes

00:07:01,180 --> 00:07:06,190
and the trajectory the Cartesian

00:07:03,879 --> 00:07:08,470
trajectory that kind of defines what

00:07:06,190 --> 00:07:10,150
these shapes are was either imported

00:07:08,470 --> 00:07:13,020
through CAD or you can actually measure

00:07:10,150 --> 00:07:15,370
it using a coordinate measuring machine

00:07:13,020 --> 00:07:17,110
didn't matter where the source was as

00:07:15,370 --> 00:07:21,819
long as it came in we'd be able to deal

00:07:17,110 --> 00:07:25,449
with it so when we first did this we had

00:07:21,819 --> 00:07:26,650
in so that path for a routing operation

00:07:25,449 --> 00:07:30,250
as you might imagine there's a five

00:07:26,650 --> 00:07:31,659
degree of freedom path and but we had a

00:07:30,250 --> 00:07:34,120
six degree of freedom robot so that

00:07:31,659 --> 00:07:37,210
meant we had at least one degree of

00:07:34,120 --> 00:07:39,099
freedom that we could play with and when

00:07:37,210 --> 00:07:42,909
we first did this project we solved an

00:07:39,099 --> 00:07:46,180
800 point path in 30 seconds which is

00:07:42,909 --> 00:07:48,069
not horribly fast but for the the

00:07:46,180 --> 00:07:49,750
project we were working on it was good

00:07:48,069 --> 00:07:52,449
enough it was kind of an offline

00:07:49,750 --> 00:07:54,849
programming but we wanted to make it

00:07:52,449 --> 00:07:57,520
faster and we did over the you know next

00:07:54,849 --> 00:07:59,710
several months we got it down to between

00:07:57,520 --> 00:08:03,789
one and ten seconds to solve that same

00:07:59,710 --> 00:08:05,500
problem so and we did that just by

00:08:03,789 --> 00:08:06,729
optimizing our code a little bit wasn't

00:08:05,500 --> 00:08:10,659
very difficult we didn't actually have

00:08:06,729 --> 00:08:12,550
to change our approach the path planner

00:08:10,659 --> 00:08:14,500
worked by minimizing joint motion so

00:08:12,550 --> 00:08:17,379
typically you got to have some cost and

00:08:14,500 --> 00:08:19,919
that's just one that that you know we've

00:08:17,379 --> 00:08:23,560
used but you can you can imagine others

00:08:19,919 --> 00:08:26,440
we achieved re-planning which was nearly

00:08:23,560 --> 00:08:30,879
instantaneous we use this in fact to

00:08:26,440 --> 00:08:34,539
allow the user to modify paths via GUI

00:08:30,879 --> 00:08:36,339
and then we had support for hybrid

00:08:34,539 --> 00:08:40,349
kinematic planning right so different

00:08:36,339 --> 00:08:43,740
different wave points joint in Cartesian

00:08:40,349 --> 00:08:48,060
and so here's just a quick video of

00:08:43,740 --> 00:08:48,060
Descartes and some of the features of it

00:08:48,420 --> 00:08:52,930
so it says sneak peek because I actually

00:08:50,860 --> 00:08:54,470
I showed this about six months ago but

00:08:52,930 --> 00:08:57,140
it shows kind of the relevant

00:08:54,470 --> 00:09:06,110
capabilities oh come on don't do that to

00:08:57,140 --> 00:09:11,080
me Oh windows all right I'm gonna go

00:09:06,110 --> 00:09:18,200
back one and I'm gonna try it again okay

00:09:11,080 --> 00:09:22,880
that'll probably fail again so what you

00:09:18,200 --> 00:09:26,810
see is there's a youtube link if you go

00:09:22,880 --> 00:09:30,800
there it'll work but what we see is

00:09:26,810 --> 00:09:32,570
basically a Cartesian path in us solving

00:09:30,800 --> 00:09:33,050
it with an industrial manipulator using

00:09:32,570 --> 00:09:34,760
descartes

00:09:33,050 --> 00:09:38,510
and then giving the user the opportunity

00:09:34,760 --> 00:09:39,890
to go in and modify specific points and

00:09:38,510 --> 00:09:41,570
when they go in and they modify those

00:09:39,890 --> 00:09:43,820
points you can it reap lands

00:09:41,570 --> 00:09:45,890
instantaneously and you can see the

00:09:43,820 --> 00:09:49,040
effect so by kind of setting these

00:09:45,890 --> 00:09:50,540
anchor points in the GUI you can

00:09:49,040 --> 00:09:53,050
actually get the robot to do what you

00:09:50,540 --> 00:09:57,770
want to do from a human interaction

00:09:53,050 --> 00:09:59,150
perspective watch the YouTube video I

00:09:57,770 --> 00:10:03,170
guarantee it's definitely worth it it's

00:09:59,150 --> 00:10:06,380
exciting stuff path planning is awesome

00:10:03,170 --> 00:10:08,480
it's really exciting alright so now to

00:10:06,380 --> 00:10:11,060
delve into a little bit of the details

00:10:08,480 --> 00:10:12,530
of what Descartes is I don't get to do

00:10:11,060 --> 00:10:15,790
this too often so like this is the

00:10:12,530 --> 00:10:19,360
perfect perfect group to to jump in and

00:10:15,790 --> 00:10:22,010
you know show what's under the hood so

00:10:19,360 --> 00:10:23,690
what we did at first is we just define

00:10:22,010 --> 00:10:27,640
the interfaces what are the Descartes

00:10:23,690 --> 00:10:30,530
interfaces there's a trajectory point

00:10:27,640 --> 00:10:34,190
and this is completely robot independent

00:10:30,530 --> 00:10:35,810
just defines some points in space it can

00:10:34,190 --> 00:10:38,210
be fuzzy it doesn't have to be any

00:10:35,810 --> 00:10:39,950
particular orientation or it could have

00:10:38,210 --> 00:10:43,970
you know some bounds on a sexual

00:10:39,950 --> 00:10:47,000
Cartesian position as well and it

00:10:43,970 --> 00:10:49,130
includes some timing information so that

00:10:47,000 --> 00:10:51,080
when you kind of piece these trajectory

00:10:49,130 --> 00:10:54,350
points together you can then figure out

00:10:51,080 --> 00:10:57,320
the timing of the full trajectory the

00:10:54,350 --> 00:11:01,130
second interface is a robot model and we

00:10:57,320 --> 00:11:03,530
use this for AI K in FK forward

00:11:01,130 --> 00:11:06,710
kinematics so kinematics are captured

00:11:03,530 --> 00:11:08,170
within the robot model we use it to

00:11:06,710 --> 00:11:10,780
check validity validity

00:11:08,170 --> 00:11:14,410
which for us includes checking for

00:11:10,780 --> 00:11:18,100
collision joint limits anything that

00:11:14,410 --> 00:11:19,870
might make the robot pose invalid so

00:11:18,100 --> 00:11:23,530
this robot model is actually very

00:11:19,870 --> 00:11:25,900
similar to the movement robot state with

00:11:23,530 --> 00:11:27,610
the one addition and if you guys are

00:11:25,900 --> 00:11:29,200
familiar with it but it would it

00:11:27,610 --> 00:11:31,450
provides a lot less pollution checking

00:11:29,200 --> 00:11:33,840
and kinematics but this one addition

00:11:31,450 --> 00:11:36,160
that we get all the I case solutions

00:11:33,840 --> 00:11:38,500
this is important because if we're gonna

00:11:36,160 --> 00:11:39,850
do this Cartesian planner and we're

00:11:38,500 --> 00:11:41,830
going to have to work through all the

00:11:39,850 --> 00:11:44,020
different kind of arm configurations a

00:11:41,830 --> 00:11:46,270
robot can be in we have to know what

00:11:44,020 --> 00:11:48,430
those are so that was the additional

00:11:46,270 --> 00:11:52,450
capability that we added to robot model

00:11:48,430 --> 00:11:54,460
and then you know a planner which really

00:11:52,450 --> 00:11:56,200
just does trajectory solving right give

00:11:54,460 --> 00:11:58,420
me a trajectory and I'll spit out a

00:11:56,200 --> 00:12:01,570
bunch of joint points that achieve that

00:11:58,420 --> 00:12:07,390
trajectory and also handles the the plan

00:12:01,570 --> 00:12:09,460
caching and replanting okay so once we

00:12:07,390 --> 00:12:10,780
had that we kind of had a structure for

00:12:09,460 --> 00:12:13,180
how all this stuff would work together

00:12:10,780 --> 00:12:15,730
yeah we hadn't actually implemented

00:12:13,180 --> 00:12:17,230
anything so you know it actually

00:12:15,730 --> 00:12:19,210
couldn't solve paths until we made

00:12:17,230 --> 00:12:22,410
implementations of these specific things

00:12:19,210 --> 00:12:26,380
so in trajectory points we define

00:12:22,410 --> 00:12:28,900
Cartesian points joint points there's

00:12:26,380 --> 00:12:31,750
pretty straightforward in a lot of our

00:12:28,900 --> 00:12:33,070
applications we always have a Cartesian

00:12:31,750 --> 00:12:34,600
pose but we don't care about the

00:12:33,070 --> 00:12:37,750
orientation about the tool so that's

00:12:34,600 --> 00:12:39,730
what an actually symmetric point is and

00:12:37,750 --> 00:12:41,050
I'm sure in the future we'll add a bunch

00:12:39,730 --> 00:12:44,680
more but those are the three we've

00:12:41,050 --> 00:12:48,160
implemented so far the robot model is

00:12:44,680 --> 00:12:50,770
really just a move it wrapper we use

00:12:48,160 --> 00:12:52,330
move it kind of the back end for its

00:12:50,770 --> 00:12:54,760
environment model and kinematics

00:12:52,330 --> 00:12:58,060
capabilities and we're actually working

00:12:54,760 --> 00:13:00,460
to to take the the extra things we need

00:12:58,060 --> 00:13:04,060
and push that stuff in to move it to

00:13:00,460 --> 00:13:06,240
make it a better user experience using

00:13:04,060 --> 00:13:09,880
Descartes and kind of move it together

00:13:06,240 --> 00:13:12,850
you can also do fast I care a purse Dave

00:13:09,880 --> 00:13:17,710
introduced those this morning fast I K

00:13:12,850 --> 00:13:20,120
is really magic it's it's the I was one

00:13:17,710 --> 00:13:22,040
of the coolest things with

00:13:20,120 --> 00:13:25,519
move it in an open rave that actually

00:13:22,040 --> 00:13:27,320
implements it the real benefit of it for

00:13:25,519 --> 00:13:30,110
us is I said we need to get all the I

00:13:27,320 --> 00:13:31,940
key solutions for a different for a

00:13:30,110 --> 00:13:33,800
particular robot configuration it

00:13:31,940 --> 00:13:36,850
provides those directly and they're

00:13:33,800 --> 00:13:40,160
solved analytically so they're very fast

00:13:36,850 --> 00:13:43,610
when we don't have fast ki K we use KD l

00:13:40,160 --> 00:13:47,329
under move it and it's it's definitely a

00:13:43,610 --> 00:13:49,670
lot slower and kind of our our path

00:13:47,329 --> 00:13:52,370
planning approach you you want this

00:13:49,670 --> 00:13:54,019
speed and then the other thing the other

00:13:52,370 --> 00:13:56,930
things we've done are kind of custom

00:13:54,019 --> 00:13:59,240
solutions where some really smart

00:13:56,930 --> 00:14:02,899
engineer figures out like the inverse

00:13:59,240 --> 00:14:05,720
kinematics directly the planners that

00:14:02,899 --> 00:14:07,790
we've actually implemented are all graph

00:14:05,720 --> 00:14:09,050
based the reason we can get away with

00:14:07,790 --> 00:14:11,180
this is when you're dealing with the

00:14:09,050 --> 00:14:14,120
semi constrained Cartesian trajectory

00:14:11,180 --> 00:14:16,490
your search space is not that big it's

00:14:14,120 --> 00:14:18,680
not like free space motion with movement

00:14:16,490 --> 00:14:21,110
where you go from A to B and you could

00:14:18,680 --> 00:14:23,480
take any path to go from A to B we've

00:14:21,110 --> 00:14:26,360
defined the path within some boundaries

00:14:23,480 --> 00:14:27,889
and so it's a much smaller workspace so

00:14:26,360 --> 00:14:30,050
we can just take traditional graph

00:14:27,889 --> 00:14:34,040
solving methods and throw them at this

00:14:30,050 --> 00:14:37,370
problem and the first one we implemented

00:14:34,040 --> 00:14:39,380
we called dense so it's a graph based

00:14:37,370 --> 00:14:42,560
approach and it takes into account every

00:14:39,380 --> 00:14:45,410
point within the trajectory and then the

00:14:42,560 --> 00:14:47,089
next one we found by taking into account

00:14:45,410 --> 00:14:49,370
every point in the trajectory that

00:14:47,089 --> 00:14:52,459
sometimes you ran out of memory so the

00:14:49,370 --> 00:14:56,540
next one was called sparse we're great

00:14:52,459 --> 00:14:59,389
at naming by the way but you know it's a

00:14:56,540 --> 00:15:00,829
hybrid graph based approach so it uses

00:14:59,389 --> 00:15:02,360
kind of dense the dense planar

00:15:00,829 --> 00:15:04,220
underneath but it also allows you to

00:15:02,360 --> 00:15:06,050
interpolate two points within the

00:15:04,220 --> 00:15:08,180
trajectory so you don't have to load up

00:15:06,050 --> 00:15:11,209
the dense planner with all of your

00:15:08,180 --> 00:15:13,130
points the result is for most

00:15:11,209 --> 00:15:16,399
trajectories it's it's much faster

00:15:13,130 --> 00:15:21,889
because interpolation is a faster search

00:15:16,399 --> 00:15:23,360
than graph based search so what what

00:15:21,889 --> 00:15:25,399
does it really look like what does an

00:15:23,360 --> 00:15:27,620
execution of descartes look like well at

00:15:25,399 --> 00:15:30,610
the top you have a hybrid trajectory

00:15:27,620 --> 00:15:33,339
right the blue points are all there

00:15:30,610 --> 00:15:35,320
they're great the blue points are joint

00:15:33,339 --> 00:15:37,660
points that you might define the orange

00:15:35,320 --> 00:15:39,399
points are Cartesian points right and we

00:15:37,660 --> 00:15:42,190
have a certain order to them how we want

00:15:39,399 --> 00:15:43,959
them to be executed and then the size of

00:15:42,190 --> 00:15:47,370
the dot really represents you know

00:15:43,959 --> 00:15:49,839
what's the tolerance on that particular

00:15:47,370 --> 00:15:52,570
particular point so the larger the

00:15:49,839 --> 00:15:54,190
tolerance the more joint solutions you

00:15:52,570 --> 00:15:56,110
might find for that because you have a

00:15:54,190 --> 00:15:58,390
bigger kind of zone you can get to and

00:15:56,110 --> 00:16:02,200
so what we do is we take a hybrid

00:15:58,390 --> 00:16:04,779
trajectory and we we do a sampling in

00:16:02,200 --> 00:16:06,790
joint space based on the tolerance the

00:16:04,779 --> 00:16:10,029
collision and what the kinematics tell

00:16:06,790 --> 00:16:11,709
us and then you know from that you may

00:16:10,029 --> 00:16:13,899
get multiple joint solutions for each

00:16:11,709 --> 00:16:16,269
one of these points so as we move down

00:16:13,899 --> 00:16:19,450
the figure you can see you can see

00:16:16,269 --> 00:16:21,279
multiple joint solutions and you know

00:16:19,450 --> 00:16:22,990
this is just our implementation of it

00:16:21,279 --> 00:16:25,510
nothing in descartes actually requires

00:16:22,990 --> 00:16:28,779
this but we do all graph based search so

00:16:25,510 --> 00:16:30,940
using that graph based approach we put

00:16:28,779 --> 00:16:33,459
all these points into a graph they're

00:16:30,940 --> 00:16:36,760
all joint points at the at this point in

00:16:33,459 --> 00:16:39,430
the execution hmm we then calculate the

00:16:36,760 --> 00:16:41,440
connections between those points and

00:16:39,430 --> 00:16:44,500
that's based on mostly dynamic

00:16:41,440 --> 00:16:46,660
constraints so you know two adjacent

00:16:44,500 --> 00:16:49,060
points in this graph are connected if

00:16:46,660 --> 00:16:51,190
the robot is physically capable of going

00:16:49,060 --> 00:16:53,740
from one to the other within the timing

00:16:51,190 --> 00:16:54,970
constraints so you can imagine if you

00:16:53,740 --> 00:16:56,649
had to move your robot at very far

00:16:54,970 --> 00:16:59,290
distance in a very short period of time

00:16:56,649 --> 00:17:03,250
that's not possible we prune that out of

00:16:59,290 --> 00:17:05,140
the graph and then we just we just throw

00:17:03,250 --> 00:17:07,540
graph solvers within boost at this

00:17:05,140 --> 00:17:12,339
problem and we come out with a cost

00:17:07,540 --> 00:17:14,049
optimised path plan and in the in in

00:17:12,339 --> 00:17:21,790
almost all cases in Descartes we just

00:17:14,049 --> 00:17:24,819
use the the minimizing joint motion so

00:17:21,790 --> 00:17:27,790
some open source details we do all this

00:17:24,819 --> 00:17:30,910
development publicly which means we love

00:17:27,790 --> 00:17:32,799
to take contributions but you know you

00:17:30,910 --> 00:17:36,270
can see the daily commits you can see

00:17:32,799 --> 00:17:38,980
all the issues that we might have and

00:17:36,270 --> 00:17:42,220
you know you can kind of see where the

00:17:38,980 --> 00:17:44,140
the program or the project is going we

00:17:42,220 --> 00:17:47,050
have documented things on the Ross

00:17:44,140 --> 00:17:50,050
Wiki so that's kind of a high-level

00:17:47,050 --> 00:17:54,430
description of how descartes works we

00:17:50,050 --> 00:17:56,440
have two releases hydro which is our

00:17:54,430 --> 00:18:00,070
stable release at this point and a

00:17:56,440 --> 00:18:02,530
binary release and then we are doing all

00:18:00,070 --> 00:18:04,360
our development in indigo so for that

00:18:02,530 --> 00:18:07,540
reason we haven't actually done a buying

00:18:04,360 --> 00:18:09,550
a binary release of indigo because we

00:18:07,540 --> 00:18:12,160
don't want people to use it and we know

00:18:09,550 --> 00:18:14,110
we're gonna break their stuff so we make

00:18:12,160 --> 00:18:16,480
it a source release so at least you know

00:18:14,110 --> 00:18:20,140
you can fork the source and that will

00:18:16,480 --> 00:18:22,060
become stable it would be really great I

00:18:20,140 --> 00:18:23,320
brought this up this morning in the move

00:18:22,060 --> 00:18:25,360
it talked but it would be really great

00:18:23,320 --> 00:18:27,880
if we could simultaneously have a stable

00:18:25,360 --> 00:18:30,910
version of Descartes and an unstable

00:18:27,880 --> 00:18:33,190
version of Descartes I don't know

00:18:30,910 --> 00:18:35,170
technically how that can all work but if

00:18:33,190 --> 00:18:36,340
that could happen I think it we would be

00:18:35,170 --> 00:18:38,640
able to increase the number of users

00:18:36,340 --> 00:18:41,140
because it's far easier to get binary

00:18:38,640 --> 00:18:44,890
versions than it is to get source

00:18:41,140 --> 00:18:46,090
versions we have a tutorial up there and

00:18:44,890 --> 00:18:48,760
how do you stake art it's pretty

00:18:46,090 --> 00:18:50,860
straightforward and I'd like to

00:18:48,760 --> 00:18:53,620
acknowledge that the decart development

00:18:50,860 --> 00:18:55,870
was funded by NIST and the Ross King

00:18:53,620 --> 00:19:03,160
Ross condone Ross industrial consortium

00:18:55,870 --> 00:19:05,020
FTP efforts I will say that we're the

00:19:03,160 --> 00:19:08,740
decart demo or the we're demoing

00:19:05,020 --> 00:19:10,870
descartes in our our booths downstairs

00:19:08,740 --> 00:19:11,470
we're using the r5 robots the one going

00:19:10,870 --> 00:19:13,390
like this

00:19:11,470 --> 00:19:15,310
so it's following a five degree of

00:19:13,390 --> 00:19:16,840
freedom trajectory with a six degree of

00:19:15,310 --> 00:19:23,260
freedom robot all planned using

00:19:16,840 --> 00:19:25,320
Descartes alright

00:19:23,260 --> 00:19:25,320
you

00:19:26,159 --> 00:19:31,899
so I think the question was is is the

00:19:29,860 --> 00:19:34,990
goal to integrate this in to move it or

00:19:31,899 --> 00:19:36,610
why wasn't the movie Cartesian path

00:19:34,990 --> 00:19:39,389
planner adequate for what we were doing

00:19:36,610 --> 00:19:39,389
is it

00:19:47,930 --> 00:19:55,230
yeah so yeah I'm sorry my apologies so

00:19:53,160 --> 00:19:57,690
that the you're right you can't call

00:19:55,230 --> 00:20:00,120
this through move it so most of move it

00:19:57,690 --> 00:20:01,620
is pick in place so going from A to B so

00:20:00,120 --> 00:20:04,740
you give it a start point and an end

00:20:01,620 --> 00:20:07,530
point and nothing in between so but

00:20:04,740 --> 00:20:10,140
there is there was some kind of

00:20:07,530 --> 00:20:12,390
foresight into we're probably gonna

00:20:10,140 --> 00:20:15,060
wanted to find Cartesian paths but they

00:20:12,390 --> 00:20:16,620
didn't support hybrid kind of Cartesian

00:20:15,060 --> 00:20:18,120
paths at least not to my knowledge I

00:20:16,620 --> 00:20:21,780
could be wrong I'm sure somebody will

00:20:18,120 --> 00:20:23,790
tell me but we developed it as a library

00:20:21,780 --> 00:20:26,400
and then the ultimate goal is to push it

00:20:23,790 --> 00:20:28,110
in to move it you know we we don't want

00:20:26,400 --> 00:20:31,110
to be kind of separate from everything

00:20:28,110 --> 00:20:33,330
we want to integrate so the question is

00:20:31,110 --> 00:20:34,560
you know these kind of interactive

00:20:33,330 --> 00:20:36,180
robots where you can grab the end

00:20:34,560 --> 00:20:39,480
effector and kind of walk it through the

00:20:36,180 --> 00:20:40,890
path so I would say that once you've

00:20:39,480 --> 00:20:41,940
walked it through the path you've done

00:20:40,890 --> 00:20:44,520
all the hard work

00:20:41,940 --> 00:20:46,020
maybe but you could use they cart on the

00:20:44,520 --> 00:20:47,670
back end you might record that

00:20:46,020 --> 00:20:50,790
trajectory and then Descartes may

00:20:47,670 --> 00:20:52,740
optimize that trajectory for you it's

00:20:50,790 --> 00:20:55,230
not a use case that we've we've actually

00:20:52,740 --> 00:20:58,070
worked on but it'd be pretty easy to to

00:20:55,230 --> 00:20:58,070

YouTube URL: https://www.youtube.com/watch?v=EuBj552Z6rQ


