Title: ROS driven user applications in... ROSCon 2015 Hamburg Day 2 Matt Vollrath and Wojciech Ziniew
Publication date: 2015-12-08
Playlist: ROSCon 2015
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2015 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,140 --> 00:00:06,270
ok hello I'm wojtek this is matt i will

00:00:04,830 --> 00:00:10,200
be talking about something probably

00:00:06,270 --> 00:00:13,139
slightly different so how many of you

00:00:10,200 --> 00:00:18,570
are not working or developing stuff for

00:00:13,139 --> 00:00:23,970
robotics industry cool that's probably

00:00:18,570 --> 00:00:29,369
only asked you so yeah map right so

00:00:23,970 --> 00:00:31,710
we're upon the liquid galaxy project /

00:00:29,369 --> 00:00:33,750
galaxies a content delivery platform and

00:00:31,710 --> 00:00:35,640
i'll go and skip the next slides you can

00:00:33,750 --> 00:00:38,579
see what it looks like it's a

00:00:35,640 --> 00:00:40,140
distributed visualization thing it's

00:00:38,579 --> 00:00:42,510
meant for immersion and showing off

00:00:40,140 --> 00:00:45,090
panoramic content originally google

00:00:42,510 --> 00:00:51,300
earth and street view that kind of thing

00:00:45,090 --> 00:00:52,829
a lot of water here alright so just give

00:00:51,300 --> 00:00:55,610
you a background of what the project is

00:00:52,829 --> 00:00:58,590
it was started by a google engineer

00:00:55,610 --> 00:01:02,100
named jason holt it was a 20-percent

00:00:58,590 --> 00:01:04,409
project in 2010 they brought it to us we

00:01:02,100 --> 00:01:07,140
were for endpoint corporation to deploy

00:01:04,409 --> 00:01:09,780
and scale the project to all over the

00:01:07,140 --> 00:01:13,340
world and to support it and make sure it

00:01:09,780 --> 00:01:16,020
continues to grow and work properly and

00:01:13,340 --> 00:01:19,020
the reason we're here at ross dawn is in

00:01:16,020 --> 00:01:20,909
2015 we decided to move from just a

00:01:19,020 --> 00:01:24,810
bunch of ad hoc services and protocols

00:01:20,909 --> 00:01:27,900
for running Google Earth and working

00:01:24,810 --> 00:01:30,840
with input devices to Ross for a lot of

00:01:27,900 --> 00:01:32,790
very good reasons you can see here this

00:01:30,840 --> 00:01:36,630
is basically the first implementation of

00:01:32,790 --> 00:01:38,420
liquid galaxy is a while loop well to

00:01:36,630 --> 00:01:41,970
run Google Earth and then you're done

00:01:38,420 --> 00:01:48,240
very elegant we're trying to get back to

00:01:41,970 --> 00:01:51,299
that but yeah the standard looker galaxy

00:01:48,240 --> 00:01:54,450
is seven screens and portrait mode all

00:01:51,299 --> 00:01:56,130
around you so it's you know are today

00:01:54,450 --> 00:01:58,020
degrees

00:01:56,130 --> 00:02:00,550
it's used for a lot of different things

00:01:58,020 --> 00:02:03,340
people want to show geographic content

00:02:00,550 --> 00:02:06,220
in Google Earth great we want to give

00:02:03,340 --> 00:02:10,570
guided presentations that's totally

00:02:06,220 --> 00:02:13,360
supported also a big use case is museums

00:02:10,570 --> 00:02:14,740
and public kiosk which needs to be up

00:02:13,360 --> 00:02:17,610
and running all the time where a user

00:02:14,740 --> 00:02:20,860
can select content so there's a lot of

00:02:17,610 --> 00:02:22,900
emphasis on not only reliability would

00:02:20,860 --> 00:02:28,180
also be able to develop and deploy

00:02:22,900 --> 00:02:30,100
custom content another one of the

00:02:28,180 --> 00:02:33,250
reasons we chose Ross was it has drivers

00:02:30,100 --> 00:02:35,350
for all kinds of input devices we are

00:02:33,250 --> 00:02:38,560
we're already using a space navigator

00:02:35,350 --> 00:02:45,070
use touchscreens leap Motion's depth

00:02:38,560 --> 00:02:47,050
cameras right so we wanted to talk a

00:02:45,070 --> 00:02:51,600
little bit about hardware because we're

00:02:47,050 --> 00:02:54,520
deploying computers all over the world

00:02:51,600 --> 00:02:56,860
last time I checked we're monitoring 300

00:02:54,520 --> 00:03:00,280
individual bare metal computers all the

00:02:56,860 --> 00:03:02,230
different sites we're up to having full

00:03:00,280 --> 00:03:04,810
automatic provisioning of our systems

00:03:02,230 --> 00:03:07,170
and we're shifting around in these rack

00:03:04,810 --> 00:03:09,970
cases you see this for a case here has

00:03:07,170 --> 00:03:11,560
actually three computers in it an

00:03:09,970 --> 00:03:18,850
ethernet switch for the internal network

00:03:11,560 --> 00:03:20,920
switch pdu yeah it's got wheels now we

00:03:18,850 --> 00:03:22,660
need this for when we set at a

00:03:20,920 --> 00:03:24,430
conference like we were sending up like

00:03:22,660 --> 00:03:27,970
a Galaxy at Ross con we would just roll

00:03:24,430 --> 00:03:31,330
this in hook up some TVs to an HDMI

00:03:27,970 --> 00:03:36,850
patch panel and be up and going in an

00:03:31,330 --> 00:03:39,340
hour to who um so about the computers

00:03:36,850 --> 00:03:40,959
that we use you see up there in the the

00:03:39,340 --> 00:03:46,810
big orange cloud I'm not sure why it's

00:03:40,959 --> 00:03:49,460
orange Internet's right all of our

00:03:46,810 --> 00:03:51,170
configuration management and monitoring

00:03:49,460 --> 00:03:54,400
Systems these are all just instances

00:03:51,170 --> 00:03:57,020
co-located someplace I think Atlanta

00:03:54,400 --> 00:04:01,070
there's only one or two of these

00:03:57,020 --> 00:04:03,560
machines but each site each physical

00:04:01,070 --> 00:04:06,860
sight there's a head node which is a

00:04:03,560 --> 00:04:12,200
dedicated server for serving

00:04:06,860 --> 00:04:14,750
configuration and pretty much all the

00:04:12,200 --> 00:04:16,730
utility work of the system is done by

00:04:14,750 --> 00:04:19,280
the head node all the monitoring comes

00:04:16,730 --> 00:04:21,230
through there and because you know all

00:04:19,280 --> 00:04:23,480
these systems are deployed to random

00:04:21,230 --> 00:04:26,390
networks in the world well we do work

00:04:23,480 --> 00:04:28,850
with local sis admins and network people

00:04:26,390 --> 00:04:31,160
to get things up and going but we can't

00:04:28,850 --> 00:04:34,340
rely on getting an external IP address

00:04:31,160 --> 00:04:35,720
so we just from the get-go decide that

00:04:34,340 --> 00:04:37,940
all of our connections are from the

00:04:35,720 --> 00:04:39,710
system backup and if we want to connect

00:04:37,940 --> 00:04:43,520
back to the system it's through a

00:04:39,710 --> 00:04:45,290
reverse tunnel but then under the head

00:04:43,520 --> 00:04:46,760
node you can have any number of display

00:04:45,290 --> 00:04:50,950
nodes which are computers that are

00:04:46,760 --> 00:04:54,290
connected to screens and input devices

00:04:50,950 --> 00:04:56,330
typically we can do four screens /

00:04:54,290 --> 00:04:59,930
display node and have any number of

00:04:56,330 --> 00:05:02,290
display notes so you have your 24 screen

00:04:59,930 --> 00:05:06,980
video wall or your little free screen

00:05:02,290 --> 00:05:09,230
mini set up scales very well all display

00:05:06,980 --> 00:05:11,930
notes boot from a read-only system image

00:05:09,230 --> 00:05:15,470
so if something breaks you know just

00:05:11,930 --> 00:05:17,180
reboot it kill the power we do power

00:05:15,470 --> 00:05:18,800
loss testing so you can unplug the

00:05:17,180 --> 00:05:23,150
entire rack plug it back in it comes

00:05:18,800 --> 00:05:25,520
back and starts working like you said we

00:05:23,150 --> 00:05:27,620
do monitoring it's distributed natiahs

00:05:25,520 --> 00:05:29,900
where it passively submits results back

00:05:27,620 --> 00:05:33,830
up we feel like that will scale very

00:05:29,900 --> 00:05:36,410
well done thousands of sites whenever a

00:05:33,830 --> 00:05:39,250
problem is detected it can do automatic

00:05:36,410 --> 00:05:42,139
restarts of various layers of the stack

00:05:39,250 --> 00:05:44,749
like a very quick reboot

00:05:42,139 --> 00:05:46,340
is the raw stack takes maybe a second to

00:05:44,749 --> 00:05:49,340
restart and get things back on the

00:05:46,340 --> 00:05:51,889
screens but something still broken we

00:05:49,340 --> 00:05:54,139
can we start xorg or just power cycle

00:05:51,889 --> 00:05:56,509
machine until it's back up and running

00:05:54,139 --> 00:05:58,960
and you know give emails and pedro

00:05:56,509 --> 00:06:01,490
alerts throughout the whole process and

00:05:58,960 --> 00:06:04,879
of course we don't want to just let bug

00:06:01,490 --> 00:06:07,580
sit out there and keep repeating our

00:06:04,879 --> 00:06:10,729
machines so we can always ssh in and do

00:06:07,580 --> 00:06:14,599
live diagnosis and fix the underlying

00:06:10,729 --> 00:06:19,490
problem we end up doing a lot less of

00:06:14,599 --> 00:06:21,830
this as the project matures one of the

00:06:19,490 --> 00:06:24,319
tools have got for remote maintenance is

00:06:21,830 --> 00:06:26,060
LD slingshot it takes a screen grab of

00:06:24,319 --> 00:06:28,699
all the screens put some on a nice

00:06:26,060 --> 00:06:31,279
montage and uploads into our monitoring

00:06:28,699 --> 00:06:33,589
dashboard the white rectangle on the

00:06:31,279 --> 00:06:36,069
bottom is the touch screen yes this is a

00:06:33,589 --> 00:06:38,659
street view experience where you can

00:06:36,069 --> 00:06:40,819
touch any of those blue maps on blue

00:06:38,659 --> 00:06:42,860
streets on the map to instantly go to

00:06:40,819 --> 00:06:46,009
that location and panted you around the

00:06:42,860 --> 00:06:47,900
space navigator but if your SS a Qing

00:06:46,009 --> 00:06:50,599
into the system and want to see what's

00:06:47,900 --> 00:06:53,629
going on really quickly we've got LG s

00:06:50,599 --> 00:06:55,939
key with the of you representation

00:06:53,629 --> 00:06:57,979
the same scene can you see the can you

00:06:55,939 --> 00:07:04,339
see the similarity here is berra like

00:06:57,979 --> 00:07:07,909
the same you know she is this this right

00:07:04,339 --> 00:07:10,430
so let's emphasis on reliability we

00:07:07,909 --> 00:07:12,469
tested the entire stack pretty much the

00:07:10,430 --> 00:07:14,750
entire stack of course we're all for

00:07:12,469 --> 00:07:18,589
ross middleware we've got that contest

00:07:14,750 --> 00:07:20,719
online offline for deployment

00:07:18,589 --> 00:07:22,490
configuration then we've got many tests

00:07:20,719 --> 00:07:24,889
to verify the system actually matches

00:07:22,490 --> 00:07:27,889
what we configured it to be for the

00:07:24,889 --> 00:07:30,110
read-only system image we've got this

00:07:27,889 --> 00:07:32,300
sort of sophisticated I guess nested

00:07:30,110 --> 00:07:35,319
virtual boxes where the head node is on

00:07:32,300 --> 00:07:38,870
a virtual machine then it boots up

00:07:35,319 --> 00:07:41,749
display node and boots it from dhcp so

00:07:38,870 --> 00:07:43,789
does the whole tftp now we are

00:07:41,749 --> 00:07:45,740
simulating seven computers to enjoy all

00:07:43,789 --> 00:07:48,219
environment basically yeah yeah yeah

00:07:45,740 --> 00:07:51,740
we're doing like pixie bidding on some

00:07:48,219 --> 00:07:54,069
some instance somewhere and there was an

00:07:51,740 --> 00:07:57,039
interesting selenium tests we did where

00:07:54,069 --> 00:07:58,939
eyebrows we're two browsers are launched

00:07:57,039 --> 00:08:01,490
simultaneously with selenium webdriver

00:07:58,939 --> 00:08:04,400
is connected to ross bridge and

00:08:01,490 --> 00:08:07,099
interaction on what browser causes it

00:08:04,400 --> 00:08:09,710
makes assertions or we make assertions

00:08:07,099 --> 00:08:16,789
on the other browser to test this your

00:08:09,710 --> 00:08:20,139
end-to-end application level thing yeah

00:08:16,789 --> 00:08:23,210
so few words about Ross internals at all

00:08:20,139 --> 00:08:26,150
product is open source I mean hull the

00:08:23,210 --> 00:08:29,449
the main part which is Ross part which

00:08:26,150 --> 00:08:31,669
takes responsibility for and which is

00:08:29,449 --> 00:08:36,169
responsible for for all the order logic

00:08:31,669 --> 00:08:39,079
and what you see on the and for for the

00:08:36,169 --> 00:08:42,890
whole experience there's one specific

00:08:39,079 --> 00:08:45,140
Ross node called up CTL it's it's not a

00:08:42,890 --> 00:08:46,670
part of the main repo we're all the

00:08:45,140 --> 00:08:50,810
euros notes are located because it's

00:08:46,670 --> 00:08:55,690
kind of generic and low let's say not

00:08:50,810 --> 00:08:55,690
specific to eldorado notes repo

00:08:56,210 --> 00:09:00,780
so yeah as matt said ross handles one

00:08:59,490 --> 00:09:04,650
hundred percent of the Google exalogic

00:09:00,780 --> 00:09:07,290
and state everything what you get there

00:09:04,650 --> 00:09:09,810
in this product is written in Ross the

00:09:07,290 --> 00:09:12,200
the thing on in the background like the

00:09:09,810 --> 00:09:14,940
whole support structure how

00:09:12,200 --> 00:09:16,710
infrastructure everything that's

00:09:14,940 --> 00:09:18,450
connected with the configuration is

00:09:16,710 --> 00:09:21,150
generated by chef and managed by chef

00:09:18,450 --> 00:09:25,430
which is a super cool tool for

00:09:21,150 --> 00:09:30,540
automation configuration management yeah

00:09:25,430 --> 00:09:36,890
yeah as I said a few TL is a generic

00:09:30,540 --> 00:09:40,310
low-level Ross note that will let you

00:09:36,890 --> 00:09:44,010
conveniently lounge applications on

00:09:40,310 --> 00:09:46,290
different in distributed environment

00:09:44,010 --> 00:09:48,330
basically we didn't find solution like

00:09:46,290 --> 00:09:53,400
that that would suit our needs so we

00:09:48,330 --> 00:09:55,620
rolled our own it could be seen it could

00:09:53,400 --> 00:09:59,640
be some kind of like not invented here

00:09:55,620 --> 00:10:01,560
syndrome and we fought a lot with it to

00:09:59,640 --> 00:10:04,890
make it to me to make it really reliable

00:10:01,560 --> 00:10:11,160
but it's a really small and elegant

00:10:04,890 --> 00:10:15,420
solution yeah so all the results there

00:10:11,160 --> 00:10:17,820
are plenty of them some of them are the

00:10:15,420 --> 00:10:19,590
day day day they they're run only ones

00:10:17,820 --> 00:10:21,360
there there's only one of them in there

00:10:19,590 --> 00:10:24,330
in that they also contain of course

00:10:21,360 --> 00:10:27,780
meant many scripts not only one so a

00:10:24,330 --> 00:10:30,870
whole stack if you get them together is

00:10:27,780 --> 00:10:33,420
probably about more than 100 for /

00:10:30,870 --> 00:10:37,120
installation I guess

00:10:33,420 --> 00:10:39,040
something like that so there are no

00:10:37,120 --> 00:10:42,610
specific things we should talk about

00:10:39,040 --> 00:10:44,860
here except for the fact that we wrote

00:10:42,610 --> 00:10:47,650
our software in a such way that it's

00:10:44,860 --> 00:10:50,020
very usable we just try to apply

00:10:47,650 --> 00:10:55,810
patterns that we use in other parts of

00:10:50,020 --> 00:10:57,850
our company here so we have per side one

00:10:55,810 --> 00:11:00,100
of the patterns that's not really Ross

00:10:57,850 --> 00:11:02,380
specific is sending complex data is

00:11:00,100 --> 00:11:03,910
Jason Sanders basically a JSON data that

00:11:02,380 --> 00:11:10,480
publisher wants to publish on a topic

00:11:03,910 --> 00:11:12,670
and if it's very very very dependent on

00:11:10,480 --> 00:11:14,560
what you want to send if you don't

00:11:12,670 --> 00:11:17,590
really know what's the structure you can

00:11:14,560 --> 00:11:19,300
basically stringify Jason and the string

00:11:17,590 --> 00:11:20,590
if I it on the subscriber side and it's

00:11:19,300 --> 00:11:22,210
absolutely legit that it was been

00:11:20,590 --> 00:11:27,520
working for us for a very long time and

00:11:22,210 --> 00:11:29,260
the reason we named the name the message

00:11:27,520 --> 00:11:31,500
type interactive spaces messages is

00:11:29,260 --> 00:11:34,170
because there's another nice

00:11:31,500 --> 00:11:38,140
implementation of what we already did

00:11:34,170 --> 00:11:41,410
made in Java it's a google open source

00:11:38,140 --> 00:11:45,130
product called interactive spaces it's a

00:11:41,410 --> 00:11:48,160
nice cool framework if you like Java mmm

00:11:45,130 --> 00:11:51,670
lessons learned so as I said we try we

00:11:48,160 --> 00:11:55,180
are trying to apply good programming

00:11:51,670 --> 00:12:00,000
techniques from outside non Ross world

00:11:55,180 --> 00:12:03,750
so first of all we very much like

00:12:00,000 --> 00:12:06,460
dependency injection patterns so Oh

00:12:03,750 --> 00:12:12,610
everything that you write should be

00:12:06,460 --> 00:12:14,770
basically written in the eye so you can

00:12:12,610 --> 00:12:16,450
decouple all the things and the logic

00:12:14,770 --> 00:12:18,850
that we have and many rows notes are

00:12:16,450 --> 00:12:21,220
talking to micro services that are

00:12:18,850 --> 00:12:23,290
talking to staff outside and points

00:12:21,220 --> 00:12:25,480
outside of ross network for example

00:12:23,290 --> 00:12:30,040
api's we are basically doing a lot of

00:12:25,480 --> 00:12:33,670
non ross duty heavy heavy lifting in our

00:12:30,040 --> 00:12:36,040
in our in our in our product so if you

00:12:33,670 --> 00:12:39,550
pass everything for example handle to an

00:12:36,040 --> 00:12:43,560
API or an API proxy object or

00:12:39,550 --> 00:12:47,470
whatever other non Ross object to your

00:12:43,560 --> 00:12:49,990
mmm to your class with your logic you

00:12:47,470 --> 00:12:53,080
can very easily test it and you can very

00:12:49,990 --> 00:12:55,240
easily Mock the things that are not

00:12:53,080 --> 00:12:57,430
available during the tests when you're

00:12:55,240 --> 00:13:00,610
running the tests advantages of course

00:12:57,430 --> 00:13:02,459
our writing unit tests is simpler your

00:13:00,610 --> 00:13:05,649
logic is easy to observe using marks

00:13:02,459 --> 00:13:07,959
mocks are actually very very convenient

00:13:05,649 --> 00:13:09,430
if you don't have for example an API you

00:13:07,959 --> 00:13:11,980
are talking to from your application

00:13:09,430 --> 00:13:13,600
available at the time of the monitors

00:13:11,980 --> 00:13:17,160
are on code is cleaner and less

00:13:13,600 --> 00:13:21,940
monolithic and very easy to refactor

00:13:17,160 --> 00:13:25,300
lessons learned so use the gun packages

00:13:21,940 --> 00:13:27,040
of course this is like this is this is

00:13:25,300 --> 00:13:30,250
kind of obvious keep previous versions

00:13:27,040 --> 00:13:34,620
of debs for robic this is also nice

00:13:30,250 --> 00:13:38,019
pattern from let's say echo ecommerce

00:13:34,620 --> 00:13:40,329
ecommerce point of view where you just

00:13:38,019 --> 00:13:42,310
need you didn't quickly get to redeploy

00:13:40,329 --> 00:13:44,680
something or rollback something if it's

00:13:42,310 --> 00:13:47,230
broken everything should be decoupled di

00:13:44,680 --> 00:13:51,450
empowers decoupling so we are doing that

00:13:47,230 --> 00:13:55,240
ultimate everything in this kind of area

00:13:51,450 --> 00:13:56,770
entropy can kill you so the less entropy

00:13:55,240 --> 00:13:59,320
the better so everything should be as

00:13:56,770 --> 00:14:03,250
automated as possible and data-driven of

00:13:59,320 --> 00:14:06,310
course to add some more buzzwords and TD

00:14:03,250 --> 00:14:09,130
is your friend parameterize everything

00:14:06,310 --> 00:14:14,130
so data driving is also a very good

00:14:09,130 --> 00:14:18,310
pattern so here's a thing about up CTL

00:14:14,130 --> 00:14:20,829
if you ever run application from the raw

00:14:18,310 --> 00:14:23,440
stock it's very very important that you

00:14:20,829 --> 00:14:26,140
closed file descriptors before you

00:14:23,440 --> 00:14:29,649
actually launch it because you'll spend

00:14:26,140 --> 00:14:32,260
two weeks doing this and we spent

00:14:29,649 --> 00:14:35,620
actually this amount of time in up CTL

00:14:32,260 --> 00:14:37,660
which is responsible for simply running

00:14:35,620 --> 00:14:41,290
applications on a distributed

00:14:37,660 --> 00:14:43,839
environment here's another listing about

00:14:41,290 --> 00:14:46,029
it people were fighting with close fds

00:14:43,839 --> 00:14:48,490
for a very long time it's still not

00:14:46,029 --> 00:14:50,100
clear whether it's back or a future or a

00:14:48,490 --> 00:14:53,190
feature that

00:14:50,100 --> 00:14:55,829
70s argument is false by default it's

00:14:53,190 --> 00:14:57,750
probably because there's there's a

00:14:55,829 --> 00:14:59,970
discrepancy between the different

00:14:57,750 --> 00:15:02,310
platforms and only Linux supports this

00:14:59,970 --> 00:15:04,459
flag it could be sub returned on only

00:15:02,310 --> 00:15:06,690
only notes by default but we also have

00:15:04,459 --> 00:15:09,300
platforms like Windows and OS X that

00:15:06,690 --> 00:15:11,600
doesn't necessarily support that thank

00:15:09,300 --> 00:15:11,600
you very much

00:15:13,389 --> 00:15:19,130
no no no so he asked whether a closed

00:15:17,089 --> 00:15:23,540
file descriptors is true or false by

00:15:19,130 --> 00:15:24,829
default so it's yeah it's true if I

00:15:23,540 --> 00:15:32,709
don't free that's that that's true let's

00:15:24,829 --> 00:15:36,190
do this room good question that go yeah

00:15:32,709 --> 00:15:36,190
any other questions

00:15:48,320 --> 00:15:54,089
yeah sometimes we just use pretty nested

00:15:51,600 --> 00:15:56,220
data structures from other things and we

00:15:54,089 --> 00:15:58,230
don't take the time to make actual

00:15:56,220 --> 00:16:01,110
message types I would not recommend this

00:15:58,230 --> 00:16:03,089
to anybody that that wants to just send

00:16:01,110 --> 00:16:05,250
json back and forth for all of their

00:16:03,089 --> 00:16:08,100
message types it's slower it's not a

00:16:05,250 --> 00:16:10,020
good idea there's there's just a part of

00:16:08,100 --> 00:16:13,500
business flow in our application that

00:16:10,020 --> 00:16:15,779
doesn't send events they are events

00:16:13,500 --> 00:16:16,709
actually but they were not we not call

00:16:15,779 --> 00:16:18,540
them events they are basically

00:16:16,709 --> 00:16:21,270
describing a content that should be

00:16:18,540 --> 00:16:23,910
deployed display it on the on our on our

00:16:21,270 --> 00:16:25,709
product so that JSON is just better we

00:16:23,910 --> 00:16:29,300
want it to be extensible in a way that

00:16:25,709 --> 00:16:29,300

YouTube URL: https://www.youtube.com/watch?v=rd3_D28ehb8


