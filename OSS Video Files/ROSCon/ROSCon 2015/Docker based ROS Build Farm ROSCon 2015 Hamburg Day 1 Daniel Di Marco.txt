Title: Docker based ROS Build Farm ROSCon 2015 Hamburg Day 1 Daniel Di Marco
Publication date: 2015-12-08
Playlist: ROSCon 2015
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2015 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:01,220 --> 00:00:06,629
so my name is Daniel DeMarco I'm working

00:00:04,259 --> 00:00:09,480
with deep field robotics which is the

00:00:06,629 --> 00:00:13,049
daughter company of Bosch which most of

00:00:09,480 --> 00:00:16,049
you hopefully know so like like I said

00:00:13,049 --> 00:00:19,199
already we sponsored the development of

00:00:16,049 --> 00:00:22,010
taco based built farm for reproducible

00:00:19,199 --> 00:00:26,880
builds and especially so we could

00:00:22,010 --> 00:00:29,519
publish our own ross packages as

00:00:26,880 --> 00:00:35,040
binaries without having to publish them

00:00:29,519 --> 00:00:37,399
as open source yeah so what does a build

00:00:35,040 --> 00:00:40,350
firm do I think most of you will notice

00:00:37,399 --> 00:00:45,149
there is that we automatic Debian

00:00:40,350 --> 00:00:48,120
packages from source repositories we

00:00:45,149 --> 00:00:51,719
need to consider the right dependencies

00:00:48,120 --> 00:00:54,059
and build these files in order it should

00:00:51,719 --> 00:00:56,399
also do continuous integration which is

00:00:54,059 --> 00:00:59,930
kind of a big word but what we mean here

00:00:56,399 --> 00:01:04,229
is basically compile the source code

00:00:59,930 --> 00:01:06,600
often enough and then it is available

00:01:04,229 --> 00:01:08,760
and also what the current build form

00:01:06,600 --> 00:01:11,670
also does is auto documentation that is

00:01:08,760 --> 00:01:14,729
extract source documentation put them in

00:01:11,670 --> 00:01:18,390
an easily accessible HTML form for you

00:01:14,729 --> 00:01:22,200
for you to be put on your web server so

00:01:18,390 --> 00:01:25,170
this is all stuff we already have so why

00:01:22,200 --> 00:01:27,360
would we want to move a very from the

00:01:25,170 --> 00:01:33,150
current build foam which is deployed by

00:01:27,360 --> 00:01:37,710
OS RF and which builds very briefly all

00:01:33,150 --> 00:01:40,049
these packages we all use so like I said

00:01:37,710 --> 00:01:44,460
we from a company that wants to earn

00:01:40,049 --> 00:01:46,170
money and for that we could use open

00:01:44,460 --> 00:01:50,399
source or we would like to open source

00:01:46,170 --> 00:01:52,350
tools but our own packages are a bit

00:01:50,399 --> 00:01:55,020
more conservative in that regard so we

00:01:52,350 --> 00:01:57,450
want to keep them at our control so what

00:01:55,020 --> 00:02:03,240
we do is we keep our source code on our

00:01:57,450 --> 00:02:05,250
own service we could not want to we

00:02:03,240 --> 00:02:07,979
could not use the public guitar because

00:02:05,250 --> 00:02:10,530
we are also some components drivers

00:02:07,979 --> 00:02:11,080
which we get from suppliers which we are

00:02:10,530 --> 00:02:15,300
not allowed

00:02:11,080 --> 00:02:18,180
make public so this is the use case and

00:02:15,300 --> 00:02:23,340
also what we want to do is we want to

00:02:18,180 --> 00:02:26,820
share our packages only to our customers

00:02:23,340 --> 00:02:29,890
which is also connected to this license

00:02:26,820 --> 00:02:32,140
problematic and also another option

00:02:29,890 --> 00:02:35,310
which we're currently not using but

00:02:32,140 --> 00:02:38,950
which would be an option is that we keep

00:02:35,310 --> 00:02:40,690
packages at a certain version for

00:02:38,950 --> 00:02:42,160
instance if we have a certain version of

00:02:40,690 --> 00:02:45,040
new space that would work especially

00:02:42,160 --> 00:02:47,830
well we want to keep using that on a

00:02:45,040 --> 00:02:51,390
robot we could do that if we had our own

00:02:47,830 --> 00:02:56,250
built built farm and our own repository

00:02:51,390 --> 00:03:01,810
so it's a a use case for mostly for

00:02:56,250 --> 00:03:04,720
corporations and now I'm gonna talk a

00:03:01,810 --> 00:03:08,200
bit about why the new taco based built

00:03:04,720 --> 00:03:11,580
form developed mostly by tally and Dirk

00:03:08,200 --> 00:03:14,350
of Oz RF is better than the current one

00:03:11,580 --> 00:03:17,019
so for one as we've heard in the

00:03:14,350 --> 00:03:20,590
previous talk doc allows us to have

00:03:17,019 --> 00:03:23,500
perfectly reproducible builds every job

00:03:20,590 --> 00:03:26,560
is run in a in its own container image

00:03:23,500 --> 00:03:29,160
which is clean and just feels like just

00:03:26,560 --> 00:03:34,180
the present fresh installation of Ubuntu

00:03:29,160 --> 00:03:36,220
of an Ubuntu distribution and what you

00:03:34,180 --> 00:03:39,060
can also do which is not possible with

00:03:36,220 --> 00:03:41,890
the current build form is you can run

00:03:39,060 --> 00:03:46,450
pre-release jobs that is you can run the

00:03:41,890 --> 00:03:48,070
same same process that on your local

00:03:46,450 --> 00:03:51,550
development machine that you would also

00:03:48,070 --> 00:03:55,120
run on your build form so you can test

00:03:51,550 --> 00:03:57,670
test now if you probe something or in

00:03:55,120 --> 00:03:59,500
case you want to test some dependencies

00:03:57,670 --> 00:04:03,519
or stuff this is also possible with the

00:03:59,500 --> 00:04:05,530
new perform another point I also

00:04:03,519 --> 00:04:09,870
mentioned before is that we that it

00:04:05,530 --> 00:04:12,910
allows us to host source code on your

00:04:09,870 --> 00:04:15,100
non-public service the current build

00:04:12,910 --> 00:04:17,229
form assumes that it can check out the

00:04:15,100 --> 00:04:18,450
get from git repositories that are

00:04:17,229 --> 00:04:21,930
topically

00:04:18,450 --> 00:04:24,330
without authentication and this is

00:04:21,930 --> 00:04:27,930
problematic for cooperation environment

00:04:24,330 --> 00:04:30,350
for instance another pretty big pain

00:04:27,930 --> 00:04:33,270
point of the old firm was that it was

00:04:30,350 --> 00:04:36,570
pretty much only one instance there was

00:04:33,270 --> 00:04:39,210
that is running so you could not sew it

00:04:36,570 --> 00:04:42,990
or it would be very hard to set it up on

00:04:39,210 --> 00:04:45,930
your own servers what the guys from OS

00:04:42,990 --> 00:04:48,090
RF did is they scripted much of the

00:04:45,930 --> 00:04:51,380
deployment process deployment update

00:04:48,090 --> 00:04:53,700
process so it's pretty easy to run it on

00:04:51,380 --> 00:04:58,710
arbitrary times on arbitrary many

00:04:53,700 --> 00:05:00,570
servers similarly they also simplified

00:04:58,710 --> 00:05:05,040
the deployment of you know of custom

00:05:00,570 --> 00:05:08,910
setups where you have a specific set up

00:05:05,040 --> 00:05:13,980
of different servers or arbitrary many

00:05:08,910 --> 00:05:16,830
servers also that now allow enables you

00:05:13,980 --> 00:05:19,110
to black whitelist certain packages so

00:05:16,830 --> 00:05:22,230
if you don't want to build them anymore

00:05:19,110 --> 00:05:24,180
you can just set a flag and it also

00:05:22,230 --> 00:05:28,710
allows you to build non catkin packages

00:05:24,180 --> 00:05:32,730
as Debian packages so how does it look

00:05:28,710 --> 00:05:36,390
basically you have you need at least

00:05:32,730 --> 00:05:39,090
three servers at Jenkins master Jenkins

00:05:36,390 --> 00:05:43,770
is built server software that manages

00:05:39,090 --> 00:05:47,400
the jobs which build filter the packages

00:05:43,770 --> 00:05:50,040
instance the master coordinates the

00:05:47,400 --> 00:05:52,170
slaves of which you can have arbitrarily

00:05:50,040 --> 00:05:55,920
many basically and it slips to the

00:05:52,170 --> 00:05:58,890
actual work so those are the machines

00:05:55,920 --> 00:06:00,780
that actually compile your packages and

00:05:58,890 --> 00:06:02,400
all this runs in a TACA environment so

00:06:00,780 --> 00:06:04,380
it's job is fun in the docking

00:06:02,400 --> 00:06:08,310
environment even the reconfiguration

00:06:04,380 --> 00:06:11,280
shop so it's very very well encapsulated

00:06:08,310 --> 00:06:13,950
and lastly of course you also need to

00:06:11,280 --> 00:06:16,950
have a Pastore server which hosts not

00:06:13,950 --> 00:06:21,180
only your Debian packages but also HTML

00:06:16,950 --> 00:06:23,310
pages of your documentation and this is

00:06:21,180 --> 00:06:26,130
the Debian packages at least are managed

00:06:23,310 --> 00:06:28,560
by a very pro tool which is a 2 for

00:06:26,130 --> 00:06:33,330
Debian maintenance

00:06:28,560 --> 00:06:36,570
and it runs on an apache server and this

00:06:33,330 --> 00:06:38,730
deploy this setup as you see here is

00:06:36,570 --> 00:06:41,389
deployed by built from deployment

00:06:38,730 --> 00:06:44,610
scripts so this is a repository

00:06:41,389 --> 00:06:50,550
containing a set of Python tools that

00:06:44,610 --> 00:06:54,290
automatically set up the Jenkins masters

00:06:50,550 --> 00:06:58,200
slave Apache server and a repository

00:06:54,290 --> 00:06:59,730
using puppet so that's all automated and

00:06:58,200 --> 00:07:01,590
you don't you basically only have to

00:06:59,730 --> 00:07:04,290
change the configuration for your own

00:07:01,590 --> 00:07:09,410
specific setup and this is how it looks

00:07:04,290 --> 00:07:09,410
basically so we have the top left

00:07:09,889 --> 00:07:20,090
ra's platform scripts and they run they

00:07:15,810 --> 00:07:22,550
run initially one script which calls for

00:07:20,090 --> 00:07:27,000
instance the generated convict jobs

00:07:22,550 --> 00:07:30,210
script and this instructs Jenkins using

00:07:27,000 --> 00:07:33,210
the Jenkins might not be API to create

00:07:30,210 --> 00:07:37,740
the release jobs the documentation jobs

00:07:33,210 --> 00:07:41,150
and the devil jobs what is - I will

00:07:37,740 --> 00:07:45,780
explain in our following slide basically

00:07:41,150 --> 00:07:47,220
these jobs then run the actual packaging

00:07:45,780 --> 00:07:51,600
process the building and packaging

00:07:47,220 --> 00:07:54,720
process and artifacts that are generated

00:07:51,600 --> 00:07:57,860
from there or pushed to the Devine

00:07:54,720 --> 00:08:00,450
server respectively to the web server

00:07:57,860 --> 00:08:06,870
and these scripts are in the Ross built

00:08:00,450 --> 00:08:10,260
form repository so I talked a lot about

00:08:06,870 --> 00:08:12,419
jobs these are the most important jobs

00:08:10,260 --> 00:08:14,400
you will need for your good farm

00:08:12,419 --> 00:08:19,260
there's the Ross distro cash which

00:08:14,400 --> 00:08:22,229
basically just creates a cache of the

00:08:19,260 --> 00:08:25,100
Rastas Rommel piles so it doesn't have

00:08:22,229 --> 00:08:30,240
to be read and parse each time you run

00:08:25,100 --> 00:08:33,419
an update job import upstream is kind of

00:08:30,240 --> 00:08:35,459
interesting because it pulls the Debian

00:08:33,419 --> 00:08:36,589
packages from the OS arrived form or

00:08:35,459 --> 00:08:40,260
another

00:08:36,589 --> 00:08:44,160
upstream repository into your own pack

00:08:40,260 --> 00:08:46,860
repository so what enables this enables

00:08:44,160 --> 00:08:49,800
you to build upon the always arrive good

00:08:46,860 --> 00:08:53,160
form and produce your own Debian

00:08:49,800 --> 00:08:56,010
packages on top of the always arrive

00:08:53,160 --> 00:08:59,220
packages then we have certain

00:08:56,010 --> 00:09:00,630
maintenance jobs check slaves and really

00:08:59,220 --> 00:09:03,960
status page which are pretty much

00:09:00,630 --> 00:09:06,090
self-explanatory and very interesting

00:09:03,960 --> 00:09:09,120
and also the reconfigured jobs which

00:09:06,090 --> 00:09:12,990
then basically reconfigure Jenkins

00:09:09,120 --> 00:09:15,630
itself so the jobs when these jobs are

00:09:12,990 --> 00:09:18,740
triggered a we configure other jobs and

00:09:15,630 --> 00:09:21,480
finally we have to sync packages which

00:09:18,740 --> 00:09:24,540
moves the repositories that are built

00:09:21,480 --> 00:09:27,690
from repository to the other so the way

00:09:24,540 --> 00:09:30,650
it works is everything is Debian

00:09:27,690 --> 00:09:34,110
packages out by default built and put in

00:09:30,650 --> 00:09:36,150
tests in the building repository from

00:09:34,110 --> 00:09:38,070
there they are automatically synced to

00:09:36,150 --> 00:09:40,770
the testing repository and a the

00:09:38,070 --> 00:09:42,780
maintainer has to trigger the sync

00:09:40,770 --> 00:09:44,990
packages job to move them into the main

00:09:42,780 --> 00:09:49,800
repository from which it can be used by

00:09:44,990 --> 00:09:52,860
many users and then we have the actual

00:09:49,800 --> 00:09:55,470
building jobs which are as we go through

00:09:52,860 --> 00:09:57,840
very quickly the jobs are basically is a

00:09:55,470 --> 00:10:01,800
job that runs that builds the whole

00:09:57,840 --> 00:10:05,610
repository of yours and also runs the

00:10:01,800 --> 00:10:07,980
test script release creates the given

00:10:05,610 --> 00:10:10,260
papers for certain release source and

00:10:07,980 --> 00:10:11,580
talk just as well so they build sauce

00:10:10,260 --> 00:10:16,500
packages on the documentation for a

00:10:11,580 --> 00:10:21,500
certain release so this I pulled out

00:10:16,500 --> 00:10:21,500
only to show you the basic interaction

00:10:22,100 --> 00:10:31,230
nodes in green basically are run from

00:10:29,160 --> 00:10:35,960
either yourself so in the initial

00:10:31,230 --> 00:10:39,480
configuration or from dr. Jenkins job

00:10:35,960 --> 00:10:40,800
the blue wants our actual Jenkins job so

00:10:39,480 --> 00:10:45,830
you can see they interact with each

00:10:40,800 --> 00:10:48,090
other and they also create docker images

00:10:45,830 --> 00:10:49,540
or at least the taco files which can

00:10:48,090 --> 00:10:55,860
then generate

00:10:49,540 --> 00:10:58,660
okay images and if yet all the actually

00:10:55,860 --> 00:11:00,670
notes basically run in a docker script

00:10:58,660 --> 00:11:03,760
in a darker environment so you can see

00:11:00,670 --> 00:11:08,980
there's a lot of docker cults involved

00:11:03,760 --> 00:11:13,450
even the reconfiguration and yeah of

00:11:08,980 --> 00:11:17,260
course building and testing as well okay

00:11:13,450 --> 00:11:19,150
so because I'm doing this often form a

00:11:17,260 --> 00:11:21,760
kind of a user perspective I would like

00:11:19,150 --> 00:11:25,630
to show you quickly how you set up your

00:11:21,760 --> 00:11:27,400
would set up your own server so it is

00:11:25,630 --> 00:11:31,000
basically two steps one is the

00:11:27,400 --> 00:11:32,860
deployment step which is Ross agnostic

00:11:31,000 --> 00:11:35,130
which basically just set setups the

00:11:32,860 --> 00:11:39,640
configuration of Jenkins and your

00:11:35,130 --> 00:11:42,220
repository like I said we have scripts

00:11:39,640 --> 00:11:45,640
for that or provided its routes opponent

00:11:42,220 --> 00:11:47,590
but you need to configure your set up in

00:11:45,640 --> 00:11:50,050
a certain git repository or was built

00:11:47,590 --> 00:11:52,000
from deployment config where you

00:11:50,050 --> 00:11:54,720
basically just put in your SSH keys and

00:11:52,000 --> 00:11:58,810
IP address and stuff then you check out

00:11:54,720 --> 00:12:01,510
the deployment scripts and run it on

00:11:58,810 --> 00:12:04,930
your servers and you're done similar

00:12:01,510 --> 00:12:07,540
works for Jenkins job configuration you

00:12:04,930 --> 00:12:09,910
also need to change some general files

00:12:07,540 --> 00:12:11,860
in the Ross built home config for

00:12:09,910 --> 00:12:15,640
instance to create your own distribution

00:12:11,860 --> 00:12:17,770
and also if you want to build on top of

00:12:15,640 --> 00:12:19,990
the order of packages you need to fork

00:12:17,770 --> 00:12:24,250
an adapter was distro to insert your

00:12:19,990 --> 00:12:25,900
distribution there so now I'm gonna

00:12:24,250 --> 00:12:27,760
where you quickly talk about your use

00:12:25,900 --> 00:12:29,500
case and about us so we are different

00:12:27,760 --> 00:12:32,230
robotics which is a corporate start-up

00:12:29,500 --> 00:12:37,180
within Robert Bosch we are about 20

00:12:32,230 --> 00:12:39,910
people we can our goal is to put

00:12:37,180 --> 00:12:43,030
robotics technologies into the

00:12:39,910 --> 00:12:46,500
agricultural field I've just put in a

00:12:43,030 --> 00:12:49,210
few examples here one since we have a

00:12:46,500 --> 00:12:50,320
simple or very simple applications that

00:12:49,210 --> 00:12:52,510
asparagus Enzo

00:12:50,320 --> 00:12:55,900
because asparagus farmers need to know

00:12:52,510 --> 00:12:57,860
how the temperatures in the in the dams

00:12:55,900 --> 00:13:01,329
we also

00:12:57,860 --> 00:13:04,940
fermented with mechanical reading so

00:13:01,329 --> 00:13:07,610
this is our bridge to destroy wheat we

00:13:04,940 --> 00:13:12,740
just push it into the earth we're trying

00:13:07,610 --> 00:13:15,440
to build a automatic robot for that very

00:13:12,740 --> 00:13:18,310
interesting so but this is not where we

00:13:15,440 --> 00:13:21,519
need to build from we have built a

00:13:18,310 --> 00:13:24,050
research platform and prototype pony up

00:13:21,519 --> 00:13:27,079
built fully on Ross and we wanted to

00:13:24,050 --> 00:13:28,490
deliver our packages to our customers so

00:13:27,079 --> 00:13:32,750
because we saw them and we're doing

00:13:28,490 --> 00:13:33,920
things very yeah we are real quickly we

00:13:32,750 --> 00:13:36,050
need to do things very quickly

00:13:33,920 --> 00:13:38,089
until recently we delivered our software

00:13:36,050 --> 00:13:40,760
by using CAD cremating install and then

00:13:38,089 --> 00:13:42,950
just compressed the install directory

00:13:40,760 --> 00:13:45,769
and shipped it to our customers on a USB

00:13:42,950 --> 00:13:47,959
stick also I've talked with the guy from

00:13:45,769 --> 00:13:50,180
Homewood too and he mentioned when I

00:13:47,959 --> 00:13:56,149
mentioned this he said yeah that doesn't

00:13:50,180 --> 00:13:59,899
sound very German soon I think that's a

00:13:56,149 --> 00:14:02,029
very soft way to describe it and we

00:13:59,899 --> 00:14:03,769
wanted to just professionalize it you

00:14:02,029 --> 00:14:08,089
know we just want to our customers just

00:14:03,769 --> 00:14:11,810
run ross apt-get install or just upgrade

00:14:08,089 --> 00:14:13,790
to get our latest packages so i said it

00:14:11,810 --> 00:14:15,290
looks like this we have three VMs are

00:14:13,790 --> 00:14:20,600
built on rooms and three virtual

00:14:15,290 --> 00:14:23,380
machines and push we push our generated

00:14:20,600 --> 00:14:27,339
packages onto an external web server and

00:14:23,380 --> 00:14:30,829
this is accessible by customers via HTTP

00:14:27,339 --> 00:14:33,320
and yeah some of the challenges were

00:14:30,829 --> 00:14:36,380
that we had to use customers packages

00:14:33,320 --> 00:14:39,620
for a proprietary proprietary drivers i

00:14:36,380 --> 00:14:42,050
mentioned earlier and that we also put

00:14:39,620 --> 00:14:45,260
our coated not on public github but on

00:14:42,050 --> 00:14:48,829
github enterprise and we plan to maybe

00:14:45,260 --> 00:14:51,670
do that also a math lesson tools so for

00:14:48,829 --> 00:14:54,230
the first challenge custom dependencies

00:14:51,670 --> 00:14:57,019
it's very was actually very simple to

00:14:54,230 --> 00:14:59,839
solve so the problem is that the built

00:14:57,019 --> 00:15:02,480
form expects to build all packages from

00:14:59,839 --> 00:15:05,480
source and so it tries to resolve the

00:15:02,480 --> 00:15:06,529
dependencies from the package to xml but

00:15:05,480 --> 00:15:08,670
if you want to build on existing

00:15:06,529 --> 00:15:10,650
packages

00:15:08,670 --> 00:15:13,650
will fail because it doesn't it doesn't

00:15:10,650 --> 00:15:16,590
have the mapping of for instance Ross

00:15:13,650 --> 00:15:19,920
EPP - Ross - indigo that Russell

00:15:16,590 --> 00:15:22,410
defeated that so we used the Rostov

00:15:19,920 --> 00:15:24,900
generator from Mike Purvis which is very

00:15:22,410 --> 00:15:28,140
cool script to just generate lists

00:15:24,900 --> 00:15:30,180
rostov lists of this type and then we

00:15:28,140 --> 00:15:32,220
put it in our roster destroy repository

00:15:30,180 --> 00:15:37,500
which worked very fine so that's a very

00:15:32,220 --> 00:15:39,000
good approach for yeah private rippers

00:15:37,500 --> 00:15:42,240
on and putting stuff on github

00:15:39,000 --> 00:15:44,820
Enterprise we just replaced it up

00:15:42,240 --> 00:15:47,610
reference to get observer to our own

00:15:44,820 --> 00:15:50,640
service leads worked mostly we had some

00:15:47,610 --> 00:15:56,720
problems with where the scripts expected

00:15:50,640 --> 00:15:59,700
on ventilated downloads but we just put

00:15:56,720 --> 00:16:01,700
scripts order through posters that were

00:15:59,700 --> 00:16:04,230
checked out this way on our web server

00:16:01,700 --> 00:16:07,590
which was just the rosters rather than

00:16:04,230 --> 00:16:11,970
config which is safe and we still have

00:16:07,590 --> 00:16:15,950
some issues for time issues I will only

00:16:11,970 --> 00:16:18,570
tell the doc pol talk Apple problem so

00:16:15,950 --> 00:16:20,040
we had a problem that dr. pol would hang

00:16:18,570 --> 00:16:22,320
indefinitely and you would have to

00:16:20,040 --> 00:16:27,930
restart the talker service but update

00:16:22,320 --> 00:16:31,910
1.8 to seem softer and yeah that's

00:16:27,930 --> 00:16:35,280
basically my talk I've put in a bit of

00:16:31,910 --> 00:16:37,410
links to in case you are interested you

00:16:35,280 --> 00:16:39,930
always welcome to setup your own

00:16:37,410 --> 00:16:44,120
platform and let us know what you think

00:16:39,930 --> 00:16:44,120
and what your problems are thank you

00:16:48,460 --> 00:16:58,310
yeah so this is actually what is also

00:16:54,250 --> 00:17:00,500
okay so the question was that there's a

00:16:58,310 --> 00:17:04,070
problem with upstream packages that

00:17:00,500 --> 00:17:07,490
change the interface so your own

00:17:04,070 --> 00:17:11,480
packages break actually we did not

00:17:07,490 --> 00:17:13,430
encounter this problem but all the tools

00:17:11,480 --> 00:17:15,950
are there to solve these problems

00:17:13,430 --> 00:17:19,760
because we I mentioned this import

00:17:15,950 --> 00:17:23,000
upstream job earlier and this is this is

00:17:19,760 --> 00:17:25,339
a manual step you have to take to update

00:17:23,000 --> 00:17:28,220
upstream packages so we you always have

00:17:25,339 --> 00:17:30,530
a bit of control over which factors you

00:17:28,220 --> 00:17:33,200
actually put on your own server and you

00:17:30,530 --> 00:17:35,780
can also test if they still compile or

00:17:33,200 --> 00:17:39,880
if your stop Slocum odds with the with

00:17:35,780 --> 00:17:39,880
the newest OS RF packages

00:17:54,200 --> 00:17:57,200
sorry

00:18:02,720 --> 00:18:08,910
yeah so the question was our Jenkins

00:18:07,260 --> 00:18:11,580
slave is running on a virtual machine

00:18:08,910 --> 00:18:16,220
and if there's problem with problems

00:18:11,580 --> 00:18:20,940
with docker currently not so we also

00:18:16,220 --> 00:18:23,390
evaluate it if we could run our drinkin

00:18:20,940 --> 00:18:27,150
slave in a taqwa environment itself but

00:18:23,390 --> 00:18:28,920
we didn't try it out but we have heard

00:18:27,150 --> 00:18:30,600
that it's could be problematic to run

00:18:28,920 --> 00:18:33,000
docker environments within docker

00:18:30,600 --> 00:18:37,230
so maybe the experts can tell something

00:18:33,000 --> 00:18:39,780
about it but but yeah machine works fine

00:18:37,230 --> 00:18:43,560
with us it's a bit slow but works well

00:18:39,780 --> 00:18:45,980
enough alright let's let's thank your

00:18:43,560 --> 00:18:45,980

YouTube URL: https://www.youtube.com/watch?v=g4VPahhmQLk


