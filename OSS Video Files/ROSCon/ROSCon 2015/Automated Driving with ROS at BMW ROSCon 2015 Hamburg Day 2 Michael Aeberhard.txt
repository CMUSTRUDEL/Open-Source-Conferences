Title: Automated Driving with ROS at BMW ROSCon 2015 Hamburg Day 2 Michael Aeberhard
Publication date: 2015-12-08
Playlist: ROSCon 2015
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2015 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,030 --> 00:00:03,149
my name's Michael Abraham ended with the

00:00:01,620 --> 00:00:06,480
research department for about six years

00:00:03,149 --> 00:00:09,000
now in Munich with BMW started with my

00:00:06,480 --> 00:00:09,900
PhD thesis they're kind of still working

00:00:09,000 --> 00:00:11,219
on finishing that up

00:00:09,900 --> 00:00:14,309
hopefully it'll happen in the next year

00:00:11,219 --> 00:00:17,190
so I'm sure a lot of you know about this

00:00:14,309 --> 00:00:18,720
problem but I started there with working

00:00:17,190 --> 00:00:20,400
on automated driving more in the

00:00:18,720 --> 00:00:22,800
perception area and nowadays I do more

00:00:20,400 --> 00:00:24,330
and in the planning area I'm here with a

00:00:22,800 --> 00:00:26,460
colleague of mine you Leon Thomas he's a

00:00:24,330 --> 00:00:27,960
the other colleague who's in bold and

00:00:26,460 --> 00:00:29,429
some of the other colleagues who that

00:00:27,960 --> 00:00:31,830
we've listed have also done a lot of

00:00:29,429 --> 00:00:33,210
contributed contribution in our

00:00:31,830 --> 00:00:34,920
department with getting Ross up and

00:00:33,210 --> 00:00:36,719
running and really working on the

00:00:34,920 --> 00:00:39,059
infrastructure so I'm gonna talk a bit

00:00:36,719 --> 00:00:41,070
about today what we've done of about a

00:00:39,059 --> 00:00:45,090
year and a half to last year and a half

00:00:41,070 --> 00:00:46,980
two years with Ross and show you some of

00:00:45,090 --> 00:00:48,360
the experiences we've done with this but

00:00:46,980 --> 00:00:50,399
just a quick overview of history of

00:00:48,360 --> 00:00:52,559
automated driving at BMW it's not new is

00:00:50,399 --> 00:00:55,110
coming up on about ten years of

00:00:52,559 --> 00:00:57,090
automated driving at BMW been doing this

00:00:55,110 --> 00:00:58,620
for quite a while and we started with a

00:00:57,090 --> 00:01:01,230
BMW track trainer it was a car that

00:00:58,620 --> 00:01:03,210
drives autonomous on race tracks so

00:01:01,230 --> 00:01:06,119
automated driving BMW style I guess you

00:01:03,210 --> 00:01:08,400
could say and then after that we slowly

00:01:06,119 --> 00:01:10,500
got into two other functionalities first

00:01:08,400 --> 00:01:12,119
the emergency stop assistant so in case

00:01:10,500 --> 00:01:14,280
the driver has a heart attack the car

00:01:12,119 --> 00:01:15,630
would do an automated maneuver to come

00:01:14,280 --> 00:01:17,610
to a stop on the right side of the road

00:01:15,630 --> 00:01:19,799
and then in 2011 we had our first

00:01:17,610 --> 00:01:22,950
successful demo of an automated driving

00:01:19,799 --> 00:01:24,350
function on the highway in rural traffic

00:01:22,950 --> 00:01:26,580
and that's the system we've been

00:01:24,350 --> 00:01:28,110
continuing developing over the last few

00:01:26,580 --> 00:01:29,189
years but some other projects have also

00:01:28,110 --> 00:01:31,320
happened in the last year's like

00:01:29,189 --> 00:01:33,689
automated driving at the vehicles limit

00:01:31,320 --> 00:01:36,240
where we were able to bring a car into a

00:01:33,689 --> 00:01:37,619
drift state keep it in a drift around a

00:01:36,240 --> 00:01:39,180
corner and then bring it back out of

00:01:37,619 --> 00:01:42,390
drift just to prove that the control

00:01:39,180 --> 00:01:45,270
algorithms can be so good to control a

00:01:42,390 --> 00:01:48,240
car at and beyond the limits of what's

00:01:45,270 --> 00:01:49,649
possible with vehicle dynamics so that

00:01:48,240 --> 00:01:50,820
was a quite assess like that was

00:01:49,649 --> 00:01:53,220
actually showed that two years ago two

00:01:50,820 --> 00:01:55,590
CES in Las Vegas we were at CES again

00:01:53,220 --> 00:01:57,899
this year where we had two functions

00:01:55,590 --> 00:01:59,520
fully automated remote valley parking so

00:01:57,899 --> 00:02:02,070
you actually physically get out of the

00:01:59,520 --> 00:02:04,079
car and then the car parks itself in its

00:02:02,070 --> 00:02:06,210
parking spot so this was our first a

00:02:04,079 --> 00:02:08,670
function without a physical person

00:02:06,210 --> 00:02:10,560
inside the car and automated driving the

00:02:08,670 --> 00:02:11,730
other function was 360-degree collision

00:02:10,560 --> 00:02:13,709
avoidance so this is a car

00:02:11,730 --> 00:02:15,180
at low speech which you cannot crash so

00:02:13,709 --> 00:02:17,700
we challenge people to get into car and

00:02:15,180 --> 00:02:19,890
drive against walls and and obstacles

00:02:17,700 --> 00:02:21,300
and try to cut corners to try to crash

00:02:19,890 --> 00:02:24,180
the car and it just wouldn't it would

00:02:21,300 --> 00:02:26,280
stop just before hitting a wall

00:02:24,180 --> 00:02:28,920
so we proof that that's also possible

00:02:26,280 --> 00:02:30,780
and and for more information that we

00:02:28,920 --> 00:02:32,220
actually published a paper at and I

00:02:30,780 --> 00:02:34,560
Triple E intelligent transportation

00:02:32,220 --> 00:02:37,290
systems magazine this year there's a lot

00:02:34,560 --> 00:02:39,569
more technical details mostly about the

00:02:37,290 --> 00:02:41,250
highway project but also about our

00:02:39,569 --> 00:02:42,629
algorithms with grits and then and

00:02:41,250 --> 00:02:44,790
everything so if you're interested in

00:02:42,629 --> 00:02:47,940
two algorithms and one a good place to

00:02:44,790 --> 00:02:49,739
start to learn about how we're doing

00:02:47,940 --> 00:02:54,060
this stuff that's a it's a good paper

00:02:49,739 --> 00:02:55,650
and we haven't really communicated this

00:02:54,060 --> 00:02:58,230
yet but these two projects were already

00:02:55,650 --> 00:03:01,739
running Ross in the background so at CES

00:02:58,230 --> 00:03:03,090
this year if you saw these two BMWs they

00:03:01,739 --> 00:03:04,470
were using Ross in the background we

00:03:03,090 --> 00:03:06,150
didn't use Arvest to visualize it or

00:03:04,470 --> 00:03:09,290
anything like that it was just running

00:03:06,150 --> 00:03:11,640
in the background to do to do the

00:03:09,290 --> 00:03:13,950
environment detection so our whole grid

00:03:11,640 --> 00:03:16,230
algorithms were running in Ross and

00:03:13,950 --> 00:03:20,540
planning algorithms for the parking

00:03:16,230 --> 00:03:20,540
function we're also running in Ross

00:03:21,260 --> 00:03:27,209
we're also involved in at the European

00:03:23,910 --> 00:03:29,100
Union level in a research initiative for

00:03:27,209 --> 00:03:30,989
automated driving called adaptive there

00:03:29,100 --> 00:03:34,230
are several companies in the consortium

00:03:30,989 --> 00:03:35,579
om suppliers universities institutes and

00:03:34,230 --> 00:03:38,670
they were working on automated driving

00:03:35,579 --> 00:03:40,380
at the parking city and highway level

00:03:38,670 --> 00:03:42,810
also looking at the illegal aspects is

00:03:40,380 --> 00:03:44,760
kind of trying to get all this all these

00:03:42,810 --> 00:03:47,609
people together to to figure out how to

00:03:44,760 --> 00:03:51,239
bring automate driving one day to market

00:03:47,609 --> 00:03:53,269
and BMW will be doing a prototype which

00:03:51,239 --> 00:03:55,380
will be of running Ross in this project

00:03:53,269 --> 00:03:57,150
for conditional automation on the

00:03:55,380 --> 00:03:59,760
highway so driver out of the loop and

00:03:57,150 --> 00:04:04,920
partial automation in cities the drivers

00:03:59,760 --> 00:04:07,290
still in the loop so just for people who

00:04:04,920 --> 00:04:09,120
aren't quite Phil familiar with what the

00:04:07,290 --> 00:04:10,950
architecture looks like it's well I

00:04:09,120 --> 00:04:12,239
guess you guys are familiar I'm talking

00:04:10,950 --> 00:04:13,319
to a robotic community it's basically

00:04:12,239 --> 00:04:15,540
the same thing you know the car is a

00:04:13,319 --> 00:04:17,579
robot you have sensors on the as input

00:04:15,540 --> 00:04:19,169
and we have what we call environment

00:04:17,579 --> 00:04:21,599
models so we combine all the sensor data

00:04:19,169 --> 00:04:23,889
and bring it to a level of abstraction

00:04:21,599 --> 00:04:25,689
which is sensor independent

00:04:23,889 --> 00:04:28,479
to kind of get a description of the

00:04:25,689 --> 00:04:30,460
whole environment and then based on this

00:04:28,479 --> 00:04:32,620
environment a description which may also

00:04:30,460 --> 00:04:36,550
contain situation interpretation modules

00:04:32,620 --> 00:04:38,080
the a das functions ACC and an automated

00:04:36,550 --> 00:04:41,319
driving and everything else that you

00:04:38,080 --> 00:04:43,300
have in a car for a TAS also a TAS has

00:04:41,319 --> 00:04:44,469
advanced driver assistance systems if

00:04:43,300 --> 00:04:46,900
you do the planning trajectory planning

00:04:44,469 --> 00:04:50,169
state machine types of things which are

00:04:46,900 --> 00:04:51,279
specific for a single function and then

00:04:50,169 --> 00:04:52,900
you have some sort of output which

00:04:51,279 --> 00:04:54,460
either goes to the HMI sort of driver

00:04:52,900 --> 00:04:56,259
knows what's going on with the car and

00:04:54,460 --> 00:04:58,060
then of course to the vehicle control

00:04:56,259 --> 00:05:02,319
systems that actually then control the

00:04:58,060 --> 00:05:03,669
car so that's a basic architecture our

00:05:02,319 --> 00:05:05,349
new research prototype that we're doing

00:05:03,669 --> 00:05:08,500
for adaptive projects could be a

00:05:05,349 --> 00:05:10,960
3-series a 335 GTS that we've got a nice

00:05:08,500 --> 00:05:14,889
motor in the front of that car and which

00:05:10,960 --> 00:05:16,779
makes it fun to test with at the time

00:05:14,889 --> 00:05:18,939
when we decided to build this car does

00:05:16,779 --> 00:05:20,199
this was the best car with the best

00:05:18,939 --> 00:05:23,469
advanced driver assistance systems

00:05:20,199 --> 00:05:25,060
package which we had so we chose this

00:05:23,469 --> 00:05:26,560
car and then the build on top of what's

00:05:25,060 --> 00:05:29,259
already in the car in series production

00:05:26,560 --> 00:05:30,819
add additional stuff into it and make

00:05:29,259 --> 00:05:32,469
that our new research platform I call

00:05:30,819 --> 00:05:37,659
this a generation 2 because our old cars

00:05:32,469 --> 00:05:41,259
were 5 Series 2010 year 5 series so now

00:05:37,659 --> 00:05:42,699
we're with this for 3 series to look at

00:05:41,259 --> 00:05:44,759
the basic sensor setup what do we have

00:05:42,699 --> 00:05:46,870
in the car

00:05:44,759 --> 00:05:48,610
one of the main sensors is laser scanner

00:05:46,870 --> 00:05:50,949
always surrounded all around the car

00:05:48,610 --> 00:05:53,080
front rear and to the left and the right

00:05:50,949 --> 00:05:54,879
a long-range radar it's the same one

00:05:53,080 --> 00:05:57,490
that we used in series 4 to active

00:05:54,879 --> 00:05:58,810
cruise control function camera is also a

00:05:57,490 --> 00:06:00,729
similar sensor used for the lane

00:05:58,810 --> 00:06:02,199
departure warning in series but of

00:06:00,729 --> 00:06:04,089
course we're using it for for more than

00:06:02,199 --> 00:06:07,029
just that can we have two more

00:06:04,089 --> 00:06:08,949
long-range radars in the back to extend

00:06:07,029 --> 00:06:11,710
our field of view to the rear and then

00:06:08,949 --> 00:06:13,509
for short range radars which are around

00:06:11,710 --> 00:06:15,969
a vehicle so it basically if you were to

00:06:13,509 --> 00:06:17,889
remove the laser scanners in this sensor

00:06:15,969 --> 00:06:19,960
setup and the long range radars in the

00:06:17,889 --> 00:06:22,120
back that's basically the sensor setup

00:06:19,960 --> 00:06:23,439
of the Neuse BMW 7-series so we're

00:06:22,120 --> 00:06:26,589
actually our research prototype isn't

00:06:23,439 --> 00:06:31,529
that far away from what's already under

00:06:26,589 --> 00:06:31,529
hardware inside a series production car

00:06:31,800 --> 00:06:35,440
so this is what our architecture the

00:06:34,360 --> 00:06:35,960
research department looks like this is

00:06:35,440 --> 00:06:38,120
stuff we

00:06:35,960 --> 00:06:40,190
put into the car that's not series

00:06:38,120 --> 00:06:43,449
production so we access all of the data

00:06:40,190 --> 00:06:46,699
in the car over can Ethernet flex ray

00:06:43,449 --> 00:06:49,759
over a over gateways so we have these

00:06:46,699 --> 00:06:51,440
gateway components into car that then

00:06:49,759 --> 00:06:55,039
convert everything can be Thurn eight

00:06:51,440 --> 00:06:57,229
flex ray to a single generic Ethernet

00:06:55,039 --> 00:07:00,740
interface that all runs over a switch

00:06:57,229 --> 00:07:03,650
with a lot of virtual LAN networks and

00:07:00,740 --> 00:07:05,180
then we access the data over to several

00:07:03,650 --> 00:07:06,889
computers that make up the components

00:07:05,180 --> 00:07:08,330
over to switch and one of those

00:07:06,889 --> 00:07:10,340
components is the environment and

00:07:08,330 --> 00:07:13,580
function computer running Linux and

00:07:10,340 --> 00:07:15,860
Andross the other computers are display

00:07:13,580 --> 00:07:19,310
HMI computer running Windows and then we

00:07:15,860 --> 00:07:22,599
have our real-time system from dspace

00:07:19,310 --> 00:07:25,970
auto box 2 which then does the real-time

00:07:22,599 --> 00:07:28,400
real-time software and then basically

00:07:25,970 --> 00:07:31,250
out of the motion control computer you

00:07:28,400 --> 00:07:33,020
get the signals which tell the actuators

00:07:31,250 --> 00:07:36,139
what to do then there's another layer of

00:07:33,020 --> 00:07:39,220
safety that to make sure it doesn't do

00:07:36,139 --> 00:07:42,080
any errors and then it goes to the

00:07:39,220 --> 00:07:43,940
actuators and for the gas brake and

00:07:42,080 --> 00:07:45,590
steering we also have a time server

00:07:43,940 --> 00:07:51,830
which tries to synchronize all of

00:07:45,590 --> 00:07:54,050
different computers in the car so why

00:07:51,830 --> 00:07:56,090
did we go to Ross so in the past we had

00:07:54,050 --> 00:07:57,860
this thing called micro framework it was

00:07:56,090 --> 00:08:02,449
our internally developed framework which

00:07:57,860 --> 00:08:04,669
we use to do a das a prototyping in in a

00:08:02,449 --> 00:08:08,719
research department use of shared memory

00:08:04,669 --> 00:08:11,590
concepts so it shared pointers between

00:08:08,719 --> 00:08:14,750
software modules was all one process and

00:08:11,590 --> 00:08:16,810
as a really nice sink route synchronized

00:08:14,750 --> 00:08:19,580
execution of software so it's not

00:08:16,810 --> 00:08:20,659
asynchronous like Ross's but this is

00:08:19,580 --> 00:08:22,789
what it looked like if when the

00:08:20,659 --> 00:08:24,409
automated writing function was on so you

00:08:22,789 --> 00:08:26,090
have here the left two states so now we

00:08:24,409 --> 00:08:28,310
see detective slower car two cars doing

00:08:26,090 --> 00:08:30,590
a lane change you see your digital map

00:08:28,310 --> 00:08:32,899
and the right here a bit some situation

00:08:30,590 --> 00:08:35,029
interpretation to blue boxes are object

00:08:32,899 --> 00:08:38,899
hypothesis and this is what we worked

00:08:35,029 --> 00:08:44,200
with for quite a long time so here we

00:08:38,899 --> 00:08:46,310
see an overtaking so

00:08:44,200 --> 00:08:49,880
but in the automobile industry

00:08:46,310 --> 00:08:52,280
especially in Germany years ago there

00:08:49,880 --> 00:08:53,360
was a decision - that all of the car

00:08:52,280 --> 00:08:55,100
companies kind of had their own

00:08:53,360 --> 00:08:56,960
frameworks and there was a decision you

00:08:55,100 --> 00:09:00,020
know hey let's share the resources and

00:08:56,960 --> 00:09:01,940
make one framework and then a commercial

00:09:00,020 --> 00:09:03,980
product actually does exist in the

00:09:01,940 --> 00:09:06,920
automobile industry for doing framework

00:09:03,980 --> 00:09:09,140
type work it's called a DTF and it's

00:09:06,920 --> 00:09:10,400
very tuned towards the requirements of

00:09:09,140 --> 00:09:11,720
the automobile industry which is really

00:09:10,400 --> 00:09:13,220
great because there are a lot of

00:09:11,720 --> 00:09:14,720
requirements especially if when you go

00:09:13,220 --> 00:09:18,220
closer and closer to series production

00:09:14,720 --> 00:09:20,690
and a DTF is a perfect solution for this

00:09:18,220 --> 00:09:22,280
so we were at the point where we wanted

00:09:20,690 --> 00:09:24,650
to say okay our internal framework

00:09:22,280 --> 00:09:26,810
called micro framework it's starting to

00:09:24,650 --> 00:09:29,360
reach its limits we either do we keep

00:09:26,810 --> 00:09:31,850
developing it or should we you know join

00:09:29,360 --> 00:09:32,600
our pre-series colleagues and go to a

00:09:31,850 --> 00:09:34,430
DTF

00:09:32,600 --> 00:09:37,820
that would have been the obvious choice

00:09:34,430 --> 00:09:39,710
actually but then there's think there

00:09:37,820 --> 00:09:41,540
was this thing called Ross and some of

00:09:39,710 --> 00:09:43,250
our colleagues in the US and our

00:09:41,540 --> 00:09:44,780
Mountain View tech office they were

00:09:43,250 --> 00:09:47,240
starting to experiment a few years ago

00:09:44,780 --> 00:09:49,490
with Ross our car IT colleagues Munich's

00:09:47,240 --> 00:09:51,500
also started to experiment a bit with

00:09:49,490 --> 00:09:53,060
Ross you are on with it they made us

00:09:51,500 --> 00:09:55,190
aware that this exists in a robotics

00:09:53,060 --> 00:09:56,480
community and that it's being used by a

00:09:55,190 --> 00:09:58,250
lot of research institutes quite

00:09:56,480 --> 00:09:59,480
successfully so then we started to try

00:09:58,250 --> 00:10:01,340
it out in Munich as well this is gonna

00:09:59,480 --> 00:10:03,260
see what it can do we're actually quite

00:10:01,340 --> 00:10:06,200
happy with what it can do especially

00:10:03,260 --> 00:10:07,970
because it's a open source so like if

00:10:06,200 --> 00:10:09,590
something isn't the way you want to be

00:10:07,970 --> 00:10:10,850
you can change it which is a big

00:10:09,590 --> 00:10:13,040
advantage especially for the research

00:10:10,850 --> 00:10:14,810
department since we might want to do

00:10:13,040 --> 00:10:15,350
something that another framework cannot

00:10:14,810 --> 00:10:18,380
do yet

00:10:15,350 --> 00:10:19,220
and it has a distributed architecture so

00:10:18,380 --> 00:10:21,380
that was really interesting that you

00:10:19,220 --> 00:10:23,870
could have it run over several computers

00:10:21,380 --> 00:10:25,520
with different processes and if one node

00:10:23,870 --> 00:10:28,880
crashes it doesn't crash the whole

00:10:25,520 --> 00:10:31,130
system so that was a really nice feature

00:10:28,880 --> 00:10:32,510
and a huge selection of this

00:10:31,130 --> 00:10:33,980
off-the-shelf software so if you just

00:10:32,510 --> 00:10:35,240
want to try something out real quick

00:10:33,980 --> 00:10:37,070
like gene mapping or something then you

00:10:35,240 --> 00:10:40,390
just published a correct messages and

00:10:37,070 --> 00:10:42,920
you can see what you can do very quickly

00:10:40,390 --> 00:10:45,140
so obviously I guess the choice we made

00:10:42,920 --> 00:10:46,340
is obvious or else I wouldn't be here we

00:10:45,140 --> 00:10:47,300
ended up going with the research

00:10:46,340 --> 00:10:50,660
department

00:10:47,300 --> 00:10:53,240
in with Ross but why we wanted to

00:10:50,660 --> 00:10:55,730
autonomous driving basically is robotics

00:10:53,240 --> 00:10:58,160
so we want to get a better connection to

00:10:55,730 --> 00:11:01,070
the robotics community which is widely

00:10:58,160 --> 00:11:03,290
using Ross and it has a very very large

00:11:01,070 --> 00:11:05,180
user base and large user base means

00:11:03,290 --> 00:11:06,829
stability and reliability because

00:11:05,180 --> 00:11:08,300
somebody else probably already solved

00:11:06,829 --> 00:11:10,250
the problem you're having and that has

00:11:08,300 --> 00:11:13,310
been the case for us when you always had

00:11:10,250 --> 00:11:14,660
a problem answer is that Ross at org do

00:11:13,310 --> 00:11:16,610
a quick search and somebody's probably

00:11:14,660 --> 00:11:18,860
already solved it so that's also really

00:11:16,610 --> 00:11:20,450
cool and like I said you do quick

00:11:18,860 --> 00:11:23,300
testing of already available algorithms

00:11:20,450 --> 00:11:24,740
and software that's available open

00:11:23,300 --> 00:11:26,209
source and one thing we do in a research

00:11:24,740 --> 00:11:27,350
department often is cooperate with

00:11:26,209 --> 00:11:29,630
universities or other research

00:11:27,350 --> 00:11:31,279
institutes and in Ross is just a great

00:11:29,630 --> 00:11:32,829
platform to where everybody knows how to

00:11:31,279 --> 00:11:36,920
work with it there's the Ross messages

00:11:32,829 --> 00:11:38,329
and then it's much easier to work to

00:11:36,920 --> 00:11:40,519
cooperate with other Institute's at a

00:11:38,329 --> 00:11:43,190
very practical level which was in the

00:11:40,519 --> 00:11:44,570
past a bit more difficult and also since

00:11:43,190 --> 00:11:46,269
we're the research department we should

00:11:44,570 --> 00:11:48,860
be trying something new you know this

00:11:46,269 --> 00:11:50,180
it's a risk I guess going with frost

00:11:48,860 --> 00:11:52,850
instead of going with the commercial

00:11:50,180 --> 00:11:55,459
product but we wanted to gain experience

00:11:52,850 --> 00:11:57,399
well how does it work is it something

00:11:55,459 --> 00:11:59,540
that has more potential or doesn't and

00:11:57,399 --> 00:12:02,720
so we wanted to simply gain this

00:11:59,540 --> 00:12:03,550
experience using Ross for BMW and then

00:12:02,720 --> 00:12:05,450
see what happens

00:12:03,550 --> 00:12:08,089
which we're still doing it to see what

00:12:05,450 --> 00:12:09,380
happens so basically our Ross

00:12:08,089 --> 00:12:12,020
architecture looks like this it's very

00:12:09,380 --> 00:12:13,790
very simplified version but like I said

00:12:12,020 --> 00:12:15,260
if you get all the Ethernet data in then

00:12:13,790 --> 00:12:17,899
we have a Ross note that basically does

00:12:15,260 --> 00:12:20,959
Ethernet - Ross then we and these yellow

00:12:17,899 --> 00:12:22,610
interfaces are our are our own custom

00:12:20,959 --> 00:12:25,339
defined ross messages which basically

00:12:22,610 --> 00:12:27,829
define what our into input/output

00:12:25,339 --> 00:12:30,290
interfaces are - the ross system and

00:12:27,829 --> 00:12:31,970
then we run our algorithms environment

00:12:30,290 --> 00:12:35,060
perception sensor fusion situation

00:12:31,970 --> 00:12:37,970
interpretation plan etc and then output

00:12:35,060 --> 00:12:40,790
is basically a trajectory and some each

00:12:37,970 --> 00:12:43,130
of my triggers that we have a Ross -

00:12:40,790 --> 00:12:46,160
Ethernet again which then puts the data

00:12:43,130 --> 00:12:49,279
back to the gateways or directly to the

00:12:46,160 --> 00:12:52,779
to the real time computer where it then

00:12:49,279 --> 00:12:56,930
gets processed in real time in order to

00:12:52,779 --> 00:12:58,399
drive to directory we can do this into

00:12:56,930 --> 00:13:01,009
simulation so basically when we're

00:12:58,399 --> 00:13:04,040
connected to our BMW simulator software

00:13:01,009 --> 00:13:04,459
we have a node that does simulator to

00:13:04,040 --> 00:13:06,220
Ross

00:13:04,459 --> 00:13:09,050
so we basically published the correct

00:13:06,220 --> 00:13:12,230
messages that are of interest to us from

00:13:09,050 --> 00:13:13,939
the simulators API and then were able to

00:13:12,230 --> 00:13:15,439
develop our algorithms as if we were in

00:13:13,939 --> 00:13:17,809
the car then we also have a Ross to

00:13:15,439 --> 00:13:19,730
simulator to drive the vehicle in the

00:13:17,809 --> 00:13:21,680
simulation and if we go into the real

00:13:19,730 --> 00:13:24,470
car all you do as if that changed the

00:13:21,680 --> 00:13:26,660
ends so instead you have gateway to Ross

00:13:24,470 --> 00:13:28,790
or Hardware to Ross to publish the same

00:13:26,660 --> 00:13:30,230
Ross messages and then the notes that

00:13:28,790 --> 00:13:31,519
you're running to actually do the your

00:13:30,230 --> 00:13:33,529
algorithms and your intelligence and

00:13:31,519 --> 00:13:36,680
everything those are exactly the same in

00:13:33,529 --> 00:13:39,949
the simulation or and/or in the car so

00:13:36,680 --> 00:13:41,449
there was a really cool advantage of

00:13:39,949 --> 00:13:43,399
setting it up this way then at the end

00:13:41,449 --> 00:13:45,499
we have a Ross to auto box which then

00:13:43,399 --> 00:13:47,329
pipes the data over to the displaced

00:13:45,499 --> 00:13:51,040
micro auto box which like I said then

00:13:47,329 --> 00:13:51,040
does the control algorithms in real time

00:13:51,189 --> 00:13:55,550
also this year which was really cool the

00:13:53,809 --> 00:13:59,059
math works release of robotic systems

00:13:55,550 --> 00:14:00,529
toolbox which natively does a lot of

00:13:59,059 --> 00:14:02,689
interesting Ross functions we've been

00:14:00,529 --> 00:14:04,189
using mainly to analyze and read Ross

00:14:02,689 --> 00:14:06,800
bags at the moment which is very useful

00:14:04,189 --> 00:14:09,620
to kind of evaluate your system to

00:14:06,800 --> 00:14:12,079
analyze what's going on and to find find

00:14:09,620 --> 00:14:14,720
errors and a lot of our old software

00:14:12,079 --> 00:14:17,329
that we have so heavy we used to be very

00:14:14,720 --> 00:14:19,399
very heavy users of the D space auto box

00:14:17,329 --> 00:14:21,470
especially for real time stuff but we

00:14:19,399 --> 00:14:23,029
also had a lot of stuff that doesn't

00:14:21,470 --> 00:14:26,300
necessarily have to run in real time

00:14:23,029 --> 00:14:29,149
also on the D space hardware and with

00:14:26,300 --> 00:14:30,649
the integration of Simulink and Ross

00:14:29,149 --> 00:14:34,040
it's very easy to bring this software

00:14:30,649 --> 00:14:39,589
out of this real time system and let it

00:14:34,040 --> 00:14:41,300
run and in arras in an environment so

00:14:39,589 --> 00:14:44,059
now to the visual part of my

00:14:41,300 --> 00:14:50,749
presentation take a look at what some of

00:14:44,059 --> 00:14:52,550
our cars looking into a station so just

00:14:50,749 --> 00:14:54,679
right here's our i3 when we headed to

00:14:52,550 --> 00:14:56,569
CES this year we just took it onto a

00:14:54,679 --> 00:14:58,759
drive around in the city to kind of

00:14:56,569 --> 00:15:00,679
visualize some laser scanner data you

00:14:58,759 --> 00:15:03,230
also see the odometry path here in the

00:15:00,679 --> 00:15:04,820
back and the vehicle

00:15:03,230 --> 00:15:06,980
dynamics and decided don't see really

00:15:04,820 --> 00:15:08,390
that well under left but we're not

00:15:06,980 --> 00:15:09,890
driving automated here it's just manual

00:15:08,390 --> 00:15:15,620
driving just kind of get an idea of what

00:15:09,890 --> 00:15:18,520
the laser scanner data looks like and

00:15:15,620 --> 00:15:20,570
all of that we don't use a laser scanner

00:15:18,520 --> 00:15:21,740
under everyone to avoid that so all of

00:15:20,570 --> 00:15:23,470
our sensors are really nicely integrated

00:15:21,740 --> 00:15:25,670
into car that you can barely tell

00:15:23,470 --> 00:15:27,200
there's anything in it at all so that

00:15:25,670 --> 00:15:29,360
wasn't for it's very very important for

00:15:27,200 --> 00:15:31,340
us to work with sensor configuration in

00:15:29,360 --> 00:15:35,210
this manner so here's the same scenario

00:15:31,340 --> 00:15:41,630
with our occupancy grid algorithms green

00:15:35,210 --> 00:15:43,100
is free red is a static obstacle I guess

00:15:41,630 --> 00:15:45,080
at the same scenario you can also see

00:15:43,100 --> 00:15:47,270
there some dynamic objects usually

00:15:45,080 --> 00:15:49,550
around the car but we're good job of

00:15:47,270 --> 00:15:51,680
filtering them out so that the grits are

00:15:49,550 --> 00:15:53,720
truly a a static environment

00:15:51,680 --> 00:15:56,690
representation without any artifacts

00:15:53,720 --> 00:15:59,450
from dynamic objects and this is very

00:15:56,690 --> 00:16:00,800
important at high speeds because you

00:15:59,450 --> 00:16:02,690
want to do your planning against the

00:16:00,800 --> 00:16:04,630
static environment and the dynamic

00:16:02,690 --> 00:16:06,920
environment you use a different

00:16:04,630 --> 00:16:12,440
algorithm and you're planning to do

00:16:06,920 --> 00:16:14,120
collision checking there so I actually

00:16:12,440 --> 00:16:15,020
took some of these videos this week on

00:16:14,120 --> 00:16:18,080
our test tracks I do a lot of

00:16:15,020 --> 00:16:19,670
development there to probably do some do

00:16:18,080 --> 00:16:22,010
some visualization so here's a laser

00:16:19,670 --> 00:16:25,610
scanner and our lane marking detection

00:16:22,010 --> 00:16:29,150
and object detection what's coming from

00:16:25,610 --> 00:16:31,820
the the sensors on a basic highway

00:16:29,150 --> 00:16:34,220
simulated tracking you see the images

00:16:31,820 --> 00:16:37,610
appear on the left now we're going here

00:16:34,220 --> 00:16:41,170
into a curve still driving manual at

00:16:37,610 --> 00:16:44,210
this point it's kind of gave an idea of

00:16:41,170 --> 00:16:47,780
what our algorithms in the environment

00:16:44,210 --> 00:16:49,960
model area look like the interfaces at

00:16:47,780 --> 00:16:49,960
least

00:16:57,190 --> 00:17:00,560
now of course for automated driving you

00:16:59,180 --> 00:17:02,990
need to localize yourself on a highly

00:17:00,560 --> 00:17:06,440
digital map so this is what our map

00:17:02,990 --> 00:17:09,530
looks like in the background it's a grid

00:17:06,440 --> 00:17:11,360
based so we have landmark data and grid

00:17:09,530 --> 00:17:13,579
data in the map which you all convert to

00:17:11,360 --> 00:17:15,620
a generic grid representation then you

00:17:13,579 --> 00:17:17,690
see the heat map that's our localization

00:17:15,620 --> 00:17:19,940
hypothesis where we are and you can see

00:17:17,690 --> 00:17:20,959
that we're getting quite an accurate

00:17:19,940 --> 00:17:22,339
localization we're not using

00:17:20,959 --> 00:17:24,920
differential GPS we're using just a

00:17:22,339 --> 00:17:26,630
normal GPS that's built into the series

00:17:24,920 --> 00:17:30,650
production car and we're able to get

00:17:26,630 --> 00:17:36,950
very very accurate localization with

00:17:30,650 --> 00:17:38,510
these maps and all of this that I'm

00:17:36,950 --> 00:17:40,910
showing you now is running on one PC

00:17:38,510 --> 00:17:44,270
it's since we're a research department

00:17:40,910 --> 00:17:46,490
we just buy the top-of-the-line I seven

00:17:44,270 --> 00:17:47,950
and and then get started so we don't

00:17:46,490 --> 00:17:50,080
really have any restrictions like our

00:17:47,950 --> 00:17:52,400
colleagues doing the Prix series uh

00:17:50,080 --> 00:17:54,470
departments use the most powerful

00:17:52,400 --> 00:17:59,750
computer we can get and then then have

00:17:54,470 --> 00:18:01,670
fun so now you see the more logical

00:17:59,750 --> 00:18:04,150
layer of the map so you actually have

00:18:01,670 --> 00:18:06,590
for the geometry after roads you have

00:18:04,150 --> 00:18:08,930
identification of what type of Lane it

00:18:06,590 --> 00:18:11,360
is that a yellow is the emergency lane

00:18:08,930 --> 00:18:13,160
on the right side now going into another

00:18:11,360 --> 00:18:15,280
curve and as you can see delocalization

00:18:13,160 --> 00:18:18,200
does a good job of keeping the car

00:18:15,280 --> 00:18:19,880
localized properly even though the lane

00:18:18,200 --> 00:18:22,640
marking detection sometimes doesn't

00:18:19,880 --> 00:18:23,900
match up perfectly with what the map is

00:18:22,640 --> 00:18:25,610
saying that's not a big deal because

00:18:23,900 --> 00:18:27,980
there's enough redundancy in the

00:18:25,610 --> 00:18:31,030
background with other sensors in order

00:18:27,980 --> 00:18:33,170
to keep the localization quite accurate

00:18:31,030 --> 00:18:35,890
throughout the whole runtime of the

00:18:33,170 --> 00:18:35,890
after system

00:18:41,049 --> 00:18:46,369
now of course we have objects we have

00:18:43,399 --> 00:18:47,809
maps we know where the road is going now

00:18:46,369 --> 00:18:50,059
we need to plan something and this is

00:18:47,809 --> 00:18:52,100
our trajectory planning what it looks

00:18:50,059 --> 00:18:53,989
like individualization you can now see

00:18:52,100 --> 00:18:56,330
that the the road we want to be driving

00:18:53,989 --> 00:18:58,100
on is green which means that the

00:18:56,330 --> 00:19:01,399
manoeuvre planning has chosen to drive

00:18:58,100 --> 00:19:02,570
on that Lane and then the directory you

00:19:01,399 --> 00:19:05,299
see in front of the car

00:19:02,570 --> 00:19:08,179
the darker green or lighter green I

00:19:05,299 --> 00:19:11,029
guess is now the the reactive trajectory

00:19:08,179 --> 00:19:13,340
planning that's that's being done which

00:19:11,029 --> 00:19:15,499
which actually gets sent over to our

00:19:13,340 --> 00:19:19,669
real-time computer which isn't actually

00:19:15,499 --> 00:19:21,049
driven there's actually three layers of

00:19:19,669 --> 00:19:25,100
planning that maneuver planning then you

00:19:21,049 --> 00:19:33,769
have a selection of the of the lane and

00:19:25,100 --> 00:19:37,190
then a short-term reactive planning now

00:19:33,769 --> 00:19:38,480
finally turning to system on what

00:19:37,190 --> 00:19:41,749
happens when the car is really driving

00:19:38,480 --> 00:19:44,029
automated seriously you see at the lower

00:19:41,749 --> 00:19:45,769
right it's off now we turned it on cars

00:19:44,029 --> 00:19:47,840
and lane-keeping mode it's detected if

00:19:45,769 --> 00:19:49,159
there's a car in front my colleague an

00:19:47,840 --> 00:19:52,129
see the yellow line is now pushing this

00:19:49,159 --> 00:19:53,710
to his speed up if you detected that

00:19:52,129 --> 00:19:57,109
we're slower the car does a lane change

00:19:53,710 --> 00:19:59,169
to overtake to slower car in front since

00:19:57,109 --> 00:20:01,279
we would like to be driving faster and

00:19:59,169 --> 00:20:02,659
all the decision making for the lane

00:20:01,279 --> 00:20:04,359
changes completely automated so the

00:20:02,659 --> 00:20:06,590
driver really isn't doing anything here

00:20:04,359 --> 00:20:08,330
in Germany you should always drive under

00:20:06,590 --> 00:20:10,190
as far right as possible is that a car

00:20:08,330 --> 00:20:11,690
will go back to the right lane does the

00:20:10,190 --> 00:20:13,940
automated lane change and it will just

00:20:11,690 --> 00:20:18,859
get you treated to your destination in

00:20:13,940 --> 00:20:22,460
this manner so what are some of the

00:20:18,859 --> 00:20:26,899
other things stuff we did so we had need

00:20:22,460 --> 00:20:27,710
to develop some some other things that a

00:20:26,899 --> 00:20:30,730
draw stools

00:20:27,710 --> 00:20:33,309
out of the box didn't really fit for us

00:20:30,730 --> 00:20:35,210
but we did a lot of our QT plugins

00:20:33,309 --> 00:20:37,759
especially for our QT plugins it's

00:20:35,210 --> 00:20:39,259
simulate input like if I want a

00:20:37,759 --> 00:20:40,460
simulator the driver presses a button on

00:20:39,259 --> 00:20:41,809
the steering wheel I can do this over a

00:20:40,460 --> 00:20:44,299
GUI so we made a little GUI that

00:20:41,809 --> 00:20:45,739
publishes the correct topic in order to

00:20:44,299 --> 00:20:47,119
simulate a lot of stuff which really

00:20:45,739 --> 00:20:49,279
helps in development when you don't want

00:20:47,119 --> 00:20:51,740
to but you want to basically get rid of

00:20:49,279 --> 00:20:55,090
the hardware as a potential

00:20:51,740 --> 00:20:58,370
eresource due to a do some simulation

00:20:55,090 --> 00:21:02,000
we've also wrote some other gooeys too

00:20:58,370 --> 00:21:04,940
for example here's one that wraps or

00:21:02,000 --> 00:21:07,220
does our own implementation of bag

00:21:04,940 --> 00:21:10,550
record and play we actually want to

00:21:07,220 --> 00:21:14,179
record the raus raus pram dump and load

00:21:10,550 --> 00:21:15,530
with the back that we've recorded some

00:21:14,179 --> 00:21:17,390
metadata like we want to know who's

00:21:15,530 --> 00:21:18,830
driving what type of situations there

00:21:17,390 --> 00:21:20,780
are sort of some extra stuff that we

00:21:18,830 --> 00:21:21,770
want to save along with back so we kind

00:21:20,780 --> 00:21:23,270
of wrapped us in one tool

00:21:21,770 --> 00:21:26,240
another little nice feature you know it

00:21:23,270 --> 00:21:27,620
has this a 2d map so when you're playing

00:21:26,240 --> 00:21:30,110
back at bag you can kind of see where

00:21:27,620 --> 00:21:32,150
you are from an osm map but maybe I

00:21:30,110 --> 00:21:33,590
guess that's not be necessary when when

00:21:32,150 --> 00:21:37,850
map this is working we'll just use that

00:21:33,590 --> 00:21:39,500
instead and what else you saw we tend to

00:21:37,850 --> 00:21:43,610
not in artists we tend to not use

00:21:39,500 --> 00:21:45,860
markers to avoid traffic so we created a

00:21:43,610 --> 00:21:48,200
lot of plugins that work on our specific

00:21:45,860 --> 00:21:50,150
interfaces so we can access directly to

00:21:48,200 --> 00:21:52,700
augur API and do some really neat things

00:21:50,150 --> 00:21:54,770
which the markers may not be able to -

00:21:52,700 --> 00:21:57,710
for debugging like let's say I wanted to

00:21:54,770 --> 00:21:59,330
know some internal value or some

00:21:57,710 --> 00:22:00,890
internal state of an algorithm then I

00:21:59,330 --> 00:22:02,300
might for for quick debugging do a

00:22:00,890 --> 00:22:04,640
marker to kind of see what's going on

00:22:02,300 --> 00:22:06,650
but in general we try to make really

00:22:04,640 --> 00:22:08,960
nice plugins that also look good that

00:22:06,650 --> 00:22:10,460
are nice to present because we're going

00:22:08,960 --> 00:22:12,830
to also present this stuff at some point

00:22:10,460 --> 00:22:16,460
that work directly on our interfaces so

00:22:12,830 --> 00:22:17,840
that's usually what we what we do we

00:22:16,460 --> 00:22:20,000
also like the selection mechanism so you

00:22:17,840 --> 00:22:23,570
can actually so if you develop the

00:22:20,000 --> 00:22:25,730
plugin correctly you can click on an

00:22:23,570 --> 00:22:27,860
object and then decide what you want to

00:22:25,730 --> 00:22:30,590
display from the message in the

00:22:27,860 --> 00:22:32,660
selection a window so we use that a lot

00:22:30,590 --> 00:22:34,160
for also debugging to kind of not just

00:22:32,660 --> 00:22:35,179
see where the object is but you click on

00:22:34,160 --> 00:22:37,460
it and then you get a lot of the

00:22:35,179 --> 00:22:38,720
internal attributes directly in Arvest

00:22:37,460 --> 00:22:40,460
so that's really cool

00:22:38,720 --> 00:22:44,450
almost out-of-the-box feature when

00:22:40,460 --> 00:22:46,309
you're doing a plugin so what do we like

00:22:44,450 --> 00:22:47,870
about Ross reliably instability like at

00:22:46,309 --> 00:22:50,929
the CES this year when we had it for our

00:22:47,870 --> 00:22:53,360
parking demo it ran from morning to

00:22:50,929 --> 00:22:56,450
night without any problems at all it was

00:22:53,360 --> 00:22:58,540
really great surprises how well it

00:22:56,450 --> 00:23:00,679
worked even in the Las Vegas heat

00:22:58,540 --> 00:23:02,240
everything worked out really good so we

00:23:00,679 --> 00:23:03,080
were quite happy with the performance

00:23:02,240 --> 00:23:04,190
there the

00:23:03,080 --> 00:23:05,870
the moon is above what our base across

00:23:04,190 --> 00:23:07,789
notice is also really cool here's not

00:23:05,870 --> 00:23:09,620
it's not much code to actually start

00:23:07,789 --> 00:23:14,269
using the de Ross infrastructure so you

00:23:09,620 --> 00:23:15,799
can have really lean notes distributed

00:23:14,269 --> 00:23:17,750
architectural image is also really great

00:23:15,799 --> 00:23:20,750
so if one node crashes you might have a

00:23:17,750 --> 00:23:22,399
backup node which might might uh which

00:23:20,750 --> 00:23:24,500
might take over that those duties yeah

00:23:22,399 --> 00:23:27,980
and it's all distributed so you have

00:23:24,500 --> 00:23:29,330
zero increases reliably as well and the

00:23:27,980 --> 00:23:31,820
Ross message concept is cool because

00:23:29,330 --> 00:23:34,370
it's anybody can understand the Ross

00:23:31,820 --> 00:23:36,440
message you can really discuss very

00:23:34,370 --> 00:23:38,000
easily about two interface and you can

00:23:36,440 --> 00:23:39,889
discuss at a level that's very close to

00:23:38,000 --> 00:23:42,230
implementation so a Ross message can be

00:23:39,889 --> 00:23:43,880
directly implemented using C++ or Python

00:23:42,230 --> 00:23:46,580
and so you're talking about something

00:23:43,880 --> 00:23:49,460
very real using a Ross message instead

00:23:46,580 --> 00:23:51,919
of doing a sell sheet for you say what

00:23:49,460 --> 00:23:52,789
are the values that an interface has so

00:23:51,919 --> 00:23:54,440
that's very useful

00:23:52,789 --> 00:23:58,760
all the off-the-shelf tools are really

00:23:54,440 --> 00:24:00,710
cool to help working with the data are

00:23:58,760 --> 00:24:03,470
bizarre QD back Diagnostics all really

00:24:00,710 --> 00:24:05,240
really cool stuff and when we also

00:24:03,470 --> 00:24:06,169
decided to make the change to Ross you

00:24:05,240 --> 00:24:08,510
could tell that there was a future

00:24:06,169 --> 00:24:10,940
potential in Ross and we wanted to try

00:24:08,510 --> 00:24:13,279
it out just to make sure that you know

00:24:10,940 --> 00:24:15,919
somebody at BMW is is getting involved

00:24:13,279 --> 00:24:18,080
with Ross to make sure that we're we're

00:24:15,919 --> 00:24:19,850
ready once once maybe does become

00:24:18,080 --> 00:24:23,029
something more in Ross too and Ross

00:24:19,850 --> 00:24:25,610
industrial they are going in a really

00:24:23,029 --> 00:24:29,450
good direction I think or whatever the

00:24:25,610 --> 00:24:30,380
potential could be a pretty big and of

00:24:29,450 --> 00:24:31,669
course there's lots of software packages

00:24:30,380 --> 00:24:33,200
to try out so if we want to try

00:24:31,669 --> 00:24:35,029
something out new and we haven't

00:24:33,200 --> 00:24:36,889
developed anything on it yet there

00:24:35,029 --> 00:24:38,799
probably is somebody into robotics world

00:24:36,889 --> 00:24:41,269
that has done something kind of similar

00:24:38,799 --> 00:24:43,190
and a quick search and internet might

00:24:41,269 --> 00:24:46,250
lead to a ross package that we could try

00:24:43,190 --> 00:24:50,000
out real quick to see if this idea we

00:24:46,250 --> 00:24:53,149
have for an application makes sense so

00:24:50,000 --> 00:24:56,510
one of the things that we think could be

00:24:53,149 --> 00:24:58,370
improved I guess there's some ideas

00:24:56,510 --> 00:25:00,799
maybe some other people have also had

00:24:58,370 --> 00:25:02,750
these problems be interesting to know so

00:25:00,799 --> 00:25:04,519
I think more options in transport

00:25:02,750 --> 00:25:06,320
mechanism will be cool but I think DDS

00:25:04,519 --> 00:25:07,850
and Ross too will solve this I don't

00:25:06,320 --> 00:25:09,679
think this is an issue at all anymore

00:25:07,850 --> 00:25:10,820
but we also do a lot of work on the GPU

00:25:09,679 --> 00:25:12,860
so what's costing us a lot of

00:25:10,820 --> 00:25:14,899
performance is when you want to and I

00:25:12,860 --> 00:25:15,850
want to communicate what's in GPU memory

00:25:14,899 --> 00:25:17,620
from wrong

00:25:15,850 --> 00:25:19,870
to another so I have to take it then to

00:25:17,620 --> 00:25:21,730
the CPU transport it to the other node

00:25:19,870 --> 00:25:23,470
and then push it back to the CPU to the

00:25:21,730 --> 00:25:26,200
GPU it'd be better just to have a shared

00:25:23,470 --> 00:25:28,750
memory GPU transport in order to avoid

00:25:26,200 --> 00:25:31,179
all that and really increase performance

00:25:28,750 --> 00:25:34,090
that'd be something interesting and what

00:25:31,179 --> 00:25:35,950
we also tend to do we tend to update the

00:25:34,090 --> 00:25:39,280
comments of our Ross message is quite

00:25:35,950 --> 00:25:41,020
often in order to tell people you know

00:25:39,280 --> 00:25:42,549
and use this like this and if this was

00:25:41,020 --> 00:25:44,049
confusing we need to update it people

00:25:42,549 --> 00:25:45,280
understand better but unfortunately

00:25:44,049 --> 00:25:46,720
every time when you change a comment in

00:25:45,280 --> 00:25:48,280
terrassa message you're all Paxman work

00:25:46,720 --> 00:25:49,840
anymore new to conversion and so on

00:25:48,280 --> 00:25:52,299
that'd be cooler if the Ross messages

00:25:49,840 --> 00:25:54,610
didn't work on the whole Ross messages

00:25:52,299 --> 00:25:56,710
md5 checksum maybe just under actual

00:25:54,610 --> 00:25:59,350
data into variable names and just ignore

00:25:56,710 --> 00:26:00,970
the comments maybe maybe be a bit better

00:25:59,350 --> 00:26:03,900
for a compatibility when you're doing a

00:26:00,970 --> 00:26:07,450
lot of change especially in early Ross

00:26:03,900 --> 00:26:08,710
Ross messages and I think the tools can

00:26:07,450 --> 00:26:10,450
always be improved new artists are key

00:26:08,710 --> 00:26:12,010
to you I guess there's a list of stuff

00:26:10,450 --> 00:26:13,450
that could be done what we had in our

00:26:12,010 --> 00:26:16,059
old framework was a labeling framework

00:26:13,450 --> 00:26:17,650
so of course to evaluate data to get

00:26:16,059 --> 00:26:19,480
your true positive false positive rate

00:26:17,650 --> 00:26:21,429
kind of stuff you need to do some kind

00:26:19,480 --> 00:26:24,100
of manual labeling you have some kind of

00:26:21,429 --> 00:26:26,470
tools where you can label objects tell

00:26:24,100 --> 00:26:29,049
them what type they are to do your

00:26:26,470 --> 00:26:30,490
evaluation so that's one thing we might

00:26:29,049 --> 00:26:32,590
be looking into is kind of trying to do

00:26:30,490 --> 00:26:35,320
like this labeling framework in order to

00:26:32,590 --> 00:26:36,900
generate ground truth data for for

00:26:35,320 --> 00:26:39,490
evaluation purposes

00:26:36,900 --> 00:26:41,080
some kind of GUI de to do to do do node

00:26:39,490 --> 00:26:44,110
management would be cool node manager

00:26:41,080 --> 00:26:46,659
from FBI eat that's it's in that

00:26:44,110 --> 00:26:47,860
direction we haven't really some of our

00:26:46,659 --> 00:26:49,539
colleagues have tinkered around with it

00:26:47,860 --> 00:26:50,980
I'll have to take a closer look at it as

00:26:49,539 --> 00:26:53,830
well to see if that's already maybe to

00:26:50,980 --> 00:26:55,419
salute the solution and right now we're

00:26:53,830 --> 00:26:56,919
like a crazy hodgepodge of launch files

00:26:55,419 --> 00:26:59,350
and so we have several cars now running

00:26:56,919 --> 00:27:01,030
Ross and all the cars have slightly

00:26:59,350 --> 00:27:02,400
different configurations then you have

00:27:01,030 --> 00:27:05,559
to combine the launch files correctly

00:27:02,400 --> 00:27:07,840
it'd be the instrument is to see if

00:27:05,559 --> 00:27:10,720
there's a better method of having a

00:27:07,840 --> 00:27:13,360
better intern robotic configuration

00:27:10,720 --> 00:27:16,210
system maybe it's possible maybe not but

00:27:13,360 --> 00:27:18,789
one of the big things which which

00:27:16,210 --> 00:27:21,640
probably will make it difficult for

00:27:18,789 --> 00:27:22,720
Rasta to kind of get closer to our

00:27:21,640 --> 00:27:24,610
product at least in the automobile

00:27:22,720 --> 00:27:26,620
industries

00:27:24,610 --> 00:27:30,820
this that compliance to industry

00:27:26,620 --> 00:27:35,160
standards to verification processes ISO

00:27:30,820 --> 00:27:37,360
Altos are for example is a software a

00:27:35,160 --> 00:27:40,320
specification for how software should be

00:27:37,360 --> 00:27:42,700
developed in the automobile industry and

00:27:40,320 --> 00:27:44,290
at some point the closer you get to

00:27:42,700 --> 00:27:45,790
actual software that goes into series

00:27:44,290 --> 00:27:47,830
production you need to start becoming

00:27:45,790 --> 00:27:50,440
compliant to all of these standards in

00:27:47,830 --> 00:27:53,049
order to make this software usable in a

00:27:50,440 --> 00:27:53,980
real product so be interesting to hear

00:27:53,049 --> 00:27:55,809
if there are also other companies

00:27:53,980 --> 00:27:58,600
especially car companies using Ross and

00:27:55,809 --> 00:28:00,400
if this is also a concern or if Ross

00:27:58,600 --> 00:28:02,169
there any plans to with Ross industrial

00:28:00,400 --> 00:28:04,690
for example there may be doing something

00:28:02,169 --> 00:28:07,179
in that direction but in a different

00:28:04,690 --> 00:28:09,669
industry but maybe what they're doing it

00:28:07,179 --> 00:28:11,320
could be something that never could

00:28:09,669 --> 00:28:13,480
learn from as well but that's actually

00:28:11,320 --> 00:28:15,460
it for my presentation ever any

00:28:13,480 --> 00:28:17,500
questions feel free to contact me I hope

00:28:15,460 --> 00:28:19,570
you've enjoyed learning about how we're

00:28:17,500 --> 00:28:20,740
using Ross and we've enjoyed using it so

00:28:19,570 --> 00:28:22,450
I like to take this opportunity again to

00:28:20,740 --> 00:28:24,340
say thank you to everyone who's

00:28:22,450 --> 00:28:26,950
contributed who's done a lot of

00:28:24,340 --> 00:28:30,510
interesting packages that were using and

00:28:26,950 --> 00:28:30,510

YouTube URL: https://www.youtube.com/watch?v=z9WzHXfYqFI


