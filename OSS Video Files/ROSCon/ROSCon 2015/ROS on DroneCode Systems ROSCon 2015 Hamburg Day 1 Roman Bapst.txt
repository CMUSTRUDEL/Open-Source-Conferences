Title: ROS on DroneCode Systems ROSCon 2015 Hamburg Day 1 Roman Bapst
Publication date: 2015-12-08
Playlist: ROSCon 2015
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2015 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,020 --> 00:00:07,049
yeah hi everybody welcome to my talk my

00:00:04,589 --> 00:00:09,450
name is Roman bobst and I'm working as

00:00:07,049 --> 00:00:11,780
an employee at the computer vision and

00:00:09,450 --> 00:00:14,790
graphics faculty at ETH in Zurich and

00:00:11,780 --> 00:00:18,600
during my work I'm actively contributing

00:00:14,790 --> 00:00:21,960
to the px4 autopilot platform which I

00:00:18,600 --> 00:00:23,640
will introduce in a bit I want to

00:00:21,960 --> 00:00:25,650
apologize Lawrence Meyer couldn't make

00:00:23,640 --> 00:00:27,960
it to this presentation here but I'll do

00:00:25,650 --> 00:00:30,420
my best to make this a smooth experience

00:00:27,960 --> 00:00:32,820
for you so today I'm going to be talking

00:00:30,420 --> 00:00:34,620
about Ross on drone code systems

00:00:32,820 --> 00:00:35,880
actually that's not quite right I'm just

00:00:34,620 --> 00:00:40,290
going to be talking about one specific

00:00:35,880 --> 00:00:41,760
drone code system so to give you an

00:00:40,290 --> 00:00:43,440
overview of what I'm be what I'm going

00:00:41,760 --> 00:00:46,140
to be talking about today I'm going to

00:00:43,440 --> 00:00:48,629
start by introducing you to the PX for

00:00:46,140 --> 00:00:51,270
auto pilot project for those of you who

00:00:48,629 --> 00:00:53,460
are not yet familiar with it then I'm

00:00:51,270 --> 00:00:55,620
going to show you how you can use px4

00:00:53,460 --> 00:00:58,980
together with Ross and why that makes

00:00:55,620 --> 00:01:00,840
sense after that i'm showing you a

00:00:58,980 --> 00:01:02,160
specific case study in which i'm going

00:01:00,840 --> 00:01:04,470
to present you a company that is

00:01:02,160 --> 00:01:06,240
actively using px4 together with ross

00:01:04,470 --> 00:01:09,900
for their software in the loop

00:01:06,240 --> 00:01:11,580
simulation and finally i'm going to tell

00:01:09,900 --> 00:01:15,170
you what's going to come next or what we

00:01:11,580 --> 00:01:18,390
are excited to do in the next few months

00:01:15,170 --> 00:01:19,890
so to make sure you guys do not sleep

00:01:18,390 --> 00:01:23,220
during the talk i'm going to start by

00:01:19,890 --> 00:01:26,780
showing a small video showing you the

00:01:23,220 --> 00:01:26,780
main capabilities of the project

00:03:06,540 --> 00:03:13,980
yep so that kind of summarized our

00:03:10,379 --> 00:03:16,530
activities in the last few years so the

00:03:13,980 --> 00:03:19,560
px4 auto pilot project is an open source

00:03:16,530 --> 00:03:23,010
open hardware auto pilot project mainly

00:03:19,560 --> 00:03:26,609
written in C++ it was founded and

00:03:23,010 --> 00:03:30,269
maintained back in 2009 by Lawrence

00:03:26,609 --> 00:03:31,650
Meyer as a master students project its

00:03:30,269 --> 00:03:34,889
main goal at the beginning was to

00:03:31,650 --> 00:03:38,519
provide a research platform for

00:03:34,889 --> 00:03:41,459
researches and until until now it has

00:03:38,519 --> 00:03:44,370
evolved to be one of the most deployed

00:03:41,459 --> 00:03:48,450
open source auto pilot projects both in

00:03:44,370 --> 00:03:49,919
research and non research projects as

00:03:48,450 --> 00:03:53,689
the title of this presentation already

00:03:49,919 --> 00:03:56,400
suggests it's also one of the projects

00:03:53,689 --> 00:03:59,579
supported by the Linux Foundation drone

00:03:56,400 --> 00:04:02,340
code effort as you have seen from the

00:03:59,579 --> 00:04:05,609
video it supports three main types of

00:04:02,340 --> 00:04:09,000
vehicles namely multirotors fixed-wing

00:04:05,609 --> 00:04:13,620
planes and vertical take-off a vertical

00:04:09,000 --> 00:04:15,720
takeoff and landing airframes so on the

00:04:13,620 --> 00:04:17,760
right side at the bottom you can see

00:04:15,720 --> 00:04:20,849
probably the hardware on which the

00:04:17,760 --> 00:04:22,880
autopilot is mostly deployed that's a

00:04:20,849 --> 00:04:25,919
depicts off the so-called pics hawk

00:04:22,880 --> 00:04:31,110
manufactured by 3dr and this together

00:04:25,919 --> 00:04:33,389
with the GPS embodies all the necessary

00:04:31,110 --> 00:04:35,789
center infrastructure hardware

00:04:33,389 --> 00:04:39,930
infrastructure to make a drone airborne

00:04:35,789 --> 00:04:42,389
and fully autonomous so in order to

00:04:39,930 --> 00:04:44,669
connect the link to Ross I'm going to go

00:04:42,389 --> 00:04:47,280
a bit more into detail about px4

00:04:44,669 --> 00:04:49,260
software architecture when I started

00:04:47,280 --> 00:04:51,139
working on the project about one and a

00:04:49,260 --> 00:04:53,370
half years ago the one thing that

00:04:51,139 --> 00:04:55,169
fascinated me the most or that I liked

00:04:53,370 --> 00:04:57,180
that I liked the most was the fact that

00:04:55,169 --> 00:04:59,699
everything was built up in a in a

00:04:57,180 --> 00:05:01,889
modular design so in this figure you can

00:04:59,699 --> 00:05:04,380
see that you have modules like flight

00:05:01,889 --> 00:05:06,300
control state estimation on the other

00:05:04,380 --> 00:05:08,190
hand you have sensor drivers actuator

00:05:06,300 --> 00:05:09,690
drivers and they are all separated

00:05:08,190 --> 00:05:13,470
clearly from each other in different

00:05:09,690 --> 00:05:15,380
layers and this is what I think is the

00:05:13,470 --> 00:05:18,210
main advantage of the of the project

00:05:15,380 --> 00:05:20,280
because these modules can communicate

00:05:18,210 --> 00:05:22,889
with each other over topics

00:05:20,280 --> 00:05:24,990
similar to Ross they can subscribe to

00:05:22,889 --> 00:05:27,990
topics to read data or they can publish

00:05:24,990 --> 00:05:30,690
on topics to make data available for for

00:05:27,990 --> 00:05:32,280
other topics so if you are for example a

00:05:30,690 --> 00:05:34,290
controls engineer and you don't care

00:05:32,280 --> 00:05:36,300
about the entire project you just want

00:05:34,290 --> 00:05:38,700
to do controls then it's very easy to

00:05:36,300 --> 00:05:41,970
write your own application you just have

00:05:38,700 --> 00:05:44,070
to learn about the simple mechanism of

00:05:41,970 --> 00:05:46,590
how to handle data and then you can very

00:05:44,070 --> 00:05:49,500
easily integrate your own modules into

00:05:46,590 --> 00:05:52,440
the px4 flight stack so it's very easy

00:05:49,500 --> 00:05:55,260
to write new applications even for for

00:05:52,440 --> 00:05:57,570
beginners and this is actually where

00:05:55,260 --> 00:05:59,790
it's very similar to Ross these guess p

00:05:57,570 --> 00:06:01,910
PX for modules actually remind of ra's

00:05:59,790 --> 00:06:04,530
notes which also use this

00:06:01,910 --> 00:06:06,330
publish-subscribe messaging pattern in

00:06:04,530 --> 00:06:09,990
order to communicate with each other so

00:06:06,330 --> 00:06:12,540
it was natural for us to port certain

00:06:09,990 --> 00:06:16,260
core px4 modules to run in a Ross

00:06:12,540 --> 00:06:17,910
environment as Ra's nodes we use the

00:06:16,260 --> 00:06:20,310
wrapper functions to about code

00:06:17,910 --> 00:06:22,830
duplication so eventually we would we

00:06:20,310 --> 00:06:27,810
would be able to compile our modules for

00:06:22,830 --> 00:06:30,180
either Ross or for native px4 the

00:06:27,810 --> 00:06:32,910
advantage of having pigs for modules run

00:06:30,180 --> 00:06:35,460
as Ra's nodes is that we can benefit

00:06:32,910 --> 00:06:38,039
from all the available Ross packages

00:06:35,460 --> 00:06:42,169
that's extremely helpful if you plan to

00:06:38,039 --> 00:06:44,640
do a vision based navigation or control

00:06:42,169 --> 00:06:46,190
but we don't know we do not have a new

00:06:44,640 --> 00:06:50,340
ross codebase we still have it

00:06:46,190 --> 00:06:52,890
everything in one single code pace on

00:06:50,340 --> 00:06:55,140
the left side you can see an example of

00:06:52,890 --> 00:06:57,330
how you could deploy clicks for with

00:06:55,140 --> 00:06:59,250
Ross on the left side you have the

00:06:57,330 --> 00:07:01,500
deeply embedded controller which could

00:06:59,250 --> 00:07:05,070
be the pics hoc running the time

00:07:01,500 --> 00:07:06,810
critical flight control stuff and on the

00:07:05,070 --> 00:07:08,669
right side you have a Linux companion

00:07:06,810 --> 00:07:11,340
computer which could be a no droid or

00:07:08,669 --> 00:07:15,600
raspberry pi for example and there you

00:07:11,340 --> 00:07:18,150
you would be able to run px4 apps as

00:07:15,600 --> 00:07:21,030
ross notes and making use of things like

00:07:18,150 --> 00:07:23,460
slam or obstacle avoidance and a good

00:07:21,030 --> 00:07:25,950
thing is that you always have a backup

00:07:23,460 --> 00:07:27,930
so even if this system here crashes this

00:07:25,950 --> 00:07:31,340
one would still be able to to fly your

00:07:27,930 --> 00:07:31,340
drone home maybe

00:07:36,080 --> 00:07:40,740
so that was just one application another

00:07:38,940 --> 00:07:44,250
possible application that we made use of

00:07:40,740 --> 00:07:48,090
was our software in the loop simulator

00:07:44,250 --> 00:07:50,520
with Ross so having ported dÃ©cor px4

00:07:48,090 --> 00:07:53,610
modules into a rose environment made us

00:07:50,520 --> 00:07:56,700
or gave us the ability to to simulate

00:07:53,610 --> 00:08:02,040
part of our system in a in a Ross

00:07:56,700 --> 00:08:04,050
environment let me just briefly explain

00:08:02,040 --> 00:08:08,510
to you the most important components of

00:08:04,050 --> 00:08:11,070
the simulation there's a there's a

00:08:08,510 --> 00:08:15,810
simulating code base called rotor s

00:08:11,070 --> 00:08:18,600
which was which was started by the

00:08:15,810 --> 00:08:21,000
autonomous system lab in Zurich and this

00:08:18,600 --> 00:08:23,700
code base offers the most common

00:08:21,000 --> 00:08:25,710
multiple of multi rotor models and also

00:08:23,700 --> 00:08:28,410
simulated sensors such as an IM you on

00:08:25,710 --> 00:08:31,650
or an odometer sensor or VI center and

00:08:28,410 --> 00:08:33,479
then we have gazebo as our physics

00:08:31,650 --> 00:08:35,820
engine and graphics render which

00:08:33,479 --> 00:08:38,099
probably most of you also know this can

00:08:35,820 --> 00:08:41,099
be interfaced directly to Ross using the

00:08:38,099 --> 00:08:43,110
available wrappers and the gazebo

00:08:41,099 --> 00:08:44,640
plugins allow a very convenient method

00:08:43,110 --> 00:08:48,060
to interact with your model and to

00:08:44,640 --> 00:08:50,880
extend it so I'm going to give you an

00:08:48,060 --> 00:08:53,010
example now of who could use this system

00:08:50,880 --> 00:08:55,710
I'm going to introduce you to a company

00:08:53,010 --> 00:08:59,100
called wing trap wing Troy is a startup

00:08:55,710 --> 00:09:01,440
company with roots to ETH Zurich they

00:08:59,100 --> 00:09:03,420
are their goal is to combine the

00:09:01,440 --> 00:09:05,700
strengths of those multirotors and fixed

00:09:03,420 --> 00:09:08,400
wings into a new design which you see

00:09:05,700 --> 00:09:11,490
here so they developed a tail sitter

00:09:08,400 --> 00:09:13,710
model which is able to hover do precise

00:09:11,490 --> 00:09:15,900
landings but still fly very efficiently

00:09:13,710 --> 00:09:19,080
as a fixed wing and can be used for many

00:09:15,900 --> 00:09:20,940
applications they are actually using our

00:09:19,080 --> 00:09:23,430
software in the loop environment with

00:09:20,940 --> 00:09:25,440
Ross very successfully for prototyping

00:09:23,430 --> 00:09:28,110
their controllers so generally they are

00:09:25,440 --> 00:09:31,260
always prototyping their algorithms

00:09:28,110 --> 00:09:33,270
testing it in this sital environment and

00:09:31,260 --> 00:09:36,030
then they do that flight test and they

00:09:33,270 --> 00:09:39,030
also plan to use Ross for vision based

00:09:36,030 --> 00:09:41,400
navigation and control in the future so

00:09:39,030 --> 00:09:43,080
i'm going to show you two videos now one

00:09:41,400 --> 00:09:44,380
of them showing the simulation of this

00:09:43,080 --> 00:09:46,540
tale sitter doing

00:09:44,380 --> 00:09:48,850
transition from hover to forward flight

00:09:46,540 --> 00:09:50,740
and after that i'm going to show you the

00:09:48,850 --> 00:09:53,160
result the out the results that they

00:09:50,740 --> 00:09:53,160
obtained

00:10:17,870 --> 00:10:25,279
and the corresponding outdoor video

00:10:21,600 --> 00:10:25,279
would be this one here

00:10:43,830 --> 00:10:51,580
okay to finalize my presentation I would

00:10:49,420 --> 00:10:53,920
like to give some words on what's to

00:10:51,580 --> 00:10:56,410
come next what you can expect as you

00:10:53,920 --> 00:10:58,959
probably all know Qualcomm has announced

00:10:56,410 --> 00:11:03,520
the release of their Snapdragon fly a

00:10:58,959 --> 00:11:06,220
development platform and obviously it's

00:11:03,520 --> 00:11:08,500
it will be very interesting to have px4

00:11:06,220 --> 00:11:10,540
modules run as Ross notes on this

00:11:08,500 --> 00:11:12,430
platform because it offers all the

00:11:10,540 --> 00:11:14,620
infrastructure that you need to do

00:11:12,430 --> 00:11:17,589
vision-based navigational control or

00:11:14,620 --> 00:11:20,290
marker tracking and it's just great

00:11:17,589 --> 00:11:22,450
because you can just use the variety of

00:11:20,290 --> 00:11:25,750
all the available Ross packages that

00:11:22,450 --> 00:11:32,190
already exist on this fine piece of

00:11:25,750 --> 00:11:32,190
hardware that's it thank you

00:11:52,730 --> 00:11:58,080
maybe i should say at the beginning that

00:11:55,110 --> 00:12:05,630
this simulator is available open source

00:11:58,080 --> 00:12:08,190
on the github first thing and gab

00:12:05,630 --> 00:12:10,110
probably historical reasons i would say

00:12:08,190 --> 00:12:12,060
i mean the autonomous system lap started

00:12:10,110 --> 00:12:14,070
with this thing and it would they just

00:12:12,060 --> 00:12:15,780
made it so generic and nice to work with

00:12:14,070 --> 00:12:23,270
that there was no reason for us not to

00:12:15,780 --> 00:12:23,270
not to adapt their their system yes

00:12:34,310 --> 00:12:42,480
sorry yeah the question was about the

00:12:39,840 --> 00:12:44,850
interference between between Ross and

00:12:42,480 --> 00:12:47,340
px4 if we still have like the map link

00:12:44,850 --> 00:12:49,710
up running maybe i should say what we

00:12:47,340 --> 00:12:54,060
did is we just we didn't poured the

00:12:49,710 --> 00:12:55,920
entire px4 system to ross we just ported

00:12:54,060 --> 00:12:58,200
those system that are interesting to us

00:12:55,920 --> 00:12:59,880
for example for doing the software in a

00:12:58,200 --> 00:13:02,040
loop simulation we ported the

00:12:59,880 --> 00:13:04,980
controllers but we do not actually have

00:13:02,040 --> 00:13:07,770
a map link app ported for that for

00:13:04,980 --> 00:13:10,620
example we you we use Mavros to

00:13:07,770 --> 00:13:14,840
communicate between for example the

00:13:10,620 --> 00:13:14,840
companion computer and our pigs hawk

00:13:33,120 --> 00:13:47,910
I'm sorry I do not get too close well

00:13:45,450 --> 00:13:51,480
the wrapping approach just enables you

00:13:47,910 --> 00:13:54,390
to have modules run native px4 but at

00:13:51,480 --> 00:13:56,010
the same time also be available for to

00:13:54,390 --> 00:13:57,810
run into ross environment if you have

00:13:56,010 --> 00:13:59,760
that separate then you're going to have

00:13:57,810 --> 00:14:01,620
code duplication you're not going to be

00:13:59,760 --> 00:14:03,510
able to compare the system really nice

00:14:01,620 --> 00:14:05,550
and it's much better to have to have

00:14:03,510 --> 00:14:08,910
just one module which is either compiled

00:14:05,550 --> 00:14:15,900
for us or for an ATP x4 so that's that's

00:14:08,910 --> 00:14:17,279
the advantage we have in that and it

00:14:15,900 --> 00:14:20,760
also gives you this opportunity of

00:14:17,279 --> 00:14:23,400
swapping the execution like you can have

00:14:20,760 --> 00:14:25,500
it run on the on the pic sock on the on

00:14:23,400 --> 00:14:27,930
the other hardware or you can have it

00:14:25,500 --> 00:14:30,980
run on on a Linux computer so you're

00:14:27,930 --> 00:14:30,980

YouTube URL: https://www.youtube.com/watch?v=_oOlQMTQGSc


