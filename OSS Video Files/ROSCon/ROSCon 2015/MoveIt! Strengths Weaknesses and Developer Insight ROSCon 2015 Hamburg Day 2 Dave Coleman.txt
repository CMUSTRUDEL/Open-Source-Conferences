Title: MoveIt! Strengths Weaknesses and Developer Insight ROSCon 2015 Hamburg Day 2 Dave Coleman
Publication date: 2015-12-08
Playlist: ROSCon 2015
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2015 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,000 --> 00:00:03,600
good morning I know it's early for you

00:00:01,949 --> 00:00:05,879
guys it's been a long week so I'm a

00:00:03,600 --> 00:00:07,410
little tired bear with me but I'm really

00:00:05,879 --> 00:00:09,450
excited to be talking about this

00:00:07,410 --> 00:00:11,910
framework that has been going around

00:00:09,450 --> 00:00:13,920
Ross for many years and I've been

00:00:11,910 --> 00:00:15,570
playing with many years so overview what

00:00:13,920 --> 00:00:17,400
I want to talk about is kind of the

00:00:15,570 --> 00:00:20,369
highs and lows the good in the bad move

00:00:17,400 --> 00:00:21,930
it and also kind of some pro tips that

00:00:20,369 --> 00:00:23,160
I've gained over the years of working

00:00:21,930 --> 00:00:24,510
with us over and over again that I want

00:00:23,160 --> 00:00:26,640
to share with you to help you if you're

00:00:24,510 --> 00:00:30,570
interested in controlling robot arms

00:00:26,640 --> 00:00:36,809
yourself and so that's my timeline there

00:00:30,570 --> 00:00:39,870
and so I'm Dave Coleman and why am I

00:00:36,809 --> 00:00:41,790
talking to you about this I am a PhD

00:00:39,870 --> 00:00:43,500
student at Nicholas Carell at university

00:00:41,790 --> 00:00:46,230
colorado boulder and i started working

00:00:43,500 --> 00:00:47,820
on move it with Eagle Jones and young

00:00:46,230 --> 00:00:48,960
sukin at Willow Garage but first was

00:00:47,820 --> 00:00:51,930
being written so before it was released

00:00:48,960 --> 00:00:53,460
and I made the setup assistant along

00:00:51,930 --> 00:00:55,320
with many other pieces of it I've worked

00:00:53,460 --> 00:00:56,879
on so I've been a long time maintainer

00:00:55,320 --> 00:00:58,559
of it as well as many other Ross

00:00:56,879 --> 00:01:02,730
packages and I've contributed to om PL

00:00:58,559 --> 00:01:04,439
and so forth as well so a background of

00:01:02,730 --> 00:01:06,060
what move it is so arisen hand how many

00:01:04,439 --> 00:01:07,560
people here no more than a sentence

00:01:06,060 --> 00:01:11,250
about what move it is like you've used

00:01:07,560 --> 00:01:13,049
it or you've struggled with it or you've

00:01:11,250 --> 00:01:15,840
benefited awesome okay just getting to

00:01:13,049 --> 00:01:17,430
know the audience so it's a framework

00:01:15,840 --> 00:01:18,780
for motion planning which means it's

00:01:17,430 --> 00:01:22,080
doing path planning so in collision

00:01:18,780 --> 00:01:24,600
checking manipulation it's having to

00:01:22,080 --> 00:01:26,640
deal with perception input and the

00:01:24,600 --> 00:01:28,320
kinematics control there so you see this

00:01:26,640 --> 00:01:30,299
video here is showing an old demo of

00:01:28,320 --> 00:01:31,890
move it when I was first being released

00:01:30,299 --> 00:01:34,009
of its capabilities could do a lot more

00:01:31,890 --> 00:01:38,009
than this but it's it's pretty powerful

00:01:34,009 --> 00:01:39,420
so credit to give credit yo and sukin

00:01:38,009 --> 00:01:41,909
and Sasha and cheetah led this project

00:01:39,420 --> 00:01:43,409
up at Willow Garage and wrote it along

00:01:41,909 --> 00:01:44,850
with many others it's been a big

00:01:43,409 --> 00:01:48,090
collaboration with a lot of universities

00:01:44,850 --> 00:01:50,549
and companies so that's been really cool

00:01:48,090 --> 00:01:52,290
to see these different libraries of

00:01:50,549 --> 00:01:55,409
robotics research being brought together

00:01:52,290 --> 00:01:57,689
in this one framework before this there

00:01:55,409 --> 00:02:01,729
was armed navigation and this was kind

00:01:57,689 --> 00:02:05,549
of a rewrite of that initial Ross stack

00:02:01,729 --> 00:02:07,530
that would came out in March 2010 and so

00:02:05,549 --> 00:02:09,690
I looked up and github there's been 31

00:02:07,530 --> 00:02:11,490
contributors to move at core alone but

00:02:09,690 --> 00:02:12,750
as I'll talk about later move it's

00:02:11,490 --> 00:02:14,490
consistent made from repos so there's

00:02:12,750 --> 00:02:18,060
been many many contributors across the

00:02:14,490 --> 00:02:20,550
all the repos it's currently in C++ and

00:02:18,060 --> 00:02:21,990
Python could expand it there's been you

00:02:20,550 --> 00:02:25,290
know matlab bindings and such but

00:02:21,990 --> 00:02:33,570
primarily c++ and it's all under this

00:02:25,290 --> 00:02:35,370
group ross planning so one exciting

00:02:33,570 --> 00:02:37,320
development was last month we had our

00:02:35,370 --> 00:02:40,230
first muvek community meeting and the

00:02:37,320 --> 00:02:41,880
results were astounding sacha inchi did

00:02:40,230 --> 00:02:44,910
a great job of leading that up we had

00:02:41,880 --> 00:02:46,290
over 240 people registered and 152

00:02:44,910 --> 00:02:48,090
actually attended them anymore we've

00:02:46,290 --> 00:02:49,710
watched on youtube since and so I think

00:02:48,090 --> 00:02:52,110
that's just really amazing to talk to

00:02:49,710 --> 00:02:54,540
the popularity of this this software is

00:02:52,110 --> 00:02:56,970
that we could have a online meeting that

00:02:54,540 --> 00:02:59,730
that big a bunch of speakers of that

00:02:56,970 --> 00:03:01,380
event I'm overall according to I think

00:02:59,730 --> 00:03:04,350
last year's Ross survey was number three

00:03:01,380 --> 00:03:06,840
package in terms of popularity 700

00:03:04,350 --> 00:03:09,690
members on our Google Mail English right

00:03:06,840 --> 00:03:11,970
now and ten thousand installs this year

00:03:09,690 --> 00:03:15,840
living papers in accra five papers and I

00:03:11,970 --> 00:03:18,630
Ross this year and the other common over

00:03:15,840 --> 00:03:20,459
65 robot types worldwide and so many of

00:03:18,630 --> 00:03:22,110
those robots each so it's being used

00:03:20,459 --> 00:03:24,120
everywhere so this is something that you

00:03:22,110 --> 00:03:25,320
should pay attention to and like if

00:03:24,120 --> 00:03:28,080
you're interested in manipulation this

00:03:25,320 --> 00:03:30,030
is a good option for you a few metrics i

00:03:28,080 --> 00:03:31,590
put together on the community there's

00:03:30,030 --> 00:03:33,989
been a continuous increase in the mail

00:03:31,590 --> 00:03:35,850
english membership code contributions

00:03:33,989 --> 00:03:39,209
particularly this bottom right you can

00:03:35,850 --> 00:03:40,920
see contributions to OMP lan open rave

00:03:39,209 --> 00:03:42,540
and then move it just kind of starting

00:03:40,920 --> 00:03:44,040
late but skyrocketing so it's done a

00:03:42,540 --> 00:03:46,140
really good job of getting general

00:03:44,040 --> 00:03:47,550
acceptance across the robotics community

00:03:46,140 --> 00:03:49,560
of people who are doing motion planning

00:03:47,550 --> 00:03:52,290
and the different pieces that involved

00:03:49,560 --> 00:03:55,830
in that and the very top you see some

00:03:52,290 --> 00:03:57,450
stats on the types of people using it so

00:03:55,830 --> 00:03:58,800
forty-four percent graduate suits would

00:03:57,450 --> 00:04:05,130
be the biggest portion but you can see

00:03:58,800 --> 00:04:06,500
more there so recent news is that just

00:04:05,130 --> 00:04:08,430
you know things are still happening

00:04:06,500 --> 00:04:10,140
benchmarking is getting rewritten which

00:04:08,430 --> 00:04:11,760
is terribly overdue so I'm excited that

00:04:10,140 --> 00:04:14,100
mark mole and rocky level working in

00:04:11,760 --> 00:04:15,730
that Tom's been revised which is a

00:04:14,100 --> 00:04:18,519
motion planning method

00:04:15,730 --> 00:04:19,930
and the scarf days is a new Cartesian

00:04:18,519 --> 00:04:21,970
based planner that it's going to offer

00:04:19,930 --> 00:04:24,010
some functionality that move it isn't as

00:04:21,970 --> 00:04:25,389
strong in right now although integration

00:04:24,010 --> 00:04:27,100
isn't complete with move it but it's

00:04:25,389 --> 00:04:30,970
it's a complementary piece of it and

00:04:27,100 --> 00:04:32,320
then fetch is working on making plug-ins

00:04:30,970 --> 00:04:34,900
for collision checking so we can try

00:04:32,320 --> 00:04:37,210
different collision checkers and yeah

00:04:34,900 --> 00:04:40,360
Mike's ticking over maintenance of the

00:04:37,210 --> 00:04:41,440
releases so that's great so I've already

00:04:40,360 --> 00:04:43,419
talked about what it's done well but I'm

00:04:41,440 --> 00:04:45,010
talk about more what it's done well but

00:04:43,419 --> 00:04:47,050
the best part of move it in terms of

00:04:45,010 --> 00:04:50,320
getting acceptance has been the setup

00:04:47,050 --> 00:04:52,180
assistant and well maybe that's to fool

00:04:50,320 --> 00:04:54,250
myself to say that because I was akin to

00:04:52,180 --> 00:04:56,380
that the writer of that but if you get

00:04:54,250 --> 00:04:57,850
nothing out of this talk if I except for

00:04:56,380 --> 00:04:59,620
this if you want to use move it you can

00:04:57,850 --> 00:05:01,360
quickly get some basic functionality

00:04:59,620 --> 00:05:04,000
just by launching this this wizard

00:05:01,360 --> 00:05:05,650
essentially and take sure you are DF you

00:05:04,000 --> 00:05:08,289
know the standard thing in Ross and it

00:05:05,650 --> 00:05:10,180
allow you to define semantics and

00:05:08,289 --> 00:05:12,130
settings and configurations so you can

00:05:10,180 --> 00:05:14,800
quickly get a move it running with a

00:05:12,130 --> 00:05:17,080
quick start demo and so this has been a

00:05:14,800 --> 00:05:18,880
big reason why it's it's increased

00:05:17,080 --> 00:05:22,090
receipts of a very popular feature in

00:05:18,880 --> 00:05:23,710
this survey we took and it has some some

00:05:22,090 --> 00:05:26,260
cool features in there other things that

00:05:23,710 --> 00:05:28,539
have made it very accepted in the

00:05:26,260 --> 00:05:30,070
community is it's just it's GUI tools so

00:05:28,539 --> 00:05:31,690
if you're if you're new to motion

00:05:30,070 --> 00:05:34,990
planning and you want to get deeper into

00:05:31,690 --> 00:05:37,870
it this is a quick way to get basics

00:05:34,990 --> 00:05:39,130
start goal state planning so we have

00:05:37,870 --> 00:05:41,740
these interactive markers and Martin

00:05:39,130 --> 00:05:43,139
darvas and you can you know hit plan for

00:05:41,740 --> 00:05:46,180
different planners and see which one's

00:05:43,139 --> 00:05:48,160
how they result in terms of how smoother

00:05:46,180 --> 00:05:50,110
path is or how long it takes to plan you

00:05:48,160 --> 00:05:51,550
can compare libraries so really powerful

00:05:50,110 --> 00:05:54,250
functionality and we achieve this using

00:05:51,550 --> 00:05:55,330
just a simple plug-in inside the RV's

00:05:54,250 --> 00:05:57,130
interface so if you're working on other

00:05:55,330 --> 00:05:58,660
packages and Ross I encourage you to

00:05:57,130 --> 00:06:00,789
also make plugins similar to this this

00:05:58,660 --> 00:06:02,710
whole bottom piece here is a move it

00:06:00,789 --> 00:06:08,919
specific plug-in and we have different

00:06:02,710 --> 00:06:12,070
displays as well and and so at the corec

00:06:08,919 --> 00:06:15,520
move it it's a way to compare different

00:06:12,070 --> 00:06:17,710
academic libraries of research and so

00:06:15,520 --> 00:06:19,870
we've had this you know this continuous

00:06:17,710 --> 00:06:21,580
problem of elimination algorithm and

00:06:19,870 --> 00:06:22,930
says oh mines better than this one

00:06:21,580 --> 00:06:24,250
because I benchmarked it but the problem

00:06:22,930 --> 00:06:25,930
is that the person implemented both

00:06:24,250 --> 00:06:27,130
versions will here we can't drink people

00:06:25,930 --> 00:06:28,289
implementing their own algorithms the

00:06:27,130 --> 00:06:29,789
best way they can

00:06:28,289 --> 00:06:31,409
and then you can have a more fair

00:06:29,789 --> 00:06:33,960
comparison I mean there's still problems

00:06:31,409 --> 00:06:35,550
but overall you can compare oh NP 0 vs s

00:06:33,960 --> 00:06:37,080
ppl vs. chompers to stomp they're all

00:06:35,550 --> 00:06:40,649
there are ways of doing motion planning

00:06:37,080 --> 00:06:41,849
from state a two-state be but they have

00:06:40,649 --> 00:06:43,830
very different approaches very different

00:06:41,849 --> 00:06:46,680
schools of thought as well as comparing

00:06:43,830 --> 00:06:49,050
collision checking libraries perception

00:06:46,680 --> 00:06:50,879
and inverse kinematics and was a paper

00:06:49,050 --> 00:06:52,649
published about benchmarking the pieces

00:06:50,879 --> 00:06:55,099
and move it so if you're working on

00:06:52,649 --> 00:06:57,089
research this is a really good way to

00:06:55,099 --> 00:06:59,129
test your code against other people's

00:06:57,089 --> 00:07:01,259
and get some you know tables and results

00:06:59,129 --> 00:07:02,580
in your papers and if you're working in

00:07:01,259 --> 00:07:03,959
industry this is good way to figure out

00:07:02,580 --> 00:07:05,520
which algorithms that exists are best

00:07:03,959 --> 00:07:06,689
for your application because these all

00:07:05,520 --> 00:07:08,520
have different kings weaknesses and

00:07:06,689 --> 00:07:11,430
because this is still you know

00:07:08,520 --> 00:07:13,459
cutting-edge robotics there is no right

00:07:11,430 --> 00:07:15,449
one per se it just it all depends on

00:07:13,459 --> 00:07:18,629
someone how you tune it and somewhat

00:07:15,449 --> 00:07:20,249
what you're trying to do of course is

00:07:18,629 --> 00:07:22,800
tropo diagnostic so I says worked on

00:07:20,249 --> 00:07:24,389
lots of different robots and then a few

00:07:22,800 --> 00:07:27,930
details is like some people complain

00:07:24,389 --> 00:07:30,360
it's complex but the same time that

00:07:27,930 --> 00:07:34,080
gives you so much flexibility so it can

00:07:30,360 --> 00:07:37,110
handle all sorts of kind of esoteric

00:07:34,080 --> 00:07:38,430
things such as well groups of joints are

00:07:37,110 --> 00:07:40,439
necessary so you could say I only want

00:07:38,430 --> 00:07:42,539
to plan with the arm or the plan my leg

00:07:40,439 --> 00:07:44,759
or I'm gonna plant them like my torso

00:07:42,539 --> 00:07:46,379
and arm so could do things like that but

00:07:44,759 --> 00:07:48,870
it also handle multivariable joints

00:07:46,379 --> 00:07:50,490
would be which could be a shoulder joint

00:07:48,870 --> 00:07:53,909
those two degrees of freedom in one

00:07:50,490 --> 00:07:56,099
joint or it could be your pose so if you

00:07:53,909 --> 00:07:58,169
have a six degree freedom pose what this

00:07:56,099 --> 00:08:00,659
allows you to do things like this top

00:07:58,169 --> 00:08:02,249
picture is actually a quadcopter that

00:08:00,659 --> 00:08:03,659
someone's got no work and move it which

00:08:02,249 --> 00:08:05,430
just blows my mind that people are using

00:08:03,659 --> 00:08:06,719
it for that kind of application but go

00:08:05,430 --> 00:08:07,740
for it there's a lot of good good

00:08:06,719 --> 00:08:09,749
features that would help you there and

00:08:07,740 --> 00:08:11,069
the bottom picture is underwater robots

00:08:09,749 --> 00:08:13,169
I guess it's hard to see these pictures

00:08:11,069 --> 00:08:15,509
but manipulation under water for the

00:08:13,169 --> 00:08:17,459
floating robot and these other notions

00:08:15,509 --> 00:08:19,319
allow you to do that mimic joints and

00:08:17,459 --> 00:08:21,240
and things like constraints so

00:08:19,319 --> 00:08:22,709
orientation constraints would be you can

00:08:21,240 --> 00:08:25,019
tell move it to always keep your hand

00:08:22,709 --> 00:08:27,050
with invisible of your sensors so maybe

00:08:25,019 --> 00:08:28,709
provisional serving applications or

00:08:27,050 --> 00:08:33,240
orientation constraints would be like

00:08:28,709 --> 00:08:35,579
don't spill your glass of water so

00:08:33,240 --> 00:08:37,709
typical use patterns this is something

00:08:35,579 --> 00:08:39,240
that I just wanted to express to the

00:08:37,709 --> 00:08:41,050
community to move it is it's more than

00:08:39,240 --> 00:08:44,620
just the artist plugin I talked about

00:08:41,050 --> 00:08:46,300
recently a common problem I see is when

00:08:44,620 --> 00:08:47,440
you're first getting started you use a

00:08:46,300 --> 00:08:48,880
setup assistant and you get all these

00:08:47,440 --> 00:08:50,019
beautiful launch files created for you

00:08:48,880 --> 00:08:52,209
and you launch it you have this

00:08:50,019 --> 00:08:54,700
interactive viewing like yes I can do

00:08:52,209 --> 00:08:56,950
motion planning and then right

00:08:54,700 --> 00:08:59,410
afterwards there's like quick cliff of

00:08:56,950 --> 00:09:01,810
like now what do i do like no one no one

00:08:59,410 --> 00:09:03,100
understands the next step and so I'm

00:09:01,810 --> 00:09:04,480
gonna try to explain some that so like I

00:09:03,100 --> 00:09:06,070
mentioned there's the artist motion

00:09:04,480 --> 00:09:07,860
planning plugin here's a different robot

00:09:06,070 --> 00:09:10,899
because it's you know any robot you want

00:09:07,860 --> 00:09:12,730
but beyond that there's really going to

00:09:10,899 --> 00:09:15,790
order from the most high level to the

00:09:12,730 --> 00:09:18,279
most low level so this is a a tool that

00:09:15,790 --> 00:09:20,019
is like a scripting interface it's been

00:09:18,279 --> 00:09:23,079
done in lots of different environments I

00:09:20,019 --> 00:09:23,980
know things like pie ride or Ross Python

00:09:23,079 --> 00:09:25,120
you can kind of get similar

00:09:23,980 --> 00:09:26,410
functionality but this is a movie

00:09:25,120 --> 00:09:29,110
specific one where you could say a

00:09:26,410 --> 00:09:30,850
equals current joint state and then plan

00:09:29,110 --> 00:09:33,519
to random and then move to be and it's

00:09:30,850 --> 00:09:36,760
just a quick way to test if your robots

00:09:33,519 --> 00:09:38,470
working and thought I'd mentioned and

00:09:36,760 --> 00:09:41,350
then going down the stack there's a

00:09:38,470 --> 00:09:45,190
Python interface which we have in this

00:09:41,350 --> 00:09:46,720
notion of a separate node in in the Ross

00:09:45,190 --> 00:09:48,370
world that doesn't the motion planning

00:09:46,720 --> 00:09:52,060
for move it and then you have your own

00:09:48,370 --> 00:09:53,770
node say a Python script file where you

00:09:52,060 --> 00:09:55,600
can talk to it over Ross messages and

00:09:53,770 --> 00:09:57,399
actions and services and so this is

00:09:55,600 --> 00:09:59,560
exposed to sit for Python and so here's

00:09:57,399 --> 00:10:03,010
a simple demo of taking your left arm

00:09:59,560 --> 00:10:05,800
and setting a Cartesian goal for it so I

00:10:03,010 --> 00:10:08,140
want to be at this position in the world

00:10:05,800 --> 00:10:10,390
and then the very end just dot plan and

00:10:08,140 --> 00:10:11,709
so there's a left out some details of

00:10:10,390 --> 00:10:13,870
course the overall you can get some

00:10:11,709 --> 00:10:14,890
pretty powerful functionality with very

00:10:13,870 --> 00:10:17,020
few lines of code with these these

00:10:14,890 --> 00:10:18,520
high-level abstractions but these

00:10:17,020 --> 00:10:20,320
high-level abstractions come into costs

00:10:18,520 --> 00:10:22,690
which I'm going to get to which is

00:10:20,320 --> 00:10:24,760
basically that if something is not

00:10:22,690 --> 00:10:26,500
working which is you know it's open

00:10:24,760 --> 00:10:28,990
source that can happen or you want to

00:10:26,500 --> 00:10:31,949
add features to it it's it gets harder

00:10:28,990 --> 00:10:34,089
to go through all the layers and so

00:10:31,949 --> 00:10:36,880
personally I like to work a little bit

00:10:34,089 --> 00:10:38,800
lower this isn't lower this is just a

00:10:36,880 --> 00:10:41,050
C++ version over I just shows you but

00:10:38,800 --> 00:10:45,760
same code in C++ pretty straightforward

00:10:41,050 --> 00:10:47,380
and then underneath those 2i they're

00:10:45,760 --> 00:10:50,110
called move group interfaces there's

00:10:47,380 --> 00:10:51,550
just a bunch of raw actions and services

00:10:50,110 --> 00:10:53,660
and if you're going to use the service

00:10:51,550 --> 00:10:56,150
is an action is you probably could just

00:10:53,660 --> 00:10:57,770
use the Move group interface but I've

00:10:56,150 --> 00:10:59,780
been shown that they're here this is a

00:10:57,770 --> 00:11:02,240
diagram from the website that shows some

00:10:59,780 --> 00:11:03,560
of the available actions between this

00:11:02,240 --> 00:11:05,180
move group node they're just mentioned

00:11:03,560 --> 00:11:06,860
and whatever user interfaces so this

00:11:05,180 --> 00:11:09,410
could be your arvest plug it could be

00:11:06,860 --> 00:11:12,530
the commander it could be your own high

00:11:09,410 --> 00:11:14,420
level like executor who's deciding ok

00:11:12,530 --> 00:11:16,130
now I'm going to pick this up and move

00:11:14,420 --> 00:11:20,300
it here and then deliver this this bin

00:11:16,130 --> 00:11:21,620
that's kind of the interface here so pro

00:11:20,300 --> 00:11:25,130
tip this is what I'm excited about

00:11:21,620 --> 00:11:26,180
sharing is I personally as like someone

00:11:25,130 --> 00:11:28,040
who's been using movement for many years

00:11:26,180 --> 00:11:29,390
I don't prefer to use all those layers

00:11:28,040 --> 00:11:32,630
if you're new go for it i mean i

00:11:29,390 --> 00:11:33,350
recommend it but if you're for example

00:11:32,630 --> 00:11:35,600
in the bottom here if you're a

00:11:33,350 --> 00:11:37,060
researcher and you want to test kind of

00:11:35,600 --> 00:11:39,110
a new way of doing motion planning

00:11:37,060 --> 00:11:40,880
sometimes you need to be able to just

00:11:39,110 --> 00:11:42,470
really reach in there and like to bug

00:11:40,880 --> 00:11:44,960
the whole stack and so i just use the

00:11:42,470 --> 00:11:46,730
c++ directly and so this is a mess of

00:11:44,960 --> 00:11:48,710
code and i'll expect you to like digest

00:11:46,730 --> 00:11:52,130
it but overall i'm just trying to

00:11:48,710 --> 00:11:54,230
demonstrate that you can load review rdf

00:11:52,130 --> 00:11:55,760
manually using these quick classes and

00:11:54,230 --> 00:11:57,770
then create your planning scene and i'll

00:11:55,760 --> 00:11:58,940
explain what these means later and then

00:11:57,770 --> 00:12:00,050
plena see monitor and then you're

00:11:58,940 --> 00:12:02,360
planning pipeline the very bottom

00:12:00,050 --> 00:12:04,880
there's this tree execution manager so

00:12:02,360 --> 00:12:08,180
you can do your entire planning pipeline

00:12:04,880 --> 00:12:10,400
whole stack all in one main and I guess

00:12:08,180 --> 00:12:12,160
what I'm trying to say here is that you

00:12:10,400 --> 00:12:16,070
can use move it without having tons of

00:12:12,160 --> 00:12:19,310
extracted services and actions and so

00:12:16,070 --> 00:12:21,620
there's pros and cons to this this way

00:12:19,310 --> 00:12:23,570
of developing but particularly like if

00:12:21,620 --> 00:12:25,220
using gdb you can quickly see your back

00:12:23,570 --> 00:12:26,600
trace if there's like a segfault and see

00:12:25,220 --> 00:12:28,220
exactly where it's gone throughout the

00:12:26,600 --> 00:12:30,290
stack as opposed to jumping between all

00:12:28,220 --> 00:12:31,850
these different nodes it's kind of an

00:12:30,290 --> 00:12:33,560
ideology of Ross one thing I'm excited

00:12:31,850 --> 00:12:36,920
about is in Ross to we're going to have

00:12:33,560 --> 00:12:38,540
these these nodes that you can extract

00:12:36,920 --> 00:12:40,430
and connect again we talked to be heard

00:12:38,540 --> 00:12:42,170
about this yesterday where you can have

00:12:40,430 --> 00:12:43,460
a distributed system but maybe when

00:12:42,170 --> 00:12:44,510
you're actually deploying you want to

00:12:43,460 --> 00:12:46,490
have a multi-plate couple with the

00:12:44,510 --> 00:12:48,200
shared memory or the different

00:12:46,490 --> 00:12:51,250
inter-process communication i might be

00:12:48,200 --> 00:12:54,410
saying that stuff wrong but so just

00:12:51,250 --> 00:12:55,940
overall like you this is i recommend if

00:12:54,410 --> 00:13:01,780
you're trying to figure out what's next

00:12:55,940 --> 00:13:04,040
after the high-level GUI demos so I

00:13:01,780 --> 00:13:05,180
reference us earlier but move it can be

00:13:04,040 --> 00:13:06,150
very complex and it can be very

00:13:05,180 --> 00:13:08,730
intimidating for begin

00:13:06,150 --> 00:13:10,200
and also if you're just not familiar to

00:13:08,730 --> 00:13:12,600
move it I just wanted to give you an

00:13:10,200 --> 00:13:15,660
idea of what's inside this black box

00:13:12,600 --> 00:13:19,530
called move it and so at a high level

00:13:15,660 --> 00:13:21,690
these are all the components move it

00:13:19,530 --> 00:13:24,030
doesn't do task planning not yet at

00:13:21,690 --> 00:13:26,670
least so if you're if you're into task

00:13:24,030 --> 00:13:28,080
planning that's going to be this your

00:13:26,670 --> 00:13:30,120
own separate thing or this could be your

00:13:28,080 --> 00:13:31,500
GUI or could this be a human loop

00:13:30,120 --> 00:13:35,250
telly-op so in DARPA Grand Challenge

00:13:31,500 --> 00:13:37,290
they they had partially human loop telly

00:13:35,250 --> 00:13:38,970
operations so they do some things but it

00:13:37,290 --> 00:13:41,340
helped with other pieces of it so

00:13:38,970 --> 00:13:43,020
whatever level of automation you need it

00:13:41,340 --> 00:13:44,670
can kind of adapt to that but move it's

00:13:43,020 --> 00:13:47,250
more focused on the motion planning

00:13:44,670 --> 00:13:49,620
itself between two states are two

00:13:47,250 --> 00:13:51,630
constraints and goals so there's

00:13:49,620 --> 00:13:53,490
interfaces and then on the side over

00:13:51,630 --> 00:13:55,650
here we have benchmarking tools which

00:13:53,490 --> 00:13:57,270
have been kind of rough in the past but

00:13:55,650 --> 00:13:58,170
right now there's pull requests that I'm

00:13:57,270 --> 00:14:00,000
really excited about they're going to

00:13:58,170 --> 00:14:02,490
kind of overhaul that from work the

00:14:00,000 --> 00:14:03,480
curve a key lab lots of configuration

00:14:02,490 --> 00:14:05,580
settings then we use you know

00:14:03,480 --> 00:14:08,400
extensively use Ross params and yamo

00:14:05,580 --> 00:14:10,170
files I'm excited bout rasta to to have

00:14:08,400 --> 00:14:11,400
a slightly better way of taking Ross

00:14:10,170 --> 00:14:14,400
parameters and combining that with

00:14:11,400 --> 00:14:15,810
dynamic reconfigure and those tools are

00:14:14,400 --> 00:14:17,490
very much needed I've been wanting to

00:14:15,810 --> 00:14:20,100
develop that myself for years and I have

00:14:17,490 --> 00:14:22,140
a little bit but at the bottom you have

00:14:20,100 --> 00:14:24,150
executions so we have your controllers

00:14:22,140 --> 00:14:26,700
which could be like Ross control or or

00:14:24,150 --> 00:14:29,070
Coast whatever you want but we have

00:14:26,700 --> 00:14:30,750
interfaces for those basically we have

00:14:29,070 --> 00:14:33,030
the planning algorithms which is kind of

00:14:30,750 --> 00:14:35,270
the meat that the main idea behind move

00:14:33,030 --> 00:14:38,010
it is exposing the planning algorithms

00:14:35,270 --> 00:14:41,340
one could say that move it was developed

00:14:38,010 --> 00:14:43,620
to take OMP oh the planning library and

00:14:41,340 --> 00:14:44,910
connect it to robots like in Ross and

00:14:43,620 --> 00:14:46,410
that could be one of the original

00:14:44,910 --> 00:14:47,790
purposes of it but of course it's used

00:14:46,410 --> 00:14:49,680
for other things besides just open pls

00:14:47,790 --> 00:14:52,170
ppl chomp and whatever else you can

00:14:49,680 --> 00:14:53,340
dream up of but part of planning is what

00:14:52,170 --> 00:14:55,080
you need to inverse kinematics and

00:14:53,340 --> 00:14:56,430
forward kinematics forty kinematics is

00:14:55,080 --> 00:14:58,290
just built in because it's pretty simple

00:14:56,430 --> 00:15:00,060
but inverse kinematics uni it's a

00:14:58,290 --> 00:15:01,410
plug-in you need shoes there's different

00:15:00,060 --> 00:15:04,020
pros and cons to how you use the

00:15:01,410 --> 00:15:05,820
iterative or numerical and then

00:15:04,020 --> 00:15:08,130
collision checking and the planning

00:15:05,820 --> 00:15:10,320
scene is this other functionality that's

00:15:08,130 --> 00:15:11,640
basically like maintaining a video game

00:15:10,320 --> 00:15:13,440
world of your environment so you're

00:15:11,640 --> 00:15:15,270
saying there's a table here there's a

00:15:13,440 --> 00:15:16,770
floor there there's the cup over there

00:15:15,270 --> 00:15:18,630
by one and it's keeping track of the

00:15:16,770 --> 00:15:19,180
robot state of the state of things in

00:15:18,630 --> 00:15:21,610
the world

00:15:19,180 --> 00:15:23,890
it's kind of sucking in all your data

00:15:21,610 --> 00:15:25,990
and having one central place there's

00:15:23,890 --> 00:15:27,220
this there's this idea of a world that

00:15:25,990 --> 00:15:29,260
is maintaining and it's having your

00:15:27,220 --> 00:15:31,180
meshes you can also include the octa map

00:15:29,260 --> 00:15:33,220
if that's how you want to represent your

00:15:31,180 --> 00:15:36,040
perception data so it's sucking in joint

00:15:33,220 --> 00:15:37,870
States and TF and your octa mech updates

00:15:36,040 --> 00:15:39,580
so your point clouds all that and kind

00:15:37,870 --> 00:15:40,840
of combining it in a way that you're

00:15:39,580 --> 00:15:45,310
plenty algorithms can then play on top

00:15:40,840 --> 00:15:48,010
of so a little deeper at its core move

00:15:45,310 --> 00:15:49,420
it is a plug-in architecture I think

00:15:48,010 --> 00:15:51,850
it's safe to say that an armed

00:15:49,420 --> 00:15:53,740
navigation the original package in

00:15:51,850 --> 00:15:55,660
Willow Garage is early days it was very

00:15:53,740 --> 00:15:56,800
built on the idea of where have all

00:15:55,660 --> 00:15:58,540
these from nodes and there can

00:15:56,800 --> 00:16:01,780
accumulate through services and and and

00:15:58,540 --> 00:16:03,460
actions and and topics and in the

00:16:01,780 --> 00:16:05,350
rewrite and move it it became instead a

00:16:03,460 --> 00:16:06,730
plug-in architecture so that we have

00:16:05,350 --> 00:16:09,010
more power you can quickly transfer

00:16:06,730 --> 00:16:11,200
things faster and like I mentioned a

00:16:09,010 --> 00:16:13,480
minute ago maybe Ross to we can move

00:16:11,200 --> 00:16:15,790
back away from that but for now think of

00:16:13,480 --> 00:16:17,680
this as if you're an expert in one

00:16:15,790 --> 00:16:19,450
particular piece of this you can

00:16:17,680 --> 00:16:20,980
contribute back your work or test your

00:16:19,450 --> 00:16:23,230
work so if you're working on this new ik

00:16:20,980 --> 00:16:24,670
solver that does whole body kinematics

00:16:23,230 --> 00:16:27,040
and can take in all these null spaces

00:16:24,670 --> 00:16:29,320
please like turn that into a plug-in for

00:16:27,040 --> 00:16:31,830
our ik solvers and like even contribute

00:16:29,320 --> 00:16:34,690
it back that'd be that'd be great

00:16:31,830 --> 00:16:36,910
controller managers so there's there's

00:16:34,690 --> 00:16:38,650
all sorts of different plugins and the

00:16:36,910 --> 00:16:40,240
perceptions pretty biased octa maps

00:16:38,650 --> 00:16:42,670
right now but it could be anything as

00:16:40,240 --> 00:16:44,860
long as you can segment and whatever I

00:16:42,670 --> 00:16:47,110
did I zation there's certain things in

00:16:44,860 --> 00:16:49,780
here that are assumed based on at the

00:16:47,110 --> 00:16:51,900
time what we were needing or at least

00:16:49,780 --> 00:16:54,280
the other developers were dating but

00:16:51,900 --> 00:16:57,430
this could be adapted to make even more

00:16:54,280 --> 00:16:59,470
journal as use cases arise I already

00:16:57,430 --> 00:17:02,050
talked about playing Singh monitor so I

00:16:59,470 --> 00:17:05,920
think I covered that planners currently

00:17:02,050 --> 00:17:07,420
these are the main ones realistically om

00:17:05,920 --> 00:17:09,880
PL is the the only one that's like well

00:17:07,420 --> 00:17:12,630
maintained but the other two have had

00:17:09,880 --> 00:17:15,250
revived support recently in particular

00:17:12,630 --> 00:17:17,140
Mike Ferguson work on SB PA which is

00:17:15,250 --> 00:17:19,870
search based planning library for coming

00:17:17,140 --> 00:17:23,270
from Mac likhachev slab and chompin stop

00:17:19,870 --> 00:17:25,610
optimization based libraries coming from

00:17:23,270 --> 00:17:28,370
none at all I just butchered that name I

00:17:25,610 --> 00:17:30,650
apologize and the Ross and usher group

00:17:28,370 --> 00:17:33,320
has been reviving that but Owen peel is

00:17:30,650 --> 00:17:34,700
a really great the open motion planning

00:17:33,320 --> 00:17:37,670
library is a really great approach to

00:17:34,700 --> 00:17:39,170
motion funny because it can plan in very

00:17:37,670 --> 00:17:40,640
cluttered scenes and so we can plan

00:17:39,170 --> 00:17:43,760
between obstacles and avoid local

00:17:40,640 --> 00:17:45,800
minimum it's a randomized sampling based

00:17:43,760 --> 00:17:48,380
motion planner and it's coming from the

00:17:45,800 --> 00:17:49,670
kivati lab and so it out of the box when

00:17:48,380 --> 00:17:51,080
used to use a setup assistant it's going

00:17:49,670 --> 00:17:53,990
to automatically configure some default

00:17:51,080 --> 00:17:55,520
settings and it can figure out its own

00:17:53,990 --> 00:17:57,310
able to automatically tune itself for

00:17:55,520 --> 00:17:59,300
your robot and some pretty clever ways

00:17:57,310 --> 00:18:02,090
to get functionality or the other to

00:17:59,300 --> 00:18:05,600
take a little more grease and and elbow

00:18:02,090 --> 00:18:07,460
grease to to get working and I have to

00:18:05,600 --> 00:18:08,990
mention out there's some I like PhD

00:18:07,460 --> 00:18:11,120
research has been putting experience

00:18:08,990 --> 00:18:13,010
planners into own peel and to move it

00:18:11,120 --> 00:18:14,840
and so it's required me which is one

00:18:13,010 --> 00:18:16,370
reason why work in the c++ level to

00:18:14,840 --> 00:18:17,780
really dig deep into some of the

00:18:16,370 --> 00:18:19,280
assumptions and tweak things and I've

00:18:17,780 --> 00:18:20,900
been slowly putting pull request back in

00:18:19,280 --> 00:18:22,700
but an experience based planning is

00:18:20,900 --> 00:18:24,020
essentially instead of researching the

00:18:22,700 --> 00:18:26,870
environment over and over again from

00:18:24,020 --> 00:18:28,880
scratch we can take our previous

00:18:26,870 --> 00:18:30,680
experiences our previous motion plans

00:18:28,880 --> 00:18:32,570
and kind of collect them over time and

00:18:30,680 --> 00:18:33,950
the idea is that if you're doing the

00:18:32,570 --> 00:18:35,690
same motion over and over again

00:18:33,950 --> 00:18:37,010
particularly some like walking over here

00:18:35,690 --> 00:18:38,450
and then walking over there it should

00:18:37,010 --> 00:18:40,250
get really good at doing that task if

00:18:38,450 --> 00:18:41,510
you ask me to suddenly reach behind my

00:18:40,250 --> 00:18:43,490
back I've never done that before it's

00:18:41,510 --> 00:18:45,860
okay if it takes longer to solve that so

00:18:43,490 --> 00:18:48,860
that's my personal work I just throw

00:18:45,860 --> 00:18:51,050
that in there playing requests adapters

00:18:48,860 --> 00:18:54,620
for those who have always wondered what

00:18:51,050 --> 00:18:56,510
these are there what takes the academic

00:18:54,620 --> 00:18:58,250
theoretical I'm in simulation everything

00:18:56,510 --> 00:19:00,290
works and it converts it into the real

00:18:58,250 --> 00:19:02,840
world of like we have noise we have

00:19:00,290 --> 00:19:05,480
encoders that aren't exactly right or we

00:19:02,840 --> 00:19:06,980
have sensor values so there's a series

00:19:05,480 --> 00:19:08,390
of plug-in and you can actually add more

00:19:06,980 --> 00:19:11,870
I guess they're called adapters in this

00:19:08,390 --> 00:19:13,160
case that say you know the world is an

00:19:11,870 --> 00:19:16,040
ideal and that we're going to kind of

00:19:13,160 --> 00:19:18,110
twiddle it so for example what time

00:19:16,040 --> 00:19:21,380
parameterization is a little fun when I

00:19:18,110 --> 00:19:23,180
just said it it takes your your

00:19:21,380 --> 00:19:24,680
kinematic plan so you plan in position

00:19:23,180 --> 00:19:26,810
space surely all you know is like we're

00:19:24,680 --> 00:19:30,670
going to be at this time and it adds

00:19:26,810 --> 00:19:32,780
velocity acceleration constraints to it

00:19:30,670 --> 00:19:35,720
so I'm gonna back up for a second and

00:19:32,780 --> 00:19:37,530
say that currently at least with own PL

00:19:35,720 --> 00:19:39,900
to make it computational

00:19:37,530 --> 00:19:42,060
computationally tractable the algorithm

00:19:39,900 --> 00:19:43,380
is all plan in just geometric kinematic

00:19:42,060 --> 00:19:45,930
space so they don't have a notion of a

00:19:43,380 --> 00:19:48,570
velocity acceleration because that would

00:19:45,930 --> 00:19:50,730
be very slow to compute but when you had

00:19:48,570 --> 00:19:52,710
when you add that adapter to it it then

00:19:50,730 --> 00:19:55,310
takes the max velocity accelerations and

00:19:52,710 --> 00:19:57,720
parameter Rises the trajectory over time

00:19:55,310 --> 00:20:00,300
the other adapters here though we're

00:19:57,720 --> 00:20:01,740
talking about before is it checks so

00:20:00,300 --> 00:20:03,510
let's say your joint is like right

00:20:01,740 --> 00:20:04,500
beyond the limit because you happen to

00:20:03,510 --> 00:20:07,170
push it too far when you were

00:20:04,500 --> 00:20:08,640
recalibrating normally move it or

00:20:07,170 --> 00:20:09,810
similar software it would be like it's

00:20:08,640 --> 00:20:11,790
out of limit there's an error you have

00:20:09,810 --> 00:20:14,370
to manually correct it but in this case

00:20:11,790 --> 00:20:16,530
it can detect that it's just slightly

00:20:14,370 --> 00:20:18,360
out of the joint limit and it can kind

00:20:16,530 --> 00:20:19,800
of randomized like fix the joint just

00:20:18,360 --> 00:20:21,960
back a little bit within the threshold

00:20:19,800 --> 00:20:23,670
and then continue planning and then

00:20:21,960 --> 00:20:25,500
after its I'm planning it comes back and

00:20:23,670 --> 00:20:27,660
it adds that state to the very beginning

00:20:25,500 --> 00:20:29,520
and it can actually fix itself out of

00:20:27,660 --> 00:20:31,950
there similarly it was in collision so

00:20:29,520 --> 00:20:33,450
let's say your hands on the table I'm

00:20:31,950 --> 00:20:35,070
not in collision with the table per se

00:20:33,450 --> 00:20:36,660
but your algorithm might think you are

00:20:35,070 --> 00:20:38,790
because you're so close to that geometry

00:20:36,660 --> 00:20:40,650
to that mesh or whatever predation you

00:20:38,790 --> 00:20:42,810
have and so it's important to be able to

00:20:40,650 --> 00:20:44,550
be kind of like shake the arm until it's

00:20:42,810 --> 00:20:46,590
above the table and it thinks it's not

00:20:44,550 --> 00:20:48,240
in collision we plan and then we add

00:20:46,590 --> 00:20:50,340
that actual state back so just little

00:20:48,240 --> 00:20:54,840
tricks like that that are very necessary

00:20:50,340 --> 00:20:57,840
to make this work in real life another

00:20:54,840 --> 00:21:01,670
component is the ik solvers kdl is a

00:20:57,840 --> 00:21:05,010
pretty fantastic library coming from the

00:21:01,670 --> 00:21:06,420
Levin group in Belgium I believe Kim

00:21:05,010 --> 00:21:08,970
Xing like libraries part of the Oracles

00:21:06,420 --> 00:21:11,520
project and it just works out of the box

00:21:08,970 --> 00:21:12,930
pretty much no matter what your your

00:21:11,520 --> 00:21:14,280
kinematic chain is it only works with

00:21:12,930 --> 00:21:15,750
kinematic chains which means you have a

00:21:14,280 --> 00:21:18,600
series of joints you can't have a closed

00:21:15,750 --> 00:21:20,310
loop but it's been really successful for

00:21:18,600 --> 00:21:22,440
us because we can see you through setup

00:21:20,310 --> 00:21:26,310
assistant and then you're off however

00:21:22,440 --> 00:21:27,900
its its numerical so it's its orbit

00:21:26,310 --> 00:21:29,910
magnitude slower than an analytical

00:21:27,900 --> 00:21:32,430
solution if you can get one so for some

00:21:29,910 --> 00:21:34,830
robots for some geometries maybe for all

00:21:32,430 --> 00:21:36,630
robots depending on your algebraic skill

00:21:34,830 --> 00:21:38,790
you can come up with numerical sorry

00:21:36,630 --> 00:21:40,260
analytical solutions the best one we

00:21:38,790 --> 00:21:42,870
know of is ik fast that's coming from

00:21:40,260 --> 00:21:44,910
the open rave project and you can run

00:21:42,870 --> 00:21:47,820
your you RTF which you have to convert

00:21:44,910 --> 00:21:49,430
to colada through their their algorithm

00:21:47,820 --> 00:21:51,170
they spit out a

00:21:49,430 --> 00:21:52,970
c++ header file that can generate I can

00:21:51,170 --> 00:21:54,080
solutions way faster and of course

00:21:52,970 --> 00:21:55,700
things like PR to have their own

00:21:54,080 --> 00:21:57,230
specific ones that have been hand-tuned

00:21:55,700 --> 00:22:00,320
so if you're an expert on that you can't

00:21:57,230 --> 00:22:02,810
do that so now I want to talk about name

00:22:00,320 --> 00:22:04,100
is on picking challenge this is an event

00:22:02,810 --> 00:22:06,830
that happened recently me just play this

00:22:04,100 --> 00:22:07,880
video that I participated in and I think

00:22:06,830 --> 00:22:09,860
it's very relevant to the mythic

00:22:07,880 --> 00:22:12,770
committee community and to the Ross

00:22:09,860 --> 00:22:14,990
community and so it's going to be my

00:22:12,770 --> 00:22:17,390
segue into the second half of problems I

00:22:14,990 --> 00:22:19,370
see it move it and this is a similar

00:22:17,390 --> 00:22:20,990
vein to our presentation yesterday on a

00:22:19,370 --> 00:22:24,080
dropper grand challenge where they used

00:22:20,990 --> 00:22:25,430
to move it and they had problems I used

00:22:24,080 --> 00:22:27,920
to move it for the Amazon challenge and

00:22:25,430 --> 00:22:29,870
I have problems so here's an initial

00:22:27,920 --> 00:22:31,610
video i came up with back like very

00:22:29,870 --> 00:22:32,930
early in the competition of using baxter

00:22:31,610 --> 00:22:34,580
and it seemed like I had pretty good a

00:22:32,930 --> 00:22:37,460
success I ethos that I think a pretty

00:22:34,580 --> 00:22:38,750
impressive video I'm gonna back up

00:22:37,460 --> 00:22:40,430
though and say that the Amazon challenge

00:22:38,750 --> 00:22:42,620
in case you don't know it was a

00:22:40,430 --> 00:22:45,260
competition put together by amazon to do

00:22:42,620 --> 00:22:47,840
picking from shelves and so we had this

00:22:45,260 --> 00:22:49,790
bin which you see on the left here full

00:22:47,840 --> 00:22:53,630
of small products that were than the

00:22:49,790 --> 00:22:55,130
payload of robots like Baxter and there

00:22:53,630 --> 00:22:56,660
ended up being 30 teams from around the

00:22:55,130 --> 00:22:59,330
world that came together in Seattle last

00:22:56,660 --> 00:23:01,670
year or this year at Ikra and competed

00:22:59,330 --> 00:23:06,680
and was really exciting I I love the

00:23:01,670 --> 00:23:07,820
experience I learned so much and I think

00:23:06,680 --> 00:23:10,430
that's the most of the rules I give you

00:23:07,820 --> 00:23:11,600
a USB stick with like which which things

00:23:10,430 --> 00:23:13,460
to pick that they give the very last

00:23:11,600 --> 00:23:14,960
minute and so you had to like upload to

00:23:13,460 --> 00:23:16,400
your computer and say okay pull the

00:23:14,960 --> 00:23:18,560
autonomous there was no human the loop

00:23:16,400 --> 00:23:23,750
you step away and you let it do its

00:23:18,560 --> 00:23:25,310
thing so initially i was using baxter

00:23:23,750 --> 00:23:27,500
like you saw in that last video but I

00:23:25,310 --> 00:23:29,630
you just move it in some custom code to

00:23:27,500 --> 00:23:31,760
do some work space analysis and I found

00:23:29,630 --> 00:23:34,670
with a back sir stationary the coverage

00:23:31,760 --> 00:23:37,100
of its arm over the shelf mmm it's hard

00:23:34,670 --> 00:23:38,960
to see this but we didn't have full

00:23:37,100 --> 00:23:40,430
coverage there was some blind spots at

00:23:38,960 --> 00:23:41,330
the top of the shelf in the middle and

00:23:40,430 --> 00:23:43,520
the bottom of the shelf in the middle

00:23:41,330 --> 00:23:45,410
where it's two arms couldn't reach and

00:23:43,520 --> 00:23:47,360
on top of that it couldn't get very much

00:23:45,410 --> 00:23:50,000
depth so if there's a product in the

00:23:47,360 --> 00:23:51,410
back of the bin back sure might have a

00:23:50,000 --> 00:23:53,810
harder time reaching back there because

00:23:51,410 --> 00:23:56,000
it's a thicker arm another problem was

00:23:53,810 --> 00:23:58,340
that that here you see this parallel

00:23:56,000 --> 00:23:59,600
electric in defector its stroke is

00:23:58,340 --> 00:24:00,980
pretty small so we didn't have much

00:23:59,600 --> 00:24:01,730
range between products we could do in

00:24:00,980 --> 00:24:02,640
fact we couldn't pick up all the

00:24:01,730 --> 00:24:04,350
products with this

00:24:02,640 --> 00:24:06,090
and defector so we were forced to look

00:24:04,350 --> 00:24:07,470
at other defectors so we start looking

00:24:06,090 --> 00:24:09,960
at some that yell open hands which are

00:24:07,470 --> 00:24:12,260
great hands by the way they're under

00:24:09,960 --> 00:24:15,960
actuated open source open hardware

00:24:12,260 --> 00:24:17,670
projects and so with this in defector we

00:24:15,960 --> 00:24:20,580
had even a smaller area because it's a

00:24:17,670 --> 00:24:22,170
very big hand very bulky and so when you

00:24:20,580 --> 00:24:24,330
have this constrained space it's hard to

00:24:22,170 --> 00:24:26,520
reach things on the edge of the walls or

00:24:24,330 --> 00:24:29,640
further back and so we looked at all

00:24:26,520 --> 00:24:31,740
these things and we decided that the

00:24:29,640 --> 00:24:32,880
geometry the kinematics of it didn't

00:24:31,740 --> 00:24:35,550
make sense so we went to a different

00:24:32,880 --> 00:24:37,320
robot and so we switched to the the new

00:24:35,550 --> 00:24:40,230
j go to it just came out in december our

00:24:37,320 --> 00:24:41,760
lab happen to have won this and it's you

00:24:40,230 --> 00:24:45,150
know a pretty good looking package it's

00:24:41,760 --> 00:24:46,470
pretty thin but it's actually i think a

00:24:45,150 --> 00:24:47,880
little shorter than the Backstairs arm

00:24:46,470 --> 00:24:50,010
and we only have one of them where its

00:24:47,880 --> 00:24:52,260
back should we had to so to reach the

00:24:50,010 --> 00:24:53,730
amount of a work space and reach ability

00:24:52,260 --> 00:24:55,730
that we needed we added a one meter

00:24:53,730 --> 00:24:57,870
gantry it was just a off-the-shelf

00:24:55,730 --> 00:25:00,030
gantry that we've made some cereal

00:24:57,870 --> 00:25:03,510
drivers for we combine these two pieces

00:25:00,030 --> 00:25:06,330
of hardware into verte and one virtual

00:25:03,510 --> 00:25:08,070
robot so and move it it just saw as one

00:25:06,330 --> 00:25:10,680
complete system there were two different

00:25:08,070 --> 00:25:11,760
Ross control nodes running to split the

00:25:10,680 --> 00:25:13,320
commands out but movable to

00:25:11,760 --> 00:25:17,310
automatically parcel trajectories into

00:25:13,320 --> 00:25:19,200
two separate controllers and we we had a

00:25:17,310 --> 00:25:21,510
pretty good system running just in the

00:25:19,200 --> 00:25:23,910
competition there were some few bugs you

00:25:21,510 --> 00:25:25,260
know the demo not even dinner but like

00:25:23,910 --> 00:25:27,660
when it comes to actual competition time

00:25:25,260 --> 00:25:29,940
particularly calibration was our issue

00:25:27,660 --> 00:25:32,340
and so a guy about collaboration but I'm

00:25:29,940 --> 00:25:35,970
gonna go over the system that we built

00:25:32,340 --> 00:25:37,920
or that I put a lot of this it's pretty

00:25:35,970 --> 00:25:41,040
standard RT name was picnic by the way

00:25:37,920 --> 00:25:43,380
so I put our lil name up there but this

00:25:41,040 --> 00:25:45,510
is kind of just the standard sense plan

00:25:43,380 --> 00:25:49,230
at paradigm which I'll talk about more

00:25:45,510 --> 00:25:50,580
later but let's start at the asus xtian

00:25:49,230 --> 00:25:52,770
pros which are pretty standard we had

00:25:50,580 --> 00:25:54,150
two mounted or gantry they'd go up and

00:25:52,770 --> 00:25:55,950
down with the gantry but they were not

00:25:54,150 --> 00:25:57,450
fixed to the arm a lot of people like

00:25:55,950 --> 00:25:58,740
well then you have interference and we

00:25:57,450 --> 00:26:00,000
did but it still worked there's the

00:25:58,740 --> 00:26:04,500
middle part there's a little bit of like

00:26:00,000 --> 00:26:07,830
infrared overlay but it works so our

00:26:04,500 --> 00:26:10,350
perception team at Colorado it's a

00:26:07,830 --> 00:26:11,549
different lab they use SDF fusion to

00:26:10,350 --> 00:26:13,259
generate these meshes

00:26:11,549 --> 00:26:15,419
and so in this picture at the top left

00:26:13,259 --> 00:26:18,539
we have an Oreo box and this is the kind

00:26:15,419 --> 00:26:20,970
of mesh they'd send over to us the red

00:26:18,539 --> 00:26:22,289
the red arrows indicate Ross messages

00:26:20,970 --> 00:26:24,299
and so one thing you'll notice is that

00:26:22,289 --> 00:26:25,350
we use very few Ross messages I guess

00:26:24,299 --> 00:26:27,690
I'm not picturing some of them but

00:26:25,350 --> 00:26:30,869
overall it's whole bottom half was one

00:26:27,690 --> 00:26:34,409
giant move it based node of processing

00:26:30,869 --> 00:26:37,529
it and I just again I prefer that way of

00:26:34,409 --> 00:26:40,769
debugging and developing but the they're

00:26:37,529 --> 00:26:43,139
there CUDA based perception pipeline

00:26:40,769 --> 00:26:44,639
would pass through a Ross message to

00:26:43,139 --> 00:26:47,429
what we call her picnic manager wishing

00:26:44,639 --> 00:26:49,169
or picking and placing manager this mesh

00:26:47,429 --> 00:26:50,940
and from there we generate a bounding

00:26:49,169 --> 00:26:53,220
box so we did an assumption that all

00:26:50,940 --> 00:26:54,450
objects had bounding boxes and that's

00:26:53,220 --> 00:26:56,249
what we thought of them we didn't even

00:26:54,450 --> 00:26:58,590
deal with a mesh after that so once we

00:26:56,249 --> 00:26:59,940
had a bounding box we would add that to

00:26:58,590 --> 00:27:01,080
the planting seed which is that tool

00:26:59,940 --> 00:27:03,779
that keeps the video game in

00:27:01,080 --> 00:27:05,039
representation of the world and and then

00:27:03,779 --> 00:27:07,379
we'd go down to this manipulation

00:27:05,039 --> 00:27:09,299
manager which is basically a custom

00:27:07,379 --> 00:27:12,419
pipeline but underneath it uses a bunch

00:27:09,299 --> 00:27:14,220
of move it classes and tools to do

00:27:12,419 --> 00:27:15,509
manipulation all the collision checking

00:27:14,220 --> 00:27:19,859
all the ik solving I've been talking

00:27:15,509 --> 00:27:21,359
about and so we we built out this crazy

00:27:19,859 --> 00:27:24,659
grass generator we called it move it

00:27:21,359 --> 00:27:27,779
grass grasped it's not really been

00:27:24,659 --> 00:27:29,909
released but I'm happy to and so this

00:27:27,779 --> 00:27:32,549
picture here is a picture of a bounding

00:27:29,909 --> 00:27:34,980
box with just thousands of grass

00:27:32,549 --> 00:27:36,659
positions that we would generate around

00:27:34,980 --> 00:27:39,239
it and from there we filter those out

00:27:36,659 --> 00:27:44,340
based on a whole slew of filters

00:27:39,239 --> 00:27:45,809
kinematics collision we we would do some

00:27:44,340 --> 00:27:47,820
like rough ones that would save time

00:27:45,809 --> 00:27:50,399
we'd be filtered that there was like a

00:27:47,820 --> 00:27:52,019
pre plan or a post plan to get to them

00:27:50,399 --> 00:27:54,059
and then we'd score the ones that

00:27:52,019 --> 00:27:57,779
remaining based on some heuristics of

00:27:54,059 --> 00:27:59,429
how straight is it how off just things

00:27:57,779 --> 00:28:01,019
that we learned as we were testing so

00:27:59,429 --> 00:28:02,609
we'd like score them all and then take

00:28:01,019 --> 00:28:05,009
the best scored ones and put them

00:28:02,609 --> 00:28:08,580
through our grass planner which would

00:28:05,009 --> 00:28:11,730
say start here move straight in up and

00:28:08,580 --> 00:28:13,470
back basically and going to use a

00:28:11,730 --> 00:28:17,070
combination of Cartesian planning the

00:28:13,470 --> 00:28:18,480
bottom and oh NP 0 RT planning and then

00:28:17,070 --> 00:28:20,549
send it off towards directory server and

00:28:18,480 --> 00:28:22,020
we use a velocity directory server over

00:28:20,549 --> 00:28:24,350
to the J co2 and

00:28:22,020 --> 00:28:29,130
and gantry and I have a video of this

00:28:24,350 --> 00:28:33,510
which is a little bit long but I speed

00:28:29,130 --> 00:28:35,040
it up so this is a view from our biz and

00:28:33,510 --> 00:28:36,870
a lot of these tools are pretty easily

00:28:35,040 --> 00:28:39,300
available through our biz markers and

00:28:36,870 --> 00:28:40,260
through move it so I think this is my

00:28:39,300 --> 00:28:41,850
favorite parts to just be able to

00:28:40,260 --> 00:28:43,110
visualize all these and this is some of

00:28:41,850 --> 00:28:44,880
the power of the Ross was available to

00:28:43,110 --> 00:28:46,710
us so these colors indicate the start

00:28:44,880 --> 00:28:48,570
state in the Gulf state and you see it

00:28:46,710 --> 00:28:50,790
did a freebase plan and ended a

00:28:48,570 --> 00:28:52,680
Cartesian plan to lift and retract and

00:28:50,790 --> 00:28:56,660
then have to put the object that it

00:28:52,680 --> 00:28:59,370
picked into the red goal bin and I

00:28:56,660 --> 00:29:01,440
display the trajectory and green dots to

00:28:59,370 --> 00:29:02,670
show you where it goes and so it's a lot

00:29:01,440 --> 00:29:04,350
to digest if you haven't looked this

00:29:02,670 --> 00:29:05,730
before but for someone who's been

00:29:04,350 --> 00:29:07,230
staring at this for months there's like

00:29:05,730 --> 00:29:09,060
a lot of data it's very rich in data

00:29:07,230 --> 00:29:10,590
first to bug what's going on and being

00:29:09,060 --> 00:29:13,350
able to see inside your system in my

00:29:10,590 --> 00:29:15,230
opinion is such an important aspect of

00:29:13,350 --> 00:29:18,210
developing these complex robot systems

00:29:15,230 --> 00:29:19,350
one fault i might say I've move it is

00:29:18,210 --> 00:29:21,360
that sometimes it's really hard to

00:29:19,350 --> 00:29:23,340
introspect to see what it's thinking why

00:29:21,360 --> 00:29:25,830
did it fail at this ik solution why

00:29:23,340 --> 00:29:29,040
couldn't it plan to here and my advice

00:29:25,830 --> 00:29:30,630
to you is to use arvest markers I made a

00:29:29,040 --> 00:29:32,640
package called arvest visual tools and

00:29:30,630 --> 00:29:33,990
move it visual tools that wrap our biz

00:29:32,640 --> 00:29:36,180
markers into a lot of really handy

00:29:33,990 --> 00:29:38,700
shortcuts and that has been

00:29:36,180 --> 00:29:40,500
indispensable and I'm confident in

00:29:38,700 --> 00:29:42,540
recommending it because my teammates my

00:29:40,500 --> 00:29:44,010
lab members who have used it have really

00:29:42,540 --> 00:29:45,960
taken to it and contribute their own

00:29:44,010 --> 00:29:48,060
shortcuts because it's just really

00:29:45,960 --> 00:29:52,350
helpful to understand what's going on

00:29:48,060 --> 00:29:55,950
inside under the hood so take away from

00:29:52,350 --> 00:30:00,260
a challenge the top half is kind of

00:29:55,950 --> 00:30:03,290
standard teamwork but in particular

00:30:00,260 --> 00:30:05,400
grasping we went for three finger like

00:30:03,290 --> 00:30:07,710
standard of grasping that was just a

00:30:05,400 --> 00:30:11,100
terrible idea everyone did suction who

00:30:07,710 --> 00:30:13,410
won section was the way to go object for

00:30:11,100 --> 00:30:17,610
lightweight enough that you could just

00:30:13,410 --> 00:30:19,590
almost always get a high volume suction

00:30:17,610 --> 00:30:21,210
system there was one object that was

00:30:19,590 --> 00:30:22,980
mesh that you couldn't suck i don't

00:30:21,210 --> 00:30:25,290
think so we thought we need the fingers

00:30:22,980 --> 00:30:26,550
for that our group recruiting theory

00:30:25,290 --> 00:30:28,410
pick up everything but because of

00:30:26,550 --> 00:30:32,910
calibration and there's some perception

00:30:28,410 --> 00:30:35,559
issues and so forth we didn't another

00:30:32,910 --> 00:30:37,049
takeaway is that low cost hardware

00:30:35,559 --> 00:30:38,889
I'm excited about low-cost hardware

00:30:37,049 --> 00:30:42,249
Baxter you know it's a whole new

00:30:38,889 --> 00:30:43,360
paradigm or jayco these these aren't

00:30:42,249 --> 00:30:44,710
industrial arms they don't have the

00:30:43,360 --> 00:30:47,200
precision of the accuracy we're used to

00:30:44,710 --> 00:30:49,929
in robotics but at the same time it's

00:30:47,200 --> 00:30:51,220
what we need to move to next thing and I

00:30:49,929 --> 00:30:52,690
do have plenty of gripes with Baxter by

00:30:51,220 --> 00:30:55,749
the way but I'm really happy to jayco

00:30:52,690 --> 00:30:58,690
and overall low-cost Harbor you need to

00:30:55,749 --> 00:31:00,549
do more reactive control so like visual

00:30:58,690 --> 00:31:02,379
sir Boeing particularly which means that

00:31:00,549 --> 00:31:03,519
you can free space plan around your

00:31:02,379 --> 00:31:04,539
environment like this without without

00:31:03,519 --> 00:31:05,919
have news any business will bring but

00:31:04,539 --> 00:31:07,499
when you get to this last step of like

00:31:05,919 --> 00:31:10,570
there's my bottle i'm gonna pick it up

00:31:07,499 --> 00:31:12,789
you need to have some like real time

00:31:10,570 --> 00:31:13,990
loop that's moving back and forth to get

00:31:12,789 --> 00:31:17,049
it just right especially if you have a

00:31:13,990 --> 00:31:18,100
slightly and precise and effector a lot

00:31:17,049 --> 00:31:19,240
of teams actually had on their feedback

00:31:18,100 --> 00:31:22,210
so they'd wish that use more visual

00:31:19,240 --> 00:31:23,529
serving calibration i didn't really

00:31:22,210 --> 00:31:25,539
focus on this because i'm a motion

00:31:23,529 --> 00:31:28,840
planning guy but it's an important

00:31:25,539 --> 00:31:32,409
aspect um that we should have focused on

00:31:28,840 --> 00:31:34,600
or like i said here reduce it needs the

00:31:32,409 --> 00:31:37,269
first since the first and third place

00:31:34,600 --> 00:31:38,619
robots use mobile bases and the benefit

00:31:37,269 --> 00:31:41,590
there is you've a much larger work space

00:31:38,619 --> 00:31:43,419
so when you're fixed it's you you don't

00:31:41,590 --> 00:31:46,210
have as many places you can reach and we

00:31:43,419 --> 00:31:47,440
had a gantry which helped a lot but that

00:31:46,210 --> 00:31:48,879
was interesting that i didn't think

00:31:47,440 --> 00:31:51,490
mobile bases would be a thing at the

00:31:48,879 --> 00:31:54,850
amazon picking challenge slim arms good

00:31:51,490 --> 00:31:57,039
personalizations of course working

00:31:54,850 --> 00:31:58,809
together so manipulation perception it

00:31:57,039 --> 00:32:00,039
historically always has this rift where

00:31:58,809 --> 00:32:02,889
they're working isolated and they

00:32:00,039 --> 00:32:04,299
occasionally will sync up and it's just

00:32:02,889 --> 00:32:06,399
not a way could weigh do it in fact

00:32:04,299 --> 00:32:08,830
likely in the future what we need to do

00:32:06,399 --> 00:32:10,600
is it has perception not even working

00:32:08,830 --> 00:32:12,340
together as a team but like in the code

00:32:10,600 --> 00:32:14,889
much tighter integration which i'll talk

00:32:12,340 --> 00:32:16,929
to a little more or soon you can't just

00:32:14,889 --> 00:32:20,529
pass over a mesh across a ross message

00:32:16,929 --> 00:32:24,070
and hope it works in my opinion so at

00:32:20,529 --> 00:32:26,559
least 10 teams used to move it for their

00:32:24,070 --> 00:32:27,820
competition to varying degrees at least

00:32:26,559 --> 00:32:29,619
one user just for collision checking but

00:32:27,820 --> 00:32:33,159
i believe the rest like full movement

00:32:29,619 --> 00:32:35,409
stacks out of i think 30 so teams that

00:32:33,159 --> 00:32:36,519
competed and none of the winning team is

00:32:35,409 --> 00:32:37,960
just move it and so this is a problem

00:32:36,519 --> 00:32:40,629
because i want to see move it being the

00:32:37,960 --> 00:32:42,129
winning teams right I saw like I love

00:32:40,629 --> 00:32:43,480
move it and now I'm going to kind of

00:32:42,129 --> 00:32:44,300
turn to the like what we need to fix

00:32:43,480 --> 00:32:47,030
about move it

00:32:44,300 --> 00:32:49,910
the first team team are Bo and you to

00:32:47,030 --> 00:32:53,330
Berlin Wow amazing they had the oldest

00:32:49,910 --> 00:32:55,070
hardware like this nomadic XR 4000 is

00:32:53,330 --> 00:32:56,510
like the mobile base is so old and of

00:32:55,070 --> 00:32:57,980
course the standard wam arm isn't you

00:32:56,510 --> 00:32:59,600
know so glamorous anymore but it did the

00:32:57,980 --> 00:33:01,190
job and they had this just vacuum

00:32:59,600 --> 00:33:02,450
attachment I'm sure you guys is like

00:33:01,190 --> 00:33:04,670
kept up with this new so this is

00:33:02,450 --> 00:33:05,690
probably old hat to most you guys but

00:33:04,670 --> 00:33:07,850
the important part i want to mention

00:33:05,690 --> 00:33:11,150
here is that according them they did not

00:33:07,850 --> 00:33:12,920
rely on motion planning they have this

00:33:11,150 --> 00:33:15,050
system in developing for many years they

00:33:12,920 --> 00:33:16,790
call it a hybrid otamatone composed of

00:33:15,050 --> 00:33:18,320
sequences of controllers with since your

00:33:16,790 --> 00:33:21,620
page transitions I think it's a quote

00:33:18,320 --> 00:33:23,510
and it's a different paradigm and I

00:33:21,620 --> 00:33:25,610
think move it could use a little bit of

00:33:23,510 --> 00:33:27,350
this I'm not saying we move its trash at

00:33:25,610 --> 00:33:29,900
all move it as really powerful and

00:33:27,350 --> 00:33:31,850
really great things but particularly the

00:33:29,900 --> 00:33:34,940
ability to switch controllers at a low

00:33:31,850 --> 00:33:37,940
level position based control isn't

00:33:34,940 --> 00:33:39,290
everything and and so sometimes you want

00:33:37,940 --> 00:33:40,540
to do some impedes control or have a

00:33:39,290 --> 00:33:42,950
controller that's taking into account

00:33:40,540 --> 00:33:46,160
tactile feedback or visual serving these

00:33:42,950 --> 00:33:48,110
are all obvious things to to academics

00:33:46,160 --> 00:33:49,610
have been working manipulation but doing

00:33:48,110 --> 00:33:51,380
it all together in a real software

00:33:49,610 --> 00:33:52,610
framework that's agnostic for robots is

00:33:51,380 --> 00:33:56,030
really hard and so we're looking at a

00:33:52,610 --> 00:33:58,400
hard problem to solve similarly to MIT

00:33:56,030 --> 00:34:00,740
did the whole industrial approach and

00:33:58,400 --> 00:34:03,290
they use Drake which is a competitor to

00:34:00,740 --> 00:34:05,690
move it essentially from MIT and they

00:34:03,290 --> 00:34:07,220
use motion primitives like grasping

00:34:05,690 --> 00:34:10,520
sucking scooping toppling push rotate

00:34:07,220 --> 00:34:13,700
etc go a little faster apologize and

00:34:10,520 --> 00:34:15,500
then lastly team grizzly you'll notice

00:34:13,700 --> 00:34:17,870
the points are way different and Tim are

00:34:15,500 --> 00:34:19,669
videos 148 points88 points and then 35

00:34:17,870 --> 00:34:20,990
points so there's a huge gamut of range

00:34:19,669 --> 00:34:23,000
and the rest of teams were under 35

00:34:20,990 --> 00:34:25,150
points and they didn't use move to the

00:34:23,000 --> 00:34:29,740
user Cartesian motion planning algorithm

00:34:25,150 --> 00:34:29,740
so we're move it needs improvement

00:34:29,950 --> 00:34:34,040
reliability right so if you've used to

00:34:32,480 --> 00:34:37,310
move before you know that it's got

00:34:34,040 --> 00:34:38,810
serious reliability problems and so we

00:34:37,310 --> 00:34:40,610
need to have it so that when it fails it

00:34:38,810 --> 00:34:44,570
tells you why better we need to have it

00:34:40,610 --> 00:34:46,760
so that it it can to more joining more

00:34:44,570 --> 00:34:48,560
optimal paths and and so some solution

00:34:46,760 --> 00:34:52,419
is this is the the hybridized pass

00:34:48,560 --> 00:34:54,659
together used cost-based planners

00:34:52,419 --> 00:34:58,049
sometime on smoothing

00:34:54,659 --> 00:35:02,849
and small tweaks to it a little faster

00:34:58,049 --> 00:35:04,020
here I love this animation a big

00:35:02,849 --> 00:35:06,630
committee to move it is obstacle

00:35:04,020 --> 00:35:09,329
clearance so out of the box there is no

00:35:06,630 --> 00:35:10,319
direct support for increasing the space

00:35:09,329 --> 00:35:11,910
from obstacles so it'll be

00:35:10,319 --> 00:35:13,740
collision-free but it'll just like swype

00:35:11,910 --> 00:35:16,109
by your tables in your thing and your

00:35:13,740 --> 00:35:18,660
and your things and so if you have a low

00:35:16,109 --> 00:35:20,579
precision arm it's likely going to hit

00:35:18,660 --> 00:35:22,500
something and so there's different ways

00:35:20,579 --> 00:35:23,970
of doing this using cost based sampling

00:35:22,500 --> 00:35:25,200
based motion planning or using

00:35:23,970 --> 00:35:29,299
optimization algorithms like stomp and

00:35:25,200 --> 00:35:31,530
chomp grasping supports really important

00:35:29,299 --> 00:35:33,240
move it was named after grasp it

00:35:31,530 --> 00:35:35,549
essentially which is this grasping

00:35:33,240 --> 00:35:37,020
library that matei and other developed a

00:35:35,549 --> 00:35:38,609
long time ago it's kind of old software

00:35:37,020 --> 00:35:40,440
now and it doesn't really work with you

00:35:38,609 --> 00:35:42,990
already x or s rdf it's not Ross ified

00:35:40,440 --> 00:35:45,059
it's it needs some work and I propose

00:35:42,990 --> 00:35:46,680
that we just kind of start over and we

00:35:45,059 --> 00:35:48,119
need a Ross package it doesn't have to

00:35:46,680 --> 00:35:50,609
be move it related but a Ross package

00:35:48,119 --> 00:35:52,890
it's tightly integrated with move it on

00:35:50,609 --> 00:35:55,500
journey grass it give you geometric or

00:35:52,890 --> 00:35:57,859
physics-based rest it sits in a thing

00:35:55,500 --> 00:36:00,210
that we're really needing right now and

00:35:57,859 --> 00:36:02,609
finally things that we really need to

00:36:00,210 --> 00:36:04,020
fix its documentation we have some

00:36:02,609 --> 00:36:05,490
really good tutorials to start off with

00:36:04,020 --> 00:36:08,190
and then there's that cliff or you just

00:36:05,490 --> 00:36:10,020
like what do I do next and so to get

00:36:08,190 --> 00:36:12,480
more developers who understand maybe who

00:36:10,020 --> 00:36:13,890
can contribute and keep it alive we all

00:36:12,480 --> 00:36:15,059
need to work together if you're working

00:36:13,890 --> 00:36:18,260
a move it I'm talking to you right now

00:36:15,059 --> 00:36:22,170
to make more tutorials and make more

00:36:18,260 --> 00:36:23,640
how-to articles on how to use move it so

00:36:22,170 --> 00:36:24,420
if you should road map this is what I'm

00:36:23,640 --> 00:36:28,289
really excited to share with you

00:36:24,420 --> 00:36:29,809
concerning things we can do better in

00:36:28,289 --> 00:36:32,130
the future that we don't have yet

00:36:29,809 --> 00:36:33,630
officially this is our list from army

00:36:32,130 --> 00:36:36,450
community meeting of things like window

00:36:33,630 --> 00:36:37,859
by the year but things I particularly

00:36:36,450 --> 00:36:39,720
talk about is the visual sir going again

00:36:37,859 --> 00:36:42,690
so that's like right before you to be on

00:36:39,720 --> 00:36:44,730
a very talked on this is having reactive

00:36:42,690 --> 00:36:46,920
control in the loop and how that might

00:36:44,730 --> 00:36:49,680
look like is let's say you have this

00:36:46,920 --> 00:36:51,329
very complex trajectory this blue line

00:36:49,680 --> 00:36:53,119
appear the first one on far left this is

00:36:51,329 --> 00:36:55,559
free space planning with om PL and

00:36:53,119 --> 00:36:57,299
pretty standard but then before we get

00:36:55,559 --> 00:36:59,160
to the bottle this yellow line that's

00:36:57,299 --> 00:37:00,839
where you'd switch controllers so in

00:36:59,160 --> 00:37:02,970
Ross control you might be you might send

00:37:00,839 --> 00:37:04,500
the command do switch and at that point

00:37:02,970 --> 00:37:05,579
you want to use impedance control

00:37:04,500 --> 00:37:07,170
because you want to have it more

00:37:05,579 --> 00:37:07,740
compliant to the you want to put too

00:37:07,170 --> 00:37:10,050
much force

00:37:07,740 --> 00:37:11,100
object and you'll use visual serve going

00:37:10,050 --> 00:37:13,470
to get the right thing I've been harping

00:37:11,100 --> 00:37:15,630
on that then yours the grass controller

00:37:13,470 --> 00:37:17,040
you say okay now close gripper and then

00:37:15,630 --> 00:37:19,490
we want to retreat and then do another

00:37:17,040 --> 00:37:21,900
free space planning and then another

00:37:19,490 --> 00:37:23,250
penis based controller and then this

00:37:21,900 --> 00:37:24,420
last red line i think is really

00:37:23,250 --> 00:37:26,820
interesting it's something that moving

00:37:24,420 --> 00:37:29,820
it's important necessarily but discard

00:37:26,820 --> 00:37:31,320
the library that Ross and Duchess been

00:37:29,820 --> 00:37:32,910
working on it's really good at following

00:37:31,320 --> 00:37:34,590
semi constrained trajectories and I

00:37:32,910 --> 00:37:36,869
think moving knees bill to support these

00:37:34,590 --> 00:37:39,360
different control modes and that

00:37:36,869 --> 00:37:40,920
involves adding metadata to our plans so

00:37:39,360 --> 00:37:42,930
not only can we say this is the position

00:37:40,920 --> 00:37:44,070
velocity and acceleration we want but we

00:37:42,930 --> 00:37:46,290
need to say this is the controller I

00:37:44,070 --> 00:37:47,910
want and this is like how I want to do

00:37:46,290 --> 00:37:49,560
that controller so if you're doing a

00:37:47,910 --> 00:37:51,720
visual visual survey based controller

00:37:49,560 --> 00:37:53,250
you also need to say this is the object

00:37:51,720 --> 00:37:54,840
i'm looking for this is where i expect

00:37:53,250 --> 00:37:59,310
it to be and have integration with

00:37:54,840 --> 00:38:02,460
perception so in this sense plan act

00:37:59,310 --> 00:38:04,740
paradigm we're going from image to octa

00:38:02,460 --> 00:38:06,630
map to planning the time the directory

00:38:04,740 --> 00:38:09,960
in the ross control this this loop and

00:38:06,630 --> 00:38:13,740
in essence what we need is to break

00:38:09,960 --> 00:38:16,320
atlas a little bit and have a real time

00:38:13,740 --> 00:38:17,850
reactive control loop where once we have

00:38:16,320 --> 00:38:21,090
this global plan that move it generates

00:38:17,850 --> 00:38:22,890
we take sensor data and more quickly run

00:38:21,090 --> 00:38:25,320
it through a real time loop back to our

00:38:22,890 --> 00:38:27,540
controllers based on what application

00:38:25,320 --> 00:38:29,609
you're working on and poking this hole

00:38:27,540 --> 00:38:32,190
through here sounds simple but in the

00:38:29,609 --> 00:38:33,390
architectures can take some work other

00:38:32,190 --> 00:38:35,070
things that i want to see for

00:38:33,390 --> 00:38:36,540
controlling and move it is we need

00:38:35,070 --> 00:38:38,790
integration of ross control with a setup

00:38:36,540 --> 00:38:41,850
assistant rename some things that are a

00:38:38,790 --> 00:38:43,710
little bit ambiguous and and the ability

00:38:41,850 --> 00:38:45,900
to have a controller in ross control

00:38:43,710 --> 00:38:50,250
that's really tightly coupled with movie

00:38:45,900 --> 00:38:52,109
i think i might have said that from

00:38:50,250 --> 00:38:54,150
darpa we saw a lot of teams use

00:38:52,109 --> 00:38:56,670
affordance templates which is a much

00:38:54,150 --> 00:38:58,440
fancier way of saying this is where i

00:38:56,670 --> 00:39:00,150
want to grasp so not only your position

00:38:58,440 --> 00:39:02,010
the in defector but you're saying i have

00:39:00,150 --> 00:39:04,650
something like a drill from the DRC and

00:39:02,010 --> 00:39:06,240
i want to move this piece over and then

00:39:04,650 --> 00:39:08,190
have the robot understand semantically

00:39:06,240 --> 00:39:10,080
what a drill is and how i grasp it and

00:39:08,190 --> 00:39:12,420
there's been a lot of packages generated

00:39:10,080 --> 00:39:13,740
in ross for this but there isn't much

00:39:12,420 --> 00:39:15,780
support to move it into the mainstream

00:39:13,740 --> 00:39:16,800
and i think that'd be it really good

00:39:15,780 --> 00:39:18,320
tool to have for people who are doing

00:39:16,800 --> 00:39:20,450
semi-autonomous

00:39:18,320 --> 00:39:21,890
motion planning calibration is out of

00:39:20,450 --> 00:39:24,560
the scope of move it in my opinion but

00:39:21,890 --> 00:39:25,820
we need better documentation and support

00:39:24,560 --> 00:39:28,040
for the calibration package that do

00:39:25,820 --> 00:39:30,110
exist and so for those who are

00:39:28,040 --> 00:39:32,570
interested Ross industrial I've used

00:39:30,110 --> 00:39:34,670
their packages a lot and they're pretty

00:39:32,570 --> 00:39:36,770
good about optimizing and figuring out

00:39:34,670 --> 00:39:39,260
where you're optimizing the parameters

00:39:36,770 --> 00:39:40,940
of your arm as well as optimizing your

00:39:39,260 --> 00:39:43,100
camera's location and the entrances and

00:39:40,940 --> 00:39:44,240
extends ex all those things they could

00:39:43,100 --> 00:39:45,980
have forgotten about a movement that are

00:39:44,240 --> 00:39:47,360
very important and additionally fetch

00:39:45,980 --> 00:39:49,670
robotics I just come out with a similar

00:39:47,360 --> 00:39:53,150
robot calibration tool that I recommend

00:39:49,670 --> 00:39:54,530
so move it is developing much slower

00:39:53,150 --> 00:39:57,260
than it used to so this is when willow

00:39:54,530 --> 00:39:59,930
garage closed is when you see the code

00:39:57,260 --> 00:40:02,330
kind of slowed down and so I want to

00:39:59,930 --> 00:40:06,700
kind of as a farewell message say that I

00:40:02,330 --> 00:40:09,140
want to see move it more agile more

00:40:06,700 --> 00:40:11,060
accepting of changes and pull requests

00:40:09,140 --> 00:40:12,800
and it's just have a struggle so we want

00:40:11,060 --> 00:40:14,150
to support industry partners and

00:40:12,800 --> 00:40:16,430
companies that are using movement we

00:40:14,150 --> 00:40:17,960
also want to allow academics and people

00:40:16,430 --> 00:40:19,910
who have new ideas and in better ways of

00:40:17,960 --> 00:40:21,680
using move it to contribute backs and so

00:40:19,910 --> 00:40:24,440
there's this tension of how do we

00:40:21,680 --> 00:40:26,150
balance this to like breaking API versus

00:40:24,440 --> 00:40:27,440
not like for example gazebos done a good

00:40:26,150 --> 00:40:29,180
job of being very sure about not

00:40:27,440 --> 00:40:31,010
breaking the API except between major

00:40:29,180 --> 00:40:33,470
releases but they do a lot of major

00:40:31,010 --> 00:40:35,630
releases so there's a lot of competitors

00:40:33,470 --> 00:40:38,330
like open rave in my teacher I've

00:40:35,630 --> 00:40:39,920
mentioned that have comparable

00:40:38,330 --> 00:40:42,070
functionality and I think if we don't

00:40:39,920 --> 00:40:43,850
keep move it developing and and

00:40:42,070 --> 00:40:45,620
accepting and changing it may be

00:40:43,850 --> 00:40:48,890
breaking the API it's going to fall

00:40:45,620 --> 00:40:50,420
behind in the overall capabilities so

00:40:48,890 --> 00:40:51,920
currently have 50 pull requests and

00:40:50,420 --> 00:40:54,020
they've been around for many months so I

00:40:51,920 --> 00:40:54,920
want to see those brought in more and we

00:40:54,020 --> 00:41:01,100
need things like continuous integration

00:40:54,920 --> 00:41:04,250
and more testing one proposal that I'm

00:41:01,100 --> 00:41:05,780
amount of time but as we I think be

00:41:04,250 --> 00:41:08,060
really good to consolidate move it into

00:41:05,780 --> 00:41:11,120
one repo there's always these errors

00:41:08,060 --> 00:41:13,040
where one git repo move it is out of

00:41:11,120 --> 00:41:14,570
sync with another or we make these pull

00:41:13,040 --> 00:41:15,980
requests and it says don't don't merge

00:41:14,570 --> 00:41:17,660
this one to emerge that 13 where's that

00:41:15,980 --> 00:41:19,100
one because we're distributed and I look

00:41:17,660 --> 00:41:20,390
at projects so we have a ton of

00:41:19,100 --> 00:41:22,700
different buzz right now for move-in I

00:41:20,390 --> 00:41:24,170
think one or two get repos would make

00:41:22,700 --> 00:41:25,790
this so much easier for developers to

00:41:24,170 --> 00:41:27,740
use and our us to move faster at our

00:41:25,790 --> 00:41:29,400
development I look at projects like

00:41:27,740 --> 00:41:31,650
opencv and pcl and

00:41:29,400 --> 00:41:33,720
they have these one get repos with many

00:41:31,650 --> 00:41:35,400
libraries & sub modules and I think move

00:41:33,720 --> 00:41:37,290
it needs to move in that way also I like

00:41:35,400 --> 00:41:40,020
to look at move it kind of like pcl an

00:41:37,290 --> 00:41:42,720
open CV but for motion planning so

00:41:40,020 --> 00:41:44,790
overall I love move it it's a successful

00:41:42,720 --> 00:41:47,960
because it's easier for beginners it

00:41:44,790 --> 00:41:50,280
needs more features and and my opinion

00:41:47,960 --> 00:41:52,770
stagnation should be the focus sipalay

00:41:50,280 --> 00:41:54,030
should be the focus but instead adding

00:41:52,770 --> 00:41:56,130
these new things and to make it better

00:41:54,030 --> 00:41:59,180
more powerful and yeah please contribute

00:41:56,130 --> 00:41:59,180
thank you

00:42:13,490 --> 00:42:19,740
yeah it's a hard problem we have the

00:42:17,220 --> 00:42:22,350
distribution you know Ross you know

00:42:19,740 --> 00:42:25,620
releases every every year now and and so

00:42:22,350 --> 00:42:27,270
that's the ideal way I'd say is to the

00:42:25,620 --> 00:42:29,250
next version be your development branch

00:42:27,270 --> 00:42:31,140
but in practice that's hard because we

00:42:29,250 --> 00:42:34,710
have all these limitations on fortune

00:42:31,140 --> 00:42:36,180
over 4 which is 12 04 vs LTS support and

00:42:34,710 --> 00:42:39,570
so like in reality a lot of us are

00:42:36,180 --> 00:42:41,970
sticking to its yes and yet as you know

00:42:39,570 --> 00:42:43,380
that's a problem that we're facing and

00:42:41,970 --> 00:42:45,450
and so I guess we could look to other

00:42:43,380 --> 00:42:48,210
projects and move it an outside open

00:42:45,450 --> 00:42:51,180
source projects and how they do that but

00:42:48,210 --> 00:42:53,970
we've been on zero-hour major version

00:42:51,180 --> 00:42:55,680
still below zero so technically you can

00:42:53,970 --> 00:42:56,910
change whatever but we don't want to do

00:42:55,680 --> 00:42:58,830
that maybe we should start doing major

00:42:56,910 --> 00:43:00,380
releases so that we can make those

00:42:58,830 --> 00:43:02,670
changes or just start move it too

00:43:00,380 --> 00:43:03,750
because you know Ross 2 point 0 coming

00:43:02,670 --> 00:43:08,370
up there'll be a lot of changes that we

00:43:03,750 --> 00:43:11,180
can integrate the same time maybe one

00:43:08,370 --> 00:43:11,180
one last question

00:43:18,590 --> 00:43:24,780
when you try to grasp an object how can

00:43:21,570 --> 00:43:26,640
you make how can you find out which is

00:43:24,780 --> 00:43:28,619
the object and which are actual

00:43:26,640 --> 00:43:30,420
collisions this is when you're ready

00:43:28,619 --> 00:43:33,030
find out was the ocean where the object

00:43:30,420 --> 00:43:35,130
is yeah because when you when you want

00:43:33,030 --> 00:43:37,170
to grasp an object and you're getting

00:43:35,130 --> 00:43:39,270
close to the object like with a climatic

00:43:37,170 --> 00:43:41,160
Ripper your arm or less colliding with

00:43:39,270 --> 00:43:44,970
the object and the gripper how do you

00:43:41,160 --> 00:43:46,470
know when to grasp the object or how do

00:43:44,970 --> 00:43:50,030
you know that you're not colliding that

00:43:46,470 --> 00:43:50,030
you won't actually want to grasp it and

00:43:50,420 --> 00:43:56,340
well so maybe tactile sensors are liquid

00:43:54,000 --> 00:43:57,450
if you have tactile feedback on your

00:43:56,340 --> 00:43:58,560
hands there's a lot of good companies

00:43:57,450 --> 00:44:00,540
now they're coming in with commercial

00:43:58,560 --> 00:44:03,540
products for this there's some very

00:44:00,540 --> 00:44:05,040
basic rules the pr 2s and papers about

00:44:03,540 --> 00:44:06,960
this and may other robots have to wear

00:44:05,040 --> 00:44:09,930
when you're moving in to the very

00:44:06,960 --> 00:44:12,660
fine-tuned last less piece of the pic

00:44:09,930 --> 00:44:14,160
motion if you sense a touch on one hand

00:44:12,660 --> 00:44:16,200
one side your fingers you move the other

00:44:14,160 --> 00:44:18,180
side or if you sense a detecting the

00:44:16,200 --> 00:44:20,730
from your fingers you should retract and

00:44:18,180 --> 00:44:22,410
then like adjust a little bit retune and

00:44:20,730 --> 00:44:23,520
so those fine-tune motions can make a

00:44:22,410 --> 00:44:26,490
huge difference in the number of

00:44:23,520 --> 00:44:28,680
successful grasp you can make and then

00:44:26,490 --> 00:44:29,700
visual surfing where you have since

00:44:28,680 --> 00:44:31,740
we're up here and you're looking down

00:44:29,700 --> 00:44:33,210
your object and your you see the frame

00:44:31,740 --> 00:44:35,130
of your hand in the frame of the object

00:44:33,210 --> 00:44:37,320
and keeping those aligned and like a

00:44:35,130 --> 00:44:41,240
real time loop is another way of really

00:44:37,320 --> 00:44:41,240

YouTube URL: https://www.youtube.com/watch?v=7ExGBEKfd5A


