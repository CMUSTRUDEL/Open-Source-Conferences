Title: Phobos Robot Model Development on Steroids ROSCon 2015 Hamburg Day 2 Kai von Szadkowski
Publication date: 2015-12-08
Playlist: ROSCon 2015
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2015 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,000 --> 00:00:03,659
I'm going to talk about robot model

00:00:02,070 --> 00:00:04,950
developments and hopefully by the end of

00:00:03,659 --> 00:00:06,779
this talk I convinced you that with

00:00:04,950 --> 00:00:07,470
Phobos it might be development on

00:00:06,779 --> 00:00:10,380
steroids

00:00:07,470 --> 00:00:12,509
so when I started to work at the

00:00:10,380 --> 00:00:14,280
University of Raymond two years ago the

00:00:12,509 --> 00:00:16,440
first one of the first assignments I got

00:00:14,280 --> 00:00:20,430
was I had to build a UDF model for our

00:00:16,440 --> 00:00:22,109
shiny new robots the mentis and you can

00:00:20,430 --> 00:00:24,330
see that's mentis so it's such a beauty

00:00:22,109 --> 00:00:26,160
complex a walking robot with six legs

00:00:24,330 --> 00:00:27,449
and many many degrees of freedom and

00:00:26,160 --> 00:00:28,949
though you're the F is rather

00:00:27,449 --> 00:00:33,719
complicated I mean this is not the

00:00:28,949 --> 00:00:35,489
entire UDF that's not the entire UVF and

00:00:33,719 --> 00:00:36,660
you can see it my computer is kind of

00:00:35,489 --> 00:00:40,500
breaking down because it's just too much

00:00:36,660 --> 00:00:41,700
and this finally is the entire EF and I

00:00:40,500 --> 00:00:43,469
guess you can't really see it anymore

00:00:41,700 --> 00:00:45,059
but if you can't see his mentor's

00:00:43,469 --> 00:00:47,010
anymore that's kind of the point it's

00:00:45,059 --> 00:00:50,039
just that much and there was no way I

00:00:47,010 --> 00:00:52,649
was going to write this by hand so I

00:00:50,039 --> 00:00:56,219
guess many of people who used was still

00:00:52,649 --> 00:00:58,550
do so I figured I have to come up with a

00:00:56,219 --> 00:01:01,289
way to kind of avoid that problem and

00:00:58,550 --> 00:01:03,960
that well that way ultimately became

00:01:01,289 --> 00:01:05,549
focused so there's already ways to kind

00:01:03,960 --> 00:01:07,290
of mitigate this with this problem and

00:01:05,549 --> 00:01:09,869
that's for example exact row which lets

00:01:07,290 --> 00:01:11,330
you kind of reuse part of you URI after

00:01:09,869 --> 00:01:13,710
you've already coded but it still

00:01:11,330 --> 00:01:17,400
requires you to code something yourself

00:01:13,710 --> 00:01:20,210
and then you have stuff like plug-ins

00:01:17,400 --> 00:01:22,890
for SolidWorks that exports the general

00:01:20,210 --> 00:01:24,920
kinematics to you at EF but most of

00:01:22,890 --> 00:01:26,820
these and I think that includes

00:01:24,920 --> 00:01:29,549
multiverse industrial guys we're talking

00:01:26,820 --> 00:01:31,140
about this cat to Ross and we have

00:01:29,549 --> 00:01:33,540
another tool at our Institute called

00:01:31,140 --> 00:01:36,450
catism so there's this ideas kind of

00:01:33,540 --> 00:01:38,340
been repeated a couple of times but they

00:01:36,450 --> 00:01:40,350
all include the engineers tinkering with

00:01:38,340 --> 00:01:42,840
the CED drawing a bit and these people

00:01:40,350 --> 00:01:45,180
don't usually like that and also if you

00:01:42,840 --> 00:01:47,009
don't happen to have SolidWorks which is

00:01:45,180 --> 00:01:48,960
a rather expensive piece of software

00:01:47,009 --> 00:01:50,610
you can see you liked you building a

00:01:48,960 --> 00:01:53,250
robot in your garage or something then

00:01:50,610 --> 00:01:55,170
that's also not really ideal I mean we

00:01:53,250 --> 00:01:56,700
this is all about open source right so

00:01:55,170 --> 00:01:59,549
the tools should be free and open source

00:01:56,700 --> 00:02:01,079
so what really is Phobos uhm formas is

00:01:59,549 --> 00:02:04,350
an add-on for the 3d modeling software

00:02:01,079 --> 00:02:06,570
blender and it happens to be free and

00:02:04,350 --> 00:02:08,550
open source and originally we started

00:02:06,570 --> 00:02:10,080
developing it for our own simulation

00:02:08,550 --> 00:02:12,190
tool which is called Mars and both of

00:02:10,080 --> 00:02:14,200
them you can actually get on

00:02:12,190 --> 00:02:17,320
now this leads us to the next question

00:02:14,200 --> 00:02:21,130
what is blender so blender is a 3d

00:02:17,320 --> 00:02:23,620
modeling tool comparable to 3ds max to

00:02:21,130 --> 00:02:25,210
cinema 4d it's really comprehensive you

00:02:23,620 --> 00:02:27,730
can do all the modeling you need you can

00:02:25,210 --> 00:02:30,730
do the geometry you can create materials

00:02:27,730 --> 00:02:32,380
you can even do animations and for

00:02:30,730 --> 00:02:34,240
animations it has something really

00:02:32,380 --> 00:02:35,980
useful called armatures which are kind

00:02:34,240 --> 00:02:37,840
of like you you can think of it as like

00:02:35,980 --> 00:02:39,970
kinematic skeletons for your animated

00:02:37,840 --> 00:02:43,660
characters something we're going to use

00:02:39,970 --> 00:02:45,880
later and it's also free and open source

00:02:43,660 --> 00:02:47,440
which is really a nice coincidence and

00:02:45,880 --> 00:02:49,210
it runs on all major platforms so

00:02:47,440 --> 00:02:51,790
anybody can really use it anywhere and

00:02:49,210 --> 00:02:54,220
it has a really nice and almost complete

00:02:51,790 --> 00:02:55,870
Python scripting API so anything you can

00:02:54,220 --> 00:02:58,000
do in blender by clicking and stuff you

00:02:55,870 --> 00:03:02,850
can actually also skip using Python and

00:02:58,000 --> 00:03:06,270
that's something we can make use of so

00:03:02,850 --> 00:03:08,260
when you look at what what you ODF

00:03:06,270 --> 00:03:10,210
consists of like the elements you have

00:03:08,260 --> 00:03:12,460
and what you haven't blended we actually

00:03:10,210 --> 00:03:15,070
see some nice parallels so in you RDF

00:03:12,460 --> 00:03:17,050
you have links which are kind of

00:03:15,070 --> 00:03:18,850
reference frames in your models and then

00:03:17,050 --> 00:03:20,680
we have joints which both define the

00:03:18,850 --> 00:03:22,900
relation like a spatial relation between

00:03:20,680 --> 00:03:25,150
those reference frames and also how

00:03:22,900 --> 00:03:27,400
these reference frames then can move how

00:03:25,150 --> 00:03:29,320
they are constrained and also we have

00:03:27,400 --> 00:03:31,270
visual and provision objects which get

00:03:29,320 --> 00:03:33,610
attached to the links so they exist in

00:03:31,270 --> 00:03:36,010
their reference frames to be able to

00:03:33,610 --> 00:03:38,740
represent the visualize the visual model

00:03:36,010 --> 00:03:40,840
of the robots and the collisions and and

00:03:38,740 --> 00:03:42,780
then you have pretty similar stuff I

00:03:40,840 --> 00:03:45,010
mean you have these armatures and bones

00:03:42,780 --> 00:03:47,380
which are part of these kinematic

00:03:45,010 --> 00:03:49,420
animation skeletons and you have

00:03:47,380 --> 00:03:51,310
geometric objects which could represent

00:03:49,420 --> 00:03:52,930
visual and collision objects so if you

00:03:51,310 --> 00:03:56,080
take a look at what it actually have in

00:03:52,930 --> 00:03:58,390
blender you have these bones and each of

00:03:56,080 --> 00:04:00,430
those has its own armature so so

00:03:58,390 --> 00:04:02,170
basically any one of those things you

00:04:00,430 --> 00:04:05,470
see here you have to think of as a as a

00:04:02,170 --> 00:04:07,690
link in your DF and basically the way

00:04:05,470 --> 00:04:09,520
the joint is defined and you can see

00:04:07,690 --> 00:04:11,260
from the orientation so you have these

00:04:09,520 --> 00:04:13,690
these bones and the long axis of that

00:04:11,260 --> 00:04:15,160
bone is the rotation axis of your joint

00:04:13,690 --> 00:04:18,100
or if you have a linear joint is the

00:04:15,160 --> 00:04:20,799
sliding axis and so by just arranging

00:04:18,100 --> 00:04:22,510
these these bones these links the way we

00:04:20,799 --> 00:04:23,050
can base basically build our kinematic

00:04:22,510 --> 00:04:25,449
scale

00:04:23,050 --> 00:04:28,449
and in this case for the space climber

00:04:25,449 --> 00:04:30,340
robot which is one of our robots and we

00:04:28,449 --> 00:04:32,259
just added the visuals so that's the

00:04:30,340 --> 00:04:34,229
visual representations we have then we

00:04:32,259 --> 00:04:36,460
have on another layer we have collision

00:04:34,229 --> 00:04:38,680
objects and we can all put it together

00:04:36,460 --> 00:04:43,449
in a complete model including sensors

00:04:38,680 --> 00:04:44,830
and whatever you want them there also if

00:04:43,449 --> 00:04:46,599
you look at the other way blender

00:04:44,830 --> 00:04:49,060
structures these models they are kind of

00:04:46,599 --> 00:04:50,650
a rocket be structured just in a similar

00:04:49,060 --> 00:04:53,020
fashion as they are in you RDF so you

00:04:50,650 --> 00:04:57,039
have these trees and if we now break up

00:04:53,020 --> 00:05:00,250
this this link here what we can see is

00:04:57,039 --> 00:05:02,080
that we directly attach the both the

00:05:00,250 --> 00:05:03,880
visual and the collision geometries to

00:05:02,080 --> 00:05:07,030
that link so they exists in the relative

00:05:03,880 --> 00:05:09,669
reference frame and you can even put in

00:05:07,030 --> 00:05:11,349
the next link relative to the toppling

00:05:09,669 --> 00:05:12,729
so basically the exact same structure

00:05:11,349 --> 00:05:16,030
that you have in your EF you can also

00:05:12,729 --> 00:05:17,740
represent in in blender and so what you

00:05:16,030 --> 00:05:19,300
effectively get when you work and then

00:05:17,740 --> 00:05:20,469
that you create you your DF models as

00:05:19,300 --> 00:05:23,710
you have like what you see is what you

00:05:20,469 --> 00:05:26,500
get experience right so you can well you

00:05:23,710 --> 00:05:27,840
start with your robot and this is not

00:05:26,500 --> 00:05:34,539
working

00:05:27,840 --> 00:05:37,599
it's W robot and you can basically from

00:05:34,539 --> 00:05:40,060
whatever way you put it from scratch so

00:05:37,599 --> 00:05:43,240
you get from CIT you can then import

00:05:40,060 --> 00:05:45,219
into blender you separate the visuals

00:05:43,240 --> 00:05:47,469
you get assess the actual geometry of

00:05:45,219 --> 00:05:50,409
the robot then you can create using the

00:05:47,469 --> 00:05:51,669
bounding boxes of these visuals the

00:05:50,409 --> 00:05:53,590
collision objects and you can even

00:05:51,669 --> 00:05:55,479
refine them creating multiple collision

00:05:53,590 --> 00:05:57,130
objects depending on how detailed you

00:05:55,479 --> 00:06:00,849
want to have it I really hope you can

00:05:57,130 --> 00:06:02,409
actually see this and well then you have

00:06:00,849 --> 00:06:03,880
to find a model and what you see in

00:06:02,409 --> 00:06:06,219
blender is exactly what you're going to

00:06:03,880 --> 00:06:10,479
export and later use and whatever tools

00:06:06,219 --> 00:06:12,520
you want to use your TF with so but I'll

00:06:10,479 --> 00:06:16,810
just said how do you import it from CID

00:06:12,520 --> 00:06:17,889
well there's multiple ways you can start

00:06:16,810 --> 00:06:20,080
with one of the tools I mentioned

00:06:17,889 --> 00:06:22,889
earlier and simply import the UAFS

00:06:20,080 --> 00:06:25,419
patrol already exists into blender and

00:06:22,889 --> 00:06:28,330
using forwards to refine it and to add

00:06:25,419 --> 00:06:31,180
all the other stuff but but you can also

00:06:28,330 --> 00:06:33,610
do if you if you don't want to write

00:06:31,180 --> 00:06:37,009
prep your CD models for that process you

00:06:33,610 --> 00:06:39,499
can actually simply export all

00:06:37,009 --> 00:06:42,740
you have like all the elements from cut

00:06:39,499 --> 00:06:45,229
in the same reference space using as STL

00:06:42,740 --> 00:06:46,669
files or Velma files and if you then

00:06:45,229 --> 00:06:49,069
import it into blender because blender

00:06:46,669 --> 00:06:50,719
can read all these formats they're

00:06:49,069 --> 00:06:52,729
basically all the elements are going to

00:06:50,719 --> 00:06:55,219
be placed correctly with respect to one

00:06:52,729 --> 00:06:58,249
another and what they can do then is you

00:06:55,219 --> 00:07:00,710
just basically select them all then you

00:06:58,249 --> 00:07:02,419
change the center of the center points

00:07:00,710 --> 00:07:05,089
the origins of each and every object to

00:07:02,419 --> 00:07:06,289
the geometric center of mass and then

00:07:05,089 --> 00:07:09,020
you can start working with that you can

00:07:06,289 --> 00:07:11,110
start adding your links and building

00:07:09,020 --> 00:07:14,240
your model

00:07:11,110 --> 00:07:16,330
so that's basically the interface of

00:07:14,240 --> 00:07:19,460
blender and we already talked about the

00:07:16,330 --> 00:07:21,830
hierarchy of objects up there and what

00:07:19,460 --> 00:07:23,930
we did for focus so created this atom

00:07:21,830 --> 00:07:26,870
which adds a whole new toolbar to the

00:07:23,930 --> 00:07:28,729
whole interface here and that's the

00:07:26,870 --> 00:07:29,839
sewer so here you have buttons to create

00:07:28,729 --> 00:07:32,839
links you have buttons to create

00:07:29,839 --> 00:07:34,729
collision geometries you can ask the

00:07:32,839 --> 00:07:37,580
attach motors you can attach sensors all

00:07:34,729 --> 00:07:38,959
these cool things to to kind of make

00:07:37,580 --> 00:07:40,969
your model a really functional you def

00:07:38,959 --> 00:07:42,529
model you have there and what you don't

00:07:40,969 --> 00:07:43,909
have there will be forgotten what might

00:07:42,529 --> 00:07:45,649
be is like tinkering to your own

00:07:43,909 --> 00:07:47,689
specific needs you can actually do

00:07:45,649 --> 00:07:49,159
yourself because we have scripting in

00:07:47,689 --> 00:07:50,509
blender you can write your own Python

00:07:49,159 --> 00:07:52,249
scripts and manipulate all the

00:07:50,509 --> 00:07:54,199
properties of all the objects so

00:07:52,249 --> 00:07:55,129
whatever we forgot you can script it and

00:07:54,199 --> 00:07:57,289
if it's really cool you can actually

00:07:55,129 --> 00:08:00,740
just will give us a pull request and we

00:07:57,289 --> 00:08:02,149
maybe will just included another feature

00:08:00,740 --> 00:08:04,969
that's really really cool about blender

00:08:02,149 --> 00:08:07,519
is that all the individual objects have

00:08:04,969 --> 00:08:09,529
their own set of nice custom properties

00:08:07,519 --> 00:08:11,479
so think of this as a Python dictionary

00:08:09,529 --> 00:08:13,699
that is attached to every single object

00:08:11,479 --> 00:08:16,219
in blender so that enables you to

00:08:13,699 --> 00:08:18,529
effectively take any property you want

00:08:16,219 --> 00:08:21,559
any number of strings you can even put

00:08:18,529 --> 00:08:23,300
in a dictionaries in there and attach it

00:08:21,559 --> 00:08:25,610
to these objects so for example in this

00:08:23,300 --> 00:08:27,019
case we have this link up here which at

00:08:25,610 --> 00:08:30,319
the same time remember it's the joint

00:08:27,019 --> 00:08:32,240
for it and we basically attach the motor

00:08:30,319 --> 00:08:35,089
by defining the maximum effort and speed

00:08:32,240 --> 00:08:38,000
of that motor and by defining PID values

00:08:35,089 --> 00:08:39,229
for the controller so everything really

00:08:38,000 --> 00:08:41,630
view you need to know what your model

00:08:39,229 --> 00:08:43,610
can be represented in blender and it's a

00:08:41,630 --> 00:08:47,029
really cool tool for that kind of

00:08:43,610 --> 00:08:48,260
modeling so I mentioned all these custom

00:08:47,029 --> 00:08:50,060
properties so what do we actually do

00:08:48,260 --> 00:08:50,649
with it well cuz I mean you have this

00:08:50,060 --> 00:08:52,480
represent

00:08:50,649 --> 00:08:55,360
blender of all these different objects

00:08:52,480 --> 00:08:58,269
and this rather for bit clunky so what

00:08:55,360 --> 00:09:00,879
we do is we create a Python dictionary

00:08:58,269 --> 00:09:02,649
where we take all the information put it

00:09:00,879 --> 00:09:03,970
in one place and then we can use that as

00:09:02,649 --> 00:09:06,309
a kind of interface for import and

00:09:03,970 --> 00:09:07,809
export so if you want to export to

00:09:06,309 --> 00:09:09,670
another format or you want to import

00:09:07,809 --> 00:09:11,259
from another format you don't need to

00:09:09,670 --> 00:09:12,730
know anything about robust you just need

00:09:11,259 --> 00:09:15,339
to know how this dictionary is defined

00:09:12,730 --> 00:09:18,490
and you can write your export script so

00:09:15,339 --> 00:09:21,069
it's really nicely manageable and as it

00:09:18,490 --> 00:09:23,769
also allows you to define new components

00:09:21,069 --> 00:09:26,139
like sensors for example which you can

00:09:23,769 --> 00:09:28,929
then just import and putting in that

00:09:26,139 --> 00:09:31,569
dictionary structure and of course it

00:09:28,929 --> 00:09:33,129
also simplifies debugging and further to

00:09:31,569 --> 00:09:35,829
be able to represent all this

00:09:33,129 --> 00:09:37,540
information we actually extended your AF

00:09:35,829 --> 00:09:40,119
because your DF doesn't really support

00:09:37,540 --> 00:09:41,709
senders and motors that well and so what

00:09:40,119 --> 00:09:43,839
we did we thought okay let's keep your

00:09:41,709 --> 00:09:45,699
AF for the kinematics and then add all

00:09:43,839 --> 00:09:48,100
the other information in an extended

00:09:45,699 --> 00:09:49,749
format which we like to call Smurfs what

00:09:48,100 --> 00:09:53,110
just happens to me in the Supplemental

00:09:49,749 --> 00:09:54,279
mostly universal robot format and so

00:09:53,110 --> 00:09:57,639
what we do is we have this kind of

00:09:54,279 --> 00:10:00,759
hierarchy of files where you have a UDF

00:09:57,639 --> 00:10:01,209
and then accompanying it there I am with

00:10:00,759 --> 00:10:03,279
us

00:10:01,209 --> 00:10:05,800
yum there's a lot nicer to read read the

00:10:03,279 --> 00:10:07,480
next ml and where you can define sensors

00:10:05,800 --> 00:10:09,819
for example you have a sensor that's

00:10:07,480 --> 00:10:11,740
attached to a link or you have a motor

00:10:09,819 --> 00:10:14,249
with which is attached to a joint so you

00:10:11,740 --> 00:10:16,749
can basically annotate the UDF without

00:10:14,249 --> 00:10:18,610
making a big mess with lots and lots of

00:10:16,749 --> 00:10:20,829
custom tags that nobody else will be

00:10:18,610 --> 00:10:23,079
able to read so we we have basically

00:10:20,829 --> 00:10:25,589
compatibility with your DF but we can

00:10:23,079 --> 00:10:28,720
attach anything we want

00:10:25,589 --> 00:10:30,610
so that Smurf and you don't have to stop

00:10:28,720 --> 00:10:32,649
there right because you have one Smurf

00:10:30,610 --> 00:10:34,179
in blender and then we have a second

00:10:32,649 --> 00:10:35,589
Smurf in blender somewhere else in the

00:10:34,179 --> 00:10:37,990
same scene so you already have the

00:10:35,589 --> 00:10:40,029
information of where these two robots

00:10:37,990 --> 00:10:42,100
are oriented with respect to one another

00:10:40,029 --> 00:10:44,620
so you can basically just by taking the

00:10:42,100 --> 00:10:46,749
global positions of these robots export

00:10:44,620 --> 00:10:50,290
them into a scene and then by using

00:10:46,749 --> 00:10:52,329
really F joints like floating or fixed

00:10:50,290 --> 00:10:55,119
weather and whatever you want to attach

00:10:52,329 --> 00:10:57,549
it to the scene you can basically build

00:10:55,119 --> 00:11:00,160
a whole scene file and we we don't get

00:10:57,549 --> 00:11:02,380
exporter SDF for gazebo but would really

00:11:00,160 --> 00:11:05,590
hope that somebody might want to do that

00:11:02,380 --> 00:11:07,570
at some point so really at the moment

00:11:05,590 --> 00:11:09,700
how we think of forwards is this kind of

00:11:07,570 --> 00:11:11,770
upstream tool so you get your model in

00:11:09,700 --> 00:11:13,570
there you export it to your the FN

00:11:11,770 --> 00:11:15,490
smooth and that's pretty much it we have

00:11:13,570 --> 00:11:16,870
some functionality already where you can

00:11:15,490 --> 00:11:19,000
if you have an updated version of you

00:11:16,870 --> 00:11:20,320
you AF can have gather information back

00:11:19,000 --> 00:11:22,990
and change things around a bit but

00:11:20,320 --> 00:11:24,250
there's still a bit experimental so to

00:11:22,990 --> 00:11:27,010
speak

00:11:24,250 --> 00:11:28,510
it has a nice pro that you have all the

00:11:27,010 --> 00:11:30,940
information in one place but at the same

00:11:28,510 --> 00:11:32,140
time blend the files of binaries so we

00:11:30,940 --> 00:11:35,020
have the problem that you really kind of

00:11:32,140 --> 00:11:36,970
create branches and merge back we were

00:11:35,020 --> 00:11:38,860
thinking about just exporting this whole

00:11:36,970 --> 00:11:40,570
Python dictionary and then importing all

00:11:38,860 --> 00:11:43,660
the information from there again to be

00:11:40,570 --> 00:11:45,490
able to make it nice and put it on the

00:11:43,660 --> 00:11:48,610
version control but that's also still

00:11:45,490 --> 00:11:52,080
something for future so that's basically

00:11:48,610 --> 00:11:54,340
Smurfs and how we extended you RAF and

00:11:52,080 --> 00:11:57,100
let's talk about current relevant cuz I

00:11:54,340 --> 00:11:58,810
think I'm running out of time here so we

00:11:57,100 --> 00:12:01,000
aren't github as I said so it's all free

00:11:58,810 --> 00:12:02,440
it's open source you can you can get it

00:12:01,000 --> 00:12:04,930
you can for case you can work on it if

00:12:02,440 --> 00:12:06,790
you want and we also have quite a lot of

00:12:04,930 --> 00:12:09,090
documentation already in place so in the

00:12:06,790 --> 00:12:12,520
wiki we have sort of user manual and

00:12:09,090 --> 00:12:14,230
github pages we have the documentation

00:12:12,520 --> 00:12:17,560
although I think it's a bit outdated at

00:12:14,230 --> 00:12:20,440
the moment to be else but we're working

00:12:17,560 --> 00:12:22,810
on that and we're also working on fully

00:12:20,440 --> 00:12:25,090
support the entire definition of UDF

00:12:22,810 --> 00:12:27,580
it's for example mimic joints i yet not

00:12:25,090 --> 00:12:30,400
really completely supported and also we

00:12:27,580 --> 00:12:31,990
have a problem in that we were

00:12:30,400 --> 00:12:34,570
developing this for our own simulation

00:12:31,990 --> 00:12:36,070
we had quite a lot of historic baggage

00:12:34,570 --> 00:12:38,080
of all these parameters we put in these

00:12:36,070 --> 00:12:40,450
models so the Python dictionary at the

00:12:38,080 --> 00:12:43,810
moment really represents kind of

00:12:40,450 --> 00:12:46,180
intermediate place where you have some

00:12:43,810 --> 00:12:48,070
definitions already nicely in place but

00:12:46,180 --> 00:12:49,600
some other stuff we just basically dump

00:12:48,070 --> 00:12:52,390
it in Yama just the way we use it in

00:12:49,600 --> 00:12:54,340
Mars in a simulation so moving on we

00:12:52,390 --> 00:12:56,350
definitely have to standardize this and

00:12:54,340 --> 00:12:58,840
specify for everybody to be usable and

00:12:56,350 --> 00:13:01,420
of course if you want to take part in

00:12:58,840 --> 00:13:03,280
that contributors are always welcome and

00:13:01,420 --> 00:13:04,960
with that I'd like to thank my

00:13:03,280 --> 00:13:06,640
contributors so far my two students

00:13:04,960 --> 00:13:08,920
who've been working on this for the past

00:13:06,640 --> 00:13:10,930
year and the guys who funded us at the

00:13:08,920 --> 00:13:13,290
alar and I'm happy to take your

00:13:10,930 --> 00:13:13,290
questions

00:13:15,140 --> 00:13:19,430
so the question was if we have any tools

00:13:17,839 --> 00:13:21,920
to reduce the model sizes because the

00:13:19,430 --> 00:13:24,800
the geometries you get from CID are

00:13:21,920 --> 00:13:26,329
really really complex and yes we do it's

00:13:24,800 --> 00:13:27,890
because blender is so awesome so

00:13:26,329 --> 00:13:30,200
basically in blender you have modern

00:13:27,890 --> 00:13:32,240
modifiers you can attach you can apply

00:13:30,200 --> 00:13:34,130
to these geometries that will reduce the

00:13:32,240 --> 00:13:37,130
amount of vertices in there so we have

00:13:34,130 --> 00:13:38,810
like a typical robot if you say is step

00:13:37,130 --> 00:13:41,810
with like a hundred megabytes that you

00:13:38,810 --> 00:13:44,260
get from exported geometry from CID we

00:13:41,810 --> 00:13:51,170
can break it down to probably ten

00:13:44,260 --> 00:13:52,399
depending on the geometry so the

00:13:51,170 --> 00:13:54,260
question is if we already have the

00:13:52,399 --> 00:13:56,920
animation our capability in blender if

00:13:54,260 --> 00:13:59,149
we also can use that you can have a live

00:13:56,920 --> 00:14:00,709
representation of the robot moving and

00:13:59,149 --> 00:14:02,420
yes we thought about that but I mean we

00:14:00,709 --> 00:14:04,970
already have a simulation that we use

00:14:02,420 --> 00:14:06,019
for lots of applications and there's but

00:14:04,970 --> 00:14:08,149
there's actually people who do that and

00:14:06,019 --> 00:14:10,279
there's a project called Moore's where

00:14:08,149 --> 00:14:12,709
they use blender because blender also

00:14:10,279 --> 00:14:15,140
has a physical simulation engine I think

00:14:12,709 --> 00:14:17,870
it's bullet where they actually simulate

00:14:15,140 --> 00:14:19,399
robots in blender I mean what I think is

00:14:17,870 --> 00:14:21,470
really nice about animation though is

00:14:19,399 --> 00:14:23,420
you can if you already have you a robot

00:14:21,470 --> 00:14:24,740
in blender and you can animate it I mean

00:14:23,420 --> 00:14:27,370
it's always nice for Public Relation

00:14:24,740 --> 00:14:27,370
material right

00:14:44,470 --> 00:14:58,730
well well that's that's the thing right

00:14:56,930 --> 00:15:00,560
I mean we really wanted to reduce the

00:14:58,730 --> 00:15:01,970
the number of tools you needed to use

00:15:00,560 --> 00:15:04,460
and we wanted to be able to have

00:15:01,970 --> 00:15:05,900
somebody just using this one tool to do

00:15:04,460 --> 00:15:07,820
all the robot modeling work they need

00:15:05,900 --> 00:15:09,260
and if you then start with free captain

00:15:07,820 --> 00:15:10,580
you export again then you still need to

00:15:09,260 --> 00:15:14,000
go through this transition of just

00:15:10,580 --> 00:15:17,320
changing all your meshes around and yeah

00:15:14,000 --> 00:15:17,320

YouTube URL: https://www.youtube.com/watch?v=o9wjujcNVSA


