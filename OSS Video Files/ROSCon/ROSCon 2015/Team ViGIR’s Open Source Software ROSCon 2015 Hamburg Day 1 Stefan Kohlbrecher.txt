Title: Team ViGIRâ€™s Open Source Software ROSCon 2015 Hamburg Day 1 Stefan Kohlbrecher
Publication date: 2015-12-08
Playlist: ROSCon 2015
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2015 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,030 --> 00:00:06,359
and this talk is basically three to four

00:00:03,389 --> 00:00:08,040
US contours wrote into one so I'll go a

00:00:06,359 --> 00:00:12,000
little fast because I have to have a lot

00:00:08,040 --> 00:00:17,540
of things yeah we've entrusted year C

00:00:12,000 --> 00:00:17,540
team bigger it'd be Mike's okay yeah

00:00:17,960 --> 00:00:24,750
okay then I briefly go over the

00:00:22,380 --> 00:00:29,099
infrastructure what we did in terms of

00:00:24,750 --> 00:00:30,539
infrastructure using Ross I provide the

00:00:29,099 --> 00:00:35,399
system overview about the open-source

00:00:30,539 --> 00:00:36,960
software we provide now go over the DRC

00:00:35,399 --> 00:00:39,360
finals results and then talk a little

00:00:36,960 --> 00:00:41,280
bit about the lessons learned so what is

00:00:39,360 --> 00:00:42,960
the robotics challenge did a pervert

00:00:41,280 --> 00:00:50,190
exchange is motivated by the Fukushima

00:00:42,960 --> 00:00:52,079
disaster and yet the idea is that what

00:00:50,190 --> 00:00:56,070
we have had a robot that can go into

00:00:52,079 --> 00:00:59,699
this into this disaster and can

00:00:56,070 --> 00:01:02,100
manipulate valves or so then much of

00:00:59,699 --> 00:01:04,080
this could have been averted and that's

00:01:02,100 --> 00:01:07,830
the press motivation for bringing this

00:01:04,080 --> 00:01:10,439
competition to life and the idea is to

00:01:07,830 --> 00:01:12,360
use human tools to have a human shape

00:01:10,439 --> 00:01:14,220
robot because then you can operate in

00:01:12,360 --> 00:01:17,220
human you know environments made for

00:01:14,220 --> 00:01:19,860
humans and you can use tools made for

00:01:17,220 --> 00:01:21,720
humans for instance you could drive a

00:01:19,860 --> 00:01:24,090
car with you robot this is the actual

00:01:21,720 --> 00:01:26,100
tasks of the DARPA Robotics Challenge so

00:01:24,090 --> 00:01:27,630
you first start your robot in a car

00:01:26,100 --> 00:01:33,720
drive down the course

00:01:27,630 --> 00:01:35,540
then get out go door opens I'll drill a

00:01:33,720 --> 00:01:38,070
hole into a wall stuff like that

00:01:35,540 --> 00:01:40,049
and you also have some options for

00:01:38,070 --> 00:01:42,000
example you can decide you could decide

00:01:40,049 --> 00:01:44,670
to only walk and not drive but then you

00:01:42,000 --> 00:01:47,640
would lose lose point so yeah what are

00:01:44,670 --> 00:01:50,009
the season dlc the challenges in terms

00:01:47,640 --> 00:01:52,619
of locomotion we have uneven terrain

00:01:50,009 --> 00:01:54,450
stairs and ladders motion with multiple

00:01:52,619 --> 00:01:59,000
contacts for example when getting out of

00:01:54,450 --> 00:02:01,979
a vehicle or getting up a ladder we have

00:01:59,000 --> 00:02:04,110
yeah we need perception we need to

00:02:01,979 --> 00:02:06,630
perceive the environment to have robust

00:02:04,110 --> 00:02:11,700
locomotion you need to perceive objects

00:02:06,630 --> 00:02:13,709
for performing manipulation you need the

00:02:11,700 --> 00:02:16,439
ability to acquire any object on the fly

00:02:13,709 --> 00:02:18,799
and this happening outside so you have

00:02:16,439 --> 00:02:22,170
to be robust outside lighting conditions

00:02:18,799 --> 00:02:25,739
yeah and we do manipulation we did

00:02:22,170 --> 00:02:27,540
manipulation in the DRC so there are

00:02:25,739 --> 00:02:31,620
different tools not all not known in

00:02:27,540 --> 00:02:34,019
advance so you have to on the fly adapt

00:02:31,620 --> 00:02:36,810
to the situation basically and with your

00:02:34,019 --> 00:02:38,700
robot and all that you have to do under

00:02:36,810 --> 00:02:41,639
limited communication to a human

00:02:38,700 --> 00:02:44,450
operator so you have to have a clever

00:02:41,639 --> 00:02:46,409
mix of autonomy and the cognitive

00:02:44,450 --> 00:02:48,840
capabilities of the operator playing

00:02:46,409 --> 00:02:51,840
into that for making this system really

00:02:48,840 --> 00:02:54,060
perform well so the matter challenges

00:02:51,840 --> 00:02:56,370
are really highly compressed timeline

00:02:54,060 --> 00:02:57,930
because all this took place in less than

00:02:56,370 --> 00:02:59,760
three years there were multiple

00:02:57,930 --> 00:03:01,530
competition events there was a virtual

00:02:59,760 --> 00:03:03,659
robotics challenge but we are the trials

00:03:01,530 --> 00:03:05,669
and the finals and for each of those you

00:03:03,659 --> 00:03:07,260
have to be ready and then there's of

00:03:05,669 --> 00:03:08,909
course systems integration we have a lot

00:03:07,260 --> 00:03:12,780
of components that have to come together

00:03:08,909 --> 00:03:15,540
and work and of course you have to have

00:03:12,780 --> 00:03:17,310
high reliability because you only have a

00:03:15,540 --> 00:03:19,859
few attempts at these tasks in the

00:03:17,310 --> 00:03:21,180
competition you can try it 10 times and

00:03:19,859 --> 00:03:24,150
make a nice video when it were at the

00:03:21,180 --> 00:03:26,250
10th time and you're done so it seemed

00:03:24,150 --> 00:03:28,109
bigger is a mix of institutions it's an

00:03:26,250 --> 00:03:29,400
international collaboration we started

00:03:28,109 --> 00:03:31,709
out as Virginia Germany

00:03:29,400 --> 00:03:34,319
interdisciplinary robotics and the name

00:03:31,709 --> 00:03:36,959
stuck first talk robotics the company

00:03:34,319 --> 00:03:40,109
from the US EU down stirred us Virginia

00:03:36,959 --> 00:03:42,030
Tech and then over the course of the

00:03:40,109 --> 00:03:44,819
project Cornell University lightness

00:03:42,030 --> 00:03:50,759
University and Oregon State University

00:03:44,819 --> 00:03:53,159
joined us unique about our team is that

00:03:50,759 --> 00:03:55,799
we spend nine times which of course also

00:03:53,159 --> 00:03:58,939
is a challenge because yeah you can't

00:03:55,799 --> 00:03:58,939
just run up to the other guy and

00:03:59,000 --> 00:04:04,319
complain to him about something else

00:04:01,939 --> 00:04:05,569
yeah we attract either we're a tricky

00:04:04,319 --> 00:04:08,340
team

00:04:05,569 --> 00:04:10,470
yes each participation from day one so

00:04:08,340 --> 00:04:11,849
we wrote a proposal we got funded for

00:04:10,470 --> 00:04:14,970
participation in the great Robotics

00:04:11,849 --> 00:04:16,889
Challenge we were six teams and for that

00:04:14,970 --> 00:04:18,509
reason got an Atlas robot then we

00:04:16,889 --> 00:04:21,239
participate in the trials and also in

00:04:18,509 --> 00:04:22,190
the finals the software is available on

00:04:21,239 --> 00:04:24,840
github

00:04:22,190 --> 00:04:26,500
nearly all software with the exception

00:04:24,840 --> 00:04:28,450
of the robot controller

00:04:26,500 --> 00:04:30,990
that uses force dynamics proprietary

00:04:28,450 --> 00:04:33,460
code and will not be useful to you guys

00:04:30,990 --> 00:04:35,950
and also the communicate communications

00:04:33,460 --> 00:04:37,570
bridge because that is very custom made

00:04:35,950 --> 00:04:41,620
and has to be cleaned up a little before

00:04:37,570 --> 00:04:43,330
we let it loose so let us know if you're

00:04:41,620 --> 00:04:46,150
interested in that there's actually

00:04:43,330 --> 00:04:48,430
other T there are other teams using our

00:04:46,150 --> 00:04:50,830
software at the DRC final steam Hector

00:04:48,430 --> 00:04:55,240
from - damn stud which is kind of a

00:04:50,830 --> 00:04:57,460
spinoff of my group we decided very late

00:04:55,240 --> 00:04:59,050
to also get an entry with our Tom a

00:04:57,460 --> 00:05:03,900
robot and team Bella

00:04:59,050 --> 00:05:06,070
from the track group at Virginia Tech

00:05:03,900 --> 00:05:08,020
there's also open source efforts by

00:05:06,070 --> 00:05:10,419
other competitors so we are not flaming

00:05:08,020 --> 00:05:13,060
we are the only ones and MIT did a very

00:05:10,419 --> 00:05:14,680
did a lot of very cool stuff like the

00:05:13,060 --> 00:05:16,660
pronto state estimator big direct

00:05:14,680 --> 00:05:20,530
planning and control framework using

00:05:16,660 --> 00:05:23,560
MATLAB and also now C++ it's very

00:05:20,530 --> 00:05:26,919
comprehensive system very cool they also

00:05:23,560 --> 00:05:28,990
have their user interface online so

00:05:26,919 --> 00:05:32,860
that's certainly something to look at

00:05:28,990 --> 00:05:35,620
then IMC of course who scored the second

00:05:32,860 --> 00:05:39,160
place at the DRC finals they have

00:05:35,620 --> 00:05:40,690
published their code as they have

00:05:39,160 --> 00:05:43,330
published their simulator anti

00:05:40,690 --> 00:05:45,280
controller iPad in binary form but I

00:05:43,330 --> 00:05:47,290
talked to them and they want to really

00:05:45,280 --> 00:05:51,100
do the full open source release this

00:05:47,290 --> 00:05:56,800
fall and I say this year to to encourage

00:05:51,100 --> 00:05:58,479
them to actually go yeah and the

00:05:56,800 --> 00:06:01,240
University of Tokyo also has extensive

00:05:58,479 --> 00:06:02,560
frost base software online I haven't

00:06:01,240 --> 00:06:04,240
seen them talking much about it but I

00:06:02,560 --> 00:06:06,790
wanted to state it here because it looks

00:06:04,240 --> 00:06:10,510
very useful after I briefly looked over

00:06:06,790 --> 00:06:14,140
it so hardware we use the dynamic Atlas

00:06:10,510 --> 00:06:15,790
robot hydraulically actuated our APIs is

00:06:14,140 --> 00:06:17,500
nicknamed Florian after the patron saint

00:06:15,790 --> 00:06:22,410
of firefighters very much in line with

00:06:17,500 --> 00:06:25,300
the whole topic of challenge response

00:06:22,410 --> 00:06:28,540
there's an API provided by Bosnian AMEX

00:06:25,300 --> 00:06:30,490
that allows the robot to perform walking

00:06:28,540 --> 00:06:32,740
and stepping motions and balancing and

00:06:30,490 --> 00:06:36,150
teams could use that or they could

00:06:32,740 --> 00:06:38,620
decide to grow their own controllers and

00:06:36,150 --> 00:06:41,070
if you use it you have some sort

00:06:38,620 --> 00:06:45,130
to some extent decoupling of upper-body

00:06:41,070 --> 00:06:45,780
motion from low-level balance control of

00:06:45,130 --> 00:06:48,520
course

00:06:45,780 --> 00:06:50,080
so there's actually not the Atlas robot

00:06:48,520 --> 00:06:53,380
there's multiple Atlas robots

00:06:50,080 --> 00:06:55,750
there's absolutely free that was in use

00:06:53,380 --> 00:06:57,550
till November 2014

00:06:55,750 --> 00:07:01,270
that one was tethered he sees the tether

00:06:57,550 --> 00:07:03,760
back there it had 60 F arms with with

00:07:01,270 --> 00:07:05,680
pretty bad kinematics because of the way

00:07:03,760 --> 00:07:08,650
they were mounted that was everybody was

00:07:05,680 --> 00:07:10,930
complaining about that so with Atlas V 4

00:07:08,650 --> 00:07:13,270
that actually got a battery in the back

00:07:10,930 --> 00:07:14,530
now they also changed the UM

00:07:13,270 --> 00:07:17,440
configuration for much better

00:07:14,530 --> 00:07:20,050
maneuverability and this machine also

00:07:17,440 --> 00:07:23,680
has three core i7 computers onboard for

00:07:20,050 --> 00:07:25,660
onboard computing because it's it's it's

00:07:23,680 --> 00:07:27,729
operating completely untethered and this

00:07:25,660 --> 00:07:29,979
one still has the 60 or FM's because

00:07:27,729 --> 00:07:33,820
these 70 or F arms in the final headless

00:07:29,979 --> 00:07:36,039
version came a little bit later and yeah

00:07:33,820 --> 00:07:39,250
and you can tell because these are these

00:07:36,039 --> 00:07:43,930
silvery thing is the last three joints

00:07:39,250 --> 00:07:46,000
are electric yeah so infrastructure we

00:07:43,930 --> 00:07:46,990
use for us eustress from the beginning

00:07:46,000 --> 00:07:48,849
because we have a lot of prior

00:07:46,990 --> 00:07:50,800
experience with it great community

00:07:48,849 --> 00:07:54,610
obviously not many robotics frameworks

00:07:50,800 --> 00:07:56,650
them clean filling like this yeah a lot

00:07:54,610 --> 00:08:00,900
of useful software of course and

00:07:56,650 --> 00:08:00,900
integration with your system was also

00:08:02,520 --> 00:08:08,740
our development

00:08:04,919 --> 00:08:10,419
happened in private gitlab repos but now

00:08:08,740 --> 00:08:12,789
basically everything with very few

00:08:10,419 --> 00:08:16,120
exceptions move to github and as I said

00:08:12,789 --> 00:08:19,479
we are operating over nine time zones so

00:08:16,120 --> 00:08:22,479
we used red mile and a lot for

00:08:19,479 --> 00:08:24,340
coordinating everything in tickets and

00:08:22,479 --> 00:08:28,960
hundreds of wiki pages for explaining

00:08:24,340 --> 00:08:31,810
how how things work yeah little

00:08:28,960 --> 00:08:33,880
different timeline we'll focus on

00:08:31,810 --> 00:08:37,659
infrastructure so I have here the Atlas

00:08:33,880 --> 00:08:39,339
versions and and Ubuntu versions and the

00:08:37,659 --> 00:08:41,469
most versions and Rossville and tap pain

00:08:39,339 --> 00:08:43,570
and there's a few things that are

00:08:41,469 --> 00:08:46,480
interesting so one thing is that

00:08:43,570 --> 00:08:48,100
actually the the newest Atlas version

00:08:46,480 --> 00:08:49,750
came pretty late for the teams and that

00:08:48,100 --> 00:08:51,660
was something that every other team has

00:08:49,750 --> 00:08:53,579
to cope with had to cope with

00:08:51,660 --> 00:08:55,440
pretty late we had those additional your

00:08:53,579 --> 00:08:57,899
degrees of freedom and had to adjust to

00:08:55,440 --> 00:09:05,550
that so so that was more on the

00:08:57,899 --> 00:09:10,980
technical side yeah we actually okay

00:09:05,550 --> 00:09:14,040
should I take sorry can we get them this

00:09:10,980 --> 00:09:16,519
Mike live it's pretty not a good idea to

00:09:14,040 --> 00:09:16,519
turn the head

00:09:24,370 --> 00:09:28,810
I'll go on so we don't lose too much

00:09:26,750 --> 00:09:28,810
time

00:09:29,090 --> 00:09:34,760
so so actually we use flat and groovy at

00:09:31,910 --> 00:09:36,200
the same time we used fret of solely for

00:09:34,760 --> 00:09:37,610
deer season and then groovy for

00:09:36,200 --> 00:09:45,170
everything else because we wanted to use

00:09:37,610 --> 00:09:47,870
this use the newest okay so we used it's

00:09:45,170 --> 00:09:50,030
actually only for deer season and groovy

00:09:47,870 --> 00:09:52,370
for our web space so that works in case

00:09:50,030 --> 00:09:56,420
anybody's wondering it's not super

00:09:52,370 --> 00:09:59,240
convenient but yeah the other thing that

00:09:56,420 --> 00:10:02,900
was nicely annoying was and I talked to

00:09:59,240 --> 00:10:05,150
you already about it is the switch from

00:10:02,900 --> 00:10:07,220
hydro to India go and simultaneously

00:10:05,150 --> 00:10:08,720
being forced to switch from one people

00:10:07,220 --> 00:10:11,030
who version to the other because then

00:10:08,720 --> 00:10:12,410
you have to really flow I mean really

00:10:11,030 --> 00:10:14,930
pull all your computers and stuff and

00:10:12,410 --> 00:10:17,750
that was kinda kinda annoying I'm not

00:10:14,930 --> 00:10:19,490
sure that can be done better but maybe

00:10:17,750 --> 00:10:22,220
point for discussion and the other thing

00:10:19,490 --> 00:10:24,050
is we we started out using raw spill and

00:10:22,220 --> 00:10:26,150
then it took a long time to get rid of

00:10:24,050 --> 00:10:28,430
hospitals so that was also fairly

00:10:26,150 --> 00:10:30,980
annoying but things got much better once

00:10:28,430 --> 00:10:34,580
we finally get rid of it that it took

00:10:30,980 --> 00:10:36,890
quite some time yeah some more points

00:10:34,580 --> 00:10:38,750
about infrastructure so with our

00:10:36,890 --> 00:10:41,480
humanoid robot in atlas versions it was

00:10:38,750 --> 00:10:44,030
kind of hard to manage the variability

00:10:41,480 --> 00:10:47,060
that we had three robot versions we have

00:10:44,030 --> 00:10:48,320
four hand types yeah you can do

00:10:47,060 --> 00:10:50,900
something if arguments and parameters

00:10:48,320 --> 00:10:54,230
and launch finds its kind of unrelated

00:10:50,900 --> 00:10:55,760
forward that stuff so we used

00:10:54,230 --> 00:10:57,560
environment variables it's it's

00:10:55,760 --> 00:10:59,780
something you can do I'm not saying it's

00:10:57,560 --> 00:11:01,070
the best approach and we generate the

00:10:59,780 --> 00:11:03,410
the oil of metal and onboard software

00:11:01,070 --> 00:11:06,880
setup at launch time so this is an

00:11:03,410 --> 00:11:09,080
excerpt from our Atlas model and you see

00:11:06,880 --> 00:11:11,120
this environment variables here and

00:11:09,080 --> 00:11:12,770
that's basically how we decide which

00:11:11,120 --> 00:11:19,460
enthalpy instantiate and which tend to

00:11:12,770 --> 00:11:21,620
be instantiate and so on yeah yeah and

00:11:19,460 --> 00:11:24,320
we also implemented a deployment

00:11:21,620 --> 00:11:27,790
infrastructure because we didn't find

00:11:24,320 --> 00:11:31,670
any that satisfied our requirements

00:11:27,790 --> 00:11:32,900
I'm glad to be proven wrong there so we

00:11:31,670 --> 00:11:34,640
have a complex system you have 300

00:11:32,900 --> 00:11:36,230
computers we have one team computer we

00:11:34,640 --> 00:11:37,410
have four operator control station

00:11:36,230 --> 00:11:39,150
computers

00:11:37,410 --> 00:11:41,870
we have have development cycles going to

00:11:39,150 --> 00:11:45,240
build and then deploy it everywhere

00:11:41,870 --> 00:11:47,190
yeah and for that we did some bash

00:11:45,240 --> 00:11:48,660
scripting and remote launch scripts that

00:11:47,190 --> 00:11:50,670
built using catkin

00:11:48,660 --> 00:11:52,290
doing a curtain install step deploy

00:11:50,670 --> 00:11:56,280
using our sink and then start stuff

00:11:52,290 --> 00:11:58,140
using SSH and screen and this is

00:11:56,280 --> 00:12:00,090
basically a folder with a remote launch

00:11:58,140 --> 00:12:01,680
setup and then you have per machine you

00:12:00,090 --> 00:12:03,540
have a launch script and then a

00:12:01,680 --> 00:12:05,370
different environment setup where you

00:12:03,540 --> 00:12:07,440
for example can set these robot type

00:12:05,370 --> 00:12:10,710
area Buhl's because that's the thing

00:12:07,440 --> 00:12:14,340
that you need to do if you use this

00:12:10,710 --> 00:12:16,320
environment setup approach another word

00:12:14,340 --> 00:12:18,240
about infrastructure simulation options

00:12:16,320 --> 00:12:19,980
because if you guys want to try stuff

00:12:18,240 --> 00:12:22,080
you probably want to simulate a robot

00:12:19,980 --> 00:12:24,660
you can't buy an atlas the next

00:12:22,080 --> 00:12:27,380
convenience store so but you can't

00:12:24,660 --> 00:12:29,550
actually download it for free

00:12:27,380 --> 00:12:31,650
yeah so the options are limited right

00:12:29,550 --> 00:12:33,540
now because if you want to simulate APIs

00:12:31,650 --> 00:12:35,880
you have to have the VDI interface but

00:12:33,540 --> 00:12:39,540
only DSU competitors of that so you

00:12:35,880 --> 00:12:41,460
can't really walk with the agency

00:12:39,540 --> 00:12:44,100
controller and simulator you can walk

00:12:41,460 --> 00:12:45,870
what you can't do manipulation but with

00:12:44,100 --> 00:12:48,660
the upcoming IHMC release you will be

00:12:45,870 --> 00:12:50,760
able to actually do both and what we

00:12:48,660 --> 00:12:55,320
provide already is simulation of our

00:12:50,760 --> 00:12:59,100
timing robot in gazebo 4 and in able to

00:12:55,320 --> 00:13:00,360
do manipulation yeah so now I'm going to

00:12:59,100 --> 00:13:02,610
talk a little bit about the different

00:13:00,360 --> 00:13:09,270
components this is a little bit

00:13:02,610 --> 00:13:10,980
simplistic but putting a giant so I

00:13:09,270 --> 00:13:13,530
start with the hardware and specifically

00:13:10,980 --> 00:13:15,630
the robot controller so we decided to

00:13:13,530 --> 00:13:17,670
use the VDI supplied behavior library

00:13:15,630 --> 00:13:18,720
because we are not whole body control

00:13:17,670 --> 00:13:22,140
and walking experts

00:13:18,720 --> 00:13:23,640
unlike HMC and MIT for example and for

00:13:22,140 --> 00:13:25,880
that reason we use the video I supplied

00:13:23,640 --> 00:13:28,920
that are walking stepping manipulating

00:13:25,880 --> 00:13:32,130
this is provided as a binary as a black

00:13:28,920 --> 00:13:34,740
box no source code also for DRC teams so

00:13:32,130 --> 00:13:37,740
you kind of have to take what you get

00:13:34,740 --> 00:13:39,450
and of course I mean Boston Dynamics was

00:13:37,740 --> 00:13:41,910
very helpful every time we had an issue

00:13:39,450 --> 00:13:43,520
they would respond and but it's still

00:13:41,910 --> 00:13:45,990
not the same thing as having source code

00:13:43,520 --> 00:13:50,190
yeah and of course it's not available to

00:13:45,990 --> 00:13:50,640
the general public but we are working on

00:13:50,190 --> 00:13:52,980
integrate

00:13:50,640 --> 00:13:54,270
the agency or body controller and we

00:13:52,980 --> 00:13:56,310
actually worked on implementing

00:13:54,270 --> 00:13:59,250
integrating it for the competition but

00:13:56,310 --> 00:14:04,380
time constraints just didn't allow for

00:13:59,250 --> 00:14:08,670
it yeah next up what you need is state

00:14:04,380 --> 00:14:12,150
estimation for your robot yeah you want

00:14:08,670 --> 00:14:13,560
to post estimate for your robot and with

00:14:12,150 --> 00:14:14,790
these big humanoids that have pretty

00:14:13,560 --> 00:14:16,950
good sensing you can't use like

00:14:14,790 --> 00:14:19,350
kinematics and IMU data and get a

00:14:16,950 --> 00:14:22,200
continuous but low drifting state

00:14:19,350 --> 00:14:23,850
estimate and we use an IT Sparano system

00:14:22,200 --> 00:14:26,580
for that it's very well tuned for the

00:14:23,850 --> 00:14:29,580
Atlas system but it uses the parts

00:14:26,580 --> 00:14:31,350
department system from MIT and also the

00:14:29,580 --> 00:14:32,930
LCM communication system cells in there

00:14:31,350 --> 00:14:36,450
were we had to do some plumbing

00:14:32,930 --> 00:14:38,010
interfacing these two worlds yeah and we

00:14:36,450 --> 00:14:40,050
didn't actually use the lighter or

00:14:38,010 --> 00:14:41,550
functionality because it's kind of kind

00:14:40,050 --> 00:14:43,380
of dangerous in non static environments

00:14:41,550 --> 00:14:45,480
because in the DRC final somebody could

00:14:43,380 --> 00:14:47,310
walk around and then suddenly you're all

00:14:45,480 --> 00:14:51,140
things it moved because somebody in the

00:14:47,310 --> 00:14:55,200
environment moved so we didn't do that

00:14:51,140 --> 00:14:57,840
yeah next up is perception so we did

00:14:55,200 --> 00:14:59,640
quite a few things there what you want

00:14:57,840 --> 00:15:01,290
is you what you want to provide

00:14:59,640 --> 00:15:03,810
situation awareness to the operators

00:15:01,290 --> 00:15:06,330
over the constraint link you can't just

00:15:03,810 --> 00:15:09,540
send the hundred megabytes per second of

00:15:06,330 --> 00:15:11,430
data you get from your senders and you

00:15:09,540 --> 00:15:13,650
want to provide a bird's that estimate

00:15:11,430 --> 00:15:16,200
for the robot because based on that you

00:15:13,650 --> 00:15:23,180
do collision avoidance both for food

00:15:16,200 --> 00:15:23,180
stop planning and manipulation yeah we

00:15:25,610 --> 00:15:31,140
different from the standard one that's

00:15:28,140 --> 00:15:33,780
coming with movie it's also updating the

00:15:31,140 --> 00:15:35,040
onboard environment map in real-time it

00:15:33,780 --> 00:15:40,200
provides a collisional model for the

00:15:35,040 --> 00:15:41,730
planner and it provides filtered by the

00:15:40,200 --> 00:15:42,930
data for the whole system that's a

00:15:41,730 --> 00:15:44,550
little bit different from what the

00:15:42,930 --> 00:15:48,210
standard one does because we annotate

00:15:44,550 --> 00:15:49,770
the lidar data with with transform

00:15:48,210 --> 00:15:52,920
information and then we can send it over

00:15:49,770 --> 00:15:55,350
the wire and reproduce the dhole points

00:15:52,920 --> 00:16:00,210
out basically on the on the operator

00:15:55,350 --> 00:16:02,490
control station side yeah and because of

00:16:00,210 --> 00:16:03,400
our constraint communication link we

00:16:02,490 --> 00:16:08,290
could only

00:16:03,400 --> 00:16:10,750
since dinner TVP packets we compress the

00:16:08,290 --> 00:16:14,350
lidar scans we split it into three and

00:16:10,750 --> 00:16:16,750
then discretize the distances and the

00:16:14,350 --> 00:16:20,560
intensities and what we also transmit is

00:16:16,750 --> 00:16:23,770
a bit that tells us if the lidar point

00:16:20,560 --> 00:16:24,940
is part of the robot or not because we

00:16:23,770 --> 00:16:29,050
want to have that on the operator

00:16:24,940 --> 00:16:31,810
station also to have filtered data for

00:16:29,050 --> 00:16:35,560
example not your bot arm in in the

00:16:31,810 --> 00:16:37,900
operator station yeah and we also had

00:16:35,560 --> 00:16:42,420
start and end to the ogle transform info

00:16:37,900 --> 00:16:44,740
so we can perfectly reproduce the scan

00:16:42,420 --> 00:16:47,470
yeah then we have a world model server

00:16:44,740 --> 00:16:50,080
or node that collects the lidar data and

00:16:47,470 --> 00:16:52,000
provides services to other nodes like

00:16:50,080 --> 00:16:53,529
point out regions of interest automatic

00:16:52,000 --> 00:16:55,540
regions of interest with maps and

00:16:53,529 --> 00:16:58,690
business queries and there are two

00:16:55,540 --> 00:17:00,820
instances running actually once on board

00:16:58,690 --> 00:17:03,430
the others on the OCS side and they they

00:17:00,820 --> 00:17:07,329
are saying we had this compress can

00:17:03,430 --> 00:17:09,040
approach yeah the other thing we looked

00:17:07,329 --> 00:17:11,860
into but we didn't really end up using

00:17:09,040 --> 00:17:14,290
and the finals is using fisheye cameras

00:17:11,860 --> 00:17:16,020
the fisheye camera is the situation

00:17:14,290 --> 00:17:18,250
awareness cameras on devolve are the

00:17:16,020 --> 00:17:21,040
images from those are kind of hard to

00:17:18,250 --> 00:17:23,980
interpret for humans so we calibrated

00:17:21,040 --> 00:17:27,490
the the camera using the open loop

00:17:23,980 --> 00:17:29,440
toolbox and now can basically create

00:17:27,490 --> 00:17:32,080
virtual pinhole cameras that follow TF

00:17:29,440 --> 00:17:34,750
frames that was useful and available

00:17:32,080 --> 00:17:37,210
online so if anybody is interested in

00:17:34,750 --> 00:17:40,179
that can use that the other pretty cool

00:17:37,210 --> 00:17:46,210
thing was smash metallization in Arvest

00:17:40,179 --> 00:17:49,800
so yeah we generate mesh data either

00:17:46,210 --> 00:17:52,720
from depth images or from lidar data and

00:17:49,800 --> 00:17:54,520
then we also take an average RGB image

00:17:52,720 --> 00:17:57,850
and then we texture map that in Arvest

00:17:54,520 --> 00:18:00,580
on to the texture map the mesh in RVs in

00:17:57,850 --> 00:18:02,170
real time using other function colors

00:18:00,580 --> 00:18:05,650
and that actually works pretty well and

00:18:02,170 --> 00:18:07,660
yeah on the left here you see the RGB

00:18:05,650 --> 00:18:11,770
and the depth image and on the right you

00:18:07,660 --> 00:18:13,640
see three of these novel views just a

00:18:11,770 --> 00:18:18,470
novice rotated around

00:18:13,640 --> 00:18:23,910
that's all also available

00:18:18,470 --> 00:18:26,070
yeah next up is what step planning this

00:18:23,910 --> 00:18:27,030
is actually were based on the work by I

00:18:26,070 --> 00:18:34,980
mean horn honk both

00:18:27,030 --> 00:18:37,140
very extensively extended yeah complex

00:18:34,980 --> 00:18:39,990
locomotion we have to do 3d perception

00:18:37,140 --> 00:18:42,990
we have to do safe sequences of foot

00:18:39,990 --> 00:18:45,630
foot placements with 60 degrees of

00:18:42,990 --> 00:18:47,730
freedom obstacle avoidance for example

00:18:45,630 --> 00:18:49,500
when going through a door and of course

00:18:47,730 --> 00:18:53,340
have to observe balance constraints of

00:18:49,500 --> 00:18:55,770
our robot we took a divide-and-conquer

00:18:53,340 --> 00:18:57,600
approach for that and just decoupled the

00:18:55,770 --> 00:18:59,610
terrain model generation from the three

00:18:57,600 --> 00:19:04,410
foot depending and obviously the rover

00:18:59,610 --> 00:19:07,890
controller so the terrain model

00:19:04,410 --> 00:19:09,960
generator is using aqueous back and

00:19:07,890 --> 00:19:11,940
doesn't grant incremental updates and

00:19:09,960 --> 00:19:13,890
also available as a standalone package

00:19:11,940 --> 00:19:16,110
linked yeah by the way so there are

00:19:13,890 --> 00:19:17,460
always links on the slides and when you

00:19:16,110 --> 00:19:21,750
have to PDF you can click on them and

00:19:17,460 --> 00:19:23,640
when you go there and that's how how the

00:19:21,750 --> 00:19:24,960
updater looks like so we have this

00:19:23,640 --> 00:19:27,690
feeling lighter and you see how the

00:19:24,960 --> 00:19:32,820
normal estimates are updated and also

00:19:27,690 --> 00:19:34,350
the height maps updated in return yeah

00:19:32,820 --> 00:19:36,900
originally this was a planning

00:19:34,350 --> 00:19:39,750
approaches all was only 2d capable so we

00:19:36,900 --> 00:19:42,980
it was extended to 3d the states become

00:19:39,750 --> 00:19:45,480
full 60 o F but the actions the OVA can

00:19:42,980 --> 00:19:47,340
perform remain the same because the roll

00:19:45,480 --> 00:19:50,250
pitch and step height are constrained by

00:19:47,340 --> 00:19:53,190
the underlying terrain so the search

00:19:50,250 --> 00:19:57,260
space doesn't enlarge and that makes

00:19:53,190 --> 00:19:59,880
planning not as slow as it could be and

00:19:57,260 --> 00:20:03,200
what we also do is ground contact

00:19:59,880 --> 00:20:07,230
estimation so we estimate where the

00:20:03,200 --> 00:20:09,840
contact between the foot and the ground

00:20:07,230 --> 00:20:11,940
is and that's this allows us to also

00:20:09,840 --> 00:20:17,160
plan with overhanging steps to some

00:20:11,940 --> 00:20:18,650
extent and before stepladder is very

00:20:17,160 --> 00:20:22,710
customizable

00:20:18,650 --> 00:20:24,560
there's a lot of inflection points where

00:20:22,710 --> 00:20:27,560
you can drop in plugins to

00:20:24,560 --> 00:20:31,370
Maria - to make your robot work with it

00:20:27,560 --> 00:20:33,440
and we already have we set ups basically

00:20:31,370 --> 00:20:36,590
one for Atlas one for Tom and one for

00:20:33,440 --> 00:20:38,570
the actual robot from VT this is a

00:20:36,590 --> 00:20:41,630
business default Stefan and action at

00:20:38,570 --> 00:20:46,190
the trials this shows going over the

00:20:41,630 --> 00:20:49,100
Chevron hurdle and you can see that at t

00:20:46,190 --> 00:20:53,330
robots actually doing this overlapping

00:20:49,100 --> 00:20:55,030
step 2 step 4 that's coming up that's

00:20:53,330 --> 00:21:01,820
actually overlapping that Chevron

00:20:55,030 --> 00:21:03,410
quite a bit now it's placing the right

00:21:01,820 --> 00:21:06,110
foot there and you can see that it's

00:21:03,410 --> 00:21:09,620
actually and there's and crossing that

00:21:06,110 --> 00:21:11,300
with Atlas is really only possible when

00:21:09,620 --> 00:21:13,370
you do that when you consider that

00:21:11,300 --> 00:21:17,150
because otherwise you can't get any

00:21:13,370 --> 00:21:18,680
footholds the other thing that's

00:21:17,150 --> 00:21:19,970
supported by the fox a plan and the

00:21:18,680 --> 00:21:21,800
operator control station is

00:21:19,970 --> 00:21:29,390
interactivity so you can break the goal

00:21:21,800 --> 00:21:31,640
and create a footstep plan and then you

00:21:29,390 --> 00:21:33,710
can actually you can modify single steps

00:21:31,640 --> 00:21:35,780
if you if you think if the operator

00:21:33,710 --> 00:21:39,620
things that something's wrong with this

00:21:35,780 --> 00:21:43,550
one step and you can edit it and and

00:21:39,620 --> 00:21:47,930
other steps also will indicate if they

00:21:43,550 --> 00:21:53,600
are still safe based on what one did to

00:21:47,930 --> 00:21:59,600
the other one yeah the next big thing of

00:21:53,600 --> 00:22:01,670
course is manipulation yeah what what we

00:21:59,600 --> 00:22:04,190
need we need collision free planning we

00:22:01,670 --> 00:22:06,440
need the capability to do Cartesian

00:22:04,190 --> 00:22:10,220
motions because for example for drilling

00:22:06,440 --> 00:22:11,810
hole in the wall there's a lot of

00:22:10,220 --> 00:22:14,630
contamination in contact with the

00:22:11,810 --> 00:22:15,920
environment and of course at the same

00:22:14,630 --> 00:22:20,750
time the robot should always maintain

00:22:15,920 --> 00:22:22,940
stability and what we want is we want to

00:22:20,750 --> 00:22:26,600
be able to assign autonomy so we want to

00:22:22,940 --> 00:22:28,850
basically if things go wrong but we also

00:22:26,600 --> 00:22:32,420
want to be able to in the middle ground

00:22:28,850 --> 00:22:34,670
have like an object based approach

00:22:32,420 --> 00:22:37,490
that's based on object templates and

00:22:34,670 --> 00:22:41,179
also the ability to just go fully on

00:22:37,490 --> 00:22:43,340
if things work correctly and we decided

00:22:41,179 --> 00:22:47,470
to use move it as a back end because it

00:22:43,340 --> 00:22:49,700
largely satisfies these requirements

00:22:47,470 --> 00:22:51,020
yeah the same thing that has taught

00:22:49,700 --> 00:22:53,450
before there are different robot

00:22:51,020 --> 00:22:55,490
variants and we actually use Sacro also

00:22:53,450 --> 00:22:58,220
for the movie config so I don't know if

00:22:55,490 --> 00:23:00,559
people do that but it works to some

00:22:58,220 --> 00:23:04,300
extent and you can actually also set up

00:23:00,559 --> 00:23:04,300
be collision disabling stuff

00:23:04,360 --> 00:23:09,800
yeah that's motion timing over you we

00:23:06,950 --> 00:23:12,050
basically have additional plugins in

00:23:09,800 --> 00:23:16,220
move group that do our own special stuff

00:23:12,050 --> 00:23:21,250
and the main thing is our bigger action

00:23:16,220 --> 00:23:24,770
that extends the standard fluid action

00:23:21,250 --> 00:23:26,929
goals who also support Cartesian goes

00:23:24,770 --> 00:23:30,200
Cartesian pathway points and circular

00:23:26,929 --> 00:23:31,670
motions and also specifying a reference

00:23:30,200 --> 00:23:33,559
point relative to the end effector

00:23:31,670 --> 00:23:35,690
because when you drill if you want to

00:23:33,559 --> 00:23:37,910
drill a hole in the wall you want to do

00:23:35,690 --> 00:23:42,890
this with a reference frame the drill

00:23:37,910 --> 00:23:44,510
bit is a reference frame basically yeah

00:23:42,890 --> 00:23:47,300
then we have an object template approach

00:23:44,510 --> 00:23:49,910
that's built on top of this additional

00:23:47,300 --> 00:23:53,330
loop action the operator places

00:23:49,910 --> 00:23:54,920
templates objects in the environment and

00:23:53,330 --> 00:23:59,990
then planning happens relative to these

00:23:54,920 --> 00:24:02,179
instantiate objects and the object

00:23:59,990 --> 00:24:05,660
temperate incorporate geometry mass

00:24:02,179 --> 00:24:07,040
inertia graphs and stand poses so place

00:24:05,660 --> 00:24:10,610
an object somewhere and then you

00:24:07,040 --> 00:24:12,620
immediately can send your robot yeah the

00:24:10,610 --> 00:24:15,230
other thing that we also use developed

00:24:12,620 --> 00:24:18,260
is this ghost robot that is somewhat

00:24:15,230 --> 00:24:21,350
similar to what the newest demo or

00:24:18,260 --> 00:24:23,960
Arvest plugin provides but it has some

00:24:21,350 --> 00:24:26,120
additional capabilities you can snap the

00:24:23,960 --> 00:24:28,370
end effector to objects so you can say

00:24:26,120 --> 00:24:30,590
snap to this drill and then your work

00:24:28,370 --> 00:24:33,500
will automatically snap to that and if

00:24:30,590 --> 00:24:37,070
you robot around it will still keep the

00:24:33,500 --> 00:24:38,690
hand there yeah you can move to move the

00:24:37,070 --> 00:24:40,429
ghost robot to stand poses relative to

00:24:38,690 --> 00:24:44,450
update templates you can selectively

00:24:40,429 --> 00:24:46,100
constrain joint limits yeah and based on

00:24:44,450 --> 00:24:46,559
the ghosts or robot you can send

00:24:46,100 --> 00:24:49,259
low-band

00:24:46,559 --> 00:24:51,570
planning refers directly from the OCS so

00:24:49,259 --> 00:24:54,029
in the ideal world this works like that

00:24:51,570 --> 00:24:57,419
you have an object your if your robot

00:24:54,029 --> 00:24:59,070
you get a point out of your objects you

00:24:57,419 --> 00:25:02,279
put your object template into the scene

00:24:59,070 --> 00:25:05,730
then you can click go

00:25:02,279 --> 00:25:09,269
send ghost to object 10 Yoga ghost robot

00:25:05,730 --> 00:25:10,950
will be sent there then you can play

00:25:09,269 --> 00:25:13,649
around with things and if you're

00:25:10,950 --> 00:25:17,360
satisfied you tell the system it should

00:25:13,649 --> 00:25:21,570
send a footsteps on and then off you go

00:25:17,360 --> 00:25:27,749
so this is an example of the planning

00:25:21,570 --> 00:25:31,529
system doing yeah an assistive motion

00:25:27,749 --> 00:25:37,230
with a paint roller so we can't reach

00:25:31,529 --> 00:25:40,289
the the valve and so we use this paint

00:25:37,230 --> 00:25:42,169
roller for example and this is actually

00:25:40,289 --> 00:25:47,220
using this object time side approach

00:25:42,169 --> 00:25:49,919
there's some valve template and paint

00:25:47,220 --> 00:25:52,139
roller template and we used that in

00:25:49,919 --> 00:26:00,389
conjunction with our Cartesian motion

00:25:52,139 --> 00:26:01,860
setup to to actually turn that now we're

00:26:00,389 --> 00:26:06,539
move it has a certain weakness this

00:26:01,860 --> 00:26:08,789
whole body motion so what we did is we

00:26:06,539 --> 00:26:10,980
developed a bridge to the MIT drag

00:26:08,789 --> 00:26:14,240
framework that allows planning all body

00:26:10,980 --> 00:26:17,990
motions and by just switching out the

00:26:14,240 --> 00:26:20,700
desired planner string in in our

00:26:17,990 --> 00:26:24,450
planning request we can switch to using

00:26:20,700 --> 00:26:25,950
break for planning and this is shown

00:26:24,450 --> 00:26:27,809
here this is full body inverse

00:26:25,950 --> 00:26:35,009
kinematics with Ito manga robot and

00:26:27,809 --> 00:26:38,549
picking up a pipe interconnecting the

00:26:35,009 --> 00:26:41,299
Ross move it works to the drake matlab

00:26:38,549 --> 00:26:41,299
world basically

00:26:44,910 --> 00:26:49,930
yeah then the next thing you want to do

00:26:47,380 --> 00:26:54,070
is we want to also be able to do

00:26:49,930 --> 00:26:55,600
autonomy so on the one hand we have

00:26:54,070 --> 00:26:57,190
communication constraints we have

00:26:55,600 --> 00:26:59,890
limited time we have a complex robot

00:26:57,190 --> 00:27:01,270
system so we want to go autonomous but

00:26:59,890 --> 00:27:04,000
on the other hand we have unstructured

00:27:01,270 --> 00:27:07,090
environments we have complex tasks and

00:27:04,000 --> 00:27:09,430
we need to be robust so that really is

00:27:07,090 --> 00:27:11,680
fear it's a good reason to have more

00:27:09,430 --> 00:27:13,960
operator support and and what we want to

00:27:11,680 --> 00:27:19,450
do is have this flexible collaboration

00:27:13,960 --> 00:27:21,580
between robot and operator so yeah

00:27:19,450 --> 00:27:25,120
exists existing behavior executors

00:27:21,580 --> 00:27:27,280
really mainly meant for pure autonomy so

00:27:25,120 --> 00:27:31,720
it's to start the thing and then it runs

00:27:27,280 --> 00:27:34,960
and that's it but we want multiple

00:27:31,720 --> 00:27:39,310
degrees of autonomy we want adapt to

00:27:34,960 --> 00:27:41,110
unforeseen situations yeah and we want

00:27:39,310 --> 00:27:44,380
to be able to quickly set up these

00:27:41,110 --> 00:27:46,420
behaviors so we develop this flexible

00:27:44,380 --> 00:27:47,770
behavior engine and the main developers

00:27:46,420 --> 00:27:49,660
actually here Phillip Schilling and he

00:27:47,770 --> 00:27:52,620
also has a team vigor t-shirt is back

00:27:49,660 --> 00:27:57,520
there so if you have detailed questions

00:27:52,620 --> 00:28:00,820
can also ask him it's based on smash it

00:27:57,520 --> 00:28:05,640
adds robot operator collaboration and a

00:28:00,820 --> 00:28:10,300
very sophisticated user interface and

00:28:05,640 --> 00:28:12,250
yeah so if flex the e state interfaces

00:28:10,300 --> 00:28:14,800
the basic mobile capabilities and how

00:28:12,250 --> 00:28:17,050
that works is essentially you have this

00:28:14,800 --> 00:28:19,390
on enter and there you send your action

00:28:17,050 --> 00:28:22,870
lab goal for example then in the execute

00:28:19,390 --> 00:28:24,610
you check for for the result and then

00:28:22,870 --> 00:28:27,070
based on that determine the outcome of

00:28:24,610 --> 00:28:31,510
your stage and then depending on that

00:28:27,070 --> 00:28:32,890
you end up in another state and then

00:28:31,510 --> 00:28:36,940
there's an autonomy level so you can

00:28:32,890 --> 00:28:39,580
basically during behavior design specify

00:28:36,940 --> 00:28:42,820
how much you trust the different parts

00:28:39,580 --> 00:28:46,540
of the system and then during runtime

00:28:42,820 --> 00:28:48,490
you can decide yeah well if the

00:28:46,540 --> 00:28:50,800
situation is pretty clear and there's

00:28:48,490 --> 00:28:52,480
nothing wrong happening you can go out

00:28:50,800 --> 00:28:54,610
on of you but if you see this that's

00:28:52,480 --> 00:28:56,530
fishy so I go to low autonomy and then

00:28:54,610 --> 00:28:58,960
your robot will start asking

00:28:56,530 --> 00:29:01,210
much more should I do this should I do

00:28:58,960 --> 00:29:06,540
this should I do that and then this way

00:29:01,210 --> 00:29:10,630
you can flexibly adjust to the situation

00:29:06,540 --> 00:29:13,750
that's also mechanism for data input

00:29:10,630 --> 00:29:17,650
over the OCS so the behavior can ask the

00:29:13,750 --> 00:29:19,450
operator for data and this is actually

00:29:17,650 --> 00:29:21,040
integrated with the operator control

00:29:19,450 --> 00:29:23,740
station for example II the behavior can

00:29:21,040 --> 00:29:25,330
ask for pose of an object and then there

00:29:23,740 --> 00:29:27,580
will be a pop up in the O's operator

00:29:25,330 --> 00:29:32,380
control station and then the operator

00:29:27,580 --> 00:29:35,020
can provide that data there's also the

00:29:32,380 --> 00:29:37,360
capability to do runtime changes so you

00:29:35,020 --> 00:29:40,000
can actually lock the behavior during

00:29:37,360 --> 00:29:42,130
runtime and then you can do

00:29:40,000 --> 00:29:46,150
modifications to the non lock part and

00:29:42,130 --> 00:29:48,730
then re-upload the modified behavior

00:29:46,150 --> 00:29:52,810
press play and then the modified

00:29:48,730 --> 00:29:56,590
behavior is run so you can do stuff yeah

00:29:52,810 --> 00:30:01,540
whatever you can really adapt this state

00:29:56,590 --> 00:30:03,610
machine on the fly also and there's like

00:30:01,540 --> 00:30:05,770
I said an extensive user interface that

00:30:03,610 --> 00:30:07,600
makes it very easy to develop behaviors

00:30:05,770 --> 00:30:08,830
because it's basically drag-and-drop you

00:30:07,600 --> 00:30:14,440
have the different states you can drag

00:30:08,830 --> 00:30:18,760
them in and based on that smash code is

00:30:14,440 --> 00:30:22,710
automatically generated so yeah it's a

00:30:18,760 --> 00:30:22,710
fully graphic user interface

00:30:24,150 --> 00:30:28,690
yeah here's some screenshots of that so

00:30:27,160 --> 00:30:31,480
you see these different states and then

00:30:28,690 --> 00:30:34,060
you can call you can copy parts and put

00:30:31,480 --> 00:30:37,210
them into another part of the state

00:30:34,060 --> 00:30:43,120
machine that's all possible that's the

00:30:37,210 --> 00:30:46,180
user interface actually a chrome app so

00:30:43,120 --> 00:30:47,980
that's how the runtime controller looks

00:30:46,180 --> 00:30:49,690
like you have the current state in the

00:30:47,980 --> 00:30:52,390
middle and then you have the possible

00:30:49,690 --> 00:30:56,140
outcomes going to the ride and you can

00:30:52,390 --> 00:30:59,860
click on these outcomes or you can do at

00:30:56,140 --> 00:31:02,110
the system do that automatically I have

00:30:59,860 --> 00:31:05,520
a video about this in a non DRC

00:31:02,110 --> 00:31:08,659
application but I'm gonna skip that and

00:31:05,520 --> 00:31:15,289
suggest you look that up online after

00:31:08,659 --> 00:31:16,849
talk for time reasons so the next thing

00:31:15,289 --> 00:31:19,399
you have to do is we have to communicate

00:31:16,849 --> 00:31:20,929
with our operator control station and

00:31:19,399 --> 00:31:25,090
that's done when our come spirit

00:31:20,929 --> 00:31:27,169
approach because of all the

00:31:25,090 --> 00:31:29,720
communication constraints it's of course

00:31:27,169 --> 00:31:32,749
unfeasible to use a single Ross master

00:31:29,720 --> 00:31:34,639
so because of the unreliable connections

00:31:32,749 --> 00:31:36,440
so we do use a dual master approach one

00:31:34,639 --> 00:31:39,830
on the OCS side and one on the onward

00:31:36,440 --> 00:31:42,080
side the data going over the concert is

00:31:39,830 --> 00:31:44,720
prioritized so a planning request has

00:31:42,080 --> 00:31:49,039
more priority of course than state data

00:31:44,720 --> 00:31:51,830
that comes regularly anyways hi right

00:31:49,039 --> 00:31:55,549
state data is treated specially because

00:31:51,830 --> 00:31:57,109
we compress it a lot because we know the

00:31:55,549 --> 00:31:59,509
joins only have this range and then we

00:31:57,109 --> 00:32:02,840
really use all these details to compress

00:31:59,509 --> 00:32:05,919
it other data generated data is

00:32:02,840 --> 00:32:09,710
compressed using the blob tools package

00:32:05,919 --> 00:32:14,929
that basically does bz2 compression by

00:32:09,710 --> 00:32:17,989
default and then we of course have an

00:32:14,929 --> 00:32:21,950
operator control station that you can

00:32:17,989 --> 00:32:24,559
see in some videos also this is based on

00:32:21,950 --> 00:32:27,409
the parvis we have three views that are

00:32:24,559 --> 00:32:28,999
separate processes one map do top down

00:32:27,409 --> 00:32:30,739
that you can actually do a rectangle

00:32:28,999 --> 00:32:33,190
selection and get region of interest

00:32:30,739 --> 00:32:37,239
data of the maps points our squid maps

00:32:33,190 --> 00:32:39,559
we have a main view that is to use for

00:32:37,239 --> 00:32:42,889
manipulation tasks basically or first

00:32:39,559 --> 00:32:46,729
our planning standard and the camera

00:32:42,889 --> 00:32:49,639
view for a camera visualization where

00:32:46,729 --> 00:32:53,499
you can also easily for example change

00:32:49,639 --> 00:32:55,820
alpha values for this augmented reality

00:32:53,499 --> 00:32:57,769
field that you also get with the iris

00:32:55,820 --> 00:33:00,049
camera display then we have multiple

00:32:57,769 --> 00:33:02,749
huge widgets for general controls like a

00:33:00,049 --> 00:33:04,940
ghost control for our ghost robot and

00:33:02,749 --> 00:33:10,369
widget for feet and joint configurations

00:33:04,940 --> 00:33:12,789
and things like that yes so there are

00:33:10,369 --> 00:33:17,379
certain instructions for complete setups

00:33:12,789 --> 00:33:17,379
online you can

00:33:17,750 --> 00:33:22,259
right now I like I said to not get a

00:33:20,429 --> 00:33:24,299
full atlas example but you can at least

00:33:22,259 --> 00:33:27,419
get a touring example that's for

00:33:24,299 --> 00:33:31,700
manipulation I have a video here I think

00:33:27,419 --> 00:33:31,700
I'm gonna play that during the questions

00:33:31,789 --> 00:33:36,059
so the other thing that's in work in

00:33:34,230 --> 00:33:40,490
progress right now it's behavior thin

00:33:36,059 --> 00:33:44,190
scissors building on top of the flexpayy

00:33:40,490 --> 00:33:49,799
engine approach this is done by the guys

00:33:44,190 --> 00:33:55,019
at Cornell here we use linear temporal

00:33:49,799 --> 00:33:58,230
logic to generate behavior we get on the

00:33:55,019 --> 00:34:02,820
fly basically you specify a high level

00:33:58,230 --> 00:34:04,590
goal and then be system figures out the

00:34:02,820 --> 00:34:07,679
state machine to fulfill that goal

00:34:04,590 --> 00:34:10,079
automatically and it's we are treating

00:34:07,679 --> 00:34:12,710
the outcomes of actions as adversarial

00:34:10,079 --> 00:34:15,929
because then you're basically guaranteed

00:34:12,710 --> 00:34:22,169
that you specify the the soma as your

00:34:15,929 --> 00:34:25,859
specification and this is probably hard

00:34:22,169 --> 00:34:28,950
to read but this is for example state

00:34:25,859 --> 00:34:33,089
machines generated for picking up an

00:34:28,950 --> 00:34:34,619
object from standing looking down lining

00:34:33,089 --> 00:34:36,720
the object and place going into

00:34:34,619 --> 00:34:38,760
manipulate mode and then picking up this

00:34:36,720 --> 00:34:47,940
is of course a relatively simple toy

00:34:38,760 --> 00:34:52,889
example but this is also yeah we also

00:34:47,940 --> 00:34:58,369
have a video of that so this is so long

00:34:52,889 --> 00:34:58,369
so maybe you can wiki watch it specify

00:34:58,400 --> 00:35:09,140
ego stage then this behaviour

00:35:04,950 --> 00:35:09,140
automatically generated

00:35:11,390 --> 00:35:18,760
and then you just see constant execution

00:35:15,320 --> 00:35:25,460
and your Atlas robot starts looking down

00:35:18,760 --> 00:35:27,260
and yeah the operator aligns this

00:35:25,460 --> 00:35:28,940
template so we don't have our Matic

00:35:27,260 --> 00:35:31,310
template alignment that's 3d or

00:35:28,940 --> 00:35:33,230
shortcoming because we we figured that

00:35:31,310 --> 00:35:34,850
we want to be a robust as possible and

00:35:33,230 --> 00:35:36,590
in these outside lighting conditions you

00:35:34,850 --> 00:35:44,950
can you never know so we always let the

00:35:36,590 --> 00:35:52,220
operator do that and yeah so that's

00:35:44,950 --> 00:35:54,590
picking up this drill yeah so what

00:35:52,220 --> 00:35:57,110
happened to DRC finals we decided not to

00:35:54,590 --> 00:35:58,790
do it girls because it would be a very

00:35:57,110 --> 00:36:00,290
significant development I thought that

00:35:58,790 --> 00:36:04,550
would be a lot different from everything

00:36:00,290 --> 00:36:06,920
else we do and also risk catastrophic

00:36:04,550 --> 00:36:09,230
damage to the robot and the other thing

00:36:06,920 --> 00:36:11,300
we did that would come to haunt us later

00:36:09,230 --> 00:36:12,710
is limited testing another you degrade

00:36:11,300 --> 00:36:14,150
it calms condition speed because we

00:36:12,710 --> 00:36:18,980
didn't have the exact same network

00:36:14,150 --> 00:36:25,640
emulator that provider so what happened

00:36:18,980 --> 00:36:27,980
first day we we are back there like

00:36:25,640 --> 00:36:32,750
there but the Indus cars a robot or

00:36:27,980 --> 00:36:36,650
abscess Florian and we slowly drive over

00:36:32,750 --> 00:36:38,570
the finish line so that's good then we

00:36:36,650 --> 00:36:42,500
get a penalty because we don't get we

00:36:38,570 --> 00:36:43,970
don't do egress like I said so it gets

00:36:42,500 --> 00:36:47,560
pulled out and then you get a 10-minute

00:36:43,970 --> 00:36:47,560
penalty penalty basis

00:36:51,319 --> 00:36:56,609
then you go on and and then we actually

00:36:54,599 --> 00:36:58,549
had a comms issue we couldn't send

00:36:56,609 --> 00:37:01,170
longer footstep plans and we couldn't

00:36:58,549 --> 00:37:03,239
use the behavior and improperly in this

00:37:01,170 --> 00:37:04,440
run so that was really bad and for that

00:37:03,239 --> 00:37:06,749
reason we had to switch to manual mode

00:37:04,440 --> 00:37:12,749
and everything worked but it was

00:37:06,749 --> 00:37:15,690
relatively slow so an out the door so

00:37:12,749 --> 00:37:17,819
that was has to go through there this is

00:37:15,690 --> 00:37:18,900
actually pretty hard because Atlas is

00:37:17,819 --> 00:37:23,359
such a big robot

00:37:18,900 --> 00:37:23,359
it's barely fitting to the store friends

00:37:25,730 --> 00:37:29,420
don't want to screw that up

00:37:30,230 --> 00:37:37,650
yeah next you go for the well yeah and

00:37:35,999 --> 00:37:39,150
here that you really see that we

00:37:37,650 --> 00:37:41,700
couldn't do professor planning because

00:37:39,150 --> 00:37:43,739
we are always just little primitive

00:37:41,700 --> 00:37:50,549
commands and that really took a little

00:37:43,739 --> 00:37:52,789
time so now turning the vast network

00:37:50,549 --> 00:37:52,789
well

00:37:56,300 --> 00:38:01,730
and now we are not going for the vault

00:37:58,610 --> 00:38:05,600
ass because it's much more risky we are

00:38:01,730 --> 00:38:09,020
going for the surprise task that is hard

00:38:05,600 --> 00:38:11,690
to see here and what you actually see is

00:38:09,020 --> 00:38:12,680
that the right wrist also gives out at

00:38:11,690 --> 00:38:17,960
some point

00:38:12,680 --> 00:38:20,180
yeah now and then 60 minutes were over

00:38:17,960 --> 00:38:23,060
so we're did the time go

00:38:20,180 --> 00:38:25,970
yeah yeah yeah it so we get flawless

00:38:23,060 --> 00:38:27,920
driving we had a coverage issue we

00:38:25,970 --> 00:38:32,030
switch to till up mode basically it

00:38:27,920 --> 00:38:35,750
worked but it was slow of course so they

00:38:32,030 --> 00:38:44,510
- we figure it well let's try driving a

00:38:35,750 --> 00:38:47,780
little faster yeah I mean it's probably

00:38:44,510 --> 00:38:49,780
a mix of communications problems and and

00:38:47,780 --> 00:38:55,130
the intention to drive a little faster

00:38:49,780 --> 00:38:59,110
so yeah we had to call a reset and then

00:38:55,130 --> 00:38:59,110
we drove again and this time it worked

00:39:06,790 --> 00:39:12,620
yeah and then disaster struck basically

00:39:10,210 --> 00:39:24,710
we opened the door everything was fine

00:39:12,620 --> 00:39:27,340
and then wait for it yeah the pump the

00:39:24,710 --> 00:39:30,380
pump shut down so we don't know why but

00:39:27,340 --> 00:39:32,060
the pump shut down we says we had an

00:39:30,380 --> 00:39:33,920
issue at the beginning of the run where

00:39:32,060 --> 00:39:35,660
where the arm wouldn't work and we had

00:39:33,920 --> 00:39:37,070
to robot out in the Sun for like 30

00:39:35,660 --> 00:39:39,850
minutes before we could actually start

00:39:37,070 --> 00:39:42,200
so we suspect that it might get too warm

00:39:39,850 --> 00:39:47,150
we don't know we probably will never

00:39:42,200 --> 00:39:51,020
know but this was bad so it's right

00:39:47,150 --> 00:39:52,460
again picking robot up second try going

00:39:51,020 --> 00:39:54,130
through the door but we said yeah

00:39:52,460 --> 00:40:00,220
probably was damaged somehow

00:39:54,130 --> 00:40:00,220
I need again through the doors yes so

00:40:01,369 --> 00:40:09,259
yeah so that definitely wasn't what they

00:40:04,579 --> 00:40:13,339
- wasn't our day yeah result three

00:40:09,259 --> 00:40:17,210
points that's which place we're in but

00:40:13,339 --> 00:40:20,119
that definitely wasn't wasn't as wasn't

00:40:17,210 --> 00:40:22,430
no way than we expected unfortunately we

00:40:20,119 --> 00:40:24,349
could have achieved seven points because

00:40:22,430 --> 00:40:27,049
because we decided not to do egress so

00:40:24,349 --> 00:40:29,630
and the top three teams all scored eight

00:40:27,049 --> 00:40:36,049
points so we couldn't have won anyway so

00:40:29,630 --> 00:40:37,969
that's like my good yeah we missed the

00:40:36,049 --> 00:40:39,979
chance that they want to do to the comms

00:40:37,969 --> 00:40:43,069
issue and the gay to thing is probably a

00:40:39,979 --> 00:40:45,440
hardware issue that just haunted us and

00:40:43,069 --> 00:40:48,410
the good thing was our dragon approach

00:40:45,440 --> 00:40:50,269
worked really well on both wats it used

00:40:48,410 --> 00:40:53,029
it so we also used that driving approach

00:40:50,269 --> 00:40:56,829
on the core robot and that the tall

00:40:53,029 --> 00:40:59,779
robot actually was faster that was good

00:40:56,829 --> 00:41:03,349
yeah still a little bit of a bummer at

00:40:59,779 --> 00:41:04,849
the end result but yeah the whole DRC

00:41:03,349 --> 00:41:07,160
experience was really fantastic and air

00:41:04,849 --> 00:41:09,890
all the teams where I mean everybody was

00:41:07,160 --> 00:41:11,539
collaborating we were losing our Polaris

00:41:09,890 --> 00:41:13,759
Ranger being equal to others and well

00:41:11,539 --> 00:41:16,130
it's our sides you didn't you didn't

00:41:13,759 --> 00:41:19,670
feel like adversaries it was more like

00:41:16,130 --> 00:41:21,680
teamwork and yeah going against this

00:41:19,670 --> 00:41:25,849
scenario and showing what robotics

00:41:21,680 --> 00:41:28,729
capable off basically yeah some lessons

00:41:25,849 --> 00:41:32,569
learned regarding Ross instead of using

00:41:28,729 --> 00:41:34,009
WS to turn it worked well for us yeah

00:41:32,569 --> 00:41:36,019
some coffee maybe we have some

00:41:34,009 --> 00:41:37,880
convenient scripts and that turned out

00:41:36,019 --> 00:41:39,440
to be helpful

00:41:37,880 --> 00:41:42,049
yeah keeping pace I talked about that

00:41:39,440 --> 00:41:44,329
already from hospital captain and hydro

00:41:42,049 --> 00:41:47,119
to India go that's something we didn't

00:41:44,329 --> 00:41:50,170
like but you can't I mean that that's

00:41:47,119 --> 00:41:52,609
happening in every system basically

00:41:50,170 --> 00:41:53,869
using planes captain make with a large

00:41:52,609 --> 00:41:56,359
project is a bad idea

00:41:53,869 --> 00:41:59,479
we actually use that for much too long

00:41:56,359 --> 00:42:01,309
and cut into it so much better so I

00:41:59,479 --> 00:42:04,190
would really recommend everybody to use

00:42:01,309 --> 00:42:07,130
captain to us yeah of course

00:42:04,190 --> 00:42:08,630
we we saw the limited communications

00:42:07,130 --> 00:42:09,740
capability or for us but I hear with

00:42:08,630 --> 00:42:14,240
loss to everything

00:42:09,740 --> 00:42:16,190
be awesome so well yeah and supporting

00:42:14,240 --> 00:42:18,140
different configurations of robots feels

00:42:16,190 --> 00:42:20,060
more involved than it should I think I

00:42:18,140 --> 00:42:21,950
don't know if our environment variable

00:42:20,060 --> 00:42:26,900
approach is right one of people have

00:42:21,950 --> 00:42:28,550
other ideas I don't know yeah some big

00:42:26,900 --> 00:42:29,960
picture lessons learned yeah having a

00:42:28,550 --> 00:42:32,060
transatlantic nine time zone team

00:42:29,960 --> 00:42:34,700
actually can work with the right mind

00:42:32,060 --> 00:42:36,980
scented people and tools of course yeah

00:42:34,700 --> 00:42:39,080
the DRC showed what is possible and it

00:42:36,980 --> 00:42:41,210
was really a brilliant display of the

00:42:39,080 --> 00:42:43,730
state of the art but it also showed that

00:42:41,210 --> 00:42:44,780
there's a long way to go to robots can

00:42:43,730 --> 00:42:47,150
be useful for you

00:42:44,780 --> 00:42:49,760
tasks like that everything was really

00:42:47,150 --> 00:42:53,960
slow still not only for us but even for

00:42:49,760 --> 00:42:55,760
the top teams yeah the other thing I

00:42:53,960 --> 00:42:57,290
didn't talk about is continuous

00:42:55,760 --> 00:42:58,580
integration we didn't really do much of

00:42:57,290 --> 00:43:00,770
that and that's really bad

00:42:58,580 --> 00:43:02,660
so you're really interested in getting

00:43:00,770 --> 00:43:07,160
simulation the loop testing and so on

00:43:02,660 --> 00:43:08,720
working because for projects like this

00:43:07,160 --> 00:43:11,270
is it's very important to have the full

00:43:08,720 --> 00:43:14,330
system because it's often breaks at the

00:43:11,270 --> 00:43:17,180
seams between components yeah in the end

00:43:14,330 --> 00:43:19,369
I think everybody wins because a giant

00:43:17,180 --> 00:43:21,140
leap with over right range of

00:43:19,369 --> 00:43:22,550
capabilities were sown in the GRC there

00:43:21,140 --> 00:43:24,790
has been a lot of open source

00:43:22,550 --> 00:43:27,200
developments cos Evo teams open-source

00:43:24,790 --> 00:43:28,640
releases and yeah like I talked about

00:43:27,200 --> 00:43:30,380
the incredible sportsmanship and

00:43:28,640 --> 00:43:34,010
cooperation in the DRC it was really

00:43:30,380 --> 00:43:37,100
great so overall that was really a great

00:43:34,010 --> 00:43:40,550
experience great - yes yeah so that's

00:43:37,100 --> 00:43:44,140
what I talked about and I'm nearly on

00:43:40,550 --> 00:43:44,140
time so thank you

00:43:48,760 --> 00:43:51,910
down there

00:44:09,380 --> 00:44:14,549
okay so let me repeat the question the

00:44:12,569 --> 00:44:18,270
question is if like anthropomorphic

00:44:14,549 --> 00:44:21,630
robots like the way to go or others

00:44:18,270 --> 00:44:23,430
right so I think I mean the DRC showed

00:44:21,630 --> 00:44:25,559
that there's a lot of promise in all

00:44:23,430 --> 00:44:27,960
this but it's I mean these robots are

00:44:25,559 --> 00:44:30,569
super expensive and they are not really

00:44:27,960 --> 00:44:32,880
reliable so I think it's good to see

00:44:30,569 --> 00:44:36,660
what is possible but I I see like small

00:44:32,880 --> 00:44:38,220
tracking because to be much closer to a

00:44:36,660 --> 00:44:39,420
real application obviously because I

00:44:38,220 --> 00:44:42,839
mean they are already in the real

00:44:39,420 --> 00:44:45,150
application just not as autonomous as we

00:44:42,839 --> 00:44:46,770
might want them to be of course if you

00:44:45,150 --> 00:44:48,720
have a humanoid robot that is as capable

00:44:46,770 --> 00:44:52,680
as a human then that would be preferable

00:44:48,720 --> 00:44:58,559
but we are on the way but we are only

00:44:52,680 --> 00:45:00,000
here and you have to go there by the way

00:44:58,559 --> 00:45:02,069
the video back there that's the tutorial

00:45:00,000 --> 00:45:07,549
you can download that and try it on your

00:45:02,069 --> 00:45:07,549
own computer so another question

00:45:12,420 --> 00:45:19,660
that's hindsight is 2020 so I mean you

00:45:15,520 --> 00:45:21,670
can talk all you want about what what

00:45:19,660 --> 00:45:23,440
you would have done better I don't I

00:45:21,670 --> 00:45:24,850
mean maybe you find except with this

00:45:23,440 --> 00:45:27,880
continuous integration example is

00:45:24,850 --> 00:45:29,860
something that really would would have

00:45:27,880 --> 00:45:37,680
we have would have been a benefited from

00:45:29,860 --> 00:45:42,900
that yeah it's hard to say really

00:45:37,680 --> 00:45:42,900
because afterwards you always wiser

00:45:43,410 --> 00:45:47,280
alright last question up here

00:45:54,369 --> 00:45:58,670
so the question is if we had to found

00:45:56,900 --> 00:46:02,270
some problems with real time and drawers

00:45:58,670 --> 00:46:04,540
so actually I mean you can make Ross

00:46:02,270 --> 00:46:08,540
real time with over cross and stuff so

00:46:04,540 --> 00:46:10,160
but the thing is the the low level

00:46:08,540 --> 00:46:12,800
control an atlas is actually running on

00:46:10,160 --> 00:46:15,200
a qnx real time system and we send a

00:46:12,800 --> 00:46:17,930
desired values and then we really the

00:46:15,200 --> 00:46:19,670
low level loop is closed on the qnx have

00:46:17,930 --> 00:46:23,540
real time system so we didn't really

00:46:19,670 --> 00:46:25,550
have that problem to some extent yeah

00:46:23,540 --> 00:46:30,190
but we used a real time free and carnal

00:46:25,550 --> 00:46:34,220
and read priorities and some hoops -

00:46:30,190 --> 00:46:36,349
yeah some I mean there are these special

00:46:34,220 --> 00:46:38,300
subscribers and stuff right publishes

00:46:36,349 --> 00:46:43,990
real time publishers and subscribers we

00:46:38,300 --> 00:46:43,990

YouTube URL: https://www.youtube.com/watch?v=WHtGb7qg_4Y


