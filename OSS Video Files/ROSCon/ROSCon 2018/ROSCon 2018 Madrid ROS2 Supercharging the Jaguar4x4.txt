Title: ROSCon 2018 Madrid ROS2 Supercharging the Jaguar4x4
Publication date: 2021-03-28
Playlist: ROSCon 2018
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2018 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,030 --> 00:00:04,920
hello I'm toffee Albina from Toyota

00:00:02,639 --> 00:00:07,919
research institute and i'm krista lanza

00:00:04,920 --> 00:00:10,910
from Oakland robotics and we're here to

00:00:07,919 --> 00:00:13,769
talk about supercharging the Jaguar 4x4

00:00:10,910 --> 00:00:18,720
first we'll give you this picture of the

00:00:13,769 --> 00:00:22,230
Jaguar 4x4 and enters the project we

00:00:18,720 --> 00:00:24,630
have this hardware platform and we're

00:00:22,230 --> 00:00:27,330
going to talk about the software we

00:00:24,630 --> 00:00:31,619
wrote for it base node manipulator node

00:00:27,330 --> 00:00:33,329
camera node and navigation for this

00:00:31,619 --> 00:00:35,600
product and then we'll do a quick

00:00:33,329 --> 00:00:39,270
wrap-up

00:00:35,600 --> 00:00:42,570
so first the platform so dr. robot

00:00:39,270 --> 00:00:45,329
Jaguar 4x4 it's an outdoor wheeled

00:00:42,570 --> 00:00:48,360
mobile base made by company called dr.

00:00:45,329 --> 00:00:50,399
robot it's a diff drive for wheels

00:00:48,360 --> 00:00:52,230
although we have actually replaced the

00:00:50,399 --> 00:00:55,739
rear wheels with casters so it's not

00:00:52,230 --> 00:00:59,760
four wheels it's like a two bike or bike

00:00:55,739 --> 00:01:02,789
I don't know what it is and it has

00:00:59,760 --> 00:01:07,010
access cameras GPS and IMU a laser

00:01:02,789 --> 00:01:09,060
scanner it has a read off gripper and

00:01:07,010 --> 00:01:12,659
manipulator well plus gripper and

00:01:09,060 --> 00:01:17,159
manipulator and comes with this robot is

00:01:12,659 --> 00:01:18,780
over Ethernet or Wireless with different

00:01:17,159 --> 00:01:25,430
IPS reports to talk to the base the

00:01:18,780 --> 00:01:29,159
camera MD manipulator project goals one

00:01:25,430 --> 00:01:30,680
partnership GRI is funding OS RC core

00:01:29,159 --> 00:01:33,720
Ross to development

00:01:30,680 --> 00:01:38,340
additionally TR eyes partnering with OS

00:01:33,720 --> 00:01:39,750
RC to develop rusty projects for TR I we

00:01:38,340 --> 00:01:42,060
wanted to get experience building a

00:01:39,750 --> 00:01:45,000
Rasta robot we wanted to answer a couple

00:01:42,060 --> 00:01:46,649
of questions is Ross to at a point where

00:01:45,000 --> 00:01:48,689
a robot can be controlled by a joystick

00:01:46,649 --> 00:01:51,869
is it at a point where a robot can

00:01:48,689 --> 00:01:53,759
complete navigation tasks to answer

00:01:51,869 --> 00:01:55,710
these questions we use the Jaguar 4x4

00:01:53,759 --> 00:01:57,479
since it's an existing platform that

00:01:55,710 --> 00:01:59,700
allows us allowed us to get started

00:01:57,479 --> 00:02:03,000
early while we're making our own custom

00:01:59,700 --> 00:02:04,920
hardware and we've open sourced all the

00:02:03,000 --> 00:02:07,469
code for the Ross 2 version of the

00:02:04,920 --> 00:02:09,640
Jaguar 4x4 and you can see the link

00:02:07,469 --> 00:02:14,440
there

00:02:09,640 --> 00:02:17,680
just a quick block diagram so we have a

00:02:14,440 --> 00:02:19,660
comp later talk to the robot and then we

00:02:17,680 --> 00:02:22,690
have a base node and an arm or

00:02:19,660 --> 00:02:25,960
manipulator node base note is controlled

00:02:22,690 --> 00:02:28,990
either by a twist going through the

00:02:25,960 --> 00:02:32,520
joystick or by now

00:02:28,990 --> 00:02:36,250
the arm is controlled by a joystick and

00:02:32,520 --> 00:02:40,600
then there's a access camera that puts

00:02:36,250 --> 00:02:45,010
up JPEGs and know to convert that JPEG

00:02:40,600 --> 00:02:47,050
to raw data so the rest of the talk will

00:02:45,010 --> 00:02:49,120
go into detail on this block diagram and

00:02:47,050 --> 00:02:50,890
we'll discuss some problems and that we

00:02:49,120 --> 00:02:52,900
encountered how to get multiple routes

00:02:50,890 --> 00:02:55,209
to callbacks executing in parallel how

00:02:52,900 --> 00:02:57,700
to use Ross to parameters for tuning and

00:02:55,209 --> 00:03:00,330
how to write new style Ross to you

00:02:57,700 --> 00:03:00,330
launch files

00:03:00,600 --> 00:03:08,470
alright so I'll start by talking about

00:03:02,950 --> 00:03:10,030
what we did for the base here so right

00:03:08,470 --> 00:03:11,830
for the base we want to do the normal

00:03:10,030 --> 00:03:14,230
stuff you want with a robotic base so

00:03:11,830 --> 00:03:17,320
get feedback from the robot encoders I

00:03:14,230 --> 00:03:20,019
am you temperature GPS all that all that

00:03:17,320 --> 00:03:22,480
good stuff we want to of course drop BL

00:03:20,019 --> 00:03:23,739
to drive the robot and then like we said

00:03:22,480 --> 00:03:26,560
autonomous if you drive to set distance

00:03:23,739 --> 00:03:27,820
so the two repositories that are sort of

00:03:26,560 --> 00:03:30,310
involved with the base there's the comms

00:03:27,820 --> 00:03:34,000
layer the common comms layer is in the

00:03:30,310 --> 00:03:35,709
the top one and then the base note that

00:03:34,000 --> 00:03:38,950
there are two base knows and that is in

00:03:35,709 --> 00:03:40,870
that bottom one so the that share comms

00:03:38,950 --> 00:03:42,670
library the reason we made it a library

00:03:40,870 --> 00:03:44,590
is because that the protocol that you

00:03:42,670 --> 00:03:47,380
use to talk to the the base and the arm

00:03:44,590 --> 00:03:49,480
is exactly the same so we just made a

00:03:47,380 --> 00:03:52,120
library and both of them think against

00:03:49,480 --> 00:03:54,880
it there's a lot going on sort of in the

00:03:52,120 --> 00:03:57,670
base so it's a it's a threaded it's a

00:03:54,880 --> 00:04:00,730
threaded node we use futures and

00:03:57,670 --> 00:04:03,280
promises the C++ either 11 or 14 I don't

00:04:00,730 --> 00:04:04,570
remember few years and promises to to

00:04:03,280 --> 00:04:06,730
communicate with the threads about

00:04:04,570 --> 00:04:09,579
starting up shutting down that that sort

00:04:06,730 --> 00:04:11,709
of stuff one of those threads is a ping

00:04:09,579 --> 00:04:13,269
thread of course which it's sort of a

00:04:11,709 --> 00:04:14,620
safety thread right you keep make sure

00:04:13,269 --> 00:04:16,930
that we're still talking to the robot

00:04:14,620 --> 00:04:18,669
and if that stops then we stop accepting

00:04:16,930 --> 00:04:20,320
all commands and try to attempt to send

00:04:18,669 --> 00:04:24,280
any stop down to the robe

00:04:20,320 --> 00:04:26,410
Motors there's also of course getting

00:04:24,280 --> 00:04:28,630
into the rust to stuff there's the twist

00:04:26,410 --> 00:04:31,210
callback where you know we take the

00:04:28,630 --> 00:04:33,100
command vel twist in and and convert it

00:04:31,210 --> 00:04:35,010
to motor powers

00:04:33,100 --> 00:04:36,880
there's the joystick callback to do

00:04:35,010 --> 00:04:39,700
software you stop which I'll talk more

00:04:36,880 --> 00:04:42,370
about in a minute there's also the

00:04:39,700 --> 00:04:44,890
opportunistic gyro bias so I call it

00:04:42,370 --> 00:04:47,200
opportunistic because the the gyro and

00:04:44,890 --> 00:04:49,150
this platform tends to drift a lot so

00:04:47,200 --> 00:04:54,970
anytime the robot is stopped we actually

00:04:49,150 --> 00:04:56,530
take a we take a bias reading to get

00:04:54,970 --> 00:04:59,950
again offset and so we can apply that

00:04:56,530 --> 00:05:02,890
offset to any future gyro readings and

00:04:59,950 --> 00:05:05,770
of course we do simple position updates

00:05:02,890 --> 00:05:08,110
from from odometry and then in the end

00:05:05,770 --> 00:05:13,120
to do the sort of drive a set distance

00:05:08,110 --> 00:05:14,710
we have a service so talking more about

00:05:13,120 --> 00:05:16,870
that that East stop the the reason

00:05:14,710 --> 00:05:19,180
that's kind of interesting is because we

00:05:16,870 --> 00:05:21,250
want the East the software-defined East

00:05:19,180 --> 00:05:24,340
stop to work in all situations the robot

00:05:21,250 --> 00:05:25,750
has of course a hardware each stop but

00:05:24,340 --> 00:05:27,280
that cuts power right and we have to

00:05:25,750 --> 00:05:30,310
restart everything and so it's it's

00:05:27,280 --> 00:05:31,240
pretty annoying to use so for most of

00:05:30,310 --> 00:05:35,320
our development we want to have a

00:05:31,240 --> 00:05:37,090
software slob and originally we just we

00:05:35,320 --> 00:05:38,380
just naively subscribed to the joystick

00:05:37,090 --> 00:05:40,990
channel and we had a button on the

00:05:38,380 --> 00:05:42,850
joystick and when you hit the button I

00:05:40,990 --> 00:05:44,140
would stop all you know stop all

00:05:42,850 --> 00:05:46,930
commands and send you stop down to the

00:05:44,140 --> 00:05:48,550
robot and that works except that it

00:05:46,930 --> 00:05:50,530
doesn't work in all contexts in

00:05:48,550 --> 00:05:52,540
particular it doesn't work if you have a

00:05:50,530 --> 00:05:54,220
long-running service or a long-running

00:05:52,540 --> 00:05:57,190
topic

00:05:54,220 --> 00:05:58,990
going because by default for us to

00:05:57,190 --> 00:06:02,890
services all the services and topics on

00:05:58,990 --> 00:06:05,680
a single thread in a single queue so the

00:06:02,890 --> 00:06:08,050
solution here is two parts that rust to

00:06:05,680 --> 00:06:09,400
has for this one is the multi-threaded

00:06:08,050 --> 00:06:12,190
executor so you can have multiple

00:06:09,400 --> 00:06:13,840
threads servicing callbacks but on its

00:06:12,190 --> 00:06:17,110
own that's actually not enough because

00:06:13,840 --> 00:06:20,170
that there's still only a single queue

00:06:17,110 --> 00:06:21,340
and you would still be the the while you

00:06:20,170 --> 00:06:23,650
have multiple threads the threads would

00:06:21,340 --> 00:06:25,840
still be blocked on the on the queue

00:06:23,650 --> 00:06:28,480
trying to waiting for the the other

00:06:25,840 --> 00:06:30,160
service to finish so you in addition to

00:06:28,480 --> 00:06:31,420
the multi executors you also add in the

00:06:30,160 --> 00:06:33,820
callback groups which you've heard a

00:06:31,420 --> 00:06:36,910
little bit about previously

00:06:33,820 --> 00:06:39,070
so we have leased all the callbacks in a

00:06:36,910 --> 00:06:42,430
particular group our hat are handled by

00:06:39,070 --> 00:06:45,100
by a thread so basically what we did is

00:06:42,430 --> 00:06:47,200
we made the base node have all callbacks

00:06:45,100 --> 00:06:49,120
on on one thread except for the joystick

00:06:47,200 --> 00:06:50,770
node for E stop which is handled on a

00:06:49,120 --> 00:06:52,630
separate thread or a separate callback

00:06:50,770 --> 00:06:54,850
group sorry to be clear get separate

00:06:52,630 --> 00:06:58,830
call that group and this is just some of

00:06:54,850 --> 00:07:01,180
the code to do it in main you end up

00:06:58,830 --> 00:07:03,280
creating a multi threaded executor and

00:07:01,180 --> 00:07:06,490
then you instantiate your Russ to node

00:07:03,280 --> 00:07:08,590
and then you add that node in and and

00:07:06,490 --> 00:07:11,440
spin on the executor so that's just the

00:07:08,590 --> 00:07:13,720
mouth filled executor so in the jagger

00:07:11,440 --> 00:07:15,520
four-by-four constructor when we

00:07:13,720 --> 00:07:17,920
actually go to make the subscription to

00:07:15,520 --> 00:07:20,020
the joystick you'll see we create we

00:07:17,920 --> 00:07:21,580
call create callback group which creates

00:07:20,020 --> 00:07:22,870
want a new callback group particularly

00:07:21,580 --> 00:07:24,760
for the joystick and then when we

00:07:22,870 --> 00:07:27,400
instantiate the subscription we use that

00:07:24,760 --> 00:07:29,830
callback group one small subtlety here

00:07:27,400 --> 00:07:31,120
is that you have to hold a handle to the

00:07:29,830 --> 00:07:33,160
callback group otherwise they'll be

00:07:31,120 --> 00:07:42,820
destroyed and will not work as you

00:07:33,160 --> 00:07:45,580
expect just a quick discussion about the

00:07:42,820 --> 00:07:47,080
manipulator node the goals for this one

00:07:45,580 --> 00:07:49,360
were to be able to get feedback from the

00:07:47,080 --> 00:07:51,250
manipulator you know the encoders etc to

00:07:49,360 --> 00:07:53,170
drive the manipulator via joystick and

00:07:51,250 --> 00:07:58,240
to autonomously move to a particular

00:07:53,170 --> 00:08:03,850
position in space the code for that one

00:07:58,240 --> 00:08:06,280
is in that repository you see there this

00:08:03,850 --> 00:08:08,740
is also a way from scratch C++ Ross to

00:08:06,280 --> 00:08:11,920
node it uses the shared comms library

00:08:08,740 --> 00:08:15,220
with the base it has a joystick callback

00:08:11,920 --> 00:08:20,170
for the e-stop and also buttons to move

00:08:15,220 --> 00:08:22,540
the shoulder and elbow joints uses the

00:08:20,170 --> 00:08:24,970
same writing concept as the base and the

00:08:22,540 --> 00:08:27,370
same pink thread concept as the base and

00:08:24,970 --> 00:08:33,760
we wrote a service to home the

00:08:27,370 --> 00:08:35,830
manipulator joints so in order to move

00:08:33,760 --> 00:08:38,919
to a specific place you need to know

00:08:35,830 --> 00:08:40,120
where the arm is and in order to do that

00:08:38,919 --> 00:08:41,870
when you need to calibrate the

00:08:40,120 --> 00:08:44,330
manipulator position

00:08:41,870 --> 00:08:46,820
it's not a home position by default so

00:08:44,330 --> 00:08:48,980
we were able to calibrate the shoulder

00:08:46,820 --> 00:08:51,980
joint the one you see down there in blue

00:08:48,980 --> 00:08:54,560
by using encoder feedback so move it

00:08:51,980 --> 00:08:56,089
until it's gonna hit rest in its base

00:08:54,560 --> 00:08:57,980
and then check the encoder counts and

00:08:56,089 --> 00:09:00,080
say oh it stopped we must be home to

00:08:57,980 --> 00:09:02,540
work we're happy we couldn't do the same

00:09:00,080 --> 00:09:05,960
thing for the elbow joint it was not a

00:09:02,540 --> 00:09:10,790
robust enough joint we kept basically

00:09:05,960 --> 00:09:12,140
popping it out of its socket so so our

00:09:10,790 --> 00:09:13,490
lesson learned here was that we can't

00:09:12,140 --> 00:09:16,460
actually calibrate this arm

00:09:13,490 --> 00:09:18,800
automatically so you have to joystick to

00:09:16,460 --> 00:09:25,910
a home position before you can control

00:09:18,800 --> 00:09:28,910
the arm autonomously there's also a

00:09:25,910 --> 00:09:34,760
camera which you can see right on top of

00:09:28,910 --> 00:09:39,440
the gripper circled in blue there it's

00:09:34,760 --> 00:09:41,360
an access camera Ethernet camera came

00:09:39,440 --> 00:09:44,089
with a Ross one driver and we ported

00:09:41,360 --> 00:09:48,980
that to Ross 2 and you can see our port

00:09:44,089 --> 00:09:51,290
there at that repository camera outputs

00:09:48,980 --> 00:09:54,080
JPEG and we wanted to use those images

00:09:51,290 --> 00:09:57,620
and so we wrote an ode to convert with

00:09:54,080 --> 00:10:02,740
JPEG to raw that's our Python node

00:09:57,620 --> 00:10:07,750
it's our only Python own in here and

00:10:02,740 --> 00:10:10,190
that's also available on the repository

00:10:07,750 --> 00:10:12,260
alright so I'll talk just a little bit

00:10:10,190 --> 00:10:16,010
about the navigation actor I'm gonna go

00:10:12,260 --> 00:10:17,570
since we're a little short on time so

00:10:16,010 --> 00:10:20,209
for the navigation rate as I said we

00:10:17,570 --> 00:10:21,740
want to go to a goal pose and navigate

00:10:20,209 --> 00:10:24,589
over short distance so we didn't really

00:10:21,740 --> 00:10:26,390
need anything that did closed loop so we

00:10:24,589 --> 00:10:28,610
just used the odometry and I and I am

00:10:26,390 --> 00:10:30,500
you to navigate over short distance we

00:10:28,610 --> 00:10:34,990
did this as a service it's actually a

00:10:30,500 --> 00:10:37,910
separate node with a service and so that

00:10:34,990 --> 00:10:40,070
with that we were all we also made a

00:10:37,910 --> 00:10:41,450
bunch of parameters on the node 4 so we

00:10:40,070 --> 00:10:43,370
as we were developing the node we could

00:10:41,450 --> 00:10:46,700
easily tune the constants and the code

00:10:43,370 --> 00:10:48,800
is listed there I want to talk a little

00:10:46,700 --> 00:10:50,480
bit more about parameters it you've seen

00:10:48,800 --> 00:10:52,459
a few things about parameters already so

00:10:50,480 --> 00:10:54,010
though I think the one thing that's

00:10:52,459 --> 00:10:55,990
different here

00:10:54,010 --> 00:10:58,450
what you've seen before is the in the

00:10:55,990 --> 00:11:00,760
canoe you can see there in the class

00:10:58,450 --> 00:11:03,250
constructor that we call set parameter

00:11:00,760 --> 00:11:05,380
if not set so what this ensures is that

00:11:03,250 --> 00:11:08,110
it ensures that the the parameters show

00:11:05,380 --> 00:11:11,020
up when the note starts no matter what

00:11:08,110 --> 00:11:13,560
so in rust 2 we can either set

00:11:11,020 --> 00:11:17,320
parameters through the command line

00:11:13,560 --> 00:11:19,870
functions rust to params set and get we

00:11:17,320 --> 00:11:21,100
can list them but they can also be set

00:11:19,870 --> 00:11:22,750
from the command from the command line

00:11:21,100 --> 00:11:25,420
when you're launching the note in a Yama

00:11:22,750 --> 00:11:27,880
file so the set parameter if not set

00:11:25,420 --> 00:11:29,590
right will if the if the parameters come

00:11:27,880 --> 00:11:31,450
in from the ammo file separate now set

00:11:29,590 --> 00:11:32,770
is essentially no op but if they're not

00:11:31,450 --> 00:11:35,140
set in the ammo file if you're just

00:11:32,770 --> 00:11:37,150
launching it to see what happened it'll

00:11:35,140 --> 00:11:39,130
take those sort of default parameters

00:11:37,150 --> 00:11:41,110
and then you can modify them later so

00:11:39,130 --> 00:11:43,390
this whole set up there and and then

00:11:41,110 --> 00:11:45,070
going to the where we use it in the go

00:11:43,390 --> 00:11:47,050
to goal XY we you know we go and get the

00:11:45,070 --> 00:11:48,760
parameter and then into the into those

00:11:47,050 --> 00:11:50,830
variables and then we can use them so

00:11:48,760 --> 00:11:53,770
this whole setup here means that while

00:11:50,830 --> 00:11:55,960
you're developing you can easily switch

00:11:53,770 --> 00:11:57,790
the parameters up as you want by you

00:11:55,960 --> 00:12:00,070
know setting them and getting them and

00:11:57,790 --> 00:12:01,390
and tweaking and tuning and then when

00:12:00,070 --> 00:12:04,060
you find a set of constants that you

00:12:01,390 --> 00:12:06,160
like you can put in the ammo file and

00:12:04,060 --> 00:12:07,540
and it'll just launch it with that and

00:12:06,160 --> 00:12:09,250
that way it'll always be

00:12:07,540 --> 00:12:14,260
what you want without having to

00:12:09,250 --> 00:12:15,880
recompile your code for it and then so

00:12:14,260 --> 00:12:17,620
talking about watching then again you've

00:12:15,880 --> 00:12:19,990
seen a lot about launching already today

00:12:17,620 --> 00:12:21,730
the one the one difference here I'll

00:12:19,990 --> 00:12:22,870
show so this one launches this launch

00:12:21,730 --> 00:12:24,700
file launches a couple different things

00:12:22,870 --> 00:12:27,610
that this one launches the the base and

00:12:24,700 --> 00:12:29,620
the tele up twist joy the the important

00:12:27,610 --> 00:12:31,660
bit is that if you see them tally up

00:12:29,620 --> 00:12:33,970
twist joy when it does launch rust that

00:12:31,660 --> 00:12:35,050
actions that node the arguments it

00:12:33,970 --> 00:12:37,540
passes is the underscore underscore

00:12:35,050 --> 00:12:41,290
params : equals and that allows you to

00:12:37,540 --> 00:12:46,330
pass that yamo file in and and get those

00:12:41,290 --> 00:12:48,070
parameters at launch time so and then we

00:12:46,330 --> 00:12:52,840
have a couple videos we'll see if they

00:12:48,070 --> 00:12:54,430
work about the so this the first video

00:12:52,840 --> 00:12:55,990
right we're just we're just calling the

00:12:54,430 --> 00:12:57,310
service on the navigation note to go to

00:12:55,990 --> 00:13:00,220
goalposts straight on

00:12:57,310 --> 00:13:05,110
you know we tell it act in the X 3

00:13:00,220 --> 00:13:07,870
meters and the y 0 meters and

00:13:05,110 --> 00:13:10,390
ah it does but you can't see it all

00:13:07,870 --> 00:13:12,370
right well I'm just gonna go there so

00:13:10,390 --> 00:13:14,560
yeah so right we're just driving just

00:13:12,370 --> 00:13:17,620
driving straight forward there and then

00:13:14,560 --> 00:13:21,160
the other the other one we're trying to

00:13:17,620 --> 00:13:22,510
hit the two two off the off the edge

00:13:21,160 --> 00:13:26,500
there

00:13:22,510 --> 00:13:29,090
and this one you know Wiggles it's a

00:13:26,500 --> 00:13:32,630
happy robot the drunk robot maybe

00:13:29,090 --> 00:13:32,630
[Laughter]

00:13:35,850 --> 00:13:44,380
alright so we'll talk a little bit about

00:13:41,080 --> 00:13:46,510
future work and then wrap it up so a

00:13:44,380 --> 00:13:49,090
future work do a little more work on the

00:13:46,510 --> 00:13:52,120
gyro and then integrate the gyro and the

00:13:49,090 --> 00:13:57,340
odometry you know just do the Nek off

00:13:52,120 --> 00:14:01,030
and robot pose make a navigation PID

00:13:57,340 --> 00:14:03,700
loop right now we got a P loop maybe use

00:14:01,030 --> 00:14:06,220
move base and then rewrite JPEG Tehran

00:14:03,700 --> 00:14:07,900
C++ because it's a lot slower otherwise

00:14:06,220 --> 00:14:13,720
and then try running this with

00:14:07,900 --> 00:14:16,330
cartographer so just to wrap up we

00:14:13,720 --> 00:14:21,250
created a bare-bones Jaguar 4x4 system

00:14:16,330 --> 00:14:23,910
in Ross - and there's a pointer to the

00:14:21,250 --> 00:14:26,290
sort of top of the repositories for that

00:14:23,910 --> 00:14:29,590
we satisfactorily answered our questions

00:14:26,290 --> 00:14:30,900
about Ross - usability yeah we can do

00:14:29,590 --> 00:14:32,830
joystick control we can do now

00:14:30,900 --> 00:14:35,620
everything done in Ross - you want a

00:14:32,830 --> 00:14:37,950
robot we're continuing to develop a more

00:14:35,620 --> 00:14:40,210
full-featured system on custom hardware

00:14:37,950 --> 00:14:42,070
we'll continue to release software to

00:14:40,210 --> 00:14:45,040
the Ross to community and we're gonna

00:14:42,070 --> 00:14:49,020
continue the TR iOS RC partnership and

00:14:45,040 --> 00:14:49,020
Ross to collaboration

00:14:49,890 --> 00:14:54,260

YouTube URL: https://www.youtube.com/watch?v=jlMZMeu1mEA


