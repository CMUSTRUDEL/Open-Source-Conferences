Title: ROSCon 2018 Madrid LT1 4 Mixed Real Time Criticality with ROS2   the Callback group level Executor
Publication date: 2021-03-28
Playlist: ROSCon 2018
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2018 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,210 --> 00:00:04,710
hello I'm morale from boss research and

00:00:02,820 --> 00:00:06,899
it's my pleasure to present our work on

00:00:04,710 --> 00:00:08,700
a call-back root level executed to

00:00:06,899 --> 00:00:11,910
support mix real-time critical

00:00:08,700 --> 00:00:14,250
applications with Ross - Russ -

00:00:11,910 --> 00:00:16,020
basically uses the same computational

00:00:14,250 --> 00:00:18,029
model as well as one with notes with

00:00:16,020 --> 00:00:20,189
callbacks which are triggered by

00:00:18,029 --> 00:00:22,859
messages but high Murs and these

00:00:20,189 --> 00:00:25,650
invocations are processed sequentially

00:00:22,859 --> 00:00:27,480
by a spin thread for this purpose Ross

00:00:25,650 --> 00:00:31,590
who introduced the notion of an executor

00:00:27,480 --> 00:00:33,719
on the RCL CPP layer and each process

00:00:31,590 --> 00:00:35,610
has one instance of this executor that

00:00:33,719 --> 00:00:37,590
works as a spin thread on these

00:00:35,610 --> 00:00:39,090
invocations and as you learned in the

00:00:37,590 --> 00:00:41,640
morning it's also possible to put

00:00:39,090 --> 00:00:44,390
multiple nodes in one process which one

00:00:41,640 --> 00:00:46,770
executor will serve those nodes together

00:00:44,390 --> 00:00:48,870
now we thought about applications where

00:00:46,770 --> 00:00:52,110
we have different written requirements

00:00:48,870 --> 00:00:53,579
in the same note for example emergency

00:00:52,110 --> 00:00:55,350
stop Quebec this should be process to

00:00:53,579 --> 00:00:59,250
make any case even if there are other

00:00:55,350 --> 00:01:02,219
locations before and now approaches to

00:00:59,250 --> 00:01:03,989
create multiple executor instances in

00:01:02,219 --> 00:01:05,519
the same process and to configure them

00:01:03,989 --> 00:01:07,500
the normal operating scattering

00:01:05,519 --> 00:01:10,200
mechanisms like priority trees or

00:01:07,500 --> 00:01:13,110
painting or batches and for this purpose

00:01:10,200 --> 00:01:14,850
we're to refine the executor API to work

00:01:13,110 --> 00:01:18,330
on the level of Corbett groups instead

00:01:14,850 --> 00:01:20,250
of whole nodes and also to use more

00:01:18,330 --> 00:01:24,000
refined weighting sets and DDS where the

00:01:20,250 --> 00:01:26,189
actual queues are managed in addition we

00:01:24,000 --> 00:01:28,290
allow for annotations to the callback

00:01:26,189 --> 00:01:30,119
groups to specify reached our

00:01:28,290 --> 00:01:32,759
requirements to do this mapping

00:01:30,119 --> 00:01:36,210
automatically in the future we did a

00:01:32,759 --> 00:01:39,360
form of Ross our CL CPP and create a new

00:01:36,210 --> 00:01:41,189
branch the warehouse given on the on the

00:01:39,360 --> 00:01:43,979
slide so you can download and try it out

00:01:41,189 --> 00:01:45,930
yourself also we need some very first

00:01:43,979 --> 00:01:48,360
experiments we created a simple

00:01:45,930 --> 00:01:50,549
application with two notes and two paths

00:01:48,360 --> 00:01:52,619
different reality just sending simple

00:01:50,549 --> 00:01:54,740
messages around burning CPU cycles in

00:01:52,619 --> 00:01:56,969
the pong node and our first test

00:01:54,740 --> 00:01:58,890
validate that this whole stack is

00:01:56,969 --> 00:02:01,320
working as expected with regard to read

00:01:58,890 --> 00:02:03,930
some written requirement that's also fog

00:02:01,320 --> 00:02:05,549
of the Ross two example as repo again

00:02:03,930 --> 00:02:09,090
the branch made executor that can try

00:02:05,549 --> 00:02:11,009
out feedback is warmly welcome to our to

00:02:09,090 --> 00:02:12,540
contact us and many thanks to William

00:02:11,009 --> 00:02:14,610
for digging helping

00:02:12,540 --> 00:02:16,319
helping us to dig into this whole stack

00:02:14,610 --> 00:02:17,590
for Carsten and my colleague Katrina

00:02:16,319 --> 00:02:19,800
thank you

00:02:17,590 --> 00:02:19,800

YouTube URL: https://www.youtube.com/watch?v=L9aK8xZXeKE


