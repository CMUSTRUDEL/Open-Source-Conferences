Title: ROSCon 2018 Madrid ROS 2 on Autonomous Driving Vehicles
Publication date: 2021-03-28
Playlist: ROSCon 2018
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2018 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,030 --> 00:00:05,370
hi so my name is Chris I'm a software

00:00:02,639 --> 00:00:07,649
engineer with Apex AI today I'm gonna

00:00:05,370 --> 00:00:09,059
talk about Ross to our experience is

00:00:07,649 --> 00:00:12,500
applying it to the problem of autonomous

00:00:09,059 --> 00:00:14,670
driving some of the lessons learned and

00:00:12,500 --> 00:00:16,560
limitations we found in Ross too for

00:00:14,670 --> 00:00:17,880
autonomous driving and how we're trying

00:00:16,560 --> 00:00:20,600
to fix that in our product

00:00:17,880 --> 00:00:24,119
apex OS which is an automotive subset

00:00:20,600 --> 00:00:28,410
automotive grades subset of Ross - for

00:00:24,119 --> 00:00:30,349
safety critical systems first off just

00:00:28,410 --> 00:00:32,610
to get everybody on the same page

00:00:30,349 --> 00:00:35,010
autonomous driving is the next big

00:00:32,610 --> 00:00:35,640
technology that promises to transform

00:00:35,010 --> 00:00:38,059
the world

00:00:35,640 --> 00:00:41,219
so it'll change the way we move around

00:00:38,059 --> 00:00:44,190
make the world a smaller place really

00:00:41,219 --> 00:00:45,809
reshaped industries so companies will

00:00:44,190 --> 00:00:47,520
live and die and along the way people

00:00:45,809 --> 00:00:57,449
will make a lot of money I'll be myself

00:00:47,520 --> 00:00:59,850
included but for all of the promise and

00:00:57,449 --> 00:01:02,039
hype in autonomous driving at the end of

00:00:59,850 --> 00:01:04,229
the day it's just a big robot so it's a

00:01:02,039 --> 00:01:07,340
robot because it's got sensors light our

00:01:04,229 --> 00:01:09,540
camera I am you GPS radar it's got

00:01:07,340 --> 00:01:11,040
actuation throttle and steering and in

00:01:09,540 --> 00:01:13,320
between the two there's a bunch of

00:01:11,040 --> 00:01:17,549
algorithms so that comprise is a pretty

00:01:13,320 --> 00:01:20,580
standard robot the big part of big robot

00:01:17,549 --> 00:01:22,890
comes from the fact that a large a car

00:01:20,580 --> 00:01:24,810
and thus an autonomous car is about

00:01:22,890 --> 00:01:26,729
2,000 pounds or a thousand kilos it

00:01:24,810 --> 00:01:28,979
drives around at 30 meters per second

00:01:26,729 --> 00:01:30,930
which is about 60 miles an hour or 80

00:01:28,979 --> 00:01:33,210
kilometers an hour so that's something

00:01:30,930 --> 00:01:35,280
really big moving really fast and if

00:01:33,210 --> 00:01:36,990
something goes wrong then a cannon will

00:01:35,280 --> 00:01:40,290
cause a lot of damage injury or even

00:01:36,990 --> 00:01:42,869
death so I think I hope all of you will

00:01:40,290 --> 00:01:45,360
agree with me that autonomous driving is

00:01:42,869 --> 00:01:47,340
an application where safety is of the

00:01:45,360 --> 00:01:49,829
utmost importance or in other words

00:01:47,340 --> 00:01:56,369
autonomous driving is a safety critical

00:01:49,829 --> 00:01:57,990
system that said the question that my

00:01:56,369 --> 00:02:00,450
company spent the first six months of

00:01:57,990 --> 00:02:02,490
its existence trying to answer was can

00:02:00,450 --> 00:02:04,290
we use Ross to to build an autonomous

00:02:02,490 --> 00:02:06,030
driving vehicle where I hope I've

00:02:04,290 --> 00:02:08,250
established that an autonomous vehicle

00:02:06,030 --> 00:02:10,849
is a large robot in a safety critical

00:02:08,250 --> 00:02:10,849
system

00:02:11,530 --> 00:02:17,680
to cut a long story short answer to that

00:02:13,120 --> 00:02:18,940
is yes and we can say yes because he

00:02:17,680 --> 00:02:20,950
actually went ahead and built ins on

00:02:18,940 --> 00:02:22,450
this vehicle using Ross too and you can

00:02:20,950 --> 00:02:25,390
actually see you can actually see it

00:02:22,450 --> 00:02:27,700
running in these videos of course this

00:02:25,390 --> 00:02:29,890
yes comes with couple caveats one is

00:02:27,700 --> 00:02:31,270
that our autonomous vehicles not the

00:02:29,890 --> 00:02:33,340
highest level of safety that we would be

00:02:31,270 --> 00:02:34,390
happy with and second is that we

00:02:33,340 --> 00:02:36,100
actually didn't build the entire

00:02:34,390 --> 00:02:38,410
autonomous vehicle using Ross two only

00:02:36,100 --> 00:02:40,120
Ross two we're a company of about

00:02:38,410 --> 00:02:42,340
fifteen people and not hundreds so we

00:02:40,120 --> 00:02:47,590
can't really build the entire autonomous

00:02:42,340 --> 00:02:49,870
driving stack in Ross two caveats aside

00:02:47,590 --> 00:02:52,150
let me just introduce you guys briefly

00:02:49,870 --> 00:02:53,890
to our autonomous driving setup so on

00:02:52,150 --> 00:02:57,220
the left hand side you can see our car

00:02:53,890 --> 00:02:59,560
which is Alexis 450h out video with

00:02:57,220 --> 00:03:01,990
drive-by-wire power and steering and

00:02:59,560 --> 00:03:04,840
other sensors by autonomous stuff in

00:03:01,990 --> 00:03:06,760
wharton illinois USA on the right hand

00:03:04,840 --> 00:03:08,680
side you can see our trunk setup which

00:03:06,760 --> 00:03:10,000
has a bunch of power and two computers

00:03:08,680 --> 00:03:14,680
connected by a 10 gigabit ethernet

00:03:10,000 --> 00:03:18,280
switch in a little bit more detail

00:03:14,680 --> 00:03:19,810
here's our computational setup so on the

00:03:18,280 --> 00:03:22,120
left hand side we've got an nvidia DRI

00:03:19,810 --> 00:03:24,700
px 2 which is an ARM based production

00:03:22,120 --> 00:03:26,050
intent ECU on it we've got a couple of

00:03:24,700 --> 00:03:28,120
algorithms running so we've got a 3d

00:03:26,050 --> 00:03:30,160
object detection stack and a tracking

00:03:28,120 --> 00:03:33,010
and prediction stack right both of which

00:03:30,160 --> 00:03:34,840
are written by me these are built

00:03:33,010 --> 00:03:37,930
against Ross 2 and they produce some

00:03:34,840 --> 00:03:39,640
outputs which are transmitted from the

00:03:37,930 --> 00:03:42,520
Nvidia drive to X to the other computer

00:03:39,640 --> 00:03:44,710
via the 10 Gigabit Ethernet switch these

00:03:42,520 --> 00:03:47,820
are converted from Ross wander Ross 2 to

00:03:44,710 --> 00:03:50,380
Ross 1 messages using OS Ross one bridge

00:03:47,820 --> 00:03:52,600
these Ross 1 messages are then taken up

00:03:50,380 --> 00:03:54,850
by a heavily modified version of tier 4

00:03:52,600 --> 00:03:58,420
open source outerwear which is written

00:03:54,850 --> 00:04:01,150
in Ross 1 so all of these Ross 1 notes

00:03:58,420 --> 00:04:03,850
are running on top of a the Intel

00:04:01,150 --> 00:04:06,100
spectra which is basically a somewhat

00:04:03,850 --> 00:04:10,030
ruggedized workstation that you more or

00:04:06,100 --> 00:04:11,380
less find in your office data today so

00:04:10,030 --> 00:04:14,140
one that takeaways I hope you guys get

00:04:11,380 --> 00:04:16,180
from this is that we have successfully

00:04:14,140 --> 00:04:18,850
built and you can also build a combined

00:04:16,180 --> 00:04:21,280
across one in Ross 2 system the second

00:04:18,850 --> 00:04:23,170
point I want to get across is that

00:04:21,280 --> 00:04:24,580
if you've got a lot of legacy code in

00:04:23,170 --> 00:04:26,890
Ross one and you're interested in using

00:04:24,580 --> 00:04:29,230
Ross - don't let that scare you because

00:04:26,890 --> 00:04:31,720
you can actually move things over from

00:04:29,230 --> 00:04:35,670
Ross 1 to Ross 2 just bit by bit and

00:04:31,720 --> 00:04:38,500
still have a fully functioning system a

00:04:35,670 --> 00:04:39,640
second takeaway I hope to get across to

00:04:38,500 --> 00:04:42,640
you guys is that based on our

00:04:39,640 --> 00:04:44,710
experiences Roz 2 is more or less ready

00:04:42,640 --> 00:04:46,870
for the big time so if you want to build

00:04:44,710 --> 00:04:48,400
a large robotic system with Ross - you

00:04:46,870 --> 00:04:50,200
can actually go ahead and do that now

00:04:48,400 --> 00:04:52,540
so if you're familiar with the five Cs

00:04:50,200 --> 00:04:56,020
Ross she already has four of the five Cs

00:04:52,540 --> 00:04:58,390
the only thing missing being computation

00:04:56,020 --> 00:04:59,830
or algorithms on top of that Ross who's

00:04:58,390 --> 00:05:02,380
got a number of additional nice features

00:04:59,830 --> 00:05:03,730
like lifecycle nodes terminus tag launch

00:05:02,380 --> 00:05:07,120
that they talked about in the previous

00:05:03,730 --> 00:05:08,860
talk that said of course there's a

00:05:07,120 --> 00:05:10,270
number of good reasons to keep Ross

00:05:08,860 --> 00:05:12,480
going around so there's a lot of tools

00:05:10,270 --> 00:05:14,919
and algorithms still available in Ross 1

00:05:12,480 --> 00:05:17,020
but you can use this with the Ross 1

00:05:14,919 --> 00:05:20,530
bridge together as we did in our set up

00:05:17,020 --> 00:05:23,730
and over time I'm sure these tools and

00:05:20,530 --> 00:05:28,600
algorithms will be ported over to Ross -

00:05:23,730 --> 00:05:30,160
so um I hope I got across that I'm a big

00:05:28,600 --> 00:05:32,860
fan of bras - it's fantastic to work

00:05:30,160 --> 00:05:34,810
with that said for the problem of

00:05:32,860 --> 00:05:37,540
autonomous driving which again I stress

00:05:34,810 --> 00:05:40,180
is a safety critical application

00:05:37,540 --> 00:05:41,620
Ross chooses not quite 100% there yet so

00:05:40,180 --> 00:05:45,190
there's a couple of big areas that

00:05:41,620 --> 00:05:46,710
rostov's lacking in one of which is hard

00:05:45,190 --> 00:05:48,790
real time which I'll talk about in a bit

00:05:46,710 --> 00:05:50,680
second our security and robustness

00:05:48,790 --> 00:05:52,270
mechanisms would you saw on from the

00:05:50,680 --> 00:05:54,850
previous takbir there are some security

00:05:52,270 --> 00:05:58,620
robustness mechanism but for a safety

00:05:54,850 --> 00:06:00,640
critical system you need many many more

00:05:58,620 --> 00:06:03,610
lastly there's testing and certification

00:06:00,640 --> 00:06:07,180
for which there's some testing but no

00:06:03,610 --> 00:06:08,590
certification but don't let this last

00:06:07,180 --> 00:06:09,850
steer you away from Ross - if you're in

00:06:08,590 --> 00:06:13,180
an autonomous driving or any other

00:06:09,850 --> 00:06:15,400
safety critical application because my

00:06:13,180 --> 00:06:17,890
company a pixel AI has its flagship

00:06:15,400 --> 00:06:20,110
product apex OS which is a safety

00:06:17,890 --> 00:06:23,100
critical version of Ross - surprise

00:06:20,110 --> 00:06:23,100
surprise this is marketing

00:06:23,659 --> 00:06:28,009
Marketing aside though the first and

00:06:26,719 --> 00:06:29,330
probably one of the most important

00:06:28,009 --> 00:06:32,599
things you need for a safety critical

00:06:29,330 --> 00:06:34,460
system is hard real-time so a hard

00:06:32,599 --> 00:06:36,979
real-time system is one that takes in

00:06:34,460 --> 00:06:39,139
some inputs and it will produce a

00:06:36,979 --> 00:06:42,620
deterministic output it has to do this

00:06:39,139 --> 00:06:44,509
in a given time span 100% of the time so

00:06:42,620 --> 00:06:46,659
it's deterministic it both in the input

00:06:44,509 --> 00:06:51,349
output but also its resource consumption

00:06:46,659 --> 00:06:52,999
in practice the way that you achieve a

00:06:51,349 --> 00:06:56,599
hard real-time system is basically two

00:06:52,999 --> 00:06:58,069
things one is that you need to make sure

00:06:56,599 --> 00:07:00,710
your application is static so all

00:06:58,069 --> 00:07:02,559
resource out all resource allocation

00:07:00,710 --> 00:07:05,050
happens outside of the run time loop

00:07:02,559 --> 00:07:08,199
second you need to make sure that each

00:07:05,050 --> 00:07:10,550
your critical path in your code is

00:07:08,199 --> 00:07:12,169
finite so that means it's got a finite

00:07:10,550 --> 00:07:14,569
tightly upper bounded number of

00:07:12,169 --> 00:07:16,639
operations and each of those operations

00:07:14,569 --> 00:07:21,979
can execute in the tightly bounded

00:07:16,639 --> 00:07:24,110
amount of time with respect to this raus

00:07:21,979 --> 00:07:25,969
to is still a little bit too dynamic for

00:07:24,110 --> 00:07:29,899
to support a hard real-time system on

00:07:25,969 --> 00:07:31,310
top of it so a couple the sort of hard

00:07:29,899 --> 00:07:32,569
real-time sins it commits is that

00:07:31,310 --> 00:07:35,089
there's still some reason memory

00:07:32,569 --> 00:07:36,919
allocations so one important place here

00:07:35,089 --> 00:07:38,209
is when they're handling a subscription

00:07:36,919 --> 00:07:40,879
callback which is a very important

00:07:38,209 --> 00:07:43,580
pattern so they allocate memory to catch

00:07:40,879 --> 00:07:45,589
the message on top of that they also

00:07:43,580 --> 00:07:48,379
make use of some constructs which

00:07:45,589 --> 00:07:51,979
allocate memory such as STD string s to

00:07:48,379 --> 00:07:54,620
the exception and so on memory

00:07:51,979 --> 00:07:56,599
allocation in general is an example of a

00:07:54,620 --> 00:07:58,749
blocking call insofar as it's

00:07:56,599 --> 00:08:00,919
non-deterministic in its execution time

00:07:58,749 --> 00:08:02,569
other examples of blocking calls that

00:08:00,919 --> 00:08:04,969
are also present in Ross's do or are

00:08:02,569 --> 00:08:06,199
file i/o which they use for logging and

00:08:04,969 --> 00:08:09,559
I'll talk about how we replace that in a

00:08:06,199 --> 00:08:11,689
bit finally all the DDS implementations

00:08:09,559 --> 00:08:12,919
that Ross - is built against that are

00:08:11,689 --> 00:08:16,879
publicly available at least are not

00:08:12,919 --> 00:08:19,939
real-time so we're doing at Apex CI is

00:08:16,879 --> 00:08:21,409
that we are making Ross - statics who

00:08:19,939 --> 00:08:25,339
are moving all the resource allocation

00:08:21,409 --> 00:08:26,509
outside of the core runtime loop second

00:08:25,339 --> 00:08:27,979
we're making sure that all the non

00:08:26,509 --> 00:08:29,389
real-time components are replaced with

00:08:27,979 --> 00:08:32,539
real time components so that means

00:08:29,389 --> 00:08:34,370
either swapping them out in bulk or

00:08:32,539 --> 00:08:35,870
swapping them out at the micro-level for

00:08:34,370 --> 00:08:38,029
instance making sure that the mutexes

00:08:35,870 --> 00:08:40,699
don't block infinitely so that they can

00:08:38,029 --> 00:08:43,190
time out on top of that we're also

00:08:40,699 --> 00:08:44,360
making sure that roster can be built

00:08:43,190 --> 00:08:49,910
against burst

00:08:44,360 --> 00:08:53,990
various real-time DDS implementations so

00:08:49,910 --> 00:08:55,130
one example of a non real-time component

00:08:53,990 --> 00:08:59,540
that we swap out for a real-time

00:08:55,130 --> 00:09:01,970
component is the logging so by default

00:08:59,540 --> 00:09:04,250
in Ross qu the log macro expands to some

00:09:01,970 --> 00:09:06,980
function which by default calls F printf

00:09:04,250 --> 00:09:10,279
which is by IO and a blocking call which

00:09:06,980 --> 00:09:11,600
is not OK in a hard real-time system by

00:09:10,279 --> 00:09:14,240
contrast what we've done is we've

00:09:11,600 --> 00:09:17,959
redirected this to our real-time logger

00:09:14,240 --> 00:09:19,670
which uses Atomics to shuffle a message

00:09:17,959 --> 00:09:21,019
into a shared memory ring buffer which

00:09:19,670 --> 00:09:24,920
is then deterministic because it's an

00:09:21,019 --> 00:09:26,630
atomic and then this buffer can then be

00:09:24,920 --> 00:09:28,250
flushed out with an eyelet priority

00:09:26,630 --> 00:09:32,329
thread either to disk like a black box

00:09:28,250 --> 00:09:33,829
or a or to console so then that idle

00:09:32,329 --> 00:09:37,790
priority third won't affect the greater

00:09:33,829 --> 00:09:41,230
running of your whole system another

00:09:37,790 --> 00:09:44,269
thing that we've also done is we have

00:09:41,230 --> 00:09:46,850
providing an alternative to the Ross to

00:09:44,269 --> 00:09:49,910
callback because as I noted earlier the

00:09:46,850 --> 00:09:52,190
roster callback allocates memory what

00:09:49,910 --> 00:09:54,199
we've done is we've modeled the are sort

00:09:52,190 --> 00:09:56,000
of callback our alternative on the

00:09:54,199 --> 00:10:00,170
weight set from the DDS level which is

00:09:56,000 --> 00:10:03,019
similar to a eunuch style select call in

00:10:00,170 --> 00:10:04,550
addition to being static this this

00:10:03,019 --> 00:10:06,949
alternative pattern basically also

00:10:04,550 --> 00:10:08,660
promotes two important things that you

00:10:06,949 --> 00:10:11,630
won't necessarily think about with a

00:10:08,660 --> 00:10:15,310
standard roster callback one of which is

00:10:11,630 --> 00:10:18,380
deterministic is execution order of your

00:10:15,310 --> 00:10:20,420
operations on your messages and second

00:10:18,380 --> 00:10:21,800
is what do you do when your messages

00:10:20,420 --> 00:10:23,690
don't arrive in time how do you react to

00:10:21,800 --> 00:10:25,730
that so in a hard real-time

00:10:23,690 --> 00:10:27,380
safety-critical kind of system you need

00:10:25,730 --> 00:10:29,120
to think about what you do with these

00:10:27,380 --> 00:10:31,819
what do you do when your messages don't

00:10:29,120 --> 00:10:32,930
arrive in time you can of course do

00:10:31,819 --> 00:10:34,399
these things with a standard roster

00:10:32,930 --> 00:10:36,380
callback but they don't necessarily

00:10:34,399 --> 00:10:38,149
London selves well to do that so there's

00:10:36,380 --> 00:10:43,490
a lot of it would require extra

00:10:38,149 --> 00:10:45,550
discipline on your part a another thing

00:10:43,490 --> 00:10:46,870
that we are doing which is some

00:10:45,550 --> 00:10:50,200
tangentially related to hard real-time

00:10:46,870 --> 00:10:51,760
is large memory support so in an

00:10:50,200 --> 00:10:53,350
autonomous driving there is a number of

00:10:51,760 --> 00:10:56,740
large messages flying around for

00:10:53,350 --> 00:10:59,140
instance point-cloud messages or camera

00:10:56,740 --> 00:11:00,580
images these messages can easily be on

00:10:59,140 --> 00:11:03,130
the order of a megabyte or more in size

00:11:00,580 --> 00:11:05,170
ah and with network based inter process

00:11:03,130 --> 00:11:07,300
communication as these messages get

00:11:05,170 --> 00:11:09,310
larger in size so too does the flight

00:11:07,300 --> 00:11:12,250
time of these messages

00:11:09,310 --> 00:11:13,990
so with these megabyte or more size

00:11:12,250 --> 00:11:15,670
messages the flight time can be very

00:11:13,990 --> 00:11:19,060
non-trivial for instance on the order of

00:11:15,670 --> 00:11:20,500
tens of milliseconds or more what we've

00:11:19,060 --> 00:11:22,450
done then is we've implemented a shared

00:11:20,500 --> 00:11:23,710
memory transport prototype and we're

00:11:22,450 --> 00:11:26,320
working with some DDS vendors to

00:11:23,710 --> 00:11:29,170
formalize this what this buys you with

00:11:26,320 --> 00:11:34,210
respect to real-time is that it reduces

00:11:29,170 --> 00:11:36,040
the flight time of your reduces the

00:11:34,210 --> 00:11:38,980
flight time of your large messages by an

00:11:36,040 --> 00:11:40,840
order of magnitude or more what this

00:11:38,980 --> 00:11:45,310
then buys you is it reduces the latency

00:11:40,840 --> 00:11:46,630
in your entire system and then gives you

00:11:45,310 --> 00:11:49,360
a lot more Headroom to hit your hard

00:11:46,630 --> 00:11:51,040
real-time deadlines if you're interested

00:11:49,360 --> 00:11:52,870
in how we kind of did this benchmarking

00:11:51,040 --> 00:11:54,550
and figuring out where the bald notes

00:11:52,870 --> 00:11:56,290
came from I have everyone's you listen

00:11:54,550 --> 00:12:01,440
to my colleague endure hysterics talk

00:11:56,290 --> 00:12:03,880
which is later on the afternoon second

00:12:01,440 --> 00:12:06,430
Rosco has some robustness mechanisms so

00:12:03,880 --> 00:12:08,440
they introduced the lifecycle nodes in

00:12:06,430 --> 00:12:11,320
the previous talk and William has a talk

00:12:08,440 --> 00:12:14,020
on Ross to launch in about 40 minutes I

00:12:11,320 --> 00:12:16,870
think so these are great mechanisms that

00:12:14,020 --> 00:12:18,910
are not present in Ross one also they

00:12:16,870 --> 00:12:19,960
make sure basically that you can your

00:12:18,910 --> 00:12:22,240
note is in a good state when it

00:12:19,960 --> 00:12:25,420
initializes and it mixtures that it can

00:12:22,240 --> 00:12:28,270
handle some perturbations and make sure

00:12:25,420 --> 00:12:31,720
that your individual nodes are in a good

00:12:28,270 --> 00:12:33,850
running state that's set with a safety

00:12:31,720 --> 00:12:35,950
critical system you always need more

00:12:33,850 --> 00:12:38,260
robustness mechanisms and we're working

00:12:35,950 --> 00:12:39,130
on adding more of those things in so

00:12:38,260 --> 00:12:40,870
some of these things are for instance

00:12:39,130 --> 00:12:44,710
like heartbeats to detect sign failures

00:12:40,870 --> 00:12:46,000
or other higher system level robustness

00:12:44,710 --> 00:12:51,310
mechanisms to make sure you can recover

00:12:46,000 --> 00:12:53,380
it from somewhat larger faults on top of

00:12:51,310 --> 00:12:55,180
that we were also looking at security so

00:12:53,380 --> 00:12:56,410
again they also introduced security in

00:12:55,180 --> 00:13:01,060
the previous talk which was a great

00:12:56,410 --> 00:13:03,550
traduction but unfortunately security is

00:13:01,060 --> 00:13:05,079
sort of a never-ending battle and to

00:13:03,550 --> 00:13:06,850
Rusty's credit as an organization

00:13:05,079 --> 00:13:11,199
they've introduced security from the

00:13:06,850 --> 00:13:13,839
get-go but unfortunately a large robotic

00:13:11,199 --> 00:13:16,569
system is not just DDS so there are more

00:13:13,839 --> 00:13:18,189
forms of security that you need what

00:13:16,569 --> 00:13:20,649
we're then doing is we're trying to sort

00:13:18,189 --> 00:13:22,060
of patch some bigger holes and catch

00:13:20,649 --> 00:13:24,009
some low-hanging fruit that that's easy

00:13:22,060 --> 00:13:25,629
to fix for instance we're adding an

00:13:24,009 --> 00:13:27,220
executable whitelist to our operating

00:13:25,629 --> 00:13:29,139
system to make sure that you know you

00:13:27,220 --> 00:13:31,060
can't you kind of block against some

00:13:29,139 --> 00:13:32,740
malicious participants and on top of

00:13:31,060 --> 00:13:36,370
that we're also working on some security

00:13:32,740 --> 00:13:37,990
mechanisms that are important for the

00:13:36,370 --> 00:13:40,930
autonomous driving use case which is for

00:13:37,990 --> 00:13:42,730
instance over the up air updates secure

00:13:40,930 --> 00:13:45,699
ski storage making sure we can integrate

00:13:42,730 --> 00:13:47,230
with existing security solutions so you

00:13:45,699 --> 00:13:52,689
know we don't reinvent the wheel or some

00:13:47,230 --> 00:13:54,370
way of that finally the last thing I'm

00:13:52,689 --> 00:13:57,279
going to sort of trust to about is

00:13:54,370 --> 00:13:58,980
testing and certification so I talked a

00:13:57,279 --> 00:14:01,480
lot about bike safety critical

00:13:58,980 --> 00:14:02,949
applications and all that stuff but one

00:14:01,480 --> 00:14:05,769
sorted elephant in the room is how do

00:14:02,949 --> 00:14:07,630
you prove that your code is safe so

00:14:05,769 --> 00:14:10,000
short of having a relatively simple use

00:14:07,630 --> 00:14:11,769
case or a problem which I hope most of

00:14:10,000 --> 00:14:14,860
you can agree with me that autonomous

00:14:11,769 --> 00:14:15,970
driving is not that simple and using

00:14:14,860 --> 00:14:18,279
formal method you can't really prove

00:14:15,970 --> 00:14:20,139
that your application is safe what you

00:14:18,279 --> 00:14:21,899
can do though is you can follow a

00:14:20,139 --> 00:14:27,970
functional safety standard to the letter

00:14:21,899 --> 00:14:29,529
and and in doing so you can make sure

00:14:27,970 --> 00:14:31,839
that your code hits some minimum level

00:14:29,529 --> 00:14:36,310
quality and presumably then some minimum

00:14:31,839 --> 00:14:38,980
level safety so broadly ISO 26262 is

00:14:36,310 --> 00:14:40,000
three steps so one it's analyzing use

00:14:38,980 --> 00:14:41,709
case so here

00:14:40,000 --> 00:14:44,050
unfortunately Ross two falls short

00:14:41,709 --> 00:14:46,209
because I mean their use case agnostic

00:14:44,050 --> 00:14:48,699
whereas we're a company so we have no

00:14:46,209 --> 00:14:50,889
such limitation so we focus mostly on

00:14:48,699 --> 00:14:52,360
the autonomous driving use case a second

00:14:50,889 --> 00:14:55,269
you follow a strict development process

00:14:52,360 --> 00:14:56,740
so here rusty is fantastic um two things

00:14:55,269 --> 00:14:58,420
they're not quite there yet is for

00:14:56,740 --> 00:15:00,550
instance one is I think most of us can

00:14:58,420 --> 00:15:03,009
read that up rosters documentation is a

00:15:00,550 --> 00:15:04,720
little bit of raw still on second they

00:15:03,009 --> 00:15:06,279
don't explicitly follow a safety coding

00:15:04,720 --> 00:15:08,730
standard so for us we've been following

00:15:06,279 --> 00:15:10,870
Misra C and C++ from day one

00:15:08,730 --> 00:15:13,690
last thing you have to write and run

00:15:10,870 --> 00:15:15,009
lots and lots and lots of tests so here

00:15:13,690 --> 00:15:16,930
again in rust you does great they've

00:15:15,009 --> 00:15:18,850
already got Union integration tests but

00:15:16,930 --> 00:15:20,680
there are a number of more testing need

00:15:18,850 --> 00:15:22,690
to be run many of which are driven by

00:15:20,680 --> 00:15:25,209
your use case again which roster does

00:15:22,690 --> 00:15:27,639
not have such as requirements testing

00:15:25,209 --> 00:15:30,490
full-stack testing so hard when loop

00:15:27,639 --> 00:15:31,660
testing and so on finally you also need

00:15:30,490 --> 00:15:33,540
to make sure that your tests sufficient

00:15:31,660 --> 00:15:36,519
to cover your code by taking metrics

00:15:33,540 --> 00:15:38,230
this means like Lyon branch mc/dc

00:15:36,519 --> 00:15:39,459
coverage and so on we're actually

00:15:38,230 --> 00:15:42,939
working with roster to make sure that

00:15:39,459 --> 00:15:45,189
they can actually get that in lastly one

00:15:42,939 --> 00:15:47,920
thing I want to stress then is that at

00:15:45,189 --> 00:15:49,990
Apex CI we're very very dedicated to

00:15:47,920 --> 00:15:52,240
testing so on the bottom right you can

00:15:49,990 --> 00:15:53,649
kind of see that we've got a our lab

00:15:52,240 --> 00:15:55,810
setups that's a lot of expensive

00:15:53,649 --> 00:15:57,790
hardware and sensors for a very small

00:15:55,810 --> 00:16:00,220
company a wholly dedicated for the

00:15:57,790 --> 00:16:02,110
purposes of testing on top of that we've

00:16:00,220 --> 00:16:04,779
also got our CI pipeline which again is

00:16:02,110 --> 00:16:08,470
also very open evolved for a 15-person

00:16:04,779 --> 00:16:10,329
company so we are we do static analysis

00:16:08,470 --> 00:16:16,649
testing coverage cross compilation and

00:16:10,329 --> 00:16:18,910
so on on every commit that said I

00:16:16,649 --> 00:16:21,100
mentioned logo or product a pic so as

00:16:18,910 --> 00:16:22,360
this and that we do recognize that we're

00:16:21,100 --> 00:16:24,610
standing on the shoulders of the

00:16:22,360 --> 00:16:26,529
open-source community so wherever

00:16:24,610 --> 00:16:28,600
possible we are giving back so we've

00:16:26,529 --> 00:16:30,670
open sources a number of tools um that

00:16:28,600 --> 00:16:33,639
we've developed in-house algorithms to

00:16:30,670 --> 00:16:36,220
on top of that we're also up streaming a

00:16:33,639 --> 00:16:38,439
number of features and bug fixes that as

00:16:36,220 --> 00:16:40,029
we find them to the Ross to mainline and

00:16:38,439 --> 00:16:44,050
I should mention that all these are

00:16:40,029 --> 00:16:45,850
links so when you get that later on one

00:16:44,050 --> 00:16:47,740
last thing I want to mention too is that

00:16:45,850 --> 00:16:50,589
all these things that we're doing in

00:16:47,740 --> 00:16:52,480
Ross to to harden it make it static and

00:16:50,589 --> 00:16:54,220
real-time and all that good stuff we're

00:16:52,480 --> 00:16:55,480
also doing for algorithms and other

00:16:54,220 --> 00:16:57,430
building blocks of the autonomous

00:16:55,480 --> 00:16:58,600
driving stack so here are some of the

00:16:57,430 --> 00:17:00,250
things that we're doing to fix up the

00:16:58,600 --> 00:17:01,959
bulletins driver which is the backbone

00:17:00,250 --> 00:17:03,490
of our current 3d perception stack that

00:17:01,959 --> 00:17:09,150
you see running on the bottom there

00:17:03,490 --> 00:17:11,020
again it's very wrong so that is

00:17:09,150 --> 00:17:13,780
basically what I've got

00:17:11,020 --> 00:17:15,390
in short Ross 1 is fantastic for

00:17:13,780 --> 00:17:18,520
developing a large robotic system but

00:17:15,390 --> 00:17:20,890
short of a full rewrite it can't be

00:17:18,520 --> 00:17:22,179
automotive grade that's it that's what

00:17:20,890 --> 00:17:25,119
we have Ross 2 for which is a

00:17:22,179 --> 00:17:27,459
you're off at this point I would say

00:17:25,119 --> 00:17:28,990
it's stable enough and feature complete

00:17:27,459 --> 00:17:31,240
enough for you to do some serious

00:17:28,990 --> 00:17:32,799
development against and you can use it

00:17:31,240 --> 00:17:35,559
with your legacy Ross one stuff if you

00:17:32,799 --> 00:17:36,580
want to and it's very close automotive

00:17:35,559 --> 00:17:39,600
grade and that's what we've got

00:17:36,580 --> 00:17:47,519
apex OS 4 which is hard real times here

00:17:39,600 --> 00:17:49,990
safe robust and certified last thing if

00:17:47,519 --> 00:17:54,159
anything if anything I said interested

00:17:49,990 --> 00:17:55,090
you guys or resonated with you feel free

00:17:54,159 --> 00:17:58,509
to reach out because they're always

00:17:55,090 --> 00:17:58,809
looking for more talent that's all I've

00:17:58,509 --> 00:18:01,190
got

00:17:58,809 --> 00:18:08,769
so thank you

00:18:01,190 --> 00:18:08,769
[Applause]

00:18:17,560 --> 00:18:22,600
you mentioned the over-the-air service

00:18:19,900 --> 00:18:25,030
updates I'd be curious have you done in

00:18:22,600 --> 00:18:27,900
the experimentation with Edda station

00:18:25,030 --> 00:18:29,980
using Ross - we're like two systems are

00:18:27,900 --> 00:18:33,130
negotiating and whether the other party

00:18:29,980 --> 00:18:35,490
is still maintaining an integrity and

00:18:33,130 --> 00:18:40,090
it's like trusted execution environment

00:18:35,490 --> 00:18:41,890
- like if you had a computer in the

00:18:40,090 --> 00:18:44,980
autonomous vehicle verifying that the

00:18:41,890 --> 00:18:47,230
light our sensor has been modified so

00:18:44,980 --> 00:18:48,940
let me preface this by saying that I am

00:18:47,230 --> 00:18:54,790
probably the only guy not working on a

00:18:48,940 --> 00:18:56,560
framework at Ross and that's it I think

00:18:54,790 --> 00:18:57,760
we haven't done any major experiments

00:18:56,560 --> 00:18:59,080
with the security stuff so we're

00:18:57,760 --> 00:19:06,820
currently still building that stuff out

00:18:59,080 --> 00:19:09,310
I see you've gone to a great extent

00:19:06,820 --> 00:19:11,770
obviously both real-time extensions to

00:19:09,310 --> 00:19:13,780
Ross - I'm wondering as part of your

00:19:11,770 --> 00:19:15,580
safety stand you have redundancy in

00:19:13,780 --> 00:19:18,580
place and is there any consensus in case

00:19:15,580 --> 00:19:19,960
you have process of failure yes so

00:19:18,580 --> 00:19:21,160
that's one of the things we're

00:19:19,960 --> 00:19:22,660
considering and working on right now

00:19:21,160 --> 00:19:24,970
because and right now we're just working

00:19:22,660 --> 00:19:26,710
on getting Ross - as it stands to be

00:19:24,970 --> 00:19:29,710
like static and real-time so hard

00:19:26,710 --> 00:19:31,570
real-time so right now we're getting our

00:19:29,710 --> 00:19:32,410
money our P's and Q's so like for

00:19:31,570 --> 00:19:33,700
instance what you were doing with your

00:19:32,410 --> 00:19:35,680
attribute just making sure like hey I

00:19:33,700 --> 00:19:37,120
can localize first and then we're gonna

00:19:35,680 --> 00:19:39,100
build that out further as we get more

00:19:37,120 --> 00:19:42,520
resources in time it's that part of -

00:19:39,100 --> 00:19:44,530
six - six - that redundancy requirement

00:19:42,520 --> 00:19:46,390
I don't think so off the top of my head

00:19:44,530 --> 00:19:49,020
that's more of an aerospace thing okay

00:19:46,390 --> 00:19:49,020
cool thank you

00:19:51,360 --> 00:19:57,170
thank you thank you very much

00:19:54,250 --> 00:19:57,170

YouTube URL: https://www.youtube.com/watch?v=CGqcbAxK6nE


