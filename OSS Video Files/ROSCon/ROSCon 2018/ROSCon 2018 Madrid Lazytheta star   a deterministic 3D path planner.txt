Title: ROSCon 2018 Madrid Lazytheta star   a deterministic 3D path planner
Publication date: 2021-03-28
Playlist: ROSCon 2018
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2018 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,120 --> 00:00:06,180
hello everyone so yeah my name is

00:00:02,570 --> 00:00:09,030
margarita and I'm coming to present to

00:00:06,180 --> 00:00:12,059
you a path planner that works in full 3d

00:00:09,030 --> 00:00:15,599
that is an implementation of algorithm

00:00:12,059 --> 00:00:19,859
algorithm coming to us from board the

00:00:15,599 --> 00:00:21,539
video game side so just want to point

00:00:19,859 --> 00:00:23,910
out that this was done in the context of

00:00:21,539 --> 00:00:28,199
the marine us doctoral program and

00:00:23,910 --> 00:00:36,030
thanks to Maurice so Oscar Curie that

00:00:28,199 --> 00:00:39,480
was funding this right so this was done

00:00:36,030 --> 00:00:41,670
in Sevilla here in Spain in a katak

00:00:39,480 --> 00:00:45,480
which is a center that specialized for

00:00:41,670 --> 00:00:48,680
aerospace technology and also with the

00:00:45,480 --> 00:00:51,480
supervision of the University of Sevilla

00:00:48,680 --> 00:00:53,640
so why did I decide to do another

00:00:51,480 --> 00:00:57,719
planner right we already have plenty of

00:00:53,640 --> 00:01:01,170
those so planners should be picked

00:00:57,719 --> 00:01:04,350
according to whichever use case they are

00:01:01,170 --> 00:01:06,720
working with so I'm gonna show you which

00:01:04,350 --> 00:01:10,320
use case this was thought for and

00:01:06,720 --> 00:01:12,450
hopefully this will work for you the

00:01:10,320 --> 00:01:14,520
idea here was to use a planner that

00:01:12,450 --> 00:01:19,520
would work actually in a very large

00:01:14,520 --> 00:01:24,770
environment think like offshore oil rig

00:01:19,520 --> 00:01:28,380
and also mostly focused on offshore

00:01:24,770 --> 00:01:31,170
scenarios or whichever spaces that don't

00:01:28,380 --> 00:01:33,780
have much vegetation vegetation here

00:01:31,170 --> 00:01:36,900
because the density of obstacles is

00:01:33,780 --> 00:01:41,640
completely different here you can see

00:01:36,900 --> 00:01:45,090
that the free space is grouped together

00:01:41,640 --> 00:01:48,060
in large amounts where that would not

00:01:45,090 --> 00:01:49,680
happen like in a forest then this

00:01:48,060 --> 00:01:51,509
algorithm also has another nice

00:01:49,680 --> 00:01:55,799
characteristic which is it is

00:01:51,509 --> 00:01:57,390
deterministic so for one set of inputs

00:01:55,799 --> 00:01:59,189
you will always have the same output

00:01:57,390 --> 00:02:02,100
which you cannot have in the stochastic

00:01:59,189 --> 00:02:03,810
ones and it comes in handy if you're

00:02:02,100 --> 00:02:06,869
dealing with industry and you need to

00:02:03,810 --> 00:02:08,759
make certification or give some

00:02:06,869 --> 00:02:12,270
guarantees of what you are able to

00:02:08,759 --> 00:02:13,740
accomplish so also this was done to work

00:02:12,270 --> 00:02:16,650
online in

00:02:13,740 --> 00:02:20,010
aboard UAVs so a little show of hands

00:02:16,650 --> 00:02:22,680
who works with UAVs in the room one

00:02:20,010 --> 00:02:28,110
percent good okay couple more in the

00:02:22,680 --> 00:02:29,880
back cool so the people that work with

00:02:28,110 --> 00:02:32,880
you of Yves knows that one one large

00:02:29,880 --> 00:02:36,240
constraint is that you can just you have

00:02:32,880 --> 00:02:38,100
to choose carefully which processor you

00:02:36,240 --> 00:02:40,320
use you cannot just get the best

00:02:38,100 --> 00:02:42,770
processing power on top and just slap it

00:02:40,320 --> 00:02:45,000
on of course much many other

00:02:42,770 --> 00:02:47,310
environments have this constraint but

00:02:45,000 --> 00:02:50,700
because of the weight this is really a

00:02:47,310 --> 00:02:55,440
big issue for UAVs and also this is a

00:02:50,700 --> 00:02:58,050
planner that works in fully in 3d so

00:02:55,440 --> 00:03:05,370
just to give you an idea of how this

00:02:58,050 --> 00:03:07,920
would look like I have a video all right

00:03:05,370 --> 00:03:10,820
so here you can see the planner working

00:03:07,920 --> 00:03:14,580
in the context of helping to achieve

00:03:10,820 --> 00:03:16,710
autonomous exploration we can see here

00:03:14,580 --> 00:03:20,790
the path that has been developed by the

00:03:16,710 --> 00:03:23,850
by the planner in the arrows in yellow

00:03:20,790 --> 00:03:28,230
and then you can see that it's an octa

00:03:23,850 --> 00:03:31,170
map and the little dots are the notes

00:03:28,230 --> 00:03:33,360
that have been evaluated in order to

00:03:31,170 --> 00:03:35,790
check if they want to be part of the

00:03:33,360 --> 00:03:37,860
plan or not so more detail on that later

00:03:35,790 --> 00:03:45,000
this is just for you to have an a mental

00:03:37,860 --> 00:03:47,640
picture of what I'm talking about so

00:03:45,000 --> 00:03:49,440
coming to the most important part is how

00:03:47,640 --> 00:03:52,290
to use it right this is actually I think

00:03:49,440 --> 00:03:55,200
pretty straightforward you have here the

00:03:52,290 --> 00:03:58,050
repo where you can download the the code

00:03:55,200 --> 00:04:01,920
from and it's basically just a question

00:03:58,050 --> 00:04:04,350
of including the node in your launch

00:04:01,920 --> 00:04:12,120
file so this was done for Ross one

00:04:04,350 --> 00:04:14,850
rescue yet the node just works expecting

00:04:12,120 --> 00:04:16,950
to receive a message for as an input

00:04:14,850 --> 00:04:19,140
which basically has what you would

00:04:16,950 --> 00:04:22,200
expect like your start point your goal

00:04:19,140 --> 00:04:25,050
also what is the maze maximum amount of

00:04:22,200 --> 00:04:27,480
seconds that you're able to wait for an

00:04:25,050 --> 00:04:30,030
answer and the safety margin

00:04:27,480 --> 00:04:32,400
so as we all know robots are not just

00:04:30,030 --> 00:04:35,430
two miracle geometrical points they have

00:04:32,400 --> 00:04:37,920
volume and you probably have some

00:04:35,430 --> 00:04:40,280
constraints on how close can an obstacle

00:04:37,920 --> 00:04:42,270
get or you might have like some

00:04:40,280 --> 00:04:44,040
localization error or you're working

00:04:42,270 --> 00:04:46,380
outside and you have to deal with wind

00:04:44,040 --> 00:04:48,480
gusts so here in the safety margin you

00:04:46,380 --> 00:04:50,160
can just tell the planner how close the

00:04:48,480 --> 00:04:53,940
obstacle can get to the center of your

00:04:50,160 --> 00:04:56,670
robot and then as a not output topic it

00:04:53,940 --> 00:04:58,440
just spits out a message that tells you

00:04:56,670 --> 00:05:01,380
whether if it was successful or not

00:04:58,440 --> 00:05:07,280
and how many waypoints does the path

00:05:01,380 --> 00:05:09,480
have and the ordered path so one

00:05:07,280 --> 00:05:13,830
requirement is that your world is

00:05:09,480 --> 00:05:15,660
represented in a nocte map structure so

00:05:13,830 --> 00:05:17,940
building on the previous speaker you

00:05:15,660 --> 00:05:20,670
already have a good idea of what a

00:05:17,940 --> 00:05:22,520
multi-resolution grid is so I'm not

00:05:20,670 --> 00:05:24,810
going to go too much into that I think

00:05:22,520 --> 00:05:27,960
how many people have worked with octo

00:05:24,810 --> 00:05:31,160
map so I have an idea how much anymore

00:05:27,960 --> 00:05:34,200
okay so you know that this is light and

00:05:31,160 --> 00:05:37,920
has really interesting distinction of

00:05:34,200 --> 00:05:39,600
free occupied and unknown and enables

00:05:37,920 --> 00:05:42,150
you to do obstacle avoidance which is

00:05:39,600 --> 00:05:47,220
some of its strengths but for this

00:05:42,150 --> 00:05:49,470
particular implementation it was also a

00:05:47,220 --> 00:05:51,450
source of challenge because it is so

00:05:49,470 --> 00:05:54,870
light it was hard to UNIVAC lessly

00:05:51,450 --> 00:05:56,970
identify each visited voxel and to find

00:05:54,870 --> 00:05:58,530
out the neighborhood of each voxel but

00:05:56,970 --> 00:06:04,650
this was all challenges that we were

00:05:58,530 --> 00:06:08,130
able to overcome then just to give you

00:06:04,650 --> 00:06:09,840
some small details about what are the

00:06:08,130 --> 00:06:12,510
key characteristics of this algorithm

00:06:09,840 --> 00:06:16,200
one really cool aspect is that it gives

00:06:12,510 --> 00:06:20,520
a really smooth path as compared to

00:06:16,200 --> 00:06:23,490
other graph other planners that work

00:06:20,520 --> 00:06:26,910
over graphs so here you can see that the

00:06:23,490 --> 00:06:30,600
path does not hop between each node that

00:06:26,910 --> 00:06:32,880
has been evaluated you can see that

00:06:30,600 --> 00:06:35,550
there are many but actually the path

00:06:32,880 --> 00:06:38,780
goes from the start to an intermediate

00:06:35,550 --> 00:06:41,340
goal and it's not like this crooked

00:06:38,780 --> 00:06:44,220
90-degree angle between each

00:06:41,340 --> 00:06:47,370
it actually has you can have any angle

00:06:44,220 --> 00:06:50,600
between segments so you can depending on

00:06:47,370 --> 00:06:52,710
your objective you can skip the

00:06:50,600 --> 00:06:56,490
post-processing smoothing gaining some

00:06:52,710 --> 00:06:59,850
processing time and lazy because it does

00:06:56,490 --> 00:07:02,610
the minimum amount of obstacle checks it

00:06:59,850 --> 00:07:04,260
possibly can and which is comes really

00:07:02,610 --> 00:07:08,430
in handy because it's one of the

00:07:04,260 --> 00:07:10,860
bottlenecks and this is just to give you

00:07:08,430 --> 00:07:13,500
an idea that yes it has worked in

00:07:10,860 --> 00:07:16,620
simulation but also the jump from

00:07:13,500 --> 00:07:18,870
simulation to real-world has already

00:07:16,620 --> 00:07:20,970
been accomplished in a pending

00:07:18,870 --> 00:07:22,860
publication I talked more about this but

00:07:20,970 --> 00:07:25,320
just so you have an idea yes there were

00:07:22,860 --> 00:07:27,300
some things that had to be optimized for

00:07:25,320 --> 00:07:28,280
from one to the other but finally it

00:07:27,300 --> 00:07:34,710
worked

00:07:28,280 --> 00:07:39,570
using a port and on Ross kinetic this

00:07:34,710 --> 00:07:42,810
was done just some references if you

00:07:39,570 --> 00:07:44,580
need for the algorithm Octomom and the

00:07:42,810 --> 00:07:48,650
paper that talks more in depth about

00:07:44,580 --> 00:07:48,650
this do we have questions

00:07:48,740 --> 00:07:54,019
[Applause]

00:07:55,230 --> 00:08:02,110
I'll kick yourself I was curious if you

00:07:58,780 --> 00:08:04,210
are the gazebo model or simulation that

00:08:02,110 --> 00:08:06,130
you showed in the repo that you listed

00:08:04,210 --> 00:08:09,390
out there also simulation resources

00:08:06,130 --> 00:08:15,310
available to emulate that sort of result

00:08:09,390 --> 00:08:18,100
yes so there is the data sets that I

00:08:15,310 --> 00:08:20,830
recovered from the laser so you can

00:08:18,100 --> 00:08:22,990
easily just skip the whole lock to my

00:08:20,830 --> 00:08:24,820
part if you don't have trouble in

00:08:22,990 --> 00:08:27,390
gathering some data from real life you

00:08:24,820 --> 00:08:29,290
can use the data that is available there

00:08:27,390 --> 00:08:31,800
great any other questions from the

00:08:29,290 --> 00:08:34,180
audience or the livestream

00:08:31,800 --> 00:08:35,450
all right then please help me thank the

00:08:34,180 --> 00:08:39,029
speaker once again

00:08:35,450 --> 00:08:39,029

YouTube URL: https://www.youtube.com/watch?v=3FH3hMxrIRc


