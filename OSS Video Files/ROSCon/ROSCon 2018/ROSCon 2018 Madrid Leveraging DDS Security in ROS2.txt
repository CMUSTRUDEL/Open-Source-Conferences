Title: ROSCon 2018 Madrid Leveraging DDS Security in ROS2
Publication date: 2021-03-28
Playlist: ROSCon 2018
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2018 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,030 --> 00:00:05,730
hello so I guess we've heard a lot about

00:00:03,060 --> 00:00:07,379
DBS and security today so I'm going to

00:00:05,730 --> 00:00:12,630
put these two things together a little

00:00:07,379 --> 00:00:15,839
bit an overview of how DDS fits

00:00:12,630 --> 00:00:18,000
especially with security and hopefully

00:00:15,839 --> 00:00:19,920
there will be not that won't answer all

00:00:18,000 --> 00:00:21,689
the questions as a pretty broad subject

00:00:19,920 --> 00:00:25,410
and the good news is there is a whole

00:00:21,689 --> 00:00:28,710
tutorial on I was next week on Monday so

00:00:25,410 --> 00:00:30,960
so you can find more there but anyway so

00:00:28,710 --> 00:00:32,430
I think what I'm going to cover is a

00:00:30,960 --> 00:00:35,100
little bit an introduction to the

00:00:32,430 --> 00:00:36,660
concepts of video security a little bit

00:00:35,100 --> 00:00:39,059
a given idea of how it impacts

00:00:36,660 --> 00:00:42,059
performance of a system and then how

00:00:39,059 --> 00:00:44,370
because because roses you know kind of

00:00:42,059 --> 00:00:46,680
uses DDS but it kind of adds its own

00:00:44,370 --> 00:00:48,960
sort of sauce on top of it

00:00:46,680 --> 00:00:50,250
those mappings kind of impact a little

00:00:48,960 --> 00:00:51,780
bit the kinds of things that you can do

00:00:50,250 --> 00:00:53,129
with the underlying concepts in material

00:00:51,780 --> 00:00:54,420
security or not and those are of course

00:00:53,129 --> 00:00:57,510
have all been so I think it's good for

00:00:54,420 --> 00:00:59,250
people to be aware and then give you a

00:00:57,510 --> 00:01:01,649
little bit of a concept of how do you

00:00:59,250 --> 00:01:04,320
today what kind of toll do you have to

00:01:01,649 --> 00:01:06,810
use the DF security with Ross in general

00:01:04,320 --> 00:01:10,100
to use security with Ross which is but

00:01:06,810 --> 00:01:14,220
what is also known as as Ross so as a

00:01:10,100 --> 00:01:16,200
background I want to also kind of

00:01:14,220 --> 00:01:18,390
broaden your perspective about what

00:01:16,200 --> 00:01:21,450
videos release I mean this is the set of

00:01:18,390 --> 00:01:23,369
a specification that currently fall

00:01:21,450 --> 00:01:25,560
under the family of DDS specifications

00:01:23,369 --> 00:01:28,530
you are mostly interested when you talk

00:01:25,560 --> 00:01:30,600
about DDS you typically are going to be

00:01:28,530 --> 00:01:32,369
concerned with the word protocol because

00:01:30,600 --> 00:01:35,040
it is a thing that shows up in the world

00:01:32,369 --> 00:01:36,990
you're also not really easily seeing

00:01:35,040 --> 00:01:40,320
this API is because these are sort of

00:01:36,990 --> 00:01:43,560
hidden behind the Ross client layer and

00:01:40,320 --> 00:01:45,119
the Ross media were wrapper but but you

00:01:43,560 --> 00:01:46,500
can of the kinds of things that you can

00:01:45,119 --> 00:01:47,670
do are they finding those kinds of

00:01:46,500 --> 00:01:49,799
specification that talk about the

00:01:47,670 --> 00:01:51,479
qualities of services and so forth then

00:01:49,799 --> 00:01:54,180
the real security is the thing that

00:01:51,479 --> 00:01:55,740
you're going to in finally deal with

00:01:54,180 --> 00:01:57,149
when it comes down to the authentication

00:01:55,740 --> 00:01:58,530
between the different Ross notes and the

00:01:57,149 --> 00:02:02,430
permissions and how are those things so

00:01:58,530 --> 00:02:04,530
forth and then the type systems that

00:02:02,430 --> 00:02:06,570
comes from the VDS excited specification

00:02:04,530 --> 00:02:08,700
that gets mapped to the ross message

00:02:06,570 --> 00:02:10,140
types and so forth but again the kind of

00:02:08,700 --> 00:02:11,069
thing that you're going to be able to do

00:02:10,140 --> 00:02:14,489
there

00:02:11,069 --> 00:02:16,349
to be to some extent you know control by

00:02:14,489 --> 00:02:19,230
that and then these DDS excelsis

00:02:16,349 --> 00:02:21,329
specification is showing up now you know

00:02:19,230 --> 00:02:23,400
as a gateway a specification I think

00:02:21,329 --> 00:02:25,079
you've heard of Micro Rose not my

00:02:23,400 --> 00:02:28,620
favorite name for that but it actually

00:02:25,079 --> 00:02:32,189
does the gateway between the RTP s or my

00:02:28,620 --> 00:02:34,379
RTP SS specification and and the

00:02:32,189 --> 00:02:38,069
excelsis specification that gets you

00:02:34,379 --> 00:02:40,290
access from a very small footprint No so

00:02:38,069 --> 00:02:42,900
and this has been able over a number of

00:02:40,290 --> 00:02:45,900
years so it's a pretty pretty long thing

00:02:42,900 --> 00:02:47,639
of things there but so you want to come

00:02:45,900 --> 00:02:48,750
learn more details about any of those

00:02:47,639 --> 00:02:52,189
things you can go and download the

00:02:48,750 --> 00:02:56,430
certifications from the management group

00:02:52,189 --> 00:02:57,659
so with DDS it has the concept of topics

00:02:56,430 --> 00:02:58,200
and publish/subscribe very much like

00:02:57,659 --> 00:03:00,239
gross

00:02:58,200 --> 00:03:03,870
there is a little bit of a twist in the

00:03:00,239 --> 00:03:05,849
way DDS uses topics in that for DBS our

00:03:03,870 --> 00:03:08,310
topic is actually a collection of data

00:03:05,849 --> 00:03:10,349
objects like this so you have a number

00:03:08,310 --> 00:03:12,150
of cars for example or publishing on a

00:03:10,349 --> 00:03:14,879
single topic called you know car

00:03:12,150 --> 00:03:16,109
position and the fact that it's one car

00:03:14,879 --> 00:03:18,359
versus I know that that would have be

00:03:16,109 --> 00:03:21,959
identified by certain fields inside the

00:03:18,359 --> 00:03:23,519
topics called the key now when that gets

00:03:21,959 --> 00:03:27,209
mapped to ROS actually the current

00:03:23,519 --> 00:03:29,819
mapping of DBS to row so the road to DBS

00:03:27,209 --> 00:03:32,699
is not using keys and what is happening

00:03:29,819 --> 00:03:34,859
is that those those identification so

00:03:32,699 --> 00:03:38,459
the different cars will end up showing

00:03:34,859 --> 00:03:40,680
as the topic name so the implication of

00:03:38,459 --> 00:03:43,680
that is that what is in DDS you will be

00:03:40,680 --> 00:03:46,979
able to have a single writer entity

00:03:43,680 --> 00:03:48,540
published for many different objects

00:03:46,979 --> 00:03:50,639
like you could be publishing for all the

00:03:48,540 --> 00:03:53,159
cars like if you were a simulator with a

00:03:50,639 --> 00:03:55,349
single object or you would because able

00:03:53,159 --> 00:03:56,400
to subscribe to all the cars when you're

00:03:55,349 --> 00:03:57,510
going through a Rose middleware layer

00:03:56,400 --> 00:03:59,819
you're going to have to create a

00:03:57,510 --> 00:04:07,620
different publisher or subscriber for

00:03:59,819 --> 00:04:09,359
each one of those objects right now in

00:04:07,620 --> 00:04:12,689
DDS there is also a concept of quality

00:04:09,359 --> 00:04:15,030
of service which Maps what you are able

00:04:12,689 --> 00:04:18,060
to produce at the data writer level with

00:04:15,030 --> 00:04:20,639
what you are able to consume with rose

00:04:18,060 --> 00:04:22,560
that gets exposed by means of I think

00:04:20,639 --> 00:04:24,840
they call it profiles qsr profiles and

00:04:22,560 --> 00:04:27,090
the selector like three or four

00:04:24,840 --> 00:04:31,860
all essential qualities of services I

00:04:27,090 --> 00:04:33,840
think the ability reliability are the

00:04:31,860 --> 00:04:35,310
two main ones that come to mind the

00:04:33,840 --> 00:04:36,900
other ones are still there but you would

00:04:35,310 --> 00:04:38,729
have to go to sort of to the underline

00:04:36,900 --> 00:04:40,050
DDS mechanisms configure them you

00:04:38,729 --> 00:04:43,740
wouldn't be able to just do that from

00:04:40,050 --> 00:04:46,320
there from the Ross layer and there is

00:04:43,740 --> 00:04:49,199
also another concept of partitions which

00:04:46,320 --> 00:04:51,840
is also not currently exposed today as

00:04:49,199 --> 00:04:53,970
far as I know from the Ross client API

00:04:51,840 --> 00:04:56,250
that is something that allows you to

00:04:53,970 --> 00:04:58,260
even within a single topic name to kind

00:04:56,250 --> 00:05:01,620
of isolate different planes and say all

00:04:58,260 --> 00:05:03,180
these group group of applications are

00:05:01,620 --> 00:05:04,410
going to be talking independent this or

00:05:03,180 --> 00:05:06,630
group of applications you could have

00:05:04,410 --> 00:05:08,850
them run on the same set of nodes or

00:05:06,630 --> 00:05:14,250
activate or deactivate like simulation

00:05:08,850 --> 00:05:15,540
versus live system and so forth so the

00:05:14,250 --> 00:05:17,400
reason why I mentioned that is because

00:05:15,540 --> 00:05:19,110
some of the things that appear in DDS

00:05:17,400 --> 00:05:20,760
security enable you to sort of

00:05:19,110 --> 00:05:22,050
separately give access control and

00:05:20,760 --> 00:05:25,050
permissions to this one of those things

00:05:22,050 --> 00:05:26,580
so if if you would wanted to take

00:05:25,050 --> 00:05:28,590
advantage of this capability then you

00:05:26,580 --> 00:05:31,020
would have to sort of find a way to get

00:05:28,590 --> 00:05:35,280
partitions configured into the into the

00:05:31,020 --> 00:05:36,690
Ross client layer so there's one going

00:05:35,280 --> 00:05:38,160
to more detail I want to get into the

00:05:36,690 --> 00:05:40,889
main point of the presentation which is

00:05:38,160 --> 00:05:42,870
DDS security and the first thing I want

00:05:40,889 --> 00:05:46,710
to talk about is that security is

00:05:42,870 --> 00:05:48,450
actually sort of there is many layers to

00:05:46,710 --> 00:05:50,910
security and you cannot just do layer at

00:05:48,450 --> 00:05:52,500
any one you cannot just do security in

00:05:50,910 --> 00:05:54,870
one layer you have to do it at all the

00:05:52,500 --> 00:05:56,280
layers right so and it was mentioned

00:05:54,870 --> 00:05:58,889
before that you kind of have to protect

00:05:56,280 --> 00:06:00,720
the integrity of your nodes and the key

00:05:58,889 --> 00:06:02,760
material that you have and the integrity

00:06:00,720 --> 00:06:05,160
of the configuration files and the

00:06:02,760 --> 00:06:07,349
libraries and so forth which would fall

00:06:05,160 --> 00:06:11,250
under the you know host based protection

00:06:07,349 --> 00:06:13,620
and I'm good you know good attestation

00:06:11,250 --> 00:06:15,690
arrogant kinds of techniques which are

00:06:13,620 --> 00:06:18,630
important for you but it's not something

00:06:15,690 --> 00:06:20,669
that DDS kind of deals right with and

00:06:18,630 --> 00:06:23,340
also there is the issue of access

00:06:20,669 --> 00:06:24,810
control to their whole network which

00:06:23,340 --> 00:06:27,630
typically gets done through some kind of

00:06:24,810 --> 00:06:28,979
VPN technology that's also something

00:06:27,630 --> 00:06:30,150
that you would probably want to do if

00:06:28,979 --> 00:06:32,969
you are concerned about security but

00:06:30,150 --> 00:06:34,590
again this happens under DDS and under

00:06:32,969 --> 00:06:36,240
Ross right so your your Ryan on

00:06:34,590 --> 00:06:38,370
encrypted line and everybody has to have

00:06:36,240 --> 00:06:38,790
some a special key or something to join

00:06:38,370 --> 00:06:41,520
it

00:06:38,790 --> 00:06:43,350
that's fine and that's a good practice

00:06:41,520 --> 00:06:45,000
because before it was the question was

00:06:43,350 --> 00:06:47,190
asked about denial of service attacks I

00:06:45,000 --> 00:06:48,600
mean that's a very difficult question I

00:06:47,190 --> 00:06:49,740
mean they are really very hard to

00:06:48,600 --> 00:06:52,080
protect and you kind of have to have

00:06:49,740 --> 00:06:54,330
several layers of Defense to kind of

00:06:52,080 --> 00:06:55,470
make it them harder and harder and one

00:06:54,330 --> 00:06:57,090
of the layers of defense that you're

00:06:55,470 --> 00:06:58,620
basically preventing access to your

00:06:57,090 --> 00:07:00,360
shared media which is your network right

00:06:58,620 --> 00:07:02,550
and only a few people can get in there

00:07:00,360 --> 00:07:04,410
and then you start looking at deeper and

00:07:02,550 --> 00:07:06,750
deeper protection against that but

00:07:04,410 --> 00:07:08,700
finally what DBS is actually trying to

00:07:06,750 --> 00:07:11,280
do is protect the data itself so once

00:07:08,700 --> 00:07:13,410
you are inside the network what idiot is

00:07:11,280 --> 00:07:15,510
trying to do is to say it's not a binary

00:07:13,410 --> 00:07:16,980
thing being inside the network immunity

00:07:15,510 --> 00:07:19,350
side the network inside the network

00:07:16,980 --> 00:07:22,830
anyway that has anything to produce any

00:07:19,350 --> 00:07:24,210
node needs to have some identity I need

00:07:22,830 --> 00:07:25,920
to authenticate with other nodes to

00:07:24,210 --> 00:07:28,470
prove who they are I need to show that

00:07:25,920 --> 00:07:30,510
has the necessary permissions for every

00:07:28,470 --> 00:07:32,550
single message it writes or every single

00:07:30,510 --> 00:07:34,680
topic I should say it writes or it reads

00:07:32,550 --> 00:07:36,540
or every single service it invokes is

00:07:34,680 --> 00:07:38,400
not going to be able to do that just

00:07:36,540 --> 00:07:39,690
with the global permission of be able to

00:07:38,400 --> 00:07:41,520
join the network right and that's very

00:07:39,690 --> 00:07:43,260
important because escalation of

00:07:41,520 --> 00:07:46,410
privileges is one of the most sort of

00:07:43,260 --> 00:07:48,600
subtle etat were you know an application

00:07:46,410 --> 00:07:51,030
that has permissions to do something I

00:07:48,600 --> 00:07:52,980
supposed to do something very narrow all

00:07:51,030 --> 00:07:54,900
of a sudden gets hot through some

00:07:52,980 --> 00:07:56,610
vulnerability and because there is not

00:07:54,900 --> 00:07:58,470
enough granularity in the access control

00:07:56,610 --> 00:08:00,660
all of a sudden I can do everything that

00:07:58,470 --> 00:08:02,610
he shouldn't be doing like the classic

00:08:00,660 --> 00:08:04,290
you know Jeep driving off the highway

00:08:02,610 --> 00:08:06,600
attack because they bluetooth their

00:08:04,290 --> 00:08:07,740
sensor was hot and it was all of a

00:08:06,600 --> 00:08:09,150
sudden a steal in the vehicle that

00:08:07,740 --> 00:08:11,880
should never happen if you have fine

00:08:09,150 --> 00:08:14,160
grain control and you were able to tell

00:08:11,880 --> 00:08:15,300
the you know the the pressure censoring

00:08:14,160 --> 00:08:17,640
the wheel that the only thing that it

00:08:15,300 --> 00:08:19,680
can publish is pressure sensor pressure

00:08:17,640 --> 00:08:21,390
value right it's not able to publish a

00:08:19,680 --> 00:08:23,610
stealing command you know break commands

00:08:21,390 --> 00:08:25,110
right so so that's why tonight is very

00:08:23,610 --> 00:08:27,240
important and that's really what DDS

00:08:25,110 --> 00:08:29,040
security does and that's what Ross

00:08:27,240 --> 00:08:31,230
security leverages on top of VDS

00:08:29,040 --> 00:08:33,030
right so when you look at that picture

00:08:31,230 --> 00:08:34,560
what really happens is that all those

00:08:33,030 --> 00:08:37,190
topics that are in the shell global data

00:08:34,560 --> 00:08:39,390
space become individually protected and

00:08:37,190 --> 00:08:41,400
becoming dividual protector means they

00:08:39,390 --> 00:08:43,440
have to be separable right so you cannot

00:08:41,400 --> 00:08:45,120
give differential permission for

00:08:43,440 --> 00:08:46,680
somebody to read or write if you use the

00:08:45,120 --> 00:08:48,420
same key because if I use the same key

00:08:46,680 --> 00:08:50,220
for two topics and I give you the key to

00:08:48,420 --> 00:08:51,840
read topic one all of a sudden you're

00:08:50,220 --> 00:08:52,600
going to also be able to read topic two

00:08:51,840 --> 00:08:55,209
just wide open

00:08:52,600 --> 00:08:56,889
network and more subtle ease how do I

00:08:55,209 --> 00:08:58,449
protect the permission of read versus

00:08:56,889 --> 00:09:00,550
right and right because if I give you

00:08:58,449 --> 00:09:02,800
the key to read my topic that I'm

00:09:00,550 --> 00:09:05,199
publishing what prevents you from of a

00:09:02,800 --> 00:09:07,209
sudden encrypting and signing that data

00:09:05,199 --> 00:09:09,069
with that same king that I'm using right

00:09:07,209 --> 00:09:11,259
and I'll cover that because that's a

00:09:09,069 --> 00:09:12,399
subtle thing but it's actually important

00:09:11,259 --> 00:09:13,959
if you have a system where it's

00:09:12,399 --> 00:09:15,310
important to separate the permission to

00:09:13,959 --> 00:09:16,779
read something from the permission to

00:09:15,310 --> 00:09:18,250
write something you need to take

00:09:16,779 --> 00:09:23,589
advantage of this technique that I will

00:09:18,250 --> 00:09:25,180
talk about later so so in DDS basically

00:09:23,589 --> 00:09:27,639
it's a next is an add-on to the

00:09:25,180 --> 00:09:31,209
specification it defines a set of

00:09:27,639 --> 00:09:33,699
plug-in sort of components that fit into

00:09:31,209 --> 00:09:35,019
the VDS stack so when the DDS is going

00:09:33,699 --> 00:09:37,089
through several decisions like it

00:09:35,019 --> 00:09:39,220
discovers a participant which is a node

00:09:37,089 --> 00:09:42,160
in the case of Rose it discovers a

00:09:39,220 --> 00:09:44,110
writer or a reader it destroys a

00:09:42,160 --> 00:09:45,610
participant entity discover whether and

00:09:44,110 --> 00:09:47,709
really checks whether it has permissions

00:09:45,610 --> 00:09:49,180
to read that write the topics if it has

00:09:47,709 --> 00:09:51,279
permissions and it shares the necessary

00:09:49,180 --> 00:09:53,649
keys from the writer to a reader and so

00:09:51,279 --> 00:09:54,790
forth now the reason why it's important

00:09:53,649 --> 00:09:56,920
that these things are pluggable is

00:09:54,790 --> 00:09:59,350
because you may encounter that they're

00:09:56,920 --> 00:10:01,089
built in plugins are not sufficient for

00:09:59,350 --> 00:10:02,800
your needs and then you have an

00:10:01,089 --> 00:10:04,480
opportunity to build your own custom

00:10:02,800 --> 00:10:07,240
plugins and because those API sorry

00:10:04,480 --> 00:10:09,339
standards you will be able to plug those

00:10:07,240 --> 00:10:11,170
in into the different DDS

00:10:09,339 --> 00:10:12,130
implementations that wander under Rose

00:10:11,170 --> 00:10:15,250
right so as long as those

00:10:12,130 --> 00:10:16,899
implementations support the DDS security

00:10:15,250 --> 00:10:18,459
and are complying with those interfaces

00:10:16,899 --> 00:10:20,730
specifications that you can plug in a

00:10:18,459 --> 00:10:23,110
different access control or a different

00:10:20,730 --> 00:10:26,610
key distribution algorithm or

00:10:23,110 --> 00:10:26,610
cryptographic algorithm and so forth

00:10:27,009 --> 00:10:31,990
so how is all configured so from the

00:10:29,589 --> 00:10:33,490
radius point of view and this is for the

00:10:31,990 --> 00:10:35,410
built-in plugins because if you plug a

00:10:33,490 --> 00:10:37,750
different set of plugins then you can do

00:10:35,410 --> 00:10:39,730
things totally differently but for the

00:10:37,750 --> 00:10:43,149
from the vs point of view it comes down

00:10:39,730 --> 00:10:45,009
to having some agreed authorities that

00:10:43,149 --> 00:10:46,660
all the nodes on the network are going

00:10:45,009 --> 00:10:49,029
to say yes we agree that these people

00:10:46,660 --> 00:10:51,370
are the people that are sort of giving

00:10:49,029 --> 00:10:53,620
permissions and giving identities to the

00:10:51,370 --> 00:10:55,420
network and you can specify two separate

00:10:53,620 --> 00:10:57,610
I'll for it is although you could also

00:10:55,420 --> 00:10:59,709
make those two the same authority but

00:10:57,610 --> 00:11:01,689
there is an authority that identifies it

00:10:59,709 --> 00:11:04,899
gives identities and basically says hey

00:11:01,689 --> 00:11:06,490
you know this name is a public key and a

00:11:04,899 --> 00:11:09,820
subject name

00:11:06,490 --> 00:11:12,730
is valid you know it has a valid name

00:11:09,820 --> 00:11:14,890
that I'm signing right and there is an

00:11:12,730 --> 00:11:19,030
another Authority that basically

00:11:14,890 --> 00:11:20,830
attaches a set of permissions to one of

00:11:19,030 --> 00:11:23,470
those identities right so says well the

00:11:20,830 --> 00:11:25,120
subject name may be the subject name is

00:11:23,470 --> 00:11:26,920
the name of the fully qualified name of

00:11:25,120 --> 00:11:28,720
your rose node or the Rose application

00:11:26,920 --> 00:11:31,210
well this cross application has

00:11:28,720 --> 00:11:33,160
permission to write topic a to pick B in

00:11:31,210 --> 00:11:37,390
topic C and its permission to read topic

00:11:33,160 --> 00:11:40,090
D and topic right so and that gets done

00:11:37,390 --> 00:11:43,410
through essentially a set of signed

00:11:40,090 --> 00:11:46,030
documents so they so you get identities

00:11:43,410 --> 00:11:48,160
authorities are signing documents for

00:11:46,030 --> 00:11:49,720
each application separately and those

00:11:48,160 --> 00:11:51,340
applications carry those documents are

00:11:49,720 --> 00:11:52,540
sort of their proof like imagine you

00:11:51,340 --> 00:11:56,610
have Union you have your passport

00:11:52,540 --> 00:11:59,560
passport is issued by an identity

00:11:56,610 --> 00:12:03,070
Authority which is your country right

00:11:59,560 --> 00:12:05,260
and then it has has permissions

00:12:03,070 --> 00:12:07,300
associated with it which basically says

00:12:05,260 --> 00:12:09,790
it allows you to cross the border right

00:12:07,300 --> 00:12:11,440
so they border Authority which is the

00:12:09,790 --> 00:12:14,110
one that decides who can get into a

00:12:11,440 --> 00:12:15,970
country out of the country accepts a

00:12:14,110 --> 00:12:17,650
passport as a proof of permission to

00:12:15,970 --> 00:12:19,270
enter the country or not but a bank

00:12:17,650 --> 00:12:21,040
would also accept the passports approve

00:12:19,270 --> 00:12:25,780
of permission to open a bank account for

00:12:21,040 --> 00:12:28,240
example so and then there is another

00:12:25,780 --> 00:12:29,440
document that basically describes sort

00:12:28,240 --> 00:12:32,260
of what are the rules for a specific

00:12:29,440 --> 00:12:33,280
distributed application because again

00:12:32,260 --> 00:12:35,080
Ben

00:12:33,280 --> 00:12:36,910
since it's not an all-or-nothing type of

00:12:35,080 --> 00:12:39,130
type of situation you could say that

00:12:36,910 --> 00:12:40,750
certain topics need to be protected some

00:12:39,130 --> 00:12:42,580
other topics could be open don't need

00:12:40,750 --> 00:12:44,110
encryption and there's different kinds

00:12:42,580 --> 00:12:46,360
of an cryptographic techniques you can

00:12:44,110 --> 00:12:48,100
use you can you can totally encrypt the

00:12:46,360 --> 00:12:49,450
topic so you can just use message

00:12:48,100 --> 00:12:51,520
authentication codes which are more

00:12:49,450 --> 00:12:54,340
efficient that prevent tampering but

00:12:51,520 --> 00:12:56,790
don't actually don't actually encrypt

00:12:54,340 --> 00:12:59,560
the data's were much much faster to do

00:12:56,790 --> 00:13:03,010
so in the end what happens here what

00:12:59,560 --> 00:13:05,110
happens is in applications appear when

00:13:03,010 --> 00:13:07,420
the application appears they exchange

00:13:05,110 --> 00:13:09,970
this covering information then these

00:13:07,420 --> 00:13:11,740
plugins come in and say I discovered

00:13:09,970 --> 00:13:13,930
this participant is this node is trying

00:13:11,740 --> 00:13:17,020
to join the network let me check that it

00:13:13,930 --> 00:13:19,090
has a valid identity certificate if it I

00:13:17,020 --> 00:13:19,900
check it that you know it's signed by

00:13:19,090 --> 00:13:22,420
the authority

00:13:19,900 --> 00:13:24,070
nice then I challenge to prove that it

00:13:22,420 --> 00:13:26,770
has the private key associated with that

00:13:24,070 --> 00:13:28,900
certificate using the standard PKI

00:13:26,770 --> 00:13:31,350
techniques that you would use in TLS so

00:13:28,900 --> 00:13:33,910
you could use an HTTP the that

00:13:31,350 --> 00:13:36,460
participant responds to my one-time

00:13:33,910 --> 00:13:37,750
challenge likewise I respond to his like

00:13:36,460 --> 00:13:39,910
wide challenge so we establish mutual

00:13:37,750 --> 00:13:42,070
authentication as part of this problem

00:13:39,910 --> 00:13:43,750
process we also establish a sort of a

00:13:42,070 --> 00:13:45,490
shared secret that we can use to

00:13:43,750 --> 00:13:47,740
exchange secret information and we use

00:13:45,490 --> 00:13:50,050
that sort of secret channel to exchange

00:13:47,740 --> 00:13:52,060
key material because then the next thing

00:13:50,050 --> 00:13:53,650
that happens is I will discover some

00:13:52,060 --> 00:13:55,450
readers and some writers something that

00:13:53,650 --> 00:13:56,830
key is published and subscribing and if

00:13:55,450 --> 00:13:58,720
he's subscribing to something I'm

00:13:56,830 --> 00:14:00,310
publishing and he's showing me a

00:13:58,720 --> 00:14:02,650
permission document that says that he

00:14:00,310 --> 00:14:04,540
can subscribe to that then I will send

00:14:02,650 --> 00:14:06,550
the key material I have for that

00:14:04,540 --> 00:14:09,250
particular topic and I will use that

00:14:06,550 --> 00:14:10,510
sort of secret key exchange key that

00:14:09,250 --> 00:14:12,220
I've established doing initial

00:14:10,510 --> 00:14:14,590
authentication which is unique for each

00:14:12,220 --> 00:14:16,390
one of pair wise of pair of nodes that

00:14:14,590 --> 00:14:18,340
get discovered so all that happens

00:14:16,390 --> 00:14:20,230
automatically inside the DDS security so

00:14:18,340 --> 00:14:22,180
you don't have to worry about storing

00:14:20,230 --> 00:14:22,990
those keys creating those keys on doing

00:14:22,180 --> 00:14:24,490
any of those things don't happen

00:14:22,990 --> 00:14:28,750
automatically as a side effect of

00:14:24,490 --> 00:14:31,810
creating writers and readers so those

00:14:28,750 --> 00:14:34,240
documents that define the permissions

00:14:31,810 --> 00:14:35,860
and they find the governance in the end

00:14:34,240 --> 00:14:37,660
there XML files that have a standard

00:14:35,860 --> 00:14:39,250
format typically you are not going to

00:14:37,660 --> 00:14:40,720
interact with this because as we will

00:14:39,250 --> 00:14:42,610
see later Ross provides a set of tools

00:14:40,720 --> 00:14:44,320
that automatically generate those

00:14:42,610 --> 00:14:46,600
documents from some sort of high-level

00:14:44,320 --> 00:14:48,730
description of your rock your Ross kind

00:14:46,600 --> 00:14:50,200
of notes and topologies but it's at some

00:14:48,730 --> 00:14:51,670
point you start trying to figure out

00:14:50,200 --> 00:14:52,870
okay what's not going with my system

00:14:51,670 --> 00:14:54,220
what am I getting this error like you

00:14:52,870 --> 00:14:55,780
saw in the presentation this morning

00:14:54,220 --> 00:14:57,370
some message that said oh this thing

00:14:55,780 --> 00:14:59,200
cannot come through it's not allowed and

00:14:57,370 --> 00:15:00,790
you see this topic is not allowable a

00:14:59,200 --> 00:15:02,680
topic that's going to show you there is

00:15:00,790 --> 00:15:04,900
the DDS topic that couldn't be created

00:15:02,680 --> 00:15:06,100
or couldn't be attained of rise and then

00:15:04,900 --> 00:15:08,770
you're going to have to a little bit

00:15:06,100 --> 00:15:10,690
understand what what those come from and

00:15:08,770 --> 00:15:12,040
those documents and they you know they

00:15:10,690 --> 00:15:13,540
are the ones that are used to configure

00:15:12,040 --> 00:15:14,830
idiot so you will be able to see them

00:15:13,540 --> 00:15:17,290
because they have to be provided to your

00:15:14,830 --> 00:15:20,650
application even if you don't create

00:15:17,290 --> 00:15:22,210
them directly yourself okay so one of

00:15:20,650 --> 00:15:24,250
the permissions document looks pretty

00:15:22,210 --> 00:15:26,100
simple discuss an identity so each one

00:15:24,250 --> 00:15:28,510
of these documents would be for a single

00:15:26,100 --> 00:15:30,310
for a single node although you could

00:15:28,510 --> 00:15:32,080
combine many nodes within the same

00:15:30,310 --> 00:15:32,820
document it's object name so that would

00:15:32,080 --> 00:15:35,340
be the thing that

00:15:32,820 --> 00:15:37,200
that ties to the public identity in the

00:15:35,340 --> 00:15:39,270
identity certificate and then it has

00:15:37,200 --> 00:15:41,520
basically things that says for this

00:15:39,270 --> 00:15:42,960
domain ID you can publish these topics

00:15:41,520 --> 00:15:45,060
and you subscribe to these topics and

00:15:42,960 --> 00:15:46,860
you can have expressions for topic names

00:15:45,060 --> 00:15:51,060
so you can have you know all day like if

00:15:46,860 --> 00:15:52,650
the weight Rose Maps topics for nodes

00:15:51,060 --> 00:15:54,540
you know they start all with the same

00:15:52,650 --> 00:15:56,220
prefix with an own name on the namespace

00:15:54,540 --> 00:15:57,840
so you could just put a star and say

00:15:56,220 --> 00:15:59,070
anything under the namespace is

00:15:57,840 --> 00:16:04,020
something that this know is allowed to

00:15:59,070 --> 00:16:05,610
publish for example and there is another

00:16:04,020 --> 00:16:07,970
subtle thing which is the concept of

00:16:05,610 --> 00:16:11,160
data tags that italics are aware to

00:16:07,970 --> 00:16:15,060
associate metadata with publishers and

00:16:11,160 --> 00:16:17,280
subscribers which is not which and that

00:16:15,060 --> 00:16:20,880
is authenticated by the DDS security but

00:16:17,280 --> 00:16:22,530
is not interpreted so the reason to have

00:16:20,880 --> 00:16:24,180
that is because sometimes you need to

00:16:22,530 --> 00:16:26,370
build your own custom sort of access

00:16:24,180 --> 00:16:27,990
controls and policies and this gives you

00:16:26,370 --> 00:16:29,340
a hook to very convenient to do that so

00:16:27,990 --> 00:16:31,530
I have an example of how you would do

00:16:29,340 --> 00:16:32,640
that for example imagine that I'm trying

00:16:31,530 --> 00:16:35,280
to build an air traffic control system

00:16:32,640 --> 00:16:37,650
and for me it's important to know what

00:16:35,280 --> 00:16:40,680
the different airlines are and an a

00:16:37,650 --> 00:16:42,330
certain aircraft because it belongs to a

00:16:40,680 --> 00:16:44,400
company like Iberia it's only allowed to

00:16:42,330 --> 00:16:46,560
publish locations for Iberia aircraft

00:16:44,400 --> 00:16:47,670
right so one way I could do that is to

00:16:46,560 --> 00:16:48,960
basically of course I could have

00:16:47,670 --> 00:16:50,520
different topic names but that would

00:16:48,960 --> 00:16:51,900
force me to have different consumers as

00:16:50,520 --> 00:16:53,850
an air traffic controller for each one

00:16:51,900 --> 00:16:55,950
of the aircraft so if I wanted to use

00:16:53,850 --> 00:16:58,410
the same topic one thing I can do is

00:16:55,950 --> 00:17:01,260
sort of attach the courier name as a

00:16:58,410 --> 00:17:03,480
data tag to my data writer and what DDS

00:17:01,260 --> 00:17:05,070
security will do it will say you cannot

00:17:03,480 --> 00:17:06,630
attach the data tag unless you have that

00:17:05,070 --> 00:17:08,430
permission on your permissions file so

00:17:06,630 --> 00:17:11,070
you are only able to publish that if you

00:17:08,430 --> 00:17:12,780
have the permission authorities are

00:17:11,070 --> 00:17:16,320
giving you explicit permission to attach

00:17:12,780 --> 00:17:17,820
aircraft name Iberia so that will be all

00:17:16,320 --> 00:17:19,920
authenticated and checked by the middle

00:17:17,820 --> 00:17:21,959
word so as a consumer when you get a

00:17:19,920 --> 00:17:23,490
piece of data you can look at the

00:17:21,959 --> 00:17:25,800
content of the data and you can see what

00:17:23,490 --> 00:17:28,320
their craft flight number is and it will

00:17:25,800 --> 00:17:31,050
say Iberia 97 at that point you could

00:17:28,320 --> 00:17:32,940
say ok is Iberia does the data writer

00:17:31,050 --> 00:17:35,370
that send me the data have the tack for

00:17:32,940 --> 00:17:36,240
Iberia right that Didius is not going to

00:17:35,370 --> 00:17:37,560
do for you because she doesn't

00:17:36,240 --> 00:17:40,020
understand that the content of the data

00:17:37,560 --> 00:17:41,520
is supposed to correlate to some tag but

00:17:40,020 --> 00:17:43,740
you at the application level or the

00:17:41,520 --> 00:17:45,210
robotic client library could go and look

00:17:43,740 --> 00:17:46,259
at that and say akka I'm going to use

00:17:45,210 --> 00:17:48,119
that to restrict

00:17:46,259 --> 00:17:52,609
and attach that kind of behavior right

00:17:48,119 --> 00:17:57,269
so it's not and if somebody for example

00:17:52,609 --> 00:18:00,539
had a data tag for for Air France and

00:17:57,269 --> 00:18:02,580
was trying to to publish Iberia then at

00:18:00,539 --> 00:18:03,809
the discovery time if it tries to touch

00:18:02,580 --> 00:18:06,029
the wrong tank it won't be allowed to

00:18:03,809 --> 00:18:08,249
join and if it's allowed to join because

00:18:06,029 --> 00:18:11,220
it puts its own tag when it publishes

00:18:08,249 --> 00:18:12,629
data for the wrong airline then the

00:18:11,220 --> 00:18:13,859
receiver will look at it and say ok you

00:18:12,629 --> 00:18:19,139
don't have the type that allows you to

00:18:13,859 --> 00:18:21,210
do that so you will reject that so ok so

00:18:19,139 --> 00:18:23,009
I want to give a little bit of an idea

00:18:21,210 --> 00:18:25,259
of performance and I let's start saying

00:18:23,009 --> 00:18:27,840
that performance is a real hard problem

00:18:25,259 --> 00:18:29,759
is very hard not to know that you are

00:18:27,840 --> 00:18:31,350
comparing the right thing I know there

00:18:29,759 --> 00:18:33,179
are presentation of performance so this

00:18:31,350 --> 00:18:34,559
is not about really performance what I'm

00:18:33,179 --> 00:18:37,590
trying to accomplish here is just give

00:18:34,559 --> 00:18:40,799
you sort of a relative feel for how

00:18:37,590 --> 00:18:42,149
expensive it is to use to use security

00:18:40,799 --> 00:18:43,619
so don't look at this as absolute

00:18:42,149 --> 00:18:46,409
numbers I'd look at it as a relative

00:18:43,619 --> 00:18:47,970
numbers right another thing is that is

00:18:46,409 --> 00:18:49,080
multi-dimensional right you could start

00:18:47,970 --> 00:18:51,029
looking at well what is really

00:18:49,080 --> 00:18:52,350
performances depends on the quality of

00:18:51,029 --> 00:18:54,269
service depends on the scalability

00:18:52,350 --> 00:18:56,879
depends on the data size depends on so

00:18:54,269 --> 00:19:00,059
many things right so it's not an easy

00:18:56,879 --> 00:19:03,539
solution right but I want to talk about

00:19:00,059 --> 00:19:05,669
that because encryption and protection

00:19:03,539 --> 00:19:06,779
is again it's also multi-dimensional

00:19:05,669 --> 00:19:08,159
Jack you can basically at the

00:19:06,779 --> 00:19:10,289
application level when you write data

00:19:08,159 --> 00:19:11,669
you could be encrypting the data but

00:19:10,289 --> 00:19:13,289
then when you put the data on the wire

00:19:11,669 --> 00:19:15,090
you could also be encrypting the wire

00:19:13,289 --> 00:19:16,859
like when you use TLS or the TLS you

00:19:15,090 --> 00:19:18,149
would do that type of thing right and

00:19:16,859 --> 00:19:20,159
depending on how many of those

00:19:18,149 --> 00:19:22,830
encryptions you do you can get different

00:19:20,159 --> 00:19:24,359
characteristics and DBS actually offers

00:19:22,830 --> 00:19:26,429
some unique properties there that

00:19:24,359 --> 00:19:27,659
actually end up being very helpful for

00:19:26,429 --> 00:19:29,970
performance but you won't see that

00:19:27,659 --> 00:19:31,739
benefit if you if you are testing a

00:19:29,970 --> 00:19:33,840
single producer to a single consumer

00:19:31,739 --> 00:19:35,309
right because that's a very simple case

00:19:33,840 --> 00:19:36,749
where you're only either way you're only

00:19:35,309 --> 00:19:38,190
going to do one encryption you already

00:19:36,749 --> 00:19:41,580
see that benefit when you go into more

00:19:38,190 --> 00:19:44,009
complex scenarios with multi producers

00:19:41,580 --> 00:19:46,440
and consumers so typically when a

00:19:44,009 --> 00:19:49,409
message gets written on the wire you've

00:19:46,440 --> 00:19:50,730
got essentially data and data is what

00:19:49,409 --> 00:19:52,830
your application writes that gets

00:19:50,730 --> 00:19:55,200
serialized and if it goes through a

00:19:52,830 --> 00:19:56,639
process or encryption that data is going

00:19:55,200 --> 00:19:58,679
to be encrypted and then you're going to

00:19:56,639 --> 00:20:00,480
have some headers and footers myself

00:19:58,679 --> 00:20:02,340
indication cause that

00:20:00,480 --> 00:20:04,560
but when the data gets put on the wire

00:20:02,340 --> 00:20:07,020
that whole message itself can also be

00:20:04,560 --> 00:20:09,060
wrapped right so that's what's called a

00:20:07,020 --> 00:20:09,870
message protection or RTP res protection

00:20:09,060 --> 00:20:12,090
that doesn't really care about

00:20:09,870 --> 00:20:13,350
individual data it cares about the whole

00:20:12,090 --> 00:20:14,760
message and that's kind of more of a

00:20:13,350 --> 00:20:16,020
transport level type protection and

00:20:14,760 --> 00:20:18,240
typically people are going to combine

00:20:16,020 --> 00:20:19,830
those two type of things because one of

00:20:18,240 --> 00:20:21,540
them is going to protect the contents of

00:20:19,830 --> 00:20:23,370
the data and the other one is going to

00:20:21,540 --> 00:20:28,040
protect things like sequence numbers and

00:20:23,370 --> 00:20:30,090
sort of protocol level type details and

00:20:28,040 --> 00:20:32,400
so going back to the original question

00:20:30,090 --> 00:20:34,260
how do you separate protection from

00:20:32,400 --> 00:20:36,420
reading versus writing so the only way

00:20:34,260 --> 00:20:39,300
to protect and separate the permissions

00:20:36,420 --> 00:20:40,650
to read or write is that a reader needs

00:20:39,300 --> 00:20:42,690
to get some unique piece of information

00:20:40,650 --> 00:20:45,030
from the writer that nobody else has

00:20:42,690 --> 00:20:46,620
only the writer has right so if the

00:20:45,030 --> 00:20:48,330
reader shares something in common with

00:20:46,620 --> 00:20:51,390
the writer that the other readers don't

00:20:48,330 --> 00:20:52,830
know then the reader can check that you

00:20:51,390 --> 00:20:54,260
know that unique piece of information

00:20:52,830 --> 00:20:57,120
that gets using some kind of signature

00:20:54,260 --> 00:21:00,390
came from that particular writer so the

00:20:57,120 --> 00:21:03,450
way DDS does that is by using this kind

00:21:00,390 --> 00:21:05,910
of Multi multi message authentication

00:21:03,450 --> 00:21:07,980
code and we call that Orion

00:21:05,910 --> 00:21:09,990
authentication and the way it works is

00:21:07,980 --> 00:21:12,300
that when you've got a piece of data or

00:21:09,990 --> 00:21:13,440
it could be a whole RTDs message first

00:21:12,300 --> 00:21:15,590
of all this thing goes through a

00:21:13,440 --> 00:21:17,730
cryptographic mechanism where it gets

00:21:15,590 --> 00:21:19,080
encrypted and then signed with what is

00:21:17,730 --> 00:21:21,120
called a common matte common

00:21:19,080 --> 00:21:22,860
misidentification code that is shared

00:21:21,120 --> 00:21:25,800
with all their authorized readers for

00:21:22,860 --> 00:21:28,260
this message but then it follows that

00:21:25,800 --> 00:21:30,510
with a set of receiver a specific

00:21:28,260 --> 00:21:32,550
authentication codes each one of these

00:21:30,510 --> 00:21:34,110
authentication codes is basically

00:21:32,550 --> 00:21:36,210
signing this it's not signing the whole

00:21:34,110 --> 00:21:38,370
thing is signing the previous Mac but

00:21:36,210 --> 00:21:40,920
it's signed that with a key that is

00:21:38,370 --> 00:21:43,080
shared only with one reader so the

00:21:40,920 --> 00:21:45,060
receiver a will be looking for this

00:21:43,080 --> 00:21:46,260
signature and the receiver B will be

00:21:45,060 --> 00:21:47,610
looking for this signature and the

00:21:46,260 --> 00:21:50,910
receiver C will be looking for that

00:21:47,610 --> 00:21:52,500
signature so then it's impossible for so

00:21:50,910 --> 00:21:54,780
if I'm receiver 3 and I'm looking for

00:21:52,500 --> 00:21:56,490
this signature nobody else other than

00:21:54,780 --> 00:21:58,230
the sender could actually put that

00:21:56,490 --> 00:22:01,470
signature because the sender only shared

00:21:58,230 --> 00:22:03,510
that secret key with the receiver 3

00:22:01,470 --> 00:22:04,920
right that's why I had to reserve to

00:22:03,510 --> 00:22:06,900
share different keys with each one of

00:22:04,920 --> 00:22:09,420
the receivers so that adds a little bit

00:22:06,900 --> 00:22:13,730
of payload right but it adds like 128

00:22:09,420 --> 00:22:15,800
bytes of payload to every 120

00:22:13,730 --> 00:22:17,750
sorry of payload - every message per

00:22:15,800 --> 00:22:19,190
receiver it's much more efficient than

00:22:17,750 --> 00:22:21,320
sending the whole message again with a

00:22:19,190 --> 00:22:25,430
different key like something like TLS or

00:22:21,320 --> 00:22:26,660
something would do so in the end you can

00:22:25,430 --> 00:22:28,730
see here what happens with the DIA

00:22:26,660 --> 00:22:30,680
security versus other technologies if

00:22:28,730 --> 00:22:33,110
you use a classic transport level

00:22:30,680 --> 00:22:34,640
security the data gets encrypted as it

00:22:33,110 --> 00:22:36,920
goes to a transfer so you write up the

00:22:34,640 --> 00:22:38,870
piece of information it goes to three

00:22:36,920 --> 00:22:40,610
consumers is going to be encrypted and

00:22:38,870 --> 00:22:43,070
signed three times right that's the top

00:22:40,610 --> 00:22:44,750
level if you use it via security that it

00:22:43,070 --> 00:22:47,360
is going to be encrypted just once and

00:22:44,750 --> 00:22:48,680
then if it goes over unicast it may be

00:22:47,360 --> 00:22:50,240
sent three times that you're going to be

00:22:48,680 --> 00:22:51,560
exactly the same message I guess sent

00:22:50,240 --> 00:22:53,540
three times so that's a lot more

00:22:51,560 --> 00:22:55,490
efficient if on top of that you have

00:22:53,540 --> 00:22:57,140
multicast then you're actually only

00:22:55,490 --> 00:22:59,560
going to put it on the wall once and the

00:22:57,140 --> 00:23:01,910
network going to two or three places

00:22:59,560 --> 00:23:03,770
combine that with Orion authentication

00:23:01,910 --> 00:23:05,330
you are not losing the ability to know

00:23:03,770 --> 00:23:07,160
that the message came from the actual

00:23:05,330 --> 00:23:08,750
writer and not the other thing so you

00:23:07,160 --> 00:23:10,070
can see how that can be a lot more

00:23:08,750 --> 00:23:12,710
efficient than doing something like

00:23:10,070 --> 00:23:14,750
transport level security so now to the

00:23:12,710 --> 00:23:17,390
numbers of what what the performance

00:23:14,750 --> 00:23:18,200
looks like so I've taken some numbers

00:23:17,390 --> 00:23:20,090
here and you can look at the

00:23:18,200 --> 00:23:22,010
presentation later and wall detail but

00:23:20,090 --> 00:23:24,260
the bottom lines of scanning from 32

00:23:22,010 --> 00:23:25,850
byte 2 1 megabyte different

00:23:24,260 --> 00:23:27,860
configuration from no security which

00:23:25,850 --> 00:23:29,390
will be the baseline just signing the

00:23:27,860 --> 00:23:32,830
message as a message authentication code

00:23:29,390 --> 00:23:35,150
encrypt the message and sign it or

00:23:32,830 --> 00:23:36,980
encrypt the date so include the date and

00:23:35,150 --> 00:23:38,960
sign the overall message or encrypt the

00:23:36,980 --> 00:23:41,150
data sign the overall message and add an

00:23:38,960 --> 00:23:42,920
Orion authentication you can see what

00:23:41,150 --> 00:23:44,420
the cost is and you can see that the

00:23:42,920 --> 00:23:46,910
Orion authentication would is a one to

00:23:44,420 --> 00:23:48,860
one case doesn't really add any cost but

00:23:46,910 --> 00:23:51,500
we will see four in other slides what is

00:23:48,860 --> 00:23:52,820
for other ones but you get the rough

00:23:51,500 --> 00:23:55,850
idea that is going to be somewhere

00:23:52,820 --> 00:23:58,160
between you know 1 to 25 percent

00:23:55,850 --> 00:23:59,390
or to 40 percent overhead depending on

00:23:58,160 --> 00:24:01,640
the message size of course for a small

00:23:59,390 --> 00:24:04,460
messages they it's a lot more expensive

00:24:01,640 --> 00:24:06,590
because because the encryption is these

00:24:04,460 --> 00:24:08,420
block sites is going to add a payload on

00:24:06,590 --> 00:24:10,730
that and this is the throughput and

00:24:08,420 --> 00:24:11,960
again you can see that is not a whole

00:24:10,730 --> 00:24:14,330
significant degradation on the

00:24:11,960 --> 00:24:17,300
throughput through a different kind of

00:24:14,330 --> 00:24:18,740
cryptographic techniques I've produced I

00:24:17,300 --> 00:24:20,090
have some other slides what you can

00:24:18,740 --> 00:24:22,760
actually look what happens when you go

00:24:20,090 --> 00:24:24,560
from 1 to 4 consumers for example and

00:24:22,760 --> 00:24:26,630
you can see and this is using multicast

00:24:24,560 --> 00:24:27,620
it's all reliable you can see a little

00:24:26,630 --> 00:24:29,990
bit of degradation

00:24:27,620 --> 00:24:31,610
because of the reliability thank you

00:24:29,990 --> 00:24:33,559
because of the reliability that causes

00:24:31,610 --> 00:24:35,600
like essentially the sender to throttle

00:24:33,559 --> 00:24:38,539
to the slowest consumer but you can see

00:24:35,600 --> 00:24:40,010
that it's not like you don't get have

00:24:38,539 --> 00:24:41,450
the performance when you go to to on a

00:24:40,010 --> 00:24:44,510
Quadra performance when you go to form

00:24:41,450 --> 00:24:46,220
right so I want to talk a little bit

00:24:44,510 --> 00:24:48,919
about rosin videos with the remaining

00:24:46,220 --> 00:24:52,220
five minutes so the wave rose maps to

00:24:48,919 --> 00:24:54,260
DDS basically there is a lot of similar

00:24:52,220 --> 00:24:56,059
concepts the publishers have data

00:24:54,260 --> 00:24:59,179
writers in DDS subscribers have that the

00:24:56,059 --> 00:25:01,010
readers qsr profiles and so forth and

00:24:59,179 --> 00:25:02,929
there is a little bit of a mapping when

00:25:01,010 --> 00:25:05,570
it comes down to the names so where the

00:25:02,929 --> 00:25:07,520
raw service name gets eventually mapped

00:25:05,570 --> 00:25:09,620
to a topic name it gets you know

00:25:07,520 --> 00:25:11,090
prefixed with some things it gets put

00:25:09,620 --> 00:25:12,919
into a namespace and so forth so that's

00:25:11,090 --> 00:25:14,299
why these tools help you're really not

00:25:12,919 --> 00:25:16,370
having to know all those things and be

00:25:14,299 --> 00:25:23,590
able to to get the right artifacts for

00:25:16,370 --> 00:25:26,899
the VBS configured so maybe I'll so I

00:25:23,590 --> 00:25:29,179
don't have much more time but what's

00:25:26,899 --> 00:25:32,690
good about this is you can come to the

00:25:29,179 --> 00:25:34,820
s-cross to tutorial at i Ross Monday to

00:25:32,690 --> 00:25:36,890
figure out more and so basically we're

00:25:34,820 --> 00:25:38,750
going to talk about give an introduction

00:25:36,890 --> 00:25:41,210
to the tooling the current

00:25:38,750 --> 00:25:43,909
infrastructure so what the Ross -

00:25:41,210 --> 00:25:45,620
security commands do some of the works

00:25:43,909 --> 00:25:47,690
I've been doing on key mint so here's an

00:25:45,620 --> 00:25:49,909
example of what's the minimal policy

00:25:47,690 --> 00:25:51,950
look like for a talker and so you need

00:25:49,909 --> 00:25:53,480
to allow that publisher chatter you need

00:25:51,950 --> 00:25:55,809
to access to the clock you need access

00:25:53,480 --> 00:25:58,250
to all these other parameter services

00:25:55,809 --> 00:26:00,679
and so some of the other stuff I've been

00:25:58,250 --> 00:26:03,380
working on it's more expressive policy

00:26:00,679 --> 00:26:07,870
syntax and how you can compress this

00:26:03,380 --> 00:26:10,130
into more of a modular composition

00:26:07,870 --> 00:26:11,720
something that you could do static

00:26:10,130 --> 00:26:14,330
analysis on so here we have an

00:26:11,720 --> 00:26:15,950
equivalent definition of a profile that

00:26:14,330 --> 00:26:18,590
you can label you can have multiple

00:26:15,950 --> 00:26:21,260
attachments to bind the same policy than

00:26:18,590 --> 00:26:23,330
multiple subjects and then also have

00:26:21,260 --> 00:26:26,029
multiple objects with the you know maybe

00:26:23,330 --> 00:26:28,490
common permissions and then also use

00:26:26,029 --> 00:26:30,190
nested imports like you would have like

00:26:28,490 --> 00:26:33,649
any kind of programming language to

00:26:30,190 --> 00:26:36,020
redefine common attributes among certain

00:26:33,649 --> 00:26:38,990
elements of your policy that way you can

00:26:36,020 --> 00:26:40,890
be more sure of your policy definition

00:26:38,990 --> 00:26:45,710
how maybe how you verify it

00:26:40,890 --> 00:26:50,100
as a small component of modular parts

00:26:45,710 --> 00:26:52,230
some its current aspects of s Ross so we

00:26:50,100 --> 00:26:55,460
know that we can ensure know the

00:26:52,230 --> 00:26:58,710
authentication with domains topics

00:26:55,460 --> 00:27:01,020
services parameters are currently on the

00:26:58,710 --> 00:27:03,660
granularity of nodes we're working on

00:27:01,020 --> 00:27:05,610
new ways to kind of address that so

00:27:03,660 --> 00:27:07,260
that's a key nother key point of the

00:27:05,610 --> 00:27:10,640
security meetup they're going to have

00:27:07,260 --> 00:27:15,780
tomorrow at lunch as well as during the

00:27:10,640 --> 00:27:18,570
Ross con or the i Ross tutorial its

00:27:15,780 --> 00:27:21,030
current week points right now like I

00:27:18,570 --> 00:27:24,420
said the not everything is exposed

00:27:21,030 --> 00:27:27,060
during an S Ross interface but that's to

00:27:24,420 --> 00:27:32,220
be expected because DDS expands so much

00:27:27,060 --> 00:27:35,310
whiter Mesa closing points so yeah

00:27:32,220 --> 00:27:38,100
thanks so they basically what I want you

00:27:35,310 --> 00:27:40,740
to live understanding here is basically

00:27:38,100 --> 00:27:43,050
that so it's a good foundation for what

00:27:40,740 --> 00:27:44,760
as Ross is trying to do the capabilities

00:27:43,050 --> 00:27:46,230
the security the DDS provides obviously

00:27:44,760 --> 00:27:48,300
there is more things there and they some

00:27:46,230 --> 00:27:51,600
of them if they are useful to Ross they

00:27:48,300 --> 00:27:52,980
will emerge but when it comes down to

00:27:51,600 --> 00:27:54,690
the plumbing you know what kind of

00:27:52,980 --> 00:27:57,450
cryptography techniques is used is it

00:27:54,690 --> 00:27:59,010
scalable is it high performance we're

00:27:57,450 --> 00:28:02,070
basically using best of class techniques

00:27:59,010 --> 00:28:03,300
with AES and you know elliptic curve and

00:28:02,070 --> 00:28:05,880
so forth diffie-hellman for

00:28:03,300 --> 00:28:07,920
authentication for for shared key

00:28:05,880 --> 00:28:09,360
establishment it's very important to

00:28:07,920 --> 00:28:10,590
know about all this fine granularity I

00:28:09,360 --> 00:28:12,720
think this is one of the things that is

00:28:10,590 --> 00:28:15,030
typically overlooked in security so

00:28:12,720 --> 00:28:17,010
being able to really control access at

00:28:15,030 --> 00:28:19,170
the finest possible level and also

00:28:17,010 --> 00:28:20,490
control how much you want to spend like

00:28:19,170 --> 00:28:22,500
wait maybe for some day that you don't

00:28:20,490 --> 00:28:23,820
need to encrypt it and sent occasion is

00:28:22,500 --> 00:28:25,590
sufficient because you just need to

00:28:23,820 --> 00:28:27,300
prevent from tampering right so to have

00:28:25,590 --> 00:28:29,460
the ability to set that it's quite

00:28:27,300 --> 00:28:31,020
important and also to know that if if

00:28:29,460 --> 00:28:32,250
you don't find what you need there then

00:28:31,020 --> 00:28:33,300
you can build your own plugins that's

00:28:32,250 --> 00:28:35,790
also pretty good thing to know

00:28:33,300 --> 00:28:36,960
another nice thing about the way it

00:28:35,790 --> 00:28:39,000
works is that it's transferring

00:28:36,960 --> 00:28:40,650
dependence if you decide to to deploy

00:28:39,000 --> 00:28:42,060
this over shared memory for example and

00:28:40,650 --> 00:28:43,950
some of the DES implementations out

00:28:42,060 --> 00:28:45,270
there support shared memory you don't

00:28:43,950 --> 00:28:46,560
have to change anything it still works

00:28:45,270 --> 00:28:48,630
because it's not trying to take

00:28:46,560 --> 00:28:50,970
advantage of something like TLS that is

00:28:48,630 --> 00:28:52,710
baked into the transport and finally and

00:28:50,970 --> 00:28:54,330
this is very good it's just a configured

00:28:52,710 --> 00:28:54,750
set of configuration files so you can

00:28:54,330 --> 00:28:56,610
build up

00:28:54,750 --> 00:28:58,140
education without security and then you

00:28:56,610 --> 00:29:00,390
use the tools to create the security

00:28:58,140 --> 00:29:02,010
artifacts that you need and then you

00:29:00,390 --> 00:29:04,200
basically run them enabling security

00:29:02,010 --> 00:29:05,700
certain environment variables and then

00:29:04,200 --> 00:29:08,580
of a sudden it's all secure so don't

00:29:05,700 --> 00:29:20,910
have to change anything so that's what I

00:29:08,580 --> 00:29:22,680
had thank you we have time for one

00:29:20,910 --> 00:29:24,360
question if anyone in the audience has

00:29:22,680 --> 00:29:26,460
one otherwise I'll start you off can you

00:29:24,360 --> 00:29:29,280
give an overview for people who are

00:29:26,460 --> 00:29:31,770
looking to use DDS security it rose to

00:29:29,280 --> 00:29:33,060
users is that available out of the box

00:29:31,770 --> 00:29:38,220
or is there something special that they

00:29:33,060 --> 00:29:42,210
have to do currently security is

00:29:38,220 --> 00:29:44,490
released with rosti bouncey so they can

00:29:42,210 --> 00:29:46,950
currently they can use the s-cross tool

00:29:44,490 --> 00:29:50,910
that is shipped to try out the demo

00:29:46,950 --> 00:29:53,240
talker example so they basically have

00:29:50,910 --> 00:29:56,010
all you need what we're working on is to

00:29:53,240 --> 00:29:58,580
simplify the user experience so it's

00:29:56,010 --> 00:30:01,380
harder to shoot yourself in the foot and

00:29:58,580 --> 00:30:04,170
as well as expand the feature set so we

00:30:01,380 --> 00:30:10,310
can take more advantage of feature

00:30:04,170 --> 00:30:10,310
parity in PDS thank you very much

00:30:10,590 --> 00:30:13,750

YouTube URL: https://www.youtube.com/watch?v=QEPGvs-18SA


