Title: ROSCon 2018 Madrid Astrobee ROS based Flight Software for a Free flying Robot in Microgravity
Publication date: 2021-03-28
Playlist: ROSCon 2018
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2018 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:18,640 --> 00:00:24,640
right okay I think that following the

00:00:22,750 --> 00:00:27,610
last talk it's my duty

00:00:24,640 --> 00:00:29,170
now that open-source oh sorry open

00:00:27,610 --> 00:00:32,560
robotics has thanked all their sponsors

00:00:29,170 --> 00:00:34,300
I get to thank them I know that Ross has

00:00:32,560 --> 00:00:37,480
been an essential tool in over a number

00:00:34,300 --> 00:00:38,980
of projects at NASA and I think on

00:00:37,480 --> 00:00:40,870
behalf of the community I want to thank

00:00:38,980 --> 00:00:42,850
them for providing an even keel when I

00:00:40,870 --> 00:00:44,020
know all the effects of Industry and

00:00:42,850 --> 00:00:46,230
academia pulling them in different

00:00:44,020 --> 00:00:48,280
directions so thank you to the entire

00:00:46,230 --> 00:00:49,900
open Robotics Rus team

00:00:48,280 --> 00:00:51,460
Isabeau team for producing such

00:00:49,900 --> 00:00:53,470
fantastic another way that's been so

00:00:51,460 --> 00:00:57,280
useful in expediting the work we've done

00:00:53,470 --> 00:00:59,470
at NASA - thank you okay so my name is

00:00:57,280 --> 00:01:00,460
Andrew Symington I'm actually an

00:00:59,470 --> 00:01:01,840
employee of Stinger ghaffarian

00:01:00,460 --> 00:01:04,899
technologies which is a government

00:01:01,840 --> 00:01:07,210
contractor at NASA and I'm here today to

00:01:04,899 --> 00:01:09,190
tell you about a pretty exciting project

00:01:07,210 --> 00:01:11,710
called Astra B that's happened over the

00:01:09,190 --> 00:01:13,990
last four years just so I get a sense

00:01:11,710 --> 00:01:15,700
has anybody done any sort of reading

00:01:13,990 --> 00:01:17,680
hands up does anyone know what Astra B

00:01:15,700 --> 00:01:21,160
is roughly so you know there are few ok

00:01:17,680 --> 00:01:22,900
good ok so um I'm actually on the flight

00:01:21,160 --> 00:01:24,250
software team I'm a first year research

00:01:22,900 --> 00:01:26,110
scientist but I spend a lot of time

00:01:24,250 --> 00:01:29,200
programming and a lot of time also doing

00:01:26,110 --> 00:01:33,280
research and we've got six members

00:01:29,200 --> 00:01:35,290
across our team and today I have

00:01:33,280 --> 00:01:38,710
tailored this presentation in a way

00:01:35,290 --> 00:01:40,930
where it kind of describes then what

00:01:38,710 --> 00:01:42,520
Astra B is it kind of feels it's more

00:01:40,930 --> 00:01:45,220
interesting technical components and

00:01:42,520 --> 00:01:46,570
then a little bit deeper into some of

00:01:45,220 --> 00:01:49,810
the challenges we faced with Ross and

00:01:46,570 --> 00:01:51,490
how we solved them so without further

00:01:49,810 --> 00:01:53,830
ado I think everybody's probably asking

00:01:51,490 --> 00:01:57,790
themselves at this point what is Astra

00:01:53,830 --> 00:02:00,880
be so Astra B is a one by one by one

00:01:57,790 --> 00:02:02,710
foot free flying robots designed to work

00:02:00,880 --> 00:02:04,960
inside the International Space Station

00:02:02,710 --> 00:02:06,670
and so for a sense of size you could

00:02:04,960 --> 00:02:11,610
probably be comfortably Huggett I would

00:02:06,670 --> 00:02:14,890
guess the objective of this robot is to

00:02:11,610 --> 00:02:18,120
essentially provide a means for us to do

00:02:14,890 --> 00:02:21,060
some surveying across the ISS

00:02:18,120 --> 00:02:25,290
environmental inspection by a camera via

00:02:21,060 --> 00:02:28,380
sensors it's and it's a second primary

00:02:25,290 --> 00:02:30,300
task is also to act as a pan and tilt

00:02:28,380 --> 00:02:33,240
camera and so if you look at the

00:02:30,300 --> 00:02:35,130
diagrams here you'll see that it's got a

00:02:33,240 --> 00:02:37,080
perching arm and the idea behind that is

00:02:35,130 --> 00:02:39,660
that it can deploy that perching arm and

00:02:37,080 --> 00:02:41,040
perch to handrails on the ISS and that

00:02:39,660 --> 00:02:42,750
way it can turn off its propulsion

00:02:41,040 --> 00:02:44,880
system turn off its localization system

00:02:42,750 --> 00:02:47,070
and essentially going to a low-power

00:02:44,880 --> 00:02:49,920
mode where all it's doing is providing

00:02:47,070 --> 00:02:52,080
an Intel camera to ground ground station

00:02:49,920 --> 00:02:55,440
and then the last and probably most

00:02:52,080 --> 00:02:58,050
exciting feature of this robot is that

00:02:55,440 --> 00:03:01,080
it's a free flying scientific payload

00:02:58,050 --> 00:03:04,380
robot so it's got three payload Bay's so

00:03:01,080 --> 00:03:05,370
if you're in research or or maybe in the

00:03:04,380 --> 00:03:07,950
private sector and you want to develop

00:03:05,370 --> 00:03:10,260
payload and you've got some cool idea

00:03:07,950 --> 00:03:13,320
for some new interesting sensing or

00:03:10,260 --> 00:03:15,360
actuation tasks in microgravity it's the

00:03:13,320 --> 00:03:16,670
platform that NASA can provide to help

00:03:15,360 --> 00:03:19,200
get you there

00:03:16,670 --> 00:03:21,660
now the design of this robot is such

00:03:19,200 --> 00:03:23,160
that we ultimately don't want it to be

00:03:21,660 --> 00:03:25,500
crew tended so we'd like it to be able

00:03:23,160 --> 00:03:26,940
to operate remotely I'm not going to use

00:03:25,500 --> 00:03:28,560
the word autonomous because it's not

00:03:26,940 --> 00:03:30,810
really an autonomous it's kind of semi

00:03:28,560 --> 00:03:32,700
autonomous autonomous because the our

00:03:30,810 --> 00:03:35,220
ground station controllers are actively

00:03:32,700 --> 00:03:36,510
monitoring the robot and the other cool

00:03:35,220 --> 00:03:38,940
feature about this robot is that it's

00:03:36,510 --> 00:03:41,220
also got completely open-source flight

00:03:38,940 --> 00:03:45,209
software and we can upgrade that

00:03:41,220 --> 00:03:47,190
software on orbit oh and by the way I've

00:03:45,209 --> 00:03:48,660
got a few references at the bottom in

00:03:47,190 --> 00:03:50,910
case anybody wants to dive a little bit

00:03:48,660 --> 00:03:52,890
deeper and read a paper on so these

00:03:50,910 --> 00:03:55,860
slides are disseminated later so you can

00:03:52,890 --> 00:03:58,049
you can get read so it's not the first

00:03:55,860 --> 00:04:01,890
free flyer on there on the ISS in fact

00:03:58,049 --> 00:04:03,120
there have been a couple at NASA the

00:04:01,890 --> 00:04:04,500
sphere's project has been very

00:04:03,120 --> 00:04:07,500
successful it was a collaboration with

00:04:04,500 --> 00:04:09,239
MIT and in fact the spheres robot only

00:04:07,500 --> 00:04:11,760
might have seen it before the one at the

00:04:09,239 --> 00:04:14,850
bottom right is actually the most used

00:04:11,760 --> 00:04:16,530
by a payload on the ISS the problem

00:04:14,850 --> 00:04:19,680
unfortunately with spheres is over time

00:04:16,530 --> 00:04:20,910
its lack of computational resources has

00:04:19,680 --> 00:04:23,010
become evident

00:04:20,910 --> 00:04:25,560
it also uses co2 tanks so you have to

00:04:23,010 --> 00:04:28,350
keep replenishing the co2 tanks to make

00:04:25,560 --> 00:04:30,150
an essentially fly and it also doesn't

00:04:28,350 --> 00:04:31,590
have rechargeable batteries it turns out

00:04:30,150 --> 00:04:32,910
getting a rechargeable battery on the

00:04:31,590 --> 00:04:36,300
International Space Station is rather

00:04:32,910 --> 00:04:39,270
tough so the other free Flyers which

00:04:36,300 --> 00:04:41,490
aren't developed at NASA are in Paul and

00:04:39,270 --> 00:04:43,020
Simon in fact the most recent you might

00:04:41,490 --> 00:04:46,650
have seen it I believe is in ball which

00:04:43,020 --> 00:04:48,930
is JAXA and the Japanese module and it's

00:04:46,650 --> 00:04:52,470
essentially a free flying camera and

00:04:48,930 --> 00:04:53,850
then Simon is more AI targeted as an

00:04:52,470 --> 00:04:55,380
assistant for astronauts and so you can

00:04:53,850 --> 00:04:58,890
see that images of them at the bottom

00:04:55,380 --> 00:05:00,360
and slides so some a little more

00:04:58,890 --> 00:05:02,160
information about the actual hardware

00:05:00,360 --> 00:05:05,100
because we're roboticists yes so we want

00:05:02,160 --> 00:05:07,230
to know about the hardware if you look

00:05:05,100 --> 00:05:10,130
at the gear 2 diagram showing different

00:05:07,230 --> 00:05:12,870
sides of the free flyer the two large

00:05:10,130 --> 00:05:14,730
sort of units on each side on the portal

00:05:12,870 --> 00:05:17,070
starboard side our propulsion systems

00:05:14,730 --> 00:05:18,120
and I'll speak more about them later and

00:05:17,070 --> 00:05:20,700
what you'll notice is that we've got a

00:05:18,120 --> 00:05:22,590
whole suite of sensors we have many

00:05:20,700 --> 00:05:25,770
different cameras we have depth cameras

00:05:22,590 --> 00:05:27,330
we have HD cameras we have laser

00:05:25,770 --> 00:05:28,980
pointers flashlights

00:05:27,330 --> 00:05:34,670
signal lights so we've got a whole suite

00:05:28,980 --> 00:05:37,500
of interesting like new sensing and UI

00:05:34,670 --> 00:05:42,690
peripherals which you can explore as you

00:05:37,500 --> 00:05:45,540
write software and it gets a graded we

00:05:42,690 --> 00:05:47,190
also have a docking station and now this

00:05:45,540 --> 00:05:50,760
dock provides the ability for has to be

00:05:47,190 --> 00:05:53,490
to essentially recharge and also

00:05:50,760 --> 00:05:55,200
provides a S&F link so we can upload a

00:05:53,490 --> 00:05:59,370
whole bunch of ross bags once we've

00:05:55,200 --> 00:06:01,350
taken them in flight and then it's it's

00:05:59,370 --> 00:06:04,410
got its own dock controller which

00:06:01,350 --> 00:06:06,960
communicates with the robot when docked

00:06:04,410 --> 00:06:08,400
so we can essentially wake it out put it

00:06:06,960 --> 00:06:11,250
at hibernators and do a bunch of other

00:06:08,400 --> 00:06:13,590
features so it's a kind of a cool piece

00:06:11,250 --> 00:06:14,700
of hardware as well and the kind of

00:06:13,590 --> 00:06:15,810
state of the project and this is the

00:06:14,700 --> 00:06:17,640
most exciting is that we're actually

00:06:15,810 --> 00:06:19,080
having this Hardware the final

00:06:17,640 --> 00:06:21,300
certification units are being assembled

00:06:19,080 --> 00:06:23,640
so here's a picture taken probably I

00:06:21,300 --> 00:06:26,370
would guess two weeks ago and this is

00:06:23,640 --> 00:06:28,470
showing the fully fully assembled

00:06:26,370 --> 00:06:31,110
certification unit so it's essentially a

00:06:28,470 --> 00:06:33,900
replica of the ones that will be sent to

00:06:31,110 --> 00:06:34,740
the space station it turns out that the

00:06:33,900 --> 00:06:36,330
anything that goes to

00:06:34,740 --> 00:06:38,490
Space Station undergoes a whole lot of

00:06:36,330 --> 00:06:40,440
very special treatments like the average

00:06:38,490 --> 00:06:42,150
person doesn't get to touch it you have

00:06:40,440 --> 00:06:44,190
to touch it with special gloves it's a

00:06:42,150 --> 00:06:48,750
there are a whole host of reasons why

00:06:44,190 --> 00:06:50,910
they do that so the progress so far is

00:06:48,750 --> 00:06:54,210
that and the hardware's being busy being

00:06:50,910 --> 00:06:55,860
assembled to be put on orbit and we're

00:06:54,210 --> 00:06:57,960
currently undergoing a suite of

00:06:55,860 --> 00:07:00,060
different tests so we have to check for

00:06:57,960 --> 00:07:01,370
things that in other context you

00:07:00,060 --> 00:07:04,349
wouldn't need to so we have to look at

00:07:01,370 --> 00:07:06,599
it so electromagnetic interference we

00:07:04,349 --> 00:07:08,130
have to look at basic functionality does

00:07:06,599 --> 00:07:09,389
it work can we upgrade I have to check

00:07:08,130 --> 00:07:11,250
that it doesn't make too much noise that

00:07:09,389 --> 00:07:13,020
it doesn't that if we vibrated things

00:07:11,250 --> 00:07:14,940
don't come apart that it doesn't let off

00:07:13,020 --> 00:07:16,349
too much heat and it goes through months

00:07:14,940 --> 00:07:19,370
and months and months of testing before

00:07:16,349 --> 00:07:22,680
being approved to be sent up to space

00:07:19,370 --> 00:07:25,289
the so we are probably going to launch

00:07:22,680 --> 00:07:28,199
our dock on Northrop Gruman 10 which is

00:07:25,289 --> 00:07:32,210
coming up I believe in November and then

00:07:28,199 --> 00:07:34,949
three robots will follow in early 2019

00:07:32,210 --> 00:07:37,139
so inside the astra B we have three

00:07:34,949 --> 00:07:40,020
processes we have a high level processor

00:07:37,139 --> 00:07:42,110
mid level and a low level the high level

00:07:40,020 --> 00:07:46,409
processor is designed mainly for

00:07:42,110 --> 00:07:48,389
researchers to use as a free platform

00:07:46,409 --> 00:07:50,099
they can write any code in it runs

00:07:48,389 --> 00:07:53,159
Android for the sake of simplest

00:07:50,099 --> 00:07:55,860
simplistic app development and they you

00:07:53,159 --> 00:07:57,659
interface with the rest of the system

00:07:55,860 --> 00:08:00,479
through a mechanism we call guest

00:07:57,659 --> 00:08:02,370
science which is like an API effectively

00:08:00,479 --> 00:08:04,380
which gives you a an ax access to a

00:08:02,370 --> 00:08:08,280
limited subset of attributes

00:08:04,380 --> 00:08:09,509
functionality the lower level I'm

00:08:08,280 --> 00:08:10,620
starting not gonna go in order because I

00:08:09,509 --> 00:08:12,120
think it's easier to describe the low

00:08:10,620 --> 00:08:14,190
level processor and then the mid level

00:08:12,120 --> 00:08:16,560
processor the low level process that

00:08:14,190 --> 00:08:18,870
would would kind of be like the

00:08:16,560 --> 00:08:20,759
mission-critical processor so we run our

00:08:18,870 --> 00:08:22,319
guidance navigation and control and

00:08:20,759 --> 00:08:24,330
specifically our state estimation and

00:08:22,319 --> 00:08:26,610
our control and actuation as well as

00:08:24,330 --> 00:08:28,169
various signaling like status LEDs and

00:08:26,610 --> 00:08:29,789
lights so the kind of core essential

00:08:28,169 --> 00:08:31,590
things that we wouldn't want another

00:08:29,789 --> 00:08:34,250
process that's safe fault it'll causes

00:08:31,590 --> 00:08:36,200
some crash to interfere with

00:08:34,250 --> 00:08:37,400
and the mid-level processor is where we

00:08:36,200 --> 00:08:39,580
actually perform a lot of the flag

00:08:37,400 --> 00:08:41,600
software's heavy lifting tasks so

00:08:39,580 --> 00:08:43,370
localization is really computationally

00:08:41,600 --> 00:08:45,290
expensive especially when you've got HD

00:08:43,370 --> 00:08:47,120
images that you're processing so we kind

00:08:45,290 --> 00:08:48,850
of give it its own separate processes so

00:08:47,120 --> 00:08:50,930
that it doesn't cause G and C the lockup

00:08:48,850 --> 00:08:53,510
now the mid-level and low-level

00:08:50,930 --> 00:08:55,010
processors are our linux-based they're

00:08:53,510 --> 00:08:56,960
actually arm platforms the low-level

00:08:55,010 --> 00:08:58,760
process is a wad board and then the

00:08:56,960 --> 00:09:02,420
mid-level processor is an in force so

00:08:58,760 --> 00:09:04,820
it's a Qualcomm full core arm board so

00:09:02,420 --> 00:09:06,710
in the lower gigahertz range and the

00:09:04,820 --> 00:09:08,750
nice thing about this is that we can use

00:09:06,710 --> 00:09:11,330
state-of-the-art smartphone hard way

00:09:08,750 --> 00:09:12,710
because we don't have to make this robot

00:09:11,330 --> 00:09:14,360
radiation tolerant because it's

00:09:12,710 --> 00:09:16,700
operating inside the space station not

00:09:14,360 --> 00:09:18,110
outside so we kind of have the benefits

00:09:16,700 --> 00:09:19,750
of the shielding of the space station so

00:09:18,110 --> 00:09:22,880
we can use this off-the-shelf hardware

00:09:19,750 --> 00:09:25,660
now the diagram to the right gives you a

00:09:22,880 --> 00:09:29,240
sense for a very high level

00:09:25,660 --> 00:09:32,840
communication diagram of how everything

00:09:29,240 --> 00:09:34,970
communicates so MLP NLP in hlp are all

00:09:32,840 --> 00:09:39,110
on the robot themselves and they use

00:09:34,970 --> 00:09:43,250
Ross as the communication backbone but

00:09:39,110 --> 00:09:45,470
when the free flyer docks with mates

00:09:43,250 --> 00:09:47,960
with the doc it communicates over I

00:09:45,470 --> 00:09:49,670
squared C so all transactions happen

00:09:47,960 --> 00:09:53,950
with a very low-level hardware bus

00:09:49,670 --> 00:09:56,390
protocol the dock and the MLP both have

00:09:53,950 --> 00:09:59,120
Ethernet and wireless connections

00:09:56,390 --> 00:10:00,170
respectively and we use DDS as a

00:09:59,120 --> 00:10:03,950
middleware we've been doing that for a

00:10:00,170 --> 00:10:06,590
long time at NASA because we need delay

00:10:03,950 --> 00:10:08,900
tolerance and more control over our

00:10:06,590 --> 00:10:11,000
bandwidth usage and that gets relayed

00:10:08,900 --> 00:10:12,740
over the K you man down to to earth

00:10:11,000 --> 00:10:15,830
where we can where mission ops can

00:10:12,740 --> 00:10:17,300
actually control the robot okay so the

00:10:15,830 --> 00:10:19,520
exciting thing is the propulsion system

00:10:17,300 --> 00:10:21,440
this is a new propulsion system I don't

00:10:19,520 --> 00:10:24,080
believe it's ever been tested in in any

00:10:21,440 --> 00:10:25,760
other context as I mentioned we have two

00:10:24,080 --> 00:10:27,890
propulsion modules one on the port and

00:10:25,760 --> 00:10:29,660
one on the starboard side and if you

00:10:27,890 --> 00:10:31,220
look at the propulsion module right in

00:10:29,660 --> 00:10:33,350
the center where I've drawn that purple

00:10:31,220 --> 00:10:36,440
arrow is the centrifugal impeller and

00:10:33,350 --> 00:10:38,810
that draws in ambient air from inside

00:10:36,440 --> 00:10:40,970
the space station and then it compresses

00:10:38,810 --> 00:10:44,180
it lightly I'd have more point 1 psi

00:10:40,970 --> 00:10:44,860
inside a plenum and that plenum the air

00:10:44,180 --> 00:10:47,140
in that pennant

00:10:44,860 --> 00:10:48,730
then be redirected through one of six

00:10:47,140 --> 00:10:51,130
nozzles on each side so there's 12

00:10:48,730 --> 00:10:54,640
nozzles in total they're actually servo

00:10:51,130 --> 00:10:56,590
veins and the neat thing is that they're

00:10:54,640 --> 00:10:58,540
like like a quadrotor I guess the the

00:10:56,590 --> 00:10:59,980
impellers can't rotate to balance torque

00:10:58,540 --> 00:11:01,900
in the system

00:10:59,980 --> 00:11:03,670
and for the sake of simplicity what we

00:11:01,900 --> 00:11:06,340
do is we hold the impeller speed

00:11:03,670 --> 00:11:08,680
constant and what we do is we just vary

00:11:06,340 --> 00:11:11,560
the nozzle apertures and that's our

00:11:08,680 --> 00:11:14,020
that's how we achieve control now the

00:11:11,560 --> 00:11:16,450
complexity in the system lies that both

00:11:14,020 --> 00:11:18,840
it's a fully holonomic control system

00:11:16,450 --> 00:11:22,600
and in fact we're actually over actuated

00:11:18,840 --> 00:11:24,880
but the problem is that both force and

00:11:22,600 --> 00:11:26,800
torque are coupled in plenum pressure so

00:11:24,880 --> 00:11:28,810
it means your force is not independent

00:11:26,800 --> 00:11:30,640
of torque you have to kind of adjust for

00:11:28,810 --> 00:11:32,350
the fact that your steel your hard limit

00:11:30,640 --> 00:11:34,860
changes based on whether you're

00:11:32,350 --> 00:11:36,910
translating and rotating simultaneously

00:11:34,860 --> 00:11:38,590
now the cool thing about this is that

00:11:36,910 --> 00:11:40,930
it's completely propellant less we don't

00:11:38,590 --> 00:11:42,490
have to send up co2 tanks it also

00:11:40,930 --> 00:11:44,140
doesn't have any exposed rotors so no

00:11:42,490 --> 00:11:46,180
one's gonna get their hair stuck or

00:11:44,140 --> 00:11:48,670
their fingers stuck in a rotor and it's

00:11:46,180 --> 00:11:50,550
the system is rechargeable just when it

00:11:48,670 --> 00:11:53,290
docks it just automatically recharges

00:11:50,550 --> 00:11:54,820
the problem is is that it outputs a very

00:11:53,290 --> 00:11:56,950
limited amount of power so something

00:11:54,820 --> 00:12:00,250
like this I'm not gonna say won't work

00:11:56,950 --> 00:12:03,190
but is unlikely to work on because we're

00:12:00,250 --> 00:12:06,660
fighting 1g the whole time and so that

00:12:03,190 --> 00:12:08,560
makes it kind of microgravity specific

00:12:06,660 --> 00:12:11,020
looking a little bit deeper in our

00:12:08,560 --> 00:12:12,520
control while sorry I'm emotional

00:12:11,020 --> 00:12:15,220
control pipeline I'll use a laser

00:12:12,520 --> 00:12:17,170
pointer for this remember I said that I

00:12:15,220 --> 00:12:19,050
think everybody should be familiar with

00:12:17,170 --> 00:12:22,240
a diagram like this it's kind of loosely

00:12:19,050 --> 00:12:24,610
robotic control stack we have an

00:12:22,240 --> 00:12:27,010
interesting design of our control system

00:12:24,610 --> 00:12:28,480
because we have this propulsion system

00:12:27,010 --> 00:12:30,280
here which takes the blower speed which

00:12:28,480 --> 00:12:32,410
is the impeller speed and remember one

00:12:30,280 --> 00:12:34,690
of those 12 nozzle values and we have

00:12:32,410 --> 00:12:36,940
this force allocation block and this is

00:12:34,690 --> 00:12:38,590
a Ross node that effectively takes the

00:12:36,940 --> 00:12:41,530
desired wrench you want to achieve on

00:12:38,590 --> 00:12:42,970
the platform and then works out its base

00:12:41,530 --> 00:12:44,800
it got a dynamic model that works out

00:12:42,970 --> 00:12:47,590
what the correct nozzle values are to

00:12:44,800 --> 00:12:49,960
send to propulsion to achieve that now

00:12:47,590 --> 00:12:53,170
the controller is I believe a simple

00:12:49,960 --> 00:12:55,930
relatively simple PID controller and it

00:12:53,170 --> 00:12:58,050
takes the command would be a segment or

00:12:55,930 --> 00:12:59,460
a trajectory you want to follow

00:12:58,050 --> 00:13:01,170
and then you get the output of your

00:12:59,460 --> 00:13:02,910
filter and the controller works out what

00:13:01,170 --> 00:13:06,180
Ridge you want to achieve so standard

00:13:02,910 --> 00:13:07,530
sort of control stuff the filter which

00:13:06,180 --> 00:13:10,740
is our status to mate our guidance

00:13:07,530 --> 00:13:12,750
navigation system it takes I new

00:13:10,740 --> 00:13:14,100
measurements propagates them forward and

00:13:12,750 --> 00:13:16,710
then periodically corrects them with

00:13:14,100 --> 00:13:18,090
features now localization I'm going to

00:13:16,710 --> 00:13:19,740
deal with in an entirely different slide

00:13:18,090 --> 00:13:22,320
because it's we've got several different

00:13:19,740 --> 00:13:24,870
pipelines but I can reduce the

00:13:22,320 --> 00:13:26,700
complexity of a localization system to a

00:13:24,870 --> 00:13:29,850
set of registration pulses and features

00:13:26,700 --> 00:13:32,790
and the reason we do this is there's a

00:13:29,850 --> 00:13:33,900
large latency between acquiring an image

00:13:32,790 --> 00:13:36,300
and getting the features out of that

00:13:33,900 --> 00:13:38,130
image so our folks as I need filters an

00:13:36,300 --> 00:13:40,500
augmented state common filter that takes

00:13:38,130 --> 00:13:42,810
into account this delay and content and

00:13:40,500 --> 00:13:45,540
essentially does statistics subject to

00:13:42,810 --> 00:13:47,250
this delay finally the thing I want to

00:13:45,540 --> 00:13:49,800
mention is that the choreographer is

00:13:47,250 --> 00:13:51,930
essentially the orchestrator of motion

00:13:49,800 --> 00:13:53,460
in the system so this red arrow

00:13:51,930 --> 00:13:55,110
indicates this is where high-level

00:13:53,460 --> 00:13:57,150
control comes from our executive block

00:13:55,110 --> 00:14:00,330
so we say hey we want you to move this

00:13:57,150 --> 00:14:02,490
way the choreographer then uses the

00:14:00,330 --> 00:14:03,810
planners to plan some sort of motion

00:14:02,490 --> 00:14:05,490
that gets you there and I'll talk a

00:14:03,810 --> 00:14:06,930
little bit more about those and then

00:14:05,490 --> 00:14:09,660
feeds it to the controller which then

00:14:06,930 --> 00:14:11,790
forwarded on its propulsion in parallel

00:14:09,660 --> 00:14:13,620
we also process depth camera

00:14:11,790 --> 00:14:16,710
measurements in a mapping service system

00:14:13,620 --> 00:14:18,210
based on Octomom and that warns us

00:14:16,710 --> 00:14:21,150
because it knows what our current pose

00:14:18,210 --> 00:14:22,890
is when we are going to potentially

00:14:21,150 --> 00:14:26,010
collide with an object obstacle and that

00:14:22,890 --> 00:14:27,270
notifies the choreographer to stop we

00:14:26,010 --> 00:14:28,920
take a very safe approach we're not

00:14:27,270 --> 00:14:30,360
trying replanting initially we just want

00:14:28,920 --> 00:14:32,070
to make sure that you know if we see

00:14:30,360 --> 00:14:36,180
something moving in that's going to

00:14:32,070 --> 00:14:37,320
intersect with our segment we start so

00:14:36,180 --> 00:14:40,680
here's a little more information about

00:14:37,320 --> 00:14:42,840
our localization system so we have the

00:14:40,680 --> 00:14:45,510
IMU the RGB camera and the depth camera

00:14:42,840 --> 00:14:46,830
its specifications are there I don't

00:14:45,510 --> 00:14:49,230
need to go through all of them you can

00:14:46,830 --> 00:14:51,210
just get a sense for what we have the

00:14:49,230 --> 00:14:54,420
localization as I mentioned is split

00:14:51,210 --> 00:14:56,820
into a number of pipelines we have three

00:14:54,420 --> 00:14:58,380
pipelines which I'll go over there are a

00:14:56,820 --> 00:15:00,200
few more but they're basic utility

00:14:58,380 --> 00:15:02,930
pipelines like

00:15:00,200 --> 00:15:04,269
localization and youth poetry stuff

00:15:02,930 --> 00:15:07,910
that's not going to be too interesting

00:15:04,269 --> 00:15:11,209
sparse mapping we use for general

00:15:07,910 --> 00:15:14,680
navigation and its uses features from a

00:15:11,209 --> 00:15:17,300
wide-angle monocular grayscale camera

00:15:14,680 --> 00:15:19,610
and then marker tracking is used

00:15:17,300 --> 00:15:21,709
specifically when we dock and undock we

00:15:19,610 --> 00:15:24,709
use fiducial markers on the dock to get

00:15:21,709 --> 00:15:26,149
a higher precision and then a handrail

00:15:24,709 --> 00:15:27,589
tracking is that we track a position of

00:15:26,149 --> 00:15:30,100
a handrail oppose it a handrail relative

00:15:27,589 --> 00:15:33,410
to us and then we use that to perch and

00:15:30,100 --> 00:15:34,639
when we perch without perching on and I

00:15:33,410 --> 00:15:37,760
mentioned that the augmented States

00:15:34,639 --> 00:15:39,110
takes features and registration pulses

00:15:37,760 --> 00:15:40,579
from those to be pipelines and then

00:15:39,110 --> 00:15:43,399
fuses them cleanly with the inertial

00:15:40,579 --> 00:15:44,959
data to give us a state estimate so

00:15:43,399 --> 00:15:46,699
general navigation I'm going to go quite

00:15:44,959 --> 00:15:49,130
quickly through these again their paper

00:15:46,699 --> 00:15:50,930
references if anybody's interested but

00:15:49,130 --> 00:15:53,269
the idea is that we have an off we're

00:15:50,930 --> 00:15:55,730
not doing slam yet on our robot just

00:15:53,269 --> 00:15:58,399
again we're going with the option that

00:15:55,730 --> 00:15:59,990
we can test extensively and then we'll

00:15:58,399 --> 00:16:02,990
incrementally build up complexity as

00:15:59,990 --> 00:16:05,060
time goes by general navigation we use

00:16:02,990 --> 00:16:07,100
we have an offline and online stage so

00:16:05,060 --> 00:16:10,670
the crux of the offline stage is we

00:16:07,100 --> 00:16:13,040
gather a lot of camera images and then

00:16:10,670 --> 00:16:14,480
we build a sparse feature map from that

00:16:13,040 --> 00:16:17,120
so we do bundle adjustment to

00:16:14,480 --> 00:16:20,060
essentially work out an XYZ coordinates

00:16:17,120 --> 00:16:22,220
in a local frame for every feature and

00:16:20,060 --> 00:16:24,199
then online we do brisk feature

00:16:22,220 --> 00:16:26,570
detection using our wide-angle

00:16:24,199 --> 00:16:29,540
navigation camera and then we find the

00:16:26,570 --> 00:16:32,570
corresponding feature in the sparse map

00:16:29,540 --> 00:16:35,029
and then we essentially have a

00:16:32,570 --> 00:16:36,980
relationship of image coordinates and

00:16:35,029 --> 00:16:38,839
world coordinates and world in this case

00:16:36,980 --> 00:16:43,970
is in our map which we then feed as

00:16:38,839 --> 00:16:46,220
features to our state estimator docking

00:16:43,970 --> 00:16:50,860
is something that's quite exciting we've

00:16:46,220 --> 00:16:53,990
we've so stepping back the last

00:16:50,860 --> 00:16:56,089
localization system gives us we're

00:16:53,990 --> 00:16:58,639
expecting in the order of a few

00:16:56,089 --> 00:16:59,930
centimeters error in worst case it

00:16:58,639 --> 00:17:02,240
depends how good the map is of course

00:16:59,930 --> 00:17:05,360
but when we dock and undock we actually

00:17:02,240 --> 00:17:07,579
have to mate with two berthing pins

00:17:05,360 --> 00:17:09,350
which are probably about a couple

00:17:07,579 --> 00:17:10,819
centimeters across so to get the

00:17:09,350 --> 00:17:13,220
alignment correct we want to get

00:17:10,819 --> 00:17:15,169
sub centimeter accuracy so what we did

00:17:13,220 --> 00:17:17,720
is we put a fiducial marker between our

00:17:15,169 --> 00:17:21,470
two birthing points on the dock and then

00:17:17,720 --> 00:17:24,139
as the as Fergie wishes to dock it

00:17:21,470 --> 00:17:29,120
switches to its docking camera and then

00:17:24,139 --> 00:17:31,850
uses the Alva library to give the pose

00:17:29,120 --> 00:17:33,889
estimates of the markers in the camera

00:17:31,850 --> 00:17:35,389
frame and then we can perform relative

00:17:33,889 --> 00:17:37,669
localization to ensure that we have a

00:17:35,389 --> 00:17:40,700
repeatable accurate dock every docking

00:17:37,669 --> 00:17:41,720
every single time perching is a little

00:17:40,700 --> 00:17:45,320
bit more complicated because we're

00:17:41,720 --> 00:17:47,870
processing depth camera images the crux

00:17:45,320 --> 00:17:51,110
of the algorithm is that we use the

00:17:47,870 --> 00:17:53,509
depth camera to do a wall estimation by

00:17:51,110 --> 00:17:55,759
trying to fit a plane with ransac we

00:17:53,509 --> 00:17:58,549
then also do use ransacked assembly find

00:17:55,759 --> 00:17:59,539
a line describing the handrail and the

00:17:58,549 --> 00:18:03,289
important thing is we don't necessarily

00:17:59,539 --> 00:18:05,120
have a colored points we only use the

00:18:03,289 --> 00:18:08,049
depth camera we haven't gone to the

00:18:05,120 --> 00:18:10,580
extent in extrinsic calibration with the

00:18:08,049 --> 00:18:14,659
RGB camera to get a lot to get alignment

00:18:10,580 --> 00:18:17,299
of the two frames within to take the end

00:18:14,659 --> 00:18:19,009
caps of the handrail and we do pose

00:18:17,299 --> 00:18:20,570
estimation of the handrail in our in our

00:18:19,009 --> 00:18:22,580
depth camera frame and then once again

00:18:20,570 --> 00:18:24,679
those are features that then get sent to

00:18:22,580 --> 00:18:27,769
the estimator and it uses that

00:18:24,679 --> 00:18:31,399
information to localize relative to the

00:18:27,769 --> 00:18:35,419
handrail and provide a precise inbound

00:18:31,399 --> 00:18:37,429
perching procedure so I know they're

00:18:35,419 --> 00:18:40,309
probably a few people were planning here

00:18:37,429 --> 00:18:43,639
so we have two planners in our system

00:18:40,309 --> 00:18:44,960
the baseline trapezoidal planner and I

00:18:43,639 --> 00:18:47,149
haven't got an image of that but it

00:18:44,960 --> 00:18:51,409
really just constructs velocity

00:18:47,149 --> 00:18:54,230
trapezoids in axis angle representation

00:18:51,409 --> 00:18:57,590
for attitude and then it's much easier

00:18:54,230 --> 00:18:58,490
to do it in foot translation then the

00:18:57,590 --> 00:19:01,279
neat thing about this is it's a very

00:18:58,490 --> 00:19:03,559
simple it allows you to quite cleanly

00:19:01,279 --> 00:19:05,659
specify our hard limits on acceleration

00:19:03,559 --> 00:19:07,129
and velocity and it's kind of useful for

00:19:05,659 --> 00:19:10,399
docking and perching when you want like

00:19:07,129 --> 00:19:13,940
a really clean exact trajectory to

00:19:10,399 --> 00:19:15,710
follow we also have the quadratic

00:19:13,940 --> 00:19:18,950
program planner which was written by

00:19:15,710 --> 00:19:21,410
Michael Addison he works at UPenn

00:19:18,950 --> 00:19:24,350
with the fantastic quadrotor team Vijay

00:19:21,410 --> 00:19:26,120
Kumar and this is the planner that they

00:19:24,350 --> 00:19:27,890
effectively used to generate curved

00:19:26,120 --> 00:19:30,350
trajectories for their quad rotors in

00:19:27,890 --> 00:19:32,630
real time and what it does is it it

00:19:30,350 --> 00:19:34,190
finds a a trajectory around to get from

00:19:32,630 --> 00:19:35,960
a starting point to an end point are

00:19:34,190 --> 00:19:38,330
respecting any keeping and keep out

00:19:35,960 --> 00:19:39,910
zones and minimizing overall jerk in the

00:19:38,330 --> 00:19:42,500
system so it's a it's a pretty neat

00:19:39,910 --> 00:19:44,330
piece of code it's just a reasonably

00:19:42,500 --> 00:19:47,600
more complex and kind of will be used

00:19:44,330 --> 00:19:51,110
for less critical operations where we're

00:19:47,600 --> 00:19:53,630
trying to fly across between modules and

00:19:51,110 --> 00:19:55,610
of course the other kind of park plan is

00:19:53,630 --> 00:19:56,360
currently being written by interns and

00:19:55,610 --> 00:20:04,130
an historic

00:19:56,360 --> 00:20:05,960
TRF fellows at NASA so we've got a

00:20:04,130 --> 00:20:07,790
couple safety mechanisms in our planning

00:20:05,960 --> 00:20:10,610
I'm not gonna go into detail here but

00:20:07,790 --> 00:20:11,930
essentially we have key pins and keep

00:20:10,610 --> 00:20:15,590
out zones which are like prior Maps

00:20:11,930 --> 00:20:19,160
simple sort of cubic areas that we stay

00:20:15,590 --> 00:20:21,280
out of or are forced to stay in we also

00:20:19,160 --> 00:20:23,780
build that map with the mapper as I

00:20:21,280 --> 00:20:26,270
mentioned which uses octa map as a core

00:20:23,780 --> 00:20:29,390
and then that gives us optical detection

00:20:26,270 --> 00:20:32,140
and then we also when we plan we put

00:20:29,390 --> 00:20:34,520
hard limits on acceleration and twist

00:20:32,140 --> 00:20:36,380
and the acceleration is fundamentally

00:20:34,520 --> 00:20:38,600
limited by how much power we can put out

00:20:36,380 --> 00:20:40,730
in our propulsion system and the twist

00:20:38,600 --> 00:20:44,600
is limited by what we consider to be

00:20:40,730 --> 00:20:47,150
safe operating limits the context we're

00:20:44,600 --> 00:20:48,380
working in so why don't I think let's

00:20:47,150 --> 00:20:49,940
we'll take a break break from the

00:20:48,380 --> 00:20:53,000
architecture and talk more about the

00:20:49,940 --> 00:20:54,440
hardware test environments now so you

00:20:53,000 --> 00:20:56,150
might be asking yourself okay so those

00:20:54,440 --> 00:20:58,280
robots being designed for microgravity

00:20:56,150 --> 00:21:00,530
how do we test it actually on earth and

00:20:58,280 --> 00:21:02,060
it turns out it's pretty complicated we

00:21:00,530 --> 00:21:04,190
can't actually do all six degrees of

00:21:02,060 --> 00:21:07,040
freedom so what we do is we have three

00:21:04,190 --> 00:21:12,740
different experimental setups which we

00:21:07,040 --> 00:21:14,150
used to test different problems so the

00:21:12,740 --> 00:21:16,820
simplest is a flat sack which just helps

00:21:14,150 --> 00:21:18,230
us test hardware and avionics what we

00:21:16,820 --> 00:21:19,670
spend most of our time testing and right

00:21:18,230 --> 00:21:20,990
now is the ground at the bar tree and

00:21:19,670 --> 00:21:22,670
some of you might have that a few part

00:21:20,990 --> 00:21:26,050
of a research group that does space

00:21:22,670 --> 00:21:28,360
robotics but it's a really really flat

00:21:26,050 --> 00:21:31,059
granite table mountable

00:21:28,360 --> 00:21:34,600
to gravity and essentially you have air

00:21:31,059 --> 00:21:36,130
pucks that blow out co2 and then you

00:21:34,600 --> 00:21:38,110
float on a pocket of air so you have

00:21:36,130 --> 00:21:40,120
three degrees of freedom to translation

00:21:38,110 --> 00:21:41,770
on one rotation we're also in the

00:21:40,120 --> 00:21:44,679
process of building a microgravity test

00:21:41,770 --> 00:21:46,000
facility which is like a long room which

00:21:44,679 --> 00:21:48,760
has a gantry which is sort of like a

00:21:46,000 --> 00:21:50,830
room sized 3d printer with a gimbal at

00:21:48,760 --> 00:21:54,299
the end and then that can allow us to

00:21:50,830 --> 00:21:54,299
move and sit with six degrees of freedom

00:21:54,520 --> 00:21:58,420
a big a big test environment though and

00:21:56,590 --> 00:22:02,440
something we insist all of our project

00:21:58,420 --> 00:22:04,690
partners do before they get into working

00:22:02,440 --> 00:22:06,730
with us is testing on in simulation and

00:22:04,690 --> 00:22:08,110
the takeaway point with simulation is

00:22:06,730 --> 00:22:09,400
that we've tried to design our system

00:22:08,110 --> 00:22:10,750
such that we can divide our nodes into

00:22:09,400 --> 00:22:12,400
hardware drivers and flight software

00:22:10,750 --> 00:22:14,440
drivers and transitioning from

00:22:12,400 --> 00:22:15,790
experiments to simulation is just as

00:22:14,440 --> 00:22:17,770
simple as switching out the hardware

00:22:15,790 --> 00:22:21,280
drivers and the only exception to this

00:22:17,770 --> 00:22:23,230
is that we don't actually simulate any

00:22:21,280 --> 00:22:25,240
feature detectors on synthetic images

00:22:23,230 --> 00:22:27,669
because we feel that's a bit high in

00:22:25,240 --> 00:22:29,910
complexity and also probably doesn't add

00:22:27,669 --> 00:22:29,910
much value

00:22:30,940 --> 00:22:34,660
let's hear some snapshots of the

00:22:32,980 --> 00:22:36,400
simulator in action you can see we've

00:22:34,660 --> 00:22:38,679
got the ava's the perception we've got

00:22:36,400 --> 00:22:40,059
the simulation the gazebo GUI and then

00:22:38,679 --> 00:22:42,910
we've got the real context which is what

00:22:40,059 --> 00:22:45,010
we test in and I'm hoping this ends up

00:22:42,910 --> 00:22:46,870
we have a similar analog in 2019 but

00:22:45,010 --> 00:22:49,450
we've got the perception of the ISS we

00:22:46,870 --> 00:22:51,700
have a wonderful full ISS model which

00:22:49,450 --> 00:22:53,679
you can use to find paths in and do all

00:22:51,700 --> 00:22:56,770
your experiments and then the gazebo

00:22:53,679 --> 00:22:59,770
version and then again reality let's

00:22:56,770 --> 00:23:02,470
check back in 2019 another important

00:22:59,770 --> 00:23:03,790
thing fast is ground truthing we need to

00:23:02,470 --> 00:23:06,160
know how accurate our system is

00:23:03,790 --> 00:23:08,230
especially with our localization so we

00:23:06,160 --> 00:23:10,090
use the vive tracking system and if

00:23:08,230 --> 00:23:12,400
anybody's interested in like a really

00:23:10,090 --> 00:23:15,190
deep dive and how vibe works and how we

00:23:12,400 --> 00:23:17,350
wrote replacement fusion algorithms for

00:23:15,190 --> 00:23:19,179
their raw data for our college to get

00:23:17,350 --> 00:23:21,940
repeatability and accuracy I suggest you

00:23:19,179 --> 00:23:23,830
go to miguel boards i Ross 2018

00:23:21,940 --> 00:23:27,100
presentation I mean I mentored him when

00:23:23,830 --> 00:23:28,600
he did an internship at NASA the initial

00:23:27,100 --> 00:23:30,400
result we're getting from the system as

00:23:28,600 --> 00:23:32,650
you can see the red and green are the

00:23:30,400 --> 00:23:34,809
alignment between our EKF and the vive

00:23:32,650 --> 00:23:36,669
system and that's for I plan our tests

00:23:34,809 --> 00:23:37,420
on the granite table and you can see the

00:23:36,669 --> 00:23:39,010
histogram

00:23:37,420 --> 00:23:44,320
errors we're looking at the mean of

00:23:39,010 --> 00:23:45,700
about 18 millimeters how EKF so we've

00:23:44,320 --> 00:23:48,160
used three on our system we've used

00:23:45,700 --> 00:23:51,970
predominantly kinetic we transitioned

00:23:48,160 --> 00:23:53,710
from indigo a while ago we'd love of

00:23:51,970 --> 00:23:55,420
course to reap all the benefits of Ross

00:23:53,710 --> 00:23:57,010
too but unfortunately we have limited

00:23:55,420 --> 00:23:59,830
resources so that might have to unfold

00:23:57,010 --> 00:24:02,800
over a couple years and maybe a sort of

00:23:59,830 --> 00:24:05,170
a retrospective upgrade we also have

00:24:02,800 --> 00:24:07,300
other projects at NASA which use Ross

00:24:05,170 --> 00:24:09,850
and their tensegrities and krx

00:24:07,300 --> 00:24:11,320
and also geo cam space and so if you

00:24:09,850 --> 00:24:12,580
look up those projects that's

00:24:11,320 --> 00:24:14,710
specifically in the intelligent robotics

00:24:12,580 --> 00:24:18,520
group at NASA and that's the one I work

00:24:14,710 --> 00:24:19,870
in so now we're gonna dive a little bit

00:24:18,520 --> 00:24:23,560
deeper and I'll explain a couple

00:24:19,870 --> 00:24:25,210
components that we added to our stack

00:24:23,560 --> 00:24:28,510
which kind of augmented existing

00:24:25,210 --> 00:24:30,010
functionality at Ross so first of which

00:24:28,510 --> 00:24:31,840
is timeouts and actions so we love

00:24:30,010 --> 00:24:33,850
actions because all of our modes in the

00:24:31,840 --> 00:24:36,310
system actually mode let's and so if you

00:24:33,850 --> 00:24:38,140
block any surface response the rest of

00:24:36,310 --> 00:24:41,320
the node let's in your system in a

00:24:38,140 --> 00:24:45,130
single threaded context they all lockout

00:24:41,320 --> 00:24:47,140
so we we use them extensively across our

00:24:45,130 --> 00:24:48,730
system but we found that we needed a

00:24:47,140 --> 00:24:50,170
little bit more control over what

00:24:48,730 --> 00:24:53,170
happens when they're timeout so if you

00:24:50,170 --> 00:24:55,690
don't get a response on on a goal or you

00:24:53,170 --> 00:24:57,640
don't get feedback off so we added a

00:24:55,690 --> 00:24:59,950
whole a number of different timeouts

00:24:57,640 --> 00:25:02,350
which you can sit so we've got free

00:24:59,950 --> 00:25:05,650
flyer action class which provides that

00:25:02,350 --> 00:25:07,060
augmentation for us we also we initially

00:25:05,650 --> 00:25:08,650
started using Yammer but we found them a

00:25:07,060 --> 00:25:10,930
bit restrictive for parameters so we

00:25:08,650 --> 00:25:14,530
switched to lure that allows us to have

00:25:10,930 --> 00:25:15,760
a lot more complex data types and also

00:25:14,530 --> 00:25:17,380
do some light scripting and our

00:25:15,760 --> 00:25:19,300
configuration files and Link variables

00:25:17,380 --> 00:25:21,040
together and make them dependent on

00:25:19,300 --> 00:25:23,170
environment variables which we found to

00:25:21,040 --> 00:25:24,970
be incredibly powerful we also have a

00:25:23,170 --> 00:25:28,390
config server and Conflict client which

00:25:24,970 --> 00:25:31,840
actually uses the existing dynamic

00:25:28,390 --> 00:25:34,360
reconfigure messages to allow us to

00:25:31,840 --> 00:25:36,220
dynamically change a nodes parameters of

00:25:34,360 --> 00:25:40,030
runtime but through the whole new

00:25:36,220 --> 00:25:42,430
infrastructure we also had to augment

00:25:40,030 --> 00:25:44,200
our nodes with some lifecycle it's like

00:25:42,430 --> 00:25:47,440
life cycle and fault management support

00:25:44,200 --> 00:25:49,149
so diagnostic messages is great and you

00:25:47,440 --> 00:25:52,539
know we do use them

00:25:49,149 --> 00:25:54,159
but we needed a few extra things faults

00:25:52,539 --> 00:25:57,580
are really important to manage in a NASA

00:25:54,159 --> 00:26:01,720
project so we had to essentially create

00:25:57,580 --> 00:26:03,429
a again a child class of free of node

00:26:01,720 --> 00:26:05,499
alerts called free fly node which adds

00:26:03,429 --> 00:26:07,179
assert fault and and other common

00:26:05,499 --> 00:26:10,509
functions which we would find useful in

00:26:07,179 --> 00:26:11,859
sort of a space robotics context and and

00:26:10,509 --> 00:26:13,960
there was a bit of a challenge that

00:26:11,859 --> 00:26:16,749
happened with free flying node litters

00:26:13,960 --> 00:26:20,470
in a gazebo contexts you have to work

00:26:16,749 --> 00:26:22,659
out with where the processes actually

00:26:20,470 --> 00:26:23,769
run so we kind of bypass it with the

00:26:22,659 --> 00:26:26,049
setup function I'm not gonna go into

00:26:23,769 --> 00:26:27,700
details for the sake of time

00:26:26,049 --> 00:26:30,159
another big bane for us was cross

00:26:27,700 --> 00:26:32,259
compilation with arm we did this back in

00:26:30,159 --> 00:26:35,019
2015 so it was a real nightmare because

00:26:32,259 --> 00:26:36,399
catkin at that point was and i'm not

00:26:35,019 --> 00:26:38,249
sure if it's all does this somebody in

00:26:36,399 --> 00:26:41,559
khaki should talk to me about this but

00:26:38,249 --> 00:26:45,820
essentially writes fully-qualified parts

00:26:41,559 --> 00:26:49,149
to your library's so we had to do a sort

00:26:45,820 --> 00:26:50,679
of a post catkin hook that helped

00:26:49,149 --> 00:26:52,899
rewrite all of those to our root file

00:26:50,679 --> 00:26:54,729
systems and i've made this a lot cleaner

00:26:52,899 --> 00:26:57,099
with catkin tools and catkins simple but

00:26:54,729 --> 00:26:59,049
the the general idea is that this

00:26:57,099 --> 00:27:00,519
snippet of code is what saved us a lot

00:26:59,049 --> 00:27:01,779
of nightmares and it's an hour flight

00:27:00,519 --> 00:27:03,789
software so everybody's having a same

00:27:01,779 --> 00:27:09,429
issue I hope they're not any longer

00:27:03,789 --> 00:27:11,169
can reference this very useful um so for

00:27:09,429 --> 00:27:13,029
the sake of time I'm going to skip this

00:27:11,169 --> 00:27:16,479
one and I'm gonna look more at the Ross

00:27:13,029 --> 00:27:17,859
launch system so we have a very complex

00:27:16,479 --> 00:27:19,119
large system and we need to have a

00:27:17,859 --> 00:27:20,979
complex though more system because I've

00:27:19,119 --> 00:27:23,139
got multiple processors launched from a

00:27:20,979 --> 00:27:25,059
single location and often we want to

00:27:23,139 --> 00:27:26,830
remotely launch components of our system

00:27:25,059 --> 00:27:28,179
like we want to remotely launch our

00:27:26,830 --> 00:27:30,399
simulator somewhere or we want to

00:27:28,179 --> 00:27:32,109
remotely launch the LLP to diagnose it

00:27:30,399 --> 00:27:33,609
as a processor in the loop problem so

00:27:32,109 --> 00:27:35,349
like say we're running the simulation

00:27:33,609 --> 00:27:37,299
locally but we want to run just the high

00:27:35,349 --> 00:27:39,399
level processor on the actual arm

00:27:37,299 --> 00:27:41,470
platform to diagnose some sort of

00:27:39,399 --> 00:27:42,940
performance problem we had to structure

00:27:41,470 --> 00:27:45,879
our launch files in a way that enabled

00:27:42,940 --> 00:27:48,399
that so anybody who's who's faced some

00:27:45,879 --> 00:27:49,570
other problem perhaps you can draw some

00:27:48,399 --> 00:27:51,849
inspiration from the way we've

00:27:49,570 --> 00:27:53,049
structured our launch files and I'm

00:27:51,849 --> 00:27:55,500
hoping that they might be useful to

00:27:53,049 --> 00:27:57,210
others and the last thing

00:27:55,500 --> 00:27:58,919
I'm gonna cover is transform consistency

00:27:57,210 --> 00:28:00,659
we have a Miss we don't wanna have a

00:27:58,919 --> 00:28:03,150
mismatch between the simulation and

00:28:00,659 --> 00:28:05,789
perception and so it's very important

00:28:03,150 --> 00:28:07,710
for there to be consistent intrinsic

00:28:05,789 --> 00:28:11,549
between the two and the problem is is

00:28:07,710 --> 00:28:13,679
that gazebo expects them in an SDF

00:28:11,549 --> 00:28:15,419
whereas we would normally express them

00:28:13,679 --> 00:28:17,159
as tf2 static transforms in flight

00:28:15,419 --> 00:28:18,809
software so we had to find a way of

00:28:17,159 --> 00:28:22,049
syncing them and I don't think I found a

00:28:18,809 --> 00:28:23,809
perfect way but I would love to discuss

00:28:22,049 --> 00:28:26,220
anybody who's had that a similar issue

00:28:23,809 --> 00:28:29,460
we're having to deal with simulation

00:28:26,220 --> 00:28:31,320
please please come talk to me and in the

00:28:29,460 --> 00:28:33,090
last two slides I have this just covers

00:28:31,320 --> 00:28:34,710
guest science that's the formal

00:28:33,090 --> 00:28:36,240
mechanism with which you interact with

00:28:34,710 --> 00:28:37,559
Astra B as a project if you want to

00:28:36,240 --> 00:28:39,809
develop a payload and I encourage

00:28:37,559 --> 00:28:41,460
anybody who has a neat idea for hardware

00:28:39,809 --> 00:28:43,799
in space or software in space to have a

00:28:41,460 --> 00:28:46,679
look at the guest science URL in the

00:28:43,799 --> 00:28:48,480
slide and then the other thing I ought

00:28:46,679 --> 00:28:52,080
to mention is zero robotics this is a

00:28:48,480 --> 00:28:54,600
really neat project at NASA and MIT and

00:28:52,080 --> 00:28:58,830
it is essentially a competition that has

00:28:54,600 --> 00:29:00,809
kids code control algorithms for

00:28:58,830 --> 00:29:04,980
speeders robots and then have it execute

00:29:00,809 --> 00:29:06,720
on orbit so the first test against each

00:29:04,980 --> 00:29:08,100
other and simulation and ultimately it's

00:29:06,720 --> 00:29:09,690
uploaded to the space station their code

00:29:08,100 --> 00:29:11,280
runs on a real robot on the space

00:29:09,690 --> 00:29:13,049
station so it's very exciting for these

00:29:11,280 --> 00:29:15,780
kids and it's a really great way to

00:29:13,049 --> 00:29:18,809
teach programming and we're in we're in

00:29:15,780 --> 00:29:20,970
process of transitioning from Spears to

00:29:18,809 --> 00:29:23,700
Astra be it's going to be a reasonably

00:29:20,970 --> 00:29:25,530
challenging process but hopefully there

00:29:23,700 --> 00:29:29,510
will be more exciting as Astra B opens

00:29:25,530 --> 00:29:32,220
up a whole new set of capabilities now

00:29:29,510 --> 00:29:34,740
code is open source I'm out of time so

00:29:32,220 --> 00:29:37,500
again I encourage you to check out the

00:29:34,740 --> 00:29:39,750
simulator I have I was given a limited

00:29:37,500 --> 00:29:40,950
set of mission patches anybody knows

00:29:39,750 --> 00:29:42,960
what a mission patch that's what gets

00:29:40,950 --> 00:29:44,909
thrown onto jumpsuits so I don't have

00:29:42,960 --> 00:29:46,470
enough for everyone here so maybe I'll

00:29:44,909 --> 00:29:47,789
create an incentive if you if you show

00:29:46,470 --> 00:29:51,929
me a running simulator you can get a

00:29:47,789 --> 00:29:53,100
nice ass patch if I have never at the

00:29:51,929 --> 00:29:56,460
end of the day I'll probably start

00:29:53,100 --> 00:29:57,539
throwing them out I have a video I don't

00:29:56,460 --> 00:30:00,360
have for the sake of time if you want to

00:29:57,539 --> 00:30:02,419
move on it's pretty short what's the

00:30:00,360 --> 00:30:04,950
goal

00:30:02,419 --> 00:30:05,909
absolutely yeah in fact it's only got

00:30:04,950 --> 00:30:07,619
music at the back shop

00:30:05,909 --> 00:30:36,960
and so I was muting the music and then

00:30:07,619 --> 00:30:39,389
making okay I think the question is how

00:30:36,960 --> 00:30:42,749
did we deal with certification is Ross

00:30:39,389 --> 00:30:45,539
to be used on board this is more a

00:30:42,749 --> 00:30:46,950
question for management than me but my

00:30:45,539 --> 00:30:49,169
understanding and this is my personal

00:30:46,950 --> 00:30:51,210
understanding is that we are not our

00:30:49,169 --> 00:30:53,669
Aflac software is not marked as safety

00:30:51,210 --> 00:30:55,049
critical we create we're safety we're

00:30:53,669 --> 00:30:58,139
sorry we marked safe at the hardware

00:30:55,049 --> 00:30:59,729
level and that way we're allowed to run

00:30:58,139 --> 00:31:01,739
Ross and it's also going to be crew

00:30:59,729 --> 00:31:05,070
tended in the first instance so there'll

00:31:01,739 --> 00:31:06,419
be astronauts on board working with you

00:31:05,070 --> 00:31:11,359
they ask for bees making sure that

00:31:06,419 --> 00:31:11,359
everything's safe yes

00:31:16,250 --> 00:31:20,870
I got the question from the live

00:31:18,409 --> 00:31:25,519
streaming and two people ask the same

00:31:20,870 --> 00:31:32,179
question why you choose Rua Rosen pison

00:31:25,519 --> 00:31:34,490
for your configuration virus well I

00:31:32,179 --> 00:31:36,889
could deflect and say I wasn't at the

00:31:34,490 --> 00:31:39,379
project at that time so I can't tell you

00:31:36,889 --> 00:31:41,419
there was probably a good reason I think

00:31:39,379 --> 00:31:43,100
there was some legacy code that we

00:31:41,419 --> 00:31:46,039
reused from a previous project which

00:31:43,100 --> 00:31:47,840
helped expedite our progress but that is

00:31:46,039 --> 00:31:49,429
a good question and maybe it's something

00:31:47,840 --> 00:31:51,559
we should want to revisit if you know

00:31:49,429 --> 00:31:55,480
for the next robots that we develop in

00:31:51,559 --> 00:31:55,480

YouTube URL: https://www.youtube.com/watch?v=JkerrWlaEqI


