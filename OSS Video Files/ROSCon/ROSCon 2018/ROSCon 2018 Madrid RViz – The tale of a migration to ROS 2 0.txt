Title: ROSCon 2018 Madrid RViz â€“ The tale of a migration to ROS 2 0
Publication date: 2021-03-28
Playlist: ROSCon 2018
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2018 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,030 --> 00:00:03,510
hello everybody my name is andreas

00:00:01,860 --> 00:00:05,940
partner from kimchi technology

00:00:03,510 --> 00:00:08,340
consulting and I'm going to talk about

00:00:05,940 --> 00:00:10,590
the journey of the last year where we

00:00:08,340 --> 00:00:11,960
participated in migrating office from

00:00:10,590 --> 00:00:14,910
verse 1 to verse 2

00:00:11,960 --> 00:00:17,130
so just to make sure that we are all

00:00:14,910 --> 00:00:19,500
talking about the same thing there's a

00:00:17,130 --> 00:00:22,230
picture of office I think you're quite

00:00:19,500 --> 00:00:24,930
familiar with it the center the middle

00:00:22,230 --> 00:00:28,260
part is the Vidya everywhere the scenery

00:00:24,930 --> 00:00:32,070
is shown and there was - a date is being

00:00:28,260 --> 00:00:35,850
visualized on and you have some UI

00:00:32,070 --> 00:00:37,890
widgets left and right and one big part

00:00:35,850 --> 00:00:39,629
of the obvious functionality are the so

00:00:37,890 --> 00:00:42,960
called this place which are pieces of

00:00:39,629 --> 00:00:45,059
code that subscribe to us to date and

00:00:42,960 --> 00:00:47,190
initialize it so for example for point

00:00:45,059 --> 00:00:49,260
cloud you have a point of display which

00:00:47,190 --> 00:00:51,840
starts the job of displaying point loads

00:00:49,260 --> 00:00:57,960
in a proper fashion and this can be

00:00:51,840 --> 00:01:00,510
configured and one of the main goal was

00:00:57,960 --> 00:01:02,070
to just take always as it was and my

00:01:00,510 --> 00:01:05,339
greatest to us - so that they can be

00:01:02,070 --> 00:01:07,170
used natively because before we get more

00:01:05,339 --> 00:01:09,860
into the technical technically part I

00:01:07,170 --> 00:01:15,240
want shortly talk about the people

00:01:09,860 --> 00:01:17,790
involved one inside there were four

00:01:15,240 --> 00:01:21,060
people from Tian Jia my colleagues and

00:01:17,790 --> 00:01:23,100
myself we have er ideas of the

00:01:21,060 --> 00:01:27,180
consulting company and we had no prior

00:01:23,100 --> 00:01:29,490
knowledge or experience with Ross and we

00:01:27,180 --> 00:01:32,040
were hired from Bosch to help with my

00:01:29,490 --> 00:01:35,250
creation of office

00:01:32,040 --> 00:01:40,170
Bosch from its sides is using arrows -

00:01:35,250 --> 00:01:42,420
for several development approaches and

00:01:40,170 --> 00:01:44,100
they found it lacking in some points and

00:01:42,420 --> 00:01:44,399
said okay let's have after it's open

00:01:44,100 --> 00:01:46,020
source

00:01:44,399 --> 00:01:49,049
that's contribute with migrating girls

00:01:46,020 --> 00:01:51,149
to one other use case for them is to use

00:01:49,049 --> 00:01:53,220
there was two tooling on top of the own

00:01:51,149 --> 00:01:55,560
middleware because of the roast humility

00:01:53,220 --> 00:01:58,920
obstruction that's there this can easily

00:01:55,560 --> 00:02:01,770
be done with on and on the other hand we

00:01:58,920 --> 00:02:04,530
had the obscene maintained via Moodle

00:02:01,770 --> 00:02:05,670
who will also be talking after me from

00:02:04,530 --> 00:02:07,500
Oakwood robotics

00:02:05,670 --> 00:02:12,060
the pleasure of chief Ewing and merging

00:02:07,500 --> 00:02:15,720
all of our pull requests and so let's

00:02:12,060 --> 00:02:17,480
just recap the donor we had of course we

00:02:15,720 --> 00:02:21,239
wanted to migrate from responder was to

00:02:17,480 --> 00:02:22,739
that's fairly obvious the other thing I

00:02:21,239 --> 00:02:25,170
think most of you people are all too

00:02:22,739 --> 00:02:27,569
familiar is that with her stool Purdy

00:02:25,170 --> 00:02:29,550
for it all major operating systems are

00:02:27,569 --> 00:02:32,640
supported line ups as in the past and

00:02:29,550 --> 00:02:34,440
also Mac OS and Windows and this was hot

00:02:32,640 --> 00:02:37,019
apart and what the windows use case is

00:02:34,440 --> 00:02:39,959
also big point reports so this was also

00:02:37,019 --> 00:02:42,540
important to I take that the operating

00:02:39,959 --> 00:02:45,930
system issue I won't talk too much about

00:02:42,540 --> 00:02:48,989
this because the libraries we use cute

00:02:45,930 --> 00:02:51,120
for the UI widgets and ogre for the 3d

00:02:48,989 --> 00:02:53,040
stuff they are already a platform

00:02:51,120 --> 00:02:56,640
independent and work on all the

00:02:53,040 --> 00:02:59,549
supported platforms and that I still a

00:02:56,640 --> 00:03:01,019
lot of work to be done but that's not

00:02:59,549 --> 00:03:03,870
very interesting from a row specific

00:03:01,019 --> 00:03:05,580
point of view so I can't talk about this

00:03:03,870 --> 00:03:07,709
there are some other things I can't

00:03:05,580 --> 00:03:09,540
touch because I have only 20 minutes so

00:03:07,709 --> 00:03:14,370
if you interested feel free to come up

00:03:09,540 --> 00:03:18,690
with us played around so but it is not

00:03:14,370 --> 00:03:24,060
we entered into the office endeavor last

00:03:18,690 --> 00:03:25,890
year summer and we what he when we

00:03:24,060 --> 00:03:29,329
looked at it what was already done

00:03:25,890 --> 00:03:32,010
William was already into the progress of

00:03:29,329 --> 00:03:34,880
starting the migration the initial

00:03:32,010 --> 00:03:37,859
design discussions were mostly done

00:03:34,880 --> 00:03:40,140
there was minimal skeleton application

00:03:37,859 --> 00:03:43,260
present or prepared by William where we

00:03:40,140 --> 00:03:47,850
did start on the old codebase was

00:03:43,260 --> 00:03:52,370
roughly 40k lines of C++ code it says

00:03:47,850 --> 00:03:55,260
roughly five to eight years old and

00:03:52,370 --> 00:03:57,420
there were a few tests but not very much

00:03:55,260 --> 00:03:59,609
from a software development point of

00:03:57,420 --> 00:04:00,870
view and also we had the issue of

00:03:59,609 --> 00:04:03,209
getting to know the codebase first I

00:04:00,870 --> 00:04:04,829
mean of course one can start office and

00:04:03,209 --> 00:04:06,959
then take a look at what office is doing

00:04:04,829 --> 00:04:09,600
but we had no deeper knowledge on what

00:04:06,959 --> 00:04:10,950
we expected for some if you look at some

00:04:09,600 --> 00:04:14,359
piece of code what it's supposed to do

00:04:10,950 --> 00:04:14,359
so we need to get

00:04:14,520 --> 00:04:21,930
- no obvious code and then we started

00:04:18,390 --> 00:04:24,330
with migration the steps we needed to do

00:04:21,930 --> 00:04:27,540
was first extent the initial skeleton -

00:04:24,330 --> 00:04:30,870
the full-blown application office is now

00:04:27,540 --> 00:04:36,960
again was for us to obtain maintain the

00:04:30,870 --> 00:04:38,730
platform supports and then we needed to

00:04:36,960 --> 00:04:41,250
migrate the core functionality we did

00:04:38,730 --> 00:04:44,040
this display by display once we had the

00:04:41,250 --> 00:04:47,550
basic stuff working so we trust we took

00:04:44,040 --> 00:04:50,390
every display we've made it compile in

00:04:47,550 --> 00:04:52,980
the rest to environment and and we

00:04:50,390 --> 00:04:56,820
integrated it into the rest to version

00:04:52,980 --> 00:04:58,770
of office there are also for every new

00:04:56,820 --> 00:05:00,600
code in my medical view road unit and

00:04:58,770 --> 00:05:04,620
integration tests to have them covered

00:05:00,600 --> 00:05:06,750
and we were thinking about and we did

00:05:04,620 --> 00:05:10,140
actually introduce some kind of into n

00:05:06,750 --> 00:05:13,310
tests and why did he do this when we

00:05:10,140 --> 00:05:16,230
looked at obvious one there were some

00:05:13,310 --> 00:05:18,330
tests present that consisted of some

00:05:16,230 --> 00:05:20,340
Python scripts typically that robot ups

00:05:18,330 --> 00:05:22,230
on environment maybe some publishes and

00:05:20,340 --> 00:05:24,660
then you were supposed to manually start

00:05:22,230 --> 00:05:26,250
always look at the screen and consider

00:05:24,660 --> 00:05:28,920
whether it's working all right or not

00:05:26,250 --> 00:05:31,170
and if you're familiar with the system

00:05:28,920 --> 00:05:33,480
you can do that but that's that's not

00:05:31,170 --> 00:05:35,670
automated and ideally you won't have to

00:05:33,480 --> 00:05:37,740
run these tests or to automate it just

00:05:35,670 --> 00:05:40,380
to can be sure that your code the code

00:05:37,740 --> 00:05:41,490
you wrote is actually working fine and

00:05:40,380 --> 00:05:43,680
on the other hand if you're new to

00:05:41,490 --> 00:05:45,060
office and all the details then it's

00:05:43,680 --> 00:05:47,720
really hard to charge whether the

00:05:45,060 --> 00:05:50,310
display or the application is working

00:05:47,720 --> 00:05:52,620
completely correctly that the basic

00:05:50,310 --> 00:05:54,570
things you can obviously see if it's

00:05:52,620 --> 00:05:56,490
questioned or not if you see something

00:05:54,570 --> 00:05:58,530
like a point load on the screen whether

00:05:56,490 --> 00:06:00,330
it is have all the right attributes and

00:05:58,530 --> 00:06:01,970
this stuff that's hard to a charge if

00:06:00,330 --> 00:06:05,190
you don't know what you are looking for

00:06:01,970 --> 00:06:08,820
so we also tried to improve the

00:06:05,190 --> 00:06:10,740
situation there and these are that this

00:06:08,820 --> 00:06:12,390
is the second thing I want to talk about

00:06:10,740 --> 00:06:13,590
then the first thing is what did

00:06:12,390 --> 00:06:15,630
actually changed from the point of

00:06:13,590 --> 00:06:20,460
office when we switched or us to from

00:06:15,630 --> 00:06:23,100
respond and if we trust look at what

00:06:20,460 --> 00:06:24,450
ours is doing LAN it's not that big of a

00:06:23,100 --> 00:06:26,780
deal actually because if you think about

00:06:24,450 --> 00:06:29,000
always always is just an application

00:06:26,780 --> 00:06:30,710
this place was to data so all obvious

00:06:29,000 --> 00:06:33,050
needs to do is to subscribe to some

00:06:30,710 --> 00:06:35,120
topic and then for every matched message

00:06:33,050 --> 00:06:37,040
office is receiving just display the

00:06:35,120 --> 00:06:38,420
data on the screen and all the

00:06:37,040 --> 00:06:41,150
displaying stuff that's then always

00:06:38,420 --> 00:06:43,640
internal so that's almost no rush to

00:06:41,150 --> 00:06:46,010
into action what's remaining is you need

00:06:43,640 --> 00:06:49,820
to somehow know of the coordinate frames

00:06:46,010 --> 00:06:53,540
so the whole interaction of armies with

00:06:49,820 --> 00:06:57,710
Ross is the nodal interface and a little

00:06:53,540 --> 00:06:59,690
bit EF and it's turned out that from a

00:06:57,710 --> 00:07:01,940
semantic point of view the differences

00:06:59,690 --> 00:07:04,760
are not that big there's some - and

00:07:01,940 --> 00:07:06,260
tactical changes which are is enough to

00:07:04,760 --> 00:07:10,419
deal with and also with the support of

00:07:06,260 --> 00:07:12,980
William that was easy to do for us and

00:07:10,419 --> 00:07:14,480
and you have some difference like the

00:07:12,980 --> 00:07:16,730
code the types have different name but

00:07:14,480 --> 00:07:18,710
that's also easy to adopt also there's

00:07:16,730 --> 00:07:20,600
there was - migration guideline from

00:07:18,710 --> 00:07:22,730
opera buttocks this is the first step

00:07:20,600 --> 00:07:26,930
you want to follow if you migrate some

00:07:22,730 --> 00:07:30,800
code and based on that was not that much

00:07:26,930 --> 00:07:33,020
to do to account for the specific

00:07:30,800 --> 00:07:35,060
differences from Ross run and was - I

00:07:33,020 --> 00:07:38,300
mean that's that's a fairly specific

00:07:35,060 --> 00:07:43,700
point for the office as we just have the

00:07:38,300 --> 00:07:45,830
simulated interface with Ross who have

00:07:43,700 --> 00:07:48,620
inside that I want to continue with the

00:07:45,830 --> 00:07:52,580
end-to-end tests and for that lets first

00:07:48,620 --> 00:07:55,840
recap the how always what is doing at

00:07:52,580 --> 00:07:59,750
its core and if you formulate it in

00:07:55,840 --> 00:08:02,360
typically tests sentence then let's say

00:07:59,750 --> 00:08:04,460
you take give them a point up message

00:08:02,360 --> 00:08:06,440
for example and then if I start always

00:08:04,460 --> 00:08:09,169
and if I activate the point of display

00:08:06,440 --> 00:08:10,940
ban I expect the pointer to be shown on

00:08:09,169 --> 00:08:14,240
the screen and according to the

00:08:10,940 --> 00:08:16,790
properties I switched on on the display

00:08:14,240 --> 00:08:20,240
properties so this is kind of one of the

00:08:16,790 --> 00:08:21,830
central obvious use cases and what we

00:08:20,240 --> 00:08:25,430
wanted to do is we wanted to probably

00:08:21,830 --> 00:08:29,450
provide a way to automatically test

00:08:25,430 --> 00:08:31,580
these features of Abhi's and of course

00:08:29,450 --> 00:08:33,950
this does not replace UNIDO integration

00:08:31,580 --> 00:08:37,430
tests and

00:08:33,950 --> 00:08:40,250
an integration test one can so far as to

00:08:37,430 --> 00:08:42,800
assert that if I have the proper test

00:08:40,250 --> 00:08:44,690
setup maybe pointless message if we run

00:08:42,800 --> 00:08:47,570
the display code then that the correct

00:08:44,690 --> 00:08:49,399
objects are getting inserted in the data

00:08:47,570 --> 00:08:51,529
structure that is time to represented by

00:08:49,399 --> 00:08:53,750
all go on the screen so this far I can

00:08:51,529 --> 00:08:56,839
go over with normal integration test and

00:08:53,750 --> 00:08:58,850
this I can use to make sure I cover all

00:08:56,839 --> 00:09:01,010
the use cases and all the properties of

00:08:58,850 --> 00:09:04,070
a display so I don't need to do a

00:09:01,010 --> 00:09:05,899
exhaustive testing and to end men about

00:09:04,070 --> 00:09:09,290
the need to do like some kind of smoke

00:09:05,899 --> 00:09:11,630
tests so that I can make sure that the

00:09:09,290 --> 00:09:13,580
Epley actual application is running and

00:09:11,630 --> 00:09:16,580
an important part of that is the 3d

00:09:13,580 --> 00:09:17,899
rendering if obviously works intially

00:09:16,580 --> 00:09:19,399
fine and the database rotation is

00:09:17,899 --> 00:09:21,470
correct but you see nothing on your 3d

00:09:19,399 --> 00:09:23,290
window then it's not working so an

00:09:21,470 --> 00:09:25,790
important point is that we need to

00:09:23,290 --> 00:09:29,089
include it we be rendering and these

00:09:25,790 --> 00:09:31,910
kind of tests and then with what about

00:09:29,089 --> 00:09:34,399
it and at the end the our conclusion was

00:09:31,910 --> 00:09:36,320
the only way to do this properly is to

00:09:34,399 --> 00:09:38,839
do your search with a screenshot of at

00:09:36,320 --> 00:09:40,459
least of this video because that's the

00:09:38,839 --> 00:09:42,110
only way that you actually can make sure

00:09:40,459 --> 00:09:45,560
that you see all the correct date and

00:09:42,110 --> 00:09:47,750
the screen and of course these tests run

00:09:45,560 --> 00:09:49,610
relatively slowly compared to unit and

00:09:47,750 --> 00:09:52,459
integration tests see also you don't

00:09:49,610 --> 00:09:54,290
want to do exhaustive tests and that

00:09:52,459 --> 00:09:55,910
manner but combined with the unit

00:09:54,290 --> 00:09:57,980
integration test you can have you can

00:09:55,910 --> 00:09:59,990
write some intense mock tests that

00:09:57,980 --> 00:10:03,170
guarantee you your office is working

00:09:59,990 --> 00:10:06,529
correctly and we build something like

00:10:03,170 --> 00:10:08,320
that and it took the name of the obvious

00:10:06,529 --> 00:10:11,779
visual testing framework which is a new

00:10:08,320 --> 00:10:14,240
package soft package of office which is

00:10:11,779 --> 00:10:15,980
providing this functionality don't be

00:10:14,240 --> 00:10:18,440
afraid this is going to be the only

00:10:15,980 --> 00:10:20,870
slide of code I'm showing I just want to

00:10:18,440 --> 00:10:23,089
work walk you through the tests because

00:10:20,870 --> 00:10:26,270
that's that's actually that's an actual

00:10:23,089 --> 00:10:27,920
example test so what we do and we have

00:10:26,270 --> 00:10:29,870
some special test fixture which does all

00:10:27,920 --> 00:10:31,760
the heavy lifting but then we just we

00:10:29,870 --> 00:10:35,660
start up a publisher and this example

00:10:31,760 --> 00:10:37,550
Pointer publisher which is also foliage

00:10:35,660 --> 00:10:41,390
is a very simple pointer with consisting

00:10:37,550 --> 00:10:45,199
of one single point then we set up the

00:10:41,390 --> 00:10:45,640
office window so we define the Tamarack

00:10:45,199 --> 00:10:47,560
respect

00:10:45,640 --> 00:10:51,460
and make sure that the scene is pointing

00:10:47,560 --> 00:10:54,340
at the point we are publishing means we

00:10:51,460 --> 00:10:56,410
create a point out display and we

00:10:54,340 --> 00:10:58,090
introduced the concept of page objects

00:10:56,410 --> 00:11:00,160
so these are few that are familiar

00:10:58,090 --> 00:11:01,660
familiar with web testing where you know

00:11:00,160 --> 00:11:03,130
the concept you just define an

00:11:01,660 --> 00:11:05,050
abstraction for your web page or in our

00:11:03,130 --> 00:11:06,820
case for the obvious application so that

00:11:05,050 --> 00:11:10,270
we have an easier way to interact with

00:11:06,820 --> 00:11:13,420
Arbus programmatically and the tests are

00:11:10,270 --> 00:11:15,280
easy to write and read so we say we set

00:11:13,420 --> 00:11:17,890
the topic of the point load is Flav is

00:11:15,280 --> 00:11:19,540
that the style size and so on and then

00:11:17,890 --> 00:11:21,340
the last line is the assert which

00:11:19,540 --> 00:11:23,980
basically says take a screen shot and

00:11:21,340 --> 00:11:26,950
compared and this is the example

00:11:23,980 --> 00:11:28,960
screenshot for the modest test I've

00:11:26,950 --> 00:11:32,890
shown you it's just one single peak

00:11:28,960 --> 00:11:36,010
point and then we do a picture by

00:11:32,890 --> 00:11:37,780
picture comparison and one wants these

00:11:36,010 --> 00:11:40,330
tests to be stable work on all platforms

00:11:37,780 --> 00:11:43,750
and so on different window managers and

00:11:40,330 --> 00:11:45,550
there are all kinds of difficulties when

00:11:43,750 --> 00:11:48,310
you run this on different systems and

00:11:45,550 --> 00:11:50,770
for that we want to have a high in

00:11:48,310 --> 00:11:52,750
signal to noise ratio and this we are

00:11:50,770 --> 00:11:55,660
getting by just focusing on a single

00:11:52,750 --> 00:11:59,020
aspect of the 3d scenery and scaling it

00:11:55,660 --> 00:12:01,420
up very high so if we have for example

00:11:59,020 --> 00:12:04,660
and it's may even be do to achieve

00:12:01,420 --> 00:12:08,020
different graphic cards and some a small

00:12:04,660 --> 00:12:10,380
differences law like this V is being

00:12:08,020 --> 00:12:12,460
rendered at the corner then the

00:12:10,380 --> 00:12:14,290
different the number of different pixels

00:12:12,460 --> 00:12:16,810
is very small compared to the whole

00:12:14,290 --> 00:12:20,710
number of pixels if the main features

00:12:16,810 --> 00:12:25,510
are big enough and that's the way to get

00:12:20,710 --> 00:12:27,760
this test table and before I talk any

00:12:25,510 --> 00:12:30,060
more let's see it in action so this is

00:12:27,760 --> 00:12:34,090
actually screencast of running the tests

00:12:30,060 --> 00:12:36,670
on a windows behind the terminal I just

00:12:34,090 --> 00:12:38,320
started a column build or contest and

00:12:36,670 --> 00:12:41,290
then in the visual test obviously

00:12:38,320 --> 00:12:44,170
started up the display is currently

00:12:41,290 --> 00:12:46,000
being configured then we see at the

00:12:44,170 --> 00:12:48,730
update in scenery whenever there is a

00:12:46,000 --> 00:12:51,160
slight pause this is just to give some

00:12:48,730 --> 00:12:53,170
time for this fin shot to happen and we

00:12:51,160 --> 00:12:56,130
don't want to run into instead we test

00:12:53,170 --> 00:12:58,170
you two timing issues and

00:12:56,130 --> 00:13:02,220
let me play around with the display a

00:12:58,170 --> 00:13:05,490
little bit more and we take new screen

00:13:02,220 --> 00:13:07,650
sort of the changed scenery and after

00:13:05,490 --> 00:13:10,350
this is done then obviously shut down

00:13:07,650 --> 00:13:14,390
and for the next test obviously start up

00:13:10,350 --> 00:13:18,330
again the corresponding display is added

00:13:14,390 --> 00:13:20,010
it's configured and then you can see

00:13:18,330 --> 00:13:21,660
enough for now it's a small line then we

00:13:20,010 --> 00:13:22,800
change the camera and the the properties

00:13:21,660 --> 00:13:28,050
of the display to make the feature

00:13:22,800 --> 00:13:31,770
really big in the 3d scenery and and

00:13:28,050 --> 00:13:33,600
finally when we have the picture set up

00:13:31,770 --> 00:13:38,400
the properties we take is being short

00:13:33,600 --> 00:13:40,740
and that's it and so what are the

00:13:38,400 --> 00:13:43,710
assertions we're using this is a

00:13:40,740 --> 00:13:46,170
screenshot of the objecting images in

00:13:43,710 --> 00:13:49,920
repository which are basically our test

00:13:46,170 --> 00:13:51,870
assertions so trust all images have in

00:13:49,920 --> 00:13:53,460
common that the actual feature is rather

00:13:51,870 --> 00:13:55,320
big compared to the whole image size and

00:13:53,460 --> 00:13:59,700
that's again just to make sure that has

00:13:55,320 --> 00:14:01,770
the stable and it turned out that these

00:13:59,700 --> 00:14:05,970
tests they were a really big help for

00:14:01,770 --> 00:14:11,330
ourselves we got them which most I think

00:14:05,970 --> 00:14:15,630
it was middle last early this year and

00:14:11,330 --> 00:14:17,550
compared we so we were with two releases

00:14:15,630 --> 00:14:19,980
to us two releases during our time when

00:14:17,550 --> 00:14:21,450
we have developing hobbies and it turned

00:14:19,980 --> 00:14:23,490
out for the second release we had much

00:14:21,450 --> 00:14:26,160
less work to do because of the visual

00:14:23,490 --> 00:14:28,050
has because we were absolutely sure that

00:14:26,160 --> 00:14:29,820
the things we migrated they are working

00:14:28,050 --> 00:14:31,710
correctly the combination of the

00:14:29,820 --> 00:14:33,270
intubation test and the visual test gave

00:14:31,710 --> 00:14:35,850
the security they're working on all

00:14:33,270 --> 00:14:38,970
platforms this tests are auto being run

00:14:35,850 --> 00:14:41,220
on the open robotics Jenkins for us to

00:14:38,970 --> 00:14:43,770
chops at least they are not run on my

00:14:41,220 --> 00:14:45,810
flavor stupid because the ticks but long

00:14:43,770 --> 00:14:48,840
but for office tests they are being run

00:14:45,810 --> 00:14:50,910
and so this was a big heart

00:14:48,840 --> 00:14:52,470
the package has served eight years they

00:14:50,910 --> 00:14:54,210
are independent of always the page

00:14:52,470 --> 00:14:56,550
objects and this stuff is of course

00:14:54,210 --> 00:14:58,240
always dependent but if you have also a

00:14:56,550 --> 00:15:01,059
graphical application you might

00:14:58,240 --> 00:15:04,269
to take a look at the code of the

00:15:01,059 --> 00:15:06,040
testing framework and maybe think about

00:15:04,269 --> 00:15:10,329
using something like that or similar

00:15:06,040 --> 00:15:12,850
ideas you are like yourselves so it to

00:15:10,329 --> 00:15:14,860
almost finish up I want to slide and I

00:15:12,850 --> 00:15:15,699
quickly talk about how FAR's office

00:15:14,860 --> 00:15:20,470
right now

00:15:15,699 --> 00:15:23,170
and most of the features are there and

00:15:20,470 --> 00:15:24,759
they feed me and the obvious repository

00:15:23,170 --> 00:15:26,679
there's a big table of other features

00:15:24,759 --> 00:15:29,050
and tools that are migrated there's also

00:15:26,679 --> 00:15:31,269
a list of tables that is the missing

00:15:29,050 --> 00:15:33,009
there's also documentation of how to

00:15:31,269 --> 00:15:36,040
write a plug-in that documents the new

00:15:33,009 --> 00:15:37,420
plugin api's of always there's other

00:15:36,040 --> 00:15:38,800
documentation of how to migrate your

00:15:37,420 --> 00:15:40,809
display so if you have a custom display

00:15:38,800 --> 00:15:42,129
and you want to have it working with a

00:15:40,809 --> 00:15:44,679
new always just check out this

00:15:42,129 --> 00:15:46,509
documentation there's almost there's

00:15:44,679 --> 00:15:48,459
everything there it's the same recipe we

00:15:46,509 --> 00:15:51,730
follow if we might create it a display

00:15:48,459 --> 00:15:53,980
and so it's for my part of queue obvious

00:15:51,730 --> 00:15:56,019
is usable almost all this place are

00:15:53,980 --> 00:15:56,709
working there are few things that are

00:15:56,019 --> 00:15:59,199
not done yet

00:15:56,709 --> 00:16:00,759
the couple of easy to migrate this place

00:15:59,199 --> 00:16:03,220
like the template to display they're

00:16:00,759 --> 00:16:05,350
almost like very similar to the point of

00:16:03,220 --> 00:16:08,019
this place a couple of them there's a

00:16:05,350 --> 00:16:10,119
test cloud that required image transport

00:16:08,019 --> 00:16:12,670
and effie has seen on a previous talk

00:16:10,119 --> 00:16:14,529
image transport is now a master and it

00:16:12,670 --> 00:16:16,449
will be in the next release so having

00:16:14,529 --> 00:16:18,699
that it should be straightforward to

00:16:16,449 --> 00:16:21,459
migrate the intake tool and interactive

00:16:18,699 --> 00:16:22,990
markers are missing that's a little bit

00:16:21,459 --> 00:16:25,029
tricky because there is some sort of

00:16:22,990 --> 00:16:26,889
component associated with that and

00:16:25,029 --> 00:16:28,449
there's the stereo stereo display no

00:16:26,889 --> 00:16:30,339
closed display which we haven't touched

00:16:28,449 --> 00:16:32,980
but these are the only things we aware

00:16:30,339 --> 00:16:35,259
of everything else missing if you miss

00:16:32,980 --> 00:16:38,589
something it's open source so make a

00:16:35,259 --> 00:16:42,009
pull request and might be late and I

00:16:38,589 --> 00:16:43,749
mean whatever so finally I want to thank

00:16:42,009 --> 00:16:46,240
all the people involved these are my

00:16:43,749 --> 00:16:49,389
colleagues at in here Martine who is

00:16:46,240 --> 00:16:50,799
also here Andria's alessandro both for

00:16:49,389 --> 00:16:53,079
hiring us to do the work and of course

00:16:50,799 --> 00:16:56,259
william who is already standing to my

00:16:53,079 --> 00:16:57,879
right for doing the maintain work of

00:16:56,259 --> 00:16:59,670
always and making all output requests

00:16:57,879 --> 00:17:09,089
thank you

00:16:59,670 --> 00:17:09,089
[Applause]

00:17:11,050 --> 00:17:17,870
yes I have a question when you're doing

00:17:14,930 --> 00:17:20,480
the test case selection or generation do

00:17:17,870 --> 00:17:23,480
you use any tools to to generate which

00:17:20,480 --> 00:17:25,280
types of tests either either manually

00:17:23,480 --> 00:17:27,829
through like metamorphic testing or some

00:17:25,280 --> 00:17:30,440
some technique that that randomly

00:17:27,829 --> 00:17:35,360
generates like to explore larger spaces

00:17:30,440 --> 00:17:37,550
in the parameters the parameters Micra

00:17:35,360 --> 00:17:39,560
to display the functionality is rather

00:17:37,550 --> 00:17:41,570
clear and then we just think about what

00:17:39,560 --> 00:17:42,980
are the functionality features we want

00:17:41,570 --> 00:17:45,620
to have asserted for and then we write

00:17:42,980 --> 00:17:49,310
the test but we don't don't do anything

00:17:45,620 --> 00:17:51,760
like Fozzy testing or try to exploit

00:17:49,310 --> 00:17:51,760
honor

00:17:56,950 --> 00:18:02,750
thank you for interesting presentation i

00:17:59,420 --> 00:18:05,600
her question regarding a decision of

00:18:02,750 --> 00:18:08,330
this migration have you considered

00:18:05,600 --> 00:18:10,430
moving to the web based tool so it was

00:18:08,330 --> 00:18:14,090
in the scope of estas was only migrated

00:18:10,430 --> 00:18:16,640
in this existing code advice to the new

00:18:14,090 --> 00:18:18,980
platforms and the second question what

00:18:16,640 --> 00:18:21,470
is the ratio of the code which you added

00:18:18,980 --> 00:18:27,620
compared to the legacy code which was

00:18:21,470 --> 00:18:30,400
there we only entered the migration path

00:18:27,620 --> 00:18:33,550
after this decisions we're done and so

00:18:30,400 --> 00:18:36,170
we ourselves only read of the discourse

00:18:33,550 --> 00:18:38,660
discussions about whether one for change

00:18:36,170 --> 00:18:40,370
and I think there are three minute the

00:18:38,660 --> 00:18:41,900
time walls and that's also where the

00:18:40,370 --> 00:18:44,120
motivation stems from that

00:18:41,900 --> 00:18:47,090
Armus as a desktop tool is very valuable

00:18:44,120 --> 00:18:50,090
and the goal was first now to migrate

00:18:47,090 --> 00:18:51,410
this desktop tool - Russ - and I think

00:18:50,090 --> 00:18:52,850
they are also different with the

00:18:51,410 --> 00:18:53,990
disabled solution so if one wants to

00:18:52,850 --> 00:18:57,140
have something web-based

00:18:53,990 --> 00:19:00,010
I believe the consensus is to just

00:18:57,140 --> 00:19:03,490
create your own tool -

00:19:00,010 --> 00:19:07,870
accommodate with that and second

00:19:03,490 --> 00:19:09,820
question um I we only thought to looked

00:19:07,870 --> 00:19:13,630
into the Kitab statistics for this so

00:19:09,820 --> 00:19:19,330
I'm not quite who I think we contributed

00:19:13,630 --> 00:19:23,170
long it was to 16 to 20 K lines of code

00:19:19,330 --> 00:19:25,810
which we changed or created but if you

00:19:23,170 --> 00:19:27,340
want tomorrow know any details I invite

00:19:25,810 --> 00:19:29,740
you to just check out github it's

00:19:27,340 --> 00:19:32,710
everything on you can see everything on

00:19:29,740 --> 00:19:35,800
the cross - obvious repository which is

00:19:32,710 --> 00:19:37,690
also on a link on the slide so I don't

00:19:35,800 --> 00:19:47,970
have the numbers on my head at my head

00:19:37,690 --> 00:19:47,970
thank you we all have much time

00:19:58,200 --> 00:20:05,430
and in your experience what do you find

00:20:03,240 --> 00:20:10,560
is a significant limitation of image

00:20:05,430 --> 00:20:12,660
based testing omits there are it's

00:20:10,560 --> 00:20:13,920
difficult to get it stable because you

00:20:12,660 --> 00:20:16,740
really need to make sure that their

00:20:13,920 --> 00:20:18,870
signal-to-noise ratio is quite high it's

00:20:16,740 --> 00:20:22,620
also the runtime of these tests is very

00:20:18,870 --> 00:20:24,030
high because you need to wait to be you

00:20:22,620 --> 00:20:25,710
need to wait for some time to be sure

00:20:24,030 --> 00:20:27,660
that the image on the screen is actually

00:20:25,710 --> 00:20:29,190
the one you expect so if you trust

00:20:27,660 --> 00:20:30,210
configure something on the application

00:20:29,190 --> 00:20:32,340
then you immediately take a screenshot

00:20:30,210 --> 00:20:33,810
you might just happen to be one frame

00:20:32,340 --> 00:20:35,610
too early or something like that

00:20:33,810 --> 00:20:38,280
and to be sure that you don't get flaky

00:20:35,610 --> 00:20:41,910
tests for no reason you need to wait

00:20:38,280 --> 00:20:44,460
apart from of that so you because of

00:20:41,910 --> 00:20:46,680
that you don't want to test every single

00:20:44,460 --> 00:20:48,480
small feature this way because the

00:20:46,680 --> 00:20:50,160
integration has the unit tester trust a

00:20:48,480 --> 00:20:54,530
much quicker and easier way to get fast

00:20:50,160 --> 00:20:56,790
feedback but that's mean that's my main

00:20:54,530 --> 00:20:58,380
main point in my mind a few why you

00:20:56,790 --> 00:21:01,800
don't want to do everything in that way

00:20:58,380 --> 00:21:03,930
it's and also it's if you have a test

00:21:01,800 --> 00:21:06,540
failure to see why the test is failing

00:21:03,930 --> 00:21:08,520
you need to look at both images manually

00:21:06,540 --> 00:21:11,640
so we don't we did not create tooling

00:21:08,520 --> 00:21:13,500
that compares the like shows us

00:21:11,640 --> 00:21:16,020
automatically they compared image the

00:21:13,500 --> 00:21:17,490
image comparison Jenkins so it's it's

00:21:16,020 --> 00:21:18,930
easy to spot if you have a different

00:21:17,490 --> 00:21:20,940
image and most of the time the

00:21:18,930 --> 00:21:22,380
difference was really big so we didn't

00:21:20,940 --> 00:21:26,120
felt it was necessary to create tooling

00:21:22,380 --> 00:21:26,120
for that while we don't have that

00:21:28,630 --> 00:21:31,759

YouTube URL: https://www.youtube.com/watch?v=1uDan5_6SOw


