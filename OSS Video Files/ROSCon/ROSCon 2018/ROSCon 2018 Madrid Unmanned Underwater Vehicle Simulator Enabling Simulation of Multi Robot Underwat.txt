Title: ROSCon 2018 Madrid Unmanned Underwater Vehicle Simulator Enabling Simulation of Multi Robot Underwat
Publication date: 2021-03-28
Playlist: ROSCon 2018
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2018 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,030 --> 00:00:04,319
so good morning everyone my name is

00:00:01,979 --> 00:00:05,970
Muslim partisan wing is about PhD

00:00:04,319 --> 00:00:08,280
student at the Bosch Corporate Research

00:00:05,970 --> 00:00:10,860
Center Dean training in Germany and I'm

00:00:08,280 --> 00:00:13,170
going to talk about the project I've

00:00:10,860 --> 00:00:14,940
helped create and being involved in the

00:00:13,170 --> 00:00:17,190
last few years which is they amended the

00:00:14,940 --> 00:00:20,939
water vehicle simulator using gazebo in

00:00:17,190 --> 00:00:22,769
rows so the UV simulator is part of a

00:00:20,939 --> 00:00:25,350
larger project it was part of a larger

00:00:22,769 --> 00:00:28,199
projects it was created inside the new

00:00:25,350 --> 00:00:30,570
project storms which is a project than

00:00:28,199 --> 00:00:32,579
intended under other objectives they

00:00:30,570 --> 00:00:34,350
tended to improve the autonomy on the

00:00:32,579 --> 00:00:36,630
underwater vehicle so it would be

00:00:34,350 --> 00:00:40,860
possible for example to easily deploy

00:00:36,630 --> 00:00:43,320
multiple vehicles to execute a very

00:00:40,860 --> 00:00:46,110
complex mission and in a cooperative

00:00:43,320 --> 00:00:49,739
manner or to also give assistance

00:00:46,110 --> 00:00:51,239
functions to ROV pilots that would have

00:00:49,739 --> 00:00:53,039
to do intervention tasks because many

00:00:51,239 --> 00:00:56,640
with hydraulic manipulators underwater

00:00:53,039 --> 00:00:58,770
so some questions arise back then on

00:00:56,640 --> 00:01:00,480
especially on where would be the test

00:00:58,770 --> 00:01:02,309
bench for all these our new algorithms

00:01:00,480 --> 00:01:05,100
that are going to be developing the

00:01:02,309 --> 00:01:07,710
swarms project and first of all like

00:01:05,100 --> 00:01:09,510
testing the algorithms for underwater of

00:01:07,710 --> 00:01:11,010
manipulation how do you keep make the

00:01:09,510 --> 00:01:13,200
proof-of-concept that is actually going

00:01:11,010 --> 00:01:15,750
to help the pilot and before I actually

00:01:13,200 --> 00:01:18,570
go into the to the to the expensive

00:01:15,750 --> 00:01:20,100
hardware and plenty the mission strategy

00:01:18,570 --> 00:01:22,049
so it's very important to know exactly

00:01:20,100 --> 00:01:23,790
where you're deploying this vehicles if

00:01:22,049 --> 00:01:25,710
they have a safe workspace to work one

00:01:23,790 --> 00:01:27,869
because if you have multiple vehicles

00:01:25,710 --> 00:01:29,790
are the same at the same time you don't

00:01:27,869 --> 00:01:33,720
want them to collide at each other it

00:01:29,790 --> 00:01:37,350
just would be very very expensive and

00:01:33,720 --> 00:01:39,240
especially one of the topics was that

00:01:37,350 --> 00:01:43,950
some algorithms they were planned to be

00:01:39,240 --> 00:01:46,229
developed would require replanting of

00:01:43,950 --> 00:01:47,280
the missions regarding some of the

00:01:46,229 --> 00:01:49,320
detections are sometimes the

00:01:47,280 --> 00:01:51,659
disturbances such as a strong currents

00:01:49,320 --> 00:01:53,640
for example or failure scenarios or you

00:01:51,659 --> 00:01:55,799
have actuators failing or sensors

00:01:53,640 --> 00:02:00,149
failing during the mission so how do you

00:01:55,799 --> 00:02:03,030
safely how do you safely do that in in

00:02:00,149 --> 00:02:06,600
in a you know in a way that is not going

00:02:03,030 --> 00:02:07,070
to put at risk all the hardware so the

00:02:06,600 --> 00:02:09,080
similar

00:02:07,070 --> 00:02:11,840
was a very easy conclusion to come to

00:02:09,080 --> 00:02:14,870
and in this in this case so the the

00:02:11,840 --> 00:02:16,459
mission in in in other other reasons is

00:02:14,870 --> 00:02:18,020
also because the mission for we are

00:02:16,459 --> 00:02:20,450
underwater robots especially if you have

00:02:18,020 --> 00:02:25,130
multiple ones it's very expensive and

00:02:20,450 --> 00:02:26,780
time-consuming and the the communication

00:02:25,130 --> 00:02:29,030
during the mission if you want to

00:02:26,780 --> 00:02:30,200
monitor what's going on can even the

00:02:29,030 --> 00:02:31,220
best case scenarios kid the

00:02:30,200 --> 00:02:34,520
communication is very sparse

00:02:31,220 --> 00:02:37,370
acoustic-based and you can very easily

00:02:34,520 --> 00:02:39,980
you cannot rely on that you to react

00:02:37,370 --> 00:02:41,209
upon emergency situations collision

00:02:39,980 --> 00:02:43,340
avoidance is also difficult because

00:02:41,209 --> 00:02:45,830
perception in the water is very limited

00:02:43,340 --> 00:02:47,890
and it's difficult to repeat and

00:02:45,830 --> 00:02:50,150
reproduce scenarios where I have some

00:02:47,890 --> 00:02:51,709
environmental phenomena going on so if

00:02:50,150 --> 00:02:54,410
you algorithm has to react to some

00:02:51,709 --> 00:02:56,690
environmental phenomena and doing that

00:02:54,410 --> 00:02:59,750
in real life and testing testing out of

00:02:56,690 --> 00:03:01,730
software it can be very tricky so

00:02:59,750 --> 00:03:06,860
evaluation through simulation was deemed

00:03:01,730 --> 00:03:09,709
as crucial in the project and with that

00:03:06,860 --> 00:03:11,299
the UV simulator was created and it was

00:03:09,709 --> 00:03:13,820
published in November night and from

00:03:11,299 --> 00:03:15,709
2016 in github and in stone development

00:03:13,820 --> 00:03:18,920
and it's basically a set of packages

00:03:15,709 --> 00:03:22,220
mostly gazebo plugins and a number of

00:03:18,920 --> 00:03:24,560
rows notes that were published for to

00:03:22,220 --> 00:03:28,370
enable the simulation under vehicles

00:03:24,560 --> 00:03:29,690
using the zebu and some of the packages

00:03:28,370 --> 00:03:31,489
there are a number of packages right now

00:03:29,690 --> 00:03:33,470
but so the package is mainly the UV

00:03:31,489 --> 00:03:34,930
simulator itself with mostly the Gazebo

00:03:33,470 --> 00:03:36,860
plugins that I mentioned for

00:03:34,930 --> 00:03:38,959
hydrodynamic hydrostatic forces

00:03:36,860 --> 00:03:40,970
simulation for actuator simulation

00:03:38,959 --> 00:03:43,010
sensor simulation so on the plume

00:03:40,970 --> 00:03:45,920
simulator that were going to get into

00:03:43,010 --> 00:03:47,630
later and UV manipulators that enable

00:03:45,920 --> 00:03:49,760
the simulation of intervention tasks on

00:03:47,630 --> 00:03:51,739
the water apart from that a number of

00:03:49,760 --> 00:03:55,130
vehicles have already been published as

00:03:51,739 --> 00:03:57,079
well so both torpedo shape a UV Center

00:03:55,130 --> 00:04:00,110
and trustor activator RVs

00:03:57,079 --> 00:04:04,340
which can also be used with the with the

00:04:00,110 --> 00:04:05,780
simulation so some examples of the

00:04:04,340 --> 00:04:09,670
plugins are divided in four categories

00:04:05,780 --> 00:04:12,250
there are more more packages that can be

00:04:09,670 --> 00:04:14,410
be seen the repository but I divided

00:04:12,250 --> 00:04:18,250
them into gazebo plugins sensor plugins

00:04:14,410 --> 00:04:21,850
command control and world plugins so the

00:04:18,250 --> 00:04:23,350
first the first plugin that is most the

00:04:21,850 --> 00:04:25,720
most important one is the underwater

00:04:23,350 --> 00:04:27,190
object plugin was she implemented is it

00:04:25,720 --> 00:04:29,380
an implementation of the fussin

00:04:27,190 --> 00:04:32,650
equations of motions for marine crafts

00:04:29,380 --> 00:04:34,510
and basically it lets it uses still uses

00:04:32,650 --> 00:04:37,090
the physics engine gazebos for rigid

00:04:34,510 --> 00:04:40,810
body dynamics and contact forces but it

00:04:37,090 --> 00:04:42,790
adds a upon it the added mass and linear

00:04:40,810 --> 00:04:45,520
and nonlinear damping forces and

00:04:42,790 --> 00:04:48,340
buoyancy forces that are necessary to to

00:04:45,520 --> 00:04:51,010
simulate this vehicles interaction in

00:04:48,340 --> 00:04:53,260
the fluid there are some implementation

00:04:51,010 --> 00:04:54,970
aspects that i will be happy to talk

00:04:53,260 --> 00:04:56,680
about after after presentation

00:04:54,970 --> 00:04:59,320
especially regarding the added mass

00:04:56,680 --> 00:05:01,120
forces that need some handling so that

00:04:59,320 --> 00:05:05,800
the simulation doesn't go completely

00:05:01,120 --> 00:05:07,450
unstable but it works for purchases and

00:05:05,800 --> 00:05:10,139
it can be completely configured in the

00:05:07,450 --> 00:05:10,139
RDF file

00:05:16,999 --> 00:05:23,449
so the next the next important part is

00:05:21,009 --> 00:05:25,819
the thruster and fin plugins because

00:05:23,449 --> 00:05:28,249
this is the most common actuators for

00:05:25,819 --> 00:05:31,489
underwater vehicles and we needed to

00:05:28,249 --> 00:05:33,589
figure out a way to make it easily

00:05:31,489 --> 00:05:36,049
reproduce quo in gazebo

00:05:33,589 --> 00:05:37,909
so trusses and fins have basically a

00:05:36,049 --> 00:05:39,649
dynamic the trusses for example have a

00:05:37,909 --> 00:05:41,929
dynamic model for the propellers angular

00:05:39,649 --> 00:05:43,939
velocity and it's fed on a steady state

00:05:41,929 --> 00:05:46,699
function because the the model the

00:05:43,939 --> 00:05:48,769
actual model is very it's it's highly

00:05:46,699 --> 00:05:50,779
nonlinear is hard also to parameterize

00:05:48,769 --> 00:05:52,669
so usually what you get from

00:05:50,779 --> 00:05:54,829
manufacturers is a steady state function

00:05:52,669 --> 00:05:56,449
that you can and that you can convert

00:05:54,829 --> 00:05:58,849
and the angular velocity the current

00:05:56,449 --> 00:06:02,059
angular velocity of the vehicle to trust

00:05:58,849 --> 00:06:03,679
output the fins are similar in a similar

00:06:02,059 --> 00:06:05,509
way but as in this status the joint

00:06:03,679 --> 00:06:07,819
angle so you can calculate with that the

00:06:05,509 --> 00:06:09,649
angle of attack and then and feed that

00:06:07,819 --> 00:06:12,529
into the lift and drag model one of them

00:06:09,649 --> 00:06:14,629
being adapted from gazebos already it's

00:06:12,529 --> 00:06:16,489
already available and another one is the

00:06:14,629 --> 00:06:22,039
quadratic model for the lift and drag

00:06:16,489 --> 00:06:25,629
output and this allows fin finned robots

00:06:22,039 --> 00:06:25,629
to be maneuvered when they are moving

00:06:27,189 --> 00:06:33,110
another important part is a forward plug

00:06:29,989 --> 00:06:35,959
and is the current velocity plugin so it

00:06:33,110 --> 00:06:38,899
at least adds some kind of realism to

00:06:35,959 --> 00:06:42,589
the to the - to the simulation since

00:06:38,899 --> 00:06:44,110
you're not often going to be throwing a

00:06:42,589 --> 00:06:47,329
robot in stillwater

00:06:44,110 --> 00:06:49,699
so the this plug-in basically generates

00:06:47,329 --> 00:06:52,309
a 3d current velocity topic that all the

00:06:49,699 --> 00:06:55,969
all the robots that have the underwater

00:06:52,309 --> 00:06:57,769
object like I subscribe to and they they

00:06:55,969 --> 00:07:00,739
can be either constant current source

00:06:57,769 --> 00:07:03,229
can set up first-order gauss-markov

00:07:00,739 --> 00:07:05,209
processes for magnitude and they already

00:07:03,229 --> 00:07:07,009
horizontal and vertical angle so you can

00:07:05,209 --> 00:07:09,519
add some kind of variations to the

00:07:07,009 --> 00:07:12,679
current during the simulation which

00:07:09,519 --> 00:07:13,930
which will actually help a lot for the

00:07:12,679 --> 00:07:17,169
next topic therefore the

00:07:13,930 --> 00:07:19,419
simulator topics oh and the plum

00:07:17,169 --> 00:07:21,370
simulation is was one of the topics that

00:07:19,419 --> 00:07:23,199
was most important for the final

00:07:21,370 --> 00:07:25,720
demonstration of the storms project is

00:07:23,199 --> 00:07:27,820
basically when Plumas is just a fluid

00:07:25,720 --> 00:07:30,880
moving inside another fluid so you have

00:07:27,820 --> 00:07:35,110
a column of fluid moving and this is a

00:07:30,880 --> 00:07:37,539
very common scenario where you deploy

00:07:35,110 --> 00:07:41,020
robots to find this code this column of

00:07:37,539 --> 00:07:42,910
fluid inside in seawater for example so

00:07:41,020 --> 00:07:45,910
what we did is implementation of a paper

00:07:42,910 --> 00:07:48,729
that's cited down there which is

00:07:45,910 --> 00:07:50,410
basically a source generates a number of

00:07:48,729 --> 00:07:54,430
dynamic particles and these particles

00:07:50,410 --> 00:07:56,979
are subject to two current and also have

00:07:54,430 --> 00:07:58,900
a buoyancy and dispersion coefficient

00:07:56,979 --> 00:08:00,970
that you can set up so you can for

00:07:58,900 --> 00:08:05,949
example simulate Northville or fresh

00:08:00,970 --> 00:08:07,690
water inside seawater and the this he

00:08:05,949 --> 00:08:09,580
dis is only limited by a bounding box so

00:08:07,690 --> 00:08:12,550
that the memory doesn't explode with a

00:08:09,580 --> 00:08:14,919
bunch of a bunch of particles but this

00:08:12,550 --> 00:08:16,570
is possible then to detect to at least

00:08:14,919 --> 00:08:22,389
simulate some environmental phenomena

00:08:16,570 --> 00:08:24,220
and in using gazebo and rose and

00:08:22,389 --> 00:08:26,260
additionally today I wanted the sensor

00:08:24,220 --> 00:08:27,940
plugins we develop was a particles of

00:08:26,260 --> 00:08:32,620
concentration sensor also based on the

00:08:27,940 --> 00:08:36,339
same paper which is basically it will

00:08:32,620 --> 00:08:39,190
inside the sphere around the sensors

00:08:36,339 --> 00:08:40,839
frame it will detect all the particles

00:08:39,190 --> 00:08:43,029
that are inside the sphere and then

00:08:40,839 --> 00:08:44,560
regarding the distance for to the sensor

00:08:43,029 --> 00:08:47,050
at the time of creation those particles

00:08:44,560 --> 00:08:49,900
we can compute as simulated for a

00:08:47,050 --> 00:08:52,420
concentration value that can be used for

00:08:49,900 --> 00:08:54,310
example if you have a logarithm that it

00:08:52,420 --> 00:08:55,870
needs to detect if you're inside the

00:08:54,310 --> 00:08:58,120
plume or if you cross the plume or not

00:08:55,870 --> 00:08:59,589
you can use the sensor for instance and

00:08:58,120 --> 00:09:03,520
it's going to be used in a use case

00:08:59,589 --> 00:09:05,920
later on another node that is really

00:09:03,520 --> 00:09:08,650
helpful is the thruster manager this is

00:09:05,920 --> 00:09:11,560
a simple force allocation node that

00:09:08,650 --> 00:09:13,450
reach the TF frame and then the checks

00:09:11,560 --> 00:09:15,610
of the other transformations between the

00:09:13,450 --> 00:09:18,040
base link of the vehicle to teach one of

00:09:15,610 --> 00:09:21,070
the thruster frames and the

00:09:18,040 --> 00:09:23,260
this is not rocket science but is one

00:09:21,070 --> 00:09:25,600
thing that many other water simulators

00:09:23,260 --> 00:09:27,910
that we saw before you had to compute

00:09:25,600 --> 00:09:30,670
this by hand before and this is just a

00:09:27,910 --> 00:09:32,170
note that runs on with the simulation

00:09:30,670 --> 00:09:39,760
and computes this for you so the first

00:09:32,170 --> 00:09:41,140
location is dealt with and last the last

00:09:39,760 --> 00:09:43,780
package I want to talk about this

00:09:41,140 --> 00:09:46,540
trajectory controls there is a basic

00:09:43,780 --> 00:09:50,110
very important package because it's not

00:09:46,540 --> 00:09:52,960
only contains several controllers coming

00:09:50,110 --> 00:09:55,630
for tourists or activated vehicles such

00:09:52,960 --> 00:09:58,600
as motor freeze by remote P idea so on a

00:09:55,630 --> 00:10:01,090
UVs have a geometric PD base controller

00:09:58,600 --> 00:10:02,680
that can be used as well but the most

00:10:01,090 --> 00:10:05,350
important part is that it has a Python

00:10:02,680 --> 00:10:07,300
API that where it already contains all

00:10:05,350 --> 00:10:09,280
the interfaces to everything all the all

00:10:07,300 --> 00:10:10,660
the services and topics you need so I

00:10:09,280 --> 00:10:14,350
just need to implement the controller

00:10:10,660 --> 00:10:16,900
the controller logic itself so expanding

00:10:14,350 --> 00:10:18,670
the system to your controllers and use

00:10:16,900 --> 00:10:20,800
it exactly the same services it's

00:10:18,670 --> 00:10:24,010
actually very easy and it also contains

00:10:20,800 --> 00:10:25,930
some helpful way point interpolators

00:10:24,010 --> 00:10:29,350
if they uses splines or doubles path

00:10:25,930 --> 00:10:31,740
algorithm where depending on your owner

00:10:29,350 --> 00:10:31,740
approach

00:10:32,130 --> 00:10:38,560
so I'm going to present now some of the

00:10:35,980 --> 00:10:42,130
use cases we used to in the basically in

00:10:38,560 --> 00:10:43,900
the storms project this was the second

00:10:42,130 --> 00:10:46,900
swarms demonstration mission in Mongolia

00:10:43,900 --> 00:10:49,150
Romanian so the idea was also always to

00:10:46,900 --> 00:10:50,650
have a simulated demonstration than a

00:10:49,150 --> 00:10:52,630
real demonstration in the simulator

00:10:50,650 --> 00:10:55,600
demonstration was helpful because you

00:10:52,630 --> 00:10:58,000
with that you managed to actually show

00:10:55,600 --> 00:10:59,560
in very high detail how the algorithm

00:10:58,000 --> 00:11:01,350
was supposed to work especially in

00:10:59,560 --> 00:11:03,790
situations where you have for example

00:11:01,350 --> 00:11:06,070
trust of failure where you don't really

00:11:03,790 --> 00:11:07,960
want the real robot to go through

00:11:06,070 --> 00:11:10,960
because if you lose one robot you might

00:11:07,960 --> 00:11:13,120
lose two million dollars so

00:11:10,960 --> 00:11:15,640
this in this scenario you had eight

00:11:13,120 --> 00:11:21,580
underwater vehicles and by the coast of

00:11:15,640 --> 00:11:24,670
Mongolia and they had to they had to do

00:11:21,580 --> 00:11:26,950
was a cooperative seabed mapping task

00:11:24,670 --> 00:11:29,800
which which was very simple task but it

00:11:26,950 --> 00:11:31,420
just showed how the functionality of the

00:11:29,800 --> 00:11:34,870
robot system onboard architecture

00:11:31,420 --> 00:11:37,270
developed by owner departments works so

00:11:34,870 --> 00:11:39,850
this is only one child of gazebo so we

00:11:37,270 --> 00:11:42,760
built just a large world with containing

00:11:39,850 --> 00:11:44,860
the coastline of Mongolia and - bass was

00:11:42,760 --> 00:11:47,980
marking the deployment points for for

00:11:44,860 --> 00:11:51,339
for the 48 it's underwater vehicles we

00:11:47,980 --> 00:11:54,250
wanted to deploy and it was basically

00:11:51,339 --> 00:11:58,930
two large areas from 400 by 400 meters

00:11:54,250 --> 00:12:01,690
and the RS so a system what it does it's

00:11:58,930 --> 00:12:04,750
divided it just divided the larger areas

00:12:01,690 --> 00:12:08,830
in assigned each one of the vehicles it

00:12:04,750 --> 00:12:10,779
its own area to to to do the mapping so

00:12:08,830 --> 00:12:13,330
here you can see just as adapted from

00:12:10,779 --> 00:12:15,040
the laser scan sensor plugin and it's

00:12:13,330 --> 00:12:17,020
just showing that each one of them has

00:12:15,040 --> 00:12:19,720
has the same side scanners and they and

00:12:17,020 --> 00:12:23,980
the entity can stitch in together and

00:12:19,720 --> 00:12:25,750
make a larger map from the seabed and it

00:12:23,980 --> 00:12:27,820
was very fun to see how many cuz how

00:12:25,750 --> 00:12:32,680
many vehicles gave actually could could

00:12:27,820 --> 00:12:37,540
actually put up with the next the next

00:12:32,680 --> 00:12:39,760
use case was related to the plume

00:12:37,540 --> 00:12:42,250
tracking simulation so one of the this

00:12:39,760 --> 00:12:44,709
large grey volume here is supposed to be

00:12:42,250 --> 00:12:46,330
a large volume of seawater and this

00:12:44,709 --> 00:12:48,550
particles are supposed to be a

00:12:46,330 --> 00:12:50,020
freshwater plume for a freshwater column

00:12:48,550 --> 00:12:52,900
that's going through it and the

00:12:50,020 --> 00:12:55,630
objective was to throw three a different

00:12:52,900 --> 00:12:57,730
torpedo shaped movies in the water which

00:12:55,630 --> 00:13:00,250
is actually done also in real life but

00:12:57,730 --> 00:13:02,890
in different depths and they had to find

00:13:00,250 --> 00:13:05,020
that bloom using salinity measurements

00:13:02,890 --> 00:13:06,400
which is derived from the particles to

00:13:05,020 --> 00:13:08,740
concentration so if you have fresh water

00:13:06,400 --> 00:13:11,079
the more particles you have salinity

00:13:08,740 --> 00:13:12,120
will drop so it will detect that across

00:13:11,079 --> 00:13:14,190
the plume

00:13:12,120 --> 00:13:15,810
it will try to stay inside the bloom for

00:13:14,190 --> 00:13:20,760
as long as possible so it can actually

00:13:15,810 --> 00:13:25,500
track the where the plume is going to so

00:13:20,760 --> 00:13:27,150
this is only showing who which vehicles

00:13:25,500 --> 00:13:28,440
were involved with this the surface

00:13:27,150 --> 00:13:30,060
vessel in real life was the

00:13:28,440 --> 00:13:31,710
communication really but in in the

00:13:30,060 --> 00:13:35,510
simulations was just hovering on the

00:13:31,710 --> 00:13:38,160
surface and the three the LEDs the light

00:13:35,510 --> 00:13:40,529
autonomous vehicles are up to lose one

00:13:38,160 --> 00:13:45,240
and two from an STS you know from Porto

00:13:40,529 --> 00:13:53,460
University and Phrygia from NTNU so you

00:13:45,240 --> 00:14:00,290
can see here that the vehicles are going

00:13:53,460 --> 00:14:00,290
to use the computer cooperate

00:14:06,290 --> 00:14:11,629
so the movies they as soon as they enter

00:14:09,829 --> 00:14:14,569
as soon as they enter de plume they try

00:14:11,629 --> 00:14:16,970
to figure out a way to go back to the

00:14:14,569 --> 00:14:18,410
plume so they can stay inside the body

00:14:16,970 --> 00:14:20,359
of the plot for as long as possible so

00:14:18,410 --> 00:14:24,139
in the right hand side is a simulated

00:14:20,359 --> 00:14:27,350
salinity values from the time and this

00:14:24,139 --> 00:14:29,379
actually de plume the digit this this

00:14:27,350 --> 00:14:32,209
plume was used on the also in the Rio

00:14:29,379 --> 00:14:34,220
and the real mission because throwing

00:14:32,209 --> 00:14:35,539
things in the water and try to track

00:14:34,220 --> 00:14:37,759
them is something you cannot control

00:14:35,539 --> 00:14:40,669
very well so do using simulator plumes

00:14:37,759 --> 00:14:42,769
is much better and this is was the third

00:14:40,669 --> 00:14:46,850
the third and final demonstration was

00:14:42,769 --> 00:14:51,289
just a demonstration of using markers on

00:14:46,850 --> 00:14:54,559
the on the subsea panel so the one of

00:14:51,289 --> 00:14:57,289
the biggest issues with the pilot in

00:14:54,559 --> 00:14:59,509
this this rope robot says the pilot

00:14:57,289 --> 00:15:01,489
doesn't have very good depth awareness

00:14:59,509 --> 00:15:04,069
so fine-tuning the position of end

00:15:01,489 --> 00:15:06,109
effector to turn the Volvo or a handle

00:15:04,069 --> 00:15:09,199
something is very complicated so this

00:15:06,109 --> 00:15:12,019
markers helped to set up as soon as they

00:15:09,199 --> 00:15:13,429
approached the valve it would just snap

00:15:12,019 --> 00:15:15,619
to the to the position orientation

00:15:13,429 --> 00:15:19,129
needed to be and it just had to approach

00:15:15,619 --> 00:15:22,970
it and and do the job and this is still

00:15:19,129 --> 00:15:24,589
something that this is this is just a

00:15:22,970 --> 00:15:28,789
proof of concept a simulation that was

00:15:24,589 --> 00:15:31,069
not done in the real robot but it's nice

00:15:28,789 --> 00:15:33,829
to see that it works apart from the fact

00:15:31,069 --> 00:15:35,929
that that's missing a lot of underwater

00:15:33,829 --> 00:15:42,609
effects that could have done the camera

00:15:35,929 --> 00:15:42,609
detection very complicated so

00:15:44,269 --> 00:15:49,940
just some future step so the storms

00:15:47,160 --> 00:15:55,050
project is actually over its and that is

00:15:49,940 --> 00:15:57,089
July in 2018 and but the UV simulator

00:15:55,050 --> 00:15:59,399
project is continued as an open source

00:15:57,089 --> 00:16:03,420
project it has a surprising number of

00:15:59,399 --> 00:16:05,490
people using it and I just after my PhD

00:16:03,420 --> 00:16:07,740
is finished I want to keep doing the

00:16:05,490 --> 00:16:09,300
this project later on and some

00:16:07,740 --> 00:16:11,040
improvements that I've been putting off

00:16:09,300 --> 00:16:13,050
for a long time but I want to do as soon

00:16:11,040 --> 00:16:17,699
as improving sensor plug especially

00:16:13,050 --> 00:16:18,089
acoustic-based over not the focus until

00:16:17,699 --> 00:16:20,130
now

00:16:18,089 --> 00:16:22,320
scenarios underwater visual effects such

00:16:20,130 --> 00:16:24,680
as particles floating around or light

00:16:22,320 --> 00:16:26,579
damping which is very important and

00:16:24,680 --> 00:16:30,630
improving that much and the water

00:16:26,579 --> 00:16:32,750
manipulation packages to to make the

00:16:30,630 --> 00:16:35,880
intervention which is more realistic and

00:16:32,750 --> 00:16:38,130
I just put the list of the some of the

00:16:35,880 --> 00:16:40,620
links to some of the existent packages

00:16:38,130 --> 00:16:44,970
and for the documentation documentation

00:16:40,620 --> 00:16:47,819
website and just some acknowledgments to

00:16:44,970 --> 00:16:49,519
all people that made is also possible

00:16:47,819 --> 00:16:51,540
with some of the colleagues from Bosch

00:16:49,519 --> 00:16:54,029
Sebastian Lewis and Thomas which

00:16:51,540 --> 00:16:56,519
contributed occult and also 3d models as

00:16:54,029 --> 00:16:58,620
forms partners especially vehicle

00:16:56,519 --> 00:17:03,089
providers such as a group and the Cystic

00:16:58,620 --> 00:17:05,130
which were nice and them gave not only

00:17:03,089 --> 00:17:06,809
the authorization to publish their but

00:17:05,130 --> 00:17:08,549
their meshes and the vehicle parameters

00:17:06,809 --> 00:17:10,530
but also contributing on giving feedback

00:17:08,549 --> 00:17:13,919
of the how to function there they're

00:17:10,530 --> 00:17:16,380
working and other partners also make

00:17:13,919 --> 00:17:18,209
very very important bug reports which is

00:17:16,380 --> 00:17:20,970
very grateful for and all the

00:17:18,209 --> 00:17:26,790
contributors on github which make a

00:17:20,970 --> 00:17:29,209
large amount of pull requests so thank

00:17:26,790 --> 00:17:29,209
you very much

00:17:30,040 --> 00:17:51,220
[Applause]

00:17:31,750 --> 00:17:52,810
I had some comparisons with the a UVs

00:17:51,220 --> 00:17:56,460
because we had contact with the partners

00:17:52,810 --> 00:18:00,130
yeah and the the biggest problem was

00:17:56,460 --> 00:18:02,320
basically that it's difficult to obtain

00:18:00,130 --> 00:18:05,800
the ground truth information for for

00:18:02,320 --> 00:18:08,590
this because it's the and in the in the

00:18:05,800 --> 00:18:10,330
context where we are working on but for

00:18:08,590 --> 00:18:13,000
some way of these we made a comparison

00:18:10,330 --> 00:18:16,480
for with data from from the funded

00:18:13,000 --> 00:18:19,320
providers but also needed to need to be

00:18:16,480 --> 00:18:19,320
worked on this

00:18:33,640 --> 00:18:40,970
so the question was if the Yogi's were

00:18:37,750 --> 00:18:44,420
if they were in different planes and in

00:18:40,970 --> 00:18:47,030
the simulation but yes the the it would

00:18:44,420 --> 00:18:48,950
be best if they could detect each other

00:18:47,030 --> 00:18:50,180
and company or at least communicate with

00:18:48,950 --> 00:18:53,270
each other to know if they have to

00:18:50,180 --> 00:18:57,230
divert from from collision path but

00:18:53,270 --> 00:19:00,170
fortunately the the as I said the

00:18:57,230 --> 00:19:03,440
perception system is not good enough for

00:19:00,170 --> 00:19:05,510
moving targets so that it's safe for for

00:19:03,440 --> 00:19:07,370
them to actually be on the same plane so

00:19:05,510 --> 00:19:11,330
they were assigned different depths and

00:19:07,370 --> 00:19:14,470
so the so that the owners of those

00:19:11,330 --> 00:19:14,470

YouTube URL: https://www.youtube.com/watch?v=OXWiHBAkXgM


