Title: ROSCon 2018 Madrid ROSIN Quality Assurance Initiatives for ROS 2 of 2
Publication date: 2021-03-28
Playlist: ROSCon 2018
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2018 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:02,419 --> 00:00:10,620
so hello everyone thanks for coming my

00:00:08,069 --> 00:00:15,509
name is joy I am from IT University I'm

00:00:10,620 --> 00:00:18,990
working in computer science software

00:00:15,509 --> 00:00:21,390
engineering side of the story so I'm

00:00:18,990 --> 00:00:30,359
going to talk about the Tor development

00:00:21,390 --> 00:00:33,270
part in our project so before yesterday

00:00:30,359 --> 00:00:41,270
I got this so called breaking news

00:00:33,270 --> 00:00:44,430
actually news about hunger who recalls a

00:00:41,270 --> 00:00:47,730
some of his vehicles because of

00:00:44,430 --> 00:00:49,829
software's problems probably you have

00:00:47,730 --> 00:00:52,949
already heard this kind of story

00:00:49,829 --> 00:00:56,160
over and over again last two decades

00:00:52,949 --> 00:00:59,039
actually software reliability is an

00:00:56,160 --> 00:01:02,160
issue it is a problem that is spreading

00:00:59,039 --> 00:01:06,380
in the digital world so this is what I'm

00:01:02,160 --> 00:01:11,430
going to talk about software reliability

00:01:06,380 --> 00:01:14,330
so now coming to our last part this is

00:01:11,430 --> 00:01:18,420
an important go we want to make ross

00:01:14,330 --> 00:01:19,020
reliable or more reliable we all know

00:01:18,420 --> 00:01:22,049
that

00:01:19,020 --> 00:01:26,130
ross is everywhere now in whenever we

00:01:22,049 --> 00:01:28,710
talk about robotics to some extent we

00:01:26,130 --> 00:01:32,600
are in a vulnerable position because we

00:01:28,710 --> 00:01:38,579
depend on it we want it to be reliable

00:01:32,600 --> 00:01:41,880
but since 2017 we the IT university

00:01:38,579 --> 00:01:44,909
researchers in copenhagen we have been

00:01:41,880 --> 00:01:49,020
working on how to test rob rog

00:01:44,909 --> 00:01:52,470
components automatically to test is to

00:01:49,020 --> 00:01:54,570
make a software fail to test it

00:01:52,470 --> 00:01:58,710
automatically is to make it fail

00:01:54,570 --> 00:02:00,649
automatically so we need to deal with

00:01:58,710 --> 00:02:04,860
the challenges from the ross specific

00:02:00,649 --> 00:02:08,209
challenges and we want to reduce some

00:02:04,860 --> 00:02:12,750
existing tools from the academic world

00:02:08,209 --> 00:02:15,570
and today i'm also going to talk about

00:02:12,750 --> 00:02:20,910
I'm going to show a demonstration of our

00:02:15,570 --> 00:02:23,270
ongoing work so these are the first

00:02:20,910 --> 00:02:25,050
challenges that I want to talk about

00:02:23,270 --> 00:02:30,390
very important

00:02:25,050 --> 00:02:32,880
the lack of specification so here is the

00:02:30,390 --> 00:02:37,580
total sim packages the screenshot I got

00:02:32,880 --> 00:02:40,890
it's a bug that I detected and then I

00:02:37,580 --> 00:02:43,980
submitted a poor request is the poor

00:02:40,890 --> 00:02:46,740
repair was accepted the expected

00:02:43,980 --> 00:02:51,900
behavior of this turtle is to draw

00:02:46,740 --> 00:02:55,290
squares the bug is the total spins after

00:02:51,900 --> 00:02:58,800
one third of a square so this turtle

00:02:55,290 --> 00:03:01,220
does not go into crash your system the

00:02:58,800 --> 00:03:07,710
power it's going to go undetected

00:03:01,220 --> 00:03:13,140
in fact this kind of bugs the occur

00:03:07,710 --> 00:03:16,620
often quite often yeah Solomon bugs they

00:03:13,140 --> 00:03:19,790
do not manifest themselves because there

00:03:16,620 --> 00:03:24,300
is no specification there's no way for

00:03:19,790 --> 00:03:27,360
automated testing tool to know if a bug

00:03:24,300 --> 00:03:29,420
heavens or not so it's very difficult to

00:03:27,360 --> 00:03:32,900
do automatic automated testing without

00:03:29,420 --> 00:03:36,660
knowing what is right and what is wrong

00:03:32,900 --> 00:03:40,770
specification is the first thing that we

00:03:36,660 --> 00:03:45,570
need the second thing we need is good

00:03:40,770 --> 00:03:47,519
test driver so a test driver is

00:03:45,570 --> 00:03:50,970
something there long chase Ross

00:03:47,519 --> 00:03:54,239
components very simply a good test

00:03:50,970 --> 00:03:57,900
driver is something that fails your rows

00:03:54,239 --> 00:04:01,590
components how can we automatically have

00:03:57,900 --> 00:04:06,150
this good test drivers that's a big

00:04:01,590 --> 00:04:10,650
challenge so our solution is to rely on

00:04:06,150 --> 00:04:12,810
existing techniques from academia the

00:04:10,650 --> 00:04:15,930
idea is that if you don't have it you

00:04:12,810 --> 00:04:18,450
try to get it for the challenge number

00:04:15,930 --> 00:04:22,080
one we don't have specification we want

00:04:18,450 --> 00:04:24,810
your sanitizer from the academia it's

00:04:22,080 --> 00:04:26,010
existed this has already been there it's

00:04:24,810 --> 00:04:29,490
mature stuff

00:04:26,010 --> 00:04:33,360
if you don't have good test drivers you

00:04:29,490 --> 00:04:36,780
try to use fuzzy again it has been there

00:04:33,360 --> 00:04:41,430
it's mature stuff so I'm going to

00:04:36,780 --> 00:04:44,460
briefly introduce these two guys so what

00:04:41,430 --> 00:04:47,190
is the Sennheiser for example you have a

00:04:44,460 --> 00:04:50,610
line of code x equals to Y divided by Z

00:04:47,190 --> 00:04:53,370
a Sennheiser is something that

00:04:50,610 --> 00:04:56,430
introduced and are searching here Z is

00:04:53,370 --> 00:04:59,240
not equal to zero because you don't want

00:04:56,430 --> 00:05:01,470
to have a division by zero here a

00:04:59,240 --> 00:05:05,370
Sennheiser is something that has already

00:05:01,470 --> 00:05:08,730
built in in our compiler like a GCC or

00:05:05,370 --> 00:05:10,800
clan so it's like you just use GCC - I

00:05:08,730 --> 00:05:13,020
won't use a Sennheiser

00:05:10,800 --> 00:05:15,770
you get this entirely you get the

00:05:13,020 --> 00:05:18,840
assertion injected in your code

00:05:15,770 --> 00:05:21,180
Sennheiser can do more than this injects

00:05:18,840 --> 00:05:25,080
automatically other assertions like

00:05:21,180 --> 00:05:31,230
array index out of bomb and many others

00:05:25,080 --> 00:05:36,000
about your memories for example now

00:05:31,230 --> 00:05:39,330
about fuzzy it's another very

00:05:36,000 --> 00:05:43,310
interesting stuff that we Ross folks

00:05:39,330 --> 00:05:47,790
should consider using it all started in

00:05:43,310 --> 00:05:51,360
1987 from University of Wisconsin what

00:05:47,790 --> 00:05:55,260
they did we just reused some pure

00:05:51,360 --> 00:05:58,430
relevant data to feel the unit commander

00:05:55,260 --> 00:06:02,670
line what they have found that

00:05:58,430 --> 00:06:05,730
one-fourth of UNIX utilities that have

00:06:02,670 --> 00:06:09,390
been tested crashed so this is quite

00:06:05,730 --> 00:06:12,960
phenomenal it was very very surprising

00:06:09,390 --> 00:06:13,790
at that moment so R and Q random testing

00:06:12,960 --> 00:06:18,030
worked very well

00:06:13,790 --> 00:06:23,010
now fuzzing is smart random testing

00:06:18,030 --> 00:06:26,880
random testing plus street smarts so the

00:06:23,010 --> 00:06:30,540
diagram here is what's highlighting the

00:06:26,880 --> 00:06:33,000
high-level part of the fuzzing stuff you

00:06:30,540 --> 00:06:38,160
have a software treated as a black box

00:06:33,000 --> 00:06:39,240
you you feel random input into the

00:06:38,160 --> 00:06:41,880
software

00:06:39,240 --> 00:06:44,039
you get the output file in something

00:06:41,880 --> 00:06:45,780
that observes output and gave the

00:06:44,039 --> 00:06:48,199
feedback to the real random input

00:06:45,780 --> 00:06:51,990
generator to help you to get more

00:06:48,199 --> 00:06:55,190
sensible relevant random inputs as to

00:06:51,990 --> 00:06:57,270
your software to trigger more crashes

00:06:55,190 --> 00:07:01,319
again this is something that has been

00:06:57,270 --> 00:07:04,190
has existed there we do not need to

00:07:01,319 --> 00:07:07,680
reinvent the wheel we want to reduce it

00:07:04,190 --> 00:07:11,460
funding has been used to detect numerous

00:07:07,680 --> 00:07:13,650
bugs in open source project Microsoft

00:07:11,460 --> 00:07:19,380
Google and many other big companies they

00:07:13,650 --> 00:07:23,639
use fuzzy daily so something I suggest

00:07:19,380 --> 00:07:27,509
Roth folks to consider using so now the

00:07:23,639 --> 00:07:30,780
high level approach our tour should be

00:07:27,509 --> 00:07:34,020
simple here at higher and high level at

00:07:30,780 --> 00:07:36,840
least you have the Ross package you

00:07:34,020 --> 00:07:42,509
inject specification into this with

00:07:36,840 --> 00:07:45,479
so-called sanitizer and what you get is

00:07:42,509 --> 00:07:49,349
what I call here specification carrying

00:07:45,479 --> 00:07:53,180
raus raus that carries those assertions

00:07:49,349 --> 00:08:00,090
and now you'll use fuzzy to crash your

00:07:53,180 --> 00:08:03,599
spec carrying ross packages so we use

00:08:00,090 --> 00:08:06,599
two components that has have existed

00:08:03,599 --> 00:08:15,320
already so now quick demonstration from

00:08:06,599 --> 00:08:15,320
our ongoing work ok I'll explain shortly

00:08:15,469 --> 00:08:20,750
so what what do you know let me finish

00:08:20,930 --> 00:08:28,110
ok what do you see yes actually the

00:08:25,650 --> 00:08:31,380
total sim package the whole world

00:08:28,110 --> 00:08:36,149
package for Ross you have our total that

00:08:31,380 --> 00:08:41,010
is supposed to to just draw a square but

00:08:36,149 --> 00:08:43,289
the testing tour is going to feed random

00:08:41,010 --> 00:08:46,200
data for the turtle so the total is

00:08:43,289 --> 00:08:48,510
going supposed to go wildly in all

00:08:46,200 --> 00:08:51,150
directions we because we have a very

00:08:48,510 --> 00:08:54,020
short time out here so you only see the

00:08:51,150 --> 00:08:59,360
turtle at the beginning of his

00:08:54,020 --> 00:09:03,120
the total is changing you is supposed to

00:08:59,360 --> 00:09:06,570
go in all directions so ideally this is

00:09:03,120 --> 00:09:08,940
going to find a about but we have not

00:09:06,570 --> 00:09:12,029
yet found it we believe it's just a

00:09:08,940 --> 00:09:12,720
question of time but this is the ongoing

00:09:12,029 --> 00:09:14,820
work

00:09:12,720 --> 00:09:17,390
it's beginning of something we believe

00:09:14,820 --> 00:09:23,160
very very interesting

00:09:17,390 --> 00:09:27,300
now conclusion so we want to build a

00:09:23,160 --> 00:09:30,270
reliable lost components what we do is

00:09:27,300 --> 00:09:33,930
we we try to reduce existing solutions

00:09:30,270 --> 00:09:38,160
from McDaniel one is sanitizer another

00:09:33,930 --> 00:09:40,610
one is the funding thank you that's all

00:09:38,160 --> 00:09:46,600
what I want to say

00:09:40,610 --> 00:09:46,600

YouTube URL: https://www.youtube.com/watch?v=BzgHPjWSQhw


