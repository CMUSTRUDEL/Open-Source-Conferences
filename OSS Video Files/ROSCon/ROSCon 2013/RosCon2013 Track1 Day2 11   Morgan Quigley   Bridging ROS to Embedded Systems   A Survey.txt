Title: RosCon2013 Track1 Day2 11   Morgan Quigley   Bridging ROS to Embedded Systems   A Survey
Publication date: 2014-08-31
Playlist: ROSCon 2013
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2013 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/ http://roscon.ros.org/2013/?page_id=14
Captions: 
	00:00:00,000 --> 00:00:04,049
I think you thank you for the

00:00:02,070 --> 00:00:06,420
introduction and thank you for everyone

00:00:04,049 --> 00:00:10,830
making it the last session of Roscoe on

00:00:06,420 --> 00:00:12,330
here so this talk again is about

00:00:10,830 --> 00:00:14,160
bridging roles to embedded systems so we

00:00:12,330 --> 00:00:17,250
just heard the talk on micrographs note

00:00:14,160 --> 00:00:18,690
w talk after me about Rossi so I'm

00:00:17,250 --> 00:00:20,070
trying this taco take a different

00:00:18,690 --> 00:00:21,300
perspective instead of describing one

00:00:20,070 --> 00:00:23,010
approach in particular I'm going to try

00:00:21,300 --> 00:00:26,580
to make a survey of the breadth of

00:00:23,010 --> 00:00:29,820
approaches that are out there so instead

00:00:26,580 --> 00:00:30,960
of trying to you know sell something or

00:00:29,820 --> 00:00:32,700
bash something else is your other I'm

00:00:30,960 --> 00:00:34,350
just going to try to look at what's out

00:00:32,700 --> 00:00:36,899
there because oftentimes in embedded

00:00:34,350 --> 00:00:37,860
systems their best method is going to be

00:00:36,899 --> 00:00:39,420
sort of driven by the application

00:00:37,860 --> 00:00:41,100
whether you have you know a really

00:00:39,420 --> 00:00:42,510
extreme power budget or extreme

00:00:41,100 --> 00:00:47,280
performance requirements or something in

00:00:42,510 --> 00:00:48,780
between so to start this talk first all

00:00:47,280 --> 00:00:50,039
robots have embedded systems it's kind

00:00:48,780 --> 00:00:52,170
of one of the things that makes it about

00:00:50,039 --> 00:00:54,180
a robot is there's oftentimes are almost

00:00:52,170 --> 00:00:56,399
always really a collection of smaller

00:00:54,180 --> 00:00:58,379
processors that then talk to analog

00:00:56,399 --> 00:01:00,420
sensors about the world or two actuators

00:00:58,379 --> 00:01:02,430
to then affect the world so it's not

00:01:00,420 --> 00:01:03,719
necessarily if we have in this little

00:01:02,430 --> 00:01:06,119
embedded system that's rather how we're

00:01:03,719 --> 00:01:07,920
going to choose to talk to them all

00:01:06,119 --> 00:01:09,750
robots have things like laser scanners

00:01:07,920 --> 00:01:11,790
cameras motors radios you know all these

00:01:09,750 --> 00:01:13,979
things have microcontrollers in them of

00:01:11,790 --> 00:01:15,840
some sort and sometimes we have to

00:01:13,979 --> 00:01:17,100
control over those devices like we built

00:01:15,840 --> 00:01:18,840
them or we design them like they were

00:01:17,100 --> 00:01:21,450
just describing the previous talk they

00:01:18,840 --> 00:01:24,240
have their own custom hardware nodes

00:01:21,450 --> 00:01:26,070
sometimes we don't that's oftentimes the

00:01:24,240 --> 00:01:28,170
case if you're buying things off the

00:01:26,070 --> 00:01:29,759
shelf like women by a laser scanner of

00:01:28,170 --> 00:01:30,960
course it has tons of internal firmware

00:01:29,759 --> 00:01:33,479
but that's that's close that's

00:01:30,960 --> 00:01:35,640
proprietary to the company so we can we

00:01:33,479 --> 00:01:37,560
have fewer options to play with there

00:01:35,640 --> 00:01:38,790
but there's lots of situations that

00:01:37,560 --> 00:01:39,930
means there's gonna be lots of valid

00:01:38,790 --> 00:01:42,229
approaches which is what I want to

00:01:39,930 --> 00:01:45,090
survey here in this talk so it's funny

00:01:42,229 --> 00:01:46,979
even just the idea of embedded systems

00:01:45,090 --> 00:01:48,390
if you ask you know 10 people what is an

00:01:46,979 --> 00:01:50,759
embedded system you'll get probably 10

00:01:48,390 --> 00:01:51,990
different responses I'll just kind of go

00:01:50,759 --> 00:01:55,770
around the circle there starting at the

00:01:51,990 --> 00:01:57,840
upper left you can take a full you know

00:01:55,770 --> 00:01:59,310
ATX motherboard and put it in a box that

00:01:57,840 --> 00:02:00,450
doesn't look like a computer and all the

00:01:59,310 --> 00:02:03,360
sudden you can call it an embedded

00:02:00,450 --> 00:02:05,399
system often times you see a large robot

00:02:03,360 --> 00:02:06,960
like the pr2 for example and it has you

00:02:05,399 --> 00:02:08,470
know some x86 computers in there but

00:02:06,960 --> 00:02:10,420
it's fair to call those embedded because

00:02:08,470 --> 00:02:11,770
not like the keyboard in the screen and

00:02:10,420 --> 00:02:14,620
kind of the usual things you associate

00:02:11,770 --> 00:02:16,210
with the computer there are also you

00:02:14,620 --> 00:02:18,100
know smaller form packaging motherboards

00:02:16,210 --> 00:02:19,390
and just everything in between the

00:02:18,100 --> 00:02:21,550
center there of course is the most

00:02:19,390 --> 00:02:23,830
common kind of embedded system now the

00:02:21,550 --> 00:02:25,510
smartphones these things are amazing now

00:02:23,830 --> 00:02:27,040
they're there faster I think pretty sure

00:02:25,510 --> 00:02:29,800
the phone in my pocket is faster than my

00:02:27,040 --> 00:02:31,570
poor little netbook right here they get

00:02:29,800 --> 00:02:34,570
you know cooler and more awesome every

00:02:31,570 --> 00:02:35,980
year they are you know a classic

00:02:34,570 --> 00:02:40,210
definition of embedded system it's an

00:02:35,980 --> 00:02:41,920
arm a class microcontroller you know all

00:02:40,210 --> 00:02:44,470
tightened up and do a nice package looks

00:02:41,920 --> 00:02:46,180
cool on the outside so the that's kind

00:02:44,470 --> 00:02:48,580
of the one class that the next class

00:02:46,180 --> 00:02:50,920
down would be the arm a class so similar

00:02:48,580 --> 00:02:52,810
processor class but without kind of the

00:02:50,920 --> 00:02:56,500
UI aspects to it so like the Raspberry

00:02:52,810 --> 00:02:58,450
Pi there is you know sort of the the

00:02:56,500 --> 00:02:59,890
bare bones of a computer without the UI

00:02:58,450 --> 00:03:01,750
you sort of bring your own keyboard or

00:02:59,890 --> 00:03:05,140
your bring your own TV or network or

00:03:01,750 --> 00:03:08,080
whatever so the next class down below

00:03:05,140 --> 00:03:10,690
that this is the arm m-class

00:03:08,080 --> 00:03:13,030
microcontroller so cortex and three like

00:03:10,690 --> 00:03:15,040
they had in the previous talk or other

00:03:13,030 --> 00:03:16,989
other these of these 32-bit

00:03:15,040 --> 00:03:18,670
microcontrollers knob these things are

00:03:16,989 --> 00:03:20,950
that one in particular on the lower left

00:03:18,670 --> 00:03:22,510
there is the embed platform it's very

00:03:20,950 --> 00:03:23,980
popular and these things are amazing

00:03:22,510 --> 00:03:26,050
they're in quality these are like a

00:03:23,980 --> 00:03:27,820
dollar or two dollars these types of

00:03:26,050 --> 00:03:29,680
chips and they're mean just phenomenal

00:03:27,820 --> 00:03:31,810
they're going 100 megahertz 32-bit

00:03:29,680 --> 00:03:34,660
machine own ship flash and gram and

00:03:31,810 --> 00:03:36,340
stuff these are I think it's fair to say

00:03:34,660 --> 00:03:37,720
more powerful than the computers that

00:03:36,340 --> 00:03:39,340
many of us learn to program on although

00:03:37,720 --> 00:03:41,470
I guess we're sort of dating ourselves

00:03:39,340 --> 00:03:42,970
there but it's amazing what you can buy

00:03:41,470 --> 00:03:44,950
now and then finally the lower right is

00:03:42,970 --> 00:03:47,950
the the kind of entry level type

00:03:44,950 --> 00:03:50,680
processor this is the Arduino mega it

00:03:47,950 --> 00:03:53,200
has an AVR a nap metal processor in and

00:03:50,680 --> 00:03:54,730
that one's an 8-bit processor they are

00:03:53,200 --> 00:03:56,170
extremely low power so these are all

00:03:54,730 --> 00:03:57,970
this is kind of a huge range of embedded

00:03:56,170 --> 00:04:00,640
systems the lowest right there has

00:03:57,970 --> 00:04:02,110
extremely low power consumption very

00:04:00,640 --> 00:04:04,450
simple to use you basically just give

00:04:02,110 --> 00:04:06,070
that chip power and it like can start

00:04:04,450 --> 00:04:07,630
blinking lights and feeling from things

00:04:06,070 --> 00:04:09,549
all the way up the upper left where

00:04:07,630 --> 00:04:11,920
we're taking you know 100 watts and and

00:04:09,549 --> 00:04:14,170
can do amazing things so it's a big

00:04:11,920 --> 00:04:15,400
range the things so then if this is so

00:04:14,170 --> 00:04:18,280
big and complicated why would we even

00:04:15,400 --> 00:04:19,790
want to embed things the fantastic thing

00:04:18,280 --> 00:04:21,800
about embedded systems is you can

00:04:19,790 --> 00:04:23,420
dial-in exactly the kind of processing

00:04:21,800 --> 00:04:25,700
power and size that you need for your

00:04:23,420 --> 00:04:26,840
system your goal so you can then if

00:04:25,700 --> 00:04:29,720
you're trying to make your products you

00:04:26,840 --> 00:04:30,740
can minimize the cost sighs wait power

00:04:29,720 --> 00:04:32,960
consumption and all that kind of stuff

00:04:30,740 --> 00:04:35,690
to give just the computation cycles that

00:04:32,960 --> 00:04:38,120
you need in your product these are also

00:04:35,690 --> 00:04:39,380
becoming more powerful every year it you

00:04:38,120 --> 00:04:40,820
know I think that of course all

00:04:39,380 --> 00:04:42,470
computers get faster every year but it

00:04:40,820 --> 00:04:44,090
seems to be more extreme I don't know if

00:04:42,470 --> 00:04:46,190
the slope of the curve or whatever is

00:04:44,090 --> 00:04:47,660
faster and embedded systems but it seems

00:04:46,190 --> 00:04:49,130
every year you go to the embedded show

00:04:47,660 --> 00:04:50,840
and they're like oh yeah you know it's

00:04:49,130 --> 00:04:52,460
been another year our thing is twice as

00:04:50,840 --> 00:04:53,630
fast and takes half the power this year

00:04:52,460 --> 00:04:56,510
and you've sort of been hearing that for

00:04:53,630 --> 00:04:58,490
a long time these market forces are

00:04:56,510 --> 00:04:59,900
massive the number of embedded systems

00:04:58,490 --> 00:05:01,460
in the world dwarfs the number of

00:04:59,900 --> 00:05:03,650
personal computers in the world they've

00:05:01,460 --> 00:05:06,320
a couple years ago they started selling

00:05:03,650 --> 00:05:08,150
more smartphones than pcs and that's

00:05:06,320 --> 00:05:10,340
damn sure now they sell more tablets and

00:05:08,150 --> 00:05:11,780
PCs also so there's huge market courses

00:05:10,340 --> 00:05:13,820
making these things get better and

00:05:11,780 --> 00:05:14,900
better every year and so with that we

00:05:13,820 --> 00:05:17,270
can now do more and more on these

00:05:14,900 --> 00:05:18,920
systems one of the things that I like to

00:05:17,270 --> 00:05:21,050
do and some of the architectures I like

00:05:18,920 --> 00:05:22,580
to build is that we can push a lot of

00:05:21,050 --> 00:05:24,650
the real-time requirements now down into

00:05:22,580 --> 00:05:26,990
the embedded systems so now rather than

00:05:24,650 --> 00:05:28,820
trying to have a full-size computer

00:05:26,990 --> 00:05:30,200
that's running both real-time and

00:05:28,820 --> 00:05:32,840
non-real-time code with some sort of

00:05:30,200 --> 00:05:34,610
hypervisor on top we can instead put the

00:05:32,840 --> 00:05:36,560
real-time systems down with the embedded

00:05:34,610 --> 00:05:38,030
controller which has sort of just enough

00:05:36,560 --> 00:05:40,010
power to do it needs to do in real time

00:05:38,030 --> 00:05:42,170
and then whatever is talking to that

00:05:40,010 --> 00:05:44,420
whatever controller computer can then be

00:05:42,170 --> 00:05:45,950
a non real-time operating system which

00:05:44,420 --> 00:05:49,850
oftentimes is you know happier

00:05:45,950 --> 00:05:51,830
friendlier programming environment so to

00:05:49,850 --> 00:05:53,390
summarize these kind of popular hardware

00:05:51,830 --> 00:05:56,270
classes I'll keep kind of referring back

00:05:53,390 --> 00:05:58,550
to these for throughout the talk we have

00:05:56,270 --> 00:06:01,130
kind of been the upper left the x86 land

00:05:58,550 --> 00:06:02,690
which is kind of rough says that really

00:06:01,130 --> 00:06:05,360
nicely right now with the binary package

00:06:02,690 --> 00:06:06,800
you can buy one of these mini ITX and

00:06:05,360 --> 00:06:09,260
other boards that come from any vendors

00:06:06,800 --> 00:06:10,700
you can just fill Debian or a boon to on

00:06:09,260 --> 00:06:13,160
there and start installing binary

00:06:10,700 --> 00:06:15,080
packages the PC 104 is been around

00:06:13,160 --> 00:06:16,970
forever and that seems to sort of never

00:06:15,080 --> 00:06:18,560
die they just kind of keep upgrading the

00:06:16,970 --> 00:06:20,780
processors but the form factor stays the

00:06:18,560 --> 00:06:24,680
same but it's the same thing it's just

00:06:20,780 --> 00:06:26,750
an x86 machine the arm a class now this

00:06:24,680 --> 00:06:28,590
is the gumstix beaglebone Raspberry Pi

00:06:26,750 --> 00:06:32,300
type machines is

00:06:28,590 --> 00:06:35,340
the smartphone the Android world that is

00:06:32,300 --> 00:06:37,470
you know extremely popular your ass

00:06:35,340 --> 00:06:40,290
berry pie i think is like 40 euro or

00:06:37,470 --> 00:06:41,580
something like that very cheap then

00:06:40,290 --> 00:06:43,830
coming down to the left you have these

00:06:41,580 --> 00:06:46,650
there's a whole bunch of these arm and

00:06:43,830 --> 00:06:48,960
microcontrollers there's the embed the

00:06:46,650 --> 00:06:50,970
stm32 discovery sort of everybody that

00:06:48,960 --> 00:06:54,180
has a chip fab seems to make an arm

00:06:50,970 --> 00:06:55,440
cortex-m microcontrollers you can

00:06:54,180 --> 00:06:56,880
interface to them very easily now

00:06:55,440 --> 00:06:59,520
there's all sorts of good open source

00:06:56,880 --> 00:07:01,140
tools that's one that that jtag adapter

00:06:59,520 --> 00:07:02,400
there that from all MX is kind of my

00:07:01,140 --> 00:07:05,580
personal favorite it's like fifty

00:07:02,400 --> 00:07:07,680
dollars and easy to to just connect to

00:07:05,580 --> 00:07:09,930
the whole open source tool chain and

00:07:07,680 --> 00:07:12,330
then front of the AVR world we have the

00:07:09,930 --> 00:07:13,740
the arduino there's i don't know maybe

00:07:12,330 --> 00:07:16,230
10 different kinds of are doing those

00:07:13,740 --> 00:07:18,830
and various sizes and shapes now there's

00:07:16,230 --> 00:07:21,660
also other popular and different size

00:07:18,830 --> 00:07:23,520
platforms with arduino oh sorry with a

00:07:21,660 --> 00:07:26,820
br that's a team sees another kind of

00:07:23,520 --> 00:07:28,110
fun one little to anything so we're

00:07:26,820 --> 00:07:30,150
talking about how we tie these things

00:07:28,110 --> 00:07:32,130
into roster their massive disparities

00:07:30,150 --> 00:07:33,600
there of computational power so there's

00:07:32,130 --> 00:07:35,760
kind of two extremes of how we're going

00:07:33,600 --> 00:07:38,400
to tie these systems the one i'll call a

00:07:35,760 --> 00:07:40,320
unified approach there is kind of like

00:07:38,400 --> 00:07:42,480
the ross java or like we do in with the

00:07:40,320 --> 00:07:44,700
android integration with ross where it's

00:07:42,480 --> 00:07:47,430
it's a first class member of the ross

00:07:44,700 --> 00:07:50,610
network it can negotiate with the master

00:07:47,430 --> 00:07:53,070
can add nodes on itself it can have more

00:07:50,610 --> 00:07:54,540
than one note on itself it can then you

00:07:53,070 --> 00:07:56,700
know connect it all of its peers just

00:07:54,540 --> 00:08:00,030
like anything would do on your LCVP on a

00:07:56,700 --> 00:08:01,950
main large-scale x86 computer then

00:08:00,030 --> 00:08:03,450
there's sort of this fuzzy layer in the

00:08:01,950 --> 00:08:04,530
middle of there's all sorts of different

00:08:03,450 --> 00:08:06,450
approaches in the middle which i'll talk

00:08:04,530 --> 00:08:08,250
about and then the other extreme is like

00:08:06,450 --> 00:08:10,500
we'll call it bridged for now which is

00:08:08,250 --> 00:08:12,570
you have a ross network on top all those

00:08:10,500 --> 00:08:14,310
little blue ross nodes sending messages

00:08:12,570 --> 00:08:15,680
back and forth and then there's kind of

00:08:14,310 --> 00:08:18,450
this gateway node which we call a

00:08:15,680 --> 00:08:19,860
gateway or a bridge which then

00:08:18,450 --> 00:08:22,170
translates all these messages into a

00:08:19,860 --> 00:08:25,260
different format perhaps one that's

00:08:22,170 --> 00:08:26,970
easier to parse or more conservative

00:08:25,260 --> 00:08:29,270
with bandwidth and then does

00:08:26,970 --> 00:08:32,580
point-to-point links out of there in two

00:08:29,270 --> 00:08:32,760
in this case those two arduino down

00:08:32,580 --> 00:08:36,030
there

00:08:32,760 --> 00:08:37,410
so there's a this is a spectrum and so

00:08:36,030 --> 00:08:40,290
we'll talk more about what's in between

00:08:37,410 --> 00:08:42,090
here so on the very top the unified we

00:08:40,290 --> 00:08:45,390
have kind of the prototypical Rossi

00:08:42,090 --> 00:08:47,790
Rossi PPE Ross Python Ross Java for

00:08:45,390 --> 00:08:50,550
Android and then as you as you come down

00:08:47,790 --> 00:08:51,990
we have the LC project which will hear

00:08:50,550 --> 00:08:54,020
talk from next about that the

00:08:51,990 --> 00:08:56,790
micrographs node or just heard from and

00:08:54,020 --> 00:08:58,350
then kind of now as we starts across the

00:08:56,790 --> 00:09:00,360
gap into where things become more bridge

00:08:58,350 --> 00:09:02,880
there's the ross bridge which is

00:09:00,360 --> 00:09:05,580
actually amazingly applicable to a whole

00:09:02,880 --> 00:09:07,200
whole range of things rough cereal which

00:09:05,580 --> 00:09:08,820
is more targeting the smaller end of

00:09:07,200 --> 00:09:11,750
things and then the custom bridges which

00:09:08,820 --> 00:09:14,100
which are commonly done to target

00:09:11,750 --> 00:09:17,250
proprietary or otherwise unusual setups

00:09:14,100 --> 00:09:18,780
there on the lower right so these arm

00:09:17,250 --> 00:09:20,630
cortex-m machines and again this is

00:09:18,780 --> 00:09:22,860
there like raspberry pi gumstix

00:09:20,630 --> 00:09:25,290
beaglebone smartphones dollop if they

00:09:22,860 --> 00:09:27,660
can run all of ross cross compiling them

00:09:25,290 --> 00:09:30,660
is it can be done it is not for the

00:09:27,660 --> 00:09:31,920
faint of heart but so would say you know

00:09:30,660 --> 00:09:35,760
if you're starting definitely start with

00:09:31,920 --> 00:09:37,590
the binary distributions on gumstix

00:09:35,760 --> 00:09:39,020
there there's the linaro thing that they

00:09:37,590 --> 00:09:41,730
actually officially support now

00:09:39,020 --> 00:09:43,500
Raspberry Pi the raspbian paul matthew

00:09:41,730 --> 00:09:46,350
at a seraph was working for a long time

00:09:43,500 --> 00:09:48,750
over the summer or his internship was to

00:09:46,350 --> 00:09:50,130
create these binary build firms for

00:09:48,750 --> 00:09:53,820
forearm which I think has made a lot of

00:09:50,130 --> 00:09:56,250
progress now the next step down we have

00:09:53,820 --> 00:09:57,330
the micrographs Taurasi this is for

00:09:56,250 --> 00:10:00,210
these arm cortex-m microcontrollers

00:09:57,330 --> 00:10:01,470
there's tons of these things and as we

00:10:00,210 --> 00:10:03,390
saw in the previous talk and I think

00:10:01,470 --> 00:10:04,740
we'll see on the next talk also it is

00:10:03,390 --> 00:10:07,140
difficult because there's not a lot of

00:10:04,740 --> 00:10:09,720
RAM these things almost always run just

00:10:07,140 --> 00:10:11,100
using on ship SRAM so you have a few

00:10:09,720 --> 00:10:12,930
tens of kilobytes if you're lucky maybe

00:10:11,100 --> 00:10:14,910
a hundred or two hundred kilobytes of a

00:10:12,930 --> 00:10:18,180
stir among them so you have to be clever

00:10:14,910 --> 00:10:19,380
and the as micrographs node and Rossi

00:10:18,180 --> 00:10:21,300
has done where you have these code

00:10:19,380 --> 00:10:22,350
generators so you say exactly what types

00:10:21,300 --> 00:10:24,600
of messages you're interested in

00:10:22,350 --> 00:10:26,490
receiving then they generate code which

00:10:24,600 --> 00:10:28,950
can then handle that in a very memory

00:10:26,490 --> 00:10:31,020
efficient and space efficiently and then

00:10:28,950 --> 00:10:32,910
I also the previous talk said some of

00:10:31,020 --> 00:10:35,850
these platforms can then chain to other

00:10:32,910 --> 00:10:37,910
microcontrollers either using Ethernet

00:10:35,850 --> 00:10:41,720
or other lighter weight or more

00:10:37,910 --> 00:10:42,860
mystic transports there so the thing

00:10:41,720 --> 00:10:44,390
that's exciting to me about this class

00:10:42,860 --> 00:10:45,830
of thing is just the price you can

00:10:44,390 --> 00:10:47,960
literally buy these chips for one dollar

00:10:45,830 --> 00:10:49,220
a piece and have a 32-bit machine you're

00:10:47,960 --> 00:10:52,730
running a hundred megahertz it's really

00:10:49,220 --> 00:10:55,850
quite amazing so another ross bridge

00:10:52,730 --> 00:10:57,890
we're talking here is a very interesting

00:10:55,850 --> 00:10:59,090
thing so you can we heard to talk about

00:10:57,890 --> 00:11:01,640
it this morning so I don't mean to

00:10:59,090 --> 00:11:04,250
somewhere is too much but essentially

00:11:01,640 --> 00:11:05,990
you can take it Ross messages flowing

00:11:04,250 --> 00:11:07,520
all around convert them into Jason and

00:11:05,990 --> 00:11:09,110
then blast them out over sokka's to

00:11:07,520 --> 00:11:10,490
wherever you want so this morning there

00:11:09,110 --> 00:11:12,020
was a lot of demonstrations using web

00:11:10,490 --> 00:11:13,820
browsers but also you could do that it's

00:11:12,020 --> 00:11:15,980
really anything that can can open a

00:11:13,820 --> 00:11:19,880
socket and transmitted across it which

00:11:15,980 --> 00:11:21,590
is just about anything so we can have

00:11:19,880 --> 00:11:23,300
the links there to the raw spreads that

00:11:21,590 --> 00:11:25,070
the topology kind of starts looking like

00:11:23,300 --> 00:11:26,720
where you have this kind of gateway

00:11:25,070 --> 00:11:28,640
which is then retransmitting out to all

00:11:26,720 --> 00:11:30,260
sorts of other things on the right side

00:11:28,640 --> 00:11:32,150
those orange bubbles there which can be

00:11:30,260 --> 00:11:34,430
microcontrollers they could be web

00:11:32,150 --> 00:11:36,170
browsers of our who knows what embedded

00:11:34,430 --> 00:11:39,020
may be embedded Linux or real-time

00:11:36,170 --> 00:11:39,980
systems running different your any

00:11:39,020 --> 00:11:42,950
things that don't have anything to do

00:11:39,980 --> 00:11:44,660
with Ross at all so Ralph serial is a

00:11:42,950 --> 00:11:46,730
similar concept that apology is looks

00:11:44,660 --> 00:11:48,440
the same except now instead of doing the

00:11:46,730 --> 00:11:51,110
socket were then slimming it down even

00:11:48,440 --> 00:11:53,140
closer to a serial string so you can

00:11:51,110 --> 00:11:55,580
then just blast it out at you art or

00:11:53,140 --> 00:11:58,460
some sort of a serialized radio

00:11:55,580 --> 00:12:00,170
packetized radio system like an XP their

00:11:58,460 --> 00:12:04,220
reports available there on the website

00:12:00,170 --> 00:12:06,710
for arduino sort of it's a massively

00:12:04,220 --> 00:12:08,270
popular setup bernal and the generic

00:12:06,710 --> 00:12:10,100
embedded linux that Paul Boucher has

00:12:08,270 --> 00:12:12,530
contributed so that it can talk with any

00:12:10,100 --> 00:12:15,560
kind of embedded system again that

00:12:12,530 --> 00:12:18,410
doesn't have anything to do with roms so

00:12:15,560 --> 00:12:20,270
custom bridges this is kind of I think

00:12:18,410 --> 00:12:21,620
probably the most common in terms of

00:12:20,270 --> 00:12:23,570
just day to day you have a robot you

00:12:21,620 --> 00:12:25,790
want to use it because all these widgets

00:12:23,570 --> 00:12:27,260
that we buy that are coming shiny boxes

00:12:25,790 --> 00:12:29,030
they're implementing firmware but

00:12:27,260 --> 00:12:30,380
usually we can't touch which means that

00:12:29,030 --> 00:12:32,990
over on the raw side we now need to

00:12:30,380 --> 00:12:34,670
write a device driver to interpret

00:12:32,990 --> 00:12:36,560
whatever their firmware proprietary

00:12:34,670 --> 00:12:39,020
protocol is out into something that Ross

00:12:36,560 --> 00:12:41,540
can recognize and use so for example the

00:12:39,020 --> 00:12:43,850
hooker laser drivers and then you know

00:12:41,540 --> 00:12:45,890
million other things anything you buy

00:12:43,850 --> 00:12:47,750
pretty much someone has to write a

00:12:45,890 --> 00:12:48,579
translator that will talk to that from

00:12:47,750 --> 00:12:50,679
her

00:12:48,579 --> 00:12:52,239
crazy diagram on the bottom is for The

00:12:50,679 --> 00:12:53,679
Scindia hand which is a project that I'm

00:12:52,239 --> 00:12:55,449
working on right now this fully open

00:12:53,679 --> 00:12:58,089
source all the firmware software

00:12:55,449 --> 00:13:00,189
everything you can download there at

00:12:58,089 --> 00:13:01,600
that link but essentially I have a bunch

00:13:00,189 --> 00:13:03,339
of custom firmware down the bottom there

00:13:01,600 --> 00:13:05,439
to talk make this microcontroller

00:13:03,339 --> 00:13:07,179
network I'll talk to each other there's

00:13:05,439 --> 00:13:09,279
an FPGA that kind of unifies everything

00:13:07,179 --> 00:13:11,110
into a Gigabit Ethernet UDP stream and

00:13:09,279 --> 00:13:12,850
then blast it up to a host which then

00:13:11,110 --> 00:13:14,589
kind of cracks that apart and

00:13:12,850 --> 00:13:18,699
retransmits everything out as your ass

00:13:14,589 --> 00:13:19,989
messages as part of doing that projects

00:13:18,699 --> 00:13:21,879
I've made a bunch of scripts these may

00:13:19,989 --> 00:13:24,399
or may not be useful to people they're

00:13:21,879 --> 00:13:25,660
all really kind of well they have plenty

00:13:24,399 --> 00:13:28,149
of issues but I just thought I'd put

00:13:25,660 --> 00:13:29,850
them out there on the web anyway this is

00:13:28,149 --> 00:13:32,529
the tool chain that I've used usually

00:13:29,850 --> 00:13:35,019
gdb through an open source program

00:13:32,529 --> 00:13:38,529
called open OCD which can tie some

00:13:35,019 --> 00:13:40,839
low-cost jtag adapters back to linux and

00:13:38,529 --> 00:13:42,610
now down to your embedded target and so

00:13:40,839 --> 00:13:43,989
then you get a GDB server and you can do

00:13:42,610 --> 00:13:46,720
stepping and watching them break points

00:13:43,989 --> 00:13:49,540
and all that kind of fun stuff these

00:13:46,720 --> 00:13:51,819
that that project there I have scripts

00:13:49,540 --> 00:13:53,410
that will essentially you just type make

00:13:51,819 --> 00:13:55,720
in the firmware directory and it will

00:13:53,410 --> 00:13:59,079
download a particular kind of a pegged

00:13:55,720 --> 00:14:01,749
version of arm GCC download and build up

00:13:59,079 --> 00:14:03,699
open OCD and then it gives you rules for

00:14:01,749 --> 00:14:05,949
cross compiling for creating the boot

00:14:03,699 --> 00:14:07,179
loaders them various things I've done so

00:14:05,949 --> 00:14:08,799
I didn't have a demo I didn't bring a

00:14:07,179 --> 00:14:10,239
hardware unfortunately but this is the

00:14:08,799 --> 00:14:11,319
extent of my demo today so you'll see

00:14:10,239 --> 00:14:13,149
that it's actually across compelling

00:14:11,319 --> 00:14:14,589
known as kind of fun I had to have some

00:14:13,149 --> 00:14:15,759
sort of a demo of some reason you know

00:14:14,589 --> 00:14:17,739
that something could break to make it

00:14:15,759 --> 00:14:18,879
exciting but looks like it's going there

00:14:17,739 --> 00:14:20,139
so what it's doing now is building a

00:14:18,879 --> 00:14:23,230
bunch of libraries yourself for arm

00:14:20,139 --> 00:14:24,459
cortex m3 stuff building a bunch of boot

00:14:23,230 --> 00:14:26,829
loaders for all the different parts of

00:14:24,459 --> 00:14:28,749
the system so anyway you can feel free

00:14:26,829 --> 00:14:30,100
to grab that stuff if you want to make

00:14:28,749 --> 00:14:31,509
that more generic if it actually turns

00:14:30,100 --> 00:14:33,759
out to be useful we can definitely try

00:14:31,509 --> 00:14:36,999
to make that more general to other

00:14:33,759 --> 00:14:38,799
projects the CHS of the time I think

00:14:36,999 --> 00:14:41,410
I'll mention is a little bit we also

00:14:38,799 --> 00:14:44,049
have for this this open-source hand

00:14:41,410 --> 00:14:46,119
projects we have there's a Gigabit

00:14:44,049 --> 00:14:48,249
Ethernet physical layer that's in the

00:14:46,119 --> 00:14:49,869
bottom of the hand and so I've done some

00:14:48,249 --> 00:14:51,150
work with some other friends to create a

00:14:49,869 --> 00:14:53,520
simulation environment for that

00:14:51,150 --> 00:14:55,170
so that we would do everything from the

00:14:53,520 --> 00:14:57,390
Kremlin on Linux the simulator is Icarus

00:14:55,170 --> 00:14:58,890
Verilog which is a GPL Verilog simulator

00:14:57,390 --> 00:15:02,730
maybe some of you have have used it it's

00:14:58,890 --> 00:15:04,470
a great tool and then we've adapted it

00:15:02,730 --> 00:15:06,180
so that there is a kind of an extra shim

00:15:04,470 --> 00:15:07,890
we can put in there so that the ethernet

00:15:06,180 --> 00:15:09,960
in the simulation will actually bubble

00:15:07,890 --> 00:15:11,810
out as a virtual device to the Linux

00:15:09,960 --> 00:15:14,370
kernel so you can then debug your driver

00:15:11,810 --> 00:15:16,350
all through simulation which is kind of

00:15:14,370 --> 00:15:17,550
fun but it might be useful to some if it

00:15:16,350 --> 00:15:20,340
is that please let me know we can make

00:15:17,550 --> 00:15:22,680
it more generic so just to acknowledge

00:15:20,340 --> 00:15:24,060
this is all stuff that is available out

00:15:22,680 --> 00:15:27,210
there we've discussed many this and the

00:15:24,060 --> 00:15:29,520
raw cigam bedded user group on google

00:15:27,210 --> 00:15:30,630
groups and this is also come some of

00:15:29,520 --> 00:15:32,220
that out of the Rosberg products

00:15:30,630 --> 00:15:34,080
workshop there's as you conceive just

00:15:32,220 --> 00:15:36,300
one kind of this survey survey of the

00:15:34,080 --> 00:15:38,010
scene here there's a ton of stuff going

00:15:36,300 --> 00:15:39,450
on with the embedded world at all

00:15:38,010 --> 00:15:40,980
different levels in better world is huge

00:15:39,450 --> 00:15:42,600
and there's there's interesting things

00:15:40,980 --> 00:15:44,880
happening in all levels there's a lot of

00:15:42,600 --> 00:15:46,800
interest in creating an ncc library that

00:15:44,880 --> 00:15:48,150
will be bare metal as well as are tossed

00:15:46,800 --> 00:15:50,490
so that's just kind of a Segway for the

00:15:48,150 --> 00:15:52,910
next talk about Rossi here so thank you

00:15:50,490 --> 00:15:52,910

YouTube URL: https://www.youtube.com/watch?v=x8wVWp6j_8I


