Title: RosCon2013 Track1 Day1 10 Brian Julian   Project AUTOMATE
Publication date: 2014-09-02
Playlist: ROSCon 2013
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2013 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,000 --> 00:00:06,150
Lincoln labs called Project automate I

00:00:03,000 --> 00:00:09,420
was lucky enough to lead the winning

00:00:06,150 --> 00:00:11,820
team alongside Nick Armstrong crews who

00:00:09,420 --> 00:00:13,769
couldn't be here today but special

00:00:11,820 --> 00:00:16,289
recognition goes to michael carroll

00:00:13,769 --> 00:00:19,380
who's probably one of the most active on

00:00:16,289 --> 00:00:21,449
the ross forums but he essentially was

00:00:19,380 --> 00:00:24,570
critical in making the system actually

00:00:21,449 --> 00:00:26,970
work at the end so again I would have to

00:00:24,570 --> 00:00:32,309
you know I wish he was here to to enjoy

00:00:26,970 --> 00:00:34,770
all the fruits of his labor but but what

00:00:32,309 --> 00:00:37,200
I want to try to do is give sort of a

00:00:34,770 --> 00:00:40,500
system level overview of what we

00:00:37,200 --> 00:00:42,840
constructed to solve this challenge and

00:00:40,500 --> 00:00:46,200
to all be sort of disseminating ideas

00:00:42,840 --> 00:00:48,690
and lessons learned that hopefully can

00:00:46,200 --> 00:00:51,690
assist others in the development

00:00:48,690 --> 00:00:54,180
deployment and just you know just sort

00:00:51,690 --> 00:00:55,649
of the the fun of building a multi-agent

00:00:54,180 --> 00:00:58,530
system to handle very very complex

00:00:55,649 --> 00:01:00,690
problems but i'll start with the details

00:00:58,530 --> 00:01:04,680
of the actual challenge so a project

00:01:00,690 --> 00:01:07,619
automate concentrated on this you GV UAV

00:01:04,680 --> 00:01:09,840
collaborative system that described up

00:01:07,619 --> 00:01:11,850
here will traverse a maze-like course

00:01:09,840 --> 00:01:14,850
while avoiding obstacles and executing

00:01:11,850 --> 00:01:16,080
specific tasks when we got this internal

00:01:14,850 --> 00:01:17,490
that's that's all the information they

00:01:16,080 --> 00:01:19,920
gave us they wanted this to be very

00:01:17,490 --> 00:01:22,110
open-ended we had to submit proposals

00:01:19,920 --> 00:01:25,560
three teams were selected to compete in

00:01:22,110 --> 00:01:26,880
a six-month challenge so from you know

00:01:25,560 --> 00:01:28,290
from the time they say okay you can

00:01:26,880 --> 00:01:30,509
start work on this to the time we had to

00:01:28,290 --> 00:01:32,159
deploy our system it was in the course

00:01:30,509 --> 00:01:34,110
of six months and very very time

00:01:32,159 --> 00:01:38,070
constraint but it was a lot of fun and

00:01:34,110 --> 00:01:40,890
it was to not only induce collaboration

00:01:38,070 --> 00:01:42,570
at Lincoln but sort of get some robotics

00:01:40,890 --> 00:01:44,340
technology working through the system

00:01:42,570 --> 00:01:47,790
because robotics is in a traditional

00:01:44,340 --> 00:01:50,399
dish mission area for Lincoln and so

00:01:47,790 --> 00:01:51,649
when the challenge rules came out they

00:01:50,399 --> 00:01:53,970
were actually quite quite

00:01:51,649 --> 00:01:55,979
straightforward so we had this maze that

00:01:53,970 --> 00:01:59,369
was going to be constructed you can

00:01:55,979 --> 00:02:01,740
think of this as two tennis courts side

00:01:59,369 --> 00:02:03,780
by side and so there's a start and

00:02:01,740 --> 00:02:05,430
finish to the maze so we would deploy

00:02:03,780 --> 00:02:07,560
the robots from here they would have to

00:02:05,430 --> 00:02:09,780
find the end goal and you'd get 100

00:02:07,560 --> 00:02:11,790
points for that we had bonus markers

00:02:09,780 --> 00:02:13,740
where two out of three possible markers

00:02:11,790 --> 00:02:16,320
would appear and so if this

00:02:13,740 --> 00:02:18,450
but found those you would get was a 20

00:02:16,320 --> 00:02:19,980
points and then if you traverse three of

00:02:18,450 --> 00:02:22,410
the hazards three out of these possible

00:02:19,980 --> 00:02:23,850
for hazards you would lose 25 points

00:02:22,410 --> 00:02:25,740
okay so this was an optimization problem

00:02:23,850 --> 00:02:29,340
and it was good because we actually had

00:02:25,740 --> 00:02:31,740
to find defined values to program into

00:02:29,340 --> 00:02:33,720
our system so we felt that the planning

00:02:31,740 --> 00:02:35,280
portion of this could be relatively

00:02:33,720 --> 00:02:36,840
straightforward if we could get sort of

00:02:35,280 --> 00:02:39,660
the rest of the autonomy to work which

00:02:36,840 --> 00:02:41,970
is a very very difficult task this

00:02:39,660 --> 00:02:44,310
challenge was also not time-based it was

00:02:41,970 --> 00:02:46,380
actually distance traveled based so

00:02:44,310 --> 00:02:48,270
every cell that the robot traversed so a

00:02:46,380 --> 00:02:50,940
cell would be maybe a five I think it

00:02:48,270 --> 00:02:53,280
was five foot by five foot BOTS you

00:02:50,940 --> 00:02:54,870
would lose a point and so this was

00:02:53,280 --> 00:02:57,330
actually split up into two main rounds

00:02:54,870 --> 00:02:59,550
so the first one you had you could

00:02:57,330 --> 00:03:01,740
deploy your UAV or UAVs you can use

00:02:59,550 --> 00:03:03,780
multiple robots and then you have 15

00:03:01,740 --> 00:03:06,540
minutes where humans could intervene as

00:03:03,780 --> 00:03:08,340
you know when the UAVs came back before

00:03:06,540 --> 00:03:10,680
deploying the UTV's which actually solve

00:03:08,340 --> 00:03:13,860
the maze the second round consisted of

00:03:10,680 --> 00:03:16,890
the UAV UGV pair or however many robots

00:03:13,860 --> 00:03:19,080
you need to deploy but no human milliman

00:03:16,890 --> 00:03:20,790
involvement and you were limited to

00:03:19,080 --> 00:03:22,500
about 60 and 90 minutes per round

00:03:20,790 --> 00:03:25,200
otherwise you would get a cost of

00:03:22,500 --> 00:03:28,200
infinity so that's back we tried to

00:03:25,200 --> 00:03:29,460
avoid that okay so the key systems

00:03:28,200 --> 00:03:32,010
design so I'm here to talk about the

00:03:29,460 --> 00:03:34,740
specifics of the system that we deployed

00:03:32,010 --> 00:03:37,680
it was enabled by Ross it was enabled by

00:03:34,740 --> 00:03:39,660
all the contributions over the years by

00:03:37,680 --> 00:03:40,800
the open source community and we

00:03:39,660 --> 00:03:42,570
certainly would have been able to do

00:03:40,800 --> 00:03:44,820
this without that so this is you know I

00:03:42,570 --> 00:03:46,890
in recognition of all of everyone's hard

00:03:44,820 --> 00:03:49,080
work at the at this conference and

00:03:46,890 --> 00:03:52,500
around the world but those four key

00:03:49,080 --> 00:03:55,140
points that we sort of wrote down and

00:03:52,500 --> 00:03:57,060
followed and and really helped us along

00:03:55,140 --> 00:03:58,710
to really solve this challenge so the

00:03:57,060 --> 00:04:00,960
first one is the system that we designed

00:03:58,710 --> 00:04:03,600
was modular and scalable so we used Ross

00:04:00,960 --> 00:04:05,610
but we use multiple robots basically in

00:04:03,600 --> 00:04:07,380
a multi master configuration so there's

00:04:05,610 --> 00:04:09,720
been talk about multi master there's

00:04:07,380 --> 00:04:12,780
been a lot of work we even tried the FK

00:04:09,720 --> 00:04:15,360
ie implementation of multi master we

00:04:12,780 --> 00:04:17,880
ended up designing our own but using a

00:04:15,360 --> 00:04:20,010
lot of sort of the tricks of the trade

00:04:17,880 --> 00:04:22,560
that have been talked about over the

00:04:20,010 --> 00:04:24,630
years in the Ross community and

00:04:22,560 --> 00:04:26,560
essentially that allowed us to have

00:04:24,630 --> 00:04:29,050
these independent systems that we could

00:04:26,560 --> 00:04:31,300
mesh together in our and basically our

00:04:29,050 --> 00:04:32,860
own protocol but as far as the

00:04:31,300 --> 00:04:34,540
development of all the autonomy that

00:04:32,860 --> 00:04:36,460
happened within the Ross framework and

00:04:34,540 --> 00:04:38,110
that was very important when you have

00:04:36,460 --> 00:04:40,120
such a complicated system and you have

00:04:38,110 --> 00:04:41,680
really a complicated task so this sounds

00:04:40,120 --> 00:04:45,100
very straightforward but it turned out

00:04:41,680 --> 00:04:47,139
to be a huge challenge simple failsafe

00:04:45,100 --> 00:04:48,400
behaviors always work the best so we

00:04:47,139 --> 00:04:49,960
started with this dream and we're going

00:04:48,400 --> 00:04:51,490
to have robots that you know cook

00:04:49,960 --> 00:04:54,580
breakfast as they're going to solve the

00:04:51,490 --> 00:04:56,500
maze and really in the end we had very

00:04:54,580 --> 00:04:57,940
straightforward rules being very

00:04:56,500 --> 00:04:59,620
confident that we weren't going to run

00:04:57,940 --> 00:05:01,630
into any deadlox do too you know

00:04:59,620 --> 00:05:04,030
multi-agent interaction but also

00:05:01,630 --> 00:05:06,010
predetermined time outs were critical so

00:05:04,030 --> 00:05:08,950
for instance running the race the robot

00:05:06,010 --> 00:05:10,900
wouldn't wait for an infinite time for

00:05:08,950 --> 00:05:12,700
you know for the baton to be passive the

00:05:10,900 --> 00:05:14,740
padam obviously wasn't going to get

00:05:12,700 --> 00:05:17,050
there so that was that was very helpful

00:05:14,740 --> 00:05:19,780
we also develop these state machines

00:05:17,050 --> 00:05:21,160
using smash basically the smash

00:05:19,780 --> 00:05:23,260
architecture we didn't use smash

00:05:21,160 --> 00:05:25,000
implementation because we wrote in C++

00:05:23,260 --> 00:05:27,910
but the viewers and all the utilities

00:05:25,000 --> 00:05:30,040
for that word were essential this is not

00:05:27,910 --> 00:05:32,410
very novel right now because of the DRC

00:05:30,040 --> 00:05:34,630
but we use gazebo and we used in a

00:05:32,410 --> 00:05:36,100
distributed faster fashion such that we

00:05:34,630 --> 00:05:38,340
could use the hardware that was going to

00:05:36,100 --> 00:05:41,470
act as the brains of the actual robots

00:05:38,340 --> 00:05:43,600
in for instance a room network together

00:05:41,470 --> 00:05:46,120
took his evo over very very fast

00:05:43,600 --> 00:05:47,650
ethernet lines but the robot brains

00:05:46,120 --> 00:05:49,120
would communicate using the wireless

00:05:47,650 --> 00:05:50,890
architecture that we used on the

00:05:49,120 --> 00:05:52,510
deployed system so we got to test

00:05:50,890 --> 00:05:55,570
everything out even before we touch the

00:05:52,510 --> 00:05:57,280
hardware which was great and then sort

00:05:55,570 --> 00:05:59,910
of we're very good at Lincoln that sort

00:05:57,280 --> 00:06:02,830
of mission you know plans and

00:05:59,910 --> 00:06:04,900
strategizing CONOPS and so exploiting a

00:06:02,830 --> 00:06:07,660
priori knowledge of what was given to us

00:06:04,900 --> 00:06:09,669
was was essential in the eventual

00:06:07,660 --> 00:06:12,010
approach we did for our system so that's

00:06:09,669 --> 00:06:15,250
sort of the four key system design

00:06:12,010 --> 00:06:16,450
points that I want to sort of introduced

00:06:15,250 --> 00:06:17,500
in the beginning and then now I'm

00:06:16,450 --> 00:06:20,710
actually going to get into the meat of

00:06:17,500 --> 00:06:22,539
our technology so a quick quick plug for

00:06:20,710 --> 00:06:25,030
my friends at ascending technology so we

00:06:22,539 --> 00:06:27,280
use the Pelican platform and you can put

00:06:25,030 --> 00:06:29,470
a lot of stuff on a pelican so we ended

00:06:27,280 --> 00:06:31,720
up taking this and we put a 30 meter

00:06:29,470 --> 00:06:34,180
lidar inverted in fact I'm surprised

00:06:31,720 --> 00:06:36,070
that is this isn't used more often than

00:06:34,180 --> 00:06:38,409
it is but we put it basically upside

00:06:36,070 --> 00:06:40,300
down under the base and had

00:06:38,409 --> 00:06:44,110
to reflective mirrors such that we got

00:06:40,300 --> 00:06:46,119
height estimations as well as 30 metre

00:06:44,110 --> 00:06:52,619
out horizontal scans which I'll

00:06:46,119 --> 00:06:55,809
discussing a little bit we had a d.a

00:06:52,619 --> 00:06:57,279
disassembled fit PC as our main brains

00:06:55,809 --> 00:06:59,319
for the Pelican however a lot of the

00:06:57,279 --> 00:07:01,719
controls worked outside of the level

00:06:59,319 --> 00:07:04,360
controls worked outside of ross on board

00:07:01,719 --> 00:07:06,339
this 32-bit microcontroller which comes

00:07:04,360 --> 00:07:09,069
on their autopilot port we had a

00:07:06,339 --> 00:07:11,559
forward-facing connect type sensor was

00:07:09,069 --> 00:07:13,659
actually an asus XD on and the custom

00:07:11,559 --> 00:07:15,519
calm board and this sort of made up our

00:07:13,659 --> 00:07:17,439
UAV design we had two of these and i'll

00:07:15,519 --> 00:07:20,110
show you what we were able to do that in

00:07:17,439 --> 00:07:22,689
a little bit for our UTV we actually

00:07:20,110 --> 00:07:25,149
developed our own multi or

00:07:22,689 --> 00:07:26,769
omnidirectional platform and in fact if

00:07:25,149 --> 00:07:28,509
you take off a lot of the stuff up top

00:07:26,769 --> 00:07:30,489
the first thing we wanted to do is just

00:07:28,509 --> 00:07:32,409
create an omnidirectional breadboard

00:07:30,489 --> 00:07:34,269
optical breadboard and so you just built

00:07:32,409 --> 00:07:36,069
everything on top of that depending on

00:07:34,269 --> 00:07:38,199
what for instance computation you need

00:07:36,069 --> 00:07:40,959
so we could just stack laptops here we

00:07:38,199 --> 00:07:42,939
put a android phone in the front we put

00:07:40,959 --> 00:07:46,240
a touch sensors custom-made around the

00:07:42,939 --> 00:07:50,169
perimeter up here we had a gimbal with a

00:07:46,240 --> 00:07:51,759
xt on and a android for sensing and

00:07:50,169 --> 00:07:53,979
integrating into the cost map for our

00:07:51,759 --> 00:07:57,099
planners we had access points from

00:07:53,979 --> 00:07:58,719
ubiquity which worked very very well and

00:07:57,099 --> 00:08:00,669
in fact we built this platform very

00:07:58,719 --> 00:08:02,319
early on even before we got specifics of

00:08:00,669 --> 00:08:04,509
the challenge because we want to do

00:08:02,319 --> 00:08:06,369
reconnaissance so we were actually had

00:08:04,509 --> 00:08:09,249
access to the tennis bubble where this

00:08:06,369 --> 00:08:10,509
challenge was going to be to be run so

00:08:09,249 --> 00:08:12,159
they said you can do anything you want

00:08:10,509 --> 00:08:14,079
in the in the tennis bubble just don't

00:08:12,159 --> 00:08:16,389
damage it so we took our ground robot

00:08:14,079 --> 00:08:18,489
and we actually took two like ours one

00:08:16,389 --> 00:08:20,110
horizontal one vertical and you can see

00:08:18,489 --> 00:08:22,179
that you can create very very detailed

00:08:20,110 --> 00:08:24,759
three-dimensional point clouds just by

00:08:22,179 --> 00:08:27,159
running slam on the horizontal lidar and

00:08:24,759 --> 00:08:28,869
then you get very nice structure of this

00:08:27,159 --> 00:08:31,779
of this tennis bubble of this challenge

00:08:28,869 --> 00:08:33,969
area you can see the the nets for the

00:08:31,779 --> 00:08:35,289
two tennis courts here if you zoom in

00:08:33,969 --> 00:08:37,329
there's a lot of features which will

00:08:35,289 --> 00:08:39,399
come into play during the challenge when

00:08:37,329 --> 00:08:40,959
we need to solve the maze including you

00:08:39,399 --> 00:08:43,180
can start seeing up there these light

00:08:40,959 --> 00:08:45,250
fixtures ok which quads don't really

00:08:43,180 --> 00:08:47,259
like light fixtures and a lot of the

00:08:45,250 --> 00:08:48,559
other details on the side and me sort of

00:08:47,259 --> 00:08:51,240
stopping the robot

00:08:48,559 --> 00:08:53,100
for the data collect so we instantly

00:08:51,240 --> 00:08:55,709
through this in gazebo because we wanted

00:08:53,100 --> 00:08:57,209
to upfront be able to simulate sort of

00:08:55,709 --> 00:08:59,279
our system again using the hardware

00:08:57,209 --> 00:09:01,470
that's going to be used on the final

00:08:59,279 --> 00:09:03,209
robot and also sort of conjure up our

00:09:01,470 --> 00:09:06,720
dream maze of what this might look like

00:09:03,209 --> 00:09:08,100
so this wasn't given to us up front and

00:09:06,720 --> 00:09:09,809
so we said okay what's the worst-case

00:09:08,100 --> 00:09:11,490
scenario of the maze that they can give

00:09:09,809 --> 00:09:14,129
us we also put the important features

00:09:11,490 --> 00:09:17,009
that would affect motion planning and

00:09:14,129 --> 00:09:19,439
possibly localization tasks okay inside

00:09:17,009 --> 00:09:21,569
the gazebo model so this was a very

00:09:19,439 --> 00:09:24,089
intensive process up front but it paid

00:09:21,569 --> 00:09:27,420
off you know over and over again

00:09:24,089 --> 00:09:29,850
throughout our design phase to get into

00:09:27,420 --> 00:09:31,199
the baseline hope conops of what we what

00:09:29,850 --> 00:09:34,410
we did i'm just going to concentrate on

00:09:31,199 --> 00:09:37,230
one aerial vehicle and to ground robots

00:09:34,410 --> 00:09:40,649
so the idea would be is even for both

00:09:37,230 --> 00:09:42,360
rounds we would deploy the UAV in sort

00:09:40,649 --> 00:09:44,249
of a lawnmower fashion to try to get

00:09:42,360 --> 00:09:46,230
some reconnaissance from the stuff from

00:09:44,249 --> 00:09:48,329
the sky okay we wanted to do some sort

00:09:46,230 --> 00:09:50,100
of mapping such that we could give a

00:09:48,329 --> 00:09:51,869
prior to the ground robots which would

00:09:50,100 --> 00:09:53,939
eventually do exploration what we call

00:09:51,869 --> 00:09:56,249
exploitation or try to solve the maze as

00:09:53,939 --> 00:09:59,459
optimally as possible so after the

00:09:56,249 --> 00:10:01,799
lawnmower phase the UAV would land we

00:09:59,459 --> 00:10:03,449
only had about a 10-minute window to

00:10:01,799 --> 00:10:06,119
collect data due to the battery

00:10:03,449 --> 00:10:08,069
limitations and then the first UGV that

00:10:06,119 --> 00:10:10,319
went out started from the start would

00:10:08,069 --> 00:10:11,699
then go and explore the maze possibly in

00:10:10,319 --> 00:10:13,470
the areas where a lot of this

00:10:11,699 --> 00:10:16,170
information wasn't picked up from the

00:10:13,470 --> 00:10:18,869
UAV okay so this is the exploration

00:10:16,170 --> 00:10:20,999
phase but the idea is once it's done

00:10:18,869 --> 00:10:24,059
exploring it's not going to try to solve

00:10:20,999 --> 00:10:26,369
the maze so where I stopped it the

00:10:24,059 --> 00:10:28,980
explorer robot actually sits right next

00:10:26,369 --> 00:10:30,269
to the end goal and so the idea was if

00:10:28,980 --> 00:10:32,189
you didn't declare that you solve the

00:10:30,269 --> 00:10:35,100
maze with one of your robots the second

00:10:32,189 --> 00:10:37,499
robot can go be penalized and be

00:10:35,100 --> 00:10:39,809
rewarded for the markers and for the

00:10:37,499 --> 00:10:42,149
cells that it traverses and then solve

00:10:39,809 --> 00:10:44,339
the maze and you could you know accrue a

00:10:42,149 --> 00:10:46,740
very very high cost for your first UGV

00:10:44,339 --> 00:10:48,149
and so this was this was sort of the

00:10:46,740 --> 00:10:50,699
technique that we did we called it

00:10:48,149 --> 00:10:53,399
explore exploration and exploitation and

00:10:50,699 --> 00:10:55,410
so again given the locations of these

00:10:53,399 --> 00:10:57,749
markers it would try to traverse get the

00:10:55,410 --> 00:11:00,700
bonuses avoid the hazards and then solve

00:10:57,749 --> 00:11:02,440
mates ok so now getting into more

00:11:00,700 --> 00:11:06,340
technical details of how we accomplish

00:11:02,440 --> 00:11:07,840
this we really see the the sort of how

00:11:06,340 --> 00:11:10,300
we relied on everything that was

00:11:07,840 --> 00:11:12,250
available during in the Ross community

00:11:10,300 --> 00:11:14,050
so by the way we use raw suerte because

00:11:12,250 --> 00:11:16,330
this challenge was held last year when

00:11:14,050 --> 00:11:19,380
groovy was released and so we we stuck

00:11:16,330 --> 00:11:22,420
with fuerte for our slam algorithm we

00:11:19,380 --> 00:11:24,010
incorporated both G mapping and cart 0

00:11:22,420 --> 00:11:25,870
and in fact didn't select which slam

00:11:24,010 --> 00:11:29,110
algorithm we would use until the day of

00:11:25,870 --> 00:11:30,850
the challenge and I'll get into why why

00:11:29,110 --> 00:11:32,290
that was the case in the second you can

00:11:30,850 --> 00:11:34,390
see obviously we implemented the

00:11:32,290 --> 00:11:36,220
navigation stack we actually use the

00:11:34,390 --> 00:11:37,510
Boche exploration package and tweaked it

00:11:36,220 --> 00:11:39,340
a little bit but that worked very well

00:11:37,510 --> 00:11:41,440
for us and so we did this was a

00:11:39,340 --> 00:11:43,630
basically a slam problem especially for

00:11:41,440 --> 00:11:45,430
the exploration phase for mercury

00:11:43,630 --> 00:11:48,400
identification we used a lot of the

00:11:45,430 --> 00:11:49,870
opencv utilities and in fact when I said

00:11:48,400 --> 00:11:52,530
you know trying to keep the system as

00:11:49,870 --> 00:11:55,150
simple as possible this was so critical

00:11:52,530 --> 00:11:57,310
especially for marker detection so very

00:11:55,150 --> 00:11:59,530
simple color segmentation edge detection

00:11:57,310 --> 00:12:01,480
clustering compact hall match color

00:11:59,530 --> 00:12:03,160
histogram based upon the library that

00:12:01,480 --> 00:12:05,980
were given up front this was this was

00:12:03,160 --> 00:12:08,860
known to us we were able to identify the

00:12:05,980 --> 00:12:10,360
the markers pretty well the thing that

00:12:08,860 --> 00:12:12,220
was a little bit difficult is they

00:12:10,360 --> 00:12:14,620
decided to make the challenge area so

00:12:12,220 --> 00:12:17,380
this is a an image from the aerial

00:12:14,620 --> 00:12:19,240
vehicle they put down mats of blue color

00:12:17,380 --> 00:12:22,240
and so that sort of made sort of this

00:12:19,240 --> 00:12:25,600
color detection a little bit tricky but

00:12:22,240 --> 00:12:27,850
but we were able to pull it off and so

00:12:25,600 --> 00:12:30,490
this is what actually looks like working

00:12:27,850 --> 00:12:31,990
on the ground robot okay so once it

00:12:30,490 --> 00:12:33,910
identifies a marker we're going to have

00:12:31,990 --> 00:12:37,480
to incorporate this somehow into costs

00:12:33,910 --> 00:12:38,770
map in fact we use cost map Judy so we

00:12:37,480 --> 00:12:40,570
have these markers that are the

00:12:38,770 --> 00:12:42,610
locations of let's say a reward and a

00:12:40,570 --> 00:12:44,560
and hazard and then this would be

00:12:42,610 --> 00:12:47,710
incorporated with the slam you know the

00:12:44,560 --> 00:12:50,260
output of the slam map okay to basically

00:12:47,710 --> 00:12:52,840
input into the cost map do a dynamic

00:12:50,260 --> 00:12:55,720
program task to find the optimal path

00:12:52,840 --> 00:12:58,240
now in fuerte we it actually took us a

00:12:55,720 --> 00:12:59,950
lot of time to incorporate sort of these

00:12:58,240 --> 00:13:02,860
penalties and these costs in this

00:12:59,950 --> 00:13:05,290
framework using cost map 2d wasn't as

00:13:02,860 --> 00:13:07,990
general as we were hoping we were able

00:13:05,290 --> 00:13:10,000
to sort of tweak it a little bit such

00:13:07,990 --> 00:13:11,050
that we got the behavior as expected so

00:13:10,000 --> 00:13:12,790
I don't know if we're actually solving

00:13:11,050 --> 00:13:13,649
the exact optimal problem we're solving

00:13:12,790 --> 00:13:16,050
something

00:13:13,649 --> 00:13:18,749
close and as you can see the path that's

00:13:16,050 --> 00:13:20,459
generated goes through what it considers

00:13:18,749 --> 00:13:23,009
the bonuses and tries to avoid the

00:13:20,459 --> 00:13:25,290
hazards and in fact here we're not doing

00:13:23,009 --> 00:13:26,999
slam we're actually taking a map that

00:13:25,290 --> 00:13:28,649
was let's say built by the Explorer

00:13:26,999 --> 00:13:31,019
robot so this would be the second robot

00:13:28,649 --> 00:13:34,529
going the exploding exploited robot and

00:13:31,019 --> 00:13:37,350
in fact we're using mcl to localize as

00:13:34,529 --> 00:13:39,119
we go along okay so that's sort of just

00:13:37,350 --> 00:13:42,660
the lead into what we were expecting to

00:13:39,119 --> 00:13:45,029
do and so come game day we take a look

00:13:42,660 --> 00:13:47,639
at the maze and all of you should

00:13:45,029 --> 00:13:50,339
recognize something very clearly up

00:13:47,639 --> 00:13:52,499
front they decided to use meshes for the

00:13:50,339 --> 00:13:55,610
fences okay and for those who use lidar

00:13:52,499 --> 00:13:59,639
know that that's not a very good thing

00:13:55,610 --> 00:14:01,679
so in fact that made it a very late

00:13:59,639 --> 00:14:03,329
night for us but you know a lot of the

00:14:01,679 --> 00:14:05,160
clustering techniques and also we found

00:14:03,329 --> 00:14:06,990
that card Oh work a lot better not only

00:14:05,160 --> 00:14:10,709
for that before the long segmentations

00:14:06,990 --> 00:14:13,410
of the maze for our ground robot slam

00:14:10,709 --> 00:14:14,939
algorithm for the aerial robot we were

00:14:13,410 --> 00:14:18,839
lucky enough to have a very very skilled

00:14:14,939 --> 00:14:20,399
pilot operating over the maze so again

00:14:18,839 --> 00:14:21,870
this is the first day where we weren't

00:14:20,399 --> 00:14:23,879
actually doing the rounds we were just

00:14:21,870 --> 00:14:26,309
allowed to sort of play around in the

00:14:23,879 --> 00:14:28,139
maze environment and in fact his

00:14:26,309 --> 00:14:29,939
lawnmower pattern was was so good that

00:14:28,139 --> 00:14:33,179
we were thinking about just Ross bagging

00:14:29,939 --> 00:14:35,459
in and replaying it for for for our

00:14:33,179 --> 00:14:37,980
actual runs we felt that was cheating

00:14:35,459 --> 00:14:39,809
but we we generated a lawnmower pattern

00:14:37,980 --> 00:14:41,670
very close to what he was doing but you

00:14:39,809 --> 00:14:43,410
can see that you know we were operating

00:14:41,670 --> 00:14:45,509
within these light fixtures but because

00:14:43,410 --> 00:14:47,819
we did extensive testing within gazebo

00:14:45,509 --> 00:14:49,949
this wasn't a surprise to us we were we

00:14:47,819 --> 00:14:52,620
we didn't lose any of the air vehicles

00:14:49,949 --> 00:14:55,559
during the challenge which was not the

00:14:52,620 --> 00:14:57,120
most likely outcome okay so here's what

00:14:55,559 --> 00:14:58,499
here's what you get from the air vehicle

00:14:57,120 --> 00:15:01,049
so we're doing localization which I'll

00:14:58,499 --> 00:15:03,149
describe in a in a slide up front but

00:15:01,049 --> 00:15:05,279
there was a talk with the octo map okay

00:15:03,149 --> 00:15:08,189
earlier today and it's an excellent

00:15:05,279 --> 00:15:10,220
excellent package and in fact if you get

00:15:08,189 --> 00:15:12,269
you know we've got reasonable

00:15:10,220 --> 00:15:14,279
localization we actually fix this

00:15:12,269 --> 00:15:15,600
between round one and round two but

00:15:14,279 --> 00:15:18,449
remember around run we were allowed to

00:15:15,600 --> 00:15:19,649
have human intervention so regenerating

00:15:18,449 --> 00:15:21,629
sort of this three-dimensional

00:15:19,649 --> 00:15:24,569
representation of the maze we were able

00:15:21,629 --> 00:15:26,050
to manually insert sort of a bias into

00:15:24,569 --> 00:15:27,700
the ground robots

00:15:26,050 --> 00:15:29,350
try to solve the maze the one that was

00:15:27,700 --> 00:15:31,540
actually solving the problems we were

00:15:29,350 --> 00:15:34,000
able to also you know identify markers

00:15:31,540 --> 00:15:36,519
and manually insert them into the plan

00:15:34,000 --> 00:15:38,649
of the ugv at least for the first round

00:15:36,519 --> 00:15:39,820
which was really nice because that was

00:15:38,649 --> 00:15:43,500
sort of the warm up to the more

00:15:39,820 --> 00:15:46,089
difficult second round and so given that

00:15:43,500 --> 00:15:48,190
we took what the the information coming

00:15:46,089 --> 00:15:50,019
from the air vehicle and here's what

00:15:48,190 --> 00:15:52,300
happened with first round so in fact our

00:15:50,019 --> 00:15:53,829
bias didn't work initially it went down

00:15:52,300 --> 00:15:56,709
the wrong path but eventually it found

00:15:53,829 --> 00:15:58,260
out the right way it turns out that we

00:15:56,709 --> 00:16:00,880
think what happened here is there was a

00:15:58,260 --> 00:16:03,040
bonus marker sort of up top in the right

00:16:00,880 --> 00:16:04,360
and the robot sort of just scrambles

00:16:03,040 --> 00:16:07,480
around trying to find it and eventually

00:16:04,360 --> 00:16:09,040
it times out just as a screw it and goes

00:16:07,480 --> 00:16:12,430
and solves amazed in fact we were able

00:16:09,040 --> 00:16:16,360
to solve these very large maze again the

00:16:12,430 --> 00:16:18,730
length of or the size of two tennis

00:16:16,360 --> 00:16:21,130
courts okay you see we cover a very very

00:16:18,730 --> 00:16:22,360
small fraction of the maze because of

00:16:21,130 --> 00:16:25,180
the information that we got with the air

00:16:22,360 --> 00:16:27,459
vehicle and I think they talked about

00:16:25,180 --> 00:16:29,680
this was about 12 minute run okay but

00:16:27,459 --> 00:16:31,320
again we weren't we weren't in any rush

00:16:29,680 --> 00:16:34,930
we rather make sure that our mapping

00:16:31,320 --> 00:16:36,970
algorithm was working quite nicely so we

00:16:34,930 --> 00:16:39,190
actually limited the speed because we

00:16:36,970 --> 00:16:41,829
were using a less powerful laser on the

00:16:39,190 --> 00:16:44,829
ground robot but the really interesting

00:16:41,829 --> 00:16:47,200
thing is sort of this UAV autonomous

00:16:44,829 --> 00:16:49,029
mapping okay and so because we had the

00:16:47,200 --> 00:16:51,820
profile of the bubble you can see that

00:16:49,029 --> 00:16:53,140
these lidar scans all right are moving

00:16:51,820 --> 00:16:54,850
around as the robot is sort of

00:16:53,140 --> 00:16:56,770
traversing the maze but since we knew

00:16:54,850 --> 00:16:59,440
this a priori we could build the profile

00:16:56,770 --> 00:17:01,899
back in to the to the localization

00:16:59,440 --> 00:17:04,360
algorithm and localize pretty well so

00:17:01,899 --> 00:17:06,189
this is just an accumulation of the of

00:17:04,360 --> 00:17:07,959
the octo map and then slicing at a

00:17:06,189 --> 00:17:11,500
particular height about one meter I

00:17:07,959 --> 00:17:14,980
guess the fences were about 1.3 meters

00:17:11,500 --> 00:17:17,350
high and and so this was for the second

00:17:14,980 --> 00:17:19,419
round ok so this robot would go out it

00:17:17,350 --> 00:17:21,730
would collect this information and in

00:17:19,419 --> 00:17:24,669
fact this construction didn't actually

00:17:21,730 --> 00:17:26,620
happen on the air vehicle it was

00:17:24,669 --> 00:17:28,270
transferred as a bag file down to one of

00:17:26,620 --> 00:17:30,550
the you gv's this reconstructions

00:17:28,270 --> 00:17:32,800
actually on one of the ug vs so it's

00:17:30,550 --> 00:17:34,900
playing it building a map and then we

00:17:32,800 --> 00:17:36,670
had to figure out how to actually

00:17:34,900 --> 00:17:38,500
attract that map in

00:17:36,670 --> 00:17:41,350
bring it in such that we could bias the

00:17:38,500 --> 00:17:43,150
exploit our exploration phase which then

00:17:41,350 --> 00:17:45,610
we would have to then take its result

00:17:43,150 --> 00:17:48,120
and put in the exploitation phase I'm

00:17:45,610 --> 00:17:50,260
going to skip that sort of map merging

00:17:48,120 --> 00:17:53,020
for this slide but just show you the

00:17:50,260 --> 00:17:54,610
results of the UGB exploration so again

00:17:53,020 --> 00:17:56,320
this is the one that sort of solves the

00:17:54,610 --> 00:17:58,240
map but doesn't actually solve the map

00:17:56,320 --> 00:18:00,760
and in fact what it's doing is it's

00:17:58,240 --> 00:18:02,890
filling in areas where there's a lot of

00:18:00,760 --> 00:18:05,980
uncertainty due to the information that

00:18:02,890 --> 00:18:07,480
was coming from the UAV and so in fact

00:18:05,980 --> 00:18:10,270
actually it solves the maze it doesn't

00:18:07,480 --> 00:18:11,860
solve it as efficiently as round one but

00:18:10,270 --> 00:18:13,990
that's okay and in fact actually goes

00:18:11,860 --> 00:18:16,000
out but it doesn't indicate that it

00:18:13,990 --> 00:18:18,400
solved it saw actually solved the maze

00:18:16,000 --> 00:18:21,130
now getting into map merging I mentioned

00:18:18,400 --> 00:18:23,230
we use card oh so what we did is we

00:18:21,130 --> 00:18:26,230
actually opened up cardo and allowed it

00:18:23,230 --> 00:18:28,900
to take a second topic of laser scans to

00:18:26,230 --> 00:18:31,660
actually recreate the map based upon a

00:18:28,900 --> 00:18:33,190
sequence of laser scans okay from a

00:18:31,660 --> 00:18:35,680
bayesian formulation this is a

00:18:33,190 --> 00:18:37,780
horrendous thing to do but we found out

00:18:35,680 --> 00:18:40,390
that it works pretty nicely because we

00:18:37,780 --> 00:18:43,410
have we know the starting point of the

00:18:40,390 --> 00:18:46,090
ground robot to very very high accuracy

00:18:43,410 --> 00:18:48,550
because it's repeated over and over over

00:18:46,090 --> 00:18:52,270
again from these deployments and so

00:18:48,550 --> 00:18:54,400
given that the round two we were able to

00:18:52,270 --> 00:18:56,470
exploit just like we were well in fact

00:18:54,400 --> 00:18:58,180
we solved it for exploiter and then we

00:18:56,470 --> 00:19:00,730
sort of indicated that you know we put

00:18:58,180 --> 00:19:02,530
on a show for everyone which which which

00:19:00,730 --> 00:19:04,210
was which was a great time we were very

00:19:02,530 --> 00:19:08,020
happy to see that that this all worked

00:19:04,210 --> 00:19:10,150
out but all this you know formulates

00:19:08,020 --> 00:19:12,730
into solving the challenge however our

00:19:10,150 --> 00:19:15,070
real interest was you know sort of the

00:19:12,730 --> 00:19:17,740
DataFlex and sort of the autonomy that

00:19:15,070 --> 00:19:20,650
we could get for maybe a realized system

00:19:17,740 --> 00:19:22,690
okay so for real life task and so here

00:19:20,650 --> 00:19:24,190
you know we have a large now data set

00:19:22,690 --> 00:19:26,680
that we're using at Lincoln trying to

00:19:24,190 --> 00:19:29,140
improve these algorithms which we hope

00:19:26,680 --> 00:19:31,270
to release to the public after an

00:19:29,140 --> 00:19:33,400
extensive review process because a lot

00:19:31,270 --> 00:19:34,570
of it is based upon pre-existing

00:19:33,400 --> 00:19:36,310
packages because we can certainly

00:19:34,570 --> 00:19:39,460
wouldn't be able to do this from scratch

00:19:36,310 --> 00:19:41,080
by ourselves and so with that I'll

00:19:39,460 --> 00:19:44,140
conclude I just want to give recognition

00:19:41,080 --> 00:19:46,120
to my team and also mentioned that out

00:19:44,140 --> 00:19:47,549
of this nine person team only Nick

00:19:46,120 --> 00:19:49,889
myself and Michael

00:19:47,549 --> 00:19:52,139
have Ross experience before this so this

00:19:49,889 --> 00:19:54,389
shows how powerful Ross can be even to a

00:19:52,139 --> 00:19:56,909
new you know a new engineer a new

00:19:54,389 --> 00:19:59,820
programmer to do very very complicated

00:19:56,909 --> 00:20:02,330
tasks and with that I'll conclude and

00:19:59,820 --> 00:20:02,330

YouTube URL: https://www.youtube.com/watch?v=fPYPytoP9VQ


