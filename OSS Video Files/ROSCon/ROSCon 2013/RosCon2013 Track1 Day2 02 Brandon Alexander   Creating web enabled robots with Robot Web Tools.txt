Title: RosCon2013 Track1 Day2 02 Brandon Alexander   Creating web enabled robots with Robot Web Tools
Publication date: 2014-08-31
Playlist: ROSCon 2013
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2013 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/ http://roscon.ros.org/2013/?page_id=14
Captions: 
	00:00:02,660 --> 00:00:09,080
as Brian mentioned I'm Brandon Alexander

00:00:07,040 --> 00:00:12,139
and I'm a web robotics engineer at

00:00:09,080 --> 00:00:14,389
Willow Garage and today I would like to

00:00:12,139 --> 00:00:17,810
show you all how you can get your robots

00:00:14,389 --> 00:00:21,980
on the web but before we get to that

00:00:17,810 --> 00:00:27,080
let's go all the way back to Ross con

00:00:21,980 --> 00:00:30,410
2012 when Ben Pitzer on Saracen tosses

00:00:27,080 --> 00:00:34,640
behalf gave a presentation on web

00:00:30,410 --> 00:00:38,629
enabled robotics back then the state of

00:00:34,640 --> 00:00:42,649
the art was the original Ross J s Ross

00:00:38,629 --> 00:00:46,910
bridge 1.0 and w biz an ARB is like

00:00:42,649 --> 00:00:47,899
replacement for the web so although only

00:00:46,910 --> 00:00:52,280
a year ago

00:00:47,899 --> 00:00:55,760
oh it's dude before that the two big

00:00:52,280 --> 00:00:59,960
players was Bosh and Brown University so

00:00:55,760 --> 00:01:03,680
although only a year ago we have learned

00:00:59,960 --> 00:01:05,870
a lot web technologies and web

00:01:03,680 --> 00:01:09,710
performance has increased at a dramatic

00:01:05,870 --> 00:01:12,350
rate so a group of us got together to

00:01:09,710 --> 00:01:17,140
set out to design the next group of web

00:01:12,350 --> 00:01:20,960
tools for robotics and we set some goals

00:01:17,140 --> 00:01:23,570
we wanted things to be modular if you

00:01:20,960 --> 00:01:26,360
want to add a 2d map or a 3d rendering

00:01:23,570 --> 00:01:29,720
of your robot you should be able to plug

00:01:26,360 --> 00:01:32,780
in just that component we wanted to

00:01:29,720 --> 00:01:34,580
adhere to the web's best practices so

00:01:32,780 --> 00:01:36,640
that includes things like emitting

00:01:34,580 --> 00:01:40,070
events and using callbacks in JavaScript

00:01:36,640 --> 00:01:46,250
as well as using html5 technologies like

00:01:40,070 --> 00:01:49,250
WebGL WebSockets and the video plugin we

00:01:46,250 --> 00:01:51,620
needed things to be robust so we added

00:01:49,250 --> 00:01:54,770
unit tests we've added Travis CI

00:01:51,620 --> 00:01:58,970
integration and we did pork we do code

00:01:54,770 --> 00:02:00,620
review by github pull requests but most

00:01:58,970 --> 00:02:02,900
importantly we wanted this to be about

00:02:00,620 --> 00:02:05,390
us we wanted this to be about the

00:02:02,900 --> 00:02:09,379
community so with that the community

00:02:05,390 --> 00:02:12,470
grew from Bosch and Brown University

00:02:09,379 --> 00:02:15,850
to include Eugene robot Willow Garage

00:02:12,470 --> 00:02:15,850
and WPI

00:02:18,040 --> 00:02:23,690
and we named our group we named our

00:02:20,900 --> 00:02:25,640
group robot webtools and this is a

00:02:23,690 --> 00:02:27,920
screenshot of our site that we just

00:02:25,640 --> 00:02:30,620
launched this week I highly recommend

00:02:27,920 --> 00:02:37,790
taking a look after the presentation it

00:02:30,620 --> 00:02:41,660
has tools demos documentation and here's

00:02:37,790 --> 00:02:44,390
the tools we've created we rewrote Ross

00:02:41,660 --> 00:02:47,660
bridge from the ground up to be more

00:02:44,390 --> 00:02:52,280
robust more performant and to adhere to

00:02:47,660 --> 00:02:54,590
a well-defined protocol we wrote Ross

00:02:52,280 --> 00:02:57,980
live j/s which exposes the core

00:02:54,590 --> 00:03:04,280
functionality of Ross to the browser and

00:02:57,980 --> 00:03:05,989
we wrote Ross to de and Ross tjs but

00:03:04,280 --> 00:03:07,700
enough history the point of this

00:03:05,989 --> 00:03:11,030
presentation is to show you all how you

00:03:07,700 --> 00:03:12,290
can get your robot on the web now I

00:03:11,030 --> 00:03:15,770
realize there's a wide range of

00:03:12,290 --> 00:03:19,370
backgrounds here from Python to C++ to

00:03:15,770 --> 00:03:20,750
Android developers but my goal is for

00:03:19,370 --> 00:03:22,760
all of you to be able to go home after

00:03:20,750 --> 00:03:28,100
this and be able to add a web interface

00:03:22,760 --> 00:03:30,890
to your robot so do this started all you

00:03:28,100 --> 00:03:32,989
need to do is write to get started just

00:03:30,890 --> 00:03:35,720
need to write some HTML and you can do

00:03:32,989 --> 00:03:38,299
this on any platform Linux Mac Windows

00:03:35,720 --> 00:03:41,989
and using your favorite text editor you

00:03:38,299 --> 00:03:44,450
just have a basic HTML template head

00:03:41,989 --> 00:03:49,070
body tags and some text to make it look

00:03:44,450 --> 00:03:50,840
attractive you don't need to install

00:03:49,070 --> 00:03:53,299
something like Apache to get started

00:03:50,840 --> 00:03:54,470
if you already have Python installed you

00:03:53,299 --> 00:03:58,100
can just see thee to the current

00:03:54,470 --> 00:04:00,890
directory type Python - M simple HTTP

00:03:58,100 --> 00:04:02,360
server and you're ready to go I'm

00:04:00,890 --> 00:04:11,000
actually running that command on this

00:04:02,360 --> 00:04:16,669
computer right now and to try it out BAM

00:04:11,000 --> 00:04:18,760
we went to localhost 8004 that that

00:04:16,669 --> 00:04:23,320
Python the simple HTTP server provides

00:04:18,760 --> 00:04:23,320
and we typed in the HTML files name

00:04:28,530 --> 00:04:33,729
but how do we get this computer and a

00:04:31,930 --> 00:04:36,610
webpage running in this computer to talk

00:04:33,729 --> 00:04:39,580
to a robot somewhere else and that's

00:04:36,610 --> 00:04:41,680
where Ross bridge comes into play Ross

00:04:39,580 --> 00:04:43,889
bridge creates a WebSocket connection

00:04:41,680 --> 00:04:46,960
between your browser and your server

00:04:43,889 --> 00:04:49,599
what that means is that WebSockets

00:04:46,960 --> 00:04:51,819
provide a bi-directional low latency

00:04:49,599 --> 00:04:54,370
communication between your browser and

00:04:51,819 --> 00:04:57,280
your server so opens up the connection

00:04:54,370 --> 00:04:59,110
it takes an adjacent message and then it

00:04:57,280 --> 00:05:03,160
converts that JSON message into a Ross

00:04:59,110 --> 00:05:05,580
call and the same works in Reverse so if

00:05:03,160 --> 00:05:08,289
your web page is subscribing to a topic

00:05:05,580 --> 00:05:11,289
it's sent adjacent requests to Ross

00:05:08,289 --> 00:05:13,570
bridge over the web socket and then Ross

00:05:11,289 --> 00:05:16,300
bridge creates a new node that

00:05:13,570 --> 00:05:18,400
subscribes to that topic and then when

00:05:16,300 --> 00:05:21,039
Ross publishes the topic it goes to Ross

00:05:18,400 --> 00:05:27,069
bridge converts to Jason passes a backup

00:05:21,039 --> 00:05:29,440
over WebSocket to the browser it's

00:05:27,069 --> 00:05:32,190
applicable you can just do sudo apt-get

00:05:29,440 --> 00:05:35,289
install Ross groovy raspberry suite and

00:05:32,190 --> 00:05:41,560
it also has a nice convenient Ross

00:05:35,289 --> 00:05:44,289
launch file so right now I'm running

00:05:41,560 --> 00:05:47,349
Ross Bridge on a turtle bot - at Willow

00:05:44,289 --> 00:05:49,270
Graduate offices in California so let's

00:05:47,349 --> 00:05:52,300
get this webpage that you just saw on

00:05:49,270 --> 00:05:57,599
this computer to talk to the turtle bot

00:05:52,300 --> 00:06:00,940
- halfway across the world hopefully and

00:05:57,599 --> 00:06:03,669
that's where Ross live j/s comes in ross

00:06:00,940 --> 00:06:06,659
live j/s provides exposes the core

00:06:03,669 --> 00:06:09,639
functionality of Ross to your browser

00:06:06,659 --> 00:06:12,990
what that means is that you have a nice

00:06:09,639 --> 00:06:15,520
API and JavaScript for things like

00:06:12,990 --> 00:06:18,880
service calls publishing and subscribing

00:06:15,520 --> 00:06:22,150
to topics TF subscriptions action live

00:06:18,880 --> 00:06:25,750
calls and so forth so we include the

00:06:22,150 --> 00:06:28,780
library and then we create a Ross object

00:06:25,750 --> 00:06:32,550
and we give it the URL of the WebSocket

00:06:28,780 --> 00:06:32,550
connection on the turtle bot to

00:06:34,010 --> 00:06:37,970
and to try that out

00:06:47,660 --> 00:06:56,690
it should eventually connect to to the

00:06:53,060 --> 00:06:59,090
Ross bridge for any other robot assuming

00:06:56,690 --> 00:07:02,420
I set up my VPN correctly which I'm

00:06:59,090 --> 00:07:06,320
afraid I did not dad's okay

00:07:02,420 --> 00:07:10,400
I did not expect demos to work live and

00:07:06,320 --> 00:07:18,200
dealing with robots so I have a video

00:07:10,400 --> 00:07:19,730
backup of everything so that green text

00:07:18,200 --> 00:07:22,190
is what I was looking for in the other

00:07:19,730 --> 00:07:26,110
window and what this shows is that is

00:07:22,190 --> 00:07:26,110
successfully connected to Ross bridge

00:07:27,310 --> 00:07:31,580
all right so we can now connect or in

00:07:30,170 --> 00:07:35,390
theory should connect from our computer

00:07:31,580 --> 00:07:40,610
to a robot somewhere else but how do we

00:07:35,390 --> 00:07:43,820
get data from it just like in Ross PI or

00:07:40,610 --> 00:07:46,040
Ross cpp you're able to subscribe you

00:07:43,820 --> 00:07:48,950
create a subscriber so in this case we

00:07:46,040 --> 00:07:53,900
subscribe to the robot pose topic and we

00:07:48,950 --> 00:07:56,600
give it the message type and then we

00:07:53,900 --> 00:07:59,650
just call subscribe what happens to here

00:07:56,600 --> 00:08:02,840
is when we call subscribe Ross live j/s

00:07:59,650 --> 00:08:05,030
sins adjacent encoded message to Ross

00:08:02,840 --> 00:08:08,300
bridge saying hey can you subscribe to

00:08:05,030 --> 00:08:10,490
the robot pose at that point Ross bridge

00:08:08,300 --> 00:08:13,970
spawns a new node that's subscribing to

00:08:10,490 --> 00:08:17,240
slash robot pose then whenever Ross

00:08:13,970 --> 00:08:19,370
publishes that topic the Notre Steve's

00:08:17,240 --> 00:08:22,610
the message Ross bridge then takes it

00:08:19,370 --> 00:08:25,820
jason encodes it passes out to the web

00:08:22,610 --> 00:08:30,280
page at which point this callback

00:08:25,820 --> 00:08:35,849
function is called with the pose object

00:08:30,280 --> 00:08:38,260
and here's a video of that

00:08:35,849 --> 00:08:40,450
so we've connected to the robot and

00:08:38,260 --> 00:08:42,610
we're receiving the robot pose we just

00:08:40,450 --> 00:08:46,600
apply some nice formatting and we insert

00:08:42,610 --> 00:08:55,810
it into the HTML inside the callback

00:08:46,600 --> 00:08:59,770
function but just text of a pose doesn't

00:08:55,810 --> 00:09:03,600
mean a lot without a map and that's

00:08:59,770 --> 00:09:07,930
where Ross to DJ s comes in Ross to DJ s

00:09:03,600 --> 00:09:09,610
provides a 2d scene graph for your

00:09:07,930 --> 00:09:13,660
browser with some additional Ross

00:09:09,610 --> 00:09:15,880
functionality so what that means you

00:09:13,660 --> 00:09:17,860
create your route scene your route 2d

00:09:15,880 --> 00:09:19,600
scene and you give it some basic

00:09:17,860 --> 00:09:23,560
coordinates and where it should be on

00:09:19,600 --> 00:09:29,500
your webpage we then need to add

00:09:23,560 --> 00:09:31,540
components to the scene graph so Ross 2d

00:09:29,500 --> 00:09:34,149
comes with occupancy grid client

00:09:31,540 --> 00:09:35,860
built-in which means that by calling

00:09:34,149 --> 00:09:38,560
this function and giving it the route

00:09:35,860 --> 00:09:41,500
scene it will subscribe to an occupancy

00:09:38,560 --> 00:09:43,899
grid topic bring it in

00:09:41,500 --> 00:09:45,910
parse the message which is just a bunch

00:09:43,899 --> 00:09:58,660
of zeros and ones and then convert it

00:09:45,910 --> 00:10:00,100
into and render it as a 2d PNG image now

00:09:58,660 --> 00:10:02,529
all you can see grid is a gigantic

00:10:00,100 --> 00:10:03,820
message so it takes a little while to

00:10:02,529 --> 00:10:07,360
load even when I was running this

00:10:03,820 --> 00:10:09,579
locally so we've connected to Ross we

00:10:07,360 --> 00:10:11,940
were not subscribed to the map we

00:10:09,579 --> 00:10:14,740
received the giant message parsed it and

00:10:11,940 --> 00:10:20,230
then rendered it and this is the for

00:10:14,740 --> 00:10:22,450
plan out below garage so we're already

00:10:20,230 --> 00:10:24,670
getting the pose information and we can

00:10:22,450 --> 00:10:31,300
render 2d scenes like we've shown in the

00:10:24,670 --> 00:10:33,160
map let's add the post to that so we'll

00:10:31,300 --> 00:10:35,500
create a basic triangle to reflect the

00:10:33,160 --> 00:10:38,160
robots pose which is also built in to

00:10:35,500 --> 00:10:43,180
Ross 2d we give you some dimensions

00:10:38,160 --> 00:10:44,529
without the pulse and so forth and then

00:10:43,180 --> 00:10:46,180
in the SUBSCRIBE function you saw

00:10:44,529 --> 00:10:48,790
earlier where we printed out into a

00:10:46,180 --> 00:10:50,980
table we just take that pose information

00:10:48,790 --> 00:10:56,080
and we set it into the robots markers

00:10:50,980 --> 00:11:07,750
position and orientation then we just

00:10:56,080 --> 00:11:09,400
add it to the scene so in roughly 15-20

00:11:07,750 --> 00:11:12,070
lines of JavaScript we were able to

00:11:09,400 --> 00:11:16,570
bring in a map render it to the browser

00:11:12,070 --> 00:11:19,690
and then eventually be able to display

00:11:16,570 --> 00:11:27,940
the robots pose and it's orientation

00:11:19,690 --> 00:11:31,000
everything in map but some things

00:11:27,940 --> 00:11:35,770
require more than just viewing things in

00:11:31,000 --> 00:11:39,520
2d somethings robotics require 3d

00:11:35,770 --> 00:11:40,300
viewing and that's where as you probably

00:11:39,520 --> 00:11:44,530
have guessed

00:11:40,300 --> 00:11:47,380
raus 3d Jas comes into play raus 3d Jas

00:11:44,530 --> 00:11:49,450
is similar to Ross to DJ s and that it

00:11:47,380 --> 00:11:51,430
provides a 3d scene graph with some

00:11:49,450 --> 00:11:54,220
additional Ross functionality for the

00:11:51,430 --> 00:11:58,030
browser it's built on the incredibly

00:11:54,220 --> 00:12:04,870
popular three Jas library and it uses

00:11:58,030 --> 00:12:06,640
the GPU and WebGL in the browser so just

00:12:04,870 --> 00:12:10,510
like in Ross gdgs the first thing we

00:12:06,640 --> 00:12:12,940
need to do for Ross 3d is create a basic

00:12:10,510 --> 00:12:14,380
scene node so the root scene though we

00:12:12,940 --> 00:12:16,120
give it where it should go on the

00:12:14,380 --> 00:12:21,790
webpage and the coordinates of what it

00:12:16,120 --> 00:12:25,570
should do and in our example let's

00:12:21,790 --> 00:12:30,520
render our turtlebot to render turtlebot

00:12:25,570 --> 00:12:33,850
to in the browser in 3d so we created TF

00:12:30,520 --> 00:12:39,580
client we give it a threshold and a

00:12:33,850 --> 00:12:42,670
throttling rate and then the juicy part

00:12:39,580 --> 00:12:45,700
is the you RDF client you already have

00:12:42,670 --> 00:12:48,100
client we specify the TF subscriber we

00:12:45,700 --> 00:12:51,310
specified the resource URL of where it

00:12:48,100 --> 00:12:53,500
can find the Coolatta file of the turtle

00:12:51,310 --> 00:12:56,770
bot and then we tell it the scene which

00:12:53,500 --> 00:12:59,170
it should add itself to your TF client

00:12:56,770 --> 00:13:01,930
has been responsible for subscribing or

00:12:59,170 --> 00:13:03,700
fetching the turtle bot - is your TF

00:13:01,930 --> 00:13:06,160
taking all the mesh bottles needed and

00:13:03,700 --> 00:13:16,300
then rendering it in the browser with no

00:13:06,160 --> 00:13:17,770
plugins in 3d so as you can see here we

00:13:16,300 --> 00:13:19,480
saw our 2d map on the right that

00:13:17,770 --> 00:13:21,610
subscribing to the occupancy grid give

00:13:19,480 --> 00:13:25,900
me the robots pose and now we've

00:13:21,610 --> 00:13:31,930
rendered a nice-looking turtlebot too we

00:13:25,900 --> 00:13:38,140
can move it around pan zoom rotate and

00:13:31,930 --> 00:13:39,910
so forth and this is the same you are DF

00:13:38,140 --> 00:13:43,090
by the way that you would use in

00:13:39,910 --> 00:13:48,640
something like rviz and the same mesh

00:13:43,090 --> 00:13:50,670
bottles too so we're already getting an

00:13:48,640 --> 00:13:53,770
occupancy grid and displaying it in 2d

00:13:50,670 --> 00:13:55,390
and we already have the robots pose so

00:13:53,770 --> 00:13:57,880
we can actually take the same I'll get

00:13:55,390 --> 00:14:00,870
an occupancy grid using Ross 3ds I can

00:13:57,880 --> 00:14:06,940
secret client render it in 3d and then

00:14:00,870 --> 00:14:10,570
add the robot then add the the robot

00:14:06,940 --> 00:14:18,240
model to that location so in roughly

00:14:10,570 --> 00:14:21,520
five lines of JavaScript we can now add

00:14:18,240 --> 00:14:24,070
we can now add the robot the your DF

00:14:21,520 --> 00:14:27,670
model all the robot render and 3d at the

00:14:24,070 --> 00:14:31,390
exact pose it should be which will take

00:14:27,670 --> 00:14:33,160
just a second and there you go so you

00:14:31,390 --> 00:14:35,710
can see the same map displayed in 2d

00:14:33,160 --> 00:14:39,490
with the triangle pose as well as the

00:14:35,710 --> 00:14:42,570
turtle bot to display in 3d with a nice

00:14:39,490 --> 00:14:42,570
3d occupancy grid

00:14:49,960 --> 00:14:54,320
but to really hit home the point that

00:14:52,460 --> 00:14:58,490
you can just add the components that you

00:14:54,320 --> 00:15:04,130
need let's add one more feature for our

00:14:58,490 --> 00:15:08,450
final example let's add the 3d floorplan

00:15:04,130 --> 00:15:09,890
of Willow Garage to our demo so the

00:15:08,450 --> 00:15:12,170
first thing we do is just create a mesh

00:15:09,890 --> 00:15:16,280
resource this is where we specify the

00:15:12,170 --> 00:15:18,710
Coolatta file of of willow graduates for

00:15:16,280 --> 00:15:23,420
plan so includes the walls windows and

00:15:18,710 --> 00:15:26,420
so forth we then create a scene node

00:15:23,420 --> 00:15:28,340
which we give it the mesh information we

00:15:26,420 --> 00:15:33,440
give it an offset pose of where it

00:15:28,340 --> 00:15:42,110
should be on the map and then we just

00:15:33,440 --> 00:15:45,550
add the object to the scene so when

00:15:42,110 --> 00:15:48,560
roughly was that 10 lines of JavaScript

00:15:45,550 --> 00:15:51,020
we're able to add a completely custom 3d

00:15:48,560 --> 00:16:01,930
component to our scene in the browser

00:15:51,020 --> 00:16:01,930
that can be viewable on any platform

00:16:06,009 --> 00:16:11,149
that's really what I want to hit home

00:16:08,240 --> 00:16:14,420
during this presentation you can add

00:16:11,149 --> 00:16:16,940
components you can add any components

00:16:14,420 --> 00:16:18,560
you need or create your own and render

00:16:16,940 --> 00:16:20,240
them and use them in the browser and

00:16:18,560 --> 00:16:23,240
make them accessible not just on someone

00:16:20,240 --> 00:16:26,779
running a blender but someone running a

00:16:23,240 --> 00:16:34,880
Mac Windows even some versions of the

00:16:26,779 --> 00:16:37,220
newer Android phones and we hope that

00:16:34,880 --> 00:16:39,019
people do start creating widgets and do

00:16:37,220 --> 00:16:40,759
start creating components the whole

00:16:39,019 --> 00:16:43,220
point of this is to be about the

00:16:40,759 --> 00:16:45,860
community and people already started

00:16:43,220 --> 00:16:47,630
having have started doing this so a lot

00:16:45,860 --> 00:16:49,160
of the 2d stuff you saw with getting an

00:16:47,630 --> 00:16:52,910
occupancy grid displaying the robots

00:16:49,160 --> 00:16:55,490
pose and so forth people in one person

00:16:52,910 --> 00:16:57,199
already wrote nav to DJ s which wraps

00:16:55,490 --> 00:16:59,209
all that which is already fairly simple

00:16:57,199 --> 00:17:02,620
and made it just a couple function calls

00:16:59,209 --> 00:17:06,429
to add 2d navigation to your robot to

00:17:02,620 --> 00:17:06,429
your robot in the browser

00:17:06,699 --> 00:17:11,150
people are writing entire systems and

00:17:09,140 --> 00:17:14,959
applications with this - for example

00:17:11,150 --> 00:17:17,240
Russell Taurus at WPI use these

00:17:14,959 --> 00:17:19,939
components to write the robot management

00:17:17,240 --> 00:17:23,900
system he did that in order to perform

00:17:19,939 --> 00:17:26,559
robot studies for his PhD work to

00:17:23,900 --> 00:17:29,690
perform robot studies in his PhD work

00:17:26,559 --> 00:17:36,679
online he found out an easier way to be

00:17:29,690 --> 00:17:39,380
able to get extra participants so what's

00:17:36,679 --> 00:17:41,150
next well one thing I didn't actually

00:17:39,380 --> 00:17:44,210
have chance to show that's in there

00:17:41,150 --> 00:17:49,309
today in Ross 3dj s is interactive

00:17:44,210 --> 00:17:53,049
marker support so the same interactive

00:17:49,309 --> 00:17:53,049
markers you're used to on things like

00:17:53,140 --> 00:17:59,510
put things in like an art biz you can

00:17:56,090 --> 00:18:03,080
now use in the browser but you'll also

00:17:59,510 --> 00:18:05,929
notice this black display in front of

00:18:03,080 --> 00:18:08,419
the robot that's a sneak peek at an

00:18:05,929 --> 00:18:11,179
upcoming feature worked on by Julius

00:18:08,419 --> 00:18:13,730
camera at Willow Garage on be able to

00:18:11,179 --> 00:18:16,669
stream depth cloud data from your robot

00:18:13,730 --> 00:18:17,080
and render in the 3d scene and the

00:18:16,669 --> 00:18:19,659
browser

00:18:17,080 --> 00:18:21,879
and although it's not displayed in this

00:18:19,659 --> 00:18:25,539
example it will include the RGB data as

00:18:21,879 --> 00:18:27,039
well if you're more interested more on

00:18:25,539 --> 00:18:28,840
that particular feature I believe he's

00:18:27,039 --> 00:18:35,049
going to put a blog post on Willow

00:18:28,840 --> 00:18:37,149
garages website in the near future and

00:18:35,049 --> 00:18:41,970
you I can also as you can see right

00:18:37,149 --> 00:18:41,970
click select target point and so forth

00:18:43,919 --> 00:18:48,940
so a lot of people will put effort into

00:18:46,419 --> 00:18:51,489
getting robot web tools launched and

00:18:48,940 --> 00:18:53,710
getting the tools created but I'd like

00:18:51,489 --> 00:18:54,309
to get the special thanks to Russell

00:18:53,710 --> 00:18:56,799
Taurus

00:18:54,309 --> 00:18:59,679
who's now the community manager of robot

00:18:56,799 --> 00:19:01,359
web tools he's put a tremendous amount

00:18:59,679 --> 00:19:04,419
of effort during his time interning at

00:19:01,359 --> 00:19:07,419
Willow Garage and Bosch to get Ross live

00:19:04,419 --> 00:19:09,700
Ross 2d and Ross 3d Jas out the window

00:19:07,419 --> 00:19:12,309
launching the website and adding tons of

00:19:09,700 --> 00:19:14,440
documentation I'd also like to thank

00:19:12,309 --> 00:19:14,940
ji-hoon who's given a presentation later

00:19:14,440 --> 00:19:17,769
today

00:19:14,940 --> 00:19:20,679
June has been critical on getting Ross

00:19:17,769 --> 00:19:22,779
bridge patched updated released as well

00:19:20,679 --> 00:19:24,429
as been the same for things like the

00:19:22,779 --> 00:19:27,580
different components the different core

00:19:24,429 --> 00:19:29,340
libraries and different widgets and then

00:19:27,580 --> 00:19:31,059
finally I'd like to thank David Goss Oh

00:19:29,340 --> 00:19:33,299
David Goss I wrote the original

00:19:31,059 --> 00:19:35,619
interactive marker implementation and

00:19:33,299 --> 00:19:37,690
now while he's at Willow Garage he

00:19:35,619 --> 00:19:40,779
ported that functionality into Java

00:19:37,690 --> 00:19:43,690
Script what I think's really exciting

00:19:40,779 --> 00:19:45,820
about that is David is not a web

00:19:43,690 --> 00:19:48,820
developer he has his own opinions on

00:19:45,820 --> 00:19:52,210
Java Script but he was able to take his

00:19:48,820 --> 00:19:54,940
knowledge in C++ and OpenGL and poured

00:19:52,210 --> 00:20:00,820
him over to JavaScript with amazing

00:19:54,940 --> 00:20:03,279
results so if you would like to know

00:20:00,820 --> 00:20:05,799
more I highly recommend taking a look at

00:20:03,279 --> 00:20:07,450
robot web tools I work to get a list of

00:20:05,799 --> 00:20:09,940
what's available what tools are out

00:20:07,450 --> 00:20:12,789
there and to see why demos from the

00:20:09,940 --> 00:20:14,830
browser and then later today I'll be

00:20:12,789 --> 00:20:16,179
putting these slides up online and I'll

00:20:14,830 --> 00:20:18,159
tweet the address for that and if all

00:20:16,179 --> 00:20:20,230
the code for this if you want to run it

00:20:18,159 --> 00:20:24,340
on your own robot is available on my

00:20:20,230 --> 00:20:27,730
github account along with documentation

00:20:24,340 --> 00:20:31,440
on how to run it and plenty of comments

00:20:27,730 --> 00:20:31,440

YouTube URL: https://www.youtube.com/watch?v=PPmRovpXPLM


