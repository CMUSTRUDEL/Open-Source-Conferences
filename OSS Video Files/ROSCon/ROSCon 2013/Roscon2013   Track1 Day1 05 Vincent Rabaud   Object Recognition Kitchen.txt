Title: Roscon2013   Track1 Day1 05 Vincent Rabaud   Object Recognition Kitchen
Publication date: 2014-09-02
Playlist: ROSCon 2013
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2013 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,000 --> 00:00:06,060
okay so this is work that was must be

00:00:02,850 --> 00:00:08,309
done at Willow Garage first of all this

00:00:06,060 --> 00:00:10,170
is not talk about you know yet another

00:00:08,309 --> 00:00:12,450
method project recognition there are

00:00:10,170 --> 00:00:14,219
much better smaller people that are

00:00:12,450 --> 00:00:17,250
libraries that are papers more suited

00:00:14,219 --> 00:00:19,949
conferences for that this is how we

00:00:17,250 --> 00:00:21,240
think we can make it more usable of

00:00:19,949 --> 00:00:23,130
course we'll go through a player matic

00:00:21,240 --> 00:00:25,019
and then the solution we propose to

00:00:23,130 --> 00:00:27,390
actually make objector cognition usable

00:00:25,019 --> 00:00:30,150
for for robotics and for the ross

00:00:27,390 --> 00:00:32,099
community so what's the problem we face

00:00:30,150 --> 00:00:33,600
usually well just look out there right

00:00:32,099 --> 00:00:35,040
which methods you have for direct

00:00:33,600 --> 00:00:37,320
recognition you got a bunch of

00:00:35,040 --> 00:00:40,140
techniques you got papers you got code

00:00:37,320 --> 00:00:43,079
even bsd code it's how they're good

00:00:40,140 --> 00:00:47,670
frameworks and you know they work pretty

00:00:43,079 --> 00:00:50,129
well so you got libraries to you know so

00:00:47,670 --> 00:00:51,420
what's the real problem there well is

00:00:50,129 --> 00:00:52,739
there really a problem right I mean you

00:00:51,420 --> 00:00:55,260
see those demos this is line not for

00:00:52,739 --> 00:00:57,870
example working almost real time on a

00:00:55,260 --> 00:01:00,750
laptop like two years ago I think you

00:00:57,870 --> 00:01:02,940
see complex objects you see the poses

00:01:00,750 --> 00:01:05,220
and everything cool cool that's that's

00:01:02,940 --> 00:01:08,850
nice but really like what you need to

00:01:05,220 --> 00:01:11,130
make that usable on a robot well

00:01:08,850 --> 00:01:12,810
actually it was tough for us to think on

00:01:11,130 --> 00:01:14,880
why we're not using all those techniques

00:01:12,810 --> 00:01:17,970
easily on a robot so we had to take a

00:01:14,880 --> 00:01:19,080
step back and think about it this is

00:01:17,970 --> 00:01:21,720
roughly how you do the object

00:01:19,080 --> 00:01:23,759
recognition and I think many people will

00:01:21,720 --> 00:01:24,869
agree with that you might not even have

00:01:23,759 --> 00:01:26,430
training for example if you're trying to

00:01:24,869 --> 00:01:27,840
look for planes you know it's just

00:01:26,430 --> 00:01:29,880
geometric definition you don't mean

00:01:27,840 --> 00:01:31,320
training you get some data you put it

00:01:29,880 --> 00:01:33,470
somewhere you can fit your model and

00:01:31,320 --> 00:01:35,189
then you put your model somewhere right

00:01:33,470 --> 00:01:36,930
same when you're trying to find your

00:01:35,189 --> 00:01:38,280
object you get some data you try to see

00:01:36,930 --> 00:01:40,560
if the model matches and then you do

00:01:38,280 --> 00:01:43,890
whatever with the object that you find

00:01:40,560 --> 00:01:46,259
are you don't find okay that seems

00:01:43,890 --> 00:01:48,119
pretty simple but what's happening

00:01:46,259 --> 00:01:49,740
actually in practice all the vision

00:01:48,119 --> 00:01:51,689
people they work on that right that's a

00:01:49,740 --> 00:01:53,689
cool thing they get an image define an

00:01:51,689 --> 00:01:57,450
object and they tell you it's there and

00:01:53,689 --> 00:01:59,270
then well the database people they they

00:01:57,450 --> 00:02:01,560
can scale with a bunch of objects and

00:01:59,270 --> 00:02:03,990
that's nice but they only work on that

00:02:01,560 --> 00:02:04,890
part and then we gots maybe let's say

00:02:03,990 --> 00:02:06,960
the Ross people which is the

00:02:04,890 --> 00:02:08,489
communication people that try to figure

00:02:06,960 --> 00:02:10,080
out how to make this thing's color ball

00:02:08,489 --> 00:02:12,510
and how really to have things

00:02:10,080 --> 00:02:13,800
communicate with each other and well

00:02:12,510 --> 00:02:14,820
it's not easy to get

00:02:13,800 --> 00:02:16,890
those things working together right

00:02:14,820 --> 00:02:18,210
that's that's one thing but there's

00:02:16,890 --> 00:02:21,240
actually a big thing missing here which

00:02:18,210 --> 00:02:23,430
is like all the in between so both the

00:02:21,240 --> 00:02:24,960
circles and the arrows and this is

00:02:23,430 --> 00:02:29,910
actually what we're trying to tackle in

00:02:24,960 --> 00:02:32,340
this talk and this work so we had some

00:02:29,910 --> 00:02:34,920
design criteria when we did that that

00:02:32,340 --> 00:02:37,800
happens sometimes so we wanted it to be

00:02:34,920 --> 00:02:39,720
easy for users because if you're going

00:02:37,800 --> 00:02:41,610
to use that that probably means you want

00:02:39,720 --> 00:02:43,110
to use it to say for movie forearm

00:02:41,610 --> 00:02:44,670
planning right so you're really going to

00:02:43,110 --> 00:02:45,900
focus a lot and I'm planning and

00:02:44,670 --> 00:02:47,730
grasping you don't wanna waste your time

00:02:45,900 --> 00:02:49,740
object recognition so it should be

00:02:47,730 --> 00:02:51,960
fairly easy for you to use same for

00:02:49,740 --> 00:02:54,390
developers right if you develop your new

00:02:51,960 --> 00:02:56,340
thing your own library wherever you

00:02:54,390 --> 00:02:57,510
don't want it to be sucked into some big

00:02:56,340 --> 00:02:59,130
framework or anything right you just

00:02:57,510 --> 00:03:01,080
want to have some thin layers so that

00:02:59,130 --> 00:03:04,550
it's easy for you to put on a robots and

00:03:01,080 --> 00:03:06,480
use all of the goodies I've talked about

00:03:04,550 --> 00:03:07,920
you also want it to be non intrusive

00:03:06,480 --> 00:03:11,340
right you don't people to modify the

00:03:07,920 --> 00:03:14,340
code so that it works with Ross with a

00:03:11,340 --> 00:03:15,990
robot with everything and for that you

00:03:14,340 --> 00:03:18,060
need to make it as agnostic as possible

00:03:15,990 --> 00:03:19,920
of the robots of the setup whether you

00:03:18,060 --> 00:03:23,100
have one cameras or all def cameras and

00:03:19,920 --> 00:03:26,730
and also Ross but no worries there's a

00:03:23,100 --> 00:03:27,959
lot of ross wrappers in here scalable

00:03:26,730 --> 00:03:29,459
obviously you'd want to limit yourselves

00:03:27,959 --> 00:03:32,100
to a number of objects to where

00:03:29,459 --> 00:03:34,770
databases are you know what you can do

00:03:32,100 --> 00:03:36,000
with it but contrary to other design

00:03:34,770 --> 00:03:37,410
criteria for example you know we don't

00:03:36,000 --> 00:03:39,120
mention performance you want everything

00:03:37,410 --> 00:03:40,440
to be fast like we don't care you know

00:03:39,120 --> 00:03:42,030
we're not developing the techniques this

00:03:40,440 --> 00:03:43,500
is the work of the people developing the

00:03:42,030 --> 00:03:45,180
techniques everything in between sure

00:03:43,500 --> 00:03:48,780
that should be fast but you know the

00:03:45,180 --> 00:03:50,310
techniques that's not a problem here so

00:03:48,780 --> 00:03:51,570
what did we do for that well we reused

00:03:50,310 --> 00:03:53,760
as much as possible you know I talked

00:03:51,570 --> 00:03:55,200
about databases and so on like there are

00:03:53,760 --> 00:03:56,610
great frameworks out there so you know

00:03:55,200 --> 00:03:57,600
let's use them as much as we can and

00:03:56,610 --> 00:04:00,239
same for the object recognition

00:03:57,600 --> 00:04:01,500
techniques so what we did is defined a

00:04:00,239 --> 00:04:03,090
few standards here and there to make

00:04:01,500 --> 00:04:05,520
sure that things can communicate with

00:04:03,090 --> 00:04:07,950
each other and also a big thing that was

00:04:05,520 --> 00:04:13,170
done was this glue framework to make

00:04:07,950 --> 00:04:15,180
everything coherent so now let's look at

00:04:13,170 --> 00:04:20,000
the solution that's that would propose

00:04:15,180 --> 00:04:20,000
here and they start with a glue ooh

00:04:21,630 --> 00:04:27,540
the glue okay let's say when you're

00:04:26,190 --> 00:04:29,100
doing object recognition lets you know

00:04:27,540 --> 00:04:31,140
get something slightly more complex to

00:04:29,100 --> 00:04:33,720
get that kind of pipeline you get some

00:04:31,140 --> 00:04:35,220
image maybe with some dead you do some

00:04:33,720 --> 00:04:36,000
pre-processing it some filtering you

00:04:35,220 --> 00:04:37,710
don't want to look at what's in the

00:04:36,000 --> 00:04:39,990
background then you launch your pipeline

00:04:37,710 --> 00:04:41,550
number one but at the same time you do

00:04:39,990 --> 00:04:43,560
some kind of vote maybe some ICP

00:04:41,550 --> 00:04:47,250
whatever some refinements and then you

00:04:43,560 --> 00:04:48,930
send your info all great okay how do we

00:04:47,250 --> 00:04:50,400
code that like you know what's inside

00:04:48,930 --> 00:04:51,330
the blocks sure we can do it that's

00:04:50,400 --> 00:04:54,350
really how do we glue everything

00:04:51,330 --> 00:04:56,760
together well great let's just mobilize

00:04:54,350 --> 00:04:59,760
well yeah notice how cool you can pass a

00:04:56,760 --> 00:05:00,900
pointer that's gonna be fast and you can

00:04:59,760 --> 00:05:03,500
even access this thing that's pretty

00:05:00,900 --> 00:05:05,820
cool but I mean you know let's face it

00:05:03,500 --> 00:05:07,290
they have big problems first they were

00:05:05,820 --> 00:05:09,200
not conceived for that right they don't

00:05:07,290 --> 00:05:11,820
have a scheduler so that's pretty bad

00:05:09,200 --> 00:05:13,380
I'm sure if you've ever run them like

00:05:11,820 --> 00:05:14,730
sometimes you don't realize the

00:05:13,380 --> 00:05:16,410
northward simply because your graph

00:05:14,730 --> 00:05:19,320
doesn't finish like there's nothing

00:05:16,410 --> 00:05:20,940
checking for that they're also only C++

00:05:19,320 --> 00:05:22,470
and Ross is you know using a lot of

00:05:20,940 --> 00:05:26,700
Python so it's kind of sad to limit

00:05:22,470 --> 00:05:29,280
yourself to that if you look your your

00:05:26,700 --> 00:05:31,860
Ross graph with Erics sorry with our

00:05:29,280 --> 00:05:33,060
cute graph much better then you can see

00:05:31,860 --> 00:05:36,420
you have a lot of bonds between your

00:05:33,060 --> 00:05:38,460
sales right and this is I think so that

00:05:36,420 --> 00:05:42,330
when one dies it takes all them with it

00:05:38,460 --> 00:05:43,200
down which is just kind of messy and

00:05:42,330 --> 00:05:45,690
then you have to configure everything

00:05:43,200 --> 00:05:49,170
with throw XML which is kind of nice but

00:05:45,690 --> 00:05:50,880
kind of bit limiting so what's happened

00:05:49,170 --> 00:05:55,530
well there's the top right corner this

00:05:50,880 --> 00:05:58,860
thing called ecto which is a C++ Python

00:05:55,530 --> 00:05:59,820
framework for games in computations so

00:05:58,860 --> 00:06:01,380
you got Ross which is great for

00:05:59,820 --> 00:06:02,790
asynchronous things and then you get

00:06:01,380 --> 00:06:04,620
ecto which is really meant for

00:06:02,790 --> 00:06:05,880
synchronous things so it has scheduler

00:06:04,620 --> 00:06:07,800
it only passes pointer it's meant for

00:06:05,880 --> 00:06:09,210
speed if you go to the wiki they're

00:06:07,800 --> 00:06:13,470
going to point you to the real

00:06:09,210 --> 00:06:15,750
documentation on github and we've been

00:06:13,470 --> 00:06:17,460
terrible at advertising it sorry for

00:06:15,750 --> 00:06:21,600
that it's been ready for almost two

00:06:17,460 --> 00:06:23,820
years now but yeah it's out there please

00:06:21,600 --> 00:06:26,190
have fun this was created mostly by

00:06:23,820 --> 00:06:30,150
choice try sign who had worked on that

00:06:26,190 --> 00:06:32,310
years before on something similar for

00:06:30,150 --> 00:06:34,620
for those who don't know Troy is this

00:06:32,310 --> 00:06:35,310
crazy boost Python developer who created

00:06:34,620 --> 00:06:39,000
them

00:06:35,310 --> 00:06:42,630
crazy catkin and if you don't use catkin

00:06:39,000 --> 00:06:45,420
you know you should use catkin it's good

00:06:42,630 --> 00:06:47,010
locating it's real good so a lot of

00:06:45,420 --> 00:06:49,080
people were involved in South there so

00:06:47,010 --> 00:06:51,150
it helps you for example do those kinds

00:06:49,080 --> 00:06:53,100
of computations where you have your

00:06:51,150 --> 00:06:54,600
simple graph you get inputs outputs you

00:06:53,100 --> 00:06:57,500
connect everything together get some

00:06:54,600 --> 00:07:00,000
parameters and obviously you know it's

00:06:57,500 --> 00:07:03,660
scales very well to any kind of craft

00:07:00,000 --> 00:07:05,010
that can be a bit more crazy I won't go

00:07:03,660 --> 00:07:08,070
through the coding but that is through

00:07:05,010 --> 00:07:10,800
some of the features the way it's built

00:07:08,070 --> 00:07:14,250
and one more time this was after a few

00:07:10,800 --> 00:07:17,400
years of experience from Troy with that

00:07:14,250 --> 00:07:20,820
field all those modules are built

00:07:17,400 --> 00:07:22,260
independently in so you don't have to

00:07:20,820 --> 00:07:25,830
but that's how the most practical way

00:07:22,260 --> 00:07:27,960
works into a boosts python shell library

00:07:25,830 --> 00:07:30,390
and this way you can actually load those

00:07:27,960 --> 00:07:31,740
libraries do some static introspection

00:07:30,390 --> 00:07:33,540
and figure out some properties about

00:07:31,740 --> 00:07:36,600
your sales that inputs the outputs the

00:07:33,540 --> 00:07:38,250
documentation you have a scheduler that

00:07:36,600 --> 00:07:40,350
automatically figures out how to

00:07:38,250 --> 00:07:42,750
optimize your code how to do the multi

00:07:40,350 --> 00:07:44,280
threading and everything it's fairly

00:07:42,750 --> 00:07:46,470
flexible because you can code your sales

00:07:44,280 --> 00:07:48,120
in Python or C++ you know whatever it

00:07:46,470 --> 00:07:50,460
doesn't matter you just need to have

00:07:48,120 --> 00:07:52,860
some kind of small template for defining

00:07:50,460 --> 00:07:54,960
your cell you can link everything in

00:07:52,860 --> 00:07:56,280
Python or C++ doesn't matter actually

00:07:54,960 --> 00:07:59,130
you can do everything in C++ just

00:07:56,280 --> 00:08:01,140
slightly harder Python has some nice

00:07:59,130 --> 00:08:02,910
nice features like you know finding

00:08:01,140 --> 00:08:05,490
things just looking at your Python path

00:08:02,910 --> 00:08:08,040
and everything is just running at C++

00:08:05,490 --> 00:08:10,170
speeds so the usual ways to create your

00:08:08,040 --> 00:08:12,240
cells in C++ link them through a graph

00:08:10,170 --> 00:08:13,740
in Python the new executive Python which

00:08:12,240 --> 00:08:15,360
is going to call C++ create your graph

00:08:13,740 --> 00:08:18,120
and everything it's crazy but it's

00:08:15,360 --> 00:08:19,350
actually very very efficient you can

00:08:18,120 --> 00:08:22,620
also change your parameters at one time

00:08:19,350 --> 00:08:23,910
so it's very nice reporter typing as I

00:08:22,620 --> 00:08:24,840
said you know with this static

00:08:23,910 --> 00:08:26,790
introspection you can have a dramatic

00:08:24,840 --> 00:08:28,440
documentation you also have a few

00:08:26,790 --> 00:08:29,910
goodies like you can see your graph you

00:08:28,440 --> 00:08:33,030
have automatic benchmarking so you can

00:08:29,910 --> 00:08:36,300
know which cell is slow those soy GUI in

00:08:33,030 --> 00:08:39,900
javascript for building a graph which is

00:08:36,300 --> 00:08:41,400
kind of fun sales are very flexible like

00:08:39,900 --> 00:08:42,840
you know this whole thing is just boost

00:08:41,400 --> 00:08:44,340
in python like whatever you do in your

00:08:42,840 --> 00:08:46,950
cell is yours if you want to do browse

00:08:44,340 --> 00:08:48,780
going to do opencv whatever you know you

00:08:46,950 --> 00:08:49,150
can even put cells within cells and

00:08:48,780 --> 00:08:52,390
create

00:08:49,150 --> 00:08:53,920
those black boxes as I say doesn't

00:08:52,390 --> 00:08:55,360
depend on Ross but that doesn't mean you

00:08:53,920 --> 00:08:57,070
know there's no support for Ross so all

00:08:55,360 --> 00:08:58,420
the messages of Ross for example had

00:08:57,070 --> 00:09:01,350
been wrapped automatically for

00:08:58,420 --> 00:09:03,880
publishing subscribing and for bag

00:09:01,350 --> 00:09:07,150
reading so everything is there it's very

00:09:03,880 --> 00:09:08,740
convenient it's also it's important to

00:09:07,150 --> 00:09:10,810
notice it's one of those rare pieces of

00:09:08,740 --> 00:09:13,420
code with more tutorial samples and test

00:09:10,810 --> 00:09:15,310
than code itself one thing is because

00:09:13,420 --> 00:09:16,540
Troy's very anal about documentation the

00:09:15,310 --> 00:09:18,670
other one is because he writes very

00:09:16,540 --> 00:09:21,160
optimized code so that balance pretty

00:09:18,670 --> 00:09:26,950
well everything is on line one more time

00:09:21,160 --> 00:09:29,320
please enjoy now the database well we

00:09:26,950 --> 00:09:30,520
had to make a few decisions there too we

00:09:29,320 --> 00:09:32,590
wanted to put everything in the database

00:09:30,520 --> 00:09:33,820
like you know why put some stuff there

00:09:32,590 --> 00:09:35,350
and some stuff and the hard drive

00:09:33,820 --> 00:09:36,400
somewhere else like it's gonna be messy

00:09:35,350 --> 00:09:38,440
right just put everything in there

00:09:36,400 --> 00:09:40,120
whatever data capture whatever models

00:09:38,440 --> 00:09:43,410
you compute model could be anything you

00:09:40,120 --> 00:09:45,790
know features templates whatever mesh

00:09:43,410 --> 00:09:47,590
anything about your object how it was

00:09:45,790 --> 00:09:49,660
captured with which sensor so you just

00:09:47,590 --> 00:09:51,220
put everything in there and then we take

00:09:49,660 --> 00:09:53,050
care about retrieving the information

00:09:51,220 --> 00:09:56,320
for you for when you're doing a training

00:09:53,050 --> 00:09:57,730
or detection everything is just a big

00:09:56,320 --> 00:10:00,220
JSON string for your parameters and a

00:09:57,730 --> 00:10:01,810
bunch of binary blobs that's you know we

00:10:00,220 --> 00:10:04,540
didn't invent that paradigm that's very

00:10:01,810 --> 00:10:06,910
common for the new SQL database is like

00:10:04,540 --> 00:10:09,520
couchdb and mongodb and that's a

00:10:06,910 --> 00:10:11,320
sexually very convenience and we make

00:10:09,520 --> 00:10:12,940
sure that all the binary blobs as are as

00:10:11,320 --> 00:10:17,350
standard as possible like you know an

00:10:12,940 --> 00:10:18,610
image whatever apply mesh and so on we

00:10:17,350 --> 00:10:21,160
wanted to make sure that we're agnostic

00:10:18,610 --> 00:10:23,470
to the database to use because you know

00:10:21,160 --> 00:10:28,030
we use couch at that time it was the one

00:10:23,470 --> 00:10:29,710
we like this for several reasons and if

00:10:28,030 --> 00:10:31,120
there's another one then you know you

00:10:29,710 --> 00:10:32,890
shouldn't limit ourselves to that and

00:10:31,120 --> 00:10:34,480
actually we just implemented some thin

00:10:32,890 --> 00:10:37,180
layer and then you just have to

00:10:34,480 --> 00:10:39,550
implement a few child classes so we did

00:10:37,180 --> 00:10:42,100
it for CouchDB fall system the household

00:10:39,550 --> 00:10:44,140
database from a grasping is also wrapped

00:10:42,100 --> 00:10:45,880
and that actually allows you to have

00:10:44,140 --> 00:10:48,070
different pipelines running on different

00:10:45,880 --> 00:10:50,620
databases some could be locals and could

00:10:48,070 --> 00:10:54,670
be remote doesn't matter you know that's

00:10:50,620 --> 00:10:56,560
just handle transparently so as I said

00:10:54,670 --> 00:10:58,150
we saw these bass players just the few

00:10:56,560 --> 00:11:01,170
simple attractions you have to implement

00:10:58,150 --> 00:11:04,930
I think it's between five and ten

00:11:01,170 --> 00:11:06,580
wait does someone oh yeah just a few

00:11:04,930 --> 00:11:09,040
goodies we added that's why which was

00:11:06,580 --> 00:11:12,340
couch to it has a simple HTML interface

00:11:09,040 --> 00:11:13,570
so you can introspect your objects you

00:11:12,340 --> 00:11:14,740
know check out all the models you have

00:11:13,570 --> 00:11:17,290
all the objects you have we haven't

00:11:14,740 --> 00:11:19,840
created this little nice mesh viewer so

00:11:17,290 --> 00:11:23,650
you can see from your female database

00:11:19,840 --> 00:11:25,750
right away which objects you have ok so

00:11:23,650 --> 00:11:27,640
the pipeline's of course right you want

00:11:25,750 --> 00:11:30,280
to object recognition so so what do what

00:11:27,640 --> 00:11:31,960
do we offer the first one we implemented

00:11:30,280 --> 00:11:34,900
which is a pretty all by now is this

00:11:31,960 --> 00:11:36,370
textured object detection just standard

00:11:34,900 --> 00:11:40,090
bag of features with recheck it's

00:11:36,370 --> 00:11:42,520
actually pretty robust we've been pretty

00:11:40,090 --> 00:11:45,070
happy with it nothing crazy you know I'm

00:11:42,520 --> 00:11:47,830
not even sure that was a paper but

00:11:45,070 --> 00:11:51,270
whatever it works well then there's this

00:11:47,830 --> 00:11:54,820
other technique for transport objects so

00:11:51,270 --> 00:11:56,350
Ilya developed this by himself you know

00:11:54,820 --> 00:11:57,610
I'm going to develop transport objects

00:11:56,350 --> 00:11:59,110
as far as we know by the way it's the

00:11:57,610 --> 00:12:02,380
best method out there there was just a

00:11:59,110 --> 00:12:03,640
paper at ikura this week and great you

00:12:02,380 --> 00:12:05,680
know we had these techniques so how much

00:12:03,640 --> 00:12:07,810
did it cost to really put it in the

00:12:05,680 --> 00:12:09,430
framework well 200 lines of code that

00:12:07,810 --> 00:12:10,450
seems like much but actually most of it

00:12:09,430 --> 00:12:13,300
is just copy and paste from some

00:12:10,450 --> 00:12:15,070
templates we have 50 lines of which are

00:12:13,300 --> 00:12:17,440
just Python same thing almost just a

00:12:15,070 --> 00:12:19,210
cook and paste and what did he get in

00:12:17,440 --> 00:12:21,100
the end well in the end he basically had

00:12:19,210 --> 00:12:23,950
the pr to detect objects and picked them

00:12:21,100 --> 00:12:26,410
up just without you know dealing much

00:12:23,950 --> 00:12:29,200
with ross and that was pretty cool so we

00:12:26,410 --> 00:12:31,780
continued with other pipelines we had

00:12:29,200 --> 00:12:33,700
this old one called tabletop such an

00:12:31,780 --> 00:12:35,620
mentioned it before just very simple one

00:12:33,700 --> 00:12:37,780
but yeah you know it works well it's

00:12:35,620 --> 00:12:40,180
basically just doing some ICP on

00:12:37,780 --> 00:12:42,070
rotationally symmetric objects but

00:12:40,180 --> 00:12:43,210
whatever it was easy for us to port and

00:12:42,070 --> 00:12:44,920
then actually made the code thinner

00:12:43,210 --> 00:12:46,839
because they didn't have to deal with

00:12:44,920 --> 00:12:48,160
the action observer with the messages

00:12:46,839 --> 00:12:50,800
and everything it was using what was

00:12:48,160 --> 00:12:53,050
tendered in Ross actually the wrappers

00:12:50,800 --> 00:12:55,089
we created same thing with my

00:12:53,050 --> 00:12:56,260
neurologist in opencv so you know you

00:12:55,089 --> 00:13:00,820
basically have your cells that is

00:12:56,260 --> 00:13:02,440
calling the library that's it and enya

00:13:00,820 --> 00:13:05,110
so that's what we have to offer right

00:13:02,440 --> 00:13:07,570
now there are actually a few other

00:13:05,110 --> 00:13:10,210
pipelines that we have one is obviously

00:13:07,570 --> 00:13:11,740
for model capture because some

00:13:10,210 --> 00:13:13,939
techniques do require for example 23

00:13:11,740 --> 00:13:15,619
model it's a case of line mode where you

00:13:13,939 --> 00:13:18,229
during to bunch of random views right so

00:13:15,619 --> 00:13:20,359
you need your image file but mostly if

00:13:18,229 --> 00:13:23,359
you're going to recognize an object well

00:13:20,359 --> 00:13:24,619
it's fully for goal and the main goal is

00:13:23,359 --> 00:13:27,199
usually grasping so if you don't have a

00:13:24,619 --> 00:13:30,829
mess can be pretty tough to pick up your

00:13:27,199 --> 00:13:33,919
object so we develop this pipeline I'll

00:13:30,829 --> 00:13:35,539
get back to it later just another tool

00:13:33,919 --> 00:13:37,009
simple as I said for line magneto

00:13:35,539 --> 00:13:38,869
generate a bunch of random views well

00:13:37,009 --> 00:13:41,359
actually the same thing for transparent

00:13:38,869 --> 00:13:45,109
objects so whatever we have a view

00:13:41,359 --> 00:13:47,509
generator here cross integration so the

00:13:45,109 --> 00:13:49,279
whole goal was really to make the

00:13:47,509 --> 00:13:50,809
framework easy for developers and users

00:13:49,279 --> 00:13:52,519
one more time so that you don't have to

00:13:50,809 --> 00:13:54,259
care necessarily about all those things

00:13:52,519 --> 00:13:57,739
r us is really used but only on the

00:13:54,259 --> 00:13:59,779
outside for communication but we're

00:13:57,739 --> 00:14:01,099
still using it a lot so whatever we're

00:13:59,779 --> 00:14:02,689
doing here for recognition can you just

00:14:01,099 --> 00:14:05,539
plug in your asus and that will work but

00:14:02,689 --> 00:14:08,659
you can also call or listen to whatever

00:14:05,539 --> 00:14:10,789
ross topics or even bags and pull the

00:14:08,659 --> 00:14:12,439
data from their recognize objects well

00:14:10,789 --> 00:14:16,099
also obviously publishing some messages

00:14:12,439 --> 00:14:17,479
some messages we came up with to define

00:14:16,099 --> 00:14:20,539
what we're seeing where and so on

00:14:17,479 --> 00:14:21,769
there's an excellent server there's also

00:14:20,539 --> 00:14:23,419
novice plugging where you can see what's

00:14:21,769 --> 00:14:24,979
happening so it's taking the message

00:14:23,419 --> 00:14:26,959
figuring out which object getting to the

00:14:24,979 --> 00:14:29,989
database loading the mesh and putting it

00:14:26,959 --> 00:14:33,289
in our ways it's also integrated with

00:14:29,989 --> 00:14:36,139
movies they didn't talk about it but it

00:14:33,289 --> 00:14:38,509
is they did the job so actually now you

00:14:36,139 --> 00:14:40,489
can just call this get the mesh sorry

00:14:38,509 --> 00:14:42,649
get the message same thing get the mesh

00:14:40,489 --> 00:14:45,529
and plan around your object or actually

00:14:42,649 --> 00:14:48,559
pick it up okay so this is actually what

00:14:45,529 --> 00:14:50,299
we have right now and what are we

00:14:48,559 --> 00:14:52,549
working on or what needs to be improved

00:14:50,299 --> 00:14:53,989
with that well better pipelines the

00:14:52,549 --> 00:14:56,059
capture you saw is actually pretty

00:14:53,989 --> 00:14:58,309
course it's religious figuring out the

00:14:56,059 --> 00:15:01,099
post from the dots the pattern and then

00:14:58,309 --> 00:15:03,199
merging everything together that's cool

00:15:01,099 --> 00:15:05,869
but that's really not you know good

00:15:03,199 --> 00:15:09,679
enough so Maria nila actually that are

00:15:05,869 --> 00:15:11,209
here developed a technique for model

00:15:09,679 --> 00:15:13,879
capture and same thing there were a few

00:15:11,209 --> 00:15:16,850
out there this one just you know works

00:15:13,879 --> 00:15:18,529
pretty damn well and the code is online

00:15:16,850 --> 00:15:21,050
we just need a thing to write a few

00:15:18,529 --> 00:15:24,430
tutorials to really use it in there but

00:15:21,050 --> 00:15:28,910
just works and pretty accurate models

00:15:24,430 --> 00:15:31,579
line muds right now we return you the

00:15:28,910 --> 00:15:34,069
pose during which the model was captured

00:15:31,579 --> 00:15:35,480
so it's not instantly very precise so we

00:15:34,069 --> 00:15:37,579
need to do nice if you step in there and

00:15:35,480 --> 00:15:40,370
also we just have a collar modality that

00:15:37,579 --> 00:15:43,750
manual age is added so we need to play

00:15:40,370 --> 00:15:46,069
with that a bit more transparent objects

00:15:43,750 --> 00:15:47,209
actually right now to train your object

00:15:46,069 --> 00:15:48,769
you need to have a painted version of

00:15:47,209 --> 00:15:50,990
your objects you do some kin phone edge

00:15:48,769 --> 00:15:52,880
you get to mesh and then you play with

00:15:50,990 --> 00:15:54,670
that or you can have a CAD model but

00:15:52,880 --> 00:15:58,180
actually Amelia's working technique to

00:15:54,670 --> 00:16:01,540
learn the object without painting it

00:15:58,180 --> 00:16:04,759
it's pretty crazy but yeah that works

00:16:01,540 --> 00:16:05,660
well so putting more pipelines for those

00:16:04,759 --> 00:16:07,670
that are familiar with object

00:16:05,660 --> 00:16:09,319
recognition the parts based object

00:16:07,670 --> 00:16:12,500
recognition by the government on is the

00:16:09,319 --> 00:16:15,709
one that one too Pascal VLC challenges I

00:16:12,500 --> 00:16:16,699
think 2009-2010 or 2010-2011 so it's a

00:16:15,709 --> 00:16:19,550
pretty good technique it's actually

00:16:16,699 --> 00:16:22,639
recognizes articulated objects like

00:16:19,550 --> 00:16:24,649
bikes or bodies or whatever dogs in song

00:16:22,639 --> 00:16:26,540
so we had an intern implementing age

00:16:24,649 --> 00:16:28,550
works pretty well we haven't put in it

00:16:26,540 --> 00:16:30,079
yet because the training is actually be

00:16:28,550 --> 00:16:32,480
pragmatic you need to select by hand a

00:16:30,079 --> 00:16:34,339
bunch of parts but if you just load the

00:16:32,480 --> 00:16:36,470
model so that data put online like I

00:16:34,339 --> 00:16:38,600
think you put 10 to 20 then it works so

00:16:36,470 --> 00:16:39,829
yeah which the coatings don't mind if

00:16:38,600 --> 00:16:42,920
anybody's interested in collaborating

00:16:39,829 --> 00:16:45,350
and speeding that up please more

00:16:42,920 --> 00:16:47,600
integration so object manipulation is

00:16:45,350 --> 00:16:49,310
the last part of the pipeline with move

00:16:47,600 --> 00:16:52,430
it and planning and everything that's

00:16:49,310 --> 00:16:54,920
still a bit missing it's still using the

00:16:52,430 --> 00:16:57,500
old tabletop the new one is multi mais

00:16:54,920 --> 00:17:01,060
much faster complies to all the standard

00:16:57,500 --> 00:17:03,230
so really that's being switched

00:17:01,060 --> 00:17:05,089
something called a DB interface so there

00:17:03,230 --> 00:17:07,669
is a household give interface would be

00:17:05,089 --> 00:17:10,100
nice maybe to agree on a few standards

00:17:07,669 --> 00:17:11,990
there but I think yeah manipulation is

00:17:10,100 --> 00:17:15,679
working with movie to clean all that so

00:17:11,990 --> 00:17:18,079
should be out there fairly soon a rep

00:17:15,679 --> 00:17:20,870
would be very nice so the messages were

00:17:18,079 --> 00:17:23,360
created a year ago the guts changed

00:17:20,870 --> 00:17:24,829
during last year a thing that getting

00:17:23,360 --> 00:17:26,510
pretty stable now so it would be nice

00:17:24,829 --> 00:17:28,650
fully to ask everybody what they think

00:17:26,510 --> 00:17:31,500
of them are the flexible enough

00:17:28,650 --> 00:17:33,090
and so on and then some people

00:17:31,500 --> 00:17:34,830
interested in having the DD beads on

00:17:33,090 --> 00:17:36,960
part has nothing to do with object

00:17:34,830 --> 00:17:41,760
recognition indeed it could be some

00:17:36,960 --> 00:17:44,760
package so sure why not the conclusion

00:17:41,760 --> 00:17:47,640
already good we were late so now we're

00:17:44,760 --> 00:17:50,880
going to be in time everything is out

00:17:47,640 --> 00:17:55,080
there already in packages it's all bs de

00:17:50,880 --> 00:17:57,600
C++ and Python XO you can even compile

00:17:55,080 --> 00:17:59,640
it without without Ross I mean as i said

00:17:57,600 --> 00:18:01,860
is independent it you just need catkin

00:17:59,640 --> 00:18:05,160
we got bindings for a bunch of libraries

00:18:01,860 --> 00:18:07,170
out there opencv and so on for the core

00:18:05,160 --> 00:18:08,340
object recognition you really have the

00:18:07,170 --> 00:18:10,320
core that has nothing to do with ross

00:18:08,340 --> 00:18:12,240
and then messages and the ross with all

00:18:10,320 --> 00:18:15,510
the plugins and an actual need servers

00:18:12,240 --> 00:18:18,690
and the for pipelines and mentions and

00:18:15,510 --> 00:18:21,660
the few extra pipelines there so yeah

00:18:18,690 --> 00:18:23,100
that's that's basically it so I hope I

00:18:21,660 --> 00:18:24,360
convinced you that you know this is not

00:18:23,100 --> 00:18:25,740
about sucking everybody else is working

00:18:24,360 --> 00:18:27,120
for some library or anything it's just

00:18:25,740 --> 00:18:30,030
about integration how can make

00:18:27,120 --> 00:18:32,970
everything collaborate better so please

00:18:30,030 --> 00:18:34,230
you know if you feel like it your work

00:18:32,970 --> 00:18:35,940
you know it's going to be yours just I

00:18:34,230 --> 00:18:37,710
have to add a few lines of code or we

00:18:35,940 --> 00:18:39,870
could create a package for it that would

00:18:37,710 --> 00:18:41,430
just make your object commission or your

00:18:39,870 --> 00:18:43,290
database or anything out there just

00:18:41,430 --> 00:18:44,910
interface easily so just go to the wiki

00:18:43,290 --> 00:18:47,370
it has the pointers to the real

00:18:44,910 --> 00:18:49,520
documentation in github and and that

00:18:47,370 --> 00:18:49,520
would

00:18:55,690 --> 00:19:07,919
I will know type cake thanks for you

00:18:57,909 --> 00:19:11,980
talk are there some questions a lot of

00:19:07,919 --> 00:19:14,139
new robotics perception pipelines these

00:19:11,980 --> 00:19:17,950
days are very interactive so there was a

00:19:14,139 --> 00:19:20,500
workshop at a crew so is it possible to

00:19:17,950 --> 00:19:22,840
implement something like Oliver's Brock

00:19:20,500 --> 00:19:25,690
pushing objects around to determine your

00:19:22,840 --> 00:19:28,960
kinematics or separating objects on a

00:19:25,690 --> 00:19:31,629
table if there's clever so one of the

00:19:28,960 --> 00:19:33,639
paradigms we had in here was a basement

00:19:31,629 --> 00:19:35,980
snapshot how much can you recover right

00:19:33,639 --> 00:19:37,570
to take a picture 2d 3d and what can you

00:19:35,980 --> 00:19:39,490
find that's really the whole paradigm

00:19:37,570 --> 00:19:41,620
and then use a cute or graph now what

00:19:39,490 --> 00:19:43,389
you can do is actually in each cell you

00:19:41,620 --> 00:19:44,470
each cell is a piece of code you can

00:19:43,389 --> 00:19:46,330
have some studying variable you can have

00:19:44,470 --> 00:19:48,940
your own local database and you can keep

00:19:46,330 --> 00:19:50,110
track of things right and therefore if

00:19:48,940 --> 00:19:53,049
you see an object and you move your

00:19:50,110 --> 00:19:54,250
camera you can adapt those things we

00:19:53,049 --> 00:19:56,399
thought it would be better actually to

00:19:54,250 --> 00:19:59,769
do a whole tracking or maybe some

00:19:56,399 --> 00:20:01,570
environments map sorry a semantic

00:19:59,769 --> 00:20:03,909
mapping and then keep things in there

00:20:01,570 --> 00:20:05,379
but nothing with the way i would do is i

00:20:03,909 --> 00:20:06,639
mean i described the one way which would

00:20:05,379 --> 00:20:08,110
work in this framework the way I would

00:20:06,639 --> 00:20:10,000
do it is really had a server that has

00:20:08,110 --> 00:20:12,309
this environment map call that thing

00:20:10,000 --> 00:20:14,320
gets a result back with a pose moves the

00:20:12,309 --> 00:20:16,450
camera gets UTF therefore gives a new

00:20:14,320 --> 00:20:19,360
tf2 the pipeline gets a new results and

00:20:16,450 --> 00:20:21,039
then updates are perfectly like

00:20:19,360 --> 00:20:23,590
otherwise you're going to start complex

00:20:21,039 --> 00:20:26,470
affine that thing which you can but I

00:20:23,590 --> 00:20:27,940
don't know I think it's better to deal

00:20:26,470 --> 00:20:35,250
with optima and everything for example

00:20:27,940 --> 00:20:35,250
separately more questions okay

00:20:46,220 --> 00:20:51,150
most of your talk focused on object

00:20:48,990 --> 00:20:52,620
recognition but it seemed like some of

00:20:51,150 --> 00:20:55,890
the improvements we've made in terms of

00:20:52,620 --> 00:20:57,660
building generic computation graphs and

00:20:55,890 --> 00:20:59,790
dealing with the problems of note let's

00:20:57,660 --> 00:21:02,670
have broader implications can you speak

00:20:59,790 --> 00:21:04,260
to other domains this might be applied

00:21:02,670 --> 00:21:05,820
to or whether there's conversation

00:21:04,260 --> 00:21:12,860
between this project and raw score

00:21:05,820 --> 00:21:12,860
moving forward so one more time this

00:21:13,310 --> 00:21:19,140
this this framework ecto was created by

00:21:17,070 --> 00:21:21,240
hy het experience with it with a physics

00:21:19,140 --> 00:21:24,510
community is tough previously ended up

00:21:21,240 --> 00:21:25,740
on the South Pole and Troy was never

00:21:24,510 --> 00:21:27,060
impressed by it's like yeah just brought

00:21:25,740 --> 00:21:28,380
six thousand lines of code and does it

00:21:27,060 --> 00:21:29,910
think that's cool you know like this is

00:21:28,380 --> 00:21:31,290
definitely not in you there are people

00:21:29,910 --> 00:21:32,550
building better schedules out there we

00:21:31,290 --> 00:21:35,640
talked to some people at Berkeley for

00:21:32,550 --> 00:21:39,870
that and you know the cool thing about

00:21:35,640 --> 00:21:41,400
it here is that it's Python in C++ it is

00:21:39,870 --> 00:21:43,080
doing but at the same time there are

00:21:41,400 --> 00:21:45,150
definitely better things out there if

00:21:43,080 --> 00:21:47,820
you want for example to jump data onto a

00:21:45,150 --> 00:21:49,380
GPU at the same time and CPU so really

00:21:47,820 --> 00:21:52,020
like the goal here is we have something

00:21:49,380 --> 00:21:55,100
usable not necessarily crazy optimized

00:21:52,020 --> 00:21:58,290
on the CPU yeah it's pretty good now

00:21:55,100 --> 00:22:00,470
indeed Troy was definitely working on

00:21:58,290 --> 00:22:02,580
the core of Ross and we're talking about

00:22:00,470 --> 00:22:04,920
with the core team about how to

00:22:02,580 --> 00:22:07,230
integrate that in there actually was for

00:22:04,920 --> 00:22:09,150
example the testbed for catkin too just

00:22:07,230 --> 00:22:10,590
so you know so the call was definitely

00:22:09,150 --> 00:22:12,480
involved but indeed we've talked already

00:22:10,590 --> 00:22:13,710
to see how we could make things faster

00:22:12,480 --> 00:22:15,570
for the core right we've talked several

00:22:13,710 --> 00:22:17,160
times about replacing messages by

00:22:15,570 --> 00:22:20,460
pointers if your local is going to be

00:22:17,160 --> 00:22:21,900
faster it can make sense sometimes like

00:22:20,460 --> 00:22:23,850
if your drinks think synchronously

00:22:21,900 --> 00:22:26,040
definitely asynchronously it to be

00:22:23,850 --> 00:22:29,550
tougher but so how much can be leveraged

00:22:26,040 --> 00:22:33,090
2x2 or notes it's definitely there and

00:22:29,550 --> 00:22:36,570
those guys are I mean everybody all

00:22:33,090 --> 00:22:38,790
mostly those guys know about ecto now so

00:22:36,570 --> 00:22:42,270
yeah please if you think anything in

00:22:38,790 --> 00:22:43,770
there could be reused for the core like

00:22:42,270 --> 00:22:45,000
the fact that it's Python suppose was

00:22:43,770 --> 00:22:47,810
agnostic that can be actually pretty

00:22:45,000 --> 00:22:47,810

YouTube URL: https://www.youtube.com/watch?v=YNVuCCc1ss4


