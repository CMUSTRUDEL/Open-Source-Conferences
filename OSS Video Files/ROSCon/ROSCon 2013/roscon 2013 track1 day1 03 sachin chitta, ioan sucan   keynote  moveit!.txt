Title: roscon 2013 track1 day1 03 sachin chitta, ioan sucan   keynote  moveit!
Publication date: 2014-08-31
Playlist: ROSCon 2013
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2013 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:01,250 --> 00:00:12,660
thanks a lot brian for the introduction

00:00:04,520 --> 00:00:15,929
no picture of me so welcome to the talk

00:00:12,660 --> 00:00:17,550
on move it I'm Sergeant cheetah I work

00:00:15,929 --> 00:00:21,480
for willow garage I've been there more

00:00:17,550 --> 00:00:24,420
than five years now the other people on

00:00:21,480 --> 00:00:27,449
the team yawn hoop bran already

00:00:24,420 --> 00:00:30,000
introduced acorn Polly who's sitting

00:00:27,449 --> 00:00:33,510
next to you on is also a key member of

00:00:30,000 --> 00:00:36,780
the movie team and of course we can't do

00:00:33,510 --> 00:00:41,219
this without a community of developers

00:00:36,780 --> 00:00:43,620
so there's a huge list of people that we

00:00:41,219 --> 00:00:46,410
want to thank and is just impossible to

00:00:43,620 --> 00:00:48,149
list every one on one slide but I would

00:00:46,410 --> 00:00:52,469
like to recognize all the people at

00:00:48,149 --> 00:00:54,329
willow all the names listed there for

00:00:52,469 --> 00:00:59,039
helping out and the Ross and PR two

00:00:54,329 --> 00:01:01,680
communities for being so helpful so over

00:00:59,039 --> 00:01:03,780
the last five years we've seen a great

00:01:01,680 --> 00:01:07,680
deal of interest in the personal

00:01:03,780 --> 00:01:10,799
robotics area so it started quite a

00:01:07,680 --> 00:01:12,780
while back the pr2 came out about I

00:01:10,799 --> 00:01:16,229
think we released it actually about

00:01:12,780 --> 00:01:19,320
three years ago at a Kura in the middle

00:01:16,229 --> 00:01:22,409
is the Cairo part which was developed

00:01:19,320 --> 00:01:28,229
here at front of her eppa on the right

00:01:22,409 --> 00:01:31,259
is the herb robot from CMU and the the

00:01:28,229 --> 00:01:33,270
research in personal robotics was driven

00:01:31,259 --> 00:01:36,240
by this idea of being able to have

00:01:33,270 --> 00:01:38,610
robots in the home and the cool part of

00:01:36,240 --> 00:01:42,450
what happened over the last five years

00:01:38,610 --> 00:01:44,670
is we kept pushing the cutting edge so

00:01:42,450 --> 00:01:48,240
personal robotics in the home is hard

00:01:44,670 --> 00:01:50,189
you have to work in human environments

00:01:48,240 --> 00:01:53,310
where you know you're going to be right

00:01:50,189 --> 00:01:56,219
next to the people and safety is

00:01:53,310 --> 00:01:59,640
incredibly important but the advantage

00:01:56,219 --> 00:02:01,530
of pushing on something like this on the

00:01:59,640 --> 00:02:04,590
research front is that a lot of

00:02:01,530 --> 00:02:06,630
technology was developed and although

00:02:04,590 --> 00:02:07,490
this all this technology is not mature

00:02:06,630 --> 00:02:10,759
we

00:02:07,490 --> 00:02:12,130
now start thinking of applications where

00:02:10,759 --> 00:02:14,810
some of the technology we've developed

00:02:12,130 --> 00:02:16,610
can actually enable something new

00:02:14,810 --> 00:02:19,610
something novel something we haven't

00:02:16,610 --> 00:02:21,380
seen before and we already started to

00:02:19,610 --> 00:02:23,660
see that a little bit and it's starting

00:02:21,380 --> 00:02:26,480
to happen more on the industrial side

00:02:23,660 --> 00:02:28,750
mode on the services side so on the left

00:02:26,480 --> 00:02:31,730
is a big pooka robot it's an

00:02:28,750 --> 00:02:35,000
omnidirectional base with a big cooker

00:02:31,730 --> 00:02:36,950
arm on it used for inspection pass so

00:02:35,000 --> 00:02:40,280
this is a mobile manipulation robot

00:02:36,950 --> 00:02:42,950
actually out there and it's probably

00:02:40,280 --> 00:02:45,260
going to get deployed in the next few

00:02:42,950 --> 00:02:48,290
years and on the right is the Robert

00:02:45,260 --> 00:02:52,760
work which you can go out and see in the

00:02:48,290 --> 00:02:56,750
epub booth and again this is you can see

00:02:52,760 --> 00:02:59,090
a path to actual applications coming

00:02:56,750 --> 00:03:01,730
along with these kinds of robot

00:02:59,090 --> 00:03:05,739
especially on the industrial side so

00:03:01,730 --> 00:03:10,700
it's a fantastic time to be in this area

00:03:05,739 --> 00:03:14,239
and it's for us being the developers of

00:03:10,700 --> 00:03:17,359
a lot of the software it's a fantastic

00:03:14,239 --> 00:03:19,519
opportunity to see all these possible

00:03:17,359 --> 00:03:23,420
applications that can come out so what

00:03:19,519 --> 00:03:26,299
is move it move it is new software we've

00:03:23,420 --> 00:03:29,030
been building it for the last almost the

00:03:26,299 --> 00:03:31,459
last couple of years and basically it's

00:03:29,030 --> 00:03:35,000
a software that integrates motion

00:03:31,459 --> 00:03:37,010
planning kinematics control collision

00:03:35,000 --> 00:03:39,560
checking with an eye towards

00:03:37,010 --> 00:03:42,500
applications which in mobile

00:03:39,560 --> 00:03:45,230
manipulation so this does not mean just

00:03:42,500 --> 00:03:48,549
mobile but also fixed manipulation pass

00:03:45,230 --> 00:03:51,380
so it includes integrating perception

00:03:48,549 --> 00:03:53,750
grasping control navigation and

00:03:51,380 --> 00:03:56,180
manipulation so that you can do new

00:03:53,750 --> 00:03:58,370
interesting applications in a lot of

00:03:56,180 --> 00:04:02,269
areas and so over here you see two

00:03:58,370 --> 00:04:04,760
robots working in the arvest visualizer

00:04:02,269 --> 00:04:06,300
whip move it on the left is the modem

00:04:04,760 --> 00:04:08,760
and robot

00:04:06,300 --> 00:04:10,650
and on the right is the pr2 and we're

00:04:08,760 --> 00:04:12,990
going to show you a little bit of a live

00:04:10,650 --> 00:04:16,380
demo towards the end of this top for

00:04:12,990 --> 00:04:19,830
this and what really motivated us what

00:04:16,380 --> 00:04:22,260
why why are we doing this we want to

00:04:19,830 --> 00:04:24,330
build a state-of-the-art platform we

00:04:22,260 --> 00:04:25,980
want to take everything that is on the

00:04:24,330 --> 00:04:27,780
cutting edge everything that we've

00:04:25,980 --> 00:04:29,220
developed and other people in the

00:04:27,780 --> 00:04:31,920
community have developed over the last

00:04:29,220 --> 00:04:33,840
five years targeted maybe towards

00:04:31,920 --> 00:04:36,570
personal robotic service robotics and

00:04:33,840 --> 00:04:39,930
offer that as a common platform just

00:04:36,570 --> 00:04:42,840
like Ross allows you to build all these

00:04:39,930 --> 00:04:44,840
capabilities move it lets you build

00:04:42,840 --> 00:04:47,460
capabilities which integrate

00:04:44,840 --> 00:04:51,870
specifically perception manipulation and

00:04:47,460 --> 00:04:55,680
navigation and really when we started

00:04:51,870 --> 00:04:58,170
off we said the simple model for us is

00:04:55,680 --> 00:04:59,700
simple things should be easy if you want

00:04:58,170 --> 00:05:01,590
to do something simple with your robot

00:04:59,700 --> 00:05:04,500
you have a new robot and you want to get

00:05:01,590 --> 00:05:06,450
up and running it shouldn't they days or

00:05:04,500 --> 00:05:09,510
weeks for you to integrate that robot

00:05:06,450 --> 00:05:11,130
and start get up and running and so it's

00:05:09,510 --> 00:05:13,890
it was really important for us to

00:05:11,130 --> 00:05:15,570
provide and out-of-the-box experience so

00:05:13,890 --> 00:05:17,580
we wanted to make sure you get the

00:05:15,570 --> 00:05:20,220
software and you can get running

00:05:17,580 --> 00:05:22,560
literally at least with the visualized

00:05:20,220 --> 00:05:24,570
version of the robot within 15-20

00:05:22,560 --> 00:05:29,160
minutes that's what we were aiming for

00:05:24,570 --> 00:05:31,230
and I think we've actually at that so we

00:05:29,160 --> 00:05:33,030
have what's called a tool called the

00:05:31,230 --> 00:05:36,180
setup assistant which I'll show a little

00:05:33,030 --> 00:05:38,340
bit a couple of videos on that but

00:05:36,180 --> 00:05:41,280
basically the idea there is to take

00:05:38,340 --> 00:05:43,890
start from the Ross representation so

00:05:41,280 --> 00:05:45,990
start from the urine EF and be able to

00:05:43,890 --> 00:05:49,440
play with the robot within a very short

00:05:45,990 --> 00:05:51,870
time the other thing that we looked at

00:05:49,440 --> 00:05:54,120
is easy to use API as we wanted to make

00:05:51,870 --> 00:05:56,669
sure there were API there was a API

00:05:54,120 --> 00:06:00,290
define at multiple levels so if you are

00:05:56,669 --> 00:06:03,270
advanced developer you know what to do

00:06:00,290 --> 00:06:06,450
with move it but at the same time we

00:06:03,270 --> 00:06:09,060
really wanted to make sure that people

00:06:06,450 --> 00:06:10,590
who want to live hired up the stack so

00:06:09,060 --> 00:06:13,110
they just want the capabilities they

00:06:10,590 --> 00:06:16,020
don't need to dive deeper can just go in

00:06:13,110 --> 00:06:19,169
easily and start working with movies so

00:06:16,020 --> 00:06:19,980
along with simple things being easy we

00:06:19,169 --> 00:06:22,470
wanted to make sure

00:06:19,980 --> 00:06:24,500
that if you if you really want to get in

00:06:22,470 --> 00:06:27,930
and do something new because this is

00:06:24,500 --> 00:06:29,910
still a new area we don't have all the

00:06:27,930 --> 00:06:32,580
solutions and if you want it to do that

00:06:29,910 --> 00:06:34,500
you can dive deeper and address all the

00:06:32,580 --> 00:06:36,750
harder problems so move it is designed

00:06:34,500 --> 00:06:38,870
to be flexible and the way we architect

00:06:36,750 --> 00:06:42,030
that is by making most of the components

00:06:38,870 --> 00:06:44,160
plugins so that way if you want you can

00:06:42,030 --> 00:06:47,610
plug in your custom component and and

00:06:44,160 --> 00:06:50,340
use it for anything you want and really

00:06:47,610 --> 00:06:52,890
the the key for us in terms of design

00:06:50,340 --> 00:06:55,500
decisions was performance we want move

00:06:52,890 --> 00:06:58,560
it to get to a stage where if you're a

00:06:55,500 --> 00:07:00,480
company or you have a product and you're

00:06:58,560 --> 00:07:02,730
putting it out and you say okay I want

00:07:00,480 --> 00:07:05,730
to ship software with this we want you

00:07:02,730 --> 00:07:07,680
to look at move it and say if I want my

00:07:05,730 --> 00:07:11,340
robots to be moving move it should be

00:07:07,680 --> 00:07:13,080
doing that that is our motivation for a

00:07:11,340 --> 00:07:15,470
lot of the design decisions we've made

00:07:13,080 --> 00:07:17,640
and that's why we've been making

00:07:15,470 --> 00:07:21,330
attempts to make this as high

00:07:17,640 --> 00:07:23,940
performance as we can so on the

00:07:21,330 --> 00:07:26,640
technical side if you look at the way

00:07:23,940 --> 00:07:29,370
robots are integrated now new robots it

00:07:26,640 --> 00:07:31,950
takes way too much time to start up and

00:07:29,370 --> 00:07:34,770
do things and what we're giving you is a

00:07:31,950 --> 00:07:36,930
set of capability so you can move higher

00:07:34,770 --> 00:07:38,790
up the stack we want to try and take

00:07:36,930 --> 00:07:40,710
care of some of the lower level things

00:07:38,790 --> 00:07:42,810
so you can move a higher up the stack

00:07:40,710 --> 00:07:45,390
and spend most of your time developing

00:07:42,810 --> 00:07:49,020
applications rather than working on the

00:07:45,390 --> 00:07:51,600
basic stuff and one of the keys that key

00:07:49,020 --> 00:07:54,150
technical area is that that we wanted to

00:07:51,600 --> 00:07:55,980
address is environmental awareness so

00:07:54,150 --> 00:07:57,810
these are robots now these are

00:07:55,980 --> 00:08:00,060
applications where the robots will be

00:07:57,810 --> 00:08:02,460
moving around in possibly cluttered

00:08:00,060 --> 00:08:04,920
workspaces there'll be people in the

00:08:02,460 --> 00:08:06,840
workspace and so it's incredibly

00:08:04,920 --> 00:08:08,700
important to have good situational

00:08:06,840 --> 00:08:12,330
awareness and there are multiple ways of

00:08:08,700 --> 00:08:14,790
doing this what we wanted to look at is

00:08:12,330 --> 00:08:17,790
integrated 3d perception so being fully

00:08:14,790 --> 00:08:20,420
aware or as well as you can be of the

00:08:17,790 --> 00:08:23,850
things around you so that you stay safe

00:08:20,420 --> 00:08:26,400
the other key thing that we think is

00:08:23,850 --> 00:08:28,050
important is motion planning so because

00:08:26,400 --> 00:08:30,240
these are dynamic environments things

00:08:28,050 --> 00:08:32,310
are constantly changing you want to be

00:08:30,240 --> 00:08:35,039
able to react faster

00:08:32,310 --> 00:08:36,659
and we're also focusing on constraint

00:08:35,039 --> 00:08:39,060
manipulation path so if you look at a

00:08:36,659 --> 00:08:40,770
lot of tasks that robots have to do in

00:08:39,060 --> 00:08:43,469
the real world there's a bunch of

00:08:40,770 --> 00:08:46,950
constraints ATF to deal with and I'll

00:08:43,469 --> 00:08:50,120
show you some examples of that so move

00:08:46,950 --> 00:08:52,710
it has evolved from the arm navigation a

00:08:50,120 --> 00:08:54,779
pipeline and the grasping pipeline so if

00:08:52,710 --> 00:08:56,460
you're familiar with a lot of the

00:08:54,779 --> 00:08:58,050
manipulation stacks in Ross you'll

00:08:56,460 --> 00:09:01,950
recognize that this is work we had done

00:08:58,050 --> 00:09:04,050
a while back but we did look at what we

00:09:01,950 --> 00:09:06,570
had done we looked at feedback from the

00:09:04,050 --> 00:09:09,150
community in particular we want to thank

00:09:06,570 --> 00:09:12,960
you all for telling us what you liked

00:09:09,150 --> 00:09:15,600
about these stacks and what you did and

00:09:12,960 --> 00:09:18,480
we took all that and incorporate those

00:09:15,600 --> 00:09:20,310
lessons learned in to move it so it is

00:09:18,480 --> 00:09:23,130
essentially a rewrite almost from

00:09:20,310 --> 00:09:27,000
scratch we've made an attempt to keep

00:09:23,130 --> 00:09:29,339
the Ross API almost the same but as I'll

00:09:27,000 --> 00:09:32,880
explain we've done things differently

00:09:29,339 --> 00:09:36,150
but for a reason so I wanted to show

00:09:32,880 --> 00:09:39,180
this video which is sort of summarizes

00:09:36,150 --> 00:09:41,100
what the state of the art was with the

00:09:39,180 --> 00:09:43,350
with the grasping pipeline and arm

00:09:41,100 --> 00:09:46,140
navigation so this shows the entire

00:09:43,350 --> 00:09:48,690
pipeline all the way from starting from

00:09:46,140 --> 00:09:52,220
taking perception data so this is 3d

00:09:48,690 --> 00:09:54,900
sensor data from us connect filtering it

00:09:52,220 --> 00:09:56,520
building an environment models in this

00:09:54,900 --> 00:09:59,190
case we're basically building an

00:09:56,520 --> 00:10:02,040
occupant secured like model using the

00:09:59,190 --> 00:10:05,010
automatic package but we augment that so

00:10:02,040 --> 00:10:07,740
we add because you don't want to be

00:10:05,010 --> 00:10:09,540
dealing just with object voxels you want

00:10:07,740 --> 00:10:12,060
to actually deal with object

00:10:09,540 --> 00:10:15,570
representations so you can input things

00:10:12,060 --> 00:10:17,910
from say object detection techniques be

00:10:15,570 --> 00:10:20,730
able to identify objects put them into

00:10:17,910 --> 00:10:22,830
the environment and then do manipulation

00:10:20,730 --> 00:10:24,690
with them so there's two types of grass

00:10:22,830 --> 00:10:27,180
planners that we have one that can

00:10:24,690 --> 00:10:29,160
directly deal with pine clouds and the

00:10:27,180 --> 00:10:32,550
other that deals with gas that have been

00:10:29,160 --> 00:10:35,880
computed offline so really the focus was

00:10:32,550 --> 00:10:39,570
what with all the that we've been doing

00:10:35,880 --> 00:10:42,030
is trying to get to a stage where we can

00:10:39,570 --> 00:10:44,640
offer almost a package set of

00:10:42,030 --> 00:10:45,420
capabilities that you can deploy very

00:10:44,640 --> 00:10:48,120
very quickly

00:10:45,420 --> 00:10:51,360
that was the focus and you can see this

00:10:48,120 --> 00:10:53,820
happening with the pr2 robot here but

00:10:51,360 --> 00:10:56,250
the cool thing is as once we started

00:10:53,820 --> 00:10:59,700
putting this out and the code out and

00:10:56,250 --> 00:11:02,100
the videos out more people started

00:10:59,700 --> 00:11:04,440
looking at these techniques and saying

00:11:02,100 --> 00:11:08,970
okay how can we use these in other

00:11:04,440 --> 00:11:11,100
applications and there's a lot of robots

00:11:08,970 --> 00:11:14,430
now using our software and you can see

00:11:11,100 --> 00:11:17,520
that the variety sort of is incredible

00:11:14,430 --> 00:11:21,000
we go all the way from the Cairo bar on

00:11:17,520 --> 00:11:23,550
the top left that is a mogul

00:11:21,000 --> 00:11:27,120
manipulation platform develop here a

00:11:23,550 --> 00:11:31,260
deeper there's the you are five and the

00:11:27,120 --> 00:11:34,020
modem and robot to the right of it in

00:11:31,260 --> 00:11:35,670
the bottom left is you project that's a

00:11:34,020 --> 00:11:39,120
fixed manipulator not a mobile

00:11:35,670 --> 00:11:42,600
manipulator then there's the rub at work

00:11:39,120 --> 00:11:44,850
our stacks have actually been run on the

00:11:42,600 --> 00:11:47,160
Robonaut if you come to actual assed

00:11:44,850 --> 00:11:51,450
year that was the demo you were saying

00:11:47,160 --> 00:11:54,240
on the DARPA robots the tomb robots with

00:11:51,450 --> 00:11:58,140
the Keuka lightweight arms and also the

00:11:54,240 --> 00:12:02,250
now so it's an incredible range this is

00:11:58,140 --> 00:12:05,160
not just so arm navigation had the word

00:12:02,250 --> 00:12:06,780
arm in it and people assume okay this is

00:12:05,160 --> 00:12:09,210
just for arms but we're no longer

00:12:06,780 --> 00:12:11,220
districting ourselves to arms so you can

00:12:09,210 --> 00:12:14,100
imagine you can probably imagine using

00:12:11,220 --> 00:12:15,780
this on a copter it hasn't been done yet

00:12:14,100 --> 00:12:19,170
and we would love to see the first

00:12:15,780 --> 00:12:21,870
person to do that but the cool part is

00:12:19,170 --> 00:12:24,870
once we started putting this out people

00:12:21,870 --> 00:12:26,780
started getting noticing this and this

00:12:24,870 --> 00:12:29,730
is actually a series of demonstrations

00:12:26,780 --> 00:12:34,290
done by the Ross industrial consortium

00:12:29,730 --> 00:12:36,030
this is the consortium led by Southwest

00:12:34,290 --> 00:12:38,150
Research Institute and Sean Edwards

00:12:36,030 --> 00:12:42,060
who's here somewhere in the audience

00:12:38,150 --> 00:12:44,970
came over to Willow Garage and worked

00:12:42,060 --> 00:12:46,950
with us on taking exactly the same

00:12:44,970 --> 00:12:49,620
software you don't saw running on the

00:12:46,950 --> 00:12:52,800
pier to modifying it and the

00:12:49,620 --> 00:12:54,720
modifications were not major mostly on

00:12:52,800 --> 00:12:56,460
the configuration side and starting to

00:12:54,720 --> 00:12:58,550
use it with the completely different

00:12:56,460 --> 00:13:00,560
robot it's a completely different arm

00:12:58,550 --> 00:13:03,019
with a completely different gripper so

00:13:00,560 --> 00:13:05,120
this is a robot IQ gripper and you can

00:13:03,019 --> 00:13:06,860
see there's a connect if you look in the

00:13:05,120 --> 00:13:10,070
video there's actually a Kinect mounted

00:13:06,860 --> 00:13:11,930
behind the robot so this is incredible

00:13:10,070 --> 00:13:14,450
this is what we would like to see

00:13:11,930 --> 00:13:16,940
happening that you'd get a robot you can

00:13:14,450 --> 00:13:18,890
package it and you say okay I either

00:13:16,940 --> 00:13:22,190
comes with move it or you're going to

00:13:18,890 --> 00:13:24,740
install move it on and and you get going

00:13:22,190 --> 00:13:26,660
immediately this is what we would like

00:13:24,740 --> 00:13:28,610
to achieve and give you these

00:13:26,660 --> 00:13:31,490
capabilities so you can start thinking

00:13:28,610 --> 00:13:36,200
of more high-level applications that you

00:13:31,490 --> 00:13:38,450
can work on and the first robot side of

00:13:36,200 --> 00:13:40,459
robots we tried move it on we're not the

00:13:38,450 --> 00:13:43,010
Pierre to this is actually video from

00:13:40,459 --> 00:13:46,550
the first simple demos that we be that

00:13:43,010 --> 00:13:48,380
we did right when we started using move

00:13:46,550 --> 00:13:50,269
it and so you can see the on the top

00:13:48,380 --> 00:13:52,839
left is actually the you are five iron

00:13:50,269 --> 00:13:56,390
which we had at that point and the

00:13:52,839 --> 00:14:00,380
bottom is the modem in arm so it's not

00:13:56,390 --> 00:14:03,020
just the pr2 in fact move it is robot

00:14:00,380 --> 00:14:05,899
agnostic you can set it up with almost

00:14:03,020 --> 00:14:07,220
any robot and be able to get up and

00:14:05,899 --> 00:14:11,029
running quickly and i'll show you an

00:14:07,220 --> 00:14:14,240
example in a second and so it's

00:14:11,029 --> 00:14:16,730
incredible how quickly these things are

00:14:14,240 --> 00:14:21,500
progressing this is a demo from the

00:14:16,730 --> 00:14:23,300
equal boot the boot at a Kura this year

00:14:21,500 --> 00:14:25,730
so this is just Whittier this is fresh

00:14:23,300 --> 00:14:30,290
video from last week this is move it

00:14:25,730 --> 00:14:34,100
running on Robert work so you on spent

00:14:30,290 --> 00:14:36,589
some time here with the folks and help

00:14:34,100 --> 00:14:38,420
them integrate it and some actions are

00:14:36,589 --> 00:14:40,550
being run on move it not all of them but

00:14:38,420 --> 00:14:42,649
you can see that immediately you can see

00:14:40,550 --> 00:14:45,050
all these applications coming into mind

00:14:42,649 --> 00:14:48,079
where you can start doing mobile

00:14:45,050 --> 00:14:50,540
manipulation actually in industry in

00:14:48,079 --> 00:14:53,270
service robotic situations and that's

00:14:50,540 --> 00:14:55,070
very cool so let me switch in park a

00:14:53,270 --> 00:14:57,769
little bit more about what move it gives

00:14:55,070 --> 00:14:59,930
you this is a cim this is a list of

00:14:57,769 --> 00:15:01,760
capabilities not necessarily complete

00:14:59,930 --> 00:15:04,790
there's a lot of other things that we

00:15:01,760 --> 00:15:06,920
would can do for you but the core set of

00:15:04,790 --> 00:15:09,270
capabilities includes collision checking

00:15:06,920 --> 00:15:11,250
so we made a large effort

00:15:09,270 --> 00:15:13,730
to try and get state-of-the-art

00:15:11,250 --> 00:15:16,560
collision checking in to move it

00:15:13,730 --> 00:15:19,110
integrated kinematics the idea with this

00:15:16,560 --> 00:15:20,900
is you start using this and the robot

00:15:19,110 --> 00:15:23,760
just starts working you don't have to

00:15:20,900 --> 00:15:26,390
think about writing your own ik solver

00:15:23,760 --> 00:15:29,420
initially you don't have to worry about

00:15:26,390 --> 00:15:33,290
integrating it you just it just works

00:15:29,420 --> 00:15:36,060
motion planning and I think we have

00:15:33,290 --> 00:15:38,310
probably the state of the art as in the

00:15:36,060 --> 00:15:42,240
best set of motion planners that you can

00:15:38,310 --> 00:15:44,370
possibly get anywhere and really

00:15:42,240 --> 00:15:46,920
integrated perception so move it

00:15:44,370 --> 00:15:49,670
actually integrates perception on the 3d

00:15:46,920 --> 00:15:53,310
side and does a lot of that for you

00:15:49,670 --> 00:15:55,470
we've been working pretty hard and in

00:15:53,310 --> 00:15:57,480
collaboration with a bunch of people to

00:15:55,470 --> 00:15:59,220
try and standardize the interface that

00:15:57,480 --> 00:16:01,590
move it operates because that's the one

00:15:59,220 --> 00:16:03,630
thing that we want to make sure happens

00:16:01,590 --> 00:16:06,120
right because controllers usually are

00:16:03,630 --> 00:16:07,470
provided by the vendor and we wanted to

00:16:06,120 --> 00:16:10,980
make sure there's some standardized

00:16:07,470 --> 00:16:12,870
interfaces vailable and move it also

00:16:10,980 --> 00:16:16,500
does execution and monitoring and I'll

00:16:12,870 --> 00:16:18,060
show you some videos but of that and the

00:16:16,500 --> 00:16:20,580
other side of cool applications I'll

00:16:18,060 --> 00:16:22,140
show you is kinematic analysis so this

00:16:20,580 --> 00:16:24,900
is useful if you're designing a new

00:16:22,140 --> 00:16:27,540
robot and more in the figure out how it

00:16:24,900 --> 00:16:30,300
will do in different situations so this

00:16:27,540 --> 00:16:33,540
is a very high level from a diagram

00:16:30,300 --> 00:16:36,570
showing what move it sort of a system

00:16:33,540 --> 00:16:39,450
level architecture of moving and really

00:16:36,570 --> 00:16:42,540
you as the user are going to live up

00:16:39,450 --> 00:16:45,150
there at the user level and you have

00:16:42,540 --> 00:16:49,440
multiple ways of getting into the system

00:16:45,150 --> 00:16:52,080
so we offer a visualizer so this is bait

00:16:49,440 --> 00:16:54,840
this is a plug-in to arvest the regular

00:16:52,080 --> 00:16:57,990
Ross visualizer what this lets you do is

00:16:54,840 --> 00:17:00,660
get up and running incredibly quickly it

00:16:57,990 --> 00:17:03,030
also lets you interact live with the

00:17:00,660 --> 00:17:05,910
robot so you can move on the end

00:17:03,030 --> 00:17:08,459
effectors you can set plans you can

00:17:05,910 --> 00:17:11,190
execute plans from there you can import

00:17:08,459 --> 00:17:13,380
CAD models if you want you can visualize

00:17:11,190 --> 00:17:16,410
all your sensitive data so this is an

00:17:13,380 --> 00:17:19,470
incredible way to get started with your

00:17:16,410 --> 00:17:22,260
robot we also have offered the regular

00:17:19,470 --> 00:17:24,780
set of Ross interfaces so these are at

00:17:22,260 --> 00:17:27,720
shins that you can incorporate into your

00:17:24,780 --> 00:17:30,210
programmatic applications but we also

00:17:27,720 --> 00:17:32,940
made an effort to provide a scripting

00:17:30,210 --> 00:17:34,950
interface so making simple things simple

00:17:32,940 --> 00:17:37,560
so if you want to move the robot to a

00:17:34,950 --> 00:17:39,480
point that should not involve 100 lines

00:17:37,560 --> 00:17:42,240
of code that should be done and within

00:17:39,480 --> 00:17:44,640
three or four lines less than that and

00:17:42,240 --> 00:17:48,210
I'll show you an example of that as well

00:17:44,640 --> 00:17:50,550
so really the focus here is on providing

00:17:48,210 --> 00:17:54,210
a good user experience and that's very

00:17:50,550 --> 00:17:57,060
important for us so getting down into

00:17:54,210 --> 00:18:00,120
the the actual components for collision

00:17:57,060 --> 00:18:02,340
checking we offer KU libraries one SF CL

00:18:00,120 --> 00:18:04,890
which is the flexible collision library

00:18:02,340 --> 00:18:07,170
and really what we've done is taken a

00:18:04,890 --> 00:18:09,120
lot of the state of the art here so we

00:18:07,170 --> 00:18:11,010
work with the nation minocha who

00:18:09,120 --> 00:18:12,810
develops the state of the art and

00:18:11,010 --> 00:18:14,850
collision checking and we've taken a lot

00:18:12,810 --> 00:18:18,030
of its libraries and pull them together

00:18:14,850 --> 00:18:21,390
into one package that you can use so fcl

00:18:18,030 --> 00:18:24,230
is it gives you about 3,000 full body

00:18:21,390 --> 00:18:27,090
collision checks per second for the pr2

00:18:24,230 --> 00:18:29,460
the cool part is it does that with

00:18:27,090 --> 00:18:32,220
real-time sensor data and now so the

00:18:29,460 --> 00:18:35,640
data are coming from the connect or from

00:18:32,220 --> 00:18:37,770
any 3d sensor goes directly into the

00:18:35,640 --> 00:18:42,960
octavia representation which is off the

00:18:37,770 --> 00:18:45,470
map and it's a native data structure

00:18:42,960 --> 00:18:48,000
inside fcl so you don't even have to

00:18:45,470 --> 00:18:51,030
convert anything you just pass it

00:18:48,000 --> 00:18:53,330
indirectly and fcl knows how to deal

00:18:51,030 --> 00:18:57,080
with it which is an incredible advantage

00:18:53,330 --> 00:18:59,190
and of course fcl is doing mesh to mesh

00:18:57,080 --> 00:19:02,340
collision checking so that gives you a

00:18:59,190 --> 00:19:05,700
pretty high fidelity collision checking

00:19:02,340 --> 00:19:07,890
the next thing is proximity collision

00:19:05,700 --> 00:19:10,920
detection so that is slightly different

00:19:07,890 --> 00:19:13,020
it uses an approximately mobile so on

00:19:10,920 --> 00:19:16,200
the left you can see the approximation

00:19:13,020 --> 00:19:19,290
of the model for the pr2 using a bunch

00:19:16,200 --> 00:19:21,570
of six years it uses a 3d distance

00:19:19,290 --> 00:19:24,060
transform so that way you can you can

00:19:21,570 --> 00:19:27,510
figure out actually the distance to the

00:19:24,060 --> 00:19:29,310
nearest obstacle it's very fast so you

00:19:27,510 --> 00:19:32,130
can see there's almost an order of

00:19:29,310 --> 00:19:34,110
magnitude difference the drawback is

00:19:32,130 --> 00:19:35,940
it's not as accurate but there are a lot

00:19:34,110 --> 00:19:38,519
of applications where something

00:19:35,940 --> 00:19:41,820
this is enough for you and the fact that

00:19:38,519 --> 00:19:44,490
it's so fast offers a lot of advantage

00:19:41,820 --> 00:19:47,669
in some applications on the motion

00:19:44,490 --> 00:19:49,980
planning side like I mentioned we wanted

00:19:47,669 --> 00:19:52,110
to keep everything flexible so all the

00:19:49,980 --> 00:19:54,179
motion planners are integrated through a

00:19:52,110 --> 00:19:56,220
plug in negative phase so this allows

00:19:54,179 --> 00:19:58,710
you to start using if you have your own

00:19:56,220 --> 00:20:01,860
library all you have to do is wrap it in

00:19:58,710 --> 00:20:04,679
a simple using a simple class and you

00:20:01,860 --> 00:20:07,950
can go start running with this and

00:20:04,679 --> 00:20:10,710
through move it we can integrate any set

00:20:07,950 --> 00:20:12,179
of motion planners with your robot the

00:20:10,710 --> 00:20:16,289
ones that are automatically configured

00:20:12,179 --> 00:20:18,509
right now the main one is OMP oh this is

00:20:16,289 --> 00:20:20,129
the open motion planning library gives

00:20:18,509 --> 00:20:23,129
you a bunch of sampling baseline of

00:20:20,129 --> 00:20:27,019
minors and it is a really incredible

00:20:23,129 --> 00:20:30,629
code the software won the open source

00:20:27,019 --> 00:20:33,600
challenge award last year and so it's

00:20:30,629 --> 00:20:35,639
great well tested it's our workhorse and

00:20:33,600 --> 00:20:39,450
this is the one that we recommend for

00:20:35,639 --> 00:20:41,419
for a lot of applications for more

00:20:39,450 --> 00:20:44,600
search based stuff so if you're doing

00:20:41,419 --> 00:20:48,240
navigation and you want to use mode a

00:20:44,600 --> 00:20:50,120
star type of planners we have the search

00:20:48,240 --> 00:20:53,009
based planning library this comes out of

00:20:50,120 --> 00:20:56,519
CMU own pill comes out of rice

00:20:53,009 --> 00:21:01,019
university and we offer an integration

00:20:56,519 --> 00:21:04,440
to both of these so let me pop I

00:21:01,019 --> 00:21:06,330
mentioned how easy it is to get up and

00:21:04,440 --> 00:21:08,789
running with move it and this is

00:21:06,330 --> 00:21:11,879
actually a live demo this is sorry it's

00:21:08,789 --> 00:21:15,149
not a live demo it's real time as in its

00:21:11,879 --> 00:21:19,320
not sped up video but it basically shows

00:21:15,149 --> 00:21:22,320
you how you can import a robot model and

00:21:19,320 --> 00:21:24,450
to move it into the setup assistant and

00:21:22,320 --> 00:21:26,159
basically start working with moving a

00:21:24,450 --> 00:21:28,649
lot of the steps you're actually seeing

00:21:26,159 --> 00:21:31,980
being done here are optional you don't

00:21:28,649 --> 00:21:33,929
have to do a lot of these mostly you

00:21:31,980 --> 00:21:35,730
just have to define what's called the SR

00:21:33,929 --> 00:21:38,279
DF and I think you on will show you a

00:21:35,730 --> 00:21:41,669
little bit of a demo of that but you can

00:21:38,279 --> 00:21:42,870
see how quickly you can get up and

00:21:41,669 --> 00:21:45,530
running

00:21:42,870 --> 00:21:47,700
with the robot model so you can start

00:21:45,530 --> 00:21:50,160
there's a bunch of things that you have

00:21:47,700 --> 00:21:52,710
to do so you define how the robot is

00:21:50,160 --> 00:21:54,750
connected to the world because this is

00:21:52,710 --> 00:21:57,450
not something that's available through

00:21:54,750 --> 00:22:00,059
the you rdf right now you have to you

00:21:57,450 --> 00:22:01,980
can add robot poses so in different

00:22:00,059 --> 00:22:04,200
cases if you have home positions or

00:22:01,980 --> 00:22:06,559
particular positions that are frequently

00:22:04,200 --> 00:22:09,630
important this is how you would do it

00:22:06,559 --> 00:22:12,420
you basically save the generated

00:22:09,630 --> 00:22:15,570
configuration package and you're up and

00:22:12,420 --> 00:22:17,640
running that's it and Italy if you have

00:22:15,570 --> 00:22:20,280
the you rdf it should not take you more

00:22:17,640 --> 00:22:22,740
than 15-20 minutes in most cases to get

00:22:20,280 --> 00:22:24,450
get from the point where your load of

00:22:22,740 --> 00:22:27,840
the erdf to the point where you can

00:22:24,450 --> 00:22:30,480
start doing this which is we want to

00:22:27,840 --> 00:22:32,520
make sure this this works as quickly as

00:22:30,480 --> 00:22:35,070
possible so you can start playing with

00:22:32,520 --> 00:22:36,720
your robot instantly and and we think

00:22:35,070 --> 00:22:38,690
we've been able to get that running so

00:22:36,720 --> 00:22:41,610
you can see you can compute motion plans

00:22:38,690 --> 00:22:45,030
you can also do that all kinds of other

00:22:41,610 --> 00:22:48,809
stuff then I'll show and as I said move

00:22:45,030 --> 00:22:51,210
it is not only for the arms we you can't

00:22:48,809 --> 00:22:54,179
plan for the base as well so in this

00:22:51,210 --> 00:22:56,220
case you can see you are moving the

00:22:54,179 --> 00:22:58,500
robot around so that you know there's

00:22:56,220 --> 00:23:01,050
some distance between the base this is a

00:22:58,500 --> 00:23:04,530
simple example but what we wanted to

00:23:01,050 --> 00:23:07,740
emphasize here is that unlike arm

00:23:04,530 --> 00:23:10,020
navigation move it is general so its

00:23:07,740 --> 00:23:13,020
robotic Gnostic it's more general where

00:23:10,020 --> 00:23:15,780
you can do much more complicated things

00:23:13,020 --> 00:23:20,460
than just being able to do stuff for an

00:23:15,780 --> 00:23:22,320
arm and as I mentioned move it

00:23:20,460 --> 00:23:25,080
integrates perception so it actually

00:23:22,320 --> 00:23:27,960
does this for you so if you have any

00:23:25,080 --> 00:23:30,630
source of 3d data so it could be a

00:23:27,960 --> 00:23:34,740
typical 3d sensor like the kinect it

00:23:30,630 --> 00:23:37,080
could be stereo cameras you can directly

00:23:34,740 --> 00:23:39,510
plug that in to move it so that it knows

00:23:37,080 --> 00:23:41,340
what the environment looks like so this

00:23:39,510 --> 00:23:44,030
is an example this is actually an

00:23:41,340 --> 00:23:46,500
integration with gazebo so this is in a

00:23:44,030 --> 00:23:48,840
example running in gazebo where you see

00:23:46,500 --> 00:23:51,060
the robot first performing emotion in

00:23:48,840 --> 00:23:53,550
free space and you can see the

00:23:51,060 --> 00:23:54,540
corresponding motion in simulation and

00:23:53,550 --> 00:23:56,730
then

00:23:54,540 --> 00:23:58,370
we're going to put in a box in here so

00:23:56,730 --> 00:24:01,320
that the robot can actually do

00:23:58,370 --> 00:24:04,110
perception based on that and the key

00:24:01,320 --> 00:24:06,810
here is that it's it's incredibly easy

00:24:04,110 --> 00:24:09,780
to set this up with any sensor that you

00:24:06,810 --> 00:24:11,760
have and this was one of the the most

00:24:09,780 --> 00:24:13,800
important things we want wanted

00:24:11,760 --> 00:24:16,500
integrated into move it so in this case

00:24:13,800 --> 00:24:18,930
you can see the robot knows about the

00:24:16,500 --> 00:24:21,300
part of the box that it sees you can

00:24:18,930 --> 00:24:23,550
still interact with the robot and move

00:24:21,300 --> 00:24:25,710
it around and you can see that when it

00:24:23,550 --> 00:24:28,680
thinks it's in collision it'll tell you

00:24:25,710 --> 00:24:31,230
by changing the link in this case we're

00:24:28,680 --> 00:24:33,060
actually setting up the goal motion

00:24:31,230 --> 00:24:35,280
planning and you can see it avoids it

00:24:33,060 --> 00:24:38,460
and you'll see the corresponding motion

00:24:35,280 --> 00:24:40,740
in simulation as well and what this

00:24:38,460 --> 00:24:44,250
really enables and and what we were

00:24:40,740 --> 00:24:48,060
aiming for is applications like this in

00:24:44,250 --> 00:24:51,240
this case acorn this is a from the Arab

00:24:48,060 --> 00:24:53,640
youth again last week and you can see a

00:24:51,240 --> 00:24:57,300
live demo of this at our booth we

00:24:53,640 --> 00:24:58,980
brought the pr2 over and what a current

00:24:57,300 --> 00:25:01,470
is doing is walking around and then

00:24:58,980 --> 00:25:04,920
interfering with the action of the robot

00:25:01,470 --> 00:25:07,200
and what the robot is capable of doing

00:25:04,920 --> 00:25:09,090
using move it so the first thing it does

00:25:07,200 --> 00:25:12,240
when it detects an impending collision

00:25:09,090 --> 00:25:13,980
is it'll stop and the default behavior

00:25:12,240 --> 00:25:16,230
right now is to wait for about two

00:25:13,980 --> 00:25:18,330
seconds so that gives you time to step

00:25:16,230 --> 00:25:20,460
away because in most cases a lot of

00:25:18,330 --> 00:25:22,140
these things happen because people are

00:25:20,460 --> 00:25:25,800
in the workspace so it gives you time to

00:25:22,140 --> 00:25:27,630
step away and if it doesn't then it'll

00:25:25,800 --> 00:25:30,180
actually plan around you and it does

00:25:27,630 --> 00:25:32,520
that pretty fast the delay you see is

00:25:30,180 --> 00:25:35,730
more a programmatic delay and not really

00:25:32,520 --> 00:25:38,700
with the planning itself and the other

00:25:35,730 --> 00:25:40,590
key technology that you don't really see

00:25:38,700 --> 00:25:42,570
here but it's in there is that it's

00:25:40,590 --> 00:25:44,550
doing really fast cell phone rings so

00:25:42,570 --> 00:25:48,510
it's filtering out the links foot of the

00:25:44,550 --> 00:25:51,810
robot incredibly fast and what this

00:25:48,510 --> 00:25:54,480
really enables is applications where

00:25:51,810 --> 00:25:56,370
people need to be working closely with

00:25:54,480 --> 00:25:58,560
the robot so this is based more on a

00:25:56,370 --> 00:26:02,250
visual sense a visual sense of the world

00:25:58,560 --> 00:26:03,780
we have other examples right here with

00:26:02,250 --> 00:26:05,400
the bachelor robot which takes a

00:26:03,780 --> 00:26:07,650
slightly different approach

00:26:05,400 --> 00:26:09,840
to doing these things but you can

00:26:07,650 --> 00:26:12,990
imagine a lot of new applications coming

00:26:09,840 --> 00:26:15,120
out based on that and as I mentioned you

00:26:12,990 --> 00:26:17,250
can include you can directly import CAD

00:26:15,120 --> 00:26:20,070
models so this is actually a CAD model

00:26:17,250 --> 00:26:22,620
import import it into the world you can

00:26:20,070 --> 00:26:24,840
do that if you'd like and actually mix

00:26:22,620 --> 00:26:27,870
and match with sensor data so you don't

00:26:24,840 --> 00:26:30,210
have to work just with this everything

00:26:27,870 --> 00:26:32,040
in movies is represented as a constraint

00:26:30,210 --> 00:26:34,260
so when you think about going to a

00:26:32,040 --> 00:26:36,630
particular place you're not saying just

00:26:34,260 --> 00:26:39,510
go to a particular joint position that's

00:26:36,630 --> 00:26:41,130
actually a constraint saying go to the

00:26:39,510 --> 00:26:43,260
goal position where the joints are

00:26:41,130 --> 00:26:45,210
within these limits and those limits are

00:26:43,260 --> 00:26:47,430
really small but there's a site of

00:26:45,210 --> 00:26:49,800
native constraints that comes with move

00:26:47,430 --> 00:26:52,920
it so there's joint constraints position

00:26:49,800 --> 00:26:54,720
constraints for if you want to do end

00:26:52,920 --> 00:26:57,170
effector constraints orientation

00:26:54,720 --> 00:27:00,450
constraints and visibility constraints

00:26:57,170 --> 00:27:02,790
in addition because of the plug-in play

00:27:00,450 --> 00:27:04,860
capability you can define your own set

00:27:02,790 --> 00:27:06,930
of constraints as well so this week

00:27:04,860 --> 00:27:09,090
really makes it flexible and this is one

00:27:06,930 --> 00:27:11,690
example of the robot operating with

00:27:09,090 --> 00:27:14,670
orientation constraints so typical

00:27:11,690 --> 00:27:16,500
applications in in human environments

00:27:14,670 --> 00:27:21,300
you might want to keep things up right

00:27:16,500 --> 00:27:24,210
as you're doing something we made a huge

00:27:21,300 --> 00:27:26,280
effort and to make sure that all the

00:27:24,210 --> 00:27:29,130
things that we're doing a sort of right

00:27:26,280 --> 00:27:31,340
and up to the state of the art and to do

00:27:29,130 --> 00:27:34,590
this what we did is develop a

00:27:31,340 --> 00:27:37,080
benchmarking sweet so essentially what

00:27:34,590 --> 00:27:38,880
we're looking to do is benchmark all the

00:27:37,080 --> 00:27:41,310
components that we're working with so in

00:27:38,880 --> 00:27:43,470
this case this is the motion planners so

00:27:41,310 --> 00:27:46,050
that not only can you see and and sort

00:27:43,470 --> 00:27:47,880
of believe the numbers but also you can

00:27:46,050 --> 00:27:50,370
choose so you can figure out which set

00:27:47,880 --> 00:27:52,830
of techniques is useful in different

00:27:50,370 --> 00:27:55,170
situations so these are some examples of

00:27:52,830 --> 00:27:56,700
the kind of information that we can get

00:27:55,170 --> 00:27:59,150
out of move it and really the focus

00:27:56,700 --> 00:28:01,620
there is on maintaining quality so

00:27:59,150 --> 00:28:03,930
making sure that everything is

00:28:01,620 --> 00:28:08,010
regression tested and that things don't

00:28:03,930 --> 00:28:10,980
get worse as we can keep developing so

00:28:08,010 --> 00:28:12,840
another cool application that i wanted

00:28:10,980 --> 00:28:14,700
to mention is kinematic where space

00:28:12,840 --> 00:28:17,790
analysis so as we were doing different

00:28:14,700 --> 00:28:18,809
projects we realize there's a need to be

00:28:17,790 --> 00:28:21,539
able to evaluate

00:28:18,809 --> 00:28:23,340
robots that we might be building and we

00:28:21,539 --> 00:28:25,860
couldn't find any tool for this so we

00:28:23,340 --> 00:28:27,840
went and build our own based on moving

00:28:25,860 --> 00:28:29,730
and really the two applications we were

00:28:27,840 --> 00:28:32,789
looking at his robot design evaluation

00:28:29,730 --> 00:28:35,610
so you have a new robot you have a set

00:28:32,789 --> 00:28:37,139
of tasks that you want to execute with

00:28:35,610 --> 00:28:39,330
the robot and you don't really know

00:28:37,139 --> 00:28:42,029
before you design it how well it'll do

00:28:39,330 --> 00:28:44,759
and what we wanted to give people is a

00:28:42,029 --> 00:28:47,820
tool so they can test that so for

00:28:44,759 --> 00:28:50,909
example when we design the pr2 we look

00:28:47,820 --> 00:28:52,529
at ten this robot reach shelves can it

00:28:50,909 --> 00:28:55,440
reach high shelves candidate reach

00:28:52,529 --> 00:28:57,149
drawers can it reach the floor what does

00:28:55,440 --> 00:29:00,269
it need to do that as it needs to raise

00:28:57,149 --> 00:29:02,190
the person and we really didn't have

00:29:00,269 --> 00:29:03,690
these tools then so it was hard to

00:29:02,190 --> 00:29:06,600
figure out some of these things easily

00:29:03,690 --> 00:29:09,090
we also wanted to see can it open doors

00:29:06,600 --> 00:29:11,070
for example and we can really do it

00:29:09,090 --> 00:29:13,649
without actually either doing a full

00:29:11,070 --> 00:29:17,249
simulation or being able to work on the

00:29:13,649 --> 00:29:20,190
robot and now with move it you have

00:29:17,249 --> 00:29:23,929
what's called a benchmark to this is a

00:29:20,190 --> 00:29:26,369
tool that lets you play that lets you

00:29:23,929 --> 00:29:30,299
play with different robot designs so you

00:29:26,369 --> 00:29:33,330
can basically input the Urd f you can

00:29:30,299 --> 00:29:35,669
tell you can create a set of problems so

00:29:33,330 --> 00:29:37,889
you can create basically say i want this

00:29:35,669 --> 00:29:40,919
robot to be able to reach all these

00:29:37,889 --> 00:29:42,690
positions in its workspace it'll

00:29:40,919 --> 00:29:44,789
automatically do that computation for

00:29:42,690 --> 00:29:47,059
you it'll come back and give you

00:29:44,789 --> 00:29:49,200
statistics how many can you treat which

00:29:47,059 --> 00:29:51,509
positions can it reach what are the

00:29:49,200 --> 00:29:53,490
joint angles you could even imagine

00:29:51,509 --> 00:29:55,889
putting it different metrics I'll show

00:29:53,490 --> 00:29:58,590
you a couple of them a little bit later

00:29:55,889 --> 00:30:00,299
so you can have a lot of information

00:29:58,590 --> 00:30:02,820
that you can use in your robot design

00:30:00,299 --> 00:30:04,710
and basically this is a tool that will

00:30:02,820 --> 00:30:07,230
let you if you're designing a new robot

00:30:04,710 --> 00:30:10,110
it'll tell you how good is zero bot

00:30:07,230 --> 00:30:11,490
going to do in different situations and

00:30:10,110 --> 00:30:12,990
the cool thing is you can also do

00:30:11,490 --> 00:30:15,269
Cartesian trajectories so if you're

00:30:12,990 --> 00:30:17,850
thinking of doing cast like door opening

00:30:15,269 --> 00:30:21,480
you can set that up sort of almost

00:30:17,850 --> 00:30:23,759
natively you can test that and have move

00:30:21,480 --> 00:30:25,970
it show you how the robot would actually

00:30:23,759 --> 00:30:28,379
execute that and it's an incredible tool

00:30:25,970 --> 00:30:30,899
when you're doing new kinds of robots

00:30:28,379 --> 00:30:32,000
because you'll be able to look at this

00:30:30,899 --> 00:30:33,680
and say okay and

00:30:32,000 --> 00:30:35,870
need to change my design so some of

00:30:33,680 --> 00:30:39,110
these things are much more possible and

00:30:35,870 --> 00:30:41,420
this is actually a comparison of the

00:30:39,110 --> 00:30:44,240
pier to the two collide with arm and the

00:30:41,420 --> 00:30:46,010
you are five in a set of reach ability

00:30:44,240 --> 00:30:48,830
has in this case we're trying to get it

00:30:46,010 --> 00:30:51,560
to reach a bunch of shelves and a bunch

00:30:48,830 --> 00:30:53,300
of locations on shelves and you can see

00:30:51,560 --> 00:30:55,580
that the industrial robots do pretty

00:30:53,300 --> 00:30:59,300
well in terms of work space much better

00:30:55,580 --> 00:31:02,210
than the puritan the other application

00:30:59,300 --> 00:31:03,860
if you have a fixed robot like an

00:31:02,210 --> 00:31:05,950
industrial robot and you want to figure

00:31:03,860 --> 00:31:08,660
out where it should be in the workspace

00:31:05,950 --> 00:31:10,430
this set of tools would will let you

00:31:08,660 --> 00:31:12,620
decide if you have a bunch of positions

00:31:10,430 --> 00:31:15,470
it'll let you decide where you can put

00:31:12,620 --> 00:31:17,330
that and also if you have a mobile group

00:31:15,470 --> 00:31:19,760
art and you want to go and grasp things

00:31:17,330 --> 00:31:21,920
so typically one of the biggest issues

00:31:19,760 --> 00:31:24,800
is if you want to grab something where

00:31:21,920 --> 00:31:27,230
do you put the base and the move it

00:31:24,800 --> 00:31:29,360
helps with that there's a few other

00:31:27,230 --> 00:31:32,360
things that move it can do so for

00:31:29,360 --> 00:31:34,010
example you can associate metrics with

00:31:32,360 --> 00:31:36,740
different robot configuration so in this

00:31:34,010 --> 00:31:38,300
case we're looking at two which is my

00:31:36,740 --> 00:31:40,100
nipple ability which is a measure of how

00:31:38,300 --> 00:31:41,780
well the robot can move in different

00:31:40,100 --> 00:31:44,300
directions add a configuration and

00:31:41,780 --> 00:31:47,090
payload so how much can the robot live

00:31:44,300 --> 00:31:50,390
in different configurations and so you

00:31:47,090 --> 00:31:53,000
can see in the art ways visualizer you

00:31:50,390 --> 00:31:54,920
can enable a bunch of metrics and move

00:31:53,000 --> 00:31:57,530
it will show you those computed things

00:31:54,920 --> 00:31:59,660
right on the screen so you can use that

00:31:57,530 --> 00:32:02,480
so it's an incredible set of

00:31:59,660 --> 00:32:04,250
capabilities that I would encourage you

00:32:02,480 --> 00:32:08,390
to look if you're starting to design

00:32:04,250 --> 00:32:09,830
euro BOTS but the the other key side of

00:32:08,390 --> 00:32:13,670
capabilities that we want to offer

00:32:09,830 --> 00:32:16,250
almost package is taken place and this

00:32:13,670 --> 00:32:19,340
has been one of the big focus areas at

00:32:16,250 --> 00:32:21,980
Willow for for quite a while and we want

00:32:19,340 --> 00:32:23,750
to take all the knowledge we've we've

00:32:21,980 --> 00:32:25,760
generated over the last four years in

00:32:23,750 --> 00:32:27,680
this domain and basically package that

00:32:25,760 --> 00:32:30,140
together so you can start using this

00:32:27,680 --> 00:32:32,810
quickly so we're not all the way there

00:32:30,140 --> 00:32:35,330
yet with move it on this but we're

00:32:32,810 --> 00:32:37,110
pretty close but where we can have

00:32:35,330 --> 00:32:40,410
really fast

00:32:37,110 --> 00:32:42,929
his application and the real key is that

00:32:40,410 --> 00:32:45,900
we did things differently this is a

00:32:42,929 --> 00:32:48,150
picture of the old grasping pipeline and

00:32:45,900 --> 00:32:50,580
the way it did everything was sort of a

00:32:48,150 --> 00:32:52,380
serialized operation so it basically had

00:32:50,580 --> 00:32:55,950
a bunch of things that it wanted to do

00:32:52,380 --> 00:32:58,260
and it would do each of these in cereals

00:32:55,950 --> 00:33:00,450
so if you wanted to grab say this glass

00:32:58,260 --> 00:33:03,299
it would first figure out okay there's

00:33:00,450 --> 00:33:05,190
maybe 40 grasp for that glass for each

00:33:03,299 --> 00:33:08,429
of those it would compute a bunch of

00:33:05,190 --> 00:33:10,380
motions and say okay is this possible or

00:33:08,429 --> 00:33:12,600
not possible the issue was that you

00:33:10,380 --> 00:33:14,760
would basically if you if the last grasp

00:33:12,600 --> 00:33:16,410
was the right one you would have to step

00:33:14,760 --> 00:33:20,090
through all of them before you realized

00:33:16,410 --> 00:33:22,110
and it was inefficient it it was slow

00:33:20,090 --> 00:33:25,410
you had to work through the whole

00:33:22,110 --> 00:33:27,290
pipeline to get there and one of the big

00:33:25,410 --> 00:33:31,530
things that we've done and move it is

00:33:27,290 --> 00:33:34,380
restructured this entire pipeline what

00:33:31,530 --> 00:33:36,330
we what we said is that instead of doing

00:33:34,380 --> 00:33:38,130
all these things in cereal we're going

00:33:36,330 --> 00:33:40,220
to do things in parallel so we have this

00:33:38,130 --> 00:33:42,980
concept of a manipulation stage

00:33:40,220 --> 00:33:45,900
basically this is a series of operations

00:33:42,980 --> 00:33:47,940
happening in parallel so you bring all

00:33:45,900 --> 00:33:49,980
these up so you bring up grass planning

00:33:47,940 --> 00:33:52,110
you bring up inverse kinematics you

00:33:49,980 --> 00:33:55,440
bring up the motion planners and each

00:33:52,110 --> 00:33:57,900
stage Phil Phil's the next one so as

00:33:55,440 --> 00:34:00,150
soon as it gets a grasp it'll pass that

00:33:57,900 --> 00:34:02,010
on to the next stage as soon as it is to

00:34:00,150 --> 00:34:05,370
get some motion plan it'll pass that on

00:34:02,010 --> 00:34:07,140
and these stages can go up and down in

00:34:05,370 --> 00:34:09,450
priority in depending on where they are

00:34:07,140 --> 00:34:13,050
and how well they're doing and this way

00:34:09,450 --> 00:34:14,820
the key to doing manipulation in

00:34:13,050 --> 00:34:16,350
unstructured environments is to make

00:34:14,820 --> 00:34:19,470
sure that you have a lot of alternatives

00:34:16,350 --> 00:34:21,510
and what we're doing here is exploring

00:34:19,470 --> 00:34:23,909
all these alternatives as quickly as we

00:34:21,510 --> 00:34:27,330
can so that we get to a solution much

00:34:23,909 --> 00:34:29,340
faster and so this is one of the first

00:34:27,330 --> 00:34:33,750
examples of move it running pick in

00:34:29,340 --> 00:34:36,179
place this was a just last week we don't

00:34:33,750 --> 00:34:38,040
have everything working yet so it won't

00:34:36,179 --> 00:34:40,470
claim that you can just go and run this

00:34:38,040 --> 00:34:42,720
out of the box but in terms of the

00:34:40,470 --> 00:34:44,850
actual pipeline the actual components I

00:34:42,720 --> 00:34:47,290
think we have a lot of it in place and

00:34:44,850 --> 00:34:51,610
we should be able to get things running

00:34:47,290 --> 00:34:54,610
pretty quickly as I mentioned we focused

00:34:51,610 --> 00:34:57,010
on a simple API this is what you need to

00:34:54,610 --> 00:35:00,700
start moving in arm that's it this is in

00:34:57,010 --> 00:35:02,770
C++ code it's basically really simple

00:35:00,700 --> 00:35:05,350
API so that you can get up and running

00:35:02,770 --> 00:35:07,180
incredibly quickly whether you're a

00:35:05,350 --> 00:35:10,030
beginner or whether Europe advanced

00:35:07,180 --> 00:35:14,080
developer this is how easy we want it to

00:35:10,030 --> 00:35:16,720
be I should mention what the differences

00:35:14,080 --> 00:35:20,290
are between move it and the old way of

00:35:16,720 --> 00:35:22,870
doing things so in our navigation we had

00:35:20,290 --> 00:35:25,300
a bunch of different processes each one

00:35:22,870 --> 00:35:26,890
of which was doing a particular thing so

00:35:25,300 --> 00:35:29,530
inverse kinematics would be running in

00:35:26,890 --> 00:35:32,110
one would be maintaining its own version

00:35:29,530 --> 00:35:34,720
of the world motion planning would be

00:35:32,110 --> 00:35:37,290
running in other and we quickly realized

00:35:34,720 --> 00:35:39,910
that we because we're dealing with

00:35:37,290 --> 00:35:41,710
integrating perception so much we don't

00:35:39,910 --> 00:35:44,350
want to be passing all this data back

00:35:41,710 --> 00:35:47,860
and forth between nodes as much as we do

00:35:44,350 --> 00:35:50,680
so we changed the way we do things so

00:35:47,860 --> 00:35:52,960
move it most of the capabilities you get

00:35:50,680 --> 00:35:54,760
and move it happen in a single process

00:35:52,960 --> 00:35:57,130
they don't happen in multiple processes

00:35:54,760 --> 00:35:59,110
there's one instance of the environment

00:35:57,130 --> 00:36:01,870
being maintained so this gets rid of a

00:35:59,110 --> 00:36:04,510
lot of overhead in terms of transport

00:36:01,870 --> 00:36:06,520
and the other thing we did is we

00:36:04,510 --> 00:36:08,500
separated the computation from the

00:36:06,520 --> 00:36:10,690
communication and configuration so that

00:36:08,500 --> 00:36:12,820
still happens to Ross but the core set

00:36:10,690 --> 00:36:15,040
of capabilities for example motion

00:36:12,820 --> 00:36:17,710
planning collision checking these happen

00:36:15,040 --> 00:36:18,970
inside C++ libraries and the idea is

00:36:17,710 --> 00:36:22,030
that if you're developing applications

00:36:18,970 --> 00:36:24,910
and you want just that part you can get

00:36:22,030 --> 00:36:27,220
that if you want and like I said we

00:36:24,910 --> 00:36:29,860
emphasize speed and efficiency so we've

00:36:27,220 --> 00:36:32,110
spent a lot of time paralyzing or making

00:36:29,860 --> 00:36:35,230
a collision checking capable of being

00:36:32,110 --> 00:36:38,460
paralyzed kinematics also and all the

00:36:35,230 --> 00:36:41,650
other confidence as much as we can and

00:36:38,460 --> 00:36:43,330
he this is just a summary of some of the

00:36:41,650 --> 00:36:45,880
differences for four different

00:36:43,330 --> 00:36:48,100
components I won't go into too much

00:36:45,880 --> 00:36:51,730
detail here but the highlights are

00:36:48,100 --> 00:36:54,370
basically we focus on performance we're

00:36:51,730 --> 00:36:57,250
trying to integrate perception so that

00:36:54,370 --> 00:36:59,940
will you have out of the box full as

00:36:57,250 --> 00:37:02,310
much situation awareness as you can

00:36:59,940 --> 00:37:04,680
we had a huge focus on reactive motion

00:37:02,310 --> 00:37:07,320
planning so this is being able to react

00:37:04,680 --> 00:37:10,110
in human in collaborative environments

00:37:07,320 --> 00:37:11,940
and the key the really important part

00:37:10,110 --> 00:37:14,520
we're trying to make it easy and

00:37:11,940 --> 00:37:16,140
user-friendly at different levels so if

00:37:14,520 --> 00:37:18,870
you're a beginner if you're an advanced

00:37:16,140 --> 00:37:22,650
developer we won't move it to be as easy

00:37:18,870 --> 00:37:25,200
as possible and for you to be able to

00:37:22,650 --> 00:37:27,390
use it really easily we want to offer

00:37:25,200 --> 00:37:30,000
you almost out of the box experience

00:37:27,390 --> 00:37:33,450
with a lot of applications this is the

00:37:30,000 --> 00:37:36,060
key for us so there's a full wiki with a

00:37:33,450 --> 00:37:39,230
lot of documentation at muvek trust

00:37:36,060 --> 00:37:42,060
regard there's all the code is on github

00:37:39,230 --> 00:37:44,190
and there's of course the regular issue

00:37:42,060 --> 00:37:47,790
tracking so if you have any issues you

00:37:44,190 --> 00:37:49,860
can put them in there's for the

00:37:47,790 --> 00:37:52,470
community there's a community mailing

00:37:49,860 --> 00:37:56,220
list at move it users at

00:37:52,470 --> 00:37:59,670
googlegroups.com we encourage you to if

00:37:56,220 --> 00:38:02,690
you have any questions any concerns to

00:37:59,670 --> 00:38:05,610
email us so we can help you develop your

00:38:02,690 --> 00:38:07,230
applications and where we are really

00:38:05,610 --> 00:38:09,030
going with this is we're looking into

00:38:07,230 --> 00:38:12,480
what does it take to use move it in

00:38:09,030 --> 00:38:15,030
products that's for us the key I know

00:38:12,480 --> 00:38:17,010
there's a big effort on the raw side to

00:38:15,030 --> 00:38:18,810
do the same thing insta to start

00:38:17,010 --> 00:38:21,960
thinking about what does it take to get

00:38:18,810 --> 00:38:24,990
Ross into products maybe it's already

00:38:21,960 --> 00:38:26,760
out there and we just don't know and of

00:38:24,990 --> 00:38:29,850
course we're interested in developing

00:38:26,760 --> 00:38:33,210
enterprise level capabilities for

00:38:29,850 --> 00:38:36,240
manipulation for perception basically

00:38:33,210 --> 00:38:38,220
integrated interpolation perception and

00:38:36,240 --> 00:38:41,210
navigation so if you're interested

00:38:38,220 --> 00:38:43,920
please let us know for general questions

00:38:41,210 --> 00:38:48,540
that's our email address move it at

00:38:43,920 --> 00:38:51,930
Willow Garage calm and with that I'll

00:38:48,540 --> 00:38:54,440
stop and let you on set up while I take

00:38:51,930 --> 00:38:54,440

YouTube URL: https://www.youtube.com/watch?v=mko8nv-cJU4


