Title: RosCon2013 Track2 Day1 06   Alexander Bubeck   Improve your ROS code with Model Driven Engineering a
Publication date: 2014-08-31
Playlist: ROSCon 2013
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2013 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,000 --> 00:00:05,190
a lot of the stuff I going to present

00:00:01,620 --> 00:00:07,170
you is based on our experience for us so

00:00:05,190 --> 00:00:11,880
we have used Russ for quite some time

00:00:07,170 --> 00:00:13,830
now and using it on complex systems like

00:00:11,880 --> 00:00:17,400
for example caribidor Robert work

00:00:13,830 --> 00:00:21,180
actually introduced a lot of questions

00:00:17,400 --> 00:00:24,080
and yes hearts we had so actually if you

00:00:21,180 --> 00:00:28,170
want to use Russ so what about reusing

00:00:24,080 --> 00:00:30,269
components so if you look out and under

00:00:28,170 --> 00:00:32,009
Ross ecosystems now you have like

00:00:30,269 --> 00:00:37,170
thousands and thousands of components

00:00:32,009 --> 00:00:40,680
and if you take some components they are

00:00:37,170 --> 00:00:43,050
reimplemented again and again and you

00:00:40,680 --> 00:00:45,329
don't see that much really reuse as you

00:00:43,050 --> 00:00:49,430
would expect and such a component-based

00:00:45,329 --> 00:00:51,300
environments also you as the code

00:00:49,430 --> 00:00:54,510
quality and also the code

00:00:51,300 --> 00:00:55,980
standardization ready is so I mean Ross

00:00:54,510 --> 00:00:58,320
gives you a lot of freedom on

00:00:55,980 --> 00:01:00,930
implementing notes which is great but

00:00:58,320 --> 00:01:04,070
like if you want to put things together

00:01:00,930 --> 00:01:08,700
and maybe reuse components it's

00:01:04,070 --> 00:01:10,979
sometimes a hassle also what still open

00:01:08,700 --> 00:01:12,960
is basically a standardization and best

00:01:10,979 --> 00:01:14,790
practice and Ross and I mean it's a

00:01:12,960 --> 00:01:17,850
process and we are doing a lot of

00:01:14,790 --> 00:01:19,320
communication here but yeah maybe we can

00:01:17,850 --> 00:01:23,040
improve this process a little bit more

00:01:19,320 --> 00:01:24,770
and the thing with the learning curves

00:01:23,040 --> 00:01:27,450
actually is interesting because

00:01:24,770 --> 00:01:29,840
sometimes we have students that are

00:01:27,450 --> 00:01:32,970
trying stuff out on karo baat and they

00:01:29,840 --> 00:01:35,640
really have sometimes problems and going

00:01:32,970 --> 00:01:39,180
through the tutorials understanding what

00:01:35,640 --> 00:01:41,159
these boost share pointers are and how

00:01:39,180 --> 00:01:43,470
to use them and things like that so I

00:01:41,159 --> 00:01:46,470
think we can also improve things here

00:01:43,470 --> 00:01:48,060
and another thing which is discussed in

00:01:46,470 --> 00:01:50,159
the ross community right now is the

00:01:48,060 --> 00:01:51,840
first release cycle so you basically if

00:01:50,159 --> 00:01:54,329
you have a very complex system you have

00:01:51,840 --> 00:01:56,420
to it's difficult to keep up with the

00:01:54,329 --> 00:01:59,969
release cycles we have currently and

00:01:56,420 --> 00:02:01,860
this in problems that we have quite

00:01:59,969 --> 00:02:03,960
often as in European projects where you

00:02:01,860 --> 00:02:06,149
have partners spread all over Europe and

00:02:03,960 --> 00:02:07,860
you want to cooperate with them and one

00:02:06,149 --> 00:02:10,020
robot platform there's a lot of

00:02:07,860 --> 00:02:10,770
discussion and communication that's very

00:02:10,020 --> 00:02:17,190
important

00:02:10,770 --> 00:02:21,420
to be done so actually we looked around

00:02:17,190 --> 00:02:23,730
bricks what other domains and they'd

00:02:21,420 --> 00:02:26,940
have such complex systems like for

00:02:23,730 --> 00:02:29,130
example the car industry has a solutions

00:02:26,940 --> 00:02:34,260
for such problems problems of reuse and

00:02:29,130 --> 00:02:36,390
code quality actually a approach you

00:02:34,260 --> 00:02:39,180
find quite often these industries is

00:02:36,390 --> 00:02:43,010
model-driven engineering and I just want

00:02:39,180 --> 00:02:46,050
to shortly explain the sorts behind it

00:02:43,010 --> 00:02:50,760
so and you can explain it best using

00:02:46,050 --> 00:02:53,910
this pyramid and so going from here

00:02:50,760 --> 00:02:56,100
that's usually the sphere we all live in

00:02:53,910 --> 00:02:59,970
so we are developing code writing

00:02:56,100 --> 00:03:01,800
components like with editors C++ code

00:02:59,970 --> 00:03:05,400
pies and whatever and that's basically

00:03:01,800 --> 00:03:07,950
the implementation level and what we do

00:03:05,400 --> 00:03:11,790
sometimes is that we create models of

00:03:07,950 --> 00:03:14,790
our implementations and that's usually

00:03:11,790 --> 00:03:17,040
this m1 level and if you for example

00:03:14,790 --> 00:03:20,520
have a component framework you can

00:03:17,040 --> 00:03:22,410
actually model these components but the

00:03:20,520 --> 00:03:25,890
catch with model-driven engineering now

00:03:22,410 --> 00:03:29,640
is that you not just model your code but

00:03:25,890 --> 00:03:31,650
you also define ways to model your code

00:03:29,640 --> 00:03:33,690
so basically languages to model the code

00:03:31,650 --> 00:03:36,630
and because you define these languages

00:03:33,690 --> 00:03:40,770
so models you created can be very easily

00:03:36,630 --> 00:03:43,560
exchanged with others or used in in in

00:03:40,770 --> 00:03:46,770
rural chains and this is this really

00:03:43,560 --> 00:03:50,220
important layers of is a metamodel level

00:03:46,770 --> 00:03:52,770
and for example in the case of like

00:03:50,220 --> 00:03:54,870
having code you can maybe model the

00:03:52,770 --> 00:03:57,209
classes of your of your implementation

00:03:54,870 --> 00:03:59,730
but the really powerful stuff is

00:03:57,209 --> 00:04:02,310
basically if you use language like UML

00:03:59,730 --> 00:04:04,590
to model it because then I can give you

00:04:02,310 --> 00:04:06,950
my view male model and you can read it

00:04:04,590 --> 00:04:09,630
and understand it right away if you also

00:04:06,950 --> 00:04:12,150
understand this human emitter model and

00:04:09,630 --> 00:04:14,459
the cert level well that's basically

00:04:12,150 --> 00:04:16,140
mostly interesting for the

00:04:14,459 --> 00:04:18,900
implementations of these two chains

00:04:16,140 --> 00:04:22,470
that's this meta meta model where you

00:04:18,900 --> 00:04:24,210
have very abstract models that help you

00:04:22,470 --> 00:04:29,340
to implement this

00:04:24,210 --> 00:04:31,770
my specific models and this thing I want

00:04:29,340 --> 00:04:34,979
to present here is actually the bricks

00:04:31,770 --> 00:04:38,699
IDE short bright which was created as

00:04:34,979 --> 00:04:42,180
part of the bricks project and so this

00:04:38,699 --> 00:04:44,520
is a model level and the metamodel level

00:04:42,180 --> 00:04:47,729
so we actually created and bricks

00:04:44,520 --> 00:04:49,830
metamodels for different tool chains so

00:04:47,729 --> 00:04:51,630
one is this very abstract bricks

00:04:49,830 --> 00:04:54,150
component model but with what's very

00:04:51,630 --> 00:04:56,789
interesting years that we also created

00:04:54,150 --> 00:05:01,650
metamodels for all costs and also for us

00:04:56,789 --> 00:05:04,039
and the bride for ross basically uses

00:05:01,650 --> 00:05:07,259
these metamodels to implement different

00:05:04,039 --> 00:05:08,940
editors for different developer roles

00:05:07,259 --> 00:05:11,550
and i will come to that in a second

00:05:08,940 --> 00:05:14,699
another thing is that you basically gain

00:05:11,550 --> 00:05:18,030
automatic generation of code so we

00:05:14,699 --> 00:05:20,130
currently support c++ and pies and other

00:05:18,030 --> 00:05:25,349
things which are important in the Ross

00:05:20,130 --> 00:05:28,949
ecosystem so I don't want to go into

00:05:25,349 --> 00:05:32,430
detail here but actually if you look in

00:05:28,949 --> 00:05:35,220
the like who is actually using Ross you

00:05:32,430 --> 00:05:38,159
find that usually the types of users are

00:05:35,220 --> 00:05:40,199
quite different so in the research

00:05:38,159 --> 00:05:43,050
domain for example you find a lot of

00:05:40,199 --> 00:05:45,180
these domain experts that's already like

00:05:43,050 --> 00:05:46,680
they only care about these cameras for

00:05:45,180 --> 00:05:50,099
example and they want to do image

00:05:46,680 --> 00:05:51,360
recognition set and for for them I mean

00:05:50,099 --> 00:05:54,270
they just want to implement the

00:05:51,360 --> 00:05:55,889
algorithms for example and there they're

00:05:54,270 --> 00:05:57,360
really interested in testing it but I

00:05:55,889 --> 00:06:00,030
mean that's not their domains any domain

00:05:57,360 --> 00:06:02,009
is basically image recognition and then

00:06:00,030 --> 00:06:04,409
on the other side you have these guys

00:06:02,009 --> 00:06:07,229
that try to fit everything together so

00:06:04,409 --> 00:06:09,300
that's a photo of one of integration

00:06:07,229 --> 00:06:13,800
sessions of Carol but we sometimes have

00:06:09,300 --> 00:06:15,659
if we get new hardware and well it has

00:06:13,800 --> 00:06:17,550
to fit hardware wise but what's even

00:06:15,659 --> 00:06:20,699
more difficult is to make it fit

00:06:17,550 --> 00:06:23,669
software wise and you have application

00:06:20,699 --> 00:06:26,639
engineers that basically try to make the

00:06:23,669 --> 00:06:28,680
robot do something yes end users that

00:06:26,639 --> 00:06:30,750
are actually trying the same thing but

00:06:28,680 --> 00:06:33,120
on a higher level so this is image of

00:06:30,750 --> 00:06:36,150
our journalists trying to tell the

00:06:33,120 --> 00:06:36,960
carabao to catch something using a

00:06:36,150 --> 00:06:40,680
script here

00:06:36,960 --> 00:06:43,289
and then you have seized a sheet X which

00:06:40,680 --> 00:06:46,919
start right in the beginning we drawing

00:06:43,289 --> 00:06:50,550
pictures and trying to do a hash texture

00:06:46,919 --> 00:06:53,940
of a software and what would be

00:06:50,550 --> 00:06:56,280
interesting and I think bright will be a

00:06:53,940 --> 00:06:58,710
solution for that is to actually split

00:06:56,280 --> 00:07:02,250
up the different user types and actually

00:06:58,710 --> 00:07:04,889
have the domain expert still only care

00:07:02,250 --> 00:07:06,990
about his domain and are the other side

00:07:04,889 --> 00:07:11,580
integrate all these things together in

00:07:06,990 --> 00:07:13,020
one tool chain so to do that you

00:07:11,580 --> 00:07:15,330
actually have to look into the

00:07:13,020 --> 00:07:17,849
development process and we did that true

00:07:15,330 --> 00:07:20,280
so what bright basically provides you

00:07:17,849 --> 00:07:24,539
right now is model editors for three

00:07:20,280 --> 00:07:26,520
types of models so we have something

00:07:24,539 --> 00:07:29,789
which we call capability which is

00:07:26,520 --> 00:07:33,930
basically in the Ross language in Ross

00:07:29,789 --> 00:07:35,639
world specifying one node and what you

00:07:33,930 --> 00:07:37,919
do basically is you specify the

00:07:35,639 --> 00:07:44,120
communication and coordination aspects

00:07:37,919 --> 00:07:47,310
for example oh whoa so you for example

00:07:44,120 --> 00:07:50,639
specify the topics publishers here and

00:07:47,310 --> 00:07:52,680
services and of course you still have to

00:07:50,639 --> 00:07:54,060
care about the computation so for

00:07:52,680 --> 00:07:57,960
example the algorithm that still

00:07:54,060 --> 00:08:00,240
handmade but the rest can basically be

00:07:57,960 --> 00:08:03,270
auto-generated so it creates your older

00:08:00,240 --> 00:08:06,599
a package code and there's a note code

00:08:03,270 --> 00:08:07,919
and as an other thing is the system

00:08:06,599 --> 00:08:10,620
integration here so you basically

00:08:07,919 --> 00:08:12,539
specify a system which is basically a

00:08:10,620 --> 00:08:14,880
large file in a very high level because

00:08:12,539 --> 00:08:17,190
it also deeply integrates different

00:08:14,880 --> 00:08:21,409
types of configuration so for example it

00:08:17,190 --> 00:08:25,289
can generate generate you Yama files and

00:08:21,409 --> 00:08:27,659
it's important thing here is that we

00:08:25,289 --> 00:08:30,840
basically split up the composition

00:08:27,659 --> 00:08:32,640
answer communication which is not done

00:08:30,840 --> 00:08:35,539
usually in Ross so basically when you

00:08:32,640 --> 00:08:38,700
write a Ross publisher you specifically

00:08:35,539 --> 00:08:41,219
right already the topic you can remap it

00:08:38,700 --> 00:08:43,560
later but if you don't do that you have

00:08:41,219 --> 00:08:48,410
the composition done automatically and

00:08:43,560 --> 00:08:50,920
maybe you don't even know that and in

00:08:48,410 --> 00:08:52,850
and then of course you also can specify

00:08:50,920 --> 00:08:56,529
coordinators what we have here is

00:08:52,850 --> 00:09:00,470
basically a abstract model of smash

00:08:56,529 --> 00:09:03,319
coordinator smash state machines and you

00:09:00,470 --> 00:09:05,720
basically auto-generate smash code and

00:09:03,319 --> 00:09:10,220
the configuration for that out of these

00:09:05,720 --> 00:09:12,970
models but one feedback I got quite

00:09:10,220 --> 00:09:16,040
early when developing that was well I

00:09:12,970 --> 00:09:18,829
don't really want to use eclipse because

00:09:16,040 --> 00:09:21,860
brightest based on eclipse I don't want

00:09:18,829 --> 00:09:24,560
to use that I'm I want to SSH into my pc

00:09:21,860 --> 00:09:26,329
and into my robot and so on so the

00:09:24,560 --> 00:09:29,959
question is do I really have to use this

00:09:26,329 --> 00:09:31,910
IDE stuff and as a question I can do

00:09:29,959 --> 00:09:34,610
right now us know you don't have to do

00:09:31,910 --> 00:09:37,509
that anymore so besides this graphical

00:09:34,610 --> 00:09:41,750
models which we will see later also and

00:09:37,509 --> 00:09:43,490
we also have textual models and I hope

00:09:41,750 --> 00:09:45,410
you can see it here so for example

00:09:43,490 --> 00:09:49,850
that's the textual model of a rose

00:09:45,410 --> 00:09:52,490
package and actually what what what we

00:09:49,850 --> 00:09:55,459
did basically is we generated a DSL

00:09:52,490 --> 00:09:58,759
that's compatible vml so you can also

00:09:55,459 --> 00:10:01,819
use all the yamel libraries outset to

00:09:58,759 --> 00:10:04,009
generate this stuff and so it's it's

00:10:01,819 --> 00:10:06,290
it's compatible with the amal but in the

00:10:04,009 --> 00:10:09,819
back it uses x text which is also an

00:10:06,290 --> 00:10:13,160
eclipse project so you basically can

00:10:09,819 --> 00:10:15,649
define the language you want well I

00:10:13,160 --> 00:10:17,779
think yamel is quite common in the Ross

00:10:15,649 --> 00:10:19,639
community so you might just stick with

00:10:17,779 --> 00:10:21,920
that but if you have a use case where

00:10:19,639 --> 00:10:26,870
you have your own language anyway you

00:10:21,920 --> 00:10:29,899
can easily even change that so basically

00:10:26,870 --> 00:10:34,639
you can just VI a model and you that's

00:10:29,899 --> 00:10:36,649
just a VI editor view and after creating

00:10:34,639 --> 00:10:40,279
this model textually you can use a

00:10:36,649 --> 00:10:42,259
standalone compiler which is a model to

00:10:40,279 --> 00:10:46,910
text compiler in the package bride

00:10:42,259 --> 00:10:49,360
compilers and once you did that with zui

00:10:46,910 --> 00:10:52,879
or vs texture away once you can also

00:10:49,360 --> 00:10:54,889
just do a make regions or regeneration

00:10:52,879 --> 00:11:01,100
of your package once you change

00:10:54,889 --> 00:11:02,000
something in the model and using bride

00:11:01,100 --> 00:11:04,760
actually gives you

00:11:02,000 --> 00:11:08,270
lot of flexibility which I think most of

00:11:04,760 --> 00:11:11,210
you like about Ross anyway so besides

00:11:08,270 --> 00:11:14,780
just creating Ross components you can

00:11:11,210 --> 00:11:17,480
also create our course components and so

00:11:14,780 --> 00:11:20,450
basically the component code which is

00:11:17,480 --> 00:11:23,750
created can be used right away sir or

00:11:20,450 --> 00:11:25,340
cause rust toolchain so it's basically

00:11:23,750 --> 00:11:27,830
you can access this from the Ross

00:11:25,340 --> 00:11:32,780
ecosystem and it's but still or or cost

00:11:27,830 --> 00:11:35,060
component and currently bright supports

00:11:32,780 --> 00:11:38,150
multiple types of configuration

00:11:35,060 --> 00:11:40,610
management that's actually a topic which

00:11:38,150 --> 00:11:43,430
I want is still improve but what what's

00:11:40,610 --> 00:11:46,250
possible already is basically just using

00:11:43,430 --> 00:11:48,710
standard response also Stan using the

00:11:46,250 --> 00:11:53,660
animal reconfigure and auto generating

00:11:48,710 --> 00:11:55,820
Yama files out of the model and one very

00:11:53,660 --> 00:11:59,720
interesting aspect for us when creating

00:11:55,820 --> 00:12:01,970
pride was that we can still use I call

00:11:59,720 --> 00:12:03,590
it legacy Ross components so basically

00:12:01,970 --> 00:12:05,720
Russ components that we are not created

00:12:03,590 --> 00:12:07,850
by model-driven engineering at all just

00:12:05,720 --> 00:12:10,880
normal Ross components can be used

00:12:07,850 --> 00:12:12,430
inside of Ross systems with pride so the

00:12:10,880 --> 00:12:16,610
only thing you basically do is you

00:12:12,430 --> 00:12:19,550
create a model of this component it's

00:12:16,610 --> 00:12:21,290
not it doesn't correspond to the code

00:12:19,550 --> 00:12:23,630
but it's still a model and you can

00:12:21,290 --> 00:12:26,270
basically use this model in the system

00:12:23,630 --> 00:12:31,850
graders for example to connect it to

00:12:26,270 --> 00:12:34,070
other model driven components and in

00:12:31,850 --> 00:12:36,860
inside of bricks we actually test that

00:12:34,070 --> 00:12:39,620
this culture in different showcases we

00:12:36,860 --> 00:12:41,690
called it so of course we tested on karo

00:12:39,620 --> 00:12:44,089
baat but also for example on an

00:12:41,690 --> 00:12:45,680
industrial setup part of the setup can

00:12:44,089 --> 00:12:48,160
you can see out of cebu so the

00:12:45,680 --> 00:12:50,660
application that's running there

00:12:48,160 --> 00:12:55,540
basically was created with pride and

00:12:50,660 --> 00:12:57,740
also we had some demos with Hubert and

00:12:55,540 --> 00:13:00,380
here you actually in the screencaps

00:12:57,740 --> 00:13:03,260
short you can actually see that you can

00:13:00,380 --> 00:13:05,930
also create quite complex systems of

00:13:03,260 --> 00:13:09,520
pride besides the examples which are on

00:13:05,930 --> 00:13:12,560
the website which are more simple and

00:13:09,520 --> 00:13:15,610
actually i prepared a screencast to show

00:13:12,560 --> 00:13:15,610
you how it looks like

00:13:16,160 --> 00:13:23,839
sings that's this one see

00:13:34,120 --> 00:13:42,930
okay so what we see here is basically

00:13:38,410 --> 00:13:45,610
this Eclipse IDE with sprite plugins and

00:13:42,930 --> 00:13:50,529
what i'm doing here is basically i

00:13:45,610 --> 00:13:54,250
create a new was ross package diagram

00:13:50,529 --> 00:13:58,510
which is basically the capability model

00:13:54,250 --> 00:14:02,020
we have and after creating that i get i

00:13:58,510 --> 00:14:04,390
get a graphical editor here where which

00:14:02,020 --> 00:14:08,080
I can use to basically first create a

00:14:04,390 --> 00:14:12,370
package and in this package basically

00:14:08,080 --> 00:14:14,589
create a node which is that one here and

00:14:12,370 --> 00:14:18,670
now I've basically start creating for

00:14:14,589 --> 00:14:20,589
example parameters of my component which

00:14:18,670 --> 00:14:23,770
I can later configure in the system

00:14:20,589 --> 00:14:28,330
editor and for example in this case I

00:14:23,770 --> 00:14:32,050
create a simple publisher give it a name

00:14:28,330 --> 00:14:35,500
and so on and basically if i put in a

00:14:32,050 --> 00:14:39,580
dependencies for example in there in the

00:14:35,500 --> 00:14:42,640
package models and these based on these

00:14:39,580 --> 00:14:45,520
dependencies i can also resolve message

00:14:42,640 --> 00:14:47,380
types of the officer publisher so

00:14:45,520 --> 00:14:49,900
basically if i click on the publish now

00:14:47,380 --> 00:14:55,540
in this drop-down menu i get also

00:14:49,900 --> 00:15:00,070
resolved message types and based on

00:14:55,540 --> 00:15:04,240
these models i can also after putting in

00:15:00,070 --> 00:15:08,290
some more information i will shown a

00:15:04,240 --> 00:15:11,260
second that i actually do it i will

00:15:08,290 --> 00:15:14,500
basically create the code now so i go to

00:15:11,260 --> 00:15:17,350
this model and press a great c++

00:15:14,500 --> 00:15:20,709
component cord and after refreshing the

00:15:17,350 --> 00:15:23,200
workspace you see now say created a code

00:15:20,709 --> 00:15:25,570
and what is very important about this

00:15:23,200 --> 00:15:28,570
code is set is split up basically in a

00:15:25,570 --> 00:15:30,580
row spot so in this rough spot are the

00:15:28,570 --> 00:15:32,020
raw such dependence toughest in source

00:15:30,580 --> 00:15:34,300
application implementation of the

00:15:32,020 --> 00:15:37,900
publishers of the subscribers and so on

00:15:34,300 --> 00:15:41,130
and also was independent code lies in

00:15:37,900 --> 00:15:41,130
the common directory

00:15:44,890 --> 00:15:51,560
sorry due to resist time constraints

00:15:49,640 --> 00:15:54,019
because I'm already running out of time

00:15:51,560 --> 00:15:56,089
is with scripts the screencaps if you're

00:15:54,019 --> 00:15:59,060
interested just tell me afterwards I can

00:15:56,089 --> 00:16:01,370
show you but what is really important is

00:15:59,060 --> 00:16:04,790
that I want to call for your

00:16:01,370 --> 00:16:07,820
participation on this creation of pride

00:16:04,790 --> 00:16:10,010
because I think brightest on a state

00:16:07,820 --> 00:16:12,500
right now where it can be used but it's

00:16:10,010 --> 00:16:16,339
really required that you use it and give

00:16:12,500 --> 00:16:19,040
us or give me feedback so just please

00:16:16,339 --> 00:16:22,430
use it tell me what's wrong tell me

00:16:19,040 --> 00:16:24,920
what's annoying you and basically to

00:16:22,430 --> 00:16:28,360
refactor code just take your coat you

00:16:24,920 --> 00:16:30,829
understand it best model it generates a

00:16:28,360 --> 00:16:35,470
code template out of it and then you can

00:16:30,829 --> 00:16:38,660
basically try to fit your code into the

00:16:35,470 --> 00:16:40,310
provided areas and I have done that for

00:16:38,660 --> 00:16:42,829
multiple nodes already it's not that

00:16:40,310 --> 00:16:45,370
complicated and then please complain

00:16:42,829 --> 00:16:49,310
about the code that's generated because

00:16:45,370 --> 00:16:52,490
that's just my view of doing it and

00:16:49,310 --> 00:16:56,060
maybe it's says the bucks and I don't

00:16:52,490 --> 00:16:58,130
know so please tell me what's wrong with

00:16:56,060 --> 00:17:00,320
the templates there's a dedicated

00:16:58,130 --> 00:17:02,360
package where all the templates lie in

00:17:00,320 --> 00:17:06,169
the sprite template so you can edit it

00:17:02,360 --> 00:17:09,470
and it will be used in bright right away

00:17:06,169 --> 00:17:11,540
when you edit the template and also

00:17:09,470 --> 00:17:13,850
share your ideas tell me what you think

00:17:11,540 --> 00:17:16,250
is a use case for model-driven

00:17:13,850 --> 00:17:18,709
engineering and we can maybe improve

00:17:16,250 --> 00:17:20,900
right here so we have a mailing lists

00:17:18,709 --> 00:17:23,059
just dedicated for bright and also

00:17:20,900 --> 00:17:25,549
there's a gator page with the issue list

00:17:23,059 --> 00:17:35,600
where I can put in feature requests or

00:17:25,549 --> 00:17:40,930
bugs so just recapping the slide in the

00:17:35,600 --> 00:17:43,370
beginning basically so you can reuse by

00:17:40,930 --> 00:17:46,100
components now by adapting just the

00:17:43,370 --> 00:17:49,820
component model you babe it understand

00:17:46,100 --> 00:17:53,180
it you can enforce bet best practices

00:17:49,820 --> 00:17:55,100
uses models and templates and also in

00:17:53,180 --> 00:17:57,050
our experience that learning curves are

00:17:55,100 --> 00:17:58,670
much better now because the beginners

00:17:57,050 --> 00:18:01,550
don't have to fight with C++

00:17:58,670 --> 00:18:03,290
implementations also the first release

00:18:01,550 --> 00:18:06,920
cycles can be handled quite well because

00:18:03,290 --> 00:18:09,680
we just update sir code templates and

00:18:06,920 --> 00:18:13,100
the rest is hopefully done automatically

00:18:09,680 --> 00:18:14,090
and in especially in distributed

00:18:13,100 --> 00:18:15,530
environments you can share

00:18:14,090 --> 00:18:19,550
implementations and models of

00:18:15,530 --> 00:18:21,380
implementations quite easily so yeah so

00:18:19,550 --> 00:18:23,870
the current releases the dot to release

00:18:21,380 --> 00:18:27,650
you can use it by just using apt-get

00:18:23,870 --> 00:18:31,300
thanks to us a great DBN package

00:18:27,650 --> 00:18:35,120
creation tool chain we haven't ross and

00:18:31,300 --> 00:18:37,190
so the thing i just explained with the

00:18:35,120 --> 00:18:39,080
capability development also the system

00:18:37,190 --> 00:18:40,510
development and coordinated development

00:18:39,080 --> 00:18:43,580
if you have in this release right now

00:18:40,510 --> 00:18:45,110
there extech stuff so the textual stuff

00:18:43,580 --> 00:18:48,920
will be in the next release i will hope

00:18:45,110 --> 00:18:51,380
fully reset quite soon so please

00:18:48,920 --> 00:18:54,490
participate if if you're interested in

00:18:51,380 --> 00:18:54,490

YouTube URL: https://www.youtube.com/watch?v=4zQEZIqe7Nk


