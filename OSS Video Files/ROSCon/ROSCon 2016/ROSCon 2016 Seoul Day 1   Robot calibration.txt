Title: ROSCon 2016 Seoul Day 1   Robot calibration
Publication date: 2016-10-20
Playlist: ROSCon 2016
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2016 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,770 --> 00:00:05,790
hello everyone I'm niharika role of

00:00:03,480 --> 00:00:07,290
robotics engineer at fat robotics and

00:00:05,790 --> 00:00:09,870
today i will be presenting our work on

00:00:07,290 --> 00:00:11,820
robot calibration so we've created an

00:00:09,870 --> 00:00:14,280
open-source calibration framework that i

00:00:11,820 --> 00:00:20,939
worked on as an internet patch and we

00:00:14,280 --> 00:00:23,100
use that to calibrate our robots so we

00:00:20,939 --> 00:00:24,240
produce a lot of robotic fetch and we

00:00:23,100 --> 00:00:26,880
don't want to be spending too much time

00:00:24,240 --> 00:00:29,519
calibrating these robots so fast and

00:00:26,880 --> 00:00:31,920
robust calibration system was needed to

00:00:29,519 --> 00:00:34,320
calibrate these robots and to create a

00:00:31,920 --> 00:00:36,300
great robot army so first I'll give a

00:00:34,320 --> 00:00:38,129
brief introduction to robot calibration

00:00:36,300 --> 00:00:39,930
then we'll go over the common

00:00:38,129 --> 00:00:42,379
calibration systems namely camera

00:00:39,930 --> 00:00:44,430
calibration and robot calibration

00:00:42,379 --> 00:00:46,350
finally I will talk about our two main

00:00:44,430 --> 00:00:48,270
calibration packages our first

00:00:46,350 --> 00:00:52,469
calibration and robot calibration in

00:00:48,270 --> 00:00:54,360
detail so robot calibration is an

00:00:52,469 --> 00:00:56,460
essential prerequisite to many mobile

00:00:54,360 --> 00:00:58,260
manipulation tasks and for many mobile

00:00:56,460 --> 00:01:00,420
manipulation tasks to be successfully

00:00:58,260 --> 00:01:02,760
performed the sensors and the kinematic

00:01:00,420 --> 00:01:05,220
chain of a robot must be very well

00:01:02,760 --> 00:01:07,860
aligned so robot calibration is the

00:01:05,220 --> 00:01:10,080
process of determining the actual values

00:01:07,860 --> 00:01:11,520
of the intro of the Kinema of the

00:01:10,080 --> 00:01:14,130
kinematic parameters of an industrial

00:01:11,520 --> 00:01:17,460
robot so these kinematic parameters are

00:01:14,130 --> 00:01:19,950
the joints and links of the robot take a

00:01:17,460 --> 00:01:21,960
surgical robot for example um you need

00:01:19,950 --> 00:01:23,549
high precision and accuracy because you

00:01:21,960 --> 00:01:25,290
want to be able to operate upon the

00:01:23,549 --> 00:01:28,110
correct tissue or organ so you need a

00:01:25,290 --> 00:01:30,990
very well calibrated robot or if your

00:01:28,110 --> 00:01:31,979
robots manufacturing something oh you

00:01:30,990 --> 00:01:33,720
want the robot to be very well

00:01:31,979 --> 00:01:36,689
calibrated because you wanted to produce

00:01:33,720 --> 00:01:40,110
the exact thing you need a fresh we need

00:01:36,689 --> 00:01:43,350
our fetch robot to pick up house to pick

00:01:40,110 --> 00:01:46,380
up objects on the shelves and we don't

00:01:43,350 --> 00:01:48,240
want the arm to hit stuff to hit stuff

00:01:46,380 --> 00:01:50,909
around itself so we need to know the

00:01:48,240 --> 00:01:54,500
exact model of the robot so that tasks

00:01:50,909 --> 00:01:56,520
like picking can be performed correctly

00:01:54,500 --> 00:01:59,490
alright so when people think about

00:01:56,520 --> 00:02:01,680
calibrating robots they usually confuse

00:01:59,490 --> 00:02:03,570
it with camera calibration and camera

00:02:01,680 --> 00:02:05,880
calibration is important because it lets

00:02:03,570 --> 00:02:07,429
you reconstruct a true world model it

00:02:05,880 --> 00:02:09,929
lets you get a highly accurate

00:02:07,429 --> 00:02:12,150
representation of the real world from

00:02:09,929 --> 00:02:12,940
the captured images but lenses aren't

00:02:12,150 --> 00:02:15,400
perfect

00:02:12,940 --> 00:02:17,080
and camera calibration is important the

00:02:15,400 --> 00:02:19,480
two type the two different types of

00:02:17,080 --> 00:02:22,330
camera calibration intrinsic calibration

00:02:19,480 --> 00:02:24,310
and extrinsic calibration ah so

00:02:22,330 --> 00:02:26,920
intrinsic calibration is the process of

00:02:24,310 --> 00:02:28,540
estimating the internal parameters or

00:02:26,920 --> 00:02:30,670
the intrinsic parameters of the camera

00:02:28,540 --> 00:02:32,740
like focal length optical center and

00:02:30,670 --> 00:02:35,290
distortion parameters these are

00:02:32,740 --> 00:02:36,880
typically estimated using odm a least

00:02:35,290 --> 00:02:39,130
square estimate using measurements from

00:02:36,880 --> 00:02:43,360
a calibration pattern typically like a

00:02:39,130 --> 00:02:46,480
checkerboard extrinsic calibration is

00:02:43,360 --> 00:02:48,820
the process of determining the extrinsic

00:02:46,480 --> 00:02:52,390
parameters like rotation and translation

00:02:48,820 --> 00:02:54,040
of the camera in the real world so

00:02:52,390 --> 00:02:56,380
expensive calibration fines or

00:02:54,040 --> 00:02:58,870
calibrates the rigid transformation from

00:02:56,380 --> 00:03:01,810
the 3d World coordinate system to the 3d

00:02:58,870 --> 00:03:03,880
camera coordinate system while the

00:03:01,810 --> 00:03:06,460
intrinsic calibration calibrates the

00:03:03,880 --> 00:03:09,130
projective transformation from the 3d

00:03:06,460 --> 00:03:13,810
camera coordinates into the 2d image

00:03:09,130 --> 00:03:16,120
coordinates ok but robot calibration is

00:03:13,810 --> 00:03:17,890
much more than this it's the calibration

00:03:16,120 --> 00:03:20,230
of the sensors and the kinematic chain

00:03:17,890 --> 00:03:22,690
yeah and the kinematic chain of robot

00:03:20,230 --> 00:03:25,180
which consists of joint songs so which

00:03:22,690 --> 00:03:26,980
were a robot basically means calibrating

00:03:25,180 --> 00:03:29,770
the camera and the kinematic chain

00:03:26,980 --> 00:03:31,959
together so each joint is a potential

00:03:29,770 --> 00:03:34,989
source of error in the kinematic chain

00:03:31,959 --> 00:03:37,930
so we need to make sure that each joint

00:03:34,989 --> 00:03:42,489
is calibrated properly and the sensor

00:03:37,930 --> 00:03:44,980
gives us accurate information a number

00:03:42,489 --> 00:03:47,350
of systems exist for calibration of

00:03:44,980 --> 00:03:49,060
mobile manipulators and several of them

00:03:47,350 --> 00:03:51,130
have open source implementations

00:03:49,060 --> 00:03:53,650
available for example the pr2

00:03:51,130 --> 00:03:55,780
calibration package arm and the Ross

00:03:53,650 --> 00:03:57,670
industrial calibration which was

00:03:55,780 --> 00:04:02,140
presented by chris lewis at transcom

00:03:57,670 --> 00:04:05,050
2014 but these are systems face a few

00:04:02,140 --> 00:04:06,930
challenges like an inability to

00:04:05,050 --> 00:04:10,180
generalize across sensors and platforms

00:04:06,930 --> 00:04:12,580
so many of these systems are heavily

00:04:10,180 --> 00:04:14,860
designed or tuned around a particular

00:04:12,580 --> 00:04:17,590
set of sensors and are unable to

00:04:14,860 --> 00:04:19,989
generalize beyond those sensors slow

00:04:17,590 --> 00:04:22,120
calibration times on the calibration

00:04:19,989 --> 00:04:24,370
system built for the pr2 robot often

00:04:22,120 --> 00:04:26,320
take as much as 45 minutes for the

00:04:24,370 --> 00:04:28,720
caliber for calibration to happen

00:04:26,320 --> 00:04:31,240
with half of the time spent in actually

00:04:28,720 --> 00:04:33,790
capturing calibration data while the

00:04:31,240 --> 00:04:37,240
other half spent in doing the actual

00:04:33,790 --> 00:04:38,950
optimization lack of robustness so

00:04:37,240 --> 00:04:41,290
frequently these calibration systems

00:04:38,950 --> 00:04:43,390
have issues which causes them to not get

00:04:41,290 --> 00:04:44,920
a good calibration on each and every

00:04:43,390 --> 00:04:47,110
attempt which can be particularly

00:04:44,920 --> 00:04:48,850
detrimental especially when your

00:04:47,110 --> 00:04:52,210
calibration takes a significant amount

00:04:48,850 --> 00:04:53,710
of time to redo all right so before I

00:04:52,210 --> 00:04:55,900
start discussing about a calibration

00:04:53,710 --> 00:04:58,030
system let me quickly go over our fat

00:04:55,900 --> 00:05:00,400
robot or two and explain what we're

00:04:58,030 --> 00:05:02,470
trying to calibrate here so fetch is a

00:05:00,400 --> 00:05:05,050
mobile manipulator which consists of a

00:05:02,470 --> 00:05:08,800
differential drive robot base and it has

00:05:05,050 --> 00:05:14,140
a seven degree of freedom arm a pan tilt

00:05:08,800 --> 00:05:16,660
and tilt until joint oh and also torso

00:05:14,140 --> 00:05:18,850
lifts actuators it has a prime sense

00:05:16,660 --> 00:05:22,000
sweetie carmine sensor install in his

00:05:18,850 --> 00:05:24,700
head so our aim was to calibrate each in

00:05:22,000 --> 00:05:27,220
every joint in the arm the head tilt and

00:05:24,700 --> 00:05:31,660
head pan joints and the head camera

00:05:27,220 --> 00:05:33,370
parameters simultaneously ok so we

00:05:31,660 --> 00:05:36,670
wanted to automate this calibration

00:05:33,370 --> 00:05:38,590
process and make it fast and reliable so

00:05:36,670 --> 00:05:41,200
we have robots both in the field and in

00:05:38,590 --> 00:05:43,990
academia and neither warehouse operators

00:05:41,200 --> 00:05:45,640
nor researchers want a badly calibrated

00:05:43,990 --> 00:05:49,090
robot or want to spend too much time

00:05:45,640 --> 00:05:51,790
calibrating the robot so first

00:05:49,090 --> 00:05:53,500
calibration is a hand I calibration

00:05:51,790 --> 00:05:55,120
system and what this means is that we

00:05:53,500 --> 00:05:56,770
have our calibration targets in a

00:05:55,120 --> 00:05:59,500
creeper frame which is the end effector

00:05:56,770 --> 00:06:01,210
frame and you're trying to estimate the

00:05:59,500 --> 00:06:03,600
transform or the relationship between

00:06:01,210 --> 00:06:06,550
each joint that exists between the

00:06:03,600 --> 00:06:09,070
sensors that is the camera and the end

00:06:06,550 --> 00:06:10,780
effector frame or the creeper frame so

00:06:09,070 --> 00:06:13,780
it's essentially making the robots more

00:06:10,780 --> 00:06:15,850
human-like or giving a robot hand eye

00:06:13,780 --> 00:06:19,180
coordination just like we humans are

00:06:15,850 --> 00:06:21,850
subconsciously have if you look at the

00:06:19,180 --> 00:06:24,040
two images these images show the robot

00:06:21,850 --> 00:06:25,990
model in our ways so the image on the

00:06:24,040 --> 00:06:28,090
Left shows an uncalibrated robot and the

00:06:25,990 --> 00:06:30,070
point cloud and the gripper measures

00:06:28,090 --> 00:06:32,710
don't align so this happens because the

00:06:30,070 --> 00:06:35,200
robots internal kinematic model does not

00:06:32,710 --> 00:06:38,110
agree with the real world arm or its

00:06:35,200 --> 00:06:39,880
true physical self arm so we need to

00:06:38,110 --> 00:06:42,250
update the robot model

00:06:39,880 --> 00:06:45,700
you are the robot you are the robot you

00:06:42,250 --> 00:06:46,840
IDF so on the right you can see that you

00:06:45,700 --> 00:06:48,730
can you can see the result of a

00:06:46,840 --> 00:06:50,530
calibration system where the point cloud

00:06:48,730 --> 00:06:53,140
blends in very nicely with the creeper

00:06:50,530 --> 00:06:55,420
mesh so ranchers of refresh calibration

00:06:53,140 --> 00:06:57,400
system is fast it takes less than three

00:06:55,420 --> 00:06:59,410
minutes for calibration to happen it

00:06:57,400 --> 00:07:04,660
gives you real repeatable results and

00:06:59,410 --> 00:07:07,300
its robust so first calibration is the

00:07:04,660 --> 00:07:09,940
configuration for our robot calibration

00:07:07,300 --> 00:07:12,880
package is essentially a bunch of yamo

00:07:09,940 --> 00:07:15,010
files and robot calibration package is

00:07:12,880 --> 00:07:18,370
where our robot generic collaboration

00:07:15,010 --> 00:07:20,500
code lives robot calibration happens in

00:07:18,370 --> 00:07:22,750
two phases the capture phase and the

00:07:20,500 --> 00:07:24,850
calibration phase in the capture phase

00:07:22,750 --> 00:07:26,890
we capture data about calibration

00:07:24,850 --> 00:07:29,380
targets and this indirectly gives us

00:07:26,890 --> 00:07:31,960
information about the kinematics and the

00:07:29,380 --> 00:07:35,140
sensors which are present in the robot

00:07:31,960 --> 00:07:38,590
and the calibration phase is optimizing

00:07:35,140 --> 00:07:40,330
the parameters of the system which by

00:07:38,590 --> 00:07:42,630
essentially minimizing the error between

00:07:40,330 --> 00:07:45,220
the sensor and the kinematic alignment a

00:07:42,630 --> 00:07:47,860
good calibrated robot knows exactly

00:07:45,220 --> 00:07:49,900
where its body part sir while if you

00:07:47,860 --> 00:07:51,400
have a bad cat a bad calibration the

00:07:49,900 --> 00:07:54,070
robot might think that it's heads

00:07:51,400 --> 00:07:56,770
detached from itself or your your arms

00:07:54,070 --> 00:07:59,200
twisted or something weird like that so

00:07:56,770 --> 00:08:01,180
calibration for us at fetch is very

00:07:59,200 --> 00:08:03,370
important because we produce a number of

00:08:01,180 --> 00:08:05,500
patches and the technicians assembling

00:08:03,370 --> 00:08:07,420
these robots aligns the joints by eye

00:08:05,500 --> 00:08:09,250
with a few degrees of accuracy and

00:08:07,420 --> 00:08:11,830
calibrations needed to correct this

00:08:09,250 --> 00:08:14,230
error and to understand the true model

00:08:11,830 --> 00:08:16,360
of the robot so usually when the

00:08:14,230 --> 00:08:19,720
technicians assemble robots they need

00:08:16,360 --> 00:08:21,490
calibration jigs or correction jigs and

00:08:19,720 --> 00:08:23,470
stuff like that to align the joints

00:08:21,490 --> 00:08:25,600
properly but a calibration systems so

00:08:23,470 --> 00:08:27,820
awesome that technicians can just align

00:08:25,600 --> 00:08:31,020
the joints by I and after calibration we

00:08:27,820 --> 00:08:34,090
will know the true model off the robot

00:08:31,020 --> 00:08:35,710
ok so the capture phase during the

00:08:34,090 --> 00:08:39,070
capture face the robot moves through a

00:08:35,710 --> 00:08:40,750
series of predefined poses which have

00:08:39,070 --> 00:08:43,330
been selected as a representative sample

00:08:40,750 --> 00:08:46,390
a pair of the positions where

00:08:43,330 --> 00:08:48,880
calibration is required to be valid we

00:08:46,390 --> 00:08:50,860
need to make sure that these that these

00:08:48,880 --> 00:08:52,490
samples or these positions have enough

00:08:50,860 --> 00:08:54,470
information about all the joints

00:08:52,490 --> 00:08:56,390
need to be calibrated so we need to take

00:08:54,470 --> 00:08:59,209
the data of the target from different

00:08:56,390 --> 00:09:01,880
angles and a different distances we use

00:08:59,209 --> 00:09:04,850
move it to move the robot to the

00:09:01,880 --> 00:09:06,890
captured poses and the calibration for

00:09:04,850 --> 00:09:09,380
the calibration phase always records the

00:09:06,890 --> 00:09:12,560
position of each and every joint in the

00:09:09,380 --> 00:09:14,660
robot at each of these capture poses we

00:09:12,560 --> 00:09:16,790
have three finders that are available in

00:09:14,660 --> 00:09:18,680
the package the LED finer the

00:09:16,790 --> 00:09:20,810
checkerboard finder and the ground plane

00:09:18,680 --> 00:09:25,520
finder also additional finders can be

00:09:20,810 --> 00:09:26,810
added very easily ok so the LED finer

00:09:25,520 --> 00:09:29,060
essentially looks for the for

00:09:26,810 --> 00:09:31,670
calibration LEDs which are present in

00:09:29,060 --> 00:09:33,620
the gripper and these LEDs are blinked

00:09:31,670 --> 00:09:36,500
in a pattern and the depth sensors then

00:09:33,620 --> 00:09:38,390
able to find these LEDs by it uses a

00:09:36,500 --> 00:09:40,490
simple threshold in algorithms which

00:09:38,390 --> 00:09:43,220
looks for these trans it looks for these

00:09:40,490 --> 00:09:45,709
transitions we use the finder because it

00:09:43,220 --> 00:09:50,570
makes the robot self-sufficient and very

00:09:45,709 --> 00:09:51,740
easy to calibrate we can also attach a

00:09:50,570 --> 00:09:54,230
checkerboard to the gripper for

00:09:51,740 --> 00:09:56,089
calibration arm we used to standard

00:09:54,230 --> 00:09:58,040
opencv tracker board detector to detect

00:09:56,089 --> 00:09:59,300
the position of each of the corner

00:09:58,040 --> 00:10:01,339
points that are present in the

00:09:59,300 --> 00:10:03,380
checkerboard and the position of each of

00:10:01,339 --> 00:10:09,680
these points is directly measurable by

00:10:03,380 --> 00:10:12,589
the camera alright so the the ground

00:10:09,680 --> 00:10:15,110
plane finder was originally added to

00:10:12,589 --> 00:10:16,790
reduce the distortion in the in the

00:10:15,110 --> 00:10:19,130
ground or to basically flat in the

00:10:16,790 --> 00:10:21,800
ground plane so the head camera is used

00:10:19,130 --> 00:10:24,200
to find planes which are close in

00:10:21,800 --> 00:10:26,149
location and an orientation to the true

00:10:24,200 --> 00:10:28,910
ground plane and this can improve

00:10:26,149 --> 00:10:31,339
calibration especially at longer longer

00:10:28,910 --> 00:10:34,190
ranges since the arm can give us data or

00:10:31,339 --> 00:10:39,950
information only up to a distance of one

00:10:34,190 --> 00:10:42,200
meter right the optimization phase so

00:10:39,950 --> 00:10:44,990
during the optimization phase we project

00:10:42,200 --> 00:10:47,000
the expected position of the calibration

00:10:44,990 --> 00:10:49,520
target through each of these kinematic

00:10:47,000 --> 00:10:51,890
chain and sensors and difference between

00:10:49,520 --> 00:10:54,020
these reproductions are these

00:10:51,890 --> 00:10:56,810
measurements forms a residual over which

00:10:54,020 --> 00:10:59,510
optimization is then performed so our

00:10:56,810 --> 00:11:00,920
system uses the series optimizer to

00:10:59,510 --> 00:11:03,680
solve the reprojection error

00:11:00,920 --> 00:11:05,750
minimization problem the series is based

00:11:03,680 --> 00:11:08,120
on creating a problem with

00:11:05,750 --> 00:11:10,580
one or more free parameters and one or

00:11:08,120 --> 00:11:13,070
more error box so the optimizer will

00:11:10,580 --> 00:11:15,230
then attempt to find the optimal values

00:11:13,070 --> 00:11:17,090
for each of the joints of the robot or

00:11:15,230 --> 00:11:19,060
each of this creep each of the free

00:11:17,090 --> 00:11:22,700
parameters based on minimizing the

00:11:19,060 --> 00:11:24,110
residuals from each of the era blocks so

00:11:22,700 --> 00:11:27,320
free parameters are fairly

00:11:24,110 --> 00:11:30,980
straightforward they typically consists

00:11:27,320 --> 00:11:33,830
of joint offsets link offsets camera

00:11:30,980 --> 00:11:36,680
intrinsic and extrinsic while arrow

00:11:33,830 --> 00:11:38,900
blocks use data from one or more sensors

00:11:36,680 --> 00:11:40,790
and reproject them to a common frame and

00:11:38,900 --> 00:11:46,730
they then they compute the residual

00:11:40,790 --> 00:11:49,760
between these reproductions right so the

00:11:46,730 --> 00:11:52,160
LED detector are essentially looks for

00:11:49,760 --> 00:11:53,870
the elder for LEDs that are present in

00:11:52,160 --> 00:11:55,790
the creeper and once the camera finds

00:11:53,870 --> 00:11:58,340
them the points are then reap rejected

00:11:55,790 --> 00:12:01,130
from the camera frame to the base link

00:11:58,340 --> 00:12:04,010
frame and we know where these LEDs are

00:12:01,130 --> 00:12:07,040
mounted on the gripper so the position

00:12:04,010 --> 00:12:10,780
of these LEDs is reproductive to the

00:12:07,040 --> 00:12:13,550
virtual arm sensor again to the baseline

00:12:10,780 --> 00:12:15,350
so it's and the difference between these

00:12:13,550 --> 00:12:17,000
two marry projections and forms the

00:12:15,350 --> 00:12:19,100
residual or which optimizations

00:12:17,000 --> 00:12:21,320
unperformed so the same thing for the

00:12:19,100 --> 00:12:24,470
checkerboard calibration except that the

00:12:21,320 --> 00:12:26,270
number of points increases the ground

00:12:24,470 --> 00:12:29,450
plane method is slightly different and

00:12:26,270 --> 00:12:32,390
because we have no way of finding a full

00:12:29,450 --> 00:12:35,030
3d estimate of the individual points to

00:12:32,390 --> 00:12:37,460
just looking at the ground plane we only

00:12:35,030 --> 00:12:39,680
compare the post of the points against

00:12:37,460 --> 00:12:42,800
planes equal to zero in the robot base

00:12:39,680 --> 00:12:45,370
link frame so then these arrow box are

00:12:42,800 --> 00:12:48,410
fed into series and to get the offsets

00:12:45,370 --> 00:12:50,060
so our calibration system is designed to

00:12:48,410 --> 00:12:52,550
work with Ross or the robot operating

00:12:50,060 --> 00:12:55,339
system so therefore once we have

00:12:52,550 --> 00:13:00,920
estimated our offsets we can we update

00:12:55,339 --> 00:13:02,960
our robot you IDF or the robot model so

00:13:00,920 --> 00:13:05,660
this slide basically shows the variances

00:13:02,960 --> 00:13:07,730
for each of the joints will end this

00:13:05,660 --> 00:13:09,980
calculated over 25 different kalica

00:13:07,730 --> 00:13:11,870
calibrations and as you can see that the

00:13:09,980 --> 00:13:13,760
variances are really low around the

00:13:11,870 --> 00:13:15,530
order of 10 to power minus 6 for most of

00:13:13,760 --> 00:13:19,430
these joints so we get repeatable

00:13:15,530 --> 00:13:23,630
results from our calibration system

00:13:19,430 --> 00:13:26,690
um so this video compares the robot and

00:13:23,630 --> 00:13:29,210
point cloud alignment before and after

00:13:26,690 --> 00:13:31,070
calibration on the left it's pretty

00:13:29,210 --> 00:13:33,080
clear that the point cloud and the end

00:13:31,070 --> 00:13:35,149
effector positions don't match and you

00:13:33,080 --> 00:13:37,700
can see that a gap exists between the

00:13:35,149 --> 00:13:39,770
point cloud and the gripper fingers

00:13:37,700 --> 00:13:42,529
while on the right we can see that the

00:13:39,770 --> 00:13:45,970
sensor arm our the point cloud is very

00:13:42,529 --> 00:13:45,970
well aligned with the gripper mesh

00:13:46,360 --> 00:13:51,080
alright so calibrating the freight so

00:13:49,190 --> 00:13:52,700
calibrating the fetch was cool but we

00:13:51,080 --> 00:13:55,130
make another robot at fat robotics

00:13:52,700 --> 00:13:57,320
called the freight rate as a mobile base

00:13:55,130 --> 00:13:59,000
which does not have an arm but it does

00:13:57,320 --> 00:14:00,770
have a time-of-flight camera that's

00:13:59,000 --> 00:14:02,660
mounted at an angle so the same

00:14:00,770 --> 00:14:04,520
groundling finder which was discussed

00:14:02,660 --> 00:14:06,980
earlier is used to calibrate the pitch

00:14:04,520 --> 00:14:08,690
of this camera so the camera looks for

00:14:06,980 --> 00:14:11,300
points that are on the ground and then

00:14:08,690 --> 00:14:12,740
these points are reproductive again re

00:14:11,300 --> 00:14:14,570
projected from the camera frame to the

00:14:12,740 --> 00:14:17,540
base length frame and once we know the

00:14:14,570 --> 00:14:20,480
points that are on the ground um so the

00:14:17,540 --> 00:14:22,640
heights basically 0 a height 0 in the

00:14:20,480 --> 00:14:23,930
basic frame so we basically minimize the

00:14:22,640 --> 00:14:27,380
difference between these two readings

00:14:23,930 --> 00:14:31,390
and our face calibrate in less than 10

00:14:27,380 --> 00:14:34,279
seconds right so some final remarks

00:14:31,390 --> 00:14:37,250
fetch calibrations awesome it's a robot

00:14:34,279 --> 00:14:39,740
generic calibration system it's fast and

00:14:37,250 --> 00:14:41,360
it's repeatable our fetch robots are now

00:14:39,740 --> 00:14:44,630
able to pick and squish rubber duckies

00:14:41,360 --> 00:14:45,920
which is also and also you can oh you

00:14:44,630 --> 00:14:47,990
can find our open source code available

00:14:45,920 --> 00:14:49,850
for the patch calibration package under

00:14:47,990 --> 00:14:52,550
fetch cross which is the first link and

00:14:49,850 --> 00:14:55,370
the robot calibration is available at

00:14:52,550 --> 00:14:57,589
github com / Mike Ferguson / robot

00:14:55,370 --> 00:14:59,870
calibration and further documentation

00:14:57,589 --> 00:15:02,180
about how to use our calibration

00:14:59,870 --> 00:15:07,839
packages is available at Doc's turf at

00:15:02,180 --> 00:15:07,839
robotics com oops

00:15:24,819 --> 00:15:30,920
do you do any calibration of your wheel

00:15:27,680 --> 00:15:32,839
diameters Oh calibration off wheel

00:15:30,920 --> 00:15:35,750
diameters of your best all right now

00:15:32,839 --> 00:15:40,279
we're just doing the joints and the

00:15:35,750 --> 00:15:42,699
sensors are they have camera great

00:15:40,279 --> 00:15:45,230
presentation how did you determine the

00:15:42,699 --> 00:15:47,810
predefined trajectories to run through

00:15:45,230 --> 00:15:50,569
for calibration so initially we had

00:15:47,810 --> 00:15:53,389
collected um hundred samples which were

00:15:50,569 --> 00:15:55,009
basically random but then we wanted to

00:15:53,389 --> 00:15:58,540
and it took about ten minutes for a

00:15:55,009 --> 00:16:02,930
calibration to happen so we decided to

00:15:58,540 --> 00:16:05,180
like so then we started we wanted to

00:16:02,930 --> 00:16:06,829
make it faster so we reduce the number

00:16:05,180 --> 00:16:08,449
of trajectories which was again like

00:16:06,829 --> 00:16:10,579
completely random but then we got to a

00:16:08,449 --> 00:16:12,350
point that we realized that once your

00:16:10,579 --> 00:16:14,809
data needs to be rich enough for

00:16:12,350 --> 00:16:16,550
calibration to happen so we so those

00:16:14,809 --> 00:16:18,709
poor disposes were like manually

00:16:16,550 --> 00:16:21,980
selected by us like making sure that the

00:16:18,709 --> 00:16:23,629
robot moves to like maximum rotations at

00:16:21,980 --> 00:16:32,240
each of these calibration poses so you

00:16:23,629 --> 00:16:41,089
actually get enough information are

00:16:32,240 --> 00:16:43,430
there any other questions it seems that

00:16:41,089 --> 00:16:46,069
you are trying to overcome the noise of

00:16:43,430 --> 00:16:48,050
your perception systems and your

00:16:46,069 --> 00:16:49,790
effector systems I want to know that

00:16:48,050 --> 00:16:51,589
some type of the noise is because of the

00:16:49,790 --> 00:16:53,689
environmental factor for example lights

00:16:51,589 --> 00:16:56,809
or other things which will be changed

00:16:53,689 --> 00:16:59,809
during the time how you will to adapt to

00:16:56,809 --> 00:17:02,509
that type of the noise oh so you're

00:16:59,809 --> 00:17:05,000
talking about the exposure and stuff

00:17:02,509 --> 00:17:07,699
that happens when yes for example you

00:17:05,000 --> 00:17:12,140
see here you you're in this condition

00:17:07,699 --> 00:17:14,600
your your distance is something like

00:17:12,140 --> 00:17:16,089
that but in when the environment is

00:17:14,600 --> 00:17:17,770
changed the light is change may be

00:17:16,089 --> 00:17:20,140
different

00:17:17,770 --> 00:17:22,050
ok so for rent so that was one thing

00:17:20,140 --> 00:17:24,670
that it was a problem that we

00:17:22,050 --> 00:17:26,920
encountered so one thing that we could

00:17:24,670 --> 00:17:29,110
do for the asus primesense of the carmen

00:17:26,920 --> 00:17:31,420
that we're using is that we could switch

00:17:29,110 --> 00:17:36,120
off auto exposure and also we take over

00:17:31,420 --> 00:17:40,540
we take ten consecutive like snaps for

00:17:36,120 --> 00:17:42,670
for the LED blinking so basically and

00:17:40,540 --> 00:17:45,580
then we it's a simple thresholding

00:17:42,670 --> 00:17:48,430
algorithm which kinda just you know like

00:17:45,580 --> 00:17:51,040
it gets rid of the exposure problems

00:17:48,430 --> 00:17:57,310
that we have okay it's like 10 snaps and

00:17:51,040 --> 00:18:00,130
then thank you very quick question have

00:17:57,310 --> 00:18:02,770
you applied this calibration method in

00:18:00,130 --> 00:18:05,290
order to get a more accurate gazebo

00:18:02,770 --> 00:18:08,230
model of your robot so that's what this

00:18:05,290 --> 00:18:10,750
does it like updates so this so that's

00:18:08,230 --> 00:18:13,270
what this does it updates the internal

00:18:10,750 --> 00:18:15,550
your robot you IDF so and then you can

00:18:13,270 --> 00:18:17,530
like you can use that to update the

00:18:15,550 --> 00:18:20,140
because the gazebo model essentially

00:18:17,530 --> 00:18:23,170
uses the you IDF right so you would get

00:18:20,140 --> 00:18:26,200
ok updating the gazebo model or the

00:18:23,170 --> 00:18:28,720
internal logo or what the robot actually

00:18:26,200 --> 00:18:32,200
is basically updating the internal robot

00:18:28,720 --> 00:18:34,390
model thanks thanks to your top if I

00:18:32,200 --> 00:18:38,110
want to use fetch calibration to our own

00:18:34,390 --> 00:18:40,420
robot which party I need to modify Oh

00:18:38,110 --> 00:18:41,710
Justin it was the last but it was so you

00:18:40,420 --> 00:18:43,630
need to look at fetch calibration

00:18:41,710 --> 00:18:45,700
package which is essentially the

00:18:43,630 --> 00:18:48,250
configuration to act so you know how do

00:18:45,700 --> 00:18:49,570
you give the free parameters and like

00:18:48,250 --> 00:18:52,180
all the stuff that you need to define

00:18:49,570 --> 00:18:54,010
there and while the main code is present

00:18:52,180 --> 00:18:56,680
in the robot calibration package which

00:18:54,010 --> 00:18:58,180
will link number 2 and my talk okay see

00:18:56,680 --> 00:19:01,230
both those two calibration packages

00:18:58,180 --> 00:19:01,230
together thank you

00:19:02,530 --> 00:19:04,590

YouTube URL: https://www.youtube.com/watch?v=2wot3avlcl8


