Title: ROSCon 2016 Seoul Day 1 Lightning Talk   How to deploy your ROS project
Publication date: 2016-10-20
Playlist: ROSCon 2016
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2016 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,740 --> 00:00:05,040
alright so my name is Kyle phys re i'm

00:00:03,240 --> 00:00:06,600
with canonical the makers of ubuntu and

00:00:05,040 --> 00:00:08,580
i want to talk to you about your

00:00:06,600 --> 00:00:10,980
deployment strategy for raw so you

00:00:08,580 --> 00:00:13,740
finished you know the initial rd you're

00:00:10,980 --> 00:00:15,690
ready to start shipping something how do

00:00:13,740 --> 00:00:18,119
you how do you get from your code 22

00:00:15,690 --> 00:00:19,830
shooting devices well you can submit

00:00:18,119 --> 00:00:22,289
your project to the build farm right

00:00:19,830 --> 00:00:23,970
submit your source step but what happens

00:00:22,289 --> 00:00:26,430
if your project is in public it's not

00:00:23,970 --> 00:00:28,170
open source you can use bloom and then

00:00:26,430 --> 00:00:29,429
build your debs locally but but then how

00:00:28,170 --> 00:00:30,929
do you keep them up to date you have to

00:00:29,429 --> 00:00:34,410
put all this infrastructure together to

00:00:30,929 --> 00:00:36,030
make that happen you can you know like

00:00:34,410 --> 00:00:37,500
when you develop you can just ship it

00:00:36,030 --> 00:00:39,390
with source but that kinda has both

00:00:37,500 --> 00:00:40,770
problems right you have a device with

00:00:39,390 --> 00:00:43,829
source code on it and you still can't

00:00:40,770 --> 00:00:45,600
really update it and what about your

00:00:43,829 --> 00:00:47,789
factory process how do you generate an

00:00:45,600 --> 00:00:50,760
image that has all these things set up

00:00:47,789 --> 00:00:52,649
and ready to go but you should consider

00:00:50,760 --> 00:00:55,110
creating a snap now snap is a new

00:00:52,649 --> 00:00:57,329
packaging format that allows one to

00:00:55,110 --> 00:01:00,989
create a system and its dependencies in

00:00:57,329 --> 00:01:02,789
a single distributable package it works

00:01:00,989 --> 00:01:04,470
really well for ross because you can

00:01:02,789 --> 00:01:08,700
easily build your entire workspace into

00:01:04,470 --> 00:01:10,439
this one single snap you can also bundle

00:01:08,700 --> 00:01:11,909
well you kind of have to bundle all your

00:01:10,439 --> 00:01:13,439
dependencies together into the snap it

00:01:11,909 --> 00:01:16,470
gives you absolute control over what

00:01:13,439 --> 00:01:17,939
makes up your system we have an a great

00:01:16,470 --> 00:01:20,280
tool called snap craft that makes this

00:01:17,939 --> 00:01:22,049
particularly easy you just give it your

00:01:20,280 --> 00:01:23,460
ross workspace and it uses Ross step to

00:01:22,049 --> 00:01:25,619
figure out your dependencies and pulls

00:01:23,460 --> 00:01:28,829
everything down for you and puts it into

00:01:25,619 --> 00:01:30,299
a snap once you have that snap all you

00:01:28,829 --> 00:01:33,140
gotta do is upload it to the store and

00:01:30,299 --> 00:01:35,610
you can roll it out to all of your users

00:01:33,140 --> 00:01:37,079
not only that but once you have it up in

00:01:35,610 --> 00:01:39,360
the store it's installable on a ton of

00:01:37,079 --> 00:01:40,680
different linux distributions so you

00:01:39,360 --> 00:01:42,150
could really settle on whatever

00:01:40,680 --> 00:01:46,020
operating system you run for your device

00:01:42,150 --> 00:01:47,909
but why would you we have something

00:01:46,020 --> 00:01:49,110
called a boon to core which is the same

00:01:47,909 --> 00:01:50,759
event who you know and love but it's

00:01:49,110 --> 00:01:53,250
stripped down specifically to target

00:01:50,759 --> 00:01:56,670
embedded devices it's built completely

00:01:53,250 --> 00:01:58,829
on snaps from the colonel to the OS to

00:01:56,670 --> 00:02:00,960
the applications you put on top of it so

00:01:58,829 --> 00:02:03,990
the entire system gets the benefits of

00:02:00,960 --> 00:02:05,900
snaps now snaps are confined by nature

00:02:03,990 --> 00:02:08,149
which means if

00:02:05,900 --> 00:02:09,500
god forbid the thing is exploited right

00:02:08,149 --> 00:02:10,759
the amount of damage it can do is really

00:02:09,500 --> 00:02:15,200
limited they can't walk all over the

00:02:10,759 --> 00:02:17,060
system the update story behind snaps is

00:02:15,200 --> 00:02:18,680
fantastic because they're since they are

00:02:17,060 --> 00:02:21,910
self-contained like this there's squash

00:02:18,680 --> 00:02:24,170
FS images if an update happens and fails

00:02:21,910 --> 00:02:28,130
then it can roll back to the previous

00:02:24,170 --> 00:02:29,090
version you can easily create an app

00:02:28,130 --> 00:02:30,530
store for your device if you're

00:02:29,090 --> 00:02:32,030
interested in that because we already

00:02:30,530 --> 00:02:34,820
have one all you got to do is put your

00:02:32,030 --> 00:02:36,530
stamp there not only that but we have

00:02:34,820 --> 00:02:38,510
tools specifically for factory processes

00:02:36,530 --> 00:02:41,000
generating images pre-installed with

00:02:38,510 --> 00:02:43,459
snaps and set up ready to go ready for

00:02:41,000 --> 00:02:45,770
deployment so I'd love to talk to you

00:02:43,459 --> 00:02:47,000
some more about this come and talk to us

00:02:45,770 --> 00:02:50,320
at our booth you can't miss it as bright

00:02:47,000 --> 00:02:50,320

YouTube URL: https://www.youtube.com/watch?v=UTb-kKGH9nM


