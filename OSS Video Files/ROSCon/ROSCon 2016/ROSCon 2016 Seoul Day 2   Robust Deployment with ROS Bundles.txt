Title: ROSCon 2016 Seoul Day 2   Robust Deployment with ROS Bundles
Publication date: 2016-10-20
Playlist: ROSCon 2016
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2016 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,000 --> 00:00:06,270
good morning Ross con I was delighted to

00:00:03,689 --> 00:00:09,210
be slotted in between Dirk's build farm

00:00:06,270 --> 00:00:16,049
talk and Alex Henning talking about see

00:00:09,210 --> 00:00:18,000
I on hardware we're all very topical so

00:00:16,049 --> 00:00:20,880
I'm just going to kick off a demo here

00:00:18,000 --> 00:00:30,599
well I do the bulk of everything from

00:00:20,880 --> 00:00:33,030
slides so this is me shelled into a vm

00:00:30,599 --> 00:00:35,010
that we're running in kitchener so I'm

00:00:33,030 --> 00:00:40,140
going to build the demo that's available

00:00:35,010 --> 00:00:43,710
on github it's kind of a 3.0 version of

00:00:40,140 --> 00:00:45,719
what we run internally the packages that

00:00:43,710 --> 00:00:47,700
we built that implement these concepts

00:00:45,719 --> 00:00:50,940
were kind of intended to be open source

00:00:47,700 --> 00:00:52,320
of all but certain assumptions changed

00:00:50,940 --> 00:00:53,850
and it ended up really tied to some of

00:00:52,320 --> 00:00:56,550
our processes so it made more sense to

00:00:53,850 --> 00:01:01,020
just do a minimal demo anyway so what

00:00:56,550 --> 00:01:04,439
this is building is a bundle of all of

00:01:01,020 --> 00:01:06,479
Ross desktop full so you can see that

00:01:04,439 --> 00:01:07,560
all of this will make more sense once

00:01:06,479 --> 00:01:09,330
we've actually talked about it a little

00:01:07,560 --> 00:01:11,460
bit but it's getting the Ross distro

00:01:09,330 --> 00:01:13,380
cash and it's going to build up a work

00:01:11,460 --> 00:01:15,180
space of about 200 packages and it's

00:01:13,380 --> 00:01:17,009
going to build all of it so this is not

00:01:15,180 --> 00:01:19,080
equivalent to building the 2,000

00:01:17,009 --> 00:01:20,939
packages in the distribution but the

00:01:19,080 --> 00:01:22,560
fact that this takes only 10 minutes is

00:01:20,939 --> 00:01:24,659
significant and I want you to think

00:01:22,560 --> 00:01:26,400
about that in light of Dirk's comment

00:01:24,659 --> 00:01:33,720
about building the whole thing and like

00:01:26,400 --> 00:01:36,299
a whole day so and I've got my extended

00:01:33,720 --> 00:01:39,390
desktop then going on here okay so Ross

00:01:36,299 --> 00:01:42,780
bundling I'm going to quickly talk about

00:01:39,390 --> 00:01:44,579
the history how we made it here what the

00:01:42,780 --> 00:01:46,619
problems were that kind of drove it and

00:01:44,579 --> 00:01:48,299
then the design of what we're doing and

00:01:46,619 --> 00:01:51,240
and where we hope to take it in the

00:01:48,299 --> 00:01:53,700
future this actually started two years

00:01:51,240 --> 00:01:57,299
ago with me trying to install Ross on my

00:01:53,700 --> 00:01:59,969
mac which is something that many of you

00:01:57,299 --> 00:02:01,590
do I see max out there and and a lot of

00:01:59,969 --> 00:02:04,290
awesome work from William and others

00:02:01,590 --> 00:02:06,090
have made this possible but it is

00:02:04,290 --> 00:02:08,729
significant when you look at this page

00:02:06,090 --> 00:02:11,610
of instructions and you see how much of

00:02:08,729 --> 00:02:12,980
it is like this is what to do and then

00:02:11,610 --> 00:02:14,599
all of the random things

00:02:12,980 --> 00:02:16,519
you might have to fiddle with or like

00:02:14,599 --> 00:02:20,780
pseudo at it whatever to like make it

00:02:16,519 --> 00:02:23,540
work and so about two years ago I made a

00:02:20,780 --> 00:02:26,030
gist that was basically like here are

00:02:23,540 --> 00:02:27,440
the instructions I think will work for

00:02:26,030 --> 00:02:29,120
me and there were some kind of

00:02:27,440 --> 00:02:31,099
philosophical differences like my

00:02:29,120 --> 00:02:34,610
approach used brood Python instead of

00:02:31,099 --> 00:02:36,530
system Python and whatever but there was

00:02:34,610 --> 00:02:38,540
a very explicit note at the top these

00:02:36,530 --> 00:02:40,310
instructions are not a script paste them

00:02:38,540 --> 00:02:41,959
into your terminal one by one don't just

00:02:40,310 --> 00:02:46,610
download this and run it but everybody

00:02:41,959 --> 00:02:48,260
did that anyway so I ended up moving it

00:02:46,610 --> 00:02:51,319
to a github repo a year and a half ago

00:02:48,260 --> 00:02:52,910
and then it has kind of iterated and and

00:02:51,319 --> 00:02:56,629
now that Travis actually supports

00:02:52,910 --> 00:02:58,129
building on OS 10 there isn't enough

00:02:56,629 --> 00:03:00,170
time on the Travis builder to build

00:02:58,129 --> 00:03:02,239
everything but we kind of build up to

00:03:00,170 --> 00:03:04,730
Ross base just to kind of prove that it

00:03:02,239 --> 00:03:07,010
mostly works and and that covers PCL

00:03:04,730 --> 00:03:10,220
which is by far the source of most of

00:03:07,010 --> 00:03:12,620
the problems so anyway just to kind of

00:03:10,220 --> 00:03:16,129
like give people an idea of what goes on

00:03:12,620 --> 00:03:17,930
in there Ross install generator is able

00:03:16,129 --> 00:03:20,030
to take that package and then there's a

00:03:17,930 --> 00:03:21,650
few flags that say which distro you want

00:03:20,030 --> 00:03:23,599
and then you tell it you want all the

00:03:21,650 --> 00:03:26,150
dependencies and you want tars and you

00:03:23,599 --> 00:03:28,069
put in a Ross install file and then WS

00:03:26,150 --> 00:03:31,519
tool is able to populate that workspace

00:03:28,069 --> 00:03:33,560
with all of those repos and then we use

00:03:31,519 --> 00:03:36,739
raw step to install dependencies this is

00:03:33,560 --> 00:03:38,989
the OS 10 version and and then catkin

00:03:36,739 --> 00:03:41,840
tools is able to build that massive

00:03:38,989 --> 00:03:44,060
workspace so Dirk talked a little bit

00:03:41,840 --> 00:03:48,049
about can make and cat can make isolated

00:03:44,060 --> 00:03:49,849
catkin tools is the kind of successor

00:03:48,049 --> 00:03:51,859
tool which is not quite feature enough

00:03:49,849 --> 00:03:54,440
complete enough for LS or f to recommend

00:03:51,859 --> 00:03:58,010
it for everybody but philosophically

00:03:54,440 --> 00:04:00,019
it's cat can make isolated in that each

00:03:58,010 --> 00:04:02,930
package gets its own seemed akin

00:04:00,019 --> 00:04:04,819
vacation but it will track dependencies

00:04:02,930 --> 00:04:07,519
and run things in parallel where it's

00:04:04,819 --> 00:04:10,190
able to so if you look at this output it

00:04:07,519 --> 00:04:12,650
will run kakon first then once catkin

00:04:10,190 --> 00:04:15,739
finishes it kicks off for other packages

00:04:12,650 --> 00:04:17,870
and then carries on from there and I

00:04:15,739 --> 00:04:19,729
think that's limited more by the fact

00:04:17,870 --> 00:04:23,870
that I have four cores on my mac than

00:04:19,729 --> 00:04:26,550
anything else but anyway that's that so

00:04:23,870 --> 00:04:30,030
the Ross installed generator tool Jenna

00:04:26,550 --> 00:04:37,409
rates this Ross install file and it's

00:04:30,030 --> 00:04:39,750
got tarball links in there and and so

00:04:37,409 --> 00:04:41,250
you can see for each entry it's saying

00:04:39,750 --> 00:04:44,669
this is the name of the folder you

00:04:41,250 --> 00:04:46,740
should use and then this is the tar

00:04:44,669 --> 00:04:48,360
location where you can get that so the

00:04:46,740 --> 00:04:50,909
source of that information is there kind

00:04:48,360 --> 00:04:55,169
of mentioned is the distribution yeah

00:04:50,909 --> 00:04:57,419
mol file as with the build farm and so

00:04:55,169 --> 00:05:00,509
what happens is the Rosenthal generator

00:04:57,419 --> 00:05:05,159
is able to use that source and it will

00:05:00,509 --> 00:05:07,259
grab it out of the the github URL for

00:05:05,159 --> 00:05:09,780
the GBP repo that bloom is generating

00:05:07,259 --> 00:05:12,180
and then Ross and sell generator when

00:05:09,780 --> 00:05:14,669
you use that tar flag it has logic in it

00:05:12,180 --> 00:05:16,889
that says Oh a github repo I know what

00:05:14,669 --> 00:05:18,719
tar balls look like for github and then

00:05:16,889 --> 00:05:20,699
does that which there's no standard

00:05:18,719 --> 00:05:22,349
locate there's no standard kind of

00:05:20,699 --> 00:05:24,180
scheme for converting github into a

00:05:22,349 --> 00:05:28,469
tarball but downloading tar balls is

00:05:24,180 --> 00:05:31,650
crazy fast compared to actually cloning

00:05:28,469 --> 00:05:34,860
git repos particularly big git repos so

00:05:31,650 --> 00:05:36,360
we recently contributed an extension to

00:05:34,860 --> 00:05:41,479
Ross install generator that also

00:05:36,360 --> 00:05:41,479
supports bitbucket and get lab for this

00:05:42,800 --> 00:05:48,810
so the other kind of interesting thing

00:05:45,569 --> 00:05:50,460
here is how the depths flag works so if

00:05:48,810 --> 00:05:53,190
you kind of think about that like the

00:05:50,460 --> 00:05:55,500
depths are expressed in package xmls so

00:05:53,190 --> 00:05:58,050
on a kind of package by package basis

00:05:55,500 --> 00:05:59,789
you could say Oh clone me this one repo

00:05:58,050 --> 00:06:01,169
and I can look in the package XML and

00:05:59,789 --> 00:06:02,400
see these are the things that depends on

00:06:01,169 --> 00:06:04,139
and then you could go back to the

00:06:02,400 --> 00:06:05,639
distribution yamo and find those repos

00:06:04,139 --> 00:06:07,770
and then clone those and then look in

00:06:05,639 --> 00:06:11,669
them and it would be like a super insane

00:06:07,770 --> 00:06:14,129
process so the way that kind of resolves

00:06:11,669 --> 00:06:16,500
itself is that there's a distribution

00:06:14,129 --> 00:06:18,960
cache file which the build farm builds

00:06:16,500 --> 00:06:21,029
which is that distribution yeah mille

00:06:18,960 --> 00:06:24,029
except it's got a giant dictionary in it

00:06:21,029 --> 00:06:25,710
of every package xml so this is like a

00:06:24,029 --> 00:06:28,199
little snippet of that and you can see

00:06:25,710 --> 00:06:31,529
action live with like build to Pendle to

00:06:28,199 --> 00:06:33,629
pend run depend whatever and so that

00:06:31,529 --> 00:06:35,820
distribution cash is updated by the

00:06:33,629 --> 00:06:39,000
build former five minutes or 15 minutes

00:06:35,820 --> 00:06:40,230
whatever it is and so Ross install

00:06:39,000 --> 00:06:42,990
generator is able to act

00:06:40,230 --> 00:06:46,290
this file and then resolve dependencies

00:06:42,990 --> 00:06:48,230
for a whole tree of packages so that's

00:06:46,290 --> 00:06:49,920
kind of like historical piece one

00:06:48,230 --> 00:06:51,840
actually I'm just going to jump out of

00:06:49,920 --> 00:06:55,320
this to check how my thing is doing okay

00:06:51,840 --> 00:06:58,350
so this is our source Deb that's been

00:06:55,320 --> 00:06:59,970
generated and now we're gonna just start

00:06:58,350 --> 00:07:02,130
building that so cow builder is a

00:06:59,970 --> 00:07:06,990
standard scheme for converting a source

00:07:02,130 --> 00:07:10,380
Deb into a binary Deb and resume okay

00:07:06,990 --> 00:07:13,290
we're back so the other kind of

00:07:10,380 --> 00:07:15,450
historical context is about served two

00:07:13,290 --> 00:07:17,100
years ago clearpath committed more

00:07:15,450 --> 00:07:18,960
heavily to a pivot into the industrial

00:07:17,100 --> 00:07:23,400
logistic space and then a year ago I

00:07:18,960 --> 00:07:24,750
entered that team and I have had a long

00:07:23,400 --> 00:07:27,660
tenure working with research products

00:07:24,750 --> 00:07:29,130
and I love it what we find though is

00:07:27,660 --> 00:07:31,200
that researchers are really enthusiastic

00:07:29,130 --> 00:07:33,090
to be on the bleeding edge of everything

00:07:31,200 --> 00:07:35,820
and don't care so much of stuff breaks

00:07:33,090 --> 00:07:39,510
every now and then and the whole idea of

00:07:35,820 --> 00:07:41,160
like oh you had a problem and the

00:07:39,510 --> 00:07:43,110
solution is to upgrade to the latest

00:07:41,160 --> 00:07:45,090
bleeding edge is totally acceptable and

00:07:43,110 --> 00:07:48,330
in the industrial world that is totally

00:07:45,090 --> 00:07:50,360
not acceptable so that was a big part of

00:07:48,330 --> 00:07:53,340
what had kind of driven some of this

00:07:50,360 --> 00:07:57,240
idea so the specific problems rolling

00:07:53,340 --> 00:08:00,090
release the core ross packages that OS

00:07:57,240 --> 00:08:02,670
RF maintains they are very disciplined

00:08:00,090 --> 00:08:04,470
about not breaking api's and if you try

00:08:02,670 --> 00:08:06,360
to commit a pull request that inserts a

00:08:04,470 --> 00:08:09,470
an argument is the middle of a function

00:08:06,360 --> 00:08:12,360
expect or to like smack you down but

00:08:09,470 --> 00:08:14,010
internally I mean it's sort of from a

00:08:12,360 --> 00:08:16,560
sort of philosophical point of view ross

00:08:14,010 --> 00:08:18,900
indigo is a rolling release if you sudo

00:08:16,560 --> 00:08:20,190
apt-get install ross indigo desktop full

00:08:18,900 --> 00:08:22,550
today you're going to get a different

00:08:20,190 --> 00:08:26,190
thing than you got two months ago and

00:08:22,550 --> 00:08:29,100
and so just from that sort of point of

00:08:26,190 --> 00:08:33,560
view it's not a frozen thing and and

00:08:29,100 --> 00:08:36,150
that was a real difficulty for us yeah

00:08:33,560 --> 00:08:39,960
so the other thing is highly coupled

00:08:36,150 --> 00:08:41,220
repos so this and I've actually had a

00:08:39,960 --> 00:08:42,720
number of interesting conversations with

00:08:41,220 --> 00:08:44,280
people this weekend and it's been fun to

00:08:42,720 --> 00:08:47,120
find out where others have landed on

00:08:44,280 --> 00:08:49,530
this a big issue for us is we would have

00:08:47,120 --> 00:08:51,660
systems of functionality which would

00:08:49,530 --> 00:08:54,170
maybe be logical to group into a single

00:08:51,660 --> 00:08:58,010
repo but they'd end up separated for

00:08:54,170 --> 00:08:59,870
kind of reasons external to like the

00:08:58,010 --> 00:09:01,970
immediate development so an example

00:08:59,870 --> 00:09:04,459
would be our controls team has their

00:09:01,970 --> 00:09:06,440
code spread across three repos the repo

00:09:04,459 --> 00:09:07,790
containing move base the revo containing

00:09:06,440 --> 00:09:10,790
a planner and the repo containing a

00:09:07,790 --> 00:09:13,130
tracker the move based repo is forked

00:09:10,790 --> 00:09:15,139
from public and we don't want to just

00:09:13,130 --> 00:09:17,180
clobber those three repos into one

00:09:15,139 --> 00:09:19,010
because at least for an extended period

00:09:17,180 --> 00:09:20,690
of time there was a vague vision that

00:09:19,010 --> 00:09:22,610
our changes to move base would be pushed

00:09:20,690 --> 00:09:25,010
up stream we gave up on that but there

00:09:22,610 --> 00:09:27,350
was this idea that there would be a

00:09:25,010 --> 00:09:29,870
public release of it and so there was a

00:09:27,350 --> 00:09:32,360
very good reason to maintain three

00:09:29,870 --> 00:09:34,430
different repos and yet we would

00:09:32,360 --> 00:09:36,170
constantly have this issue of okay well

00:09:34,430 --> 00:09:38,329
I changed something and it spread across

00:09:36,170 --> 00:09:40,670
three repos and in order to get my

00:09:38,329 --> 00:09:42,410
develops to pass I need to create blooms

00:09:40,670 --> 00:09:44,149
of these other things and so people

00:09:42,410 --> 00:09:46,279
would bloom stuff all the time that

00:09:44,149 --> 00:09:48,620
wasn't really in like a releasable state

00:09:46,279 --> 00:09:52,850
it was just blooming for the sake of

00:09:48,620 --> 00:09:56,360
keeping the system kind of functional so

00:09:52,850 --> 00:09:58,339
coupled repos our release process was

00:09:56,360 --> 00:09:59,540
basically okay here's the current state

00:09:58,339 --> 00:10:01,699
of testing and we're going to snapshot

00:09:59,540 --> 00:10:04,010
it and there that's our like to point o

00:10:01,699 --> 00:10:05,930
release or whatever which is very

00:10:04,010 --> 00:10:07,640
analogous to the sink the manual sync

00:10:05,930 --> 00:10:10,670
operation that Dirk talked about in the

00:10:07,640 --> 00:10:12,949
build farm but that asked that obviously

00:10:10,670 --> 00:10:14,660
gives us a huge problem if a customer

00:10:12,949 --> 00:10:17,240
has code that we deploy to them for

00:10:14,660 --> 00:10:19,220
months ago and we need up to +1 just a

00:10:17,240 --> 00:10:21,500
handful of packages for an incremental

00:10:19,220 --> 00:10:24,230
fix and they're not interested in being

00:10:21,500 --> 00:10:28,339
on you know the latest bleeding edge and

00:10:24,230 --> 00:10:29,930
and I see that there are other ways we

00:10:28,339 --> 00:10:32,300
could have dealt with this but just kind

00:10:29,930 --> 00:10:33,610
of bear with me meaningless package

00:10:32,300 --> 00:10:36,529
releases so this is the other thing

00:10:33,610 --> 00:10:39,199
we're based in the waterloo region and

00:10:36,529 --> 00:10:41,750
we have a major phone manufacturer there

00:10:39,199 --> 00:10:43,069
that has emerged a lot of people over

00:10:41,750 --> 00:10:45,790
the past couple years and so we've

00:10:43,069 --> 00:10:49,190
inherited a lot of kind of phone

00:10:45,790 --> 00:10:50,720
development mentality and my actual

00:10:49,190 --> 00:10:52,220
title a clear path now is the firmware

00:10:50,720 --> 00:10:53,630
and integration manager which is

00:10:52,220 --> 00:10:55,399
fascinating that i ended up doing all

00:10:53,630 --> 00:10:58,130
this infrastructure stuff but I kind of

00:10:55,399 --> 00:11:00,319
justify on the basis that from our

00:10:58,130 --> 00:11:03,860
perspective increasingly the robot is

00:11:00,319 --> 00:11:05,630
one giant embedded target and so if you

00:11:03,860 --> 00:11:07,010
kind of squint funny every piece of code

00:11:05,630 --> 00:11:07,860
that's running on the robot anywhere is

00:11:07,010 --> 00:11:11,070
firmware

00:11:07,860 --> 00:11:13,050
and so that was this kind of idea that

00:11:11,070 --> 00:11:14,670
we didn't want to deal with source work

00:11:13,050 --> 00:11:17,100
spaces on the robots we wanted as much

00:11:14,670 --> 00:11:22,110
as possible to always be deploying a

00:11:17,100 --> 00:11:23,700
binary and so that was also an issue

00:11:22,110 --> 00:11:25,200
that people you know developers would be

00:11:23,700 --> 00:11:26,880
like oh it's going to be a pain in the

00:11:25,200 --> 00:11:28,290
butt to go and shell into a robot so

00:11:26,880 --> 00:11:29,459
whatever I'll just bloom or release and

00:11:28,290 --> 00:11:31,260
then the test team will tell me if it

00:11:29,459 --> 00:11:34,260
broke and so you can imagine how that

00:11:31,260 --> 00:11:36,390
turned out so anyway so we had this idea

00:11:34,260 --> 00:11:38,160
of the bundle and so my colleague

00:11:36,390 --> 00:11:39,750
Jonathan and I sat down and we kind of

00:11:38,160 --> 00:11:41,640
had this idea let's centrally build a

00:11:39,750 --> 00:11:42,810
big workspace with all our stuff we're

00:11:41,640 --> 00:11:44,519
going to tar it up and then we're going

00:11:42,810 --> 00:11:46,440
to put that on the robots and initially

00:11:44,519 --> 00:11:48,390
it was focused on this testing thing of

00:11:46,440 --> 00:11:49,980
okay we'll just have a Ross install file

00:11:48,390 --> 00:11:52,040
that'll cover like the stuff that

00:11:49,980 --> 00:11:55,380
usually breaks as opposed to everything

00:11:52,040 --> 00:11:57,360
but then we changed our minds and that

00:11:55,380 --> 00:11:59,550
was partly from the experience of Ross

00:11:57,360 --> 00:12:00,690
install OS 10 where we said you know

00:11:59,550 --> 00:12:02,610
it's actually not that big a deal to

00:12:00,690 --> 00:12:05,880
just Ross install generator the whole

00:12:02,610 --> 00:12:07,019
world and build all of it and we said

00:12:05,880 --> 00:12:08,750
we're going to need to version that

00:12:07,019 --> 00:12:11,250
thing and we might want to like you know

00:12:08,750 --> 00:12:12,660
gpg sign it and we'll probably want some

00:12:11,250 --> 00:12:14,790
kind of scheme for distributing it and

00:12:12,660 --> 00:12:18,449
it turns out the dead packages have that

00:12:14,790 --> 00:12:19,380
all covered so we'll do that and then we

00:12:18,449 --> 00:12:21,930
said if we're gonna do this for the

00:12:19,380 --> 00:12:24,149
robots anyway why don't we just also use

00:12:21,930 --> 00:12:25,529
it for developers and our CI simulation

00:12:24,149 --> 00:12:29,459
environments and all of that kind of

00:12:25,529 --> 00:12:31,500
thing and so part of the part of the

00:12:29,459 --> 00:12:34,380
choice of a dead package was familiarity

00:12:31,500 --> 00:12:36,120
that it's something that we've have had

00:12:34,380 --> 00:12:37,949
a lot of exposure to and a lot of

00:12:36,120 --> 00:12:39,360
exposure to the tooling and the tooling

00:12:37,949 --> 00:12:42,060
has been around for 20 years it's very

00:12:39,360 --> 00:12:43,769
mature but we did kind of briefly

00:12:42,060 --> 00:12:46,620
consider some of the other options and I

00:12:43,769 --> 00:12:49,350
know others here are doing a similar

00:12:46,620 --> 00:12:50,699
concept with a docker container but if

00:12:49,350 --> 00:12:52,560
you kind of look at the various ways

00:12:50,699 --> 00:12:56,279
that you can deploy like a big blob of

00:12:52,560 --> 00:12:57,630
stuff and and like a like a virtual end

00:12:56,279 --> 00:13:00,060
just kind of solving the same problem

00:12:57,630 --> 00:13:02,310
where you say I want this isolated

00:13:00,060 --> 00:13:04,290
environment for Python that's kind of

00:13:02,310 --> 00:13:06,810
just kind of distinct from all the

00:13:04,290 --> 00:13:09,300
system Python packages true tis the same

00:13:06,810 --> 00:13:12,540
idea docker is that except you're also

00:13:09,300 --> 00:13:15,420
isolating at the kind of port level and

00:13:12,540 --> 00:13:16,829
then vagrant is like a VMware then you

00:13:15,420 --> 00:13:20,730
know you're further isolating it like

00:13:16,829 --> 00:13:21,300
CPU level and so catkin kind of fits in

00:13:20,730 --> 00:13:24,209
at the

00:13:21,300 --> 00:13:25,920
Jewel and level you could say sort of

00:13:24,209 --> 00:13:28,589
again if you squint funny like hacking

00:13:25,920 --> 00:13:32,760
is basically like virtual and for ce mec

00:13:28,589 --> 00:13:34,200
packages kind of and so and so kind of

00:13:32,760 --> 00:13:37,140
the problem that we wanted to solve was

00:13:34,200 --> 00:13:39,630
just getting a blob of files onto the

00:13:37,140 --> 00:13:42,750
onto the robots or desktop computers we

00:13:39,630 --> 00:13:45,420
weren't really interested in this

00:13:42,750 --> 00:13:47,190
business of trying to isolate things or

00:13:45,420 --> 00:13:50,190
installing multiple apps or dealing with

00:13:47,190 --> 00:13:52,279
any of that kind of stuff and so a deb

00:13:50,190 --> 00:13:55,500
package was the simple place to start

00:13:52,279 --> 00:14:00,120
very small sidebar deb packages are

00:13:55,500 --> 00:14:01,589
compressed with the XE utility and it's

00:14:00,120 --> 00:14:03,990
awesome because it has high compression

00:14:01,589 --> 00:14:06,660
it's also single threaded and crazy slow

00:14:03,990 --> 00:14:08,070
so if you have a thing that's like two

00:14:06,660 --> 00:14:10,680
gigabytes and you try to compress it

00:14:08,070 --> 00:14:12,600
it'll take like forever so if you do

00:14:10,680 --> 00:14:14,370
this you should go to my PPA where

00:14:12,600 --> 00:14:17,070
there's a parallel version of D package

00:14:14,370 --> 00:14:20,700
that's super fast so if you do this do

00:14:17,070 --> 00:14:22,589
that so just to quickly talk about our

00:14:20,700 --> 00:14:25,620
tooling we have this Ross bundler tool

00:14:22,589 --> 00:14:26,850
we have a bundle zamel that says this is

00:14:25,620 --> 00:14:29,310
the name of the bundle and these are the

00:14:26,850 --> 00:14:30,990
packages that go in it and then we build

00:14:29,310 --> 00:14:32,370
that into a DSC and that was what you

00:14:30,990 --> 00:14:35,700
saw at the beginning and then cow

00:14:32,370 --> 00:14:37,079
builder builds it and we get Deb's so

00:14:35,700 --> 00:14:39,390
we've talked about most of this stuff

00:14:37,079 --> 00:14:41,399
this is kind of this is the tool that's

00:14:39,390 --> 00:14:43,350
analogous to bloom in our workflow where

00:14:41,399 --> 00:14:45,270
we're creating the rules and control

00:14:43,350 --> 00:14:47,220
files and kind of transforming the

00:14:45,270 --> 00:14:51,540
upstream source into something that the

00:14:47,220 --> 00:14:54,600
debian world understands so to control

00:14:51,540 --> 00:14:58,740
the version we will tag our Ross distro

00:14:54,600 --> 00:15:00,510
repo so that is a little bit of a

00:14:58,740 --> 00:15:02,070
departure from upstream in the sense

00:15:00,510 --> 00:15:04,589
that upstream has like separate

00:15:02,070 --> 00:15:06,300
directories for the different distros we

00:15:04,589 --> 00:15:09,390
wanted to use the branching tagging

00:15:06,300 --> 00:15:12,149
model in get so all of our code is ross

00:15:09,390 --> 00:15:13,949
indigo but we have branches in our in

00:15:12,149 --> 00:15:15,630
our ra's distro that correspond to our

00:15:13,949 --> 00:15:17,430
kind of major releases so we do a major

00:15:15,630 --> 00:15:19,140
release every two months and then we can

00:15:17,430 --> 00:15:22,470
tag it as were as we're proceeding

00:15:19,140 --> 00:15:24,750
through our testing process we use the

00:15:22,470 --> 00:15:26,790
Debian changelog so the version that's

00:15:24,750 --> 00:15:28,860
in the change log it will be what

00:15:26,790 --> 00:15:31,560
corresponds to the tag in the ross

00:15:28,860 --> 00:15:33,480
distro repo so just to really underscore

00:15:31,560 --> 00:15:35,010
that that's the big takeaway here each

00:15:33,480 --> 00:15:37,170
major release of our software

00:15:35,010 --> 00:15:40,260
doc is a tag on Ross distrel that

00:15:37,170 --> 00:15:41,940
corresponds to a change log entry so our

00:15:40,260 --> 00:15:44,400
kind of process with these two initial

00:15:41,940 --> 00:15:46,530
steps is to grab that rust us or repo at

00:15:44,400 --> 00:15:47,970
the appropriate tag and then refresh the

00:15:46,530 --> 00:15:50,550
cache so that we get dependency

00:15:47,970 --> 00:15:52,980
resolution correct for the specific tag

00:15:50,550 --> 00:15:55,200
that we had so that gives us to bundle

00:15:52,980 --> 00:15:57,260
types we have a pre-release bundle which

00:15:55,200 --> 00:15:59,700
is kind of equivalent to testing debs

00:15:57,260 --> 00:16:01,800
it's just the newest of everything and

00:15:59,700 --> 00:16:05,760
then we have a release bundle which is

00:16:01,800 --> 00:16:07,380
the fixed versions based on a tag the

00:16:05,760 --> 00:16:09,150
really cool thing though that we have

00:16:07,380 --> 00:16:11,250
like three minutes to talk about is the

00:16:09,150 --> 00:16:13,440
devel bundle so the devel bundle is

00:16:11,250 --> 00:16:16,140
based on the source branches instead of

00:16:13,440 --> 00:16:17,850
the release branches there's another

00:16:16,140 --> 00:16:19,980
flag for Roth's installed generator

00:16:17,850 --> 00:16:22,770
which is upstream development upstream

00:16:19,980 --> 00:16:25,170
development will get you the source from

00:16:22,770 --> 00:16:28,500
the upstream source repo instead of from

00:16:25,170 --> 00:16:32,490
the bloom GBP repo so this cuts bloom

00:16:28,500 --> 00:16:34,770
out of the picture sorry William the

00:16:32,490 --> 00:16:37,920
devel bundle is really neat because it's

00:16:34,770 --> 00:16:40,050
giving us all of the devel branches

00:16:37,920 --> 00:16:45,030
across the entire Ross distro for what

00:16:40,050 --> 00:16:46,320
we're doing and it was kind of one of

00:16:45,030 --> 00:16:47,520
those things that we approached with

00:16:46,320 --> 00:16:49,530
fear and trembling we were like is this

00:16:47,520 --> 00:16:51,570
totally insane to be doing this it's

00:16:49,530 --> 00:16:53,160
worked out really nice and it's actually

00:16:51,570 --> 00:16:56,040
improved our relationship with upstream

00:16:53,160 --> 00:16:57,570
too because it means that when we detect

00:16:56,040 --> 00:16:59,880
a breakage when something merges into

00:16:57,570 --> 00:17:01,920
ross calm we detect it right away like

00:16:59,880 --> 00:17:03,390
you know i think something broke like

00:17:01,920 --> 00:17:05,190
ross topic broke or something recently

00:17:03,390 --> 00:17:07,290
there was a community contribution and

00:17:05,190 --> 00:17:09,030
like 12 hours later we were like this

00:17:07,290 --> 00:17:10,350
broke and then like four hours after

00:17:09,030 --> 00:17:12,600
that we're like and here's the fix and

00:17:10,350 --> 00:17:14,070
it was very motivating because we got

00:17:12,600 --> 00:17:16,140
the fix in and then our developmental

00:17:14,070 --> 00:17:17,730
rebuilt and we had the fix right away we

00:17:16,140 --> 00:17:20,310
didn't need to wait around for it to be

00:17:17,730 --> 00:17:21,900
bloomed and bill and synced and you know

00:17:20,310 --> 00:17:25,680
it just took out that whole kind of one

00:17:21,900 --> 00:17:27,570
month turn around so this is a little

00:17:25,680 --> 00:17:30,870
bit more into like our internal

00:17:27,570 --> 00:17:33,150
methodology but we basically define like

00:17:30,870 --> 00:17:34,530
a robot's bundle and then Nimbus is the

00:17:33,150 --> 00:17:38,250
name or fleet manager it's like a cloud

00:17:34,530 --> 00:17:40,230
joke and then so for each of those we

00:17:38,250 --> 00:17:42,090
have the the flavor which is kind of

00:17:40,230 --> 00:17:45,450
like the overall version and then the

00:17:42,090 --> 00:17:46,920
developed pre-release and release and so

00:17:45,450 --> 00:17:48,650
so that's what we built so we have an

00:17:46,920 --> 00:17:50,540
internal Jenkins thing and

00:17:48,650 --> 00:17:53,000
I've started to wrangle Jenkins I have a

00:17:50,540 --> 00:17:55,820
deep appreciation for the infrastructure

00:17:53,000 --> 00:17:57,350
team at us are off to deal with that so

00:17:55,820 --> 00:17:59,660
we build those and then we push them

00:17:57,350 --> 00:18:02,030
into aptly aptly is really cool because

00:17:59,660 --> 00:18:05,270
it lets you retain old versions so we

00:18:02,030 --> 00:18:06,620
can have these are the I don't even know

00:18:05,270 --> 00:18:07,940
what it is the pre-release bundle so

00:18:06,620 --> 00:18:11,270
this is rock city's the name of our

00:18:07,940 --> 00:18:13,670
robot so we have a pre-release bundle

00:18:11,270 --> 00:18:15,650
and so if something merges that breaks

00:18:13,670 --> 00:18:17,360
and you're like darn then you just swap

00:18:15,650 --> 00:18:19,220
get install the previous version you

00:18:17,360 --> 00:18:20,840
roll back and then the developer can fix

00:18:19,220 --> 00:18:22,640
it for the next day you don't have to

00:18:20,840 --> 00:18:24,140
worry about freaking out and doing a

00:18:22,640 --> 00:18:28,130
last minute fix and then blooming again

00:18:24,140 --> 00:18:30,200
and which is what we deal with so what

00:18:28,130 --> 00:18:32,090
we do is we have a Status page which is

00:18:30,200 --> 00:18:33,890
a little bit analogous to the Status

00:18:32,090 --> 00:18:36,020
page that Dirk showed for the build farm

00:18:33,890 --> 00:18:38,390
the kind of key difference is that this

00:18:36,020 --> 00:18:41,780
is repo oriented rather than package

00:18:38,390 --> 00:18:44,480
oriented so the two columns are showing

00:18:41,780 --> 00:18:47,150
the current release version so the first

00:18:44,480 --> 00:18:49,280
column of release numbers is a tagged

00:18:47,150 --> 00:18:52,040
release and then the second column is

00:18:49,280 --> 00:18:54,170
the current kind of master so you see

00:18:52,040 --> 00:18:57,800
action live at the top mutated from 111

00:18:54,170 --> 00:19:00,620
521 11-6 so that's telling us since the

00:18:57,800 --> 00:19:02,480
most recent tagged release this package

00:19:00,620 --> 00:19:04,040
is mutated so if we tag a new release

00:19:02,480 --> 00:19:07,520
this is going to be a change that will

00:19:04,040 --> 00:19:09,980
be in that package and the the number

00:19:07,520 --> 00:19:11,750
and then the blue box is showing the

00:19:09,980 --> 00:19:14,120
development branch and then the number

00:19:11,750 --> 00:19:16,430
on the right is showing the number of

00:19:14,120 --> 00:19:18,710
commits that have gone in to the

00:19:16,430 --> 00:19:21,440
developer inch since the last release so

00:19:18,710 --> 00:19:25,790
if we pop one of these open we see okay

00:19:21,440 --> 00:19:30,050
in kakon since 06 18 the following three

00:19:25,790 --> 00:19:32,840
or four changes have gone into that repo

00:19:30,050 --> 00:19:35,060
so that lets us do things like as we're

00:19:32,840 --> 00:19:36,920
approaching a release we can see Oh in

00:19:35,060 --> 00:19:38,960
our development we've been depending on

00:19:36,920 --> 00:19:40,910
these changes that we now really need

00:19:38,960 --> 00:19:42,860
and so we can either internally or

00:19:40,910 --> 00:19:44,780
externally hassle a maintainer to get

00:19:42,860 --> 00:19:46,040
something bloomed or if we can't get it

00:19:44,780 --> 00:19:47,960
bloomed externally we'll just bloom it

00:19:46,040 --> 00:19:50,870
internally in order to get it into our

00:19:47,960 --> 00:19:52,580
release and then quickly I want to talk

00:19:50,870 --> 00:19:54,380
about Ross distro free source we

00:19:52,580 --> 00:19:58,550
contributed this to the Ross distro

00:19:54,380 --> 00:20:00,260
Python repo recently this lets us do

00:19:58,550 --> 00:20:01,460
this fun thing where we look at the

00:20:00,260 --> 00:20:03,980
source repo

00:20:01,460 --> 00:20:06,080
entry in distribution llamo you and you

00:20:03,980 --> 00:20:08,240
have the version which is indigo develop

00:20:06,080 --> 00:20:10,789
branch and we can transform that into

00:20:08,240 --> 00:20:14,000
either a get hash which is what you see

00:20:10,789 --> 00:20:17,390
above or the tag that corresponds to the

00:20:14,000 --> 00:20:19,820
latest version below so this lets us do

00:20:17,390 --> 00:20:21,890
fun things like once we have a release

00:20:19,820 --> 00:20:25,070
sorry there's been some redacted content

00:20:21,890 --> 00:20:28,070
here but if if you look here are 2.1

00:20:25,070 --> 00:20:29,899
release that we executed and then you

00:20:28,070 --> 00:20:32,779
see Atlas is the name of one of our

00:20:29,899 --> 00:20:34,669
repos and that mutated between 211 and

00:20:32,779 --> 00:20:36,919
212 and then it mutated again between

00:20:34,669 --> 00:20:41,750
two and three and two and four and

00:20:36,919 --> 00:20:44,000
there's a devel that mutation is taking

00:20:41,750 --> 00:20:45,770
place but all of the other repos that

00:20:44,000 --> 00:20:47,630
aren't mutating have been frozen to

00:20:45,770 --> 00:20:49,610
their most recent tagged and so that

00:20:47,630 --> 00:20:51,649
allows the devel branches on those repos

00:20:49,610 --> 00:20:53,929
to march forward and we can to continue

00:20:51,649 --> 00:20:57,710
to build a develop ondal on even of a

00:20:53,929 --> 00:20:59,450
past release so i'll just quickly pop

00:20:57,710 --> 00:21:02,720
back i think i'm about to get kicked off

00:20:59,450 --> 00:21:09,049
here but we can see here this is the

00:21:02,720 --> 00:21:12,230
demo that's completed so we had a big

00:21:09,049 --> 00:21:14,210
catkin tools unification the whole thing

00:21:12,230 --> 00:21:18,080
built in 10 minutes obviously that's

00:21:14,210 --> 00:21:20,149
partly because of c cash but we can now

00:21:18,080 --> 00:21:22,970
i'm not going to bother inserting the

00:21:20,149 --> 00:21:25,640
package into an actual apt repo but

00:21:22,970 --> 00:21:29,270
there it is the whole desktop full sdk

00:21:25,640 --> 00:21:30,470
in 43 megabytes so once we did that we

00:21:29,270 --> 00:21:32,090
were kind of like oh it's a slam dunk

00:21:30,470 --> 00:21:33,529
we'll just build this every day and

00:21:32,090 --> 00:21:39,529
distribute it why would we bother trying

00:21:33,529 --> 00:21:43,130
to do delta anything so there you go and

00:21:39,529 --> 00:21:44,720
that repo their builds on Travis so you

00:21:43,130 --> 00:21:46,580
can examine the output without even

00:21:44,720 --> 00:21:49,250
downloading it if you like or you can

00:21:46,580 --> 00:21:51,919
download it and run it locally quickly

00:21:49,250 --> 00:21:53,230
in the future catkin tools is amazing

00:21:51,919 --> 00:21:55,130
I'd love to see it do more things

00:21:53,230 --> 00:21:57,860
specifically I would love to see it

00:21:55,130 --> 00:22:00,289
build docs it would be really nice to be

00:21:57,860 --> 00:22:01,880
able to have a Ross install generator

00:22:00,289 --> 00:22:03,320
workspace and then just build docs for

00:22:01,880 --> 00:22:04,909
everything in the same kind of parallel

00:22:03,320 --> 00:22:06,049
manner there's an existing ticket for

00:22:04,909 --> 00:22:07,970
that that a bunch of people have thumb

00:22:06,049 --> 00:22:10,610
upped I'd also like to see a better

00:22:07,970 --> 00:22:12,320
story for running tests under catkin one

00:22:10,610 --> 00:22:15,059
of the things that we do is run tests

00:22:12,320 --> 00:22:16,559
against the devel bundle so that

00:22:15,059 --> 00:22:19,049
means that it kind of breaks that

00:22:16,559 --> 00:22:21,090
dependency problem where we can say you

00:22:19,049 --> 00:22:23,370
know we install the devel SDK and then

00:22:21,090 --> 00:22:25,820
we have a kind of an up-to-date underlay

00:22:23,370 --> 00:22:29,519
that we're running our tests against and

00:22:25,820 --> 00:22:31,499
then once again are kind of like medium

00:22:29,519 --> 00:22:34,049
to short term plan is to drop bloom all

00:22:31,499 --> 00:22:36,570
together so we'd run exclusively from

00:22:34,049 --> 00:22:38,190
source branches I'm still kind of

00:22:36,570 --> 00:22:40,169
sorting out exactly how we deal with

00:22:38,190 --> 00:22:42,570
that obviously bloom is an incredible

00:22:40,169 --> 00:22:44,159
tool that allows OS RF and Ross to

00:22:42,570 --> 00:22:46,919
support many different operating systems

00:22:44,159 --> 00:22:49,950
we don't care we support one operating

00:22:46,919 --> 00:22:53,820
system and so that's part of why we can

00:22:49,950 --> 00:22:56,789
do this so we might need like an extra

00:22:53,820 --> 00:22:58,350
release version attribute in the

00:22:56,789 --> 00:22:59,909
distribution yeah mole or something I'll

00:22:58,350 --> 00:23:02,129
probably have a fight with Dirk about

00:22:59,909 --> 00:23:03,990
that later and then the last kind of

00:23:02,129 --> 00:23:05,490
piece is in the fullness of time we

00:23:03,990 --> 00:23:08,789
probably will investigate migrating to

00:23:05,490 --> 00:23:11,369
snaps for this snaps do a lot of things

00:23:08,789 --> 00:23:13,289
that are very compelling packaging it as

00:23:11,369 --> 00:23:16,049
a squash FS prohibits people from going

00:23:13,289 --> 00:23:18,179
in and diddling with it the Delta

00:23:16,049 --> 00:23:20,279
updates are fantastic multiple release

00:23:18,179 --> 00:23:22,080
dreams gets us out of that like devel

00:23:20,279 --> 00:23:25,440
pre-release release because it's handled

00:23:22,080 --> 00:23:29,220
natively but this is currently blocked

00:23:25,440 --> 00:23:33,419
on on the the store entity from

00:23:29,220 --> 00:23:36,029
canonical being not yet open sourced so

00:23:33,419 --> 00:23:38,039
there we are thank you to William and

00:23:36,029 --> 00:23:40,619
Dirk who maintain all of this stuff and

00:23:38,039 --> 00:23:43,580
tolerated my crazy pull requests and

00:23:40,619 --> 00:23:46,769
John who worked on and tools

00:23:43,580 --> 00:23:49,409
Nicholas who worked on Ross install OS

00:23:46,769 --> 00:23:51,119
10 and Mike Ferguson for buildbot Ross

00:23:49,409 --> 00:23:52,889
which we used for a long time and was

00:23:51,119 --> 00:23:55,619
great and taught me all about Debbie and

00:23:52,889 --> 00:23:59,720
packaging and clear path for being

00:23:55,619 --> 00:23:59,720
awesome as you heard we are hiring

00:24:11,810 --> 00:24:17,090
sure yeah so come and find me if you're

00:24:14,190 --> 00:24:17,090

YouTube URL: https://www.youtube.com/watch?v=sfXkeIYPk3g


