Title: ROSCon 2016 Seoul Day 1   Plan to Win with MoveIt   Lessons learnt from the Amazon Picking Challenge
Publication date: 2016-10-20
Playlist: ROSCon 2016
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2016 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,149 --> 00:00:05,790
thank you for the introduction well I

00:00:03,750 --> 00:00:09,389
just see some more people coming in so

00:00:05,790 --> 00:00:12,690
all right so good morning once again to

00:00:09,389 --> 00:00:15,839
everyone welcome to this talk on winning

00:00:12,690 --> 00:00:19,320
with move it I'll get started by

00:00:15,839 --> 00:00:23,760
introducing myself a little bit so yeah

00:00:19,320 --> 00:00:26,160
I was a part of the team Delft which won

00:00:23,760 --> 00:00:27,750
the Amazon picking challenge this year

00:00:26,160 --> 00:00:31,260
both the picking and the stowing

00:00:27,750 --> 00:00:38,210
challenges and you see a red circle

00:00:31,260 --> 00:00:42,420
around me that's me on the photo so yeah

00:00:38,210 --> 00:00:44,399
I think for people who are aware so most

00:00:42,420 --> 00:00:46,500
of you are probably aware of the Amazon

00:00:44,399 --> 00:00:48,980
picking challenge anyone here who does

00:00:46,500 --> 00:00:52,680
not know what I've not heard about it

00:00:48,980 --> 00:00:56,329
okay so Amazon picking challenges yeah

00:00:52,680 --> 00:01:00,090
it's a Robotics Challenge where Amazon

00:00:56,329 --> 00:01:03,210
decided to ask people who play with

00:01:00,090 --> 00:01:05,460
robots to make robotic technology that

00:01:03,210 --> 00:01:07,710
can pick items from shelves and also

00:01:05,460 --> 00:01:11,369
stove items from a bin into the shelf

00:01:07,710 --> 00:01:14,189
and that was started last year actually

00:01:11,369 --> 00:01:15,869
and it has continued this year and it

00:01:14,189 --> 00:01:20,070
will continue also in the future years

00:01:15,869 --> 00:01:22,590
according to Amazon and I think most of

00:01:20,070 --> 00:01:25,229
you are also familiar a little bit with

00:01:22,590 --> 00:01:29,759
move it anybody who does not know about

00:01:25,229 --> 00:01:33,930
move it here well so that's good so most

00:01:29,759 --> 00:01:37,950
of you know what move it is so this will

00:01:33,930 --> 00:01:40,729
be what I'll talk about today mostly

00:01:37,950 --> 00:01:44,189
about how we got started and then

00:01:40,729 --> 00:01:47,640
specifically a little more details into

00:01:44,189 --> 00:01:49,759
the motion module that we that we design

00:01:47,640 --> 00:01:52,979
for the Amazon picking challenge

00:01:49,759 --> 00:01:55,380
following followed with some of the

00:01:52,979 --> 00:01:58,579
lessons learned I have only five here

00:01:55,380 --> 00:02:01,049
but we learnt a lot more than five and

00:01:58,579 --> 00:02:06,000
then some general lessons and then some

00:02:01,049 --> 00:02:09,060
concluding remarks so well that's how we

00:02:06,000 --> 00:02:13,410
got started so we received then quite

00:02:09,060 --> 00:02:16,590
literally actually so it was

00:02:13,410 --> 00:02:18,780
Christmas vacation last year when heist

00:02:16,590 --> 00:02:22,050
who is sitting right here sent an email

00:02:18,780 --> 00:02:27,450
around asking like this without much

00:02:22,050 --> 00:02:32,130
text in it and then frankly no one

00:02:27,450 --> 00:02:35,400
responded except that the very next day

00:02:32,130 --> 00:02:36,870
our professor Martin Weiser who is below

00:02:35,400 --> 00:02:40,260
lies in the photos the second photo

00:02:36,870 --> 00:02:44,430
there he literally walked to most of the

00:02:40,260 --> 00:02:48,450
team members that were actually eventual

00:02:44,430 --> 00:02:51,480
members of the team Delft he went to

00:02:48,450 --> 00:02:53,400
everyone and enthusiastically said we

00:02:51,480 --> 00:02:55,470
are participating in this and we are

00:02:53,400 --> 00:02:58,020
winning both of them he was so

00:02:55,470 --> 00:03:00,270
enthusiastic about it and then he also

00:02:58,020 --> 00:03:02,610
ensured that we are also enthusiastic

00:03:00,270 --> 00:03:04,350
about it and then that's all we go we

00:03:02,610 --> 00:03:06,120
got started and yeah the rest is history

00:03:04,350 --> 00:03:08,780
and a part of that history will be also

00:03:06,120 --> 00:03:12,270
what the presentation will be about so

00:03:08,780 --> 00:03:14,760
why move it well so first of all move it

00:03:12,270 --> 00:03:18,210
has been known to be a little notorious

00:03:14,760 --> 00:03:20,990
amongst the the software community that

00:03:18,210 --> 00:03:25,500
uses our motion planning software

00:03:20,990 --> 00:03:28,890
community for various reasons but I

00:03:25,500 --> 00:03:31,050
think it's not really as bad as it

00:03:28,890 --> 00:03:32,840
sounds of course there is a lot of room

00:03:31,050 --> 00:03:37,370
for improvement

00:03:32,840 --> 00:03:40,800
so why we use move it well first of all

00:03:37,370 --> 00:03:44,130
move it was also told or from the

00:03:40,800 --> 00:03:46,650
previous experience the themes that part

00:03:44,130 --> 00:03:49,470
the did use move it last year they said

00:03:46,650 --> 00:03:51,270
yeah we did not use move or those who

00:03:49,470 --> 00:03:53,910
did use move it did not even end up in

00:03:51,270 --> 00:03:56,130
the top three last year so that was a

00:03:53,910 --> 00:03:58,410
big risk for us to take to actually

00:03:56,130 --> 00:04:00,300
still go ahead with move it but we

00:03:58,410 --> 00:04:01,650
decided to Bank on the experience that

00:04:00,300 --> 00:04:04,080
we had with some of the pick-and-place

00:04:01,650 --> 00:04:09,480
applications that we already worked on

00:04:04,080 --> 00:04:11,970
using move it and also specifically just

00:04:09,480 --> 00:04:15,210
around the time when we got started with

00:04:11,970 --> 00:04:17,860
challenge we were also quite ahead in an

00:04:15,210 --> 00:04:21,220
industrial box packing task

00:04:17,860 --> 00:04:24,640
which was also using movement and of

00:04:21,220 --> 00:04:29,860
course a little bit of curiosity as to

00:04:24,640 --> 00:04:33,010
yeah what can really be right wrong what

00:04:29,860 --> 00:04:35,290
could go wrong especially when we scale

00:04:33,010 --> 00:04:37,420
this up to an application as large as

00:04:35,290 --> 00:04:39,340
the picking challenge by the way the

00:04:37,420 --> 00:04:41,440
numbers that you see next to those

00:04:39,340 --> 00:04:43,540
points are basically references that are

00:04:41,440 --> 00:04:47,680
at the end of the slide at the end of

00:04:43,540 --> 00:04:52,330
the presentation so so yeah now how we

00:04:47,680 --> 00:04:55,180
got started well and then we started off

00:04:52,330 --> 00:04:58,710
even before making a choice of the robot

00:04:55,180 --> 00:05:02,290
we used some of the existing tools

00:04:58,710 --> 00:05:04,690
provided by move it actually called

00:05:02,290 --> 00:05:07,420
workspace analysis tools and the guy you

00:05:04,690 --> 00:05:12,220
see on the photo here is his name is

00:05:07,420 --> 00:05:14,790
Jethro he started off doing some tests

00:05:12,220 --> 00:05:17,020
some basic configuration tests as to

00:05:14,790 --> 00:05:19,300
yeah what are the possible

00:05:17,020 --> 00:05:21,430
configurations that we can use for the

00:05:19,300 --> 00:05:25,050
robot and workspace analysis basically

00:05:21,430 --> 00:05:29,500
tells you what are the possible

00:05:25,050 --> 00:05:31,450
reachable points in the workspace but

00:05:29,500 --> 00:05:33,340
beware it does not tell you how you get

00:05:31,450 --> 00:05:35,020
there so it gives you a solution a

00:05:33,340 --> 00:05:36,940
possible solution and the likelihood of

00:05:35,020 --> 00:05:39,040
how many solutions that you can get

00:05:36,940 --> 00:05:40,570
there but it really does not say what

00:05:39,040 --> 00:05:43,690
will happen if you try to move in

00:05:40,570 --> 00:05:46,080
between those reachable points so but it

00:05:43,690 --> 00:05:49,360
is a very useful tool and using this we

00:05:46,080 --> 00:05:52,060
ended up having this robot configuration

00:05:49,360 --> 00:05:55,300
as you can see the prototype that we

00:05:52,060 --> 00:05:57,730
used is not extremely detailed but it

00:05:55,300 --> 00:06:00,640
actually suffices and it actually does

00:05:57,730 --> 00:06:02,440
the job so we ended up having this

00:06:00,640 --> 00:06:05,200
configuration where we had a rail which

00:06:02,440 --> 00:06:06,850
was moving in a linear axis moving in

00:06:05,200 --> 00:06:10,240
and out towards the direction of the

00:06:06,850 --> 00:06:12,520
Shelf and a motorman robot which was

00:06:10,240 --> 00:06:16,690
mounted on top of it so in principle we

00:06:12,520 --> 00:06:19,780
had eight degrees of freedom so before I

00:06:16,690 --> 00:06:23,890
get into more mu bit specific details I

00:06:19,780 --> 00:06:27,780
think I this is a little bit of a small

00:06:23,890 --> 00:06:29,699
detour where here we have

00:06:27,780 --> 00:06:32,099
the basic software architecture of our

00:06:29,699 --> 00:06:35,129
system a very coarse representation by

00:06:32,099 --> 00:06:38,250
the way and the yeah the blocks that are

00:06:35,129 --> 00:06:42,949
highlighted in in in dark are basically

00:06:38,250 --> 00:06:46,289
the places where we did use move it and

00:06:42,949 --> 00:06:48,300
so it started off and also in that

00:06:46,289 --> 00:06:50,819
sequence so we started off with

00:06:48,300 --> 00:06:52,440
manipulation planning and then the

00:06:50,819 --> 00:06:57,690
cosine motions which I will get into a

00:06:52,440 --> 00:07:02,099
little bit more in detail so where we

00:06:57,690 --> 00:07:06,060
are right now so we started off with the

00:07:02,099 --> 00:07:09,900
manipulation module where you see here

00:07:06,060 --> 00:07:12,780
so Wilson is the guy on the on the slide

00:07:09,900 --> 00:07:14,039
there he mainly worked on the grasp

00:07:12,780 --> 00:07:16,080
synthesizer

00:07:14,039 --> 00:07:19,289
although the grasp synthesizer module

00:07:16,080 --> 00:07:20,969
itself is a presentation in itself here

00:07:19,289 --> 00:07:21,360
I have tried to summarize as much as we

00:07:20,969 --> 00:07:24,810
can

00:07:21,360 --> 00:07:28,229
where the grasp synthesizer module came

00:07:24,810 --> 00:07:31,229
up with a bunch of grass poses and then

00:07:28,229 --> 00:07:33,380
also some scoring involved in there

00:07:31,229 --> 00:07:35,639
based on cost functions which used

00:07:33,380 --> 00:07:39,000
aspects like perpendicular distance to

00:07:35,639 --> 00:07:42,270
see om and other aspects and we also

00:07:39,000 --> 00:07:44,300
defined some grasp strategies so we had

00:07:42,270 --> 00:07:47,909
top suction front suction and pinch

00:07:44,300 --> 00:07:52,349
grasp and our group our gripper was

00:07:47,909 --> 00:07:55,710
suction by stripper and yeah so finally

00:07:52,349 --> 00:07:58,680
we're move it actually started you know

00:07:55,710 --> 00:08:02,129
making its presence felt was in the

00:07:58,680 --> 00:08:04,259
grasp of selection where the we first

00:08:02,129 --> 00:08:06,210
picked the highest scoring rush post

00:08:04,259 --> 00:08:10,889
based on the heuristics we called it the

00:08:06,210 --> 00:08:12,900
chosen one and subsequently we used move

00:08:10,889 --> 00:08:15,210
it's collision checking facilities using

00:08:12,900 --> 00:08:18,419
the gate position like a service to

00:08:15,210 --> 00:08:21,029
actually decide on which grass pose is a

00:08:18,419 --> 00:08:24,360
valid pose or collision-free pose and we

00:08:21,029 --> 00:08:27,000
also had some decomposition going on

00:08:24,360 --> 00:08:29,879
where we decided so to achieve a certain

00:08:27,000 --> 00:08:33,209
grass pose how do we have an approach so

00:08:29,879 --> 00:08:34,769
it was it was inspired by the standard

00:08:33,209 --> 00:08:37,560
pick-and-place pipeline that is already

00:08:34,769 --> 00:08:39,490
in place in move it but we just

00:08:37,560 --> 00:08:46,060
decomposed it into making it

00:08:39,490 --> 00:08:50,620
in our own custom manner so this once

00:08:46,060 --> 00:08:53,620
the grass pose that we intend to attain

00:08:50,620 --> 00:08:55,750
with the with robot has been decided we

00:08:53,620 --> 00:08:59,770
had to figure a way out to get there and

00:08:55,750 --> 00:09:02,620
for which the robot motion module was

00:08:59,770 --> 00:09:04,540
responsible for that that was that was

00:09:02,620 --> 00:09:08,110
mainly where I was responsible I was

00:09:04,540 --> 00:09:11,860
also the motion planning team lead so

00:09:08,110 --> 00:09:15,220
myself and Ruben worked on the robot

00:09:11,860 --> 00:09:19,240
motion design where we split the motion

00:09:15,220 --> 00:09:22,150
strategy into offline motion sort of

00:09:19,240 --> 00:09:24,130
primitive generation and online motion

00:09:22,150 --> 00:09:26,980
planning with only for the cartesian

00:09:24,130 --> 00:09:29,320
parts so offline motions so the coach

00:09:26,980 --> 00:09:32,160
motions as we call it were basically

00:09:29,320 --> 00:09:34,450
free joint space motions between

00:09:32,160 --> 00:09:36,340
predefined master poses so what we

00:09:34,450 --> 00:09:38,770
decided was the robot has some

00:09:36,340 --> 00:09:41,860
predefined poses in front of the bins

00:09:38,770 --> 00:09:45,040
and also some predefined poses on in on

00:09:41,860 --> 00:09:48,370
top of the tote and and some other

00:09:45,040 --> 00:09:52,360
locations for getting the best camera

00:09:48,370 --> 00:09:55,180
view for taking the best images from the

00:09:52,360 --> 00:09:58,480
from the shelf and also from the tote so

00:09:55,180 --> 00:10:01,570
based on this we use the simple arity

00:09:58,480 --> 00:10:04,000
Connect planner to plan motions or

00:10:01,570 --> 00:10:06,010
trajectories and we actually stored them

00:10:04,000 --> 00:10:07,270
we call them trajectory cache but in

00:10:06,010 --> 00:10:08,950
hindsight we should have called it a

00:10:07,270 --> 00:10:14,170
trajectory database because it was

00:10:08,950 --> 00:10:17,350
technically not a case and then what we

00:10:14,170 --> 00:10:21,630
also had was define motions where these

00:10:17,350 --> 00:10:24,370
were primarily linear motions which were

00:10:21,630 --> 00:10:26,410
you know for the approaching of the

00:10:24,370 --> 00:10:28,900
object and picking it up and retreating

00:10:26,410 --> 00:10:30,880
so this was so we also made an

00:10:28,900 --> 00:10:33,940
assumption here that we will approach

00:10:30,880 --> 00:10:36,490
and retreat mostly or always in a in a

00:10:33,940 --> 00:10:39,700
linear fashion which was quite a strong

00:10:36,490 --> 00:10:42,700
assumption and I think in hindsight

00:10:39,700 --> 00:10:46,000
probably better strategies can

00:10:42,700 --> 00:10:47,650
definitely be done but simple enough it

00:10:46,000 --> 00:10:50,740
worked really well for us

00:10:47,650 --> 00:10:53,170
and I think

00:10:50,740 --> 00:10:56,110
so the two points that are listed below

00:10:53,170 --> 00:10:59,850
are pointers to some of the api's that

00:10:56,110 --> 00:11:02,920
we used to implement these these modules

00:10:59,850 --> 00:11:05,500
also having this course motion

00:11:02,920 --> 00:11:08,080
generation offline was really helpful

00:11:05,500 --> 00:11:10,510
because we saved a lot of time we just

00:11:08,080 --> 00:11:12,070
had to look up a certain motion and this

00:11:10,510 --> 00:11:13,480
is sort of the benefit that you get if

00:11:12,070 --> 00:11:16,870
the environment is static and we

00:11:13,480 --> 00:11:19,660
exploited the benefits as much as we can

00:11:16,870 --> 00:11:24,940
followed by this this was an interesting

00:11:19,660 --> 00:11:29,140
problem for us so typically we have the

00:11:24,940 --> 00:11:32,080
IO part as well for activating the

00:11:29,140 --> 00:11:35,230
different parts of the gripper and also

00:11:32,080 --> 00:11:39,550
the suction and yeah also the pinch

00:11:35,230 --> 00:11:44,140
grasp however a standard way of

00:11:39,550 --> 00:11:47,080
implementing is an event-based IO and

00:11:44,140 --> 00:11:49,540
then we had the decomposition in two

00:11:47,080 --> 00:11:53,230
different key way points along the

00:11:49,540 --> 00:11:55,060
trajectory however we also needed a

00:11:53,230 --> 00:11:57,160
reliable projectory tracking to trigger

00:11:55,060 --> 00:12:04,150
the IO because we did not follow the

00:11:57,160 --> 00:12:05,800
standard way of implementing the IO we

00:12:04,150 --> 00:12:08,110
had to go through some extra

00:12:05,800 --> 00:12:09,940
implementations by implementing some

00:12:08,110 --> 00:12:12,459
additional async spinners because at

00:12:09,940 --> 00:12:14,680
that time multiple async spinners were

00:12:12,459 --> 00:12:19,240
not supported however it has been fixed

00:12:14,680 --> 00:12:22,180
in Ross kinetic which is also reference

00:12:19,240 --> 00:12:25,060
there so some of the lessons learnt now

00:12:22,180 --> 00:12:26,560
so this is probably one of the defining

00:12:25,060 --> 00:12:28,900
moments for us

00:12:26,560 --> 00:12:31,029
this happened at Robo business

00:12:28,900 --> 00:12:33,700
conference in odenza we just decided to

00:12:31,029 --> 00:12:35,560
have a try out in Robo business by

00:12:33,700 --> 00:12:38,110
setting this whole system up there and

00:12:35,560 --> 00:12:39,670
as you can see there we used octo maps

00:12:38,110 --> 00:12:42,040
for collision checking and due to

00:12:39,670 --> 00:12:45,010
reflections on the on the pin on the

00:12:42,040 --> 00:12:49,540
steel rails of the pin we had a hole in

00:12:45,010 --> 00:12:52,510
the optimum and for some reason well the

00:12:49,540 --> 00:12:54,040
reason was that the step that was chosen

00:12:52,510 --> 00:12:56,230
for the

00:12:54,040 --> 00:12:58,690
the collision checking was just too big

00:12:56,230 --> 00:13:00,040
and then the robot just simply ran

00:12:58,690 --> 00:13:03,490
through the shelf and lifted the whole

00:13:00,040 --> 00:13:06,280
shelf and also broke the gripper it was

00:13:03,490 --> 00:13:08,620
quite a disastrous moment because we had

00:13:06,280 --> 00:13:10,990
also a local challenge between another

00:13:08,620 --> 00:13:12,820
Dutch team as well

00:13:10,990 --> 00:13:15,700
participating there and this happened

00:13:12,820 --> 00:13:18,730
right before the challenge so yeah but

00:13:15,700 --> 00:13:22,240
but this was a sort of a pre challenge

00:13:18,730 --> 00:13:24,040
not the real APC itself so one of the

00:13:22,240 --> 00:13:26,290
lessons learnt is okay so collision

00:13:24,040 --> 00:13:28,750
checking with octo maps works but also

00:13:26,290 --> 00:13:30,940
have some redundancy there so for which

00:13:28,750 --> 00:13:34,870
we decided to add some Bend collision

00:13:30,940 --> 00:13:37,060
models because having an entire pose

00:13:34,870 --> 00:13:40,180
estimation for the shelf was not really

00:13:37,060 --> 00:13:41,530
a good idea because there is quite some

00:13:40,180 --> 00:13:43,660
accuracy issues that you might run into

00:13:41,530 --> 00:13:47,830
when you are dealing with a shelf of

00:13:43,660 --> 00:13:52,380
size about two meters however we also

00:13:47,830 --> 00:13:55,120
found out however we also found out that

00:13:52,380 --> 00:14:01,720
sometimes collision checking with the

00:13:55,120 --> 00:14:03,340
meshes can produce a random failure well

00:14:01,720 --> 00:14:06,130
thankfully we did not have those

00:14:03,340 --> 00:14:09,610
failures during the challenge we have

00:14:06,130 --> 00:14:11,680
been trying to dig into what really is

00:14:09,610 --> 00:14:14,290
the cause of the failure not yet

00:14:11,680 --> 00:14:16,900
completely successful with that but also

00:14:14,290 --> 00:14:19,750
we added some extra sanity checks so for

00:14:16,900 --> 00:14:22,180
instance if you are if you are trying to

00:14:19,750 --> 00:14:24,820
achieve an impossible motion your start

00:14:22,180 --> 00:14:27,370
state does not match the real start

00:14:24,820 --> 00:14:30,430
state of the robot then you prevent such

00:14:27,370 --> 00:14:34,750
motions so I think the most important

00:14:30,430 --> 00:14:36,550
take a take away from this was as add as

00:14:34,750 --> 00:14:38,110
many redundancies as possible with the

00:14:36,550 --> 00:14:40,960
collision checking of course not too

00:14:38,110 --> 00:14:43,870
much because then you are too slow but

00:14:40,960 --> 00:14:47,020
at least have two or three levels of

00:14:43,870 --> 00:14:50,170
redundancies with collision checking we

00:14:47,020 --> 00:14:53,410
also had some strange behaviors for

00:14:50,170 --> 00:14:56,040
instance in the in the in the

00:14:53,410 --> 00:15:00,310
development times we also found out that

00:14:56,040 --> 00:15:03,480
the time that it was taking for doing

00:15:00,310 --> 00:15:06,310
collision checks while using Optimax was

00:15:03,480 --> 00:15:09,070
really really long

00:15:06,310 --> 00:15:12,130
per pic we were having something like a

00:15:09,070 --> 00:15:13,899
minute and 40 seconds social for one

00:15:12,130 --> 00:15:17,350
single pic and we were supposed to pick

00:15:13,899 --> 00:15:20,980
12 items so that was really not an

00:15:17,350 --> 00:15:22,829
option and digging a little deeper we

00:15:20,980 --> 00:15:25,540
found out that we used some of the api's

00:15:22,829 --> 00:15:27,790
where we were trying to read the current

00:15:25,540 --> 00:15:31,089
state of the robot while the optimum

00:15:27,790 --> 00:15:34,149
optimum map update was going on and it

00:15:31,089 --> 00:15:36,459
turned out so I have the the point there

00:15:34,149 --> 00:15:38,410
the cause written down there planning

00:15:36,459 --> 00:15:42,130
scene monitor prioritizes servicing of

00:15:38,410 --> 00:15:46,870
the map updates with a star also so we

00:15:42,130 --> 00:15:49,779
have so we digged into the service the

00:15:46,870 --> 00:15:54,430
optimum monitor code in the planning

00:15:49,779 --> 00:15:57,820
scene monitor and we we have a very

00:15:54,430 --> 00:16:01,209
strong suspicion that the optimum

00:15:57,820 --> 00:16:04,930
updates basically hogs all it actually

00:16:01,209 --> 00:16:08,170
acquires a mutex lock and once that is

00:16:04,930 --> 00:16:10,690
there it simply does not respond to the

00:16:08,170 --> 00:16:12,610
API requests from a level higher up and

00:16:10,690 --> 00:16:16,329
because of which we were running into

00:16:12,610 --> 00:16:20,290
tremendous delays and therefore we were

00:16:16,329 --> 00:16:24,130
quite worried however we managed to fix

00:16:20,290 --> 00:16:26,980
that by using a slightly different API

00:16:24,130 --> 00:16:30,520
choice which is actually also pointed

00:16:26,980 --> 00:16:33,370
out there so the robot state API is do

00:16:30,520 --> 00:16:36,430
not need direct access to the planning

00:16:33,370 --> 00:16:39,520
scene monitor and you can also use or

00:16:36,430 --> 00:16:41,230
change the state of the robot directly

00:16:39,520 --> 00:16:43,329
even if it does not match with the real

00:16:41,230 --> 00:16:47,350
state of the robot which was quite

00:16:43,329 --> 00:16:49,709
helpful for us in terms of in terms of

00:16:47,350 --> 00:16:52,899
the plan phase of the of the planning

00:16:49,709 --> 00:16:56,440
the next was also we ran into some

00:16:52,899 --> 00:16:59,230
issues with octo map clearance so there

00:16:56,440 --> 00:17:02,740
is a movie service provided called clear

00:16:59,230 --> 00:17:04,750
octo map but somehow the consistency of

00:17:02,740 --> 00:17:07,750
the performance of this service was not

00:17:04,750 --> 00:17:09,370
always okay so sometimes even on calling

00:17:07,750 --> 00:17:12,579
the clear optimum service it was simply

00:17:09,370 --> 00:17:15,400
not clearing it so what we decided was

00:17:12,579 --> 00:17:17,209
okay so we have to force a clearance so

00:17:15,400 --> 00:17:21,500
we decided to publish

00:17:17,209 --> 00:17:23,720
a static point cloud well static point

00:17:21,500 --> 00:17:26,600
cloud is because we did not we did not

00:17:23,720 --> 00:17:28,909
want to hog all the all the resources in

00:17:26,600 --> 00:17:31,039
terms of publishing a live point cloud

00:17:28,909 --> 00:17:33,080
stream so we just took one snapshot of

00:17:31,039 --> 00:17:35,240
the point cloud of the entire scene and

00:17:33,080 --> 00:17:38,720
then we just published it at our will

00:17:35,240 --> 00:17:41,120
and then given that we had this freedom

00:17:38,720 --> 00:17:44,600
we also could publish out of range of

00:17:41,120 --> 00:17:46,909
comic values and with that we could

00:17:44,600 --> 00:17:50,090
guarantee that the clear octa map

00:17:46,909 --> 00:17:52,970
service was always clearing when once we

00:17:50,090 --> 00:17:57,470
published the out of range values so

00:17:52,970 --> 00:17:59,539
sometimes it so with this out of range

00:17:57,470 --> 00:18:04,360
values being published on the optimum we

00:17:59,539 --> 00:18:06,620
always had 100% clearance performance

00:18:04,360 --> 00:18:10,100
subsequently we also had to do some

00:18:06,620 --> 00:18:13,100
trajectory stitching which was mainly

00:18:10,100 --> 00:18:15,260
required in order to stitch the coarse

00:18:13,100 --> 00:18:17,929
and fine motions together and also

00:18:15,260 --> 00:18:19,580
sometimes when we use Cartesian so for

00:18:17,929 --> 00:18:22,809
the fine motions we used cartesian path

00:18:19,580 --> 00:18:25,159
planning and if we if the like a

00:18:22,809 --> 00:18:27,289
solution for a certain cartesian

00:18:25,159 --> 00:18:30,200
position does not match the starting

00:18:27,289 --> 00:18:32,840
position of the the course motion

00:18:30,200 --> 00:18:34,820
trajectory then yeah then we run into

00:18:32,840 --> 00:18:36,799
driver problems where we have some

00:18:34,820 --> 00:18:39,740
complaints from the driver so because of

00:18:36,799 --> 00:18:43,760
which we also implemented some some

00:18:39,740 --> 00:18:45,890
trajectory stitching and which means we

00:18:43,760 --> 00:18:47,270
just threw away all the velocity

00:18:45,890 --> 00:18:48,799
information stitched all the

00:18:47,270 --> 00:18:52,429
trajectories together re parameterize it

00:18:48,799 --> 00:18:55,039
and then run ran the whole trajectory

00:18:52,429 --> 00:18:58,580
and stitch trajectory and this is also

00:18:55,039 --> 00:19:00,770
an interesting topic which probably

00:18:58,580 --> 00:19:03,200
needs further

00:19:00,770 --> 00:19:06,470
yeah further development whether how we

00:19:03,200 --> 00:19:09,590
deal with IO in move it so currently we

00:19:06,470 --> 00:19:12,200
have some some indirect approaches but

00:19:09,590 --> 00:19:14,720
probably using a better direct IO

00:19:12,200 --> 00:19:17,630
interface is something which we should

00:19:14,720 --> 00:19:22,700
investigate with more bit and some other

00:19:17,630 --> 00:19:24,679
general lessons are yeah so when we are

00:19:22,700 --> 00:19:26,360
designing the behaviors it is always

00:19:24,679 --> 00:19:28,250
important to have a very clear

00:19:26,360 --> 00:19:29,480
distinction between the different

00:19:28,250 --> 00:19:33,169
modules

00:19:29,480 --> 00:19:38,779
and provide as many fake components as

00:19:33,169 --> 00:19:41,269
possible and then some assumptions so be

00:19:38,779 --> 00:19:43,070
sure of your assumptions some of the

00:19:41,269 --> 00:19:47,000
Assumption based quotes are mentioned

00:19:43,070 --> 00:19:49,070
there which do not literally were set

00:19:47,000 --> 00:19:53,630
that way but have been modified for this

00:19:49,070 --> 00:19:56,149
audience and then this is one of the

00:19:53,630 --> 00:19:58,429
conclusions we have so how move it is

00:19:56,149 --> 00:20:01,250
designed to be used is a plug-in based

00:19:58,429 --> 00:20:05,450
tool and how we used it is basically

00:20:01,250 --> 00:20:06,950
made it in multiple ways I do have some

00:20:05,450 --> 00:20:09,860
couple more slides but I think I'm out

00:20:06,950 --> 00:20:12,710
of time so thank you for your attention

00:20:09,860 --> 00:20:14,000
there are some more interesting videos I

00:20:12,710 --> 00:20:16,899
can show you if you are interested

00:20:14,000 --> 00:20:16,899

YouTube URL: https://www.youtube.com/watch?v=AeRGP-_wlUs


