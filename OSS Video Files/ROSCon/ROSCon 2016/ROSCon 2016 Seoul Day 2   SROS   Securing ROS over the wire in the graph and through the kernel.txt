Title: ROSCon 2016 Seoul Day 2   SROS   Securing ROS over the wire in the graph and through the kernel
Publication date: 2016-10-20
Playlist: ROSCon 2016
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2016 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,000 --> 00:00:05,160
hello everyone my name is Ruffin and

00:00:03,230 --> 00:00:08,040
today I'm going to be talking about s

00:00:05,160 --> 00:00:09,960
Ross securing Ross over the wire in the

00:00:08,040 --> 00:00:11,160
graph and through the kernel and this

00:00:09,960 --> 00:00:14,519
will be about some of the work idea that

00:00:11,160 --> 00:00:16,949
OS RF with Morgan quickly and as an

00:00:14,519 --> 00:00:20,039
aside if you're a fan of sci-fi fiction

00:00:16,949 --> 00:00:21,570
and philosophy or cyber security and

00:00:20,039 --> 00:00:26,220
robotics you might get some of the

00:00:21,570 --> 00:00:30,179
references at dropping my slide alright

00:00:26,220 --> 00:00:32,369
so what is s Ross as for Austin addition

00:00:30,179 --> 00:00:34,260
to the Ross API an ecosystem to support

00:00:32,369 --> 00:00:36,630
modern cryptographic and security

00:00:34,260 --> 00:00:39,960
measures and so we going over three main

00:00:36,630 --> 00:00:42,480
sections today encryption access control

00:00:39,960 --> 00:00:44,399
and process profiles and so what you see

00:00:42,480 --> 00:00:46,730
here is a general overview of some of

00:00:44,399 --> 00:00:49,530
the topics we'll be delving onto deeper

00:00:46,730 --> 00:00:52,219
and so now I'd like to move on to some

00:00:49,530 --> 00:00:58,050
of the motivation for some of this work

00:00:52,219 --> 00:00:59,760
why is ross and so one thing is like

00:00:58,050 --> 00:01:01,469
robots provide a vector for cyber

00:00:59,760 --> 00:01:02,789
threats to manifest in the real world

00:01:01,469 --> 00:01:05,729
risks and I don't mean just like

00:01:02,789 --> 00:01:08,670
physical risks of industrial arms being

00:01:05,729 --> 00:01:10,560
hijacked or autonomous semis being taken

00:01:08,670 --> 00:01:14,070
over in highways it could be also

00:01:10,560 --> 00:01:16,350
privacy concerns so with robots becoming

00:01:14,070 --> 00:01:19,140
more ubiquitous in the home or

00:01:16,350 --> 00:01:23,430
commercial sector privacy and data can

00:01:19,140 --> 00:01:25,799
be a concern as well and so specifically

00:01:23,430 --> 00:01:27,119
on a Ross related note there's some

00:01:25,799 --> 00:01:29,820
vulnerabilities of Ross you should be

00:01:27,119 --> 00:01:31,860
aware of so Ross's transport is all in

00:01:29,820 --> 00:01:33,869
clear text and so thats you know really

00:01:31,860 --> 00:01:35,490
susceptible the packet sniffing and man

00:01:33,869 --> 00:01:37,890
the middle attacks and so you lose

00:01:35,490 --> 00:01:41,579
confidentially and confidentiality and

00:01:37,890 --> 00:01:44,070
integrity of your messages also Ross's

00:01:41,579 --> 00:01:46,049
computational graph is anonymous so

00:01:44,070 --> 00:01:48,360
notes coming into the graph you know

00:01:46,049 --> 00:01:52,320
don't have names and so it's easy enough

00:01:48,360 --> 00:01:54,420
to spoof another node or go rogue and so

00:01:52,320 --> 00:01:57,119
you know you can start publishing and

00:01:54,420 --> 00:02:00,740
subscribing or calling service calls you

00:01:57,119 --> 00:02:03,090
necessarily shouldn't also run time

00:02:00,740 --> 00:02:05,670
processes so if you're writing Ross

00:02:03,090 --> 00:02:08,580
nodes they might have zero that I

00:02:05,670 --> 00:02:11,849
exploits hidden inside them for possible

00:02:08,580 --> 00:02:12,970
code injection and so how can you how

00:02:11,849 --> 00:02:16,620
can you guard against

00:02:12,970 --> 00:02:20,260
those pop possible attack vectors and

00:02:16,620 --> 00:02:22,810
without some of the issue on a side I'd

00:02:20,260 --> 00:02:25,000
like to address well why wouldn't you

00:02:22,810 --> 00:02:26,380
just use VPNs or software-defined

00:02:25,000 --> 00:02:29,110
networks to address some of the tasks

00:02:26,380 --> 00:02:31,270
issues I've mentioned before well they

00:02:29,110 --> 00:02:33,550
certainly have their pros if you're

00:02:31,270 --> 00:02:35,650
tunneling over distant networks and you

00:02:33,550 --> 00:02:39,010
might know that Ross allocates ports

00:02:35,650 --> 00:02:40,990
during run time so if you want to build

00:02:39,010 --> 00:02:46,709
an ephemeral port firewall it's like

00:02:40,990 --> 00:02:49,750
playing whack-a-mole if you also VPNs

00:02:46,709 --> 00:02:51,820
you know they have professional routers

00:02:49,750 --> 00:02:55,360
and switches and so if you'd like to

00:02:51,820 --> 00:02:58,690
offload the cryptographic overhead to

00:02:55,360 --> 00:03:02,770
another hardware system so your robot

00:02:58,690 --> 00:03:05,560
CPU isn't burdensome with the ciphering

00:03:02,770 --> 00:03:08,590
in all the network traffic that can be

00:03:05,560 --> 00:03:09,790
an advantage also existing

00:03:08,590 --> 00:03:13,900
infrastructure so if you're doing

00:03:09,790 --> 00:03:18,010
anything with cloud robotics or AWS or a

00:03:13,900 --> 00:03:19,570
0 syl lake they all have you know VPNs

00:03:18,010 --> 00:03:22,300
and software-defined Network interface

00:03:19,570 --> 00:03:23,620
things so it's a mature technology it's

00:03:22,300 --> 00:03:26,730
well documented and pretty well

00:03:23,620 --> 00:03:29,290
understood but there are some cons so

00:03:26,730 --> 00:03:31,180
session hijacking or someone gets a

00:03:29,290 --> 00:03:34,030
physical local access to your network

00:03:31,180 --> 00:03:38,140
the Ross product protocol is still

00:03:34,030 --> 00:03:40,239
exposed stat complexities so you might

00:03:38,140 --> 00:03:42,880
not only be dealing with Ross now so you

00:03:40,239 --> 00:03:44,410
now have know how to use openvpn you

00:03:42,880 --> 00:03:45,790
have to keep it up-to-date you have to

00:03:44,410 --> 00:03:47,769
configure it so you're not accidentally

00:03:45,790 --> 00:03:50,049
shooting yourself in the foot that can

00:03:47,769 --> 00:03:51,370
be an issue I'll also find grain control

00:03:50,049 --> 00:03:53,019
so if you want to do anything fancy with

00:03:51,370 --> 00:03:56,500
the Ross graph network you want to have

00:03:53,019 --> 00:03:58,630
a voice system of certain overlaps and

00:03:56,500 --> 00:04:02,080
exclusions within your Ross computation

00:03:58,630 --> 00:04:06,700
graph that can be kind of hard to manage

00:04:02,080 --> 00:04:08,590
yourself with subdomains alright so we

00:04:06,700 --> 00:04:10,690
talked about some of the issues let's

00:04:08,590 --> 00:04:14,220
talk about some of the solutions that

00:04:10,690 --> 00:04:14,220
we're providing with s Ross

00:04:14,670 --> 00:04:19,870
encryption so this is addressing some

00:04:17,170 --> 00:04:22,900
the over wire transfer issues we're

00:04:19,870 --> 00:04:25,090
adding public key infrastructure and

00:04:22,900 --> 00:04:26,920
transport layer security and so what

00:04:25,090 --> 00:04:30,330
that forward to you is you know you can

00:04:26,920 --> 00:04:34,210
start using x.509 certificates to

00:04:30,330 --> 00:04:36,550
utilize a symmetric keys you can also

00:04:34,210 --> 00:04:37,960
use the certificates for signing you can

00:04:36,550 --> 00:04:40,600
have certificate or ities and the chain

00:04:37,960 --> 00:04:42,190
of trust and so when robots go out of

00:04:40,600 --> 00:04:44,140
you know your system and they start

00:04:42,190 --> 00:04:47,530
talking to each other in the wild they

00:04:44,140 --> 00:04:49,240
have a means to identify the lid a and

00:04:47,530 --> 00:04:50,380
see if each other's you know expired or

00:04:49,240 --> 00:04:51,550
revoked and there's a lot of cool

00:04:50,380 --> 00:04:55,180
security things you can do with

00:04:51,550 --> 00:04:57,970
certificates with the transport layer

00:04:55,180 --> 00:05:00,370
security not only is your traffic

00:04:57,970 --> 00:05:03,340
encrypted so you have the privacy and

00:05:00,370 --> 00:05:05,169
integrity but also forward security so

00:05:03,340 --> 00:05:07,090
if anyone's been like logging your

00:05:05,169 --> 00:05:10,390
network traffic and then later recovers

00:05:07,090 --> 00:05:11,890
the private keys on your robot they

00:05:10,390 --> 00:05:15,280
can't necessarily on-site for all the

00:05:11,890 --> 00:05:17,710
traffic they've recorded and so that's

00:05:15,280 --> 00:05:20,830
what done by like wrapping on a socket

00:05:17,710 --> 00:05:23,800
level all the xml-rpc and tcp level

00:05:20,830 --> 00:05:26,400
communication that Ross uses another

00:05:23,800 --> 00:05:30,490
thing is I'm of a strong opinion that

00:05:26,400 --> 00:05:33,310
security without usability is not very

00:05:30,490 --> 00:05:35,500
secure so if users don't have the tools

00:05:33,310 --> 00:05:38,950
and infrastructures to readily use

00:05:35,500 --> 00:05:40,540
security measures than they won't and so

00:05:38,950 --> 00:05:42,970
one of the things I tried to develop is

00:05:40,540 --> 00:05:45,490
a key server and key stores that's a

00:05:42,970 --> 00:05:47,950
simple API and interface for you to

00:05:45,490 --> 00:05:50,140
auto-generate certificates if you're at

00:05:47,950 --> 00:05:52,120
all familiar with using openssl or any

00:05:50,140 --> 00:05:54,160
kind of IT infrastructure to generate

00:05:52,120 --> 00:05:56,919
certificates yourself you'll know it's a

00:05:54,160 --> 00:05:58,690
very tedious and laborious process and

00:05:56,919 --> 00:06:01,300
again just like openvpn that's easy to

00:05:58,690 --> 00:06:03,280
shoot yourself in the foot so what I'm

00:06:01,300 --> 00:06:05,650
trying to done is provide same

00:06:03,280 --> 00:06:08,140
configuration defaults what you see up

00:06:05,650 --> 00:06:09,970
above here is like stuff like Wireshark

00:06:08,140 --> 00:06:12,910
and respecting the network communication

00:06:09,970 --> 00:06:14,560
handshake between two nodes using Ubuntu

00:06:12,910 --> 00:06:16,930
to Valley look at examine the

00:06:14,560 --> 00:06:18,490
certificates that are on your in your

00:06:16,930 --> 00:06:20,110
key store and then like the

00:06:18,490 --> 00:06:22,810
configuration file that you can kind of

00:06:20,110 --> 00:06:24,449
give to the key server to customize your

00:06:22,810 --> 00:06:29,759
certificates and other

00:06:24,449 --> 00:06:31,620
generation alright access control so

00:06:29,759 --> 00:06:35,219
let's say a note gets on your network

00:06:31,620 --> 00:06:36,809
how do you quarantine or limit the scope

00:06:35,219 --> 00:06:40,169
of what they can what kind of damage

00:06:36,809 --> 00:06:41,580
they can do and so when you have

00:06:40,169 --> 00:06:44,460
certificates the other cool thing is you

00:06:41,580 --> 00:06:47,580
can use the extensions to embed say

00:06:44,460 --> 00:06:49,860
policies or permissions and so if you're

00:06:47,580 --> 00:06:53,749
familiar with Ross everything uses

00:06:49,860 --> 00:06:56,789
namespaces for topics node names

00:06:53,749 --> 00:06:58,770
services parameters and so what we do

00:06:56,789 --> 00:07:02,039
there is we're using something like a

00:06:58,770 --> 00:07:05,069
parmar's globbing syntax to allow you to

00:07:02,039 --> 00:07:08,810
flexibility define what regions on the

00:07:05,069 --> 00:07:11,370
graph are read access or what a note has

00:07:08,810 --> 00:07:14,009
write access to particular topics or

00:07:11,370 --> 00:07:18,810
notes and that's that's that's really

00:07:14,009 --> 00:07:20,719
cool auditing and security logs so you

00:07:18,810 --> 00:07:23,460
know we're adding auditing to all the

00:07:20,719 --> 00:07:29,249
access events and the violation attempts

00:07:23,460 --> 00:07:31,620
so you have a you can and you can also

00:07:29,249 --> 00:07:33,089
adjust the how flexible your system is

00:07:31,620 --> 00:07:35,639
maybe you just want to set your robot in

00:07:33,089 --> 00:07:36,689
audit mode see what the violations are

00:07:35,639 --> 00:07:38,370
and then you might want to sit an

00:07:36,689 --> 00:07:41,159
enforce so you just reject any

00:07:38,370 --> 00:07:43,169
violations outright but we can also do

00:07:41,159 --> 00:07:47,459
is we can take those security events and

00:07:43,169 --> 00:07:50,580
use them to train policies so if you've

00:07:47,459 --> 00:07:52,169
ever did a Ross graph or like you

00:07:50,580 --> 00:07:53,599
printed out the PDF of all the nodes and

00:07:52,169 --> 00:07:55,979
you see all the interconnects

00:07:53,599 --> 00:07:57,839
handwriting a policy for that would just

00:07:55,979 --> 00:07:59,490
be insane and the common kind of thing

00:07:57,839 --> 00:08:00,810
in to do is like an appt armors you run

00:07:59,490 --> 00:08:02,969
your application for a while and

00:08:00,810 --> 00:08:04,649
training mode take all the events and

00:08:02,969 --> 00:08:06,990
then compress that into a policy and so

00:08:04,649 --> 00:08:09,539
what I've done there is a I've allowed

00:08:06,990 --> 00:08:11,639
you to auto-generate sort of a human

00:08:09,539 --> 00:08:13,289
readable yamo file but then the key

00:08:11,639 --> 00:08:17,729
server can use to generate the

00:08:13,289 --> 00:08:19,169
certificates demo time so if you're

00:08:17,729 --> 00:08:20,459
interested in following me along I use

00:08:19,169 --> 00:08:23,009
docker so you can run this on your own

00:08:20,459 --> 00:08:24,539
machine if you want but this is like a

00:08:23,009 --> 00:08:28,159
terminal recording so you can copy and

00:08:24,539 --> 00:08:31,080
paste commands out of it if you need to

00:08:28,159 --> 00:08:33,319
well it's a good thing I just lifted up

00:08:31,080 --> 00:08:33,319
here

00:08:34,600 --> 00:08:45,460
abscess p up cool alright so i'm doing

00:08:42,290 --> 00:08:47,390
here is i'm just pulling the OS RFS ross

00:08:45,460 --> 00:08:49,340
experimental container so you can get

00:08:47,390 --> 00:08:51,130
started with that that drops you into a

00:08:49,340 --> 00:08:52,970
catkin workspace with everything built

00:08:51,130 --> 00:08:54,410
right here i'm just sourcing the

00:08:52,970 --> 00:08:56,480
bachelor see so i don't have to do a lot

00:08:54,410 --> 00:08:58,190
of time then they use by bo so we can

00:08:56,480 --> 00:09:01,460
start doing multiple sessions really

00:08:58,190 --> 00:09:03,650
easily within the container then i

00:09:01,460 --> 00:09:06,140
delete the default dot ross

00:09:03,650 --> 00:09:07,490
configuration i had for the demo so this

00:09:06,140 --> 00:09:10,490
is like if you were doing it yourself

00:09:07,490 --> 00:09:13,190
and yet starting up we do here as we

00:09:10,490 --> 00:09:14,870
start the s rawski server and that

00:09:13,190 --> 00:09:16,790
generates the root and master

00:09:14,870 --> 00:09:19,790
certificate authority if we check the

00:09:16,790 --> 00:09:21,830
tree you will see we have that key store

00:09:19,790 --> 00:09:24,860
the ca for the master in route auto

00:09:21,830 --> 00:09:27,830
generated some links for SS openssl that

00:09:24,860 --> 00:09:30,230
needs and a some configuration files

00:09:27,830 --> 00:09:34,190
here's the default configuration file

00:09:30,230 --> 00:09:37,070
its comment out so nothing nothing is

00:09:34,190 --> 00:09:41,440
configured right now what we'll want to

00:09:37,070 --> 00:09:44,600
do is want to train a profile

00:09:41,440 --> 00:09:47,740
automatically so if we've started a ross

00:09:44,600 --> 00:09:50,330
s raw score in train mode so any

00:09:47,740 --> 00:09:54,470
violations are they going to be to amend

00:09:50,330 --> 00:09:56,390
it to the policy so then if it sees a

00:09:54,470 --> 00:10:01,190
new policy violation to lament it and

00:09:56,390 --> 00:10:04,430
then it won't see it again alright so

00:10:01,190 --> 00:10:06,830
now we're doing is we tried to run the

00:10:04,430 --> 00:10:08,210
talker listener but it failed i'm going

00:10:06,830 --> 00:10:10,100
a little bit fast here but you guys can

00:10:08,210 --> 00:10:14,060
go back to them oh and slow it down if

00:10:10,100 --> 00:10:16,790
you want now we see the auto generated

00:10:14,060 --> 00:10:18,500
file it's been expanded and populated

00:10:16,790 --> 00:10:20,450
you see all these particular things that

00:10:18,500 --> 00:10:22,580
just a simple talker listeners example

00:10:20,450 --> 00:10:26,570
is doing you certainly want to want to

00:10:22,580 --> 00:10:28,790
debug that by hand then what we'll do is

00:10:26,570 --> 00:10:30,980
we'll remove the first generation of

00:10:28,790 --> 00:10:32,270
certificates that that were that were

00:10:30,980 --> 00:10:34,100
generated they don't necessarily have

00:10:32,270 --> 00:10:37,130
these policies so we'll just wipe them

00:10:34,100 --> 00:10:39,050
out and then we'll query the key server

00:10:37,130 --> 00:10:40,700
by launching everything again and then

00:10:39,050 --> 00:10:45,040
everything will get new certificates

00:10:40,700 --> 00:10:45,040
with the latest policy info

00:10:47,090 --> 00:10:51,690
yep so you can see the events of you

00:10:50,460 --> 00:10:58,280
know when when when things were

00:10:51,690 --> 00:10:58,280
generated relaunching the key server

00:10:58,580 --> 00:11:03,270
going back to Rusk or we can remove the

00:11:01,620 --> 00:11:05,850
train now we're like you know an

00:11:03,270 --> 00:11:10,080
enforced mode hardcore here you can see

00:11:05,850 --> 00:11:12,690
like a blurb of the certificate of a

00:11:10,080 --> 00:11:15,540
particular unique IDE that was used to

00:11:12,690 --> 00:11:17,750
define for admission so this is all like

00:11:15,540 --> 00:11:22,070
written in a documentation for the

00:11:17,750 --> 00:11:24,270
s-cross wiki but you can see like the

00:11:22,070 --> 00:11:26,820
policy qualifiers and here's like the

00:11:24,270 --> 00:11:28,620
chatter topic here's the Ross out for

00:11:26,820 --> 00:11:34,340
logging so that no it has permissions to

00:11:28,620 --> 00:11:38,070
publish its own logging message yeah and

00:11:34,340 --> 00:11:42,150
this is like the same but for the Ross

00:11:38,070 --> 00:11:44,040
master so the master itself is also a

00:11:42,150 --> 00:11:45,990
node so it needs its own certificates to

00:11:44,040 --> 00:11:50,790
interact with the other nodes within the

00:11:45,990 --> 00:11:52,500
network and then I go ahead and take the

00:11:50,790 --> 00:11:54,390
creaky server offline and then like

00:11:52,500 --> 00:11:56,160
restart everything and so what you can

00:11:54,390 --> 00:11:59,160
see is now that every all the keys have

00:11:56,160 --> 00:12:00,690
been populated into the keystore you can

00:11:59,160 --> 00:12:02,430
take the key server offline and that way

00:12:00,690 --> 00:12:04,590
your system is kind of locked down

00:12:02,430 --> 00:12:07,680
there's no certificate authority allowed

00:12:04,590 --> 00:12:09,270
to sign more keys so you might run that

00:12:07,680 --> 00:12:11,310
on the same robot or you might run that

00:12:09,270 --> 00:12:17,990
like within your workshop on a separate

00:12:11,310 --> 00:12:22,440
computer however you wish okay all right

00:12:17,990 --> 00:12:27,150
so process profiles and so we're doing

00:12:22,440 --> 00:12:30,750
here is we're taking account for the

00:12:27,150 --> 00:12:33,180
onboard processes so there's a thing

00:12:30,750 --> 00:12:34,800
called link security modules and what

00:12:33,180 --> 00:12:37,050
those do is they leverage pre-existing

00:12:34,800 --> 00:12:39,660
kernel level security features and

00:12:37,050 --> 00:12:41,340
there's two big popular ones selinux and

00:12:39,660 --> 00:12:44,160
a parmer all we've done here is we're

00:12:41,340 --> 00:12:46,380
just using app armor for its user it's

00:12:44,160 --> 00:12:48,000
easy user access and it's also pretty

00:12:46,380 --> 00:12:50,850
well documented the other thing is you

00:12:48,000 --> 00:12:53,670
bunt to and canonical canonical already

00:12:50,850 --> 00:12:56,040
have it and you want to so it's easy to

00:12:53,670 --> 00:12:57,059
start for most Ross users there and we

00:12:56,040 --> 00:12:59,549
can do there as you can call

00:12:57,059 --> 00:13:01,169
19 ross processes you can limit all the

00:12:59,549 --> 00:13:03,629
it's more of like a more fine-grained

00:13:01,169 --> 00:13:06,449
control of the UNIX user permissions

00:13:03,629 --> 00:13:08,759
module you can limit file device inter

00:13:06,449 --> 00:13:11,339
process signals networking commissions

00:13:08,759 --> 00:13:13,679
so like nodes can't like sick and kill

00:13:11,339 --> 00:13:17,579
other nodes what we've done here is we

00:13:13,679 --> 00:13:19,379
provide the ross profile library so you

00:13:17,579 --> 00:13:21,029
can quickly get started here's an

00:13:19,379 --> 00:13:28,109
example but what i'm going to do here is

00:13:21,029 --> 00:13:31,349
a go ahead and show you how easy is to

00:13:28,109 --> 00:13:34,129
get started so you know what it what

00:13:31,349 --> 00:13:41,669
entails is you you can clone the current

00:13:34,129 --> 00:13:45,649
profile then move that move the relevant

00:13:41,669 --> 00:13:51,659
files into your own Etsy app armor

00:13:45,649 --> 00:13:54,539
profile directory from there we can see

00:13:51,659 --> 00:13:58,139
you know there's some basic primitive

00:13:54,539 --> 00:14:01,259
files for the library here's a example

00:13:58,139 --> 00:14:03,749
template for like Ross lon Ross master

00:14:01,259 --> 00:14:05,609
raw score and then so that using the

00:14:03,749 --> 00:14:08,579
abstractions within the library to just

00:14:05,609 --> 00:14:10,169
simplify a lot of the tasks and so

00:14:08,579 --> 00:14:13,319
here's the talker and listen or example

00:14:10,169 --> 00:14:16,919
for like C++ or Python and so what that

00:14:13,319 --> 00:14:21,689
might look like from here what we can do

00:14:16,919 --> 00:14:25,259
is we can launch an example set up so

00:14:21,689 --> 00:14:28,199
with a raw score and then the talker

00:14:25,259 --> 00:14:30,029
listener and you'll see under the app

00:14:28,199 --> 00:14:32,159
armor profile that's enforced they work

00:14:30,029 --> 00:14:37,349
just fine but then we go and do

00:14:32,159 --> 00:14:40,529
something malicious like we add a evil

00:14:37,349 --> 00:14:42,419
script to the ER logging directory like

00:14:40,529 --> 00:14:45,149
deletes things all right and then we try

00:14:42,419 --> 00:14:49,369
and run the same note again and so what

00:14:45,149 --> 00:14:52,379
you'd see is because we already have the

00:14:49,369 --> 00:14:55,349
app armor profile with the Ross

00:14:52,379 --> 00:14:57,839
librarian force we see up the process

00:14:55,349 --> 00:14:59,219
doesn't have to permission to do that so

00:14:57,839 --> 00:15:01,169
that's really cool when you can like I

00:14:59,219 --> 00:15:04,489
have fine-grained control over what a

00:15:01,169 --> 00:15:04,489
node is able to do

00:15:04,780 --> 00:15:20,180
alright so to do is so there's certainly

00:15:16,670 --> 00:15:21,800
some to do's we want to develop a Ross

00:15:20,180 --> 00:15:23,450
enhancement proposal to kind of

00:15:21,800 --> 00:15:26,450
standardized a lot of the public key

00:15:23,450 --> 00:15:28,670
infrastructure practices what specific

00:15:26,450 --> 00:15:29,990
object identifiers we're going to use in

00:15:28,670 --> 00:15:32,450
our extensions a lot of technical

00:15:29,990 --> 00:15:34,970
details like those we want to add some

00:15:32,450 --> 00:15:37,430
more support for different client

00:15:34,970 --> 00:15:39,770
libraries because the Ross calm and raw

00:15:37,430 --> 00:15:41,930
score is all written in Python for rapid

00:15:39,770 --> 00:15:43,960
prototyping that's where we started but

00:15:41,930 --> 00:15:47,000
we certainly want to add like Ravi Java

00:15:43,960 --> 00:15:48,860
TLS is a stateful connection so I'm not

00:15:47,000 --> 00:15:51,170
exactly sure how to approach the UDP and

00:15:48,860 --> 00:15:54,980
multi broadcast but I think there are

00:15:51,170 --> 00:15:56,360
some equivalents in that direction we

00:15:54,980 --> 00:15:59,150
want to harden all the master and slave

00:15:56,360 --> 00:16:01,730
API calls so you know there's some

00:15:59,150 --> 00:16:04,040
system level API calls and Ross like

00:16:01,730 --> 00:16:06,560
shutting down another node with API

00:16:04,040 --> 00:16:09,040
xml-rpc and so you know you want to make

00:16:06,560 --> 00:16:11,900
sure only a master is able to call that

00:16:09,040 --> 00:16:15,200
unit test coverage unit tests all the

00:16:11,900 --> 00:16:17,540
things that needs to be done abstracting

00:16:15,200 --> 00:16:21,500
security modules and plugins this is

00:16:17,540 --> 00:16:23,450
what I've done a little bit already so

00:16:21,500 --> 00:16:25,340
if you have a different schema of other

00:16:23,450 --> 00:16:27,410
generating certificates or enforcing

00:16:25,340 --> 00:16:29,240
policies you can define that in the

00:16:27,410 --> 00:16:31,760
certificates you generate and then you

00:16:29,240 --> 00:16:33,890
have a logical plug-in to evaluate that

00:16:31,760 --> 00:16:36,470
during runtime to see whether you know a

00:16:33,890 --> 00:16:40,360
node you're connecting to has access to

00:16:36,470 --> 00:16:40,360
this particular event it's requesting

00:16:40,540 --> 00:16:47,120
one thing I like to do is give a shout

00:16:42,920 --> 00:16:48,680
out to OS RF and my lab at UCSD without

00:16:47,120 --> 00:16:53,090
their support this wouldn't have been

00:16:48,680 --> 00:16:55,970
possible all right some resources for

00:16:53,090 --> 00:16:57,800
the S Ross wiki documentation the docker

00:16:55,970 --> 00:16:59,840
file to get you started if you want to

00:16:57,800 --> 00:17:02,180
start developing and a little bit about

00:16:59,840 --> 00:17:04,330
me so now I'd like to open up for

00:17:02,180 --> 00:17:04,330
questions

00:17:05,990 --> 00:17:20,929
Oh what's the the overhead like network

00:17:17,390 --> 00:17:23,540
and processor the overhead um so I think

00:17:20,929 --> 00:17:25,640
Morgan did a unit test you want to

00:17:23,540 --> 00:17:29,450
explain what you had with like a small

00:17:25,640 --> 00:17:30,710
Raspberry Pi sure it's it's a great

00:17:29,450 --> 00:17:31,760
question because of course there's

00:17:30,710 --> 00:17:33,830
always a penalty when you add more

00:17:31,760 --> 00:17:35,510
processing but what's great about this

00:17:33,830 --> 00:17:37,130
is the fact that we're using TLS for

00:17:35,510 --> 00:17:39,110
this prototype means that since

00:17:37,130 --> 00:17:41,120
everything you know internet wise is

00:17:39,110 --> 00:17:42,830
gradually migrating to https there's

00:17:41,120 --> 00:17:44,600
tons of support in the OS and actually

00:17:42,830 --> 00:17:45,860
in the chipset slightly there's actually

00:17:44,600 --> 00:17:48,170
like people are using specific

00:17:45,860 --> 00:17:50,390
instructions in the arm and x86 worlds

00:17:48,170 --> 00:17:52,670
to make this stuff go faster so as one

00:17:50,390 --> 00:17:54,860
milestone it is like a couple more

00:17:52,670 --> 00:17:58,820
percent on my laptop to stream a webcam

00:17:54,860 --> 00:18:01,520
over using this using raw spy we got

00:17:58,820 --> 00:18:03,590
like a raspa version of a image viewer

00:18:01,520 --> 00:18:05,450
and a webcam streamer just two could

00:18:03,590 --> 00:18:07,429
attack like you know test it with

00:18:05,450 --> 00:18:08,750
Thailand with data and it was like it

00:18:07,429 --> 00:18:10,880
would takes like eight percent of a core

00:18:08,750 --> 00:18:12,710
of my computer to run that without

00:18:10,880 --> 00:18:14,720
encryption and with encryption was like

00:18:12,710 --> 00:18:16,460
three percent Morrison like them so it's

00:18:14,720 --> 00:18:17,690
it's you can measure it but it's not

00:18:16,460 --> 00:18:18,980
like doesn't like wipe out the whole

00:18:17,690 --> 00:18:22,370
system because there's so much support

00:18:18,980 --> 00:18:25,370
for doing this stuff nobody the the main

00:18:22,370 --> 00:18:27,050
overhead I've been told for like TLS

00:18:25,370 --> 00:18:28,460
connections is actually the handshaking

00:18:27,050 --> 00:18:31,040
method when you're trying to validate a

00:18:28,460 --> 00:18:32,420
certificate or like running down the

00:18:31,040 --> 00:18:34,850
chain of certificates to make sure

00:18:32,420 --> 00:18:38,210
everything's validly signed that can be

00:18:34,850 --> 00:18:40,700
computationally heavy but then ciphering

00:18:38,210 --> 00:18:42,590
is not too bad now and I think a lot of

00:18:40,700 --> 00:18:46,030
processors have like in an instruction

00:18:42,590 --> 00:18:48,890
set just for like that particular task

00:18:46,030 --> 00:18:50,510
really cool work on this as raw stuff I

00:18:48,890 --> 00:18:52,070
think security is the thing that we all

00:18:50,510 --> 00:18:54,850
definitely need to think about with our

00:18:52,070 --> 00:18:59,210
robots and we've not done so much before

00:18:54,850 --> 00:19:02,809
I do have a question about openness and

00:18:59,210 --> 00:19:05,840
how Ross is currently configured nodes

00:19:02,809 --> 00:19:09,679
come up nodes come down sometimes you

00:19:05,840 --> 00:19:11,870
might want an unknown node to attach to

00:19:09,679 --> 00:19:13,910
your Ross master how do you deal with

00:19:11,870 --> 00:19:17,240
that with all of these signed

00:19:13,910 --> 00:19:19,670
certificates so there's like a there's a

00:19:17,240 --> 00:19:22,280
slight separation between

00:19:19,670 --> 00:19:25,040
the Transport Security and author

00:19:22,280 --> 00:19:27,590
authentication so what you can do is you

00:19:25,040 --> 00:19:29,270
can set I have the documentation where

00:19:27,590 --> 00:19:31,670
you can set environment variables to

00:19:29,270 --> 00:19:34,700
configure how flexible you want so maybe

00:19:31,670 --> 00:19:38,030
you just want the network encryption you

00:19:34,700 --> 00:19:42,790
don't necessarily need or want to bother

00:19:38,030 --> 00:19:44,870
with the making the graph non-anonymous

00:19:42,790 --> 00:19:48,380
so you can you can leave the graph

00:19:44,870 --> 00:19:49,760
anonymous if you so choose and then it's

00:19:48,380 --> 00:19:51,470
just following a lot of the PKS

00:19:49,760 --> 00:19:53,330
standards where if it's in the

00:19:51,470 --> 00:19:55,010
certificate then it must be followed but

00:19:53,330 --> 00:19:56,450
if it's not so then what you could do is

00:19:55,010 --> 00:19:58,850
you could just omit that from the

00:19:56,450 --> 00:20:00,610
certificate and then nodes could like

00:19:58,850 --> 00:20:03,110
connect to each other but they wouldn't

00:20:00,610 --> 00:20:04,760
there would be no policy evaluation and

00:20:03,110 --> 00:20:06,230
what they could or could not do so this

00:20:04,760 --> 00:20:08,690
gives you fine grained control over

00:20:06,230 --> 00:20:10,250
having some nodes that are incredibly

00:20:08,690 --> 00:20:12,320
secure and then some nodes that are

00:20:10,250 --> 00:20:14,930
relatively open to incoming yeah so you

00:20:12,320 --> 00:20:17,450
could section one portion of like a

00:20:14,930 --> 00:20:20,570
mission critical event nodes that are

00:20:17,450 --> 00:20:22,640
only accessible by particular policies

00:20:20,570 --> 00:20:25,460
are like particular note signed by a

00:20:22,640 --> 00:20:27,080
particular certificate authority so

00:20:25,460 --> 00:20:28,790
there's a lot of cool stuff you can you

00:20:27,080 --> 00:20:31,790
can bring in from the IT infrastructure

00:20:28,790 --> 00:20:33,910
with the certificates really cool thank

00:20:31,790 --> 00:20:33,910

YouTube URL: https://www.youtube.com/watch?v=RqqM9gM_6fE


