Title: ROSCon 2016 Seoul Day 2   Robotics Benchmarking with ROS
Publication date: 2016-10-20
Playlist: ROSCon 2016
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2016 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License https://creativecommons.org/licenses/by-nc-nd/3.0/
Captions: 
	00:00:00,000 --> 00:00:09,120
what do I want I want to be able to

00:00:06,120 --> 00:00:13,469
compare my walking algorithm for a human

00:00:09,120 --> 00:00:15,389
robot against your algorithm I want to

00:00:13,469 --> 00:00:18,000
be able to compare my navigation

00:00:15,389 --> 00:00:21,510
algorithm of a wheeled robot against

00:00:18,000 --> 00:00:24,300
your algorithm I want to be able to

00:00:21,510 --> 00:00:28,470
compare my grasping algorithm against

00:00:24,300 --> 00:00:33,450
Uruguay basically what I'm talking about

00:00:28,470 --> 00:00:37,469
is about measuring how good or bad is a

00:00:33,450 --> 00:00:41,219
solution an algorithm solution for a

00:00:37,469 --> 00:00:44,520
given robotics problem and for this at

00:00:41,219 --> 00:00:49,829
the construct we proposed a way of

00:00:44,520 --> 00:00:54,329
benchmarking robotics algorithms our

00:00:49,829 --> 00:00:57,000
proposal has to be raus based it has to

00:00:54,329 --> 00:01:00,780
be based on simulations and it has to be

00:00:57,000 --> 00:01:04,199
based on the cloud so your question

00:01:00,780 --> 00:01:07,979
probably is why Ross well do you know

00:01:04,199 --> 00:01:11,670
because you are here so Ross is becoming

00:01:07,979 --> 00:01:15,540
the standard in the robotics industry it

00:01:11,670 --> 00:01:18,330
also has a very huge community and it

00:01:15,540 --> 00:01:22,170
has a very well-developed interface

00:01:18,330 --> 00:01:24,420
between algorithms and hard work answer

00:01:22,170 --> 00:01:28,290
this question the next one is why

00:01:24,420 --> 00:01:31,049
simulations because simulations they

00:01:28,290 --> 00:01:34,920
provide the exact same environment to

00:01:31,049 --> 00:01:36,750
everyone you can create different

00:01:34,920 --> 00:01:40,920
testing environments for the same

00:01:36,750 --> 00:01:44,040
problem very easily you can repeat those

00:01:40,920 --> 00:01:47,549
tests with the exact conditions every

00:01:44,040 --> 00:01:50,490
time you can run it on real time faster

00:01:47,549 --> 00:01:53,009
than real time and you can rerun the

00:01:50,490 --> 00:01:55,320
test automatically if something changes

00:01:53,009 --> 00:01:57,570
for example let's say you are using move

00:01:55,320 --> 00:02:00,170
it and then move it changes you can

00:01:57,570 --> 00:02:03,299
rerun the whole bunch of tests against

00:02:00,170 --> 00:02:07,259
again against the new version of move it

00:02:03,299 --> 00:02:10,130
and get a new score third question is

00:02:07,259 --> 00:02:13,850
why in the cloud because

00:02:10,130 --> 00:02:16,070
having put a common Ross a common

00:02:13,850 --> 00:02:20,120
interface to algorithms and robots

00:02:16,070 --> 00:02:23,330
having put a common setup environment we

00:02:20,120 --> 00:02:26,000
are put in a common way of interacting

00:02:23,330 --> 00:02:28,430
with that environment using a standard

00:02:26,000 --> 00:02:30,650
web platform that you don't need to

00:02:28,430 --> 00:02:33,140
install anything you can access from

00:02:30,650 --> 00:02:37,040
anywhere and use the powerful computers

00:02:33,140 --> 00:02:40,070
of the of the cloud and also again it

00:02:37,040 --> 00:02:44,120
allows you to very easily rerun tests

00:02:40,070 --> 00:02:48,140
automatically so how this would these

00:02:44,120 --> 00:02:50,600
benchmark system work let's make an

00:02:48,140 --> 00:02:52,820
example for example let's make an

00:02:50,600 --> 00:02:56,060
example of a grasping algorithm for

00:02:52,820 --> 00:02:58,300
mobile manipulations manipulators so the

00:02:56,060 --> 00:03:01,460
first thing that we have to do is to

00:02:58,300 --> 00:03:04,820
identify the interface that will require

00:03:01,460 --> 00:03:07,280
for our algorithm in order to work this

00:03:04,820 --> 00:03:11,060
is we need to access the depth sensor

00:03:07,280 --> 00:03:15,860
the camera the arm dripper and the

00:03:11,060 --> 00:03:18,650
mobile ways base wheels for example the

00:03:15,860 --> 00:03:22,370
next thing is to define a set of robots

00:03:18,650 --> 00:03:24,470
that apply to this interface in this

00:03:22,370 --> 00:03:27,080
case we have selected three different

00:03:24,470 --> 00:03:29,530
robots one from Robotnik another one

00:03:27,080 --> 00:03:32,990
from fetch and another one from Power

00:03:29,530 --> 00:03:36,190
great next step let's define the set of

00:03:32,990 --> 00:03:40,220
environments that apply to this problem

00:03:36,190 --> 00:03:44,620
three different environments where this

00:03:40,220 --> 00:03:49,610
algorithm has to work with those robots

00:03:44,620 --> 00:03:53,150
next step is to test your algorithm on

00:03:49,610 --> 00:03:57,740
the first robot on each one of the

00:03:53,150 --> 00:04:00,560
environments and obtain a score so if we

00:03:57,740 --> 00:04:02,720
test the robotic robot with the first

00:04:00,560 --> 00:04:05,210
environment we obtain this score for the

00:04:02,720 --> 00:04:07,160
problem that we try to solve with a

00:04:05,210 --> 00:04:09,770
second environment we obtain this second

00:04:07,160 --> 00:04:14,420
score and with the third environment we

00:04:09,770 --> 00:04:16,670
obtain this third score we repeat the

00:04:14,420 --> 00:04:20,960
same problem the same thing the same

00:04:16,670 --> 00:04:24,170
path with fetch robot with all the

00:04:20,960 --> 00:04:29,410
environments different scores

00:04:24,170 --> 00:04:29,410
and also with power robotics robot

00:04:31,540 --> 00:04:39,490
finally when we have ended testing the

00:04:36,920 --> 00:04:42,350
three robots in the three environments

00:04:39,490 --> 00:04:44,600
we get something like that it's a

00:04:42,350 --> 00:04:46,960
graphic displaying all the scores that

00:04:44,600 --> 00:04:50,090
we have obtained for each one of the

00:04:46,960 --> 00:04:53,330
robots and the environment this is not

00:04:50,090 --> 00:04:55,540
real results so please don't get any any

00:04:53,330 --> 00:05:00,650
ideas about who is best or whatever

00:04:55,540 --> 00:05:04,160
sorry so final score for the algorithm

00:05:00,650 --> 00:05:07,760
will be a kind of average of the scores

00:05:04,160 --> 00:05:10,280
so this still not decided for now we can

00:05:07,760 --> 00:05:15,830
do an average of the robot in all the

00:05:10,280 --> 00:05:18,530
environments and that score will be the

00:05:15,830 --> 00:05:23,210
score of your algorithm for grasping

00:05:18,530 --> 00:05:25,820
with this kind of manipulators so if we

00:05:23,210 --> 00:05:28,690
repeat this with different algorithms we

00:05:25,820 --> 00:05:33,230
can have a method of comparing different

00:05:28,690 --> 00:05:36,650
grasping algorithms okay what do we need

00:05:33,230 --> 00:05:39,740
to implement this system into a real

00:05:36,650 --> 00:05:41,030
thing not just a theoretical one well

00:05:39,740 --> 00:05:43,130
the first thing that we need is an

00:05:41,030 --> 00:05:46,520
ontology of problems that we want to

00:05:43,130 --> 00:05:49,340
compare of robotics problems this was an

00:05:46,520 --> 00:05:51,290
example about grasping but we can do

00:05:49,340 --> 00:05:53,930
another one for navigation for walking

00:05:51,290 --> 00:05:57,710
for whatever you think about we have to

00:05:53,930 --> 00:06:00,470
have also lists of robots that we need

00:05:57,710 --> 00:06:03,110
to use for the test and for each one of

00:06:00,470 --> 00:06:07,640
the problems of the ontology a list of

00:06:03,110 --> 00:06:12,590
environments and then web platform that

00:06:07,640 --> 00:06:14,330
handles it all for the ontology for the

00:06:12,590 --> 00:06:17,030
ontology problem well what's the

00:06:14,330 --> 00:06:19,190
ontology the ontology is the list of all

00:06:17,030 --> 00:06:22,790
the robotics problems that we have to

00:06:19,190 --> 00:06:25,490
solve and compare at the beginning

00:06:22,790 --> 00:06:27,650
doesn't have to be very complete so you

00:06:25,490 --> 00:06:31,640
can start with three problems for

00:06:27,650 --> 00:06:34,070
example and keep on adding or dividing

00:06:31,640 --> 00:06:36,830
because within a same problem that could

00:06:34,070 --> 00:06:38,080
be different solutions grasping

00:06:36,830 --> 00:06:41,770
algorithms fro we

00:06:38,080 --> 00:06:47,560
robot with a gripper grasping algorithms

00:06:41,770 --> 00:06:50,620
for will robot with a hand so those will

00:06:47,560 --> 00:06:54,820
be different items in the ontology of

00:06:50,620 --> 00:06:57,130
problems for each one of those different

00:06:54,820 --> 00:06:59,830
problems of the ontology you have to

00:06:57,130 --> 00:07:03,070
define the interface that has to be done

00:06:59,830 --> 00:07:05,830
in Ross of course and the interface

00:07:03,070 --> 00:07:08,920
defines the sensors and actuators that

00:07:05,830 --> 00:07:13,420
you have to use for that problem the way

00:07:08,920 --> 00:07:15,760
you have to calculate the score so the

00:07:13,420 --> 00:07:19,300
way that you are going to say okay this

00:07:15,760 --> 00:07:22,810
is this is very good this is not so good

00:07:19,300 --> 00:07:26,740
etc etc and everything has to be defined

00:07:22,810 --> 00:07:28,810
in Ross terms also for each one of the

00:07:26,740 --> 00:07:31,810
problems you have to define which robots

00:07:28,810 --> 00:07:35,290
apply to that particular problem of the

00:07:31,810 --> 00:07:39,340
ontology and which environments the same

00:07:35,290 --> 00:07:41,800
thing once you have all these define

00:07:39,340 --> 00:07:45,280
when you need to them to create a

00:07:41,800 --> 00:07:47,890
platform this platform in order to be

00:07:45,280 --> 00:07:48,880
able to be used by anyone here from

00:07:47,890 --> 00:07:51,760
different backgrounds from different

00:07:48,880 --> 00:07:57,700
places with different computers with

00:07:51,760 --> 00:07:58,840
different access to to a community so it

00:07:57,700 --> 00:08:02,020
has to be independent of the operating

00:07:58,840 --> 00:08:04,690
system has to provide the exact same

00:08:02,020 --> 00:08:06,220
conditions to all of the experiments all

00:08:04,690 --> 00:08:09,490
the people that is sending their

00:08:06,220 --> 00:08:11,530
algorithms to be score it has to be

00:08:09,490 --> 00:08:13,600
automatic so you send your algorithm and

00:08:11,530 --> 00:08:17,200
you don't care about anything else

00:08:13,600 --> 00:08:20,770
the system will score and say where in

00:08:17,200 --> 00:08:24,670
the table of of algorithms your

00:08:20,770 --> 00:08:26,440
algorithm is located it must allow of

00:08:24,670 --> 00:08:28,840
course the modification of the ontology

00:08:26,440 --> 00:08:32,350
in order to include new problems or

00:08:28,840 --> 00:08:34,150
divide all ones and it has to compute

00:08:32,350 --> 00:08:37,000
the score automatically and show the

00:08:34,150 --> 00:08:40,860
benchmark we have started at the

00:08:37,000 --> 00:08:43,360
construct developing this platform and

00:08:40,860 --> 00:08:45,070
it's a platform that is called the

00:08:43,360 --> 00:08:47,830
construct same that is already online

00:08:45,070 --> 00:08:51,760
and you can visit there basically we use

00:08:47,830 --> 00:08:55,920
this for simulating robot

00:08:51,760 --> 00:08:59,830
on the web like Ian said previously so

00:08:55,920 --> 00:09:02,710
yeah this is an example this is an

00:08:59,830 --> 00:09:05,140
example of an Atlas robot being

00:09:02,710 --> 00:09:08,320
simulated in the construct walking

00:09:05,140 --> 00:09:10,480
around and this is life so you can go to

00:09:08,320 --> 00:09:13,330
the constructeam and start simulating

00:09:10,480 --> 00:09:16,060
your robots with gazebo or web ads or

00:09:13,330 --> 00:09:20,640
DRC simulator this is already working

00:09:16,060 --> 00:09:20,640
just log in there and start simulating

00:09:21,720 --> 00:09:31,390
so these were platform handles the

00:09:27,790 --> 00:09:33,900
following things first it provides the

00:09:31,390 --> 00:09:37,150
same conditions for all the algorithms

00:09:33,900 --> 00:09:39,670
so because this web platform is loading

00:09:37,150 --> 00:09:40,510
every time the same simulation with the

00:09:39,670 --> 00:09:42,430
same conditions

00:09:40,510 --> 00:09:44,740
everybody is accessing the same

00:09:42,430 --> 00:09:49,270
conditions for the algorithm to be

00:09:44,740 --> 00:09:52,780
scored second this platform also allows

00:09:49,270 --> 00:09:55,660
to test in the same conditions that they

00:09:52,780 --> 00:09:59,260
will be used for the scoring so you can

00:09:55,660 --> 00:10:01,420
go to the platform and load the

00:09:59,260 --> 00:10:04,150
environment for robot for your

00:10:01,420 --> 00:10:06,040
experiment that will be used the same

00:10:04,150 --> 00:10:08,170
environment for scoring so you can do

00:10:06,040 --> 00:10:10,690
there your tests improve your algorithms

00:10:08,170 --> 00:10:13,210
see how the algorithm is doing and when

00:10:10,690 --> 00:10:14,920
you are happy you press a button and

00:10:13,210 --> 00:10:19,870
then it will be selected on the next

00:10:14,920 --> 00:10:22,300
build during the night for scoring yeah

00:10:19,870 --> 00:10:24,460
so that's the step mark the algorithm

00:10:22,300 --> 00:10:27,220
for scoring when you are happy with your

00:10:24,460 --> 00:10:29,500
results and then there is an automatic

00:10:27,220 --> 00:10:32,860
benchmarking process that is executed

00:10:29,500 --> 00:10:35,830
every night that takes your algorithm

00:10:32,860 --> 00:10:38,620
put it into the simulation environment

00:10:35,830 --> 00:10:41,320
with assimilated robot run the algorithm

00:10:38,620 --> 00:10:45,820
in order to calculate the score and then

00:10:41,320 --> 00:10:48,190
produces the result for you and this

00:10:45,820 --> 00:10:52,330
result is displayed on a little board I

00:10:48,190 --> 00:10:54,790
will show you later at present we have a

00:10:52,330 --> 00:10:56,920
solid develop in all these the platform

00:10:54,790 --> 00:10:59,920
is there but for the ontology we only

00:10:56,920 --> 00:11:02,320
have two example so far that we have

00:10:59,920 --> 00:11:04,610
created in the form of contest the first

00:11:02,320 --> 00:11:07,940
one is a now race

00:11:04,610 --> 00:11:10,790
and the second one is the sumo contest

00:11:07,940 --> 00:11:17,060
that we call like that the third one the

00:11:10,790 --> 00:11:23,200
now raised is an algorithm environment

00:11:17,060 --> 00:11:23,200
where the user should start this what

00:11:23,410 --> 00:11:31,010
okay there is a video here okay yeah

00:11:28,610 --> 00:11:32,480
yeah here it goes so he's showing it

00:11:31,010 --> 00:11:33,500
okay it's not shown here on my screen

00:11:32,480 --> 00:11:36,589
sorry

00:11:33,500 --> 00:11:38,870
so the now race you have your now right

00:11:36,589 --> 00:11:44,089
your now robot that has to walk 10

00:11:38,870 --> 00:11:46,430
meters as fast as possible the robot

00:11:44,089 --> 00:11:48,410
available is only one now so we are not

00:11:46,430 --> 00:11:51,459
doing with other robots and the

00:11:48,410 --> 00:11:54,860
environment available is only one this

00:11:51,459 --> 00:11:57,800
racetrack the interface that your

00:11:54,860 --> 00:12:02,920
algorithms can access or the full-body

00:11:57,800 --> 00:12:06,829
joints the camera and the EMU IMU sensor

00:12:02,920 --> 00:12:08,630
the same for the we have created the

00:12:06,829 --> 00:12:12,560
same for the sumo contest in the sumo

00:12:08,630 --> 00:12:15,649
contest you have those two Darwin robots

00:12:12,560 --> 00:12:17,860
that must fight yeah the walking

00:12:15,649 --> 00:12:20,690
algorithm was not very good

00:12:17,860 --> 00:12:23,660
yeah but I will keep on Zhao right there

00:12:20,690 --> 00:12:25,940
clever so you have to take a humanoid

00:12:23,660 --> 00:12:29,180
and take a bow take out of the ring and

00:12:25,940 --> 00:12:32,329
intruder the robot is a Darwin and the

00:12:29,180 --> 00:12:34,550
environment is the sumo ring the

00:12:32,329 --> 00:12:39,680
interface is again the full body joins

00:12:34,550 --> 00:12:42,019
the camera and the IMU sensor so if you

00:12:39,680 --> 00:12:44,860
can create your algorithm put it in our

00:12:42,019 --> 00:12:44,860
system and

00:12:45,470 --> 00:12:53,870
yeah they're having fun so and then the

00:12:49,610 --> 00:12:56,990
system will will execute your algorithm

00:12:53,870 --> 00:12:59,120
during the night and put it here into

00:12:56,990 --> 00:13:01,400
the leaderboard so this is the

00:12:59,120 --> 00:13:04,370
leaderboard that is been executed every

00:13:01,400 --> 00:13:06,290
night and that contains the scores of

00:13:04,370 --> 00:13:09,230
every one of the different algorithms

00:13:06,290 --> 00:13:11,240
for each day and how the Escalade

00:13:09,230 --> 00:13:14,780
depending on the modifications that you

00:13:11,240 --> 00:13:21,740
are doing they're saying we have done

00:13:14,780 --> 00:13:24,740
the same with the now I cannot I cannot

00:13:21,740 --> 00:13:28,640
see the video here so I cannot move it

00:13:24,740 --> 00:13:30,290
forward but okay so I'm I'm going to

00:13:28,640 --> 00:13:34,420
move forward myself but there is the

00:13:30,290 --> 00:13:37,010
same type of leaderboard for the other

00:13:34,420 --> 00:13:40,340
example of the now race now it looks

00:13:37,010 --> 00:13:43,130
like yeah well this is in this video

00:13:40,340 --> 00:13:45,620
this part you see the general ball for

00:13:43,130 --> 00:13:48,830
all the contest that we have in this

00:13:45,620 --> 00:13:51,080
case will be there all the problems of

00:13:48,830 --> 00:13:54,770
the ontology that we have so you can

00:13:51,080 --> 00:13:58,190
access to any of those and select in

00:13:54,770 --> 00:14:00,830
order to see the status of the different

00:13:58,190 --> 00:14:05,090
algorithms for a given problem this is

00:14:00,830 --> 00:14:07,510
for the now race and also we contain how

00:14:05,090 --> 00:14:13,240
it changes on the time who is winning

00:14:07,510 --> 00:14:13,240
who is taking the leader position etc

00:14:15,370 --> 00:14:21,080
what is interesting about the platform

00:14:18,020 --> 00:14:23,540
is that the users have the training

00:14:21,080 --> 00:14:25,370
environment in the platform so you don't

00:14:23,540 --> 00:14:28,100
have to set up something in your

00:14:25,370 --> 00:14:30,020
computer's locally and then afterwards

00:14:28,100 --> 00:14:33,380
pray that it will work in the same way

00:14:30,020 --> 00:14:35,630
in the in the scoring system in the

00:14:33,380 --> 00:14:37,940
benchmarking system you go to the same

00:14:35,630 --> 00:14:39,650
system execute the same things for

00:14:37,940 --> 00:14:41,780
training and then once you are happy

00:14:39,650 --> 00:14:44,020
press the button and then it's submitted

00:14:41,780 --> 00:14:48,200
for scoring during the night and

00:14:44,020 --> 00:14:50,480
everything is the same we have

00:14:48,200 --> 00:14:52,430
integrated those two problems but we are

00:14:50,480 --> 00:14:54,470
looking for other problems to integrate

00:14:52,430 --> 00:14:56,480
so if you have any suggestion please

00:14:54,470 --> 00:14:57,850
come and talk to us in order to include

00:14:56,480 --> 00:15:01,870
your problem

00:14:57,850 --> 00:15:04,259
benchmarking into our platform as a

00:15:01,870 --> 00:15:10,449
conclusion I would like to state this

00:15:04,259 --> 00:15:13,750
idea that every time that a new

00:15:10,449 --> 00:15:17,110
algorithm or robot model or environment

00:15:13,750 --> 00:15:21,040
is introduced into the system a new

00:15:17,110 --> 00:15:23,620
score and classification for all the

00:15:21,040 --> 00:15:27,639
previous scores that we have calculated

00:15:23,620 --> 00:15:31,839
can be recalculated again so as I said

00:15:27,639 --> 00:15:34,480
if we modify the move it libraries maybe

00:15:31,839 --> 00:15:37,269
your algorithms will not have the same

00:15:34,480 --> 00:15:40,240
score but it doesn't matter because our

00:15:37,269 --> 00:15:42,790
system will recalculate all of them

00:15:40,240 --> 00:15:44,949
again and generate the new

00:15:42,790 --> 00:15:48,389
classification you don't have to do

00:15:44,949 --> 00:15:51,639
anything this is done automatically and

00:15:48,389 --> 00:15:54,730
so you only get a new distribution of

00:15:51,639 --> 00:15:58,420
the scores based on the current execute

00:15:54,730 --> 00:16:01,600
execution of the algorithms we call this

00:15:58,420 --> 00:16:07,990
thing a kind of continuous benchmarking

00:16:01,600 --> 00:16:09,009
and just to end my presentation I would

00:16:07,990 --> 00:16:10,449
like to say that we are looking for

00:16:09,009 --> 00:16:12,880
investors in order to develop this

00:16:10,449 --> 00:16:16,089
project further away so if you know

00:16:12,880 --> 00:16:19,329
anyone maybe your neighbor or somebody

00:16:16,089 --> 00:16:20,350
you can make a reference to us thank you

00:16:19,329 --> 00:16:29,799
very much

00:16:20,350 --> 00:16:29,799
[Applause]

00:16:37,220 --> 00:16:42,839
so as we saw yesterday gazebos supports

00:16:40,620 --> 00:16:46,310
multiple physics engines yes and a

00:16:42,839 --> 00:16:48,240
common complaint is that the output of

00:16:46,310 --> 00:16:50,610
some of these physics engines is

00:16:48,240 --> 00:16:51,990
non-deterministic so there's an element

00:16:50,610 --> 00:16:54,779
of randomness to the results of

00:16:51,990 --> 00:16:56,459
benchmarks that you get do you have a

00:16:54,779 --> 00:17:00,180
framework for dealing with this these

00:16:56,459 --> 00:17:05,160
statistical variations know their way of

00:17:00,180 --> 00:17:08,790
dealing with this I would say that is to

00:17:05,160 --> 00:17:13,500
generate the same test the same exact

00:17:08,790 --> 00:17:15,900
test different times and then do this

00:17:13,500 --> 00:17:18,209
kind of average this is the method that

00:17:15,900 --> 00:17:20,579
is used in evolutionary robotics for

00:17:18,209 --> 00:17:22,380
example because we have this problem in

00:17:20,579 --> 00:17:25,679
the revolution in evolutionary robotics

00:17:22,380 --> 00:17:28,920
and what is done is just average

00:17:25,679 --> 00:17:30,660
everything you do the experiment 100

00:17:28,920 --> 00:17:32,550
times with the same robot same

00:17:30,660 --> 00:17:38,880
environment and then you get that score

00:17:32,550 --> 00:17:40,710
there I would suggest that I actually

00:17:38,880 --> 00:17:42,330
have two questions the first one is

00:17:40,710 --> 00:17:46,410
what's the major difference between this

00:17:42,330 --> 00:17:50,190
and open a eye-opener yeah yeah okay I

00:17:46,410 --> 00:17:54,270
don't know very much about open AI but

00:17:50,190 --> 00:17:56,610
if I understood correctly is open AI

00:17:54,270 --> 00:18:00,960
they don't use robots they are using

00:17:56,610 --> 00:18:03,690
games is it like that yeah I think it is

00:18:00,960 --> 00:18:06,120
they are using games and actually we

00:18:03,690 --> 00:18:09,870
wanted to contact them in order to use

00:18:06,120 --> 00:18:12,179
our system for them and then apply their

00:18:09,870 --> 00:18:13,800
deep learning algorithms in our

00:18:12,179 --> 00:18:16,410
simulations so everything will be

00:18:13,800 --> 00:18:18,210
connected right okay so whether or not

00:18:16,410 --> 00:18:21,570
it's a game or it's like robot platform

00:18:18,210 --> 00:18:24,059
it's actually the the Keith's element

00:18:21,570 --> 00:18:26,340
there is how good you can simulate the

00:18:24,059 --> 00:18:28,950
world right so for example in the grass

00:18:26,340 --> 00:18:31,020
challenge or a grass task there are no

00:18:28,950 --> 00:18:32,790
existing like very good for the co

00:18:31,020 --> 00:18:34,119
engine for let's say tactile based

00:18:32,790 --> 00:18:37,829
feedback kind of control

00:18:34,119 --> 00:18:41,319
and if without that than any sort of

00:18:37,829 --> 00:18:43,089
grasp across everything even if they

00:18:41,319 --> 00:18:45,789
work in the simulation it would not work

00:18:43,089 --> 00:18:47,229
in the ingre war so like if there's that

00:18:45,789 --> 00:18:47,589
gap then what's the point of the whole

00:18:47,229 --> 00:18:53,009
thing

00:18:47,589 --> 00:18:55,449
oh yes this is one of the problems in

00:18:53,009 --> 00:18:57,699
using simulations there are many others

00:18:55,449 --> 00:19:00,489
okay that we have already identified

00:18:57,699 --> 00:19:03,399
there are some things in real time that

00:19:00,489 --> 00:19:05,469
we can not provide so you cannot test

00:19:03,399 --> 00:19:08,949
any algorithms in real time there are

00:19:05,469 --> 00:19:11,829
some very low level control algorithms

00:19:08,949 --> 00:19:15,039
that we can neither including to our

00:19:11,829 --> 00:19:17,039
benchmarking we are proposing first step

00:19:15,039 --> 00:19:19,719
because there is nothing about

00:19:17,039 --> 00:19:22,509
benchmarking in robotics apart from

00:19:19,719 --> 00:19:26,349
datasets very fixed for very specific

00:19:22,509 --> 00:19:29,139
problems so we are opening the window

00:19:26,349 --> 00:19:31,689
into a new step for benchmarking and

00:19:29,139 --> 00:19:33,519
maybe later when we have that level we

00:19:31,689 --> 00:19:37,979
can attack those kind of problems now we

00:19:33,519 --> 00:19:37,979
we don't know how to do it thank you

00:19:39,059 --> 00:19:43,839
thank you

00:19:40,220 --> 00:19:43,839

YouTube URL: https://www.youtube.com/watch?v=1dQyp1oMyNg


