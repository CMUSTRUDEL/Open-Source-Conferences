Title: ROSCon 2017 Vancouver Day 2  Fundamentals of Local Planning
Publication date: 2021-03-28
Playlist: ROSCon 2017
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2017 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License
Captions: 
	00:00:00,000 --> 00:00:07,290
all right so the central dogma of Ross

00:00:04,799 --> 00:00:10,170
navigation is you have if you start with

00:00:07,290 --> 00:00:12,269
a start location and a goal location and

00:00:10,170 --> 00:00:14,639
then you need to get a global plan that

00:00:12,269 --> 00:00:16,440
goes from point A to point B but that

00:00:14,639 --> 00:00:18,300
just tells you where to go and not how

00:00:16,440 --> 00:00:19,890
to get there and for that you need to

00:00:18,300 --> 00:00:21,449
come up with the actual command

00:00:19,890 --> 00:00:24,330
velocities that are going to drive your

00:00:21,449 --> 00:00:27,150
robot along that path now the first step

00:00:24,330 --> 00:00:28,800
in the process is the global planner and

00:00:27,150 --> 00:00:30,750
that's really just glorified Dijkstra's

00:00:28,800 --> 00:00:32,759
algorithm and so what we're gonna be

00:00:30,750 --> 00:00:35,730
talking about today is the local planner

00:00:32,759 --> 00:00:37,170
that covers the second half here and so

00:00:35,730 --> 00:00:39,079
just general outline we're gonna start

00:00:37,170 --> 00:00:41,600
with some fundamentals in theory of how

00:00:39,079 --> 00:00:44,460
one instance of local planning works

00:00:41,600 --> 00:00:47,280
emphasis on the phone then we're going

00:00:44,460 --> 00:00:48,000
to look at how Ross navigation works

00:00:47,280 --> 00:00:49,739
today

00:00:48,000 --> 00:00:51,000
and then we're gonna take a look at

00:00:49,739 --> 00:00:54,390
where I'd like to see it go in the

00:00:51,000 --> 00:00:58,140
future so the fundamental question of

00:00:54,390 --> 00:01:00,210
local navigation is this what is the

00:00:58,140 --> 00:01:02,100
best command velocity and in order to

00:01:00,210 --> 00:01:04,559
figure out the best velocity you must

00:01:02,100 --> 00:01:07,530
answer these questions three what

00:01:04,559 --> 00:01:10,500
command velocities are available what do

00:01:07,530 --> 00:01:12,360
the commands do and how do we define the

00:01:10,500 --> 00:01:13,500
best command so let's start with the

00:01:12,360 --> 00:01:17,130
first question of what command

00:01:13,500 --> 00:01:19,040
velocities are available so we're

00:01:17,130 --> 00:01:21,570
talking today specifically about

00:01:19,040 --> 00:01:25,619
navigation in two-and-a-half dimensions

00:01:21,570 --> 00:01:28,770
ie X Y and theta don't always have to

00:01:25,619 --> 00:01:31,409
use Y and a lot of the examples won't so

00:01:28,770 --> 00:01:34,259
you can define all of the possible

00:01:31,409 --> 00:01:36,780
search space for local planning in terms

00:01:34,259 --> 00:01:39,780
of your different velocity dimensions

00:01:36,780 --> 00:01:42,150
here you see that we define a maximum X

00:01:39,780 --> 00:01:46,290
velocity and a maximum velocity in the

00:01:42,150 --> 00:01:48,689
in theta as well and but this just

00:01:46,290 --> 00:01:50,430
defines the velocities that are

00:01:48,689 --> 00:01:52,710
available at some point and not

00:01:50,430 --> 00:01:54,899
necessarily at the present moment for

00:01:52,710 --> 00:01:57,210
the robot in fact one of the classic

00:01:54,899 --> 00:01:59,009
methods of local navigation has a

00:01:57,210 --> 00:02:01,799
problem that is related to this which is

00:01:59,009 --> 00:02:04,619
vector field so this came out in 1986

00:02:01,799 --> 00:02:07,320
and the idea is you have an attractive

00:02:04,619 --> 00:02:09,000
force that moves your robot towards the

00:02:07,320 --> 00:02:11,190
goal you have and then you have

00:02:09,000 --> 00:02:12,760
repulsive forces that move your the

00:02:11,190 --> 00:02:14,950
robot away from the

00:02:12,760 --> 00:02:17,709
any obstacles and then you add them

00:02:14,950 --> 00:02:19,780
together you get a combined force you

00:02:17,709 --> 00:02:21,580
translate that to a command velocity and

00:02:19,780 --> 00:02:25,540
you drive along that it's one of the

00:02:21,580 --> 00:02:28,470
classic methods of robot navigation but

00:02:25,540 --> 00:02:30,489
if you're very far away from the goal or

00:02:28,470 --> 00:02:34,420
very close to that one of the obstacles

00:02:30,489 --> 00:02:37,180
the force vector can be immeasurably

00:02:34,420 --> 00:02:39,780
high and so as a result there are

00:02:37,180 --> 00:02:42,760
commands that you really can't perform

00:02:39,780 --> 00:02:46,330
given the acceleration limits and so

00:02:42,760 --> 00:02:48,550
that leads us to directly to the gwa

00:02:46,330 --> 00:02:51,670
algorithm the dynamic window algorithm

00:02:48,550 --> 00:02:53,140
this came out of a paper in 1997 and the

00:02:51,670 --> 00:02:55,510
idea here is we're not going to look at

00:02:53,140 --> 00:02:58,840
the entire search space we're just going

00:02:55,510 --> 00:03:01,060
to look at a small dynamic window around

00:02:58,840 --> 00:03:04,480
what the current velocity of the robot

00:03:01,060 --> 00:03:07,090
is and the size of this window is

00:03:04,480 --> 00:03:10,299
dependent on both the acceleration of

00:03:07,090 --> 00:03:11,560
your robot and some time constant and

00:03:10,299 --> 00:03:13,569
that time constant becomes very

00:03:11,560 --> 00:03:15,940
important in all parts of the local

00:03:13,569 --> 00:03:19,239
planning incidentally this work was done

00:03:15,940 --> 00:03:21,670
on the rwi b21 robot which is the first

00:03:19,239 --> 00:03:26,890
robot that I ever wrote Ross code for

00:03:21,670 --> 00:03:28,060
and ultimately released so when we're

00:03:26,890 --> 00:03:30,010
actually doing the local planning we

00:03:28,060 --> 00:03:31,780
have our search space we have our

00:03:30,010 --> 00:03:34,570
current velocity within that search

00:03:31,780 --> 00:03:38,290
space and we can find the dynamic window

00:03:34,570 --> 00:03:41,170
around that velocity respecting the max

00:03:38,290 --> 00:03:43,239
of the global maximum velocity and

00:03:41,170 --> 00:03:46,239
what's currently done in the Ross

00:03:43,239 --> 00:03:47,620
navigation stack is a sampling of that

00:03:46,239 --> 00:03:49,900
space to figure out what command

00:03:47,620 --> 00:03:51,640
velocities we're going to use and so we

00:03:49,900 --> 00:03:54,310
just pick a number of velocities in X

00:03:51,640 --> 00:03:55,510
and theta and get all combinations and

00:03:54,310 --> 00:03:58,780
those are the velocities that we're

00:03:55,510 --> 00:04:01,209
going to look at the next question is

00:03:58,780 --> 00:04:04,150
what would these commands do and this is

00:04:01,209 --> 00:04:06,609
more or less straightforward for word

00:04:04,150 --> 00:04:09,010
kinematic projection so we start off

00:04:06,609 --> 00:04:12,250
with what the current pose of the robot

00:04:09,010 --> 00:04:14,109
is we have its current velocity and then

00:04:12,250 --> 00:04:15,819
we have the command velocity that we

00:04:14,109 --> 00:04:17,530
want to send the robot at and the

00:04:15,819 --> 00:04:19,419
question is where would this robot go we

00:04:17,530 --> 00:04:21,789
can just project that forward out in

00:04:19,419 --> 00:04:25,060
time and there are two important

00:04:21,789 --> 00:04:26,350
questions here in terms of parameters

00:04:25,060 --> 00:04:28,030
which is one

00:04:26,350 --> 00:04:29,740
far into the future are we going to

00:04:28,030 --> 00:04:32,170
project this this is the sim time

00:04:29,740 --> 00:04:33,880
variable and then we also have various

00:04:32,170 --> 00:04:36,040
discretization parameters that define

00:04:33,880 --> 00:04:38,230
how many poses we're going to put in

00:04:36,040 --> 00:04:40,780
between the first and last pose here's

00:04:38,230 --> 00:04:42,790
just the one and so that that step is

00:04:40,780 --> 00:04:44,830
more or less straightforward but if you

00:04:42,790 --> 00:04:48,430
have a more complex robot it can be as

00:04:44,830 --> 00:04:50,860
complex as you need it to be and so the

00:04:48,430 --> 00:04:53,710
real key question is how do we define

00:04:50,860 --> 00:04:57,550
what the best command velocity is at any

00:04:53,710 --> 00:05:00,310
particular time and so if we have the

00:04:57,550 --> 00:05:02,230
robot here in the one pose and then we

00:05:00,310 --> 00:05:04,570
have three options of the last pose of

00:05:02,230 --> 00:05:08,020
the trajectories for where it could go

00:05:04,570 --> 00:05:11,140
and which one we consider bests it's a

00:05:08,020 --> 00:05:13,120
little subjective but ultimately we have

00:05:11,140 --> 00:05:14,530
the general guideline of we want it to

00:05:13,120 --> 00:05:18,700
move towards the goal and don't hit

00:05:14,530 --> 00:05:20,920
obstacles and so in order for the

00:05:18,700 --> 00:05:23,830
algorithm to actually work we need to

00:05:20,920 --> 00:05:26,800
defined some numbers for how good each

00:05:23,830 --> 00:05:29,140
of these is and we have the guidelines

00:05:26,800 --> 00:05:32,110
that we say negative scores are invalid

00:05:29,140 --> 00:05:33,400
so C hits a wall we don't want to even

00:05:32,110 --> 00:05:35,410
consider that one we give it a score

00:05:33,400 --> 00:05:36,880
negative one and then for all the other

00:05:35,410 --> 00:05:39,790
ones we say the lower the score the

00:05:36,880 --> 00:05:41,380
better and so a here move sort of the

00:05:39,790 --> 00:05:42,670
old doesn't hit anything that's going to

00:05:41,380 --> 00:05:45,670
be our best command velocity at that

00:05:42,670 --> 00:05:47,080
time but there are a number of different

00:05:45,670 --> 00:05:48,850
functions that we have that produce

00:05:47,080 --> 00:05:52,090
scores and we're going to call these

00:05:48,850 --> 00:05:54,130
critics so critics produce scores for

00:05:52,090 --> 00:05:56,650
each of the trajectories and the core of

00:05:54,130 --> 00:05:59,410
the algorithm is just to take a weighted

00:05:56,650 --> 00:06:01,270
sum of all the scores unless of course

00:05:59,410 --> 00:06:02,860
one of those scores happens to be

00:06:01,270 --> 00:06:06,610
completely invalid then we reject the

00:06:02,860 --> 00:06:08,470
whole thing and so taking a look at some

00:06:06,610 --> 00:06:11,710
of the critics that are available with

00:06:08,470 --> 00:06:14,200
one of the key ones is the obstacle

00:06:11,710 --> 00:06:16,960
critic which looks at the cost on the

00:06:14,200 --> 00:06:20,140
cost map and so if any of the poses in

00:06:16,960 --> 00:06:22,390
the trajectory that you generated are in

00:06:20,140 --> 00:06:25,360
collision according to the cost map then

00:06:22,390 --> 00:06:29,890
we reject them out of hand otherwise we

00:06:25,360 --> 00:06:31,630
just use the cost from the cost map then

00:06:29,890 --> 00:06:33,820
we have the scoring function where we

00:06:31,630 --> 00:06:36,250
look at the distance to the global path

00:06:33,820 --> 00:06:39,280
and that prefers that we stay close to

00:06:36,250 --> 00:06:40,180
the what the global planner gave us we

00:06:39,280 --> 00:06:42,970
also have the disk

00:06:40,180 --> 00:06:44,410
since to the goal and that will give

00:06:42,970 --> 00:06:47,880
better scores to trajectories that

00:06:44,410 --> 00:06:51,130
actually make progress towards the goal

00:06:47,880 --> 00:06:52,930
we also have want to look at the

00:06:51,130 --> 00:06:55,060
orientation especially in robots that

00:06:52,930 --> 00:06:58,060
are holonomic like the pr2 that can turn

00:06:55,060 --> 00:06:59,620
in any direction and so we look at the

00:06:58,060 --> 00:07:01,960
orientation to the goal which will

00:06:59,620 --> 00:07:04,600
differentiate between this pose here and

00:07:01,960 --> 00:07:06,520
this one here both of them have the same

00:07:04,600 --> 00:07:08,380
distances the same cost in the cost

00:07:06,520 --> 00:07:10,570
about but one of them is actually facing

00:07:08,380 --> 00:07:13,509
the goal and therefore in some metrics

00:07:10,570 --> 00:07:16,599
better similarly we would look at the

00:07:13,509 --> 00:07:19,000
orientation to the global path which

00:07:16,599 --> 00:07:23,650
would differentiate this pose and this

00:07:19,000 --> 00:07:26,110
pose so these are all the core pieces of

00:07:23,650 --> 00:07:28,060
what's going on in Ross navigation local

00:07:26,110 --> 00:07:29,590
planning today we have four what

00:07:28,060 --> 00:07:31,150
commands velocities are available we

00:07:29,590 --> 00:07:33,430
have the sampling search that we do

00:07:31,150 --> 00:07:35,590
within the robots dynamic window for

00:07:33,430 --> 00:07:39,190
what the commands would do we have our

00:07:35,590 --> 00:07:40,389
forward kinematic model and then for

00:07:39,190 --> 00:07:42,669
what the best command is we have a

00:07:40,389 --> 00:07:45,159
number of different heuristic trajectory

00:07:42,669 --> 00:07:47,470
critics that we add together in the end

00:07:45,159 --> 00:07:51,039
but what I presented here is one

00:07:47,470 --> 00:07:52,870
specific way to do local planning and if

00:07:51,039 --> 00:07:54,639
you want to do something different it's

00:07:52,870 --> 00:07:56,440
a little difficult so now let's take a

00:07:54,639 --> 00:07:57,449
look at what Ross navigation is doing

00:07:56,440 --> 00:08:01,479
today

00:07:57,449 --> 00:08:03,550
so theory versus practice in theory ross

00:08:01,479 --> 00:08:05,710
navigation is a universal black box that

00:08:03,550 --> 00:08:08,199
runs on hundreds of robots now this is

00:08:05,710 --> 00:08:10,539
mostly true and what I'm about to say is

00:08:08,199 --> 00:08:12,220
not in any way to take away from all the

00:08:10,539 --> 00:08:14,590
work that has been done over the

00:08:12,220 --> 00:08:16,620
navigation stack in the years and no

00:08:14,590 --> 00:08:19,630
disrespect to the people who wrote it

00:08:16,620 --> 00:08:21,849
but in practice Ross navigation was

00:08:19,630 --> 00:08:23,470
built nearly nine years ago to control

00:08:21,849 --> 00:08:25,210
the pr2 and the fact that it works as

00:08:23,470 --> 00:08:27,759
well as it does on all the other robots

00:08:25,210 --> 00:08:30,490
is almost incidental that's a little

00:08:27,759 --> 00:08:32,979
harsh but what's important to keep in

00:08:30,490 --> 00:08:35,589
mind is when it was written the pr2

00:08:32,979 --> 00:08:37,570
looked like this and so this was a while

00:08:35,589 --> 00:08:40,570
ago and the packages that were being

00:08:37,570 --> 00:08:42,430
used are still being used today so we

00:08:40,570 --> 00:08:45,070
have the base local planner that was

00:08:42,430 --> 00:08:48,760
written in 2009 for Willow garages

00:08:45,070 --> 00:08:50,890
initial navigation milestones it's so

00:08:48,760 --> 00:08:53,260
long ago that it doesn't have a turtle

00:08:50,890 --> 00:08:53,769
name associated with it and then we have

00:08:53,260 --> 00:08:56,679
the

00:08:53,769 --> 00:08:59,259
you a local planner which was in 2011 /

00:08:56,679 --> 00:09:01,959
2012 and that came out officially in the

00:08:59,259 --> 00:09:04,300
Ross navigation stack with diet bag and

00:09:01,959 --> 00:09:09,189
what I talked about in the first part of

00:09:04,300 --> 00:09:11,559
this talk is exactly what the DW a local

00:09:09,189 --> 00:09:15,309
planner does but it's lacking in a

00:09:11,559 --> 00:09:17,110
couple of particular ways first if you

00:09:15,309 --> 00:09:19,509
look at the inputs that I talked about

00:09:17,110 --> 00:09:23,199
to the system we have the robots current

00:09:19,509 --> 00:09:26,319
location its current velocity the global

00:09:23,199 --> 00:09:28,869
plan the goal location and the local

00:09:26,319 --> 00:09:32,549
cost map and if you take a look at the

00:09:28,869 --> 00:09:34,720
navcore interfaces for the local planner

00:09:32,549 --> 00:09:38,769
some of the information is missing

00:09:34,720 --> 00:09:40,989
so the current robot location is sort of

00:09:38,769 --> 00:09:43,989
implicitly in there in the transform

00:09:40,989 --> 00:09:45,100
listener but in order to change that you

00:09:43,989 --> 00:09:47,410
actually you know have to broadcast

00:09:45,100 --> 00:09:50,980
transforms and that makes testing very

00:09:47,410 --> 00:09:53,649
difficult and similarly the current

00:09:50,980 --> 00:09:56,589
robot velocity is not in here at all and

00:09:53,649 --> 00:09:58,869
so usually it's handled by subscribing

00:09:56,589 --> 00:10:01,360
to odometry on underneath the surface

00:09:58,869 --> 00:10:04,329
not through this interface and so that

00:10:01,360 --> 00:10:06,189
makes local planners very difficult to

00:10:04,329 --> 00:10:09,939
test and also very difficult to

00:10:06,189 --> 00:10:12,490
customize and so there's one important

00:10:09,939 --> 00:10:14,679
number here so looking at the Ross

00:10:12,490 --> 00:10:15,999
navigation github page the most

00:10:14,679 --> 00:10:19,149
important number is on the top right

00:10:15,999 --> 00:10:21,569
there which is there's 519 forks of Ross

00:10:19,149 --> 00:10:23,470
navigation and actually that was true

00:10:21,569 --> 00:10:26,079
earlier this week when I made this

00:10:23,470 --> 00:10:27,670
screenshots it's up to 521 when I

00:10:26,079 --> 00:10:32,199
checked at lunch might be even higher

00:10:27,670 --> 00:10:34,269
now and what that says to me is that

00:10:32,199 --> 00:10:36,160
there's a lot of people that Ross

00:10:34,269 --> 00:10:37,779
navigation is serving incredibly well

00:10:36,160 --> 00:10:40,179
there's lots of people using Ross nav

00:10:37,779 --> 00:10:42,730
that's great but there's also a lot of

00:10:40,179 --> 00:10:44,379
at least 519 people who are saying Ross

00:10:42,730 --> 00:10:46,419
navigation is working for me but I need

00:10:44,379 --> 00:10:50,019
it to do something slightly different

00:10:46,419 --> 00:10:52,239
and the code that it rests on there are

00:10:50,019 --> 00:10:54,549
a number of different problems with it

00:10:52,239 --> 00:10:58,059
and what I would like to see in Ross

00:10:54,549 --> 00:11:01,540
navigation is code that is these four

00:10:58,059 --> 00:11:05,169
things number one testable customizable

00:11:01,540 --> 00:11:07,389
backwards compatible and clean and so

00:11:05,169 --> 00:11:07,930
what do I mean by clean the guiding

00:11:07,389 --> 00:11:11,140
principle

00:11:07,930 --> 00:11:12,730
I use when writing these interfaces is

00:11:11,140 --> 00:11:15,730
that the structure of the classes in the

00:11:12,730 --> 00:11:18,070
code should match the structure of the

00:11:15,730 --> 00:11:21,130
conceptual pieces of the algorithm which

00:11:18,070 --> 00:11:23,350
should match the Ross interfaces in my

00:11:21,130 --> 00:11:26,350
practice that's what I found to be the

00:11:23,350 --> 00:11:28,120
easiest to use and so that leads us to

00:11:26,350 --> 00:11:30,070
where Ross navigation is going in the

00:11:28,120 --> 00:11:31,660
future I think there's a lot of

00:11:30,070 --> 00:11:33,640
interesting work going on especially

00:11:31,660 --> 00:11:35,709
what Sebastian and Jorge we're talking

00:11:33,640 --> 00:11:37,690
about earlier but I've been thinking

00:11:35,709 --> 00:11:40,620
about the next generation of a lot of

00:11:37,690 --> 00:11:43,029
different things over this summer and so

00:11:40,620 --> 00:11:46,450
what we're announcing right now is the

00:11:43,029 --> 00:11:48,130
robot navigation stack a spiritual

00:11:46,450 --> 00:11:51,070
successor to the previous nav stack that

00:11:48,130 --> 00:11:53,500
has some additional benefits and so

00:11:51,070 --> 00:11:56,529
chief among that is a new definition for

00:11:53,500 --> 00:11:58,839
local planners and so here is the

00:11:56,529 --> 00:12:01,770
updated navcore to interface for local

00:11:58,839 --> 00:12:05,110
planners a number of key differences

00:12:01,770 --> 00:12:08,440
first it uses a new package called nav

00:12:05,110 --> 00:12:10,000
2d messages and those use just the

00:12:08,440 --> 00:12:12,400
two-and-a-half dimensions that I talked

00:12:10,000 --> 00:12:14,500
about and those are used up and down the

00:12:12,400 --> 00:12:17,320
code to make debugging as easy as

00:12:14,500 --> 00:12:19,360
possible second we have a more explicit

00:12:17,320 --> 00:12:23,260
version here of the compute velocity

00:12:19,360 --> 00:12:25,810
commands function which takes the pose

00:12:23,260 --> 00:12:27,880
and velocity in as parameters and that

00:12:25,810 --> 00:12:29,260
makes it much easier to test all the

00:12:27,880 --> 00:12:32,980
different use cases that you might come

00:12:29,260 --> 00:12:35,020
across while looking at your planner we

00:12:32,980 --> 00:12:37,360
have a more explicit version of the is

00:12:35,020 --> 00:12:38,980
goal reached function and then finally

00:12:37,360 --> 00:12:41,500
we're doing error handling with

00:12:38,980 --> 00:12:45,040
exceptions as opposed to just returning

00:12:41,500 --> 00:12:45,839
a context less bool succeeded or didn't

00:12:45,040 --> 00:12:48,520
succeed

00:12:45,839 --> 00:12:50,529
of course what is an interface without

00:12:48,520 --> 00:12:53,350
an implementation so in the old

00:12:50,529 --> 00:12:56,589
navigation stack we had the DW a local

00:12:53,350 --> 00:12:57,370
planner what we have now is the dwb

00:12:56,589 --> 00:12:59,140
local planner

00:12:57,370 --> 00:13:00,459
it doesn't actually stand for anything

00:12:59,140 --> 00:13:02,980
and I'm currently taking suggestions

00:13:00,459 --> 00:13:06,190
what DWP should actually stand for and

00:13:02,980 --> 00:13:08,649
so it has three major components all of

00:13:06,190 --> 00:13:10,390
these are their own modules we have the

00:13:08,649 --> 00:13:12,010
velocity iterator and trajectory

00:13:10,390 --> 00:13:14,200
generator we have all the different

00:13:12,010 --> 00:13:17,770
trajectory critics and a separate module

00:13:14,200 --> 00:13:20,440
for the goal checker and so in that

00:13:17,770 --> 00:13:21,699
first bit we have the trajectory

00:13:20,440 --> 00:13:24,040
generation so we have

00:13:21,699 --> 00:13:25,540
standard iterator interface for

00:13:24,040 --> 00:13:27,009
iterating through the different

00:13:25,540 --> 00:13:29,799
velocities and you feed in the current

00:13:27,009 --> 00:13:31,509
velocity there we have the function for

00:13:29,799 --> 00:13:33,489
generating the trajectory that takes the

00:13:31,509 --> 00:13:36,609
start post start velocity and command

00:13:33,489 --> 00:13:39,609
velocity and then we have all the

00:13:36,609 --> 00:13:42,459
trajectory critics people who are things

00:13:39,609 --> 00:13:45,549
that will critique the trajectories we

00:13:42,459 --> 00:13:48,369
give it the pose velocity goal and

00:13:45,549 --> 00:13:51,339
global plan initially then it can do

00:13:48,369 --> 00:13:53,410
initial computation so that when it we

00:13:51,339 --> 00:13:54,579
call score trajectory number of

00:13:53,410 --> 00:13:56,889
different times with all the different

00:13:54,579 --> 00:14:00,480
trajectories we're able to do that in a

00:13:56,889 --> 00:14:04,269
computationally efficient way and so

00:14:00,480 --> 00:14:06,160
this whole reorganization will give a

00:14:04,269 --> 00:14:10,119
hopefully more logical and easier to

00:14:06,160 --> 00:14:11,319
test platform but the key feature here

00:14:10,119 --> 00:14:13,059
is customizability

00:14:11,319 --> 00:14:14,529
and so as the saying goes when all you

00:14:13,059 --> 00:14:16,989
have is a hammer everything looks like a

00:14:14,529 --> 00:14:21,100
nail and the hammer that I use liberally

00:14:16,989 --> 00:14:23,259
is plug in link and so much like we had

00:14:21,100 --> 00:14:25,389
with cost map layers that allowed you to

00:14:23,259 --> 00:14:28,600
customize the behavior of the cost map

00:14:25,389 --> 00:14:31,329
all of the major modules within dwb

00:14:28,600 --> 00:14:33,609
local planner are plugins and so you can

00:14:31,329 --> 00:14:36,939
customize them there but in addition to

00:14:33,609 --> 00:14:39,459
the plug-in interfaces we also have Ross

00:14:36,939 --> 00:14:41,529
interfaces for each of these so the

00:14:39,459 --> 00:14:43,629
generate trajectory also exists as a

00:14:41,529 --> 00:14:45,489
service that you can call where you give

00:14:43,629 --> 00:14:47,499
it a start PO start velocity in command

00:14:45,489 --> 00:14:50,829
velocity and the result is a trajectory

00:14:47,499 --> 00:14:53,139
series of poses similarly while you're

00:14:50,829 --> 00:14:56,350
planning you can also generate this

00:14:53,139 --> 00:14:58,389
local plan evaluation message and that

00:14:56,350 --> 00:15:00,999
has all the trajectories that were

00:14:58,389 --> 00:15:03,910
generated the poses that they go through

00:15:00,999 --> 00:15:05,859
the and the scores from each of the

00:15:03,910 --> 00:15:07,299
critics for each of the trajectories and

00:15:05,859 --> 00:15:09,609
that way when you're sitting there

00:15:07,299 --> 00:15:11,559
afterwards and it's like why did my

00:15:09,609 --> 00:15:16,689
robot do this you can actually go back

00:15:11,559 --> 00:15:18,879
check the logs and see and I know that

00:15:16,689 --> 00:15:21,249
especially within this Ross community in

00:15:18,879 --> 00:15:22,839
this year of 2017 there's a lot of

00:15:21,249 --> 00:15:25,389
trepidation about switching from one

00:15:22,839 --> 00:15:27,699
version to a brand-new version two of

00:15:25,389 --> 00:15:31,089
something I understand that concern and

00:15:27,699 --> 00:15:33,970
that's why dwb is also fully backwards

00:15:31,089 --> 00:15:34,910
compatible so and it's that in two

00:15:33,970 --> 00:15:37,730
different ways

00:15:34,910 --> 00:15:41,510
is the interface compatibility so you

00:15:37,730 --> 00:15:45,410
can use the dwb local planner in navcore

00:15:41,510 --> 00:15:47,780
one interfaces just by using a plugin

00:15:45,410 --> 00:15:50,630
within a plugin so we have the local

00:15:47,780 --> 00:15:52,700
planner adapter for that and then also

00:15:50,630 --> 00:15:54,410
all the parameters are compatible as

00:15:52,700 --> 00:15:56,450
well so if you don't specify what

00:15:54,410 --> 00:15:58,010
trajectory critics or other plugins

00:15:56,450 --> 00:16:00,050
you're going to use it will

00:15:58,010 --> 00:16:01,940
automatically read your configuration

00:16:00,050 --> 00:16:07,400
and load the plugins that will replicate

00:16:01,940 --> 00:16:09,050
what DW a planner would do and so all

00:16:07,400 --> 00:16:11,510
this culminates in the ability to

00:16:09,050 --> 00:16:13,850
control your local planner in new and

00:16:11,510 --> 00:16:17,060
exciting ways and so here's two examples

00:16:13,850 --> 00:16:19,670
using our the robot that we have at

00:16:17,060 --> 00:16:21,950
locus robotics so here is an example of

00:16:19,670 --> 00:16:24,140
precise plan following and this is just

00:16:21,950 --> 00:16:26,960
a trajectory critic that I whipped up

00:16:24,140 --> 00:16:29,090
last week where it's going to follow the

00:16:26,960 --> 00:16:32,030
waypoints that are given to it in the

00:16:29,090 --> 00:16:33,890
global plan exactly of course you can

00:16:32,030 --> 00:16:35,660
also go the complete opposite way and

00:16:33,890 --> 00:16:38,780
have something that doesn't follow the

00:16:35,660 --> 00:16:42,070
global PLAs go global path closely at

00:16:38,780 --> 00:16:45,410
all and so here is drunken path planning

00:16:42,070 --> 00:16:50,480
that just travels along the global path

00:16:45,410 --> 00:16:53,030
in a sine curve please don't try for

00:16:50,480 --> 00:16:55,730
robots drunk that's my important

00:16:53,030 --> 00:16:58,880
announcement so all this work was done

00:16:55,730 --> 00:17:00,710
while at locus robotics I had started

00:16:58,880 --> 00:17:02,060
during my PhD thesis but really got the

00:17:00,710 --> 00:17:04,400
chance to work on it there so if you're

00:17:02,060 --> 00:17:08,000
interested in working on cutting of nav

00:17:04,400 --> 00:17:10,340
research while also having the research

00:17:08,000 --> 00:17:12,650
deployed with actual customers our

00:17:10,340 --> 00:17:16,329
career page is right there and github

00:17:12,650 --> 00:17:23,010
repos there thank you very much

00:17:16,329 --> 00:17:24,430
[Applause]

00:17:23,010 --> 00:17:26,200
thanks David

00:17:24,430 --> 00:17:28,960
well while people make their way to the

00:17:26,200 --> 00:17:32,290
microphones I was wondering you spoke

00:17:28,960 --> 00:17:34,270
about the navcore interfaces for the

00:17:32,290 --> 00:17:36,640
local planners and do you have any

00:17:34,270 --> 00:17:39,820
comment on global planner interfaces yes

00:17:36,640 --> 00:17:42,640
so I have fewer problems and bones to

00:17:39,820 --> 00:17:45,040
pick with the global planner but there

00:17:42,640 --> 00:17:47,140
are new updated interfaces that have

00:17:45,040 --> 00:17:51,640
some of the same benefits of how things

00:17:47,140 --> 00:17:53,170
have changed and in potential future

00:17:51,640 --> 00:17:55,680
work that we're looking to put together

00:17:53,170 --> 00:17:57,730
we would tackle that as well as

00:17:55,680 --> 00:18:05,740
different ways to deploy recovery

00:17:57,730 --> 00:18:07,690
behaviors Thank You Bryan yeah so I

00:18:05,740 --> 00:18:09,400
really like the idea of publishing the

00:18:07,690 --> 00:18:11,440
output from the critics I was actually

00:18:09,400 --> 00:18:12,850
debugging a critic like a couple of

00:18:11,440 --> 00:18:14,080
weeks ago and I had to go in there and

00:18:12,850 --> 00:18:15,250
instrument it and have it print out

00:18:14,080 --> 00:18:18,460
everything a computer internally that

00:18:15,250 --> 00:18:20,680
sucked have you deployed this yet on

00:18:18,460 --> 00:18:22,990
your robots or when or if not when do

00:18:20,680 --> 00:18:25,060
you imagine this new system rolling out

00:18:22,990 --> 00:18:27,220
into your own production so we don't

00:18:25,060 --> 00:18:30,520
have it in the field just yet but we do

00:18:27,220 --> 00:18:33,490
have it on our simulated robots and so

00:18:30,520 --> 00:18:35,710
within I'm not gonna project any

00:18:33,490 --> 00:18:39,460
timelines but we should have it on our

00:18:35,710 --> 00:18:41,770
production bots soon there are a number

00:18:39,460 --> 00:18:45,640
of different things that we specifically

00:18:41,770 --> 00:18:47,350
want in our warehouse environments that

00:18:45,640 --> 00:18:50,500
we can only do with this sort of

00:18:47,350 --> 00:18:51,990
specialized local planner this

00:18:50,500 --> 00:18:55,900
microphone thinks hey there

00:18:51,990 --> 00:18:57,820
so one thing you talked about was this

00:18:55,900 --> 00:19:00,250
forward rollout for the dynamic window

00:18:57,820 --> 00:19:02,200
approach solutions and basically you

00:19:00,250 --> 00:19:03,850
said yeah you know it's really easy to

00:19:02,200 --> 00:19:06,610
do this forward kinematic thing and then

00:19:03,850 --> 00:19:08,470
you couldn't do lots of rollouts in some

00:19:06,610 --> 00:19:10,770
cases I mean the most trivial case would

00:19:08,470 --> 00:19:13,690
be the you have some slip and the wheels

00:19:10,770 --> 00:19:16,210
but in some cases this is actually not

00:19:13,690 --> 00:19:19,000
too easy and that could be improved a

00:19:16,210 --> 00:19:22,120
lot by updating your parameters on the

00:19:19,000 --> 00:19:24,790
fly or by improving custom forward

00:19:22,120 --> 00:19:26,110
kinematics plugins it's not actually

00:19:24,790 --> 00:19:27,400
possible with a framework at the moment

00:19:26,110 --> 00:19:29,950
or did you consider that or is that

00:19:27,400 --> 00:19:30,580
otoscope entirely so with the DW a local

00:19:29,950 --> 00:19:35,980
planner

00:19:30,580 --> 00:19:38,140
you can only assume perfect forward

00:19:35,980 --> 00:19:42,070
kinematics that it's going to do what

00:19:38,140 --> 00:19:45,240
you tell it to do with I don't have a

00:19:42,070 --> 00:19:47,500
solution for how to actually handle

00:19:45,240 --> 00:19:49,000
slippage in the wheels I know it's

00:19:47,500 --> 00:19:51,940
something that we as a team are working

00:19:49,000 --> 00:19:54,450
on being able to integrate an updated

00:19:51,940 --> 00:19:58,090
kinematic model into the local planner

00:19:54,450 --> 00:19:59,500
so by making that section a plug in

00:19:58,090 --> 00:20:00,640
hopefully you could be able to

00:19:59,500 --> 00:20:02,740
dynamically fix it

00:20:00,640 --> 00:20:05,260
so is there plugin interface for that at

00:20:02,740 --> 00:20:06,909
the moment for the plugin for the

00:20:05,260 --> 00:20:08,679
trajectory generator for the forward

00:20:06,909 --> 00:20:13,330
kinematics of the robot

00:20:08,679 --> 00:20:14,919
yeah thanks got time for just one more

00:20:13,330 --> 00:20:17,559
I'll get the next feature to come up in

00:20:14,919 --> 00:20:20,200
the meantime thanks David do you have

00:20:17,559 --> 00:20:22,059
any plans to support different command

00:20:20,200 --> 00:20:26,169
velocity formats like maybe Ackerman

00:20:22,059 --> 00:20:30,779
style yes that is a question that I'd

00:20:26,169 --> 00:20:30,779
consider right now it does publish twist

00:20:34,889 --> 00:20:52,720
to integrate Ackerman so short answer is

00:20:48,789 --> 00:20:54,460
no it's twist 2d messages but you could

00:20:52,720 --> 00:20:55,840
do it by hacking what the twist 2d

00:20:54,460 --> 00:20:59,710
message meant and just changing the

00:20:55,840 --> 00:21:02,919
kinematics of its or we could end up

00:20:59,710 --> 00:21:07,360
extending it for a acraman messages okay

00:21:02,919 --> 00:21:08,190
thank you all right then let's thank

00:21:07,360 --> 00:21:13,920
David again

00:21:08,190 --> 00:21:13,920

YouTube URL: https://www.youtube.com/watch?v=_uaHF5AkMPk


