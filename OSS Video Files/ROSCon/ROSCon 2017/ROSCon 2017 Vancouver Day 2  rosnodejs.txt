Title: ROSCon 2017 Vancouver Day 2  rosnodejs
Publication date: 2021-03-28
Playlist: ROSCon 2017
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2017 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License
Captions: 
	00:00:01,850 --> 00:00:08,040
all right thanks

00:00:04,620 --> 00:00:11,190
so I'm Chris Smith I'm a software

00:00:08,040 --> 00:00:13,559
engineer at rethink robotics if you

00:00:11,190 --> 00:00:16,800
don't know we think we were started in

00:00:13,559 --> 00:00:19,980
2008 by Rodney Brooks we make the Baxter

00:00:16,800 --> 00:00:21,720
and Sawyer robots they're typically sold

00:00:19,980 --> 00:00:23,310
into manufacturing environments to do

00:00:21,720 --> 00:00:29,189
stuff like the machine tending PCB

00:00:23,310 --> 00:00:31,109
testing inspection and so what am I

00:00:29,189 --> 00:00:33,059
talking about I'm gonna give some very

00:00:31,109 --> 00:00:35,640
heavily abridged histories of Ross and

00:00:33,059 --> 00:00:38,270
rethink talk about kind of why we

00:00:35,640 --> 00:00:40,620
decided to eventually build Ross nodejs

00:00:38,270 --> 00:00:44,730
we're gonna go through some code

00:00:40,620 --> 00:00:47,190
examples just like looking at basically

00:00:44,730 --> 00:00:49,649
how you interact with it do a brief kind

00:00:47,190 --> 00:00:52,050
of comparison with Ross EPP client

00:00:49,649 --> 00:00:53,789
library and then have some demos and

00:00:52,050 --> 00:00:56,300
talk a bit about limits and kind of

00:00:53,789 --> 00:00:59,219
future work that still needs to happen

00:00:56,300 --> 00:01:02,760
so this is a very abridged history of

00:00:59,219 --> 00:01:06,240
Ross obviously it's kind of a web tech

00:01:02,760 --> 00:01:08,430
focused one Ross obviously started a

00:01:06,240 --> 00:01:10,409
little before this but June 2009 was the

00:01:08,430 --> 00:01:13,830
first paper published on Ross as far as

00:01:10,409 --> 00:01:16,470
I'm aware even have the original Ross

00:01:13,830 --> 00:01:19,590
bridge paper from Chad Jenkins group

00:01:16,470 --> 00:01:21,720
that came in a few years later actually

00:01:19,590 --> 00:01:23,280
discovered after we had written Ross

00:01:21,720 --> 00:01:26,060
nodejs that someone at Willo had worked

00:01:23,280 --> 00:01:29,189
on one for a little while a while ago

00:01:26,060 --> 00:01:32,490
and then a bunch of stuff going on on

00:01:29,189 --> 00:01:35,490
robot web tools but not a ton has kind

00:01:32,490 --> 00:01:38,610
of happened in the space that I'm aware

00:01:35,490 --> 00:01:41,310
of if you did something cool and I don't

00:01:38,610 --> 00:01:44,369
have it on here I'm sorry but I'm not

00:01:41,310 --> 00:01:45,990
aware and that rethink I was actually

00:01:44,369 --> 00:01:49,680
very surprised to learn that we pulled

00:01:45,990 --> 00:01:54,750
Ross in in 2010 this was apparently box

00:01:49,680 --> 00:01:59,640
turtle I'm surprised but it's it's still

00:01:54,750 --> 00:02:00,840
with us so when I joined rethink in 2014

00:01:59,640 --> 00:02:03,180
this is roughly what our software I

00:02:00,840 --> 00:02:06,240
looked like it's all running on the

00:02:03,180 --> 00:02:09,330
robots head display all the interactions

00:02:06,240 --> 00:02:11,220
through buttons on the robot this is the

00:02:09,330 --> 00:02:12,770
software that Sawyer the second robot

00:02:11,220 --> 00:02:14,390
launched with

00:02:12,770 --> 00:02:15,800
and kind of a high-level goal of the

00:02:14,390 --> 00:02:17,360
software we build a tree think is to

00:02:15,800 --> 00:02:19,640
make it easier to actually deploy robots

00:02:17,360 --> 00:02:21,020
and manufacturing environments and some

00:02:19,640 --> 00:02:23,950
respects the software did that really

00:02:21,020 --> 00:02:26,420
well but there were also some issues a

00:02:23,950 --> 00:02:27,830
big one for us was just that while it

00:02:26,420 --> 00:02:30,170
was easy for people to get the robot to

00:02:27,830 --> 00:02:31,970
do simple things it was hard if not

00:02:30,170 --> 00:02:34,130
impossible for them to get the robot to

00:02:31,970 --> 00:02:36,560
do more complex things so it's kind of a

00:02:34,130 --> 00:02:38,620
low floor but also this low ceiling and

00:02:36,560 --> 00:02:41,630
there are a bunch of reasons for this

00:02:38,620 --> 00:02:44,270
one of them was our sort of arcane task

00:02:41,630 --> 00:02:46,010
structure which generally made it

00:02:44,270 --> 00:02:48,260
difficult for users to reason about what

00:02:46,010 --> 00:02:50,030
the robot was going to do it's hard for

00:02:48,260 --> 00:02:51,680
them to alter default behaviors and it

00:02:50,030 --> 00:02:53,780
was hard for us as software developers

00:02:51,680 --> 00:02:55,100
to write code that would look at a task

00:02:53,780 --> 00:03:01,610
and try to understand what I was going

00:02:55,100 --> 00:03:03,800
to do so in February actually we

00:03:01,610 --> 00:03:04,850
released entire five if you're aware if

00:03:03,800 --> 00:03:07,940
we think you've probably kind of seen

00:03:04,850 --> 00:03:10,460
this before the UI is running inside of

00:03:07,940 --> 00:03:12,710
Chrome and the task representation is

00:03:10,460 --> 00:03:14,750
now using behavior trees which is common

00:03:12,710 --> 00:03:18,530
in like video game AI and I think a few

00:03:14,750 --> 00:03:21,770
other areas but roughly our tech stack

00:03:18,530 --> 00:03:26,690
is this so there are multiple UIs that

00:03:21,770 --> 00:03:28,340
are all running in Chrome or crumb that

00:03:26,690 --> 00:03:30,920
are connected to this thing that we call

00:03:28,340 --> 00:03:32,570
the engine that's written in nodejs the

00:03:30,920 --> 00:03:35,900
engine is then kind of communicating to

00:03:32,570 --> 00:03:37,340
the robot like doing the controls and IO

00:03:35,900 --> 00:03:40,760
which is then talking to all the

00:03:37,340 --> 00:03:44,000
embedded stuff and the engine is this

00:03:40,760 --> 00:03:45,620
very big thing that kind of does all

00:03:44,000 --> 00:03:47,240
this but the the important piece of it

00:03:45,620 --> 00:03:49,130
for this talk is really that it is a

00:03:47,240 --> 00:03:53,180
software interface to the robot if

00:03:49,130 --> 00:03:55,660
you've used the SDK on Baxter at all the

00:03:53,180 --> 00:03:58,220
engine functionally hooks into the SDK

00:03:55,660 --> 00:04:01,100
and so that communication is over Ross

00:03:58,220 --> 00:04:04,340
we first started doing this we were

00:04:01,100 --> 00:04:06,530
using Ross bridge to connect to the rest

00:04:04,340 --> 00:04:08,570
of the engine or connect the engine to

00:04:06,530 --> 00:04:10,970
the rest of the robot which worked

00:04:08,570 --> 00:04:12,770
really well for a long time it's very

00:04:10,970 --> 00:04:14,120
easy to get going we immediately had

00:04:12,770 --> 00:04:17,210
communication to the front end and the

00:04:14,120 --> 00:04:19,430
back end which was pretty nice if you

00:04:17,210 --> 00:04:22,669
don't know what Ross bridge is Ross

00:04:19,430 --> 00:04:24,830
bridge is basically the server written

00:04:22,669 --> 00:04:26,030
in Python that communicates over Ross on

00:04:24,830 --> 00:04:28,370
one side and then has this

00:04:26,030 --> 00:04:30,770
custom json WebSocket protocol in the

00:04:28,370 --> 00:04:32,480
other I think it was initially just kind

00:04:30,770 --> 00:04:34,430
of intended for browsers but it's been

00:04:32,480 --> 00:04:36,110
extended to other environments so it

00:04:34,430 --> 00:04:38,150
definitely runs in node and I think I've

00:04:36,110 --> 00:04:41,720
seen it used in Java and MATLAB and a

00:04:38,150 --> 00:04:47,210
few other places but we kept running

00:04:41,720 --> 00:04:49,430
into issues I think dealing with large

00:04:47,210 --> 00:04:50,540
amounts of data being sent over Ross

00:04:49,430 --> 00:04:53,600
bridge has been something that they've

00:04:50,540 --> 00:04:55,580
been dealing with for a long time I know

00:04:53,600 --> 00:04:57,230
they've come up with a lot of things to

00:04:55,580 --> 00:05:00,320
try and improve that like beasts on

00:04:57,230 --> 00:05:03,080
encoding the web video server the tf2

00:05:00,320 --> 00:05:05,450
Webre publisher a lot of them work very

00:05:03,080 --> 00:05:06,380
well but we kept kind of having issues

00:05:05,450 --> 00:05:10,880
with the amount of data that we were

00:05:06,380 --> 00:05:12,470
sending through generally we'd run into

00:05:10,880 --> 00:05:13,970
bugs where data would kind of be

00:05:12,470 --> 00:05:15,260
buffering in Ross bridge and then either

00:05:13,970 --> 00:05:17,540
wouldn't get out of the engine to the

00:05:15,260 --> 00:05:19,640
robot so if somebody told the robot to

00:05:17,540 --> 00:05:21,560
stop the robot wouldn't stop or

00:05:19,640 --> 00:05:23,060
vice-versa data coming from the robot

00:05:21,560 --> 00:05:27,470
would be really slow to display to the

00:05:23,060 --> 00:05:29,930
users so sometime in early 2016

00:05:27,470 --> 00:05:33,650
I started think about experimenting with

00:05:29,930 --> 00:05:37,160
writing Ross into node and in February

00:05:33,650 --> 00:05:40,850
of that year I sent this email to Ian

00:05:37,160 --> 00:05:45,050
McMann the head on our SDK which was

00:05:40,850 --> 00:05:46,610
basically Ross running a node everything

00:05:45,050 --> 00:05:47,750
didn't fully work at this point but all

00:05:46,610 --> 00:05:51,740
the communication was there the message

00:05:47,750 --> 00:05:55,760
generation was there before pulling it

00:05:51,740 --> 00:05:57,380
in we wanted to do some testing this

00:05:55,760 --> 00:05:59,810
isn't the testing that I did then I

00:05:57,380 --> 00:06:03,710
couldn't find it so two weeks ago i

00:05:59,810 --> 00:06:06,380
roughly tried to recreate it but we ran

00:06:03,710 --> 00:06:09,350
some tests just trying to publish and

00:06:06,380 --> 00:06:13,360
subscribe sending lots of messages

00:06:09,350 --> 00:06:18,350
across so these are the publishing tests

00:06:13,360 --> 00:06:21,560
we had similar ones for subscribing but

00:06:18,350 --> 00:06:22,760
it generally looked to us and this

00:06:21,560 --> 00:06:24,860
wasn't we were looking at at the time

00:06:22,760 --> 00:06:26,540
but like Ross no jess was performing

00:06:24,860 --> 00:06:28,669
better than Ross Bridge in Ross lib Jess

00:06:26,540 --> 00:06:30,500
which should be expected because we're

00:06:28,669 --> 00:06:32,870
cutting out this middle step where it

00:06:30,500 --> 00:06:36,590
has to deserialize Andrea sterilized all

00:06:32,870 --> 00:06:38,719
the data so in September of 2016 we

00:06:36,590 --> 00:06:40,189
pulled Ross nodejs into an

00:06:38,719 --> 00:06:44,209
and hold Ross bridge and Ross live out

00:06:40,189 --> 00:06:49,099
of our system but what can you do with

00:06:44,209 --> 00:06:52,069
Ross Matias I think nearly everything

00:06:49,099 --> 00:06:53,809
that the raw score can do there's

00:06:52,069 --> 00:06:56,479
publishers subscribers services

00:06:53,809 --> 00:06:58,579
parameters actions name spacing some

00:06:56,479 --> 00:07:02,479
simple time stuff blogging message

00:06:58,579 --> 00:07:04,159
generation node files can also be

00:07:02,479 --> 00:07:08,119
executable so you can Ross run or Ross

00:07:04,159 --> 00:07:16,639
launched them so if we wanted to

00:07:08,119 --> 00:07:20,089
initialize a node it looks very similar

00:07:16,639 --> 00:07:21,800
to other initial agents initializations

00:07:20,089 --> 00:07:23,149
that you've seen you just pass in a

00:07:21,800 --> 00:07:24,349
string for the node name and then

00:07:23,149 --> 00:07:26,989
there's a bunch of options so you can

00:07:24,349 --> 00:07:28,789
make your node anonymous you can

00:07:26,989 --> 00:07:31,089
programmatically overwrite the mess or

00:07:28,789 --> 00:07:33,499
at Ross master URI if you want to

00:07:31,089 --> 00:07:36,379
there's a bunch of other things you can

00:07:33,499 --> 00:07:38,779
then just shut down the node you can

00:07:36,379 --> 00:07:42,979
hook into events for when the node is

00:07:38,779 --> 00:07:46,569
told to shut down we have node handles

00:07:42,979 --> 00:07:49,159
mostly because I missed them in Ross PI

00:07:46,569 --> 00:07:51,379
note handles kind of generally Broker

00:07:49,159 --> 00:07:53,449
any attempt to do topic service or

00:07:51,379 --> 00:07:56,869
parameter interaction you can give it a

00:07:53,449 --> 00:07:58,699
name space too which is nice so you're

00:07:56,869 --> 00:08:01,129
gonna subscribe to like 20 topics and

00:07:58,699 --> 00:08:02,269
they're all deeply nested in some

00:08:01,129 --> 00:08:03,619
namespace you can just give your node

00:08:02,269 --> 00:08:06,949
handle a namespace and not deal with

00:08:03,619 --> 00:08:09,349
copying that over and over again so if

00:08:06,949 --> 00:08:11,899
you wanted to make a publisher you just

00:08:09,349 --> 00:08:13,789
do it through the node handle you pass

00:08:11,899 --> 00:08:16,610
in a topic which is a string a type

00:08:13,789 --> 00:08:17,779
which is either a string or an object

00:08:16,610 --> 00:08:19,669
and then there's a bunch of options to

00:08:17,779 --> 00:08:24,860
set the queue size and latching and

00:08:19,669 --> 00:08:28,219
stuff like that so if you're gonna make

00:08:24,860 --> 00:08:31,099
a publisher you just set the topic the

00:08:28,219 --> 00:08:33,009
type can be a string which just says

00:08:31,099 --> 00:08:37,129
standard messages last string or if you

00:08:33,009 --> 00:08:38,809
want to instead you can actually pull in

00:08:37,129 --> 00:08:42,050
the message that you're trying to use

00:08:38,809 --> 00:08:43,250
and just pass that object in passing

00:08:42,050 --> 00:08:46,069
overrides when you're actually

00:08:43,250 --> 00:08:49,009
publishing you can give us just a raw

00:08:46,069 --> 00:08:50,449
JavaScript object or you can actually

00:08:49,009 --> 00:08:51,410
create a string message and publish that

00:08:50,449 --> 00:08:54,610
instead

00:08:51,410 --> 00:08:57,620
and then you can shut down each of them

00:08:54,610 --> 00:09:01,579
subscribers are fairly similar except

00:08:57,620 --> 00:09:05,420
they have a callback so here we just

00:09:01,579 --> 00:09:07,970
made a callback function and then topic

00:09:05,420 --> 00:09:10,370
type callback kind of the same thing

00:09:07,970 --> 00:09:13,490
except we're again using the the object

00:09:10,370 --> 00:09:16,850
just pacify the type again you can

00:09:13,490 --> 00:09:18,069
specify options and then what we're

00:09:16,850 --> 00:09:20,569
actually doing out of the hood when you

00:09:18,069 --> 00:09:22,310
add a callback here is we're just

00:09:20,569 --> 00:09:25,069
hooking it into this message event so if

00:09:22,310 --> 00:09:26,420
you don't give us one when you actually

00:09:25,069 --> 00:09:28,100
create a subscriber you can just add it

00:09:26,420 --> 00:09:29,870
whenever you want to and remove it as

00:09:28,100 --> 00:09:34,100
you need and then you can shut them all

00:09:29,870 --> 00:09:38,449
down services which you can advertise

00:09:34,100 --> 00:09:39,560
and make clients too and so your

00:09:38,449 --> 00:09:40,639
callback function for this looks a

00:09:39,560 --> 00:09:42,889
little bit different than the subscriber

00:09:40,639 --> 00:09:46,100
it has a request object and response

00:09:42,889 --> 00:09:47,839
object which we filled in with the data

00:09:46,100 --> 00:09:52,569
that you need and the request and then

00:09:47,839 --> 00:09:55,970
you just film the response and then

00:09:52,569 --> 00:09:58,610
again you pass in the name of the

00:09:55,970 --> 00:10:02,149
service that you're gonna send the

00:09:58,610 --> 00:10:05,170
object or a string for the type and then

00:10:02,149 --> 00:10:08,000
the callback function the service client

00:10:05,170 --> 00:10:10,189
you also just instantiate and then you

00:10:08,000 --> 00:10:11,839
can call it with a request and the note

00:10:10,189 --> 00:10:16,610
handle also exposes a function to wait

00:10:11,839 --> 00:10:17,360
for services if you need them and then

00:10:16,610 --> 00:10:18,649
parameters

00:10:17,360 --> 00:10:19,850
I think this technically isn't

00:10:18,649 --> 00:10:22,060
everything that you can do with

00:10:19,850 --> 00:10:24,350
parameters but I've never seen anybody

00:10:22,060 --> 00:10:26,180
use the other parameter functionality

00:10:24,350 --> 00:10:30,920
and nobody has asked me for it so I

00:10:26,180 --> 00:10:34,519
haven't done it yet if you want it let

00:10:30,920 --> 00:10:40,180
me know but you can get set check and

00:10:34,519 --> 00:10:44,750
delete parameters so it's most of it

00:10:40,180 --> 00:10:46,819
there's logging you can hook in to the

00:10:44,750 --> 00:10:49,730
logger if you want to to kind of send

00:10:46,819 --> 00:10:51,769
the data somewhere else but by default

00:10:49,730 --> 00:10:54,529
it will log to standard out standard air

00:10:51,769 --> 00:10:57,319
and Ross out there's throttled logging

00:10:54,529 --> 00:11:02,380
and you can set and get lock levels as

00:10:57,319 --> 00:11:02,380
you need and then a simple time

00:11:02,670 --> 00:11:06,090
interface to give you either the same

00:11:04,920 --> 00:11:08,430
time or the wall clock time is

00:11:06,090 --> 00:11:10,260
appropriate and then some helper

00:11:08,430 --> 00:11:12,720
functions to convert between JavaScript

00:11:10,260 --> 00:11:17,400
time representations and Ross time

00:11:12,720 --> 00:11:20,010
representations messages there are a lot

00:11:17,400 --> 00:11:22,050
of options and can be a little confusing

00:11:20,010 --> 00:11:27,000
but generally if you're running in

00:11:22,050 --> 00:11:29,190
kinetic or later in a catkin workspace

00:11:27,000 --> 00:11:30,480
they'll just exist for you they'll get

00:11:29,190 --> 00:11:32,010
built with all of your other messages

00:11:30,480 --> 00:11:32,840
and you can just pull them in whenever

00:11:32,010 --> 00:11:35,670
you want

00:11:32,840 --> 00:11:36,210
through this require function that Ross

00:11:35,670 --> 00:11:40,170
nodejs

00:11:36,210 --> 00:11:41,970
exposes and then you can get messages

00:11:40,170 --> 00:11:45,420
and services from them if you're running

00:11:41,970 --> 00:11:48,300
an indigo or earlier which we are which

00:11:45,420 --> 00:11:50,880
is why this exists you can have them

00:11:48,300 --> 00:11:54,200
built for you they'll also just be put

00:11:50,880 --> 00:11:58,800
into your develop workspace and then

00:11:54,200 --> 00:12:01,130
actually kind of someone pulled in from

00:11:58,800 --> 00:12:03,720
Brandon Alexander's early stuff I think

00:12:01,130 --> 00:12:06,270
you can just generate the messages on

00:12:03,720 --> 00:12:07,980
the fly if you prefer the messages

00:12:06,270 --> 00:12:09,630
themselves provide constants if you

00:12:07,980 --> 00:12:11,040
instantiate them they'll automatically

00:12:09,630 --> 00:12:17,580
have default fields filled in for

00:12:11,040 --> 00:12:20,340
everything so this is obviously not

00:12:17,580 --> 00:12:24,090
going to actually compile but roughly in

00:12:20,340 --> 00:12:28,620
Ross CBP this is sort of a intra node

00:12:24,090 --> 00:12:29,880
chatter example so if we wanted to

00:12:28,620 --> 00:12:32,880
compare this to what it would look like

00:12:29,880 --> 00:12:36,960
in Ross nodejs it would actually be very

00:12:32,880 --> 00:12:40,880
similar which i think is really cool so

00:12:36,960 --> 00:12:43,080
you can see right at the top we're

00:12:40,880 --> 00:12:46,890
pulling in the packages that we want to

00:12:43,080 --> 00:12:47,610
use both just Ross and the messages that

00:12:46,890 --> 00:12:50,460
we're gonna use

00:12:47,610 --> 00:12:53,490
we then initialize the node we create a

00:12:50,460 --> 00:12:55,050
node handle we make a callback that's

00:12:53,490 --> 00:12:59,670
just going to take in the message and

00:12:55,050 --> 00:13:03,270
log something will advertise a publisher

00:12:59,670 --> 00:13:07,230
on a topic with a type you create a

00:13:03,270 --> 00:13:09,210
subscriber on the same topic and then

00:13:07,230 --> 00:13:12,440
you create a message give it some data

00:13:09,210 --> 00:13:15,300
and then once a second you'll just

00:13:12,440 --> 00:13:21,639
publish a message on that topic

00:13:15,300 --> 00:13:26,800
so what does this look like we have some

00:13:21,639 --> 00:13:35,110
very simple examples so I'm just running

00:13:26,800 --> 00:13:38,350
a raw score here here I'm running a

00:13:35,110 --> 00:13:40,990
talker that's very similar to all of the

00:13:38,350 --> 00:13:44,470
kind of raw stalker examples I can make

00:13:40,990 --> 00:13:49,990
a listener and here's getting data you

00:13:44,470 --> 00:13:53,319
can obviously echo that topic also if

00:13:49,990 --> 00:13:55,839
you want to if you're curious about

00:13:53,319 --> 00:13:57,910
adding two integers together and for

00:13:55,839 --> 00:14:00,850
some reason you just can't figure it out

00:13:57,910 --> 00:14:08,560
on your own there is a server that can

00:14:00,850 --> 00:14:12,040
do that for you and now you have done

00:14:08,560 --> 00:14:19,269
some very complicated math so you're

00:14:12,040 --> 00:14:24,100
welcome I think the biggest example I'm

00:14:19,269 --> 00:14:27,010
aware of is in Terra so this is in Terra

00:14:24,100 --> 00:14:29,529
5 I've made the robot do some very

00:14:27,010 --> 00:14:31,449
strange pattern tasks and this is just

00:14:29,529 --> 00:14:34,060
our UI which is running in Chrome so

00:14:31,449 --> 00:14:38,430
obviously Ross nodejs is not running in

00:14:34,060 --> 00:14:40,810
Chrome but the web page is connected to

00:14:38,430 --> 00:14:43,449
back-end that is running in node.js and

00:14:40,810 --> 00:14:46,269
so all of the data from the robot is

00:14:43,449 --> 00:14:50,290
funneled up in real time well not real

00:14:46,269 --> 00:14:52,870
time but to the UI to let you see what

00:14:50,290 --> 00:15:00,130
the robot is doing and what the behavior

00:14:52,870 --> 00:15:04,680
tree is doing as it runs and then the

00:15:00,130 --> 00:15:09,610
other example is this very hacky rviz

00:15:04,680 --> 00:15:11,410
that we made a year ish ago during a

00:15:09,610 --> 00:15:15,790
quick hackathon we were mostly trying to

00:15:11,410 --> 00:15:18,399
explore using an electron and then also

00:15:15,790 --> 00:15:21,480
testing out some different we are

00:15:18,399 --> 00:15:23,649
connecting of our 3d view stuff going on

00:15:21,480 --> 00:15:25,060
electron if you don't know it is this

00:15:23,649 --> 00:15:28,140
really cool open source package from

00:15:25,060 --> 00:15:32,880
github it powers there

00:15:28,140 --> 00:15:36,899
code editor which is a code editor from

00:15:32,880 --> 00:15:40,589
github but electron lets you build apps

00:15:36,899 --> 00:15:42,029
in nodejs it's this combination process

00:15:40,589 --> 00:15:43,350
with a node back-end in a chromium

00:15:42,029 --> 00:15:45,350
front-end but they're all running in the

00:15:43,350 --> 00:15:48,779
same process an electron will

00:15:45,350 --> 00:15:50,910
automatically build those for you into

00:15:48,779 --> 00:15:55,230
native apps to run on Mac Windows or

00:15:50,910 --> 00:15:57,269
Linux but the front-end in an electron

00:15:55,230 --> 00:16:00,329
also has access to all of the file

00:15:57,269 --> 00:16:01,980
system and kind of native API so that

00:16:00,329 --> 00:16:11,310
browsers generally don't give you access

00:16:01,980 --> 00:16:13,320
to I don't know where the light came

00:16:11,310 --> 00:16:19,820
from in this and Baxter only has one arm

00:16:13,320 --> 00:16:19,820
but the TFS look pretty good

00:16:20,430 --> 00:16:26,040
it's a hackathon so what can't you do

00:16:26,190 --> 00:16:32,800
so JavaScript number representation all

00:16:31,120 --> 00:16:35,500
numbers in JavaScript are represented as

00:16:32,800 --> 00:16:38,500
64-bit floating-point numbers so there's

00:16:35,500 --> 00:16:42,330
no 64-bit integers natively supported in

00:16:38,500 --> 00:16:44,710
JavaScript there are a host of lot like

00:16:42,330 --> 00:16:46,270
packages that you can pull in that

00:16:44,710 --> 00:16:47,280
provide that support for you so that's

00:16:46,270 --> 00:16:49,920
what we do

00:16:47,280 --> 00:16:53,230
although there are proposals to add

00:16:49,920 --> 00:16:55,210
native big integer support generally

00:16:53,230 --> 00:16:58,510
JavaScript time resolution only gives

00:16:55,210 --> 00:17:01,090
you millisecond precision and if you're

00:16:58,510 --> 00:17:03,400
running just in node you could write

00:17:01,090 --> 00:17:05,010
plugins to C++ that would give you

00:17:03,400 --> 00:17:07,600
higher resolution stuff but it wouldn't

00:17:05,010 --> 00:17:09,760
scale to the browser or necessarily to

00:17:07,600 --> 00:17:11,740
other back-end engines and then

00:17:09,760 --> 00:17:14,010
obviously Ross majest cannot run in the

00:17:11,740 --> 00:17:16,210
browser you're still gonna need a bridge

00:17:14,010 --> 00:17:19,600
which could very reasonably be Ross

00:17:16,210 --> 00:17:21,550
bridge and Ross lib ours kind of ties

00:17:19,600 --> 00:17:25,120
into our own event system that we use

00:17:21,550 --> 00:17:26,440
for everything else in terms of future

00:17:25,120 --> 00:17:29,040
work I think there's a lot more to do on

00:17:26,440 --> 00:17:33,100
tools and utilities to run in JavaScript

00:17:29,040 --> 00:17:37,840
TF geotiff stuff ideally these would be

00:17:33,100 --> 00:17:40,660
platform agnostic we could tie into like

00:17:37,840 --> 00:17:41,800
a lot of K DLC balls bus stuff to run in

00:17:40,660 --> 00:17:44,590
node but then it wouldn't be able to run

00:17:41,800 --> 00:17:47,740
in the browser and that would probably

00:17:44,590 --> 00:17:50,410
be annoying in some instances ross l'm

00:17:47,740 --> 00:17:52,390
jess already has some of these but a

00:17:50,410 --> 00:17:56,500
number of them kind of tie into the Ross

00:17:52,390 --> 00:17:59,470
libs communication protocol and then our

00:17:56,500 --> 00:18:04,690
CL node.js is actually being developed I

00:17:59,470 --> 00:18:06,370
think by Intel for Ross - so depending

00:18:04,690 --> 00:18:09,190
on how they build it and what changes

00:18:06,370 --> 00:18:10,360
between Ross - and normal Ross we could

00:18:09,190 --> 00:18:16,420
possibly share some of those tools and

00:18:10,360 --> 00:18:19,180
utilities but that's it so if you're

00:18:16,420 --> 00:18:21,310
interested in the code it's online it's

00:18:19,180 --> 00:18:24,040
open-source you can open pull requests

00:18:21,310 --> 00:18:28,270
and file bugs as you want

00:18:24,040 --> 00:18:29,450
ian is looking for an intern you can

00:18:28,270 --> 00:18:39,859
talk to him

00:18:29,450 --> 00:18:43,159
like thank you we've got time for just a

00:18:39,859 --> 00:18:46,309
question or two if there are and Justin

00:18:43,159 --> 00:18:48,739
come on up while people are thinking

00:18:46,309 --> 00:18:51,979
about that are you looking for

00:18:48,739 --> 00:19:01,789
contributions to Ross no Jess and if so

00:18:51,979 --> 00:19:03,829
what what do you need help with I think

00:19:01,789 --> 00:19:07,820
Ross no Jess there are certainly a few

00:19:03,829 --> 00:19:09,469
things that we're missing I mentioned a

00:19:07,820 --> 00:19:11,719
few like parameter things that we don't

00:19:09,469 --> 00:19:17,329
support I don't think we have topic

00:19:11,719 --> 00:19:19,099
remapping yet and then I think there's

00:19:17,329 --> 00:19:23,289
still some more testing to do on a lot

00:19:19,099 --> 00:19:25,700
of the action stuff I mostly had to

00:19:23,289 --> 00:19:27,049
parse through all of the action Lib

00:19:25,700 --> 00:19:28,849
source code to try and figure out what

00:19:27,049 --> 00:19:30,919
the action deserver and stuff we're

00:19:28,849 --> 00:19:34,219
actually doing so I don't think that's

00:19:30,919 --> 00:19:37,159
probably that solid I think a lot more

00:19:34,219 --> 00:19:42,169
of the work is building tools and

00:19:37,159 --> 00:19:44,509
utilities to use in JavaScript but yeah

00:19:42,169 --> 00:19:51,129
do you have any plans for typescript

00:19:44,509 --> 00:19:56,719
support or typescript types is it know

00:19:51,129 --> 00:20:00,919
if you want to do that you should yeah I

00:19:56,719 --> 00:20:04,899
wouldn't have a problem doing it but we

00:20:00,919 --> 00:20:07,110
don't use typescript and so I didn't

00:20:04,899 --> 00:20:09,960
yeah

00:20:07,110 --> 00:20:15,369
all right

00:20:09,960 --> 00:20:15,369

YouTube URL: https://www.youtube.com/watch?v=WH9aRKXuCj8


