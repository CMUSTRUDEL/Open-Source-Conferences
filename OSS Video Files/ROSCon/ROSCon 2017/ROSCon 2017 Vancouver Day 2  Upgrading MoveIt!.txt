Title: ROSCon 2017 Vancouver Day 2  Upgrading MoveIt!
Publication date: 2021-03-28
Playlist: ROSCon 2017
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2017 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License
Captions: 
	00:00:01,070 --> 00:00:06,359
yeah hi everyone

00:00:03,780 --> 00:00:09,269
so as Brian just said I'm going to talk

00:00:06,359 --> 00:00:11,460
about upgrading move it about you using

00:00:09,269 --> 00:00:13,740
move it and more specifically about

00:00:11,460 --> 00:00:17,520
upgrading your move it experience as a

00:00:13,740 --> 00:00:20,400
user there before going to that loss let

00:00:17,520 --> 00:00:21,990
me talk about myself for a moment so I'm

00:00:20,400 --> 00:00:24,390
a PhD student at Hamburg University

00:00:21,990 --> 00:00:28,220
group Tom's you might remember them from

00:00:24,390 --> 00:00:30,210
two years ago at eyebrows and roschin

00:00:28,220 --> 00:00:33,059
distribution maintainer with the Linux

00:00:30,210 --> 00:00:35,100
distribution luna linux since 2007 so

00:00:33,059 --> 00:00:38,329
I've seen quite a lot of people trying

00:00:35,100 --> 00:00:41,309
to maintain software over the years

00:00:38,329 --> 00:00:42,680
since 2013 which is apparently not a

00:00:41,309 --> 00:00:45,270
long time compared to many of the other

00:00:42,680 --> 00:00:48,030
participants here but anyway I'm

00:00:45,270 --> 00:00:51,180
involved with Ross contribute just many

00:00:48,030 --> 00:00:53,010
patches already over time I work with

00:00:51,180 --> 00:00:55,320
quite a lot of robotic hardware

00:00:53,010 --> 00:00:58,250
platforms including peer to your five

00:00:55,320 --> 00:01:01,199
shadowhands and also also some others

00:00:58,250 --> 00:01:02,910
and then after using the muevete

00:01:01,199 --> 00:01:05,430
framework for after - for more than two

00:01:02,910 --> 00:01:07,830
years I became a maintainer there and

00:01:05,430 --> 00:01:11,100
now I'm one of the main taneous of the

00:01:07,830 --> 00:01:13,320
movie project let me stress here a place

00:01:11,100 --> 00:01:15,119
that there there are ten official

00:01:13,320 --> 00:01:17,070
maintain is a 12 official maintained as

00:01:15,119 --> 00:01:19,500
I think at the moment on the mailing

00:01:17,070 --> 00:01:21,360
list I'm one of them and I'm known to

00:01:19,500 --> 00:01:23,460
have some strong opinions so not

00:01:21,360 --> 00:01:25,799
everything I say reflects on every

00:01:23,460 --> 00:01:30,119
maintainer here but it's my personal

00:01:25,799 --> 00:01:32,369
opinion ok so first things first

00:01:30,119 --> 00:01:36,900
how many who in here used to move it

00:01:32,369 --> 00:01:39,119
before personally whoa ok that's more

00:01:36,900 --> 00:01:40,560
than half I guess that's good thing so

00:01:39,119 --> 00:01:42,600
you already know what this is about

00:01:40,560 --> 00:01:44,610
right this it's one of the standard

00:01:42,600 --> 00:01:46,409
demos you've Arvest running your movie

00:01:44,610 --> 00:01:50,310
plugin loaded you can drag and drop

00:01:46,409 --> 00:01:52,200
around your end effector marker and you

00:01:50,310 --> 00:01:55,079
get inversive kinematics solutions you

00:01:52,200 --> 00:01:56,850
can click plan and some magic planning

00:01:55,079 --> 00:02:00,479
pipeline builders do the job generate a

00:01:56,850 --> 00:02:02,850
plan that avoids collisions and give you

00:02:00,479 --> 00:02:05,969
and and you can actually execute that on

00:02:02,850 --> 00:02:09,539
a robot and the framework will also

00:02:05,969 --> 00:02:11,520
monitor the execution so if everything

00:02:09,539 --> 00:02:12,630
works so great one why am i giving this

00:02:11,520 --> 00:02:14,220
talk

00:02:12,630 --> 00:02:16,620
over the last couple of years I've

00:02:14,220 --> 00:02:18,360
talked to many people about move it and

00:02:16,620 --> 00:02:20,670
basically when you ask them whether they

00:02:18,360 --> 00:02:22,980
use it I found that there are three

00:02:20,670 --> 00:02:25,530
categories of people who reply to that

00:02:22,980 --> 00:02:27,060
so the first one is like yes of course

00:02:25,530 --> 00:02:31,230
we used to move it everyone uses move it

00:02:27,060 --> 00:02:35,280
just works great why do you ask many of

00:02:31,230 --> 00:02:37,410
you are here I'm happy to see that then

00:02:35,280 --> 00:02:39,510
there's also the bad side that's the

00:02:37,410 --> 00:02:41,970
people who say like yeah you know we

00:02:39,510 --> 00:02:44,430
tried it and we didn't get it to work so

00:02:41,970 --> 00:02:47,520
we don't use it and now we will own

00:02:44,430 --> 00:02:49,590
stuff and of course that's bad bad for

00:02:47,520 --> 00:02:53,040
me to hear because I like people to see

00:02:49,590 --> 00:02:55,200
using the framework successfully but

00:02:53,040 --> 00:02:56,970
that's also bad for the community in the

00:02:55,200 --> 00:03:00,000
sense that many of these custom codes

00:02:56,970 --> 00:03:01,530
are not contributed back right and we

00:03:00,000 --> 00:03:04,110
want to see it contributed back we want

00:03:01,530 --> 00:03:06,090
the community to improve and then there

00:03:04,110 --> 00:03:08,400
are all these in-betweens like yeah you

00:03:06,090 --> 00:03:10,050
know we use move it it we use it for

00:03:08,400 --> 00:03:12,090
some things and that works great and

00:03:10,050 --> 00:03:14,960
then there are many things where yeah

00:03:12,090 --> 00:03:17,550
you know we use just as other stuff

00:03:14,960 --> 00:03:21,030
basically my motivation for the talk is

00:03:17,550 --> 00:03:23,060
on the one hand and to reinforce the

00:03:21,030 --> 00:03:25,560
belief of those who in the first group

00:03:23,060 --> 00:03:29,400
maybe to get convinced some of the

00:03:25,560 --> 00:03:32,460
second group to try again and for the

00:03:29,400 --> 00:03:34,530
third group I want to want to encourage

00:03:32,460 --> 00:03:37,200
you to actually provide pull requests to

00:03:34,530 --> 00:03:38,250
provide patches and modules because well

00:03:37,200 --> 00:03:40,020
apparently you're working in a

00:03:38,250 --> 00:03:42,330
borderline case where move it works to

00:03:40,020 --> 00:03:45,510
some degree but well you know could be

00:03:42,330 --> 00:03:49,860
improved before I go into that let me

00:03:45,510 --> 00:03:52,170
talk about stability for a moment like

00:03:49,860 --> 00:03:55,170
three years ago there was this rather

00:03:52,170 --> 00:03:56,790
strict policy and with move it within

00:03:55,170 --> 00:03:58,170
the move it come maintainer community

00:03:56,790 --> 00:04:00,000
that said well yeah you know you know

00:03:58,170 --> 00:04:01,380
don't change anything if you change

00:04:00,000 --> 00:04:02,730
something it's so likely you're going to

00:04:01,380 --> 00:04:06,920
break something because it's really

00:04:02,730 --> 00:04:10,700
complex code just don't change anything

00:04:06,920 --> 00:04:13,050
yeah that's a way of putting things

00:04:10,700 --> 00:04:17,600
sadly there were also many pull requests

00:04:13,050 --> 00:04:20,540
on many patches and many bugs right

00:04:17,600 --> 00:04:24,889
they weren't considered or the ones

00:04:20,540 --> 00:04:27,080
given proper thought at that time so let

00:04:24,889 --> 00:04:30,410
me contrast that attitude with a crowd

00:04:27,080 --> 00:04:33,889
by Ulrich Draper who was for a long time

00:04:30,410 --> 00:04:35,600
core maintainer of the UFC he said well

00:04:33,889 --> 00:04:37,700
no program which depends depends on

00:04:35,600 --> 00:04:39,530
broken behavior deserves protection if a

00:04:37,700 --> 00:04:41,000
program has found such a discrepancy and

00:04:39,530 --> 00:04:42,350
changes the application to use it

00:04:41,000 --> 00:04:45,970
instead of reporting it to the library

00:04:42,350 --> 00:04:45,970
maintenance she gets what she deserves

00:04:46,690 --> 00:04:56,390
that's an attitude so just skip this

00:04:53,000 --> 00:04:58,490
perspective in here that is more or less

00:04:56,390 --> 00:04:58,760
my personal perspective I totally see

00:04:58,490 --> 00:05:00,650
that

00:04:58,760 --> 00:05:04,070
Toton that does not totally fully apply

00:05:00,650 --> 00:05:05,600
with move it so it's not simple when

00:05:04,070 --> 00:05:07,190
your code decides controls for costly

00:05:05,600 --> 00:05:09,830
robots right if there are people

00:05:07,190 --> 00:05:11,510
involved safety involved then then you

00:05:09,830 --> 00:05:13,400
can be happy that the end user actually

00:05:11,510 --> 00:05:15,110
managed to get the system running and if

00:05:13,400 --> 00:05:17,290
you change something be in the behavior

00:05:15,110 --> 00:05:20,090
of this of the code and you might just

00:05:17,290 --> 00:05:21,620
freak out the developer who implemented

00:05:20,090 --> 00:05:23,419
a scenario nothing works anymore the

00:05:21,620 --> 00:05:25,760
robot goes crazy you don't want that

00:05:23,419 --> 00:05:27,380
either so on the one hand stability is

00:05:25,760 --> 00:05:30,979
essential on the other hand so are

00:05:27,380 --> 00:05:33,350
correct implementations right so we want

00:05:30,979 --> 00:05:36,320
to see patches we want to see upgrades

00:05:33,350 --> 00:05:39,140
if they improve things takes a lot of

00:05:36,320 --> 00:05:40,970
time to check that so just in order to

00:05:39,140 --> 00:05:44,180
make the conscious decision about

00:05:40,970 --> 00:05:45,590
whether we change things or not we add

00:05:44,180 --> 00:05:48,110
it as own aims for library versioning

00:05:45,590 --> 00:05:52,789
with move it which seems to be rather

00:05:48,110 --> 00:05:55,640
uncommon for for us projects and talking

00:05:52,789 --> 00:05:58,070
about branches indigo is by now

00:05:55,640 --> 00:06:02,060
considered stable so we try very hard

00:05:58,070 --> 00:06:04,130
not to break ABI there if we do we can

00:06:02,060 --> 00:06:07,160
at least mark it but we don't want to do

00:06:04,130 --> 00:06:09,020
that seriously a kinetic will stay API

00:06:07,160 --> 00:06:11,330
compatible what but we are likely to

00:06:09,020 --> 00:06:14,330
break ABI there again for adding

00:06:11,330 --> 00:06:16,729
features and while Luna is at the moment

00:06:14,330 --> 00:06:19,160
still released from kinetic develop so

00:06:16,729 --> 00:06:21,710
the moment we start changing API to

00:06:19,160 --> 00:06:26,150
improve it you will see that with branch

00:06:21,710 --> 00:06:28,909
off lunar okay you might remember

00:06:26,150 --> 00:06:30,620
they've Commons talk two years ago he

00:06:28,909 --> 00:06:30,980
had one very depressing in my opinion

00:06:30,620 --> 00:06:33,650
very

00:06:30,980 --> 00:06:35,300
pressing slide and there that showed the

00:06:33,650 --> 00:06:37,850
commit history of one of the movie

00:06:35,300 --> 00:06:40,310
repositories and basically there was a

00:06:37,850 --> 00:06:42,680
lot of activity in the graph then there

00:06:40,310 --> 00:06:44,600
was one small peak and one ever pointing

00:06:42,680 --> 00:06:50,870
it at it that said Willow Garage closed

00:06:44,600 --> 00:06:52,730
and nothing afterwards there was well

00:06:50,870 --> 00:06:54,790
yeah he gave the talk back back here at

00:06:52,730 --> 00:06:57,740
some point

00:06:54,790 --> 00:06:59,600
so as you see from the hope mr. history

00:06:57,740 --> 00:07:01,670
of there of the project a lot happened

00:06:59,600 --> 00:07:04,820
right so it's not like we dropped that

00:07:01,670 --> 00:07:06,950
and nothing happens there anymore what

00:07:04,820 --> 00:07:09,290
happened we merge pull request and we

00:07:06,950 --> 00:07:11,030
merged all the repositories finally into

00:07:09,290 --> 00:07:13,180
its central repository that was a very

00:07:11,030 --> 00:07:16,490
good choice made maintenance much easier

00:07:13,180 --> 00:07:18,230
since the merge we already closed 379

00:07:16,490 --> 00:07:20,150
pull requests I actually wanted to make

00:07:18,230 --> 00:07:23,450
that 380 but didn't get around because I

00:07:20,150 --> 00:07:25,040
have to prepare the talk we fix many

00:07:23,450 --> 00:07:27,170
bugs out of many small features to the

00:07:25,040 --> 00:07:30,170
main project and if you have not seen it

00:07:27,170 --> 00:07:33,890
there's a new video montage 2017 look at

00:07:30,170 --> 00:07:37,370
it it's awesome so talking about

00:07:33,890 --> 00:07:39,500
upgrading if you want to if you use move

00:07:37,370 --> 00:07:42,230
it try to use the current releases you

00:07:39,500 --> 00:07:45,470
will see that since two years ago there

00:07:42,230 --> 00:07:46,790
have been countless bug fixes and many

00:07:45,470 --> 00:07:47,600
things that just improve your everyday

00:07:46,790 --> 00:07:51,290
experience

00:07:47,600 --> 00:07:53,390
so there's for example the collision

00:07:51,290 --> 00:07:55,490
matrix that you maintain we then move it

00:07:53,390 --> 00:07:56,870
the allowed collision matrix now we

00:07:55,490 --> 00:07:58,610
actually have a visual collision matrix

00:07:56,870 --> 00:08:00,530
and set a persistence so you didn't have

00:07:58,610 --> 00:08:02,510
you to click your way through individual

00:08:00,530 --> 00:08:04,340
items anymore we have synchronous scene

00:08:02,510 --> 00:08:06,110
updates we have started validation for

00:08:04,340 --> 00:08:08,870
execution so that you don't start

00:08:06,110 --> 00:08:10,940
execute trajectories just being

00:08:08,870 --> 00:08:13,070
somewhere totally else interactive

00:08:10,940 --> 00:08:15,080
trajectory display you can just go

00:08:13,070 --> 00:08:17,330
through your trajectory forward and back

00:08:15,080 --> 00:08:22,460
in August to see what it looks like and

00:08:17,330 --> 00:08:27,890
some other things ok let's have a look

00:08:22,460 --> 00:08:30,920
at tip more or less typical user

00:08:27,890 --> 00:08:32,570
experience move it I guess more or less

00:08:30,920 --> 00:08:34,790
more or less every one of you knows this

00:08:32,570 --> 00:08:38,120
robot arm right it's a year five it's

00:08:34,790 --> 00:08:42,349
very common among Ross users at the

00:08:38,120 --> 00:08:44,159
moment so imagine you just set up the

00:08:42,349 --> 00:08:47,759
system and

00:08:44,159 --> 00:08:49,199
you ever drowning on kinetic you just

00:08:47,759 --> 00:08:52,230
start up move it set up the

00:08:49,199 --> 00:08:54,060
configuration and say please make it

00:08:52,230 --> 00:08:57,149
such that the end effectors on the other

00:08:54,060 --> 00:09:02,689
side of this wall and then you click

00:08:57,149 --> 00:09:02,689
move and something like that will happen

00:09:05,569 --> 00:09:13,949
so of course this is slowed down a lot

00:09:08,129 --> 00:09:15,360
you could go much faster so technically

00:09:13,949 --> 00:09:16,889
there's nothing wrong with it

00:09:15,360 --> 00:09:18,240
you're also to move the end effector to

00:09:16,889 --> 00:09:20,009
the other side of the wall and that's

00:09:18,240 --> 00:09:21,810
what it did right it's collision free

00:09:20,009 --> 00:09:25,740
it's well time permit rised you can just

00:09:21,810 --> 00:09:30,060
do it nevertheless a lot of people just

00:09:25,740 --> 00:09:34,439
think you know this bit weird that

00:09:30,060 --> 00:09:36,389
didn't look too intuitive yes you can

00:09:34,439 --> 00:09:38,790
improve on it that's just the out of box

00:09:36,389 --> 00:09:40,829
experience may be proud well it should

00:09:38,790 --> 00:09:42,689
be the out of box experience if you see

00:09:40,829 --> 00:09:46,889
worse trajectories than that you should

00:09:42,689 --> 00:09:51,509
seriously consider the bug and we had

00:09:46,889 --> 00:09:54,360
such a buck in the past so where can you

00:09:51,509 --> 00:09:58,019
go from there it's just some are some

00:09:54,360 --> 00:10:00,600
random ideas here if you tell the

00:09:58,019 --> 00:10:02,819
pipeline that a single shot planning

00:10:00,600 --> 00:10:05,339
solver to go to the move the end

00:10:02,819 --> 00:10:07,110
effector to the other side you have not

00:10:05,339 --> 00:10:10,050
specified an inverse kinematic solution

00:10:07,110 --> 00:10:11,819
so just going to choose the first one

00:10:10,050 --> 00:10:14,579
that for which it finds a working plan

00:10:11,819 --> 00:10:16,740
right so if you wanted to have a short

00:10:14,579 --> 00:10:18,240
plan maybe maybe you should have a look

00:10:16,740 --> 00:10:20,670
at the I case solutions and choose the

00:10:18,240 --> 00:10:24,509
solution huge on solution you want to

00:10:20,670 --> 00:10:27,420
have if you don't want to get close to

00:10:24,509 --> 00:10:29,639
balls or objects add padding right

00:10:27,420 --> 00:10:32,009
collision objects don't have to have the

00:10:29,639 --> 00:10:33,660
size of the real object you can add

00:10:32,009 --> 00:10:35,579
padding there that's the simplest way

00:10:33,660 --> 00:10:40,019
you can also add padding to individual

00:10:35,579 --> 00:10:42,149
robot parts if you know you're not using

00:10:40,019 --> 00:10:44,100
your whole works joint workspace joint

00:10:42,149 --> 00:10:48,180
configuration space and with their your

00:10:44,100 --> 00:10:50,670
5 this is 4 PI in each joint then don't

00:10:48,180 --> 00:10:53,670
use it specify not to use it because

00:10:50,670 --> 00:10:56,200
it's the search space just gets much

00:10:53,670 --> 00:10:57,970
bigger right

00:10:56,200 --> 00:11:00,160
if you can reduce that things get much

00:10:57,970 --> 00:11:03,010
better look much better and of course

00:11:00,160 --> 00:11:05,380
they were on PLC default back end that's

00:11:03,010 --> 00:11:07,300
flagship and planning and there are lots

00:11:05,380 --> 00:11:08,910
of lots of planners and lots and lots of

00:11:07,300 --> 00:11:13,990
options you can play with that for

00:11:08,910 --> 00:11:18,070
almost endlessly yeah so you can improve

00:11:13,990 --> 00:11:20,020
a lot there too but let's just take a

00:11:18,070 --> 00:11:22,570
step outside of the actual movie core

00:11:20,020 --> 00:11:24,970
framework you can for example find

00:11:22,570 --> 00:11:29,560
things like stomp which is stochastic

00:11:24,970 --> 00:11:31,270
trajectory optimization just sample some

00:11:29,560 --> 00:11:32,470
trajectories and some modifications you

00:11:31,270 --> 00:11:36,250
can have a look at the details if you

00:11:32,470 --> 00:11:38,710
like and generates a trajectory and the

00:11:36,250 --> 00:11:42,430
trajectory looks like that which seems

00:11:38,710 --> 00:11:46,390
much more intuitive right on the other

00:11:42,430 --> 00:11:49,090
hand you have to you have apparently

00:11:46,390 --> 00:11:50,560
much more planning time because it's a

00:11:49,090 --> 00:11:54,850
totally different kind of solve all that

00:11:50,560 --> 00:11:57,010
needs some resources maybe you're into

00:11:54,850 --> 00:12:01,060
Cartesian plant path planning many of us

00:11:57,010 --> 00:12:04,800
are I guess and you use the compute

00:12:01,060 --> 00:12:07,450
Cartesian path module off move it before

00:12:04,800 --> 00:12:10,540
maybe you're happy that's fine

00:12:07,450 --> 00:12:12,520
maybe you're not and if you're not you

00:12:10,540 --> 00:12:15,100
should have a look around you might find

00:12:12,520 --> 00:12:16,210
deke are right which gives you under

00:12:15,100 --> 00:12:20,380
constraint

00:12:16,210 --> 00:12:24,520
Cartesian trajectories and you can just

00:12:20,380 --> 00:12:26,410
use those for example right so in this

00:12:24,520 --> 00:12:29,290
specific setting we just specified

00:12:26,410 --> 00:12:32,710
please tip over the bottle on the path

00:12:29,290 --> 00:12:35,140
the glass so there's one the we don't

00:12:32,710 --> 00:12:38,080
care about your axles of the bottle and

00:12:35,140 --> 00:12:40,480
that basically works out of the box so

00:12:38,080 --> 00:12:42,430
just use it we're currently thinking

00:12:40,480 --> 00:12:45,250
about integrating that with move it

00:12:42,430 --> 00:12:47,670
there's an open issue on that but we'll

00:12:45,250 --> 00:12:47,670
see how it goes

00:12:47,850 --> 00:12:54,520
then I would never ending story yeah

00:12:51,010 --> 00:12:56,500
uptake upgrade grasping it's the most

00:12:54,520 --> 00:12:59,860
frequent request for sure with move it

00:12:56,500 --> 00:13:02,830
to say yeah I want to grasp stuff yeah

00:12:59,860 --> 00:13:05,050
well in general it is no solve problem

00:13:02,830 --> 00:13:09,070
whatever people want to tell you right

00:13:05,050 --> 00:13:10,660
not in general that's not so

00:13:09,070 --> 00:13:12,579
if you come up with a picking scenario

00:13:10,660 --> 00:13:13,990
as an engineer then it's quite lucky

00:13:12,579 --> 00:13:17,680
that it's possible because you are the

00:13:13,990 --> 00:13:19,930
one who came up with it right so in your

00:13:17,680 --> 00:13:22,209
scenario you pretty much know how to

00:13:19,930 --> 00:13:24,279
grasp and what to grasp and you are the

00:13:22,209 --> 00:13:26,290
one who should provide the grasps right

00:13:24,279 --> 00:13:28,149
move it has a pipeline that supports

00:13:26,290 --> 00:13:30,389
your solution so your own solutions

00:13:28,149 --> 00:13:33,699
there we have a pick and place pipeline

00:13:30,389 --> 00:13:38,319
it's not too intuitive to debug I know I

00:13:33,699 --> 00:13:40,630
have to concede but it works and if you

00:13:38,319 --> 00:13:42,279
feed in grass then you get full

00:13:40,630 --> 00:13:46,810
collision free trajectories that pick up

00:13:42,279 --> 00:13:48,970
objects so two prominent X modules that

00:13:46,810 --> 00:13:51,329
generates us cross such grasses for you

00:13:48,970 --> 00:13:53,620
on the one hand move it simple grasps

00:13:51,329 --> 00:13:55,779
Davis as far as I know currently looking

00:13:53,620 --> 00:13:58,029
for a maintainer for that so if you use

00:13:55,779 --> 00:14:02,230
it or want to use it please feel free to

00:13:58,029 --> 00:14:04,930
step up this just generates simple

00:14:02,230 --> 00:14:07,089
geometric grass for primitives on the

00:14:04,930 --> 00:14:09,519
other hand there's research projects

00:14:07,089 --> 00:14:11,740
like three the grass post generating

00:14:09,519 --> 00:14:16,000
module from the helping hand slaps and

00:14:11,740 --> 00:14:19,720
Northeastern University and you can just

00:14:16,000 --> 00:14:22,959
plug that in to the rest system and feed

00:14:19,720 --> 00:14:27,310
it to move it so we have can connect

00:14:22,959 --> 00:14:30,399
camera here observing the scene this the

00:14:27,310 --> 00:14:32,649
grass post generator just generates some

00:14:30,399 --> 00:14:35,730
valid grass based on the geometry of

00:14:32,649 --> 00:14:39,550
this whole stack right there's no

00:14:35,730 --> 00:14:41,889
modeling involved at all but depends on

00:14:39,550 --> 00:14:43,660
what you do that can work quite well and

00:14:41,889 --> 00:14:46,120
it will pick up stuff one after the

00:14:43,660 --> 00:14:47,949
other it might pick more than one right

00:14:46,120 --> 00:14:51,310
there's no model in there but it always

00:14:47,949 --> 00:14:53,410
depends on your application and of

00:14:51,310 --> 00:14:56,350
course there are lots of visualization

00:14:53,410 --> 00:14:58,120
tools you should use them seriously move

00:14:56,350 --> 00:15:00,760
it visual tools was really really good

00:14:58,120 --> 00:15:03,939
for debugging your your internal

00:15:00,760 --> 00:15:06,880
problems there willow is very nice too

00:15:03,939 --> 00:15:12,880
for for analyzing the workspace

00:15:06,880 --> 00:15:16,959
restrictions of your setup yeah going on

00:15:12,880 --> 00:15:19,480
to the next part my grouped attempts we

00:15:16,959 --> 00:15:22,089
want to propose we propose and publish

00:15:19,480 --> 00:15:22,780
here by new kinematics based plugin for

00:15:22,089 --> 00:15:25,930
move it

00:15:22,780 --> 00:15:28,390
by okay that's basically the master -

00:15:25,930 --> 00:15:30,430
well it is the master thesis of Philip

00:15:28,390 --> 00:15:32,680
Ripple items so he did a very great job

00:15:30,430 --> 00:15:33,790
implementing that it's based on genetic

00:15:32,680 --> 00:15:37,930
algorithms particle swarm optimization

00:15:33,790 --> 00:15:39,460
some mimetics in there - and it's very

00:15:37,930 --> 00:15:40,240
very efficiently paralyzed

00:15:39,460 --> 00:15:42,370
implementation

00:15:40,240 --> 00:15:44,230
it improves on track okay and success

00:15:42,370 --> 00:15:47,380
rate and performance even though it's

00:15:44,230 --> 00:15:49,480
particle based given that tracker care

00:15:47,380 --> 00:15:51,850
already has a success rate of 99.9

00:15:49,480 --> 00:15:55,150
percent in many cases this is really

00:15:51,850 --> 00:15:57,550
something it allows for intuitive

00:15:55,150 --> 00:15:59,920
approximate solutions so you actually

00:15:57,550 --> 00:16:03,250
see that the arm tries to reach for

00:15:59,920 --> 00:16:06,730
targets and if you allow approximate

00:16:03,250 --> 00:16:09,310
solutions it can handle multiple goals

00:16:06,730 --> 00:16:11,170
including secondary objectives so if you

00:16:09,310 --> 00:16:13,630
want to be somewhere and for example

00:16:11,170 --> 00:16:15,880
keep the elbow up or down or stay with

00:16:13,630 --> 00:16:18,070
your whole toss or above your center of

00:16:15,880 --> 00:16:21,160
mass which might be something you heard

00:16:18,070 --> 00:16:22,810
in Lucas talked earlier then you can

00:16:21,160 --> 00:16:25,000
feed it in there and there's much better

00:16:22,810 --> 00:16:29,230
generic support for non 60 good DOF

00:16:25,000 --> 00:16:31,480
forms so because we're using dexterous

00:16:29,230 --> 00:16:33,190
arms text wrist manipulation in our lab

00:16:31,480 --> 00:16:35,230
and because we have Chado hands and

00:16:33,190 --> 00:16:37,570
because shadow will also present later

00:16:35,230 --> 00:16:41,710
we obviously have a shadow hand in the

00:16:37,570 --> 00:16:43,839
demo so here we have five end effectors

00:16:41,710 --> 00:16:45,580
sharing one chain from the base of the

00:16:43,839 --> 00:16:50,140
whole arm there's a cuca arm attached in

00:16:45,580 --> 00:16:52,120
this scenario and as you can see as you

00:16:50,140 --> 00:16:54,010
move around drag-and-drop around the end

00:16:52,120 --> 00:16:56,500
effectors for the individual sub chains

00:16:54,010 --> 00:16:58,660
you see that even the whole arm

00:16:56,500 --> 00:17:05,589
changes its orientation to account to

00:16:58,660 --> 00:17:09,000
account for the configuration right so

00:17:05,589 --> 00:17:09,000
this is really great plugin

00:17:10,110 --> 00:17:14,980
we have various goal types I just

00:17:12,640 --> 00:17:17,350
scratched that earlier position

00:17:14,980 --> 00:17:19,990
orientation of course look at joint

00:17:17,350 --> 00:17:22,150
variable constraints center joint

00:17:19,990 --> 00:17:23,980
constraints minimum displacement which

00:17:22,150 --> 00:17:26,380
is quite nice to say I want to stay

00:17:23,980 --> 00:17:30,780
close to my post for example for inverse

00:17:26,380 --> 00:17:33,760
for example for compute Cartesian path

00:17:30,780 --> 00:17:35,710
applications keep contact using fcl

00:17:33,760 --> 00:17:38,320
implementation balance center of mass

00:17:35,710 --> 00:17:39,910
and of course it's a particle based

00:17:38,320 --> 00:17:42,670
implementation so you can feed in any

00:17:39,910 --> 00:17:45,040
function that you like code is available

00:17:42,670 --> 00:17:47,170
on github there will be an official

00:17:45,040 --> 00:17:49,120
release soon we thought it might be a

00:17:47,170 --> 00:17:52,150
good idea to have you guys try it first

00:17:49,120 --> 00:17:56,950
and get some feedback so there will be

00:17:52,150 --> 00:18:00,340
really soon next thing yeah we already

00:17:56,950 --> 00:18:03,070
announced twice there will be more world

00:18:00,340 --> 00:18:07,110
move at de 2017 taking place in October

00:18:03,070 --> 00:18:09,820
18th next month we already have several

00:18:07,110 --> 00:18:12,400
event locations confirmed for some of

00:18:09,820 --> 00:18:13,930
them you can just go there and take part

00:18:12,400 --> 00:18:20,650
and through there will probably be free

00:18:13,930 --> 00:18:22,300
food so but even if you're not going to

00:18:20,650 --> 00:18:24,910
go to one of the locations you are very

00:18:22,300 --> 00:18:26,980
happy to participate online from home or

00:18:24,910 --> 00:18:30,540
wherever you are right the ideas to

00:18:26,980 --> 00:18:36,400
improve many small things in the project

00:18:30,540 --> 00:18:39,070
so join us help us out please okay to

00:18:36,400 --> 00:18:39,910
summarize pop grading move it upgrade

00:18:39,070 --> 00:18:44,110
your experience

00:18:39,910 --> 00:18:45,670
don't don't consider move it to be the

00:18:44,110 --> 00:18:48,100
one with the framework you used two

00:18:45,670 --> 00:18:49,510
years ago a lot of it's not that the

00:18:48,100 --> 00:18:50,980
whole framework changed but a lot of

00:18:49,510 --> 00:18:53,290
minor things changed a lot of annoying

00:18:50,980 --> 00:18:57,220
bugs went away maybe there are many new

00:18:53,290 --> 00:19:00,430
ones but you can file issues and we will

00:18:57,220 --> 00:19:02,710
actually respond to that upgrade your

00:19:00,430 --> 00:19:04,690
possibilities don't expect that move it

00:19:02,710 --> 00:19:06,940
does everything for you right it's not

00:19:04,690 --> 00:19:09,220
the Holy Grail it's out there and it

00:19:06,940 --> 00:19:10,660
works well if you know how to configure

00:19:09,220 --> 00:19:12,360
it but there are so many third-party

00:19:10,660 --> 00:19:15,190
additions that make it work much better

00:19:12,360 --> 00:19:17,500
anthem upgrade move it

00:19:15,190 --> 00:19:19,690
so the actual upstream project if you

00:19:17,500 --> 00:19:23,290
have some time to spare for example for

00:19:19,690 --> 00:19:25,930
writing documentation for writing tests

00:19:23,290 --> 00:19:30,700
for implementing small API functions for

00:19:25,930 --> 00:19:31,990
example for the Python API and if you

00:19:30,700 --> 00:19:33,670
have some useful modules please

00:19:31,990 --> 00:19:36,610
contribute to the upstream project right

00:19:33,670 --> 00:19:39,370
so move it is community driven by now if

00:19:36,610 --> 00:19:46,210
you participate then it can move forward

00:19:39,370 --> 00:19:48,400
thank you thank you we have time for

00:19:46,210 --> 00:19:49,960
probably just one question and while

00:19:48,400 --> 00:19:54,490
that's happening Adam and Carsten come

00:19:49,960 --> 00:20:00,760
on up just a question or two yeah house

00:19:54,490 --> 00:20:04,720
left so my question is regarding your

00:20:00,760 --> 00:20:07,630
sentence about changes in the court were

00:20:04,720 --> 00:20:08,140
painful so you try not to change it in

00:20:07,630 --> 00:20:11,250
the moment

00:20:08,140 --> 00:20:14,680
so the question how can you estimate

00:20:11,250 --> 00:20:18,970
current state do you have some mechanism

00:20:14,680 --> 00:20:21,070
which allows you to at least check that

00:20:18,970 --> 00:20:22,960
you haven't break something have you

00:20:21,070 --> 00:20:25,840
developed something some unit test

00:20:22,960 --> 00:20:29,800
integration tests or you still under

00:20:25,840 --> 00:20:31,630
like uncertainty conditions so one of

00:20:29,800 --> 00:20:33,940
the communities where move it lacks most

00:20:31,630 --> 00:20:35,590
at the moment is integration tests so I

00:20:33,940 --> 00:20:39,070
want to make that a bit make big point

00:20:35,590 --> 00:20:41,410
on the board movie day but check I mean

00:20:39,070 --> 00:20:42,670
checking for ABI changes API changes can

00:20:41,410 --> 00:20:43,990
be done automatically there's a bi

00:20:42,670 --> 00:20:48,940
checker out there it works well so

00:20:43,990 --> 00:20:51,550
that's what we do thank you all right

00:20:48,940 --> 00:20:56,109
time to move on thank you very much

00:20:51,550 --> 00:20:56,109

YouTube URL: https://www.youtube.com/watch?v=J-bTiS-G38E


