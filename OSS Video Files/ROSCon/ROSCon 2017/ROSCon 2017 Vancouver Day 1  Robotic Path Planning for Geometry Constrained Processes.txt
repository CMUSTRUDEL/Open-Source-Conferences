Title: ROSCon 2017 Vancouver Day 1  Robotic Path Planning for Geometry Constrained Processes
Publication date: 2021-03-28
Playlist: ROSCon 2017
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2017 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License
Captions: 
	00:00:01,250 --> 00:00:06,120
hello everyone my name is Levi Armstrong

00:00:03,780 --> 00:00:08,040
I work I'm a senior research engineer at

00:00:06,120 --> 00:00:10,170
Southwest Research Institute I'm gonna

00:00:08,040 --> 00:00:15,960
be giving a brief introduction of the

00:00:10,170 --> 00:00:17,670
Ross industrial know their package so we

00:00:15,960 --> 00:00:19,529
have found in a lot of industrial

00:00:17,670 --> 00:00:22,470
applications like painting material

00:00:19,529 --> 00:00:24,660
removal surface prep is a surface

00:00:22,470 --> 00:00:27,449
preparation they follow a very similar

00:00:24,660 --> 00:00:30,510
sequence of steps so they typically have

00:00:27,449 --> 00:00:33,270
data whether that be scanned data mesh

00:00:30,510 --> 00:00:36,059
data CAD data you then do some type of

00:00:33,270 --> 00:00:38,340
feature processing on it you then need

00:00:36,059 --> 00:00:40,559
to generate process paths to meet your

00:00:38,340 --> 00:00:42,690
requirements and then you need to stitch

00:00:40,559 --> 00:00:44,489
those together using some type of

00:00:42,690 --> 00:00:48,140
sequence planner and then you need to

00:00:44,489 --> 00:00:50,219
convert that into a robot trajectory so

00:00:48,140 --> 00:00:51,840
for these different applications we

00:00:50,219 --> 00:00:54,899
decided to create a framework that

00:00:51,840 --> 00:00:56,460
facilitated reusability of different

00:00:54,899 --> 00:00:57,960
components to allow you to switch out

00:00:56,460 --> 00:00:59,969
with different type of feature

00:00:57,960 --> 00:01:02,280
extractions or process planners to

00:00:59,969 --> 00:01:03,570
easily be able to test out because every

00:01:02,280 --> 00:01:04,650
application is a little different you

00:01:03,570 --> 00:01:08,460
might need to use a different type of

00:01:04,650 --> 00:01:10,650
tool for that different application so

00:01:08,460 --> 00:01:12,869
the current capabilities the framework

00:01:10,650 --> 00:01:14,700
is in place it is plug-in based so you

00:01:12,869 --> 00:01:17,369
can plug in different process planners

00:01:14,700 --> 00:01:19,920
and different robot trajectories to test

00:01:17,369 --> 00:01:22,229
this we have minimal implementations for

00:01:19,920 --> 00:01:24,869
each one of the core components so for

00:01:22,229 --> 00:01:28,310
the feature extraction we're using PCL

00:01:24,869 --> 00:01:31,320
cluster extraction our process planner

00:01:28,310 --> 00:01:35,520
uses polygon mesh to then generate a

00:01:31,320 --> 00:01:36,930
rest raster path because of that the

00:01:35,520 --> 00:01:40,049
requirement on the polygon mesh we

00:01:36,930 --> 00:01:42,240
decided to implement measure based on

00:01:40,049 --> 00:01:44,460
the advancing front algorithm based on

00:01:42,240 --> 00:01:46,290
several papers out there we're currently

00:01:44,460 --> 00:01:49,470
working on getting that integrated into

00:01:46,290 --> 00:01:51,420
the PCL library and then for the

00:01:49,470 --> 00:01:53,189
sequence planner it uses more or less

00:01:51,420 --> 00:01:55,259
for each one of the process pass it

00:01:53,189 --> 00:01:57,149
looks at the start in position of that

00:01:55,259 --> 00:01:59,310
process path and just uses the closest

00:01:57,149 --> 00:02:01,590
point to stitch each one of the process

00:01:59,310 --> 00:02:06,420
paths together and for the trajectory

00:02:01,590 --> 00:02:07,770
planner we're using Descartes so here's

00:02:06,420 --> 00:02:09,629
an example of the advancing front

00:02:07,770 --> 00:02:11,400
measure that was implemented as part of

00:02:09,629 --> 00:02:14,040
this effort you have the Stanford Bunny

00:02:11,400 --> 00:02:15,689
on the left on the right shows the

00:02:14,040 --> 00:02:17,879
characteristics of this type of measure

00:02:15,689 --> 00:02:20,579
so it has some type of it has a guidance

00:02:17,879 --> 00:02:22,950
field using the curvature information

00:02:20,579 --> 00:02:25,680
from the point cloud so in areas of low

00:02:22,950 --> 00:02:27,569
curvature you'll have larger triangles

00:02:25,680 --> 00:02:29,909
and as you approach areas of high

00:02:27,569 --> 00:02:32,760
curvature the triangles start to shrink

00:02:29,909 --> 00:02:35,670
to accurately represent that feature so

00:02:32,760 --> 00:02:38,000
you end up with a mesh that has minimum

00:02:35,670 --> 00:02:41,730
number of triangles to meet a tolerance

00:02:38,000 --> 00:02:44,819
to represent that point cloud' this was

00:02:41,730 --> 00:02:47,159
very key to the process planner to

00:02:44,819 --> 00:02:50,730
generate nice raster path trajectories

00:02:47,159 --> 00:02:53,639
to follow the curvature here's an

00:02:50,730 --> 00:02:55,349
example of the process planner so it's

00:02:53,639 --> 00:02:57,480
able to handle complex shapes you can

00:02:55,349 --> 00:02:59,370
see on the left and it shows on the

00:02:57,480 --> 00:03:05,340
right shows how it handles holes and the

00:02:59,370 --> 00:03:07,049
data generating the process pass here's

00:03:05,340 --> 00:03:09,299
an example of the closest point sequence

00:03:07,049 --> 00:03:11,700
planner so each one of those paths it

00:03:09,299 --> 00:03:13,139
then looks at each one of them and finds

00:03:11,700 --> 00:03:16,620
the closest point and it stitches it

00:03:13,139 --> 00:03:18,389
together so the blue arrow shows how it

00:03:16,620 --> 00:03:20,190
stitched it together to generate the

00:03:18,389 --> 00:03:25,979
overall trajectory to process that

00:03:20,190 --> 00:03:28,379
surface the code can be found under the

00:03:25,979 --> 00:03:30,659
Ross industrial organization on github

00:03:28,379 --> 00:03:33,540
another if you're interested in using

00:03:30,659 --> 00:03:34,979
the measure it's currently in an open

00:03:33,540 --> 00:03:39,989
pull request that's being integrated

00:03:34,979 --> 00:03:41,669
into PCL and you can follow it there and

00:03:39,989 --> 00:03:45,769
if you have any questions about either

00:03:41,669 --> 00:03:45,769
one of those feel free to contact me

00:03:45,900 --> 00:03:49,610

YouTube URL: https://www.youtube.com/watch?v=rKq-O3RtHPo


