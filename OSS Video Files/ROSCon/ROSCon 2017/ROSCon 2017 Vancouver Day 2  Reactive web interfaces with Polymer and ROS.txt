Title: ROSCon 2017 Vancouver Day 2  Reactive web interfaces with Polymer and ROS
Publication date: 2021-03-28
Playlist: ROSCon 2017
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2017 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License
Captions: 
	00:00:00,170 --> 00:00:05,370
all right hello everyone my name is

00:00:02,550 --> 00:00:08,700
Justin Wong and I work with my achok

00:00:05,370 --> 00:00:13,219
mark at the University of Washington so

00:00:08,700 --> 00:00:13,219
my talk is about building web interfaces

00:00:13,370 --> 00:00:18,810
and I wanted to explain just why it's

00:00:15,900 --> 00:00:20,250
it's personally important to me so in

00:00:18,810 --> 00:00:23,519
our lab we have a lot of undergrad

00:00:20,250 --> 00:00:25,470
researchers and more students who take

00:00:23,519 --> 00:00:27,720
our robotics capstone class as well and

00:00:25,470 --> 00:00:29,539
so when all our lab computers are being

00:00:27,720 --> 00:00:31,619
used or when they want to work from home

00:00:29,539 --> 00:00:34,800
you know they can they can get some work

00:00:31,619 --> 00:00:36,750
done over SSH and stuff like that but to

00:00:34,800 --> 00:00:38,940
use like these really awesome interfaces

00:00:36,750 --> 00:00:40,680
like rviz or our QT console or something

00:00:38,940 --> 00:00:42,840
like that you pretty much need good bun

00:00:40,680 --> 00:00:45,870
too and I've seen a lot of students

00:00:42,840 --> 00:00:48,570
struggle with installing VMs on their

00:00:45,870 --> 00:00:50,370
laptops which are really underpowered or

00:00:48,570 --> 00:00:52,309
they try and install Ubuntu on their

00:00:50,370 --> 00:00:55,170
laptops it's but it's the wrong version

00:00:52,309 --> 00:00:57,390
or they already have a different version

00:00:55,170 --> 00:00:59,280
of Ubuntu installed and so I've seen

00:00:57,390 --> 00:01:00,660
everything and I'm sure that people in

00:00:59,280 --> 00:01:04,290
this audience can empathize with that

00:01:00,660 --> 00:01:07,290
experience as well the other thing is

00:01:04,290 --> 00:01:08,700
just you know I our research is in human

00:01:07,290 --> 00:01:10,320
robot interaction so we really want to

00:01:08,700 --> 00:01:13,110
have modern interfaces for end-users

00:01:10,320 --> 00:01:16,140
that work on all devices and which are

00:01:13,110 --> 00:01:17,580
easy to deploy so the past you know

00:01:16,140 --> 00:01:20,430
we've always done demos and we've always

00:01:17,580 --> 00:01:22,259
had to haul around one of these new

00:01:20,430 --> 00:01:23,580
bunch of desktops with us and a monitor

00:01:22,259 --> 00:01:27,659
to show our vase or something like that

00:01:23,580 --> 00:01:29,400
and it's just not quite as convenient so

00:01:27,659 --> 00:01:31,619
getting to some of the positive reasons

00:01:29,400 --> 00:01:32,060
why I think web interfaces are really

00:01:31,619 --> 00:01:34,920
great

00:01:32,060 --> 00:01:37,439
of course it's cross-platform and this

00:01:34,920 --> 00:01:40,380
cross device so you can use it on phones

00:01:37,439 --> 00:01:42,180
or tablets I think a really important

00:01:40,380 --> 00:01:44,640
one is that there's a huge community of

00:01:42,180 --> 00:01:47,310
people who are very familiar with web

00:01:44,640 --> 00:01:50,700
development and in building really rich

00:01:47,310 --> 00:01:53,520
user interfaces with the web and then on

00:01:50,700 --> 00:01:55,500
mobile devices actually you know you'd

00:01:53,520 --> 00:01:57,360
be surprised to know about some of the

00:01:55,500 --> 00:01:59,280
app like features that are out there so

00:01:57,360 --> 00:02:01,680
you can add websites to the home screen

00:01:59,280 --> 00:02:04,890
and so then when they open from the home

00:02:01,680 --> 00:02:06,570
screen there's no browser UI you can

00:02:04,890 --> 00:02:08,640
send push notifications to them and you

00:02:06,570 --> 00:02:11,160
can configure them so that they'll load

00:02:08,640 --> 00:02:13,420
an app shell when the user is offline

00:02:11,160 --> 00:02:17,950
and so they'll still see your app just

00:02:13,420 --> 00:02:20,530
no data basically so here's an example

00:02:17,950 --> 00:02:22,209
of a web application that we developed

00:02:20,530 --> 00:02:24,610
in our lab that has been really helpful

00:02:22,209 --> 00:02:27,370
this is just to show like how the web

00:02:24,610 --> 00:02:29,709
could be useful so a lot of people spend

00:02:27,370 --> 00:02:31,989
you know a lot of time debugging by

00:02:29,709 --> 00:02:34,390
typing bras nodelist Roz node info Ross

00:02:31,989 --> 00:02:35,980
topic list and so on and this basically

00:02:34,390 --> 00:02:37,959
just puts it all in a web interface this

00:02:35,980 --> 00:02:39,700
is called the Ross Explorer you get a

00:02:37,959 --> 00:02:41,709
list of nodes and you click on a node

00:02:39,700 --> 00:02:43,959
and you see the topics it subscribes to

00:02:41,709 --> 00:02:45,880
our publishes to click on a topic you

00:02:43,959 --> 00:02:48,430
see the message type and the nodes that

00:02:45,880 --> 00:02:49,959
subscribe to it you click on a service

00:02:48,430 --> 00:02:52,150
you'll see the node that provides the

00:02:49,959 --> 00:02:55,060
service and the request and response

00:02:52,150 --> 00:02:56,590
definition and if you like look for a

00:02:55,060 --> 00:03:00,330
parameter you can see all the parameters

00:02:56,590 --> 00:03:04,209
you can edit the parameter or delete it

00:03:00,330 --> 00:03:05,500
I'm not sure if I yeah in the interest

00:03:04,209 --> 00:03:08,560
of time I'm just gonna move past that

00:03:05,500 --> 00:03:10,239
but all right so the outline of my talk

00:03:08,560 --> 00:03:11,830
I want to talk about how we built some

00:03:10,239 --> 00:03:14,110
of these web interfaces with something

00:03:11,830 --> 00:03:15,760
called web components and I want to talk

00:03:14,110 --> 00:03:17,859
about some Ross web components that

00:03:15,760 --> 00:03:19,780
we've developed and I'm gonna sort of

00:03:17,859 --> 00:03:21,640
interleave that with some more examples

00:03:19,780 --> 00:03:25,420
of web applications that we've developed

00:03:21,640 --> 00:03:27,340
in our lab using these tools all right

00:03:25,420 --> 00:03:29,950
so first of all what are web components

00:03:27,340 --> 00:03:34,180
so web components are a new HTML

00:03:29,950 --> 00:03:38,440
standard they basically describe how you

00:03:34,180 --> 00:03:40,750
can define your own HTML element and and

00:03:38,440 --> 00:03:44,620
put it in a web page so this works

00:03:40,750 --> 00:03:49,299
natively in all the major browsers or

00:03:44,620 --> 00:03:50,680
with a polyfill basically so this is

00:03:49,299 --> 00:03:53,530
just what it looks like when you want to

00:03:50,680 --> 00:03:55,959
use a web component so the first step is

00:03:53,530 --> 00:03:59,709
to add that polyfill just to make sure

00:03:55,959 --> 00:04:01,329
that you have all the features if the

00:03:59,709 --> 00:04:04,000
browser hasn't implemented them natively

00:04:01,329 --> 00:04:06,850
yet the next thing is that you'll import

00:04:04,000 --> 00:04:10,000
a web component the source of your web

00:04:06,850 --> 00:04:12,579
component and then lastly you can add it

00:04:10,000 --> 00:04:14,829
to your document so a web component is

00:04:12,579 --> 00:04:18,250
basically just an HTML element it may or

00:04:14,829 --> 00:04:20,320
may not have its own Dom so in this case

00:04:18,250 --> 00:04:22,390
I have an element called Ross WebSocket

00:04:20,320 --> 00:04:25,630
which just is a wrapper around Ross Lib

00:04:22,390 --> 00:04:30,640
GS the Ross connection so

00:04:25,630 --> 00:04:32,830
has no Dom but what makes it really

00:04:30,640 --> 00:04:35,800
useful is that these components can have

00:04:32,830 --> 00:04:38,110
internal state they can have publicly

00:04:35,800 --> 00:04:41,200
visible attributes or sorry properties

00:04:38,110 --> 00:04:42,970
that you can get or set and you can call

00:04:41,200 --> 00:04:45,160
methods or listen to events on them so

00:04:42,970 --> 00:04:47,110
basically they have like this public API

00:04:45,160 --> 00:04:48,850
and an internal state so it's kind of

00:04:47,110 --> 00:04:55,900
like bringing object-oriented

00:04:48,850 --> 00:04:58,180
programming to the web as it were the

00:04:55,900 --> 00:05:00,280
title of my talk includes the reference

00:04:58,180 --> 00:05:02,200
to a polymer although I realized it's

00:05:00,280 --> 00:05:04,480
actually not that important to this talk

00:05:02,200 --> 00:05:07,390
so basically polymer is just a library

00:05:04,480 --> 00:05:09,910
for creating web components and it also

00:05:07,390 --> 00:05:12,880
provides a declarative data binding

00:05:09,910 --> 00:05:15,550
syntax which is also available in many

00:05:12,880 --> 00:05:16,750
other JavaScript frameworks but the

00:05:15,550 --> 00:05:18,940
important thing is that you don't

00:05:16,750 --> 00:05:21,340
actually need polymer or any framework

00:05:18,940 --> 00:05:23,770
at all to use web components because web

00:05:21,340 --> 00:05:30,280
components are standard so they're just

00:05:23,770 --> 00:05:31,810
part of the native browser API but if

00:05:30,280 --> 00:05:33,160
you are going to use polymer then this

00:05:31,810 --> 00:05:35,880
is what it would look like to do some

00:05:33,160 --> 00:05:40,690
data binding so in this case let's say

00:05:35,880 --> 00:05:42,670
the user it gets disconnected so I can

00:05:40,690 --> 00:05:45,670
show this dialog box so I'm going to use

00:05:42,670 --> 00:05:47,680
two more custom elements called paper

00:05:45,670 --> 00:05:49,900
dialog and paper input these are just

00:05:47,680 --> 00:05:54,430
like a dialog box and a text input but

00:05:49,900 --> 00:05:58,150
fancy and I'm going to bind the URL

00:05:54,430 --> 00:06:01,200
field of the WebSocket connection to the

00:05:58,150 --> 00:06:04,750
the text input so that might look like

00:06:01,200 --> 00:06:06,670
this that's the binding right there

00:06:04,750 --> 00:06:07,210
there's just their particular syntax for

00:06:06,670 --> 00:06:09,790
doing so

00:06:07,210 --> 00:06:12,550
so it might look like this basically so

00:06:09,790 --> 00:06:14,890
whatever the WebSocket URL was before

00:06:12,550 --> 00:06:16,960
it'll get it'll populate that text input

00:06:14,890 --> 00:06:18,400
field and then if you type something

00:06:16,960 --> 00:06:20,830
different in the text input field then

00:06:18,400 --> 00:06:22,210
it will update the connection so it's

00:06:20,830 --> 00:06:24,310
just a two-way binding and you don't

00:06:22,210 --> 00:06:27,850
have to write any JavaScript to do that

00:06:24,310 --> 00:06:29,680
plumbing just another example I wanted

00:06:27,850 --> 00:06:32,560
to show so I have another element called

00:06:29,680 --> 00:06:35,020
Ross topic so you can say topic equals

00:06:32,560 --> 00:06:36,880
some topic name in this case o'clock and

00:06:35,020 --> 00:06:38,860
then you can bind whatever the most

00:06:36,880 --> 00:06:39,249
recent message that was received on that

00:06:38,860 --> 00:06:43,329
topic

00:06:39,249 --> 00:06:44,829
to a variable called time and then and

00:06:43,329 --> 00:06:46,779
this sir shows that you can do data

00:06:44,829 --> 00:06:48,129
binding with not just primitive types

00:06:46,779 --> 00:06:50,829
like strings or numbers but you can also

00:06:48,129 --> 00:06:53,499
do it with objects or arrays or whatever

00:06:50,829 --> 00:06:55,989
and you can also take these and put them

00:06:53,499 --> 00:06:58,269
in your Dom directly so this is what

00:06:55,989 --> 00:06:59,439
that might look like I keep on

00:06:58,269 --> 00:07:01,569
forgetting about these boxes all right

00:06:59,439 --> 00:07:03,249
so this is what it might look like it's

00:07:01,569 --> 00:07:05,259
not a very exciting demo but basically

00:07:03,249 --> 00:07:07,779
you can subscribe to a topic and just

00:07:05,259 --> 00:07:09,069
pop it into your DOM and you don't have

00:07:07,779 --> 00:07:13,539
to write any of that plumbing

00:07:09,069 --> 00:07:15,459
once again okay so as you've already

00:07:13,539 --> 00:07:17,799
seen a couple of Ross web components so

00:07:15,459 --> 00:07:19,659
we've written more of them and you can

00:07:17,799 --> 00:07:21,849
find them online at this website called

00:07:19,659 --> 00:07:24,579
web components org and if you just

00:07:21,849 --> 00:07:27,610
search for Ross you'll find all of them

00:07:24,579 --> 00:07:29,889
and if you click on any one of those

00:07:27,610 --> 00:07:32,679
links you'll reach a documentation page

00:07:29,889 --> 00:07:36,879
where you can see some sample code and

00:07:32,679 --> 00:07:38,679
some documentation on its API and so

00:07:36,879 --> 00:07:39,909
you've seen that most of these elements

00:07:38,679 --> 00:07:42,489
are pretty simple they're really just

00:07:39,909 --> 00:07:45,249
wrappers around Ross lib j/s like Ross

00:07:42,489 --> 00:07:48,399
topic Ross service but there are a

00:07:45,249 --> 00:07:49,659
couple of more complicated components

00:07:48,399 --> 00:07:51,849
that you can integrate into your app

00:07:49,659 --> 00:07:53,619
that really I hope will provide a lot of

00:07:51,849 --> 00:07:55,869
value so the one I want to highlight in

00:07:53,619 --> 00:07:59,529
particular is this element called Ross

00:07:55,869 --> 00:08:02,559
RV's so I'll show that to you so this is

00:07:59,529 --> 00:08:05,049
what Ross Arvest looks like basically on

00:08:02,559 --> 00:08:07,119
the left you have displays and so I can

00:08:05,049 --> 00:08:12,099
add a display like a grid I can

00:08:07,119 --> 00:08:14,259
reconfigure the display dynamically so

00:08:12,099 --> 00:08:15,879
here and I'll just say also it doesn't

00:08:14,259 --> 00:08:18,939
implement all the features that a

00:08:15,879 --> 00:08:21,399
regular Arvest does and it's probably

00:08:18,939 --> 00:08:23,289
buggier too so I don't recommend using

00:08:21,399 --> 00:08:26,439
it in production but I hope that people

00:08:23,289 --> 00:08:30,549
will experiment with it and send issues

00:08:26,439 --> 00:08:32,529
and pull requests and so on but yet you

00:08:30,549 --> 00:08:33,550
can reconfigure this display really

00:08:32,529 --> 00:08:35,709
easily you can also do it

00:08:33,550 --> 00:08:38,250
programmatically which will be shown in

00:08:35,709 --> 00:08:38,250
this video later

00:08:38,490 --> 00:08:42,879
we've got interactive markers so this is

00:08:41,259 --> 00:08:47,189
a really easy way to just add some

00:08:42,879 --> 00:08:50,230
interactivity to your to your webpage

00:08:47,189 --> 00:08:51,800
you can check and uncheck displays to

00:08:50,230 --> 00:08:56,209
show and hide them

00:08:51,800 --> 00:08:58,640
and so on and then we've got the config

00:08:56,209 --> 00:09:01,130
so as you modify the displays the config

00:08:58,640 --> 00:09:03,140
automatically updates and you can view

00:09:01,130 --> 00:09:05,390
the config or load a new config in that

00:09:03,140 --> 00:09:08,810
case I just pasted it in an old config

00:09:05,390 --> 00:09:10,490
that I had and then because it's a web

00:09:08,810 --> 00:09:13,790
component you can call methods on this

00:09:10,490 --> 00:09:15,410
web component to dynamically update the

00:09:13,790 --> 00:09:17,060
display so in this case I'm just

00:09:15,410 --> 00:09:20,750
reaching it to the dev tools and calling

00:09:17,060 --> 00:09:27,020
methods to show and hide these markers

00:09:20,750 --> 00:09:29,230
in the display all right so so basically

00:09:27,020 --> 00:09:32,690
I want to talk about a couple of

00:09:29,230 --> 00:09:35,570
patterns that we've used to make another

00:09:32,690 --> 00:09:37,790
application so first of all you can use

00:09:35,570 --> 00:09:38,930
web components like cross artists and

00:09:37,790 --> 00:09:42,110
I'll talk about these two patterns I

00:09:38,930 --> 00:09:44,779
found were useful so we made an

00:09:42,110 --> 00:09:46,970
application called rapid PVD which is a

00:09:44,779 --> 00:09:52,010
programming by demonstration application

00:09:46,970 --> 00:09:53,300
for the pr2 and the fetch robots so this

00:09:52,010 --> 00:09:55,160
kind of looks similar to the previous

00:09:53,300 --> 00:09:57,529
video but what's different is that

00:09:55,160 --> 00:09:59,630
actually raw Sarvis is just one part of

00:09:57,529 --> 00:10:01,970
this larger interface so there's this

00:09:59,630 --> 00:10:04,070
whole configuration of like what the

00:10:01,970 --> 00:10:06,290
robot should be doing if you look at the

00:10:04,070 --> 00:10:07,610
top there's like a list of steps and you

00:10:06,290 --> 00:10:08,930
can walk through the steps and preview

00:10:07,610 --> 00:10:14,029
what the robot would look like at each

00:10:08,930 --> 00:10:17,600
of those steps and so it's very easy to

00:10:14,029 --> 00:10:19,370
just plop a Arvest element in there and

00:10:17,600 --> 00:10:24,110
to dynamically configure it based on the

00:10:19,370 --> 00:10:27,140
needs of your application I want to talk

00:10:24,110 --> 00:10:28,970
about the reactive database pattern this

00:10:27,140 --> 00:10:32,930
isn't strictly necessary but I found it

00:10:28,970 --> 00:10:34,520
to be very fun so basically the the

00:10:32,930 --> 00:10:36,860
insight is that if you think about how

00:10:34,520 --> 00:10:40,310
you might implement a database on the on

00:10:36,860 --> 00:10:41,839
a website with Ross you might if you

00:10:40,310 --> 00:10:44,480
want to get something you might have a

00:10:41,839 --> 00:10:46,730
service that takes in an ID and then it

00:10:44,480 --> 00:10:48,470
returns the data and then you might have

00:10:46,730 --> 00:10:49,730
to like periodically call this service

00:10:48,470 --> 00:10:51,829
or something to check if it's been

00:10:49,730 --> 00:10:52,970
updated but actually what you can do

00:10:51,829 --> 00:10:55,579
instead is that you can just subscribe

00:10:52,970 --> 00:10:58,730
to a topic and get the the data on the

00:10:55,579 --> 00:11:01,250
topic and so that way whenever whenever

00:10:58,730 --> 00:11:03,500
it changes you get the latest data from

00:11:01,250 --> 00:11:04,540
the database and the secret to doing

00:11:03,500 --> 00:11:06,640
this is that you

00:11:04,540 --> 00:11:09,640
to use a latched publisher so a latched

00:11:06,640 --> 00:11:11,350
publisher is one in which the latest

00:11:09,640 --> 00:11:14,050
message that was sent on the publisher

00:11:11,350 --> 00:11:17,590
gets saved and so anyone that subscribes

00:11:14,050 --> 00:11:22,150
later will get the last message that was

00:11:17,590 --> 00:11:25,120
published and so so here for example if

00:11:22,150 --> 00:11:27,430
I have a database and I want to edit

00:11:25,120 --> 00:11:29,920
some piece of data or I'm updating a

00:11:27,430 --> 00:11:32,500
piece of data I'll do my actual database

00:11:29,920 --> 00:11:34,210
with like MongoDB or whatever and then

00:11:32,500 --> 00:11:36,700
if I don't already have a latched

00:11:34,210 --> 00:11:38,620
publisher for this particular item I'll

00:11:36,700 --> 00:11:42,670
create it so I'll create a publisher to

00:11:38,620 --> 00:11:45,310
slash program / 5 9 b 9a whatever

00:11:42,670 --> 00:11:48,100
whatever the idea is and I'll be sure to

00:11:45,310 --> 00:11:53,650
make that alleged culture and then I'll

00:11:48,100 --> 00:11:55,870
publish the data out and then so again

00:11:53,650 --> 00:11:58,200
the way that clients will get the data

00:11:55,870 --> 00:12:01,120
is that they subscribe to a topic and

00:11:58,200 --> 00:12:02,140
actually instead of having a call back

00:12:01,120 --> 00:12:04,000
and rear-ending

00:12:02,140 --> 00:12:06,910
I'm actually going to use data binding

00:12:04,000 --> 00:12:08,320
to - I'll just show you how you can use

00:12:06,910 --> 00:12:12,700
data binding to go all the way from the

00:12:08,320 --> 00:12:15,100
URL down to the view so here I'm using a

00:12:12,700 --> 00:12:17,920
web component called a Prout which

00:12:15,100 --> 00:12:19,720
basically just parses the URL so in this

00:12:17,920 --> 00:12:22,810
case I'm going to parse an ID out of the

00:12:19,720 --> 00:12:26,620
URL and save it into this into this

00:12:22,810 --> 00:12:29,290
variable called route data next I'm

00:12:26,620 --> 00:12:31,510
gonna configure or my my Ross topic is

00:12:29,290 --> 00:12:33,880
automatically configured to subscribe to

00:12:31,510 --> 00:12:36,250
slash program slash and then whatever

00:12:33,880 --> 00:12:39,250
the ID is okay so that just comes from

00:12:36,250 --> 00:12:40,930
the URL and then it's subscribing to

00:12:39,250 --> 00:12:42,340
this topic and we know that the data is

00:12:40,930 --> 00:12:44,470
being published on this topic so

00:12:42,340 --> 00:12:47,170
whatever the last message is it will end

00:12:44,470 --> 00:12:49,690
up in this program variable and I can

00:12:47,170 --> 00:12:51,430
pass that program variable into yet

00:12:49,690 --> 00:12:53,230
another web component that is

00:12:51,430 --> 00:12:58,030
responsible for doing the actual

00:12:53,230 --> 00:12:59,440
rendering of the view so this is a video

00:12:58,030 --> 00:13:03,430
of kind of like what the consequences of

00:12:59,440 --> 00:13:06,010
a reactive database looks like so here I

00:13:03,430 --> 00:13:09,460
have two browser windows open and all

00:13:06,010 --> 00:13:12,640
the changes that I make and one in one

00:13:09,460 --> 00:13:15,250
window are being reflected in the other

00:13:12,640 --> 00:13:17,170
window so it's kind of like a it's kind

00:13:15,250 --> 00:13:18,160
of like a Google Docs kind of experience

00:13:17,170 --> 00:13:20,620
where you're seeing

00:13:18,160 --> 00:13:22,660
updates happen live that are happening

00:13:20,620 --> 00:13:24,160
in another client so this isn't like a

00:13:22,660 --> 00:13:26,170
like a screen mirroring thing or

00:13:24,160 --> 00:13:31,600
anything this is just using Ross to do

00:13:26,170 --> 00:13:33,009
reactive database stuff so for example

00:13:31,600 --> 00:13:36,250
I'm deleting a step in this window and

00:13:33,009 --> 00:13:37,689
then and then actually I'm gonna go back

00:13:36,250 --> 00:13:38,980
and I'm gonna actually delete one of the

00:13:37,689 --> 00:13:44,199
programs and you'll see that both of

00:13:38,980 --> 00:13:45,790
them get deleted so that's that's the

00:13:44,199 --> 00:13:49,029
power of a reactive database you can get

00:13:45,790 --> 00:13:53,019
like these cool dynamic updates between

00:13:49,029 --> 00:13:54,790
multiple clients the other pattern I

00:13:53,019 --> 00:13:58,329
wanted to talk about is what I call the

00:13:54,790 --> 00:14:00,579
user event pattern it's not necessarily

00:13:58,329 --> 00:14:02,740
new but I thought it was useful for us

00:14:00,579 --> 00:14:05,680
so basically the way that this works is

00:14:02,740 --> 00:14:09,250
that your front-end instead of doing any

00:14:05,680 --> 00:14:11,620
actual work itself relating to calling

00:14:09,250 --> 00:14:13,389
out to the database or whatever whenever

00:14:11,620 --> 00:14:16,300
the user like clicks a button or does

00:14:13,389 --> 00:14:18,550
something that modifies your data it

00:14:16,300 --> 00:14:20,889
just publishes an event that describes

00:14:18,550 --> 00:14:22,930
the change that happened and then it's

00:14:20,889 --> 00:14:25,720
up to the server to interpret that event

00:14:22,930 --> 00:14:28,630
and modify the data and then if it has a

00:14:25,720 --> 00:14:31,230
reactive database in it then it will

00:14:28,630 --> 00:14:34,180
republish the data back to the clients

00:14:31,230 --> 00:14:36,550
so the main reason why you might want to

00:14:34,180 --> 00:14:38,319
do this is if you're doing like some

00:14:36,550 --> 00:14:39,880
human robot interaction research and you

00:14:38,319 --> 00:14:42,220
want to do a user study or something

00:14:39,880 --> 00:14:43,630
it's very easy to basically record all

00:14:42,220 --> 00:14:46,750
the front-end interactions that happen

00:14:43,630 --> 00:14:51,250
just by using ross bag on this events

00:14:46,750 --> 00:14:54,160
topic so just to put that visually let's

00:14:51,250 --> 00:14:55,750
say you have your browsers here and I'm

00:14:54,160 --> 00:14:58,360
in one of these browsers and I'm editing

00:14:55,750 --> 00:15:00,639
a program so I click a button that says

00:14:58,360 --> 00:15:04,569
add step so this will generate a message

00:15:00,639 --> 00:15:05,889
called a user event and it will have

00:15:04,569 --> 00:15:08,470
some information that says like add a

00:15:05,889 --> 00:15:11,079
step to program $5.99 something

00:15:08,470 --> 00:15:13,959
something and then it publishes it the

00:15:11,079 --> 00:15:16,899
server gets that and then it does its

00:15:13,959 --> 00:15:18,759
update and if it's using the reactive

00:15:16,899 --> 00:15:22,629
database it will republish the updated

00:15:18,759 --> 00:15:23,680
program back out to all the browsers so

00:15:22,629 --> 00:15:27,449
that's how you can get something like

00:15:23,680 --> 00:15:27,449
what we saw in that video earlier

00:15:29,130 --> 00:15:37,180
okay so I'm not actually going to go

00:15:34,990 --> 00:15:38,589
through the QuickStart because the

00:15:37,180 --> 00:15:40,240
slides I believe are all going to be

00:15:38,589 --> 00:15:44,140
available on the Ross Khan website later

00:15:40,240 --> 00:15:46,450
but this will just take you through like

00:15:44,140 --> 00:15:48,670
if you haven't like ever worked with

00:15:46,450 --> 00:15:50,200
node before and you need to install node

00:15:48,670 --> 00:15:52,410
like this will take you from there all

00:15:50,200 --> 00:15:55,720
the way to like creating a project

00:15:52,410 --> 00:15:58,420
downloading the components and basically

00:15:55,720 --> 00:16:01,990
creating like an instance of Ross our

00:15:58,420 --> 00:16:05,649
viz on a full fullscreen on a on a web

00:16:01,990 --> 00:16:07,180
page and there's also a note for for

00:16:05,649 --> 00:16:11,860
react users it's it's a little bit

00:16:07,180 --> 00:16:14,649
inconvenient some links to all the stuff

00:16:11,860 --> 00:16:16,089
that I showed including some some web

00:16:14,649 --> 00:16:20,880
projects I haven't talked about in this

00:16:16,089 --> 00:16:23,680
presentation I also wanted to show that

00:16:20,880 --> 00:16:26,010
this wasn't just like a research project

00:16:23,680 --> 00:16:28,600
that that stayed in the lab we actually

00:16:26,010 --> 00:16:31,899
used this for real to program the fetch

00:16:28,600 --> 00:16:34,149
robot so we had two months ago a group

00:16:31,899 --> 00:16:37,570
of high school students and they all had

00:16:34,149 --> 00:16:39,399
a wide range of disabilities basically

00:16:37,570 --> 00:16:42,220
and we did a week-long programming

00:16:39,399 --> 00:16:45,310
workshop with them so they used a web

00:16:42,220 --> 00:16:49,000
based coding interface as well as rapid

00:16:45,310 --> 00:16:50,410
pbd to program some arm motions for the

00:16:49,000 --> 00:16:53,500
fetch robot and so they programmed the

00:16:50,410 --> 00:16:57,160
fetch to do some tasks in a simulated

00:16:53,500 --> 00:16:58,480
grocery environment and so that was a

00:16:57,160 --> 00:17:00,160
lot of fun it was very important that

00:16:58,480 --> 00:17:02,040
they were able to use their own laptops

00:17:00,160 --> 00:17:05,490
because they have their own

00:17:02,040 --> 00:17:07,900
accessibility settings and configuration

00:17:05,490 --> 00:17:10,120
so anyways I hope that this talk shows

00:17:07,900 --> 00:17:12,100
that using the web can be a really

00:17:10,120 --> 00:17:14,589
powerful way to develop interfaces for

00:17:12,100 --> 00:17:16,540
robots and I hope that the next

00:17:14,589 --> 00:17:19,419
generation of robot interfaces are all

00:17:16,540 --> 00:17:21,839
built with the web as well well thank

00:17:19,419 --> 00:17:21,839
you very much

00:17:25,389 --> 00:17:30,879
all right we've got time for a question

00:17:28,639 --> 00:17:35,029
or two David

00:17:30,879 --> 00:17:37,009
this is brilliant do you have or what in

00:17:35,029 --> 00:17:40,399
Ross RVs what is the rendering engine

00:17:37,009 --> 00:17:44,659
that you have is it the lib 3dj s or

00:17:40,399 --> 00:17:47,450
something else it is Ross 3dj s so

00:17:44,659 --> 00:17:49,519
everything that is in there is basically

00:17:47,450 --> 00:17:51,320
kind of like a wrapper around Ross 3dj s

00:17:49,519 --> 00:17:53,090
it's all stuff that you could program

00:17:51,320 --> 00:17:55,730
yourself on the main thing is that

00:17:53,090 --> 00:17:57,679
you're just dynamically able to add

00:17:55,730 --> 00:18:02,029
stuff and remove stuff at runtime

00:17:57,679 --> 00:18:03,799
oh yeah I just have two really quick

00:18:02,029 --> 00:18:07,039
questions also I think this project is

00:18:03,799 --> 00:18:08,960
amazing what have you done any testing

00:18:07,039 --> 00:18:10,730
on what happens when a user deletes data

00:18:08,960 --> 00:18:13,879
from the database that another user is

00:18:10,730 --> 00:18:16,879
working on um that's a good question I

00:18:13,879 --> 00:18:19,669
think basically like I avoided that in

00:18:16,879 --> 00:18:24,889
that video that I showed you but

00:18:19,669 --> 00:18:28,070
basically it basically nothing would

00:18:24,889 --> 00:18:30,669
happen so in fact it might the second

00:18:28,070 --> 00:18:34,489
user might reinsert it as a result of

00:18:30,669 --> 00:18:37,100
that so like when when you see me like

00:18:34,489 --> 00:18:40,359
delete a program and then you see the

00:18:37,100 --> 00:18:43,340
two lists of programs get updated sorry

00:18:40,359 --> 00:18:46,249
what's actually happening there is there

00:18:43,340 --> 00:18:48,019
is a separate there's a separate state

00:18:46,249 --> 00:18:49,159
that is just the list of programs that's

00:18:48,019 --> 00:18:51,470
available so that's what's getting

00:18:49,159 --> 00:18:52,820
updated okay then the last thing was

00:18:51,470 --> 00:18:56,570
have you done any sort of performance

00:18:52,820 --> 00:19:00,139
metrics on like how how fast you can pub

00:18:56,570 --> 00:19:02,269
and sub from inside polymer versus just

00:19:00,139 --> 00:19:06,980
straight Jas talking to Ross Lee Ross

00:19:02,269 --> 00:19:10,700
bridge um no I haven't done that I it's

00:19:06,980 --> 00:19:14,359
not that much of a difference it just

00:19:10,700 --> 00:19:16,369
depends on how polymer is implemented I

00:19:14,359 --> 00:19:19,359
guess and how much copying or something

00:19:16,369 --> 00:19:22,940
it does but but all I use raw slip Jase

00:19:19,359 --> 00:19:28,059
internally so yeah cool thank you thank

00:19:22,940 --> 00:19:28,059

YouTube URL: https://www.youtube.com/watch?v=G7Lcdgqu5hU


