Title: ROSCon 2017 Vancouver Day 1  Autonomous Racing Car for Formula Student Driverless
Publication date: 2021-03-28
Playlist: ROSCon 2017
Description: 
	Unaltered video by Open Robotics from http://roscon.ros.org/2017 under the Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) License
Captions: 
	00:00:00,000 --> 00:00:07,080
thank you very much so my name is Jakob

00:00:04,500 --> 00:00:10,290
Zahn I'm a master student at the ETH

00:00:07,080 --> 00:00:12,269
Zurich studying robotics and I would

00:00:10,290 --> 00:00:15,509
like to present you in behalf of Ames

00:00:12,269 --> 00:00:18,420
driverless our project how we used rose

00:00:15,509 --> 00:00:20,340
in our autonomous race car which was

00:00:18,420 --> 00:00:24,680
built for formulas and driverless

00:00:20,340 --> 00:00:27,779
competition the first ever competition

00:00:24,680 --> 00:00:29,580
at the beginning I would like to start

00:00:27,779 --> 00:00:31,590
with a short video that you get a

00:00:29,580 --> 00:00:34,170
feeling about the car how they look like

00:00:31,590 --> 00:00:43,620
or what you can achieve with Ross in

00:00:34,170 --> 00:00:48,000
very short time okay there should be

00:00:43,620 --> 00:00:51,050
music however apparently doesn't work so

00:00:48,000 --> 00:00:54,809
the car is a single seated car which

00:00:51,050 --> 00:00:57,989
with very high will torque which can

00:00:54,809 --> 00:01:01,079
achieve very fast accelerations however

00:00:57,989 --> 00:01:06,950
the top speed is very limited since the

00:01:01,079 --> 00:01:10,439
track is very tight the car is still

00:01:06,950 --> 00:01:12,869
interchangeable so in sense of steel

00:01:10,439 --> 00:01:16,799
driver can drive it and we turn on

00:01:12,869 --> 00:01:19,040
autonomous mode just by switching a

00:01:16,799 --> 00:01:19,040
switch

00:01:25,869 --> 00:01:33,500
so in this presentation I would like to

00:01:28,640 --> 00:01:36,320
tell you shortly about our team the

00:01:33,500 --> 00:01:38,810
competition by itself algorithms used an

00:01:36,320 --> 00:01:40,310
overall concept of the car and the tools

00:01:38,810 --> 00:01:46,789
we have developed during the entire

00:01:40,310 --> 00:01:50,450
project so so the aims racing was

00:01:46,789 --> 00:01:52,850
started in the 2007 as a combustion car

00:01:50,450 --> 00:01:55,610
but they were changed immediately to the

00:01:52,850 --> 00:01:58,490
electric cars as they were announced we

00:01:55,610 --> 00:02:00,979
we hold we were first in a world ranking

00:01:58,490 --> 00:02:03,830
in an electric competition for multiple

00:02:00,979 --> 00:02:07,610
years 2013 14 15 and hopefully we will

00:02:03,830 --> 00:02:09,860
be also this year 2017 and and said

00:02:07,610 --> 00:02:12,380
racing holds a world record in

00:02:09,860 --> 00:02:14,840
acceleration of electric vehicles from

00:02:12,380 --> 00:02:19,730
zero to hundred with time something a

00:02:14,840 --> 00:02:22,239
little bit above 1.5 seconds the DRI the

00:02:19,730 --> 00:02:25,910
new e new driverless team this year

00:02:22,239 --> 00:02:27,680
consists of eight master students and we

00:02:25,910 --> 00:02:30,680
were helped with additional eight other

00:02:27,680 --> 00:02:33,739
guys who helped mainly with the hardware

00:02:30,680 --> 00:02:36,079
part of the car in the beginning of the

00:02:33,739 --> 00:02:38,239
project we set it three main goals since

00:02:36,079 --> 00:02:40,730
it was first competition ever we wanted

00:02:38,239 --> 00:02:43,040
to finish all dynamic disciplines we

00:02:40,730 --> 00:02:45,859
wanted to maximize overall points thus

00:02:43,040 --> 00:02:49,040
win the competition and pass on the

00:02:45,859 --> 00:02:53,209
knowledge to the team the next year in

00:02:49,040 --> 00:02:55,640
2018 shortly about the competition

00:02:53,209 --> 00:02:58,100
itself so formulas June drive for most

00:02:55,640 --> 00:03:01,450
in Germany is a huge design competition

00:02:58,100 --> 00:03:04,190
for university students where every team

00:03:01,450 --> 00:03:06,709
should build a single seated formula

00:03:04,190 --> 00:03:08,540
style race car which is driven either

00:03:06,709 --> 00:03:12,260
electrically or it has a combustion

00:03:08,540 --> 00:03:14,420
engine and this year is the first time

00:03:12,260 --> 00:03:17,660
there is was drive less category where

00:03:14,420 --> 00:03:20,390
every team should rebuild old car and it

00:03:17,660 --> 00:03:24,680
out change to their autonomous versions

00:03:20,390 --> 00:03:27,859
on this picture you can see 115 teams

00:03:24,680 --> 00:03:28,790
from around the globe where 65 are

00:03:27,859 --> 00:03:35,359
combustion

00:03:28,790 --> 00:03:38,000
35 are electric and 15 are autonomous so

00:03:35,359 --> 00:03:41,480
the F is for master in Germany come

00:03:38,000 --> 00:03:43,040
addition is divided two part static

00:03:41,480 --> 00:03:44,510
disciplines and dynamic disciplines

00:03:43,040 --> 00:03:46,700
I'll mainly focus on the dynamic

00:03:44,510 --> 00:03:49,610
disciplines which are skip at an

00:03:46,700 --> 00:03:52,670
acceleration and the main even which is

00:03:49,610 --> 00:03:54,770
a trig drive with efficiency as you can

00:03:52,670 --> 00:03:59,480
see it contributes the most to the final

00:03:54,770 --> 00:04:02,030
points the track drive as in fact Drive

00:03:59,480 --> 00:04:05,300
discipline every team drives on a

00:04:02,030 --> 00:04:07,940
previously unknown track which is marked

00:04:05,300 --> 00:04:09,920
just by a cones on left and right side

00:04:07,940 --> 00:04:13,610
yellow and blue as you can see in a

00:04:09,920 --> 00:04:17,060
picture every team should start round

00:04:13,610 --> 00:04:19,370
drive ten laps and finish autonomously

00:04:17,060 --> 00:04:23,210
everything must be done just by turning

00:04:19,370 --> 00:04:25,280
on the switch since the since the track

00:04:23,210 --> 00:04:27,080
is unknown there is possibility to do

00:04:25,280 --> 00:04:30,169
so-called track walk so 30 minutes

00:04:27,080 --> 00:04:32,570
before the actual Drive every team has

00:04:30,169 --> 00:04:34,520
possibility to somehow push around a

00:04:32,570 --> 00:04:36,290
device with a single wheel and any kind

00:04:34,520 --> 00:04:38,450
of sensors on top of it and build either

00:04:36,290 --> 00:04:42,620
map or do whether they watered whatever

00:04:38,450 --> 00:04:44,390
everything wants the second did I know

00:04:42,620 --> 00:04:47,270
my discipline is a skidpad where every

00:04:44,390 --> 00:04:49,430
team should drive two circles to the

00:04:47,270 --> 00:04:52,010
right and two circles to the back start

00:04:49,430 --> 00:04:54,050
and begin autonomously in this

00:04:52,010 --> 00:04:56,150
discipline the Maeby's previously known

00:04:54,050 --> 00:04:58,660
so we know precisely the position of

00:04:56,150 --> 00:05:03,830
every cone and how it will be oriented

00:04:58,660 --> 00:05:05,570
thus the it should so the finishing this

00:05:03,830 --> 00:05:07,040
is sped up but it should look like

00:05:05,570 --> 00:05:10,760
something like this so start and finish

00:05:07,040 --> 00:05:12,919
totally autonomously the used platform

00:05:10,760 --> 00:05:14,810
for this project was a flew Ella which

00:05:12,919 --> 00:05:17,630
was built for formulas Gian electric

00:05:14,810 --> 00:05:21,500
competition 2015 it is a four wheel

00:05:17,630 --> 00:05:23,360
driven electric car with which gives us

00:05:21,500 --> 00:05:25,669
the possibility to use torque vectoring

00:05:23,360 --> 00:05:28,790
so we are able to control every single

00:05:25,669 --> 00:05:31,160
wheel independently and we decided to

00:05:28,790 --> 00:05:32,710
break just break by recuperation so not

00:05:31,160 --> 00:05:36,520
use the real brakes

00:05:32,710 --> 00:05:39,260
during the drive just for the emergency

00:05:36,520 --> 00:05:42,200
it has as you can see on the rendering

00:05:39,260 --> 00:05:43,669
it has full aerodynamic package hi wheel

00:05:42,200 --> 00:05:47,200
torque which allows it to accelerate

00:05:43,669 --> 00:05:49,700
from zero to 100 just under two seconds

00:05:47,200 --> 00:05:51,470
and it has very lightweight design does

00:05:49,700 --> 00:05:54,320
everything is constructed from cargo

00:05:51,470 --> 00:05:56,300
carbon fiber in order to make a drive

00:05:54,320 --> 00:05:58,970
autonomously we have to we had to add

00:05:56,300 --> 00:06:00,500
some multiple sensors so the first one

00:05:58,970 --> 00:06:02,780
is a ground speed sensor which measures

00:06:00,500 --> 00:06:05,300
the lateral longitudinal velocities in

00:06:02,780 --> 00:06:08,230
the body frame of the car this sensor

00:06:05,300 --> 00:06:11,510
was used also in 2015 so we added more

00:06:08,230 --> 00:06:14,800
first one is a stereo stereo camera with

00:06:11,510 --> 00:06:18,740
IMU in the top on top of the manual hook

00:06:14,800 --> 00:06:23,780
an ENSO GPS and I am you under the seat

00:06:18,740 --> 00:06:25,430
and from the lighter the line sensor now

00:06:23,780 --> 00:06:27,920
I will shortly tell you about overall

00:06:25,430 --> 00:06:30,470
concept and algorithm is used which were

00:06:27,920 --> 00:06:32,480
based on a framework seating and act so

00:06:30,470 --> 00:06:34,340
at the end we had a electronic control

00:06:32,480 --> 00:06:37,100
unit which was a real-time computer

00:06:34,340 --> 00:06:40,790
which was handling all the steering

00:06:37,100 --> 00:06:44,410
motor and EBS so emergency brake system

00:06:40,790 --> 00:06:46,280
on the car which was communicating or

00:06:44,410 --> 00:06:48,620
communicating with a master computer

00:06:46,280 --> 00:06:51,140
which is industrial based computer which

00:06:48,620 --> 00:06:52,669
was running already ROS which was

00:06:51,140 --> 00:06:56,230
communicating gathering all the data

00:06:52,669 --> 00:06:58,910
from available sensors as lidar odometry

00:06:56,230 --> 00:07:00,710
GPS or ground speed sensors was running

00:06:58,910 --> 00:07:04,280
lighter pipeline so detecting the cones

00:07:00,710 --> 00:07:06,790
in the point cloud building a maps

00:07:04,280 --> 00:07:09,200
running a slam and forwarding all the

00:07:06,790 --> 00:07:11,540
position in the map that the sensor

00:07:09,200 --> 00:07:13,669
fusion and in the end a trajectory

00:07:11,540 --> 00:07:15,020
generation so figuring out where to go

00:07:13,669 --> 00:07:18,410
where the track actually is and

00:07:15,020 --> 00:07:21,560
controlling to follow given path in

00:07:18,410 --> 00:07:23,660
addition we had to equip the car with

00:07:21,560 --> 00:07:26,090
one additional computer which is a slave

00:07:23,660 --> 00:07:29,900
computer also running Rose is the high

00:07:26,090 --> 00:07:32,630
end i7 computer which is running just

00:07:29,900 --> 00:07:34,760
the visual visual part of all our

00:07:32,630 --> 00:07:38,020
Gardens so gathering the stereo camera I

00:07:34,760 --> 00:07:40,490
knew and running slam and connection

00:07:38,020 --> 00:07:42,470
everything is equipped inside but as you

00:07:40,490 --> 00:07:46,550
can see the grey small box over there

00:07:42,470 --> 00:07:50,140
with a many heatsink on top there is all

00:07:46,550 --> 00:07:53,330
the other computers are taken there

00:07:50,140 --> 00:07:55,970
since this project was needed many

00:07:53,330 --> 00:07:57,770
packages to be run at the same time we

00:07:55,970 --> 00:08:00,860
have developed so Kohala the safety

00:07:57,770 --> 00:08:03,050
package which was launching all the

00:08:00,860 --> 00:08:05,090
required knowns and monitoring the use

00:08:03,050 --> 00:08:08,870
resources of every of this mode

00:08:05,090 --> 00:08:12,170
or ever his notes every package was

00:08:08,870 --> 00:08:14,870
streaming heartbeats and giving kind of

00:08:12,170 --> 00:08:16,700
health and the high level safety was

00:08:14,870 --> 00:08:18,890
listening to all of these and it has

00:08:16,700 --> 00:08:20,750
measured how much of every of this

00:08:18,890 --> 00:08:22,910
package can be convinced how many by

00:08:20,750 --> 00:08:25,700
heartbeat can be missed and if multiple

00:08:22,910 --> 00:08:28,640
of these heartbeats are missed the high

00:08:25,700 --> 00:08:31,580
level safety can trigger emergency brake

00:08:28,640 --> 00:08:34,390
system and lock all the wheels and stop

00:08:31,580 --> 00:08:36,770
the car as soon as it's possible of

00:08:34,390 --> 00:08:39,140
course we have developed some kind of

00:08:36,770 --> 00:08:41,930
configure configuration file Yama file

00:08:39,140 --> 00:08:43,880
where we can specify what packages

00:08:41,930 --> 00:08:46,910
should be launched at the same time for

00:08:43,880 --> 00:08:48,410
a given mission well what what topic are

00:08:46,910 --> 00:08:50,750
for the heartbeat and what should happen

00:08:48,410 --> 00:08:54,920
if multiple of these heartbeats are

00:08:50,750 --> 00:08:56,960
missed of course we had to run it

00:08:54,920 --> 00:08:59,750
somehow so we have developed a control

00:08:56,960 --> 00:09:02,990
station based on our QT plugins so it's

00:08:59,750 --> 00:09:05,840
totally configurable which launch is the

00:09:02,990 --> 00:09:08,450
given emission the given event and we

00:09:05,840 --> 00:09:11,000
are able to locate or see there

00:09:08,450 --> 00:09:13,730
perfectly what you what nodes are using

00:09:11,000 --> 00:09:16,010
what kind of resources and at the same

00:09:13,730 --> 00:09:18,530
time it starts to record so start to

00:09:16,010 --> 00:09:20,990
record all the Rose bags which further

00:09:18,530 --> 00:09:23,380
on we can handle on the right side you

00:09:20,990 --> 00:09:26,360
can see another GUI where we can filter

00:09:23,380 --> 00:09:28,610
efficiently all the packages we want to

00:09:26,360 --> 00:09:30,500
use or the just messages we want for

00:09:28,610 --> 00:09:36,560
example or just the sensors without any

00:09:30,500 --> 00:09:38,630
kind of debugging in the future now a

00:09:36,560 --> 00:09:40,580
little bit on the algorithms by itself

00:09:38,630 --> 00:09:42,890
so the slave which is running the visual

00:09:40,580 --> 00:09:45,710
pipeline it has the same user camera

00:09:42,890 --> 00:09:46,580
with - as I said already our dairy used

00:09:45,710 --> 00:09:49,310
Rovio

00:09:46,580 --> 00:09:51,710
wheat which is a visual odometry with

00:09:49,310 --> 00:09:55,040
fusion with orb slam which is a visual

00:09:51,710 --> 00:09:58,220
slam and Rovio's is some kind of prior

00:09:55,040 --> 00:10:00,170
for the visual slam as you can see on

00:09:58,220 --> 00:10:04,490
the video we are able with this system

00:10:00,170 --> 00:10:07,220
to build the map and successfully do

00:10:04,490 --> 00:10:10,190
also the loop closures and this happens

00:10:07,220 --> 00:10:13,490
while this car with this data set was

00:10:10,190 --> 00:10:16,340
driven by a human driver so it's kind of

00:10:13,490 --> 00:10:17,360
fast on top of these we run the cone

00:10:16,340 --> 00:10:19,519
detection

00:10:17,360 --> 00:10:22,399
which is based on the cascade classifier

00:10:19,519 --> 00:10:24,680
on these features in the map this is

00:10:22,399 --> 00:10:27,620
open source projects and there is also

00:10:24,680 --> 00:10:29,420
one of our datasets except the one that

00:10:27,620 --> 00:10:33,709
you see on the video so you can download

00:10:29,420 --> 00:10:36,470
it play with it in the master side we

00:10:33,709 --> 00:10:37,970
had a semantic slam which was based on

00:10:36,470 --> 00:10:41,450
the fast lamp so it's parsed the

00:10:37,970 --> 00:10:43,459
particle based slam for this purpose we

00:10:41,450 --> 00:10:44,959
have developed two main packages so the

00:10:43,459 --> 00:10:46,880
first one which was simulator

00:10:44,959 --> 00:10:48,829
configuration observer that means that

00:10:46,880 --> 00:10:51,649
we are able to simulate the cone

00:10:48,829 --> 00:10:54,950
observations and change any kind of

00:10:51,649 --> 00:10:58,040
parameter in the in the slam and the

00:10:54,950 --> 00:11:01,250
same time it's kind of useful for

00:10:58,040 --> 00:11:03,890
visualizing and the slam localization

00:11:01,250 --> 00:11:06,260
mode runs on the car the slam can run on

00:11:03,890 --> 00:11:08,029
two different modes so either we can be

00:11:06,260 --> 00:11:10,220
mapping so run actually the slam or we

00:11:08,029 --> 00:11:14,269
can just localized already in pre-loaded

00:11:10,220 --> 00:11:16,279
map it is very useful to develop GUI

00:11:14,269 --> 00:11:18,950
tools or graphical user interface

00:11:16,279 --> 00:11:22,490
because it speeds up all the development

00:11:18,950 --> 00:11:24,410
you can see the simulator here where we

00:11:22,490 --> 00:11:26,750
can draw any kind of track we want any

00:11:24,410 --> 00:11:29,390
kind of cone positions and it simulates

00:11:26,750 --> 00:11:32,060
the observation is a given radius in

00:11:29,390 --> 00:11:34,040
this case we don't care about left and

00:11:32,060 --> 00:11:36,980
right side which is just without the

00:11:34,040 --> 00:11:38,540
information from the cameras on the on

00:11:36,980 --> 00:11:40,339
the right video you could see the gray

00:11:38,540 --> 00:11:43,790
part which were the potential particles

00:11:40,339 --> 00:11:45,709
and this is the most likely particle and

00:11:43,790 --> 00:11:47,480
when the loop closure happens we can

00:11:45,709 --> 00:11:48,620
draw left and right boundaries and

00:11:47,480 --> 00:11:52,670
complete the middle line out

00:11:48,620 --> 00:11:55,579
automatically next for the sensor fusion

00:11:52,670 --> 00:11:57,589
we use the extended kalman filter which

00:11:55,579 --> 00:11:59,959
fuses all the informations from sensors

00:11:57,589 --> 00:12:01,820
so if position in the map is available

00:11:59,959 --> 00:12:04,550
so after the loop closure

00:12:01,820 --> 00:12:07,699
it is also fused there otherwise we use

00:12:04,550 --> 00:12:10,339
just Jeep I am you they´ll velocity

00:12:07,699 --> 00:12:13,130
sensor will be odometry of course the

00:12:10,339 --> 00:12:14,930
sensors are not perfect so we have in we

00:12:13,130 --> 00:12:17,720
have introduced a also outlier ejection

00:12:14,930 --> 00:12:20,959
and the output of this extended Kalman

00:12:17,720 --> 00:12:23,390
filter is the full state of the car as

00:12:20,959 --> 00:12:24,649
you might know it's sometimes hard to

00:12:23,390 --> 00:12:28,069
debug the Kalman filter

00:12:24,649 --> 00:12:29,870
thus with every use many custom

00:12:28,069 --> 00:12:31,250
debugging messages which were used just

00:12:29,870 --> 00:12:33,860
purely for debug

00:12:31,250 --> 00:12:37,850
and further on visualize in Arcata multi

00:12:33,860 --> 00:12:39,800
pot it's very useful to and also RVs of

00:12:37,850 --> 00:12:42,710
course with many plugins as I am your

00:12:39,800 --> 00:12:44,540
variants plotting we had also

00:12:42,710 --> 00:12:46,700
possibility we developed also a gazebo

00:12:44,540 --> 00:12:49,580
simulation which was able to simulate

00:12:46,700 --> 00:12:52,450
the entire car and was able to simulate

00:12:49,580 --> 00:12:55,040
all the sensors which we have on the car

00:12:52,450 --> 00:12:57,350
the car can drive in two different modes

00:12:55,040 --> 00:12:59,600
so first which is called we call

00:12:57,350 --> 00:13:01,760
discovery mode where there is no or very

00:12:59,600 --> 00:13:04,340
little prior knowledge about the about

00:13:01,760 --> 00:13:06,500
the track by itself so we drive just

00:13:04,340 --> 00:13:09,770
based on the local observation of the

00:13:06,500 --> 00:13:11,540
cones thus it's very slow because it has

00:13:09,770 --> 00:13:14,240
to assume there comes any kind of

00:13:11,540 --> 00:13:17,450
Harappan very close so let's say 180

00:13:14,240 --> 00:13:19,790
degree turn very sharp turn however

00:13:17,450 --> 00:13:23,330
while during this discovery mode we are

00:13:19,790 --> 00:13:25,520
mapping and if the map is built so loop

00:13:23,330 --> 00:13:27,680
closure occurs we can out on an

00:13:25,520 --> 00:13:29,960
automatically switch in a race to race

00:13:27,680 --> 00:13:33,800
mode where which assumes of course the

00:13:29,960 --> 00:13:35,320
map is always available this race mode

00:13:33,800 --> 00:13:38,390
is based on model predictive control

00:13:35,320 --> 00:13:41,630
which takes the account dynamic Wako

00:13:38,390 --> 00:13:43,790
model all the constraints boundaries we

00:13:41,630 --> 00:13:46,430
are able to solve this online with the

00:13:43,790 --> 00:13:49,670
forces process over and we run it

00:13:46,430 --> 00:13:52,670
approximately 20 Hertz the result you

00:13:49,670 --> 00:13:54,350
can see here so at the beginning we

00:13:52,670 --> 00:13:58,670
write just in discovery mode based on

00:13:54,350 --> 00:14:01,970
the local observation of the cones where

00:13:58,670 --> 00:14:04,640
we find the most likely track where the

00:14:01,970 --> 00:14:07,370
the truck actually goes by the moment

00:14:04,640 --> 00:14:10,910
where the where the switch happens we

00:14:07,370 --> 00:14:12,560
can switch to the race mode drive with a

00:14:10,910 --> 00:14:16,130
model predictive control drive drive way

00:14:12,560 --> 00:14:19,089
faster this drive this happened this

00:14:16,130 --> 00:14:23,390
around 50 or 60 kilometers an hour and

00:14:19,089 --> 00:14:26,740
the track is very very tight around 3.5

00:14:23,390 --> 00:14:26,740
even less meters wide

00:14:27,730 --> 00:14:33,620
the next discipline is a skid pad as I

00:14:31,880 --> 00:14:36,920
said we should drive twice to the right

00:14:33,620 --> 00:14:39,620
and twice to the left we know where the

00:14:36,920 --> 00:14:41,930
map so the slam is not happening we are

00:14:39,620 --> 00:14:44,620
just localizing in a predefined map and

00:14:41,930 --> 00:14:47,980
the control in this

00:14:44,620 --> 00:14:50,560
event tries to maximize the lateral tire

00:14:47,980 --> 00:14:53,830
force through sleep angle feedback

00:14:50,560 --> 00:14:55,980
control when we assume that we compared

00:14:53,830 --> 00:14:58,930
this control with a human driver with a

00:14:55,980 --> 00:15:02,800
similar car with the same temperature of

00:14:58,930 --> 00:15:05,380
the tires we have achieved faster we are

00:15:02,800 --> 00:15:10,090
faster with this autonomous system than

00:15:05,380 --> 00:15:14,740
a human driver and the result you can

00:15:10,090 --> 00:15:19,770
see here there you see the ggplot so the

00:15:14,740 --> 00:15:23,500
accelerations and the speed this is in

00:15:19,770 --> 00:15:27,340
somewhat I guess it was 0.05 seconds

00:15:23,500 --> 00:15:29,950
faster than a human driver and we

00:15:27,340 --> 00:15:34,560
achieved there from 1 to 2 G lateral

00:15:29,950 --> 00:15:34,560
acceleration what is kind of

00:15:40,970 --> 00:15:44,270
last part I would like to tell you

00:15:42,590 --> 00:15:46,790
something about software tools we used

00:15:44,270 --> 00:15:49,430
in the project so we developed a gazebo

00:15:46,790 --> 00:15:52,130
simulation of course which simulates

00:15:49,430 --> 00:15:55,280
intake are all the sensors and we used

00:15:52,130 --> 00:15:59,930
this extensively during the control the

00:15:55,280 --> 00:16:02,480
control developing we use their old

00:15:59,930 --> 00:16:05,000
available all the plugins were used from

00:16:02,480 --> 00:16:07,130
from normal repositories so we just used

00:16:05,000 --> 00:16:10,550
the gazebo castle plugins for sensor

00:16:07,130 --> 00:16:12,920
simulation however at some point for the

00:16:10,550 --> 00:16:15,140
control development we needed some kind

00:16:12,920 --> 00:16:17,240
of more precisely know what are the

00:16:15,140 --> 00:16:19,460
dynamics of the car which you might know

00:16:17,240 --> 00:16:21,830
the physics engine is you can't really

00:16:19,460 --> 00:16:23,360
know it so we changed the gossip of

00:16:21,830 --> 00:16:26,630
physics engine with a Python script

00:16:23,360 --> 00:16:28,790
which was simulating the car precisely

00:16:26,630 --> 00:16:33,320
with our tires with perfectly we know

00:16:28,790 --> 00:16:35,960
the curve of the tires in the beginning

00:16:33,320 --> 00:16:38,810
we saw when we submitted this this talk

00:16:35,960 --> 00:16:41,660
it was still before there before the

00:16:38,810 --> 00:16:44,480
race but now we are ready after race and

00:16:41,660 --> 00:16:46,850
we can say that we successfully achieved

00:16:44,480 --> 00:16:50,630
all our goals so we won the competition

00:16:46,850 --> 00:16:52,670
and we were the only car who was able to

00:16:50,630 --> 00:16:55,120
finish all the disciplines specially to

00:16:52,670 --> 00:16:55,120
track drive

00:17:02,070 --> 00:17:07,569
at the end I would like to tell you how

00:17:05,380 --> 00:17:10,270
we kept the entire team together since

00:17:07,569 --> 00:17:14,169
we were 8 people who who half a year

00:17:10,270 --> 00:17:17,290
were extensively writing code we all use

00:17:14,169 --> 00:17:20,439
Kubuntu 1404 with the rose indigo

00:17:17,290 --> 00:17:22,569
all the code was stored in a github git

00:17:20,439 --> 00:17:23,079
repository and we synced it over the big

00:17:22,569 --> 00:17:26,380
bucket

00:17:23,079 --> 00:17:28,299
we used extensively simulations as much

00:17:26,380 --> 00:17:30,460
as we could because many of our backs

00:17:28,299 --> 00:17:33,100
were figure out in the simulation and

00:17:30,460 --> 00:17:34,630
some kind of hint which we figured out

00:17:33,100 --> 00:17:37,059
during the project is that the

00:17:34,630 --> 00:17:39,130
visualizing is one of the most important

00:17:37,059 --> 00:17:44,980
thing so visualize really as much as

00:17:39,130 --> 00:17:47,470
possible also lots of testing we test it

00:17:44,980 --> 00:17:49,059
every week we test it on most of the

00:17:47,470 --> 00:17:51,340
time on airport you can see in the

00:17:49,059 --> 00:17:55,660
picture there's a ground unit where we

00:17:51,340 --> 00:17:57,809
spend a lot of time before every testing

00:17:55,660 --> 00:18:00,730
we upload our co2 the big bucket which

00:17:57,809 --> 00:18:02,620
automatically compiled on Jenkins so we

00:18:00,730 --> 00:18:05,380
are sure that anything what goes on the

00:18:02,620 --> 00:18:08,020
car really compiles and works so it was

00:18:05,380 --> 00:18:09,880
also testing nightly simulations so we

00:18:08,020 --> 00:18:12,190
had some predefined things which the car

00:18:09,880 --> 00:18:17,340
should do and if the car does it then it

00:18:12,190 --> 00:18:20,590
can go really on the real car logging

00:18:17,340 --> 00:18:23,380
it's very good to lock lock as much as

00:18:20,590 --> 00:18:25,059
you can however it happened to us that

00:18:23,380 --> 00:18:29,650
at some point we are looking too much

00:18:25,059 --> 00:18:33,100
too many topics and we can the Rosberg

00:18:29,650 --> 00:18:36,190
record was the most wasn't the most

00:18:33,100 --> 00:18:38,950
pricing note run so it took almost all

00:18:36,190 --> 00:18:42,309
our computing computing performance and

00:18:38,950 --> 00:18:45,040
at some point half of our packages just

00:18:42,309 --> 00:18:48,130
froze and the car just went totally out

00:18:45,040 --> 00:18:52,720
of the course so take care they look a

00:18:48,130 --> 00:18:54,130
lot but not too much at the end we would

00:18:52,720 --> 00:18:57,880
I would like to thank to all our

00:18:54,130 --> 00:18:59,570
sponsors and I'm happy to answer any

00:18:57,880 --> 00:19:05,170
questions

00:18:59,570 --> 00:19:05,170
[Applause]

00:19:05,930 --> 00:19:11,059
our life to also introduce to colleagues

00:19:08,780 --> 00:19:15,170
from our team we came in three so Viktor

00:19:11,059 --> 00:19:19,160
right Bart and Henrico Bertus we've got

00:19:15,170 --> 00:19:21,590
time for just we've got time for just

00:19:19,160 --> 00:19:23,180
one question the first microphone here

00:19:21,590 --> 00:19:25,550
thank you so much very inspiring work

00:19:23,180 --> 00:19:28,030
really acted what's the rate of your

00:19:25,550 --> 00:19:30,290
sensors and what's like your

00:19:28,030 --> 00:19:42,410
computational time when you finish up to

00:19:30,290 --> 00:19:46,190
the heck Toric's so for a lighter we we

00:19:42,410 --> 00:19:49,400
get 10 Hertz data and for the more more

00:19:46,190 --> 00:19:51,650
like data intensive sensors like the GPS

00:19:49,400 --> 00:19:55,040
and yeah I'm you you get them in hundred

00:19:51,650 --> 00:19:57,679
Hertz and a computational time for real

00:19:55,040 --> 00:19:59,300
depends on on the package so for the

00:19:57,679 --> 00:20:02,540
slam and stuff it's about 100

00:19:59,300 --> 00:20:07,460
milliseconds and for the common filter

00:20:02,540 --> 00:20:10,220
itself it's about a few few microseconds

00:20:07,460 --> 00:20:10,690
that's really fast okay thank you so

00:20:10,220 --> 00:20:13,220
much

00:20:10,690 --> 00:20:20,400
fantastic let's thank the team again

00:20:13,220 --> 00:20:20,400

YouTube URL: https://www.youtube.com/watch?v=lneQskNqhFQ


