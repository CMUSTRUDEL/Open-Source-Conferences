Title: Russell Keith-Magee - Building a cross-platform native app with BeeWare - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Russell Keith-Magee

Have you ever wanted to write a GUI application you can run on your laptop? What about an app that you can run on your phone? Historically, these have been difficult to achieve with Python, and impossible to achieve without learning a different API for each platform. But no more.

BeeWare is a collection of tools and libraries that allows you to build cross-platform native GUI applications in pure Python, targeting desktop, mobile and web platforms. In this talk, you'll be introduced to the BeeWare suite of tools and libraries, and see how you can use them to develop, from scratch, a GUI ChatBot application that can be deployed as a standalone desktop application, a mobile phone application, and a single page webapp - without making any changes to the application's codebase.

Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:02,240 --> 00:00:06,450
okay everyone we're gonna go ahead and

00:00:04,500 --> 00:00:09,210
get started I would like to introduce

00:00:06,450 --> 00:00:10,679
dr. Russell Keith McGee he's the founder

00:00:09,210 --> 00:00:18,600
of the beware project let's give him a

00:00:10,679 --> 00:00:19,529
big round of applause well good

00:00:18,600 --> 00:00:21,420
afternoon everyone

00:00:19,529 --> 00:00:23,070
my name is Russell Keith McGee I come

00:00:21,420 --> 00:00:24,779
from knowing our country otherwise known

00:00:23,070 --> 00:00:26,400
as Perth Western Australia I'd like to

00:00:24,779 --> 00:00:27,599
acknowledge the era Honan and Iroquois

00:00:26,400 --> 00:00:29,910
people traditional owners of the land

00:00:27,599 --> 00:00:32,669
where we're meeting today in my day job

00:00:29,910 --> 00:00:34,140
I am a senior data engineer at savato

00:00:32,669 --> 00:00:35,910
we're a market research company we use

00:00:34,140 --> 00:00:37,890
Python and data science to help brands

00:00:35,910 --> 00:00:39,750
understand their customers they helped

00:00:37,890 --> 00:00:42,270
me get to conferences like PyCon so I'm

00:00:39,750 --> 00:00:43,739
very thankful for that I am better known

00:00:42,270 --> 00:00:45,809
because of my involvement in the Django

00:00:43,739 --> 00:00:47,969
community I've been a member of the

00:00:45,809 --> 00:00:49,320
Django core team for over 12 years now I

00:00:47,969 --> 00:00:52,140
was president of the Django Software

00:00:49,320 --> 00:00:53,610
Foundation from 2010 to 2015 and I

00:00:52,140 --> 00:00:57,030
served on the Django technical review

00:00:53,610 --> 00:00:59,160
board from the 1.73 1.11 releases but

00:00:57,030 --> 00:01:01,199
while the web is still important Morgan

00:00:59,160 --> 00:01:03,629
both generally and to myself personally

00:01:01,199 --> 00:01:04,739
for the last couple of years I have been

00:01:03,629 --> 00:01:07,229
looking at a different part of the

00:01:04,739 --> 00:01:09,570
Python ecosystem computing as we know it

00:01:07,229 --> 00:01:11,130
is changing over the last 10 years we've

00:01:09,570 --> 00:01:13,350
seen the emergence of a whole new class

00:01:11,130 --> 00:01:15,750
of computing devices mobile computing

00:01:13,350 --> 00:01:18,000
devices like phones and tablets and you

00:01:15,750 --> 00:01:20,000
can't use Python on these devices at

00:01:18,000 --> 00:01:22,049
least not in the traditional sense and

00:01:20,000 --> 00:01:24,330
so for the last couple of years I've

00:01:22,049 --> 00:01:26,100
been what I've been doing is to address

00:01:24,330 --> 00:01:27,990
this limitation and it's been captured

00:01:26,100 --> 00:01:29,880
under the umbrella of the beware project

00:01:27,990 --> 00:01:31,439
I am trying to leverage the fact that

00:01:29,880 --> 00:01:33,900
Python is already a powerful

00:01:31,439 --> 00:01:36,030
cross-platform language and use that

00:01:33,900 --> 00:01:38,250
capability to provide a way to extend

00:01:36,030 --> 00:01:40,200
Python to build applications for these

00:01:38,250 --> 00:01:42,570
new platforms for these new computing

00:01:40,200 --> 00:01:44,100
devices and hopefully to improve the

00:01:42,570 --> 00:01:46,290
experience for the old platforms that we

00:01:44,100 --> 00:01:48,750
know and love as well the elevator pitch

00:01:46,290 --> 00:01:50,880
version is that B where aims to make

00:01:48,750 --> 00:01:52,890
using Python as simple for native app

00:01:50,880 --> 00:01:54,450
development as Django makes mobile web

00:01:52,890 --> 00:01:56,490
development something that is accessible

00:01:54,450 --> 00:01:59,969
to newcomers but powerful enough for

00:01:56,490 --> 00:02:01,799
heavy lifting purposes so what is B

00:01:59,969 --> 00:02:03,659
where B where is an open source project

00:02:01,799 --> 00:02:06,030
building a set of tools that will let

00:02:03,659 --> 00:02:08,489
you write cross-platform system native

00:02:06,030 --> 00:02:09,959
Python native applications it is

00:02:08,489 --> 00:02:12,270
cross-platform to the extent possible

00:02:09,959 --> 00:02:13,400
the same code should run exactly the

00:02:12,270 --> 00:02:15,650
same on multiple platforms

00:02:13,400 --> 00:02:17,510
but it is system native if a user can

00:02:15,650 --> 00:02:19,580
tell that the tool was written with

00:02:17,510 --> 00:02:20,810
beware then to my to my mind we've

00:02:19,580 --> 00:02:23,239
failed as a project

00:02:20,810 --> 00:02:24,739
beware tools should look and feel like

00:02:23,239 --> 00:02:27,110
other native applications on that

00:02:24,739 --> 00:02:29,330
platform be installed like other native

00:02:27,110 --> 00:02:30,830
applications on that platform we started

00:02:29,330 --> 00:02:33,830
like other native applications on that

00:02:30,830 --> 00:02:36,230
platform and it is also Python native

00:02:33,830 --> 00:02:38,870
that means using Python linguistic idiom

00:02:36,230 --> 00:02:40,430
wherever possible not just taking a C++

00:02:38,870 --> 00:02:42,769
API and crown and get into a Python

00:02:40,430 --> 00:02:44,239
namespace it means if you need to

00:02:42,769 --> 00:02:46,819
install something it should be pip

00:02:44,239 --> 00:02:48,799
installable and any installation process

00:02:46,819 --> 00:02:50,569
should be leveraging existing Python

00:02:48,799 --> 00:02:52,160
packaging metadata such as that provided

00:02:50,569 --> 00:02:54,500
by just your tools and setup tools and

00:02:52,160 --> 00:02:57,670
wherever possible it should also build

00:02:54,500 --> 00:03:00,920
on the existing ecosystem not replace it

00:02:57,670 --> 00:03:02,660
now a widget toolkit is a big part of

00:03:00,920 --> 00:03:04,790
this picture but it is not the only part

00:03:02,660 --> 00:03:06,860
beware also includes tools to get Python

00:03:04,790 --> 00:03:09,110
running on platforms where you can't

00:03:06,860 --> 00:03:11,030
just run an installer it until includes

00:03:09,110 --> 00:03:12,200
tooling to deploy code and it includes

00:03:11,030 --> 00:03:15,769
tools to assist in the development

00:03:12,200 --> 00:03:17,780
process itself and while beware is a

00:03:15,769 --> 00:03:20,319
well set will integrated set of tools it

00:03:17,780 --> 00:03:22,370
isn't a monolith it's a series of small

00:03:20,319 --> 00:03:24,079
well-defined tools that play well

00:03:22,370 --> 00:03:25,700
together in this way it's sort of

00:03:24,079 --> 00:03:27,350
following the UNIX philosophy of

00:03:25,700 --> 00:03:29,720
building tools that do one thing and do

00:03:27,350 --> 00:03:32,180
one thing well and yes the beware tools

00:03:29,720 --> 00:03:34,069
all do play well together but if you

00:03:32,180 --> 00:03:36,530
wanted to replace one part with another

00:03:34,069 --> 00:03:38,690
part or only use part of the tool chain

00:03:36,530 --> 00:03:42,739
that should be and is entirely possible

00:03:38,690 --> 00:03:45,169
to do so what does the full beware tool

00:03:42,739 --> 00:03:46,910
chain look like well there's Rubicon

00:03:45,169 --> 00:03:48,919
Rubicon is a bridging library that

00:03:46,910 --> 00:03:52,130
enables Python to invoke objective-c

00:03:48,919 --> 00:03:54,380
api's that is needed to support Apple

00:03:52,130 --> 00:03:56,569
platforms iOS and Mac OS both of which

00:03:54,380 --> 00:03:59,780
provide their native UI capabilities in

00:03:56,569 --> 00:04:01,700
objective-c rubicon is a pure Python

00:03:59,780 --> 00:04:04,040
library it uses C types to access

00:04:01,700 --> 00:04:07,760
objective-c providing transparent access

00:04:04,040 --> 00:04:10,130
across any native Apple API there is

00:04:07,760 --> 00:04:12,560
also vaak vaak is a transpiler that

00:04:10,130 --> 00:04:14,870
takes python code and compiles it

00:04:12,560 --> 00:04:17,060
directly to Java bytecode not through

00:04:14,870 --> 00:04:19,280
piped Java source directly to class

00:04:17,060 --> 00:04:21,560
files and bytecode this means you can

00:04:19,280 --> 00:04:23,870
call a Java API extend Java classes

00:04:21,560 --> 00:04:25,159
implement Java interfaces which is

00:04:23,870 --> 00:04:27,470
something that you need to better do if

00:04:25,159 --> 00:04:30,030
you wanted to deploy on to Android

00:04:27,470 --> 00:04:31,980
then there is Batavia Batavia is a

00:04:30,030 --> 00:04:33,750
JavaScript implementation of the C

00:04:31,980 --> 00:04:36,450
Python virtual machine which enables you

00:04:33,750 --> 00:04:38,490
to execute C Python byte code in the

00:04:36,450 --> 00:04:39,870
browser which you're going to need if

00:04:38,490 --> 00:04:43,380
you want to target the browser as a UI

00:04:39,870 --> 00:04:45,600
platform Linux works without any real

00:04:43,380 --> 00:04:47,070
major extra tooling gtk has very good

00:04:45,600 --> 00:04:49,020
Python bindings natively so he could

00:04:47,070 --> 00:04:51,690
hook directly into those and on Windows

00:04:49,020 --> 00:04:53,760
we use Python net now collectively these

00:04:51,690 --> 00:04:55,800
tools all allow you to run Python code

00:04:53,760 --> 00:04:58,380
on these various platforms but you're

00:04:55,800 --> 00:05:00,000
still calling native api's on each of

00:04:58,380 --> 00:05:01,710
those platforms to get cross-platform

00:05:00,000 --> 00:05:04,400
you then need a cross-platform

00:05:01,710 --> 00:05:07,530
abstraction layer which is what toga is

00:05:04,400 --> 00:05:09,930
toga provides a common API for UI

00:05:07,530 --> 00:05:12,180
operations you ask for a toga button and

00:05:09,930 --> 00:05:13,770
on Windows you'll get our windows forum

00:05:12,180 --> 00:05:15,210
stop button on Android you'll get an

00:05:13,770 --> 00:05:18,090
Android widgets stop button

00:05:15,210 --> 00:05:21,000
on iOS you get a UI button on Mac OS you

00:05:18,090 --> 00:05:23,040
get an NS button and so on a single API

00:05:21,000 --> 00:05:24,900
for defining your application which then

00:05:23,040 --> 00:05:26,850
renders those abstracted instructions

00:05:24,900 --> 00:05:29,850
into whatever platform specific calls

00:05:26,850 --> 00:05:31,680
are required once you've got your

00:05:29,850 --> 00:05:33,150
working application you then need to

00:05:31,680 --> 00:05:35,790
package it for deployment which is where

00:05:33,150 --> 00:05:38,250
briefcase comes in briefcase is a setup

00:05:35,790 --> 00:05:41,100
tools extension that takes the project

00:05:38,250 --> 00:05:42,270
defined in your setup py file and turns

00:05:41,100 --> 00:05:44,640
it into something that you can run

00:05:42,270 --> 00:05:46,919
natively an MSI installer on Windows an

00:05:44,640 --> 00:05:48,630
Xcode project for iOS an app directory

00:05:46,919 --> 00:05:50,250
or dot app directory for Mac sauce a

00:05:48,630 --> 00:05:53,340
Gradle project for Android

00:05:50,250 --> 00:05:54,930
Django website there are other parts of

00:05:53,340 --> 00:05:56,610
the beware ecosystem for example is

00:05:54,930 --> 00:05:58,050
cricket which is a tool to run and

00:05:56,610 --> 00:06:00,120
visualize the output of your unit test

00:05:58,050 --> 00:06:02,790
suite is beekeeper and waggle part of a

00:06:00,120 --> 00:06:05,850
CI system before for doing automated pre

00:06:02,790 --> 00:06:08,040
merge code checks so there's a lot of

00:06:05,850 --> 00:06:09,180
moving pieces and it probably seems a

00:06:08,040 --> 00:06:11,370
little bit overwhelming just throwing

00:06:09,180 --> 00:06:12,690
all these at you the good news is that

00:06:11,370 --> 00:06:15,270
you don't actually need to interact

00:06:12,690 --> 00:06:17,160
directly with most of them the only ones

00:06:15,270 --> 00:06:19,710
that have a significant surface area for

00:06:17,160 --> 00:06:22,620
end users or end developers are toga and

00:06:19,710 --> 00:06:24,960
briefcase those turn those tools in turn

00:06:22,620 --> 00:06:26,820
use Rubicon and Batavia and vark and all

00:06:24,960 --> 00:06:28,020
the other tools without you as an end

00:06:26,820 --> 00:06:29,370
user ever needing to know that that's

00:06:28,020 --> 00:06:31,560
what's going on as much as possible

00:06:29,370 --> 00:06:33,780
beware handles the details of how to get

00:06:31,560 --> 00:06:35,610
an application running on your platform

00:06:33,780 --> 00:06:38,940
so you can just focus on the Python

00:06:35,610 --> 00:06:40,529
parts so how do you write a

00:06:38,940 --> 00:06:42,899
cross-platform app

00:06:40,529 --> 00:06:45,239
in Python with beware well to

00:06:42,899 --> 00:06:46,709
demonstrate let's build a chat app one

00:06:45,239 --> 00:06:49,319
of the very first chat apps ever written

00:06:46,709 --> 00:06:52,189
was called Eliza but we're talking to

00:06:49,319 --> 00:06:53,969
bees so ours will be called be Liza

00:06:52,189 --> 00:06:55,409
here's what we're going to end up with

00:06:53,969 --> 00:06:56,849
at the end of the day there is an area

00:06:55,409 --> 00:06:58,889
where the chat transcript can appear

00:06:56,849 --> 00:07:00,359
with icons and labels identifying the

00:06:58,889 --> 00:07:02,099
speaker and the actual messages the

00:07:00,359 --> 00:07:04,139
speaker's saying then there's input

00:07:02,099 --> 00:07:06,359
where you can type a message and a send

00:07:04,139 --> 00:07:07,949
button type a message hit Send chat bot

00:07:06,359 --> 00:07:10,229
will respond okay

00:07:07,949 --> 00:07:11,789
so we start create an empty directory

00:07:10,229 --> 00:07:13,289
create a virtual environment as a

00:07:11,789 --> 00:07:15,629
sandbox and activate that environment

00:07:13,289 --> 00:07:17,159
then into that virtual environment we're

00:07:15,629 --> 00:07:18,929
going to use a shortcut to install all

00:07:17,159 --> 00:07:22,079
the beware tools at once by running pip

00:07:18,929 --> 00:07:23,819
install beware the beware package or the

00:07:22,079 --> 00:07:25,619
the peopling thing the people thing

00:07:23,819 --> 00:07:27,929
you're PIP installing there is mostly a

00:07:25,619 --> 00:07:29,249
wrapper around the other tools the one

00:07:27,929 --> 00:07:31,919
and only piece of functionality that

00:07:29,249 --> 00:07:33,869
beware as a package does provide is a

00:07:31,919 --> 00:07:37,259
shortcut to make it easy to start and

00:07:33,869 --> 00:07:38,009
build other beware projects so if we run

00:07:37,259 --> 00:07:40,349
beware

00:07:38,009 --> 00:07:42,659
new we get a set of prompts to generate

00:07:40,349 --> 00:07:44,219
a new project it asks you for an

00:07:42,659 --> 00:07:46,229
application name that's the Python

00:07:44,219 --> 00:07:48,479
package name so without underscore that

00:07:46,229 --> 00:07:51,329
without dashes or funny symbols it's

00:07:48,479 --> 00:07:52,589
essentially a Python namespace we have a

00:07:51,329 --> 00:07:54,449
formal name that's the name we're going

00:07:52,589 --> 00:07:55,949
to actually use for humans to read about

00:07:54,449 --> 00:07:58,409
the name of the app so in this case B

00:07:55,949 --> 00:08:00,360
lies a capital B we have a brief

00:07:58,409 --> 00:08:02,009
description of the project contact

00:08:00,360 --> 00:08:04,739
details for the author the author's name

00:08:02,009 --> 00:08:06,269
and then a bundle identifier so when

00:08:04,739 --> 00:08:08,339
you're packaging apps for distribution

00:08:06,269 --> 00:08:10,379
are on a lot of platforms a lot of

00:08:08,339 --> 00:08:12,569
systems use a namespace based upon a

00:08:10,379 --> 00:08:14,969
reversed domain name to uniquely

00:08:12,569 --> 00:08:17,879
identify my hello world app from your

00:08:14,969 --> 00:08:19,469
hello world app beware takes the bundle

00:08:17,879 --> 00:08:20,849
identifier or the bundle name that

00:08:19,469 --> 00:08:22,799
should give it their combines it with

00:08:20,849 --> 00:08:25,229
the app name the the Platinum package

00:08:22,799 --> 00:08:28,049
name to create a full bundle ID for that

00:08:25,229 --> 00:08:29,339
application then asks you know what

00:08:28,049 --> 00:08:30,839
license you want to use what grief

00:08:29,339 --> 00:08:32,159
framework by default it will give you

00:08:30,839 --> 00:08:34,620
tiger but you could use any other

00:08:32,159 --> 00:08:36,000
framework if you wanted to and it will

00:08:34,620 --> 00:08:37,110
then spit out a whole lot of code or

00:08:36,000 --> 00:08:39,449
directory full of code and what you'll

00:08:37,110 --> 00:08:41,159
get is a fully generated project layout

00:08:39,449 --> 00:08:42,809
ready to go you get a readme file a

00:08:41,159 --> 00:08:45,269
license file matches whatever license

00:08:42,809 --> 00:08:47,399
you're selected set up top I file that

00:08:45,269 --> 00:08:49,379
contains your project metadata and a B

00:08:47,399 --> 00:08:51,660
lies a directory containing the code a

00:08:49,379 --> 00:08:54,190
main filed under main file making this a

00:08:51,660 --> 00:08:57,220
runnable module and an app by app dot pi

00:08:54,190 --> 00:08:59,590
containing the actual GUI code the app

00:08:57,220 --> 00:09:01,060
dot pi that is generated is actually a

00:08:59,590 --> 00:09:02,770
fully functioning app it doesn't do

00:09:01,060 --> 00:09:05,080
anything but it is a fully functioning

00:09:02,770 --> 00:09:07,120
app walk through the code here it

00:09:05,080 --> 00:09:09,220
imports the Togo widget toolkit and a

00:09:07,120 --> 00:09:12,280
couple of style related pieces of toga

00:09:09,220 --> 00:09:14,770
the app itself is a subclass of Togo app

00:09:12,280 --> 00:09:16,780
the application at the moment only needs

00:09:14,770 --> 00:09:18,610
one method startup which describes how

00:09:16,780 --> 00:09:20,130
to build this application what is it

00:09:18,610 --> 00:09:22,270
going to look like when it actually runs

00:09:20,130 --> 00:09:23,890
what do we want to display well we want

00:09:22,270 --> 00:09:26,080
to main window our application needs a

00:09:23,890 --> 00:09:28,690
window and we'll give it the same title

00:09:26,080 --> 00:09:30,700
as our application then we'll create a

00:09:28,690 --> 00:09:32,890
display box into which we're going to

00:09:30,700 --> 00:09:34,960
put all of our GUI content and set that

00:09:32,890 --> 00:09:36,190
box to be the main windows content now

00:09:34,960 --> 00:09:37,900
that box isn't currently going to

00:09:36,190 --> 00:09:40,360
explain contain anything it's just an

00:09:37,900 --> 00:09:42,310
empty box ready on the screen and then

00:09:40,360 --> 00:09:45,010
lastly we'll tell the app to display the

00:09:42,310 --> 00:09:46,900
main window there's then a main method

00:09:45,010 --> 00:09:49,600
to create an instance of the beware app

00:09:46,900 --> 00:09:51,310
and if we go into the directory where

00:09:49,600 --> 00:09:52,810
that code was generated so this point we

00:09:51,310 --> 00:09:54,490
haven't written any code we've just run

00:09:52,810 --> 00:09:56,590
beware it new and filled out some forms

00:09:54,490 --> 00:09:58,390
we move into that directory where the

00:09:56,590 --> 00:10:01,080
code was generated we can run the app as

00:09:58,390 --> 00:10:03,790
a Python module Python - M be Liza and

00:10:01,080 --> 00:10:05,320
we'll get an empty window a fully

00:10:03,790 --> 00:10:08,860
functioning application that does

00:10:05,320 --> 00:10:12,880
nothing okay so let's make it actually

00:10:08,860 --> 00:10:14,860
do something well toga uses internally a

00:10:12,880 --> 00:10:17,020
Dom like approach to layout its content

00:10:14,860 --> 00:10:19,030
you construct boxes inside boxes inside

00:10:17,020 --> 00:10:21,100
boxes inside the contains an actual

00:10:19,030 --> 00:10:22,840
widget this is a relatively simple

00:10:21,100 --> 00:10:25,090
application so we only actually need two

00:10:22,840 --> 00:10:26,440
boxes we have a main box and a box for

00:10:25,090 --> 00:10:29,350
the inputs at the bottom of the screen

00:10:26,440 --> 00:10:32,320
the input box across the bottom is a Roy

00:10:29,350 --> 00:10:33,610
box it's a horizontal box its content

00:10:32,320 --> 00:10:35,740
the text input in the button are laid

00:10:33,610 --> 00:10:37,480
out left to right the main box is a

00:10:35,740 --> 00:10:40,000
column box it's a vertical box it's

00:10:37,480 --> 00:10:41,740
children the main text area and the

00:10:40,000 --> 00:10:44,890
input box which we had previously built

00:10:41,740 --> 00:10:46,900
in they're stacked vertically so let's

00:10:44,890 --> 00:10:48,580
build up some code the chat area is

00:10:46,900 --> 00:10:50,500
going to be what's called a detailed

00:10:48,580 --> 00:10:51,610
list widget we'll come back to this one

00:10:50,500 --> 00:10:53,230
for the moment we'll just give it some

00:10:51,610 --> 00:10:55,450
empty data and say hey that's that's all

00:10:53,230 --> 00:10:58,570
you're going to display we create a text

00:10:55,450 --> 00:10:59,980
input and a button will keep a reference

00:10:58,570 --> 00:11:02,470
to the text input later so that we can

00:10:59,980 --> 00:11:05,140
pull its content later on we create an

00:11:02,470 --> 00:11:07,270
input box whose children are the text

00:11:05,140 --> 00:11:07,990
input and the button and we tell that

00:11:07,270 --> 00:11:10,899
box that it's a

00:11:07,990 --> 00:11:13,029
robox it's a horizontal layout and we

00:11:10,899 --> 00:11:15,399
changed the main windows content it's

00:11:13,029 --> 00:11:17,170
now a box whose children have a chat

00:11:15,399 --> 00:11:19,810
widget or the display the detailed list

00:11:17,170 --> 00:11:22,480
and the input box laid out as a column

00:11:19,810 --> 00:11:24,640
box there's a vertical layer okay so if

00:11:22,480 --> 00:11:26,589
we put that code into our application

00:11:24,640 --> 00:11:28,810
and we run the code we'll get all the

00:11:26,589 --> 00:11:31,870
pieces we want but not exactly where we

00:11:28,810 --> 00:11:34,660
want them so now we need to apply some

00:11:31,870 --> 00:11:36,339
style we need the main window content

00:11:34,660 --> 00:11:37,959
box to expand to fill not only the

00:11:36,339 --> 00:11:39,520
horizontal space that's there but also

00:11:37,959 --> 00:11:42,459
the vertical space we want it to expand

00:11:39,520 --> 00:11:44,560
as big as the window is vertically we

00:11:42,459 --> 00:11:46,029
need the text input to expand into the

00:11:44,560 --> 00:11:47,649
available horizontal space we want to

00:11:46,029 --> 00:11:49,990
make that tech that input widget now as

00:11:47,649 --> 00:11:51,339
wide as the window possibly can be now

00:11:49,990 --> 00:11:53,709
if you look really closely you'll also

00:11:51,339 --> 00:11:55,029
see the text input and the button aren't

00:11:53,709 --> 00:11:56,620
actually the same height so there's a

00:11:55,029 --> 00:11:59,350
little bit of offset in between the two

00:11:56,620 --> 00:12:00,490
so what we want to do is fix those

00:11:59,350 --> 00:12:01,810
widgets so they're actually aligned

00:12:00,490 --> 00:12:03,160
across their center line across the

00:12:01,810 --> 00:12:05,140
horizontal center line just for display

00:12:03,160 --> 00:12:06,250
purposes and you know some extra padding

00:12:05,140 --> 00:12:07,630
around the button and the text input

00:12:06,250 --> 00:12:09,310
wouldn't go Australia either just to

00:12:07,630 --> 00:12:12,820
sort of make it all no look a little

00:12:09,310 --> 00:12:15,550
nicer sorry back to the code Togo uses a

00:12:12,820 --> 00:12:16,899
CSS like language to apply styles we've

00:12:15,550 --> 00:12:18,670
got a full css3

00:12:16,899 --> 00:12:19,690
style engine in development but in the

00:12:18,670 --> 00:12:21,610
interests of actually getting something

00:12:19,690 --> 00:12:24,459
working we've made a simplified version

00:12:21,610 --> 00:12:27,070
of CSS called pack it's a bit like css3

00:12:24,459 --> 00:12:30,190
flex box but without those CSS two box

00:12:27,070 --> 00:12:32,140
model hangover so we tell the chat area

00:12:30,190 --> 00:12:33,910
and the text inputs that they are flex

00:12:32,140 --> 00:12:35,680
equals one that means they will absorb

00:12:33,910 --> 00:12:37,810
all the valuable space in their

00:12:35,680 --> 00:12:39,790
direction of layer the chat widget is a

00:12:37,810 --> 00:12:42,339
column box so that means the chat widget

00:12:39,790 --> 00:12:44,579
will expand vertically the text input is

00:12:42,339 --> 00:12:46,899
a row box so it will expand horizontally

00:12:44,579 --> 00:12:48,700
we then add some padding to the left

00:12:46,899 --> 00:12:50,589
hand side of the send button and all

00:12:48,700 --> 00:12:53,290
around the outside of the input box and

00:12:50,589 --> 00:12:55,060
we tell the contents of the input box

00:12:53,290 --> 00:12:57,100
that they should each should be aligned

00:12:55,060 --> 00:12:58,570
across its center because it's a

00:12:57,100 --> 00:12:59,890
horizontal row box that means the

00:12:58,570 --> 00:13:03,040
vertical positioning is what gets

00:12:59,890 --> 00:13:04,540
aligned okay and if we run that code we

00:13:03,040 --> 00:13:06,610
now get a layout that's starting to look

00:13:04,540 --> 00:13:08,529
like what we want okay so now we needed

00:13:06,610 --> 00:13:11,649
to actually display the contents of our

00:13:08,529 --> 00:13:14,290
chat so we'll start with a simple hello

00:13:11,649 --> 00:13:15,730
let's go back to our detailed list and

00:13:14,290 --> 00:13:17,320
when it's constructed will actually give

00:13:15,730 --> 00:13:19,449
it some detail give it some kind some

00:13:17,320 --> 00:13:21,670
data to display a detailed wistful

00:13:19,449 --> 00:13:23,680
detailed list widget is a

00:13:21,670 --> 00:13:25,930
widget for displaying lists of similar

00:13:23,680 --> 00:13:27,910
but complex data not just a single piece

00:13:25,930 --> 00:13:30,150
of text or a label it's a text with a

00:13:27,910 --> 00:13:32,890
label and an icon some other pieces the

00:13:30,150 --> 00:13:34,420
content to be displayed is internally

00:13:32,890 --> 00:13:36,820
stored in something called a data source

00:13:34,420 --> 00:13:38,830
it's a pure data storage object that

00:13:36,820 --> 00:13:41,500
knows how to tell toga when its content

00:13:38,830 --> 00:13:43,840
has been modified in a way that the

00:13:41,500 --> 00:13:45,400
display might need to reflect to make

00:13:43,840 --> 00:13:47,410
things simple toga then has a wrapper

00:13:45,400 --> 00:13:49,150
that lets you use a list of dictionaries

00:13:47,410 --> 00:13:51,400
as a data source and that's what we're

00:13:49,150 --> 00:13:53,680
doing here we're instantiating the

00:13:51,400 --> 00:13:55,870
detailed list with a list of one item a

00:13:53,680 --> 00:13:58,360
dictionary that specifies an icon a

00:13:55,870 --> 00:14:00,400
title and a subtitle those three keys

00:13:58,360 --> 00:14:01,930
are special values that a detailed list

00:14:00,400 --> 00:14:03,970
will look for when it gets a list of

00:14:01,930 --> 00:14:05,230
dictionaries you could put other items

00:14:03,970 --> 00:14:06,610
into that dictionary as well if you

00:14:05,230 --> 00:14:08,740
wanted to detailed list we'll ignore

00:14:06,610 --> 00:14:10,300
them when it displays but they might be

00:14:08,740 --> 00:14:13,990
useful for example if you needed to

00:14:10,300 --> 00:14:15,130
perform an action in response to an item

00:14:13,990 --> 00:14:16,690
being clicked on so you might put

00:14:15,130 --> 00:14:18,340
through this was like an online service

00:14:16,690 --> 00:14:20,970
you might have the ID of the message

00:14:18,340 --> 00:14:23,290
stored as extra data on that data item

00:14:20,970 --> 00:14:25,030
you could also define your own data

00:14:23,290 --> 00:14:26,350
source if you want to so for example if

00:14:25,030 --> 00:14:27,940
you were building a data source that

00:14:26,350 --> 00:14:30,730
reflected the contents of your file

00:14:27,940 --> 00:14:32,350
system you don't need to keep a list of

00:14:30,730 --> 00:14:33,820
dictionaries with items in your file and

00:14:32,350 --> 00:14:35,440
your actual file system and then

00:14:33,820 --> 00:14:37,780
coordinate between the two you can write

00:14:35,440 --> 00:14:39,370
a data source that knows how to look at

00:14:37,780 --> 00:14:41,500
the file system and ask the answer the

00:14:39,370 --> 00:14:43,570
question what data is there has the data

00:14:41,500 --> 00:14:45,160
changed and then reflect that back into

00:14:43,570 --> 00:14:47,590
the the list or into the display

00:14:45,160 --> 00:14:49,060
detailed list widget in this case though

00:14:47,590 --> 00:14:51,370
a simple list of dictionaries is all we

00:14:49,060 --> 00:14:53,140
really need and as a result of these

00:14:51,370 --> 00:14:55,570
three items we now run the application

00:14:53,140 --> 00:14:57,250
and what we get is our first response

00:14:55,570 --> 00:14:58,990
from from blazer I see starts a

00:14:57,250 --> 00:14:59,760
conversation by saying hello how are you

00:14:58,990 --> 00:15:02,890
feeling today

00:14:59,760 --> 00:15:04,810
now we run the code chat bot a start of

00:15:02,890 --> 00:15:07,480
the conversation so now it's our job to

00:15:04,810 --> 00:15:09,340
Rishta to respond how do we do that well

00:15:07,480 --> 00:15:11,170
whenever the user presses the send

00:15:09,340 --> 00:15:13,060
button we want to display whatever

00:15:11,170 --> 00:15:15,490
they've typed in the input box as part

00:15:13,060 --> 00:15:17,650
of the chat transcript so we tell toga

00:15:15,490 --> 00:15:20,290
that every time a button is pressed on

00:15:17,650 --> 00:15:23,170
press we want to invoke handle input a

00:15:20,290 --> 00:15:24,850
method on the application itself okay

00:15:23,170 --> 00:15:26,590
what does that method look like well

00:15:24,850 --> 00:15:27,820
it's just a function in this case it's a

00:15:26,590 --> 00:15:30,100
method on the app but it could just be a

00:15:27,820 --> 00:15:31,900
free function as well it is it's

00:15:30,100 --> 00:15:33,670
provided with the widget that caused the

00:15:31,900 --> 00:15:35,329
event in this case it's a button but it

00:15:33,670 --> 00:15:37,189
could be stimulated by other events and

00:15:35,329 --> 00:15:38,509
system and it might have other arguments

00:15:37,189 --> 00:15:39,949
depending upon the type of event that's

00:15:38,509 --> 00:15:42,439
been caused so we'll just catch those as

00:15:39,949 --> 00:15:43,879
a catch-all with quarks what do we want

00:15:42,439 --> 00:15:45,860
to do well we want to guess the current

00:15:43,879 --> 00:15:48,379
value of the text input widget text

00:15:45,860 --> 00:15:50,480
input value and we want to take that

00:15:48,379 --> 00:15:53,029
content combine it with an icon and a

00:15:50,480 --> 00:15:54,949
name label and append that content into

00:15:53,029 --> 00:15:58,339
a new item on the data source for the

00:15:54,949 --> 00:16:00,199
chat widget so create a user icon title

00:15:58,339 --> 00:16:03,410
is you content is the content that's

00:16:00,199 --> 00:16:04,999
come from text input value appended at

00:16:03,410 --> 00:16:06,649
the end of the chat butter we then say

00:16:04,999 --> 00:16:07,939
okay clear the text input because we

00:16:06,649 --> 00:16:10,220
that message has been sent we don't need

00:16:07,939 --> 00:16:11,540
that anymore and scroll to the bottom of

00:16:10,220 --> 00:16:13,309
the text display if you don't do that

00:16:11,540 --> 00:16:14,509
last step after a while the messages

00:16:13,309 --> 00:16:15,470
will be added to the widget but you

00:16:14,509 --> 00:16:17,089
won't see them because they'll be

00:16:15,470 --> 00:16:18,649
scrolling off the bottom of the page the

00:16:17,089 --> 00:16:20,170
detailed list automatically Scrolls to

00:16:18,649 --> 00:16:23,149
fill this contact to display the content

00:16:20,170 --> 00:16:24,589
and we run that code Hey we've now

00:16:23,149 --> 00:16:25,939
responded we can go in there we can type

00:16:24,589 --> 00:16:28,339
in a message respond to be Liza's

00:16:25,939 --> 00:16:31,670
original question and geyser goes back

00:16:28,339 --> 00:16:33,739
in but it's not a conversation until the

00:16:31,670 --> 00:16:34,269
chat bot responds to us so how are we

00:16:33,739 --> 00:16:36,290
gonna do that

00:16:34,269 --> 00:16:37,369
well we're gonna fall back in an Old

00:16:36,290 --> 00:16:39,980
Faithful Eliza

00:16:37,369 --> 00:16:42,499
the Eliza boiler - Eliza bot was written

00:16:39,980 --> 00:16:44,269
back in the 1960s at the MIT artificial

00:16:42,499 --> 00:16:45,619
intelligence lab although it might look

00:16:44,269 --> 00:16:47,029
like it's having a conversation with you

00:16:45,619 --> 00:16:48,709
it's actually not it's just doing some

00:16:47,029 --> 00:16:50,600
really simple pattern matching pattern

00:16:48,709 --> 00:16:52,730
matching on the text that you write it's

00:16:50,600 --> 00:16:55,309
made up of two parts first is a response

00:16:52,730 --> 00:16:57,410
match Eliza does a simple text match on

00:16:55,309 --> 00:17:00,049
a bunch of known phrases I need a hug

00:16:57,410 --> 00:17:01,399
matches the I need something pattern and

00:17:00,049 --> 00:17:03,949
then there are patterns for I want

00:17:01,399 --> 00:17:06,110
something or you something why something

00:17:03,949 --> 00:17:07,760
and if all else fails if matches a

00:17:06,110 --> 00:17:08,899
bucket case of hey here's a random

00:17:07,760 --> 00:17:09,589
response - just keep the conversation

00:17:08,899 --> 00:17:11,899
going

00:17:09,589 --> 00:17:13,789
having found a match it then randomly

00:17:11,899 --> 00:17:15,559
picks one of a collection of canned

00:17:13,789 --> 00:17:17,240
responses that are suitable for that

00:17:15,559 --> 00:17:19,429
question or suitable responses to that

00:17:17,240 --> 00:17:22,339
question and substitutes the match text

00:17:19,429 --> 00:17:24,169
into that response so I need a hug gets

00:17:22,339 --> 00:17:27,399
randomly turned into why do you need a

00:17:24,169 --> 00:17:29,750
hug or are you sure that you need a hug

00:17:27,399 --> 00:17:31,669
then having constructed that initial

00:17:29,750 --> 00:17:33,169
response it does a linguistic reflection

00:17:31,669 --> 00:17:35,120
it does a search in a place for certain

00:17:33,169 --> 00:17:37,820
keywords that are known to be no one

00:17:35,120 --> 00:17:41,240
directional and flips them so I am

00:17:37,820 --> 00:17:45,260
becomes you are this is state of the art

00:17:41,240 --> 00:17:47,360
1960s AI Google duplex it is not but it

00:17:45,260 --> 00:17:48,920
works and it's a well-known algorithm so

00:17:47,360 --> 00:17:50,450
much so that there are lots of

00:17:48,920 --> 00:17:51,890
tations out there we're gonna use one

00:17:50,450 --> 00:17:54,680
based on this code it's which is

00:17:51,890 --> 00:17:56,390
available on github so when we start our

00:17:54,680 --> 00:17:58,670
app we create an instance of Eliza keep

00:17:56,390 --> 00:18:00,440
it handle to it in our input handler in

00:17:58,670 --> 00:18:01,940
that handle input method just at the

00:18:00,440 --> 00:18:03,950
bottom we're gonna add code to take the

00:18:01,940 --> 00:18:06,200
input text generate Eliza's response

00:18:03,950 --> 00:18:07,610
append that response with an icon and

00:18:06,200 --> 00:18:09,680
believes it's name to the bottom of the

00:18:07,610 --> 00:18:10,970
detail is data source and scroll to the

00:18:09,680 --> 00:18:13,190
bottom the Lister green bottom of the

00:18:10,970 --> 00:18:14,780
screen again and there you have it we

00:18:13,190 --> 00:18:18,350
have be Liza responding in this case

00:18:14,780 --> 00:18:20,300
being a bit of a smart aleck but if you

00:18:18,350 --> 00:18:22,160
use this app you'll notice that it sort

00:18:20,300 --> 00:18:24,500
of breaks the fourth wall there's no

00:18:22,160 --> 00:18:26,510
delay between you as a user typing and

00:18:24,500 --> 00:18:28,100
the bot responding it just comes back

00:18:26,510 --> 00:18:30,350
straightaway because it's adding the

00:18:28,100 --> 00:18:32,060
it's in the same button handler if it

00:18:30,350 --> 00:18:34,700
was a real person on the other end we'd

00:18:32,060 --> 00:18:36,380
expect to see a delay well that's easy

00:18:34,700 --> 00:18:38,960
we just put a sleep to random length of

00:18:36,380 --> 00:18:40,340
time right well know if you've ever done

00:18:38,960 --> 00:18:43,070
any GUI programming before you'll know

00:18:40,340 --> 00:18:45,440
why when you call sleep you block the

00:18:43,070 --> 00:18:46,730
gooeys event loop which is the thing

00:18:45,440 --> 00:18:49,100
that actually makes the window redraw

00:18:46,730 --> 00:18:51,050
itself so while the app is sleeping in

00:18:49,100 --> 00:18:53,480
your event handler it's not handling

00:18:51,050 --> 00:18:55,880
other events like redrawing the window

00:18:53,480 --> 00:18:58,430
or handling a resize event or responding

00:18:55,880 --> 00:19:00,680
to button clicks the usual answer from

00:18:58,430 --> 00:19:02,510
most GUI GUI frameworks is to do

00:19:00,680 --> 00:19:04,220
something like spawning a thread for a

00:19:02,510 --> 00:19:05,480
long-running GUI action and then

00:19:04,220 --> 00:19:06,950
sometimes there are restrictions on

00:19:05,480 --> 00:19:08,120
whether you can invoke GUI actions on

00:19:06,950 --> 00:19:09,590
non GUI threads and things like that

00:19:08,120 --> 00:19:10,910
there's some sort of communications

00:19:09,590 --> 00:19:13,580
channel to pass that information back

00:19:10,910 --> 00:19:15,590
and forth but this is Python Tiger is a

00:19:13,580 --> 00:19:17,660
Python native toolkit borrow a phrase

00:19:15,590 --> 00:19:21,380
from Eric Raymond head ensure there has

00:19:17,660 --> 00:19:22,490
to be a better way and there is two of

00:19:21,380 --> 00:19:24,590
them actually depending upon exactly

00:19:22,490 --> 00:19:25,430
what it is you're trying to do firstly

00:19:24,590 --> 00:19:27,080
as we've seen before

00:19:25,430 --> 00:19:30,500
Tiger event handlers can be functions or

00:19:27,080 --> 00:19:32,630
methods but toga can actually also be a

00:19:30,500 --> 00:19:34,700
generator our Togo handler can also be a

00:19:32,630 --> 00:19:37,340
generator if you add a yield to your

00:19:34,700 --> 00:19:38,780
method to your to a handler method Togo

00:19:37,340 --> 00:19:40,340
will handle the rest invoking the

00:19:38,780 --> 00:19:41,810
generator and iterating over the

00:19:40,340 --> 00:19:44,030
responses that the generator provides

00:19:41,810 --> 00:19:46,760
the yield value the value that is

00:19:44,030 --> 00:19:48,830
yielded is a delay value in seconds that

00:19:46,760 --> 00:19:50,270
you want the handler to wait for so

00:19:48,830 --> 00:19:51,890
Tiger then manages the process of

00:19:50,270 --> 00:19:53,420
setting up an event so that the next

00:19:51,890 --> 00:19:55,670
iteration the generator is invoked

00:19:53,420 --> 00:19:57,230
whenever that timer happens to expire so

00:19:55,670 --> 00:19:59,810
in this case we just yield a random

00:19:57,230 --> 00:20:01,580
number of seconds that will appear to be

00:19:59,810 --> 00:20:02,640
asleep but the event handler will have

00:20:01,580 --> 00:20:04,740
event loop will

00:20:02,640 --> 00:20:07,620
continue to run while that's why while

00:20:04,740 --> 00:20:08,910
that sleep is happening so consider a

00:20:07,620 --> 00:20:10,650
common casing goo is something that

00:20:08,910 --> 00:20:12,180
wants to run in the background needs to

00:20:10,650 --> 00:20:14,220
be monitored you want the GUI to update

00:20:12,180 --> 00:20:16,620
once a second this way you can set up a

00:20:14,220 --> 00:20:18,420
set up a handler set up a generator that

00:20:16,620 --> 00:20:21,210
loops around whatever it needs to do

00:20:18,420 --> 00:20:23,130
does an update yields for a second comes

00:20:21,210 --> 00:20:26,310
back in does an update yields for a

00:20:23,130 --> 00:20:27,810
second and so on a second approach a

00:20:26,310 --> 00:20:30,150
callback Kim your function it can be a

00:20:27,810 --> 00:20:31,920
method it can be a generator or you can

00:20:30,150 --> 00:20:33,600
use pythons async Oh infrastructure to

00:20:31,920 --> 00:20:35,640
make any callback and asynchronous

00:20:33,600 --> 00:20:38,070
co-routine toca does the work of

00:20:35,640 --> 00:20:40,650
integrating the gooeys event loop with a

00:20:38,070 --> 00:20:43,680
async IO event loop so you can just

00:20:40,650 --> 00:20:45,660
await async IO sleep in this case again

00:20:43,680 --> 00:20:50,550
you'll got your code the button handler

00:20:45,660 --> 00:20:52,740
will reach the sleep point it will yield

00:20:50,550 --> 00:20:54,780
control back to the event loop when the

00:20:52,740 --> 00:20:56,130
timer expires control gap given back to

00:20:54,780 --> 00:20:57,960
your event loop back to your event

00:20:56,130 --> 00:21:00,300
handler and you can continue moving on

00:20:57,960 --> 00:21:02,250
now in this case we're using just a sync

00:21:00,300 --> 00:21:04,170
i/o dot sleep but it could equally be an

00:21:02,250 --> 00:21:05,730
AI o HTTP request or any other

00:21:04,170 --> 00:21:08,550
asynchronous call that's going up there

00:21:05,730 --> 00:21:10,770
and that's it we have a chat application

00:21:08,550 --> 00:21:12,900
responding to human input with faked

00:21:10,770 --> 00:21:15,420
delay with a faked delay to make the

00:21:12,900 --> 00:21:17,100
response look human so far though we've

00:21:15,420 --> 00:21:19,560
been invoking it as a Python module

00:21:17,100 --> 00:21:22,380
we've seen Python minus M beware and

00:21:19,560 --> 00:21:24,240
often runs can we deploy this as a

00:21:22,380 --> 00:21:25,470
native app well yes when we set up our

00:21:24,240 --> 00:21:27,240
application one of the things it

00:21:25,470 --> 00:21:29,010
generated was a setup dot py file

00:21:27,240 --> 00:21:31,410
containing all of the applications

00:21:29,010 --> 00:21:31,980
metadata if we add in some extra details

00:21:31,410 --> 00:21:34,080
in this case

00:21:31,980 --> 00:21:36,120
details about the resources that we've

00:21:34,080 --> 00:21:37,410
added to be available like the like the

00:21:36,120 --> 00:21:39,660
icons further for the individual

00:21:37,410 --> 00:21:41,400
speakers we can add that metadata into

00:21:39,660 --> 00:21:43,170
the into the package or into the into

00:21:41,400 --> 00:21:45,060
the package description and use it to

00:21:43,170 --> 00:21:46,530
generate a standalone application back

00:21:45,060 --> 00:21:49,470
at the prompt if we run

00:21:46,530 --> 00:21:51,180
beware build macaws beware will use your

00:21:49,470 --> 00:21:53,310
project metadata to roll out a template

00:21:51,180 --> 00:21:54,810
for a standalone mac loss application

00:21:53,310 --> 00:21:57,000
including a full path of install and

00:21:54,810 --> 00:21:59,280
install your project code into that

00:21:57,000 --> 00:22:01,380
template and you'll get an application

00:21:59,280 --> 00:22:03,570
in your Mac OS finder that you can

00:22:01,380 --> 00:22:05,190
double click on and run or add to your

00:22:03,570 --> 00:22:07,350
Applications folder or zip up and send

00:22:05,190 --> 00:22:09,810
to a friend it's a completely standalone

00:22:07,350 --> 00:22:11,340
Python app the recipient doesn't need to

00:22:09,810 --> 00:22:12,570
configure their Python path or install

00:22:11,340 --> 00:22:15,240
python perth or anything like that they

00:22:12,570 --> 00:22:16,080
just download the app and it runs ok

00:22:15,240 --> 00:22:18,630
that's

00:22:16,080 --> 00:22:21,090
stop app what about mobile well the same

00:22:18,630 --> 00:22:23,220
thing happens there run beware build iOS

00:22:21,090 --> 00:22:25,200
beware will rolled out on iOS Xcode

00:22:23,220 --> 00:22:27,539
project install all the required support

00:22:25,200 --> 00:22:29,490
libraries ready to compile compile it

00:22:27,539 --> 00:22:31,740
start the simulator and load it into the

00:22:29,490 --> 00:22:33,750
simulator and so you'll get an Xcode

00:22:31,740 --> 00:22:35,669
project press run you'll see it in the

00:22:33,750 --> 00:22:38,220
iOS simulator and you've got an app

00:22:35,669 --> 00:22:40,230
running on your phone the next question

00:22:38,220 --> 00:22:41,760
that normally comes is ok sure but will

00:22:40,230 --> 00:22:43,049
Apple allow that in the App Store and

00:22:41,760 --> 00:22:45,630
the answer is yes they will

00:22:43,049 --> 00:22:47,159
there is a beware app on the iOS App

00:22:45,630 --> 00:22:48,809
Store right now it's called travel tips

00:22:47,159 --> 00:22:50,370
solves a problem that I have as an

00:22:48,809 --> 00:22:52,139
Australian traveling to conferences it

00:22:50,370 --> 00:22:55,350
converts between Australian money and

00:22:52,139 --> 00:22:57,630
whatever funny money you use here it's a

00:22:55,350 --> 00:22:59,190
pure Python application but as an end

00:22:57,630 --> 00:23:00,779
user there's no reason you would ever

00:22:59,190 --> 00:23:03,260
need to know it is a native application

00:23:00,779 --> 00:23:05,490
as far as the end user is concerned if

00:23:03,260 --> 00:23:06,570
you're not on the Apple ecosystem the

00:23:05,490 --> 00:23:08,220
instructions are exactly the same

00:23:06,570 --> 00:23:09,299
substitute your platform of choice into

00:23:08,220 --> 00:23:11,100
the build command you'll get an output

00:23:09,299 --> 00:23:12,720
appropriate for that platform so on

00:23:11,100 --> 00:23:14,929
Android it's a Gradle project for

00:23:12,720 --> 00:23:17,010
Windows it's an MSI installer and so on

00:23:14,929 --> 00:23:18,539
and there we go that's what you got

00:23:17,010 --> 00:23:21,240
you've got as how you write a native

00:23:18,539 --> 00:23:25,590
cross-platform GUI application in pure

00:23:21,240 --> 00:23:28,049
Python now asterisk some caveats beware

00:23:25,590 --> 00:23:30,600
is not version 1.0 beware is not even

00:23:28,049 --> 00:23:32,580
version 0.3 this is early preview stuff

00:23:30,600 --> 00:23:35,570
when it breaks and it will break you get

00:23:32,580 --> 00:23:38,190
to keep all of the sharp shiny pieces I

00:23:35,570 --> 00:23:40,649
say tiger support 6 platforms in all

00:23:38,190 --> 00:23:42,779
MCOs iOS Linux Windows Android and

00:23:40,649 --> 00:23:45,409
Django they are listed pretty much in

00:23:42,779 --> 00:23:47,730
order of maturity ok my daily driver

00:23:45,409 --> 00:23:48,779
devices are Apple devices so the Apple

00:23:47,730 --> 00:23:50,880
platforms are the ones of the most

00:23:48,779 --> 00:23:52,139
mature Linux support is a bit behind but

00:23:50,880 --> 00:23:54,360
getting there Daniel's being the big

00:23:52,139 --> 00:23:56,010
driver their windows support is a little

00:23:54,360 --> 00:23:57,480
bit spotty but getting better thanks to

00:23:56,010 --> 00:23:59,909
some great contributions from a woman

00:23:57,480 --> 00:24:01,679
named Agha boy lights in Turkey andrew

00:23:59,909 --> 00:24:03,480
support is really spotty django support

00:24:01,679 --> 00:24:06,750
is mostly a technical proof of concept

00:24:03,480 --> 00:24:08,250
but platform support notwithstanding you

00:24:06,750 --> 00:24:10,230
get a semantically equivalent user

00:24:08,250 --> 00:24:12,659
interface using native in native widgets

00:24:10,230 --> 00:24:15,179
packaged for distribution using native

00:24:12,659 --> 00:24:17,250
channels now as you can imagine trying

00:24:15,179 --> 00:24:18,720
to maintain six different GUI backends

00:24:17,250 --> 00:24:21,510
simultaneously takes a little bit of

00:24:18,720 --> 00:24:23,250
work but the good news the hard part

00:24:21,510 --> 00:24:24,630
isn't the widget toolkit there are

00:24:23,250 --> 00:24:26,190
plenty of examples of those so it's

00:24:24,630 --> 00:24:28,559
clearly possible it's just a matter of

00:24:26,190 --> 00:24:30,529
dotting your eyes and crossing your T's

00:24:28,559 --> 00:24:32,549
a new widget adding a new widget is

00:24:30,529 --> 00:24:34,289
relatively straightforward once you've

00:24:32,549 --> 00:24:36,059
got the fundamentals down for a platform

00:24:34,289 --> 00:24:37,799
the hard problem is getting Python

00:24:36,059 --> 00:24:38,789
running on the platform at all accessing

00:24:37,799 --> 00:24:40,710
native widgets while you're there

00:24:38,789 --> 00:24:43,320
providing an easy easy experience for

00:24:40,710 --> 00:24:45,450
the deployment those problems we have

00:24:43,320 --> 00:24:46,499
mostly addressed hopefully today I've

00:24:45,450 --> 00:24:49,019
been able to demonstrate that it is

00:24:46,499 --> 00:24:51,690
possible and can even be pleasant to

00:24:49,019 --> 00:24:54,240
package a Python GUI app natively for

00:24:51,690 --> 00:24:55,499
use my hope is this gives you a little

00:24:54,240 --> 00:24:56,700
bit of a glimpse into what's possible

00:24:55,499 --> 00:24:58,259
and if you're willing to be a little bit

00:24:56,700 --> 00:25:00,450
experimental where some very sturdy

00:24:58,259 --> 00:25:03,960
gloves what you can achieve on your own

00:25:00,450 --> 00:25:05,519
projects so where to from here details

00:25:03,960 --> 00:25:08,490
and all these projects can be found on

00:25:05,519 --> 00:25:09,690
be pi be org be where is an open source

00:25:08,490 --> 00:25:11,340
project we're actively looking for

00:25:09,690 --> 00:25:12,480
computer contributors of all levels of

00:25:11,340 --> 00:25:14,279
experience even if you've never

00:25:12,480 --> 00:25:15,480
contributed to open source before even

00:25:14,279 --> 00:25:17,970
if you think you haven't got enough

00:25:15,480 --> 00:25:19,590
skill we want you we'll find something

00:25:17,970 --> 00:25:20,669
for you to work on really easily it was

00:25:19,590 --> 00:25:22,200
relatively easy to get started we have

00:25:20,669 --> 00:25:23,549
tutorials and walkthroughs for the

00:25:22,200 --> 00:25:25,350
contribution process and we've got an

00:25:23,549 --> 00:25:27,600
open offer to mentor anybody who wants

00:25:25,350 --> 00:25:28,980
to get involved I'll be around to the

00:25:27,600 --> 00:25:30,509
end of the Sprint's working on Beware

00:25:28,980 --> 00:25:32,129
and thanks to your evolution systems

00:25:30,509 --> 00:25:33,240
I've got a stash of challenge coins

00:25:32,129 --> 00:25:35,340
which would give to anybody who

00:25:33,240 --> 00:25:36,690
contributes to a be ware project and

00:25:35,340 --> 00:25:38,759
thanks to github i'm also say we have a

00:25:36,690 --> 00:25:40,230
second challenge coin for yak herders

00:25:38,759 --> 00:25:42,480
people who could help help other people

00:25:40,230 --> 00:25:43,529
earn their yak shave a coin I've also

00:25:42,480 --> 00:25:44,309
got lots of stickers if that's your

00:25:43,529 --> 00:25:46,799
thing

00:25:44,309 --> 00:25:49,139
so come grab me have a chat if you want

00:25:46,799 --> 00:25:50,850
to get involved there the hard sell part

00:25:49,139 --> 00:25:52,529
beware is an open-source project its

00:25:50,850 --> 00:25:54,600
development is at presently into a

00:25:52,529 --> 00:25:56,279
present entirely a volunteer effort that

00:25:54,600 --> 00:25:58,889
constrains our rate of development but

00:25:56,279 --> 00:26:00,659
this is something we can address for $10

00:25:58,889 --> 00:26:02,549
us a month you can join the be ware

00:26:00,659 --> 00:26:03,990
project as a member if I can find a

00:26:02,549 --> 00:26:05,970
thousand people in the be in the Python

00:26:03,990 --> 00:26:08,399
community who would like to see Python

00:26:05,970 --> 00:26:10,379
available as a native GUI platform

00:26:08,399 --> 00:26:12,059
across the board I could potentially

00:26:10,379 --> 00:26:13,499
start working on be aware full time I

00:26:12,059 --> 00:26:15,029
can find more than a thousand people

00:26:13,499 --> 00:26:16,830
find some companies that want to help

00:26:15,029 --> 00:26:18,720
ensure that Python remains relevant in a

00:26:16,830 --> 00:26:20,789
mobile future then we can do even more

00:26:18,720 --> 00:26:22,769
I've had an open offer to mentor people

00:26:20,789 --> 00:26:24,600
for a long time I would like to take the

00:26:22,769 --> 00:26:26,669
next step and actually be able to pay

00:26:24,600 --> 00:26:28,980
for interns to do this sort of thing and

00:26:26,669 --> 00:26:31,919
build up their experience in open source

00:26:28,980 --> 00:26:32,549
projects and offer that opportunity to

00:26:31,919 --> 00:26:35,129
people with underrepresented

00:26:32,549 --> 00:26:36,809
demographics it's still very early days

00:26:35,129 --> 00:26:39,210
would be where financial support means

00:26:36,809 --> 00:26:40,409
faster progress best of all it's an open

00:26:39,210 --> 00:26:41,730
source project we can get all these

00:26:40,409 --> 00:26:42,360
great tools without having to give up

00:26:41,730 --> 00:26:44,310
those opens

00:26:42,360 --> 00:26:45,870
ideals I'm excited for what the future

00:26:44,310 --> 00:26:48,940
holds for be aware I hope you'll join me

00:26:45,870 --> 00:26:53,309
on their journey so thank you very much

00:26:48,940 --> 00:26:53,309
[Applause]

00:26:56,630 --> 00:26:59,970
Thank You Russell so I think we have

00:26:58,620 --> 00:27:01,470
about four minutes for questions if

00:26:59,970 --> 00:27:14,400
anyone has questions that can come up to

00:27:01,470 --> 00:27:16,830
the audience mic right here and so to

00:27:14,400 --> 00:27:18,690
clarify when you say django support are

00:27:16,830 --> 00:27:20,970
you talking about like a a django

00:27:18,690 --> 00:27:23,940
server-side delivered page or is that

00:27:20,970 --> 00:27:25,470
like a page that you could just view on

00:27:23,940 --> 00:27:27,180
a browser without having to interact

00:27:25,470 --> 00:27:30,150
with a server sorry in this particular

00:27:27,180 --> 00:27:32,130
case there is it would be entirely I

00:27:30,150 --> 00:27:33,660
serve a client-side application single

00:27:32,130 --> 00:27:35,490
page applications so even part of the

00:27:33,660 --> 00:27:38,220
picture is batavia this was something

00:27:35,490 --> 00:27:40,679
that Dan Callahan alluded to on Monday

00:27:38,220 --> 00:27:42,420
any business so any business logic like

00:27:40,679 --> 00:27:44,550
the button handler would be compiled as

00:27:42,420 --> 00:27:45,900
byte code shipped to the browser it

00:27:44,550 --> 00:27:47,520
doesn't need to talk back to the server

00:27:45,900 --> 00:27:49,380
to run that logic the Python is running

00:27:47,520 --> 00:27:53,850
in the browser as well so it would be a

00:27:49,380 --> 00:27:59,100
standalone single page app what about

00:27:53,850 --> 00:28:03,240
graphics support in what sense OpenGL or

00:27:59,100 --> 00:28:04,710
some sort of sure so one of the areas

00:28:03,240 --> 00:28:06,179
that danielle has been working on

00:28:04,710 --> 00:28:08,580
recently is a canvas widget so that's

00:28:06,179 --> 00:28:10,980
the sort of primitive 2d graphics we do

00:28:08,580 --> 00:28:13,170
not currently have OpenGL libraries or

00:28:10,980 --> 00:28:14,940
anything like that but OpenGL is a well

00:28:13,170 --> 00:28:17,010
known API that is available on multiple

00:28:14,940 --> 00:28:18,510
platforms providing a total level

00:28:17,010 --> 00:28:22,910
abstraction for each of those platforms

00:28:18,510 --> 00:28:26,340
would be relatively straightforward and

00:28:22,910 --> 00:28:28,500
until such time as that is there or voto

00:28:26,340 --> 00:28:29,910
go is a cross-platform api it does give

00:28:28,500 --> 00:28:32,520
you direct access to the underlying

00:28:29,910 --> 00:28:35,040
widget so if you want to access native

00:28:32,520 --> 00:28:36,870
system calls that toga didn't have wraps

00:28:35,040 --> 00:28:38,550
you could get at them if you wanted to

00:28:36,870 --> 00:28:41,330
the price being that you just it stops

00:28:38,550 --> 00:28:44,730
being a cross-platform app at that point

00:28:41,330 --> 00:28:46,830
thank you for the talk um how would do

00:28:44,730 --> 00:28:50,429
you handle things like numpy that have

00:28:46,830 --> 00:28:52,860
compounded objects okay on on desktop

00:28:50,429 --> 00:28:54,000
platform so Windows Linux Mac stores

00:28:52,860 --> 00:28:55,620
exactly the same we're not doing

00:28:54,000 --> 00:28:57,600
anything like plateau XC tries to wrap

00:28:55,620 --> 00:29:00,000
everything into a single executable what

00:28:57,600 --> 00:29:02,309
we package is a single application

00:29:00,000 --> 00:29:03,720
experience but it is just Python under

00:29:02,309 --> 00:29:06,929
the hood so if you can pip install it it

00:29:03,720 --> 00:29:08,460
works fine on iOS it's a little bit more

00:29:06,929 --> 00:29:09,450
complicated because you actually need to

00:29:08,460 --> 00:29:12,690
compile the C

00:29:09,450 --> 00:29:14,909
components of numpy for use on on iOS

00:29:12,690 --> 00:29:16,740
that said numpy specifically I have

00:29:14,909 --> 00:29:17,399
already packaged so that is available

00:29:16,740 --> 00:29:19,049
for use

00:29:17,399 --> 00:29:20,490
you can drop an umpire package in there

00:29:19,049 --> 00:29:21,720
a little bit fiddly to get going but it

00:29:20,490 --> 00:29:24,809
can be done we want to smooth that

00:29:21,720 --> 00:29:28,169
experience more generally see see Python

00:29:24,809 --> 00:29:29,580
modules that are written in C that could

00:29:28,169 --> 00:29:30,570
be abstracted but again it's a little

00:29:29,580 --> 00:29:32,220
bit more work because you've got to

00:29:30,570 --> 00:29:33,840
compile it four five six different

00:29:32,220 --> 00:29:36,299
architectures when it gets there can be

00:29:33,840 --> 00:29:38,309
done more complicated java ism what is a

00:29:36,299 --> 00:29:39,539
much different story because for Android

00:29:38,309 --> 00:29:41,399
it actually needs to be written in Java

00:29:39,539 --> 00:29:44,070
it might be possible to do it over J and

00:29:41,399 --> 00:29:49,830
I I don't know what's this base maybe

00:29:44,070 --> 00:29:51,510
possibly thank you hey I have a lot of

00:29:49,830 --> 00:29:53,909
questions but I'm gonna be here for the

00:29:51,510 --> 00:29:56,309
Sprint so I'll catch up with you

00:29:53,909 --> 00:29:58,620
you were very frank by saying it's not

00:29:56,309 --> 00:30:00,649
even version one I just want you to

00:29:58,620 --> 00:30:02,220
highlight a couple of things that are

00:30:00,649 --> 00:30:04,590
priority list

00:30:02,220 --> 00:30:07,529
coming up I'm more like because it's a

00:30:04,590 --> 00:30:10,049
native app across platforms sure the

00:30:07,529 --> 00:30:11,940
first thing is like a drag-and-drop GUI

00:30:10,049 --> 00:30:14,130
something interface which you can

00:30:11,940 --> 00:30:16,620
quickly draw and rather than creating

00:30:14,130 --> 00:30:18,169
sure okay Exeter Exeter just just wanted

00:30:16,620 --> 00:30:20,070
to get your thoughts yes sorry that's

00:30:18,169 --> 00:30:21,240
yes we would love to have a GUI

00:30:20,070 --> 00:30:22,529
application for building GUI

00:30:21,240 --> 00:30:25,169
applications but we need the toolkit

00:30:22,529 --> 00:30:27,090
first the gag of the project has it

00:30:25,169 --> 00:30:28,230
started out being an IDE project and we

00:30:27,090 --> 00:30:31,980
kind of got distracted building a widget

00:30:28,230 --> 00:30:33,419
toolkit so yeah we'd love to have a GUI

00:30:31,980 --> 00:30:35,039
toolkit it's basically the biggest issue

00:30:33,419 --> 00:30:37,320
at the moment is just availability of

00:30:35,039 --> 00:30:38,850
widgets across platforms so more

00:30:37,320 --> 00:30:40,139
contributors I can point to it how to

00:30:38,850 --> 00:30:42,720
build new widgets and that will build

00:30:40,139 --> 00:30:43,820
out okay let's give wrestle one last

00:30:42,720 --> 00:30:51,390
round of applause

00:30:43,820 --> 00:30:51,390

YouTube URL: https://www.youtube.com/watch?v=qaPzlIJ57dk


