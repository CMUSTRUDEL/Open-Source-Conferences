Title: Graham Dumpleton - Secrets of a WSGI master. - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Graham Dumpleton

The WSGI (Web Server Gateway Interface) specification for hosting Python web applications was created in 2003. Measured in Internet time, it is ancient. The oldest main stream implementation of the WSGI specification is mod_wsgi, for the Apache HTTPD server and it is over 10 years old.

WSGI is starting to be regarded as not up to the job, with technologies such as HTTP/2, web sockets and async dispatching being the way forward. Reality is that WSGI will be around for quite some time yet and for the majority of use cases is more than adequate.

The real problem is not that we need to move to these new technologies, but that we aren't using the current WSGI servers to their best advantage. Moving to a new set of technologies will not necessarily make things better and will only create a new set of problems you have to solve.

As one of the oldest WSGI server implementations, Apache and mod\_wsgi may be regarded as boring and not cool, but it is still the most stable option for hosting WSGI applications available. It also hasn't been sitting still, with a considerable amount of development work being done on mod\_wsgi in the last few years to make it even more robust and easier to use in a development environment as well as production, including in containerised environments.

In this talk you will learn about many features of mod\_wsgi which you probably didn't even know existed, features which can help towards ensuring your Python web application deployment performs to its best, is secure, and has a low maintenance burden.

Topics which will be covered include:

* Easy deployment of Python web applications using mod\_wsgi-express.
* Integration of mod_wsgi-express with a Django web application.
* Using mod\_wsgi-express in a development environment.
* How to make use of mod\_wsgi-express in a production environment.
* Using mod_wsgi-express in a containerised runtime environment.
* Ensuring consistency between development and production environments using warpdrive.
* Using mod\_wsgi-express to bootstrap a system Apache installation for hosting WSGI applications.
* Why you should be using daemon mode of mod\_wsgi and not embedded mode.
* How to properly associate mod\_wsgi with a Python virtual environment.
* Building a robust deployment that can recover from misbehaving application code, backend services, or request overloading.
* Using hooks provided by mod\_wsgi to monitor the performance of your Python web application.

If you are a beginner, come learn why mod\_wsgi is still a good option for deploying your Python web applications. If you are an old time user of mod\_wsgi, find out about all the features you probably didn't know existed, revisit your current Python web application deployment and make it even better.

Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:01,370 --> 00:00:09,420
so welcome this is grand

00:00:04,410 --> 00:00:19,109
Dumbleton and with secrets of wsg master

00:00:09,420 --> 00:00:21,420
thank you so thank you everyone for

00:00:19,109 --> 00:00:23,400
coming last talk of the day and it's

00:00:21,420 --> 00:00:26,189
always challenge sometimes at least I'm

00:00:23,400 --> 00:00:27,480
not the last talk of the last day cuz

00:00:26,189 --> 00:00:29,640
everyone half the time everyone's gone

00:00:27,480 --> 00:00:33,809
off half go home already

00:00:29,640 --> 00:00:37,230
so my background if you're not familiar

00:00:33,809 --> 00:00:40,649
I am the author of Maude whiskey so I've

00:00:37,230 --> 00:00:42,710
been involved with the whiskey and what

00:00:40,649 --> 00:00:45,570
it is for over ten years

00:00:42,710 --> 00:00:48,360
shortly after when it was created I've

00:00:45,570 --> 00:00:51,059
always been very opinionated on my ideas

00:00:48,360 --> 00:00:52,500
around it so the point of this talk is

00:00:51,059 --> 00:00:55,050
to sort of hopefully give you a bit of

00:00:52,500 --> 00:00:58,530
wisdom which I've accumulated about

00:00:55,050 --> 00:01:02,579
using whiskey apps or in particular with

00:00:58,530 --> 00:01:05,250
Maude whiskey which is the might Apache

00:01:02,579 --> 00:01:06,780
module which I wrote which allows you to

00:01:05,250 --> 00:01:10,409
run your Python web application with

00:01:06,780 --> 00:01:13,680
Apache so I'm gonna give various tips

00:01:10,409 --> 00:01:15,479
and things a lot along the way and also

00:01:13,680 --> 00:01:17,520
perhaps tell you about some things you

00:01:15,479 --> 00:01:18,960
may not have known about around Maude

00:01:17,520 --> 00:01:21,060
whiskey because I've been doing a lot of

00:01:18,960 --> 00:01:23,729
work with it over the last few years

00:01:21,060 --> 00:01:26,580
where I haven't necessarily documented

00:01:23,729 --> 00:01:29,280
much or said much about it and so you

00:01:26,580 --> 00:01:31,770
might not know about those things so

00:01:29,280 --> 00:01:34,350
what is whiskey I call whiskey now I

00:01:31,770 --> 00:01:36,710
used to always called WSGI but what it

00:01:34,350 --> 00:01:41,189
means is web server gateway interface

00:01:36,710 --> 00:01:44,670
and what it is is a means of plugging in

00:01:41,189 --> 00:01:48,750
a Python web application with a web

00:01:44,670 --> 00:01:52,070
server so it's going to bridge act as a

00:01:48,750 --> 00:01:54,930
bridge between those two now importantly

00:01:52,070 --> 00:01:57,390
whisky is an application programming

00:01:54,930 --> 00:01:59,850
interface so when I have this picture

00:01:57,390 --> 00:02:04,040
again here where I talk about HTTP and

00:01:59,850 --> 00:02:06,630
WSGI whiskey HTTP is a wire protocol

00:02:04,040 --> 00:02:08,789
whisky is not it's an application

00:02:06,630 --> 00:02:10,500
programming interface and I see a lot of

00:02:08,789 --> 00:02:13,330
people get confused about that at times

00:02:10,500 --> 00:02:15,400
in trying to understand it

00:02:13,330 --> 00:02:17,710
that's not a wire protocol the other

00:02:15,400 --> 00:02:20,440
thing worth pointing out that whiskey is

00:02:17,710 --> 00:02:22,990
not an implementation of anything it is

00:02:20,440 --> 00:02:25,720
a specification and it's defined by pep

00:02:22,990 --> 00:02:28,420
originally free free free but there was

00:02:25,720 --> 00:02:31,150
an update related to Python free called

00:02:28,420 --> 00:02:34,540
free free free free just to make

00:02:31,150 --> 00:02:37,240
everything confusing so it's not an

00:02:34,540 --> 00:02:39,820
invitation especially with me being the

00:02:37,240 --> 00:02:41,980
author of mod whiskey you'll often see

00:02:39,820 --> 00:02:44,190
people say oh I'm using Apache and

00:02:41,980 --> 00:02:45,880
whiskey that's actually confusing

00:02:44,190 --> 00:02:47,680
because you don't know whether they're

00:02:45,880 --> 00:02:49,330
talking about mod whiskey or they're

00:02:47,680 --> 00:02:52,180
talking about Apache we've guna corn

00:02:49,330 --> 00:02:53,830
behind it as a using Apache as a proxy

00:02:52,180 --> 00:02:55,630
so it's all important if you're talking

00:02:53,830 --> 00:02:57,070
about implementation use the name so use

00:02:55,630 --> 00:02:59,940
mod whiskey if you're talking about that

00:02:57,070 --> 00:03:02,290
or guna corn you whiskey and so on

00:02:59,940 --> 00:03:05,380
so what does the canonical HelloWorld

00:03:02,290 --> 00:03:07,240
program look like for whiskey this is it

00:03:05,380 --> 00:03:09,850
it's very simple you have a call all

00:03:07,240 --> 00:03:12,610
object to function in this case and for

00:03:09,850 --> 00:03:14,530
each request you'll get passed an

00:03:12,610 --> 00:03:16,960
environ

00:03:14,530 --> 00:03:19,780
all the information about the request of

00:03:16,960 --> 00:03:21,910
the HTTP headers but also information

00:03:19,780 --> 00:03:25,150
from the server itself information such

00:03:21,910 --> 00:03:27,970
as the remote client IP address and

00:03:25,150 --> 00:03:29,980
other information about the server its

00:03:27,970 --> 00:03:32,760
then the job of that whiskey application

00:03:29,980 --> 00:03:35,590
to act on that request information and

00:03:32,760 --> 00:03:39,910
it's going to generate a response and a

00:03:35,590 --> 00:03:43,660
response composes of headers for the

00:03:39,910 --> 00:03:45,160
HTTP response and a request body start

00:03:43,660 --> 00:03:46,959
response is called to setup the header

00:03:45,160 --> 00:03:50,080
and then we're doing to actually return

00:03:46,959 --> 00:03:52,330
that body so very very simple there are

00:03:50,080 --> 00:03:54,250
lots of traps and pitfalls of writing

00:03:52,330 --> 00:03:56,380
whiskey applications so it may look

00:03:54,250 --> 00:03:58,030
simple but when you start to actually

00:03:56,380 --> 00:04:00,010
build on top of this very basic

00:03:58,030 --> 00:04:02,260
construct and try to create a whole

00:04:00,010 --> 00:04:04,330
application stack you might start to

00:04:02,260 --> 00:04:06,610
introduce whiskey middleware and other

00:04:04,330 --> 00:04:09,700
bits like that and how you deal with

00:04:06,610 --> 00:04:13,150
requesting the request content and it

00:04:09,700 --> 00:04:14,680
gets very very messy at times so my

00:04:13,150 --> 00:04:18,310
suggestion is friends don't let friends

00:04:14,680 --> 00:04:19,720
use raw whiskey okay it's very

00:04:18,310 --> 00:04:21,520
frustrating to see a lot of people on

00:04:19,720 --> 00:04:23,500
stack of coming up with problems I'm

00:04:21,520 --> 00:04:26,380
trying to understand this I don't

00:04:23,500 --> 00:04:26,710
understand why are you trying to do it

00:04:26,380 --> 00:04:29,770
with

00:04:26,710 --> 00:04:32,050
or whiskey so if you have friends who

00:04:29,770 --> 00:04:35,110
think you're getting it's whiskey steer

00:04:32,050 --> 00:04:38,289
them to a web framework please it'll

00:04:35,110 --> 00:04:40,780
save them a lot of trouble because they

00:04:38,289 --> 00:04:43,240
won't be well these ones have a lot of

00:04:40,780 --> 00:04:45,699
documentation for a start which explains

00:04:43,240 --> 00:04:47,949
how to use them good tutorials and so on

00:04:45,699 --> 00:04:49,509
but do provide an interface on top of

00:04:47,949 --> 00:04:51,940
whiskey which hides all those horrible

00:04:49,509 --> 00:04:55,780
things and ensures that things are

00:04:51,940 --> 00:04:57,310
implemented correctly now even if you're

00:04:55,780 --> 00:05:00,130
using one of those frameworks you still

00:04:57,310 --> 00:05:02,020
need a way to host a whiskey application

00:05:00,130 --> 00:05:05,770
they are a framework to help you build

00:05:02,020 --> 00:05:08,080
that application now those frameworks

00:05:05,770 --> 00:05:11,650
such as Jango and flask they do provide

00:05:08,080 --> 00:05:15,370
you a whiskey server you can use that is

00:05:11,650 --> 00:05:18,550
a development whiskey server it's not

00:05:15,370 --> 00:05:21,130
suitable for production so even if they

00:05:18,550 --> 00:05:22,300
do have them do not use them and this is

00:05:21,130 --> 00:05:23,919
the way you need to start looking at

00:05:22,300 --> 00:05:26,530
what's called we call production grade

00:05:23,919 --> 00:05:28,330
whiskey server and there's various

00:05:26,530 --> 00:05:30,699
attributes that a production grade

00:05:28,330 --> 00:05:32,229
whiskey server has to have and those

00:05:30,699 --> 00:05:34,030
development service don't

00:05:32,229 --> 00:05:36,340
so for whiskey service we're talking

00:05:34,030 --> 00:05:40,180
about mod whiskey with Apache we have

00:05:36,340 --> 00:05:42,940
guna corn we have u whiskey there the

00:05:40,180 --> 00:05:45,729
main free there's also tornado and knock

00:05:42,940 --> 00:05:48,009
tornado waitress which is another one

00:05:45,729 --> 00:05:49,710
which is straight whiskey server and

00:05:48,009 --> 00:05:52,599
then we have to have other ones which is

00:05:49,710 --> 00:05:54,550
tornado which is not really a strictly

00:05:52,599 --> 00:05:56,740
just the whiskey service actually an

00:05:54,550 --> 00:05:58,539
asynchronous web server but they do have

00:05:56,740 --> 00:06:00,909
an adapter for whiskey but the three

00:05:58,539 --> 00:06:05,440
main ones you'll see Apache mod whiskey

00:06:00,909 --> 00:06:07,479
guna corn and you whiskey Apache and mod

00:06:05,440 --> 00:06:11,860
whiskey is traditionally been seen as

00:06:07,479 --> 00:06:14,650
being very hard to set up back in the

00:06:11,860 --> 00:06:16,479
day when everything started up with when

00:06:14,650 --> 00:06:18,340
mod whiskey first came out you had to

00:06:16,479 --> 00:06:20,830
like download the source code for mod

00:06:18,340 --> 00:06:22,360
whiskey from the site you had to unpack

00:06:20,830 --> 00:06:24,820
tar ball you had to go and do a

00:06:22,360 --> 00:06:26,889
configure step and make step and make

00:06:24,820 --> 00:06:28,719
install step and then you still had to

00:06:26,889 --> 00:06:30,520
configure Apache to actually load it and

00:06:28,719 --> 00:06:32,650
then configure it for your application

00:06:30,520 --> 00:06:34,930
there was a bit of a black art to that

00:06:32,650 --> 00:06:37,029
that I wrote a lot of Doc's

00:06:34,930 --> 00:06:38,830
people didn't necessarily read them but

00:06:37,029 --> 00:06:41,019
even if you read them it'll still

00:06:38,830 --> 00:06:42,699
perhaps difficult to set up

00:06:41,019 --> 00:06:44,559
things were slightly better when the

00:06:42,699 --> 00:06:47,049
Linux distribution started to package it

00:06:44,559 --> 00:06:49,149
mod whiskey you could at least go

00:06:47,049 --> 00:06:51,299
apt-get install or yum install and get

00:06:49,149 --> 00:06:55,509
it in but you still have to configure it

00:06:51,299 --> 00:06:57,399
now at least for installation now things

00:06:55,509 --> 00:06:59,139
are a bit easier because one of the

00:06:57,399 --> 00:07:00,879
problems with the Linux distributions

00:06:59,139 --> 00:07:03,189
now is they don't necessarily have an up

00:07:00,879 --> 00:07:05,619
to date version of mod whiskey there was

00:07:03,189 --> 00:07:08,289
a situation and not too fond ago that

00:07:05,619 --> 00:07:11,199
Debian Ubuntu was supplying a version of

00:07:08,289 --> 00:07:15,039
mod key whiskey which was 5 years old it

00:07:11,199 --> 00:07:16,269
was 50 versions out of date that drives

00:07:15,039 --> 00:07:18,849
me nuts you know when I was be

00:07:16,269 --> 00:07:21,879
supporting the last version not alone 50

00:07:18,849 --> 00:07:23,469
versions ago so what a lot of people

00:07:21,879 --> 00:07:25,779
probably don't know is that it's

00:07:23,469 --> 00:07:29,619
actually possible to build mod whiskey

00:07:25,779 --> 00:07:31,119
and install it using PIP so long you

00:07:29,619 --> 00:07:32,349
still have to have a patchy installed

00:07:31,119 --> 00:07:34,360
you still have to have the Apache dev

00:07:32,349 --> 00:07:36,610
package installed for your operating

00:07:34,360 --> 00:07:38,499
system but you can pipe install it it'll

00:07:36,610 --> 00:07:40,569
pull down the source code and it will

00:07:38,499 --> 00:07:43,360
actually build it up and install mod

00:07:40,569 --> 00:07:44,949
whiskey module that is built into the

00:07:43,360 --> 00:07:47,789
pipe installation or version environment

00:07:44,949 --> 00:07:50,860
you're using but that's not all

00:07:47,789 --> 00:07:53,169
there's also now a way of running a

00:07:50,860 --> 00:07:55,419
patch with mod whiskey from the command

00:07:53,169 --> 00:07:58,059
line so rather than actually having to

00:07:55,419 --> 00:08:01,149
go in and configure Apache to load it

00:07:58,059 --> 00:08:03,219
you can just run this command so I just

00:08:01,149 --> 00:08:05,249
go to mod whiskey Express start server

00:08:03,219 --> 00:08:08,409
and give it my whiskey script file and

00:08:05,249 --> 00:08:11,919
it's going to do startup Apache for me

00:08:08,409 --> 00:08:14,009
and run my web app and I haven't done a

00:08:11,919 --> 00:08:16,539
single line of configuration and that

00:08:14,009 --> 00:08:19,899
was a bit that was difficult for a lot

00:08:16,539 --> 00:08:21,699
of people this does it all for you so

00:08:19,899 --> 00:08:23,050
this is just like you came with goona

00:08:21,699 --> 00:08:26,529
core now I can run it from the command

00:08:23,050 --> 00:08:29,619
line it'll start on port 80 8000 by

00:08:26,529 --> 00:08:33,009
default it'll go in and set up the

00:08:29,619 --> 00:08:35,259
configuration for you for Apache by

00:08:33,009 --> 00:08:38,110
itself and do it with a set of

00:08:35,259 --> 00:08:40,839
configuration which I regard as being a

00:08:38,110 --> 00:08:43,180
really good starting point and this is

00:08:40,839 --> 00:08:45,339
important because mod whiskey has been

00:08:43,180 --> 00:08:46,930
around for over 10 years and like with a

00:08:45,339 --> 00:08:49,569
lot of software packages you make

00:08:46,930 --> 00:08:52,870
decisions early on which you think are

00:08:49,569 --> 00:08:54,220
good decisions and once you make that

00:08:52,870 --> 00:08:56,199
decision you can't

00:08:54,220 --> 00:08:57,699
change your mind so this is actually

00:08:56,199 --> 00:08:59,529
been a really good thing for me because

00:08:57,699 --> 00:09:01,449
it means I've been able to go back and

00:08:59,529 --> 00:09:03,100
because I'm automatically configuring it

00:09:01,449 --> 00:09:04,839
I've been able to draw on all that

00:09:03,100 --> 00:09:07,089
experience from how people used mud

00:09:04,839 --> 00:09:09,579
whisky and set up with a really good

00:09:07,089 --> 00:09:11,560
configuration which isn't actually the

00:09:09,579 --> 00:09:13,750
same as what the default configuration

00:09:11,560 --> 00:09:14,980
would be if you using Apache yourself

00:09:13,750 --> 00:09:18,069
and doing it yourself

00:09:14,980 --> 00:09:20,410
so I've done a lot better you can learn

00:09:18,069 --> 00:09:21,910
from that and I part of the latest

00:09:20,410 --> 00:09:26,769
slides will talk about some of that that

00:09:21,910 --> 00:09:28,629
extra configuration I do now do if

00:09:26,769 --> 00:09:31,629
you're using Django though we can make

00:09:28,629 --> 00:09:36,339
it even easier again you can go into

00:09:31,629 --> 00:09:39,129
your Django settings module you can add

00:09:36,339 --> 00:09:41,529
in mod whiskey server to the list of

00:09:39,129 --> 00:09:43,660
installed apps and that's just going to

00:09:41,529 --> 00:09:46,029
give you a new management command you

00:09:43,660 --> 00:09:48,189
can run with the managed up I so I can

00:09:46,029 --> 00:09:51,670
go PI from manage PI run mod whiskey and

00:09:48,189 --> 00:09:53,889
it will start up django app just like if

00:09:51,670 --> 00:09:56,589
you're running Python managed by run

00:09:53,889 --> 00:10:00,009
server but in this case it's using mod

00:09:56,589 --> 00:10:01,959
whiskey in Apache underneath and so

00:10:00,009 --> 00:10:04,569
you'll now have a production grade

00:10:01,959 --> 00:10:07,209
server rather than just that development

00:10:04,569 --> 00:10:09,220
server now you may be saying well why

00:10:07,209 --> 00:10:12,309
would I want to do that the the run

00:10:09,220 --> 00:10:15,910
server is really useful in development I

00:10:12,309 --> 00:10:18,670
get automatic source code reloading and

00:10:15,910 --> 00:10:20,949
you might think well no point okay but

00:10:18,670 --> 00:10:22,509
you can it's not the default because I

00:10:20,949 --> 00:10:25,059
want the default to be a production

00:10:22,509 --> 00:10:27,970
ready configuration but you can if you

00:10:25,059 --> 00:10:29,410
want say reload uncle changes that means

00:10:27,970 --> 00:10:31,779
that once you go in and change your

00:10:29,410 --> 00:10:33,430
source code it will automatically

00:10:31,779 --> 00:10:35,589
restart the process to reload the code

00:10:33,430 --> 00:10:37,420
on the next request okay so you still

00:10:35,589 --> 00:10:40,000
have functionality so it is possible to

00:10:37,420 --> 00:10:42,009
use this for development those used to

00:10:40,000 --> 00:10:43,809
be in the past the idea is that no one

00:10:42,009 --> 00:10:45,129
ever would ever use mod Wiis can develop

00:10:43,809 --> 00:10:47,889
them because they felt it was too hard

00:10:45,129 --> 00:10:49,689
to set up a pesci and to go and manually

00:10:47,889 --> 00:10:52,529
restart Apache every time you made a

00:10:49,689 --> 00:10:54,759
change so with this you don't need to

00:10:52,529 --> 00:10:58,300
there are a bunch of other options which

00:10:54,759 --> 00:11:00,870
the mod whiskey Express supports and one

00:10:58,300 --> 00:11:05,259
other example is enabling the debugger

00:11:00,870 --> 00:11:08,259
so if you want to start debugging in PDB

00:11:05,259 --> 00:11:10,239
the Python debugger is why and

00:11:08,259 --> 00:11:12,189
exception occurs you can actually run

00:11:10,239 --> 00:11:14,439
that command like that and it will throw

00:11:12,189 --> 00:11:16,119
you into the Python debugger to actually

00:11:14,439 --> 00:11:18,579
then debug it if you want and there's

00:11:16,119 --> 00:11:20,439
various other commands for tracking or

00:11:18,579 --> 00:11:22,269
capturing an audit trail of all the

00:11:20,439 --> 00:11:24,009
requests so you can actually look at all

00:11:22,269 --> 00:11:26,709
the request headers the request content

00:11:24,009 --> 00:11:27,970
responses and response content for every

00:11:26,709 --> 00:11:30,189
query quest if you need to actually

00:11:27,970 --> 00:11:33,970
start debugging at that level and

00:11:30,189 --> 00:11:35,559
various other things so I can do that

00:11:33,970 --> 00:11:37,449
from the command line we've with Jango

00:11:35,559 --> 00:11:40,929
in that way now if I want to take that

00:11:37,449 --> 00:11:45,039
to production all I need to do is run

00:11:40,929 --> 00:11:48,669
the same command that I ran before we've

00:11:45,039 --> 00:11:49,989
run mod whiskey I need a place in to

00:11:48,669 --> 00:11:51,609
actually say this if you if you're

00:11:49,989 --> 00:11:53,379
looking closely when I ran this before

00:11:51,609 --> 00:11:55,089
it was doing stuff in temp slash temp

00:11:53,379 --> 00:11:56,379
with the generated configuration for a

00:11:55,089 --> 00:11:58,299
real production we want to actually put

00:11:56,379 --> 00:12:00,009
it in a better location so that a cron

00:11:58,299 --> 00:12:02,649
job doesn't go and remove all the files

00:12:00,009 --> 00:12:04,179
from slash temp on us so we'll give it a

00:12:02,649 --> 00:12:06,279
center root we'll put that in etc

00:12:04,179 --> 00:12:08,439
directory so I'm gonna run this command

00:12:06,279 --> 00:12:10,299
as root initially I'm gonna want to use

00:12:08,439 --> 00:12:12,519
port 80 that means it's a privileged

00:12:10,299 --> 00:12:14,379
port I need to be route to start this up

00:12:12,519 --> 00:12:16,600
so that's why I'm specifying a user and

00:12:14,379 --> 00:12:18,939
group two to have this run the

00:12:16,600 --> 00:12:21,879
application knows when it starts and I

00:12:18,939 --> 00:12:24,519
just put - - - setup on only on the end

00:12:21,879 --> 00:12:27,069
and it will generate the config but not

00:12:24,519 --> 00:12:29,499
actually start anything okay so I've got

00:12:27,069 --> 00:12:32,889
my config and it's not gonna be

00:12:29,499 --> 00:12:35,470
generator each time one of the things in

00:12:32,889 --> 00:12:37,089
that generator config is an Apache CTL

00:12:35,470 --> 00:12:39,369
script just like you would have with a

00:12:37,089 --> 00:12:40,989
normal Apache installation but this one

00:12:39,369 --> 00:12:44,350
is tied to this particular generated

00:12:40,989 --> 00:12:47,739
conflict and I can do start restart and

00:12:44,350 --> 00:12:50,230
stop and I can then put that in to my

00:12:47,739 --> 00:12:52,899
init scripts in my system setup or using

00:12:50,230 --> 00:12:55,809
systemd and have that started up when

00:12:52,899 --> 00:12:57,309
the box starts now very very important

00:12:55,809 --> 00:12:59,379
in all of this what it described so far

00:12:57,309 --> 00:13:02,319
about that generating configuration it

00:12:59,379 --> 00:13:05,470
is not touching your system Apache

00:13:02,319 --> 00:13:07,419
configuration okay it's generating it

00:13:05,470 --> 00:13:10,720
all in a separate area so it is a

00:13:07,419 --> 00:13:12,009
totally isolated config so if you were

00:13:10,720 --> 00:13:13,959
using Apache

00:13:12,009 --> 00:13:16,269
on your system for something else it

00:13:13,959 --> 00:13:18,909
will not interfere with it the only

00:13:16,269 --> 00:13:22,420
thing is if you do want to run it this

00:13:18,909 --> 00:13:24,189
way on port 80 you would install a patch

00:13:22,420 --> 00:13:26,019
but you wouldn't actually enable it in

00:13:24,189 --> 00:13:27,579
system D so it started up in that way

00:13:26,019 --> 00:13:30,550
because we want this one to take over

00:13:27,579 --> 00:13:33,850
port 80 so we've got a very easy way now

00:13:30,550 --> 00:13:36,100
going from development being able to run

00:13:33,850 --> 00:13:38,379
on the command line generate your config

00:13:36,100 --> 00:13:40,329
put it in your system init files and

00:13:38,379 --> 00:13:44,860
have it start up as your actual main

00:13:40,329 --> 00:13:46,720
Apache on your box although those

00:13:44,860 --> 00:13:49,089
examples I guess our work so far we're

00:13:46,720 --> 00:13:50,829
primarily involving Django if you're not

00:13:49,089 --> 00:13:54,569
using Django you can still do the same

00:13:50,829 --> 00:13:57,430
thing starts over risky script file I

00:13:54,569 --> 00:13:59,499
have all my options now one of the

00:13:57,430 --> 00:14:02,920
things about how the Django integration

00:13:59,499 --> 00:14:06,129
worked is that it automatically set up

00:14:02,920 --> 00:14:09,610
the capatch II configuration required to

00:14:06,129 --> 00:14:11,589
map your static files into Apache so

00:14:09,610 --> 00:14:14,139
that when you access the slash static

00:14:11,589 --> 00:14:16,149
directory that would all we handle for

00:14:14,139 --> 00:14:18,790
you now in this case on running a

00:14:16,149 --> 00:14:20,680
separate whiskey application now so I

00:14:18,790 --> 00:14:23,829
can still do that by using this URL

00:14:20,680 --> 00:14:25,540
alias option and say I have these files

00:14:23,829 --> 00:14:27,429
in my static directory here I want to

00:14:25,540 --> 00:14:29,589
map them at slash static and they're a

00:14:27,429 --> 00:14:31,209
bunch of other options available you can

00:14:29,589 --> 00:14:33,910
override the number of processes and

00:14:31,209 --> 00:14:39,179
Fred's and lots of other things to do

00:14:33,910 --> 00:14:41,199
with how you handle things like

00:14:39,179 --> 00:14:42,459
responding to headers for proxy

00:14:41,199 --> 00:14:44,769
information if you're putting this

00:14:42,459 --> 00:14:46,929
behind a proxy for example there's all

00:14:44,769 --> 00:14:48,579
sorts of things like that if you need to

00:14:46,929 --> 00:14:50,980
know about any of the information you

00:14:48,579 --> 00:14:53,379
can go - - help it'll put out lots of

00:14:50,980 --> 00:14:56,679
helpful information not as long as the

00:14:53,379 --> 00:14:58,839
volume Alice you whiskey Doc's but then

00:14:56,679 --> 00:15:01,230
it's not as complicated diver is trying

00:14:58,839 --> 00:15:04,420
to set up you whiskey it's much simpler

00:15:01,230 --> 00:15:07,600
so latest rage these days actually is

00:15:04,420 --> 00:15:09,639
docker and containers and one of the

00:15:07,600 --> 00:15:11,740
reasons that I went and created mod

00:15:09,639 --> 00:15:13,360
whiskey Express in the first place was

00:15:11,740 --> 00:15:15,699
because of what was happening in the

00:15:13,360 --> 00:15:19,779
container space if you had to set up

00:15:15,699 --> 00:15:21,970
Apache with mod whiskey in a docker file

00:15:19,779 --> 00:15:23,410
for running in a container it was just

00:15:21,970 --> 00:15:25,389
as messy as if you're doing it on your

00:15:23,410 --> 00:15:27,339
own box and in some ways even more messy

00:15:25,389 --> 00:15:28,809
because you couldn't do it manually by

00:15:27,339 --> 00:15:30,699
hand you had to actually script the

00:15:28,809 --> 00:15:33,370
generation of all config to integrated

00:15:30,699 --> 00:15:34,569
into the Apache config so that was

00:15:33,370 --> 00:15:36,010
actually one of the reasons why I did

00:15:34,569 --> 00:15:40,000
this

00:15:36,010 --> 00:15:41,500
using this with docker not too hard

00:15:40,000 --> 00:15:43,180
we just potentially start out with your

00:15:41,500 --> 00:15:47,170
docker base image you're going to

00:15:43,180 --> 00:15:48,940
install Apache packages required very

00:15:47,170 --> 00:15:51,910
importantly if you have don't work with

00:15:48,940 --> 00:15:53,920
the Python base images from docker is

00:15:51,910 --> 00:15:54,880
this problems of Unicode so we can fix

00:15:53,920 --> 00:15:58,450
them up

00:15:54,880 --> 00:16:01,090
we people install mod whiskey and we set

00:15:58,450 --> 00:16:02,740
our PL command to actually run things

00:16:01,090 --> 00:16:04,060
and because we're in a docker container

00:16:02,740 --> 00:16:06,250
we're going to say log to terminal so

00:16:04,060 --> 00:16:11,170
that we can capture those locks ok

00:16:06,250 --> 00:16:12,400
pretty simple so once we do that we do

00:16:11,170 --> 00:16:15,670
we can build that for look at our docker

00:16:12,400 --> 00:16:19,450
file and we can run it ok fairly

00:16:15,670 --> 00:16:20,050
straightforward but if you have used

00:16:19,450 --> 00:16:21,850
docker

00:16:20,050 --> 00:16:24,550
I don't know how many people aware of

00:16:21,850 --> 00:16:26,350
this problem if you saw that if you

00:16:24,550 --> 00:16:27,970
understood had docker builds work that

00:16:26,350 --> 00:16:29,530
container when I was running it was I

00:16:27,970 --> 00:16:32,380
was running as root inside of that

00:16:29,530 --> 00:16:34,420
container please don't do that who does

00:16:32,380 --> 00:16:36,640
say hey so he's going to admit that they

00:16:34,420 --> 00:16:39,360
run their docker containers root yeah

00:16:36,640 --> 00:16:39,360
please don't do that

00:16:39,570 --> 00:16:44,140
containers do provide you an extra level

00:16:41,950 --> 00:16:45,670
of isolation but the important things

00:16:44,140 --> 00:16:48,460
with production systems you always have

00:16:45,670 --> 00:16:51,220
as many layers of security as you can if

00:16:48,460 --> 00:16:52,780
you run things as root then as a

00:16:51,220 --> 00:16:54,850
vulnerability found in the container

00:16:52,780 --> 00:16:57,010
runtime someone can escape out so the

00:16:54,850 --> 00:16:59,170
hosts they're already root so trees

00:16:57,010 --> 00:17:01,000
don't run things as root the other thing

00:16:59,170 --> 00:17:03,700
about that very simple docker file is I

00:17:01,000 --> 00:17:05,500
was not using a virtual environment even

00:17:03,700 --> 00:17:06,850
if you're using docker you might think

00:17:05,500 --> 00:17:09,150
oh I don't need a virtual environment

00:17:06,850 --> 00:17:11,170
because I'm the only thing using it

00:17:09,150 --> 00:17:12,700
please also use a virtual environment

00:17:11,170 --> 00:17:14,230
because there are a lot of issues that

00:17:12,700 --> 00:17:16,900
can come up with trying to install

00:17:14,230 --> 00:17:19,690
packages into a system Python if this

00:17:16,900 --> 00:17:21,850
operating system itself has to install

00:17:19,690 --> 00:17:23,530
packages to support the operating system

00:17:21,850 --> 00:17:26,560
you can give lots of conflict so avoid

00:17:23,530 --> 00:17:29,110
that so a better docker file might start

00:17:26,560 --> 00:17:32,560
out with creating a non root user we can

00:17:29,110 --> 00:17:34,630
do things this and I'll you'll note that

00:17:32,560 --> 00:17:38,290
are actually putting the GID is 0 I'll

00:17:34,630 --> 00:17:40,810
get to why in a moment we can create our

00:17:38,290 --> 00:17:42,430
virtual environment when we're finishing

00:17:40,810 --> 00:17:45,760
off the docker file make sure doing

00:17:42,430 --> 00:17:47,410
things as a non root user and because we

00:17:45,760 --> 00:17:49,790
are a non reducer we can't use port 80

00:17:47,410 --> 00:17:52,370
but that's ok because we can just map

00:17:49,790 --> 00:17:54,440
when we run the container now thrown in

00:17:52,370 --> 00:17:55,280
another thing here as well I could have

00:17:54,440 --> 00:17:57,560
just put in here

00:17:55,280 --> 00:17:58,970
run mod whiskey Express but I've

00:17:57,560 --> 00:18:00,620
actually got another package here or

00:17:58,970 --> 00:18:01,010
just what I just wanted to show off of

00:18:00,620 --> 00:18:03,380
it

00:18:01,010 --> 00:18:04,940
and that's called warp drive I actually

00:18:03,380 --> 00:18:06,800
create this two years ago I haven't had

00:18:04,940 --> 00:18:08,900
much pickup on it but I haven't actually

00:18:06,800 --> 00:18:12,290
said much about it either but it may be

00:18:08,900 --> 00:18:14,270
of interest if you have me of Heroku and

00:18:12,290 --> 00:18:16,670
how that works when you push up a

00:18:14,270 --> 00:18:19,280
application to Heroku it uses what's

00:18:16,670 --> 00:18:20,810
called a build pack it will go into your

00:18:19,280 --> 00:18:23,180
source code look and see if you've got a

00:18:20,810 --> 00:18:24,920
requirements text file and will

00:18:23,180 --> 00:18:27,590
automatically install the packages for

00:18:24,920 --> 00:18:31,100
you warp drive build in this example

00:18:27,590 --> 00:18:32,840
does the same thing so what is providing

00:18:31,100 --> 00:18:35,510
is a really easy ability to build up

00:18:32,840 --> 00:18:37,550
your all the files you need to support

00:18:35,510 --> 00:18:39,110
your application so that can be

00:18:37,550 --> 00:18:41,870
requirements not text because you can

00:18:39,110 --> 00:18:45,640
also put various hooks in there to do

00:18:41,870 --> 00:18:48,260
pre and post build actions and so on and

00:18:45,640 --> 00:18:50,270
to start at the end I just go warp drive

00:18:48,260 --> 00:18:52,310
start now in this case it's going to run

00:18:50,270 --> 00:18:54,740
mod whiskey but that's only your default

00:18:52,310 --> 00:18:57,500
warp drive actually knows how to startup

00:18:54,740 --> 00:18:59,450
unicorn and waitress and you whiskey as

00:18:57,500 --> 00:19:01,220
well so even if you didn't want to use

00:18:59,450 --> 00:19:02,690
mod whiskey Express you may be

00:19:01,220 --> 00:19:05,720
interested in looking at warp drive

00:19:02,690 --> 00:19:07,730
because of its ability to do that and it

00:19:05,720 --> 00:19:10,100
will worry about providing some good

00:19:07,730 --> 00:19:12,890
default options even for guna corn and

00:19:10,100 --> 00:19:16,130
you whiskey it's even smart enough to

00:19:12,890 --> 00:19:17,450
realize if you're using Django it no

00:19:16,130 --> 00:19:19,850
matter which of those service we've

00:19:17,450 --> 00:19:22,550
being used how to startup Django for you

00:19:19,850 --> 00:19:25,400
including hosting of static files or

00:19:22,550 --> 00:19:28,250
even injecting in white noise middle

00:19:25,400 --> 00:19:32,090
wrapper if using guna corn to actually

00:19:28,250 --> 00:19:33,620
handle static files so again just to run

00:19:32,090 --> 00:19:36,620
it up and you'll see that it's not

00:19:33,620 --> 00:19:38,990
running as root now now one of the other

00:19:36,620 --> 00:19:40,880
things is that even though you're

00:19:38,990 --> 00:19:42,980
running as non-root it's actually very

00:19:40,880 --> 00:19:44,990
good to design your container or your

00:19:42,980 --> 00:19:47,420
image so it can run as an arbitrary user

00:19:44,990 --> 00:19:52,850
ID and that is actually why I was using

00:19:47,420 --> 00:19:54,740
group ID 0 if you run a image as a non

00:19:52,850 --> 00:19:56,450
real user of a very very high value

00:19:54,740 --> 00:19:59,480
there's no entry in the password file

00:19:56,450 --> 00:20:01,700
it'll default to group ID of 0 so if you

00:19:59,480 --> 00:20:02,940
run a system which is a container

00:20:01,700 --> 00:20:05,039
environment we

00:20:02,940 --> 00:20:08,699
provides extra protections and forces

00:20:05,039 --> 00:20:14,849
you to run as a arbitrary user ID this

00:20:08,699 --> 00:20:16,589
will still work warp-drive I used it in

00:20:14,849 --> 00:20:19,649
docker container there or docker image

00:20:16,589 --> 00:20:21,269
it's not intended just for that one of

00:20:19,649 --> 00:20:22,889
the good things about it is you can

00:20:21,269 --> 00:20:25,799
actually still use it in your local

00:20:22,889 --> 00:20:27,479
development environment so I can

00:20:25,799 --> 00:20:29,249
actually create my project under warp

00:20:27,479 --> 00:20:30,899
drive and essentially it's gone and

00:20:29,249 --> 00:20:33,539
created a virtual environment for me and

00:20:30,899 --> 00:20:35,549
put me in that I can still go warp drive

00:20:33,539 --> 00:20:38,069
built and that ought to be all that

00:20:35,549 --> 00:20:40,529
running of the PIP to install the

00:20:38,069 --> 00:20:41,759
packages running in your hooks and then

00:20:40,529 --> 00:20:43,529
I thought when I run this over I can go

00:20:41,759 --> 00:20:45,839
warp drive start and it will start up my

00:20:43,529 --> 00:20:47,729
server for me okay so it's intended to

00:20:45,839 --> 00:20:49,829
provide you a way of building up your

00:20:47,729 --> 00:20:52,229
application environment that works on

00:20:49,829 --> 00:20:54,089
your development box but also in a

00:20:52,229 --> 00:20:57,149
containerized environment or production

00:20:54,089 --> 00:20:59,909
system so you have parity between them

00:20:57,149 --> 00:21:01,589
so you got a better better guarantee

00:20:59,909 --> 00:21:03,119
that if something works or builds

00:21:01,589 --> 00:21:04,379
properly in your own development box it

00:21:03,119 --> 00:21:08,339
will work fine in production or a

00:21:04,379 --> 00:21:10,499
container so that I haven't I haven't

00:21:08,339 --> 00:21:12,149
done much on warp drive lately but you

00:21:10,499 --> 00:21:13,499
are interested please talk to me because

00:21:12,149 --> 00:21:15,419
I'd like to sort of kick to start that

00:21:13,499 --> 00:21:17,099
again and with some of the stuff that's

00:21:15,419 --> 00:21:20,039
been happening with people in fact put

00:21:17,099 --> 00:21:26,339
ppm support in there as well and start

00:21:20,039 --> 00:21:28,469
utilizing some of that for it as far as

00:21:26,339 --> 00:21:29,849
generating a docker image we previously

00:21:28,469 --> 00:21:31,409
were using a docker file

00:21:29,849 --> 00:21:33,539
wellwe've warp drive you don't even need

00:21:31,409 --> 00:21:36,269
that I can actually use it go warp drive

00:21:33,539 --> 00:21:38,279
image name of an image to crate and it

00:21:36,269 --> 00:21:39,869
all go and build the image for me you

00:21:38,279 --> 00:21:42,839
don't even need to generate a docker

00:21:39,869 --> 00:21:44,669
file now I could have done that by

00:21:42,839 --> 00:21:46,859
generating a docker file myself in this

00:21:44,669 --> 00:21:50,099
case I'm actually using a package called

00:21:46,859 --> 00:21:53,009
source to image it can be viewed as

00:21:50,099 --> 00:21:55,829
being like build packs for Heroku

00:21:53,009 --> 00:21:57,719
but it's purpose-built for doing stuff

00:21:55,829 --> 00:22:00,869
with docker images and containers

00:21:57,719 --> 00:22:02,609
container images it allows you to define

00:22:00,869 --> 00:22:06,029
a what's called a sauce which builder as

00:22:02,609 --> 00:22:09,209
a image itself and you can point that at

00:22:06,029 --> 00:22:10,979
a source code repo using this sy command

00:22:09,209 --> 00:22:13,799
it'll pull down the git repo for me

00:22:10,979 --> 00:22:16,019
it'll run up that builder inject a repo

00:22:13,799 --> 00:22:16,590
source code and then run that build step

00:22:16,019 --> 00:22:18,840
inside

00:22:16,590 --> 00:22:20,940
and generates you an image and then I

00:22:18,840 --> 00:22:23,309
can come along and run that after now

00:22:20,940 --> 00:22:23,639
source to image is understood by at

00:22:23,309 --> 00:22:27,120
least

00:22:23,639 --> 00:22:29,220
openshift which is a kubernetes platform

00:22:27,120 --> 00:22:31,110
provided by Red Hat which builds on

00:22:29,220 --> 00:22:33,629
kubernetes and has extra capabilities

00:22:31,110 --> 00:22:35,730
for doing builds and as well as just

00:22:33,629 --> 00:22:37,259
running images so it's giving that past

00:22:35,730 --> 00:22:39,480
like environment or platform as a

00:22:37,259 --> 00:22:42,149
service and it has a source to merge

00:22:39,480 --> 00:22:43,860
build support so I've now got a way then

00:22:42,149 --> 00:22:46,379
of doing things with warp drive at my

00:22:43,860 --> 00:22:48,360
local box it understands source to image

00:22:46,379 --> 00:22:50,429
I could generate images with it but I

00:22:48,360 --> 00:22:52,860
can also deploy it direct into openshift

00:22:50,429 --> 00:22:54,990
as well all using the same underlying

00:22:52,860 --> 00:22:59,549
build mechanism but also the same way of

00:22:54,990 --> 00:23:02,129
running up there if you are using still

00:22:59,549 --> 00:23:04,230
the Apache on your box you're not left

00:23:02,129 --> 00:23:06,269
out of this still you can do peep

00:23:04,230 --> 00:23:08,669
install to build that mod whiskey

00:23:06,269 --> 00:23:09,990
module' for apache' but if you want to

00:23:08,669 --> 00:23:12,240
use your system patchy still and

00:23:09,990 --> 00:23:14,809
configure it manually you can and

00:23:12,240 --> 00:23:16,619
because the module is built into a

00:23:14,809 --> 00:23:18,659
virtual environment your path

00:23:16,619 --> 00:23:20,759
installation that's fair will run this

00:23:18,659 --> 00:23:22,080
module config command it'll generate the

00:23:20,759 --> 00:23:24,690
couple lines you need to put in the

00:23:22,080 --> 00:23:27,210
Apache config to load that you still

00:23:24,690 --> 00:23:29,789
need to go and configure it manually for

00:23:27,210 --> 00:23:34,289
your application but that's a good

00:23:29,789 --> 00:23:36,779
starting point now as far as using mod

00:23:34,289 --> 00:23:40,289
whiskey in patchy and doing it yourself

00:23:36,779 --> 00:23:42,929
when I did mod whiskey Express it used a

00:23:40,289 --> 00:23:45,769
mode called daemon mode that is the

00:23:42,929 --> 00:23:47,610
preferred way that you run mod whiskey

00:23:45,769 --> 00:23:49,080
unfortunately the history of how mod

00:23:47,610 --> 00:23:50,580
whiskey got created meant that the

00:23:49,080 --> 00:23:52,409
default mode is something called

00:23:50,580 --> 00:23:54,840
embedded mode

00:23:52,409 --> 00:23:58,309
if you're using embedded mode please

00:23:54,840 --> 00:24:01,470
don't use daemon mode it is much better

00:23:58,309 --> 00:24:04,259
now what is the difference when we run

00:24:01,470 --> 00:24:05,730
Apache Apache creates all these worker

00:24:04,259 --> 00:24:09,570
process they're the things that accepts

00:24:05,730 --> 00:24:11,490
the HTTP requests normally in embedded

00:24:09,570 --> 00:24:14,190
mode your Python web application is

00:24:11,490 --> 00:24:18,330
actually embedded in the same process

00:24:14,190 --> 00:24:20,220
the same work Pachi worker process that

00:24:18,330 --> 00:24:21,960
is useful soft some things but in

00:24:20,220 --> 00:24:23,759
general it's really hard to set up

00:24:21,960 --> 00:24:25,169
proper and that's where a lot of people

00:24:23,759 --> 00:24:27,179
have problems so you're better off using

00:24:25,169 --> 00:24:29,580
daemon mode and in what happens in

00:24:27,179 --> 00:24:30,570
daemon mode is that a separate process

00:24:29,580 --> 00:24:32,070
is created

00:24:30,570 --> 00:24:35,190
for running the whiskey application in

00:24:32,070 --> 00:24:37,080
or more than one and there's a little

00:24:35,190 --> 00:24:38,580
proxy in there so the only thing that is

00:24:37,080 --> 00:24:40,919
running inside of the Apache worker

00:24:38,580 --> 00:24:43,259
process is these little prosecutes now

00:24:40,919 --> 00:24:45,809
this is all handle for you so it's not

00:24:43,259 --> 00:24:48,059
like you have to manually run your

00:24:45,809 --> 00:24:50,519
whiskey application separately and then

00:24:48,059 --> 00:24:52,080
setup Apache to proxy mod whiskey

00:24:50,519 --> 00:24:53,909
handles all that running of the separate

00:24:52,080 --> 00:24:55,649
daemon process for you so if you restart

00:24:53,909 --> 00:25:00,779
Apache it'll also restart the separate

00:24:55,649 --> 00:25:03,059
process so if you're doing this manually

00:25:00,779 --> 00:25:05,250
yourself the key bit is this whiskey

00:25:03,059 --> 00:25:07,320
daemon process directive which you have

00:25:05,250 --> 00:25:09,299
an Apache so if you're using mod whiskey

00:25:07,320 --> 00:25:11,549
now and if you don't have with whiskey

00:25:09,299 --> 00:25:13,190
daemon process go find out about it

00:25:11,549 --> 00:25:16,080
because you're not using daemon mode

00:25:13,190 --> 00:25:18,870
here the other thing is that you want to

00:25:16,080 --> 00:25:21,059
turn off embedded mode so that it isn't

00:25:18,870 --> 00:25:23,039
used and that's what whiskey is strict

00:25:21,059 --> 00:25:24,419
embedded does so if you don't have that

00:25:23,039 --> 00:25:28,259
in your Apache config iver

00:25:24,419 --> 00:25:29,820
maybe research that one as well but

00:25:28,259 --> 00:25:31,350
otherwise we set up an application with

00:25:29,820 --> 00:25:32,700
whiskey script alias and we're going to

00:25:31,350 --> 00:25:38,129
tell it that I'm going to run that

00:25:32,700 --> 00:25:39,809
inside of that daemon process the daemon

00:25:38,129 --> 00:25:42,029
processing in the daemon mode it is

00:25:39,809 --> 00:25:44,129
existed since version 1.0

00:25:42,029 --> 00:25:47,490
of mod whiskey so it's always been there

00:25:44,129 --> 00:25:49,409
but it has been improved gradually as

00:25:47,490 --> 00:25:51,210
that when I went got developed over

00:25:49,409 --> 00:25:53,519
those 10 years now there are a lot of

00:25:51,210 --> 00:25:57,029
options on it but a lot of options

00:25:53,519 --> 00:25:58,200
aren't set with sane defaults and that

00:25:57,029 --> 00:26:00,090
is again because of the history I

00:25:58,200 --> 00:26:02,549
couldn't go back when I added these new

00:26:00,090 --> 00:26:03,899
features and set a value because I would

00:26:02,549 --> 00:26:05,940
have upset those people who had an

00:26:03,899 --> 00:26:09,330
existing configuration so if you're

00:26:05,940 --> 00:26:10,919
using daemon mode already if you are not

00:26:09,330 --> 00:26:13,259
using some of these especially these

00:26:10,919 --> 00:26:16,289
ones within the red boxes go back and

00:26:13,259 --> 00:26:18,509
have a look at it lang and loco you

00:26:16,289 --> 00:26:20,370
might have already hit this before some

00:26:18,509 --> 00:26:21,990
operating systems set the locale to be

00:26:20,370 --> 00:26:24,120
ASCII which causes lots of problems

00:26:21,990 --> 00:26:25,919
we've basically Python web applications

00:26:24,120 --> 00:26:27,570
so those options safe for setting laying

00:26:25,919 --> 00:26:29,820
locale but the other ones are more

00:26:27,570 --> 00:26:31,879
probably important startup timeout

00:26:29,820 --> 00:26:34,379
socket I'm a cute on and request timeout

00:26:31,879 --> 00:26:36,899
so startup time at this one is very

00:26:34,379 --> 00:26:38,879
important if you're using django django

00:26:36,899 --> 00:26:42,720
once upon a time if it failed when it

00:26:38,879 --> 00:26:44,200
first loaded it was fine if it was a

00:26:42,720 --> 00:26:46,299
transient problem

00:26:44,200 --> 00:26:47,920
the second time reloaded on the next

00:26:46,299 --> 00:26:49,780
request that worked fine it could be

00:26:47,920 --> 00:26:52,179
really out of twice Django changed that

00:26:49,780 --> 00:26:55,420
once it tries to attempt reloading once

00:26:52,179 --> 00:26:57,220
on a transit problem you can't try and

00:26:55,420 --> 00:26:59,140
attempt reload after that and you have

00:26:57,220 --> 00:27:01,809
to manually go in and restart Apache if

00:26:59,140 --> 00:27:03,610
you've seen that use this dial up

00:27:01,809 --> 00:27:05,260
timeout set that what will happen is we

00:27:03,610 --> 00:27:06,790
can't load that whiskey application

00:27:05,260 --> 00:27:08,559
within that time frame successfully

00:27:06,790 --> 00:27:10,390
it'll actually restart the processes

00:27:08,559 --> 00:27:12,520
again that wafers transient problem

00:27:10,390 --> 00:27:16,240
you'll keep going and hopefully the next

00:27:12,520 --> 00:27:20,429
time it'll it'll work socket time and a

00:27:16,240 --> 00:27:22,929
cue timeout especially cue timeout if

00:27:20,429 --> 00:27:24,580
you have requests come in and your

00:27:22,929 --> 00:27:27,640
application locks up on that request

00:27:24,580 --> 00:27:31,600
because of a deadlock or something and

00:27:27,640 --> 00:27:34,330
all your friends start to backup all

00:27:31,600 --> 00:27:35,650
your your or it takes it takes a

00:27:34,330 --> 00:27:38,410
long-running request and takes a long

00:27:35,650 --> 00:27:41,500
time all these requests start backing up

00:27:38,410 --> 00:27:43,660
and if it takes a long time for your

00:27:41,500 --> 00:27:47,200
application to recover then what can

00:27:43,660 --> 00:27:50,350
happen is that Apache gets backlogged

00:27:47,200 --> 00:27:51,820
and when your recovers finally you've

00:27:50,350 --> 00:27:53,650
got this huge number requests queued up

00:27:51,820 --> 00:27:55,330
the users have already gone away

00:27:53,650 --> 00:27:56,890
there's no point serving the request

00:27:55,330 --> 00:27:58,540
your queue time allows you to throw

00:27:56,890 --> 00:28:00,160
those requests out and recover from the

00:27:58,540 --> 00:28:02,799
backlog really quickly

00:28:00,160 --> 00:28:04,990
sohcahtoa is to avoid other things we've

00:28:02,799 --> 00:28:06,790
blocked blocking in connections because

00:28:04,990 --> 00:28:09,070
the default and patch is actually three

00:28:06,790 --> 00:28:12,130
minutes five minutes which is way too

00:28:09,070 --> 00:28:14,740
long so look for those options

00:28:12,130 --> 00:28:16,470
another one is request timeout if your

00:28:14,740 --> 00:28:19,330
request is taking too long

00:28:16,470 --> 00:28:22,510
it's meant to finish in in 20 seconds

00:28:19,330 --> 00:28:24,220
and it's taking two hours every time

00:28:22,510 --> 00:28:26,169
that happens it reduces the capacity of

00:28:24,220 --> 00:28:28,600
your server and you can't handle any

00:28:26,169 --> 00:28:30,790
more requests you can put a timeout on

00:28:28,600 --> 00:28:32,770
this and it will actually go and restart

00:28:30,790 --> 00:28:34,540
the process to kick out all the requests

00:28:32,770 --> 00:28:37,000
out so that you can get back to a fresh

00:28:34,540 --> 00:28:38,710
start and keep going and that's helping

00:28:37,000 --> 00:28:40,690
you to recover automatically when your

00:28:38,710 --> 00:28:44,020
applications blocks up for various

00:28:40,690 --> 00:28:46,330
reasons with all this there's all these

00:28:44,020 --> 00:28:48,429
options things like processes and Fred's

00:28:46,330 --> 00:28:51,220
and all these other ones very important

00:28:48,429 --> 00:28:52,600
to know how to set them up a lot of

00:28:51,220 --> 00:28:54,700
people ask me how do I set up my

00:28:52,600 --> 00:28:55,900
whiskey' server well I can't answer that

00:28:54,700 --> 00:28:57,440
question because I don't know how your

00:28:55,900 --> 00:29:00,169
application works I don't

00:28:57,440 --> 00:29:03,200
out behaves that's where monitoring is

00:29:00,169 --> 00:29:05,389
very very important there are things out

00:29:03,200 --> 00:29:07,759
there application performance monitoring

00:29:05,389 --> 00:29:09,139
products such as New Relic which you can

00:29:07,759 --> 00:29:12,019
blame me for because I actually wrote

00:29:09,139 --> 00:29:15,200
the hyphenation for that and also now

00:29:12,019 --> 00:29:17,210
more recently data dog has application

00:29:15,200 --> 00:29:19,129
form its monitoring they to a degree

00:29:17,210 --> 00:29:23,000
allow you to see what's happening inside

00:29:19,129 --> 00:29:26,269
of your web app and can be used to help

00:29:23,000 --> 00:29:28,820
make your application perform better but

00:29:26,269 --> 00:29:32,659
they don't capture some metrics which

00:29:28,820 --> 00:29:36,169
are very useful for tuning your actual

00:29:32,659 --> 00:29:38,570
web server Apache in this case in mod

00:29:36,169 --> 00:29:40,730
whiskey there is this ability to get out

00:29:38,570 --> 00:29:42,139
metric information this is an event

00:29:40,730 --> 00:29:43,940
mechanism there where you can actually

00:29:42,139 --> 00:29:46,370
be notified when requests start when

00:29:43,940 --> 00:29:48,049
they finish when exceptions occurred you

00:29:46,370 --> 00:29:51,580
can actually pull that information out

00:29:48,049 --> 00:29:54,340
and send it into some sort of metrics

00:29:51,580 --> 00:29:56,570
aggregation systems such as data dog

00:29:54,340 --> 00:29:58,220
some of the important ones as far as

00:29:56,570 --> 00:29:59,899
treating the the web server is how much

00:29:58,220 --> 00:30:02,240
of the capacity of that server is being

00:29:59,899 --> 00:30:04,730
used now things like New Relic and data

00:30:02,240 --> 00:30:06,620
dog APM don't have those things I

00:30:04,730 --> 00:30:08,570
provide them I just don't provide a

00:30:06,620 --> 00:30:10,250
back-end so if you're really interested

00:30:08,570 --> 00:30:11,269
in it being able to tune the Whiskey

00:30:10,250 --> 00:30:13,399
server you might be interested in

00:30:11,269 --> 00:30:15,259
looking at this capability or for

00:30:13,399 --> 00:30:18,289
tracking the events of when things occur

00:30:15,259 --> 00:30:21,440
in in aside of Apache so I can use that

00:30:18,289 --> 00:30:22,610
to pull out my data request very

00:30:21,440 --> 00:30:25,129
important response time in this case

00:30:22,610 --> 00:30:26,419
happens to be using DotA dog but there's

00:30:25,129 --> 00:30:28,879
other interesting things you can do

00:30:26,419 --> 00:30:31,399
because it's an event model and I can

00:30:28,879 --> 00:30:34,009
actually track every request then I can

00:30:31,399 --> 00:30:36,350
do fancy things like this so this is a

00:30:34,009 --> 00:30:39,019
bouquet application that is actually

00:30:36,350 --> 00:30:40,940
showing live traffic and this can be

00:30:39,019 --> 00:30:43,100
really useful in helping you to sort of

00:30:40,940 --> 00:30:46,730
get a concept of what's happening in

00:30:43,100 --> 00:30:49,039
there and how your requests coming in

00:30:46,730 --> 00:30:50,750
relative to each other and like that

00:30:49,039 --> 00:30:54,860
green line for example is showing

00:30:50,750 --> 00:30:56,750
requests while they're being handled if

00:30:54,860 --> 00:30:58,639
one of those requests went on and

00:30:56,750 --> 00:31:00,500
started running for ten minutes and

00:30:58,639 --> 00:31:02,059
blocked up then note that that green

00:31:00,500 --> 00:31:03,590
line would go forever and obviously

00:31:02,059 --> 00:31:06,619
while that happens I've got less

00:31:03,590 --> 00:31:08,179
capacity to handle other requests so

00:31:06,619 --> 00:31:09,950
that bottom line is then actually the

00:31:08,179 --> 00:31:10,780
capacity so you see how it jumps up and

00:31:09,950 --> 00:31:12,550
down

00:31:10,780 --> 00:31:15,730
so the event thing is cute for for doing

00:31:12,550 --> 00:31:17,110
that and so hopefully is that something

00:31:15,730 --> 00:31:19,540
of interest

00:31:17,110 --> 00:31:22,090
forest fires resources there is various

00:31:19,540 --> 00:31:24,160
mud whiskey documentation the pipe a

00:31:22,090 --> 00:31:25,690
site has information on mod whiskey

00:31:24,160 --> 00:31:28,630
expressed because the other Doc's aren't

00:31:25,690 --> 00:31:29,620
really up to Tait warp-drive project and

00:31:28,630 --> 00:31:30,750
source to in which might be of interest

00:31:29,620 --> 00:31:35,010
as well

00:31:30,750 --> 00:31:37,780
now a few summary things I'd like to say

00:31:35,010 --> 00:31:40,210
I get a lot of questions people trying

00:31:37,780 --> 00:31:42,400
to use my whiskey on Windows please I'd

00:31:40,210 --> 00:31:44,770
rather you didn't okay if you do it's

00:31:42,400 --> 00:31:46,690
just at least use docker on Windows ok

00:31:44,770 --> 00:31:52,240
there are shortcomings of using Apache

00:31:46,690 --> 00:31:53,830
on Windows please don't use packages

00:31:52,240 --> 00:31:55,960
that provided by your linux distro i

00:31:53,830 --> 00:31:58,750
know your sister admins or in your

00:31:55,960 --> 00:32:00,310
devops via whatever in your work may say

00:31:58,750 --> 00:32:01,660
no no you have to use the package system

00:32:00,310 --> 00:32:03,640
it's a pain in the neck they are

00:32:01,660 --> 00:32:07,210
generally a very old and out of date use

00:32:03,640 --> 00:32:08,320
p p-- install method if you can and

00:32:07,210 --> 00:32:10,270
friends tell their friends other user

00:32:08,320 --> 00:32:12,220
use other whiskey service right you're

00:32:10,270 --> 00:32:14,200
all using mud whiskey and you all tell

00:32:12,220 --> 00:32:16,780
people not to use unicorn and the others

00:32:14,200 --> 00:32:18,070
right because mud whiskey is definitely

00:32:16,780 --> 00:32:20,260
not dead i've been doing a lot of work

00:32:18,070 --> 00:32:23,410
on it it's just not very public

00:32:20,260 --> 00:32:24,640
knowledge at the moment and finally part

00:32:23,410 --> 00:32:26,140
of the reason I feel I'd like to see

00:32:24,640 --> 00:32:28,090
people use mod whiskeys I have done a

00:32:26,140 --> 00:32:30,100
lot of work of making it using easier to

00:32:28,090 --> 00:32:33,130
use now especially if you want to run

00:32:30,100 --> 00:32:36,010
omit containers okay so have a look at

00:32:33,130 --> 00:32:39,610
it please don't dismiss it as I often

00:32:36,010 --> 00:32:41,230
have people do so that's it

00:32:39,610 --> 00:32:42,970
and hopefully you understand the joke

00:32:41,230 --> 00:32:46,540
most people don't seem to when I would

00:32:42,970 --> 00:32:49,510
do it so that'll be all I'll take

00:32:46,540 --> 00:32:50,310
questions to the side and that's it so

00:32:49,510 --> 00:32:56,420
thank you

00:32:50,310 --> 00:32:56,420

YouTube URL: https://www.youtube.com/watch?v=CPz0s1CQsTE


