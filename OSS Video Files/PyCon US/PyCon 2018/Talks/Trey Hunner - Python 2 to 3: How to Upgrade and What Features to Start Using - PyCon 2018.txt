Title: Trey Hunner - Python 2 to 3: How to Upgrade and What Features to Start Using - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Trey Hunner

The end of life for Python 2 is 2020. Python 3 is the future and you'll need to consider both your upgrade plan and what steps you'll take after upgrading to start leveraging Python 3 features.

During this talk we'll briefly discuss how to start **the process of upgrading your code to Python 3**. We'll then dive into some of **the most useful Python 3 features** that you'll be able to start embracing once you drop Python 2 support.

A number of the most powerful Python 3 features are syntactic features that are **Python 3 only**. You won't get any experience using these features until you fully upgrade. These features are an incentive to drop Python 2 support in existing 2 and 3 compatible code. You can consider this talk as a teaser of Python 3 features that you may have never used.

After this talk I hope you'll be inspired to fully upgrade your code to Python 3.

Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:03,410 --> 00:00:08,610
okay we're gonna get started I'd like to

00:00:06,120 --> 00:00:10,080
introduce Trey hunter he's a Python

00:00:08,610 --> 00:00:11,760
trainer and he's got a great talk for us

00:00:10,080 --> 00:00:15,890
today let's give him a round of applause

00:00:11,760 --> 00:00:15,890
[Applause]

00:00:17,600 --> 00:00:26,060
all right so it is actually hard to see

00:00:22,830 --> 00:00:26,060
you cuz these lights are really bright

00:00:29,090 --> 00:00:32,790
can't hear me

00:00:30,720 --> 00:00:34,079
oh there can you hear me now alright

00:00:32,790 --> 00:00:34,559
who's already using Python three let's

00:00:34,079 --> 00:00:39,600
do that again

00:00:34,559 --> 00:00:42,059
okay so who is excited to upgrade to

00:00:39,600 --> 00:00:45,260
Python three you're not yet using it all

00:00:42,059 --> 00:00:48,390
right who is upgrading begrudgingly

00:00:45,260 --> 00:00:50,039
that's a few people so a lot of you here

00:00:48,390 --> 00:00:51,600
already is in Python three I assume you

00:00:50,039 --> 00:00:52,920
here for what features to start using

00:00:51,600 --> 00:00:54,420
there's gonna be a little bit less of

00:00:52,920 --> 00:00:58,219
that in this talk a little bit more how

00:00:54,420 --> 00:01:01,620
to upgrade so my goal is to give you a

00:00:58,219 --> 00:01:04,290
taste for what using Python 3 is like

00:01:01,620 --> 00:01:05,640
and what it's like to upgrade while also

00:01:04,290 --> 00:01:07,260
nudging you in the direction of

00:01:05,640 --> 00:01:09,540
embracing some of the new features that

00:01:07,260 --> 00:01:12,630
Python 3 includes I'm going to gloss

00:01:09,540 --> 00:01:14,400
over a lot of things so I do not expect

00:01:12,630 --> 00:01:17,520
you to keep up with this talk it's going

00:01:14,400 --> 00:01:19,290
to be a little bit quick at parts this

00:01:17,520 --> 00:01:21,570
is the start of your research this is

00:01:19,290 --> 00:01:22,920
not the end do not come out of this

00:01:21,570 --> 00:01:23,939
topic expecting that you're going to

00:01:22,920 --> 00:01:27,090
know what you're doing when you're

00:01:23,939 --> 00:01:28,560
actually doing this upgrade process so

00:01:27,090 --> 00:01:30,450
my name is Trey I help Python and Django

00:01:28,560 --> 00:01:32,460
teams on board new teammates and turned

00:01:30,450 --> 00:01:34,770
their front-end developers into full

00:01:32,460 --> 00:01:37,650
stack Jenga developers I also host a

00:01:34,770 --> 00:01:40,950
live webcast every week on Python

00:01:37,650 --> 00:01:44,130
related topics usually Saturdays at 12

00:01:40,950 --> 00:01:46,740
p.m. Pacific time or eastern time

00:01:44,130 --> 00:01:48,720
actually and I run a Python exercise

00:01:46,740 --> 00:01:51,810
subscription service called Python

00:01:48,720 --> 00:01:54,270
morsels where I send out an exercise

00:01:51,810 --> 00:01:56,909
every week that is from my trainings

00:01:54,270 --> 00:01:58,590
that I do I'm a meet-up organizer in San

00:01:56,909 --> 00:02:00,630
Diego California I've hosted some Django

00:01:58,590 --> 00:02:02,460
Grylls workshops co-hosted some Django

00:02:00,630 --> 00:02:05,340
Ghost workshops around the Southern

00:02:02,460 --> 00:02:06,840
California area and I'm currently one of

00:02:05,340 --> 00:02:08,940
the directors at the Python Software

00:02:06,840 --> 00:02:13,760
Foundation so that's a little bit about

00:02:08,940 --> 00:02:17,390
me let's talk about Python Python too

00:02:13,760 --> 00:02:20,510
hasn't had many new features in a very

00:02:17,390 --> 00:02:22,310
long time Python 2 is still a great

00:02:20,510 --> 00:02:26,360
programming language but there are a lot

00:02:22,310 --> 00:02:29,299
of reasons to upgrade from Python 2 to

00:02:26,360 --> 00:02:33,079
Python 3 if you don't think you have a

00:02:29,299 --> 00:02:36,079
reason to upgrade you can probably find

00:02:33,079 --> 00:02:39,560
one you'll probably find one soon

00:02:36,079 --> 00:02:41,359
whether you like it or not in this talk

00:02:39,560 --> 00:02:43,939
we are not going to focus on the

00:02:41,359 --> 00:02:45,980
necessary reasons to upgrade you will

00:02:43,939 --> 00:02:47,780
eventually find those on your own we are

00:02:45,980 --> 00:02:50,120
going to focus on the exciting reasons

00:02:47,780 --> 00:02:52,849
to upgrade so let's take a look at what

00:02:50,120 --> 00:02:59,000
you've been missing out on so far by not

00:02:52,849 --> 00:03:01,129
using Python 3 so python 3 has lots of

00:02:59,000 --> 00:03:05,299
new syntax most of which you can't opt

00:03:01,129 --> 00:03:07,609
into in Python 2 in Python 3 you can use

00:03:05,299 --> 00:03:08,930
underscores in numeric literals to make

00:03:07,609 --> 00:03:11,450
them easier to read so here it's a it's

00:03:08,930 --> 00:03:15,859
pretty obvious we're referring to 1

00:03:11,450 --> 00:03:18,680
million and 10 million Python 3 also

00:03:15,859 --> 00:03:22,010
includes a lot more generalizations for

00:03:18,680 --> 00:03:25,090
the star and star star operators so for

00:03:22,010 --> 00:03:27,079
example you can use star in multiple

00:03:25,090 --> 00:03:29,810
assignment this isn't something you

00:03:27,079 --> 00:03:31,940
could do in Python 2 or even when you're

00:03:29,810 --> 00:03:36,109
constructing a new list you can use that

00:03:31,940 --> 00:03:38,599
star operator also Python 2's print

00:03:36,109 --> 00:03:42,230
statement turned into a print function

00:03:38,599 --> 00:03:44,030
in Python 3 this print function might

00:03:42,230 --> 00:03:46,280
seem annoying but it is a lot more

00:03:44,030 --> 00:03:49,459
powerful and a lot more flexible than

00:03:46,280 --> 00:03:51,680
the old print statement ever was Python

00:03:49,459 --> 00:03:54,889
3 also has a new string formatting

00:03:51,680 --> 00:03:56,599
syntax called F strings that are a

00:03:54,889 --> 00:03:58,400
pretty big leap over the old style

00:03:56,599 --> 00:04:01,040
string formatting syntaxes that existed

00:03:58,400 --> 00:04:04,069
in python 2 and in general there's just

00:04:01,040 --> 00:04:05,930
lots of other little bits of python 3

00:04:04,069 --> 00:04:08,659
that are more sensible than python 2 was

00:04:05,930 --> 00:04:15,229
so for example when you divide 5 by 2

00:04:08,659 --> 00:04:17,180
you get 2.5 just like in real life let's

00:04:15,229 --> 00:04:19,729
take a look at a larger chunk of Python

00:04:17,180 --> 00:04:22,099
2 code and compare it to Python 3 so

00:04:19,729 --> 00:04:23,360
this is a class this is in Python 2 here

00:04:22,099 --> 00:04:24,740
it has a latitude and it had two

00:04:23,360 --> 00:04:27,030
longitude latitude and longitude

00:04:24,740 --> 00:04:29,310
attributes here

00:04:27,030 --> 00:04:30,600
it has a fairly nice string

00:04:29,310 --> 00:04:32,460
representation due to that dunder

00:04:30,600 --> 00:04:36,900
wrapper method we have there and it can

00:04:32,460 --> 00:04:40,560
even be compared to similar objects to

00:04:36,900 --> 00:04:43,800
other objects of the same type in Python

00:04:40,560 --> 00:04:46,470
3 this class can be even simpler though

00:04:43,800 --> 00:04:50,280
so that dunder any method isn't actually

00:04:46,470 --> 00:04:52,380
necessary in Python 3 because in Python

00:04:50,280 --> 00:04:56,190
3 inequality is implemented as the

00:04:52,380 --> 00:04:58,650
opposite of equality by default another

00:04:56,190 --> 00:05:01,230
thing that we could improve in Python 3

00:04:58,650 --> 00:05:04,890
is that the dunder reprimanded here

00:05:01,230 --> 00:05:06,930
could use an F string this is a lot more

00:05:04,890 --> 00:05:12,150
succinct and in my opinion a lot more

00:05:06,930 --> 00:05:15,540
readable in Python 3.7 this is going to

00:05:12,150 --> 00:05:18,060
get even easier though in Python 3 3.7

00:05:15,540 --> 00:05:21,750
you can use data classes to do all of

00:05:18,060 --> 00:05:23,430
this for you data classes implement same

00:05:21,750 --> 00:05:25,350
defaults for the initializer for the

00:05:23,430 --> 00:05:27,479
string representation and for comparison

00:05:25,350 --> 00:05:29,660
operators so all those methods that we

00:05:27,479 --> 00:05:33,450
defined previously are created for us

00:05:29,660 --> 00:05:39,090
automatically ok let's take a look at

00:05:33,450 --> 00:05:41,130
one more example here python 3 has lots

00:05:39,090 --> 00:05:44,940
of things that were either missing or

00:05:41,130 --> 00:05:48,330
not very usable in python 2 for example

00:05:44,940 --> 00:05:50,940
the collections module has a class in it

00:05:48,330 --> 00:05:55,380
for making your own custom dictionary

00:05:50,940 --> 00:05:58,410
like thing this existed in python 2 but

00:05:55,380 --> 00:06:00,000
due to some very unfortunate design

00:05:58,410 --> 00:06:02,039
decisions that were made for historical

00:06:00,000 --> 00:06:04,430
reasons you couldn't really use it in

00:06:02,039 --> 00:06:06,660
python 3 this is a very useable class

00:06:04,430 --> 00:06:08,970
there's also helper functions in Python

00:06:06,660 --> 00:06:11,310
3 that again existed in Python 2 they

00:06:08,970 --> 00:06:13,440
were back ported here in this case but

00:06:11,310 --> 00:06:17,250
there was a bug in the Python 2 version

00:06:13,440 --> 00:06:20,220
that made it not so useful so writing a

00:06:17,250 --> 00:06:26,490
class like this is a lot less painful in

00:06:20,220 --> 00:06:28,140
Python 3 python 3 also has lots of

00:06:26,490 --> 00:06:29,880
things that make everyday coding easier

00:06:28,140 --> 00:06:30,960
so for example you might notice here

00:06:29,880 --> 00:06:34,950
something that's fairly different from

00:06:30,960 --> 00:06:36,960
python 2 the super function doesn't need

00:06:34,950 --> 00:06:38,880
any arguments so no more having to

00:06:36,960 --> 00:06:40,520
remember is itself that goes first years

00:06:38,880 --> 00:06:43,099
at the class that goes first

00:06:40,520 --> 00:06:46,400
works in Python 3 thank you for the

00:06:43,099 --> 00:06:48,710
applause I really like this feature in

00:06:46,400 --> 00:06:51,919
general I think that you'll find that if

00:06:48,710 --> 00:06:57,259
you like Python 2 you'll probably love

00:06:51,919 --> 00:06:59,509
Python 3 it's pretty much the same thing

00:06:57,259 --> 00:07:02,210
as Python 2 but with even more of the

00:06:59,509 --> 00:07:05,300
good stuff Python 3 is more consistent

00:07:02,210 --> 00:07:09,440
and it feels more natural than Python 2

00:07:05,300 --> 00:07:11,479
ever did Python 3 and honestly it feels

00:07:09,440 --> 00:07:13,789
like what Python 2 should have been all

00:07:11,479 --> 00:07:15,409
along if they could go back in time and

00:07:13,789 --> 00:07:19,190
make Python again that's what you'd end

00:07:15,409 --> 00:07:20,930
up with is Python 3 so we need to talk

00:07:19,190 --> 00:07:23,150
about at this point how to actually

00:07:20,930 --> 00:07:24,680
upgrade so the rest of this talk is not

00:07:23,150 --> 00:07:26,120
going to be on these new cool Python 3

00:07:24,680 --> 00:07:29,740
features it's going to be on how do you

00:07:26,120 --> 00:07:32,120
upgrade to get these Python 3 features

00:07:29,740 --> 00:07:33,530
when upgrading we're going to need to

00:07:32,120 --> 00:07:35,449
choose between a few different

00:07:33,530 --> 00:07:38,780
approaches and this is going to depend

00:07:35,449 --> 00:07:40,849
on your situation in your code the

00:07:38,780 --> 00:07:42,710
gradual approach to upgrading is to add

00:07:40,849 --> 00:07:45,050
support for Python 3 and then eventually

00:07:42,710 --> 00:07:48,469
dropped python 2 support at some point

00:07:45,050 --> 00:07:49,969
in the future this means writing code in

00:07:48,469 --> 00:07:54,099
such a way that it can run in both

00:07:49,969 --> 00:07:56,990
python 2 and python 3 at the same time

00:07:54,099 --> 00:07:58,849
the sudden approach to upgrading

00:07:56,990 --> 00:08:01,729
involves operating the entire code base

00:07:58,849 --> 00:08:03,409
to python 3 at once without worrying

00:08:01,729 --> 00:08:06,409
about supporting python 2 at the same

00:08:03,409 --> 00:08:10,580
time this requires dropping support for

00:08:06,409 --> 00:08:11,990
python 2 during the upgrade process the

00:08:10,580 --> 00:08:13,340
extreme approach to upgrading isn't

00:08:11,990 --> 00:08:16,190
really upgrading its rewriting your

00:08:13,340 --> 00:08:18,199
entire code base in python 3 if you have

00:08:16,190 --> 00:08:20,840
a very small code base this isn't

00:08:18,199 --> 00:08:22,400
necessarily the worst idea if you don't

00:08:20,840 --> 00:08:23,690
have a very small code base you probably

00:08:22,400 --> 00:08:24,229
don't want to do this this is probably a

00:08:23,690 --> 00:08:25,789
bad idea

00:08:24,229 --> 00:08:29,750
we are not going to talk about this

00:08:25,789 --> 00:08:31,460
approach at all in this talk if you

00:08:29,750 --> 00:08:31,940
migrate all of your code to python 3 at

00:08:31,460 --> 00:08:33,469
once

00:08:31,940 --> 00:08:37,250
you could put your development cycle on

00:08:33,469 --> 00:08:40,550
pause for a really long time that's fine

00:08:37,250 --> 00:08:42,320
if you can stop shipping new code for a

00:08:40,550 --> 00:08:45,170
few weeks a few months a few days

00:08:42,320 --> 00:08:47,480
however long that process takes you if

00:08:45,170 --> 00:08:49,430
your code base doesn't change any more

00:08:47,480 --> 00:08:53,510
sudden migrations are actually a pretty

00:08:49,430 --> 00:08:54,410
great approach but if you do need to

00:08:53,510 --> 00:08:56,629
keep shipping code

00:08:54,410 --> 00:08:59,240
I'd recommend a gradual migration and

00:08:56,629 --> 00:09:01,699
approach instead migrating gradually

00:08:59,240 --> 00:09:04,639
allows you to slowly migrate pieces of

00:09:01,699 --> 00:09:07,220
your code over time without losing a big

00:09:04,639 --> 00:09:08,959
chunk of chunk of time all at once so

00:09:07,220 --> 00:09:11,180
I'm going to focus in this talk on

00:09:08,959 --> 00:09:13,339
migrating your code gradually so that

00:09:11,180 --> 00:09:14,990
you can keep shipping code during this

00:09:13,339 --> 00:09:16,310
migration process you don't have to put

00:09:14,990 --> 00:09:18,470
everything on pause just for the

00:09:16,310 --> 00:09:21,439
migration so we will keep shipping code

00:09:18,470 --> 00:09:25,959
and then later drop Python to support

00:09:21,439 --> 00:09:28,310
after we have added Python three support

00:09:25,959 --> 00:09:29,810
so we'll talk about sub migrations a

00:09:28,310 --> 00:09:31,639
little bit at the very end gradual

00:09:29,810 --> 00:09:34,250
migrations are the meat of this talk

00:09:31,639 --> 00:09:36,790
though a quick high-level overview of

00:09:34,250 --> 00:09:39,439
the strategy that we're going to use for

00:09:36,790 --> 00:09:42,529
gradually migrant error code to Python 2

00:09:39,439 --> 00:09:44,540
to Python 3 a warning there are lots of

00:09:42,529 --> 00:09:45,800
steps here so you're going to get a

00:09:44,540 --> 00:09:48,410
little bit overwhelmed you can look at

00:09:45,800 --> 00:09:50,779
this slide again later the first step

00:09:48,410 --> 00:09:53,449
here is going to be the hardest by far

00:09:50,779 --> 00:09:56,000
for those of you who haven't done it you

00:09:53,449 --> 00:09:59,120
have to have a thorough and repeatable

00:09:56,000 --> 00:10:03,889
testing process whether it is automated

00:09:59,120 --> 00:10:05,630
or whether it is manual who doesn't have

00:10:03,889 --> 00:10:07,670
a great testing process actually I'm

00:10:05,630 --> 00:10:10,759
gonna ask this a different way who has a

00:10:07,670 --> 00:10:15,050
colleague that doesn't have a great

00:10:10,759 --> 00:10:16,459
testing process okay so for those of you

00:10:15,050 --> 00:10:18,470
who raised your hands you're gonna have

00:10:16,459 --> 00:10:20,089
some trouble because this step is gonna

00:10:18,470 --> 00:10:22,699
be a very hard one for those of you who

00:10:20,089 --> 00:10:24,649
didn't raise your hand the big and scary

00:10:22,699 --> 00:10:26,000
part of this which all of you're going

00:10:24,649 --> 00:10:28,220
to have to experience is coming next

00:10:26,000 --> 00:10:31,189
this is where we actually migrate our

00:10:28,220 --> 00:10:32,720
code from Python 2 to Python 3 and

00:10:31,189 --> 00:10:34,310
there's a lot of steps involved here I'm

00:10:32,720 --> 00:10:36,230
not going to dive into these you can

00:10:34,310 --> 00:10:38,509
find these and a lot of different guides

00:10:36,230 --> 00:10:40,880
on the internet so this is where we

00:10:38,509 --> 00:10:43,220
gradually add Python 3 support to our

00:10:40,880 --> 00:10:46,189
code while we make sure that our code

00:10:43,220 --> 00:10:49,579
still functions in Python 2 during this

00:10:46,189 --> 00:10:51,829
process after that point we can then

00:10:49,579 --> 00:10:53,509
make sure that once our code works on

00:10:51,829 --> 00:10:55,009
python 3 we can start running it in

00:10:53,509 --> 00:10:58,220
production we'll start running our

00:10:55,009 --> 00:11:00,050
python 3 code in production eventually

00:10:58,220 --> 00:11:02,000
after we're running Python 3 in

00:11:00,050 --> 00:11:04,309
production everything seems good we will

00:11:02,000 --> 00:11:07,490
clean up our code base because will drop

00:11:04,309 --> 00:11:07,820
Python 2 support we no longer need quite

00:11:07,490 --> 00:11:09,740
a bit of

00:11:07,820 --> 00:11:11,810
Pat ability code that's going to look

00:11:09,740 --> 00:11:13,700
ugly you'll see that in a moment

00:11:11,810 --> 00:11:15,800
that will make our code work in both

00:11:13,700 --> 00:11:17,990
because our code only needs to work in

00:11:15,800 --> 00:11:19,250
Python 3 from here forwards if you're

00:11:17,990 --> 00:11:20,930
working on a project that needs to

00:11:19,250 --> 00:11:23,270
support two and three at the same time

00:11:20,930 --> 00:11:24,800
I'm sorry there's no way around having

00:11:23,270 --> 00:11:27,860
ugly code you are going to end up with

00:11:24,800 --> 00:11:30,110
ugly code okay so the parts of the

00:11:27,860 --> 00:11:32,570
process here that are the scariest that

00:11:30,110 --> 00:11:36,470
require the bulk of the work are these

00:11:32,570 --> 00:11:40,370
three these three steps are painful and

00:11:36,470 --> 00:11:42,440
scary mostly because they involve a lot

00:11:40,370 --> 00:11:43,790
of things that are uncertain I cannot

00:11:42,440 --> 00:11:45,260
tell you how to do these steps I can

00:11:43,790 --> 00:11:47,470
give you some guiding principles which

00:11:45,260 --> 00:11:49,610
is what the rest of this talk is about

00:11:47,470 --> 00:11:52,460
mostly these involve taking code that

00:11:49,610 --> 00:11:56,990
looks like this and refactoring it to

00:11:52,460 --> 00:12:00,200
code that looks like this this top code

00:11:56,990 --> 00:12:04,340
only works in Python 2 but it's pretty

00:12:00,200 --> 00:12:07,760
and it's elegant the bottom code works

00:12:04,340 --> 00:12:11,590
in Python 2 and it works in Python 3 but

00:12:07,760 --> 00:12:11,590
it is not elegant and it's not pretty

00:12:13,180 --> 00:12:17,750
so migrating from Python 2 to 3 can

00:12:16,130 --> 00:12:20,060
require jumping through a lot of Hoops

00:12:17,750 --> 00:12:25,250
but there are tools that can help us

00:12:20,060 --> 00:12:27,130
with this process the tools to help us

00:12:25,250 --> 00:12:29,540
migrate are split into two categories

00:12:27,130 --> 00:12:32,300
compatibility libraries and automated

00:12:29,540 --> 00:12:35,300
code conversion tools the compatibility

00:12:32,300 --> 00:12:36,860
libraries are six and future the

00:12:35,300 --> 00:12:37,760
automated code conversion tools are

00:12:36,860 --> 00:12:40,760
modernized

00:12:37,760 --> 00:12:43,070
and future eyes I'm gonna compare these

00:12:40,760 --> 00:12:44,660
tools very briefly but the ones that I

00:12:43,070 --> 00:12:49,900
personally recommend using and the ones

00:12:44,660 --> 00:12:49,900
I'll focus on our future and future eyes

00:12:50,620 --> 00:12:54,830
so let's talk about why we should use

00:12:53,360 --> 00:12:58,040
compatibility libraries during this

00:12:54,830 --> 00:12:59,570
process if you do not use a

00:12:58,040 --> 00:13:02,140
compatibility library you're going to

00:12:59,570 --> 00:13:04,730
write a lot of code that looks like this

00:13:02,140 --> 00:13:06,710
getting code working in both Python 2

00:13:04,730 --> 00:13:08,600
and python 3 involves writing a lot of

00:13:06,710 --> 00:13:11,540
if statements and a lot of exception

00:13:08,600 --> 00:13:13,040
handling with the six library you can

00:13:11,540 --> 00:13:16,520
write import statements that instead

00:13:13,040 --> 00:13:18,710
look like this or we can do a very

00:13:16,520 --> 00:13:20,570
similar import statement with the future

00:13:18,710 --> 00:13:21,690
library both of these compatibility

00:13:20,570 --> 00:13:24,960
libraries can be used in pre

00:13:21,690 --> 00:13:26,670
much the same way here what these

00:13:24,960 --> 00:13:28,680
compatibility libraries do is they allow

00:13:26,670 --> 00:13:30,150
us to take the ugly version of our code

00:13:28,680 --> 00:13:32,490
and write it in this simple way and they

00:13:30,150 --> 00:13:34,020
handle that version checking that ugly

00:13:32,490 --> 00:13:37,290
version checking for us under the hood

00:13:34,020 --> 00:13:39,120
the reason I recommend future is not

00:13:37,290 --> 00:13:40,470
because it works the same way as six but

00:13:39,120 --> 00:13:42,060
because it actually has a little bit

00:13:40,470 --> 00:13:45,000
more than six you can take it a step

00:13:42,060 --> 00:13:46,770
further and you can monkey patch the

00:13:45,000 --> 00:13:49,470
Python to standard library to work

00:13:46,770 --> 00:13:52,560
pretty much the same way as the Python 3

00:13:49,470 --> 00:13:55,520
standard library this allows you to

00:13:52,560 --> 00:13:59,090
start using the Python 3 version of the

00:13:55,520 --> 00:14:02,640
URL Lib module while we're still in

00:13:59,090 --> 00:14:05,010
Python tool and this is really cool

00:14:02,640 --> 00:14:07,290
because this means that when we

00:14:05,010 --> 00:14:08,970
eventually drop Python to support we can

00:14:07,290 --> 00:14:10,650
just delete those first couple lines of

00:14:08,970 --> 00:14:15,510
code and our code continues to work in

00:14:10,650 --> 00:14:17,130
Python 3 so I recommend using the Future

00:14:15,510 --> 00:14:20,340
library because it encourages you to

00:14:17,130 --> 00:14:22,170
embrace Python 3 idioms during this

00:14:20,340 --> 00:14:23,790
migration process and that's going to

00:14:22,170 --> 00:14:26,790
make cleaning up your code after the

00:14:23,790 --> 00:14:29,610
fact a lot easier because our ultimate

00:14:26,790 --> 00:14:34,950
goal remember is to embrace Python 3 we

00:14:29,610 --> 00:14:37,260
are switching to Python 3 refactor your

00:14:34,950 --> 00:14:39,120
code to work in both python 2 and python

00:14:37,260 --> 00:14:42,690
3 can be tedious and it can be

00:14:39,120 --> 00:14:47,180
time-consuming but there are tools out

00:14:42,690 --> 00:14:49,800
there that can refactor our code for us

00:14:47,180 --> 00:14:52,620
one of these tools is called

00:14:49,800 --> 00:14:54,870
modernize and it relies on the six

00:14:52,620 --> 00:14:56,940
library that I just mentioned the other

00:14:54,870 --> 00:15:01,170
tool is called few tries and it relies

00:14:56,940 --> 00:15:02,880
on future that I just mentioned in fact

00:15:01,170 --> 00:15:04,589
few tries is actually just a

00:15:02,880 --> 00:15:06,900
command-line tool that comes bundled

00:15:04,589 --> 00:15:09,690
with future when you pip install future

00:15:06,900 --> 00:15:11,730
you get both of them there's another

00:15:09,690 --> 00:15:13,230
automated code conversion tool it's

00:15:11,730 --> 00:15:15,180
called 2 to 3 and it's actually built

00:15:13,230 --> 00:15:18,089
right into Python both Python 2 and

00:15:15,180 --> 00:15:20,070
python 3 2 to 3 tries to upgrade your

00:15:18,089 --> 00:15:22,350
code to Python 3 while dropping support

00:15:20,070 --> 00:15:23,910
for Python 2 all at once which means

00:15:22,350 --> 00:15:25,350
that we can't use it for gradual

00:15:23,910 --> 00:15:27,150
migrations which is what we're talking

00:15:25,350 --> 00:15:29,190
about right now if we're trying to

00:15:27,150 --> 00:15:31,860
gradually migrate our code to 2 to 3 and

00:15:29,190 --> 00:15:35,630
keep shipping it we can't use that 2 to

00:15:31,860 --> 00:15:38,060
3 tool so I focused on the future live

00:15:35,630 --> 00:15:40,580
before likewise I'm going to focus on

00:15:38,060 --> 00:15:46,760
the future eyes conversion tool right

00:15:40,580 --> 00:15:48,890
now this is Python to code this code

00:15:46,760 --> 00:15:51,950
will not work in Python 3 at least it

00:15:48,890 --> 00:15:54,200
won't work in Python 3 yet dunder

00:15:51,950 --> 00:15:55,730
nonzero double underscore non zero

00:15:54,200 --> 00:15:59,780
double underscore that dunder nonzero

00:15:55,730 --> 00:16:02,510
method was renamed in Python 3 to dunder

00:15:59,780 --> 00:16:03,980
pool range objects work differently in

00:16:02,510 --> 00:16:06,650
Python 3 although that doesn't really

00:16:03,980 --> 00:16:08,630
matter in this case and also Python 3

00:16:06,650 --> 00:16:12,440
doesn't have a print statement it has a

00:16:08,630 --> 00:16:16,840
print function if we run this code

00:16:12,440 --> 00:16:20,270
through future eyes it will make this

00:16:16,840 --> 00:16:23,030
future eyes renamed dunder nonzero to

00:16:20,270 --> 00:16:26,030
dunder ghoul which actually still works

00:16:23,030 --> 00:16:28,790
in Python 2 because we're using this

00:16:26,030 --> 00:16:31,040
fancy built-ins dot object class that

00:16:28,790 --> 00:16:34,280
includes compatibility code to make

00:16:31,040 --> 00:16:37,340
dunder bool work even in Python 2 it

00:16:34,280 --> 00:16:39,440
writes dungeon on zero for us also note

00:16:37,340 --> 00:16:42,080
that this range object that we're using

00:16:39,440 --> 00:16:45,860
is the Python 3 version because we're

00:16:42,080 --> 00:16:47,090
importing it from built-ins just like

00:16:45,860 --> 00:16:50,090
we're importing object from built-ins

00:16:47,090 --> 00:16:54,590
our print statement was turned into a

00:16:50,090 --> 00:16:56,660
print function because we're using this

00:16:54,590 --> 00:16:58,100
dunder future thing so that dunder

00:16:56,660 --> 00:17:00,080
future thing is something that the core

00:16:58,100 --> 00:17:01,910
developers added to Python 2 that's kind

00:17:00,080 --> 00:17:03,980
of a feature flag it allows you to opt

00:17:01,910 --> 00:17:06,050
into using certain Python 3 features

00:17:03,980 --> 00:17:08,930
before you even start upgrading their

00:17:06,050 --> 00:17:11,680
code these built-ins imports that I

00:17:08,930 --> 00:17:14,120
mentioned these are something different

00:17:11,680 --> 00:17:16,610
these are something that are bundled

00:17:14,120 --> 00:17:18,470
with the future library so the future

00:17:16,610 --> 00:17:21,470
library comes with a built in sly Brera

00:17:18,470 --> 00:17:24,920
that will allow you to write code that

00:17:21,470 --> 00:17:27,910
in Python 2 actually includes an

00:17:24,920 --> 00:17:31,220
equivalent of the Python 3 built-ins

00:17:27,910 --> 00:17:33,320
it's called built-ins because python 3

00:17:31,220 --> 00:17:36,890
already has a built-ins library that's

00:17:33,320 --> 00:17:38,870
actually equivalent to this so when we

00:17:36,890 --> 00:17:41,990
eventually drop support for Python 2

00:17:38,870 --> 00:17:44,420
with this code to get our code to keep

00:17:41,990 --> 00:17:46,970
working in Python 3 we don't have to do

00:17:44,420 --> 00:17:49,460
anything we don't delete any lines of

00:17:46,970 --> 00:17:50,720
code here this still works in Python 3

00:17:49,460 --> 00:17:52,490
now at some point in the future of

00:17:50,720 --> 00:17:54,409
course we will clean up this code and

00:17:52,490 --> 00:17:56,659
we'll probably delete those unnecessary

00:17:54,409 --> 00:17:59,149
imports at the top but we don't have to

00:17:56,659 --> 00:18:01,370
this code works in Python 3 out of the

00:17:59,149 --> 00:18:03,020
box without installing anything and it

00:18:01,370 --> 00:18:05,419
works in Python - if you've got future

00:18:03,020 --> 00:18:08,630
installed so we're really embracing

00:18:05,419 --> 00:18:10,640
Python 3 idioms here very heavily so

00:18:08,630 --> 00:18:14,299
using an automated code conversion tool

00:18:10,640 --> 00:18:17,270
can be really helpful but these tools

00:18:14,299 --> 00:18:18,980
are not flawless you're still going to

00:18:17,270 --> 00:18:22,220
need a certain to fix certain bugs

00:18:18,980 --> 00:18:27,950
manually I'll explain why with an

00:18:22,220 --> 00:18:30,350
example this is Python 2 code again it

00:18:27,950 --> 00:18:33,020
uses two standard library modules here

00:18:30,350 --> 00:18:34,549
that don't exist at all in Python 3 or

00:18:33,020 --> 00:18:37,039
rather they were kind of renamed or

00:18:34,549 --> 00:18:42,320
shuffled around you're a Lib to here and

00:18:37,039 --> 00:18:45,710
string i/o if we run this through future

00:18:42,320 --> 00:18:47,630
eyes the code that we get out is this

00:18:45,710 --> 00:18:50,390
it's fixed to these import statements

00:18:47,630 --> 00:18:52,549
for us so now we're using the Python 3

00:18:50,390 --> 00:18:56,480
versions of these libraries URL Lib dot

00:18:52,549 --> 00:18:58,909
request and i/o to get these Python 3

00:18:56,480 --> 00:19:01,940
versions working in Python 2 future eyes

00:18:58,909 --> 00:19:03,260
also monkey patches the python 2

00:19:01,940 --> 00:19:08,990
standard library again using that

00:19:03,260 --> 00:19:10,549
install aliases thing now this is both a

00:19:08,990 --> 00:19:12,529
step forward and a step back

00:19:10,549 --> 00:19:16,549
unfortunately I say that because this

00:19:12,529 --> 00:19:18,770
code is actually broken now it doesn't

00:19:16,549 --> 00:19:22,940
work in Python 3 yet and it doesn't even

00:19:18,770 --> 00:19:26,870
work in Python 2 anymore one problem is

00:19:22,940 --> 00:19:31,429
that URL open gives us back bytes but IO

00:19:26,870 --> 00:19:35,360
dot string I expects unicode also the

00:19:31,429 --> 00:19:38,000
CSV reader and CSV writer objects will

00:19:35,360 --> 00:19:42,590
not work with bytes in Python 3

00:19:38,000 --> 00:19:48,110
but we're opening our output file here

00:19:42,590 --> 00:19:50,990
in bytes mode which the CSV 3 or the

00:19:48,110 --> 00:19:52,010
Python 3 CSV writer object is not going

00:19:50,990 --> 00:19:55,490
to be happy about because it only

00:19:52,010 --> 00:19:58,309
expects bytes so after we've run our

00:19:55,490 --> 00:20:01,260
automated conversion tools we're still

00:19:58,309 --> 00:20:08,500
going to need to fix this code

00:20:01,260 --> 00:20:12,519
we can do this like this so now we're we

00:20:08,500 --> 00:20:15,370
are manually decoding the byte string

00:20:12,519 --> 00:20:18,429
that we get back from URL open so that

00:20:15,370 --> 00:20:21,159
the i/o nut string i/o object will be

00:20:18,429 --> 00:20:23,710
happy when we pass it to it and when

00:20:21,159 --> 00:20:25,419
we're opening our output file we are

00:20:23,710 --> 00:20:29,190
opening it in text mode instead of bytes

00:20:25,419 --> 00:20:31,960
mode notice that we're using the

00:20:29,190 --> 00:20:34,539
backported version of open which

00:20:31,960 --> 00:20:36,700
actually lives in the i/o library in

00:20:34,539 --> 00:20:40,240
both python 2 and python 3 this is the

00:20:36,700 --> 00:20:43,419
python 3 version of open here this is

00:20:40,240 --> 00:20:44,980
the recommended way of handling or this

00:20:43,419 --> 00:20:46,870
here this new line equals thing this

00:20:44,980 --> 00:20:48,940
actually only works in Python 3 in the

00:20:46,870 --> 00:20:52,929
Python 3 open this is the recommended

00:20:48,940 --> 00:20:54,700
way of handling CSV files on windows

00:20:52,929 --> 00:20:56,440
which is the entire reason we had that

00:20:54,700 --> 00:20:58,870
weird byte situation in the first place

00:20:56,440 --> 00:21:01,029
now most of you are probably very

00:20:58,870 --> 00:21:03,760
confused at this point unless you've

00:21:01,029 --> 00:21:09,010
done CSV code and used URL Lib in both

00:21:03,760 --> 00:21:10,450
either on to and python 3 so this was

00:21:09,010 --> 00:21:14,320
probably a little bit confusing what I'm

00:21:10,450 --> 00:21:16,059
trying to get at here is that the

00:21:14,320 --> 00:21:18,639
automated conversion tools aren't

00:21:16,059 --> 00:21:20,620
automatic wand they will push you in the

00:21:18,639 --> 00:21:22,080
right direction but you're still going

00:21:20,620 --> 00:21:24,669
to need to fix some things manually

00:21:22,080 --> 00:21:27,190
there's really no getting around this

00:21:24,669 --> 00:21:32,139
problem of having to fix code manually

00:21:27,190 --> 00:21:34,269
after this conversion process so you

00:21:32,139 --> 00:21:36,580
might have noticed that the bugs that we

00:21:34,269 --> 00:21:39,370
just fixed manually all relate to the

00:21:36,580 --> 00:21:41,620
same underlying issue and it's a pretty

00:21:39,370 --> 00:21:42,279
big issue and migrating from Python 2 to

00:21:41,620 --> 00:21:47,679
Python 3

00:21:42,279 --> 00:21:50,200
the issue is Unicode Python 3

00:21:47,679 --> 00:21:53,799
wonderfully distinguishes between text

00:21:50,200 --> 00:21:56,919
and bytes Python 2 does not so a lot of

00:21:53,799 --> 00:21:59,260
the ambiguities that the automated

00:21:56,919 --> 00:22:01,299
conversion tools can't handle are due to

00:21:59,260 --> 00:22:03,880
this distinction between text and bytes

00:22:01,299 --> 00:22:06,010
and the fact that Python 2 code was

00:22:03,880 --> 00:22:08,700
sloppy about it Python 2 itself was

00:22:06,010 --> 00:22:11,710
sloppy about requiring this distinction

00:22:08,700 --> 00:22:13,999
because python 3 requires this

00:22:11,710 --> 00:22:16,159
distinction between text and bytes

00:22:13,999 --> 00:22:17,869
textin bytes in unicode really and

00:22:16,159 --> 00:22:20,720
python 2 does not

00:22:17,869 --> 00:22:23,539
you cannot unambiguously convert Python

00:22:20,720 --> 00:22:26,239
2 code to Python 3 we're going from a

00:22:23,539 --> 00:22:29,989
sloppy bytes text distinction to a

00:22:26,239 --> 00:22:31,759
strict distinction if the meaning of

00:22:29,989 --> 00:22:33,529
your code is ambiguous the automated

00:22:31,759 --> 00:22:35,090
code conversion tools are not going to

00:22:33,529 --> 00:22:37,119
be able to guess the right way to do

00:22:35,090 --> 00:22:37,119
things

00:22:37,759 --> 00:22:41,149
Ned Batchelder has a great talk on

00:22:39,739 --> 00:22:42,649
Unicode that I recommend watching it's

00:22:41,149 --> 00:22:46,029
called pragmatic Unicode I think the

00:22:42,649 --> 00:22:48,649
subtitle is or how do I stop the pain

00:22:46,029 --> 00:22:53,330
while I'm mentioning links here I'll

00:22:48,649 --> 00:22:54,259
mention a few more so unicode it is a

00:22:53,330 --> 00:22:56,499
problem

00:22:54,259 --> 00:22:59,359
a few more links I would recommend

00:22:56,499 --> 00:23:00,799
consuming here I'll share my slides

00:22:59,359 --> 00:23:02,210
afterwards you can actually click on

00:23:00,799 --> 00:23:04,309
these links you can google them before

00:23:02,210 --> 00:23:05,809
that point the conservative pythons

00:23:04,309 --> 00:23:07,519
reporting guide it was written by some

00:23:05,809 --> 00:23:11,330
folks at Red Hat I believe it's a guide

00:23:07,519 --> 00:23:13,009
for folks who are upgrading not because

00:23:11,330 --> 00:23:14,599
they want the shiny new Python 3

00:23:13,009 --> 00:23:15,499
features but because like many of you

00:23:14,599 --> 00:23:16,970
who raised your hands there are

00:23:15,499 --> 00:23:19,460
begrudgingly upgrading they have to

00:23:16,970 --> 00:23:21,049
upgrade for some reason the Python

00:23:19,460 --> 00:23:22,580
documentation itself actually has an

00:23:21,049 --> 00:23:24,710
official porting guide from 2:00 to 3:00

00:23:22,580 --> 00:23:27,379
it's targeted at third-party projects

00:23:24,710 --> 00:23:29,570
that want to support both 2 and 3 at the

00:23:27,379 --> 00:23:33,519
same time but it works pretty well for

00:23:29,570 --> 00:23:36,529
this gradual migration process the book

00:23:33,519 --> 00:23:39,679
supporting Python 3 is free online it's

00:23:36,529 --> 00:23:42,379
a little older and it focuses more on

00:23:39,679 --> 00:23:45,200
sudden migrations but it has some things

00:23:42,379 --> 00:23:46,669
in it that will be useful to consider

00:23:45,200 --> 00:23:48,169
regardless of whether you're using a

00:23:46,669 --> 00:23:52,700
sudden migration or a gradual migration

00:23:48,169 --> 00:23:54,349
and also lastly here we've got migrating

00:23:52,700 --> 00:23:56,570
Python 2 to 3 this is a plural cite

00:23:54,349 --> 00:23:58,279
course by Anthony Shah if you see in the

00:23:56,570 --> 00:24:00,590
mahal in the halls thank him it's a

00:23:58,279 --> 00:24:01,909
great course it's sort of have the stuff

00:24:00,590 --> 00:24:03,889
that I have in this talk here but it's a

00:24:01,909 --> 00:24:05,840
little bit more in-depth because it's 3

00:24:03,889 --> 00:24:06,889
hours long not half an hour long think

00:24:05,840 --> 00:24:08,479
of that actually might even be longer

00:24:06,889 --> 00:24:10,849
than that and that talk from there

00:24:08,479 --> 00:24:13,849
batchelder's length there as well ok so

00:24:10,849 --> 00:24:15,139
I talked about gradual migrations I kind

00:24:13,849 --> 00:24:17,119
of want to address sudden migrations

00:24:15,139 --> 00:24:18,979
because there are probably many of you

00:24:17,119 --> 00:24:20,989
in this room who honestly are on a code

00:24:18,979 --> 00:24:24,619
base that is stagnant that you can

00:24:20,989 --> 00:24:26,269
upgrade suddenly so in theory sub

00:24:24,619 --> 00:24:27,839
migrations aren't really that different

00:24:26,269 --> 00:24:30,869
from gradual

00:24:27,839 --> 00:24:33,479
but because Sud migrations are a one-way

00:24:30,869 --> 00:24:35,279
process you'll want to stop all progress

00:24:33,479 --> 00:24:38,940
on your code until after you're done

00:24:35,279 --> 00:24:40,799
migrating you shouldn't in a sudden

00:24:38,940 --> 00:24:43,739
migration need to worry about a

00:24:40,799 --> 00:24:46,229
compatibility library but you will still

00:24:43,739 --> 00:24:49,469
want to use an automated code conversion

00:24:46,229 --> 00:24:51,929
tool two to three is meant specifically

00:24:49,469 --> 00:24:55,049
for this purpose I have never used two

00:24:51,929 --> 00:24:57,869
to three but a lot of people have and it

00:24:55,049 --> 00:24:59,519
supposedly works in fact future eyes and

00:24:57,869 --> 00:25:01,019
modern eyes were based on two to three

00:24:59,519 --> 00:25:03,179
they are kind of an extended version of

00:25:01,019 --> 00:25:06,570
it you are still going to need as well

00:25:03,179 --> 00:25:09,479
to manually fix things because two to

00:25:06,570 --> 00:25:12,599
three is no more magical than future

00:25:09,479 --> 00:25:14,940
eyes or modernize are and you will

00:25:12,599 --> 00:25:17,129
definitely no matter how you upgrade

00:25:14,940 --> 00:25:20,039
from Python to to Python three need a

00:25:17,129 --> 00:25:22,169
testing process you must have a testing

00:25:20,039 --> 00:25:24,349
process for your code because you are

00:25:22,169 --> 00:25:26,849
going to break things along the way

00:25:24,349 --> 00:25:28,409
migrating to Python 3 is hard regardless

00:25:26,849 --> 00:25:30,269
of whether you're doing it suddenly

00:25:28,409 --> 00:25:32,969
you're doing it gradually or you're

00:25:30,269 --> 00:25:36,029
rewriting your entire code base I wish

00:25:32,969 --> 00:25:36,430
you luck and they wish you speed thank

00:25:36,029 --> 00:25:40,670
you

00:25:36,430 --> 00:25:40,670
[Applause]

00:25:43,140 --> 00:25:48,100
tre is going to be available for

00:25:45,100 --> 00:25:49,400
questions outside after the talk let's

00:25:48,100 --> 00:25:53,669
give them one last round of applause

00:25:49,400 --> 00:25:53,669

YouTube URL: https://www.youtube.com/watch?v=klaGx9Q_SOA


