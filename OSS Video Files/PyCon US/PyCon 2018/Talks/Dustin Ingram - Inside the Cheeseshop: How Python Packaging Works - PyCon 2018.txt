Title: Dustin Ingram - Inside the Cheeseshop: How Python Packaging Works - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Dustin Ingram

Questions and confusion about the Python packaging ecosystem abound. What is this `setup.py` file? What's the difference between wheels and eggs? Do I use setuptools or distutils? Why should I use twine? Do I put my projects dependencies in a `requirements.txt` or in `setup.py`? How do I just get my module up on PyPI? Wait, what is Warehouse?

This talk will identify the key tools one might encounter when trying to distribute Python software, what they are used for, why they exist, and their history (including where their weird names come from). In addition, we'll see how they all work together, what it takes to make them work, and what the future has in store for Python packaging.

Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:03,859 --> 00:00:09,780
hello thank everybody our next speaker

00:00:06,839 --> 00:00:11,550
is Dustin Ingram is a member of the

00:00:09,780 --> 00:00:15,469
Python packaging authority and

00:00:11,550 --> 00:00:15,469
maintainer of pipe I

00:00:16,110 --> 00:00:25,439
[Applause]

00:00:22,470 --> 00:00:28,179
hey everyone so I'm Dustin

00:00:25,439 --> 00:00:30,099
I'm director at pump works in Austin

00:00:28,179 --> 00:00:32,320
Texas I'm a PI Texas organizer I'm also

00:00:30,099 --> 00:00:34,540
like he said a member of the Python

00:00:32,320 --> 00:00:36,309
packaging working group Python packaging

00:00:34,540 --> 00:00:42,460
Authority and I'm also a maintainer of

00:00:36,309 --> 00:00:43,750
pipe ID so I had a kind of hard time

00:00:42,460 --> 00:00:46,300
coming up with the title of this talk

00:00:43,750 --> 00:00:48,190
and not just because naming things are

00:00:46,300 --> 00:00:50,110
hard even though naming things is hard

00:00:48,190 --> 00:00:51,820
the reason I had a hard time coming up

00:00:50,110 --> 00:00:53,379
with the title of this talk is because I

00:00:51,820 --> 00:00:55,359
knew I wanted to talk about Python

00:00:53,379 --> 00:00:57,039
packaging but a lot of people have

00:00:55,359 --> 00:00:59,260
already given talks about Python

00:00:57,039 --> 00:01:00,550
packaging so many in fact that every

00:00:59,260 --> 00:01:02,289
time I came up with a title for this

00:01:00,550 --> 00:01:05,019
talk it seemed like someone had already

00:01:02,289 --> 00:01:06,880
given that talk so at first I thought

00:01:05,019 --> 00:01:09,130
what is the core of Python packaging

00:01:06,880 --> 00:01:10,300
I'll call my talk Python packaging and

00:01:09,130 --> 00:01:11,590
getting the code you wrote to the people

00:01:10,300 --> 00:01:15,340
that want it using the same language you

00:01:11,590 --> 00:01:17,020
wrote it in this has been done and that

00:01:15,340 --> 00:01:18,520
title is pretty long so maybe I should

00:01:17,020 --> 00:01:20,619
do something a little more clickbait ii

00:01:18,520 --> 00:01:24,310
like python packaging in just five easy

00:01:20,619 --> 00:01:25,840
steps that's been done too I thought

00:01:24,310 --> 00:01:27,399
maybe I could one-up this person I could

00:01:25,840 --> 00:01:33,069
do Python packaging in just four easy

00:01:27,399 --> 00:01:34,209
steps he did that as well so maybe I

00:01:33,069 --> 00:01:35,649
should be more encouraging about

00:01:34,209 --> 00:01:37,840
packaging python packaging it's

00:01:35,649 --> 00:01:41,080
relatively painless now go ahead and use

00:01:37,840 --> 00:01:43,149
it this has been done but relatively

00:01:41,080 --> 00:01:44,860
painless is still painful so maybe I

00:01:43,149 --> 00:01:47,050
thought I should try to instill more

00:01:44,860 --> 00:01:48,459
confidence that it's improving Python

00:01:47,050 --> 00:01:51,369
packaging we're still trying to make it

00:01:48,459 --> 00:01:52,509
better that was kind of already done all

00:01:51,369 --> 00:01:54,700
right maybe I should take a stronger

00:01:52,509 --> 00:01:56,429
approach Python packaging let's just

00:01:54,700 --> 00:02:00,220
throw it all away and start over again

00:01:56,429 --> 00:02:01,660
that's been done maybe the problem is

00:02:00,220 --> 00:02:03,220
that too much has changed too quickly so

00:02:01,660 --> 00:02:04,360
I'll do Python packaging let me just get

00:02:03,220 --> 00:02:07,780
you up to speed on everything has

00:02:04,360 --> 00:02:09,610
changed since last time that's been done

00:02:07,780 --> 00:02:11,080
and then I figured maybe not everyone

00:02:09,610 --> 00:02:13,030
cares about everything in Python

00:02:11,080 --> 00:02:14,230
packaging so I'll do Python packaging

00:02:13,030 --> 00:02:16,060
there's a lot of stuff under this

00:02:14,230 --> 00:02:18,610
umbrella you might not need all of it

00:02:16,060 --> 00:02:20,860
and that's been done by this great talk

00:02:18,610 --> 00:02:22,180
so maybe I should keep it simple Python

00:02:20,860 --> 00:02:25,209
packaging in the simplest terms possible

00:02:22,180 --> 00:02:27,730
for anyone that cares no it's been done

00:02:25,209 --> 00:02:30,459
maybe simpler Python packaging so easy a

00:02:27,730 --> 00:02:37,540
caveman could do it that's been done -

00:02:30,459 --> 00:02:39,370
all right at this point I'm really

00:02:37,540 --> 00:02:41,110
starting to run out of options maybe I

00:02:39,370 --> 00:02:42,820
should stick something more stick to

00:02:41,110 --> 00:02:45,190
something more unique about my personal

00:02:42,820 --> 00:02:46,570
experience hello I'm a PI PI maintainer

00:02:45,190 --> 00:02:49,420
at the very least I should be able to

00:02:46,570 --> 00:02:52,090
tell you how to use pi pi this has been

00:02:49,420 --> 00:02:54,670
done all right one last ditch effort

00:02:52,090 --> 00:02:57,370
Python packaging but I'll make it

00:02:54,670 --> 00:02:59,590
Indiana Jones themed and I'll do it in

00:02:57,370 --> 00:03:06,880
French there's no way this has been done

00:02:59,590 --> 00:03:08,800
before right all right okay so it it

00:03:06,880 --> 00:03:10,270
really kind of seems like everything

00:03:08,800 --> 00:03:12,430
that could be said about Python

00:03:10,270 --> 00:03:14,650
packaging has already been said so I

00:03:12,430 --> 00:03:16,299
should probably just give you a links on

00:03:14,650 --> 00:03:17,680
YouTube to all these talks you can go

00:03:16,299 --> 00:03:24,730
home and wash them and we can just wrap

00:03:17,680 --> 00:03:27,130
this up right now cool so in the end I

00:03:24,730 --> 00:03:28,630
picked this title which is actually a

00:03:27,130 --> 00:03:31,450
pretty awful title for a number of

00:03:28,630 --> 00:03:32,830
reasons first of all it's got an obscure

00:03:31,450 --> 00:03:33,340
reference to something that makes no

00:03:32,830 --> 00:03:34,930
sense

00:03:33,340 --> 00:03:36,630
why am I talking about cheese shop I

00:03:34,930 --> 00:03:39,340
know nothing about cheese

00:03:36,630 --> 00:03:41,500
second of all Python packaging is an

00:03:39,340 --> 00:03:43,750
incredibly broad and complex subject

00:03:41,500 --> 00:03:46,600
trying to explain it how it works is

00:03:43,750 --> 00:03:47,769
perhaps a lost cause and third I'm kind

00:03:46,600 --> 00:03:49,450
of making the assumption that Python

00:03:47,769 --> 00:03:51,519
packaging actually works which has

00:03:49,450 --> 00:03:53,829
historically been the biggest complaint

00:03:51,519 --> 00:03:56,140
about the topic but here's the thing I

00:03:53,829 --> 00:03:58,030
think that Python packaging actually

00:03:56,140 --> 00:04:01,329
works great and we've just gotten used

00:03:58,030 --> 00:04:02,920
to how good we have it so I really truly

00:04:01,329 --> 00:04:05,019
do want to do some Python packaging

00:04:02,920 --> 00:04:06,370
archaeology with you all and I want to

00:04:05,019 --> 00:04:07,510
talk about the evolution of packaging

00:04:06,370 --> 00:04:09,250
through the years to provide some

00:04:07,510 --> 00:04:12,010
context for why things are the way they

00:04:09,250 --> 00:04:13,870
are and about how at each step we had a

00:04:12,010 --> 00:04:15,459
new problem to solve and then a new

00:04:13,870 --> 00:04:18,549
solution for that problem which we got a

00:04:15,459 --> 00:04:20,830
new problem on and on so let's go back

00:04:18,549 --> 00:04:21,340
in time back in no time when Python was

00:04:20,830 --> 00:04:22,990
brand

00:04:21,340 --> 00:04:25,180
and everything that we're familiar with

00:04:22,990 --> 00:04:26,889
today in Python packaging didn't exist

00:04:25,180 --> 00:04:29,979
back to the beginning when there was

00:04:26,889 --> 00:04:31,360
just Python and pretty soon as soon as

00:04:29,979 --> 00:04:33,610
there was Python there was something

00:04:31,360 --> 00:04:35,199
written in Python so let's pretend that

00:04:33,610 --> 00:04:38,350
you're the author of this totally

00:04:35,199 --> 00:04:40,210
awesome library nice work but really at

00:04:38,350 --> 00:04:42,940
the moment this code is only really

00:04:40,210 --> 00:04:45,280
useful for you so you have a problem how

00:04:42,940 --> 00:04:47,020
do you get this code to your users this

00:04:45,280 --> 00:04:49,419
is really the fundamental problem of

00:04:47,020 --> 00:04:51,010
packaging so maybe you talk to your

00:04:49,419 --> 00:04:53,350
friends and you say hey I have this

00:04:51,010 --> 00:04:55,000
totally awesome library how do you get

00:04:53,350 --> 00:04:57,040
it to them you could email it to someone

00:04:55,000 --> 00:04:58,960
every time you met someone that knew

00:04:57,040 --> 00:05:01,750
that wanted it but I would pretty

00:04:58,960 --> 00:05:03,580
quickly become a pain you could put it

00:05:01,750 --> 00:05:05,080
up on your website somewhere with a link

00:05:03,580 --> 00:05:06,970
to download and this could be nice

00:05:05,080 --> 00:05:08,830
because you could add documentation and

00:05:06,970 --> 00:05:10,180
other things but how are people gonna

00:05:08,830 --> 00:05:13,419
find it if they want it

00:05:10,180 --> 00:05:15,370
Python was first released in 1991 Google

00:05:13,419 --> 00:05:18,700
wouldn't be around for another six years

00:05:15,370 --> 00:05:21,760
so this leads us to a new problem how do

00:05:18,700 --> 00:05:23,680
I find Python code what we need is a

00:05:21,760 --> 00:05:25,840
place where people can go to find

00:05:23,680 --> 00:05:29,410
interesting Python code some sort of

00:05:25,840 --> 00:05:33,240
like index for Python packages I think

00:05:29,410 --> 00:05:35,800
that we'll call it live also Parnassus

00:05:33,240 --> 00:05:39,220
so this was the first index for Python

00:05:35,800 --> 00:05:41,110
software it's beautiful right it's got

00:05:39,220 --> 00:05:43,419
the Python up there and everything it's

00:05:41,110 --> 00:05:45,940
literally an index so this just linked

00:05:43,419 --> 00:05:48,190
to something on other people's websites

00:05:45,940 --> 00:05:49,150
and I hesitate to use the word package

00:05:48,190 --> 00:05:52,630
here because at this point what a

00:05:49,150 --> 00:05:55,000
package is is really loosely defined the

00:05:52,630 --> 00:05:56,560
end result is just whatever those people

00:05:55,000 --> 00:05:58,270
those maintainer x' felt like putting up

00:05:56,560 --> 00:05:59,800
on their website there's no standard

00:05:58,270 --> 00:06:01,060
there's no enforcement of any standard

00:05:59,800 --> 00:06:03,700
or quality level or anything like that

00:06:01,060 --> 00:06:05,860
and this leads us to a new problem how

00:06:03,700 --> 00:06:08,169
do I build this so at this time every

00:06:05,860 --> 00:06:11,770
project came with its own little special

00:06:08,169 --> 00:06:13,539
snowflake way to umbilical script maybe

00:06:11,770 --> 00:06:15,970
it was like a make file and maybe it was

00:06:13,539 --> 00:06:19,180
just instructions in a text file this is

00:06:15,970 --> 00:06:20,889
really painful for users the solution to

00:06:19,180 --> 00:06:22,900
this problem was at the 1998

00:06:20,889 --> 00:06:25,120
international Python conference which is

00:06:22,900 --> 00:06:26,770
now called PyCon a little project got

00:06:25,120 --> 00:06:29,110
started called disk details which stood

00:06:26,770 --> 00:06:30,490
for distribution utilities this was

00:06:29,110 --> 00:06:32,950
included in the standard library in

00:06:30,490 --> 00:06:34,680
Python 1.6 which came out in 2000 and

00:06:32,950 --> 00:06:36,870
this gave us a kind of a

00:06:34,680 --> 00:06:39,449
incantation Python set up top hi

00:06:36,870 --> 00:06:40,889
whatever I think some people have run

00:06:39,449 --> 00:06:43,410
this command without really even

00:06:40,889 --> 00:06:45,720
thinking about what's going on here it's

00:06:43,410 --> 00:06:47,580
just a Python script with a little magic

00:06:45,720 --> 00:06:49,560
thanks to the standard library and the

00:06:47,580 --> 00:06:52,169
idea was why write a domain-specific

00:06:49,560 --> 00:06:54,150
language or create a new config file

00:06:52,169 --> 00:06:55,919
when you already have the full power of

00:06:54,150 --> 00:06:58,410
Python at your disposal let's just write

00:06:55,919 --> 00:07:00,870
more Python will see riot why in a

00:06:58,410 --> 00:07:02,340
second that was problematic and so it

00:07:00,870 --> 00:07:04,380
was really just a build tool you'd set

00:07:02,340 --> 00:07:05,729
up Python set up top high build and it

00:07:04,380 --> 00:07:07,199
would replace those make files and

00:07:05,729 --> 00:07:10,050
everything else and the goal was just to

00:07:07,199 --> 00:07:12,720
make something in a consistent way that

00:07:10,050 --> 00:07:14,400
could then be installed this details

00:07:12,720 --> 00:07:16,259
also gave us a way to package up source

00:07:14,400 --> 00:07:18,449
code for sharing which we call source

00:07:16,259 --> 00:07:20,419
distributions this is just a compressed

00:07:18,449 --> 00:07:23,370
archive like a zip or target tar ball

00:07:20,419 --> 00:07:27,240
this is also known as a nest disk or I

00:07:23,370 --> 00:07:28,620
like to say like a snake cyst and this

00:07:27,240 --> 00:07:30,870
McMahan might be more familiar to you a

00:07:28,620 --> 00:07:32,940
Python set up top is disk but it was

00:07:30,870 --> 00:07:34,440
quickly obvious that sometimes source

00:07:32,940 --> 00:07:36,599
distributions weren't just going to cut

00:07:34,440 --> 00:07:38,880
it the main problem is that sometimes

00:07:36,599 --> 00:07:40,260
building takes too long sometimes source

00:07:38,880 --> 00:07:42,330
distributions are fine but sometimes

00:07:40,260 --> 00:07:44,849
they have so much to do during this

00:07:42,330 --> 00:07:47,220
build step possibly even compiling C

00:07:44,849 --> 00:07:48,960
code that it becomes really costly to do

00:07:47,220 --> 00:07:50,909
this every single time you want to

00:07:48,960 --> 00:07:52,560
install a dependency and it feels really

00:07:50,909 --> 00:07:54,060
wasteful if you're doing it over and

00:07:52,560 --> 00:07:56,520
over again on the exact same

00:07:54,060 --> 00:07:59,580
architecture so the solution of this

00:07:56,520 --> 00:08:00,930
problem was build distributions so

00:07:59,580 --> 00:08:02,610
instead of a source distribution you

00:08:00,930 --> 00:08:04,560
take a built distribution that's already

00:08:02,610 --> 00:08:06,180
been pre-built for your architecture and

00:08:04,560 --> 00:08:07,860
you just drop it in place there's no

00:08:06,180 --> 00:08:10,169
build step necessary it's already been

00:08:07,860 --> 00:08:12,750
done for you this is also known as a

00:08:10,169 --> 00:08:14,789
Buddhist and you create it with this

00:08:12,750 --> 00:08:16,919
command here so this details is pretty

00:08:14,789 --> 00:08:18,389
great having a consistent way to build

00:08:16,919 --> 00:08:20,159
things was immensely helpful but it

00:08:18,389 --> 00:08:22,050
punted on solving two really key

00:08:20,159 --> 00:08:23,970
problems the first of which is the

00:08:22,050 --> 00:08:26,460
generic idea of packaging by this I mean

00:08:23,970 --> 00:08:28,199
how do you get the user to the state

00:08:26,460 --> 00:08:30,270
right before they run this command this

00:08:28,199 --> 00:08:31,650
build command where they have everything

00:08:30,270 --> 00:08:32,630
that they need but they haven't put it

00:08:31,650 --> 00:08:34,919
together yet

00:08:32,630 --> 00:08:36,539
the original Edition tools authors saw

00:08:34,919 --> 00:08:38,219
this as a solved problem all the

00:08:36,539 --> 00:08:39,990
platforms they wanted to run Python on

00:08:38,219 --> 00:08:42,060
already had system level package

00:08:39,990 --> 00:08:44,700
managers talking about Linux package

00:08:42,060 --> 00:08:46,560
managers like rpm they couldn't imagine

00:08:44,700 --> 00:08:48,279
that developers would ever want to do

00:08:46,560 --> 00:08:50,949
development on platforms that didn't

00:08:48,279 --> 00:08:51,430
package manager of its own well guess

00:08:50,949 --> 00:08:54,220
what

00:08:51,430 --> 00:08:55,540
turns out developers love developing on

00:08:54,220 --> 00:08:57,670
platforms that don't have official

00:08:55,540 --> 00:08:59,740
package managers like Mac OS and Windows

00:08:57,670 --> 00:09:02,079
and there's another problem with

00:08:59,740 --> 00:09:03,519
solution as well so maybe your platform

00:09:02,079 --> 00:09:05,199
does have a package manager

00:09:03,519 --> 00:09:07,629
but packages in platform distributions

00:09:05,199 --> 00:09:09,069
usually lag behind releases because once

00:09:07,629 --> 00:09:10,959
the author has published the code in

00:09:09,069 --> 00:09:12,279
some way platform maintainer zhh need to

00:09:10,959 --> 00:09:13,899
take that and package it up for the

00:09:12,279 --> 00:09:15,610
specific platform put it in that

00:09:13,899 --> 00:09:17,860
platform specific index and this takes

00:09:15,610 --> 00:09:19,329
time and as a user generally you want

00:09:17,860 --> 00:09:22,809
that fresh release right now especially

00:09:19,329 --> 00:09:25,209
if it is security update so the solution

00:09:22,809 --> 00:09:27,160
is the Python package index a package

00:09:25,209 --> 00:09:29,649
index that is just for Python and we

00:09:27,160 --> 00:09:31,629
call this the Python package index this

00:09:29,649 --> 00:09:33,639
is what it looked like in October 2002

00:09:31,629 --> 00:09:36,910
and this is great it gave us a

00:09:33,639 --> 00:09:39,550
consistent official centralized place to

00:09:36,910 --> 00:09:41,410
put Python software and I say put

00:09:39,550 --> 00:09:43,059
because it still links to externally

00:09:41,410 --> 00:09:46,180
hosted files but it's got a bit more

00:09:43,059 --> 00:09:47,589
structure this is also known as pipe I

00:09:46,180 --> 00:09:50,620
say it with me

00:09:47,589 --> 00:09:54,220
PI PE I not pi PI that's something else

00:09:50,620 --> 00:09:55,720
again naming things is pretty hard this

00:09:54,220 --> 00:09:58,089
is also known as the cheese shop and

00:09:55,720 --> 00:09:59,379
this is a reference to a Monty Python

00:09:58,089 --> 00:10:01,809
skit where a man goes in the cheese shop

00:09:59,379 --> 00:10:03,399
which has no cheese for sale the joke is

00:10:01,809 --> 00:10:06,579
that when pi pi was first created there

00:10:03,399 --> 00:10:08,259
was nothing in it so it's not really

00:10:06,579 --> 00:10:10,059
even appropriate to call it that anymore

00:10:08,259 --> 00:10:13,180
because PI P I now has hundreds of

00:10:10,059 --> 00:10:15,550
thousands of packages the other thing

00:10:13,180 --> 00:10:18,490
that dist utils punted on was being able

00:10:15,550 --> 00:10:20,500
to specify dependencies there was no way

00:10:18,490 --> 00:10:22,420
to say that a given package depended on

00:10:20,500 --> 00:10:24,370
some other package being installed as

00:10:22,420 --> 00:10:25,629
well in order for it to work and this

00:10:24,370 --> 00:10:28,120
kind of makes sense they didn't have a

00:10:25,629 --> 00:10:29,350
centralized index to point to but now

00:10:28,120 --> 00:10:31,329
that we have a packaged index it's

00:10:29,350 --> 00:10:33,129
possible to not only point to some

00:10:31,329 --> 00:10:35,230
version of an exact package somewhere

00:10:33,129 --> 00:10:37,000
but it's also possible to distribute

00:10:35,230 --> 00:10:39,160
something that does more than dist utils

00:10:37,000 --> 00:10:40,660
which again was just in the Python

00:10:39,160 --> 00:10:43,209
standard library and came with your

00:10:40,660 --> 00:10:45,279
Python so solution this problem was set

00:10:43,209 --> 00:10:47,259
up tools set of tools essentially monkey

00:10:45,279 --> 00:10:49,059
patched this details in the standard

00:10:47,259 --> 00:10:50,800
library and there are some advantages

00:10:49,059 --> 00:10:52,389
here it's quicker to get new code to

00:10:50,800 --> 00:10:54,189
users who don't have to upgrade their

00:10:52,389 --> 00:10:56,019
entire Python distribution to get new

00:10:54,189 --> 00:10:57,939
packaging goodness but there are also

00:10:56,019 --> 00:10:59,980
some disadvantages monkey patching is

00:10:57,939 --> 00:11:01,449
never really a great idea and especially

00:10:59,980 --> 00:11:01,770
if your monkey patching the standard

00:11:01,449 --> 00:11:04,000
live

00:11:01,770 --> 00:11:06,490
but once we had set up tools all sorts

00:11:04,000 --> 00:11:08,020
of other things came along with it one

00:11:06,490 --> 00:11:09,700
problem that we were having how can we

00:11:08,020 --> 00:11:11,410
make installing easier now that we can

00:11:09,700 --> 00:11:13,540
easily specify dependencies we want to

00:11:11,410 --> 00:11:15,010
make them easier to install as well the

00:11:13,540 --> 00:11:17,500
solution was something creatively called

00:11:15,010 --> 00:11:19,150
easy install and this did in theory make

00:11:17,500 --> 00:11:21,850
it easier for your users to install

00:11:19,150 --> 00:11:23,950
various projects when paired with setup

00:11:21,850 --> 00:11:25,420
tools this would allow users to install

00:11:23,950 --> 00:11:27,940
dependencies for a project directly from

00:11:25,420 --> 00:11:29,800
pi PI and it also introduced a new type

00:11:27,940 --> 00:11:31,510
of built distribution because the

00:11:29,800 --> 00:11:33,550
existing ones weren't cutting it this is

00:11:31,510 --> 00:11:34,720
called the egg distribution there are

00:11:33,550 --> 00:11:36,010
other types of eggs but the built

00:11:34,720 --> 00:11:38,260
distribution type is kind of the

00:11:36,010 --> 00:11:39,850
important one here and an egg is just a

00:11:38,260 --> 00:11:41,890
zip file with some metadata it could

00:11:39,850 --> 00:11:43,960
contain some Python byte code as well so

00:11:41,890 --> 00:11:46,030
then it's prepared for your system the

00:11:43,960 --> 00:11:48,250
name comes from Python pythons lay eggs

00:11:46,030 --> 00:11:50,170
but easy install gave us some new

00:11:48,250 --> 00:11:52,600
problems lots of problems with easy

00:11:50,170 --> 00:11:56,110
install it was really good at installing

00:11:52,600 --> 00:11:59,290
it was so easy but it couldn't uninstall

00:11:56,110 --> 00:12:00,520
and it couldn't tell you what you had

00:11:59,290 --> 00:12:02,560
installed on your system

00:12:00,520 --> 00:12:04,960
it also mucked around with sistah path

00:12:02,560 --> 00:12:06,880
which is just generally not great so a

00:12:04,960 --> 00:12:08,440
solution was a project called PI install

00:12:06,880 --> 00:12:10,060
and you might have never heard of this

00:12:08,440 --> 00:12:12,220
because pretty much as soon as PI

00:12:10,060 --> 00:12:15,250
install was created we had a new problem

00:12:12,220 --> 00:12:17,200
the name PI install is too long and also

00:12:15,250 --> 00:12:19,120
typing PI install install seems really

00:12:17,200 --> 00:12:20,950
redundant like I said naming things is

00:12:19,120 --> 00:12:22,960
hard so we changed the name pretty

00:12:20,950 --> 00:12:24,820
quickly pine-sol becomes pip almost

00:12:22,960 --> 00:12:27,250
immediately and the name pip is an

00:12:24,820 --> 00:12:29,560
obscure reference it stands for pip

00:12:27,250 --> 00:12:33,430
installs packages so we swapped the

00:12:29,560 --> 00:12:34,900
redundancy for a recursive acronym so

00:12:33,430 --> 00:12:36,610
while easy install is still around at

00:12:34,900 --> 00:12:39,400
this point in time pip soon becomes the

00:12:36,610 --> 00:12:41,350
preferred installer and pip ignores eggs

00:12:39,400 --> 00:12:43,630
entirely only installs from source

00:12:41,350 --> 00:12:45,610
distributions this is mostly due to some

00:12:43,630 --> 00:12:48,700
bad rap that eggs got do the easy

00:12:45,610 --> 00:12:50,230
install at this point people are using

00:12:48,700 --> 00:12:52,480
pip to install dependencies for

00:12:50,230 --> 00:12:54,070
applications and not dependencies for

00:12:52,480 --> 00:12:56,140
other packages so essentially an

00:12:54,070 --> 00:12:58,240
application there is no top-level

00:12:56,140 --> 00:13:00,400
project to install where you can specify

00:12:58,240 --> 00:13:01,930
all the dependencies so if we want a way

00:13:00,400 --> 00:13:03,960
to specify dependencies for an

00:13:01,930 --> 00:13:06,880
application instead what do we do

00:13:03,960 --> 00:13:08,710
pip introduces requirement text which

00:13:06,880 --> 00:13:09,910
includes pinning specific versions of

00:13:08,710 --> 00:13:12,040
dependencies and this should seem

00:13:09,910 --> 00:13:14,290
familiar to everyone this incantation

00:13:12,040 --> 00:13:15,640
pip install - our requirements that text

00:13:14,290 --> 00:13:17,710
would install all the dependencies

00:13:15,640 --> 00:13:20,020
in that file and it allows for semi

00:13:17,710 --> 00:13:22,030
reproducible environments so now

00:13:20,020 --> 00:13:23,970
everybody is really happily pip

00:13:22,030 --> 00:13:26,170
installing but we have a new problem

00:13:23,970 --> 00:13:28,510
installing from pi pi is starting to get

00:13:26,170 --> 00:13:30,490
really slow remember it's still just an

00:13:28,510 --> 00:13:32,980
index so when pip has to install

00:13:30,490 --> 00:13:34,870
something it has to go and crawl pi PI

00:13:32,980 --> 00:13:37,360
and then go and crawl a bunch of other

00:13:34,870 --> 00:13:39,580
domains those domains might not be

00:13:37,360 --> 00:13:42,670
performant and for that matter pi PI I

00:13:39,580 --> 00:13:44,230
might not be either another problem that

00:13:42,670 --> 00:13:46,390
this introduces is that as a package

00:13:44,230 --> 00:13:48,850
maintainer my users have to trust third

00:13:46,390 --> 00:13:50,740
party domains so what happens when I

00:13:48,850 --> 00:13:53,680
forget to re-register my domain name

00:13:50,740 --> 00:13:55,210
that my package is hosted on an attacker

00:13:53,680 --> 00:13:56,620
can go and register it put malicious

00:13:55,210 --> 00:13:58,960
code and it's placed my users have no

00:13:56,620 --> 00:14:00,190
idea they are so used to pip trying to

00:13:58,960 --> 00:14:03,250
connect to random domains that they'll

00:14:00,190 --> 00:14:05,200
never notice so solution this problem is

00:14:03,250 --> 00:14:07,120
that pi pi begins hosting releases

00:14:05,200 --> 00:14:10,210
itself and this is specified in a pet

00:14:07,120 --> 00:14:12,940
pet 438 which means that pi p i now

00:14:10,210 --> 00:14:13,960
literally host distributions and around

00:14:12,940 --> 00:14:16,090
this time we start to notice a new

00:14:13,960 --> 00:14:18,520
problem as well we actually do need

00:14:16,090 --> 00:14:20,290
built distributions again turns out all

00:14:18,520 --> 00:14:22,030
the problems that we needed built

00:14:20,290 --> 00:14:24,460
distributions to solve are still

00:14:22,030 --> 00:14:26,050
problems but we don't want eggs eggs are

00:14:24,460 --> 00:14:27,760
poorly defined and file naming

00:14:26,050 --> 00:14:30,160
conventions are not enough to capture

00:14:27,760 --> 00:14:31,510
all potential platforms and like I said

00:14:30,160 --> 00:14:34,090
they've been given a bad rap so the

00:14:31,510 --> 00:14:36,340
solution is another built distribution

00:14:34,090 --> 00:14:39,370
the wheel distribution it's a lot like

00:14:36,340 --> 00:14:41,500
eggs it's also just a zip file but most

00:14:39,370 --> 00:14:43,720
importantly it has a specification and

00:14:41,500 --> 00:14:45,520
this specification has learned from all

00:14:43,720 --> 00:14:48,490
the mistakes of easy install and egg

00:14:45,520 --> 00:14:50,080
distribution the name comes from a wheel

00:14:48,490 --> 00:14:51,970
of cheese you put wheels in a cheese

00:14:50,080 --> 00:14:53,530
shop I'd like to think that the authors

00:14:51,970 --> 00:14:55,810
of the spec actually really got this

00:14:53,530 --> 00:14:57,580
name right because in addition nobody

00:14:55,810 --> 00:15:02,170
can say they're going to reinvent the

00:14:57,580 --> 00:15:04,030
wheel so at this point a lot of people

00:15:02,170 --> 00:15:05,380
are depending on pi PI we start to

00:15:04,030 --> 00:15:07,900
become a little more focused on making

00:15:05,380 --> 00:15:10,720
sure it's secure one problem at the time

00:15:07,900 --> 00:15:12,610
Python setup I upload is not using HTTP

00:15:10,720 --> 00:15:14,110
this means that your PI pi credentials

00:15:12,610 --> 00:15:15,700
could be intercepted or that you might

00:15:14,110 --> 00:15:17,710
not actually even be talking to pi PI at

00:15:15,700 --> 00:15:19,720
all the solution was a project called

00:15:17,710 --> 00:15:21,190
twine in the same vein as setup tools

00:15:19,720 --> 00:15:23,380
and pip this is a totally separate

00:15:21,190 --> 00:15:24,880
package which is installed from pi PI

00:15:23,380 --> 00:15:27,940
and is responsible for it securely

00:15:24,880 --> 00:15:29,470
uploading a new package to pi PI the

00:15:27,940 --> 00:15:31,570
name comes from tying up packages with

00:15:29,470 --> 00:15:33,490
twine before sending them and this name

00:15:31,570 --> 00:15:35,020
doesn't really correlate well with what

00:15:33,490 --> 00:15:36,970
it does twine doesn't actually do

00:15:35,020 --> 00:15:38,380
anything to your package all the

00:15:36,970 --> 00:15:40,390
bundling has already been done it just

00:15:38,380 --> 00:15:42,070
looks up some information about your

00:15:40,390 --> 00:15:44,110
package and knows how to send it

00:15:42,070 --> 00:15:46,330
securely to pi PI it's kind of more like

00:15:44,110 --> 00:15:50,290
a package carrier but naming things is

00:15:46,330 --> 00:15:51,730
hard so now we're sort of starting to

00:15:50,290 --> 00:15:55,060
get a little bit into the modern age and

00:15:51,730 --> 00:15:57,040
pi pi is starting to show its age this

00:15:55,060 --> 00:15:58,420
is what PI P I look like in I keep

00:15:57,040 --> 00:16:01,380
turning the wrong side this is what pi

00:15:58,420 --> 00:16:05,410
PI look like in 2007 about 4 years old

00:16:01,380 --> 00:16:07,480
here it is about a month ago here they

00:16:05,410 --> 00:16:09,310
are side by side 10 years apart is 10

00:16:07,480 --> 00:16:10,570
years which we needs to screenshots it's

00:16:09,310 --> 00:16:13,180
kind of like one of those spot the

00:16:10,570 --> 00:16:16,150
difference games so it's not really fair

00:16:13,180 --> 00:16:18,910
to compare pi PI and 2007 with pi PI in

00:16:16,150 --> 00:16:21,640
2018 one big difference that you can't

00:16:18,910 --> 00:16:23,770
see from the slide is the number of

00:16:21,640 --> 00:16:25,650
packages PI P I went from having less

00:16:23,770 --> 00:16:28,870
than 3,000 packages to having more than

00:16:25,650 --> 00:16:31,330
130,000 packages and in that time PI P I

00:16:28,870 --> 00:16:34,000
went from a place to get Python packages

00:16:31,330 --> 00:16:36,550
to the place to get Python packages and

00:16:34,000 --> 00:16:39,070
this included lots of issues with pi PI

00:16:36,550 --> 00:16:40,000
being down or having outages and there

00:16:39,070 --> 00:16:42,010
are lots of things that had to happen

00:16:40,000 --> 00:16:43,420
behind the scenes so the PI bi could

00:16:42,010 --> 00:16:44,700
continue to work and continue to look

00:16:43,420 --> 00:16:47,410
exactly the same

00:16:44,700 --> 00:16:49,630
the other thing is by its very nature pi

00:16:47,410 --> 00:16:51,610
PI predates almost all of the packages

00:16:49,630 --> 00:16:52,900
that exist on it including all the web

00:16:51,610 --> 00:16:55,570
frameworks and testing frameworks that

00:16:52,900 --> 00:16:58,180
you're probably familiar with so pi PI

00:16:55,570 --> 00:17:01,300
is 15 years old it has pretty much no

00:16:58,180 --> 00:17:02,410
tests doesn't use a modern framework to

00:17:01,300 --> 00:17:04,530
run it locally in development you have

00:17:02,410 --> 00:17:08,140
to go comment out large chunks of it

00:17:04,530 --> 00:17:11,110
what should we do well we could rewrite

00:17:08,140 --> 00:17:13,570
PI API from scratch normally if you ask

00:17:11,110 --> 00:17:15,310
me if a full stack rewrite of a core

00:17:13,570 --> 00:17:17,440
piece of infrastructure depended on by

00:17:15,310 --> 00:17:20,800
hundreds of thousands of users would

00:17:17,440 --> 00:17:23,080
ever succeed I would tell you no but I

00:17:20,800 --> 00:17:25,890
don't know if anyone noticed but this

00:17:23,080 --> 00:17:25,890
actually happened

00:17:32,080 --> 00:17:37,220
Thanks this project is also called

00:17:35,149 --> 00:17:41,090
warehouse as in a place to put packages

00:17:37,220 --> 00:17:42,890
the project started more or less in 2011

00:17:41,090 --> 00:17:45,529
and had a number of goals including

00:17:42,890 --> 00:17:47,510
HTTPS Everywhere including best

00:17:45,529 --> 00:17:50,690
practices a modern web framework and

00:17:47,510 --> 00:17:53,390
tests and it officially became pi PI

00:17:50,690 --> 00:17:55,309
last month I have to say this was a

00:17:53,390 --> 00:17:57,049
tremendous undertaking and it absolutely

00:17:55,309 --> 00:17:58,549
would not have been possible to have

00:17:57,049 --> 00:18:00,679
been completed in a reasonable amount of

00:17:58,549 --> 00:18:09,440
time without support from Mozilla so

00:18:00,679 --> 00:18:11,450
thanks to Mozilla alright the end so

00:18:09,440 --> 00:18:13,340
that's it we launched pi pi we solved

00:18:11,450 --> 00:18:16,789
all the problems good job everyone we're

00:18:13,340 --> 00:18:18,440
done no no we still have problems but

00:18:16,789 --> 00:18:20,570
this is the nature of software right

00:18:18,440 --> 00:18:22,399
once we build the new shiny thing we

00:18:20,570 --> 00:18:24,019
start to realize what else it can do

00:18:22,399 --> 00:18:27,080
or what we miss or what the need

00:18:24,019 --> 00:18:28,669
actually is so one problem that we still

00:18:27,080 --> 00:18:30,769
have packaging is kind of hard

00:18:28,669 --> 00:18:32,840
especially if you are new to it all

00:18:30,769 --> 00:18:35,029
there are a lot of different tools and

00:18:32,840 --> 00:18:39,049
things you've never heard of until maybe

00:18:35,029 --> 00:18:41,120
today one solution to this is the Python

00:18:39,049 --> 00:18:42,980
packaging guide it is a really carefully

00:18:41,120 --> 00:18:44,659
crafted and well-maintained guide to

00:18:42,980 --> 00:18:46,610
Python packaging you can get it at

00:18:44,659 --> 00:18:48,200
packaging python.org and it will help

00:18:46,610 --> 00:18:50,809
you do almost everything you want to do

00:18:48,200 --> 00:18:52,370
in python packaging another solution is

00:18:50,809 --> 00:18:54,529
sample project this is a skeleton

00:18:52,370 --> 00:18:56,179
project for your new Python package and

00:18:54,529 --> 00:19:00,019
it represents all of the best practices

00:18:56,179 --> 00:19:02,510
for packaging another solution is just

00:19:00,019 --> 00:19:04,279
general care and maintenance in general

00:19:02,510 --> 00:19:07,279
I think these more modern projects are

00:19:04,279 --> 00:19:09,649
more well specified and thus easier to

00:19:07,279 --> 00:19:11,240
maintain in addition there's a serious

00:19:09,649 --> 00:19:13,460
focus on making these accessible for

00:19:11,240 --> 00:19:16,190
newcomers too and in fact I would say

00:19:13,460 --> 00:19:19,039
that we have a new problem now packaging

00:19:16,190 --> 00:19:21,500
is a little too easy I could have called

00:19:19,039 --> 00:19:23,990
this talk Python packaging so easy a

00:19:21,500 --> 00:19:25,370
spammer could do it because having

00:19:23,990 --> 00:19:27,080
packaging be hard actually has some

00:19:25,370 --> 00:19:29,059
unintentional benefits namely that the

00:19:27,080 --> 00:19:30,500
folks who aren't truly invested in it

00:19:29,059 --> 00:19:32,750
can't figure out how to use it

00:19:30,500 --> 00:19:34,220
unfortunately this also excludes a lot

00:19:32,750 --> 00:19:34,880
of people that don't have malicious

00:19:34,220 --> 00:19:36,559
intent

00:19:34,880 --> 00:19:39,169
so while lowering that barrier is a

00:19:36,559 --> 00:19:40,730
priority it introduces new problems like

00:19:39,169 --> 00:19:43,460
spam on pipe I typo

00:19:40,730 --> 00:19:44,620
squatting etc there's another problem

00:19:43,460 --> 00:19:46,429
that's kind of common these days

00:19:44,620 --> 00:19:48,380
sometimes I need more than Python

00:19:46,429 --> 00:19:50,450
sometimes I don't even have Python yet

00:19:48,380 --> 00:19:52,940
maybe you need to do stuff with Python

00:19:50,450 --> 00:19:54,650
and R or LLVM or a bunch of other things

00:19:52,940 --> 00:19:57,020
maybe you don't even have Python

00:19:54,650 --> 00:19:59,000
installed on your system these things

00:19:57,020 --> 00:20:00,830
are kind of outside the scope of the

00:19:59,000 --> 00:20:02,720
Python packaging authority which kind of

00:20:00,830 --> 00:20:04,940
assume that either a you already have

00:20:02,720 --> 00:20:09,410
Python or B that you really just want to

00:20:04,940 --> 00:20:11,720
do Python with some C mixed in solution

00:20:09,410 --> 00:20:13,669
to this is Conda and this is definitely

00:20:11,720 --> 00:20:15,559
within the scope of anaconda and Conda

00:20:13,669 --> 00:20:18,080
which is provided by the Anaconda

00:20:15,559 --> 00:20:20,059
company it's a Python agnostic packaging

00:20:18,080 --> 00:20:22,730
tool and installer and it satisfies most

00:20:20,059 --> 00:20:24,559
of those use cases another problem we

00:20:22,730 --> 00:20:27,140
have right now reproducible environment

00:20:24,559 --> 00:20:29,000
reproducible environments requirement

00:20:27,140 --> 00:20:30,860
text was a great step towards creating

00:20:29,000 --> 00:20:33,200
reproducible environments and we can use

00:20:30,860 --> 00:20:34,940
it to specify exact versions hashes of

00:20:33,200 --> 00:20:36,860
any dependency for pip to install

00:20:34,940 --> 00:20:38,510
however creating and maintaining this

00:20:36,860 --> 00:20:40,250
file can be kind of challenging often we

00:20:38,510 --> 00:20:42,590
have multiple requirements files for

00:20:40,250 --> 00:20:46,010
deployment development testing linting

00:20:42,590 --> 00:20:48,320
documentation etc solution to this pip

00:20:46,010 --> 00:20:50,000
file and pip file dot lock a single

00:20:48,320 --> 00:20:51,710
human editable file and a single

00:20:50,000 --> 00:20:53,690
generated file with fully deterministic

00:20:51,710 --> 00:20:55,610
dependencies and this can be shared

00:20:53,690 --> 00:20:57,710
across multiple dependency installing

00:20:55,610 --> 00:21:00,260
tools like pip and this might feel

00:20:57,710 --> 00:21:02,030
familiar if you come from Ruby or NPM

00:21:00,260 --> 00:21:03,530
ecosystem where you have gem file that

00:21:02,030 --> 00:21:06,890
lock and yarn dot lock it's kind of a

00:21:03,530 --> 00:21:08,990
similar idea another problem that we

00:21:06,890 --> 00:21:11,270
have right now is that setup top high

00:21:08,990 --> 00:21:12,919
execute arbitrary code and this is

00:21:11,270 --> 00:21:14,990
because setup top I like I said it's

00:21:12,919 --> 00:21:16,970
just a Python script there's no way to

00:21:14,990 --> 00:21:19,280
truly predict what dependencies a

00:21:16,970 --> 00:21:21,320
package will have without executing it

00:21:19,280 --> 00:21:22,940
I see questions like this so often that

00:21:21,320 --> 00:21:25,220
I wrote a blog post about it and the

00:21:22,940 --> 00:21:26,780
answer is the blog post is called why

00:21:25,220 --> 00:21:28,040
papaya doesn't know your project's

00:21:26,780 --> 00:21:30,230
dependencies and the answer is you can

00:21:28,040 --> 00:21:32,480
do anything you want in a set up top pie

00:21:30,230 --> 00:21:34,610
this makes it really hard to reason

00:21:32,480 --> 00:21:36,020
about source distributions and there's

00:21:34,610 --> 00:21:38,000
an additional problem with setup dot pi

00:21:36,020 --> 00:21:40,340
as well and I'll call this problem the

00:21:38,000 --> 00:21:42,590
dist utils setup tools dance so

00:21:40,340 --> 00:21:44,720
extending and maintaining them is really

00:21:42,590 --> 00:21:46,760
difficult this utils because it's a core

00:21:44,720 --> 00:21:48,950
Python library Commons with your Python

00:21:46,760 --> 00:21:51,200
and setup tools because it's old and

00:21:48,950 --> 00:21:52,850
kind of a big ball of mud right now so

00:21:51,200 --> 00:21:54,380
while there do exist various solutions

00:21:52,850 --> 00:21:56,600
to the about problems they're really

00:21:54,380 --> 00:21:58,820
hard to implement and even harder to

00:21:56,600 --> 00:22:01,310
maintain and also it's really difficult

00:21:58,820 --> 00:22:02,810
for anyone to use anything else because

00:22:01,310 --> 00:22:04,820
they are essentially the de facto

00:22:02,810 --> 00:22:06,950
standard interface for doing Python

00:22:04,820 --> 00:22:09,770
packaging changing it is kind of like a

00:22:06,950 --> 00:22:12,320
chicken and egg problem solution this

00:22:09,770 --> 00:22:14,480
problem is pet 5:17 at 5:18 they're

00:22:12,320 --> 00:22:16,370
defined where they define a build system

00:22:14,480 --> 00:22:18,950
independent format for source trees and

00:22:16,370 --> 00:22:20,750
a way to specify min minimum build

00:22:18,950 --> 00:22:22,670
system requirements for Python projects

00:22:20,750 --> 00:22:25,610
this is going to manifest itself as a

00:22:22,670 --> 00:22:27,590
new file called PI project Tamil this is

00:22:25,610 --> 00:22:30,140
a way to step away from dis new chills

00:22:27,590 --> 00:22:32,750
and septal entirely and allow users to

00:22:30,140 --> 00:22:34,310
specify their own build requirements for

00:22:32,750 --> 00:22:36,200
their project which can be installed

00:22:34,310 --> 00:22:37,910
prior to building it could be set up

00:22:36,200 --> 00:22:42,140
tools but it could really be something

00:22:37,910 --> 00:22:44,180
else entirely as well that sounds like a

00:22:42,140 --> 00:22:48,020
lot of problems you might say and also

00:22:44,180 --> 00:22:49,520
consider that unlike Conda or NPM and

00:22:48,020 --> 00:22:50,960
with only a few very small exceptions

00:22:49,520 --> 00:22:53,570
Python packaging is an entirely

00:22:50,960 --> 00:22:56,990
volunteer-driven team so maybe you'd

00:22:53,570 --> 00:22:58,460
like to help both pi PI and pip have

00:22:56,990 --> 00:22:59,900
good first issue labels and issue

00:22:58,460 --> 00:23:03,290
trackers so if you want to become a

00:22:59,900 --> 00:23:04,970
contributor today you can do that if you

00:23:03,290 --> 00:23:07,100
want to become a contributor like next

00:23:04,970 --> 00:23:08,840
week we're gonna be sprinting on

00:23:07,100 --> 00:23:11,330
packaging things Monday through Thursday

00:23:08,840 --> 00:23:12,950
I will be there I have a whole list of

00:23:11,330 --> 00:23:15,050
things that just about anybody can work

00:23:12,950 --> 00:23:16,820
on and I'm going to be really happy to

00:23:15,050 --> 00:23:19,940
help anyone get set up and to make a

00:23:16,820 --> 00:23:21,620
contribution we're also holding a

00:23:19,940 --> 00:23:24,740
packaging birds of feather immediately

00:23:21,620 --> 00:23:26,210
after this talk in room 19 several

00:23:24,740 --> 00:23:27,320
maintainer x' of various packaging

00:23:26,210 --> 00:23:28,940
projects will be in attendance we're

00:23:27,320 --> 00:23:31,100
going to talk about general direction

00:23:28,940 --> 00:23:33,950
and future of packaging and it's open to

00:23:31,100 --> 00:23:37,820
anyone I've told you how to help us

00:23:33,950 --> 00:23:39,110
here's how we can help you if you're

00:23:37,820 --> 00:23:41,060
having problems you can do any of the

00:23:39,110 --> 00:23:43,640
following things like I said you can go

00:23:41,060 --> 00:23:45,290
to packaging Python org you could go to

00:23:43,640 --> 00:23:46,730
an issue tracker for a specific tool

00:23:45,290 --> 00:23:50,000
that you having problems with a file an

00:23:46,730 --> 00:23:53,390
issue you could go to IRC to the pound

00:23:50,000 --> 00:23:55,760
pypy a channel on freenode to chat with

00:23:53,390 --> 00:23:56,780
any of maintainer x' directly or if

00:23:55,760 --> 00:23:58,370
you're having sort of like a big

00:23:56,780 --> 00:24:01,310
holistic problem with packaging you can

00:23:58,370 --> 00:24:03,050
go to the packaging problems repo and

00:24:01,310 --> 00:24:04,760
file an issue there and these are sort

00:24:03,050 --> 00:24:06,740
of an order from how quickly you need

00:24:04,760 --> 00:24:09,610
the problem solve from very quick - it

00:24:06,740 --> 00:24:09,610
might take a couple years

00:24:10,870 --> 00:24:14,810
the other thing you can do is you can

00:24:12,770 --> 00:24:18,620
talk to me I'm really happy to help so

00:24:14,810 --> 00:24:22,490
I'm on github as di Twitter di codes and

00:24:18,620 --> 00:24:24,680
email is there so to summarize Python

00:24:22,490 --> 00:24:27,320
packaging isn't bad but there are always

00:24:24,680 --> 00:24:29,510
going to be problems to solve we've made

00:24:27,320 --> 00:24:31,940
really gradual changes over a long

00:24:29,510 --> 00:24:33,940
period of time and each change has been

00:24:31,940 --> 00:24:36,200
a response to an evolving need

00:24:33,940 --> 00:24:38,390
comparatively it used to be really bad

00:24:36,200 --> 00:24:40,700
and we might have forgotten or just

00:24:38,390 --> 00:24:42,500
never known how hard it used to be so

00:24:40,700 --> 00:24:44,900
the next time that you are frustrated

00:24:42,500 --> 00:24:45,800
with python packaging imagine a world

00:24:44,900 --> 00:24:48,380
with no pip

00:24:45,800 --> 00:24:52,060
nope ipi and consider making a pull

00:24:48,380 --> 00:24:52,060
request thanks

00:24:58,650 --> 00:25:02,440
Thank You Dustin we've got a few minutes

00:25:01,150 --> 00:25:03,940
for questions now so please come to the

00:25:02,440 --> 00:25:05,590
microphone actually I'd like to I'll

00:25:03,940 --> 00:25:06,700
skip questions I'll be at the packaging

00:25:05,590 --> 00:25:08,380
bath if anyone's talked to me and

00:25:06,700 --> 00:25:11,430
immediately down here afterwards as well

00:25:08,380 --> 00:25:11,430
thanks everyone

00:25:12,150 --> 00:25:15,799

YouTube URL: https://www.youtube.com/watch?v=AQsZsgJ30AE


