Title: Kenneth Reitz - Pipenv: The Future of Python Dependency Management - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Kenneth Reitz

This talk is about the history of Python packaging, the tools that have been historically available for application deployment, the problems/constraints presented by them, and presents a holistic solution to many of these problems: Pipenv.

A live demo of the tool will be presented, as well as a Q&A session.

Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:00,000 --> 00:00:04,259
all right thank you everybody for coming

00:00:01,770 --> 00:00:08,189
to the session how many of you use

00:00:04,259 --> 00:00:15,240
requests yes Kenneth that must really

00:00:08,189 --> 00:00:17,010
make you happy I have to say Kenneth is

00:00:15,240 --> 00:00:18,090
one of my Python heroes and finally the

00:00:17,010 --> 00:00:19,949
reason I wanted to chair this session

00:00:18,090 --> 00:00:21,270
because is because I'll get to meet him

00:00:19,949 --> 00:00:23,340
in person

00:00:21,270 --> 00:00:24,660
he's a Python here for me because he

00:00:23,340 --> 00:00:26,460
writes api's that are designed for

00:00:24,660 --> 00:00:30,480
humans unlike most of the scientific

00:00:26,460 --> 00:00:31,859
computing community alright so and as we

00:00:30,480 --> 00:00:33,360
all know and I'm part of the scientific

00:00:31,859 --> 00:00:36,719
computing community so I'm allowed to

00:00:33,360 --> 00:00:39,300
say that he's the creative requests and

00:00:36,719 --> 00:00:41,550
as we saw a lot of people use requests

00:00:39,300 --> 00:00:43,410
it's a very popular package and he's

00:00:41,550 --> 00:00:45,600
here to talk about depend which is

00:00:43,410 --> 00:00:48,530
another tool designed for humans so with

00:00:45,600 --> 00:00:53,740
that Ken please take it away

00:00:48,530 --> 00:00:53,740
[Applause]

00:00:54,340 --> 00:00:59,900
hi everybody welcome to Pike on day 2 I

00:00:57,739 --> 00:01:03,379
think it is is everyone having a good

00:00:59,900 --> 00:01:05,660
time so far all right I want to say is

00:01:03,379 --> 00:01:07,190
special things to Ernest W Durbin for

00:01:05,660 --> 00:01:08,960
organizing the event I think he's done a

00:01:07,190 --> 00:01:11,869
great job here in Cleveland and I'm

00:01:08,960 --> 00:01:16,250
looking forward to next year as well so

00:01:11,869 --> 00:01:19,400
this is the future of Python dependency

00:01:16,250 --> 00:01:20,840
management so hello my name is Kenneth

00:01:19,400 --> 00:01:22,910
Wright's if you like you can follow me

00:01:20,840 --> 00:01:26,360
on twitter at at kenneth writes every

00:01:22,910 --> 00:01:27,920
follow is appreciated as always I work

00:01:26,360 --> 00:01:31,039
for digital ocean this is a new thing

00:01:27,920 --> 00:01:33,770
for me I was working for Heroku but I

00:01:31,039 --> 00:01:37,100
just switched jobs about five days ago I

00:01:33,770 --> 00:01:39,170
wanted to uh I wanted to make sure I was

00:01:37,100 --> 00:01:41,509
representing my new company at PyCon so

00:01:39,170 --> 00:01:43,310
I signed the paperwork and went straight

00:01:41,509 --> 00:01:45,110
here so I'm still going through

00:01:43,310 --> 00:01:47,930
onboarding and everything so I can't

00:01:45,110 --> 00:01:50,990
speak officially on anything yet but I'm

00:01:47,930 --> 00:01:52,340
very excited to join the team and it's I

00:01:50,990 --> 00:01:54,500
think it's the world's most approachable

00:01:52,340 --> 00:01:56,030
infrastructure as a service so if you

00:01:54,500 --> 00:01:57,380
have any questions about digitalocean or

00:01:56,030 --> 00:01:59,000
if you think there's any opportunities

00:01:57,380 --> 00:02:00,350
for us to collaborate or anything you

00:01:59,000 --> 00:02:04,220
want to know you can come ask me about

00:02:00,350 --> 00:02:06,740
that later I'm also a board member of

00:02:04,220 --> 00:02:07,939
the Python Software Foundation I'll be

00:02:06,740 --> 00:02:11,209
giving the lightning talk about that

00:02:07,939 --> 00:02:13,250
later today but the Python Software

00:02:11,209 --> 00:02:15,110
Foundation is a member is an

00:02:13,250 --> 00:02:17,120
organization that exists you protect the

00:02:15,110 --> 00:02:20,410
pipe the intellectual property of Python

00:02:17,120 --> 00:02:22,670
as well as run this event effectively

00:02:20,410 --> 00:02:24,680
that's where most of the revenue for the

00:02:22,670 --> 00:02:26,780
organization comes from is from Python

00:02:24,680 --> 00:02:29,299
and that's one of the reasons why Khan

00:02:26,780 --> 00:02:31,790
exists and it's a wonderful organization

00:02:29,299 --> 00:02:33,920
and anyone here everyone in the room I

00:02:31,790 --> 00:02:36,769
assume is invested in Python because

00:02:33,920 --> 00:02:38,390
you're at PyCon so I encourage everyone

00:02:36,769 --> 00:02:41,329
who isn't already a member to become a

00:02:38,390 --> 00:02:44,060
member it's free it's also always

00:02:41,329 --> 00:02:45,530
donations are always welcome but you can

00:02:44,060 --> 00:02:46,820
go and sign up and become a member and

00:02:45,530 --> 00:02:48,560
then if you want you can become a voting

00:02:46,820 --> 00:02:50,959
or active member so you can help the

00:02:48,560 --> 00:02:54,170
vote help steer in the future of the

00:02:50,959 --> 00:02:57,680
language with board decisions and stuff

00:02:54,170 --> 00:02:59,360
like that so if you know who I am it's

00:02:57,680 --> 00:03:02,299
probably from the request library which

00:02:59,360 --> 00:03:05,750
is HTTP for humans it looks like this

00:03:02,299 --> 00:03:07,160
and it allows you to make HTTP requests

00:03:05,750 --> 00:03:09,680
very easily on the Internet

00:03:07,160 --> 00:03:11,180
with Python before the slavery existed

00:03:09,680 --> 00:03:13,910
it was very difficult to do this because

00:03:11,180 --> 00:03:17,920
there was evil it too and other tools

00:03:13,910 --> 00:03:21,260
that were not as friendly I would say

00:03:17,920 --> 00:03:22,670
and this has been very popular and I'm

00:03:21,260 --> 00:03:25,370
very thankful for the community for

00:03:22,670 --> 00:03:29,660
being so embracive of this project it's

00:03:25,370 --> 00:03:32,030
very humbling some other projects are on

00:03:29,660 --> 00:03:35,360
github if you maybe recognize me from

00:03:32,030 --> 00:03:38,180
some of these OSX GCC installer is

00:03:35,360 --> 00:03:42,020
responsible for me now it's called Xcode

00:03:38,180 --> 00:03:44,600
installed - debt and Xcode select - -

00:03:42,020 --> 00:03:46,370
install it lets you install GCC on your

00:03:44,600 --> 00:03:50,120
Mac without installing the five six

00:03:46,370 --> 00:03:53,330
gigabyte Xcode that's because of my

00:03:50,120 --> 00:03:55,900
project I was XGC installer and I have a

00:03:53,330 --> 00:03:58,970
bunch of other stuff my records tablet

00:03:55,900 --> 00:04:00,380
etc and the import this podcast but

00:03:58,970 --> 00:04:02,570
anyway that's enough about me

00:04:00,380 --> 00:04:06,080
I'm here to talk about packaging the

00:04:02,570 --> 00:04:12,050
Python packaging so who here uses Python

00:04:06,080 --> 00:04:14,930
packaging so who here doesn't use Python

00:04:12,050 --> 00:04:18,290
packaging let's do that instead one

00:04:14,930 --> 00:04:19,670
person two points hmm so python

00:04:18,290 --> 00:04:23,030
packaging affects almost every single

00:04:19,670 --> 00:04:24,169
person who uses Python and it has a bit

00:04:23,030 --> 00:04:26,600
of an interesting history cuz people

00:04:24,169 --> 00:04:28,970
have come to Python at different periods

00:04:26,600 --> 00:04:32,750
of time I've been using Python since

00:04:28,970 --> 00:04:34,550
about 2007 and so I've got which is not

00:04:32,750 --> 00:04:36,260
you know I know people who have been

00:04:34,550 --> 00:04:38,570
doing it for much much longer so that's

00:04:36,260 --> 00:04:41,540
not a respectable tenure of Python but

00:04:38,570 --> 00:04:43,400
compared to some people it is so I have

00:04:41,540 --> 00:04:46,300
some glimpses into the history of

00:04:43,400 --> 00:04:49,310
packaging I like to share my perspective

00:04:46,300 --> 00:04:51,260
on the history this is there's some

00:04:49,310 --> 00:04:52,850
things that might be a little unclear

00:04:51,260 --> 00:04:54,470
about the current state of things and

00:04:52,850 --> 00:04:57,530
why things are the way they are and how

00:04:54,470 --> 00:05:01,160
much progress we've actually made so in

00:04:57,530 --> 00:05:02,810
the past like when I started writing

00:05:01,160 --> 00:05:04,460
Python if you wanted to install

00:05:02,810 --> 00:05:06,590
something what you would do is you would

00:05:04,460 --> 00:05:08,660
download this like tar ball effectively

00:05:06,590 --> 00:05:10,520
from the internet and then you would

00:05:08,660 --> 00:05:13,310
unzip it and then you would run set up

00:05:10,520 --> 00:05:15,140
top high install into your site packages

00:05:13,310 --> 00:05:17,690
directory it would get installed and

00:05:15,140 --> 00:05:19,220
this is the de-facto way to install

00:05:17,690 --> 00:05:21,020
Python package

00:05:19,220 --> 00:05:23,270
some people would actually just take

00:05:21,020 --> 00:05:25,850
unzip it and drag it into their site

00:05:23,270 --> 00:05:27,050
packages folder that was kind of the way

00:05:25,850 --> 00:05:29,480
that you would manage your Python

00:05:27,050 --> 00:05:32,690
dependencies and I was the way it used

00:05:29,480 --> 00:05:36,260
to be there were some problems with this

00:05:32,690 --> 00:05:38,600
approach obviously the cheese shop I may

00:05:36,260 --> 00:05:42,290
refer to is known as is a nickname of

00:05:38,600 --> 00:05:46,430
the Python package index and which is

00:05:42,290 --> 00:05:48,860
you know pi pi org now and it is merely

00:05:46,430 --> 00:05:51,800
it was merely an index of packages and

00:05:48,860 --> 00:05:54,350
not a soul package host so right now if

00:05:51,800 --> 00:05:57,260
you go to register a package on pi pi

00:05:54,350 --> 00:05:59,720
org you have to upload files with that

00:05:57,260 --> 00:06:00,920
like you can't say the files live on

00:05:59,720 --> 00:06:04,310
this other server that I'm hosting

00:06:00,920 --> 00:06:05,780
somewhere else so before you could have

00:06:04,310 --> 00:06:07,670
registered packages and say oh they're

00:06:05,780 --> 00:06:11,210
at this website and this website in this

00:06:07,670 --> 00:06:14,450
website it was just an index so that was

00:06:11,210 --> 00:06:16,960
problem a so the practices were often

00:06:14,450 --> 00:06:19,550
hosted elsewhere if it was running on

00:06:16,960 --> 00:06:21,620
the server which served the entire

00:06:19,550 --> 00:06:25,060
Python community was running on a single

00:06:21,620 --> 00:06:28,070
box in Sweden which was very problematic

00:06:25,060 --> 00:06:32,600
it was just this one little box running

00:06:28,070 --> 00:06:33,950
in Sweden but its usage was a fraction

00:06:32,600 --> 00:06:36,920
of what it is today so that wasn't

00:06:33,950 --> 00:06:40,490
really that big of a problem it worked

00:06:36,920 --> 00:06:42,080
and everyone was kind of happy more

00:06:40,490 --> 00:06:44,210
obvious problems is that this

00:06:42,080 --> 00:06:46,660
installation system was a very manual

00:06:44,210 --> 00:06:49,520
process and was not good for automation

00:06:46,660 --> 00:06:52,910
he had globally installed packages which

00:06:49,520 --> 00:06:54,860
were impossible to have two versions of

00:06:52,910 --> 00:06:57,350
the same library installed which we

00:06:54,860 --> 00:07:00,800
still have today obviously you can't

00:06:57,350 --> 00:07:02,600
have if you install i'm not i'm not

00:07:00,800 --> 00:07:03,950
using historically relevant things but

00:07:02,600 --> 00:07:05,930
if you were to install flask one no you

00:07:03,950 --> 00:07:08,810
can't install flask o9 in the same

00:07:05,930 --> 00:07:11,360
Python installation for example so if

00:07:08,810 --> 00:07:13,070
you have only have a global Python

00:07:11,360 --> 00:07:14,810
installation you couldn't work on two

00:07:13,070 --> 00:07:18,380
projects that have conflicting

00:07:14,810 --> 00:07:21,230
dependencies so people and it's just a

00:07:18,380 --> 00:07:23,810
poor user experience overall so the next

00:07:21,230 --> 00:07:25,070
iteration of this is known as easy

00:07:23,810 --> 00:07:26,930
install it was something that was very

00:07:25,070 --> 00:07:29,000
popular for a long time it made things a

00:07:26,930 --> 00:07:30,710
lot easier you would just type easy

00:07:29,000 --> 00:07:32,240
install space maybe

00:07:30,710 --> 00:07:34,460
package and it would go and grab it from

00:07:32,240 --> 00:07:36,560
the cheese shop and install it into your

00:07:34,460 --> 00:07:40,340
system which is fantastic right it's

00:07:36,560 --> 00:07:43,820
much better this is much better

00:07:40,340 --> 00:07:45,260
experience for installation but the

00:07:43,820 --> 00:07:45,680
packages were installed from the cheese

00:07:45,260 --> 00:07:48,890
shop

00:07:45,680 --> 00:07:50,300
and it's much easier to automate there

00:07:48,890 --> 00:07:52,760
were some downsides to this there was no

00:07:50,300 --> 00:07:53,870
easy uninstall for example so you could

00:07:52,760 --> 00:07:56,810
just install things you couldn't

00:07:53,870 --> 00:08:00,710
uninstall things so that is kind of a

00:07:56,810 --> 00:08:02,120
slight step backwards you know I'll give

00:08:00,710 --> 00:08:07,570
you a painting of its today's world

00:08:02,120 --> 00:08:10,880
looks like so from about 2010 onward

00:08:07,570 --> 00:08:12,950
this tool came named pip became the de

00:08:10,880 --> 00:08:15,590
facto replacement for easy install for

00:08:12,950 --> 00:08:18,140
managing packages and virtual and became

00:08:15,590 --> 00:08:19,130
common practice and people started

00:08:18,140 --> 00:08:23,240
passing around these things called

00:08:19,130 --> 00:08:26,180
requirements not txt files virtual and

00:08:23,240 --> 00:08:27,920
what it is is it creates the isolated

00:08:26,180 --> 00:08:30,470
Python home for each package to be

00:08:27,920 --> 00:08:32,270
installed in one for every project you

00:08:30,470 --> 00:08:33,800
can create a virtual lamp you can

00:08:32,270 --> 00:08:35,360
install things into it and then another

00:08:33,800 --> 00:08:36,860
project you create another virtual lab

00:08:35,360 --> 00:08:38,330
and you can install different versions

00:08:36,860 --> 00:08:40,730
of dependencies and they're isolated

00:08:38,330 --> 00:08:43,430
from each other and it's wonderful and

00:08:40,730 --> 00:08:44,930
as time has evolved it doesn't include

00:08:43,430 --> 00:08:47,450
the global packages but do you fault

00:08:44,930 --> 00:08:48,860
anymore so you know you're very isolated

00:08:47,450 --> 00:08:50,660
Python environments you get very

00:08:48,860 --> 00:08:53,420
reproducible builds it's a wonderful

00:08:50,660 --> 00:08:55,550
tool it's a very powerful concept which

00:08:53,420 --> 00:08:57,460
allows for extreme flexibility and it's

00:08:55,550 --> 00:08:59,810
kind of unique in the Python community

00:08:57,460 --> 00:09:01,700
is a tool that for example does not

00:08:59,810 --> 00:09:03,950
exist in the Ruby community and one of

00:09:01,700 --> 00:09:06,110
the reasons for that is because you can

00:09:03,950 --> 00:09:07,970
have multiple versions of gems in the

00:09:06,110 --> 00:09:10,850
Ruby community installed at the same

00:09:07,970 --> 00:09:13,040
time on the same system in Ruby if they

00:09:10,850 --> 00:09:15,350
had a flask you could install class 100

00:09:13,040 --> 00:09:17,540
and o.9 into the same global

00:09:15,350 --> 00:09:20,600
installation at the same time so they

00:09:17,540 --> 00:09:22,910
don't need virtual amp and then the

00:09:20,600 --> 00:09:24,890
other tool we have is pip pip resolves

00:09:22,910 --> 00:09:26,900
downloads installs and uninstalls Python

00:09:24,890 --> 00:09:30,020
packages from packaged indexes or

00:09:26,900 --> 00:09:32,210
arbitrary URLs it utilizes a requirement

00:09:30,020 --> 00:09:34,220
set txt files and it manipulates virtual

00:09:32,210 --> 00:09:35,570
environments I assume everyone that

00:09:34,220 --> 00:09:37,790
raised their hand and said that they use

00:09:35,570 --> 00:09:39,440
Python packaging uses Pippin is familiar

00:09:37,790 --> 00:09:43,040
with it so I won't go into too deep

00:09:39,440 --> 00:09:46,250
detail there so this practice of using

00:09:43,040 --> 00:09:48,380
pipin virtual man continues today this

00:09:46,250 --> 00:09:51,560
is you know this is a practice that

00:09:48,380 --> 00:09:53,990
began in about 2010 and it's what we use

00:09:51,560 --> 00:09:55,670
today now if you look at other

00:09:53,990 --> 00:09:57,680
communities there's some interesting

00:09:55,670 --> 00:10:01,940
patterns that you've seen evolved over

00:09:57,680 --> 00:10:04,399
the years in nodejs they have yarn in

00:10:01,940 --> 00:10:06,339
npm in PHP they have composure and rust

00:10:04,399 --> 00:10:08,720
there's cargo and Ruby there's bundler

00:10:06,339 --> 00:10:10,959
all of these things share this very

00:10:08,720 --> 00:10:13,310
similar mechanism known as a lock file

00:10:10,959 --> 00:10:15,139
but if you look at python we use pip and

00:10:13,310 --> 00:10:17,029
virtual lab which first off is two

00:10:15,139 --> 00:10:20,329
things not one thing like all the other

00:10:17,029 --> 00:10:27,709
languages other than node they have to

00:10:20,329 --> 00:10:29,060
one things and there's no lock file now

00:10:27,709 --> 00:10:30,800
it could be argued that the requirements

00:10:29,060 --> 00:10:34,610
that txt is a lock file but we'll get

00:10:30,800 --> 00:10:38,620
into that in a moment but in Python

00:10:34,610 --> 00:10:41,240
there's no lock file so that's a problem

00:10:38,620 --> 00:10:42,860
there's problem with virtual and in the

00:10:41,240 --> 00:10:44,660
first place which is that it's difficult

00:10:42,860 --> 00:10:46,759
it's difficult to understand abstraction

00:10:44,660 --> 00:10:48,649
later it's a headache for newcomers

00:10:46,759 --> 00:10:50,600
which increases the barrier to entry to

00:10:48,649 --> 00:10:52,399
the language if you're very familiar

00:10:50,600 --> 00:10:53,779
with UNIX concepts it makes a lot of

00:10:52,399 --> 00:10:55,819
sense but if you're not familiar with

00:10:53,779 --> 00:10:58,279
UNIX concepts it's a little bit foreign

00:10:55,819 --> 00:10:59,750
and it really doesn't kind of hamper

00:10:58,279 --> 00:11:02,959
your ability to understand what's going

00:10:59,750 --> 00:11:05,389
on it's a very manual process easy to

00:11:02,959 --> 00:11:07,670
automate but unnatural to use manually

00:11:05,389 --> 00:11:10,399
and there are tools like virtual and

00:11:07,670 --> 00:11:12,440
wrapper which exists that makes this a

00:11:10,399 --> 00:11:15,589
much easier process to reuse on a day to

00:11:12,440 --> 00:11:19,550
day basis which is great requirements at

00:11:15,589 --> 00:11:21,560
txt is also has its problems the very

00:11:19,550 --> 00:11:23,480
common pattern is you do pip freeze and

00:11:21,560 --> 00:11:25,310
you pipe that into requirements that txt

00:11:23,480 --> 00:11:27,800
which gives you a flattened version of

00:11:25,310 --> 00:11:29,750
all your dependencies kind of like you

00:11:27,800 --> 00:11:33,019
know this is this is a reproducible

00:11:29,750 --> 00:11:37,220
version list of all my dependencies in

00:11:33,019 --> 00:11:39,079
my transient dependencies into my you

00:11:37,220 --> 00:11:41,689
know for my project that I'm working on

00:11:39,079 --> 00:11:44,329
but there's a simpie de Smith impedance

00:11:41,689 --> 00:11:45,649
mismatch between what a requirements

00:11:44,329 --> 00:11:47,439
file is because there's two different

00:11:45,649 --> 00:11:50,300
ways to declare requirements file

00:11:47,439 --> 00:11:52,550
there's what you want installed and what

00:11:50,300 --> 00:11:54,260
you need installed we'll get into that

00:11:52,550 --> 00:11:56,230
in a moment

00:11:54,260 --> 00:11:58,240
there are tools that exist today that

00:11:56,230 --> 00:12:01,590
make this easier like pip tools which I

00:11:58,240 --> 00:12:03,880
want to give a nice shout-out to but

00:12:01,590 --> 00:12:06,100
ideally a requirement slit cheeks to

00:12:03,880 --> 00:12:08,440
file is a completely pre flattened

00:12:06,100 --> 00:12:10,390
dependency tree which is required in

00:12:08,440 --> 00:12:12,340
order to establish deterministic builds

00:12:10,390 --> 00:12:16,930
that's what it in the ideal case should

00:12:12,340 --> 00:12:19,300
be so there's this is one way of doing

00:12:16,930 --> 00:12:22,120
the requirements at txt this is the

00:12:19,300 --> 00:12:25,540
ideal case for it if you look at it

00:12:22,120 --> 00:12:27,730
there is so this is a flask project

00:12:25,540 --> 00:12:29,740
flask has transient dependencies if

00:12:27,730 --> 00:12:32,760
you'd require flask it has dependencies

00:12:29,740 --> 00:12:35,710
itself like work cig it's dangerous

00:12:32,760 --> 00:12:37,900
Jinja two for example and they all have

00:12:35,710 --> 00:12:41,350
different versions so if you're two pip

00:12:37,900 --> 00:12:43,060
install flask and then run pip freeze to

00:12:41,350 --> 00:12:45,340
a requirements that txt file this is

00:12:43,060 --> 00:12:47,020
what the output looks like this is great

00:12:45,340 --> 00:12:48,640
because it's deterministic if you were

00:12:47,020 --> 00:12:50,890
to pip install this from fresh virtual

00:12:48,640 --> 00:12:52,900
environment it's all inclusive of

00:12:50,890 --> 00:12:54,160
transitive dependencies but it's a

00:12:52,900 --> 00:12:55,750
little difficult to know what's going on

00:12:54,160 --> 00:12:58,030
if you were to look at this in your

00:12:55,750 --> 00:13:01,150
source code repository on github or your

00:12:58,030 --> 00:13:03,250
coworker was a sentence to you which

00:13:01,150 --> 00:13:05,830
dependency is it that you actually want

00:13:03,250 --> 00:13:07,750
it's unclear like do you want it's

00:13:05,830 --> 00:13:09,400
dangerous is that what your your team

00:13:07,750 --> 00:13:11,550
needs or does your team need flasks

00:13:09,400 --> 00:13:15,100
which one are you actually depending on

00:13:11,550 --> 00:13:16,810
that's the problem so some teams solve

00:13:15,100 --> 00:13:19,890
this by just doing this because this

00:13:16,810 --> 00:13:22,660
works you can just do flask and

00:13:19,890 --> 00:13:24,250
everything else will get installed but

00:13:22,660 --> 00:13:27,670
unfortunately it'll result in the

00:13:24,250 --> 00:13:29,680
non-deterministic build it's much more

00:13:27,670 --> 00:13:31,800
human readable and understandable and it

00:13:29,680 --> 00:13:33,910
functions properly but it's

00:13:31,800 --> 00:13:35,500
non-deterministic which can cause build

00:13:33,910 --> 00:13:36,730
failures if any of those transitive

00:13:35,500 --> 00:13:38,170
dependencies update you'll get a

00:13:36,730 --> 00:13:41,230
different version of those dependencies

00:13:38,170 --> 00:13:42,670
and your african application could break

00:13:41,230 --> 00:13:45,220
it could be security vulnerabilities

00:13:42,670 --> 00:13:46,660
there's many implications of that so

00:13:45,220 --> 00:13:49,330
this is this impedance mismatch between

00:13:46,660 --> 00:13:50,890
what you want and what you need that is

00:13:49,330 --> 00:13:56,620
problematic with the requirements that

00:13:50,890 --> 00:13:57,910
txt format so this effectively so we you

00:13:56,620 --> 00:14:04,090
know this requirements format that we

00:13:57,910 --> 00:14:07,770
have is both a lock file and not a lock

00:14:04,090 --> 00:14:07,770
file depending on how you use it

00:14:08,280 --> 00:14:14,580
so let's just go with the assumption

00:14:11,890 --> 00:14:20,040
that Python has no lock file right now

00:14:14,580 --> 00:14:22,900
the solution is to give it a lock file

00:14:20,040 --> 00:14:25,090
so we already went over this the two

00:14:22,900 --> 00:14:30,040
types of dependencies what you want what

00:14:25,090 --> 00:14:31,300
you need so one solution of this is to

00:14:30,040 --> 00:14:32,950
have two different requirements files

00:14:31,300 --> 00:14:36,310
one with what you want and one with what

00:14:32,950 --> 00:14:38,740
you need so you have a one called

00:14:36,310 --> 00:14:41,580
requirements to freeze and you put in

00:14:38,740 --> 00:14:43,690
what you need in there like flask and

00:14:41,580 --> 00:14:45,730
then you have one called requirements

00:14:43,690 --> 00:14:47,740
that txt which is the result of hip

00:14:45,730 --> 00:14:49,450
freeze and this is a good solution to

00:14:47,740 --> 00:14:51,610
this problem that you can use

00:14:49,450 --> 00:14:53,500
standardized tools like pip you just all

00:14:51,610 --> 00:14:55,300
you need is pip to use to do this and

00:14:53,500 --> 00:14:58,060
this gives you the best of both worlds

00:14:55,300 --> 00:14:59,650
and this is a and there's also a tool

00:14:58,060 --> 00:15:01,390
called pip tools which does a very

00:14:59,650 --> 00:15:04,450
similar thing that is built all around

00:15:01,390 --> 00:15:06,820
this concept basically which I highly

00:15:04,450 --> 00:15:12,370
recommend using if you are not going to

00:15:06,820 --> 00:15:14,230
use what I recommend later so this is a

00:15:12,370 --> 00:15:15,820
great pattern and I think that this is a

00:15:14,230 --> 00:15:17,620
good solution for people that use pip

00:15:15,820 --> 00:15:20,980
and their build infrastructure to give

00:15:17,620 --> 00:15:23,500
you the best of both worlds but it's not

00:15:20,980 --> 00:15:25,270
a real solution the real solution is

00:15:23,500 --> 00:15:27,640
this new standard that's evolving and

00:15:25,270 --> 00:15:30,340
it's coming out of the pipe EIA called

00:15:27,640 --> 00:15:32,230
the PIP file the PIP file is a new

00:15:30,340 --> 00:15:35,140
standard replacing requirements sought

00:15:32,230 --> 00:15:37,360
txt in the future it's written in Tamil

00:15:35,140 --> 00:15:41,560
so it's easy to write and read manually

00:15:37,360 --> 00:15:43,780
and it features two groups so in other

00:15:41,560 --> 00:15:45,490
tools that you use in those other

00:15:43,780 --> 00:15:48,340
languages you can often have groups of

00:15:45,490 --> 00:15:50,950
dependencies you'll also see people have

00:15:48,340 --> 00:15:54,310
requirements - dev requirements - test

00:15:50,950 --> 00:15:58,240
requirements - production you know

00:15:54,310 --> 00:16:01,060
requirements - Oroku there these are a

00:15:58,240 --> 00:16:05,530
way of finagling groups into pip

00:16:01,060 --> 00:16:07,240
so the composer community however has

00:16:05,530 --> 00:16:10,300
gotten away with having just two groups

00:16:07,240 --> 00:16:13,600
and it's been a very successful project

00:16:10,300 --> 00:16:16,350
and doing so so the pit so pip file has

00:16:13,600 --> 00:16:19,810
room in the spec to support more groups

00:16:16,350 --> 00:16:20,310
but we are currently the implementation

00:16:19,810 --> 00:16:23,250
has

00:16:20,310 --> 00:16:24,810
groups packages and death packages which

00:16:23,250 --> 00:16:26,910
should encapsulate everything that you

00:16:24,810 --> 00:16:28,470
ever need anything that's not going into

00:16:26,910 --> 00:16:29,730
production goes into debt packages

00:16:28,470 --> 00:16:32,730
everything that is going into production

00:16:29,730 --> 00:16:35,040
goes into packages that's that should

00:16:32,730 --> 00:16:38,940
encapsulate every single use case you

00:16:35,040 --> 00:16:40,740
could ever possibly have ideally and pip

00:16:38,940 --> 00:16:45,060
file is something that is going to go

00:16:40,740 --> 00:16:48,870
into pip and once Donald stuff gets

00:16:45,060 --> 00:16:52,410
around to it basically which is

00:16:48,870 --> 00:16:54,810
wonderful it was his idea and I went

00:16:52,410 --> 00:16:58,020
through and I made a prototype of the

00:16:54,810 --> 00:17:00,690
spec in Python with some help from some

00:16:58,020 --> 00:17:02,310
contributors and there's a project

00:17:00,690 --> 00:17:04,860
called pip file you can use to parse

00:17:02,310 --> 00:17:06,959
these files and manipulate them and it

00:17:04,860 --> 00:17:10,290
exists and it's going to go into pip one

00:17:06,959 --> 00:17:12,470
day so that's that's the future of this

00:17:10,290 --> 00:17:15,420
is that pip file will replace

00:17:12,470 --> 00:17:21,329
requirements that gxg so here's what a

00:17:15,420 --> 00:17:23,220
pip file looks like it's tamil so at the

00:17:21,329 --> 00:17:25,380
top you see source and that specifies

00:17:23,220 --> 00:17:27,120
which package index you're using it has

00:17:25,380 --> 00:17:28,500
some parameters like verify as a settle

00:17:27,120 --> 00:17:32,370
equals true which should always be the

00:17:28,500 --> 00:17:35,130
case and you can give the index a name

00:17:32,370 --> 00:17:36,750
like PI P I and there's those two groups

00:17:35,130 --> 00:17:38,670
like I mentioned packages and dev

00:17:36,750 --> 00:17:42,360
packages so in this instance there's

00:17:38,670 --> 00:17:44,870
flask and I'm signing it to version star

00:17:42,360 --> 00:17:47,670
which means grab the latest version and

00:17:44,870 --> 00:17:49,679
F packages or really what it means is

00:17:47,670 --> 00:17:52,020
any version which defaults to the latest

00:17:49,679 --> 00:17:53,850
version and then def packages has PI

00:17:52,020 --> 00:17:54,960
tests so that's a good example of what

00:17:53,850 --> 00:17:57,090
you would put in those two different

00:17:54,960 --> 00:17:59,490
groups right you'd put like your test

00:17:57,090 --> 00:18:04,530
runner in dev and they put like flasks

00:17:59,490 --> 00:18:06,480
in that's default group and then this

00:18:04,530 --> 00:18:08,100
thing can be processed and result in

00:18:06,480 --> 00:18:10,710
something called a pip file that lock

00:18:08,100 --> 00:18:14,490
and this is really where the magic of

00:18:10,710 --> 00:18:16,860
PIP file comes into play pip file that

00:18:14,490 --> 00:18:19,500
lock is JSON so it's very easily machine

00:18:16,860 --> 00:18:23,940
possible which is great and statically

00:18:19,500 --> 00:18:26,130
now and not in analyzable it contains

00:18:23,940 --> 00:18:28,380
all transitive dependencies pinned with

00:18:26,130 --> 00:18:30,600
all acceptable hashes for each release

00:18:28,380 --> 00:18:32,790
and it has again two groups default and

00:18:30,600 --> 00:18:33,840
develop so it's probably a little hard

00:18:32,790 --> 00:18:36,690
to see it's a

00:18:33,840 --> 00:18:39,929
big file I haven't truncated but those

00:18:36,690 --> 00:18:41,789
you can see in yellow here there's click

00:18:39,929 --> 00:18:43,350
there's flask and there's the version

00:18:41,789 --> 00:18:46,080
numbers and then it includes all the

00:18:43,350 --> 00:18:47,700
hashes the 256 hashes of all the

00:18:46,080 --> 00:18:51,529
different wheels and source

00:18:47,700 --> 00:18:54,150
distributions of those valid

00:18:51,529 --> 00:18:56,789
dependencies which is great so we have

00:18:54,150 --> 00:18:58,409
what we need in here and what we want

00:18:56,789 --> 00:19:01,409
over here though these are two separate

00:18:58,409 --> 00:19:05,220
things and this generates this so that's

00:19:01,409 --> 00:19:06,690
the idea the problems the PIP file is

00:19:05,220 --> 00:19:08,429
that it's not yet integrated into pip

00:19:06,690 --> 00:19:10,950
which will likely take quite a long time

00:19:08,429 --> 00:19:13,140
due to resource constraints but you can

00:19:10,950 --> 00:19:15,390
use it today with pip them which is the

00:19:13,140 --> 00:19:17,820
GNU project that I am working on that I

00:19:15,390 --> 00:19:19,520
want to encourage everybody to check out

00:19:17,820 --> 00:19:22,620
and that's what this talk is about

00:19:19,520 --> 00:19:24,570
so the PIP M sales pitch it's is that as

00:19:22,620 --> 00:19:26,370
the officially recommended tool from

00:19:24,570 --> 00:19:29,190
Python org for managing your Python

00:19:26,370 --> 00:19:31,890
dependencies it lets you use pip file

00:19:29,190 --> 00:19:34,799
and pip file that lock today without

00:19:31,890 --> 00:19:36,600
waiting for pip to implement it it it

00:19:34,799 --> 00:19:38,970
automates the way virtual and completely

00:19:36,600 --> 00:19:40,950
from your workflow it does use virtual

00:19:38,970 --> 00:19:42,990
ends but it you don't have to interface

00:19:40,950 --> 00:19:45,480
with it directly it just does it for you

00:19:42,990 --> 00:19:47,370
it ensures deterministic builds

00:19:45,480 --> 00:19:49,049
including hash check verification upon

00:19:47,370 --> 00:19:50,789
installation and it gives you other

00:19:49,049 --> 00:19:53,730
great tools like pip and graph which I

00:19:50,789 --> 00:19:56,730
will demo for you shortly

00:19:53,730 --> 00:19:58,470
some great quotes Jana slide oh who's

00:19:56,730 --> 00:20:00,059
the former pip maintainer said that pip

00:19:58,470 --> 00:20:00,929
M does the porcelain I always wanted to

00:20:00,059 --> 00:20:02,940
build for pip

00:20:00,929 --> 00:20:05,070
it fits my brain and mostly replaces

00:20:02,940 --> 00:20:06,059
virtual and wrapper and manual calls for

00:20:05,070 --> 00:20:09,419
me use it

00:20:06,059 --> 00:20:11,520
and Justin miles Holmes a good friend of

00:20:09,419 --> 00:20:13,770
mine said pip am this finally an

00:20:11,520 --> 00:20:16,730
abstraction layer meant to engage the

00:20:13,770 --> 00:20:20,279
mind instead of merely the file system

00:20:16,730 --> 00:20:22,649
which I quite enjoy all right so it's

00:20:20,279 --> 00:20:24,270
time for a demo as well as QA so if you

00:20:22,649 --> 00:20:26,470
have any questions while I'm doing the

00:20:24,270 --> 00:20:28,330
demo please line up and

00:20:26,470 --> 00:20:31,120
I will do my best to answer them I want

00:20:28,330 --> 00:20:33,070
this to be an interactive demo so please

00:20:31,120 --> 00:20:36,580
come and ask any questions that you have

00:20:33,070 --> 00:20:42,120
as I'm going through and hopefully my

00:20:36,580 --> 00:20:47,409
SSH connection to my server will go well

00:20:42,120 --> 00:20:53,740
let's see here is that big enough for

00:20:47,409 --> 00:20:55,299
everybody to see yes excellent okay so I

00:20:53,740 --> 00:20:57,250
just created a new directory called demo

00:20:55,299 --> 00:20:59,530
and there's no files in this directory

00:20:57,250 --> 00:21:01,539
at all so what I'm gonna do

00:20:59,530 --> 00:21:06,549
I already installed it BAM I'm going to

00:21:01,539 --> 00:21:09,549
do Pippins install requests and what

00:21:06,549 --> 00:21:11,860
it'll do is it will create a virtual

00:21:09,549 --> 00:21:13,870
environment for me automatically and

00:21:11,860 --> 00:21:17,260
create a pip file for me automatically

00:21:13,870 --> 00:21:19,960
and then it'll install requests and

00:21:17,260 --> 00:21:24,100
it'll create the pip file that lock and

00:21:19,960 --> 00:21:25,720
it'll relock the file so now I look

00:21:24,100 --> 00:21:30,309
there's two files Pip file and put file

00:21:25,720 --> 00:21:32,590
that lock if I look at pip file you'll

00:21:30,309 --> 00:21:35,080
see the request is in there and it

00:21:32,590 --> 00:21:38,380
automatically specifies we support

00:21:35,080 --> 00:21:40,659
version specifiers so you can constrain

00:21:38,380 --> 00:21:43,360
your application to certain python

00:21:40,659 --> 00:21:48,100
version specifiers so this one requires

00:21:43,360 --> 00:21:49,960
python 3.6 if i want to install a dev

00:21:48,100 --> 00:21:53,770
package i could do like pip bamb install

00:21:49,960 --> 00:21:57,880
pi test - - dev and it will install pi

00:21:53,770 --> 00:22:00,070
test into the dev package directory and

00:21:57,880 --> 00:22:03,070
it'll relock automatically and as you

00:22:00,070 --> 00:22:04,990
note I don't have to edit this pip file

00:22:03,070 --> 00:22:08,890
by hand it's doing it for me that's an

00:22:04,990 --> 00:22:11,169
idea I got from composer so PI test is

00:22:08,890 --> 00:22:13,510
their request is there and this all

00:22:11,169 --> 00:22:15,850
works so I could run so I could remove

00:22:13,510 --> 00:22:18,190
the virtual environment with pit BAM - -

00:22:15,850 --> 00:22:20,470
RM which deletes the virtual lab

00:22:18,190 --> 00:22:22,780
completely and I just do pick them

00:22:20,470 --> 00:22:26,020
install and it'll rebuild it from

00:22:22,780 --> 00:22:30,059
scratch and it's using Python 362

00:22:26,020 --> 00:22:30,059
unfortunately should be 365

00:22:30,610 --> 00:22:38,500
I can specify the version of Python

00:22:35,340 --> 00:22:43,920
let's try that there we go

00:22:38,500 --> 00:22:46,210
365 Ariane I got that nice OPM install

00:22:43,920 --> 00:22:49,090
and it don't stall the dependencies and

00:22:46,210 --> 00:22:52,120
it actually runs pip concurrently so if

00:22:49,090 --> 00:22:53,559
you have 45 dependencies it will install

00:22:52,120 --> 00:22:55,179
them concurrently so you don't have to

00:22:53,559 --> 00:22:56,860
wait sequentially for what each one to

00:22:55,179 --> 00:23:00,090
install one at a time so it's much

00:22:56,860 --> 00:23:00,090
faster than using pip as well

00:23:00,429 --> 00:23:07,090
sources concurrently so multiple sources

00:23:03,730 --> 00:23:08,620
so you can have a organizational

00:23:07,090 --> 00:23:11,320
internal sort of pipe i running at

00:23:08,620 --> 00:23:13,179
delphi oh yes it does yeah you can

00:23:11,320 --> 00:23:15,220
specify if you go into the documentation

00:23:13,179 --> 00:23:17,110
there is a way for you to specify

00:23:15,220 --> 00:23:20,049
multiple sources and then also assign a

00:23:17,110 --> 00:23:33,700
specific package to come from a specific

00:23:20,049 --> 00:23:35,410
source in the in the tamil file yes you

00:23:33,700 --> 00:23:38,919
mentioned concurrent installation what

00:23:35,410 --> 00:23:42,250
about packages that about what packages

00:23:38,919 --> 00:23:46,059
that install differently based on what's

00:23:42,250 --> 00:23:48,549
installed before like tornado if you

00:23:46,059 --> 00:23:50,110
have site on it with optimized if you

00:23:48,549 --> 00:23:52,600
have you don't have site and it won't up

00:23:50,110 --> 00:23:54,790
to be that optimized so there you don't

00:23:52,600 --> 00:23:56,710
have site on yeah seitan is not really a

00:23:54,790 --> 00:23:59,890
dependency for tornado if you don't have

00:23:56,710 --> 00:24:02,200
it it's okay yes yeah so we don't have

00:23:59,890 --> 00:24:04,030
ordering built in all right you can turn

00:24:02,200 --> 00:24:05,950
off sequential you can add sequential

00:24:04,030 --> 00:24:08,140
flag to it and it will run them

00:24:05,950 --> 00:24:11,890
sequentially instead of doing them at

00:24:08,140 --> 00:24:14,320
the same time for that use case and so

00:24:11,890 --> 00:24:15,880
the next thing you do after you've done

00:24:14,320 --> 00:24:18,309
this is you run pip m shell and this

00:24:15,880 --> 00:24:21,880
will give the sub shell to you with that

00:24:18,309 --> 00:24:26,260
so if I run Python you know I got 365

00:24:21,880 --> 00:24:27,760
then I can import requests and request

00:24:26,260 --> 00:24:30,730
works just like you would expect and

00:24:27,760 --> 00:24:33,130
then you do exit and it exits out of

00:24:30,730 --> 00:24:36,100
that shell into my parent shell instead

00:24:33,130 --> 00:24:39,940
of deactivate but if you want you can do

00:24:36,100 --> 00:24:41,710
pit bandwidth - - the end and this will

00:24:39,940 --> 00:24:43,150
show you the path to the virtual end

00:24:41,710 --> 00:24:44,080
that it created and it's just a normal

00:24:43,150 --> 00:24:48,370
virtual environment

00:24:44,080 --> 00:24:50,230
so I could do source this slash bin

00:24:48,370 --> 00:24:51,580
slash activate you know and it's just

00:24:50,230 --> 00:24:55,330
like a normal virtual amp so there's no

00:24:51,580 --> 00:24:56,230
surprises there and I'll get to the next

00:24:55,330 --> 00:24:58,090
question in a moment

00:24:56,230 --> 00:24:59,830
I'll install something that has a bit

00:24:58,090 --> 00:25:04,540
more dependencies like Maya

00:24:59,830 --> 00:25:09,120
oops pip and install Maya we got some

00:25:04,540 --> 00:25:09,120
nice features in here like pick em graph

00:25:14,100 --> 00:25:19,420
which will give you a graph of your

00:25:16,450 --> 00:25:21,910
dependency tree so here's my top level

00:25:19,420 --> 00:25:23,980
dependencies here's requests here's its

00:25:21,910 --> 00:25:26,230
dependencies here's what's required

00:25:23,980 --> 00:25:28,750
here's what's installed it's quite nice

00:25:26,230 --> 00:25:30,700
as well I could do pip and install

00:25:28,750 --> 00:25:36,580
Django can someone give me the name of

00:25:30,700 --> 00:25:42,340
an insecure version of Django very

00:25:36,580 --> 00:25:44,200
insecure one for two alright so I'm

00:25:42,340 --> 00:25:46,380
installing Django equals equals one for

00:25:44,200 --> 00:25:46,380
two

00:25:49,510 --> 00:25:54,600
and the Wi-Fi isn't the fastest I

00:25:52,059 --> 00:25:54,600
apologize

00:25:59,830 --> 00:26:04,870
and I have a security vulnerability

00:26:03,070 --> 00:26:06,310
scanner built-in that's offered by PI up

00:26:04,870 --> 00:26:08,560
I have an account with them and it's

00:26:06,310 --> 00:26:11,560
embedded it the API keeps embedded

00:26:08,560 --> 00:26:13,870
inside so you can do pip and check and

00:26:11,560 --> 00:26:15,430
it checked the pipe 508 requirements

00:26:13,870 --> 00:26:18,160
which for those constraints it said

00:26:15,430 --> 00:26:21,250
Python 3 6 so it's checked and that was

00:26:18,160 --> 00:26:23,650
all good but here are some known

00:26:21,250 --> 00:26:24,850
vulnerabilities in my dependencies so

00:26:23,650 --> 00:26:27,310
that's a nice feature that we have as

00:26:24,850 --> 00:26:29,790
well so I install jank that invalid

00:26:27,310 --> 00:26:31,570
version of Jango and here are the

00:26:29,790 --> 00:26:34,660
vulnerabilities for that version of

00:26:31,570 --> 00:26:36,280
Jango so you can get some nice checking

00:26:34,660 --> 00:26:39,790
of your code and stuff like that build

00:26:36,280 --> 00:26:42,370
that into your CI if M graph is really

00:26:39,790 --> 00:26:45,310
useful in addition to install of course

00:26:42,370 --> 00:26:46,780
you can do uninstall you can do pimp

00:26:45,310 --> 00:26:50,980
uninstall requests not that you should

00:26:46,780 --> 00:26:53,620
ever do that and it'll remove it from

00:26:50,980 --> 00:26:57,940
the the file from the PIP file and

00:26:53,620 --> 00:27:01,720
relock automatically I could also for

00:26:57,940 --> 00:27:03,880
example edit the pip file alright I'm

00:27:01,720 --> 00:27:06,430
just gonna change it right so I just

00:27:03,880 --> 00:27:10,870
added some new lines and then I'm gonna

00:27:06,430 --> 00:27:12,700
do pip and install - - deploy so what

00:27:10,870 --> 00:27:15,220
this is what you would use in production

00:27:12,700 --> 00:27:17,710
if you're going to go deploy - like in a

00:27:15,220 --> 00:27:21,910
docker image or in production you would

00:27:17,710 --> 00:27:24,280
never want to ship you never want your

00:27:21,910 --> 00:27:28,450
lock file to be out of sync with your

00:27:24,280 --> 00:27:31,600
PIP file so this will work fine

00:27:28,450 --> 00:27:35,620
apparently and hang out maybe we cash

00:27:31,600 --> 00:27:37,780
the I think we do a hash on the values

00:27:35,620 --> 00:27:42,160
not on the content so I have to add like

00:27:37,780 --> 00:27:44,640
a comment or something that wasn't a

00:27:42,160 --> 00:27:44,640
real change

00:27:47,850 --> 00:27:50,649
yeah

00:27:49,029 --> 00:27:52,989
so you're PIP file was out of date it

00:27:50,649 --> 00:27:53,470
expected this hash and this hash is

00:27:52,989 --> 00:27:55,749
found

00:27:53,470 --> 00:27:57,879
so it'll abort the deploy automatically

00:27:55,749 --> 00:28:00,909
if you if you pushed a new PIP file and

00:27:57,879 --> 00:28:02,679
didn't lock of course you don't need to

00:28:00,909 --> 00:28:04,360
use that in development if that if you

00:28:02,679 --> 00:28:06,549
do it knows that it's out of date you

00:28:04,360 --> 00:28:07,649
know relock automatically for you so

00:28:06,549 --> 00:28:10,360
next question

00:28:07,649 --> 00:28:13,809
thank you for work on the requests and

00:28:10,360 --> 00:28:16,509
people my question is at early days of

00:28:13,809 --> 00:28:18,039
people virtual environment was created

00:28:16,509 --> 00:28:20,830
in the project and the default was

00:28:18,039 --> 00:28:23,499
changed to home directory yeah you tell

00:28:20,830 --> 00:28:28,269
us more about that decision yes so by

00:28:23,499 --> 00:28:30,429
default if you pip M - V F you'll notice

00:28:28,269 --> 00:28:32,559
that it's in the virtual lamp location

00:28:30,429 --> 00:28:34,419
is dot local share virtual labs that's

00:28:32,559 --> 00:28:36,190
different is slightly different based on

00:28:34,419 --> 00:28:38,049
your operating system it's in the you

00:28:36,190 --> 00:28:39,609
know a known good location for your

00:28:38,049 --> 00:28:41,679
operating system

00:28:39,609 --> 00:28:44,080
it may mix the behavior of virtual and

00:28:41,679 --> 00:28:46,269
wrapper effectively which I determined

00:28:44,080 --> 00:28:48,669
was the best best practice for the

00:28:46,269 --> 00:28:52,029
community if you prefer not to do that I

00:28:48,669 --> 00:28:56,529
could make dirt VM and then do Pippin

00:28:52,029 --> 00:28:59,379
install and it will use the dot VM

00:28:56,529 --> 00:29:01,659
directory for you automatically if

00:28:59,379 --> 00:29:03,039
there's one there or if you want there's

00:29:01,659 --> 00:29:05,289
an environment variable you can set

00:29:03,039 --> 00:29:08,529
which will always use that VM no matter

00:29:05,289 --> 00:29:15,759
what so it's called pip MVM vim project

00:29:08,529 --> 00:29:18,129
so that's a setting yeah yes my question

00:29:15,759 --> 00:29:19,989
is a follow-up to that is it possible to

00:29:18,129 --> 00:29:21,850
create a virtual environment in a

00:29:19,989 --> 00:29:29,409
directory that's not in the dot local

00:29:21,850 --> 00:29:31,989
and not called dot VG and V no but not

00:29:29,409 --> 00:29:36,659
currently ok now currently is ok thanks

00:29:31,989 --> 00:29:36,659
not with this - well actually yes so

00:29:37,400 --> 00:29:42,450
so I can make a virtual environment

00:29:39,540 --> 00:29:45,179
called test oops

00:29:42,450 --> 00:29:47,880
what is it virtual image so I've been

00:29:45,179 --> 00:29:49,650
using Pippin for so long so I'm making a

00:29:47,880 --> 00:29:57,590
virtual I'm called test which is using

00:29:49,650 --> 00:30:00,120
Python 2:7 I'm gonna source test Ben

00:29:57,590 --> 00:30:04,590
sighs it's taking a little long

00:30:00,120 --> 00:30:07,320
activate fish all right so I mean I

00:30:04,590 --> 00:30:10,730
activated my virtual ants right now I

00:30:07,320 --> 00:30:13,080
run to FM install you know and it will

00:30:10,730 --> 00:30:15,690
it knows that it's running in the

00:30:13,080 --> 00:30:17,309
virtual environment and it will install

00:30:15,690 --> 00:30:22,169
things into that in virtual environment

00:30:17,309 --> 00:30:24,390
for you perfect thanks yep and if you

00:30:22,169 --> 00:30:25,980
want to switch versions of Python let me

00:30:24,390 --> 00:30:32,309
I just messed everything up so let me

00:30:25,980 --> 00:30:34,559
recover from this so pip BAM - - three

00:30:32,309 --> 00:30:37,740
we'll create an environment with Python

00:30:34,559 --> 00:30:40,080
three automatically alpha see I mean

00:30:37,740 --> 00:30:41,640
that had to deactivate you gives you a

00:30:40,080 --> 00:30:42,960
nice friendly message PIFAN found itself

00:30:41,640 --> 00:30:44,160
running within a virtual environment so

00:30:42,960 --> 00:30:47,059
it automatically is that environment

00:30:44,160 --> 00:30:50,760
there's a setting to disable that

00:30:47,059 --> 00:30:53,340
deactivate so now that I'm out of my

00:30:50,760 --> 00:30:56,940
virtual environment I can do pit BAM -

00:30:53,340 --> 00:30:58,980
three and it'll remove that environment

00:30:56,940 --> 00:31:02,010
that I had and recreate one with Python

00:30:58,980 --> 00:31:05,700
three if I want to switch to - I just do

00:31:02,010 --> 00:31:09,570
Pippin - - - and it destroys it crazy

00:31:05,700 --> 00:31:12,450
with Python - so very simple and if you

00:31:09,570 --> 00:31:15,000
want you can do - - Python specify the

00:31:12,450 --> 00:31:16,470
path to any interpreter and it will use

00:31:15,000 --> 00:31:20,280
that Python interpreter doesn't work

00:31:16,470 --> 00:31:22,230
with pi pi at the moment but it works

00:31:20,280 --> 00:31:24,150
with every other python interpreter and

00:31:22,230 --> 00:31:26,940
you can also specify arbitrary versions

00:31:24,150 --> 00:31:28,830
of Python like - 7:14 and if they're not

00:31:26,940 --> 00:31:30,870
installed on your system and you have PI

00:31:28,830 --> 00:31:33,870
end installed it will compile it from

00:31:30,870 --> 00:31:37,410
source and make it available so next

00:31:33,870 --> 00:31:40,020
question I have a question regarding the

00:31:37,410 --> 00:31:43,770
speed of like installing new packages

00:31:40,020 --> 00:31:44,800
and stuff it seems like it takes a long

00:31:43,770 --> 00:31:47,020
time compared to

00:31:44,800 --> 00:31:48,760
regular pip I'm assuming cuz it's

00:31:47,020 --> 00:31:50,860
calculating Hatcher's or something and

00:31:48,760 --> 00:31:52,450
I've done some googling on the issue

00:31:50,860 --> 00:31:54,520
that seems like I'm not the only one so

00:31:52,450 --> 00:31:56,470
have you heard of that issue so far do

00:31:54,520 --> 00:31:59,260
you have any inputs on that or maybe

00:31:56,470 --> 00:32:01,810
ways that could be sped up because like

00:31:59,260 --> 00:32:03,250
installing new packages I think again I

00:32:01,810 --> 00:32:04,660
think it's calculating hashes is if the

00:32:03,250 --> 00:32:07,840
installation that seems slower the

00:32:04,660 --> 00:32:09,550
locking that I think yeah I think maybe

00:32:07,840 --> 00:32:11,260
maybe right might be the logic

00:32:09,550 --> 00:32:12,700
yeah the locking can be slow cuz as to

00:32:11,260 --> 00:32:16,000
resolve a dependency graph and if you

00:32:12,700 --> 00:32:18,250
have a large graph it can be slow but

00:32:16,000 --> 00:32:20,620
it's we've made massive improvements to

00:32:18,250 --> 00:32:23,740
that and it's getting faster every day

00:32:20,620 --> 00:32:26,320
so I grab resolving a dependency graph

00:32:23,740 --> 00:32:28,630
it turns out is quite difficult so it

00:32:26,320 --> 00:32:30,190
involves quite a few requests and stuff

00:32:28,630 --> 00:32:33,820
like that and it has to download all

00:32:30,190 --> 00:32:35,980
those packages so yeah okay so in the

00:32:33,820 --> 00:32:37,660
interest of time I'm gonna have three

00:32:35,980 --> 00:32:39,220
more minutes of questions so three more

00:32:37,660 --> 00:32:40,780
minutes of questions speedran I'd like

00:32:39,220 --> 00:32:42,580
to start first with the lady in the back

00:32:40,780 --> 00:32:44,980
there Hey

00:32:42,580 --> 00:32:46,720
so I'm interested in using this but I'm

00:32:44,980 --> 00:32:48,850
not necessarily gonna get everyone in my

00:32:46,720 --> 00:32:50,650
company to start using it right away is

00:32:48,850 --> 00:32:53,320
there a way that I can convert between

00:32:50,650 --> 00:32:56,200
this lock file and a requirements txt so

00:32:53,320 --> 00:32:58,870
that people were using either again yes

00:32:56,200 --> 00:33:00,790
if you do pick em lock - or it will

00:32:58,870 --> 00:33:05,850
output a requirements that txt file

00:33:00,790 --> 00:33:08,050
awesome thank you yeah are we on okay

00:33:05,850 --> 00:33:14,350
should we put the lock file under source

00:33:08,050 --> 00:33:16,240
control yes thank you when you uninstall

00:33:14,350 --> 00:33:17,230
is that recursive does it remove all the

00:33:16,240 --> 00:33:18,280
dependencies that were brought in

00:33:17,230 --> 00:33:19,960
because of that install

00:33:18,280 --> 00:33:22,330
say it one more time when you uninstall

00:33:19,960 --> 00:33:23,740
is that recursively uninstalling

00:33:22,330 --> 00:33:25,930
everything that was brought in for that

00:33:23,740 --> 00:33:28,660
dependency no it'll uninstall only that

00:33:25,930 --> 00:33:31,360
package there's a sink command which

00:33:28,660 --> 00:33:33,280
will automatically that's a separate

00:33:31,360 --> 00:33:37,360
command which will sync your environment

00:33:33,280 --> 00:33:40,270
to the lock file okay up front how does

00:33:37,360 --> 00:33:42,430
this Pippin know which virtual end

00:33:40,270 --> 00:33:46,030
corresponds to which application

00:33:42,430 --> 00:33:47,950
directory it from the path of the

00:33:46,030 --> 00:33:49,210
directory so if you were to move it it

00:33:47,950 --> 00:33:53,130
would create a new virtual environment

00:33:49,210 --> 00:33:54,810
yeah gate behind was a kind of

00:33:53,130 --> 00:33:57,570
big difference in terms of when you're

00:33:54,810 --> 00:34:00,090
designing an API that's for Python

00:33:57,570 --> 00:34:02,460
versus an API that's like for

00:34:00,090 --> 00:34:03,960
consumption through shell and like is

00:34:02,460 --> 00:34:06,780
more interactive and not just something

00:34:03,960 --> 00:34:08,250
that you implement in your code yeah I

00:34:06,780 --> 00:34:10,290
think when you're in when you're

00:34:08,250 --> 00:34:12,270
designing something if you look at the

00:34:10,290 --> 00:34:14,040
code base of pip M the Python side of it

00:34:12,270 --> 00:34:15,929
is not the most elegant code base I've

00:34:14,040 --> 00:34:17,610
ever worked with because it's trying to

00:34:15,929 --> 00:34:20,159
present the best user interface as

00:34:17,610 --> 00:34:22,590
possible so I think there's compromises

00:34:20,159 --> 00:34:25,230
on both sides I think if I try to build

00:34:22,590 --> 00:34:26,669
it Python first and then present the CLI

00:34:25,230 --> 00:34:28,649
I think that it would be lesser

00:34:26,669 --> 00:34:31,169
experience so I think that there's

00:34:28,649 --> 00:34:33,810
always trade-offs thank you mm-hmm any

00:34:31,169 --> 00:34:36,780
next question behind why will this also

00:34:33,810 --> 00:34:38,520
replace set up pi no set up pi is a

00:34:36,780 --> 00:34:38,850
completely different tool for different

00:34:38,520 --> 00:34:43,560
things

00:34:38,850 --> 00:34:46,679
cept a PI is used for libraries and this

00:34:43,560 --> 00:34:49,889
is for applications okay and we'll do

00:34:46,679 --> 00:34:51,120
one last question I think that gentleman

00:34:49,889 --> 00:34:55,950
back there was already there before the

00:34:51,120 --> 00:34:57,900
mic at the front got fit this has been a

00:34:55,950 --> 00:35:00,560
big struggle in the node community would

00:34:57,900 --> 00:35:02,790
you do it for libraries as well as

00:35:00,560 --> 00:35:04,680
projects would you always check in the

00:35:02,790 --> 00:35:06,330
lock file I would not check in the lock

00:35:04,680 --> 00:35:08,340
file if you are targeting multiple

00:35:06,330 --> 00:35:10,620
versions of Python where your lock file

00:35:08,340 --> 00:35:13,410
could be different under the different

00:35:10,620 --> 00:35:15,120
versions of Python hopefully we've done

00:35:13,410 --> 00:35:16,860
a lot of work so that it should be a

00:35:15,120 --> 00:35:18,870
flat lock file that specifies about

00:35:16,860 --> 00:35:21,330
versions of Python it really depends on

00:35:18,870 --> 00:35:24,780
the metadata that is provided by those

00:35:21,330 --> 00:35:27,120
packages so if the metadata is good then

00:35:24,780 --> 00:35:30,390
you should be able to but if worst comes

00:35:27,120 --> 00:35:33,350
to worst then keep it out okay with that

00:35:30,390 --> 00:35:33,350
lets thank Kenneth

00:35:37,250 --> 00:35:41,180
and I'm sure he'd be happy to entertain

00:35:39,410 --> 00:35:44,410
questions outside of the ballroom

00:35:41,180 --> 00:35:44,410

YouTube URL: https://www.youtube.com/watch?v=GBQAKldqgZs


