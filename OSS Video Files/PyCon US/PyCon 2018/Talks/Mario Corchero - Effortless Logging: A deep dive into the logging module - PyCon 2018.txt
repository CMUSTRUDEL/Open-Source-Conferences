Title: Mario Corchero - Effortless Logging: A deep dive into the logging module - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Mario Corchero

Logs are our best friend, especially on those late nights when we try to troubleshoot a problem in production that was written by a co-worker who is on vacation. Logs are the main way to know what is happening with an application at runtime, but we donâ€™t realize how important they are until we actually need them. Unfortunately, they are usually an under-estimated part of the development process.

This talk aims to transmit the need for the logging module, briefly explains how to use it and how it is built, and dives into all the complexity that is hidden to us. This will help attendees not just understand all the magic that allows us to inspect our applications at runtime, but also to avoid mistakes and adapt the module to our needs for more esoteric scenarios.

The talk is structured to simplify the understanding of the logging module. Many people have read the documentation, but still struggle to fully understand what is happening under the hood. This talk aims to eliminate that barrier by presenting it in an easier-to-digest manner.


Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:03,440 --> 00:00:08,400
hey everyone welcome to the talk on

00:00:06,210 --> 00:00:10,710
effortless logging a deep dive into the

00:00:08,400 --> 00:00:12,509
logging module the topic is very near

00:00:10,710 --> 00:00:22,920
and dear to my heart so let's welcome

00:00:12,509 --> 00:00:25,500
Mario hello everyone my name is Malik

00:00:22,920 --> 00:00:28,800
Archer and I'm here today to speak about

00:00:25,500 --> 00:00:30,029
log in well that's my guinea pig if you

00:00:28,800 --> 00:00:32,730
want to find me afterwards and speak

00:00:30,029 --> 00:00:34,500
about more logging or anything related

00:00:32,730 --> 00:00:35,579
to Python or traveling to Spain if you

00:00:34,500 --> 00:00:38,640
are planning some holidays

00:00:35,579 --> 00:00:40,140
I'll be around and also I know that you

00:00:38,640 --> 00:00:41,640
saw this first slide and you thought

00:00:40,140 --> 00:00:44,160
like oh my god this is one of those

00:00:41,640 --> 00:00:46,410
lights were maybe the topics interesting

00:00:44,160 --> 00:00:48,180
that's all gonna be about how happy

00:00:46,410 --> 00:00:50,250
Mario's at Bloomberg that they are

00:00:48,180 --> 00:00:52,530
recruiting in London New York San

00:00:50,250 --> 00:00:54,449
Francisco many other places the

00:00:52,530 --> 00:00:56,250
company's great great benefits but I'm

00:00:54,449 --> 00:00:57,620
not gonna say anything about that ok

00:00:56,250 --> 00:01:00,600
yeah

00:00:57,620 --> 00:01:03,329
so today the topic is we're gonna see

00:01:00,600 --> 00:01:05,880
why logging is important how logging

00:01:03,329 --> 00:01:09,570
works how can we use it how to configure

00:01:05,880 --> 00:01:11,490
it we'll try to see some code and then

00:01:09,570 --> 00:01:13,080
with some sample recipes I'm gonna have

00:01:11,490 --> 00:01:14,880
to flash through the slides because I

00:01:13,080 --> 00:01:19,250
just rehearsed it and I don't have much

00:01:14,880 --> 00:01:21,210
time so first of all is why logging and

00:01:19,250 --> 00:01:25,740
I like tea

00:01:21,210 --> 00:01:27,299
I like GT to realize that today when you

00:01:25,740 --> 00:01:29,729
write code you might be right in the

00:01:27,299 --> 00:01:31,560
commentation because you realize the

00:01:29,729 --> 00:01:33,990
issue that when people read your code

00:01:31,560 --> 00:01:35,670
that it's not you have to understand

00:01:33,990 --> 00:01:37,170
what you wrote but you also need to

00:01:35,670 --> 00:01:39,270
realize that when your code is running

00:01:37,170 --> 00:01:40,890
in production as a black box people are

00:01:39,270 --> 00:01:42,689
going to seed your code when you're away

00:01:40,890 --> 00:01:45,210
on holidays on Spain as we're gonna

00:01:42,689 --> 00:01:46,560
discuss afterwards and you don't want

00:01:45,210 --> 00:01:47,909
them to call you because they are not

00:01:46,560 --> 00:01:50,399
able to figure out what's going on right

00:01:47,909 --> 00:01:53,100
and login an interpretation is what it

00:01:50,399 --> 00:01:55,470
does for you it's out it allows you to

00:01:53,100 --> 00:01:57,509
see what application is doing when it's

00:01:55,470 --> 00:01:59,250
running so I'd like to see it as some

00:01:57,509 --> 00:02:01,920
kind of a documentation for developers

00:01:59,250 --> 00:02:05,460
and C's admins on things are on fire

00:02:01,920 --> 00:02:09,090
that they need to see some first we'll

00:02:05,460 --> 00:02:10,770
actually go further and say that if you

00:02:09,090 --> 00:02:12,870
use a debugger in development you're

00:02:10,770 --> 00:02:13,630
doing it wrong because they say that if

00:02:12,870 --> 00:02:16,300
you if you're not

00:02:13,630 --> 00:02:18,160
able to to reason about your allergy a

00:02:16,300 --> 00:02:20,080
program on on your development

00:02:18,160 --> 00:02:21,010
environment just with the logs how are

00:02:20,080 --> 00:02:24,580
you going to be able to do it in

00:02:21,010 --> 00:02:26,950
production like I'm not one of those

00:02:24,580 --> 00:02:29,110
again still used to the bugger that I

00:02:26,950 --> 00:02:31,600
can see the reasoning behind it and I

00:02:29,110 --> 00:02:33,760
really try to insert an instrument my

00:02:31,600 --> 00:02:35,740
application in such a way that ideally

00:02:33,760 --> 00:02:37,210
what I'm just running a test if I see

00:02:35,740 --> 00:02:40,600
the logs I will be able to understand

00:02:37,210 --> 00:02:42,970
what's the issue behind it so you can

00:02:40,600 --> 00:02:45,460
say like yeah but that's all cool but

00:02:42,970 --> 00:02:47,350
I'm I'm old-school I like print right

00:02:45,460 --> 00:02:48,220
print is a great tool I can just bring

00:02:47,350 --> 00:02:50,830
whatever I want

00:02:48,220 --> 00:02:52,090
and that print is not you know you want

00:02:50,830 --> 00:02:54,760
to use the right tool for the right job

00:02:52,090 --> 00:02:56,770
and loggia logging has many features

00:02:54,760 --> 00:02:59,530
that you won't get out of brain so with

00:02:56,770 --> 00:03:00,550
a well first of all log in allows for

00:02:59,530 --> 00:03:01,630
multi-threading if you're printing

00:03:00,550 --> 00:03:03,370
things running multiple threads

00:03:01,630 --> 00:03:05,470
everything is going to collide it's more

00:03:03,370 --> 00:03:07,780
flexible you can categorize your logs as

00:03:05,470 --> 00:03:09,580
we're gonna see in a minute and for me

00:03:07,780 --> 00:03:11,410
the most beautiful thing is that the

00:03:09,580 --> 00:03:13,720
design of login it allows you to split

00:03:11,410 --> 00:03:15,880
they have from the what and what I mean

00:03:13,720 --> 00:03:18,990
is logging has this kind of color

00:03:15,880 --> 00:03:22,600
collaborative collaborative approach

00:03:18,990 --> 00:03:24,880
that it allows you to say what do you

00:03:22,600 --> 00:03:27,040
want to log without worrying about how

00:03:24,880 --> 00:03:29,620
is it going to be locked what do I mean

00:03:27,040 --> 00:03:32,200
for this is if you are writing a library

00:03:29,620 --> 00:03:34,990
you might you can instrument it with

00:03:32,200 --> 00:03:37,000
logs and the person that's you only used

00:03:34,990 --> 00:03:39,010
a librarian application can worry about

00:03:37,000 --> 00:03:42,910
how those are going to be are gonna be

00:03:39,010 --> 00:03:45,450
treated okay so well first of all I've

00:03:42,910 --> 00:03:47,770
seen this picture on every good speaker

00:03:45,450 --> 00:03:49,480
its presentation I don't know if that

00:03:47,770 --> 00:03:53,560
happened to you so I was like hey I have

00:03:49,480 --> 00:03:54,670
to use it so say okay we're gonna see

00:03:53,560 --> 00:03:56,470
how logging works what's at the

00:03:54,670 --> 00:03:59,020
different parts that it has and think

00:03:56,470 --> 00:04:00,670
how everything blacks together so the

00:03:59,020 --> 00:04:02,920
first of all is the logger class okay

00:04:00,670 --> 00:04:04,600
logger class is the main that is the

00:04:02,920 --> 00:04:06,880
main class that you interact with when

00:04:04,600 --> 00:04:09,190
when you're writing a Python program you

00:04:06,880 --> 00:04:11,290
basically take a logger you call one of

00:04:09,190 --> 00:04:13,390
the of what one of the methods that he'd

00:04:11,290 --> 00:04:15,190
have and then you just pass a string

00:04:13,390 --> 00:04:17,859
template and the arguments to it and

00:04:15,190 --> 00:04:20,230
then this thing magically goes into the

00:04:17,859 --> 00:04:23,650
logger code and it appears whatever you

00:04:20,230 --> 00:04:25,330
want right but it's not really like that

00:04:23,650 --> 00:04:26,590
what's the first thing that's gonna

00:04:25,330 --> 00:04:27,950
happen is that the logger is gonna

00:04:26,590 --> 00:04:32,180
create what's called a log

00:04:27,950 --> 00:04:33,980
that contains not only the depth not

00:04:32,180 --> 00:04:35,900
only the template and the message that

00:04:33,980 --> 00:04:38,930
you have but also some in context about

00:04:35,900 --> 00:04:40,520
where this is being logged and what once

00:04:38,930 --> 00:04:42,470
that done of course we know that that

00:04:40,520 --> 00:04:44,570
object cannot magically go to your

00:04:42,470 --> 00:04:47,150
console but what's gonna happen is that

00:04:44,570 --> 00:04:48,860
a handler sorry this way so a handler

00:04:47,150 --> 00:04:51,350
would take your log record and put it

00:04:48,860 --> 00:04:53,540
into a stream like a CD out this TV

00:04:51,350 --> 00:04:55,310
error or a file or an email or whatever

00:04:53,540 --> 00:04:57,950
you want there are multiple handles in

00:04:55,310 --> 00:05:00,080
the standard library that can take take

00:04:57,950 --> 00:05:02,270
your low records and put it on whatever

00:05:00,080 --> 00:05:03,650
destination if you haven't checked them

00:05:02,270 --> 00:05:05,000
out I invite you to do it because there

00:05:03,650 --> 00:05:06,800
are some that are really really cool

00:05:05,000 --> 00:05:09,919
like for example you can send your logs

00:05:06,800 --> 00:05:13,610
via HTTP with an already pre-built

00:05:09,919 --> 00:05:15,710
handle it's in the standard library ok

00:05:13,610 --> 00:05:18,050
so that's what we discuss now we have

00:05:15,710 --> 00:05:20,120
the logger that takes this kind of

00:05:18,050 --> 00:05:22,370
message it goes because into the look in

00:05:20,120 --> 00:05:24,500
the into the code of the logger then it

00:05:22,370 --> 00:05:26,120
creates a record and then it takes the

00:05:24,500 --> 00:05:28,669
reckon to the handler and it appears

00:05:26,120 --> 00:05:31,580
right that's real good but you might be

00:05:28,669 --> 00:05:33,650
wondering ok that log record is an

00:05:31,580 --> 00:05:34,970
object so how is that object being

00:05:33,650 --> 00:05:37,580
transformed into a string when I'm

00:05:34,970 --> 00:05:40,220
blogging to a to a console right because

00:05:37,580 --> 00:05:42,289
even if you have like this 300 that we

00:05:40,220 --> 00:05:43,850
spoke about it is 500 all these kind of

00:05:42,289 --> 00:05:46,039
handlers that at the end is output

00:05:43,850 --> 00:05:47,990
strings all that code needs to be shared

00:05:46,039 --> 00:05:49,850
somewhere and that's what the well

00:05:47,990 --> 00:05:52,910
that's what the formatter comes in for

00:05:49,850 --> 00:05:55,600
matters we'll just take the this log

00:05:52,910 --> 00:05:58,729
record and transform it into a string

00:05:55,600 --> 00:06:01,130
okay we understand login now right so we

00:05:58,729 --> 00:06:02,960
have a logger which takes a string it

00:06:01,130 --> 00:06:04,130
goes through a logger code it emits a

00:06:02,960 --> 00:06:05,690
lot of rigor but passing it to the

00:06:04,130 --> 00:06:08,270
handler and the handler is gonna format

00:06:05,690 --> 00:06:10,539
it a string everyone understand logging

00:06:08,270 --> 00:06:12,800
right login now right it's really simple

00:06:10,539 --> 00:06:15,860
there's one more thing that we want to

00:06:12,800 --> 00:06:18,979
into so there's also filters they just

00:06:15,860 --> 00:06:21,740
allow you to they just allow you to

00:06:18,979 --> 00:06:23,180
filter logs on more like fine-tuned

00:06:21,740 --> 00:06:25,789
characteristics so it's basically a

00:06:23,180 --> 00:06:27,500
class where you can decide with it based

00:06:25,789 --> 00:06:29,930
on based on any character eat of the log

00:06:27,500 --> 00:06:33,110
record whether you want to whether you

00:06:29,930 --> 00:06:36,680
want to let it pass or not okay we have

00:06:33,110 --> 00:06:38,599
the whole stack now so a logger takes a

00:06:36,680 --> 00:06:40,099
string well at the template and the

00:06:38,599 --> 00:06:40,910
parameters go through the logger code

00:06:40,099 --> 00:06:43,190
field

00:06:40,910 --> 00:06:44,900
might allow it to pass or not we are

00:06:43,190 --> 00:06:45,860
gonna omit it in the handler the handler

00:06:44,900 --> 00:06:47,840
is going to format it

00:06:45,860 --> 00:06:50,690
there's also filters in their handler

00:06:47,840 --> 00:06:52,700
and if all of that works and now we're

00:06:50,690 --> 00:06:54,200
gonna have our beautiful log printed

00:06:52,700 --> 00:06:57,290
into the console or whatever is great we

00:06:54,200 --> 00:06:59,120
hand not that totally simple we have

00:06:57,290 --> 00:07:00,680
also loaded hierarchy okay I know this

00:06:59,120 --> 00:07:02,330
starting to get complicated but we are

00:07:00,680 --> 00:07:04,430
going to go literally them and that way

00:07:02,330 --> 00:07:06,320
for Elise easy to see so now there's the

00:07:04,430 --> 00:07:08,360
logging hierarchy this whenever you

00:07:06,320 --> 00:07:11,990
create a logger you can you have this

00:07:08,360 --> 00:07:15,680
this function that will will retrieve a

00:07:11,990 --> 00:07:17,570
logger with the string separated tokens

00:07:15,680 --> 00:07:19,130
that you pass on it so here and this

00:07:17,570 --> 00:07:20,570
will create a hierarchy for you so here

00:07:19,130 --> 00:07:23,060
basically what we are saying is we want

00:07:20,570 --> 00:07:25,430
to get the the logger parent-child and

00:07:23,060 --> 00:07:26,960
that logger is a child of parent which

00:07:25,430 --> 00:07:29,150
at the same time it's a child of the

00:07:26,960 --> 00:07:31,760
root logger that all loggers inherit

00:07:29,150 --> 00:07:33,410
from you can see it kind of they're like

00:07:31,760 --> 00:07:35,630
the you can see the root logger like

00:07:33,410 --> 00:07:37,040
object okay on Python three that don't

00:07:35,630 --> 00:07:38,980
worry you don't need to learn mro

00:07:37,040 --> 00:07:42,410
there's no multiple inheritance here

00:07:38,980 --> 00:07:45,920
okay so this is complex but now we get

00:07:42,410 --> 00:07:48,380
it so we said we have a logger takes the

00:07:45,920 --> 00:07:50,390
template take some parameter then we

00:07:48,380 --> 00:07:52,700
have the filter and we are going to meet

00:07:50,390 --> 00:07:55,070
in blah blah we formatted we're gonna do

00:07:52,700 --> 00:07:56,630
the same thing again and now if the

00:07:55,070 --> 00:07:58,430
logger has this attribute called

00:07:56,630 --> 00:08:00,110
propagates a tea tree which is the

00:07:58,430 --> 00:08:01,520
default it's going to meet it to all the

00:08:00,110 --> 00:08:03,500
party handler and now this is really

00:08:01,520 --> 00:08:05,480
important this is what confuses a lot of

00:08:03,500 --> 00:08:08,660
people when you see in login stack and

00:08:05,480 --> 00:08:11,210
is that when when you have parent

00:08:08,660 --> 00:08:14,590
loggers for parent loggers the code that

00:08:11,210 --> 00:08:18,530
is shared is is the call to the handlers

00:08:14,590 --> 00:08:20,419
okay so what I mean is once the once a

00:08:18,530 --> 00:08:23,330
logger is done processing

00:08:20,419 --> 00:08:25,130
well one hot one a logger has called all

00:08:23,330 --> 00:08:27,260
the handlers that it has he's not gonna

00:08:25,130 --> 00:08:29,360
call the parent logger he's gonna call

00:08:27,260 --> 00:08:32,180
the parent handlers so he's gonna call

00:08:29,360 --> 00:08:33,500
the handlers of his parent logger so the

00:08:32,180 --> 00:08:34,450
filter code for example won't be

00:08:33,500 --> 00:08:38,479
executed

00:08:34,450 --> 00:08:41,900
okay this was complex we do now know how

00:08:38,479 --> 00:08:44,300
logging works right now no okay so more

00:08:41,900 --> 00:08:46,670
things so loggers also have a category

00:08:44,300 --> 00:08:48,860
and enable and some of that routes that

00:08:46,670 --> 00:08:52,280
will control some of the particularities

00:08:48,860 --> 00:08:54,720
of of your of your logs and how they

00:08:52,280 --> 00:08:56,970
travel through the log in stack

00:08:54,720 --> 00:08:58,770
basically category on both logger and

00:08:56,970 --> 00:09:00,570
handler will allow you to set a

00:08:58,770 --> 00:09:03,810
threshold on both of them so for example

00:09:00,570 --> 00:09:07,470
if a logger has if a logger has a

00:09:03,810 --> 00:09:10,080
category of warning it will only log it

00:09:07,470 --> 00:09:12,540
will only log warning and both log

00:09:10,080 --> 00:09:15,180
records and now you might be wondering

00:09:12,540 --> 00:09:18,900
like what happens if the parent logger

00:09:15,180 --> 00:09:22,140
has a level of error only that a child

00:09:18,900 --> 00:09:24,750
one has info so because as we said only

00:09:22,140 --> 00:09:26,250
the the parent handlers code is the one

00:09:24,750 --> 00:09:27,420
that's reading there's being executed on

00:09:26,250 --> 00:09:28,980
the parents that won't be an issue but

00:09:27,420 --> 00:09:30,840
we'll see that in more detail so no

00:09:28,980 --> 00:09:33,450
later another terror it's like I don't

00:09:30,840 --> 00:09:36,270
you make the mix too many things so now

00:09:33,450 --> 00:09:37,680
with all that this is the actual this is

00:09:36,270 --> 00:09:40,320
the actual diagram that you have in the

00:09:37,680 --> 00:09:42,540
documentation of Python actually this

00:09:40,320 --> 00:09:44,880
whole talk came because the first time I

00:09:42,540 --> 00:09:47,190
saw this light it was I was like yeah

00:09:44,880 --> 00:09:48,930
this is correct but I have no idea how

00:09:47,190 --> 00:09:50,340
to I mean I know how to read this but

00:09:48,930 --> 00:09:53,160
it's super hot right if you have no

00:09:50,340 --> 00:09:54,510
context about how logging works this is

00:09:53,160 --> 00:09:55,680
correct then you can follow the diagram

00:09:54,510 --> 00:09:58,920
but it's really hard to reason about

00:09:55,680 --> 00:10:01,160
logging okay so we have Winston logging

00:09:58,920 --> 00:10:05,460
let's see let's see now how can we use

00:10:01,160 --> 00:10:08,970
those those loggers this is an example

00:10:05,460 --> 00:10:11,070
on how to use login and you can see that

00:10:08,970 --> 00:10:13,530
we are getting here a logger we are

00:10:11,070 --> 00:10:16,200
logging on the bug and some interesting

00:10:13,530 --> 00:10:18,450
things are for example here we see we

00:10:16,200 --> 00:10:21,840
see X info this is if you are on a stack

00:10:18,450 --> 00:10:24,930
if you are in an exception scope this is

00:10:21,840 --> 00:10:26,760
gonna log not only your message but it's

00:10:24,930 --> 00:10:28,730
also gonna log the exception that you

00:10:26,760 --> 00:10:31,350
are being handling this is super useful

00:10:28,730 --> 00:10:32,820
at the same time we spoke about the

00:10:31,350 --> 00:10:36,320
levels that logger have like the bug

00:10:32,820 --> 00:10:41,190
info warning error and critical and

00:10:36,320 --> 00:10:44,970
exception is not a new level it's just

00:10:41,190 --> 00:10:47,670
error level with X with X in 50 true if

00:10:44,970 --> 00:10:49,770
you want to log this the stack

00:10:47,670 --> 00:10:51,030
information outside of an exception you

00:10:49,770 --> 00:10:56,750
also have this new parameter called

00:10:51,030 --> 00:10:59,670
stack info that you can use okay so now

00:10:56,750 --> 00:11:01,350
I'm gonna gonna show you some issues

00:10:59,670 --> 00:11:02,550
that I was doing at the beginning when I

00:11:01,350 --> 00:11:04,589
was visiting logging without read the

00:11:02,550 --> 00:11:06,120
documentation and I'm only I'm the only

00:11:04,589 --> 00:11:07,890
one that does this I'm not all of you

00:11:06,120 --> 00:11:08,730
read the documentation before using any

00:11:07,890 --> 00:11:11,460
library

00:11:08,730 --> 00:11:13,200
that I didn't and these are some things

00:11:11,460 --> 00:11:15,390
that I realized that I wanted to do

00:11:13,200 --> 00:11:17,910
different from the way I was using it so

00:11:15,390 --> 00:11:20,640
first of all is well disclaimer this can

00:11:17,910 --> 00:11:24,630
start flame wars bigger than space

00:11:20,640 --> 00:11:26,279
versus taps okay but basically I used to

00:11:24,630 --> 00:11:29,130
do format on the mess engine just pass

00:11:26,279 --> 00:11:30,779
the string to the logger ideally what

00:11:29,130 --> 00:11:32,459
you want to do it is this some people

00:11:30,779 --> 00:11:34,649
will claim that they this can this can

00:11:32,459 --> 00:11:37,709
cause what's called I hasten back

00:11:34,649 --> 00:11:40,620
because if it depends on how you login

00:11:37,709 --> 00:11:41,940
configuration is done on the application

00:11:40,620 --> 00:11:45,300
you may see an error or not at the time

00:11:41,940 --> 00:11:48,480
that you are that you are like printing

00:11:45,300 --> 00:11:50,850
this message but being realistic I think

00:11:48,480 --> 00:11:52,080
this is this is a this is much better

00:11:50,850 --> 00:11:54,270
way to pass the message and this is

00:11:52,080 --> 00:11:57,330
actually now an error on Pyland even if

00:11:54,270 --> 00:12:01,680
pilots this opinionated that hey next

00:11:57,330 --> 00:12:04,230
thing is this how many times have using

00:12:01,680 --> 00:12:07,920
this beautiful exception what it says a

00:12:04,230 --> 00:12:10,440
terrible have ever happen data and the

00:12:07,920 --> 00:12:12,180
problem is that what you want to do is

00:12:10,440 --> 00:12:13,760
this to see the whole exception because

00:12:12,180 --> 00:12:15,779
if you do this and you get a key error

00:12:13,760 --> 00:12:17,970
what you're gonna get is the string

00:12:15,779 --> 00:12:19,470
representation of a key error and the

00:12:17,970 --> 00:12:22,290
string representation of a key error is

00:12:19,470 --> 00:12:24,690
the key er that you're missing so if you

00:12:22,290 --> 00:12:26,310
try block you are doing a lot of access

00:12:24,690 --> 00:12:29,520
to dictionaries you're gonna get a

00:12:26,310 --> 00:12:31,800
really meaningful data right how

00:12:29,520 --> 00:12:34,050
beautiful is that so just use X info and

00:12:31,800 --> 00:12:36,980
you'll get the whole stack and line and

00:12:34,050 --> 00:12:39,060
the type of exception of what happened

00:12:36,980 --> 00:12:40,860
if you want to create your own logger

00:12:39,060 --> 00:12:42,450
hierarchy you can do it and in some

00:12:40,860 --> 00:12:44,220
situation that's useful but most of the

00:12:42,450 --> 00:12:46,410
time what you want to do is to link your

00:12:44,220 --> 00:12:49,860
locker key with your file line with Li

00:12:46,410 --> 00:12:50,910
you're like your folder naming this will

00:12:49,860 --> 00:12:53,610
make like for example if you're working

00:12:50,910 --> 00:12:56,250
in library requests but just doing that

00:12:53,610 --> 00:12:57,660
all your logs in all your files that you

00:12:56,250 --> 00:12:59,520
have your request will have the parent

00:12:57,660 --> 00:13:01,890
lock of requests so this is like super

00:12:59,520 --> 00:13:03,690
handy and you don't have to think about

00:13:01,890 --> 00:13:07,529
namings which is the biggest issue in

00:13:03,690 --> 00:13:09,270
computer science so we now we know how

00:13:07,529 --> 00:13:11,790
how to use it but how do we configure

00:13:09,270 --> 00:13:14,730
this right we spoke about this beautiful

00:13:11,790 --> 00:13:17,459
design on login where you can you write

00:13:14,730 --> 00:13:20,040
code that uses login and then on a

00:13:17,459 --> 00:13:22,020
totally separate space you're going to

00:13:20,040 --> 00:13:23,550
configure how that works

00:13:22,020 --> 00:13:25,230
so we're gonna see that and they are

00:13:23,550 --> 00:13:26,730
there are three main ways to configure

00:13:25,230 --> 00:13:28,680
it you can configure it by writing code

00:13:26,730 --> 00:13:34,890
you can use an init file or you can

00:13:28,680 --> 00:13:36,899
configure it with a dictionary so first

00:13:34,890 --> 00:13:38,940
of all you can plug everything together

00:13:36,899 --> 00:13:40,200
or you can use for really simple scripts

00:13:38,940 --> 00:13:43,080
and things like that you can use basic

00:13:40,200 --> 00:13:45,390
conflict basic configures has some kind

00:13:43,080 --> 00:13:46,709
of a list of saint defaults for scripts

00:13:45,390 --> 00:13:49,740
and things like that it will just log to

00:13:46,709 --> 00:13:51,600
st dr and it would it this is actually

00:13:49,740 --> 00:13:53,490
the function that will be called if you

00:13:51,600 --> 00:13:55,589
start to use logging without having to

00:13:53,490 --> 00:13:57,660
configure it it has a lot of parameters

00:13:55,589 --> 00:14:00,330
with basic config you can for example

00:13:57,660 --> 00:14:03,180
start log into a file instead of an STD

00:14:00,330 --> 00:14:04,380
R and you can set level format and many

00:14:03,180 --> 00:14:07,529
other things you can check the

00:14:04,380 --> 00:14:08,820
documentation and then this is probably

00:14:07,529 --> 00:14:10,529
the most interesting one like

00:14:08,820 --> 00:14:11,820
configuring from a dictionary when you

00:14:10,529 --> 00:14:14,190
can figure for an action which you're

00:14:11,820 --> 00:14:15,810
just going to list all the polar

00:14:14,190 --> 00:14:18,570
components that we we explained before

00:14:15,810 --> 00:14:21,120
so for example here we can see that we

00:14:18,570 --> 00:14:23,790
have a plugins logger and the root

00:14:21,120 --> 00:14:26,160
logger being configured to this one only

00:14:23,790 --> 00:14:28,260
to error level and this one comes a

00:14:26,160 --> 00:14:30,000
little so you can see the plugins logger

00:14:28,260 --> 00:14:30,990
doesn't have any handler but that's not

00:14:30,000 --> 00:14:37,290
an issue because it's going to use the

00:14:30,990 --> 00:14:38,430
handler of the parents and oh and if you

00:14:37,290 --> 00:14:40,740
wondered yeah

00:14:38,430 --> 00:14:42,870
there's you can also configure logging

00:14:40,740 --> 00:14:44,610
with without any file but I don't like

00:14:42,870 --> 00:14:45,870
it so I'm not gonna percent if you want

00:14:44,610 --> 00:14:47,430
to configure it with from a file you say

00:14:45,870 --> 00:14:51,089
yeah most file and then use the big one

00:14:47,430 --> 00:14:54,029
which is not much powerful and now we're

00:14:51,089 --> 00:14:57,390
gonna see how this code goes through the

00:14:54,029 --> 00:14:58,950
goes through the the login code of the

00:14:57,390 --> 00:15:00,779
standard library something I really like

00:14:58,950 --> 00:15:02,250
about logging is that the code if you

00:15:00,779 --> 00:15:04,860
understand all the design decisions that

00:15:02,250 --> 00:15:06,510
are around logging the code is is really

00:15:04,860 --> 00:15:07,770
easy to follow so if you have an issue

00:15:06,510 --> 00:15:09,270
with logging of e or you don't

00:15:07,770 --> 00:15:10,740
understand nothing you can do they

00:15:09,270 --> 00:15:12,810
understand something you can just

00:15:10,740 --> 00:15:14,850
literally open the code as with many

00:15:12,810 --> 00:15:17,550
other Python modules and read and see

00:15:14,850 --> 00:15:19,800
what's going on anywhere anyway we are

00:15:17,550 --> 00:15:23,459
gonna see what this line is gonna be

00:15:19,800 --> 00:15:27,899
doing so first of all is the blue okay

00:15:23,459 --> 00:15:31,500
can you read okay so don't worry that's

00:15:27,899 --> 00:15:35,310
that's just a string so

00:15:31,500 --> 00:15:39,150
so basically this is the this is the the

00:15:35,310 --> 00:15:40,560
info method of a logger and as you can

00:15:39,150 --> 00:15:43,740
see the first thing that is doing is

00:15:40,560 --> 00:15:46,320
it's going to check if this if if this

00:15:43,740 --> 00:15:48,450
logger is enabled for the category that

00:15:46,320 --> 00:15:49,800
we are trying to log which is info if

00:15:48,450 --> 00:15:51,930
that's the case then it's going to call

00:15:49,800 --> 00:15:54,180
this underscore logger method which we

00:15:51,930 --> 00:15:55,710
can see here it's huge here you have a

00:15:54,180 --> 00:15:58,710
lot of code so it looks like a more

00:15:55,710 --> 00:16:01,800
technical talk right and here you can

00:15:58,710 --> 00:16:03,480
see that we are building this here in

00:16:01,800 --> 00:16:05,850
red which also not it's not reading

00:16:03,480 --> 00:16:08,520
great we are we are building this this

00:16:05,850 --> 00:16:11,880
log record that we spoke about and it

00:16:08,520 --> 00:16:13,470
and it doesn't have just the the message

00:16:11,880 --> 00:16:16,080
and the arcs that is what we provided

00:16:13,470 --> 00:16:18,090
but it has all kind of all the set of

00:16:16,080 --> 00:16:21,810
information that is collected the run

00:16:18,090 --> 00:16:24,120
function that you are using once that's

00:16:21,810 --> 00:16:26,160
done we're gonna call handle in the

00:16:24,120 --> 00:16:27,390
logger yet okay and the things that

00:16:26,160 --> 00:16:29,310
handler is gonna do is it's going to

00:16:27,390 --> 00:16:31,800
check if that if there if the logger is

00:16:29,310 --> 00:16:33,120
enabled and if the logger is enabled and

00:16:31,800 --> 00:16:34,710
the filters allow the record to go

00:16:33,120 --> 00:16:36,870
through then it's gonna call the

00:16:34,710 --> 00:16:38,700
handlers stealing the code of auto

00:16:36,870 --> 00:16:40,440
logger so here we're still in the call

00:16:38,700 --> 00:16:42,750
of the logger this is I think it's like

00:16:40,440 --> 00:16:45,800
the main bulk of logging that you're

00:16:42,750 --> 00:16:48,210
interested on and what this is doing is

00:16:45,800 --> 00:16:50,220
well if I cannot read what's here I

00:16:48,210 --> 00:16:53,010
don't know how can you know it so what

00:16:50,220 --> 00:16:56,250
you can see here is that C is the

00:16:53,010 --> 00:16:58,680
current logger and and then it's gonna

00:16:56,250 --> 00:16:59,850
go for all for each of the loggers it's

00:16:58,680 --> 00:17:03,180
going to go through all the handlers

00:16:59,850 --> 00:17:04,829
that the logger has and check the level

00:17:03,180 --> 00:17:07,470
and then send the log to the handler

00:17:04,829 --> 00:17:09,750
once it's done with all the handlers you

00:17:07,470 --> 00:17:12,810
can see here that if propagate is say to

00:17:09,750 --> 00:17:14,850
true if so if propagate is said to true

00:17:12,810 --> 00:17:17,310
is gonna take the parent locker and then

00:17:14,850 --> 00:17:18,569
call all the handlers above as you can

00:17:17,310 --> 00:17:20,970
see this is what I was speaking about

00:17:18,569 --> 00:17:21,689
before that a logger doesn't call the

00:17:20,970 --> 00:17:24,390
parent logger

00:17:21,689 --> 00:17:26,520
he just calls it just called the

00:17:24,390 --> 00:17:28,680
handlers of all the parents that's

00:17:26,520 --> 00:17:31,110
that's really that for me at least was

00:17:28,680 --> 00:17:33,420
one of the most confusing things then

00:17:31,110 --> 00:17:35,310
the other thing that a parent logger are

00:17:33,420 --> 00:17:38,220
used for is that if a logger doesn't

00:17:35,310 --> 00:17:39,600
have a log level set is gonna try to get

00:17:38,220 --> 00:17:40,230
the level from the parent and the

00:17:39,600 --> 00:17:43,570
recursively

00:17:40,230 --> 00:17:45,100
that's what the hierarchy is useful

00:17:43,570 --> 00:17:47,679
now once you're done here you're gonna

00:17:45,100 --> 00:17:49,450
go to the to the code of the handler and

00:17:47,679 --> 00:17:50,979
here in the handler you're basically you

00:17:49,450 --> 00:17:52,960
have this for multi-threading and then

00:17:50,979 --> 00:17:54,549
you're just gonna call Emma turn on on

00:17:52,960 --> 00:17:57,340
the handler and that's up to

00:17:54,549 --> 00:17:59,590
implementation of the handler so as we

00:17:57,340 --> 00:18:01,269
saw some handlers how I can lock the

00:17:59,590 --> 00:18:03,070
files some handlers can look to console

00:18:01,269 --> 00:18:08,019
that's totally up to whatever you want

00:18:03,070 --> 00:18:10,450
to do on the handler okay so we saw we

00:18:08,019 --> 00:18:12,970
saw loggers we saw handlers we saw for

00:18:10,450 --> 00:18:14,919
matters we've seen a lot of things and

00:18:12,970 --> 00:18:16,869
this is really cool and if you want to

00:18:14,919 --> 00:18:18,940
use the standard things on the login

00:18:16,869 --> 00:18:20,529
that's great but how do we go about

00:18:18,940 --> 00:18:23,200
standing logging it has a beautiful

00:18:20,529 --> 00:18:25,599
design and it's ready to be extended but

00:18:23,200 --> 00:18:27,549
it's also it's always nice to have some

00:18:25,599 --> 00:18:29,229
kind of a basic recipes on how to do it

00:18:27,549 --> 00:18:31,690
so that's what's gonna what that's we're

00:18:29,229 --> 00:18:35,229
gonna see now I'm gonna run through them

00:18:31,690 --> 00:18:38,859
but we're gonna see some examples so

00:18:35,229 --> 00:18:41,200
this is I know I know twelve factor apps

00:18:38,859 --> 00:18:43,359
I know you should log to STD out this

00:18:41,200 --> 00:18:45,009
works creating Heroku but for my home

00:18:43,359 --> 00:18:46,869
server that I have I love this

00:18:45,009 --> 00:18:48,700
configuration so here what I'm for

00:18:46,869 --> 00:18:51,849
example what I'm doing is I have a

00:18:48,700 --> 00:18:53,739
single file that is gonna have all the

00:18:51,849 --> 00:18:58,210
logs of requests because I'm sending

00:18:53,739 --> 00:19:00,279
requests around I have a half debug log

00:18:58,210 --> 00:19:02,019
file that just holds that like expires

00:19:00,279 --> 00:19:04,149
on two hours so if there's any issue I

00:19:02,019 --> 00:19:06,639
can go and check it I have an error log

00:19:04,149 --> 00:19:08,859
file that had that has all day all the

00:19:06,639 --> 00:19:10,869
errors from from two months for example

00:19:08,859 --> 00:19:12,460
and as you can see you can just have

00:19:10,869 --> 00:19:15,210
many handlers from different purposes

00:19:12,460 --> 00:19:18,129
that can be used in different situations

00:19:15,210 --> 00:19:21,039
I'm gonna predict the code on I'm gonna

00:19:18,129 --> 00:19:23,499
put the slides and everything on unlike

00:19:21,039 --> 00:19:24,759
on pythons on the schedule so you can

00:19:23,499 --> 00:19:27,429
take it afterwards you want although

00:19:24,759 --> 00:19:28,659
some of the some of the recipes are

00:19:27,429 --> 00:19:29,979
already in the cookbook and the other

00:19:28,659 --> 00:19:32,739
ones I'm actually trying to get them

00:19:29,979 --> 00:19:34,629
into the kakugane now this is a way to

00:19:32,739 --> 00:19:36,309
lock Jason not super interests and

00:19:34,629 --> 00:19:37,840
unless you want to do it this is useful

00:19:36,309 --> 00:19:42,159
for if you are using some kind of a

00:19:37,840 --> 00:19:45,039
grater and this is so let's say that

00:19:42,159 --> 00:19:47,559
you're writing an application in flask

00:19:45,039 --> 00:19:49,479
on on some kind of web server you can

00:19:47,559 --> 00:19:52,480
you can use filters you can abuse of

00:19:49,479 --> 00:19:54,909
filters to add some kind of contextual

00:19:52,480 --> 00:19:56,559
information like correlation ID and that

00:19:54,909 --> 00:19:57,370
will allow you to if you are using

00:19:56,559 --> 00:19:59,290
flying frogs

00:19:57,370 --> 00:20:02,140
Paul Anderson error you can you can get

00:19:59,290 --> 00:20:03,490
that correlation ID and see all the logs

00:20:02,140 --> 00:20:07,390
that are related to that correlation ID

00:20:03,490 --> 00:20:09,100
from Python 3.4 I think you have if

00:20:07,390 --> 00:20:11,500
you're lucky to be doing Python 3

00:20:09,100 --> 00:20:13,360
basically how I hope you do you can use

00:20:11,500 --> 00:20:16,150
a new factory method in the log in stack

00:20:13,360 --> 00:20:19,180
that also can do the same thing and it's

00:20:16,150 --> 00:20:20,830
much cleaner although this is actually

00:20:19,180 --> 00:20:22,420
one of the way that is recommended but

00:20:20,830 --> 00:20:27,460
nowadays is much better to do the

00:20:22,420 --> 00:20:30,580
factory this is really cool so your

00:20:27,460 --> 00:20:32,800
application is really very simple logs

00:20:30,580 --> 00:20:33,940
that are ok but you only want to see

00:20:32,800 --> 00:20:35,830
those info box whenever there is an

00:20:33,940 --> 00:20:37,900
error by just doing this kind of

00:20:35,830 --> 00:20:41,800
buffering handler what you're doing is

00:20:37,900 --> 00:20:43,570
that you will see the info logs only

00:20:41,800 --> 00:20:45,460
what like you will see for examples you

00:20:43,570 --> 00:20:47,590
can configure it to 3 you can you will

00:20:45,460 --> 00:20:50,020
see whenever a heroin error happens

00:20:47,590 --> 00:20:51,820
you'll see the three the three infer

00:20:50,020 --> 00:20:53,110
logs that precede him this is really

00:20:51,820 --> 00:20:55,540
useful for troubleshooting as you can

00:20:53,110 --> 00:20:58,600
imagine okay

00:20:55,540 --> 00:21:00,730
so what happens one of the issues of

00:20:58,600 --> 00:21:03,370
logging is whenever you log something

00:21:00,730 --> 00:21:05,440
that's gonna block until all that

00:21:03,370 --> 00:21:08,110
machinery that we saw it's gonna be done

00:21:05,440 --> 00:21:10,390
this means that if you're sending an

00:21:08,110 --> 00:21:11,950
email the idea if you have an SMTP

00:21:10,390 --> 00:21:13,720
handler that will send you an email and

00:21:11,950 --> 00:21:14,440
that line is gonna block until am

00:21:13,720 --> 00:21:16,690
innocent

00:21:14,440 --> 00:21:18,490
so you can also use a queue handler

00:21:16,690 --> 00:21:20,530
which basically allows you to cue you

00:21:18,490 --> 00:21:24,070
log to be handled in a different way in

00:21:20,530 --> 00:21:25,600
a in a different place this now the

00:21:24,070 --> 00:21:28,900
concept of love record that we spoke

00:21:25,600 --> 00:21:31,000
about is key here because we we built a

00:21:28,900 --> 00:21:32,590
log record before they are before the

00:21:31,000 --> 00:21:34,870
god of the handlers come through all the

00:21:32,590 --> 00:21:36,309
information about the log is captured at

00:21:34,870 --> 00:21:39,240
the time you create the log and not at

00:21:36,309 --> 00:21:39,240
the time that you emit it

00:21:41,260 --> 00:21:46,450
Oh from this super useful so if you are

00:21:44,320 --> 00:21:50,530
creating an ass here like I'm a CLI tool

00:21:46,450 --> 00:21:53,110
and you want as many UNIX tools to log

00:21:50,530 --> 00:21:56,260
for example warning and above to STD

00:21:53,110 --> 00:21:59,140
error and info I'm below to STD out you

00:21:56,260 --> 00:22:00,730
can use this this small this this simple

00:21:59,140 --> 00:22:02,890
filter to do that because by default

00:22:00,730 --> 00:22:04,059
there is no way to do it and this will

00:22:02,890 --> 00:22:05,770
allow you to do exactly that

00:22:04,059 --> 00:22:09,110
with that configuration or you can also

00:22:05,770 --> 00:22:11,330
use the dick conveyors as we saw before

00:22:09,110 --> 00:22:14,510
this is not important we're gonna jump

00:22:11,330 --> 00:22:18,170
it and how anyone here knows what's

00:22:14,510 --> 00:22:21,200
Kahoot so get into Kahoot - idiot

00:22:18,170 --> 00:22:23,810
because we're gonna do a small freshener

00:22:21,200 --> 00:22:26,570
and if you win I'll I'll let you first

00:22:23,810 --> 00:22:28,130
stroke my Medina pick if you come to

00:22:26,570 --> 00:22:34,190
London and I'll pay you a beer if I see

00:22:28,130 --> 00:22:39,260
you around oh five minutes

00:22:34,190 --> 00:22:42,910
woo I'll give if you go took a hold of

00:22:39,260 --> 00:22:54,740
it I'll give you a coat and then you can

00:22:42,910 --> 00:22:57,170
play classic I'll give you 20 seconds to

00:22:54,740 --> 00:22:58,940
join not a lot of time oh sorry yeah I

00:22:57,170 --> 00:23:03,980
need to tell you the code the code is

00:22:58,940 --> 00:23:07,460
two one six one nine one one two one six

00:23:03,980 --> 00:23:18,650
oh I click and paste it here right oh no

00:23:07,460 --> 00:23:22,360
I don't there you are

00:23:18,650 --> 00:23:26,330
- one six one nine one one

00:23:22,360 --> 00:23:29,360
did anyone logged in oh yeah 90 Wow 100

00:23:26,330 --> 00:23:30,830
players ok so let's start so these have

00:23:29,360 --> 00:23:33,200
some questions really important question

00:23:30,830 --> 00:23:36,560
about logging ads if you know them Wow

00:23:33,200 --> 00:23:38,030
150 are there that many people here ok

00:23:36,560 --> 00:23:43,880
the walls are coming closer

00:23:38,030 --> 00:23:50,290
so wait no no no no no it started sorry

00:23:43,880 --> 00:23:58,700
oh how do I stop this thing ok here no

00:23:50,290 --> 00:23:59,330
no okay oh hey you are change screen

00:23:58,700 --> 00:24:02,210
yeah there you are

00:23:59,330 --> 00:24:04,880
so what of the following is defined in

00:24:02,210 --> 00:24:07,370
the logging module sorry that was really

00:24:04,880 --> 00:24:12,620
great it was filter

00:24:07,370 --> 00:24:14,029
nice one's gonna be better okay so PPP

00:24:12,620 --> 00:24:15,950
is the only person that managed to do

00:24:14,029 --> 00:24:20,210
that so what is the default output of

00:24:15,950 --> 00:24:22,909
basic config stdio des TD are mixed or a

00:24:20,210 --> 00:24:24,590
file in tempter Wow people are

00:24:22,909 --> 00:24:29,360
participating this was gonna be a

00:24:24,590 --> 00:24:31,879
resource there great

00:24:29,360 --> 00:24:35,779
he's STD error that's a catch-up that's

00:24:31,879 --> 00:24:37,749
why they put that question okay what

00:24:35,779 --> 00:24:40,399
happens if we call basic convict twice

00:24:37,749 --> 00:24:42,440
right because he's gonna configure your

00:24:40,399 --> 00:24:44,210
whole stack twice is it gonna only the

00:24:42,440 --> 00:24:47,480
first one's gonna work only the second

00:24:44,210 --> 00:24:52,519
one what's gonna happen if there's a

00:24:47,480 --> 00:24:53,899
free beer here take it seriously so only

00:24:52,519 --> 00:24:56,090
the first one will take effect and

00:24:53,899 --> 00:24:59,840
actually if you log something so if you

00:24:56,090 --> 00:25:02,299
just log log log record and then you

00:24:59,840 --> 00:25:03,710
call basic config the second call like

00:25:02,299 --> 00:25:04,909
the call that you do will be the second

00:25:03,710 --> 00:25:10,070
call and that won't work

00:25:04,909 --> 00:25:11,360
that's quite a catch up okay which one

00:25:10,070 --> 00:25:13,369
of this is not about our value for

00:25:11,360 --> 00:25:14,749
metaphor templates so basically when you

00:25:13,369 --> 00:25:17,419
create a formatter you pass a template

00:25:14,749 --> 00:25:20,119
for it so which one of this is not valid

00:25:17,419 --> 00:25:22,369
this is for this is if you have worked

00:25:20,119 --> 00:25:26,929
with login before otherwise you know

00:25:22,369 --> 00:25:31,190
choose random okay I mean I cannot pay

00:25:26,929 --> 00:25:37,009
that many beers right who is the lien

00:25:31,190 --> 00:25:39,860
original developer of login kedo victim

00:25:37,009 --> 00:25:46,119
reverse and maybe synonymous but who

00:25:39,860 --> 00:25:50,840
committed it great

00:25:46,119 --> 00:25:53,509
who's James P so what year was it

00:25:50,840 --> 00:25:53,779
brought to you see Python it was long

00:25:53,509 --> 00:25:57,679
ago

00:25:53,779 --> 00:26:00,950
that's deep for those that that do Java

00:25:57,679 --> 00:26:02,960
as well or respect and the login module

00:26:00,950 --> 00:26:04,429
was imported well it's like the design

00:26:02,960 --> 00:26:07,940
of login module is actually brought from

00:26:04,429 --> 00:26:11,210
log4j and yeah it was 2002 and I think

00:26:07,940 --> 00:26:13,490
this is now the most important question

00:26:11,210 --> 00:26:15,110
of the whole survey okay take it

00:26:13,490 --> 00:26:16,309
seriously what is the name of this

00:26:15,110 --> 00:26:20,619
region I'm from here

00:26:16,309 --> 00:26:20,619
Catalonia Madrid extra module our France

00:26:24,530 --> 00:26:29,940
yes extra maluna whoo if you want to go

00:26:28,679 --> 00:26:30,480
for the reason that I have really good

00:26:29,940 --> 00:26:34,980
advice

00:26:30,480 --> 00:26:47,940
so James p1 where is James P chase be

00:26:34,980 --> 00:26:50,250
rude okay so with that I give you here

00:26:47,940 --> 00:26:52,169
some links this is Martha Coe about

00:26:50,250 --> 00:26:55,559
login the how-to and the cookbook the

00:26:52,169 --> 00:26:57,720
stores are really useful and just go on

00:26:55,559 --> 00:26:59,280
read the code they'll the blog the code

00:26:57,720 --> 00:27:02,070
of the longing model is really easy to

00:26:59,280 --> 00:27:03,960
read and it's really well designed even

00:27:02,070 --> 00:27:08,250
even if it's old the design around it is

00:27:03,960 --> 00:27:12,120
really good so with that I'll leave you

00:27:08,250 --> 00:27:15,590
oh no it doesn't work a second wait a

00:27:12,120 --> 00:27:15,590
second this is really important as well

00:27:16,460 --> 00:27:25,370
there you are so now we have time for

00:27:20,309 --> 00:27:25,370
questions right that's my guinea pig

00:27:29,549 --> 00:27:37,529
is tonight amazing for the questions

00:27:35,100 --> 00:27:43,049
there's a mic up front if anybody has

00:27:37,529 --> 00:27:45,029
any I have a question so say I'm

00:27:43,049 --> 00:27:46,499
developing a library and I want to use

00:27:45,029 --> 00:27:48,960
logging right but I don't want to

00:27:46,499 --> 00:27:50,519
presume what my users might configure

00:27:48,960 --> 00:27:53,340
how my users might configure the logging

00:27:50,519 --> 00:27:55,259
module how should I go about doing that

00:27:53,340 --> 00:27:56,610
do I just like call the module get the

00:27:55,259 --> 00:27:58,499
logger for the module name and then log

00:27:56,610 --> 00:28:01,759
to that and leave it on them or what do

00:27:58,499 --> 00:28:05,639
I do yeah so my advice would be that you

00:28:01,759 --> 00:28:08,070
log as as you think that it's useful for

00:28:05,639 --> 00:28:09,450
your users in the sense of you want to

00:28:08,070 --> 00:28:11,669
log the information that will help them

00:28:09,450 --> 00:28:13,139
travel through the issues and something

00:28:11,669 --> 00:28:15,239
really important that I see a lot is

00:28:13,139 --> 00:28:16,590
don't log errors on your library if

00:28:15,239 --> 00:28:18,090
there is an error in your library and

00:28:16,590 --> 00:28:19,590
you're going to throw an exception don't

00:28:18,090 --> 00:28:21,720
log it as well because it can happen

00:28:19,590 --> 00:28:23,429
that your client might want to just

00:28:21,720 --> 00:28:24,929
capture the exception and ignore it and

00:28:23,429 --> 00:28:26,820
if you are logging an error then you are

00:28:24,929 --> 00:28:32,220
forcing them to put a higher trace order

00:28:26,820 --> 00:28:34,320
on your library that make sense hello

00:28:32,220 --> 00:28:35,609
have a question about multiple

00:28:34,320 --> 00:28:37,230
inheritance you mentioned at the

00:28:35,609 --> 00:28:41,220
beginning that there is no such thing

00:28:37,230 --> 00:28:43,830
and it actually disappoints a little so

00:28:41,220 --> 00:28:46,049
is there any way to implement multiple

00:28:43,830 --> 00:28:49,409
inheritance in case I have some specific

00:28:46,049 --> 00:28:51,509
logger but I uses it in different models

00:28:49,409 --> 00:28:54,450
and I want to have the same configure

00:28:51,509 --> 00:28:55,649
the same logger yes so the only thing

00:28:54,450 --> 00:28:57,869
you can do so the only thing that's

00:28:55,649 --> 00:29:00,059
shared across logger by inheritance is

00:28:57,869 --> 00:29:02,999
as we said the the level that's going to

00:29:00,059 --> 00:29:05,129
take by default if no one is set and the

00:29:02,999 --> 00:29:07,649
handle studied have so usually what you

00:29:05,129 --> 00:29:09,059
would see is that multiple loggers have

00:29:07,649 --> 00:29:10,649
seen situation like that you'll see that

00:29:09,059 --> 00:29:13,590
multiple loggers will just have the same

00:29:10,649 --> 00:29:15,539
list of handlers and because the code of

00:29:13,590 --> 00:29:17,519
you know the configuration code is

00:29:15,539 --> 00:29:20,549
actually in the handler it's just fine

00:29:17,519 --> 00:29:24,840
to list them as as a list you see I

00:29:20,549 --> 00:29:27,299
don't know if I explained - well thank

00:29:24,840 --> 00:29:37,259
you one last question

00:29:27,299 --> 00:29:39,690
ok after that it was a great talk do you

00:29:37,259 --> 00:29:40,799
have any suggestions how to do logging

00:29:39,690 --> 00:29:41,549
in multi-processing

00:29:40,799 --> 00:29:43,499
so

00:29:41,549 --> 00:29:45,749
multiple processes there are some

00:29:43,499 --> 00:29:47,610
particle issues there yes that's that's

00:29:45,749 --> 00:29:50,610
actually quite tricky so the problem

00:29:47,610 --> 00:29:51,960
when you have like if when you have like

00:29:50,610 --> 00:29:53,340
if you for work if you have multi

00:29:51,960 --> 00:29:55,619
processes the problem is that you cannot

00:29:53,340 --> 00:29:56,909
have multiple processes logging into the

00:29:55,619 --> 00:29:59,100
same file because everything will get

00:29:56,909 --> 00:30:00,960
messed up so the useful suggestion there

00:29:59,100 --> 00:30:03,269
is to use a queue handler as we saw

00:30:00,960 --> 00:30:05,129
before and then have a single process

00:30:03,269 --> 00:30:06,419
doing all the login so basically you'll

00:30:05,129 --> 00:30:08,429
have you know when you fork and

00:30:06,419 --> 00:30:10,320
everything the that queue will have the

00:30:08,429 --> 00:30:12,029
two ends and then you just in queue all

00:30:10,320 --> 00:30:13,200
the logs and a single process will do

00:30:12,029 --> 00:30:15,230
all the processing and there won't be an

00:30:13,200 --> 00:30:17,100
issue

00:30:15,230 --> 00:30:19,769
thank you

00:30:17,100 --> 00:30:21,780
we're done for the session the Mario

00:30:19,769 --> 00:30:28,539
would be outside thank you for

00:30:21,780 --> 00:30:28,539

YouTube URL: https://www.youtube.com/watch?v=Pbz1fo7KlGg


