Title: Janet Matsen - Programming microbes using Python - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Janet Matsen

The genome of a typical microbe contains roughly 5 million base pairs of DNA including more than 4000 genes, which provide the instructions for cellular replication, energy metabolism, and other biological processes. At Zymergen, we edit DNA to design microbes with improved ability to produce valuable materials and molecules. Microbes with these edits are built and tested in high throughput by our fleet of robots. Genomes are far too large for exhaustive search, so identifying which edits to make requires machine learning on non-standard features. Our task to extract information from trees, networks, and graphs of independently representable knowledge bases (metabolism, genomics, regulation), in ways that respect the strongly causal relationships between systems. In this talk, I will describe how we use Pythonâ€™s biological packages (e.g. BioPython, CobraPy, Escher, goatools) and other packages (NetworkX, TensorFlow, PyStan, AirFlow) to extract machine learning features and predict which genetic edits will produce high-performance microbes.

Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:00,580 --> 00:00:07,740
[Applause]

00:00:05,779 --> 00:00:10,740
thank you all for coming to my talk

00:00:07,740 --> 00:00:13,049
today as she just said my name is Janet

00:00:10,740 --> 00:00:14,790
I'm a data scientist at San Rajan and

00:00:13,049 --> 00:00:17,460
I'm here today to tell you about

00:00:14,790 --> 00:00:19,619
programming microbes using Python I've

00:00:17,460 --> 00:00:21,090
just tweeted out my slides or you can

00:00:19,619 --> 00:00:25,470
grab them on bitly at programming

00:00:21,090 --> 00:00:27,390
microbes so as you all know we've been

00:00:25,470 --> 00:00:29,730
using microbes to produce valuable

00:00:27,390 --> 00:00:32,579
substances like beer and wine for

00:00:29,730 --> 00:00:34,410
millennia it may surprise you to hear

00:00:32,579 --> 00:00:36,420
that in recent decades we've learned to

00:00:34,410 --> 00:00:39,899
produce a much broader diversity of

00:00:36,420 --> 00:00:42,329
molecules using these microbes for

00:00:39,899 --> 00:00:44,100
example we can produce a number of

00:00:42,329 --> 00:00:46,620
different drugs including synthetic

00:00:44,100 --> 00:00:50,070
insulin using microbes like e.coli and

00:00:46,620 --> 00:00:52,050
yeast we can produce a variety of

00:00:50,070 --> 00:00:53,879
flavors and fragrances that are in

00:00:52,050 --> 00:00:56,610
products we're all quite familiar with

00:00:53,879 --> 00:00:58,770
and increasingly we're finding

00:00:56,610 --> 00:01:00,660
applications for biological materials in

00:00:58,770 --> 00:01:02,969
products or in processes like

00:01:00,660 --> 00:01:06,330
electronics manufacturing that are

00:01:02,969 --> 00:01:09,210
rather high-tech this is where zymogen

00:01:06,330 --> 00:01:11,460
comes in because for alcohol you can get

00:01:09,210 --> 00:01:13,049
microbes that naturally produce it but

00:01:11,460 --> 00:01:14,700
more and more for the kinds of chemicals

00:01:13,049 --> 00:01:16,560
we want to make you have to do netic we

00:01:14,700 --> 00:01:18,299
alter the organisms to get them to

00:01:16,560 --> 00:01:21,210
produce the compounds are interested in

00:01:18,299 --> 00:01:23,280
if you're wondering that's not an

00:01:21,210 --> 00:01:25,710
accurate depiction of how DNA editing

00:01:23,280 --> 00:01:30,240
works but I'll show you a picture that's

00:01:25,710 --> 00:01:31,710
slightly more realistic later so the

00:01:30,240 --> 00:01:34,770
demand for the chemicals that I've just

00:01:31,710 --> 00:01:37,500
shown you is enormous sales are around

00:01:34,770 --> 00:01:39,390
80 billion dollars per year and so to

00:01:37,500 --> 00:01:42,060
keep up with that demand we grow these

00:01:39,390 --> 00:01:45,990
microbes in really large tanks they can

00:01:42,060 --> 00:01:48,060
be several stories tall and take up to

00:01:45,990 --> 00:01:51,780
hundreds of thousands of liters of

00:01:48,060 --> 00:01:53,909
liquid in them of course Simonton can't

00:01:51,780 --> 00:01:56,009
do experiments at that scale so instead

00:01:53,909 --> 00:02:00,060
we scale down our experiments and try to

00:01:56,009 --> 00:02:02,189
do them in as fast a way of possible our

00:02:00,060 --> 00:02:02,850
high throughput testing looks something

00:02:02,189 --> 00:02:06,299
like this

00:02:02,850 --> 00:02:08,729
we first need to make variants of

00:02:06,299 --> 00:02:11,400
microbes where each microbe is running a

00:02:08,729 --> 00:02:14,540
different genetic program they all have

00:02:11,400 --> 00:02:17,370
different genetic compositions

00:02:14,540 --> 00:02:19,739
next we grow and test these organisms in

00:02:17,370 --> 00:02:22,620
parallel using small volumes that we

00:02:19,739 --> 00:02:26,489
parallel eyes such as having 96-well

00:02:22,620 --> 00:02:28,170
plates like this we can use these to

00:02:26,489 --> 00:02:30,510
measure the performance and figure out

00:02:28,170 --> 00:02:31,920
which strains are improved relative to

00:02:30,510 --> 00:02:34,890
the parent strains that we built them

00:02:31,920 --> 00:02:37,799
from and then when we find candidates

00:02:34,890 --> 00:02:40,799
that are promising we can submit those

00:02:37,799 --> 00:02:42,150
into larger scale benchtop reactor tests

00:02:40,799 --> 00:02:44,010
where we have a more controlled

00:02:42,150 --> 00:02:47,549
environment and more rigorously test how

00:02:44,010 --> 00:02:49,470
well these microbes perform every once

00:02:47,549 --> 00:02:51,900
in a while when we find a real winner we

00:02:49,470 --> 00:02:53,459
can send them to the big tanks and run

00:02:51,900 --> 00:02:59,420
the multimillion-dollar experiment to

00:02:53,459 --> 00:03:01,500
see how they really perform at scale our

00:02:59,420 --> 00:03:03,720
computational and challenges as I

00:03:01,500 --> 00:03:05,760
imagine are a few things first we're

00:03:03,720 --> 00:03:08,099
designing algorithms to help us design

00:03:05,760 --> 00:03:09,569
large numbers of microbial variants that

00:03:08,099 --> 00:03:13,769
are intended to have increased

00:03:09,569 --> 00:03:15,750
performance levels we also need to

00:03:13,769 --> 00:03:17,639
automate the collection of data and the

00:03:15,750 --> 00:03:19,230
ability to link different performance

00:03:17,639 --> 00:03:22,010
levels with the genetic compositions of

00:03:19,230 --> 00:03:24,720
those strains and we need to identify

00:03:22,010 --> 00:03:26,940
statistically significant improvements

00:03:24,720 --> 00:03:30,660
which can be tricky with experimental

00:03:26,940 --> 00:03:32,430
data we also want to predict large-scale

00:03:30,660 --> 00:03:34,440
performance from smaller scale

00:03:32,430 --> 00:03:38,129
experiments such as prediction of the

00:03:34,440 --> 00:03:39,930
tank performance from the plates all

00:03:38,129 --> 00:03:41,730
this is made possible by zymogen

00:03:39,930 --> 00:03:43,919
intense investment in robots and

00:03:41,730 --> 00:03:45,540
automation and this movie gives you some

00:03:43,919 --> 00:03:48,690
flavor of some of the things we do with

00:03:45,540 --> 00:03:50,910
robots so the one on the top left is a

00:03:48,690 --> 00:03:52,590
robot that's picking up liquid from

00:03:50,910 --> 00:03:55,560
wells in one plate and moving them to

00:03:52,590 --> 00:03:56,940
another the one in the middle is picking

00:03:55,560 --> 00:03:58,530
up different genetic variants from a

00:03:56,940 --> 00:04:00,810
plate that you might want to test and

00:03:58,530 --> 00:04:02,280
the one on the right is inserting a

00:04:00,810 --> 00:04:06,720
plate into a machine to measure the

00:04:02,280 --> 00:04:08,099
performance of the selected strains now

00:04:06,720 --> 00:04:09,959
I realize this is not a genetic

00:04:08,099 --> 00:04:12,060
engineering conference and so I wanted

00:04:09,959 --> 00:04:13,889
to pause and explain what we do in terms

00:04:12,060 --> 00:04:17,489
that are more familiar to this sort of

00:04:13,889 --> 00:04:19,799
crowd we often start with a human

00:04:17,489 --> 00:04:22,049
interpretable idea about what we want to

00:04:19,799 --> 00:04:23,969
try like let's perturb gene X because

00:04:22,049 --> 00:04:26,520
that gene is known to be important for

00:04:23,969 --> 00:04:29,140
producing a chemical we're interested in

00:04:26,520 --> 00:04:31,240
the first thing we need to do is compile

00:04:29,140 --> 00:04:33,880
that human interpretable idea into the

00:04:31,240 --> 00:04:35,920
low-level language of DNA and we do this

00:04:33,880 --> 00:04:39,430
using a program we'll be both in-house

00:04:35,920 --> 00:04:41,380
in Python that's called helix helix also

00:04:39,430 --> 00:04:43,240
helps us generate the instructions to

00:04:41,380 --> 00:04:47,050
build that loop of DNA and to check that

00:04:43,240 --> 00:04:48,520
it was correctly and constructed we then

00:04:47,050 --> 00:04:50,380
need to apply this DNA into a new

00:04:48,520 --> 00:04:52,660
organism and this looks actually a lot

00:04:50,380 --> 00:04:54,970
like git patch where there's a region of

00:04:52,660 --> 00:04:56,920
sequence similarity before and after the

00:04:54,970 --> 00:05:00,730
change we're encoding that specifies

00:04:56,920 --> 00:05:02,770
where it gets integrated in we take

00:05:00,730 --> 00:05:05,170
these modified organisms and we put them

00:05:02,770 --> 00:05:07,300
in these plates which we can think of as

00:05:05,170 --> 00:05:09,400
being like unit tests because they're

00:05:07,300 --> 00:05:11,650
the smallest and fastest tests we can do

00:05:09,400 --> 00:05:13,960
that give you an early indication of how

00:05:11,650 --> 00:05:15,820
a unit is performing but it's known to

00:05:13,960 --> 00:05:21,970
not reflect how it will actually be used

00:05:15,820 --> 00:05:23,980
as scale we can then do the more

00:05:21,970 --> 00:05:26,200
intensive integration test once in a

00:05:23,980 --> 00:05:28,810
while and these are tests that are

00:05:26,200 --> 00:05:30,670
designed to be much more reflective of

00:05:28,810 --> 00:05:34,360
how the code how the code or the

00:05:30,670 --> 00:05:36,340
organism will work at scale and just

00:05:34,360 --> 00:05:38,290
like code we get to commit the physical

00:05:36,340 --> 00:05:40,960
organism to our freezers and it's

00:05:38,290 --> 00:05:42,610
genetic composition and this means that

00:05:40,960 --> 00:05:44,770
later we can check out those organisms

00:05:42,610 --> 00:05:46,510
from the freezer for more experiments or

00:05:44,770 --> 00:05:49,780
check out their genetic compositions to

00:05:46,510 --> 00:05:51,460
do data analysis similarly we can take

00:05:49,780 --> 00:05:53,260
two genetic compositions and do

00:05:51,460 --> 00:05:55,060
something like a git diff to figure out

00:05:53,260 --> 00:06:00,070
which genetic edits caused an

00:05:55,060 --> 00:06:01,840
interesting change in performance so our

00:06:00,070 --> 00:06:03,730
cat zymogen has some challenges that

00:06:01,840 --> 00:06:05,410
aren't typical in the average technology

00:06:03,730 --> 00:06:08,920
company and I wanted to highlight some

00:06:05,410 --> 00:06:11,470
of those themes the first is that the

00:06:08,920 --> 00:06:12,220
DNA search space we're optimizing in is

00:06:11,470 --> 00:06:14,920
huge

00:06:12,220 --> 00:06:18,100
the average microbial genome contains

00:06:14,920 --> 00:06:21,430
about four thousand or four million

00:06:18,100 --> 00:06:23,050
characters of DNA and those can be

00:06:21,430 --> 00:06:26,320
organized into a few thousand different

00:06:23,050 --> 00:06:28,840
genes to simplify the representation but

00:06:26,320 --> 00:06:30,730
despite great advances in biology we

00:06:28,840 --> 00:06:33,160
still only have good understanding about

00:06:30,730 --> 00:06:35,320
for about half of those genes for what

00:06:33,160 --> 00:06:36,940
their function is and so it's really

00:06:35,320 --> 00:06:38,830
like we're optimizing a code base where

00:06:36,940 --> 00:06:41,430
we have kind of vague understanding of

00:06:38,830 --> 00:06:43,870
what all the functions

00:06:41,430 --> 00:06:45,330
to give you an idea of what it's like to

00:06:43,870 --> 00:06:48,460
explore this experimentally

00:06:45,330 --> 00:06:50,559
imagine you want to perturb every gene

00:06:48,460 --> 00:06:53,409
in a genome for a genome with 4,000

00:06:50,559 --> 00:06:55,719
genes if you only wanted to look at

00:06:53,409 --> 00:06:58,089
single perturbations two genes then

00:06:55,719 --> 00:07:00,460
you'd only have to build 4,000 strains

00:06:58,089 --> 00:07:04,870
and do 4,000 experiments and that's easy

00:07:00,460 --> 00:07:06,879
for zymogen however zymogen often wants

00:07:04,870 --> 00:07:08,409
to build strains with many many many

00:07:06,879 --> 00:07:09,879
more changes in them and the

00:07:08,409 --> 00:07:12,819
combinatorics of this space where

00:07:09,879 --> 00:07:15,370
exploring gets to be it quickly outgrows

00:07:12,819 --> 00:07:18,099
what we can do experimentally so if you

00:07:15,370 --> 00:07:19,539
wanted to try combinations of six gene

00:07:18,099 --> 00:07:22,149
edits and you wanted to explore that

00:07:19,539 --> 00:07:25,059
space exhaustively you have to build

00:07:22,149 --> 00:07:27,129
4,000 choose six strains and that would

00:07:25,059 --> 00:07:30,069
lead you to 10 to the 17th different

00:07:27,129 --> 00:07:32,080
experiments you want to run and now even

00:07:30,069 --> 00:07:34,719
if we could run experiments at a rate of

00:07:32,080 --> 00:07:37,809
1 per second it would still take us more

00:07:34,719 --> 00:07:40,330
than 10 to the 10 years to explore that

00:07:37,809 --> 00:07:42,819
space and that's the age of the universe

00:07:40,330 --> 00:07:44,499
so we need to do something smarter and

00:07:42,819 --> 00:07:46,149
that motivates why we're investing so

00:07:44,499 --> 00:07:50,830
heavily in machine learning to design

00:07:46,149 --> 00:07:52,629
our strains another aspect of what makes

00:07:50,830 --> 00:07:55,449
genome optimization hard is that we

00:07:52,629 --> 00:07:57,039
can't just simulate so if you've been

00:07:55,449 --> 00:07:58,599
following the news and artificial

00:07:57,039 --> 00:08:01,889
intelligence last year you'll be

00:07:58,599 --> 00:08:04,419
familiar with the idea that we can use

00:08:01,889 --> 00:08:07,209
algorithms that can play themselves at

00:08:04,419 --> 00:08:09,249
games like go and that this can help

00:08:07,209 --> 00:08:12,520
train an algorithm to be even great NGO

00:08:09,249 --> 00:08:15,789
champions of course these simulations

00:08:12,520 --> 00:08:18,009
require a very earthy this strategy

00:08:15,789 --> 00:08:19,749
requires very accurate simulations of

00:08:18,009 --> 00:08:22,089
your environment which for this would be

00:08:19,749 --> 00:08:24,490
the game of go and so you might think we

00:08:22,089 --> 00:08:26,889
could apply this to microbes but

00:08:24,490 --> 00:08:29,020
microbes despite their small size are

00:08:26,889 --> 00:08:32,969
actually much more complicated and there

00:08:29,020 --> 00:08:32,969
was no such simulation that we can use

00:08:33,089 --> 00:08:39,550
another aspect is this phenomena called

00:08:35,800 --> 00:08:41,409
epistasis which is the fact that

00:08:39,550 --> 00:08:44,529
combinations of genetic edits can have

00:08:41,409 --> 00:08:47,019
unpredictable effects so you might think

00:08:44,529 --> 00:08:48,699
that if they're interesting gene X is

00:08:47,019 --> 00:08:50,620
important for the producing the chemical

00:08:48,699 --> 00:08:52,900
you're interested in that increasing the

00:08:50,620 --> 00:08:57,300
expression level might help produce more

00:08:52,900 --> 00:08:59,980
Chemical however bad things can happen

00:08:57,300 --> 00:09:01,900
I'm not a fan of red meat actually but

00:08:59,980 --> 00:09:03,970
imagine you're in a hamburger producing

00:09:01,900 --> 00:09:07,210
factory and your job is to optimize the

00:09:03,970 --> 00:09:09,340
process and you notice there's the key

00:09:07,210 --> 00:09:10,810
step of paddy farming where people have

00:09:09,340 --> 00:09:15,760
been putting together these patties by

00:09:10,810 --> 00:09:17,470
hand and you find out about this amazing

00:09:15,760 --> 00:09:19,240
new machine that's gonna increase your

00:09:17,470 --> 00:09:20,950
rate of paddy forming by thousand fold

00:09:19,240 --> 00:09:22,690
and so you think this is awesome

00:09:20,950 --> 00:09:24,070
we're gonna get this machine and we're

00:09:22,690 --> 00:09:27,280
gonna speed up our operations that that

00:09:24,070 --> 00:09:29,080
was enfold well if your downstream

00:09:27,280 --> 00:09:31,930
operations aren't set up for this

00:09:29,080 --> 00:09:33,730
increased rate of paddy formation you

00:09:31,930 --> 00:09:36,130
could quickly overwhelm your factory

00:09:33,730 --> 00:09:38,070
floor with piles of raw meat and nobody

00:09:36,130 --> 00:09:40,150
wants that

00:09:38,070 --> 00:09:41,860
oddly this is actually a really good

00:09:40,150 --> 00:09:44,560
analogy for some principles in

00:09:41,860 --> 00:09:47,920
engineering microbes because that

00:09:44,560 --> 00:09:50,530
hamburger meat is a good analogy for a

00:09:47,920 --> 00:09:52,540
chemical in a cell where you might need

00:09:50,530 --> 00:09:54,940
high rates of reaction going through a

00:09:52,540 --> 00:09:56,890
series of reactions but if you don't

00:09:54,940 --> 00:09:58,330
have the downstream reaction set up to

00:09:56,890 --> 00:10:01,000
handle the increased supply of an

00:09:58,330 --> 00:10:02,500
important chemical you can accumulate

00:10:01,000 --> 00:10:05,890
that chemical and it actually can kill

00:10:02,500 --> 00:10:07,450
the cell so this is just one flavor of

00:10:05,890 --> 00:10:08,740
epistasis and there's many kinds in

00:10:07,450 --> 00:10:10,540
biology that make our optimization

00:10:08,740 --> 00:10:14,680
challenging hard our optimization

00:10:10,540 --> 00:10:16,930
challenge heart another aspect is that

00:10:14,680 --> 00:10:20,080
we are balancing two objective functions

00:10:16,930 --> 00:10:21,790
that are really at odds on the one hand

00:10:20,080 --> 00:10:23,470
we need cells that are happy and healthy

00:10:21,790 --> 00:10:26,020
so that when we put them in those big

00:10:23,470 --> 00:10:29,140
tanks they can grow and divide and fill

00:10:26,020 --> 00:10:30,910
up those large volumes but on the other

00:10:29,140 --> 00:10:32,560
hand we need cells that can produce a

00:10:30,910 --> 00:10:35,860
lot of chemical because ultimately

00:10:32,560 --> 00:10:37,540
that's why we're growing them and to

00:10:35,860 --> 00:10:40,330
give some context about how hard we push

00:10:37,540 --> 00:10:42,100
this balance we often can make microbes

00:10:40,330 --> 00:10:45,040
that can produce 90% of their

00:10:42,100 --> 00:10:47,350
theoretical maximum which going back to

00:10:45,040 --> 00:10:49,180
the cow analogy would be like feeding a

00:10:47,350 --> 00:10:51,760
cow 100 pounds of grain and getting out

00:10:49,180 --> 00:10:53,380
90 pounds of butter so this balance is

00:10:51,760 --> 00:10:58,690
important and we want to push it really

00:10:53,380 --> 00:11:01,660
hard that's it for cow analogies the

00:10:58,690 --> 00:11:03,460
last aspect of our challenge is that our

00:11:01,660 --> 00:11:05,590
experiments it's anagen are unusually

00:11:03,460 --> 00:11:06,350
expensive and time-consuming compared to

00:11:05,590 --> 00:11:08,900
other data science

00:11:06,350 --> 00:11:11,060
teams so if you're a more traditional

00:11:08,900 --> 00:11:13,430
technology company like maybe a web

00:11:11,060 --> 00:11:15,470
analytics company your experiment could

00:11:13,430 --> 00:11:18,200
be as simple as revealing two different

00:11:15,470 --> 00:11:20,090
versions of a website and you might

00:11:18,200 --> 00:11:21,680
launch that experiment and within a day

00:11:20,090 --> 00:11:23,780
you could have millions of independent

00:11:21,680 --> 00:11:27,500
observations about which option works

00:11:23,780 --> 00:11:29,450
better at zymogen on the other hand for

00:11:27,500 --> 00:11:31,010
every idea we want to test we have to

00:11:29,450 --> 00:11:33,560
build a living organism

00:11:31,010 --> 00:11:36,200
and measure the amount of chemical it

00:11:33,560 --> 00:11:38,270
can produce and so as a result our

00:11:36,200 --> 00:11:40,160
process takes orders of magnitude more

00:11:38,270 --> 00:11:44,420
time and money and this affects some of

00:11:40,160 --> 00:11:48,020
our strategies as well so to recap the

00:11:44,420 --> 00:11:49,730
challenge is we have this large genome

00:11:48,020 --> 00:11:51,470
that we're trying to optimize and we

00:11:49,730 --> 00:11:54,290
have only actually vague understanding

00:11:51,470 --> 00:11:56,630
of how all the pieces work we don't have

00:11:54,290 --> 00:11:58,160
access to accurate simulations and so we

00:11:56,630 --> 00:12:01,310
can't just jump on some of the

00:11:58,160 --> 00:12:03,620
reinforcement learning trends we're

00:12:01,310 --> 00:12:05,360
balancing multiple objective functions

00:12:03,620 --> 00:12:06,860
that are all at odds because they're all

00:12:05,360 --> 00:12:09,800
very resource demanding for the cells

00:12:06,860 --> 00:12:14,090
and we have these expensive and

00:12:09,800 --> 00:12:15,710
time-consuming experiments that's not to

00:12:14,090 --> 00:12:17,090
say that zymogen doesn't have solutions

00:12:15,710 --> 00:12:18,920
and this crowd will be happy to hear

00:12:17,090 --> 00:12:24,230
that a lot of our solutions lean heavily

00:12:18,920 --> 00:12:26,120
on Python in predict in particular we

00:12:24,230 --> 00:12:28,610
are trying to bring together biological

00:12:26,120 --> 00:12:30,530
information with experimental results on

00:12:28,610 --> 00:12:33,290
how our strains perform to produce

00:12:30,530 --> 00:12:36,740
predictions about which genetic edits

00:12:33,290 --> 00:12:39,440
will help we like we talked about we

00:12:36,740 --> 00:12:41,690
compile these ideas into DNA and then we

00:12:39,440 --> 00:12:43,790
patch them into organisms which gives us

00:12:41,690 --> 00:12:46,520
new data to do analyses and derive

00:12:43,790 --> 00:12:48,110
results from and I really want to

00:12:46,520 --> 00:12:53,030
highlight how important Python is for

00:12:48,110 --> 00:12:54,680
keeping this moving at our place we're

00:12:53,030 --> 00:12:57,140
gonna focus the rest of the talk on my

00:12:54,680 --> 00:12:59,000
area as a data scientist which is the

00:12:57,140 --> 00:13:00,710
combination of biological features and

00:12:59,000 --> 00:13:05,360
experimental results to make predictions

00:13:00,710 --> 00:13:07,430
about what we should build next in

00:13:05,360 --> 00:13:08,960
particular our data science team is

00:13:07,430 --> 00:13:10,700
building out a strain recommendation

00:13:08,960 --> 00:13:12,260
platform that looks something like this

00:13:10,700 --> 00:13:14,510
where again we're bringing together

00:13:12,260 --> 00:13:16,850
biological information with experimental

00:13:14,510 --> 00:13:18,290
results to make models and we use the

00:13:16,850 --> 00:13:19,100
models to actually produce edit

00:13:18,290 --> 00:13:21,500
recommendation

00:13:19,100 --> 00:13:23,000
which are called such because we're

00:13:21,500 --> 00:13:26,690
delivering them to scientists to choose

00:13:23,000 --> 00:13:28,730
which of them they want to build these

00:13:26,690 --> 00:13:30,890
recommendations generate new data and

00:13:28,730 --> 00:13:32,510
then our data science team has two

00:13:30,890 --> 00:13:34,420
additional steps we need to clean up the

00:13:32,510 --> 00:13:37,490
data for feeding it back into our loop

00:13:34,420 --> 00:13:38,120
the first is removing of experimental

00:13:37,490 --> 00:13:39,470
outliers

00:13:38,120 --> 00:13:41,930
which is natural and experimental

00:13:39,470 --> 00:13:44,390
processes and also we need to normalize

00:13:41,930 --> 00:13:48,290
the data because there's can be

00:13:44,390 --> 00:13:50,960
variation by batch and across time again

00:13:48,290 --> 00:13:52,970
Python is essential for what we do like

00:13:50,960 --> 00:13:56,860
any data science team we use pandas

00:13:52,970 --> 00:13:59,300
everywhere we use scikit-learn for our

00:13:56,860 --> 00:14:02,900
recommendation models and for helping

00:13:59,300 --> 00:14:04,340
with outlier removal we can support our

00:14:02,900 --> 00:14:07,700
models and recommendations with

00:14:04,340 --> 00:14:11,780
tensorflow and we use pi stand to

00:14:07,700 --> 00:14:13,970
normalize our data all of this happens

00:14:11,780 --> 00:14:17,840
continuously and an automated way by

00:14:13,970 --> 00:14:19,490
support with airflow so we're gonna to

00:14:17,840 --> 00:14:20,660
fund the rest of the talk on an area

00:14:19,490 --> 00:14:23,090
I've been working on the most recently

00:14:20,660 --> 00:14:24,410
which is how we can extract machine

00:14:23,090 --> 00:14:26,210
learning features from biological

00:14:24,410 --> 00:14:27,770
information because again we need to

00:14:26,210 --> 00:14:31,400
explore in our search space as

00:14:27,770 --> 00:14:32,900
efficiently as possible and in

00:14:31,400 --> 00:14:36,680
particular we're going to focus on

00:14:32,900 --> 00:14:38,150
metabolism so metabolism describes the

00:14:36,680 --> 00:14:40,520
set of chemical reactions in the cell

00:14:38,150 --> 00:14:45,260
which is a natural word because we call

00:14:40,520 --> 00:14:47,630
the individual chemicals metabolites you

00:14:45,260 --> 00:14:49,280
can write an Akuma Corea in the style

00:14:47,630 --> 00:14:52,220
I've shown here style you've probably

00:14:49,280 --> 00:14:55,220
seen in your chemistry classes or you

00:14:52,220 --> 00:14:56,420
can write it in a graphical notation and

00:14:55,220 --> 00:14:58,370
when you write it in this graphical

00:14:56,420 --> 00:15:01,130
notation it becomes easy to assemble

00:14:58,370 --> 00:15:03,470
these metabolic maps which you can think

00:15:01,130 --> 00:15:05,780
of as being a lot like a Google Street

00:15:03,470 --> 00:15:07,820
map and that the lines connect

00:15:05,780 --> 00:15:09,890
interesting places you might want to go

00:15:07,820 --> 00:15:12,050
and the dots are places of interest

00:15:09,890 --> 00:15:16,520
where for a cell the place of interest

00:15:12,050 --> 00:15:18,230
is actually a chemical so this is a

00:15:16,520 --> 00:15:21,260
cartoon of metabolism but actually

00:15:18,230 --> 00:15:23,300
metabolism is quite complex and this is

00:15:21,260 --> 00:15:25,760
just a screenshot of the upper corner of

00:15:23,300 --> 00:15:29,750
a poster you can order that shows to the

00:15:25,760 --> 00:15:31,280
topology of metabolism as you can see

00:15:29,750 --> 00:15:32,570
there's a lot of reactions and the

00:15:31,280 --> 00:15:35,420
topology is actually quite

00:15:32,570 --> 00:15:38,000
located and so as important as this

00:15:35,420 --> 00:15:39,800
information is for our data science

00:15:38,000 --> 00:15:41,510
needs we clearly need a way to extract

00:15:39,800 --> 00:15:43,100
some information from it that's more

00:15:41,510 --> 00:15:47,390
amenable to traditional machine learning

00:15:43,100 --> 00:15:49,340
techniques fortunately for us there's

00:15:47,390 --> 00:15:51,050
this package called Cobra Pi that we can

00:15:49,340 --> 00:15:52,760
use and so I'm going to walk through an

00:15:51,050 --> 00:15:57,650
example of extracting features using

00:15:52,760 --> 00:16:00,470
Cobra Pi in particular let's pretend we

00:15:57,650 --> 00:16:03,970
wanted to make MSG which is the sodium

00:16:00,470 --> 00:16:06,200
form of glutamate monosodium glutamate

00:16:03,970 --> 00:16:08,870
glutamate is actually one of the 20

00:16:06,200 --> 00:16:11,870
natural amino acids and is essential for

00:16:08,870 --> 00:16:14,810
our health and vitality it was

00:16:11,870 --> 00:16:17,930
originally isolated by extraction from

00:16:14,810 --> 00:16:19,610
ms or from seaweed and then later they

00:16:17,930 --> 00:16:24,020
figured out how to hydrolyze it from

00:16:19,610 --> 00:16:25,910
wheat but in the 1950s some clever

00:16:24,020 --> 00:16:27,410
Japanese researchers figured out that if

00:16:25,910 --> 00:16:29,300
you threw the right microbe in the right

00:16:27,410 --> 00:16:32,090
conditions it would actually produce

00:16:29,300 --> 00:16:33,530
glutamate really efficiently and so this

00:16:32,090 --> 00:16:37,100
process actually took over the world

00:16:33,530 --> 00:16:40,220
production for msg now

00:16:37,100 --> 00:16:42,020
MSG has some mixed perceptions from the

00:16:40,220 --> 00:16:43,280
public and because of this the marketing

00:16:42,020 --> 00:16:46,090
team has asked me to clarify that

00:16:43,280 --> 00:16:48,170
zymogen does not currently work on msg

00:16:46,090 --> 00:16:52,730
but nonetheless we're using it as our

00:16:48,170 --> 00:16:54,980
example so going back to metabolism this

00:16:52,730 --> 00:16:57,140
is a cartoon that shows a subset of the

00:16:54,980 --> 00:17:00,380
reactions like in the previous metabolic

00:16:57,140 --> 00:17:02,870
map we showed and here i've highlighted

00:17:00,380 --> 00:17:05,510
in green the route that you might take

00:17:02,870 --> 00:17:07,459
to convert a food like glucose or sugar

00:17:05,510 --> 00:17:11,000
into the chemical of interest

00:17:07,459 --> 00:17:13,339
glutamate I've colored the set of

00:17:11,000 --> 00:17:15,230
reactions that you could consider the

00:17:13,339 --> 00:17:17,810
most efficient green and these are

00:17:15,230 --> 00:17:20,060
called on pathway and the remaining

00:17:17,810 --> 00:17:22,280
reactions that are left gray you can

00:17:20,060 --> 00:17:23,930
call off pathway because they're not on

00:17:22,280 --> 00:17:28,550
that most important route to the

00:17:23,930 --> 00:17:30,670
chemical of interest extracting these

00:17:28,550 --> 00:17:33,770
features is pretty easy in Cobra Pi

00:17:30,670 --> 00:17:35,930
first you specify what the metabolic map

00:17:33,770 --> 00:17:38,270
structure looks like and then you

00:17:35,930 --> 00:17:41,210
specify an objective function that you

00:17:38,270 --> 00:17:42,800
want to solve for this gives you access

00:17:41,210 --> 00:17:45,550
to the data about what the most

00:17:42,800 --> 00:17:45,550
efficient route is

00:17:45,690 --> 00:17:50,760
in more detail it looks something like

00:17:47,610 --> 00:17:53,220
this the metabolic map you're specifying

00:17:50,760 --> 00:17:54,150
is actually it's represented nicely as a

00:17:53,220 --> 00:17:56,460
map in the previous slide but

00:17:54,150 --> 00:17:59,190
mathematically it's represented as this

00:17:56,460 --> 00:18:00,990
matrix where for every reaction you're

00:17:59,190 --> 00:18:05,460
specifying which different metabolites

00:18:00,990 --> 00:18:07,440
are produced and consumed you specify an

00:18:05,460 --> 00:18:09,350
objective function for us it's glutamate

00:18:07,440 --> 00:18:12,210
production and then you get out this

00:18:09,350 --> 00:18:13,590
reaction set of vectors Earth this

00:18:12,210 --> 00:18:16,980
reaction vector that describes those

00:18:13,590 --> 00:18:18,930
reaction rates and in biology we call

00:18:16,980 --> 00:18:22,460
these rates fluxes and this method is

00:18:18,930 --> 00:18:25,200
generally called flux balance analysis

00:18:22,460 --> 00:18:27,660
now getting these flux features is

00:18:25,200 --> 00:18:30,540
pretty easy and in code it's just these

00:18:27,660 --> 00:18:33,090
few steps you first load your metabolic

00:18:30,540 --> 00:18:35,130
model which are specified in systems

00:18:33,090 --> 00:18:37,020
biology markup language notation but

00:18:35,130 --> 00:18:40,710
ultimately are specifying the details of

00:18:37,020 --> 00:18:44,610
this matrix you then find the reaction

00:18:40,710 --> 00:18:46,650
you're interested in optimizing for you

00:18:44,610 --> 00:18:48,570
set the objective of that model to be

00:18:46,650 --> 00:18:51,600
that chemical of interest or that

00:18:48,570 --> 00:18:53,250
reaction of interest and then you use

00:18:51,600 --> 00:18:56,910
the built-in optimizer to find the most

00:18:53,250 --> 00:18:58,530
efficient route this gives you an object

00:18:56,910 --> 00:19:00,120
where you can loop over the different

00:18:58,530 --> 00:19:04,950
reactions in the object and you can

00:19:00,120 --> 00:19:06,540
write those results out to a summary now

00:19:04,950 --> 00:19:08,490
we talked about one objective so far

00:19:06,540 --> 00:19:10,800
which is optimizing from glutamate

00:19:08,490 --> 00:19:13,620
production but we can actually loop over

00:19:10,800 --> 00:19:16,680
multiple objectives and then that allows

00:19:13,620 --> 00:19:18,240
us to get a broader set of features so

00:19:16,680 --> 00:19:20,040
if you just run the last few lines of

00:19:18,240 --> 00:19:23,270
code using different objectives you can

00:19:20,040 --> 00:19:25,710
produce this matrix of flux features

00:19:23,270 --> 00:19:27,870
these are directly useful for machine

00:19:25,710 --> 00:19:31,020
learning they're in a friendly matrix

00:19:27,870 --> 00:19:32,280
format or you can refine these down into

00:19:31,020 --> 00:19:34,830
the kinds of labels we talked about

00:19:32,280 --> 00:19:37,530
earlier like on pathway and off pathway

00:19:34,830 --> 00:19:38,970
or potentially other labels like whether

00:19:37,530 --> 00:19:43,530
a gene is essential for the cells

00:19:38,970 --> 00:19:46,020
survival now some of you might be

00:19:43,530 --> 00:19:47,970
thinking wait a second I thought you

00:19:46,020 --> 00:19:49,830
told me we can't use simulations for

00:19:47,970 --> 00:19:52,200
self play and jump on the reinforcement

00:19:49,830 --> 00:19:55,800
learning bandwagon well there's really

00:19:52,200 --> 00:19:57,780
two reasons that's true the first is

00:19:55,800 --> 00:19:58,380
that we're really only modeling a subset

00:19:57,780 --> 00:20:01,190
of the react

00:19:58,380 --> 00:20:03,420
in the chemistry that happens in a cell

00:20:01,190 --> 00:20:05,070
there's a lot of things that happen in a

00:20:03,420 --> 00:20:06,960
cell that aren't really reactions like

00:20:05,070 --> 00:20:09,300
something could bind to DNA and affect

00:20:06,960 --> 00:20:11,310
the way genes are expressed and in

00:20:09,300 --> 00:20:12,510
addition there's also a lot of reactions

00:20:11,310 --> 00:20:16,290
that we don't understand well in the

00:20:12,510 --> 00:20:17,940
cell and so these models necessarily

00:20:16,290 --> 00:20:20,340
only include a fraction of the reactions

00:20:17,940 --> 00:20:21,660
and genes and so it's kind of like we're

00:20:20,340 --> 00:20:23,700
looking at just the corner of the game

00:20:21,660 --> 00:20:27,230
of the go board and that's not enough to

00:20:23,700 --> 00:20:27,230
do the reinforcement learning techniques

00:20:27,560 --> 00:20:33,060
additionally these models are

00:20:29,610 --> 00:20:35,730
steady-state and linear the matrix I'm

00:20:33,060 --> 00:20:38,370
showing is as specifying that system of

00:20:35,730 --> 00:20:39,900
linear equations and there's no time

00:20:38,370 --> 00:20:42,230
component so we're really just looking

00:20:39,900 --> 00:20:45,390
at a snapshot in time

00:20:42,230 --> 00:20:47,910
as a consequence we can't simulate the

00:20:45,390 --> 00:20:50,400
way a cell grows and divides or the way

00:20:47,910 --> 00:20:52,920
a culture expands in a volume of liquid

00:20:50,400 --> 00:20:54,810
and that means we can't simulate what's

00:20:52,920 --> 00:20:59,400
happening at scale the most important

00:20:54,810 --> 00:21:01,200
condition for us nonetheless these

00:20:59,400 --> 00:21:03,090
features are still very helpful and

00:21:01,200 --> 00:21:05,130
they're working so we're able to

00:21:03,090 --> 00:21:06,990
actively combine these flux type

00:21:05,130 --> 00:21:08,910
features with the experimental results

00:21:06,990 --> 00:21:10,080
on strain performance and we're

00:21:08,910 --> 00:21:13,560
generating models that are yielding

00:21:10,080 --> 00:21:15,480
useful recommendations which for context

00:21:13,560 --> 00:21:17,190
could be something like removing a gene

00:21:15,480 --> 00:21:22,200
that's harmful for the production of

00:21:17,190 --> 00:21:23,850
your chemical I wanted to highlight that

00:21:22,200 --> 00:21:26,700
all these maps that I've been showing

00:21:23,850 --> 00:21:29,570
are built using another Python package

00:21:26,700 --> 00:21:31,860
that's been great it's called Essure

00:21:29,570 --> 00:21:35,070
assure is built in Python and it really

00:21:31,860 --> 00:21:39,210
does a lot of the d3 work for us and if

00:21:35,070 --> 00:21:40,590
X tremendous are and so there's an

00:21:39,210 --> 00:21:41,910
editor where you can construct these

00:21:40,590 --> 00:21:44,370
maps for different chemicals you're

00:21:41,910 --> 00:21:46,470
interested in and it has lots of tooling

00:21:44,370 --> 00:21:48,360
built in to help you contextualize

00:21:46,470 --> 00:21:51,360
features you would extract from these

00:21:48,360 --> 00:21:53,430
types of networks you can give it a try

00:21:51,360 --> 00:21:55,110
on github without installing anything

00:21:53,430 --> 00:22:00,780
you can play with their interface and

00:21:55,110 --> 00:22:02,730
pretend you're a metabolic engineer so

00:22:00,780 --> 00:22:05,130
we only had time today to talk about

00:22:02,730 --> 00:22:06,540
features derived from metabolism but

00:22:05,130 --> 00:22:07,800
there are many other types we can draw

00:22:06,540 --> 00:22:09,150
from for biology and they're all

00:22:07,800 --> 00:22:11,490
important for achieving our machine

00:22:09,150 --> 00:22:14,820
learning goals

00:22:11,490 --> 00:22:16,590
there's gene ontology z' which are human

00:22:14,820 --> 00:22:18,870
interprete bulerias of gene function

00:22:16,590 --> 00:22:20,540
that are organized into directed acyclic

00:22:18,870 --> 00:22:23,100
graphs

00:22:20,540 --> 00:22:25,080
there's regulatory networks that

00:22:23,100 --> 00:22:27,210
describe how cells change their gene

00:22:25,080 --> 00:22:29,640
expression patterns in response as they

00:22:27,210 --> 00:22:31,880
grow or as they're experiencing changes

00:22:29,640 --> 00:22:34,770
in their environmental conditions

00:22:31,880 --> 00:22:36,900
there's the raw genome itself which is

00:22:34,770 --> 00:22:38,640
rich with sequence features and also

00:22:36,900 --> 00:22:41,120
contains information about how the genes

00:22:38,640 --> 00:22:43,800
are arranged

00:22:41,120 --> 00:22:47,010
there's also phylogenetic relationships

00:22:43,800 --> 00:22:50,130
which describe relationships between

00:22:47,010 --> 00:22:52,679
organisms and evolutionary time and also

00:22:50,130 --> 00:22:54,120
how different proteins are how the same

00:22:52,679 --> 00:22:57,900
protein and different organisms are

00:22:54,120 --> 00:23:02,460
related we also can use gene expression

00:22:57,900 --> 00:23:04,170
data and I highlighted how Python has

00:23:02,460 --> 00:23:06,390
this package Cobra Pi for that one case

00:23:04,170 --> 00:23:07,950
of features but there are excellent open

00:23:06,390 --> 00:23:10,610
source Python packages that we can use

00:23:07,950 --> 00:23:15,870
to extract features from all of these

00:23:10,610 --> 00:23:17,580
some of them are named here so that's

00:23:15,870 --> 00:23:20,670
all I have today and I really wanted to

00:23:17,580 --> 00:23:21,690
thank you all for two things first can

00:23:20,670 --> 00:23:23,340
anyone raise their hand if they've

00:23:21,690 --> 00:23:26,850
contributed to the materials that help

00:23:23,340 --> 00:23:30,030
teach new programmers awesome thank you

00:23:26,850 --> 00:23:33,750
so this picture is me a few years ago in

00:23:30,030 --> 00:23:35,190
the middle of my PhD and I was doing

00:23:33,750 --> 00:23:38,750
this kind of genetic engineering for

00:23:35,190 --> 00:23:41,580
renewable chemicals entirely by hand and

00:23:38,750 --> 00:23:42,900
with a lot of long days and weekends in

00:23:41,580 --> 00:23:45,000
the lab I came to understand that

00:23:42,900 --> 00:23:46,740
computer science and data science are

00:23:45,000 --> 00:23:48,630
really the way forward for mishit for

00:23:46,740 --> 00:23:50,250
this field and with the help of the

00:23:48,630 --> 00:23:52,650
tools and resources such as you've all

00:23:50,250 --> 00:23:54,540
built I was able to pivot really quite

00:23:52,650 --> 00:23:57,059
quickly into a full-time data scientist

00:23:54,540 --> 00:24:00,300
so thank you anyone who's helped with

00:23:57,059 --> 00:24:02,880
education of newer programmers I also

00:24:00,300 --> 00:24:04,410
wanted to thank anyone who's contributed

00:24:02,880 --> 00:24:07,470
to open source packages raise their hand

00:24:04,410 --> 00:24:09,179
if that's you Oh even more awesome so I

00:24:07,470 --> 00:24:10,890
showed a number of the packages that we

00:24:09,179 --> 00:24:13,080
use it it's a version but there's also

00:24:10,890 --> 00:24:14,910
many under the hood as well and like we

00:24:13,080 --> 00:24:16,800
have so much appreciation for all the

00:24:14,910 --> 00:24:18,420
tooling you all have built so thank you

00:24:16,800 --> 00:24:21,330
so much for those of you who've done

00:24:18,420 --> 00:24:24,330
that and so with that that's all I have

00:24:21,330 --> 00:24:25,380
I'm Janet Madson please reach out to me

00:24:24,330 --> 00:24:27,390
if you'd like to keep talking

00:24:25,380 --> 00:24:31,470
about this lunch is next so we could

00:24:27,390 --> 00:24:32,580
talk a long time if you want yeah and

00:24:31,470 --> 00:24:34,650
also please reach out if you're

00:24:32,580 --> 00:24:36,870
interested in zymogen as an employer we

00:24:34,650 --> 00:24:38,820
have a lot of amazing work to do and

00:24:36,870 --> 00:24:40,350
there's people with all backgrounds in

00:24:38,820 --> 00:24:41,790
fact I think more of the technology

00:24:40,350 --> 00:24:43,470
background comes from traditional

00:24:41,790 --> 00:24:45,630
technology rather than science like

00:24:43,470 --> 00:24:46,860
myself so please reach out if you're

00:24:45,630 --> 00:24:49,820
interested in the potential of working

00:24:46,860 --> 00:24:49,820
with us thank you

00:24:54,140 --> 00:24:56,200

YouTube URL: https://www.youtube.com/watch?v=5lYWxjSitIg


