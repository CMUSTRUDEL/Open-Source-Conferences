Title: Esther Nam - One weird trick to becoming a better software developer - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Esther Nam

Those of us who have worked in software development for longer than a few years probably feel we have an intuitive sense of what a great developer is. Some traits come more easily to mind than others when it comes to identifying a great developer. In this talk we will take a slightly different approach to evaluating software development best practices, and identify one underrated skill common to great software developers: empathy. I hope to demonstrate that cognitive and emotional empathy skills are critical to good software development. We will explore ways to cultivate this trait in order to become better developers, both for our own sakes and for the sake of the teams in which we work.

Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:01,370 --> 00:00:06,629
welcome everyone so next up we have

00:00:04,080 --> 00:00:07,890
estern am speaking on one weird trick to

00:00:06,629 --> 00:00:19,830
becoming a better software developer

00:00:07,890 --> 00:00:22,949
let's help welcome her all right thank

00:00:19,830 --> 00:00:24,269
you all for coming I'm here because I

00:00:22,949 --> 00:00:27,480
would like to be a great developer

00:00:24,269 --> 00:00:29,460
someday I've been a software developer

00:00:27,480 --> 00:00:31,230
now for about seven years and in my

00:00:29,460 --> 00:00:34,140
relatively short career I've worked at a

00:00:31,230 --> 00:00:36,390
number of companies and between work the

00:00:34,140 --> 00:00:38,160
SoCal Python meetup I helped to run and

00:00:36,390 --> 00:00:40,050
coming to conferences like PyCon I've

00:00:38,160 --> 00:00:42,469
had the good fortune of knowing at least

00:00:40,050 --> 00:00:44,460
a few developers whom I consider great

00:00:42,469 --> 00:00:46,410
I've been trying to figure out what they

00:00:44,460 --> 00:00:49,260
have in common because I don't believe

00:00:46,410 --> 00:00:52,050
that developer greatness is a fixed rate

00:00:49,260 --> 00:00:54,030
I take the growth mindset and believe

00:00:52,050 --> 00:00:56,809
that by working hard and practicing the

00:00:54,030 --> 00:00:59,309
right habits I too can achieve greatness

00:00:56,809 --> 00:01:00,059
but what exactly do I mean by a great

00:00:59,309 --> 00:01:01,980
developer

00:01:00,059 --> 00:01:06,570
I'll explain by way of a few

00:01:01,980 --> 00:01:08,340
illustrations meet goofus goofus is a

00:01:06,570 --> 00:01:10,770
developer who's been working at Acme

00:01:08,340 --> 00:01:12,090
widget co for six months she nailed her

00:01:10,770 --> 00:01:13,710
whiteboard interview with the most

00:01:12,090 --> 00:01:16,710
elegantly written algorithms the team

00:01:13,710 --> 00:01:18,750
had ever seen her first project involved

00:01:16,710 --> 00:01:21,000
building a slingshot prediction machine

00:01:18,750 --> 00:01:23,700
and she was excited because she'd built

00:01:21,000 --> 00:01:25,200
something similar at her previous job so

00:01:23,700 --> 00:01:28,020
she knew exactly how the machine should

00:01:25,200 --> 00:01:30,030
be designed goofus worked really hard

00:01:28,020 --> 00:01:32,340
for two weeks but when she was finished

00:01:30,030 --> 00:01:33,780
the product manager found that goofus

00:01:32,340 --> 00:01:36,540
had made some assumptions about the

00:01:33,780 --> 00:01:38,070
specs that weren't quite correct goofus

00:01:36,540 --> 00:01:40,619
worked hard without complaint to make

00:01:38,070 --> 00:01:42,060
every change but but the project ended

00:01:40,619 --> 00:01:47,610
up taking several weeks longer than

00:01:42,060 --> 00:01:50,520
expected goofus has a co-worker named

00:01:47,610 --> 00:01:52,290
gallant gallant has been working at Acme

00:01:50,520 --> 00:01:54,600
for only a little longer than goofus has

00:01:52,290 --> 00:01:56,969
but gantlet already has a process in

00:01:54,600 --> 00:01:59,100
place for new projects she sets up a

00:01:56,969 --> 00:02:01,140
very short daily meeting with the

00:01:59,100 --> 00:02:02,610
designer in QA lead so that they can

00:02:01,140 --> 00:02:05,399
give and receive feedback on features

00:02:02,610 --> 00:02:07,290
and change requests right away one day

00:02:05,399 --> 00:02:09,300
gallant went to lunch with the company's

00:02:07,290 --> 00:02:10,890
marketing analysts who mentioned that

00:02:09,300 --> 00:02:12,090
apart the gallant was building could be

00:02:10,890 --> 00:02:15,300
useful for another company

00:02:12,090 --> 00:02:16,650
project by adding some tracking Galant

00:02:15,300 --> 00:02:18,090
found she could easily add tracking

00:02:16,650 --> 00:02:20,430
within the current project scope and

00:02:18,090 --> 00:02:22,440
this offhand feature request ended up

00:02:20,430 --> 00:02:29,129
doubling Acme widget company's revenue

00:02:22,440 --> 00:02:30,870
for the year a final story goofus was

00:02:29,129 --> 00:02:32,849
tasked with developing an internal tool

00:02:30,870 --> 00:02:36,629
leading to junior developers on the

00:02:32,849 --> 00:02:38,430
project goofus was excited at the chance

00:02:36,629 --> 00:02:40,470
to teach the newbies how to code as well

00:02:38,430 --> 00:02:43,290
as she did and designed a framework that

00:02:40,470 --> 00:02:45,630
was really elegant and efficient however

00:02:43,290 --> 00:02:46,680
the junior developers had trouble even

00:02:45,630 --> 00:02:48,030
setting up their development

00:02:46,680 --> 00:02:51,180
environments in a way that let them

00:02:48,030 --> 00:02:52,530
start working on the project soon the

00:02:51,180 --> 00:02:54,090
junior developers stopped going to

00:02:52,530 --> 00:02:56,430
goofus with more of their dumb questions

00:02:54,090 --> 00:02:59,700
instead they started going to gallant

00:02:56,430 --> 00:03:01,470
for help because goofus had been too

00:02:59,700 --> 00:03:04,110
busy with optimizations and test cases

00:03:01,470 --> 00:03:06,060
to write any Doc's Galan had a message

00:03:04,110 --> 00:03:08,430
goofus constantly for more clarification

00:03:06,060 --> 00:03:09,870
on the architecture both senior

00:03:08,430 --> 00:03:11,640
developers ended up spending way too

00:03:09,870 --> 00:03:13,470
much time helping the junior developers

00:03:11,640 --> 00:03:15,299
on the project and the delivery date

00:03:13,470 --> 00:03:18,060
went further past the original deadline

00:03:15,299 --> 00:03:19,470
and even worse gallant had trouble

00:03:18,060 --> 00:03:21,090
meeting her own deadline on her own

00:03:19,470 --> 00:03:26,130
project because she'd been so busy

00:03:21,090 --> 00:03:28,410
helping out the others these stories are

00:03:26,130 --> 00:03:29,910
greatly exaggerated but I bet most of

00:03:28,410 --> 00:03:32,790
you have seen or experienced similar

00:03:29,910 --> 00:03:35,040
situations in your own jobs what are the

00:03:32,790 --> 00:03:36,569
qualities of developers like gallant but

00:03:35,040 --> 00:03:41,220
set them apart from developers like

00:03:36,569 --> 00:03:43,290
goofus well most of us tend to think

00:03:41,220 --> 00:03:45,750
first of technical ability when it comes

00:03:43,290 --> 00:03:47,849
to developer greatness this is from

00:03:45,750 --> 00:03:50,280
stack overflows annual survey with

00:03:47,849 --> 00:03:53,370
responses from around 64,000 developers

00:03:50,280 --> 00:03:54,840
in 2017 it can't be denied great

00:03:53,370 --> 00:03:59,190
developers must have a solid foundation

00:03:54,840 --> 00:04:01,349
of technical skills also great

00:03:59,190 --> 00:04:03,989
developers ship the right project at the

00:04:01,349 --> 00:04:06,239
right time often the emphasis is on the

00:04:03,989 --> 00:04:08,579
on-time part but the right product is

00:04:06,239 --> 00:04:10,380
just as important there's no point in

00:04:08,579 --> 00:04:12,419
writing software with perfect code and

00:04:10,380 --> 00:04:15,989
100% test coverage if nobody ends up

00:04:12,419 --> 00:04:18,750
using the darn thing now you may or may

00:04:15,989 --> 00:04:20,940
not find the top trait surprising and

00:04:18,750 --> 00:04:23,099
one metric that's not on here that I

00:04:20,940 --> 00:04:24,690
always come back to is if I worked with

00:04:23,099 --> 00:04:25,889
someone like gallant and they told me

00:04:24,690 --> 00:04:28,469
they were leaving the company

00:04:25,889 --> 00:04:29,909
would I consider following them how many

00:04:28,469 --> 00:04:33,599
of the other developers would feel the

00:04:29,909 --> 00:04:36,180
same way why do we want to work with

00:04:33,599 --> 00:04:38,280
great developers well they make good

00:04:36,180 --> 00:04:40,020
software they help us become better

00:04:38,280 --> 00:04:42,479
developers because we learned so much

00:04:40,020 --> 00:04:45,780
from them they make our jobs easier and

00:04:42,479 --> 00:04:47,400
maybe even more fun we software

00:04:45,780 --> 00:04:50,310
developers usually work as part of a

00:04:47,400 --> 00:04:52,229
team so thinking about the QA person

00:04:50,310 --> 00:04:54,300
testing our software or the DevOps

00:04:52,229 --> 00:04:56,699
person helping us package up our code to

00:04:54,300 --> 00:04:58,319
deploy to prod or the product manager

00:04:56,699 --> 00:05:01,229
who wants to show off cool new features

00:04:58,319 --> 00:05:02,969
to the company clients if we code with

00:05:01,229 --> 00:05:04,319
their needs in mind we'll be the

00:05:02,969 --> 00:05:07,529
developer everyone wants to work with

00:05:04,319 --> 00:05:10,680
and it turns out empathy skills are what

00:05:07,529 --> 00:05:12,029
helped great developers be so great so

00:05:10,680 --> 00:05:14,939
let's talk about this one weird thing

00:05:12,029 --> 00:05:18,479
called empathy first let's make sure we

00:05:14,939 --> 00:05:21,210
all understand what empathy is here's a

00:05:18,479 --> 00:05:22,650
simple definition that I like empathy is

00:05:21,210 --> 00:05:23,879
the experience of understanding another

00:05:22,650 --> 00:05:26,039
person's condition from their

00:05:23,879 --> 00:05:28,219
perspective you place yourself in their

00:05:26,039 --> 00:05:30,150
shoes and feel what they are feeling

00:05:28,219 --> 00:05:38,279
empathy is marked by a distinction

00:05:30,150 --> 00:05:41,129
between oneself and another there are

00:05:38,279 --> 00:05:45,060
two types of empathy one is emotional

00:05:41,129 --> 00:05:48,389
empathy which is not just about feeling

00:05:45,060 --> 00:05:50,250
compassion or being nice for example if

00:05:48,389 --> 00:05:52,050
your coworker is upset because they're

00:05:50,250 --> 00:05:54,180
hungry and this meeting you're all in is

00:05:52,050 --> 00:05:57,689
running late you may feel sorry for them

00:05:54,180 --> 00:05:59,699
that's sympathy but if you feel their

00:05:57,689 --> 00:06:01,830
hunger or you remember yourself being

00:05:59,699 --> 00:06:03,689
hungry in long meetings and it moves you

00:06:01,830 --> 00:06:05,490
to take action to help your coworker

00:06:03,689 --> 00:06:07,770
maybe you'll sneak them a snack or

00:06:05,490 --> 00:06:11,029
suggest out loud that we cut the meeting

00:06:07,770 --> 00:06:13,889
a little short you're feeling empathy

00:06:11,029 --> 00:06:15,479
there's also cognitive empathy which is

00:06:13,889 --> 00:06:18,539
the ability to understand something from

00:06:15,479 --> 00:06:20,550
the perspective of another cognitive

00:06:18,539 --> 00:06:22,319
empathy is tied to the concept of theory

00:06:20,550 --> 00:06:24,060
of mind which is the understanding that

00:06:22,319 --> 00:06:27,089
others have mental states that differ

00:06:24,060 --> 00:06:29,129
from one's own and it's not just enough

00:06:27,089 --> 00:06:31,110
to imagine yourself in other shoes

00:06:29,129 --> 00:06:33,930
because one of your assumptions about

00:06:31,110 --> 00:06:36,899
the other's perspective are all wrong to

00:06:33,930 --> 00:06:39,000
use a trivial example you are a slack

00:06:36,899 --> 00:06:39,310
power user so whenever you need to ask a

00:06:39,000 --> 00:06:41,260
Co

00:06:39,310 --> 00:06:43,480
or something or to give them a heads up

00:06:41,260 --> 00:06:45,490
about some kind of change you fire up

00:06:43,480 --> 00:06:48,130
slack when you shoot them a message and

00:06:45,490 --> 00:06:49,960
you go your merry way but if you really

00:06:48,130 --> 00:06:50,710
wanted to make sure your coworker got

00:06:49,960 --> 00:06:52,780
your message

00:06:50,710 --> 00:06:55,090
you might take us take a second to check

00:06:52,780 --> 00:06:57,700
first does this co-worker you slack the

00:06:55,090 --> 00:07:01,090
way I do or do they prefer email or even

00:06:57,700 --> 00:07:02,620
a face-to-face interaction assuming they

00:07:01,090 --> 00:07:07,810
would want what you yourself preferred

00:07:02,620 --> 00:07:10,750
would not be the most importance

00:07:07,810 --> 00:07:13,030
actually is if you don't truly take

00:07:10,750 --> 00:07:15,220
another's perspective what you're really

00:07:13,030 --> 00:07:19,990
doing is called projection rather than

00:07:15,220 --> 00:07:21,600
empathy you've heard the Golden Rule do

00:07:19,990 --> 00:07:24,010
to others what you'd have them do you

00:07:21,600 --> 00:07:26,350
but the golden rule isn't about what you

00:07:24,010 --> 00:07:28,540
do putting yourself in someone else's

00:07:26,350 --> 00:07:30,910
shoes means fully imagining yourself as

00:07:28,540 --> 00:07:32,830
that person you treat them as they would

00:07:30,910 --> 00:07:35,040
want to be treated rather than the way

00:07:32,830 --> 00:07:37,180
you yourself would like to be treated

00:07:35,040 --> 00:07:39,370
while the two types of empathy are

00:07:37,180 --> 00:07:41,110
related to each other cognitive empathy

00:07:39,370 --> 00:07:43,930
activates different areas of the brain

00:07:41,110 --> 00:07:45,880
from emotional empathy a deficit in one

00:07:43,930 --> 00:07:49,330
doesn't necessarily mean a deficit in

00:07:45,880 --> 00:07:52,270
the other regardless empathy isn't easy

00:07:49,330 --> 00:07:54,730
for most of us it requires effort a lot

00:07:52,270 --> 00:07:56,740
of patience and a certain imaginative

00:07:54,730 --> 00:07:59,410
ability for us to place our self in

00:07:56,740 --> 00:08:01,720
somebody else's shoes especially if the

00:07:59,410 --> 00:08:06,040
other person is dissimilar or unfamiliar

00:08:01,720 --> 00:08:08,260
to us yet empathy is often seen as

00:08:06,040 --> 00:08:10,720
merely a soft skill we tend to

00:08:08,260 --> 00:08:12,100
undervalue soft skills in tech and so

00:08:10,720 --> 00:08:14,080
you may believe for this reason or

00:08:12,100 --> 00:08:16,480
another that empathy is not worth the

00:08:14,080 --> 00:08:16,960
effort to practice but I don't think

00:08:16,480 --> 00:08:19,120
that's true

00:08:16,960 --> 00:08:21,580
if our brains can learn how to write

00:08:19,120 --> 00:08:23,650
complex algorithms or cook up layer upon

00:08:21,580 --> 00:08:24,850
layer of abstraction over a set of

00:08:23,650 --> 00:08:26,980
arbitrary business rules

00:08:24,850 --> 00:08:29,290
why couldn't we also learn to get better

00:08:26,980 --> 00:08:31,890
at seeing what others see or feeling

00:08:29,290 --> 00:08:34,960
what they feel to do our jobs better

00:08:31,890 --> 00:08:36,760
also research has shown that soft skills

00:08:34,960 --> 00:08:40,150
are surprisingly important for building

00:08:36,760 --> 00:08:42,040
productive successful teams Microsoft

00:08:40,150 --> 00:08:44,020
recently released a paper entitled what

00:08:42,040 --> 00:08:46,120
makes a great software engineer they

00:08:44,020 --> 00:08:48,070
claim to have identified 53 attributes

00:08:46,120 --> 00:08:49,750
of great developers but thoughtfully

00:08:48,070 --> 00:08:51,130
provide a much shorter summary which I'm

00:08:49,750 --> 00:08:53,390
going to quote here

00:08:51,130 --> 00:08:55,310
there's a lot of good stuff but what I

00:08:53,390 --> 00:08:57,620
want to emphasize is the last bit the

00:08:55,310 --> 00:09:02,750
part in red which I mentioned resonates

00:08:57,620 --> 00:09:04,190
with me so how do we practice empathy to

00:09:02,750 --> 00:09:07,220
get better at understanding how others

00:09:04,190 --> 00:09:09,620
think and feel I've got five ideas for

00:09:07,220 --> 00:09:11,180
leaving mostly to cognitive empathy they

00:09:09,620 --> 00:09:13,280
may not all work out for every one of

00:09:11,180 --> 00:09:14,870
you but I hope everyone finds that at

00:09:13,280 --> 00:09:17,930
least one of the suggestions works for

00:09:14,870 --> 00:09:20,690
them I'm going to start by suggesting

00:09:17,930 --> 00:09:22,520
one baby step where the other and the

00:09:20,690 --> 00:09:26,600
self other distinction I described

00:09:22,520 --> 00:09:27,890
earlier is actually still you so how

00:09:26,600 --> 00:09:30,230
many of you have looked at some code

00:09:27,890 --> 00:09:31,880
that you found absolutely unreadable you

00:09:30,230 --> 00:09:35,210
rang get blamed and discovered that the

00:09:31,880 --> 00:09:37,280
terrible coder was in fact yourself this

00:09:35,210 --> 00:09:38,570
is code you'd written a year ago but

00:09:37,280 --> 00:09:41,320
it's almost as though somebody else

00:09:38,570 --> 00:09:43,640
entirely had written it someone stupider

00:09:41,320 --> 00:09:46,070
the problem is not that passed you is

00:09:43,640 --> 00:09:47,450
actually stupid it's because past you

00:09:46,070 --> 00:09:49,580
had a completely different set of

00:09:47,450 --> 00:09:52,160
knowledge assumptions and context from

00:09:49,580 --> 00:09:54,230
which they were working so going the

00:09:52,160 --> 00:09:56,600
other way when current you writes code

00:09:54,230 --> 00:09:59,360
or documentation take a few minutes to

00:09:56,600 --> 00:10:01,310
consider this well future you who has a

00:09:59,360 --> 00:10:02,960
completely different immediate context

00:10:01,310 --> 00:10:04,670
and working knowledge be able to

00:10:02,960 --> 00:10:06,950
understand or follow your code when you

00:10:04,670 --> 00:10:08,420
see it again one of the best ways to

00:10:06,950 --> 00:10:12,560
practice this is when you're adding

00:10:08,420 --> 00:10:14,750
logging to your code let's say we have a

00:10:12,560 --> 00:10:16,670
function and it has it handles a request

00:10:14,750 --> 00:10:18,350
and you've already thought through the

00:10:16,670 --> 00:10:20,600
ways in which you could break so you

00:10:18,350 --> 00:10:23,180
have this exception handler but imagine

00:10:20,600 --> 00:10:25,040
how future you so that's you a year from

00:10:23,180 --> 00:10:27,800
now with no memory of writing this

00:10:25,040 --> 00:10:29,480
function or what it does or or why how

00:10:27,800 --> 00:10:31,030
would you understand a log message that

00:10:29,480 --> 00:10:34,370
looked like this

00:10:31,030 --> 00:10:36,260
it's not that helpful when in future you

00:10:34,370 --> 00:10:37,970
appreciate some hints as to why this

00:10:36,260 --> 00:10:40,670
function might have failed or what the

00:10:37,970 --> 00:10:42,680
parameters even mean think about what

00:10:40,670 --> 00:10:44,180
information future you would need to be

00:10:42,680 --> 00:10:45,760
able to trace and debug the issue as

00:10:44,180 --> 00:10:48,770
quickly as possible

00:10:45,760 --> 00:10:52,250
let's add some more verbose logging some

00:10:48,770 --> 00:10:53,960
better error handling and messaging now

00:10:52,250 --> 00:10:58,070
when you see this log the stack trace

00:10:53,960 --> 00:11:01,010
you've got actionable data the same goes

00:10:58,070 --> 00:11:03,590
for documentation thinking of future you

00:11:01,010 --> 00:11:04,770
may help you write better docs when I

00:11:03,590 --> 00:11:06,720
deploy a project

00:11:04,770 --> 00:11:10,200
or handle an incident or even run a

00:11:06,720 --> 00:11:11,940
so-called one-time script I open up a

00:11:10,200 --> 00:11:14,070
text file and write down one line for

00:11:11,940 --> 00:11:16,020
every step that I just took so that the

00:11:14,070 --> 00:11:18,510
next time I have to do this I don't have

00:11:16,020 --> 00:11:21,029
to remember or relearn everything that

00:11:18,510 --> 00:11:22,920
needs to be done or its context I almost

00:11:21,029 --> 00:11:26,480
always find myself the next time I do

00:11:22,920 --> 00:11:29,130
this deployment thanking past me so

00:11:26,480 --> 00:11:31,649
thinking of future you as someone else

00:11:29,130 --> 00:11:33,300
you can empathize with is one baby-step

00:11:31,649 --> 00:11:35,730
way to practice getting better at

00:11:33,300 --> 00:11:38,880
empathy and in so doing you will become

00:11:35,730 --> 00:11:41,100
a better software developer but guess

00:11:38,880 --> 00:11:41,750
what you can't practice empathy all by

00:11:41,100 --> 00:11:44,130
yourself

00:11:41,750 --> 00:11:46,320
empathy is by necessity a social

00:11:44,130 --> 00:11:51,209
reaction so you depend on others to

00:11:46,320 --> 00:11:53,760
practice it one step further than trying

00:11:51,209 --> 00:11:55,440
to put yourself in your own shoes would

00:11:53,760 --> 00:11:57,990
be to try to put yourself in another's

00:11:55,440 --> 00:11:59,610
shoes and since it's easier to feel

00:11:57,990 --> 00:12:01,920
empathy for someone who is more similar

00:11:59,610 --> 00:12:03,899
to you if you really want to level up on

00:12:01,920 --> 00:12:06,450
your empathy skills you should try the

00:12:03,899 --> 00:12:09,510
following during your next project or

00:12:06,450 --> 00:12:11,010
even for just a day make time to learn

00:12:09,510 --> 00:12:13,410
the job of a co-worker who is not a

00:12:11,010 --> 00:12:16,170
fellow developer maybe join the QA team

00:12:13,410 --> 00:12:17,970
or the DevOps team to see the kinds of

00:12:16,170 --> 00:12:21,839
issues they face on their side of this

00:12:17,970 --> 00:12:24,390
project you're all working on this will

00:12:21,839 --> 00:12:26,730
benefit you in several ways first off

00:12:24,390 --> 00:12:28,589
the more you work with someone the more

00:12:26,730 --> 00:12:30,180
familiar they'll become to you and the

00:12:28,589 --> 00:12:32,310
easier it'll be for you to start seeing

00:12:30,180 --> 00:12:34,290
what they see feeling more empathy for

00:12:32,310 --> 00:12:36,300
them you'll notice how the code you

00:12:34,290 --> 00:12:38,100
write affects those who are required to

00:12:36,300 --> 00:12:39,420
test your code or to make sure the

00:12:38,100 --> 00:12:40,320
server list functions in the cloud

00:12:39,420 --> 00:12:42,180
running your code

00:12:40,320 --> 00:12:43,290
don't error out with mysterious bugs

00:12:42,180 --> 00:12:46,020
that wake people up at 3:00 in the

00:12:43,290 --> 00:12:47,820
morning so then maybe you'll be more

00:12:46,020 --> 00:12:49,350
conscientious about updating the

00:12:47,820 --> 00:12:51,690
dependency list and the package you're

00:12:49,350 --> 00:12:53,490
about to deploy to prod or maybe you'll

00:12:51,690 --> 00:12:54,720
find in handle more edge cases because

00:12:53,490 --> 00:12:56,730
you'll have thought to ask the QA team

00:12:54,720 --> 00:12:59,070
what those might be before they get to

00:12:56,730 --> 00:13:00,899
work testing them in the best case

00:12:59,070 --> 00:13:02,700
scenario you'll ship your project more

00:13:00,899 --> 00:13:04,950
quickly because you'll have shortened

00:13:02,700 --> 00:13:07,079
the feedback and iteration cycle that

00:13:04,950 --> 00:13:09,149
you need to finish the product as a

00:13:07,079 --> 00:13:10,770
bonus you'll become more familiar to

00:13:09,149 --> 00:13:12,270
your co-workers and it's more likely

00:13:10,770 --> 00:13:14,450
they'll come to feel more empathy for

00:13:12,270 --> 00:13:14,450
you

00:13:15,690 --> 00:13:19,590
to generalize even further you can

00:13:18,390 --> 00:13:21,210
improve your empathy skills by

00:13:19,590 --> 00:13:22,980
exercising something all the great

00:13:21,210 --> 00:13:25,770
developers I know have in spades which

00:13:22,980 --> 00:13:27,690
is curiosity not just about other people

00:13:25,770 --> 00:13:30,810
but about new projects ideas and

00:13:27,690 --> 00:13:32,850
experiences the great developers I know

00:13:30,810 --> 00:13:36,210
constantly seek new things to try or

00:13:32,850 --> 00:13:37,950
novel ways to tackle a problem we all

00:13:36,210 --> 00:13:39,750
naturally gather tons of experience as

00:13:37,950 --> 00:13:40,980
we progress through our careers but

00:13:39,750 --> 00:13:43,560
seeking out different kinds of

00:13:40,980 --> 00:13:45,720
experiences and exploring new ideas will

00:13:43,560 --> 00:13:47,130
accelerate your progress exponentially

00:13:45,720 --> 00:13:48,900
because you can integrate your

00:13:47,130 --> 00:13:52,770
experience with a bunch of new

00:13:48,900 --> 00:13:54,900
perspectives you'll also gain a wider

00:13:52,770 --> 00:13:58,650
view of the systems you build and work

00:13:54,900 --> 00:14:00,270
in as a whole and in some cases by

00:13:58,650 --> 00:14:02,850
better understanding the problem and

00:14:00,270 --> 00:14:04,980
seeing a more complete picture you might

00:14:02,850 --> 00:14:06,630
find that the best solution is actually

00:14:04,980 --> 00:14:11,250
to solve a completely different problem

00:14:06,630 --> 00:14:12,660
altogether some companies like Google

00:14:11,250 --> 00:14:14,970
already know the benefits of having

00:14:12,660 --> 00:14:16,550
engineers try on other hats they have

00:14:14,970 --> 00:14:18,720
programs that let people do just that

00:14:16,550 --> 00:14:20,730
but even if you don't work at Google

00:14:18,720 --> 00:14:22,740
that doesn't mean you can't sit down

00:14:20,730 --> 00:14:24,720
next to a co-worker to shadow them for a

00:14:22,740 --> 00:14:28,100
day or even just have lunch with someone

00:14:24,720 --> 00:14:28,100
just to get to know them a little better

00:14:29,570 --> 00:14:33,570
speaking of new experiences another way

00:14:32,460 --> 00:14:36,150
to improve your empathy for other

00:14:33,570 --> 00:14:39,000
developers and your users is to read

00:14:36,150 --> 00:14:40,140
code written by others you want to do

00:14:39,000 --> 00:14:41,490
this any way to deepen your

00:14:40,140 --> 00:14:43,530
understanding of the libraries or

00:14:41,490 --> 00:14:45,090
languages you work with but another

00:14:43,530 --> 00:14:46,860
benefit is that you observe the great

00:14:45,090 --> 00:14:49,200
variety of ways a given problem might be

00:14:46,860 --> 00:14:50,580
solved you might have an inkling of this

00:14:49,200 --> 00:14:53,580
from whenever you search the Python

00:14:50,580 --> 00:14:56,070
packaging index for a library to use one

00:14:53,580 --> 00:14:57,900
very simplified comparison if you work

00:14:56,070 --> 00:14:59,420
in Python and you want to store and

00:14:57,900 --> 00:15:02,100
retrieve data from a relational database

00:14:59,420 --> 00:15:05,850
you'll come across the Django or M and

00:15:02,100 --> 00:15:08,460
sequel alchemy both libraries allow you

00:15:05,850 --> 00:15:10,020
to access data from a database but one

00:15:08,460 --> 00:15:12,000
creates almost a direct one-to-one

00:15:10,020 --> 00:15:14,070
mapping between an object and a row from

00:15:12,000 --> 00:15:16,320
a database table using the active record

00:15:14,070 --> 00:15:18,330
pattern while the other separates logic

00:15:16,320 --> 00:15:20,070
having to do with objects from the logic

00:15:18,330 --> 00:15:22,440
underpinning database operations using

00:15:20,070 --> 00:15:24,030
the unit of work pattern if you look

00:15:22,440 --> 00:15:25,860
into these and the many other solutions

00:15:24,030 --> 00:15:27,660
that exist they'll show you how the

00:15:25,860 --> 00:15:28,170
author of each library chose to make

00:15:27,660 --> 00:15:30,810
sense of this

00:15:28,170 --> 00:15:32,610
problem of data persistence maybe it'll

00:15:30,810 --> 00:15:34,230
present for you a new perspective that

00:15:32,610 --> 00:15:37,800
will help you find the right solution

00:15:34,230 --> 00:15:39,209
for your own problem or maybe you'll

00:15:37,800 --> 00:15:40,889
notice shared patterns in the way

00:15:39,209 --> 00:15:42,630
solutions are written by multiple

00:15:40,889 --> 00:15:45,300
developers and you'll understand why

00:15:42,630 --> 00:15:47,490
these patterns exist in both Jenko ORM

00:15:45,300 --> 00:15:48,779
and C quagga me retrieving the number of

00:15:47,490 --> 00:15:50,880
all the rows in the table is a method

00:15:48,779 --> 00:15:53,279
called named count which is a lot like

00:15:50,880 --> 00:15:54,899
what you'd write in raw sequel so that

00:15:53,279 --> 00:15:56,190
would require less mental overhead for

00:15:54,899 --> 00:15:59,220
developers who are trying to learn

00:15:56,190 --> 00:16:00,720
neither library and that's what the

00:15:59,220 --> 00:16:03,990
famous principle of least astonishment

00:16:00,720 --> 00:16:05,760
is about when designing a component it

00:16:03,990 --> 00:16:08,220
should behave that way users expect it

00:16:05,760 --> 00:16:10,470
to behave well to know how users might

00:16:08,220 --> 00:16:12,300
expect a component to behave you need

00:16:10,470 --> 00:16:14,430
first to figure out who the users are

00:16:12,300 --> 00:16:17,220
and then you need to see your component

00:16:14,430 --> 00:16:19,139
through their eyes building an interface

00:16:17,220 --> 00:16:22,320
in general is a really good exercise of

00:16:19,139 --> 00:16:25,230
cognitive empathy when you write an API

00:16:22,320 --> 00:16:27,899
you need to consider who is a typical

00:16:25,230 --> 00:16:29,699
user of this API one of the most common

00:16:27,899 --> 00:16:31,769
arguments that users will send over when

00:16:29,699 --> 00:16:33,570
they call your method will in what order

00:16:31,769 --> 00:16:34,560
are they likely base on them in other

00:16:33,570 --> 00:16:36,690
words what are your functions

00:16:34,560 --> 00:16:39,480
dependencies are their common default

00:16:36,690 --> 00:16:41,490
values for some of these arguments when

00:16:39,480 --> 00:16:42,870
the user calls your endpoint what do you

00:16:41,490 --> 00:16:44,579
think they'll expect to get back from it

00:16:42,870 --> 00:16:47,850
what return type a response

00:16:44,579 --> 00:16:49,140
I find tests really useful for figuring

00:16:47,850 --> 00:16:51,300
out how to build these layers of

00:16:49,140 --> 00:16:53,130
abstraction because your test cases are

00:16:51,300 --> 00:16:56,430
really just instances of a client using

00:16:53,130 --> 00:16:58,290
your function or your library let's say

00:16:56,430 --> 00:17:02,519
you have a really a new startup idea

00:16:58,290 --> 00:17:04,049
it's OK Cupid for dogs so neat for your

00:17:02,519 --> 00:17:07,709
client to need a write a function to

00:17:04,049 --> 00:17:09,689
find a dog so we have our test case and

00:17:07,709 --> 00:17:11,850
let's think about how we want this

00:17:09,689 --> 00:17:13,189
function called find dogs to work by

00:17:11,850 --> 00:17:16,260
writing a test for it

00:17:13,189 --> 00:17:18,990
so we most likely want to find a pet by

00:17:16,260 --> 00:17:20,699
relationship status and we expect a JSON

00:17:18,990 --> 00:17:23,579
object with a list of dogs that match

00:17:20,699 --> 00:17:26,490
that status so that means we want our

00:17:23,579 --> 00:17:29,390
function to get us a list of dogs and to

00:17:26,490 --> 00:17:33,030
do this it needs to make an API call and

00:17:29,390 --> 00:17:34,919
now you have this function but probably

00:17:33,030 --> 00:17:37,380
to call this API you need some kind of

00:17:34,919 --> 00:17:38,669
authentication right so we're going to

00:17:37,380 --> 00:17:41,380
add some username and password

00:17:38,669 --> 00:17:48,850
parameters and of course now we have to

00:17:41,380 --> 00:17:51,070
your test to add the same things okay so

00:17:48,850 --> 00:17:53,260
now you have this function and it gets

00:17:51,070 --> 00:17:55,330
you a list of dogs but looking at this

00:17:53,260 --> 00:17:56,110
find dogs function again doesn't that

00:17:55,330 --> 00:17:58,060
look kind of weird

00:17:56,110 --> 00:17:59,470
why does a function that's supposed to

00:17:58,060 --> 00:18:01,440
just find us some dogs need to know

00:17:59,470 --> 00:18:03,490
anything about a username or password

00:18:01,440 --> 00:18:06,250
that's a hint that we should separate

00:18:03,490 --> 00:18:08,050
these bits out but even if we find that

00:18:06,250 --> 00:18:09,910
find dogs should not accept a username

00:18:08,050 --> 00:18:12,040
and password specifically as parameters

00:18:09,910 --> 00:18:14,350
the find dogs function does need access

00:18:12,040 --> 00:18:16,960
to them somehow in other words this

00:18:14,350 --> 00:18:18,750
username password authentication bit is

00:18:16,960 --> 00:18:21,850
a dependency of find dogs

00:18:18,750 --> 00:18:23,860
maybe we can encapsulate this username

00:18:21,850 --> 00:18:26,680
and password implementation into some

00:18:23,860 --> 00:18:28,690
sort of class like the dog API object

00:18:26,680 --> 00:18:32,260
let's call it and find ox can now call

00:18:28,690 --> 00:18:36,100
this API object going back to our tests

00:18:32,260 --> 00:18:37,750
we now can fix our params but you know

00:18:36,100 --> 00:18:39,940
to be honest that looks a little strange

00:18:37,750 --> 00:18:42,040
still again if I'm looking at a function

00:18:39,940 --> 00:18:44,050
called find dogs I don't expect to need

00:18:42,040 --> 00:18:46,660
to pass in any kind of off dog thing

00:18:44,050 --> 00:18:50,800
right but what if I made a very small

00:18:46,660 --> 00:18:54,160
change so instead of this I could do

00:18:50,800 --> 00:18:57,160
something like this and then maybe have

00:18:54,160 --> 00:18:59,740
a clearer name for it now this to me is

00:18:57,160 --> 00:19:02,560
a user of this API client it looks

00:18:59,740 --> 00:19:04,210
familiar and it makes sense to me I hope

00:19:02,560 --> 00:19:06,880
I still feel this way or future me still

00:19:04,210 --> 00:19:08,860
feels the same way a year from now but

00:19:06,880 --> 00:19:10,840
with fine dogs encapsulated this

00:19:08,860 --> 00:19:13,090
different way I can see this component

00:19:10,840 --> 00:19:18,340
for what it is which is an API client to

00:19:13,090 --> 00:19:21,970
get dogs and that's what the client

00:19:18,340 --> 00:19:23,980
looks like Malta evil a developer who

00:19:21,970 --> 00:19:27,130
wrote a JavaScript framework that powers

00:19:23,980 --> 00:19:29,470
Google photos Google+ Google Drive and

00:19:27,130 --> 00:19:31,990
some other very obscure tiny websites

00:19:29,470 --> 00:19:34,510
set this at a recent talk he gave at JS

00:19:31,990 --> 00:19:36,580
conf Australia the way I would talk

00:19:34,510 --> 00:19:38,050
about myself as a senior engineer is

00:19:36,580 --> 00:19:40,390
that I'd say I know how I would solve

00:19:38,050 --> 00:19:42,580
this problem the next level is that I

00:19:40,390 --> 00:19:45,430
can say I know how others would solve

00:19:42,580 --> 00:19:47,440
this problem what this means and this is

00:19:45,430 --> 00:19:49,150
Malta's conclusion as well is that it

00:19:47,440 --> 00:19:50,530
takes both experience and empathy to

00:19:49,150 --> 00:19:51,309
create the right kinds of abstractions

00:19:50,530 --> 00:19:54,129
for your

00:19:51,309 --> 00:19:56,379
ocation now you saw how cognitive

00:19:54,129 --> 00:19:58,389
empathy helps with naming things which

00:19:56,379 --> 00:20:01,240
is one of the famous hardest problems in

00:19:58,389 --> 00:20:02,769
computer science clear specific and

00:20:01,240 --> 00:20:05,950
descriptive names make code more

00:20:02,769 --> 00:20:07,539
readable to other developers and at

00:20:05,950 --> 00:20:09,519
certain scales it's more important to

00:20:07,539 --> 00:20:12,100
write understandable code than it is to

00:20:09,519 --> 00:20:13,690
write performant code consider that a

00:20:12,100 --> 00:20:15,999
bug in your code may cost the company

00:20:13,690 --> 00:20:18,159
hundreds of dollars a month but if it

00:20:15,999 --> 00:20:19,840
takes to developers one extra week to

00:20:18,159 --> 00:20:21,639
debug the problem because they had so

00:20:19,840 --> 00:20:23,710
much trouble understanding the code or

00:20:21,639 --> 00:20:27,159
what it did that's thousands of dollars

00:20:23,710 --> 00:20:28,509
more similarly an optimization you write

00:20:27,159 --> 00:20:30,159
for your program might save you

00:20:28,509 --> 00:20:32,619
thousands of dollars a year in CPU

00:20:30,159 --> 00:20:35,110
cycles saved but if the code makes it

00:20:32,619 --> 00:20:36,789
risky to introduce changes then those

00:20:35,110 --> 00:20:38,499
cost savings might just be wiped out by

00:20:36,789 --> 00:20:42,490
the development time required and the

00:20:38,499 --> 00:20:43,749
missed opportunities so software must be

00:20:42,490 --> 00:20:46,210
written not just for the computer

00:20:43,749 --> 00:20:47,649
executing your instructions but also for

00:20:46,210 --> 00:20:50,049
the humans who need to maintain or

00:20:47,649 --> 00:20:52,179
change your code programming is really

00:20:50,049 --> 00:20:53,769
another form of communication which is

00:20:52,179 --> 00:20:58,960
why cognitive empathy will help you

00:20:53,769 --> 00:21:00,490
become better at it another reason why

00:20:58,960 --> 00:21:02,320
empathy is crucial to effective

00:21:00,490 --> 00:21:05,320
communication is that it lets you

00:21:02,320 --> 00:21:07,059
establish grounding not to get too

00:21:05,320 --> 00:21:09,240
technical but grounding is sort of the

00:21:07,059 --> 00:21:11,409
TCP handshake of human communication

00:21:09,240 --> 00:21:13,450
it's a set of mutual assumptions

00:21:11,409 --> 00:21:15,009
knowledge and beliefs that get

00:21:13,450 --> 00:21:16,929
coordinated between you and the person

00:21:15,009 --> 00:21:19,419
you're talking to to ensure both of you

00:21:16,929 --> 00:21:21,070
are on the same page establishing

00:21:19,419 --> 00:21:22,749
grounding can be as simple as nodding

00:21:21,070 --> 00:21:23,799
while you're listening to someone to

00:21:22,749 --> 00:21:26,289
signal that you follow what they're

00:21:23,799 --> 00:21:28,929
saying or making a quick request for a

00:21:26,289 --> 00:21:30,309
clarification like huh most of us

00:21:28,929 --> 00:21:33,429
already practice grounding in an

00:21:30,309 --> 00:21:35,080
everyday conversation but one way to get

00:21:33,429 --> 00:21:38,169
better at grounding is to teach

00:21:35,080 --> 00:21:39,580
something to someone else imagine how

00:21:38,169 --> 00:21:43,389
you would explain to a three-year-old

00:21:39,580 --> 00:21:45,070
why dinosaurs don't exist anymore now

00:21:43,389 --> 00:21:48,549
imagine how you'd explain the same thing

00:21:45,070 --> 00:21:50,619
to a 23 year old we intuitively know

00:21:48,549 --> 00:21:52,299
that for a young child we might need to

00:21:50,619 --> 00:21:54,700
describe things more simply and at a

00:21:52,299 --> 00:21:56,230
higher level than for an adult but it

00:21:54,700 --> 00:21:59,350
requires more effort for us to do this

00:21:56,230 --> 00:22:00,850
well when wearing among adults we all

00:21:59,350 --> 00:22:02,500
know someone who claims to love teaching

00:22:00,850 --> 00:22:03,650
but assumes we have base knowledge about

00:22:02,500 --> 00:22:05,900
the topic that we don't

00:22:03,650 --> 00:22:07,940
this person will explain things in a way

00:22:05,900 --> 00:22:11,540
that goes right over our heads or that's

00:22:07,940 --> 00:22:12,980
effectively meaningless to us or on the

00:22:11,540 --> 00:22:14,750
other hand they'll assume we know too

00:22:12,980 --> 00:22:17,450
little and waste a lot of time teaching

00:22:14,750 --> 00:22:18,860
us things that we already know all they

00:22:17,450 --> 00:22:21,110
had to do was spend just a few minutes

00:22:18,860 --> 00:22:23,330
to check first that they understand what

00:22:21,110 --> 00:22:24,770
we actually knew in order to do a much

00:22:23,330 --> 00:22:29,540
better job of teaching us something

00:22:24,770 --> 00:22:31,580
relevant and understandable but even if

00:22:29,540 --> 00:22:33,140
teaching is not your thing you can still

00:22:31,580 --> 00:22:35,900
practice grounding beyond everyday

00:22:33,140 --> 00:22:37,280
conversation let's say you're in a

00:22:35,900 --> 00:22:40,310
product meeting to go over some

00:22:37,280 --> 00:22:42,020
requirements when it ends take a few

00:22:40,310 --> 00:22:43,520
extra minutes to ask the other people in

00:22:42,020 --> 00:22:45,730
the meeting to describe the main

00:22:43,520 --> 00:22:48,020
takeaways from their points of view if

00:22:45,730 --> 00:22:50,150
their main takeaways are different from

00:22:48,020 --> 00:22:52,520
yours then you clearly require more

00:22:50,150 --> 00:22:54,770
grounding the more you communicate or

00:22:52,520 --> 00:22:56,630
even over communicate the more knowledge

00:22:54,770 --> 00:22:59,030
and contacts you'll share and the more

00:22:56,630 --> 00:23:01,400
cognitive empathy you'll share in fact

00:22:59,030 --> 00:23:03,530
it's been theorized that empathy evolved

00:23:01,400 --> 00:23:04,760
for exactly this purpose to improve

00:23:03,530 --> 00:23:06,500
coordination between members of the

00:23:04,760 --> 00:23:08,240
group so that they can respond more

00:23:06,500 --> 00:23:11,780
effectively to potential opportunities

00:23:08,240 --> 00:23:12,950
or threats context is also important

00:23:11,780 --> 00:23:15,110
because decisions are made under

00:23:12,950 --> 00:23:16,850
constraints and sometimes we rush to

00:23:15,110 --> 00:23:19,190
judgment on decisions without seeing the

00:23:16,850 --> 00:23:22,400
bigger picture so it's important to ask

00:23:19,190 --> 00:23:23,960
questions to fill in that context great

00:23:22,400 --> 00:23:25,970
developers don't hesitate to ask

00:23:23,960 --> 00:23:28,670
questions even if it means admitting

00:23:25,970 --> 00:23:30,230
they don't know something and one

00:23:28,670 --> 00:23:33,710
question that's very effective at

00:23:30,230 --> 00:23:35,330
gathering context is why why did you

00:23:33,710 --> 00:23:37,280
pick this library over other libraries

00:23:35,330 --> 00:23:38,870
that might do the same thing why do we

00:23:37,280 --> 00:23:40,490
need to collect user data in this manner

00:23:38,870 --> 00:23:42,860
if there's an alternate way to get the

00:23:40,490 --> 00:23:47,030
same data why do you want this button to

00:23:42,860 --> 00:23:49,640
go here instead of over there now why is

00:23:47,030 --> 00:23:51,440
an easy enough question to ask but the

00:23:49,640 --> 00:23:55,400
hard part is actually listening to the

00:23:51,440 --> 00:23:57,050
answer if you have a preconceived idea

00:23:55,400 --> 00:23:59,210
of what the other person is about to say

00:23:57,050 --> 00:24:01,100
you might not actually listen to the

00:23:59,210 --> 00:24:03,140
answer because you're busy thinking up a

00:24:01,100 --> 00:24:06,260
response of your own you'll talk right

00:24:03,140 --> 00:24:08,060
past each other active listening is

00:24:06,260 --> 00:24:10,400
making a conscious effort to give your

00:24:08,060 --> 00:24:11,750
full attention to the person speaking so

00:24:10,400 --> 00:24:14,800
that you hear and understand the

00:24:11,750 --> 00:24:14,800
complete message being conveyed

00:24:15,290 --> 00:24:19,340
listening is especially difficult if

00:24:17,180 --> 00:24:20,870
you're feeling angry or defensive so

00:24:19,340 --> 00:24:22,490
it's especially important to practice

00:24:20,870 --> 00:24:24,710
active listening when you're feeling

00:24:22,490 --> 00:24:27,140
negative emotions for example if you

00:24:24,710 --> 00:24:28,970
hear criticism in a code review one

00:24:27,140 --> 00:24:31,760
thing you could practice is active

00:24:28,970 --> 00:24:35,420
listening don't respond to the comment

00:24:31,760 --> 00:24:37,850
right away first stay silent suspend

00:24:35,420 --> 00:24:39,410
your judgment temporarily gather more

00:24:37,850 --> 00:24:41,390
information before responding by

00:24:39,410 --> 00:24:43,250
paraphrasing or asking for cop follow-up

00:24:41,390 --> 00:24:46,570
questions to demonstrate you fully

00:24:43,250 --> 00:24:46,570
understand the other person's argument

00:24:46,780 --> 00:24:51,980
there's a rule in communication theory

00:24:49,100 --> 00:24:53,570
called Miller's law and it's this to

00:24:51,980 --> 00:24:56,180
understand what another person is saying

00:24:53,570 --> 00:24:57,850
you must assume that it is true and try

00:24:56,180 --> 00:25:00,440
to imagine what it could be true of

00:24:57,850 --> 00:25:01,910
let's say a developer comes up to tell

00:25:00,440 --> 00:25:05,150
you that a library that you wrote is

00:25:01,910 --> 00:25:06,740
broken now this might make you upset

00:25:05,150 --> 00:25:09,080
and maybe you could ask them why do you

00:25:06,740 --> 00:25:10,790
think my library sucks but that puts

00:25:09,080 --> 00:25:12,500
them on the defensive you're questioning

00:25:10,790 --> 00:25:15,350
their premise and implying the problem

00:25:12,500 --> 00:25:18,380
is with them alternatively you might

00:25:15,350 --> 00:25:20,570
stop and think okay assume my library is

00:25:18,380 --> 00:25:22,220
broken this person can't do their job

00:25:20,570 --> 00:25:24,320
what are our options

00:25:22,220 --> 00:25:26,420
you might ask some clarification

00:25:24,320 --> 00:25:28,730
questions what are you using this API

00:25:26,420 --> 00:25:30,680
for what is it lacking that you need

00:25:28,730 --> 00:25:32,780
could there be another way to get you

00:25:30,680 --> 00:25:34,790
what you need i withholding judgment

00:25:32,780 --> 00:25:36,920
you're showing that you're on their side

00:25:34,790 --> 00:25:39,140
and by asking clarification questions

00:25:36,920 --> 00:25:41,420
you're more likely to gain context from

00:25:39,140 --> 00:25:43,460
what they're actually trying to do this

00:25:41,420 --> 00:25:45,110
is a goal of active listening and it'll

00:25:43,460 --> 00:25:49,250
lead to you're having more empathy for

00:25:45,110 --> 00:25:51,170
the person you're talking to a friend of

00:25:49,250 --> 00:25:52,280
mine once asked me do you know what you

00:25:51,170 --> 00:25:54,560
call someone who's always complaining

00:25:52,280 --> 00:25:57,700
about existing code being terrible all

00:25:54,560 --> 00:26:00,680
the time and the answer was junior I

00:25:57,700 --> 00:26:03,020
think of this often I remember earlier

00:26:00,680 --> 00:26:04,970
in my career when I would see something

00:26:03,020 --> 00:26:07,130
that we might derisively call legacy

00:26:04,970 --> 00:26:09,320
code and I would judge whoever wrote it

00:26:07,130 --> 00:26:11,270
as maybe not being not that good at

00:26:09,320 --> 00:26:13,280
writing code I'd spend a lot of time

00:26:11,270 --> 00:26:15,170
trying to refactor it but what I didn't

00:26:13,280 --> 00:26:16,910
do so well was to invest time in

00:26:15,170 --> 00:26:19,570
understanding the code to see why it

00:26:16,910 --> 00:26:21,920
might have been written the way it was

00:26:19,570 --> 00:26:24,530
we could apply a version of Miller's law

00:26:21,920 --> 00:26:27,170
to legacy code when I find code that

00:26:24,530 --> 00:26:28,909
works but is unreadable to me I first

00:26:27,170 --> 00:26:29,960
imagined that the developer who wrote it

00:26:28,909 --> 00:26:32,659
must have started out with good

00:26:29,960 --> 00:26:34,220
intentions and clear designs I try to

00:26:32,659 --> 00:26:36,320
see what sorts of constraints existed

00:26:34,220 --> 00:26:38,149
that maybe haven't been documented so I

00:26:36,320 --> 00:26:39,769
can't see them or what edge cases I

00:26:38,149 --> 00:26:42,679
haven't encountered that this code might

00:26:39,769 --> 00:26:44,239
be addressing in other words just

00:26:42,679 --> 00:26:46,099
because I couldn't easily understand the

00:26:44,239 --> 00:26:47,840
code doesn't mean that the code is bad

00:26:46,099 --> 00:26:48,340
or that the developer who wrote it was

00:26:47,840 --> 00:26:51,019
dumb

00:26:48,340 --> 00:26:53,989
now to be clear if the code is broken or

00:26:51,019 --> 00:26:56,749
buggy judge away but if the codes

00:26:53,989 --> 00:26:58,460
already in prod and it works giving it

00:26:56,749 --> 00:27:00,830
the benefit of the doubt will help you

00:26:58,460 --> 00:27:02,869
resist the urge to refactor which is

00:27:00,830 --> 00:27:06,499
good because the factors can become very

00:27:02,869 --> 00:27:08,629
difficult and costly I can tell you to

00:27:06,499 --> 00:27:10,729
sum it up the purpose of developing

00:27:08,629 --> 00:27:14,119
software is to create things that other

00:27:10,729 --> 00:27:16,279
people want to use the best software

00:27:14,119 --> 00:27:18,529
developers excel at this for several

00:27:16,279 --> 00:27:20,809
reasons they understand what their users

00:27:18,529 --> 00:27:23,090
want they write code efficiently and

00:27:20,809 --> 00:27:24,859
ship it on time and they make it easier

00:27:23,090 --> 00:27:26,450
for those with whom they work to do

00:27:24,859 --> 00:27:28,599
their own jobs well so that the whole

00:27:26,450 --> 00:27:31,220
team can deliver a quality product I

00:27:28,599 --> 00:27:32,809
hope I've convinced you that empathy is

00:27:31,220 --> 00:27:35,389
important for all of these and a

00:27:32,809 --> 00:27:37,279
worthwhile thing to practice and hear

00:27:35,389 --> 00:27:39,289
inconvenient list form are the five

00:27:37,279 --> 00:27:42,049
exercises to help us become better at

00:27:39,289 --> 00:27:43,999
empathy I hope this will help you to

00:27:42,049 --> 00:27:46,159
write better software work better in

00:27:43,999 --> 00:27:51,049
teens and give your career trajectory a

00:27:46,159 --> 00:27:53,629
boost I would love to hear what you have

00:27:51,049 --> 00:27:55,369
to say not in the QA but outside in the

00:27:53,629 --> 00:27:56,809
hallway or on Twitter you're free to

00:27:55,369 --> 00:28:00,080
contact me by email as well

00:27:56,809 --> 00:28:01,340
my flights are posted on that link and I

00:28:00,080 --> 00:28:02,659
want to thank a bunch of people who

00:28:01,340 --> 00:28:04,279
helped me to write this talk in one way

00:28:02,659 --> 00:28:05,749
or another so here they are and of

00:28:04,279 --> 00:28:07,340
course I want to thank the whole Python

00:28:05,749 --> 00:28:09,440
community and I want to thank you all

00:28:07,340 --> 00:28:19,230
for coming to my talk

00:28:09,440 --> 00:28:22,279
[Applause]

00:28:19,230 --> 00:28:22,279

YouTube URL: https://www.youtube.com/watch?v=IYWlfVqBQLc


