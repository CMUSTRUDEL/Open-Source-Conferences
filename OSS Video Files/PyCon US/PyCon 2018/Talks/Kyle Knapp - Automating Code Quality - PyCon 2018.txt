Title: Kyle Knapp - Automating Code Quality - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Kyle Knapp

Writing quality Python code can be both tough and tedious. On top of the general design, there are many code quality aspects that you need to watch out for when writing and reviewing code such as adherence to PEP8, docstring quality, test quality, etc. Furthermore, everyone is human. If you are catching these code quality issues by hand, there is a good chance that at some point you will miss an easy opportunity to improve code quality. If the quality check can be done by a machine, then why would you even try to catch the code quality issue by hand? In the end, the machine will be able to perform the quality check with much more speed, accuracy, and consistency than a person.

This talk will dive into how existing open source projects offload and automate many of these code quality checks resulting in:

- A higher quality and a more consistent codebase
- Maintainers being able to focus more on the higher level design and interfaces
  of a project.
- An improved contribution process and higher quality pull requests from
  external contributors

By diving into how these open source projects automate code quality checks, you will learn about:

- The available tooling related to checking code quality such as `flake8`,
  `pylint`, `coverage`, etc.
- How to automate code quality checks for both a development and team 
  setting.
- First-hand accounts of the benefits and lessons learned from automating
  code quality checks in real-life open source projects.



Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:06,470 --> 00:00:11,280
hi everyone my name is Kyle Knapp and

00:00:09,300 --> 00:00:13,290
I'm a software developer at Amazon Web

00:00:11,280 --> 00:00:15,660
Services where I primarily focus on

00:00:13,290 --> 00:00:18,180
developing client-side tooling for AWS

00:00:15,660 --> 00:00:21,630
so projects that I work on include Davis

00:00:18,180 --> 00:00:23,970
CLI Baby Ice SDK for Python and Davis

00:00:21,630 --> 00:00:26,550
chalice which is a Python service micro

00:00:23,970 --> 00:00:28,230
framework for AWS and today I'm gonna

00:00:26,550 --> 00:00:31,199
talk to you about the best practices

00:00:28,230 --> 00:00:32,910
lessons learned and how to's from

00:00:31,199 --> 00:00:38,010
developing chalice with the guards to

00:00:32,910 --> 00:00:39,540
automating code quality so when I talk

00:00:38,010 --> 00:00:41,340
about automating code quality I'm not

00:00:39,540 --> 00:00:43,010
talking about removing the human

00:00:41,340 --> 00:00:45,719
completely from the code review process

00:00:43,010 --> 00:00:47,670
but what I'm referring to is removing

00:00:45,719 --> 00:00:49,739
the number of manual steps that a human

00:00:47,670 --> 00:00:51,690
may be doing currently that they don't

00:00:49,739 --> 00:00:56,190
necessarily need to do and instead

00:00:51,690 --> 00:00:59,520
upload those to the machine as - some

00:00:56,190 --> 00:01:01,649
examples of ways you can automate code

00:00:59,520 --> 00:01:03,780
quality checks you can do see some and

00:01:01,649 --> 00:01:05,610
state following standards so taking this

00:01:03,780 --> 00:01:07,560
code sample here you'll see the

00:01:05,610 --> 00:01:10,369
following issues with it related to

00:01:07,560 --> 00:01:13,500
standards so the function name has

00:01:10,369 --> 00:01:14,790
camelcase that's a pet bate violation

00:01:13,500 --> 00:01:18,119
pet bait if you're not familiar with it

00:01:14,790 --> 00:01:20,509
is the Python coding standard for style

00:01:18,119 --> 00:01:22,409
so make sure you read up on that and

00:01:20,509 --> 00:01:24,630
specifically want to be using snake case

00:01:22,409 --> 00:01:27,000
instead of camel case the second issue

00:01:24,630 --> 00:01:30,450
is related to pep 257 this is related to

00:01:27,000 --> 00:01:32,909
doc string style you want to keep your

00:01:30,450 --> 00:01:34,680
doc strings to one line if they're

00:01:32,909 --> 00:01:36,470
one-liners and finally there's not

00:01:34,680 --> 00:01:39,720
another pet paid violation related to

00:01:36,470 --> 00:01:43,770
having make sure you have white space

00:01:39,720 --> 00:01:45,659
around each of the Simon operators so

00:01:43,770 --> 00:01:48,420
another example that you can automate is

00:01:45,659 --> 00:01:51,030
following safe practices so I have a

00:01:48,420 --> 00:01:53,250
function here you notice at the very end

00:01:51,030 --> 00:01:57,000
that there's a default mutable argument

00:01:53,250 --> 00:01:58,710
value and that is a dictionary and this

00:01:57,000 --> 00:02:00,090
is an issue because we need to find a

00:01:58,710 --> 00:02:02,820
function gets created the default

00:02:00,090 --> 00:02:05,009
argument values get created as well so

00:02:02,820 --> 00:02:07,920
if I was to go ahead and call it with

00:02:05,009 --> 00:02:09,720
fubar I'll return fubar back but when I

00:02:07,920 --> 00:02:11,190
call it again with Biz bass I'll get the

00:02:09,720 --> 00:02:12,660
fubar from before because it's using the

00:02:11,190 --> 00:02:14,210
same dictionary from before when it gets

00:02:12,660 --> 00:02:16,260
called

00:02:14,210 --> 00:02:18,750
another example of following safe

00:02:16,260 --> 00:02:21,390
practices that can be checked with code

00:02:18,750 --> 00:02:23,610
coati automation is making sure you're

00:02:21,390 --> 00:02:25,740
not accessing internal methods outside

00:02:23,610 --> 00:02:26,910
of a class so if it begins with an

00:02:25,740 --> 00:02:29,220
underscore that means it's an internal

00:02:26,910 --> 00:02:30,570
method or attribute and if you're using

00:02:29,220 --> 00:02:33,650
it outside the class there's a chance

00:02:30,570 --> 00:02:35,700
that can break because the developer may

00:02:33,650 --> 00:02:37,560
make a change there's a backward sitting

00:02:35,700 --> 00:02:40,860
paddle or even remove the method all

00:02:37,560 --> 00:02:42,870
together so all these examples were

00:02:40,860 --> 00:02:45,450
pretty simple right but when you give a

00:02:42,870 --> 00:02:47,220
hundred lines of code it becomes a lot

00:02:45,450 --> 00:02:49,800
more difficult detect ease and a lot of

00:02:47,220 --> 00:02:51,660
times you may miss some of them and in

00:02:49,800 --> 00:02:54,380
the end it's gonna make your development

00:02:51,660 --> 00:02:56,130
processes a lot safer and more efficient

00:02:54,380 --> 00:02:58,560
furthermore a lot of open source

00:02:56,130 --> 00:03:00,780
projects out there automate code quality

00:02:58,560 --> 00:03:03,060
today such as Django pandas twisted and

00:03:00,780 --> 00:03:05,070
one open-source project that I want to

00:03:03,060 --> 00:03:07,440
talk about is chalice I mentioned it

00:03:05,070 --> 00:03:09,600
before but chalice is a Python service

00:03:07,440 --> 00:03:13,590
micro framework for AWS so it lets you

00:03:09,600 --> 00:03:15,710
write abus service applications in the

00:03:13,590 --> 00:03:18,020
way it works in chalice for how

00:03:15,710 --> 00:03:20,910
automated code quality checks work is

00:03:18,020 --> 00:03:23,520
when a poor request is sent to the

00:03:20,910 --> 00:03:25,410
chalice repository the commits that the

00:03:23,520 --> 00:03:28,620
contributor provided are run under

00:03:25,410 --> 00:03:30,480
quality checks ran by machine and if the

00:03:28,620 --> 00:03:33,240
checks pass you'll see a green checkmark

00:03:30,480 --> 00:03:34,709
and the machine will let you know if all

00:03:33,240 --> 00:03:37,560
the checks pass and hence giving its

00:03:34,709 --> 00:03:39,510
sign-off for this poor quest this allows

00:03:37,560 --> 00:03:41,310
the the reviewer to go in review it

00:03:39,510 --> 00:03:50,070
themselves and also give them sign up

00:03:41,310 --> 00:03:52,440
and go ahead and merge so with this now

00:03:50,070 --> 00:03:56,280
and state let's talk about the benefits

00:03:52,440 --> 00:03:58,020
you get out of this automation so the

00:03:56,280 --> 00:04:01,920
first benefit you get is enforces

00:03:58,020 --> 00:04:04,380
quality checks so here's an example of a

00:04:01,920 --> 00:04:06,360
poor request where someone submitted

00:04:04,380 --> 00:04:09,030
some code it didn't effect past the

00:04:06,360 --> 00:04:10,560
quality checks to start and in fact none

00:04:09,030 --> 00:04:15,120
of the other commits also passed as well

00:04:10,560 --> 00:04:16,440
and as a result the the machine didn't

00:04:15,120 --> 00:04:20,010
give a sign-off and therefore the code

00:04:16,440 --> 00:04:21,750
cannot be merged because it the checks

00:04:20,010 --> 00:04:26,100
need to be passed in order to be merged

00:04:21,750 --> 00:04:27,120
into master the second benefit is is

00:04:26,100 --> 00:04:29,400
going to prove your code review

00:04:27,120 --> 00:04:31,139
so here's another example of a get up or

00:04:29,400 --> 00:04:32,940
request sent to chalice where is the

00:04:31,139 --> 00:04:34,770
first time contributor they provided the

00:04:32,940 --> 00:04:37,500
commit but it passes a check it didn't

00:04:34,770 --> 00:04:39,330
pass a checks so they quickly went ahead

00:04:37,500 --> 00:04:42,000
and tried to fix some of the errors so

00:04:39,330 --> 00:04:44,220
looking at this specific one it was a

00:04:42,000 --> 00:04:45,930
pet bait violation there's longer than

00:04:44,220 --> 00:04:48,660
79 characters so they went ahead and

00:04:45,930 --> 00:04:49,919
went ahead and fixed it there's a couple

00:04:48,660 --> 00:04:51,930
more issues they had fixed but

00:04:49,919 --> 00:04:54,540
eventually they got the bills passing

00:04:51,930 --> 00:04:57,720
allowing one of our viewers to come in

00:04:54,540 --> 00:04:59,460
and go review it so there's a few points

00:04:57,720 --> 00:05:02,570
I want to point out related to how it

00:04:59,460 --> 00:05:04,590
gets improves so one enables faster

00:05:02,570 --> 00:05:06,240
iteration cycles you don't have to wait

00:05:04,590 --> 00:05:08,490
for a viewer to come by to get feedback

00:05:06,240 --> 00:05:11,850
the machines giving me feedback for your

00:05:08,490 --> 00:05:13,260
code secondly the reviewer it makes a

00:05:11,850 --> 00:05:14,669
little bit easier for them they don't

00:05:13,260 --> 00:05:18,389
have to worry about looking for as many

00:05:14,669 --> 00:05:20,310
issues and the third improvement is that

00:05:18,389 --> 00:05:22,889
it's going to bake a better experience

00:05:20,310 --> 00:05:24,780
for the contributor because if there is

00:05:22,889 --> 00:05:26,760
a lot of feedback it's a lot less

00:05:24,780 --> 00:05:31,500
personal when it comes from a machine as

00:05:26,760 --> 00:05:33,960
opposed to a human and finally the third

00:05:31,500 --> 00:05:36,450
benefit I want to outline is the machine

00:05:33,960 --> 00:05:39,169
is essentially a safety net so to pick

00:05:36,450 --> 00:05:41,310
on me now here is an example where you

00:05:39,169 --> 00:05:43,050
obviously when I submitted the pour

00:05:41,310 --> 00:05:46,860
request I did not run two checks locally

00:05:43,050 --> 00:05:49,669
and the build failed I the Machine told

00:05:46,860 --> 00:05:52,830
me that and I quickly went ahead and

00:05:49,669 --> 00:05:54,840
fixed the type check issue I had and it

00:05:52,830 --> 00:05:56,430
passed so I like to think I'm pretty

00:05:54,840 --> 00:05:59,010
familiar with all the checks every one

00:05:56,430 --> 00:06:03,090
but I do make some mistakes as well and

00:05:59,010 --> 00:06:05,099
it's nice to have that safety net so

00:06:03,090 --> 00:06:06,930
let's talk about now we know where we

00:06:05,099 --> 00:06:08,970
want to be let's talk about how we're

00:06:06,930 --> 00:06:10,400
gonna get there by looking over the

00:06:08,970 --> 00:06:12,389
steps it takes to automate all this

00:06:10,400 --> 00:06:14,340
first we're gonna have to identify the

00:06:12,389 --> 00:06:16,650
tools that we need for improving the

00:06:14,340 --> 00:06:18,870
code quality how we can make it easy to

00:06:16,650 --> 00:06:20,729
run and easily run in a local

00:06:18,870 --> 00:06:26,010
environment and then how do we enforce

00:06:20,729 --> 00:06:27,389
this across the team or a project so to

00:06:26,010 --> 00:06:29,010
dive into some of the tools the three

00:06:27,389 --> 00:06:31,169
tools I'm going to cover specifically

00:06:29,010 --> 00:06:32,669
are flake eight pile in and coverage I

00:06:31,169 --> 00:06:34,590
recommend using all these three of these

00:06:32,669 --> 00:06:38,000
tools we use all three of these tools in

00:06:34,590 --> 00:06:40,050
chalice today starting a flick aid

00:06:38,000 --> 00:06:40,770
bucket is going to analyze your source

00:06:40,050 --> 00:06:42,690
code

00:06:40,770 --> 00:06:43,919
and to run these three tools underneath

00:06:42,690 --> 00:06:46,050
a bit so if like it's just a wrapper

00:06:43,919 --> 00:06:50,370
around these three specifically PI code

00:06:46,050 --> 00:06:52,039
style Pi flakes and mccabe in order to

00:06:50,370 --> 00:06:54,509
use placate you can just pip install it

00:06:52,039 --> 00:06:55,919
to run it on a single file

00:06:54,509 --> 00:06:58,860
it'll tell you all the errors this ease

00:06:55,919 --> 00:07:00,150
and also you can run it on a directory

00:06:58,860 --> 00:07:03,270
to get all the errors for all the files

00:07:00,150 --> 00:07:06,090
in that directory starting on with pipe

00:07:03,270 --> 00:07:08,520
PI code so that's the first Tula wraps

00:07:06,090 --> 00:07:10,500
Piko style is gonna be looking for style

00:07:08,520 --> 00:07:15,000
issues specifically relates a pip eight

00:07:10,500 --> 00:07:18,000
and also non pythonic usage so looking

00:07:15,000 --> 00:07:18,509
at this code sample here is a function

00:07:18,000 --> 00:07:19,919
called print

00:07:18,509 --> 00:07:22,860
even's just prints out the even values

00:07:19,919 --> 00:07:25,440
and if we run appliquéd on it it will

00:07:22,860 --> 00:07:27,539
print out these errors related to pi

00:07:25,440 --> 00:07:28,860
code style and looking at one of these

00:07:27,539 --> 00:07:30,270
errors it will tell you the file what

00:07:28,860 --> 00:07:33,240
happened the line number

00:07:30,270 --> 00:07:35,460
the error code ID so this identify as

00:07:33,240 --> 00:07:37,860
what exact error was there's a category

00:07:35,460 --> 00:07:39,659
you can you can determine and also the

00:07:37,860 --> 00:07:42,990
description and if i was to highlight

00:07:39,659 --> 00:07:44,699
all these errors you notice that flick

00:07:42,990 --> 00:07:47,009
eight is pointing out the multiple

00:07:44,699 --> 00:07:48,990
spaces before the in operator lack of

00:07:47,009 --> 00:07:50,370
spaces around the simon operator and the

00:07:48,990 --> 00:07:53,340
use of equals equals true which is not

00:07:50,370 --> 00:07:54,930
pythonic and if i was to go ahead and

00:07:53,340 --> 00:07:57,930
fix these it will create a clean a

00:07:54,930 --> 00:07:59,580
run-through of placate mainly just say

00:07:57,930 --> 00:08:02,849
government of the equals equals true and

00:07:59,580 --> 00:08:05,340
fixed up some the spacing there we've

00:08:02,849 --> 00:08:06,360
been to pi flakes it's different than pi

00:08:05,340 --> 00:08:07,770
code style because it's not gonna be

00:08:06,360 --> 00:08:10,380
looking at your style it's gonna be

00:08:07,770 --> 00:08:14,190
looking for code bugs and it only Mitz

00:08:10,380 --> 00:08:19,020
errors for issues that have a low

00:08:14,190 --> 00:08:20,940
probability of false positives and to

00:08:19,020 --> 00:08:23,690
look at some of the at to look at some

00:08:20,940 --> 00:08:26,099
of the errors that pi flakes may show

00:08:23,690 --> 00:08:27,990
duplicate let's go ahead and run flake

00:08:26,099 --> 00:08:30,000
egged on this example and you can see

00:08:27,990 --> 00:08:31,860
that it's gonna notice that there's an

00:08:30,000 --> 00:08:34,919
unused import and also at the bottom

00:08:31,860 --> 00:08:36,539
there is a typo in is divisible the

00:08:34,919 --> 00:08:38,130
second usage of it and that's throwing

00:08:36,539 --> 00:08:39,630
to other errors related to variable

00:08:38,130 --> 00:08:43,200
referencing variable assignment and

00:08:39,630 --> 00:08:44,490
reference and in order to fix that you

00:08:43,200 --> 00:08:47,040
could go ahead and route the imports it

00:08:44,490 --> 00:08:48,540
an import statement and also add the i

00:08:47,040 --> 00:08:52,320
back into visible and get rid of all

00:08:48,540 --> 00:08:54,570
those errors the final tool that flake

00:08:52,320 --> 00:08:56,130
eight encompasses mccabe so mccabe is a

00:08:54,570 --> 00:08:58,500
complexity checker what it's going to be

00:08:56,130 --> 00:09:00,000
doing is calculating a complete mccabe

00:08:58,500 --> 00:09:02,280
complexity which is the number of

00:09:00,000 --> 00:09:05,460
independent code pass a piece of code

00:09:02,280 --> 00:09:08,190
could have and generally the if the code

00:09:05,460 --> 00:09:09,900
is complex but in the cape complexity

00:09:08,190 --> 00:09:12,210
you're probably gonna have a lot of bugs

00:09:09,900 --> 00:09:15,150
so we want to make sure we have a low

00:09:12,210 --> 00:09:16,410
mccabe score to walk through some

00:09:15,150 --> 00:09:18,060
examples how you calculate it

00:09:16,410 --> 00:09:20,910
here's identity function what it's gonna

00:09:18,060 --> 00:09:23,010
do is just return the argument I was

00:09:20,910 --> 00:09:24,720
given there's only one code Beth which

00:09:23,010 --> 00:09:27,120
is just return that value is McCade

00:09:24,720 --> 00:09:28,790
complexities one you go to a second

00:09:27,120 --> 00:09:31,560
function where it's just an if statement

00:09:28,790 --> 00:09:33,390
one branch of this made if statement

00:09:31,560 --> 00:09:35,490
returns true the second one returns

00:09:33,390 --> 00:09:38,040
false and there furthers two copass and

00:09:35,490 --> 00:09:40,080
has McCabe complexity up to the final

00:09:38,040 --> 00:09:42,570
one is contains all this has an

00:09:40,080 --> 00:09:44,160
additional if statement and it calls the

00:09:42,570 --> 00:09:45,900
contains which has a mccabe complexity

00:09:44,160 --> 00:09:47,400
of two and thus the additional if

00:09:45,900 --> 00:09:49,830
statements going to add one more layer

00:09:47,400 --> 00:09:52,530
of complexity making it a gimmick a p--

00:09:49,830 --> 00:09:54,990
complexity of three so now in order to

00:09:52,530 --> 00:09:57,180
use mccabe complexity with placate you

00:09:54,990 --> 00:10:00,180
have to opt in with the max complexity

00:09:57,180 --> 00:10:02,370
flag so by specifying two like eight

00:10:00,180 --> 00:10:04,590
will complain that the bottom function

00:10:02,370 --> 00:10:07,140
is too complex as its McCabe complexity

00:10:04,590 --> 00:10:09,030
is three as a rule of thumb it's a good

00:10:07,140 --> 00:10:10,800
idea to use the value of ten

00:10:09,030 --> 00:10:12,750
McCabe did a lot of research to start

00:10:10,800 --> 00:10:15,090
and that's what he landed on and also

00:10:12,750 --> 00:10:17,490
there is a lot of external research out

00:10:15,090 --> 00:10:20,210
there to support this this is the value

00:10:17,490 --> 00:10:22,770
that we use in chalice today as well

00:10:20,210 --> 00:10:26,490
now now we cover flake eight let's talk

00:10:22,770 --> 00:10:28,260
about pilot so pilant it's very similar

00:10:26,490 --> 00:10:30,270
to flake eight it's going to look for

00:10:28,260 --> 00:10:32,670
coding standard issues it's gonna look

00:10:30,270 --> 00:10:34,050
for styling issues any bugs but the big

00:10:32,670 --> 00:10:35,760
difference is it's generally stricter

00:10:34,050 --> 00:10:37,050
and more opinionated then you're gonna

00:10:35,760 --> 00:10:40,140
get off placates they're gonna get a lot

00:10:37,050 --> 00:10:41,370
more errors it's similar to flake eight

00:10:40,140 --> 00:10:43,680
where all I have to do is pip install

00:10:41,370 --> 00:10:45,480
pilot you run it on a single file or you

00:10:43,680 --> 00:10:49,290
can run it on a set of files in a

00:10:45,480 --> 00:10:52,440
directory moving on to a code sample of

00:10:49,290 --> 00:10:54,450
how pilant looks when you run it if you

00:10:52,440 --> 00:10:56,610
run a pile in on this example for dot pi

00:10:54,450 --> 00:10:57,810
you'll see the phone errors out you

00:10:56,610 --> 00:10:59,280
notice this is a lot more errors than

00:10:57,810 --> 00:11:02,240
you would have expected from clique

00:10:59,280 --> 00:11:05,370
eight so let's go ahead and dive into it

00:11:02,240 --> 00:11:07,290
so start an error begins with the the

00:11:05,370 --> 00:11:08,250
categories so this is see for coding

00:11:07,290 --> 00:11:10,500
standard

00:11:08,250 --> 00:11:12,510
there's a line number it gives you a

00:11:10,500 --> 00:11:14,130
message and also the human readable

00:11:12,510 --> 00:11:17,310
message ID to identify what the error

00:11:14,130 --> 00:11:19,020
was and if I was to highlight all the

00:11:17,310 --> 00:11:20,790
different issues with this code sample

00:11:19,020 --> 00:11:22,230
you'll see the following you see there's

00:11:20,790 --> 00:11:24,870
missing docstrings you'll see that

00:11:22,230 --> 00:11:26,640
there's a camel case for load into there

00:11:24,870 --> 00:11:29,460
is the dictionary use for a default

00:11:26,640 --> 00:11:32,310
argument value there's use of F which is

00:11:29,460 --> 00:11:34,410
considered an invalid variable name

00:11:32,310 --> 00:11:37,980
pepé tissues with the equal sign and

00:11:34,410 --> 00:11:39,840
also JSON not being defined so that's a

00:11:37,980 --> 00:11:41,690
lot I'm not I'm gonna go ahead and fix

00:11:39,840 --> 00:11:44,580
some of these but not all these

00:11:41,690 --> 00:11:46,950
specifically I imported JSON which is a

00:11:44,580 --> 00:11:48,750
snake case I also got rid of the default

00:11:46,950 --> 00:11:50,390
dictionary and picks up some Peppe

00:11:48,750 --> 00:11:52,950
things but I didn't fix everything

00:11:50,390 --> 00:11:55,110
specifically I have still docstrings

00:11:52,950 --> 00:11:57,240
missing I also am still using the

00:11:55,110 --> 00:11:59,580
variable F and the reason why I didn't

00:11:57,240 --> 00:12:01,770
fix these is because I have opinion

00:11:59,580 --> 00:12:06,180
against what the opinion that Pilate has

00:12:01,770 --> 00:12:07,650
and and that's gonna happen if

00:12:06,180 --> 00:12:09,210
occasionally so you're gonna want to be

00:12:07,650 --> 00:12:10,740
able to configure some of these values

00:12:09,210 --> 00:12:14,990
and the way you can figure it with

00:12:10,740 --> 00:12:17,280
Pilate is you generated an RC file so

00:12:14,990 --> 00:12:18,630
once you have the RC file you can go

00:12:17,280 --> 00:12:20,520
ahead and open it up and go to the

00:12:18,630 --> 00:12:22,350
different section that you may want so

00:12:20,520 --> 00:12:23,520
I'm going to show you now how you can

00:12:22,350 --> 00:12:25,620
disable messages all together

00:12:23,520 --> 00:12:27,360
I'm just abling the missing doc strings

00:12:25,620 --> 00:12:29,220
in general it's recommended to have

00:12:27,360 --> 00:12:30,780
docstrings I'm just showing for the sake

00:12:29,220 --> 00:12:34,110
of this presentation how you go about

00:12:30,780 --> 00:12:37,350
disabling it so continued yawn you can

00:12:34,110 --> 00:12:39,840
also tweak how errors are determined in

00:12:37,350 --> 00:12:42,240
terms of whitelisting a name so I'm

00:12:39,840 --> 00:12:44,460
gonna whitelist F mainly because on our

00:12:42,240 --> 00:12:48,900
team we use F alot to represent a file

00:12:44,460 --> 00:12:51,960
object and now if I would go ahead and

00:12:48,900 --> 00:12:55,140
run a pilot with RC file flag it will

00:12:51,960 --> 00:12:57,390
get rid of those errors in general with

00:12:55,140 --> 00:12:59,490
the pilot RC I recommend sticking to

00:12:57,390 --> 00:13:01,380
what pilot gives you unless you have a

00:12:59,490 --> 00:13:03,720
strong opinion against it especially if

00:13:01,380 --> 00:13:06,230
you're a new user to python i wouldn't

00:13:03,720 --> 00:13:11,370
meddle if those configurations unless

00:13:06,230 --> 00:13:13,110
you've realised otherwise so i mentioned

00:13:11,370 --> 00:13:16,830
before the simulator is appliquéd in

00:13:13,110 --> 00:13:19,020
Pylea and i wanted to recap all this and

00:13:16,830 --> 00:13:21,460
try to show what exactly are the

00:13:19,020 --> 00:13:23,649
similarities and differences so

00:13:21,460 --> 00:13:25,029
in terms of placating pilant they have

00:13:23,649 --> 00:13:27,279
the similarity in terms of they both at

00:13:25,029 --> 00:13:28,810
plugins configurations and they're do a

00:13:27,279 --> 00:13:31,360
lot of the basic checks such as pet bait

00:13:28,810 --> 00:13:32,800
looking for unused imports variable

00:13:31,360 --> 00:13:35,110
referencing issues and non python

00:13:32,800 --> 00:13:37,930
idiomatic statements and there's quite a

00:13:35,110 --> 00:13:39,970
big differences in between Playland and

00:13:37,930 --> 00:13:42,040
deflategate in terms of what they do in

00:13:39,970 --> 00:13:44,230
checks so pilots can be a lot slower

00:13:42,040 --> 00:13:45,580
than Flake ape but pilots can be doing a

00:13:44,230 --> 00:13:49,149
lot more checks so it's gonna be looking

00:13:45,580 --> 00:13:51,010
for names that are valid so make sure

00:13:49,149 --> 00:13:52,660
the pet bait compliant it's gonna be

00:13:51,010 --> 00:13:55,510
looking for dangerous uses pattern so

00:13:52,660 --> 00:13:57,640
I'll catch those use of internal methods

00:13:55,510 --> 00:13:59,709
it also looks for maximum so if you have

00:13:57,640 --> 00:14:02,260
too many methods too many arguments

00:13:59,709 --> 00:14:04,600
it also looks for code simulator ease so

00:14:02,260 --> 00:14:07,779
if you are violating dried don't repeat

00:14:04,600 --> 00:14:09,820
yourself I look for that however so on

00:14:07,779 --> 00:14:12,550
the other side fly gate doesn't have as

00:14:09,820 --> 00:14:14,529
many checks as a pilot but it does have

00:14:12,550 --> 00:14:16,510
checks that pylons not going to catch so

00:14:14,529 --> 00:14:19,000
has a little bit stricter whitespace

00:14:16,510 --> 00:14:20,920
support in terms of finding issues of

00:14:19,000 --> 00:14:24,070
comments and also it does McCabe

00:14:20,920 --> 00:14:25,690
complexity and in general it's a

00:14:24,070 --> 00:14:28,959
reasonable approach to actually run both

00:14:25,690 --> 00:14:30,910
of these in your development process run

00:14:28,959 --> 00:14:32,890
placate first it's a lot faster it'll

00:14:30,910 --> 00:14:35,500
get some of those initial issues out and

00:14:32,890 --> 00:14:36,850
then run pilot afterwards and in general

00:14:35,500 --> 00:14:39,730
by running both of them you have you'll

00:14:36,850 --> 00:14:41,790
cover more issues of your pipe with your

00:14:39,730 --> 00:14:45,970
coatings

00:14:41,790 --> 00:14:47,620
cover more issues and also you will not

00:14:45,970 --> 00:14:54,279
run into too many conflicts between the

00:14:47,620 --> 00:14:57,430
two tools all right so now let's talk

00:14:54,279 --> 00:14:59,320
about the final tool coverage covers is

00:14:57,430 --> 00:15:02,380
going to figure out what lines of code

00:14:59,320 --> 00:15:03,790
are missing have missing tests and in

00:15:02,380 --> 00:15:05,230
order to use it you can pip install it

00:15:03,790 --> 00:15:06,820
but most people are gonna be using the

00:15:05,230 --> 00:15:08,500
plugins so if you want to use it for pi

00:15:06,820 --> 00:15:11,709
test you just pip install pi test Cove

00:15:08,500 --> 00:15:13,390
and you can run it just within your

00:15:11,709 --> 00:15:15,310
normal test runners so this is just a

00:15:13,390 --> 00:15:17,680
normal pie test run the chalice codebase

00:15:15,310 --> 00:15:20,500
but now I can run it with the - just

00:15:17,680 --> 00:15:22,180
come flag put in specify source and also

00:15:20,500 --> 00:15:25,000
the cub report to give me how I want to

00:15:22,180 --> 00:15:27,250
put the report so printing out here

00:15:25,000 --> 00:15:30,160
you'll see that there's more statistics

00:15:27,250 --> 00:15:31,420
at the end of the test run where you'll

00:15:30,160 --> 00:15:33,070
see how many statements got looked at

00:15:31,420 --> 00:15:34,550
how many misses there were and the

00:15:33,070 --> 00:15:36,860
overall coverage at the end

00:15:34,550 --> 00:15:38,750
it'll also tell you what lines were

00:15:36,860 --> 00:15:40,580
missed and in general this is helpful

00:15:38,750 --> 00:15:41,959
because it'll tell you what lines are

00:15:40,580 --> 00:15:44,600
missing it's not going to guarantee you

00:15:41,959 --> 00:15:47,360
perfect to test quality but it will help

00:15:44,600 --> 00:15:48,890
you in achieving great test quality by

00:15:47,360 --> 00:15:51,440
telling you where your where your blind

00:15:48,890 --> 00:15:53,450
spots are and you can also improve on

00:15:51,440 --> 00:15:55,250
top of this by looking at branch

00:15:53,450 --> 00:15:58,279
coverage so branch coverage does the

00:15:55,250 --> 00:16:00,670
idea that you're going to make sure you

00:15:58,279 --> 00:16:02,660
hit both sides of a branch in a test and

00:16:00,670 --> 00:16:03,980
it's important because you can still

00:16:02,660 --> 00:16:05,959
have a hundred percent coverage but

00:16:03,980 --> 00:16:08,300
still not have hundred percent branch

00:16:05,959 --> 00:16:10,940
coverage it's really easy to enable um

00:16:08,300 --> 00:16:13,790
in a coverage RC file you just have to

00:16:10,940 --> 00:16:17,300
specify branch equals true and if you

00:16:13,790 --> 00:16:19,760
run pike of again our PI test again with

00:16:17,300 --> 00:16:22,430
coverage you'll get the following so

00:16:19,760 --> 00:16:23,899
you'll see there is a branch this house

00:16:22,430 --> 00:16:25,820
to me tells you how many branches code

00:16:23,899 --> 00:16:27,350
went over and also there's a branch part

00:16:25,820 --> 00:16:29,000
saying how many branches you missed and

00:16:27,350 --> 00:16:30,709
also noticed that the coverage went down

00:16:29,000 --> 00:16:31,970
from ninety seven percent to ninety six

00:16:30,709 --> 00:16:35,870
percent because we are missing some

00:16:31,970 --> 00:16:38,810
branches finally if you want to

00:16:35,870 --> 00:16:41,510
visualize this you can use the HTML

00:16:38,810 --> 00:16:43,459
report option so that will generate it

00:16:41,510 --> 00:16:45,380
notice index today she-male can open and

00:16:43,459 --> 00:16:47,779
i'll tell you exactly what lines are

00:16:45,380 --> 00:16:50,779
missing even tell you the reasons for

00:16:47,779 --> 00:16:53,300
why we're missing a specific branch so

00:16:50,779 --> 00:16:55,370
now that we covered coverage let's go

00:16:53,300 --> 00:16:56,899
ahead and talk and recap the tools that

00:16:55,370 --> 00:16:58,040
are covered so when I'm thinking about

00:16:56,899 --> 00:16:59,690
the tools I like to think of this

00:16:58,040 --> 00:17:01,700
diagram where I have four different

00:16:59,690 --> 00:17:02,990
buckets of things I'm trying to check in

00:17:01,700 --> 00:17:05,660
terms of code quality there's style

00:17:02,990 --> 00:17:08,120
which includes standards if it's

00:17:05,660 --> 00:17:09,860
pythonic there's bugs there's

00:17:08,120 --> 00:17:11,630
documentation in terms of style and then

00:17:09,860 --> 00:17:13,640
there's usability but a little bit more

00:17:11,630 --> 00:17:15,439
gray area when it comes to how you name

00:17:13,640 --> 00:17:17,270
your abstractions your classes your

00:17:15,439 --> 00:17:20,270
methods how many arguments and how many

00:17:17,270 --> 00:17:22,040
methods you have attached to it so as it

00:17:20,270 --> 00:17:23,839
relates to placate flake eight is going

00:17:22,040 --> 00:17:27,350
to be covering your style with regards

00:17:23,839 --> 00:17:28,730
to pet bait and in your bugs pilant on

00:17:27,350 --> 00:17:29,960
the other hand it's similar to flick

00:17:28,730 --> 00:17:31,220
eight but it is a little bit more has

00:17:29,960 --> 00:17:32,840
more checks is to be looking at

00:17:31,220 --> 00:17:34,820
documentation specifically to make sure

00:17:32,840 --> 00:17:37,460
you at least have doc strings and also

00:17:34,820 --> 00:17:39,380
usability with regards to making sure

00:17:37,460 --> 00:17:40,880
that your names are correct and also

00:17:39,380 --> 00:17:44,090
that you don't have too many arguments

00:17:40,880 --> 00:17:48,330
or methods to a two-bit abstraction or

00:17:44,090 --> 00:17:50,130
interface coverage it's going to

00:17:48,330 --> 00:17:51,870
it's going to catch any la it's gonna

00:17:50,130 --> 00:17:55,230
tell you what lines of code I have

00:17:51,870 --> 00:17:56,940
missing tests and you can add tests that

00:17:55,230 --> 00:17:58,440
way so those are the three tools I

00:17:56,940 --> 00:18:00,029
covered there's a lot more tools out

00:17:58,440 --> 00:18:01,649
there there's also a lot more tools that

00:18:00,029 --> 00:18:03,990
we use in chalice and our code quality

00:18:01,649 --> 00:18:06,630
automation checks that I wanted to do a

00:18:03,990 --> 00:18:08,309
quick shout-out to before moving on so

00:18:06,630 --> 00:18:11,370
the first one I'm just gonna mention is

00:18:08,309 --> 00:18:12,960
my PI my PI is a static type analysis

00:18:11,370 --> 00:18:14,789
tool it's awesome because it's gonna

00:18:12,960 --> 00:18:16,200
catch a whole set of bugs that flake aid

00:18:14,789 --> 00:18:18,000
in Pilon arced and a catch

00:18:16,200 --> 00:18:19,409
specifically they're gonna be catching

00:18:18,000 --> 00:18:20,880
the ones we're making the incorrect

00:18:19,409 --> 00:18:24,179
assumptions on what the types going to

00:18:20,880 --> 00:18:26,429
be there's PI doc style it's gonna

00:18:24,179 --> 00:18:28,320
enforce pepp 2:57 standards for your

00:18:26,429 --> 00:18:30,840
code base and also doc eight which also

00:18:28,320 --> 00:18:33,659
enforces correct usage of restrictor

00:18:30,840 --> 00:18:35,039
text in sphinxes a house the thing is

00:18:33,659 --> 00:18:36,659
there's a lot more there's many more

00:18:35,039 --> 00:18:38,820
tools out there I recommend doing

00:18:36,659 --> 00:18:40,740
research identifying places where you

00:18:38,820 --> 00:18:42,870
doing checks today that are done

00:18:40,740 --> 00:18:45,299
manually but could be automated in which

00:18:42,870 --> 00:18:50,490
case find a tool that appropriately fits

00:18:45,299 --> 00:18:52,289
your need or even write your own so now

00:18:50,490 --> 00:18:54,000
we have all these tools and all these

00:18:52,289 --> 00:18:57,149
configurations how do we make it easy to

00:18:54,000 --> 00:19:01,139
run all these the way we do it in

00:18:57,149 --> 00:19:02,370
chalice is we in the repository that

00:19:01,139 --> 00:19:04,830
you'll have two files there's

00:19:02,370 --> 00:19:06,299
requirements - tab detects and an make

00:19:04,830 --> 00:19:07,830
file these are the main two files we

00:19:06,299 --> 00:19:11,490
need to get up and running with the

00:19:07,830 --> 00:19:13,440
process the requirements - dev text is

00:19:11,490 --> 00:19:15,600
our car mats outside the runtime

00:19:13,440 --> 00:19:17,070
requirements of chalice where I can

00:19:15,600 --> 00:19:19,529
specify all the different tools I'm

00:19:17,070 --> 00:19:21,120
going to need so I can specify coverage

00:19:19,529 --> 00:19:23,850
you'll notice there's placate there's

00:19:21,120 --> 00:19:25,590
pilot and also we walk to specific

00:19:23,850 --> 00:19:27,539
versions the reason why we lock to

00:19:25,590 --> 00:19:29,909
specific versions and requirements tab

00:19:27,539 --> 00:19:31,409
del text because it ensures that we

00:19:29,909 --> 00:19:33,419
don't automatically upgrade our tools

00:19:31,409 --> 00:19:34,860
because if you do there's a chance we

00:19:33,419 --> 00:19:37,440
pull in a new check pulling a new bug

00:19:34,860 --> 00:19:41,130
that might break our builds and force us

00:19:37,440 --> 00:19:44,669
to immediately upgrade by locking we can

00:19:41,130 --> 00:19:46,289
upgrade on our own watch in order to

00:19:44,669 --> 00:19:49,289
install it it's very simple pip install

00:19:46,289 --> 00:19:50,760
- our so now we have all the tools

00:19:49,289 --> 00:19:51,990
installed let's talk about the make file

00:19:50,760 --> 00:19:55,110
the make file is a way for us to

00:19:51,990 --> 00:19:57,690
organize ways in order to be able to

00:19:55,110 --> 00:20:00,299
easily run all these checks and the way

00:19:57,690 --> 00:20:01,950
we've broken it up is for each type of

00:20:00,299 --> 00:20:04,110
check we want we have a separate rules

00:20:01,950 --> 00:20:05,790
we have the check rule that does sell

00:20:04,110 --> 00:20:07,530
the flake aid it does PI docks out as

00:20:05,790 --> 00:20:10,320
well there's PI lint

00:20:07,530 --> 00:20:12,240
rule and a type check role and it's very

00:20:10,320 --> 00:20:15,150
easy to run you just run make check and

00:20:12,240 --> 00:20:17,310
it will go ahead and run flake eight on

00:20:15,150 --> 00:20:18,780
the chalice source code I can run on a

00:20:17,310 --> 00:20:21,450
specific file if I had a specific

00:20:18,780 --> 00:20:23,670
configuration I want also I can run it

00:20:21,450 --> 00:20:24,770
on the tests to make sure those up to

00:20:23,670 --> 00:20:28,230
snuff

00:20:24,770 --> 00:20:29,850
there's also pilant if I do the same

00:20:28,230 --> 00:20:31,650
thing over run on chalice source code

00:20:29,850 --> 00:20:34,500
and also run it on tests we even have

00:20:31,650 --> 00:20:36,890
our own custom plugin for pilant to do

00:20:34,500 --> 00:20:38,940
additional checks for our test

00:20:36,890 --> 00:20:40,650
continuing on to the second page of this

00:20:38,940 --> 00:20:42,120
note that this is on the second slide

00:20:40,650 --> 00:20:45,240
but it's the same it's the same five

00:20:42,120 --> 00:20:47,850
make file we have rules for tests doc

00:20:45,240 --> 00:20:50,640
doc rules and also at the very bottom

00:20:47,850 --> 00:20:52,320
who knows there's this PR check so this

00:20:50,640 --> 00:20:54,720
be our checks interesting because we see

00:20:52,320 --> 00:20:57,060
it as running the gauntlet of checks so

00:20:54,720 --> 00:20:59,250
if I was to run make PR check and run

00:20:57,060 --> 00:21:00,690
the check roll the pilot roll the cover

00:20:59,250 --> 00:21:03,600
to rule the doc check roll and type

00:21:00,690 --> 00:21:05,370
check roll that's a lot so if we get

00:21:03,600 --> 00:21:08,610
through all those roll through all those

00:21:05,370 --> 00:21:10,380
recipes we feel we've filled up the code

00:21:08,610 --> 00:21:12,480
to be in a very good spot to send up

00:21:10,380 --> 00:21:15,410
step up for a pork press and up review

00:21:12,480 --> 00:21:18,090
it eventually merged it's a master and

00:21:15,410 --> 00:21:19,800
if we're running if we want to set this

00:21:18,090 --> 00:21:21,870
standard that you rerun make PR check

00:21:19,800 --> 00:21:26,400
let's talk about how we can go ahead and

00:21:21,870 --> 00:21:28,920
automate it for a team setting in the

00:21:26,400 --> 00:21:31,650
end it's gonna be very easy all you have

00:21:28,920 --> 00:21:34,830
to do is enable with the CI system for

00:21:31,650 --> 00:21:37,890
us we use Travis so what Travis is going

00:21:34,830 --> 00:21:39,900
to do is we have the following build

00:21:37,890 --> 00:21:41,970
jobs we have a Python three six Python

00:21:39,900 --> 00:21:44,520
two seven and then from there we'll just

00:21:41,970 --> 00:21:45,990
run the make file and specifically the

00:21:44,520 --> 00:21:47,580
roll we're going to run is a PR check

00:21:45,990 --> 00:21:50,640
and the PR checked by two four two seven

00:21:47,580 --> 00:21:52,200
and then from there whenever someone

00:21:50,640 --> 00:21:53,550
submits a poor request they'll have a

00:21:52,200 --> 00:21:56,070
Travis build submitted to them

00:21:53,550 --> 00:21:58,590
notice that the PR check a job is

00:21:56,070 --> 00:22:01,170
running and a PR check PI - and if those

00:21:58,590 --> 00:22:04,440
bills pass Travis will go ahead and give

00:22:01,170 --> 00:22:09,090
the check the check off for that poor

00:22:04,440 --> 00:22:11,760
request so there's one more check that

00:22:09,090 --> 00:22:13,320
we have for the team setting and it's

00:22:11,760 --> 00:22:14,940
related to coverage so at the very end

00:22:13,320 --> 00:22:16,440
of the Travis jobs

00:22:14,940 --> 00:22:18,960
go ahead and pip install code keV and

00:22:16,440 --> 00:22:20,970
run the code keV see a lot this will

00:22:18,960 --> 00:22:22,590
take the coverage reports generated from

00:22:20,970 --> 00:22:24,870
the Travis build and uploaded to a

00:22:22,590 --> 00:22:26,640
coverage service called code keV a nice

00:22:24,870 --> 00:22:28,980
part about code keV is it will go ahead

00:22:26,640 --> 00:22:31,470
and add additional check to make sure

00:22:28,980 --> 00:22:32,730
you're not losing coverage on the PO

00:22:31,470 --> 00:22:35,040
requests you're about to submit and also

00:22:32,730 --> 00:22:37,320
will comment and tell you about what

00:22:35,040 --> 00:22:39,300
areas tell you tell you the diffs for

00:22:37,320 --> 00:22:41,370
all the different changes you're making

00:22:39,300 --> 00:22:44,790
so it gives you a nice visual you say

00:22:41,370 --> 00:22:46,440
visualization that way so with those two

00:22:44,790 --> 00:22:47,970
checks in place let's revisit another

00:22:46,440 --> 00:22:50,520
pull request the same for WordPress I

00:22:47,970 --> 00:22:52,470
sent from before where I had failed the

00:22:50,520 --> 00:22:54,870
build opening up that red X you'll

00:22:52,470 --> 00:22:56,610
notice that there is a trench it was a

00:22:54,870 --> 00:22:58,950
Travis build that failed but the code

00:22:56,610 --> 00:23:02,370
keV once passed so that's the Travis one

00:22:58,950 --> 00:23:05,070
code gov and then with that I noticed

00:23:02,370 --> 00:23:07,140
that I the Travis build fast because the

00:23:05,070 --> 00:23:08,970
type checks failed and as a result I

00:23:07,140 --> 00:23:10,680
updated and all three of the checks

00:23:08,970 --> 00:23:12,720
passed which means that I'm in a good

00:23:10,680 --> 00:23:15,680
spot to go ahead and get it reviewed and

00:23:12,720 --> 00:23:19,940
get it merged into the bastard branch

00:23:15,680 --> 00:23:23,340
and to recap the benefits of automatic

00:23:19,940 --> 00:23:25,140
quality checks let me go let me go over

00:23:23,340 --> 00:23:27,870
them real quick so refresh your memory

00:23:25,140 --> 00:23:29,160
so first it's gonna be a lot faster and

00:23:27,870 --> 00:23:31,650
more accurate for a machine to do it

00:23:29,160 --> 00:23:32,910
than a human so take an example of the

00:23:31,650 --> 00:23:34,830
previous pull request it just shows you

00:23:32,910 --> 00:23:38,610
the Machine caught something that I

00:23:34,830 --> 00:23:40,110
didn't adding new quote code quality

00:23:38,610 --> 00:23:42,270
checks it's easy so if there's a new

00:23:40,110 --> 00:23:43,620
check you want all you have to do is run

00:23:42,270 --> 00:23:45,840
it on your source code make sure it pass

00:23:43,620 --> 00:23:47,490
and then add it to your make file and

00:23:45,840 --> 00:23:52,560
it'll automatically be provided by your

00:23:47,490 --> 00:23:54,480
CI system it's just a standard that code

00:23:52,560 --> 00:23:57,210
quality checks must pass in order to get

00:23:54,480 --> 00:24:00,630
merged the Machine doesn't waver

00:23:57,210 --> 00:24:06,090
it just it was strict white or black

00:24:00,630 --> 00:24:07,350
yeah it has to pass and finally it's

00:24:06,090 --> 00:24:08,970
going to improve your code review cycles

00:24:07,350 --> 00:24:11,880
so it's going to get you a quicker

00:24:08,970 --> 00:24:14,220
iteration in terms of feedback for the

00:24:11,880 --> 00:24:16,050
contributor and also for the reviewer is

00:24:14,220 --> 00:24:16,920
gonna be make their their job easier

00:24:16,050 --> 00:24:21,300
because there's less things they're

00:24:16,920 --> 00:24:23,220
gonna have to worry about so once you

00:24:21,300 --> 00:24:24,990
have all this automation set up it's not

00:24:23,220 --> 00:24:26,640
something that you just set up once and

00:24:24,990 --> 00:24:28,470
just forget about it it's something you

00:24:26,640 --> 00:24:30,419
set up and make occasional

00:24:28,470 --> 00:24:31,980
updates when needed in order to make

00:24:30,419 --> 00:24:34,590
sure that your automated code quality

00:24:31,980 --> 00:24:36,210
checks stay healthy so there's a few

00:24:34,590 --> 00:24:38,970
best practices that I would recommend

00:24:36,210 --> 00:24:41,039
base office so the first best practice

00:24:38,970 --> 00:24:43,380
is always be improving quality checks if

00:24:41,039 --> 00:24:45,860
you see something that could be checked

00:24:43,380 --> 00:24:48,780
that is currently be checked as manually

00:24:45,860 --> 00:24:51,990
try to automate it so a good example of

00:24:48,780 --> 00:24:54,120
this is here where when Challis moved

00:24:51,990 --> 00:24:56,850
from the 80s Labs organization to the

00:24:54,120 --> 00:24:59,400
EMS organization we forgot to change

00:24:56,850 --> 00:25:03,299
some of the links from 80s labs to

00:24:59,400 --> 00:25:06,390
become AWS so we could have just fixed

00:25:03,299 --> 00:25:08,250
the links and been on our merry way but

00:25:06,390 --> 00:25:11,640
instead we fix the links and added a

00:25:08,250 --> 00:25:14,309
check for it so if you highlight right

00:25:11,640 --> 00:25:15,960
here we added a duckling check so the

00:25:14,309 --> 00:25:17,549
benefit of that is that ensures that

00:25:15,960 --> 00:25:19,049
there's no other broken links and also

00:25:17,549 --> 00:25:23,520
there won't be any future broken links

00:25:19,049 --> 00:25:25,230
in chalice so that's a good example on

00:25:23,520 --> 00:25:27,750
the flipside

00:25:25,230 --> 00:25:29,190
you want to be avoiding compromising

00:25:27,750 --> 00:25:31,679
existing checks so you don't want to be

00:25:29,190 --> 00:25:35,850
loosening the restrictions or disabling

00:25:31,679 --> 00:25:38,789
a check completely as an example here is

00:25:35,850 --> 00:25:40,740
a a commit where in order to get the

00:25:38,789 --> 00:25:43,700
checks passing you notice that the get

00:25:40,740 --> 00:25:46,799
commit message said get test passing

00:25:43,700 --> 00:25:50,789
they decided to take the max complexity

00:25:46,799 --> 00:25:52,799
from 10 and put it still 11 generally

00:25:50,789 --> 00:25:54,270
you don't want to do be doing that you

00:25:52,799 --> 00:25:55,490
add these code quality checks there for

00:25:54,270 --> 00:25:57,450
a reason

00:25:55,490 --> 00:26:01,049
specifically to make sure your code

00:25:57,450 --> 00:26:03,120
quality is up to up to snuff and you

00:26:01,049 --> 00:26:04,830
want to be fixing the code not the test

00:26:03,120 --> 00:26:06,570
when you're making these changes and

00:26:04,830 --> 00:26:08,130
honestly if you're out of max complexity

00:26:06,570 --> 00:26:09,990
of 10 we probably should have done some

00:26:08,130 --> 00:26:13,710
refactoring to get it a little bit lower

00:26:09,990 --> 00:26:16,500
already all right so third best practice

00:26:13,710 --> 00:26:17,940
this is a tricky one but specifically it

00:26:16,500 --> 00:26:19,440
is you don't want to follow under a

00:26:17,940 --> 00:26:21,299
false sense of security with these

00:26:19,440 --> 00:26:23,100
automated code quality checks you still

00:26:21,299 --> 00:26:27,270
want to be doing thorough code reviews

00:26:23,100 --> 00:26:30,809
of what of what you're submitting so

00:26:27,270 --> 00:26:32,520
here's a sample of a PR that I said it

00:26:30,809 --> 00:26:34,409
was a quick bug fix it was about a two

00:26:32,520 --> 00:26:37,679
line change related to making sure that

00:26:34,409 --> 00:26:40,020
defaults get reverted back to the code

00:26:37,679 --> 00:26:42,090
the extra code I added here was mainly

00:26:40,020 --> 00:26:44,730
test that was the big

00:26:42,090 --> 00:26:48,990
that's a big part of it and it also

00:26:44,730 --> 00:26:53,130
passed the checks and in the end I ended

00:26:48,990 --> 00:26:55,440
up closing it mainly because if you look

00:26:53,130 --> 00:26:58,590
at the subsequent poll requests I sent I

00:26:55,440 --> 00:26:59,910
have a description here so I said when I

00:26:58,590 --> 00:27:02,490
originally sent the poor request I

00:26:59,910 --> 00:27:04,260
looked at I finally just made the

00:27:02,490 --> 00:27:05,820
updates to pass a test to pass the test

00:27:04,260 --> 00:27:07,920
I rose like okay we're all good but when

00:27:05,820 --> 00:27:09,150
I looked at it again I realized I don't

00:27:07,920 --> 00:27:11,310
think this is the right approach on how

00:27:09,150 --> 00:27:13,530
we should be doing this I'm adding a

00:27:11,310 --> 00:27:16,500
default specific logic to a general

00:27:13,530 --> 00:27:17,820
purpose function so instead I refactored

00:27:16,500 --> 00:27:20,880
it to add it into the configuration

00:27:17,820 --> 00:27:21,690
logic and did it end up being a lot

00:27:20,880 --> 00:27:23,070
better in the end

00:27:21,690 --> 00:27:24,960
it had made it a lot easier for us to

00:27:23,070 --> 00:27:28,740
test so you always got to be doing

00:27:24,960 --> 00:27:30,450
thorough code reviews in the end so now

00:27:28,740 --> 00:27:34,770
that I talked about how you can upkeep

00:27:30,450 --> 00:27:37,440
the system let's recap what I covered in

00:27:34,770 --> 00:27:39,630
order to build the system first I talked

00:27:37,440 --> 00:27:41,400
about the code quality tooling so I

00:27:39,630 --> 00:27:44,790
talked about how you can use placate to

00:27:41,400 --> 00:27:48,060
catch pepé tissues also code bugs and

00:27:44,790 --> 00:27:50,160
complexity issues pilant similar to

00:27:48,060 --> 00:27:51,690
flake 8 it's a lot more strict it's a

00:27:50,160 --> 00:27:55,200
lot more stricter has more checks and

00:27:51,690 --> 00:27:56,460
will be more opinionated talked about

00:27:55,200 --> 00:27:58,860
coverage and how you can use that to

00:27:56,460 --> 00:28:01,200
determine where your missing tests in

00:27:58,860 --> 00:28:03,080
terms of lines of code and there's many

00:28:01,200 --> 00:28:05,280
more out there like I said before

00:28:03,080 --> 00:28:06,750
ideally you should be doing research to

00:28:05,280 --> 00:28:08,970
see what tools you can use

00:28:06,750 --> 00:28:10,440
what checks you're doing currently that

00:28:08,970 --> 00:28:12,090
are manual that could be automated and

00:28:10,440 --> 00:28:13,560
find the appropriate tooling or even

00:28:12,090 --> 00:28:16,080
write your own you can even write

00:28:13,560 --> 00:28:19,410
scripts plug-ins for placate pilant

00:28:16,080 --> 00:28:21,480
there's a lot of options out there once

00:28:19,410 --> 00:28:23,790
you determine your tooling you need to

00:28:21,480 --> 00:28:26,100
be able to manage it so the way we do in

00:28:23,790 --> 00:28:28,710
chalice is requirements - Deb detects to

00:28:26,100 --> 00:28:31,560
isolate where you what tools you want to

00:28:28,710 --> 00:28:33,720
install and then we use the make file to

00:28:31,560 --> 00:28:37,500
make it really easy to run these tools

00:28:33,720 --> 00:28:38,970
and finally once you have the local

00:28:37,500 --> 00:28:40,500
environment set up you need to automate

00:28:38,970 --> 00:28:42,900
it to make sure everyone else is

00:28:40,500 --> 00:28:44,970
following by the rules and checks and to

00:28:42,900 --> 00:28:46,830
do so you can use CI systems to run

00:28:44,970 --> 00:28:48,690
these checks you can use coverage

00:28:46,830 --> 00:28:50,700
services to make sure your coverage is

00:28:48,690 --> 00:28:51,990
up kept and also make sure you're

00:28:50,700 --> 00:28:52,910
following the best practices once this

00:28:51,990 --> 00:28:55,860
is all set up

00:28:52,910 --> 00:28:58,500
and with that recap

00:28:55,860 --> 00:29:00,420
a couple links that I wanted to share to

00:28:58,500 --> 00:29:02,280
for you all to go ahead and look at

00:29:00,420 --> 00:29:03,870
after the stock the first link is the

00:29:02,280 --> 00:29:05,910
pet to the Python code quality Authority

00:29:03,870 --> 00:29:07,530
this has a lot of cool tools out there

00:29:05,910 --> 00:29:09,690
that can get help improve your code

00:29:07,530 --> 00:29:12,000
quality the second one is to the Challis

00:29:09,690 --> 00:29:13,230
repository this the purpose of this link

00:29:12,000 --> 00:29:15,380
is so you can dive into the source code

00:29:13,230 --> 00:29:18,240
yourself to see how Challis does it and

00:29:15,380 --> 00:29:19,950
with those links I want to thank you all

00:29:18,240 --> 00:29:21,720
for coming and listen to my talk I

00:29:19,950 --> 00:29:33,480
really hope you got a lot out of it

00:29:21,720 --> 00:29:35,760
thank you alright so if there are any

00:29:33,480 --> 00:29:38,520
questions I invite you to talk to Kyle

00:29:35,760 --> 00:29:40,980
offline use this contact info let's give

00:29:38,520 --> 00:29:46,299
it him one more round of applause

00:29:40,980 --> 00:29:46,299

YouTube URL: https://www.youtube.com/watch?v=G1lDk_WKXvY


