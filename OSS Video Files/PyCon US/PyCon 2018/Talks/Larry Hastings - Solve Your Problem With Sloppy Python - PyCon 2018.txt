Title: Larry Hastings - Solve Your Problem With Sloppy Python - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Larry Hastings

Stop writing crappy shell scriptsâ€”write crappy Python scripts instead!

Other talks will show you how to write clean, performant, robust Python.  But that's not always necessary.  When writing personal automation or solving one-shot problems, it can be safe (and fun!) to quickly hack something together.

This talk will show examples of problems suitable for this approach, scenarios where it's reasonable to cut corners, novel techniques that can help break a problem down, and shortcuts that can speed development.

Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:02,389 --> 00:00:06,180
whatever I'm ready to go it's 10:40

00:00:05,460 --> 00:00:08,490
let's hit it

00:00:06,180 --> 00:00:09,599
okay ladies and gentlemen boys and girls

00:00:08,490 --> 00:00:12,719
children of all ages

00:00:09,599 --> 00:00:15,210
my name is Larry Hastings and this is

00:00:12,719 --> 00:00:16,710
solve your problem with sloppy Python

00:00:15,210 --> 00:00:18,990
can I get my slides on the screen please

00:00:16,710 --> 00:00:20,490
thank you yeah

00:00:18,990 --> 00:00:21,810
I don't know what happened if you don't

00:00:20,490 --> 00:00:25,789
like the individualization this is the

00:00:21,810 --> 00:00:29,760
only other talk so welcome to the room

00:00:25,789 --> 00:00:33,680
so ladies and gentlemen boys and girls I

00:00:29,760 --> 00:00:36,420
dare you to write some sloppy Python now

00:00:33,680 --> 00:00:38,940
what I'm talking about here is personal

00:00:36,420 --> 00:00:40,079
automation I'm not talking about code

00:00:38,940 --> 00:00:42,210
that you're writing in a professional

00:00:40,079 --> 00:00:43,649
context I'm not talking about code that

00:00:42,210 --> 00:00:46,260
you're gonna check in well maybe you'll

00:00:43,649 --> 00:00:48,300
check it in but often it'll be throwaway

00:00:46,260 --> 00:00:49,559
scripts you're never gonna keep and this

00:00:48,300 --> 00:00:50,879
is not code that's gonna be reviewed by

00:00:49,559 --> 00:00:53,039
anybody else this is code that you're

00:00:50,879 --> 00:00:54,960
writing for yourself and you're the only

00:00:53,039 --> 00:00:56,370
person who's gonna be using it and guess

00:00:54,960 --> 00:00:58,260
what you can cut some corners and write

00:00:56,370 --> 00:01:00,600
some crappy code and do some things that

00:00:58,260 --> 00:01:02,730
are really questionable and it's totally

00:01:00,600 --> 00:01:03,390
fine no one will ever see it no one will

00:01:02,730 --> 00:01:05,580
ever know

00:01:03,390 --> 00:01:07,740
so the fundamental thing you're trying

00:01:05,580 --> 00:01:09,930
to do here is to solve your problem

00:01:07,740 --> 00:01:11,220
there is some task something that you're

00:01:09,930 --> 00:01:12,600
doing at the computer and you don't want

00:01:11,220 --> 00:01:15,170
to do it anymore you want the computer

00:01:12,600 --> 00:01:17,700
to do it for you so when I'm doing that

00:01:15,170 --> 00:01:20,040
generally I want to get from I have a

00:01:17,700 --> 00:01:22,530
problem - oh the problem has gone away

00:01:20,040 --> 00:01:23,759
now in the shortest possible time the

00:01:22,530 --> 00:01:26,189
shortest possible distance and that

00:01:23,759 --> 00:01:28,020
means doing things in a often in the

00:01:26,189 --> 00:01:29,250
simple way in a really dumb way and

00:01:28,020 --> 00:01:33,090
you'd be surprised at why you can get

00:01:29,250 --> 00:01:34,799
away with so in the talk I'm going to go

00:01:33,090 --> 00:01:36,450
over some techniques that I've picked up

00:01:34,799 --> 00:01:38,100
over time I'm gonna show you some

00:01:36,450 --> 00:01:41,939
examples of specific problems that I

00:01:38,100 --> 00:01:43,470
have solved using the techniques and I'm

00:01:41,939 --> 00:01:44,729
going to show you some tips and tricks

00:01:43,470 --> 00:01:46,970
that I've picked up along the way

00:01:44,729 --> 00:01:48,720
that'll help you cut some corners

00:01:46,970 --> 00:01:50,220
specifically there's gonna be a deep

00:01:48,720 --> 00:01:52,829
dive into one problem that we're gonna

00:01:50,220 --> 00:01:54,840
solve together and then we're going to

00:01:52,829 --> 00:01:55,890
kind of take a survey over a bunch of

00:01:54,840 --> 00:01:57,540
other programs that I've written over

00:01:55,890 --> 00:02:00,000
time for this personal automation stuff

00:01:57,540 --> 00:02:01,590
because I do it all the time so when I

00:02:00,000 --> 00:02:06,990
was writing this talk I was like rules

00:02:01,590 --> 00:02:09,110
man there are no rules yeah but there

00:02:06,990 --> 00:02:11,580
are rules

00:02:09,110 --> 00:02:14,099
there's only three and they're kind of

00:02:11,580 --> 00:02:16,680
important very easy to stick to first

00:02:14,099 --> 00:02:18,599
fail early and noisily I think this is

00:02:16,680 --> 00:02:20,340
really the most important point this

00:02:18,599 --> 00:02:21,629
personal automation what I'm doing is

00:02:20,340 --> 00:02:23,400
I'm writing a script that's gonna do the

00:02:21,629 --> 00:02:25,019
work for me but it doesn't take to tend

00:02:23,400 --> 00:02:26,970
to take very long and it tends to be

00:02:25,019 --> 00:02:27,959
kind of crappy code and so I keep an eye

00:02:26,970 --> 00:02:30,180
on it while it's running

00:02:27,959 --> 00:02:31,890
so like if it fails I wanted to fail

00:02:30,180 --> 00:02:33,540
like right now right in the middle of

00:02:31,890 --> 00:02:35,310
what it was doing so I can see what was

00:02:33,540 --> 00:02:37,319
wrong and fix it right away I don't want

00:02:35,310 --> 00:02:38,819
to fail and then it keeps going and then

00:02:37,319 --> 00:02:40,650
it's not clear what exactly happened so

00:02:38,819 --> 00:02:42,959
fail as soon as you know that there's a

00:02:40,650 --> 00:02:44,819
problem and just give up give out a

00:02:42,959 --> 00:02:48,209
strap stack trace anything you can do to

00:02:44,819 --> 00:02:50,370
stop the process I want you to stop

00:02:48,209 --> 00:02:54,750
writing shell scripts ladies and

00:02:50,370 --> 00:02:57,569
gentlemen shell thank you look don't

00:02:54,750 --> 00:02:59,579
applaud I don't have time okay shell is

00:02:57,569 --> 00:03:02,010
a terrible language Python is a

00:02:59,579 --> 00:03:03,750
wonderful language we're Python East as

00:03:02,010 --> 00:03:05,670
we're at you love Python so much you

00:03:03,750 --> 00:03:07,019
came to a conference why are you writing

00:03:05,670 --> 00:03:10,950
things in other languages that are

00:03:07,019 --> 00:03:12,060
crappy every time that I'm writing I'm

00:03:10,950 --> 00:03:14,819
like oh I need to write a shell script

00:03:12,060 --> 00:03:18,780
and I write file name dot SH I stop I

00:03:14,819 --> 00:03:21,840
sigh to myself I backspace and I write

00:03:18,780 --> 00:03:24,599
py and every time it's a better decision

00:03:21,840 --> 00:03:26,130
I've never regretted this policy finally

00:03:24,599 --> 00:03:27,870
have some fun again you're doing this

00:03:26,130 --> 00:03:30,209
for yourself if you're hating doing it

00:03:27,870 --> 00:03:32,459
don't do it I'm not gonna make you look

00:03:30,209 --> 00:03:35,459
nobody's gonna judge you this is nobody

00:03:32,459 --> 00:03:37,799
knows okay now there are these are

00:03:35,459 --> 00:03:39,090
guidelines these are not strict the

00:03:37,799 --> 00:03:40,470
rules we've established you really got

00:03:39,090 --> 00:03:43,560
to stick to those these it's up to you

00:03:40,470 --> 00:03:45,030
again I'll never know I think you should

00:03:43,560 --> 00:03:46,590
use the latest version of Python every

00:03:45,030 --> 00:03:49,139
time it's always the best version of the

00:03:46,590 --> 00:03:51,480
language 3.6 has F strings if you're not

00:03:49,139 --> 00:03:55,190
using F strings what is wrong with you

00:03:51,480 --> 00:03:55,190
where has your life gone wrong

00:03:55,200 --> 00:03:59,400
try automating things even more and what

00:03:57,389 --> 00:04:00,900
this is this is kind of a guideline as a

00:03:59,400 --> 00:04:02,310
mentor I repeat to myself oh I'm

00:04:00,900 --> 00:04:03,750
automating a task and it gets to a

00:04:02,310 --> 00:04:06,720
certain point it's like and now I have

00:04:03,750 --> 00:04:08,669
to do the manual step I'm like okay can

00:04:06,720 --> 00:04:10,799
I oughta mate that bit too how far can i

00:04:08,669 --> 00:04:12,510
push this you'd be surprised at what you

00:04:10,799 --> 00:04:14,220
can get away with it's really strange

00:04:12,510 --> 00:04:15,900
um and I've automated things I was like

00:04:14,220 --> 00:04:17,729
I'm never gonna oh wait I could do this

00:04:15,900 --> 00:04:21,359
really stupid thing oh the stupid thing

00:04:17,729 --> 00:04:22,740
worked okay let's move on truck this is

00:04:21,359 --> 00:04:24,900
an opportunity for you to use

00:04:22,740 --> 00:04:26,910
libraries and technologies and this may

00:04:24,900 --> 00:04:29,310
not be particularly appropriate I solved

00:04:26,910 --> 00:04:30,750
a problem using PI UV it was like the

00:04:29,310 --> 00:04:33,360
third revision of a script I've been

00:04:30,750 --> 00:04:34,889
writing and PI UV is this asynchronous

00:04:33,360 --> 00:04:35,910
programming library it wasn't really

00:04:34,889 --> 00:04:37,259
that appropriate it would have been

00:04:35,910 --> 00:04:38,880
easier to solve it with I don't know

00:04:37,259 --> 00:04:41,160
threads I needed to watch processes that

00:04:38,880 --> 00:04:44,220
exited and I was like well great I can

00:04:41,160 --> 00:04:45,720
use PI UV I shouldn't use PI UV but I

00:04:44,220 --> 00:04:47,819
want to learn PI UV anyway so it's like

00:04:45,720 --> 00:04:50,580
sure again no one will ever know no

00:04:47,819 --> 00:04:52,259
one's gonna judge you and finally I want

00:04:50,580 --> 00:04:55,370
you to do it feels good here this is an

00:04:52,259 --> 00:04:58,199
opportunity for you to break the rules

00:04:55,370 --> 00:05:00,599
hairy close your ears if you don't want

00:04:58,199 --> 00:05:03,389
to write tests don't write any tests if

00:05:00,599 --> 00:05:05,849
you don't want to do Pepe don't do Pepe

00:05:03,389 --> 00:05:09,690
have 160 line a character line I don't

00:05:05,849 --> 00:05:11,099
care no one will ever know so we're

00:05:09,690 --> 00:05:12,479
gonna start with our deep dive and the

00:05:11,099 --> 00:05:13,949
problem we're gonna solve is a mass

00:05:12,479 --> 00:05:15,509
rename we're gonna rain them a whole

00:05:13,949 --> 00:05:18,349
bunch of files and it's really not that

00:05:15,509 --> 00:05:21,030
many at 60 files in this example so I

00:05:18,349 --> 00:05:23,099
like old-time radio shows you remember

00:05:21,030 --> 00:05:24,509
the old plug the scripted writer dramas

00:05:23,099 --> 00:05:26,370
they had on the radio from the 30s to

00:05:24,509 --> 00:05:29,099
the 50s maybe you don't remember them

00:05:26,370 --> 00:05:30,599
when they were on but you can download

00:05:29,099 --> 00:05:33,120
all of these things off the internet and

00:05:30,599 --> 00:05:35,570
listen to them these are files from a

00:05:33,120 --> 00:05:38,909
radio show called rogues gallery and

00:05:35,570 --> 00:05:41,940
rogues gallery is a detective show the

00:05:38,909 --> 00:05:44,130
detective Richard rogue in every episode

00:05:41,940 --> 00:05:46,289
he gets either he falls asleep or he

00:05:44,130 --> 00:05:49,530
gets knocked unconscious and he floats

00:05:46,289 --> 00:05:52,500
up to cloud eight where a tormentor

00:05:49,530 --> 00:05:54,750
named Igor which is rogue spelled

00:05:52,500 --> 00:05:57,870
backwards mocks him in a high-pitched

00:05:54,750 --> 00:06:01,409
voice and tells him Clues that he needs

00:05:57,870 --> 00:06:02,940
to solve the case for that week old-time

00:06:01,409 --> 00:06:06,569
radio maybe a little weirder than you

00:06:02,940 --> 00:06:08,729
suspected it was now these file names

00:06:06,569 --> 00:06:10,169
are crap and the problem is you can

00:06:08,729 --> 00:06:11,669
download these for free but the people

00:06:10,169 --> 00:06:12,840
who make these collections they tend to

00:06:11,669 --> 00:06:15,090
be a little bit older and they're not so

00:06:12,840 --> 00:06:16,740
computer savvy and so I don't know what

00:06:15,090 --> 00:06:18,479
they're doing any file system that could

00:06:16,740 --> 00:06:19,889
handle a file name this long could

00:06:18,479 --> 00:06:21,180
handle a file name with spaces so why

00:06:19,889 --> 00:06:23,460
did they borrow all the spaces out I

00:06:21,180 --> 00:06:25,409
don't know but I want to rename these

00:06:23,460 --> 00:06:28,500
and I could use our mastery name er like

00:06:25,409 --> 00:06:29,819
I like qmv from renamed utils but I

00:06:28,500 --> 00:06:31,529
still would have to go over every single

00:06:29,819 --> 00:06:33,360
line and add spaces in front of all

00:06:31,529 --> 00:06:35,219
those capital letters and I thought hey

00:06:33,360 --> 00:06:36,540
let's use this for the talk I'm gonna

00:06:35,219 --> 00:06:38,750
write a script that is going to do

00:06:36,540 --> 00:06:41,130
all the renaming for me automatically so

00:06:38,750 --> 00:06:42,570
we're gonna take a little side trip here

00:06:41,130 --> 00:06:44,220
and talk about hard links for a minute

00:06:42,570 --> 00:06:45,540
because I worry you kids these days

00:06:44,220 --> 00:06:47,610
you've never heard of what a hard link

00:06:45,540 --> 00:06:50,250
is if you know what hard links are check

00:06:47,610 --> 00:06:52,310
your email for the next minute so we are

00:06:50,250 --> 00:06:56,160
familiar in Python with the concept that

00:06:52,310 --> 00:06:57,960
the objects and variables are separate

00:06:56,160 --> 00:06:59,310
things variables are really just a name

00:06:57,960 --> 00:07:01,110
that points to an object so here's an

00:06:59,310 --> 00:07:03,540
object it's a tuple it contains one two

00:07:01,110 --> 00:07:06,510
three and if you said number equals

00:07:03,540 --> 00:07:09,840
tuple one two three then we have a name

00:07:06,510 --> 00:07:13,020
numbers and it points to the object

00:07:09,840 --> 00:07:14,670
which is the tuple and you could if if

00:07:13,020 --> 00:07:16,140
the if it was a mutable object then you

00:07:14,670 --> 00:07:18,900
can modify it and numbers would see the

00:07:16,140 --> 00:07:20,070
update and you could assign it again to

00:07:18,900 --> 00:07:22,800
a different thing and now we have two

00:07:20,070 --> 00:07:24,780
names for the same object and if you

00:07:22,800 --> 00:07:28,050
updated that one then everything would

00:07:24,780 --> 00:07:30,180
update guess what file systems in UNIX

00:07:28,050 --> 00:07:31,980
behave the same way I don't think this

00:07:30,180 --> 00:07:35,010
is true on Windows don't ask me ask

00:07:31,980 --> 00:07:36,870
Steve dower he's here I don't think they

00:07:35,010 --> 00:07:38,760
support hard links in this way but file

00:07:36,870 --> 00:07:40,440
systems on UNIX have the same concept

00:07:38,760 --> 00:07:42,300
you can have the contents of a file and

00:07:40,440 --> 00:07:43,890
then you have a file name that points to

00:07:42,300 --> 00:07:45,210
it and guess what you can have a second

00:07:43,890 --> 00:07:46,110
file name that also points to it it

00:07:45,210 --> 00:07:48,390
doesn't have to be in the same directory

00:07:46,110 --> 00:07:51,510
even it needs to be on the same file

00:07:48,390 --> 00:07:53,880
system that's the restriction so and if

00:07:51,510 --> 00:07:56,460
you modify this file both of the file

00:07:53,880 --> 00:07:57,960
names will see the updates so we're

00:07:56,460 --> 00:07:59,730
gonna use this to our advantage

00:07:57,960 --> 00:08:01,200
let me walk you through real quick I'm

00:07:59,730 --> 00:08:03,600
gonna show you what it looks like let's

00:08:01,200 --> 00:08:06,330
again this is all gonna be under UNIX

00:08:03,600 --> 00:08:08,940
that's all I ever use you touch a file

00:08:06,330 --> 00:08:10,410
and we're gonna list it and guess what

00:08:08,940 --> 00:08:12,660
if you've been looking at the output of

00:08:10,410 --> 00:08:13,830
Alice - shell for years this is the hard

00:08:12,660 --> 00:08:14,970
link number it's been staring in the

00:08:13,830 --> 00:08:17,820
face all this time that's what that

00:08:14,970 --> 00:08:19,500
column means there is one link to the

00:08:17,820 --> 00:08:21,120
contents of this file so we're gonna

00:08:19,500 --> 00:08:22,680
create a second one the command-line

00:08:21,120 --> 00:08:24,810
utility that creates hard links for you

00:08:22,680 --> 00:08:26,280
is called Ln and again you might be

00:08:24,810 --> 00:08:29,160
familiar with symbolic links and that's

00:08:26,280 --> 00:08:30,570
Alan - s use it all the time well the

00:08:29,160 --> 00:08:32,400
original point of the utility was to

00:08:30,570 --> 00:08:34,950
create hard links so we're creating a

00:08:32,400 --> 00:08:37,229
hard link from the contents of the file

00:08:34,950 --> 00:08:39,930
X to a new file name we're calling Y and

00:08:37,229 --> 00:08:42,150
now we do an LS dash L and we have x and

00:08:39,930 --> 00:08:45,900
y and both of their hard like numbers or

00:08:42,150 --> 00:08:47,820
two so the idea here is when you're

00:08:45,900 --> 00:08:49,500
going to do a mass rename like this this

00:08:47,820 --> 00:08:50,430
is an easy way to make a backup for

00:08:49,500 --> 00:08:52,170
yourself

00:08:50,430 --> 00:08:53,339
I used to when I was gonna make a rename

00:08:52,170 --> 00:08:55,110
a whole bunch of files I would copy the

00:08:53,339 --> 00:08:56,670
files to a backup directory and then I

00:08:55,110 --> 00:08:58,920
realized why am i copying the files just

00:08:56,670 --> 00:09:00,839
make hard links so you could do this

00:08:58,920 --> 00:09:02,910
step in Python but I don't bother like

00:09:00,839 --> 00:09:04,800
there is OS dot link that creates a hard

00:09:02,910 --> 00:09:06,360
link for you in Python but don't bother

00:09:04,800 --> 00:09:08,459
just do it in the shell it's the easiest

00:09:06,360 --> 00:09:09,779
thing make a backup directory and then

00:09:08,459 --> 00:09:12,690
iterate over the files in directory

00:09:09,779 --> 00:09:14,730
you're interrupting them then you

00:09:12,690 --> 00:09:16,410
iterate over the files and then you just

00:09:14,730 --> 00:09:18,330
hard link into the backup directory and

00:09:16,410 --> 00:09:19,920
now you have backups if you screw up the

00:09:18,330 --> 00:09:22,110
file names in the middle of your process

00:09:19,920 --> 00:09:23,640
like they're half-baked some of them are

00:09:22,110 --> 00:09:25,410
renamed properly some of they're screwed

00:09:23,640 --> 00:09:26,940
up some of them of the originals you can

00:09:25,410 --> 00:09:27,959
just delete them all and recreate the

00:09:26,940 --> 00:09:30,209
hard links back in the original

00:09:27,959 --> 00:09:31,980
directory start over and fix your script

00:09:30,209 --> 00:09:34,050
so now we're actually gonna start

00:09:31,980 --> 00:09:35,670
automating this step one is we need to

00:09:34,050 --> 00:09:38,070
get the file names into our Python

00:09:35,670 --> 00:09:39,420
process so that we can modify them and

00:09:38,070 --> 00:09:41,459
you might be thinking ok we're gonna use

00:09:39,420 --> 00:09:43,350
glob well actually we're probably not

00:09:41,459 --> 00:09:45,240
because here's the thing we just created

00:09:43,350 --> 00:09:46,589
that backup directory and if we create a

00:09:45,240 --> 00:09:49,770
Python script in that directory now we

00:09:46,589 --> 00:09:52,050
have the Python script and we would need

00:09:49,770 --> 00:09:54,870
to filter those out of the output and

00:09:52,050 --> 00:09:56,430
you know it's just easier this is this

00:09:54,870 --> 00:09:59,279
list of files isn't going to change it's

00:09:56,430 --> 00:10:01,320
been the same for probably years we're

00:09:59,279 --> 00:10:03,300
just gonna cap the contents of LS into

00:10:01,320 --> 00:10:04,860
our Python script and then throw triple

00:10:03,300 --> 00:10:06,420
quotes around it and now we have a giant

00:10:04,860 --> 00:10:11,070
string that contains all the file names

00:10:06,420 --> 00:10:13,350
and I do this all the time and you just

00:10:11,070 --> 00:10:15,510
edit this and you like remove the backup

00:10:13,350 --> 00:10:17,520
directory and remove X PI and you're

00:10:15,510 --> 00:10:18,750
ready to go now this is one giant string

00:10:17,520 --> 00:10:20,459
we need to break it up so I'm gonna

00:10:18,750 --> 00:10:22,290
teach you guys some string manipulation

00:10:20,459 --> 00:10:24,959
functions built into this string object

00:10:22,290 --> 00:10:27,540
the first three I'll strip are stripped

00:10:24,959 --> 00:10:29,730
and strip these remove whitespace from a

00:10:27,540 --> 00:10:31,709
string L strip removes the leading

00:10:29,730 --> 00:10:33,450
whitespace the left whitespace returns

00:10:31,709 --> 00:10:35,220
the result our strip removes the

00:10:33,450 --> 00:10:37,380
trailing whitespace returns the result

00:10:35,220 --> 00:10:39,480
strip removes it from both ends and

00:10:37,380 --> 00:10:41,070
returns the result and if you give any

00:10:39,480 --> 00:10:42,480
of those functions a string that only

00:10:41,070 --> 00:10:44,400
contains whitespace all of them will

00:10:42,480 --> 00:10:46,950
return an empty string the other thing

00:10:44,400 --> 00:10:48,750
we need is called split split takes a

00:10:46,950 --> 00:10:51,570
single string and breaks it up and

00:10:48,750 --> 00:10:53,160
returns to a list of strings where every

00:10:51,570 --> 00:10:55,079
time it found the string you passed in

00:10:53,160 --> 00:10:57,209
the separator string it breaks it into

00:10:55,079 --> 00:10:58,589
two pieces if you don't pass in a

00:10:57,209 --> 00:10:59,970
separator string it breaks it up by

00:10:58,589 --> 00:11:03,209
whitespace and any amount of whitespace

00:10:59,970 --> 00:11:04,390
is equivalent so here's what I do every

00:11:03,209 --> 00:11:06,550
single time I just

00:11:04,390 --> 00:11:09,100
I just added that stripped out split at

00:11:06,550 --> 00:11:10,900
the end and I split by lines and now we

00:11:09,100 --> 00:11:12,490
have a list of all the file names and

00:11:10,900 --> 00:11:14,170
you might be thinking why do I need that

00:11:12,490 --> 00:11:17,710
strip and the answer is because there's

00:11:14,170 --> 00:11:19,150
these two end of lines here that leaving

00:11:17,710 --> 00:11:21,490
them there makes it easier to work on

00:11:19,150 --> 00:11:22,990
this list of files but if I leave them

00:11:21,490 --> 00:11:23,950
there in the actual output then I'm

00:11:22,990 --> 00:11:25,060
gonna get an empty string at the

00:11:23,950 --> 00:11:26,380
beginning in the end of the list and I

00:11:25,060 --> 00:11:27,400
have to filter those out so it's easier

00:11:26,380 --> 00:11:29,020
to just remove it right they're not

00:11:27,400 --> 00:11:30,460
stripped that split again this is an

00:11:29,020 --> 00:11:33,370
idiom I use all the time when I'm doing

00:11:30,460 --> 00:11:34,480
this sort of work now it's time to start

00:11:33,370 --> 00:11:36,460
dissecting these because now we can

00:11:34,480 --> 00:11:37,870
iterate over the list of files and look

00:11:36,460 --> 00:11:41,200
at each one in terms so here is an

00:11:37,870 --> 00:11:42,670
example file and if we look at it a

00:11:41,200 --> 00:11:44,710
little bit okay we can probably carve

00:11:42,670 --> 00:11:49,300
this up with just slices so this is the

00:11:44,710 --> 00:11:50,800
date this was from october 25th 1945 i'm

00:11:49,300 --> 00:11:52,900
going to add the 19 on the front I don't

00:11:50,800 --> 00:11:54,550
like they're just 45 by itself this is

00:11:52,900 --> 00:11:57,070
the ordinal number this is the 19th

00:11:54,550 --> 00:11:58,600
episode aired and I don't know why they

00:11:57,070 --> 00:12:00,190
have a hundreds digit there are only 72

00:11:58,600 --> 00:12:00,790
ever made I'm the last one was made in

00:12:00,190 --> 00:12:03,070
the 50s

00:12:00,790 --> 00:12:04,810
there's aren't gonna be any more so I

00:12:03,070 --> 00:12:06,610
just throw away the numbers digit I only

00:12:04,810 --> 00:12:08,650
grabbed those two and then this is gonna

00:12:06,610 --> 00:12:11,490
be the title of it it's just the rest of

00:12:08,650 --> 00:12:13,450
it so this is what it looks like so far

00:12:11,490 --> 00:12:15,160
the problem with this of course is that

00:12:13,450 --> 00:12:16,810
we didn't remove that mp3 and we want to

00:12:15,160 --> 00:12:19,930
remove that so this brings us to our

00:12:16,810 --> 00:12:23,980
next string operator our string method

00:12:19,930 --> 00:12:27,190
is called partition partition you give

00:12:23,980 --> 00:12:29,080
it a string and it returns to you three

00:12:27,190 --> 00:12:31,120
strings everything up to the separator

00:12:29,080 --> 00:12:33,580
the separator itself and everything

00:12:31,120 --> 00:12:34,570
after the separator our petition does

00:12:33,580 --> 00:12:36,190
the same thing but it's the last

00:12:34,570 --> 00:12:38,800
instance of the separator string instead

00:12:36,190 --> 00:12:40,270
of the first one and if you pass in a

00:12:38,800 --> 00:12:42,040
separator that does not appear in the

00:12:40,270 --> 00:12:43,810
string it still returns to you three

00:12:42,040 --> 00:12:45,460
strings but now the first string

00:12:43,810 --> 00:12:47,740
contains the entire original string and

00:12:45,460 --> 00:12:49,840
then you get two empty strings so this

00:12:47,740 --> 00:12:51,070
looks like this oh I want to I want to

00:12:49,840 --> 00:12:53,470
say by the way I think this is a really

00:12:51,070 --> 00:12:56,020
elegant API it's really nice and

00:12:53,470 --> 00:12:59,230
predictable in a lot of ways and for one

00:12:56,020 --> 00:13:00,760
example of that is every time it doesn't

00:12:59,230 --> 00:13:02,050
matter what the original string is it

00:13:00,760 --> 00:13:04,300
doesn't matter what the Partition string

00:13:02,050 --> 00:13:05,890
is whatever you use you get before

00:13:04,300 --> 00:13:07,060
stepping after if you add them back

00:13:05,890 --> 00:13:09,480
together you always get the original

00:13:07,060 --> 00:13:12,070
string back it's nice and predictable

00:13:09,480 --> 00:13:14,770
but so here a couple of examples of

00:13:12,070 --> 00:13:15,940
partition in use if we have a space in

00:13:14,770 --> 00:13:17,290
the thing and we finish them on space

00:13:15,940 --> 00:13:18,970
and we get three strings before the

00:13:17,290 --> 00:13:21,490
space the space and after

00:13:18,970 --> 00:13:22,900
if we partition on a dot that doesn't

00:13:21,490 --> 00:13:24,220
appear in the original we get the

00:13:22,900 --> 00:13:27,550
original string and then two empty

00:13:24,220 --> 00:13:29,380
strings and again because it's a

00:13:27,550 --> 00:13:30,490
perdition it's it's so predictable and

00:13:29,380 --> 00:13:32,980
it's so easy to use

00:13:30,490 --> 00:13:35,650
if you partition our partition on the

00:13:32,980 --> 00:13:37,870
extension of the file name and then you

00:13:35,650 --> 00:13:40,120
just bracket 0 you just grab the zero

00:13:37,870 --> 00:13:41,890
thing from the list you always get the

00:13:40,120 --> 00:13:43,630
file name with the extension clipped off

00:13:41,890 --> 00:13:46,030
if the extension isn't there you'll get

00:13:43,630 --> 00:13:47,680
the entire original string so this is a

00:13:46,030 --> 00:13:49,990
really safe operation to throw away

00:13:47,680 --> 00:13:52,030
extensions I never use what is it Oh s

00:13:49,990 --> 00:13:54,820
dot path that split xed yeah who needs

00:13:52,030 --> 00:13:58,180
it it's it's it's it's really just doing

00:13:54,820 --> 00:13:59,830
this anyway so another tip I kind of

00:13:58,180 --> 00:14:01,870
like to test as I'm going along so I get

00:13:59,830 --> 00:14:04,210
partway and then I stop and I print out

00:14:01,870 --> 00:14:06,310
what I've got right now and see how it

00:14:04,210 --> 00:14:08,680
looks so this right now looks like this

00:14:06,310 --> 00:14:10,510
these are the the dates look good the

00:14:08,680 --> 00:14:11,890
ordinal numbers look good now it's time

00:14:10,510 --> 00:14:13,870
to deal with these lack of spaces in

00:14:11,890 --> 00:14:15,370
these file names all I need to do really

00:14:13,870 --> 00:14:17,700
is look for the capital letters and add

00:14:15,370 --> 00:14:20,230
a space in front so here's what I did I

00:14:17,700 --> 00:14:22,840
just iterate over it so first of all I

00:14:20,230 --> 00:14:25,270
throw lists around the the title that

00:14:22,840 --> 00:14:27,940
takes and the input iterable and breaks

00:14:25,270 --> 00:14:29,560
it up into individual elements so now we

00:14:27,940 --> 00:14:31,090
have a list that contains single

00:14:29,560 --> 00:14:33,610
character strings that contains the

00:14:31,090 --> 00:14:35,680
entire title of the of the program and

00:14:33,610 --> 00:14:37,390
then I enumerate over it so I also get

00:14:35,680 --> 00:14:38,980
the ordinal number of where that

00:14:37,390 --> 00:14:40,240
character appears in it and I look at

00:14:38,980 --> 00:14:41,350
the character and if it's uppercase I

00:14:40,240 --> 00:14:43,360
had a space in front and put it back

00:14:41,350 --> 00:14:45,250
into the list then I joined it back

00:14:43,360 --> 00:14:47,380
together and then I strip to throw a

00:14:45,250 --> 00:14:49,030
white space because we just added a

00:14:47,380 --> 00:14:51,930
whitespace character because the first

00:14:49,030 --> 00:14:53,920
character was an uppercase character now

00:14:51,930 --> 00:14:57,100
you're probably thinking why didn't use

00:14:53,920 --> 00:14:58,960
a list comprehension and the answer is I

00:14:57,100 --> 00:15:00,070
don't know this was harder to write I

00:14:58,960 --> 00:15:01,390
had to sit there and think for a minute

00:15:00,070 --> 00:15:03,550
how to write the list comprehension

00:15:01,390 --> 00:15:05,950
this was dead easy to write I usually

00:15:03,550 --> 00:15:07,210
just do it like this again

00:15:05,950 --> 00:15:08,740
no one's gonna judge you do whatever

00:15:07,210 --> 00:15:09,970
feels good and if you want to practice

00:15:08,740 --> 00:15:13,360
your list comprehensions do all this

00:15:09,970 --> 00:15:14,800
comprehension I don't care so the things

00:15:13,360 --> 00:15:16,360
are looking pretty good now but there's

00:15:14,800 --> 00:15:19,960
still one more problem again they didn't

00:15:16,360 --> 00:15:21,280
like spaces they didn't like apostrophes

00:15:19,960 --> 00:15:23,830
either and there are a couple other

00:15:21,280 --> 00:15:26,680
words that didn't break up properly and

00:15:23,830 --> 00:15:27,730
so there's one more string function this

00:15:26,680 --> 00:15:28,900
is the last string function I have to

00:15:27,730 --> 00:15:31,360
introduce to you in the talk

00:15:28,900 --> 00:15:32,830
it's called ster dot replace surd art

00:15:31,360 --> 00:15:35,170
replace searches for instance

00:15:32,830 --> 00:15:36,850
of old string in the string and replaces

00:15:35,170 --> 00:15:39,670
them with new string and returns the

00:15:36,850 --> 00:15:41,980
result and so what I do I again this is

00:15:39,670 --> 00:15:43,690
a an idiom I use all the time I think of

00:15:41,980 --> 00:15:47,010
this I call this an exception list this

00:15:43,690 --> 00:15:49,870
is a tuple of tuples of replacement

00:15:47,010 --> 00:15:51,400
search and replace strings so I just

00:15:49,870 --> 00:15:53,590
iterate over these and for every single

00:15:51,400 --> 00:15:55,930
title I do all of these replacements

00:15:53,590 --> 00:15:58,060
most of them don't fire every time this

00:15:55,930 --> 00:15:59,920
is really slow guess what we don't care

00:15:58,060 --> 00:16:01,060
it's fine you you're you're not

00:15:59,920 --> 00:16:03,880
performance sensitive in this sort of

00:16:01,060 --> 00:16:05,470
automation so now everything looks

00:16:03,880 --> 00:16:07,750
pretty good and actually we're basically

00:16:05,470 --> 00:16:09,880
done all we need to do is format the

00:16:07,750 --> 00:16:11,770
filename and do an OS dot rename and

00:16:09,880 --> 00:16:15,940
we're done you could use su-chub

00:16:11,770 --> 00:16:17,260
Shu til Shu till dot move and that's

00:16:15,940 --> 00:16:19,150
more sophisticated that can move files

00:16:17,260 --> 00:16:21,280
across filesystem boundaries and things

00:16:19,150 --> 00:16:23,440
I usually don't bother I can remember

00:16:21,280 --> 00:16:25,330
how to spell OS where you am so that's

00:16:23,440 --> 00:16:26,890
the end of our deep dive now we're going

00:16:25,330 --> 00:16:28,660
to talk about the more sophisticated

00:16:26,890 --> 00:16:29,410
scripts that I've written over time and

00:16:28,660 --> 00:16:31,570
we're not going to look at all the

00:16:29,410 --> 00:16:33,040
source code for those so the first ones

00:16:31,570 --> 00:16:34,330
provision and like I said by the way I

00:16:33,040 --> 00:16:36,820
have 10 minutes left I'm really gonna go

00:16:34,330 --> 00:16:39,580
fast provision is solving this problem

00:16:36,820 --> 00:16:42,700
so I have a laptop I have a backup

00:16:39,580 --> 00:16:44,500
laptop I have a desktop machine I have

00:16:42,700 --> 00:16:46,570
this cool desktop replacement laptop

00:16:44,500 --> 00:16:48,700
that I'm gonna use at the sprints I have

00:16:46,570 --> 00:16:52,230
a server I have a home theater PC all

00:16:48,700 --> 00:16:54,370
these machines are running a bun - and I

00:16:52,230 --> 00:16:56,620
reinstall every six months because I

00:16:54,370 --> 00:16:58,060
like to run their latest version I don't

00:16:56,620 --> 00:16:59,560
trust the upgrade installers I always

00:16:58,060 --> 00:17:01,210
install from scratch and that means I

00:16:59,560 --> 00:17:02,950
have every six months I have like eight

00:17:01,210 --> 00:17:04,600
or ten machines that I've installed from

00:17:02,950 --> 00:17:05,830
scratch and they don't know anything and

00:17:04,600 --> 00:17:07,570
I need to configure them to make them

00:17:05,830 --> 00:17:10,150
comfortable for how I like to use them

00:17:07,570 --> 00:17:12,400
so that's what provision is for

00:17:10,150 --> 00:17:13,660
provision is literally the first program

00:17:12,400 --> 00:17:16,089
well it's the second program because I

00:17:13,660 --> 00:17:18,520
have to SCP it over but it is the first

00:17:16,089 --> 00:17:19,930
program I run that runs on the new

00:17:18,520 --> 00:17:22,630
machine and it configures everything the

00:17:19,930 --> 00:17:24,760
way that I want it so what does it do it

00:17:22,630 --> 00:17:27,699
installs 140 plus packages including

00:17:24,760 --> 00:17:29,680
sublime text which needs its own PPA and

00:17:27,699 --> 00:17:32,050
Chrome which has its own funny Deb that

00:17:29,680 --> 00:17:34,210
it wants to install it installs my known

00:17:32,050 --> 00:17:35,740
keys for SSH so that I can just hesitate

00:17:34,210 --> 00:17:38,350
to places and I don't have to type my

00:17:35,740 --> 00:17:40,270
password installs my fonts it installs

00:17:38,350 --> 00:17:42,610
my to-do lists and I personal data which

00:17:40,270 --> 00:17:44,500
are synchronized to using mercurial it

00:17:42,610 --> 00:17:46,690
configures T MUX and zishe all the way

00:17:44,500 --> 00:17:48,129
that I like them it configures Nemo

00:17:46,690 --> 00:17:50,649
the default file manager because I hate

00:17:48,129 --> 00:17:52,299
what they're doing to Nautilus it

00:17:50,649 --> 00:17:54,279
downloads and builds the current Python

00:17:52,299 --> 00:17:56,529
- and Python 3 it literally goes to a

00:17:54,279 --> 00:18:00,129
Python Road org slash download scrapes

00:17:56,529 --> 00:18:01,559
the page uses a built-in HTML parser

00:18:00,129 --> 00:18:04,120
that's in the Python standard library

00:18:01,559 --> 00:18:06,820
finds the tarball for the current

00:18:04,120 --> 00:18:09,220
version downloads that decompresses it

00:18:06,820 --> 00:18:13,450
into a directory runs configure make

00:18:09,220 --> 00:18:15,309
make install for two and three and then

00:18:13,450 --> 00:18:17,379
it also downloads the the Python

00:18:15,309 --> 00:18:18,850
documentation and pops open a web page

00:18:17,379 --> 00:18:20,830
on the library page so I can hit

00:18:18,850 --> 00:18:24,639
bookmark and put it in my toolbar now

00:18:20,830 --> 00:18:26,049
I'm ready to use the machine just to

00:18:24,639 --> 00:18:28,539
give you an idea of how crappy this code

00:18:26,049 --> 00:18:30,100
is here's how I install packages I pass

00:18:28,539 --> 00:18:32,350
in all of the packages I want to install

00:18:30,100 --> 00:18:35,139
and I take that I join it together I

00:18:32,350 --> 00:18:38,500
create a command line and I call sudo

00:18:35,139 --> 00:18:41,169
apt-get install - why yes here's your

00:18:38,500 --> 00:18:43,960
list of packages you know what I tried

00:18:41,169 --> 00:18:45,429
that and it worked first time like why

00:18:43,960 --> 00:18:48,309
are you writing shell scripts this is so

00:18:45,429 --> 00:18:50,470
easy it gets weirder

00:18:48,309 --> 00:18:52,570
here is how I install sublime text so

00:18:50,470 --> 00:18:53,710
at-sign app that sad ecker ATAR that

00:18:52,570 --> 00:18:55,480
installs packages for me those are

00:18:53,710 --> 00:18:56,440
preconditions for this thing and it's

00:18:55,480 --> 00:18:57,580
really just going to be neat ways so

00:18:56,440 --> 00:18:59,200
that I'm not constantly installing

00:18:57,580 --> 00:19:00,460
packages all the time I like collect

00:18:59,200 --> 00:19:01,929
them all at once and I install them all

00:19:00,460 --> 00:19:04,299
at once all these precondition packages

00:19:01,929 --> 00:19:07,450
then sublime what I do is I look and see

00:19:04,299 --> 00:19:09,970
is it installed okay is the license file

00:19:07,450 --> 00:19:11,490
installed and if it isn't then here's

00:19:09,970 --> 00:19:13,990
the second part of the function I

00:19:11,490 --> 00:19:16,779
download my license file from one of my

00:19:13,990 --> 00:19:19,779
servers and I cat it

00:19:16,779 --> 00:19:21,850
I run a system shell I cat it and pipe

00:19:19,779 --> 00:19:24,340
that into X clip selection - see so now

00:19:21,850 --> 00:19:26,049
my license is on the clipboard and I run

00:19:24,340 --> 00:19:28,000
sublime text the first thing it does is

00:19:26,049 --> 00:19:30,700
pop up dialog say hey enter your license

00:19:28,000 --> 00:19:33,700
key here I press ctrl-v I hit enter and

00:19:30,700 --> 00:19:35,379
I'm done I can't automate this because

00:19:33,700 --> 00:19:37,120
sublime text wants to like encrypt it

00:19:35,379 --> 00:19:38,710
and put system information on itself so

00:19:37,120 --> 00:19:41,259
it has to be a manual process but that

00:19:38,710 --> 00:19:42,759
was as far as I could push it now I'm

00:19:41,259 --> 00:19:44,259
not gonna give you I'm not gonna put

00:19:42,759 --> 00:19:45,549
upload this anywhere cuz provision has a

00:19:44,259 --> 00:19:46,750
bunch of stuff in it that I don't want

00:19:45,549 --> 00:19:48,309
to share it'd be a lot of work to make

00:19:46,750 --> 00:19:49,690
it like clean for all of you but there's

00:19:48,309 --> 00:19:51,970
a kind of a similar script I wrote last

00:19:49,690 --> 00:19:53,799
year I was part of a team writing a

00:19:51,970 --> 00:19:55,960
video game in a week for something

00:19:53,799 --> 00:19:57,970
called PI week we wrote a game Dan Pope

00:19:55,960 --> 00:20:00,680
and I called my sincerest apologies and

00:19:57,970 --> 00:20:03,530
it's a pair it's a real bear to get in

00:20:00,680 --> 00:20:05,000
but on a bunch of sevens not ten I wrote

00:20:03,530 --> 00:20:07,520
a script that just does all of the work

00:20:05,000 --> 00:20:09,680
for you so my since your install if you

00:20:07,520 --> 00:20:12,380
go to get the hub go to Larry Hastings

00:20:09,680 --> 00:20:14,360
PI week 24 you just download this one

00:20:12,380 --> 00:20:16,880
script install mine sincerest apologies

00:20:14,360 --> 00:20:17,870
on a boon to 1710 you run that it's

00:20:16,880 --> 00:20:19,790
gonna install all these weird

00:20:17,870 --> 00:20:21,050
dependencies and things and you're ready

00:20:19,790 --> 00:20:24,490
to play the game it's worked every time

00:20:21,050 --> 00:20:27,559
I've tried it so moving on you can't I

00:20:24,490 --> 00:20:28,880
have a problem I like buying music from

00:20:27,559 --> 00:20:32,780
online services I don't like streaming

00:20:28,880 --> 00:20:35,480
so I go and buy FLAC files from Bandcamp

00:20:32,780 --> 00:20:37,940
and CD Baby and Google Play Music which

00:20:35,480 --> 00:20:40,600
only sells mp3s and HD tracks which are

00:20:37,940 --> 00:20:42,980
these crazy high resolution files and

00:20:40,600 --> 00:20:45,110
they give you a zip file that contains a

00:20:42,980 --> 00:20:46,580
bunch of file names and these final

00:20:45,110 --> 00:20:48,460
names again they're crap I got to change

00:20:46,580 --> 00:20:50,450
them so this is what Bandcamp looks like

00:20:48,460 --> 00:20:51,830
google play music like to put them in

00:20:50,450 --> 00:20:54,260
sub directories which is a pain I don't

00:20:51,830 --> 00:20:55,490
want those CD Baby has these terrible

00:20:54,260 --> 00:20:58,370
file names that again don't contain

00:20:55,490 --> 00:20:59,809
spaces I don't understand people this is

00:20:58,370 --> 00:21:01,670
what I wanted to look like this is how

00:20:59,809 --> 00:21:04,910
I'm used to it from Winamp in the 90s it

00:21:01,670 --> 00:21:05,390
should be name of the track name of the

00:21:04,910 --> 00:21:07,730
artist

00:21:05,390 --> 00:21:09,350
there should be an mp3 or excuse me a

00:21:07,730 --> 00:21:11,929
playlist file and m3u file that contains

00:21:09,350 --> 00:21:14,860
the files in track order so first thing

00:21:11,929 --> 00:21:16,910
was I had to go and find a Python

00:21:14,860 --> 00:21:18,559
multimedia tagging library that I liked

00:21:16,910 --> 00:21:20,780
this is the one I've settled on tag Lib

00:21:18,559 --> 00:21:22,580
it's just Python bindings for a C

00:21:20,780 --> 00:21:25,190
library that's a really old immature and

00:21:22,580 --> 00:21:26,750
well debugged and I just started writing

00:21:25,190 --> 00:21:27,170
script so I wrote a script called you

00:21:26,750 --> 00:21:28,970
can't

00:21:27,170 --> 00:21:30,710
Bandcamp which takes the files from

00:21:28,970 --> 00:21:32,870
Bandcamp and decompresses them sets the

00:21:30,710 --> 00:21:34,400
way I want and then I was like okay now

00:21:32,870 --> 00:21:36,590
I got a FAQ that up and make one for CD

00:21:34,400 --> 00:21:38,150
Baby so I copied it and just renamed it

00:21:36,590 --> 00:21:39,920
and then hack that one up and now worked

00:21:38,150 --> 00:21:41,059
for CD Baby and I was in the process of

00:21:39,920 --> 00:21:42,170
doing it for google play music and I

00:21:41,059 --> 00:21:43,790
thought you know what I'm not really

00:21:42,170 --> 00:21:44,900
changing these scripts that much I bet I

00:21:43,790 --> 00:21:47,120
could write something that would work

00:21:44,900 --> 00:21:49,400
for all of them and I did and it works

00:21:47,120 --> 00:21:51,650
great so this is just called D camp what

00:21:49,400 --> 00:21:53,330
it does is it creates a randomly named

00:21:51,650 --> 00:21:55,760
directory in the current directory puts

00:21:53,330 --> 00:21:58,309
the zip file in there and unzips it

00:21:55,760 --> 00:22:00,140
using Oeste system it flattens the

00:21:58,309 --> 00:22:01,610
directory it removes all the subtree

00:22:00,140 --> 00:22:04,010
under the directory and just puts all

00:22:01,610 --> 00:22:06,080
the files in the root then it scans all

00:22:04,010 --> 00:22:07,730
the metadata in that file in all of

00:22:06,080 --> 00:22:09,290
those files and make sure it we have

00:22:07,730 --> 00:22:11,900
enough we really need track numbers we

00:22:09,290 --> 00:22:13,340
need artist names and and track names

00:22:11,900 --> 00:22:14,510
and things like that and if we have

00:22:13,340 --> 00:22:17,120
everything we need

00:22:14,510 --> 00:22:18,260
then it renames everything it cleans it

00:22:17,120 --> 00:22:19,850
up a lot of people like to use capital

00:22:18,260 --> 00:22:22,220
letters like all caps I don't know why

00:22:19,850 --> 00:22:23,059
so I just use title case on everything

00:22:22,220 --> 00:22:24,770
and there are a couple of things that

00:22:23,059 --> 00:22:27,260
title case screws up like punctuation

00:22:24,770 --> 00:22:28,580
like apostrophes it capitalizes the

00:22:27,260 --> 00:22:30,380
letter after it so I have a couple of

00:22:28,580 --> 00:22:32,210
special case fixes but that gives me a

00:22:30,380 --> 00:22:33,169
clean artist I will name and title and

00:22:32,210 --> 00:22:35,120
now I have everything I need

00:22:33,169 --> 00:22:37,460
I rename all the media files themselves

00:22:35,120 --> 00:22:39,710
the way I want them I create a playlist

00:22:37,460 --> 00:22:41,630
with the files in our album order I

00:22:39,710 --> 00:22:42,880
rename the directory the way that I want

00:22:41,630 --> 00:22:45,620
that and we're done

00:22:42,880 --> 00:22:47,720
one last file we're gonna look at again

00:22:45,620 --> 00:22:49,940
I like old-time radio my favorite show

00:22:47,720 --> 00:22:51,830
is called yours truly Johnny dollar and

00:22:49,940 --> 00:22:53,690
I that actually buy on CDs because I

00:22:51,830 --> 00:22:56,240
want the cleanest audio I can get this

00:22:53,690 --> 00:22:58,100
is 35 episodes on 10 compact discs these

00:22:56,240 --> 00:23:00,290
are a little weird some of the episodes

00:22:58,100 --> 00:23:01,490
there is two half-hour episodes on a CD

00:23:00,290 --> 00:23:04,160
and those are individual stories

00:23:01,490 --> 00:23:05,990
sometimes it's 5 15 minute episodes and

00:23:04,160 --> 00:23:07,429
that's one continuous story from when

00:23:05,990 --> 00:23:09,290
there was a serial and it was five

00:23:07,429 --> 00:23:11,510
nights a week and they're a little bit

00:23:09,290 --> 00:23:14,210
different and none of these CDs are ever

00:23:11,510 --> 00:23:18,020
known to the likes free DB or CD DB or

00:23:14,210 --> 00:23:20,900
musicbrainz so when I run the file the

00:23:18,020 --> 00:23:22,669
program to just rip them I get really

00:23:20,900 --> 00:23:24,320
terrible filenames and I got to fix up

00:23:22,669 --> 00:23:26,299
this metadata now again I could use a

00:23:24,320 --> 00:23:27,559
tagging program but it was such a pain

00:23:26,299 --> 00:23:28,730
to use a tagging program for all these

00:23:27,559 --> 00:23:30,980
and I was ripping so many of them I

00:23:28,730 --> 00:23:33,559
wrote a custom script to rename these

00:23:30,980 --> 00:23:36,049
things for me so the first step was make

00:23:33,559 --> 00:23:38,360
a custom data file format because I

00:23:36,049 --> 00:23:40,010
wanted to make it as easy as possible as

00:23:38,360 --> 00:23:42,049
little effort as possible in order to

00:23:40,010 --> 00:23:43,549
type in the metadata so this understands

00:23:42,049 --> 00:23:45,679
what Johnny dollar things look like

00:23:43,549 --> 00:23:47,660
defaults in 1956 because that's my

00:23:45,679 --> 00:23:49,280
favorite year the matter that's kind of

00:23:47,660 --> 00:23:51,110
the middle of the title and the month

00:23:49,280 --> 00:23:52,370
and the day and this is five part story

00:23:51,110 --> 00:23:53,780
because it noticed there were five files

00:23:52,370 --> 00:23:56,540
there's a slightly different template

00:23:53,780 --> 00:23:58,520
for if there are two stories where I

00:23:56,540 --> 00:24:00,440
would say like year 1 year 2 month 1

00:23:58,520 --> 00:24:03,350
month 2 things like that it omits the

00:24:00,440 --> 00:24:04,880
current the correct template but it does

00:24:03,350 --> 00:24:06,770
a cat it writes it out to a file and

00:24:04,880 --> 00:24:09,110
then it runs VI on the file so that

00:24:06,770 --> 00:24:10,640
presents the user me with an evitable

00:24:09,110 --> 00:24:12,980
thing so I can type in my metadata and

00:24:10,640 --> 00:24:14,570
then once we I exits it slurps it back

00:24:12,980 --> 00:24:16,610
in and now we have to parse it and guess

00:24:14,570 --> 00:24:18,140
what we wrote a custom file format

00:24:16,610 --> 00:24:21,380
parsing it's the easiest thing I'm

00:24:18,140 --> 00:24:23,000
serious all you need to do create a dict

00:24:21,380 --> 00:24:25,400
and then we're gonna iterate over the

00:24:23,000 --> 00:24:28,040
file again it's strip dot split just

00:24:25,400 --> 00:24:28,280
like we did before for each line strip

00:24:28,040 --> 00:24:30,110
it

00:24:28,280 --> 00:24:32,000
and then if it starts with a hash

00:24:30,110 --> 00:24:33,530
character or it's an empty line throw it

00:24:32,000 --> 00:24:35,840
away that's a comment or an empty line

00:24:33,530 --> 00:24:38,270
we don't care then it's going to be in

00:24:35,840 --> 00:24:40,250
the format name equals value partition

00:24:38,270 --> 00:24:42,140
on the equal sign make sure we had an

00:24:40,250 --> 00:24:43,970
equal sign it's a legal line and then

00:24:42,140 --> 00:24:45,140
take those two values strip those

00:24:43,970 --> 00:24:47,090
because they're gonna have leading and

00:24:45,140 --> 00:24:48,620
trailing whitespace probably and just

00:24:47,090 --> 00:24:50,960
set it inside of the dict guess what we

00:24:48,620 --> 00:24:55,550
just parsed in a custom metadata file

00:24:50,960 --> 00:24:56,810
format and we're done at that point all

00:24:55,550 --> 00:24:58,220
we needed to do was fix the metadata

00:24:56,810 --> 00:25:01,010
because we've already got it I typed it

00:24:58,220 --> 00:25:02,090
in rename the files write the playlist

00:25:01,010 --> 00:25:04,160
because it didn't write a playlist so

00:25:02,090 --> 00:25:05,420
further five partners put it in the

00:25:04,160 --> 00:25:08,660
correct directory where I store my

00:25:05,420 --> 00:25:10,190
old-time radio and we're done and that's

00:25:08,660 --> 00:25:12,050
actually the presentation except there's

00:25:10,190 --> 00:25:13,310
one more tip you know how I've been

00:25:12,050 --> 00:25:15,740
showing you OS that's just some all

00:25:13,310 --> 00:25:17,480
these slides you have to stop using it

00:25:15,740 --> 00:25:19,130
and the reason is I told you at the

00:25:17,480 --> 00:25:20,540
beginning you have to fail early and

00:25:19,130 --> 00:25:22,370
often and while I was writing this talk

00:25:20,540 --> 00:25:23,930
I realized you know what OS that system

00:25:22,370 --> 00:25:25,460
is not failing early and often for me

00:25:23,930 --> 00:25:28,580
os that system if the program that you

00:25:25,460 --> 00:25:30,290
run fails then it just keeps it said

00:25:28,580 --> 00:25:32,720
well that's fine let's keep going you

00:25:30,290 --> 00:25:34,910
want a program that you want a function

00:25:32,720 --> 00:25:36,860
in Python that fails when the program

00:25:34,910 --> 00:25:38,930
fails if it returns a nonzero value then

00:25:36,860 --> 00:25:41,390
you want to stop and you want it slap in

00:25:38,930 --> 00:25:42,710
your face so the function you want again

00:25:41,390 --> 00:25:44,840
we're using current version of Python

00:25:42,710 --> 00:25:46,370
it's sub-process dot run and you want to

00:25:44,840 --> 00:25:48,380
pass in and check equals true if that

00:25:46,370 --> 00:25:50,090
returns nonzero exits throws an

00:25:48,380 --> 00:25:52,490
exception you're done and this is

00:25:50,090 --> 00:25:54,500
actually really easy to run here is the

00:25:52,490 --> 00:25:56,180
replacement you can take I can take this

00:25:54,500 --> 00:25:58,850
function and just paste it into all my

00:25:56,180 --> 00:26:00,770
scripts and replace OS that system with

00:25:58,850 --> 00:26:02,480
run and it works fine you don't have to

00:26:00,770 --> 00:26:04,160
pass in the list of the arguments it

00:26:02,480 --> 00:26:05,570
just handles a string it's fine you want

00:26:04,160 --> 00:26:07,760
a shell equals true so you can do the

00:26:05,570 --> 00:26:09,530
crazy things like piping and sudo and

00:26:07,760 --> 00:26:12,850
things like that and everything's great

00:26:09,530 --> 00:26:12,850
and that's it

00:26:17,309 --> 00:26:22,179
Thank You Larry we've got a few minutes

00:26:20,319 --> 00:26:24,069
for questions douse so come to the

00:26:22,179 --> 00:26:25,539
microphone if you've got one oh we have

00:26:24,069 --> 00:26:27,249
time for questions look at how fast I

00:26:25,539 --> 00:26:30,190
went I would you probably don't remember

00:26:27,249 --> 00:26:32,709
anything I said I would ask that you

00:26:30,190 --> 00:26:36,129
used this time only for questions

00:26:32,709 --> 00:26:38,379
directed at the speaker though please

00:26:36,129 --> 00:26:43,749
discuss longer questions yeah we have

00:26:38,379 --> 00:26:47,589
four minutes for questions okay there's

00:26:43,749 --> 00:26:50,619
a microphone right here hi thanks for

00:26:47,589 --> 00:26:53,769
the talk the new things that writing got

00:26:50,619 --> 00:26:55,989
like this teaches you or habits that you

00:26:53,769 --> 00:26:58,690
wouldn't want to I can tell you I'm

00:26:55,989 --> 00:27:01,329
sorry do you speak up if you if you

00:26:58,690 --> 00:27:06,759
write code like this it teaches you well

00:27:01,329 --> 00:27:08,559
bad habits which results in bad code

00:27:06,759 --> 00:27:10,479
later down the line where you really

00:27:08,559 --> 00:27:11,919
need a good code I'm sorry it's like

00:27:10,479 --> 00:27:14,709
echoey and stuff can someone repeat his

00:27:11,919 --> 00:27:15,849
question for me oh great if you write

00:27:14,709 --> 00:27:17,319
code like this it teaches your bad

00:27:15,849 --> 00:27:19,119
habits resulting bad code later down the

00:27:17,319 --> 00:27:25,269
line when you really need the code we're

00:27:19,119 --> 00:27:26,979
all consenting adults here I don't think

00:27:25,269 --> 00:27:28,359
it teaches you bad habits I know you

00:27:26,979 --> 00:27:31,569
practice your habits and then they

00:27:28,359 --> 00:27:34,599
become ingrained in you my point is

00:27:31,569 --> 00:27:36,999
again this is fun and this is a time for

00:27:34,599 --> 00:27:39,249
you to take off those restrictions that

00:27:36,999 --> 00:27:40,629
you normally have at work and exercise

00:27:39,249 --> 00:27:41,679
that it's like you're working you're

00:27:40,629 --> 00:27:42,879
like I wish I could do this well at

00:27:41,679 --> 00:27:44,529
least you get an excuse to do it at home

00:27:42,879 --> 00:27:45,909
I don't think it teaches you bad habits

00:27:44,529 --> 00:27:48,450
I think it lets you exercise your bad

00:27:45,909 --> 00:27:53,600
habits and get it out of your system

00:27:48,450 --> 00:27:53,600
yeah hyleri have you heard of ansible

00:27:54,019 --> 00:27:59,840
again have I heard what have you heard

00:27:56,639 --> 00:28:03,049
of ansible ansible yes I've heard of it

00:27:59,840 --> 00:28:03,049
try it

00:28:04,820 --> 00:28:12,179
that's not Python what I'm looking for

00:28:07,499 --> 00:28:14,129
an excuse to write more Python hi so as

00:28:12,179 --> 00:28:16,169
a data scientist at work like I end up

00:28:14,129 --> 00:28:21,480
like doing a lot of stuff like what you

00:28:16,169 --> 00:28:24,779
do in order to like get manipulate my

00:28:21,480 --> 00:28:27,749
data and things like that so how do you

00:28:24,779 --> 00:28:29,639
decide when you go from right writing a

00:28:27,749 --> 00:28:33,149
script like this to like you know making

00:28:29,639 --> 00:28:38,149
it a process like how do you scripts

00:28:33,149 --> 00:28:41,489
evolve how do i how do my scripts evolve

00:28:38,149 --> 00:28:43,470
again unless I'm doing something like I

00:28:41,489 --> 00:28:45,450
want to try out this library I want to

00:28:43,470 --> 00:28:46,529
get from I have a problem - I have

00:28:45,450 --> 00:28:48,570
solved a problem in the quickest

00:28:46,529 --> 00:28:49,710
possible thing usually that means the

00:28:48,570 --> 00:28:51,509
first idea that I have that I think

00:28:49,710 --> 00:28:54,299
might work I try it and if it works I'm

00:28:51,509 --> 00:28:56,220
done and I move on so the scripts evolve

00:28:54,299 --> 00:28:57,690
over time if it turns out later it's

00:28:56,220 --> 00:29:00,359
like I run it again I'm using the end

00:28:57,690 --> 00:29:01,859
like provision was much simpler before

00:29:00,359 --> 00:29:03,840
and I realized I really needed

00:29:01,859 --> 00:29:04,859
individual functions that did individual

00:29:03,840 --> 00:29:06,690
things and then those got more

00:29:04,859 --> 00:29:08,249
sophisticated and I was installing

00:29:06,690 --> 00:29:11,100
packages all the time and so I made the

00:29:08,249 --> 00:29:12,989
act app decorator so it just becomes a

00:29:11,100 --> 00:29:14,669
reaction to things that are

00:29:12,989 --> 00:29:16,259
dissatisfying about the current solution

00:29:14,669 --> 00:29:17,850
if the current solution works great then

00:29:16,259 --> 00:29:19,859
I'm done and if the current solution is

00:29:17,850 --> 00:29:22,710
unsatisfying then I'll go back at some

00:29:19,859 --> 00:29:25,919
point and reuse it if I have time so

00:29:22,710 --> 00:29:27,539
like do you see yourself like taking a

00:29:25,919 --> 00:29:30,059
proactive approach to like you know do

00:29:27,539 --> 00:29:31,590
you see something some new development

00:29:30,059 --> 00:29:34,559
in Python or something like oh I can

00:29:31,590 --> 00:29:36,149
refactor the script no proactive okay

00:29:34,559 --> 00:29:38,100
again first of all no one's gonna judge

00:29:36,149 --> 00:29:39,690
you nobody's gonna care so if you want

00:29:38,100 --> 00:29:41,970
to be proactive and you say you know

00:29:39,690 --> 00:29:43,619
what I'm gonna write too much code today

00:29:41,970 --> 00:29:46,379
and I'm gonna over solve this problem

00:29:43,619 --> 00:29:47,879
great have a good time usually again

00:29:46,379 --> 00:29:49,049
when I'm doing this I want to solve the

00:29:47,879 --> 00:29:51,809
problem and I want to move on with my

00:29:49,049 --> 00:29:53,609
life so I'm not proactive I do the

00:29:51,809 --> 00:29:55,379
simplest thing that will work and by the

00:29:53,609 --> 00:29:57,119
way that is good training for a

00:29:55,379 --> 00:29:58,259
professional context do the simplest

00:29:57,119 --> 00:30:00,720
thing that you think will work and if it

00:29:58,259 --> 00:30:02,190
works you're done and if you want to be

00:30:00,720 --> 00:30:04,740
proactive and fix problems that you

00:30:02,190 --> 00:30:06,570
my crop up in the future go ahead but I

00:30:04,740 --> 00:30:10,320
don't usually bother I usually just get

00:30:06,570 --> 00:30:11,100
the my problem done and move on okay I

00:30:10,320 --> 00:30:17,059
think we're out of time for questions

00:30:11,100 --> 00:30:17,059

YouTube URL: https://www.youtube.com/watch?v=Jd8ulMb6_ls


