Title: Renato Oliveira - User focused API Design - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Renato Oliveira

When we talk about Web API Design, we're usually driven to think in architecture, verbs, and nouns. But we often forget our user: the developer.

UX designers rely on many techniques to create great experiences. User research, User Testing, Personas, Usage Data Analysis and others. However when creating `invisible products` weâ€™re not used to think in usability. So why donâ€™t we take advantage of this background to improve our APIs experiences?



Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:05,600 --> 00:00:11,130
welcome everybody thank you for being

00:00:08,790 --> 00:00:13,590
patient we have another speaker from

00:00:11,130 --> 00:00:14,309
South America Brazil this time so please

00:00:13,590 --> 00:00:23,939
welcome

00:00:14,309 --> 00:00:29,400
Renato Oliviera hello are you listening

00:00:23,939 --> 00:00:33,840
me okay how are you today welcome to the

00:00:29,400 --> 00:00:36,300
last talk before the keynote so I was

00:00:33,840 --> 00:00:39,000
talking there is two kind of events one

00:00:36,300 --> 00:00:40,860
before your talk and one after sadly

00:00:39,000 --> 00:00:44,129
there is just like the keynote after for

00:00:40,860 --> 00:00:48,450
my PyCon but yeah how are you today I'm

00:00:44,129 --> 00:00:51,690
going to talk about API user user focus

00:00:48,450 --> 00:00:54,719
at API design okay but first of all my

00:00:51,690 --> 00:00:56,730
name is Rainer Oliveira I am a

00:00:54,719 --> 00:00:59,340
co-founder at a company called lab codes

00:00:56,730 --> 00:01:02,730
we do software development for American

00:00:59,340 --> 00:01:06,090
companies and we had another talk here

00:01:02,730 --> 00:01:07,670
at PyCon sorry if I sound a bit nervous

00:01:06,090 --> 00:01:09,000
that because I am

00:01:07,670 --> 00:01:10,619
[Music]

00:01:09,000 --> 00:01:12,689
we had another talk here at PyCon

00:01:10,619 --> 00:01:17,180
yesterday Nicola spoke up about graph

00:01:12,689 --> 00:01:20,520
databases and I came from a town called

00:01:17,180 --> 00:01:24,600
Recife it's a bit far from where we are

00:01:20,520 --> 00:01:28,020
okay it's in Brasilia northeast is

00:01:24,600 --> 00:01:30,390
always sunny lot like Philadelphia and

00:01:28,020 --> 00:01:33,000
I'm also a member of some amazing

00:01:30,390 --> 00:01:35,100
communities the part on user group for

00:01:33,000 --> 00:01:38,909
my state right on Brazil in the mouth so

00:01:35,100 --> 00:01:42,750
a DSF fellow okay little disclaimer here

00:01:38,909 --> 00:01:45,119
I'm no designer okay so just like Homer

00:01:42,750 --> 00:01:47,729
I had to go to the dictionary to

00:01:45,119 --> 00:01:48,659
understand what is user experience and

00:01:47,729 --> 00:01:50,909
stuff like that

00:01:48,659 --> 00:01:52,950
but I work with and know some awesome

00:01:50,909 --> 00:01:54,990
designers and I understand how

00:01:52,950 --> 00:01:55,290
interfaces are made tailor it to the

00:01:54,990 --> 00:02:00,799
user

00:01:55,290 --> 00:02:04,409
ok and so let's talk about API design

00:02:00,799 --> 00:02:07,200
when we start thinking API design we are

00:02:04,409 --> 00:02:11,039
usually driven to think in the

00:02:07,200 --> 00:02:13,710
architecture Nam's verb status codes but

00:02:11,039 --> 00:02:17,400
we often forget what's most important

00:02:13,710 --> 00:02:19,710
important never interface the user even

00:02:17,400 --> 00:02:21,300
though an API is one of the ways two

00:02:19,710 --> 00:02:22,530
machines can connect with each other

00:02:21,300 --> 00:02:25,320
okay

00:02:22,530 --> 00:02:29,460
developers are the one who create those

00:02:25,320 --> 00:02:32,070
integrations there is a good reason why

00:02:29,460 --> 00:02:34,410
building api's can be extremely tough

00:02:32,070 --> 00:02:38,130
and time-consuming they have to gather

00:02:34,410 --> 00:02:39,960
both human and machine needs and then

00:02:38,130 --> 00:02:42,900
this tweet appeared appeared in my

00:02:39,960 --> 00:02:45,120
timeline and it was mind-blowing your

00:02:42,900 --> 00:02:47,610
API is a user interface it was actually

00:02:45,120 --> 00:02:50,760
the previous name of this talk but I

00:02:47,610 --> 00:02:53,210
changed of course your API is a user

00:02:50,760 --> 00:02:56,580
interface API stands for application

00:02:53,210 --> 00:02:59,670
programming interface and user

00:02:56,580 --> 00:03:04,650
interfaces are the means machine users

00:02:59,670 --> 00:03:07,410
interacts with machines so cars browsers

00:03:04,650 --> 00:03:10,530
TV remote controls and live your web api

00:03:07,410 --> 00:03:12,930
we are sorry about the ice everything is

00:03:10,530 --> 00:03:17,070
a user interface but why we tend to

00:03:12,930 --> 00:03:20,370
forget that to gas is here api's are

00:03:17,070 --> 00:03:23,430
invisible products and the developers we

00:03:20,370 --> 00:03:25,800
all use it once the machine will do the

00:03:23,430 --> 00:03:28,350
rest of the work but just but this

00:03:25,800 --> 00:03:31,590
one-time relationship is crucial for the

00:03:28,350 --> 00:03:36,000
success of your API or product so if

00:03:31,590 --> 00:03:39,480
api's our user interface we can work on

00:03:36,000 --> 00:03:43,260
the user experience around that user

00:03:39,480 --> 00:03:46,200
experience it encloses all aspects of

00:03:43,260 --> 00:03:48,710
the inn's end-user interaction with the

00:03:46,200 --> 00:03:52,140
company its services and its products

00:03:48,710 --> 00:03:54,900
the overall experience of a person using

00:03:52,140 --> 00:03:57,360
a product such as website or a computer

00:03:54,900 --> 00:04:01,380
per application especially in terms of

00:03:57,360 --> 00:04:02,700
how easy and pleasant it is to use UX is

00:04:01,380 --> 00:04:06,150
about Xenia flu

00:04:02,700 --> 00:04:07,740
it's leave someone in amis and guide

00:04:06,150 --> 00:04:09,840
them and if you did a good job

00:04:07,740 --> 00:04:12,060
they won't lose themselves even Tesh

00:04:09,840 --> 00:04:15,540
paid to user actions you make it and

00:04:12,060 --> 00:04:17,540
make it so they can do it in the best

00:04:15,540 --> 00:04:20,640
way possible and that's why there is

00:04:17,540 --> 00:04:23,790
research in the process designers need

00:04:20,640 --> 00:04:24,930
to understand the problem the problem to

00:04:23,790 --> 00:04:27,340
be solved

00:04:24,930 --> 00:04:30,930
what what are the operations

00:04:27,340 --> 00:04:34,660
that need sorry that needs to be made in

00:04:30,930 --> 00:04:37,090
the variables of the product and it's a

00:04:34,660 --> 00:04:39,479
natural process of understanding what

00:04:37,090 --> 00:04:44,860
you're the problem you're solving

00:04:39,479 --> 00:04:47,050
fighting alternatives working with the

00:04:44,860 --> 00:04:48,330
the most appropriate one and make it

00:04:47,050 --> 00:04:51,820
more attractable

00:04:48,330 --> 00:04:55,810
so like I said I'm no designer so I had

00:04:51,820 --> 00:04:56,830
to find great references and this is one

00:04:55,810 --> 00:04:59,229
this is Don Norman

00:04:56,830 --> 00:05:03,400
he wrote the awesome design of everyday

00:04:59,229 --> 00:05:05,440
things it's a book on how things should

00:05:03,400 --> 00:05:08,020
be designed yeah and the first

00:05:05,440 --> 00:05:10,600
requirement of an exemplary user

00:05:08,020 --> 00:05:11,860
experience is to meet the exact needs of

00:05:10,600 --> 00:05:15,370
the customer

00:05:11,860 --> 00:05:17,560
without further border and another great

00:05:15,370 --> 00:05:22,060
reference that about to you today it was

00:05:17,560 --> 00:05:25,660
it is the ux honeycomb it explains the

00:05:22,060 --> 00:05:28,060
facets of a great user experience it

00:05:25,660 --> 00:05:30,490
should be useful so if you don't provide

00:05:28,060 --> 00:05:33,820
that value to your user they won't use

00:05:30,490 --> 00:05:36,250
it it should be usable so it should be

00:05:33,820 --> 00:05:38,889
easy to use but usability by itself is

00:05:36,250 --> 00:05:41,650
not enough it should be desirable so

00:05:38,889 --> 00:05:44,919
it's related to the company brand the

00:05:41,650 --> 00:05:47,770
value of the brand itself and other

00:05:44,919 --> 00:05:51,280
things it should be valuable so it

00:05:47,770 --> 00:05:54,910
should bring value to also its sponsors

00:05:51,280 --> 00:05:57,520
so it should increase this the user

00:05:54,910 --> 00:06:00,430
satisfaction within the company it

00:05:57,520 --> 00:06:02,560
should be findable we must strive to

00:06:00,430 --> 00:06:06,099
design navigable interfaces and local

00:06:02,560 --> 00:06:10,120
object objects so users can find what

00:06:06,099 --> 00:06:13,919
they need it should be accessible it

00:06:10,120 --> 00:06:16,450
should be used by anyone no matter what

00:06:13,919 --> 00:06:21,789
and should be credible people should

00:06:16,450 --> 00:06:23,590
believe in what your interfaces so all

00:06:21,789 --> 00:06:25,479
of those characteristics are worth

00:06:23,590 --> 00:06:27,970
thought for these top products that

00:06:25,479 --> 00:06:31,300
we'll be seeing and use it for many

00:06:27,970 --> 00:06:34,360
people many times and I like a game I

00:06:31,300 --> 00:06:37,770
store a planning software but how can we

00:06:34,360 --> 00:06:39,810
match that with our invisible ones

00:06:37,770 --> 00:06:42,220
developer experience

00:06:39,810 --> 00:06:47,009
developers experience is the extension

00:06:42,220 --> 00:06:49,569
of the UX that focuses on the developer

00:06:47,009 --> 00:06:54,520
and by developer we can include your

00:06:49,569 --> 00:06:57,699
teammate client QA any kind of developer

00:06:54,520 --> 00:07:00,729
our mobile developer it's the Pratt

00:06:57,699 --> 00:07:03,699
practice of understanding how developers

00:07:00,729 --> 00:07:06,509
get the work done and by extension the

00:07:03,699 --> 00:07:08,740
practice of optimizing that experience

00:07:06,509 --> 00:07:11,530
developer experience is basically a

00:07:08,740 --> 00:07:16,030
combination of UX and general

00:07:11,530 --> 00:07:17,979
development principles and how can we

00:07:16,030 --> 00:07:21,190
achieve these designers have been

00:07:17,979 --> 00:07:23,889
studying graphical user interfaces for

00:07:21,190 --> 00:07:26,139
decades they know how to get to a point

00:07:23,889 --> 00:07:28,599
where a user feels good about your

00:07:26,139 --> 00:07:32,349
product and this is something that

00:07:28,599 --> 00:07:34,300
people just came come up with like they

00:07:32,349 --> 00:07:36,340
have processes to do that and we can

00:07:34,300 --> 00:07:39,610
always map that your developers and

00:07:36,340 --> 00:07:42,849
api's so let's take a look on the

00:07:39,610 --> 00:07:45,460
standard UX process okay

00:07:42,849 --> 00:07:47,590
the core of the core of every wax

00:07:45,460 --> 00:07:51,039
process should include at least those

00:07:47,590 --> 00:07:53,770
five phase so product definition

00:07:51,039 --> 00:07:56,409
research analysis design and validation

00:07:53,770 --> 00:07:59,500
so product definition it's something we

00:07:56,409 --> 00:08:01,379
should do in now of your projects

00:07:59,500 --> 00:08:04,240
it's interviewing stakeholders

00:08:01,379 --> 00:08:06,279
understand the values of the problem

00:08:04,240 --> 00:08:10,120
viewers you are you are solving this

00:08:06,279 --> 00:08:14,789
scope and understand the problem by

00:08:10,120 --> 00:08:19,300
itself it's very important sorry

00:08:14,789 --> 00:08:21,460
research so once you understood that the

00:08:19,300 --> 00:08:24,129
problem you can start doing the product

00:08:21,460 --> 00:08:26,319
research this is what's going to shape

00:08:24,129 --> 00:08:29,589
your product and save lots of money

00:08:26,319 --> 00:08:32,550
avoiding rewrites of software so in it

00:08:29,589 --> 00:08:35,140
can include individual interviews a

00:08:32,550 --> 00:08:37,419
great experience start understanding the

00:08:35,140 --> 00:08:41,560
user their needs behaviors and

00:08:37,419 --> 00:08:43,599
motivations in competitive research you

00:08:41,560 --> 00:08:46,959
also need to understand how the market

00:08:43,599 --> 00:08:50,279
behaves on tools like yours and if

00:08:46,959 --> 00:08:52,810
there's like some industry standards

00:08:50,279 --> 00:09:03,120
that you can follow and good them

00:08:52,810 --> 00:09:05,829
bad practice just a second so analysis

00:09:03,120 --> 00:09:07,749
after we collect the data from research

00:09:05,829 --> 00:09:10,899
it's up to work on it

00:09:07,749 --> 00:09:14,350
we need to synthesize the expected

00:09:10,899 --> 00:09:17,980
behavior based on the common points to a

00:09:14,350 --> 00:09:21,069
raisin leader in the research sorry

00:09:17,980 --> 00:09:23,639
so maybe the user wants this it's

00:09:21,069 --> 00:09:27,459
different than eight out of ten users

00:09:23,639 --> 00:09:32,829
tend to want it so if your based on

00:09:27,459 --> 00:09:35,439
numbers and actual data it's more how

00:09:32,829 --> 00:09:41,230
can you see it's solid it's more solid

00:09:35,439 --> 00:09:44,800
yet and once you understood everything

00:09:41,230 --> 00:09:47,680
that everyone expects on your product

00:09:44,800 --> 00:09:50,709
it's time to start designing it itself

00:09:47,680 --> 00:09:54,930
so we can use a sketch wireframes

00:09:50,709 --> 00:09:57,639
prototypes and design a specification

00:09:54,930 --> 00:10:00,550
after we put the design in place it's

00:09:57,639 --> 00:10:04,779
time to validate it so we collect

00:10:00,550 --> 00:10:07,509
feedback metrics we can make user

00:10:04,779 --> 00:10:12,250
testing sessions and user Diaries

00:10:07,509 --> 00:10:16,449
so with this map a basic very basic UX

00:10:12,250 --> 00:10:19,689
process and it sounds like a lot we have

00:10:16,449 --> 00:10:23,259
a week or two to do right so we can

00:10:19,689 --> 00:10:26,350
prioritize some of those steps and here

00:10:23,259 --> 00:10:29,949
basically how I do it so we can map to

00:10:26,350 --> 00:10:33,910
developer experience so personas persona

00:10:29,949 --> 00:10:37,269
it's a fictional character created to

00:10:33,910 --> 00:10:40,689
represent a user type of your product

00:10:37,269 --> 00:10:42,850
often when we are creating api's we tend

00:10:40,689 --> 00:10:45,879
to make it to an external version of

00:10:42,850 --> 00:10:47,949
ourselves but we need to keep in mind

00:10:45,879 --> 00:10:50,889
that not all users are the same and not

00:10:47,949 --> 00:10:54,059
all developers and clients write code

00:10:50,889 --> 00:10:56,949
for the same purpose we basically have

00:10:54,059 --> 00:10:59,699
front-end developers mobile developers

00:10:56,949 --> 00:11:02,709
back-end developers in many languages

00:10:59,699 --> 00:11:05,980
client teammates we have JSON we have

00:11:02,709 --> 00:11:06,570
XML all of those combinations there is

00:11:05,980 --> 00:11:11,490
no

00:11:06,570 --> 00:11:13,740
people think like us okay so we need to

00:11:11,490 --> 00:11:16,680
understand the business like we did on

00:11:13,740 --> 00:11:20,430
the product research to understand how

00:11:16,680 --> 00:11:23,220
the user is going to use our interface

00:11:20,430 --> 00:11:28,020
and we can create create more focus that

00:11:23,220 --> 00:11:30,620
personas after that we can start

00:11:28,020 --> 00:11:33,480
designing the expectation aka

00:11:30,620 --> 00:11:36,480
documentation so documentation it's

00:11:33,480 --> 00:11:39,450
where you start helping your user to

00:11:36,480 --> 00:11:40,950
leave the amazing thinking now possible

00:11:39,450 --> 00:11:43,080
way is the right and the wrong and we

00:11:40,950 --> 00:11:45,930
already do that right in the test

00:11:43,080 --> 00:11:48,450
development test driving development we

00:11:45,930 --> 00:11:52,650
think in all possible ways the user can

00:11:48,450 --> 00:11:56,760
go right and wrong on our code we can do

00:11:52,650 --> 00:11:58,890
that easily with our API when designing

00:11:56,760 --> 00:12:01,440
graphical api's designers are able to

00:11:58,890 --> 00:12:03,750
create self discoverable and intuitive

00:12:01,440 --> 00:12:06,000
interface that matches humans

00:12:03,750 --> 00:12:08,700
expectations but when we are designing

00:12:06,000 --> 00:12:11,730
something that is invisible we can still

00:12:08,700 --> 00:12:13,740
they can still be intuitive this can

00:12:11,730 --> 00:12:16,650
still be discoverable but we need to

00:12:13,740 --> 00:12:19,860
teach the user how to do it during the

00:12:16,650 --> 00:12:21,630
lifecycle of your API 100 nearly a

00:12:19,860 --> 00:12:23,820
hundred percent of the calls are made

00:12:21,630 --> 00:12:28,950
from machines and machines rely on pure

00:12:23,820 --> 00:12:30,990
logic and to use our API but the humans

00:12:28,950 --> 00:12:34,580
are the ones that will create those

00:12:30,990 --> 00:12:37,320
integrations so in the pw of course and

00:12:34,580 --> 00:12:39,930
why you still need to create like really

00:12:37,320 --> 00:12:41,670
reliable ATIS that responds fast and use

00:12:39,930 --> 00:12:44,160
it the less amount the amount of data

00:12:41,670 --> 00:12:49,050
possible you still need the you to cheat

00:12:44,160 --> 00:12:52,680
teach the user how to do it sorry so you

00:12:49,050 --> 00:12:55,520
can think of your documentation as a big

00:12:52,680 --> 00:12:58,140
big big onboarding document and

00:12:55,520 --> 00:13:00,150
onboarding is the process to integrate a

00:12:58,140 --> 00:13:02,970
new employee to a company or familiar

00:13:00,150 --> 00:13:08,520
familiarizing new customer or a client

00:13:02,970 --> 00:13:12,630
to a product or service you need to

00:13:08,520 --> 00:13:14,520
guide our user steps and once they

00:13:12,630 --> 00:13:17,480
figure it out they won't use your

00:13:14,520 --> 00:13:17,480
documentation anymore

00:13:18,930 --> 00:13:23,339
so the goal here is

00:13:20,279 --> 00:13:26,689
to make your user familiar with your API

00:13:23,339 --> 00:13:30,060
and decrease the learning curve okay and

00:13:26,689 --> 00:13:33,269
how can we do that we can start creating

00:13:30,060 --> 00:13:38,129
a QuickStart so we can design a

00:13:33,269 --> 00:13:40,079
step-by-step examples how user can

00:13:38,129 --> 00:13:43,620
outfit gait and reach the first end

00:13:40,079 --> 00:13:45,930
point doing that we can decrease the fur

00:13:43,620 --> 00:13:49,309
at the time to first call which is

00:13:45,930 --> 00:13:52,620
basically the time from where the user

00:13:49,309 --> 00:13:55,589
finds or start needing your product your

00:13:52,620 --> 00:13:59,850
API and when they reach the first data

00:13:55,589 --> 00:14:00,930
endpoint and since you did your market

00:13:59,850 --> 00:14:03,839
market sorry

00:14:00,930 --> 00:14:07,680
market research you're you are able to

00:14:03,839 --> 00:14:11,790
do them all so some common use cases so

00:14:07,680 --> 00:14:15,120
you know how the your user will use your

00:14:11,790 --> 00:14:20,220
API so you can teach them they're like

00:14:15,120 --> 00:14:23,069
the most common cases errors error

00:14:20,220 --> 00:14:25,889
basically is the first thing a users see

00:14:23,069 --> 00:14:29,579
on your API so you need to create a

00:14:25,889 --> 00:14:33,269
error based communication so your errors

00:14:29,579 --> 00:14:38,850
will guide the users on how they can

00:14:33,269 --> 00:14:41,430
accomplish tasks so you should different

00:14:38,850 --> 00:14:44,879
errors of course should return different

00:14:41,430 --> 00:14:47,730
messages you will be amazed on how much

00:14:44,879 --> 00:14:51,660
error messages we get into these days

00:14:47,730 --> 00:14:54,089
okay and you should help people the book

00:14:51,660 --> 00:14:54,959
so you know their error you know how to

00:14:54,089 --> 00:14:58,860
fix it

00:14:54,959 --> 00:15:02,490
why don't you put on your output single

00:14:58,860 --> 00:15:07,339
hint of oh maybe you should take a look

00:15:02,490 --> 00:15:11,490
on this link to find the dancer of their

00:15:07,339 --> 00:15:14,519
questions and keep in mind that your API

00:15:11,490 --> 00:15:21,149
dots is also a UI you mean require root

00:15:14,519 --> 00:15:25,410
sorry recursive so you need to work on

00:15:21,149 --> 00:15:28,259
the information architecture and you

00:15:25,410 --> 00:15:32,220
need to keep it clean because like users

00:15:28,259 --> 00:15:34,150
will stay hours on it everybody had like

00:15:32,220 --> 00:15:38,100
read the

00:15:34,150 --> 00:15:41,080
and it's awful when you like starting

00:15:38,100 --> 00:15:50,339
getting tired of what you're seen so

00:15:41,080 --> 00:15:53,650
keep it clean okay testing and feedback

00:15:50,339 --> 00:15:58,150
so it looks like we just like design it

00:15:53,650 --> 00:16:02,620
or API and it's time to test with our

00:15:58,150 --> 00:16:07,980
users and how can we do that so testing

00:16:02,620 --> 00:16:11,460
is basically the cheaper way you can

00:16:07,980 --> 00:16:14,290
know not as I'm sorry prototypes

00:16:11,460 --> 00:16:16,720
prototypes are the cheaper way you can

00:16:14,290 --> 00:16:20,830
get feedback from your user without

00:16:16,720 --> 00:16:24,630
needing like to write any code why why

00:16:20,830 --> 00:16:27,130
we need to do that so of course our

00:16:24,630 --> 00:16:30,010
expectations on our products aren't the

00:16:27,130 --> 00:16:32,380
same as they are users people will like

00:16:30,010 --> 00:16:35,500
it what we did and people may not like

00:16:32,380 --> 00:16:38,620
it so you probably will need to reread

00:16:35,500 --> 00:16:41,800
rewrite something and prototypes are the

00:16:38,620 --> 00:16:44,500
way you can get those feedbacks before

00:16:41,800 --> 00:16:46,930
you start coding it so an early feedback

00:16:44,500 --> 00:16:52,060
is good for like any kind of design bead

00:16:46,930 --> 00:16:55,120
like test-driven or user centered you

00:16:52,060 --> 00:16:59,140
also need to eat your own dog food so

00:16:55,120 --> 00:17:04,240
write client code is a way you can get

00:16:59,140 --> 00:17:08,140
feedback on your API as fast as you can

00:17:04,240 --> 00:17:10,780
okay and keep in mind that this process

00:17:08,140 --> 00:17:13,870
of testing in feedback is a iterative

00:17:10,780 --> 00:17:17,610
process so you need to test it you get

00:17:13,870 --> 00:17:20,559
feedback you rewrite your API and

00:17:17,610 --> 00:17:23,530
basically test again you rewrite our API

00:17:20,559 --> 00:17:26,890
Docs and there is also a few tools that

00:17:23,530 --> 00:17:29,050
can spin up like mock servers with some

00:17:26,890 --> 00:17:32,100
design specification that you created

00:17:29,050 --> 00:17:34,179
that will be helpful for your like

00:17:32,100 --> 00:17:36,010
teammates to create front-end

00:17:34,179 --> 00:17:41,740
applications while still building your

00:17:36,010 --> 00:17:44,060
API and thinking in the design okay

00:17:41,740 --> 00:17:47,240
Merrick's

00:17:44,060 --> 00:17:51,610
once you put your API in place it's that

00:17:47,240 --> 00:17:54,560
is like our job is not it's not done yet

00:17:51,610 --> 00:17:56,440
there is still a lot to do and you can

00:17:54,560 --> 00:18:00,310
start like collect collecting metrics

00:17:56,440 --> 00:18:03,560
that will help you to improve your API

00:18:00,310 --> 00:18:07,130
basically errors will give you a great

00:18:03,560 --> 00:18:10,220
great hint on where you should improve

00:18:07,130 --> 00:18:13,580
your dog's people are getting errors

00:18:10,220 --> 00:18:16,550
because you're not explained enough what

00:18:13,580 --> 00:18:19,700
they need to do the number of requests

00:18:16,550 --> 00:18:24,470
will help you with the common use cases

00:18:19,700 --> 00:18:26,840
so if people do set of tasks together

00:18:24,470 --> 00:18:30,650
again and again and again why don't you

00:18:26,840 --> 00:18:33,740
put that in your API the user agent will

00:18:30,650 --> 00:18:37,120
give you a hint of how many users per

00:18:33,740 --> 00:18:41,120
programming languages are using your API

00:18:37,120 --> 00:18:44,390
and you can start like creating SDKs and

00:18:41,120 --> 00:18:46,490
writing client code and giving example

00:18:44,390 --> 00:18:51,320
examples on that programming language

00:18:46,490 --> 00:18:56,270
problem Python and traffic will help you

00:18:51,320 --> 00:19:00,980
to keep your API robust and help you to

00:18:56,270 --> 00:19:05,000
turn it where you should turn at the end

00:19:00,980 --> 00:19:10,160
of the day UX is also about following

00:19:05,000 --> 00:19:13,370
patterns ok and we we also have like a

00:19:10,160 --> 00:19:17,410
lot of patterns in design in api's ok

00:19:13,370 --> 00:19:22,970
that helped us to design like a

00:19:17,410 --> 00:19:26,330
well-established DJ so we have you need

00:19:22,970 --> 00:19:29,330
to use your status codes wisely and you

00:19:26,330 --> 00:19:34,760
you will get amazed of how many arrow

00:19:29,330 --> 00:19:36,650
200 ok I got like last year and there

00:19:34,760 --> 00:19:40,730
are a few websites that can help you

00:19:36,650 --> 00:19:42,730
with that so if you are a dog person or

00:19:40,730 --> 00:19:46,160
a cat person

00:19:42,730 --> 00:19:52,220
they help you to understand how status

00:19:46,160 --> 00:19:54,770
codes are and you need to keep in mind

00:19:52,220 --> 00:19:56,930
so this one's not very clear for

00:19:54,770 --> 00:19:59,420
everybody but get

00:19:56,930 --> 00:20:03,340
the options are safe which means that

00:19:59,420 --> 00:20:07,640
they don't change the server state as

00:20:03,340 --> 00:20:11,840
many times you call it and put and

00:20:07,640 --> 00:20:14,210
delete are the importance so you can

00:20:11,840 --> 00:20:18,560
call them like as many times as you want

00:20:14,210 --> 00:20:21,650
they will give you the same result there

00:20:18,560 --> 00:20:29,090
is a story of one guy in Twitter that he

00:20:21,650 --> 00:20:34,790
started using a web api to open his how

00:20:29,090 --> 00:20:37,670
can I say it's a garage door and he used

00:20:34,790 --> 00:20:41,030
it a get to get these stages of the

00:20:37,670 --> 00:20:43,970
garage I think and the gate was opening

00:20:41,030 --> 00:20:46,580
and closing the garage door so but get

00:20:43,970 --> 00:20:49,340
is safe they don't change the state of

00:20:46,580 --> 00:20:52,190
your server and this is one of the ways

00:20:49,340 --> 00:20:54,860
you can learn that and you can also

00:20:52,190 --> 00:20:57,530
allow sorting filtering and selecting

00:20:54,860 --> 00:21:04,400
fields from carry strings that will save

00:20:57,530 --> 00:21:06,730
a lot of work from your users and will

00:21:04,400 --> 00:21:09,530
make them happy and versioning

00:21:06,730 --> 00:21:11,960
versioning is one of the most important

00:21:09,530 --> 00:21:16,570
things on your API because features on

00:21:11,960 --> 00:21:20,000
api's are eternal please don't remove

00:21:16,570 --> 00:21:22,520
features from API on the same version

00:21:20,000 --> 00:21:26,300
because it will break client code and

00:21:22,520 --> 00:21:30,050
this is a big difference from visual API

00:21:26,300 --> 00:21:32,780
it's because we can't create so it's

00:21:30,050 --> 00:21:36,110
intuitive it should be intuitive for

00:21:32,780 --> 00:21:38,960
users where they are creating the API

00:21:36,110 --> 00:21:41,870
they decline for the API but once the

00:21:38,960 --> 00:21:43,520
machines do the rest of the work you

00:21:41,870 --> 00:21:46,310
cannot change that because they people

00:21:43,520 --> 00:21:48,140
won't like ok let me take a look on the

00:21:46,310 --> 00:21:53,100
documentation game to see if something

00:21:48,140 --> 00:22:03,340
changing and this is it thank you

00:21:53,100 --> 00:22:03,340
[Applause]

00:22:05,640 --> 00:22:11,080
hello I had a couple questions for you

00:22:08,520 --> 00:22:15,039
great talk by the way thank you

00:22:11,080 --> 00:22:16,480
my first question had to do with your

00:22:15,039 --> 00:22:18,789
personal experience have you ever

00:22:16,480 --> 00:22:20,590
personally used a documentation first or

00:22:18,789 --> 00:22:24,400
a test first approach when designing a

00:22:20,590 --> 00:22:30,030
new API sorry a documentation first or a

00:22:24,400 --> 00:22:33,010
test first approach when designing I

00:22:30,030 --> 00:22:37,419
didn't create it created like in a

00:22:33,010 --> 00:22:39,340
public API like that but often when we

00:22:37,419 --> 00:22:41,860
are like I'm a back-end developer so

00:22:39,340 --> 00:22:43,510
when I'm creating an API for a teammate

00:22:41,860 --> 00:22:46,390
basically I create this specification

00:22:43,510 --> 00:22:49,270
and create the design I used some tools

00:22:46,390 --> 00:22:52,750
to do that personally I use API a

00:22:49,270 --> 00:22:55,270
blueprint and I sent to my front-end

00:22:52,750 --> 00:22:58,059
developer they can give me feedback on

00:22:55,270 --> 00:23:00,010
things that they don't like it and they

00:22:58,059 --> 00:23:02,830
can start creating with the

00:23:00,010 --> 00:23:07,870
documentation that I created and I I'm

00:23:02,830 --> 00:23:11,020
free to create like the backend in my my

00:23:07,870 --> 00:23:14,289
piece and then my second question had to

00:23:11,020 --> 00:23:16,870
do with versioning how do you deprecated

00:23:14,289 --> 00:23:21,370
an API safely without upsetting your

00:23:16,870 --> 00:23:23,770
users okay it's this is a hard question

00:23:21,370 --> 00:23:28,440
you need to keep in mind how many users

00:23:23,770 --> 00:23:31,929
are using it so if you're getting like

00:23:28,440 --> 00:23:33,520
basically it's a business question so if

00:23:31,929 --> 00:23:36,159
you're getting a lot of users still

00:23:33,520 --> 00:23:38,770
using your API you need to try to

00:23:36,159 --> 00:23:41,590
convince them to change it like oh look

00:23:38,770 --> 00:23:43,750
how shiny it is no these new IDs but

00:23:41,590 --> 00:23:46,900
basically is that if there are users

00:23:43,750 --> 00:23:51,880
paying you can take it out okay thank

00:23:46,900 --> 00:23:54,250
you hi hello thank you for the talk

00:23:51,880 --> 00:23:56,830
thank you have a question related to

00:23:54,250 --> 00:23:59,440
versioning when you version an API do

00:23:56,830 --> 00:24:02,530
you prefer to do it in the path ontology

00:23:59,440 --> 00:24:04,360
the headers somewhere else and if you

00:24:02,530 --> 00:24:08,590
can talk a little bit as to why you have

00:24:04,360 --> 00:24:13,659
that preference I have like

00:24:08,590 --> 00:24:16,740
red header I did in URL I did in many

00:24:13,659 --> 00:24:19,659
many ways Possible's I never found a way

00:24:16,740 --> 00:24:25,029
great way to do that we were studying

00:24:19,659 --> 00:24:27,970
like to create a decorator for crown for

00:24:25,029 --> 00:24:30,820
a Google not Google sorry for jungle oh

00:24:27,970 --> 00:24:33,580
my god we were starting creating at my

00:24:30,820 --> 00:24:39,220
company a decorator for Django so you

00:24:33,580 --> 00:24:43,480
can list the version of the the API that

00:24:39,220 --> 00:24:47,350
end point was like able to be consume it

00:24:43,480 --> 00:24:53,409
but we stopped it basically on where we

00:24:47,350 --> 00:24:56,470
should put the version so it's up to you

00:24:53,409 --> 00:24:59,350
like I have no preference cool maybe

00:24:56,470 --> 00:25:02,520
maybe they header because it's less

00:24:59,350 --> 00:25:07,630
verbose for people who are seeing it and

00:25:02,520 --> 00:25:10,149
but it's just like I guess okay last

00:25:07,630 --> 00:25:13,899
question for you when you go through and

00:25:10,149 --> 00:25:16,059
you create your api's do you do rate

00:25:13,899 --> 00:25:18,460
limiting do you do any kind of testing

00:25:16,059 --> 00:25:21,450
on that at a default or is that

00:25:18,460 --> 00:25:25,299
something that's more of a business call

00:25:21,450 --> 00:25:27,429
so if you're creating a new API for one

00:25:25,299 --> 00:25:28,870
of your team members to use and you're

00:25:27,429 --> 00:25:32,350
launching it to production for the first

00:25:28,870 --> 00:25:35,620
time do you put in a circuit breaker to

00:25:32,350 --> 00:25:38,649
avoid excessive calls do you do anything

00:25:35,620 --> 00:25:40,539
that's security by default or do you get

00:25:38,649 --> 00:25:43,169
it out there let it be used and then

00:25:40,539 --> 00:25:46,779
start locking it down from there so I

00:25:43,169 --> 00:25:48,970
didn't create it like a public API with

00:25:46,779 --> 00:25:50,919
this approach yet it's just basically

00:25:48,970 --> 00:25:56,200
internal stuff that we're doing so we

00:25:50,919 --> 00:26:02,350
don't need to create like a rate ratio

00:25:56,200 --> 00:26:04,289
like limit but I think another great

00:26:02,350 --> 00:26:06,809
thing you should do and that you should

00:26:04,289 --> 00:26:10,779
have talked about that sorry

00:26:06,809 --> 00:26:14,559
it's send boxes like you can create like

00:26:10,779 --> 00:26:19,480
a isolated environment for people to use

00:26:14,559 --> 00:26:22,240
your API it will be it will spend some

00:26:19,480 --> 00:26:24,730
money but

00:26:22,240 --> 00:26:28,419
it's great for like people starting to

00:26:24,730 --> 00:26:33,460
use your API so if but also if your API

00:26:28,419 --> 00:26:36,610
have sensitive data or deals with money

00:26:33,460 --> 00:26:38,919
like I think the best reference of great

00:26:36,610 --> 00:26:41,619
API and I'm not related with the company

00:26:38,919 --> 00:26:44,679
but it's stripe they have like an

00:26:41,619 --> 00:26:47,019
awesome API it's very pleasant to do

00:26:44,679 --> 00:26:51,279
that and like in Brazil we don't have

00:26:47,019 --> 00:26:53,080
anything like that for payment so but

00:26:51,279 --> 00:26:55,899
they have like the testing environment

00:26:53,080 --> 00:26:57,249
that where you can like call as many

00:26:55,899 --> 00:26:59,619
time as you want they have like

00:26:57,249 --> 00:27:04,749
different credit cards numbers for

00:26:59,619 --> 00:27:07,590
different errors so like to test it is

00:27:04,749 --> 00:27:11,470
not good to put a ratio limit on it

00:27:07,590 --> 00:27:13,929
because people like people will test as

00:27:11,470 --> 00:27:16,869
many times as they need if they need to

00:27:13,929 --> 00:27:19,509
pay to start testing they won't use the

00:27:16,869 --> 00:27:22,289
API basically great thank you so much

00:27:19,509 --> 00:27:22,289
thank you

00:27:22,600 --> 00:27:28,950

YouTube URL: https://www.youtube.com/watch?v=q42hCs2E4So


