Title: Alvaro Leiva Geisse - Systemd: why you should care as a Python developer - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Alvaro Leiva Geisse

Done! Your shiny new application is functionally complete and ready to be deployed to production! But how exactly do you deploy properly on Linux? Wonder no more! In 30 minutes, this talk explains how you can harness the power of the init system and systemd to solve common deployment problems, including some that you didn't even know you had. Examples of things we will cover:

* How to secure your system by having: private /tmp for your process, read-only paths so that your process can not write to them, inaccessible paths, protect users home, network access, bin directories, etc.
* How to limit the resources you app can consume.
* How to interact directly with systemd, so it can start transient units, start/stop services, mount disks, resolve addresses.
* How to isolate your service without containers.
* How to isolate your service using containers (using systemd to spawn a namespace).

All this will be covered from a Python developer's perspective.


Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:00,000 --> 00:00:07,890
afternoon everybody welcome to our last

00:00:04,230 --> 00:00:11,070
set of sessions here on this third day

00:00:07,890 --> 00:00:12,360
of ikon today we're going to this

00:00:11,070 --> 00:00:15,839
afternoon we're going to start off with

00:00:12,360 --> 00:00:18,840
a talk on system D why you should care

00:00:15,839 --> 00:00:25,980
it's a Python developer let's give a big

00:00:18,840 --> 00:00:29,580
hand here for Alvaro and sorry one one

00:00:25,980 --> 00:00:31,560
thing we will not have time to take

00:00:29,580 --> 00:00:33,270
questions as part of the session but if

00:00:31,560 --> 00:00:38,579
you do have questions you can catch

00:00:33,270 --> 00:00:42,239
Alvaro afterwards outside thanks hello

00:00:38,579 --> 00:00:44,489
okay let's start my friend over here

00:00:42,239 --> 00:00:46,710
already said I'm Alvaro I'm a production

00:00:44,489 --> 00:00:48,750
engineer at Facebook Instagram and I'm

00:00:46,710 --> 00:00:50,250
here to talk to you about system D and

00:00:48,750 --> 00:00:52,530
why should you care as a Python

00:00:50,250 --> 00:00:54,510
developer before we start I have a

00:00:52,530 --> 00:00:56,190
couple of thing to say the first thing

00:00:54,510 --> 00:00:58,590
is that this is my first wife come talk

00:00:56,190 --> 00:01:01,890
and of course the day before my talk I

00:00:58,590 --> 00:01:04,379
lost the complete use of my voice so so

00:01:01,890 --> 00:01:05,189
now you hear me like this is just

00:01:04,379 --> 00:01:06,840
because I'm struggling

00:01:05,189 --> 00:01:09,090
yesterday it was completely mute to the

00:01:06,840 --> 00:01:11,760
kind of like Phoebe in that one episode

00:01:09,090 --> 00:01:13,650
of Friends where she could not talk so

00:01:11,760 --> 00:01:14,670
yeah so that's the first thing so that's

00:01:13,650 --> 00:01:16,799
why we are not going to have questions

00:01:14,670 --> 00:01:18,930
here because nobody wants to hear more

00:01:16,799 --> 00:01:20,220
of my voice the second thing is that

00:01:18,930 --> 00:01:21,750
this presentation it's going to be two

00:01:20,220 --> 00:01:23,759
parts the first one is going to be a

00:01:21,750 --> 00:01:25,439
slide where I just say like what a

00:01:23,759 --> 00:01:27,780
system de a few cool things that you can

00:01:25,439 --> 00:01:29,070
do and then I'm gonna go into a practice

00:01:27,780 --> 00:01:31,320
mode where I'm going to show you code

00:01:29,070 --> 00:01:33,180
where you can do the part like why

00:01:31,320 --> 00:01:34,799
should you care as a Python developer

00:01:33,180 --> 00:01:37,680
that's kind of the point of the talk

00:01:34,799 --> 00:01:41,280
right we're back on okay so with that

00:01:37,680 --> 00:01:42,840
out of the way let's start systemd is

00:01:41,280 --> 00:01:46,680
many things to many people

00:01:42,840 --> 00:01:48,990
and in general we want to Tristan T as a

00:01:46,680 --> 00:01:50,939
service manager so the first thing that

00:01:48,990 --> 00:01:53,369
we need to ask ourselves what is a

00:01:50,939 --> 00:01:54,509
service manager as the name implies a

00:01:53,369 --> 00:01:56,460
service manager is something that

00:01:54,509 --> 00:01:58,890
manager of service that means that is

00:01:56,460 --> 00:02:01,200
not your service by itself it's not

00:01:58,890 --> 00:02:03,210
Apaches of nginx is the thing that

00:02:01,200 --> 00:02:06,540
allows you to operate your service start

00:02:03,210 --> 00:02:07,710
to reload or start it's also the thing

00:02:06,540 --> 00:02:09,720
that is supposed to manage the life

00:02:07,710 --> 00:02:12,300
cycle of your service so if you wonder

00:02:09,720 --> 00:02:14,400
yank application to start a boot butt

00:02:12,300 --> 00:02:17,100
only after you're both great server is

00:02:14,400 --> 00:02:21,150
already ready to run that's the job of

00:02:17,100 --> 00:02:23,010
your lives of your service manager so in

00:02:21,150 --> 00:02:25,800
the guru days that means the time before

00:02:23,010 --> 00:02:28,050
system D there was no real service

00:02:25,800 --> 00:02:29,970
manager person so you have to be your

00:02:28,050 --> 00:02:32,520
own service manager and the way that you

00:02:29,970 --> 00:02:34,830
do this it's big you wrote shell script

00:02:32,520 --> 00:02:37,020
that I hope that looks good but yeah

00:02:34,830 --> 00:02:38,550
we're basically in this gel script you

00:02:37,020 --> 00:02:40,650
define the operation that you needed to

00:02:38,550 --> 00:02:42,810
do for instance here you have start/stop

00:02:40,650 --> 00:02:45,270
restart and for some reason forceful

00:02:42,810 --> 00:02:48,690
load is the same thing of restart and

00:02:45,270 --> 00:02:51,510
you wrote this in Chow this was look

00:02:48,690 --> 00:02:54,240
this was view as a good thing in general

00:02:51,510 --> 00:02:55,950
because if you are writing shell script

00:02:54,240 --> 00:02:57,930
that means that you can write whatever

00:02:55,950 --> 00:02:59,490
you want if you want to start your

00:02:57,930 --> 00:03:00,870
service in a certain way nobody's

00:02:59,490 --> 00:03:03,300
telling you how to do it you have to do

00:03:00,870 --> 00:03:04,800
it by yourself the problem with freedom

00:03:03,300 --> 00:03:06,810
in this sense is that am

00:03:04,800 --> 00:03:09,570
for instance in that we're section over

00:03:06,810 --> 00:03:11,190
there that you see the only line that's

00:03:09,570 --> 00:03:13,350
actually starting the service is the

00:03:11,190 --> 00:03:15,510
line 110 and everything else is just

00:03:13,350 --> 00:03:16,200
boilerplate code you have argument

00:03:15,510 --> 00:03:19,020
parsing

00:03:16,200 --> 00:03:20,910
you have print output and all the things

00:03:19,020 --> 00:03:23,489
that you needed to do to make a fully

00:03:20,910 --> 00:03:27,060
functional program and you do this for

00:03:23,489 --> 00:03:30,770
all of your units on your server so this

00:03:27,060 --> 00:03:33,720
was good but yeah so then came system D

00:03:30,770 --> 00:03:36,780
it was obvious for a long time for the

00:03:33,720 --> 00:03:39,180
unit community and other architecture

00:03:36,780 --> 00:03:42,090
communities that even though system 5

00:03:39,180 --> 00:03:44,340
was good enough for what we have we need

00:03:42,090 --> 00:03:46,860
a change to be able to grow servers

00:03:44,340 --> 00:03:50,280
faster they have better start at times

00:03:46,860 --> 00:03:52,980
so as always happens at least two things

00:03:50,280 --> 00:03:56,270
arise one was after the level system D

00:03:52,980 --> 00:03:58,770
and probably I'm forgetting a one

00:03:56,270 --> 00:04:00,360
service manager that people really like

00:03:58,770 --> 00:04:03,450
but yeah so these two were like the big

00:04:00,360 --> 00:04:06,060
one and as usually this happened they

00:04:03,450 --> 00:04:09,360
went into a little war and system D at

00:04:06,060 --> 00:04:12,209
the end one basically and by one I mean

00:04:09,360 --> 00:04:14,100
that is part of all major distribution

00:04:12,209 --> 00:04:16,769
it not saying that it's better I'm just

00:04:14,100 --> 00:04:19,109
saying that it's there so that's kind of

00:04:16,769 --> 00:04:21,539
the first spirit that I want to show you

00:04:19,109 --> 00:04:22,979
and that's the spirit of this talk it's

00:04:21,539 --> 00:04:25,860
not it's certainly good a system

00:04:22,979 --> 00:04:27,780
developed is it's more like

00:04:25,860 --> 00:04:30,120
system.this a fact of life is part of

00:04:27,780 --> 00:04:32,039
your server it's part of their what can

00:04:30,120 --> 00:04:32,960
how can we use it to do our things

00:04:32,039 --> 00:04:37,199
better

00:04:32,960 --> 00:04:39,210
so what make system did so different so

00:04:37,199 --> 00:04:43,199
love and hate for many people basically

00:04:39,210 --> 00:04:46,620
where you used to have shell script now

00:04:43,199 --> 00:04:49,500
you have unit files so you now don't

00:04:46,620 --> 00:04:52,560
have executable things you just now have

00:04:49,500 --> 00:04:54,360
declarative things basically you write

00:04:52,560 --> 00:04:56,460
this unit file and if you run a service

00:04:54,360 --> 00:04:58,710
it's called a service file where you

00:04:56,460 --> 00:05:01,050
specify how your service should look

00:04:58,710 --> 00:05:04,529
like and then you let system D configure

00:05:01,050 --> 00:05:06,840
your service as it should so this is not

00:05:04,529 --> 00:05:08,400
executable you cannot just dot and run

00:05:06,840 --> 00:05:11,939
that file so you need something to

00:05:08,400 --> 00:05:16,529
execute it and I hope that really hope

00:05:11,939 --> 00:05:17,729
that looks good but yeah so M so if you

00:05:16,529 --> 00:05:19,349
want to start your service you are

00:05:17,729 --> 00:05:21,120
certainly to start it for you you don't

00:05:19,349 --> 00:05:23,340
do it yourself and this is a completely

00:05:21,120 --> 00:05:26,550
change of parodies you say systemctl

00:05:23,340 --> 00:05:28,580
start my service if you want to stop it

00:05:26,550 --> 00:05:31,169
you don't situm CDL stop my service

00:05:28,580 --> 00:05:33,089
which if you remember like I didn't

00:05:31,169 --> 00:05:35,729
specify how to stop my service but since

00:05:33,089 --> 00:05:37,440
this is a unique service system D kind

00:05:35,729 --> 00:05:40,520
of know how the things should be done so

00:05:37,440 --> 00:05:43,409
I didn't need to wrote that fact that

00:05:40,520 --> 00:05:45,930
but if you really ask me the reason why

00:05:43,409 --> 00:05:47,490
I think system D is a de facto init

00:05:45,930 --> 00:05:50,490
system our service manager on most

00:05:47,490 --> 00:05:52,289
services on most servers is because M if

00:05:50,490 --> 00:05:54,659
you ask for a status for information for

00:05:52,289 --> 00:05:55,919
your service it give it to you and this

00:05:54,659 --> 00:05:58,889
is something that you think like it's

00:05:55,919 --> 00:06:01,409
obvious but it's before system D was not

00:05:58,889 --> 00:06:03,779
possible things like is my service

00:06:01,409 --> 00:06:05,879
running it makes sense that system D can

00:06:03,779 --> 00:06:07,349
tell your information we go sit in this

00:06:05,879 --> 00:06:09,599
start observe so he create the first

00:06:07,349 --> 00:06:11,339
fork exec he knows the peel of your main

00:06:09,599 --> 00:06:14,339
application so he can keep track of it

00:06:11,339 --> 00:06:15,900
it can tell you when your service start

00:06:14,339 --> 00:06:18,990
and now you know that these two things

00:06:15,900 --> 00:06:21,750
are actually real in situ 5 when you ask

00:06:18,990 --> 00:06:24,240
service the name of the service status

00:06:21,750 --> 00:06:26,759
it says running but they don't tell you

00:06:24,240 --> 00:06:29,310
like when or all those information it

00:06:26,759 --> 00:06:31,589
also gives you a little piece of data

00:06:29,310 --> 00:06:34,199
that before system D was actually not

00:06:31,589 --> 00:06:36,599
possible to get entirely that is all the

00:06:34,199 --> 00:06:39,300
processes that are running within your

00:06:36,599 --> 00:06:40,819
service and I explained this right away

00:06:39,300 --> 00:06:44,819
when I explained the concept of C group

00:06:40,819 --> 00:06:46,650
so this would not be a system D talk if

00:06:44,819 --> 00:06:49,500
I did not talk about two things the

00:06:46,650 --> 00:06:51,240
first one is socket activation and the

00:06:49,500 --> 00:06:57,389
second one is C group so let's at least

00:06:51,240 --> 00:07:00,120
toggle one se group sorry

00:06:57,389 --> 00:07:01,620
I see group it's basically a Linux

00:07:00,120 --> 00:07:04,830
kernel feature that allows you to impose

00:07:01,620 --> 00:07:07,860
restriction on a certain list of process

00:07:04,830 --> 00:07:09,360
so in in common languages like I have a

00:07:07,860 --> 00:07:12,210
process and I want to say you can only

00:07:09,360 --> 00:07:14,639
use 40% of CPU 10 megabytes of RAM you

00:07:12,210 --> 00:07:18,469
can only access this type of memory or

00:07:14,639 --> 00:07:20,159
CPU a oh sorry or or i/o like disk i/o

00:07:18,469 --> 00:07:22,319
that's what cgroups

00:07:20,159 --> 00:07:24,330
allows you to do system do you see

00:07:22,319 --> 00:07:25,650
groups for this purpose but also for a

00:07:24,330 --> 00:07:28,770
slightly different purpose

00:07:25,650 --> 00:07:30,930
so system D before starting your service

00:07:28,770 --> 00:07:33,780
it will create a C group just for that

00:07:30,930 --> 00:07:35,490
service so systems rice / my observe is

00:07:33,780 --> 00:07:38,069
that the name of the C group and the

00:07:35,490 --> 00:07:39,719
conversion of is system the specific it

00:07:38,069 --> 00:07:41,400
doesn't have to do anything with C

00:07:39,719 --> 00:07:46,380
groups it's just a name so then you

00:07:41,400 --> 00:07:48,509
start your service then if if your main

00:07:46,380 --> 00:07:50,009
process start to child processes these

00:07:48,509 --> 00:07:51,569
two processes are also going to be part

00:07:50,009 --> 00:07:53,130
of the process tree so if you go into

00:07:51,569 --> 00:07:54,479
the main process and then we look at the

00:07:53,130 --> 00:07:57,120
process tree you're going to see these

00:07:54,479 --> 00:07:58,740
two child processes but you can also

00:07:57,120 --> 00:08:00,270
start doing that go through the C group

00:07:58,740 --> 00:08:01,460
and then list all the process in the C

00:08:00,270 --> 00:08:04,080
group and you're still going to see them

00:08:01,460 --> 00:08:05,759
but here's where it's cool because if

00:08:04,080 --> 00:08:07,889
one of the child process decide to

00:08:05,759 --> 00:08:10,169
double fork itself and then demonize and

00:08:07,889 --> 00:08:12,810
escape the parent it will no longer be

00:08:10,169 --> 00:08:15,840
part of the process tree so in our

00:08:12,810 --> 00:08:18,330
regular point of view you will lose side

00:08:15,840 --> 00:08:20,400
of it but since it cannot escape the C

00:08:18,330 --> 00:08:22,949
group system D can still tell like that

00:08:20,400 --> 00:08:25,979
demon spawn by main process is part of

00:08:22,949 --> 00:08:28,229
the service so for the first time in all

00:08:25,979 --> 00:08:31,169
of Linux history we were able to

00:08:28,229 --> 00:08:33,089
actually kill a service in the his

00:08:31,169 --> 00:08:34,589
entirety because now we don't have to

00:08:33,089 --> 00:08:38,130
keep track of individual process we just

00:08:34,589 --> 00:08:41,699
say C group goodbye and then everything

00:08:38,130 --> 00:08:44,339
goes so I hope you like my explanation

00:08:41,699 --> 00:08:46,310
of C groups let's move on to now what

00:08:44,339 --> 00:08:48,360
cool things can we do with with system D

00:08:46,310 --> 00:08:52,889
so the first thing that I want to show

00:08:48,360 --> 00:08:56,069
you is template so a template and

00:08:52,889 --> 00:08:58,230
again I hope a template is basically a

00:08:56,069 --> 00:09:00,299
unit file the same but instead of

00:08:58,230 --> 00:09:03,839
calling we started having the name my

00:09:00,299 --> 00:09:06,089
app dot service is my app add top

00:09:03,839 --> 00:09:08,339
service and then in your file you put

00:09:06,089 --> 00:09:11,879
this a person's are this am percentage

00:09:08,339 --> 00:09:14,009
why so then when you want to start your

00:09:11,879 --> 00:09:16,889
service you start your services my app

00:09:14,009 --> 00:09:18,029
at and then a word doesn't matter which

00:09:16,889 --> 00:09:19,049
one it is in this case I put the

00:09:18,029 --> 00:09:21,239
configuration name

00:09:19,049 --> 00:09:24,540
so what system they will do is that it

00:09:21,239 --> 00:09:27,509
will replace that percentage Y with the

00:09:24,540 --> 00:09:30,239
word that you put there so this is cool

00:09:27,509 --> 00:09:32,069
because if you have for instance this

00:09:30,239 --> 00:09:34,439
you easy which I'm pretty sure most of

00:09:32,069 --> 00:09:35,999
us are familiar with if you have you

00:09:34,439 --> 00:09:37,829
will see point so the configuration

00:09:35,999 --> 00:09:40,019
point to different version of your app

00:09:37,829 --> 00:09:42,749
you can actually do roll-up with this so

00:09:40,019 --> 00:09:45,749
you can start my up at version 1 conf

00:09:42,749 --> 00:09:47,850
and then start my app at version two

00:09:45,749 --> 00:09:50,279
cons have two of them running to your ad

00:09:47,850 --> 00:09:52,230
testing and when you decided that one is

00:09:50,279 --> 00:09:53,999
good you take out one and leave the

00:09:52,230 --> 00:09:55,859
other or you can roll back by just stop

00:09:53,999 --> 00:09:57,600
in the other one so this is actually a

00:09:55,859 --> 00:09:59,850
cool feature that it usually get

00:09:57,600 --> 00:10:03,449
overlooked as a toy thing but it's

00:09:59,850 --> 00:10:04,919
really powerful as I said this would not

00:10:03,449 --> 00:10:06,720
be a system D talk if I didn't talk

00:10:04,919 --> 00:10:09,299
about socket activation and signal

00:10:06,720 --> 00:10:11,850
that's all about sock activation I'm

00:10:09,299 --> 00:10:14,429
gonna I'm going to say something that is

00:10:11,850 --> 00:10:16,980
obvious to everybody it's like before

00:10:14,429 --> 00:10:18,360
when you done to saga activation and you

00:10:16,980 --> 00:10:20,489
want to do network you start your

00:10:18,360 --> 00:10:23,279
application then eventually your

00:10:20,489 --> 00:10:25,470
application will open a port will start

00:10:23,279 --> 00:10:28,470
listening to the port 480 and then this

00:10:25,470 --> 00:10:31,019
part will become an open file for your

00:10:28,470 --> 00:10:32,790
application and this little piece of

00:10:31,019 --> 00:10:34,529
data is really important then you will

00:10:32,790 --> 00:10:38,249
get a request and then you move back a

00:10:34,529 --> 00:10:40,559
response mmm this thing has an implicit

00:10:38,249 --> 00:10:43,350
contract then since the port is an open

00:10:40,559 --> 00:10:45,720
file of your application if your

00:10:43,350 --> 00:10:47,639
application goes down the port is closed

00:10:45,720 --> 00:10:49,439
or it's not listen or whatever you want

00:10:47,639 --> 00:10:53,279
to name it so if somebody send your

00:10:49,439 --> 00:10:56,519
request you can send an answer so socket

00:10:53,279 --> 00:10:59,309
activation works change the logic of

00:10:56,519 --> 00:11:02,639
application port request integral

00:10:59,309 --> 00:11:04,919
activation system D will start and he

00:11:02,639 --> 00:11:06,010
will start listening to your port so

00:11:04,919 --> 00:11:08,950
instead of you

00:11:06,010 --> 00:11:10,330
starting to listen on port 80 system D

00:11:08,950 --> 00:11:12,000
will start listening to you and opening

00:11:10,330 --> 00:11:15,280
the port is basically lightning-fast

00:11:12,000 --> 00:11:18,570
then you will get a request so you have

00:11:15,280 --> 00:11:22,510
port request and only when you request

00:11:18,570 --> 00:11:25,180
system D will activate your service

00:11:22,510 --> 00:11:27,850
also get activation you get it and then

00:11:25,180 --> 00:11:29,680
system D will just gladly pass the file

00:11:27,850 --> 00:11:31,000
descriptor to your app so this file

00:11:29,680 --> 00:11:32,860
descriptor is something that has already

00:11:31,000 --> 00:11:34,480
been been and has already been listen to

00:11:32,860 --> 00:11:36,550
it so your application all it needs to

00:11:34,480 --> 00:11:38,830
do is read and accept the connection and

00:11:36,550 --> 00:11:41,770
then you can send the response back this

00:11:38,830 --> 00:11:43,540
gives you a lot of flexibility and

00:11:41,770 --> 00:11:45,580
options the first one that it allows you

00:11:43,540 --> 00:11:48,730
to not even in production but inter dev

00:11:45,580 --> 00:11:51,610
server or your laptop if you're

00:11:48,730 --> 00:11:54,430
developing and some of your develop use

00:11:51,610 --> 00:11:57,040
MySQL as a vacuum you don't have to have

00:11:54,430 --> 00:11:58,690
MySQL always running you just have it

00:11:57,040 --> 00:12:01,480
running the first time that you hit a

00:11:58,690 --> 00:12:04,870
test that will go into your MySQL that's

00:12:01,480 --> 00:12:06,550
kind of the point so save resources and

00:12:04,870 --> 00:12:09,760
only activate the stuff that you want

00:12:06,550 --> 00:12:12,100
the other thing is that things this

00:12:09,760 --> 00:12:13,270
program that listen to the port and the

00:12:12,100 --> 00:12:15,640
program that actually accept the

00:12:13,270 --> 00:12:19,810
connection are different you can start

00:12:15,640 --> 00:12:21,820
your program as root and I'm assume that

00:12:19,810 --> 00:12:25,780
everybody renamed his root user ask you

00:12:21,820 --> 00:12:26,320
as Widow so okay but you if you like

00:12:25,780 --> 00:12:27,610
like toast

00:12:26,320 --> 00:12:29,380
this is gonna be the person cheering for

00:12:27,610 --> 00:12:32,410
you mmm

00:12:29,380 --> 00:12:35,500
so okay okay back on track

00:12:32,410 --> 00:12:37,150
if system da will start your port a and

00:12:35,500 --> 00:12:39,460
since system D runners root it can be

00:12:37,150 --> 00:12:41,920
into any port in the system but then

00:12:39,460 --> 00:12:43,990
your application can run as a normal

00:12:41,920 --> 00:12:47,710
user and the cool thing about this is

00:12:43,990 --> 00:12:50,050
that am you without this your

00:12:47,710 --> 00:12:52,420
application has to start as root B into

00:12:50,050 --> 00:12:54,280
the port and then either drop privilege

00:12:52,420 --> 00:12:56,530
or startup process with a different user

00:12:54,280 --> 00:12:58,090
right now the application from the

00:12:56,530 --> 00:12:59,860
beginning doesn't have all the

00:12:58,090 --> 00:13:02,560
privileges that it won so that's another

00:12:59,860 --> 00:13:04,360
thing that is cool and finally if you

00:13:02,560 --> 00:13:06,850
run on really modern Linux you can use a

00:13:04,360 --> 00:13:08,890
so port reuse and then you can have for

00:13:06,850 --> 00:13:10,810
instance running the first version of

00:13:08,890 --> 00:13:12,790
your application like I say and then you

00:13:10,810 --> 00:13:14,470
can assistant D to start the second

00:13:12,790 --> 00:13:17,260
version of your application but also

00:13:14,470 --> 00:13:19,450
listening to the port so it's an option

00:13:17,260 --> 00:13:19,840
of the kernel like a support reduce I

00:13:19,450 --> 00:13:23,110
won't

00:13:19,840 --> 00:13:24,100
into it but oh and it was really cool so

00:13:23,110 --> 00:13:25,810
then you will have their two

00:13:24,100 --> 00:13:27,640
applications running and again you do

00:13:25,810 --> 00:13:29,830
a/b testing and when you're ready to say

00:13:27,640 --> 00:13:34,570
that version 2 is up for production you

00:13:29,830 --> 00:13:37,690
just made it the final one cool so how

00:13:34,570 --> 00:13:39,670
do we make this possible it's simple mmm

00:13:37,690 --> 00:13:41,740
the service files remain office and

00:13:39,670 --> 00:13:43,510
touch the import of things that now you

00:13:41,740 --> 00:13:47,290
create a socket file where you specify

00:13:43,510 --> 00:13:48,820
what do you want to listen and you start

00:13:47,290 --> 00:13:52,210
that socket file as you will start any

00:13:48,820 --> 00:13:54,880
service now in your code since you would

00:13:52,210 --> 00:13:57,190
normally do open a socket B into a board

00:13:54,880 --> 00:13:59,080
and execute a listen then all these

00:13:57,190 --> 00:14:04,510
things are already done for you or

00:13:59,080 --> 00:14:07,000
system D what you need to do is it's a

00:14:04,510 --> 00:14:09,100
instead of doing that you just socket

00:14:07,000 --> 00:14:10,570
from F D instead of socket socket you

00:14:09,100 --> 00:14:12,370
open a file descriptor and that file

00:14:10,570 --> 00:14:14,710
descriptor is the one that was handed to

00:14:12,370 --> 00:14:16,570
you by system D and you see that there

00:14:14,710 --> 00:14:19,900
is a library there that's called piston

00:14:16,570 --> 00:14:23,370
D and that's my library that I created

00:14:19,900 --> 00:14:26,410
so segue into my paper

00:14:23,370 --> 00:14:28,839
- we everybody in face book we use a lot

00:14:26,410 --> 00:14:31,089
of Python and we use a lot of system D

00:14:28,839 --> 00:14:33,250
so basically we create a library to be

00:14:31,089 --> 00:14:35,170
able to interact with system D in a same

00:14:33,250 --> 00:14:38,170
way that doesn't involve executing to

00:14:35,170 --> 00:14:40,270
process dot call all the time so we

00:14:38,170 --> 00:14:43,990
basically to give us interface to system

00:14:40,270 --> 00:14:46,420
D how does it work I'm sure that

00:14:43,990 --> 00:14:48,820
everybody can read that great thing you

00:14:46,420 --> 00:14:50,500
peep in stop isn't it you I hope that

00:14:48,820 --> 00:14:52,450
sweater you imported as you would

00:14:50,500 --> 00:14:54,220
normally import it and then if you have

00:14:52,450 --> 00:14:56,560
a unit on yourself on your service you

00:14:54,220 --> 00:14:59,530
just load it like that and then you can

00:14:56,560 --> 00:15:02,320
start and stop and do all the operations

00:14:59,530 --> 00:15:03,400
that you want nothing fancy there if you

00:15:02,320 --> 00:15:05,200
want to get information from your

00:15:03,400 --> 00:15:06,550
running service you can also get it so

00:15:05,200 --> 00:15:08,770
first that you can get the main act the

00:15:06,550 --> 00:15:10,959
main pit and since this is not executing

00:15:08,770 --> 00:15:13,209
a chair and then parsing that takes out

00:15:10,959 --> 00:15:15,130
and giving you something that main field

00:15:13,209 --> 00:15:17,110
is an integer because we talked over the

00:15:15,130 --> 00:15:19,480
worst of us knows about types or you get

00:15:17,110 --> 00:15:21,870
it it's cool and if you want to get like

00:15:19,480 --> 00:15:24,220
the list of process you can get it and

00:15:21,870 --> 00:15:24,730
that concludes the first part of the

00:15:24,220 --> 00:15:28,420
presentation

00:15:24,730 --> 00:15:29,950
I'm going to move to a demo so we're

00:15:28,420 --> 00:15:31,959
gonna have you system deal with piston D

00:15:29,950 --> 00:15:33,279
and I want to show you a few things that

00:15:31,959 --> 00:15:42,459
can or

00:15:33,279 --> 00:15:44,139
not make a yeah okay so in your normal

00:15:42,459 --> 00:15:45,939
application if you want to execute the

00:15:44,139 --> 00:15:49,809
choke command the thing that you will do

00:15:45,939 --> 00:15:51,879
is process that call right so first is

00:15:49,809 --> 00:15:53,620
if I want to execute sleep I will

00:15:51,879 --> 00:15:56,740
execute it and then you will see like

00:15:53,620 --> 00:15:59,019
right there there is a child of the

00:15:56,740 --> 00:16:01,059
parent process that I created this has

00:15:59,019 --> 00:16:03,399
three consequences the first

00:16:01,059 --> 00:16:05,620
consequences is that it ran as the same

00:16:03,399 --> 00:16:08,889
user of my application that means that

00:16:05,620 --> 00:16:10,689
it has all the same privileges that my

00:16:08,889 --> 00:16:13,149
application has the second thing is that

00:16:10,689 --> 00:16:14,170
it run at the same C group so it has the

00:16:13,149 --> 00:16:17,730
same view of the system

00:16:14,170 --> 00:16:21,160
and the third thing is that it has the

00:16:17,730 --> 00:16:24,999
if the parent goes away the children

00:16:21,160 --> 00:16:27,730
also goes away so running a process

00:16:24,999 --> 00:16:32,920
sounds a lot like starting a service so

00:16:27,730 --> 00:16:36,399
instead of doing that system D provide a

00:16:32,920 --> 00:16:38,350
nice feature that is called a transient

00:16:36,399 --> 00:16:40,240
unit so instead of with starting a

00:16:38,350 --> 00:16:43,389
service that means creating a unit file

00:16:40,240 --> 00:16:46,000
and reload it I can actually execute

00:16:43,389 --> 00:16:48,250
piston D that run everything that you

00:16:46,000 --> 00:16:50,019
saw there is that it returns right away

00:16:48,250 --> 00:16:52,569
and it returns where it's supposed to be

00:16:50,019 --> 00:16:54,309
a unit file let me store them the type

00:16:52,569 --> 00:16:56,680
of thing that you see is that it's

00:16:54,309 --> 00:16:59,230
created a system process it's not part

00:16:56,680 --> 00:17:01,600
of the process tree is a way so this is

00:16:59,230 --> 00:17:04,360
cool because all this restriction that

00:17:01,600 --> 00:17:05,860
we just talked goes away I'm gonna go as

00:17:04,360 --> 00:17:07,390
far as say that almost all the calls

00:17:05,860 --> 00:17:09,339
that you make to su process that call in

00:17:07,390 --> 00:17:11,230
your service can be replaced with piston

00:17:09,339 --> 00:17:14,260
D don't run on Linux don't do this on

00:17:11,230 --> 00:17:16,030
Windows it will not work on all of us in

00:17:14,260 --> 00:17:20,069
different on Linux but yeah so that's

00:17:16,030 --> 00:17:23,620
cool okay so let's see what happened so

00:17:20,069 --> 00:17:26,649
the thing that happened is that I system

00:17:23,620 --> 00:17:28,870
D actually created AI unit for me and it

00:17:26,649 --> 00:17:35,610
started as a different service that

00:17:28,870 --> 00:17:35,610
means that if I go here and yes

00:17:36,950 --> 00:17:41,180
file you will see that he given a unit

00:17:38,660 --> 00:17:43,640
file that I didn't create and as it

00:17:41,180 --> 00:17:46,970
should be is in run system did transfer

00:17:43,640 --> 00:17:49,190
unit so um so with this I can execute

00:17:46,970 --> 00:17:52,040
stuff with this Toledo Ram see the unit

00:17:49,190 --> 00:17:53,990
file that was created and then I can see

00:17:52,040 --> 00:17:58,640
how can do the same thing with my normal

00:17:53,990 --> 00:18:02,720
service so let me go there sir okay what

00:17:58,640 --> 00:18:05,480
other cool things can we do so this is

00:18:02,720 --> 00:18:08,540
one thing that I think it's cool and is

00:18:05,480 --> 00:18:10,850
like I can actually start a batch

00:18:08,540 --> 00:18:13,310
process so if you see I'm still on my

00:18:10,850 --> 00:18:14,990
mini demo right there that you see but

00:18:13,310 --> 00:18:18,530
for some reason I created a batch

00:18:14,990 --> 00:18:20,750
process I added a pity Y and then I

00:18:18,530 --> 00:18:23,270
linked together there's TV in an STD out

00:18:20,750 --> 00:18:26,270
really magic and I only did it with this

00:18:23,270 --> 00:18:29,470
command over here that you can see this

00:18:26,270 --> 00:18:31,940
should give you a little acidity out

00:18:29,470 --> 00:18:33,730
pdwhite true and I give it a name and I

00:18:31,940 --> 00:18:39,200
give it a name and here I can show you

00:18:33,730 --> 00:18:41,060
you see the the service unit that will

00:18:39,200 --> 00:18:46,850
be created for that so this is a normal

00:18:41,060 --> 00:18:50,660
job and I can do stuff like and actually

00:18:46,850 --> 00:18:53,990
verify that this is what I'm running so

00:18:50,660 --> 00:18:56,750
I can do all this kind of stuff and here

00:18:53,990 --> 00:18:59,030
is the first thing that I think it why

00:18:56,750 --> 00:19:01,610
recently the run is better than the

00:18:59,030 --> 00:19:04,940
process the code for some things is that

00:19:01,610 --> 00:19:08,630
I can do with this if I want to run this

00:19:04,940 --> 00:19:10,610
as a different user right all I need to

00:19:08,630 --> 00:19:13,520
do is just add user at the end and then

00:19:10,610 --> 00:19:15,710
the name of the user and then as you see

00:19:13,520 --> 00:19:18,890
my gel it's running as the background

00:19:15,710 --> 00:19:21,260
user and this is how you accomplish that

00:19:18,890 --> 00:19:23,120
if you instead of doing from video code

00:19:21,260 --> 00:19:24,740
you start from a service file is how you

00:19:23,120 --> 00:19:25,940
will do it so this is actually cool

00:19:24,740 --> 00:19:28,970
because now in the program you can

00:19:25,940 --> 00:19:32,060
execute pieces of code as I'm privileged

00:19:28,970 --> 00:19:36,130
so let's see what other cool things can

00:19:32,060 --> 00:19:39,130
with them and I will start going

00:19:36,130 --> 00:19:41,870
relatively fast until I run out of time

00:19:39,130 --> 00:19:43,040
I'm showing different settings these

00:19:41,870 --> 00:19:44,750
settings you can use it in any

00:19:43,040 --> 00:19:46,580
combination that you like and most of

00:19:44,750 --> 00:19:49,580
them are more different versions of

00:19:46,580 --> 00:19:50,419
configuration um but the one that I'm

00:19:49,580 --> 00:19:54,049
show you

00:19:50,419 --> 00:19:56,450
to give you a curiosity and go and read

00:19:54,049 --> 00:19:58,759
the man page see all the blog post send

00:19:56,450 --> 00:20:00,799
me messages on messenger or Instagram if

00:19:58,759 --> 00:20:07,549
you care about my cut I don't have cut I

00:20:00,799 --> 00:20:09,919
have sons yeah okay so the first one is

00:20:07,549 --> 00:20:12,379
protocol predict home is actually a

00:20:09,919 --> 00:20:14,389
quite good is very good idea and it's

00:20:12,379 --> 00:20:16,460
the link is the following you stir your

00:20:14,389 --> 00:20:18,440
yang application why would your junk

00:20:16,460 --> 00:20:21,139
application have access to the SSH keys

00:20:18,440 --> 00:20:24,049
or the AWS credential to your users

00:20:21,139 --> 00:20:26,659
so what product home does is that it

00:20:24,049 --> 00:20:29,929
literally will check away for your

00:20:26,659 --> 00:20:32,509
service just service it will not have

00:20:29,929 --> 00:20:35,029
anything underneath home and root so

00:20:32,509 --> 00:20:37,970
that means that now if somebody had your

00:20:35,029 --> 00:20:40,100
service it got limited exposure to your

00:20:37,970 --> 00:20:43,249
application and that if you ask me I

00:20:40,100 --> 00:20:44,929
think it's really cool no yang go and I

00:20:43,249 --> 00:20:48,950
say yang because I'm Instagram and we

00:20:44,929 --> 00:20:51,710
work a lot with django Django has one

00:20:48,950 --> 00:20:53,989
thing where it just read template read

00:20:51,710 --> 00:20:55,970
data from back-end and then expose it to

00:20:53,989 --> 00:20:57,830
the wire so it actually doesn't need to

00:20:55,970 --> 00:20:59,809
write information into disk so the

00:20:57,830 --> 00:21:03,759
second option is protect system strict

00:20:59,809 --> 00:21:06,739
and what that does is that it try to

00:21:03,759 --> 00:21:09,590
make your whole system read-only so that

00:21:06,739 --> 00:21:12,080
way your service only your service can

00:21:09,590 --> 00:21:14,600
also cannot write anywhere not even in

00:21:12,080 --> 00:21:17,330
temporal directory of course you can

00:21:14,600 --> 00:21:19,369
qualify this and and there are different

00:21:17,330 --> 00:21:23,690
options but yeah so this is one cool

00:21:19,369 --> 00:21:25,850
thing that you can do okay so the next

00:21:23,690 --> 00:21:28,190
one that you can do it's a little longer

00:21:25,850 --> 00:21:30,379
and I just put all of them together is

00:21:28,190 --> 00:21:32,359
that even though protect home and

00:21:30,379 --> 00:21:35,299
protect systems are cool they are really

00:21:32,359 --> 00:21:38,059
like a catch-all bag like sometimes I

00:21:35,299 --> 00:21:41,960
want to have a few pieces not all of

00:21:38,059 --> 00:21:44,600
them so you can have like a part of that

00:21:41,960 --> 00:21:47,149
one part is you can have read-only

00:21:44,600 --> 00:21:49,249
directories so I can specify which

00:21:47,149 --> 00:21:51,859
directories I want to be read-only so I

00:21:49,249 --> 00:21:54,259
can say broad directory you can read it

00:21:51,859 --> 00:21:56,659
because I need you to access my AWS

00:21:54,259 --> 00:21:59,359
credentials but don't write into it

00:21:56,659 --> 00:22:00,769
because don't inaccessible directories

00:21:59,359 --> 00:22:03,710
is the same thing that you saw it just

00:22:00,769 --> 00:22:04,690
goes away and write directories I don't

00:22:03,710 --> 00:22:07,549
have to

00:22:04,690 --> 00:22:09,740
wait private EMP is worse awesome

00:22:07,549 --> 00:22:12,440
because it's it for your service it

00:22:09,740 --> 00:22:15,230
gives a private version of what would be

00:22:12,440 --> 00:22:17,150
the TMP directory so we don't share the

00:22:15,230 --> 00:22:19,070
same TMP as the rest of the system does

00:22:17,150 --> 00:22:21,080
so you can put stuff there or other

00:22:19,070 --> 00:22:23,480
service can put stuff on there TMP and

00:22:21,080 --> 00:22:24,830
they won't collide you can do the same

00:22:23,480 --> 00:22:27,320
thing with any directory when you

00:22:24,830 --> 00:22:30,890
specify with temporal file system so if

00:22:27,320 --> 00:22:34,490
I if you see it will mount barca chim is

00:22:30,890 --> 00:22:36,260
Q is as a temporal file system as a temp

00:22:34,490 --> 00:22:38,419
FS the cool thing about these two

00:22:36,260 --> 00:22:40,460
features is that once your service is

00:22:38,419 --> 00:22:44,179
down all the temper of files that you

00:22:40,460 --> 00:22:45,919
created are also going away so this is

00:22:44,179 --> 00:22:48,620
this is one of the privileges that you

00:22:45,919 --> 00:22:50,600
have when you let system da manager

00:22:48,620 --> 00:22:52,490
service the to last wonders that I have

00:22:50,600 --> 00:22:54,140
here it's one thing that most people

00:22:52,490 --> 00:22:56,179
don't know that they can do you can beam

00:22:54,140 --> 00:22:57,679
path for your application so what I can

00:22:56,179 --> 00:23:00,080
do is for it so I can make believe my

00:22:57,679 --> 00:23:03,380
application that barely catch my ear my

00:23:00,080 --> 00:23:05,840
ass live over there is actually SRV

00:23:03,380 --> 00:23:08,000
PyCon so these two directories are

00:23:05,840 --> 00:23:09,590
actually but only for my service not

00:23:08,000 --> 00:23:13,400
everybody else and then you can read

00:23:09,590 --> 00:23:15,260
only path it's of course you mounted but

00:23:13,400 --> 00:23:17,510
mountains read-only but here's the cool

00:23:15,260 --> 00:23:23,360
thing what I'm out of here is not a

00:23:17,510 --> 00:23:25,309
folder it's a it's a it's a file so you

00:23:23,360 --> 00:23:26,929
can also mount files and you can also do

00:23:25,309 --> 00:23:29,090
this with mount operation the problem is

00:23:26,929 --> 00:23:32,380
that that idea is kind of weird to

00:23:29,090 --> 00:23:35,780
people to me you it's also weird but

00:23:32,380 --> 00:23:37,730
yeah so you can do that let's move it oh

00:23:35,780 --> 00:23:39,890
this one it's cool and I'm glad I still

00:23:37,730 --> 00:23:41,960
have time to show you this so how about

00:23:39,890 --> 00:23:44,750
if we talk about disk we talk about

00:23:41,960 --> 00:23:46,490
permissions how about network access so

00:23:44,750 --> 00:23:50,630
what this does is that I have I'm

00:23:46,490 --> 00:23:52,159
running batch and I have there you can

00:23:50,630 --> 00:23:54,710
sell to your service and just to your

00:23:52,159 --> 00:23:56,780
service hey I don't want you to access

00:23:54,710 --> 00:24:04,100
anything on the internet or anything

00:23:56,780 --> 00:24:05,780
access you accept IP 8832 so now what I

00:24:04,100 --> 00:24:08,240
have here is an application that can

00:24:05,780 --> 00:24:14,690
only we can do more than thing but it

00:24:08,240 --> 00:24:16,399
can only pin 8 and if I try to wait for

00:24:14,690 --> 00:24:17,750
4 it will tell me operational parameters

00:24:16,399 --> 00:24:20,330
because I cannot even

00:24:17,750 --> 00:24:20,960
so you can have an firewall just for

00:24:20,330 --> 00:24:24,020
your service

00:24:20,960 --> 00:24:26,960
this is system D piston D only gives you

00:24:24,020 --> 00:24:29,960
access to it through Python just I don't

00:24:26,960 --> 00:24:31,610
do anything special ever so that's cool

00:24:29,960 --> 00:24:34,780
there are other options more restrictive

00:24:31,610 --> 00:24:38,390
to that but that one was cool and then

00:24:34,780 --> 00:24:40,730
the cool one a again this is system D

00:24:38,390 --> 00:24:42,800
these are C groups let's see how sit in

00:24:40,730 --> 00:24:47,210
the UC group here I have a unit that

00:24:42,800 --> 00:24:50,180
basically I'd say use 20% of CPU only

00:24:47,210 --> 00:24:54,110
used 10 megabytes of RAM and only and

00:24:50,180 --> 00:24:58,960
you're only allowed to spawn five five

00:24:54,110 --> 00:25:02,780
eight pi processes so um let me show you

00:24:58,960 --> 00:25:05,960
what that means so right here if you see

00:25:02,780 --> 00:25:07,820
I have the memory limit and then the

00:25:05,960 --> 00:25:10,670
task limit the last limit means that I

00:25:07,820 --> 00:25:12,680
can only have up to five running process

00:25:10,670 --> 00:25:16,340
at a certain time or let's say like this

00:25:12,680 --> 00:25:18,410
I can only for four four five times at a

00:25:16,340 --> 00:25:20,360
time if that makes sense

00:25:18,410 --> 00:25:23,510
okay the only one that I want to show

00:25:20,360 --> 00:25:24,920
you here to explain its the CPU you have

00:25:23,510 --> 00:25:28,880
to believe me that all that the other

00:25:24,920 --> 00:25:30,560
ones work so I will do a simple Python

00:25:28,880 --> 00:25:33,890
program that I have been doing since I

00:25:30,560 --> 00:25:36,230
learned to code that is just basically

00:25:33,890 --> 00:25:41,000
using all the all the CPU that occur so

00:25:36,230 --> 00:25:43,700
if you see right there is that I'm

00:25:41,000 --> 00:25:45,620
trying to use all the CPU that I can and

00:25:43,700 --> 00:25:49,490
if you see that nice number that doesn't

00:25:45,620 --> 00:25:52,870
go in too much above 20 rounding stuff

00:25:49,490 --> 00:25:55,280
like that yeah accounting is not really

00:25:52,870 --> 00:25:59,410
yeah so it does like that so that's how

00:25:55,280 --> 00:26:06,410
you restrict and I will do something I

00:25:59,410 --> 00:26:09,140
will try to I will try to overflow and

00:26:06,410 --> 00:26:11,450
Tran and if you see there it says killer

00:26:09,140 --> 00:26:13,160
so the uma Cheney was also smart enough

00:26:11,450 --> 00:26:14,570
to know that this is the thing to kill

00:26:13,160 --> 00:26:18,470
because this is the one that is actually

00:26:14,570 --> 00:26:22,490
violating your things and I'm gonna go

00:26:18,470 --> 00:26:24,950
to a nice top here they're more thing to

00:26:22,490 --> 00:26:28,450
know to show I just want to show the

00:26:24,950 --> 00:26:28,450
last thing but I want explain it Oh

00:26:31,270 --> 00:26:41,710
of course of course something has to be

00:26:35,790 --> 00:26:43,800
to go wrong and yeah we're done thank

00:26:41,710 --> 00:26:43,800
you

00:26:48,800 --> 00:26:56,150
honey okay honestly I'm here for

00:26:52,850 --> 00:26:57,860
questions I'm just not on Sage yeah so

00:26:56,150 --> 00:27:00,210
ping me if you have anything thank you

00:26:57,860 --> 00:27:03,420
guys for coming

00:27:00,210 --> 00:27:03,420

YouTube URL: https://www.youtube.com/watch?v=ZUX9Fx8Rwzg


