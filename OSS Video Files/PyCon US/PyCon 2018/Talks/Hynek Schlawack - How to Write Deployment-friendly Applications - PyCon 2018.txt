Title: Hynek Schlawack - How to Write Deployment-friendly Applications - PyCon 2018
Publication date: 2018-08-06
Playlist: Talks
Description: 
	Speaker: Hynek Schlawack

The DevOps movement gave us many ways to put Python applications into production.  But should your *application* care?  Should it need to know whether it’s running on your notebook, on a server, in a Docker container, or in some cloud platform as a service?

It should not, because environment-agnostic applications are easier to **test**, easier to **deploy**, easier to **handle**, and easier to **scale**.

But how can you *practically* structure and configure your applications to make them indifferent to the environment they run in?  How do secrets fit into the picture?  And where do you put that log file?

By the end of this talk you’ll know the tools and techniques that enable you to write such Python applications and you’ll be ready for the next big change.

Slides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides
Captions: 
	00:00:00,319 --> 00:00:04,770
all right we're ready to get started

00:00:03,000 --> 00:00:07,500
this is henyk and he's gonna be talking

00:00:04,770 --> 00:00:08,220
about how to write development friendly

00:00:07,500 --> 00:00:11,490
applications

00:00:08,220 --> 00:00:14,429
there will be no QA after the talk if

00:00:11,490 --> 00:00:16,470
you'd like to chat with henyk he'll be

00:00:14,429 --> 00:00:19,560
available for an open space or outside

00:00:16,470 --> 00:00:27,930
after the talk give him a warm welcome

00:00:19,560 --> 00:00:28,500
to Enic all right thanks for coming

00:00:27,930 --> 00:00:31,439
everyone

00:00:28,500 --> 00:00:33,989
I'm Henoch you may know me from today's

00:00:31,439 --> 00:00:37,350
amazing keynote by a Ying there were my

00:00:33,989 --> 00:00:39,510
two seconds of fame that also made me

00:00:37,350 --> 00:00:42,570
want to just throw away my slides I mean

00:00:39,510 --> 00:00:46,620
how does one do such great slides anyway

00:00:42,570 --> 00:00:48,420
I got a juicy head cold so I hope I will

00:00:46,620 --> 00:00:52,469
not lose too much time to clearing my

00:00:48,420 --> 00:00:54,989
throat and I apologize ahead of time all

00:00:52,469 --> 00:00:58,800
right so my goal for today is to make

00:00:54,989 --> 00:01:01,199
your life easier easier by doing less I

00:00:58,800 --> 00:01:04,140
want you to stop worrying about a lot of

00:01:01,199 --> 00:01:06,840
things in your applications to be

00:01:04,140 --> 00:01:08,970
precise so in a way this talk is less

00:01:06,840 --> 00:01:12,210
about teaching you a fundamentally new

00:01:08,970 --> 00:01:13,950
staff and more about convincing you to

00:01:12,210 --> 00:01:15,330
stop doing things and maybe dropping

00:01:13,950 --> 00:01:17,009
some bad habits

00:01:15,330 --> 00:01:20,070
so I want you to stop worrying about

00:01:17,009 --> 00:01:21,990
very logs go to and how they are

00:01:20,070 --> 00:01:24,650
processed where your configuration is

00:01:21,990 --> 00:01:27,479
coming from and how its structured and

00:01:24,650 --> 00:01:31,530
most importantly where your application

00:01:27,479 --> 00:01:33,900
is running and how it got there instead

00:01:31,530 --> 00:01:37,920
I want you to start thinking of how to

00:01:33,900 --> 00:01:40,950
make you application nicer to play with

00:01:37,920 --> 00:01:44,220
others because don't ask they don't

00:01:40,950 --> 00:01:46,259
vanish someone still has to do that but

00:01:44,220 --> 00:01:48,509
if your application stops being a Python

00:01:46,259 --> 00:01:51,240
Django application that serves cat

00:01:48,509 --> 00:01:52,890
pictures and starts being a universal

00:01:51,240 --> 00:01:56,369
building block with a consistent

00:01:52,890 --> 00:01:59,610
interface others can do that work so you

00:01:56,369 --> 00:02:01,649
can outsource complexity that is not an

00:01:59,610 --> 00:02:04,229
inherent part of the value of your

00:02:01,649 --> 00:02:07,200
application so we are going to create a

00:02:04,229 --> 00:02:11,489
lot of s EPS someone else's problems

00:02:07,200 --> 00:02:12,400
tonight and as a side effect by the by

00:02:11,489 --> 00:02:14,590
the end you

00:02:12,400 --> 00:02:18,430
app will also be web-scale by accident

00:02:14,590 --> 00:02:20,260
which kind of nice so as with actual

00:02:18,430 --> 00:02:22,599
building blocks it doesn't really matter

00:02:20,260 --> 00:02:25,900
whether you'll be building dog houses or

00:02:22,599 --> 00:02:28,569
airports your application should look

00:02:25,900 --> 00:02:31,299
the same on your laptop and in some huge

00:02:28,569 --> 00:02:33,099
cluster that's spanning the world and a

00:02:31,299 --> 00:02:36,310
dramatically simplifies development

00:02:33,099 --> 00:02:38,920
testing operations scaling and moving to

00:02:36,310 --> 00:02:40,599
new platforms and platform agility is a

00:02:38,920 --> 00:02:43,030
bigger deal than you may think right now

00:02:40,599 --> 00:02:45,549
because every infrastructure evolves

00:02:43,030 --> 00:02:47,319
unless it goes extinct so yes you will

00:02:45,549 --> 00:02:50,379
have to touch that CentOS five server

00:02:47,319 --> 00:02:51,609
eventually and even if you're super

00:02:50,379 --> 00:02:54,400
happy with your state-of-the-art

00:02:51,609 --> 00:02:56,379
kubernetes cluster today I'm gonna bet

00:02:54,400 --> 00:02:58,420
good money that in five years there's

00:02:56,379 --> 00:03:02,709
gonna be a good business model to move

00:02:58,420 --> 00:03:04,989
you off this legacy tech debt so how do

00:03:02,709 --> 00:03:06,879
we get there and what exactly do we gain

00:03:04,989 --> 00:03:09,519
so I'm gonna show you with a very very

00:03:06,879 --> 00:03:10,900
simple web application but before you

00:03:09,519 --> 00:03:14,139
start leaving the room this talk is not

00:03:10,900 --> 00:03:15,489
specific to vet applications at all it's

00:03:14,139 --> 00:03:18,370
just the easiest to talk about and I

00:03:15,489 --> 00:03:19,629
will point out like differences and how

00:03:18,370 --> 00:03:22,060
it relates to other kinds of

00:03:19,629 --> 00:03:24,940
applications and what I'm talking meta

00:03:22,060 --> 00:03:27,340
as with every of my talks I have

00:03:24,940 --> 00:03:29,980
compiled a page with all the links and

00:03:27,340 --> 00:03:32,859
concepts and my slides I'll be talking

00:03:29,980 --> 00:03:36,310
about so you can study it at your own

00:03:32,859 --> 00:03:39,760
pace and can keep your notes slide but

00:03:36,310 --> 00:03:41,889
now behold our application this is a

00:03:39,760 --> 00:03:43,900
very exciting pyramid view as you may

00:03:41,889 --> 00:03:45,340
have noticed by the imports and the only

00:03:43,900 --> 00:03:47,530
reason this slide exists is so I don't

00:03:45,340 --> 00:03:49,870
have to tell you to imagine a simple

00:03:47,530 --> 00:03:52,120
LabVIEW so this is it we have some

00:03:49,870 --> 00:03:54,430
something concrete to talk about and now

00:03:52,120 --> 00:03:57,069
if you want to expose it to the world to

00:03:54,430 --> 00:03:59,500
greet it we need to create a whisky

00:03:57,069 --> 00:04:02,290
application how will you do that depends

00:03:59,500 --> 00:04:05,440
on your framework this is how it looks

00:04:02,290 --> 00:04:08,650
in pyramid and it usually some kind of

00:04:05,440 --> 00:04:10,599
function that in the end returns a

00:04:08,650 --> 00:04:12,940
whisky app for you and that can be

00:04:10,599 --> 00:04:15,220
passed into a whisky container or into a

00:04:12,940 --> 00:04:18,010
test framework that allows you to drive

00:04:15,220 --> 00:04:20,979
fake requests against your application

00:04:18,010 --> 00:04:24,010
now this initialization code is

00:04:20,979 --> 00:04:26,320
notoriously hard to test so the goal

00:04:24,010 --> 00:04:29,590
should be to keep this code as simple we

00:04:26,320 --> 00:04:33,010
as few branches between tests death and

00:04:29,590 --> 00:04:35,500
prod as possible and the irony is that

00:04:33,010 --> 00:04:37,570
to be truly operations and deployment

00:04:35,500 --> 00:04:40,630
friendly this code also has to be super

00:04:37,570 --> 00:04:42,850
robust so for example if you're starting

00:04:40,630 --> 00:04:44,860
up and you need a resource and resources

00:04:42,850 --> 00:04:47,940
missing you should try again with the

00:04:44,860 --> 00:04:50,740
back off and not say deadlock because

00:04:47,940 --> 00:04:54,160
making operations kindergarten your app

00:04:50,740 --> 00:04:57,340
into production is the shortest way on

00:04:54,160 --> 00:05:00,190
their naughty list that's not not the

00:04:57,340 --> 00:05:02,140
place you want to be now these

00:05:00,190 --> 00:05:04,300
principles of course not specific to web

00:05:02,140 --> 00:05:06,400
or whiskey at all so you always want to

00:05:04,300 --> 00:05:09,790
isolate the creation of the objects of

00:05:06,400 --> 00:05:11,560
your application somewhere so you wire

00:05:09,790 --> 00:05:13,900
it up based on information that is

00:05:11,560 --> 00:05:15,340
coming from the outside such that the

00:05:13,900 --> 00:05:16,750
rest of your application can become just

00:05:15,340 --> 00:05:19,320
a bunch of classes and functions that

00:05:16,750 --> 00:05:21,970
you pass that you pass in normal

00:05:19,320 --> 00:05:23,290
arguments and that makes them easy to

00:05:21,970 --> 00:05:26,080
test then you then you can start doing

00:05:23,290 --> 00:05:29,040
unit tests now in pyramid it works like

00:05:26,080 --> 00:05:32,680
this you build a configuration object

00:05:29,040 --> 00:05:34,720
you add your routes you add middlewares

00:05:32,680 --> 00:05:36,970
which I have omitted here and by the end

00:05:34,720 --> 00:05:39,070
you call make whiskey average then just

00:05:36,970 --> 00:05:41,860
takes all this information and creates a

00:05:39,070 --> 00:05:46,180
riskier now escape is usually just just

00:05:41,860 --> 00:05:48,010
a callable now at this point we can use

00:05:46,180 --> 00:05:51,520
the whiskey server I'm gonna use unicorn

00:05:48,010 --> 00:05:53,140
because it's quite popular and do

00:05:51,520 --> 00:05:54,670
unicorn also allows us to call a

00:05:53,140 --> 00:05:56,860
function and a definition which we will

00:05:54,670 --> 00:06:01,330
do here for simplicity and it comes up

00:05:56,860 --> 00:06:06,430
and we can curl it and we even get a log

00:06:01,330 --> 00:06:08,770
entry in a PG format now now it the

00:06:06,430 --> 00:06:12,730
first interesting part comes and if you

00:06:08,770 --> 00:06:14,500
want to deploy this to a server you

00:06:12,730 --> 00:06:17,380
could just take the command line as it

00:06:14,500 --> 00:06:19,510
is but it's the first first thing you

00:06:17,380 --> 00:06:21,490
should be a very off because then the

00:06:19,510 --> 00:06:23,920
choice of your whiskey container and the

00:06:21,490 --> 00:06:27,070
options you're passing into it bleed

00:06:23,920 --> 00:06:30,370
into the configuration of the process

00:06:27,070 --> 00:06:32,440
manager or of your cluster manager so if

00:06:30,370 --> 00:06:33,880
you at some point want to change your

00:06:32,440 --> 00:06:37,330
whiskey server

00:06:33,880 --> 00:06:39,790
say to you micro whiskey or to mod

00:06:37,330 --> 00:06:43,450
whiskey you have to

00:06:39,790 --> 00:06:45,970
change both of once because I in order

00:06:43,450 --> 00:06:47,980
to use that server you have to have it

00:06:45,970 --> 00:06:49,720
as part of your application so this is

00:06:47,980 --> 00:06:52,030
not great you can run into problems very

00:06:49,720 --> 00:06:54,400
fast and once you have to coordinate

00:06:52,030 --> 00:06:57,250
multiple parts once it's it leads to

00:06:54,400 --> 00:06:59,500
problems so let's zoom out what we want

00:06:57,250 --> 00:07:02,440
here is a building block we want a

00:06:59,500 --> 00:07:05,230
standardized way to start application no

00:07:02,440 --> 00:07:08,980
matter what technology is inside and it

00:07:05,230 --> 00:07:12,490
could be C++ for all we know so how do

00:07:08,980 --> 00:07:17,260
we do that just like our ancestors in a

00:07:12,490 --> 00:07:19,630
1970s we write a shell script and this

00:07:17,260 --> 00:07:22,630
shell script is checked in along with

00:07:19,630 --> 00:07:24,580
our application so it means that the way

00:07:22,630 --> 00:07:26,500
your application is started and the

00:07:24,580 --> 00:07:29,590
dependencies that can be used within the

00:07:26,500 --> 00:07:33,850
script a part of the same repository so

00:07:29,590 --> 00:07:35,890
one repo and a single point of truth you

00:07:33,850 --> 00:07:37,870
can call it whatever you want in doc

00:07:35,890 --> 00:07:40,180
Roland it's common to call it doctor -

00:07:37,870 --> 00:07:42,310
entry point dot Sh I'm just gonna call

00:07:40,180 --> 00:07:43,450
it run app dot SH because it's literally

00:07:42,310 --> 00:07:46,120
what it does and it's short for my

00:07:43,450 --> 00:07:49,120
slides now this exact is very important

00:07:46,120 --> 00:07:51,220
because it makes the shell process be

00:07:49,120 --> 00:07:53,440
replaced with your own process which is

00:07:51,220 --> 00:07:57,460
essential if you want to receive signals

00:07:53,440 --> 00:08:00,010
which you do and this will redirect your

00:07:57,460 --> 00:08:02,740
your standard error output to standard

00:08:00,010 --> 00:08:05,770
out such that you have only one output

00:08:02,740 --> 00:08:07,900
stream which is easier to handle now

00:08:05,770 --> 00:08:09,940
this way your shell script becomes kind

00:08:07,900 --> 00:08:12,820
of an adapter between your application

00:08:09,940 --> 00:08:17,380
and your environment and this works in

00:08:12,820 --> 00:08:19,330
system D in docker or improv Isles which

00:08:17,380 --> 00:08:23,140
you can use with applications like for

00:08:19,330 --> 00:08:25,390
man for NGO or honcho and it's quite

00:08:23,140 --> 00:08:28,360
popular with platform as a service

00:08:25,390 --> 00:08:31,930
providers like Heroku now what do we

00:08:28,360 --> 00:08:33,669
have you have all black box which is a

00:08:31,930 --> 00:08:37,440
building block this is very easy to run

00:08:33,669 --> 00:08:40,599
just run a shell script and it serves on

00:08:37,440 --> 00:08:44,020
localhost and it locks to standard out

00:08:40,599 --> 00:08:46,540
so the last part is awesome that part we

00:08:44,020 --> 00:08:49,360
will keep just like that because this

00:08:46,540 --> 00:08:50,890
means that in development it goes to

00:08:49,360 --> 00:08:52,990
your terminal where you can read it if

00:08:50,890 --> 00:08:55,510
you use system D it gets

00:08:52,990 --> 00:08:57,339
directed to syslog which gives you 40

00:08:55,510 --> 00:08:59,440
years worth of experience of handling

00:08:57,339 --> 00:09:01,870
locks so no reason for you to read

00:08:59,440 --> 00:09:04,330
yourself and if you use a cluster

00:09:01,870 --> 00:09:07,000
manager like kubernetes or Nomad they

00:09:04,330 --> 00:09:09,339
usually have a first-class support for

00:09:07,000 --> 00:09:11,890
streaming those logs both to your

00:09:09,339 --> 00:09:14,770
terminal over the network or to log

00:09:11,890 --> 00:09:16,930
aggregation systems like log stash so

00:09:14,770 --> 00:09:21,520
please do not try to log two files

00:09:16,930 --> 00:09:23,709
anymore nowadays and god forbid do not

00:09:21,520 --> 00:09:25,690
try to rotate them yourself because with

00:09:23,709 --> 00:09:27,220
you just introduce headaches for people

00:09:25,690 --> 00:09:29,740
who need to run it or maybe change

00:09:27,220 --> 00:09:32,350
infrastructure and that's kind of

00:09:29,740 --> 00:09:33,820
terrible so I think it's fair to argue

00:09:32,350 --> 00:09:35,770
that this application is clear

00:09:33,820 --> 00:09:37,720
interfaces we know what's coming in in

00:09:35,770 --> 00:09:41,890
this case almost nothing and we know

00:09:37,720 --> 00:09:43,990
what's coming out now the goal of the

00:09:41,890 --> 00:09:46,330
next steps is going to be to add more

00:09:43,990 --> 00:09:48,760
features to make it more useful but

00:09:46,330 --> 00:09:52,149
still stay as close as possible to this

00:09:48,760 --> 00:09:54,670
ideal and first we will tackle the most

00:09:52,149 --> 00:09:57,670
glaring problem which is exposition

00:09:54,670 --> 00:10:00,970
those listening a local host has like

00:09:57,670 --> 00:10:02,800
two useful use cases first of all if you

00:10:00,970 --> 00:10:06,940
literally just want to communicate over

00:10:02,800 --> 00:10:08,320
localhost and secondly if you have proxy

00:10:06,940 --> 00:10:10,450
in front of it running on the same house

00:10:08,320 --> 00:10:12,399
like nginx which are valid use cases but

00:10:10,450 --> 00:10:14,500
we want to be more flexible so let's

00:10:12,399 --> 00:10:17,170
let's share those shackles and talk

00:10:14,500 --> 00:10:19,529
about configuration and here it's

00:10:17,170 --> 00:10:22,120
important to note a difference between

00:10:19,529 --> 00:10:24,130
the configuration of your applications

00:10:22,120 --> 00:10:27,550
and the configuration of general purpose

00:10:24,130 --> 00:10:30,160
software like apache or postfix because

00:10:27,550 --> 00:10:32,050
general purpose comes with general

00:10:30,160 --> 00:10:34,690
purpose applications need to be flexible

00:10:32,050 --> 00:10:36,130
and make everyone happy your absent need

00:10:34,690 --> 00:10:38,529
only to make you happy so you only have

00:10:36,130 --> 00:10:41,649
to make configurable what matters to you

00:10:38,529 --> 00:10:44,020
so you have to ask yourself what varies

00:10:41,649 --> 00:10:47,140
what varies between deployments what

00:10:44,020 --> 00:10:49,600
varies between environments and it turns

00:10:47,140 --> 00:10:51,880
out it's very very little even for

00:10:49,600 --> 00:10:53,800
complex applications so things that do

00:10:51,880 --> 00:10:56,529
not belong into configuration files are

00:10:53,800 --> 00:11:00,850
things like your your HTTP routes your

00:10:56,529 --> 00:11:03,100
middleware or logging let's talk about

00:11:00,850 --> 00:11:04,839
logging for a moment now just two things

00:11:03,100 --> 00:11:06,670
about logging that you need to configure

00:11:04,839 --> 00:11:08,350
essentially the log level

00:11:06,670 --> 00:11:10,440
because you want probably more vergis

00:11:08,350 --> 00:11:14,050
locks on your terminal then you have

00:11:10,440 --> 00:11:16,300
then you have in production and the log

00:11:14,050 --> 00:11:17,980
format and again in a lock for what

00:11:16,300 --> 00:11:20,080
format there are two things you care

00:11:17,980 --> 00:11:23,380
about you want to have a human readable

00:11:20,080 --> 00:11:26,110
version in development and an easily

00:11:23,380 --> 00:11:28,720
possible version something like key

00:11:26,110 --> 00:11:31,150
value pairs or JSON in production that's

00:11:28,720 --> 00:11:33,010
all so what you do is just you take two

00:11:31,150 --> 00:11:35,350
configurations you check them in with

00:11:33,010 --> 00:11:39,370
your application and then switch between

00:11:35,350 --> 00:11:42,070
them just via some configuration we will

00:11:39,370 --> 00:11:44,470
talk about now this gives you the

00:11:42,070 --> 00:11:47,020
possibility to test those configurations

00:11:44,470 --> 00:11:49,630
with your application and you do not

00:11:47,020 --> 00:11:54,820
have to track a different repo that

00:11:49,630 --> 00:11:56,500
carries your configuration so what

00:11:54,820 --> 00:11:58,330
doesn't belong in the configuration of

00:11:56,500 --> 00:11:59,650
course is exposition so the address and

00:11:58,330 --> 00:12:02,020
the port you're gonna listen on or

00:11:59,650 --> 00:12:02,650
external resources like api's or

00:12:02,020 --> 00:12:06,400
databases

00:12:02,650 --> 00:12:08,830
so once you've either identified the few

00:12:06,400 --> 00:12:11,260
options how do you pass them into your

00:12:08,830 --> 00:12:13,960
application so of course you could put

00:12:11,260 --> 00:12:16,060
them into an any file which is well

00:12:13,960 --> 00:12:20,640
supported the standard library has a

00:12:16,060 --> 00:12:22,900
config parser so that's really easy but

00:12:20,640 --> 00:12:25,510
the problem here is that some of those

00:12:22,900 --> 00:12:27,910
options need to go into G unicorn and

00:12:25,510 --> 00:12:30,430
some of them options need to go into

00:12:27,910 --> 00:12:32,530
application so you could start parsing

00:12:30,430 --> 00:12:34,240
any files in your bash script but I

00:12:32,530 --> 00:12:37,450
don't think that's a good thing

00:12:34,240 --> 00:12:40,750
so if only there were a simple reliable

00:12:37,450 --> 00:12:44,400
and portable way to to pass key value

00:12:40,750 --> 00:12:47,380
pairs between processes well there is

00:12:44,400 --> 00:12:49,480
its environment variables and this

00:12:47,380 --> 00:12:52,870
doesn't only work with our simplistic

00:12:49,480 --> 00:12:54,340
problem injecting files into certain

00:12:52,870 --> 00:12:56,650
environments can be hard or even

00:12:54,340 --> 00:12:58,750
impossible and on the hunter head

00:12:56,650 --> 00:13:01,780
environment variables are universally

00:12:58,750 --> 00:13:06,010
supported so it doesn't matter whether

00:13:01,780 --> 00:13:09,220
process managers like system D docker or

00:13:06,010 --> 00:13:13,030
every cluster manager Under the Sun and

00:13:09,220 --> 00:13:15,160
of course there's a swath of tools for

00:13:13,030 --> 00:13:17,290
handling environment variables - like

00:13:15,160 --> 00:13:19,060
when you want to create them dear and

00:13:17,290 --> 00:13:20,529
it's a nice tool that will set

00:13:19,060 --> 00:13:23,879
environment variables when you end

00:13:20,529 --> 00:13:27,310
directory service discovery tools like

00:13:23,879 --> 00:13:29,860
console or HDD i have usually some kind

00:13:27,310 --> 00:13:31,660
of tools that will reach those values

00:13:29,860 --> 00:13:34,660
out of the services and put them into

00:13:31,660 --> 00:13:37,059
environment variables if you want to

00:13:34,660 --> 00:13:39,639
consume them every programming language

00:13:37,059 --> 00:13:41,589
Under the Sun has a way to access

00:13:39,639 --> 00:13:45,040
environment variables for Python that

00:13:41,589 --> 00:13:47,949
would be OS tone and viral and if you

00:13:45,040 --> 00:13:50,069
really need or really want a file that's

00:13:47,949 --> 00:13:52,569
also not a problem so the oldest

00:13:50,069 --> 00:13:55,149
solution to that is Ian V sub C which is

00:13:52,569 --> 00:13:59,079
part of the gets text project which is

00:13:55,149 --> 00:14:00,939
for translating applications and it

00:13:59,079 --> 00:14:04,089
allows you to do simple templating based

00:14:00,939 --> 00:14:06,819
on environment variables there's also

00:14:04,089 --> 00:14:09,790
our country which supports all kinds of

00:14:06,819 --> 00:14:12,160
backends including Redis and console

00:14:09,790 --> 00:14:14,800
template which is the official client

00:14:12,160 --> 00:14:16,480
for console if you're using that so I

00:14:14,800 --> 00:14:18,610
would like to stress here that moving

00:14:16,480 --> 00:14:20,589
from environment variables to files is

00:14:18,610 --> 00:14:22,540
not a problem there's a lot of tools

00:14:20,589 --> 00:14:25,199
that will help you with that and it's

00:14:22,540 --> 00:14:27,069
really nice to check in the

00:14:25,199 --> 00:14:28,839
configuration templates video

00:14:27,069 --> 00:14:31,899
application for your testing purposes

00:14:28,839 --> 00:14:39,180
and just inject the files did very into

00:14:31,899 --> 00:14:42,689
the application so let's talk about our

00:14:39,180 --> 00:14:45,519
hosts in our port so it turns out that

00:14:42,689 --> 00:14:47,680
people needed this before and it's so

00:14:45,519 --> 00:14:49,079
common there are even standard variables

00:14:47,680 --> 00:14:54,399
for there which are called appropriately

00:14:49,079 --> 00:14:55,870
host and port so we didn't have to

00:14:54,399 --> 00:14:58,089
change anything to make this work which

00:14:55,870 --> 00:15:01,230
is kind of nice conventions are great so

00:14:58,089 --> 00:15:03,790
if you're writing a generic Network

00:15:01,230 --> 00:15:06,339
application like I do all the time I

00:15:03,790 --> 00:15:08,889
also support these variable names

00:15:06,339 --> 00:15:11,110
because it's really nice and a format

00:15:08,889 --> 00:15:12,730
should for men also will enumerate ports

00:15:11,110 --> 00:15:14,319
for you so if you define multiple

00:15:12,730 --> 00:15:16,389
applications and try to run them each of

00:15:14,319 --> 00:15:17,889
them will get a new port so they don't

00:15:16,389 --> 00:15:20,709
clash and you don't have to manage them

00:15:17,889 --> 00:15:22,600
by hand so conventions are great try to

00:15:20,709 --> 00:15:24,730
follow them

00:15:22,600 --> 00:15:27,699
the lock level is also easy enough you

00:15:24,730 --> 00:15:31,230
can you just do a little bit of get a

00:15:27,699 --> 00:15:33,970
true magic on the login module however

00:15:31,230 --> 00:15:36,970
fussing around with OS donor

00:15:33,970 --> 00:15:38,319
Myron is kind of tedious and ugly and if

00:15:36,970 --> 00:15:39,819
you're not careful your sprinkles

00:15:38,319 --> 00:15:43,509
superglobal state all over your

00:15:39,819 --> 00:15:45,639
application and it wouldn't be me if I

00:15:43,509 --> 00:15:48,550
gave a talk here at PyCon without

00:15:45,639 --> 00:15:52,480
plugging another project of mine so let

00:15:48,550 --> 00:15:54,759
me introduce you to environment I know

00:15:52,480 --> 00:15:56,649
there are simple projects on pi PI but

00:15:54,759 --> 00:15:59,230
at least when I started working on it

00:15:56,649 --> 00:16:01,600
none of them does or did what any viral

00:15:59,230 --> 00:16:03,550
config does and it is declaratively

00:16:01,600 --> 00:16:08,050
describe the configuration you want to

00:16:03,550 --> 00:16:11,079
get including nested classes and when

00:16:08,050 --> 00:16:13,120
you try to load this configuration those

00:16:11,079 --> 00:16:15,610
names and the prefix are just

00:16:13,120 --> 00:16:19,329
concatenated using underscores and

00:16:15,610 --> 00:16:21,670
loaded from the environment and you just

00:16:19,329 --> 00:16:24,069
load you can access them as a normal

00:16:21,670 --> 00:16:27,790
nested class the law of Demeter be

00:16:24,069 --> 00:16:31,089
damned so since it's best based on

00:16:27,790 --> 00:16:32,889
adders and I have new stickers by the

00:16:31,089 --> 00:16:36,250
way so if you wants other stickers come

00:16:32,889 --> 00:16:37,990
and talk to me you get a lot of stuff of

00:16:36,250 --> 00:16:40,389
free for example default values

00:16:37,990 --> 00:16:41,589
validators or converters which are

00:16:40,389 --> 00:16:44,829
really nice if you want for example

00:16:41,589 --> 00:16:47,889
convert integers into into integers or

00:16:44,829 --> 00:16:50,290
if you want to use them in um to limit

00:16:47,889 --> 00:16:53,230
the value space of a certain

00:16:50,290 --> 00:16:55,240
configuration option now I like to put

00:16:53,230 --> 00:16:58,300
this declaration into a file called a

00:16:55,240 --> 00:17:00,430
config no pipe but the declaration

00:16:58,300 --> 00:17:02,920
itself does not load it such side

00:17:00,430 --> 00:17:05,350
effects are really are not great so

00:17:02,920 --> 00:17:07,059
where do you reload it we could do it in

00:17:05,350 --> 00:17:09,130
the make app function I showed you

00:17:07,059 --> 00:17:11,620
before but it's not great either because

00:17:09,130 --> 00:17:14,289
make AB returns a whiskey app which I

00:17:11,620 --> 00:17:18,159
like to use in testing and having to set

00:17:14,289 --> 00:17:21,699
up an environment to run tests is not

00:17:18,159 --> 00:17:23,980
great so instead let's create a new file

00:17:21,699 --> 00:17:26,439
this does all the dirty work and then

00:17:23,980 --> 00:17:30,280
just pass an instance of app config into

00:17:26,439 --> 00:17:31,990
your make app function and I like to

00:17:30,280 --> 00:17:35,260
call it whiskey or pie and I've seen

00:17:31,990 --> 00:17:37,600
others call it like that too and this is

00:17:35,260 --> 00:17:39,370
how you load the configuration and now

00:17:37,600 --> 00:17:41,320
this module just became the ultimate

00:17:39,370 --> 00:17:44,830
interface between your application and

00:17:41,320 --> 00:17:47,770
the environment and make app on the

00:17:44,830 --> 00:17:50,230
other hand only deals with a

00:17:47,770 --> 00:17:53,230
well known Python class so you have full

00:17:50,230 --> 00:17:55,270
control over the instantiation and it's

00:17:53,230 --> 00:17:57,360
really easy to create whisky apps that

00:17:55,270 --> 00:18:00,670
have certain properties for your tests

00:17:57,360 --> 00:18:02,620
and this allows you to have the lowest

00:18:00,670 --> 00:18:04,680
common denominator on the outside which

00:18:02,620 --> 00:18:07,450
is environment variables key value and

00:18:04,680 --> 00:18:09,640
inside just deal with a validated

00:18:07,450 --> 00:18:11,500
instance of structured data inside your

00:18:09,640 --> 00:18:14,140
application which is really useful and

00:18:11,500 --> 00:18:18,340
nice and again this is not specific to

00:18:14,140 --> 00:18:20,260
whisky or to the web so you always want

00:18:18,340 --> 00:18:22,210
to have one very limited interface that

00:18:20,260 --> 00:18:24,580
interacts with environment so for other

00:18:22,210 --> 00:18:29,770
cases it could be a CLI entry point for

00:18:24,580 --> 00:18:31,390
example now you may have noticed that we

00:18:29,770 --> 00:18:34,630
now put a whisky up into a global

00:18:31,390 --> 00:18:37,750
variable which mainly is because we have

00:18:34,630 --> 00:18:39,520
to pass an an argument and also this is

00:18:37,750 --> 00:18:42,220
more flexible because not all whisky

00:18:39,520 --> 00:18:44,020
containers allow for calling functions

00:18:42,220 --> 00:18:46,960
in the definition so this just works

00:18:44,020 --> 00:18:49,690
with everything and calling it an

00:18:46,960 --> 00:18:51,850
application is another convention at

00:18:49,690 --> 00:18:54,910
this convention allows us to even

00:18:51,850 --> 00:18:58,900
shorten to shorten this line and just

00:18:54,910 --> 00:19:00,700
pass the name the name of the module and

00:18:58,900 --> 00:19:05,260
I forgot to fix it it should be a sample

00:19:00,700 --> 00:19:06,970
of whisky sorry now in all the talk

00:19:05,260 --> 00:19:09,610
about environment variables there's one

00:19:06,970 --> 00:19:11,200
thing I left conspicious layout and it

00:19:09,610 --> 00:19:14,650
is the time as shown again in the game

00:19:11,200 --> 00:19:16,900
that certain things should not be put

00:19:14,650 --> 00:19:19,690
into environment variables because some

00:19:16,900 --> 00:19:21,580
things you want to gently whisper into

00:19:19,690 --> 00:19:23,470
the ear of your application and not make

00:19:21,580 --> 00:19:25,750
it global through your application

00:19:23,470 --> 00:19:30,040
process tree I of course I'm talking

00:19:25,750 --> 00:19:31,240
about secrets passwords tokens and there

00:19:30,040 --> 00:19:34,030
are so many ways that environment

00:19:31,240 --> 00:19:36,100
variables can leak it happened before it

00:19:34,030 --> 00:19:38,650
happened to very smart people to very

00:19:36,100 --> 00:19:40,030
big companies so it will totally happen

00:19:38,650 --> 00:19:42,280
to you too and maybe it's just because

00:19:40,030 --> 00:19:43,360
of some very small package that's

00:19:42,280 --> 00:19:45,250
supposed to do something very different

00:19:43,360 --> 00:19:48,460
and then it just dumps your environment

00:19:45,250 --> 00:19:51,970
somewhere so let me be very clear here

00:19:48,460 --> 00:19:53,620
um I really want you to stop putting

00:19:51,970 --> 00:19:56,740
sensitive data into environment

00:19:53,620 --> 00:19:59,080
variables and I would you to ask you to

00:19:56,740 --> 00:20:01,090
ignore the 12 factor at manifesto at

00:19:59,080 --> 00:20:04,150
this point I think they are really wrong

00:20:01,090 --> 00:20:06,040
this and I think they're gonna fix it

00:20:04,150 --> 00:20:09,280
once Haruka grows proper support for

00:20:06,040 --> 00:20:11,070
secrets but it's just my opinion now

00:20:09,280 --> 00:20:14,020
this is not my private opinion this is

00:20:11,070 --> 00:20:15,670
quite common now the problem now is that

00:20:14,020 --> 00:20:18,430
it gets a bit hairy because the

00:20:15,670 --> 00:20:20,920
solutions are platform specific each

00:20:18,430 --> 00:20:25,240
platform you may be deploying to has its

00:20:20,920 --> 00:20:28,300
best way and you really should use the

00:20:25,240 --> 00:20:29,920
best thing for your platform and it's

00:20:28,300 --> 00:20:31,630
all I can tell you it's I leave it by

00:20:29,920 --> 00:20:33,850
that just giving you a general

00:20:31,630 --> 00:20:36,760
introduction into the concepts of this

00:20:33,850 --> 00:20:38,530
it's a talk by itself but lucky for you

00:20:36,760 --> 00:20:40,960
this talk doesn't exist my friend nor

00:20:38,530 --> 00:20:42,760
comes from its gave it in 2016 and I

00:20:40,960 --> 00:20:45,520
willing it in a talk and for

00:20:42,760 --> 00:20:47,650
completeness we run volt which is nice

00:20:45,520 --> 00:20:52,180
because it's vendor independent and open

00:20:47,650 --> 00:20:55,210
source so you can use it in any case no

00:20:52,180 --> 00:20:56,920
matter what platform you use if you care

00:20:55,210 --> 00:21:00,400
about secrets and what what to learn

00:20:56,920 --> 00:21:02,320
more my other friend man who has

00:21:00,400 --> 00:21:04,510
organized is organizing an open space

00:21:02,320 --> 00:21:08,050
which is right after his talk in room 10

00:21:04,510 --> 00:21:11,950
and we will talk about secrets and share

00:21:08,050 --> 00:21:15,730
experiences now since we are nomads and

00:21:11,950 --> 00:21:18,700
we are on the vault I like to use the

00:21:15,730 --> 00:21:21,730
built-in templating Capitol abilities of

00:21:18,700 --> 00:21:24,610
it which means that we render our

00:21:21,730 --> 00:21:27,340
secrets into a special special purpose

00:21:24,610 --> 00:21:30,160
file system called slash secret which is

00:21:27,340 --> 00:21:34,420
not super great but it's a decent trade

00:21:30,160 --> 00:21:37,150
off it takes a lot more fails to to leak

00:21:34,420 --> 00:21:39,280
a file than an environment variable of

00:21:37,150 --> 00:21:42,040
course the safest way is platform

00:21:39,280 --> 00:21:44,110
dependent and it's also necessary for

00:21:42,040 --> 00:21:45,880
dynamic secret so for example if you do

00:21:44,110 --> 00:21:48,040
something only occasionally and the

00:21:45,880 --> 00:21:51,030
secret may change you may want to check

00:21:48,040 --> 00:21:53,800
your secret store before using a secret

00:21:51,030 --> 00:21:55,390
so what do we do in programming where

00:21:53,800 --> 00:21:59,710
you won't hide away implementation

00:21:55,390 --> 00:22:01,540
details we write a facade and so I'm

00:21:59,710 --> 00:22:04,660
gonna suggest that you've wrapped your

00:22:01,540 --> 00:22:08,560
secrets client with your own class that

00:22:04,660 --> 00:22:10,090
will give you an interface and then you

00:22:08,560 --> 00:22:14,110
can choose if you love the secrets on

00:22:10,090 --> 00:22:14,650
Association or on use and if you choose

00:22:14,110 --> 00:22:19,330
which

00:22:14,650 --> 00:22:21,640
backends you just reimplemented and as

00:22:19,330 --> 00:22:24,220
long as the interface remains the same

00:22:21,640 --> 00:22:26,950
and of course it's also easy to replace

00:22:24,220 --> 00:22:29,170
with our test data you just implement a

00:22:26,950 --> 00:22:32,020
fake secret it returns a static string

00:22:29,170 --> 00:22:33,430
done on this slide I would like to point

00:22:32,020 --> 00:22:36,580
out that I really like to encode

00:22:33,430 --> 00:22:38,470
credentials as URLs a lot of libraries

00:22:36,580 --> 00:22:41,320
already support it so the radius client

00:22:38,470 --> 00:22:42,640
for example has a from URL method sequel

00:22:41,320 --> 00:22:44,920
alchemy does support it you can pass

00:22:42,640 --> 00:22:46,360
this right in to secure alchemy and

00:22:44,920 --> 00:22:47,590
there are extensions for Django that

00:22:46,360 --> 00:22:50,890
allow for that too I think it's from

00:22:47,590 --> 00:22:52,210
Kenneth rising so the nice thing about

00:22:50,890 --> 00:22:55,480
this is that it allows you to change

00:22:52,210 --> 00:22:57,580
more than one thing at once so if your

00:22:55,480 --> 00:22:59,170
credentials and your hosts are in two

00:22:57,580 --> 00:23:02,020
different spaces you again have to

00:22:59,170 --> 00:23:03,730
coordinate the changes otherwise you can

00:23:02,020 --> 00:23:06,700
run into a mismatch between credentials

00:23:03,730 --> 00:23:09,190
and the host which is not great there's

00:23:06,700 --> 00:23:11,559
a lot of libraries to parse URLs I

00:23:09,190 --> 00:23:14,530
personally like yarrow

00:23:11,559 --> 00:23:17,679
which is from the AIO HTTP project but

00:23:14,530 --> 00:23:18,130
there are other great ones too so where

00:23:17,679 --> 00:23:19,570
are we now

00:23:18,130 --> 00:23:22,540
we are still have a building block that

00:23:19,570 --> 00:23:23,950
is easy to run we inject essential

00:23:22,540 --> 00:23:25,900
information that varies across

00:23:23,950 --> 00:23:28,900
deployments and environments into the

00:23:25,900 --> 00:23:30,970
application secrets aren't as elegant

00:23:28,900 --> 00:23:34,570
but with some effort is good enough a

00:23:30,970 --> 00:23:36,630
little bit magics always nice and the

00:23:34,570 --> 00:23:41,440
exposed based on configuration and we

00:23:36,630 --> 00:23:42,940
log according to configuration now keen

00:23:41,440 --> 00:23:44,950
listeners may have noticed that with

00:23:42,940 --> 00:23:47,260
this approach is impossible to reload

00:23:44,950 --> 00:23:51,120
your configuration but I would like to

00:23:47,260 --> 00:23:53,650
reframe that and as a kind of upside

00:23:51,120 --> 00:23:55,450
because it forces you to rethink and if

00:23:53,650 --> 00:23:57,250
something changes infrequently enough

00:23:55,450 --> 00:23:59,679
like once a day how about you just

00:23:57,250 --> 00:24:03,130
redeploy your application and that leads

00:23:59,679 --> 00:24:05,230
to another thing that you start thinking

00:24:03,130 --> 00:24:08,290
about zero downtime deployments very

00:24:05,230 --> 00:24:11,230
early in the process and the earlier you

00:24:08,290 --> 00:24:14,740
start the more you gain because you

00:24:11,230 --> 00:24:17,850
develop development and deployment your

00:24:14,740 --> 00:24:20,110
flow will be easier from the start and

00:24:17,850 --> 00:24:23,140
the further you get into development

00:24:20,110 --> 00:24:25,750
things get harder it's just how it is

00:24:23,140 --> 00:24:28,450
and thanks to having a building block

00:24:25,750 --> 00:24:30,759
this is actually very simple to achieve

00:24:28,450 --> 00:24:33,129
so instead of one instance of your

00:24:30,759 --> 00:24:35,350
application you put two on the same host

00:24:33,129 --> 00:24:38,379
and then you put a local load balancer

00:24:35,350 --> 00:24:40,600
like nginx in front of it and which also

00:24:38,379 --> 00:24:43,749
has the nice down up side that your app

00:24:40,600 --> 00:24:46,149
will never ever have to listen on a

00:24:43,749 --> 00:24:49,119
privilege port so that's a bunch of

00:24:46,149 --> 00:24:51,909
problems that are right out and the only

00:24:49,119 --> 00:24:54,759
duty that falls on your app in this

00:24:51,909 --> 00:24:58,659
setup is that it has to be able to

00:24:54,759 --> 00:25:00,340
interpret interpret some metadata that

00:24:58,659 --> 00:25:03,730
is coming from the load balancer using

00:25:00,340 --> 00:25:05,489
HTTP headers so like the client IP and

00:25:03,730 --> 00:25:07,029
there is a veil supported header called

00:25:05,489 --> 00:25:10,059
x-forwarded-for

00:25:07,029 --> 00:25:11,710
and if you use that one you you probably

00:25:10,059 --> 00:25:12,519
don't have to do anything except telling

00:25:11,710 --> 00:25:14,710
your whiskey

00:25:12,519 --> 00:25:16,509
container to trust that load balancer

00:25:14,710 --> 00:25:18,909
there's another one which is called

00:25:16,509 --> 00:25:23,159
forwarded which is actually an RFC but

00:25:18,909 --> 00:25:24,970
it's sadly not very widely supported so

00:25:23,159 --> 00:25:27,029
for anything else

00:25:24,970 --> 00:25:29,529
so again this is not that web specific

00:25:27,029 --> 00:25:31,659
for example if you're running a proxy

00:25:29,529 --> 00:25:35,350
they have developed their own proxy

00:25:31,659 --> 00:25:37,779
protocol that allows you to pass the

00:25:35,350 --> 00:25:40,169
exact the exact same kind of information

00:25:37,779 --> 00:25:44,950
from a load balancer to their backends

00:25:40,169 --> 00:25:47,580
so we are ready for rolling updates this

00:25:44,950 --> 00:25:51,460
is great you can tell your load balancer

00:25:47,580 --> 00:25:52,889
to ignore one instance and now you can

00:25:51,460 --> 00:25:56,259
do whatever the hell you want

00:25:52,889 --> 00:25:59,350
you have no pressure whatsoever nobody

00:25:56,259 --> 00:26:02,859
will know that it's gone and you can

00:25:59,350 --> 00:26:05,499
shut down your app smoothly as you want

00:26:02,859 --> 00:26:07,029
and I would like to take this

00:26:05,499 --> 00:26:09,249
opportunity to preach a little bit I

00:26:07,029 --> 00:26:12,399
want you to make sure you handle sig

00:26:09,249 --> 00:26:14,259
term and it's not super common in Python

00:26:12,399 --> 00:26:15,879
world sadly so sig theorem is the

00:26:14,259 --> 00:26:18,639
standard signal sent by all process

00:26:15,879 --> 00:26:21,659
managers and yeah and our cluster

00:26:18,639 --> 00:26:24,940
managers and whatever and however

00:26:21,659 --> 00:26:28,330
unfortunately some or many frameworks in

00:26:24,940 --> 00:26:30,580
Python world just wrap the applications

00:26:28,330 --> 00:26:32,109
into a try accept keyboard interrupt

00:26:30,580 --> 00:26:34,509
block and call it a day

00:26:32,109 --> 00:26:37,599
this leads to the worst case that your

00:26:34,509 --> 00:26:39,960
application ignores a signal and your

00:26:37,599 --> 00:26:42,190
process manager waits for a timeout and

00:26:39,960 --> 00:26:43,600
then kills your advert sick

00:26:42,190 --> 00:26:47,830
which means you cannot do anything about

00:26:43,600 --> 00:26:50,980
it that means you get slowed our slow

00:26:47,830 --> 00:26:54,309
shutdowns without clean ups so that's

00:26:50,980 --> 00:26:55,779
kind of terrible but let's assume you

00:26:54,309 --> 00:26:58,090
did everything right your application is

00:26:55,779 --> 00:27:00,129
down and you can deploy new code however

00:26:58,090 --> 00:27:02,799
you want and you can change

00:27:00,129 --> 00:27:04,659
configuration however you want and once

00:27:02,799 --> 00:27:06,070
your application is ready you just put

00:27:04,659 --> 00:27:09,250
it back into rotation and it's like

00:27:06,070 --> 00:27:11,289
nothing happened and this way you leave

00:27:09,250 --> 00:27:13,570
the act and the complexity of reloading

00:27:11,289 --> 00:27:15,070
configuration the load balancer load

00:27:13,570 --> 00:27:17,320
balancer are really good at that it's

00:27:15,070 --> 00:27:19,809
like one of the two main tasks they have

00:27:17,320 --> 00:27:21,519
to to do really well and it's another

00:27:19,809 --> 00:27:23,590
task that just goes from your

00:27:21,519 --> 00:27:27,029
application to someone else who can do

00:27:23,590 --> 00:27:30,190
just better and there's another up side

00:27:27,029 --> 00:27:34,779
let's assume that you deploy does not

00:27:30,190 --> 00:27:37,029
quite as planned that happens so what do

00:27:34,779 --> 00:27:38,830
you do well you just don't add it back

00:27:37,029 --> 00:27:41,559
to the load balancer symbol and then you

00:27:38,830 --> 00:27:44,710
take your sweet time on fixing it so you

00:27:41,559 --> 00:27:46,840
maybe they were rollback I'll change

00:27:44,710 --> 00:27:50,139
your configuration back and even if you

00:27:46,840 --> 00:27:56,200
deploy if it gets pull on a prot server

00:27:50,139 --> 00:28:00,460
like an animal you still I know some of

00:27:56,200 --> 00:28:01,750
you do it you still get the benefits out

00:28:00,460 --> 00:28:03,580
of it so it doesn't matter whether you

00:28:01,750 --> 00:28:06,279
have a sophisticated cluster scheduler

00:28:03,580 --> 00:28:08,730
from the future or a poor intermittent

00:28:06,279 --> 00:28:11,320
SSH client everyone benefits from that

00:28:08,730 --> 00:28:14,769
and nobody will ever know that you

00:28:11,320 --> 00:28:16,659
screwed up your deployment now there's

00:28:14,769 --> 00:28:19,809
one thing I hand waved over when I said

00:28:16,659 --> 00:28:22,779
it's added to load balancing when ready

00:28:19,809 --> 00:28:26,080
but how does the load balancer know that

00:28:22,779 --> 00:28:28,659
you're ready and that's where we have to

00:28:26,080 --> 00:28:31,029
add another interface what we need here

00:28:28,659 --> 00:28:32,889
is introspection introspection is a very

00:28:31,029 --> 00:28:35,889
very powerful concept so I'm gonna talk

00:28:32,889 --> 00:28:38,440
a bit a bit so what is it about is that

00:28:35,889 --> 00:28:39,700
you just expose a web endpoint that

00:28:38,440 --> 00:28:41,710
allows you to reach into your

00:28:39,700 --> 00:28:44,139
application and it doesn't matter again

00:28:41,710 --> 00:28:46,870
what type of app you are developing here

00:28:44,139 --> 00:28:49,570
because thanks to the standard library

00:28:46,870 --> 00:28:51,279
everyone can expose an HTTP endpoint you

00:28:49,570 --> 00:28:54,220
don't even need an external dependency

00:28:51,279 --> 00:28:55,840
for that and for load balancing let's

00:28:54,220 --> 00:28:57,790
talk about readiness first

00:28:55,840 --> 00:28:59,860
the concept of readiness means that your

00:28:57,790 --> 00:29:02,140
app is ready to serve it's ready to do

00:28:59,860 --> 00:29:04,510
what it's supposed to do it's ready to

00:29:02,140 --> 00:29:07,510
be added back to the load balancer and

00:29:04,510 --> 00:29:09,790
for that you expose it endpoint then

00:29:07,510 --> 00:29:12,190
once when it gets a get request it will

00:29:09,790 --> 00:29:14,710
check all resources that it needs to

00:29:12,190 --> 00:29:17,230
serve your request and then returns

00:29:14,710 --> 00:29:22,290
either HTTP 200 when everything is fine

00:29:17,230 --> 00:29:24,400
or 500 if everything is not fine

00:29:22,290 --> 00:29:26,260
unfortunately there's no really clear

00:29:24,400 --> 00:29:29,470
standard how to call this endpoint so

00:29:26,260 --> 00:29:31,630
I'm gonna show you a few pool so some of

00:29:29,470 --> 00:29:34,390
you may have heard of Google's have Z

00:29:31,630 --> 00:29:36,520
and I've heard multiple legends about

00:29:34,390 --> 00:29:38,610
why there's a Z my favorite one is that

00:29:36,520 --> 00:29:42,190
it's Google great security by obscurity

00:29:38,610 --> 00:29:46,030
but it's probably just their standard to

00:29:42,190 --> 00:29:47,560
avoid clashes now Mozilla has something

00:29:46,030 --> 00:29:49,630
called docker flow which defines how

00:29:47,560 --> 00:29:51,960
they do their containers and they use

00:29:49,630 --> 00:29:56,410
danglers which is very pythonic and

00:29:51,960 --> 00:29:57,850
likable and finally some applications

00:29:56,410 --> 00:30:03,070
choose to take it loader right

00:29:57,850 --> 00:30:06,610
so Prometheus exposes a - ready and get

00:30:03,070 --> 00:30:09,430
lab exposes - readiness I personally

00:30:06,610 --> 00:30:12,520
really like the - namespace because it

00:30:09,430 --> 00:30:15,040
allows you to block this whole namespace

00:30:12,520 --> 00:30:16,690
in your edge load balancers so for

00:30:15,040 --> 00:30:18,820
example an H a proxy that's literally

00:30:16,690 --> 00:30:21,820
one line and you don't have to worry

00:30:18,820 --> 00:30:23,110
about it at all now the downside of this

00:30:21,820 --> 00:30:25,350
endpoint is that it's quite expensive

00:30:23,110 --> 00:30:27,880
because you're pinging external

00:30:25,350 --> 00:30:30,280
resources for example if it's a database

00:30:27,880 --> 00:30:32,020
you're going to send us select one to it

00:30:30,280 --> 00:30:33,970
so you do not want to do it like every

00:30:32,020 --> 00:30:35,950
second and sometimes you just want to

00:30:33,970 --> 00:30:38,650
know where your application specifically

00:30:35,950 --> 00:30:40,600
is healthy so that's when we start

00:30:38,650 --> 00:30:42,730
talking about liveness and liveness

00:30:40,600 --> 00:30:44,830
should be really cheap and just show

00:30:42,730 --> 00:30:47,350
that your app is alive and it reacts

00:30:44,830 --> 00:30:49,120
through a request and this information

00:30:47,350 --> 00:30:51,670
should be irrelevant for process and

00:30:49,120 --> 00:30:54,550
cluster managers because if this is

00:30:51,670 --> 00:30:55,870
failing it means that your app cannot

00:30:54,550 --> 00:30:58,710
help itself so it can be either

00:30:55,870 --> 00:31:01,660
deadlocked and needs to be restarted or

00:30:58,710 --> 00:31:04,000
a startup failed and in that case it

00:31:01,660 --> 00:31:06,610
needs to be rolled back and again there

00:31:04,000 --> 00:31:09,220
are multiple common names - healthy is

00:31:06,610 --> 00:31:10,019
used by promises which I personally find

00:31:09,220 --> 00:31:12,970
a bit

00:31:10,019 --> 00:31:14,679
unfortunate because it's as close as it

00:31:12,970 --> 00:31:20,679
can be to a healthy which is the

00:31:14,679 --> 00:31:23,919
opposite and yeah there's - liveness

00:31:20,679 --> 00:31:26,470
from gitlab and dander I'll be heartbeat

00:31:23,919 --> 00:31:27,669
from Mozilla there'll be starts for a

00:31:26,470 --> 00:31:29,919
load balancer which I find interesting

00:31:27,669 --> 00:31:31,570
so it seems like I haven't asked

00:31:29,919 --> 00:31:33,610
specifically but it seems like Mozilla

00:31:31,570 --> 00:31:35,559
is using liveness for the load balancers

00:31:33,610 --> 00:31:38,380
and I have to admit that I do that too

00:31:35,559 --> 00:31:40,179
the reason are multiple so first of all

00:31:38,380 --> 00:31:43,690
this is cheaper so I can just hammer the

00:31:40,179 --> 00:31:46,120
app as far as as fast as I want and also

00:31:43,690 --> 00:31:50,049
my resources like database prunes are

00:31:46,120 --> 00:31:52,929
usually lazy so my app just works very

00:31:50,049 --> 00:31:55,059
database is there or not so my - ready

00:31:52,929 --> 00:31:57,490
looks like this this is straight from

00:31:55,059 --> 00:32:00,159
production I just removed a few comments

00:31:57,490 --> 00:32:02,740
so no serialization just quick plain

00:32:00,159 --> 00:32:04,840
text remember permission remove

00:32:02,740 --> 00:32:07,809
permissions because we block this whole

00:32:04,840 --> 00:32:10,710
namespace anyway and we return an HTTP

00:32:07,809 --> 00:32:14,169
status 200 and then you add it to your

00:32:10,710 --> 00:32:16,929
to your route and you're ready for load

00:32:14,169 --> 00:32:18,549
balancing and my pool at this point me

00:32:16,929 --> 00:32:22,779
this is when this is routed it's fully

00:32:18,549 --> 00:32:25,299
initialized so if the database fails it

00:32:22,779 --> 00:32:26,740
becomes my task to serve errors and I

00:32:25,299 --> 00:32:30,730
can serve better errors and edge load

00:32:26,740 --> 00:32:38,620
balancer it's just gonna say I wrote 500

00:32:30,730 --> 00:32:40,570
- no no backends so um all that said I

00:32:38,620 --> 00:32:43,299
do have a traditional expensive endpoint

00:32:40,570 --> 00:32:44,950
but I used it for monitoring so with

00:32:43,299 --> 00:32:46,659
something like Nagios or Prometheus

00:32:44,950 --> 00:32:49,929
black box exported I just hit it every

00:32:46,659 --> 00:32:51,880
15 minutes and see how it behaves this

00:32:49,929 --> 00:32:53,980
is a trade-off everyone has to make for

00:32:51,880 --> 00:32:56,080
themselves one of the reasons I do it is

00:32:53,980 --> 00:32:58,330
because with Nomad and console you have

00:32:56,080 --> 00:32:59,919
only one endpoint so you have to choose

00:32:58,330 --> 00:33:01,929
whether you do the one or the other

00:32:59,919 --> 00:33:06,450
although you would you really want to

00:33:01,929 --> 00:33:09,220
have both but I just don't want my

00:33:06,450 --> 00:33:11,710
deployment be rolled back just because

00:33:09,220 --> 00:33:14,740
someone restarts the database and it's

00:33:11,710 --> 00:33:17,559
unavailable for a moment now why stop

00:33:14,740 --> 00:33:19,419
here once you have an interface into

00:33:17,559 --> 00:33:21,159
application what else is possible like

00:33:19,419 --> 00:33:23,290
everything Mozilla has a version

00:33:21,159 --> 00:33:26,380
endpoint which exposes built-in for

00:33:23,290 --> 00:33:28,510
which can be very useful if you like

00:33:26,380 --> 00:33:30,250
pull based metrics like I do Prometheus

00:33:28,510 --> 00:33:33,520
is wonderful put it there

00:33:30,250 --> 00:33:35,890
logging you know maybe you want to get

00:33:33,520 --> 00:33:37,240
or set your lock level maybe you add

00:33:35,890 --> 00:33:39,340
this misbehaving and you want to know

00:33:37,240 --> 00:33:43,840
more but redeploying application may

00:33:39,340 --> 00:33:45,370
just go make the problem go away this is

00:33:43,840 --> 00:33:48,730
a possibility you can change the log

00:33:45,370 --> 00:33:52,720
level right now basically you can use

00:33:48,730 --> 00:33:55,960
this for everything that you used UNIX

00:33:52,720 --> 00:34:00,160
signals before and more because you can

00:33:55,960 --> 00:34:01,840
return useful data so now that we taught

00:34:00,160 --> 00:34:04,630
our application talk to the load button

00:34:01,840 --> 00:34:06,850
load balancers it's incredible how much

00:34:04,630 --> 00:34:08,710
freedom and power we have because now we

00:34:06,850 --> 00:34:11,110
can scale up and down as needed it's

00:34:08,710 --> 00:34:14,080
like magic your app doesn't need to know

00:34:11,110 --> 00:34:16,540
how many instances there are how about

00:34:14,080 --> 00:34:16,960
distributing it our multiple servers why

00:34:16,540 --> 00:34:19,720
not

00:34:16,960 --> 00:34:24,150
just instead of dispatching over port

00:34:19,720 --> 00:34:24,150
numbers we dispatch over IP addresses

00:34:24,780 --> 00:34:28,450
the principle is the same and they don't

00:34:27,130 --> 00:34:30,040
even have to be on different servers you

00:34:28,450 --> 00:34:32,169
can do this on one house too and then

00:34:30,040 --> 00:34:37,960
have the freedom of moving instances

00:34:32,169 --> 00:34:39,820
around so at this point you run into one

00:34:37,960 --> 00:34:41,290
problem though if they're on different

00:34:39,820 --> 00:34:43,870
servers they have different file systems

00:34:41,290 --> 00:34:47,160
so while you could use some kind of NFS

00:34:43,870 --> 00:34:49,770
and some locking or god forbid samba

00:34:47,160 --> 00:34:53,800
it's not advisable

00:34:49,770 --> 00:34:57,190
so instead again let's let's embrace and

00:34:53,800 --> 00:34:59,980
rethink let's just accept the default

00:34:57,190 --> 00:35:01,510
system is Lavar now and one of the

00:34:59,980 --> 00:35:03,340
classic file system issues is already

00:35:01,510 --> 00:35:04,990
solved by logging to standard out

00:35:03,340 --> 00:35:06,430
because we don't care about the storage

00:35:04,990 --> 00:35:09,850
you just send it to standard out in the

00:35:06,430 --> 00:35:12,040
environment we'll provide so other

00:35:09,850 --> 00:35:14,950
classics are state like user sessions

00:35:12,040 --> 00:35:17,740
you cannot save you user sessions on the

00:35:14,950 --> 00:35:19,780
filesystem of your hosts because that

00:35:17,740 --> 00:35:22,480
would mean that once a user is sent to a

00:35:19,780 --> 00:35:25,180
different bag and it's they are locked

00:35:22,480 --> 00:35:27,070
out which is not a great experience so

00:35:25,180 --> 00:35:29,770
this really means that there's no sequel

00:35:27,070 --> 00:35:33,480
ID for you no files instead learn to

00:35:29,770 --> 00:35:37,330
love Postgres for basically everything

00:35:33,480 --> 00:35:39,550
if you want things like caching

00:35:37,330 --> 00:35:42,490
or user sessions radius and memcached

00:35:39,550 --> 00:35:44,500
great or if you want dynamic

00:35:42,490 --> 00:35:47,650
configuration and service discovery at

00:35:44,500 --> 00:35:52,720
CDN console or popular these are your

00:35:47,650 --> 00:35:54,910
new friends so when you look at this you

00:35:52,720 --> 00:35:57,220
see I see another problem because

00:35:54,910 --> 00:35:59,380
managing this can be a really pain for

00:35:57,220 --> 00:36:01,450
very simple setups you can use shell

00:35:59,380 --> 00:36:02,140
scripts but you really shouldn't or

00:36:01,450 --> 00:36:03,790
ansible

00:36:02,140 --> 00:36:06,130
which is really great but still it can

00:36:03,790 --> 00:36:07,140
get very complex very fast so let's get

00:36:06,130 --> 00:36:09,130
some help

00:36:07,140 --> 00:36:13,180
did you think it takes me that long

00:36:09,130 --> 00:36:18,040
until I show you this so doctor by

00:36:13,180 --> 00:36:21,280
itself I'm I was not always the biggest

00:36:18,040 --> 00:36:23,950
fan I have to admit that us but doctor

00:36:21,280 --> 00:36:25,810
cost an industry packaging standard or

00:36:23,950 --> 00:36:27,370
to be fair like three standards by now

00:36:25,810 --> 00:36:29,620
but that's beside the point

00:36:27,370 --> 00:36:31,390
and it abstracts away even more

00:36:29,620 --> 00:36:33,750
application details which is also really

00:36:31,390 --> 00:36:38,440
nice your black box becomes even blacker

00:36:33,750 --> 00:36:40,810
but it also created an ecosystem and

00:36:38,440 --> 00:36:44,050
that ecosystem is amazing because part

00:36:40,810 --> 00:36:45,880
of the ecosystems are custom rangers for

00:36:44,050 --> 00:36:50,380
those who don't know top left kubernetes

00:36:45,880 --> 00:36:51,790
top right missus bottom-left DCOs bottom

00:36:50,380 --> 00:36:54,100
right nomad

00:36:51,790 --> 00:36:56,890
they are all quite different and

00:36:54,100 --> 00:37:01,810
depending on how much complexity you can

00:36:56,890 --> 00:37:03,310
handle you should choose wisely now they

00:37:01,810 --> 00:37:07,330
are game changer because once you get

00:37:03,310 --> 00:37:09,850
them running and keep them running you

00:37:07,330 --> 00:37:12,130
can say this is my container and you run

00:37:09,850 --> 00:37:15,580
it one note on one of these hosts and

00:37:12,130 --> 00:37:17,680
this if you have seen respecting you

00:37:15,580 --> 00:37:21,070
have fully automated deployments in that

00:37:17,680 --> 00:37:23,290
moment and all the work to get there is

00:37:21,070 --> 00:37:26,170
done completely outside your application

00:37:23,290 --> 00:37:27,400
you do not have to change anything and

00:37:26,170 --> 00:37:29,920
it also means that your applications

00:37:27,400 --> 00:37:31,930
become ephemeral so they may have very

00:37:29,920 --> 00:37:34,060
short lifetimes they may be shuffled

00:37:31,930 --> 00:37:35,590
around because your are cluster needs to

00:37:34,060 --> 00:37:37,210
rebalance or something

00:37:35,590 --> 00:37:42,010
so there's another reason the file

00:37:37,210 --> 00:37:44,350
system is slava but at this point your

00:37:42,010 --> 00:37:46,450
application is ready for a multi data

00:37:44,350 --> 00:37:48,700
center cluster without knowing about it

00:37:46,450 --> 00:37:50,710
all it knows is how to start and

00:37:48,700 --> 00:37:53,290
communicate readiness

00:37:50,710 --> 00:37:57,160
how to serve and communicate health and

00:37:53,290 --> 00:38:02,859
how to stop properly so it means it

00:37:57,160 --> 00:38:05,080
became web-scale by doing less so at

00:38:02,859 --> 00:38:06,760
this point I could I could and should

00:38:05,080 --> 00:38:08,589
start talking about things like service

00:38:06,760 --> 00:38:10,720
discovery and measures which are really

00:38:08,589 --> 00:38:13,570
great you should look at link or DEA or

00:38:10,720 --> 00:38:15,550
envoi and sto once your once you have

00:38:13,570 --> 00:38:18,130
this improv but they don't fundamentally

00:38:15,550 --> 00:38:21,369
change anything about the application so

00:38:18,130 --> 00:38:24,040
and I also don't have enough time now if

00:38:21,369 --> 00:38:26,280
you wonder oh my gosh how do I get my

00:38:24,040 --> 00:38:29,230
Python into docker

00:38:26,280 --> 00:38:32,890
another open space by my even other

00:38:29,230 --> 00:38:37,119
friend Moshe which is tomorrow at 11:00

00:38:32,890 --> 00:38:39,630
I am room 11 I will try to attend if you

00:38:37,119 --> 00:38:42,970
have any questions about these topics

00:38:39,630 --> 00:38:45,460
yeah now let's have a final look at our

00:38:42,970 --> 00:38:48,760
application our app is still a black box

00:38:45,460 --> 00:38:51,250
it's still easy to start its

00:38:48,760 --> 00:38:53,470
self-sufficient in its startup so if if

00:38:51,250 --> 00:38:56,260
your database is not there it will it

00:38:53,470 --> 00:38:58,150
will behave smartly there are few

00:38:56,260 --> 00:39:00,460
varying options configured using

00:38:58,150 --> 00:39:04,000
environment variables there's a clean

00:39:00,460 --> 00:39:07,240
shutdown using a standard signal it

00:39:04,000 --> 00:39:10,450
magically retrieves its secrets and I am

00:39:07,240 --> 00:39:13,300
gonna admit that this is maybe the

00:39:10,450 --> 00:39:15,430
weakest part but Security's always a

00:39:13,300 --> 00:39:21,820
trade-off between convenience and

00:39:15,430 --> 00:39:23,950
security so this is how it is mmm now it

00:39:21,820 --> 00:39:28,060
also keeps all its data in external

00:39:23,950 --> 00:39:30,970
resources and exposes its services as

00:39:28,060 --> 00:39:35,230
configured where they are picked up by a

00:39:30,970 --> 00:39:38,410
load balancer it also exposes its state

00:39:35,230 --> 00:39:41,349
in a consistent way where other parts of

00:39:38,410 --> 00:39:43,720
the system can rely on and the logs

00:39:41,349 --> 00:39:45,339
still go to standard out where it's

00:39:43,720 --> 00:39:47,859
picked up by the environment and it's

00:39:45,339 --> 00:39:50,349
done whatever you want can be your

00:39:47,859 --> 00:39:53,890
terminal it can be log stash it can be

00:39:50,349 --> 00:39:55,900
fluenta tea can be great log now for all

00:39:53,890 --> 00:39:58,480
of this our bed view hasn't changed at

00:39:55,900 --> 00:40:00,369
all I haven't showed you since I showed

00:39:58,480 --> 00:40:03,130
you for the first time our application

00:40:00,369 --> 00:40:04,530
creator now only takes one or two

00:40:03,130 --> 00:40:08,490
instances of well

00:40:04,530 --> 00:40:11,190
classes one with the configuration and

00:40:08,490 --> 00:40:13,170
one with secrets the interaction with

00:40:11,190 --> 00:40:15,750
environment is limited to one file only

00:40:13,170 --> 00:40:18,360
and the same application looks the same

00:40:15,750 --> 00:40:21,240
way on your notebook in a platform as a

00:40:18,360 --> 00:40:23,640
service or in a cluster and the heavy

00:40:21,240 --> 00:40:25,890
lifting is done by decades-old UNIX

00:40:23,640 --> 00:40:27,150
tools or by the bee's knees container

00:40:25,890 --> 00:40:32,670
Orchestrator de jour

00:40:27,150 --> 00:40:35,670
so I guess success one final thought if

00:40:32,670 --> 00:40:37,200
we squirm and worry trying to do here we

00:40:35,670 --> 00:40:40,110
want to see our application as a black

00:40:37,200 --> 00:40:42,420
box with clear interfaces that enable

00:40:40,110 --> 00:40:44,520
loose coupling with other components so

00:40:42,420 --> 00:40:48,180
that our components can be replaced at

00:40:44,520 --> 00:40:49,950
any time we separate i/o from logic by

00:40:48,180 --> 00:40:52,830
logging to standard out and not caring

00:40:49,950 --> 00:40:55,380
how it's saved by pushing the

00:40:52,830 --> 00:40:57,150
configuration from outside and transform

00:40:55,380 --> 00:41:00,810
it into classes before you start using

00:40:57,150 --> 00:41:04,020
it in your actual code and the isolate

00:41:00,810 --> 00:41:07,320
our process processes global state into

00:41:04,020 --> 00:41:09,210
one spot but these are all best

00:41:07,320 --> 00:41:11,850
practices from software engineering in

00:41:09,210 --> 00:41:13,950
general and specifically reminds me of

00:41:11,850 --> 00:41:15,780
the hexagonal architecture by alistair

00:41:13,950 --> 00:41:17,640
cockburn we talked about ports and

00:41:15,780 --> 00:41:20,670
adapters and it's easy to see how it

00:41:17,640 --> 00:41:23,370
applies and other giants like Brandon

00:41:20,670 --> 00:41:25,170
Rhodes or Gary Bernhardt talked about

00:41:23,370 --> 00:41:28,320
the same point so I will link to their

00:41:25,170 --> 00:41:29,850
talks I find it very fascinating so I

00:41:28,320 --> 00:41:32,040
guess the lesson here is that your app

00:41:29,850 --> 00:41:33,510
is or could be in the future and you

00:41:32,040 --> 00:41:36,210
should anticipate it part of something

00:41:33,510 --> 00:41:39,150
much bigger so your app boundary should

00:41:36,210 --> 00:41:43,020
be just another boundary and should be

00:41:39,150 --> 00:41:45,360
treated as such sadly as we software

00:41:43,020 --> 00:41:48,480
architecture what I've shown you is an

00:41:45,360 --> 00:41:50,880
ideal so not every application fits the

00:41:48,480 --> 00:41:53,850
constraints I've given you not every

00:41:50,880 --> 00:41:55,740
application can run in a cluster I have

00:41:53,850 --> 00:41:57,780
plenty of regular at occasions to that I

00:41:55,740 --> 00:42:00,150
just deploy using Debian packages very

00:41:57,780 --> 00:42:03,390
old-school so and someone has to write

00:42:00,150 --> 00:42:05,970
to a disk at some point I mean you

00:42:03,390 --> 00:42:09,390
cannot keep everything in RAM forever so

00:42:05,970 --> 00:42:12,900
and finally some what I said conflicts

00:42:09,390 --> 00:42:15,960
with my advice from last year and

00:42:12,900 --> 00:42:17,920
neither is wrong it's just that both are

00:42:15,960 --> 00:42:20,920
solution to different problems

00:42:17,920 --> 00:42:22,450
so you have to break rules at this point

00:42:20,920 --> 00:42:24,010
you have to make trade-offs but you have

00:42:22,450 --> 00:42:26,230
to know those rules first and you have

00:42:24,010 --> 00:42:27,580
to know the consequences so what I'm

00:42:26,230 --> 00:42:29,080
trying to say here is that you should

00:42:27,580 --> 00:42:35,080
come to all of my talks and make

00:42:29,080 --> 00:42:37,930
informed decisions one more thing don't

00:42:35,080 --> 00:42:40,690
we all crave realistic examples when we

00:42:37,930 --> 00:42:43,960
love it like big companies which show us

00:42:40,690 --> 00:42:46,480
how they deploy their applications we do

00:42:43,960 --> 00:42:48,310
but if they will not do that at least

00:42:46,480 --> 00:42:49,870
not concretely if you ask them they will

00:42:48,310 --> 00:42:52,090
use buzzwords and tell you about

00:42:49,870 --> 00:42:55,150
continuous deployment and chatter ups

00:42:52,090 --> 00:42:57,400
and whatnot but in reality it's probably

00:42:55,150 --> 00:42:58,750
a bunch of shell scripts written in 2002

00:42:57,400 --> 00:43:01,210
by someone who's not in a company

00:42:58,750 --> 00:43:04,810
anymore and everybody's just afraid to

00:43:01,210 --> 00:43:07,270
touch it but it turns out that we have

00:43:04,810 --> 00:43:11,290
one great open source example of a

00:43:07,270 --> 00:43:13,840
modern web application that I love

00:43:11,290 --> 00:43:14,470
coming back to and where I learn a lot

00:43:13,840 --> 00:43:18,760
too

00:43:14,470 --> 00:43:21,070
and of course it's a new pipe I the new

00:43:18,760 --> 00:43:23,950
pipe er serves over 6 billion of

00:43:21,070 --> 00:43:27,160
requests per month which amounts to 1.5

00:43:23,950 --> 00:43:29,680
terabyte of data and it does so

00:43:27,160 --> 00:43:33,160
superfast and everything you want to

00:43:29,680 --> 00:43:35,830
know about it is in github you just have

00:43:33,160 --> 00:43:38,460
to you can you can look how they do

00:43:35,830 --> 00:43:41,170
things and I found it very enlightening

00:43:38,460 --> 00:43:43,690
now except for a secret it's not great

00:43:41,170 --> 00:43:46,500
how they do that but nobody's perfect

00:43:43,690 --> 00:43:49,810
I mean if you're unhappy with something

00:43:46,500 --> 00:43:53,170
the final push has been done on a grant

00:43:49,810 --> 00:43:56,980
from Mozilla and the grant is used up so

00:43:53,170 --> 00:43:59,590
I would suggest to if you want to IP

00:43:56,980 --> 00:44:02,410
effort to improve to donate and help it

00:43:59,590 --> 00:44:05,590
to improve even further now that's all I

00:44:02,410 --> 00:44:08,110
have for you today please check out the

00:44:05,590 --> 00:44:09,490
talk page follow me on Twitter and get

00:44:08,110 --> 00:44:10,210
your domains from Vario me yeah if you

00:44:09,490 --> 00:44:12,650
speak German

00:44:10,210 --> 00:44:21,389
I'm Henoch thank you very much

00:44:12,650 --> 00:44:21,389

YouTube URL: https://www.youtube.com/watch?v=wuCpCkrfeMs


