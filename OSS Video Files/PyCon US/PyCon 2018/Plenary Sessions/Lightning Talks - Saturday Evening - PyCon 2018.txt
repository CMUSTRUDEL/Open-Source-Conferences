Title: Lightning Talks - Saturday Evening - PyCon 2018
Publication date: 2018-08-06
Playlist: Plenary Sessions
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:05,009
day of your conference alright this is

00:00:03,330 --> 00:00:06,660
gonna be the best session yet please

00:00:05,009 --> 00:00:07,379
give a big hand to all of your speakers

00:00:06,660 --> 00:00:09,059
preemptively

00:00:07,379 --> 00:00:19,080
but most importantly to our first

00:00:09,059 --> 00:00:20,400
speaker which I believe is Caleb I feel

00:00:19,080 --> 00:00:28,699
like the guy with cooler hat should get

00:00:20,400 --> 00:00:30,900
the more applause starting go okay so

00:00:28,699 --> 00:00:33,600
I'm Caleb Jones parks

00:00:30,900 --> 00:00:36,000
I'm the maker of a Apple a real-time

00:00:33,600 --> 00:00:37,800
Python evaluator I'd like to start out

00:00:36,000 --> 00:00:39,750
by saying hi to the four people who were

00:00:37,800 --> 00:00:44,610
actually from Cleveland and the 99

00:00:39,750 --> 00:00:46,590
hundred people who are from SF the

00:00:44,610 --> 00:00:48,629
reason why I wanted to make a real-time

00:00:46,590 --> 00:00:50,399
interactive evaluator is I was reading

00:00:48,629 --> 00:00:52,680
Brett Victor's talk the breakfast here

00:00:50,399 --> 00:00:54,300
is great by the way on the future of

00:00:52,680 --> 00:00:57,020
programming and I realized that

00:00:54,300 --> 00:01:00,539
programming as we know it is

00:00:57,020 --> 00:01:03,000
fundamentally flawed the because

00:01:00,539 --> 00:01:05,189
beginner and expert alike we may think

00:01:03,000 --> 00:01:07,189
we know what we're doing but do we

00:01:05,189 --> 00:01:10,200
actually know what we're doing for sure

00:01:07,189 --> 00:01:12,090
100% how many times have you thought oh

00:01:10,200 --> 00:01:14,490
yeah this codes gonna work and you run

00:01:12,090 --> 00:01:20,009
it and then the computer explodes yeah

00:01:14,490 --> 00:01:22,049
it happens so your systems in place to

00:01:20,009 --> 00:01:24,090
help avoid this kind of errors like

00:01:22,049 --> 00:01:26,220
type-checking Python despite not having

00:01:24,090 --> 00:01:28,470
explicit types is strongly typed so

00:01:26,220 --> 00:01:32,790
catch type errors if you have a good IDE

00:01:28,470 --> 00:01:35,310
like pycharm or Visual Studio code but

00:01:32,790 --> 00:01:38,070
the only way to know for sure that your

00:01:35,310 --> 00:01:40,049
program works is to run it so what if

00:01:38,070 --> 00:01:42,420
there was a system that literally ran

00:01:40,049 --> 00:01:47,579
your program as you're editing the code

00:01:42,420 --> 00:01:49,590
and that is a rebel so I'm gonna do a

00:01:47,579 --> 00:01:51,810
tech demo here and I'm just gonna do the

00:01:49,590 --> 00:01:55,200
simplest possible code cuz detecting

00:01:51,810 --> 00:01:57,299
what was or easy miss up so one plus one

00:01:55,200 --> 00:02:02,180
is two hopefully you guys already know

00:01:57,299 --> 00:02:04,920
that yeah and then I can edit this and

00:02:02,180 --> 00:02:08,630
I'm never pressing the Run key here I

00:02:04,920 --> 00:02:08,630
just type it's that simple

00:02:09,149 --> 00:02:15,860
it's just more complex that yeah

00:02:22,510 --> 00:02:28,540
we get a variable display here sort of

00:02:25,700 --> 00:02:36,140
like debugging everything same time

00:02:28,540 --> 00:02:38,530
fiddle around with that so this should

00:02:36,140 --> 00:02:40,490
be great for likes of educational tool

00:02:38,530 --> 00:02:42,950
we gonna really trying to mess around

00:02:40,490 --> 00:02:44,120
with Python should be easier than using

00:02:42,950 --> 00:02:46,160
the terminal where you just have one

00:02:44,120 --> 00:02:47,810
line at a time and also just as a

00:02:46,160 --> 00:02:50,930
scratch pad to test out small Python

00:02:47,810 --> 00:02:54,080
snippets but the best part about this is

00:02:50,930 --> 00:03:00,170
it will catch your errors so if I try to

00:02:54,080 --> 00:03:03,290
grant num list by 9 then yeah

00:03:00,170 --> 00:03:05,000
listen dicks out of range because I see

00:03:03,290 --> 00:03:06,800
the air the instant I typed this I have

00:03:05,000 --> 00:03:10,910
a connotation between the air and the

00:03:06,800 --> 00:03:14,360
code you just typed so I know that what

00:03:10,910 --> 00:03:18,530
I just typed is wrong and I can look at

00:03:14,360 --> 00:03:21,590
the numbers and it's only 11 items so

00:03:18,530 --> 00:03:26,330
yeah accessing element 9,000 isn't gonna

00:03:21,590 --> 00:03:31,010
work let's fix this and we got a print

00:03:26,330 --> 00:03:32,780
output here works so if you want to use

00:03:31,010 --> 00:03:37,700
a uple you just google it it's free and

00:03:32,780 --> 00:03:39,230
open-source and then I'm also going to

00:03:37,700 --> 00:03:41,720
give a shout-out to two other great

00:03:39,230 --> 00:03:44,120
extensions there's wolf which is similar

00:03:41,720 --> 00:03:46,540
to a Apple but it displays values in

00:03:44,120 --> 00:03:50,209
line so it looks slightly cooler and

00:03:46,540 --> 00:03:52,910
bird's-eye which is like a ruble not

00:03:50,209 --> 00:03:54,470
real time but displays has a great

00:03:52,910 --> 00:03:57,110
variable display and it will actually

00:03:54,470 --> 00:03:59,660
work in your production app you just

00:03:57,110 --> 00:04:02,989
give a decorator on your function and it

00:03:59,660 --> 00:04:05,390
will you can have a debug it later on

00:04:02,989 --> 00:04:08,299
err Apple is available for vs code and

00:04:05,390 --> 00:04:10,600
as a standalone electron app thanks for

00:04:08,299 --> 00:04:10,600
listening

00:04:14,360 --> 00:04:17,579
thank you very much Caleb that was

00:04:16,290 --> 00:04:19,170
excellent everyone that's coming in here

00:04:17,579 --> 00:04:20,340
quick quick quick come in come and sit

00:04:19,170 --> 00:04:20,850
near the front there's lots of room at

00:04:20,340 --> 00:04:23,280
the front

00:04:20,850 --> 00:04:24,960
squeeze pass down the rows get closer to

00:04:23,280 --> 00:04:26,760
the speaker this is the Lightning talks

00:04:24,960 --> 00:04:28,470
you already miss one amazing one but

00:04:26,760 --> 00:04:31,050
guess what there's at least another 12

00:04:28,470 --> 00:04:32,910
amazing ones to come one of which is

00:04:31,050 --> 00:04:37,220
gonna be my friend Michael Ford's talk

00:04:32,910 --> 00:04:37,220
please give Michael a huge hat

00:04:40,460 --> 00:04:45,210
thank you everyone this is a very

00:04:43,200 --> 00:04:47,220
abstract talk that not there's not

00:04:45,210 --> 00:04:49,110
really time to give examples but I hope

00:04:47,220 --> 00:04:51,780
that the application to the day-to-day

00:04:49,110 --> 00:04:54,060
challenge of the practice of software

00:04:51,780 --> 00:04:56,130
engineering is going to be clear because

00:04:54,060 --> 00:04:57,570
the only theory worth a damn is the

00:04:56,130 --> 00:04:59,250
theory of a practice of the practice

00:04:57,570 --> 00:05:01,620
this is a talk about the role of

00:04:59,250 --> 00:05:03,600
abstractions in software engineering and

00:05:01,620 --> 00:05:06,530
the image by the way is an abstract

00:05:03,600 --> 00:05:08,940
representation of a concrete Apple

00:05:06,530 --> 00:05:11,820
programming is all about the use of

00:05:08,940 --> 00:05:13,560
abstractions we often like to say that

00:05:11,820 --> 00:05:16,380
the language that computers speak is

00:05:13,560 --> 00:05:19,380
binary ones and zeros that's not

00:05:16,380 --> 00:05:21,479
actually true ones and zeros are an

00:05:19,380 --> 00:05:23,610
abstract representation of the

00:05:21,479 --> 00:05:25,530
fundamental operation of computers it's

00:05:23,610 --> 00:05:27,840
a way of representing what central

00:05:25,530 --> 00:05:30,630
processes do in a way that can be

00:05:27,840 --> 00:05:32,880
understood by humans the actual language

00:05:30,630 --> 00:05:35,490
spoken by computers is the

00:05:32,880 --> 00:05:37,620
electromagnetic dance across wires and

00:05:35,490 --> 00:05:40,229
etch silicon choreographed by the

00:05:37,620 --> 00:05:42,680
beating of a quartz crystal at the heart

00:05:40,229 --> 00:05:44,870
of the Machine ones and zeros are a

00:05:42,680 --> 00:05:47,460
representation of that dance

00:05:44,870 --> 00:05:49,440
understandable by humans that allows us

00:05:47,460 --> 00:05:51,930
to reason about the behavior of the

00:05:49,440 --> 00:05:54,210
system now that's a very low level

00:05:51,930 --> 00:05:56,340
abstraction it's very close to the

00:05:54,210 --> 00:05:57,960
actual operation of the computers but

00:05:56,340 --> 00:06:00,450
it's very hard to work with ones and

00:05:57,960 --> 00:06:02,190
zeros and I expect quite a few of you

00:06:00,450 --> 00:06:04,320
have some experience of that messing

00:06:02,190 --> 00:06:06,210
around with hardware but the next step

00:06:04,320 --> 00:06:08,190
up the next level of abstraction is

00:06:06,210 --> 00:06:11,760
assembly language and there we get to

00:06:08,190 --> 00:06:15,030
use mnemonics symbolic instructions like

00:06:11,760 --> 00:06:17,640
JMP for jump to represent these patterns

00:06:15,030 --> 00:06:21,030
of ones and zeros and there we also get

00:06:17,640 --> 00:06:22,680
to use human recognizable labels for

00:06:21,030 --> 00:06:23,559
memory locations instead of having to

00:06:22,680 --> 00:06:24,879
use numbers

00:06:23,559 --> 00:06:27,429
and that allows the assembler to

00:06:24,879 --> 00:06:29,829
calculate offsets for us way easier

00:06:27,429 --> 00:06:32,109
different level of abstraction and then

00:06:29,829 --> 00:06:34,299
stepping up the-- the levels we have

00:06:32,109 --> 00:06:37,389
languages like c and right at the very

00:06:34,299 --> 00:06:39,969
top we get python where each construct

00:06:37,389 --> 00:06:43,149
in the language like a print statement

00:06:39,969 --> 00:06:45,669
for example might actually correspond to

00:06:43,149 --> 00:06:49,589
millions perhaps of the very lowest

00:06:45,669 --> 00:06:52,529
level operations computer programming is

00:06:49,589 --> 00:06:55,329
communication in two directions

00:06:52,529 --> 00:06:57,129
programming provides a language that the

00:06:55,329 --> 00:07:00,179
computer understands and is able to

00:06:57,129 --> 00:07:02,439
execute deterministically whilst also

00:07:00,179 --> 00:07:05,139
communicating with humans so that they

00:07:02,439 --> 00:07:07,869
can conceptualize the behavior of the

00:07:05,139 --> 00:07:10,929
system so a programming language is a

00:07:07,869 --> 00:07:12,849
set of conceptual tools that facilitates

00:07:10,929 --> 00:07:15,519
the communication in both of those

00:07:12,849 --> 00:07:17,289
directions to the the hardware so that

00:07:15,519 --> 00:07:20,619
it can execute the instructions and to

00:07:17,289 --> 00:07:21,939
humans who are reading the code so the

00:07:20,619 --> 00:07:24,399
arts and the craft of software

00:07:21,939 --> 00:07:26,349
engineering is taking the conceptual

00:07:24,399 --> 00:07:28,239
tools that programming languages provide

00:07:26,349 --> 00:07:30,129
and using them to solve real world

00:07:28,239 --> 00:07:32,169
problems and that's the difference

00:07:30,129 --> 00:07:34,599
between science and engineering the

00:07:32,169 --> 00:07:37,360
theory is science and the application is

00:07:34,599 --> 00:07:39,369
engineering so in order to be able to do

00:07:37,360 --> 00:07:41,289
this in order to solve problems we have

00:07:39,369 --> 00:07:43,239
to have an understanding of the problem

00:07:41,289 --> 00:07:45,759
domain we conceptualize the problem

00:07:43,239 --> 00:07:48,789
domain we think about it so software is

00:07:45,759 --> 00:07:51,489
easy to maintain and understand when the

00:07:48,789 --> 00:07:53,259
abstractions you build map well to the

00:07:51,489 --> 00:07:56,859
problem domain if the way you think

00:07:53,259 --> 00:07:58,149
about the problem corresponds easily to

00:07:56,859 --> 00:08:00,429
the way you think about your software

00:07:58,149 --> 00:08:03,269
then there's less translation to do

00:08:00,429 --> 00:08:05,979
between the two less mental overhead

00:08:03,269 --> 00:08:09,189
Joel Spolsky talks about the law of

00:08:05,979 --> 00:08:12,009
leaky abstractions any abstraction that

00:08:09,189 --> 00:08:13,539
maps to lower level operations leaks at

00:08:12,009 --> 00:08:16,119
some point something's going to go wrong

00:08:13,539 --> 00:08:18,489
and in order to even understand the

00:08:16,119 --> 00:08:22,209
problem you have to understand the level

00:08:18,489 --> 00:08:24,699
below now I've heard it set and it rings

00:08:22,209 --> 00:08:27,009
true that a good programmer can hold

00:08:24,699 --> 00:08:30,429
about ten thousand lines of code in

00:08:27,009 --> 00:08:32,649
their head so if your system is less

00:08:30,429 --> 00:08:35,199
than ten thousand lines of code even if

00:08:32,649 --> 00:08:37,250
it's really really bad code you don't

00:08:35,199 --> 00:08:38,990
really need to build these high life

00:08:37,250 --> 00:08:42,530
building blocks to hold it all in your

00:08:38,990 --> 00:08:46,100
head and an all-too-common situation I'm

00:08:42,530 --> 00:08:47,630
afraid is when a system grows beyond the

00:08:46,100 --> 00:08:50,030
level where you can hold it all in your

00:08:47,630 --> 00:08:52,130
head an engineer decides right I'm going

00:08:50,030 --> 00:08:53,930
to create some abstractions to to

00:08:52,130 --> 00:08:56,360
simplify how I think about this system

00:08:53,930 --> 00:08:59,060
so we tend to create these black boxes

00:08:56,360 --> 00:09:01,670
into which we put the complexity and

00:08:59,060 --> 00:09:04,400
these type of abstractions conceal

00:09:01,670 --> 00:09:06,290
complexity the great advantage of them

00:09:04,400 --> 00:09:09,740
is that now you don't have to look at

00:09:06,290 --> 00:09:11,630
the mess you just made you can reason

00:09:09,740 --> 00:09:13,700
about your system using your black boxes

00:09:11,630 --> 00:09:15,740
but in order to understand what's

00:09:13,700 --> 00:09:18,680
actually happening you have to go

00:09:15,740 --> 00:09:20,900
digging in the dirt so instead of

00:09:18,680 --> 00:09:24,200
concealing a complexity a good

00:09:20,900 --> 00:09:26,330
abstraction explains and points you to

00:09:24,200 --> 00:09:29,060
the lower level operations good

00:09:26,330 --> 00:09:31,400
abstractions simplify and reveal

00:09:29,060 --> 00:09:35,210
complexity rather than concealing

00:09:31,400 --> 00:09:37,250
complexity now we can also use the same

00:09:35,210 --> 00:09:40,220
kind of thinking to think about product

00:09:37,250 --> 00:09:42,339
and system design what user experience

00:09:40,220 --> 00:09:46,010
do you provide what's your user story

00:09:42,339 --> 00:09:48,589
your users also think about the problem

00:09:46,010 --> 00:09:49,610
domain using conceptual tools as soon as

00:09:48,589 --> 00:09:51,110
you start thinking about something

00:09:49,610 --> 00:09:53,780
that's an abstraction that's a

00:09:51,110 --> 00:09:56,240
conceptual tool so the closer that the

00:09:53,780 --> 00:10:00,260
abstractions that your software provides

00:09:56,240 --> 00:10:02,120
to represent the problem domain the

00:10:00,260 --> 00:10:03,950
closer those abstractions map to the way

00:10:02,120 --> 00:10:06,260
your user already thinks about the

00:10:03,950 --> 00:10:08,780
problem the easier the software is going

00:10:06,260 --> 00:10:11,000
to be to use and that's where we comes

00:10:08,780 --> 00:10:13,100
full-circle if the way you build your

00:10:11,000 --> 00:10:14,810
software Maps well - the problem domain

00:10:13,100 --> 00:10:17,180
then it's going to be easy for you to

00:10:14,810 --> 00:10:19,040
reason about and to maintain and if the

00:10:17,180 --> 00:10:20,839
abstractions you present to the user map

00:10:19,040 --> 00:10:22,370
well to the problem domain then it will

00:10:20,839 --> 00:10:26,110
be easier for them to think within the

00:10:22,370 --> 00:10:26,110
system and be intuitive to use

00:10:27,050 --> 00:10:30,980
on anything thank you Michael

00:10:31,149 --> 00:10:34,940
thank very much Michael up next is

00:10:33,380 --> 00:10:36,529
Alvaro please give him a big hand to

00:10:34,940 --> 00:10:42,050
talk about coffee which is a personal

00:10:36,529 --> 00:10:44,149
passion of mine hi so my name is Alvaro

00:10:42,050 --> 00:10:47,290
I'm also know as tariqas there are some

00:10:44,149 --> 00:10:50,149
links in this presentation you can like

00:10:47,290 --> 00:10:53,750
see my Twitter account to check out

00:10:50,149 --> 00:10:56,300
where these lights are so my Twitter

00:10:53,750 --> 00:10:59,329
github everything is to recurse I'm

00:10:56,300 --> 00:11:01,790
going to talk about automation and I

00:10:59,329 --> 00:11:04,279
personally love coughing I'm going to

00:11:01,790 --> 00:11:06,490
talk about roasting coffee with Buyten I

00:11:04,279 --> 00:11:08,240
mean automating the whole thing

00:11:06,490 --> 00:11:10,490
automation is very good because it

00:11:08,240 --> 00:11:12,500
reduces costs for your time on boring

00:11:10,490 --> 00:11:16,220
tasks and is less error-prone

00:11:12,500 --> 00:11:18,620
so we programmers usually love it so for

00:11:16,220 --> 00:11:22,570
me for example it's very fun to automate

00:11:18,620 --> 00:11:25,970
boring tasks and some weeks ago I work

00:11:22,570 --> 00:11:28,760
collecting extracting converting public

00:11:25,970 --> 00:11:31,160
data and for example I've automated the

00:11:28,760 --> 00:11:35,060
process of extracting a table from the

00:11:31,160 --> 00:11:37,490
PDF file and if you want to check out

00:11:35,060 --> 00:11:39,470
there's this rose library and common

00:11:37,490 --> 00:11:41,779
line interface I've written to do this

00:11:39,470 --> 00:11:44,060
kind of boring stuff so I love to

00:11:41,779 --> 00:11:47,839
automate things and in my daily job I

00:11:44,060 --> 00:11:51,829
really really love to create automated

00:11:47,839 --> 00:11:54,040
processes but let's talk about coffee if

00:11:51,829 --> 00:11:57,320
you are not from Brazil you probably

00:11:54,040 --> 00:12:00,380
don't know this guy this guy appeared on

00:11:57,320 --> 00:12:03,019
live TV yelling I want a coffee and

00:12:00,380 --> 00:12:06,620
things like this so Cairo cafe is like I

00:12:03,019 --> 00:12:10,370
want a coffee and we we really really

00:12:06,620 --> 00:12:13,040
love coffee produce actually the top one

00:12:10,370 --> 00:12:15,470
producer of coffee in the world and we

00:12:13,040 --> 00:12:18,949
have a bunch of good coffee in there so

00:12:15,470 --> 00:12:22,839
starting from the whole process just so

00:12:18,949 --> 00:12:25,790
you know what happens in the process so

00:12:22,839 --> 00:12:28,570
there are these coffee trees and there's

00:12:25,790 --> 00:12:32,959
the fruit right and then there's a

00:12:28,570 --> 00:12:36,290
process a bit automated at least in in

00:12:32,959 --> 00:12:39,500
Brazil to extract the beans from the

00:12:36,290 --> 00:12:42,470
fruit right then use a machine to roast

00:12:39,500 --> 00:12:43,529
a coffee this one is a 12 kilogram

00:12:42,470 --> 00:12:47,019
machine

00:12:43,529 --> 00:12:50,499
to roast and there are a lot of roast

00:12:47,019 --> 00:12:53,799
profiles and then you extract it and

00:12:50,499 --> 00:12:58,959
then you can drink that good coffee

00:12:53,799 --> 00:13:00,939
right so one thing that is is really not

00:12:58,959 --> 00:13:04,350
common in Brazil is to have automated

00:13:00,939 --> 00:13:07,059
machines so I was wondering and asking

00:13:04,350 --> 00:13:10,119
some friends that have a coffee shop in

00:13:07,059 --> 00:13:12,339
in Brazil why we can't automate this I

00:13:10,119 --> 00:13:15,069
mean why it's not already automated and

00:13:12,339 --> 00:13:18,489
then we started searching for some

00:13:15,069 --> 00:13:21,249
software there's one written in Python

00:13:18,489 --> 00:13:24,040
called artisan that you can automate a

00:13:21,249 --> 00:13:27,610
part of the process but we didn't have

00:13:24,040 --> 00:13:31,329
good machines roasting machines in

00:13:27,610 --> 00:13:33,429
Brazil to plug into this software so we

00:13:31,329 --> 00:13:39,459
needed to write our own software to do

00:13:33,429 --> 00:13:41,499
it so how we are using Python to

00:13:39,459 --> 00:13:43,360
automate the whole process first we are

00:13:41,499 --> 00:13:46,929
collecting data like from temperature

00:13:43,360 --> 00:13:49,899
sensors into the machine we are logging

00:13:46,929 --> 00:13:53,110
everything so we have like millisecond

00:13:49,899 --> 00:13:57,569
logs of all the data from the machine we

00:13:53,110 --> 00:14:02,049
can analyze later we can also trace like

00:13:57,569 --> 00:14:04,929
your favorite flavor in coffee and then

00:14:02,049 --> 00:14:05,939
create a specific roles profile for this

00:14:04,929 --> 00:14:09,220
kind of flavor

00:14:05,939 --> 00:14:13,059
we control the gas flow so we can fire

00:14:09,220 --> 00:14:15,040
up or down the roster we can open and

00:14:13,059 --> 00:14:17,769
close the doors like for the bean to

00:14:15,040 --> 00:14:20,169
enter in the roaster and then to exit

00:14:17,769 --> 00:14:23,290
and things like this and of course we

00:14:20,169 --> 00:14:26,649
can reproduce any rose profile you want

00:14:23,290 --> 00:14:28,869
to so since you we are logging

00:14:26,649 --> 00:14:32,350
everything we can reproduce this it

00:14:28,869 --> 00:14:35,860
later there's a quick video here I want

00:14:32,350 --> 00:14:38,499
to show you it was just one of the first

00:14:35,860 --> 00:14:40,269
tests so things are improving now but

00:14:38,499 --> 00:14:42,639
there is this common line interface that

00:14:40,269 --> 00:14:45,610
there's no sound here sorry I'm going to

00:14:42,639 --> 00:14:50,279
mute it so there's a common line

00:14:45,610 --> 00:14:52,980
interface let's play it

00:14:50,279 --> 00:14:55,009
and this is the machine it's a 12

00:14:52,980 --> 00:14:59,639
kilogram machine I don't know how many

00:14:55,009 --> 00:15:06,959
pounds is it but we should use kilograms

00:14:59,639 --> 00:15:10,139
right so this comment line interface is

00:15:06,959 --> 00:15:14,009
showing like for some log information

00:15:10,139 --> 00:15:16,889
and it waits for the best in Perl for to

00:15:14,009 --> 00:15:19,139
drop the coffee beans in to the roaster

00:15:16,889 --> 00:15:22,620
and then it controls everything the gas

00:15:19,139 --> 00:15:24,629
flow etc this is a simple interface the

00:15:22,620 --> 00:15:27,360
machine has you can control some things

00:15:24,629 --> 00:15:29,459
here but the software like can control

00:15:27,360 --> 00:15:32,870
everything I mean every sensor every

00:15:29,459 --> 00:15:38,939
kind of actuator and motor inside the

00:15:32,870 --> 00:15:40,889
machine so my time is running up here is

00:15:38,939 --> 00:15:43,829
the log this video is on YouTube you can

00:15:40,889 --> 00:15:46,889
search for it so this is I think this is

00:15:43,829 --> 00:15:48,529
the time when it's finishing let me see

00:15:46,889 --> 00:15:52,860
here

00:15:48,529 --> 00:15:57,089
yeah so there is this cooler and the

00:15:52,860 --> 00:16:00,300
whole process basically is like when it

00:15:57,089 --> 00:16:03,750
finished we need to cool down the beans

00:16:00,300 --> 00:16:05,279
and then we can package it and I mean

00:16:03,750 --> 00:16:08,339
put the beans into another machine to

00:16:05,279 --> 00:16:10,920
automate it to automate the process of

00:16:08,339 --> 00:16:16,290
packaging so everything is made in

00:16:10,920 --> 00:16:18,689
Python I'm using a library here to talk

00:16:16,290 --> 00:16:25,339
to the machine using a protocol called

00:16:18,689 --> 00:16:25,339
Modbus and that's it thank you

00:16:30,160 --> 00:16:34,420
amazing Thank You Alvaro thank you for

00:16:32,920 --> 00:16:36,190
keeping time that was always perfect

00:16:34,420 --> 00:16:44,199
up next is Petra please give him a big

00:16:36,190 --> 00:16:46,269
hand talking about a sink hello so

00:16:44,199 --> 00:16:49,569
there's this thing called a sink and I

00:16:46,269 --> 00:16:51,940
hear a lot of people tell me they don't

00:16:49,569 --> 00:16:54,009
understand a sink at all

00:16:51,940 --> 00:16:57,819
I found one way of explaining it that

00:16:54,009 --> 00:16:59,860
helps some people so if you want a sink

00:16:57,819 --> 00:17:01,180
explain that five minutes this talk is

00:16:59,860 --> 00:17:05,169
for you for the other ones you know it's

00:17:01,180 --> 00:17:11,400
just five minutes so meet blinky blinky

00:17:05,169 --> 00:17:15,250
is this ASCII art thing that blinks

00:17:11,400 --> 00:17:17,500
blinky has a some source code I hope you

00:17:15,250 --> 00:17:20,919
can read it I unfortunately cannot make

00:17:17,500 --> 00:17:24,760
it bigger so blinky is a class now has

00:17:20,919 --> 00:17:26,470
some in it it has a face when you

00:17:24,760 --> 00:17:29,740
convert it to string it just shows the

00:17:26,470 --> 00:17:32,470
face it has a method so you can set the

00:17:29,740 --> 00:17:35,830
face which automatically prints what you

00:17:32,470 --> 00:17:38,559
can see and then it has a run function

00:17:35,830 --> 00:17:43,090
which is just a loop where it sets one

00:17:38,559 --> 00:17:45,780
face waits a bit sets another face waits

00:17:43,090 --> 00:17:50,049
another bit and goes on and on and on

00:17:45,780 --> 00:17:52,630
there's a print blinky function and you

00:17:50,049 --> 00:17:54,700
could you can run it right so I hope

00:17:52,630 --> 00:18:00,030
most of you will understand this code

00:17:54,700 --> 00:18:05,230
now blinky has one big problem blinky is

00:18:00,030 --> 00:18:09,570
lonely so let's give blinky some friends

00:18:05,230 --> 00:18:09,570
how do I do that I import threading

00:18:10,200 --> 00:18:15,220
these little green marks show what's

00:18:12,820 --> 00:18:18,159
what's changed right so I import

00:18:15,220 --> 00:18:20,679
threading I give a little bit different

00:18:18,159 --> 00:18:23,169
timeout just just so it looks better

00:18:20,679 --> 00:18:27,490
there's a print Blinky's function that

00:18:23,169 --> 00:18:29,950
puts them all in a row and I make some

00:18:27,490 --> 00:18:32,200
Blinky's and then I start threads so

00:18:29,950 --> 00:18:34,539
what does this do I have you know

00:18:32,200 --> 00:18:38,230
sixteen cars on my computer so each core

00:18:34,539 --> 00:18:41,850
runs one animation only it's all in

00:18:38,230 --> 00:18:45,030
parallel all great and

00:18:41,850 --> 00:18:46,890
till I upgrade my print blinkie's

00:18:45,030 --> 00:18:51,299
function to the enterprise ready print

00:18:46,890 --> 00:18:58,470
boot print blinkie's 2.0 which does a

00:18:51,299 --> 00:19:01,740
little bit more work and suddenly it all

00:18:58,470 --> 00:19:04,850
goes bad why because all of these

00:19:01,740 --> 00:19:07,890
Blinky's fair state and they all try to

00:19:04,850 --> 00:19:10,620
call this print linkies function all at

00:19:07,890 --> 00:19:13,590
the same time and they overlap each

00:19:10,620 --> 00:19:15,570
other so that while one is in the middle

00:19:13,590 --> 00:19:17,610
of printing the other one is also in the

00:19:15,570 --> 00:19:21,059
middle of printing and so they override

00:19:17,610 --> 00:19:23,640
each other's progress now how do i how

00:19:21,059 --> 00:19:29,240
do i change this how do i make it better

00:19:23,640 --> 00:19:33,840
there's this thing that twisted and

00:19:29,240 --> 00:19:37,110
nodejs came up with well kind of are

00:19:33,840 --> 00:19:41,640
famous for which is I have functions

00:19:37,110 --> 00:19:43,919
that are executed all at once so nothing

00:19:41,640 --> 00:19:45,809
interrupts this function so what is

00:19:43,919 --> 00:19:50,669
different here I have closed eyes and

00:19:45,809 --> 00:19:54,179
open eyes and closed eyes says in some

00:19:50,669 --> 00:19:57,900
time please call the function open eyes

00:19:54,179 --> 00:20:01,440
right so after this many seconds this

00:19:57,900 --> 00:20:04,320
function get gets called then after this

00:20:01,440 --> 00:20:05,880
many seconds after this is done this

00:20:04,320 --> 00:20:10,320
function gets called again

00:20:05,880 --> 00:20:15,000
all right so this works it's it's pretty

00:20:10,320 --> 00:20:17,539
nice there is some setup needed to run

00:20:15,000 --> 00:20:20,250
all this it uses the async i/o library

00:20:17,539 --> 00:20:23,610
read the documentation for that this is

00:20:20,250 --> 00:20:25,409
just some boilerplate so this is nice

00:20:23,610 --> 00:20:30,240
what's is not what's nice in here is

00:20:25,409 --> 00:20:32,460
that if I sleep a little bit here it

00:20:30,240 --> 00:20:34,080
will still work it won't overwrite

00:20:32,460 --> 00:20:39,809
anything it will just be a little bit

00:20:34,080 --> 00:20:43,320
slower the problem is yeah so the main

00:20:39,809 --> 00:20:48,960
thing is he here is this all happens at

00:20:43,320 --> 00:20:51,630
one point nothing nothing is really

00:20:48,960 --> 00:20:54,330
happening at the same time one function

00:20:51,630 --> 00:20:55,559
runs then another function runs then

00:20:54,330 --> 00:20:59,520
another function runs

00:20:55,559 --> 00:21:04,200
and there's an event loop that ties it

00:20:59,520 --> 00:21:06,360
all together the problem here is these

00:21:04,200 --> 00:21:08,730
functions are really implementing a loop

00:21:06,360 --> 00:21:10,980
right it doesn't look like that it's

00:21:08,730 --> 00:21:13,950
some kind of weird trampoline one

00:21:10,980 --> 00:21:17,159
function calling the other if I wanted

00:21:13,950 --> 00:21:19,559
to do some more complex logic than than

00:21:17,159 --> 00:21:24,030
just a loop it would all just fall apart

00:21:19,559 --> 00:21:28,260
so what we do instead is use async and

00:21:24,030 --> 00:21:31,320
await it this looks like a loop and

00:21:28,260 --> 00:21:35,700
whenever I use this await thing I say

00:21:31,320 --> 00:21:38,070
now I'm giving time for other things to

00:21:35,700 --> 00:21:41,250
run so whenever I use a weight other

00:21:38,070 --> 00:21:44,970
things get a chance to run there's still

00:21:41,250 --> 00:21:48,720
some boilerplate to set it up otherwise

00:21:44,970 --> 00:21:51,360
this looks like a normal loop

00:21:48,720 --> 00:21:53,940
I'm getting out if I'm running out of

00:21:51,360 --> 00:21:56,789
time right so if you would like to learn

00:21:53,940 --> 00:21:59,159
more about async stuff I recommend going

00:21:56,789 --> 00:22:02,760
to the trio library which is very

00:21:59,159 --> 00:22:05,070
similar to async i/o they have a very

00:22:02,760 --> 00:22:08,690
nice tutorial that teaches you all you

00:22:05,070 --> 00:22:11,370
need to know of course there's some

00:22:08,690 --> 00:22:14,299
input/output the i/o thing that usually

00:22:11,370 --> 00:22:14,299
goes with this but

00:22:20,230 --> 00:22:24,669
Thank You pat-down all right up next

00:22:22,869 --> 00:22:26,109
days remind me oh no I need to check my

00:22:24,669 --> 00:22:29,700
list here we go it's mad

00:22:26,109 --> 00:22:29,700
that's amazing please give a huge hand

00:22:31,559 --> 00:22:37,749
hello everybody I'm one of the four

00:22:34,419 --> 00:22:39,489
Clevelander sirs here and I'd like to

00:22:37,749 --> 00:22:41,109
apologize on behalf of Cleveland for the

00:22:39,489 --> 00:22:44,169
weather it's been gorgeous all week and

00:22:41,109 --> 00:22:46,450
it's horrifying now so I'm gonna talk to

00:22:44,169 --> 00:22:48,249
you about type hinting and deserting

00:22:46,450 --> 00:22:50,169
type in switch our lovely host when he

00:22:48,249 --> 00:22:51,820
saw my talk he said tie pins were a bad

00:22:50,169 --> 00:22:57,820
idea and thinking about asserting them

00:22:51,820 --> 00:22:59,859
is worse so we know his opinion so I

00:22:57,820 --> 00:23:02,769
like I think a bunch of you went to

00:22:59,859 --> 00:23:03,940
Hello Wayne's talk beyond unit tests and

00:23:02,769 --> 00:23:06,429
when I was sitting in there he had a

00:23:03,940 --> 00:23:08,529
really cool thing where he was putting

00:23:06,429 --> 00:23:10,600
all these decorators in front of

00:23:08,529 --> 00:23:12,609
functions and adding all kinds of cool

00:23:10,600 --> 00:23:14,109
things on unit tests and the one thing

00:23:12,609 --> 00:23:17,080
that stuck out to me was that you know

00:23:14,109 --> 00:23:19,239
he wasn't using type hinting to enforce

00:23:17,080 --> 00:23:23,159
the types so if you're like me you might

00:23:19,239 --> 00:23:29,279
write some silly function like this some

00:23:23,159 --> 00:23:36,080
functions oh I'm sorry

00:23:29,279 --> 00:23:42,539
how about that oh my goodness

00:23:36,080 --> 00:23:43,919
we did it all right so so you might make

00:23:42,539 --> 00:23:50,010
some function like this and it's gonna

00:23:43,919 --> 00:23:53,880
return a float and we'll just turn float

00:23:50,010 --> 00:23:57,000
of a okay easy simple function as we all

00:23:53,880 --> 00:24:01,200
know Python does absolutely nothing to

00:23:57,000 --> 00:24:02,640
enforce this so I can give it you know a

00:24:01,200 --> 00:24:07,500
string and it gives me some horrifying

00:24:02,640 --> 00:24:08,640
air so that's where I thought okay what

00:24:07,500 --> 00:24:12,480
would be cool is if there was a nice

00:24:08,640 --> 00:24:14,490
little function that could just read my

00:24:12,480 --> 00:24:15,870
type pins for me and add the asserts

00:24:14,490 --> 00:24:17,280
because what I might do in my job before

00:24:15,870 --> 00:24:19,620
would be I'll do something like this

00:24:17,280 --> 00:24:25,440
I'd add in a certain here assert is

00:24:19,620 --> 00:24:26,610
instance a and error message and you

00:24:25,440 --> 00:24:28,020
know that's actually basically swish

00:24:26,610 --> 00:24:29,309
when you have a whole bunch of things so

00:24:28,020 --> 00:24:31,169
I didn't want to do that and I'm not

00:24:29,309 --> 00:24:39,740
checking the outputs so I wrote a little

00:24:31,169 --> 00:24:42,360
thing pretty quick from assert types and

00:24:39,740 --> 00:24:49,169
now you can add a little decorator in

00:24:42,360 --> 00:24:51,000
front of this and now if you run this

00:24:49,169 --> 00:24:53,340
it'll still give you an error but it'll

00:24:51,000 --> 00:24:55,260
give an area that says oh arguing today

00:24:53,340 --> 00:24:56,880
is supposed to be a string and then

00:24:55,260 --> 00:24:58,830
supposed to be a class so I felt really

00:24:56,880 --> 00:25:01,289
good about this I hacked us together in

00:24:58,830 --> 00:25:03,510
the hallway and then I proceeded to do

00:25:01,289 --> 00:25:04,770
what you do in 2018 which is you take

00:25:03,510 --> 00:25:06,510
the guy who kind of inspired you to do

00:25:04,770 --> 00:25:08,789
it you add him on Twitter and you send

00:25:06,510 --> 00:25:10,799
him it and then he did what you do in

00:25:08,789 --> 00:25:13,730
2018 which is he sends you to the github

00:25:10,799 --> 00:25:17,519
that already does this

00:25:13,730 --> 00:25:17,519
[Applause]

00:25:18,040 --> 00:25:23,650
so

00:25:20,760 --> 00:25:27,910
you can't pip install a certain types I

00:25:23,650 --> 00:25:34,200
wouldn't recommend it but what's even

00:25:27,910 --> 00:25:37,690
cooler is you can from enforce import

00:25:34,200 --> 00:25:42,280
runtime validation and it literally does

00:25:37,690 --> 00:25:43,660
the same thing so he gives you a runtime

00:25:42,280 --> 00:25:44,860
error instead of insert error and he

00:25:43,660 --> 00:25:47,620
gives you a handy message to the bottom

00:25:44,860 --> 00:25:49,690
there very very similar but it's cool if

00:25:47,620 --> 00:25:51,810
you like type hinting so that's what I

00:25:49,690 --> 00:25:51,810
got

00:25:56,659 --> 00:26:00,149
amazing thank you Matt have I got

00:25:58,350 --> 00:26:05,610
Terrance in the building somewhere

00:26:00,149 --> 00:26:07,049
Terrence is that a yes Terrence I say

00:26:05,610 --> 00:26:07,620
that's a no all right thank you very

00:26:07,049 --> 00:26:09,720
much

00:26:07,620 --> 00:26:12,940
so instead of Terrence we're gonna have

00:26:09,720 --> 00:26:12,940
[Music]

00:26:13,320 --> 00:26:21,160
I've Nick a raise to replace him yeah

00:26:17,740 --> 00:26:22,750
okay yeah yeah thanks and in the

00:26:21,160 --> 00:26:23,530
meantime we'll have the amazing Scott

00:26:22,750 --> 00:26:31,900
thank you very much

00:26:23,530 --> 00:26:34,240
give a hand hey everybody so there's a

00:26:31,900 --> 00:26:36,400
saying and especially in Lisp and other

00:26:34,240 --> 00:26:38,200
programming languages that a closure is

00:26:36,400 --> 00:26:40,270
a poor man's object and an object is a

00:26:38,200 --> 00:26:41,260
poor man's closure and that's sort of

00:26:40,270 --> 00:26:43,210
suggesting that there's these two

00:26:41,260 --> 00:26:46,179
fundamental programming constructs that

00:26:43,210 --> 00:26:48,970
are sort of morally equivalent right so

00:26:46,179 --> 00:26:50,530
today I may have misheard that quote

00:26:48,970 --> 00:26:53,140
slightly so I'm gonna show you a

00:26:50,530 --> 00:26:58,390
slightly different one so this talk is a

00:26:53,140 --> 00:27:00,940
class as a poor-man's loop so the origin

00:26:58,390 --> 00:27:02,830
of this stock this talk starts with me

00:27:00,940 --> 00:27:04,059
and my roommate Joe Jeb Nick sitting on

00:27:02,830 --> 00:27:06,370
the couch at like 2:00 a.m. in our

00:27:04,059 --> 00:27:07,710
apartment doing what we always do which

00:27:06,370 --> 00:27:11,409
is talk about Python meta programming

00:27:07,710 --> 00:27:13,450
and one of the things that we realized

00:27:11,409 --> 00:27:15,460
during this particular conversation was

00:27:13,450 --> 00:27:20,140
that the following is valid Python

00:27:15,460 --> 00:27:22,000
syntax so I can do plus plus I and what

00:27:20,140 --> 00:27:23,830
this actually does is sort of a

00:27:22,000 --> 00:27:26,320
little-known not very useful operator is

00:27:23,830 --> 00:27:28,240
that plus is a prefix operator in Python

00:27:26,320 --> 00:27:30,880
and this is a double underscore pause or

00:27:28,240 --> 00:27:32,470
dunder pause this is the unary positive

00:27:30,880 --> 00:27:33,909
operator so if you wanted to have some

00:27:32,470 --> 00:27:35,440
type that had some notion of like it the

00:27:33,909 --> 00:27:37,600
positive version of itself you might

00:27:35,440 --> 00:27:39,490
implement this and in particular does

00:27:37,600 --> 00:27:41,200
not do what you might think that it does

00:27:39,490 --> 00:27:43,059
have you come from like a C or C++ or

00:27:41,200 --> 00:27:46,059
Java programming background which is to

00:27:43,059 --> 00:27:49,150
increment I so what you see this used

00:27:46,059 --> 00:27:50,919
for most often is in languages like C

00:27:49,150 --> 00:27:53,320
you might write a for loop that looks

00:27:50,919 --> 00:27:56,860
something like this you do for int I

00:27:53,320 --> 00:28:03,190
equals 0 and you do a semicolon I less

00:27:56,860 --> 00:28:07,690
than say 10 and then plus plus I and so

00:28:03,190 --> 00:28:14,080
I will just do printf % T or I equals %

00:28:07,690 --> 00:28:16,419
d ok all right so this is sort of your

00:28:14,080 --> 00:28:19,210
standard like you know print print some

00:28:16,419 --> 00:28:20,320
integers in NC and I can take that and

00:28:19,210 --> 00:28:21,790
compile it and run it and write it

00:28:20,320 --> 00:28:23,620
prints you know I equals 0 equals 1

00:28:21,790 --> 00:28:24,880
equals y equals 2 etcetera I mean one

00:28:23,620 --> 00:28:25,690
thing that we all know about seasons

00:28:24,880 --> 00:28:27,429
renowned for

00:28:25,690 --> 00:28:29,259
sort of its expressive abilities its

00:28:27,429 --> 00:28:31,029
ability to concisely express exactly

00:28:29,259 --> 00:28:32,950
what we as a programmers want to do and

00:28:31,029 --> 00:28:34,559
so as Python programmers we have jealous

00:28:32,950 --> 00:28:37,539
of C and we really want to be able to

00:28:34,559 --> 00:28:39,159
write our code and read our looping

00:28:37,539 --> 00:28:42,850
constructs in a way that sort of gets us

00:28:39,159 --> 00:28:44,769
that full expressive power of C and for

00:28:42,850 --> 00:28:45,639
a while we were my colleague and I were

00:28:44,769 --> 00:28:47,500
talking about this and we didn't think

00:28:45,639 --> 00:28:50,320
it was possible until we realized that

00:28:47,500 --> 00:28:52,419
this plus plus I syntax was valid and so

00:28:50,320 --> 00:28:54,850
a couple of hours later we sort of race

00:28:52,419 --> 00:28:56,110
to figure out a solution for this and

00:28:54,850 --> 00:29:00,549
the result was this library so I'm gonna

00:28:56,110 --> 00:29:06,700
do from loop import loop and then I'm

00:29:00,549 --> 00:29:11,830
gonna say class for loop I equals 0

00:29:06,700 --> 00:29:17,100
semicolon I less than 10 semicolon plus

00:29:11,830 --> 00:29:17,100
plus I prints I

00:29:25,390 --> 00:29:30,170
so that's great so we've gotten sort of

00:29:27,500 --> 00:29:31,190
the basic you know expressive power of C

00:29:30,170 --> 00:29:33,110
for loops but of course there's many

00:29:31,190 --> 00:29:34,820
other features of C loops that we'd like

00:29:33,110 --> 00:29:37,940
to be able to emulate so for example in

00:29:34,820 --> 00:29:44,120
C I can do something like if you know if

00:29:37,940 --> 00:29:48,910
I mod 0 right so if I've got an odd

00:29:44,120 --> 00:29:53,060
number then I'll say prints continue

00:29:48,910 --> 00:29:55,670
thank you and this really should be a

00:29:53,060 --> 00:29:57,410
put well and then I'll say continue

00:29:55,670 --> 00:29:59,240
right so this says if this condition is

00:29:57,410 --> 00:30:00,380
true I want to skip this iteration and

00:29:59,240 --> 00:30:02,330
just go back to the top of the loop so

00:30:00,380 --> 00:30:04,640
it would be nice if we could do that in

00:30:02,330 --> 00:30:11,870
inclu and it turns out we can so I can

00:30:04,640 --> 00:30:15,260
say if I'm odd to continue you'll notice

00:30:11,870 --> 00:30:18,010
I did not import that and now we've

00:30:15,260 --> 00:30:18,010
skipped those values

00:30:18,870 --> 00:30:24,230
[Applause]

00:30:22,640 --> 00:30:25,640
and and of course the the third sort of

00:30:24,230 --> 00:30:26,840
important loop constructor we might want

00:30:25,640 --> 00:30:31,400
to be able to implement is breaking so I

00:30:26,840 --> 00:30:34,970
can do you know if I you know you could

00:30:31,400 --> 00:30:36,080
equal six say then I don't want to do

00:30:34,970 --> 00:30:39,710
this loop anymore I just want to break

00:30:36,080 --> 00:30:41,120
out and stop the loop those do break and

00:30:39,710 --> 00:30:48,620
we can again implement that with cloop

00:30:41,120 --> 00:30:54,860
so say if I equal six break don't say

00:30:48,620 --> 00:30:57,260
print done and we can break out of our

00:30:54,860 --> 00:30:59,360
loops so we've now sort of recovered the

00:30:57,260 --> 00:31:03,200
full expressive power of C style for

00:30:59,360 --> 00:31:04,850
loops if you're deeply concerned about

00:31:03,200 --> 00:31:07,490
how this is implemented or you're just

00:31:04,850 --> 00:31:11,090
or you want to sort of convince me to

00:31:07,490 --> 00:31:12,680
choose another profession you can you

00:31:11,090 --> 00:31:14,900
can find the source code for this at our

00:31:12,680 --> 00:31:18,590
github repository which is fiendish -

00:31:14,900 --> 00:31:20,180
devilry slash cloop which is C style for

00:31:18,590 --> 00:31:23,050
loops as Python classes because that's

00:31:20,180 --> 00:31:23,050
totally a thing you wanted

00:31:28,919 --> 00:31:34,929
amazed I hope Mark Smith is somewhere in

00:31:31,360 --> 00:31:36,340
the audience watching that up next is

00:31:34,929 --> 00:31:39,159
Nick who's going to tell us about

00:31:36,340 --> 00:31:41,789
alternatives to HTTP so you must clap

00:31:39,159 --> 00:31:41,789
for him please

00:31:44,450 --> 00:31:50,340
so often we learn HTTP because that's

00:31:48,150 --> 00:31:52,500
what the browser uses to talk to servers

00:31:50,340 --> 00:31:54,150
and its really great for browsers but we

00:31:52,500 --> 00:31:55,980
also use it for service the service

00:31:54,150 --> 00:31:57,840
communication when we try to do a

00:31:55,980 --> 00:31:59,310
service-oriented architecture and I

00:31:57,840 --> 00:32:02,340
think that's a bad idea

00:31:59,310 --> 00:32:07,110
but so why is they she to pee so bad you

00:32:02,340 --> 00:32:09,360
might ask well one reason is because

00:32:07,110 --> 00:32:10,980
it's just a bad protocol I mean it's

00:32:09,360 --> 00:32:12,720
text based which is easy to understand

00:32:10,980 --> 00:32:14,820
but it's also slow in today's modern

00:32:12,720 --> 00:32:16,800
world well we have fixed this right we

00:32:14,820 --> 00:32:18,480
created HTTP - and that's supposed to

00:32:16,800 --> 00:32:20,370
solve these things but the problem is

00:32:18,480 --> 00:32:21,900
HTTP - requires the cert yeah someone

00:32:20,370 --> 00:32:22,800
out there is gonna say no it does it but

00:32:21,900 --> 00:32:25,380
yeah it does because no one's

00:32:22,800 --> 00:32:27,270
implemented it correctly so anyways your

00:32:25,380 --> 00:32:28,800
service doesn't have a cert so pretty

00:32:27,270 --> 00:32:30,810
much a G - B - is out the window so your

00:32:28,800 --> 00:32:32,790
next question is okay what do we do well

00:32:30,810 --> 00:32:34,290
in service-oriented architecture this is

00:32:32,790 --> 00:32:36,690
typically called a transport or a

00:32:34,290 --> 00:32:37,950
message bus right and there's two kinds

00:32:36,690 --> 00:32:42,200
there's distributed and they're

00:32:37,950 --> 00:32:44,640
centralized so distributed is basically

00:32:42,200 --> 00:32:46,260
HTTP and other things and centralized

00:32:44,640 --> 00:32:48,990
this some other like queueing type

00:32:46,260 --> 00:32:50,760
technologies so in distributed basically

00:32:48,990 --> 00:32:52,410
every single service that you have has

00:32:50,760 --> 00:32:54,360
to talk to every other service this

00:32:52,410 --> 00:32:56,430
creates a lot of network overhead and

00:32:54,360 --> 00:32:57,660
you have a lot of network thrashing

00:32:56,430 --> 00:32:59,670
going on in a large production

00:32:57,660 --> 00:33:01,320
environment whereas in a centralized

00:32:59,670 --> 00:33:03,570
environment you basically have every

00:33:01,320 --> 00:33:04,920
service talking to a single hub so they

00:33:03,570 --> 00:33:06,660
only have to make connections to that

00:33:04,920 --> 00:33:09,240
one hub it causes a lot less network

00:33:06,660 --> 00:33:12,120
overhead so some of the differences mean

00:33:09,240 --> 00:33:13,410
that in a distributed world you have to

00:33:12,120 --> 00:33:14,760
have a load balancer to try to

00:33:13,410 --> 00:33:16,650
distribute the load between everything

00:33:14,760 --> 00:33:17,970
the problem is these load balancers like

00:33:16,650 --> 00:33:19,410
engine X they don't do a very good job

00:33:17,970 --> 00:33:22,170
because they don't actually know the

00:33:19,410 --> 00:33:24,270
real load your service is handling it

00:33:22,170 --> 00:33:25,890
only estimates - round robins etc it

00:33:24,270 --> 00:33:27,990
actually really is a balancing act

00:33:25,890 --> 00:33:30,660
whereas in centralized what happens is

00:33:27,990 --> 00:33:32,670
the service goes to the message bus and

00:33:30,660 --> 00:33:34,290
tells it hey I'm ready for more so you

00:33:32,670 --> 00:33:36,060
can actually guarantee that your service

00:33:34,290 --> 00:33:39,240
will not handle connections and if is

00:33:36,060 --> 00:33:40,740
not ready to handle the load next you

00:33:39,240 --> 00:33:42,900
have a thing called connection bleeding

00:33:40,740 --> 00:33:45,420
or connection draining basically if

00:33:42,900 --> 00:33:47,040
you're in a distributed world you have

00:33:45,420 --> 00:33:48,570
to handle bleeding or draining your

00:33:47,040 --> 00:33:49,710
connections before you can shut it down

00:33:48,570 --> 00:33:51,240
that way you don't get connection

00:33:49,710 --> 00:33:53,460
timeouts because that will bring you

00:33:51,240 --> 00:33:55,120
down whereas in a centralized world

00:33:53,460 --> 00:33:57,130
because your service is

00:33:55,120 --> 00:34:00,760
asking for the request itself it can

00:33:57,130 --> 00:34:02,380
simply just shut off so one of the

00:34:00,760 --> 00:34:04,540
biggest cons to a centralized the world

00:34:02,380 --> 00:34:06,490
is you have lean C because you have an

00:34:04,540 --> 00:34:08,980
extra hop you also have a single point

00:34:06,490 --> 00:34:10,690
of failure this is definitely the

00:34:08,980 --> 00:34:12,130
biggest con decentralized however it's

00:34:10,690 --> 00:34:14,230
really interesting that most people

00:34:12,130 --> 00:34:15,850
implement HTTP by sticking a load

00:34:14,230 --> 00:34:18,100
balancer in between every single service

00:34:15,850 --> 00:34:19,660
in which case you're basically using a

00:34:18,100 --> 00:34:23,410
distributed architecture like a

00:34:19,660 --> 00:34:25,480
centralized one so one huge Pro to a

00:34:23,410 --> 00:34:27,670
centralized architecture is it can

00:34:25,480 --> 00:34:30,910
actually route anywhere the biggest con

00:34:27,670 --> 00:34:33,700
to HTTP and similar alternatives is you

00:34:30,910 --> 00:34:35,770
have to have an actual open port on that

00:34:33,700 --> 00:34:37,120
machine in order to get traffic right

00:34:35,770 --> 00:34:38,800
that means you have to either be in the

00:34:37,120 --> 00:34:41,440
V PC or have an IP address that can

00:34:38,800 --> 00:34:42,550
actually route etc so let's say for

00:34:41,440 --> 00:34:43,450
example you wanted to do something

00:34:42,550 --> 00:34:46,710
really awesome

00:34:43,450 --> 00:34:48,850
really stupid and you wanted to

00:34:46,710 --> 00:34:50,590
intercept your production traffic and

00:34:48,850 --> 00:34:54,850
send it to your actual local machine

00:34:50,590 --> 00:34:57,220
right that's a great idea well with HTTP

00:34:54,850 --> 00:34:58,540
you could do it but it would actually be

00:34:57,220 --> 00:35:00,010
really hard you'd have to do a lot of

00:34:58,540 --> 00:35:01,510
things and pretty much the security

00:35:00,010 --> 00:35:03,880
people on your team would tell you know

00:35:01,510 --> 00:35:06,160
whereas we centralized all you'd have to

00:35:03,880 --> 00:35:07,780
do is get your computer your computer to

00:35:06,160 --> 00:35:09,460
connect to the centralized message bus

00:35:07,780 --> 00:35:12,490
and then you could simply just ask for a

00:35:09,460 --> 00:35:14,530
request and you would get it so I am

00:35:12,490 --> 00:35:16,000
totally skipping over an entirely third

00:35:14,530 --> 00:35:17,620
concept called events or scene which

00:35:16,000 --> 00:35:19,210
basically means you don't have any

00:35:17,620 --> 00:35:21,040
interprocess communication at all

00:35:19,210 --> 00:35:23,890
everything kind of figures out each

00:35:21,040 --> 00:35:25,030
other based on events I'm going to

00:35:23,890 --> 00:35:27,190
totally skip over that but if you're

00:35:25,030 --> 00:35:29,410
interested go look it up so now you're

00:35:27,190 --> 00:35:31,630
all asking okay so if HTTP is so bad why

00:35:29,410 --> 00:35:33,880
do we all use it well I think honestly

00:35:31,630 --> 00:35:35,860
it just boils down to HTTP really is the

00:35:33,880 --> 00:35:37,870
de facto right it's been built up from

00:35:35,860 --> 00:35:39,850
ever since the web was born and it's

00:35:37,870 --> 00:35:41,770
just built into all of our frameworks

00:35:39,850 --> 00:35:43,870
right every single framework is built

00:35:41,770 --> 00:35:46,540
entirely on HTTP and the biggest problem

00:35:43,870 --> 00:35:48,160
is if you want to go away from a CP you

00:35:46,540 --> 00:35:49,570
really can't without throwing the entire

00:35:48,160 --> 00:35:52,360
framework out the window

00:35:49,570 --> 00:35:55,030
so I'm currently building an open-source

00:35:52,360 --> 00:35:56,770
project it's just an idea of how to

00:35:55,030 --> 00:35:58,450
build a transport agnostic framework

00:35:56,770 --> 00:35:59,920
that doesn't really care what transport

00:35:58,450 --> 00:36:01,900
you're using it'll just work the same

00:35:59,920 --> 00:36:03,250
either way so if you're interested come

00:36:01,900 --> 00:36:06,180
talk to me and come check it out

00:36:03,250 --> 00:36:06,180
whatever Thanks

00:36:07,950 --> 00:36:14,350
Nicke far from whatever that was

00:36:12,040 --> 00:36:16,150
absolutely excellent please now give a

00:36:14,350 --> 00:36:19,980
big hand to Alan and we'll be talking

00:36:16,150 --> 00:36:19,980
about modeling and simulation in Python

00:36:22,110 --> 00:36:29,140
hello PyCon it's nice to see you I was

00:36:26,920 --> 00:36:32,170
here last year and I told you about this

00:36:29,140 --> 00:36:34,000
book project and I asked for help and I

00:36:32,170 --> 00:36:37,120
got help I got a bunch of great

00:36:34,000 --> 00:36:39,010
conversations so I went and wrote the

00:36:37,120 --> 00:36:41,650
book and it's called modeling and

00:36:39,010 --> 00:36:43,570
simulation in Python and now I'm back to

00:36:41,650 --> 00:36:45,880
ask for your help again because I want

00:36:43,570 --> 00:36:49,020
more help so let me tell you about the

00:36:45,880 --> 00:36:52,570
project and why you might care about it

00:36:49,020 --> 00:36:55,060
American edge engineering education is

00:36:52,570 --> 00:36:56,920
really broken about half of the people

00:36:55,060 --> 00:36:59,530
who start doing an engineering degree

00:36:56,920 --> 00:37:01,120
don't graduate in engineering they

00:36:59,530 --> 00:37:04,480
either change majors or they don't

00:37:01,120 --> 00:37:06,460
graduate at all and a big part of the

00:37:04,480 --> 00:37:09,520
reason is the science and math Death

00:37:06,460 --> 00:37:11,500
March which is a lot of programs start

00:37:09,520 --> 00:37:13,390
out with one or two years of math and

00:37:11,500 --> 00:37:15,970
science before you get to do anything

00:37:13,390 --> 00:37:17,770
that looks like engineering and this

00:37:15,970 --> 00:37:20,050
drives a lot of people out and it drives

00:37:17,770 --> 00:37:22,780
out a lot of people who might go on and

00:37:20,050 --> 00:37:24,520
be really great engineers so one piece

00:37:22,780 --> 00:37:27,780
of this is the freshman physics class

00:37:24,520 --> 00:37:30,370
which I am working on trying to fix and

00:37:27,780 --> 00:37:32,890
here's what I think it should be here's

00:37:30,370 --> 00:37:34,540
what modeling and simulation is about if

00:37:32,890 --> 00:37:37,090
you want to understand the physical

00:37:34,540 --> 00:37:39,610
world you identify the thing you're

00:37:37,090 --> 00:37:41,380
interested in you make modeling

00:37:39,610 --> 00:37:43,690
decisions about what you can leave out

00:37:41,380 --> 00:37:45,640
and what the essential features are that

00:37:43,690 --> 00:37:47,380
you have to capture and then you do

00:37:45,640 --> 00:37:50,050
mathematical analysis and you run

00:37:47,380 --> 00:37:52,030
simulations you use them to predict

00:37:50,050 --> 00:37:53,950
something to explain why the world

00:37:52,030 --> 00:37:55,870
behaves the way it does you do it to

00:37:53,950 --> 00:37:58,090
design something you have to validate

00:37:55,870 --> 00:38:00,220
and you have to iterate these are all

00:37:58,090 --> 00:38:03,130
important parts of the modeling process

00:38:00,220 --> 00:38:04,930
that engineers have to learn about but

00:38:03,130 --> 00:38:07,210
what they learn about in most

00:38:04,930 --> 00:38:09,730
engineering programs is just the

00:38:07,210 --> 00:38:13,990
mathematical analysis part until they

00:38:09,730 --> 00:38:16,570
drop so we're working on this class this

00:38:13,990 --> 00:38:18,440
is at Olin College where I teach a class

00:38:16,570 --> 00:38:21,050
called modeling and simulation where

00:38:18,440 --> 00:38:22,640
to teach all of that modeling process

00:38:21,050 --> 00:38:25,790
because we think it's really important

00:38:22,640 --> 00:38:27,619
we've been doing this since 2009 but for

00:38:25,790 --> 00:38:30,140
about the first 10 years we were

00:38:27,619 --> 00:38:35,660
teaching this class in MATLAB we're

00:38:30,140 --> 00:38:37,700
sorry but in fall 2017 we switched it

00:38:35,660 --> 00:38:41,900
over to Python and we've been using a

00:38:37,700 --> 00:38:43,760
bunch of thank you and we've been using

00:38:41,900 --> 00:38:45,680
a bunch of jupiter notebooks which has

00:38:43,760 --> 00:38:47,089
worked really well for that class you

00:38:45,680 --> 00:38:49,310
can see the example there's the

00:38:47,089 --> 00:38:53,329
axe-throwing example which is one of my

00:38:49,310 --> 00:38:55,310
favorites the basis of the class most of

00:38:53,329 --> 00:38:58,220
what we're doing is using OD e solvers

00:38:55,310 --> 00:39:02,240
and route finders and optimization to do

00:38:58,220 --> 00:39:03,980
prediction explanation and design the

00:39:02,240 --> 00:39:05,660
examples that we look at are not just

00:39:03,980 --> 00:39:08,390
the usual mechanics that you see in a

00:39:05,660 --> 00:39:10,369
freshman physics class but also discrete

00:39:08,390 --> 00:39:12,500
models like population and queuing

00:39:10,369 --> 00:39:14,569
theory first-order systems like

00:39:12,500 --> 00:39:17,890
epidemiology and thermal systems and

00:39:14,569 --> 00:39:20,359
also second order systems like mechanics

00:39:17,890 --> 00:39:22,520
so the kind of help I'm looking for I

00:39:20,359 --> 00:39:24,140
hope that you will look at the draft of

00:39:22,520 --> 00:39:24,740
what we've done and the code and the

00:39:24,140 --> 00:39:27,530
notebooks

00:39:24,740 --> 00:39:29,740
I'd love ideas for more examples and

00:39:27,530 --> 00:39:32,060
student projects that they can work on

00:39:29,740 --> 00:39:34,010
recommendations for libraries to use and

00:39:32,060 --> 00:39:36,410
other techniques we'd love to talk to

00:39:34,010 --> 00:39:38,210
you more about this and I know what

00:39:36,410 --> 00:39:40,460
you're thinking where can you find this

00:39:38,210 --> 00:39:42,859
book if only the URL were somewhere

00:39:40,460 --> 00:39:46,700
where you can find it it is at Maude sim

00:39:42,859 --> 00:39:49,579
PI comm and you can grab the book in PDF

00:39:46,700 --> 00:39:51,079
and there's a github repository there if

00:39:49,579 --> 00:39:53,390
you want to send me a pull request and

00:39:51,079 --> 00:39:55,640
that's a great way to contribute if you

00:39:53,390 --> 00:39:56,810
get a chance and I appreciate it there

00:39:55,640 --> 00:39:58,120
are a bunch of ways to get in touch with

00:39:56,810 --> 00:40:01,830
me thank you

00:39:58,120 --> 00:40:01,830
[Applause]

00:40:05,310 --> 00:40:10,870
fantastic Tommy thank you and Petra are

00:40:08,710 --> 00:40:12,640
you ready to go I are you guys ready to

00:40:10,870 --> 00:40:19,300
give them a big hand and that is what

00:40:12,640 --> 00:40:21,160
you dude alright everybody so I am gonna

00:40:19,300 --> 00:40:23,140
talk about Python in architecture and

00:40:21,160 --> 00:40:24,790
design and in true designer style have

00:40:23,140 --> 00:40:26,440
made the font very very small and very

00:40:24,790 --> 00:40:28,630
very thin

00:40:26,440 --> 00:40:30,640
all right so Who am I my name is Peter

00:40:28,630 --> 00:40:32,650
and I work as building information

00:40:30,640 --> 00:40:34,390
modeling specialist for Karen Timberlake

00:40:32,650 --> 00:40:36,160
here and Timberlake's an architecture

00:40:34,390 --> 00:40:38,350
firm but I do work within the research

00:40:36,160 --> 00:40:40,660
group and a specific subset of it called

00:40:38,350 --> 00:40:42,610
the design computation core my

00:40:40,660 --> 00:40:44,680
information here I've also listed it

00:40:42,610 --> 00:40:46,150
feel free to you know yell at me on

00:40:44,680 --> 00:40:47,530
Twitter later if you're not happy with

00:40:46,150 --> 00:40:49,750
stuff for it or look there for the

00:40:47,530 --> 00:40:50,860
slides if you'd like so first just a

00:40:49,750 --> 00:40:52,120
little bit of background on architecture

00:40:50,860 --> 00:40:53,560
and design so this is an industry which

00:40:52,120 --> 00:40:55,630
has historically always lagged behind

00:40:53,560 --> 00:40:59,770
technological advancements of other

00:40:55,630 --> 00:41:02,110
professions and are really typically our

00:40:59,770 --> 00:41:04,180
introduction to computation or to Python

00:41:02,110 --> 00:41:06,460
or to code in general is via visual

00:41:04,180 --> 00:41:07,870
programming so this is kind of what that

00:41:06,460 --> 00:41:09,520
looks like if anybody's ever seen it

00:41:07,870 --> 00:41:10,090
before I like to call this spaghetti and

00:41:09,520 --> 00:41:12,190
meatballs

00:41:10,090 --> 00:41:14,800
so essentially what it is is you have

00:41:12,190 --> 00:41:17,110
blocks and you have wires blocks are

00:41:14,800 --> 00:41:18,910
operators or variables data moves from

00:41:17,110 --> 00:41:21,460
left to right and you can really use

00:41:18,910 --> 00:41:23,560
that to design without knowing how to

00:41:21,460 --> 00:41:24,700
code so then once people kind of master

00:41:23,560 --> 00:41:26,650
this and they get really really

00:41:24,700 --> 00:41:28,960
comfortable with it we bust out the cool

00:41:26,650 --> 00:41:30,550
stuff which is I don't you can probably

00:41:28,960 --> 00:41:32,530
see that Python logo but that's that's a

00:41:30,550 --> 00:41:35,590
Python node that actually finds itself

00:41:32,530 --> 00:41:37,030
in one of these environments and write

00:41:35,590 --> 00:41:39,790
the simple stuff you start with the

00:41:37,030 --> 00:41:41,080
hello world and then very quickly you

00:41:39,790 --> 00:41:43,960
see that there's a lot of power behind

00:41:41,080 --> 00:41:45,820
the thing that's a shot of the IDE on

00:41:43,960 --> 00:41:47,170
the left and on the right is with little

00:41:45,820 --> 00:41:49,330
node looks like you can add more

00:41:47,170 --> 00:41:52,210
variables you can add more outputs and

00:41:49,330 --> 00:41:54,480
it really just opens you up to to a

00:41:52,210 --> 00:41:56,860
world which you couldn't access before

00:41:54,480 --> 00:41:58,360
so our main visual scripting

00:41:56,860 --> 00:42:00,310
environments are our grasshopper which

00:41:58,360 --> 00:42:02,230
finds itself in Rhino which is a program

00:42:00,310 --> 00:42:05,050
for design and 3d modeling and the other

00:42:02,230 --> 00:42:07,030
one is is dynamo found in Autodesk Revit

00:42:05,050 --> 00:42:08,460
which is a program for Building

00:42:07,030 --> 00:42:10,930
Information modelling and documentation

00:42:08,460 --> 00:42:12,160
so just a couple of examples to show you

00:42:10,930 --> 00:42:13,570
guys what some of this analysis looks

00:42:12,160 --> 00:42:15,730
like so it can be anything as simple

00:42:13,570 --> 00:42:17,890
this where we take a staircase and we

00:42:15,730 --> 00:42:19,660
say you know what where is the staircase

00:42:17,890 --> 00:42:20,980
too low where would somebody you know

00:42:19,660 --> 00:42:23,170
hit their heads walking up and down the

00:42:20,980 --> 00:42:25,690
staircase and we can ramp up the

00:42:23,170 --> 00:42:27,640
complexity we can work with

00:42:25,690 --> 00:42:29,110
computational geometry we can do forum

00:42:27,640 --> 00:42:31,420
analysis form generation form

00:42:29,110 --> 00:42:32,680
optimization all kinds of things like

00:42:31,420 --> 00:42:36,520
that

00:42:32,680 --> 00:42:39,070
and we can keep ramping up the kind of

00:42:36,520 --> 00:42:40,840
complicated nature of things so what

00:42:39,070 --> 00:42:43,300
this is doing is actually using Python

00:42:40,840 --> 00:42:46,120
to check down in box intersections and

00:42:43,300 --> 00:42:48,490
find unique conditions in a huge Tower

00:42:46,120 --> 00:42:52,270
which has hundreds of unique panels and

00:42:48,490 --> 00:42:53,950
thousands of panels total and with power

00:42:52,270 --> 00:42:56,350
Python again so not only can we do those

00:42:53,950 --> 00:42:58,480
intersections we can compare strings we

00:42:56,350 --> 00:42:59,770
can do all kinds of stuff especially

00:42:58,480 --> 00:43:02,860
with you know the multitudes of

00:42:59,770 --> 00:43:05,140
libraries that are available to us so

00:43:02,860 --> 00:43:06,880
one more jump in complexity again in the

00:43:05,140 --> 00:43:08,650
same environments but we also do a lot

00:43:06,880 --> 00:43:11,470
of analysis in these environments and an

00:43:08,650 --> 00:43:13,410
analysis is a super broad word I think

00:43:11,470 --> 00:43:16,690
that the examples here I'm showing are

00:43:13,410 --> 00:43:18,100
some solar analysis thermal analysis and

00:43:16,690 --> 00:43:20,680
I think an instance of structural

00:43:18,100 --> 00:43:22,060
analysis but what this is why the reason

00:43:20,680 --> 00:43:23,950
why this is great for us is because it

00:43:22,060 --> 00:43:25,240
gives us a visual output so when we come

00:43:23,950 --> 00:43:27,970
to the client later we don't just show

00:43:25,240 --> 00:43:31,450
them a CSV full of numbers we we show

00:43:27,970 --> 00:43:33,100
them you know actual takeaways and then

00:43:31,450 --> 00:43:34,480
we don't always just stay in the visual

00:43:33,100 --> 00:43:39,460
programming environment of course we

00:43:34,480 --> 00:43:42,160
also step into the real code so this is

00:43:39,460 --> 00:43:43,510
an example of case study like that so

00:43:42,160 --> 00:43:44,650
analysis we already talked about but

00:43:43,510 --> 00:43:46,090
what if you want to simulate right

00:43:44,650 --> 00:43:47,710
that's that's quite different and I'm

00:43:46,090 --> 00:43:49,630
sure you've heard of talks about it

00:43:47,710 --> 00:43:51,250
already so this is an instance where we

00:43:49,630 --> 00:43:52,860
actually intersected two so we use the

00:43:51,250 --> 00:43:55,150
visual programming interface to

00:43:52,860 --> 00:43:56,530
democratize that access to work with the

00:43:55,150 --> 00:43:59,350
the things that make sense to work with

00:43:56,530 --> 00:44:01,240
visually and then we prepare our actual

00:43:59,350 --> 00:44:01,660
ml models in the environment that makes

00:44:01,240 --> 00:44:04,060
sense

00:44:01,660 --> 00:44:06,640
scikit-learn you know your preferred IDU

00:44:04,060 --> 00:44:08,110
so on and so forth and the last time

00:44:06,640 --> 00:44:10,360
jumping complexity is this one right

00:44:08,110 --> 00:44:11,830
here so we're also kind of now waiting

00:44:10,360 --> 00:44:14,050
into the question of generative design

00:44:11,830 --> 00:44:16,330
so this is a case study where we have

00:44:14,050 --> 00:44:20,260
these as criteria and then we are

00:44:16,330 --> 00:44:22,060
essentially using these using these

00:44:20,260 --> 00:44:25,500
criteria to generate a number of designs

00:44:22,060 --> 00:44:27,250
that optimise any given criteria and and

00:44:25,500 --> 00:44:29,080
eventually kind of score the

00:44:27,250 --> 00:44:32,170
based on those criteria and then let the

00:44:29,080 --> 00:44:34,090
user select what they want to show so

00:44:32,170 --> 00:44:35,619
I'm getting really close to time and so

00:44:34,090 --> 00:44:38,140
I wouldn't just lastly just thank

00:44:35,619 --> 00:44:40,260
everybody for listening for organizing

00:44:38,140 --> 00:44:42,460
and contributing sharing your knowledge

00:44:40,260 --> 00:44:43,990
democratizing computational agency and

00:44:42,460 --> 00:44:46,210
in all the many forms that it entails

00:44:43,990 --> 00:44:48,070
and very last but not least please check

00:44:46,210 --> 00:44:50,130
out our work I hope you like it thank

00:44:48,070 --> 00:44:50,130
you

00:44:54,780 --> 00:44:58,690
all right on that speaker is talking

00:44:56,770 --> 00:45:00,250
about Bayesian hacking with a language

00:44:58,690 --> 00:45:00,580
called Python if you've heard of that

00:45:00,250 --> 00:45:06,609
one

00:45:00,580 --> 00:45:08,950
please give him a big hand good evening

00:45:06,609 --> 00:45:11,320
Pike on my name is Steven Holl I'm a

00:45:08,950 --> 00:45:14,220
data scientist at Booz Allen Hamilton I

00:45:11,320 --> 00:45:17,470
work out of Lexington Park Maryland on a

00:45:14,220 --> 00:45:19,300
navy contract for the f-18 Super Hornet

00:45:17,470 --> 00:45:22,420
if that's interesting we're looking for

00:45:19,300 --> 00:45:24,609
data scientists and data engineers I'm

00:45:22,420 --> 00:45:29,460
here tonight to show you a little toy

00:45:24,609 --> 00:45:33,640
problem that really sparked my curiosity

00:45:29,460 --> 00:45:36,430
so I'm gonna give you each of you a bag

00:45:33,640 --> 00:45:38,650
of coins there's 100 coins in that 99 of

00:45:36,430 --> 00:45:41,260
those coins are fair coins and one of

00:45:38,650 --> 00:45:44,050
those coins has heads on both sides you

00:45:41,260 --> 00:45:46,960
take a coin randomly out of that bag and

00:45:44,050 --> 00:45:51,010
flip it ten times and you get heads

00:45:46,960 --> 00:45:54,040
every time now how likely is it you got

00:45:51,010 --> 00:45:57,339
the unfair coin probably pretty likely

00:45:54,040 --> 00:46:01,530
I'd say like yeah definitely right but I

00:45:57,339 --> 00:46:04,000
don't know so how do we solve this well

00:46:01,530 --> 00:46:06,310
there's this thing called conditional

00:46:04,000 --> 00:46:09,550
probability and we don't like math

00:46:06,310 --> 00:46:11,859
because we're Python coders and so you

00:46:09,550 --> 00:46:15,490
can solve it that way but but let's

00:46:11,859 --> 00:46:17,619
simulate it instead so here's the

00:46:15,490 --> 00:46:19,410
analytic solution feel free to go back

00:46:17,619 --> 00:46:24,369
and look at this this is up on github

00:46:19,410 --> 00:46:27,070
but let's do this as a simulation so we

00:46:24,369 --> 00:46:30,359
like numpy we do it for all our

00:46:27,070 --> 00:46:31,700
numerical stuff and boquete plotting

00:46:30,359 --> 00:46:38,329
yeah

00:46:31,700 --> 00:46:38,829
sorry yep too much all right is that

00:46:38,329 --> 00:46:41,030
good

00:46:38,829 --> 00:46:44,030
all right we're gonna use bouquet for

00:46:41,030 --> 00:46:46,339
the plotting I'll show you a little bit

00:46:44,030 --> 00:46:48,890
now so here we go

00:46:46,339 --> 00:46:51,700
we're going to first start by building

00:46:48,890 --> 00:46:54,020
our system we need 100 coins there we go

00:46:51,700 --> 00:46:54,650
we're gonna define all those points to

00:46:54,020 --> 00:46:57,079
be 0

00:46:54,650 --> 00:46:59,570
now let's randomly pick one of those

00:46:57,079 --> 00:47:03,020
hundred coins and flip it to be 1

00:46:59,570 --> 00:47:06,349
instead that's the unfair coin now we

00:47:03,020 --> 00:47:09,980
need to define the draw flip routine so

00:47:06,349 --> 00:47:11,359
I told you we're gonna do 10 I made it

00:47:09,980 --> 00:47:13,970
so we could change that later if we

00:47:11,359 --> 00:47:16,880
wanted to and and if you used a

00:47:13,970 --> 00:47:20,660
different coin set you could you could

00:47:16,880 --> 00:47:22,430
change that as well but first we get the

00:47:20,660 --> 00:47:24,380
coin index we're gonna randomly pick one

00:47:22,430 --> 00:47:30,500
of the coins out of that bag and that's

00:47:24,380 --> 00:47:32,390
right here then I execute this okay

00:47:30,500 --> 00:47:35,960
make sure I don't get behind all right

00:47:32,390 --> 00:47:38,089
randomly pick one of those coins and and

00:47:35,960 --> 00:47:40,760
pull it out that's the drawn coin here

00:47:38,089 --> 00:47:43,130
now did we get the unfair coin or not

00:47:40,760 --> 00:47:44,930
well let's check it well if it's equal

00:47:43,130 --> 00:47:47,690
to one it's unfair we know we're gonna

00:47:44,930 --> 00:47:50,180
flip heads every time we don't have to

00:47:47,690 --> 00:47:52,130
do anything else skip if it's not the

00:47:50,180 --> 00:47:56,630
unfair coin well now you got a flip flip

00:47:52,130 --> 00:47:58,400
flip flip and down here each flip we're

00:47:56,630 --> 00:48:01,520
gonna give it a probability if it's

00:47:58,400 --> 00:48:04,730
greater in half it got heads if it's

00:48:01,520 --> 00:48:06,890
less than half it got tails and if this

00:48:04,730 --> 00:48:12,319
stays true the whole time it'll go to

00:48:06,890 --> 00:48:15,160
the end and we will yield the unfair

00:48:12,319 --> 00:48:18,800
coin will report back and say yes I got

00:48:15,160 --> 00:48:21,319
well we yield if that coin was unfair or

00:48:18,800 --> 00:48:23,890
fair so this is only gonna return

00:48:21,319 --> 00:48:29,210
something when you get heads ten times

00:48:23,890 --> 00:48:31,700
they execute that all right so here we

00:48:29,210 --> 00:48:34,069
go let's give it a run reaching the bag

00:48:31,700 --> 00:48:36,800
pull it out flip reaching the bag pull

00:48:34,069 --> 00:48:40,420
it out flip and I'm doing this five

00:48:36,800 --> 00:48:42,829
million times now this is where I say

00:48:40,420 --> 00:48:44,380
computers are awesome that's why we code

00:48:42,829 --> 00:48:46,420
right

00:48:44,380 --> 00:48:51,910
if you wanted to pay somebody to do this

00:48:46,420 --> 00:48:53,560
five million times I feel bad so yeah

00:48:51,910 --> 00:48:56,380
it's gonna take a little bit but I

00:48:53,560 --> 00:49:04,360
didn't optimize this or I just kind of

00:48:56,380 --> 00:49:09,010
threw this together so yeah there we go

00:49:04,360 --> 00:49:11,650
and we got 91% were unfair and that's a

00:49:09,010 --> 00:49:17,500
really close match to the analytic

00:49:11,650 --> 00:49:21,010
solution let's plot that so here is a

00:49:17,500 --> 00:49:24,820
bouquet plot and we see there on the

00:49:21,010 --> 00:49:28,470
x-axis then index for which time you

00:49:24,820 --> 00:49:31,360
flipped heads 10 times and the y-axis is

00:49:28,470 --> 00:49:33,310
looking back at all the previous runs

00:49:31,360 --> 00:49:35,800
averaging and say well out of all those

00:49:33,310 --> 00:49:37,720
previous runs this many times was the

00:49:35,800 --> 00:49:40,060
fair coin this many times with the

00:49:37,720 --> 00:49:42,100
unfair coin and the orange line there's

00:49:40,060 --> 00:49:44,410
a analytic result and the Blues is

00:49:42,100 --> 00:49:49,750
simulated you see they match pretty well

00:49:44,410 --> 00:49:54,310
so let's put it into an app and every

00:49:49,750 --> 00:49:57,970
time I flip pages so here on the right

00:49:54,310 --> 00:50:00,340
is a Boca app I put together it looks

00:49:57,970 --> 00:50:10,140
like every time essentially the same

00:50:00,340 --> 00:50:10,140
thing let's serve this up

00:50:12,670 --> 00:50:19,310
so let's go ahead and reach in I've set

00:50:17,870 --> 00:50:20,750
it to be pretty slow at first so you

00:50:19,310 --> 00:50:22,190
reach flip flip flip you're not gonna

00:50:20,750 --> 00:50:24,350
get much but they're right at the

00:50:22,190 --> 00:50:31,970
beginning okay you got the unfair coin

00:50:24,350 --> 00:50:37,810
let's speed this up so we're simulating

00:50:31,970 --> 00:50:41,150
look I'm yeah right so let this run and

00:50:37,810 --> 00:50:48,710
yeah pretty cool so you can do great

00:50:41,150 --> 00:50:49,910
stuff thank you thanks very much when

00:50:48,710 --> 00:50:51,290
you see the pretty graph and something

00:50:49,910 --> 00:50:53,030
moving that was the high point of the

00:50:51,290 --> 00:50:56,630
the whole talk so it's good to end on a

00:50:53,030 --> 00:50:59,060
high note the next talk coming up is

00:50:56,630 --> 00:51:00,260
James who's gonna be talking about wait

00:50:59,060 --> 00:51:01,910
a minute that's know what I remember

00:51:00,260 --> 00:51:03,200
what are you talking about tell us wait

00:51:01,910 --> 00:51:04,580
just give him a big hand and then maybe

00:51:03,200 --> 00:51:05,180
he'll tell us what he's about to talk

00:51:04,580 --> 00:51:07,270
about

00:51:05,180 --> 00:51:11,210
[Applause]

00:51:07,270 --> 00:51:12,650
I'll start the timer now okay well

00:51:11,210 --> 00:51:14,270
you'll see what it's about it's actually

00:51:12,650 --> 00:51:17,330
like two parts and I just put this

00:51:14,270 --> 00:51:19,070
together in like the last hour so don't

00:51:17,330 --> 00:51:21,290
complain about typos or like dangling

00:51:19,070 --> 00:51:23,410
modifiers or anything like that my name

00:51:21,290 --> 00:51:25,760
is James Saxon and thanks for having me

00:51:23,410 --> 00:51:28,190
what I'm gonna talk about first started

00:51:25,760 --> 00:51:30,080
out with a hike I have a friend a PhD

00:51:28,190 --> 00:51:32,900
computer science and he's like you know

00:51:30,080 --> 00:51:35,360
this this money and politics it's really

00:51:32,900 --> 00:51:38,720
bothering me this is what we do on hikes

00:51:35,360 --> 00:51:40,160
I guess and it's sort of stuck in my

00:51:38,720 --> 00:51:42,770
head cuz I guess I was exhausted I

00:51:40,160 --> 00:51:44,360
couldn't think straight so um I noticed

00:51:42,770 --> 00:51:46,790
that there was this thing called the

00:51:44,360 --> 00:51:48,290
Californian clean money campaign and it

00:51:46,790 --> 00:51:49,940
had this really bad website but they're

00:51:48,290 --> 00:51:51,500
having a meeting so I went to it and

00:51:49,940 --> 00:51:53,930
there were like nine hundred people on

00:51:51,500 --> 00:51:59,510
the mailing list a needy website and it

00:51:53,930 --> 00:52:01,490
was in 2002 okay so I was there and I I

00:51:59,510 --> 00:52:02,780
think oh they're gonna try to pass this

00:52:01,490 --> 00:52:04,400
thing where they have public funding of

00:52:02,780 --> 00:52:06,590
elections in two years that'll be great

00:52:04,400 --> 00:52:08,540
I can help with the website so I got my

00:52:06,590 --> 00:52:10,220
friend the hiker and his friend of

00:52:08,540 --> 00:52:14,270
usability designer and we spent a lot of

00:52:10,220 --> 00:52:16,760
time and we built a site and there it is

00:52:14,270 --> 00:52:17,480
now this is still alive I just took a

00:52:16,760 --> 00:52:21,920
screenshot

00:52:17,480 --> 00:52:24,890
it's got frames still okay but it it

00:52:21,920 --> 00:52:27,590
works and what was so cool is that

00:52:24,890 --> 00:52:29,240
this little tiny group the website had

00:52:27,590 --> 00:52:30,380
great information because use of li

00:52:29,240 --> 00:52:33,110
designer was giving me great information

00:52:30,380 --> 00:52:34,760
and and my friend was working with me

00:52:33,110 --> 00:52:36,920
and we were working all you know blood

00:52:34,760 --> 00:52:39,950
and sweat I wanted to get it out but it

00:52:36,920 --> 00:52:41,420
took too long we kept going and we

00:52:39,950 --> 00:52:42,890
scored an amazing executive director who

00:52:41,420 --> 00:52:46,370
Hill helped it grow and grow and grow

00:52:42,890 --> 00:52:49,070
over the years okay so one of the things

00:52:46,370 --> 00:52:51,290
I helped build was this fax tool it um

00:52:49,070 --> 00:52:52,580
it would create custom letters and send

00:52:51,290 --> 00:52:54,500
it to the representatives whether they

00:52:52,580 --> 00:52:56,870
were pro and con on something on these

00:52:54,500 --> 00:52:58,790
issues we were pushing and a simple

00:52:56,870 --> 00:53:01,100
little template which is still being

00:52:58,790 --> 00:53:03,800
used it's in PHP you type some text in

00:53:01,100 --> 00:53:04,910
and it can make many different kinds of

00:53:03,800 --> 00:53:06,830
facts as many different kinds of letter

00:53:04,910 --> 00:53:08,930
tools which have now been faxed to

00:53:06,830 --> 00:53:10,910
representatives in California for tons

00:53:08,930 --> 00:53:13,460
of time so much that they said you know

00:53:10,910 --> 00:53:16,540
please turn it off we get the message so

00:53:13,460 --> 00:53:19,580
it really helps make things happen and

00:53:16,540 --> 00:53:20,840
fast forward a couple years this

00:53:19,580 --> 00:53:22,460
happened which is the California

00:53:20,840 --> 00:53:24,440
disclose Act which was signed by

00:53:22,460 --> 00:53:27,410
Governor Brown last year which makes

00:53:24,440 --> 00:53:29,150
this sort of thing happen down now you

00:53:27,410 --> 00:53:30,950
see right here it used to be like paid

00:53:29,150 --> 00:53:31,550
for by Californians for California or

00:53:30,950 --> 00:53:33,920
something like that

00:53:31,550 --> 00:53:36,590
now it's paid for by let's take a look

00:53:33,920 --> 00:53:39,560
let me see if i zoom up here wrong one I

00:53:36,590 --> 00:53:44,900
got there oh look three dudes rich dudes

00:53:39,560 --> 00:53:47,450
Eli Broad Reed Hastings and I lost it

00:53:44,900 --> 00:53:52,100
alright welcome back

00:53:47,450 --> 00:53:54,680
well I really jumped hold on alright

00:53:52,100 --> 00:53:56,330
sorry thank you um uh and Michael

00:53:54,680 --> 00:53:58,370
Bloomberg okay so there's the three guys

00:53:56,330 --> 00:54:01,670
who paid for this ad so that's the most

00:53:58,370 --> 00:54:03,920
strong disclosure law in California that

00:54:01,670 --> 00:54:07,040
we have and so that's really fabulous

00:54:03,920 --> 00:54:08,780
and who would have thought that my fax

00:54:07,040 --> 00:54:11,540
tool was still working on that

00:54:08,780 --> 00:54:13,850
so so when you make code and you put in

00:54:11,540 --> 00:54:15,620
your sweat and skills it might be very

00:54:13,850 --> 00:54:17,450
useful and very powerful because this

00:54:15,620 --> 00:54:19,850
this law that Governor Brown passed

00:54:17,450 --> 00:54:21,440
might have died about 15 times as it

00:54:19,850 --> 00:54:22,580
went through things as it went through

00:54:21,440 --> 00:54:25,760
the different committees and everything

00:54:22,580 --> 00:54:27,290
but it made it and and and um with the

00:54:25,760 --> 00:54:28,990
website with the people that contributed

00:54:27,290 --> 00:54:32,000
it really worked so your code can live

00:54:28,990 --> 00:54:33,650
what's coming up next a social media

00:54:32,000 --> 00:54:35,330
disclose act right because we need

00:54:33,650 --> 00:54:37,550
something like that in facebook and

00:54:35,330 --> 00:54:38,070
everywhere else also a petition

00:54:37,550 --> 00:54:40,590
disclosure

00:54:38,070 --> 00:54:42,360
so these things can now happen there's a

00:54:40,590 --> 00:54:43,740
lot of people in it how many people are

00:54:42,360 --> 00:54:45,300
in the organization now a hundred

00:54:43,740 --> 00:54:46,980
thousand people so that little website

00:54:45,300 --> 00:54:47,940
has now grown to a hundred thousand

00:54:46,980 --> 00:54:50,850
people which is great

00:54:47,940 --> 00:54:53,730
another thing open-source paper ballot

00:54:50,850 --> 00:54:55,470
voting that's what's going on next and

00:54:53,730 --> 00:54:57,090
of course we know what Def Con did with

00:54:55,470 --> 00:54:59,280
the Oprah with the not open source

00:54:57,090 --> 00:55:00,510
voting they sort of smashed the machines

00:54:59,280 --> 00:55:02,810
but they also hacked them and broke a

00:55:00,510 --> 00:55:06,620
ball so that's kind of a big problem um

00:55:02,810 --> 00:55:09,000
so look right here is a picture of 125

00:55:06,620 --> 00:55:11,220
non-programmers non-state reference

00:55:09,000 --> 00:55:15,300
state representatives non-programmers

00:55:11,220 --> 00:55:16,500
who are supporting open source so open

00:55:15,300 --> 00:55:19,290
source is not just for programming

00:55:16,500 --> 00:55:21,810
anymore there it is

00:55:19,290 --> 00:55:23,820
and so that's what's happening now and

00:55:21,810 --> 00:55:26,790
the idea is that there's going to be an

00:55:23,820 --> 00:55:29,220
eight million dollar matching fund for

00:55:26,790 --> 00:55:31,890
building the system in San Francisco to

00:55:29,220 --> 00:55:33,960
try to get ready for the 2020 elections

00:55:31,890 --> 00:55:36,960
so that's the second part of the message

00:55:33,960 --> 00:55:38,400
is this is happening and they're working

00:55:36,960 --> 00:55:41,940
on getting matching funds to build the

00:55:38,400 --> 00:55:44,430
system and it's gonna be good new public

00:55:41,940 --> 00:55:46,140
license so that it's always free and any

00:55:44,430 --> 00:55:48,180
County can use it in any state can use

00:55:46,140 --> 00:55:49,940
it in any country can use it and make it

00:55:48,180 --> 00:55:52,470
make it move forward it'll be basically

00:55:49,940 --> 00:55:55,140
off-the-shelf components touchscreen

00:55:52,470 --> 00:55:56,730
voting but a printed paper ballot which

00:55:55,140 --> 00:55:58,620
goes into a box which you can count with

00:55:56,730 --> 00:56:01,800
so that's the key thing is to keep it

00:55:58,620 --> 00:56:03,150
separate and people agree open source

00:56:01,800 --> 00:56:04,950
initiative is a supporter AFF is a

00:56:03,150 --> 00:56:08,430
supporter github is a supporter and many

00:56:04,950 --> 00:56:11,490
many more I've got the link there so

00:56:08,430 --> 00:56:14,640
jump in contribute it might be in Python

00:56:11,490 --> 00:56:17,730
so you know find the source and and join

00:56:14,640 --> 00:56:19,620
in with it um and it was very worth it

00:56:17,730 --> 00:56:21,120
it was hard but it was worth it and and

00:56:19,620 --> 00:56:24,390
you can make a difference um I was

00:56:21,120 --> 00:56:26,100
inspired by the talk last last night and

00:56:24,390 --> 00:56:27,660
there's going to be a meeting on tech

00:56:26,100 --> 00:56:30,570
and politics at 11 a.m. tomorrow so I

00:56:27,660 --> 00:56:32,400
wanted to shout out for that SF open

00:56:30,570 --> 00:56:35,460
voting is where it's all happening and

00:56:32,400 --> 00:56:37,700
I'm I James on Twitter so thank you very

00:56:35,460 --> 00:56:37,700
much

00:56:41,819 --> 00:56:48,579
thank you James already must dust off my

00:56:44,079 --> 00:56:51,009
fax machine the next up fixes address is

00:56:48,579 --> 00:56:53,549
going to talk about processing please

00:56:51,009 --> 00:56:53,549
clap for him

00:56:54,790 --> 00:57:01,660
so hello hello good night well I'm

00:56:58,869 --> 00:57:07,990
undress I'm from Mexico and this is my

00:57:01,660 --> 00:57:10,030
first bike on so well why should we care

00:57:07,990 --> 00:57:14,140
about processing well but what is

00:57:10,030 --> 00:57:17,890
processing so we know programming is fun

00:57:14,140 --> 00:57:19,480
it's rewarding is challenging it takes

00:57:17,890 --> 00:57:23,140
it pays the bills

00:57:19,480 --> 00:57:28,090
but not everywhere not everyone knows

00:57:23,140 --> 00:57:31,470
that and I was in that truck so my first

00:57:28,090 --> 00:57:36,520
experience programming was in wrote

00:57:31,470 --> 00:57:41,680
retrospective like this but what I

00:57:36,520 --> 00:57:46,030
really saw was something like this he

00:57:41,680 --> 00:57:49,660
lives everywhere so and there was this

00:57:46,030 --> 00:57:54,820
dumb thing that splitted text to the

00:57:49,660 --> 00:57:58,390
screen so I I wondered how if it could

00:57:54,820 --> 00:58:01,690
render so pretty windows and so and

00:57:58,390 --> 00:58:06,880
those pretty effects how was I stuck

00:58:01,690 --> 00:58:09,400
with something like this so when Frye

00:58:06,880 --> 00:58:14,970
and kathiria's from the processing

00:58:09,400 --> 00:58:21,730
organization they built this processing

00:58:14,970 --> 00:58:25,750
this java library to to avoid that kind

00:58:21,730 --> 00:58:29,050
of things so what is processing well as

00:58:25,750 --> 00:58:32,410
I as I already said it was at first a

00:58:29,050 --> 00:58:44,250
Java library and what can you do with it

00:58:32,410 --> 00:58:57,840
well you can well you can do nice things

00:58:44,250 --> 00:59:01,029
graphical things so I love simulating so

00:58:57,840 --> 00:59:08,199
you can do be sensational

00:59:01,029 --> 00:59:10,959
that or maybe if you if you love

00:59:08,199 --> 00:59:15,789
recursive trees you can do recursive

00:59:10,959 --> 00:59:20,739
trees you can do like simulations if

00:59:15,789 --> 00:59:27,400
you're scientists you can do random

00:59:20,739 --> 00:59:31,390
visualization which you like another

00:59:27,400 --> 00:59:34,900
scientific visualization or and from

00:59:31,390 --> 00:59:36,510
there you can go on and maybe make music

00:59:34,900 --> 00:59:51,429
with it

00:59:36,510 --> 00:59:51,429
[Music]

00:59:52,479 --> 01:00:19,309
were these so and for the mothers well

01:00:07,999 --> 01:00:22,609
for the mothers here this associate was

01:00:19,309 --> 01:00:28,160
started like a Java library but then

01:00:22,609 --> 01:00:33,140
move on to two other languages so yeah

01:00:28,160 --> 01:00:38,690
and Python had hurried its part on it

01:00:33,140 --> 01:00:42,049
so if their processing is there a Plato

01:00:38,690 --> 01:00:43,009
Python flavor yes but it's the officials

01:00:42,049 --> 01:00:45,979
in Guyton's

01:00:43,009 --> 01:00:49,970
so it's in top of Java it's limited it

01:00:45,979 --> 01:00:54,829
cannot use C libraries it's Python to

01:00:49,970 --> 01:00:58,099
and not even Python to but a strain on

01:00:54,829 --> 01:00:58,700
Hettinger may have said there must be a

01:00:58,099 --> 01:01:05,569
better way

01:00:58,700 --> 01:01:08,390
so and there is in in the last year

01:01:05,569 --> 01:01:11,599
there was this thing this project p5

01:01:08,390 --> 01:01:14,630
that is a processing port to Python so

01:01:11,599 --> 01:01:17,900
you can install it well a little

01:01:14,630 --> 01:01:22,849
disclaimer I'm not the developer but I'm

01:01:17,900 --> 01:01:26,469
spreading the word processing is awesome

01:01:22,849 --> 01:01:32,119
it's a learning visualization equation -

01:01:26,469 --> 01:01:37,690
and we can help to develop this so that

01:01:32,119 --> 01:01:37,690
more people can use it thank you

01:01:43,060 --> 01:01:49,210
thank you and the race up next is

01:01:45,350 --> 01:01:55,760
Meredith give me a hand

01:01:49,210 --> 01:01:58,130
okay so the web is I will assert not

01:01:55,760 --> 01:02:00,920
very pythonic and it's also notoriously

01:01:58,130 --> 01:02:03,140
really difficult to program for are

01:02:00,920 --> 01:02:05,030
these two problems related could we

01:02:03,140 --> 01:02:08,900
actually make the web a better platform

01:02:05,030 --> 01:02:10,940
by making it more pythonic well firstly

01:02:08,900 --> 01:02:13,340
what do I mean by the web is not very

01:02:10,940 --> 01:02:15,050
pythonic well if you're making a typical

01:02:13,340 --> 01:02:16,610
web app your data is going to have to be

01:02:15,050 --> 01:02:18,890
a bunch of different shapes on the way

01:02:16,610 --> 01:02:21,650
it's going to start out usually as data

01:02:18,890 --> 01:02:24,140
within a tables in a database which you

01:02:21,650 --> 01:02:26,300
access by SQL you could then go to have

01:02:24,140 --> 01:02:28,400
to turn that into objects usually

01:02:26,300 --> 01:02:29,690
patient objects on your server which

01:02:28,400 --> 01:02:31,730
then have methods and attributes of

01:02:29,690 --> 01:02:34,520
their own you're then going to have to

01:02:31,730 --> 01:02:37,630
represent this a in jason with a whole

01:02:34,520 --> 01:02:40,100
bunch of rest endpoints to access and

01:02:37,630 --> 01:02:42,380
manipulate them send that over HTTP

01:02:40,100 --> 01:02:45,290
where your javascript is going to turn

01:02:42,380 --> 01:02:46,880
these HTTP requests into objects in

01:02:45,290 --> 01:02:49,700
JavaScript with their own methods and

01:02:46,880 --> 01:02:51,650
then you have to turn those into HTML

01:02:49,700 --> 01:02:54,620
Dom objects and then somehow render

01:02:51,650 --> 01:02:56,450
those into the pixels on the screen at

01:02:54,620 --> 01:02:58,970
every level every one of these

01:02:56,450 --> 01:03:01,520
transitions has a whole bunch of boring

01:02:58,970 --> 01:03:03,500
and repetitive and tedious translation

01:03:01,520 --> 01:03:05,930
work and that is an invitation to

01:03:03,500 --> 01:03:08,330
exactly the wrong sort of magic so let

01:03:05,930 --> 01:03:11,630
me take a completely unfair potshot at

01:03:08,330 --> 01:03:14,840
SQL alchemy which is a library for

01:03:11,630 --> 01:03:18,200
translating data in databases with SQL

01:03:14,840 --> 01:03:19,310
into Python objects it's actually really

01:03:18,200 --> 01:03:21,620
good at it which is why this is an

01:03:19,310 --> 01:03:23,840
unfair potshot you can even write query

01:03:21,620 --> 01:03:26,330
expressions like this right book top

01:03:23,840 --> 01:03:28,760
price is less than 20 that's nice but of

01:03:26,330 --> 01:03:30,980
course the process from getting from

01:03:28,760 --> 01:03:33,740
that expression into SQL we can run on

01:03:30,980 --> 01:03:36,800
the database is black magic it's it got

01:03:33,740 --> 01:03:38,240
metaclasses it's got overloading pythons

01:03:36,800 --> 01:03:39,230
standard operators to do something

01:03:38,240 --> 01:03:41,720
completely different to what they

01:03:39,230 --> 01:03:44,060
normally do and that's cool if you do it

01:03:41,720 --> 01:03:46,160
once but if you have this amount of

01:03:44,060 --> 01:03:48,440
magic every level in your stack you are

01:03:46,160 --> 01:03:50,480
in for a bad day and of course you do

01:03:48,440 --> 01:03:53,180
right you have our ends to turn database

01:03:50,480 --> 01:03:54,680
tables into server objects you have rest

01:03:53,180 --> 01:03:54,950
frameworks to try and help you express

01:03:54,680 --> 01:03:57,140
the

01:03:54,950 --> 01:03:58,640
server objects in Jason you have

01:03:57,140 --> 01:04:00,260
JavaScript frameworks that turn these

01:03:58,640 --> 01:04:02,240
patterns of HTTP requests into

01:04:00,260 --> 01:04:03,619
JavaScript objects you have templating

01:04:02,240 --> 01:04:06,349
engines that turn these JavaScript

01:04:03,619 --> 01:04:08,119
objects into the Dom and you have CSS

01:04:06,349 --> 01:04:10,869
frameworks to help you turn this Dom

01:04:08,119 --> 01:04:13,820
into the pixels you want on the screen

01:04:10,869 --> 01:04:17,270
well how does that stuff up against pet

01:04:13,820 --> 01:04:19,190
20 the Zen of Python there should be one

01:04:17,270 --> 01:04:21,730
and preferably only one way to do it oh

01:04:19,190 --> 01:04:21,730
boy

01:04:22,420 --> 01:04:26,450
explicit is better than implicit what

01:04:24,470 --> 01:04:28,040
all these frameworks are implicit by

01:04:26,450 --> 01:04:30,500
their very nature it's the only way they

01:04:28,040 --> 01:04:31,970
can save you that work and if the

01:04:30,500 --> 01:04:35,180
implementation is that hard to explain

01:04:31,970 --> 01:04:39,800
it's a bad idea look at all the magic of

01:04:35,180 --> 01:04:42,349
all these levels in the stack okay so if

01:04:39,800 --> 01:04:44,060
the normal web stack is so unpleasant

01:04:42,349 --> 01:04:47,690
what would a more pythonic version look

01:04:44,060 --> 01:04:50,630
like well Python everywhere maybe so in

01:04:47,690 --> 01:04:52,220
anvil we do this by having Python code

01:04:50,630 --> 01:04:54,200
and Python objects everywhere even on

01:04:52,220 --> 01:04:56,750
the client we use the sculpt Python to

01:04:54,200 --> 01:04:59,869
JavaScript compiler for the client-side

01:04:56,750 --> 01:05:01,609
code check it out it's great so if we're

01:04:59,869 --> 01:05:03,349
looking at this stack if we were working

01:05:01,609 --> 01:05:04,490
all in Python if we were making a

01:05:03,349 --> 01:05:06,050
breasts request

01:05:04,490 --> 01:05:08,900
we'd make a function call to the

01:05:06,050 --> 01:05:10,550
requests library and then after some

01:05:08,900 --> 01:05:12,859
long time that would emerge as a

01:05:10,550 --> 01:05:15,950
function call to a flask endpoint well

01:05:12,859 --> 01:05:17,030
if all we wanted was a function call why

01:05:15,950 --> 01:05:19,640
not make the function call the

01:05:17,030 --> 01:05:21,470
abstraction right so that's what we do

01:05:19,640 --> 01:05:23,000
we take a function on the server we tag

01:05:21,470 --> 01:05:24,619
it hey you can call this from the client

01:05:23,000 --> 01:05:27,200
and then we can make this a function

01:05:24,619 --> 01:05:29,569
call where from the client through the

01:05:27,200 --> 01:05:31,730
server we can have all the normal Python

01:05:29,569 --> 01:05:34,609
arguments keyword arguments and return

01:05:31,730 --> 01:05:36,710
values and it's an awful lot nicer okay

01:05:34,609 --> 01:05:38,390
so what kind of value should we be able

01:05:36,710 --> 01:05:40,910
to pass in as these arguments or return

01:05:38,390 --> 01:05:43,250
out well I mean strings Dix lists

01:05:40,910 --> 01:05:45,260
anything that you can do in Jason

01:05:43,250 --> 01:05:47,270
obviously but we want objects from as

01:05:45,260 --> 01:05:49,640
far down this stack as we can get away

01:05:47,270 --> 01:05:51,560
with but unfortunately it's a web

01:05:49,640 --> 01:05:54,230
service so this bottom this stack needs

01:05:51,560 --> 01:05:55,700
to be stateless because it's serving a

01:05:54,230 --> 01:05:58,250
lot of clients it can't afford to hold

01:05:55,700 --> 01:05:59,750
all the objects in RAM so we say we're

01:05:58,250 --> 01:06:00,890
going to support stateless objects and

01:05:59,750 --> 01:06:03,530
stateless object anything with an

01:06:00,890 --> 01:06:07,099
immutable ID some list of methods and

01:06:03,530 --> 01:06:08,270
maybe some permissions and a good use

01:06:07,099 --> 01:06:10,880
case for this ah

01:06:08,270 --> 01:06:12,860
bass rose right the ID is the unique ID

01:06:10,880 --> 01:06:15,530
of that database row we have methods

01:06:12,860 --> 01:06:17,600
like update delete and if we is Python

01:06:15,530 --> 01:06:19,400
so if we implement get item and set item

01:06:17,600 --> 01:06:21,490
we've now got square bracket dictionary

01:06:19,400 --> 01:06:23,600
style indexing on our database rows

01:06:21,490 --> 01:06:26,630
obviously we don't want anyone to do

01:06:23,600 --> 01:06:28,640
arbitrary calls on database rows from

01:06:26,630 --> 01:06:32,990
the client so we have signatures so they

01:06:28,640 --> 01:06:36,710
can only make calls on objects that the

01:06:32,990 --> 01:06:38,660
server has already returns to them which

01:06:36,710 --> 01:06:41,210
is a fairly nice interface for security

01:06:38,660 --> 01:06:44,360
purposes so what we end up with is a

01:06:41,210 --> 01:06:46,310
process where we can have objects in the

01:06:44,360 --> 01:06:47,780
database of Bro in the database and then

01:06:46,310 --> 01:06:49,910
return that straight from a function

01:06:47,780 --> 01:06:51,680
call in the server straight to the

01:06:49,910 --> 01:06:55,040
client and the same object we can index

01:06:51,680 --> 01:06:56,540
it in client code and that it so that's

01:06:55,040 --> 01:06:57,710
one object passed all the way from the

01:06:56,540 --> 01:07:00,050
database to the client so we've skipped

01:06:57,710 --> 01:07:01,580
a whole bunch of these layers and that's

01:07:00,050 --> 01:07:05,080
our little contribution to making the

01:07:01,580 --> 01:07:05,080
web more pythonic thank you very much

01:07:09,450 --> 01:07:14,230
lasting our last Speaker of the day is

01:07:12,460 --> 01:07:16,960
Kenneth who's gonna tell us about the

01:07:14,230 --> 01:07:19,420
PSF specifically running for the boards

01:07:16,960 --> 01:07:21,130
thereof see I can read you can too we've

01:07:19,420 --> 01:07:22,660
duplicated the information several times

01:07:21,130 --> 01:07:24,339
there I'll keep talking for another

01:07:22,660 --> 01:07:26,760
second and a half okay Kenneth please

01:07:24,339 --> 01:07:26,760
give a big hand

01:07:29,900 --> 01:07:34,140
hi everybody my name is Kenneth writes

01:07:32,430 --> 01:07:36,450
if you'd like to you can follow me on

01:07:34,140 --> 01:07:38,010
Twitter at act Kenneth writes and I am a

01:07:36,450 --> 01:07:40,950
board member of the Python Software

01:07:38,010 --> 01:07:42,540
Foundation if you are heavily involved

01:07:40,950 --> 01:07:44,880
with Python as I assume everyone in this

01:07:42,540 --> 01:07:46,560
room is because you're here at PyCon I

01:07:44,880 --> 01:07:47,990
heavily recommend that you become a

01:07:46,560 --> 01:07:50,040
member of the Python Software Foundation

01:07:47,990 --> 01:07:51,180
if you're not familiar with it the

01:07:50,040 --> 01:07:53,160
mission of the Python Software

01:07:51,180 --> 01:07:54,630
Foundation is to promote protect and

01:07:53,160 --> 01:07:56,850
advance the Python programming language

01:07:54,630 --> 01:07:58,680
and to support and facilitate the growth

01:07:56,850 --> 01:08:00,210
of a diverse and international community

01:07:58,680 --> 01:08:02,550
of Python programmers that's our

01:08:00,210 --> 01:08:04,740
official mission statement so the

01:08:02,550 --> 01:08:06,540
primary functions of the Python Software

01:08:04,740 --> 01:08:08,430
Foundation are to protect the

01:08:06,540 --> 01:08:10,620
intellectual property of Python that's C

01:08:08,430 --> 01:08:12,090
Python itself as well as Python and

01:08:10,620 --> 01:08:14,340
other things that are related to it and

01:08:12,090 --> 01:08:15,690
offer grants to Python user groups and

01:08:14,340 --> 01:08:18,060
educational programs around the world

01:08:15,690 --> 01:08:20,280
and pay for and orchestrate Python u.s.

01:08:18,060 --> 01:08:21,960
and North America so it's responsible

01:08:20,280 --> 01:08:23,610
for this or this event that we're

01:08:21,960 --> 01:08:31,260
partaking in right now which is

01:08:23,610 --> 01:08:33,060
wonderful so give them a clap so I have

01:08:31,260 --> 01:08:35,190
two URLs for you if you'd like to sign

01:08:33,060 --> 01:08:36,660
up to be a sponsor of the PSF the

01:08:35,190 --> 01:08:37,890
donations are always welcome and there's

01:08:36,660 --> 01:08:40,110
different many different levels

01:08:37,890 --> 01:08:41,220
available there's a URL here for you and

01:08:40,110 --> 01:08:44,190
if you'd like to become a member

01:08:41,220 --> 01:08:46,320
membership is free you can just go go to

01:08:44,190 --> 01:08:49,680
this URL as well to sign up to be a

01:08:46,320 --> 01:08:50,960
member but I'm board member and that's

01:08:49,680 --> 01:08:53,910
what I want to talk to you about today

01:08:50,960 --> 01:08:56,580
we have 13 members of the board of the

01:08:53,910 --> 01:09:00,000
PSF and it turns out that there is an

01:08:56,580 --> 01:09:02,250
election cycle and in which people get

01:09:00,000 --> 01:09:04,980
elected to become board members and

01:09:02,250 --> 01:09:05,640
right now there are 4 seats available on

01:09:04,980 --> 01:09:08,850
the board

01:09:05,640 --> 01:09:13,020
I am excited not to rerun this year for

01:09:08,850 --> 01:09:15,630
example and we have two people who have

01:09:13,020 --> 01:09:18,720
decided to be candidates so far so

01:09:15,630 --> 01:09:21,450
there's room for more this ridiculous

01:09:18,720 --> 01:09:23,940
link here you can go to ok if you'd like

01:09:21,450 --> 01:09:26,340
to learn more about that or if you want

01:09:23,940 --> 01:09:28,400
to cheat you can google 2018 PSF board

01:09:26,340 --> 01:09:31,830
election and it's the second link down

01:09:28,400 --> 01:09:34,440
ok and that it has the UART that's the

01:09:31,830 --> 01:09:36,390
information that will tell you all the

01:09:34,440 --> 01:09:37,980
current candidates as well as the wiki

01:09:36,390 --> 01:09:40,290
page for if you want to submit someone

01:09:37,980 --> 01:09:41,580
that you know or yourself to be a board

01:09:40,290 --> 01:09:44,000
member

01:09:41,580 --> 01:09:46,530
the deadline for submissions is May 25th

01:09:44,000 --> 01:09:49,550
2018 and the election is gonna be

01:09:46,530 --> 01:09:51,750
occurring on June 1st the June 10th and

01:09:49,550 --> 01:09:53,820
there's currently two candidates as I

01:09:51,750 --> 01:09:55,170
said I want to encourage everyone who's

01:09:53,820 --> 01:09:56,370
here that if they know anyone who's

01:09:55,170 --> 01:09:57,690
thinking about running or that they

01:09:56,370 --> 01:09:59,550
think would make an excellent candidate

01:09:57,690 --> 01:10:02,100
to represent the Python community or

01:09:59,550 --> 01:10:06,270
this if they're from especially from a

01:10:02,100 --> 01:10:09,240
unique part of the world to advocate for

01:10:06,270 --> 01:10:10,620
them to run encourage them to run and if

01:10:09,240 --> 01:10:12,840
they have any questions about that we're

01:10:10,620 --> 01:10:16,920
gonna be holding a Q&A session on slack

01:10:12,840 --> 01:10:18,270
on May 22nd 2018 so if anyone has any

01:10:16,920 --> 01:10:22,500
questions about that they can reach out

01:10:18,270 --> 01:10:25,170
to the board or the on over email and

01:10:22,500 --> 01:10:26,910
we'll be happy to facilitate any quick

01:10:25,170 --> 01:10:29,430
answers or questions that anybody has

01:10:26,910 --> 01:10:32,340
and of course to follow the PSF on

01:10:29,430 --> 01:10:39,090
twitter it's at the PSF and thank you

01:10:32,340 --> 01:10:40,590
very much all right thanks very much

01:10:39,090 --> 01:10:42,480
thanks very much Kenneth thanks very

01:10:40,590 --> 01:10:43,530
much the PSF thanks very much to each

01:10:42,480 --> 01:10:45,180
and every one of the lightning talk

01:10:43,530 --> 01:10:46,680
speakers and thanks very much to each

01:10:45,180 --> 01:10:48,150
and every one of you for being here

01:10:46,680 --> 01:10:52,440
thanks to all the volunteers thanks to

01:10:48,150 --> 01:10:54,690
the conference staff thanks to you know

01:10:52,440 --> 01:10:56,820
other thankful people have a lovely

01:10:54,690 --> 01:11:00,870
evening good night see you tomorrow

01:10:56,820 --> 01:11:00,870

YouTube URL: https://www.youtube.com/watch?v=c-I0md_3fbQ


