Title: How Import Works
Publication date: 2013-03-24
Playlist: PyCon 2013
Description: 
	Brett Cannon
This talk will go over how the simple ``from sys import version`` turns out to be slightly complicated. The details of imports -- from how the import statement is interpreted to deciding what object to return -- will be discussed. While
Captions: 
	00:00:00,030 --> 00:00:11,700
please give a warm welcome to dr. Brett

00:00:01,979 --> 00:00:14,190
cannon Thank You Katherine

00:00:11,700 --> 00:00:15,780
just a quick thing first shoutout to

00:00:14,190 --> 00:00:17,760
google my employer for paying for me to

00:00:15,780 --> 00:00:19,199
come out here I appreciate it

00:00:17,760 --> 00:00:20,789
if you want to find me on the random

00:00:19,199 --> 00:00:22,529
show social networks out there you can

00:00:20,789 --> 00:00:24,119
go to about me slash Brett cannon

00:00:22,529 --> 00:00:27,029
because that's all in one line instead

00:00:24,119 --> 00:00:29,310
of three or five lines basically the

00:00:27,029 --> 00:00:32,219
structure of this talk is I'm going to

00:00:29,310 --> 00:00:35,940
go over how import works in Python 3.3

00:00:32,219 --> 00:00:38,070
now if you are using a older version

00:00:35,940 --> 00:00:39,750
don't worry conceptually everything I'm

00:00:38,070 --> 00:00:41,550
going to talk about is going to be more

00:00:39,750 --> 00:00:44,430
or less right it's just semantics

00:00:41,550 --> 00:00:46,200
exactly how the code works is not but

00:00:44,430 --> 00:00:48,899
don't worry it should still fall out and

00:00:46,200 --> 00:00:50,309
make sense and without further ado I'm

00:00:48,899 --> 00:00:53,460
going to get going so I hopefully can

00:00:50,309 --> 00:00:56,100
get through everything but to start I

00:00:53,460 --> 00:00:57,930
need to go over some terminology so

00:00:56,100 --> 00:00:59,489
there's something called a loader and

00:00:57,930 --> 00:01:01,230
basically a loader does what exactly

00:00:59,489 --> 00:01:03,449
what it sounds like it loads a module so

00:01:01,230 --> 00:01:06,000
this is basically the thing that takes a

00:01:03,449 --> 00:01:08,670
module object six it and desist stop

00:01:06,000 --> 00:01:10,380
modules makes it become the module

00:01:08,670 --> 00:01:11,580
you're going to be working with and gets

00:01:10,380 --> 00:01:13,680
it back to you when you run an import

00:01:11,580 --> 00:01:15,299
statement there's also something called

00:01:13,680 --> 00:01:17,460
a finder which basically finds our

00:01:15,299 --> 00:01:20,100
module this is how Python is able to go

00:01:17,460 --> 00:01:22,140
okay you're looking for the OS module

00:01:20,100 --> 00:01:25,170
where the heck is that on your file

00:01:22,140 --> 00:01:27,509
system and in terms of finders is kind

00:01:25,170 --> 00:01:29,820
of two levels of finders there's a path

00:01:27,509 --> 00:01:32,850
entry finder which basically searches

00:01:29,820 --> 00:01:35,070
for modules in a specific location in

00:01:32,850 --> 00:01:37,140
the import path typically this is sis

00:01:35,070 --> 00:01:39,000
top path or dunder path if you're

00:01:37,140 --> 00:01:40,979
looking in a package and then there's

00:01:39,000 --> 00:01:43,409
also something conceptually called a

00:01:40,979 --> 00:01:45,810
meta path finder which basically are

00:01:43,409 --> 00:01:47,610
finders on system Edit path I should

00:01:45,810 --> 00:01:50,340
give a quick shout-out to Barry Warsaw

00:01:47,610 --> 00:01:51,810
who rewrote all of the language

00:01:50,340 --> 00:01:53,070
reference for import and made them a

00:01:51,810 --> 00:01:54,720
heck of a lot more understandable

00:01:53,070 --> 00:01:55,860
because lord knows I had a hell of a

00:01:54,720 --> 00:01:58,530
time understand what all that was about

00:01:55,860 --> 00:02:02,670
when I rewrote all this for import live

00:01:58,530 --> 00:02:04,200
in for Python 3.3 and I should say that

00:02:02,670 --> 00:02:05,820
up front all this code you're gonna see

00:02:04,200 --> 00:02:07,829
is more or less going to be accurate and

00:02:05,820 --> 00:02:10,200
is already in three point three in the

00:02:07,829 --> 00:02:11,730
import Lib package before Python three

00:02:10,200 --> 00:02:12,800
point three important lib already

00:02:11,730 --> 00:02:14,900
existed

00:02:12,800 --> 00:02:16,580
starting Python 3.3 import lipids the

00:02:14,900 --> 00:02:19,640
actual implementation of import no

00:02:16,580 --> 00:02:20,810
longer the C code in import not C so you

00:02:19,640 --> 00:02:23,060
can actually now look at the source code

00:02:20,810 --> 00:02:27,230
in pure Python and actually grasp what

00:02:23,060 --> 00:02:29,540
the heck is going on so just start how

00:02:27,230 --> 00:02:32,030
the heck does your import call actually

00:02:29,540 --> 00:02:33,650
do something well as you know Python

00:02:32,030 --> 00:02:35,930
likes to really expose everything to you

00:02:33,650 --> 00:02:37,400
so what really an import statement does

00:02:35,930 --> 00:02:39,710
is become an actual function call

00:02:37,400 --> 00:02:42,350
underneath the hood so here's a basic

00:02:39,710 --> 00:02:43,730
diagram of how your call for a from

00:02:42,350 --> 00:02:45,740
import statement actually becomes a call

00:02:43,730 --> 00:02:49,520
to the dunder import function in the

00:02:45,740 --> 00:02:54,560
built-in namespace there's basically one

00:02:49,520 --> 00:02:56,870
to five parts to it it's a lot so let's

00:02:54,560 --> 00:02:59,540
say you're doing from dot dot spam

00:02:56,870 --> 00:03:01,490
import flying circus so any name between

00:02:59,540 --> 00:03:02,900
from an import not including the dots

00:03:01,490 --> 00:03:05,260
goes in the first part so that's

00:03:02,900 --> 00:03:08,120
basically the name if you're just doing

00:03:05,260 --> 00:03:11,300
import whatever that whole part would go

00:03:08,120 --> 00:03:12,830
there the Global's of the place where

00:03:11,300 --> 00:03:15,080
you make the dunder import call gets

00:03:12,830 --> 00:03:16,760
passed in the locals gets passed in and

00:03:15,080 --> 00:03:19,280
these all as I said the global state of

00:03:16,760 --> 00:03:21,140
the caller on the slide this will make

00:03:19,280 --> 00:03:22,970
sense of why this happens later

00:03:21,140 --> 00:03:27,830
there's the from list which I will

00:03:22,970 --> 00:03:28,940
really complain about later unless I'm

00:03:27,830 --> 00:03:30,140
really lucky and I take too long and

00:03:28,940 --> 00:03:33,260
watch I'll skip it you won't hear me

00:03:30,140 --> 00:03:35,150
swear that's what comes after import

00:03:33,260 --> 00:03:36,170
went in a from import and basically it's

00:03:35,150 --> 00:03:39,920
just a little bits when you say like

00:03:36,170 --> 00:03:41,330
from food import bar bass whatever and

00:03:39,920 --> 00:03:43,010
then the number at the end is for

00:03:41,330 --> 00:03:45,680
explicit relative imports when you have

00:03:43,010 --> 00:03:47,270
those prefixed dots to say alright look

00:03:45,680 --> 00:03:49,670
in this location in the package look two

00:03:47,270 --> 00:03:51,830
levels up with two dots etc etc if you

00:03:49,670 --> 00:03:53,930
just do a import whatever that's always

00:03:51,830 --> 00:03:55,580
the fault it to zero so it's known as so

00:03:53,930 --> 00:03:59,240
it's explicitly don't have to traverse

00:03:55,580 --> 00:04:01,070
anymore so that's a statement goes to

00:03:59,240 --> 00:04:05,000
function so what the heck does that

00:04:01,070 --> 00:04:07,820
function do well these are the defaults

00:04:05,000 --> 00:04:10,940
basically and we just pass on through

00:04:07,820 --> 00:04:12,709
and we get right into it first thing are

00:04:10,940 --> 00:04:14,930
we doing an explicit relative import or

00:04:12,709 --> 00:04:16,459
are we actually know exactly full name

00:04:14,930 --> 00:04:18,080
of what we have basically do we have to

00:04:16,459 --> 00:04:20,299
resolve the name of what we're trying to

00:04:18,080 --> 00:04:21,620
import and just infer it from where

00:04:20,299 --> 00:04:23,990
we're making the phone making the call

00:04:21,620 --> 00:04:25,330
so let's say our index was not zero

00:04:23,990 --> 00:04:26,979
that's it's actually well

00:04:25,330 --> 00:04:29,439
how the heck do we figure out what we

00:04:26,979 --> 00:04:30,729
want one thing I should mention about

00:04:29,439 --> 00:04:31,539
these slides if you see anything in a

00:04:30,729 --> 00:04:33,909
red box

00:04:31,539 --> 00:04:36,310
it's basically accurate but I simplified

00:04:33,909 --> 00:04:38,319
it by just kind of cutting some corners

00:04:36,310 --> 00:04:39,729
a little bit but it still makes sense if

00:04:38,319 --> 00:04:41,680
there's a red arrow I skipped an

00:04:39,729 --> 00:04:43,419
explicit step that import does but for

00:04:41,680 --> 00:04:45,460
this talk you don't really need to care

00:04:43,419 --> 00:04:47,800
about it so that's why there's some red

00:04:45,460 --> 00:04:50,889
in here as I said for details just read

00:04:47,800 --> 00:04:53,949
the source code for import lab so what

00:04:50,889 --> 00:04:55,270
do we do here yeah or you just have me

00:04:53,949 --> 00:04:59,650
spend six years trying to make all this

00:04:55,270 --> 00:05:01,990
work and you just don't care so what do

00:04:59,650 --> 00:05:03,550
we need to do so as I said when levels

00:05:01,990 --> 00:05:05,319
above zero you're trying to do relevant

00:05:03,550 --> 00:05:06,819
relative import so basically what you're

00:05:05,319 --> 00:05:09,849
doing is you're just splitting on the

00:05:06,819 --> 00:05:12,219
dots of the name you're a given - one

00:05:09,849 --> 00:05:14,139
level right because one dot is level one

00:05:12,219 --> 00:05:16,330
but that's saying alright if I'm doing

00:05:14,139 --> 00:05:17,560
from dot spam import whatever you're

00:05:16,330 --> 00:05:18,699
trying to in the exact same place you

00:05:17,560 --> 00:05:21,069
are in a package so you really don't

00:05:18,699 --> 00:05:24,069
need to worry about that level so as

00:05:21,069 --> 00:05:25,810
this give you if you use the package

00:05:24,069 --> 00:05:27,490
name that you were given basically the

00:05:25,810 --> 00:05:29,289
dunder name of where you did the import

00:05:27,490 --> 00:05:31,029
you can figure out basically what's the

00:05:29,289 --> 00:05:33,490
base position in the package so if you

00:05:31,029 --> 00:05:35,650
were in food up bar and you said I need

00:05:33,490 --> 00:05:37,180
to go up a level two levels you'd split

00:05:35,650 --> 00:05:40,240
off you say okay my base name now would

00:05:37,180 --> 00:05:42,699
be foo all right so if you have that

00:05:40,240 --> 00:05:45,190
great now what you got to do is check

00:05:42,699 --> 00:05:47,830
did you do from dot dot import something

00:05:45,190 --> 00:05:50,409
or did you from dot dot spam import

00:05:47,830 --> 00:05:52,240
something so if name is defined that's

00:05:50,409 --> 00:05:53,469
when you have to concatenate your base

00:05:52,240 --> 00:05:55,360
name with the other name and now you

00:05:53,469 --> 00:05:57,250
have the full resolved name of what

00:05:55,360 --> 00:05:58,900
you're after but if you didn't specify

00:05:57,250 --> 00:05:59,919
this oxy nothing to concatenate so

00:05:58,900 --> 00:06:03,849
you're just working right off of the

00:05:59,919 --> 00:06:05,710
base name so that's great now why does

00:06:03,849 --> 00:06:07,120
if index is zero you did absolutely

00:06:05,710 --> 00:06:11,560
nothing you just go with the name of

00:06:07,120 --> 00:06:12,940
your past in much simpler well for C we

00:06:11,560 --> 00:06:14,740
like to be crazy and support other

00:06:12,940 --> 00:06:16,449
things so you got to go one way or the

00:06:14,740 --> 00:06:17,469
other but that's how you figure out

00:06:16,449 --> 00:06:18,520
exactly what the name of the thing

00:06:17,469 --> 00:06:20,529
you're trying to get this is how you get

00:06:18,520 --> 00:06:24,279
the explicit module name before you want

00:06:20,529 --> 00:06:27,190
to import with that figured out you do a

00:06:24,279 --> 00:06:29,289
quick lock if you tend to my Python 3.3

00:06:27,190 --> 00:06:31,960
talk you know in at least in Python 3.3

00:06:29,289 --> 00:06:34,330
locks are now at the level of modules

00:06:31,960 --> 00:06:36,909
instead of global beforehand they were

00:06:34,330 --> 00:06:38,740
global that's where this is a Redbox

00:06:36,909 --> 00:06:40,539
not coming all the details but

00:06:38,740 --> 00:06:41,919
at this point you need to lock down what

00:06:40,539 --> 00:06:43,960
you're working on so that you can deal

00:06:41,919 --> 00:06:48,240
with system modules and such that are at

00:06:43,960 --> 00:06:50,770
a global level for the interpreter so

00:06:48,240 --> 00:06:52,180
assuming by the way if you're not insist

00:06:50,770 --> 00:06:53,800
on modules which is obviously the nice

00:06:52,180 --> 00:06:55,599
result because it's cash and there's no

00:06:53,800 --> 00:06:56,770
work to do what do you have to do to

00:06:55,599 --> 00:06:59,680
actually get something into system

00:06:56,770 --> 00:07:01,389
modules for you for you to use well

00:06:59,680 --> 00:07:02,680
first you got to check to see if what

00:07:01,389 --> 00:07:04,360
you're working with is a package or not

00:07:02,680 --> 00:07:07,330
basically is there dot in the name of

00:07:04,360 --> 00:07:08,979
what you're looking for if there is you

00:07:07,330 --> 00:07:10,090
need to get the parents it's obvious

00:07:08,979 --> 00:07:12,280
you're gonna want to work from the top

00:07:10,090 --> 00:07:14,979
you basically backtracking to where you

00:07:12,280 --> 00:07:17,229
need to find what you need import so if

00:07:14,979 --> 00:07:18,940
there's a dot so you get the paid parent

00:07:17,229 --> 00:07:21,659
if there's not you don't have to really

00:07:18,940 --> 00:07:23,830
worry about anything but if there is

00:07:21,659 --> 00:07:25,810
basically sorry at the bottom you're

00:07:23,830 --> 00:07:26,949
trying to grab the path of the parent so

00:07:25,810 --> 00:07:28,000
you know basically where you gonna be

00:07:26,949 --> 00:07:29,169
working from if you're working in the

00:07:28,000 --> 00:07:31,000
package you're obviously working off of

00:07:29,169 --> 00:07:32,560
the under path if you're working off of

00:07:31,000 --> 00:07:33,639
something that's not in a package and

00:07:32,560 --> 00:07:38,380
this says no parent you're gonna be

00:07:33,639 --> 00:07:40,270
working with this dot path so now that

00:07:38,380 --> 00:07:42,400
we know what we're trying to look for

00:07:40,270 --> 00:07:43,870
and where so if you've got the full name

00:07:42,400 --> 00:07:46,360
we've got exactly what paths were

00:07:43,870 --> 00:07:47,710
looking for for the import paths now we

00:07:46,360 --> 00:07:50,110
need to look through all of our meta

00:07:47,710 --> 00:07:51,940
path finders insist meta path which is

00:07:50,110 --> 00:07:54,070
kind of the location in the sis module

00:07:51,940 --> 00:07:57,130
of finders that don't really have a

00:07:54,070 --> 00:07:58,930
concept of location so there are built

00:07:57,130 --> 00:08:00,969
there's a built in finder there there's

00:07:58,930 --> 00:08:02,710
a frozen module finder there and then

00:08:00,969 --> 00:08:05,380
there's a finer that I'll discuss a

00:08:02,710 --> 00:08:09,880
little bit later in more detailed that

00:08:05,380 --> 00:08:11,830
looks on sis top path so we got our full

00:08:09,880 --> 00:08:14,080
name we got our path so now what do we

00:08:11,830 --> 00:08:16,840
do well we ask this finder by calling

00:08:14,080 --> 00:08:18,520
its find module method can you find me a

00:08:16,840 --> 00:08:19,930
loader to load this module do you know

00:08:18,520 --> 00:08:22,419
how to actually work with it can you

00:08:19,930 --> 00:08:23,650
find it and just do something and

00:08:22,419 --> 00:08:25,840
basically just keep iterating through

00:08:23,650 --> 00:08:29,949
your system at a path asking trying to

00:08:25,840 --> 00:08:35,589
find that loader if none is returned you

00:08:29,949 --> 00:08:37,570
get false and you are great if it's not

00:08:35,589 --> 00:08:39,550
and thus you actually got back a loader

00:08:37,570 --> 00:08:40,930
and it's not none fantastic you now have

00:08:39,550 --> 00:08:42,700
a loader you can actually make it come

00:08:40,930 --> 00:08:44,470
into being so what do you do there will

00:08:42,700 --> 00:08:46,540
you code load module with the module

00:08:44,470 --> 00:08:49,209
name loader will give you back a module

00:08:46,540 --> 00:08:50,770
and then you do a quick check is there

00:08:49,209 --> 00:08:52,810
data in the name once again is this in a

00:08:50,770 --> 00:08:55,720
package or not if it is you need to set

00:08:52,810 --> 00:08:57,760
as a child on that package so you know

00:08:55,720 --> 00:08:59,650
if you got food bar you've imported that

00:08:57,760 --> 00:09:02,820
you gotta make sure it's on food so if

00:08:59,650 --> 00:09:04,960
you go food a part that actually works

00:09:02,820 --> 00:09:06,040
and then if not there's nothing to

00:09:04,960 --> 00:09:09,910
really worry about there's no parent to

00:09:06,040 --> 00:09:14,110
put it on and then basically you unlock

00:09:09,910 --> 00:09:15,970
and that's import I am actually not

00:09:14,110 --> 00:09:18,370
kidding that is essentially the loop of

00:09:15,970 --> 00:09:21,250
the actual imitation of import the

00:09:18,370 --> 00:09:23,470
function it looks simple and it

00:09:21,250 --> 00:09:25,240
basically is but the trick is all those

00:09:23,470 --> 00:09:26,950
modules you stick on system edit path

00:09:25,240 --> 00:09:30,339
and what those do and then have that

00:09:26,950 --> 00:09:32,110
cascades down into more detail so let's

00:09:30,339 --> 00:09:35,620
go into some of that so we'll start with

00:09:32,110 --> 00:09:38,380
a find module call and we'll start with

00:09:35,620 --> 00:09:40,900
what's called the path finder you can

00:09:38,380 --> 00:09:42,670
find at import Lib machinery path finder

00:09:40,900 --> 00:09:44,020
and this will be the finder that you

00:09:42,670 --> 00:09:48,550
actually use that works with sis top

00:09:44,020 --> 00:09:50,589
path so how does that work well as I

00:09:48,550 --> 00:09:52,050
said find module takes the full name of

00:09:50,589 --> 00:09:54,640
what you're looking for and then a

00:09:52,050 --> 00:09:56,170
optional path argument as I said it's

00:09:54,640 --> 00:09:57,730
either going to be none if there's

00:09:56,170 --> 00:09:59,890
something specific or actually a

00:09:57,730 --> 00:10:01,990
specified thing if you're working with

00:09:59,890 --> 00:10:05,890
something in a package so like from

00:10:01,990 --> 00:10:08,530
dunder path and then you start working

00:10:05,890 --> 00:10:10,720
with your defaults and figure out what

00:10:08,530 --> 00:10:12,700
to do so this is something new in three

00:10:10,720 --> 00:10:14,080
point three I should point out we do

00:10:12,700 --> 00:10:16,089
have something called namespace packages

00:10:14,080 --> 00:10:18,670
this is basically where if you have

00:10:16,089 --> 00:10:20,530
multiple directories on your filesystem

00:10:18,670 --> 00:10:22,870
if you want to use concrete terms and

00:10:20,530 --> 00:10:25,480
they all have the right same name they

00:10:22,870 --> 00:10:28,360
can get coagulated into a single package

00:10:25,480 --> 00:10:30,100
so this is basically economical examples

00:10:28,360 --> 00:10:31,270
if you got multiples Oh packages and

00:10:30,100 --> 00:10:33,280
they all have multiple directories on

00:10:31,270 --> 00:10:35,320
sistah path there's something slash

00:10:33,280 --> 00:10:36,550
though something else slashes oh they'll

00:10:35,320 --> 00:10:38,050
come together and I'll end up under

00:10:36,550 --> 00:10:39,790
under path well you're gonna have to

00:10:38,050 --> 00:10:41,440
keep track of some bookkeeping so this

00:10:39,790 --> 00:10:45,130
empty direct this empty list is gonna

00:10:41,440 --> 00:10:47,410
come into play with that later so let's

00:10:45,130 --> 00:10:50,560
say path was none they're doing a global

00:10:47,410 --> 00:10:52,959
top-level import of the OS module right

00:10:50,560 --> 00:10:54,940
so path then is going to be none so

00:10:52,959 --> 00:10:57,610
going to make that sista otherwise it's

00:10:54,940 --> 00:11:00,070
already specified so what do you do with

00:10:57,610 --> 00:11:01,750
that information well you start

00:11:00,070 --> 00:11:04,320
iterating through all those entries in

00:11:01,750 --> 00:11:09,110
your path as I said either sista path or

00:11:04,320 --> 00:11:12,330
your path and you start looking for a

00:11:09,110 --> 00:11:15,210
actual path finder a path entry finder

00:11:12,330 --> 00:11:17,250
for that entry we keep the cash at

00:11:15,210 --> 00:11:18,630
sistah paths importer cash so that we

00:11:17,250 --> 00:11:20,970
don't constantly rebuild these things

00:11:18,630 --> 00:11:23,970
because basically once you find a way to

00:11:20,970 --> 00:11:25,170
actually handle that entry you don't

00:11:23,970 --> 00:11:26,420
really need to have to make that finder

00:11:25,170 --> 00:11:29,160
over and over and over again basically

00:11:26,420 --> 00:11:30,990
if something in handled that directory

00:11:29,160 --> 00:11:34,200
there's no need it's a waste so we cache

00:11:30,990 --> 00:11:35,280
it so what happens if we're not lucky

00:11:34,200 --> 00:11:37,740
enough to actually have anything in

00:11:35,280 --> 00:11:39,750
there well there's a whole nother thing

00:11:37,740 --> 00:11:41,340
in Syst module that you use called sista

00:11:39,750 --> 00:11:43,890
path hooks and what that is is it's a

00:11:41,340 --> 00:11:46,440
list of kala bowls and basically what

00:11:43,890 --> 00:11:48,450
you do is you take your path entry pass

00:11:46,440 --> 00:11:50,940
it into each call bowl and sis top path

00:11:48,450 --> 00:11:53,370
looks and say okay can you find me a

00:11:50,940 --> 00:11:54,870
path entry find here that I can cash and

00:11:53,370 --> 00:11:59,130
use to try to find a module in this

00:11:54,870 --> 00:12:01,920
location if it raises import error it

00:11:59,130 --> 00:12:03,750
didn't and you keep looping through and

00:12:01,920 --> 00:12:05,760
if it ends up not working you set none

00:12:03,750 --> 00:12:07,890
into sis top path importer cache to

00:12:05,760 --> 00:12:09,480
basically flag saying there's nothing to

00:12:07,890 --> 00:12:11,070
cache here don't bother looking here

00:12:09,480 --> 00:12:13,370
just move on try to find it somewhere

00:12:11,070 --> 00:12:16,500
else since this path or your dunder path

00:12:13,370 --> 00:12:18,960
if you do fantastic you now have a

00:12:16,500 --> 00:12:20,790
finder a path entry finder specifically

00:12:18,960 --> 00:12:24,180
and you can use that to eventually get a

00:12:20,790 --> 00:12:25,490
load or hopefully and you cash that so

00:12:24,180 --> 00:12:30,720
you've done it you've cashed it

00:12:25,490 --> 00:12:32,760
fantastic now you can move on so what

00:12:30,720 --> 00:12:35,940
you do with that Finder is you now call

00:12:32,760 --> 00:12:40,650
in python 3.3 a function ethic called

00:12:35,940 --> 00:12:43,110
find loader this returns a tuple of two

00:12:40,650 --> 00:12:44,880
items one is the loader and one is what

00:12:43,110 --> 00:12:48,990
we're calling portions which is just a

00:12:44,880 --> 00:12:51,840
portion of a namespace path entry so

00:12:48,990 --> 00:12:54,000
basically if it can't if this finder as

00:12:51,840 --> 00:12:56,880
I said can't find a loader it'll return

00:12:54,000 --> 00:12:58,920
none if it returns none then we check to

00:12:56,880 --> 00:13:00,540
see basically if it says all right I

00:12:58,920 --> 00:13:01,980
don't have a specific loader but I at

00:13:00,540 --> 00:13:05,100
least found a directory or directories

00:13:01,980 --> 00:13:07,530
that could work for a namespace package

00:13:05,100 --> 00:13:09,840
later I think it's returned that gets

00:13:07,530 --> 00:13:12,630
added to that name stays path list that

00:13:09,840 --> 00:13:14,310
we had before and extends it but if it

00:13:12,630 --> 00:13:15,660
found a loader then we stop and say okay

00:13:14,310 --> 00:13:17,520
don't worry about trying to make a

00:13:15,660 --> 00:13:19,830
namespace package just go on

00:13:17,520 --> 00:13:24,300
give this loader back to import and work

00:13:19,830 --> 00:13:26,459
with that and basically you just keep

00:13:24,300 --> 00:13:29,580
iterating through every single entry in

00:13:26,459 --> 00:13:31,410
your path your import paths trying to

00:13:29,580 --> 00:13:36,000
find what the heck could possibly have

00:13:31,410 --> 00:13:37,170
the module be looking for now in the end

00:13:36,000 --> 00:13:39,000
if you don't find anything but you

00:13:37,170 --> 00:13:41,550
happen to have some namespace paths that

00:13:39,000 --> 00:13:43,320
you happen to collect together this is

00:13:41,550 --> 00:13:46,020
where you take the namespace loader and

00:13:43,320 --> 00:13:47,760
has returned that as the loader that

00:13:46,020 --> 00:13:49,649
you're going to use to try to create

00:13:47,760 --> 00:13:51,870
this new namespace package because you

00:13:49,649 --> 00:13:53,370
found like as I said something slashes

00:13:51,870 --> 00:13:56,010
opens a directory and then some other

00:13:53,370 --> 00:13:58,440
place lashes oak but no specific loader

00:13:56,010 --> 00:14:00,060
for zope itself otherwise you completely

00:13:58,440 --> 00:14:02,220
fail found absolutely nothing and you

00:14:00,060 --> 00:14:06,300
return none and you cry because you've

00:14:02,220 --> 00:14:08,240
got an importer and that is how you find

00:14:06,300 --> 00:14:12,980
something in Python

00:14:08,240 --> 00:14:16,230
so before was how important something

00:14:12,980 --> 00:14:19,410
usually on the on the file path like

00:14:16,230 --> 00:14:23,190
this top half and now this has another

00:14:19,410 --> 00:14:26,130
wrinkle so let's say you actually your

00:14:23,190 --> 00:14:27,839
finder found yo loader right so we can

00:14:26,130 --> 00:14:29,100
find it we know where it is how do we

00:14:27,839 --> 00:14:30,839
work with it how do we make it do

00:14:29,100 --> 00:14:32,690
something well that's when you want your

00:14:30,839 --> 00:14:35,700
loader and you call load module with it

00:14:32,690 --> 00:14:38,310
so what I'll talk about in detail is the

00:14:35,700 --> 00:14:40,890
load mod the loader defined as import

00:14:38,310 --> 00:14:43,020
Lib machinery dot source file loader

00:14:40,890 --> 00:14:48,000
which basically uses the file system to

00:14:43,020 --> 00:14:50,970
load Python source so load module is

00:14:48,000 --> 00:14:53,250
always cold with a full name and first

00:14:50,970 --> 00:14:56,670
thing you do is you try to get the

00:14:53,250 --> 00:14:59,430
module either out of system modules if

00:14:56,670 --> 00:15:00,990
it exists because basically when you do

00:14:59,430 --> 00:15:02,370
a reload what it's actually doing is

00:15:00,990 --> 00:15:06,149
calling the loader for that module again

00:15:02,370 --> 00:15:07,560
and reinitializing it if it's not there

00:15:06,149 --> 00:15:10,290
you got to insert yourself into system

00:15:07,560 --> 00:15:12,600
modules and then you move on and then

00:15:10,290 --> 00:15:14,459
you start pulling together all the

00:15:12,600 --> 00:15:17,190
details you need for that module so you

00:15:14,459 --> 00:15:19,890
need to get the file name which loaders

00:15:17,190 --> 00:15:21,570
define as get under file name you need

00:15:19,890 --> 00:15:24,630
to try to see if where the byte code

00:15:21,570 --> 00:15:28,829
would be so that's empty cache from

00:15:24,630 --> 00:15:30,500
source you need to get the stats on a

00:15:28,829 --> 00:15:33,050
module

00:15:30,500 --> 00:15:34,790
in Python 3.3 this means you care about

00:15:33,050 --> 00:15:39,260
not only the modification time but also

00:15:34,790 --> 00:15:42,230
the size of the source code and then you

00:15:39,260 --> 00:15:46,400
need to then try to get the bytecode for

00:15:42,230 --> 00:15:48,500
the source so and as you'll notice all

00:15:46,400 --> 00:15:50,620
of these except for the IMP call are all

00:15:48,500 --> 00:15:56,690
actually defined as part of the loader

00:15:50,620 --> 00:15:58,730
API so let's say there's some bytecode

00:15:56,690 --> 00:16:00,320
already there how do we make sure we can

00:15:58,730 --> 00:16:02,000
use it and how do we use it if it

00:16:00,320 --> 00:16:03,290
happens to work so the first thing you

00:16:02,000 --> 00:16:05,180
need to do is you need to take the data

00:16:03,290 --> 00:16:07,070
you read that slice out the first four

00:16:05,180 --> 00:16:08,960
bytes and have a look at it and say does

00:16:07,070 --> 00:16:11,210
this match the magic number for the

00:16:08,960 --> 00:16:14,390
interpreter if you tended Larry Hastings

00:16:11,210 --> 00:16:16,820
talk he told you how the bytecode

00:16:14,390 --> 00:16:18,680
changes potentially between versions and

00:16:16,820 --> 00:16:19,850
we don't guarantee compatibility well

00:16:18,680 --> 00:16:21,770
this is how we can tell whether or not

00:16:19,850 --> 00:16:23,540
this versions too old for us to consider

00:16:21,770 --> 00:16:24,620
using basically the magic number gets

00:16:23,540 --> 00:16:27,920
incremented every time we make any

00:16:24,620 --> 00:16:29,630
change and we know that basically if it

00:16:27,920 --> 00:16:30,920
doesn't match we just give up and say

00:16:29,630 --> 00:16:32,750
forget it we're not going to touch this

00:16:30,920 --> 00:16:35,360
bytecode and so it's going well maybe

00:16:32,750 --> 00:16:38,000
maybe not so let's say that matches

00:16:35,360 --> 00:16:39,560
great all right has the source amount

00:16:38,000 --> 00:16:41,330
have been modified since the bytecode

00:16:39,560 --> 00:16:42,670
was written so now we check the next

00:16:41,330 --> 00:16:44,690
four bytes to look at the time stamp

00:16:42,670 --> 00:16:46,730
this can be a little tricky because

00:16:44,690 --> 00:16:48,920
based on the granularity of your file

00:16:46,730 --> 00:16:51,560
system you can pick up that change in

00:16:48,920 --> 00:16:52,910
sometimes you can't this is unfortunate

00:16:51,560 --> 00:16:55,970
cause sometimes processors have a

00:16:52,910 --> 00:16:57,260
granularity of a second and you can end

00:16:55,970 --> 00:16:59,780
up with a site race condition but

00:16:57,260 --> 00:17:01,790
usually this is not a big thing let's

00:16:59,780 --> 00:17:03,590
say that works okay then we also check

00:17:01,790 --> 00:17:05,990
the size of the source code just in case

00:17:03,590 --> 00:17:08,990
that granularity doesn't isn't quite

00:17:05,990 --> 00:17:11,959
there and good enough for you detect but

00:17:08,990 --> 00:17:15,470
you can tell that the file got longer if

00:17:11,959 --> 00:17:17,689
all that happens to work then what you

00:17:15,470 --> 00:17:21,740
can do is you use the marshal module to

00:17:17,689 --> 00:17:24,850
then load the data from bytes 12 and on

00:17:21,740 --> 00:17:28,760
and that'll get you back a code object

00:17:24,850 --> 00:17:29,630
that's the nice case because this is

00:17:28,760 --> 00:17:32,450
simple you don't have to worry about

00:17:29,630 --> 00:17:34,490
anything else of course being import

00:17:32,450 --> 00:17:36,890
it's not always that simple so let's say

00:17:34,490 --> 00:17:39,020
that the bytecode wasn't good for

00:17:36,890 --> 00:17:40,580
whatever reason how do we actually

00:17:39,020 --> 00:17:42,540
generate that by code and then use the

00:17:40,580 --> 00:17:46,170
source for doing the love

00:17:42,540 --> 00:17:47,640
well you read the source code using self

00:17:46,170 --> 00:17:50,850
Duquette data just like you used to read

00:17:47,640 --> 00:17:52,430
the bike cup you run compile this is

00:17:50,850 --> 00:17:55,380
just a built-in compile nothing special

00:17:52,430 --> 00:17:58,110
with the bytes from the source code the

00:17:55,380 --> 00:17:59,370
path to the source as an exec and you

00:17:58,110 --> 00:18:01,320
don't inherit from where you're running

00:17:59,370 --> 00:18:03,120
because you don't want to use import

00:18:01,320 --> 00:18:05,820
libs built-ins and Global's it just

00:18:03,120 --> 00:18:07,130
wouldn't make sense and then basically

00:18:05,820 --> 00:18:11,360
you just start generating the bytecode

00:18:07,130 --> 00:18:14,850
first set of bytes is the magic number

00:18:11,360 --> 00:18:16,680
after that you add in this the

00:18:14,850 --> 00:18:19,020
modification time for the source you add

00:18:16,680 --> 00:18:20,880
in the length of the source and then use

00:18:19,020 --> 00:18:24,300
Marshall to dump it out to bytes and

00:18:20,880 --> 00:18:27,000
then just use set data off the loader to

00:18:24,300 --> 00:18:27,870
write it to disk and then that's

00:18:27,000 --> 00:18:29,580
basically it

00:18:27,870 --> 00:18:31,110
so are there one way or the other you

00:18:29,580 --> 00:18:34,590
way they're compiled your code object

00:18:31,110 --> 00:18:36,870
that you need later using either the

00:18:34,590 --> 00:18:40,220
bytecode because it worked or the source

00:18:36,870 --> 00:18:42,540
and generate the bytecode along the way

00:18:40,220 --> 00:18:44,040
so that's what it takes to actually get

00:18:42,540 --> 00:18:45,420
from either the sort to get your code

00:18:44,040 --> 00:18:49,110
object rather from the bytecode or from

00:18:45,420 --> 00:18:51,060
the source so with your code object in

00:18:49,110 --> 00:18:54,240
hand you start building up your module

00:18:51,060 --> 00:18:57,390
you got a set under file you guys it

00:18:54,240 --> 00:18:59,910
under cached all the things which you've

00:18:57,390 --> 00:19:02,790
already collected them if it's a package

00:18:59,910 --> 00:19:05,400
which you ask the loader whether that's

00:19:02,790 --> 00:19:07,110
true or not if it is you set dunder

00:19:05,400 --> 00:19:09,060
package the name of what the pack of

00:19:07,110 --> 00:19:11,940
what the module is itself and then you

00:19:09,060 --> 00:19:14,400
set dunder path based usually on the

00:19:11,940 --> 00:19:18,420
file to the source slice off the file

00:19:14,400 --> 00:19:20,670
name if it's not a package then the

00:19:18,420 --> 00:19:23,430
under package is basically taking our

00:19:20,670 --> 00:19:25,020
petition of the name and taking the

00:19:23,430 --> 00:19:28,290
first half so this is either the empty

00:19:25,020 --> 00:19:29,760
string if it's top-level or basically

00:19:28,290 --> 00:19:33,690
just the package if it's the module

00:19:29,760 --> 00:19:36,000
itself so with all that done you set

00:19:33,690 --> 00:19:38,820
dunder loader to self and you do the

00:19:36,000 --> 00:19:40,740
magical incantation of exec with the

00:19:38,820 --> 00:19:43,680
code object under the dunder dict of the

00:19:40,740 --> 00:19:48,980
module and that magically makes the

00:19:43,680 --> 00:19:48,980
module happen yeah yeah

00:19:49,080 --> 00:19:53,769
you might think it'd be a little more

00:19:51,159 --> 00:19:55,600
fancy it's not that's literally it you

00:19:53,769 --> 00:19:57,460
can do this yourself and want that the

00:19:55,600 --> 00:20:00,399
interpreter font with no problem it's

00:19:57,460 --> 00:20:02,830
nothing nothing fancy at all I mean this

00:20:00,399 --> 00:20:04,779
is why when you do module import you

00:20:02,830 --> 00:20:07,720
have side effects it's nothing more than

00:20:04,779 --> 00:20:09,309
exec a code object using the dunder

00:20:07,720 --> 00:20:12,250
addictive a module as the global

00:20:09,309 --> 00:20:13,720
namespace and this is one of the magical

00:20:12,250 --> 00:20:15,100
things I think a lot of us love about

00:20:13,720 --> 00:20:16,269
Python is a lot of stuff just very

00:20:15,100 --> 00:20:17,980
straightforward and it just works this

00:20:16,269 --> 00:20:19,840
is why you just literally runs the code

00:20:17,980 --> 00:20:22,389
to top to bottom this is also why by the

00:20:19,840 --> 00:20:24,610
way you have the if dunder name equals

00:20:22,389 --> 00:20:26,559
dunder main this is kind of why cuz it's

00:20:24,610 --> 00:20:27,909
Larry just executed code and just done

00:20:26,559 --> 00:20:30,009
was edits they meant the bottom and just

00:20:27,909 --> 00:20:33,730
figures out based on what dunder name

00:20:30,009 --> 00:20:36,909
was set to earlier what it should do

00:20:33,730 --> 00:20:39,940
so the loader has done all this work and

00:20:36,909 --> 00:20:47,409
now you got a module yeah you think this

00:20:39,940 --> 00:20:49,659
be over wouldn't you know now we deal

00:20:47,409 --> 00:20:55,899
with my not favorite person in the world

00:20:49,659 --> 00:20:57,519
the front list yes yes it's good this

00:20:55,899 --> 00:21:00,009
actually turned up a really tricky

00:20:57,519 --> 00:21:03,279
corner of import to implement so I'm

00:21:00,009 --> 00:21:05,200
very bitter so friendless let's go with

00:21:03,279 --> 00:21:06,730
whether or not you have from Lissette to

00:21:05,200 --> 00:21:08,919
anything right whether it's an import

00:21:06,730 --> 00:21:13,299
whatever or from what something import

00:21:08,919 --> 00:21:15,509
whatever all right if it's true and

00:21:13,299 --> 00:21:17,679
there's nothing there in the simple case

00:21:15,509 --> 00:21:20,169
what do you do well first you got to

00:21:17,679 --> 00:21:21,399
quickly check if index is equal to 0 or

00:21:20,169 --> 00:21:24,190
not basically as I said well it's a

00:21:21,399 --> 00:21:25,389
relative import or an explicit import

00:21:24,190 --> 00:21:28,269
because you have to choose what to give

00:21:25,389 --> 00:21:31,929
back from import because remember if

00:21:28,269 --> 00:21:34,990
you've notice if you do import a dot BC

00:21:31,929 --> 00:21:36,370
you actually get back the package a so

00:21:34,990 --> 00:21:38,110
that a dot B dot seeing your code

00:21:36,370 --> 00:21:40,750
actually works cuz you can't return you

00:21:38,110 --> 00:21:42,490
B dot C because well okay within how the

00:21:40,750 --> 00:21:46,029
hell do you get to the a good mother

00:21:42,490 --> 00:21:49,750
this is just a function call return so

00:21:46,029 --> 00:21:51,549
if it is 0 that's why you have this

00:21:49,750 --> 00:21:54,519
partition call to get the basically the

00:21:51,549 --> 00:21:56,470
very top parent package and then that's

00:21:54,519 --> 00:21:58,600
what you pull out is to stop modules and

00:21:56,470 --> 00:22:00,129
return this is something some of you do

00:21:58,600 --> 00:22:01,020
that drives me a little nuts you

00:22:00,129 --> 00:22:03,630
actually pull out

00:22:01,020 --> 00:22:05,400
something you don't put what you import

00:22:03,630 --> 00:22:08,460
into system modules you decide to do

00:22:05,400 --> 00:22:10,170
something fun and sex something you want

00:22:08,460 --> 00:22:11,550
into system modules so you actually have

00:22:10,170 --> 00:22:13,020
to make sure you actually pull out of

00:22:11,550 --> 00:22:16,860
system modules itself for what you're

00:22:13,020 --> 00:22:17,970
importing let's say it's not zero though

00:22:16,860 --> 00:22:20,400
and you're actually doing a relative

00:22:17,970 --> 00:22:22,080
import once again if you're doing from

00:22:20,400 --> 00:22:23,940
whatever import something and it's

00:22:22,080 --> 00:22:27,720
relative you got to realize you're

00:22:23,940 --> 00:22:29,610
working off of like from spam you want

00:22:27,720 --> 00:22:30,960
that spam name to be what's bound in

00:22:29,610 --> 00:22:33,660
your namespace in the global namespace

00:22:30,960 --> 00:22:35,490
of where you're doing the import so this

00:22:33,660 --> 00:22:38,070
is what all this is about basically if

00:22:35,490 --> 00:22:41,160
you specify the name you've got a care

00:22:38,070 --> 00:22:44,430
in slice off to the name to the first

00:22:41,160 --> 00:22:47,130
dot in the name basically the relative

00:22:44,430 --> 00:22:48,420
parent of what you specified and then if

00:22:47,130 --> 00:22:52,230
you didn't specify you just return

00:22:48,420 --> 00:22:55,380
whatever you found now that's a simple

00:22:52,230 --> 00:22:58,620
case yeah here's almost nikkor it's true

00:22:55,380 --> 00:23:00,600
it's ridiculous so let's say you have a

00:22:58,620 --> 00:23:03,930
friend list use did from something

00:23:00,600 --> 00:23:06,030
import whatever so what's the first

00:23:03,930 --> 00:23:08,340
thing you do well first you guys see if

00:23:06,030 --> 00:23:10,550
you specify the dunder path that's two

00:23:08,340 --> 00:23:13,650
now we gotta check for import star

00:23:10,550 --> 00:23:14,910
something we all think is evil but we

00:23:13,650 --> 00:23:16,290
all admit we've done at least once in

00:23:14,910 --> 00:23:19,140
our lives and we've repented for the

00:23:16,290 --> 00:23:22,290
rest of our lives for it so what do you

00:23:19,140 --> 00:23:24,060
do you look for dunder all in the module

00:23:22,290 --> 00:23:26,940
namespace of what was important and you

00:23:24,060 --> 00:23:30,300
basically use that to extend the module

00:23:26,940 --> 00:23:31,890
and basically ditching the asterisk so

00:23:30,300 --> 00:23:33,060
that'll just get you exactly everything

00:23:31,890 --> 00:23:37,110
you're trying to import whether it's

00:23:33,060 --> 00:23:39,570
exactly specified or you said star okay

00:23:37,110 --> 00:23:41,970
so with that specified now what do you

00:23:39,570 --> 00:23:45,180
do well now you go through from list and

00:23:41,970 --> 00:23:47,250
you look for everything specified there

00:23:45,180 --> 00:23:50,070
on the module so you do it has outer

00:23:47,250 --> 00:23:52,170
check if it's not there already because

00:23:50,070 --> 00:23:54,120
remember it could be a module it could

00:23:52,170 --> 00:23:56,700
be a class it could be an attribute who

00:23:54,120 --> 00:23:58,620
the heck knows you try to do and that

00:23:56,700 --> 00:24:00,120
you do an import basically if it's not

00:23:58,620 --> 00:24:02,490
there because you got to assume for

00:24:00,120 --> 00:24:04,050
instance if it's off a package it might

00:24:02,490 --> 00:24:08,340
be a module so you got a care so you do

00:24:04,050 --> 00:24:10,170
an import if it fails okay

00:24:08,340 --> 00:24:12,270
you basically just ignore it because

00:24:10,170 --> 00:24:13,799
what ends up happening is your import

00:24:12,270 --> 00:24:16,049
failure isn't here

00:24:13,799 --> 00:24:19,350
she's done by the bike code by the

00:24:16,049 --> 00:24:20,940
interpreter later on so you just

00:24:19,350 --> 00:24:22,350
basically keep entering through one by

00:24:20,940 --> 00:24:24,119
one all the way through and just

00:24:22,350 --> 00:24:25,320
checking is it there if it's not there

00:24:24,119 --> 00:24:27,269
tried import because it could be a

00:24:25,320 --> 00:24:28,909
module if it's not then I just don't

00:24:27,269 --> 00:24:32,460
care and you move on

00:24:28,909 --> 00:24:34,379
and then with that you're finally done

00:24:32,460 --> 00:24:35,610
and you return your module and you're

00:24:34,379 --> 00:24:37,470
happy and you don't get your import

00:24:35,610 --> 00:24:41,940
error and hopefully you move on with

00:24:37,470 --> 00:24:44,039
your lives and do something better but

00:24:41,940 --> 00:24:46,289
to give you an overview of what all this

00:24:44,039 --> 00:24:49,190
breaks down to so that's how to deal

00:24:46,289 --> 00:24:52,440
with from lists and just from lists and

00:24:49,190 --> 00:24:55,919
this is basically a rough overview of

00:24:52,440 --> 00:24:57,989
import from import itself been on the

00:24:55,919 --> 00:24:58,379
right-hand side that column from top to

00:24:57,989 --> 00:25:00,960
bottom

00:24:58,379 --> 00:25:03,809
that's import the little algorithm the

00:25:00,960 --> 00:25:06,960
upper left corner once again is import

00:25:03,809 --> 00:25:08,249
machinery the pathfinder for the system

00:25:06,960 --> 00:25:11,399
at a path entry that knows how to work

00:25:08,249 --> 00:25:14,070
with sis top path or packages and then

00:25:11,399 --> 00:25:16,139
in the bottom left corner is import

00:25:14,070 --> 00:25:18,960
libbed machinery dot source file finder

00:25:16,139 --> 00:25:21,359
which knows how to read off of the file

00:25:18,960 --> 00:25:23,909
system how to read from source or from

00:25:21,359 --> 00:25:26,269
byte code and that's all you got and

00:25:23,909 --> 00:25:26,269
I'll take questions

00:25:33,130 --> 00:25:41,370
I think we have a mic there if anyone

00:25:35,920 --> 00:25:41,370
must ask I don't bite don't worry

00:25:46,380 --> 00:25:52,030
if you wanted to do silly things like

00:25:49,620 --> 00:25:54,790
synthesize modules as they were asked

00:25:52,030 --> 00:25:56,500
for or load them over HTTP where would

00:25:54,790 --> 00:26:00,100
you where is the right place to hook

00:25:56,500 --> 00:26:01,780
into this machinery so there's two

00:26:00,100 --> 00:26:04,360
levels to this basically you're gonna

00:26:01,780 --> 00:26:06,370
put it probably are there on system meta

00:26:04,360 --> 00:26:08,860
path or something onto stuff path hooks

00:26:06,370 --> 00:26:11,890
so really depends is our concept of a

00:26:08,860 --> 00:26:13,600
location so if for instance let's say

00:26:11,890 --> 00:26:16,150
you try to import over the Internet

00:26:13,600 --> 00:26:19,630
using HTTP right so what you would do is

00:26:16,150 --> 00:26:21,700
you would stick an URL on sis top path

00:26:19,630 --> 00:26:23,470
and you'd create something else to stop

00:26:21,700 --> 00:26:26,020
path hooks that would recognize that see

00:26:23,470 --> 00:26:28,450
URL and then return you a finder that

00:26:26,020 --> 00:26:30,700
would understand that okay if I tried to

00:26:28,450 --> 00:26:33,070
hit this URL I know how to do a rest

00:26:30,700 --> 00:26:35,860
call do like a head forget or something

00:26:33,070 --> 00:26:37,330
check that exists and then it return a

00:26:35,860 --> 00:26:38,770
loader which then understands that okay

00:26:37,330 --> 00:26:41,080
with this URL I know to do a get request

00:26:38,770 --> 00:26:42,400
to get that source back now if it was

00:26:41,080 --> 00:26:44,140
something more generic that didn't have

00:26:42,400 --> 00:26:46,000
a location you would put on since dotnet

00:26:44,140 --> 00:26:49,420
a path so basically anything it's got a

00:26:46,000 --> 00:26:50,980
concept of a location you'd write it

00:26:49,420 --> 00:26:52,930
something for sis top path hooks that

00:26:50,980 --> 00:26:55,750
understands locations and knows well not

00:26:52,930 --> 00:26:57,490
to work with it or not and then if you

00:26:55,750 --> 00:26:58,120
don't have a location you put on sis top

00:26:57,490 --> 00:27:03,910
meta path

00:26:58,120 --> 00:27:06,310
let's make sense can you use a from dot

00:27:03,910 --> 00:27:08,260
from a top-level module no that's an

00:27:06,310 --> 00:27:10,030
error that's why there's a red box

00:27:08,260 --> 00:27:11,290
around that part basically we actually

00:27:10,030 --> 00:27:13,360
do a check to make sure you don't try to

00:27:11,290 --> 00:27:14,830
index out because obviously that's a

00:27:13,360 --> 00:27:16,780
major security hole of something you can

00:27:14,830 --> 00:27:18,040
go so Ari I just want to see how I can

00:27:16,780 --> 00:27:19,630
go for the directory based on how I do

00:27:18,040 --> 00:27:23,340
an import so if we do a check to make

00:27:19,630 --> 00:27:23,340
sure that you just can't go past it

00:27:25,980 --> 00:27:29,620
thank you for the documentation Barry

00:27:28,150 --> 00:27:31,050
yeah well I was just gonna give a plug

00:27:29,620 --> 00:27:34,270
for the documentation

00:27:31,050 --> 00:27:37,300
great talk thank you very much so in

00:27:34,270 --> 00:27:40,690
Python 3 3 if you actually look in the

00:27:37,300 --> 00:27:43,770
language spec the how the import system

00:27:40,690 --> 00:27:47,380
works is is fairly elaborately

00:27:43,770 --> 00:27:48,610
documented and hopefully clearly I had

00:27:47,380 --> 00:27:49,870
it touch with the other day and I

00:27:48,610 --> 00:27:51,700
believe it was oh great

00:27:49,870 --> 00:27:53,590
ok so go there if you want more

00:27:51,700 --> 00:27:56,020
information yeah basically if you really

00:27:53,590 --> 00:27:57,760
want the nitty-gritty details that's not

00:27:56,020 --> 00:27:59,680
as they flow chart you can

00:27:57,760 --> 00:28:01,180
the docks the reference the language

00:27:59,680 --> 00:28:02,980
reference has a really good Clare clear

00:28:01,180 --> 00:28:04,060
definition what it works or not if you

00:28:02,980 --> 00:28:06,130
just want to know how to work with this

00:28:04,060 --> 00:28:07,630
stuff import lib I've tried to make sure

00:28:06,130 --> 00:28:09,100
the parries are simple enough that if

00:28:07,630 --> 00:28:11,020
you want to do something special or

00:28:09,100 --> 00:28:12,610
different there should be very very

00:28:11,020 --> 00:28:14,170
little code that you have to write to

00:28:12,610 --> 00:28:16,030
make it happen I've tried to make the

00:28:14,170 --> 00:28:18,610
abstraction levels reasonable such that

00:28:16,030 --> 00:28:20,140
if you want to do it through a sequel

00:28:18,610 --> 00:28:22,090
like database it shouldn't take a whole

00:28:20,140 --> 00:28:24,360
lot of work to do that or if even if you

00:28:22,090 --> 00:28:27,460
want to do an alternative version like

00:28:24,360 --> 00:28:29,470
some funky DSL that you want to work

00:28:27,460 --> 00:28:31,090
with that's also very easy to do so

00:28:29,470 --> 00:28:33,640
import Lib Docs if you want to learn how

00:28:31,090 --> 00:28:35,350
to do crazy stuff with import reference

00:28:33,640 --> 00:28:37,030
like language reference if you want to

00:28:35,350 --> 00:28:38,860
know the exact nitty-gritty details of

00:28:37,030 --> 00:28:40,230
how the whole system works yeah so let

00:28:38,860 --> 00:28:42,910
me just say one other thing import lib

00:28:40,230 --> 00:28:44,740
sounds like it should be really scary

00:28:42,910 --> 00:28:45,070
but it's really not Brett did a great

00:28:44,740 --> 00:28:48,460
job

00:28:45,070 --> 00:28:50,320
for example the pep 420 namespace work

00:28:48,460 --> 00:28:53,200
was really not that difficult to do

00:28:50,320 --> 00:28:54,880
because especially because import live

00:28:53,200 --> 00:28:57,790
having the import system in Python

00:28:54,880 --> 00:29:00,900
really great job so thank you Brett for

00:28:57,790 --> 00:29:00,900
like making the same

00:29:04,850 --> 00:29:11,400
hi can you explain how import something

00:29:08,430 --> 00:29:14,820
as something translates to dunder import

00:29:11,400 --> 00:29:16,770
call so basically if you so for those of

00:29:14,820 --> 00:29:19,500
you that don't know if you do import

00:29:16,770 --> 00:29:21,150
from something import whatever or import

00:29:19,500 --> 00:29:23,520
whatever you can always tack on an as

00:29:21,150 --> 00:29:25,500
something to basically rebind the name

00:29:23,520 --> 00:29:28,290
of what you're using your global name

00:29:25,500 --> 00:29:30,570
say so you sit import OS as gobbledygook

00:29:28,290 --> 00:29:32,790
gobbledygook would get set to tell us

00:29:30,570 --> 00:29:34,380
module it's literally nothing more it's

00:29:32,790 --> 00:29:36,360
a byte code that basically just does an

00:29:34,380 --> 00:29:37,830
assignment there he gets the module back

00:29:36,360 --> 00:29:39,990
sticks it on the top of the stack and

00:29:37,830 --> 00:29:43,140
just goes store I think it's literally

00:29:39,990 --> 00:29:44,610
just a store global whatever to that

00:29:43,140 --> 00:29:46,050
name is really nothing special has

00:29:44,610 --> 00:29:48,420
absolutely nothing to do with under

00:29:46,050 --> 00:29:52,500
import it's more with the eval open the

00:29:48,420 --> 00:29:54,600
byte code yes yes so you talked about

00:29:52,500 --> 00:29:56,250
this loading byte code does this change

00:29:54,600 --> 00:30:00,240
significantly if you're loading C

00:29:56,250 --> 00:30:01,770
extension modules no so basically oh so

00:30:00,240 --> 00:30:03,270
the way it works is basically if you

00:30:01,770 --> 00:30:05,040
look at import live there's an import

00:30:03,270 --> 00:30:08,670
Lib dot machinery Dodd

00:30:05,040 --> 00:30:10,830
I believe file extension loader or

00:30:08,670 --> 00:30:12,660
extension file order I don't know it's

00:30:10,830 --> 00:30:14,720
extension file loader and basically

00:30:12,660 --> 00:30:17,430
implements the API as you would expect

00:30:14,720 --> 00:30:20,430
except the load module call just

00:30:17,430 --> 00:30:22,230
basically knows how to work with Python

00:30:20,430 --> 00:30:25,370
basically get that Emma clean load the

00:30:22,230 --> 00:30:31,800
dot iso file or dot dll japan your wes

00:30:25,370 --> 00:30:33,930
but basically replace the the source

00:30:31,800 --> 00:30:35,640
file loader and the code obviously is

00:30:33,930 --> 00:30:37,470
different because it calls the different

00:30:35,640 --> 00:30:40,230
c function but basically everything else

00:30:37,470 --> 00:30:41,820
works the same so pathfinder knows how

00:30:40,230 --> 00:30:43,980
to identify what's going to be extension

00:30:41,820 --> 00:30:45,600
knows that it exists on the file system

00:30:43,980 --> 00:30:48,360
I know Sri turned that specific loader

00:30:45,600 --> 00:30:50,760
for that location instead of source file

00:30:48,360 --> 00:30:55,680
water so the concepts up to the loader

00:30:50,760 --> 00:30:57,810
point are exactly the same yeah so our

00:30:55,680 --> 00:31:00,930
build box is completely automated and

00:30:57,810 --> 00:31:04,410
unless the developers are naughty and

00:31:00,930 --> 00:31:07,260
install some packages on it we have to

00:31:04,410 --> 00:31:08,890
wait sometimes to get packages on there

00:31:07,260 --> 00:31:11,410
to run our tests

00:31:08,890 --> 00:31:15,070
and so what we do is if we want to test

00:31:11,410 --> 00:31:18,040
something right away we import sis do

00:31:15,070 --> 00:31:21,550
sis top modules put a package in there

00:31:18,040 --> 00:31:23,620
and mock it okay is there a better way

00:31:21,550 --> 00:31:25,900
to do this like with sis hooks or

00:31:23,620 --> 00:31:27,370
something like that so basically you

00:31:25,900 --> 00:31:28,870
just want to get something in there

00:31:27,370 --> 00:31:31,170
faster than you get pushed out to your

00:31:28,870 --> 00:31:34,090
file print up pushed out to production

00:31:31,170 --> 00:31:35,590
well to our build well we have multiple

00:31:34,090 --> 00:31:37,540
steps we have like QA and things like

00:31:35,590 --> 00:31:39,820
that but right just to get our PM's out

00:31:37,540 --> 00:31:41,230
to make sure the whole build process

00:31:39,820 --> 00:31:42,700
besides the tests work basically how do

00:31:41,230 --> 00:31:44,710
you step out a module before it actually

00:31:42,700 --> 00:31:49,030
comes into existence

00:31:44,710 --> 00:31:51,550
yeah so one thing you can do is if you

00:31:49,030 --> 00:31:53,710
set something up on system at a path to

00:31:51,550 --> 00:31:56,290
basically go okay at the very end of it

00:31:53,710 --> 00:31:58,210
and just go okay I got all the way to

00:31:56,290 --> 00:32:00,610
the end none of the previous entries in

00:31:58,210 --> 00:32:02,710
system meta path works which includes

00:32:00,610 --> 00:32:04,540
what you would call basically default

00:32:02,710 --> 00:32:06,130
import you could have that return

00:32:04,540 --> 00:32:08,020
something you can either whitelist or to

00:32:06,130 --> 00:32:09,610
say for anything on methods to return

00:32:08,020 --> 00:32:11,080
this new blank module or whatever you

00:32:09,610 --> 00:32:18,250
want to mock and that's where you put it

00:32:11,080 --> 00:32:20,080
okay thanks okay we're at it again does

00:32:18,250 --> 00:32:22,860
it turn the mic on you can catch me in

00:32:20,080 --> 00:32:22,860

YouTube URL: https://www.youtube.com/watch?v=AqnxyRuenAg


