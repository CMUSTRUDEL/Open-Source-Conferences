Title: Solid Python Application Deployments For Everybody
Publication date: 2013-06-02
Playlist: PyCon 2013
Description: 
	Hynek Schlawack
Do you dread the moment when your shiny new application is "ready for production"; except it isn't because deploying is hard? How about moving existing apps or deploying one app to many servers? I'll take you on a trip of dos and don'
Captions: 
	00:00:02,600 --> 00:00:09,420
alright hello everybody welcome to the

00:00:06,930 --> 00:00:14,040
next PyCon talk

00:00:09,420 --> 00:00:15,660
this is henyk one of the sikh cpython

00:00:14,040 --> 00:00:17,340
core developers and he's going to be

00:00:15,660 --> 00:00:19,199
talking today about application

00:00:17,340 --> 00:00:28,670
deployment it's everybody give a warm

00:00:19,199 --> 00:00:30,929
welcome for henyk Wow

00:00:28,670 --> 00:00:34,700
I'm quite honored it so many of you

00:00:30,929 --> 00:00:39,329
chose to spend their food coma with me

00:00:34,700 --> 00:00:40,710
and since I foolishly chose a very broad

00:00:39,329 --> 00:00:41,309
topic and we have a lot of ground to

00:00:40,710 --> 00:00:43,350
cover

00:00:41,309 --> 00:00:46,680
I'll just ignore people still coming in

00:00:43,350 --> 00:00:49,520
and start immediately so you're here

00:00:46,680 --> 00:00:52,050
because you realize that Bharat is right

00:00:49,520 --> 00:00:54,449
programming is fun it really is but

00:00:52,050 --> 00:00:57,480
deploying the results is agonizing pain

00:00:54,449 --> 00:00:59,129
right so in my experience most of this

00:00:57,480 --> 00:01:01,680
pain comes from a lack of orientation

00:00:59,129 --> 00:01:04,739
and I'm here to take some of the pain

00:01:01,680 --> 00:01:07,409
from you away good afternoon I'm eunuch

00:01:04,739 --> 00:01:09,510
in real life on Twitter and all our

00:01:07,409 --> 00:01:12,270
interwebs I do some open source stuff as

00:01:09,510 --> 00:01:14,430
already mentioned to finance my

00:01:12,270 --> 00:01:16,020
glamorous open source lifestyle I've

00:01:14,430 --> 00:01:17,369
worked for a tiny ice P in Germany

00:01:16,020 --> 00:01:21,780
you've probably never heard of cold war

00:01:17,369 --> 00:01:25,950
Amelia we saw web hosting mail services

00:01:21,780 --> 00:01:26,520
domains all the boring stuff so enough

00:01:25,950 --> 00:01:29,189
about me

00:01:26,520 --> 00:01:31,470
what's on the agenda I have to warn you

00:01:29,189 --> 00:01:33,390
ahead it's gonna be a Rowland because I

00:01:31,470 --> 00:01:35,460
have only 40 minutes to share with you

00:01:33,390 --> 00:01:40,650
and all I would be able to give us an

00:01:35,460 --> 00:01:43,049
overview but I really hope to be able to

00:01:40,650 --> 00:01:46,079
replace that lingering anxiety inside of

00:01:43,049 --> 00:01:48,479
you through an informed unknowns so I

00:01:46,079 --> 00:01:50,520
really just want to push you in the

00:01:48,479 --> 00:01:53,009
right directions and hope it will help

00:01:50,520 --> 00:01:54,180
you someone it's also going to be a role

00:01:53,009 --> 00:01:56,579
and in a sense it would be really

00:01:54,180 --> 00:01:59,430
fast-paced so in order to pull it off

00:01:56,579 --> 00:02:01,469
I've set up a page which contains all

00:01:59,430 --> 00:02:03,360
the links I will be mentioning all the

00:02:01,469 --> 00:02:05,520
projects all the approaches all the blog

00:02:03,360 --> 00:02:08,849
posts whatever this is the only link you

00:02:05,520 --> 00:02:11,220
will ever need it's seven characters I

00:02:08,849 --> 00:02:13,290
just assumed my babbling was long

00:02:11,220 --> 00:02:15,690
enough so you have written it down so

00:02:13,290 --> 00:02:18,600
let's carry on it's also gonna be an op

00:02:15,690 --> 00:02:20,700
unit talk I'm pretty sure that just as

00:02:18,600 --> 00:02:24,300
many nodding heads there will be turning

00:02:20,700 --> 00:02:26,940
heads and it's okay because especially

00:02:24,300 --> 00:02:29,640
in operations context matters and it may

00:02:26,940 --> 00:02:30,660
be that my solutions don't fit your

00:02:29,640 --> 00:02:33,720
problems at all

00:02:30,660 --> 00:02:34,530
so I will tell you how I do it why I do

00:02:33,720 --> 00:02:36,990
it like that

00:02:34,530 --> 00:02:38,700
and use your best judgement to decide

00:02:36,990 --> 00:02:41,550
whether my solutions fit your problem

00:02:38,700 --> 00:02:43,650
actually so I won't be talking about

00:02:41,550 --> 00:02:46,800
platform as a service providers at least

00:02:43,650 --> 00:02:48,570
not explicitly each of them is different

00:02:46,800 --> 00:02:52,350
and it's kind of their job to deploy

00:02:48,570 --> 00:02:53,880
applications if you are interested in

00:02:52,350 --> 00:02:55,860
deploying on a ruku you should have been

00:02:53,880 --> 00:02:58,230
in kenneth rights tutorial like three

00:02:55,860 --> 00:03:01,380
days ago so i also won't be talking

00:02:58,230 --> 00:03:02,970
about schema migrations because it's a

00:03:01,380 --> 00:03:04,920
very complex topic I don't even consider

00:03:02,970 --> 00:03:07,560
it a part of my talk but every time I've

00:03:04,920 --> 00:03:09,630
tried my talk somewhere I've been asked

00:03:07,560 --> 00:03:12,270
about schema migrations people that's

00:03:09,630 --> 00:03:14,310
that's a topic for like six hour

00:03:12,270 --> 00:03:17,790
tutorial or there's a subtopic of a talk

00:03:14,310 --> 00:03:20,330
so what will I be talking about I will

00:03:17,790 --> 00:03:23,489
introduce you to in my opinion

00:03:20,330 --> 00:03:25,830
responsible and solid development and

00:03:23,489 --> 00:03:28,410
deployment cycle and I will point some

00:03:25,830 --> 00:03:33,030
typical and popular mistakes along the

00:03:28,410 --> 00:03:36,300
way that's all but still a lot so still

00:03:33,030 --> 00:03:38,310
let me get take a step back and reduce

00:03:36,300 --> 00:03:40,980
you to the key concept behind everything

00:03:38,310 --> 00:03:45,090
I will be saying and that's easy does

00:03:40,980 --> 00:03:48,510
not equal simple easy it's the opposite

00:03:45,090 --> 00:03:50,280
of difficult which isn't exactly a bad

00:03:48,510 --> 00:03:53,340
thing that's what we get paid for to

00:03:50,280 --> 00:03:55,830
solve difficult problems simple it's the

00:03:53,340 --> 00:03:57,750
opposite of complex in complexity it's

00:03:55,830 --> 00:04:01,230
one of the worst thing ever in software

00:03:57,750 --> 00:04:03,209
development so easy is something you

00:04:01,230 --> 00:04:05,549
come up quickly easily if you've just

00:04:03,209 --> 00:04:07,950
read the blog post or anything it's just

00:04:05,549 --> 00:04:10,170
lies near simple it's something you have

00:04:07,950 --> 00:04:13,920
to work for but it will serve you well

00:04:10,170 --> 00:04:16,410
on a long run but don't take my word for

00:04:13,920 --> 00:04:20,180
it let's ask our wiki all trustworthy

00:04:16,410 --> 00:04:23,740
guy and who's more apt and dice crack

00:04:20,180 --> 00:04:25,870
simplicity is prerequisite for liability

00:04:23,740 --> 00:04:29,500
and everyone who has been ever found out

00:04:25,870 --> 00:04:31,509
of his bed at 4 a.m. on a Sunday knows

00:04:29,500 --> 00:04:35,259
that reliability is what you really want

00:04:31,509 --> 00:04:38,139
and to make matters more severe it can

00:04:35,259 --> 00:04:39,940
be expanded to security it's as simple

00:04:38,139 --> 00:04:42,630
if you want to assess the security of a

00:04:39,940 --> 00:04:46,419
system keep it as simple as possible so

00:04:42,630 --> 00:04:50,259
the corollary put effort into making

00:04:46,419 --> 00:04:53,560
your deployments simple because what's

00:04:50,259 --> 00:04:57,940
easy now make house complexity down the

00:04:53,560 --> 00:05:00,430
road and mamak very well development

00:04:57,940 --> 00:05:02,190
impossible at some point so and it's the

00:05:00,430 --> 00:05:05,139
reason why this talk is also relevant

00:05:02,190 --> 00:05:09,190
for people just starting out because

00:05:05,139 --> 00:05:11,500
once you get successful reality will

00:05:09,190 --> 00:05:16,120
catch up with you and you will pay a

00:05:11,500 --> 00:05:19,599
component technical depth so let's get

00:05:16,120 --> 00:05:21,729
started you have a great idea for a

00:05:19,599 --> 00:05:23,440
Python application maybe ever even a

00:05:21,729 --> 00:05:25,509
working proof of concept how do you

00:05:23,440 --> 00:05:27,340
bring it into production the first

00:05:25,509 --> 00:05:30,729
question arise actually before you even

00:05:27,340 --> 00:05:32,620
write a line of code because on what

00:05:30,729 --> 00:05:35,770
platform I going to develop your app on

00:05:32,620 --> 00:05:39,009
look we run our patent applications on

00:05:35,770 --> 00:05:40,840
Linux but there's no way I will ever run

00:05:39,009 --> 00:05:41,349
Linux on the desktop again I did it for

00:05:40,840 --> 00:05:45,300
a decade

00:05:41,349 --> 00:05:47,320
I'm served it's ok but on the other hand

00:05:45,300 --> 00:05:49,990
developing on anything else than your

00:05:47,320 --> 00:05:51,690
target platform bob has problems and

00:05:49,990 --> 00:05:54,310
headache it's down the road because

00:05:51,690 --> 00:05:56,770
packages and only packages actually

00:05:54,310 --> 00:05:58,870
patent itself to behave in often

00:05:56,770 --> 00:06:02,979
profusely subtool different ways on

00:05:58,870 --> 00:06:05,770
different platforms so doesn't mean ah

00:06:02,979 --> 00:06:08,710
we can't we can't use our favorite

00:06:05,770 --> 00:06:10,360
Windows 8 for development now it does

00:06:08,710 --> 00:06:13,090
not mean because there's virtualization

00:06:10,360 --> 00:06:15,909
and just vagrant I can't do vagrant

00:06:13,090 --> 00:06:18,070
justice in this talk but vagrant it's

00:06:15,909 --> 00:06:20,380
the simple tool which makes

00:06:18,070 --> 00:06:23,590
virtualization accessible to developers

00:06:20,380 --> 00:06:26,229
and let me just point one thing out it

00:06:23,590 --> 00:06:28,630
it helps you setting up shared folders

00:06:26,229 --> 00:06:30,669
it just means we are developing in your

00:06:28,630 --> 00:06:32,889
in your favorite environment on your

00:06:30,669 --> 00:06:33,610
favorite platform and it makes sure that

00:06:32,889 --> 00:06:36,410
your

00:06:33,610 --> 00:06:38,090
get mirrored into the VM where you can

00:06:36,410 --> 00:06:40,040
run your applications your production

00:06:38,090 --> 00:06:44,300
server you know your development server

00:06:40,040 --> 00:06:44,840
your unit tests whatever write it it's

00:06:44,300 --> 00:06:55,130
great

00:06:44,840 --> 00:06:57,200
so now operations told you that your

00:06:55,130 --> 00:07:01,430
target platform is going to be sent us

00:06:57,200 --> 00:07:06,100
five because they hate you so we know

00:07:01,430 --> 00:07:08,960
which Python council sent us five right

00:07:06,100 --> 00:07:13,490
2.4 doesn't mean you have to use Python

00:07:08,960 --> 00:07:16,040
fruit for no yeah we are basically

00:07:13,490 --> 00:07:18,500
trading every day productivity for like

00:07:16,040 --> 00:07:21,500
30 minutes it takes to get a package of

00:07:18,500 --> 00:07:24,170
her latest Python and again don't take

00:07:21,500 --> 00:07:26,870
my word for it let's ask another expert

00:07:24,170 --> 00:07:27,260
this time not so old will obscure that's

00:07:26,870 --> 00:07:31,669
right

00:07:27,260 --> 00:07:34,990
come on and who loves requests everybody

00:07:31,669 --> 00:07:37,640
- oh except for David Kramer maybe so

00:07:34,990 --> 00:07:42,890
what has you to say to some dude who was

00:07:37,640 --> 00:07:45,260
complaining that yeah

00:07:42,890 --> 00:07:48,010
request dozen run with Python to root

00:07:45,260 --> 00:07:52,160
for and I have absolutely nothing to add

00:07:48,010 --> 00:07:56,840
and actually there's much more than I

00:07:52,160 --> 00:07:59,419
want to latex latest stuff because if if

00:07:56,840 --> 00:08:01,280
you're making money with Python and I

00:07:59,419 --> 00:08:04,190
really hope that everybody of you will

00:08:01,280 --> 00:08:07,190
or is or whatever and becomes your key

00:08:04,190 --> 00:08:09,740
infrastructure and it shouldn't be

00:08:07,190 --> 00:08:12,169
really dictated by a third party or even

00:08:09,740 --> 00:08:16,070
verse by the version of a product of a

00:08:12,169 --> 00:08:18,110
third party so and it works in both

00:08:16,070 --> 00:08:20,060
directions actually so imagine you have

00:08:18,110 --> 00:08:24,950
an application which runs only Python

00:08:20,060 --> 00:08:28,070
through route for what now I developing

00:08:24,950 --> 00:08:29,270
only PI do it for or if you want to

00:08:28,070 --> 00:08:32,450
upgrade you have the upgrade or your

00:08:29,270 --> 00:08:35,479
servers know you need something you can

00:08:32,450 --> 00:08:40,120
rely on so it's really not that hard and

00:08:35,479 --> 00:08:40,120
in turn just full of people packages so

00:08:40,900 --> 00:08:45,649
since you're all here you're obviously

00:08:43,310 --> 00:08:49,310
smart and good-looking

00:08:45,649 --> 00:08:49,730
but your stupid pointy hair boss doesn't

00:08:49,310 --> 00:08:53,509
get it

00:08:49,730 --> 00:08:56,839
and because enterprise policies right so

00:08:53,509 --> 00:08:59,959
there are certain shortcuts like pi run

00:08:56,839 --> 00:09:03,620
to get a more recent Python on your

00:08:59,959 --> 00:09:06,589
service but in the end you know you live

00:09:03,620 --> 00:09:08,720
only once and I would I would take about

00:09:06,589 --> 00:09:10,069
such stuff if I would be curing cancer

00:09:08,720 --> 00:09:10,519
or something like that but everything

00:09:10,069 --> 00:09:13,339
else

00:09:10,519 --> 00:09:14,899
I think there are some tech recruiters

00:09:13,339 --> 00:09:19,939
around here so really don't settle for

00:09:14,899 --> 00:09:22,639
 so you have your Python you

00:09:19,939 --> 00:09:24,769
have your platform write your code you

00:09:22,639 --> 00:09:26,540
write tests ideally one press the line

00:09:24,769 --> 00:09:27,800
coverage because you don't want that

00:09:26,540 --> 00:09:30,889
some type who brings down your vault

00:09:27,800 --> 00:09:32,660
application but test a birthless if

00:09:30,889 --> 00:09:34,670
they're honest against a different set

00:09:32,660 --> 00:09:36,649
of dependencies in your development

00:09:34,670 --> 00:09:39,559
environment they're in your in your

00:09:36,649 --> 00:09:41,540
production environment so what's the

00:09:39,559 --> 00:09:43,490
easiest way to get to make this shirt

00:09:41,540 --> 00:09:45,680
and you have the same versions right

00:09:43,490 --> 00:09:51,139
just use the system packages that come

00:09:45,680 --> 00:09:53,329
with your OS no don't do it analyst your

00:09:51,139 --> 00:09:56,089
writing software for a distribution

00:09:53,329 --> 00:09:58,129
which is a valid use case don't ever use

00:09:56,089 --> 00:10:01,129
packages from a distribution and unless

00:09:58,129 --> 00:10:03,170
you can make sure that Europe where

00:10:01,129 --> 00:10:05,209
there will be never more than one Python

00:10:03,170 --> 00:10:06,230
application per server don't use Google

00:10:05,209 --> 00:10:11,420
packages at all

00:10:06,230 --> 00:10:14,589
why so some packages are spotty so so

00:10:11,420 --> 00:10:17,750
you have basically the choice between

00:10:14,589 --> 00:10:22,910
reimplemented half of Pi P I which is

00:10:17,750 --> 00:10:24,980
not pronounced pi PI and or or you end

00:10:22,910 --> 00:10:29,120
up with a of sister packages

00:10:24,980 --> 00:10:31,699
and solve it solved once it's severely

00:10:29,120 --> 00:10:33,410
outdated so and again works in both

00:10:31,699 --> 00:10:35,870
directions sure you don't want to work

00:10:33,410 --> 00:10:37,850
with Python with Django 1.3 till the

00:10:35,870 --> 00:10:40,519
next LTS what if you have an application

00:10:37,850 --> 00:10:42,170
with Django 1.0 do you want to have to

00:10:40,519 --> 00:10:43,759
port all of your applications just

00:10:42,170 --> 00:10:46,009
because operations want to update the

00:10:43,759 --> 00:10:48,350
servers you lose control over your own

00:10:46,009 --> 00:10:50,029
development cycles about how you

00:10:48,350 --> 00:10:53,540
distribute your working power that's a

00:10:50,029 --> 00:10:55,850
very bad thing one quick word about

00:10:53,540 --> 00:10:57,990
global packages you can get away with

00:10:55,850 --> 00:10:58,890
them but

00:10:57,990 --> 00:11:00,930
soon as you have more than one

00:10:58,890 --> 00:11:02,610
application on a server you will run

00:11:00,930 --> 00:11:04,440
into problems at some point just imagine

00:11:02,610 --> 00:11:06,899
one app needs request I would rotate

00:11:04,440 --> 00:11:08,670
another request one point one they can't

00:11:06,899 --> 00:11:11,279
run on the same server without extra

00:11:08,670 --> 00:11:12,930
measures and programming and deploying

00:11:11,279 --> 00:11:15,360
is hard enough you don't want to have to

00:11:12,930 --> 00:11:17,130
care about this too and fortunately you

00:11:15,360 --> 00:11:18,330
don't have to because we have a great

00:11:17,130 --> 00:11:20,820
solution to that it's quadrature

00:11:18,330 --> 00:11:23,880
environments you create it you activate

00:11:20,820 --> 00:11:27,020
it you install dependencies you test you

00:11:23,880 --> 00:11:29,580
test you test at some point you are done

00:11:27,020 --> 00:11:32,070
you freeze the requirements and the

00:11:29,580 --> 00:11:33,200
working environment and it's just a pip

00:11:32,070 --> 00:11:38,270
install Shaarawy

00:11:33,200 --> 00:11:41,610
so one word of caution pin them hard

00:11:38,270 --> 00:11:43,290
don't rely on semantic versioning

00:11:41,610 --> 00:11:45,240
semantic versioning is really

00:11:43,290 --> 00:11:47,190
well-intentioned but you're basically

00:11:45,240 --> 00:11:48,330
taking the word that some stranger on

00:11:47,190 --> 00:11:52,649
the internet won't break your

00:11:48,330 --> 00:11:54,089
applications it it will bite you believe

00:11:52,649 --> 00:11:57,180
me it bit me it bites everyone

00:11:54,089 --> 00:11:59,880
eventually if you want to have up to

00:11:57,180 --> 00:12:02,010
date neutral environments use people

00:11:59,880 --> 00:12:07,980
tools from my Twitter to convince and

00:12:02,010 --> 00:12:10,020
reason and be downloaded so there is one

00:12:07,980 --> 00:12:12,709
objection comes always up when I'm

00:12:10,020 --> 00:12:15,360
discouraging people of using secure

00:12:12,709 --> 00:12:17,310
system packages and it's security you

00:12:15,360 --> 00:12:20,399
want to your distribution makes sure

00:12:17,310 --> 00:12:22,050
that you don't get hacked and at least

00:12:20,399 --> 00:12:24,180
in my context and in my view this

00:12:22,050 --> 00:12:26,670
argument is total BS and it makes me mad

00:12:24,180 --> 00:12:28,620
every single time let me give you one

00:12:26,670 --> 00:12:30,329
things right it's your job to make sure

00:12:28,620 --> 00:12:33,240
that your applications are secure

00:12:30,329 --> 00:12:37,579
because your customers won't care at all

00:12:33,240 --> 00:12:40,440
that it's redheads fault that your your

00:12:37,579 --> 00:12:47,370
favorite framework wasn't patched fast

00:12:40,440 --> 00:12:49,110
enough right so remember rails right the

00:12:47,370 --> 00:12:51,870
purchasers were supposed to be applied

00:12:49,110 --> 00:12:54,029
immediately and such holes will be

00:12:51,870 --> 00:12:58,200
formed and Django eventually so there's

00:12:54,029 --> 00:12:59,610
no reason to be smug about it so you

00:12:58,200 --> 00:13:01,560
have to take responsibility for your own

00:12:59,610 --> 00:13:04,350
service nobody else would do it

00:13:01,560 --> 00:13:06,270
no redhead once explained to your

00:13:04,350 --> 00:13:08,970
customers whether they credit cards on

00:13:06,270 --> 00:13:11,850
internet so

00:13:08,970 --> 00:13:14,190
seeing all that we have code the drugs

00:13:11,850 --> 00:13:15,810
we know the dependencies everything is

00:13:14,190 --> 00:13:19,320
fine now we have to get our back on a

00:13:15,810 --> 00:13:21,540
service somehow right and for reasons I

00:13:19,320 --> 00:13:23,850
will I'm going to state later I want

00:13:21,540 --> 00:13:27,780
this to be have as little moving parts

00:13:23,850 --> 00:13:30,540
as possible and I think an outcome the

00:13:27,780 --> 00:13:32,580
most controversial part of my talk there

00:13:30,540 --> 00:13:34,710
seems to be the notion let the only one

00:13:32,580 --> 00:13:38,190
through way to deploy Python

00:13:34,710 --> 00:13:40,800
applications is running get using fabric

00:13:38,190 --> 00:13:43,860
on all the servers and I say net don't

00:13:40,800 --> 00:13:45,420
do it one thing straight ahead

00:13:43,860 --> 00:13:47,220
I love fabric Jeffery if you're out

00:13:45,420 --> 00:13:49,740
there or sit on YouTube I love you for

00:13:47,220 --> 00:13:51,600
it and I also use it for my deployments

00:13:49,740 --> 00:13:51,870
that's not the question but not like

00:13:51,600 --> 00:13:54,450
that

00:13:51,870 --> 00:13:56,120
what's wrong with it I don't want to

00:13:54,450 --> 00:13:58,650
build tools on my production servers

00:13:56,120 --> 00:14:01,230
because you see every piece of software

00:13:58,650 --> 00:14:03,390
that's on your servers okay can and will

00:14:01,230 --> 00:14:05,400
be used against you if you get hack

00:14:03,390 --> 00:14:08,090
against all measures it's simple like

00:14:05,400 --> 00:14:12,860
that and if people can start compiling

00:14:08,090 --> 00:14:15,570
it's twice as bad so it's also

00:14:12,860 --> 00:14:17,460
repetitive I don't want to compile my C

00:14:15,570 --> 00:14:20,340
extensions on every single server I

00:14:17,460 --> 00:14:21,780
don't want to create upgrade whatever my

00:14:20,340 --> 00:14:25,230
virtual environments on every single

00:14:21,780 --> 00:14:26,850
server and I don't want to download my

00:14:25,230 --> 00:14:28,830
dependencies on every single server

00:14:26,850 --> 00:14:33,290
right everybody of you should have a PI

00:14:28,830 --> 00:14:35,940
P I'm error which you probably don't and

00:14:33,290 --> 00:14:38,490
there's there's this point of security

00:14:35,940 --> 00:14:40,980
you just hopefully fix right now there's

00:14:38,490 --> 00:14:44,520
the problem that we have outages and

00:14:40,980 --> 00:14:46,830
there will be outages and put frankly

00:14:44,520 --> 00:14:49,020
you are wasting community resources when

00:14:46,830 --> 00:14:50,820
you are deploying the same application

00:14:49,020 --> 00:14:56,520
to five servers and download Jango five

00:14:50,820 --> 00:14:59,280
times so what I want is a blog something

00:14:56,520 --> 00:15:01,740
I can take and put it on a server and it

00:14:59,280 --> 00:15:05,040
works and I know it's beforehand that it

00:15:01,740 --> 00:15:07,530
works and if there are a waist level

00:15:05,040 --> 00:15:09,990
dependencies I want them to be specified

00:15:07,530 --> 00:15:14,010
in this blog and turns out we have just

00:15:09,990 --> 00:15:16,140
that it's cognitive packages and what's

00:15:14,010 --> 00:15:17,940
great about them well we have

00:15:16,140 --> 00:15:19,920
introspection you can ask a server hey

00:15:17,940 --> 00:15:21,580
what version of my app is installed we

00:15:19,920 --> 00:15:23,590
have configuration manager

00:15:21,580 --> 00:15:25,180
integration you can say this server is

00:15:23,590 --> 00:15:27,040
on this version no matter what the

00:15:25,180 --> 00:15:28,780
newest one is keep it at this one and

00:15:27,040 --> 00:15:30,730
they're versatile and it's a great thing

00:15:28,780 --> 00:15:32,260
about it because you are getting a build

00:15:30,730 --> 00:15:33,370
pipeline and you're assembling your

00:15:32,260 --> 00:15:37,090
native packages where you can do

00:15:33,370 --> 00:15:40,060
whatever you want and while deploying

00:15:37,090 --> 00:15:42,760
your applications you have all kinds of

00:15:40,060 --> 00:15:44,500
shell hooks like post RM post install

00:15:42,760 --> 00:15:46,890
and all the stuff and you can use it for

00:15:44,500 --> 00:15:50,110
any magic you need how does it work

00:15:46,890 --> 00:15:52,780
you need a build port of the target

00:15:50,110 --> 00:15:55,120
platform check your application out of

00:15:52,780 --> 00:15:58,210
VCS create a richer environment

00:15:55,120 --> 00:16:00,670
in solid dependencies you remember pip

00:15:58,210 --> 00:16:02,290
install the char you do whatever you

00:16:00,670 --> 00:16:05,530
want and I will tell you more about that

00:16:02,290 --> 00:16:07,000
you package the result specify all level

00:16:05,530 --> 00:16:09,250
dependencies if necessary push it to

00:16:07,000 --> 00:16:12,340
your repo and you can install it on many

00:16:09,250 --> 00:16:15,340
as many servers as you want and point

00:16:12,340 --> 00:16:17,470
force actually recreate because you have

00:16:15,340 --> 00:16:20,530
the final application just sitting there

00:16:17,470 --> 00:16:23,260
so you can for example run tests and if

00:16:20,530 --> 00:16:28,240
the tests fail you can just say no not

00:16:23,260 --> 00:16:30,130
package for you if you are using stuff

00:16:28,240 --> 00:16:32,290
like let's settle CoffeeScript sure you

00:16:30,130 --> 00:16:34,120
can compile them on the target service

00:16:32,290 --> 00:16:35,980
or let the user compile it in a browser

00:16:34,120 --> 00:16:38,410
but it's actually or not what you want

00:16:35,980 --> 00:16:40,600
nowadays you want your pages to load as

00:16:38,410 --> 00:16:42,280
quick as possible and I actually don't

00:16:40,600 --> 00:16:44,380
want to have no GS on my production

00:16:42,280 --> 00:16:47,110
servers either for a CoffeeScript

00:16:44,380 --> 00:16:48,430
compiler I think water and since this is

00:16:47,110 --> 00:16:50,410
the final stage you can also use

00:16:48,430 --> 00:16:52,750
something like yui compressor to

00:16:50,410 --> 00:16:54,280
compress all of your static assets

00:16:52,750 --> 00:16:57,910
together and you can gzip them and you

00:16:54,280 --> 00:16:59,670
can collect static for Django or build

00:16:57,910 --> 00:17:03,220
your translation catalogs all this stuff

00:16:59,670 --> 00:17:05,949
annals the final cherry you can just add

00:17:03,220 --> 00:17:07,390
cache busting text to templates which I

00:17:05,949 --> 00:17:13,630
just used the version of the application

00:17:07,390 --> 00:17:16,350
looks great so yeah people think

00:17:13,630 --> 00:17:19,180
packaging is hard and I can say you know

00:17:16,350 --> 00:17:22,390
force Jordan sis to give us fpm and it

00:17:19,180 --> 00:17:25,480
was good this ladies and gentlemen is a

00:17:22,390 --> 00:17:27,459
game changer you create your directory

00:17:25,480 --> 00:17:30,160
you put whatever you want inside of it

00:17:27,459 --> 00:17:30,830
you point fpm a directory we tell FP and

00:17:30,160 --> 00:17:32,450
what you

00:17:30,830 --> 00:17:36,500
and they're still deaf or rpm or

00:17:32,450 --> 00:17:38,090
whatever floats your boat that you don't

00:17:36,500 --> 00:17:40,220
want to run a known ripple server fair

00:17:38,090 --> 00:17:40,700
enough it's a little hard but fair

00:17:40,220 --> 00:17:44,540
enough

00:17:40,700 --> 00:17:46,520
well don't you can install system

00:17:44,540 --> 00:17:49,270
packages on a command line or just use

00:17:46,520 --> 00:17:51,950
plain tarballs this works just as well

00:17:49,270 --> 00:17:53,630
actually if you don't have root access

00:17:51,950 --> 00:17:55,990
to the servers you're deploying to

00:17:53,630 --> 00:17:58,550
travels are the only way to do it and

00:17:55,990 --> 00:18:00,950
I'm not really religious about native

00:17:58,550 --> 00:18:02,870
packages I just find them very handy but

00:18:00,950 --> 00:18:05,660
why hey what I am really just about is

00:18:02,870 --> 00:18:08,500
packaging ready to run proving to run

00:18:05,660 --> 00:18:11,679
virtual environments on your servers

00:18:08,500 --> 00:18:17,900
what you want to do though is automate

00:18:11,679 --> 00:18:19,820
because if it's hard not complicated to

00:18:17,900 --> 00:18:24,890
build such a package you won't be doing

00:18:19,820 --> 00:18:26,270
it right and and we all want to do CD we

00:18:24,890 --> 00:18:29,750
want to be pushing cool features all the

00:18:26,270 --> 00:18:34,340
time so I will show you how I build

00:18:29,750 --> 00:18:37,429
packages that's all and basically it's

00:18:34,340 --> 00:18:39,530
very to much good because I'm lazy the

00:18:37,429 --> 00:18:41,960
only interesting part is highlighted for

00:18:39,530 --> 00:18:45,290
you for your convenience it's the name

00:18:41,960 --> 00:18:47,059
of the of the application which is by by

00:18:45,290 --> 00:18:49,630
convention also the name of the git repo

00:18:47,059 --> 00:18:54,559
and the name of the package and whatnot

00:18:49,630 --> 00:18:56,720
I I specify the dependencies which I

00:18:54,559 --> 00:18:58,280
need to build the package and the run

00:18:56,720 --> 00:19:01,280
dependencies just get handed through to

00:18:58,280 --> 00:19:03,950
FPM and are saved in the native package

00:19:01,280 --> 00:19:06,980
so when I install this package

00:19:03,950 --> 00:19:10,220
I'll get my this is Postgres Postgres

00:19:06,980 --> 00:19:11,720
libraries installed along along of it

00:19:10,220 --> 00:19:12,920
the only kicker is you're asking hey

00:19:11,720 --> 00:19:16,190
what's with the deployment clasp up

00:19:12,920 --> 00:19:19,220
there right so the problem is this is

00:19:16,190 --> 00:19:22,880
highly individual and I'm really using a

00:19:19,220 --> 00:19:26,000
lot of convention here so I find it hard

00:19:22,880 --> 00:19:28,070
to make a really usable abstraction of

00:19:26,000 --> 00:19:30,950
this thing but if you want to see more

00:19:28,070 --> 00:19:34,040
code you can have a look at my blog post

00:19:30,950 --> 00:19:35,540
about native packages and if you don't

00:19:34,040 --> 00:19:37,220
really want to do it on yourself

00:19:35,540 --> 00:19:42,400
there's actually an open source project

00:19:37,220 --> 00:19:45,340
called parcel which started as

00:19:42,400 --> 00:19:47,050
they want to implement the principles

00:19:45,340 --> 00:19:51,370
I've lied down in my book article which

00:19:47,050 --> 00:19:53,830
is pretty much achievement unlocked yeah

00:19:51,370 --> 00:19:55,270
if you want native packages but don't

00:19:53,830 --> 00:19:56,550
want to write it on your own consider

00:19:55,270 --> 00:19:59,890
heading out I think they've just

00:19:56,550 --> 00:20:02,560
released a new version obviously there's

00:19:59,890 --> 00:20:06,670
more than one way to do it and I tried

00:20:02,560 --> 00:20:09,850
to link a certain a good choice of

00:20:06,670 --> 00:20:14,530
alternatives in my article in the page

00:20:09,850 --> 00:20:15,880
I've said before there's even well did

00:20:14,530 --> 00:20:18,130
you wait to do it using fabric and get

00:20:15,880 --> 00:20:21,130
that has been written by Deborah vendor

00:20:18,130 --> 00:20:22,870
as the retort to my articles I still

00:20:21,130 --> 00:20:25,690
don't like the approach but maybe it's

00:20:22,870 --> 00:20:30,310
better for you who knows you have to

00:20:25,690 --> 00:20:32,830
check it out for yourself so going on

00:20:30,310 --> 00:20:35,130
configuration what are we going to do

00:20:32,830 --> 00:20:39,460
with that I'd put in the repose to write

00:20:35,130 --> 00:20:41,530
la don't do it use a configuration

00:20:39,460 --> 00:20:43,030
management system what is it

00:20:41,530 --> 00:20:47,200
that's a declarative way to describe

00:20:43,030 --> 00:20:50,380
services you say this server as a food

00:20:47,200 --> 00:20:53,950
server so it means you I want package

00:20:50,380 --> 00:20:56,260
who is and I want who is that any an EDC

00:20:53,950 --> 00:20:59,230
and please make sure that this config

00:20:56,260 --> 00:21:01,750
has permission bits 600 and the CM

00:20:59,230 --> 00:21:03,490
chooses the path to this state or it

00:21:01,750 --> 00:21:09,480
explodes in your face which is just as

00:21:03,490 --> 00:21:12,370
likely there's several solutions but

00:21:09,480 --> 00:21:17,410
some of them are written Python and

00:21:12,370 --> 00:21:20,380
required to write XML the most common

00:21:17,410 --> 00:21:25,780
ones are currently puppet and our very

00:21:20,380 --> 00:21:28,300
newest chef and yeah both of them reek

00:21:25,780 --> 00:21:30,820
terribly of Ruby and I don't mean the

00:21:28,300 --> 00:21:33,820
source code of themselves but the DSL

00:21:30,820 --> 00:21:35,860
so be prepared for that and there's a

00:21:33,820 --> 00:21:38,920
common theme about along all of them and

00:21:35,860 --> 00:21:41,350
it's they are not easy at all because

00:21:38,920 --> 00:21:43,810
you all have to plan ahead you will have

00:21:41,350 --> 00:21:45,310
to make decisions you with information

00:21:43,810 --> 00:21:47,710
which you probably don't have yet and

00:21:45,310 --> 00:21:48,840
then you will turn out that you plant

00:21:47,710 --> 00:21:52,499
Rome and

00:21:48,840 --> 00:21:56,009
that's how it is so it will be some pain

00:21:52,499 --> 00:21:58,889
in the beginning so why anyway well

00:21:56,009 --> 00:22:01,110
there's their source safety and security

00:21:58,889 --> 00:22:04,320
I prefer to run my tests which contain

00:22:01,110 --> 00:22:05,940
drop tables without the production other

00:22:04,320 --> 00:22:08,460
based credentials anywhere near of my

00:22:05,940 --> 00:22:10,409
source code it's just better feeling

00:22:08,460 --> 00:22:12,929
it's it's all a better feeling if you

00:22:10,409 --> 00:22:15,330
know that's some piece of automated

00:22:12,929 --> 00:22:19,610
software it's making sure that your SSL

00:22:15,330 --> 00:22:23,460
keys have the right permissions or just

00:22:19,610 --> 00:22:25,289
just imagine you have a coworker we just

00:22:23,460 --> 00:22:33,119
told you that no js' is great

00:22:25,289 --> 00:22:35,100
so you fired him you have to get it you

00:22:33,119 --> 00:22:37,049
have to get his SSH key from all the

00:22:35,100 --> 00:22:39,629
servers before he infests them with some

00:22:37,049 --> 00:22:42,299
Java scripts right so you can do it by

00:22:39,629 --> 00:22:46,049
hand but I guarantee you you will forget

00:22:42,299 --> 00:22:47,970
at least one server right so it's it's

00:22:46,049 --> 00:22:50,999
better to have something automated which

00:22:47,970 --> 00:22:54,419
is intended to do just that the main

00:22:50,999 --> 00:22:56,460
point is reproducibility though imagine

00:22:54,419 --> 00:22:58,769
a back-end comes down or you get

00:22:56,460 --> 00:23:02,840
mentioned on TechCrunch you want a new

00:22:58,769 --> 00:23:05,749
back end in what minutes is too long so

00:23:02,840 --> 00:23:09,059
that's pretty easy well unfortunately

00:23:05,749 --> 00:23:10,259
most about configuration management and

00:23:09,059 --> 00:23:13,529
it's also the reason why many people

00:23:10,259 --> 00:23:17,039
will really defer using it is that's

00:23:13,529 --> 00:23:18,749
about delayed gratification and delayed

00:23:17,039 --> 00:23:23,840
gratification something humans are

00:23:18,749 --> 00:23:26,100
inherently bad at take my word for it

00:23:23,840 --> 00:23:28,350
that many things down the road just

00:23:26,100 --> 00:23:32,369
aren't possible without a proper

00:23:28,350 --> 00:23:34,499
configuration management and we had to

00:23:32,369 --> 00:23:37,019
puppet eyes our infrastructure after 10

00:23:34,499 --> 00:23:38,990
years and it was a rough trip I wish to

00:23:37,019 --> 00:23:42,570
nobody so start early

00:23:38,990 --> 00:23:44,490
speaking of ledger in this very room ok

00:23:42,570 --> 00:23:46,499
Huddleston will speak about chef so if

00:23:44,490 --> 00:23:49,639
you're interested in CM in general or

00:23:46,499 --> 00:23:52,529
chef in particular just stay seated

00:23:49,639 --> 00:23:55,919
now I've helped one of the main reasons

00:23:52,529 --> 00:23:57,840
for CM and that's when you think that

00:23:55,919 --> 00:24:00,130
you are ready to bring up a bit of

00:23:57,840 --> 00:24:04,000
production

00:24:00,130 --> 00:24:06,549
but actually you have to test it it

00:24:04,000 --> 00:24:08,200
works in a production environment but

00:24:06,549 --> 00:24:10,990
it's kind of a chicken-egg problem right

00:24:08,200 --> 00:24:12,880
so what do you do you set up a staging

00:24:10,990 --> 00:24:14,919
environment which basically means you

00:24:12,880 --> 00:24:16,539
build an exact replica of your

00:24:14,919 --> 00:24:19,030
production environment but the only

00:24:16,539 --> 00:24:21,490
difference being your new ad or a new

00:24:19,030 --> 00:24:23,679
version of your app and there you go you

00:24:21,490 --> 00:24:25,570
can test you accept you can run your

00:24:23,679 --> 00:24:30,520
acceptance test a yearly automated ones

00:24:25,570 --> 00:24:33,340
so this is not easy but straightforward

00:24:30,520 --> 00:24:34,600
route cm without CM it's basically

00:24:33,340 --> 00:24:37,419
impossible to make sure that your

00:24:34,600 --> 00:24:39,610
environments I identical so now we are

00:24:37,419 --> 00:24:43,510
getting to the more practical parts like

00:24:39,610 --> 00:24:46,360
it's awesome jinglun and it does some

00:24:43,510 --> 00:24:50,650
privileged stuff so you have to run it

00:24:46,360 --> 00:24:50,950
as route right let me get one thing

00:24:50,650 --> 00:24:54,370
straight

00:24:50,950 --> 00:24:56,590
I love route you won't see me using sudo

00:24:54,370 --> 00:24:58,210
on servers I'm not one of those guys but

00:24:56,590 --> 00:25:04,090
when it comes to network facing

00:24:58,210 --> 00:25:06,549
applications don't do it the internet is

00:25:04,090 --> 00:25:08,169
full of people without alive or with a

00:25:06,549 --> 00:25:11,919
significant income from intruding into

00:25:08,169 --> 00:25:14,830
servers your servers so as soon as

00:25:11,919 --> 00:25:18,309
there's a zero day in Django you don't

00:25:14,830 --> 00:25:20,950
want them to volley rule to own the

00:25:18,309 --> 00:25:23,559
world's server it has to be just give

00:25:20,950 --> 00:25:25,090
you an appetizer of what you can do as

00:25:23,559 --> 00:25:28,210
route what you can do as a normal user

00:25:25,090 --> 00:25:32,679
is like significant iffing your local

00:25:28,210 --> 00:25:34,659
traffic so it's quite probable that you

00:25:32,679 --> 00:25:37,390
get hack at some point be prepared for

00:25:34,659 --> 00:25:39,100
it and this is one of the parts so let

00:25:37,390 --> 00:25:40,390
excuse us if you need a privileged part

00:25:39,100 --> 00:25:42,750
and if you're writing web applications

00:25:40,390 --> 00:25:45,130
you probably don't need a privileged pot

00:25:42,750 --> 00:25:48,059
drop privileges after listening to the

00:25:45,130 --> 00:25:51,840
part or even better use out point four

00:25:48,059 --> 00:25:54,070
which allows by non privilege of the

00:25:51,840 --> 00:25:57,280
non-privileged applications to listen on

00:25:54,070 --> 00:26:00,640
privilege reports yeah if you need the

00:25:57,280 --> 00:26:04,299
power of fruit because it's a user

00:26:00,640 --> 00:26:06,580
management application whatever there's

00:26:04,299 --> 00:26:09,780
a simple solution to that to write

00:26:06,580 --> 00:26:12,610
single purpose workers write as tiny

00:26:09,780 --> 00:26:15,040
tiny piece of code which

00:26:12,610 --> 00:26:17,140
can audit for security and which does

00:26:15,040 --> 00:26:19,150
only one thing like creating users

00:26:17,140 --> 00:26:22,630
deleting users so if someone gets access

00:26:19,150 --> 00:26:24,610
and hex you they can create and delete

00:26:22,630 --> 00:26:28,600
users all a day but they can't sniff

00:26:24,610 --> 00:26:30,700
your traffic and we have by now restaura

00:26:28,600 --> 00:26:34,330
of great solutions for at like salary

00:26:30,700 --> 00:26:39,100
which is right with it so a healthy

00:26:34,330 --> 00:26:41,140
paranoia doesn't end with but not

00:26:39,100 --> 00:26:44,440
running applications as route though so

00:26:41,140 --> 00:26:46,570
make every app have its own user force

00:26:44,440 --> 00:26:47,350
lock in shell has been force use

00:26:46,570 --> 00:26:49,540
iptables

00:26:47,350 --> 00:26:52,690
to lock down everything you don't need

00:26:49,540 --> 00:26:54,820
to be facing the internet use file

00:26:52,690 --> 00:26:57,160
sockets they are faster they're more

00:26:54,820 --> 00:26:59,500
secure because you can on intra host

00:26:57,160 --> 00:27:03,490
communication of course you can so they

00:26:59,500 --> 00:27:07,210
are faster you can control the access to

00:27:03,490 --> 00:27:08,620
them using file permissions and you

00:27:07,210 --> 00:27:09,820
don't have to come up with port numbers

00:27:08,620 --> 00:27:13,000
all the time you just give them

00:27:09,820 --> 00:27:14,740
meaningful names that great if you have

00:27:13,000 --> 00:27:18,880
shared databases between various

00:27:14,740 --> 00:27:20,770
applications again each each application

00:27:18,880 --> 00:27:22,360
should have its own user with its own

00:27:20,770 --> 00:27:26,710
set of privileges give them just as much

00:27:22,360 --> 00:27:28,720
root privileges as they need good

00:27:26,710 --> 00:27:32,620
databases allow you to limit the access

00:27:28,720 --> 00:27:36,460
on schema level table level or in column

00:27:32,620 --> 00:27:38,830
level to make use of that use SSL for

00:27:36,460 --> 00:27:41,890
everything and ideally even internally

00:27:38,830 --> 00:27:45,010
if you can make sure that you have a

00:27:41,890 --> 00:27:48,669
really private network you should really

00:27:45,010 --> 00:27:50,440
use SSL and finally use some kind of

00:27:48,669 --> 00:27:53,110
fail to ban it's basically just a way to

00:27:50,440 --> 00:27:54,179
block automatically block try and

00:27:53,110 --> 00:27:56,500
appease if you are trying to brute force

00:27:54,179 --> 00:28:02,760
their way on your service you will

00:27:56,500 --> 00:28:05,710
really be surprised how many that are so

00:28:02,760 --> 00:28:07,270
going on we have configuration we have

00:28:05,710 --> 00:28:09,130
code we have everything we can bring on

00:28:07,270 --> 00:28:10,840
a server it's H on a server

00:28:09,130 --> 00:28:13,000
we start our screen session start the

00:28:10,840 --> 00:28:18,669
server and it can detach and go to sleep

00:28:13,000 --> 00:28:19,990
right show then whatever done that come

00:28:18,669 --> 00:28:20,970
on we are friends around here don't be

00:28:19,990 --> 00:28:25,169
shy

00:28:20,970 --> 00:28:30,210
and as your friend I have to tell you

00:28:25,169 --> 00:28:31,890
may yo undo it it's stupid you're new

00:28:30,210 --> 00:28:33,450
it's stupid I knew it's stupid but those

00:28:31,890 --> 00:28:37,400
convenience we've done anyway so first

00:28:33,450 --> 00:28:37,400
of all you should use Tmax on screen

00:28:41,240 --> 00:28:46,380
secondly even that is wrong and I hate

00:28:44,250 --> 00:28:49,409
to say the word Tmax and wrong in one

00:28:46,380 --> 00:28:52,130
sentence but in this case it is so we

00:28:49,409 --> 00:28:55,140
have again a plethora of alternatives um

00:28:52,130 --> 00:28:57,510
because the times where you had to write

00:28:55,140 --> 00:29:00,330
system 5 init scripts to get your app

00:28:57,510 --> 00:29:03,539
running are gone we have great ways to

00:29:00,330 --> 00:29:06,210
get your applications running so we are

00:29:03,539 --> 00:29:08,159
running Ubuntu so we're using upstart it

00:29:06,210 --> 00:29:09,539
serves us mostly well so how does it

00:29:08,159 --> 00:29:13,140
look like to start a django application

00:29:09,539 --> 00:29:16,140
using upstart you tell it when to start

00:29:13,140 --> 00:29:17,970
when to stop we tell it we want to

00:29:16,140 --> 00:29:20,039
respond when it crashes you tell it to

00:29:17,970 --> 00:29:24,150
directory to run from as which user

00:29:20,039 --> 00:29:27,480
which command that's all you write at

00:29:24,150 --> 00:29:38,700
once and it's done no screen please

00:29:27,480 --> 00:29:41,159
so going even further at this point you

00:29:38,700 --> 00:29:42,919
may have realized and if not I hate to

00:29:41,159 --> 00:29:45,720
be the bearer of the bad news that

00:29:42,919 --> 00:29:52,230
Django's development server is not

00:29:45,720 --> 00:29:55,710
exactly web-scale yeah let's sing it so

00:29:52,230 --> 00:29:58,020
if you're writing that applications you

00:29:55,710 --> 00:29:59,760
will need a whiskey container and it's

00:29:58,020 --> 00:30:01,770
well now that the only true solutions to

00:29:59,760 --> 00:30:07,020
that is Apache together with mod whiskey

00:30:01,770 --> 00:30:10,200
right yet comrades first of all using

00:30:07,020 --> 00:30:13,409
Apache is perfectly fine I'm not hating

00:30:10,200 --> 00:30:14,880
on Apache I'm not hating on motive iski

00:30:13,409 --> 00:30:17,960
and I'm most certainly not hating on

00:30:14,880 --> 00:30:21,120
gram Dumbleton but it should be a

00:30:17,960 --> 00:30:23,250
conscious decision for it because if you

00:30:21,120 --> 00:30:25,440
are using Apache you get a fully fledged

00:30:23,250 --> 00:30:29,070
attack helicopter together with the edit

00:30:25,440 --> 00:30:33,630
feature of Python hosting and what if

00:30:29,070 --> 00:30:36,590
you don't need those rockets what if you

00:30:33,630 --> 00:30:42,990
don't needed to crush your enemies

00:30:36,590 --> 00:30:46,350
maybe your app is big enough so you can

00:30:42,990 --> 00:30:49,640
take off those Rockets you can lean out

00:30:46,350 --> 00:30:52,169
an Apache server but it's my personal

00:30:49,640 --> 00:30:55,980
prefer preference sorry

00:30:52,169 --> 00:30:58,049
English is hard to build things up and

00:30:55,980 --> 00:31:04,470
add features until they do what I want

00:30:58,049 --> 00:31:07,950
to do instead of taking something and

00:31:04,470 --> 00:31:12,149
stripping just to make it just to the

00:31:07,950 --> 00:31:14,610
work so I find that a combination of a

00:31:12,149 --> 00:31:16,950
lightweight container like micro whiskey

00:31:14,610 --> 00:31:18,779
or unicorn together with nginx

00:31:16,950 --> 00:31:22,409
give you a much better separation of

00:31:18,779 --> 00:31:24,690
concerns so your app is telling its app

00:31:22,409 --> 00:31:26,820
magic like sharing bagel recipes or

00:31:24,690 --> 00:31:30,390
whatever it doesn't have to know about

00:31:26,820 --> 00:31:32,909
things like SSL or that some users

00:31:30,390 --> 00:31:36,029
should should go to SSL that's the job

00:31:32,909 --> 00:31:39,450
of the web server actually and nginx is

00:31:36,029 --> 00:31:41,880
really great at that it will serve your

00:31:39,450 --> 00:31:43,289
SSL it will forward all of your users

00:31:41,880 --> 00:31:48,320
from HTTP to HTTPS

00:31:43,289 --> 00:31:50,850
it will serve your static data it will

00:31:48,320 --> 00:31:52,740
set headers for you which you should

00:31:50,850 --> 00:31:55,039
because there are certain headers you

00:31:52,740 --> 00:31:58,610
should always set like to avoid

00:31:55,039 --> 00:32:01,200
cross-site scripting and there's even

00:31:58,610 --> 00:32:03,480
there's even get to load balancer

00:32:01,200 --> 00:32:05,940
built-in which may serve you good enough

00:32:03,480 --> 00:32:11,039
until you are brave enough to venture

00:32:05,940 --> 00:32:13,440
into a proxy so and this motor approach

00:32:11,039 --> 00:32:16,470
has one big benefit because it makes

00:32:13,440 --> 00:32:18,059
possible to test those those both of

00:32:16,470 --> 00:32:22,679
them independently which is a really

00:32:18,059 --> 00:32:25,049
good thing so how hard it is to run path

00:32:22,679 --> 00:32:27,380
Django application using unicorn that's

00:32:25,049 --> 00:32:30,960
all it is IRC is full of sad people

00:32:27,380 --> 00:32:33,000
struggling to get Apache do what they

00:32:30,960 --> 00:32:37,919
want this is what would them get started

00:32:33,000 --> 00:32:39,600
and it gets even easier because you can

00:32:37,919 --> 00:32:43,140
just add even current installed apps

00:32:39,600 --> 00:32:46,020
then you can use magical PI and nginx is

00:32:43,140 --> 00:32:49,169
just as straightforward no XML here you

00:32:46,020 --> 00:32:50,010
define a back-end you define a location

00:32:49,169 --> 00:32:53,040
for aesthetic

00:32:50,010 --> 00:32:57,480
which get automatically served done if

00:32:53,040 --> 00:33:03,390
you excuse me yeah yeah I want to just

00:32:57,480 --> 00:33:06,840
keep it simple in this case so yeah yeah

00:33:03,390 --> 00:33:09,030
that's about it it's really I find it

00:33:06,840 --> 00:33:11,580
more pleasant than Purdue 6ml but your

00:33:09,030 --> 00:33:14,880
mileage may vary and again I bet she's

00:33:11,580 --> 00:33:15,540
perfectly fine and if you think that you

00:33:14,880 --> 00:33:18,110
need a Pesci

00:33:15,540 --> 00:33:20,460
or if you're considering using a Pesci

00:33:18,110 --> 00:33:23,580
I've had a great news for you it goes

00:33:20,460 --> 00:33:25,500
the one person you should listen to is

00:33:23,580 --> 00:33:28,110
Graham Templeton who wrote Maude whiskey

00:33:25,500 --> 00:33:29,730
and he will be in this room just after

00:33:28,110 --> 00:33:37,110
Kate so this track is getting just

00:33:29,730 --> 00:33:40,890
better so now I'm sorry acceptance has

00:33:37,110 --> 00:33:43,049
passed we can we are ready to deploy you

00:33:40,890 --> 00:33:46,020
merger changes from your staging the

00:33:43,049 --> 00:33:48,630
environment into your into your

00:33:46,020 --> 00:33:54,780
production environment done trigger your

00:33:48,630 --> 00:33:57,660
cm and it might not get low so this is a

00:33:54,780 --> 00:33:59,809
crucial point actually because with all

00:33:57,660 --> 00:34:02,610
if you've done everything I've told you

00:33:59,809 --> 00:34:04,860
getting from there back to here is

00:34:02,610 --> 00:34:07,440
trivial you revert the changes in cm

00:34:04,860 --> 00:34:08,970
which makes which also reinstalls the

00:34:07,440 --> 00:34:11,609
old version which you know that works

00:34:08,970 --> 00:34:13,859
and everything's fine and you can have

00:34:11,609 --> 00:34:16,020
all the time of all the time you need to

00:34:13,859 --> 00:34:18,090
investigate problems and it you see what

00:34:16,020 --> 00:34:20,159
happened here the actual deployment is

00:34:18,090 --> 00:34:22,560
quite easy and it's what you wanted to

00:34:20,159 --> 00:34:26,129
be because this is the only put only

00:34:22,560 --> 00:34:28,169
spot that effects your customers so you

00:34:26,129 --> 00:34:30,840
want it to be fast predictable and

00:34:28,169 --> 00:34:31,820
easily reversible and this last point is

00:34:30,840 --> 00:34:36,270
more important than you may think

00:34:31,820 --> 00:34:38,490
because being able to quickly roll back

00:34:36,270 --> 00:34:40,649
from a fare deployment instead of

00:34:38,490 --> 00:34:43,919
fiddling on a target service is a sign

00:34:40,649 --> 00:34:46,740
of major deployment practices so you add

00:34:43,919 --> 00:34:48,030
this app you have to make sure that it

00:34:46,740 --> 00:34:49,919
stays up how do you make sure it is

00:34:48,030 --> 00:34:51,750
happen you need to know when it's down

00:34:49,919 --> 00:34:54,179
how do you know that it's down you

00:34:51,750 --> 00:34:56,790
monitoring the easiest way to get into

00:34:54,179 --> 00:34:59,990
monitoring is just get Pingdom sign up

00:34:56,790 --> 00:34:59,990
each test works

00:35:02,460 --> 00:35:07,530
at some point and it should be really

00:35:05,010 --> 00:35:09,240
soon you realize that Pingdom won't do

00:35:07,530 --> 00:35:10,920
everything you need because it's not

00:35:09,240 --> 00:35:13,410
enough to just monitor your front facing

00:35:10,920 --> 00:35:15,540
page you have to monitor everything you

00:35:13,410 --> 00:35:17,790
need to be confident in and that's for

00:35:15,540 --> 00:35:20,700
example I hope you all are doing backups

00:35:17,790 --> 00:35:22,680
I'm monitoring a backup sitive work that

00:35:20,700 --> 00:35:25,650
you can actually import them afterwards

00:35:22,680 --> 00:35:29,130
you should just as the same remember our

00:35:25,650 --> 00:35:32,579
not Jas guy if you do have to have

00:35:29,130 --> 00:35:34,500
confidence that there SSH key is removed

00:35:32,579 --> 00:35:37,500
from all the servers we have to monitor

00:35:34,500 --> 00:35:39,000
that the CM Brooks on every server so

00:35:37,500 --> 00:35:40,970
you will need something that runs in

00:35:39,000 --> 00:35:43,589
your internals in your internal network

00:35:40,970 --> 00:35:47,040
they're all vulnerable Nagios or a shiny

00:35:43,589 --> 00:35:49,140
port shiny fork each finger we use each

00:35:47,040 --> 00:35:52,380
inga for internal tests plus additional

00:35:49,140 --> 00:35:54,059
tests in Pingdom because just to make

00:35:52,380 --> 00:35:55,410
sure that our routing isn't speed or

00:35:54,059 --> 00:35:58,260
something like that because it's nice

00:35:55,410 --> 00:36:00,450
when your internal monitoring realizes

00:35:58,260 --> 00:36:01,650
there's a problem but if routing is

00:36:00,450 --> 00:36:05,880
broken they can't send you an email

00:36:01,650 --> 00:36:08,250
right so but knowing that your app is

00:36:05,880 --> 00:36:10,579
down is not enough to be a true master

00:36:08,250 --> 00:36:15,480
of your app and captain of your up time

00:36:10,579 --> 00:36:18,180
yet source culture think about it in

00:36:15,480 --> 00:36:20,339
order to be predict problems which is

00:36:18,180 --> 00:36:23,660
much better than solving problems you

00:36:20,339 --> 00:36:28,680
need to know what's going on right now

00:36:23,660 --> 00:36:30,660
so you need metrics and again there's a

00:36:28,680 --> 00:36:32,520
really quick and easy way to get into it

00:36:30,660 --> 00:36:34,349
it's called the brighter metrics you

00:36:32,520 --> 00:36:40,470
sign up you start posting metrics and

00:36:34,349 --> 00:36:42,530
you get really beautiful graphs yeah

00:36:40,470 --> 00:36:45,960
again at some point you will realized

00:36:42,530 --> 00:36:47,670
first it gets pricey when you collect a

00:36:45,960 --> 00:36:52,109
lot of metrics and you should collect a

00:36:47,670 --> 00:36:53,970
lot of metrics secondly sending the

00:36:52,109 --> 00:36:56,910
metrics all over the Internet

00:36:53,970 --> 00:36:58,829
if kind of wasteful so you will probably

00:36:56,910 --> 00:37:00,960
end up with a combination of graphite

00:36:58,829 --> 00:37:03,030
and stats T like the most of us which

00:37:00,960 --> 00:37:06,930
are both a major pain and but to set up

00:37:03,030 --> 00:37:08,330
and I wish Linux would package them

00:37:06,930 --> 00:37:10,760
instead of

00:37:08,330 --> 00:37:14,480
Gengo but it's just crazy me talking

00:37:10,760 --> 00:37:18,470
here so what matrix you to collect all

00:37:14,480 --> 00:37:21,590
of them server load you just online

00:37:18,470 --> 00:37:26,740
request durations males in males out

00:37:21,590 --> 00:37:29,500
whatever in order to be able to make

00:37:26,740 --> 00:37:32,780
informed decisions about the future of

00:37:29,500 --> 00:37:36,290
your development you need to know what

00:37:32,780 --> 00:37:40,370
your app is doing and these tools are

00:37:36,290 --> 00:37:43,130
those who will tell just that so and as

00:37:40,370 --> 00:37:45,440
soon as you know what's going on you can

00:37:43,130 --> 00:37:50,240
return to the fun and games part

00:37:45,440 --> 00:37:52,760
programming so this marks the end of my

00:37:50,240 --> 00:37:55,160
talk I encourage you to follow me on

00:37:52,760 --> 00:37:56,540
Twitter read my blog study the material

00:37:55,160 --> 00:37:58,370
I've collected for you I put a lot of

00:37:56,540 --> 00:38:00,170
effort into it and if you speak German

00:37:58,370 --> 00:38:02,000
please get your domains at very low

00:38:00,170 --> 00:38:05,110
media for their generosity is the only

00:38:02,000 --> 00:38:05,110
reason I'm here thank you

00:38:13,220 --> 00:38:18,780
all right everyone first we wanted to

00:38:16,470 --> 00:38:21,240
let everything hey Nick here for

00:38:18,780 --> 00:38:22,380
anything this is great and we want to

00:38:21,240 --> 00:38:26,040
let everybody know there's gonna be a

00:38:22,380 --> 00:38:28,830
pie lady's auction tonight it's at 6:30

00:38:26,040 --> 00:38:30,000
upstairs in rooms 209 and 210 and they

00:38:28,830 --> 00:38:32,070
have a whole bunch of stuff there

00:38:30,000 --> 00:38:34,590
there's like iPods there's some stuff

00:38:32,070 --> 00:38:36,630
signed by Guido and all kinds of stuff

00:38:34,590 --> 00:38:38,190
and then if you get anybody has any

00:38:36,630 --> 00:38:39,870
questions we've got our microphone set

00:38:38,190 --> 00:38:43,400
up over here in the middle you just walk

00:38:39,870 --> 00:38:43,400
up to it and ask your questions

00:38:58,020 --> 00:39:05,080
yeah how do you feel about talks for a

00:39:02,440 --> 00:39:07,869
building virtual ends again please

00:39:05,080 --> 00:39:10,680
so talks as in huggers tool for

00:39:07,869 --> 00:39:13,270
automatic mob talks talks is awesome

00:39:10,680 --> 00:39:16,150
talks has one problem right now and

00:39:13,270 --> 00:39:20,470
that's that you can't use it inside of

00:39:16,150 --> 00:39:22,090
those awesome guest file systems I told

00:39:20,470 --> 00:39:24,369
you about it doesn't work there because

00:39:22,090 --> 00:39:26,890
it runs set up as dist

00:39:24,369 --> 00:39:28,960
which uses hard links and hard links

00:39:26,890 --> 00:39:30,220
don't work on guest file systems that

00:39:28,960 --> 00:39:32,740
was gonna be my next question does that

00:39:30,220 --> 00:39:35,440
actually work no ok now I've opened a

00:39:32,740 --> 00:39:37,480
back on talks and I've been asked to fix

00:39:35,440 --> 00:39:40,680
it which I maybe at some point will do

00:39:37,480 --> 00:39:40,680
but it doesn't work right now

00:39:41,040 --> 00:39:51,400
how does fpm work with C extensions and

00:39:46,720 --> 00:39:54,520
compiling against your local system SPM

00:39:51,400 --> 00:39:57,640
hasn't to do anything with that you

00:39:54,520 --> 00:40:00,760
build your virtual environment on a

00:39:57,640 --> 00:40:03,250
target platform so the binaries are

00:40:00,760 --> 00:40:05,320
packaged together with it and since it's

00:40:03,250 --> 00:40:06,430
the same platform like your production

00:40:05,320 --> 00:40:08,080
environment it just works

00:40:06,430 --> 00:40:10,420
ok and it's important that you really

00:40:08,080 --> 00:40:13,210
keep the environment same it's not ok to

00:40:10,420 --> 00:40:15,400
use a slightly older ubuntu for it

00:40:13,210 --> 00:40:17,740
slightly newer boom - that will break I

00:40:15,400 --> 00:40:20,440
tried that it breaks so how do you

00:40:17,740 --> 00:40:23,680
manage that just it's all about managing

00:40:20,440 --> 00:40:25,900
you you have a build server so target

00:40:23,680 --> 00:40:27,550
platform that's that's a hard rule for

00:40:25,900 --> 00:40:32,890
that because otherwise you run into

00:40:27,550 --> 00:40:35,609
problems I think my question may be a

00:40:32,890 --> 00:40:37,390
little similar to his we package our

00:40:35,609 --> 00:40:39,540
programs very similar to what he

00:40:37,390 --> 00:40:41,650
presented here but we don't control our

00:40:39,540 --> 00:40:44,710
deployment environment our customer does

00:40:41,650 --> 00:40:46,330
yeah so we installed or we gave them the

00:40:44,710 --> 00:40:48,670
package they installed it and someone

00:40:46,330 --> 00:40:50,320
got the bright idea to run hey you speak

00:40:48,670 --> 00:40:52,570
a little bit louder peace someone got

00:40:50,320 --> 00:40:54,160
the bright idea to run apt-get update on

00:40:52,570 --> 00:40:56,650
that machine after they installed our

00:40:54,160 --> 00:40:58,330
package yeah and the error message that

00:40:56,650 --> 00:41:04,260
they got was basically that imports sis

00:40:58,330 --> 00:41:07,240
was not available and do you have any

00:41:04,260 --> 00:41:09,569
suggestions other than you know telling

00:41:07,240 --> 00:41:12,450
them don't do

00:41:09,569 --> 00:41:14,640
I don't think I can answer that here in

00:41:12,450 --> 00:41:23,400
a minute so maybe catch me later and

00:41:14,640 --> 00:41:25,710
give me more context okay thank you any

00:41:23,400 --> 00:41:28,259
other questions I don't have all right

00:41:25,710 --> 00:41:30,680
Oh nobody let's give him another round

00:41:28,259 --> 00:41:30,680

YouTube URL: https://www.youtube.com/watch?v=voq4Mm58NY0


