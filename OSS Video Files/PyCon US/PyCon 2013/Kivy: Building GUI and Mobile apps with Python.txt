Title: Kivy: Building GUI and Mobile apps with Python
Publication date: 2013-04-29
Playlist: PyCon 2013
Description: 
	Thomas Hansen, Mathieu Virbel
This talk will introduce the Kivy project (http://kivy.org).  Kivy's mission is to make building graphical user interfaces on any device fun, efficient, and pythonic. 

The talk will focus on giving attendees an overvi
Captions: 
	00:00:00,000 --> 00:00:05,009
thanks for coming all guys a lot more

00:00:02,550 --> 00:00:07,710
people expected yeah so I'm talking to

00:00:05,009 --> 00:00:09,210
about TV um and the first thing we do

00:00:07,710 --> 00:00:10,410
we'd like to do is just kind of show you

00:00:09,210 --> 00:00:12,840
a video just sort of give you a little

00:00:10,410 --> 00:00:14,880
bit of context of the kind of things

00:00:12,840 --> 00:00:21,210
we're talking about so you have sort of

00:00:14,880 --> 00:00:24,029
a visual impression of that so the video

00:00:21,210 --> 00:00:26,519
is just playing a couple of videos of

00:00:24,029 --> 00:00:28,710
some installations applications that

00:00:26,519 --> 00:00:31,800
have been built with TV there's a couple

00:00:28,710 --> 00:00:34,680
of our mobile applications shown some of

00:00:31,800 --> 00:00:36,440
us have done museum installations other

00:00:34,680 --> 00:00:39,329
kind of interactive installations

00:00:36,440 --> 00:00:44,940
usually on a large touch screens broken

00:00:39,329 --> 00:00:48,210
some handicapped children connect leap

00:00:44,940 --> 00:00:53,840
motion all kinds of different input

00:00:48,210 --> 00:00:53,840
devices and fun stuff

00:01:02,300 --> 00:01:17,130
[Music]

00:01:14,780 --> 00:01:20,159
so I hope that just sort of gave you

00:01:17,130 --> 00:01:21,240
some some sort of impression of what

00:01:20,159 --> 00:01:25,200
we're talking about when we talk about

00:01:21,240 --> 00:01:29,369
user interfaces um so we found ourselves

00:01:25,200 --> 00:01:31,289
in 2013 at PyCon right um if you think

00:01:29,369 --> 00:01:33,289
about user interfaces and having made

00:01:31,289 --> 00:01:36,270
especially graphical user interfaces

00:01:33,289 --> 00:01:37,740
over the past there's some things that

00:01:36,270 --> 00:01:40,350
have changed you know over the last

00:01:37,740 --> 00:01:43,320
couple of years um all of a sudden we

00:01:40,350 --> 00:01:45,600
have powerful GPUs everything like my

00:01:43,320 --> 00:01:47,280
phone has a GPU in it the raspberry PI's

00:01:45,600 --> 00:01:50,940
that we just picked up have hardware

00:01:47,280 --> 00:01:55,619
accelerated graphics available um and at

00:01:50,940 --> 00:01:57,869
the same time the array of input devices

00:01:55,619 --> 00:02:01,170
or sensors that we are able to hook up

00:01:57,869 --> 00:02:04,349
to computers and process has grown just

00:02:01,170 --> 00:02:05,759
in crazy amounts to just if you think

00:02:04,349 --> 00:02:07,349
about cameras for example what you can

00:02:05,759 --> 00:02:09,750
do with computer vision in terms of

00:02:07,349 --> 00:02:12,360
interpreting um input if you think about

00:02:09,750 --> 00:02:14,790
like connect or leap motions or all

00:02:12,360 --> 00:02:17,220
kinds of other stuff so that brings with

00:02:14,790 --> 00:02:19,349
it though a couple of issues arm which

00:02:17,220 --> 00:02:22,890
sort of are what motivate the work that

00:02:19,349 --> 00:02:24,870
we do um for one when you look at GPUs

00:02:22,890 --> 00:02:26,970
they have a funnily mentally like

00:02:24,870 --> 00:02:29,610
different way of thinking about

00:02:26,970 --> 00:02:32,489
computing then like a regular processor

00:02:29,610 --> 00:02:33,930
right like most of us are probably used

00:02:32,489 --> 00:02:37,500
to more like the sequential programming

00:02:33,930 --> 00:02:39,650
that you know we we learn and on GPUs

00:02:37,500 --> 00:02:42,330
like everything happens in parallel and

00:02:39,650 --> 00:02:45,540
if you jump OpenGL programming before

00:02:42,330 --> 00:02:47,280
like even just a few a couple years ago

00:02:45,540 --> 00:02:49,440
you know the the paradigm was sort of a

00:02:47,280 --> 00:02:51,000
big state machine and you sort of push

00:02:49,440 --> 00:02:54,750
stuff down there it changed some states

00:02:51,000 --> 00:02:56,430
draw stuff that's not how it works today

00:02:54,750 --> 00:02:58,709
anymore if you really want to take full

00:02:56,430 --> 00:03:00,000
power of the GPU that you have and

00:02:58,709 --> 00:03:03,330
especially when you're talking about

00:03:00,000 --> 00:03:06,310
mobile devices it's important that if

00:03:03,330 --> 00:03:09,550
you want the the visual quality and

00:03:06,310 --> 00:03:12,430
so the the richness of it that you make

00:03:09,550 --> 00:03:14,380
best use of it arm that requires for

00:03:12,430 --> 00:03:16,239
example an indirect programming approach

00:03:14,380 --> 00:03:17,530
where nowadays if you talk about a GPU

00:03:16,239 --> 00:03:20,260
you know you have to put all the stuff

00:03:17,530 --> 00:03:22,180
on the GPU to make sure the transfer is

00:03:20,260 --> 00:03:24,069
actually the so slow thing and make sure

00:03:22,180 --> 00:03:25,269
it has all the stuff to work on while

00:03:24,069 --> 00:03:27,099
it's sort of doing its parallel

00:03:25,269 --> 00:03:30,640
processing um

00:03:27,099 --> 00:03:33,130
and with the input devices if you think

00:03:30,640 --> 00:03:36,010
about multi-touch um it's a much higher

00:03:33,130 --> 00:03:37,480
bandwidth input method then like a mouse

00:03:36,010 --> 00:03:40,150
for example right because you have

00:03:37,480 --> 00:03:42,459
multiple points um but it increases

00:03:40,150 --> 00:03:43,900
complexity a lot because all of a sudden

00:03:42,459 --> 00:03:45,850
you don't have a simple state machine

00:03:43,900 --> 00:03:48,030
anymore where at any point you can just

00:03:45,850 --> 00:03:50,470
check well where's my mouse cursor

00:03:48,030 --> 00:03:53,380
because hey you don't know how many

00:03:50,470 --> 00:03:55,060
there is you don't know oh and there's

00:03:53,380 --> 00:03:56,920
context there's information in how long

00:03:55,060 --> 00:04:00,250
has this one been around in relation to

00:03:56,920 --> 00:04:03,640
the other one and so the complexity sort

00:04:00,250 --> 00:04:05,860
of grows very fast there um and then the

00:04:03,640 --> 00:04:08,440
last issue that I think we always try to

00:04:05,860 --> 00:04:12,010
think of is that the composition or

00:04:08,440 --> 00:04:15,310
authoring of user interfaces we feel has

00:04:12,010 --> 00:04:18,579
always been hard um probably still is

00:04:15,310 --> 00:04:19,810
but we'd like that to be a lot easier

00:04:18,579 --> 00:04:23,260
because we all want to make really

00:04:19,810 --> 00:04:24,850
cool-looking working stuff and maybe we

00:04:23,260 --> 00:04:26,680
have sort of the idea of okay I want it

00:04:24,850 --> 00:04:31,090
to work this way and it's like I can see

00:04:26,680 --> 00:04:33,039
how it works but all these tools I have

00:04:31,090 --> 00:04:37,660
they kind of assume it's supposed to

00:04:33,039 --> 00:04:40,780
work this and this in this way um so

00:04:37,660 --> 00:04:43,510
with keavy what we try to do is use the

00:04:40,780 --> 00:04:46,210
full power of the GPU on the platforms

00:04:43,510 --> 00:04:48,400
that we want to use but try to keep

00:04:46,210 --> 00:04:51,910
things in terms of like authoring and

00:04:48,400 --> 00:04:56,889
like rendering simple for the programmer

00:04:51,910 --> 00:05:00,010
who's telling you what to do events are

00:04:56,889 --> 00:05:02,250
a good way to think about user

00:05:00,010 --> 00:05:04,900
interfaces in terms of input handling

00:05:02,250 --> 00:05:07,720
but as with other asynchronous

00:05:04,900 --> 00:05:10,150
programming like it doesn't fit our

00:05:07,720 --> 00:05:11,289
cognitive model of programming right

00:05:10,150 --> 00:05:12,580
because we think we're okay late

00:05:11,289 --> 00:05:14,440
if this happens with this bah bah bah

00:05:12,580 --> 00:05:15,729
bah bah and not like okay callback here

00:05:14,440 --> 00:05:17,180
like now I'm debugging and I'm like

00:05:15,729 --> 00:05:20,389
jumping all over the place

00:05:17,180 --> 00:05:23,780
um and the other thing that inspires us

00:05:20,389 --> 00:05:25,400
to work on Kiva is sort of like Python

00:05:23,780 --> 00:05:28,580
in the first place like we do it in

00:05:25,400 --> 00:05:29,780
Python probably a big part at least we

00:05:28,580 --> 00:05:31,729
started this because we didn't want to

00:05:29,780 --> 00:05:33,590
use another programming language we want

00:05:31,729 --> 00:05:35,930
to do this Python it's like the Zen of

00:05:33,590 --> 00:05:38,600
Python is in there in the Zen of key B

00:05:35,930 --> 00:05:41,780
and I think in a way so for the graphics

00:05:38,600 --> 00:05:43,850
part for keavy like what the the thing

00:05:41,780 --> 00:05:46,910
that key B does for you is everything

00:05:43,850 --> 00:05:50,810
that's rendered is hardware accelerated

00:05:46,910 --> 00:05:54,080
using OpenGL ES um that means you can do

00:05:50,810 --> 00:05:56,539
fancy 3d stuff shaders you can do really

00:05:54,080 --> 00:05:58,880
cool visual effects easily sort of on

00:05:56,539 --> 00:06:03,229
top of whatever you have already you can

00:05:58,880 --> 00:06:05,210
do pixel shaders um to add effects or

00:06:03,229 --> 00:06:07,009
vertex transforms to be like a page curl

00:06:05,210 --> 00:06:07,940
or something like that without actually

00:06:07,009 --> 00:06:12,020
changing anything of what you already

00:06:07,940 --> 00:06:15,440
have um the way we've implemented it is

00:06:12,020 --> 00:06:17,660
that all the calling of the GL

00:06:15,440 --> 00:06:20,289
functionality we've implemented in C and

00:06:17,660 --> 00:06:23,419
scythe on so that we call it from Python

00:06:20,289 --> 00:06:26,330
and then I think it was at UTS when we

00:06:23,419 --> 00:06:28,760
started the keavy project we were there

00:06:26,330 --> 00:06:32,360
a couple of years ago um someone handed

00:06:28,760 --> 00:06:35,210
us this paper that a PhD student in

00:06:32,360 --> 00:06:38,240
France have written about writing a

00:06:35,210 --> 00:06:39,530
just-in-time graphics compiler and it

00:06:38,240 --> 00:06:41,060
sounded really cool and it actually is

00:06:39,530 --> 00:06:43,280
pretty cool so the way that we have it

00:06:41,060 --> 00:06:44,449
set up is we have in sight on sort of

00:06:43,280 --> 00:06:46,639
implemented what we call graphics

00:06:44,449 --> 00:06:49,550
instructions so you sort of you create

00:06:46,639 --> 00:06:51,889
these and the the syntax when you create

00:06:49,550 --> 00:06:53,120
them looks like you're doing sequential

00:06:51,889 --> 00:06:56,449
programming like you're saying set the

00:06:53,120 --> 00:06:58,550
color draw rectangle set the texture

00:06:56,449 --> 00:07:00,289
just like before except we're sort of

00:06:58,550 --> 00:07:01,639
buffering them all and it's plainest but

00:07:00,289 --> 00:07:03,530
then since they're instructions and we

00:07:01,639 --> 00:07:05,240
have conceptual information we actually

00:07:03,530 --> 00:07:06,860
analyze that so we can drop out

00:07:05,240 --> 00:07:08,720
instructions like if you keep setting

00:07:06,860 --> 00:07:12,139
the color we don't need to set it again

00:07:08,720 --> 00:07:13,789
we just flop them out um and just like a

00:07:12,139 --> 00:07:15,020
JIT compiler then you know you have

00:07:13,789 --> 00:07:16,520
blocks and you optimize them and then

00:07:15,020 --> 00:07:18,830
you only need to change it if it changes

00:07:16,520 --> 00:07:20,570
um or if there's a whole bunch of vertex

00:07:18,830 --> 00:07:22,490
instructions like just combine them all

00:07:20,570 --> 00:07:26,029
in one big VBO instead of having 20

00:07:22,490 --> 00:07:27,289
different drawing calls um and it also

00:07:26,029 --> 00:07:29,330
makes supporting easier because we have

00:07:27,289 --> 00:07:29,790
all the opengl stuff sort of implemented

00:07:29,330 --> 00:07:32,220
there

00:07:29,790 --> 00:07:36,060
so as long as we have a platform where

00:07:32,220 --> 00:07:37,260
we can call GL through see all the other

00:07:36,060 --> 00:07:41,670
Python stuff just still works the same

00:07:37,260 --> 00:07:44,880
way for the input arm like from the very

00:07:41,670 --> 00:07:46,320
first point before queue we had another

00:07:44,880 --> 00:07:49,380
framework called PMT that was sort of an

00:07:46,320 --> 00:07:50,880
experimentation arm like the main

00:07:49,380 --> 00:07:55,770
motivation was okay like inputs are

00:07:50,880 --> 00:07:58,790
changing how does the programming API

00:07:55,770 --> 00:08:01,590
design the library design change for

00:07:58,790 --> 00:08:03,240
this new world that's not based on a

00:08:01,590 --> 00:08:04,410
mouse and a keyboard anymore those

00:08:03,240 --> 00:08:06,390
things are really good for some things

00:08:04,410 --> 00:08:07,560
and you can also do them with TV but

00:08:06,390 --> 00:08:12,390
there's all this other stuff that we

00:08:07,560 --> 00:08:16,110
want to be able to do to UM so sort of

00:08:12,390 --> 00:08:17,490
over the years we've sort of put that in

00:08:16,110 --> 00:08:20,760
place and I think we have conceptual

00:08:17,490 --> 00:08:22,530
sort of tools like um it approaches to

00:08:20,760 --> 00:08:24,060
the way that the input event data is

00:08:22,530 --> 00:08:26,610
coming in and it is interpreted that

00:08:24,060 --> 00:08:28,260
makes that stuff easier so for example

00:08:26,610 --> 00:08:30,930
on touch events that are coming in um

00:08:28,260 --> 00:08:33,720
you can attach data to the actual touch

00:08:30,930 --> 00:08:37,020
so like later if that touch is like you

00:08:33,720 --> 00:08:39,870
know being dispatched and some other

00:08:37,020 --> 00:08:41,490
widget gets the event or you get it

00:08:39,870 --> 00:08:43,440
somewhere else you can look at that data

00:08:41,490 --> 00:08:44,940
before so you can sort of keep track of

00:08:43,440 --> 00:08:45,900
the context of what happened to this

00:08:44,940 --> 00:08:51,720
touch over time

00:08:45,900 --> 00:08:54,030
um and then it's also this guys just

00:08:51,720 --> 00:08:56,370
like it crazy I don't know how it does

00:08:54,030 --> 00:08:58,550
it but like it's really nicely designed

00:08:56,370 --> 00:09:01,380
in terms of architecture in my mind um

00:08:58,550 --> 00:09:02,940
like I've learned a lot like for the

00:09:01,380 --> 00:09:06,270
inputs for example we have this

00:09:02,940 --> 00:09:08,280
provider-based um design where for each

00:09:06,270 --> 00:09:11,130
kind of input there's like an abstract

00:09:08,280 --> 00:09:13,260
provider so when we get a new device all

00:09:11,130 --> 00:09:15,780
we have to do is like find some way to

00:09:13,260 --> 00:09:18,030
like get to that data somehow if it's be

00:09:15,780 --> 00:09:19,260
a syphon or C or Python and then like

00:09:18,030 --> 00:09:21,600
you know push it into the event queue

00:09:19,260 --> 00:09:23,970
and then it's you get you can read the

00:09:21,600 --> 00:09:25,800
data in abstract way still and it works

00:09:23,970 --> 00:09:27,560
with the application already but you

00:09:25,800 --> 00:09:31,860
also have access to like the the new

00:09:27,560 --> 00:09:33,930
information with it um and the same

00:09:31,860 --> 00:09:36,330
thing is actually done for the way that

00:09:33,930 --> 00:09:39,960
we do arm any other other like sort of

00:09:36,330 --> 00:09:42,670
core system interfaces like for images

00:09:39,960 --> 00:09:46,990
font rendering window providers

00:09:42,670 --> 00:09:48,730
um video data audio camera all that kind

00:09:46,990 --> 00:09:50,350
of stuff where we have an abstract one

00:09:48,730 --> 00:09:52,510
and then if you want a new image format

00:09:50,350 --> 00:09:54,970
we just need to read it into a buffer

00:09:52,510 --> 00:09:57,790
like if you can somehow get it into

00:09:54,970 --> 00:09:59,320
OpenGL you're done and you can use like

00:09:57,790 --> 00:10:00,820
all the other key v-- infrastructure

00:09:59,320 --> 00:10:04,480
that's there to work with images with it

00:10:00,820 --> 00:10:06,130
already um and it also sort of Liao's us

00:10:04,480 --> 00:10:07,810
to swap out dependencies like there's

00:10:06,130 --> 00:10:09,580
one thing like we can't get to work on

00:10:07,810 --> 00:10:11,020
iOS well maybe we can find something

00:10:09,580 --> 00:10:14,110
else that does the same thing and we

00:10:11,020 --> 00:10:15,550
just kind of then have to plug it in so

00:10:14,110 --> 00:10:19,150
it makes sort of the porting to the

00:10:15,550 --> 00:10:20,500
different platforms a lot easier um and

00:10:19,150 --> 00:10:22,000
then like I said like there's sort of

00:10:20,500 --> 00:10:24,780
the Zen of Python right like we've all

00:10:22,000 --> 00:10:27,100
done import this I think it is right um

00:10:24,780 --> 00:10:28,810
the one other thing that I said in the

00:10:27,100 --> 00:10:33,340
beginning that sort of bothers us is

00:10:28,810 --> 00:10:36,730
like it seems like it's too hard or

00:10:33,340 --> 00:10:39,340
harder than it should be to author and

00:10:36,730 --> 00:10:40,960
compose user interfaces like you think

00:10:39,340 --> 00:10:42,460
of them as pretty simple things like

00:10:40,960 --> 00:10:43,900
sort of what you see right you want this

00:10:42,460 --> 00:10:44,560
here this here when you do this you want

00:10:43,900 --> 00:10:47,620
that to happen

00:10:44,560 --> 00:10:49,180
um but you always end up like all this

00:10:47,620 --> 00:10:50,920
code to do it like hooking up event

00:10:49,180 --> 00:10:52,510
handlers and event hello here if phone

00:10:50,920 --> 00:10:56,680
here all these different kinds of

00:10:52,510 --> 00:10:59,440
objects um so what we did is we said

00:10:56,680 --> 00:11:02,800
okay well we're say we think it's it

00:10:59,440 --> 00:11:04,090
should be easier but like how like in

00:11:02,800 --> 00:11:06,750
what way like if we could just have

00:11:04,090 --> 00:11:10,870
anything how would we want to do it um

00:11:06,750 --> 00:11:12,220
so being Python lovers you know we

00:11:10,870 --> 00:11:13,480
started just like typing and like

00:11:12,220 --> 00:11:16,030
indenting stuff all the time

00:11:13,480 --> 00:11:17,790
um so we came up sort of what ended up

00:11:16,030 --> 00:11:22,600
as a sort of domain-specific language

00:11:17,790 --> 00:11:24,550
for arm the composition of widgets or

00:11:22,600 --> 00:11:26,470
whole UIs or like how they inlaid we

00:11:24,550 --> 00:11:29,130
call it the Cavey language as

00:11:26,470 --> 00:11:31,510
indentation basis so it's declarative um

00:11:29,130 --> 00:11:32,910
it keeps things concise instead of

00:11:31,510 --> 00:11:36,690
having to like remember a whole bunch of

00:11:32,910 --> 00:11:38,560
method names and things like that and um

00:11:36,690 --> 00:11:41,230
one of the things that does is sort of

00:11:38,560 --> 00:11:45,220
Auto binding of properties so if I have

00:11:41,230 --> 00:11:48,850
a label that has like a text property if

00:11:45,220 --> 00:11:51,010
I say okay this label like text : like

00:11:48,850 --> 00:11:53,350
slider value and I have a slider

00:11:51,010 --> 00:11:55,090
somewhere like it'll just always be the

00:11:53,350 --> 00:11:55,920
value of that slider slider value

00:11:55,090 --> 00:11:59,130
changes that

00:11:55,920 --> 00:12:00,899
value labor also changes um it's I think

00:11:59,130 --> 00:12:05,070
QT does something kind of similar in

00:12:00,899 --> 00:12:06,420
like qml now um and it also it works

00:12:05,070 --> 00:12:08,730
really well with graphic construction

00:12:06,420 --> 00:12:11,070
because we put the sort of like how does

00:12:08,730 --> 00:12:12,720
this widget get rendered into this

00:12:11,070 --> 00:12:14,550
domain-specific language in terms of the

00:12:12,720 --> 00:12:16,230
graphics instructions and we can then

00:12:14,550 --> 00:12:18,570
hook up directly the properties of the

00:12:16,230 --> 00:12:19,320
widget to the rendering instruction so

00:12:18,570 --> 00:12:21,720
let's say you were you're rendering

00:12:19,320 --> 00:12:23,660
rectangle or a circle and you set the

00:12:21,720 --> 00:12:26,070
size of it to the size of the widget and

00:12:23,660 --> 00:12:28,019
the color to something else now if the

00:12:26,070 --> 00:12:29,430
size of the widget changes you're

00:12:28,019 --> 00:12:30,990
randomly instructions change the same

00:12:29,430 --> 00:12:33,930
way so you don't have to render all the

00:12:30,990 --> 00:12:36,839
time and change your your rendering

00:12:33,930 --> 00:12:39,240
methods um or keep track of that it just

00:12:36,839 --> 00:12:40,980
sort of like that rectangle wise be that

00:12:39,240 --> 00:12:43,170
size and it sort of keeps track or it

00:12:40,980 --> 00:12:44,579
does it for you in terms of changing the

00:12:43,170 --> 00:12:52,170
the vertices that it's pushing to the

00:12:44,579 --> 00:12:53,399
GPU um and the other thing that sort of

00:12:52,170 --> 00:12:55,560
like in the Python world we want

00:12:53,399 --> 00:12:57,329
batteries included and I think we have

00:12:55,560 --> 00:12:59,910
that in key V in that we've sort of

00:12:57,329 --> 00:13:02,040
built pretty extensive widget collection

00:12:59,910 --> 00:13:05,459
of like standard stuff that you'd use

00:13:02,040 --> 00:13:07,350
arm and stuff that works with different

00:13:05,459 --> 00:13:10,290
stuff like their labels button sliders

00:13:07,350 --> 00:13:14,579
different kinds of layouts transitions

00:13:10,290 --> 00:13:16,110
between screens managing screens some

00:13:14,579 --> 00:13:18,779
more like specific interactions like for

00:13:16,110 --> 00:13:20,910
multi-touch one of the canonical demos

00:13:18,779 --> 00:13:23,519
is always like this you know zoom and

00:13:20,910 --> 00:13:25,589
rotate or panning like an image or a map

00:13:23,519 --> 00:13:26,910
so we have that implemented in a widget

00:13:25,589 --> 00:13:30,779
that you can just sort of put other

00:13:26,910 --> 00:13:35,399
stuff interests or works and all of them

00:13:30,779 --> 00:13:37,589
sort of support this wider variety of

00:13:35,399 --> 00:13:41,519
input modalities instead of just a mouse

00:13:37,589 --> 00:13:44,430
like before for example in a toolkit

00:13:41,519 --> 00:13:46,319
that is sort of that has maybe technical

00:13:44,430 --> 00:13:48,300
depth to a time where it's more like

00:13:46,319 --> 00:13:50,130
just keyboard and mouse like all their

00:13:48,300 --> 00:13:53,069
widgets are you know assuming there's a

00:13:50,130 --> 00:13:54,449
keyboard and a mouse and that's it um so

00:13:53,069 --> 00:13:56,250
you might have something that looks and

00:13:54,449 --> 00:13:57,510
kind of act like what you want except it

00:13:56,250 --> 00:14:00,329
just works with Mouse and what the other

00:13:57,510 --> 00:14:02,819
stuff so that's not here because we've

00:14:00,329 --> 00:14:04,240
sort of started a little fresher just

00:14:02,819 --> 00:14:09,790
want to give you a quick

00:14:04,240 --> 00:14:13,180
a demo of that this is just one of the

00:14:09,790 --> 00:14:15,430
examples we have arm in the repository

00:14:13,180 --> 00:14:17,080
so this over here is actually Cavey

00:14:15,430 --> 00:14:19,180
language so here actually with all we

00:14:17,080 --> 00:14:20,860
have is like one thing like an rst

00:14:19,180 --> 00:14:23,380
document widget and then we set the text

00:14:20,860 --> 00:14:27,360
property to like something really long

00:14:23,380 --> 00:14:33,300
right like if I just french key word I

00:14:27,360 --> 00:14:33,300
just do this then all I have is that arm

00:14:33,540 --> 00:14:38,790
there's different kinds of layouts you

00:14:35,649 --> 00:14:42,010
can you know to arrange your things um

00:14:38,790 --> 00:14:44,649
where they can sort of so there's here's

00:14:42,010 --> 00:14:46,870
a float layout and there's three buttons

00:14:44,649 --> 00:14:50,520
inside of it you can see the labels on

00:14:46,870 --> 00:14:55,149
the text the set and then the position

00:14:50,520 --> 00:15:00,399
and like a size and like this one says

00:14:55,149 --> 00:15:02,890
like I want to be like point or sixty

00:15:00,399 --> 00:15:05,170
percent of like the thing I'm inside um

00:15:02,890 --> 00:15:08,140
all item type because I can type at the

00:15:05,170 --> 00:15:09,250
same time um but then just show some of

00:15:08,140 --> 00:15:11,020
the other ones like there's grid layouts

00:15:09,250 --> 00:15:13,930
where they automatically arrange

00:15:11,020 --> 00:15:14,980
themselves and grids um so we change

00:15:13,930 --> 00:15:17,829
like the number of columns you're

00:15:14,980 --> 00:15:22,770
limiting it to then it ranges that way

00:15:17,829 --> 00:15:25,000
I don't maybe try the progress bar one

00:15:22,770 --> 00:15:27,100
so this shows sort of the the

00:15:25,000 --> 00:15:28,570
auto-binding that I was talking about so

00:15:27,100 --> 00:15:31,420
what we have is so it says on the top

00:15:28,570 --> 00:15:35,050
box layout orientation vertical padding

00:15:31,420 --> 00:15:36,040
50 so there's a layout that things get

00:15:35,050 --> 00:15:37,720
put in after each other

00:15:36,040 --> 00:15:40,930
it's vertically arranged they go from

00:15:37,720 --> 00:15:43,000
top to bottom um and there's padding on

00:15:40,930 --> 00:15:47,500
the side so that they don't go all the

00:15:43,000 --> 00:15:49,029
way to the other widgets um what you

00:15:47,500 --> 00:15:51,670
just do know there's only okay and he's

00:15:49,029 --> 00:15:53,050
rearranging stuff here but so then

00:15:51,670 --> 00:15:54,640
there's a progress bar in two sliders

00:15:53,050 --> 00:15:56,860
right and on the second on the slider

00:15:54,640 --> 00:16:00,070
the the thing in the middle you can see

00:15:56,860 --> 00:16:02,730
it says on value bar value equal to self

00:16:00,070 --> 00:16:05,170
value and bar is the progress bar on top

00:16:02,730 --> 00:16:09,399
so when the value changes on the slider

00:16:05,170 --> 00:16:10,690
the this actually sets the value over so

00:16:09,399 --> 00:16:13,120
this would be sort of like an event

00:16:10,690 --> 00:16:14,980
handler in a way right like we do that

00:16:13,120 --> 00:16:17,960
with the on stuff if something changes

00:16:14,980 --> 00:16:19,730
I'm an end just Python code in line

00:16:17,960 --> 00:16:22,089
like wherever you can set a property

00:16:19,730 --> 00:16:24,320
value just put Python code in line um

00:16:22,089 --> 00:16:26,570
another way of doing that would be

00:16:24,320 --> 00:16:29,770
instead of like if you had on value like

00:16:26,570 --> 00:16:32,029
if you take that out here um

00:16:29,770 --> 00:16:33,860
so instead of sort of defining an inline

00:16:32,029 --> 00:16:37,310
function you can actually tell the

00:16:33,860 --> 00:16:39,260
progress bar that the value of it should

00:16:37,310 --> 00:16:41,480
be the slider dot value like the value

00:16:39,260 --> 00:16:42,890
of the slider and you actually get the

00:16:41,480 --> 00:16:44,750
same effect like if you're just mapping

00:16:42,890 --> 00:16:47,380
properties directly like that they

00:16:44,750 --> 00:16:49,700
always stay in sync and so and this this

00:16:47,380 --> 00:16:51,920
iterates down right like the last one

00:16:49,700 --> 00:16:54,140
updates the the slider on the bottom

00:16:51,920 --> 00:16:56,510
updates the slider in the middle and

00:16:54,140 --> 00:16:58,550
because it gets changed the progress bar

00:16:56,510 --> 00:17:01,760
gets changed into right you can move the

00:16:58,550 --> 00:17:02,990
one on the bottom now like it just moves

00:17:01,760 --> 00:17:07,179
the one in the middle but the other one

00:17:02,990 --> 00:17:10,100
is still lengths so it keeps changing um

00:17:07,179 --> 00:17:11,270
ya know there's lots of other stuff I

00:17:10,100 --> 00:17:15,860
don't think we have too much time to go

00:17:11,270 --> 00:17:17,630
through all the different demos on but

00:17:15,860 --> 00:17:21,260
you guys have more time we'll be around

00:17:17,630 --> 00:17:22,370
later too but so sort of the the promise

00:17:21,260 --> 00:17:24,140
that you get out of it is sort of like

00:17:22,370 --> 00:17:25,760
this develop ones like run anywhere

00:17:24,140 --> 00:17:27,559
right like it's always like the holy

00:17:25,760 --> 00:17:29,540
grail I'm not sure it's we don't

00:17:27,559 --> 00:17:31,550
completely deliver on that but it runs

00:17:29,540 --> 00:17:35,240
really well on Linux OS X and Windows in

00:17:31,550 --> 00:17:38,090
terms of desktops um it runs on Android

00:17:35,240 --> 00:17:40,070
and iOS we have apps on the market for

00:17:38,090 --> 00:17:43,250
both of them someone just need to work

00:17:40,070 --> 00:17:44,390
on the ego um a little bit work to try

00:17:43,250 --> 00:17:46,250
to get it to work on the Raspberry Pi I

00:17:44,390 --> 00:17:51,020
think metric is really excited now that

00:17:46,250 --> 00:17:52,550
we just got some free ones um but the

00:17:51,020 --> 00:17:55,040
great thing like to me like when I work

00:17:52,550 --> 00:17:57,290
with it like for like the work we do in

00:17:55,040 --> 00:17:59,270
our consulting agency like I just get to

00:17:57,290 --> 00:18:01,010
work on my laptop or my desktop and I

00:17:59,270 --> 00:18:02,600
have you know my window and I just size

00:18:01,010 --> 00:18:04,700
it to whatever the devices that I'm

00:18:02,600 --> 00:18:06,020
expecting it to run on and I I run it

00:18:04,700 --> 00:18:07,550
there I get to use my normal sort of

00:18:06,020 --> 00:18:09,500
Python development flow like I write

00:18:07,550 --> 00:18:15,380
something I sort of try it out like

00:18:09,500 --> 00:18:16,850
tests or nights UI is hard to do get

00:18:15,380 --> 00:18:18,559
complete test coverage at least right

00:18:16,850 --> 00:18:21,440
because part of it is sort of just how

00:18:18,559 --> 00:18:23,330
that how does it feel like well maybe I

00:18:21,440 --> 00:18:25,130
want it over here instead or I want this

00:18:23,330 --> 00:18:26,630
a little bigger and stuff so you end up

00:18:25,130 --> 00:18:27,630
sort of running it and testing it a lot

00:18:26,630 --> 00:18:31,410
um

00:18:27,630 --> 00:18:34,230
to get to do it so I'm gonna hand it off

00:18:31,410 --> 00:18:36,390
to metru who's going to talk a little

00:18:34,230 --> 00:18:37,680
bit about key B as an organization and

00:18:36,390 --> 00:18:39,660
some of the other projects that are sort

00:18:37,680 --> 00:18:48,570
of springing out of TV and where all

00:18:39,660 --> 00:18:53,250
that is going okay is it working

00:18:48,570 --> 00:18:56,070
okay so hi everyone Donna show us the

00:18:53,250 --> 00:19:00,030
Kiwi framework so only is a gue power

00:18:56,070 --> 00:19:01,710
but it's more than that I mean if you

00:19:00,030 --> 00:19:05,220
want to run your Python code on your

00:19:01,710 --> 00:19:07,830
mobile you need a lot of other tools so

00:19:05,220 --> 00:19:10,760
we create an organization around TV

00:19:07,830 --> 00:19:15,630
right now we have seven core developers

00:19:10,760 --> 00:19:19,440
we run around 13 public project that

00:19:15,630 --> 00:19:22,350
covers almost everything you can do with

00:19:19,440 --> 00:19:25,230
give it force model you can get super

00:19:22,350 --> 00:19:27,810
from two mailing lists one for the user

00:19:25,230 --> 00:19:29,370
if you have any question a general

00:19:27,810 --> 00:19:31,560
question but if you want to contribute

00:19:29,370 --> 00:19:34,080
to Kiva we have another melanie's give

00:19:31,560 --> 00:19:37,290
Adele and if you are not comfortable to

00:19:34,080 --> 00:19:41,490
wrote on Melanie's we are available

00:19:37,290 --> 00:19:45,870
available like every day on the IRC

00:19:41,490 --> 00:19:49,580
channels so a little bit of history

00:19:45,870 --> 00:19:52,620
Belfast is we Thomas started in a

00:19:49,580 --> 00:19:56,190
University of Iowa to do some research

00:19:52,620 --> 00:19:58,170
about a natural user interface and he

00:19:56,190 --> 00:20:01,680
created by Mt

00:19:58,170 --> 00:20:03,720
so maybe some of us know about it it was

00:20:01,680 --> 00:20:06,750
mainly focuses for natural user

00:20:03,720 --> 00:20:09,210
interface and basically he wanted to do

00:20:06,750 --> 00:20:12,540
something with Python but you have only

00:20:09,210 --> 00:20:15,960
some ID he wanted to vote so it but it's

00:20:12,540 --> 00:20:18,990
on a PMT time t look like big place for

00:20:15,960 --> 00:20:20,850
experimentation so if we want to build

00:20:18,990 --> 00:20:23,070
commercial application or giving

00:20:20,850 --> 00:20:25,800
something to the user that is stable and

00:20:23,070 --> 00:20:29,190
well done PI and he wasn't really done

00:20:25,800 --> 00:20:32,100
for that and also we have a big issue is

00:20:29,190 --> 00:20:35,970
also graphic pal was using direct GL

00:20:32,100 --> 00:20:39,150
instruction and that's a way of doing us

00:20:35,970 --> 00:20:40,230
a thing was not compatible with GL ES 2

00:20:39,150 --> 00:20:44,580
so we can

00:20:40,230 --> 00:20:48,240
run IMG on mobile device so we redesign

00:20:44,580 --> 00:20:52,710
all the graphic bar and the API we clean

00:20:48,240 --> 00:20:57,090
everything and Kiwi was born in the u.s.

00:20:52,710 --> 00:21:00,900
in 2010 so as I say we rename API we

00:20:57,090 --> 00:21:05,630
build new graphics and during 2011 we

00:21:00,900 --> 00:21:05,630
add the support for Android and iOS

00:21:06,320 --> 00:21:14,040
so for building so you can actually

00:21:11,130 --> 00:21:15,840
today wrote your Python application run

00:21:14,040 --> 00:21:19,080
it on desktop but if you want to run

00:21:15,840 --> 00:21:21,500
Python on Android and iOS means you need

00:21:19,080 --> 00:21:24,630
to have the Python interpreter on it

00:21:21,500 --> 00:21:27,059
it's not the same architecture so you

00:21:24,630 --> 00:21:31,760
need to cross compile compass by phone

00:21:27,059 --> 00:21:35,669
and also all the sub library like SD l

00:21:31,760 --> 00:21:37,440
LX ml SQLite etc and it's kind of

00:21:35,669 --> 00:21:40,470
complex if you want to do it yourself so

00:21:37,440 --> 00:21:44,370
recruit it to project the first one is

00:21:40,470 --> 00:21:46,169
Python for Android it's allow you to

00:21:44,370 --> 00:21:50,130
cross compile Python and many other

00:21:46,169 --> 00:21:52,679
library first and then we have another

00:21:50,130 --> 00:21:55,830
tool within Python foundry that allows

00:21:52,679 --> 00:21:58,110
you to check your code application check

00:21:55,830 --> 00:22:01,559
the library you just compile and create

00:21:58,110 --> 00:22:06,270
an epic a that sees this is a package

00:22:01,559 --> 00:22:08,580
name for Android so bb1 there is two

00:22:06,270 --> 00:22:11,390
python for android project if you search

00:22:08,580 --> 00:22:14,820
on google you will have two results our

00:22:11,390 --> 00:22:19,799
Python for Android is located at github

00:22:14,820 --> 00:22:20,640
/kv the other one is commonly named it's

00:22:19,799 --> 00:22:27,330
p4a

00:22:20,640 --> 00:22:29,730
right okay and there is another tool

00:22:27,330 --> 00:22:33,750
chain we provide for iOS so it's key be

00:22:29,730 --> 00:22:36,570
iOS but it's not design it as the same

00:22:33,750 --> 00:22:39,049
as Python 400 so it's not modular you

00:22:36,570 --> 00:22:43,110
cannot really add the liberal you want

00:22:39,049 --> 00:22:45,299
we need to redesign this project and why

00:22:43,110 --> 00:22:48,380
we don't match both of them is because

00:22:45,299 --> 00:22:51,510
on Android we are loading the library

00:22:48,380 --> 00:22:53,050
dynamically but on iOS it's forbidden so

00:22:51,510 --> 00:22:58,300
what we do on kill

00:22:53,050 --> 00:23:02,410
iOS is each library by phone SDL SQLite

00:22:58,300 --> 00:23:05,530
TV is compiled as a static library and

00:23:02,410 --> 00:23:08,640
then we merge everything into one binary

00:23:05,530 --> 00:23:12,970
executable that runs on the iPad and

00:23:08,640 --> 00:23:15,610
executes your application so because

00:23:12,970 --> 00:23:18,310
it's it can be hard to understand

00:23:15,610 --> 00:23:20,710
everything we started a new project so

00:23:18,310 --> 00:23:23,620
it's a still a work in progress

00:23:20,710 --> 00:23:28,810
it's called builder it's like one tool

00:23:23,620 --> 00:23:31,240
to room that them all the idea is you

00:23:28,810 --> 00:23:35,020
have one specification files called

00:23:31,240 --> 00:23:38,470
builders all that's back and with one

00:23:35,020 --> 00:23:40,810
line of code online you will

00:23:38,470 --> 00:23:43,060
automatically compile your application

00:23:40,810 --> 00:23:45,220
and style everything you need like for

00:23:43,060 --> 00:23:49,180
Android you need to download the SDK and

00:23:45,220 --> 00:23:51,910
DC NDK prepare all your computer to be

00:23:49,180 --> 00:23:53,980
able to do a Android application can be

00:23:51,910 --> 00:23:54,760
out for newbie builders I will do

00:23:53,980 --> 00:23:58,510
everything for you

00:23:54,760 --> 00:24:01,360
it will compile and style create the apk

00:23:58,510 --> 00:24:03,100
deploy on your device run it on the

00:24:01,360 --> 00:24:05,740
device and you have even the possibility

00:24:03,100 --> 00:24:08,980
to delegate have the log on your device

00:24:05,740 --> 00:24:13,000
and it works also on the iPad without

00:24:08,980 --> 00:24:17,350
Xcode only the same phone online so it's

00:24:13,000 --> 00:24:22,140
either complexity of packaging for an

00:24:17,350 --> 00:24:25,600
example this is a spec files so you'd

00:24:22,140 --> 00:24:29,050
the titles package name where the source

00:24:25,600 --> 00:24:32,260
of your application is the version so

00:24:29,050 --> 00:24:35,590
requirement the icon as a press flash

00:24:32,260 --> 00:24:38,320
that is common for Android iOS and Evan

00:24:35,590 --> 00:24:41,140
on desktop I mean if you do oh if you

00:24:38,320 --> 00:24:44,680
package two windows you want the same

00:24:41,140 --> 00:24:47,980
things so this is why we did build order

00:24:44,680 --> 00:24:50,500
and also we have some tags for specific

00:24:47,980 --> 00:24:52,780
thing a specific platform types like

00:24:50,500 --> 00:24:54,940
Android that permission doesn't exist on

00:24:52,780 --> 00:24:58,930
iOS and on iOS if you want to sign you

00:24:54,940 --> 00:25:03,610
need the name of your key in the kitchen

00:24:58,930 --> 00:25:06,320
so you can specify everything in here ok

00:25:03,610 --> 00:25:08,750
so just

00:25:06,320 --> 00:25:13,159
- you have keavy if you want to do your

00:25:08,750 --> 00:25:15,799
application your yes graphic application

00:25:13,159 --> 00:25:18,950
then we provide to chain to be able to

00:25:15,799 --> 00:25:22,179
run Python on on mobile but we're

00:25:18,950 --> 00:25:26,720
missing warning is how can you access -

00:25:22,179 --> 00:25:30,470
oh can I access to my GPS to my SMS my

00:25:26,720 --> 00:25:35,120
contact my accelerometer and we are in

00:25:30,470 --> 00:25:38,330
Python but on Android all the API for

00:25:35,120 --> 00:25:40,669
the mobile is in Java on iOS all the API

00:25:38,330 --> 00:25:46,610
is in objective-c we are in Python how

00:25:40,669 --> 00:25:50,029
can we do it so on other toolkits they

00:25:46,610 --> 00:25:52,220
do an abstraction for that but right now

00:25:50,029 --> 00:25:55,279
we don't do anything for that we think

00:25:52,220 --> 00:25:58,309
more about the generic way to to

00:25:55,279 --> 00:26:00,830
approach this problem so we created two

00:25:58,309 --> 00:26:03,889
other projects the first one is by

00:26:00,830 --> 00:26:07,100
genius this is a library you can just

00:26:03,889 --> 00:26:07,750
import and access to any java class from

00:26:07,100 --> 00:26:10,639
python

00:26:07,750 --> 00:26:13,429
so you wrote python and you can access

00:26:10,639 --> 00:26:14,659
to java api and we started to do the

00:26:13,429 --> 00:26:19,460
same for objective-c

00:26:14,659 --> 00:26:22,879
scroll P of GLS there is an example like

00:26:19,460 --> 00:26:26,750
I want to say something from my phone so

00:26:22,879 --> 00:26:28,789
I am pro genius I in Auto class and I

00:26:26,750 --> 00:26:32,269
say it's like importing the definition

00:26:28,789 --> 00:26:35,149
of a Java class into Python and then I'm

00:26:32,269 --> 00:26:35,860
just using it like it's very easy to

00:26:35,149 --> 00:26:41,509
understand

00:26:35,860 --> 00:26:45,190
ok and on ok another example is if I

00:26:41,509 --> 00:26:50,539
want to access to the GPS on of my phone

00:26:45,190 --> 00:26:53,600
the Android API in haganai they require

00:26:50,539 --> 00:26:58,279
you to create a java class that

00:26:53,600 --> 00:27:00,169
implements one method so we design it we

00:26:58,279 --> 00:27:03,320
started another work is to be able to

00:27:00,169 --> 00:27:07,190
implement Java class from Python and it

00:27:03,320 --> 00:27:09,919
looks like that so you create a GPS

00:27:07,190 --> 00:27:14,000
system and you say this Python class

00:27:09,919 --> 00:27:16,460
will mimic the interface of the location

00:27:14,000 --> 00:27:19,100
listener in Android and then you

00:27:16,460 --> 00:27:19,850
implement one method called on location

00:27:19,100 --> 00:27:24,289
change

00:27:19,850 --> 00:27:25,760
and you got it so from now it's so it's

00:27:24,289 --> 00:27:28,850
not really working right now I'm

00:27:25,760 --> 00:27:30,620
stealing the last part but in the next

00:27:28,850 --> 00:27:35,059
week we will be able to release

00:27:30,620 --> 00:27:38,530
everything okay - Martha we want to we

00:27:35,059 --> 00:27:41,809
got funded by PSF last year so we got

00:27:38,530 --> 00:27:45,620
$5,000 to be able to put TV and also

00:27:41,809 --> 00:27:48,679
project we showed to Python 3 it's still

00:27:45,620 --> 00:27:52,120
in process but we want to thank you PSF

00:27:48,679 --> 00:27:55,880
for that because it's a big relief and

00:27:52,120 --> 00:27:59,770
last week I started funding for running

00:27:55,880 --> 00:28:02,720
TV on Raspberry Pi and I just asked for

00:27:59,770 --> 00:28:04,730
$600 we got funded in Friday it was

00:28:02,720 --> 00:28:06,860
really amazing so for everyone who

00:28:04,730 --> 00:28:10,580
support us I would like to personally

00:28:06,860 --> 00:28:14,510
say thank you and the next step is to

00:28:10,580 --> 00:28:18,010
get $1,000 for using the work we do for

00:28:14,510 --> 00:28:22,520
Raspberry Pi to improve the windows a

00:28:18,010 --> 00:28:25,960
platform that's all okay so thank you

00:28:22,520 --> 00:28:25,960
everyone and I hope you enjoyed

00:28:29,700 --> 00:28:32,700

YouTube URL: https://www.youtube.com/watch?v=yPWj6k5MRak


