Title: DevOps for Python: Doing More With Less
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Noah Kantrowitz
The world of infrastructure as code is becoming far more pervasive and many Python developers are trying to find a way to get started. This class will get you up and running with Chef and Fabric to manage your systems be they in the c
Captions: 
	00:00:00,539 --> 00:00:04,020
it's about that time well a little bit

00:00:02,820 --> 00:00:06,290
past that time cool

00:00:04,020 --> 00:00:08,220
hi everyone hear me can I row and see

00:00:06,290 --> 00:00:12,179
everyone over there you can see the

00:00:08,220 --> 00:00:13,139
screen well have to kind of either stand

00:00:12,179 --> 00:00:14,429
off to the stage or I'll probably

00:00:13,139 --> 00:00:19,320
wandered around a bit

00:00:14,429 --> 00:00:21,180
but welcome to DevOps for Python so just

00:00:19,320 --> 00:00:22,590
quickly Who am I I'm no can turrets I

00:00:21,180 --> 00:00:24,689
work for ops code which is the company

00:00:22,590 --> 00:00:28,439
behind chef I'm also a long term fabric

00:00:24,689 --> 00:00:32,250
user that's you know how to find me

00:00:28,439 --> 00:00:34,640
email Twitter web the first step for

00:00:32,250 --> 00:00:37,469
this tutorial is connect to the wireless

00:00:34,640 --> 00:00:40,440
open a web browser and go to this URL

00:00:37,469 --> 00:00:42,719
you'll find a web page that is prompting

00:00:40,440 --> 00:00:43,980
you for your badge number if you go

00:00:42,719 --> 00:00:45,629
ahead and type your badge number to that

00:00:43,980 --> 00:00:47,399
it will spit you out a zip file that

00:00:45,629 --> 00:00:50,789
you'll use as the basis for the rest of

00:00:47,399 --> 00:00:53,280
this tutorial so that is the first step

00:00:50,789 --> 00:00:56,820
I need everyone to do is to go and

00:00:53,280 --> 00:00:58,890
download the classes at file if anyone

00:00:56,820 --> 00:01:00,629
has any problems with this please flag

00:00:58,890 --> 00:01:02,430
me down I also forgot to introduce our

00:01:00,629 --> 00:01:04,110
valiant TAS Ron rife Snyder and Bill

00:01:02,430 --> 00:01:07,140
Tucker over there in the corner

00:01:04,110 --> 00:01:08,880
so any questions throughout all of this

00:01:07,140 --> 00:01:10,710
just either flag me down flag one of

00:01:08,880 --> 00:01:12,979
them down and and we'll get you sorted

00:01:10,710 --> 00:01:12,979
out

00:01:21,300 --> 00:01:26,230
so for you just just driving I just need

00:01:24,550 --> 00:01:28,330
you to go to this web page and put in

00:01:26,230 --> 00:01:35,620
your badge number and it will set up a

00:01:28,330 --> 00:01:37,060
sip file for you I do not store those

00:01:35,620 --> 00:01:38,020
there just immediately written into a

00:01:37,060 --> 00:01:39,790
config file

00:01:38,020 --> 00:01:41,650
if you're that paranoid then don't do it

00:01:39,790 --> 00:01:53,230
and just edit the config file yourself

00:01:41,650 --> 00:01:55,510
I don't want your ec2 information if you

00:01:53,230 --> 00:01:58,180
do not have an ec2 account it will just

00:01:55,510 --> 00:02:00,100
set you up on a shared one that should

00:01:58,180 --> 00:02:02,050
mostly work except you may occasionally

00:02:00,100 --> 00:02:03,550
hit rate-limiting errors when you try to

00:02:02,050 --> 00:02:04,780
launch new VMs if there's too many

00:02:03,550 --> 00:02:07,360
people trying to do it at once on the

00:02:04,780 --> 00:02:09,910
same account if that happens just wait a

00:02:07,360 --> 00:02:12,040
minute and try it again so if you have

00:02:09,910 --> 00:02:21,880
your own account it will probably work a

00:02:12,040 --> 00:02:23,650
little bit more smoothly so I'll just go

00:02:21,880 --> 00:02:26,890
ahead and give people a few minutes to

00:02:23,650 --> 00:02:28,930
get the get the zip file downloaded and

00:02:26,890 --> 00:02:38,020
then we'll jump immediately into the

00:02:28,930 --> 00:02:39,580
first lab once you have that set up so

00:02:38,020 --> 00:02:41,530
if you look you can also pull these

00:02:39,580 --> 00:02:45,550
commands up if you look along the top

00:02:41,530 --> 00:02:46,959
menu of the the class page all of the

00:02:45,550 --> 00:02:49,810
commands and the instructions for the

00:02:46,959 --> 00:02:52,000
labs are also duplicated there so the

00:02:49,810 --> 00:02:55,209
first lab is just making sure that you

00:02:52,000 --> 00:02:57,160
have chef setup use ibly and that you

00:02:55,209 --> 00:02:59,170
have actually downloaded the zip file

00:02:57,160 --> 00:03:03,280
correctly so you're gonna want to run

00:02:59,170 --> 00:03:05,290
these what is that six commands the the

00:03:03,280 --> 00:03:07,590
second one if you're using your own ec2

00:03:05,290 --> 00:03:09,700
account you don't actually need to do

00:03:07,590 --> 00:03:12,450
yeah so this is the first lab is just

00:03:09,700 --> 00:03:15,400
getting a server started in the cloud

00:03:12,450 --> 00:03:17,980
and making sure that chef works with it

00:03:15,400 --> 00:03:20,620
and then we'll use this in the next labs

00:03:17,980 --> 00:03:23,950
so you have a testbed to work with let's

00:03:20,620 --> 00:03:25,180
make sense all right well like I said if

00:03:23,950 --> 00:03:28,890
you have any questions just flag me down

00:03:25,180 --> 00:03:28,890
and I will I will answer them

00:05:38,720 --> 00:05:44,430
I'm there let's not hang out near the

00:05:43,800 --> 00:05:48,330
speakers

00:05:44,430 --> 00:05:50,100
okay so introduction to what is DevOps I

00:05:48,330 --> 00:05:53,730
cry a little bit every time I use the

00:05:50,100 --> 00:05:57,420
word but it is still very apt so DevOps

00:05:53,730 --> 00:06:00,450
is an attempt to again words that make

00:05:57,420 --> 00:06:01,800
me cry synergize between the development

00:06:00,450 --> 00:06:04,560
and operations teams as in they should

00:06:01,800 --> 00:06:06,810
talk to each other and get along into

00:06:04,560 --> 00:06:08,400
many organizations it is opposite sides

00:06:06,810 --> 00:06:11,180
of the fence and it is referred to as

00:06:08,400 --> 00:06:12,540
throwing things over the fence

00:06:11,180 --> 00:06:14,090
development doesn't worry about

00:06:12,540 --> 00:06:16,919
deployment operations doesn't care about

00:06:14,090 --> 00:06:21,090
what gets built they consider them to be

00:06:16,919 --> 00:06:23,880
independent domains this is bad so what

00:06:21,090 --> 00:06:25,050
is our goal here I will read this enable

00:06:23,880 --> 00:06:26,490
the reconstruction of the business from

00:06:25,050 --> 00:06:27,930
nothing but source code repository and

00:06:26,490 --> 00:06:29,730
application data backup and bare metal

00:06:27,930 --> 00:06:31,350
resources from those three things you

00:06:29,730 --> 00:06:33,540
should be able to rebuild your company

00:06:31,350 --> 00:06:35,160
if your data center gets hit by a comet

00:06:33,540 --> 00:06:36,990
and you have these three things and you

00:06:35,160 --> 00:06:40,260
are following the correct DevOps e model

00:06:36,990 --> 00:06:42,060
you should be fine that is the idea you

00:06:40,260 --> 00:06:44,490
want literally everything to be

00:06:42,060 --> 00:06:48,479
controlled by either a data backup or a

00:06:44,490 --> 00:06:49,800
piece of source code so what are we

00:06:48,479 --> 00:06:51,690
talking about in DevOps you're talking

00:06:49,800 --> 00:06:53,729
about configuration management that is

00:06:51,690 --> 00:06:55,110
actually setting up what needs to be

00:06:53,729 --> 00:06:58,590
running on servers what config files

00:06:55,110 --> 00:07:00,870
need to be where etc etc we're talking

00:06:58,590 --> 00:07:02,640
about systems integration this is I am a

00:07:00,870 --> 00:07:03,960
web server where is my database server

00:07:02,640 --> 00:07:09,030
having different servers in your

00:07:03,960 --> 00:07:11,010
structure talking to each other so the

00:07:09,030 --> 00:07:13,770
the three sort of steps of this are

00:07:11,010 --> 00:07:15,240
first we want to provision boxes so we

00:07:13,770 --> 00:07:16,620
want to actually just set up machines

00:07:15,240 --> 00:07:18,840
this is what everyone's been doing so

00:07:16,620 --> 00:07:22,560
far setting up fresh boxes on the cloud

00:07:18,840 --> 00:07:24,330
or in a data center or whatever cloud

00:07:22,560 --> 00:07:25,470
you know things like ec2 work very nice

00:07:24,330 --> 00:07:27,270
when you're talking about provisioning

00:07:25,470 --> 00:07:30,810
because it's just an API call

00:07:27,270 --> 00:07:32,430
but meatspace is a valid API - it is

00:07:30,810 --> 00:07:34,650
still an API call if it's a phone call

00:07:32,430 --> 00:07:35,970
to someone at a data center somewhere so

00:07:34,650 --> 00:07:37,590
then we want to configure them tell them

00:07:35,970 --> 00:07:39,150
what they are doing so we want to create

00:07:37,590 --> 00:07:40,229
a load balancer some app servers and

00:07:39,150 --> 00:07:42,660
some database servers and some

00:07:40,229 --> 00:07:43,680
monitoring servers etc etc and then we

00:07:42,660 --> 00:07:46,110
want to integrate them with each other

00:07:43,680 --> 00:07:48,330
so we want them all to know about each

00:07:46,110 --> 00:07:51,650
other know what ports to talk to you

00:07:48,330 --> 00:07:53,760
what host names to talk to etc etc

00:07:51,650 --> 00:07:55,800
the tools I'm going to be talking about

00:07:53,760 --> 00:07:56,850
are chef and fabric hopefully everyone

00:07:55,800 --> 00:08:00,240
has figured that out by now if not

00:07:56,850 --> 00:08:02,940
you're probably in the wrong place the

00:08:00,240 --> 00:08:04,680
sort of really big features that matter

00:08:02,940 --> 00:08:06,270
when it comes to these tools at least

00:08:04,680 --> 00:08:07,620
obviously I'm somewhat biased

00:08:06,270 --> 00:08:10,200
like I said I work for ops code so

00:08:07,620 --> 00:08:12,090
obviously I like chef and I will just go

00:08:10,200 --> 00:08:13,800
ahead and say that I'm biased towards

00:08:12,090 --> 00:08:16,440
fabric versus capistrano in whatever

00:08:13,800 --> 00:08:17,490
because I know the authors and I like it

00:08:16,440 --> 00:08:19,860
a lot

00:08:17,490 --> 00:08:21,240
but still they are awesome so what are

00:08:19,860 --> 00:08:23,490
what are the important features so

00:08:21,240 --> 00:08:25,560
idempotence is a really really big thing

00:08:23,490 --> 00:08:27,510
this is the idea of if you run the same

00:08:25,560 --> 00:08:29,970
chef config on a server twice in a row

00:08:27,510 --> 00:08:33,000
the second run should do nothing the

00:08:29,970 --> 00:08:35,070
idea of that the configuration should be

00:08:33,000 --> 00:08:37,440
a destination state and whatever is

00:08:35,070 --> 00:08:38,610
executing your configuration should take

00:08:37,440 --> 00:08:40,020
into account with the current state in

00:08:38,610 --> 00:08:42,870
the destination state and only take

00:08:40,020 --> 00:08:44,400
action to get to the destination so if

00:08:42,870 --> 00:08:47,990
you install a package it shouldn't try

00:08:44,400 --> 00:08:49,200
and install it twice for example

00:08:47,990 --> 00:08:52,080
reasonability

00:08:49,200 --> 00:08:53,520
not in the sense of being reasonable

00:08:52,080 --> 00:08:55,020
like a person being reasonable in that

00:08:53,520 --> 00:08:57,030
you have a mental model and you can

00:08:55,020 --> 00:08:58,740
think about them so for instance fabric

00:08:57,030 --> 00:09:00,510
has a fairly simple mental model it is

00:08:58,740 --> 00:09:02,850
an ssh client running in a loop you

00:09:00,510 --> 00:09:04,860
understand that this is very important

00:09:02,850 --> 00:09:06,330
when you have a large team and a large

00:09:04,860 --> 00:09:08,640
infrastructure you need everyone to be

00:09:06,330 --> 00:09:10,320
able to keep the mental model of what is

00:09:08,640 --> 00:09:14,070
going on in your infrastructure in their

00:09:10,320 --> 00:09:16,890
head or it will all fall apart same

00:09:14,070 --> 00:09:18,450
defaults this is a major maxim of the

00:09:16,890 --> 00:09:20,700
Python community so I'm preaching to the

00:09:18,450 --> 00:09:22,650
choir here the defaults for things

00:09:20,700 --> 00:09:23,880
should be what you expect them to be so

00:09:22,650 --> 00:09:26,820
for instance if you want to install a

00:09:23,880 --> 00:09:28,320
package on say Ubuntu it should

00:09:26,820 --> 00:09:30,060
obviously use apps you should have to

00:09:28,320 --> 00:09:34,710
specify that that is just the way it

00:09:30,060 --> 00:09:36,240
works coordination so we have multiple

00:09:34,710 --> 00:09:39,150
servers in infrastructure if you are

00:09:36,240 --> 00:09:40,680
still running on one server then you're

00:09:39,150 --> 00:09:42,560
in for a shock when you have to deal

00:09:40,680 --> 00:09:45,089
with five of them let alone 500

00:09:42,560 --> 00:09:46,770
coordination is we want to have things

00:09:45,089 --> 00:09:48,750
like deployments and rollouts of new

00:09:46,770 --> 00:09:49,740
features happen as transparently as

00:09:48,750 --> 00:09:52,020
possible across the entire

00:09:49,740 --> 00:09:58,160
infrastructure this is where fabric

00:09:52,020 --> 00:10:00,420
excels and flexibility having you know

00:09:58,160 --> 00:10:02,730
mathematically perfect precision is

00:10:00,420 --> 00:10:04,200
great but you also at some point need a

00:10:02,730 --> 00:10:06,510
flexible enough system to get thing

00:10:04,200 --> 00:10:09,570
we all as the django community says

00:10:06,510 --> 00:10:11,790
perfectionist with deadlines all of us

00:10:09,570 --> 00:10:14,970
have to get feature shipped have to get

00:10:11,790 --> 00:10:16,650
servers running etc and when it comes

00:10:14,970 --> 00:10:19,200
down to it it is better to have

00:10:16,650 --> 00:10:21,630
something that works then something that

00:10:19,200 --> 00:10:22,350
is perfect and is still three weeks away

00:10:21,630 --> 00:10:24,450
from completion

00:10:22,350 --> 00:10:27,840
so those are sort of the big features

00:10:24,450 --> 00:10:29,940
that are important in my mind anyway

00:10:27,840 --> 00:10:34,440
about the devops world any questions so

00:10:29,940 --> 00:10:35,910
far so I will start talking about

00:10:34,440 --> 00:10:37,650
features of chef so we're gonna move

00:10:35,910 --> 00:10:43,620
into a very very brief introduction to

00:10:37,650 --> 00:10:45,750
the chef world the sort of most basic

00:10:43,620 --> 00:10:48,050
element of any piece of chef is called a

00:10:45,750 --> 00:10:51,000
resource so here are some examples

00:10:48,050 --> 00:10:52,530
resources all have things in common so

00:10:51,000 --> 00:10:54,000
this is three different resources all

00:10:52,530 --> 00:10:56,070
resources have a type in this case

00:10:54,000 --> 00:10:58,830
package template and service all

00:10:56,070 --> 00:11:00,300
resources have a name in this case the

00:10:58,830 --> 00:11:02,550
name of the package and service

00:11:00,300 --> 00:11:04,350
repository corresponds to the package

00:11:02,550 --> 00:11:06,510
and service respectively in the name of

00:11:04,350 --> 00:11:09,690
the template is the file it will write

00:11:06,510 --> 00:11:12,240
to these are our unique IDs only within

00:11:09,690 --> 00:11:14,580
the type so the name each a proxy

00:11:12,240 --> 00:11:18,270
doesn't overlap between package and

00:11:14,580 --> 00:11:19,620
service they have parameters so these

00:11:18,270 --> 00:11:22,760
are things that are passed to the

00:11:19,620 --> 00:11:25,800
resource to control how they operate

00:11:22,760 --> 00:11:27,480
they take actions so we want to control

00:11:25,800 --> 00:11:28,980
exactly what action you just say a

00:11:27,480 --> 00:11:29,850
package H a proxy you don't nationally

00:11:28,980 --> 00:11:32,160
know what you want to do with that now

00:11:29,850 --> 00:11:33,720
the default is to install so we don't

00:11:32,160 --> 00:11:35,190
technically need to have that but you

00:11:33,720 --> 00:11:36,480
could for instance maybe wants to delete

00:11:35,190 --> 00:11:40,470
the package that would just be action

00:11:36,480 --> 00:11:43,470
remove those determine what the end

00:11:40,470 --> 00:11:44,820
state of that resource will be and the

00:11:43,470 --> 00:11:47,220
final thing is that they can send

00:11:44,820 --> 00:11:49,050
information to other resources so

00:11:47,220 --> 00:11:51,000
resources are related to other resources

00:11:49,050 --> 00:11:53,700
via these things called notifications in

00:11:51,000 --> 00:11:57,180
this case we want to restart the service

00:11:53,700 --> 00:12:00,270
if the file changes so notifications are

00:11:57,180 --> 00:12:02,580
triggered in general when the resource

00:12:00,270 --> 00:12:03,780
changes exactly what that means changes

00:12:02,580 --> 00:12:06,000
for each type of resource so for a

00:12:03,780 --> 00:12:08,130
package it is considered to be changed

00:12:06,000 --> 00:12:09,900
if the version changes or if it is

00:12:08,130 --> 00:12:11,730
installed or uninstalled for a template

00:12:09,900 --> 00:12:15,350
it is changed when the content changes

00:12:11,730 --> 00:12:15,350
make sense question

00:12:17,779 --> 00:12:22,560
correct yes these are three separate

00:12:20,279 --> 00:12:26,279
resources that are all working together

00:12:22,560 --> 00:12:27,089
to get a cheap Roxy running any other

00:12:26,279 --> 00:12:31,980
questions so far

00:12:27,089 --> 00:12:33,779
resources so next resources take take

00:12:31,980 --> 00:12:35,820
action through providers providers are

00:12:33,779 --> 00:12:38,490
the back end of the resource resources

00:12:35,820 --> 00:12:40,050
are just sort of the the DSL front end

00:12:38,490 --> 00:12:41,850
providers are actually where all of the

00:12:40,050 --> 00:12:43,950
logic is implemented so when you write

00:12:41,850 --> 00:12:45,240
package into a proxy in a chef recipe

00:12:43,950 --> 00:12:47,070
what are actually going to get is

00:12:45,240 --> 00:12:48,630
variant on the system like I said on

00:12:47,070 --> 00:12:51,930
Ubuntu it'll figure out that you meant

00:12:48,630 --> 00:12:53,820
app get install AJ proxy but on on a

00:12:51,930 --> 00:12:55,500
CentOS you'll get yum install each a

00:12:53,820 --> 00:12:59,240
proxy this is implemented through

00:12:55,500 --> 00:13:02,940
different providers on the same resource

00:12:59,240 --> 00:13:04,050
questions recipes are collections of

00:13:02,940 --> 00:13:05,519
resources hahaha

00:13:04,050 --> 00:13:09,300
chef they're called recipes isn't it

00:13:05,519 --> 00:13:11,010
funny that is all a recipe as though

00:13:09,300 --> 00:13:13,440
it's just a collection of resources in a

00:13:11,010 --> 00:13:16,350
file they are executed top to bottom

00:13:13,440 --> 00:13:20,339
just like a normal script it is actual

00:13:16,350 --> 00:13:23,100
code there's no magic to it it is using

00:13:20,339 --> 00:13:24,720
a Ruby DSL this is the part where you

00:13:23,100 --> 00:13:27,029
will need to know at least some Ruby but

00:13:24,720 --> 00:13:28,980
not much it is really a DSL it is mostly

00:13:27,029 --> 00:13:30,779
declarative what I showed you in that

00:13:28,980 --> 00:13:34,769
earlier slide it really was Ruby code

00:13:30,779 --> 00:13:36,480
but it doesn't look very much like it we

00:13:34,769 --> 00:13:40,440
don't need to learn all of the crazy

00:13:36,480 --> 00:13:42,600
nonsense and here's just some more

00:13:40,440 --> 00:13:45,209
examples of resources just so you can

00:13:42,600 --> 00:13:47,250
see really really I mean it you don't

00:13:45,209 --> 00:13:55,649
need to learn much Ruby just a little

00:13:47,250 --> 00:13:58,110
bit and questions on recipes that is in

00:13:55,649 --> 00:14:02,250
the Python cookbook but yes that is

00:13:58,110 --> 00:14:04,350
something we provide just updated so on

00:14:02,250 --> 00:14:07,050
to the next term jargon and whatever

00:14:04,350 --> 00:14:08,310
jargon magic cookbooks are collections

00:14:07,050 --> 00:14:09,660
of recipes so while a recipe is a

00:14:08,310 --> 00:14:13,350
collection of resources cookbooks are

00:14:09,660 --> 00:14:15,779
collections of recipes that sort of

00:14:13,350 --> 00:14:18,029
covers everything that goes in on the

00:14:15,779 --> 00:14:20,640
configuration side next jargon is on the

00:14:18,029 --> 00:14:23,160
runtime side so a node a node is just

00:14:20,640 --> 00:14:24,420
the chef term for a server there are

00:14:23,160 --> 00:14:28,049
some things that are nodes that are not

00:14:24,420 --> 00:14:32,009
servers things like a switch or

00:14:28,049 --> 00:14:34,259
those are our managed nodes is the the

00:14:32,009 --> 00:14:38,219
current term but in general a node is

00:14:34,259 --> 00:14:41,189
just any server term attributes

00:14:38,219 --> 00:14:42,539
attributes are attached to nodes but

00:14:41,189 --> 00:14:45,839
it's basically just a free-form JSON

00:14:42,539 --> 00:14:50,119
blob so you can have information tied to

00:14:45,839 --> 00:14:52,699
nodes that is mostly unstructured

00:14:50,119 --> 00:14:56,219
attributes are built up out of multiple

00:14:52,699 --> 00:14:57,899
levels so you can have a default value

00:14:56,219 --> 00:15:00,539
for an attribute a normal value and an

00:14:57,899 --> 00:15:04,289
override value and obviously the there

00:15:00,539 --> 00:15:07,109
they're layered in this order they are

00:15:04,289 --> 00:15:09,149
deep merged obviously but it's worth

00:15:07,109 --> 00:15:12,029
noting that if you have arrays instead

00:15:09,149 --> 00:15:14,099
of dictionaries that the arrays are not

00:15:12,029 --> 00:15:17,029
deep merged because obviously there's no

00:15:14,099 --> 00:15:20,069
way to understand ordering automatically

00:15:17,029 --> 00:15:23,699
so only dictionaries are recursively

00:15:20,069 --> 00:15:26,879
merged in any automated way questions so

00:15:23,699 --> 00:15:29,879
far on nodes or attributes run lists are

00:15:26,879 --> 00:15:31,319
attached to nodes as well it is a set of

00:15:29,879 --> 00:15:34,709
recipes or roles which we'll get to in a

00:15:31,319 --> 00:15:36,809
moment which the node will run it's

00:15:34,709 --> 00:15:38,749
basically which scripts are going to go

00:15:36,809 --> 00:15:43,279
into the configuration of this server

00:15:38,749 --> 00:15:44,609
clear enough onto roles as I mentioned a

00:15:43,279 --> 00:15:46,889
role

00:15:44,609 --> 00:15:49,289
so where as run with Sun nodes contain

00:15:46,889 --> 00:15:51,809
recipes and roles roles are basically

00:15:49,289 --> 00:15:54,929
just a level of abstraction so you a

00:15:51,809 --> 00:15:56,819
role itself contains other recipes and

00:15:54,929 --> 00:15:58,349
roles it's just a recursive level in

00:15:56,819 --> 00:16:00,839
general this means that you use roles

00:15:58,349 --> 00:16:02,149
for things like I'm a database server or

00:16:00,839 --> 00:16:04,919
I am in the pre-production environment

00:16:02,149 --> 00:16:06,959
or I am something that needs to be

00:16:04,919 --> 00:16:09,269
monitored those would be a role and

00:16:06,959 --> 00:16:12,119
those contain the recipes that go into

00:16:09,269 --> 00:16:14,789
that the scripts that will make up being

00:16:12,119 --> 00:16:16,889
a web server so the Apache recipe and

00:16:14,789 --> 00:16:19,649
the my sequel recipe and the Django

00:16:16,889 --> 00:16:21,569
recipe for example would be in role web

00:16:19,649 --> 00:16:24,329
server and then you can assign that role

00:16:21,569 --> 00:16:26,459
to ten different notes and they will all

00:16:24,329 --> 00:16:31,549
become web servers it's just a little

00:16:26,459 --> 00:16:31,549
bit of don't repeat yourself questions

00:16:33,760 --> 00:16:40,210
roll so cookbooks are collections of

00:16:36,430 --> 00:16:42,190
recipes that are grouped a thematic

00:16:40,210 --> 00:16:44,860
level roles are usually a little broader

00:16:42,190 --> 00:16:46,360
so you will for instance have a cookbook

00:16:44,860 --> 00:16:48,220
which is apache2 a cookbook which is

00:16:46,360 --> 00:16:50,260
Postgres or a cookbook which is Django

00:16:48,220 --> 00:16:53,710
and then you'll have the role web server

00:16:50,260 --> 00:16:55,210
which pulls in all three of those there

00:16:53,710 --> 00:16:56,080
is definitely some overlap in there and

00:16:55,210 --> 00:16:58,720
that's on purpose

00:16:56,080 --> 00:17:00,880
chef's tries to be as non opinionated as

00:16:58,720 --> 00:17:02,500
possible if you choose not to use roles

00:17:00,880 --> 00:17:06,810
you can actually accomplish the whole

00:17:02,500 --> 00:17:10,930
thing using special magic cookbooks

00:17:06,810 --> 00:17:12,640
questions so that basically covers all

00:17:10,930 --> 00:17:14,620
of the jargon of chef's that you'll need

00:17:12,640 --> 00:17:16,870
to worry about at least for the context

00:17:14,620 --> 00:17:19,840
of this class so moving on we're going

00:17:16,870 --> 00:17:21,880
to talk about the at least a few of the

00:17:19,840 --> 00:17:23,740
basic resources so these are the actual

00:17:21,880 --> 00:17:26,710
low level building blocks the equivalent

00:17:23,740 --> 00:17:27,910
of syscalls or built in functions that

00:17:26,710 --> 00:17:31,180
you will use to actually configure

00:17:27,910 --> 00:17:33,970
things how we doing on time to the break

00:17:31,180 --> 00:17:44,530
by the way do you know when that is

00:17:33,970 --> 00:17:46,510
I assume it's at 2:40 anyway so hmm okay

00:17:44,530 --> 00:17:50,260
well there's refreshments so I don't

00:17:46,510 --> 00:17:52,510
want people to miss it alright so the

00:17:50,260 --> 00:17:54,550
first and most obviously used one is the

00:17:52,510 --> 00:17:57,700
package resource this installs a package

00:17:54,550 --> 00:17:59,560
pretty simple but most of the time this

00:17:57,700 --> 00:18:01,120
is what you will be doing you should

00:17:59,560 --> 00:18:02,530
want to make sure that you get packages

00:18:01,120 --> 00:18:05,590
on the system and of the right version

00:18:02,530 --> 00:18:07,120
so the options available are all listed

00:18:05,590 --> 00:18:10,390
here the only one that you will use

00:18:07,120 --> 00:18:11,790
frequently is version options and source

00:18:10,390 --> 00:18:14,020
are mostly used when you're installing

00:18:11,790 --> 00:18:16,240
things like Deb's and rpms that are not

00:18:14,020 --> 00:18:18,370
published to a public server so if that

00:18:16,240 --> 00:18:20,260
is part of your build process you spit

00:18:18,370 --> 00:18:22,390
out a Deb with your own application you

00:18:20,260 --> 00:18:23,610
can use chef to install those but

00:18:22,390 --> 00:18:25,810
generally you'll just be installing

00:18:23,610 --> 00:18:28,210
normal stuff off of the public servers

00:18:25,810 --> 00:18:31,140
you don't need to worry about that any

00:18:28,210 --> 00:18:34,060
questions on the packaged resource and

00:18:31,140 --> 00:18:37,480
as I mentioned the name is what turns

00:18:34,060 --> 00:18:38,560
into the name of the package the

00:18:37,480 --> 00:18:42,700
template resource this will be the

00:18:38,560 --> 00:18:45,430
second most used one so this is about

00:18:42,700 --> 00:18:47,590
the most annoying piece as far as

00:18:45,430 --> 00:18:50,080
learning goes because template files do

00:18:47,590 --> 00:18:51,630
use a Ruby as the templating language

00:18:50,080 --> 00:18:54,190
which I'm not really going to cover

00:18:51,630 --> 00:18:55,870
mostly because there are wiki pages that

00:18:54,190 --> 00:18:56,860
go over it very very well and because

00:18:55,870 --> 00:19:01,690
you don't need to know very much about

00:18:56,860 --> 00:19:03,730
it but it is the rails templating

00:19:01,690 --> 00:19:08,980
language and therefore her is as you

00:19:03,730 --> 00:19:10,840
might imagine annoying so anyway the

00:19:08,980 --> 00:19:13,450
usual way you will use this is if you

00:19:10,840 --> 00:19:15,340
have a config file for something you

00:19:13,450 --> 00:19:16,930
will it will become a template so the

00:19:15,340 --> 00:19:19,780
idea is to have all of the actual

00:19:16,930 --> 00:19:22,030
configuration stored in attributes so

00:19:19,780 --> 00:19:24,010
for instance how much memory to allocate

00:19:22,030 --> 00:19:25,870
to a process or how many workers to

00:19:24,010 --> 00:19:28,780
spawn all of those sort of tweakable 'z

00:19:25,870 --> 00:19:30,640
you stick those in note attributes so

00:19:28,780 --> 00:19:32,500
that they can be exposed via an API they

00:19:30,640 --> 00:19:34,900
can be manipulated easily and then you

00:19:32,500 --> 00:19:36,820
write those into a template file to hand

00:19:34,900 --> 00:19:40,270
them to your application so this is what

00:19:36,820 --> 00:19:42,880
what facilitates that the options for

00:19:40,270 --> 00:19:46,660
pretty simple owner group and mode just

00:19:42,880 --> 00:19:48,340
control file file Ackles and the

00:19:46,660 --> 00:19:52,080
variables are how you pass in

00:19:48,340 --> 00:20:01,480
information format of that pretty clear

00:19:52,080 --> 00:20:05,460
yes we will get to that in a moment when

00:20:01,480 --> 00:20:05,460
I go over the the structure of cookbooks

00:20:05,760 --> 00:20:10,210
cookbook file is also very frequently

00:20:09,010 --> 00:20:12,460
used it is very similar to the template

00:20:10,210 --> 00:20:13,870
except unlike a template it has no

00:20:12,460 --> 00:20:16,660
templating it's just I want to

00:20:13,870 --> 00:20:19,030
regurgitate a static file put it here

00:20:16,660 --> 00:20:21,040
and give it these permissions so if you

00:20:19,030 --> 00:20:22,930
have a a config file that has no

00:20:21,040 --> 00:20:25,210
variants you just want to you know

00:20:22,930 --> 00:20:27,100
install Apache and dump a config file in

00:20:25,210 --> 00:20:29,310
this is what you will use and we will

00:20:27,100 --> 00:20:31,780
actually be doing that in a little bit

00:20:29,310 --> 00:20:36,820
any questions on config files or

00:20:31,780 --> 00:20:39,940
templates execute this just runs a

00:20:36,820 --> 00:20:41,620
command so unlike the other two which

00:20:39,940 --> 00:20:43,480
are automatically I definite because

00:20:41,620 --> 00:20:46,030
chef understands if a package is

00:20:43,480 --> 00:20:47,740
installed or it knows when the contents

00:20:46,030 --> 00:20:49,480
of the file differ this one is not

00:20:47,740 --> 00:20:51,670
automatically ID evidence so by default

00:20:49,480 --> 00:20:53,680
it will just run it every time so you

00:20:51,670 --> 00:20:55,420
have to make sure that your command will

00:20:53,680 --> 00:20:56,860
not have any negative effects if it is

00:20:55,420 --> 00:20:58,550
run and whatever you are trying to

00:20:56,860 --> 00:21:00,290
accomplish is already

00:20:58,550 --> 00:21:03,380
because obviously chef's can't know that

00:21:00,290 --> 00:21:05,030
ahead of time but you can use this to

00:21:03,380 --> 00:21:06,680
run just about anything so for instance

00:21:05,030 --> 00:21:10,550
deploying django apps this is how you

00:21:06,680 --> 00:21:13,610
would run collect static first just my

00:21:10,550 --> 00:21:15,740
my usual example the options again

00:21:13,610 --> 00:21:17,240
pretty simple what user to run as what

00:21:15,740 --> 00:21:18,380
working directory to run from and if you

00:21:17,240 --> 00:21:23,240
want to set in the environment variables

00:21:18,380 --> 00:21:26,870
that's occasionally useful service this

00:21:23,240 --> 00:21:30,350
by default will control standard in it

00:21:26,870 --> 00:21:32,600
dot r c-- services it can also be set to

00:21:30,350 --> 00:21:35,990
control the upstart and we shipped

00:21:32,600 --> 00:21:40,370
cookbooks for Monnett god blue pill

00:21:35,990 --> 00:21:44,210
supervisor probably some others daemon

00:21:40,370 --> 00:21:46,100
tools daemon tools still a thing but

00:21:44,210 --> 00:21:47,870
they're all pretty simple at heart the

00:21:46,100 --> 00:21:50,450
service resource just takes what

00:21:47,870 --> 00:21:53,510
commands to run when you want to change

00:21:50,450 --> 00:21:58,010
it from stops to started from started to

00:21:53,510 --> 00:21:59,560
stops etc etc and it will figure out the

00:21:58,010 --> 00:22:03,560
status tracking for you

00:21:59,560 --> 00:22:06,230
and finally the directory resource this

00:22:03,560 --> 00:22:07,550
creates a directory works exactly as you

00:22:06,230 --> 00:22:08,750
might expect the only interesting bit is

00:22:07,550 --> 00:22:10,940
the recursive option which is the

00:22:08,750 --> 00:22:12,410
equivalent of mcdeere - t so it will

00:22:10,940 --> 00:22:15,320
create all of the folders leading up to

00:22:12,410 --> 00:22:17,870
it if necessary any questions on any of

00:22:15,320 --> 00:22:20,390
the basic resources there are a lot more

00:22:17,870 --> 00:22:22,130
resources than this I actually put the

00:22:20,390 --> 00:22:24,770
the deployment resource on the cheat

00:22:22,130 --> 00:22:26,960
sheet and then ended up not having

00:22:24,770 --> 00:22:28,220
enough time probably in the class for it

00:22:26,960 --> 00:22:29,870
so I'm not going to cover that one but

00:22:28,220 --> 00:22:32,930
there's resources for things like

00:22:29,870 --> 00:22:35,750
deploying a git repository deploying a

00:22:32,930 --> 00:22:37,670
web app is a resource itself there's

00:22:35,750 --> 00:22:40,070
resources for pulling things in from a

00:22:37,670 --> 00:22:42,800
remote server over HTTP there's

00:22:40,070 --> 00:22:45,530
resources for talking to a web api as

00:22:42,800 --> 00:22:49,910
part of your convergence all of those

00:22:45,530 --> 00:22:53,870
sorts of things are in there any

00:22:49,910 --> 00:22:55,670
questions on resources alright so as you

00:22:53,870 --> 00:22:58,370
mentioned one thing we have not spoken

00:22:55,670 --> 00:22:59,870
about is the anatomy of cookbooks so a

00:22:58,370 --> 00:23:02,120
cookbook as I said is a collection of

00:22:59,870 --> 00:23:04,460
recipes but there's a little more to it

00:23:02,120 --> 00:23:05,900
than that so the biggest thing is the

00:23:04,460 --> 00:23:09,110
recipes in it but it also contains some

00:23:05,900 --> 00:23:11,309
other things so it contains attributes

00:23:09,110 --> 00:23:13,950
that are attached to the cookbook

00:23:11,309 --> 00:23:15,600
it contains the files and templates so

00:23:13,950 --> 00:23:17,070
this gets into it knows where to look

00:23:15,600 --> 00:23:18,809
for it cookbook files and knows where to

00:23:17,070 --> 00:23:20,580
look for templates and then they contain

00:23:18,809 --> 00:23:22,940
some metadata and hopefully a readme if

00:23:20,580 --> 00:23:26,039
the person is not a schmuck

00:23:22,940 --> 00:23:27,600
so the recipes are just in the recipes

00:23:26,039 --> 00:23:30,509
subfolder if you look in the zip file

00:23:27,600 --> 00:23:33,059
there's two cookbooks in there each with

00:23:30,509 --> 00:23:34,470
I think one recipe so you can see sort

00:23:33,059 --> 00:23:36,480
of an example of how to get things set

00:23:34,470 --> 00:23:38,999
up just a little bit of notational

00:23:36,480 --> 00:23:41,490
jargon so if you have recipes slash food

00:23:38,999 --> 00:23:44,340
@rb that turns into cookbook named colon

00:23:41,490 --> 00:23:46,470
colon foo if you have default that RB

00:23:44,340 --> 00:23:48,539
that's the equivalent of like under

00:23:46,470 --> 00:23:51,299
under in it that's just it leaves that

00:23:48,539 --> 00:23:52,769
part off it becomes the the recipe that

00:23:51,299 --> 00:23:59,519
corresponds to just the bear cookbook

00:23:52,769 --> 00:24:01,080
name clear clear so because you can have

00:23:59,519 --> 00:24:03,330
multiple recipes in a single cookbook

00:24:01,080 --> 00:24:06,659
you can have them include each other

00:24:03,330 --> 00:24:08,700
this is automatically debounce so it's

00:24:06,659 --> 00:24:11,700
like import if you include something

00:24:08,700 --> 00:24:13,950
twice it will not ruin your day and it

00:24:11,700 --> 00:24:17,159
uses the standard notation we just

00:24:13,950 --> 00:24:19,200
talked about so this lets you have as I

00:24:17,159 --> 00:24:22,610
was saying you could have recipes that

00:24:19,200 --> 00:24:22,610
pull in other recipes automatically

00:24:25,100 --> 00:24:30,690
cookbook attributes so again you can

00:24:29,100 --> 00:24:33,509
also use include attributes the same way

00:24:30,690 --> 00:24:35,999
use include recipe two to import other

00:24:33,509 --> 00:24:38,330
cookbooks attributes if you want to pull

00:24:35,999 --> 00:24:41,639
them in to process them ahead of time

00:24:38,330 --> 00:24:43,679
but this is the format then for how to

00:24:41,639 --> 00:24:46,740
set defaults so if you're going to use

00:24:43,679 --> 00:24:48,480
attributes in your recipes you can set

00:24:46,740 --> 00:24:49,860
default values for them which is usually

00:24:48,480 --> 00:24:52,499
a good thing to do again same defaults

00:24:49,860 --> 00:24:53,850
etc you really want to have default

00:24:52,499 --> 00:24:57,499
values that will make sense for most

00:24:53,850 --> 00:25:00,149
people or at least most of your servers

00:24:57,499 --> 00:25:02,549
does that make any sense so the format

00:25:00,149 --> 00:25:05,700
is very simple just default the name and

00:25:02,549 --> 00:25:07,350
then as many sub Keys as you want to put

00:25:05,700 --> 00:25:09,029
and then the value values can be strings

00:25:07,350 --> 00:25:11,940
they can be numbers whatever you need

00:25:09,029 --> 00:25:13,919
they can be arrays of things but beware

00:25:11,940 --> 00:25:16,049
the dangers of not being able to deep

00:25:13,919 --> 00:25:17,580
merge those so if you want to override

00:25:16,049 --> 00:25:21,750
something that is an array you have to

00:25:17,580 --> 00:25:24,450
override the entire array later clear

00:25:21,750 --> 00:25:25,140
enough pretty simple syntax we'll get

00:25:24,450 --> 00:25:29,640
into playing with it

00:25:25,140 --> 00:25:30,960
in a moment so the way files work this

00:25:29,640 --> 00:25:32,250
is what he was asking of how it knows

00:25:30,960 --> 00:25:33,300
where to look for things this is a

00:25:32,250 --> 00:25:36,420
little bit strange

00:25:33,300 --> 00:25:38,160
so there is a files and a template

00:25:36,420 --> 00:25:41,570
subdirectory and inside that there is a

00:25:38,160 --> 00:25:44,160
single subdirectory called defaults that

00:25:41,570 --> 00:25:46,670
is therefore very silly historical

00:25:44,160 --> 00:25:49,950
reasons but just know that when you say

00:25:46,670 --> 00:25:55,520
fuji RB as the template that will look

00:25:49,950 --> 00:25:55,520
for templates slash default /foo ER be

00:25:55,970 --> 00:26:00,900
clear enough on how things are looked up

00:25:58,230 --> 00:26:03,570
you can have subfolders within there so

00:26:00,900 --> 00:26:07,920
if you put source or cookbook file

00:26:03,570 --> 00:26:09,990
source foo slash bar dot ini' that will

00:26:07,920 --> 00:26:14,760
turn into looking for files slash

00:26:09,990 --> 00:26:17,070
default /foo slash bargaining fairly

00:26:14,760 --> 00:26:22,260
simple and that's basically it that is a

00:26:17,070 --> 00:26:24,510
very rapid crash course in chef any

00:26:22,260 --> 00:26:26,190
other questions on the basics of chef

00:26:24,510 --> 00:26:27,540
before we jump into the second lab where

00:26:26,190 --> 00:26:29,490
you will be writing your first cookbook

00:26:27,540 --> 00:26:40,070
or possibly not first if you've done

00:26:29,490 --> 00:26:40,070
this before yes yes

00:26:46,869 --> 00:26:51,859
so it automatically looks in the

00:26:49,639 --> 00:26:54,229
cookbook where the resource was defined

00:26:51,859 --> 00:26:56,749
so if your resource is defined in the

00:26:54,229 --> 00:27:05,690
apache2 cookbook it looks for the file

00:26:56,749 --> 00:27:08,889
in the apache2 cookbook I'm sorry I

00:27:05,690 --> 00:27:08,889
guess I'm not sure what you're asking

00:27:17,289 --> 00:27:22,359
yep that'd be usually the way to do it

00:27:23,139 --> 00:27:27,440
that's why you put things into

00:27:25,159 --> 00:27:28,999
attributes so that if you have variants

00:27:27,440 --> 00:27:30,289
because roles can also declare

00:27:28,999 --> 00:27:31,399
attributes and you can assign them

00:27:30,289 --> 00:27:32,690
directly to note you can assign

00:27:31,399 --> 00:27:36,379
attributes are there at the node or the

00:27:32,690 --> 00:27:38,029
role level so you can customize it say

00:27:36,379 --> 00:27:40,940
you have one server that has twice as

00:27:38,029 --> 00:27:43,190
much RAM as anyone else you could set a

00:27:40,940 --> 00:27:45,039
node attribute on there to run twice as

00:27:43,190 --> 00:27:47,330
many Apache workers or whatever it is

00:27:45,039 --> 00:27:48,710
those kinds of customizations and

00:27:47,330 --> 00:27:50,509
because it's all done through templates

00:27:48,710 --> 00:27:55,879
you don't have to change the config file

00:27:50,509 --> 00:27:58,039
itself all right but hopefully by now

00:27:55,879 --> 00:28:00,519
most people have gotten a server up on

00:27:58,039 --> 00:28:03,559
ec2 or have someone they can work with

00:28:00,519 --> 00:28:05,210
so jump into lab 2 so the idea is to

00:28:03,559 --> 00:28:07,789
write a cookbook the reason I keep

00:28:05,210 --> 00:28:08,809
harping on Apaches because I hope that

00:28:07,789 --> 00:28:11,479
that is something that most people have

00:28:08,809 --> 00:28:13,609
worked with so we're going to write a

00:28:11,479 --> 00:28:15,919
very very basic cookbook for Apache all

00:28:13,609 --> 00:28:19,519
you want it to do is to install the

00:28:15,919 --> 00:28:20,929
Apache to package onto your server dump

00:28:19,519 --> 00:28:23,330
a config file it can even just be a

00:28:20,929 --> 00:28:25,129
static cookbook file and then make sure

00:28:23,330 --> 00:28:26,840
the service is started and if you want

00:28:25,129 --> 00:28:30,200
to get really fancy when the config file

00:28:26,840 --> 00:28:30,889
changes restart the service does that

00:28:30,200 --> 00:28:33,909
make sense

00:28:30,889 --> 00:28:37,849
people think they they know the right

00:28:33,909 --> 00:28:39,799
resources to use for these so I just

00:28:37,849 --> 00:28:41,419
want to create that in the same folder

00:28:39,799 --> 00:28:43,759
with the other cookbooks inside the zip

00:28:41,419 --> 00:28:46,929
file so under the slash cookbooks create

00:28:43,759 --> 00:28:50,659
something called Apache two and then

00:28:46,929 --> 00:28:53,749
make recipes slash whatever you want and

00:28:50,659 --> 00:28:54,710
I will be circulating to help people if

00:28:53,749 --> 00:28:56,149
they have any questions for

00:28:54,710 --> 00:28:57,770
if you have not gotten ec2 up and

00:28:56,149 --> 00:28:58,640
running yet hopefully by now the rate

00:28:57,770 --> 00:29:05,120
limits have expired

00:28:58,640 --> 00:29:06,529
so everyone should be able to alright so

00:29:05,120 --> 00:29:10,669
we are back from the break so we are

00:29:06,529 --> 00:29:12,740
going to move into part two and the

00:29:10,669 --> 00:29:17,020
first part of part two is going to be a

00:29:12,740 --> 00:29:20,179
very very rapid crash course in Ruby

00:29:17,020 --> 00:29:24,409
everyone back on laptops and whatnot

00:29:20,179 --> 00:29:26,179
alright so introduction to Ruby so I'm

00:29:24,409 --> 00:29:28,010
just going to cover the pieces where

00:29:26,179 --> 00:29:29,179
Ruby differs from Python basically this

00:29:28,010 --> 00:29:32,390
is by no means a comprehensive

00:29:29,179 --> 00:29:34,190
introduction normal this really make you

00:29:32,390 --> 00:29:35,330
capable of writing Ruby code but

00:29:34,190 --> 00:29:38,529
hopefully you'll be able to write and

00:29:35,330 --> 00:29:45,350
more importantly read recipes out there

00:29:38,529 --> 00:29:47,390
yes I was not planning on mostly because

00:29:45,350 --> 00:29:54,340
I don't have a lot of time sorry

00:29:47,390 --> 00:29:57,470
find me afterwards all right

00:29:54,340 --> 00:30:02,450
starting off easy functions conveniently

00:29:57,470 --> 00:30:05,750
uses the same keyword def def the

00:30:02,450 --> 00:30:08,149
function name and then the sweet notably

00:30:05,750 --> 00:30:10,549
parens when it comes to functions are

00:30:08,149 --> 00:30:13,279
optional basically everywhere so you can

00:30:10,549 --> 00:30:15,080
just have a bare name so these are

00:30:13,279 --> 00:30:18,620
completely identical and all four of

00:30:15,080 --> 00:30:20,480
these are completely identical you can

00:30:18,620 --> 00:30:22,460
have default arguments like you do in

00:30:20,480 --> 00:30:25,760
Python but there is no such thing as T

00:30:22,460 --> 00:30:26,809
word arguments if you see things that

00:30:25,760 --> 00:30:28,990
look like you were arguments they're

00:30:26,809 --> 00:30:32,270
fake

00:30:28,990 --> 00:30:33,470
so yeah functions pretty simple the

00:30:32,270 --> 00:30:36,440
friends thing will throw you for a loop

00:30:33,470 --> 00:30:42,740
pretty frequently at least it does for

00:30:36,440 --> 00:30:45,860
me clear enough functions so it allows

00:30:42,740 --> 00:30:48,559
you to have a fact of Leah dictionary

00:30:45,860 --> 00:30:51,110
which I'll cover in a few slides without

00:30:48,559 --> 00:30:53,510
having the curly braces you can just

00:30:51,110 --> 00:30:56,090
have them in the arguments to a function

00:30:53,510 --> 00:31:00,080
and it just turns the last argument into

00:30:56,090 --> 00:31:00,980
a hash into a dictionary so yeah if you

00:31:00,080 --> 00:31:02,720
see things that look like keyword

00:31:00,980 --> 00:31:04,520
arguments it's really just a single

00:31:02,720 --> 00:31:07,530
positional argument at the end which

00:31:04,520 --> 00:31:10,600
happens to be a dictionary

00:31:07,530 --> 00:31:15,040
and it's just the syntax is flexible

00:31:10,600 --> 00:31:18,460
enough that it doesn't care like I said

00:31:15,040 --> 00:31:19,300
they're fake symbols so this is

00:31:18,460 --> 00:31:21,430
something I know at least one person

00:31:19,300 --> 00:31:23,050
already ran into these so these this

00:31:21,430 --> 00:31:24,820
funny thing with a colon in front of it

00:31:23,050 --> 00:31:27,880
this is called a symbol this is

00:31:24,820 --> 00:31:29,980
something python does not do the closest

00:31:27,880 --> 00:31:33,610
thing in Python is the built-in called

00:31:29,980 --> 00:31:34,990
intern which will take a string and pool

00:31:33,610 --> 00:31:36,490
them so it means that if you pass the

00:31:34,990 --> 00:31:40,000
same string to intern twice you get back

00:31:36,490 --> 00:31:42,040
literally the same object symbols are

00:31:40,000 --> 00:31:44,050
generally used for things where you

00:31:42,040 --> 00:31:47,260
would use an enum and see if anyone

00:31:44,050 --> 00:31:50,170
remembers those still something where

00:31:47,260 --> 00:31:53,679
it's not really textual content it's one

00:31:50,170 --> 00:31:55,990
of several options so like actions in in

00:31:53,679 --> 00:31:57,970
a resource are symbols because there's a

00:31:55,990 --> 00:32:00,040
limited number of actions it's not

00:31:57,970 --> 00:32:04,900
really string data per se it's just an

00:32:00,040 --> 00:32:07,570
indicator so a symbol is just though a

00:32:04,900 --> 00:32:11,860
string at heart you can have a

00:32:07,570 --> 00:32:13,480
multi-word symbol all they are is is

00:32:11,860 --> 00:32:15,580
pull strings so that means that if you

00:32:13,480 --> 00:32:19,600
use the same symbol twice it's the same

00:32:15,580 --> 00:32:22,530
object of note though unlike in turn

00:32:19,600 --> 00:32:25,000
strings in Python which are real strings

00:32:22,530 --> 00:32:27,970
strings and symbols cannot be compared

00:32:25,000 --> 00:32:29,380
so if you try and compare the symbol foo

00:32:27,970 --> 00:32:31,330
and the string flu you will get a

00:32:29,380 --> 00:32:33,880
runtime error yes this is dumb and

00:32:31,330 --> 00:32:36,160
annoying these two functions show you

00:32:33,880 --> 00:32:39,880
have to convert back and forth to sim

00:32:36,160 --> 00:32:42,370
and to s4 to string so you have to

00:32:39,880 --> 00:32:45,040
convert both arguments to one or the

00:32:42,370 --> 00:32:47,500
other you cannot mix strings and symbols

00:32:45,040 --> 00:32:50,470
even though a symbol at heart is just a

00:32:47,500 --> 00:32:52,660
sequence of characters everyone

00:32:50,470 --> 00:32:57,850
understand what a symbol is and why you

00:32:52,660 --> 00:33:00,070
would use one so so the reason you would

00:32:57,850 --> 00:33:03,220
use one is just to indicate that it is

00:33:00,070 --> 00:33:05,350
something that is not textual data it is

00:33:03,220 --> 00:33:09,280
not words it is not English

00:33:05,350 --> 00:33:14,380
it is simply an option basically but it

00:33:09,280 --> 00:33:17,530
is a little bit fuzzy strings strings

00:33:14,380 --> 00:33:18,760
are mostly the same the biggest

00:33:17,530 --> 00:33:20,060
difference is the way string

00:33:18,760 --> 00:33:22,970
interpolation works

00:33:20,060 --> 00:33:25,340
so that is a hash and curly braces and

00:33:22,970 --> 00:33:27,170
the thing inside that is any arbitrary

00:33:25,340 --> 00:33:29,960
Ruby expression which will then be

00:33:27,170 --> 00:33:32,900
converted into a string it literally can

00:33:29,960 --> 00:33:34,460
be anything of note no this only happens

00:33:32,900 --> 00:33:37,700
inside double quotes so it's like Perl

00:33:34,460 --> 00:33:39,200
or PHP where single quotes mean really

00:33:37,700 --> 00:33:40,850
really literal only double quotes

00:33:39,200 --> 00:33:44,800
process interpolation only double quotes

00:33:40,850 --> 00:33:49,100
process backslash escapes clear enough

00:33:44,800 --> 00:33:52,970
terrible but pretty obvious there's also

00:33:49,100 --> 00:33:55,760
these things the % q and % q capital

00:33:52,970 --> 00:33:58,070
again taken directly out of Pearl

00:33:55,760 --> 00:33:59,450
they are just alternate forms of quoting

00:33:58,070 --> 00:34:02,540
so if you want to have a string with

00:33:59,450 --> 00:34:05,570
lots of embedded quotes you can use

00:34:02,540 --> 00:34:06,740
these to surround them and then this one

00:34:05,570 --> 00:34:08,510
thing which you will see a lot in

00:34:06,740 --> 00:34:11,090
recipes this is actually very useful as

00:34:08,510 --> 00:34:12,770
percent W again I'd pretty sure this is

00:34:11,090 --> 00:34:15,590
taken directly from Pearl but it's been

00:34:12,770 --> 00:34:18,080
a while it is a space separated so

00:34:15,590 --> 00:34:21,290
inside the the curly braces for the

00:34:18,080 --> 00:34:24,710
percent w it is a space separated list

00:34:21,290 --> 00:34:27,890
of strings this is converted to an array

00:34:24,710 --> 00:34:30,110
of strings so it is just shorthand for

00:34:27,890 --> 00:34:31,460
if you have a whole bunch of single word

00:34:30,110 --> 00:34:33,800
strings that you want to make into an

00:34:31,460 --> 00:34:35,450
array you can use percent W you'll most

00:34:33,800 --> 00:34:36,890
frequently see this in things like I

00:34:35,450 --> 00:34:38,750
want to install a bunch of packages

00:34:36,890 --> 00:34:41,420
because those are all generally one

00:34:38,750 --> 00:34:43,160
there there one word so you can just

00:34:41,420 --> 00:34:53,630
have a little loop will cover loops in a

00:34:43,160 --> 00:34:55,790
moment yes I guess that's maybe not

00:34:53,630 --> 00:34:59,690
clear enough to see lower q is a single

00:34:55,790 --> 00:35:02,740
quote upper qs double quote so lower q

00:34:59,690 --> 00:35:07,210
is the super literal upper Q is

00:35:02,740 --> 00:35:09,500
backslash escapes and interpolation

00:35:07,210 --> 00:35:11,330
again Python gets this right over there

00:35:09,500 --> 00:35:15,560
is only one kind of string but other

00:35:11,330 --> 00:35:20,120
people are not quite so logical all

00:35:15,560 --> 00:35:21,650
right if is fairly simple except for not

00:35:20,120 --> 00:35:24,440
needing parens but we're all probably

00:35:21,650 --> 00:35:26,180
used to that you need the end so all

00:35:24,440 --> 00:35:28,820
blocks instead of being indentation

00:35:26,180 --> 00:35:32,210
sensitive Ruby blocks end with the word

00:35:28,820 --> 00:35:33,800
and this is the the normal multi-line

00:35:32,210 --> 00:35:35,090
form of an if statement but there

00:35:33,800 --> 00:35:37,190
also this thing where you can have it at

00:35:35,090 --> 00:35:40,100
the end this is very similar to the the

00:35:37,190 --> 00:35:42,050
Python to point I guess to point 6 added

00:35:40,100 --> 00:35:45,620
that the ternary expression where you

00:35:42,050 --> 00:35:55,610
just have some expression if foo which

00:35:45,620 --> 00:35:58,400
just will not be executed so yeah it's

00:35:55,610 --> 00:36:02,870
just an inline form so clear enough the

00:35:58,400 --> 00:36:05,300
inline form it's it's fairly handy also

00:36:02,870 --> 00:36:07,640
this weird thing most block level

00:36:05,300 --> 00:36:10,880
constructs in Ruby can be used as

00:36:07,640 --> 00:36:12,320
expressions so you will see x equals if

00:36:10,880 --> 00:36:14,480
something something something else

00:36:12,320 --> 00:36:18,500
something something something so that is

00:36:14,480 --> 00:36:22,310
saying the equivalent of if foo x equals

00:36:18,500 --> 00:36:24,380
blah else x equals blah you can just use

00:36:22,310 --> 00:36:29,450
the entire the entire if has a return

00:36:24,380 --> 00:36:31,190
value clear enough and briefly there's

00:36:29,450 --> 00:36:36,590
also this thing called unless which is

00:36:31,190 --> 00:36:38,630
the exact same as if not but it's not

00:36:36,590 --> 00:36:42,890
the same because you can have unless all

00:36:38,630 --> 00:36:44,480
right so that's conditionals anywhere

00:36:42,890 --> 00:36:47,510
you can use if you can use unless they

00:36:44,480 --> 00:36:50,630
are just logical opposites so blocks

00:36:47,510 --> 00:36:52,730
this is where the more confusing bits

00:36:50,630 --> 00:36:54,830
start there are two so there's this

00:36:52,730 --> 00:36:56,240
thing in in Ruby called a block which is

00:36:54,830 --> 00:36:58,610
similar to a lambda

00:36:56,240 --> 00:37:00,410
it's just code encapsulated in an object

00:36:58,610 --> 00:37:03,110
there are two completely different

00:37:00,410 --> 00:37:04,220
syntaxes for working with blocks one is

00:37:03,110 --> 00:37:05,870
a superset of the other but they are

00:37:04,220 --> 00:37:08,480
totally unrelated and you can use either

00:37:05,870 --> 00:37:11,690
one i cannot recommend one over the

00:37:08,480 --> 00:37:13,670
other because apparently they're used in

00:37:11,690 --> 00:37:16,540
different situations according to

00:37:13,670 --> 00:37:20,120
convention which i don't know very well

00:37:16,540 --> 00:37:24,740
so the first syntax is yield and block

00:37:20,120 --> 00:37:27,410
given so when you define so this is the

00:37:24,740 --> 00:37:29,420
function definition if block given is

00:37:27,410 --> 00:37:32,450
was i given was this function given a

00:37:29,420 --> 00:37:34,100
block and yield means send this to the

00:37:32,450 --> 00:37:36,680
block it is not like a python iterator

00:37:34,100 --> 00:37:39,110
even though it's the same keyword but it

00:37:36,680 --> 00:37:42,680
can be used similarly this is how you

00:37:39,110 --> 00:37:45,890
would use a block so this thing the due

00:37:42,680 --> 00:37:47,510
to the end is the block blocks can have

00:37:45,890 --> 00:37:49,100
arguments they go between

00:37:47,510 --> 00:37:50,780
pipes and their comma-separated just

00:37:49,100 --> 00:37:52,340
like a function and then this is the

00:37:50,780 --> 00:37:54,890
code inside the block in this case we

00:37:52,340 --> 00:37:58,460
just want to print it so this whole

00:37:54,890 --> 00:38:01,850
thing here will just print six everyone

00:37:58,460 --> 00:38:04,100
see how that works so X is five we were

00:38:01,850 --> 00:38:06,830
given a block because we gave one we

00:38:04,100 --> 00:38:10,450
will then send the block X plus 1 which

00:38:06,830 --> 00:38:15,470
is 6 so n becomes 6 so you see how yield

00:38:10,450 --> 00:38:21,310
sends to the block yes if you call yield

00:38:15,470 --> 00:38:21,310
twice you will run the block twice yes

00:38:21,460 --> 00:38:27,710
yes at the yield the yield means yield

00:38:24,950 --> 00:38:31,880
to the block it's so Python yield means

00:38:27,710 --> 00:38:33,200
go out in Ruby yield means go in you

00:38:31,880 --> 00:38:38,180
want to go down a level set up up a

00:38:33,200 --> 00:38:40,760
level so they can be used similarly

00:38:38,180 --> 00:38:42,230
we'll cover for loops in a moment and

00:38:40,760 --> 00:38:45,380
you'll see where you how you use blocks

00:38:42,230 --> 00:38:47,030
for for loops so that's one style this

00:38:45,380 --> 00:38:48,650
is the other style and this is the more

00:38:47,030 --> 00:38:51,740
I think this is more modern as far as I

00:38:48,650 --> 00:38:53,480
can tell but I my Ruby code archaeology

00:38:51,740 --> 00:38:55,610
failed and I couldn't tell when these

00:38:53,480 --> 00:38:57,220
were added I think this is considered

00:38:55,610 --> 00:39:02,210
the more modern because it is a more

00:38:57,220 --> 00:39:04,940
flexible syntax of you give and block in

00:39:02,210 --> 00:39:06,500
the in the function arguments and that

00:39:04,940 --> 00:39:09,530
gets that becomes the actual block

00:39:06,500 --> 00:39:11,000
object so then you have a fancy little

00:39:09,530 --> 00:39:14,330
code object it's the equivalent of a

00:39:11,000 --> 00:39:17,540
function object in Python and then you

00:39:14,330 --> 00:39:20,150
can use the call method on the block to

00:39:17,540 --> 00:39:24,070
run it or it will be set to none or nil

00:39:20,150 --> 00:39:27,080
or false if if a block wasn't passed

00:39:24,070 --> 00:39:31,310
this syntax clear people understand how

00:39:27,080 --> 00:39:33,800
this and this are the same thing fairly

00:39:31,310 --> 00:39:38,330
obvious just two completely different

00:39:33,800 --> 00:39:40,730
ways to do the exact same thing and this

00:39:38,330 --> 00:39:43,460
is another way to specify a block so we

00:39:40,730 --> 00:39:47,810
saw the do end version which is much

00:39:43,460 --> 00:39:49,130
more common this is again I can't find a

00:39:47,810 --> 00:39:50,390
name I generally refer to it as an

00:39:49,130 --> 00:39:52,460
inline block because you usually see

00:39:50,390 --> 00:39:55,310
this used for single line versions of

00:39:52,460 --> 00:39:56,690
you can use curly braces you still give

00:39:55,310 --> 00:39:59,300
arguments the same way you still have

00:39:56,690 --> 00:40:01,010
code the same way but it is slightly

00:39:59,300 --> 00:40:04,130
easier to write if you're going to chain

00:40:01,010 --> 00:40:05,930
things which we'll see in a minute other

00:40:04,130 --> 00:40:07,670
than that exactly the same after the

00:40:05,930 --> 00:40:08,180
compiler runs but just know what this

00:40:07,670 --> 00:40:12,170
means

00:40:08,180 --> 00:40:13,690
any questions on blocks if you have no

00:40:12,170 --> 00:40:16,040
questions on blocks you all are either

00:40:13,690 --> 00:40:31,190
giant magnificent space brains or

00:40:16,040 --> 00:40:34,160
something else yes that is so that is

00:40:31,190 --> 00:40:37,280
the way you do blocks in Python is is

00:40:34,160 --> 00:40:39,170
anonymous functions and callbacks they

00:40:37,280 --> 00:40:50,630
are basically just syntax for callback

00:40:39,170 --> 00:40:53,630
functions yes okay so here's the thing

00:40:50,630 --> 00:40:56,630
so the 2's so this is a function call

00:40:53,630 --> 00:40:59,890
from the F to the that the 2's is

00:40:56,630 --> 00:41:03,500
running on the output of the function so

00:40:59,890 --> 00:41:05,119
block dot call has a return value so

00:41:03,500 --> 00:41:08,810
this is your very right I should have

00:41:05,119 --> 00:41:10,609
mentioned this in any context block or

00:41:08,810 --> 00:41:12,320
otherwise in Ruby there is an implicit

00:41:10,609 --> 00:41:13,880
return of the last value

00:41:12,320 --> 00:41:15,290
so whereas Python if you hit the end of

00:41:13,880 --> 00:41:18,170
a function and there's no return you get

00:41:15,290 --> 00:41:20,630
an implicit return none in Ruby whatever

00:41:18,170 --> 00:41:22,100
the last thing that executed is the

00:41:20,630 --> 00:41:27,320
return value of the block

00:41:22,100 --> 00:41:29,869
so both yield and block call return

00:41:27,320 --> 00:41:31,790
whatever it is that the the block

00:41:29,869 --> 00:41:34,880
execution returns which in this case

00:41:31,790 --> 00:41:39,740
will be the return of print which is

00:41:34,880 --> 00:41:41,990
nothing luckily but in this case the

00:41:39,740 --> 00:41:43,550
block is returning n plus 10 because

00:41:41,990 --> 00:41:44,480
it's the last value so it becomes the

00:41:43,550 --> 00:41:46,700
implicit return

00:41:44,480 --> 00:41:49,100
there is also an explicit return which

00:41:46,700 --> 00:41:54,020
you can use if you want to abort earlier

00:41:49,100 --> 00:41:58,820
I think I have that in here later so yes

00:41:54,020 --> 00:42:01,520
so this would return something but the

00:41:58,820 --> 00:42:03,950
return value of F assuming you just call

00:42:01,520 --> 00:42:05,630
block call twice would be the second

00:42:03,950 --> 00:42:08,210
version what are the second call because

00:42:05,630 --> 00:42:10,460
that would be just the last value in the

00:42:08,210 --> 00:42:12,800
function the last the last execution

00:42:10,460 --> 00:42:14,360
result in the function makes sense so

00:42:12,800 --> 00:42:32,900
the 2's there is actually

00:42:14,360 --> 00:42:34,310
the return value of yes again would be

00:42:32,900 --> 00:42:37,040
the second yield because that would be

00:42:34,310 --> 00:42:39,860
yield has a return value yield is just a

00:42:37,040 --> 00:42:42,800
function actually it's not completely

00:42:39,860 --> 00:42:44,830
magical it's only slightly magical but

00:42:42,800 --> 00:42:49,190
same way Python yield has a return value

00:42:44,830 --> 00:42:50,480
so it is whatever the last thing in the

00:42:49,190 --> 00:42:53,630
function is and if there were two yields

00:42:50,480 --> 00:43:08,960
it would be the second yield good

00:42:53,630 --> 00:43:20,030
question yes the it would be the integer

00:43:08,960 --> 00:43:24,370
holder 12 mm-hmm yes well so this will

00:43:20,030 --> 00:43:28,250
print six and this will return 12

00:43:24,370 --> 00:43:30,260
because we are adding one so that would

00:43:28,250 --> 00:43:32,540
become n would be two and then we'd

00:43:30,260 --> 00:43:39,860
return 12 because the return of the

00:43:32,540 --> 00:43:41,540
block is 12 yes Darry and this is what

00:43:39,860 --> 00:43:45,380
people want in Python this is why I want

00:43:41,540 --> 00:43:46,400
to smack them don't anyone tell you that

00:43:45,380 --> 00:43:50,930
anonymous functions aren't bad for

00:43:46,400 --> 00:43:52,010
debugging all right so using blocks so

00:43:50,930 --> 00:43:54,440
this is where we actually get to do fun

00:43:52,010 --> 00:43:57,050
things with them so the way you do

00:43:54,440 --> 00:43:57,500
things like for loops in Ruby is with

00:43:57,050 --> 00:44:00,020
blocks

00:43:57,500 --> 00:44:03,110
there is no for loop construct per se

00:44:00,020 --> 00:44:06,170
there is only the each method of array

00:44:03,110 --> 00:44:09,250
of intervals and the each method takes a

00:44:06,170 --> 00:44:12,050
block and it runs the block on each item

00:44:09,250 --> 00:44:13,060
so in this case it will print one two

00:44:12,050 --> 00:44:16,570
three

00:44:13,060 --> 00:44:19,580
does that seem vaguely obvious yes so n

00:44:16,570 --> 00:44:22,490
will be successively bound to each item

00:44:19,580 --> 00:44:24,560
in the array so again you will see this

00:44:22,490 --> 00:44:26,120
very commonly in recipes of if you are

00:44:24,560 --> 00:44:27,069
doing something like installing a whole

00:44:26,120 --> 00:44:28,599
bunch of pack

00:44:27,069 --> 00:44:31,420
more commonly you'll see it look like

00:44:28,599 --> 00:44:36,579
this where it's a bunch of strings that

00:44:31,420 --> 00:44:39,269
you want to iterate over and then this

00:44:36,579 --> 00:44:51,069
is just an example of you can chain

00:44:39,269 --> 00:44:51,430
methods you sorry no I'm not sure what

00:44:51,069 --> 00:44:54,839
you mean

00:44:51,430 --> 00:44:59,559
so blocks aren't traditional arguments

00:44:54,839 --> 00:45:01,599
right there there yes they are after

00:44:59,559 --> 00:45:10,990
each is a function which takes no

00:45:01,599 --> 00:45:13,200
arguments and a block no you can sort of

00:45:10,990 --> 00:45:15,759
fake some things like that with the the

00:45:13,200 --> 00:45:17,799
ampersand block syntax because that

00:45:15,759 --> 00:45:19,930
actually hands you the block as an

00:45:17,799 --> 00:45:23,049
object so you can have change function

00:45:19,930 --> 00:45:24,640
calls and stuff but you cannot have a

00:45:23,049 --> 00:45:27,190
single function that takes two blocks as

00:45:24,640 --> 00:45:28,900
far as I know I am by no means a ruby

00:45:27,190 --> 00:45:31,960
expert so if anyone wants to correct me

00:45:28,900 --> 00:45:34,630
on any Ruby technicalities I will not be

00:45:31,960 --> 00:45:41,609
offended and it'll probably laugh that

00:45:34,630 --> 00:45:44,559
it was so uninteresting example of

00:45:41,609 --> 00:45:48,009
chaining different blocks different

00:45:44,559 --> 00:45:49,900
block ish calls select and map fairly

00:45:48,009 --> 00:45:51,789
obvious what they're doing select will

00:45:49,900 --> 00:45:56,230
throw out anything where this is false

00:45:51,789 --> 00:45:57,579
and map is map but the exact details of

00:45:56,230 --> 00:46:01,319
the operation aren't important it's just

00:45:57,579 --> 00:46:03,309
that you can have multiple blocks on

00:46:01,319 --> 00:46:05,349
different function calls in the same

00:46:03,309 --> 00:46:06,960
chain sequence they just follow each

00:46:05,349 --> 00:46:09,249
other

00:46:06,960 --> 00:46:12,150
any questions mostly on the for loops

00:46:09,249 --> 00:46:12,150
because that's the important part

00:46:12,930 --> 00:46:19,059
alright hashes is the last topic which

00:46:16,690 --> 00:46:23,259
is what Ruby calls dictionaries they are

00:46:19,059 --> 00:46:25,569
fairly similar the keys can be anything

00:46:23,259 --> 00:46:26,769
I'm using symbols here just out of

00:46:25,569 --> 00:46:29,079
simplicity but they don't have to be

00:46:26,769 --> 00:46:31,329
they can be normal strings and you use

00:46:29,079 --> 00:46:33,400
the little arrow rocket instead of a

00:46:31,329 --> 00:46:37,829
colon but they are comma separated and

00:46:33,400 --> 00:46:37,829
they do use curly braces

00:46:38,830 --> 00:46:44,500
obviously this fairly simple note that

00:46:42,350 --> 00:46:48,800
strings and symbols are different and

00:46:44,500 --> 00:46:51,080
most importantly this last one when you

00:46:48,800 --> 00:46:52,700
request an object that are a key that

00:46:51,080 --> 00:46:55,340
does not exist in a ruby hash there is

00:46:52,700 --> 00:46:58,670
no exception it just gives you back nil

00:46:55,340 --> 00:46:59,960
which is the equivalent of none if you

00:46:58,670 --> 00:47:05,420
want to check if it is there you have to

00:46:59,960 --> 00:47:07,100
use the function include huh so

00:47:05,420 --> 00:47:08,900
something that may have noticed is that

00:47:07,100 --> 00:47:12,500
both blocks and hashes use the same

00:47:08,900 --> 00:47:15,080
curly braces for syntax this can be a

00:47:12,500 --> 00:47:17,840
problem sometimes if you remember I said

00:47:15,080 --> 00:47:20,390
that parens are optional on functions

00:47:17,840 --> 00:47:22,790
and that blocks are not normal arguments

00:47:20,390 --> 00:47:24,950
they just come afterwards if you leave

00:47:22,790 --> 00:47:27,350
the parens off but your first argument

00:47:24,950 --> 00:47:29,180
is a hash you will get a syntax error

00:47:27,350 --> 00:47:30,770
because it will try to interpret it as a

00:47:29,180 --> 00:47:48,860
block people see where this is coming

00:47:30,770 --> 00:47:55,270
from because that is the syntax I guess

00:47:48,860 --> 00:47:59,930
I'm just saying that it's true yes yes

00:47:55,270 --> 00:48:02,810
saying so showing that see the string

00:47:59,930 --> 00:48:08,480
will be nil because I set it as a symbol

00:48:02,810 --> 00:48:09,920
and if you sorry yes these are just

00:48:08,480 --> 00:48:11,390
showing that if you set it as a symbol

00:48:09,920 --> 00:48:15,080
and retrieve it as a string or vice

00:48:11,390 --> 00:48:17,090
versa it will not be there normally in

00:48:15,080 --> 00:48:19,820
some places chef uses something called a

00:48:17,090 --> 00:48:21,200
mash where the strings are automatically

00:48:19,820 --> 00:48:23,210
where the keys are automatically turned

00:48:21,200 --> 00:48:25,100
into strings but in general you should

00:48:23,210 --> 00:48:29,960
not expect that to happen everywhere in

00:48:25,100 --> 00:48:34,360
Ruby because it doesn't always happen so

00:48:29,960 --> 00:48:36,650
yeah so what I'm saying before if you

00:48:34,360 --> 00:48:39,830
want to pass the first argument to a

00:48:36,650 --> 00:48:42,020
function is a hash always make sure to

00:48:39,830 --> 00:48:44,210
use parens otherwise you'll get a syntax

00:48:42,020 --> 00:48:47,690
error because there is syntax overlap

00:48:44,210 --> 00:48:49,430
between hashes and blocks that is one of

00:48:47,690 --> 00:48:50,450
the single biggest gotchas because it

00:48:49,430 --> 00:48:55,520
produces absolutely incomprehensible

00:48:50,450 --> 00:48:57,740
debugging output and that is my crash

00:48:55,520 --> 00:49:01,550
course to Ruby that is literally all you

00:48:57,740 --> 00:49:04,940
need to know to read 99% of the chef's

00:49:01,550 --> 00:49:06,920
recipes out there any questions on

00:49:04,940 --> 00:49:09,230
introduction to Ruby or things you have

00:49:06,920 --> 00:49:15,890
run into in Ruby that you do not

00:49:09,230 --> 00:49:18,800
understand all right I will then move

00:49:15,890 --> 00:49:22,640
into fabric so we can stop talking about

00:49:18,800 --> 00:49:24,170
Ruby so fabric how many people here have

00:49:22,640 --> 00:49:25,520
worked with fabric probably more than it

00:49:24,170 --> 00:49:27,530
worked with Jeff all right that is good

00:49:25,520 --> 00:49:29,660
that means I can hopefully not have to

00:49:27,530 --> 00:49:30,830
talk too much more so for those that

00:49:29,660 --> 00:49:33,770
have not worked with that fabric is a

00:49:30,830 --> 00:49:36,050
part of programmatic SSH client so

00:49:33,770 --> 00:49:37,610
there's a way of defining tasks like you

00:49:36,050 --> 00:49:39,980
would in a make file or something

00:49:37,610 --> 00:49:43,490
similar except that you can have them

00:49:39,980 --> 00:49:46,670
run on remote servers very easily so

00:49:43,490 --> 00:49:48,380
here is a example fabric has a nine

00:49:46,670 --> 00:49:50,950
keeps things in what is called a fab

00:49:48,380 --> 00:49:53,120
file it's usually just fab file dot PI

00:49:50,950 --> 00:49:55,370
it's the equivalent of a make file or a

00:49:53,120 --> 00:49:59,150
reg file except that it's conveniently

00:49:55,370 --> 00:50:00,780
all in Python you can see you have tasks

00:49:59,150 --> 00:50:03,030
you say what roles to

00:50:00,780 --> 00:50:04,350
come on and then you have the actual

00:50:03,030 --> 00:50:07,800
tasks themselves which we'll go into in

00:50:04,350 --> 00:50:09,330
a moment so here the important decorator

00:50:07,800 --> 00:50:11,250
is that you need to know about at tasks

00:50:09,330 --> 00:50:13,320
if you are only familiar with older

00:50:11,250 --> 00:50:15,180
versions of fabric at tasks was added

00:50:13,320 --> 00:50:18,060
fairly recently to create what are

00:50:15,180 --> 00:50:19,590
called new style tasks you cannot in in

00:50:18,060 --> 00:50:22,050
older fabric it would just use any

00:50:19,590 --> 00:50:23,670
callable any function as a task this

00:50:22,050 --> 00:50:26,070
made for problems with things like name

00:50:23,670 --> 00:50:31,220
spacing and accidentally having random

00:50:26,070 --> 00:50:34,290
functions in OS and cysts detected as as

00:50:31,220 --> 00:50:35,850
tasks so now you should really declare

00:50:34,290 --> 00:50:37,530
them all explicitly and just put the

00:50:35,850 --> 00:50:40,080
task decorator on them if they are a

00:50:37,530 --> 00:50:41,910
task there's other options you can look

00:50:40,080 --> 00:50:45,450
up which get into things with name

00:50:41,910 --> 00:50:48,210
spacing but the the basics is just put

00:50:45,450 --> 00:50:50,250
at task before all fastest next is the

00:50:48,210 --> 00:50:52,620
hosts decorator which just says what

00:50:50,250 --> 00:50:54,660
hosts to run it on so you can give it a

00:50:52,620 --> 00:50:56,520
set of host names or a set of IPs and it

00:50:54,660 --> 00:50:59,010
says that this task corresponds to these

00:50:56,520 --> 00:51:02,220
hosts but really you shouldn't be using

00:50:59,010 --> 00:51:03,720
the host decorator because we exist in a

00:51:02,220 --> 00:51:05,220
very fluid world and service will fail

00:51:03,720 --> 00:51:07,800
so what you want to be doing is using

00:51:05,220 --> 00:51:09,450
roles roles means that you can identify

00:51:07,800 --> 00:51:11,310
things much more symbolically so you say

00:51:09,450 --> 00:51:13,800
I want this to run on all web servers or

00:51:11,310 --> 00:51:16,110
all database servers instead so that is

00:51:13,800 --> 00:51:18,630
the roles decorator so the hosts

00:51:16,110 --> 00:51:19,650
decorator will cover roles in more

00:51:18,630 --> 00:51:22,320
detail in a moment

00:51:19,650 --> 00:51:23,610
and finally the parallel decorator which

00:51:22,320 --> 00:51:25,680
is very recent and is absolutely

00:51:23,610 --> 00:51:28,290
wonderful it means you can mark a task

00:51:25,680 --> 00:51:31,080
as safe to run multiple copies of in

00:51:28,290 --> 00:51:32,460
parallel so instead of running every so

00:51:31,080 --> 00:51:34,440
let's say it's gonna the tasks going to

00:51:32,460 --> 00:51:36,150
run on five different hosts without the

00:51:34,440 --> 00:51:37,620
peril decorator it will run on one wait

00:51:36,150 --> 00:51:39,030
till it completes them on the next wait

00:51:37,620 --> 00:51:40,980
till completes round the next wait until

00:51:39,030 --> 00:51:42,840
completes if you mark it with a parallel

00:51:40,980 --> 00:51:44,760
decorator it will just run all five in

00:51:42,840 --> 00:51:48,990
parallel and wait until all five have

00:51:44,760 --> 00:51:51,300
completed clear enough any questions on

00:51:48,990 --> 00:51:55,310
marketing tasks using roles or

00:51:51,300 --> 00:51:55,310
paralyzing tasks yes

00:51:58,530 --> 00:52:12,580
yes let's talk about that at the end

00:52:09,120 --> 00:52:15,010
there are many reasons to not run chef

00:52:12,580 --> 00:52:18,190
client in the background mostly because

00:52:15,010 --> 00:52:18,910
you don't want to wait for it but we can

00:52:18,190 --> 00:52:19,960
talk about that at the end because

00:52:18,910 --> 00:52:26,500
that's not really fabric related

00:52:19,960 --> 00:52:28,030
specifically anyway decorators so the

00:52:26,500 --> 00:52:30,760
three execution functions you need to

00:52:28,030 --> 00:52:32,470
know so run is the most basic it just

00:52:30,760 --> 00:52:35,050
runs the command string you give on

00:52:32,470 --> 00:52:36,400
whatever server is currently relevant so

00:52:35,050 --> 00:52:38,590
if you are running on five different

00:52:36,400 --> 00:52:40,030
Road hosts it will run the given command

00:52:38,590 --> 00:52:41,800
on all five of the hosts either in

00:52:40,030 --> 00:52:43,480
serial or in parallel depending on if

00:52:41,800 --> 00:52:45,940
you've used the parallel decorator or

00:52:43,480 --> 00:52:47,860
not there's also sudo which is very

00:52:45,940 --> 00:52:49,060
similar to run except it runs under sudo

00:52:47,860 --> 00:52:50,830
so you don't have to deal with shell

00:52:49,060 --> 00:52:53,110
escaping and whatnot to to get things

00:52:50,830 --> 00:52:54,910
set up with sudo and then there's local

00:52:53,110 --> 00:52:56,440
which is sort of the opposite that just

00:52:54,910 --> 00:52:58,750
means run the command on the machine

00:52:56,440 --> 00:53:00,190
that fabric is executing from this is

00:52:58,750 --> 00:53:04,450
mostly useful if you want to do things

00:53:00,190 --> 00:53:07,030
like push to get or bundle local

00:53:04,450 --> 00:53:08,530
attributes or run a compile step or if

00:53:07,030 --> 00:53:09,790
you want to use fabric for things that

00:53:08,530 --> 00:53:12,100
are not at all deployment related to

00:53:09,790 --> 00:53:13,990
like running your unit tests you can

00:53:12,100 --> 00:53:16,030
also just use it as a slightly nicer

00:53:13,990 --> 00:53:19,990
replacement for make where you want to

00:53:16,030 --> 00:53:22,120
set up local stuff clear enough on these

00:53:19,990 --> 00:53:23,590
three there are a lot more functions if

00:53:22,120 --> 00:53:25,300
you want to look at the fabric

00:53:23,590 --> 00:53:28,800
documentation but these are the basic

00:53:25,300 --> 00:53:28,800
three you'll use on a regular basis

00:53:29,340 --> 00:53:33,880
error handling by default fabric will

00:53:33,010 --> 00:53:35,980
halt

00:53:33,880 --> 00:53:37,960
if any of those so any command rather

00:53:35,980 --> 00:53:39,370
than any of those three functions if it

00:53:37,960 --> 00:53:41,830
does not return successfully so it

00:53:39,370 --> 00:53:44,680
returns any nonzero exit code it will

00:53:41,830 --> 00:53:46,480
halt your fabric run that's not always

00:53:44,680 --> 00:53:48,280
what you want sometimes you expect a

00:53:46,480 --> 00:53:49,570
failure or you're running something that

00:53:48,280 --> 00:53:53,980
may or may not succeed and you don't

00:53:49,570 --> 00:53:57,760
care whatever it is in this case you can

00:53:53,980 --> 00:53:59,860
use a what are scoped settings override

00:53:57,760 --> 00:54:01,450
so there is a global settings called

00:53:59,860 --> 00:54:03,070
warn only but you don't usually want to

00:54:01,450 --> 00:54:05,650
set that globally for obvious reasons of

00:54:03,070 --> 00:54:07,240
most tasks you know if your rsync fails

00:54:05,650 --> 00:54:09,580
you do not want to keep trying to run

00:54:07,240 --> 00:54:11,770
your deployment but if you want to set

00:54:09,580 --> 00:54:13,920
it in a specific scope you can use it as

00:54:11,770 --> 00:54:16,510
a context manager with with

00:54:13,920 --> 00:54:18,870
you can also override any other settings

00:54:16,510 --> 00:54:21,430
but that's probably the most useful

00:54:18,870 --> 00:54:23,740
so anything run inside the contacts

00:54:21,430 --> 00:54:29,920
manager if it fails it will not abort

00:54:23,740 --> 00:54:32,140
the run clear enough all right all three

00:54:29,920 --> 00:54:33,820
of those functions return something that

00:54:32,140 --> 00:54:36,850
looks like a string it is actually a

00:54:33,820 --> 00:54:39,070
subclass of string the string content

00:54:36,850 --> 00:54:41,130
itself is the text output of the

00:54:39,070 --> 00:54:44,320
function generally except for local

00:54:41,130 --> 00:54:48,120
local you can either have it echo to the

00:54:44,320 --> 00:54:53,020
console or capture the output due to

00:54:48,120 --> 00:54:54,160
UNIX being dumb but for running sudo

00:54:53,020 --> 00:54:56,860
which is generally when you care about

00:54:54,160 --> 00:54:59,740
it you get the full text output of the

00:54:56,860 --> 00:55:02,530
call but it also has these two extra

00:54:59,740 --> 00:55:05,740
attributes one is failed which is just a

00:55:02,530 --> 00:55:07,270
quick check for our return code does not

00:55:05,740 --> 00:55:11,020
equal zero and return code was the

00:55:07,270 --> 00:55:12,520
actual numeric program return code these

00:55:11,020 --> 00:55:15,760
are very very useful when combined with

00:55:12,520 --> 00:55:18,640
worn only equals true if you have

00:55:15,760 --> 00:55:23,230
failures that might be bad but it might

00:55:18,640 --> 00:55:33,220
not be clear enough any questions so far

00:55:23,230 --> 00:55:36,490
on execution so rolls rolls are a fairly

00:55:33,220 --> 00:55:38,410
global thing within fabric so there's

00:55:36,490 --> 00:55:40,780
thing called m dot roll deaths which is

00:55:38,410 --> 00:55:45,270
a dictionary which contains a mapping

00:55:40,780 --> 00:55:48,610
from roll name to all of your host names

00:55:45,270 --> 00:55:50,980
now if you are very very boring you

00:55:48,610 --> 00:55:53,290
could just keep a list of all of these

00:55:50,980 --> 00:55:55,420
statically but if you are using chef and

00:55:53,290 --> 00:55:57,880
therefore awesome chef has a thing

00:55:55,420 --> 00:56:00,550
called a roll right and we have a chef

00:55:57,880 --> 00:56:02,890
server and chef servant understands what

00:56:00,550 --> 00:56:05,950
nodes are part of what rolls so if you

00:56:02,890 --> 00:56:08,830
pip install pie chef there is this thing

00:56:05,950 --> 00:56:10,720
in pi chef which is a fabric integration

00:56:08,830 --> 00:56:13,540
layer which let you use your chef rolls

00:56:10,720 --> 00:56:15,250
within a fab file this is exceedingly

00:56:13,540 --> 00:56:17,320
useful and is how you should probably do

00:56:15,250 --> 00:56:18,340
it if not using chef you should have

00:56:17,320 --> 00:56:20,590
some other single point of truth

00:56:18,340 --> 00:56:21,940
database because it is very unlikely you

00:56:20,590 --> 00:56:25,200
will remember to edit your fab file

00:56:21,940 --> 00:56:26,950
every time there is a server change

00:56:25,200 --> 00:56:27,550
clear enough on rolls everyone

00:56:26,950 --> 00:56:29,230
understand why

00:56:27,550 --> 00:56:31,210
you don't want you just keep your roles

00:56:29,230 --> 00:56:33,370
or your host names in the file

00:56:31,210 --> 00:56:35,370
because servers fail and host names

00:56:33,370 --> 00:56:40,510
change yes

00:56:35,370 --> 00:56:44,230
okay and the last piece of our rapid

00:56:40,510 --> 00:56:46,990
crash course is sub task execution which

00:56:44,230 --> 00:56:49,480
means having tasks which dispatch to

00:56:46,990 --> 00:56:52,030
other tasks so in this case we have a

00:56:49,480 --> 00:56:54,550
deploy task that actually has to run

00:56:52,030 --> 00:56:57,760
three different things underneath it so

00:56:54,550 --> 00:56:59,500
it is running a task object so so

00:56:57,760 --> 00:57:02,460
downtime on is not a string it's the

00:56:59,500 --> 00:57:04,570
actual function that represents the task

00:57:02,460 --> 00:57:07,570
and did ou deploy web and did no

00:57:04,570 --> 00:57:09,070
downtime off it will run them exactly as

00:57:07,570 --> 00:57:15,460
if they were especially on the command

00:57:09,070 --> 00:57:17,890
line so if they themselves have roles

00:57:15,460 --> 00:57:20,560
attached to them it will correctly run

00:57:17,890 --> 00:57:24,400
on those machines so this is a very very

00:57:20,560 --> 00:57:26,380
common pattern for a deployment fab file

00:57:24,400 --> 00:57:29,680
of you'll have a single deploy task

00:57:26,380 --> 00:57:31,810
which runs the deploy DV which will run

00:57:29,680 --> 00:57:32,890
only on the DB machines and runs the

00:57:31,810 --> 00:57:53,830
deploy web which will run only on the

00:57:32,890 --> 00:57:55,840
web machines yes you could depends on

00:57:53,830 --> 00:58:00,780
what that's actually doing I just used

00:57:55,840 --> 00:58:00,780
that as an example any

00:58:04,400 --> 00:58:09,749
yes so I will cover that in a moment

00:58:06,779 --> 00:58:15,630
once once I'm done talking about how to

00:58:09,749 --> 00:58:17,400
use fabric any other questions on how to

00:58:15,630 --> 00:58:46,049
use fabrics in tax functions that are

00:58:17,400 --> 00:58:47,880
available yes yes you would usually have

00:58:46,049 --> 00:58:49,890
a roll of something like let's say

00:58:47,880 --> 00:58:51,329
making thumbnails or something you'd

00:58:49,890 --> 00:58:54,630
have like a map a roll called thumbnail

00:58:51,329 --> 00:58:56,549
master or thumbnail or one of the things

00:58:54,630 --> 00:58:58,109
you always need to be aware of when

00:58:56,549 --> 00:58:59,640
working with large numbers of servers is

00:58:58,109 --> 00:59:02,460
that unique snowflakes are the enemy

00:58:59,640 --> 00:59:03,749
because if that server fails do you

00:59:02,460 --> 00:59:05,279
really want to go write an automated

00:59:03,749 --> 00:59:08,759
master election thing which will fail

00:59:05,279 --> 00:59:11,279
over 2 etcetera etc you really probably

00:59:08,759 --> 00:59:13,140
don't want to write that so the fewer of

00:59:11,279 --> 00:59:14,279
those you can have the better but yes

00:59:13,140 --> 00:59:16,559
you'd usually just have a role that

00:59:14,279 --> 00:59:18,599
contains one machine so at the very

00:59:16,559 --> 00:59:20,249
least if that one machine fails you can

00:59:18,599 --> 00:59:21,589
build a new one easily as opposed to

00:59:20,249 --> 00:59:23,789
tying it directly with the host name

00:59:21,589 --> 00:59:25,289
where if that machine fails you have to

00:59:23,789 --> 00:59:28,819
go grep your source code forever i that

00:59:25,289 --> 00:59:28,819
host name is mentioned which is awful

00:59:40,290 --> 00:59:46,710
it is the level of the entire task as

00:59:44,230 --> 00:59:49,390
far as I know I might be wrong on that

00:59:46,710 --> 00:59:54,060
I've never checked I think it's a level

00:59:49,390 --> 00:59:56,080
task any other questions on using fabric

00:59:54,060 --> 00:59:57,640
again this is a very very basic

00:59:56,080 --> 01:00:00,430
introduction semilla t2 as I did with

00:59:57,640 --> 01:00:01,619
chef there's a lot more cool stuff you

01:00:00,430 --> 01:00:05,350
can do with fabric but this is

01:00:01,619 --> 01:00:12,369
everything you need to deploy your basic

01:00:05,350 --> 01:00:14,140
web app okay so the question he asked

01:00:12,369 --> 01:00:17,050
which is how do these two tools which

01:00:14,140 --> 01:00:20,260
are almost diametrically opposed

01:00:17,050 --> 01:00:22,570
Ruby versus Python ident versus

01:00:20,260 --> 01:00:25,330
procedural so on and so forth they're

01:00:22,570 --> 01:00:27,550
very very opposing tools why would you

01:00:25,330 --> 01:00:31,510
use them together so they are two

01:00:27,550 --> 01:00:33,160
different functions of DevOps so one is

01:00:31,510 --> 01:00:34,450
the configuration management side which

01:00:33,160 --> 01:00:35,830
chef excels at because you really want

01:00:34,450 --> 01:00:37,300
configuration management to be as

01:00:35,830 --> 01:00:40,660
declarative as possible you want to be a

01:00:37,300 --> 01:00:42,910
definite etc chef is very good at that

01:00:40,660 --> 01:00:44,380
chef is very bad at procedural tasks

01:00:42,910 --> 01:00:46,210
though anything where there is a step

01:00:44,380 --> 01:00:48,160
one to step two and a step 3 chef

01:00:46,210 --> 01:00:50,109
doesn't understand those because in an

01:00:48,160 --> 01:00:50,500
idempotent system that doesn't make any

01:00:50,109 --> 01:00:52,000
sense

01:00:50,500 --> 01:00:53,590
all steps should basically be

01:00:52,000 --> 01:00:55,030
interchangeable unless you have explicit

01:00:53,590 --> 01:00:57,550
dependencies between them but even then

01:00:55,030 --> 01:00:59,650
it doesn't really understand steps it

01:00:57,550 --> 01:01:02,830
only understands the state I am in and

01:00:59,650 --> 01:01:04,690
the state I need to be in fabric is the

01:01:02,830 --> 01:01:07,359
the yin to that yang all it really

01:01:04,690 --> 01:01:10,660
understands is what am i doing now and

01:01:07,359 --> 01:01:13,660
what is the next step so fabric is very

01:01:10,660 --> 01:01:15,220
very good at orchestrating so as opposed

01:01:13,660 --> 01:01:17,980
to configuration management the next

01:01:15,220 --> 01:01:19,810
piece of it is orchestration where you

01:01:17,980 --> 01:01:20,980
want to have multiple machines executing

01:01:19,810 --> 01:01:24,040
things in the right order

01:01:20,980 --> 01:01:25,630
so you could we even ship with knife

01:01:24,040 --> 01:01:28,000
there's a thing called my fssh which is

01:01:25,630 --> 01:01:29,590
just SSH in a for loop which is the most

01:01:28,000 --> 01:01:32,320
basic of all possible orchestration

01:01:29,590 --> 01:01:35,020
tools but this is generally not what you

01:01:32,320 --> 01:01:37,630
want because if you've got say you have

01:01:35,020 --> 01:01:39,430
to run them pull things out of the load

01:01:37,630 --> 01:01:40,510
balancer upgrade them run a database

01:01:39,430 --> 01:01:42,700
migrations put them back of the load

01:01:40,510 --> 01:01:44,350
balancer that is not something that chef

01:01:42,700 --> 01:01:45,609
can do or the destination a for-loop can

01:01:44,350 --> 01:01:47,350
do you actually want to run those steps

01:01:45,609 --> 01:01:49,060
wait for them to complete and then run

01:01:47,350 --> 01:01:51,720
the next step and that is where you want

01:01:49,060 --> 01:01:53,050
to use fabric so yes you would generally

01:01:51,720 --> 01:01:55,150
have

01:01:53,050 --> 01:01:56,200
a chef client in your fab file because

01:01:55,150 --> 01:01:59,020
you want to make sure that the chef

01:01:56,200 --> 01:02:01,270
client runs happen in the right order so

01:01:59,020 --> 01:02:04,300
the way we do it at my company anyway is

01:02:01,270 --> 01:02:09,400
we will have chef running in polling in

01:02:04,300 --> 01:02:11,680
the background for general uninteresting

01:02:09,400 --> 01:02:14,400
changes running package updates for

01:02:11,680 --> 01:02:16,870
security fixes or deploying new users

01:02:14,400 --> 01:02:18,700
cleaning out temp files or changing our

01:02:16,870 --> 01:02:20,620
log rotation timers stuff like that

01:02:18,700 --> 01:02:21,940
where the exact order those run in

01:02:20,620 --> 01:02:23,380
across the infrastructure doesn't matter

01:02:21,940 --> 01:02:25,180
at all and as long as it gets picked up

01:02:23,380 --> 01:02:27,310
within the same 15-minute window across

01:02:25,180 --> 01:02:28,360
the infrastructure chef can handle that

01:02:27,310 --> 01:02:31,060
on its own we don't need to orchestrate

01:02:28,360 --> 01:02:34,030
between systems for that but when we go

01:02:31,060 --> 01:02:36,790
to do deploy we globally disable all of

01:02:34,030 --> 01:02:39,910
the background chef clients and then we

01:02:36,790 --> 01:02:41,770
use we don't actually use fabric I use

01:02:39,910 --> 01:02:43,510
fabric the rest of the people don't like

01:02:41,770 --> 01:02:49,720
Python and they use other things that

01:02:43,510 --> 01:02:51,370
are wrong but I use fabric and we'll

01:02:49,720 --> 01:02:53,530
make sure that everything is running in

01:02:51,370 --> 01:02:56,050
the right order and that all of the

01:02:53,530 --> 01:02:58,930
necessary steps completes before you

01:02:56,050 --> 01:03:01,690
move on to the next step and so that is

01:02:58,930 --> 01:03:05,470
where you want to run chef client from

01:03:01,690 --> 01:03:12,700
fabric clear enough any other questions

01:03:05,470 --> 01:03:14,920
on why you dare use these together I'm

01:03:12,700 --> 01:03:18,370
collective isn't necessarily wrong it's

01:03:14,920 --> 01:03:20,500
closer to rights most of my co-workers

01:03:18,370 --> 01:03:23,320
have written some really gnarly hacks

01:03:20,500 --> 01:03:26,640
around knife SSH we have this thing

01:03:23,320 --> 01:03:30,850
called knife deploy which is unfortunate

01:03:26,640 --> 01:03:34,300
it kind of works but it's mostly SSH in

01:03:30,850 --> 01:03:35,860
a for loop which I the time of that is

01:03:34,300 --> 01:03:38,980
passed this time for something a little

01:03:35,860 --> 01:03:41,320
better and I will briefly mention just

01:03:38,980 --> 01:03:42,730
while I'm on on a podium and I get to

01:03:41,320 --> 01:03:45,430
rant and you get to listen to me

01:03:42,730 --> 01:03:47,140
there is a third piece of DevOps that I

01:03:45,430 --> 01:03:49,450
have not mentioned because it is not

01:03:47,140 --> 01:03:50,500
currently in existence really so we have

01:03:49,450 --> 01:03:53,080
configuration management we have

01:03:50,500 --> 01:03:55,120
orchestration but provisioning is the

01:03:53,080 --> 01:03:56,650
third leg of this which is starting the

01:03:55,120 --> 01:03:57,850
server's keeping them running making

01:03:56,650 --> 01:03:59,590
sure we have the right number of the

01:03:57,850 --> 01:04:01,300
right servers running nice ec2 is a

01:03:59,590 --> 01:04:03,300
provisioning tool so that is what you

01:04:01,300 --> 01:04:05,920
use to start a server and get it running

01:04:03,300 --> 01:04:07,569
but 19c 2 is a command-line tool

01:04:05,920 --> 01:04:09,040
service it doesn't care if the server

01:04:07,569 --> 01:04:10,480
goes down or if it doesn't boot

01:04:09,040 --> 01:04:12,250
correctly as many of you noticed it will

01:04:10,480 --> 01:04:15,160
happily sit there forever doesn't

01:04:12,250 --> 01:04:17,829
understand that you actually need to

01:04:15,160 --> 01:04:19,869
have five servers running of this type

01:04:17,829 --> 01:04:22,420
and ten servers of this type and so on

01:04:19,869 --> 01:04:24,220
as far as I know there is not really a

01:04:22,420 --> 01:04:26,940
very good open-source tool there's you

01:04:24,220 --> 01:04:29,740
know Amazon auto scaling groups and

01:04:26,940 --> 01:04:31,900
right scale and a few others which are

01:04:29,740 --> 01:04:33,309
highly proprietary but provisioning is

01:04:31,900 --> 01:04:38,609
not something there was an open-source

01:04:33,309 --> 01:04:43,690
project for someone should fix that we

01:04:38,609 --> 01:04:48,450
sort of hmm scaler is another example of

01:04:43,690 --> 01:04:52,359
a proprietary one hmm

01:04:48,450 --> 01:04:54,099
Juju's config management yeah that's it

01:04:52,359 --> 01:04:55,450
handles configuration of systems it

01:04:54,099 --> 01:04:56,619
doesn't understand the links between

01:04:55,450 --> 01:05:10,329
systems it doesn't understand starting

01:04:56,619 --> 01:05:12,400
and stopping systems yeah yes yes there

01:05:10,329 --> 01:05:13,599
there is a a provisioning component that

01:05:12,400 --> 01:05:17,700
fits in with juju but

01:05:13,599 --> 01:05:36,040
juju is cobbler web is very very nascent

01:05:17,700 --> 01:05:37,720
yes so you would not generally manage

01:05:36,040 --> 01:05:39,490
the deploy using fabric the way you

01:05:37,720 --> 01:05:42,010
would using Capistrano you do the deploy

01:05:39,490 --> 01:05:45,250
in chef chef has a resource called

01:05:42,010 --> 01:05:47,049
deploy which does yes it speaks actually

01:05:45,250 --> 01:05:48,900
it's the Capistrano folder layout

01:05:47,049 --> 01:05:52,770
because it's as good as anything else

01:05:48,900 --> 01:05:58,630
and so it has the same methodology of

01:05:52,770 --> 01:06:00,160
symlink back in case of error yes you

01:05:58,630 --> 01:06:01,869
would the general idea is to only use

01:06:00,160 --> 01:06:03,700
fabric for things which are purely

01:06:01,869 --> 01:06:06,849
procedural and a deploy is effectively

01:06:03,700 --> 01:06:09,010
declarative of because there is a

01:06:06,849 --> 01:06:11,500
resource which is deploy all you do is

01:06:09,010 --> 01:06:12,819
say if you look on the the back of the

01:06:11,500 --> 01:06:14,530
handout there's a summary of the options

01:06:12,819 --> 01:06:18,770
to it actually because I had wanted to

01:06:14,530 --> 01:06:21,240
cover it if I had time which I won't

01:06:18,770 --> 01:06:23,550
you just say what version you want what

01:06:21,240 --> 01:06:29,130
repo you want etc or it's a very

01:06:23,550 --> 01:06:30,180
declarative operation all right there

01:06:29,130 --> 01:06:32,849
are no more questions I'll move on to

01:06:30,180 --> 01:06:34,079
the last lab and then you can also just

01:06:32,849 --> 01:06:37,920
flag me down if you have any questions

01:06:34,079 --> 01:06:41,130
to ask while this is going on right so

01:06:37,920 --> 01:06:44,760
we want to play with using fabric on

01:06:41,130 --> 01:06:46,109
multiple servers so spawn a second ec2

01:06:44,760 --> 01:06:49,579
server the same way you spawn the first

01:06:46,109 --> 01:06:51,660
one and then either using pie chef or

01:06:49,579 --> 01:06:54,780
just using the host names directly

01:06:51,660 --> 01:06:57,210
because it's easier right something that

01:06:54,780 --> 01:07:01,010
will in parallel ssh using fabric to

01:06:57,210 --> 01:07:07,800
both machines and run sudo chef client

01:07:01,010 --> 01:07:10,170
fairly simple nevermind apparently I

01:07:07,800 --> 01:07:14,040
have now been completely blocked on my

01:07:10,170 --> 01:07:15,089
ec2 account so do not spawn a second

01:07:14,040 --> 01:07:16,200
instance but you can at least play with

01:07:15,089 --> 01:07:19,550
the existing one this is what I was

01:07:16,200 --> 01:07:26,810
afraid of because they get grumpy yes

01:07:19,550 --> 01:07:26,810

YouTube URL: https://www.youtube.com/watch?v=sdkAXM36C7M


