Title: Testing and Django
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Carl Meyer
A deep dive into writing tests with Django, covering Django's custom test-suite-runner and the testing utilities in Django, what all they actually do, how you should and shouldn't use them (and some you shouldn't use at all!). Also, guidel
Captions: 
	00:00:00,030 --> 00:00:04,830
and gentlemen I'd like to welcome you to

00:00:01,740 --> 00:00:08,660
the testing in Django talk presented by

00:00:04,830 --> 00:00:11,670
Carl Meyer this will be a 45-minute talk

00:00:08,660 --> 00:00:13,500
at the end you have questions would

00:00:11,670 --> 00:00:16,289
appreciate if you could come to this

00:00:13,500 --> 00:00:28,529
microphone right here to ask them thank

00:00:16,289 --> 00:00:31,109
you very much thanks good morning I'm

00:00:28,529 --> 00:00:34,380
Carl Meyer you can find the slides for

00:00:31,109 --> 00:00:35,760
this online the codes online so if you

00:00:34,380 --> 00:00:39,420
see something and it goes by too fast

00:00:35,760 --> 00:00:42,140
you can always find it I should say a

00:00:39,420 --> 00:00:45,030
couple things before I start the talk

00:00:42,140 --> 00:00:47,070
there is going to be a lot of opinions

00:00:45,030 --> 00:00:49,379
in this talk about better ways to do

00:00:47,070 --> 00:00:51,239
testing I'm not a certified expert I

00:00:49,379 --> 00:00:52,500
don't have any letters anywhere in my

00:00:51,239 --> 00:00:54,180
name that indicate that I know what I'm

00:00:52,500 --> 00:00:56,039
talking about I just a guy who writes a

00:00:54,180 --> 00:00:57,890
lot of tests so you should probably come

00:00:56,039 --> 00:01:00,750
up and argue with me about it afterwards

00:00:57,890 --> 00:01:02,640
also my opinions of course don't

00:01:00,750 --> 00:01:04,140
represent the opinions of other

00:01:02,640 --> 00:01:06,060
developers of Django or anything like

00:01:04,140 --> 00:01:07,830
that it's just what I happen to think a

00:01:06,060 --> 00:01:11,520
lot of the code examples in here are

00:01:07,830 --> 00:01:13,229
going to be using the new Django 1.4 RC

00:01:11,520 --> 00:01:14,580
and features in it so that's something

00:01:13,229 --> 00:01:20,490
you should be aware of if you haven't

00:01:14,580 --> 00:01:22,049
tried that out yet so let's begin with

00:01:20,490 --> 00:01:25,439
starting a project the way we Django

00:01:22,049 --> 00:01:27,750
people do this is actually already using

00:01:25,439 --> 00:01:31,140
a new Jenga 1.4 feature can anyone spot

00:01:27,750 --> 00:01:34,470
it it's about the size of one period

00:01:31,140 --> 00:01:35,880
it's the the ability to start a project

00:01:34,470 --> 00:01:39,390
in the current directory instead of

00:01:35,880 --> 00:01:41,159
creating a new subdirectory and I don't

00:01:39,390 --> 00:01:42,689
normally edit my settings files using

00:01:41,159 --> 00:01:44,939
said although that would be really cool

00:01:42,689 --> 00:01:47,189
if I did but it goes on a slide better

00:01:44,939 --> 00:01:49,799
than opening up an editor so I'm just

00:01:47,189 --> 00:01:52,350
setting the database back-end the sequel

00:01:49,799 --> 00:01:54,060
Lite for a new project I'm going to run

00:01:52,350 --> 00:01:55,920
manage dot PI tests this is like the

00:01:54,060 --> 00:01:57,840
default Django testing experience I've

00:01:55,920 --> 00:02:00,869
just started a project and I'm running

00:01:57,840 --> 00:02:02,009
managed PI tests and what happens well

00:02:00,869 --> 00:02:05,460
I've snipped it because it's really long

00:02:02,009 --> 00:02:07,710
but actually what happens in 1.4 RC is

00:02:05,460 --> 00:02:09,149
two failures which kind of means we

00:02:07,710 --> 00:02:11,670
aren't quite ready for the final release

00:02:09,149 --> 00:02:13,620
yet it also illustrates the point I'm

00:02:11,670 --> 00:02:17,250
about to make really well which is that

00:02:13,620 --> 00:02:19,379
Riaan 412 tests and it took 14 seconds

00:02:17,250 --> 00:02:21,000
to do it that's using an in-memory

00:02:19,379 --> 00:02:23,909
sequel light database which is the

00:02:21,000 --> 00:02:26,040
fastest way you can run Django's tests

00:02:23,909 --> 00:02:27,720
and it still took 14 seconds and I

00:02:26,040 --> 00:02:29,849
haven't written any code yet I haven't

00:02:27,720 --> 00:02:33,150
written any tests I haven't written any

00:02:29,849 --> 00:02:36,629
code to be tested that's not a good

00:02:33,150 --> 00:02:39,180
thing like we talked a lot about making

00:02:36,629 --> 00:02:41,430
tests fast there's no reason for Django

00:02:39,180 --> 00:02:43,230
to be wasting my time with tests that

00:02:41,430 --> 00:02:44,610
the Django core developers are the ones

00:02:43,230 --> 00:02:49,519
who ought to care whether those tests

00:02:44,610 --> 00:02:52,230
pass or fail and also the two failures

00:02:49,519 --> 00:02:55,980
the two failures occurred because two

00:02:52,230 --> 00:02:59,010
tests were added to Django's contrib and

00:02:55,980 --> 00:03:00,900
they were insufficiently isolated from

00:02:59,010 --> 00:03:03,390
the project settings they assumed the

00:03:00,900 --> 00:03:05,430
existence of two databases configured in

00:03:03,390 --> 00:03:07,409
the settings when we run the Django test

00:03:05,430 --> 00:03:09,269
suite we have two databases configured

00:03:07,409 --> 00:03:10,799
in the settings those tests pass so we

00:03:09,269 --> 00:03:13,049
never noticed this before releasing the

00:03:10,799 --> 00:03:16,010
release candidate when you run it from a

00:03:13,049 --> 00:03:19,650
fresh Django project because Django

00:03:16,010 --> 00:03:21,569
contribute in installed apps it runs

00:03:19,650 --> 00:03:23,579
those tests it doesn't have the other

00:03:21,569 --> 00:03:31,019
database and that's why those two tests

00:03:23,579 --> 00:03:34,319
fail there is a difference between an

00:03:31,019 --> 00:03:35,879
app that you create in your project for

00:03:34,319 --> 00:03:38,310
your site and you write the code and you

00:03:35,879 --> 00:03:41,489
write the tests and one that's either

00:03:38,310 --> 00:03:42,959
built into Django and contribute on off

00:03:41,489 --> 00:03:45,349
of the cheese shop and install in your

00:03:42,959 --> 00:03:48,569
project they aren't the same thing a

00:03:45,349 --> 00:03:51,329
third party app the only time I care

00:03:48,569 --> 00:03:53,669
about its tests is when I decide to use

00:03:51,329 --> 00:03:54,930
it I might run the tests if I'm being

00:03:53,669 --> 00:03:57,480
good to make sure that they actually

00:03:54,930 --> 00:03:58,709
pass when I upgrade it I might even run

00:03:57,480 --> 00:04:00,859
the tests on the new version to make

00:03:58,709 --> 00:04:03,269
sure they pass in between those points

00:04:00,859 --> 00:04:05,040
that code isn't going to be changing and

00:04:03,269 --> 00:04:06,510
I have no reason to waste my time

00:04:05,040 --> 00:04:07,769
running its tests and the same goes for

00:04:06,510 --> 00:04:10,169
the Django contribs

00:04:07,769 --> 00:04:14,010
it's a waste of my time to run the tests

00:04:10,169 --> 00:04:17,820
for Django contribute in my project

00:04:14,010 --> 00:04:19,949
every single time I run my tests one

00:04:17,820 --> 00:04:22,019
argument on the other side says well you

00:04:19,949 --> 00:04:24,330
maybe need an a test or two that

00:04:22,019 --> 00:04:27,650
verifies that your project is

00:04:24,330 --> 00:04:27,650
integrating properly with

00:04:27,710 --> 00:04:31,620
the truth of the matter is that those

00:04:30,090 --> 00:04:34,800
those tests if they're written in

00:04:31,620 --> 00:04:36,870
contributor they aren't isolated they

00:04:34,800 --> 00:04:38,909
will usually fail in a setup in an

00:04:36,870 --> 00:04:40,770
integration setup that actually works

00:04:38,909 --> 00:04:43,199
because you can integrate things in so

00:04:40,770 --> 00:04:44,520
many ways you can wrap the views and do

00:04:43,199 --> 00:04:46,889
your own custom thing outside of

00:04:44,520 --> 00:04:49,860
contributive use you can do funny things

00:04:46,889 --> 00:04:51,569
with the URLs you can customize it in so

00:04:49,860 --> 00:04:56,550
many ways that it's almost impossible

00:04:51,569 --> 00:04:58,919
for contribute then we'll actually

00:04:56,550 --> 00:05:01,319
reliably pass in your project so what

00:04:58,919 --> 00:05:03,770
happens in practice is we write naive

00:05:01,319 --> 00:05:05,939
tests and contribute fully isolated

00:05:03,770 --> 00:05:08,039
someone files a bug because the test

00:05:05,939 --> 00:05:09,990
fails in their project we isolate it

00:05:08,039 --> 00:05:12,539
over time those tests get more and more

00:05:09,990 --> 00:05:16,139
isolated so that they actually reliably

00:05:12,539 --> 00:05:17,370
pass in any project and at that point

00:05:16,139 --> 00:05:18,270
it's a waste of time for the project to

00:05:17,370 --> 00:05:19,680
be running them because they aren't

00:05:18,270 --> 00:05:21,180
testing anything related to that project

00:05:19,680 --> 00:05:24,930
they're just testing whether contribs

00:05:21,180 --> 00:05:26,789
Cod works this particular problem isn't

00:05:24,930 --> 00:05:28,740
a big problem right you can just do this

00:05:26,789 --> 00:05:31,249
you can wrap that up in a shell script

00:05:28,740 --> 00:05:31,249
and you're done

00:05:32,479 --> 00:05:40,110
there's another problem Jango insists

00:05:37,560 --> 00:05:44,399
that your tests all live in a tests

00:05:40,110 --> 00:05:45,509
module in each app now if you're writing

00:05:44,399 --> 00:05:47,580
the amount of tests that you probably

00:05:45,509 --> 00:05:50,610
should be writing that's either going to

00:05:47,580 --> 00:05:51,990
be one big file very quickly or you're

00:05:50,610 --> 00:05:54,330
going to want to split it out in two

00:05:51,990 --> 00:05:57,029
tests for specific aspects and then you

00:05:54,330 --> 00:05:59,189
end up with something like this where

00:05:57,029 --> 00:06:02,310
you have to import every test case from

00:05:59,189 --> 00:06:04,259
the sub modules into your test PI module

00:06:02,310 --> 00:06:07,289
for no other reason than so that Jango

00:06:04,259 --> 00:06:16,229
will find them this is 2012 that's

00:06:07,289 --> 00:06:18,060
ridiculous and the third issue I'll talk

00:06:16,229 --> 00:06:21,270
about with the current Jango test

00:06:18,060 --> 00:06:22,949
discovery is that it forces you to

00:06:21,270 --> 00:06:25,379
intermingle your test code in your non

00:06:22,949 --> 00:06:26,520
test code within your project this

00:06:25,379 --> 00:06:28,379
depends somewhat on how you structure

00:06:26,520 --> 00:06:31,770
things you could make your internal

00:06:28,379 --> 00:06:33,180
project code all one big app but if you

00:06:31,770 --> 00:06:36,330
do want to split up your models into

00:06:33,180 --> 00:06:38,279
some separate models files then you end

00:06:36,330 --> 00:06:40,420
up having to put a tests module in each

00:06:38,279 --> 00:06:42,640
app personally I prefer

00:06:40,420 --> 00:06:44,320
to have my code and my tests for my

00:06:42,640 --> 00:06:45,250
project in two separate places and not

00:06:44,320 --> 00:06:47,020
have them intermingled

00:06:45,250 --> 00:06:53,650
Django's test discovery doesn't give me

00:06:47,020 --> 00:06:56,800
that choice fortunately Django does make

00:06:53,650 --> 00:06:58,750
this easy to change you can use unit

00:06:56,800 --> 00:07:01,270
tests to discovery you could also use

00:06:58,750 --> 00:07:03,310
nose or pi dot tests or other discovery

00:07:01,270 --> 00:07:05,320
mechanisms I'll talk about unit tests

00:07:03,310 --> 00:07:08,050
too because it's built into Python it's

00:07:05,320 --> 00:07:10,120
built into Django so it's always there

00:07:08,050 --> 00:07:14,080
and it's something that we could

00:07:10,120 --> 00:07:16,240
potentially do in Django itself Django

00:07:14,080 --> 00:07:18,370
has a test run or setting so this is how

00:07:16,240 --> 00:07:23,950
much code it takes to make Django's test

00:07:18,370 --> 00:07:25,570
discovery good it's not very much this

00:07:23,950 --> 00:07:29,590
is just using unit tests to test

00:07:25,570 --> 00:07:31,270
discovery it adds a setting test

00:07:29,590 --> 00:07:32,770
discovery root there'd be other ways to

00:07:31,270 --> 00:07:35,560
do this but this is the simplest way and

00:07:32,770 --> 00:07:42,040
it discovers any tests underneath the

00:07:35,560 --> 00:07:43,150
certain root path you specify this is

00:07:42,040 --> 00:07:45,910
what you need to do in your settings

00:07:43,150 --> 00:07:47,620
file to make that work you figure out

00:07:45,910 --> 00:07:51,160
what the base path of your project is

00:07:47,620 --> 00:07:52,900
and set test discovery route to a tests

00:07:51,160 --> 00:07:54,250
directory for example and then you just

00:07:52,900 --> 00:08:03,880
point it to wherever you've placed that

00:07:54,250 --> 00:08:05,290
Runner class and we win now we can

00:08:03,880 --> 00:08:06,640
discover tests wherever we want them we

00:08:05,290 --> 00:08:11,290
aren't forced to put them in a certain

00:08:06,640 --> 00:08:12,700
specific module in a certain app and we

00:08:11,290 --> 00:08:14,170
can be much more flexible outrunning

00:08:12,700 --> 00:08:16,120
exactly the tests we want we aren't

00:08:14,170 --> 00:08:18,310
constrained by the Apple able concept to

00:08:16,120 --> 00:08:20,980
run all of our given apps tests we can

00:08:18,310 --> 00:08:23,920
run a specific test module a specific so

00:08:20,980 --> 00:08:26,500
we can say something like if I have all

00:08:23,920 --> 00:08:29,290
my tests under a single tests module I

00:08:26,500 --> 00:08:31,450
can say test quotes dot test views it's

00:08:29,290 --> 00:08:32,860
using real Python dotted paths to

00:08:31,450 --> 00:08:34,479
specify which tests which is much more

00:08:32,860 --> 00:08:40,390
flexible for getting exactly the tests

00:08:34,479 --> 00:08:42,610
you want and I think we may actually get

00:08:40,390 --> 00:08:44,229
this something like this in Django 1.5

00:08:42,610 --> 00:08:46,300
we have some things to figure out about

00:08:44,229 --> 00:08:47,710
making sure that people who like the

00:08:46,300 --> 00:08:49,300
current behavior can still get it if

00:08:47,710 --> 00:08:51,600
they want it but there's actually a

00:08:49,300 --> 00:08:55,140
ticket it's all accepted and stuff so

00:08:51,600 --> 00:08:55,140
you might get there

00:08:58,260 --> 00:09:01,779
okay before I talk about I'm going to

00:09:00,400 --> 00:09:03,310
talk a little bit about testing models

00:09:01,779 --> 00:09:04,690
and testing views and different kinds of

00:09:03,310 --> 00:09:07,779
testing might write before that I'm

00:09:04,690 --> 00:09:10,600
going to do a little review of two

00:09:07,779 --> 00:09:13,420
overarching types of tests these next

00:09:10,600 --> 00:09:15,220
few slides are really a much inferior

00:09:13,420 --> 00:09:17,529
Restatement of Gary Bernhardt's

00:09:15,220 --> 00:09:19,390
excellent fast test slow test talk from

00:09:17,529 --> 00:09:21,490
yesterday so you should really go check

00:09:19,390 --> 00:09:24,160
out the video for that talk but I'll try

00:09:21,490 --> 00:09:25,480
to do it in like two minutes here here

00:09:24,160 --> 00:09:28,600
are the two types of tests I'm talking

00:09:25,480 --> 00:09:30,880
about a unit test versus a test that had

00:09:28,600 --> 00:09:33,610
type of test that has more names than it

00:09:30,880 --> 00:09:37,000
needs system tests integration tests

00:09:33,610 --> 00:09:38,920
functional tests so a unit test tries to

00:09:37,000 --> 00:09:41,770
test one piece of code one unit of code

00:09:38,920 --> 00:09:43,180
in something like isolation the

00:09:41,770 --> 00:09:45,279
advantage of unit tests that they run

00:09:43,180 --> 00:09:47,940
run quickly and they're focused so when

00:09:45,279 --> 00:09:50,620
the test fails you should know like

00:09:47,940 --> 00:09:52,390
pretty much you know within five or ten

00:09:50,620 --> 00:09:54,100
lines of code what code failed or even

00:09:52,390 --> 00:09:55,720
less so you should be able to go very

00:09:54,100 --> 00:09:59,020
quickly from a test failure to the

00:09:55,720 --> 00:10:00,820
problematic code and unit tests help you

00:09:59,020 --> 00:10:02,860
structure your code better when you

00:10:00,820 --> 00:10:05,230
write a unit test if you're writing a

00:10:02,860 --> 00:10:08,050
test for a very small piece of code you

00:10:05,230 --> 00:10:09,820
have to think about what dependencies is

00:10:08,050 --> 00:10:11,920
that code have what pieces of the world

00:10:09,820 --> 00:10:13,690
what state do you have to set up before

00:10:11,920 --> 00:10:15,580
that piece of code can run into its

00:10:13,690 --> 00:10:18,400
thing and what do you need to check

00:10:15,580 --> 00:10:19,870
afterwards to cert that it worked and if

00:10:18,400 --> 00:10:21,730
there are too many of those in a unit

00:10:19,870 --> 00:10:23,830
test that tells you something about your

00:10:21,730 --> 00:10:26,050
code and you can say hey why does this

00:10:23,830 --> 00:10:27,970
code need ten different things to be set

00:10:26,050 --> 00:10:30,190
up before this code can run is there any

00:10:27,970 --> 00:10:32,320
way I can extract it even more so that I

00:10:30,190 --> 00:10:33,700
can test an even smaller unit that

00:10:32,320 --> 00:10:37,300
doesn't require me to set up so much

00:10:33,700 --> 00:10:39,250
state integration tests on the other

00:10:37,300 --> 00:10:40,540
hand are also very important there's

00:10:39,250 --> 00:10:42,400
this is not a better and worse thing

00:10:40,540 --> 00:10:44,400
integration tests test that the whole

00:10:42,400 --> 00:10:46,720
system works when you put it together

00:10:44,400 --> 00:10:48,940
they tend to be slow because they're

00:10:46,720 --> 00:10:50,500
running through the entire stack all

00:10:48,940 --> 00:10:52,150
your middleware all your contacts

00:10:50,500 --> 00:10:57,279
processors rendering templates going to

00:10:52,150 --> 00:10:58,390
the database the failures are useful in

00:10:57,279 --> 00:11:00,450
a sense they tell you something is

00:10:58,390 --> 00:11:02,950
broken and they'll often catch

00:11:00,450 --> 00:11:05,410
brokenness that a unit test won't catch

00:11:02,950 --> 00:11:07,510
because they catch bugs when different

00:11:05,410 --> 00:11:10,040
pieces of the system connect

00:11:07,510 --> 00:11:13,339
but those failures take longer to debug

00:11:10,040 --> 00:11:14,750
because often times you can have one

00:11:13,339 --> 00:11:16,420
thing in your codebase broken and all

00:11:14,750 --> 00:11:18,350
your integration tests will fail and

00:11:16,420 --> 00:11:21,350
doesn't tell you very much about where

00:11:18,350 --> 00:11:23,420
to go look for the problem most people

00:11:21,350 --> 00:11:27,170
write too many of these in my experience

00:11:23,420 --> 00:11:29,120
Jango projects and end up with very slow

00:11:27,170 --> 00:11:31,460
tests as a result Jango makes it very

00:11:29,120 --> 00:11:33,350
easy to just say oh I'll just test this

00:11:31,460 --> 00:11:35,540
with a test client and check that it

00:11:33,350 --> 00:11:37,910
worked and you end up with tests that

00:11:35,540 --> 00:11:40,040
take forever to run and are harder to

00:11:37,910 --> 00:11:42,380
make use of the results so you should

00:11:40,040 --> 00:11:43,610
definitely have these but chances are

00:11:42,380 --> 00:11:47,360
you should have fewer than your writing

00:11:43,610 --> 00:11:56,120
now and more unit tests all right let's

00:11:47,360 --> 00:11:58,190
talk about testing models as much as you

00:11:56,120 --> 00:12:01,850
can you want to write tests that don't

00:11:58,190 --> 00:12:03,020
hit the database because Eric Rose in

00:12:01,850 --> 00:12:05,600
his he also had a very good talk about

00:12:03,020 --> 00:12:09,040
testing yesterday and he had a great

00:12:05,600 --> 00:12:12,290
slide which I wish I had copied which is

00:12:09,040 --> 00:12:14,930
showing the latency of going to level

00:12:12,290 --> 00:12:18,200
one cache level two cache Ram or going

00:12:14,930 --> 00:12:20,690
to disk and it's like level one cache if

00:12:18,200 --> 00:12:21,890
you make level one cache one pixel then

00:12:20,690 --> 00:12:23,390
you know it goes up a little more for

00:12:21,890 --> 00:12:26,000
level two cache a little more for Ram

00:12:23,390 --> 00:12:27,470
and the latency of going to disk is like

00:12:26,000 --> 00:12:29,810
this massive block that goes down into

00:12:27,470 --> 00:12:31,400
the Earth's mantle so it's huge

00:12:29,810 --> 00:12:32,690
difference between doing things in

00:12:31,400 --> 00:12:38,900
memory and actually having to go to disk

00:12:32,690 --> 00:12:40,400
so Jango doesn't make it easy to write

00:12:38,900 --> 00:12:43,190
tests that avoid hitting the database

00:12:40,400 --> 00:12:45,950
because the way the model layer is

00:12:43,190 --> 00:12:48,140
structured encourages you to to tie your

00:12:45,950 --> 00:12:49,940
domain objects entirely to the database

00:12:48,140 --> 00:12:52,180
representation which has some advantages

00:12:49,940 --> 00:12:54,860
but it means you have to think about

00:12:52,180 --> 00:12:57,290
extracting out functionality in your

00:12:54,860 --> 00:12:59,870
domain layer that doesn't actually need

00:12:57,290 --> 00:13:02,150
to talk to the database and making that

00:12:59,870 --> 00:13:04,630
separately testable and I'll give an

00:13:02,150 --> 00:13:06,830
example of that in the next slide and

00:13:04,630 --> 00:13:12,260
that can really make a big difference in

00:13:06,830 --> 00:13:13,880
speeding up your tests one thing that

00:13:12,260 --> 00:13:15,530
some people try is to actually write

00:13:13,880 --> 00:13:17,120
tests that mock out the persistence

00:13:15,530 --> 00:13:20,660
layer or mock out the database to make

00:13:17,120 --> 00:13:20,960
faster tests my experience is that this

00:13:20,660 --> 00:13:24,620
is

00:13:20,960 --> 00:13:27,500
is a way to fail this is not not a good

00:13:24,620 --> 00:13:28,880
way to write tests because database

00:13:27,500 --> 00:13:30,560
persistence layers are very complex

00:13:28,880 --> 00:13:32,390
beasts and a lot of things can break and

00:13:30,560 --> 00:13:35,630
you'll end up writing fragile tests it's

00:13:32,390 --> 00:13:38,740
a very the the layer where your models

00:13:35,630 --> 00:13:41,570
actually talk to the database is not a

00:13:38,740 --> 00:13:43,370
small and well-defined API there's a lot

00:13:41,570 --> 00:13:45,170
of different stuff going on there and to

00:13:43,370 --> 00:13:47,570
try to mock all that out reliably is a

00:13:45,170 --> 00:13:51,170
lot of work and makes your tests less

00:13:47,570 --> 00:13:52,550
useful so it's better to try to try to

00:13:51,170 --> 00:13:53,960
write your code try to separate your

00:13:52,550 --> 00:13:56,890
code in a way that you can write more

00:13:53,960 --> 00:13:59,210
tests that don't touch the database

00:13:56,890 --> 00:14:01,550
here's a simple example that a very

00:13:59,210 --> 00:14:04,220
simple example so you've got a method on

00:14:01,550 --> 00:14:06,410
your model it does some complicated

00:14:04,220 --> 00:14:07,880
thing that has many many code paths and

00:14:06,410 --> 00:14:09,710
touches the state of the model lots of

00:14:07,880 --> 00:14:12,620
different ways and at the end you save

00:14:09,710 --> 00:14:14,210
the model all right that's fine you

00:14:12,620 --> 00:14:17,000
might want that semantics for the API

00:14:14,210 --> 00:14:18,770
that you're actually going to use but it

00:14:17,000 --> 00:14:21,560
means that you're going to probably if

00:14:18,770 --> 00:14:23,990
you're testing this method well you may

00:14:21,560 --> 00:14:25,640
write 20 tests of all those different

00:14:23,990 --> 00:14:27,560
code paths and all those different state

00:14:25,640 --> 00:14:29,060
combinations that could affect this

00:14:27,560 --> 00:14:29,990
model to make sure that this method

00:14:29,060 --> 00:14:32,060
really does what it's supposed to you

00:14:29,990 --> 00:14:34,600
and every single one of those 20 tests

00:14:32,060 --> 00:14:37,910
is going to write to the database and

00:14:34,600 --> 00:14:40,730
you could probably make those tests 20

00:14:37,910 --> 00:14:42,730
times faster if you just do this maybe

00:14:40,730 --> 00:14:45,320
more depends which database you're using

00:14:42,730 --> 00:14:47,090
just pull out the code that does all the

00:14:45,320 --> 00:14:49,280
state modification and all the

00:14:47,090 --> 00:14:50,900
complicated code paths and make it not

00:14:49,280 --> 00:14:53,570
dock to the database if it doesn't need

00:14:50,900 --> 00:14:56,810
to and then you can write all your 20

00:14:53,570 --> 00:14:59,540
tests for that separate method for that

00:14:56,810 --> 00:15:01,370
separate function and just one test that

00:14:59,540 --> 00:15:03,320
actually tests that yeah my actual frog

00:15:01,370 --> 00:15:06,770
negate method does save the model at the

00:15:03,320 --> 00:15:08,030
end and depending depending on the

00:15:06,770 --> 00:15:09,770
specifics of the code you may want to

00:15:08,030 --> 00:15:11,210
make those both methods of the model it

00:15:09,770 --> 00:15:13,160
can work either way or you may make it a

00:15:11,210 --> 00:15:15,230
standalone function that's not the key

00:15:13,160 --> 00:15:16,760
point the key point is you extract out

00:15:15,230 --> 00:15:17,720
the functionality that doesn't need to

00:15:16,760 --> 00:15:22,700
talk to the database from the

00:15:17,720 --> 00:15:24,110
functionality that does all right I got

00:15:22,700 --> 00:15:25,520
a couple boring slides here so you can

00:15:24,110 --> 00:15:26,690
fall asleep for these these are boring

00:15:25,520 --> 00:15:27,950
because I don't have any problem with

00:15:26,690 --> 00:15:32,720
how Django does things I think it's

00:15:27,950 --> 00:15:33,850
pretty much ok so the Django test case

00:15:32,720 --> 00:15:36,900
class

00:15:33,850 --> 00:15:39,280
runs each test within a transaction

00:15:36,900 --> 00:15:42,190
rolls back the transaction at the end of

00:15:39,280 --> 00:15:43,780
the test and monkey patches all the

00:15:42,190 --> 00:15:45,040
transaction functions so if you call

00:15:43,780 --> 00:15:47,650
them in your code they don't do anything

00:15:45,040 --> 00:15:50,130
and this makes the tests a lot faster

00:15:47,650 --> 00:15:53,890
than they used to be in Django 1.1

00:15:50,130 --> 00:15:55,390
because you don't have to truncate all

00:15:53,890 --> 00:15:56,710
the tables or recreate the state of the

00:15:55,390 --> 00:15:58,500
database between every test you can just

00:15:56,710 --> 00:16:00,880
let the database do that with a rollback

00:15:58,500 --> 00:16:02,740
the transaction test case on the other

00:16:00,880 --> 00:16:05,890
hand if you subclass your tests from

00:16:02,740 --> 00:16:08,830
that allows you to test transactions in

00:16:05,890 --> 00:16:11,170
your code because it doesn't wrap your

00:16:08,830 --> 00:16:12,850
tests in a transaction therefore it has

00:16:11,170 --> 00:16:15,010
to flush every database table after

00:16:12,850 --> 00:16:17,440
every test and it's really really really

00:16:15,010 --> 00:16:19,060
slow so of course again you want to have

00:16:17,440 --> 00:16:21,220
as few of these as possible only when

00:16:19,060 --> 00:16:29,200
you really need to test transactional

00:16:21,220 --> 00:16:32,620
behavior in your code another aspect of

00:16:29,200 --> 00:16:34,090
testing models or really testing

00:16:32,620 --> 00:16:36,220
anything in Django is you often need to

00:16:34,090 --> 00:16:38,830
set up some database state ahead of time

00:16:36,220 --> 00:16:41,620
and currently the way that the Django

00:16:38,830 --> 00:16:50,170
documentation points you to do that is

00:16:41,620 --> 00:16:51,370
with these fixtures don't do that if

00:16:50,170 --> 00:16:54,630
you've got a bunch of these in your code

00:16:51,370 --> 00:16:54,630
base burn them

00:17:01,000 --> 00:17:04,360
problems with fixtures I think this is

00:17:03,190 --> 00:17:06,720
probably the third talk now that's

00:17:04,360 --> 00:17:09,550
discussed this but just to say it again

00:17:06,720 --> 00:17:12,220
fixtures are very difficult to maintain

00:17:09,550 --> 00:17:14,380
an update in the naive case what you're

00:17:12,220 --> 00:17:17,620
doing is like your hand editing JSON

00:17:14,380 --> 00:17:19,180
that's terrible or you are having to do

00:17:17,620 --> 00:17:21,579
this complicated dance where you empty

00:17:19,180 --> 00:17:23,439
your database loading the fixture run

00:17:21,579 --> 00:17:24,910
some code to modify the state of the

00:17:23,439 --> 00:17:27,400
database then dump it out as a fixture

00:17:24,910 --> 00:17:28,810
that takes forever or if you're really

00:17:27,400 --> 00:17:32,140
clever you might be using something like

00:17:28,810 --> 00:17:34,270
the Django fixture generator app which

00:17:32,140 --> 00:17:37,480
allows you to write code that will then

00:17:34,270 --> 00:17:38,740
dumped out fixtures but at that point

00:17:37,480 --> 00:17:39,420
you might as well skip the fixture step

00:17:38,740 --> 00:17:42,280
right

00:17:39,420 --> 00:17:44,140
another thing that fixtures do is they

00:17:42,280 --> 00:17:47,230
tend to increase interdependence between

00:17:44,140 --> 00:17:48,730
tests because if you have a fixture with

00:17:47,230 --> 00:17:50,590
some data in it for your existing test

00:17:48,730 --> 00:17:53,470
and you need to add a new test and your

00:17:50,590 --> 00:17:55,420
new test really just needs one object in

00:17:53,470 --> 00:17:57,100
some particular configuration it's

00:17:55,420 --> 00:17:59,710
really tempting to just say oh I'll just

00:17:57,100 --> 00:18:01,720
add that into my fixture and now you've

00:17:59,710 --> 00:18:05,020
got some test totally unrelated test

00:18:01,720 --> 00:18:06,730
that happens to assert about a count of

00:18:05,020 --> 00:18:08,770
models and the new one that you've added

00:18:06,730 --> 00:18:10,660
now breaks that unrelated test there's

00:18:08,770 --> 00:18:12,850
no relationship between the code but

00:18:10,660 --> 00:18:15,520
you've introduced unnecessary coupling

00:18:12,850 --> 00:18:20,560
between the tests by sharing a fixture

00:18:15,520 --> 00:18:22,000
between them and also they're slow again

00:18:20,560 --> 00:18:24,220
because people tend to put more things

00:18:22,000 --> 00:18:26,470
into them than is strictly needed by

00:18:24,220 --> 00:18:28,870
every test using that fixture and every

00:18:26,470 --> 00:18:30,070
single test has to load that fixture now

00:18:28,870 --> 00:18:30,700
there's tricks you can use to help with

00:18:30,070 --> 00:18:32,830
this problem

00:18:30,700 --> 00:18:34,810
Eric Rose talked about that yesterday if

00:18:32,830 --> 00:18:36,940
you've got a huge code base like Mozilla

00:18:34,810 --> 00:18:38,530
does with a ton of fixtures those tricks

00:18:36,940 --> 00:18:43,300
are excellent if you're writing new code

00:18:38,530 --> 00:18:45,130
I think you just don't use fixtures the

00:18:43,300 --> 00:18:46,780
alternative to fixtures is model

00:18:45,130 --> 00:18:48,880
factories so the problem if you're

00:18:46,780 --> 00:18:50,740
trying to hear before you spend too long

00:18:48,880 --> 00:18:55,090
looking at that code the reason you use

00:18:50,740 --> 00:18:57,580
model factories is the problem with just

00:18:55,090 --> 00:18:59,320
using the ORM to set up your state and

00:18:57,580 --> 00:19:00,790
your tests is that often models have

00:18:59,320 --> 00:19:02,530
inter dependencies so it's a real pain

00:19:00,790 --> 00:19:03,760
if you have a model that has a foreign

00:19:02,530 --> 00:19:05,830
key to some other model has a foreign

00:19:03,760 --> 00:19:07,690
key to some other model if all you need

00:19:05,830 --> 00:19:10,570
is an instance of that first model to

00:19:07,690 --> 00:19:12,910
test you might be writing five or six

00:19:10,570 --> 00:19:14,110
ORM statements in every test just to set

00:19:12,910 --> 00:19:15,610
that up

00:19:14,110 --> 00:19:17,890
and people don't like to do that which

00:19:15,610 --> 00:19:19,299
is why they use fixtures instead the

00:19:17,890 --> 00:19:21,309
solution that is not fixed as a solution

00:19:19,299 --> 00:19:23,260
is factory functions that take care of

00:19:21,309 --> 00:19:25,960
that for you automatically so this is a

00:19:23,260 --> 00:19:28,450
very simple handwritten example that you

00:19:25,960 --> 00:19:31,090
might just write yourself and it's an

00:19:28,450 --> 00:19:34,150
example of a user profile model which

00:19:31,090 --> 00:19:35,559
depends on having a user model so what

00:19:34,150 --> 00:19:37,720
we do here is we set up some defaults

00:19:35,559 --> 00:19:39,370
you can pass in keyword arguments to

00:19:37,720 --> 00:19:41,590
override any of the defaults that you

00:19:39,370 --> 00:19:43,660
care about so if you don't care about

00:19:41,590 --> 00:19:45,370
the age or the address for a particular

00:19:43,660 --> 00:19:47,169
test you don't have to specify them even

00:19:45,370 --> 00:19:48,820
though they're required fields the

00:19:47,169 --> 00:19:51,790
factory function just takes care of that

00:19:48,820 --> 00:19:53,830
for you and if you don't care about any

00:19:51,790 --> 00:19:55,390
details of the user that the profile is

00:19:53,830 --> 00:19:57,370
tied to you don't have to worry about

00:19:55,390 --> 00:20:00,669
that either the factory function just

00:19:57,370 --> 00:20:04,330
creates a user for you and attaches it

00:20:00,669 --> 00:20:08,650
to the profile so you could use it like

00:20:04,330 --> 00:20:10,330
this you can just say profile because

00:20:08,650 --> 00:20:12,220
create profile the only thing I care

00:20:10,330 --> 00:20:13,720
about for this test is the age of the

00:20:12,220 --> 00:20:14,890
user I don't care about anything else so

00:20:13,720 --> 00:20:18,100
I don't have to say anything else my

00:20:14,890 --> 00:20:19,450
test is explicit about exactly the data

00:20:18,100 --> 00:20:21,460
it needs to be explicit about and no

00:20:19,450 --> 00:20:23,440
more and then I can make the assertion I

00:20:21,460 --> 00:20:26,049
need to make it's a very simple and

00:20:23,440 --> 00:20:29,980
clean test now there is one very bad

00:20:26,049 --> 00:20:32,850
thing about this test which is that this

00:20:29,980 --> 00:20:37,390
can vote property of my user profile

00:20:32,850 --> 00:20:39,970
doesn't require a saved model it

00:20:37,390 --> 00:20:42,160
required all it requires is a profile

00:20:39,970 --> 00:20:44,260
object and it checks the the age

00:20:42,160 --> 00:20:46,330
attribute right and I've written a test

00:20:44,260 --> 00:20:49,270
here if you look back at the factory

00:20:46,330 --> 00:20:53,080
function you calls profile objects

00:20:49,270 --> 00:20:56,230
create so I've actually saved my profile

00:20:53,080 --> 00:20:59,020
to the database unnecessarily simply in

00:20:56,230 --> 00:21:01,270
order to test an attribute of it a

00:20:59,020 --> 00:21:03,910
property of it that has no dependence on

00:21:01,270 --> 00:21:05,020
being saved to the database so that goes

00:21:03,910 --> 00:21:06,940
back to what we're talking about earlier

00:21:05,020 --> 00:21:08,620
what you need in order to fix that

00:21:06,940 --> 00:21:11,080
problem and write tests that don't touch

00:21:08,620 --> 00:21:13,540
the database when possible is a factory

00:21:11,080 --> 00:21:15,910
that can either create a saved object or

00:21:13,540 --> 00:21:17,590
an unsaved object that's one reason you

00:21:15,910 --> 00:21:19,750
might not want to write factories

00:21:17,590 --> 00:21:21,070
yourself like this you can do it but

00:21:19,750 --> 00:21:23,530
once you start getting into some of the

00:21:21,070 --> 00:21:26,350
features you want you might want to use

00:21:23,530 --> 00:21:28,000
a library and there are some there's one

00:21:26,350 --> 00:21:31,799
that I use is called factory boy

00:21:28,000 --> 00:21:34,389
it's a clone of Ruby's factory girl and

00:21:31,799 --> 00:21:36,429
this is what it looks like so instead of

00:21:34,389 --> 00:21:39,370
writing a function I subclass factory

00:21:36,429 --> 00:21:41,350
tell it which model I'm making a factory

00:21:39,370 --> 00:21:42,940
for and just set up some default values

00:21:41,350 --> 00:21:45,700
for all of the required fields of the

00:21:42,940 --> 00:21:47,919
model and I can do this sub factory

00:21:45,700 --> 00:21:50,440
thing for a foreign key so it'll know

00:21:47,919 --> 00:21:52,450
this presumes that I've defined user

00:21:50,440 --> 00:21:56,129
factory somewhere higher up in the

00:21:52,450 --> 00:21:58,809
codebase and it knows that it can create

00:21:56,129 --> 00:22:00,370
it can run the user factory to create a

00:21:58,809 --> 00:22:03,669
user to attach to the foreign key of my

00:22:00,370 --> 00:22:06,159
profile and I don't show it here but I

00:22:03,669 --> 00:22:07,840
can call profile factory create and that

00:22:06,159 --> 00:22:11,080
will actually save it to the database or

00:22:07,840 --> 00:22:12,610
I can write profile factory build and it

00:22:11,080 --> 00:22:14,409
will do the same thing build a profile

00:22:12,610 --> 00:22:15,669
but not save it to the database so you

00:22:14,409 --> 00:22:18,190
can be explicit in your tests about

00:22:15,669 --> 00:22:25,809
whether you need need to talk to the

00:22:18,190 --> 00:22:27,730
database or not I think we've mostly

00:22:25,809 --> 00:22:31,179
gone over this but advantages of

00:22:27,730 --> 00:22:33,370
factories over fixtures is that your

00:22:31,179 --> 00:22:35,169
test data is local to your test which

00:22:33,370 --> 00:22:37,269
makes your tests clearer and easier to

00:22:35,169 --> 00:22:38,830
maintain your test isn't depending on

00:22:37,269 --> 00:22:40,750
data that's often some totally separate

00:22:38,830 --> 00:22:42,879
fixture file you can see right there in

00:22:40,750 --> 00:22:44,259
the test here's where I create the data

00:22:42,879 --> 00:22:47,200
here's what the data looks like here's

00:22:44,259 --> 00:22:49,179
how I assert about the data they're

00:22:47,200 --> 00:22:50,379
easier to maintain you don't create

00:22:49,179 --> 00:22:53,080
extra data you don't need for that

00:22:50,379 --> 00:22:55,389
specific test and even sometimes people

00:22:53,080 --> 00:22:57,250
say oh I need fixtures because I have

00:22:55,389 --> 00:22:59,379
these tests that I need to run against

00:22:57,250 --> 00:23:01,240
this data set with thousands of models

00:22:59,379 --> 00:23:04,090
and there are five different kinds and

00:23:01,240 --> 00:23:05,559
it's very complicated data set but you

00:23:04,090 --> 00:23:08,139
don't need fixtures for that either you

00:23:05,559 --> 00:23:10,029
can write helper functions that use your

00:23:08,139 --> 00:23:12,549
factories to create a very complex data

00:23:10,029 --> 00:23:13,659
set and use that in your tests hopefully

00:23:12,549 --> 00:23:16,120
not very many tests because they'll be

00:23:13,659 --> 00:23:22,629
slow and that works just as well as a

00:23:16,120 --> 00:23:24,039
fixture is much easier to maintain on

00:23:22,629 --> 00:23:26,440
the issue of not talking to your

00:23:24,039 --> 00:23:27,730
database if you don't need to there's a

00:23:26,440 --> 00:23:29,409
way to impose that discipline on

00:23:27,730 --> 00:23:31,509
yourself because Jango makes it very

00:23:29,409 --> 00:23:32,679
easy to not be entirely clear when

00:23:31,509 --> 00:23:35,440
you're talking to the database and when

00:23:32,679 --> 00:23:38,379
you're not so it can be helpful to know

00:23:35,440 --> 00:23:39,789
for sure I don't think all of I don't

00:23:38,379 --> 00:23:41,379
think this entire test case should need

00:23:39,789 --> 00:23:41,860
to talk to the database so let me just

00:23:41,379 --> 00:23:43,780
make sure

00:23:41,860 --> 00:23:47,470
doesn't and have my code yell at me if

00:23:43,780 --> 00:23:48,549
it does obviously not for all of your

00:23:47,470 --> 00:23:51,070
test cases you're going to need to have

00:23:48,549 --> 00:23:53,380
tests to talk to the DV but this is how

00:23:51,070 --> 00:23:55,870
you can do it this uses Michael Ford's

00:23:53,380 --> 00:23:58,690
mock library which I always use in every

00:23:55,870 --> 00:24:02,020
project which is for creating mock

00:23:58,690 --> 00:24:04,090
objects and patching monkey-patching

00:24:02,020 --> 00:24:07,000
things for for the purposes of testing

00:24:04,090 --> 00:24:10,690
in this case here we're just creating a

00:24:07,000 --> 00:24:13,870
mock version of Django's database cursor

00:24:10,690 --> 00:24:16,179
wrapper and we're causing that cursor

00:24:13,870 --> 00:24:17,200
wrapper that mock cursor wrapper to just

00:24:16,179 --> 00:24:19,660
raise an error any time it's

00:24:17,200 --> 00:24:22,299
instantiated and then we patch the

00:24:19,660 --> 00:24:25,090
actual cursor wrapper class for this

00:24:22,299 --> 00:24:26,890
test case with our mock cursor wrapper

00:24:25,090 --> 00:24:28,450
and so any tests you write in that test

00:24:26,890 --> 00:24:38,230
case will immediately blow up if you try

00:24:28,450 --> 00:24:41,470
to talk to the database one other subtle

00:24:38,230 --> 00:24:44,169
thing in this slide I'm actually this no

00:24:41,470 --> 00:24:48,100
DB test case I'm actually inheriting it

00:24:44,169 --> 00:24:51,429
from Django utils unit test dot test

00:24:48,100 --> 00:24:53,820
case django utils unit test is Django's

00:24:51,429 --> 00:24:56,470
bundled version of the unit test library

00:24:53,820 --> 00:24:58,510
so when we import test case directly

00:24:56,470 --> 00:25:00,460
from there instead of from Django test

00:24:58,510 --> 00:25:03,100
we're getting a bear test case that

00:25:00,460 --> 00:25:05,260
doesn't do any of Django's fancy

00:25:03,100 --> 00:25:07,390
database setup and transactional

00:25:05,260 --> 00:25:09,130
handling and database teardown in

00:25:07,390 --> 00:25:10,570
practice that that's not really very

00:25:09,130 --> 00:25:12,940
important it doesn't save much time

00:25:10,570 --> 00:25:15,250
Django's database layer is smart enough

00:25:12,940 --> 00:25:16,809
that if you if your test actually didn't

00:25:15,250 --> 00:25:19,330
touch the database it doesn't bother

00:25:16,809 --> 00:25:20,890
even sending the transaction rollback so

00:25:19,330 --> 00:25:24,030
your tests are almost as fast either way

00:25:20,890 --> 00:25:27,340
but so it doesn't really matter you can

00:25:24,030 --> 00:25:28,630
you it doesn't really hurt to import it

00:25:27,340 --> 00:25:35,320
directly from unit tests if you want to

00:25:28,630 --> 00:25:36,820
you okay moving on to testing views we

00:25:35,320 --> 00:25:38,950
talked about unit tests versus system

00:25:36,820 --> 00:25:41,049
tests views are some of the hardest code

00:25:38,950 --> 00:25:44,890
to write unit tests for and the reason

00:25:41,049 --> 00:25:47,830
is view code in Django is where

00:25:44,890 --> 00:25:49,650
everything else comes together they have

00:25:47,830 --> 00:25:52,870
many collaborators or dependencies so

00:25:49,650 --> 00:25:55,000
views they require the requite the

00:25:52,870 --> 00:25:55,680
requests they usually use templates they

00:25:55,000 --> 00:25:57,600
usually talk to the

00:25:55,680 --> 00:25:59,400
debase pretty much everything else in

00:25:57,600 --> 00:26:01,590
your Django project comes together in

00:25:59,400 --> 00:26:03,000
your view code and that means that if

00:26:01,590 --> 00:26:05,910
you're going to write an isolated unit

00:26:03,000 --> 00:26:07,320
test you have a lot of things you have a

00:26:05,910 --> 00:26:09,840
lot of things that you need to set up

00:26:07,320 --> 00:26:12,170
yourself and the to allow that view code

00:26:09,840 --> 00:26:12,170
to run

00:26:12,440 --> 00:26:17,070
yeah they depend on your middleware

00:26:14,640 --> 00:26:20,580
sometimes the real solution to this is

00:26:17,070 --> 00:26:22,800
to write less view code one of the most

00:26:20,580 --> 00:26:25,590
common issues I see in Django code bases

00:26:22,800 --> 00:26:27,690
is views that have too much code in them

00:26:25,590 --> 00:26:29,310
because views are hard to test you

00:26:27,690 --> 00:26:31,260
should work really and because they know

00:26:29,310 --> 00:26:33,300
so much about everything else in your

00:26:31,260 --> 00:26:34,410
system it's very tempting to put code

00:26:33,300 --> 00:26:36,720
there because you don't have to think

00:26:34,410 --> 00:26:38,490
about the dependencies of your code you

00:26:36,720 --> 00:26:41,940
can just thoughtlessly write code that

00:26:38,490 --> 00:26:44,550
requires everything in the world and if

00:26:41,940 --> 00:26:46,050
you write less view code it forces you

00:26:44,550 --> 00:26:48,000
to pull out pieces of functionality and

00:26:46,050 --> 00:26:49,650
think about what does this code actually

00:26:48,000 --> 00:26:51,690
require does it actually need the

00:26:49,650 --> 00:26:54,750
request does it just need some specific

00:26:51,690 --> 00:26:56,610
bit of information from the request and

00:26:54,750 --> 00:26:59,070
pull that out into something that's much

00:26:56,610 --> 00:27:01,230
more unit testable and shrink your view

00:26:59,070 --> 00:27:04,050
code I don't like to see a view that's

00:27:01,230 --> 00:27:09,080
longer than like ten lines twelve lines

00:27:04,050 --> 00:27:13,830
of code if you do unit test your views

00:27:09,080 --> 00:27:15,930
here's some things that I do I don't

00:27:13,830 --> 00:27:18,660
know if you've seen requestfactory it

00:27:15,930 --> 00:27:21,060
doesn't get a lot of publicity but it's

00:27:18,660 --> 00:27:23,310
a very useful piece of the Django test

00:27:21,060 --> 00:27:26,340
support code it allows you to construct

00:27:23,310 --> 00:27:28,710
a fake request basically with a certain

00:27:26,340 --> 00:27:32,670
path and maybe certain post data or

00:27:28,710 --> 00:27:34,020
whatever and if it's a unit test you're

00:27:32,670 --> 00:27:36,030
not going to be using the Django test

00:27:34,020 --> 00:27:37,200
client that's not a unit test as soon as

00:27:36,030 --> 00:27:39,150
you're using the test client it's

00:27:37,200 --> 00:27:40,740
exercising your entire system through

00:27:39,150 --> 00:27:42,990
the URL routing through the middleware

00:27:40,740 --> 00:27:45,750
through your Conte thing that's not a

00:27:42,990 --> 00:27:51,600
unit test a unit test for view calls the

00:27:45,750 --> 00:27:52,740
view callable directly and also a side

00:27:51,600 --> 00:27:53,910
effect of that is that you're going to

00:27:52,740 --> 00:27:55,830
have to set up your dependencies

00:27:53,910 --> 00:27:57,840
explicitly for that test you're not

00:27:55,830 --> 00:27:59,010
going to get requests dot user magically

00:27:57,840 --> 00:28:00,450
you're not going to get request dot

00:27:59,010 --> 00:28:01,800
session magically because it ran through

00:28:00,450 --> 00:28:03,420
your session middleware and your auth

00:28:01,800 --> 00:28:06,510
middleware and all that you're going to

00:28:03,420 --> 00:28:08,750
have to manually put those things on to

00:28:06,510 --> 00:28:10,429
the request object

00:28:08,750 --> 00:28:12,340
so here's what a unit test of a view

00:28:10,429 --> 00:28:14,419
might look like a relatively simple one

00:28:12,340 --> 00:28:16,120
we use requestfactory

00:28:14,419 --> 00:28:18,440
to create a post request this is a

00:28:16,120 --> 00:28:22,130
hypothetical view that changes the

00:28:18,440 --> 00:28:23,419
locale by setting a session variable and

00:28:22,130 --> 00:28:25,280
we want to test that it actually does

00:28:23,419 --> 00:28:26,900
this if you post to this view should be

00:28:25,280 --> 00:28:29,240
a post of course because it's changing

00:28:26,900 --> 00:28:31,460
State so shouldn't be a get request if

00:28:29,240 --> 00:28:33,770
we post to this view we want to test

00:28:31,460 --> 00:28:35,990
that it actually does set the new locale

00:28:33,770 --> 00:28:39,620
into the users session so we create a

00:28:35,990 --> 00:28:41,510
request the API for Django's session

00:28:39,620 --> 00:28:43,520
module is essentially a dictionary API

00:28:41,510 --> 00:28:46,220
now technically it's a little more than

00:28:43,520 --> 00:28:47,809
that if your view is using doing

00:28:46,220 --> 00:28:50,030
something odd that it probably shouldn't

00:28:47,809 --> 00:28:52,490
like calling request session dot save

00:28:50,030 --> 00:28:53,690
explicitly this wouldn't work but for

00:28:52,490 --> 00:28:55,340
most uses of the session it's

00:28:53,690 --> 00:28:56,900
effectively a dictionary so we can just

00:28:55,340 --> 00:28:59,419
fake it we can just stick a dictionary

00:28:56,900 --> 00:29:01,520
onto the request explicitly setting up

00:28:59,419 --> 00:29:03,380
that piece of that dependency of the

00:29:01,520 --> 00:29:05,419
view it depends on there being request

00:29:03,380 --> 00:29:07,760
dot session then we just call the view

00:29:05,419 --> 00:29:09,470
function directly and we assert that

00:29:07,760 --> 00:29:11,750
request that session got the new key in

00:29:09,470 --> 00:29:15,710
it very simple that's what a unit test

00:29:11,750 --> 00:29:18,140
of a view looks like or you could just

00:29:15,710 --> 00:29:20,740
not do this I don't very much to be

00:29:18,140 --> 00:29:20,740
honest I

00:29:21,409 --> 00:29:25,010
I deal E maybe every piece of code in

00:29:23,570 --> 00:29:28,429
your project would be covered by unit

00:29:25,010 --> 00:29:31,970
tests I find it a better use of my time

00:29:28,429 --> 00:29:34,539
to work on writing very simple views and

00:29:31,970 --> 00:29:36,740
cover them with my system tests and

00:29:34,539 --> 00:29:41,240
focus on unit testing other parts of the

00:29:36,740 --> 00:29:42,530
code base your mileage may vary so

00:29:41,240 --> 00:29:44,990
here's the other side of testing views

00:29:42,530 --> 00:29:47,150
what most people actually do integration

00:29:44,990 --> 00:29:49,520
or system tests talk about a couple

00:29:47,150 --> 00:29:52,340
specific issues with that that I see

00:29:49,520 --> 00:29:56,150
commonly here's an example of trying to

00:29:52,340 --> 00:29:58,130
test view using the Jango test client

00:29:56,150 --> 00:30:01,190
and this is a view that processes a form

00:29:58,130 --> 00:30:03,470
set and so this is the kind of thing you

00:30:01,190 --> 00:30:06,140
tend to see you're posting to the view

00:30:03,470 --> 00:30:07,520
you're posting to that URL with all this

00:30:06,140 --> 00:30:09,890
stuff including a bunch of things that

00:30:07,520 --> 00:30:11,780
are actually sort of implementation

00:30:09,890 --> 00:30:13,909
details of form sets that end up being

00:30:11,780 --> 00:30:18,190
hidden inputs in your template like

00:30:13,909 --> 00:30:22,890
total forms initial forms max num forms

00:30:18,190 --> 00:30:25,020
when you write a test like this and your

00:30:22,890 --> 00:30:27,960
but yet edits your template and forgets

00:30:25,020 --> 00:30:29,670
to put in form set management form very

00:30:27,960 --> 00:30:31,850
easy mistake to make if you have a

00:30:29,670 --> 00:30:33,990
manual form layout

00:30:31,850 --> 00:30:35,370
your form doesn't work anymore if

00:30:33,990 --> 00:30:36,990
somebody actually tries to load in a

00:30:35,370 --> 00:30:38,430
browser and submit it it will fail

00:30:36,990 --> 00:30:40,080
because it doesn't have the required

00:30:38,430 --> 00:30:42,900
stuff but your test specified all that

00:30:40,080 --> 00:30:44,820
manually so it won't fail your test will

00:30:42,900 --> 00:30:48,330
keep passing and this is because the

00:30:44,820 --> 00:30:51,090
Django test client it's it's missing

00:30:48,330 --> 00:30:54,450
some features in my opinion that make it

00:30:51,090 --> 00:30:56,970
fall into a sour spot in between unit

00:30:54,450 --> 00:30:58,800
and system testing it's not a very good

00:30:56,970 --> 00:31:00,840
system test because it's very easy to

00:30:58,800 --> 00:31:02,940
break this view with a simple template

00:31:00,840 --> 00:31:04,380
change and your tests won't catch it so

00:31:02,940 --> 00:31:06,450
you aren't really testing the system end

00:31:04,380 --> 00:31:07,530
end it's also not a unit test because

00:31:06,450 --> 00:31:12,090
you're going through way too much of

00:31:07,530 --> 00:31:16,920
your code so it's it's a half way in

00:31:12,090 --> 00:31:19,140
between or it's a bad system test the

00:31:16,920 --> 00:31:21,840
alternative is to use something like web

00:31:19,140 --> 00:31:23,940
tests at the library written by ian

00:31:21,840 --> 00:31:26,610
baking and it has a couple advantages

00:31:23,940 --> 00:31:29,730
over the django test client one is that

00:31:26,610 --> 00:31:31,320
it knows a lot less about django which

00:31:29,730 --> 00:31:33,210
is a good thing because it means it

00:31:31,320 --> 00:31:34,860
builds in a lot fewer assumptions and it

00:31:33,210 --> 00:31:37,670
just talks to your app over the whiskey

00:31:34,860 --> 00:31:40,440
interface which is not coincidentally

00:31:37,670 --> 00:31:44,240
more like how all of your users will be

00:31:40,440 --> 00:31:46,980
talking to your app so it can do less

00:31:44,240 --> 00:31:49,080
complicated special casing of things in

00:31:46,980 --> 00:31:50,310
django and it's a little more naive and

00:31:49,080 --> 00:31:54,060
that's a good thing for making you write

00:31:50,310 --> 00:31:56,250
good tests it also is smart about HTML

00:31:54,060 --> 00:31:58,080
and specifically for testing of you like

00:31:56,250 --> 00:32:00,090
the one we just looked at it allows you

00:31:58,080 --> 00:32:03,090
to write a test that is much easier to

00:32:00,090 --> 00:32:04,650
write and more effective of a test which

00:32:03,090 --> 00:32:06,090
is a nice combination so this is

00:32:04,650 --> 00:32:08,160
essentially the same test we just looked

00:32:06,090 --> 00:32:10,380
at using the test client except using

00:32:08,160 --> 00:32:13,290
web tests and because web test is smart

00:32:10,380 --> 00:32:16,500
about HTML it'll actually parse the

00:32:13,290 --> 00:32:18,990
actual form markup in your view output

00:32:16,500 --> 00:32:20,910
and it can submit it back just like a

00:32:18,990 --> 00:32:23,070
browser would and it allows you to set

00:32:20,910 --> 00:32:25,560
the values for certain fields so in this

00:32:23,070 --> 00:32:27,120
particular test if you look carefully at

00:32:25,560 --> 00:32:31,140
what I've done here all it's really

00:32:27,120 --> 00:32:33,930
testing is adding a new step there's an

00:32:31,140 --> 00:32:36,530
existing step for this hypothetically a

00:32:33,930 --> 00:32:39,710
test case with steps that you that's

00:32:36,530 --> 00:32:41,630
using but you all you're doing is adding

00:32:39,710 --> 00:32:43,630
that steps one step in steps one

00:32:41,630 --> 00:32:45,440
expected all the rest is boilerplate and

00:32:43,630 --> 00:32:47,270
with web test you don't need that

00:32:45,440 --> 00:32:50,800
boilerplate you just say fill in these

00:32:47,270 --> 00:32:50,800
two fields on the form and submit it

00:32:54,580 --> 00:32:59,510
people disagree about this I think

00:32:57,520 --> 00:33:02,570
specifically with views that handle

00:32:59,510 --> 00:33:03,830
forms it's very easy in fact possibly

00:33:02,570 --> 00:33:06,320
one of the easiest way to break those

00:33:03,830 --> 00:33:08,330
views is with bad templates so if bad

00:33:06,320 --> 00:33:10,730
templates are the easiest way to break a

00:33:08,330 --> 00:33:12,200
view your tests ought to be testing that

00:33:10,730 --> 00:33:17,240
that template it ought to be testing

00:33:12,200 --> 00:33:19,730
that markup a very common pattern with

00:33:17,240 --> 00:33:23,090
the Django test client is people punt on

00:33:19,730 --> 00:33:24,500
testing the mark-up at all and they just

00:33:23,090 --> 00:33:29,000
test that a certain template was

00:33:24,500 --> 00:33:30,770
rendered and with certain context from

00:33:29,000 --> 00:33:32,540
my perspective the template being

00:33:30,770 --> 00:33:35,600
rendered in the context that was used or

00:33:32,540 --> 00:33:38,720
an implementation detail of the view the

00:33:35,600 --> 00:33:40,850
view when your system testing of you it

00:33:38,720 --> 00:33:43,700
takes as input a request and the output

00:33:40,850 --> 00:33:47,450
is an HTTP response with an h2 probably

00:33:43,700 --> 00:33:48,560
an HTML body and ideally those are the

00:33:47,450 --> 00:33:50,060
things you should be testing those

00:33:48,560 --> 00:33:52,300
inputs and those outputs and not the

00:33:50,060 --> 00:33:54,650
implementation details of how that

00:33:52,300 --> 00:33:55,940
response was generated of course you

00:33:54,650 --> 00:33:58,490
have to be smart about this you don't

00:33:55,940 --> 00:34:00,110
want to be testing irrelevant details of

00:33:58,490 --> 00:34:02,330
the mark-up that some designer is likely

00:34:00,110 --> 00:34:04,010
to change that won't break anything but

00:34:02,330 --> 00:34:06,400
will make your test fail so you have to

00:34:04,010 --> 00:34:08,899
test the things in the markup that

00:34:06,400 --> 00:34:11,060
actually could make or break the

00:34:08,899 --> 00:34:17,990
functioning of that view like form

00:34:11,060 --> 00:34:19,550
markup when I say system tests are

00:34:17,990 --> 00:34:22,330
easier and faster to write I mean with

00:34:19,550 --> 00:34:24,740
web tests versus the Django test client

00:34:22,330 --> 00:34:26,240
there's also a project called django web

00:34:24,740 --> 00:34:29,300
test that provides integration between

00:34:26,240 --> 00:34:30,860
django and web tests there's also a

00:34:29,300 --> 00:34:32,780
couple other nice features of web test

00:34:30,860 --> 00:34:35,330
that make it easier to test the mark-up

00:34:32,780 --> 00:34:38,870
output from your views it builds in

00:34:35,330 --> 00:34:40,790
beautiful soup or El XML and also JSON

00:34:38,870 --> 00:34:42,919
parsing so you can easily test a JSON

00:34:40,790 --> 00:34:45,020
response without having to parse the

00:34:42,919 --> 00:34:48,409
JSON yourself you can use beautiful

00:34:45,020 --> 00:34:50,919
super al XML to test the HTML that comes

00:34:48,409 --> 00:34:50,919
out of your view

00:34:54,369 --> 00:34:58,490
the last layer of testing will talk

00:34:56,720 --> 00:35:00,200
about this even higher level than

00:34:58,490 --> 00:35:02,510
something like web test is of course in

00:35:00,200 --> 00:35:06,730
browser testing using something like

00:35:02,510 --> 00:35:09,050
selenium in Django one point for

00:35:06,730 --> 00:35:11,359
selenium testing just got really really

00:35:09,050 --> 00:35:13,010
easy because I think one of the greatest

00:35:11,359 --> 00:35:18,410
things about Django 1.4 and there's a

00:35:13,010 --> 00:35:19,970
lot of nice things in Django 1.4 this is

00:35:18,410 --> 00:35:22,579
this is what it takes you pip install

00:35:19,970 --> 00:35:24,980
selenium the Python selenium driver and

00:35:22,579 --> 00:35:27,200
you inherit from live server test case

00:35:24,980 --> 00:35:28,849
which automatically takes care of

00:35:27,200 --> 00:35:31,010
running a server in a separate thread

00:35:28,849 --> 00:35:33,230
that your slam tests can talk to

00:35:31,010 --> 00:35:35,180
normally setting up in browser testing

00:35:33,230 --> 00:35:37,820
is a little bit fiddly because you have

00:35:35,180 --> 00:35:39,950
to first get your site running on some

00:35:37,820 --> 00:35:43,040
port and then tell selenium which port

00:35:39,950 --> 00:35:44,900
it's running on and pointed at and it

00:35:43,040 --> 00:35:48,410
takes a little bit of setting up Django

00:35:44,900 --> 00:35:51,200
just does all that for you now in 1.4 so

00:35:48,410 --> 00:35:53,240
here's an example of what a selenium

00:35:51,200 --> 00:35:56,510
test could look like this is testing in

00:35:53,240 --> 00:35:58,880
Firefox selenium comes with drivers for

00:35:56,510 --> 00:36:01,849
several different browsers so you could

00:35:58,880 --> 00:36:06,470
write import web drivers for whichever

00:36:01,849 --> 00:36:08,690
browser you want to test on and you've

00:36:06,470 --> 00:36:10,460
got a selenium test you can stick this

00:36:08,690 --> 00:36:12,349
in your tests and run manage PI tests

00:36:10,460 --> 00:36:14,270
and it will actually fire up Firefox and

00:36:12,349 --> 00:36:17,170
run through the steps and pass or fail

00:36:14,270 --> 00:36:17,170
it's very nice

00:36:19,569 --> 00:36:26,630
so here's here's my rules of thumb on

00:36:25,250 --> 00:36:28,550
what kinds of tests to write and how

00:36:26,630 --> 00:36:29,869
many and this is something where it's

00:36:28,550 --> 00:36:31,760
going to depend a lot on your project

00:36:29,869 --> 00:36:33,319
you may have different opinions I think

00:36:31,760 --> 00:36:36,920
you won't go real far wrong if you do

00:36:33,319 --> 00:36:40,760
something like this right system tests

00:36:36,920 --> 00:36:42,740
for your views writes the selenium tests

00:36:40,760 --> 00:36:44,450
that you need to test interactions

00:36:42,740 --> 00:36:46,940
between client-side code and server-side

00:36:44,450 --> 00:36:49,460
code write as few of both of those as

00:36:46,940 --> 00:36:52,400
you can I'll show in the next slide what

00:36:49,460 --> 00:36:54,079
that looks like and everything else

00:36:52,400 --> 00:36:56,119
write unit tests and I'm not super

00:36:54,079 --> 00:36:58,880
strict about what a unit test is for

00:36:56,119 --> 00:37:01,130
instance if I'm unit testing a model

00:36:58,880 --> 00:37:03,089
form I probably won't mock out the model

00:37:01,130 --> 00:37:05,160
because model forms and mod

00:37:03,089 --> 00:37:06,329
are very closely tied so I'll just go

00:37:05,160 --> 00:37:09,119
ahead and let that model form

00:37:06,329 --> 00:37:10,619
collaborate with the real model but I'll

00:37:09,119 --> 00:37:12,329
still call that a unit test I'm trying

00:37:10,619 --> 00:37:14,219
to focus testing on a specific part of

00:37:12,329 --> 00:37:16,140
the model form so it's not super strict

00:37:14,219 --> 00:37:20,579
they still tend to be relatively fast

00:37:16,140 --> 00:37:23,729
tests and one guideline that I find very

00:37:20,579 --> 00:37:26,849
helpful is to think about testing each

00:37:23,729 --> 00:37:28,769
branch in your code at the level where

00:37:26,849 --> 00:37:30,779
that branch occurs this may seem obvious

00:37:28,769 --> 00:37:33,930
but I see a lot of tests that don't do

00:37:30,779 --> 00:37:36,150
this so the next slide will go a little

00:37:33,930 --> 00:37:38,999
more in detail into that another

00:37:36,150 --> 00:37:41,579
guideline this depends on how strict you

00:37:38,999 --> 00:37:43,799
want to get one assert per test case

00:37:41,579 --> 00:37:45,839
method or one action per test case

00:37:43,799 --> 00:37:48,329
method one assert per test case method

00:37:45,839 --> 00:37:50,009
is very strict ends up that you write a

00:37:48,329 --> 00:37:52,229
lot more tests but the tests will tell

00:37:50,009 --> 00:37:54,299
you very specifically what failed if you

00:37:52,229 --> 00:37:57,029
have multiple asserts of course the

00:37:54,299 --> 00:37:58,200
danger is your first assert fails and

00:37:57,029 --> 00:38:00,749
you don't know whether the second one

00:37:58,200 --> 00:38:02,279
would have failed or succeeded so you

00:38:00,749 --> 00:38:04,229
fix the first one you run your tests

00:38:02,279 --> 00:38:07,979
again they fail again because the second

00:38:04,229 --> 00:38:09,059
assert failed you have a longer cycle to

00:38:07,979 --> 00:38:11,579
fix those tests

00:38:09,059 --> 00:38:13,920
I don't stick strictly to a single

00:38:11,579 --> 00:38:15,229
assert for test case method I try to

00:38:13,920 --> 00:38:18,390
make sure that each test case method

00:38:15,229 --> 00:38:19,920
tests one action and then maybe asserts

00:38:18,390 --> 00:38:21,569
a few different things about the results

00:38:19,920 --> 00:38:24,569
of that one action what you really

00:38:21,569 --> 00:38:25,950
should avoid is multi-step tests they're

00:38:24,569 --> 00:38:28,259
tempting to write because you don't want

00:38:25,950 --> 00:38:30,420
to do your setup multiple times so you

00:38:28,259 --> 00:38:31,710
do one thing and then you make a little

00:38:30,420 --> 00:38:33,299
tweak and you search some more things

00:38:31,710 --> 00:38:37,769
then you take another action you search

00:38:33,299 --> 00:38:39,719
some more things those tests end up

00:38:37,769 --> 00:38:44,009
becoming much harder to figure out what

00:38:39,719 --> 00:38:45,839
failed and what you need to address all

00:38:44,009 --> 00:38:47,249
right so here's an example the the

00:38:45,839 --> 00:38:51,930
fourth guideline they are testing each

00:38:47,249 --> 00:38:53,400
case where it occurs this is a view if I

00:38:51,930 --> 00:38:54,749
were looking at tests for a Django

00:38:53,400 --> 00:38:56,969
project that contained this view there's

00:38:54,749 --> 00:39:00,660
a very typical Django Form handling view

00:38:56,969 --> 00:39:04,349
it constructs the form it redirects if

00:39:00,660 --> 00:39:06,210
the form is valid etc etc I wouldn't

00:39:04,349 --> 00:39:09,089
ever want to see more than three tests

00:39:06,210 --> 00:39:11,219
at the system level for this view

00:39:09,089 --> 00:39:14,579
because there's three code paths you

00:39:11,219 --> 00:39:16,610
have the first time load you have the

00:39:14,579 --> 00:39:18,580
submitted with errors

00:39:16,610 --> 00:39:21,440
and you have the submitted successfully

00:39:18,580 --> 00:39:23,240
those three cases cover every code path

00:39:21,440 --> 00:39:24,950
every branch in that view you'll have

00:39:23,240 --> 00:39:26,930
100% branch coverage in that view with

00:39:24,950 --> 00:39:29,450
those three tests if you have some

00:39:26,930 --> 00:39:32,660
special handling like in the quote form

00:39:29,450 --> 00:39:34,370
or in your quote model that like there's

00:39:32,660 --> 00:39:36,770
some specific validation these two

00:39:34,370 --> 00:39:38,900
fields have to both be there that values

00:39:36,770 --> 00:39:41,720
depend on each other you don't test that

00:39:38,900 --> 00:39:43,490
with a test using the Django test client

00:39:41,720 --> 00:39:45,020
or using web tests at the system test

00:39:43,490 --> 00:39:47,720
level because that code isn't at this

00:39:45,020 --> 00:39:49,430
level you test that special case in a

00:39:47,720 --> 00:39:51,730
unit test of your form class or your

00:39:49,430 --> 00:39:54,230
model class or wherever that case occurs

00:39:51,730 --> 00:39:55,880
well the only system tests you write are

00:39:54,230 --> 00:40:03,950
the ones that are reflected in branches

00:39:55,880 --> 00:40:05,210
of your view code all right going in a

00:40:03,950 --> 00:40:11,330
totally different direction for the last

00:40:05,210 --> 00:40:13,610
couple minutes we had a whole series of

00:40:11,330 --> 00:40:16,850
commits in Django leading up to Django

00:40:13,610 --> 00:40:19,520
1.3 with the commit tagline we have

00:40:16,850 --> 00:40:22,400
always been at war with doc tests early

00:40:19,520 --> 00:40:25,700
on Django itself was tested very heavily

00:40:22,400 --> 00:40:26,990
using doc tests I'm assuming that you

00:40:25,700 --> 00:40:31,820
all have seen doc tests or know what

00:40:26,990 --> 00:40:35,000
they are they're a way to turn a Python

00:40:31,820 --> 00:40:37,760
code example in a text file or a doc

00:40:35,000 --> 00:40:40,130
string into an executive ol test I won't

00:40:37,760 --> 00:40:42,200
go into detail as to why it was a

00:40:40,130 --> 00:40:46,400
problem to do too much testing with doc

00:40:42,200 --> 00:40:47,810
tests just say that the hatred of doc

00:40:46,400 --> 00:40:50,660
tests in the Django community at this

00:40:47,810 --> 00:40:54,220
point is not entirely fair doc tests are

00:40:50,660 --> 00:40:56,840
great for testing your documentation and

00:40:54,220 --> 00:40:58,490
it's a lot easier than most people think

00:40:56,840 --> 00:41:03,410
to integrate that into your Django test

00:40:58,490 --> 00:41:05,950
suite so you have Sphinx Doc's right the

00:41:03,410 --> 00:41:05,950
answer is yes

00:41:06,700 --> 00:41:11,180
and you probably have some API code

00:41:09,440 --> 00:41:12,710
examples in your Sphinx Docs for if you

00:41:11,180 --> 00:41:16,250
have a django library or something or

00:41:12,710 --> 00:41:19,099
even for your project and this is all

00:41:16,250 --> 00:41:20,960
the code it takes to turn those API code

00:41:19,099 --> 00:41:23,810
examples in your documentation into

00:41:20,960 --> 00:41:25,400
tests that will actually run and verify

00:41:23,810 --> 00:41:30,050
that your code examples stay up to date

00:41:25,400 --> 00:41:33,099
with your code you just instantiate a

00:41:30,050 --> 00:41:35,510
doc file suite and point it to the to a

00:41:33,099 --> 00:41:42,800
Sphynx text file that has some code

00:41:35,510 --> 00:41:45,920
examples in it and it will just work if

00:41:42,800 --> 00:41:48,530
you go too far with this you can very

00:41:45,920 --> 00:41:50,390
quickly have bad documentation if you

00:41:48,530 --> 00:41:52,730
start thinking of them as tests of your

00:41:50,390 --> 00:41:57,109
code and trying to put every little edge

00:41:52,730 --> 00:41:59,060
case and an odd situation into these doc

00:41:57,109 --> 00:42:00,980
test files you're going to have bad

00:41:59,060 --> 00:42:02,990
documentation the point of this is to

00:42:00,980 --> 00:42:04,579
have good documentation and make sure

00:42:02,990 --> 00:42:10,670
that it's not getting out of date with

00:42:04,579 --> 00:42:14,540
your code one last thing just because

00:42:10,670 --> 00:42:15,829
it's a nice new thing in Django 1.4 you

00:42:14,540 --> 00:42:18,560
have a setting in your code we'll say

00:42:15,829 --> 00:42:20,869
it's called allow comments this is the

00:42:18,560 --> 00:42:22,910
way people always used to do testing

00:42:20,869 --> 00:42:26,089
that depends on a certain value of that

00:42:22,910 --> 00:42:27,800
setting you want to do a test that

00:42:26,089 --> 00:42:30,380
comments are allowed when the allow

00:42:27,800 --> 00:42:33,230
comments setting is true so you have to

00:42:30,380 --> 00:42:34,550
do this whole try finally thing you

00:42:33,230 --> 00:42:37,400
could use mock that would be a better

00:42:34,550 --> 00:42:38,839
solution than this in Django 1.4 you

00:42:37,400 --> 00:42:42,290
don't have to use mock because we

00:42:38,839 --> 00:42:43,970
actually have an override settings

00:42:42,290 --> 00:42:46,670
decorator that handles this particular

00:42:43,970 --> 00:42:54,430
case quite well so that can make some of

00:42:46,670 --> 00:42:54,430
your tests nicer that's all I got

00:43:17,910 --> 00:43:24,780
um I would like to ask if you have any

00:43:21,020 --> 00:43:32,849
specific comments on any of the various

00:43:24,780 --> 00:43:34,530
jingo nose modules that are around I've

00:43:32,849 --> 00:43:38,369
used Jango nose I think that's the main

00:43:34,530 --> 00:43:41,130
one personally I'm pretty happy with a

00:43:38,369 --> 00:43:43,319
unit test to test discovery and the way

00:43:41,130 --> 00:43:45,089
it does things I don't have major pain

00:43:43,319 --> 00:43:46,950
points that nose solves I know some

00:43:45,089 --> 00:43:47,819
people do so I don't have a strong

00:43:46,950 --> 00:43:49,980
opinion about that

00:43:47,819 --> 00:43:51,359
I think Jango nose works fine Django's

00:43:49,980 --> 00:43:53,039
test run or setting makes it pretty easy

00:43:51,359 --> 00:43:59,789
to swap in whatever test runner you like

00:43:53,039 --> 00:44:01,520
so do you have any of times where you

00:43:59,789 --> 00:44:03,299
feel you need to test the form set

00:44:01,520 --> 00:44:05,970
implementation like you don't want to go

00:44:03,299 --> 00:44:08,849
through a full system test with selenium

00:44:05,970 --> 00:44:13,079
but you want to actually test something

00:44:08,849 --> 00:44:15,599
that's in a view well if I'm testing

00:44:13,079 --> 00:44:17,369
something in the form set well I would

00:44:15,599 --> 00:44:19,349
want to test it with a unit test of the

00:44:17,369 --> 00:44:22,230
form set class more something that

00:44:19,349 --> 00:44:26,789
requires the interaction between the

00:44:22,230 --> 00:44:27,960
form set and the view so like that do

00:44:26,789 --> 00:44:30,599
you think that's just a code smell and

00:44:27,960 --> 00:44:32,190
it needs refactoring I'm not sure I'm

00:44:30,599 --> 00:44:34,799
not sure what kind of situation you're

00:44:32,190 --> 00:44:36,390
talking about like well I just do you

00:44:34,799 --> 00:44:39,569
think there are situations where that's

00:44:36,390 --> 00:44:41,299
a reasonable way to go about it or do

00:44:39,569 --> 00:44:45,180
you think the second you start putting

00:44:41,299 --> 00:44:46,529
total forms in your test suite that's a

00:44:45,180 --> 00:44:49,950
sign that you need to look at

00:44:46,529 --> 00:44:52,020
refactoring no you might have to put

00:44:49,950 --> 00:44:54,599
total forms in your test suite in a unit

00:44:52,020 --> 00:44:56,400
test of a form set class a custom form

00:44:54,599 --> 00:44:58,680
set class that does some custom things I

00:44:56,400 --> 00:45:02,430
just I wouldn't want to see it in a test

00:44:58,680 --> 00:45:05,190
of a view the exception for that is like

00:45:02,430 --> 00:45:06,720
if you have I mean if you have if you

00:45:05,190 --> 00:45:11,220
have JavaScript that's like dynamically

00:45:06,720 --> 00:45:15,029
adding new form set classes or new sorry

00:45:11,220 --> 00:45:16,289
new forms in the form set first first of

00:45:15,029 --> 00:45:17,490
all you want to do the basic test for

00:45:16,289 --> 00:45:20,130
that in selenium to test that the

00:45:17,490 --> 00:45:23,130
JavaScript actually works if you have

00:45:20,130 --> 00:45:26,789
some edge cases in the server-side code

00:45:23,130 --> 00:45:30,329
that's handling like different cases

00:45:26,789 --> 00:45:31,200
where maybe the initial forms or total

00:45:30,329 --> 00:45:32,730
forms comes in with a

00:45:31,200 --> 00:45:34,200
long numbers or whatever that should be

00:45:32,730 --> 00:45:35,970
tested in unit tests of the form set

00:45:34,200 --> 00:45:37,349
code that's handling that so you have

00:45:35,970 --> 00:45:39,030
some unit test of the form set code to

00:45:37,349 --> 00:45:40,500
handle all those edge cases and you have

00:45:39,030 --> 00:45:41,640
a few selenium tests to test that the

00:45:40,500 --> 00:45:50,400
whole thing actually works with the

00:45:41,640 --> 00:45:52,500
javascript that make sense first of i'd

00:45:50,400 --> 00:45:54,089
like to thank you for your work on pip

00:45:52,500 --> 00:45:55,980
and virtue and i can't really I can't

00:45:54,089 --> 00:45:57,960
say like how much time and then

00:45:55,980 --> 00:46:01,500
headaches you'll see to us I've saved me

00:45:57,960 --> 00:46:03,930
so my question is um like Kenya a good

00:46:01,500 --> 00:46:06,710
developer I try not to repeat myself so

00:46:03,930 --> 00:46:08,910
I try to make reuse reusable apps

00:46:06,710 --> 00:46:12,060
whenever I can do you have any general

00:46:08,910 --> 00:46:14,730
advice on how to test like these modular

00:46:12,060 --> 00:46:18,089
apps I mean especially if I intend to

00:46:14,730 --> 00:46:22,050
put them on the automation my advice on

00:46:18,089 --> 00:46:23,700
testing reusable apps in Django 1 don't

00:46:22,050 --> 00:46:25,859
make the mistake of actually putting the

00:46:23,700 --> 00:46:27,869
tests in the test stop I of your app

00:46:25,859 --> 00:46:28,920
because then you'll trigger the problem

00:46:27,869 --> 00:46:31,800
where everybody else is running your

00:46:28,920 --> 00:46:33,839
tests when they don't need to be instead

00:46:31,800 --> 00:46:37,230
put them in like a separate directory

00:46:33,839 --> 00:46:38,910
that you can and then have a test runner

00:46:37,230 --> 00:46:41,250
just for that reusable app it's very

00:46:38,910 --> 00:46:44,010
easy to write like a 10 line test runner

00:46:41,250 --> 00:46:46,109
script that sets up the settings that

00:46:44,010 --> 00:46:48,750
your test for you reusable app needs and

00:46:46,109 --> 00:46:50,099
can set up installed apps with something

00:46:48,750 --> 00:46:51,660
that isn't really a nap but happens to

00:46:50,099 --> 00:46:53,220
have your tests in it just sort of fool

00:46:51,660 --> 00:46:54,599
the default Django test runner into

00:46:53,220 --> 00:46:59,910
actually running those tests for your

00:46:54,599 --> 00:47:01,500
app and then other than that I don't

00:46:59,910 --> 00:47:04,130
know I'd have to have more specific

00:47:01,500 --> 00:47:04,130
questions but

00:47:07,120 --> 00:47:09,180

YouTube URL: https://www.youtube.com/watch?v=ickNQcNXiS4


