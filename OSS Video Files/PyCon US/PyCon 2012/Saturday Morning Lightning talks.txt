Title: Saturday Morning Lightning talks
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	
Captions: 
	00:00:00,290 --> 00:00:04,560
thank you excellent it's so good to see

00:00:03,300 --> 00:00:06,720
everybody early in the morning on

00:00:04,560 --> 00:00:08,460
saturday only an app icon conference so

00:00:06,720 --> 00:00:10,170
i have a brief talk about to get talk

00:00:08,460 --> 00:00:11,759
for five minutes in a long time so we'll

00:00:10,170 --> 00:00:13,019
see if i can do it i want to talk a

00:00:11,759 --> 00:00:16,890
little project of it working on for

00:00:13,019 --> 00:00:19,650
about those six weeks off and on about a

00:00:16,890 --> 00:00:20,820
compiler for python now there's a lot of

00:00:19,650 --> 00:00:22,740
those out there other people have talked

00:00:20,820 --> 00:00:24,750
about it before but this is for numpy

00:00:22,740 --> 00:00:26,670
users people that are currently using a

00:00:24,750 --> 00:00:28,650
whole load of c extensions and a whole

00:00:26,670 --> 00:00:30,630
lot of code do the data analysis and

00:00:28,650 --> 00:00:32,550
sometimes they want to be able to write

00:00:30,630 --> 00:00:33,690
Python code that goes fast not all the

00:00:32,550 --> 00:00:35,190
time does it matter if it's all fast

00:00:33,690 --> 00:00:36,750
actually numpy is pretty fast in a lot

00:00:35,190 --> 00:00:38,160
of cases but there are occasions they

00:00:36,750 --> 00:00:40,050
want to write loops and they wanted to

00:00:38,160 --> 00:00:42,540
go really fast pi PI doesn't cut it for

00:00:40,050 --> 00:00:45,059
us it does it extend enough so what do

00:00:42,540 --> 00:00:46,320
we do there's a little project with

00:00:45,059 --> 00:00:48,030
starting the basically can do dynamic

00:00:46,320 --> 00:00:50,190
compilation of Python code and there's a

00:00:48,030 --> 00:00:51,750
lot of places in the numpy runtime we're

00:00:50,190 --> 00:00:54,000
a little function pointer that is

00:00:51,750 --> 00:00:56,039
machine optimized would come in handy

00:00:54,000 --> 00:00:57,239
and you take Python code stick it

00:00:56,039 --> 00:00:59,219
through the stead of a compilation and

00:00:57,239 --> 00:01:01,890
stick it into a runtime like a universal

00:00:59,219 --> 00:01:03,899
function for numpy maybe fancy indexing

00:01:01,890 --> 00:01:05,610
fast indexing and memory filters maybe

00:01:03,899 --> 00:01:07,740
text readers with an IO transformation

00:01:05,610 --> 00:01:11,130
that can happen at sea or a machine

00:01:07,740 --> 00:01:13,290
speeds side pi also needs a Python

00:01:11,130 --> 00:01:15,150
compiler for things like the optimized

00:01:13,290 --> 00:01:16,380
module for callbacks for integration

00:01:15,150 --> 00:01:18,150
foreigner difference equation

00:01:16,380 --> 00:01:19,619
immigration for special functions you

00:01:18,150 --> 00:01:22,740
want to write in just Python instead of

00:01:19,619 --> 00:01:24,540
using old fortran code o de integration

00:01:22,740 --> 00:01:26,130
and then writing more of sci fi the high

00:01:24,540 --> 00:01:28,200
level the phenomena I want to point out

00:01:26,130 --> 00:01:31,590
too is that scythe on which is basically

00:01:28,200 --> 00:01:33,540
decorated python that compiles to c code

00:01:31,590 --> 00:01:35,220
is in active use in a scientific

00:01:33,540 --> 00:01:36,630
computing pythons the psychic Python

00:01:35,220 --> 00:01:38,159
computing community everybody uses it

00:01:36,630 --> 00:01:40,409
and the reason is because they want to

00:01:38,159 --> 00:01:42,450
write their stuff in Python and have it

00:01:40,409 --> 00:01:45,000
go fast there's a lot of that that we

00:01:42,450 --> 00:01:47,430
can do with just a Python compiler so

00:01:45,000 --> 00:01:49,170
numba i just want to do samba it's a

00:01:47,430 --> 00:01:52,079
small project it's not ready for prime

00:01:49,170 --> 00:01:53,700
time or just want to be a user come back

00:01:52,079 --> 00:01:54,990
a little later i'm mainly pointing this

00:01:53,700 --> 00:01:57,840
out to people who want to get involved

00:01:54,990 --> 00:01:59,490
and help develop it this replace

00:01:57,840 --> 00:02:02,430
bytecode on a stack with a simple type

00:01:59,490 --> 00:02:03,329
inference it translates to llvm using

00:02:02,430 --> 00:02:05,729
the remarkable LLVM compiler

00:02:03,329 --> 00:02:07,469
infrastructure it's lvm pie I've

00:02:05,729 --> 00:02:09,500
resurrected that project it networks on

00:02:07,469 --> 00:02:12,170
llvm version 3.1

00:02:09,500 --> 00:02:14,330
and it's all in github it uses the all

00:02:12,170 --> 00:02:15,980
of um to do Co gin and it gives you back

00:02:14,330 --> 00:02:17,360
a sea-level function pointer that can be

00:02:15,980 --> 00:02:18,890
inserted into the umpire run time at

00:02:17,360 --> 00:02:19,820
multiple places and we're going to be

00:02:18,890 --> 00:02:21,740
changing that we're going to be

00:02:19,820 --> 00:02:23,150
modifying numpy to allow it to receive

00:02:21,740 --> 00:02:25,820
more and more function pointers that can

00:02:23,150 --> 00:02:27,260
use and so it's a numpy on syfy we're so

00:02:25,820 --> 00:02:29,270
the basic picture looks like this a

00:02:27,260 --> 00:02:31,550
Python function goes through llvm pie

00:02:29,270 --> 00:02:33,770
it's a bytecode translator that converts

00:02:31,550 --> 00:02:35,660
it to machine code now the reason llvm

00:02:33,770 --> 00:02:36,800
is because the entire all the industry

00:02:35,660 --> 00:02:38,600
is using it as an intermediate

00:02:36,800 --> 00:02:40,400
representation Nvidia's new compiler

00:02:38,600 --> 00:02:42,260
works on an lvm tool stack intel's

00:02:40,400 --> 00:02:44,180
opencl compiler works in lv m tools back

00:02:42,260 --> 00:02:45,890
Apple of course uses si lang which

00:02:44,180 --> 00:02:47,480
produces lvm code so you have this

00:02:45,890 --> 00:02:49,910
plateau of code reuse at the very low

00:02:47,480 --> 00:02:52,220
level using llvm it's a great place for

00:02:49,910 --> 00:02:53,780
C extensions to also produce lvm from

00:02:52,220 --> 00:02:55,640
there python code so what does it look

00:02:53,780 --> 00:02:57,170
like something like this you have sync

00:02:55,640 --> 00:02:58,580
function let's say it's got this if

00:02:57,170 --> 00:03:00,440
statement inside of it the vectorize

00:02:58,580 --> 00:03:01,880
essentially produces lvm code if you

00:03:00,440 --> 00:03:03,470
never seen llvm code there's an example

00:03:01,880 --> 00:03:06,140
what it might look like this never gets

00:03:03,470 --> 00:03:07,880
printed out what that gets the code Jam

00:03:06,140 --> 00:03:09,620
takes that llvm code that's translated

00:03:07,880 --> 00:03:11,030
from the Python bytecode and produces

00:03:09,620 --> 00:03:13,040
something that can go really really fast

00:03:11,030 --> 00:03:14,930
in the machine this example for example

00:03:13,040 --> 00:03:16,250
there is a sinc function in an umpire

00:03:14,930 --> 00:03:18,769
but this one's three times faster

00:03:16,250 --> 00:03:20,299
because it compiles to Machine Co the

00:03:18,769 --> 00:03:21,769
sinc function also uses compiled loops

00:03:20,299 --> 00:03:23,269
of machine code but because of the

00:03:21,769 --> 00:03:26,120
memory overhead it's a little bit about

00:03:23,269 --> 00:03:27,170
three times slower another example of

00:03:26,120 --> 00:03:28,850
the kind of thing we want to be able to

00:03:27,170 --> 00:03:30,590
do take a simple two-dimensional

00:03:28,850 --> 00:03:32,989
convolution filter that's written in

00:03:30,590 --> 00:03:34,400
Python but with the compile syntax those

00:03:32,989 --> 00:03:36,290
four loops are all translated down to

00:03:34,400 --> 00:03:39,799
machine code and you have that simple

00:03:36,290 --> 00:03:41,180
filt multiplication by an image that the

00:03:39,799 --> 00:03:43,549
motive intial indexing is done with get

00:03:41,180 --> 00:03:45,110
pointer get element pointer in llvm and

00:03:43,549 --> 00:03:47,269
you end up with a very very fast code

00:03:45,110 --> 00:03:48,829
that works just as fast as any of the

00:03:47,269 --> 00:03:51,380
scythe on or the weave or even a little

00:03:48,829 --> 00:03:53,630
faster especially once the llvm codegen

00:03:51,380 --> 00:03:55,340
takes advantage of things like the PTX

00:03:53,630 --> 00:03:57,500
back end which kudat which nvidia is

00:03:55,340 --> 00:04:00,079
putting into their llvm back end to go

00:03:57,500 --> 00:04:03,049
into the GPU so this is a just sort of a

00:04:00,079 --> 00:04:04,850
nice place to play this is I think a

00:04:03,049 --> 00:04:07,130
vision of a software stack future which

00:04:04,850 --> 00:04:09,049
works very very well you have little

00:04:07,130 --> 00:04:11,000
mini dsl's or domain-specific languages

00:04:09,049 --> 00:04:12,680
at the high level which all use Python

00:04:11,000 --> 00:04:15,110
is intermediate representation for

00:04:12,680 --> 00:04:17,120
high-level library generation and then

00:04:15,110 --> 00:04:19,310
we need a high bandwidth communication

00:04:17,120 --> 00:04:21,600
down to llvm so that other people who

00:04:19,310 --> 00:04:23,130
are using so the basically C++ C

00:04:21,600 --> 00:04:24,750
fortran can all become little

00:04:23,130 --> 00:04:27,000
domain-specific languages on top of LOV

00:04:24,750 --> 00:04:29,460
m and we can rely on the hardware

00:04:27,000 --> 00:04:31,530
vendors to optimize code gym for that

00:04:29,460 --> 00:04:32,790
low level it's not difficult it's pretty

00:04:31,530 --> 00:04:35,610
simple pretty straightforward it's the

00:04:32,790 --> 00:04:37,020
kind of thing that I think the numpy and

00:04:35,610 --> 00:04:38,250
sci-fi community would really benefit

00:04:37,020 --> 00:04:39,720
from and we love and we love it

00:04:38,250 --> 00:04:41,250
everybody talked to who uses numpy and

00:04:39,720 --> 00:04:42,870
sci-fi that really wants to be able to

00:04:41,250 --> 00:04:44,790
do fast code on occasion they're really

00:04:42,870 --> 00:04:46,200
excited about this I'm pretty excited

00:04:44,790 --> 00:04:48,870
about it too it's a really fun project

00:04:46,200 --> 00:04:50,280
we are seeking developers people that

00:04:48,870 --> 00:04:51,870
can get involved if you are a compiler

00:04:50,280 --> 00:04:53,820
writer you just love to play with

00:04:51,870 --> 00:04:55,320
codegen and translation techniques it's

00:04:53,820 --> 00:04:57,540
a great opportunity to do something that

00:04:55,320 --> 00:04:58,950
has high impact for a lot of people in a

00:04:57,540 --> 00:05:00,900
scientific Python community so that's

00:04:58,950 --> 00:05:01,950
what I'm here doing is talking about it

00:05:00,900 --> 00:05:04,170
for people interested in getting

00:05:01,950 --> 00:05:06,000
involved and look for us in three months

00:05:04,170 --> 00:05:08,190
for three to six months for actually

00:05:06,000 --> 00:05:10,310
using it to solve your problems thank

00:05:08,190 --> 00:05:10,310
you

00:05:15,720 --> 00:05:19,810
all right next up I'd like to juice Chad

00:05:18,400 --> 00:05:22,840
Whitaker talking about I has a money

00:05:19,810 --> 00:05:26,020
comm check check check microphone check

00:05:22,840 --> 00:05:29,430
12 we're good all right let's get that

00:05:26,020 --> 00:05:36,419
there and then let's do we have we live

00:05:29,430 --> 00:05:41,500
in Ghana all right I has money Pikkon

00:05:36,419 --> 00:05:43,569
yeah all right I has the money what I do

00:05:41,500 --> 00:05:48,940
with it my name is Chad managing my

00:05:43,569 --> 00:05:51,310
money is very unimportant to me it's not

00:05:48,940 --> 00:05:52,930
that I never want to do it it's just

00:05:51,310 --> 00:05:55,199
that I want to spend as little time as

00:05:52,930 --> 00:05:59,919
possible on it like one hour a month

00:05:55,199 --> 00:06:03,190
okay so what do I do anybody ever seen

00:05:59,919 --> 00:06:04,960
mint com okay here's if you raise your

00:06:03,190 --> 00:06:07,210
hand if you see mint com you use it all

00:06:04,960 --> 00:06:09,340
right for those with your hands down

00:06:07,210 --> 00:06:11,380
here's how mint com works it's personal

00:06:09,340 --> 00:06:16,449
finance application you give them your

00:06:11,380 --> 00:06:21,130
bank passwords they store them in clear

00:06:16,449 --> 00:06:24,909
text then they screen scrape your bank's

00:06:21,130 --> 00:06:30,279
website sell your data to advertisers

00:06:24,909 --> 00:06:35,229
and give you ads wrapped in pie charts

00:06:30,279 --> 00:06:38,259
okay what you know how is this not a

00:06:35,229 --> 00:06:42,009
scam right like where's the value to me

00:06:38,259 --> 00:06:44,050
as the user in mint com okay now there's

00:06:42,009 --> 00:06:46,240
some justice in the world because the

00:06:44,050 --> 00:06:48,639
founder of mint is now the vice

00:06:46,240 --> 00:06:51,669
president of product innovation it into

00:06:48,639 --> 00:06:57,039
it which i think is a punishment that

00:06:51,669 --> 00:06:59,500
fits the crime but i'm still stuck I has

00:06:57,039 --> 00:07:01,960
a money what am I going to do with it

00:06:59,500 --> 00:07:05,759
how do I fit money management into one

00:07:01,960 --> 00:07:10,150
hour a month okay so i built a web app I

00:07:05,759 --> 00:07:14,050
has a money com personal finance for

00:07:10,150 --> 00:07:15,580
geeks ok and I'm going to show it to you

00:07:14,050 --> 00:07:17,949
here I'm going to it's going to be

00:07:15,580 --> 00:07:19,719
hosted locally because I don't trust the

00:07:17,949 --> 00:07:23,560
network but you can go to I has a money

00:07:19,719 --> 00:07:27,550
calm and see the thing itself all right

00:07:23,560 --> 00:07:29,290
so here's what it looks like let me get

00:07:27,550 --> 00:07:31,360
my mouse on the right screen okay here's

00:07:29,290 --> 00:07:32,410
what it looks like the the first thing

00:07:31,360 --> 00:07:35,020
you'll notice about it is that you're

00:07:32,410 --> 00:07:41,410
not come on query where are you you're

00:07:35,020 --> 00:07:44,590
not allowed to use your mouse okay you

00:07:41,410 --> 00:07:49,810
navigate the thing with the keyboard you

00:07:44,590 --> 00:07:52,570
use J&K to navigate right J&K to

00:07:49,810 --> 00:07:55,600
navigate your transactions on the left

00:07:52,570 --> 00:07:59,710
you used e and f actually to drill down

00:07:55,600 --> 00:08:00,460
into your categories on the right okay

00:07:59,710 --> 00:08:04,720
and then so I'm going to go to

00:08:00,460 --> 00:08:06,639
uncategorized and let's see so I want to

00:08:04,720 --> 00:08:10,600
categorize something so I hold s as a

00:08:06,639 --> 00:08:12,250
quazy mode now i'm using J&K and it's

00:08:10,600 --> 00:08:15,340
giving you so itunes is going to be

00:08:12,250 --> 00:08:17,410
entertainment walmart you know who knows

00:08:15,340 --> 00:08:20,080
what's ailing you know that's a gifts i

00:08:17,410 --> 00:08:22,780
don't know the gap is closing comcast

00:08:20,080 --> 00:08:25,000
where does condom right utilities

00:08:22,780 --> 00:08:26,710
there's the utilities down there so this

00:08:25,000 --> 00:08:28,810
is how i categorize things i try to

00:08:26,710 --> 00:08:31,030
optimize the UI for categorizing things

00:08:28,810 --> 00:08:32,500
you know and then i can drill down and

00:08:31,030 --> 00:08:35,740
now i can go up to utilities and I see

00:08:32,500 --> 00:08:37,180
my comcast in there right so that's

00:08:35,740 --> 00:08:40,930
that's the state of the application

00:08:37,180 --> 00:08:43,210
right now the idea is to add more

00:08:40,930 --> 00:08:45,400
columns to that summary table on the

00:08:43,210 --> 00:08:47,650
right so that you can get things like

00:08:45,400 --> 00:08:50,620
budgeted versus actual this month versus

00:08:47,650 --> 00:08:51,850
last month and stuff like that you know

00:08:50,620 --> 00:08:54,190
tons more features can be added

00:08:51,850 --> 00:08:57,850
automatic categorization right now it's

00:08:54,190 --> 00:08:59,890
a pain in the butt to get data in you

00:08:57,850 --> 00:09:01,839
have to upload a CSV that you downloaded

00:08:59,890 --> 00:09:04,180
from your bank but at least you didn't

00:09:01,839 --> 00:09:06,040
give your bank password you know with 5

00:09:04,180 --> 00:09:07,930
million other people to one company

00:09:06,040 --> 00:09:10,540
where it's all in the same place in the

00:09:07,930 --> 00:09:14,610
clear so anyway folks that's I has money

00:09:10,540 --> 00:09:14,610
thank you for your time go check it out

00:09:26,460 --> 00:09:30,610
alright thank you very much Chad next up

00:09:29,080 --> 00:09:34,510
if I can reduce motion attica talking

00:09:30,610 --> 00:09:35,950
about brain hacking hi so yeah I'm going

00:09:34,510 --> 00:09:38,500
to talk to you about hacking the veins

00:09:35,950 --> 00:09:41,440
of fun profit now when you go to like

00:09:38,500 --> 00:09:42,850
technical conferences not this one you

00:09:41,440 --> 00:09:45,130
know this is some of the talks are

00:09:42,850 --> 00:09:46,900
really bad and the problem that's not

00:09:45,130 --> 00:09:48,460
bad for any good reason right it's not

00:09:46,900 --> 00:09:50,290
like the speaker is not knowledgeable

00:09:48,460 --> 00:09:51,910
about the content its other key doesn't

00:09:50,290 --> 00:09:54,610
have something interesting to say it

00:09:51,910 --> 00:09:56,140
just seems the talk falls flat and I

00:09:54,610 --> 00:09:58,660
want to try to understand why it happens

00:09:56,140 --> 00:10:01,180
and try to see how we can fix it so the

00:09:58,660 --> 00:10:02,529
problem is that talks are code right but

00:10:01,180 --> 00:10:04,240
the code ment for like this weird

00:10:02,529 --> 00:10:06,130
architecture call you know the human

00:10:04,240 --> 00:10:08,020
brain and like you know we don't have

00:10:06,130 --> 00:10:09,820
specs for these architecture and nobody

00:10:08,020 --> 00:10:13,150
knows exactly how it works and liked

00:10:09,820 --> 00:10:14,560
annoying most people like have some kind

00:10:13,150 --> 00:10:16,089
of intuitive understanding of how to

00:10:14,560 --> 00:10:18,730
write code rate for this architecture

00:10:16,089 --> 00:10:21,220
the range of quality of that intuition

00:10:18,730 --> 00:10:24,670
varies a lot most programmers are very

00:10:21,220 --> 00:10:26,410
little but what we do know is how to

00:10:24,670 --> 00:10:28,180
take technical specs and use them to

00:10:26,410 --> 00:10:29,920
write code for new architectures and

00:10:28,180 --> 00:10:31,540
luckily lots of people are trying to

00:10:29,920 --> 00:10:33,310
reverse engineer architectures right we

00:10:31,540 --> 00:10:35,140
have a Volusia nary psychology we have

00:10:33,310 --> 00:10:37,360
cognitive science people are trying to

00:10:35,140 --> 00:10:40,870
understand how the brain works we can

00:10:37,360 --> 00:10:42,310
use this so people are storytellers

00:10:40,870 --> 00:10:45,610
that's the first thing you want to know

00:10:42,310 --> 00:10:47,680
so people we spend much better to an

00:10:45,610 --> 00:10:49,420
implausible story rather than two

00:10:47,680 --> 00:10:51,370
plausible evidence lots of experiments

00:10:49,420 --> 00:10:54,490
show that so what you want to make sure

00:10:51,370 --> 00:10:56,140
is that your talk tells a story why

00:10:54,490 --> 00:10:57,760
don't show them lots of evidence tell

00:10:56,140 --> 00:11:00,010
give them a narrative you can see

00:10:57,760 --> 00:11:01,959
wondering the narrative for this talk is

00:11:00,010 --> 00:11:03,580
kind of the hero's journey you started

00:11:01,959 --> 00:11:07,220
with a problem you connect the magical

00:11:03,580 --> 00:11:09,410
items you slay the dragon it's awesome

00:11:07,220 --> 00:11:11,569
and the next thing you want to make sure

00:11:09,410 --> 00:11:13,879
is that they care about it now people

00:11:11,569 --> 00:11:15,560
don't care about code even programmers

00:11:13,879 --> 00:11:17,720
can't manage to care as much about code

00:11:15,560 --> 00:11:20,569
as this I am betting you're looking at

00:11:17,720 --> 00:11:23,720
this not thank you right because this is

00:11:20,569 --> 00:11:25,519
baby people care about people right so

00:11:23,720 --> 00:11:27,139
instead of telling them about code tell

00:11:25,519 --> 00:11:30,649
them a story from your life right i was

00:11:27,139 --> 00:11:33,050
in this talk where the first the first

00:11:30,649 --> 00:11:35,569
story was about some of the first date

00:11:33,050 --> 00:11:36,949
his job as of challenges he faced death

00:11:35,569 --> 00:11:38,540
glued the audience to the seat right

00:11:36,949 --> 00:11:40,370
it's a relatable story you want to know

00:11:38,540 --> 00:11:45,019
what happened next do you want to make

00:11:40,370 --> 00:11:47,689
them care then people of visual visual

00:11:45,019 --> 00:11:49,579
creatures if you show them the solution

00:11:47,689 --> 00:11:52,370
like what you're going to say on the

00:11:49,579 --> 00:11:53,689
slide they will read the slide however

00:11:52,370 --> 00:11:55,939
the slide is not the person they will

00:11:53,689 --> 00:11:57,949
not care about the slides want to make

00:11:55,939 --> 00:12:00,079
money make sure this slide shows them a

00:11:57,949 --> 00:12:01,819
puzzle like something that will tease

00:12:00,079 --> 00:12:03,379
our curiosity sensible focus on you

00:12:01,819 --> 00:12:07,189
because people are puzzle solvers they

00:12:03,379 --> 00:12:08,509
wanna know the solution and the last

00:12:07,189 --> 00:12:11,389
thing to remember is that hacking is a

00:12:08,509 --> 00:12:13,309
skill not knowledge so just knowing all

00:12:11,389 --> 00:12:16,100
these principles in theory is not enough

00:12:13,309 --> 00:12:18,620
just like in Python you don't get

00:12:16,100 --> 00:12:20,569
goodbye justina reading like the big

00:12:18,620 --> 00:12:22,970
corp eyes on programming it's awesome

00:12:20,569 --> 00:12:24,170
book but you don't get good but it by

00:12:22,970 --> 00:12:26,360
somebody reading if you have to practice

00:12:24,170 --> 00:12:28,519
you have to write lots of code see what

00:12:26,360 --> 00:12:30,410
works see what doesn't and I hope that

00:12:28,519 --> 00:12:33,670
you all start doing that and will get

00:12:30,410 --> 00:12:33,670
much better talks thank you very much

00:12:41,800 --> 00:12:45,320
thank you very much Moshe now my

00:12:43,970 --> 00:12:48,310
pleasure to introduce dr. Brett cannon

00:12:45,320 --> 00:12:50,990
speaking about Python 3 on high five

00:12:48,310 --> 00:12:52,130
morning everybody so as Noah said my

00:12:50,990 --> 00:12:53,840
name is Brett on one of the core

00:12:52,130 --> 00:12:56,000
developers on Python and I'm here to try

00:12:53,840 --> 00:12:58,010
to let you guys know that Python 3 is

00:12:56,000 --> 00:13:00,530
alive and well up on the Python package

00:12:58,010 --> 00:13:03,950
index just before I start is pie pie pie

00:13:00,530 --> 00:13:08,930
pie the vm or Pippy or anything like

00:13:03,950 --> 00:13:11,900
that it's pi p name so back in February

00:13:08,930 --> 00:13:15,770
2011 the psf sponsored me into a credit

00:13:11,900 --> 00:13:17,870
website called pi3k support.com which is

00:13:15,770 --> 00:13:20,570
I if you follow my blog I completely

00:13:17,870 --> 00:13:22,190
redesigned in the last few months and

00:13:20,570 --> 00:13:23,780
basically what it currently does is it

00:13:22,190 --> 00:13:26,930
tries to figure out roughly what the top

00:13:23,780 --> 00:13:28,790
50 projects are its base by basically

00:13:26,930 --> 00:13:30,860
taking the latest version of a project

00:13:28,790 --> 00:13:32,420
and then calculating download total

00:13:30,860 --> 00:13:34,340
divided by the days available per file

00:13:32,420 --> 00:13:36,290
it has uploaded and just use it as kind

00:13:34,340 --> 00:13:37,910
of a popularity index of who basically

00:13:36,290 --> 00:13:40,550
the top 50 projects everyone seems to

00:13:37,910 --> 00:13:43,580
care about is so without further ado

00:13:40,550 --> 00:13:46,790
let's have a quick look live oh how it

00:13:43,580 --> 00:13:48,110
looks so roughly about 54 to fifty-eight

00:13:46,790 --> 00:13:51,560
percent of the top 50 projects have

00:13:48,110 --> 00:13:53,690
already been ported Python 3 the reason

00:13:51,560 --> 00:13:56,930
it's range is the 54 is definite and the

00:13:53,690 --> 00:13:58,760
58 is maybe I personally hand curate the

00:13:56,930 --> 00:14:00,740
top 50 projects to make sure that

00:13:58,760 --> 00:14:02,030
offending project is ambiguous on

00:14:00,740 --> 00:14:03,710
whether or not it supports Python to a

00:14:02,030 --> 00:14:05,060
Python 3 I personally view the google

00:14:03,710 --> 00:14:07,550
search look through the mailing list and

00:14:05,060 --> 00:14:10,340
try to figure out if they're actually

00:14:07,550 --> 00:14:11,990
actively not have tried install or

00:14:10,340 --> 00:14:14,300
whatever but i've actually done the work

00:14:11,990 --> 00:14:16,580
to do a port so for instance Django's

00:14:14,300 --> 00:14:18,140
this is under development because viene

00:14:16,580 --> 00:14:19,790
the jeep has actually done a full on

00:14:18,140 --> 00:14:21,410
port that he keeps up-to-date that runs

00:14:19,790 --> 00:14:23,170
on Python 3 it just has an associative

00:14:21,410 --> 00:14:25,970
and moved over as the official version

00:14:23,170 --> 00:14:28,460
but it is to the usable and being worked

00:14:25,970 --> 00:14:31,090
on and as you can see there's actually a

00:14:28,460 --> 00:14:33,890
lot of projects already on Python 3

00:14:31,090 --> 00:14:35,630
there's some red unfortunately in

00:14:33,890 --> 00:14:37,670
picking doesn't update his projects

00:14:35,630 --> 00:14:39,020
anymore so that's why there's some

00:14:37,670 --> 00:14:41,060
chunks of red on there but otherwise

00:14:39,020 --> 00:14:43,190
there's a decent amount as I said at

00:14:41,060 --> 00:14:44,930
least fifty four percent and up to 58

00:14:43,190 --> 00:14:47,730
depending if you count selenium and

00:14:44,930 --> 00:14:49,440
Django is ported are already over

00:14:47,730 --> 00:14:53,399
and as you can see there are links

00:14:49,440 --> 00:14:55,829
directly into pi PI also the details

00:14:53,399 --> 00:14:57,329
friends of what I have with whether it's

00:14:55,829 --> 00:14:59,459
on how many demos there are total

00:14:57,329 --> 00:15:02,940
downloads when I last updated data which

00:14:59,459 --> 00:15:05,190
I have to update daily I pay the nine

00:15:02,940 --> 00:15:07,380
bucks a month from tap engine for it and

00:15:05,190 --> 00:15:09,120
then I also give a metadata rating on an

00:15:07,380 --> 00:15:12,720
app's metadata which I'll cover in as

00:15:09,120 --> 00:15:16,019
seconds so what does all this made me at

00:15:12,720 --> 00:15:17,370
about fifty four percent well I honestly

00:15:16,019 --> 00:15:21,260
think it's a pretty good place to be

00:15:17,370 --> 00:15:25,860
when we started Python 3 and launched

00:15:21,260 --> 00:15:28,079
way back in December of 2008 we say we

00:15:25,860 --> 00:15:30,060
were hoping to have roughly majority of

00:15:28,079 --> 00:15:31,709
the community moving over in three to

00:15:30,060 --> 00:15:33,329
five years we always admitted three

00:15:31,709 --> 00:15:35,010
years was our major stretch goal right

00:15:33,329 --> 00:15:37,380
five years is probably what we expected

00:15:35,010 --> 00:15:39,240
everyone to really start moving over not

00:15:37,380 --> 00:15:41,730
the whole community obviously because no

00:15:39,240 --> 00:15:43,110
one ever always will but at least have a

00:15:41,730 --> 00:15:45,060
majority moving over and we've already

00:15:43,110 --> 00:15:49,589
hit fifty four percent of the top 50 so

00:15:45,060 --> 00:15:51,389
I'm pretty happy with that I do make a

00:15:49,589 --> 00:15:52,980
plea though I don't exactly love

00:15:51,389 --> 00:15:54,449
spending my free time going through the

00:15:52,980 --> 00:15:57,029
top 50 projects and updating their

00:15:54,449 --> 00:15:59,760
metadata for them so if you do manage to

00:15:57,029 --> 00:16:03,149
maintain a project up on pi PI please

00:15:59,760 --> 00:16:04,680
please please add a line in your trophy

00:16:03,149 --> 00:16:07,529
hasta fires about what language you

00:16:04,680 --> 00:16:09,779
support even if it's just saying you

00:16:07,529 --> 00:16:11,639
support Python 2 or par 73 generally

00:16:09,779 --> 00:16:13,260
that's helpful but honestly for your own

00:16:11,639 --> 00:16:16,350
users it's great if you can specify the

00:16:13,260 --> 00:16:18,149
specific version like 3.2 or 2.7 or 2.6

00:16:16,350 --> 00:16:19,860
or whatever because it makes it easy for

00:16:18,149 --> 00:16:23,610
them to just look at the project to go

00:16:19,860 --> 00:16:25,949
oh that supports python 2.6 i'm on 2.6

00:16:23,610 --> 00:16:30,480
fantastic or I'm stuck on 25 it doesn't

00:16:25,949 --> 00:16:32,310
support 25 sad face whatever these

00:16:30,480 --> 00:16:34,769
people though are in the top 50 and

00:16:32,310 --> 00:16:37,260
don't have that in there so I'm publicly

00:16:34,769 --> 00:16:40,829
shaming them a little bit I don't think

00:16:37,260 --> 00:16:44,430
hands here but if Mike fiddly errand

00:16:40,829 --> 00:16:46,199
benign Mitch Mike army and Jeff Andrew

00:16:44,430 --> 00:16:47,459
and Andy who get least I talks because

00:16:46,199 --> 00:16:48,870
at least specify that they are a

00:16:47,459 --> 00:16:51,720
framework with Django so it's kind of

00:16:48,870 --> 00:16:52,949
implied but still it'd be nice Robbie

00:16:51,720 --> 00:16:55,589
and a whole bunch of other people would

00:16:52,949 --> 00:16:56,040
please update your pacifiers I'd really

00:16:55,589 --> 00:16:59,550
apprec--

00:16:56,040 --> 00:17:01,740
it and if you haven't ported over yet

00:16:59,550 --> 00:17:04,860
there is a port you how to that we have

00:17:01,740 --> 00:17:08,069
up on dog stop python.org recently we

00:17:04,860 --> 00:17:09,600
added back into Python 3.3 support for

00:17:08,069 --> 00:17:11,280
the you prefix to make it even easier

00:17:09,600 --> 00:17:13,230
for you guys to deal with your Unicode

00:17:11,280 --> 00:17:17,130
string conversion issues between Python

00:17:13,230 --> 00:17:18,390
2 to python 3 so we're yeah so we're

00:17:17,130 --> 00:17:19,890
still working to make it easier for you

00:17:18,390 --> 00:17:22,199
guys to do your ports so please please

00:17:19,890 --> 00:17:23,669
please do take the time to do your ports

00:17:22,199 --> 00:17:26,130
we're making it still as easy as

00:17:23,669 --> 00:17:28,530
possible if you use 22 23 if you do a

00:17:26,130 --> 00:17:30,660
single bass port that supports

00:17:28,530 --> 00:17:32,549
tactically two and three or if you do

00:17:30,660 --> 00:17:33,690
the branching whatever we're doing what

00:17:32,549 --> 00:17:35,460
we can to make sure you guys reported

00:17:33,690 --> 00:17:41,330
without rolling back the clock and the

00:17:35,460 --> 00:17:41,330
new features yeah thanks a lot what

00:17:43,400 --> 00:17:47,640
Thank You Brett and next up our final

00:17:46,470 --> 00:17:49,760
lightning talk for the morning Luke

00:17:47,640 --> 00:17:57,419
costly talking about Python on ebooks

00:17:49,760 --> 00:17:59,130
all right thanks you all right so I

00:17:57,419 --> 00:18:02,130
managed to get the Python interpreter

00:17:59,130 --> 00:18:05,490
running on iBooks without jailbreaking

00:18:02,130 --> 00:18:08,070
my iPad so you can use this for just

00:18:05,490 --> 00:18:10,409
running the interpreter in an e-book so

00:18:08,070 --> 00:18:13,740
when you have your iPad you can actually

00:18:10,409 --> 00:18:15,270
run Python code on it and this is also

00:18:13,740 --> 00:18:16,980
great for having any sort of

00:18:15,270 --> 00:18:18,630
instructional text books where you

00:18:16,980 --> 00:18:20,640
actually want to teach people how to do

00:18:18,630 --> 00:18:22,500
things with Python and you want to be

00:18:20,640 --> 00:18:25,440
able to use the iBookstore for

00:18:22,500 --> 00:18:29,790
distribution of course this is a little

00:18:25,440 --> 00:18:32,159
bit difficult the iBookstore has no way

00:18:29,790 --> 00:18:34,020
to run arbitrary binaries so it's kind

00:18:32,159 --> 00:18:37,980
of hard to run the interpreter on it but

00:18:34,020 --> 00:18:41,730
you can embed media presentations HTML

00:18:37,980 --> 00:18:44,130
widgets and 3d models so the HTML widget

00:18:41,730 --> 00:18:45,059
method is actually a way that you're

00:18:44,130 --> 00:18:49,169
able to run the Python interpreter

00:18:45,059 --> 00:18:51,179
inside of an e-book so the way that I've

00:18:49,169 --> 00:18:54,390
managed to accomplish this is that you

00:18:51,179 --> 00:18:58,669
have the Python interpreter the

00:18:54,390 --> 00:19:04,070
JavaScript implementation of it

00:18:58,669 --> 00:19:13,009
inside of a dash code HTML widget inside

00:19:04,070 --> 00:19:18,169
of the ibook wrapper and you're good to

00:19:13,009 --> 00:19:20,869
go so it's C Python compiled from C to

00:19:18,169 --> 00:19:23,929
JavaScript using Emscripten by Alan's

00:19:20,869 --> 00:19:26,059
akai the input and output is HTML

00:19:23,929 --> 00:19:29,509
elements it is compatible with the ipad

00:19:26,059 --> 00:19:32,559
on-screen keyboard 4.8 megabyte over a

00:19:29,509 --> 00:19:35,299
head which is not that bad considering

00:19:32,559 --> 00:19:37,720
basically what the code looks like and

00:19:35,299 --> 00:19:41,480
the big thing is that it runs on vanilla

00:19:37,720 --> 00:19:44,119
iPads starting with the first gen iOS

00:19:41,480 --> 00:19:46,999
version 4.2 and up and iBooks version 2

00:19:44,119 --> 00:19:50,059
and up and if you find me i will show

00:19:46,999 --> 00:19:55,100
you this running on my first gen ipad i

00:19:50,059 --> 00:19:56,809
don't have the three year the downside

00:19:55,100 --> 00:19:58,999
is that you basically every time you

00:19:56,809 --> 00:20:01,909
want to have a python interpreter you

00:19:58,999 --> 00:20:03,619
have to embedded so basically right now

00:20:01,909 --> 00:20:06,200
the issues that if you want to have two

00:20:03,619 --> 00:20:07,820
places inside of an e-book with the

00:20:06,200 --> 00:20:09,619
Python interpreter you have to embed it

00:20:07,820 --> 00:20:12,889
twice so I'm going to see if there's a

00:20:09,619 --> 00:20:15,109
way to to deduplicate this also

00:20:12,889 --> 00:20:16,669
potentially having syntax highlighting

00:20:15,109 --> 00:20:19,850
and some other goodies inside of the

00:20:16,669 --> 00:20:20,749
ebooks would be nice as well I don't

00:20:19,850 --> 00:20:22,700
think there's time available for

00:20:20,749 --> 00:20:24,619
questions but the code will be available

00:20:22,700 --> 00:20:27,139
within a few days again if you come find

00:20:24,619 --> 00:20:31,570
me I can show you how this is running on

00:20:27,139 --> 00:20:31,570
my plane ipad thank

00:20:36,130 --> 00:20:38,990
alright thank you very much Luke and

00:20:38,090 --> 00:20:40,340
thank you everyone for coming to the

00:20:38,990 --> 00:20:42,020
morning lighting talk sessions I hope to

00:20:40,340 --> 00:20:43,880
see everyone back here at five-thirty

00:20:42,020 --> 00:20:44,930
tonight for the evening sessions and if

00:20:43,880 --> 00:20:47,030
you're interested in giving a lightning

00:20:44,930 --> 00:20:48,740
talk the signups for tonight and

00:20:47,030 --> 00:20:51,310
tomorrow morning will be up shortly

00:20:48,740 --> 00:20:51,310
later today

00:21:00,090 --> 00:21:02,150

YouTube URL: https://www.youtube.com/watch?v=H841U6RhrDU


