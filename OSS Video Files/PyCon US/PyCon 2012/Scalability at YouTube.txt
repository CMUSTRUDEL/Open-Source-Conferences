Title: Scalability at YouTube
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Shannon -jj Behrens, Mike Solomon
This talk covers scalability at YouTube.  It's given by one of the original engineers at YouTube, Mike Solomon.  It's a rare glimpse into the heart of YouTube which is one of the largest websites in the world, and on
Captions: 
	00:00:00,560 --> 00:00:06,450
hey guys welcome to Pike on my name is

00:00:03,120 --> 00:00:09,389
JJ Behrens I am a developer advocate for

00:00:06,450 --> 00:00:11,070
YouTube also known as a booth babe

00:00:09,389 --> 00:00:14,460
so I'm working there's too many guys out

00:00:11,070 --> 00:00:16,350
there I think that's a problem you know

00:00:14,460 --> 00:00:18,210
how you go to youtube and you want to

00:00:16,350 --> 00:00:19,740
watch like an awesome Shakira video and

00:00:18,210 --> 00:00:22,020
then sometimes like you got to see an ad

00:00:19,740 --> 00:00:24,660
because Shakira needs to get paid I'm

00:00:22,020 --> 00:00:26,310
I'm that commercial but actually I'm

00:00:24,660 --> 00:00:27,630
going to do something talk about

00:00:26,310 --> 00:00:30,140
something useful I'm here to talk about

00:00:27,630 --> 00:00:32,640
using YouTube for python-based startups

00:00:30,140 --> 00:00:35,399
if you're interested in using the

00:00:32,640 --> 00:00:36,899
YouTube API there we are on Twitter

00:00:35,399 --> 00:00:39,809
YouTube dev and then you could also

00:00:36,899 --> 00:01:50,909
email me or check out my blog at

00:00:39,809 --> 00:01:52,950
jennifermcguireink.com a P is and then

00:01:50,909 --> 00:01:56,369
all of these approaches have been

00:01:52,950 --> 00:01:59,390
successful for various companies so let

00:01:56,369 --> 00:01:59,390
me start with this

00:02:03,580 --> 00:02:06,700
back-up plan

00:02:35,110 --> 00:02:42,950
cooking don't like kilobytes used to be

00:02:38,690 --> 00:02:45,680
the face traffic so that way Cassell and

00:02:42,950 --> 00:02:48,500
dad's face make way for some fun man

00:02:45,680 --> 00:02:51,430
okay so since I have no useful content

00:02:48,500 --> 00:02:51,430
I'm gonna start over with

00:03:19,150 --> 00:03:38,800
with smart

00:04:18,150 --> 00:04:23,370
okay so if you want VC money don't talk

00:04:21,730 --> 00:04:25,540
to me you got to go talk to Paul Graham

00:04:23,370 --> 00:04:27,190
so you might be wondering why the heck

00:04:25,540 --> 00:04:29,710
did I just wasted like minute and a half

00:04:27,190 --> 00:04:32,440
of showing you video that's actually an

00:04:29,710 --> 00:04:34,030
advertisement for a VoIP solution it and

00:04:32,440 --> 00:04:36,100
at the end it shows you the

00:04:34,030 --> 00:04:37,630
advertisement and the funny thing is the

00:04:36,100 --> 00:04:40,630
type of people who think that video is

00:04:37,630 --> 00:04:42,460
freaking awesome like me are the type of

00:04:40,630 --> 00:04:45,160
people who are more likely to need a

00:04:42,460 --> 00:04:46,720
VoIP solution and so you know you make

00:04:45,160 --> 00:04:48,130
this video it goes viral and then

00:04:46,720 --> 00:04:52,210
suddenly you don't have to pay for

00:04:48,130 --> 00:04:53,830
marketing because it's free but there's

00:04:52,210 --> 00:04:56,130
other approaches so let me show you the

00:04:53,830 --> 00:04:56,130
next one

00:05:49,800 --> 00:05:54,850
okay so what's that about so these guys

00:05:52,720 --> 00:05:56,890
sell skateboards and they were spending

00:05:54,850 --> 00:05:59,170
a lot of money on various social

00:05:56,890 --> 00:06:01,210
networking sites trying to you know tune

00:05:59,170 --> 00:06:02,710
into the skateboarders and they weren't

00:06:01,210 --> 00:06:03,940
selling a lot of skateboards which is

00:06:02,710 --> 00:06:04,510
kind of a problem if that's your

00:06:03,940 --> 00:06:06,850
business

00:06:04,510 --> 00:06:09,460
so what they figured out is let's go out

00:06:06,850 --> 00:06:11,260
let's shoot some awesome videos let's

00:06:09,460 --> 00:06:13,030
post them on YouTube and then when

00:06:11,260 --> 00:06:15,820
people are like hey where'd you get your

00:06:13,030 --> 00:06:19,150
board let's talk to them and that is now

00:06:15,820 --> 00:06:21,850
their entire strategy they just talk to

00:06:19,150 --> 00:06:24,010
people online with the YouTube comments

00:06:21,850 --> 00:06:25,900
they you know they watch videos from

00:06:24,010 --> 00:06:28,330
other people that's that's their whole

00:06:25,900 --> 00:06:29,560
marketing strategy and I talked to these

00:06:28,330 --> 00:06:31,030
guys and they're like yeah we're not

00:06:29,560 --> 00:06:33,040
doing anything else this worked better

00:06:31,030 --> 00:06:34,810
than you know spending money on anything

00:06:33,040 --> 00:06:38,200
else this is all we're doing from now on

00:06:34,810 --> 00:06:40,600
and so if you YouTube is a great way to

00:06:38,200 --> 00:06:41,800
engage with their community with the TV

00:06:40,600 --> 00:06:50,110
you can't really talk back to the

00:06:41,800 --> 00:06:52,360
customers but what youtube you can so so

00:06:50,110 --> 00:06:54,280
the next approach to using YouTube for

00:06:52,360 --> 00:06:55,780
your business is to integrate we have an

00:06:54,280 --> 00:06:58,330
open source solution called YouTube

00:06:55,780 --> 00:07:01,150
direct and this is an app engine based

00:06:58,330 --> 00:07:04,150
application that you could embed into

00:07:01,150 --> 00:07:06,460
your into your website and allow users

00:07:04,150 --> 00:07:10,390
to upload videos to your application and

00:07:06,460 --> 00:07:12,280
a bunch of news agencies use this and so

00:07:10,390 --> 00:07:14,050
your users could talk to you by feeding

00:07:12,280 --> 00:07:17,800
videos back to you in this builds

00:07:14,050 --> 00:07:20,890
community the next approach to using

00:07:17,800 --> 00:07:22,840
YouTube is to innovate this is the

00:07:20,890 --> 00:07:26,140
history of jazz it's an iPad application

00:07:22,840 --> 00:07:27,880
and it basically it teaches you the

00:07:26,140 --> 00:07:29,290
history of jazz so it's this beautiful

00:07:27,880 --> 00:07:30,700
application you leave it on your coffee

00:07:29,290 --> 00:07:32,500
table when people come over and they're

00:07:30,700 --> 00:07:34,450
like oh what's this this is pretty cool

00:07:32,500 --> 00:07:37,030
and it teaches you about the history of

00:07:34,450 --> 00:07:39,190
jazz that shows you know videos and

00:07:37,030 --> 00:07:42,070
music and the beautiful thing about this

00:07:39,190 --> 00:07:43,390
is a it's a paid app so these guys are

00:07:42,070 --> 00:07:45,760
making money like right off the get-go

00:07:43,390 --> 00:07:48,040
and then B if you like the songs it has

00:07:45,760 --> 00:07:49,270
iTunes integration so you could go buy

00:07:48,040 --> 00:07:52,390
the music so they have multiple

00:07:49,270 --> 00:07:54,640
monetization strategies and so they're

00:07:52,390 --> 00:07:56,470
doing integration with YouTube API in

00:07:54,640 --> 00:07:59,070
terms of pulling down videos and also

00:07:56,470 --> 00:08:00,880
they have a customized player experience

00:07:59,070 --> 00:08:02,770
okay so building you

00:08:00,880 --> 00:08:05,590
you've enabled applications we have two

00:08:02,770 --> 00:08:07,600
types of api's Google Data API so these

00:08:05,590 --> 00:08:09,850
are the backend and then player API so

00:08:07,600 --> 00:08:13,180
those are the front-end the data API is

00:08:09,850 --> 00:08:14,950
there rust based using Adam and Jason I

00:08:13,180 --> 00:08:18,100
tried to talk them into using something

00:08:14,950 --> 00:08:20,560
like Corbett but they said no I don't

00:08:18,100 --> 00:08:22,780
know why we have client language we have

00:08:20,560 --> 00:08:25,000
client libraries available for Python

00:08:22,780 --> 00:08:27,550
and other less important languages that

00:08:25,000 --> 00:08:30,280
don't bear mentioning you could upload

00:08:27,550 --> 00:08:32,440
search rate comment manage playlists etc

00:08:30,280 --> 00:08:35,470
and you could do things on the user's

00:08:32,440 --> 00:08:37,030
behalf using oauth2 so you know you

00:08:35,470 --> 00:08:38,650
could play with his account upload

00:08:37,030 --> 00:08:41,349
videos to his account you know play with

00:08:38,650 --> 00:08:43,660
this playlist and so forth using our

00:08:41,349 --> 00:08:45,100
player API you could control the player

00:08:43,660 --> 00:08:46,930
and create a customized player

00:08:45,100 --> 00:08:49,540
experience using javascript or

00:08:46,930 --> 00:08:51,190
ActionScript and you could do a bunch of

00:08:49,540 --> 00:08:52,690
simple things using player parameters

00:08:51,190 --> 00:08:54,460
and we even have a chromeless version of

00:08:52,690 --> 00:08:56,530
the player and because this is a Python

00:08:54,460 --> 00:08:58,900
talk and I'm a Python guy figured I

00:08:56,530 --> 00:09:02,200
should show some Python code so here is

00:08:58,900 --> 00:09:05,230
an example of accessing a feed in Python

00:09:02,200 --> 00:09:06,670
so we create a YouTube service object we

00:09:05,230 --> 00:09:08,790
create a query we're going to search for

00:09:06,670 --> 00:09:12,250
Python we order it by a view count

00:09:08,790 --> 00:09:14,020
here's the feed of when we do the query

00:09:12,250 --> 00:09:16,690
and then for each of the entries in the

00:09:14,020 --> 00:09:18,970
feed we could print the title and get

00:09:16,690 --> 00:09:24,160
the uro and do whatever else and that's

00:09:18,970 --> 00:09:25,840
about it it's really that easy so if you

00:09:24,160 --> 00:09:28,270
want to do this just Google for YouTube

00:09:25,840 --> 00:09:31,120
ap is where YouTube Dev on Twitter

00:09:28,270 --> 00:09:32,260
there's my blog again and make sure you

00:09:31,120 --> 00:09:34,600
read the Terms of Service and the

00:09:32,260 --> 00:09:36,640
monetization guide now I'm done

00:09:34,600 --> 00:09:40,270
I'm done doing my booth paid beauties

00:09:36,640 --> 00:09:42,160
I'm here to introduce Mike Sullivan Mike

00:09:40,270 --> 00:09:43,930
Solomon is the most famous person that

00:09:42,160 --> 00:09:46,480
you might not know because he was the

00:09:43,930 --> 00:09:49,090
first employee at YouTube and is

00:09:46,480 --> 00:09:51,610
responsible for single-handedly

00:09:49,090 --> 00:09:57,570
delivering every single video when a

00:09:51,610 --> 00:09:57,570
person clicks play so Mike Solomon

00:10:03,730 --> 00:10:19,550
all right let start from the back no

00:10:06,050 --> 00:10:21,769
dodging all right hello as JJ said my

00:10:19,550 --> 00:10:24,709
name is Mike Solomon I work at YouTube

00:10:21,769 --> 00:10:27,230
and it's pretty tough to condense seven

00:10:24,709 --> 00:10:28,639
years down into 30 minutes so I'm going

00:10:27,230 --> 00:10:31,189
to try and just talk at a pretty high

00:10:28,639 --> 00:10:35,689
level about some of the techniques we

00:10:31,189 --> 00:10:37,009
use generally for they generally apply

00:10:35,689 --> 00:10:38,600
to Python but they apply to all their

00:10:37,009 --> 00:10:40,670
programming languages it's just about

00:10:38,600 --> 00:10:42,769
sort of scalability strategies and and

00:10:40,670 --> 00:10:45,350
you know how do you solve various

00:10:42,769 --> 00:10:51,199
problems that that end up growing over

00:10:45,350 --> 00:10:53,449
time so in my time at YouTube I've

00:10:51,199 --> 00:10:56,600
worked on a very a lot of different

00:10:53,449 --> 00:10:58,129
systems so I started out building the

00:10:56,600 --> 00:11:01,009
servlet infrastructure doing video

00:10:58,129 --> 00:11:05,240
indexing video transcode full-text

00:11:01,009 --> 00:11:07,730
search built the CDN built video

00:11:05,240 --> 00:11:10,579
delivery built image serving and all

00:11:07,730 --> 00:11:12,170
these things had had the prototypes were

00:11:10,579 --> 00:11:15,620
done in Python and the prototypes lived

00:11:12,170 --> 00:11:17,389
for a surprisingly long time and today

00:11:15,620 --> 00:11:18,949
most of our infrastructure by lines of

00:11:17,389 --> 00:11:20,930
code is still actually in Python and

00:11:18,949 --> 00:11:23,329
every time you actually watch a video

00:11:20,930 --> 00:11:26,029
you're still actually you're going

00:11:23,329 --> 00:11:27,649
through a bunch of Python stuff and at

00:11:26,029 --> 00:11:29,540
last count there was like over a million

00:11:27,649 --> 00:11:32,899
lines of Python running running this

00:11:29,540 --> 00:11:34,639
thing so lest anybody doubt we actually

00:11:32,899 --> 00:11:36,529
really do use Python in a very very big

00:11:34,639 --> 00:11:39,439
way

00:11:36,529 --> 00:11:42,500
so the talk nominally is about

00:11:39,439 --> 00:11:44,389
scalability but I find that people often

00:11:42,500 --> 00:11:45,740
confuse or conflate scalability and

00:11:44,389 --> 00:11:47,809
efficiency so I'm going to try and pick

00:11:45,740 --> 00:11:49,040
them apart and talk a little bit about

00:11:47,809 --> 00:11:50,300
both because they're both important

00:11:49,040 --> 00:11:51,439
especially when things get very large

00:11:50,300 --> 00:11:53,540
and I think that's mostly what people

00:11:51,439 --> 00:11:55,550
are probably interested in is what

00:11:53,540 --> 00:11:59,149
happens when things get sort of beyond

00:11:55,550 --> 00:12:01,069
your wildest expectation during during

00:11:59,149 --> 00:12:04,970
the time I've worked there the you know

00:12:01,069 --> 00:12:07,250
in terms of what has quote scaled up the

00:12:04,970 --> 00:12:09,290
amount of videos viewed has gone up nine

00:12:07,250 --> 00:12:10,579
orders of magnitude and the number of

00:12:09,290 --> 00:12:14,899
developers working on it

00:12:10,579 --> 00:12:16,910
- so you know scalability is sort of a

00:12:14,899 --> 00:12:18,350
problem that groats that has many axes

00:12:16,910 --> 00:12:21,049
and it's you know how do you write code

00:12:18,350 --> 00:12:22,749
how do you you know execute code and how

00:12:21,049 --> 00:12:26,629
do you maintain it that kind of stuff so

00:12:22,749 --> 00:12:28,069
hopefully uh hopefully this will give

00:12:26,629 --> 00:12:32,389
you some ideas and how they might apply

00:12:28,069 --> 00:12:34,879
to your own problems so very generally

00:12:32,389 --> 00:12:36,290
about scalable systems I mean the if I

00:12:34,879 --> 00:12:37,670
could if I could give you one word about

00:12:36,290 --> 00:12:39,860
scalable systems I think the word would

00:12:37,670 --> 00:12:41,899
be simple and every time I'm trying to

00:12:39,860 --> 00:12:44,179
build something new or look at that a

00:12:41,899 --> 00:12:45,399
way to solve a problem I'm looking for

00:12:44,179 --> 00:12:49,779
the most simple thing that will actually

00:12:45,399 --> 00:12:52,339
you know address the problem space and

00:12:49,779 --> 00:12:55,189
you know thing there are lots of

00:12:52,339 --> 00:12:56,689
complicated problems but the first crack

00:12:55,189 --> 00:12:58,670
doesn't have to be that complicated the

00:12:56,689 --> 00:13:00,350
complexity will come over time naturally

00:12:58,670 --> 00:13:03,439
you can start you don't have to help it

00:13:00,350 --> 00:13:05,139
out at the beginning so a lot of YouTube

00:13:03,439 --> 00:13:08,600
systems you know start out from you know

00:13:05,139 --> 00:13:10,910
one Python file and it becomes some

00:13:08,600 --> 00:13:13,249
large ecosystem after many many years

00:13:10,910 --> 00:13:15,319
and that whole process is really what

00:13:13,249 --> 00:13:18,139
you know scalability is about I mean for

00:13:15,319 --> 00:13:19,610
me a scalable system is one that's not

00:13:18,139 --> 00:13:22,369
in your way that you're sort of unaware

00:13:19,610 --> 00:13:23,839
of you know it's not you know it's not

00:13:22,369 --> 00:13:25,879
buzzwords or anything like that it's

00:13:23,839 --> 00:13:33,919
just about a general problem-solving

00:13:25,879 --> 00:13:36,499
ethos so thinking about how to express

00:13:33,919 --> 00:13:39,249
this in a very Zen way house around

00:13:36,499 --> 00:13:39,249
movies

00:13:39,579 --> 00:13:46,129
there we go so if I had to pick the DAO

00:13:44,029 --> 00:13:47,480
of YouTube this this would kind of be it

00:13:46,129 --> 00:13:49,699
right like the simplest solution

00:13:47,480 --> 00:13:51,410
possible the loosest guarantees that

00:13:49,699 --> 00:13:52,879
that are actually practical and the

00:13:51,410 --> 00:13:54,439
reason that you want all these things is

00:13:52,879 --> 00:13:57,110
because you need flexibility to solve

00:13:54,439 --> 00:13:58,459
problems and the minute you over specify

00:13:57,110 --> 00:14:00,410
something you paint yourself into a

00:13:58,459 --> 00:14:03,589
corner you're not going to be able to to

00:14:00,410 --> 00:14:05,419
make those guarantees and you know the

00:14:03,589 --> 00:14:06,769
your problem becomes automatically

00:14:05,419 --> 00:14:09,290
complex when you're trying to guarantee

00:14:06,769 --> 00:14:11,600
everything and you you leave yourself no

00:14:09,290 --> 00:14:13,309
way out so this is you know whenever

00:14:11,600 --> 00:14:15,439
there's a product design review or you

00:14:13,309 --> 00:14:17,029
know or like the engineering design

00:14:15,439 --> 00:14:18,769
review these are the types of things

00:14:17,029 --> 00:14:20,480
that that we're always looking to to

00:14:18,769 --> 00:14:22,100
encourage you know what's the first

00:14:20,480 --> 00:14:23,100
crack how are you going to iterate how

00:14:22,100 --> 00:14:25,120
you know

00:14:23,100 --> 00:14:26,379
what you know what do we know about the

00:14:25,120 --> 00:14:29,620
way that this data is going to get used

00:14:26,379 --> 00:14:32,170
these things change over time so how

00:14:29,620 --> 00:14:34,829
YouTube was originally designed had no

00:14:32,170 --> 00:14:36,850
bearing on what it actually became so

00:14:34,829 --> 00:14:40,509
does anybody know that YouTube was a

00:14:36,850 --> 00:14:43,569
dating site yeah there you go

00:14:40,509 --> 00:14:45,160
so do not like to do simply a design for

00:14:43,569 --> 00:14:46,750
that I think we would be having a

00:14:45,160 --> 00:14:53,970
substantially different conversation

00:14:46,750 --> 00:14:56,319
so stay flexible so scalable techniques

00:14:53,970 --> 00:14:58,480
you know these are these are probably

00:14:56,319 --> 00:15:00,879
not new things but it's amazing how just

00:14:58,480 --> 00:15:03,459
a few core ideas can apply in a lot of

00:15:00,879 --> 00:15:05,860
dimensions so divide and conquer I mean

00:15:03,459 --> 00:15:07,689
this is like the the scalability

00:15:05,860 --> 00:15:10,149
technique right here everything is about

00:15:07,689 --> 00:15:12,519
partitioning out work deciding how to

00:15:10,149 --> 00:15:15,160
execute it etc and this applies to so

00:15:12,519 --> 00:15:16,480
many things from you know in the in the

00:15:15,160 --> 00:15:18,370
simplest expression you think about your

00:15:16,480 --> 00:15:19,540
web tier I'm going to have a bunch of

00:15:18,370 --> 00:15:20,560
web servers and they're all going to

00:15:19,540 --> 00:15:22,060
operate independently

00:15:20,560 --> 00:15:23,680
that's divide and conquer I'm going to

00:15:22,060 --> 00:15:25,660
spray them out it doesn't really matter

00:15:23,680 --> 00:15:31,629
they're all more or less equivalent I'll

00:15:25,660 --> 00:15:33,430
process them you know no problem this is

00:15:31,629 --> 00:15:34,930
also you know the the crux of database

00:15:33,430 --> 00:15:36,910
sharding and that kind of stuff it's all

00:15:34,930 --> 00:15:38,649
about how do you partition the problem

00:15:36,910 --> 00:15:40,569
how do you figure out what kind of

00:15:38,649 --> 00:15:43,959
communication you need between the parts

00:15:40,569 --> 00:15:45,009
that you've that you've subdivided those

00:15:43,959 --> 00:15:46,540
are things that you want to think about

00:15:45,009 --> 00:15:48,910
early on and really influence how the

00:15:46,540 --> 00:15:50,769
system is able to grow and again simple

00:15:48,910 --> 00:15:54,430
and loose connections here are really

00:15:50,769 --> 00:15:55,569
valuable they let you you know this is

00:15:54,430 --> 00:15:58,149
essentially another great feature of

00:15:55,569 --> 00:16:00,339
Python and if you because everything is

00:15:58,149 --> 00:16:02,680
dynamic if you no matter how bad your

00:16:00,339 --> 00:16:06,579
API is the first crack you can pretty

00:16:02,680 --> 00:16:08,860
much stub or modify or decorate your way

00:16:06,579 --> 00:16:10,329
out of a lot of problems so that

00:16:08,860 --> 00:16:14,430
definitely have used a lot of dirty

00:16:10,329 --> 00:16:16,720
tricks to get something to work you know

00:16:14,430 --> 00:16:19,930
approximate correctness is another one

00:16:16,720 --> 00:16:21,540
of my favorite techniques this is sort

00:16:19,930 --> 00:16:24,670
of a you know one of the first rules of

00:16:21,540 --> 00:16:26,399
system antics is the state of the system

00:16:24,670 --> 00:16:28,959
is that what it which is reported to be

00:16:26,399 --> 00:16:30,959
so if you can't tell that that your

00:16:28,959 --> 00:16:33,040
system is fundamentally skewing and

00:16:30,959 --> 00:16:36,550
inconsistent as from the user

00:16:33,040 --> 00:16:38,830
perspective then it's not

00:16:36,550 --> 00:16:42,640
I mean this you know a real-world

00:16:38,830 --> 00:16:45,610
manifestation of this is say you you

00:16:42,640 --> 00:16:47,590
write a new comment and somebody on the

00:16:45,610 --> 00:16:49,360
other side of the world you know loads

00:16:47,590 --> 00:16:50,950
the watch page and even though the

00:16:49,360 --> 00:16:53,080
comment might have been made you know a

00:16:50,950 --> 00:16:55,510
microsecond before he might not get it

00:16:53,080 --> 00:16:57,790
for you know whatever 300 400

00:16:55,510 --> 00:16:59,589
milliseconds you know but he doesn't

00:16:57,790 --> 00:17:01,990
know that so he doesn't care now you the

00:16:59,589 --> 00:17:03,880
the you the owner of that who wrote the

00:17:01,990 --> 00:17:05,230
comment expect to see it so we should

00:17:03,880 --> 00:17:06,610
you know maybe do a few little tricks to

00:17:05,230 --> 00:17:08,980
make sure that you see the comment and

00:17:06,610 --> 00:17:10,870
that's you know you cheat a little bit

00:17:08,980 --> 00:17:12,339
right you cheat too so that your your

00:17:10,870 --> 00:17:14,500
system doesn't have to have globally

00:17:12,339 --> 00:17:15,970
like worldwide consistent transactions

00:17:14,500 --> 00:17:18,069
because that would be super expensive

00:17:15,970 --> 00:17:19,720
and you know kind of overkill I mean

00:17:18,069 --> 00:17:22,750
it's not like every comment is actually

00:17:19,720 --> 00:17:24,670
a financial transaction so kind of

00:17:22,750 --> 00:17:26,290
knowing knowing when to cheat is also I

00:17:24,670 --> 00:17:28,920
think that's on the on the slide that's

00:17:26,290 --> 00:17:33,940
another important important aspect of

00:17:28,920 --> 00:17:35,680
scalability in terms of relational

00:17:33,940 --> 00:17:38,230
database systems and storage systems in

00:17:35,680 --> 00:17:39,310
general you know I put up expert knob

00:17:38,230 --> 00:17:41,770
twiddling it's like well what do you

00:17:39,310 --> 00:17:43,120
know about what about your consistency

00:17:41,770 --> 00:17:44,830
model you know the comments is a good

00:17:43,120 --> 00:17:45,910
example like okay we want to make sure

00:17:44,830 --> 00:17:48,880
that once they're written they don't go

00:17:45,910 --> 00:17:51,340
anywhere but is eventually consistent

00:17:48,880 --> 00:17:52,390
good enough or is it you know is it

00:17:51,340 --> 00:17:53,950
something else like have you rented a

00:17:52,390 --> 00:17:55,990
movie oh well we're in a movie sounds

00:17:53,950 --> 00:17:57,610
like you give us money and we should do

00:17:55,990 --> 00:17:59,200
the best we can to make sure that we

00:17:57,610 --> 00:18:00,700
never lose that so there are different

00:17:59,200 --> 00:18:02,679
consistency models based on different

00:18:00,700 --> 00:18:08,290
sub F sub parts of the application as a

00:18:02,679 --> 00:18:09,700
whole you know this is this is the

00:18:08,290 --> 00:18:11,800
hallmark of sort of good system design

00:18:09,700 --> 00:18:17,980
every system is tailored eventually to

00:18:11,800 --> 00:18:20,890
what to its specific requirements jitter

00:18:17,980 --> 00:18:22,150
this is a hot word in our group all the

00:18:20,890 --> 00:18:25,030
time you know if your system doesn't

00:18:22,150 --> 00:18:28,000
jitter you get thundering herd's

00:18:25,030 --> 00:18:29,200
you know I mean these days like

00:18:28,000 --> 00:18:31,120
distributed applications are really

00:18:29,200 --> 00:18:32,740
weather systems and a lot of debugging

00:18:31,120 --> 00:18:34,600
them is sort of it's about as

00:18:32,740 --> 00:18:37,810
deterministic as predicting the weather

00:18:34,600 --> 00:18:39,520
and jitter sort of introduces more

00:18:37,810 --> 00:18:41,679
randomness because surprisingly things

00:18:39,520 --> 00:18:43,600
have a tendency to stack up so a good

00:18:41,679 --> 00:18:45,280
example for jitter is of cash

00:18:43,600 --> 00:18:47,110
explorations so if you have a very

00:18:45,280 --> 00:18:48,650
popular video we want to cache things as

00:18:47,110 --> 00:18:50,960
best we can

00:18:48,650 --> 00:18:53,030
and let's say we set the cache timeout

00:18:50,960 --> 00:18:55,880
for I don't know like an hour or

00:18:53,030 --> 00:18:57,230
something or maybe 10 minutes or or

00:18:55,880 --> 00:18:59,120
certain other popular content like the

00:18:57,230 --> 00:19:01,130
most popular videos yesterday we might

00:18:59,120 --> 00:19:04,070
cache for I don't know 24 hours or

00:19:01,130 --> 00:19:06,800
something if everything expires at one

00:19:04,070 --> 00:19:08,900
given time then every every machine or

00:19:06,800 --> 00:19:10,640
we'll observe that expiration at exactly

00:19:08,900 --> 00:19:13,130
the same time and go back and try and

00:19:10,640 --> 00:19:14,630
compute it this is of course awful and

00:19:13,130 --> 00:19:16,880
this is where you're basically making

00:19:14,630 --> 00:19:20,630
your own thundering herd's by jittering

00:19:16,880 --> 00:19:22,820
you say okay well my desired expiration

00:19:20,630 --> 00:19:24,770
time is about 24 hours I'm going to add

00:19:22,820 --> 00:19:27,290
some variants in there and randomly I'll

00:19:24,770 --> 00:19:30,680
jitter between say 18 and 30 hours and

00:19:27,290 --> 00:19:32,000
that prevents things from stacking up we

00:19:30,680 --> 00:19:33,740
use this all over the place

00:19:32,000 --> 00:19:35,120
because it turns out that systems have a

00:19:33,740 --> 00:19:37,790
tendency to kind of sink self

00:19:35,120 --> 00:19:42,080
synchronize and line up and try to make

00:19:37,790 --> 00:19:43,730
them destroy themselves so I mean it's

00:19:42,080 --> 00:19:45,950
actually it's fascinating kind of watch

00:19:43,730 --> 00:19:48,140
I mean you get a slow disk system on one

00:19:45,950 --> 00:19:49,970
machine and everybody is waiting on a

00:19:48,140 --> 00:19:51,230
request so all of a sudden all these

00:19:49,970 --> 00:19:53,600
other requests on completely different

00:19:51,230 --> 00:19:55,850
machines are now synchronized and this

00:19:53,600 --> 00:19:57,800
happens you know when you have many many

00:19:55,850 --> 00:19:59,450
machines you have many types of these

00:19:57,800 --> 00:20:01,400
events and everyone is actually removing

00:19:59,450 --> 00:20:05,900
entropy from the system so you have to

00:20:01,400 --> 00:20:07,730
put some back in cheating we covered a

00:20:05,900 --> 00:20:10,580
big fan of cheating actually cheating I

00:20:07,730 --> 00:20:12,950
should cover a little more because it's

00:20:10,580 --> 00:20:15,140
so awesome I mean my old boss told me

00:20:12,950 --> 00:20:18,140
that the fastest function call is the

00:20:15,140 --> 00:20:21,350
one that never happens and I have to

00:20:18,140 --> 00:20:23,990
have to agree so one of the things that

00:20:21,350 --> 00:20:25,310
we did very early on was we would come

00:20:23,990 --> 00:20:29,090
up with this is sort of in the

00:20:25,310 --> 00:20:31,370
approximate correctness vein is when you

00:20:29,090 --> 00:20:33,890
have monotonically increasing counters

00:20:31,370 --> 00:20:36,650
like you know say view count or how many

00:20:33,890 --> 00:20:38,000
times someone see my profile you could

00:20:36,650 --> 00:20:40,220
do a full transaction every time you

00:20:38,000 --> 00:20:41,870
wanted to update that or you could do a

00:20:40,220 --> 00:20:44,540
transaction once in a while and update

00:20:41,870 --> 00:20:46,280
by a random amount and have it as long

00:20:44,540 --> 00:20:47,780
as it you know changes from odd to even

00:20:46,280 --> 00:20:49,990
people would probably believe that it's

00:20:47,780 --> 00:20:49,990
real

00:20:50,240 --> 00:20:55,380
so I mean you do want the number you

00:20:54,030 --> 00:21:00,560
definitely want to get that more than or

00:20:55,380 --> 00:21:02,790
the sign of the odd-even reverses so

00:21:00,560 --> 00:21:08,460
know how to fake data to it's a good

00:21:02,790 --> 00:21:11,850
important about in about cheating okay a

00:21:08,460 --> 00:21:15,600
scalable components can I tell you about

00:21:11,850 --> 00:21:18,210
these you know it when you see it right

00:21:15,600 --> 00:21:21,180
the you can look at the general API and

00:21:18,210 --> 00:21:22,530
have a good a good feel for how it's

00:21:21,180 --> 00:21:23,790
going to shake out are the inputs

00:21:22,530 --> 00:21:28,080
well-defined do I know what I'm getting

00:21:23,790 --> 00:21:30,210
out a lot of this ends up a lot of this

00:21:28,080 --> 00:21:31,560
ends up being about data and as you know

00:21:30,210 --> 00:21:33,930
the longer I work at YouTube the more

00:21:31,560 --> 00:21:35,790
people we work with the more I think how

00:21:33,930 --> 00:21:38,700
critical data really is like having a

00:21:35,790 --> 00:21:40,230
very tight specification of what what

00:21:38,700 --> 00:21:42,390
data is coming out of every function or

00:21:40,230 --> 00:21:44,130
how it flows actually helps you

00:21:42,390 --> 00:21:46,320
understand the application without

00:21:44,130 --> 00:21:47,730
without documentation sort of you can

00:21:46,320 --> 00:21:50,040
pop in there and just grab this data

00:21:47,730 --> 00:21:51,540
object and look at it and say okay this

00:21:50,040 --> 00:21:53,550
is what I need or this is what I you

00:21:51,540 --> 00:21:55,980
know this is what's happening F you know

00:21:53,550 --> 00:21:59,280
before and after these of this functions

00:21:55,980 --> 00:22:00,900
applied it also lets you sort of manage

00:21:59,280 --> 00:22:02,550
expectations about what's coming back

00:22:00,900 --> 00:22:03,840
and what's not we are actually not

00:22:02,550 --> 00:22:05,880
particularly good at this but we are

00:22:03,840 --> 00:22:11,970
striving to become much better at this

00:22:05,880 --> 00:22:13,830
so we're all learning together things

00:22:11,970 --> 00:22:16,380
have a tendency to move towards our pcs

00:22:13,830 --> 00:22:18,690
especially in Python I mean things are

00:22:16,380 --> 00:22:20,670
so fast and loose it ends up being you

00:22:18,690 --> 00:22:22,080
know the structure of your code is

00:22:20,670 --> 00:22:24,810
entirely based on the discipline of your

00:22:22,080 --> 00:22:27,930
programmers so establishing good

00:22:24,810 --> 00:22:29,910
conventions ahead of time definitely

00:22:27,930 --> 00:22:31,230
helps and when that all else fails you

00:22:29,910 --> 00:22:33,030
stick that our PC while you're like

00:22:31,230 --> 00:22:34,320
alright I am I will give you an integer

00:22:33,030 --> 00:22:37,410
and you should give me a boolean back

00:22:34,320 --> 00:22:40,200
and that's it you know that is the sum

00:22:37,410 --> 00:22:41,700
total of our conversation and when you

00:22:40,200 --> 00:22:42,990
have these components the you know you

00:22:41,700 --> 00:22:46,110
want to be able to swap them in and out

00:22:42,990 --> 00:22:48,540
right it's your component will not be

00:22:46,110 --> 00:22:50,220
perfect it may even have a vanishingly

00:22:48,540 --> 00:22:53,010
small lifetime your first version might

00:22:50,220 --> 00:22:55,470
last a month it might last six it you

00:22:53,010 --> 00:22:57,720
know who knows by drawing these lines

00:22:55,470 --> 00:22:59,460
you help yourself you make some of your

00:22:57,720 --> 00:23:00,570
own luck when things go south you'll be

00:22:59,460 --> 00:23:02,100
able to swap it out and do something

00:23:00,570 --> 00:23:03,660
different and sometimes that means

00:23:02,100 --> 00:23:06,230
rewriting something in PI

00:23:03,660 --> 00:23:08,580
and see and sometimes it means you know

00:23:06,230 --> 00:23:10,500
getting rid of it entirely or just

00:23:08,580 --> 00:23:11,910
tweaking a few things you don't know you

00:23:10,500 --> 00:23:16,230
don't know until you you're able to

00:23:11,910 --> 00:23:19,700
observe this is what I was hinting about

00:23:16,230 --> 00:23:22,680
data I mean when you have so many people

00:23:19,700 --> 00:23:24,750
it becomes hard you can't no one can

00:23:22,680 --> 00:23:26,540
know the entire sum total of the

00:23:24,750 --> 00:23:28,350
codebase so you have to think about

00:23:26,540 --> 00:23:30,200
components and like oh this is video

00:23:28,350 --> 00:23:33,960
transcoder do trans code is definitely

00:23:30,200 --> 00:23:36,750
distinct from video search and the

00:23:33,960 --> 00:23:38,460
database infrastructure so I want you

00:23:36,750 --> 00:23:40,320
know well-defined sub components I mean

00:23:38,460 --> 00:23:42,030
this is all just like basically good

00:23:40,320 --> 00:23:44,370
software design but a lot of these

00:23:42,030 --> 00:23:46,350
things do end up having to communicate

00:23:44,370 --> 00:23:47,850
with each other and in that in that

00:23:46,350 --> 00:23:49,590
respect I find you know having a good

00:23:47,850 --> 00:23:51,840
data specification is really helpful and

00:23:49,590 --> 00:23:54,390
the like the greatest sin I think I ever

00:23:51,840 --> 00:23:56,820
committed was the interface between the

00:23:54,390 --> 00:23:59,340
server layer and the template layer is a

00:23:56,820 --> 00:24:02,100
dictionary this is a phenomenally bad

00:23:59,340 --> 00:24:04,740
idea you should not do this it would

00:24:02,100 --> 00:24:06,270
have taken like all of 10 minutes to

00:24:04,740 --> 00:24:07,740
actually add a meaningful object that

00:24:06,270 --> 00:24:09,120
says oh this is the watch page and the

00:24:07,740 --> 00:24:11,570
watch page substantially has a video

00:24:09,120 --> 00:24:14,490
some comments and some related videos

00:24:11,570 --> 00:24:16,170
that would have solved so many so many

00:24:14,490 --> 00:24:17,940
problems because right now it's a

00:24:16,170 --> 00:24:20,010
dictionary that may have any hooklink a

00:24:17,940 --> 00:24:21,900
few hundred attributes and it's in the

00:24:20,010 --> 00:24:23,820
Oh things are getting better but you

00:24:21,900 --> 00:24:28,350
know I don't want you think that we

00:24:23,820 --> 00:24:30,120
always make the right choice so a little

00:24:28,350 --> 00:24:31,590
bit about efficiency right as I said

00:24:30,120 --> 00:24:33,870
it's it's completely uncorrelated with

00:24:31,590 --> 00:24:36,510
scalability in fact you have to trade

00:24:33,870 --> 00:24:37,890
one for the other right because the most

00:24:36,510 --> 00:24:39,420
efficient thing would be to cram

00:24:37,890 --> 00:24:41,100
everything in one process write it and

00:24:39,420 --> 00:24:42,510
see whatever but that may not be

00:24:41,100 --> 00:24:46,410
particularly scalable especially if you

00:24:42,510 --> 00:24:48,720
value your own time right the big thing

00:24:46,410 --> 00:24:51,390
is focusing on the macro level your

00:24:48,720 --> 00:24:53,070
components how they break out does it

00:24:51,390 --> 00:24:54,960
make sense to do this as an RPC or

00:24:53,070 --> 00:24:56,670
should I just do it in line should I

00:24:54,960 --> 00:24:59,220
break it into a sub package and just say

00:24:56,670 --> 00:25:01,230
okay well someday this may be different

00:24:59,220 --> 00:25:02,880
focusing on the algorithms really does

00:25:01,230 --> 00:25:05,190
make a big difference and you know one

00:25:02,880 --> 00:25:07,200
of the powerful things about Python is

00:25:05,190 --> 00:25:11,700
the amount of effort to when an actually

00:25:07,200 --> 00:25:13,530
good algorithm is pretty low you have

00:25:11,700 --> 00:25:15,150
you know all these built-in data types

00:25:13,530 --> 00:25:16,650
but there really there are some other

00:25:15,150 --> 00:25:17,100
fantastic features like the bisect

00:25:16,650 --> 00:25:19,620
module

00:25:17,100 --> 00:25:21,809
I mean this thing single-handedly you

00:25:19,620 --> 00:25:23,700
can take a ratty list that's

00:25:21,809 --> 00:25:24,960
accidentally sorted and do something

00:25:23,700 --> 00:25:26,520
meaningful and you can serialize that

00:25:24,960 --> 00:25:29,820
listed discs and read it in and then do

00:25:26,520 --> 00:25:31,200
something very fast and you could do

00:25:29,820 --> 00:25:32,970
this in C obviously but you'd be

00:25:31,200 --> 00:25:34,980
inventing a lot of wheels Python it's

00:25:32,970 --> 00:25:37,049
just sort of there and yeah it will be a

00:25:34,980 --> 00:25:39,090
little bit less efficient in Python but

00:25:37,049 --> 00:25:40,169
the the overall structure the overall

00:25:39,090 --> 00:25:43,080
order of magnitude of all the

00:25:40,169 --> 00:25:44,880
computations is much lower and you know

00:25:43,080 --> 00:25:46,679
yeah you'll pay a penalty Python versus

00:25:44,880 --> 00:25:50,700
C but overall you're doing the right

00:25:46,679 --> 00:25:53,130
thing a big thing about efficiency is is

00:25:50,700 --> 00:25:54,630
obviously measurement and in Python

00:25:53,130 --> 00:25:57,270
measurement is a little bit like t

00:25:54,630 --> 00:25:58,470
relief reading I think you get you have

00:25:57,270 --> 00:26:00,539
to get some experience before you're

00:25:58,470 --> 00:26:01,679
able to make intuitive leaps and just

00:26:00,539 --> 00:26:04,340
when you think you should do intuitive

00:26:01,679 --> 00:26:06,510
leaps you can make them you shouldn't

00:26:04,340 --> 00:26:08,130
there's a lot of things and Python that

00:26:06,510 --> 00:26:10,860
are counterintuitive cost of garbage

00:26:08,130 --> 00:26:13,590
collection you know all sorts of things

00:26:10,860 --> 00:26:15,409
like most of our App spends its most

00:26:13,590 --> 00:26:19,309
chunks of our app spend its time

00:26:15,409 --> 00:26:21,360
serializing and profiling a serializer

00:26:19,309 --> 00:26:22,799
you know it's a lot like a sewer like

00:26:21,360 --> 00:26:23,880
what you put into it depends you know

00:26:22,799 --> 00:26:26,370
what you get out of it depends on what

00:26:23,880 --> 00:26:28,080
you put into it so if you set if you

00:26:26,370 --> 00:26:31,740
test it with like a bag of imps and

00:26:28,080 --> 00:26:33,210
normally you know that's great synthetic

00:26:31,740 --> 00:26:35,460
data but normally if your scent you're

00:26:33,210 --> 00:26:36,510
putting four K Unicode blobs in there

00:26:35,460 --> 00:26:38,460
probably you should have tested that

00:26:36,510 --> 00:26:43,200
because I guarantee you that's going to

00:26:38,460 --> 00:26:44,520
be different so what are some you know

00:26:43,200 --> 00:26:49,830
what are some ways that we get

00:26:44,520 --> 00:26:51,299
efficiency in Python beyond like I've

00:26:49,830 --> 00:26:53,970
enumerated a few libraries and I'll talk

00:26:51,299 --> 00:26:55,500
a little bit about them but efficiency

00:26:53,970 --> 00:26:58,409
in Python is more about knowing what not

00:26:55,500 --> 00:27:01,440
to do there's a lot of really powerful

00:26:58,409 --> 00:27:03,809
meta programming things and how they

00:27:01,440 --> 00:27:06,210
interact and how how dynamic you make

00:27:03,809 --> 00:27:07,740
things has a pretty direct correlation

00:27:06,210 --> 00:27:10,890
how expensive it is to run your Python

00:27:07,740 --> 00:27:13,380
app so Dom tends to turn out to be fast

00:27:10,890 --> 00:27:15,270
so this is something that we also we use

00:27:13,380 --> 00:27:17,669
a lot and it also it has other side

00:27:15,270 --> 00:27:19,530
effects to dumber code is easier to grep

00:27:17,669 --> 00:27:21,360
for is easier to maintain is easier to

00:27:19,530 --> 00:27:23,970
you know these are the kind of tools

00:27:21,360 --> 00:27:27,450
that you know I'm an Emacs and grep kind

00:27:23,970 --> 00:27:29,309
of kind of problem solver so are the

00:27:27,450 --> 00:27:30,320
more magical our code bases the harder

00:27:29,309 --> 00:27:32,509
it is for me to decode

00:27:30,320 --> 00:27:33,440
how it's actually functioning these are

00:27:32,509 --> 00:27:36,519
you know these are important

00:27:33,440 --> 00:27:38,779
characteristics of a really large system

00:27:36,519 --> 00:27:40,850
so libraries ones you've probably heard

00:27:38,779 --> 00:27:44,720
of obviously curl it turns out that

00:27:40,850 --> 00:27:47,029
pretty much every version of HTTP client

00:27:44,720 --> 00:27:49,429
side libraries are awful and curl is

00:27:47,029 --> 00:27:52,429
curl is the least awful and it's it's

00:27:49,429 --> 00:27:54,409
pretty complicated to to crack into but

00:27:52,429 --> 00:27:57,529
the performance is excellent you know

00:27:54,409 --> 00:27:59,480
for an HTTP server we did a recent a

00:27:57,529 --> 00:28:02,090
recent project where we swapped out one

00:27:59,480 --> 00:28:03,950
fairly major protocol for an HTTP

00:28:02,090 --> 00:28:08,269
implementation and even though it was in

00:28:03,950 --> 00:28:10,220
in see in in all the amount of

00:28:08,269 --> 00:28:12,490
time we spent sending stuff over the

00:28:10,220 --> 00:28:15,740
wire was nuts and we actually ended up

00:28:12,490 --> 00:28:19,129
ripping out ripping out HTTP doing a

00:28:15,740 --> 00:28:22,820
direct socket thing with with Python and

00:28:19,129 --> 00:28:25,730
that ended up being about on global CPU

00:28:22,820 --> 00:28:26,840
about eight percent cheaper so you have

00:28:25,730 --> 00:28:28,129
to measure right sometimes there are

00:28:26,840 --> 00:28:30,350
counterintuitive things like this it

00:28:28,129 --> 00:28:33,700
turns out that HTTP implementations the

00:28:30,350 --> 00:28:33,700
envelope them is just really expensive

00:28:33,850 --> 00:28:40,519
other things wiseguy wise guys are fast

00:28:37,639 --> 00:28:44,090
cgi servlet container thingy and it's

00:28:40,519 --> 00:28:47,809
it's some C code and it's some process

00:28:44,090 --> 00:28:49,159
management and pre forking code youtube'

00:28:47,809 --> 00:28:51,950
is not a synchronous everything is

00:28:49,159 --> 00:28:55,159
blocking YouTube also thinks Apache is

00:28:51,950 --> 00:28:59,480
real rock star technology and every

00:28:55,159 --> 00:29:01,340
request you watch is actually yeah every

00:28:59,480 --> 00:29:04,220
request you watch is going through

00:29:01,340 --> 00:29:05,509
Apache at some level so just when you

00:29:04,220 --> 00:29:07,850
think you have to swap out a pack to you

00:29:05,509 --> 00:29:09,620
you really don't Spitfire is our

00:29:07,850 --> 00:29:11,269
templating system if you've seen cheetah

00:29:09,620 --> 00:29:14,210
you'll probably recognize a lot of

00:29:11,269 --> 00:29:17,169
Spitfire it has an abstract syntax tree

00:29:14,210 --> 00:29:20,000
internally so we can is lets us do

00:29:17,169 --> 00:29:22,629
transformations and some optimizations

00:29:20,000 --> 00:29:24,740
that end up making a bit faster

00:29:22,629 --> 00:29:26,690
serialization formats I could go on for

00:29:24,740 --> 00:29:28,039
a long time about these but it turns out

00:29:26,690 --> 00:29:30,919
enough that no matter which one you use

00:29:28,039 --> 00:29:34,700
they're all expensive so you should you

00:29:30,919 --> 00:29:36,200
should measure and yeah just just

00:29:34,700 --> 00:29:38,539
measure and don't use pickle for things

00:29:36,200 --> 00:29:39,919
if it's coming if it's good mom I don't

00:29:38,539 --> 00:29:42,529
think I should have to tell you this but

00:29:39,919 --> 00:29:44,919
yeah don't use piggle we did it's not a

00:29:42,529 --> 00:29:44,919
good choice

00:29:47,890 --> 00:29:55,040
okay efficient tools Apache and PI

00:29:51,800 --> 00:29:56,630
Apache I mean HTTP server Linux I don't

00:29:55,040 --> 00:30:00,980
think they major shock that we're

00:29:56,630 --> 00:30:03,110
running on Linux you know I did some

00:30:00,980 --> 00:30:04,850
programming on BSD and I actually worked

00:30:03,110 --> 00:30:07,720
at Microsoft at one point so I have some

00:30:04,850 --> 00:30:07,720
Windows experience

00:30:08,320 --> 00:30:12,710
Linux is is good in terms of manholes

00:30:11,270 --> 00:30:15,440
there's always a way to get in and see

00:30:12,710 --> 00:30:17,240
how your system is behaving and the

00:30:15,440 --> 00:30:19,400
awesome thing about that is a no bet no

00:30:17,240 --> 00:30:22,760
matter how bad you're like the app is

00:30:19,400 --> 00:30:24,860
that you've written at some fundamental

00:30:22,760 --> 00:30:26,750
level the resources it's consuming are

00:30:24,860 --> 00:30:28,340
explorable with basic Linux tools so

00:30:26,750 --> 00:30:29,150
this is like a super powerful thing when

00:30:28,340 --> 00:30:33,440
you're trying to build a distributed

00:30:29,150 --> 00:30:35,600
system astray is TCP dump whatever my

00:30:33,440 --> 00:30:38,240
sequel YouTube uses a lot of my sequel

00:30:35,600 --> 00:30:39,680
stuff when again when you watch a video

00:30:38,240 --> 00:30:41,030
you're getting data from my sequel

00:30:39,680 --> 00:30:45,260
you're getting a lot of data from my

00:30:41,030 --> 00:30:47,030
sequel and you know sometimes we use a

00:30:45,260 --> 00:30:50,270
relational database and sometimes we use

00:30:47,030 --> 00:30:51,950
it more as a as a blob store again it's

00:30:50,270 --> 00:30:54,800
all about tuning and making choices and

00:30:51,950 --> 00:30:56,390
how you organize your data but you know

00:30:54,800 --> 00:30:58,790
anybody who's sort of blind you tell

00:30:56,390 --> 00:31:01,220
finally tells you that my sequel doesn't

00:30:58,790 --> 00:31:03,890
scale or doesn't do something probably

00:31:01,220 --> 00:31:06,440
has not considered exactly how to solve

00:31:03,890 --> 00:31:08,690
the problem there are good fits for my

00:31:06,440 --> 00:31:11,540
sequel and bad so it's it's a good but

00:31:08,690 --> 00:31:13,460
it's a good tool this is a shameless

00:31:11,540 --> 00:31:15,650
plug of the test is a new project that

00:31:13,460 --> 00:31:17,450
I'm working on it's actually written and

00:31:15,650 --> 00:31:20,030
go and it's a front-end to my sequel and

00:31:17,450 --> 00:31:23,180
this does a lot of query optimization on

00:31:20,030 --> 00:31:25,310
the fly query rewriting and does a lot

00:31:23,180 --> 00:31:26,810
of proxy and stuff it's all it's a long

00:31:25,310 --> 00:31:28,490
long project but if we just actually

00:31:26,810 --> 00:31:31,730
finished our first open source release

00:31:28,490 --> 00:31:33,080
of a subcomponent so this is currently

00:31:31,730 --> 00:31:34,100
what serves every YouTube database

00:31:33,080 --> 00:31:36,500
request

00:31:34,100 --> 00:31:38,120
it's an RPC system this is what I was

00:31:36,500 --> 00:31:42,020
citing when I said HTTP turns out to be

00:31:38,120 --> 00:31:44,150
slow zookeeper if zookeeper is the lone

00:31:42,020 --> 00:31:46,660
piece of java software that makes me

00:31:44,150 --> 00:31:49,970
think that java might be redeemable

00:31:46,660 --> 00:31:53,270
zookeeper is a distributed sort of lock

00:31:49,970 --> 00:31:55,100
server II thing and it's in some

00:31:53,270 --> 00:31:56,940
dimensions that looks like a very

00:31:55,100 --> 00:31:58,770
reliable filesystem

00:31:56,940 --> 00:32:02,700
it's we use it for configuration on a

00:31:58,770 --> 00:32:05,370
lot of things it's really it's a really

00:32:02,700 --> 00:32:07,350
interesting piece of technology it's

00:32:05,370 --> 00:32:09,870
also very like very hard to understand

00:32:07,350 --> 00:32:11,040
how to use it correctly so don't just

00:32:09,870 --> 00:32:13,820
bung things in there you have to

00:32:11,040 --> 00:32:13,820
actually read the manual

00:32:14,840 --> 00:32:21,830
so productivity these are sort of

00:32:19,770 --> 00:32:23,730
nebulous topics what can I say I mean

00:32:21,830 --> 00:32:25,800
frankly I believe more in philosophy

00:32:23,730 --> 00:32:28,050
than doctrine like we try to say like

00:32:25,800 --> 00:32:29,460
simple all right make it simple what

00:32:28,050 --> 00:32:30,780
does that mean I don't know but I'll

00:32:29,460 --> 00:32:32,220
know it when I see it like if you come

00:32:30,780 --> 00:32:33,840
to me and your first code review is you

00:32:32,220 --> 00:32:35,700
know thousands of lines and many many

00:32:33,840 --> 00:32:37,380
files probably there was an easier way

00:32:35,700 --> 00:32:39,450
for you to do it and that's and that's

00:32:37,380 --> 00:32:41,250
how I want you to start and you know

00:32:39,450 --> 00:32:45,960
your first demo should be simple get it

00:32:41,250 --> 00:32:48,240
working then iterate my personal pet

00:32:45,960 --> 00:32:51,360
peeve is documentation where people put

00:32:48,240 --> 00:32:54,150
like a function are called video ID and

00:32:51,360 --> 00:32:57,840
then a comment saying argh : video ID

00:32:54,150 --> 00:32:59,790
space this is the video ID like great

00:32:57,840 --> 00:33:01,620
now I lost like two lines of header to

00:32:59,790 --> 00:33:03,990
line you know I have a pretty small

00:33:01,620 --> 00:33:05,460
screen and every line counts in this

00:33:03,990 --> 00:33:07,410
line I'm going to guess let me tell you

00:33:05,460 --> 00:33:09,630
a video ID probably video ID please

00:33:07,410 --> 00:33:11,250
don't write this again this may be a

00:33:09,630 --> 00:33:14,000
minority report but this thing bothers

00:33:11,250 --> 00:33:14,000
the hell out of me

00:33:14,150 --> 00:33:18,990
so more conventions just you know how do

00:33:16,650 --> 00:33:20,700
we organize code we frankly don't do a

00:33:18,990 --> 00:33:23,030
lot of object-oriented programming we do

00:33:20,700 --> 00:33:26,900
a lot of namespaces we'd have a lot of

00:33:23,030 --> 00:33:29,460
you know in C this would be called a

00:33:26,900 --> 00:33:31,040
camera what it's called and C and you

00:33:29,460 --> 00:33:34,410
have this truck and you pass it in I

00:33:31,040 --> 00:33:37,050
can't remember anyway we use we use

00:33:34,410 --> 00:33:41,640
classes to organize data and we rarely

00:33:37,050 --> 00:33:43,200
use them for object oriented stuff back

00:33:41,640 --> 00:33:44,670
when we started this project and the

00:33:43,200 --> 00:33:48,660
previous company I worked at which is

00:33:44,670 --> 00:33:50,520
also in Python that was relevant module

00:33:48,660 --> 00:33:52,500
level functions were a lot faster now

00:33:50,520 --> 00:33:55,770
probably not so much the case two-six is

00:33:52,500 --> 00:33:57,480
a lot of great caching I'm sort of

00:33:55,770 --> 00:33:59,370
running out of time so I'm going to zoom

00:33:57,480 --> 00:34:00,840
a little a little bit and get right to

00:33:59,370 --> 00:34:05,340
questions which i think will probably be

00:34:00,840 --> 00:34:06,630
more interesting than me talking I don't

00:34:05,340 --> 00:34:09,360
know where I picked this thing up but

00:34:06,630 --> 00:34:11,249
whenever I talked to some some really

00:34:09,360 --> 00:34:13,419
smart dude I always

00:34:11,249 --> 00:34:16,359
what motivated this guy to make these

00:34:13,419 --> 00:34:17,859
decisions that's more that's more what

00:34:16,359 --> 00:34:20,739
helps me make good decisions than trying

00:34:17,859 --> 00:34:23,639
to actually repeat what he did so

00:34:20,739 --> 00:34:27,429
hopefully that's that's good advice and

00:34:23,639 --> 00:34:29,049
so code bonsai was a sort of a wacko

00:34:27,429 --> 00:34:31,839
idea I came up with when someone asked

00:34:29,049 --> 00:34:33,249
me to do a talk last year and this is

00:34:31,839 --> 00:34:35,589
like what is what is your code tree

00:34:33,249 --> 00:34:38,499
going to look like and these are the

00:34:35,589 --> 00:34:40,719
words that I want people to to use when

00:34:38,499 --> 00:34:41,979
they describe my code tree I don't know

00:34:40,719 --> 00:34:44,799
if anybody looking at the actual YouTube

00:34:41,979 --> 00:34:47,139
code tree would use too many of these

00:34:44,799 --> 00:34:48,459
but in my like falsely idyllic world

00:34:47,139 --> 00:34:50,169
this is what it looks like

00:34:48,459 --> 00:34:52,690
and you know just to give you a little

00:34:50,169 --> 00:34:55,509
visual visualization this is what I'm

00:34:52,690 --> 00:35:01,749
hoping for right this is sort of closer

00:34:55,509 --> 00:35:06,450
to reality yeah so let's just do

00:35:01,749 --> 00:35:06,450
questions and and see how it goes

00:35:06,900 --> 00:35:10,109
far left

00:35:14,330 --> 00:35:17,760
if you can use the mic if we can start

00:35:17,280 --> 00:35:24,330
right here

00:35:17,760 --> 00:35:26,130
first person that might go okay if you

00:35:24,330 --> 00:35:29,190
could talk a little bit about the

00:35:26,130 --> 00:35:31,230
YouTube CDN or any print like specific

00:35:29,190 --> 00:35:33,660
things I use there in terms of first

00:35:31,230 --> 00:35:36,420
question is about the YouTube CDN very

00:35:33,660 --> 00:35:38,369
briefly so YouTube originally contracted

00:35:36,420 --> 00:35:40,230
out some CDN work for video and for

00:35:38,369 --> 00:35:43,410
image serving this is of course

00:35:40,230 --> 00:35:45,960
psychotically expensive and after a some

00:35:43,410 --> 00:35:47,880
point it makes sense to do it yourself

00:35:45,960 --> 00:35:50,730
so it turns out that you can build a

00:35:47,880 --> 00:35:52,830
pretty good video CDN if you have a good

00:35:50,730 --> 00:35:54,450
hardware dude so you basically build a

00:35:52,830 --> 00:35:56,790
very large rack stick a bunch of

00:35:54,450 --> 00:35:59,460
machines in it put a good switch in then

00:35:56,790 --> 00:36:00,720
take lighting and override the 404

00:35:59,460 --> 00:36:02,040
handler to be a piece of Python that

00:36:00,720 --> 00:36:04,859
knows where to find the video that you

00:36:02,040 --> 00:36:09,690
didn't find that took two weeks and on

00:36:04,859 --> 00:36:11,099
its first day served 60 gigabits so that

00:36:09,690 --> 00:36:14,220
one that was the first incarnation of

00:36:11,099 --> 00:36:16,320
the YouTube CDN your mileage may vary

00:36:14,220 --> 00:36:19,800
but you can you can do a lot with really

00:36:16,320 --> 00:36:23,670
simple tools that is all true next

00:36:19,800 --> 00:36:24,960
question hi first of all I just wanted

00:36:23,670 --> 00:36:26,690
to say thanks a lot there was a lot of

00:36:24,960 --> 00:36:29,160
stuff in here that we were nodding about

00:36:26,690 --> 00:36:30,300
our shop isn't quite at your guys scale

00:36:29,160 --> 00:36:31,619
but we've been going through a lot

00:36:30,300 --> 00:36:33,720
experiences over the last couple years

00:36:31,619 --> 00:36:35,400
worried about 80 million users now and

00:36:33,720 --> 00:36:38,550
have run into a lot of the same things I

00:36:35,400 --> 00:36:40,740
also just wanted wanted to actually tell

00:36:38,550 --> 00:36:42,839
you about one thing there's a we we were

00:36:40,740 --> 00:36:44,609
using protocol buffers for doing lots of

00:36:42,839 --> 00:36:47,760
passing and the Python protocol buffer

00:36:44,609 --> 00:36:49,740
library right on 2/3 sucks on two fours

00:36:47,760 --> 00:36:51,480
like experimental C++ bindings but

00:36:49,740 --> 00:36:53,430
they're kind of unstable we wrote a

00:36:51,480 --> 00:36:55,500
replacement that's all C with a thin

00:36:53,430 --> 00:36:57,599
layer it's called palm and it's on

00:36:55,500 --> 00:36:59,190
github come come come talk to me out

00:36:57,599 --> 00:37:00,839
okay we'll figure it I had a feeling you

00:36:59,190 --> 00:37:02,099
might have been kind of like spec we

00:37:00,839 --> 00:37:05,310
were spending all our time serial

00:37:02,099 --> 00:37:07,050
serializing so so anyway so YouTube for

00:37:05,310 --> 00:37:09,420
a couple of massive systems uses the

00:37:07,050 --> 00:37:11,040
question was loosely we're trying to use

00:37:09,420 --> 00:37:13,080
protocol buffers our protocol buffers

00:37:11,040 --> 00:37:15,650
actually fast the answer is kind of no

00:37:13,080 --> 00:37:17,339
but they're they're going to get better

00:37:15,650 --> 00:37:20,190
obviously this is a big thing about

00:37:17,339 --> 00:37:21,540
measuring we use beasts on we have a

00:37:20,190 --> 00:37:24,630
beasts on implementation that we wrote

00:37:21,540 --> 00:37:25,560
that is 10-15 times faster than the one

00:37:24,630 --> 00:37:27,840
you can download

00:37:25,560 --> 00:37:31,620
we are open sourcing it as part of the

00:37:27,840 --> 00:37:32,910
Vitesse project so both will give will

00:37:31,620 --> 00:37:35,130
give back yeah that's interesting

00:37:32,910 --> 00:37:37,170
because we used mongos beast and library

00:37:35,130 --> 00:37:39,120
for a while - that was our replacement

00:37:37,170 --> 00:37:41,940
because PBS weren't doing it so anyway

00:37:39,120 --> 00:37:43,440
cool thanks we have enough time for one

00:37:41,940 --> 00:37:45,810
more question try to keep it short if

00:37:43,440 --> 00:37:47,400
you can thanks well what would you say

00:37:45,810 --> 00:37:49,110
to those of us that have the misfortune

00:37:47,400 --> 00:37:50,340
of need to implement a new feature on a

00:37:49,110 --> 00:37:50,910
system that's are receiving lot of

00:37:50,340 --> 00:37:52,860
traffic

00:37:50,910 --> 00:37:54,480
mirroring production traffic or writing

00:37:52,860 --> 00:37:57,480
a good simulation of existing production

00:37:54,480 --> 00:37:58,920
traffic oh so the question is how do you

00:37:57,480 --> 00:38:02,430
change the wheels while the car is

00:37:58,920 --> 00:38:04,350
running so yeah I mean I've done a lot

00:38:02,430 --> 00:38:07,020
of large-scale data migrations and you

00:38:04,350 --> 00:38:09,150
know in every system is is entirely

00:38:07,020 --> 00:38:11,940
different you know right now when we do

00:38:09,150 --> 00:38:14,190
a big data migration we frequently route

00:38:11,940 --> 00:38:16,170
some percentage of read traffic and then

00:38:14,190 --> 00:38:17,370
the writes pretty much have to be real

00:38:16,170 --> 00:38:20,010
sure that it's going to go you run a

00:38:17,370 --> 00:38:21,600
simulation and cross your fingers and so

00:38:20,010 --> 00:38:23,190
far we haven't had any major disasters

00:38:21,600 --> 00:38:25,590
but that's pretty much the only recipe

00:38:23,190 --> 00:38:27,780
there is you know you can't you know you

00:38:25,590 --> 00:38:29,460
at some level you make the decision on

00:38:27,780 --> 00:38:31,710
how you're going to access one data

00:38:29,460 --> 00:38:33,120
pattern versus the other it's kind of a

00:38:31,710 --> 00:38:34,710
hard question to answer without more

00:38:33,120 --> 00:38:40,190
context about your app but hopefully

00:38:34,710 --> 00:38:40,190

YouTube URL: https://www.youtube.com/watch?v=G-lGCC4KKok


