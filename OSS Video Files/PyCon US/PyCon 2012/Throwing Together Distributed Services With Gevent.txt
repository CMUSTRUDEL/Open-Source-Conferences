Title: Throwing Together Distributed Services With Gevent
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Jeff Lindsay
In this talk we learn how to throw together a distributed system using gevent and a simple framework called gservice. We'll go from nothing to a distributed messaging system ready for production deployment based on experiences building s
Captions: 
	00:00:01,399 --> 00:00:07,319
hello okay so i thought i was going to

00:00:05,640 --> 00:00:10,380
have 40 minutes i have about 40 minutes

00:00:07,319 --> 00:00:12,210
but this will be good all right so

00:00:10,380 --> 00:00:15,000
throwing together distributed services

00:00:12,210 --> 00:00:17,850
with g event this is an extreme talk so

00:00:15,000 --> 00:00:19,320
you all know what G event is right ok

00:00:17,850 --> 00:00:21,500
because we're not going to really talk

00:00:19,320 --> 00:00:24,060
about it we're going to talk about

00:00:21,500 --> 00:00:25,710
something that we use it twilio to to

00:00:24,060 --> 00:00:28,640
basically throw together distributed

00:00:25,710 --> 00:00:30,990
services it's a service micro framework

00:00:28,640 --> 00:00:35,010
it's like a web framework but for not

00:00:30,990 --> 00:00:36,719
web stuff for building services and it's

00:00:35,010 --> 00:00:39,000
called ginko previously known as G

00:00:36,719 --> 00:00:41,430
service if any of you have been

00:00:39,000 --> 00:00:43,110
following any of that so at Tulio we

00:00:41,430 --> 00:00:47,910
have very sort of service-oriented

00:00:43,110 --> 00:00:49,680
architecture lots of little services all

00:00:47,910 --> 00:00:52,320
over the place this is a simplified

00:00:49,680 --> 00:00:57,719
version it really doesn't map to it at

00:00:52,320 --> 00:01:01,140
all it looks cool and so thinking about

00:00:57,719 --> 00:01:02,370
services at a high level you can think

00:01:01,140 --> 00:01:04,650
of conceptually there's the Tullio

00:01:02,370 --> 00:01:07,140
service right are you familiar with

00:01:04,650 --> 00:01:09,119
Tulio it's a API for making receiving

00:01:07,140 --> 00:01:12,570
phone calls and SMS messages and stuff

00:01:09,119 --> 00:01:16,740
like that so Tulio as a service high

00:01:12,570 --> 00:01:19,770
level service is made up of three maybe

00:01:16,740 --> 00:01:23,610
sub services these products SMS client

00:01:19,770 --> 00:01:27,090
voice and these are actually made up of

00:01:23,610 --> 00:01:28,470
actual services these guys here which

00:01:27,090 --> 00:01:30,390
have random names that you don't know

00:01:28,470 --> 00:01:32,549
what they do but these are the services

00:01:30,390 --> 00:01:34,920
that we run that are written in twisted

00:01:32,549 --> 00:01:36,570
orgy event or whatever but you can

00:01:34,920 --> 00:01:39,240
actually break those down into sub

00:01:36,570 --> 00:01:40,700
services matrix for example which you

00:01:39,240 --> 00:01:43,079
have no idea what it does but it has

00:01:40,700 --> 00:01:45,750
WebSocket service and HTTP service and

00:01:43,079 --> 00:01:47,100
some random thing called jet mesh and

00:01:45,750 --> 00:01:48,090
jet mesh happens to have a client to

00:01:47,100 --> 00:01:51,000
server because it's sort of this

00:01:48,090 --> 00:01:52,259
peer-to-peer Fang and you can you know

00:01:51,000 --> 00:01:54,329
break these things down is basically a

00:01:52,259 --> 00:01:56,640
service hierarchy this is about service

00:01:54,329 --> 00:01:58,100
composition and so this has been an

00:01:56,640 --> 00:02:00,869
interesting way to think about building

00:01:58,100 --> 00:02:05,549
services especially complex services

00:02:00,869 --> 00:02:08,489
large systems so what ginkgo does is

00:02:05,549 --> 00:02:11,039
gives you one primitive basically a

00:02:08,489 --> 00:02:12,930
service that you inherit from and your

00:02:11,039 --> 00:02:15,329
services are basically classes service

00:02:12,930 --> 00:02:18,420
is are just nested modules at a high

00:02:15,329 --> 00:02:20,640
level conceptually and and using this

00:02:18,420 --> 00:02:22,939
sort of nested module concept you can

00:02:20,640 --> 00:02:25,980
pretty easily throw together these nice

00:02:22,939 --> 00:02:28,670
components that you can kind of throw

00:02:25,980 --> 00:02:31,379
together and reused and build cool stuff

00:02:28,670 --> 00:02:34,769
they basically all I do is start stop

00:02:31,379 --> 00:02:37,650
and reload and nest but this little bit

00:02:34,769 --> 00:02:39,030
of convention and they also have

00:02:37,650 --> 00:02:42,750
configuration and they can be run as

00:02:39,030 --> 00:02:44,670
demons this little bit of structure and

00:02:42,750 --> 00:02:47,669
convention actually goes quite a long

00:02:44,670 --> 00:02:49,169
way so what we're going to do here is

00:02:47,669 --> 00:02:52,139
we're gonna I try wanted to do live

00:02:49,169 --> 00:02:54,359
coding but they wouldn't let me we're

00:02:52,139 --> 00:02:56,370
going to build a scalable gateway to a

00:02:54,359 --> 00:02:59,489
random number service random number

00:02:56,370 --> 00:03:01,409
services just some contrived thing could

00:02:59,489 --> 00:03:03,090
be in a real world maybe a database or

00:03:01,409 --> 00:03:04,709
some other service but this gateway

00:03:03,090 --> 00:03:07,379
that's built around a self-organizing

00:03:04,709 --> 00:03:10,319
messaging system so we're actually using

00:03:07,379 --> 00:03:12,750
a generic messaging system to act as the

00:03:10,319 --> 00:03:14,579
Gateway that's self-organizing in terms

00:03:12,750 --> 00:03:17,370
of cluster it's actually horizontally

00:03:14,579 --> 00:03:19,909
scalable and you can just add new nodes

00:03:17,370 --> 00:03:21,840
and doesn't depend on any sort of like

00:03:19,909 --> 00:03:25,109
zookeeper Jews or anything like that

00:03:21,840 --> 00:03:26,669
it's all self-contained so we're gonna

00:03:25,109 --> 00:03:28,530
do this by building a couple of services

00:03:26,669 --> 00:03:31,199
first we can build a simple number

00:03:28,530 --> 00:03:32,849
service TCP server and client basic

00:03:31,199 --> 00:03:34,169
stuff the server is just going to spew

00:03:32,849 --> 00:03:37,199
out random numbers when you connect to

00:03:34,169 --> 00:03:40,650
it then we're in a build a very generic

00:03:37,199 --> 00:03:42,150
pub/sub service that uses HTTP so when

00:03:40,650 --> 00:03:44,129
you post to it it's a published when you

00:03:42,150 --> 00:03:45,959
get you're going to get a Twitter

00:03:44,129 --> 00:03:49,620
streaming API kind of thing a chunk

00:03:45,959 --> 00:03:52,290
transfer encoding and and every every

00:03:49,620 --> 00:03:54,689
path is a channel and then we're going

00:03:52,290 --> 00:03:56,400
to take that combine it with the client

00:03:54,689 --> 00:03:58,680
we made before to make the gateway

00:03:56,400 --> 00:04:00,780
service so then you could connect with

00:03:58,680 --> 00:04:03,659
HTTP or web socket or whatever else that

00:04:00,780 --> 00:04:05,310
we throw in there and then that would

00:04:03,659 --> 00:04:07,620
provide an interface to our number

00:04:05,310 --> 00:04:11,009
service witches over TCP and in our

00:04:07,620 --> 00:04:14,639
back-end or whatever and then that is

00:04:11,009 --> 00:04:17,070
something that we need to make

00:04:14,639 --> 00:04:19,409
distributed so that we can have this

00:04:17,070 --> 00:04:21,419
gateway cluster so you can talk to any

00:04:19,409 --> 00:04:24,090
of the nodes and they'll all kind of

00:04:21,419 --> 00:04:25,600
work together magically and then of

00:04:24,090 --> 00:04:28,480
course there's only one

00:04:25,600 --> 00:04:29,560
in this contrived example the leader is

00:04:28,480 --> 00:04:32,410
going to have the connection to the

00:04:29,560 --> 00:04:33,670
number server so ultimately our service

00:04:32,410 --> 00:04:36,700
hierarchy is going to look like this off

00:04:33,670 --> 00:04:37,810
to the top right you have the number

00:04:36,700 --> 00:04:39,610
server that's going to be running

00:04:37,810 --> 00:04:40,810
independently as a process and then

00:04:39,610 --> 00:04:42,960
we're going to build up this number

00:04:40,810 --> 00:04:44,890
gateway thing from these sub components

00:04:42,960 --> 00:04:46,330
we're going to build them independently

00:04:44,890 --> 00:04:48,850
and then put them together and refactor

00:04:46,330 --> 00:04:50,380
them and blah blah blah so we're going

00:04:48,850 --> 00:04:52,660
to start with the building the number

00:04:50,380 --> 00:04:54,640
server and client and this will give you

00:04:52,660 --> 00:04:59,290
add to get an idea of actually building

00:04:54,640 --> 00:05:02,950
something with this so can you all see

00:04:59,290 --> 00:05:10,690
this or do you prefer to look like this

00:05:02,950 --> 00:05:12,040
this ok two is better ok so just so that

00:05:10,690 --> 00:05:13,660
you know what we're working in because

00:05:12,040 --> 00:05:15,370
we're going to this project directory

00:05:13,660 --> 00:05:17,320
we're going to have so we have a

00:05:15,370 --> 00:05:19,240
configuration directory these

00:05:17,320 --> 00:05:22,450
configuration files are basically how we

00:05:19,240 --> 00:05:25,180
how we run Damon's and then we have the

00:05:22,450 --> 00:05:26,350
actual module G tutorial which has the

00:05:25,180 --> 00:05:27,910
modules that we're going to have in it

00:05:26,350 --> 00:05:31,030
and then you can ignore all these other

00:05:27,910 --> 00:05:37,530
scripts so we basically have one module

00:05:31,030 --> 00:05:40,480
the numbers module and here's our server

00:05:37,530 --> 00:05:43,230
so like I said inheriting from service

00:05:40,480 --> 00:05:45,490
its and then we have some configuration

00:05:43,230 --> 00:05:48,220
so basic primitives for basically

00:05:45,490 --> 00:05:51,010
setting up your configuration for your

00:05:48,220 --> 00:05:53,170
service and then it turns out all we're

00:05:51,010 --> 00:05:55,240
doing is adding a the G event stream

00:05:53,170 --> 00:05:57,700
server as a child service and setting up

00:05:55,240 --> 00:05:59,920
the handler so services can base like I

00:05:57,700 --> 00:06:02,620
said start stop and reload they can also

00:05:59,920 --> 00:06:04,180
restart that's just start and stop and

00:06:02,620 --> 00:06:05,380
but you have these hooks basically when

00:06:04,180 --> 00:06:08,320
you start it's going to start all its

00:06:05,380 --> 00:06:10,690
child services and call it hook call

00:06:08,320 --> 00:06:12,940
cults do start hook and when you call

00:06:10,690 --> 00:06:15,340
stop it's going to kill Kyle stop on all

00:06:12,940 --> 00:06:16,720
its child services and it's also a

00:06:15,340 --> 00:06:18,100
container for green Lutz so it'll kill

00:06:16,720 --> 00:06:20,200
any green lights that are running we'll

00:06:18,100 --> 00:06:21,880
get to that but this is pretty simple

00:06:20,200 --> 00:06:24,160
all it's doing is setting up a G event

00:06:21,880 --> 00:06:26,470
server and setting up this handler which

00:06:24,160 --> 00:06:28,290
says for every connection produce some

00:06:26,470 --> 00:06:30,820
random numbers in a loop spit them out

00:06:28,290 --> 00:06:33,550
sleep for 60 seconds / the admit rate

00:06:30,820 --> 00:06:35,979
which we have in our configuration set

00:06:33,550 --> 00:06:38,070
here or as words defined and how we

00:06:35,979 --> 00:06:41,800
access it through this descriptor

00:06:38,070 --> 00:06:44,169
so the way we run this like I said is

00:06:41,800 --> 00:06:47,220
with this configuration so here's our

00:06:44,169 --> 00:06:49,990
configuration it's just a Python file

00:06:47,220 --> 00:06:51,250
like some other cool Python systems you

00:06:49,990 --> 00:06:54,040
just define some variables they're

00:06:51,250 --> 00:06:56,650
mapped to the name that was defined when

00:06:54,040 --> 00:06:59,800
you set up setting and then you also

00:06:56,650 --> 00:07:01,690
define your service factory some of this

00:06:59,800 --> 00:07:04,900
might be familiar with if you've used

00:07:01,690 --> 00:07:07,900
twisted a service or application stuff

00:07:04,900 --> 00:07:09,790
it's somewhat inspired by that anyway

00:07:07,900 --> 00:07:11,340
we're just instantiate services just

00:07:09,790 --> 00:07:20,950
going to instantiate a number server and

00:07:11,340 --> 00:07:23,850
then if we run this whoa so we have a

00:07:20,950 --> 00:07:28,380
ginkgo has a runner sort of like twisty

00:07:23,850 --> 00:07:33,070
but 4G event and stuff like that config

00:07:28,380 --> 00:07:37,870
numbers so we run it it's running when

00:07:33,070 --> 00:07:42,300
you when you do netcat we get random

00:07:37,870 --> 00:07:44,950
numbers and of course we can stop it and

00:07:42,300 --> 00:07:47,229
the runner also lets you do start stop

00:07:44,950 --> 00:07:48,729
all that stuff manage the service takes

00:07:47,229 --> 00:07:51,190
care of the pit file and all that stuff

00:07:48,729 --> 00:07:52,660
you can demonize or will it Damian eyes

00:07:51,190 --> 00:07:54,610
but it couldn't root and all this other

00:07:52,660 --> 00:07:56,710
stuff so I'm going to start it in the

00:07:54,610 --> 00:07:59,950
background and check to see that it's

00:07:56,710 --> 00:08:01,570
still running or is running and one of

00:07:59,950 --> 00:08:03,130
the cool things about the configuration

00:08:01,570 --> 00:08:07,360
system like why have this configuration

00:08:03,130 --> 00:08:12,849
system we can change change the

00:08:07,360 --> 00:08:15,610
configuration and you see the MIT rate

00:08:12,849 --> 00:08:18,220
is about one every second and we reload

00:08:15,610 --> 00:08:24,870
and it changes and that was just because

00:08:18,220 --> 00:08:27,760
all we did was accessed it to the omit

00:08:24,870 --> 00:08:28,630
the admit rate descriptor and so it

00:08:27,760 --> 00:08:31,090
knows it'll just reload the

00:08:28,630 --> 00:08:34,000
configuration and because we it's used

00:08:31,090 --> 00:08:35,650
in the loop it'll change dynamically so

00:08:34,000 --> 00:08:39,300
that's one one one advantage of using

00:08:35,650 --> 00:08:43,150
this so let's build a look at the client

00:08:39,300 --> 00:08:46,650
um I'm actually going to slow this down

00:08:43,150 --> 00:08:46,650
again it's too fast for me

00:08:49,629 --> 00:08:56,180
okay so let's look at the client we're

00:08:54,620 --> 00:08:59,540
gonna blow the client right sure I

00:08:56,180 --> 00:09:02,300
already built the client imagine me just

00:08:59,540 --> 00:09:04,129
like writing all this in real time I was

00:09:02,300 --> 00:09:07,339
going to do it no I don't know there's

00:09:04,129 --> 00:09:09,439
too much so here's the client service

00:09:07,339 --> 00:09:10,819
it's very similar except we're actually

00:09:09,439 --> 00:09:14,559
doing something different we recruiting

00:09:10,819 --> 00:09:16,939
a client so we're we call self dot spawn

00:09:14,559 --> 00:09:19,129
we basically wrapped some of the G event

00:09:16,939 --> 00:09:20,720
stuff so that when you want to spawn a

00:09:19,129 --> 00:09:23,089
green let you spawn it relative to your

00:09:20,720 --> 00:09:25,009
service and then it goes into a pool for

00:09:23,089 --> 00:09:26,569
your service so that when you call stop

00:09:25,009 --> 00:09:27,860
on your service it'll kill all those and

00:09:26,569 --> 00:09:28,670
it's just a nice kind of container for

00:09:27,860 --> 00:09:31,939
your green that's I mean where do you

00:09:28,670 --> 00:09:33,350
put your green once otherwise so it

00:09:31,939 --> 00:09:36,139
makes services kind of self-contained

00:09:33,350 --> 00:09:38,540
spawn is going to call connect in a

00:09:36,139 --> 00:09:40,160
green lit and it's going to connect and

00:09:38,540 --> 00:09:42,139
then go into a loop where it reads off

00:09:40,160 --> 00:09:45,709
the socket and then put it into puts it

00:09:42,139 --> 00:09:48,050
into a queue but um services can be

00:09:45,709 --> 00:09:49,730
anything like we're not we don't like

00:09:48,050 --> 00:09:51,350
impose anything on your constructor or

00:09:49,730 --> 00:09:55,999
anything like that we just have these

00:09:51,350 --> 00:09:57,559
hooks that you have and so you can do

00:09:55,999 --> 00:09:59,240
anything you can basically make the

00:09:57,559 --> 00:10:00,499
interface whatever you want in this case

00:09:59,240 --> 00:10:03,230
we're going to make it an iterator so

00:10:00,499 --> 00:10:05,059
that we just pull stuff off the queue so

00:10:03,230 --> 00:10:06,800
that's a pretty simple client and we

00:10:05,059 --> 00:10:08,929
could make a configuration to run it as

00:10:06,800 --> 00:10:10,550
a daemon but we don't really want to we

00:10:08,929 --> 00:10:13,009
could let's just make a regular python

00:10:10,550 --> 00:10:15,620
script does this and so you can just

00:10:13,009 --> 00:10:17,329
instantiate a service and you can call

00:10:15,620 --> 00:10:19,279
start and stop or it's a context manager

00:10:17,329 --> 00:10:21,679
so you just call whiff and so you can

00:10:19,279 --> 00:10:24,769
just with client and then iterate on it

00:10:21,679 --> 00:10:31,670
right and print that out so we could do

00:10:24,769 --> 00:10:34,730
that and we have the same thing we have

00:10:31,670 --> 00:10:37,819
client okay so that's our our number

00:10:34,730 --> 00:10:43,069
service and it gives you an idea of

00:10:37,819 --> 00:10:44,809
actually building something in this so

00:10:43,069 --> 00:10:47,660
now we're going to build the the pub sub

00:10:44,809 --> 00:10:49,519
thing HTTP thing we're gonna start with

00:10:47,660 --> 00:10:52,149
a module called a service called HTTP

00:10:49,519 --> 00:10:52,149
streamer and

00:10:57,920 --> 00:11:00,920
cool

00:11:05,130 --> 00:11:10,650
alright so we have a new module in here

00:11:07,800 --> 00:11:13,440
under messaging called HTTP sorry let me

00:11:10,650 --> 00:11:16,050
fix this alright so there's not a whole

00:11:13,440 --> 00:11:18,240
lot here we have a subscription thing

00:11:16,050 --> 00:11:21,060
which basically wraps a Q Q's are pretty

00:11:18,240 --> 00:11:23,010
cool HTTP streamers a service it's got

00:11:21,060 --> 00:11:24,750
some settings it's got a subscription

00:11:23,010 --> 00:11:28,170
dictionary because it's managing

00:11:24,750 --> 00:11:31,620
subscriptions and then we compose it

00:11:28,170 --> 00:11:33,030
with a G event whiskey server and then

00:11:31,620 --> 00:11:34,560
we just create a whiskey app that says

00:11:33,030 --> 00:11:36,110
if it's a post and handle is it publish

00:11:34,560 --> 00:11:39,630
if it's get handle as a subscribe

00:11:36,110 --> 00:11:41,730
publishes pretty simple use web bob to

00:11:39,630 --> 00:11:44,880
parse request the channel is the path

00:11:41,730 --> 00:11:47,040
look in our subscriptions dictionary to

00:11:44,880 --> 00:11:49,590
get subscriptions iterate over them and

00:11:47,040 --> 00:11:51,450
put into them and then return ok these

00:11:49,590 --> 00:11:53,190
are all kind of toy examples right they

00:11:51,450 --> 00:11:55,020
work and they probably work pretty well

00:11:53,190 --> 00:11:56,070
but there's plenty of edge cases and

00:11:55,020 --> 00:11:58,860
assumptions because it's sort of an

00:11:56,070 --> 00:12:00,210
educational thing and what are those

00:11:58,860 --> 00:12:04,310
subscriptions come from when you do a

00:12:00,210 --> 00:12:07,020
get it calls handle subscribe parse is a

00:12:04,310 --> 00:12:09,480
web bob of requests it subchannel

00:12:07,020 --> 00:12:12,150
creates this thing grace's subscription

00:12:09,480 --> 00:12:13,980
puts in dictionary does this keep a live

00:12:12,150 --> 00:12:16,020
function will talk about in a bit starts

00:12:13,980 --> 00:12:19,320
a response 200 and then it starts

00:12:16,020 --> 00:12:21,420
yielding we start iterating over that

00:12:19,320 --> 00:12:22,800
subscription that queue and whenever

00:12:21,420 --> 00:12:24,930
something comes in that queue we yield

00:12:22,800 --> 00:12:27,090
it as a as a string with a new line and

00:12:24,930 --> 00:12:28,560
if none is in there then we do a new

00:12:27,090 --> 00:12:31,260
line which is this is just like this

00:12:28,560 --> 00:12:33,420
Twitter streaming API the new line is a

00:12:31,260 --> 00:12:35,490
just to keep alive and so that's

00:12:33,420 --> 00:12:38,250
actually what we do here when we called

00:12:35,490 --> 00:12:41,160
keep alive with subscription basically

00:12:38,250 --> 00:12:43,050
this is Otto spawn is just convenient

00:12:41,160 --> 00:12:45,960
little decorator that's does self dot

00:12:43,050 --> 00:12:48,360
spawn and so this is going to happen

00:12:45,960 --> 00:12:49,950
asynchronously and we Luke while the

00:12:48,360 --> 00:12:52,140
subscription is active and we just put

00:12:49,950 --> 00:12:54,600
none in it every keep alive interval so

00:12:52,140 --> 00:12:57,420
then we have keep alives alright so we

00:12:54,600 --> 00:13:03,920
have this I mean that's not too

00:12:57,420 --> 00:13:08,040
complicated right we can run this and

00:13:03,920 --> 00:13:13,140
try it out so I created a configuration

00:13:08,040 --> 00:13:15,180
file that is pretty straightforward in

00:13:13,140 --> 00:13:17,410
fact all of them are pretty this simple

00:13:15,180 --> 00:13:21,250
and for these examples

00:13:17,410 --> 00:13:26,709
um so blah blah blah curl you know a

00:13:21,250 --> 00:13:30,220
date give me a channel name Pikkon very

00:13:26,709 --> 00:13:31,480
original so here we have these new lines

00:13:30,220 --> 00:13:34,589
and it's just going to sit there until

00:13:31,480 --> 00:13:50,949
we do something published to it Oh

00:13:34,589 --> 00:13:53,410
everybody yeah I will one moment so you

00:13:50,949 --> 00:13:55,300
can see what I did and I can do it again

00:13:53,410 --> 00:13:58,089
and again and it comes out there so

00:13:55,300 --> 00:14:01,540
pretty straightforward obvious kind of

00:13:58,089 --> 00:14:08,230
thing and so we've we basically built to

00:14:01,540 --> 00:14:10,209
this HTTP streamer so where were we here

00:14:08,230 --> 00:14:11,560
so but we actually want to do a couple

00:14:10,209 --> 00:14:13,689
of other things first we want to add a

00:14:11,560 --> 00:14:15,879
WebSocket thing to this because we can

00:14:13,689 --> 00:14:17,889
and then we're going to want to add

00:14:15,879 --> 00:14:19,149
another thing for fun so that means we

00:14:17,889 --> 00:14:20,889
have to manage subscriptions somewhere

00:14:19,149 --> 00:14:23,050
else and so we're going to create

00:14:20,889 --> 00:14:26,410
another service called message hub that

00:14:23,050 --> 00:14:27,939
then contains the HTTP streamer and then

00:14:26,410 --> 00:14:30,430
it will contain these other things a

00:14:27,939 --> 00:14:33,060
WebSocket streamer and this weird tale

00:14:30,430 --> 00:14:33,060
viewer thing

00:14:41,260 --> 00:14:48,720
so first of all we'll look at we'll go

00:14:45,910 --> 00:14:51,370
back to our streamer so instead now we

00:14:48,720 --> 00:14:53,020
instead of creating a subscriptions

00:14:51,370 --> 00:14:55,000
dictionary we actually set up a hub

00:14:53,020 --> 00:14:57,100
we're past a hub and then you can see

00:14:55,000 --> 00:15:00,820
instead of actually doing stuff we say

00:14:57,100 --> 00:15:01,900
hub publish and hub subscribe so hub is

00:15:00,820 --> 00:15:03,700
now responsible for managing

00:15:01,900 --> 00:15:06,400
subscriptions and doing actual pub/sub

00:15:03,700 --> 00:15:09,160
stuff we've got another thing here

00:15:06,400 --> 00:15:11,470
called it should be tail viewer it's

00:15:09,160 --> 00:15:14,470
pretty similar except when you connect

00:15:11,470 --> 00:15:16,600
to it it does this and I'm not going to

00:15:14,470 --> 00:15:20,770
explain what this does but if you look

00:15:16,600 --> 00:15:23,950
at it and you're clever you might see

00:15:20,770 --> 00:15:26,460
what it's doing but the important thing

00:15:23,950 --> 00:15:28,390
I'll show you what it's what it does

00:15:26,460 --> 00:15:30,790
important thing is this web socket

00:15:28,390 --> 00:15:35,370
streamer which is pretty simple that's

00:15:30,790 --> 00:15:38,320
it it's just another service that uses

00:15:35,370 --> 00:15:39,940
WS for pie and creates a WebSocket

00:15:38,320 --> 00:15:41,740
server and sets up handler to basically

00:15:39,940 --> 00:15:44,110
do the same thing that the HTTP streamer

00:15:41,740 --> 00:15:48,370
did hub subscribe and then we iterate

00:15:44,110 --> 00:15:51,820
over it and we send it over there so if

00:15:48,370 --> 00:15:55,360
we were to actually run this and i

00:15:51,820 --> 00:15:57,940
created a message hub configuration

00:15:55,360 --> 00:16:06,220
which again just is service and then

00:15:57,940 --> 00:16:07,540
instantiates message hub we can actually

00:16:06,220 --> 00:16:09,850
connect to it with web socket let's do

00:16:07,540 --> 00:16:10,930
that I know this is really really tiny

00:16:09,850 --> 00:16:12,760
you don't have to see what I'm typing

00:16:10,930 --> 00:16:16,090
you just have to see that like stuff is

00:16:12,760 --> 00:16:18,210
coming out because that means it's

00:16:16,090 --> 00:16:18,210
working

00:16:25,640 --> 00:16:29,300
and so I just created a web socket

00:16:27,530 --> 00:16:39,170
object and I'm going to do on message

00:16:29,300 --> 00:16:40,970
equals 0 you never win data data so now

00:16:39,170 --> 00:16:43,460
whenever we get a message on this web

00:16:40,970 --> 00:16:47,620
socket should print it out there so if I

00:16:43,460 --> 00:16:51,140
were to go back and publish some more

00:16:47,620 --> 00:16:54,830
publish a bunch I go back and we see a

00:16:51,140 --> 00:17:02,090
bunch of hello everybody's so that's

00:16:54,830 --> 00:17:05,000
that was pretty easy I'm going to okay

00:17:02,090 --> 00:17:06,199
we'll move on so now what we want to do

00:17:05,000 --> 00:17:09,980
is we want to make a gateway we've got

00:17:06,199 --> 00:17:11,630
this cool generic HTTP of a pub sub

00:17:09,980 --> 00:17:14,089
service and we've got this number client

00:17:11,630 --> 00:17:16,720
thing well let's combine them to make a

00:17:14,089 --> 00:17:16,720
number gateway

00:17:30,280 --> 00:17:36,710
alright so we're back here again we've

00:17:33,770 --> 00:17:39,260
got a gateway module and it has a

00:17:36,710 --> 00:17:41,570
gateway service and this pending is

00:17:39,260 --> 00:17:42,920
pretty simple like that there it is all

00:17:41,570 --> 00:17:44,420
we're doing is creating a new service

00:17:42,920 --> 00:17:47,390
and we're saying create a message hub

00:17:44,420 --> 00:17:49,220
and create a number client and add them

00:17:47,390 --> 00:17:52,130
and then we do start and we have bridge

00:17:49,220 --> 00:17:54,320
and bridge is just a green lit that sits

00:17:52,130 --> 00:17:55,760
in a loop again as a client but for

00:17:54,320 --> 00:17:59,090
every number we're going to publish it

00:17:55,760 --> 00:18:00,410
to the numbers channel and so what you

00:17:59,090 --> 00:18:02,840
have is something where you have this

00:18:00,410 --> 00:18:15,260
message hub you can connect to I'll just

00:18:02,840 --> 00:18:19,040
run it so if i were to connect to slash

00:18:15,260 --> 00:18:21,380
numbers we're getting numbers out of it

00:18:19,040 --> 00:18:23,120
because we were still running that in

00:18:21,380 --> 00:18:25,040
the beginning ran the numbers server in

00:18:23,120 --> 00:18:26,690
the background and then we had the

00:18:25,040 --> 00:18:27,770
number client and you can see the every

00:18:26,690 --> 00:18:32,180
now and then you give the new line from

00:18:27,770 --> 00:18:37,160
the keep alive and so just as easily you

00:18:32,180 --> 00:18:41,000
can actually you know now connect to it

00:18:37,160 --> 00:18:43,880
in with WebSockets at all and you can

00:18:41,000 --> 00:18:45,440
see their numbers coming out of it and

00:18:43,880 --> 00:18:47,270
then i'll show you what that uh that

00:18:45,440 --> 00:18:52,090
weird tales does anybody know what that

00:18:47,270 --> 00:18:52,090
tail tail view does by looking at it

00:18:52,300 --> 00:18:58,000
yeah eight

00:19:00,110 --> 00:19:07,080
so that's what happens when you use a

00:19:03,320 --> 00:19:09,300
multi-part mix for place in a browser um

00:19:07,080 --> 00:19:15,810
so you're seeing the last the last thing

00:19:09,300 --> 00:19:17,670
it's just replacing it okay so this

00:19:15,810 --> 00:19:18,990
thing now needs to be distributed it's

00:19:17,670 --> 00:19:20,040
not really distributed you can run a

00:19:18,990 --> 00:19:21,210
bunch of these but it wouldn't really

00:19:20,040 --> 00:19:23,810
make a difference because they all be

00:19:21,210 --> 00:19:26,220
siloed off so we're going to need to

00:19:23,810 --> 00:19:28,140
well start with the the message hub and

00:19:26,220 --> 00:19:30,870
make it distributed we're going to make

00:19:28,140 --> 00:19:33,390
a new a back-end message will call it

00:19:30,870 --> 00:19:35,910
message back end that will basically let

00:19:33,390 --> 00:19:38,100
us run a bunch of message hubs and

00:19:35,910 --> 00:19:40,380
they'll all be connected somehow so when

00:19:38,100 --> 00:19:41,490
you pub to on to one channel and you're

00:19:40,380 --> 00:19:42,660
listening on another one and you're

00:19:41,490 --> 00:19:45,150
listening on that channel you'll get the

00:19:42,660 --> 00:19:49,830
message and this message back end is

00:19:45,150 --> 00:19:51,450
made up of two two sub surfaces of a

00:19:49,830 --> 00:19:53,760
peer transmitter and a peer receiver and

00:19:51,450 --> 00:19:55,770
now we're going to use your mq and you i

00:19:53,760 --> 00:20:00,540
missed that last talk but i imagine it

00:19:55,770 --> 00:20:09,770
was pertinent to our interests here so

00:20:00,540 --> 00:20:09,770
let's do that questions so far

00:20:14,059 --> 00:20:21,889
okay so G event sleep so if you actually

00:20:17,970 --> 00:20:24,899
do a loop that doesn't actually do any

00:20:21,889 --> 00:20:26,730
that that happens to not do any i/o then

00:20:24,899 --> 00:20:28,529
it's going to you need to yield somehow

00:20:26,730 --> 00:20:30,539
because of the green 'let's as a G event

00:20:28,529 --> 00:20:32,879
sleep 0 is how you yield to the other so

00:20:30,539 --> 00:20:36,019
if you get in a loop that doesn't

00:20:32,879 --> 00:20:44,269
actually do any i/o you need to do that

00:20:36,019 --> 00:20:44,269
does that make sense ok what's that

00:20:44,750 --> 00:20:53,909
can't hear you know if you restart it

00:20:51,389 --> 00:20:55,769
will kill connections reload is just a

00:20:53,909 --> 00:20:57,509
hook basically the the runner are

00:20:55,769 --> 00:20:59,159
sending a signal and then it calls your

00:20:57,509 --> 00:21:00,210
reload hook and then you can do whatever

00:20:59,159 --> 00:21:02,909
you want it's going to reload

00:21:00,210 --> 00:21:05,970
configuration and log configuration and

00:21:02,909 --> 00:21:06,960
it will do whatever you want if you want

00:21:05,970 --> 00:21:08,129
to do anything more than change

00:21:06,960 --> 00:21:10,320
configuration then you would have to

00:21:08,129 --> 00:21:12,960
handle that yourself so reload does not

00:21:10,320 --> 00:21:14,460
kill connections it just sends you a

00:21:12,960 --> 00:21:23,399
signal and a nice hook for dealing with

00:21:14,460 --> 00:21:31,769
it what's that I don't know maybe it

00:21:23,399 --> 00:21:35,549
should but it didn't so I did this ok so

00:21:31,769 --> 00:21:38,039
what we have here is a new module called

00:21:35,549 --> 00:21:39,899
back end and this is starting to get

00:21:38,039 --> 00:21:44,129
kind of complicated but it's not that

00:21:39,899 --> 00:21:45,450
complicated it's about 90 lines so now

00:21:44,129 --> 00:21:46,950
we have the subscription which again

00:21:45,450 --> 00:21:50,220
wrapping Q we pulled that out of the

00:21:46,950 --> 00:21:52,289
other the hub module and we have a

00:21:50,220 --> 00:21:54,929
back-end service which we can see on one

00:21:52,289 --> 00:21:57,600
screen and it's basically a little

00:21:54,929 --> 00:21:58,799
facade type thing to wrap to other sub

00:21:57,600 --> 00:22:01,830
surfaces pier transmitter and pure

00:21:58,799 --> 00:22:04,440
receiver and it gives you publish and

00:22:01,830 --> 00:22:06,750
subscribe which refers to transmitter to

00:22:04,440 --> 00:22:10,620
broadcast that and subscribe will create

00:22:06,750 --> 00:22:13,679
a subscription based on the receiver so

00:22:10,620 --> 00:22:15,389
first looking at pier transmitter pier

00:22:13,679 --> 00:22:17,730
transmitter is going to take the back

00:22:15,389 --> 00:22:20,009
end object and pull the cluster off of

00:22:17,730 --> 00:22:21,360
that oh let's actually so the way we're

00:22:20,009 --> 00:22:25,520
going to model a cluster here is with

00:22:21,360 --> 00:22:29,400
this observable set which is

00:22:25,520 --> 00:22:30,960
basically a utility thing here so we

00:22:29,400 --> 00:22:33,480
created this generic observable class

00:22:30,960 --> 00:22:35,250
and then wrapped set made an observable

00:22:33,480 --> 00:22:43,080
set so whenever you add remove to it you

00:22:35,250 --> 00:22:45,860
get a call back if you want to whoops so

00:22:43,080 --> 00:22:48,090
what happens is our peer transmitter

00:22:45,860 --> 00:22:49,080
when we start up we actually say hey

00:22:48,090 --> 00:22:51,390
cluster we're going to attach a

00:22:49,080 --> 00:22:53,670
connector to it this guy was just going

00:22:51,390 --> 00:22:55,620
to call connect and call connect is just

00:22:53,670 --> 00:22:56,820
going to say zeromq socket connect and

00:22:55,620 --> 00:22:58,620
I'll just connect to it so whenever a

00:22:56,820 --> 00:23:01,200
new thing comes into your cluster which

00:22:58,620 --> 00:23:03,360
is defined somewhere else with this

00:23:01,200 --> 00:23:05,160
observable set it will connect to it and

00:23:03,360 --> 00:23:07,710
then when you broadcast something we

00:23:05,160 --> 00:23:09,210
just send a multi-part message of the

00:23:07,710 --> 00:23:11,190
channel and then a message packed

00:23:09,210 --> 00:23:14,100
version representation of the message

00:23:11,190 --> 00:23:16,110
and receiver is basically what you would

00:23:14,100 --> 00:23:18,660
be connecting to on any of these other

00:23:16,110 --> 00:23:20,400
hosts so we bind to it and we create a

00:23:18,660 --> 00:23:22,770
socket are we set up the vine address

00:23:20,400 --> 00:23:23,640
create a socket subscribe socket here's

00:23:22,770 --> 00:23:26,730
where we actually manage the

00:23:23,640 --> 00:23:29,910
subscriptions when we start we bind and

00:23:26,730 --> 00:23:31,950
then we call listen which is a loop we

00:23:29,910 --> 00:23:34,320
just listen for multi-part messages and

00:23:31,950 --> 00:23:35,670
then we do that whole see what

00:23:34,320 --> 00:23:37,590
subscriptions we have and put them in

00:23:35,670 --> 00:23:40,410
there and then we have subscribe and

00:23:37,590 --> 00:23:43,760
unsubscribe which are basically doing

00:23:40,410 --> 00:23:43,760
this your own q subscribed unsubscribe

00:23:45,710 --> 00:23:51,720
so if we if we have that we can actually

00:23:48,420 --> 00:23:54,960
assuming we have a cluster that somehow

00:23:51,720 --> 00:23:56,250
changes we we can actually create

00:23:54,960 --> 00:23:57,450
multiple nodes and they would all just

00:23:56,250 --> 00:23:59,480
kind of connect to each other and they

00:23:57,450 --> 00:24:02,340
broadcast all messages to each other

00:23:59,480 --> 00:24:06,540
using zeromq which isn't you know ideal

00:24:02,340 --> 00:24:08,760
again this is kind of toy but um we're

00:24:06,540 --> 00:24:12,210
going to now have to integrate this

00:24:08,760 --> 00:24:14,460
because our hub is still doing this old

00:24:12,210 --> 00:24:17,550
stuff its handling publish and subscribe

00:24:14,460 --> 00:24:20,240
and it's subscription so let's just

00:24:17,550 --> 00:24:25,860
magically we go on to the next chapter

00:24:20,240 --> 00:24:28,830
and so now our hub adds back-end a

00:24:25,860 --> 00:24:29,760
message back end is a sub service and we

00:24:28,830 --> 00:24:32,640
just defer publish and subscribe

00:24:29,760 --> 00:24:34,320
requests to it and so those fronts sort

00:24:32,640 --> 00:24:36,300
of front-end services that we have they

00:24:34,320 --> 00:24:38,400
talked to hub just the same way and it

00:24:36,300 --> 00:24:45,490
just all works

00:24:38,400 --> 00:24:48,310
and I would love to show you that but

00:24:45,490 --> 00:24:49,960
I'm not going to know um the problem now

00:24:48,310 --> 00:24:51,760
is that we have to define this cluster

00:24:49,960 --> 00:24:55,870
somehow and this is the like hard part

00:24:51,760 --> 00:24:59,830
that you would normally use a Doozer or

00:24:55,870 --> 00:25:01,870
something like that for zookeeper but we

00:24:59,830 --> 00:25:03,730
you know I just decided and we don't use

00:25:01,870 --> 00:25:08,620
this at Julia but we just decided for

00:25:03,730 --> 00:25:11,080
for fun to create basically a service

00:25:08,620 --> 00:25:14,440
that will provide this for you so that

00:25:11,080 --> 00:25:16,120
you basically say run node and give it

00:25:14,440 --> 00:25:17,860
up any other node in the cluster and it

00:25:16,120 --> 00:25:19,390
will join that cluster and all the nodes

00:25:17,860 --> 00:25:22,750
in that cluster will now know about it

00:25:19,390 --> 00:25:24,670
and then when any cluster dies all the

00:25:22,750 --> 00:25:26,050
others will know about it because they

00:25:24,670 --> 00:25:28,630
all basically connect to a leader and

00:25:26,050 --> 00:25:30,370
the leader dies it does a really really

00:25:28,630 --> 00:25:33,580
simple distributed leader election

00:25:30,370 --> 00:25:36,640
algorithm that I'll show you so this

00:25:33,580 --> 00:25:38,590
service cluster coordinator is made up

00:25:36,640 --> 00:25:42,540
of two sub services again because it's

00:25:38,590 --> 00:25:42,540
sort of this peer-to-peer thing

00:26:06,970 --> 00:26:13,539
sorry okay so here's our cluster

00:26:10,900 --> 00:26:17,049
coordinator it has a bunch of stuff like

00:26:13,539 --> 00:26:20,289
a promoter devant exposed via wait for

00:26:17,049 --> 00:26:22,360
promotion it has the current leader has

00:26:20,289 --> 00:26:26,350
some sort of identity it's now managing

00:26:22,360 --> 00:26:27,700
our cluster observable set and that

00:26:26,350 --> 00:26:30,700
basically runs these two things a peer

00:26:27,700 --> 00:26:32,710
server which is basically a TCP server

00:26:30,700 --> 00:26:35,130
and it does a bunch of random stuff to

00:26:32,710 --> 00:26:38,740
make this sort of made-up protocol work

00:26:35,130 --> 00:26:41,440
and then we have the pure client and I

00:26:38,740 --> 00:26:42,880
you know I wanted to go into detail with

00:26:41,440 --> 00:26:44,740
some of the stuff but I can't I'll show

00:26:42,880 --> 00:26:46,870
you the leader election now so assuming

00:26:44,740 --> 00:26:48,640
you find out that the leader that you

00:26:46,870 --> 00:26:50,140
were connected to so first of all what

00:26:48,640 --> 00:26:51,850
happens is you connect to any node if

00:26:50,140 --> 00:26:53,830
it's not the leader it says hey that I'm

00:26:51,850 --> 00:26:55,600
the Pleader this guy is so you go okay

00:26:53,830 --> 00:26:56,799
I'll connect to that guy and so then you

00:26:55,600 --> 00:26:59,590
connect to the leader and the leader

00:26:56,799 --> 00:27:01,659
just a you know knows that you're

00:26:59,590 --> 00:27:03,610
connected ideally you would want some

00:27:01,659 --> 00:27:05,289
sort of real heartbeats but it just uses

00:27:03,610 --> 00:27:07,419
the connection so if you lose the

00:27:05,289 --> 00:27:09,490
connection to the leader then

00:27:07,419 --> 00:27:10,390
everybody's going to go oh man we lost

00:27:09,490 --> 00:27:11,980
the leader we have to do a leader

00:27:10,390 --> 00:27:15,340
election so it has to do a distributed

00:27:11,980 --> 00:27:16,900
leader election which sounds hard but

00:27:15,340 --> 00:27:18,549
there's an there's an easy way that's

00:27:16,900 --> 00:27:21,190
kind of dumb and works in a lot of cases

00:27:18,549 --> 00:27:22,809
but not all of them well you basically

00:27:21,190 --> 00:27:24,580
take all the hosts that you already know

00:27:22,809 --> 00:27:26,140
about and sort them because that's a

00:27:24,580 --> 00:27:27,970
deterministic thing and you just get a

00:27:26,140 --> 00:27:29,200
list then now they all have all the

00:27:27,970 --> 00:27:31,120
other hosts you just pick the first one

00:27:29,200 --> 00:27:33,490
off the list and you all say okay that

00:27:31,120 --> 00:27:35,140
guy's is the leader and then you all he

00:27:33,490 --> 00:27:36,880
becomes the leader and you all connect

00:27:35,140 --> 00:27:40,120
to it and if you just happen to for some

00:27:36,880 --> 00:27:42,039
reason get another one they will know

00:27:40,120 --> 00:27:46,450
you connect to them and they'll redirect

00:27:42,039 --> 00:27:55,260
you to the right one so it works out so

00:27:46,450 --> 00:27:55,260
I will run this ignore this broken pipe

00:27:55,910 --> 00:28:11,720
oh and just to show you we do have the

00:28:05,980 --> 00:28:15,230
the our gateway now has a ton of stuff

00:28:11,720 --> 00:28:17,450
in it it's got the cluster coordinator

00:28:15,230 --> 00:28:19,580
the number client the message hub and

00:28:17,450 --> 00:28:25,850
this weird announcer thing that you'll

00:28:19,580 --> 00:28:29,570
see in a bit well maybe actually so the

00:28:25,850 --> 00:28:34,280
way this works a cluster the new gateway

00:28:29,570 --> 00:28:39,290
with this cluster coordinator has a has

00:28:34,280 --> 00:28:40,370
some configuration identity and a leader

00:28:39,290 --> 00:28:49,160
so the first time we're actually using

00:28:40,370 --> 00:28:50,210
the configuration here and we're

00:28:49,160 --> 00:28:52,700
basically just pulling it from the

00:28:50,210 --> 00:28:57,560
environment so we have to identify

00:28:52,700 --> 00:29:01,700
somehow there's a identity I examine one

00:28:57,560 --> 00:29:08,150
and the leader will be myself so you got

00:29:01,700 --> 00:29:13,720
a bootstrap at somehow and so we got

00:29:08,150 --> 00:29:13,720
that guy running let's make another one

00:29:15,820 --> 00:29:19,150
so get up

00:29:23,710 --> 00:29:26,370
how did

00:29:35,840 --> 00:29:39,340
no the other one worked

00:29:45,810 --> 00:29:53,510
three okay so we got through these guys

00:29:47,880 --> 00:29:57,960
running and we can that announce service

00:29:53,510 --> 00:30:01,020
is basically again doing that we're

00:29:57,960 --> 00:30:02,910
publishing into a new channel all the

00:30:01,020 --> 00:30:04,500
all the all the nodes are basically

00:30:02,910 --> 00:30:05,310
announcing their presence every second

00:30:04,500 --> 00:30:08,790
and they're doing it in order

00:30:05,310 --> 00:30:11,340
coordinated in a really dumb way but and

00:30:08,790 --> 00:30:15,540
then you see the leader is number one

00:30:11,340 --> 00:30:16,950
and if we were to like use the pub sub

00:30:15,540 --> 00:30:20,730
stuff it would all work but we can

00:30:16,950 --> 00:30:23,510
actually start let's actually connect

00:30:20,730 --> 00:30:23,510
two numbers here

00:30:30,200 --> 00:30:35,870
so we had some numbers coming out notice

00:30:32,780 --> 00:30:37,550
that normally again normally all the

00:30:35,870 --> 00:30:38,630
nodes would have created a connection to

00:30:37,550 --> 00:30:40,190
the number service and so you'd be

00:30:38,630 --> 00:30:42,500
seeing like three times as many numbers

00:30:40,190 --> 00:30:44,840
here but because of the leader thing we

00:30:42,500 --> 00:30:51,620
can actually say in our code some stupid

00:30:44,840 --> 00:30:56,900
little thing that says if cluster is

00:30:51,620 --> 00:30:59,020
leader than then publish so so you only

00:30:56,900 --> 00:31:01,940
have one guy publishing into the numbers

00:30:59,020 --> 00:31:07,310
and if any of these guys died so let's

00:31:01,940 --> 00:31:15,860
kill the you know I kill the leader all

00:31:07,310 --> 00:31:18,500
right so killing the leader this guy

00:31:15,860 --> 00:31:20,660
said new leader me and this guy said new

00:31:18,500 --> 00:31:23,000
leader that guy and you can see the

00:31:20,660 --> 00:31:26,810
announcer is now announcing just three

00:31:23,000 --> 00:31:28,850
and 22 is the leader and our numbers are

00:31:26,810 --> 00:31:30,050
still coming out we're connected to

00:31:28,850 --> 00:31:31,070
three though if we could if we kill

00:31:30,050 --> 00:31:33,710
three we're going to lose this

00:31:31,070 --> 00:31:35,330
connection but you can see we can

00:31:33,710 --> 00:31:39,350
actually kit well let's add back the

00:31:35,330 --> 00:31:42,430
first guy right we can't our leader is

00:31:39,350 --> 00:31:48,160
not one let's let's connect two three oh

00:31:42,430 --> 00:31:48,160
man yeah

00:31:52,750 --> 00:32:00,080
alright so now we're connected to one of

00:31:56,990 --> 00:32:03,650
these guys so now all the family is back

00:32:00,080 --> 00:32:06,800
together and and everything still

00:32:03,650 --> 00:32:11,060
working and we could kill this guy again

00:32:06,800 --> 00:32:13,420
we could kill two and so eventually

00:32:11,060 --> 00:32:16,040
three is gonna be like what the hell

00:32:13,420 --> 00:32:18,350
along the leader and we're still going

00:32:16,040 --> 00:32:21,710
and three is still there the only one

00:32:18,350 --> 00:32:25,850
left he is the leader and our numbers

00:32:21,710 --> 00:32:35,120
are still going if we kill three me lose

00:32:25,850 --> 00:32:39,530
whoops we lose everything so we more or

00:32:35,120 --> 00:32:41,210
less accomplished what we were going for

00:32:39,530 --> 00:32:42,620
the announcement thing we made a gateway

00:32:41,210 --> 00:32:45,260
to ran member service built around

00:32:42,620 --> 00:32:46,880
self-watering of it and it you know I

00:32:45,260 --> 00:32:49,550
know we didn't like the code was pretty

00:32:46,880 --> 00:32:50,840
simple and it was simple because it was

00:32:49,550 --> 00:32:53,300
broken down into these little pieces

00:32:50,840 --> 00:32:55,310
right and not only do you get this

00:32:53,300 --> 00:32:56,810
advantage of simple code but you can

00:32:55,310 --> 00:33:00,410
actually now reuse them and recompose

00:32:56,810 --> 00:33:02,330
them in different ways so if you're

00:33:00,410 --> 00:33:03,770
interested in this in the ski ginko

00:33:02,330 --> 00:33:05,510
thing it's actually open source and

00:33:03,770 --> 00:33:07,700
we're rewriting it it's I mean it's

00:33:05,510 --> 00:33:10,250
really simple we've been using it for a

00:33:07,700 --> 00:33:11,900
while and we it'd be nice to spilled

00:33:10,250 --> 00:33:13,340
some higher level primitives like real

00:33:11,900 --> 00:33:14,870
versions of the stuff that we just saw

00:33:13,340 --> 00:33:16,070
that you could use in sort of like a

00:33:14,870 --> 00:33:20,390
standard library for building

00:33:16,070 --> 00:33:22,190
distributed systems and that's that's

00:33:20,390 --> 00:33:24,460
pretty much it if there's any questions

00:33:22,190 --> 00:33:24,460
now

00:33:37,619 --> 00:33:43,179
first of all I enjoyed the factory used

00:33:40,179 --> 00:33:46,029
get to progress on the slides to a

00:33:43,179 --> 00:33:48,759
question first of all the the logic in

00:33:46,029 --> 00:33:50,999
distributed systems and tends to split

00:33:48,759 --> 00:33:54,629
on different nodes how do you debug them

00:33:50,999 --> 00:33:59,049
in means of logging and things like that

00:33:54,629 --> 00:34:05,940
um I mean yeah you end up with all kinds

00:33:59,049 --> 00:34:08,649
of crazy like different it's hard

00:34:05,940 --> 00:34:10,629
debugging I don't have a great answer to

00:34:08,649 --> 00:34:16,419
other than and not the normal the normal

00:34:10,629 --> 00:34:18,069
things and the second question how do

00:34:16,419 --> 00:34:20,529
you handle service invocation on

00:34:18,069 --> 00:34:23,889
different servers service indication

00:34:20,529 --> 00:34:26,139
like now you've defined a way to that

00:34:23,889 --> 00:34:28,539
services have different services that

00:34:26,139 --> 00:34:30,549
dependent on and they can invoke each

00:34:28,539 --> 00:34:33,099
other yeah but they're doing it on a

00:34:30,549 --> 00:34:35,500
single server so um I mean this is kind

00:34:33,099 --> 00:34:38,259
of an interesting example you talk about

00:34:35,500 --> 00:34:39,730
a service implication please remain a

00:34:38,259 --> 00:34:43,809
little bit quiet if you don't mind step

00:34:39,730 --> 00:34:45,339
out of the hall if you need to talk for

00:34:43,809 --> 00:34:49,179
example we didn't really do any RPC

00:34:45,339 --> 00:34:50,769
calls to any other service the only the

00:34:49,179 --> 00:34:53,829
only real communication we're doing

00:34:50,769 --> 00:34:57,160
across nodes was pumps up what with

00:34:53,829 --> 00:35:00,160
zeromq and then we have this weird TCP

00:34:57,160 --> 00:35:01,769
protocol but if we actually wanted to

00:35:00,160 --> 00:35:04,630
for example we're working on a way to

00:35:01,769 --> 00:35:06,849
basically turn any service and ginkgo

00:35:04,630 --> 00:35:09,490
into a something that you can call

00:35:06,849 --> 00:35:10,720
remotely you know not a new idea but the

00:35:09,490 --> 00:35:14,559
idea would be to make it really simple

00:35:10,720 --> 00:35:16,240
and use something like zeromq so there

00:35:14,559 --> 00:35:18,279
are a lot of ways you could do it you

00:35:16,240 --> 00:35:19,990
have a lot of options and we're thinking

00:35:18,279 --> 00:35:22,150
of ways to sort of do that with zeromq

00:35:19,990 --> 00:35:26,339
in a very like minimalistic transparent

00:35:22,150 --> 00:35:26,339
way yeah thanks yeah

00:35:27,619 --> 00:35:32,509
could you speak a little bit to your

00:35:29,900 --> 00:35:36,619
experiences with G event and sort of how

00:35:32,509 --> 00:35:40,009
it's been treating you guys so we use

00:35:36,619 --> 00:35:47,930
twisted before sure and that led to a

00:35:40,009 --> 00:35:50,869
lot of interesting things problems and

00:35:47,930 --> 00:35:53,599
so when we when we found g event it was

00:35:50,869 --> 00:35:56,420
actually quite nice first of all

00:35:53,599 --> 00:35:57,650
conceptually it's much simpler and it

00:35:56,420 --> 00:35:59,440
lets you think in a much more

00:35:57,650 --> 00:36:01,670
traditional sort of way of thinking

00:35:59,440 --> 00:36:05,839
without some of the disadvantages of

00:36:01,670 --> 00:36:07,249
actually using threads you have to be

00:36:05,839 --> 00:36:08,450
aware of what's going on you know you

00:36:07,249 --> 00:36:09,710
have to know if something you've done

00:36:08,450 --> 00:36:14,269
some things that we called it's going to

00:36:09,710 --> 00:36:17,329
yield but that's a you know if you if

00:36:14,269 --> 00:36:20,089
you so far it's been if we keep these

00:36:17,329 --> 00:36:24,079
modules very simple it's very obvious

00:36:20,089 --> 00:36:26,259
what's going on so we haven't really run

00:36:24,079 --> 00:36:29,660
into any problems with G event

00:36:26,259 --> 00:36:31,869
specifically yet we ran into some roms

00:36:29,660 --> 00:36:35,599
with the 0 key bindings but there's

00:36:31,869 --> 00:36:38,150
there's a patch fixed for those but for

00:36:35,599 --> 00:36:40,420
example you do have to use like the g

00:36:38,150 --> 00:36:42,799
events or mq library to make that work

00:36:40,420 --> 00:36:46,099
and then of course running into things

00:36:42,799 --> 00:36:49,069
like oh we can't use this you know see

00:36:46,099 --> 00:36:52,609
version of the MySQL client and stuff

00:36:49,069 --> 00:36:54,619
like that which you know in some we

00:36:52,609 --> 00:36:57,109
might handle in ways for example

00:36:54,619 --> 00:36:59,989
thinking in terms of services normally

00:36:57,109 --> 00:37:01,309
you might not talk ideally in a service

00:36:59,989 --> 00:37:04,130
learning architecture you might not talk

00:37:01,309 --> 00:37:05,539
to a database directly remotely you

00:37:04,130 --> 00:37:07,430
would have a service in front of it

00:37:05,539 --> 00:37:09,380
right and that service could be written

00:37:07,430 --> 00:37:10,849
in anything go or see here whatever but

00:37:09,380 --> 00:37:12,559
it's really simple and then your

00:37:10,849 --> 00:37:15,650
services talked to that via some RPC

00:37:12,559 --> 00:37:17,119
mechanism and so thinking about well if

00:37:15,650 --> 00:37:20,089
we did that but we did it in the same

00:37:17,119 --> 00:37:22,369
process we could just say we were

00:37:20,089 --> 00:37:25,009
creating a service that is in another

00:37:22,369 --> 00:37:28,160
thread or in another process and so then

00:37:25,009 --> 00:37:29,150
we could use that blocking library so

00:37:28,160 --> 00:37:34,339
one of the things we're talking about

00:37:29,150 --> 00:37:37,339
doing is having ginko of abstract

00:37:34,339 --> 00:37:38,980
concurrency engines so you need g event

00:37:37,339 --> 00:37:41,830
or you could use event

00:37:38,980 --> 00:37:43,960
or you could use real threads or you

00:37:41,830 --> 00:37:47,710
could use real processes a multi-process

00:37:43,960 --> 00:37:51,070
a multi-process service would basically

00:37:47,710 --> 00:37:53,109
say whenever you add a SATA service it

00:37:51,070 --> 00:37:54,580
would create another process and run it

00:37:53,109 --> 00:37:58,270
in there and sort of just take care of

00:37:54,580 --> 00:38:00,040
everything for you so yeah that sounds

00:37:58,270 --> 00:38:02,160
great it's it's been really fun I like

00:38:00,040 --> 00:38:02,160

YouTube URL: https://www.youtube.com/watch?v=tYk4_Nzl-Gg


