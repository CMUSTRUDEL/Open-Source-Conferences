Title: pytest - rapid and simple testing with Python
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Holger Krekel
The py.test tool presents a rapid and simple way to write tests.  This talks introduces common testing terms, basic examples and unique pytest features for writing unit- or functional tests: assertions and dependency injection mechanism
Captions: 
	00:00:00,589 --> 00:00:07,319
our next talk is PI test rapid and

00:00:04,470 --> 00:00:10,290
simple testing with Python and our

00:00:07,319 --> 00:00:26,720
speaker is Hoebel Holger crackle thank

00:00:10,290 --> 00:00:29,060
you okay I'm going to start right away

00:00:26,720 --> 00:00:33,510
thanks all for coming

00:00:29,060 --> 00:00:36,570
I'm going to give a talk on various

00:00:33,510 --> 00:00:38,309
aspects of testing starting talking a

00:00:36,570 --> 00:00:40,680
bit and connecting to when you have been

00:00:38,309 --> 00:00:43,500
to the other talks for testing this

00:00:40,680 --> 00:00:45,210
morning I'm going to connect to what

00:00:43,500 --> 00:00:47,910
Gary Barnard had to say about testing

00:00:45,210 --> 00:00:50,550
tiles and styles and also some other

00:00:47,910 --> 00:00:52,440
people and I'm going to talk about why

00:00:50,550 --> 00:00:57,449
tests of course and its unique features

00:00:52,440 --> 00:00:59,520
and bit about plugins and why people

00:00:57,449 --> 00:01:05,369
choose it over other frameworks and so

00:00:59,520 --> 00:01:07,080
on for me from who am I actually I'm

00:01:05,369 --> 00:01:10,530
involved in the Python community since

00:01:07,080 --> 00:01:12,570
10 years and I think it started with the

00:01:10,530 --> 00:01:16,259
first Europe I from and first PyCon that

00:01:12,570 --> 00:01:18,390
I really got into things and I like in

00:01:16,259 --> 00:01:20,640
2003 I was one of the persons actually

00:01:18,390 --> 00:01:22,170
starting the pi PI project and was a

00:01:20,640 --> 00:01:24,390
core developer for a couple of years now

00:01:22,170 --> 00:01:26,820
as I started I test that around the same

00:01:24,390 --> 00:01:29,460
time pi PI is using it and it evolved as

00:01:26,820 --> 00:01:31,229
a separate project I also do things like

00:01:29,460 --> 00:01:33,060
x''k net where you can have favorite

00:01:31,229 --> 00:01:36,360
development with like Python 3 and

00:01:33,060 --> 00:01:38,340
python 2 and also recently did a tool

00:01:36,360 --> 00:01:41,909
called talks which kind of like tries to

00:01:38,340 --> 00:01:43,229
standardized testing in Pisan that's a

00:01:41,909 --> 00:01:44,939
bit of my background I also did some

00:01:43,229 --> 00:01:46,860
consulting and teaching and lots of

00:01:44,939 --> 00:01:50,070
different things but these are at least

00:01:46,860 --> 00:01:52,470
the projects I'm involved in and so you

00:01:50,070 --> 00:01:54,899
can see where I'm coming from when I'm

00:01:52,470 --> 00:01:58,770
talking about types of testing in the

00:01:54,899 --> 00:02:00,960
last I don't know eight years or

00:01:58,770 --> 00:02:02,310
something I took like different stances

00:02:00,960 --> 00:02:07,110
so this is kind of like my up-to-date

00:02:02,310 --> 00:02:09,179
view on how I view testing and I think

00:02:07,110 --> 00:02:12,020
it makes a lot of sense to talk about

00:02:09,179 --> 00:02:14,870
fine-grain tests also called unit tests

00:02:12,020 --> 00:02:17,390
they usually deal with a single function

00:02:14,870 --> 00:02:21,980
or a single class that you actually test

00:02:17,390 --> 00:02:24,020
behavior for and they will be very fast

00:02:21,980 --> 00:02:26,960
to run we had like whole talks focusing

00:02:24,020 --> 00:02:29,330
on this very fast to run and they give

00:02:26,960 --> 00:02:30,920
you very specific failures that means

00:02:29,330 --> 00:02:33,470
that if you get a failure you know what

00:02:30,920 --> 00:02:35,120
is going wrong problem is if you have

00:02:33,470 --> 00:02:36,920
like a large system with lots of unit

00:02:35,120 --> 00:02:40,880
tests like the pi PI project has

00:02:36,920 --> 00:02:42,410
something like over 15,000 now and not

00:02:40,880 --> 00:02:44,270
all of them unit tests but a lot of them

00:02:42,410 --> 00:02:45,830
actually deal with like fine grained

00:02:44,270 --> 00:02:48,170
machinery so if you actually start

00:02:45,830 --> 00:02:49,990
refactoring you have to change a lot of

00:02:48,170 --> 00:02:53,180
things that's why I say it takes

00:02:49,990 --> 00:02:56,390
somewhat of a high maintenance as the

00:02:53,180 --> 00:02:58,700
system gets larger you also have to do

00:02:56,390 --> 00:03:00,740
in larger systems some kind of monkey

00:02:58,700 --> 00:03:02,840
patching sometimes to be able to even

00:03:00,740 --> 00:03:05,060
instantiate a class because you need to

00:03:02,840 --> 00:03:07,880
have some data base connection and so on

00:03:05,060 --> 00:03:09,500
so um you need to do something like

00:03:07,880 --> 00:03:13,670
monkey patching mocking and you need to

00:03:09,500 --> 00:03:16,850
use fixtures already then integration

00:03:13,670 --> 00:03:19,760
testing I recommend to rather subsume

00:03:16,850 --> 00:03:23,000
this usually under unit testing at least

00:03:19,760 --> 00:03:24,709
in the Python world it means that you

00:03:23,000 --> 00:03:26,330
have like several pieces of your code

00:03:24,709 --> 00:03:29,840
but still very little like two or three

00:03:26,330 --> 00:03:31,490
maybe or so that you that they interact

00:03:29,840 --> 00:03:33,980
with each other like you need one class

00:03:31,490 --> 00:03:37,010
to instantiate the other and then you

00:03:33,980 --> 00:03:39,080
perform some tests that's already what

00:03:37,010 --> 00:03:39,410
most people would call an integration

00:03:39,080 --> 00:03:41,780
test

00:03:39,410 --> 00:03:45,860
they're usually also fast to run and

00:03:41,780 --> 00:03:49,730
they share many of the problems problems

00:03:45,860 --> 00:03:51,590
many of the aspects and and conditions

00:03:49,730 --> 00:03:56,420
under legitimate tests run and can be

00:03:51,590 --> 00:03:59,390
reflected the most interesting different

00:03:56,420 --> 00:04:01,490
type of tests is really the one that is

00:03:59,390 --> 00:04:05,030
usually referred to as functional tests

00:04:01,490 --> 00:04:07,700
or system testing so those are really

00:04:05,030 --> 00:04:09,980
the two like on the far end of like as a

00:04:07,700 --> 00:04:12,530
programmer you have like the unit tests

00:04:09,980 --> 00:04:15,680
and you have like the things that more

00:04:12,530 --> 00:04:17,609
or less involve the whole system there

00:04:15,680 --> 00:04:19,739
you need something like an

00:04:17,609 --> 00:04:21,930
like whole application fixtures need to

00:04:19,739 --> 00:04:23,550
have your whole application set up in a

00:04:21,930 --> 00:04:25,560
way that you can actually do some kind

00:04:23,550 --> 00:04:28,409
of testing that comes more from the

00:04:25,560 --> 00:04:31,949
outside like sending web requests to it

00:04:28,409 --> 00:04:33,930
and things like this by the way if you

00:04:31,949 --> 00:04:35,669
actually want to interrupt I'm usually

00:04:33,930 --> 00:04:38,129
fine with that and just raise your hand

00:04:35,669 --> 00:04:40,199
and say something especially if it's

00:04:38,129 --> 00:04:42,330
like a small question not like big

00:04:40,199 --> 00:04:45,240
comments maybe but a small question then

00:04:42,330 --> 00:04:50,729
we can just directly interact there

00:04:45,240 --> 00:04:54,360
I actually prefer that so functional

00:04:50,729 --> 00:04:58,050
tests also connect to acceptance tests

00:04:54,360 --> 00:05:03,330
and UI level tests like what I just said

00:04:58,050 --> 00:05:04,919
about a system having to be set up in

00:05:03,330 --> 00:05:06,870
order to perform some tests like web

00:05:04,919 --> 00:05:09,509
requests it really means that you might

00:05:06,870 --> 00:05:11,669
actually end up doing like lock-in this

00:05:09,509 --> 00:05:13,800
user things like what selenium does look

00:05:11,669 --> 00:05:15,750
and this user perform this action see

00:05:13,800 --> 00:05:19,139
what the outcome is and so on and for

00:05:15,750 --> 00:05:20,520
that you actually also need similar

00:05:19,139 --> 00:05:22,199
fixtures that you need for your

00:05:20,520 --> 00:05:24,900
functional tests that you write as a

00:05:22,199 --> 00:05:27,900
programmer so they usually live in this

00:05:24,900 --> 00:05:29,969
world and connect to the functional

00:05:27,900 --> 00:05:33,240
tests the PI test basically has

00:05:29,969 --> 00:05:36,000
different mechanisms and it aims to make

00:05:33,240 --> 00:05:39,629
it very easy and rapid to write simple

00:05:36,000 --> 00:05:43,050
unit tests but it also aims to support a

00:05:39,629 --> 00:05:45,779
very advanced way of of writing

00:05:43,050 --> 00:05:47,759
functional tests advanced in a sense I'm

00:05:45,779 --> 00:05:49,169
going to explain in more detail but you

00:05:47,759 --> 00:05:51,419
can imagine if there are projects that

00:05:49,169 --> 00:05:53,639
use it for like a hundred tests and

00:05:51,419 --> 00:05:56,819
other projects using it for like 17,000

00:05:53,639 --> 00:05:59,219
tests that there must be some different

00:05:56,819 --> 00:06:01,589
mechanisms getting used and that's

00:05:59,219 --> 00:06:04,349
actually in the focus over the 10 years

00:06:01,589 --> 00:06:09,020
that this testing tool got developed

00:06:04,349 --> 00:06:11,460
so why PI test a few basic things

00:06:09,020 --> 00:06:13,520
it's especially if you compare it to

00:06:11,460 --> 00:06:16,589
unit tests yes of course also knows and

00:06:13,520 --> 00:06:18,120
just to get a good idea of this audience

00:06:16,589 --> 00:06:20,419
actually a lot of you are probably using

00:06:18,120 --> 00:06:23,729
knows that right and you raise your hand

00:06:20,419 --> 00:06:27,089
or not so many actually okay and PI

00:06:23,729 --> 00:06:28,180
tests already thank you and the standard

00:06:27,089 --> 00:06:31,660
unit tests

00:06:28,180 --> 00:06:36,600
thing okay and no note kind of like

00:06:31,660 --> 00:06:39,330
testing framework at all currently okay

00:06:36,600 --> 00:06:42,400
thank you

00:06:39,330 --> 00:06:45,070
so it's cross python and that means that

00:06:42,400 --> 00:06:47,889
it runs on any any kind of Python it

00:06:45,070 --> 00:06:51,009
runs on Python 2.4 and run Python 3.2 or

00:06:47,889 --> 00:06:53,860
303 or runs on pi PI it's kind of like

00:06:51,009 --> 00:06:55,300
the versions that get released of Pi

00:06:53,860 --> 00:06:56,800
tests always run on all of these

00:06:55,300 --> 00:06:59,530
versions it's kind of a promise so

00:06:56,800 --> 00:07:01,690
you're not I mean if there's not really

00:06:59,530 --> 00:07:03,180
a strong reason there's not going to be

00:07:01,690 --> 00:07:06,220
like dropped support for older versions

00:07:03,180 --> 00:07:08,110
which is kind of important I think in

00:07:06,220 --> 00:07:10,210
unit tests it's usually tied to the

00:07:08,110 --> 00:07:12,340
install Python so if new features are

00:07:10,210 --> 00:07:13,690
introduced its kind of not so easy to

00:07:12,340 --> 00:07:18,820
use them if you still want to remain

00:07:13,690 --> 00:07:21,759
compatible to older versions in it has

00:07:18,820 --> 00:07:24,849
what I would call and many other people

00:07:21,759 --> 00:07:27,099
call a pythonic style in terms of

00:07:24,849 --> 00:07:28,479
writing tests that doesn't it supports

00:07:27,099 --> 00:07:30,490
like you can run unit tests actually

00:07:28,479 --> 00:07:32,560
with PI tests no problem like the

00:07:30,490 --> 00:07:35,130
standard unit tests just type it in and

00:07:32,560 --> 00:07:37,840
it collects your tests and runs them but

00:07:35,130 --> 00:07:39,580
it also supports a simpler style of

00:07:37,840 --> 00:07:42,010
actually getting started with your tests

00:07:39,580 --> 00:07:45,370
it very much connects also to more

00:07:42,010 --> 00:07:48,190
advanced testing and the pythonic style

00:07:45,370 --> 00:07:50,860
also includes a different way to set up

00:07:48,190 --> 00:07:54,880
resources and that's like one main topic

00:07:50,860 --> 00:07:59,229
of the thing of this talk especially the

00:07:54,880 --> 00:08:02,680
test resource injection topic so when I

00:07:59,229 --> 00:08:05,229
say pythonic style it means no

00:08:02,680 --> 00:08:09,909
boilerplate basically this is like a

00:08:05,229 --> 00:08:13,659
complete application plus test and it

00:08:09,909 --> 00:08:18,669
uses the bare assert statement and you

00:08:13,659 --> 00:08:21,699
run it by typing the piping pyro test

00:08:18,669 --> 00:08:24,130
test sorry underscore sample apply or

00:08:21,699 --> 00:08:25,840
just pyro test if it's there in your

00:08:24,130 --> 00:08:28,270
directory it automatically finds the

00:08:25,840 --> 00:08:31,479
test as well because it has this test

00:08:28,270 --> 00:08:35,800
underscore prefix and then you if you

00:08:31,479 --> 00:08:39,599
actually do this then you get let's just

00:08:35,800 --> 00:08:46,699
do that actually see that the font

00:08:39,599 --> 00:08:55,370
big enough I hope it's visible let's see

00:08:46,699 --> 00:08:55,370
so if we do this then we will see the

00:08:55,610 --> 00:09:01,139
certain kind of reporting and PI test

00:08:58,350 --> 00:09:02,639
puts a lot of effort actually and

00:09:01,139 --> 00:09:04,949
there's the many contributions actually

00:09:02,639 --> 00:09:06,690
to to improve the reporting and here you

00:09:04,949 --> 00:09:09,420
see that the assert statements failed

00:09:06,690 --> 00:09:12,509
and it gives you the intermediate values

00:09:09,420 --> 00:09:15,209
and it's in some sense more pythonic

00:09:12,509 --> 00:09:17,279
than other approaches because you don't

00:09:15,209 --> 00:09:19,920
need to remember any kind of names like

00:09:17,279 --> 00:09:21,630
assert equals dictionary assert this

00:09:19,920 --> 00:09:24,930
under than that to get good reporting

00:09:21,630 --> 00:09:26,579
just use the assert statement and that's

00:09:24,930 --> 00:09:30,509
one of the main features that has been

00:09:26,579 --> 00:09:35,310
perfected lately so I'm going to talk a

00:09:30,509 --> 00:09:38,819
bit about this so I just showed you this

00:09:35,310 --> 00:09:40,889
example you see at the beginning like

00:09:38,819 --> 00:09:43,230
the platform and and there was like one

00:09:40,889 --> 00:09:45,420
test item collected and then the assert

00:09:43,230 --> 00:09:48,990
intermediate values and it shows you in

00:09:45,420 --> 00:09:53,160
which kind of line the which kind of

00:09:48,990 --> 00:09:56,180
which line the error comes from and what

00:09:53,160 --> 00:09:59,990
happens if you have like more complex

00:09:56,180 --> 00:10:03,480
assertions for example list comparisons

00:09:59,990 --> 00:10:04,920
there you actually here I construct the

00:10:03,480 --> 00:10:07,380
application basically in the test to

00:10:04,920 --> 00:10:09,899
make it all on one page I have two lists

00:10:07,380 --> 00:10:13,079
I compare them and you see what what is

00:10:09,899 --> 00:10:14,550
being done here it's the assert actually

00:10:13,079 --> 00:10:16,680
tries to make sure that it doesn't like

00:10:14,550 --> 00:10:18,300
extend over like pages and pages or

00:10:16,680 --> 00:10:22,170
something like this it kind of like

00:10:18,300 --> 00:10:24,540
dusty dot thing to indicate the

00:10:22,170 --> 00:10:26,639
assertion failure and then it tells you

00:10:24,540 --> 00:10:29,430
at index five there's a difference

00:10:26,639 --> 00:10:31,230
between the two lists and also the left

00:10:29,430 --> 00:10:33,660
content also tells you the left contains

00:10:31,230 --> 00:10:35,880
more items these are two important

00:10:33,660 --> 00:10:39,060
aspects that you usually have to pass

00:10:35,880 --> 00:10:43,050
out of your objects and make it harder

00:10:39,060 --> 00:10:46,769
actually to to read a failing test so

00:10:43,050 --> 00:10:49,110
also by default there is a kind of like

00:10:46,769 --> 00:10:51,059
DIF support for string comparisons also

00:10:49,110 --> 00:10:52,690
multi-line that means that if you

00:10:51,059 --> 00:10:55,570
compare two strings

00:10:52,690 --> 00:10:57,550
and you get a diff actually and they

00:10:55,570 --> 00:11:00,190
fail because they are not equal you

00:10:57,550 --> 00:11:03,130
actually get a direct marker of where

00:11:00,190 --> 00:11:05,200
your string is different right and again

00:11:03,130 --> 00:11:07,210
this is all you don't need to know any

00:11:05,200 --> 00:11:09,130
special names any special methods that

00:11:07,210 --> 00:11:13,180
you have to call to get this output you

00:11:09,130 --> 00:11:15,460
just get by default then you can

00:11:13,180 --> 00:11:19,390
customize this so if you have object

00:11:15,460 --> 00:11:21,070
instances and you compare them then you

00:11:19,390 --> 00:11:24,040
might actually want in your tests to

00:11:21,070 --> 00:11:27,370
print some attribute values or get to

00:11:24,040 --> 00:11:31,800
show something about the state of the

00:11:27,370 --> 00:11:35,410
object and you can do this without

00:11:31,800 --> 00:11:38,500
modifying your actual production code by

00:11:35,410 --> 00:11:42,460
introducing something which is which you

00:11:38,500 --> 00:11:44,940
can see here this just the the only

00:11:42,460 --> 00:11:47,920
fragment that you need here is that you

00:11:44,940 --> 00:11:50,290
implement a certain hook called pi test

00:11:47,920 --> 00:11:54,010
or underscore assert a tripura no score

00:11:50,290 --> 00:11:56,140
compare and pi test actually calls this

00:11:54,010 --> 00:11:58,690
to print the information about your

00:11:56,140 --> 00:12:00,400
comparison so here we check actually

00:11:58,690 --> 00:12:03,580
okay if we actually are comparing for

00:12:00,400 --> 00:12:06,730
instances and the operation that was

00:12:03,580 --> 00:12:08,920
used as in equals equals then I want to

00:12:06,730 --> 00:12:11,910
actually display this right the

00:12:08,920 --> 00:12:16,030
comparing full-well attributes so a buff

00:12:11,910 --> 00:12:18,190
here you see that the representation of

00:12:16,030 --> 00:12:19,990
the failing assert is suddenly these two

00:12:18,190 --> 00:12:22,240
lines like this is the first line and

00:12:19,990 --> 00:12:25,200
this is the second which is exactly what

00:12:22,240 --> 00:12:27,490
we are producing here so you can make

00:12:25,200 --> 00:12:29,830
custom things with your objects without

00:12:27,490 --> 00:12:31,720
changing your production code at all so

00:12:29,830 --> 00:12:35,380
you don't need to reflect have like

00:12:31,720 --> 00:12:36,910
growing represent actually want to do

00:12:35,380 --> 00:12:38,710
here you only do it for testing purposes

00:12:36,910 --> 00:12:44,700
you can actually put it in some corner

00:12:38,710 --> 00:12:44,700
of your test support code to do this um

00:12:45,180 --> 00:12:51,280
this would this definition would appear

00:12:47,950 --> 00:12:53,800
in a so-called contest dot PI file which

00:12:51,280 --> 00:12:55,210
resides in your testing directory all

00:12:53,800 --> 00:12:59,040
right I talked about this it's kind of

00:12:55,210 --> 00:13:01,240
like the local plug-in mechanism yes so

00:12:59,040 --> 00:13:03,250
some people especially like I don't know

00:13:01,240 --> 00:13:04,750
two years ago or so they refer to this

00:13:03,250 --> 00:13:07,300
and said oh yeah you're doing

00:13:04,750 --> 00:13:09,100
these Assad things and reevaluating to

00:13:07,300 --> 00:13:11,170
get the intermediate values you do only

00:13:09,100 --> 00:13:13,510
all kinds of things with that isn't it

00:13:11,170 --> 00:13:16,420
very magic and that has been true for

00:13:13,510 --> 00:13:20,800
something like six or seven years but

00:13:16,420 --> 00:13:22,930
lately like last year we introduced what

00:13:20,800 --> 00:13:24,000
I call perfect assertions that means

00:13:22,930 --> 00:13:26,650
there are no side effects whatsoever

00:13:24,000 --> 00:13:30,730
what happens actually is that your test

00:13:26,650 --> 00:13:33,300
files get there's an AST and abstract

00:13:30,730 --> 00:13:36,010
syntax tree transformation that actually

00:13:33,300 --> 00:13:38,770
rewrites the assert statements only in

00:13:36,010 --> 00:13:41,290
the test modules and there we actually

00:13:38,770 --> 00:13:43,450
store the information we later retrieve

00:13:41,290 --> 00:13:45,910
when we print the failing test you don't

00:13:43,450 --> 00:13:48,430
see any of that you can look at the code

00:13:45,910 --> 00:13:50,800
actually Benjamin Peterson has done this

00:13:48,430 --> 00:13:55,180
code was also a very active type in Def

00:13:50,800 --> 00:13:57,460
and pi PI developer and it's a it works

00:13:55,180 --> 00:13:58,810
seamlessly by now it's a couple of

00:13:57,460 --> 00:14:01,000
versions later there were some things

00:13:58,810 --> 00:14:02,620
that we had to fix still but I think it

00:14:01,000 --> 00:14:04,030
works no very well so there are no side

00:14:02,620 --> 00:14:06,760
effects they will there's no

00:14:04,030 --> 00:14:08,680
reevaluation just in case you have heard

00:14:06,760 --> 00:14:10,480
about this like two years ago and if

00:14:08,680 --> 00:14:14,110
people are telling you you know it's all

00:14:10,480 --> 00:14:15,370
magic then ask them again about this new

00:14:14,110 --> 00:14:21,190
feature and if they don't know it then

00:14:15,370 --> 00:14:24,430
you know what to think of it so that's

00:14:21,190 --> 00:14:26,680
like two very basic thing or one very

00:14:24,430 --> 00:14:29,170
basic thing the whole assert reporting

00:14:26,680 --> 00:14:32,530
and cross python and then we talked

00:14:29,170 --> 00:14:33,940
about tess resource injection now what

00:14:32,530 --> 00:14:36,940
i'm not going to talk much about is

00:14:33,940 --> 00:14:38,860
automatic discovery of tests knows also

00:14:36,940 --> 00:14:41,440
does this and i'm only briefly going to

00:14:38,860 --> 00:14:44,050
talk about plugins and the extensive

00:14:41,440 --> 00:14:46,210
documentation is also a PDF a manual

00:14:44,050 --> 00:14:49,930
kind of thing that you can use and so on

00:14:46,210 --> 00:14:53,140
so test B sauce injection that's now

00:14:49,930 --> 00:14:54,760
related to the more advanced usage

00:14:53,140 --> 00:14:55,870
there's a certain thing you can just use

00:14:54,760 --> 00:14:57,790
right away you don't need to know

00:14:55,870 --> 00:15:01,330
anything just use it write your tests

00:14:57,790 --> 00:15:03,580
with it be done test resource injection

00:15:01,330 --> 00:15:06,190
is relates to what people have called

00:15:03,580 --> 00:15:08,589
earlier and the day dependency injection

00:15:06,190 --> 00:15:12,280
and it means that you basically just

00:15:08,589 --> 00:15:13,750
means that you can pass arguments or you

00:15:12,280 --> 00:15:15,940
can have arguments for your test

00:15:13,750 --> 00:15:18,529
functions so you have a test function

00:15:15,940 --> 00:15:21,649
that actually takes what I call my

00:15:18,529 --> 00:15:25,189
Ark which is often as the used term and

00:15:21,649 --> 00:15:28,699
also easy to Google actually in the pipe

00:15:25,189 --> 00:15:31,069
test documentation and this argument

00:15:28,699 --> 00:15:33,680
actually is constructed by PI test that

00:15:31,069 --> 00:15:37,519
calls a matching function to construct

00:15:33,680 --> 00:15:40,399
this argument and and then it runs the

00:15:37,519 --> 00:15:43,389
test function with that and here just

00:15:40,399 --> 00:15:46,370
assert it's just a simple example that

00:15:43,389 --> 00:15:48,620
what I get in here is equal seventeen

00:15:46,370 --> 00:15:52,160
and he has actually the factory function

00:15:48,620 --> 00:15:56,420
that creates the value and it's going to

00:15:52,160 --> 00:15:59,569
be a different one so it doesn't work so

00:15:56,420 --> 00:16:03,519
if I do if I do this and run it and of

00:15:59,569 --> 00:16:05,959
course you still get the assert

00:16:03,519 --> 00:16:08,240
representation and it tells you that

00:16:05,959 --> 00:16:12,499
this argument actually isn't that and

00:16:08,240 --> 00:16:14,569
the important bit here is that it's kind

00:16:12,499 --> 00:16:16,999
of like disconnected you say he and this

00:16:14,569 --> 00:16:21,410
test function I want to have a certain

00:16:16,999 --> 00:16:23,629
resource injected and PI test has a

00:16:21,410 --> 00:16:26,059
document a defined way how to actually

00:16:23,629 --> 00:16:30,439
find this resource can be in different

00:16:26,059 --> 00:16:33,410
places and there's a very there's of

00:16:30,439 --> 00:16:36,170
there's a switch the command-line switch

00:16:33,410 --> 00:16:38,209
called - - func arcs that shows you all

00:16:36,170 --> 00:16:40,459
of the available resources that you can

00:16:38,209 --> 00:16:42,079
have in your test functions there are

00:16:40,459 --> 00:16:43,550
some global helpers and there are some

00:16:42,079 --> 00:16:47,470
project specific things that you can

00:16:43,550 --> 00:16:49,879
define for yourself so the global things

00:16:47,470 --> 00:16:52,189
for example what you can have an

00:16:49,879 --> 00:16:54,170
argument you can use an argument simply

00:16:52,189 --> 00:16:57,829
which is called temp dear

00:16:54,170 --> 00:16:59,449
so the temp dear example is that you

00:16:57,829 --> 00:17:03,980
basically just say okay I want to have a

00:16:59,449 --> 00:17:07,569
temp dear and this is by default is a

00:17:03,980 --> 00:17:10,699
unique temporary directory for your test

00:17:07,569 --> 00:17:13,220
so and you have like multiple tests each

00:17:10,699 --> 00:17:16,039
of and you use the temp Thea thing then

00:17:13,220 --> 00:17:19,370
it will there will be an empty temporary

00:17:16,039 --> 00:17:24,679
directory managed by PI test and if you

00:17:19,370 --> 00:17:28,730
if this actually goes wrong let's just

00:17:24,679 --> 00:17:33,570
write this sorry yeah

00:17:28,730 --> 00:17:35,490
so it's really like this so that if it

00:17:33,570 --> 00:17:38,750
just goes wrong because it's in simple

00:17:35,490 --> 00:17:41,160
failure that's really all I need then

00:17:38,750 --> 00:17:44,060
you're not only you're going to see

00:17:41,160 --> 00:17:46,610
actually the object that were injected

00:17:44,060 --> 00:17:49,950
into the test function which is this one

00:17:46,610 --> 00:17:52,080
so we directly see it's a it's this

00:17:49,950 --> 00:17:54,000
directory that I'm using in my test

00:17:52,080 --> 00:17:56,130
function so you can just directly go

00:17:54,000 --> 00:17:57,720
there and check what kind of state was

00:17:56,130 --> 00:18:01,830
created there in case you create some

00:17:57,720 --> 00:18:03,690
files there and so on so that's just

00:18:01,830 --> 00:18:09,030
globally there for any project actually

00:18:03,690 --> 00:18:12,030
for anything using PI test and there is

00:18:09,030 --> 00:18:14,510
also another func arc which is called

00:18:12,030 --> 00:18:17,130
monkey patch and there you can actually

00:18:14,510 --> 00:18:19,710
perform wild monkey patching of your

00:18:17,130 --> 00:18:21,630
system like patch out some functions on

00:18:19,710 --> 00:18:23,430
some object and things like this and at

00:18:21,630 --> 00:18:25,830
the end of the test function it's going

00:18:23,430 --> 00:18:27,570
to be reverted so you don't need to care

00:18:25,830 --> 00:18:29,010
about this at all it's always going to

00:18:27,570 --> 00:18:32,580
happen after the test everything is

00:18:29,010 --> 00:18:37,410
cleaned up and I gave you two examples

00:18:32,580 --> 00:18:39,990
here maybe do this one first here I

00:18:37,410 --> 00:18:41,910
monkey patch has like several methods

00:18:39,990 --> 00:18:43,800
that offers you one is set etre another

00:18:41,910 --> 00:18:49,080
one is set item and so on the set etre

00:18:43,800 --> 00:18:52,350
means that i can set an attribute on a

00:18:49,080 --> 00:18:53,880
module in this case and i make it so

00:18:52,350 --> 00:18:56,250
that i actually substitute what is

00:18:53,880 --> 00:18:59,880
returned here so the West path expands

00:18:56,250 --> 00:19:03,240
user just returns ABC in this case and

00:18:59,880 --> 00:19:07,410
now if I call this OS path expand user I

00:19:03,240 --> 00:19:09,450
get ABC back right forget about the

00:19:07,410 --> 00:19:11,880
assert zero the assert 0 is always just

00:19:09,450 --> 00:19:13,410
for me a way to quickly fail and and

00:19:11,880 --> 00:19:16,350
look at some value or something like

00:19:13,410 --> 00:19:19,800
this so and you can also do this with

00:19:16,350 --> 00:19:21,870
environment variables and so on and it's

00:19:19,800 --> 00:19:25,230
a very in sorry it's a very easy way to

00:19:21,870 --> 00:19:29,130
a very secure way to deal with mocks

00:19:25,230 --> 00:19:33,960
and and attributes like this so that's

00:19:29,130 --> 00:19:36,420
also generally available what is also

00:19:33,960 --> 00:19:39,059
generally available is

00:19:36,420 --> 00:19:41,900
it's parameterization so if you have a

00:19:39,059 --> 00:19:44,280
test function that takes a certain

00:19:41,900 --> 00:19:46,590
argument you can say okay please

00:19:44,280 --> 00:19:48,809
parameterize me this and call this

00:19:46,590 --> 00:19:52,440
function multiple times with different

00:19:48,809 --> 00:19:56,040
values right and that's done we have a

00:19:52,440 --> 00:19:57,929
decorator a marker how it's called in PI

00:19:56,040 --> 00:19:59,850
test there are several bits of markers

00:19:57,929 --> 00:20:04,380
here we just use the parameterize marker

00:19:59,850 --> 00:20:06,510
and we say the argument num ITER number

00:20:04,380 --> 00:20:11,429
of iterations here should be from the

00:20:06,510 --> 00:20:15,450
list of 0 to 9 so HD range 10 and then

00:20:11,429 --> 00:20:17,580
you see a buff that we are going to run

00:20:15,450 --> 00:20:20,850
10 tests here and it collects 10 test

00:20:17,580 --> 00:20:22,679
items and due to the way the assert is

00:20:20,850 --> 00:20:26,160
written only the last test actually

00:20:22,679 --> 00:20:28,860
fails for this parameter so that also

00:20:26,160 --> 00:20:30,179
relates to you can actually call a test

00:20:28,860 --> 00:20:33,150
function multiple times with different

00:20:30,179 --> 00:20:35,870
values now this is all already quite

00:20:33,150 --> 00:20:38,940
interesting but I only showed you

00:20:35,870 --> 00:20:41,190
function arguments that are kind of like

00:20:38,940 --> 00:20:43,080
simple like here they are just integers

00:20:41,190 --> 00:20:44,520
or in the other case it's kind of like a

00:20:43,080 --> 00:20:46,799
temporary directory which is a bit more

00:20:44,520 --> 00:20:50,429
interesting already or the monkey patch

00:20:46,799 --> 00:20:52,110
1 which allows you to safely patch your

00:20:50,429 --> 00:20:56,400
system and revert to the old state

00:20:52,110 --> 00:20:58,380
afterwards the thing that is most

00:20:56,400 --> 00:21:00,630
interesting in real life applications

00:20:58,380 --> 00:21:04,169
and that's why I gave you and I fear a

00:21:00,630 --> 00:21:06,410
real live application is that you can

00:21:04,169 --> 00:21:09,419
separate your fixtures from your test

00:21:06,410 --> 00:21:11,280
function bead organized and classes test

00:21:09,419 --> 00:21:14,010
modules across directories it doesn't

00:21:11,280 --> 00:21:17,390
matter and the place where you actually

00:21:14,010 --> 00:21:19,710
provide and construct those fixtures and

00:21:17,390 --> 00:21:21,840
that's kind of like a thing that you

00:21:19,710 --> 00:21:24,929
your rather used like for system level

00:21:21,840 --> 00:21:26,910
testing or higher level testing and it

00:21:24,929 --> 00:21:30,059
means this is like a real live example

00:21:26,910 --> 00:21:35,010
from the exact net project which I'm

00:21:30,059 --> 00:21:38,429
also doing and here you see this is like

00:21:35,010 --> 00:21:40,890
a basic test a gateway is one Python

00:21:38,429 --> 00:21:43,080
interpreter connecting to another Python

00:21:40,890 --> 00:21:45,330
interpreter and you can actually send

00:21:43,080 --> 00:21:48,059
values in both directions and execute

00:21:45,330 --> 00:21:49,950
code on the other interpreter so Korra

00:21:48,059 --> 00:21:52,529
calm for example is using this

00:21:49,950 --> 00:21:54,659
lect Python too with Python three and

00:21:52,529 --> 00:21:57,630
execute code there and vice versa and

00:21:54,659 --> 00:22:00,450
send values to and fro and X segment has

00:21:57,630 --> 00:22:03,299
a large test suite and here you see that

00:22:00,450 --> 00:22:07,260
there is the GW just a shortcut for

00:22:03,299 --> 00:22:10,470
gateway and this test actually assumes I

00:22:07,260 --> 00:22:11,909
have somehow a working gateway and now I

00:22:10,470 --> 00:22:13,679
make some assumptions like is it

00:22:11,909 --> 00:22:16,919
correctly set up does it have a receiver

00:22:13,679 --> 00:22:18,750
thread does it really have an ID does is

00:22:16,919 --> 00:22:20,639
it actually specified by some string

00:22:18,750 --> 00:22:26,669
which I by which I can reconstruct the

00:22:20,639 --> 00:22:30,090
Gateway and so on and I do this and I do

00:22:26,669 --> 00:22:32,639
it also for like here I do a remote test

00:22:30,090 --> 00:22:35,639
I actually it's a bit more effort

00:22:32,639 --> 00:22:38,429
actually and what I do is I also use the

00:22:35,639 --> 00:22:40,230
temp tier to create some files and I use

00:22:38,429 --> 00:22:42,539
the gateway so of course you can use

00:22:40,230 --> 00:22:44,070
multiple function arguments and you

00:22:42,539 --> 00:22:46,260
could put some parameterize

00:22:44,070 --> 00:22:49,559
parameterization on top of that now the

00:22:46,260 --> 00:22:52,970
thing is the test code is not concerned

00:22:49,559 --> 00:22:55,380
at all with constructing these objects

00:22:52,970 --> 00:22:58,139
the test code can just assume okay I

00:22:55,380 --> 00:23:00,809
have like a working example instance

00:22:58,139 --> 00:23:03,289
here off of a basic gateway and now I

00:23:00,809 --> 00:23:07,019
actually start doing my things and then

00:23:03,289 --> 00:23:09,720
again in a contest I can define this

00:23:07,019 --> 00:23:12,320
kind of factory function and this object

00:23:09,720 --> 00:23:15,240
here allows me to interact with the test

00:23:12,320 --> 00:23:19,169
and I'm not going to go through all of

00:23:15,240 --> 00:23:21,769
the details here but this request object

00:23:19,169 --> 00:23:24,480
gives you a lot of power actually to to

00:23:21,769 --> 00:23:27,840
set up your resources and to perform

00:23:24,480 --> 00:23:29,880
cached set ups of resources lasting the

00:23:27,840 --> 00:23:31,769
whole session so when there's the first

00:23:29,880 --> 00:23:32,360
test that actually requests a certain

00:23:31,769 --> 00:23:35,639
resource

00:23:32,360 --> 00:23:37,850
only then will like a certain database

00:23:35,639 --> 00:23:40,860
template or whatever in this case it's

00:23:37,850 --> 00:23:44,909
it's like a certain gateway will be

00:23:40,860 --> 00:23:47,639
created and here it's interesting that

00:23:44,909 --> 00:23:50,159
you can actually define a scope and it's

00:23:47,639 --> 00:23:54,029
the scope here is defined dynamically

00:23:50,159 --> 00:23:59,720
and that means that I have two ways to

00:23:54,029 --> 00:24:07,700
actually run a test if I run

00:23:59,720 --> 00:24:11,149
test from just like this like on my

00:24:07,700 --> 00:24:14,629
developer console like this then I'm

00:24:11,149 --> 00:24:16,580
going to get a shared fixture that means

00:24:14,629 --> 00:24:18,889
the Gateway is going to be the same for

00:24:16,580 --> 00:24:21,320
all of the methods in the class even for

00:24:18,889 --> 00:24:23,179
all of the methods in a module right I'm

00:24:21,320 --> 00:24:25,490
using always the same lately object and

00:24:23,179 --> 00:24:28,580
of course if one test actually messes up

00:24:25,490 --> 00:24:29,929
the state the next test might fail so

00:24:28,580 --> 00:24:32,539
this is actually not something you'd

00:24:29,929 --> 00:24:36,620
like to do in your in your continuous

00:24:32,539 --> 00:24:38,620
integration like commit based tests what

00:24:36,620 --> 00:24:41,269
you do there is actually you pass and

00:24:38,620 --> 00:24:43,940
you see this took like 11 seconds and

00:24:41,269 --> 00:24:46,929
you pass an option we just defined by

00:24:43,940 --> 00:24:46,929
the exact net project

00:24:49,330 --> 00:24:59,080
you see sorry um it's a bit large fun

00:24:56,840 --> 00:24:59,080
funny

00:24:59,889 --> 00:25:10,669
so like this now I have it sorry here

00:25:08,059 --> 00:25:12,490
here actually the exact net testing

00:25:10,669 --> 00:25:17,899
options which are added by the project

00:25:12,490 --> 00:25:19,909
they allow me like to to to modify the

00:25:17,899 --> 00:25:23,600
scope under which fixtures I actually

00:25:19,909 --> 00:25:25,370
setup so what I do here but the default

00:25:23,600 --> 00:25:27,500
is actually do a session based so for

00:25:25,370 --> 00:25:29,269
all of the tests using a certain basic

00:25:27,500 --> 00:25:35,139
type of gateway always reuse the same

00:25:29,269 --> 00:25:38,210
one but when I say like this function

00:25:35,139 --> 00:25:40,340
then it's going to be created recreated

00:25:38,210 --> 00:25:44,000
for each function it's going to take

00:25:40,340 --> 00:25:45,230
much longer right and this is something

00:25:44,000 --> 00:25:47,179
that you can drive from the command line

00:25:45,230 --> 00:25:49,009
and you can influence you can use this

00:25:47,179 --> 00:25:50,840
from the continuous integration to have

00:25:49,009 --> 00:25:53,600
lack of slow tests and like fully

00:25:50,840 --> 00:25:55,820
isolated tests and for the developer you

00:25:53,600 --> 00:25:59,360
just do like the quick thing it's

00:25:55,820 --> 00:26:01,879
related to what Gary Banner talked on

00:25:59,360 --> 00:26:04,279
the last talk about regarding his nose

00:26:01,879 --> 00:26:06,289
plugin but this is built in and it's

00:26:04,279 --> 00:26:10,410
kind of like a side effect of a more

00:26:06,289 --> 00:26:15,740
general feature okay

00:26:10,410 --> 00:26:18,630
so the the separation from test code and

00:26:15,740 --> 00:26:20,850
fix em extra code gives a lot of freedom

00:26:18,630 --> 00:26:23,700
to actually of like configuring your

00:26:20,850 --> 00:26:26,190
test setup that you don't have if you

00:26:23,700 --> 00:26:30,630
actually use the standard xunit way of

00:26:26,190 --> 00:26:33,150
encoding the levels of of setting up

00:26:30,630 --> 00:26:35,160
things into your source code directly

00:26:33,150 --> 00:26:37,920
you say set up class we say set up

00:26:35,160 --> 00:26:39,990
method you say set up module and all

00:26:37,920 --> 00:26:41,460
those kind of things but then there's no

00:26:39,990 --> 00:26:43,290
way to change this from the command line

00:26:41,460 --> 00:26:46,230
anymore because it's really intertwined

00:26:43,290 --> 00:26:49,290
and your whole source code and this is

00:26:46,230 --> 00:26:51,150
actually a very simple way to whether

00:26:49,290 --> 00:26:53,700
this actually a very good way to has

00:26:51,150 --> 00:26:55,620
been proven to be a good way to to have

00:26:53,700 --> 00:27:01,530
a cleaner separation between those two

00:26:55,620 --> 00:27:04,760
aspects so that test resource injection

00:27:01,530 --> 00:27:12,030
there's lots more I say go check out the

00:27:04,760 --> 00:27:13,980
documentation so let me just quickly

00:27:12,030 --> 00:27:18,330
talk about plugins and extensions

00:27:13,980 --> 00:27:20,190
there's tons of plugins for Pi tests you

00:27:18,330 --> 00:27:21,780
can also do your local plugin like in

00:27:20,190 --> 00:27:23,490
your test directory you have a contest

00:27:21,780 --> 00:27:25,770
file and that's the same as if you would

00:27:23,490 --> 00:27:27,360
like distribute your own plugin you can

00:27:25,770 --> 00:27:30,030
actually have your own extensions there

00:27:27,360 --> 00:27:31,980
and if you actually want to distribute

00:27:30,030 --> 00:27:35,130
it you can repackage it and just release

00:27:31,980 --> 00:27:37,320
it to pypy and and have other people

00:27:35,130 --> 00:27:39,120
actually use it easily one such example

00:27:37,320 --> 00:27:41,540
is exists which I'm going to show

00:27:39,120 --> 00:27:41,540
quickly

00:27:45,419 --> 00:27:58,799
sorry fun friends so if I run

00:27:53,089 --> 00:28:05,039
if I run the ecstasy sample which is

00:27:58,799 --> 00:28:09,419
this one let us just for tests which

00:28:05,039 --> 00:28:11,759
take increasingly long to run because

00:28:09,419 --> 00:28:13,889
they just wait the number of seconds

00:28:11,759 --> 00:28:17,429
they are passed in so it takes like one

00:28:13,889 --> 00:28:20,089
second two seconds four seconds and that

00:28:17,429 --> 00:28:23,190
should be like 10 seconds in the end and

00:28:20,089 --> 00:28:28,289
if you use this should be the testing

00:28:23,190 --> 00:28:32,099
like use for subprocesses then this is

00:28:28,289 --> 00:28:34,499
going to take less time it takes one

00:28:32,099 --> 00:28:36,239
second one second one second because

00:28:34,499 --> 00:28:38,969
four tests are actually started in

00:28:36,239 --> 00:28:41,249
parallel and so it doesn't really matter

00:28:38,969 --> 00:28:43,079
if the first f1 tests and waits one

00:28:41,249 --> 00:28:44,869
second and this next one two seconds

00:28:43,079 --> 00:28:47,219
because they start at the same time and

00:28:44,869 --> 00:28:49,969
you can actually verify that this is the

00:28:47,219 --> 00:28:54,539
case with a feature called durations

00:28:49,969 --> 00:28:58,259
profiling so show me the ten slowest

00:28:54,539 --> 00:29:02,190
tests actually and including the set up

00:28:58,259 --> 00:29:05,519
functions so here you see that I have

00:29:02,190 --> 00:29:08,339
like the the X this test that gets

00:29:05,519 --> 00:29:11,039
passed in the parameter for here it

00:29:08,339 --> 00:29:12,869
takes four seconds obviously and so on

00:29:11,039 --> 00:29:14,789
but you see the overall time in the end

00:29:12,869 --> 00:29:18,809
is still just five seconds because they

00:29:14,789 --> 00:29:22,759
just run in parallel right so that's the

00:29:18,809 --> 00:29:25,200
X this plugin I'm sorry

00:29:22,759 --> 00:29:28,109
so there's many others you can of course

00:29:25,200 --> 00:29:30,989
create a UNIX ml and and there is a PI

00:29:28,109 --> 00:29:31,799
test that wim plug in for I think

00:29:30,989 --> 00:29:35,849
there's going to be a lightning talk

00:29:31,799 --> 00:29:39,149
about this by Fredo and there is a pep 8

00:29:35,849 --> 00:29:41,219
checker that has like configurable

00:29:39,149 --> 00:29:44,099
checks for testing your application

00:29:41,219 --> 00:29:46,320
source code against pay paid compliance

00:29:44,099 --> 00:29:48,419
there's coverage of course and recently

00:29:46,320 --> 00:29:49,649
there's a timeout plug-in so that if

00:29:48,419 --> 00:29:51,959
your tests take too long there are

00:29:49,649 --> 00:29:56,700
several methods to interrupt them and so

00:29:51,959 --> 00:29:58,619
on so one more thing i'm going to

00:29:56,700 --> 00:30:00,600
mention at the end I still have sorry

00:29:58,619 --> 00:30:03,300
five minutes

00:30:00,600 --> 00:30:05,280
one thing that white has does from the

00:30:03,300 --> 00:30:07,470
beginning and has now refined a bit more

00:30:05,280 --> 00:30:11,010
actually is you can have your own

00:30:07,470 --> 00:30:14,220
testing language right you can you can

00:30:11,010 --> 00:30:17,330
say I want to have this as the

00:30:14,220 --> 00:30:21,900
definition definition of my tests and

00:30:17,330 --> 00:30:24,420
with PI ml installed and this is

00:30:21,900 --> 00:30:27,780
actually how the reporting looks like so

00:30:24,420 --> 00:30:34,470
here we really run running tests simple

00:30:27,780 --> 00:30:36,510
that jml tests simple that j ml and the

00:30:34,470 --> 00:30:38,190
reporting is completely custom so it

00:30:36,510 --> 00:30:41,250
doesn't include any kind of Python try

00:30:38,190 --> 00:30:43,800
specs anymore you can invent your own

00:30:41,250 --> 00:30:49,770
testing language here and how this is

00:30:43,800 --> 00:30:51,900
done is where is that now I'm actually

00:30:49,770 --> 00:30:53,790
going to not show that in detail this is

00:30:51,900 --> 00:30:56,040
a mechanism that is documented on the

00:30:53,790 --> 00:30:58,230
website there's an example actually for

00:30:56,040 --> 00:30:59,760
exactly this output I'm showing you and

00:30:58,230 --> 00:31:02,429
how you can make it yourself it's like

00:30:59,760 --> 00:31:04,500
15 20 lines of code and you have kind of

00:31:02,429 --> 00:31:07,260
this output and can define your own

00:31:04,500 --> 00:31:11,130
testing language and can define what

00:31:07,260 --> 00:31:13,260
does a certain data input lead to in

00:31:11,130 --> 00:31:15,330
terms of application calls and how is it

00:31:13,260 --> 00:31:18,120
actually reported and of course you can

00:31:15,330 --> 00:31:19,800
mix your Python tests with this so you

00:31:18,120 --> 00:31:22,230
can have a couple of those files and a

00:31:19,800 --> 00:31:24,570
couple of Python files and those get the

00:31:22,230 --> 00:31:29,520
normal Python test runs and the other

00:31:24,570 --> 00:31:31,110
ones get get the domain specific testing

00:31:29,520 --> 00:31:37,070
language and of course you can share

00:31:31,110 --> 00:31:39,270
resources between those so projects uses

00:31:37,070 --> 00:31:42,090
there are many of them they're listed

00:31:39,270 --> 00:31:44,130
actually what I like very much to hear

00:31:42,090 --> 00:31:48,809
of course being one of the authors of PI

00:31:44,130 --> 00:31:52,530
test is that people from Fedora actually

00:31:48,809 --> 00:31:54,929
are they actually hear ah great I'm not

00:31:52,530 --> 00:31:57,510
misrepresenting you you still the

00:31:54,929 --> 00:32:02,790
opinion came to the conclusion after

00:31:57,510 --> 00:32:05,420
comparing knows and M PI test that

00:32:02,790 --> 00:32:08,190
they're both quite capable and that

00:32:05,420 --> 00:32:10,050
Paris has like better documentation and

00:32:08,190 --> 00:32:13,380
more detailed output and so on

00:32:10,050 --> 00:32:15,470
and I think the Mozilla webco a people

00:32:13,380 --> 00:32:19,140
also came to similar conclusions and

00:32:15,470 --> 00:32:21,630
that's I think also related to PI tests

00:32:19,140 --> 00:32:23,760
since two years has like the version two

00:32:21,630 --> 00:32:27,570
series which like cleaned up lots of

00:32:23,760 --> 00:32:29,460
code like the code was reduced by 40% of

00:32:27,570 --> 00:32:32,850
50 percents and lots of cleanup and all

00:32:29,460 --> 00:32:34,800
things roll out and by now most of the

00:32:32,850 --> 00:32:36,780
projects there was like small headaches

00:32:34,800 --> 00:32:39,690
for larger projects used some like

00:32:36,780 --> 00:32:43,260
corner features but by now I think most

00:32:39,690 --> 00:32:46,800
of the people have converted and the

00:32:43,260 --> 00:32:51,630
release is now actually like in 2011

00:32:46,800 --> 00:32:53,220
they have been 2 4 6 8 9 releases so

00:32:51,630 --> 00:32:55,620
there's like really a lot of releases if

00:32:53,220 --> 00:32:57,960
you have any bugs or contributions

00:32:55,620 --> 00:33:04,890
they're going to make their way in very

00:32:57,960 --> 00:33:06,690
fast and yes so I hope you take part on

00:33:04,890 --> 00:33:08,790
this also if you actually like what I'm

00:33:06,690 --> 00:33:12,300
very interested about I like to do like

00:33:08,790 --> 00:33:14,370
real world scenario driven example

00:33:12,300 --> 00:33:16,500
documentation so if you have something

00:33:14,370 --> 00:33:18,210
where you have a problem then please

00:33:16,500 --> 00:33:22,940
post it to the testing and Python list

00:33:18,210 --> 00:33:25,110
or to the PI test development list and

00:33:22,940 --> 00:33:26,820
say what you're trying to do and then

00:33:25,110 --> 00:33:30,090
someone is going to try to help you and

00:33:26,820 --> 00:33:32,040
make an example of how this works don't

00:33:30,090 --> 00:33:34,500
be afraid just do this it really helps

00:33:32,040 --> 00:33:36,300
us actually finding good examples that

00:33:34,500 --> 00:33:38,250
people really need instead of like

00:33:36,300 --> 00:33:39,980
inventing all kinds of examples that

00:33:38,250 --> 00:33:42,030
might make sense in some abstract manner

00:33:39,980 --> 00:33:44,970
so that's really a very good

00:33:42,030 --> 00:33:50,730
contribution to do and I invite you to

00:33:44,970 --> 00:33:52,260
do that okay so that's the talk and I'd

00:33:50,730 --> 00:33:54,620
like to take some question if I still

00:33:52,260 --> 00:33:54,620
have the time

00:34:09,810 --> 00:34:14,710
how does protests integrate with

00:34:12,010 --> 00:34:18,669
something like Django that's a topic I'd

00:34:14,710 --> 00:34:20,290
like to address on Monday morning during

00:34:18,669 --> 00:34:21,940
Sprint's the problem is I haven't been

00:34:20,290 --> 00:34:24,580
using drunken myself there's two plugins

00:34:21,940 --> 00:34:26,139
the one asked I think called jungle PI

00:34:24,580 --> 00:34:28,210
test and the other one is called PI test

00:34:26,139 --> 00:34:30,940
jungle or something but I'm not sure

00:34:28,210 --> 00:34:34,780
they actually both maintained very well

00:34:30,940 --> 00:34:36,730
actually I think they are not and so I

00:34:34,780 --> 00:34:38,590
think the story with integration with

00:34:36,730 --> 00:34:41,260
respect to integration and jungle hasn't

00:34:38,590 --> 00:34:43,750
it's not very good in some sense but

00:34:41,260 --> 00:34:45,970
it's mainly a matter of actually people

00:34:43,750 --> 00:34:47,260
pushing for it and doing some bits it's

00:34:45,970 --> 00:34:49,750
not there's no fundamental thing

00:34:47,260 --> 00:34:52,659
actually keeping it from copying some

00:34:49,750 --> 00:34:55,810
before noses doing their maybe or using

00:34:52,659 --> 00:34:58,090
more interesting resource injection

00:34:55,810 --> 00:35:00,070
features like what I'm talking about

00:34:58,090 --> 00:35:01,480
here these kind of like you get some

00:35:00,070 --> 00:35:04,180
argument like soap is doing that for

00:35:01,480 --> 00:35:06,610
example there's a PI test soap I mean

00:35:04,180 --> 00:35:08,770
extension and they have a nice function

00:35:06,610 --> 00:35:11,170
argument where you can do all kinds of

00:35:08,770 --> 00:35:13,030
things with right and only if you use

00:35:11,170 --> 00:35:13,840
these features certain things get set up

00:35:13,030 --> 00:35:16,480
and so on

00:35:13,840 --> 00:35:19,980
so it's really it's quite doable but

00:35:16,480 --> 00:35:22,980
myself I haven't had the need and so yes

00:35:19,980 --> 00:35:22,980
yes

00:35:26,690 --> 00:35:35,790
results when there's no failure yes yeah

00:35:34,140 --> 00:35:39,000
maybe I thought directly up is let's say

00:35:35,790 --> 00:35:42,210
our test sample I did I mean of course I

00:35:39,000 --> 00:35:45,260
didn't mention all the features so if

00:35:42,210 --> 00:35:48,510
you do this for example and you run this

00:35:45,260 --> 00:35:50,700
then what you mean is that ever run this

00:35:48,510 --> 00:35:53,370
like this then I get the captured

00:35:50,700 --> 00:35:56,190
standard out right but you want to see

00:35:53,370 --> 00:35:58,830
it directly and then what you do is you

00:35:56,190 --> 00:36:00,510
pass the minus s option and then this

00:35:58,830 --> 00:36:04,110
doesn't happen so when the test is run

00:36:00,510 --> 00:36:09,120
here you actually directly see the the

00:36:04,110 --> 00:36:18,570
output here right and oh sorry

00:36:09,120 --> 00:36:20,190
you always see this right it's many more

00:36:18,570 --> 00:36:22,860
obvious if you run in verbose mode then

00:36:20,190 --> 00:36:25,620
no it's not but if you if you write

00:36:22,860 --> 00:36:29,400
something like print hello multiple

00:36:25,620 --> 00:36:31,980
times then it's going to be obvious okay

00:36:29,400 --> 00:36:35,010
this is not the same as showing it in

00:36:31,980 --> 00:36:36,510
like captured output because I mean if

00:36:35,010 --> 00:36:38,460
you really are if you really need this

00:36:36,510 --> 00:36:41,130
and this minus s is not enough for your

00:36:38,460 --> 00:36:42,690
real life use cases then we can think

00:36:41,130 --> 00:36:47,720
about integrating this but but I think

00:36:42,690 --> 00:36:47,720
the minus s usually is enough for that

00:36:47,780 --> 00:36:56,870
okay yes yes

00:36:52,550 --> 00:37:01,200
so you talked at that in the past few

00:36:56,870 --> 00:37:03,990
versions there was a major cleanup but

00:37:01,200 --> 00:37:06,900
could you give us a little a little bit

00:37:03,990 --> 00:37:08,970
of a sneak peak of what what things are

00:37:06,900 --> 00:37:10,470
coming by that testing feature releases

00:37:08,970 --> 00:37:15,680
and what what things are you planning

00:37:10,470 --> 00:37:18,510
yes I think the main bits actually is

00:37:15,680 --> 00:37:21,990
really going to focus around like some

00:37:18,510 --> 00:37:24,690
improve documentation and there's not

00:37:21,990 --> 00:37:27,720
any single big thing there's going to be

00:37:24,690 --> 00:37:30,210
a parameterization stabilization things

00:37:27,720 --> 00:37:34,230
so the tutor to series have been about

00:37:30,210 --> 00:37:35,880
this new parameterize mechanism and they

00:37:34,230 --> 00:37:37,580
have been some big fixes related to this

00:37:35,880 --> 00:37:41,030
and the next big thing

00:37:37,580 --> 00:37:42,980
I think is some kind of integration with

00:37:41,030 --> 00:37:44,510
trucks not really integration in that

00:37:42,980 --> 00:37:48,050
sense that should also continue to run

00:37:44,510 --> 00:37:50,780
with Moe's and other runners but making

00:37:48,050 --> 00:37:55,790
PI test kind of like produce an output

00:37:50,780 --> 00:37:58,610
that can be processed by talks and and

00:37:55,790 --> 00:38:00,490
and basically help you in testing

00:37:58,610 --> 00:38:03,410
against different configurations and

00:38:00,490 --> 00:38:06,200
have a better view like an HTML and

00:38:03,410 --> 00:38:08,090
things like this but there's no big

00:38:06,200 --> 00:38:11,390
things currently scheduled from my side

00:38:08,090 --> 00:38:13,370
actually so I think it's rather complete

00:38:11,390 --> 00:38:15,500
currently and there's lots of things to

00:38:13,370 --> 00:38:18,020
do of course but it's not going to

00:38:15,500 --> 00:38:24,530
change that much and let's say next year

00:38:18,020 --> 00:38:26,540
I think ok does despite a support test

00:38:24,530 --> 00:38:27,730
generation kind of like guess what test

00:38:26,540 --> 00:38:31,970
generation

00:38:27,730 --> 00:38:33,620
it's just generation well can you say a

00:38:31,970 --> 00:38:35,840
bit what you mean by that so I used noes

00:38:33,620 --> 00:38:38,960
to generate functions and I can yield

00:38:35,840 --> 00:38:40,700
functions and arguments that's rich yeah

00:38:38,960 --> 00:38:43,490
well yeah I mean test the the you'd like

00:38:40,700 --> 00:38:46,340
and isn't that nose copied from pyro

00:38:43,490 --> 00:38:47,930
test actually it's still in it's still

00:38:46,340 --> 00:38:51,050
empire test you can still use it

00:38:47,930 --> 00:38:52,790
but it's not advertised because the new

00:38:51,050 --> 00:38:55,370
way to actually do parameterization is

00:38:52,790 --> 00:38:56,780
much more powerful and integrates like

00:38:55,370 --> 00:38:59,090
with all the other features much much

00:38:56,780 --> 00:39:00,680
better the yielding is kind of like cool

00:38:59,090 --> 00:39:02,780
if you do it the first time but it gives

00:39:00,680 --> 00:39:04,580
you all kinds of problems and I'm not

00:39:02,780 --> 00:39:07,100
sure but I think nose 2 is actually also

00:39:04,580 --> 00:39:09,800
trying to get rid of that right so I

00:39:07,100 --> 00:39:12,890
don't think it's not advertised by PI

00:39:09,800 --> 00:39:14,990
test anymore but the new test B sauce

00:39:12,890 --> 00:39:17,060
injection including parameterization

00:39:14,990 --> 00:39:20,320
including like the full dynamism is like

00:39:17,060 --> 00:39:20,320
the way to go in my opinion

00:39:24,530 --> 00:39:28,670

YouTube URL: https://www.youtube.com/watch?v=9LVqBQcFmyw


