Title: Introduction to Metaclasses
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Luke Sneeringer
Python's metaclasses grant the Python OOP ecosystem all the power of more complex object inheritance systems in other languages, while retaining for most uses the simplicity of the straightforward class structures most developers lear
Captions: 
	00:00:00,030 --> 00:00:06,600
I would I would like to introduce Luke's

00:00:04,049 --> 00:00:16,199
New Ager who's here to talk to us about

00:00:06,600 --> 00:00:18,810
metaclasses hi there good morning it

00:00:16,199 --> 00:00:20,810
appears I am on and everything is

00:00:18,810 --> 00:00:23,460
working which is amazing for the first

00:00:20,810 --> 00:00:24,689
track of a conference so I wanted I'm

00:00:23,460 --> 00:00:28,050
going to be talking a little bit about

00:00:24,689 --> 00:00:29,580
metaclasses today the but before I do

00:00:28,050 --> 00:00:31,140
I'm going to give a quick intro about

00:00:29,580 --> 00:00:32,099
myself and kind of where we're coming

00:00:31,140 --> 00:00:34,350
from

00:00:32,099 --> 00:00:36,899
I'm the sole developer at a small

00:00:34,350 --> 00:00:39,870
software startup working out of Austin

00:00:36,899 --> 00:00:41,100
Texas I'm talking about metaclasses

00:00:39,870 --> 00:00:42,239
because I've written a lot of them and

00:00:41,100 --> 00:00:43,739
because I think they're a very

00:00:42,239 --> 00:00:46,160
interesting topic I think that they're

00:00:43,739 --> 00:00:50,579
one of the things that makes python a

00:00:46,160 --> 00:00:51,809
much more powerful language while still

00:00:50,579 --> 00:00:54,870
maintaining a lot of the

00:00:51,809 --> 00:00:56,550
straightforwardness versus say some of

00:00:54,870 --> 00:00:57,750
the prototype will inheritance where you

00:00:56,550 --> 00:01:01,890
introduce a lot of complexity very

00:00:57,750 --> 00:01:03,570
quickly and as I've had to go and and as

00:01:01,890 --> 00:01:04,799
I've had problems where metaclasses

00:01:03,570 --> 00:01:07,200
ended up being the right solution I

00:01:04,799 --> 00:01:08,549
found that usually when I decided that I

00:01:07,200 --> 00:01:09,659
needed to use metaclasses it was the

00:01:08,549 --> 00:01:12,750
right call

00:01:09,659 --> 00:01:15,840
usually it's distinctly not always and

00:01:12,750 --> 00:01:17,700
so with that being said I want to give a

00:01:15,840 --> 00:01:21,720
little bit of an intro metaclasses are

00:01:17,700 --> 00:01:25,170
kind of a big scary word we we have

00:01:21,720 --> 00:01:26,790
books if any of you have ever looked at

00:01:25,170 --> 00:01:29,400
or purchased learning Python by Mark

00:01:26,790 --> 00:01:31,259
Lutz it's a massive you know 3,000 page

00:01:29,400 --> 00:01:33,350
book I was introducing friend of mine to

00:01:31,259 --> 00:01:35,729
Python and he called it the cinder block

00:01:33,350 --> 00:01:37,530
because that's about how much it way he

00:01:35,729 --> 00:01:38,729
went to the bookstore to to look for

00:01:37,530 --> 00:01:40,320
this book that I told him to get and he

00:01:38,729 --> 00:01:41,579
found you a normal sized book a normal

00:01:40,320 --> 00:01:43,530
sized book and then like well this is

00:01:41,579 --> 00:01:44,909
this massive book and at the end of this

00:01:43,530 --> 00:01:47,759
massive book is the chapter on

00:01:44,909 --> 00:01:49,320
metaclasses and of course it begins with

00:01:47,759 --> 00:01:52,049
this dire warning because of course

00:01:49,320 --> 00:01:54,530
metaclasses scare people and because

00:01:52,049 --> 00:01:56,549
they scare people authors and

00:01:54,530 --> 00:01:59,189
experienced Python developers tend to

00:01:56,549 --> 00:02:00,719
tell people that if you are looking at

00:01:59,189 --> 00:02:04,829
metaclasses for the first time you

00:02:00,719 --> 00:02:06,030
should run bravely away away no and I

00:02:04,829 --> 00:02:08,009
really should have put a picture of

00:02:06,030 --> 00:02:09,360
brave brave Sir Robin up at this point

00:02:08,009 --> 00:02:13,220
but I didn't think about it until just

00:02:09,360 --> 00:02:17,210
now and in fact the

00:02:13,220 --> 00:02:19,820
the one of the sort of the the gods of

00:02:17,210 --> 00:02:21,140
the Python world 10 Peters who if you

00:02:19,820 --> 00:02:23,330
type import this into your Python

00:02:21,140 --> 00:02:27,560
console you'll get the little Limerick

00:02:23,330 --> 00:02:30,080
that this this famous simple as better

00:02:27,560 --> 00:02:33,320
than complex and like actually said

00:02:30,080 --> 00:02:35,210
Mehta classes are deeper magic then 99%

00:02:33,320 --> 00:02:36,560
of users should ever worry about if you

00:02:35,210 --> 00:02:38,600
wonder whether you need them you don't

00:02:36,560 --> 00:02:40,460
and the people who actually need them

00:02:38,600 --> 00:02:43,750
know a certainty that they need them and

00:02:40,460 --> 00:02:46,250
they don't need an explanation about why

00:02:43,750 --> 00:02:47,900
with all due respect to temp eaters I

00:02:46,250 --> 00:02:50,780
don't think he's completely accurate I

00:02:47,900 --> 00:02:53,270
think that there's validity to that

00:02:50,780 --> 00:02:54,920
warning and it's not necessarily good

00:02:53,270 --> 00:02:56,180
for people to be writing things that

00:02:54,920 --> 00:02:57,590
they don't understand we're going to get

00:02:56,180 --> 00:03:00,860
to that in a minute

00:02:57,590 --> 00:03:03,410
but that being said if if nobody whoever

00:03:00,860 --> 00:03:05,150
doesn't know ever actually has the

00:03:03,410 --> 00:03:07,400
problem that justifies the solution then

00:03:05,150 --> 00:03:10,250
nobody can ever learn them either and so

00:03:07,400 --> 00:03:11,840
maybe there's maybe there's not maybe

00:03:10,250 --> 00:03:16,340
there's maybe that approach isn't

00:03:11,840 --> 00:03:18,560
completely right so this talk is an

00:03:16,340 --> 00:03:20,510
attempt to teach metaclasses it's an

00:03:18,560 --> 00:03:22,880
attempt to teach metaclasses excessively

00:03:20,510 --> 00:03:25,250
and it's an attempt to teach it to

00:03:22,880 --> 00:03:28,070
people who don't understand them yet my

00:03:25,250 --> 00:03:29,420
goal is not to be able to take someone

00:03:28,070 --> 00:03:30,890
who understands the fundamentals of

00:03:29,420 --> 00:03:32,150
method classes and be able to make them

00:03:30,890 --> 00:03:35,090
write something really awesome and

00:03:32,150 --> 00:03:36,739
complex my goal is to make someone who

00:03:35,090 --> 00:03:38,660
doesn't understand what a meta class is

00:03:36,739 --> 00:03:40,340
who just looks at that and thinks that

00:03:38,660 --> 00:03:43,820
it's deep scary magic and hopefully you

00:03:40,340 --> 00:03:45,019
walk out of here with a notion of the

00:03:43,820 --> 00:03:47,239
fundamental building blocks that you

00:03:45,019 --> 00:03:50,390
could get to know when this is the right

00:03:47,239 --> 00:03:53,269
solution for a problem it's also an

00:03:50,390 --> 00:03:56,570
attempt to defy Python orthodoxy always

00:03:53,269 --> 00:03:58,820
very fun to be the rebel and make

00:03:56,570 --> 00:04:02,690
metaclasses an understandable topic for

00:03:58,820 --> 00:04:07,489
the 99% I expect to see an Occupy Pike

00:04:02,690 --> 00:04:09,860
on hashtag sometime soon and therefore

00:04:07,489 --> 00:04:11,570
it's an attempt to turn some sir Robins

00:04:09,860 --> 00:04:13,340
I should not walk in front of that

00:04:11,570 --> 00:04:15,080
speaker over there and therefore it's an

00:04:13,340 --> 00:04:18,530
attempt to turn some Saurabh ins into

00:04:15,080 --> 00:04:21,739
sir Lancelot's and so without further

00:04:18,530 --> 00:04:24,250
ado I'm going to attempt to begin the

00:04:21,739 --> 00:04:24,250
demystification

00:04:25,290 --> 00:04:29,390
there I got it in the King Arthur

00:04:26,490 --> 00:04:31,320
reference just not from Monty Python

00:04:29,390 --> 00:04:33,690
before I do that I do want to talk a

00:04:31,320 --> 00:04:36,510
little bit about terminology the most

00:04:33,690 --> 00:04:37,710
annoying thing is is when someone's

00:04:36,510 --> 00:04:38,880
using the term and it means different

00:04:37,710 --> 00:04:41,070
things to different people in particular

00:04:38,880 --> 00:04:43,830
it's in returns to classes and objects

00:04:41,070 --> 00:04:45,240
or classes and instances we can use the

00:04:43,830 --> 00:04:47,940
word object to mean several different

00:04:45,240 --> 00:04:50,460
things generally we understand what

00:04:47,940 --> 00:04:52,380
classes are I think everyone here knows

00:04:50,460 --> 00:04:55,530
that list is a class the dict is a class

00:04:52,380 --> 00:04:58,080
int is a class and you know that this

00:04:55,530 --> 00:05:00,270
list up here with 0 1 2 & 3 is an

00:04:58,080 --> 00:05:05,310
instance of class list that's something

00:05:00,270 --> 00:05:06,630
that probably we all know during this

00:05:05,310 --> 00:05:08,160
talk I'm going to use the word object

00:05:06,630 --> 00:05:09,270
and instance to mean pretty much the

00:05:08,160 --> 00:05:10,380
same thing I'm always going to be

00:05:09,270 --> 00:05:12,150
talking about an instance of a class

00:05:10,380 --> 00:05:14,310
there's one an exception to that and it

00:05:12,150 --> 00:05:15,810
will be clear so I want to get that out

00:05:14,310 --> 00:05:17,220
of the way so that we know that I'm

00:05:15,810 --> 00:05:20,610
talking about instance is not about

00:05:17,220 --> 00:05:23,310
class object one of the things about

00:05:20,610 --> 00:05:25,380
PyCon are about Python excuse me about

00:05:23,310 --> 00:05:29,070
Python that's oh that's awesome is that

00:05:25,380 --> 00:05:30,600
classes in Python are objects in the

00:05:29,070 --> 00:05:32,880
same way the functions are and methods

00:05:30,600 --> 00:05:35,040
are and any other kind of variable they

00:05:32,880 --> 00:05:37,470
are objects to their first class objects

00:05:35,040 --> 00:05:39,060
they can be passed around you can use

00:05:37,470 --> 00:05:43,710
them in the same way that you can use

00:05:39,060 --> 00:05:45,180
any other variable and to demonstrate

00:05:43,710 --> 00:05:47,610
this point really fast I'm going to set

00:05:45,180 --> 00:05:49,710
up a very trivial example which is this

00:05:47,610 --> 00:05:51,600
as number function what this number

00:05:49,710 --> 00:05:54,000
function does if you send it one

00:05:51,600 --> 00:05:56,220
argument is it returns the integer

00:05:54,000 --> 00:05:57,510
representation of that number or if it

00:05:56,220 --> 00:06:02,490
won't work as an int it will race type

00:05:57,510 --> 00:06:04,020
error but it there's the second argument

00:06:02,490 --> 00:06:06,030
I've added here this class that you can

00:06:04,020 --> 00:06:09,090
send I'm sending the unclassified

00:06:06,030 --> 00:06:11,810
default and it accepts a class as an

00:06:09,090 --> 00:06:14,010
argument to override that behavior so

00:06:11,810 --> 00:06:15,750
using my previous example if I send

00:06:14,010 --> 00:06:17,790
string 3 1 4 and nothing it will send

00:06:15,750 --> 00:06:19,050
back 3 but I can send the float class as

00:06:17,790 --> 00:06:22,440
the second argument and it sends back

00:06:19,050 --> 00:06:24,060
the 3.14 float as a quick clarification

00:06:22,440 --> 00:06:25,290
it will actually take any callable you

00:06:24,060 --> 00:06:26,940
could have sent a function in there

00:06:25,290 --> 00:06:28,290
instead of a class but that's really not

00:06:26,940 --> 00:06:30,180
the point I'm trying to make the point

00:06:28,290 --> 00:06:34,200
I'm trying to make is that you can pass

00:06:30,180 --> 00:06:36,360
these cobbles around at all in a lot of

00:06:34,200 --> 00:06:37,860
the languages you can't that that's just

00:06:36,360 --> 00:06:39,030
not something that you can do or you

00:06:37,860 --> 00:06:41,100
have to do it by some really

00:06:39,030 --> 00:06:42,930
complex mechanism like passing a string

00:06:41,100 --> 00:06:46,320
and then calling you know some class

00:06:42,930 --> 00:06:49,320
name function that's built in the

00:06:46,320 --> 00:06:51,600
ability to pass classes like this is a

00:06:49,320 --> 00:06:53,700
big reusable code toolbox thing it's

00:06:51,600 --> 00:06:55,110
something that makes Python very useful

00:06:53,700 --> 00:06:59,340
for writing code that other people are

00:06:55,110 --> 00:07:01,590
going to use but again that's not the

00:06:59,340 --> 00:07:03,870
point I'm trying to talk about let's

00:07:01,590 --> 00:07:05,940
talk about instances real fast since

00:07:03,870 --> 00:07:07,320
classes are objects I want to go over

00:07:05,940 --> 00:07:08,880
very quickly and I'm a little bit behind

00:07:07,320 --> 00:07:11,610
so I'm going to talk fast how objects

00:07:08,880 --> 00:07:12,900
are made this is the basis for how

00:07:11,610 --> 00:07:15,450
classes are made which we're going to

00:07:12,900 --> 00:07:17,190
get to so let's say that we have this

00:07:15,450 --> 00:07:19,200
class I'm going to show it very quickly

00:07:17,190 --> 00:07:21,450
but it's a class to represent a cat cats

00:07:19,200 --> 00:07:23,610
have a sax male or female they hopefully

00:07:21,450 --> 00:07:25,140
have a name we know that they're part of

00:07:23,610 --> 00:07:26,580
the mammal kingdom and there might be

00:07:25,140 --> 00:07:28,350
some things that you can do with a cat

00:07:26,580 --> 00:07:31,710
if you're an animal shelter you could

00:07:28,350 --> 00:07:35,250
adopt the cat out to an owner so let's

00:07:31,710 --> 00:07:38,070
say instantiate a new cat such as this

00:07:35,250 --> 00:07:39,450
one shadow by the way if anybody catches

00:07:38,070 --> 00:07:42,420
the reference for where all those names

00:07:39,450 --> 00:07:45,780
came from bonus points what actually

00:07:42,420 --> 00:07:47,430
happens well the first thing that

00:07:45,780 --> 00:07:48,690
happens is a new object is created and

00:07:47,430 --> 00:07:50,160
it's assigned to the shadow variable and

00:07:48,690 --> 00:07:51,720
given the type of cat I'm going to talk

00:07:50,160 --> 00:07:55,320
more about type in a minute that's a

00:07:51,720 --> 00:07:56,940
very important word and if you were to

00:07:55,320 --> 00:07:59,010
do this code in the Python shell this is

00:07:56,940 --> 00:08:02,820
what you would get type would come back

00:07:59,010 --> 00:08:05,220
as cat these class variables are

00:08:02,820 --> 00:08:09,180
referenced back to the class if you

00:08:05,220 --> 00:08:12,810
alter the kingdom of any cat it would

00:08:09,180 --> 00:08:15,300
alter it for all of them so if you go

00:08:12,810 --> 00:08:17,700
and assign cat kingdom to plant then it

00:08:15,300 --> 00:08:19,260
will affect shadowed Kingdom I don't

00:08:17,700 --> 00:08:21,120
know why in the world you would decide

00:08:19,260 --> 00:08:24,480
that your cat was a plant but maybe

00:08:21,120 --> 00:08:27,660
you're strange any methods that are

00:08:24,480 --> 00:08:30,210
assigned to the class or what's called

00:08:27,660 --> 00:08:32,070
bound to the instance this is the magic

00:08:30,210 --> 00:08:33,450
there oh there's mother talks on this

00:08:32,070 --> 00:08:36,450
but there this is the magic that makes

00:08:33,450 --> 00:08:40,290
the self keyword or keyword first

00:08:36,450 --> 00:08:42,450
argument do what it does so if I were to

00:08:40,290 --> 00:08:44,550
call cat data dot since and one thing it

00:08:42,450 --> 00:08:47,520
would give me a type error saying that

00:08:44,550 --> 00:08:49,860
the first argument isn't actually a cat

00:08:47,520 --> 00:08:52,310
but if I call shadow dot adopt it it

00:08:49,860 --> 00:08:54,830
works just fine

00:08:52,310 --> 00:08:56,300
and then after the instance has been

00:08:54,830 --> 00:08:59,360
kind of set up to dunder init method

00:08:56,300 --> 00:09:01,700
arounds the key point to take away from

00:08:59,360 --> 00:09:05,420
all this is that the instances are

00:09:01,700 --> 00:09:07,550
constructed at runtime the class so

00:09:05,420 --> 00:09:09,589
might might be constructed at runtime as

00:09:07,550 --> 00:09:11,360
well might be you know in memory somehow

00:09:09,589 --> 00:09:14,690
depending on how how your thing is

00:09:11,360 --> 00:09:17,029
running but when it comes time to to set

00:09:14,690 --> 00:09:20,080
the instance it it gets run and this is

00:09:17,029 --> 00:09:22,279
the kind of the steps that happen and

00:09:20,080 --> 00:09:23,900
the other key point I want to make is we

00:09:22,279 --> 00:09:26,089
talked about instances of classes as

00:09:23,900 --> 00:09:27,110
having their class the you know shadow

00:09:26,089 --> 00:09:30,020
is a cat

00:09:27,110 --> 00:09:32,000
it's an is a relationship what we don't

00:09:30,020 --> 00:09:34,220
necessarily understand a lot of us is

00:09:32,000 --> 00:09:37,670
that classes work the same way in fact

00:09:34,220 --> 00:09:39,740
they are instances no really

00:09:37,670 --> 00:09:41,000
classes worked the same way the syntax

00:09:39,740 --> 00:09:43,930
is a little bit different but something

00:09:41,000 --> 00:09:46,310
very very similar is actually happening

00:09:43,930 --> 00:09:48,589
in the same way that objects are

00:09:46,310 --> 00:09:51,200
instances of their class so shadow is an

00:09:48,589 --> 00:09:53,960
instance of cat classes are instances of

00:09:51,200 --> 00:09:57,860
their metaclass and meta classes are

00:09:53,960 --> 00:10:02,330
themselves classes with the base classes

00:09:57,860 --> 00:10:04,190
being their instances again I'm going to

00:10:02,330 --> 00:10:06,250
take a second to talk about terminology

00:10:04,190 --> 00:10:08,690
because metaclasses is a big scary word

00:10:06,250 --> 00:10:11,839
let's talk real quick about why we use

00:10:08,690 --> 00:10:14,900
it once upon a time in about 400 BC

00:10:11,839 --> 00:10:17,120
there was this guy you may or may not

00:10:14,900 --> 00:10:18,440
recognize him especially since all the

00:10:17,120 --> 00:10:19,910
drawings I found in the Google Images

00:10:18,440 --> 00:10:23,120
were pretty substantially different but

00:10:19,910 --> 00:10:26,510
it's supposed to be Aristotle Aristotle

00:10:23,120 --> 00:10:28,100
wrote a lot of stuff I would like to

00:10:26,510 --> 00:10:30,170
mention that I was a philosophy major in

00:10:28,100 --> 00:10:32,209
college I love to read and Aristotle

00:10:30,170 --> 00:10:34,100
puts me to sleep so if you want to have

00:10:32,209 --> 00:10:36,980
an intro to philosophy don't start with

00:10:34,100 --> 00:10:39,440
Aristotle Plato is much more fun that

00:10:36,980 --> 00:10:43,700
being said the term meta is actually a

00:10:39,440 --> 00:10:46,490
Greek prefix it means after I also am

00:10:43,700 --> 00:10:48,830
trained in classical Greek and Greek has

00:10:46,490 --> 00:10:50,720
lots of prefixes that you could stick on

00:10:48,830 --> 00:10:54,050
words FA means good now means bad etc

00:10:50,720 --> 00:10:55,940
meta means after Aristotle in writing

00:10:54,050 --> 00:10:58,520
this divided his work into a bunch of

00:10:55,940 --> 00:11:00,740
chapters one of the chapters is the fit

00:10:58,520 --> 00:11:03,079
it is the physics the next chapter is

00:11:00,740 --> 00:11:04,670
the metaphysics in fact the issue here

00:11:03,079 --> 00:11:07,250
was Aristotle had this

00:11:04,670 --> 00:11:09,350
riding on lots of esoteric things and he

00:11:07,250 --> 00:11:11,480
had no idea what he wanted to call it so

00:11:09,350 --> 00:11:15,470
he just settled on calling it the stuff

00:11:11,480 --> 00:11:18,950
that comes after the physics we've

00:11:15,470 --> 00:11:22,640
evolved the term slightly to mean self

00:11:18,950 --> 00:11:24,710
reference when I say self reference if

00:11:22,640 --> 00:11:28,450
probably most people here for the term

00:11:24,710 --> 00:11:30,740
metadata the the data about the data

00:11:28,450 --> 00:11:33,410
really when anytime you hear meta acts

00:11:30,740 --> 00:11:35,180
it's just the X about the X so instead

00:11:33,410 --> 00:11:37,520
of meaning after it now kind of means

00:11:35,180 --> 00:11:39,560
about in a self referential way

00:11:37,520 --> 00:11:41,960
therefore metaclass this is just the

00:11:39,560 --> 00:11:43,540
classes about the classes or the classes

00:11:41,960 --> 00:11:48,940
in this case that created the classes

00:11:43,540 --> 00:11:51,680
that's all that a meta class is what and

00:11:48,940 --> 00:11:52,970
again I want to I keep coming back to

00:11:51,680 --> 00:11:54,560
this point because I want to make it as

00:11:52,970 --> 00:11:56,000
clear as possible and if I say this in

00:11:54,560 --> 00:11:57,620
three different ways I'm hoping that

00:11:56,000 --> 00:11:59,930
saying it in different ways will

00:11:57,620 --> 00:12:01,430
resonate with different people we all

00:11:59,930 --> 00:12:05,930
know that classes provide for the

00:12:01,430 --> 00:12:07,780
creation and what's the word I have

00:12:05,930 --> 00:12:11,990
their execution of their instances

00:12:07,780 --> 00:12:13,280
classes tell us how instances are to

00:12:11,990 --> 00:12:14,540
behave how they're supposed to be

00:12:13,280 --> 00:12:17,830
constructed how they're supposed to run

00:12:14,540 --> 00:12:20,210
what they have all that kind of thing

00:12:17,830 --> 00:12:24,490
classes are themselves instances and

00:12:20,210 --> 00:12:27,620
meta classes are their classes therefore

00:12:24,490 --> 00:12:29,780
meta classes provide code for the

00:12:27,620 --> 00:12:32,540
creation and execution of classes

00:12:29,780 --> 00:12:35,060
notice that my first bullet and my third

00:12:32,540 --> 00:12:40,490
bullet have identical wording with those

00:12:35,060 --> 00:12:43,220
terms flipped or subbed out and the last

00:12:40,490 --> 00:12:45,410
way I'm going to illustrate this is with

00:12:43,220 --> 00:12:46,490
the analogy section that at least if

00:12:45,410 --> 00:12:48,950
you're from the United States you

00:12:46,490 --> 00:12:51,800
probably took on the SAT test you

00:12:48,950 --> 00:12:54,110
probably saw something like this oranges

00:12:51,800 --> 00:12:55,370
to fruit as celery is the blank and you

00:12:54,110 --> 00:12:57,620
would have a multiple choice answer

00:12:55,370 --> 00:12:59,750
where you would have to state you know

00:12:57,620 --> 00:13:01,010
what what the appropriate word there was

00:12:59,750 --> 00:13:03,860
and of course in this case the answer

00:13:01,010 --> 00:13:05,630
would be vegetable this is the

00:13:03,860 --> 00:13:08,240
appropriate analogy to understand

00:13:05,630 --> 00:13:09,800
classes and metaclasses instances are

00:13:08,240 --> 00:13:13,250
two classes as classes are two they're

00:13:09,800 --> 00:13:15,860
metaclasses and with that I'm going to

00:13:13,250 --> 00:13:17,779
hope that that that understanding is

00:13:15,860 --> 00:13:20,480
clear

00:13:17,779 --> 00:13:22,310
not I have one more example which is

00:13:20,480 --> 00:13:24,709
consider a self enclosed machine that

00:13:22,310 --> 00:13:26,600
creates t-shirts the t-shirts are the

00:13:24,709 --> 00:13:29,300
instant are the instances the machine is

00:13:26,600 --> 00:13:31,639
the class the guy who builds the machine

00:13:29,300 --> 00:13:33,290
that makes those t-shirts could be

00:13:31,639 --> 00:13:35,899
conceived of as the metaclass in this

00:13:33,290 --> 00:13:38,019
conception and with that being said I'm

00:13:35,899 --> 00:13:40,759
going to get down to some of the details

00:13:38,019 --> 00:13:42,410
we probably most people here have made a

00:13:40,759 --> 00:13:44,180
normal class you inherit it from object

00:13:42,410 --> 00:13:46,220
this is something that that you know

00:13:44,180 --> 00:13:48,170
we've all done if you're using Python 2

00:13:46,220 --> 00:13:49,819
you inherit from object explicitly if

00:13:48,170 --> 00:13:51,410
you're using Python 3 you inherit from

00:13:49,819 --> 00:13:54,319
object implicitly because old-style

00:13:51,410 --> 00:13:57,379
classes are gone metaclasses

00:13:54,319 --> 00:13:59,480
inherit from type type is another

00:13:57,379 --> 00:14:01,910
built-in it's on the it's it's in the

00:13:59,480 --> 00:14:03,230
chain you can type type in your Python

00:14:01,910 --> 00:14:05,110
console and you'll get something back

00:14:03,230 --> 00:14:07,279
you'll actually get back type type

00:14:05,110 --> 00:14:09,170
classes with no explicit method class

00:14:07,279 --> 00:14:11,120
which is the vast majority of the

00:14:09,170 --> 00:14:17,509
classes that you'll ever write are built

00:14:11,120 --> 00:14:18,980
by the type meta class well technically

00:14:17,509 --> 00:14:21,379
this is only true for new style classes

00:14:18,980 --> 00:14:23,449
for Python to folks but if you're using

00:14:21,379 --> 00:14:27,199
old style classes you're probably doing

00:14:23,449 --> 00:14:31,670
it wrong so remember that cat example

00:14:27,199 --> 00:14:33,350
earlier where we made shadow but what

00:14:31,670 --> 00:14:35,089
happens when we're actually processing

00:14:33,350 --> 00:14:38,449
the class cat so the Python interpreter

00:14:35,089 --> 00:14:42,379
before it created shadow it went through

00:14:38,449 --> 00:14:44,480
your declaration of class cat with you

00:14:42,379 --> 00:14:46,819
know with that code block that I put up

00:14:44,480 --> 00:14:50,540
earlier I'll have it up again the class

00:14:46,819 --> 00:14:53,120
syntax in Python is a shortcut to to the

00:14:50,540 --> 00:14:54,559
tube class construction the hard way if

00:14:53,120 --> 00:14:56,420
anyone remembers in math classes you

00:14:54,559 --> 00:14:57,949
took in college or in high school where

00:14:56,420 --> 00:14:59,269
they teach you the really long way to do

00:14:57,949 --> 00:15:01,759
something and then they teach you the

00:14:59,269 --> 00:15:02,300
shortcut like these wonderful calculus

00:15:01,759 --> 00:15:04,519
shortcuts

00:15:02,300 --> 00:15:06,589
I remember those I don't remember how to

00:15:04,519 --> 00:15:08,329
do any of them long way but I'm sure

00:15:06,589 --> 00:15:10,100
some of the some of the real engineers

00:15:08,329 --> 00:15:12,050
in here can tell me so let's go back to

00:15:10,100 --> 00:15:14,059
our cat class again this is the shortcut

00:15:12,050 --> 00:15:17,660
this is the nice pretty syntax that we

00:15:14,059 --> 00:15:19,970
all learn and can remember this is nice

00:15:17,660 --> 00:15:21,800
shorthand it's really not anything more

00:15:19,970 --> 00:15:24,499
complicated than nice shorthand it's

00:15:21,800 --> 00:15:26,679
just that we don't know the details of

00:15:24,499 --> 00:15:28,910
how to make a class to long and hard way

00:15:26,679 --> 00:15:31,240
but when we do that we'll understand

00:15:28,910 --> 00:15:32,770
metaclasses a little bit better son

00:15:31,240 --> 00:15:36,040
go through making this cat class the

00:15:32,770 --> 00:15:37,720
long hard and ugly way so first we have

00:15:36,040 --> 00:15:39,010
our functions these are basically the

00:15:37,720 --> 00:15:41,770
same functions we looked at earlier

00:15:39,010 --> 00:15:42,970
except I added a pass to def adopt I

00:15:41,770 --> 00:15:43,899
didn't feel like defining it but other

00:15:42,970 --> 00:15:46,209
than that they should look really

00:15:43,899 --> 00:15:47,860
familiar I renamed under init and remove

00:15:46,209 --> 00:15:52,050
the double underscore but other than

00:15:47,860 --> 00:15:55,630
that these are the same what happens

00:15:52,050 --> 00:15:57,190
internally is the you all the attributes

00:15:55,630 --> 00:15:58,660
that you put on get assigned to a

00:15:57,190 --> 00:16:00,790
dictionary or are put in a dictionary

00:15:58,660 --> 00:16:03,399
and I'm doing that manually here so you

00:16:00,790 --> 00:16:05,410
have dunder init as the key and the init

00:16:03,399 --> 00:16:06,730
function being passed the adopt key and

00:16:05,410 --> 00:16:08,020
the same thing and then the kingdom and

00:16:06,730 --> 00:16:11,649
mammal thing that we saw in our cat

00:16:08,020 --> 00:16:13,300
class earlier we have to know what the

00:16:11,649 --> 00:16:14,800
super classes are in Python we have

00:16:13,300 --> 00:16:17,290
multiple inheritance so super classes

00:16:14,800 --> 00:16:18,940
are a list in this case our cat class

00:16:17,290 --> 00:16:21,310
just inherited from objects so our

00:16:18,940 --> 00:16:25,270
superclass is a length one list with

00:16:21,310 --> 00:16:28,180
object and then all it is is a call to

00:16:25,270 --> 00:16:29,649
the type constructor so I have here the

00:16:28,180 --> 00:16:31,870
assignment to the variable cat I'm

00:16:29,649 --> 00:16:34,570
calling the type constructor I'm giving

00:16:31,870 --> 00:16:35,860
it a name which is again cat and then

00:16:34,570 --> 00:16:37,990
I'm passing the super classes and

00:16:35,860 --> 00:16:40,420
attributes that's all that's happening

00:16:37,990 --> 00:16:41,860
this is just a lot uglier and a lot

00:16:40,420 --> 00:16:43,720
harder to read

00:16:41,860 --> 00:16:45,880
all this should be familiar familiar

00:16:43,720 --> 00:16:48,610
Python except for maybe that that call

00:16:45,880 --> 00:16:49,870
to type at the end the last thing that's

00:16:48,610 --> 00:16:51,310
a call to the type constructor

00:16:49,870 --> 00:16:53,050
it takes three positional arguments the

00:16:51,310 --> 00:16:55,720
name of the class a list of super

00:16:53,050 --> 00:16:58,779
classes and the attributes and that's

00:16:55,720 --> 00:17:01,390
really all the only key difference is

00:16:58,779 --> 00:17:04,780
this is uglier and we don't ever want to

00:17:01,390 --> 00:17:07,000
do it what actually is happening here is

00:17:04,780 --> 00:17:08,790
that two methods are getting called type

00:17:07,000 --> 00:17:11,110
that's under new attack that dunder init

00:17:08,790 --> 00:17:15,819
these are the things that make the

00:17:11,110 --> 00:17:18,850
classes in the same way that you would

00:17:15,819 --> 00:17:20,949
see if you had your you know dunder init

00:17:18,850 --> 00:17:22,480
method of class that you created it

00:17:20,949 --> 00:17:24,490
takes this they take the same three

00:17:22,480 --> 00:17:25,900
arguments they actually each have an

00:17:24,490 --> 00:17:28,720
additional argument that gets added in

00:17:25,900 --> 00:17:31,059
the front a lot like how self works but

00:17:28,720 --> 00:17:32,290
I'm not going to go into that but that

00:17:31,059 --> 00:17:34,030
chunk of ugliness we just looked that

00:17:32,290 --> 00:17:36,280
gives you this same thing the only

00:17:34,030 --> 00:17:37,600
difference really at all is that you're

00:17:36,280 --> 00:17:41,050
going to have a slightly more cluttered

00:17:37,600 --> 00:17:42,070
namespace and you're also probably glad

00:17:41,050 --> 00:17:46,320
that you're not writing that all the

00:17:42,070 --> 00:17:46,320
time in fact each throw a party

00:17:47,110 --> 00:17:53,230
basically the cat the class cats a bit

00:17:49,850 --> 00:17:53,230
is going through that exact process

00:17:53,289 --> 00:17:58,970
metaclasses are for the edge cases where

00:17:56,150 --> 00:18:00,289
this pretty shortcut doesn't work in my

00:17:58,970 --> 00:18:02,000
derivative and integrals that I posted

00:18:00,289 --> 00:18:04,520
earlier there are a couple cases where

00:18:02,000 --> 00:18:06,770
those equations break down and you have

00:18:04,520 --> 00:18:09,529
to do it the long way that's that that's

00:18:06,770 --> 00:18:11,720
exactly what Mehta classes are so let's

00:18:09,529 --> 00:18:12,980
look at the simplest or let's understand

00:18:11,720 --> 00:18:14,510
one more thing about type remember I

00:18:12,980 --> 00:18:16,700
said that type is a built-in in Python

00:18:14,510 --> 00:18:19,070
and it's the top of the tree so if I

00:18:16,700 --> 00:18:21,260
make a spam class that has nothing in it

00:18:19,070 --> 00:18:24,049
just inherits from object

00:18:21,260 --> 00:18:27,110
I declare an instance of it which is s

00:18:24,049 --> 00:18:28,700
equals spam if I ask the Python

00:18:27,110 --> 00:18:30,080
interpreter what the type of s is it's

00:18:28,700 --> 00:18:34,429
going to tell me that it's the spam

00:18:30,080 --> 00:18:37,159
class what if I ask it what the type of

00:18:34,429 --> 00:18:38,450
the spam class itself is well then it's

00:18:37,159 --> 00:18:40,789
going to tell me that it's a type of

00:18:38,450 --> 00:18:44,990
type because type is the meadow class

00:18:40,789 --> 00:18:46,909
for spent for the spam class instantly

00:18:44,990 --> 00:18:48,890
the type is actually the true top of the

00:18:46,909 --> 00:18:51,220
chain if you run type on object type

00:18:48,890 --> 00:18:54,590
will come back if you run type on type

00:18:51,220 --> 00:18:57,110
type will still come back type is

00:18:54,590 --> 00:19:00,679
actually the true top of the class chain

00:18:57,110 --> 00:19:02,600
in Python so to create a meta class all

00:19:00,679 --> 00:19:05,360
you have to do is create a class that

00:19:02,600 --> 00:19:06,770
inherits from type whereas a normal

00:19:05,360 --> 00:19:08,570
class is something that inherits

00:19:06,770 --> 00:19:10,120
fundamentally from object a meta class

00:19:08,570 --> 00:19:12,529
is something that inherits from type or

00:19:10,120 --> 00:19:15,470
obviously one of its subclasses so

00:19:12,529 --> 00:19:17,929
that's another class right there that's

00:19:15,470 --> 00:19:20,450
all it is it's just another class and in

00:19:17,929 --> 00:19:22,850
fact it has type as its metal class now

00:19:20,450 --> 00:19:26,110
of course this meta class does nothing

00:19:22,850 --> 00:19:26,110
but that's beside the point

00:19:26,840 --> 00:19:30,830
the other thing you have to do is when

00:19:29,120 --> 00:19:32,210
you're instantiating your concrete

00:19:30,830 --> 00:19:33,500
classes you have to declare what meta

00:19:32,210 --> 00:19:35,990
class you want to use if you want to use

00:19:33,500 --> 00:19:37,130
something other than type the syntax for

00:19:35,990 --> 00:19:38,630
this is a little bit different depending

00:19:37,130 --> 00:19:41,690
on what version of Python you're using

00:19:38,630 --> 00:19:43,460
if you're using Python 2 then you

00:19:41,690 --> 00:19:45,860
actually has an attribute a Dunda meta

00:19:43,460 --> 00:19:48,230
class attribute that handles the magic

00:19:45,860 --> 00:19:50,750
of assigning the appropriate metal class

00:19:48,230 --> 00:19:52,309
to your final class if you're using

00:19:50,750 --> 00:19:54,470
Python 3 it's a little bit better

00:19:52,309 --> 00:19:56,690
there's what looks a whole lot like a

00:19:54,470 --> 00:19:59,500
keyword argument that gets sent at the

00:19:56,690 --> 00:19:59,500
top of the class declaration

00:19:59,690 --> 00:20:03,360
now we just have to cover how in the

00:20:02,010 --> 00:20:06,840
world we got our metaclasses to do

00:20:03,360 --> 00:20:08,520
something the most straightforward case

00:20:06,840 --> 00:20:10,950
in the most common case for mehdi class

00:20:08,520 --> 00:20:12,240
is actually overriding that dunder new

00:20:10,950 --> 00:20:13,860
and dunder init method that I talked

00:20:12,240 --> 00:20:17,340
about earlier these are the things that

00:20:13,860 --> 00:20:18,540
run when a class is created and if you

00:20:17,340 --> 00:20:21,660
override them then you get special

00:20:18,540 --> 00:20:25,350
behavior remember these run when the

00:20:21,660 --> 00:20:28,590
class is created not the instances so if

00:20:25,350 --> 00:20:30,630
I were to assign this meta class to one

00:20:28,590 --> 00:20:33,240
of my final classes when the class

00:20:30,630 --> 00:20:37,170
declaration ran it would print these

00:20:33,240 --> 00:20:38,730
statements out to my console or wherever

00:20:37,170 --> 00:20:39,960
my print statements were going or if

00:20:38,730 --> 00:20:41,130
you're using mud whiskey it will throw

00:20:39,960 --> 00:20:45,840
an error saying that you're not allowed

00:20:41,130 --> 00:20:48,450
to use print these are the primary hooks

00:20:45,840 --> 00:20:51,150
to add and remove things from the meta

00:20:48,450 --> 00:20:53,820
classes this is actually how django

00:20:51,150 --> 00:20:55,380
models work if for those of you that

00:20:53,820 --> 00:20:56,700
have ever used django you've almost

00:20:55,380 --> 00:20:58,110
certainly read in the model anything

00:20:56,700 --> 00:21:00,510
that subclasses model step model and

00:20:58,110 --> 00:21:03,150
you've written things like you know

00:21:00,510 --> 00:21:04,590
so-and-so equals models for and key so

00:21:03,150 --> 00:21:06,210
and so equals model stock-car field

00:21:04,590 --> 00:21:08,070
there's actually a meta class called

00:21:06,210 --> 00:21:10,560
model base and what it does is the air

00:21:08,070 --> 00:21:13,470
lifts all of those out of your primary

00:21:10,560 --> 00:21:16,550
attributes into a place called under

00:21:13,470 --> 00:21:19,560
meta dot fields and then it puts in

00:21:16,550 --> 00:21:21,690
those same attributes on the instance

00:21:19,560 --> 00:21:24,720
with the key sets of sensible defaults

00:21:21,690 --> 00:21:26,160
that can be overridden later by the

00:21:24,720 --> 00:21:27,840
stuff in your database or the stuff

00:21:26,160 --> 00:21:28,980
you're providing to your class

00:21:27,840 --> 00:21:32,670
constructor or whatnot

00:21:28,980 --> 00:21:37,500
it also does lots of other things but

00:21:32,670 --> 00:21:39,540
that's the model base metal class the

00:21:37,500 --> 00:21:43,830
last thing I want to cover is when meta

00:21:39,540 --> 00:21:45,900
classes are the right option meta

00:21:43,830 --> 00:21:48,120
classes are the right option it's

00:21:45,900 --> 00:21:49,590
usually the K the most common case for

00:21:48,120 --> 00:21:51,150
medical asses or the right option is if

00:21:49,590 --> 00:21:54,210
you're writing an API or an interface

00:21:51,150 --> 00:21:56,550
for future classes and subclasses to be

00:21:54,210 --> 00:21:59,730
written later the goal here being that

00:21:56,550 --> 00:22:02,250
you can write a much simpler class or a

00:21:59,730 --> 00:22:04,080
much simpler subclass following a

00:22:02,250 --> 00:22:06,810
defined and simpler API that makes those

00:22:04,080 --> 00:22:08,880
classes easier to read and the ease for

00:22:06,810 --> 00:22:09,360
those classes all sets the complexity in

00:22:08,880 --> 00:22:11,280
the metaclass

00:22:09,360 --> 00:22:11,910
jungle models are a great example of

00:22:11,280 --> 00:22:14,400
this

00:22:11,910 --> 00:22:16,530
can you imagine trying to write the the

00:22:14,400 --> 00:22:19,050
or shoehorn the code in that does all of

00:22:16,530 --> 00:22:21,450
that stuff every single time it makes

00:22:19,050 --> 00:22:22,860
the Jenga API much easier to program

00:22:21,450 --> 00:22:25,920
against because they're using

00:22:22,860 --> 00:22:29,520
metaclasses in short they're useful for

00:22:25,920 --> 00:22:31,920
making your concrete classes much more

00:22:29,520 --> 00:22:35,250
straightforward much more less likely to

00:22:31,920 --> 00:22:36,840
be buggy that sort of thing this isn't

00:22:35,250 --> 00:22:40,230
technically a meta class but I feel like

00:22:36,840 --> 00:22:41,850
it would be an incomplete survey of this

00:22:40,230 --> 00:22:45,630
topic not to discuss it which is

00:22:41,850 --> 00:22:47,490
programmatic class creation because

00:22:45,630 --> 00:22:50,840
classes are first-class objects because

00:22:47,490 --> 00:22:57,810
they are these things that you can

00:22:50,840 --> 00:22:59,910
handle in in procedural ways you have an

00:22:57,810 --> 00:23:01,680
extra extra bit of power that you don't

00:22:59,910 --> 00:23:03,180
have in some other languages sometimes

00:23:01,680 --> 00:23:05,160
meta classes aren't the right answer but

00:23:03,180 --> 00:23:07,440
you still need this concept of not

00:23:05,160 --> 00:23:11,060
necessarily knowing everything about

00:23:07,440 --> 00:23:13,830
your class when you're writing your code

00:23:11,060 --> 00:23:15,720
this is the case where often metaclasses

00:23:13,830 --> 00:23:18,630
look very attractive but sometimes this

00:23:15,720 --> 00:23:20,010
is an easier mechanism well not

00:23:18,630 --> 00:23:22,380
technically a meta class note that you

00:23:20,010 --> 00:23:25,770
can create classes programmatically in a

00:23:22,380 --> 00:23:28,230
function we discussed how to do it

00:23:25,770 --> 00:23:29,880
earlier when I showed the call to the

00:23:28,230 --> 00:23:33,750
type constructor sometimes you want to

00:23:29,880 --> 00:23:34,800
create a class programmatically I'm

00:23:33,750 --> 00:23:40,350
going to call this function of class

00:23:34,800 --> 00:23:42,060
Factory remember that cat class I just

00:23:40,350 --> 00:23:43,920
said this wrap it in a function if you

00:23:42,060 --> 00:23:45,660
wrap it in a function then that class is

00:23:43,920 --> 00:23:47,280
being a new class for that thing is

00:23:45,660 --> 00:23:50,730
being generated every time a function is

00:23:47,280 --> 00:23:52,200
called now of course there are some

00:23:50,730 --> 00:23:55,650
disadvantages to this there's reasons

00:23:52,200 --> 00:23:57,000
not to do it a class factory function is

00:23:55,650 --> 00:23:58,920
handled a little bit differently than a

00:23:57,000 --> 00:24:00,360
class in particular a new one is created

00:23:58,920 --> 00:24:03,180
every time you're calling the function

00:24:00,360 --> 00:24:06,300
to return it so you're you're you have

00:24:03,180 --> 00:24:07,860
some expense there you you know you

00:24:06,300 --> 00:24:09,420
might have some behavior that doesn't

00:24:07,860 --> 00:24:12,330
work exactly like you expect if you

00:24:09,420 --> 00:24:14,520
created that new cat class and made two

00:24:12,330 --> 00:24:15,480
different instances that kingdom mammal

00:24:14,520 --> 00:24:17,100
thing that you would expect to be

00:24:15,480 --> 00:24:18,390
related wouldn't be because they would

00:24:17,100 --> 00:24:22,410
in fact be two different classes with

00:24:18,390 --> 00:24:23,970
the same name but it's often a very

00:24:22,410 --> 00:24:25,260
useful tool when there's some aspects of

00:24:23,970 --> 00:24:28,260
class creation that you

00:24:25,260 --> 00:24:33,060
can't know until execution time and

00:24:28,260 --> 00:24:34,800
there are needs for this and with that

00:24:33,060 --> 00:24:37,740
I'm going to go to practicing a little

00:24:34,800 --> 00:24:39,960
bit of wisdom I said at the beginning of

00:24:37,740 --> 00:24:42,410
this talk that discussions and meta

00:24:39,960 --> 00:24:47,220
classes often come with dire warnings

00:24:42,410 --> 00:24:48,750
run bravely away away there is a little

00:24:47,220 --> 00:24:51,840
bit of justification for that

00:24:48,750 --> 00:24:53,760
I much poopoo that earlier I understand

00:24:51,840 --> 00:24:57,870
by that but there is some justification

00:24:53,760 --> 00:24:59,370
for it it's not to your advantage to go

00:24:57,870 --> 00:25:02,370
meta if you don't need to there is

00:24:59,370 --> 00:25:04,980
complexity added it can be the right

00:25:02,370 --> 00:25:06,330
solution it can make your stuff much

00:25:04,980 --> 00:25:07,890
simpler it can also make yourself much

00:25:06,330 --> 00:25:10,560
more complicated if you have classes

00:25:07,890 --> 00:25:13,020
that you don't need in this room to

00:25:10,560 --> 00:25:15,390
talks from now Jack Dedra is going to be

00:25:13,020 --> 00:25:17,580
talking about when people write classes

00:25:15,390 --> 00:25:19,800
when they should write functions if you

00:25:17,580 --> 00:25:22,620
attend that talk multiply that by ten

00:25:19,800 --> 00:25:27,060
four if you write it by the class that

00:25:22,620 --> 00:25:29,340
you don't need but at the same time if

00:25:27,060 --> 00:25:31,260
you need it and it's the right solution

00:25:29,340 --> 00:25:32,550
don't be afraid to go meta even if you

00:25:31,260 --> 00:25:34,050
have some questions even if there's

00:25:32,550 --> 00:25:35,580
things about writing metaclasses that

00:25:34,050 --> 00:25:36,810
you don't understand yet you're not

00:25:35,580 --> 00:25:38,220
going to leave this talk knowing

00:25:36,810 --> 00:25:40,170
everything there is to know about meta

00:25:38,220 --> 00:25:41,640
classes that's not the goal there's no

00:25:40,170 --> 00:25:42,870
way that could be covered in twenty five

00:25:41,640 --> 00:25:45,240
minutes

00:25:42,870 --> 00:25:46,710
but that being said there's lots of

00:25:45,240 --> 00:25:48,390
information on this topic

00:25:46,710 --> 00:25:50,490
mark Lutz's discussion and learning

00:25:48,390 --> 00:25:54,330
python is great you can always tweet me

00:25:50,490 --> 00:25:57,030
I am NOT as much of an authority but

00:25:54,330 --> 00:25:58,800
I'll be happy to try to help and if you

00:25:57,030 --> 00:26:00,930
do need this it is something that should

00:25:58,800 --> 00:26:02,520
be considered even if it's something

00:26:00,930 --> 00:26:03,930
where it's going to stretch you and

00:26:02,520 --> 00:26:05,970
cause you to have to research some of

00:26:03,930 --> 00:26:08,130
course the disadvantage to meta classes

00:26:05,970 --> 00:26:14,220
is that it's much less clean and much

00:26:08,130 --> 00:26:15,840
less clear if you use them improperly in

00:26:14,220 --> 00:26:17,970
the beginning of the session I quoted

00:26:15,840 --> 00:26:19,590
Tim Peters who said that if you're not

00:26:17,970 --> 00:26:20,940
sure that you need a meta class you

00:26:19,590 --> 00:26:23,490
shouldn't use them you should dismiss

00:26:20,940 --> 00:26:26,190
them out of hand I respectfully dissent

00:26:23,490 --> 00:26:28,200
if you're not sure the right thing to do

00:26:26,190 --> 00:26:30,360
is to ask the right thing to do is to do

00:26:28,200 --> 00:26:32,520
more research to take the basis of this

00:26:30,360 --> 00:26:33,870
discussion of understanding of the

00:26:32,520 --> 00:26:35,370
relationship between instances and

00:26:33,870 --> 00:26:37,080
classes and the relationship between

00:26:35,370 --> 00:26:39,090
classes and meta classes which is the

00:26:37,080 --> 00:26:41,340
same relationship and continue

00:26:39,090 --> 00:26:43,890
to figure out how you can use that to

00:26:41,340 --> 00:26:46,410
make you know to fit your particular use

00:26:43,890 --> 00:26:48,060
case but don't dismiss it outright just

00:26:46,410 --> 00:26:51,450
because you don't yet know with

00:26:48,060 --> 00:26:53,610
certainty the problem that you're trying

00:26:51,450 --> 00:26:56,360
to solve should always be what defines

00:26:53,610 --> 00:26:58,830
your solution not your current skill set

00:26:56,360 --> 00:27:01,560
that said it's also good if you know

00:26:58,830 --> 00:27:03,990
what you're doing there's another famous

00:27:01,560 --> 00:27:05,160
quote that says that debugging is twice

00:27:03,990 --> 00:27:07,140
as hard as writing code in the first

00:27:05,160 --> 00:27:10,200
place and if you're writing your code as

00:27:07,140 --> 00:27:14,220
cleverly as possible as as interestingly

00:27:10,200 --> 00:27:17,130
as possible if if you are if you're at

00:27:14,220 --> 00:27:19,380
your limit of nifty Nisour an esoteric

00:27:17,130 --> 00:27:21,690
way to do something you are almost by

00:27:19,380 --> 00:27:26,550
definition not smart enough to fix it

00:27:21,690 --> 00:27:28,410
when it doesn't work if meta classing is

00:27:26,550 --> 00:27:29,760
the right solution to your problem take

00:27:28,410 --> 00:27:31,440
the time to understand even more

00:27:29,760 --> 00:27:33,690
thoroughly than I could ever discuss

00:27:31,440 --> 00:27:37,200
here what it is you're doing ask those

00:27:33,690 --> 00:27:39,900
questions and speaking of asking those

00:27:37,200 --> 00:27:42,320
questions if anyone has any for me now

00:27:39,900 --> 00:27:42,320
is the time

00:28:01,810 --> 00:28:06,020
so when you declare a class in a program

00:28:04,520 --> 00:28:08,240
the interpreter is going through and say

00:28:06,020 --> 00:28:10,790
class foo inherits from object whatever

00:28:08,240 --> 00:28:13,640
and then when you see the declaration it

00:28:10,790 --> 00:28:15,490
immediately instantiates that as a class

00:28:13,640 --> 00:28:17,450
of object or as an instance of object

00:28:15,490 --> 00:28:18,560
then you go through and you have your

00:28:17,450 --> 00:28:21,410
medical a underscore underscore

00:28:18,560 --> 00:28:22,820
metaclass equals whatever then does it

00:28:21,410 --> 00:28:26,960
go through and change the type of the

00:28:22,820 --> 00:28:29,240
object then or like when when does it

00:28:26,960 --> 00:28:30,770
actually get tagged as an instance of

00:28:29,240 --> 00:28:34,460
this amount of class rather an instance

00:28:30,770 --> 00:28:36,500
of object um so okay so I'm going to

00:28:34,460 --> 00:28:39,290
repeat the question just in case the

00:28:36,500 --> 00:28:41,870
question is basically a a deep dive into

00:28:39,290 --> 00:28:45,670
the interpreter and it's asking when if

00:28:41,870 --> 00:28:49,070
you create a class you know class cat

00:28:45,670 --> 00:28:51,020
and then dunder metaclass equals you

00:28:49,070 --> 00:28:53,750
know meadow or whatever else at what

00:28:51,020 --> 00:28:58,000
point does the interpreter go and save

00:28:53,750 --> 00:29:00,260
this class it has this other meta class

00:28:58,000 --> 00:29:03,440
the short answer to that question is I'm

00:29:00,260 --> 00:29:06,050
not completely sure I am pretty sure

00:29:03,440 --> 00:29:08,840
that that's kind of a one-step deal and

00:29:06,050 --> 00:29:10,730
that the the so meta classes in Python 2

00:29:08,840 --> 00:29:11,840
were added a little or pythons one and

00:29:10,730 --> 00:29:14,270
two were added a little bit as an

00:29:11,840 --> 00:29:15,890
afterthought the history here is that

00:29:14,270 --> 00:29:17,150
there's these old style classes and

00:29:15,890 --> 00:29:18,560
these new style classes new style

00:29:17,150 --> 00:29:24,290
classes were the ones that inherit from

00:29:18,560 --> 00:29:25,850
object and and and get this extra thing

00:29:24,290 --> 00:29:28,040
and it was kind of shoehorned into this

00:29:25,850 --> 00:29:29,690
into the syntax I'm pretty sure that the

00:29:28,040 --> 00:29:31,220
interpreter goes and looks immediately

00:29:29,690 --> 00:29:33,530
to see what the metaclass should be

00:29:31,220 --> 00:29:34,970
either based on the subclass or based on

00:29:33,530 --> 00:29:37,460
the explicit declaration and use this

00:29:34,970 --> 00:29:38,900
type if nothing is found in Python 3 I'm

00:29:37,460 --> 00:29:42,350
a little bit more sure that it so it's a

00:29:38,900 --> 00:29:45,440
one-step deal if I can make more of a

00:29:42,350 --> 00:29:48,140
comment than a question yes if you have

00:29:45,440 --> 00:29:49,280
an under under meta class it never looks

00:29:48,140 --> 00:29:50,720
at that base together it's them in a

00:29:49,280 --> 00:29:55,340
class and just to clarify one other

00:29:50,720 --> 00:29:57,470
thing when you say class foo of object

00:29:55,340 --> 00:30:01,400
object isn't the meta class

00:29:57,470 --> 00:30:03,290
and I think the person asking the

00:30:01,400 --> 00:30:05,300
question was maybe a little confused of

00:30:03,290 --> 00:30:07,550
that about that because what happens

00:30:05,300 --> 00:30:11,630
when you inherit object which is an

00:30:07,550 --> 00:30:14,990
instance of type it looks at its meta

00:30:11,630 --> 00:30:17,780
class and propagates it that way that's

00:30:14,990 --> 00:30:19,220
the same reason that if you do class you

00:30:17,780 --> 00:30:22,640
know something inheriting model and

00:30:19,220 --> 00:30:24,920
Jango it uses its meta class model

00:30:22,640 --> 00:30:26,480
itself is in the metaclass so so to

00:30:24,920 --> 00:30:28,190
repeat what Mike just said for the

00:30:26,480 --> 00:30:29,900
recording basically one thing that I

00:30:28,190 --> 00:30:32,570
didn't cover in very much detail is that

00:30:29,900 --> 00:30:36,020
is that these things subclass down so if

00:30:32,570 --> 00:30:38,600
you explicitly declare a meta class for

00:30:36,020 --> 00:30:41,270
your class then it's a sign if you don't

00:30:38,600 --> 00:30:42,500
I said earlier and this was a little bit

00:30:41,270 --> 00:30:44,630
it wasn't inaccurate but it was

00:30:42,500 --> 00:30:46,130
certainly imprecise if you don't do that

00:30:44,630 --> 00:30:47,840
it just uses type that's not really true

00:30:46,130 --> 00:30:49,580
if you don't do that first it checks any

00:30:47,840 --> 00:30:52,790
super classes that you have to check to

00:30:49,580 --> 00:30:55,580
see what their metaclass is so if you do

00:30:52,790 --> 00:30:57,830
you know class user inherits model stop

00:30:55,580 --> 00:30:59,270
model the first thing it says is did you

00:30:57,830 --> 00:31:01,430
declare a metal metal class in class

00:30:59,270 --> 00:31:03,380
user well no you didn't okay it doesn't

00:31:01,430 --> 00:31:05,990
immediately even use type it then checks

00:31:03,380 --> 00:31:07,130
models model and says okay what is model

00:31:05,990 --> 00:31:08,660
stock models metaclass and I actually

00:31:07,130 --> 00:31:09,860
think it doesn't have one either and

00:31:08,660 --> 00:31:11,660
then it goes to like models the base

00:31:09,860 --> 00:31:14,450
model and it does and it uses model base

00:31:11,660 --> 00:31:16,910
and so that that goes back down so that

00:31:14,450 --> 00:31:19,250
the order is actually it checks first

00:31:16,910 --> 00:31:21,860
your your class then the superclass

00:31:19,250 --> 00:31:24,080
chain and which of course if you're

00:31:21,860 --> 00:31:26,330
using Python 3 goes to object if you're

00:31:24,080 --> 00:31:28,070
using Python 2 hopefully goes to object

00:31:26,330 --> 00:31:32,300
because you're explicitly inheriting

00:31:28,070 --> 00:31:34,190
from object and object actually has an

00:31:32,300 --> 00:31:37,360
explicit declaration of type as the

00:31:34,190 --> 00:31:42,140
metaclass and that's and that's how that

00:31:37,360 --> 00:31:44,180
that's how that is done can you give

00:31:42,140 --> 00:31:45,710
some heuristics for when and when not to

00:31:44,180 --> 00:31:48,920
use meta classes how to make the

00:31:45,710 --> 00:31:51,260
decision when so the question that was

00:31:48,920 --> 00:31:52,790
asked was give a give a few more

00:31:51,260 --> 00:31:58,190
examples on when and when not to use

00:31:52,790 --> 00:32:01,750
meta classes um when to use min the

00:31:58,190 --> 00:32:03,920
classes meta classes are great for

00:32:01,750 --> 00:32:07,250
metaclasses are great for being able to

00:32:03,920 --> 00:32:10,100
define subclasses more simply they're

00:32:07,250 --> 00:32:11,210
they're able to say okay make this you

00:32:10,100 --> 00:32:12,380
know if you're telling

00:32:11,210 --> 00:32:14,120
someone else or if you're going to make

00:32:12,380 --> 00:32:16,850
a lot of them and you want to say make

00:32:14,120 --> 00:32:18,380
the subclass define these you know a few

00:32:16,850 --> 00:32:19,640
things and you'll get this behavior but

00:32:18,380 --> 00:32:22,270
in fact the behavior is much more

00:32:19,640 --> 00:32:24,440
complicated and involve some airlifting

00:32:22,270 --> 00:32:25,970
again the Django models are a great

00:32:24,440 --> 00:32:28,730
example you know you define your field

00:32:25,970 --> 00:32:31,340
classes and then it air lifts them off

00:32:28,730 --> 00:32:35,120
somewhere and and gives you you know

00:32:31,340 --> 00:32:37,039
intz and bulls and strings whenever you

00:32:35,120 --> 00:32:38,870
need to do stuff like that where your

00:32:37,039 --> 00:32:41,000
class declaration doesn't look like the

00:32:38,870 --> 00:32:42,830
actual instance the data the instances

00:32:41,000 --> 00:32:44,299
are going to have that's probably a

00:32:42,830 --> 00:32:49,360
really good argument for meta classes

00:32:44,299 --> 00:32:51,980
you know any kind of API creation any

00:32:49,360 --> 00:32:55,039
that's that's probably the number one

00:32:51,980 --> 00:33:00,440
reason I can think of when not to use

00:32:55,039 --> 00:33:02,000
meta classes um generally this isn't

00:33:00,440 --> 00:33:03,710
going to be a hard and fast rule but I

00:33:02,000 --> 00:33:06,380
would say generally if you can do

00:33:03,710 --> 00:33:08,679
something with just base classes you

00:33:06,380 --> 00:33:11,929
probably that's the way to do it unless

00:33:08,679 --> 00:33:14,240
the use of a meta class greatly

00:33:11,929 --> 00:33:15,380
simplifies the amount of code that needs

00:33:14,240 --> 00:33:20,270
to be written and reduces the

00:33:15,380 --> 00:33:21,770
possibility for bugs I would also

00:33:20,270 --> 00:33:23,450
mention that meta classes are not

00:33:21,770 --> 00:33:25,940
supposed to be a part in parcel

00:33:23,450 --> 00:33:26,840
substitute for class factories they

00:33:25,940 --> 00:33:28,789
solve different problems

00:33:26,840 --> 00:33:32,120
meta classes still take defined

00:33:28,789 --> 00:33:33,230
arguments you have a couple

00:33:32,120 --> 00:33:35,029
opportunities to play with them but not

00:33:33,230 --> 00:33:38,210
very many class factories are much more

00:33:35,029 --> 00:33:41,029
open but much less efficient could you

00:33:38,210 --> 00:33:46,850
talk about some meta class conflicts or

00:33:41,029 --> 00:33:47,929
meta class errors such as say with

00:33:46,850 --> 00:33:50,649
django tasty pie as long as we're

00:33:47,929 --> 00:33:53,570
talking about django when you declare

00:33:50,649 --> 00:33:56,809
tasty pie resource you declare class

00:33:53,570 --> 00:33:58,909
meta if you try to use type to

00:33:56,809 --> 00:34:02,690
instantiate many different but similar

00:33:58,909 --> 00:34:04,610
resources then you run into some problem

00:34:02,690 --> 00:34:06,669
like declaring class meta gets sort of

00:34:04,610 --> 00:34:08,960
complicated could you talk more about

00:34:06,669 --> 00:34:10,280
meta class conflicts and the sort of

00:34:08,960 --> 00:34:16,429
errors that you'll get working with meta

00:34:10,280 --> 00:34:17,929
classes um not very well on stage so the

00:34:16,429 --> 00:34:19,609
quite the question was actually if I

00:34:17,929 --> 00:34:21,919
could do an illustration of some of the

00:34:19,609 --> 00:34:24,470
conflicts that you can get with using

00:34:21,919 --> 00:34:24,710
meta classes particularly if you try to

00:34:24,470 --> 00:34:26,990
use

00:34:24,710 --> 00:34:28,909
classes that are incompatible or running

00:34:26,990 --> 00:34:31,879
some inheritance things the answer to

00:34:28,909 --> 00:34:34,490
that is not very well and certainly not

00:34:31,879 --> 00:34:38,330
on the spot I also have an issue of time

00:34:34,490 --> 00:34:39,679
I think I'm out of it so I am going to

00:34:38,330 --> 00:34:41,200
go ahead and dismiss this if you have

00:34:39,679 --> 00:34:43,849
any if anyone has any more questions

00:34:41,200 --> 00:34:44,929
feel free to like bum rush the door over

00:34:43,849 --> 00:34:47,359
there and I'll be over there so we can

00:34:44,929 --> 00:34:49,929
make room for the next speaker thank you

00:34:47,359 --> 00:34:49,929

YouTube URL: https://www.youtube.com/watch?v=ANhTacigaf8


