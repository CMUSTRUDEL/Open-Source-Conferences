Title: Django Templating: More Than Just Blocks
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Christine Cheung
Django's template language is designed to strike a balance between power and ease of use; learn how to use this balance to create awesome looking websites. This talk will cover the basics and best practices of Django templating, from
Captions: 
	00:00:00,000 --> 00:00:07,589
to django templating more than just

00:00:04,110 --> 00:00:11,910
blocks 30 minute talk given by Kristine

00:00:07,589 --> 00:00:13,710
Xiong Wow oh and at the end if there is

00:00:11,910 --> 00:00:16,020
question and answer we ask that you come

00:00:13,710 --> 00:00:23,279
to this microphone to ask your question

00:00:16,020 --> 00:00:25,380
thank you hi this is my talk about

00:00:23,279 --> 00:00:27,900
Django templating templating Django

00:00:25,380 --> 00:00:29,760
everything in between like they said

00:00:27,900 --> 00:00:31,380
keep all your burning questions until

00:00:29,760 --> 00:00:35,399
the end unless something's actually

00:00:31,380 --> 00:00:37,079
burning in the room so about me I'm

00:00:35,399 --> 00:00:39,540
mostly a front-end developer but I work

00:00:37,079 --> 00:00:42,780
mostly in Django projects I work out of

00:00:39,540 --> 00:00:44,010
Santa Monica I'm the president of pilot

00:00:42,780 --> 00:00:46,050
ease we're trying to encourage more

00:00:44,010 --> 00:00:47,430
woman and support existing woman that

00:00:46,050 --> 00:00:50,250
our Python programmers and we also the

00:00:47,430 --> 00:00:53,160
awesome party tonight I was also speaker

00:00:50,250 --> 00:00:56,309
last year at django con i know i also

00:00:53,160 --> 00:00:59,399
talked about front-end django stuff so

00:00:56,309 --> 00:01:01,079
what i am going to talk about i am going

00:00:59,399 --> 00:01:02,910
to talk about all about templates I'm

00:01:01,079 --> 00:01:04,710
not necessarily going to go in depth in

00:01:02,910 --> 00:01:07,979
any particular topic but kind of a

00:01:04,710 --> 00:01:10,590
breath of lots of templating stuff so

00:01:07,979 --> 00:01:13,950
I'm first going to start with the basics

00:01:10,590 --> 00:01:15,780
kind of to get started then I'm going to

00:01:13,950 --> 00:01:19,799
talk about best practices and commonly

00:01:15,780 --> 00:01:22,170
use tags extending templates so making

00:01:19,799 --> 00:01:25,710
your own custom tagging filters loading

00:01:22,170 --> 00:01:29,960
your templates this includes custom

00:01:25,710 --> 00:01:32,729
templates custom template loaders

00:01:29,960 --> 00:01:35,070
removing the existing Django templating

00:01:32,729 --> 00:01:37,439
system with another one and optimization

00:01:35,070 --> 00:01:40,409
of templates and also what's coming up

00:01:37,439 --> 00:01:46,439
Majengo before so let start with the

00:01:40,409 --> 00:01:48,420
basics this is what the user sees its

00:01:46,439 --> 00:01:50,540
this is like the closest to the compiled

00:01:48,420 --> 00:01:53,460
HTML files so they're not necessarily

00:01:50,540 --> 00:01:57,149
going to see our api's they are going to

00:01:53,460 --> 00:01:59,610
see your notice your HTML the django

00:01:57,149 --> 00:02:01,829
Django templating engine itself there

00:01:59,610 --> 00:02:05,130
are it's a subset of the Python language

00:02:01,829 --> 00:02:07,950
there's about more than 30 customs hat

00:02:05,130 --> 00:02:10,619
30 built-in vet tags and more than 50

00:02:07,950 --> 00:02:13,110
filters and while it may seem limited

00:02:10,619 --> 00:02:13,650
you can also you can also make your own

00:02:13,110 --> 00:02:18,420
custom

00:02:13,650 --> 00:02:22,110
and filters if needed and by design it's

00:02:18,420 --> 00:02:24,780
separated so a designer or front-end

00:02:22,110 --> 00:02:27,180
developer can work on the all the front

00:02:24,780 --> 00:02:31,170
end stuff and the back end can focus on

00:02:27,180 --> 00:02:32,459
all the back end stuff so before you

00:02:31,170 --> 00:02:35,180
even get started with templates there

00:02:32,459 --> 00:02:38,040
are some things you might want to do a

00:02:35,180 --> 00:02:40,680
theme for your IDE so some people might

00:02:38,040 --> 00:02:43,620
use textmate or sublime text 2 or

00:02:40,680 --> 00:02:46,019
eclipse or something syntax hiding

00:02:43,620 --> 00:02:48,060
autocompletion so you can write for tab

00:02:46,019 --> 00:02:50,340
and will actually write out your whole

00:02:48,060 --> 00:02:54,480
structure so you don't have to waste

00:02:50,340 --> 00:02:56,099
time writing extra code django debug

00:02:54,480 --> 00:02:58,379
tool bar which is an excellent tool to

00:02:56,099 --> 00:03:00,810
use it can show you your template

00:02:58,379 --> 00:03:02,220
template paths so if you're rendering a

00:03:00,810 --> 00:03:04,560
lot of different things you can use a

00:03:02,220 --> 00:03:06,090
debug tool bar to see how many templates

00:03:04,560 --> 00:03:11,689
you've called and check out variables

00:03:06,090 --> 00:03:15,120
and you can also print out all built-in

00:03:11,689 --> 00:03:16,980
tags and filters in your swag bags you

00:03:15,120 --> 00:03:19,049
probably got one of these Django 1.4

00:03:16,980 --> 00:03:21,389
cheat sheets which has a list of

00:03:19,049 --> 00:03:23,280
template tags is a handy reference even

00:03:21,389 --> 00:03:24,660
though you might have dual triple

00:03:23,280 --> 00:03:28,739
monitors sometimes it's nice have a

00:03:24,660 --> 00:03:30,959
little reference guide so starting out

00:03:28,739 --> 00:03:34,049
templates how I built how I start out I

00:03:30,959 --> 00:03:36,299
keep them in one place so this is a demo

00:03:34,049 --> 00:03:39,120
project with a bunch of applications and

00:03:36,299 --> 00:03:41,579
I have a templates folder that I store

00:03:39,120 --> 00:03:43,349
all my templates in this makes it easy

00:03:41,579 --> 00:03:45,959
so you know where all your templates are

00:03:43,349 --> 00:03:47,579
sometimes people may have a template

00:03:45,959 --> 00:03:49,859
folder in each application folder but

00:03:47,579 --> 00:03:52,019
sometimes you may have like 20 50 apps

00:03:49,859 --> 00:03:55,650
and now you have 20 50 template folders

00:03:52,019 --> 00:03:59,370
to keep track of now in writing

00:03:55,650 --> 00:04:02,909
templates its think pep eight the style

00:03:59,370 --> 00:04:04,859
guide Python consistent spacing tabs

00:04:02,909 --> 00:04:08,069
versus spaces doesn't matter just pick

00:04:04,859 --> 00:04:10,049
one and roll with it like you would like

00:04:08,069 --> 00:04:11,790
when writing regular Python code you put

00:04:10,049 --> 00:04:15,180
all your import statements up top put

00:04:11,790 --> 00:04:17,159
all your load template tags up top also

00:04:15,180 --> 00:04:20,010
with commenting it might be a good idea

00:04:17,159 --> 00:04:22,380
to be consistent if you use the built-in

00:04:20,010 --> 00:04:24,810
comment tag it will actually compile

00:04:22,380 --> 00:04:27,680
compile the comments out instead of the

00:04:24,810 --> 00:04:30,659
HTML comments which are you

00:04:27,680 --> 00:04:32,189
available in view source so you have you

00:04:30,659 --> 00:04:33,599
know a lot of expletives or something

00:04:32,189 --> 00:04:34,830
you can like write anything and then

00:04:33,599 --> 00:04:36,479
I'll be compiled out so the user

00:04:34,830 --> 00:04:38,039
end-user won't see it if you have a

00:04:36,479 --> 00:04:42,210
bunch of stuff that you want to remove

00:04:38,039 --> 00:04:48,210
you can use the the comment block out a

00:04:42,210 --> 00:04:50,189
section of code now the basics start out

00:04:48,210 --> 00:04:53,789
with a beige based on HTML template this

00:04:50,189 --> 00:04:57,360
is your main skeleton with a simple

00:04:53,789 --> 00:05:00,990
block as you can see block title is your

00:04:57,360 --> 00:05:04,469
title and then you can put your content

00:05:00,990 --> 00:05:07,139
and then you can have pages inherit from

00:05:04,469 --> 00:05:09,210
it so it can be a homepage it can be an

00:05:07,139 --> 00:05:11,580
about page this is the foo page it

00:05:09,210 --> 00:05:14,189
extends the base HTML template so you

00:05:11,580 --> 00:05:16,020
have all your base styles and then you

00:05:14,189 --> 00:05:20,699
can put all anything that's unique to

00:05:16,020 --> 00:05:25,349
foo about home page into content now

00:05:20,699 --> 00:05:29,310
blocks I use these practically in every

00:05:25,349 --> 00:05:31,830
project title meta tags you might you

00:05:29,310 --> 00:05:34,979
know have them in a database or

00:05:31,830 --> 00:05:38,279
something extra head which you may have

00:05:34,979 --> 00:05:41,490
multiple CSS files for depending on what

00:05:38,279 --> 00:05:45,479
page you're loading obviously content

00:05:41,490 --> 00:05:48,060
and I typically put all JavaScript

00:05:45,479 --> 00:05:49,710
includes on the bottom instead of the

00:05:48,060 --> 00:05:52,050
instead of the top makes pages load

00:05:49,710 --> 00:05:54,360
faster to have an extra GS on the bottom

00:05:52,050 --> 00:05:58,620
that might be separate from extra head

00:05:54,360 --> 00:06:00,839
in writing blocks you should always end

00:05:58,620 --> 00:06:03,419
your block structures like so block

00:06:00,839 --> 00:06:05,969
title foo and block title instead of

00:06:03,419 --> 00:06:08,490
just block title and block because in

00:06:05,969 --> 00:06:10,919
some cases you might have six seven or

00:06:08,490 --> 00:06:13,080
more blocks and then they're all you

00:06:10,919 --> 00:06:16,680
have a sea of n blocks and you might

00:06:13,080 --> 00:06:18,990
want to take out a particular block

00:06:16,680 --> 00:06:21,870
section and then it just makes it easier

00:06:18,990 --> 00:06:25,589
to keep track of by design you can't

00:06:21,870 --> 00:06:27,509
repeat blocks so you typically have only

00:06:25,589 --> 00:06:30,270
one title you don't have like 20 titles

00:06:27,509 --> 00:06:32,939
for your page so if you have a section

00:06:30,270 --> 00:06:34,919
that you want to repeat think of it

00:06:32,939 --> 00:06:36,959
doing it another way a context processor

00:06:34,919 --> 00:06:40,780
and include or write your own custom tag

00:06:36,959 --> 00:06:42,820
and don't over block meaning only

00:06:40,780 --> 00:06:45,360
right a block tag if you really need it

00:06:42,820 --> 00:06:47,440
sometimes people may go crazy saying oh

00:06:45,360 --> 00:06:48,940
here's a header I'll make block header

00:06:47,440 --> 00:06:51,510
I'll make block footer I'll make block

00:06:48,940 --> 00:06:56,110
content block widget and then soon

00:06:51,510 --> 00:06:58,030
you'll have you know more more code to

00:06:56,110 --> 00:07:02,200
deal with even if you're not using it

00:06:58,030 --> 00:07:04,180
dynamically including templates what's

00:07:02,200 --> 00:07:05,830
nice about Django it's dry don't repeat

00:07:04,180 --> 00:07:10,020
yourself so if you have a repeating

00:07:05,830 --> 00:07:12,639
segment repeating templates include them

00:07:10,020 --> 00:07:13,840
well I heard you like include so I put

00:07:12,639 --> 00:07:16,510
includes and you're including your

00:07:13,840 --> 00:07:19,510
includes some people do this don't do

00:07:16,510 --> 00:07:21,220
that try to use fewer includes only when

00:07:19,510 --> 00:07:23,590
you really need them because what

00:07:21,220 --> 00:07:26,460
happens if you have and include and then

00:07:23,590 --> 00:07:30,700
that include includes that I don't know

00:07:26,460 --> 00:07:32,800
variables obviously is Django you know

00:07:30,700 --> 00:07:34,300
it's a dynamic web web app like

00:07:32,800 --> 00:07:35,950
framework to make applications you're

00:07:34,300 --> 00:07:39,040
dealing with data coming from the back

00:07:35,950 --> 00:07:41,410
end their objects from review so you

00:07:39,040 --> 00:07:43,660
modify these objects with filters like

00:07:41,410 --> 00:07:47,800
so you take a variable and you pass a

00:07:43,660 --> 00:07:49,600
lower tack lower filter which lower case

00:07:47,800 --> 00:07:52,270
is the variable you can loop through

00:07:49,600 --> 00:07:56,650
them using tags the most basic one basic

00:07:52,270 --> 00:08:00,010
control structure the if tag if variable

00:07:56,650 --> 00:08:01,630
output foo otherwise output bar you can

00:08:00,010 --> 00:08:04,990
also create your own filters and and

00:08:01,630 --> 00:08:07,000
tags which I will go over soon security

00:08:04,990 --> 00:08:09,580
by design Django is a rock solid

00:08:07,000 --> 00:08:11,020
framework from the template side of

00:08:09,580 --> 00:08:13,930
things you can be assured that it's

00:08:11,020 --> 00:08:17,440
really secure however if you use a safe

00:08:13,930 --> 00:08:20,830
filter or Auto escape auto scape a tag

00:08:17,440 --> 00:08:23,140
you do run the risk of having malicious

00:08:20,830 --> 00:08:26,380
code run so make sure you always

00:08:23,140 --> 00:08:28,570
sanitize the data so if you take any

00:08:26,380 --> 00:08:32,620
user input you should always sanitize it

00:08:28,570 --> 00:08:35,440
sometimes people have data that you know

00:08:32,620 --> 00:08:37,000
you might have scripts or HTML or

00:08:35,440 --> 00:08:38,830
something you want to run from the back

00:08:37,000 --> 00:08:41,650
end that's trusted and you use a save

00:08:38,830 --> 00:08:43,570
tag but sometimes people don't and then

00:08:41,650 --> 00:08:45,730
if you have a safe tag safe filter

00:08:43,570 --> 00:08:48,330
running someone can put malicious

00:08:45,730 --> 00:08:51,339
JavaScript and now your website's pone

00:08:48,330 --> 00:08:54,370
when writing URLs named URLs tags as

00:08:51,339 --> 00:08:56,740
much as possible define them

00:08:54,370 --> 00:09:00,940
in your URLs up high so right here we

00:08:56,740 --> 00:09:05,020
have a foo view to foo URL name it foo

00:09:00,940 --> 00:09:07,270
so when you write your letter H I mean a

00:09:05,020 --> 00:09:09,670
tags you can write your elf ooh in case

00:09:07,270 --> 00:09:11,260
it changes and of course in your

00:09:09,670 --> 00:09:14,610
settings you should have a static URL

00:09:11,260 --> 00:09:18,370
don't you don't hardcode your static

00:09:14,610 --> 00:09:20,080
forms for if you're doing a lot of stuff

00:09:18,370 --> 00:09:22,080
with forms try using a library

00:09:20,080 --> 00:09:24,130
especially if you're dealing with html5

00:09:22,080 --> 00:09:26,200
Django floppy forms is great you can

00:09:24,130 --> 00:09:28,810
also take a look at django crispy forms

00:09:26,200 --> 00:09:35,950
which used to be Django uniform which

00:09:28,810 --> 00:09:38,650
takes a uniform which is a nice it it's

00:09:35,950 --> 00:09:43,480
a way to uniform is a great way to to

00:09:38,650 --> 00:09:46,690
output forms because it semantically and

00:09:43,480 --> 00:09:49,480
they look nice and of course is a great

00:09:46,690 --> 00:09:51,730
usage of the include tag because you can

00:09:49,480 --> 00:09:53,560
if you have a lot of form specific logic

00:09:51,730 --> 00:09:56,050
you could include in a form you might

00:09:53,560 --> 00:09:59,589
have different styles of forms and if

00:09:56,050 --> 00:10:02,230
you do use the tag tag a form tag try to

00:09:59,589 --> 00:10:04,360
use as UL it's an unordered list it

00:10:02,230 --> 00:10:08,290
makes more sense than a paragraph or

00:10:04,360 --> 00:10:10,330
table because form input elements or out

00:10:08,290 --> 00:10:12,880
or submit buttons or whatever they're

00:10:10,330 --> 00:10:14,740
not paragraphs of text they make more

00:10:12,880 --> 00:10:16,600
sense of the list and you know any

00:10:14,740 --> 00:10:18,550
friend and developer will will get mad

00:10:16,600 --> 00:10:22,720
at you if you use if you put

00:10:18,550 --> 00:10:24,160
presentational data in a table well you

00:10:22,720 --> 00:10:28,360
know there's really more than one way to

00:10:24,160 --> 00:10:31,950
do things even with simple built-in tags

00:10:28,360 --> 00:10:36,339
and filters so I'll give you an example

00:10:31,950 --> 00:10:38,380
so here we are if fubar show fubar else

00:10:36,339 --> 00:10:40,060
boob ass it's really simple but you can

00:10:38,380 --> 00:10:43,740
also do a different way you can use the

00:10:40,060 --> 00:10:47,410
first of tag so first of tag will output

00:10:43,740 --> 00:10:49,029
variables in order so if fubar exists

00:10:47,410 --> 00:10:51,279
will output that if not it will output

00:10:49,029 --> 00:10:54,130
foot baths and it can go on and on none

00:10:51,279 --> 00:10:55,690
and ultimately there's no right or wrong

00:10:54,130 --> 00:10:57,490
way it's just whatever you feel

00:10:55,690 --> 00:11:00,550
comfortable with or your team feels

00:10:57,490 --> 00:11:02,620
comfortable with well now let's talk

00:11:00,550 --> 00:11:04,300
about extending templates now that we've

00:11:02,620 --> 00:11:06,610
kind of gone over some basic templates

00:11:04,300 --> 00:11:09,459
template tags

00:11:06,610 --> 00:11:11,430
custom tags and filters if you want to

00:11:09,459 --> 00:11:15,100
make your own custom tags and filters

00:11:11,430 --> 00:11:17,560
you have say you have a demo app well

00:11:15,100 --> 00:11:19,240
tags and filters are not HTML there

00:11:17,560 --> 00:11:21,700
python logic so you put them in the

00:11:19,240 --> 00:11:24,279
application folder and you make a folder

00:11:21,700 --> 00:11:27,459
called template tags you you can create

00:11:24,279 --> 00:11:28,480
a file named anything but name it

00:11:27,459 --> 00:11:30,339
something that makes sense because

00:11:28,480 --> 00:11:32,980
you're going to load that so for in this

00:11:30,339 --> 00:11:34,810
case demo underscore utils you put all

00:11:32,980 --> 00:11:37,060
your template tags custom template tags

00:11:34,810 --> 00:11:40,450
and filters in there then once you want

00:11:37,060 --> 00:11:42,820
to use them you load that file let's

00:11:40,450 --> 00:11:46,060
start with making custom filter we start

00:11:42,820 --> 00:11:49,620
out we initiate the library talat that

00:11:46,060 --> 00:11:54,640
we are making a custom tag or filter a

00:11:49,620 --> 00:11:59,709
decorator to we can name it our will be

00:11:54,640 --> 00:12:02,050
a it will be called removed and if your

00:11:59,709 --> 00:12:05,050
filter always expects a string you can

00:12:02,050 --> 00:12:08,279
use a string filter decorator here's our

00:12:05,050 --> 00:12:12,220
filter super simple just a basic example

00:12:08,279 --> 00:12:14,890
we have cut taken a value we also pass

00:12:12,220 --> 00:12:17,500
in an argument remove all instances of

00:12:14,890 --> 00:12:20,620
argument really simple and how to use

00:12:17,500 --> 00:12:23,980
this you have a food object remove all

00:12:20,620 --> 00:12:25,240
instances of bar from that object and if

00:12:23,980 --> 00:12:27,459
you don't want to take any arguments

00:12:25,240 --> 00:12:30,190
just don't pass them in so in this case

00:12:27,459 --> 00:12:32,470
we're we want to take a variable and

00:12:30,190 --> 00:12:36,040
lowercase it so you just make it really

00:12:32,470 --> 00:12:38,140
simple like that foo filter lower make

00:12:36,040 --> 00:12:39,730
us some tag is a lot more complex

00:12:38,140 --> 00:12:40,810
because really you can do anything with

00:12:39,730 --> 00:12:43,329
a filter you were actually just

00:12:40,810 --> 00:12:46,180
modifying one variable but with a tag

00:12:43,329 --> 00:12:48,550
you can do all sorts of stuff and really

00:12:46,180 --> 00:12:50,050
in in the meat of a tag you have to

00:12:48,550 --> 00:12:51,730
compile it and render it because you

00:12:50,050 --> 00:12:53,620
have to take in what the tag describes

00:12:51,730 --> 00:12:56,529
and then you have to run the logic and

00:12:53,620 --> 00:12:59,199
then you have to present it and when

00:12:56,529 --> 00:13:01,990
writing tags you kind of decide what its

00:12:59,199 --> 00:13:03,850
purpose is mate it's easier if you have

00:13:01,990 --> 00:13:05,199
a single purpose of what you want this

00:13:03,850 --> 00:13:08,260
tag to accomplish rather than multiple

00:13:05,199 --> 00:13:10,000
things it's better to write up many tags

00:13:08,260 --> 00:13:13,000
do different things in one tag that does

00:13:10,000 --> 00:13:15,610
everything so let's start simple because

00:13:13,000 --> 00:13:19,149
writing tag semi complex a simple

00:13:15,610 --> 00:13:20,200
example we'll use for will show current

00:13:19,149 --> 00:13:27,850
time Oh

00:13:20,200 --> 00:13:29,890
acid Python string date object so start

00:13:27,850 --> 00:13:32,080
at the library make a declaratory you

00:13:29,890 --> 00:13:34,390
live recalled simple tag and it's pretty

00:13:32,080 --> 00:13:38,890
simple just have a function try accept

00:13:34,390 --> 00:13:41,250
trial its parses as you know they time

00:13:38,890 --> 00:13:44,140
object if not oh no there's an error

00:13:41,250 --> 00:13:46,960
well that's using the simple tags

00:13:44,140 --> 00:13:52,920
library if you want to do it without

00:13:46,960 --> 00:13:52,920
that import datetime instantiate it

00:13:54,120 --> 00:14:01,270
declaration it's kind of you take you

00:13:58,510 --> 00:14:05,350
compile it so you kind of tokenize a

00:14:01,270 --> 00:14:08,320
template tag what it's taking error if

00:14:05,350 --> 00:14:10,930
there are too many or too few passed and

00:14:08,320 --> 00:14:13,000
variables depending on your need and you

00:14:10,930 --> 00:14:14,650
actually have to make you know now you

00:14:13,000 --> 00:14:16,510
have to output it there's kind of

00:14:14,650 --> 00:14:19,450
there's their stuff there's a little

00:14:16,510 --> 00:14:22,540
boilerplate so to make easier template

00:14:19,450 --> 00:14:24,040
tags there are some libraries Django

00:14:22,540 --> 00:14:26,410
template tag sugar which is written by

00:14:24,040 --> 00:14:29,290
Alex gainer core core contributor to

00:14:26,410 --> 00:14:30,730
django there's it removes a la this

00:14:29,290 --> 00:14:33,280
boilerplate makes it a lot easier to

00:14:30,730 --> 00:14:34,780
make tags there's also a library that's

00:14:33,280 --> 00:14:38,590
even more recently updated called Jango

00:14:34,780 --> 00:14:39,850
classy tags that class-based template

00:14:38,590 --> 00:14:41,800
tags some of you might be using

00:14:39,850 --> 00:14:42,970
class-based views which is an awesome

00:14:41,800 --> 00:14:44,530
thing to do and now you can write

00:14:42,970 --> 00:14:46,630
class-based template tags which also

00:14:44,530 --> 00:14:49,210
makes it a lot easier to write tags and

00:14:46,630 --> 00:14:50,440
more understandable and less boilerplate

00:14:49,210 --> 00:14:53,440
so you don't have all these node

00:14:50,440 --> 00:14:55,300
functions to go through well in writing

00:14:53,440 --> 00:14:57,940
template tags you really the power to do

00:14:55,300 --> 00:15:01,690
a lot of things and really the whole

00:14:57,940 --> 00:15:05,080
design of the Django template engine is

00:15:01,690 --> 00:15:08,080
that you want to present presentational

00:15:05,080 --> 00:15:10,900
logic so how taking in a variable for

00:15:08,080 --> 00:15:13,750
loops loops iterating through them may

00:15:10,900 --> 00:15:15,910
be cycling them but you don't want to do

00:15:13,750 --> 00:15:19,480
application logic because that defeats

00:15:15,910 --> 00:15:21,180
the point of an MVC framework so don't

00:15:19,480 --> 00:15:23,890
write a template tag that runs any

00:15:21,180 --> 00:15:26,470
complicated logic or even Python itself

00:15:23,890 --> 00:15:28,900
I've seen it done it defeats the purpose

00:15:26,470 --> 00:15:31,720
of a templating language we're at PyCon

00:15:28,900 --> 00:15:33,209
we're not at page pecan it's dangerous

00:15:31,720 --> 00:15:34,559
and it's difficult to

00:15:33,209 --> 00:15:37,079
because now if you have a really

00:15:34,559 --> 00:15:38,790
complicated template tag unless you're

00:15:37,079 --> 00:15:40,829
you know for sure you're the lone

00:15:38,790 --> 00:15:41,759
programmer on this project chances are

00:15:40,829 --> 00:15:44,309
you might work with someone else

00:15:41,759 --> 00:15:47,069
especially for an open source project or

00:15:44,309 --> 00:15:49,679
job so someone else might see this like

00:15:47,069 --> 00:15:54,379
weird monsters tag me like what's going

00:15:49,679 --> 00:15:58,679
on here's an example of an atrocious tag

00:15:54,379 --> 00:16:01,259
so I mean this is like 15 lines just to

00:15:58,679 --> 00:16:04,920
show output one class I mean this is

00:16:01,259 --> 00:16:07,860
using someone wrote a template tag

00:16:04,920 --> 00:16:12,899
called PI to do Python logic and it just

00:16:07,860 --> 00:16:15,360
it looks ugly and gross well loading

00:16:12,899 --> 00:16:18,509
templates so we've kind of gone over

00:16:15,360 --> 00:16:21,029
common tags how to how to extend the

00:16:18,509 --> 00:16:23,749
making your own tags and filters but you

00:16:21,029 --> 00:16:27,569
can also load templates differently so

00:16:23,749 --> 00:16:30,240
use cases in case you want to maybe you

00:16:27,569 --> 00:16:32,519
want you have a be a be testing load

00:16:30,240 --> 00:16:35,279
testing you want to load templates you

00:16:32,519 --> 00:16:36,660
know based on your geographical area you

00:16:35,279 --> 00:16:40,949
can do that with the template loader

00:16:36,660 --> 00:16:44,549
settings and the most important part is

00:16:40,949 --> 00:16:46,889
a low template source function and you

00:16:44,549 --> 00:16:51,209
put your logic there to load templates

00:16:46,889 --> 00:16:53,490
depending on your need the Django

00:16:51,209 --> 00:16:55,319
templating engine is really awesome but

00:16:53,490 --> 00:16:56,910
sometimes there are cases where you

00:16:55,319 --> 00:17:00,290
might want to rip it out and put another

00:16:56,910 --> 00:17:03,260
one in there are other Python templating

00:17:00,290 --> 00:17:06,419
languages like gin Jamaica cheetah

00:17:03,260 --> 00:17:07,439
gingers the most popular but why Django

00:17:06,419 --> 00:17:09,799
template engine is really awesome

00:17:07,439 --> 00:17:11,760
there's a lot of cool built and stuff

00:17:09,799 --> 00:17:14,299
sometimes people are more familiar with

00:17:11,760 --> 00:17:17,909
another template language maybe there's

00:17:14,299 --> 00:17:20,189
there's a reported slight performance

00:17:17,909 --> 00:17:22,740
boost and taking out the to django

00:17:20,189 --> 00:17:25,140
templating engine with another one you

00:17:22,740 --> 00:17:26,490
have different ways to do logic control

00:17:25,140 --> 00:17:29,130
handling that people might be more

00:17:26,490 --> 00:17:34,110
comfortable with but in doing this you

00:17:29,130 --> 00:17:36,779
kind of risk you lose support so when

00:17:34,110 --> 00:17:39,960
you use a built-in Django templates the

00:17:36,779 --> 00:17:45,840
you there's a lot of things you can with

00:17:39,960 --> 00:17:46,920
URLs views but if you if you rip it out

00:17:45,840 --> 00:17:50,040
and put in something like

00:17:46,920 --> 00:17:53,250
jinjja now you have to you have to do

00:17:50,040 --> 00:17:55,170
more to support this and you lose a lot

00:17:53,250 --> 00:17:57,600
of built-in things that comes in Django

00:17:55,170 --> 00:17:59,160
and if you rip this out you might be

00:17:57,600 --> 00:18:00,990
tempted to rip other things out and in

00:17:59,160 --> 00:18:03,060
that case you might have to rethink your

00:18:00,990 --> 00:18:04,950
whole application maybe you're better

00:18:03,060 --> 00:18:06,990
off using something like flask if you

00:18:04,950 --> 00:18:11,870
want to use a bunch of other modules

00:18:06,990 --> 00:18:16,110
together but let's kind of talk about

00:18:11,870 --> 00:18:19,770
jinjja which is kind of popular why

00:18:16,110 --> 00:18:21,660
would you use jinja with Django well

00:18:19,770 --> 00:18:23,640
functions are callable from templates so

00:18:21,660 --> 00:18:25,520
now you don't have to do now you don't

00:18:23,640 --> 00:18:27,870
have to write your own tags and filters

00:18:25,520 --> 00:18:31,560
Luke controls are so there's more power

00:18:27,870 --> 00:18:34,290
in the loop controls in Jinja over

00:18:31,560 --> 00:18:37,320
Django sometimes some people feel that

00:18:34,290 --> 00:18:39,770
you can't do as much with built-in for

00:18:37,320 --> 00:18:42,600
loop in the Django templating language

00:18:39,770 --> 00:18:44,670
multiple filter arguments as well and

00:18:42,600 --> 00:18:47,730
there is a slight performance increase

00:18:44,670 --> 00:18:49,740
with it but there are also cons to this

00:18:47,730 --> 00:18:52,260
there's no dependencies in overhead

00:18:49,740 --> 00:18:54,090
obviously there's extra time researching

00:18:52,260 --> 00:18:57,270
how to do this you lose a lot of

00:18:54,090 --> 00:19:00,210
built-in support with a Django built in

00:18:57,270 --> 00:19:02,190
Django template engine you risk putting

00:19:00,210 --> 00:19:03,630
too much logic in our templates you may

00:19:02,190 --> 00:19:05,400
have more power in putting more

00:19:03,630 --> 00:19:07,760
presentational logic in but you risk

00:19:05,400 --> 00:19:11,090
putting up some application logic in and

00:19:07,760 --> 00:19:17,280
this speed increase is kind of minimal

00:19:11,090 --> 00:19:19,260
and it's kind of you know less than five

00:19:17,280 --> 00:19:22,230
percent you have to kind of think if the

00:19:19,260 --> 00:19:24,300
time you spent on ripping out your

00:19:22,230 --> 00:19:27,240
templating engine just for such a slight

00:19:24,300 --> 00:19:29,490
increase is worth it but there are ways

00:19:27,240 --> 00:19:31,230
without taking out the engine to speed

00:19:29,490 --> 00:19:33,060
up your templates so you can take

00:19:31,230 --> 00:19:35,490
advantage of all the neat things the

00:19:33,060 --> 00:19:36,810
Django templating engine has to offer so

00:19:35,490 --> 00:19:37,950
you can cash your template loaders you

00:19:36,810 --> 00:19:40,260
could you should you should be cashing

00:19:37,950 --> 00:19:43,290
everything anyways if you're writing a

00:19:40,260 --> 00:19:44,880
high-performance website there's a neat

00:19:43,290 --> 00:19:46,260
library Django template preprocessor

00:19:44,880 --> 00:19:48,780
which has a lot of pre-processing

00:19:46,260 --> 00:19:51,120
compiles template files makes things run

00:19:48,780 --> 00:19:53,880
faster there's also this cool thing

00:19:51,120 --> 00:19:55,950
called Jango pancake that Adrienne one

00:19:53,880 --> 00:19:58,620
of the creators of Jango recently

00:19:55,950 --> 00:20:00,720
released he he works at every block and

00:19:58,620 --> 00:20:04,409
this is something he uses every block we

00:20:00,720 --> 00:20:06,539
had some performance gains it flattens

00:20:04,409 --> 00:20:09,289
template files however you do have to

00:20:06,539 --> 00:20:11,280
use yeah you do have to write your your

00:20:09,289 --> 00:20:13,049
template files a little bit differently

00:20:11,280 --> 00:20:15,539
a little bit less dynamic but you do

00:20:13,049 --> 00:20:19,350
have certain speed increases in certain

00:20:15,539 --> 00:20:21,450
use cases and the cool thing is that all

00:20:19,350 --> 00:20:23,909
the things that adrian has learned from

00:20:21,450 --> 00:20:26,039
Django pancake he's eventually trying to

00:20:23,909 --> 00:20:27,809
incorporate into Django core itself so

00:20:26,039 --> 00:20:30,270
in the future we might not even have to

00:20:27,809 --> 00:20:33,330
worry about all these extra shoehorning

00:20:30,270 --> 00:20:36,900
things to to make Django templates run

00:20:33,330 --> 00:20:39,600
faster and also we're talking about

00:20:36,900 --> 00:20:41,580
templates but you can kind of think

00:20:39,600 --> 00:20:44,789
about other things that can increase

00:20:41,580 --> 00:20:46,500
your application speed so you might

00:20:44,789 --> 00:20:47,820
spend a lot of time optimizing certain

00:20:46,500 --> 00:20:54,270
things but maybe that time is better

00:20:47,820 --> 00:20:58,770
spent caching or more servers or load

00:20:54,270 --> 00:21:02,100
balancing and Django 14 is to be

00:20:58,770 --> 00:21:05,549
released at pycon it's and they're cool

00:21:02,100 --> 00:21:07,559
things regarding templates so if you

00:21:05,549 --> 00:21:11,100
start a project or an application now it

00:21:07,559 --> 00:21:12,840
can pass in a template you can pass in a

00:21:11,100 --> 00:21:14,429
template location so you can combine it

00:21:12,840 --> 00:21:16,740
with your favorite boilerplate less time

00:21:14,429 --> 00:21:18,750
spent bootstrapping a project so you can

00:21:16,740 --> 00:21:23,820
use html5 boilerplate your own favorite

00:21:18,750 --> 00:21:26,280
base HTML files makes running projects a

00:21:23,820 --> 00:21:27,720
lot easier and there is the elsif tag

00:21:26,280 --> 00:21:30,870
which a lot of people have complained

00:21:27,720 --> 00:21:32,549
about because previously in Django you

00:21:30,870 --> 00:21:35,010
only had if and else and you didn't have

00:21:32,549 --> 00:21:37,440
else if and you would have you just

00:21:35,010 --> 00:21:42,090
chain all these ifs and just sees of end

00:21:37,440 --> 00:21:44,700
of sand now the end is here so anyways

00:21:42,090 --> 00:21:46,850
that's my presentation if anyone had any

00:21:44,700 --> 00:21:46,850
questions

00:22:00,270 --> 00:22:05,350
um so this is kind of a silly question

00:22:03,370 --> 00:22:08,050
but you ever find yourself manipulating

00:22:05,350 --> 00:22:11,860
the white space to get your HTML to be

00:22:08,050 --> 00:22:14,080
formatted yes nicely yes it's it's kind

00:22:11,860 --> 00:22:16,450
of the OCD front-end developer in myself

00:22:14,080 --> 00:22:19,870
because you know when you have the base

00:22:16,450 --> 00:22:21,820
HTML and then you have an ink like block

00:22:19,870 --> 00:22:23,470
content and then it's kind of in the

00:22:21,820 --> 00:22:25,510
first line and even if you tab that

00:22:23,470 --> 00:22:27,400
particular block it won't tab everything

00:22:25,510 --> 00:22:29,950
in there so you end up having a block

00:22:27,400 --> 00:22:32,040
and then you'll have to like tab

00:22:29,950 --> 00:22:34,870
everything all over for it to a line

00:22:32,040 --> 00:22:36,070
just for view source but cool just want

00:22:34,870 --> 00:22:41,380
to make sure I wasn't the only one yeah

00:22:36,070 --> 00:22:43,060
I question I'm question about the that

00:22:41,380 --> 00:22:46,060
template tag that horrible and with the

00:22:43,060 --> 00:22:47,410
sad time slide yeah um how I'm assuming

00:22:46,060 --> 00:22:48,970
the person who wrote that wasn't

00:22:47,410 --> 00:22:51,550
probably wasn't a front end or primarily

00:22:48,970 --> 00:22:54,010
friend in person they weren't they were

00:22:51,550 --> 00:22:56,500
a back in person okay so how did that

00:22:54,010 --> 00:23:01,000
get resolved like did with her push back

00:22:56,500 --> 00:23:03,880
and well it was more like because I was

00:23:01,000 --> 00:23:06,310
a front end on that project and I was

00:23:03,880 --> 00:23:08,110
like I need this thing and he wouldn't

00:23:06,310 --> 00:23:11,830
like necessarily create thing I wanted

00:23:08,110 --> 00:23:13,570
but he wants it like I guess he was

00:23:11,830 --> 00:23:15,310
feeling clever and sometimes cleverness

00:23:13,570 --> 00:23:17,320
bites you in the ass because you end up

00:23:15,310 --> 00:23:21,630
with oh you end up over engineering

00:23:17,320 --> 00:23:25,090
things as in that case all right thanks

00:23:21,630 --> 00:23:26,650
um I was just wondering what like is

00:23:25,090 --> 00:23:28,060
sort of the difference between includes

00:23:26,650 --> 00:23:32,080
and blocks and when would you use one

00:23:28,060 --> 00:23:35,440
versus the other so blocks are kind of

00:23:32,080 --> 00:23:39,670
things like a title you know or contents

00:23:35,440 --> 00:23:42,400
and includes say a good include to be a

00:23:39,670 --> 00:23:44,560
sidebar or widget or one commonly use

00:23:42,400 --> 00:23:47,020
cases comments if you have you know it

00:23:44,560 --> 00:23:49,000
caught with comments the temple kind of

00:23:47,020 --> 00:23:50,860
repeats itself a lot so use and include

00:23:49,000 --> 00:23:53,460
and that typically you don't want to use

00:23:50,860 --> 00:23:53,460
that many blocks

00:23:55,970 --> 00:24:01,130
hi as a new Django user can you

00:23:59,450 --> 00:24:02,840
recommend any of the printed books it's

00:24:01,130 --> 00:24:04,790
been hard to tell if any if a them are

00:24:02,840 --> 00:24:06,530
worth getting or if they all come out of

00:24:04,790 --> 00:24:08,180
date so quickly they stayin in my

00:24:06,530 --> 00:24:11,380
experience they do got a date really

00:24:08,180 --> 00:24:15,200
quickly so i just always the Django

00:24:11,380 --> 00:24:17,960
documentation is pretty good hi hello

00:24:15,200 --> 00:24:21,070
can you talk about what logic you think

00:24:17,960 --> 00:24:24,050
is appropriate to put inside tags

00:24:21,070 --> 00:24:26,600
because I struggle with making my tags

00:24:24,050 --> 00:24:28,700
have a lot of logic in them versus tying

00:24:26,600 --> 00:24:31,370
my view functions to the to the

00:24:28,700 --> 00:24:35,060
presentation layer do you mean custom

00:24:31,370 --> 00:24:38,300
tags or the custom tags yeah well I

00:24:35,060 --> 00:24:40,640
think something that feels too small for

00:24:38,300 --> 00:24:43,520
view so sometimes you have like a simple

00:24:40,640 --> 00:24:46,280
function to do something like not that

00:24:43,520 --> 00:24:50,950
much logic into it write it into a

00:24:46,280 --> 00:24:53,960
template tag it kind of depends because

00:24:50,950 --> 00:24:56,570
you don't want a whole bunch of template

00:24:53,960 --> 00:25:00,730
tags and then a smaller view I would

00:24:56,570 --> 00:25:03,730
kind of think of balancing it I'm is

00:25:00,730 --> 00:25:03,730
okay

00:25:11,040 --> 00:25:13,100

YouTube URL: https://www.youtube.com/watch?v=ahM4GBZ-6qg


