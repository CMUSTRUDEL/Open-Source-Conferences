Title: Django Form Processing Deep Dive
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Nathan Yergler
Django Form processing often takes a back seat to flashier, more visible parts of the framework. But Django forms, fully leveraged, can help developers be more productive and write more cohesive code. This talk will dive deep into the
Captions: 
	00:00:00,510 --> 00:00:07,589
I'll try to keep the beard still while I

00:00:02,790 --> 00:00:09,269
stalk um so my name is Nathan and I'm

00:00:07,589 --> 00:00:12,120
here to talk to you about Django forms

00:00:09,269 --> 00:00:14,130
and kind of give you sort of Plum some

00:00:12,120 --> 00:00:15,900
of the depths of the package I'm a

00:00:14,130 --> 00:00:18,660
senior software engineer at Eventbrite

00:00:15,900 --> 00:00:21,210
and as part of my work there over the

00:00:18,660 --> 00:00:24,000
past year I've been building Django

00:00:21,210 --> 00:00:26,910
applications that had used forms very

00:00:24,000 --> 00:00:28,470
extensively and I thought I kind of knew

00:00:26,910 --> 00:00:31,019
what I was doing when I started working

00:00:28,470 --> 00:00:33,420
on those projects and then I realized I

00:00:31,019 --> 00:00:36,450
didn't and so I'm here to hopefully

00:00:33,420 --> 00:00:41,850
share some of what I learned with you

00:00:36,450 --> 00:00:43,290
so I there's a little bit of poor

00:00:41,850 --> 00:00:44,789
planning with this talk because I

00:00:43,290 --> 00:00:47,030
labeled it a deep dive but didn't label

00:00:44,789 --> 00:00:51,239
it extreme and it's a 30 minute slot so

00:00:47,030 --> 00:00:53,579
I apologize some of it is fast and or

00:00:51,239 --> 00:00:54,899
yeah the problem with a deep dive in 30

00:00:53,579 --> 00:00:57,149
minutes is sometimes you hit your head

00:00:54,899 --> 00:01:05,070
on the bottom so that's what I'm gonna

00:00:57,149 --> 00:01:06,060
try to avoid but the right so it's

00:01:05,070 --> 00:01:10,439
probably useful to think about little

00:01:06,060 --> 00:01:13,320
context some basics around forms and in

00:01:10,439 --> 00:01:14,909
particular what I've found when I

00:01:13,320 --> 00:01:17,009
started working with forms was that it

00:01:14,909 --> 00:01:21,000
was not always obvious to me where they

00:01:17,009 --> 00:01:22,710
fit in the stack of Django I would think

00:01:21,000 --> 00:01:24,030
of them as form as output tools and

00:01:22,710 --> 00:01:27,659
sometimes think of them as processing

00:01:24,030 --> 00:01:31,680
tools and I sure can to have this belief

00:01:27,659 --> 00:01:35,640
that really a form converts input to

00:01:31,680 --> 00:01:38,729
Python objects and vice and and Python

00:01:35,640 --> 00:01:40,079
objects to input opportunities for users

00:01:38,729 --> 00:01:41,670
and those two things are actually pretty

00:01:40,079 --> 00:01:45,210
independent with one another you can use

00:01:41,670 --> 00:01:47,820
forms in situations where you have to

00:01:45,210 --> 00:01:49,200
have no HTML form at all and they're

00:01:47,820 --> 00:01:50,640
actually really useful in that situation

00:01:49,200 --> 00:01:50,939
because you're taking input from the

00:01:50,640 --> 00:01:53,220
user

00:01:50,939 --> 00:01:54,329
and you want to make sure that it's

00:01:53,220 --> 00:01:57,000
valid that it meets your expectations

00:01:54,329 --> 00:02:01,439
and forms give you a nice way to do that

00:01:57,000 --> 00:02:03,329
so I just want to quickly provide a

00:02:01,439 --> 00:02:10,400
little bit of context and then move into

00:02:03,329 --> 00:02:12,900
some of the weeds if you will so I'm

00:02:10,400 --> 00:02:13,560
assuming everybody here seen forms and

00:02:12,900 --> 00:02:16,950
so this is just

00:02:13,560 --> 00:02:18,480
fresher if that's not true then we can

00:02:16,950 --> 00:02:20,040
talk afterwards and I can try to explain

00:02:18,480 --> 00:02:23,430
things to you a little bit in more depth

00:02:20,040 --> 00:02:25,140
but forms are simply classes that are

00:02:23,430 --> 00:02:27,000
composed of fields and each field has a

00:02:25,140 --> 00:02:28,860
widget if you don't tell it what the

00:02:27,000 --> 00:02:31,380
widget is going to be Jango will give

00:02:28,860 --> 00:02:33,180
you one by default so in this case I

00:02:31,380 --> 00:02:35,569
have a contact form that has a name and

00:02:33,180 --> 00:02:37,470
an email address and I've overridden the

00:02:35,569 --> 00:02:39,180
widget that's going to be used for the

00:02:37,470 --> 00:02:42,780
name but not for the email address so

00:02:39,180 --> 00:02:44,970
I'll get the default you instantiate a

00:02:42,780 --> 00:02:47,130
form either with or without data these

00:02:44,970 --> 00:02:51,690
are two bound and these refer to unbound

00:02:47,130 --> 00:02:54,000
and bound forms and a lot of times

00:02:51,690 --> 00:02:55,230
you'll see the upper the upper format

00:02:54,000 --> 00:02:58,160
where you don't give it any keyword

00:02:55,230 --> 00:03:00,480
arguments as what you do when you're

00:02:58,160 --> 00:03:02,250
just rendering the form for output and

00:03:00,480 --> 00:03:03,690
the second is when you're actually

00:03:02,250 --> 00:03:08,549
processing the post from the user

00:03:03,690 --> 00:03:10,830
processing some amount of data the thing

00:03:08,549 --> 00:03:12,780
you usually see this written as request

00:03:10,830 --> 00:03:14,310
dot post here when you are standing at

00:03:12,780 --> 00:03:16,860
bound form but really it's any addictive

00:03:14,310 --> 00:03:20,070
data so that could come from a JSON post

00:03:16,860 --> 00:03:22,350
it come from a payload of something else

00:03:20,070 --> 00:03:26,190
that it's one of the more flexible parts

00:03:22,350 --> 00:03:29,130
about forms so when you've instantiate

00:03:26,190 --> 00:03:30,450
your form there's actually I you know

00:03:29,130 --> 00:03:32,220
this is I'm sure this is well documented

00:03:30,450 --> 00:03:34,079
and I just wasn't paying attention but

00:03:32,220 --> 00:03:37,680
there's actually two different ways to

00:03:34,079 --> 00:03:39,329
get this field that in the form one of

00:03:37,680 --> 00:03:40,709
them is the fields dictionary which

00:03:39,329 --> 00:03:42,180
actually gives you back those field

00:03:40,709 --> 00:03:44,340
objects and so if you want to do things

00:03:42,180 --> 00:03:46,470
like modify the labels modify the

00:03:44,340 --> 00:03:48,239
choices after you've started that's

00:03:46,470 --> 00:03:51,840
where you go but the second one we're

00:03:48,239 --> 00:03:54,180
actually saying form and square brackets

00:03:51,840 --> 00:03:56,609
of field name gives you a bound field

00:03:54,180 --> 00:03:59,639
class and a bound field wraps the field

00:03:56,609 --> 00:04:01,139
and the value and the widget so that you

00:03:59,639 --> 00:04:06,540
can output it to the user in different

00:04:01,139 --> 00:04:09,959
formats you can give forms initial data

00:04:06,540 --> 00:04:11,190
this is no surprise I don't think you

00:04:09,959 --> 00:04:15,060
can get sort of starting points it's a

00:04:11,190 --> 00:04:16,919
dictionary of your field names and a lot

00:04:15,060 --> 00:04:18,780
of what something that you will end up

00:04:16,919 --> 00:04:21,239
wanting to do pretty often is output

00:04:18,780 --> 00:04:23,610
what that value is in your HTML or some

00:04:21,239 --> 00:04:27,180
other format so the bound field gives

00:04:23,610 --> 00:04:27,720
you a value method that gives you the

00:04:27,180 --> 00:04:29,580
current

00:04:27,720 --> 00:04:35,910
you either from the initial data or from

00:04:29,580 --> 00:04:36,990
the what what input you're processing so

00:04:35,910 --> 00:04:41,010
that's sort of a very high-level

00:04:36,990 --> 00:04:44,900
overview of forms and sort of the basic

00:04:41,010 --> 00:04:47,640
stuff and so now I want to dive into

00:04:44,900 --> 00:04:49,080
validation in depth and how this

00:04:47,640 --> 00:04:50,490
validation process works because this is

00:04:49,080 --> 00:04:53,640
where I started to find things that I

00:04:50,490 --> 00:04:57,840
wasn't really aware of or not until I

00:04:53,640 --> 00:05:00,480
picked me so so validating a form has

00:04:57,840 --> 00:05:02,520
two major steps you validate the fields

00:05:00,480 --> 00:05:05,490
by themselves and then you validate the

00:05:02,520 --> 00:05:07,200
form as a whole you can trigger this in

00:05:05,490 --> 00:05:09,270
a couple different ways by calling is

00:05:07,200 --> 00:05:12,420
valid will do it implicitly calling full

00:05:09,270 --> 00:05:15,600
clean does it explicitly but each of

00:05:12,420 --> 00:05:19,590
these steps is someone independent of

00:05:15,600 --> 00:05:21,360
the other so when we go in field where

00:05:19,590 --> 00:05:23,100
do we feel validation we're actually

00:05:21,360 --> 00:05:25,620
doing a couple of different things we're

00:05:23,100 --> 00:05:27,840
taking the data that we might have from

00:05:25,620 --> 00:05:29,820
the user and converting it into a Python

00:05:27,840 --> 00:05:32,550
object so if I have an integer field and

00:05:29,820 --> 00:05:34,500
I get back the string you know with the

00:05:32,550 --> 00:05:36,000
number three in a string the first step

00:05:34,500 --> 00:05:38,340
is going to be casting that to an

00:05:36,000 --> 00:05:39,210
integer and making sure that that cast

00:05:38,340 --> 00:05:42,450
actually works

00:05:39,210 --> 00:05:45,990
followed by Val running validators and

00:05:42,450 --> 00:05:49,820
then finally cleaning it so any of these

00:05:45,990 --> 00:05:52,290
can raise exceptions along the way and

00:05:49,820 --> 00:05:55,410
and will show I'll show you how those

00:05:52,290 --> 00:06:02,520
get exposed out for output a little bit

00:05:55,410 --> 00:06:03,900
later so so validation validators you

00:06:02,520 --> 00:06:06,750
get some of them by default on a form

00:06:03,900 --> 00:06:08,280
I'm sorry on a field and some things

00:06:06,750 --> 00:06:10,530
like min value or max value you might

00:06:08,280 --> 00:06:11,880
want to assign to a field as a validator

00:06:10,530 --> 00:06:13,320
and these are any callable that just

00:06:11,880 --> 00:06:17,070
takes the value and raises an exception

00:06:13,320 --> 00:06:19,500
if there's a problem with it so these

00:06:17,070 --> 00:06:22,260
are these are useful just for basic

00:06:19,500 --> 00:06:26,090
validation and basic constraints on your

00:06:22,260 --> 00:06:26,090
information that's coming from the user

00:06:26,240 --> 00:06:30,540
cleaning is actually used when you want

00:06:29,130 --> 00:06:32,550
to do something a little more involved

00:06:30,540 --> 00:06:34,950
it's a method on the form and so it has

00:06:32,550 --> 00:06:38,100
the special name a clean underscore

00:06:34,950 --> 00:06:40,140
field name where so this gets to be a

00:06:38,100 --> 00:06:40,980
you know clean underscore email or clean

00:06:40,140 --> 00:06:44,310
underscore name

00:06:40,980 --> 00:06:45,120
it's a method and so your Empress

00:06:44,310 --> 00:06:47,100
already been converted

00:06:45,120 --> 00:06:49,680
you can still raise validation errors

00:06:47,100 --> 00:06:53,940
but these methods must return the

00:06:49,680 --> 00:06:56,340
validated via the cleaned value so um so

00:06:53,940 --> 00:06:58,200
here's an example where I have a contact

00:06:56,340 --> 00:07:04,980
my contact form and I don't consider

00:06:58,200 --> 00:07:07,080
hotmail.com addresses valid so so I mean

00:07:04,980 --> 00:07:10,530
I could write this as a validator but

00:07:07,080 --> 00:07:14,640
this is a clean example so I have the

00:07:10,530 --> 00:07:16,590
clean email method I call clean I get

00:07:14,640 --> 00:07:17,400
the email out of clean to data clean to

00:07:16,590 --> 00:07:19,710
data is the dictionary that gets

00:07:17,400 --> 00:07:22,770
constructed as validation occurs and the

00:07:19,710 --> 00:07:25,170
values are processed they get added into

00:07:22,770 --> 00:07:26,820
this dictionary I check if it ends with

00:07:25,170 --> 00:07:30,030
hotmail comm and if it does I raise this

00:07:26,820 --> 00:07:31,620
validation error I then then at the end

00:07:30,030 --> 00:07:33,840
if I get all the way through here I

00:07:31,620 --> 00:07:35,190
still have to return the actual value

00:07:33,840 --> 00:07:38,070
from the dictionary and this is what

00:07:35,190 --> 00:07:40,290
winds up in cleaned data for the next

00:07:38,070 --> 00:07:46,050
step so the thing one another thing to

00:07:40,290 --> 00:07:48,420
note here is that this if this is a not

00:07:46,050 --> 00:07:50,580
a required field for example I might not

00:07:48,420 --> 00:07:53,160
have this this key in my cleans native

00:07:50,580 --> 00:07:55,830
dictionary or it might have been an

00:07:53,160 --> 00:07:57,600
empty value before and so using the get

00:07:55,830 --> 00:08:00,600
access actually wound up being a lot

00:07:57,600 --> 00:08:05,430
safer in most cases giving it some sort

00:08:00,600 --> 00:08:07,530
of saying default once the field

00:08:05,430 --> 00:08:08,580
validation has completed we we actually

00:08:07,530 --> 00:08:10,740
felt that the form as a whole and

00:08:08,580 --> 00:08:13,380
there's this clean method that probably

00:08:10,740 --> 00:08:14,730
everybody has used whose work with forms

00:08:13,380 --> 00:08:16,410
a little bit lets you do things that

00:08:14,730 --> 00:08:20,550
interactions between two different

00:08:16,410 --> 00:08:23,370
fields or more than one field and the

00:08:20,550 --> 00:08:25,350
errors that are raised by this method

00:08:23,370 --> 00:08:27,840
aren't those who aren't associated with

00:08:25,350 --> 00:08:30,510
a particular field by default so they're

00:08:27,840 --> 00:08:32,790
grouped into these non field errors an

00:08:30,510 --> 00:08:34,230
example of this might be if you want to

00:08:32,790 --> 00:08:35,910
require people to confirm their email

00:08:34,230 --> 00:08:37,590
address and they put it in you can't

00:08:35,910 --> 00:08:41,760
write this as a validator because you

00:08:37,590 --> 00:08:44,340
need access to both those fields and you

00:08:41,760 --> 00:08:45,900
that the collect the clean email method

00:08:44,340 --> 00:08:47,550
I showed you you can't assume you have

00:08:45,900 --> 00:08:49,340
any other fields at that point it's it's

00:08:47,550 --> 00:08:53,580
really only about that particular field

00:08:49,340 --> 00:08:54,390
so this this example just gets the email

00:08:53,580 --> 00:08:56,790
and become

00:08:54,390 --> 00:08:58,500
firm email value and raises an error if

00:08:56,790 --> 00:09:04,140
they don't if they aren't equal to each

00:08:58,500 --> 00:09:05,670
other again this has to return what is

00:09:04,140 --> 00:09:11,610
going to wind up in cleaned data at the

00:09:05,670 --> 00:09:13,800
very end in order for that to work so we

00:09:11,610 --> 00:09:15,360
I mentioned that you there's a initial

00:09:13,800 --> 00:09:18,030
data that you can give a form this is

00:09:15,360 --> 00:09:19,530
not the same as default data so you it

00:09:18,030 --> 00:09:21,690
might wind up coming back as a default

00:09:19,530 --> 00:09:24,570
from the user if you're doing HTML forms

00:09:21,690 --> 00:09:27,510
but just the fact of specifying it as an

00:09:24,570 --> 00:09:30,570
initial data does not populate it as

00:09:27,510 --> 00:09:32,730
clean today to default so um so it's

00:09:30,570 --> 00:09:34,380
safer when you're doing these accesses

00:09:32,730 --> 00:09:42,930
to make sure you specify what you

00:09:34,380 --> 00:09:44,220
expected a fault value to be something I

00:09:42,930 --> 00:09:46,740
found really useful as I started working

00:09:44,220 --> 00:09:49,200
on larger form projects that I didn't

00:09:46,740 --> 00:09:52,260
know was there initially was these has

00:09:49,200 --> 00:09:54,140
changed and changed fields so changed

00:09:52,260 --> 00:09:56,310
fields actually winds up giving you a

00:09:54,140 --> 00:09:58,800
list of all the fields that have changed

00:09:56,310 --> 00:09:59,880
from their initial values which is

00:09:58,800 --> 00:10:01,350
pretty handy especially when you're

00:09:59,880 --> 00:10:02,790
writing something that's crud like a

00:10:01,350 --> 00:10:06,030
crud application you want to write an

00:10:02,790 --> 00:10:09,660
edit interface it's handy to know what

00:10:06,030 --> 00:10:11,310
fields have changed or if you want to

00:10:09,660 --> 00:10:12,780
show specific messages that sort of

00:10:11,310 --> 00:10:16,230
thing the other thing you can do that's

00:10:12,780 --> 00:10:18,810
kind of interesting is you can add the

00:10:16,230 --> 00:10:21,810
show initial show hit an initial equal

00:10:18,810 --> 00:10:22,920
true to a field definition and then when

00:10:21,810 --> 00:10:24,240
you render it you're going to actually

00:10:22,920 --> 00:10:25,860
get two different input you're going to

00:10:24,240 --> 00:10:27,900
get the real input and you're gonna hit

00:10:25,860 --> 00:10:32,520
an input that gets used that word that

00:10:27,900 --> 00:10:33,990
has the initial value in it that initial

00:10:32,520 --> 00:10:35,310
that can be used now you know if you

00:10:33,990 --> 00:10:37,500
have a reset button on your form you

00:10:35,310 --> 00:10:40,080
want to do some JavaScript to show just

00:10:37,500 --> 00:10:44,640
think back to the the initial values or

00:10:40,080 --> 00:10:47,070
if you we use it occasionally where the

00:10:44,640 --> 00:10:48,450
initial value we start with it we don't

00:10:47,070 --> 00:10:50,010
want things to be flagged as changed and

00:10:48,450 --> 00:10:51,390
so we actually want to sort of slip a

00:10:50,010 --> 00:10:53,760
different initial value in there when it

00:10:51,390 --> 00:10:55,800
comes back and it's a slightly evil

00:10:53,760 --> 00:10:57,690
application but it actually works really

00:10:55,800 --> 00:11:00,210
well when you have multiple things that

00:10:57,690 --> 00:11:03,000
are interacting with one another so it

00:11:00,210 --> 00:11:05,120
lets you impact the way the processing

00:11:03,000 --> 00:11:05,120
happens

00:11:05,750 --> 00:11:13,009
so testing forms is something that I

00:11:08,420 --> 00:11:14,839
found really useful it's it's probably

00:11:13,009 --> 00:11:17,540
not it's not clear to me whether these

00:11:14,839 --> 00:11:19,189
are unit tests or system tests or

00:11:17,540 --> 00:11:20,540
integration tests but I do find them

00:11:19,189 --> 00:11:23,180
really useful to test the behavior that

00:11:20,540 --> 00:11:27,649
I expect to happen and they're also

00:11:23,180 --> 00:11:29,509
really useful for me in remembering or

00:11:27,649 --> 00:11:31,790
making sure my forms are kind of doing

00:11:29,509 --> 00:11:33,980
the right amount of work so if you

00:11:31,790 --> 00:11:36,829
remember what what is certain forms are

00:11:33,980 --> 00:11:39,560
for which is taking input two and turn

00:11:36,829 --> 00:11:41,420
it into Python objects that sort of

00:11:39,560 --> 00:11:44,120
guides you about what you might want to

00:11:41,420 --> 00:11:47,720
be testing what sort of situations and

00:11:44,120 --> 00:11:49,910
states are useful to test things like

00:11:47,720 --> 00:11:51,649
initial States the making sure that

00:11:49,910 --> 00:11:53,240
certain things cases that you expect to

00:11:51,649 --> 00:11:57,680
be invalid really are invalid could be

00:11:53,240 --> 00:11:59,149
useful the my experience has been that

00:11:57,680 --> 00:12:01,970
testing forms should be pretty

00:11:59,149 --> 00:12:03,199
straightforward and pretty easy and the

00:12:01,970 --> 00:12:05,899
cases where I've really struggled with

00:12:03,199 --> 00:12:08,209
it I've stepped been able to step back

00:12:05,899 --> 00:12:09,589
and realize oh my form is probably not

00:12:08,209 --> 00:12:11,600
actually constructed very well it

00:12:09,589 --> 00:12:13,100
probably is trying to do too much or

00:12:11,600 --> 00:12:15,889
depending on another part of the system

00:12:13,100 --> 00:12:18,139
too heavily so I would really I really

00:12:15,889 --> 00:12:20,089
encourage people to write test reforms

00:12:18,139 --> 00:12:26,059
because it kind of gives you a check on

00:12:20,089 --> 00:12:28,720
cohesion so the tests are pretty pretty

00:12:26,059 --> 00:12:32,209
sit this is a simple test that just

00:12:28,720 --> 00:12:35,120
tests our contact form and test that the

00:12:32,209 --> 00:12:36,949
that you know the giving it a name

00:12:35,120 --> 00:12:37,639
that's way too long is really going to

00:12:36,949 --> 00:12:41,149
be invalid

00:12:37,639 --> 00:12:43,430
so I constructed my dictionary of test

00:12:41,149 --> 00:12:46,730
data here and this would okay this is

00:12:43,430 --> 00:12:47,870
basically substitute this is um would

00:12:46,730 --> 00:12:50,500
come from the post you know if you're

00:12:47,870 --> 00:12:52,610
actually in a real requests situation

00:12:50,500 --> 00:12:55,279
pass it in just assert that it's not

00:12:52,610 --> 00:12:57,980
going to be valid so so you can see that

00:12:55,279 --> 00:13:01,250
for a small form this is pretty

00:12:57,980 --> 00:13:05,629
straightforward but for a larger form

00:13:01,250 --> 00:13:07,579
you can imagine there's the this could

00:13:05,629 --> 00:13:09,470
get pretty tedious writing all these

00:13:07,579 --> 00:13:13,250
fields out and writing out all the

00:13:09,470 --> 00:13:16,339
different initial values so we have to

00:13:13,250 --> 00:13:17,839
have a library that we that we split out

00:13:16,339 --> 00:13:19,580
from our code base and just actually

00:13:17,839 --> 00:13:22,700
just released this morning on github

00:13:19,580 --> 00:13:26,690
called rebar and rebar makes your forms

00:13:22,700 --> 00:13:28,580
stronger and there's a there's a testing

00:13:26,690 --> 00:13:29,930
part of that that has some helpers and

00:13:28,580 --> 00:13:31,940
one of them is called flat interdict and

00:13:29,930 --> 00:13:33,410
it can take a forum or a forum set we'll

00:13:31,940 --> 00:13:35,390
talk about later a model forum and

00:13:33,410 --> 00:13:36,440
basically it just takes the current

00:13:35,390 --> 00:13:38,360
state of it and flattens about two

00:13:36,440 --> 00:13:40,100
addicts so that if you have a very large

00:13:38,360 --> 00:13:44,870
forum you're working with this gives you

00:13:40,100 --> 00:13:46,160
a snapshot of your initial state and you

00:13:44,870 --> 00:13:47,630
say all you have to do is update them

00:13:46,160 --> 00:13:53,930
the values you're actually interested in

00:13:47,630 --> 00:13:55,610
for writing the test you know one of the

00:13:53,930 --> 00:13:57,950
promises of using a framework like

00:13:55,610 --> 00:13:59,060
Django is that it's going to do a lot of

00:13:57,950 --> 00:14:00,680
things for you it's going to make your

00:13:59,060 --> 00:14:03,680
life easier make it easier to get

00:14:00,680 --> 00:14:06,440
started and get things moving really

00:14:03,680 --> 00:14:08,750
quickly and I think forms are a big part

00:14:06,440 --> 00:14:10,370
of that in terms of rendering HTML as

00:14:08,750 --> 00:14:14,360
somebody who's primarily a back-end

00:14:10,370 --> 00:14:17,570
person my CSS skills are almost

00:14:14,360 --> 00:14:20,630
non-existent so mi na my HTML skills are

00:14:17,570 --> 00:14:22,940
not much better so I really like having

00:14:20,630 --> 00:14:24,230
these starting points but eventually if

00:14:22,940 --> 00:14:26,570
you're lucky enough to have your project

00:14:24,230 --> 00:14:28,370
live long enough you're gonna need to do

00:14:26,570 --> 00:14:31,640
things that are that are maybe not

00:14:28,370 --> 00:14:33,500
exactly how they're prescribed and out

00:14:31,640 --> 00:14:36,670
of the box and so I want to run through

00:14:33,500 --> 00:14:40,160
a few things that we found really useful

00:14:36,670 --> 00:14:42,320
in terms of starting points and then how

00:14:40,160 --> 00:14:46,430
you do how to take advantage of Django

00:14:42,320 --> 00:14:50,330
forms for rendering when when it's not

00:14:46,430 --> 00:14:52,550
just the stock situation so first of all

00:14:50,330 --> 00:14:54,290
a plug for class-based views I know this

00:14:52,550 --> 00:14:56,180
is not a class base to use talk but I

00:14:54,290 --> 00:14:58,100
just want to say that if you're trying

00:14:56,180 --> 00:15:03,020
to implement something that has the

00:14:58,100 --> 00:15:05,390
typical get post redirect behavior that

00:15:03,020 --> 00:15:07,340
the class-based views make this dead

00:15:05,390 --> 00:15:08,810
simple because all you do is give it a

00:15:07,340 --> 00:15:10,550
form class where you want to go

00:15:08,810 --> 00:15:12,170
afterward and then you can do something

00:15:10,550 --> 00:15:13,550
when it's valid or invalid but you don't

00:15:12,170 --> 00:15:18,340
even need need to do that if you don't

00:15:13,550 --> 00:15:24,200
want to so a plug for class-based views

00:15:18,340 --> 00:15:26,720
learn it live it love it so the there's

00:15:24,200 --> 00:15:29,720
three floors of there's three whole form

00:15:26,720 --> 00:15:31,820
output modes you can call that aren't

00:15:29,720 --> 00:15:33,230
kind of boring but they're useful for

00:15:31,820 --> 00:15:36,500
your first pass there's

00:15:33,230 --> 00:15:38,240
P as all and as table and those perform

00:15:36,500 --> 00:15:40,670
about like you'd expect them to you know

00:15:38,240 --> 00:15:43,750
as table gives you table rows with you

00:15:40,670 --> 00:15:45,620
chew your fields in it that's great but

00:15:43,750 --> 00:15:47,690
more often you're going to want to do

00:15:45,620 --> 00:15:50,600
things like iterate over them and apply

00:15:47,690 --> 00:15:52,700
your own HTML or your own layout so you

00:15:50,600 --> 00:15:54,440
can iterate over the forum like you'd

00:15:52,700 --> 00:15:57,170
expect to yeah and you get these bound

00:15:54,440 --> 00:15:59,210
fields back to have the values you can

00:15:57,170 --> 00:16:01,250
call there's a label tag method

00:15:59,210 --> 00:16:04,280
there's calling the feet or refereeing

00:16:01,250 --> 00:16:07,250
the field itself gives you the actual

00:16:04,280 --> 00:16:11,420
widget and then there's this field

00:16:07,250 --> 00:16:13,400
errors and field dot errors is populated

00:16:11,420 --> 00:16:21,020
from the from the validators and the

00:16:13,400 --> 00:16:24,050
clean field methods we saw earlier it uh

00:16:21,020 --> 00:16:25,940
so when you're showing a form for the

00:16:24,050 --> 00:16:27,320
first time it's going to be empty so

00:16:25,940 --> 00:16:29,660
that you won't see anything there but

00:16:27,320 --> 00:16:31,280
this will gives you a way to show your

00:16:29,660 --> 00:16:33,110
users what's going on and then there's

00:16:31,280 --> 00:16:34,970
the non feel there the non form errors

00:16:33,110 --> 00:16:37,180
actually should probably not feel

00:16:34,970 --> 00:16:41,270
there's probably a bug in my slides but

00:16:37,180 --> 00:16:44,710
this is the the this is the additional

00:16:41,270 --> 00:16:46,820
errors that can occur drink clean so

00:16:44,710 --> 00:16:49,040
there's actually a few libraries that

00:16:46,820 --> 00:16:49,990
have then are out that are available one

00:16:49,040 --> 00:16:53,180
called

00:16:49,990 --> 00:16:56,960
crispy forms and one called Django form

00:16:53,180 --> 00:16:59,810
utils that provide some base classes for

00:16:56,960 --> 00:17:01,660
your forms that make the that actually

00:16:59,810 --> 00:17:04,220
makes some of this even easier where

00:17:01,660 --> 00:17:05,780
it's going to apply something one of the

00:17:04,220 --> 00:17:07,370
think there's a one that works a

00:17:05,780 --> 00:17:11,240
rendering that works with Twitter

00:17:07,370 --> 00:17:14,450
bootstrap really well so there's there's

00:17:11,240 --> 00:17:16,010
a really rich ecosystem around map

00:17:14,450 --> 00:17:24,110
around you know making this easy for

00:17:16,010 --> 00:17:26,690
developers to render things so you can

00:17:24,110 --> 00:17:28,250
further so there's a few I've watched a

00:17:26,690 --> 00:17:30,860
couple a couple ways you can further

00:17:28,250 --> 00:17:33,320
customize rendering I told you about how

00:17:30,860 --> 00:17:34,970
you can override the widget when your

00:17:33,320 --> 00:17:36,560
declare a field you can also give it

00:17:34,970 --> 00:17:38,330
some matters so if you just need to

00:17:36,560 --> 00:17:41,210
apply particular class to the input

00:17:38,330 --> 00:17:43,310
that's pretty easy one I didn't know

00:17:41,210 --> 00:17:46,010
about was this error CSS class and

00:17:43,310 --> 00:17:46,790
required CSS class that you can find on

00:17:46,010 --> 00:17:49,670
the forum itself

00:17:46,790 --> 00:17:52,970
that's gonna apply those CSS classes to

00:17:49,670 --> 00:17:54,260
all the fields in your form so when they

00:17:52,970 --> 00:17:55,670
have errors they will give the error

00:17:54,260 --> 00:17:58,610
state and when they're required they'll

00:17:55,670 --> 00:17:59,780
get the required class and that's that's

00:17:58,610 --> 00:18:05,240
pretty handy when you're outputting the

00:17:59,780 --> 00:18:09,700
widgets the the form dot errors part of

00:18:05,240 --> 00:18:13,040
it by default is going to well I'm sorry

00:18:09,700 --> 00:18:15,950
this so the validators we saw have error

00:18:13,040 --> 00:18:18,110
messages so for a required field you

00:18:15,950 --> 00:18:20,270
might have a skills required that might

00:18:18,110 --> 00:18:22,400
not be what you want to show so there's

00:18:20,270 --> 00:18:26,090
this error messages dict all the

00:18:22,400 --> 00:18:28,270
built-in Django validators have a key

00:18:26,090 --> 00:18:30,140
about keys associated with the messages

00:18:28,270 --> 00:18:32,030
and I believe they use that for

00:18:30,140 --> 00:18:35,510
localization but you can also override

00:18:32,030 --> 00:18:39,860
it so you can give it your own your own

00:18:35,510 --> 00:18:41,260
you know field specific error message in

00:18:39,860 --> 00:18:43,310
that for that particular state without

00:18:41,260 --> 00:18:49,070
completely rewriting the validator or

00:18:43,310 --> 00:18:50,570
you know copy and pasting it so the form

00:18:49,070 --> 00:18:53,210
the field dot errors where you're

00:18:50,570 --> 00:18:54,530
showing those errors the those are

00:18:53,210 --> 00:18:56,240
wrapped and actually wrapped in a class

00:18:54,530 --> 00:18:57,500
that I wasn't really aware of this until

00:18:56,240 --> 00:18:59,450
I've been working with them for quite a

00:18:57,500 --> 00:19:01,640
while because you never really have to

00:18:59,450 --> 00:19:03,470
see it you can iterate over the errors

00:19:01,640 --> 00:19:06,140
if you want to you can you sort of get

00:19:03,470 --> 00:19:09,590
at them individually but at the heart

00:19:06,140 --> 00:19:13,160
there this error list output that is

00:19:09,590 --> 00:19:17,270
iterable and it uses a an unordered list

00:19:13,160 --> 00:19:18,770
as the tag for output int but instead of

00:19:17,270 --> 00:19:20,990
iterating over them yourself to

00:19:18,770 --> 00:19:22,970
re-render them you can actually specify

00:19:20,990 --> 00:19:25,460
your own error class that handles how

00:19:22,970 --> 00:19:28,100
you wrap the how you wrap the errors up

00:19:25,460 --> 00:19:30,500
for rendering so this is an example

00:19:28,100 --> 00:19:32,810
where I wrote a sort of an arbitrary one

00:19:30,500 --> 00:19:36,980
that subclasses error lists but instead

00:19:32,810 --> 00:19:39,740
of but adds and has paragraphs method to

00:19:36,980 --> 00:19:43,090
it that make gives me back my error

00:19:39,740 --> 00:19:46,790
messages in paragraphs as opposed to an

00:19:43,090 --> 00:19:49,430
unordered list and then when I call the

00:19:46,790 --> 00:19:52,130
gases to a Unicode I call as paragraphs

00:19:49,430 --> 00:19:55,220
as opposed to as UL so this is the way

00:19:52,130 --> 00:19:57,890
you can you can write a piece of code

00:19:55,220 --> 00:20:00,290
write a class that you pass into your

00:19:57,890 --> 00:20:00,860
field definitions and sort of define it

00:20:00,290 --> 00:20:03,320
in one play

00:20:00,860 --> 00:20:05,750
and reuse it throughout your application

00:20:03,320 --> 00:20:08,059
and throughout your forms so that you

00:20:05,750 --> 00:20:10,850
have consistent output it's hopefully

00:20:08,059 --> 00:20:16,159
easier for people to style when it comes

00:20:10,850 --> 00:20:17,960
out one other thing you might run into

00:20:16,159 --> 00:20:19,730
is when you have multiple forms on a

00:20:17,960 --> 00:20:23,330
page maybe have a search form as well as

00:20:19,730 --> 00:20:25,279
something else and you want to ensure

00:20:23,330 --> 00:20:29,750
that things are not or you want to have

00:20:25,279 --> 00:20:31,010
some greater confidence that the inputs

00:20:29,750 --> 00:20:33,620
will not collide and you'll get the

00:20:31,010 --> 00:20:36,380
right input for your form there's a

00:20:33,620 --> 00:20:38,899
prefix keyword are you can pass in when

00:20:36,380 --> 00:20:41,149
you construct the form and it just you

00:20:38,899 --> 00:20:43,279
see I might cot contact with the prefix

00:20:41,149 --> 00:20:44,840
and so you've had both the ID and the

00:20:43,279 --> 00:20:46,970
name when I render this form so this is

00:20:44,840 --> 00:20:49,250
this is actually used by other parts of

00:20:46,970 --> 00:20:52,970
Django under the hood for like form sets

00:20:49,250 --> 00:20:55,340
and form groups or perform sets and

00:20:52,970 --> 00:21:00,820
Weezer perform groups as well which

00:20:55,340 --> 00:21:00,820
we'll talk about in a bit thank you

00:21:02,000 --> 00:21:08,360
so there's model forms I'm actually

00:21:05,840 --> 00:21:11,720
gonna skip these right now because I'm

00:21:08,360 --> 00:21:16,309
just all my timecard but basically

00:21:11,720 --> 00:21:19,970
they're like forms but they is my one

00:21:16,309 --> 00:21:21,590
plug for Malta forms is forms take input

00:21:19,970 --> 00:21:23,539
and turn it into an object model forms

00:21:21,590 --> 00:21:25,970
just happen to turn it into a model

00:21:23,539 --> 00:21:30,260
instance as opposed to some other class

00:21:25,970 --> 00:21:33,590
that's really helpful but if you use

00:21:30,260 --> 00:21:35,539
them in a situation where you're maybe

00:21:33,590 --> 00:21:36,850
crossing different working of different

00:21:35,539 --> 00:21:39,289
models or working with different

00:21:36,850 --> 00:21:42,769
multiple copies of the model might not

00:21:39,289 --> 00:21:44,149
be exactly what you want so it's it's a

00:21:42,769 --> 00:21:52,639
they're a good starting point for that

00:21:44,149 --> 00:21:56,720
but you know and I'm actually so forum

00:21:52,639 --> 00:21:59,059
sets give you a way to put all the forms

00:21:56,720 --> 00:22:02,510
put multiple copies of a form on a on a

00:21:59,059 --> 00:22:05,110
on a particular page and these actually

00:22:02,510 --> 00:22:07,399
was really really really useful

00:22:05,110 --> 00:22:09,200
especially we have one edit like

00:22:07,399 --> 00:22:12,260
multiple contact records multiple of

00:22:09,200 --> 00:22:13,549
anything the one one trick is as of this

00:22:12,260 --> 00:22:14,559
management form that has some additional

00:22:13,549 --> 00:22:15,610
information

00:22:14,559 --> 00:22:17,860
you have to have that when you're

00:22:15,610 --> 00:22:20,799
processing or will not work that keeps

00:22:17,860 --> 00:22:22,570
track as isn't some accounting for you

00:22:20,799 --> 00:22:24,419
total number of forms that sort of thing

00:22:22,570 --> 00:22:27,340
and they basically have the same

00:22:24,419 --> 00:22:28,840
validation structure with where you loop

00:22:27,340 --> 00:22:31,389
over the forms on what I talked about

00:22:28,840 --> 00:22:35,440
earlier and then there's this form set

00:22:31,389 --> 00:22:37,120
clean at the very end this so here for

00:22:35,440 --> 00:22:39,850
example I have one where you can't have

00:22:37,120 --> 00:22:44,499
any names that are the same in a set of

00:22:39,850 --> 00:22:46,899
contact forms so here we just can't we

00:22:44,499 --> 00:22:50,769
kind of keep track of them and we raise

00:22:46,899 --> 00:22:56,350
an exception if if any duplicate names

00:22:50,769 --> 00:22:57,700
occur flat interdict works just fine for

00:22:56,350 --> 00:22:58,659
these this is actually one places is

00:22:57,700 --> 00:23:00,730
really helpful if you're trying to test

00:22:58,659 --> 00:23:03,999
a form set and there's also an empty

00:23:00,730 --> 00:23:06,759
form data helper that will generate a

00:23:03,999 --> 00:23:09,549
new one for you a new copy of the inner

00:23:06,759 --> 00:23:11,409
form for you so when you're testing it

00:23:09,549 --> 00:23:20,019
that rebar has a couple things can be

00:23:11,409 --> 00:23:21,879
really helpful there right so you can

00:23:20,019 --> 00:23:23,710
localize things this is awesome if

00:23:21,879 --> 00:23:27,009
you're doing international work use l10n

00:23:23,710 --> 00:23:29,169
is great it makes things like this like

00:23:27,009 --> 00:23:32,379
this work so that you have a date form

00:23:29,169 --> 00:23:35,379
that has a date localized PyCon ends on

00:23:32,379 --> 00:23:37,869
the 15th is true on the 15/3

00:23:35,379 --> 00:23:40,840
that's not valid but when I turn on the

00:23:37,869 --> 00:23:42,039
UK it is valid so this is actually super

00:23:40,840 --> 00:23:45,220
helpful for things like dates and

00:23:42,039 --> 00:23:49,749
numbers where you know that we're not

00:23:45,220 --> 00:23:51,490
all in the u.s. so forms are just

00:23:49,749 --> 00:23:52,710
syntactic sugar dynamic forms are

00:23:51,490 --> 00:23:58,119
actually really easy once you know this

00:23:52,710 --> 00:24:02,919
just we modify the fields property after

00:23:58,119 --> 00:24:06,940
in it under under in it finishes I don't

00:24:02,919 --> 00:24:09,039
um so we have a way in rebar that you

00:24:06,940 --> 00:24:10,389
can validate for interstates I'm not

00:24:09,039 --> 00:24:12,730
going to talk about it much because I'm

00:24:10,389 --> 00:24:14,529
about out of time but this is actually

00:24:12,730 --> 00:24:15,970
helpful when you have things are

00:24:14,529 --> 00:24:16,990
required to get from one state to

00:24:15,970 --> 00:24:20,080
another but you want people let people

00:24:16,990 --> 00:24:20,649
save in between so here you can see it's

00:24:20,080 --> 00:24:22,600
valid

00:24:20,649 --> 00:24:25,119
yes but developer publishing no and

00:24:22,600 --> 00:24:26,379
there's actually errors for this so I'm

00:24:25,119 --> 00:24:28,450
happy to talk to people afterward about

00:24:26,379 --> 00:24:30,159
that in particular

00:24:28,450 --> 00:24:34,239
that's the end all these slides are

00:24:30,159 --> 00:24:52,659
available at that URL and I'm happy to

00:24:34,239 --> 00:24:54,249
take questions I was wondering if you

00:24:52,659 --> 00:24:55,419
ever found yourself in a situation where

00:24:54,249 --> 00:24:57,840
you have to create your own custom

00:24:55,419 --> 00:24:59,830
widget because maybe you had you know

00:24:57,840 --> 00:25:01,479
particular markup that you needed and

00:24:59,830 --> 00:25:04,690
what are your experiences was with that

00:25:01,479 --> 00:25:06,460
um yeah so we we have done custom

00:25:04,690 --> 00:25:11,590
widgets and had to do custom widgets in

00:25:06,460 --> 00:25:13,149
the past and I find it helpful to first

00:25:11,590 --> 00:25:15,399
try and figure out if I can just

00:25:13,149 --> 00:25:16,960
subclass one and change maybe maybe if I

00:25:15,399 --> 00:25:19,690
don't want to rewrite the adders for

00:25:16,960 --> 00:25:21,849
example in every case or customize the

00:25:19,690 --> 00:25:23,679
keyboard args that it lets me do out of

00:25:21,849 --> 00:25:25,929
the box you might consider to

00:25:23,679 --> 00:25:29,080
subclassing it and making those the

00:25:25,929 --> 00:25:31,690
defaults it there actually there's

00:25:29,080 --> 00:25:34,269
actually not a whole lot of magic to to

00:25:31,690 --> 00:25:36,279
to writing widgets especially if you

00:25:34,269 --> 00:25:40,659
have a base one that you can start with

00:25:36,279 --> 00:25:43,869
and the Django forms the some of the

00:25:40,659 --> 00:25:46,299
forms packages like the form sets and

00:25:43,869 --> 00:25:47,559
the model form sets there's metaclasses

00:25:46,299 --> 00:25:49,960
involved and they're kind of magical

00:25:47,559 --> 00:25:51,369
well they take a little bit inspection

00:25:49,960 --> 00:25:53,080
but the fields and widgets actually are

00:25:51,369 --> 00:25:56,970
pretty straightforward when if you look

00:25:53,080 --> 00:26:00,039
at those so it's pretty easy to do

00:25:56,970 --> 00:26:02,859
hi thanks for the talk I have a question

00:26:00,039 --> 00:26:06,399
about integrating Django forms with

00:26:02,859 --> 00:26:07,899
backbone js4 dynamic okay JavaScript do

00:26:06,399 --> 00:26:09,609
you have any suggestions or ideas that's

00:26:07,899 --> 00:26:11,559
kind of a challenge for us can you say

00:26:09,609 --> 00:26:13,840
more about what the challenge for

00:26:11,559 --> 00:26:15,820
example like and using like an

00:26:13,840 --> 00:26:17,289
underscore templating system like how do

00:26:15,820 --> 00:26:19,210
you how do you get your forms on the

00:26:17,289 --> 00:26:21,509
page properly think just ideas and how

00:26:19,210 --> 00:26:24,039
we can work around problems like that

00:26:21,509 --> 00:26:26,950
you know I don't have I actually have

00:26:24,039 --> 00:26:29,619
next to no experience with backbone but

00:26:26,950 --> 00:26:32,889
a colleague of mine who is here does and

00:26:29,619 --> 00:26:34,659
maybe he would be willing to chat with

00:26:32,889 --> 00:26:37,659
you a little bit after and he worked on

00:26:34,659 --> 00:26:39,789
some projects with me on forms and so he

00:26:37,659 --> 00:26:40,490
he could probably answer that better I

00:26:39,789 --> 00:26:45,200
can't after the

00:26:40,490 --> 00:26:47,660
all right great thanks hey do you have

00:26:45,200 --> 00:26:57,350
any suggestions for testing forms with

00:26:47,660 --> 00:26:58,640
file uploads do I know I don't don't do

00:26:57,350 --> 00:27:02,360
it okay

00:26:58,640 --> 00:27:03,710
I mean it yeah I we I've not had to do a

00:27:02,360 --> 00:27:06,320
lot of file up but works that's actually

00:27:03,710 --> 00:27:12,410
a sort of a blind spot in my forms

00:27:06,320 --> 00:27:14,830
knowledge but yeah I guess you just

00:27:12,410 --> 00:27:17,570
seems like you just about have to have a

00:27:14,830 --> 00:27:19,970
do some some extensive faking or mocking

00:27:17,570 --> 00:27:21,830
to to give it the data it that it

00:27:19,970 --> 00:27:24,500
expected the test validation give it

00:27:21,830 --> 00:27:26,420
some here's a file in my fixtures I want

00:27:24,500 --> 00:27:28,460
to see if I can trigger any extra

00:27:26,420 --> 00:27:31,610
validation and see what it Django ends

00:27:28,460 --> 00:27:32,780
up doing with the file I don't know that

00:27:31,610 --> 00:27:34,520
would actually be religiously that'd be

00:27:32,780 --> 00:27:35,900
really interesting to try and see if

00:27:34,520 --> 00:27:36,860
there's a or what the pain points

00:27:35,900 --> 00:27:41,200
actually are cuz I've never I've never

00:27:36,860 --> 00:27:41,200
actually tried it so I don't know sorry

00:27:41,770 --> 00:27:45,309

YouTube URL: https://www.youtube.com/watch?v=Wh9a0obtQUQ


