Title: Deep Freeze: building better stand-alone apps with Python
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Ryan Kelly
There's more to shipping a stand-alone python app than just running py2exe over your code.  Want to deploy automatic updates?  Want to be sure it runs on legacy platforms?  Want to add professional touches like code signing?  And want to d
Captions: 
	00:00:00,000 --> 00:00:06,480
all right okay everyone welcome to track

00:00:02,909 --> 00:00:09,059
1 we got there eventually first up we

00:00:06,480 --> 00:00:11,759
have Ryan Kelly talking about deep

00:00:09,059 --> 00:00:14,759
freeze or building better stone

00:00:11,759 --> 00:00:16,650
standalone apps with Python this is a 30

00:00:14,759 --> 00:00:19,859
minute talk although we're running a bit

00:00:16,650 --> 00:00:23,100
late with a five-minute allocation for

00:00:19,859 --> 00:00:24,960
questions we'll see how we go

00:00:23,100 --> 00:00:31,349
please welcome Ryan Kelly we'll get

00:00:24,960 --> 00:00:32,730
going hi so sorry for the delay and for

00:00:31,349 --> 00:00:35,520
the fiddling I think some of the

00:00:32,730 --> 00:00:36,770
resolution options I have like four

00:00:35,520 --> 00:00:40,730
different things that I want to show you

00:00:36,770 --> 00:00:43,489
will cope say yes I'm Ryan this is my

00:00:40,730 --> 00:00:46,980
contact details here and until recently

00:00:43,489 --> 00:00:50,370
I was trying to get a small software

00:00:46,980 --> 00:00:52,800
startup off the ground and like I'm

00:00:50,370 --> 00:00:54,480
going to assume at least a few other

00:00:52,800 --> 00:00:55,800
people at this conference we did a

00:00:54,480 --> 00:00:58,469
pretty good job of building some

00:00:55,800 --> 00:01:00,510
interesting technology and we kind of

00:00:58,469 --> 00:01:02,250
sucked at the step where you get other

00:01:00,510 --> 00:01:06,600
people to exchange that technology for

00:01:02,250 --> 00:01:08,369
money so I now have a very nice salaried

00:01:06,600 --> 00:01:10,439
job with Mozilla which is great because

00:01:08,369 --> 00:01:12,510
I can feed my family but I don't want to

00:01:10,439 --> 00:01:14,490
use that as an excuse to let the stuff

00:01:12,510 --> 00:01:16,170
that we built and the lessons that we

00:01:14,490 --> 00:01:19,409
learn kind of wither and die in a corner

00:01:16,170 --> 00:01:20,790
somewhere so I'm going to show you some

00:01:19,409 --> 00:01:23,820
of the lessons that we learned and the

00:01:20,790 --> 00:01:26,119
tools that we built I think today part

00:01:23,820 --> 00:01:28,590
of what we were doing was an old-school

00:01:26,119 --> 00:01:30,030
software application right not a web app

00:01:28,590 --> 00:01:32,340
or anything like there's a piece of code

00:01:30,030 --> 00:01:32,939
that you get and you run on your

00:01:32,340 --> 00:01:36,930
computer

00:01:32,939 --> 00:01:39,570
remember those Python as an interpreted

00:01:36,930 --> 00:01:41,759
language has quite remarkably good

00:01:39,570 --> 00:01:43,200
support for building these sorts of

00:01:41,759 --> 00:01:46,799
applications right we have tools like PI

00:01:43,200 --> 00:01:48,869
to exe PI to app CX freeze who's who's

00:01:46,799 --> 00:01:51,990
used one of these tools in the audience

00:01:48,869 --> 00:01:53,790
cool most people ok and I'll give you a

00:01:51,990 --> 00:01:56,909
quick demo so that we're all on the same

00:01:53,790 --> 00:01:59,490
page and then I've got somewhere to go

00:01:56,909 --> 00:02:01,969
with it so this is a world changing

00:01:59,490 --> 00:02:03,990
program that reads in an integer n

00:02:01,969 --> 00:02:05,700
multiplies together all of the numbers

00:02:03,990 --> 00:02:09,420
from 1 to n and prints out the factorial

00:02:05,700 --> 00:02:11,250
ok I can run that as a Python script and

00:02:09,420 --> 00:02:13,770
it'll give me an appropriately big

00:02:11,250 --> 00:02:15,180
number but I want to put this program on

00:02:13,770 --> 00:02:17,730
every desk in every office in the world

00:02:15,180 --> 00:02:20,640
and I can't tell all those people to say

00:02:17,730 --> 00:02:22,890
well first go to WWE 13 org click on

00:02:20,640 --> 00:02:25,860
downloads select you know it's not going

00:02:22,890 --> 00:02:27,840
to work out so what we do is write a

00:02:25,860 --> 00:02:28,920
little setup file we say you know this

00:02:27,840 --> 00:02:31,680
is the name of my app it's at

00:02:28,920 --> 00:02:36,720
such-and-such a version and we one run a

00:02:31,680 --> 00:02:38,070
freezer tool such as pi 2 Exe it has a

00:02:36,720 --> 00:02:40,050
look at my scripts it has a look at my

00:02:38,070 --> 00:02:42,060
code it traces all of the imports and

00:02:40,050 --> 00:02:44,880
dependencies and bundles them all

00:02:42,060 --> 00:02:48,870
together into a standalone distribution

00:02:44,880 --> 00:02:51,090
I now have factorial that exe that I can

00:02:48,870 --> 00:02:52,920
run and get the same result but I could

00:02:51,090 --> 00:02:54,330
take that and give it to someone who

00:02:52,920 --> 00:02:56,370
doesn't know anything about Python and

00:02:54,330 --> 00:03:00,060
they can just run it like an application

00:02:56,370 --> 00:03:03,270
so that's freezing and Python has pretty

00:03:00,060 --> 00:03:05,460
good support for it really and if that

00:03:03,270 --> 00:03:06,960
was all we had to do to distribute

00:03:05,460 --> 00:03:09,690
standalone apps in Python this would be

00:03:06,960 --> 00:03:11,160
a very short talk but that's really only

00:03:09,690 --> 00:03:15,150
just the beginning there's a long way to

00:03:11,160 --> 00:03:16,950
go from this to something that your

00:03:15,150 --> 00:03:19,500
users would recognize as a standalone

00:03:16,950 --> 00:03:20,850
application or as a you know I hesitate

00:03:19,500 --> 00:03:22,170
to use the word professional but a

00:03:20,850 --> 00:03:27,300
professional quality software

00:03:22,170 --> 00:03:32,880
application so well that was the mic do

00:03:27,300 --> 00:03:35,820
a demo slide the problem with with doing

00:03:32,880 --> 00:03:37,140
extra stuff and all of the little extra

00:03:35,820 --> 00:03:39,840
bits and pieces that you need to do to

00:03:37,140 --> 00:03:42,030
build applications is that build tools

00:03:39,840 --> 00:03:43,440
aren't the coolest thing to work on you

00:03:42,030 --> 00:03:45,750
know we weren't supposed to be building

00:03:43,440 --> 00:03:47,970
a build tool chain were supposed to be

00:03:45,750 --> 00:03:49,709
developing an application so people tend

00:03:47,970 --> 00:03:51,450
to hack on stuff until they get it

00:03:49,709 --> 00:03:53,190
giving the result that they want and

00:03:51,450 --> 00:03:54,330
then they step away from it in case it

00:03:53,190 --> 00:03:56,190
breaks and they have to spend another

00:03:54,330 --> 00:03:59,040
week fixing all those problems again

00:03:56,190 --> 00:04:01,440
right and the other problem is that we

00:03:59,040 --> 00:04:03,510
tend to suffer alone once you've figured

00:04:01,440 --> 00:04:06,090
out the basics of running PI to exe and

00:04:03,510 --> 00:04:07,500
you need to kind of dig deeper and do

00:04:06,090 --> 00:04:09,780
all the little fiddly things to get your

00:04:07,500 --> 00:04:11,190
application ready it's like wandering

00:04:09,780 --> 00:04:12,959
alone in the cold wilderness you know

00:04:11,190 --> 00:04:15,270
there might be a blog post or a recipe

00:04:12,959 --> 00:04:16,590
or a question on Stack Overflow but you

00:04:15,270 --> 00:04:20,040
know there's not a lot of comprehensive

00:04:16,590 --> 00:04:21,570
tooling for taking the output of one of

00:04:20,040 --> 00:04:24,030
these Freeza programs and just turning

00:04:21,570 --> 00:04:25,690
it into something you know that you can

00:04:24,030 --> 00:04:29,560
ship to end-users

00:04:25,690 --> 00:04:31,060
so a bit about what we were building we

00:04:29,560 --> 00:04:33,250
basically have this idea that we'd make

00:04:31,060 --> 00:04:35,320
some software you'd put it on your USB

00:04:33,250 --> 00:04:38,350
stick and it would connect you to the

00:04:35,320 --> 00:04:40,660
cloud right so instead of your USB stick

00:04:38,350 --> 00:04:43,300
being four gigabytes of pretty fragile

00:04:40,660 --> 00:04:44,800
storage it would have magic software on

00:04:43,300 --> 00:04:47,560
it that would turn it into infinitely

00:04:44,800 --> 00:04:50,680
big backed up an encrypted cloud-based

00:04:47,560 --> 00:04:51,970
storage I'm not here to sell you that

00:04:50,680 --> 00:04:54,190
today I'm here to tell you that trying

00:04:51,970 --> 00:04:56,220
to build software to run on that USB

00:04:54,190 --> 00:04:58,750
stick is software deployment hell

00:04:56,220 --> 00:05:02,500
because you need to be able to walk up

00:04:58,750 --> 00:05:04,300
to a Linux box some are you know Mac

00:05:02,500 --> 00:05:06,310
that somebody's got lying around a brand

00:05:04,300 --> 00:05:07,300
new Windows 7 machine plug it in and

00:05:06,310 --> 00:05:10,450
have something on there that's got a

00:05:07,300 --> 00:05:12,160
good chance of running so I have a lot

00:05:10,450 --> 00:05:14,590
of tales to tell about this sort of

00:05:12,160 --> 00:05:16,960
thing and I want to share three tools

00:05:14,590 --> 00:05:19,180
that we built along the way so basically

00:05:16,960 --> 00:05:22,000
what I'm gonna do is three very badly

00:05:19,180 --> 00:05:24,160
segwayed lightning talks about these

00:05:22,000 --> 00:05:25,810
three tools and then if we have time at

00:05:24,160 --> 00:05:29,710
the end for questions we can dive in a

00:05:25,810 --> 00:05:34,300
bit deeper so step number one who

00:05:29,710 --> 00:05:35,680
noticed the bug in this program I was

00:05:34,300 --> 00:05:36,550
kind of expecting someone to pull me up

00:05:35,680 --> 00:05:45,460
on it right away

00:05:36,550 --> 00:05:47,290
not that program this program anybody so

00:05:45,460 --> 00:05:49,060
the arguments for X range should go up

00:05:47,290 --> 00:05:51,300
to n plus one this is actually

00:05:49,060 --> 00:05:55,419
calculating the wrong factorial right so

00:05:51,300 --> 00:05:57,250
the factorial 6 is not 120 if I only

00:05:55,419 --> 00:06:00,610
we've thought ahead to the fact that

00:05:57,250 --> 00:06:02,440
we'd have bugs and added some sort of

00:06:00,610 --> 00:06:03,820
automatic updating framework to our

00:06:02,440 --> 00:06:06,370
frozen app right so that's what I'm

00:06:03,820 --> 00:06:08,830
gonna do for you right now I'm gonna use

00:06:06,370 --> 00:06:11,020
a little package called S key and

00:06:08,830 --> 00:06:13,480
basically this is the minimum amount of

00:06:11,020 --> 00:06:15,310
code you have to do you have to point it

00:06:13,480 --> 00:06:17,560
at where your frozen executable is

00:06:15,310 --> 00:06:19,300
sitting and you have to say hey go to

00:06:17,560 --> 00:06:22,210
this URL and that's where you look for

00:06:19,300 --> 00:06:24,250
updates and then this is a little helper

00:06:22,210 --> 00:06:26,470
function that does the whole search for

00:06:24,250 --> 00:06:29,380
updates download them install them and

00:06:26,470 --> 00:06:32,260
so forth I'm going to change my setup PI

00:06:29,380 --> 00:06:35,970
file to run a command from S key instead

00:06:32,260 --> 00:06:35,970
of from part to exe and I'm gonna

00:06:41,460 --> 00:06:45,639
now if that looks very similar to what

00:06:43,780 --> 00:06:47,169
prior to exe did it's because it's

00:06:45,639 --> 00:06:48,610
actually calling party XD under the hood

00:06:47,169 --> 00:06:51,490
and it's just adding a little bit of

00:06:48,610 --> 00:06:53,169
extra stuff so that instead of just a

00:06:51,490 --> 00:06:56,020
bunch of executables and dll's you get

00:06:53,169 --> 00:06:58,720
this nice little zip file if I were to

00:06:56,020 --> 00:07:00,370
put that little zip file up on a web

00:06:58,720 --> 00:07:08,650
server somewhere which I'm going to now

00:07:00,370 --> 00:07:11,380
do by doing this I'd be able to use that

00:07:08,650 --> 00:07:15,389
to update a running instance of my

00:07:11,380 --> 00:07:20,169
application go away in those things okay

00:07:15,389 --> 00:07:21,789
it is also just your application you can

00:07:20,169 --> 00:07:23,710
unzip it and it's ready to run and I

00:07:21,789 --> 00:07:25,660
have factorial that Exe and it still

00:07:23,710 --> 00:07:27,009
gives me the same wrong answer but

00:07:25,660 --> 00:07:29,889
you'll notice that each time I run that

00:07:27,009 --> 00:07:31,330
it's hitting my web server looking for

00:07:29,889 --> 00:07:36,090
updates not finding any but it's looking

00:07:31,330 --> 00:07:41,370
for updates so if I go in and fix that

00:07:36,090 --> 00:07:41,370
not factorial the exe the pie

00:07:47,800 --> 00:07:51,849
build a new version there's the same

00:07:49,960 --> 00:07:56,560
thing freezes up my up into a standalone

00:07:51,849 --> 00:08:00,729
package and I now have I didn't change

00:07:56,560 --> 00:08:03,160
the version number this is why you don't

00:08:00,729 --> 00:08:08,849
try and do live examples after you've

00:08:03,160 --> 00:08:08,849
just fiddled around with your AV setup

00:08:09,060 --> 00:08:16,900
now I have a new version and if I run my

00:08:12,550 --> 00:08:18,280
program again it's gonna find it it's

00:08:16,900 --> 00:08:21,310
going to fetch it it's going to install

00:08:18,280 --> 00:08:25,509
it and I'm now getting the correct

00:08:21,310 --> 00:08:26,919
answer so that's s key in a nutshell it

00:08:25,509 --> 00:08:28,599
has a lot of extra stuff in there that I

00:08:26,919 --> 00:08:30,970
won't dive into but I want to point out

00:08:28,599 --> 00:08:37,300
a couple of quick things you might

00:08:30,970 --> 00:08:38,409
notice that these it files are pretty

00:08:37,300 --> 00:08:41,950
big because I've got a whole set of

00:08:38,409 --> 00:08:43,599
paths and stuff in there S key is

00:08:41,950 --> 00:08:47,200
capable of building nice little patches

00:08:43,599 --> 00:08:48,720
for you and updating itself from them as

00:08:47,200 --> 00:08:51,520
you can see they're quite a bit smaller

00:08:48,720 --> 00:08:56,290
the other neat thing about it is that if

00:08:51,520 --> 00:08:59,320
I were to run this from over here where

00:08:56,290 --> 00:09:00,520
I don't actually have write access it

00:08:59,320 --> 00:09:03,430
knows how to prompt me for my

00:09:00,520 --> 00:09:05,310
credentials do the little UAC dance or

00:09:03,430 --> 00:09:10,270
whatever you need on other platforms and

00:09:05,310 --> 00:09:12,310
install the updates that way so that's s

00:09:10,270 --> 00:09:15,070
key it's a nice little framework for

00:09:12,310 --> 00:09:16,839
doing automatic updates it's not another

00:09:15,070 --> 00:09:18,250
freezer module all right you can use

00:09:16,839 --> 00:09:19,750
this on top of whatever you're already

00:09:18,250 --> 00:09:22,990
currently using it just adds a little

00:09:19,750 --> 00:09:25,930
bit of extra structure to to the output

00:09:22,990 --> 00:09:28,029
executable yeah you also don't just have

00:09:25,930 --> 00:09:29,980
to take the the auto update function

00:09:28,029 --> 00:09:32,140
that I've given you it has a lot of

00:09:29,980 --> 00:09:34,270
little utility functions to say alright

00:09:32,140 --> 00:09:36,850
I find me an update is there an update

00:09:34,270 --> 00:09:38,560
well I can go into my GUI and prompt the

00:09:36,850 --> 00:09:40,810
user if they want to install it and

00:09:38,560 --> 00:09:43,660
various things like that so it aims to

00:09:40,810 --> 00:09:46,089
be a platform for you to build whatever

00:09:43,660 --> 00:09:48,390
you know update process is appropriate

00:09:46,089 --> 00:09:48,390
for your application

00:09:48,870 --> 00:09:53,290
I'll make this point quicker than I

00:09:50,860 --> 00:09:56,230
intended to but Eskie tries very very

00:09:53,290 --> 00:09:58,810
hard not to break your application

00:09:56,230 --> 00:10:00,650
you know if the power goes out or if the

00:09:58,810 --> 00:10:01,700
user does something silly like

00:10:00,650 --> 00:10:05,650
out of your app in the middle of an

00:10:01,700 --> 00:10:08,240
update or stuff like that s key has a

00:10:05,650 --> 00:10:11,120
very carefully choreographed dance off

00:10:08,240 --> 00:10:13,130
atomic renames and removals of

00:10:11,120 --> 00:10:15,950
directories and so forth to ensure that

00:10:13,130 --> 00:10:17,420
at every step of the process some

00:10:15,950 --> 00:10:19,790
version of your application remains

00:10:17,420 --> 00:10:20,900
usable it may not be the one that you're

00:10:19,790 --> 00:10:23,090
in the middle of updating but you've got

00:10:20,900 --> 00:10:26,060
something that you can run with a small

00:10:23,090 --> 00:10:28,580
caveat that on some platforms that lack

00:10:26,060 --> 00:10:30,620
atomic replacement of files there is a

00:10:28,580 --> 00:10:32,360
single two step danger window if you

00:10:30,620 --> 00:10:34,580
change kind of the basics of your

00:10:32,360 --> 00:10:40,030
application not your code but you know

00:10:34,580 --> 00:10:42,860
in Python or PI 2 XE or or s key ok

00:10:40,030 --> 00:10:44,450
number two I'll do a lot quicker than I

00:10:42,860 --> 00:10:48,200
intended because I'm a bit short on time

00:10:44,450 --> 00:10:50,450
but you will have noticed if I go into

00:10:48,200 --> 00:10:52,640
here and when I was running that program

00:10:50,450 --> 00:10:54,470
and was popping up this dialog like

00:10:52,640 --> 00:10:56,900
that's a pretty unfriendly dialogue

00:10:54,470 --> 00:10:58,520
right that's windows telling me hey I

00:10:56,900 --> 00:10:59,840
don't know what this software is you run

00:10:58,520 --> 00:11:01,490
it at your own risk and you don't want

00:10:59,840 --> 00:11:05,120
that in your applications what's the

00:11:01,490 --> 00:11:07,790
solution to that anybody sign your code

00:11:05,120 --> 00:11:10,310
right and so we have this cool thing

00:11:07,790 --> 00:11:15,190
called sign tool if I can remember the

00:11:10,310 --> 00:11:17,600
appropriate alright so I can sign that

00:11:15,190 --> 00:11:18,950
and now I get a nice friendly hey you

00:11:17,600 --> 00:11:20,600
know this code is produced by a cloud

00:11:18,950 --> 00:11:24,290
matrix proprietary limited this is safe

00:11:20,600 --> 00:11:26,030
to run correct the problem with frozen

00:11:24,290 --> 00:11:28,280
Python apps is that that nice little

00:11:26,030 --> 00:11:30,680
this code is sign thing is a filthy

00:11:28,280 --> 00:11:33,080
filthy lie because the code that I'm

00:11:30,680 --> 00:11:35,720
running isn't in factorial that exe it's

00:11:33,080 --> 00:11:40,580
in this library dot 0 and if I were to

00:11:35,720 --> 00:11:44,150
copy something evil in there like this

00:11:40,580 --> 00:11:46,220
evil library doc zip I will still get

00:11:44,150 --> 00:11:49,250
this hey everything's fine this guy's

00:11:46,220 --> 00:11:51,500
going to do what you expect except that

00:11:49,250 --> 00:11:53,960
it's gonna launch a route process and

00:11:51,500 --> 00:11:55,730
create files on my hard drive and that's

00:11:53,960 --> 00:11:59,390
not cool don't lie to your users like

00:11:55,730 --> 00:12:02,510
that so I built a library called sign

00:11:59,390 --> 00:12:05,510
demon which does basically verification

00:12:02,510 --> 00:12:07,970
of imports you create an import hook and

00:12:05,510 --> 00:12:09,890
you put it on sister path and you go

00:12:07,970 --> 00:12:11,210
through all of the system meta parser

00:12:09,890 --> 00:12:12,810
you go through all the directories on

00:12:11,210 --> 00:12:15,300
Cisco path

00:12:12,810 --> 00:12:16,530
and you create a little signed manifest

00:12:15,300 --> 00:12:19,110
file that says what they're supposed to

00:12:16,530 --> 00:12:22,290
look like and the import who basically

00:12:19,110 --> 00:12:25,170
checks that everything's okay of course

00:12:22,290 --> 00:12:27,870
you can't use this input hook to verify

00:12:25,170 --> 00:12:30,390
itself right so it also has some little

00:12:27,870 --> 00:12:32,040
tools to hack itself into your

00:12:30,390 --> 00:12:34,020
executable directly and get around this

00:12:32,040 --> 00:12:36,440
bootstrapping problem so I'll show you

00:12:34,020 --> 00:12:36,440
that real quick

00:12:48,040 --> 00:12:52,640
so that's generating just a random key

00:12:50,810 --> 00:12:54,380
because it's going to be tied to the the

00:12:52,640 --> 00:12:57,530
signed executable it's going through its

00:12:54,380 --> 00:12:59,270
signing all of the the files and

00:12:57,530 --> 00:13:04,760
everything in my frozen application and

00:12:59,270 --> 00:13:06,590
now if I copy that unsigned you know

00:13:04,760 --> 00:13:08,930
evil library back in there and I try to

00:13:06,590 --> 00:13:09,710
run it's gonna give me an error

00:13:08,930 --> 00:13:13,640
something's not right

00:13:09,710 --> 00:13:15,950
yeah this all comes with one very big

00:13:13,640 --> 00:13:17,930
caveat that I now don't have time to do

00:13:15,950 --> 00:13:21,440
my customary use at your own risk

00:13:17,930 --> 00:13:23,060
spiel on it but this is you know

00:13:21,440 --> 00:13:27,650
everything that security experts tell

00:13:23,060 --> 00:13:30,260
you not to do I believe that none of the

00:13:27,650 --> 00:13:32,870
existing kind of how you use Pisa or use

00:13:30,260 --> 00:13:34,460
open SSL or something like that is not

00:13:32,870 --> 00:13:36,260
particularly applicable when you need to

00:13:34,460 --> 00:13:38,120
jam something into the path and

00:13:36,260 --> 00:13:39,380
executable itself but I'd love to talk

00:13:38,120 --> 00:13:42,290
to people who think this is interesting

00:13:39,380 --> 00:13:43,580
and have better ways to do it but for

00:13:42,290 --> 00:13:45,470
the moment at least I don't have to lie

00:13:43,580 --> 00:13:47,300
to my users I can say this is you know

00:13:45,470 --> 00:13:49,490
this code is running what I intend it to

00:13:47,300 --> 00:13:55,040
run to the best of my ability to ensure

00:13:49,490 --> 00:14:00,440
that and number three if I can finally

00:13:55,040 --> 00:14:02,300
appropriate which it has my time that's

00:14:00,440 --> 00:14:03,980
all right that's plenty of time I'm

00:14:02,300 --> 00:14:06,410
gonna get off Windows now because one

00:14:03,980 --> 00:14:09,950
thing that Windows gets really really

00:14:06,410 --> 00:14:13,370
right is binary compatibility here's an

00:14:09,950 --> 00:14:15,770
example from another linux world so this

00:14:13,370 --> 00:14:18,140
is a hello world app using some GUI

00:14:15,770 --> 00:14:21,320
libraries and so forth and I can run

00:14:18,140 --> 00:14:25,430
that like this and it'll pop up a little

00:14:21,320 --> 00:14:29,210
window after it gets through loading QT

00:14:25,430 --> 00:14:31,790
which takes forever if I freeze that up

00:14:29,210 --> 00:14:34,850
just using my normal system Python I'll

00:14:31,790 --> 00:14:38,060
get a distribution like before I can run

00:14:34,850 --> 00:14:40,850
it like before and and everything works

00:14:38,060 --> 00:14:45,980
fine on this machine if I then go and

00:14:40,850 --> 00:14:50,180
visit where am I here we are a different

00:14:45,980 --> 00:14:53,350
Linux machine and I try to run that

00:14:50,180 --> 00:14:56,210
frozen executable that I just did then

00:14:53,350 --> 00:14:57,770
I'm gonna get a very nasty error because

00:14:56,210 --> 00:14:59,960
this Linux machine has a different set

00:14:57,770 --> 00:15:01,130
of base libraries it's got different

00:14:59,960 --> 00:15:02,540
symbols in it

00:15:01,130 --> 00:15:04,490
my partner has no idea what how to deal

00:15:02,540 --> 00:15:05,770
with that right and so if you talk to

00:15:04,490 --> 00:15:11,840
people about this problem

00:15:05,770 --> 00:15:13,430
they say interesting things well how do

00:15:11,840 --> 00:15:15,230
you build a portable app so Wow I have a

00:15:13,430 --> 00:15:16,610
virtual machine and it runs this old

00:15:15,230 --> 00:15:18,260
version of Red Hat and I do on my

00:15:16,610 --> 00:15:19,880
building in there I have an old Mac and

00:15:18,260 --> 00:15:23,630
you know I do all of my Mac building in

00:15:19,880 --> 00:15:25,460
there which is fine you can ship apps

00:15:23,630 --> 00:15:27,530
that way but it makes me very

00:15:25,460 --> 00:15:29,540
uncomfortable right it's it's it's a

00:15:27,530 --> 00:15:30,890
little too magic I don't like things

00:15:29,540 --> 00:15:33,230
that I don't understand and can't

00:15:30,890 --> 00:15:35,360
necessarily repeat so if you need your

00:15:33,230 --> 00:15:37,040
Python built in a certain way you should

00:15:35,360 --> 00:15:39,020
have a script that you can run that

00:15:37,040 --> 00:15:42,470
builds your Python in a certain way so

00:15:39,020 --> 00:15:44,960
maybe make you a portable Python okay

00:15:42,470 --> 00:15:47,360
and this is basically what virtual end

00:15:44,960 --> 00:15:49,730
would be if virtual and compiled every

00:15:47,360 --> 00:15:52,040
single thing it used from source every

00:15:49,730 --> 00:16:06,530
time you created one I'll give you a

00:15:52,040 --> 00:16:09,170
little demo if I can find it it is okay

00:16:06,530 --> 00:16:11,690
so I have this command called maybe and

00:16:09,170 --> 00:16:14,600
I give it a directory in which I want my

00:16:11,690 --> 00:16:16,340
virtual and like thing to be created I

00:16:14,600 --> 00:16:18,320
just say all right great one that goes

00:16:16,340 --> 00:16:20,240
away it downloads a bunch of build tools

00:16:18,320 --> 00:16:22,280
it fails because I'm not on the network

00:16:20,240 --> 00:16:23,450
it compiles all of these things from

00:16:22,280 --> 00:16:28,790
source and I'm just going to pretend

00:16:23,450 --> 00:16:31,640
that I've already done that and what it

00:16:28,790 --> 00:16:37,660
gives me is a little isolated Python

00:16:31,640 --> 00:16:40,310
environment that I can shell into and

00:16:37,660 --> 00:16:41,900
use in much the same way as virtual ends

00:16:40,310 --> 00:16:43,970
but it's got a lot of you know special

00:16:41,900 --> 00:16:46,610
tricks from the compiler if I now freeze

00:16:43,970 --> 00:16:49,580
that same HelloWorld script using this

00:16:46,610 --> 00:16:56,180
this mipi environment take it over to

00:16:49,580 --> 00:16:57,710
this other older Linux system it'll do

00:16:56,180 --> 00:17:02,710
the something it run very slowly but it

00:16:57,710 --> 00:17:05,150
will eventually run so this project

00:17:02,710 --> 00:17:07,130
basically contains every hack I was ever

00:17:05,150 --> 00:17:09,860
able to come up with for getting things

00:17:07,130 --> 00:17:12,140
to build in a portable fashion all right

00:17:09,860 --> 00:17:14,150
on Linux it uses our auto package build

00:17:12,140 --> 00:17:14,569
suite to basically make sure you're not

00:17:14,150 --> 00:17:17,000
linking

00:17:14,569 --> 00:17:18,529
against newest single versions it links

00:17:17,000 --> 00:17:21,409
some things against the Linux standard

00:17:18,529 --> 00:17:23,659
base SDK where they try to do clever

00:17:21,409 --> 00:17:24,949
things to outsmart the compiler it goes

00:17:23,659 --> 00:17:26,600
through and sets all of the are paths

00:17:24,949 --> 00:17:28,149
and all the libraries so that they look

00:17:26,600 --> 00:17:30,470
you know in the right places for their

00:17:28,149 --> 00:17:31,549
dependencies and it has a Mac version

00:17:30,470 --> 00:17:33,590
that does pretty much the same thing

00:17:31,549 --> 00:17:36,230
right forces a compiler to target an

00:17:33,590 --> 00:17:37,759
older version of oxx and build binaries

00:17:36,230 --> 00:17:39,740
for different platforms set the loader

00:17:37,759 --> 00:17:41,120
path to be relative paths and now it

00:17:39,740 --> 00:17:42,710
doesn't have a Windows version because

00:17:41,120 --> 00:17:45,649
Windows just does all of this stuff out

00:17:42,710 --> 00:17:46,909
of the box I'm interested in doing one

00:17:45,649 --> 00:17:51,139
just for completeness but it would

00:17:46,909 --> 00:17:52,580
really be pretty skinny so that was

00:17:51,139 --> 00:17:55,970
three slightly quicker than I would have

00:17:52,580 --> 00:17:59,690
liked little demos of tools that I've

00:17:55,970 --> 00:18:01,399
been building to make to go from just oh

00:17:59,690 --> 00:18:02,840
we run PI to exe over our code and

00:18:01,399 --> 00:18:06,080
distribute it there's something that's a

00:18:02,840 --> 00:18:07,909
good deal more a usable more friendly

00:18:06,080 --> 00:18:11,419
it's got more features and runs in a lot

00:18:07,909 --> 00:18:13,460
more places the the takeaway points from

00:18:11,419 --> 00:18:15,289
this I guess is that you know that's

00:18:13,460 --> 00:18:16,490
that's far from the end of the things

00:18:15,289 --> 00:18:18,620
that you could be doing with your

00:18:16,490 --> 00:18:20,659
standalone applications and I'm pretty

00:18:18,620 --> 00:18:22,070
sure that you know there are a lot of

00:18:20,659 --> 00:18:24,230
people out there who have their own bits

00:18:22,070 --> 00:18:27,860
and pieces of build recipes and so forth

00:18:24,230 --> 00:18:29,480
sitting around please let's not continue

00:18:27,860 --> 00:18:30,980
to suffer through in relative isolation

00:18:29,480 --> 00:18:32,809
when it comes to these things you know

00:18:30,980 --> 00:18:35,779
if this looks like stuff that you'd love

00:18:32,809 --> 00:18:37,490
to use I'm actively seeking people to

00:18:35,779 --> 00:18:39,259
work on this with me as I mentioned it's

00:18:37,490 --> 00:18:40,970
no longer my full-time occupation to

00:18:39,259 --> 00:18:42,559
care about this stuff I still care about

00:18:40,970 --> 00:18:46,509
it a great deal but I now care in my

00:18:42,559 --> 00:18:49,610
spare time so basically I want to get a

00:18:46,509 --> 00:18:51,559
bunch of reusable tools for doing all of

00:18:49,610 --> 00:18:53,870
these nifty little things with

00:18:51,559 --> 00:18:55,759
standalone apps that people can reuse

00:18:53,870 --> 00:19:00,529
and using their own deployment scenarios

00:18:55,759 --> 00:19:02,960
so those are the source URLs that's the

00:19:00,529 --> 00:19:05,299
source of my favorite quote of all time

00:19:02,960 --> 00:19:12,620
about software development and how we

00:19:05,299 --> 00:19:14,960
offer time we've got some time for our

00:19:12,620 --> 00:19:17,539
questions if you have questions please

00:19:14,960 --> 00:19:26,570
approach the microphones that are on the

00:19:17,539 --> 00:19:27,950
sides here I thanks for the talk so I

00:19:26,570 --> 00:19:29,269
guess the first Cupid question is is

00:19:27,950 --> 00:19:31,789
there a mailing list for this that I

00:19:29,269 --> 00:19:33,409
should be on and I mean not necessarily

00:19:31,789 --> 00:19:35,510
the projects per se just the topic

00:19:33,409 --> 00:19:38,470
avenge if there is it's news to me

00:19:35,510 --> 00:19:42,470
maybe we should make up that sounds like

00:19:38,470 --> 00:19:44,840
and also when you use mipi yep um does

00:19:42,470 --> 00:19:47,269
that mean during development you use it

00:19:44,840 --> 00:19:49,789
instead of virtual and or just when you

00:19:47,269 --> 00:19:53,750
come to bundles so I only use it for

00:19:49,789 --> 00:19:55,250
building and basically I I you know do

00:19:53,750 --> 00:19:58,340
the work in a virtual lens because it's

00:19:55,250 --> 00:20:01,730
simpler and quicker and figure out what

00:19:58,340 --> 00:20:03,620
dependencies I need build the EP

00:20:01,730 --> 00:20:05,899
environment and do some tests and stuff

00:20:03,620 --> 00:20:08,029
and iterate because the tests you know

00:20:05,899 --> 00:20:10,279
sometimes fail and but yeah you could

00:20:08,029 --> 00:20:12,110
you could very easily use it for

00:20:10,279 --> 00:20:13,399
development I mean it works in basically

00:20:12,110 --> 00:20:21,019
the same way as a virtual length

00:20:13,399 --> 00:20:22,039
I don't yeah okay thanks hi so I am was

00:20:21,019 --> 00:20:23,990
I missed the first part of this

00:20:22,039 --> 00:20:25,490
unfortunately but I was wondering if

00:20:23,990 --> 00:20:27,260
there you had any plans on supporting pi

00:20:25,490 --> 00:20:27,860
PI with this as well because that would

00:20:27,260 --> 00:20:31,429
be awesome

00:20:27,860 --> 00:20:34,159
um I would like that or if that's even

00:20:31,429 --> 00:20:35,629
like remotely feasible it is it is let

00:20:34,159 --> 00:20:40,369
me tell you a brief dirty secret about

00:20:35,629 --> 00:20:44,659
SD an esky actually uses the pi PI tool

00:20:40,369 --> 00:20:48,230
chain under the covers as a really hacky

00:20:44,659 --> 00:20:49,850
Python to see compiler as part of what

00:20:48,230 --> 00:20:51,740
it does so I think there's definitely

00:20:49,850 --> 00:20:53,119
scope for doing that and I'd definitely

00:20:51,740 --> 00:20:55,789
be interested in doing that but I

00:20:53,119 --> 00:20:58,190
haven't explored using pi PI all the way

00:20:55,789 --> 00:20:59,570
down because there's a good chance that

00:20:58,190 --> 00:21:04,279
would take some changes on their end as

00:20:59,570 --> 00:21:05,960
well right yeah awesome thank you um I

00:21:04,279 --> 00:21:07,490
was just wondering you mentioned that

00:21:05,960 --> 00:21:09,559
you're compiling everything from source

00:21:07,490 --> 00:21:11,090
with the mipi do you run into

00:21:09,559 --> 00:21:13,220
incompatibilities with different

00:21:11,090 --> 00:21:16,279
compiler versions or different compiler

00:21:13,220 --> 00:21:18,080
settings doing that yes and I won't be

00:21:16,279 --> 00:21:20,269
surprised if people take that and try to

00:21:18,080 --> 00:21:22,429
run it on some box with a slightly

00:21:20,269 --> 00:21:25,070
different compiler and it fails in some

00:21:22,429 --> 00:21:26,260
corner case and part of the reason I

00:21:25,070 --> 00:21:28,810
want to get it out there is

00:21:26,260 --> 00:21:30,850
we can we can figure out all of these

00:21:28,810 --> 00:21:33,640
bits and pieces I haven't had too much

00:21:30,850 --> 00:21:38,380
trouble with that except for complicated

00:21:33,640 --> 00:21:40,810
C++ libraries like QT and posad that

00:21:38,380 --> 00:21:43,030
tend to depend on you know various

00:21:40,810 --> 00:21:45,010
features or Mis features of the various

00:21:43,030 --> 00:21:46,420
compilers that they're being run on so

00:21:45,010 --> 00:21:48,010
that's definitely a concern and I think

00:21:46,420 --> 00:21:49,840
it's tends to be a little bit more of a

00:21:48,010 --> 00:21:52,630
problem on our six but it hasn't been

00:21:49,840 --> 00:21:54,700
too bad for the base part in the system

00:21:52,630 --> 00:22:00,730
yet with the exception of bar starting

00:21:54,700 --> 00:22:02,770
QT thanks a question on nibby does it

00:22:00,730 --> 00:22:07,270
support did you have to do a separate

00:22:02,770 --> 00:22:08,800
compile for x86 and x86 64 here will yes

00:22:07,270 --> 00:22:10,390
and in fact when I sat down to prepare

00:22:08,800 --> 00:22:13,210
this talk I had forgotten that this

00:22:10,390 --> 00:22:14,650
laptop is now running x86 64 and a bunch

00:22:13,210 --> 00:22:16,650
of my example stopped working which is

00:22:14,650 --> 00:22:20,520
why I was doing it in a VirtualBox

00:22:16,650 --> 00:22:22,480
so yes but the same you know the same

00:22:20,520 --> 00:22:27,970
tricks and techniques will still apply

00:22:22,480 --> 00:22:30,130
just targeting two separate platforms do

00:22:27,970 --> 00:22:32,140
you think it requires a lot of glue to

00:22:30,130 --> 00:22:35,020
work with the new packaging module or

00:22:32,140 --> 00:22:38,230
these details - sorry can you repeat

00:22:35,020 --> 00:22:40,120
that how much work do you think this

00:22:38,230 --> 00:22:44,650
will require for the new packaging

00:22:40,120 --> 00:22:46,420
module or non-digital - I don't have

00:22:44,650 --> 00:22:49,240
enough perspective on that work to give

00:22:46,420 --> 00:22:51,010
a sensible answer I mean most of the

00:22:49,240 --> 00:22:53,110
stuff that I've been doing is operating

00:22:51,010 --> 00:22:55,930
above the level of those basic tools

00:22:53,110 --> 00:22:57,430
like you know if he's calling out to

00:22:55,930 --> 00:23:00,460
people which is calling out to packaging

00:22:57,430 --> 00:23:02,170
and so forth so I'm keen to put that on

00:23:00,460 --> 00:23:03,670
the radar but I can't give you a

00:23:02,170 --> 00:23:11,230
sensible answer as to exactly what that

00:23:03,670 --> 00:23:16,000
would mean sorry the question is how

00:23:11,230 --> 00:23:18,670
extensive projects can be compiled with

00:23:16,000 --> 00:23:21,880
this and for instance if I'm looking to

00:23:18,670 --> 00:23:23,830
do a demo of a web app that somebody

00:23:21,880 --> 00:23:27,430
could simply download on Windows play

00:23:23,830 --> 00:23:30,250
with it versus you know going over more

00:23:27,430 --> 00:23:32,290
complicated things with virtual machines

00:23:30,250 --> 00:23:34,930
and stuff like that have you sort of

00:23:32,290 --> 00:23:36,860
tried using it for this sort of purposes

00:23:34,930 --> 00:23:39,950
on larger projects

00:23:36,860 --> 00:23:43,309
I know that people are using things like

00:23:39,950 --> 00:23:46,160
pi to exe for doing web app demos like

00:23:43,309 --> 00:23:48,590
there's a portable Django install or

00:23:46,160 --> 00:23:50,809
something like that I don't see any any

00:23:48,590 --> 00:23:53,299
fundamental limitations right you know

00:23:50,809 --> 00:23:55,010
if if you've got a freezer tool that can

00:23:53,299 --> 00:23:57,049
handle your application all of the rest

00:23:55,010 --> 00:24:01,580
of this stuff should fall into place

00:23:57,049 --> 00:24:03,350
thank you hi I think this is a

00:24:01,580 --> 00:24:07,520
long-running question I'm interested in

00:24:03,350 --> 00:24:09,169
your view when targeting Windows what's

00:24:07,520 --> 00:24:13,010
your opinion on whether you need to have

00:24:09,169 --> 00:24:16,490
bought Visual Studio to redistribute the

00:24:13,010 --> 00:24:17,780
the C runs whether you need to whether

00:24:16,490 --> 00:24:21,590
legally you need to have purchased

00:24:17,780 --> 00:24:24,100
Visual Studio a bundle the C runtime I I

00:24:21,590 --> 00:24:26,890
decline to answer any legal questions

00:24:24,100 --> 00:24:29,480
part of part of the reason I want to do

00:24:26,890 --> 00:24:31,970
version of nippy for Windows is so that

00:24:29,480 --> 00:24:34,549
I can compile it with fan out Visual

00:24:31,970 --> 00:24:37,190
Studio right right because in my limited

00:24:34,549 --> 00:24:38,660
understanding I think it's an artifact

00:24:37,190 --> 00:24:41,299
to the fact that python is compiled with

00:24:38,660 --> 00:24:43,700
visual C yes which I think in my

00:24:41,299 --> 00:24:46,669
understanding means you can't distribute

00:24:43,700 --> 00:24:48,140
a standalone Python XP double unless you

00:24:46,669 --> 00:24:51,290
bought Visual Studio which seems to me

00:24:48,140 --> 00:24:54,080
like an unnecessary so one one thing

00:24:51,290 --> 00:24:55,790
about Eskie in particular it tries to do

00:24:54,080 --> 00:24:58,940
this for you and that it has a command

00:24:55,790 --> 00:25:02,299
line option that's like - - include MSV

00:24:58,940 --> 00:25:03,770
C 90 which is off by default because I

00:25:02,299 --> 00:25:05,150
don't want to take responsibility for

00:25:03,770 --> 00:25:08,000
people who don't know what their legal

00:25:05,150 --> 00:25:10,400
standing is but if you are willing to

00:25:08,000 --> 00:25:11,630
forsake that or have purchased a copy of

00:25:10,400 --> 00:25:14,570
Visual Studio or whatever the case might

00:25:11,630 --> 00:25:16,790
be so s key has the necessary trickery

00:25:14,570 --> 00:25:18,770
in there to read the manifest files

00:25:16,790 --> 00:25:20,450
figure out what version of that DLL

00:25:18,770 --> 00:25:21,860
you're actually using trace it back and

00:25:20,450 --> 00:25:24,260
inline it into your application

00:25:21,860 --> 00:25:28,250
marvelous thank you here this is my

00:25:24,260 --> 00:25:30,530
reaction to legal questions alright and

00:25:28,250 --> 00:25:31,370
on that note we hit the time limit so

00:25:30,530 --> 00:25:33,880
thank you Ryan

00:25:31,370 --> 00:25:33,880

YouTube URL: https://www.youtube.com/watch?v=vP6j7VDpPrI


