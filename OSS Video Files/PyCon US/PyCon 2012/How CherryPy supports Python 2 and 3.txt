Title: How CherryPy supports Python 2 and 3
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Robert Brewer
CherryPy was the first web framework to be made available for use with Python 3, and we tried several approaches to support both Python 2 and 3 before settling on one. Learn about the ups and the downs of each approach, and ways you can
Captions: 
	00:00:00,000 --> 00:00:05,130
alright our next speaker is Robert

00:00:02,520 --> 00:00:07,140
brewer he's a the cherry pie lead

00:00:05,130 --> 00:00:12,620
developer and he's going to talk about

00:00:07,140 --> 00:00:19,619
how chair by supports 503 okay great

00:00:12,620 --> 00:00:22,560
thank you welcome everyone I am going to

00:00:19,619 --> 00:00:24,420
talk about Python 2 and 3 and hopefully

00:00:22,560 --> 00:00:25,949
inspire you to think about the problem

00:00:24,420 --> 00:00:29,630
perhaps a little bit differently than

00:00:25,949 --> 00:00:32,070
you have in the past there's going to be

00:00:29,630 --> 00:00:34,829
you know this isn't going to be a talk

00:00:32,070 --> 00:00:36,690
that's really long on the exact details

00:00:34,829 --> 00:00:38,579
of what's different between Python 2 & 3

00:00:36,690 --> 00:00:39,989
because number one you can go get that

00:00:38,579 --> 00:00:42,120
on your own somewhere else much more

00:00:39,989 --> 00:00:44,789
easily than i can tell you and number

00:00:42,120 --> 00:00:46,530
two as you might notice i'm actually not

00:00:44,789 --> 00:00:48,809
a programmer anymore i'm an architect

00:00:46,530 --> 00:00:51,449
which means i am not supposed to care

00:00:48,809 --> 00:00:53,070
about details and in fact if you watch

00:00:51,449 --> 00:00:54,870
the entire talk you'll notice that i

00:00:53,070 --> 00:00:56,730
don't actually have any code in here

00:00:54,870 --> 00:00:58,980
either because i don't code anymore so

00:00:56,730 --> 00:01:03,149
you know architects were like that so

00:00:58,980 --> 00:01:08,100
that's part of the fun so what we're

00:01:03,149 --> 00:01:09,330
going to do is not go that fast here you

00:01:08,100 --> 00:01:10,619
might notice that I actually don't even

00:01:09,330 --> 00:01:15,000
have a computer anymore i'm doing this

00:01:10,619 --> 00:01:17,280
from my phone so we're weird Bunch so

00:01:15,000 --> 00:01:20,100
i'm going to show you not how to port

00:01:17,280 --> 00:01:23,340
from Python 2 to 3 but i'm going to show

00:01:20,100 --> 00:01:25,830
you and suggest that you support both

00:01:23,340 --> 00:01:28,530
Python 2 and 3 at the same time now if

00:01:25,830 --> 00:01:30,210
you have you know if you just have an

00:01:28,530 --> 00:01:32,340
application that you're responsible for

00:01:30,210 --> 00:01:34,079
and you deploy it to one data center and

00:01:32,340 --> 00:01:36,119
you only care about one version of

00:01:34,079 --> 00:01:38,009
Python anyway I mean great you know

00:01:36,119 --> 00:01:39,570
you're gonna you're going to be running

00:01:38,009 --> 00:01:40,740
it in your data center in two dot six

00:01:39,570 --> 00:01:42,150
and someday you're going to say we need

00:01:40,740 --> 00:01:43,590
to go to three dot whatever is current

00:01:42,150 --> 00:01:46,439
and you'll just poured it and that's

00:01:43,590 --> 00:01:48,689
great but if you have a library or

00:01:46,439 --> 00:01:50,610
framework or any kind of thing that you

00:01:48,689 --> 00:01:52,409
distribute to lots of people you're

00:01:50,610 --> 00:01:54,240
going to want to support Python 2 and 3

00:01:52,409 --> 00:01:55,170
for a number of years to come so

00:01:54,240 --> 00:01:59,189
hopefully I'm going to show you how to

00:01:55,170 --> 00:02:00,630
do that in just four easy steps quick

00:01:59,189 --> 00:02:02,420
poll even though there's not a lot of

00:02:00,630 --> 00:02:07,220
folks here how many of you have actually

00:02:02,420 --> 00:02:11,760
not done any Python 3 work yet at all

00:02:07,220 --> 00:02:13,200
great you are in the fun camp okay how

00:02:11,760 --> 00:02:13,980
many of you have done some work may be

00:02:13,200 --> 00:02:16,920
porting

00:02:13,980 --> 00:02:18,299
a piece of code to python 3 okay and

00:02:16,920 --> 00:02:20,629
those of you who have your hands up how

00:02:18,299 --> 00:02:22,590
many of you have finished that process

00:02:20,629 --> 00:02:23,519
okay and those of you who still have

00:02:22,590 --> 00:02:26,099
your hands up how many of you have

00:02:23,519 --> 00:02:28,019
actually released something in Python 3

00:02:26,099 --> 00:02:31,500
and how many who actually deployed

00:02:28,019 --> 00:02:34,590
something in Python 3 oh I see one hand

00:02:31,500 --> 00:02:35,970
a couple okay and and you folks who have

00:02:34,590 --> 00:02:37,950
actually deployed something how many of

00:02:35,970 --> 00:02:40,230
you have actually like gone through a

00:02:37,950 --> 00:02:41,549
bug fix cycle after that and gotten bug

00:02:40,230 --> 00:02:44,129
reports and then had to go back and fix

00:02:41,549 --> 00:02:47,040
things oh there's still a couple okay

00:02:44,129 --> 00:02:48,690
okay so all of you folks who have

00:02:47,040 --> 00:02:51,349
actually done some work according to

00:02:48,690 --> 00:02:54,150
python 3 I just want to start by saying

00:02:51,349 --> 00:02:56,190
go back and start over after you see

00:02:54,150 --> 00:02:58,049
this talk okay those of you who haven't

00:02:56,190 --> 00:02:59,459
started at all you are in a great spot

00:02:58,049 --> 00:03:02,940
because you get to learn from all my

00:02:59,459 --> 00:03:09,120
mistakes okay so i'm going to show you

00:03:02,940 --> 00:03:12,120
four easy steps first step is great go

00:03:09,120 --> 00:03:15,750
and read everything you can read kiitos

00:03:12,120 --> 00:03:19,319
what's new in 30 document go read Brett

00:03:15,750 --> 00:03:21,419
cannons how to port guide go read Len

00:03:19,319 --> 00:03:24,150
arts great book on porting go read home

00:03:21,419 --> 00:03:25,200
blog posts you can read everything you

00:03:24,150 --> 00:03:26,870
can because you really need to

00:03:25,200 --> 00:03:29,880
understand this problem before you start

00:03:26,870 --> 00:03:35,340
now you're going to go read these things

00:03:29,880 --> 00:03:38,400
and you really have to be careful here

00:03:35,340 --> 00:03:40,470
i'm actually not giving you a lot of

00:03:38,400 --> 00:03:42,090
links to what to go read until at the

00:03:40,470 --> 00:03:43,950
end of the talk because i want you to

00:03:42,090 --> 00:03:45,389
pay attention to me and not be surfing

00:03:43,950 --> 00:03:47,760
the web on your conference fee here so

00:03:45,389 --> 00:03:48,989
you don't have to read copyright law i'm

00:03:47,760 --> 00:03:50,819
probably going to want to read that by

00:03:48,989 --> 00:03:52,470
the time I'm done with my talk but you

00:03:50,819 --> 00:03:54,169
guys go read all that everything you can

00:03:52,470 --> 00:03:57,299
about how to port okay and how to

00:03:54,169 --> 00:03:59,040
support Python 2 and 3 but when you go

00:03:57,299 --> 00:04:00,930
and read all those guides you're going

00:03:59,040 --> 00:04:02,280
to find out that they're all wrong okay

00:04:00,930 --> 00:04:04,769
so take them all with a heavy grain of

00:04:02,280 --> 00:04:06,030
salt they are wrong in at least one

00:04:04,769 --> 00:04:08,639
point which we're going to get to here

00:04:06,030 --> 00:04:12,629
so what they are right in is that they

00:04:08,639 --> 00:04:14,970
all say step one is go test right you

00:04:12,629 --> 00:04:17,010
must have a robust test suite if you

00:04:14,970 --> 00:04:19,260
want to be successful with this if you

00:04:17,010 --> 00:04:21,690
don't I can guarantee you that you will

00:04:19,260 --> 00:04:23,460
have at least one bug in production that

00:04:21,690 --> 00:04:25,260
will bite you and it'll be some code

00:04:23,460 --> 00:04:27,360
path that you thought got fixed and

00:04:25,260 --> 00:04:29,789
didn't actually get fixed

00:04:27,360 --> 00:04:31,139
I can guarantee that even if you do have

00:04:29,789 --> 00:04:33,569
a robust test suite this is going to

00:04:31,139 --> 00:04:36,449
happen to you but at least if you have

00:04:33,569 --> 00:04:41,550
the test suite it will be you know catch

00:04:36,449 --> 00:04:45,169
all the easy ones right so go tests just

00:04:41,550 --> 00:04:47,250
like that administer the test right and

00:04:45,169 --> 00:04:48,750
you're going to you're going to find out

00:04:47,250 --> 00:04:50,610
that it's better it's easier to do this

00:04:48,750 --> 00:04:51,960
if you do your test suite first don't go

00:04:50,610 --> 00:04:53,759
and try and make all these changes and

00:04:51,960 --> 00:04:56,460
then right chest sweet write the test

00:04:53,759 --> 00:04:59,009
suite first okay so those are kind of

00:04:56,460 --> 00:05:03,389
the easy first couple steps quickly just

00:04:59,009 --> 00:05:05,370
why why is cherry pie a good source for

00:05:03,389 --> 00:05:06,689
how to you know how to do this it's

00:05:05,370 --> 00:05:08,430
because we've tried it for different

00:05:06,689 --> 00:05:13,110
ways and failed at least three times

00:05:08,430 --> 00:05:15,289
right but cherry pie has some other good

00:05:13,110 --> 00:05:17,550
qualities about it that make it a really

00:05:15,289 --> 00:05:19,349
good learning experience for how to do

00:05:17,550 --> 00:05:22,889
this right there's a few things about

00:05:19,349 --> 00:05:27,479
cherry pie that it's really the worst of

00:05:22,889 --> 00:05:29,969
all possible worlds not only do we start

00:05:27,479 --> 00:05:32,580
off with them you know a lot of the

00:05:29,969 --> 00:05:34,770
guides will say well get your coat up to

00:05:32,580 --> 00:05:36,270
2 dot 6 and then try porting the

00:05:34,770 --> 00:05:38,370
three-dot to and don't support anything

00:05:36,270 --> 00:05:40,589
less than 2 dot 6 that is complete

00:05:38,370 --> 00:05:42,210
buncombe you can support any version you

00:05:40,589 --> 00:05:46,440
want and cherry pie really tries to

00:05:42,210 --> 00:05:49,229
support wait for it to three all the way

00:05:46,440 --> 00:05:53,250
to 33 and beyond and we do it

00:05:49,229 --> 00:05:54,389
successfully the other another good

00:05:53,250 --> 00:05:56,939
reason why cherry pie is a great example

00:05:54,389 --> 00:05:59,909
is because we do a lot of non blocking

00:05:56,939 --> 00:06:01,289
socket i/o now IO is one of the things

00:05:59,909 --> 00:06:02,639
that changed pretty heavily between two

00:06:01,289 --> 00:06:04,080
and three it's not just the name change

00:06:02,639 --> 00:06:06,779
they actually have entire new modules

00:06:04,080 --> 00:06:08,490
and new ways of doing I oh and not only

00:06:06,779 --> 00:06:09,779
are we doing I oh and have all these

00:06:08,490 --> 00:06:11,729
changes to deal with in the interface

00:06:09,779 --> 00:06:13,349
that we're calling but we're doing

00:06:11,729 --> 00:06:15,750
non-blocking i/o which the standard

00:06:13,349 --> 00:06:18,449
library does not provide so we had to

00:06:15,750 --> 00:06:20,849
write we already had our own subclasses

00:06:18,449 --> 00:06:22,259
of standard library classes and not only

00:06:20,849 --> 00:06:24,389
did we have our own sub classes but we

00:06:22,259 --> 00:06:25,770
had subclasses of classes in the

00:06:24,389 --> 00:06:28,020
standard library whose name start with a

00:06:25,770 --> 00:06:29,219
little underscore which means they're

00:06:28,020 --> 00:06:30,689
private which means we shouldn't have

00:06:29,219 --> 00:06:33,509
been subclassing them but we were in

00:06:30,689 --> 00:06:36,839
order to get work done right so it's a

00:06:33,509 --> 00:06:38,719
great example for that there's a two

00:06:36,839 --> 00:06:40,770
other things that have to do with

00:06:38,719 --> 00:06:42,500
encoding mostly now the big

00:06:40,770 --> 00:06:44,789
change from Python 2 to 3 is obviously

00:06:42,500 --> 00:06:46,229
bites where the native string type and

00:06:44,789 --> 00:06:48,210
now Unicode is the native string type

00:06:46,229 --> 00:06:49,800
cherry pie has some particular

00:06:48,210 --> 00:06:54,180
difficulties in this area because it

00:06:49,800 --> 00:06:55,740
speaks http and HTTP is itself under

00:06:54,180 --> 00:06:58,139
specified when it comes to encoding

00:06:55,740 --> 00:07:01,229
there are headers for example that you

00:06:58,139 --> 00:07:03,479
can receive an HTTP request where it is

00:07:01,229 --> 00:07:05,759
impossible for the sender of the message

00:07:03,479 --> 00:07:08,250
to specify the encoding of the data

00:07:05,759 --> 00:07:11,220
they're sending to you so not only do

00:07:08,250 --> 00:07:12,659
you get wrong encoding sometimes

00:07:11,220 --> 00:07:14,190
sometimes you don't get any encoding at

00:07:12,659 --> 00:07:16,979
all and you just have to either say well

00:07:14,190 --> 00:07:19,500
I trust the client at sending data in

00:07:16,979 --> 00:07:23,190
the encoding I expect or you just guess

00:07:19,500 --> 00:07:25,080
right and then also it speaks wsgi and

00:07:23,190 --> 00:07:29,069
so that's a whole other layer of things

00:07:25,080 --> 00:07:30,449
now wsgi when it got ported to Python 3

00:07:29,069 --> 00:07:33,300
introduced this concept of native

00:07:30,449 --> 00:07:34,860
strings native strings are a really

00:07:33,300 --> 00:07:37,590
great idea because it's a great way to

00:07:34,860 --> 00:07:40,379
think about how to have a single code

00:07:37,590 --> 00:07:42,300
base for example where you're you're

00:07:40,379 --> 00:07:44,729
supporting both Python 2 and 3 again

00:07:42,300 --> 00:07:46,860
byte strings versus unicode but it's

00:07:44,729 --> 00:07:48,090
just another layer of you know having to

00:07:46,860 --> 00:07:50,460
deal with the way people want to think

00:07:48,090 --> 00:07:53,550
about things wsgi was not easy and then

00:07:50,460 --> 00:07:55,050
finally cherry pie is kind of unique in

00:07:53,550 --> 00:07:57,690
that it tries not to have any

00:07:55,050 --> 00:07:59,520
dependencies whatsoever so there's a

00:07:57,690 --> 00:08:00,569
beautiful module had now called 6 which

00:07:59,520 --> 00:08:03,060
we'll talk about a little bit more in a

00:08:00,569 --> 00:08:05,150
minute but cherry pie can't import it

00:08:03,060 --> 00:08:07,860
because we kind of a policy of being the

00:08:05,150 --> 00:08:09,900
trunk of your import tree so we don't

00:08:07,860 --> 00:08:15,900
want to we don't want to import six and

00:08:09,900 --> 00:08:17,909
depend on it so step one was read step

00:08:15,900 --> 00:08:20,940
two is test everything and now step

00:08:17,909 --> 00:08:23,460
three is run the 223 tool if you haven't

00:08:20,940 --> 00:08:26,669
seen the 223 tool yet it's included in

00:08:23,460 --> 00:08:28,949
recent versions of Python both Python

00:08:26,669 --> 00:08:30,300
two versions and Python 3 versions it's

00:08:28,949 --> 00:08:32,279
just a it's a command-line utility

00:08:30,300 --> 00:08:34,320
typically that you'll run from your

00:08:32,279 --> 00:08:37,110
terminal and say Python you know two to

00:08:34,320 --> 00:08:40,740
three my code base and what it does is

00:08:37,110 --> 00:08:43,890
it takes all of your code it actually

00:08:40,740 --> 00:08:47,670
creates a parse tree after you know

00:08:43,890 --> 00:08:50,190
trying to analyze everything and then it

00:08:47,670 --> 00:08:54,329
runs a series of transformations that

00:08:50,190 --> 00:08:56,339
take the Python to syntax and then

00:08:54,329 --> 00:08:58,470
out the other side comes a set of Python

00:08:56,339 --> 00:09:03,899
3 files most of you have probably heard

00:08:58,470 --> 00:09:06,540
of that or seen it the problem with 223

00:09:03,899 --> 00:09:09,360
is that it really falls in li don't make

00:09:06,540 --> 00:09:11,399
me think camp right and it kind of has

00:09:09,360 --> 00:09:14,429
to because there's a lot of changes

00:09:11,399 --> 00:09:17,429
between Python 2 and 3 and really the

00:09:14,429 --> 00:09:19,709
the low-hanging fruit is the syntax

00:09:17,429 --> 00:09:21,749
changes right 223 is great about that

00:09:19,709 --> 00:09:24,360
it's a wonderful module it will detect

00:09:21,749 --> 00:09:25,860
that you know a module has changed names

00:09:24,360 --> 00:09:27,779
in the standard library it'll fix that

00:09:25,860 --> 00:09:29,040
for you it will detect that you have a

00:09:27,779 --> 00:09:31,709
dictionary and you're calling the

00:09:29,040 --> 00:09:33,929
interval use method on it and now in

00:09:31,709 --> 00:09:35,749
Python 3 that's just called values to

00:09:33,929 --> 00:09:37,769
get the same semantics it'll change that

00:09:35,749 --> 00:09:39,509
does all kinds of great things like that

00:09:37,769 --> 00:09:41,489
it'll get rid of the little you prefixes

00:09:39,509 --> 00:09:44,759
on your strings those kinds of things

00:09:41,489 --> 00:09:47,129
but really it's almost entirely limited

00:09:44,759 --> 00:09:49,369
to syntax changes and there's going to

00:09:47,129 --> 00:09:53,069
be a lot of semantic changes not just

00:09:49,369 --> 00:09:55,279
between Python 2 and 3 you know modules

00:09:53,069 --> 00:09:59,160
you're importing but in your own code

00:09:55,279 --> 00:10:00,959
because chances are that you've probably

00:09:59,160 --> 00:10:03,509
been doing things especially with bites

00:10:00,959 --> 00:10:05,189
and Unicode that are less strict in the

00:10:03,509 --> 00:10:07,410
Python 2 way and now you have to be more

00:10:05,189 --> 00:10:10,949
strict about them under Python 3 so

00:10:07,410 --> 00:10:13,019
that's a little bit difficult so what I

00:10:10,949 --> 00:10:16,379
recommend is that if you run 2 to 3 and

00:10:13,019 --> 00:10:17,939
you should after two to three runs check

00:10:16,379 --> 00:10:20,399
every single change that to 23

00:10:17,939 --> 00:10:22,619
recommends and either approve it or

00:10:20,399 --> 00:10:24,809
rejected and then check everything that

00:10:22,619 --> 00:10:26,040
it didn't change because there's going

00:10:24,809 --> 00:10:30,929
to be some changes that you have to make

00:10:26,040 --> 00:10:33,360
as well just manually and then you know

00:10:30,929 --> 00:10:36,779
run your tests now there's some other

00:10:33,360 --> 00:10:39,239
problems with 223 and at the problem

00:10:36,779 --> 00:10:41,369
with 223 and some of the guides that you

00:10:39,239 --> 00:10:43,169
might read out there is that they say

00:10:41,369 --> 00:10:44,939
okay we don't want you to just run two

00:10:43,169 --> 00:10:46,379
to three one time we want you we want to

00:10:44,939 --> 00:10:49,110
automate it we want you to be running

00:10:46,379 --> 00:10:51,269
two to three all the time or what a lot

00:10:49,110 --> 00:10:53,850
of them will say is we want you to take

00:10:51,269 --> 00:10:57,299
two to three and run it at the moment

00:10:53,850 --> 00:10:59,009
the user types Python setup i install we

00:10:57,299 --> 00:11:00,600
want it to run on the user's machine and

00:10:59,009 --> 00:11:02,879
it will take your Python to distribution

00:11:00,600 --> 00:11:05,610
and create a Python 3 distribution at

00:11:02,879 --> 00:11:07,019
the point they install you know back in

00:11:05,610 --> 00:11:07,930
the day when everybody was like in cubby

00:11:07,019 --> 00:11:09,580
farms we call this

00:11:07,930 --> 00:11:11,800
run code over the wall so I think you

00:11:09,580 --> 00:11:13,690
can imagine who's going to get hurt if

00:11:11,800 --> 00:11:16,839
you throw this kind of a change over the

00:11:13,690 --> 00:11:18,279
wall you know it's not just a it's not

00:11:16,839 --> 00:11:20,080
just a new feature you're transforming

00:11:18,279 --> 00:11:22,990
your entire code base and you're going

00:11:20,080 --> 00:11:25,360
to run into problems so of course you're

00:11:22,990 --> 00:11:26,709
going to go through a long process of

00:11:25,360 --> 00:11:28,870
testing all these changes yourself

00:11:26,709 --> 00:11:30,550
before it ever gets to your users but

00:11:28,870 --> 00:11:32,470
the problem is that it's not just it's

00:11:30,550 --> 00:11:33,430
not just a problem for your users it's

00:11:32,470 --> 00:11:35,170
going to be a problem for you and

00:11:33,430 --> 00:11:36,970
development because as you're testing

00:11:35,170 --> 00:11:40,000
all of these things you're going to find

00:11:36,970 --> 00:11:42,310
out that as Nick Coughlin said the other

00:11:40,000 --> 00:11:45,070
day this is this is basically adding a

00:11:42,310 --> 00:11:46,810
compile step to your development process

00:11:45,070 --> 00:11:49,330
in Python and adding a compile step to

00:11:46,810 --> 00:11:51,700
python development process sucks you

00:11:49,330 --> 00:11:53,830
don't want to do it or you want to do it

00:11:51,700 --> 00:11:55,720
as little as possible right so I really

00:11:53,830 --> 00:11:57,970
recommend once and then the other

00:11:55,720 --> 00:12:00,580
problem is that it's not a particularly

00:11:57,970 --> 00:12:02,500
fast compile step there's plenty of

00:12:00,580 --> 00:12:07,029
anecdotal evidence that even prompted a

00:12:02,500 --> 00:12:08,709
very recent PEP which says that you know

00:12:07,029 --> 00:12:10,899
for some of these people who are doing

00:12:08,709 --> 00:12:13,930
this porting process that the two to

00:12:10,899 --> 00:12:16,060
three part of building a package and

00:12:13,930 --> 00:12:17,320
distributing it it's actually it takes

00:12:16,060 --> 00:12:18,880
longer to do the two to three

00:12:17,320 --> 00:12:22,779
transformation than to run their entire

00:12:18,880 --> 00:12:26,380
existing test suite on the order of you

00:12:22,779 --> 00:12:30,010
know 10 times slower so good reasons to

00:12:26,380 --> 00:12:33,100
avoid going from you know trying to run

00:12:30,010 --> 00:12:34,750
2 to 3 all the time right not to mention

00:12:33,100 --> 00:12:36,490
that you have you know you're going to

00:12:34,750 --> 00:12:38,350
find things that 223 doesn't fix and

00:12:36,490 --> 00:12:39,670
then you're going to say well how do I

00:12:38,350 --> 00:12:40,990
get those to happen every time I'm going

00:12:39,670 --> 00:12:42,880
to write a custom fixer for two to three

00:12:40,990 --> 00:12:46,890
so you're going through the work anyway

00:12:42,880 --> 00:12:51,550
to do all these custom fixes right so I

00:12:46,890 --> 00:12:53,320
really recommend that with presentation

00:12:51,550 --> 00:12:57,430
software that doesn't work i really

00:12:53,320 --> 00:12:59,079
recommend that you you know two to three

00:12:57,430 --> 00:13:00,610
you you treat it like something where

00:12:59,079 --> 00:13:04,089
you take your making an initial stab at

00:13:00,610 --> 00:13:05,770
the problem right and then you check

00:13:04,089 --> 00:13:07,990
everything that it changed and you check

00:13:05,770 --> 00:13:10,390
everything that it didn't change and

00:13:07,990 --> 00:13:12,040
then you run all your tests and then you

00:13:10,390 --> 00:13:13,750
go back and you check your tests because

00:13:12,040 --> 00:13:15,910
chances are they're actually not testing

00:13:13,750 --> 00:13:18,400
what you think they're testing in python

00:13:15,910 --> 00:13:20,380
3 right and then you put two to three

00:13:18,400 --> 00:13:21,560
back on the shelf it's a great tool but

00:13:20,380 --> 00:13:24,260
run at once

00:13:21,560 --> 00:13:27,470
step 1 read everything you can step two

00:13:24,260 --> 00:13:31,790
tests everything you can step three run

00:13:27,470 --> 00:13:34,040
two to three but only run at once so if

00:13:31,790 --> 00:13:35,390
you only run it once what are the

00:13:34,040 --> 00:13:37,750
options that you have for distributing

00:13:35,390 --> 00:13:40,730
stuff that works on two and three well

00:13:37,750 --> 00:13:42,260
for cherry pie our next solution was

00:13:40,730 --> 00:13:43,610
well let's try the separate branches

00:13:42,260 --> 00:13:44,900
approach there's a number of guides that

00:13:43,610 --> 00:13:47,540
recommend this might be a great way to

00:13:44,900 --> 00:13:50,060
go and so we tried this our whole I

00:13:47,540 --> 00:13:52,190
believe it was the three dot one set of

00:13:50,060 --> 00:13:53,570
versions tried separate branches and we

00:13:52,190 --> 00:13:57,860
were on subversion at the time which is

00:13:53,570 --> 00:13:59,660
actually good thing and we had we had

00:13:57,860 --> 00:14:02,270
our trunk that we had been developing

00:13:59,660 --> 00:14:05,660
and we said let's start a new branches /

00:14:02,270 --> 00:14:08,440
Python free branch and that was a

00:14:05,660 --> 00:14:13,460
reasonable solution for about two days

00:14:08,440 --> 00:14:15,529
and the first thing that happened was

00:14:13,460 --> 00:14:17,050
okay now we have two different branches

00:14:15,529 --> 00:14:19,490
what does that mean that means we are

00:14:17,050 --> 00:14:21,710
packaging and distributing two different

00:14:19,490 --> 00:14:24,650
verte you know packages of cherry pie

00:14:21,710 --> 00:14:26,960
right and so what happened was we would

00:14:24,650 --> 00:14:29,750
start to get these bug reports IRC email

00:14:26,960 --> 00:14:33,920
wherever that said hey you know I was

00:14:29,750 --> 00:14:36,440
trying to install cherry pie and I got

00:14:33,920 --> 00:14:37,640
the the cherry pie version for Python 3

00:14:36,440 --> 00:14:40,520
and I'm installing and it's not running

00:14:37,640 --> 00:14:43,760
or I can't even install it right and

00:14:40,520 --> 00:14:45,350
what we found was this weird mix of

00:14:43,760 --> 00:14:47,540
things with mismatched Python

00:14:45,350 --> 00:14:50,030
environments especially with people who

00:14:47,540 --> 00:14:51,050
had both Python 2 and 3 on the same you

00:14:50,030 --> 00:14:52,960
know laptop or wherever they were

00:14:51,050 --> 00:14:56,870
installing because they would either

00:14:52,960 --> 00:14:59,270
they would either install they'd be

00:14:56,870 --> 00:15:01,520
trying to use Python 2 and they'd

00:14:59,270 --> 00:15:05,839
install they try to install the package

00:15:01,520 --> 00:15:07,690
for cherry pie three sometimes because

00:15:05,839 --> 00:15:10,010
they were using the wrong easy install

00:15:07,690 --> 00:15:12,350
binary you know executable right and

00:15:10,010 --> 00:15:13,940
then the other problem that happened all

00:15:12,350 --> 00:15:16,370
the time was they would actually install

00:15:13,940 --> 00:15:18,740
the package in the correct environment

00:15:16,370 --> 00:15:21,200
so great i have Python 3 with cherry pie

00:15:18,740 --> 00:15:22,610
three installed correctly in it now but

00:15:21,200 --> 00:15:24,320
then they would run they would try to

00:15:22,610 --> 00:15:26,180
execute some script of theirs and they

00:15:24,320 --> 00:15:28,580
be using the Python to executable by

00:15:26,180 --> 00:15:31,580
mistake right so this was just really

00:15:28,580 --> 00:15:33,170
confusing for everybody and we had some

00:15:31,580 --> 00:15:35,180
problems other unrelated problems with

00:15:33,170 --> 00:15:35,750
like windows installers installing the

00:15:35,180 --> 00:15:38,900
wrong version

00:15:35,750 --> 00:15:41,120
things but there's a more insidious

00:15:38,900 --> 00:15:44,750
problem with running separate branches

00:15:41,120 --> 00:15:47,030
and that is how do you actually do it

00:15:44,750 --> 00:15:49,910
you know you've got developers and they

00:15:47,030 --> 00:15:51,050
are submitting patches it number one

00:15:49,910 --> 00:15:53,270
it's really hard to train your

00:15:51,050 --> 00:15:55,370
developers we had a number of people who

00:15:53,270 --> 00:15:58,610
were contributing and they would submit

00:15:55,370 --> 00:16:00,470
you know just the Python to fix but not

00:15:58,610 --> 00:16:02,540
the equivalent Python 3 fix because they

00:16:00,470 --> 00:16:05,000
either didn't know about the fact that

00:16:02,540 --> 00:16:06,430
we had a Python 30 branch or they just

00:16:05,000 --> 00:16:10,910
assumed it was somebody else's problem

00:16:06,430 --> 00:16:13,370
which turned out to be me and so so I

00:16:10,910 --> 00:16:16,670
said well I know how to solve this I'm

00:16:13,370 --> 00:16:18,050
going to just apply this patch that they

00:16:16,670 --> 00:16:20,440
submitted for Python 2 i'm going to

00:16:18,050 --> 00:16:23,360
supply apply it to the Python 3 branch

00:16:20,440 --> 00:16:26,330
which is great again for about 1 or 2

00:16:23,360 --> 00:16:28,790
fixes until you get to the point where

00:16:26,330 --> 00:16:31,250
you say won't know the work I did

00:16:28,790 --> 00:16:33,140
yesterday or last week I want to go back

00:16:31,250 --> 00:16:35,360
and look at that again it's not really

00:16:33,140 --> 00:16:37,700
fresh in my mind anymore and you might

00:16:35,360 --> 00:16:40,880
try to figure out well not only did I

00:16:37,700 --> 00:16:47,030
make a change to python too but I made a

00:16:40,880 --> 00:16:48,560
change to my Python 3 code but sometimes

00:16:47,030 --> 00:16:50,030
that's exactly the same change and

00:16:48,560 --> 00:16:52,160
sometimes it's actually different

00:16:50,030 --> 00:16:53,330
because it's supposed it has to be

00:16:52,160 --> 00:16:55,190
different to support the two different

00:16:53,330 --> 00:16:58,310
code bases right so there's a subtle

00:16:55,190 --> 00:17:00,560
problem of well now how do I look at the

00:16:58,310 --> 00:17:02,270
differences between differences right

00:17:00,560 --> 00:17:05,209
and it becomes this really hard problem

00:17:02,270 --> 00:17:06,620
to solve and the way I tried to solve it

00:17:05,209 --> 00:17:09,290
was well of course now i'm going to use

00:17:06,620 --> 00:17:11,120
milk right so i pull up a graphical meld

00:17:09,290 --> 00:17:12,339
window and i've got i've actually got

00:17:11,120 --> 00:17:14,810
three windows because I've got the

00:17:12,339 --> 00:17:16,520
previous code in one and the Python to

00:17:14,810 --> 00:17:17,839
change in one window and the Python 3

00:17:16,520 --> 00:17:20,569
change in another window so I can kind

00:17:17,839 --> 00:17:22,610
of compare them side-by-side but even

00:17:20,569 --> 00:17:27,140
with that it's hard to compare those

00:17:22,610 --> 00:17:29,540
patches because so much the majority of

00:17:27,140 --> 00:17:31,670
the patch is going to be stupid little

00:17:29,540 --> 00:17:32,930
syntax things like now you've got a

00:17:31,670 --> 00:17:34,850
little bit prefix in front of your

00:17:32,930 --> 00:17:36,710
string or you've lost the you prefix or

00:17:34,850 --> 00:17:39,560
you're calling a different you know

00:17:36,710 --> 00:17:41,180
module and it's things that 223 fixed

00:17:39,560 --> 00:17:42,580
for you automatically but now you have

00:17:41,180 --> 00:17:45,050
to look at those changes all the time

00:17:42,580 --> 00:17:47,810
side by side and it gets really hard to

00:17:45,050 --> 00:17:48,920
see exactly what the meat of the actual

00:17:47,810 --> 00:17:52,880
patch was

00:17:48,920 --> 00:17:54,350
sometimes so that's just really hard to

00:17:52,880 --> 00:17:57,950
do and then what you find yourself doing

00:17:54,350 --> 00:18:00,080
is you you actually you find yourself

00:17:57,950 --> 00:18:01,790
saying well that's really hard so let me

00:18:00,080 --> 00:18:04,610
minimize the actual differences and you

00:18:01,790 --> 00:18:07,340
end up writing Python 3 code in Python 2

00:18:04,610 --> 00:18:08,780
or Python to code in Python 3 and you

00:18:07,340 --> 00:18:11,330
try and get rid of all those things

00:18:08,780 --> 00:18:13,310
anyway so you're almost writing a little

00:18:11,330 --> 00:18:17,210
compatibility layer as you go through

00:18:13,310 --> 00:18:18,710
these patches right so we stopped doing

00:18:17,210 --> 00:18:20,390
the separate branches and we said hey

00:18:18,710 --> 00:18:22,910
we're writing this compatibility module

00:18:20,390 --> 00:18:24,980
anyway why don't we just ship a

00:18:22,910 --> 00:18:27,380
compatibility module and now we can have

00:18:24,980 --> 00:18:30,590
our code run the same code base on

00:18:27,380 --> 00:18:32,690
Python 2 and Python 3 and it turns out

00:18:30,590 --> 00:18:36,020
that this is actually one really honking

00:18:32,690 --> 00:18:44,000
great idea we should do it more there's

00:18:36,020 --> 00:18:47,390
lots of benefits to this the the biggest

00:18:44,000 --> 00:18:49,460
benefit is that not only can you support

00:18:47,390 --> 00:18:52,760
the major differences between Python 2

00:18:49,460 --> 00:18:55,340
and 3 use exactly the same techniques to

00:18:52,760 --> 00:18:57,740
support minor differences let's say 23

00:18:55,340 --> 00:18:59,210
to 24 I mean you all remember some of

00:18:57,740 --> 00:19:01,160
you remember when two da for came out

00:18:59,210 --> 00:19:03,260
and now we have decorators and everybody

00:19:01,160 --> 00:19:05,180
was all oh that's a horrible backwards

00:19:03,260 --> 00:19:07,220
incompatible change and how are we going

00:19:05,180 --> 00:19:10,640
to upgrade our code well the great thing

00:19:07,220 --> 00:19:12,590
is that you don't have to upgrade your

00:19:10,640 --> 00:19:15,680
code just because you moved from 2 to 3

00:19:12,590 --> 00:19:17,930
to 2 dot 4 and what I mean is just

00:19:15,680 --> 00:19:21,560
because decorators were allowed into dot

00:19:17,930 --> 00:19:22,640
4 we didn't force the people who are

00:19:21,560 --> 00:19:24,530
using cherry pie to start using

00:19:22,640 --> 00:19:26,960
decorators everywhere we provided some

00:19:24,530 --> 00:19:30,800
of them you know but we didn't force

00:19:26,960 --> 00:19:33,320
them we actually use the old syntax for

00:19:30,800 --> 00:19:36,980
most of the changes between Python 2 and

00:19:33,320 --> 00:19:39,200
3 you can use just a single module and

00:19:36,980 --> 00:19:42,680
ours is just I think it's like 200 lines

00:19:39,200 --> 00:19:45,680
long and cherry pie that you do simple

00:19:42,680 --> 00:19:48,170
things like try and import the the

00:19:45,680 --> 00:19:49,850
Python 3 module and if that gives you an

00:19:48,170 --> 00:19:52,010
import error then import the Python to

00:19:49,850 --> 00:19:54,950
module and then we have some rapper

00:19:52,010 --> 00:19:57,290
functions you know for like well if I if

00:19:54,950 --> 00:19:59,210
I have a dictionary that I want to

00:19:57,290 --> 00:20:00,710
iterate over the the values of that

00:19:59,210 --> 00:20:02,480
dictionary then you write a little

00:20:00,710 --> 00:20:04,610
rapper called eater values

00:20:02,480 --> 00:20:08,179
and pass it a dictionary and that works

00:20:04,610 --> 00:20:09,290
in Python to just as well as Python 3 so

00:20:08,179 --> 00:20:12,530
you put all those little differences

00:20:09,290 --> 00:20:16,580
into one little module right and ours is

00:20:12,530 --> 00:20:17,690
just called under CP comp @ py but you

00:20:16,580 --> 00:20:20,179
can call it you know whatever you want

00:20:17,690 --> 00:20:23,570
and the cool thing is not only do you

00:20:20,179 --> 00:20:25,070
get the chance to you know control the

00:20:23,570 --> 00:20:27,260
differences between major versions and

00:20:25,070 --> 00:20:29,809
minor versions but with exactly the same

00:20:27,260 --> 00:20:32,270
techniques you support jython ironpython

00:20:29,809 --> 00:20:35,210
and who knows maybe even pi PI in some

00:20:32,270 --> 00:20:37,390
ways right or whatever other weird kind

00:20:35,210 --> 00:20:39,679
of Python people are coming up with

00:20:37,390 --> 00:20:41,120
which we were doing anyway we already

00:20:39,679 --> 00:20:44,559
had hacks for Jai thon and ironpython

00:20:41,120 --> 00:20:47,350
etc so so there's lots of pros to this

00:20:44,559 --> 00:20:52,100
approach you don't have the merge hell

00:20:47,350 --> 00:20:56,929
you support all these versions to 32 33

00:20:52,100 --> 00:20:58,669
and beyond you you know you have

00:20:56,929 --> 00:21:01,220
everything collected in one place and

00:20:58,669 --> 00:21:02,630
it's really not that bad the one bad

00:21:01,220 --> 00:21:05,150
thing is of course well now we're

00:21:02,630 --> 00:21:06,770
writing not in e ematic code right it's

00:21:05,150 --> 00:21:11,150
off model as they would say in the

00:21:06,770 --> 00:21:14,210
simpsons world so you get code in your

00:21:11,150 --> 00:21:15,890
library or your framework that looks it

00:21:14,210 --> 00:21:17,840
looks a little dated maybe you know and

00:21:15,890 --> 00:21:20,780
sometimes you have you're importing

00:21:17,840 --> 00:21:22,429
these functions that may be a new

00:21:20,780 --> 00:21:24,890
programmer would kind of bach at that

00:21:22,429 --> 00:21:26,540
and say well that's not that's not you

00:21:24,890 --> 00:21:28,010
know standard Python because you do

00:21:26,540 --> 00:21:31,250
using these rapper functions and so on

00:21:28,010 --> 00:21:33,290
but really those problems are not

00:21:31,250 --> 00:21:35,720
problems they're not problems we need to

00:21:33,290 --> 00:21:38,780
solve because they don't affect anybody

00:21:35,720 --> 00:21:40,280
except the authors of your library or

00:21:38,780 --> 00:21:43,370
framework they don't affect your users

00:21:40,280 --> 00:21:45,169
you don't have to change your API just

00:21:43,370 --> 00:21:47,090
because you are importing a different

00:21:45,169 --> 00:21:49,070
module behind the scenes all of these

00:21:47,090 --> 00:21:52,580
all this ugliness is entirely contained

00:21:49,070 --> 00:21:53,720
within your package you know you don't

00:21:52,580 --> 00:21:54,980
have to change anything about the way

00:21:53,720 --> 00:21:58,880
your users are interacting with your

00:21:54,980 --> 00:22:05,570
product number one number two the the

00:21:58,880 --> 00:22:09,559
changes are their appropriate you you

00:22:05,570 --> 00:22:11,270
have these changes that that makes sense

00:22:09,559 --> 00:22:13,340
like when we get to start talking about

00:22:11,270 --> 00:22:15,559
Unicode in just a minute then you know

00:22:13,340 --> 00:22:16,350
we're going to you're going to see that

00:22:15,559 --> 00:22:19,320
it we're actually

00:22:16,350 --> 00:22:22,020
following the strict Unicode approach of

00:22:19,320 --> 00:22:23,250
Python 3 and it's our code is more

00:22:22,020 --> 00:22:26,820
understandable now that we're using

00:22:23,250 --> 00:22:31,740
these techniques than it was before you

00:22:26,820 --> 00:22:34,980
also don't have to worry about well I'll

00:22:31,740 --> 00:22:36,990
get to that later there's just there's

00:22:34,980 --> 00:22:43,650
the the cons are really limited in their

00:22:36,990 --> 00:22:46,289
scope and wonder of wonders for most of

00:22:43,650 --> 00:22:47,610
you you will find this wonderful module

00:22:46,289 --> 00:22:50,220
called 6 at some point Benjamin

00:22:47,610 --> 00:22:52,470
Pearson's great module that has already

00:22:50,220 --> 00:22:54,059
done all of this work for you it already

00:22:52,470 --> 00:22:56,960
has all of these rapper functions that

00:22:54,059 --> 00:22:59,100
already has all of these try except

00:22:56,960 --> 00:23:01,200
import the right module kinds of names

00:22:59,100 --> 00:23:02,580
and all you have to do is import six and

00:23:01,200 --> 00:23:03,929
use the names that are already exposes

00:23:02,580 --> 00:23:06,720
and it actually does it in a really

00:23:03,929 --> 00:23:07,980
intelligent way it it gives you it

00:23:06,720 --> 00:23:09,900
doesn't give you a real module that

00:23:07,980 --> 00:23:11,730
gives you kind of a fake module and when

00:23:09,900 --> 00:23:12,809
you go to import something it's only at

00:23:11,730 --> 00:23:14,520
the moment that you try to import

00:23:12,809 --> 00:23:15,870
something that it goes and loads it so

00:23:14,520 --> 00:23:17,190
it's not like you have to load up all

00:23:15,870 --> 00:23:22,080
these modules you're never going to use

00:23:17,190 --> 00:23:24,270
right so six is great we did not use it

00:23:22,080 --> 00:23:25,710
for cherry pie we wrote our own because

00:23:24,270 --> 00:23:27,570
we don't want to depend on anything but

00:23:25,710 --> 00:23:32,309
I highly recommend six for anybody that

00:23:27,570 --> 00:23:34,140
that's doing this and then just one last

00:23:32,309 --> 00:23:35,549
minute on string literals this is this

00:23:34,140 --> 00:23:36,750
is a great example and it's that's the

00:23:35,549 --> 00:23:37,679
one thing that might confuse you a

00:23:36,750 --> 00:23:40,830
little bit and I have one more

00:23:37,679 --> 00:23:42,750
recommendation you know bytes to unicode

00:23:40,830 --> 00:23:44,070
is the biggest change in python 3

00:23:42,750 --> 00:23:46,590
especially if you're doing any kind of

00:23:44,070 --> 00:23:48,630
i/o there's been lots of approaches

00:23:46,590 --> 00:23:51,299
recommended to this for handling this

00:23:48,630 --> 00:23:53,370
you could do the future import but that

00:23:51,299 --> 00:23:56,970
only works if you're using Python 2 dot

00:23:53,370 --> 00:24:02,309
6 or higher which we weren't you can use

00:23:56,970 --> 00:24:04,770
now with PEP 414 being approved Python

00:24:02,309 --> 00:24:06,900
33 which is just now an alpha in the

00:24:04,770 --> 00:24:10,470
last week or so has reintroduced the you

00:24:06,900 --> 00:24:13,230
prefix on strings so you can write you

00:24:10,470 --> 00:24:15,900
can use be and you prefix literal

00:24:13,230 --> 00:24:18,299
strings in both Python 2 and 3 again but

00:24:15,900 --> 00:24:20,309
only if you're using you can't target

00:24:18,299 --> 00:24:23,909
Python 30 or three dot one or three got

00:24:20,309 --> 00:24:25,500
to then right a lot of people before

00:24:23,909 --> 00:24:27,870
that came out we're using little be and

00:24:25,500 --> 00:24:29,740
you functions that wrap things up that's

00:24:27,870 --> 00:24:31,540
great too except they all have

00:24:29,740 --> 00:24:35,559
extinct coatings they were always just

00:24:31,540 --> 00:24:37,630
using Latin one or a ski and that's not

00:24:35,559 --> 00:24:39,880
good if you are using other encoding or

00:24:37,630 --> 00:24:44,260
maybe they were using you TIFF utf-8 and

00:24:39,880 --> 00:24:47,110
in HTTP world you have to use iso 8859-1

00:24:44,260 --> 00:24:49,030
all the time for headers and things so

00:24:47,110 --> 00:24:50,920
we couldn't use that so what we used and

00:24:49,030 --> 00:24:52,750
what I really recommend to you is make

00:24:50,920 --> 00:24:56,050
your own functions like the be in the U

00:24:52,750 --> 00:24:58,620
but provide an optional argument to

00:24:56,050 --> 00:25:02,860
specify the encoding both in and out

00:24:58,620 --> 00:25:05,020
this has really cleaned up the HTTP

00:25:02,860 --> 00:25:07,320
server and cherry pie because before

00:25:05,020 --> 00:25:10,090
there were a lot of strings that we were

00:25:07,320 --> 00:25:13,150
reading and emitting that we just did

00:25:10,090 --> 00:25:14,920
not know the encoding of and now every

00:25:13,150 --> 00:25:17,679
point in the server it has to be

00:25:14,920 --> 00:25:20,380
explicit this basically were saying by

00:25:17,679 --> 00:25:22,929
this kind of declaration this string has

00:25:20,380 --> 00:25:25,720
to be able to be encoded as Latin one or

00:25:22,929 --> 00:25:28,690
a ski or you know whatever is

00:25:25,720 --> 00:25:33,070
appropriate so art code is better

00:25:28,690 --> 00:25:36,550
documented with this approach so that's

00:25:33,070 --> 00:25:39,280
pretty much it read tests run two to

00:25:36,550 --> 00:25:40,600
three once and then write a

00:25:39,280 --> 00:25:42,309
compatibility module and use it

00:25:40,600 --> 00:25:43,630
everywhere and your life will be simple

00:25:42,309 --> 00:25:46,420
from that point on I wish we had done it

00:25:43,630 --> 00:25:47,860
before we ported to Python 3 and then

00:25:46,420 --> 00:25:52,120
getting Python 3 support would have been

00:25:47,860 --> 00:25:56,160
you know a couple days work so for the

00:25:52,120 --> 00:25:56,160
win use that here's links

00:25:59,170 --> 00:26:05,720
the question we have a little bit of

00:26:03,830 --> 00:26:07,760
time for questions but I warn you again

00:26:05,720 --> 00:26:13,910
I'm an architect and I don't do details

00:26:07,760 --> 00:26:17,060
so so it seems to me that cherry pie is

00:26:13,910 --> 00:26:19,790
in a position where performance matters

00:26:17,060 --> 00:26:21,860
whenever an HTTP server and I'm just

00:26:19,790 --> 00:26:24,950
wondering what your observations were

00:26:21,860 --> 00:26:26,600
with the n 2 B&N to you functions and

00:26:24,950 --> 00:26:28,250
wrapping all your string literals did

00:26:26,600 --> 00:26:32,450
you see an impact there our users of

00:26:28,250 --> 00:26:34,760
Python 2.7 suffering due to the port in

00:26:32,450 --> 00:26:37,520
a performance sense or not really that's

00:26:34,760 --> 00:26:40,010
an excellent question the performance of

00:26:37,520 --> 00:26:41,210
cherry pie using these kinds of

00:26:40,010 --> 00:26:42,560
approaches you know with this

00:26:41,210 --> 00:26:44,330
compatibility layer and running through

00:26:42,560 --> 00:26:46,520
all this we actually did not see a

00:26:44,330 --> 00:26:48,290
significant difference doing the

00:26:46,520 --> 00:26:50,120
conversions ourselves where we needed to

00:26:48,290 --> 00:26:53,690
do it where we did see a significant

00:26:50,120 --> 00:26:56,630
difference was when we tried to use some

00:26:53,690 --> 00:26:59,810
of the standard library tools that that

00:26:56,630 --> 00:27:02,120
move for example the incoming payload

00:26:59,810 --> 00:27:04,160
which is bites they try and translated

00:27:02,120 --> 00:27:07,940
it they tried to translate it to unicode

00:27:04,160 --> 00:27:10,040
earlier than we wanted to and we didn't

00:27:07,940 --> 00:27:11,090
want it to happen at all really and so

00:27:10,040 --> 00:27:12,890
there were some things like that that

00:27:11,090 --> 00:27:15,260
really kind of tripped us up so this

00:27:12,890 --> 00:27:17,390
that the conversion will trip you up if

00:27:15,260 --> 00:27:19,040
you do a lot of i/o and are not careful

00:27:17,390 --> 00:27:21,050
about exactly when and where you do the

00:27:19,040 --> 00:27:23,210
conversion what did you do about those

00:27:21,050 --> 00:27:25,100
standard library api's did you stop

00:27:23,210 --> 00:27:26,480
using them in redmond grown versions or

00:27:25,100 --> 00:27:31,580
that's why we subclassed and wrote

00:27:26,480 --> 00:27:33,500
around bridge okay one of the reasons do

00:27:31,580 --> 00:27:35,930
you have any advice about the extension

00:27:33,500 --> 00:27:39,320
models and things like scythes um and I

00:27:35,930 --> 00:27:40,790
do not those are details and it almost

00:27:39,320 --> 00:27:48,050
sounds like code and I'm an architect

00:27:40,790 --> 00:27:50,450
and we don't do that so do you know if

00:27:48,050 --> 00:27:51,920
six comes with a two to six script or

00:27:50,450 --> 00:27:54,140
anything like that since it's if it does

00:27:51,920 --> 00:28:00,130
one with a two to six script instead of

00:27:54,140 --> 00:28:00,130
a 223 script I do not know I

00:28:00,169 --> 00:28:06,239
yes python modernize yes that's the one

00:28:02,789 --> 00:28:07,649
I recommend that as well the one thing I

00:28:06,239 --> 00:28:10,080
forgot to mention about the six module

00:28:07,649 --> 00:28:11,519
is I don't personally know what versions

00:28:10,080 --> 00:28:13,590
of Python it supports I think it's

00:28:11,519 --> 00:28:15,840
fairly broad but i doubt it goes back to

00:28:13,590 --> 00:28:19,559
two not three for example so take that

00:28:15,840 --> 00:28:22,080
with a grain of salt as well no more

00:28:19,559 --> 00:28:24,350
questions thank you very much have a

00:28:22,080 --> 00:28:24,350

YouTube URL: https://www.youtube.com/watch?v=nvkCqFLtcJI


