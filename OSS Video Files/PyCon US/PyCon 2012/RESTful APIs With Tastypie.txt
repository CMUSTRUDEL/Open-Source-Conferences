Title: RESTful APIs With Tastypie
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Daniel Lindsley
Providing full-featured REST APIs is an increasingly popular request. Tastypie allows you to easily implement a customizable REST API for your Python or Django applications.
Captions: 
	00:00:00,000 --> 00:00:06,600
our second talk for the afternoon it's

00:00:03,000 --> 00:00:18,660
restful api s would testify by down

00:00:06,600 --> 00:00:20,279
Danny linsley so good afternoon as one

00:00:18,660 --> 00:00:24,330
said it's restful api is with tasty pie

00:00:20,279 --> 00:00:28,769
or how i learned to stop worrying and

00:00:24,330 --> 00:00:31,199
love the json i'm daniel Inslee I run a

00:00:28,769 --> 00:00:33,059
small web consulting shop called toast

00:00:31,199 --> 00:00:35,640
ribbon I also do open source under that

00:00:33,059 --> 00:00:38,790
moniker and I'm the primary author of

00:00:35,640 --> 00:00:40,290
tasty pie so what is tasty pie you might

00:00:38,790 --> 00:00:44,280
be asking yourself how many people have

00:00:40,290 --> 00:00:45,690
used tasty pie before okay cool for the

00:00:44,280 --> 00:00:48,030
rest of you tasty pie is a rest

00:00:45,690 --> 00:00:51,410
framework for Jengo what that means is

00:00:48,030 --> 00:00:54,660
it cooperates with the restful product

00:00:51,410 --> 00:00:57,870
the restful ideals described in the sum

00:00:54,660 --> 00:01:01,770
of the rfcs it provides a web-based API

00:00:57,870 --> 00:01:03,780
on top of Janko one of the differences

00:01:01,770 --> 00:01:06,119
that many people find when using tasty

00:01:03,780 --> 00:01:08,070
pie versus other API frameworks is this

00:01:06,119 --> 00:01:09,780
concept of being designed for extension

00:01:08,070 --> 00:01:13,860
tasty pie was designed with you in mind

00:01:09,780 --> 00:01:16,170
not just me it suppose supports both the

00:01:13,860 --> 00:01:18,270
ORM that comes with Django as well as

00:01:16,170 --> 00:01:20,100
non-model data so you can represent all

00:01:18,270 --> 00:01:21,900
kinds of data not just things coming out

00:01:20,100 --> 00:01:25,560
of postgres or my sequel but things like

00:01:21,900 --> 00:01:26,670
no sequel log base stores RPC all kinds

00:01:25,560 --> 00:01:28,890
of things you could wrap in them and you

00:01:26,670 --> 00:01:32,189
can find more details out on the

00:01:28,890 --> 00:01:33,509
official website at tasty pie API org so

00:01:32,189 --> 00:01:35,009
first I want to talk a little bit of

00:01:33,509 --> 00:01:36,180
philosophy so that we're all on common

00:01:35,009 --> 00:01:37,350
ground because restful can mean

00:01:36,180 --> 00:01:40,619
different things to a lot of different

00:01:37,350 --> 00:01:43,380
people first is this idea of making

00:01:40,619 --> 00:01:45,420
really good use of HTTP the RFC specs

00:01:43,380 --> 00:01:48,229
for HTTP were written with servers in

00:01:45,420 --> 00:01:50,820
mind so that you could control data and

00:01:48,229 --> 00:01:53,130
fetch resources across the network

00:01:50,820 --> 00:01:55,020
that's how all the main web servers work

00:01:53,130 --> 00:01:58,409
and that's how our API is should ideally

00:01:55,020 --> 00:02:01,380
work there's lots of things that have

00:01:58,409 --> 00:02:04,530
been defined in the rfcs that like using

00:02:01,380 --> 00:02:07,140
proper rest restful methods it should be

00:02:04,530 --> 00:02:09,209
it opponent it should not try to modify

00:02:07,140 --> 00:02:12,150
data on the server post should be

00:02:09,209 --> 00:02:13,590
creating etc etc using proper status

00:02:12,150 --> 00:02:16,440
codes so that you don't

00:02:13,590 --> 00:02:17,790
get a generic 400 error anytime anything

00:02:16,440 --> 00:02:20,790
blows up because that doesn't help

00:02:17,790 --> 00:02:23,910
anyone there's this concept of graceful

00:02:20,790 --> 00:02:26,069
degradation so your API should probably

00:02:23,910 --> 00:02:28,739
be backward compatible because not

00:02:26,069 --> 00:02:30,750
everyone can upgrade the moment you want

00:02:28,739 --> 00:02:32,549
them to upgrade so being able to support

00:02:30,750 --> 00:02:36,239
people who are on an older version of

00:02:32,549 --> 00:02:38,420
the API or to handle gracefully changes

00:02:36,239 --> 00:02:42,390
in it is very useful for people who have

00:02:38,420 --> 00:02:44,040
rarely changing clients the concept of

00:02:42,390 --> 00:02:45,870
flexible serialization because not

00:02:44,040 --> 00:02:49,049
everybody wants JSON some people's tool

00:02:45,870 --> 00:02:52,799
kits are better support yamo or Jace our

00:02:49,049 --> 00:02:55,590
XML in case of iOS there's binary plist

00:02:52,799 --> 00:02:58,560
there's lots of other options but you

00:02:55,590 --> 00:03:00,750
know what that's not enough why not do

00:02:58,560 --> 00:03:02,430
flexible everything because you're

00:03:00,750 --> 00:03:05,040
trying to produce the best possible

00:03:02,430 --> 00:03:06,420
thing for a client to consume they don't

00:03:05,040 --> 00:03:07,769
know anything about your codebase they

00:03:06,420 --> 00:03:11,220
don't know anything about your data all

00:03:07,769 --> 00:03:13,440
they have is this HTTP interface to get

00:03:11,220 --> 00:03:15,000
things out of so customizability should

00:03:13,440 --> 00:03:17,489
be a core feature for both you as a

00:03:15,000 --> 00:03:18,900
developer using tasty pie as well as for

00:03:17,489 --> 00:03:24,269
people on the other end fetching the

00:03:18,900 --> 00:03:26,790
data there's a not as often Lee used

00:03:24,269 --> 00:03:29,160
principle as I would like is this

00:03:26,790 --> 00:03:32,549
concept of round-trip ability of your

00:03:29,160 --> 00:03:34,139
data the idea here is that if you can

00:03:32,549 --> 00:03:36,000
get something from a web service you

00:03:34,139 --> 00:03:38,459
ought to be able to push that same exact

00:03:36,000 --> 00:03:40,170
data back to the web service and have

00:03:38,459 --> 00:03:42,720
the same kind of object or resource

00:03:40,170 --> 00:03:44,190
created on the other end this helps

00:03:42,720 --> 00:03:46,590
discoverability a lot it helps

00:03:44,190 --> 00:03:49,609
documentation it helps clarify what

00:03:46,590 --> 00:03:51,450
things can come in and out of your API

00:03:49,609 --> 00:03:52,919
there's the concept of reasonable

00:03:51,450 --> 00:03:56,010
defaults this is a little bit more

00:03:52,919 --> 00:04:00,269
specific to you know API frameworks as

00:03:56,010 --> 00:04:03,209
opposed to the actual client but you

00:04:00,269 --> 00:04:05,099
want things to be easy for other people

00:04:03,209 --> 00:04:07,500
to use because the harder your API is to

00:04:05,099 --> 00:04:09,269
use the more likely others on the client

00:04:07,500 --> 00:04:12,720
end or you and as the implementer are

00:04:09,269 --> 00:04:15,000
going to hit problems you are eyes

00:04:12,720 --> 00:04:18,530
everywhere we want heito us to be

00:04:15,000 --> 00:04:18,530
persistent throughout

00:04:19,880 --> 00:04:23,900
hey to us if you've never heard the

00:04:21,950 --> 00:04:26,420
acronym means hypermedia is the engine

00:04:23,900 --> 00:04:28,640
of application state what this really

00:04:26,420 --> 00:04:31,070
means is that you should be able to hit

00:04:28,640 --> 00:04:32,900
an API just one endpoint at the highest

00:04:31,070 --> 00:04:34,700
level and you have enough information

00:04:32,900 --> 00:04:37,090
provided back to you to be able to

00:04:34,700 --> 00:04:39,470
explore the entire rest of the get

00:04:37,090 --> 00:04:41,030
interface and be able to read basically

00:04:39,470 --> 00:04:43,070
all the data that's available to you

00:04:41,030 --> 00:04:44,990
without documentation without prior

00:04:43,070 --> 00:04:47,360
knowledge of the structure or anything

00:04:44,990 --> 00:04:50,240
because you get you are eyes back you

00:04:47,360 --> 00:04:51,640
can and as a client to the API the

00:04:50,240 --> 00:04:54,770
people you're designing your API for

00:04:51,640 --> 00:04:56,690
they can just follow right in and keep

00:04:54,770 --> 00:04:58,550
digging through and explore just like

00:04:56,690 --> 00:04:59,900
you use the Python ripple to explore

00:04:58,550 --> 00:05:02,540
features of libraries that you may be

00:04:59,900 --> 00:05:03,920
using having you are eyes everywhere it

00:05:02,540 --> 00:05:11,960
makes it easy for your API to be

00:05:03,920 --> 00:05:15,140
explored so what about tasty pie he

00:05:11,960 --> 00:05:16,670
can't have any pie but you can tasty pie

00:05:15,140 --> 00:05:19,670
builds on top of the facilities that are

00:05:16,670 --> 00:05:21,260
built into Django the idea is that it is

00:05:19,670 --> 00:05:23,210
a third-party app you should be able to

00:05:21,260 --> 00:05:25,370
download it and it should play nicely

00:05:23,210 --> 00:05:28,910
with all the other apps in the Django

00:05:25,370 --> 00:05:31,370
ecosystem we try to follow full HTTP

00:05:28,910 --> 00:05:34,100
cruds I'll methods get post put delete

00:05:31,370 --> 00:05:36,770
patch for those who don't know get is

00:05:34,100 --> 00:05:40,850
equivalent to reading post is generally

00:05:36,770 --> 00:05:44,420
create put is update delete is delete

00:05:40,850 --> 00:05:46,940
and patches a non-official extension to

00:05:44,420 --> 00:05:51,020
the RFC that lets you do more advanced

00:05:46,940 --> 00:05:52,730
things there's this concept of of being

00:05:51,020 --> 00:05:55,070
available for any data source lots of

00:05:52,730 --> 00:05:56,480
people choose to expose the ORM but you

00:05:55,070 --> 00:05:57,710
may not want to expose your database

00:05:56,480 --> 00:06:00,050
structure or it may not make sense to

00:05:57,710 --> 00:06:02,180
expose that structure to a client who's

00:06:00,050 --> 00:06:03,530
consuming your API and of course we've

00:06:02,180 --> 00:06:05,210
already covered designed to be extended

00:06:03,530 --> 00:06:07,160
and we'll talk more about than a few

00:06:05,210 --> 00:06:09,470
minutes out of the box you get a wide

00:06:07,160 --> 00:06:12,940
variety of serialization formats JSON

00:06:09,470 --> 00:06:15,710
XML yeah mph or those dirty Ruby types

00:06:12,940 --> 00:06:18,350
and binary p lists for your iOS

00:06:15,710 --> 00:06:21,710
developers who get a big big performance

00:06:18,350 --> 00:06:23,030
boost out of using pilas 80 haces the

00:06:21,710 --> 00:06:26,780
defaults which we'll see in a few

00:06:23,030 --> 00:06:29,030
minutes and when I was talking about

00:06:26,780 --> 00:06:30,380
having it being designed for extension

00:06:29,030 --> 00:06:32,210
there's tons and tons of places

00:06:30,380 --> 00:06:33,289
throughout tasty pie that you should be

00:06:32,210 --> 00:06:35,509
able to extend

00:06:33,289 --> 00:06:38,629
the built-in API without having to touch

00:06:35,509 --> 00:06:40,129
the source code of tasty pie at all it's

00:06:38,629 --> 00:06:42,979
pretty well tested hovers at about

00:06:40,129 --> 00:06:44,779
eighty percent coverage roughly three

00:06:42,979 --> 00:06:47,059
and a half thousand lines of test code

00:06:44,779 --> 00:06:49,430
and it's pretty decently documented and

00:06:47,059 --> 00:06:51,469
that's getting better all the time so

00:06:49,430 --> 00:06:53,089
for those who you who've never used

00:06:51,469 --> 00:06:55,669
tasty pie before let's talk about a

00:06:53,089 --> 00:06:57,919
sample set up installation is pretty

00:06:55,669 --> 00:07:01,159
easy you just pip install Django tasty

00:06:57,919 --> 00:07:05,119
pie you really ought to be using pip

00:07:01,159 --> 00:07:07,580
please note easy install once its

00:07:05,119 --> 00:07:09,469
installed you simply add the tasty pie

00:07:07,580 --> 00:07:11,330
app to installed apps you don't have to

00:07:09,469 --> 00:07:13,039
use list concatenation just feel free to

00:07:11,330 --> 00:07:17,119
put it in the main list in your settings

00:07:13,039 --> 00:07:22,399
and run manage that pie sync TB that's

00:07:17,119 --> 00:07:25,520
it so now that we have it we probably

00:07:22,399 --> 00:07:26,809
want to try and apply it so the most

00:07:25,520 --> 00:07:28,849
common thing that most people have

00:07:26,809 --> 00:07:30,770
installed in their Jago applications is

00:07:28,849 --> 00:07:34,219
contribute so let's try and set up a

00:07:30,770 --> 00:07:36,379
control off instance at a high level

00:07:34,219 --> 00:07:38,149
like I said you should not be modifying

00:07:36,379 --> 00:07:40,069
tasty pies code unless you have patches

00:07:38,149 --> 00:07:41,749
you want to submit upstream everything

00:07:40,069 --> 00:07:44,259
should be doable from your code so it's

00:07:41,749 --> 00:07:46,849
going to go in your apps not in Django

00:07:44,259 --> 00:07:49,610
we're going to simply define a user or a

00:07:46,849 --> 00:07:53,449
resource for our user model and hook it

00:07:49,610 --> 00:07:55,759
up in the URL com so do not fork Django

00:07:53,449 --> 00:07:58,279
just because it's in control off I don't

00:07:55,759 --> 00:08:01,099
want to see any of you forking Django to

00:07:58,279 --> 00:08:03,469
do this code do not do it what you

00:08:01,099 --> 00:08:06,199
really should be doing is within your

00:08:03,469 --> 00:08:09,199
project or your application go into the

00:08:06,199 --> 00:08:11,029
app make a directory touching it up high

00:08:09,199 --> 00:08:12,979
so that it's been a regular python

00:08:11,029 --> 00:08:16,309
module pretty standard and then touch

00:08:12,979 --> 00:08:18,830
API resources pi and that's enough for

00:08:16,309 --> 00:08:21,709
the setup in that regard to actually

00:08:18,830 --> 00:08:23,479
hook it up to a user we import user from

00:08:21,709 --> 00:08:26,029
its standard place and then we import

00:08:23,479 --> 00:08:28,039
model resource from tasty pie we define

00:08:26,029 --> 00:08:29,419
a user resource class that inherits from

00:08:28,039 --> 00:08:31,129
model resource which will handle some

00:08:29,419 --> 00:08:33,620
introspection and then we define this

00:08:31,129 --> 00:08:36,110
this very familiar inside metaclass

00:08:33,620 --> 00:08:40,120
that's used in many places in Django and

00:08:36,110 --> 00:08:40,120
set up a query set to point to all users

00:08:40,269 --> 00:08:44,959
now that we're done with our resource we

00:08:43,010 --> 00:08:47,240
just simply hook that resource up in the

00:08:44,959 --> 00:08:49,459
URL conf a common way to do this is

00:08:47,240 --> 00:08:51,440
have a core API object which is used to

00:08:49,459 --> 00:08:54,830
collect all these resources and to make

00:08:51,440 --> 00:08:57,050
the the hay dos bits of this work you

00:08:54,830 --> 00:09:01,130
register your resource instance and hook

00:08:57,050 --> 00:09:03,709
up the URLs in the patterns and you've

00:09:01,130 --> 00:09:05,300
created your first API you can now hit

00:09:03,709 --> 00:09:10,899
it in the browser so we'll do a little

00:09:05,300 --> 00:09:12,830
quick demo of that over here I've got a

00:09:10,899 --> 00:09:14,660
django instance with the code we've got

00:09:12,830 --> 00:09:17,390
at the highest level we've got such a

00:09:14,660 --> 00:09:19,339
PIV one the format equals json is not

00:09:17,390 --> 00:09:21,020
required we'll to get into that in a

00:09:19,339 --> 00:09:23,360
moment but for the browser we're going

00:09:21,020 --> 00:09:25,149
to use it we get a list of the end

00:09:23,360 --> 00:09:29,300
points that are that are available in

00:09:25,149 --> 00:09:31,580
this API and we see this slash user here

00:09:29,300 --> 00:09:35,930
so we're going to go to slash user and

00:09:31,580 --> 00:09:37,640
follow where that link points that leads

00:09:35,930 --> 00:09:39,620
us to a list view we get a paginated

00:09:37,640 --> 00:09:41,480
list by default and a list of our

00:09:39,620 --> 00:09:43,970
objects and as you can see there's my

00:09:41,480 --> 00:09:46,040
user record well there's this resource

00:09:43,970 --> 00:09:48,200
URI in here that sub points to this /

00:09:46,040 --> 00:09:51,470
one at the end so let's follow that in

00:09:48,200 --> 00:09:57,470
and now you get a just a bare detail

00:09:51,470 --> 00:09:59,089
view like you might expect so with just

00:09:57,470 --> 00:10:01,130
that little bit of code that we just got

00:09:59,089 --> 00:10:03,770
done using what's there are the

00:10:01,130 --> 00:10:06,950
following things like i said at / v1

00:10:03,770 --> 00:10:09,500
that v1 is a configurable default in the

00:10:06,950 --> 00:10:12,170
API class it's a way to namespace your

00:10:09,500 --> 00:10:14,750
AP is so that you can support a v2 or v3

00:10:12,170 --> 00:10:15,589
or maybe you don't like V whatever and

00:10:14,750 --> 00:10:17,750
you want to have a different kind of

00:10:15,589 --> 00:10:19,220
naming scheme or handle you are is a

00:10:17,750 --> 00:10:22,130
different way maybe you need a different

00:10:19,220 --> 00:10:25,220
base path whatever you need you should

00:10:22,130 --> 00:10:27,380
be able to do / users within that has a

00:10:25,220 --> 00:10:29,329
list of all the users obviously there's

00:10:27,380 --> 00:10:30,950
a detail view the interesting ones that

00:10:29,329 --> 00:10:33,440
we haven't seen are the scheme of you

00:10:30,950 --> 00:10:35,600
and the multiple endpoints schema will

00:10:33,440 --> 00:10:37,430
return a serialized format of all the

00:10:35,600 --> 00:10:40,270
fields that appear on that resource as

00:10:37,430 --> 00:10:43,160
well as definition information like

00:10:40,270 --> 00:10:45,589
defaults does it allow blank what type

00:10:43,160 --> 00:10:48,980
air we usually getting out of that field

00:10:45,589 --> 00:10:51,800
etc etc the multiple lets you specify as

00:10:48,980 --> 00:10:54,079
many non contiguous pk's as you want

00:10:51,800 --> 00:10:56,150
it's basically a fast way to get a lot

00:10:54,079 --> 00:11:00,350
of data that isn't conveniently

00:10:56,150 --> 00:11:01,040
filterable as i said all serialization

00:11:00,350 --> 00:11:03,769
formats are

00:11:01,040 --> 00:11:07,339
so if we go back to the browser we can

00:11:03,769 --> 00:11:10,279
pop in XML and we get back XML without

00:11:07,339 --> 00:11:14,600
having to change anything if we do the

00:11:10,279 --> 00:11:19,040
amal oops there turns out there's an a

00:11:14,600 --> 00:11:23,240
there gotta download and if we open that

00:11:19,040 --> 00:11:25,459
up we have valid llamo and of course

00:11:23,240 --> 00:11:29,389
binary plist is there too it looks

00:11:25,459 --> 00:11:34,339
honestly kind of just like gibberish but

00:11:29,389 --> 00:11:40,660
it's downloaded and it yeah isn't that

00:11:34,339 --> 00:11:46,579
helpful I'd love to debug this so anyway

00:11:40,660 --> 00:11:48,680
now in order to have excuse me in order

00:11:46,579 --> 00:11:52,190
to get those formats to work you do need

00:11:48,680 --> 00:11:53,899
to have lxml IMO and this fantastic

00:11:52,190 --> 00:11:55,399
library called bit list installed but

00:11:53,899 --> 00:11:56,870
they're very easy to install the

00:11:55,399 --> 00:11:58,550
generally install cleanly everywhere and

00:11:56,870 --> 00:12:01,610
it's a nice touch to be able to add

00:11:58,550 --> 00:12:03,949
extra options for other people as i said

00:12:01,610 --> 00:12:06,560
we use that format equals JSON and the

00:12:03,949 --> 00:12:10,010
URL for the browser because browser

00:12:06,560 --> 00:12:13,370
accepts headers send that they want XML

00:12:10,010 --> 00:12:15,649
ahead of application JSON so if I hadn't

00:12:13,370 --> 00:12:17,329
had that format equals JSON in there we

00:12:15,649 --> 00:12:19,519
probably have gotten XML back by default

00:12:17,329 --> 00:12:21,949
even though that's not what the default

00:12:19,519 --> 00:12:23,600
for the resources tasty pie would rather

00:12:21,949 --> 00:12:26,180
that you send the except setter because

00:12:23,600 --> 00:12:27,769
that way you can specify a nice range of

00:12:26,180 --> 00:12:29,779
different content types that you might

00:12:27,769 --> 00:12:31,990
or might not want and whatever it can be

00:12:29,779 --> 00:12:33,920
satisfied first is what will be served

00:12:31,990 --> 00:12:36,290
pagination is the default because

00:12:33,920 --> 00:12:38,029
honestly I don't think anyone wants to

00:12:36,290 --> 00:12:40,519
hit a list endpoint and get a hundred

00:12:38,029 --> 00:12:43,550
thousand records and sit and wait for

00:12:40,519 --> 00:12:45,260
all the serialized objects but it is

00:12:43,550 --> 00:12:47,810
possible to get that and of course

00:12:45,260 --> 00:12:51,800
built-in is this read-only get access

00:12:47,810 --> 00:12:53,300
now we do have some problems if you're

00:12:51,800 --> 00:12:55,010
paying attention we're leaking some

00:12:53,300 --> 00:12:56,839
information that maybe we don't want to

00:12:55,010 --> 00:12:59,750
leak over the Internet like I want to

00:12:56,839 --> 00:13:01,550
know my email please don't spam me by

00:12:59,750 --> 00:13:03,139
password so I hope you don't have

00:13:01,550 --> 00:13:07,970
photographic memory and have my sháá

00:13:03,139 --> 00:13:11,000
memorized and some other Django specific

00:13:07,970 --> 00:13:12,680
options there's we're lacking the

00:13:11,000 --> 00:13:14,110
ability to filter right now all we could

00:13:12,680 --> 00:13:17,140
really get is the full list if they

00:13:14,110 --> 00:13:19,649
and go page by page we don't have any

00:13:17,140 --> 00:13:22,269
authentication or authorization in place

00:13:19,649 --> 00:13:25,450
caching is disabled by default for good

00:13:22,269 --> 00:13:27,579
reason and throttling is there's no

00:13:25,450 --> 00:13:30,100
throttling there so our servers can get

00:13:27,579 --> 00:13:32,220
you know trashed and we can't do

00:13:30,100 --> 00:13:35,290
anything about it so let's fix those

00:13:32,220 --> 00:13:37,630
fixing the data leaks is easy there's a

00:13:35,290 --> 00:13:40,060
meta option called excludes we just give

00:13:37,630 --> 00:13:42,959
it a string list or a list of strings of

00:13:40,060 --> 00:13:45,459
field names we don't want to show up

00:13:42,959 --> 00:13:48,130
authentication asks the question our

00:13:45,459 --> 00:13:50,019
unity recognized user are you present in

00:13:48,130 --> 00:13:52,329
in this case in the Django users table

00:13:50,019 --> 00:13:53,829
or you know maybe you have ldap

00:13:52,329 --> 00:13:56,410
authorization or I'm sorry

00:13:53,829 --> 00:14:00,130
authentication or some other mechanism

00:13:56,410 --> 00:14:02,589
so we just want to know are you able to

00:14:00,130 --> 00:14:04,540
get into this system adding that is easy

00:14:02,589 --> 00:14:06,940
we have all the same things in the meta

00:14:04,540 --> 00:14:09,180
as we did before but now we import this

00:14:06,940 --> 00:14:13,209
basic authentication class which fruits

00:14:09,180 --> 00:14:14,620
HTTP basic auth on the resource that's

00:14:13,209 --> 00:14:18,579
now powered off the username and

00:14:14,620 --> 00:14:21,399
password from the users table filtering

00:14:18,579 --> 00:14:23,949
is also simple we define a filtering

00:14:21,399 --> 00:14:26,680
meta option and handed a dictionary the

00:14:23,949 --> 00:14:29,769
keys are all the fields that your innate

00:14:26,680 --> 00:14:31,690
that you can filter on in this case we

00:14:29,769 --> 00:14:34,720
use the special constant all to say hey

00:14:31,690 --> 00:14:37,029
the list of filter types that Django

00:14:34,720 --> 00:14:39,910
supports is really really big and it

00:14:37,029 --> 00:14:43,149
sucks to type out just support all the

00:14:39,910 --> 00:14:44,860
RM methods if that doesn't suit your

00:14:43,149 --> 00:14:47,350
needs you can provide a list that just

00:14:44,860 --> 00:14:49,329
says hey only range greater than less

00:14:47,350 --> 00:14:53,709
than and the equal variants are ok for

00:14:49,329 --> 00:14:55,329
this field type and now using that those

00:14:53,709 --> 00:14:59,440
filtering options that we just specified

00:14:55,329 --> 00:15:01,180
you can put curl in and say hey only

00:14:59,440 --> 00:15:04,329
user names that start with a or only

00:15:01,180 --> 00:15:08,230
dates that date joins that are greater

00:15:04,329 --> 00:15:09,899
than december of last year authorization

00:15:08,230 --> 00:15:12,160
is one that people often get confused

00:15:09,899 --> 00:15:15,430
authentication just says do we know who

00:15:12,160 --> 00:15:17,829
you are authorization says can you do

00:15:15,430 --> 00:15:19,510
that you're ok we know who you are but

00:15:17,829 --> 00:15:23,050
I'm not sure you're allowed to save that

00:15:19,510 --> 00:15:24,819
object adding authorization again

00:15:23,050 --> 00:15:27,190
equally simple we're going to toss in

00:15:24,819 --> 00:15:27,980
this authorization option with that

00:15:27,190 --> 00:15:30,200
points to you Django

00:15:27,980 --> 00:15:32,360
authorization that performs checks on

00:15:30,200 --> 00:15:34,280
the user against the permissions table

00:15:32,360 --> 00:15:35,900
that comes with contribute so anything

00:15:34,280 --> 00:15:37,850
they can do from the Django admin they

00:15:35,900 --> 00:15:39,770
now can do through your API and if they

00:15:37,850 --> 00:15:42,470
don't say for instance have delete user

00:15:39,770 --> 00:15:46,610
permission they can't do it through the

00:15:42,470 --> 00:15:48,680
API either caching again more of the

00:15:46,610 --> 00:15:50,210
same we define a cash option there's the

00:15:48,680 --> 00:15:52,790
simple cash class that's included with

00:15:50,210 --> 00:15:53,990
tasty pie it we're going to talk a

00:15:52,790 --> 00:15:55,010
little bit more about cashing in a few

00:15:53,990 --> 00:15:56,690
minutes because that's important when

00:15:55,010 --> 00:15:58,610
you start talking about api's and

00:15:56,690 --> 00:16:00,260
machines consuming AP is this isn't like

00:15:58,610 --> 00:16:02,600
web pages where somebody clicks every 10

00:16:00,260 --> 00:16:07,250
seconds you can be flooded very very

00:16:02,600 --> 00:16:09,380
easily and on the topic of being flooded

00:16:07,250 --> 00:16:11,480
there's the throttle implementations

00:16:09,380 --> 00:16:13,400
chain are tasty pie ships with a couple

00:16:11,480 --> 00:16:15,490
different throttle variants this one is

00:16:13,400 --> 00:16:18,320
an example of using cash DB which will

00:16:15,490 --> 00:16:24,440
essentially do right through and log

00:16:18,320 --> 00:16:27,020
user accesses to a table so what we have

00:16:24,440 --> 00:16:28,490
now is everything that we had on the

00:16:27,020 --> 00:16:31,090
previous slide and the previous time we

00:16:28,490 --> 00:16:35,180
asked what was there we also now have

00:16:31,090 --> 00:16:37,160
full crud access to our API only

00:16:35,180 --> 00:16:38,660
registered users can use this now and

00:16:37,160 --> 00:16:41,990
only work with the things that they are

00:16:38,660 --> 00:16:45,260
allowed to object level caching just at

00:16:41,990 --> 00:16:47,900
the get detail level and the cache DB

00:16:45,260 --> 00:16:49,400
throttle will now limit each user to 150

00:16:47,900 --> 00:16:53,450
requests per hour again this is

00:16:49,400 --> 00:16:58,450
configurable through kwargs to the cache

00:16:53,450 --> 00:16:58,450
DB throttle class and we can now filter

00:16:59,380 --> 00:17:03,950
so I'd like to kind of go back to a

00:17:02,600 --> 00:17:05,420
little bit more philosophy and talk

00:17:03,950 --> 00:17:07,010
about extensibility because this is

00:17:05,420 --> 00:17:10,760
something that comes up a lot with tasty

00:17:07,010 --> 00:17:13,370
pie the goal of the project was to give

00:17:10,760 --> 00:17:15,620
the people implementing api's lots and

00:17:13,370 --> 00:17:17,840
lots of tools and a lot and a very easy

00:17:15,620 --> 00:17:19,940
way to extend things when they don't

00:17:17,840 --> 00:17:21,410
meet their needs so if you've been

00:17:19,940 --> 00:17:22,790
watching the slides you might be

00:17:21,410 --> 00:17:25,820
wondering why are there so many classes

00:17:22,790 --> 00:17:28,100
is this guy crazy no I'm not object

00:17:25,820 --> 00:17:30,740
oriented crazy what it does is it lets

00:17:28,100 --> 00:17:34,510
it puts the tools in your hands to

00:17:30,740 --> 00:17:38,870
easily implement different functionality

00:17:34,510 --> 00:17:40,610
why so many classes we just had a wide

00:17:38,870 --> 00:17:41,299
variety of things that we set up as meta

00:17:40,610 --> 00:17:44,239
options

00:17:41,299 --> 00:17:45,860
I believe that composition is much more

00:17:44,239 --> 00:17:48,259
powerful than inheritance so having a

00:17:45,860 --> 00:17:50,179
lot of small classes that enable

00:17:48,259 --> 00:17:53,029
interchanging behaviors very easy is

00:17:50,179 --> 00:17:56,239
much stronger than trying to do a lot of

00:17:53,029 --> 00:17:57,950
mix-ins or having just one really really

00:17:56,239 --> 00:17:59,539
big resource that now you have to pick

00:17:57,950 --> 00:18:04,009
apart all kinds of crazy things with him

00:17:59,539 --> 00:18:06,619
an example of composition being used is

00:18:04,009 --> 00:18:09,379
things like the dunder methods in Python

00:18:06,619 --> 00:18:11,139
where you'll call sale n of a list and

00:18:09,379 --> 00:18:14,330
it'll actually call the dunder Len

00:18:11,139 --> 00:18:16,809
method on the list object that's an

00:18:14,330 --> 00:18:19,609
example of composition and delegation

00:18:16,809 --> 00:18:21,289
and why so many methods if you go dive

00:18:19,609 --> 00:18:24,230
through the docs or through the source

00:18:21,289 --> 00:18:27,619
code you'll find that resource has just

00:18:24,230 --> 00:18:29,359
a ton of methods it was done so that you

00:18:27,619 --> 00:18:31,519
have plenty of hooks to be able to

00:18:29,359 --> 00:18:34,519
change behaviors without having to copy

00:18:31,519 --> 00:18:39,499
paste huge swathes of code and swap them

00:18:34,519 --> 00:18:41,389
out tasty pie does try to use reasonable

00:18:39,499 --> 00:18:44,629
defaults we think most people like JSON

00:18:41,389 --> 00:18:46,429
and that you probably want full crud and

00:18:44,629 --> 00:18:50,359
all these other things but like I've

00:18:46,429 --> 00:18:51,739
said your mileage may vary so making it

00:18:50,359 --> 00:18:55,460
easy for you is one of the big

00:18:51,739 --> 00:18:57,799
priorities we already covered a lot of

00:18:55,460 --> 00:19:01,759
the classes that come with tasty pie and

00:18:57,799 --> 00:19:05,499
enable the changing isolated behaviors

00:19:01,759 --> 00:19:08,090
and these all of these classes have

00:19:05,499 --> 00:19:11,210
default implementations that are present

00:19:08,090 --> 00:19:12,619
but are pretty short and pretty easy to

00:19:11,210 --> 00:19:16,850
swap out with things that suit your

00:19:12,619 --> 00:19:18,549
needs better and again keeping with the

00:19:16,850 --> 00:19:21,019
concept of composition and delegation

00:19:18,549 --> 00:19:23,359
resource has lots of methods that then

00:19:21,019 --> 00:19:27,259
call out to those classes so you can

00:19:23,359 --> 00:19:29,600
have a custom authentication class say

00:19:27,259 --> 00:19:31,549
your your needs are better suited bio

00:19:29,600 --> 00:19:34,269
OAuth 2 which for instance isn't

00:19:31,549 --> 00:19:37,519
included because it's not final yet ah

00:19:34,269 --> 00:19:40,249
you can have cases where specific

00:19:37,519 --> 00:19:42,019
resources will be able to skip those

00:19:40,249 --> 00:19:43,399
things based on just method

00:19:42,019 --> 00:19:46,429
implementations rather than swapping

00:19:43,399 --> 00:19:47,899
things out so as an example of how we

00:19:46,429 --> 00:19:50,960
can customize things let's talk about

00:19:47,899 --> 00:19:54,379
customizing serialization by default we

00:19:50,960 --> 00:19:55,220
supported these formats but let's say we

00:19:54,379 --> 00:19:57,110
want to trim it down

00:19:55,220 --> 00:19:58,850
to JSON and XML and then we're going to

00:19:57,110 --> 00:20:02,450
add a whole new type that isn't present

00:19:58,850 --> 00:20:04,460
anywhere customizing things down this is

00:20:02,450 --> 00:20:06,049
a very common thing people want they

00:20:04,460 --> 00:20:07,640
just want JSON and XML because they

00:20:06,049 --> 00:20:10,100
don't have anyone consuming Amalur

00:20:07,640 --> 00:20:11,780
binary plist and they want to save

00:20:10,100 --> 00:20:14,380
themselves some hassle have setup save

00:20:11,780 --> 00:20:17,090
some possible security risks etc etc

00:20:14,380 --> 00:20:22,039
formats is easy you simply pass kwargs

00:20:17,090 --> 00:20:23,890
and say hey just JSON or XML so what the

00:20:22,039 --> 00:20:26,390
what serialization format should we add

00:20:23,890 --> 00:20:35,320
any thoughts we've got we've got JSON

00:20:26,390 --> 00:20:39,080
XML oh I wish I double cat let's do HTML

00:20:35,320 --> 00:20:40,580
so using very standard Django things

00:20:39,080 --> 00:20:41,780
we're going to import rendered response

00:20:40,580 --> 00:20:45,260
because we're going to be rendering a

00:20:41,780 --> 00:20:47,780
template with some context and we add on

00:20:45,260 --> 00:20:50,000
to the formats this HTML option which

00:20:47,780 --> 00:20:56,270
basically says hey if the person is

00:20:50,000 --> 00:21:00,770
requesting I accept header with wow text

00:20:56,270 --> 00:21:02,870
HTML man my mime types horrible if they

00:21:00,770 --> 00:21:04,429
request HTML this serializer should be

00:21:02,870 --> 00:21:07,130
able to support that if not it should

00:21:04,429 --> 00:21:09,860
fall back to other options we define a

00:21:07,130 --> 00:21:12,620
to HTML method which says hey we're

00:21:09,860 --> 00:21:15,320
sending data out we need to take this

00:21:12,620 --> 00:21:19,909
rich Python model and send it out as

00:21:15,320 --> 00:21:21,440
HTML pick a couple template names we're

00:21:19,909 --> 00:21:23,030
going to look at if objects isn't data

00:21:21,440 --> 00:21:25,159
to figure out if it's a list view or not

00:21:23,030 --> 00:21:29,510
and we just render the template as

00:21:25,159 --> 00:21:32,240
normal getting data back from the users

00:21:29,510 --> 00:21:34,190
a little more complex we're going to

00:21:32,240 --> 00:21:36,740
have to import CGI in the string io

00:21:34,190 --> 00:21:39,470
because we're getting x dub dub dub form

00:21:36,740 --> 00:21:41,299
encoded data so we just set up a cgi

00:21:39,470 --> 00:21:43,970
field store using pretty standard stuff

00:21:41,299 --> 00:21:45,919
to read that form that form data back

00:21:43,970 --> 00:21:49,400
and we set up a dictionary for ourselves

00:21:45,919 --> 00:21:51,620
based on those keys obviously if you put

00:21:49,400 --> 00:21:53,299
this in production you probably want

00:21:51,620 --> 00:21:55,010
some more checks and a little bit more

00:21:53,299 --> 00:21:57,740
detailed flushes out but this is an

00:21:55,010 --> 00:21:59,450
example implementation and then hooking

00:21:57,740 --> 00:22:02,480
it up is easy we just import our

00:21:59,450 --> 00:22:06,140
serializer from where we put it in our

00:22:02,480 --> 00:22:07,770
in our application and then set it up as

00:22:06,140 --> 00:22:12,330
the serializer object with

00:22:07,770 --> 00:22:15,990
for formats and we're done so I'm I

00:22:12,330 --> 00:22:19,380
mentioned earlier that tasty pie tries

00:22:15,990 --> 00:22:21,560
to be tied to the ORM something you

00:22:19,380 --> 00:22:23,400
haven't seen so far is this concept of

00:22:21,560 --> 00:22:25,230
customizing the representation that

00:22:23,400 --> 00:22:27,270
comes back maybe you don't want to show

00:22:25,230 --> 00:22:28,500
everyone what's in your database or

00:22:27,270 --> 00:22:30,480
maybe your database structure doesn't

00:22:28,500 --> 00:22:32,910
make sense for someone consuming the API

00:22:30,480 --> 00:22:35,430
so what you can do is you can use fields

00:22:32,910 --> 00:22:38,460
to customize how the data is presented

00:22:35,430 --> 00:22:41,430
to the your clients just like things

00:22:38,460 --> 00:22:43,410
like model forms or forms or models you

00:22:41,430 --> 00:22:46,200
can control what's exposed on these

00:22:43,410 --> 00:22:47,700
resource objects using fields and just

00:22:46,200 --> 00:22:51,840
like Django you use a very familiar

00:22:47,700 --> 00:22:53,970
declarative syntax so in this case user

00:22:51,840 --> 00:22:56,130
objects in Django have this get full

00:22:53,970 --> 00:22:58,470
name method it's an attribute on hanging

00:22:56,130 --> 00:23:00,120
out on the user object so we're going to

00:22:58,470 --> 00:23:02,580
set up a full name field that's included

00:23:00,120 --> 00:23:05,190
on our user resource we put in it's a

00:23:02,580 --> 00:23:06,810
it's a character-filled and get full

00:23:05,190 --> 00:23:08,670
name is a callable which tasty pie can

00:23:06,810 --> 00:23:10,500
automatically handle so we just pass in

00:23:08,670 --> 00:23:12,600
the method name as the attribute to be

00:23:10,500 --> 00:23:13,830
accessed and it could be blank if they

00:23:12,600 --> 00:23:17,190
haven't filled in their username and Pat

00:23:13,830 --> 00:23:25,230
our first name and last name so we allow

00:23:17,190 --> 00:23:27,960
for that similarly to form you can also

00:23:25,230 --> 00:23:29,880
control how things are presented in

00:23:27,960 --> 00:23:33,180
tasty pie it's called the hydrate and

00:23:29,880 --> 00:23:35,940
dehydrate cycles this is roughly

00:23:33,180 --> 00:23:38,820
analogous to form clean if anyone has

00:23:35,940 --> 00:23:41,070
done advanced forum custom or form

00:23:38,820 --> 00:23:43,410
customizations you'll find a lot of

00:23:41,070 --> 00:23:45,780
similarities here and what dehydrate and

00:23:43,410 --> 00:23:48,210
hydrate lets you do is they let you take

00:23:45,780 --> 00:23:49,860
this rich data model that you have you

00:23:48,210 --> 00:23:51,750
you've got a model object with lots of

00:23:49,860 --> 00:23:53,400
methods and lots and lots of fields

00:23:51,750 --> 00:23:55,440
straight out of your database and what

00:23:53,400 --> 00:23:58,560
you need to send across to the user is a

00:23:55,440 --> 00:24:00,600
very thin serialized piece of data with

00:23:58,560 --> 00:24:02,610
very simple types they're kind of

00:24:00,600 --> 00:24:04,530
different and being able to map between

00:24:02,610 --> 00:24:07,710
them is what hydrate and dehydrate lets

00:24:04,530 --> 00:24:10,170
you do dehydrate controls going from the

00:24:07,710 --> 00:24:12,270
rich object to the skinny serialization

00:24:10,170 --> 00:24:13,920
and hydrate goes the opposite way taking

00:24:12,270 --> 00:24:17,010
that skinny serialization and making it

00:24:13,920 --> 00:24:19,560
a full-fledged model again when you set

00:24:17,010 --> 00:24:21,299
the attribute like the get full name

00:24:19,560 --> 00:24:23,100
earlier

00:24:21,299 --> 00:24:26,159
it's automatically handled by tasty pie

00:24:23,100 --> 00:24:27,889
to just call the at or either access the

00:24:26,159 --> 00:24:31,710
attribute or call it if it's callable

00:24:27,889 --> 00:24:34,559
but you can provide methods on your

00:24:31,710 --> 00:24:37,230
resource that do more advanced things so

00:24:34,559 --> 00:24:41,190
for instance the get full name method on

00:24:37,230 --> 00:24:44,190
user can't handle data coming back it's

00:24:41,190 --> 00:24:46,950
strictly only for presentation so if you

00:24:44,190 --> 00:24:50,220
had this on your resource a user might

00:24:46,950 --> 00:24:52,679
try and send get our full name as part

00:24:50,220 --> 00:24:56,429
of a post and it would fail miserably on

00:24:52,679 --> 00:24:58,350
them so what we do is the we're defining

00:24:56,429 --> 00:25:01,169
a dehydrate full name and hydrate full

00:24:58,350 --> 00:25:02,820
name methods to handle this cycle the

00:25:01,169 --> 00:25:04,799
dehydrated full name actually isn't

00:25:02,820 --> 00:25:06,840
required for this example because of the

00:25:04,799 --> 00:25:09,570
attribute access but for demonstration

00:25:06,840 --> 00:25:11,489
purposes it's basically just dehydrate

00:25:09,570 --> 00:25:13,769
underscore and then the field name we

00:25:11,489 --> 00:25:16,529
get this bundle which is a collection of

00:25:13,769 --> 00:25:18,809
all the data associated with the request

00:25:16,529 --> 00:25:20,730
and we simply just call the full name

00:25:18,809 --> 00:25:23,129
it's exactly what the attribute access

00:25:20,730 --> 00:25:30,090
would have been doing but is the more

00:25:23,129 --> 00:25:33,119
verbose is the more verbose way of

00:25:30,090 --> 00:25:36,239
putting it similarly hydrate full name

00:25:33,119 --> 00:25:38,340
is them sending full name and it's

00:25:36,239 --> 00:25:40,139
coming back into your API since Django

00:25:38,340 --> 00:25:41,609
doesn't provide any functionality for

00:25:40,139 --> 00:25:43,739
trying to figure out a first name and

00:25:41,609 --> 00:25:45,029
last name we simply just access the data

00:25:43,739 --> 00:25:47,070
that's coming back from the user which

00:25:45,029 --> 00:25:49,529
is a dictionary we try and get full name

00:25:47,070 --> 00:25:51,119
out of it if it's there split it up take

00:25:49,529 --> 00:25:52,710
and assume that whatever comes out of

00:25:51,119 --> 00:25:54,419
that white space split the first part of

00:25:52,710 --> 00:25:56,399
it is the first name and whatever is

00:25:54,419 --> 00:26:00,480
left is the last name very simplistic

00:25:56,399 --> 00:26:04,200
but should suit this example and this is

00:26:00,480 --> 00:26:05,730
just like the barest barest

00:26:04,200 --> 00:26:08,820
demonstration of hydrate and dehydrate

00:26:05,730 --> 00:26:11,730
you can do full data wide changes you

00:26:08,820 --> 00:26:14,279
can modify all kinds of things and it is

00:26:11,730 --> 00:26:17,429
a very powerful thing to be able to add

00:26:14,279 --> 00:26:19,350
and what you're not seeing is that all

00:26:17,429 --> 00:26:21,629
these fields that we saw in the example

00:26:19,350 --> 00:26:28,309
we're already introspective for you by

00:26:21,629 --> 00:26:28,309
model resource serious okay

00:26:29,299 --> 00:26:47,360
so questions can i cruise through just

00:26:43,830 --> 00:26:50,760
some highlights Oh quick okay so caching

00:26:47,360 --> 00:26:52,230
caching is very simple in tasty pie it's

00:26:50,760 --> 00:26:56,490
intentionally simple because it's very

00:26:52,230 --> 00:26:58,230
complex and it it you you have a hard

00:26:56,490 --> 00:26:59,700
time generalizing it so what you should

00:26:58,230 --> 00:27:03,090
be doing is you should be using varnish

00:26:59,700 --> 00:27:04,830
it's a super fast caching reverse proxy

00:27:03,090 --> 00:27:06,870
written in C it does a great job

00:27:04,830 --> 00:27:08,940
handling get requests and already

00:27:06,870 --> 00:27:10,919
handles all the complexities that could

00:27:08,940 --> 00:27:14,760
be involved with complex URIs and

00:27:10,919 --> 00:27:16,710
request headers and whatnot you didn't

00:27:14,760 --> 00:27:18,870
get to see it but tasty pie can also be

00:27:16,710 --> 00:27:20,400
used with non 0 RM data sources if you

00:27:18,870 --> 00:27:22,320
hit up the docs there's an example that

00:27:20,400 --> 00:27:27,660
connects it up to rioc which is a no

00:27:22,320 --> 00:27:28,740
sequel data store a lot of this seemed

00:27:27,660 --> 00:27:32,610
like it would be really really useful

00:27:28,740 --> 00:27:34,230
and not very Django specific so at the

00:27:32,610 --> 00:27:36,750
end of last year I actually tried to

00:27:34,230 --> 00:27:39,240
extract out those common like these

00:27:36,750 --> 00:27:40,770
common non Django specific things into

00:27:39,240 --> 00:27:43,290
something that all Python web frameworks

00:27:40,770 --> 00:27:44,760
could use it failed kind of miserably

00:27:43,290 --> 00:27:48,840
for a variety of reasons that would be

00:27:44,760 --> 00:27:54,590
happy to talk about afterward and we'll

00:27:48,840 --> 00:27:54,590
call that good so thank you very much

00:28:01,309 --> 00:28:07,020
questions if there's questions there's a

00:28:05,280 --> 00:28:08,400
microphone here's a if you have a

00:28:07,020 --> 00:28:15,090
question please walk down to the

00:28:08,400 --> 00:28:18,900
microphone what was the monospaced

00:28:15,090 --> 00:28:23,760
typeface that you used odd that's mana

00:28:18,900 --> 00:28:26,400
fur I have a question about the

00:28:23,760 --> 00:28:29,490
permission framework is are you able to

00:28:26,400 --> 00:28:32,610
have complex permissions that depends on

00:28:29,490 --> 00:28:34,830
the context for example if I'm a user

00:28:32,610 --> 00:28:38,010
that can delete only the post that I

00:28:34,830 --> 00:28:41,730
have created hmm is that possible it is

00:28:38,010 --> 00:28:44,280
possible there is some most people refer

00:28:41,730 --> 00:28:46,290
to that as row level permissions and

00:28:44,280 --> 00:28:49,050
there's a huge variety obviously of

00:28:46,290 --> 00:28:51,120
complex things on top of that it's

00:28:49,050 --> 00:28:53,820
doable right now with not a lot of code

00:28:51,120 --> 00:28:55,890
there's a branch in the works it's going

00:28:53,820 --> 00:28:59,429
to make it even better so yes it is

00:28:55,890 --> 00:29:02,610
possible thank you yep could you tell us

00:28:59,429 --> 00:29:05,070
a little more about the non RM part of

00:29:02,610 --> 00:29:07,620
the API so just where so which I don't

00:29:05,070 --> 00:29:09,420
actually have remodel underneath it I'm

00:29:07,620 --> 00:29:12,570
just pulling data from somewhere else

00:29:09,420 --> 00:29:14,460
sure so a model resource if you go

00:29:12,570 --> 00:29:16,020
source dive this was in the slides that

00:29:14,460 --> 00:29:19,470
I didn't get to if you go source dive

00:29:16,020 --> 00:29:22,200
into tasty pie resources pie you'll find

00:29:19,470 --> 00:29:25,110
that comparatively model resource is

00:29:22,200 --> 00:29:27,900
tiny because all it really does is just

00:29:25,110 --> 00:29:29,850
works with the ORM and outside of that

00:29:27,900 --> 00:29:33,210
everything else is handled in this is in

00:29:29,850 --> 00:29:35,370
this more generic resource class and you

00:29:33,210 --> 00:29:37,140
can apply it to pretty much any data

00:29:35,370 --> 00:29:38,970
source by just implementing like a

00:29:37,140 --> 00:29:42,740
couple methods like implementing full

00:29:38,970 --> 00:29:42,740
get support is overriding three methods

00:29:44,360 --> 00:29:50,520
hi um quick question regarding speak

00:29:47,880 --> 00:29:54,090
into the mic alone yeah quick question

00:29:50,520 --> 00:29:57,570
regarding versioning I think you seem to

00:29:54,090 --> 00:29:58,980
prefer to put version numbers in the URI

00:29:57,570 --> 00:30:01,830
that you're requesting how do you feel

00:29:58,980 --> 00:30:04,590
about that versus specifying that in the

00:30:01,830 --> 00:30:09,240
headers there is a pull request on

00:30:04,590 --> 00:30:12,750
headers I don't know how I feel on the

00:30:09,240 --> 00:30:13,980
one hand headers look like I don't

00:30:12,750 --> 00:30:15,720
really know

00:30:13,980 --> 00:30:18,570
what's gained by doing headers over the

00:30:15,720 --> 00:30:22,200
URL other than like maybe your URL looks

00:30:18,570 --> 00:30:23,820
slightly cleaner or like an argument a

00:30:22,200 --> 00:30:25,860
lot of people uses that you know they

00:30:23,820 --> 00:30:26,910
don't have to the clients don't have to

00:30:25,860 --> 00:30:31,049
go through and change a whole bunch of

00:30:26,910 --> 00:30:32,610
URLs in their application and to me that

00:30:31,049 --> 00:30:34,200
should already be a global or a

00:30:32,610 --> 00:30:36,450
configuration thing that's already only

00:30:34,200 --> 00:30:40,110
in one place because the route is always

00:30:36,450 --> 00:30:42,720
the same for all of these things what I

00:30:40,110 --> 00:30:46,020
like about the non header based approach

00:30:42,720 --> 00:30:49,590
is that it's immediately obvious in the

00:30:46,020 --> 00:30:52,980
URL what version you're getting and it's

00:30:49,590 --> 00:30:54,900
it's very it's explicit and takes not a

00:30:52,980 --> 00:30:57,210
lot of work with other libraries or

00:30:54,900 --> 00:30:59,880
extending things so it's mostly a

00:30:57,210 --> 00:31:02,490
convenience and clarity thing like those

00:30:59,880 --> 00:31:04,590
those URI is that that tasty pie uses

00:31:02,490 --> 00:31:07,530
all throughout it if you're relying on

00:31:04,590 --> 00:31:09,450
headers now there's some question of

00:31:07,530 --> 00:31:12,360
like are you mixing and matching things

00:31:09,450 --> 00:31:14,340
are you accessing a newer API than you

00:31:12,360 --> 00:31:16,770
intended to by accident when you're like

00:31:14,340 --> 00:31:18,330
if you're just clicking through or if

00:31:16,770 --> 00:31:20,160
there's an error in the code you might

00:31:18,330 --> 00:31:23,790
you know you find in cases where you may

00:31:20,160 --> 00:31:27,270
be crossing API versions so that that's

00:31:23,790 --> 00:31:28,830
how I feel but if nothing else making it

00:31:27,270 --> 00:31:33,799
easy to do the header based approach is

00:31:28,830 --> 00:31:39,450
high up on the list thank you yep hi

00:31:33,799 --> 00:31:41,549
picking up on the header question what

00:31:39,450 --> 00:31:44,130
do you how do you feel about sticking to

00:31:41,549 --> 00:31:46,410
our Roy Fielding's you know original

00:31:44,130 --> 00:31:50,220
restful approaches because we have sort

00:31:46,410 --> 00:31:52,770
of been like going away from it and I

00:31:50,220 --> 00:31:55,559
see that as a practical approach to go

00:31:52,770 --> 00:31:58,500
away from the his original you know

00:31:55,559 --> 00:32:01,610
ideas but how do you feel about it being

00:31:58,500 --> 00:32:04,140
the you know developer of tasty pie I

00:32:01,610 --> 00:32:06,570
tend to take a move a pragmatic approach

00:32:04,140 --> 00:32:10,440
to it where it makes sense I'd rather

00:32:06,570 --> 00:32:12,390
stick to rest because for for all the

00:32:10,440 --> 00:32:15,630
shortcomings it's at least reasonably

00:32:12,390 --> 00:32:18,419
well defined and many people agree on at

00:32:15,630 --> 00:32:20,460
least the big picture portions of it

00:32:18,419 --> 00:32:23,549
versus things like our PC and soap which

00:32:20,460 --> 00:32:25,559
can be you know whatever so where

00:32:23,549 --> 00:32:27,870
possible I try to stick to rest now that

00:32:25,559 --> 00:32:29,280
being said if you have you know

00:32:27,870 --> 00:32:31,050
custom behavior like you do need to make

00:32:29,280 --> 00:32:33,270
some kind of like RPC call or you have

00:32:31,050 --> 00:32:35,370
something that isn't like restful you're

00:32:33,270 --> 00:32:36,630
not modifying data specifically but

00:32:35,370 --> 00:32:39,390
maybe making some kind of atomic

00:32:36,630 --> 00:32:43,350
operation adding endpoints is as simple

00:32:39,390 --> 00:32:45,690
as implementing a base or is as simple

00:32:43,350 --> 00:32:47,700
as implementing a override URLs method

00:32:45,690 --> 00:32:50,820
and then just defining another method on

00:32:47,700 --> 00:32:53,750
your resource it's like get underscore

00:32:50,820 --> 00:32:55,680
comments or something like that so

00:32:53,750 --> 00:32:57,390
generally try to stick to rest as much

00:32:55,680 --> 00:32:58,890
as possible and then where I find it

00:32:57,390 --> 00:33:05,480
doesn't suit my needs that's when I'll

00:32:58,890 --> 00:33:08,460
deviate into other things thank you hi

00:33:05,480 --> 00:33:13,890
what's the difference between the latest

00:33:08,460 --> 00:33:17,220
beta version and release version more of

00:33:13,890 --> 00:33:19,890
the latest trunk herb nut trunk I'm

00:33:17,220 --> 00:33:21,870
sorry latest get master is not wildly

00:33:19,890 --> 00:33:25,770
different from the most recent release

00:33:21,870 --> 00:33:27,929
which was 0.9 point 11 the idea was that

00:33:25,770 --> 00:33:30,690
actually this should have been version 1

00:33:27,929 --> 00:33:33,780
a while ago there is a release in

00:33:30,690 --> 00:33:35,130
progress for releasing an updated

00:33:33,780 --> 00:33:38,640
version which addresses some security

00:33:35,130 --> 00:33:42,300
issues and a couple other patches the

00:33:38,640 --> 00:33:46,020
roadmap to v1 is marked on github and

00:33:42,300 --> 00:33:47,400
it's basically just things that are I'm

00:33:46,020 --> 00:33:48,840
not comfortable with committing to

00:33:47,400 --> 00:33:51,780
backward and compatibility at this point

00:33:48,840 --> 00:33:56,490
so using get master vs the last release

00:33:51,780 --> 00:33:58,260
is not wildly different that's all the

00:33:56,490 --> 00:34:02,600
time we have questions so I want to take

00:33:58,260 --> 00:34:02,600

YouTube URL: https://www.youtube.com/watch?v=Zv26xHYlc8s


