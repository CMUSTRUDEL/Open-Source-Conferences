Title: Practicing Continuous Deployment
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	David Cramer
Practice iterative development like the pros. Release sooner, faster, and more often.
Captions: 
	00:00:00,000 --> 00:00:07,710
right how's everybody doing um so like I

00:00:04,830 --> 00:00:10,170
said I we could discuss by day I

00:00:07,710 --> 00:00:11,670
basically work on architecture some

00:00:10,170 --> 00:00:14,759
infrastructure tools a lot of

00:00:11,670 --> 00:00:15,780
performance and scaling stuff and I'm

00:00:14,759 --> 00:00:17,880
going to talk about practicing

00:00:15,780 --> 00:00:20,070
continuous deployment today I give this

00:00:17,880 --> 00:00:22,769
talk at a euro python and it seemed

00:00:20,070 --> 00:00:23,820
pretty well received I had 90 minutes to

00:00:22,769 --> 00:00:27,390
give that talks so we'll see how this

00:00:23,820 --> 00:00:29,340
goes so first of all I want to actually

00:00:27,390 --> 00:00:31,800
describe what can what I mean by

00:00:29,340 --> 00:00:33,750
continuous deployment this is kind of

00:00:31,800 --> 00:00:38,760
the de facto definition is shipping new

00:00:33,750 --> 00:00:40,260
code as soon as it's ready and I really

00:00:38,760 --> 00:00:42,450
want to stress like what this truly

00:00:40,260 --> 00:00:44,489
means like for example you could do this

00:00:42,450 --> 00:00:46,440
and you could ship code all the time you

00:00:44,489 --> 00:00:50,489
continuously deploy but that's not

00:00:46,440 --> 00:00:52,649
really what the philosophy is about this

00:00:50,489 --> 00:00:55,860
is kind of how I treat that so the

00:00:52,649 --> 00:00:58,530
important thing is when it's ready what

00:00:55,860 --> 00:01:00,390
is ready mean this is what we focus on

00:00:58,530 --> 00:01:02,460
all the time is making it ready this

00:01:00,390 --> 00:01:04,680
means that your code has gone through

00:01:02,460 --> 00:01:07,170
some kind of peer review process and

00:01:04,680 --> 00:01:08,880
that's not always necessarily and it's

00:01:07,170 --> 00:01:10,080
fairly new to us to have formal

00:01:08,880 --> 00:01:11,880
structure in place but it's been very

00:01:10,080 --> 00:01:15,090
very useful and it hasn't really slowed

00:01:11,880 --> 00:01:17,640
down any of our processes the other and

00:01:15,090 --> 00:01:20,130
in my important the biggest is passing

00:01:17,640 --> 00:01:21,360
automated tests so this talk kind of

00:01:20,130 --> 00:01:23,790
goes hand in hand with continuous

00:01:21,360 --> 00:01:26,640
integration without it none of this

00:01:23,790 --> 00:01:29,520
works at all and some level of QA and

00:01:26,640 --> 00:01:32,759
this might be post QA depending on what

00:01:29,520 --> 00:01:34,380
your process looks like but you can kind

00:01:32,759 --> 00:01:37,530
of cover your bases with just automated

00:01:34,380 --> 00:01:39,509
tests in this for the most part so all

00:01:37,530 --> 00:01:41,460
in all its focus on stability and

00:01:39,509 --> 00:01:43,470
iteration and more importantly it's a

00:01:41,460 --> 00:01:45,630
focus on iteration through stability and

00:01:43,470 --> 00:01:47,549
that means like you can iterate as much

00:01:45,630 --> 00:01:49,409
as you want as long as everything stable

00:01:47,549 --> 00:01:52,200
and it's not going to cause issues so

00:01:49,409 --> 00:01:54,180
for us the workflow generally looks like

00:01:52,200 --> 00:01:55,619
this you know I'm a developer it's what

00:01:54,180 --> 00:01:57,719
I do every day I commit code right and

00:01:55,619 --> 00:01:59,360
we try to keep this process fairly lean

00:01:57,719 --> 00:02:01,530
will use all the tourney buzzwords today

00:01:59,360 --> 00:02:03,390
so I commit code it goes through code

00:02:01,530 --> 00:02:05,130
review this works through a system I'll

00:02:03,390 --> 00:02:07,110
describe in a little bit and it's

00:02:05,130 --> 00:02:08,879
basically you know it's a sign of

00:02:07,110 --> 00:02:10,739
somebody they go through quickly review

00:02:08,879 --> 00:02:12,959
it hopefully within like 10 15 minutes

00:02:10,739 --> 00:02:13,830
comes back to me it's like accepted it's

00:02:12,959 --> 00:02:15,690
like okay great

00:02:13,830 --> 00:02:17,070
while it's doing all that it can run

00:02:15,690 --> 00:02:18,570
continuous integration which just means

00:02:17,070 --> 00:02:20,370
you have a server somewhere that's

00:02:18,570 --> 00:02:21,870
running a test suite and ideally like

00:02:20,370 --> 00:02:23,910
you've already ran some level of tests

00:02:21,870 --> 00:02:25,440
that say like my codes actually okay you

00:02:23,910 --> 00:02:28,350
didn't just write code and it magically

00:02:25,440 --> 00:02:31,380
went somewhere and then this integration

00:02:28,350 --> 00:02:33,570
either does one of two things it either

00:02:31,380 --> 00:02:35,250
fails which means we repeat this entire

00:02:33,570 --> 00:02:37,440
cycle goes back to commit it goes back

00:02:35,250 --> 00:02:39,030
through code review and generally this

00:02:37,440 --> 00:02:41,010
is where we revert it and send it back

00:02:39,030 --> 00:02:42,420
through this process or succeeds and

00:02:41,010 --> 00:02:45,260
once it succeeds then you can choose a

00:02:42,420 --> 00:02:47,340
deployed what I really want to stress is

00:02:45,260 --> 00:02:49,500
continuous deployment doesn't

00:02:47,340 --> 00:02:50,910
necessarily you mean you deploy all the

00:02:49,500 --> 00:02:52,200
time like every five minutes like you

00:02:50,910 --> 00:02:53,640
can employees often or as little as you

00:02:52,200 --> 00:02:56,340
want the important thing is that you can

00:02:53,640 --> 00:02:57,930
deploy whenever you want so we deployed

00:02:56,340 --> 00:03:00,240
and then we need to rely on some kind of

00:02:57,930 --> 00:03:02,100
reporting this reporting could literally

00:03:00,240 --> 00:03:03,720
be like you clicking around and see if

00:03:02,100 --> 00:03:05,310
it works or ideally it's something

00:03:03,720 --> 00:03:07,470
automated that's very powerful and can

00:03:05,310 --> 00:03:08,820
trigger sort of like very high level

00:03:07,470 --> 00:03:10,770
alerts that will page every single ops

00:03:08,820 --> 00:03:12,060
person and get it fixed right away and

00:03:10,770 --> 00:03:15,300
if that does happen then you should have

00:03:12,060 --> 00:03:18,090
a very fast rollback um so with this

00:03:15,300 --> 00:03:19,950
workflow there's a there's some pretty

00:03:18,090 --> 00:03:22,500
bad negative things here but the goods

00:03:19,950 --> 00:03:24,000
are amazing right like you have very

00:03:22,500 --> 00:03:26,670
quick development which means like you

00:03:24,000 --> 00:03:28,470
can launch a what product people like to

00:03:26,670 --> 00:03:31,170
call an MVP a Minimum Viable Product

00:03:28,470 --> 00:03:32,880
generally very quickly and i'll talk

00:03:31,170 --> 00:03:35,220
about how you can do that and why that's

00:03:32,880 --> 00:03:37,650
useful but all in all it's about

00:03:35,220 --> 00:03:39,360
releasing frequently small changes that

00:03:37,650 --> 00:03:41,300
are easier to test and this reduces your

00:03:39,360 --> 00:03:44,010
QA time because like if you're releasing

00:03:41,300 --> 00:03:45,269
you know I changed the border color to

00:03:44,010 --> 00:03:47,400
red or something if that's like.you

00:03:45,269 --> 00:03:48,840
literally you would release every commit

00:03:47,400 --> 00:03:50,160
you know you can you can test that

00:03:48,840 --> 00:03:52,110
easily you look as the border red okay

00:03:50,160 --> 00:03:54,900
great you know it's fine the QA was 30

00:03:52,110 --> 00:03:56,070
seconds now the bad is uh actually the

00:03:54,900 --> 00:03:58,860
biggest pain point here is that it's

00:03:56,070 --> 00:04:01,380
very hard to adopt a lot of this we've

00:03:58,860 --> 00:04:02,970
spent the last two years working on

00:04:01,380 --> 00:04:05,220
infrastructure and that includes like

00:04:02,970 --> 00:04:07,019
trying to improve our automated testing

00:04:05,220 --> 00:04:09,570
trying to improve our deploy tools I

00:04:07,019 --> 00:04:11,970
reporting all of this takes lots and

00:04:09,570 --> 00:04:14,970
lots of times it's in a company like

00:04:11,970 --> 00:04:16,440
we're only 30 people um you know we

00:04:14,970 --> 00:04:18,570
actually have a guy who's more or less

00:04:16,440 --> 00:04:20,040
dedicated to dealing with tests now we

00:04:18,570 --> 00:04:23,729
have a guy that's dedicated to like

00:04:20,040 --> 00:04:25,140
releasing and it's a very heavy task

00:04:23,729 --> 00:04:26,610
like so you have to be willing to accept

00:04:25,140 --> 00:04:29,189
the cost of this

00:04:26,610 --> 00:04:30,569
and again like this is a philosophy so

00:04:29,189 --> 00:04:32,069
you really have to insist in your

00:04:30,569 --> 00:04:33,270
culture you know I came from a

00:04:32,069 --> 00:04:35,310
background where we didn't do tons of

00:04:33,270 --> 00:04:37,699
testing we would test things a lot of it

00:04:35,310 --> 00:04:40,409
be manual testing which like is awful

00:04:37,699 --> 00:04:41,849
and we really had to instill all of this

00:04:40,409 --> 00:04:44,370
in us like there were some tests when i

00:04:41,849 --> 00:04:45,629
joined discuss there's a ton right now

00:04:44,370 --> 00:04:46,620
and we're getting better every day and

00:04:45,629 --> 00:04:49,770
it's just something you continually

00:04:46,620 --> 00:04:51,659
iterate on on the process itself so

00:04:49,770 --> 00:04:53,729
there's a few things that i feel are

00:04:51,659 --> 00:04:54,810
very important to implementing this the

00:04:53,729 --> 00:04:57,000
first one is keeping your development

00:04:54,810 --> 00:04:58,199
environment like super super simple this

00:04:57,000 --> 00:04:59,849
isn't just about development actually

00:04:58,199 --> 00:05:02,759
this is really important for several

00:04:59,849 --> 00:05:04,590
things but um more importantly like

00:05:02,759 --> 00:05:05,849
there's several ways are several things

00:05:04,590 --> 00:05:07,199
you need to implement to do this and

00:05:05,849 --> 00:05:08,580
first is like automated testing this is

00:05:07,199 --> 00:05:11,250
a requirement like like i said

00:05:08,580 --> 00:05:14,759
continuous integration is the basis of

00:05:11,250 --> 00:05:16,770
all of this and now even more

00:05:14,759 --> 00:05:19,469
importantly like development needs to be

00:05:16,770 --> 00:05:20,879
fast like if it takes you a day to go

00:05:19,469 --> 00:05:22,800
through code review or you have a daily

00:05:20,879 --> 00:05:24,479
release cycle like you're not going to

00:05:22,800 --> 00:05:27,000
very like you're not going to be able to

00:05:24,479 --> 00:05:28,680
iterate very quickly at all you know so

00:05:27,000 --> 00:05:29,819
to do this we simplify the environment

00:05:28,680 --> 00:05:32,219
like we simplified as much as possible

00:05:29,819 --> 00:05:35,580
to where we're actually still reliably

00:05:32,219 --> 00:05:37,259
writing code that's going to work um but

00:05:35,580 --> 00:05:39,180
ideally the other systems that are much

00:05:37,259 --> 00:05:40,860
more complicated maybe they're dedicated

00:05:39,180 --> 00:05:42,389
to this can deal with all the processes

00:05:40,860 --> 00:05:44,879
that you haven't been running in that

00:05:42,389 --> 00:05:46,969
you haven't implemented and another big

00:05:44,879 --> 00:05:49,529
part of this is packaging your app like

00:05:46,969 --> 00:05:51,060
it's very important and some people

00:05:49,529 --> 00:05:52,770
disagree with this philosophy I feel

00:05:51,060 --> 00:05:54,240
like packaging your app is a must like

00:05:52,770 --> 00:05:56,009
whether it's a project or a library or

00:05:54,240 --> 00:05:57,569
whatever it needs packaged there's a

00:05:56,009 --> 00:05:58,589
number of reasons but mostly because you

00:05:57,569 --> 00:06:00,900
need to be able to repeat whatever

00:05:58,589 --> 00:06:02,310
you're doing like the way you set up

00:06:00,900 --> 00:06:03,960
your local environment ideally is the

00:06:02,310 --> 00:06:05,279
same as you set up your CI environment

00:06:03,960 --> 00:06:07,560
which is ideally the same way you deploy

00:06:05,279 --> 00:06:09,629
to a production environment and there's

00:06:07,560 --> 00:06:12,150
many tools that do this summer python

00:06:09,629 --> 00:06:13,770
specific like fabric and build out some

00:06:12,150 --> 00:06:17,339
are just general configuration that's

00:06:13,770 --> 00:06:18,839
puppet in chef so this is kind of an

00:06:17,339 --> 00:06:20,189
idea like ours doesn't really look like

00:06:18,839 --> 00:06:22,229
this anymore because it's gotten much

00:06:20,189 --> 00:06:23,339
more complicated but this is just an

00:06:22,229 --> 00:06:24,960
example of like your production might

00:06:23,339 --> 00:06:26,460
list all or might have all your services

00:06:24,960 --> 00:06:29,699
or will have all your services rather

00:06:26,460 --> 00:06:31,830
sorry and that'll be like postgres Redis

00:06:29,699 --> 00:06:33,029
maybe you have some search engine etc

00:06:31,830 --> 00:06:34,830
it's all going to be running no matter

00:06:33,029 --> 00:06:36,330
what right staging maybe it doesn't need

00:06:34,830 --> 00:06:37,529
all that in our example like maybe we

00:06:36,330 --> 00:06:39,029
don't actually need the cue

00:06:37,529 --> 00:06:40,380
infrastructure because that's you know

00:06:39,029 --> 00:06:41,760
we have some tests

00:06:40,380 --> 00:06:43,380
say it works no matter what so we just

00:06:41,760 --> 00:06:46,770
scrap the cue infrastructure and we just

00:06:43,380 --> 00:06:48,060
execute those tasks in real time that's

00:06:46,770 --> 00:06:50,520
not necessarily the best idea ideally

00:06:48,060 --> 00:06:52,800
staging mimics production but it's an

00:06:50,520 --> 00:06:54,060
acceptable thing in this case now our CI

00:06:52,800 --> 00:06:56,400
server we actually dumb it down even

00:06:54,060 --> 00:06:57,720
more because like we don't need to test

00:06:56,400 --> 00:06:59,280
the full stack when we're testing our

00:06:57,720 --> 00:07:00,780
service like we don't care about apache

00:06:59,280 --> 00:07:02,610
an engine X because we assume those are

00:07:00,780 --> 00:07:04,230
going to work we have tests it's a you

00:07:02,610 --> 00:07:05,370
know this configuration actually works

00:07:04,230 --> 00:07:07,800
correctly and so we actually don't need

00:07:05,370 --> 00:07:09,630
to test those ever we uh we just you

00:07:07,800 --> 00:07:11,250
know run these server-side unit tests

00:07:09,630 --> 00:07:12,480
you know even if we're running selenium

00:07:11,250 --> 00:07:15,150
we don't need any of these we just spin

00:07:12,480 --> 00:07:16,680
up a simple Python web server and then

00:07:15,150 --> 00:07:18,810
we get down to like actual local

00:07:16,680 --> 00:07:20,790
development like literally you can run

00:07:18,810 --> 00:07:23,070
discuss with just a copy of postgres

00:07:20,790 --> 00:07:25,410
running certain things won't work but

00:07:23,070 --> 00:07:27,450
most of it will and like the only thing

00:07:25,410 --> 00:07:29,070
that's changed since a year ago when I

00:07:27,450 --> 00:07:31,050
initially started some of these slides

00:07:29,070 --> 00:07:34,500
is that we just now need Redis for most

00:07:31,050 --> 00:07:36,930
things that happen locally um so how do

00:07:34,500 --> 00:07:38,370
we how do we look at this like for us we

00:07:36,930 --> 00:07:40,760
want local to be dead simple and for us

00:07:38,370 --> 00:07:43,440
it's you clone a repository which is a

00:07:40,760 --> 00:07:44,730
we're kind of a monolithic app but we

00:07:43,440 --> 00:07:45,840
have been splitting it into smaller

00:07:44,730 --> 00:07:47,280
services so let's say this is our

00:07:45,840 --> 00:07:49,080
monolithic app we clone this pull it

00:07:47,280 --> 00:07:50,490
down and ideally you just run a command

00:07:49,080 --> 00:07:52,290
that's like make or its build out

00:07:50,490 --> 00:07:53,610
bootstrap or whatever it is it's a

00:07:52,290 --> 00:07:55,290
simple command that should just take

00:07:53,610 --> 00:07:56,790
care of everything and this is not the

00:07:55,290 --> 00:07:59,160
same as pip install it should run pip

00:07:56,790 --> 00:08:00,600
install for you or Python setup got pie

00:07:59,160 --> 00:08:02,250
develop or whatever it is it should do

00:08:00,600 --> 00:08:03,870
that for you and then you spin up

00:08:02,250 --> 00:08:05,760
whatever the services weather like in

00:08:03,870 --> 00:08:08,730
this case we use Django and we run run

00:08:05,760 --> 00:08:10,590
server or it could be you know flask and

00:08:08,730 --> 00:08:12,330
you just call the app and it runs work

00:08:10,590 --> 00:08:14,730
so eager anything along these lines just

00:08:12,330 --> 00:08:15,960
keep it dead simple and now what's even

00:08:14,730 --> 00:08:18,150
more important like we're slowly

00:08:15,960 --> 00:08:19,320
shifting to this more is like if you

00:08:18,150 --> 00:08:20,550
need to test these other things have

00:08:19,320 --> 00:08:22,050
them available like it shouldn't be

00:08:20,550 --> 00:08:23,400
impossible to setup rabbit locally it

00:08:22,050 --> 00:08:25,170
shouldn't be impossible to have postgres

00:08:23,400 --> 00:08:27,720
in memcache and everything else running

00:08:25,170 --> 00:08:31,590
on the correct dependencies so like what

00:08:27,720 --> 00:08:32,669
i really want to instill in you guys and

00:08:31,590 --> 00:08:34,110
we're still working on this is run the

00:08:32,669 --> 00:08:36,719
services through something like vagrant

00:08:34,110 --> 00:08:37,469
it's super easy you can just configure

00:08:36,719 --> 00:08:39,000
it with the same system you're

00:08:37,469 --> 00:08:40,500
configuring production you can have all

00:08:39,000 --> 00:08:43,560
these hard complicated to install

00:08:40,500 --> 00:08:45,060
packages all configured almost the same

00:08:43,560 --> 00:08:46,530
as they would be in production and it

00:08:45,060 --> 00:08:48,600
just it makes it so much simpler for the

00:08:46,530 --> 00:08:52,080
developer which is all you should really

00:08:48,600 --> 00:08:53,430
care about so once we've simplified kind

00:08:52,080 --> 00:08:55,200
of how we can develop and what

00:08:53,430 --> 00:08:56,820
we actually need to figure out how we

00:08:55,200 --> 00:08:58,890
can you know roll out features because

00:08:56,820 --> 00:09:00,089
it's not just like you can implement a

00:08:58,890 --> 00:09:01,770
big feature deploy it and it's going to

00:09:00,089 --> 00:09:05,910
work like especially once you're scaling

00:09:01,770 --> 00:09:08,100
things out we discuss we do I think on a

00:09:05,910 --> 00:09:10,080
low level like twelve to fifteen

00:09:08,100 --> 00:09:11,490
thousand requests a second this is an

00:09:10,080 --> 00:09:14,940
everyday number it's always around this

00:09:11,490 --> 00:09:16,980
we peak much much higher than that so

00:09:14,940 --> 00:09:19,560
it's very important that if we release a

00:09:16,980 --> 00:09:21,839
feature like it doesn't take down the

00:09:19,560 --> 00:09:24,120
website if it executes some bad query we

00:09:21,839 --> 00:09:25,140
need to know that you know ideally it's

00:09:24,120 --> 00:09:27,300
been reviewed ahead of time and it's

00:09:25,140 --> 00:09:29,520
okay but things always happen things are

00:09:27,300 --> 00:09:31,860
always going to happen and in this case

00:09:29,520 --> 00:09:33,300
we want to like slowly release features

00:09:31,860 --> 00:09:35,490
and we do this through something called

00:09:33,300 --> 00:09:37,860
feature flippers or as we like to call

00:09:35,490 --> 00:09:39,600
them switches because I feel like it's

00:09:37,860 --> 00:09:42,180
kind of more obvious in the testing

00:09:39,600 --> 00:09:43,800
environment but um we have a platform we

00:09:42,180 --> 00:09:45,330
built called gargoyle it's very Django

00:09:43,800 --> 00:09:47,730
specific but we're actually working on

00:09:45,330 --> 00:09:50,760
rewriting it right now to be at least

00:09:47,730 --> 00:09:52,350
Django agnostic but ideally platform

00:09:50,760 --> 00:09:53,970
agnostic so it can run on multiple

00:09:52,350 --> 00:09:56,490
languages just threw some shared

00:09:53,970 --> 00:09:58,890
protocol and it's basically like you

00:09:56,490 --> 00:10:00,540
have a new feature a good example in

00:09:58,890 --> 00:10:02,700
discusses we do have we have this

00:10:00,540 --> 00:10:03,990
comment widget and it has a real-time

00:10:02,700 --> 00:10:05,610
feature so like maybe we're just

00:10:03,990 --> 00:10:07,370
releasing real time so it's behind the

00:10:05,610 --> 00:10:10,800
switch and it literally says you know

00:10:07,370 --> 00:10:12,930
looks something like this you know if if

00:10:10,800 --> 00:10:15,150
the switch is enabled you know use real

00:10:12,930 --> 00:10:16,320
time if it's not don't use real time so

00:10:15,150 --> 00:10:18,360
what we do is we go back to this

00:10:16,320 --> 00:10:19,980
interface here and we can like specify

00:10:18,360 --> 00:10:21,900
some conditions so what we might do at

00:10:19,980 --> 00:10:23,520
first is we say you know I'm going and

00:10:21,900 --> 00:10:25,020
enable is for people who work at discuss

00:10:23,520 --> 00:10:26,760
and then we can kind of flesh out things

00:10:25,020 --> 00:10:27,870
internally and then from there we might

00:10:26,760 --> 00:10:29,220
say okay everything is looking good

00:10:27,870 --> 00:10:31,080
let's turn it on for one percent because

00:10:29,220 --> 00:10:32,700
like it's a sample of real traffic from

00:10:31,080 --> 00:10:34,380
there we just bump it up as we see fit

00:10:32,700 --> 00:10:38,339
until we know that capacity is into an

00:10:34,380 --> 00:10:39,660
issue and we've done a couple things or

00:10:38,339 --> 00:10:41,279
we've used this in a couple ways that

00:10:39,660 --> 00:10:42,720
have been super useful like we have an

00:10:41,279 --> 00:10:45,120
early adopters flag for everybody that

00:10:42,720 --> 00:10:47,610
signs up and that you took a box and you

00:10:45,120 --> 00:10:50,100
now opt in to us breaking things on you

00:10:47,610 --> 00:10:53,160
it which doesn't generally happen but it

00:10:50,100 --> 00:10:54,660
makes it a very nice way to initially

00:10:53,160 --> 00:10:57,810
test like with some audience that are

00:10:54,660 --> 00:10:59,149
willing to accept some issues and also

00:10:57,810 --> 00:11:01,560
going back to this real-time example

00:10:59,149 --> 00:11:03,630
let's say it was on a hundred percent we

00:11:01,560 --> 00:11:05,220
may not remove that switch like even if

00:11:03,630 --> 00:11:06,130
the codes used everywhere you know what

00:11:05,220 --> 00:11:08,350
if

00:11:06,130 --> 00:11:09,970
it's relying on a service or something

00:11:08,350 --> 00:11:11,440
and like we haven't implemented proper

00:11:09,970 --> 00:11:13,000
infrastructure to degrade this yet we

00:11:11,440 --> 00:11:14,680
can like oh there's a problem with

00:11:13,000 --> 00:11:16,150
real-time well let's turn it off and I

00:11:14,680 --> 00:11:18,250
actually took down discuss for about

00:11:16,150 --> 00:11:20,290
maybe 10 seconds the other day by

00:11:18,250 --> 00:11:22,210
turning on a switch and it was back

00:11:20,290 --> 00:11:23,950
completely green 10 seconds later by

00:11:22,210 --> 00:11:27,520
just literally clicking a button on the

00:11:23,950 --> 00:11:29,350
website if you don't have Django or

00:11:27,520 --> 00:11:31,060
anything like this like logic is very

00:11:29,350 --> 00:11:33,610
very simple for example you might take

00:11:31,060 --> 00:11:35,020
like an integer representation of the IP

00:11:33,610 --> 00:11:36,970
address and just say you know fifty

00:11:35,020 --> 00:11:38,110
percent of these integers are going to

00:11:36,970 --> 00:11:43,120
be enabled and that's how I take a

00:11:38,110 --> 00:11:45,880
50-percent use rate for a switch so the

00:11:43,120 --> 00:11:47,590
second thing which is really important

00:11:45,880 --> 00:11:49,750
after we actually write the code is

00:11:47,590 --> 00:11:52,000
going to code review and we actually

00:11:49,750 --> 00:11:54,550
require that everything go through code

00:11:52,000 --> 00:11:56,590
review at this point and we do this

00:11:54,550 --> 00:11:58,870
using a tool called fabricator this was

00:11:56,590 --> 00:12:01,810
um written by Facebook and open sourced

00:11:58,870 --> 00:12:03,880
I feel like it's been a little while now

00:12:01,810 --> 00:12:07,480
but I'm not entirely sure that date and

00:12:03,880 --> 00:12:10,570
we just adopted this in the last three

00:12:07,480 --> 00:12:12,820
months or so really amazing tool for

00:12:10,570 --> 00:12:14,260
code review it's written in PHP you'll

00:12:12,820 --> 00:12:17,290
have to live with it it's very very good

00:12:14,260 --> 00:12:19,720
PHP but it kind of looks like this so

00:12:17,290 --> 00:12:20,980
it's like a bug tracker sort of you're

00:12:19,720 --> 00:12:22,090
going to see a code review you know in

00:12:20,980 --> 00:12:25,150
this case it's one that's actually

00:12:22,090 --> 00:12:27,160
completed and it's gone through like I'm

00:12:25,150 --> 00:12:28,840
requesting review you know this guy's

00:12:27,160 --> 00:12:30,580
got in the notification he's left a

00:12:28,840 --> 00:12:32,080
comment which isn't really important

00:12:30,580 --> 00:12:33,340
because if it was he'd request changes

00:12:32,080 --> 00:12:34,900
and this would go back to a different

00:12:33,340 --> 00:12:36,430
state but he says you know this is ok

00:12:34,900 --> 00:12:38,290
but we might want to rethink doing this

00:12:36,430 --> 00:12:40,600
and then we close it out and we accept

00:12:38,290 --> 00:12:42,010
it and it gets merged in now what's

00:12:40,600 --> 00:12:44,860
really really cool about this tool is

00:12:42,010 --> 00:12:47,320
how you use it as a developer this is a

00:12:44,860 --> 00:12:48,940
nice web interface it's great you don't

00:12:47,320 --> 00:12:50,980
actually have to use it for almost any

00:12:48,940 --> 00:12:53,050
task for example when I'm opening a code

00:12:50,980 --> 00:12:55,300
review all I'm doing is making a commit

00:12:53,050 --> 00:12:57,400
i'm making a commit that has all of this

00:12:55,300 --> 00:12:59,620
metadata in it for example has the

00:12:57,400 --> 00:13:01,210
summary the title kind of generic gives

00:12:59,620 --> 00:13:03,970
stuff you can also assign reviewers here

00:13:01,210 --> 00:13:07,090
you can reference tasks which manifests

00:13:03,970 --> 00:13:08,950
is their name for a bug tracker the

00:13:07,090 --> 00:13:12,940
names are a lot differential is the name

00:13:08,950 --> 00:13:14,320
for their the review part of it so in

00:13:12,940 --> 00:13:16,270
this case we've specified everything the

00:13:14,320 --> 00:13:17,830
differential revision actually gets

00:13:16,270 --> 00:13:19,270
specified later this is a fully closed

00:13:17,830 --> 00:13:19,779
out ticket and what it looks like in the

00:13:19,270 --> 00:13:23,019
commit law

00:13:19,779 --> 00:13:25,089
after its been amended but the one I

00:13:23,019 --> 00:13:27,610
just commit this code in a branch and I

00:13:25,089 --> 00:13:29,379
run a command arc gif and what arc diff

00:13:27,610 --> 00:13:31,300
does is it runs based on your

00:13:29,379 --> 00:13:33,670
configuration a set of Lintz so for us

00:13:31,300 --> 00:13:35,019
we've this is actually upstream now you

00:13:33,670 --> 00:13:36,970
can just configure it to use a standard

00:13:35,019 --> 00:13:39,160
linter it will lend Python files or lent

00:13:36,970 --> 00:13:41,649
PHP JavaScript basically anything they

00:13:39,160 --> 00:13:43,300
support and what's even more cool is

00:13:41,649 --> 00:13:45,670
like the way we've done testing with

00:13:43,300 --> 00:13:47,670
this for example in this case like we've

00:13:45,670 --> 00:13:50,350
made a change and it affects some

00:13:47,670 --> 00:13:53,139
something in this discuss offset effects

00:13:50,350 --> 00:13:55,089
thing and specifically this is not our

00:13:53,139 --> 00:13:57,189
entire test suite this is all in tests

00:13:55,089 --> 00:14:00,160
that it's detected that it needs to run

00:13:57,189 --> 00:14:01,540
and this is surprisingly simple to do we

00:14:00,160 --> 00:14:03,730
tried a very complicated way of like

00:14:01,540 --> 00:14:05,139
measuring tests and tracking what was

00:14:03,730 --> 00:14:07,180
actually executing what and making this

00:14:05,139 --> 00:14:08,709
all magical it turns out it's much

00:14:07,180 --> 00:14:10,449
easier if you just say you know your

00:14:08,709 --> 00:14:13,120
tests go in this directory which matches

00:14:10,449 --> 00:14:14,769
where the code is so in this case we

00:14:13,120 --> 00:14:17,319
probably modified this test file so it

00:14:14,769 --> 00:14:19,449
knows the run it and we've actually

00:14:17,319 --> 00:14:21,430
cropped this uh there's some other stuff

00:14:19,449 --> 00:14:23,050
but you can actually do this super super

00:14:21,430 --> 00:14:25,389
easily like we use knows to do this and

00:14:23,050 --> 00:14:26,649
we've released the plugin that i do not

00:14:25,389 --> 00:14:28,420
have listed in here called quick unit

00:14:26,649 --> 00:14:32,050
which is super easy to configure you

00:14:28,420 --> 00:14:34,000
just have to adopt something honestly of

00:14:32,050 --> 00:14:35,519
a more standard testing policy that's

00:14:34,000 --> 00:14:38,050
used across other languages as well

00:14:35,519 --> 00:14:39,519
anyways so everything passes it shows

00:14:38,050 --> 00:14:42,550
that some of our tests are awful they're

00:14:39,519 --> 00:14:43,839
all slow and then it says okay great I'm

00:14:42,550 --> 00:14:45,129
going to upload this differential which

00:14:43,839 --> 00:14:47,139
is uploading in the code review tool you

00:14:45,129 --> 00:14:48,519
know now this other guy's been notified

00:14:47,139 --> 00:14:50,559
he's going through it and I'll get

00:14:48,519 --> 00:14:53,740
notified when it's okay and when it's

00:14:50,559 --> 00:14:55,839
done all we do is type arc land and then

00:14:53,740 --> 00:14:57,250
the branch name and it does all the

00:14:55,839 --> 00:14:59,439
magic in immense the commit message so

00:14:57,250 --> 00:15:00,819
it looks like this with the actual

00:14:59,439 --> 00:15:02,529
revision name and if there were any

00:15:00,819 --> 00:15:03,990
changes in the ticket like via the web

00:15:02,529 --> 00:15:06,429
interface it'll update them here as well

00:15:03,990 --> 00:15:08,850
and it merges it in and it pushes it

00:15:06,429 --> 00:15:10,750
upstream and now once that's done and

00:15:08,850 --> 00:15:12,610
potentially at the same time we don't do

00:15:10,750 --> 00:15:14,050
this yet once that's done you run an

00:15:12,610 --> 00:15:16,059
integration and we use Jenkins for this

00:15:14,050 --> 00:15:17,290
it's super easy to set up if you want

00:15:16,059 --> 00:15:18,970
any kind of integration just use this

00:15:17,290 --> 00:15:20,230
all you have to do is write a simple

00:15:18,970 --> 00:15:22,329
script that tells it how to run your

00:15:20,230 --> 00:15:24,309
tests if you use knows you just tell it

00:15:22,329 --> 00:15:25,360
to dump xunit results and you dump them

00:15:24,309 --> 00:15:27,399
in this location and it magically

00:15:25,360 --> 00:15:31,240
reports and it's very nice and easy to

00:15:27,399 --> 00:15:33,189
go it kind of looks like this in this

00:15:31,240 --> 00:15:33,550
case we have a failed build it tells us

00:15:33,189 --> 00:15:36,730
what's

00:15:33,550 --> 00:15:38,410
failed gives us a very little bit of

00:15:36,730 --> 00:15:40,060
information but important are more

00:15:38,410 --> 00:15:41,800
important the idea it notifies us at the

00:15:40,060 --> 00:15:44,230
bottom and this is via the IRC

00:15:41,800 --> 00:15:46,209
integration so when we were actually

00:15:44,230 --> 00:15:47,260
deciding on what we needed like we had

00:15:46,209 --> 00:15:48,339
to think of like what are requirements

00:15:47,260 --> 00:15:51,370
for integration like what actually

00:15:48,339 --> 00:15:52,899
matters first and foremost you must know

00:15:51,370 --> 00:15:54,430
when something's broken when you when

00:15:52,899 --> 00:15:55,660
you broke in the build and like I do

00:15:54,430 --> 00:15:57,339
leave you run their tests but maybe

00:15:55,660 --> 00:15:58,959
there's this crazy integration test that

00:15:57,339 --> 00:16:00,010
tests everything and you didn't think

00:15:58,959 --> 00:16:01,420
about this condition so you must not

00:16:00,010 --> 00:16:02,740
right away that you did that and it's

00:16:01,420 --> 00:16:04,120
important to know right away because as

00:16:02,740 --> 00:16:06,430
soon as you have the context switch back

00:16:04,120 --> 00:16:08,200
if it takes 40 minutes like you've

00:16:06,430 --> 00:16:09,610
already started on something else and I

00:16:08,200 --> 00:16:11,560
you have to be like oh no this feature

00:16:09,610 --> 00:16:12,970
that i thought was done is broken i have

00:16:11,560 --> 00:16:14,440
to finish this now and i have to go back

00:16:12,970 --> 00:16:16,089
and i have to redo everything right um

00:16:14,440 --> 00:16:18,430
so it's important that it does that and

00:16:16,089 --> 00:16:20,920
Jenkins has plug-ins for everything you

00:16:18,430 --> 00:16:22,360
can imagine IRC emails built-in it has

00:16:20,920 --> 00:16:25,630
instant messenger plugins and it works

00:16:22,360 --> 00:16:26,829
very well it also needs proper reporting

00:16:25,630 --> 00:16:28,149
and I just I really mean just

00:16:26,829 --> 00:16:30,550
integration with proper reporting

00:16:28,149 --> 00:16:32,829
there's plug-ins for all of this for

00:16:30,550 --> 00:16:34,630
example xunit like I same with nose lint

00:16:32,829 --> 00:16:36,760
results it can parse pilant or pie

00:16:34,630 --> 00:16:38,500
flakes results it can also parse

00:16:36,760 --> 00:16:40,990
coverage top high results and it's super

00:16:38,500 --> 00:16:44,020
useful for these things and it's very

00:16:40,990 --> 00:16:45,610
very easy to use we talked about some

00:16:44,020 --> 00:16:47,110
things like around war files at the web

00:16:45,610 --> 00:16:48,760
summit the other day and like how

00:16:47,110 --> 00:16:50,110
they're interesting and whatnot jenkins

00:16:48,760 --> 00:16:53,860
is literally you can pull down the file

00:16:50,110 --> 00:16:56,170
and do java dash jar jenkins doir and it

00:16:53,860 --> 00:16:59,800
will work or you can just add the source

00:16:56,170 --> 00:17:01,029
in apt-get install I'm so now it's great

00:16:59,800 --> 00:17:03,220
and all but there are issues with

00:17:01,029 --> 00:17:05,709
integration these are kind of like the

00:17:03,220 --> 00:17:08,079
big pain points we've seen for some

00:17:05,709 --> 00:17:09,910
foremost is false positives either the

00:17:08,079 --> 00:17:11,470
reporting is inaccurate because you know

00:17:09,910 --> 00:17:13,059
the tests we did run correctly now just

00:17:11,470 --> 00:17:15,309
saying like some weird test failed or

00:17:13,059 --> 00:17:17,079
you know like a third-party service is

00:17:15,309 --> 00:17:19,089
not responding and we had a test for

00:17:17,079 --> 00:17:20,439
that or even worse like you have a bad

00:17:19,089 --> 00:17:23,530
test like for example we had something

00:17:20,439 --> 00:17:25,150
that wasn't taking time zones into

00:17:23,530 --> 00:17:28,360
account or something and it would fail

00:17:25,150 --> 00:17:30,130
like 6 p.m. every day and this is just

00:17:28,360 --> 00:17:31,540
like you might get change at 6pm this is

00:17:30,130 --> 00:17:32,590
unrelated to your code analysis on the

00:17:31,540 --> 00:17:35,530
builds fell and you're like what's going

00:17:32,590 --> 00:17:37,540
on so that causes a lot of issues in it

00:17:35,530 --> 00:17:39,160
wastes time right test coverage is

00:17:37,540 --> 00:17:40,390
another big one we've kind of fought

00:17:39,160 --> 00:17:42,640
with us for a while like how do we get

00:17:40,390 --> 00:17:45,010
better coverage we have decent coverage

00:17:42,640 --> 00:17:46,870
when I joined but we wanted more like we

00:17:45,010 --> 00:17:47,380
always wanted to improve it so we have a

00:17:46,870 --> 00:17:48,820
lot of issues

00:17:47,380 --> 00:17:49,930
like regressions on untested code and

00:17:48,820 --> 00:17:53,350
that's a problem you're going to see all

00:17:49,930 --> 00:17:54,760
the time and we have this issue with the

00:17:53,350 --> 00:17:56,440
way of feedback like I said if the test

00:17:54,760 --> 00:17:58,720
suite takes 40 minutes it's 40 minutes

00:17:56,440 --> 00:18:01,230
later until you actually know that what

00:17:58,720 --> 00:18:03,760
you did earlier is causing a problem um

00:18:01,230 --> 00:18:05,290
so a little bit of what we've done to

00:18:03,760 --> 00:18:07,960
kind of solve some of these or what you

00:18:05,290 --> 00:18:10,030
could do rather so a false positive

00:18:07,960 --> 00:18:11,590
might be that the test fails at 6pm

00:18:10,030 --> 00:18:14,020
every day so just rerun the test and see

00:18:11,590 --> 00:18:15,730
if it fails again you know this goes

00:18:14,020 --> 00:18:16,930
hand in hand with report on the failing

00:18:15,730 --> 00:18:18,370
test like don't just rerun it every day

00:18:16,930 --> 00:18:20,250
because it always fails make sure

00:18:18,370 --> 00:18:22,990
whoever wrote the test fixes it somehow

00:18:20,250 --> 00:18:24,520
and if you are testing external services

00:18:22,990 --> 00:18:25,930
you can do that differently like in your

00:18:24,520 --> 00:18:29,070
normal test suite you should be mocking

00:18:25,930 --> 00:18:31,480
veins or somehow faking the service in

00:18:29,070 --> 00:18:33,220
another test suite which can run slower

00:18:31,480 --> 00:18:34,480
and maybe once a day or something you

00:18:33,220 --> 00:18:36,370
can actually test if that services

00:18:34,480 --> 00:18:39,280
actually generating the response you

00:18:36,370 --> 00:18:40,630
were expecting to begin with the second

00:18:39,280 --> 00:18:43,690
issue is our coverage like how do we get

00:18:40,630 --> 00:18:45,520
more tests so I think the coolest thing

00:18:43,690 --> 00:18:47,260
you can do with this is when you commit

00:18:45,520 --> 00:18:50,680
code that isn't covered you know right

00:18:47,260 --> 00:18:52,240
away like you might be just touching a

00:18:50,680 --> 00:18:54,730
minor feature like saying oh you know

00:18:52,240 --> 00:18:56,230
what I don't want this switch to be on

00:18:54,730 --> 00:18:57,820
anymore something maybe for whatever

00:18:56,230 --> 00:18:59,200
reason you have some kind of syntax

00:18:57,820 --> 00:19:00,280
error that you're linter and I mean

00:18:59,200 --> 00:19:02,020
anything else think catching you don't

00:19:00,280 --> 00:19:03,610
have any tests but how do you know that

00:19:02,020 --> 00:19:05,410
your minor change which shouldn't be

00:19:03,610 --> 00:19:08,650
introducing new behavior is actually

00:19:05,410 --> 00:19:10,330
causing something to fail and if you

00:19:08,650 --> 00:19:12,250
commit code like if you add code or

00:19:10,330 --> 00:19:13,600
anything you know if the coverage drop

00:19:12,250 --> 00:19:15,700
that means you added a new code that has

00:19:13,600 --> 00:19:16,690
like is untested so if you want to

00:19:15,700 --> 00:19:18,550
maintain high coverage you could

00:19:16,690 --> 00:19:21,280
literally fail the build when somebody

00:19:18,550 --> 00:19:23,560
commits untested code and you can also

00:19:21,280 --> 00:19:27,910
do this other ways by just measuring the

00:19:23,560 --> 00:19:29,170
coverage when when you actually submit

00:19:27,910 --> 00:19:31,030
the code and we do this as well with

00:19:29,170 --> 00:19:33,550
fabricator which is actually kind of

00:19:31,030 --> 00:19:35,080
neat and it will actually give you kind

00:19:33,550 --> 00:19:37,210
of a report that's somewhat accurate

00:19:35,080 --> 00:19:38,590
that says you know this code actually

00:19:37,210 --> 00:19:40,270
had no coverage at all and it will be

00:19:38,590 --> 00:19:42,970
like you know this your diff has

00:19:40,270 --> 00:19:44,290
forty-four percent coverage and you can

00:19:42,970 --> 00:19:45,600
also do that with this nose plug and I

00:19:44,290 --> 00:19:47,890
was talking about which is quick unit

00:19:45,600 --> 00:19:50,260
and then code review again this is super

00:19:47,890 --> 00:19:53,050
important like if you submit something

00:19:50,260 --> 00:19:54,700
and I see that it's you know it's fixing

00:19:53,050 --> 00:19:56,500
a bug and I don't see a regression test

00:19:54,700 --> 00:19:57,760
to go with that then I can reject it and

00:19:56,500 --> 00:19:59,450
I can say you know what we need this we

00:19:57,760 --> 00:20:00,799
need to improve our coverage right

00:19:59,450 --> 00:20:05,110
I think that is going to be the easiest

00:20:00,799 --> 00:20:08,539
way for anybody to get started with us

00:20:05,110 --> 00:20:10,120
so speeding up the test this is by far

00:20:08,539 --> 00:20:12,559
where almost all of our time has gone

00:20:10,120 --> 00:20:15,350
when I started our test suite was much

00:20:12,559 --> 00:20:16,850
smaller than it is now maybe rough

00:20:15,350 --> 00:20:19,429
number sixty percent of what it is now

00:20:16,850 --> 00:20:21,440
and it took 40 minutes or something like

00:20:19,429 --> 00:20:22,730
that and eventually it took an hour we

00:20:21,440 --> 00:20:24,019
kept adding tests they were super easy

00:20:22,730 --> 00:20:26,809
we just added integration tests you know

00:20:24,019 --> 00:20:28,639
you know a request comes in and we want

00:20:26,809 --> 00:20:30,649
to test what if you know page number was

00:20:28,639 --> 00:20:32,059
a instead of one so let's have a request

00:20:30,649 --> 00:20:33,740
come in do all these database queries

00:20:32,059 --> 00:20:35,630
and see if it errors or if it returns

00:20:33,740 --> 00:20:37,279
you know some other page but all we

00:20:35,630 --> 00:20:39,799
really wanted to do was test if it was

00:20:37,279 --> 00:20:42,919
validating if a should be a number or

00:20:39,799 --> 00:20:44,750
not so it early on we were writing a ton

00:20:42,919 --> 00:20:47,659
of integration tests Jago made it super

00:20:44,750 --> 00:20:51,110
easy not necessarily a good thing but it

00:20:47,659 --> 00:20:52,429
is easy to get started with so start by

00:20:51,110 --> 00:20:54,889
writing some unit tests don't replace

00:20:52,429 --> 00:20:57,830
integration tests we did that in a

00:20:54,889 --> 00:20:59,750
couple cases and we were writing so much

00:20:57,830 --> 00:21:02,090
marked code that we were returning

00:20:59,750 --> 00:21:04,090
responses that to us we wanted to be

00:21:02,090 --> 00:21:06,049
valid but the actual like say the cache

00:21:04,090 --> 00:21:08,149
wouldn't actually return a response

00:21:06,049 --> 00:21:10,639
floor so be very careful with what you

00:21:08,149 --> 00:21:12,049
do in unit versus integration maka

00:21:10,639 --> 00:21:14,419
external services like i said before

00:21:12,049 --> 00:21:16,070
like swap them out with like you can use

00:21:14,419 --> 00:21:18,260
the mock library it's amazing you can

00:21:16,070 --> 00:21:19,700
monkey patch like URL live or something

00:21:18,260 --> 00:21:20,630
and have it return a response so it

00:21:19,700 --> 00:21:21,769
actually doesn't have to connect to the

00:21:20,630 --> 00:21:23,269
internet and you can have some other

00:21:21,769 --> 00:21:25,070
tests over here that actually connects

00:21:23,269 --> 00:21:27,679
to whatever the services and make sure

00:21:25,070 --> 00:21:30,470
it's playing nicely um and by far our

00:21:27,679 --> 00:21:32,120
biggest win and that we wasted a lot of

00:21:30,470 --> 00:21:33,799
time on and eventually came up with the

00:21:32,120 --> 00:21:36,380
dumbest solution that works amazingly is

00:21:33,799 --> 00:21:37,309
distributing tests so a while back we

00:21:36,380 --> 00:21:38,809
were trying to build something that

00:21:37,309 --> 00:21:40,340
would automatically be like oh I have

00:21:38,809 --> 00:21:41,720
all these test classes let's just

00:21:40,340 --> 00:21:44,269
distribute those in a queue or something

00:21:41,720 --> 00:21:45,350
to make magic happen turns out it was

00:21:44,269 --> 00:21:47,090
much easier just to write a simple

00:21:45,350 --> 00:21:50,630
matrix and Jenkins which basically is us

00:21:47,090 --> 00:21:51,769
somehow listing every single actually a

00:21:50,630 --> 00:21:54,230
better way to describe it as we

00:21:51,769 --> 00:21:56,029
partition the test suite manually and we

00:21:54,230 --> 00:21:59,269
just submit this list of Jenkins and our

00:21:56,029 --> 00:22:01,010
test suite was up to an hour at one

00:21:59,269 --> 00:22:02,870
point it now takes less than three

00:22:01,010 --> 00:22:05,929
minutes i believe to run on our cluster

00:22:02,870 --> 00:22:08,500
of 16 jenkins servers which actually

00:22:05,929 --> 00:22:10,549
only might be two machines or something

00:22:08,500 --> 00:22:11,659
and it was super easy to implement like

00:22:10,549 --> 00:22:13,090
we wasted a lot of time and we didn't

00:22:11,659 --> 00:22:15,860
attack the dumb solution which

00:22:13,090 --> 00:22:17,210
really really made a difference for what

00:22:15,860 --> 00:22:19,040
it's worth our test suite is actually

00:22:17,210 --> 00:22:21,380
only like 12 minutes without

00:22:19,040 --> 00:22:24,650
distribution so it's not too bad now

00:22:21,380 --> 00:22:26,420
it's definitely proved a lot so the

00:22:24,650 --> 00:22:28,490
final piece and that's super important

00:22:26,420 --> 00:22:30,500
is reporting why is reporting important

00:22:28,490 --> 00:22:31,460
I've had a lot of places where I've

00:22:30,500 --> 00:22:34,280
asked these kind of questions I'm like

00:22:31,460 --> 00:22:37,460
hey what happened to this server and the

00:22:34,280 --> 00:22:38,990
other guys like oh is it not up and that

00:22:37,460 --> 00:22:40,340
I mean you should be embarrassed if you

00:22:38,990 --> 00:22:43,010
ever asked that question like you should

00:22:40,340 --> 00:22:45,140
know that it wasn't up to begin with so

00:22:43,010 --> 00:22:47,150
I think it's super important to record

00:22:45,140 --> 00:22:49,370
meaningful metrics and like we do a

00:22:47,150 --> 00:22:50,990
decent job at this at this point our

00:22:49,370 --> 00:22:54,410
office guys get paged around the clock

00:22:50,990 --> 00:22:55,730
all the time for crazy things and just

00:22:54,410 --> 00:22:57,110
to give you like an idea of like the

00:22:55,730 --> 00:22:58,760
things I think are important and we've

00:22:57,110 --> 00:23:00,470
instilled a lot of these like rate of

00:22:58,760 --> 00:23:01,580
traffic is super-important right like if

00:23:00,470 --> 00:23:03,140
all of a sudden you're getting half the

00:23:01,580 --> 00:23:05,150
number of requests a second something's

00:23:03,140 --> 00:23:06,920
probably wrong but it's not just like

00:23:05,150 --> 00:23:08,630
how many like pages are people loading

00:23:06,920 --> 00:23:10,400
on your site they're like how many users

00:23:08,630 --> 00:23:11,720
are being created on your site like in

00:23:10,400 --> 00:23:13,310
our case how many comments are being

00:23:11,720 --> 00:23:14,780
created like if there's a bug in a

00:23:13,310 --> 00:23:15,770
specific area that wasn't caught like we

00:23:14,780 --> 00:23:16,670
might see one of these drop and

00:23:15,770 --> 00:23:18,500
instantly we all know there's something

00:23:16,670 --> 00:23:20,330
wrong and then we gotta roll back and we

00:23:18,500 --> 00:23:21,530
roll back right away and it's better to

00:23:20,330 --> 00:23:23,420
just roll back and then figure it out

00:23:21,530 --> 00:23:26,330
rather than sitting there like my wonder

00:23:23,420 --> 00:23:28,010
if something is actually broken you know

00:23:26,330 --> 00:23:29,480
it goes a business or system logics like

00:23:28,010 --> 00:23:31,190
are your users registering are you

00:23:29,480 --> 00:23:32,510
generating revenue versus like you know

00:23:31,190 --> 00:23:34,670
does this database server have disk

00:23:32,510 --> 00:23:36,320
space or is it using too much cpu airs

00:23:34,670 --> 00:23:38,570
it out of memory right you need all of

00:23:36,320 --> 00:23:40,580
this response times are something else

00:23:38,570 --> 00:23:41,720
we've just been starting to track better

00:23:40,580 --> 00:23:42,770
like we've had them in our system for a

00:23:41,720 --> 00:23:44,900
while but we've never really measured

00:23:42,770 --> 00:23:46,220
success and I think it's super important

00:23:44,900 --> 00:23:47,960
to have that because if your response

00:23:46,220 --> 00:23:49,610
time increases by like twenty percent

00:23:47,960 --> 00:23:50,600
and this wasn't expected and you

00:23:49,610 --> 00:23:51,980
released a feature to a hundred percent

00:23:50,600 --> 00:23:55,040
of your audience that could be a huge

00:23:51,980 --> 00:23:56,390
impact in this again just isn't web it

00:23:55,040 --> 00:23:57,770
goes on your database like how long does

00:23:56,390 --> 00:24:00,410
it take to connect your database servers

00:23:57,770 --> 00:24:01,490
that's important and also like simple

00:24:00,410 --> 00:24:04,280
things like exceptions those are the

00:24:01,490 --> 00:24:05,900
obvious ones right and most importantly

00:24:04,280 --> 00:24:08,360
like if you're not doing this like

00:24:05,900 --> 00:24:10,730
monitor social media like I think half

00:24:08,360 --> 00:24:12,890
of our supports time or maybe even more

00:24:10,730 --> 00:24:14,630
is just spent on replying to Twitter and

00:24:12,890 --> 00:24:16,250
deciding if veins on Twitter or like

00:24:14,630 --> 00:24:19,700
valid or not and sending it our way and

00:24:16,250 --> 00:24:24,080
it's super super useful um so there's a

00:24:19,700 --> 00:24:26,410
couple tools we use beyond things like

00:24:24,080 --> 00:24:28,780
nagios which notify

00:24:26,410 --> 00:24:30,610
you and we use pagerduty which notifies

00:24:28,780 --> 00:24:32,560
you so ignoring those kind of things how

00:24:30,610 --> 00:24:35,980
we collect these is what I want to focus

00:24:32,560 --> 00:24:37,540
on and the first is graphite maybe not

00:24:35,980 --> 00:24:39,520
the best slide for this it looks way

00:24:37,540 --> 00:24:41,560
better most of the time but it basically

00:24:39,520 --> 00:24:43,300
lets you say here's my metric increment

00:24:41,560 --> 00:24:46,150
it or here's my metric set the value to

00:24:43,300 --> 00:24:47,980
this and you can basically do any kind

00:24:46,150 --> 00:24:49,840
of logic you want in here we send our

00:24:47,980 --> 00:24:52,540
response times here we spend our Center

00:24:49,840 --> 00:24:54,520
counters here we send disk space usage

00:24:52,540 --> 00:24:56,050
here it has a ton of function so that

00:24:54,520 --> 00:24:57,640
you can actually transform this data on

00:24:56,050 --> 00:25:00,280
the fly and if you can't you can

00:24:57,640 --> 00:25:01,480
transform it before you send it here and

00:25:00,280 --> 00:25:03,360
if you're actually interested in some

00:25:01,480 --> 00:25:06,610
easy ways to collect this we have a

00:25:03,360 --> 00:25:08,620
project written by a ruby guy so don't

00:25:06,610 --> 00:25:09,940
mind the Python code on github called

00:25:08,620 --> 00:25:12,700
pork chop which is pretty good at

00:25:09,940 --> 00:25:14,650
sending some system metrics and then the

00:25:12,700 --> 00:25:18,520
second thing which we built in-house is

00:25:14,650 --> 00:25:19,720
called century and I might have demoed

00:25:18,520 --> 00:25:21,250
this last year a little bit but I'm

00:25:19,720 --> 00:25:22,150
really happy to say this year you can

00:25:21,250 --> 00:25:25,540
actually use it if you're not using

00:25:22,150 --> 00:25:26,950
Jengo and it basically aggregates errors

00:25:25,540 --> 00:25:28,570
you plug it into your framework or your

00:25:26,950 --> 00:25:30,640
application whatever it is you say you

00:25:28,570 --> 00:25:32,350
know whenever there's an exception send

00:25:30,640 --> 00:25:34,240
it here and it will magically do all

00:25:32,350 --> 00:25:35,650
this stuff to figure out what the

00:25:34,240 --> 00:25:38,080
exception looks like what data is

00:25:35,650 --> 00:25:39,730
important does it like already exist in

00:25:38,080 --> 00:25:42,040
the system and in this case we have like

00:25:39,730 --> 00:25:44,820
four exceptions you know this one's been

00:25:42,040 --> 00:25:46,810
seen well is that almost 80,000 times

00:25:44,820 --> 00:25:48,400
which is definitely not unheard of up

00:25:46,810 --> 00:25:50,410
for us we had something in the millions

00:25:48,400 --> 00:25:51,310
and they're generally things that it's

00:25:50,410 --> 00:25:53,860
just like well this actually isn't

00:25:51,310 --> 00:25:55,630
important but sometimes it errors

00:25:53,860 --> 00:25:56,830
because people send invalid data but

00:25:55,630 --> 00:26:00,070
it's important to actually know that

00:25:56,830 --> 00:26:01,720
these exist um and I almost want to say

00:26:00,070 --> 00:26:03,610
we get just as much usage out of our

00:26:01,720 --> 00:26:05,200
graphs and our actual like automated

00:26:03,610 --> 00:26:08,560
metrics as we do the ops guys just

00:26:05,200 --> 00:26:11,680
watching this whenever they deploy um so

00:26:08,560 --> 00:26:14,590
to kind of wrap up what i'm trying to go

00:26:11,680 --> 00:26:15,730
with here is actually i wanted to point

00:26:14,590 --> 00:26:18,130
out how i didn't talk about deployment

00:26:15,730 --> 00:26:19,300
first mostly to cut down the time of

00:26:18,130 --> 00:26:20,650
this talk of it because i think it's the

00:26:19,300 --> 00:26:21,940
least important part of continuous

00:26:20,650 --> 00:26:23,080
deployment everybody solves it

00:26:21,940 --> 00:26:25,270
differently it doesn't really matter

00:26:23,080 --> 00:26:26,740
what you do you can do the cron job that

00:26:25,270 --> 00:26:28,210
pulls from a branch every five minutes

00:26:26,740 --> 00:26:31,720
if it exists I mean that's fine i'm sure

00:26:28,210 --> 00:26:34,060
i wouldn't recommend it the way we do it

00:26:31,720 --> 00:26:36,760
just a quick overview is we take a

00:26:34,060 --> 00:26:38,710
virtual it's relocatable we compile

00:26:36,760 --> 00:26:39,730
things we ship it as a tarball to the

00:26:38,710 --> 00:26:41,110
servers and

00:26:39,730 --> 00:26:44,380
it makes for a super fast and scalable

00:26:41,110 --> 00:26:45,820
deploy but you can literally just have

00:26:44,380 --> 00:26:47,800
you know I'm gonna get pull on my

00:26:45,820 --> 00:26:49,030
machine or I'm going to you know create

00:26:47,800 --> 00:26:51,730
a release here which is very common

00:26:49,030 --> 00:26:53,170
which is like a get Shaw and it just

00:26:51,730 --> 00:26:54,580
symlinks to another directory which is

00:26:53,170 --> 00:26:56,140
like your current repo and then you can

00:26:54,580 --> 00:26:58,720
just swap over that symlink and you now

00:26:56,140 --> 00:27:00,130
have a new version live but like i said

00:26:58,720 --> 00:27:01,270
the least important part of continuous

00:27:00,130 --> 00:27:04,890
deployment is actually how you deploy

00:27:01,270 --> 00:27:06,700
the code um so to wrap some of this up

00:27:04,890 --> 00:27:08,530
the things i would highly suggest

00:27:06,700 --> 00:27:10,300
getting started or if you don't do it

00:27:08,530 --> 00:27:11,830
today do it either way packaging your

00:27:10,300 --> 00:27:13,690
app is important like whether this is

00:27:11,830 --> 00:27:15,520
officially through setup type i and

00:27:13,690 --> 00:27:17,560
requirements and all these like nice

00:27:15,520 --> 00:27:19,660
little python things or if it's you

00:27:17,560 --> 00:27:21,490
prefer using Debian packages in addition

00:27:19,660 --> 00:27:23,710
to this possibly or on its own or if you

00:27:21,490 --> 00:27:25,510
do what we do and you create a virtual

00:27:23,710 --> 00:27:27,430
and then you tore it up and you just

00:27:25,510 --> 00:27:28,660
ship it everywhere there's many ways you

00:27:27,430 --> 00:27:30,550
can package it but you should definitely

00:27:28,660 --> 00:27:32,590
package it and this goes back to making

00:27:30,550 --> 00:27:35,200
everything consistent reliable and

00:27:32,590 --> 00:27:37,600
repeatable you know your system should

00:27:35,200 --> 00:27:39,700
look like your CI server your CI server

00:27:37,600 --> 00:27:40,990
said should somewhat resemble your

00:27:39,700 --> 00:27:42,760
development environment and you can make

00:27:40,990 --> 00:27:44,440
this really easy by just shipping the

00:27:42,760 --> 00:27:46,420
same thing to your CI server that you

00:27:44,440 --> 00:27:47,770
would ship to production in our case we

00:27:46,420 --> 00:27:49,300
actually have a bill that says okay see

00:27:47,770 --> 00:27:50,860
I said where you pass tests now create a

00:27:49,300 --> 00:27:54,670
release so we can just ship that as soon

00:27:50,860 --> 00:27:56,380
as we're ready value in code review is

00:27:54,670 --> 00:27:58,960
something we didn't do for a long time

00:27:56,380 --> 00:28:00,400
we've implemented this I think fairly

00:27:58,960 --> 00:28:01,960
well in the last few months and it's

00:28:00,400 --> 00:28:03,970
super super useful the amount of like

00:28:01,960 --> 00:28:05,530
feedback that you get that you would

00:28:03,970 --> 00:28:06,820
never consider or even if you don't care

00:28:05,530 --> 00:28:09,130
about it like you get feedback that's

00:28:06,820 --> 00:28:13,030
really really valuable and it's it takes

00:28:09,130 --> 00:28:15,010
very little time most importantly you

00:28:13,030 --> 00:28:15,970
know deploy however you want but make it

00:28:15,010 --> 00:28:17,830
so you can roll back very quickly

00:28:15,970 --> 00:28:19,510
generally like if you're using a symlink

00:28:17,830 --> 00:28:21,010
approach which is very common or you

00:28:19,510 --> 00:28:22,930
have a tarball or something you probably

00:28:21,010 --> 00:28:25,260
have like a list of releases just swap

00:28:22,930 --> 00:28:27,100
the sim linked to the old release

00:28:25,260 --> 00:28:28,390
instead of automated testing if you

00:28:27,100 --> 00:28:30,130
don't have integration you should have

00:28:28,390 --> 00:28:31,780
it right now it's very easy to set up it

00:28:30,130 --> 00:28:33,940
costs you nothing unless you have no

00:28:31,780 --> 00:28:36,370
tests and then I mean you're in for a

00:28:33,940 --> 00:28:38,290
world of trouble already and gather

00:28:36,370 --> 00:28:41,290
metrics like start with something easy

00:28:38,290 --> 00:28:43,240
start with you know how many requests am

00:28:41,290 --> 00:28:45,100
I getting in add more advanced things

00:28:43,240 --> 00:28:46,930
like we just recently added how many

00:28:45,100 --> 00:28:48,490
rights and updates and deletes per

00:28:46,930 --> 00:28:50,080
second as each database server getting

00:28:48,490 --> 00:28:51,880
and not only is it just each database

00:28:50,080 --> 00:28:53,200
server it's every single table on each

00:28:51,880 --> 00:28:53,410
database server so we can actually see

00:28:53,200 --> 00:28:55,390
you

00:28:53,410 --> 00:28:56,890
what's causing us the most pain on this

00:28:55,390 --> 00:28:58,750
database cluster can we move it can we

00:28:56,890 --> 00:29:00,690
do these other things and it helps us

00:28:58,750 --> 00:29:02,620
kind of determine problems a lot easier

00:29:00,690 --> 00:29:04,300
and if you want to be a little bit edgy

00:29:02,620 --> 00:29:07,990
you can go a little bit further and we

00:29:04,300 --> 00:29:09,370
haven't done some of this an immune

00:29:07,990 --> 00:29:10,570
system is something a lot of people talk

00:29:09,370 --> 00:29:12,430
about and it's something that

00:29:10,570 --> 00:29:14,170
automatically in most cases it would

00:29:12,430 --> 00:29:16,030
automatically roll back if it like

00:29:14,170 --> 00:29:17,590
detects maybe you lose fifty percent of

00:29:16,030 --> 00:29:18,910
your registrations for a second it's a

00:29:17,590 --> 00:29:20,590
really cool idea but it's also very

00:29:18,910 --> 00:29:22,960
risky you have to be very very confident

00:29:20,590 --> 00:29:25,960
in your system to do this you can also

00:29:22,960 --> 00:29:28,000
automate deploys it could work I think

00:29:25,960 --> 00:29:29,620
it could work just fine but I truly

00:29:28,000 --> 00:29:31,300
believe continuous deployment doesn't

00:29:29,620 --> 00:29:32,700
just meaning deploying all the time it

00:29:31,300 --> 00:29:36,580
means the point whenever you want

00:29:32,700 --> 00:29:38,560
hopefully that's all the time and like

00:29:36,580 --> 00:29:41,620
adjusting it to your culture is is very

00:29:38,560 --> 00:29:43,390
hard like we've iterated on this over

00:29:41,620 --> 00:29:45,130
and over and over and there's this this

00:29:43,390 --> 00:29:46,990
like spiel about the right way to do

00:29:45,130 --> 00:29:48,970
things you don't have to do it a

00:29:46,990 --> 00:29:51,910
specific way adopt what things make

00:29:48,970 --> 00:29:54,220
sense for you and go from there an SOA

00:29:51,910 --> 00:29:55,630
is where we're heading and we've started

00:29:54,220 --> 00:29:57,520
in some areas and it makes this much

00:29:55,630 --> 00:29:59,110
easier when you can isolate services

00:29:57,520 --> 00:30:00,880
just test those services just deploy

00:29:59,110 --> 00:30:03,610
those services have all of these great

00:30:00,880 --> 00:30:06,160
processes and just implement them per

00:30:03,610 --> 00:30:07,450
service and deploy a single service and

00:30:06,160 --> 00:30:08,890
you know when that service breaks it's

00:30:07,450 --> 00:30:10,270
compatible just roll back that service

00:30:08,890 --> 00:30:12,010
you can still deploy this other service

00:30:10,270 --> 00:30:13,510
which means in the end that is a

00:30:12,010 --> 00:30:15,040
developer you can just keep committing

00:30:13,510 --> 00:30:16,630
code you can keep writing code and

00:30:15,040 --> 00:30:17,980
you're not wasting time like worrying

00:30:16,630 --> 00:30:19,210
about like oh is it going to affect this

00:30:17,980 --> 00:30:20,410
is it going to affect this unless it

00:30:19,210 --> 00:30:26,010
actually does and then you can deal with

00:30:20,410 --> 00:30:29,010
it and that's about all I had um

00:30:26,010 --> 00:30:29,010
questions

00:30:37,980 --> 00:30:45,820
hey so for a code review your tools I'm

00:30:43,600 --> 00:30:47,410
you said I've been using a camera what

00:30:45,820 --> 00:30:50,440
the name is fabricator fabricator for

00:30:47,410 --> 00:30:51,850
three months for so so what made you

00:30:50,440 --> 00:30:55,090
decide to use that tool and what we're

00:30:51,850 --> 00:30:57,190
using before and yeah before fabricator

00:30:55,090 --> 00:30:58,420
where you're using pull requests and I

00:30:57,190 --> 00:31:00,070
know there's some github people here I

00:30:58,420 --> 00:31:01,480
have no idea how you scale this with the

00:31:00,070 --> 00:31:02,710
number of employees you have maybe

00:31:01,480 --> 00:31:04,510
there's a way we couldn't figure it out

00:31:02,710 --> 00:31:06,100
we used to pull request for a long time

00:31:04,510 --> 00:31:07,690
I still use that heavily an open source

00:31:06,100 --> 00:31:09,550
send me a pull request I'll review it i

00:31:07,690 --> 00:31:11,170
generally am not as rigid as i am with

00:31:09,550 --> 00:31:12,880
discuss but it discussed we're very

00:31:11,170 --> 00:31:14,950
rigid and we want you know if there's an

00:31:12,880 --> 00:31:16,330
issue we reject it right away and you

00:31:14,950 --> 00:31:17,950
can do all this with github but it

00:31:16,330 --> 00:31:19,900
wasn't structured enough and we had

00:31:17,950 --> 00:31:21,040
issues with like oh god my feeds full of

00:31:19,900 --> 00:31:24,310
all this stuff what am I supposed to

00:31:21,040 --> 00:31:25,990
look at and it worked for a while it

00:31:24,310 --> 00:31:27,340
just we wanted something more rigid and

00:31:25,990 --> 00:31:28,870
we looked at various sayings fabricator

00:31:27,340 --> 00:31:31,870
being one of them we looked at UM

00:31:28,870 --> 00:31:33,460
whatever Google's thing is I think I

00:31:31,870 --> 00:31:34,570
don't remember if it wasn't get

00:31:33,460 --> 00:31:36,160
compatible or if there's some other

00:31:34,570 --> 00:31:37,540
reason we didn't choose it but

00:31:36,160 --> 00:31:39,220
fabricator was really good the guys that

00:31:37,540 --> 00:31:40,600
maintain it are awesome they have

00:31:39,220 --> 00:31:43,870
implemented ton of stuff very quickly

00:31:40,600 --> 00:31:45,160
for us highly recommend it but it just

00:31:43,870 --> 00:31:46,810
seemed like the right choice for the job

00:31:45,160 --> 00:31:48,730
and it is just that we really wanted

00:31:46,810 --> 00:31:50,650
more structure at that time okay I have

00:31:48,730 --> 00:31:52,240
one I have one other question too um you

00:31:50,650 --> 00:31:56,320
mentioned you guys use a selenium tests

00:31:52,240 --> 00:31:57,670
right right okay so do you what's your

00:31:56,320 --> 00:31:59,830
process for that do you have selenium

00:31:57,670 --> 00:32:03,520
tests run on the development box deleted

00:31:59,830 --> 00:32:06,400
all selenium tests aha we have replaced

00:32:03,520 --> 00:32:08,830
so we're reimplemented some but we had

00:32:06,400 --> 00:32:10,210
all these slow ugly always linea tests

00:32:08,830 --> 00:32:12,160
that were not honest phul at all we

00:32:10,210 --> 00:32:13,570
deleted all that we're trying to

00:32:12,160 --> 00:32:15,610
implement in JavaScript unit testing

00:32:13,570 --> 00:32:17,410
correctly from the get go to some extent

00:32:15,610 --> 00:32:19,150
but we're also implementing new selenium

00:32:17,410 --> 00:32:21,670
tests that are just like very very basic

00:32:19,150 --> 00:32:23,230
does it work from here to here period it

00:32:21,670 --> 00:32:25,210
can take a little bit longer it'll run

00:32:23,230 --> 00:32:26,860
in parallel with everything else and we

00:32:25,210 --> 00:32:28,180
have like you know maybe five of them or

00:32:26,860 --> 00:32:29,590
something we don't need a test like

00:32:28,180 --> 00:32:30,850
every single thing you know like does

00:32:29,590 --> 00:32:32,620
this button exist can you click it we

00:32:30,850 --> 00:32:34,660
just want to know like does the comment

00:32:32,620 --> 00:32:36,550
form rendered can you post a comment and

00:32:34,660 --> 00:32:39,490
like simple integration tests that

00:32:36,550 --> 00:32:40,960
matter because a selenium was it's it is

00:32:39,490 --> 00:32:42,430
painful to use like there's a lot of

00:32:40,960 --> 00:32:43,990
stuff you have to be careful with I

00:32:42,430 --> 00:32:46,150
never met someone who's been 100% like

00:32:43,990 --> 00:32:50,160
yes everything works perfectly and we

00:32:46,150 --> 00:32:50,160
loves alani we tried very hard for what

00:32:50,610 --> 00:32:54,550
yeah how's it going hey so I was just

00:32:53,050 --> 00:32:58,210
wondering how many times a day do you

00:32:54,550 --> 00:33:00,850
guys deploy Scott as many as we want um

00:32:58,210 --> 00:33:03,160
at minimum we deploy once a day to clean

00:33:00,850 --> 00:33:05,020
slate but it's general like we deploy if

00:33:03,160 --> 00:33:06,970
we want to deploy it's not the greatest

00:33:05,020 --> 00:33:08,620
thing like ideally we would deploy after

00:33:06,970 --> 00:33:10,030
every commit because then the QA level

00:33:08,620 --> 00:33:13,660
is small like the risk is smaller right

00:33:10,030 --> 00:33:15,850
yeah we don't do that because it does

00:33:13,660 --> 00:33:17,860
take an amount of effort to deploy at

00:33:15,850 --> 00:33:19,330
our scale like it's not simply just get

00:33:17,860 --> 00:33:21,280
Poland things work and restart a single

00:33:19,330 --> 00:33:23,070
server it's that you know you have to

00:33:21,280 --> 00:33:25,840
release this to a ton of nodes usually

00:33:23,070 --> 00:33:27,640
there's like some kind of order because

00:33:25,840 --> 00:33:29,080
maybe this relies on this still too much

00:33:27,640 --> 00:33:31,060
which is a problem on our end but it's

00:33:29,080 --> 00:33:35,890
what effects are deployed times we

00:33:31,060 --> 00:33:37,630
deploys as little as once a day lately

00:33:35,890 --> 00:33:39,880
it's no more than like half a dozen

00:33:37,630 --> 00:33:41,440
times a day but that's not because we

00:33:39,880 --> 00:33:42,970
couldn't deploy it just that like we

00:33:41,440 --> 00:33:45,430
haven't seen a value and continually

00:33:42,970 --> 00:33:47,860
deploying that fast gotcha that's good

00:33:45,430 --> 00:33:50,080
did you recognize them weaknesses like I

00:33:47,860 --> 00:33:51,430
said all of this I think is a grain of

00:33:50,080 --> 00:33:52,660
salt and adopted your own culture you

00:33:51,430 --> 00:33:55,390
don't have to live any of this by like a

00:33:52,660 --> 00:33:56,920
gospel or anything also one more quick

00:33:55,390 --> 00:33:58,660
question why do you what do you roll

00:33:56,920 --> 00:34:01,780
back why don't you fix it and move

00:33:58,660 --> 00:34:03,820
forward and kind of give that that per

00:34:01,780 --> 00:34:05,680
game I nearly progressing you know what

00:34:03,820 --> 00:34:07,270
I mean yeah it might not be quick to fix

00:34:05,680 --> 00:34:08,620
a lot of the times like generally when

00:34:07,270 --> 00:34:09,850
something breaks we want to go back

00:34:08,620 --> 00:34:11,530
through this process so we make sure

00:34:09,850 --> 00:34:12,820
it's not broken again so we want them to

00:34:11,530 --> 00:34:14,350
have to like we want to revert that

00:34:12,820 --> 00:34:16,570
commit we want them to be like you know

00:34:14,350 --> 00:34:17,950
this was broken committed again go

00:34:16,570 --> 00:34:19,330
through review again go through tests

00:34:17,950 --> 00:34:20,500
again make sure there's coverage for

00:34:19,330 --> 00:34:22,240
what just broke and then we'll deploy it

00:34:20,500 --> 00:34:23,860
again right so it slows it down a lot

00:34:22,240 --> 00:34:26,320
but it makes it much more stable yeah

00:34:23,860 --> 00:34:27,399
without having a you know massive amount

00:34:26,320 --> 00:34:29,169
of coverage you know ninety-eight

00:34:27,399 --> 00:34:33,130
percent I can understand that right

00:34:29,169 --> 00:34:35,470
right all right thanks thank you for the

00:34:33,130 --> 00:34:37,800
interesting talk um what do you all do

00:34:35,470 --> 00:34:40,450
about like database changes like

00:34:37,800 --> 00:34:42,580
especially for rollback like eventually

00:34:40,450 --> 00:34:44,409
you have to make persistence changes and

00:34:42,580 --> 00:34:46,300
that means saying you're sorry right so

00:34:44,409 --> 00:34:49,300
I I deleted my simple schema changes

00:34:46,300 --> 00:34:51,010
slide if you Google eyes scaling schema

00:34:49,300 --> 00:34:53,290
changes or something or scaling ddl like

00:34:51,010 --> 00:34:54,820
there's a post on my blog but you always

00:34:53,290 --> 00:34:56,530
make backwards and forwards compatible

00:34:54,820 --> 00:34:58,690
changes so it generally means like you

00:34:56,530 --> 00:35:00,460
in our case maybe you add a column to a

00:34:58,690 --> 00:35:01,580
table it's notable it doesn't need to

00:35:00,460 --> 00:35:03,290
exist right now but

00:35:01,580 --> 00:35:04,940
there now you've added the column now

00:35:03,290 --> 00:35:06,500
you somehow commit the changes that need

00:35:04,940 --> 00:35:07,970
to backfill that column so like if the

00:35:06,500 --> 00:35:10,550
data actually needs to exist that time

00:35:07,970 --> 00:35:12,770
of like code change right you you

00:35:10,550 --> 00:35:14,690
backfill the data and then you commit

00:35:12,770 --> 00:35:16,700
again and you have whatever actually

00:35:14,690 --> 00:35:18,530
needs to use that data and ideally this

00:35:16,700 --> 00:35:20,060
is behind a feature switch so if somehow

00:35:18,530 --> 00:35:21,410
that data is messed up you just turn it

00:35:20,060 --> 00:35:23,420
off and you you know restart the process

00:35:21,410 --> 00:35:25,070
but we never would go back and like drop

00:35:23,420 --> 00:35:27,710
a a column or anything like that like

00:35:25,070 --> 00:35:29,510
we're very careful about schema changes

00:35:27,710 --> 00:35:31,100
and things like that because like you

00:35:29,510 --> 00:35:32,270
don't just make them on a whim you have

00:35:31,100 --> 00:35:33,620
to actually consider the impact of what

00:35:32,270 --> 00:35:36,500
you're doing and what it means long-term

00:35:33,620 --> 00:35:37,870
to some extent and I think it's fairly

00:35:36,500 --> 00:35:40,610
easy but like Google that blog post

00:35:37,870 --> 00:35:42,290
discuss scallion schema changes or my

00:35:40,610 --> 00:35:44,030
name's something like that it's on my

00:35:42,290 --> 00:35:46,400
blog and it basically describes the

00:35:44,030 --> 00:35:47,870
process we use and it goes into much

00:35:46,400 --> 00:35:55,250
more detail than I can right now okay

00:35:47,870 --> 00:35:59,140
thank um do you have any code review

00:35:55,250 --> 00:36:01,490
policies like a maximum number of lines

00:35:59,140 --> 00:36:04,610
steam at the recommended time to get

00:36:01,490 --> 00:36:06,830
back get your review back to a person um

00:36:04,610 --> 00:36:08,360
we're trying to implement policies for

00:36:06,830 --> 00:36:10,850
like you know you need to have this

00:36:08,360 --> 00:36:12,020
reviewed in X time it's it's still

00:36:10,850 --> 00:36:14,090
struggle for us honestly we haven't

00:36:12,020 --> 00:36:16,100
found a good thing yet that makes this

00:36:14,090 --> 00:36:17,750
work we're at least right now saying you

00:36:16,100 --> 00:36:18,650
know at the very least at the start of

00:36:17,750 --> 00:36:20,330
the day and the end of the day you

00:36:18,650 --> 00:36:21,440
should clean your slate that really

00:36:20,330 --> 00:36:23,300
sucks because then you might have to

00:36:21,440 --> 00:36:24,890
wait a day for review but usually like

00:36:23,300 --> 00:36:27,260
if it matters and it doesn't need to go

00:36:24,890 --> 00:36:29,180
out right now again we've been fairly

00:36:27,260 --> 00:36:30,170
stable changes so it's not a big like we

00:36:29,180 --> 00:36:33,830
want to release today it's we want to

00:36:30,170 --> 00:36:35,840
release as soon as we can so it's it's

00:36:33,830 --> 00:36:37,850
just you know please review it quickly

00:36:35,840 --> 00:36:40,190
if it takes you a little longer you know

00:36:37,850 --> 00:36:41,420
that's fine ideally you would say you

00:36:40,190 --> 00:36:43,370
know if you can't review this in the

00:36:41,420 --> 00:36:45,470
next 20 minutes we assign it to somebody

00:36:43,370 --> 00:36:47,630
else and they review it right really 20

00:36:45,470 --> 00:36:49,340
minutes is like your I think that's

00:36:47,630 --> 00:36:51,410
reasonable because like you have to

00:36:49,340 --> 00:36:53,090
contact switch to go back and change it

00:36:51,410 --> 00:36:54,620
if there are changes and but you're

00:36:53,090 --> 00:36:56,300
you're kind of asking for a context

00:36:54,620 --> 00:36:57,830
which are the reviewer right exactly and

00:36:56,300 --> 00:36:59,270
that's the idea is that you know there

00:36:57,830 --> 00:37:00,320
is going to be this like this a lot of

00:36:59,270 --> 00:37:02,930
time where you're going to have to deal

00:37:00,320 --> 00:37:04,910
with a secondary context right and if

00:37:02,930 --> 00:37:06,800
you can't actually switch like and but

00:37:04,910 --> 00:37:08,480
you can skim something like I feel like

00:37:06,800 --> 00:37:10,490
that's that's fine if I can just quickly

00:37:08,480 --> 00:37:11,630
be I can't do this right now and then I

00:37:10,490 --> 00:37:12,180
can just go back to what I'm doing and I

00:37:11,630 --> 00:37:15,780
shouldn't really

00:37:12,180 --> 00:37:16,829
lose much focus vs you know oh maybe

00:37:15,780 --> 00:37:17,730
they'll get to it by the end of the day

00:37:16,829 --> 00:37:19,559
I don't even know if they're going to

00:37:17,730 --> 00:37:21,119
get to it and that's our big issue that

00:37:19,559 --> 00:37:25,380
we're trying to solve right now okay

00:37:21,119 --> 00:37:28,260
thanks hi um can you share some numbers

00:37:25,380 --> 00:37:31,829
with us like production hates like how

00:37:28,260 --> 00:37:35,490
many services um we have I believe less

00:37:31,829 --> 00:37:37,619
than 200 physical machines like I said

00:37:35,490 --> 00:37:39,690
on average I think we do between 12 and

00:37:37,619 --> 00:37:41,760
15 thousand requests a second two nann

00:37:39,690 --> 00:37:44,130
CDN servers we peak much much much

00:37:41,760 --> 00:37:46,050
higher than that I can't share numbers

00:37:44,130 --> 00:37:48,180
that we kind of just recently announced

00:37:46,050 --> 00:37:51,329
we just hit 700 million unique visitors

00:37:48,180 --> 00:37:55,020
across our network sometime in the last

00:37:51,329 --> 00:37:56,490
month four billion page views massive

00:37:55,020 --> 00:37:58,619
amount of traffic every way you look at

00:37:56,490 --> 00:38:00,420
it but outside that I don't really have

00:37:58,619 --> 00:38:02,400
any more numbers on hand so how long

00:38:00,420 --> 00:38:05,190
does it take to deploy anything to

00:38:02,400 --> 00:38:08,609
production we're working on this is well

00:38:05,190 --> 00:38:10,290
it was slow last I heard for some reason

00:38:08,609 --> 00:38:12,599
it took quite a while the other day a

00:38:10,290 --> 00:38:15,000
little bit ashamed to say how long that

00:38:12,599 --> 00:38:16,140
was so I'm not going to but we are

00:38:15,000 --> 00:38:18,359
improving that and this is where i go

00:38:16,140 --> 00:38:19,619
back to so alike if it's a smaller

00:38:18,359 --> 00:38:21,720
amount of machines you have to deploy do

00:38:19,619 --> 00:38:23,190
you can employ quicker if something's

00:38:21,720 --> 00:38:24,480
not relying on those machines as heavily

00:38:23,190 --> 00:38:26,220
because they're not doing many many

00:38:24,480 --> 00:38:27,690
things maybe you can employ them much

00:38:26,220 --> 00:38:28,980
quicker so right now we're working on

00:38:27,690 --> 00:38:30,299
speeding up the deploy process one of

00:38:28,980 --> 00:38:33,000
those is like we actually just did this

00:38:30,299 --> 00:38:34,920
tar ball change very recently trying to

00:38:33,000 --> 00:38:36,480
remove some of the warmup time from like

00:38:34,920 --> 00:38:38,460
Apache so we can actually deploy maybe

00:38:36,480 --> 00:38:41,160
like two times as fast or three or four

00:38:38,460 --> 00:38:42,960
times as fast but unfortunately we

00:38:41,160 --> 00:38:44,970
haven't scaled the speed of deploy as

00:38:42,960 --> 00:38:46,859
much as we'd like with the number of

00:38:44,970 --> 00:38:49,410
servers increasing do you guys have any

00:38:46,859 --> 00:38:53,520
geo-located servers or all of our

00:38:49,410 --> 00:38:55,260
servers are in based in one area we do

00:38:53,520 --> 00:38:58,079
have a wii u's Akamai's a CDN and we

00:38:55,260 --> 00:38:59,309
push a lot of stuff to the CDN and

00:38:58,079 --> 00:39:01,020
that's actually like our crazy

00:38:59,309 --> 00:39:07,020
optimization for making everything fast

00:39:01,020 --> 00:39:08,760
yeah thanks hello i was wondering when

00:39:07,020 --> 00:39:10,470
you do a deployment is that one

00:39:08,760 --> 00:39:12,299
deployment across all different types of

00:39:10,470 --> 00:39:13,680
boxes or is it sort of like okay we're

00:39:12,299 --> 00:39:15,299
going to plug all the app servers now

00:39:13,680 --> 00:39:17,819
but that's not a deployment for the

00:39:15,299 --> 00:39:19,589
whole stack and if so how do you manage

00:39:17,819 --> 00:39:21,660
shipping the tarballs is it one big

00:39:19,589 --> 00:39:24,030
tarball that box is just you know take a

00:39:21,660 --> 00:39:26,010
piece of or are there many that stay in

00:39:24,030 --> 00:39:27,360
lockstep right um so

00:39:26,010 --> 00:39:29,010
like I said we're moving to Scylla and

00:39:27,360 --> 00:39:30,870
we've actually started with that for

00:39:29,010 --> 00:39:32,880
example our Comment widget is

00:39:30,870 --> 00:39:34,290
specifically a service called embed we

00:39:32,880 --> 00:39:35,430
can deploy to that and not deploy to

00:39:34,290 --> 00:39:37,200
anything else we can employ to our

00:39:35,430 --> 00:39:39,480
restful api and not deployed anything

00:39:37,200 --> 00:39:41,010
else we can update our importing tools

00:39:39,480 --> 00:39:42,300
and not deploy to anything else so

00:39:41,010 --> 00:39:44,310
that's how we've kind of taken care of

00:39:42,300 --> 00:39:46,560
like because you can't do the monolithic

00:39:44,310 --> 00:39:48,840
deploy forever that said like however

00:39:46,560 --> 00:39:52,320
there are like the embed and like the

00:39:48,840 --> 00:39:54,540
API specifically the embed and maybe

00:39:52,320 --> 00:39:57,570
there's another one that's not API is a

00:39:54,540 --> 00:39:59,220
fairly large amount of servers it's not

00:39:57,570 --> 00:40:00,630
ridiculous amounts like I said we have

00:39:59,220 --> 00:40:03,720
less than 200 machines and most of them

00:40:00,630 --> 00:40:04,950
are not web servers but that's how we're

00:40:03,720 --> 00:40:06,330
dealing with that is just by splitting

00:40:04,950 --> 00:40:07,770
them up in his services whether it's the

00:40:06,330 --> 00:40:09,270
same application or not it doesn't

00:40:07,770 --> 00:40:11,100
really matter it's just that they run

00:40:09,270 --> 00:40:12,180
configured differently or they run

00:40:11,100 --> 00:40:16,410
different versions of the code rather

00:40:12,180 --> 00:40:20,670
thanks could you tell us about your

00:40:16,410 --> 00:40:22,050
rollback process uh I'm actually not

00:40:20,670 --> 00:40:23,460
sure what it is at this point I know at

00:40:22,050 --> 00:40:25,740
one point it was literally just swapped

00:40:23,460 --> 00:40:27,300
the symlink restart the server it would

00:40:25,740 --> 00:40:30,350
take less than a minute to restart every

00:40:27,300 --> 00:40:33,770
single service on every server for this

00:40:30,350 --> 00:40:37,400
but that's all it is I want to ask about

00:40:33,770 --> 00:40:40,260
the business metrics measurements you

00:40:37,400 --> 00:40:41,880
sort of skimmed over it but did you have

00:40:40,260 --> 00:40:44,490
to write your own tools for that are

00:40:41,880 --> 00:40:46,670
applicable to your business or have you

00:40:44,490 --> 00:40:48,720
were you able to leverage some of

00:40:46,670 --> 00:40:50,850
third-party tools for something like I

00:40:48,720 --> 00:40:53,100
said we use graphite and we just write

00:40:50,850 --> 00:40:54,570
to stats d when an object is created we

00:40:53,100 --> 00:40:57,450
just write to set C like we implemented

00:40:54,570 --> 00:40:58,740
a majority of this system metrics you

00:40:57,450 --> 00:41:00,270
can get like the other thing I stalking

00:40:58,740 --> 00:41:02,040
about porkchop or something else but the

00:41:00,270 --> 00:41:03,360
business metrics it's hard to have a

00:41:02,040 --> 00:41:04,590
generic tool for a lot of those unless

00:41:03,360 --> 00:41:06,300
it's something common like PayPal

00:41:04,590 --> 00:41:07,860
billing or something like that but

00:41:06,300 --> 00:41:10,860
everything else it kind of gets into

00:41:07,860 --> 00:41:13,670
specifics a lot of the time all right

00:41:10,860 --> 00:41:15,730
thank you guys thank you very much David

00:41:13,670 --> 00:41:15,730

YouTube URL: https://www.youtube.com/watch?v=QGfxLXoMpPk


