Title: Interfaces and Python
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Eric Snow
In 2.6, Python introduced the Abstract Base Classes.  Before that we had "protocols" (and we still do).  In this talk we'll look at how the general concept of interfaces fits into today's Python.  We'll also look at some of the alternate pr
Captions: 
	00:00:00,030 --> 00:00:04,830
the stock with Erics no its interfaces

00:00:02,760 --> 00:00:11,880
in Python so everyone give a round of

00:00:04,830 --> 00:00:12,420
applause for Eric snow all right thank

00:00:11,880 --> 00:00:15,809
you everybody

00:00:12,420 --> 00:00:18,230
yeah I'm so glad to be here so I'm Eric

00:00:15,809 --> 00:00:21,840
snow I I put there at the bottom a

00:00:18,230 --> 00:00:24,150
little short URL to a copy of the slide

00:00:21,840 --> 00:00:28,019
so I'm getting presenting so feel free

00:00:24,150 --> 00:00:33,809
to follow along but you know anyway

00:00:28,019 --> 00:00:37,050
there you go and Eric's gnome just an

00:00:33,809 --> 00:00:38,940
ordinary guy and feeling a little

00:00:37,050 --> 00:00:41,340
intimidated because I'm sure there are a

00:00:38,940 --> 00:00:45,629
lot of people in here that know a lot

00:00:41,340 --> 00:00:48,059
more than I do about interfaces but here

00:00:45,629 --> 00:00:52,829
I am I'm given the talk so you have to

00:00:48,059 --> 00:00:54,780
listen to me also just want to point out

00:00:52,829 --> 00:01:01,350
any examples I give I've tried to be

00:00:54,780 --> 00:01:03,000
faithful in doing them in Python 3 so so

00:01:01,350 --> 00:01:07,229
if you try and run on Python 2 they may

00:01:03,000 --> 00:01:10,140
or may not break all right first of all

00:01:07,229 --> 00:01:12,950
this is something about which I'm really

00:01:10,140 --> 00:01:16,770
excited I'm no expert by any means but I

00:01:12,950 --> 00:01:17,820
am an enthusiast interfaces are great

00:01:16,770 --> 00:01:20,070
thing and we're going to talk

00:01:17,820 --> 00:01:23,790
specifically about object interfaces in

00:01:20,070 --> 00:01:25,290
Python you know there are lots of

00:01:23,790 --> 00:01:27,840
different kinds of interfaces we're not

00:01:25,290 --> 00:01:29,460
going to talk about them you know that

00:01:27,840 --> 00:01:31,799
you can talk about interfaces in lots of

00:01:29,460 --> 00:01:34,560
different ways and in other programming

00:01:31,799 --> 00:01:36,329
languages today we're just going to

00:01:34,560 --> 00:01:39,299
focus because there's just so much we

00:01:36,329 --> 00:01:46,320
could talk about about how awesome they

00:01:39,299 --> 00:01:51,450
are in Python all right I'm really

00:01:46,320 --> 00:01:56,399
excited I'm sure you can tell so why are

00:01:51,450 --> 00:01:57,990
they awesome there are lots of different

00:01:56,399 --> 00:01:59,310
things you can get out of interfaces

00:01:57,990 --> 00:02:01,320
we're not going to talk about these

00:01:59,310 --> 00:02:04,110
things but I just threw some things up

00:02:01,320 --> 00:02:06,380
that I was thinking about just say in

00:02:04,110 --> 00:02:10,440
the research I was doing for this talk

00:02:06,380 --> 00:02:11,790
good stuff but really it boils down to

00:02:10,440 --> 00:02:16,890
how awesome interface

00:02:11,790 --> 00:02:18,859
sar they provide us so much and I've

00:02:16,890 --> 00:02:23,400
thought for a long time that in Python

00:02:18,859 --> 00:02:27,030
we really don't think about interfaces

00:02:23,400 --> 00:02:29,549
in the same way as happen in other

00:02:27,030 --> 00:02:31,680
languages I mean how many people here

00:02:29,549 --> 00:02:36,569
have used interfaces before go and raise

00:02:31,680 --> 00:02:42,420
your hand yeah interfaces right well who

00:02:36,569 --> 00:02:44,849
hasn't used interfaces good you know but

00:02:42,420 --> 00:02:47,879
chances are you have and this is one

00:02:44,849 --> 00:02:49,290
point I want to make is even though we

00:02:47,879 --> 00:02:51,480
have interfaces in lots of other

00:02:49,290 --> 00:02:54,480
languages and Python doesn't have an

00:02:51,480 --> 00:03:00,900
interface syntax it has interfaces it's

00:02:54,480 --> 00:03:05,129
a concept that's really tied into a lot

00:03:00,900 --> 00:03:07,579
bigger idea than just a syntax and so

00:03:05,129 --> 00:03:10,590
you know we can call by other names but

00:03:07,579 --> 00:03:12,750
really what it boils down to and it's

00:03:10,590 --> 00:03:14,689
we're just talking to each other what

00:03:12,750 --> 00:03:18,659
really matters is how you're using

00:03:14,689 --> 00:03:21,120
objects how you're using code when you

00:03:18,659 --> 00:03:23,430
boil it down so really the focus of this

00:03:21,120 --> 00:03:26,790
talk is going to be how we get that in

00:03:23,430 --> 00:03:29,669
Python the communication that we do in

00:03:26,790 --> 00:03:32,930
our code is you know we have a variety

00:03:29,669 --> 00:03:36,479
of means of communicating about our code

00:03:32,930 --> 00:03:41,729
but really the one we're interested here

00:03:36,479 --> 00:03:44,159
is the code itself you know what kind of

00:03:41,729 --> 00:03:47,069
programmatic ways can we define how

00:03:44,159 --> 00:03:49,470
people should use our code it can say a

00:03:47,069 --> 00:03:52,379
lot about how they should use it just by

00:03:49,470 --> 00:03:56,099
what the code looks like the interface

00:03:52,379 --> 00:03:57,840
of functions of classes what we really

00:03:56,099 --> 00:04:01,109
care about though not just about

00:03:57,840 --> 00:04:02,609
function protocols and that sort of

00:04:01,109 --> 00:04:07,439
thing but we're specifically going to

00:04:02,609 --> 00:04:10,560
talk about object interfaces and they're

00:04:07,439 --> 00:04:12,090
a big deal when we talk about object

00:04:10,560 --> 00:04:14,220
interfaces we're talking about how

00:04:12,090 --> 00:04:17,609
somebody is going to use your object I

00:04:14,220 --> 00:04:20,159
mean talk about object protocols talk

00:04:17,609 --> 00:04:21,989
about it object api's with there are

00:04:20,159 --> 00:04:23,490
lots of different words you know we

00:04:21,989 --> 00:04:27,130
talked about how some

00:04:23,490 --> 00:04:31,000
object of a class or whatever just a

00:04:27,130 --> 00:04:33,870
breakfast object conforms to you know

00:04:31,000 --> 00:04:37,380
the you know the protocol interface the

00:04:33,870 --> 00:04:39,100
whatever breakfast implements it really

00:04:37,380 --> 00:04:41,470
doesn't matter because we're just

00:04:39,100 --> 00:04:46,390
talking about how people should be

00:04:41,470 --> 00:04:49,120
thinking about a particular object own

00:04:46,390 --> 00:04:53,800
and we could talk about how it

00:04:49,120 --> 00:04:56,860
implements that interface so what really

00:04:53,800 --> 00:05:01,510
matters here is Python what our

00:04:56,860 --> 00:05:03,190
interface is in Python we have a number

00:05:01,510 --> 00:05:05,710
of different ways we can look at it but

00:05:03,190 --> 00:05:08,170
first of all I wanted to walk yet just a

00:05:05,710 --> 00:05:10,600
little bit through the history of

00:05:08,170 --> 00:05:14,380
interfaces in Python because the history

00:05:10,600 --> 00:05:18,310
of interfaces in Python is really long

00:05:14,380 --> 00:05:23,560
it goes way back after that we'll we'll

00:05:18,310 --> 00:05:25,870
talk a little bit there about just how

00:05:23,560 --> 00:05:28,020
we have interfaces in Python both the

00:05:25,870 --> 00:05:30,280
protocols which have been around forever

00:05:28,020 --> 00:05:34,420
abstract base classes which are a lot

00:05:30,280 --> 00:05:36,700
newer and then very briefly will I'll

00:05:34,420 --> 00:05:41,590
just mention some ideas on how you can

00:05:36,700 --> 00:05:46,690
build your own interfaces okay so first

00:05:41,590 --> 00:05:48,730
of all storied past this is a the tip of

00:05:46,690 --> 00:05:50,290
the iceberg because if you go back so

00:05:48,730 --> 00:05:52,990
one thing I did in preparation for this

00:05:50,290 --> 00:05:55,170
talk is I spent a lot of time reading

00:05:52,990 --> 00:05:59,200
through all the mailing list archives

00:05:55,170 --> 00:06:03,940
for Python and there's a lot of stuff in

00:05:59,200 --> 00:06:05,320
there and I was really focused on what

00:06:03,940 --> 00:06:07,990
it could tell me about the history of

00:06:05,320 --> 00:06:11,740
interfaces and that's a great resource

00:06:07,990 --> 00:06:13,870
for it because from there it led me in

00:06:11,740 --> 00:06:15,550
all sorts of directions but but these

00:06:13,870 --> 00:06:16,960
are some of the highlights and just

00:06:15,550 --> 00:06:17,440
highlights because there's so much more

00:06:16,960 --> 00:06:21,240
than this

00:06:17,440 --> 00:06:23,230
it'd be a great exercise for anybody

00:06:21,240 --> 00:06:26,230
first of all I mean from the very

00:06:23,230 --> 00:06:27,760
beginning we've had duck typing and

00:06:26,230 --> 00:06:31,000
we'll talk more about duck type in a

00:06:27,760 --> 00:06:35,240
minute but basically it's been around

00:06:31,000 --> 00:06:36,860
since the beginning in 98

00:06:35,240 --> 00:06:41,750
there was a special interest group

00:06:36,860 --> 00:06:45,710
formed to look at at interfaces and and

00:06:41,750 --> 00:06:49,490
I mean like Java kinda interfaces a lot

00:06:45,710 --> 00:06:54,889
more formal syntax and and tools to use

00:06:49,490 --> 00:06:58,840
interfaces in Python and later on we had

00:06:54,889 --> 00:07:02,139
a couple pets in Oh for there was a

00:06:58,840 --> 00:07:06,699
whole episode where Guido posted some

00:07:02,139 --> 00:07:09,590
blog posts about how we need to have

00:07:06,699 --> 00:07:11,419
static typing and Python you know or

00:07:09,590 --> 00:07:14,449
optional static typing and everybody

00:07:11,419 --> 00:07:19,250
freaked out so I called the great typing

00:07:14,449 --> 00:07:21,199
scare of 2004 and in 2005 just a couple

00:07:19,250 --> 00:07:24,919
more well really just a month later and

00:07:21,199 --> 00:07:29,740
actually mostly as a result of Guido's

00:07:24,919 --> 00:07:34,090
blog posts there was just an enormous

00:07:29,740 --> 00:07:36,919
flood of of debate about interfaces and

00:07:34,090 --> 00:07:40,340
adaptation and I mean at this time

00:07:36,919 --> 00:07:42,620
adaptation was the the thing de jure it

00:07:40,340 --> 00:07:44,210
was for sure going to go into Python and

00:07:42,620 --> 00:07:49,159
and if you want to read more up on that

00:07:44,210 --> 00:07:52,610
you can look at pep 246 and basically

00:07:49,159 --> 00:07:55,219
after the debate we ended up go in a

00:07:52,610 --> 00:07:57,380
different direction moved away from

00:07:55,219 --> 00:07:59,479
adaptation more towards generic

00:07:57,380 --> 00:08:07,699
functions which you can read more up

00:07:59,479 --> 00:08:09,259
about that in pep 31 24 and we'll talk

00:08:07,699 --> 00:08:12,469
more about the these different options

00:08:09,259 --> 00:08:15,650
but but really you can see that there

00:08:12,469 --> 00:08:18,520
there's a long history here of of

00:08:15,650 --> 00:08:24,199
thinking about interfaces in python and

00:08:18,520 --> 00:08:29,229
the issue is so complex that from 1998

00:08:24,199 --> 00:08:31,819
and before that all the way through 2007

00:08:29,229 --> 00:08:33,409
the community really couldn't come to a

00:08:31,819 --> 00:08:40,490
conclusion on what the best route was

00:08:33,409 --> 00:08:42,680
and and really even I think it finally

00:08:40,490 --> 00:08:45,500
just came to Guido saying you know this

00:08:42,680 --> 00:08:47,540
has gone on long enough and and abcs is

00:08:45,500 --> 00:08:48,760
it but there's a little more to it than

00:08:47,540 --> 00:08:54,070
that but we won't go too

00:08:48,760 --> 00:08:58,390
into that lot of history and I hope you

00:08:54,070 --> 00:09:02,950
recognize just how much thought has gone

00:08:58,390 --> 00:09:06,030
into interfaces ultimately yeah those

00:09:02,950 --> 00:09:09,310
two pets died the rolls pet died

00:09:06,030 --> 00:09:11,020
generics died I think it's a kind of

00:09:09,310 --> 00:09:15,490
very back burner because it's still

00:09:11,020 --> 00:09:18,010
compatible with what we got the work of

00:09:15,490 --> 00:09:21,990
the type sake ended up rolling into

00:09:18,010 --> 00:09:27,390
what's now soap interface without the S

00:09:21,990 --> 00:09:30,160
the generics I mean is predated by

00:09:27,390 --> 00:09:33,430
filthy B's work on PI protocols and

00:09:30,160 --> 00:09:37,420
ended up right now mostly centered on

00:09:33,430 --> 00:09:39,600
his peak rules library but so there are

00:09:37,420 --> 00:09:43,300
lots of things that came out of this and

00:09:39,600 --> 00:09:49,150
in the language itself we're going to

00:09:43,300 --> 00:09:50,860
focus on the ABCs and a little bit and

00:09:49,150 --> 00:09:53,100
just real quick I mean if you want to

00:09:50,860 --> 00:09:55,960
look back look for these names

00:09:53,100 --> 00:09:58,990
especially I mean plenty of people were

00:09:55,960 --> 00:10:00,670
involved in these discussions but but

00:09:58,990 --> 00:10:04,090
these are some of the people that were

00:10:00,670 --> 00:10:09,040
really champions of the three different

00:10:04,090 --> 00:10:12,340
approaches and grito of course kind of

00:10:09,040 --> 00:10:14,050
pushed the whole process well great I

00:10:12,340 --> 00:10:16,180
hope no of you were too bored with that

00:10:14,050 --> 00:10:18,880
I found that the history of all that to

00:10:16,180 --> 00:10:20,290
be really fascinating and I'm I'm sorry

00:10:18,880 --> 00:10:23,560
we don't have more time to spend on it

00:10:20,290 --> 00:10:29,740
because it's great stuff protocols

00:10:23,560 --> 00:10:32,680
protocols in Python is I guess in some

00:10:29,740 --> 00:10:34,480
ways it's a pretty standard usage of the

00:10:32,680 --> 00:10:36,760
word but in others when we talk about

00:10:34,480 --> 00:10:42,640
Python protocols we're talking

00:10:36,760 --> 00:10:43,960
specifically about the names for

00:10:42,640 --> 00:10:47,350
different mechanisms that are in the

00:10:43,960 --> 00:10:49,570
language itself for accessing different

00:10:47,350 --> 00:10:52,930
functionality like when you call an

00:10:49,570 --> 00:10:54,820
object what's going to happen is

00:10:52,930 --> 00:10:56,890
underneath the interpreter is going to

00:10:54,820 --> 00:11:01,210
look for a dunder call method on the

00:10:56,890 --> 00:11:02,260
object and if it finds it it's going to

00:11:01,210 --> 00:11:04,120
use it

00:11:02,260 --> 00:11:08,560
if it doesn't you'll get an attribute

00:11:04,120 --> 00:11:10,810
area but these are protocols I mean that

00:11:08,560 --> 00:11:15,420
that call protocol it's you know an

00:11:10,810 --> 00:11:19,210
object if it subscribes to this this

00:11:15,420 --> 00:11:23,410
called protocol then it's going to have

00:11:19,210 --> 00:11:25,960
that method so if you go to that URL

00:11:23,410 --> 00:11:27,790
you'll find a whole bunch of different

00:11:25,960 --> 00:11:29,950
protocols that are defined there and I I

00:11:27,790 --> 00:11:32,170
don't remember I guess I should double

00:11:29,950 --> 00:11:33,910
checked to see if the word protocol is

00:11:32,170 --> 00:11:37,480
actually used there but you'll certainly

00:11:33,910 --> 00:11:40,990
find the these names there you'll also

00:11:37,480 --> 00:11:44,020
find descriptions of it you won't miss

00:11:40,990 --> 00:11:48,130
it in other places if you look you'll

00:11:44,020 --> 00:11:50,350
find descriptions of the file protocol I

00:11:48,130 --> 00:11:53,680
think if you look in the documentation

00:11:50,350 --> 00:11:55,450
about the built-in types there's an

00:11:53,680 --> 00:11:57,790
explanation of that file protocol there

00:11:55,450 --> 00:12:00,550
the pickle module the documentation

00:11:57,790 --> 00:12:03,250
explains the pickle protocol and the

00:12:00,550 --> 00:12:06,430
copy protocol and there are many others

00:12:03,250 --> 00:12:09,460
just in the language itself and so it

00:12:06,430 --> 00:12:11,050
helps if you're you're using Python to

00:12:09,460 --> 00:12:14,950
go through and get familiar with what

00:12:11,050 --> 00:12:16,900
the different protocols are for

00:12:14,950 --> 00:12:18,720
existence if you look go to the

00:12:16,900 --> 00:12:22,570
documentation for the pickle module

00:12:18,720 --> 00:12:26,080
you'll find that it defines an object

00:12:22,570 --> 00:12:29,260
protocol with these different methods

00:12:26,080 --> 00:12:32,320
and so they provide different

00:12:29,260 --> 00:12:36,160
functionality and so when you're using

00:12:32,320 --> 00:12:38,860
the pickle protocol or the pickle module

00:12:36,160 --> 00:12:41,230
it'll actually when you're trying to

00:12:38,860 --> 00:12:43,980
pickle or run pickle objects it'll use

00:12:41,230 --> 00:12:48,000
this protocol to do it you can actually

00:12:43,980 --> 00:12:52,540
customize the behavior of pickle by

00:12:48,000 --> 00:12:56,890
setting these functions on your objects

00:12:52,540 --> 00:12:59,020
on your classes well great and what's

00:12:56,890 --> 00:13:03,850
interesting is the the pickle protocol

00:12:59,020 --> 00:13:07,780
is actually used in other modules as

00:13:03,850 --> 00:13:08,860
well but regardless I mean it's it's

00:13:07,780 --> 00:13:09,910
pretty straightforward

00:13:08,860 --> 00:13:13,680
this is probably one of the bigger

00:13:09,910 --> 00:13:17,399
protocols in Python

00:13:13,680 --> 00:13:23,569
so what's interesting about the

00:13:17,399 --> 00:13:30,209
protocols though is that we don't really

00:13:23,569 --> 00:13:32,490
care about if an object actually obeys

00:13:30,209 --> 00:13:35,670
the protocol or not until we actually go

00:13:32,490 --> 00:13:39,779
to use it so really there's no

00:13:35,670 --> 00:13:42,990
validation or anything it's just I mean

00:13:39,779 --> 00:13:46,079
for instance if we look here we're able

00:13:42,990 --> 00:13:48,990
to create this object of the class the

00:13:46,079 --> 00:13:50,429
object great when we go to call it it's

00:13:48,990 --> 00:13:53,459
looking for this dunder call method

00:13:50,429 --> 00:13:56,730
right and what do we get we get a trace

00:13:53,459 --> 00:14:00,749
back because lo and behold we didn't

00:13:56,730 --> 00:14:02,929
have a dunder call method okay that's

00:14:00,749 --> 00:14:05,220
what we'd expect

00:14:02,929 --> 00:14:13,999
there you go type error not attribute

00:14:05,220 --> 00:14:17,610
err but I I mean pretty straightforward

00:14:13,999 --> 00:14:23,220
however if we define one it's going to

00:14:17,610 --> 00:14:25,170
work great and so it we it we really

00:14:23,220 --> 00:14:29,699
didn't care whether or not it had a call

00:14:25,170 --> 00:14:32,939
method until we actually used it and

00:14:29,699 --> 00:14:36,389
that's the important thing about the

00:14:32,939 --> 00:14:37,889
protocols in Python and we'll talk about

00:14:36,389 --> 00:14:39,660
I mean there's a kind of the essence of

00:14:37,889 --> 00:14:43,050
duck type um we'll talk about that in a

00:14:39,660 --> 00:14:47,670
second so if one interesting thing

00:14:43,050 --> 00:14:52,379
though is if we want to implement a

00:14:47,670 --> 00:14:55,290
protocol and we want to have kind of an

00:14:52,379 --> 00:14:58,319
abstract implementation I mean this is

00:14:55,290 --> 00:15:01,709
the classical way of making an abstract

00:14:58,319 --> 00:15:04,019
class in Python right we're just going

00:15:01,709 --> 00:15:07,439
to raise a not implemented air in the

00:15:04,019 --> 00:15:09,209
methods that we want to be abstract but

00:15:07,439 --> 00:15:13,889
again there's no validation this is all

00:15:09,209 --> 00:15:16,110
a call time sort of thing which is in

00:15:13,889 --> 00:15:17,579
contrast to abstract base classes and

00:15:16,110 --> 00:15:20,309
we'll talk about how those work but

00:15:17,579 --> 00:15:25,940
those are our instantiation time it

00:15:20,309 --> 00:15:28,110
actually validates everything well let's

00:15:25,940 --> 00:15:31,860
let's take this a little further because

00:15:28,110 --> 00:15:35,690
all this talk about about caring whether

00:15:31,860 --> 00:15:39,150
or not it actually implements a protocol

00:15:35,690 --> 00:15:44,640
until we need it is the essence of duck

00:15:39,150 --> 00:15:46,890
typing we're going to these acronyms

00:15:44,640 --> 00:15:52,620
here and many of you I'm sure are

00:15:46,890 --> 00:15:54,210
familiar with them but it's it's easier

00:15:52,620 --> 00:15:57,570
to ask forgiveness than permission

00:15:54,210 --> 00:16:00,210
the is really the a lot more pythonic

00:15:57,570 --> 00:16:04,250
than look before you leap so what we're

00:16:00,210 --> 00:16:10,440
going to do well for example right here

00:16:04,250 --> 00:16:14,820
a semi canonical example we're going to

00:16:10,440 --> 00:16:16,740
check first well in the ECR ask

00:16:14,820 --> 00:16:19,710
forgiveness version we're just going to

00:16:16,740 --> 00:16:24,690
try and and do the call on the object

00:16:19,710 --> 00:16:26,520
and if it fails we're going to catch it

00:16:24,690 --> 00:16:28,830
and we're going to handle it we'll go

00:16:26,520 --> 00:16:30,990
from there we don't care until we

00:16:28,830 --> 00:16:33,290
actually go to use it and we don't care

00:16:30,990 --> 00:16:39,540
if it fail if it doesn't have the method

00:16:33,290 --> 00:16:42,900
until until we do care and we can handle

00:16:39,540 --> 00:16:46,500
it there in contrast look before you

00:16:42,900 --> 00:16:48,360
leap is all about checking first so in

00:16:46,500 --> 00:16:52,520
this case we're just checking to see if

00:16:48,360 --> 00:16:55,860
it has the dunder call method and

00:16:52,520 --> 00:17:00,320
basically doing the same thing look

00:16:55,860 --> 00:17:02,400
before you leap les pythonic and that's

00:17:00,320 --> 00:17:03,690
it's actually something we'll talk about

00:17:02,400 --> 00:17:07,530
in a second with abstract base classes

00:17:03,690 --> 00:17:11,459
because the focus with those is in some

00:17:07,530 --> 00:17:12,660
ways more on look before you leap well

00:17:11,459 --> 00:17:13,800
let's talk a little more about duck

00:17:12,660 --> 00:17:16,890
typing though because I want to make

00:17:13,800 --> 00:17:19,429
sure everybody has a clear idea of duck

00:17:16,890 --> 00:17:21,929
typing because it's so essential to

00:17:19,429 --> 00:17:25,640
protocols and interfaces in Python and

00:17:21,929 --> 00:17:30,510
it's by far the older of the two

00:17:25,640 --> 00:17:32,880
built-in mechanisms for interfaces so

00:17:30,510 --> 00:17:36,720
you can look at it as polymorphism by

00:17:32,880 --> 00:17:40,559
capability and in contrast

00:17:36,720 --> 00:17:43,289
to polymorphism by type which matters

00:17:40,559 --> 00:17:45,090
because really when you're using an

00:17:43,289 --> 00:17:47,100
object you care about what it does

00:17:45,090 --> 00:17:49,830
you're going to care about how you're

00:17:47,100 --> 00:17:52,169
going to use it and you know you can

00:17:49,830 --> 00:17:54,330
reason about it maybe with a more formal

00:17:52,169 --> 00:17:56,460
interface but in the end you're going to

00:17:54,330 --> 00:17:59,299
be using it and that's all you care

00:17:56,460 --> 00:18:02,150
about at that point and duck typing

00:17:59,299 --> 00:18:06,240
that's what it's for

00:18:02,150 --> 00:18:09,650
if you look at what some of the people

00:18:06,240 --> 00:18:13,940
said these are pulled from mailing lists

00:18:09,650 --> 00:18:17,520
posts way back

00:18:13,940 --> 00:18:19,380
Raimond head-injured requiring a

00:18:17,520 --> 00:18:22,320
specific interface instead of a specific

00:18:19,380 --> 00:18:26,250
type that's what he he defined duck

00:18:22,320 --> 00:18:27,900
typing as fill BB determine objects type

00:18:26,250 --> 00:18:30,510
an inspection of its method attribute

00:18:27,900 --> 00:18:35,059
signature rather than by explicit

00:18:30,510 --> 00:18:37,710
relationship to some type object and

00:18:35,059 --> 00:18:40,620
even without formal interface

00:18:37,710 --> 00:18:43,020
declarations good practice mostly

00:18:40,620 --> 00:18:45,809
depends on conformant interfaces rather

00:18:43,020 --> 00:18:49,230
than sub client classing to determine an

00:18:45,809 --> 00:18:51,270
object's type different takes on it and

00:18:49,230 --> 00:18:52,789
and that's kind of thing everybody

00:18:51,270 --> 00:18:57,030
thinks of it a little differently but

00:18:52,789 --> 00:18:59,940
really it boils down to just caring

00:18:57,030 --> 00:19:05,570
about whether an object can quack by

00:18:59,940 --> 00:19:08,789
trying it if we're gonna check first

00:19:05,570 --> 00:19:11,610
well we're going to check on the method

00:19:08,789 --> 00:19:15,840
and we're not going to check on the type

00:19:11,610 --> 00:19:18,030
of the object or we're just going to try

00:19:15,840 --> 00:19:20,190
it and handle the exception if it fails

00:19:18,030 --> 00:19:23,730
a little more expensive on the failure

00:19:20,190 --> 00:19:25,590
side but you know we're gonna go with

00:19:23,730 --> 00:19:28,320
the common case which we expect to be

00:19:25,590 --> 00:19:31,740
success we're good to go

00:19:28,320 --> 00:19:34,470
however duck typing is not what we have

00:19:31,740 --> 00:19:37,980
there where we're checking to see if an

00:19:34,470 --> 00:19:39,390
object is of the type duck or if it

00:19:37,980 --> 00:19:43,559
implements some duck interface or

00:19:39,390 --> 00:19:48,140
whatever syntax you want to use and this

00:19:43,559 --> 00:19:48,140
Kyle leads us to abstract base classes

00:19:48,590 --> 00:19:55,639
so this is more a type oriented approach

00:19:51,499 --> 00:19:58,090
that some people in the community really

00:19:55,639 --> 00:20:01,070
wanted have wanted for a long time and

00:19:58,090 --> 00:20:03,019
as you saw from the history of it

00:20:01,070 --> 00:20:08,029
there's a lot of debate about how we

00:20:03,019 --> 00:20:10,970
could accomplish it and I really

00:20:08,029 --> 00:20:12,980
appreciate this quote for some time

00:20:10,970 --> 00:20:14,539
Python programmers have wanted simple

00:20:12,980 --> 00:20:18,980
and efficient means to be able to test

00:20:14,539 --> 00:20:21,289
object interfaces well I mean that's

00:20:18,980 --> 00:20:24,110
pretty appropriate yeah right now it's

00:20:21,289 --> 00:20:29,809
still kind of appropriate well this was

00:20:24,110 --> 00:20:33,440
said in 1998 Jim Fulton so he he

00:20:29,809 --> 00:20:36,619
spearheaded the Zopa interface and and

00:20:33,440 --> 00:20:41,929
the work was soap and I mean that's his

00:20:36,619 --> 00:20:46,220
thing right well it's amazing because it

00:20:41,929 --> 00:20:49,249
took the community with a clearly

00:20:46,220 --> 00:20:51,379
recognized need quite a while to come to

00:20:49,249 --> 00:20:57,470
conclusion that abstract base classes

00:20:51,379 --> 00:21:00,379
were the best thing we could do as far

00:20:57,470 --> 00:21:02,809
as using them if you have a if you

00:21:00,379 --> 00:21:04,820
already have an abstract based class

00:21:02,809 --> 00:21:06,740
that you can use we'll talk about how to

00:21:04,820 --> 00:21:07,700
use one but first we're going to talk

00:21:06,740 --> 00:21:12,769
about how you can write your own

00:21:07,700 --> 00:21:17,330
abstract base class probably not talk a

00:21:12,769 --> 00:21:19,330
super long time about why actually you

00:21:17,330 --> 00:21:21,529
would want to use that over duck typing

00:21:19,330 --> 00:21:25,580
that would probably be a meaningful

00:21:21,529 --> 00:21:28,999
discussion too but first let's just talk

00:21:25,580 --> 00:21:34,960
about using them so here we got an

00:21:28,999 --> 00:21:37,549
example pretty straightforward I mean

00:21:34,960 --> 00:21:39,950
all abstract base classes are going to

00:21:37,549 --> 00:21:41,720
rely on this ABC meta as their meta

00:21:39,950 --> 00:21:43,909
class and you really don't gotta

00:21:41,720 --> 00:21:45,619
understand a lot about meta classes in

00:21:43,909 --> 00:21:48,320
order to use abstract base classes all

00:21:45,619 --> 00:21:52,279
you need is a syntax you're just going

00:21:48,320 --> 00:21:54,710
to use that meta class ABC meta and it's

00:21:52,279 --> 00:21:58,820
going to do everything for you except to

00:21:54,710 --> 00:22:01,890
actually make your class abstract and to

00:21:58,820 --> 00:22:05,820
do that we have these decorators

00:22:01,890 --> 00:22:09,860
so ABC Mehta and the decorators are in

00:22:05,820 --> 00:22:12,030
the ABC module in the standard library

00:22:09,860 --> 00:22:13,710
there are a couple others as well but

00:22:12,030 --> 00:22:16,110
these are probably the main ones you

00:22:13,710 --> 00:22:17,730
would use and by doing this we're

00:22:16,110 --> 00:22:23,820
signifying that these are abstract

00:22:17,730 --> 00:22:29,960
methods if a class that has ABC meta as

00:22:23,820 --> 00:22:36,720
the metaclass also has abstract methods

00:22:29,960 --> 00:22:39,990
then that class is abstract and if you

00:22:36,720 --> 00:22:43,799
try and instantiate an abstract based

00:22:39,990 --> 00:22:45,169
class which we just created here well if

00:22:43,799 --> 00:22:48,570
you try and take this one and

00:22:45,169 --> 00:22:51,059
instantiate it we're going to get a type

00:22:48,570 --> 00:22:54,390
error because I mean it's pretty clear

00:22:51,059 --> 00:23:03,360
we haven't implemented those they're

00:22:54,390 --> 00:23:04,770
still I abstract and the problem will

00:23:03,360 --> 00:23:07,049
happen in instantiation time if you

00:23:04,770 --> 00:23:10,020
remember protocols it was when we go to

00:23:07,049 --> 00:23:11,640
use it right well with abstract base

00:23:10,020 --> 00:23:17,309
classes it's all about when we go to

00:23:11,640 --> 00:23:19,770
instantiate our object why I mean why

00:23:17,309 --> 00:23:23,730
couldn't we validate it at when we

00:23:19,770 --> 00:23:26,030
created the class it's because the

00:23:23,730 --> 00:23:28,320
compiler which is compiling your class

00:23:26,030 --> 00:23:30,780
can't tell the difference between an

00:23:28,320 --> 00:23:33,090
abstract based class which you intend to

00:23:30,780 --> 00:23:34,620
be abstract and one that you just

00:23:33,090 --> 00:23:38,220
haven't implemented the stuff you need

00:23:34,620 --> 00:23:40,190
to implement so you can't really tell

00:23:38,220 --> 00:23:42,600
that until you actually go to

00:23:40,190 --> 00:23:44,700
instantiate it and then it's like oh

00:23:42,600 --> 00:23:46,530
well if you're trying to instantiate it

00:23:44,700 --> 00:23:49,679
obviously you meant this to be actually

00:23:46,530 --> 00:23:51,929
usable and therefore you know it still

00:23:49,679 --> 00:23:55,799
has abstract methods so it's abstract

00:23:51,929 --> 00:23:57,480
so type error well let's say you already

00:23:55,799 --> 00:23:59,250
have an abstract base class and the nice

00:23:57,480 --> 00:24:03,960
thing is we get a bunch in the standard

00:23:59,250 --> 00:24:06,929
library if you already have one then you

00:24:03,960 --> 00:24:10,740
can inherit from it or you could

00:24:06,929 --> 00:24:12,809
actually register an existing class as

00:24:10,740 --> 00:24:15,000
an implementation of that and they're

00:24:12,809 --> 00:24:17,160
kind of

00:24:15,000 --> 00:24:20,100
maybe subtle difference between the two

00:24:17,160 --> 00:24:23,490
aspects of it and we'll cover those real

00:24:20,100 --> 00:24:29,390
quick but first of all if we're going to

00:24:23,490 --> 00:24:32,700
inherit from one in the the collections

00:24:29,390 --> 00:24:35,190
package you'll find the ABC module so a

00:24:32,700 --> 00:24:36,930
collection saw ABC and in there you'll

00:24:35,190 --> 00:24:40,920
find a whole bunch of different abstract

00:24:36,930 --> 00:24:43,940
base classes that you can use really

00:24:40,920 --> 00:24:47,340
easy mapping is one of them and so

00:24:43,940 --> 00:24:50,760
mapping is an immutable mapping like a

00:24:47,340 --> 00:24:53,340
frozen dick addictive you will not quite

00:24:50,760 --> 00:24:54,120
but but let's say we wanted to subclass

00:24:53,340 --> 00:24:57,600
it great

00:24:54,120 --> 00:25:03,810
there we go it says it's the subclass

00:24:57,600 --> 00:25:06,150
yes an instance is an instance right

00:25:03,810 --> 00:25:08,610
here the dadada assumes that we actually

00:25:06,150 --> 00:25:13,110
implemented otherwise dude it would give

00:25:08,610 --> 00:25:15,540
us a type error but the instance is an

00:25:13,110 --> 00:25:17,700
instance of mapping great the base

00:25:15,540 --> 00:25:22,740
classes well there's the base class of

00:25:17,700 --> 00:25:25,530
it it's just like normal inheritance but

00:25:22,740 --> 00:25:28,770
one difference here if we check the type

00:25:25,530 --> 00:25:31,380
of the class which is the the meta class

00:25:28,770 --> 00:25:38,960
we're going to see as ABC meta instead

00:25:31,380 --> 00:25:41,400
of the normal type so like I said in

00:25:38,960 --> 00:25:43,650
collections the ABC a whole bunch of

00:25:41,400 --> 00:25:49,140
different abstract base classes that we

00:25:43,650 --> 00:25:52,410
can use some of them they don't all they

00:25:49,140 --> 00:25:54,720
do is specify what the protocol is for a

00:25:52,410 --> 00:25:57,870
few of the others they actually give you

00:25:54,720 --> 00:25:59,970
mix-ins so you implement a few of the

00:25:57,870 --> 00:26:01,790
methods and you get for free a whole

00:25:59,970 --> 00:26:06,810
bunch of other methods which is nice for

00:26:01,790 --> 00:26:10,200
instance for mapping we'll say we wanted

00:26:06,810 --> 00:26:13,260
to have a read-only view of an object so

00:26:10,200 --> 00:26:17,340
all we have to do is define get item the

00:26:13,260 --> 00:26:20,790
dunder link and under a cherry implement

00:26:17,340 --> 00:26:23,970
those and mapping is completely

00:26:20,790 --> 00:26:27,900
implemented and we get for free a few

00:26:23,970 --> 00:26:32,040
things well let's make this point first

00:26:27,900 --> 00:26:36,000
we'll see that dict is a subclass of

00:26:32,040 --> 00:26:44,770
mapping according to his subclass

00:26:36,000 --> 00:26:46,390
although that's only sort of true but

00:26:44,770 --> 00:26:47,800
that matters because then we can treat

00:26:46,390 --> 00:26:52,510
our mapping classes just like we would

00:26:47,800 --> 00:26:55,290
treat dicts for the most part so what we

00:26:52,510 --> 00:26:57,940
get for the mapping abstract base class

00:26:55,290 --> 00:26:59,620
on the one side those abstract methods

00:26:57,940 --> 00:27:01,780
we had to implement but for free we get

00:26:59,620 --> 00:27:05,380
these mixings you know we get to get

00:27:01,780 --> 00:27:08,440
just like you would have in a dict the

00:27:05,380 --> 00:27:10,420
Equality really nice I mean the the keys

00:27:08,440 --> 00:27:12,960
you you get all the normal stuff you get

00:27:10,420 --> 00:27:15,670
out of the dict

00:27:12,960 --> 00:27:18,640
and we've implemented them here so we're

00:27:15,670 --> 00:27:22,540
good to go so we can try it out we pass

00:27:18,640 --> 00:27:25,540
it in just a normal dict and lo and

00:27:22,540 --> 00:27:27,640
behold we can check that sorted you know

00:27:25,540 --> 00:27:31,810
we can trying and call get on it which

00:27:27,640 --> 00:27:35,440
was one of the mix-ins we got keys you

00:27:31,810 --> 00:27:39,100
know and normally that but now we're

00:27:35,440 --> 00:27:41,170
gonna subclass our class that

00:27:39,100 --> 00:27:43,920
implemented this abstract base class and

00:27:41,170 --> 00:27:47,410
it works like you'd expect it to great

00:27:43,920 --> 00:27:55,540
no complications and it's cheese shop is

00:27:47,410 --> 00:28:00,780
still just a an implementation of the

00:27:55,540 --> 00:28:05,050
abstract base class mapping all right

00:28:00,780 --> 00:28:07,330
I'll see here so we've got I you know

00:28:05,050 --> 00:28:14,050
you run into problems if you forget

00:28:07,330 --> 00:28:19,300
stuff and we're gonna wrap things up

00:28:14,050 --> 00:28:21,180
right now I'll see you got some great

00:28:19,300 --> 00:28:28,150
things about how it all works

00:28:21,180 --> 00:28:32,460
register magic and you can go in there

00:28:28,150 --> 00:28:32,460
and and learn about it all for yourself

00:28:33,060 --> 00:28:37,570
there's plenty to talk about as you can

00:28:36,070 --> 00:28:40,730
see we're going to just skip through all

00:28:37,570 --> 00:28:48,080
of this stuff some Guido said

00:28:40,730 --> 00:28:48,950
it's really funny I promise you and you

00:28:48,080 --> 00:28:51,560
know there are all sorts of

00:28:48,950 --> 00:28:57,050
controversies I won't gloss over it even

00:28:51,560 --> 00:28:58,700
though I am the but you you can if you

00:28:57,050 --> 00:29:01,910
want you can go back and read about all

00:28:58,700 --> 00:29:03,920
the different opinions about abstract

00:29:01,910 --> 00:29:05,650
base classes but we ended up getting

00:29:03,920 --> 00:29:07,640
something that we didn't have before

00:29:05,650 --> 00:29:09,440
that's one of the great things about it

00:29:07,640 --> 00:29:13,720
is it gives us a way to programmatically

00:29:09,440 --> 00:29:13,720
reason about the protocols that we have

00:29:13,990 --> 00:29:19,460
some of the different things right here

00:29:18,140 --> 00:29:21,890
that you can look at different

00:29:19,460 --> 00:29:24,110
approaches beyond abstract base classes

00:29:21,890 --> 00:29:27,620
for the most part pretty compatible

00:29:24,110 --> 00:29:30,800
though and if you want to you could

00:29:27,620 --> 00:29:32,750
actually these are good examples of how

00:29:30,800 --> 00:29:38,240
to do your own abstract base classes or

00:29:32,750 --> 00:29:47,210
your own interfaces alright and here we

00:29:38,240 --> 00:29:50,270
are and I hope you guys are as excited

00:29:47,210 --> 00:29:54,220
about as I am about the opportunities we

00:29:50,270 --> 00:29:54,220
have for interfaces in Python

00:30:00,320 --> 00:30:05,929
we have time for questions okay thanks

00:30:03,419 --> 00:30:05,929

YouTube URL: https://www.youtube.com/watch?v=4-TwdBuTR1A


