Title: The Art of Subclassing
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Raymond Hettinger
All problems have simple, easy-to-understand, logical wrong answers. Subclassing in Python is no exception. Avoid the common pitfalls and learn everything you need to know about making effective use of inheritance in Python.
Captions: 
	00:00:00,030 --> 00:00:03,780
would like to introduce wingman

00:00:01,350 --> 00:00:05,520
Hettinger the eater tools guy will be

00:00:03,780 --> 00:00:10,189
talking to us about the art of sub

00:00:05,520 --> 00:00:10,189
classing hello everybody

00:00:13,730 --> 00:00:17,760
I'd like to show off some code I've been

00:00:16,049 --> 00:00:20,930
working on for nine months just put into

00:00:17,760 --> 00:00:20,930
production twenty four days ago

00:00:21,230 --> 00:00:26,420
this is Matthew in my lovely wife Rachel

00:00:27,439 --> 00:00:32,300
and this is his first appearance at a

00:00:30,630 --> 00:00:35,480
pie cot

00:00:32,300 --> 00:00:38,340
all right so let's begin with the art of

00:00:35,480 --> 00:00:39,629
subclassing which is going to be an

00:00:38,340 --> 00:00:41,550
interesting talk to give because I'm

00:00:39,629 --> 00:00:43,860
followed by Jack T Drake who will tell

00:00:41,550 --> 00:00:45,870
you to stop writing classes at all so

00:00:43,860 --> 00:00:48,030
it's got interesting progress this

00:00:45,870 --> 00:00:50,910
morning metaclasses to sub classing to

00:00:48,030 --> 00:00:52,469
no classes at all and I just don't know

00:00:50,910 --> 00:00:55,500
where that trend will continue to it'll

00:00:52,469 --> 00:00:59,609
converge on a single singularity so

00:00:55,500 --> 00:01:01,199
where we're headed today is almost

00:00:59,609 --> 00:01:02,850
everybody in this room own certainly is

00:01:01,199 --> 00:01:05,040
written classes before has an idea of

00:01:02,850 --> 00:01:06,450
what subclasses are and so I'm going to

00:01:05,040 --> 00:01:09,020
ask you to humor me through the first

00:01:06,450 --> 00:01:11,159
part we go back to the very basics and

00:01:09,020 --> 00:01:13,080
show you things that you learned a long

00:01:11,159 --> 00:01:14,640
time ago but with the idea of picking it

00:01:13,080 --> 00:01:17,520
apart and see if we can rebuild our

00:01:14,640 --> 00:01:19,170
notion of what a subclass is I know

00:01:17,520 --> 00:01:21,000
everybody in here has written subclasses

00:01:19,170 --> 00:01:22,650
before and has seen a few patterns and

00:01:21,000 --> 00:01:24,450
will definitely give you more of those

00:01:22,650 --> 00:01:26,250
and show you some pythonic ways to do it

00:01:24,450 --> 00:01:28,110
but one of my goals today is to

00:01:26,250 --> 00:01:29,400
reformulate your ID on your mind to

00:01:28,110 --> 00:01:30,509
expand your mind a little bit to cause

00:01:29,400 --> 00:01:31,259
you to think about it in a slightly

00:01:30,509 --> 00:01:33,090
different way

00:01:31,259 --> 00:01:34,770
almost certainly everything you've

00:01:33,090 --> 00:01:36,509
already been taught is true

00:01:34,770 --> 00:01:38,579
almost certainly everything that you've

00:01:36,509 --> 00:01:40,110
already been taught handcuffs you and

00:01:38,579 --> 00:01:42,780
cause you to think more limited thoughts

00:01:40,110 --> 00:01:45,450
so my goal is to free your mind neo and

00:01:42,780 --> 00:01:47,490
hopefully you'll swallow the red pill so

00:01:45,450 --> 00:01:50,399
we'll we'll revisit the notion about a

00:01:47,490 --> 00:01:52,170
class in subclasses I will talk about

00:01:50,399 --> 00:01:55,079
some of the use cases and design

00:01:52,170 --> 00:01:57,329
patterns one of my favorite topics super

00:01:55,079 --> 00:01:59,700
will only be able to touch on for a few

00:01:57,329 --> 00:02:02,340
minutes I have this belief that Python

00:01:59,700 --> 00:02:04,740
super has a superpower that other

00:02:02,340 --> 00:02:08,629
languages don't have and it's very

00:02:04,740 --> 00:02:10,470
different from other languages and then

00:02:08,629 --> 00:02:12,510
sometimes when I say something that

00:02:10,470 --> 00:02:13,440
sounds incredulous and just unbelievable

00:02:12,510 --> 00:02:15,300
no one wouldn't

00:02:13,440 --> 00:02:16,590
right mind would ever do that so I try

00:02:15,300 --> 00:02:18,720
to give examples from the standard

00:02:16,590 --> 00:02:20,040
library and people say this code is evil

00:02:18,720 --> 00:02:22,080
so the person who wrote this should be

00:02:20,040 --> 00:02:25,620
shot and then will a bring cuido in you

00:02:22,080 --> 00:02:27,930
guys can shoot him and so I tried to use

00:02:25,620 --> 00:02:29,250
some authoritative references and when I

00:02:27,930 --> 00:02:31,230
talk about these things I don't like to

00:02:29,250 --> 00:02:32,640
use ABC diagrams I like to get into

00:02:31,230 --> 00:02:36,420
something's concrete you get it guys

00:02:32,640 --> 00:02:38,100
ready to rock and roll you willing to

00:02:36,420 --> 00:02:40,440
swallow the red pill and give up your

00:02:38,100 --> 00:02:45,000
long clung to notions of this is how you

00:02:40,440 --> 00:02:48,000
have to do subclassing in Java okay all

00:02:45,000 --> 00:02:50,460
right this is a profound example of

00:02:48,000 --> 00:02:51,810
cut.we I my apologies for giving you

00:02:50,460 --> 00:02:54,210
this piece of code this is a class

00:02:51,810 --> 00:02:56,730
animal it has a docstring generic animal

00:02:54,210 --> 00:02:59,340
class has an initializer and it has a

00:02:56,730 --> 00:03:03,540
method called walk walk uses new style

00:02:59,340 --> 00:03:05,850
formatting are you impressed okay but

00:03:03,540 --> 00:03:09,720
we're not here to talk about animal can

00:03:05,850 --> 00:03:11,130
you hear okay does that mean I need to

00:03:09,720 --> 00:03:14,060
talk louder or somebody needs to change

00:03:11,130 --> 00:03:16,140
a volume knob can you hear me now

00:03:14,060 --> 00:03:21,330
whoo I've got a little reverb this

00:03:16,140 --> 00:03:24,600
awesome okay so I specialized the animal

00:03:21,330 --> 00:03:26,250
class with dog and I extend it adding a

00:03:24,600 --> 00:03:30,239
method are you guys very impressed with

00:03:26,250 --> 00:03:32,190
my code all right who learned something

00:03:30,239 --> 00:03:34,080
new I hope not

00:03:32,190 --> 00:03:35,910
my goal is to show you what you've

00:03:34,080 --> 00:03:36,690
already learned and then we'll go

00:03:35,910 --> 00:03:38,450
unlearn it

00:03:36,690 --> 00:03:40,980
and we'll also learn all the terminology

00:03:38,450 --> 00:03:44,430
associated with it the terminology is

00:03:40,980 --> 00:03:46,170
adding dog adds the bark med method to

00:03:44,430 --> 00:03:48,930
animal which didn't have a bark method

00:03:46,170 --> 00:03:51,900
it's a new capability overriding means

00:03:48,930 --> 00:03:54,450
that I can replace an existing method in

00:03:51,900 --> 00:03:57,660
the subclass so a snake subclass four

00:03:54,450 --> 00:03:59,269
places walk with a walk method that

00:03:57,660 --> 00:04:02,730
knows how to slither instead of walk

00:03:59,269 --> 00:04:04,650
extending is taking the existing walk

00:04:02,730 --> 00:04:06,900
method taking advantage of the walk

00:04:04,650 --> 00:04:08,850
that's already there but then adding on

00:04:06,900 --> 00:04:11,730
an additional capability so we use the

00:04:08,850 --> 00:04:13,560
inherited capability of walking plus we

00:04:11,730 --> 00:04:15,390
add some behavior so that a cat walks

00:04:13,560 --> 00:04:17,430
and swishes its tail at the same time

00:04:15,390 --> 00:04:20,250
you guys love these uh profound animal

00:04:17,430 --> 00:04:22,200
examples all right good I appreciate the

00:04:20,250 --> 00:04:24,390
humoring me part we will ramp it up a

00:04:22,200 --> 00:04:25,660
notch ah so let's talk about some of the

00:04:24,390 --> 00:04:28,900
patterns of a sub

00:04:25,660 --> 00:04:31,390
classing for a moment the framework

00:04:28,900 --> 00:04:33,370
pattern of this is an official name for

00:04:31,390 --> 00:04:35,920
it it's in the design patterns book by

00:04:33,370 --> 00:04:38,170
the Gang of Four and the idea is all the

00:04:35,920 --> 00:04:41,620
control logic is up at the top and the

00:04:38,170 --> 00:04:45,000
parent class and then the subclass comes

00:04:41,620 --> 00:04:48,280
along and adds or overrides a handful of

00:04:45,000 --> 00:04:50,560
specific methods in order to make the

00:04:48,280 --> 00:04:51,490
class more concrete or customize it to a

00:04:50,560 --> 00:04:54,220
particular use

00:04:51,490 --> 00:04:56,290
so in our HTTP server all the logic for

00:04:54,220 --> 00:04:58,690
doing the server is in the simple HTTP

00:04:56,290 --> 00:05:02,650
server class how many of you used this

00:04:58,690 --> 00:05:03,820
simple HTTP server class okay how many

00:05:02,650 --> 00:05:07,150
of you aren't ready to move on to more

00:05:03,820 --> 00:05:08,590
modern tools okay okay but for our

00:05:07,150 --> 00:05:11,010
purposes here it's not whether this is a

00:05:08,590 --> 00:05:13,420
great class or not it's a it's a classic

00:05:11,010 --> 00:05:14,830
what's interesting is how you use it

00:05:13,420 --> 00:05:17,290
you don't instantiate this class

00:05:14,830 --> 00:05:19,210
directly you subclass it and then the

00:05:17,290 --> 00:05:21,550
methods that are provided inside do get

00:05:19,210 --> 00:05:22,930
and do head the methods that are called

00:05:21,550 --> 00:05:27,010
when you get a head request or a get

00:05:22,930 --> 00:05:28,930
request the parent calls them all those

00:05:27,010 --> 00:05:30,460
methods and they are stubs and the

00:05:28,930 --> 00:05:34,150
definition of them in the standard

00:05:30,460 --> 00:05:36,010
library is do get is pass and do head is

00:05:34,150 --> 00:05:37,360
pass so if you'd like to your server to

00:05:36,010 --> 00:05:39,040
actually do anything with the request

00:05:37,360 --> 00:05:41,770
you subclass it and define these two

00:05:39,040 --> 00:05:43,090
this is a classic framework pattern I'd

00:05:41,770 --> 00:05:44,919
ask who's learn something new but

00:05:43,090 --> 00:05:47,260
everybody in here has used this class it

00:05:44,919 --> 00:05:49,960
sounds like and so that is the framework

00:05:47,260 --> 00:05:53,350
pattern for sub-classing it's an old

00:05:49,960 --> 00:05:55,410
classic it's also very static what are

00:05:53,350 --> 00:05:57,760
our choices for methods to override

00:05:55,410 --> 00:06:00,310
they've been defined in advance you can

00:05:57,760 --> 00:06:02,830
do do get do head do put and do post

00:06:00,310 --> 00:06:05,230
there there's no way to add other

00:06:02,830 --> 00:06:07,270
methods to this capability because the

00:06:05,230 --> 00:06:09,490
framework drives everything and it tells

00:06:07,270 --> 00:06:11,380
you in advance here the handful of

00:06:09,490 --> 00:06:14,020
methods you can subclass it's not a very

00:06:11,380 --> 00:06:17,200
flexible pattern dynamic dispatch is

00:06:14,020 --> 00:06:20,590
much more flexible who's ever used cm DP

00:06:17,200 --> 00:06:23,650
why okay not enough of you all of you

00:06:20,590 --> 00:06:25,480
should put it into your toolkit so how

00:06:23,650 --> 00:06:27,669
do we spend our days we write these uh

00:06:25,480 --> 00:06:30,040
big bags full of functions we write

00:06:27,669 --> 00:06:31,990
modules and packages and we write

00:06:30,040 --> 00:06:34,479
hundreds of functions and how do they

00:06:31,990 --> 00:06:37,240
get used someone fires up Python they

00:06:34,479 --> 00:06:38,689
import your package and they start

00:06:37,240 --> 00:06:40,549
calling it because they know the

00:06:38,689 --> 00:06:42,439
Python syntax wouldn't it be nice to

00:06:40,549 --> 00:06:45,529
make it is usable by someone who is not

00:06:42,439 --> 00:06:47,029
a Python expert CMD makes it very easy

00:06:45,529 --> 00:06:49,249
to take all that work that you did all

00:06:47,029 --> 00:06:52,610
for a week and in one minute

00:06:49,249 --> 00:06:54,919
you can have a front-end for it that is

00:06:52,610 --> 00:06:56,809
a command shell and then within a half

00:06:54,919 --> 00:06:58,639
an hour afterwards you can expose all of

00:06:56,809 --> 00:07:00,019
your commands with a nice help function

00:06:58,639 --> 00:07:01,699
the ability to scroll back to old

00:07:00,019 --> 00:07:04,669
commands for somebody who doesn't know a

00:07:01,699 --> 00:07:06,769
Python syntax so they put an example of

00:07:04,669 --> 00:07:08,569
that in the Python 3 Docs and even if

00:07:06,769 --> 00:07:09,739
you're not a Python 3 user it's

00:07:08,569 --> 00:07:11,599
worthwhile to go check out the

00:07:09,739 --> 00:07:13,789
documentation for it because I put in a

00:07:11,599 --> 00:07:15,979
front end for the turtle module starting

00:07:13,789 --> 00:07:18,919
modules wonderful it's great way to

00:07:15,979 --> 00:07:20,269
introduce kids to programming the

00:07:18,919 --> 00:07:22,099
problem is they have to immediately

00:07:20,269 --> 00:07:23,749
learn Python syntax they have to learn

00:07:22,099 --> 00:07:26,119
how we do our for loops and while loops

00:07:23,749 --> 00:07:27,619
and deaths and whatnot so I put a front

00:07:26,119 --> 00:07:30,099
end on it in the front end took about

00:07:27,619 --> 00:07:33,349
half an hour to 45 minutes to build I

00:07:30,099 --> 00:07:36,559
subclass from command up py and then

00:07:33,349 --> 00:07:38,179
anytime the kid types forward it will

00:07:36,559 --> 00:07:40,809
call the do forward command and set up

00:07:38,179 --> 00:07:43,819
the the argument pattern appropriately

00:07:40,809 --> 00:07:46,969
how does that work the way it works is

00:07:43,819 --> 00:07:48,709
inside of the CMD py file this is an

00:07:46,969 --> 00:07:50,269
excerpt from that file you guys are

00:07:48,709 --> 00:07:52,639
reading the source code for a standard

00:07:50,269 --> 00:07:54,619
library right I contend that the best

00:07:52,639 --> 00:07:56,989
way to become a better Python programmer

00:07:54,619 --> 00:07:58,849
is to spend some time reading the source

00:07:56,989 --> 00:08:00,409
code by written by great Python

00:07:58,849 --> 00:08:02,119
programmer so I don't know who wrote

00:08:00,409 --> 00:08:03,889
this one but it's a quality piece of

00:08:02,119 --> 00:08:05,689
programming there's lots of good pieces

00:08:03,889 --> 00:08:08,029
of programming in the standard library

00:08:05,689 --> 00:08:09,829
and reading some snippets of code will

00:08:08,029 --> 00:08:12,289
make you a better programmer so this

00:08:09,829 --> 00:08:14,809
snippet says if a user types in a

00:08:12,289 --> 00:08:17,599
command like forward which comes in as a

00:08:14,809 --> 00:08:19,249
string and it's pre parsed so the

00:08:17,599 --> 00:08:21,439
argument is separated out so they put

00:08:19,249 --> 00:08:23,119
forward space ten forward will come in

00:08:21,439 --> 00:08:25,129
as command and ten will come in as an

00:08:23,119 --> 00:08:28,009
argument what this will do is a get a

00:08:25,129 --> 00:08:29,869
Doron self it will look up into the

00:08:28,009 --> 00:08:32,059
current class for a method called do

00:08:29,869 --> 00:08:35,479
underscore forward meaning the way you

00:08:32,059 --> 00:08:37,639
use this in a subclass is you make a

00:08:35,479 --> 00:08:40,339
subclass of CMD but py and you add a

00:08:37,639 --> 00:08:43,370
method do underscore pin-down now

00:08:40,339 --> 00:08:45,980
whenever the user types pinned down the

00:08:43,370 --> 00:08:47,720
get outer will figure out that the

00:08:45,980 --> 00:08:49,579
method should be called do pin down look

00:08:47,720 --> 00:08:51,649
down find this method and call it for

00:08:49,579 --> 00:08:52,130
you and so this is a pattern of sub

00:08:51,649 --> 00:08:53,840
classing

00:08:52,130 --> 00:08:56,420
a lot more flexible than the traditional

00:08:53,840 --> 00:08:58,100
flame framework pattern and it nails the

00:08:56,420 --> 00:08:59,780
subclass er to have a great deal of

00:08:58,100 --> 00:09:01,880
control to add one command after another

00:08:59,780 --> 00:09:03,800
without changing the apparent class I

00:09:01,880 --> 00:09:05,600
think it's a lot better way to go I

00:09:03,800 --> 00:09:08,230
almost never use the framework pattern

00:09:05,600 --> 00:09:11,150
anymore I always use a dynamic dispatch

00:09:08,230 --> 00:09:16,220
one of the themes of this presentation

00:09:11,150 --> 00:09:17,390
will be as the writer of a class what a

00:09:16,220 --> 00:09:19,430
lot of people do is once they get the

00:09:17,390 --> 00:09:21,890
class working tested and documented you

00:09:19,430 --> 00:09:24,320
quit because you think you're done but

00:09:21,890 --> 00:09:26,390
the next step after that is to polish it

00:09:24,320 --> 00:09:28,010
and think about subclasses and try and

00:09:26,390 --> 00:09:29,990
make life easier for the people who come

00:09:28,010 --> 00:09:31,760
after you and that person might be

00:09:29,990 --> 00:09:33,230
yourself and what I'm going to show you

00:09:31,760 --> 00:09:35,840
the principles of making your subclasses

00:09:33,230 --> 00:09:37,490
easy to use and one of them is dynamic

00:09:35,840 --> 00:09:39,950
dispatch making to where a subclass or

00:09:37,490 --> 00:09:41,930
can add a method of do underscore pin

00:09:39,950 --> 00:09:43,100
down and they don't have to go change

00:09:41,930 --> 00:09:44,900
the dispatch logic

00:09:43,100 --> 00:09:47,890
fair enough who learned something new

00:09:44,900 --> 00:09:51,170
all right a couple people more is coming

00:09:47,890 --> 00:09:53,090
all right the the call patterns for a

00:09:51,170 --> 00:09:55,900
sub classing I've got a circle class

00:09:53,090 --> 00:09:58,850
here with a defines a radius has a

00:09:55,900 --> 00:10:01,460
method that computes its area in a nice

00:09:58,850 --> 00:10:05,450
wrapper the part we're interested in is

00:10:01,460 --> 00:10:07,580
the sub class the sub class calls the

00:10:05,450 --> 00:10:10,160
parent classes in it by referring to it

00:10:07,580 --> 00:10:12,140
directly using the name circle that is a

00:10:10,160 --> 00:10:14,270
kind of an old style we can also use

00:10:12,140 --> 00:10:15,950
super to do the same thing and we'll

00:10:14,270 --> 00:10:18,740
talk about super a little bit later so

00:10:15,950 --> 00:10:20,660
this is an extending of the knit method

00:10:18,740 --> 00:10:22,940
because we use the parents init method

00:10:20,660 --> 00:10:24,740
but we add on some of extra capabilities

00:10:22,940 --> 00:10:26,960
we say let the parent do the parent

00:10:24,740 --> 00:10:29,150
thing but then add the new donut

00:10:26,960 --> 00:10:32,270
capability of storing the inner radius

00:10:29,150 --> 00:10:34,850
with a donut in this case we override

00:10:32,270 --> 00:10:36,470
area rather than they extend it and when

00:10:34,850 --> 00:10:38,900
we override area this completely

00:10:36,470 --> 00:10:40,610
replaces the area up above and says now

00:10:38,900 --> 00:10:42,470
let's take our outer and inner radius to

00:10:40,610 --> 00:10:45,010
compute the two areas and take the

00:10:42,470 --> 00:10:48,230
difference of them

00:10:45,010 --> 00:10:50,900
so the we're demonstrating in here one

00:10:48,230 --> 00:10:52,370
is a extending to overriding but what's

00:10:50,900 --> 00:10:55,880
interesting is a call pattern when I

00:10:52,370 --> 00:10:59,210
instantiate donut and I go to print it

00:10:55,880 --> 00:11:00,890
and get a rep rinona t' the search

00:10:59,210 --> 00:11:02,990
pattern is it starts from the bottom the

00:11:00,890 --> 00:11:04,400
instance of donut it looks first in the

00:11:02,990 --> 00:11:05,370
donut class and says does it have a

00:11:04,400 --> 00:11:08,190
repper yeah

00:11:05,370 --> 00:11:11,100
not it goes up to the circle class and

00:11:08,190 --> 00:11:13,110
since does it have a rubber go up to the

00:11:11,100 --> 00:11:15,650
pair so Rhett its rapper starts to run

00:11:13,110 --> 00:11:19,020
so circles Reppert

00:11:15,650 --> 00:11:20,580
then it says it has an area this is an

00:11:19,020 --> 00:11:22,740
interesting pattern that is frequently

00:11:20,580 --> 00:11:24,990
used in Python rather than hardwiring

00:11:22,740 --> 00:11:26,940
the name circle has an area of so and so

00:11:24,990 --> 00:11:28,680
I've made life easier on the subclass or

00:11:26,940 --> 00:11:30,750
by not referencing my class name

00:11:28,680 --> 00:11:32,550
specifically so I didn't hardwired our

00:11:30,750 --> 00:11:33,720
circle here so this is a very common

00:11:32,550 --> 00:11:36,480
pattern you'll see it used throughout

00:11:33,720 --> 00:11:39,450
the standard library we say take self

00:11:36,480 --> 00:11:41,700
whatever the instance is ask what class

00:11:39,450 --> 00:11:44,760
it is you're like when you're just

00:11:41,700 --> 00:11:46,140
writing circle a person who wrote circle

00:11:44,760 --> 00:11:48,060
and wasn't thinking about donut would be

00:11:46,140 --> 00:11:48,960
very tempted to hardwire the name here

00:11:48,060 --> 00:11:51,029
because they weren't thinking about

00:11:48,960 --> 00:11:52,230
subclasses what I'm trying to do is get

00:11:51,029 --> 00:11:54,690
you the point where you think about your

00:11:52,230 --> 00:11:56,580
subclass was saying you know itself we

00:11:54,690 --> 00:11:59,910
need to stop thinking of self as being

00:11:56,580 --> 00:12:02,460
you self whoever wrote a circle was

00:11:59,910 --> 00:12:04,290
thinking of self as a circle but self

00:12:02,460 --> 00:12:06,240
could be one of your children too so

00:12:04,290 --> 00:12:08,250
self is actually an instance of donut

00:12:06,240 --> 00:12:09,839
and not an instance of circle and this

00:12:08,250 --> 00:12:11,940
theme will come back to us over and over

00:12:09,839 --> 00:12:13,589
again we need to get back to really

00:12:11,940 --> 00:12:16,230
break our mind free of thinking that

00:12:13,589 --> 00:12:19,440
self has any relationship to circle it

00:12:16,230 --> 00:12:21,150
is one of your ancestors our descendants

00:12:19,440 --> 00:12:23,520
so that's an instance of donut so that

00:12:21,150 --> 00:12:25,500
gets the donut name drops it in then it

00:12:23,520 --> 00:12:28,110
computes self area now this one's

00:12:25,500 --> 00:12:30,540
interesting self dot area is that the

00:12:28,110 --> 00:12:32,250
circle area a writer of this class might

00:12:30,540 --> 00:12:35,279
have expected that self diarrhea would

00:12:32,250 --> 00:12:37,350
call this area but it doesn't it starts

00:12:35,279 --> 00:12:38,850
with self at the bottom were and self as

00:12:37,350 --> 00:12:41,279
an instance of donut it works its way

00:12:38,850 --> 00:12:42,570
back up and finds this area so we find

00:12:41,279 --> 00:12:44,670
this balancing pattern it goes like this

00:12:42,570 --> 00:12:47,160
we got a donut donut needs a rapper

00:12:44,670 --> 00:12:50,220
goes up to donut does it find it goes up

00:12:47,160 --> 00:12:52,410
to circle finds it circle set starts

00:12:50,220 --> 00:12:55,260
back with self asked self its class in

00:12:52,410 --> 00:12:57,000
its name and then it goes to self that

00:12:55,260 --> 00:12:58,770
area at the bottom working its way back

00:12:57,000 --> 00:13:01,110
up and so you get this bouncing up and

00:12:58,770 --> 00:13:02,760
down so the patterns of sub classing are

00:13:01,110 --> 00:13:04,110
always at any point where you refer to

00:13:02,760 --> 00:13:05,820
self you go all the way to the bottom

00:13:04,110 --> 00:13:08,130
and start working your way back up again

00:13:05,820 --> 00:13:10,170
leading to some interesting things like

00:13:08,130 --> 00:13:12,120
the person writing this code very much

00:13:10,170 --> 00:13:15,690
expected that self dot area was this

00:13:12,120 --> 00:13:16,920
area instead of this area but this class

00:13:15,690 --> 00:13:18,499
was designed in a way that was very

00:13:16,920 --> 00:13:21,259
flexible and made it easy

00:13:18,499 --> 00:13:22,699
to subclass so at this point I have a

00:13:21,259 --> 00:13:24,379
whole lot of teaching principles other

00:13:22,699 --> 00:13:26,119
than say this is a very common pattern

00:13:24,379 --> 00:13:28,819
you should get in the habit of using

00:13:26,119 --> 00:13:31,909
this and we're trying to free your mind

00:13:28,819 --> 00:13:33,649
by say don't think of self as a instance

00:13:31,909 --> 00:13:35,899
of the class that you're writing this is

00:13:33,649 --> 00:13:38,299
a particular importance when we start

00:13:35,899 --> 00:13:39,979
talking about super and I will cut to

00:13:38,299 --> 00:13:41,749
the chase real quick our reach into the

00:13:39,979 --> 00:13:44,149
future and talk for a moment about super

00:13:41,749 --> 00:13:46,489
the number one misunderstanding of super

00:13:44,149 --> 00:13:48,679
is in every other language when you call

00:13:46,489 --> 00:13:49,459
super it means I'm calling one or more

00:13:48,679 --> 00:13:54,789
of my parents

00:13:49,459 --> 00:13:57,049
even my father ray our mother of Galle

00:13:54,789 --> 00:13:59,089
that's how it works in other languages

00:13:57,049 --> 00:14:00,709
what does it do in Python the hint is

00:13:59,089 --> 00:14:02,839
what is uh what's happening here with

00:14:00,709 --> 00:14:05,719
self that class name it starts at the

00:14:02,839 --> 00:14:08,659
bottom self might not be you so I have a

00:14:05,719 --> 00:14:10,069
method how that where I call super who's

00:14:08,659 --> 00:14:10,489
going to get called my father and my

00:14:10,069 --> 00:14:13,249
mother

00:14:10,489 --> 00:14:15,769
he turns out possibly someone unrelated

00:14:13,249 --> 00:14:19,219
to me because I have a descendant

00:14:15,769 --> 00:14:21,139
Matthew and so Matthew my descendant

00:14:19,219 --> 00:14:24,319
might have been the one to call me and

00:14:21,139 --> 00:14:26,149
when I call super it is not my ancestry

00:14:24,319 --> 00:14:28,729
tree that matters it's his ancestry uh

00:14:26,149 --> 00:14:30,949
tree and when I was created my dad

00:14:28,729 --> 00:14:33,949
didn't know about Dennis our Sharon or

00:14:30,949 --> 00:14:36,259
Rachel but Matthew knows about them so

00:14:33,949 --> 00:14:38,539
when Matthew calls me and I call my

00:14:36,259 --> 00:14:41,689
super I call someone in his inheritance

00:14:38,539 --> 00:14:43,789
tree not mine so potentially when I call

00:14:41,689 --> 00:14:46,489
super it will not be my father or my

00:14:43,789 --> 00:14:48,019
mother it might be Matthew's mother or

00:14:46,489 --> 00:14:50,239
Matthews one of Matthew's other

00:14:48,019 --> 00:14:52,429
grandparents on the maternal side so

00:14:50,239 --> 00:14:54,799
that makes sense so super doesn't mean

00:14:52,429 --> 00:14:56,899
go up super means go up from your

00:14:54,799 --> 00:14:59,269
children always start at the bottom work

00:14:56,899 --> 00:15:00,709
your way up I'm going to ask you learn

00:14:59,269 --> 00:15:04,189
something new and I'm expecting every

00:15:00,709 --> 00:15:06,259
hand to go up okay super can call

00:15:04,189 --> 00:15:08,809
somebody that is not in your ancestry

00:15:06,259 --> 00:15:11,269
tree it is the subclass ur that is in

00:15:08,809 --> 00:15:12,769
control it is Matthew that controls

00:15:11,269 --> 00:15:17,989
where super is going to go

00:15:12,769 --> 00:15:19,789
it is not raw me or Rachel okay so let's

00:15:17,989 --> 00:15:21,919
retool our thinking about subclasses

00:15:19,789 --> 00:15:24,049
we're going to just go back to the

00:15:21,919 --> 00:15:25,519
basics and at this time we're going to

00:15:24,049 --> 00:15:27,019
break apart the notions of that very

00:15:25,519 --> 00:15:28,429
first class that showed you the animal

00:15:27,019 --> 00:15:30,259
and the dog and say let's think about

00:15:28,429 --> 00:15:31,820
them in a different way I'm going to

00:15:30,259 --> 00:15:34,700
compare and contrast how you were

00:15:31,820 --> 00:15:36,410
totte versus how you should think of

00:15:34,700 --> 00:15:37,880
things in na Python how you were taught

00:15:36,410 --> 00:15:39,770
was not necessarily wrong it was

00:15:37,880 --> 00:15:42,020
applicable to a lot of circumstances and

00:15:39,770 --> 00:15:43,580
in some other languages they will be

00:15:42,020 --> 00:15:45,530
patterns of thought what that will be

00:15:43,580 --> 00:15:48,230
the only successful patterns of thought

00:15:45,530 --> 00:15:50,420
if you are drop a programmer our C++

00:15:48,230 --> 00:15:51,920
programmer there are patterns of thought

00:15:50,420 --> 00:15:53,450
that are useful to you that cause you to

00:15:51,920 --> 00:15:55,460
code correctly in those languages

00:15:53,450 --> 00:15:57,410
if you then bring them over to those

00:15:55,460 --> 00:15:59,240
thoughts over into Python they will

00:15:57,410 --> 00:16:00,920
cause you to think in a way that is very

00:15:59,240 --> 00:16:03,020
constrained we call them bondage and

00:16:00,920 --> 00:16:04,790
discipline languages instead we want to

00:16:03,020 --> 00:16:07,850
free your mind and let you think of them

00:16:04,790 --> 00:16:10,160
in a much more broad way so what does it

00:16:07,850 --> 00:16:13,160
mean to be an object or class the

00:16:10,160 --> 00:16:15,470
classic definition is an object in T

00:16:13,160 --> 00:16:17,210
that encapsulates data together with

00:16:15,470 --> 00:16:18,800
functions called methods for

00:16:17,210 --> 00:16:20,960
manipulating it data so you brought the

00:16:18,800 --> 00:16:22,670
data together with a set of functions

00:16:20,960 --> 00:16:24,830
for manipulating it this is the

00:16:22,670 --> 00:16:28,010
primitive notion of a abstract data

00:16:24,830 --> 00:16:29,600
class how do we implement that in Python

00:16:28,010 --> 00:16:31,490
because it's implemented differently in

00:16:29,600 --> 00:16:33,020
different languages operationally we

00:16:31,490 --> 00:16:34,990
implement it with dictionaries so

00:16:33,020 --> 00:16:38,120
instance dictionaries hold the state

00:16:34,990 --> 00:16:40,610
that's the data and they point to their

00:16:38,120 --> 00:16:43,490
class and so the class dictionaries hold

00:16:40,610 --> 00:16:46,070
the functions so I like to in my

00:16:43,490 --> 00:16:48,590
advanced class show classes always

00:16:46,070 --> 00:16:51,560
demonstrated as a pile of dictionaries

00:16:48,590 --> 00:16:53,390
as opposed to classes and instances and

00:16:51,560 --> 00:16:54,950
the reason is if you start thinking

00:16:53,390 --> 00:16:57,230
about them as dictionaries you start

00:16:54,950 --> 00:16:59,180
thinking in a more flexible all way so

00:16:57,230 --> 00:17:01,010
in this diagram you've got three

00:16:59,180 --> 00:17:02,990
instances of a class in the class

00:17:01,010 --> 00:17:05,180
dictionary what's in it a bunch of

00:17:02,990 --> 00:17:07,160
functions for manipulating the data that

00:17:05,180 --> 00:17:10,130
is in these instances each instance has

00:17:07,160 --> 00:17:12,290
its own data data on the Left functions

00:17:10,130 --> 00:17:13,699
on the right I'm going to ask who learn

00:17:12,290 --> 00:17:16,610
something new and I'm expecting view hit

00:17:13,699 --> 00:17:18,230
very few hands it's necessary for us to

00:17:16,610 --> 00:17:20,089
bridge off of this definition in Terra

00:17:18,230 --> 00:17:21,890
propel us into the future so thank you

00:17:20,089 --> 00:17:24,260
for humoring me by the way notice the

00:17:21,890 --> 00:17:26,360
direction of the arrow here a lot of

00:17:24,260 --> 00:17:27,890
times you'll see class diagrams written

00:17:26,360 --> 00:17:30,170
with the arrows in the other direction

00:17:27,890 --> 00:17:32,450
why does the arrow go this way the

00:17:30,170 --> 00:17:34,700
instance dictionary has a pointer to the

00:17:32,450 --> 00:17:36,740
class dictionary instance Dictionary

00:17:34,700 --> 00:17:38,630
says I have this data and here's a class

00:17:36,740 --> 00:17:40,040
that full of functions I dictionary

00:17:38,630 --> 00:17:41,960
functions that knows how to operate on

00:17:40,040 --> 00:17:43,970
the data the instance points at the

00:17:41,960 --> 00:17:45,640
class not the other way around the

00:17:43,970 --> 00:17:47,320
direction of the arrows is import

00:17:45,640 --> 00:17:50,049
it's a hint to how we should be thinking

00:17:47,320 --> 00:17:52,630
about the classes so if we know what a

00:17:50,049 --> 00:17:54,429
class is what's a subclass it's just

00:17:52,630 --> 00:17:56,799
another class that delegates work to

00:17:54,429 --> 00:17:58,770
another class a subclass in its parent

00:17:56,799 --> 00:18:02,549
are both dictionaries or functions and

00:17:58,770 --> 00:18:05,380
so a PUD subclass points to its parent

00:18:02,549 --> 00:18:07,929
so Matthew points to me

00:18:05,380 --> 00:18:09,580
I point to my father and to my mother so

00:18:07,929 --> 00:18:11,530
we have our three instances which

00:18:09,580 --> 00:18:13,299
contain the data they point to a

00:18:11,530 --> 00:18:14,620
dictionary that contains a bunch of

00:18:13,299 --> 00:18:16,630
functions for manipulating on the data

00:18:14,620 --> 00:18:18,730
and then the subclass dictionary points

00:18:16,630 --> 00:18:20,650
to another dictionary that has functions

00:18:18,730 --> 00:18:22,750
for manipulating out the data note the

00:18:20,650 --> 00:18:26,530
direction of the arrows the children

00:18:22,750 --> 00:18:29,110
point to the parents it's a hint the

00:18:26,530 --> 00:18:30,460
pointer means I do the translation of

00:18:29,110 --> 00:18:32,260
the pointer is not the traditional

00:18:30,460 --> 00:18:34,919
translation that you were given what do

00:18:32,260 --> 00:18:36,760
people tell you it means to a subclass

00:18:34,919 --> 00:18:38,980
when you're first being taught about

00:18:36,760 --> 00:18:42,010
sub-classing you're told to subclass is

00:18:38,980 --> 00:18:43,929
to specialize that's not in this

00:18:42,010 --> 00:18:46,600
definition what is the point or me the

00:18:43,929 --> 00:18:48,880
point pointer means I delegate work this

00:18:46,600 --> 00:18:51,790
is the instance dictionary says I have a

00:18:48,880 --> 00:18:53,590
piece of data I'm pointing to some

00:18:51,790 --> 00:18:55,809
functions that I'm delegating to do some

00:18:53,590 --> 00:18:56,919
work on that data for me the subclasses

00:18:55,809 --> 00:18:58,900
you know what I don't want to do all

00:18:56,919 --> 00:19:00,400
that work it's myself I've got somebody

00:18:58,900 --> 00:19:03,070
else to do the job for me

00:19:00,400 --> 00:19:05,380
this is the subcontractor it's the

00:19:03,070 --> 00:19:08,260
parent is the subcontractor not the

00:19:05,380 --> 00:19:11,440
contractor the instances subclass I want

00:19:08,260 --> 00:19:12,610
you to do all of the work subclasses I'm

00:19:11,440 --> 00:19:14,280
going to look like I'm doing all of the

00:19:12,610 --> 00:19:17,110
work I'm going to farm it out to another

00:19:14,280 --> 00:19:18,880
class and works its way up the point of

00:19:17,110 --> 00:19:21,490
view of the instance all of the work is

00:19:18,880 --> 00:19:25,330
being done by the subclass and not by

00:19:21,490 --> 00:19:27,190
the parent okay so I'm trying to expand

00:19:25,330 --> 00:19:29,290
your mind slowly here by saying the

00:19:27,190 --> 00:19:31,750
direction of the arrows goes up and the

00:19:29,290 --> 00:19:34,000
meaning of the pointer is I'm delegating

00:19:31,750 --> 00:19:36,700
work to somebody else work that I was

00:19:34,000 --> 00:19:38,620
supposed to do okay so what does it mean

00:19:36,700 --> 00:19:40,600
to be a subclass subclassing can just be

00:19:38,620 --> 00:19:42,520
viewed as a technique for code reuse and

00:19:40,600 --> 00:19:44,860
that's starting to get us into a mode

00:19:42,520 --> 00:19:47,290
that is normative that tells us how we

00:19:44,860 --> 00:19:48,700
should be thinking about our problems it

00:19:47,290 --> 00:19:51,400
will be the solution to some of the

00:19:48,700 --> 00:19:52,990
problems coming up how do I think about

00:19:51,400 --> 00:19:55,510
the answer to this problem how to design

00:19:52,990 --> 00:19:56,740
my class this is the hint of what the

00:19:55,510 --> 00:19:58,740
answer to that question is going to be

00:19:56,740 --> 00:20:00,990
the other interesting hint of what

00:19:58,740 --> 00:20:03,630
coming up is who's in charge the person

00:20:00,990 --> 00:20:05,520
with the pointer is in charge my house

00:20:03,630 --> 00:20:08,190
the dead had the car keys he was in

00:20:05,520 --> 00:20:10,980
charge now I have the car keys guess

00:20:08,190 --> 00:20:13,740
who's in charge the person with the

00:20:10,980 --> 00:20:16,140
pointer is the one in charge the

00:20:13,740 --> 00:20:19,290
instance is in charge of who does any

00:20:16,140 --> 00:20:20,850
work at all the subclass is responsible

00:20:19,290 --> 00:20:22,980
for some doing work it can delegate it

00:20:20,850 --> 00:20:25,710
to someone else it has all the power

00:20:22,980 --> 00:20:27,990
which is not the way you were taught the

00:20:25,710 --> 00:20:30,240
subclass decides which work gets

00:20:27,990 --> 00:20:32,610
delegated so let's contrast our two

00:20:30,240 --> 00:20:39,480
views the traditional definitions verse

00:20:32,610 --> 00:20:43,170
set 15 left we may not get to Q&A okay

00:20:39,480 --> 00:20:46,200
so we will contrast the two views of

00:20:43,170 --> 00:20:48,390
subclassing so the operational view is a

00:20:46,200 --> 00:20:50,190
class and operational means the

00:20:48,390 --> 00:20:52,670
implementation it's just a pile of

00:20:50,190 --> 00:20:54,390
classes our dictionary functions how

00:20:52,670 --> 00:20:57,090
subclasses point to other dictionaries

00:20:54,390 --> 00:20:59,340
of functions so they can reuse their

00:20:57,090 --> 00:21:00,929
code and subclasses control what happens

00:20:59,340 --> 00:21:03,030
I'm going to say this should be the

00:21:00,929 --> 00:21:04,920
dominant view the traditional view the

00:21:03,030 --> 00:21:07,020
conceptual view that you were taught the

00:21:04,920 --> 00:21:09,450
bondage and discipline point of view the

00:21:07,020 --> 00:21:11,940
point of view that has changed your mind

00:21:09,450 --> 00:21:13,980
to the matrix is at the bottom parents

00:21:11,940 --> 00:21:15,330
define an interface how many of you were

00:21:13,980 --> 00:21:18,540
taught that the parent class defines an

00:21:15,330 --> 00:21:20,550
interface okay you came from a budgets

00:21:18,540 --> 00:21:22,950
and discipline language subclasses can

00:21:20,550 --> 00:21:25,320
instant that the parents are in charge

00:21:22,950 --> 00:21:27,660
my my house my dad decides when the

00:21:25,320 --> 00:21:29,670
garage gets cleaned he doesn't have a

00:21:27,660 --> 00:21:32,070
garage cleaning capability I extended

00:21:29,670 --> 00:21:33,690
that he calls my garage cleaning

00:21:32,070 --> 00:21:37,140
capability all the time the parents are

00:21:33,690 --> 00:21:38,850
in charge so subclasses can extend the

00:21:37,140 --> 00:21:41,600
interface with a grudge cleaning but the

00:21:38,850 --> 00:21:44,190
parents are in charge all subclasses are

00:21:41,600 --> 00:21:46,200
specialization apparent you were taught

00:21:44,190 --> 00:21:48,630
that and we've given you mini confirming

00:21:46,200 --> 00:21:50,520
examples for example we know the dog is

00:21:48,630 --> 00:21:52,710
and this is an animal that knows how to

00:21:50,520 --> 00:21:54,480
bark it's a specialization of animal a

00:21:52,710 --> 00:21:57,780
counter is an instance of a dictionary

00:21:54,480 --> 00:21:59,970
that knows how to default to 0 a name

00:21:57,780 --> 00:22:02,850
tuple is a tuple that has an extended

00:21:59,970 --> 00:22:04,590
capability of attribute access it's just

00:22:02,850 --> 00:22:06,179
a specialized tuple a counter is a

00:22:04,590 --> 00:22:08,250
specialized dictionary as dog is a

00:22:06,179 --> 00:22:10,919
specialized animal this is how you were

00:22:08,250 --> 00:22:12,030
taught it is not wrong it is a useful

00:22:10,919 --> 00:22:14,250
pile of

00:22:12,030 --> 00:22:16,410
of thinking unfortunately it leaves your

00:22:14,250 --> 00:22:17,910
mind in the matrix to get out of the

00:22:16,410 --> 00:22:19,800
matrix you shift from this point of view

00:22:17,910 --> 00:22:22,020
at the bottom this point of view at the

00:22:19,800 --> 00:22:23,940
top all it is is a pile of dictionaries

00:22:22,020 --> 00:22:27,570
guess who's really in charge it's not

00:22:23,940 --> 00:22:30,060
the parents it's the children what

00:22:27,570 --> 00:22:32,520
things can go into classes any functions

00:22:30,060 --> 00:22:35,070
you want what does it mean to for

00:22:32,520 --> 00:22:36,900
something to subclass from another class

00:22:35,070 --> 00:22:39,600
when I subclass from something I'm

00:22:36,900 --> 00:22:41,160
saying I'm I'm taking work I was

00:22:39,600 --> 00:22:42,600
responsible for and handing it to

00:22:41,160 --> 00:22:46,820
somebody else to do that work

00:22:42,600 --> 00:22:49,110
I've decided who I subcontracted to okay

00:22:46,820 --> 00:22:50,220
so with that little bit of reading the

00:22:49,110 --> 00:22:51,480
mind I'm gonna let that just kind of

00:22:50,220 --> 00:22:53,400
sink in for the moment we'll talk about

00:22:51,480 --> 00:22:54,810
the Liskov substitution principle for a

00:22:53,400 --> 00:22:57,570
moment the idea of Liskov substitution

00:22:54,810 --> 00:22:59,940
principle this is the official statement

00:22:57,570 --> 00:23:02,460
of it at the top of the way Barbara

00:22:59,940 --> 00:23:05,940
Liskov stated it back in what late 70s

00:23:02,460 --> 00:23:07,590
or early 80s the idea is this function

00:23:05,940 --> 00:23:13,830
at the top was written with animals in

00:23:07,590 --> 00:23:15,570
mind animals need to have a name so I'm

00:23:13,830 --> 00:23:16,980
expecting that if this code works with

00:23:15,570 --> 00:23:19,230
animal that it will also work with a

00:23:16,980 --> 00:23:21,000
specialization of animal a dog dog

00:23:19,230 --> 00:23:22,950
should be perfectly substitutable here

00:23:21,000 --> 00:23:25,770
since an animal has a name a dog has to

00:23:22,950 --> 00:23:27,900
have a name to the list call for

00:23:25,770 --> 00:23:29,700
instance substitution principle says you

00:23:27,900 --> 00:23:32,550
have only designed your classes well if

00:23:29,700 --> 00:23:35,130
they if they obey this principle of the

00:23:32,550 --> 00:23:37,740
subclass is substitutable for the parent

00:23:35,130 --> 00:23:39,960
class so now you have a new technical

00:23:37,740 --> 00:23:41,310
term in your hip pocket and you can go

00:23:39,960 --> 00:23:44,010
around telling people you have a list

00:23:41,310 --> 00:23:46,650
golf violation off to the Euro Russian

00:23:44,010 --> 00:23:50,310
front okay so why do we care about

00:23:46,650 --> 00:23:52,320
Liskov it's all about polymorphism and

00:23:50,310 --> 00:23:54,330
substitutability which are fine things

00:23:52,320 --> 00:23:56,190
it allows us to take our subclass and

00:23:54,330 --> 00:23:58,350
stick it and use it anywhere the parent

00:23:56,190 --> 00:23:59,880
class was used I took good advantage of

00:23:58,350 --> 00:24:01,530
this with order dictionaries order

00:23:59,880 --> 00:24:03,540
dictionary subclass from dict

00:24:01,530 --> 00:24:04,830
they didn't have to sub plaque from swim

00:24:03,540 --> 00:24:07,140
dict I could have made them standalone

00:24:04,830 --> 00:24:09,750
why did I subclass from dict I did it so

00:24:07,140 --> 00:24:11,610
that they were immediately usable in the

00:24:09,750 --> 00:24:13,230
huge amount of Python code that's been

00:24:11,610 --> 00:24:15,420
written pretty much anything that

00:24:13,230 --> 00:24:17,670
expected a regular dictionary you can

00:24:15,420 --> 00:24:20,250
stick an order dictionary and instead

00:24:17,670 --> 00:24:22,080
which was fantastic I immediately had a

00:24:20,250 --> 00:24:24,240
giant set of clients already pre-written

00:24:22,080 --> 00:24:25,340
for me the moment order dict was

00:24:24,240 --> 00:24:27,750
deployed list

00:24:25,340 --> 00:24:31,350
substitutability was a fine thing it's

00:24:27,750 --> 00:24:32,580
something that we strive for here's the

00:24:31,350 --> 00:24:34,590
traditional examples with a cash

00:24:32,580 --> 00:24:36,210
register in credit cards you accept a

00:24:34,590 --> 00:24:39,450
payment type of some sort

00:24:36,210 --> 00:24:41,970
you specialize that payment into cash or

00:24:39,450 --> 00:24:43,590
a credit or cheque and how do you accept

00:24:41,970 --> 00:24:46,200
a check you see through a person's on a

00:24:43,590 --> 00:24:48,389
list of people who don't write hot

00:24:46,200 --> 00:24:50,039
checks how you accept a credit card you

00:24:48,389 --> 00:24:52,259
call the credit card company and they

00:24:50,039 --> 00:24:54,330
authenticate how do you accept cash you

00:24:52,259 --> 00:24:57,240
check to decide whether you have enough

00:24:54,330 --> 00:24:59,070
change involved or or not and what's

00:24:57,240 --> 00:25:01,190
nice about that is it lets us write a

00:24:59,070 --> 00:25:03,690
huge amount of cash register code and

00:25:01,190 --> 00:25:05,309
then later decide to add a new credit

00:25:03,690 --> 00:25:06,870
card type and I'm going to specialize

00:25:05,309 --> 00:25:09,960
reddit cards so I have a different

00:25:06,870 --> 00:25:12,269
procedure for Amex versus a Visa or

00:25:09,960 --> 00:25:13,830
MasterCard and so I put new ones in and

00:25:12,269 --> 00:25:16,440
I don't have to change any of the client

00:25:13,830 --> 00:25:18,659
code any of the giant code base with our

00:25:16,440 --> 00:25:21,210
cash register that's the big wind that

00:25:18,659 --> 00:25:23,639
comes from let's go so you should strive

00:25:21,210 --> 00:25:27,450
in the design of your class subclasses

00:25:23,639 --> 00:25:29,850
to have lists golf substitutability so

00:25:27,450 --> 00:25:30,470
it is Liskov substitution what fill in

00:25:29,850 --> 00:25:34,529
the blank

00:25:30,470 --> 00:25:38,490
let's call substitution principle not

00:25:34,529 --> 00:25:40,649
Liskov substitution law substituted

00:25:38,490 --> 00:25:42,179
ability is a big win lots of code in

00:25:40,649 --> 00:25:44,370
Python works with dictionaries order

00:25:42,179 --> 00:25:47,490
dicta is a dictionary accordingly I can

00:25:44,370 --> 00:25:50,610
use it everywhere else however you can

00:25:47,490 --> 00:25:52,710
violate Liskov any part of an API of the

00:25:50,610 --> 00:25:56,429
API that isn't fully substitutable is a

00:25:52,710 --> 00:25:59,309
Liskov violation is this okay don't feel

00:25:56,429 --> 00:26:00,509
guilty this is common and normal you can

00:25:59,309 --> 00:26:03,059
tell your parents about it just don't

00:26:00,509 --> 00:26:04,889
tell your friends okay alright so let's

00:26:03,059 --> 00:26:06,269
complement violations are very common in

00:26:04,889 --> 00:26:08,070
normal so we have lots of things in

00:26:06,269 --> 00:26:10,320
Python that are list like but one of

00:26:08,070 --> 00:26:12,450
them is array whose views the array

00:26:10,320 --> 00:26:14,340
module so brain module gives you some

00:26:12,450 --> 00:26:17,129
space efficiency that lists a half so

00:26:14,340 --> 00:26:19,529
you have a list of ten million

00:26:17,129 --> 00:26:21,960
floating-point numbers you can store

00:26:19,529 --> 00:26:23,879
them with no overhead and an array

00:26:21,960 --> 00:26:25,559
object array objects are fully

00:26:23,879 --> 00:26:27,360
substitutable for lists in every way

00:26:25,559 --> 00:26:30,809
except for one which is the constructor

00:26:27,360 --> 00:26:33,269
the constructor takes a data type F so

00:26:30,809 --> 00:26:35,159
there might be a piece of code they call

00:26:33,269 --> 00:26:37,230
self dot class in the name of the

00:26:35,159 --> 00:26:38,910
interval that goes with it and that

00:26:37,230 --> 00:26:41,730
piece of code would be broken by

00:26:38,910 --> 00:26:43,800
the Liskov substitutability here it is

00:26:41,730 --> 00:26:46,320
okay subclasses typically have different

00:26:43,800 --> 00:26:49,950
concern constructor signatures which is

00:26:46,320 --> 00:26:52,830
all so and the more you violate Liskov

00:26:49,950 --> 00:26:55,380
the more you lose substitute ability but

00:26:52,830 --> 00:26:59,130
sometimes you have to our goal is to

00:26:55,380 --> 00:27:00,570
take cases where the signature is

00:26:59,130 --> 00:27:02,250
different and try and minimize the

00:27:00,570 --> 00:27:03,530
impact because the more you minimize the

00:27:02,250 --> 00:27:06,750
impact the more you increase

00:27:03,530 --> 00:27:08,760
substitutability so this a constructor

00:27:06,750 --> 00:27:10,980
for list is we pass in some interval for

00:27:08,760 --> 00:27:13,230
array we pass in a data type C for

00:27:10,980 --> 00:27:15,420
character and some iterable these two

00:27:13,230 --> 00:27:17,100
are not substitutable because they have

00:27:15,420 --> 00:27:20,610
different constructor signatures fair

00:27:17,100 --> 00:27:22,200
enough all right in some cases like

00:27:20,610 --> 00:27:24,540
arrays that's not that big of a deal

00:27:22,200 --> 00:27:26,100
because it's not too common for a race

00:27:24,540 --> 00:27:27,450
code duplicating themselves using this

00:27:26,100 --> 00:27:29,850
way there's other ways like using

00:27:27,450 --> 00:27:33,120
slicing that work just fine but

00:27:29,850 --> 00:27:35,760
sometimes it matters an example was with

00:27:33,120 --> 00:27:37,920
sets what is the the basic business of

00:27:35,760 --> 00:27:40,860
sets it is doing set operations like

00:27:37,920 --> 00:27:45,330
intersect Union difference but not who's

00:27:40,860 --> 00:27:46,950
you says you like them awesome so you do

00:27:45,330 --> 00:27:49,230
the difference of two sets what does it

00:27:46,950 --> 00:27:50,940
produce a new set how do you produce a

00:27:49,230 --> 00:27:53,010
new set you have to call a set

00:27:50,940 --> 00:27:54,540
constructor which is a real problem if

00:27:53,010 --> 00:27:57,090
your subclass has a different signature

00:27:54,540 --> 00:27:59,310
so in the abstract base class for a

00:27:57,090 --> 00:28:03,090
mutable set that allows you to define

00:27:59,310 --> 00:28:05,100
new sets we have provided for you the

00:28:03,090 --> 00:28:06,690
code for Union intersection difference

00:28:05,100 --> 00:28:09,090
and whatnot and all you have to do is

00:28:06,690 --> 00:28:10,890
provide a constructor the problem is

00:28:09,090 --> 00:28:13,560
your constructor might not look like our

00:28:10,890 --> 00:28:15,330
constructor ours takes an iterable set

00:28:13,560 --> 00:28:17,270
consumes an interval and produces a new

00:28:15,330 --> 00:28:19,650
set what if yours takes a data type

00:28:17,270 --> 00:28:20,010
would you be able to use mutable set at

00:28:19,650 --> 00:28:22,710
all

00:28:20,010 --> 00:28:24,240
the answer is we factored out that

00:28:22,710 --> 00:28:26,730
difference into a method called

00:28:24,240 --> 00:28:28,950
underscore from iterable every time we

00:28:26,730 --> 00:28:31,590
need to create a new set we don't call

00:28:28,950 --> 00:28:33,330
the constructor directly instead we call

00:28:31,590 --> 00:28:35,220
underscore from iterable

00:28:33,330 --> 00:28:36,600
this is Quito's ID I keep saying week

00:28:35,220 --> 00:28:40,290
because I get credit for some of his Big

00:28:36,600 --> 00:28:42,660
Ideas so cuido factored this out into

00:28:40,290 --> 00:28:45,450
from iterable with the which the idea is

00:28:42,660 --> 00:28:48,390
every time union or difference or needs

00:28:45,450 --> 00:28:50,430
to come together and make a new class it

00:28:48,390 --> 00:28:51,950
calls from iterable and from iterable

00:28:50,430 --> 00:28:53,330
call sync constructor

00:28:51,950 --> 00:28:55,340
your constructor has a different

00:28:53,330 --> 00:28:58,970
signature all you have to do is override

00:28:55,340 --> 00:29:01,039
one method from iterable and a way to do

00:28:58,970 --> 00:29:02,870
that is to you know take the first

00:29:01,039 --> 00:29:04,970
element of the rule compute the type of

00:29:02,870 --> 00:29:07,100
it make a type set you override from

00:29:04,970 --> 00:29:10,039
iterable make your own initializer and

00:29:07,100 --> 00:29:11,929
inherit from mutable set and now you've

00:29:10,039 --> 00:29:14,360
gotten for free Union intersection

00:29:11,929 --> 00:29:16,070
difference whatnot which i think is a

00:29:14,360 --> 00:29:19,340
fantastic who learned something new and

00:29:16,070 --> 00:29:21,019
API designed for sub classing factor out

00:29:19,340 --> 00:29:23,870
all your lists cough violations

00:29:21,019 --> 00:29:25,789
preferably into one place so it makes it

00:29:23,870 --> 00:29:27,740
easier on the subclass err that way the

00:29:25,789 --> 00:29:31,820
subclass I did one extra method as an

00:29:27,740 --> 00:29:35,600
adapter to the parent class so it gets

00:29:31,820 --> 00:29:37,850
all the parent work for free ok circle

00:29:35,600 --> 00:29:41,029
ellipse problem how many of you heard of

00:29:37,850 --> 00:29:43,039
it before okay that's fantastic so I've

00:29:41,029 --> 00:29:44,179
gone make a circle and I'm going to make

00:29:43,039 --> 00:29:48,740
an ellipse which one should be the

00:29:44,179 --> 00:29:50,240
parent class ellipse of course the

00:29:48,740 --> 00:29:51,830
ellipse is the parrot class because it's

00:29:50,240 --> 00:29:54,830
more general right a circle is a

00:29:51,830 --> 00:29:57,740
specialization of a lips that makes

00:29:54,830 --> 00:29:59,960
perfect sense right except that my

00:29:57,740 --> 00:30:03,710
ellipse has a method on it called skew

00:29:59,960 --> 00:30:07,669
and what skew will do is multiply the

00:30:03,710 --> 00:30:10,190
x-axis length by 2 and the y-axis the

00:30:07,669 --> 00:30:14,120
minor axis by 1/2 keeping the area

00:30:10,190 --> 00:30:16,899
that's the same so now a circle inherits

00:30:14,120 --> 00:30:20,240
the skew method what's going to happen

00:30:16,899 --> 00:30:23,570
we've got a problem because if skew gets

00:30:20,240 --> 00:30:26,570
called on circle it's no longer a circle

00:30:23,570 --> 00:30:29,360
anymore so obviously ellipse can't be at

00:30:26,570 --> 00:30:30,440
the top so I think all of you guys were

00:30:29,360 --> 00:30:32,990
wrong we'll put circle at the top

00:30:30,440 --> 00:30:34,549
because everybody knows that ellipses

00:30:32,990 --> 00:30:35,899
are just circles feed from an angle so

00:30:34,549 --> 00:30:37,549
here's a circle and then I start to tilt

00:30:35,899 --> 00:30:41,330
it and it starts because so I've added

00:30:37,549 --> 00:30:44,450
on a view angle and that is a perfectly

00:30:41,330 --> 00:30:46,519
good way to but but circles have this

00:30:44,450 --> 00:30:48,860
unique property about the bounding box

00:30:46,519 --> 00:30:50,480
for a circle is a square and so you can

00:30:48,860 --> 00:30:52,130
rely on that I'm sure lots of client

00:30:50,480 --> 00:30:53,870
code does rely on it I'll take one side

00:30:52,130 --> 00:30:55,760
I've got that's tells me the side of the

00:30:53,870 --> 00:30:58,429
bounding box so if I now put in an

00:30:55,760 --> 00:31:01,010
ellipse subclass where that is no longer

00:30:58,429 --> 00:31:03,080
true I violated an invariant the class

00:31:01,010 --> 00:31:05,299
in other words there is no right answer

00:31:03,080 --> 00:31:08,480
to official technical right

00:31:05,299 --> 00:31:10,669
Liskov wise as to witches in charge the

00:31:08,480 --> 00:31:12,649
circle or the class any of you who

00:31:10,669 --> 00:31:14,659
gravitated right away to circle are

00:31:12,649 --> 00:31:18,320
gravitated right away to ellipse you

00:31:14,659 --> 00:31:20,210
were wrong because that is not the guy

00:31:18,320 --> 00:31:24,350
the principal that you were using to get

00:31:20,210 --> 00:31:26,509
to that aisle had a violation associated

00:31:24,350 --> 00:31:28,909
with it of some invariant that was

00:31:26,509 --> 00:31:31,429
broken depending on your choice so how

00:31:28,909 --> 00:31:34,309
do you decide what's uh which one should

00:31:31,429 --> 00:31:36,799
be on top there is no principle of

00:31:34,309 --> 00:31:38,659
specialization because you were taught

00:31:36,799 --> 00:31:40,489
that subclasses specialize a parent

00:31:38,659 --> 00:31:43,129
throw that out the way out of the window

00:31:40,489 --> 00:31:44,690
that's a Java and C++ thinking a better

00:31:43,129 --> 00:31:47,450
way of thinking it's I've already given

00:31:44,690 --> 00:31:50,090
you the hint why do we subclass it's

00:31:47,450 --> 00:31:52,700
just a way to reuse code in the apparent

00:31:50,090 --> 00:31:54,950
so the way you choose which one should

00:31:52,700 --> 00:31:56,779
be the parent class is that which has

00:31:54,950 --> 00:32:00,529
the most code that's reusable by the

00:31:56,779 --> 00:32:04,190
other class should be the parent thank

00:32:00,529 --> 00:32:05,659
you so the principle for deciding which

00:32:04,190 --> 00:32:08,299
is the parent class is that which

00:32:05,659 --> 00:32:10,279
maximizes raw code reuse throw notions

00:32:08,299 --> 00:32:12,350
of specialization out the window a dog

00:32:10,279 --> 00:32:13,730
is a special case of an animal it turns

00:32:12,350 --> 00:32:15,830
out if your dog has a lot of functions

00:32:13,730 --> 00:32:21,350
that are reusable by animal and not vice

00:32:15,830 --> 00:32:23,539
versa but the dog on top ok all right

00:32:21,350 --> 00:32:25,519
who learned something new okay so the

00:32:23,539 --> 00:32:27,850
lessons that we learned here is that

00:32:25,519 --> 00:32:31,009
taxonomy hierarchies don't map neatly

00:32:27,850 --> 00:32:33,859
into useful class hierarchies every time

00:32:31,009 --> 00:32:36,350
somebody goes down this path of mapping

00:32:33,859 --> 00:32:37,159
a taxonomy something bad happens to them

00:32:36,350 --> 00:32:38,600
along the way

00:32:37,159 --> 00:32:41,600
for instance we get this bright idea

00:32:38,600 --> 00:32:44,179
that we can take our exceptions and

00:32:41,600 --> 00:32:45,320
organize them into a tree and then

00:32:44,179 --> 00:32:46,820
people come along occasionally say I

00:32:45,320 --> 00:32:48,499
want to make the tree deeper and

00:32:46,820 --> 00:32:49,850
specialize all these things and they get

00:32:48,499 --> 00:32:52,399
into a problem because sometimes you get

00:32:49,850 --> 00:32:53,989
an exception that really it's kind of a

00:32:52,399 --> 00:32:55,999
value error it's kind of a type error

00:32:53,989 --> 00:32:57,409
it's kind of a runtime error and you

00:32:55,999 --> 00:33:00,019
have to decide which one of those that

00:32:57,409 --> 00:33:03,039
you subclass from what's the right

00:33:00,019 --> 00:33:06,499
answer by the way for how to do that

00:33:03,039 --> 00:33:08,600
you can subset you can inherit from all

00:33:06,499 --> 00:33:10,489
three of them that way any client code

00:33:08,600 --> 00:33:13,429
that is caching runtime error value

00:33:10,489 --> 00:33:15,379
error type error will will match the

00:33:13,429 --> 00:33:16,429
subclass so you use multiple inheritance

00:33:15,379 --> 00:33:19,250
and that how are you supposed to know

00:33:16,429 --> 00:33:22,550
such things you do follow my Twitter

00:33:19,250 --> 00:33:23,900
right Raymond H so I don't tweet where

00:33:22,550 --> 00:33:25,550
I'm standing at the moment or when I get

00:33:23,900 --> 00:33:27,740
off the airplane my challenge to myself

00:33:25,550 --> 00:33:29,570
is to do technical tweets and 140

00:33:27,740 --> 00:33:31,910
characters or less and to not waste your

00:33:29,570 --> 00:33:33,200
time so several times a week I meet

00:33:31,910 --> 00:33:35,030
technical tweets and I tell you things

00:33:33,200 --> 00:33:37,220
like hey this is the way we solve the

00:33:35,030 --> 00:33:40,220
problem in the decimal class where when

00:33:37,220 --> 00:33:42,200
you raise a subnormal exception it

00:33:40,220 --> 00:33:45,170
represents several other decimal type of

00:33:42,200 --> 00:33:47,570
exceptions also because the the flags

00:33:45,170 --> 00:33:50,300
are and signals are all interrelated the

00:33:47,570 --> 00:33:51,830
taxonomy doesn't map neatly on to a

00:33:50,300 --> 00:33:53,810
class hierarchy you need to throw that

00:33:51,830 --> 00:33:57,680
thinking out any sign you see a taxonomy

00:33:53,810 --> 00:33:59,450
and say Oh animal dog snake cat throw

00:33:57,680 --> 00:34:01,940
that thinking out drink strictly in

00:33:59,450 --> 00:34:04,550
terms of maximizing code reuse and do

00:34:01,940 --> 00:34:06,490
multiple inheritance if necessary in

00:34:04,550 --> 00:34:08,510
order to violate the taxonomy

00:34:06,490 --> 00:34:10,460
substitutability is not non-trivial

00:34:08,510 --> 00:34:13,220
problem don't think if you think of it

00:34:10,460 --> 00:34:14,840
as a trivial problem oh well you just if

00:34:13,220 --> 00:34:17,149
you start your sentence well you just

00:34:14,840 --> 00:34:19,129
when one of your junior programmers

00:34:17,149 --> 00:34:20,929
asked you a class in question if you

00:34:19,129 --> 00:34:22,370
start off with well you just you're

00:34:20,929 --> 00:34:24,830
already given them a wrong answer

00:34:22,370 --> 00:34:27,260
idiot is a hard problem and if you

00:34:24,830 --> 00:34:28,669
dismiss it as an easy problem then you

00:34:27,260 --> 00:34:29,570
are not actually answering their

00:34:28,669 --> 00:34:31,669
question for real

00:34:29,570 --> 00:34:34,010
maximize code reuse do multiple

00:34:31,669 --> 00:34:37,010
inheritance of necessary let's challenge

00:34:34,010 --> 00:34:38,899
our view of a subclasses as a form of

00:34:37,010 --> 00:34:40,639
specialization and think in terms of our

00:34:38,899 --> 00:34:43,639
closures this is where you get your

00:34:40,639 --> 00:34:48,290
clarity thinking about code reuse how

00:34:43,639 --> 00:34:50,389
long have I got five minutes for the

00:34:48,290 --> 00:34:52,340
open closed principle you must be

00:34:50,389 --> 00:34:53,690
kidding me software entities should be

00:34:52,340 --> 00:34:55,340
open for extension close for a

00:34:53,690 --> 00:34:56,960
modification I forgot whether this came

00:34:55,340 --> 00:34:59,240
from Kligerman

00:34:56,960 --> 00:35:01,580
or Uncle Bob Martin you guys should all

00:34:59,240 --> 00:35:03,790
follow uncle bob martin on twitter by

00:35:01,580 --> 00:35:05,960
the way his tweets are also excellent

00:35:03,790 --> 00:35:08,060
this idea has multiple interpretations

00:35:05,960 --> 00:35:10,580
it's interpreted differently in the java

00:35:08,060 --> 00:35:12,530
world in the java world they it's used

00:35:10,580 --> 00:35:14,180
as a justification for using an abstract

00:35:12,530 --> 00:35:16,490
based class for everything and

00:35:14,180 --> 00:35:19,430
specializing but there is another view a

00:35:16,490 --> 00:35:21,410
more modern view which says objects have

00:35:19,430 --> 00:35:23,630
internal invariants in subclasses the

00:35:21,410 --> 00:35:27,050
job of a subclass is not break those

00:35:23,630 --> 00:35:29,150
invariants so you can extend classes add

00:35:27,050 --> 00:35:31,670
capabilities but your idea is you don't

00:35:29,150 --> 00:35:34,130
want to break your parent class

00:35:31,670 --> 00:35:36,230
all the way so software should be

00:35:34,130 --> 00:35:38,390
designed to be open to be extended but

00:35:36,230 --> 00:35:40,130
closed for modification the underlying

00:35:38,390 --> 00:35:42,349
part should still work let me show you

00:35:40,130 --> 00:35:44,089
an example in the standard library we

00:35:42,349 --> 00:35:45,920
want to inherit from dictionary

00:35:44,089 --> 00:35:48,109
dictionaries were designed with the open

00:35:45,920 --> 00:35:50,119
closed principle in mind so I want to

00:35:48,109 --> 00:35:52,160
make a case insensitive de who's ever

00:35:50,119 --> 00:35:54,650
written code like this you override a

00:35:52,160 --> 00:35:57,530
set item and override getitem getitem

00:35:54,650 --> 00:35:59,329
does a lower case key and set item does

00:35:57,530 --> 00:36:01,970
the lower case key anybody written code

00:35:59,329 --> 00:36:03,799
like that was anybody now and then it

00:36:01,970 --> 00:36:06,319
started work you did you stored django

00:36:03,799 --> 00:36:08,630
with mixed case you looked it up with

00:36:06,319 --> 00:36:11,359
another funky case it found it but look

00:36:08,630 --> 00:36:14,000
at this i do a diecut and it says not

00:36:11,359 --> 00:36:18,349
found how come it worked here and not

00:36:14,000 --> 00:36:20,240
here and turned out overriding get them

00:36:18,349 --> 00:36:24,980
get item what's not sufficient to

00:36:20,240 --> 00:36:26,720
override get so get bypassed your

00:36:24,980 --> 00:36:29,079
extension of get item who is not

00:36:26,720 --> 00:36:32,450
advising amused by this and is angry

00:36:29,079 --> 00:36:35,089
that cuido please get him angry

00:36:32,450 --> 00:36:35,900
villagers with pitchforks he did it for

00:36:35,089 --> 00:36:37,670
a reasons

00:36:35,900 --> 00:36:38,839
dictionaries have invariance and it's

00:36:37,670 --> 00:36:41,150
possible for you to do something that

00:36:38,839 --> 00:36:43,670
broke its invariance i hear and if dick

00:36:41,150 --> 00:36:47,059
i get we're relying on get item having

00:36:43,670 --> 00:36:49,460
done something oh and your get item

00:36:47,059 --> 00:36:51,589
didn't do it could break it what's the

00:36:49,460 --> 00:36:53,630
consequence of breaking something that

00:36:51,589 --> 00:36:56,270
we're c code is expecting invariant

00:36:53,630 --> 00:36:57,650
segfault blue screen of death we try and

00:36:56,270 --> 00:37:00,230
guarantee that doesn't happen in the

00:36:57,650 --> 00:37:01,549
normal course of a Python i usage so

00:37:00,230 --> 00:37:03,589
this was designed with the open closed

00:37:01,549 --> 00:37:05,390
principle in mind a fact of life when

00:37:03,589 --> 00:37:08,059
sub classing built-ins is that you need

00:37:05,390 --> 00:37:10,940
to override every method as opposed to

00:37:08,059 --> 00:37:12,799
right override one and expect all of the

00:37:10,940 --> 00:37:14,359
others to follow in suit that way we

00:37:12,799 --> 00:37:16,520
don't break the internal invariance if

00:37:14,359 --> 00:37:18,559
we do that and see how can you do it in

00:37:16,520 --> 00:37:22,369
pure python there's a mechanism who

00:37:18,559 --> 00:37:26,150
knows what it is there are two

00:37:22,369 --> 00:37:29,420
underscores here's what the underscores

00:37:26,150 --> 00:37:32,480
are actually for so this is a code that

00:37:29,420 --> 00:37:35,920
uh something similar to something that i

00:37:32,480 --> 00:37:39,890
used in collections ordered dict

00:37:35,920 --> 00:37:41,510
so and yet can take an iterable argument

00:37:39,890 --> 00:37:43,549
in a dictionary the interval argument is

00:37:41,510 --> 00:37:44,930
a list of key value pairs so that will

00:37:43,549 --> 00:37:45,980
populate the dictionary we have a

00:37:44,930 --> 00:37:47,960
another method that does something very

00:37:45,980 --> 00:37:49,520
similar that's update which also takes

00:37:47,960 --> 00:37:51,710
an interval and updates of key value

00:37:49,520 --> 00:37:54,040
pairs so that we can now have our code

00:37:51,710 --> 00:37:56,660
factored I'd like to have an it call

00:37:54,040 --> 00:37:59,329
update so that makes sense so I could

00:37:56,660 --> 00:38:00,859
have just put self update my problem is

00:37:59,329 --> 00:38:03,430
if a subclass err came along and

00:38:00,859 --> 00:38:06,020
override update let's say like

00:38:03,430 --> 00:38:07,040
collections counter are overrides update

00:38:06,020 --> 00:38:09,530
because it has a completely different

00:38:07,040 --> 00:38:11,720
signature collections counter would have

00:38:09,530 --> 00:38:14,089
broken an it which would been entirely

00:38:11,720 --> 00:38:15,800
unexpected for counter we would have

00:38:14,089 --> 00:38:18,079
made life tough for a subclass or when a

00:38:15,800 --> 00:38:19,579
subclass or overrides update they expect

00:38:18,079 --> 00:38:21,890
to just be able to override up rate and

00:38:19,579 --> 00:38:23,900
not break the whole rest of the class so

00:38:21,890 --> 00:38:25,970
the technique is to call self under

00:38:23,900 --> 00:38:28,760
under update and the map under under

00:38:25,970 --> 00:38:32,089
update to update what does that do we

00:38:28,760 --> 00:38:34,670
make we have two pointers to this method

00:38:32,089 --> 00:38:36,500
definition so there are two an instance

00:38:34,670 --> 00:38:38,359
class or update and under under update

00:38:36,500 --> 00:38:40,280
well this one calls under under update

00:38:38,359 --> 00:38:42,470
that's guaranteed to not be overridden

00:38:40,280 --> 00:38:43,309
by any other class the under-under does

00:38:42,470 --> 00:38:47,750
name mangling

00:38:43,309 --> 00:38:49,460
in order to prevent a sub classes from

00:38:47,750 --> 00:38:51,920
stomping on it we've actually made life

00:38:49,460 --> 00:38:54,260
easier on sub classes by hiding an

00:38:51,920 --> 00:38:55,760
internal call and saying I am expecting

00:38:54,260 --> 00:38:57,980
that when I call update I get exactly

00:38:55,760 --> 00:38:59,869
this one and that the sub class ur is

00:38:57,980 --> 00:39:02,599
free to change update without breaking

00:38:59,869 --> 00:39:04,670
my init who learned something new that's

00:39:02,599 --> 00:39:05,680
what the double underscore is for I hate

00:39:04,670 --> 00:39:07,700
to trace back and find the original

00:39:05,680 --> 00:39:09,680
justification for a being there and that

00:39:07,700 --> 00:39:11,059
was the argument for putting it in it

00:39:09,680 --> 00:39:13,880
has nothing to do with public and

00:39:11,059 --> 00:39:16,190
private keywords and because python is a

00:39:13,880 --> 00:39:18,440
consenting adults language we we don't

00:39:16,190 --> 00:39:20,710
lock the door we take our tie and put it

00:39:18,440 --> 00:39:25,579
on the door and say the room is occupied

00:39:20,710 --> 00:39:28,990
alright if you go in what you see and

00:39:25,579 --> 00:39:31,640
how you react to it is your own problem

00:39:28,990 --> 00:39:34,450
alright guys I have been informed than I

00:39:31,640 --> 00:39:34,450
am got out of time

00:39:40,000 --> 00:39:46,040
Matthew that was for you thank you for

00:39:43,940 --> 00:39:48,819
coming guys and welcome to this huge

00:39:46,040 --> 00:39:48,819

YouTube URL: https://www.youtube.com/watch?v=miGolgp9xq8


