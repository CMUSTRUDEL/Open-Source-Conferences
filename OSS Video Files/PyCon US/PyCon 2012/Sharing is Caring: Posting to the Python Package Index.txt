Title: Sharing is Caring: Posting to the Python Package Index
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Luke Sneeringer
Due to its robust namespacing, Python uniquely equips developers to write and distribute reusable code. The Python community has a tool for this: the Python Package Index. PyPI is a massive repository of code, and in this talk you'll
Captions: 
	00:00:00,000 --> 00:00:04,440
I heard introduced looks near injure

00:00:02,010 --> 00:00:06,870
will be talking to us about post posting

00:00:04,440 --> 00:00:08,610
to the Python package index this talk

00:00:06,870 --> 00:00:10,740
will be 30 minutes including five

00:00:08,610 --> 00:00:17,310
minutes at the end for Q&A look

00:00:10,740 --> 00:00:19,230
signature thank you to be entirely

00:00:17,310 --> 00:00:21,720
honest this probably will not take a

00:00:19,230 --> 00:00:25,560
full 25 minutes it's an incredibly

00:00:21,720 --> 00:00:29,160
simple topic the amusing part of this is

00:00:25,560 --> 00:00:32,099
I submitted for talks to be done in Pike

00:00:29,160 --> 00:00:33,660
on two were accepted I thought this was

00:00:32,099 --> 00:00:37,469
the weakest one I was very surprised

00:00:33,660 --> 00:00:39,690
when I wouldn't was voted in but anyway

00:00:37,469 --> 00:00:41,579
the goal of this talk well actually let

00:00:39,690 --> 00:00:43,320
me go in the order i had originally

00:00:41,579 --> 00:00:45,510
planned because things would go better a

00:00:43,320 --> 00:00:48,480
little bit better that way so a little

00:00:45,510 --> 00:00:51,449
bit about me I'm the soul of software

00:00:48,480 --> 00:00:53,640
developer at a software startup one of

00:00:51,449 --> 00:00:55,770
the things I've had to do is figure out

00:00:53,640 --> 00:00:56,699
how to post things to pi PI there's been

00:00:55,770 --> 00:00:57,840
a couple times when I've written

00:00:56,699 --> 00:01:00,030
something and thought you know someone

00:00:57,840 --> 00:01:01,260
else could use this and then sat down to

00:01:00,030 --> 00:01:03,180
do this and it's not a very difficult

00:01:01,260 --> 00:01:05,220
process but it's just esoteric enough

00:01:03,180 --> 00:01:06,869
that I thought that probably I am not

00:01:05,220 --> 00:01:09,530
the only person to have this problem

00:01:06,869 --> 00:01:14,400
probably there's some sort of value in

00:01:09,530 --> 00:01:16,799
offering an explanation of this really

00:01:14,400 --> 00:01:18,570
it's very very very easy but it could be

00:01:16,799 --> 00:01:21,360
a little bit more obvious so this is a

00:01:18,570 --> 00:01:22,560
walkthrough if posting reusable code 2

00:01:21,360 --> 00:01:25,560
pi p I is something that you are

00:01:22,560 --> 00:01:28,530
interested in doing then you should

00:01:25,560 --> 00:01:29,970
leave here today knowing pretty much

00:01:28,530 --> 00:01:31,619
exactly how to do that and it's

00:01:29,970 --> 00:01:35,280
basically writing down four or five

00:01:31,619 --> 00:01:38,040
steps but because this is 25 minute talk

00:01:35,280 --> 00:01:42,000
I'm going to do it in a very long and

00:01:38,040 --> 00:01:44,700
drawn-out explanation the purpose of

00:01:42,000 --> 00:01:47,310
this talk is to encourage you to package

00:01:44,700 --> 00:01:50,970
and post more of your cut one of the

00:01:47,310 --> 00:01:53,310
great things about python is that the

00:01:50,970 --> 00:01:55,500
packaging system is good and because the

00:01:53,310 --> 00:01:58,619
name spacing and in other aspects of

00:01:55,500 --> 00:02:01,890
python are so excellent we have a very

00:01:58,619 --> 00:02:03,869
very very good repository of reusable

00:02:01,890 --> 00:02:05,280
code much more than you can find in many

00:02:03,869 --> 00:02:07,469
other places and so when you go into a

00:02:05,280 --> 00:02:10,979
project in Python you can do a lot less

00:02:07,469 --> 00:02:13,650
work you can be a lot lazier and so this

00:02:10,979 --> 00:02:16,140
is a talk on how to pay it forward

00:02:13,650 --> 00:02:19,019
and I'm going to do that by just giving

00:02:16,140 --> 00:02:22,829
a very big brief overview of how to make

00:02:19,019 --> 00:02:25,140
a package what is pie pie pie pie is a

00:02:22,829 --> 00:02:27,329
repository of at least ostensibly

00:02:25,140 --> 00:02:29,310
reusable code most of it's pretty good

00:02:27,329 --> 00:02:31,230
written by thousands of different people

00:02:29,310 --> 00:02:34,500
worldwide it's a completely open system

00:02:31,230 --> 00:02:37,950
anybody can make a package run a few

00:02:34,500 --> 00:02:39,750
commands and post to it more to the

00:02:37,950 --> 00:02:43,769
point it's a great way to write less

00:02:39,750 --> 00:02:45,629
code yourself because it was mentioned

00:02:43,769 --> 00:02:47,400
this morning that one of the great

00:02:45,629 --> 00:02:51,720
virtues of being a programmer is to be

00:02:47,400 --> 00:02:53,639
lazy a quick history once upon a time it

00:02:51,720 --> 00:02:54,920
was called the cheese shop which I

00:02:53,639 --> 00:02:58,109
believe is the money python reference

00:02:54,920 --> 00:02:59,250
some people still call it that so if you

00:02:58,109 --> 00:03:01,680
hear someone talk about the cheese shop

00:02:59,250 --> 00:03:03,689
that's what they're talking about it was

00:03:01,680 --> 00:03:05,909
changed because the name was not

00:03:03,689 --> 00:03:07,319
incredibly descriptive I remember Steve

00:03:05,909 --> 00:03:10,109
holding up on stage a couple years ago

00:03:07,319 --> 00:03:11,700
saying that there were people coming to

00:03:10,109 --> 00:03:12,870
him saying well it's great that you have

00:03:11,700 --> 00:03:17,370
this thing called the cheese shop but

00:03:12,870 --> 00:03:19,980
why could it get a Python package so so

00:03:17,370 --> 00:03:21,900
the name was altered if you ever use pip

00:03:19,980 --> 00:03:23,579
or easy install then you're almost

00:03:21,900 --> 00:03:29,250
certainly using pie pie pie pie is the

00:03:23,579 --> 00:03:31,260
repository the power is those tools so

00:03:29,250 --> 00:03:32,819
basically whenever you pip install

00:03:31,260 --> 00:03:34,620
something that means that someone else

00:03:32,819 --> 00:03:36,690
did the process that I'm going to cover

00:03:34,620 --> 00:03:39,900
today for if you want to post some of

00:03:36,690 --> 00:03:40,980
your own code the last thing next thing

00:03:39,900 --> 00:03:43,979
I want to go over is that this is really

00:03:40,980 --> 00:03:48,690
simple it's not hard it's a little bit

00:03:43,979 --> 00:03:50,159
of skier but it's not hard which means

00:03:48,690 --> 00:03:52,739
I'm probably going to be sending you to

00:03:50,159 --> 00:03:56,669
break a little bit early and somebody

00:03:52,739 --> 00:03:58,709
will be happy about that um Python

00:03:56,669 --> 00:04:02,310
packages are informed by a file called

00:03:58,709 --> 00:04:03,720
setup py you've almost certainly seen it

00:04:02,310 --> 00:04:05,430
in packages that you've downloaded if

00:04:03,720 --> 00:04:07,949
you've manually built something from

00:04:05,430 --> 00:04:09,989
source I don't know if you've ever

00:04:07,949 --> 00:04:15,750
looked this laptop py file but it's an

00:04:09,989 --> 00:04:19,039
incredibly simple construction packaging

00:04:15,750 --> 00:04:21,359
code really comes down to this file it

00:04:19,039 --> 00:04:23,310
gives information about other things in

00:04:21,359 --> 00:04:25,590
the package and at least in the simplest

00:04:23,310 --> 00:04:28,700
case you can make an entire package

00:04:25,590 --> 00:04:31,290
which with just this thing

00:04:28,700 --> 00:04:34,710
it contains all the information for

00:04:31,290 --> 00:04:37,170
posting and indexing on the index you

00:04:34,710 --> 00:04:38,970
can provide lots of information you can

00:04:37,170 --> 00:04:41,880
provide less information usually more is

00:04:38,970 --> 00:04:43,320
better and it also contains all the

00:04:41,880 --> 00:04:48,510
information needed to install your

00:04:43,320 --> 00:04:50,610
package on disk in terms of directory

00:04:48,510 --> 00:04:54,060
structure usually set up deaf people I

00:04:50,610 --> 00:04:57,720
goes above your code so something like

00:04:54,060 --> 00:04:59,040
this so if your code is in I'm assuming

00:04:57,720 --> 00:05:01,680
you in the back and read that if not

00:04:59,040 --> 00:05:03,210
there's plenty of space if your code is

00:05:01,680 --> 00:05:05,040
in the package name folder you're

00:05:03,210 --> 00:05:07,950
probably going to have a readme in SF py

00:05:05,040 --> 00:05:09,930
just above it and we'll talk about that

00:05:07,950 --> 00:05:11,100
in a minute and of course the import

00:05:09,930 --> 00:05:16,470
path here would be would start with

00:05:11,100 --> 00:05:19,850
package name really the setup to Wi-Fi

00:05:16,470 --> 00:05:23,190
only comes down to two pieces an import

00:05:19,850 --> 00:05:25,050
statement and a function call the import

00:05:23,190 --> 00:05:26,490
statement is to import the function call

00:05:25,050 --> 00:05:33,990
that you're going to call and then you

00:05:26,490 --> 00:05:36,570
call it and that's it no really this of

00:05:33,990 --> 00:05:38,520
course we haven't gone into what's in

00:05:36,570 --> 00:05:44,550
that side thing below that but that's

00:05:38,520 --> 00:05:47,220
basically complete the import just

00:05:44,550 --> 00:05:48,840
memorize or if you're like me you don't

00:05:47,220 --> 00:05:50,730
actually memorized it you just go to the

00:05:48,840 --> 00:05:52,710
previous set that py file that you wrote

00:05:50,730 --> 00:05:54,210
for a project six months ago and copy

00:05:52,710 --> 00:05:56,370
the first line but it's that this

00:05:54,210 --> 00:05:59,940
utility or imports from this utility or

00:05:56,370 --> 00:06:01,860
import set up the setup function itself

00:05:59,940 --> 00:06:03,900
on the other hand takes lots and lots

00:06:01,860 --> 00:06:07,920
and lots and lots of options they're all

00:06:03,900 --> 00:06:09,420
keyword arguments so it's pretty easy to

00:06:07,920 --> 00:06:11,370
do and you can do them in any order and

00:06:09,420 --> 00:06:12,690
make your file look nice and for the

00:06:11,370 --> 00:06:15,650
remainder of our time we're going to be

00:06:12,690 --> 00:06:17,640
talking about this setup function

00:06:15,650 --> 00:06:20,390
there's some stuff that you have to have

00:06:17,640 --> 00:06:23,040
it will you know fail out if you don't

00:06:20,390 --> 00:06:25,320
you need a name and an author those

00:06:23,040 --> 00:06:27,720
that's probably not very surprising the

00:06:25,320 --> 00:06:29,790
name doesn't have to match the actual

00:06:27,720 --> 00:06:32,550
package same import but it is how your

00:06:29,790 --> 00:06:36,600
thing will be indexed the author well

00:06:32,550 --> 00:06:40,970
I'm hoping you know who that is needs

00:06:36,600 --> 00:06:43,590
version not particularly surprisingly

00:06:40,970 --> 00:06:45,210
pai pai versions things it expects a

00:06:43,590 --> 00:06:49,620
version to be press and it doesn't just

00:06:45,210 --> 00:06:51,090
use time stamps for relatively obvious

00:06:49,620 --> 00:06:55,800
reasons and then you'll need at least

00:06:51,090 --> 00:06:57,690
one of packages or scripts this is the

00:06:55,800 --> 00:07:01,530
the reference to the code that you're

00:06:57,690 --> 00:07:04,530
actually including talking really really

00:07:01,530 --> 00:07:06,870
quickly about the version question the

00:07:04,530 --> 00:07:09,360
version is how pie pie determines what

00:07:06,870 --> 00:07:11,040
of your code is the most recent when

00:07:09,360 --> 00:07:14,160
you've been maintaining a project for a

00:07:11,040 --> 00:07:15,690
month year however long you're going to

00:07:14,160 --> 00:07:16,890
have lots and lots and lots of different

00:07:15,690 --> 00:07:19,320
versions up and this is how it knows

00:07:16,890 --> 00:07:21,600
what's current it doesn't do that by

00:07:19,320 --> 00:07:23,910
just eight and the obvious reason is

00:07:21,600 --> 00:07:26,790
because you often maintain multiple

00:07:23,910 --> 00:07:29,130
versions of things simultaneously you

00:07:26,790 --> 00:07:31,800
know an obvious example is Python 2 and

00:07:29,130 --> 00:07:37,230
Python 3 Python 27 came out after Python

00:07:31,800 --> 00:07:39,050
30 an asker Python 31 but nonetheless is

00:07:37,230 --> 00:07:41,960
probably considered an older version

00:07:39,050 --> 00:07:44,940
even though lots of people use it

00:07:41,960 --> 00:07:46,680
versions are not separated exactly how

00:07:44,940 --> 00:07:50,390
you would expect the format is major

00:07:46,680 --> 00:07:54,300
minor possibly got patched in dotsub

00:07:50,390 --> 00:07:56,310
there's a special comparison rules each

00:07:54,300 --> 00:07:57,780
dot is each you know the stuff between

00:07:56,310 --> 00:07:59,760
the dots is compared separately from

00:07:57,780 --> 00:08:01,200
left to right if they're equal you go on

00:07:59,760 --> 00:08:04,200
to the next spot if they're greater than

00:08:01,200 --> 00:08:06,570
or less than you return that answer so 3

00:08:04,200 --> 00:08:08,640
dot 1 is greater than 2 dot 7 because 3

00:08:06,570 --> 00:08:11,100
is greater than 2 3 dot one dot 2 is

00:08:08,640 --> 00:08:13,140
greater than 3 dot one because the dot 2

00:08:11,100 --> 00:08:16,650
is present three dot n is greater than

00:08:13,140 --> 00:08:19,770
39 because 10 is greater than nine even

00:08:16,650 --> 00:08:23,160
though three dot one is is as a decimal

00:08:19,770 --> 00:08:25,940
less than 39 there are some suffixes

00:08:23,160 --> 00:08:28,740
that it understands a for alpha B 4 beta

00:08:25,940 --> 00:08:30,900
dash PR for pre-release I'm pretty sure

00:08:28,740 --> 00:08:34,710
it also understands RC but this is what

00:08:30,900 --> 00:08:36,920
was documented now i'm going to talk

00:08:34,710 --> 00:08:41,370
real quick about the packages keyword

00:08:36,920 --> 00:08:43,470
packages tells setup i install or pip

00:08:41,370 --> 00:08:46,050
which all pip actually does is do a

00:08:43,470 --> 00:08:49,290
build and then do an install what

00:08:46,050 --> 00:08:51,030
packages it's supposed to install their

00:08:49,290 --> 00:08:53,740
relative from the location of setup you

00:08:51,030 --> 00:08:56,209
I so if you remember the

00:08:53,740 --> 00:08:57,800
screenshot earlier where we had set da

00:08:56,209 --> 00:09:01,040
py then we had a package same folder

00:08:57,800 --> 00:09:03,670
your packages list would be just one

00:09:01,040 --> 00:09:06,470
thing with the string packagename in it

00:09:03,670 --> 00:09:08,810
it's technically optional but you almost

00:09:06,470 --> 00:09:10,069
always need this and the case where it's

00:09:08,810 --> 00:09:13,940
optional is if you have scripts and

00:09:10,069 --> 00:09:16,430
don't have any packages so you remember

00:09:13,940 --> 00:09:18,019
this I just showed it earlier set up py

00:09:16,430 --> 00:09:20,540
and then a package name which is a

00:09:18,019 --> 00:09:23,600
folder that's peer to it with your code

00:09:20,540 --> 00:09:26,420
in that folder this is your package this

00:09:23,600 --> 00:09:30,050
declaration packages equals and then a

00:09:26,420 --> 00:09:34,550
list with the string packagename it is a

00:09:30,050 --> 00:09:37,970
list you can have more than one the

00:09:34,550 --> 00:09:39,380
scripts option is alternate an

00:09:37,970 --> 00:09:42,079
alternative to packages although you

00:09:39,380 --> 00:09:43,519
often have both scripts is the location

00:09:42,079 --> 00:09:45,589
of scripts should be installed to the

00:09:43,519 --> 00:09:47,529
shell path these are things that are

00:09:45,589 --> 00:09:51,470
intended to be executed from the shell

00:09:47,529 --> 00:09:53,209
if in Django admin dot py for those of

00:09:51,470 --> 00:09:55,459
you who use Django is a very obvious

00:09:53,209 --> 00:09:58,279
example that's installed on your system

00:09:55,459 --> 00:10:00,620
path and you can call python django

00:09:58,279 --> 00:10:02,209
adnan py from anywhere i think you can

00:10:00,620 --> 00:10:07,449
also call it with dot slash if you're on

00:10:02,209 --> 00:10:11,870
lenox and yeah that's my common example

00:10:07,449 --> 00:10:14,990
scripts tend to be chmod executable for

00:10:11,870 --> 00:10:17,569
Linux environments it just makes

00:10:14,990 --> 00:10:19,399
people's lives easier if they are you

00:10:17,569 --> 00:10:21,230
can omit the dot py extension on Linux

00:10:19,399 --> 00:10:23,839
by you know using your frontline hash

00:10:21,230 --> 00:10:26,779
bang such as hash bang user been in

00:10:23,839 --> 00:10:29,510
space python but remember that you're

00:10:26,779 --> 00:10:31,519
posting packages which means that not

00:10:29,510 --> 00:10:33,380
everyone who retrieves them is going to

00:10:31,519 --> 00:10:37,519
be using Linux you cannot make that

00:10:33,380 --> 00:10:40,910
assumption or if you do you need to be

00:10:37,519 --> 00:10:42,980
clear about it both of these things are

00:10:40,910 --> 00:10:45,819
technically optional functionally you

00:10:42,980 --> 00:10:49,069
pretty much always need one of them it

00:10:45,819 --> 00:10:52,389
doesn't it's not really meaningful to

00:10:49,069 --> 00:10:55,130
have a package posted with no code and

00:10:52,389 --> 00:10:57,680
so this is a technically complete but

00:10:55,130 --> 00:11:00,290
parse but sparse setup function it has a

00:10:57,680 --> 00:11:02,480
name it has an author it has a version

00:11:00,290 --> 00:11:06,380
and it has a package this declaration it

00:11:02,480 --> 00:11:07,690
could have also had scripts if there had

00:11:06,380 --> 00:11:10,010
been one

00:11:07,690 --> 00:11:12,200
there are lots of other things that the

00:11:10,010 --> 00:11:15,620
setup function does generally the more

00:11:12,200 --> 00:11:17,210
you specify the better the more useful

00:11:15,620 --> 00:11:21,110
your posting is for someone who's

00:11:17,210 --> 00:11:22,250
looking for it a few obvious examples

00:11:21,110 --> 00:11:24,140
that don't really need a whole lot of

00:11:22,250 --> 00:11:26,779
discussion our description which is just

00:11:24,140 --> 00:11:28,580
a longer textual description the author

00:11:26,779 --> 00:11:32,089
email address you don't have to specify

00:11:28,580 --> 00:11:34,970
it does help the URL if your project is

00:11:32,089 --> 00:11:36,560
hosted on github even excuse me if your

00:11:34,970 --> 00:11:46,160
project is hosted on github even that

00:11:36,560 --> 00:11:48,680
can be very useful and this URL here doc

00:11:46,160 --> 00:11:52,670
stop python.org / disutility scripted

00:11:48,680 --> 00:11:54,860
HTML has the full list I do want to talk

00:11:52,670 --> 00:11:56,420
about one of them actually going to talk

00:11:54,860 --> 00:11:57,520
about a couple of them first I'm going

00:11:56,420 --> 00:12:00,800
to talk about his classifiers

00:11:57,520 --> 00:12:05,200
classifiers is this actually kind of

00:12:00,800 --> 00:12:08,450
strange system that pie pie has for

00:12:05,200 --> 00:12:09,980
addressing how your package should be

00:12:08,450 --> 00:12:11,780
indexed it's basically a whole bunch of

00:12:09,980 --> 00:12:14,900
buckets that things can go in so you can

00:12:11,780 --> 00:12:16,130
say that your package is is considered

00:12:14,900 --> 00:12:18,530
to be in beta or is considered to be

00:12:16,130 --> 00:12:20,870
stable you can put what operating

00:12:18,530 --> 00:12:22,820
systems are supported so if you were if

00:12:20,870 --> 00:12:24,380
your package only runs on linux or only

00:12:22,820 --> 00:12:29,570
runs on windows this is the place where

00:12:24,380 --> 00:12:32,180
you can put that and and basically these

00:12:29,570 --> 00:12:33,680
are kind of check boxes that it it does

00:12:32,180 --> 00:12:35,150
it's not smart enough to know that any

00:12:33,680 --> 00:12:36,830
of them are mutually exclusive so if you

00:12:35,150 --> 00:12:38,900
say that your thing is beta and stable

00:12:36,830 --> 00:12:42,080
it will take it at least as far as I

00:12:38,900 --> 00:12:45,050
know um and it stated as a list of these

00:12:42,080 --> 00:12:47,180
special strings with lots of colons and

00:12:45,050 --> 00:12:48,580
I'm not going to show it except to say

00:12:47,180 --> 00:12:51,740
that if you really want to see it

00:12:48,580 --> 00:12:55,850
there's a list on pi pi dot python.org /

00:12:51,740 --> 00:13:00,350
pi PI ? colon action equals list

00:12:55,850 --> 00:13:02,330
classifiers a wonderful URL there and

00:13:00,350 --> 00:13:04,279
you can find that pretty easily just by

00:13:02,330 --> 00:13:08,779
looking up classifiers from the pipe I

00:13:04,279 --> 00:13:10,130
main site once you've made your setup py

00:13:08,779 --> 00:13:13,190
file the next set up is to actually

00:13:10,130 --> 00:13:17,900
distribute it the act of registering it

00:13:13,190 --> 00:13:20,750
on the index and uploading it obviously

00:13:17,900 --> 00:13:21,830
making a self dot py files does

00:13:20,750 --> 00:13:25,220
when any good if you don't do anything

00:13:21,830 --> 00:13:28,400
with it there's two steps the first step

00:13:25,220 --> 00:13:31,670
is set up top py space register this

00:13:28,400 --> 00:13:34,760
basically the purpose of this is to

00:13:31,670 --> 00:13:37,160
tailpipe I that your package exists it

00:13:34,760 --> 00:13:39,200
will not do any uploading it will in

00:13:37,160 --> 00:13:41,930
fact do not much of anything except for

00:13:39,200 --> 00:13:44,000
make the it will take your setup py

00:13:41,930 --> 00:13:46,160
information the author of the name and

00:13:44,000 --> 00:13:49,610
like and post all that and add a

00:13:46,160 --> 00:13:51,680
database entry on IP I what it will not

00:13:49,610 --> 00:13:53,150
do is upload it in code so if you only

00:13:51,680 --> 00:13:55,040
do this step what you're going to find

00:13:53,150 --> 00:13:57,590
is that if you search for your package

00:13:55,040 --> 00:13:59,900
on pi PI you will have a package and it

00:13:57,590 --> 00:14:01,580
will have no downloadable files there

00:13:59,900 --> 00:14:04,130
will actually be no no way for anyone to

00:14:01,580 --> 00:14:07,630
download your package and pip will be

00:14:04,130 --> 00:14:10,370
very confused but it will technically

00:14:07,630 --> 00:14:12,970
register that your package exists the

00:14:10,370 --> 00:14:15,440
second step is actually uploading and

00:14:12,970 --> 00:14:18,410
the know-nothing way to do this is

00:14:15,440 --> 00:14:20,540
Python space set of WI space s disk

00:14:18,410 --> 00:14:23,770
space upload this has to be one command

00:14:20,540 --> 00:14:26,890
s this stands for source distribution it

00:14:23,770 --> 00:14:29,360
basically tarballs your your source code

00:14:26,890 --> 00:14:31,760
whatever you've pointed to and then

00:14:29,360 --> 00:14:34,790
uploads it it has to be one command if

00:14:31,760 --> 00:14:37,790
you only do set up top you is dissed you

00:14:34,790 --> 00:14:41,089
will be given a tarball on your computer

00:14:37,790 --> 00:14:42,830
and that is all and if you do Python to

00:14:41,089 --> 00:14:44,600
I upload it will say I don't have

00:14:42,830 --> 00:14:48,410
anything to upload I'm not interested go

00:14:44,600 --> 00:14:49,730
away has to be one command there are a

00:14:48,410 --> 00:14:52,100
few other batteries that are included in

00:14:49,730 --> 00:14:54,800
here in particular you can make binary

00:14:52,100 --> 00:14:57,470
distributions as well you can make an

00:14:54,800 --> 00:15:00,170
RPM for those Red Hat people you can

00:14:57,470 --> 00:15:03,950
make a setup that XE file for for

00:15:00,170 --> 00:15:07,970
Windows most especially smaller packages

00:15:03,950 --> 00:15:09,410
don't tend to do this there it's pretty

00:15:07,970 --> 00:15:11,210
easy to build something from source

00:15:09,410 --> 00:15:12,950
especially now that we have especially

00:15:11,210 --> 00:15:14,839
not we have you know pip to do all the

00:15:12,950 --> 00:15:16,130
hard work for us so this is something

00:15:14,839 --> 00:15:17,960
that you generally do if your package

00:15:16,130 --> 00:15:20,450
has a lot of complicated dependencies or

00:15:17,960 --> 00:15:22,550
something else is involved whereby an

00:15:20,450 --> 00:15:26,780
RPM is more useful if you've tried to

00:15:22,550 --> 00:15:30,080
install say pill the python imaging

00:15:26,780 --> 00:15:33,290
library or or one of the XML parser is

00:15:30,080 --> 00:15:34,490
lsm I'll that depend on sea libraries

00:15:33,290 --> 00:15:35,810
being installed then something

00:15:34,490 --> 00:15:39,200
these other things look a lot more

00:15:35,810 --> 00:15:40,550
attractive but generally for pure python

00:15:39,200 --> 00:15:45,399
stuff that only has python-based

00:15:40,550 --> 00:15:47,839
dependencies s just upload this fine

00:15:45,399 --> 00:15:49,850
again remember to put upload after them

00:15:47,839 --> 00:15:51,860
in the same command or all you're going

00:15:49,850 --> 00:15:56,510
to do is get a nice binary distribution

00:15:51,860 --> 00:15:57,890
on your disk and nothing else we're

00:15:56,510 --> 00:15:59,870
basically done at this point but I want

00:15:57,890 --> 00:16:02,060
to make a couple of comments that have

00:15:59,870 --> 00:16:05,089
some sort of ancillary allu the

00:16:02,060 --> 00:16:07,190
ancillary relationship and then again

00:16:05,089 --> 00:16:09,589
will be dismissing the first is reusable

00:16:07,190 --> 00:16:11,510
code since we've gone over how to post

00:16:09,589 --> 00:16:14,899
reusable code this is a short storm on

00:16:11,510 --> 00:16:16,580
writing reusable code always remember

00:16:14,899 --> 00:16:18,589
that people using your software may not

00:16:16,580 --> 00:16:20,750
have the exact same use cases that you

00:16:18,589 --> 00:16:22,250
do I don't know if anyone went to

00:16:20,750 --> 00:16:25,700
raymond head on yours excellent talk

00:16:22,250 --> 00:16:29,140
yesterday on the art of subclassing but

00:16:25,700 --> 00:16:33,050
if you did he went over a whole lot of a

00:16:29,140 --> 00:16:35,600
whole lot of stuff about subclassing and

00:16:33,050 --> 00:16:36,709
went over this in great detail the idea

00:16:35,600 --> 00:16:38,779
that the way that you're using your

00:16:36,709 --> 00:16:40,010
class may not be the way that someone

00:16:38,779 --> 00:16:44,360
else is using your class and the

00:16:40,010 --> 00:16:46,040
instances have control so just a quick

00:16:44,360 --> 00:16:49,010
checklist of things to remember use

00:16:46,040 --> 00:16:52,760
options make it so that behavior can be

00:16:49,010 --> 00:16:54,079
customized support subclassing again

00:16:52,760 --> 00:16:55,880
I'll reference that talk if you didn't

00:16:54,079 --> 00:16:59,829
go to it the video will be up at some

00:16:55,880 --> 00:17:01,790
point and it's much better than this one

00:16:59,829 --> 00:17:03,380
consider writing methods that except a

00:17:01,790 --> 00:17:05,449
subclass as an optional argument if you

00:17:03,380 --> 00:17:07,970
went to my talk on meadow classing i

00:17:05,449 --> 00:17:09,860
touched on this very briefly that you

00:17:07,970 --> 00:17:14,480
can actually write functions that take

00:17:09,860 --> 00:17:17,230
classes and that can sometimes that is a

00:17:14,480 --> 00:17:20,150
great reusable toolbox mechanism for

00:17:17,230 --> 00:17:22,429
allowing someone else to patch in their

00:17:20,150 --> 00:17:24,170
own functionality and the bottom line

00:17:22,429 --> 00:17:27,260
think about general needs and not just

00:17:24,170 --> 00:17:29,600
your specific needs and don't forget

00:17:27,260 --> 00:17:32,809
about documentation or the Django pony

00:17:29,600 --> 00:17:36,950
will hunt you down one more quick rabbit

00:17:32,809 --> 00:17:39,559
trail before we go a friend of mine was

00:17:36,950 --> 00:17:41,690
going over my slides and said I would

00:17:39,559 --> 00:17:43,040
love for you to have a slide on this

00:17:41,690 --> 00:17:44,840
thing even though it's not completely

00:17:43,040 --> 00:17:46,810
related and I said well I'm going to be

00:17:44,840 --> 00:17:48,830
going under time so sure

00:17:46,810 --> 00:17:51,500
so it's unrelated but it's something

00:17:48,830 --> 00:17:53,740
that you'll want to know and it's being

00:17:51,500 --> 00:17:57,050
featured because it's new and exciting

00:17:53,740 --> 00:18:00,140
there's a problem with pi PI if anyone

00:17:57,050 --> 00:18:05,180
has ever used it and the problem is it

00:18:00,140 --> 00:18:06,800
goes down a lot really quite a lot it's

00:18:05,180 --> 00:18:09,470
not something where it's down fifty

00:18:06,800 --> 00:18:14,420
percent of the time but i will say that

00:18:09,470 --> 00:18:17,390
my ops guy who runs a e servers for our

00:18:14,420 --> 00:18:18,680
company he's constantly spinning up and

00:18:17,390 --> 00:18:20,360
deploying our code on new servers and

00:18:18,680 --> 00:18:22,070
there's nothing that sets him off more

00:18:20,360 --> 00:18:25,430
than when he tries to spin up a new

00:18:22,070 --> 00:18:28,490
server and pipe eyes down and he goes to

00:18:25,430 --> 00:18:31,730
you know run his chef script that that

00:18:28,490 --> 00:18:33,380
since that retrieves HTTP Live and

00:18:31,730 --> 00:18:35,390
dispatch and all these other things and

00:18:33,380 --> 00:18:37,400
and it's like no I'm not going to give

00:18:35,390 --> 00:18:39,170
you your code sorry Kyle why in fact

00:18:37,400 --> 00:18:43,880
that pretty much sense them into hulk

00:18:39,170 --> 00:18:45,080
smash mode there is someone working on

00:18:43,880 --> 00:18:46,460
this problem actually there are several

00:18:45,080 --> 00:18:48,500
people working on this problem but i'm

00:18:46,460 --> 00:18:50,810
only going to be identifying one and

00:18:48,500 --> 00:18:54,400
that's crate that I Oh Kurt on Io is a

00:18:50,810 --> 00:18:56,900
site that is a cache / mirror of pi PI

00:18:54,400 --> 00:19:00,500
it's compatible with pip you can

00:18:56,900 --> 00:19:03,380
configure pip to use it and really this

00:19:00,500 --> 00:19:05,720
is just a shameless plug and now that's

00:19:03,380 --> 00:19:08,630
shameless plug is complete and with that

00:19:05,720 --> 00:19:10,220
being said we are done if you're good to

00:19:08,630 --> 00:19:11,630
go feel free to head to break this was

00:19:10,220 --> 00:19:12,800
not particularly complicated if you have

00:19:11,630 --> 00:19:15,790
a question for me feel free to stick

00:19:12,800 --> 00:19:15,790
around thanks

00:19:22,160 --> 00:19:29,490
ready um one thing to note is that setup

00:19:25,890 --> 00:19:31,760
pi is going away in Python 3.3 it's

00:19:29,490 --> 00:19:35,820
going to be changed to set up config and

00:19:31,760 --> 00:19:38,700
so it won't be a runnable there's a lot

00:19:35,820 --> 00:19:40,260
of people putting other stuff in the

00:19:38,700 --> 00:19:42,030
South up I function that shouldn't be in

00:19:40,260 --> 00:19:44,490
there so they're changing it to that and

00:19:42,030 --> 00:19:50,310
then also dist utils to instead of this

00:19:44,490 --> 00:19:54,510
details will be natively included in in

00:19:50,310 --> 00:19:56,520
3.3 so to repeat what to repeat what he

00:19:54,510 --> 00:19:58,350
said for the recording and for posterity

00:19:56,520 --> 00:19:59,490
in general basically what he said is

00:19:58,350 --> 00:20:01,620
that a lot of this talk is actually

00:19:59,490 --> 00:20:04,550
going out of date python3 at three

00:20:01,620 --> 00:20:06,780
literally Python 303 is deprecating

00:20:04,550 --> 00:20:09,750
district tells one there's going to be a

00:20:06,780 --> 00:20:11,070
brand new spanking one and some people I

00:20:09,750 --> 00:20:14,940
will cease to be a Python file and

00:20:11,070 --> 00:20:19,470
become a configuration file that and yes

00:20:14,940 --> 00:20:22,140
thank you yeah I was wondering if there

00:20:19,470 --> 00:20:23,580
is any feedback mechanism so that if you

00:20:22,140 --> 00:20:25,350
submit something or put something out

00:20:23,580 --> 00:20:28,380
there that people will give you

00:20:25,350 --> 00:20:31,380
complaints or criticism or okay whatever

00:20:28,380 --> 00:20:33,230
you have unknowingly stepped on so you

00:20:31,380 --> 00:20:35,520
have unknown you stepped on a landmine

00:20:33,230 --> 00:20:37,290
to repeat the question for the tape

00:20:35,520 --> 00:20:39,150
basically what he asked is there a

00:20:37,290 --> 00:20:40,860
feedback mechanism on ipi is there

00:20:39,150 --> 00:20:42,480
something where if you submit code that

00:20:40,860 --> 00:20:43,980
sucks people can tell you that your code

00:20:42,480 --> 00:20:45,390
socks or if you commit submit code

00:20:43,980 --> 00:20:47,070
that's awesome people can tell you that

00:20:45,390 --> 00:20:49,830
your code is awesome the answer that

00:20:47,070 --> 00:20:53,160
question is no there actually was at one

00:20:49,830 --> 00:20:56,430
point a like I starring mechanism where

00:20:53,160 --> 00:20:59,550
you could rate on a scale of one to five

00:20:56,430 --> 00:21:03,570
stars various different packages it that

00:20:59,550 --> 00:21:06,390
mechanism has gone away as of two years

00:21:03,570 --> 00:21:08,160
ago ish and the reason is under astok

00:21:06,390 --> 00:21:10,710
under use and the fact that it wasn't

00:21:08,160 --> 00:21:13,290
really very valuable there's not a whole

00:21:10,710 --> 00:21:16,890
lot of value in sang in say giving

00:21:13,290 --> 00:21:20,550
Django five stars or giving someone

00:21:16,890 --> 00:21:22,560
else's package 1 star and it was very

00:21:20,550 --> 00:21:23,850
underused to put it in perspective the

00:21:22,560 --> 00:21:27,420
current version of Jenga which at the

00:21:23,850 --> 00:21:28,740
time of the system being removed had

00:21:27,420 --> 00:21:30,120
been around for you know the current

00:21:28,740 --> 00:21:31,710
version was eight months old in the

00:21:30,120 --> 00:21:33,149
project is probably be me

00:21:31,710 --> 00:21:35,250
was popular Python project and it's

00:21:33,149 --> 00:21:38,580
years and years and years old had 14

00:21:35,250 --> 00:21:42,690
rights so it was considered to be not

00:21:38,580 --> 00:21:44,700
useful a feedback system it's kind of

00:21:42,690 --> 00:21:46,080
being duplicated a lot of this a lot of

00:21:44,700 --> 00:21:47,809
the code is you know you can just go to

00:21:46,080 --> 00:21:50,250
their github page and do the same thing

00:21:47,809 --> 00:21:52,799
so the general idea is that that's

00:21:50,250 --> 00:21:55,380
better handled by bug trackers pi PI

00:21:52,799 --> 00:21:56,669
duplicating it to the extent tried it

00:21:55,380 --> 00:21:58,320
wasn't useful they talked about

00:21:56,669 --> 00:21:59,970
expanding it instead of eliminating it

00:21:58,320 --> 00:22:02,450
and the general feeling was it probably

00:21:59,970 --> 00:22:04,620
wouldn't be useful so they eliminated it

00:22:02,450 --> 00:22:06,390
so I've somehow managed to remain

00:22:04,620 --> 00:22:08,789
blissfully ignorant of all things

00:22:06,390 --> 00:22:10,919
packaging over the last few years and I

00:22:08,789 --> 00:22:14,399
was diving into an unmaintained open

00:22:10,919 --> 00:22:15,750
source project and found the egg info

00:22:14,399 --> 00:22:17,490
directory that gets generated was

00:22:15,750 --> 00:22:20,520
actually checked into source control is

00:22:17,490 --> 00:22:23,730
there ever a reason to check that in or

00:22:20,520 --> 00:22:27,140
is it always perfectly fine to let the

00:22:23,730 --> 00:22:29,700
installers generate that stuff I am

00:22:27,140 --> 00:22:33,480
you're a little bit above my pay grade I

00:22:29,700 --> 00:22:35,669
am 95 fish % sure that probably that

00:22:33,480 --> 00:22:37,200
should be in get ignore or or or not

00:22:35,669 --> 00:22:41,460
checked into source control and that's a

00:22:37,200 --> 00:22:43,200
mistake I wouldn't swear to it but no

00:22:41,460 --> 00:22:44,549
reasons are coming to mind like oh yeah

00:22:43,200 --> 00:22:46,260
here's the example where you would do

00:22:44,549 --> 00:22:48,630
this I nothing nothing's coming to mind

00:22:46,260 --> 00:22:52,770
so prob I think the answer is that you

00:22:48,630 --> 00:22:55,260
always ignore it so I don't know a lot

00:22:52,770 --> 00:22:56,700
about pi PI but I know a lot about Sipan

00:22:55,260 --> 00:22:58,980
which is the Pearl version of the same

00:22:56,700 --> 00:23:00,929
thing and in Sipan you can upload

00:22:58,980 --> 00:23:03,990
bundles which can include many modules

00:23:00,929 --> 00:23:08,720
which are like say the module

00:23:03,990 --> 00:23:11,789
corresponds to a package from Python and

00:23:08,720 --> 00:23:16,649
each module has its own version so it

00:23:11,789 --> 00:23:19,230
would be like each I guess as sufficient

00:23:16,649 --> 00:23:21,690
explanation so my question is um say

00:23:19,230 --> 00:23:24,539
you're uploading some Python package

00:23:21,690 --> 00:23:25,950
that contains other Python packages but

00:23:24,539 --> 00:23:28,260
only a few of them are getting a version

00:23:25,950 --> 00:23:32,309
bump is there a way to record that in

00:23:28,260 --> 00:23:35,159
your setup information so the so the

00:23:32,309 --> 00:23:37,649
question again repeating for the type in

00:23:35,159 --> 00:23:38,909
the like is what if you're posting

00:23:37,649 --> 00:23:41,279
something more complicated where you

00:23:38,909 --> 00:23:42,779
have three packages and you want to

00:23:41,279 --> 00:23:44,370
upload them at the same time I actually

00:23:42,779 --> 00:23:45,420
have a clarifying question so that I'm

00:23:44,370 --> 00:23:47,270
understanding are the

00:23:45,420 --> 00:23:49,650
is all packages that you are maintaining

00:23:47,270 --> 00:23:51,420
that are interdependent or are some of

00:23:49,650 --> 00:23:53,790
them other people's packages so they're

00:23:51,420 --> 00:23:55,140
all yours okay I guess actually I don't

00:23:53,790 --> 00:23:56,370
know why I asked that clarifier because

00:23:55,140 --> 00:23:59,850
the answer is the same either way though

00:23:56,370 --> 00:24:02,940
there is a dependencies notion where you

00:23:59,850 --> 00:24:06,830
could say package a depends on package B

00:24:02,940 --> 00:24:10,620
and package B has to be greater than 3.0

00:24:06,830 --> 00:24:12,720
and I'm uploading package a version 1.0

00:24:10,620 --> 00:24:15,120
that depends on package B 3.0 and the

00:24:12,720 --> 00:24:17,640
you upload package be you know wherever

00:24:15,120 --> 00:24:19,260
you are that's I think the way that

00:24:17,640 --> 00:24:21,180
that's generally done is is through

00:24:19,260 --> 00:24:24,380
dependencies and now you could

00:24:21,180 --> 00:24:26,820
absolutely have more than one package in

00:24:24,380 --> 00:24:30,300
more than one python module in your

00:24:26,820 --> 00:24:33,570
package if they really are a single

00:24:30,300 --> 00:24:36,330
self-contained unit no packages is

00:24:33,570 --> 00:24:37,770
specified as a list yeah i guess the

00:24:36,330 --> 00:24:39,690
place where it gets a little weird is

00:24:37,770 --> 00:24:42,000
say you have a package as many modules

00:24:39,690 --> 00:24:46,050
in it but someone might be using those

00:24:42,000 --> 00:24:49,050
modules individually you want to be make

00:24:46,050 --> 00:24:50,850
sure that they can get the specific

00:24:49,050 --> 00:24:54,000
version of that specific module that

00:24:50,850 --> 00:24:57,330
they want so do you like is there a way

00:24:54,000 --> 00:24:58,920
to put a version on each module that

00:24:57,330 --> 00:25:01,620
you're uploading within your package if

00:24:58,920 --> 00:25:03,690
you send them up separately yes and then

00:25:01,620 --> 00:25:05,160
you go and then you go into specifying

00:25:03,690 --> 00:25:07,470
that this package has a dependency on

00:25:05,160 --> 00:25:12,540
this other package if you do them at the

00:25:07,470 --> 00:25:14,460
same time now okay thanks sure hi I'm

00:25:12,540 --> 00:25:18,330
for code that does have C dependencies

00:25:14,460 --> 00:25:21,720
is the process related to this or is it

00:25:18,330 --> 00:25:24,270
totally different animal um you can post

00:25:21,720 --> 00:25:26,130
things with C dependencies on pi PI I

00:25:24,270 --> 00:25:28,170
had never done it and I've never

00:25:26,130 --> 00:25:30,300
research it so the short answer this

00:25:28,170 --> 00:25:34,650
question is I had no idea okay neither

00:25:30,300 --> 00:25:37,740
dies I'd like to point out that there

00:25:34,650 --> 00:25:41,220
actually is already a failover approach

00:25:37,740 --> 00:25:44,040
to the package index so if the master

00:25:41,220 --> 00:25:47,430
server fails you already have like 6 08

00:25:44,040 --> 00:25:50,340
morose that people can use of so the

00:25:47,430 --> 00:25:52,980
body is redundancy yeah so the statement

00:25:50,340 --> 00:25:54,660
is I I put a plug in here for for

00:25:52,980 --> 00:25:56,700
something with her friend asked me to to

00:25:54,660 --> 00:25:59,040
point out about crate and the statement

00:25:56,700 --> 00:26:01,410
for the tape is there really are

00:25:59,040 --> 00:26:05,070
quite a few of these that's not the

00:26:01,410 --> 00:26:07,680
first one somewhat tangential but pip

00:26:05,070 --> 00:26:09,840
verse easy install is there difference

00:26:07,680 --> 00:26:13,620
why does pip seem to be preferred which

00:26:09,840 --> 00:26:15,270
ones you use um so the question for the

00:26:13,620 --> 00:26:19,350
tape is the difference between pip

00:26:15,270 --> 00:26:20,790
versus easy install um I am not the

00:26:19,350 --> 00:26:23,040
person to be plentiful eating on this

00:26:20,790 --> 00:26:25,610
but going into a briefly piphus newer is

00:26:23,040 --> 00:26:28,410
the is the probably the big thing

00:26:25,610 --> 00:26:31,230
there's a few differences pips ability

00:26:28,410 --> 00:26:32,970
to handle uninstalling and upgrading is

00:26:31,230 --> 00:26:34,020
a little bit better uninstalling in

00:26:32,970 --> 00:26:35,880
particular you just can't do with these

00:26:34,020 --> 00:26:36,960
install if you easy install something

00:26:35,880 --> 00:26:40,320
and you want to get rid of it you have

00:26:36,960 --> 00:26:43,620
to go into yo user lib python to that

00:26:40,320 --> 00:26:44,850
seven or library / python / 27 / site

00:26:43,620 --> 00:26:46,530
packages are just package you have to

00:26:44,850 --> 00:26:47,580
find it in the directory tree which

00:26:46,530 --> 00:26:50,640
means you have to learn where it isn't

00:26:47,580 --> 00:26:53,480
and chunk it pip can pick and handle

00:26:50,640 --> 00:26:55,920
uninstalling is one of the reasons

00:26:53,480 --> 00:26:58,200
another another difference is it's a

00:26:55,920 --> 00:26:59,280
little bit better at upgrading an easy

00:26:58,200 --> 00:27:00,510
install you can actually have a

00:26:59,280 --> 00:27:02,250
situation where you have to remove your

00:27:00,510 --> 00:27:05,100
package too easy installed again to get

00:27:02,250 --> 00:27:09,360
an upgrade and pip active as mechanism

00:27:05,100 --> 00:27:12,060
for that the probably the big the the

00:27:09,360 --> 00:27:14,220
most compelling reason though why pip is

00:27:12,060 --> 00:27:17,160
preferred is because it plays nice with

00:27:14,220 --> 00:27:19,400
virgin lamp virtual and they're actually

00:27:17,160 --> 00:27:21,480
written by the by the same guy I'm

00:27:19,400 --> 00:27:23,520
multiple people have contributed but the

00:27:21,480 --> 00:27:26,730
guy behind hip in the guy behind virtual

00:27:23,520 --> 00:27:29,190
and Ian bicking is is the same guy and

00:27:26,730 --> 00:27:31,710
virtual imp is a tool that lets you

00:27:29,190 --> 00:27:33,750
basically set up sandbox python

00:27:31,710 --> 00:27:35,940
environments for development so if

00:27:33,750 --> 00:27:38,040
you're developing one piece of code that

00:27:35,940 --> 00:27:40,530
needs version 1.3 of something and

00:27:38,040 --> 00:27:42,570
another piece of code for a different

00:27:40,530 --> 00:27:46,830
job that needs version 1.5 of the same

00:27:42,570 --> 00:27:48,390
package you can manage that bye you know

00:27:46,830 --> 00:27:50,400
bouncing between your virtue limbs and

00:27:48,390 --> 00:27:53,970
and kind of keeping everything siphoned

00:27:50,400 --> 00:27:56,190
off and it also is a virtual image is

00:27:53,970 --> 00:27:58,170
well-loved again because it lets you

00:27:56,190 --> 00:28:00,060
kind of isolate your development in your

00:27:58,170 --> 00:28:02,070
production so if you're a type of guy

00:28:00,060 --> 00:28:03,720
who develops lots of different stuff you

00:28:02,070 --> 00:28:06,210
don't accidentally use a package and

00:28:03,720 --> 00:28:07,650
forget that that's just always installed

00:28:06,210 --> 00:28:09,150
on your drive and forget that you used

00:28:07,650 --> 00:28:10,380
it and then you know you send it up to

00:28:09,150 --> 00:28:11,559
production and everything breaks or

00:28:10,380 --> 00:28:14,080
something like that

00:28:11,559 --> 00:28:15,429
so so pit place very nice with virtual

00:28:14,080 --> 00:28:16,620
and virtual women sets things up you

00:28:15,429 --> 00:28:19,269
know kind of within your home directory

00:28:16,620 --> 00:28:20,830
and and sets up actually a different pip

00:28:19,269 --> 00:28:23,049
you can even use virtual him to add

00:28:20,830 --> 00:28:26,440
different versions of Python running

00:28:23,049 --> 00:28:28,450
running simultaneously at one other

00:28:26,440 --> 00:28:31,120
short question where do the trove

00:28:28,450 --> 00:28:32,679
classifiers come from and is anything

00:28:31,120 --> 00:28:34,690
actually using them or is it kind of

00:28:32,679 --> 00:28:38,259
metadata for the sake of metadata the

00:28:34,690 --> 00:28:39,580
external classifiers are I I'm not

00:28:38,259 --> 00:28:42,249
completely sure the answer that question

00:28:39,580 --> 00:28:43,929
I think that pi p on itself uses them so

00:28:42,249 --> 00:28:45,220
you can say like I want to only look at

00:28:43,929 --> 00:28:48,220
stuff that's a blur i want to only look

00:28:45,220 --> 00:28:49,899
at stuff that runs on linux so the exit

00:28:48,220 --> 00:28:59,110
search criteria beyond that I think

00:28:49,899 --> 00:29:00,850
they're there Croft oh okay so she so

00:28:59,110 --> 00:29:02,259
she made a great point I want to make

00:29:00,850 --> 00:29:04,299
sure I repeat it for the tape one of the

00:29:02,259 --> 00:29:05,379
things that that handles as well is it

00:29:04,299 --> 00:29:08,080
will tell you what version of Python you

00:29:05,379 --> 00:29:10,749
need so if a package only runs on Python

00:29:08,080 --> 00:29:13,299
version 2.6 and up or only runs on

00:29:10,749 --> 00:29:14,529
Python 3 that did that get stated there

00:29:13,299 --> 00:29:16,899
that's a really big deal right now

00:29:14,529 --> 00:29:18,460
especially because the Python 2 versus

00:29:16,899 --> 00:29:20,169
python3 distinction you know we're still

00:29:18,460 --> 00:29:21,399
running in parallel worlds and we're

00:29:20,169 --> 00:29:23,139
going to be running in parallel worlds

00:29:21,399 --> 00:29:26,590
for another couple of years so until

00:29:23,139 --> 00:29:28,809
Python 3 has completely subsumed Python

00:29:26,590 --> 00:29:36,530
to that distinction especially is going

00:29:28,809 --> 00:29:39,530
to be very very important thank you

00:29:36,530 --> 00:29:39,530

YouTube URL: https://www.youtube.com/watch?v=bwwf_HbEJQM


