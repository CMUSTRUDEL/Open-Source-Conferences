Title: Using fabric to standardize the development process
Publication date: 2012-04-29
Playlist: PyCon 2012
Description: 
	Ricardo Kirkner 
By ensuring consistency and repeatability in setting up the development environments of a team of developers, errors can be avoided (by automating repetitive tasks). It also helps by lowering the entry barrier for new developers, and
Captions: 
	00:00:00,000 --> 00:00:04,430
speaker is Ricardo Kirk nerd it's gonna

00:00:01,589 --> 00:00:13,500
talk to us about fabric take it away

00:00:04,430 --> 00:00:15,780
okay well thank you everybody I'm gonna

00:00:13,500 --> 00:00:18,840
speak about fabric and how to use it to

00:00:15,780 --> 00:00:22,140
standardize the development process this

00:00:18,840 --> 00:00:25,710
is about me just very briefly you don't

00:00:22,140 --> 00:00:28,590
want Bob bother you and boredom I just

00:00:25,710 --> 00:00:31,320
working with Python since 2004 and

00:00:28,590 --> 00:00:34,200
currently employed at canonical doing

00:00:31,320 --> 00:00:35,850
Python all day which is fantastic my

00:00:34,200 --> 00:00:37,290
background is a bit of system

00:00:35,850 --> 00:00:40,590
administration machine learning web

00:00:37,290 --> 00:00:43,860
development so just everything else a

00:00:40,590 --> 00:00:47,399
bit I'm gonna talk about fabric and what

00:00:43,860 --> 00:00:51,020
is fabric why we chose to use fabric and

00:00:47,399 --> 00:00:53,489
how we use it for the development cycle

00:00:51,020 --> 00:00:55,410
so let's get on with this

00:00:53,489 --> 00:00:58,969
what is fabric according to its

00:00:55,410 --> 00:01:01,500
definition it's a Python library and

00:00:58,969 --> 00:01:04,430
command-line tool for streamlining they

00:01:01,500 --> 00:01:07,860
use a sage for application deployment or

00:01:04,430 --> 00:01:11,540
system administration tasks so this

00:01:07,860 --> 00:01:16,049
definition is evidently extremely clear

00:01:11,540 --> 00:01:16,740
so let's go a bit into that and what it

00:01:16,049 --> 00:01:20,369
is exactly

00:01:16,740 --> 00:01:22,020
so the basic naive approach is as we can

00:01:20,369 --> 00:01:24,240
see let's say we want to know the

00:01:22,020 --> 00:01:27,840
current version of a remote host so we

00:01:24,240 --> 00:01:29,670
as aged into it and we use unikom and

00:01:27,840 --> 00:01:31,950
then we read back the results and

00:01:29,670 --> 00:01:35,670
effectively we're streamlining the use

00:01:31,950 --> 00:01:38,310
of SSH blah blah blah but this is not

00:01:35,670 --> 00:01:40,680
fabric right this is playing Python so

00:01:38,310 --> 00:01:45,420
let's see how we can use fabric as a

00:01:40,680 --> 00:01:47,729
library very basic fabric here we have a

00:01:45,420 --> 00:01:50,670
command called run which will run a

00:01:47,729 --> 00:01:52,950
command anything we tell it to on some

00:01:50,670 --> 00:01:56,490
remote server which we can see we're

00:01:52,950 --> 00:01:58,560
setting up in a specific way but this is

00:01:56,490 --> 00:02:00,270
not the best way to use fabric the best

00:01:58,560 --> 00:02:00,930
ways to use it actually is a current

00:02:00,270 --> 00:02:05,820
line tool

00:02:00,930 --> 00:02:09,899
so we'll see we define a function which

00:02:05,820 --> 00:02:12,090
does this magic run command and we can

00:02:09,899 --> 00:02:14,310
invoke that function over the common

00:02:12,090 --> 00:02:16,290
line specifying the search

00:02:14,310 --> 00:02:21,120
we want to connect - what kind of stuff

00:02:16,290 --> 00:02:23,489
- to execute there if you call fap - L

00:02:21,120 --> 00:02:25,319
it lists all the different commands you

00:02:23,489 --> 00:02:29,010
have available to run on different

00:02:25,319 --> 00:02:32,069
servers so this is proper fabric so to

00:02:29,010 --> 00:02:33,870
speak a bit old-fashioned because fabric

00:02:32,069 --> 00:02:38,069
changed a lot lately but it doesn't

00:02:33,870 --> 00:02:40,620
matter for my talk so let's move on why

00:02:38,069 --> 00:02:43,980
do we use fabric why do I chose to use

00:02:40,620 --> 00:02:47,600
fabric and not I don't know build out

00:02:43,980 --> 00:02:49,950
make and scones whatever you like

00:02:47,600 --> 00:02:52,400
because I'm talking here about the

00:02:49,950 --> 00:02:55,410
development cycle and not about

00:02:52,400 --> 00:02:58,500
deploying stuff to service which is what

00:02:55,410 --> 00:03:05,150
fabric is really really about so the

00:02:58,500 --> 00:03:08,940
reasons why I chose fabric basically -

00:03:05,150 --> 00:03:13,410
this is not me getting to glory or

00:03:08,940 --> 00:03:15,209
something but basically laziness fabric

00:03:13,410 --> 00:03:16,560
is Python I know Python I don't know

00:03:15,209 --> 00:03:20,310
make I don't know scones

00:03:16,560 --> 00:03:22,109
I don't know aunt and I don't know don't

00:03:20,310 --> 00:03:25,190
want to learn something else for a task

00:03:22,109 --> 00:03:28,910
which can be easily achieved with Python

00:03:25,190 --> 00:03:31,140
the second reason why we chose fabric is

00:03:28,910 --> 00:03:36,420
legacy if you will because we already

00:03:31,140 --> 00:03:39,780
had a library for doing deployments -

00:03:36,420 --> 00:03:41,510
Amazon ec2 and that library was using

00:03:39,780 --> 00:03:45,150
fabric because it's used for deployments

00:03:41,510 --> 00:03:49,019
so we thought ok we could have that for

00:03:45,150 --> 00:03:51,750
deployments and Bill out for development

00:03:49,019 --> 00:03:57,359
whatever let's just use the same tool so

00:03:51,750 --> 00:03:59,430
again it's a bit of laziness so that's

00:03:57,359 --> 00:04:03,049
all I'm going to tell you about fabric

00:03:59,430 --> 00:04:06,150
itself and I think I'm going quick quick

00:04:03,049 --> 00:04:10,980
because this is basically the half way

00:04:06,150 --> 00:04:14,489
of my talk so let's see how we use

00:04:10,980 --> 00:04:16,350
fabric for the development cycle what

00:04:14,489 --> 00:04:18,030
kind of stuff do you want you can't do

00:04:16,350 --> 00:04:19,680
it fabric you can boost up your

00:04:18,030 --> 00:04:22,500
development environment you can manage

00:04:19,680 --> 00:04:25,140
your database run your tasks build

00:04:22,500 --> 00:04:26,729
binary packages install them configure

00:04:25,140 --> 00:04:27,960
services managed services deploy

00:04:26,729 --> 00:04:29,490
rollback

00:04:27,960 --> 00:04:31,979
anything you can do on the comment line

00:04:29,490 --> 00:04:33,750
you can do with cut fabric because it's

00:04:31,979 --> 00:04:37,229
intended to streamline the use of the

00:04:33,750 --> 00:04:39,389
comment line so let's see a few examples

00:04:37,229 --> 00:04:43,740
here that this the rest of the talk is

00:04:39,389 --> 00:04:46,340
just examples I hope I won't bore you

00:04:43,740 --> 00:04:49,500
bootstrapping your development cycle

00:04:46,340 --> 00:04:51,150
first of all let me backtrack a bit why

00:04:49,500 --> 00:04:53,069
do we want to standardize the

00:04:51,150 --> 00:04:56,400
development cycle basically if you have

00:04:53,069 --> 00:04:58,410
a team of developers everyone has to do

00:04:56,400 --> 00:05:01,080
the same step everyone has to have the

00:04:58,410 --> 00:05:04,470
system configure the same way so you can

00:05:01,080 --> 00:05:06,840
reduce the differences between the

00:05:04,470 --> 00:05:08,849
systems and improve all the quality of

00:05:06,840 --> 00:05:10,590
the stuff your you're doing so boots

00:05:08,849 --> 00:05:13,050
strumming is the first step where you

00:05:10,590 --> 00:05:16,110
want to have consistency so we want to

00:05:13,050 --> 00:05:17,699
do some sanity checks and then we want

00:05:16,110 --> 00:05:21,240
to install all the dependencies set up

00:05:17,699 --> 00:05:24,599
database etc so a typical bootstrapping

00:05:21,240 --> 00:05:28,130
is about these four steps which we can

00:05:24,599 --> 00:05:30,509
see or just doing some sanity checks

00:05:28,130 --> 00:05:33,180
doesn't matter now what those are and

00:05:30,509 --> 00:05:35,280
then we're setting up a virtual arm so

00:05:33,180 --> 00:05:37,620
we can install the dependencies there is

00:05:35,280 --> 00:05:39,449
we install the dependencies and then we

00:05:37,620 --> 00:05:45,479
set up some configuration we set up some

00:05:39,449 --> 00:05:48,690
other stuff so before we go into details

00:05:45,479 --> 00:05:50,880
how this is actually implemented the

00:05:48,690 --> 00:05:52,800
nice thing about this is when you have

00:05:50,880 --> 00:05:55,500
this your developer or anything any

00:05:52,800 --> 00:05:58,530
contributor you you have just has to do

00:05:55,500 --> 00:06:01,430
a bootstrap and everything magically is

00:05:58,530 --> 00:06:04,349
set up configured and and prepared for

00:06:01,430 --> 00:06:08,430
starting development starting demoing

00:06:04,349 --> 00:06:12,330
whatever you want so I just want to

00:06:08,430 --> 00:06:14,250
share a few nice things about this so in

00:06:12,330 --> 00:06:16,139
order to set up a virtual ins we have

00:06:14,250 --> 00:06:19,110
fabric here we have a basic Python

00:06:16,139 --> 00:06:20,759
function which well it will detect

00:06:19,110 --> 00:06:23,159
whether you're already in a virtual arm

00:06:20,759 --> 00:06:25,159
for not created but just activated or if

00:06:23,159 --> 00:06:28,349
you're not it will create a virtual arm

00:06:25,159 --> 00:06:32,400
and so on and activated so with this

00:06:28,349 --> 00:06:34,740
function we're not in a virtual ombrÃ© we

00:06:32,400 --> 00:06:36,930
safe at bootstrap and it will create one

00:06:34,740 --> 00:06:40,830
activated behind the scenes and the next

00:06:36,930 --> 00:06:41,710
in command will just be run in a virtual

00:06:40,830 --> 00:06:43,389
earth

00:06:41,710 --> 00:06:46,500
so you don't have to do this manually it

00:06:43,389 --> 00:06:50,650
just is done by you for you by fabric

00:06:46,500 --> 00:06:53,410
the activation is actually the way it's

00:06:50,650 --> 00:06:56,500
recommended in version to do so you just

00:06:53,410 --> 00:06:59,440
exit this Python file and you suddenly

00:06:56,500 --> 00:07:01,360
your processes within the virtual amp so

00:06:59,440 --> 00:07:03,610
you don't have to do anything else

00:07:01,360 --> 00:07:07,539
creating a virtual arm is just as easy

00:07:03,610 --> 00:07:09,880
as as invoking this local command which

00:07:07,539 --> 00:07:12,820
will run that command in your local

00:07:09,880 --> 00:07:14,020
shell in your local process which is the

00:07:12,820 --> 00:07:15,729
the way you usually do it

00:07:14,020 --> 00:07:18,490
on the command line so as you can see

00:07:15,729 --> 00:07:20,800
it's fairly a one-to-one mapping between

00:07:18,490 --> 00:07:22,090
what you do and in the command line and

00:07:20,800 --> 00:07:25,599
what you write in your and your fabric

00:07:22,090 --> 00:07:27,310
function so let's see other stuff

00:07:25,599 --> 00:07:30,669
install the dependencies the same we

00:07:27,310 --> 00:07:33,789
just run a command saying pip install

00:07:30,669 --> 00:07:36,310
requirements and then in this case we do

00:07:33,789 --> 00:07:39,039
setup develop so we get all the rest of

00:07:36,310 --> 00:07:41,919
the premises and what what else and and

00:07:39,039 --> 00:07:44,500
the second function is I think maybe the

00:07:41,919 --> 00:07:46,479
nicest gives that function so in fabric

00:07:44,500 --> 00:07:48,760
you have a function called local which

00:07:46,479 --> 00:07:51,520
will run your command and your local

00:07:48,760 --> 00:07:54,699
machine versus run which will run it in

00:07:51,520 --> 00:07:55,810
your remote machine but local works this

00:07:54,699 --> 00:07:57,880
is some level so it doesn't know

00:07:55,810 --> 00:07:59,650
anything about your virtual so a version

00:07:57,880 --> 00:08:02,740
of local is a function which will

00:07:59,650 --> 00:08:05,680
prepend the activation command so there

00:08:02,740 --> 00:08:08,620
anything you run with afterwards will be

00:08:05,680 --> 00:08:10,810
run in the virtual earth so in our use

00:08:08,620 --> 00:08:12,970
case we don't use local most of the time

00:08:10,810 --> 00:08:14,680
would use version of local which is this

00:08:12,970 --> 00:08:16,690
function which will activate diverse

00:08:14,680 --> 00:08:19,060
homes and then run the command that way

00:08:16,690 --> 00:08:24,130
everything all the dependencies are

00:08:19,060 --> 00:08:26,680
detected etc so that's about bootstrap I

00:08:24,130 --> 00:08:29,289
mean I just run bootstrap it's like the

00:08:26,680 --> 00:08:30,780
equivalent of make and it's set up all

00:08:29,289 --> 00:08:33,279
the dependences in a virtual and

00:08:30,780 --> 00:08:35,140
prepared the configuration files which I

00:08:33,279 --> 00:08:38,289
didn't show doesn't matter and you're

00:08:35,140 --> 00:08:39,729
already ready to go so the next step you

00:08:38,289 --> 00:08:43,110
usually have to do is setting up a

00:08:39,729 --> 00:08:45,520
database connecting to it starting it

00:08:43,110 --> 00:08:47,829
syncing it in the case we're using Jiang

00:08:45,520 --> 00:08:52,660
what works so you need to just think to

00:08:47,829 --> 00:08:55,300
be migrated whatever this is a nice

00:08:52,660 --> 00:08:59,649
trick for example we're setting up

00:08:55,300 --> 00:09:02,519
first server which by some magic means

00:08:59,649 --> 00:09:05,649
will gathers the configuration of where

00:09:02,519 --> 00:09:10,029
what credentials use were to connect to

00:09:05,649 --> 00:09:12,490
etcetera and then we create a phosphorus

00:09:10,029 --> 00:09:14,950
server instance in that location or we

00:09:12,490 --> 00:09:17,610
connect in this case this is used so

00:09:14,950 --> 00:09:20,470
that you can't create standalone server

00:09:17,610 --> 00:09:23,260
inside your branch so it doesn't depend

00:09:20,470 --> 00:09:24,940
on a system server or you could have

00:09:23,260 --> 00:09:26,980
different branches working at the same

00:09:24,940 --> 00:09:29,200
time with different servers different

00:09:26,980 --> 00:09:31,630
credentials so this is like a local

00:09:29,200 --> 00:09:34,870
server and it's quite nice because if if

00:09:31,630 --> 00:09:37,450
you start your server on on shared

00:09:34,870 --> 00:09:40,779
memory for example the tests run much

00:09:37,450 --> 00:09:42,820
much faster so this is basically just

00:09:40,779 --> 00:09:45,700
create the server start the database

00:09:42,820 --> 00:09:47,920
which starts the server and setup the

00:09:45,700 --> 00:09:50,230
database which will do this sync DB and

00:09:47,920 --> 00:09:52,209
so on we have the equivalents shutdown

00:09:50,230 --> 00:09:53,620
which will drop the debit database stop

00:09:52,209 --> 00:09:57,269
server and remove everything we've

00:09:53,620 --> 00:10:00,940
created so we don't leave trash behind

00:09:57,269 --> 00:10:02,529
on a well we can see a few more things

00:10:00,940 --> 00:10:05,170
here start the database just invoke some

00:10:02,529 --> 00:10:07,750
phosphorus command set up the database

00:10:05,170 --> 00:10:09,670
that's more interesting because we'll

00:10:07,750 --> 00:10:11,260
check if the database already exists if

00:10:09,670 --> 00:10:13,839
not we'll create it

00:10:11,260 --> 00:10:16,329
I'm cradle sorry create all the roles

00:10:13,839 --> 00:10:18,220
that you need to access it and finalize

00:10:16,329 --> 00:10:24,820
think that it be so it's ready for four

00:10:18,220 --> 00:10:27,190
years well create DB runs the paschal

00:10:24,820 --> 00:10:31,020
screed DB command as you can see it in

00:10:27,190 --> 00:10:34,690
this case we have these end and bin

00:10:31,020 --> 00:10:37,750
variables and database which will which

00:10:34,690 --> 00:10:39,430
get created by the set bosphorus

00:10:37,750 --> 00:10:40,779
environment which in turn I'm not

00:10:39,430 --> 00:10:43,870
sharing in this because it's detail

00:10:40,779 --> 00:10:47,110
really but in terms that function will

00:10:43,870 --> 00:10:48,459
grab the settings from Django so you

00:10:47,110 --> 00:10:51,070
just have to configure your credentials

00:10:48,459 --> 00:10:54,940
once and everything magically uses those

00:10:51,070 --> 00:10:57,579
so it will create the database make sure

00:10:54,940 --> 00:11:00,730
your credentials you're going to use are

00:10:57,579 --> 00:11:03,490
allowed to access all the things you

00:11:00,730 --> 00:11:04,810
need and login Inge with those

00:11:03,490 --> 00:11:06,200
credentials you don't have to repeat

00:11:04,810 --> 00:11:09,110
that

00:11:06,200 --> 00:11:13,430
let's move on development that's the

00:11:09,110 --> 00:11:14,930
main part of of why we use this so you

00:11:13,430 --> 00:11:17,690
usually want to run a development server

00:11:14,930 --> 00:11:20,389
in case of Jango you want to do some

00:11:17,690 --> 00:11:22,190
debt database maintenance and you want

00:11:20,389 --> 00:11:25,490
to run your tests that's basically what

00:11:22,190 --> 00:11:28,639
you want to do so let's look at how you

00:11:25,490 --> 00:11:31,040
can do that's what fabric so we define a

00:11:28,639 --> 00:11:32,329
managed command which is a helper

00:11:31,040 --> 00:11:34,639
because it's it's really convenient

00:11:32,329 --> 00:11:37,310
which runs the the Django

00:11:34,639 --> 00:11:40,339
managed the pie passing in any any

00:11:37,310 --> 00:11:42,230
arguments so as we can see running a

00:11:40,339 --> 00:11:44,149
server is just calling manage run server

00:11:42,230 --> 00:11:46,760
as you would do in the common line you

00:11:44,149 --> 00:11:48,649
do in fabric which a function reset DB

00:11:46,760 --> 00:11:51,170
is a bit more evolved but it basically

00:11:48,649 --> 00:11:53,269
drops whatever you have created again

00:11:51,170 --> 00:11:56,779
things to be again so you're on a clean

00:11:53,269 --> 00:11:58,610
slate and test is in this case I've

00:11:56,779 --> 00:12:00,769
trimmed down it's basically just running

00:11:58,610 --> 00:12:02,540
Manish it's by test but you can do

00:12:00,769 --> 00:12:05,620
anything you want you can load fixtures

00:12:02,540 --> 00:12:07,790
you can do conditional testing basins

00:12:05,620 --> 00:12:09,589
test case selection I mean this is a

00:12:07,790 --> 00:12:14,000
Python function you can do whatever you

00:12:09,589 --> 00:12:18,260
want so how you use this basically fab

00:12:14,000 --> 00:12:21,290
bootstrap fab setup database fab run

00:12:18,260 --> 00:12:24,320
test it's quite I mean it's it's really

00:12:21,290 --> 00:12:25,970
easy another thing you want to do

00:12:24,320 --> 00:12:28,100
usually during the development cycle is

00:12:25,970 --> 00:12:30,980
some kind of continuous integration in

00:12:28,100 --> 00:12:33,980
this case we are using Jenkins and to

00:12:30,980 --> 00:12:35,899
make things easier or what you usually

00:12:33,980 --> 00:12:38,779
do in continuous integration you have to

00:12:35,899 --> 00:12:41,269
bootstrap the environment set it up run

00:12:38,779 --> 00:12:44,810
the test gather metrics and we're using

00:12:41,269 --> 00:12:47,180
a project called Django Jenkins

00:12:44,810 --> 00:12:49,519
so it's trivial we have a function

00:12:47,180 --> 00:12:52,730
called Jenkins which bootstrap results

00:12:49,519 --> 00:12:54,440
to be loads some fixtures and runs the

00:12:52,730 --> 00:12:57,920
tests and gathers metrics that's that's

00:12:54,440 --> 00:12:59,959
done by Django Jenkins and in Jenkins

00:12:57,920 --> 00:13:02,240
the only thing we have to do to have

00:12:59,959 --> 00:13:07,370
this continuous integration is run SAP

00:13:02,240 --> 00:13:10,760
Jenkins that's all to it and finally

00:13:07,370 --> 00:13:13,220
well deployment this is originally talk

00:13:10,760 --> 00:13:15,800
is about the development cycle not

00:13:13,220 --> 00:13:17,480
deployment so I don't really want to

00:13:15,800 --> 00:13:19,380
talk about this because this is the way

00:13:17,480 --> 00:13:21,210
you usually use fabric

00:13:19,380 --> 00:13:24,200
well I wanted to share something else

00:13:21,210 --> 00:13:27,180
but let's go into it because I have time

00:13:24,200 --> 00:13:29,550
when you deploy you have to push your

00:13:27,180 --> 00:13:33,660
code to some server prepare the server

00:13:29,550 --> 00:13:36,090
to run your code whatever in our case we

00:13:33,660 --> 00:13:38,820
are deploying at that time at least we

00:13:36,090 --> 00:13:40,350
were deploying using binary packages so

00:13:38,820 --> 00:13:42,720
our deployment script has to create

00:13:40,350 --> 00:13:45,080
those binary packages so let's see how

00:13:42,720 --> 00:13:45,080
it's done

00:13:45,240 --> 00:13:49,800
you have deploy script which is a Python

00:13:48,300 --> 00:13:52,230
function again I want to stress this

00:13:49,800 --> 00:13:55,890
enough because it's Python we all know

00:13:52,230 --> 00:13:57,990
it it's easy so what does the flow

00:13:55,890 --> 00:14:00,150
consists in we create a source package

00:13:57,990 --> 00:14:02,640
from our from our branch for any

00:14:00,150 --> 00:14:04,860
distress here is lucid maverick Nadi

00:14:02,640 --> 00:14:06,690
coronary or whatever

00:14:04,860 --> 00:14:09,480
then you have to create your binary

00:14:06,690 --> 00:14:11,010
package from that so it's you can read

00:14:09,480 --> 00:14:13,530
it yourself I mean it's it's quite

00:14:11,010 --> 00:14:17,190
simple because a you can name your

00:14:13,530 --> 00:14:18,750
functions any way you want so we create

00:14:17,190 --> 00:14:20,520
the binaries we migrate the database

00:14:18,750 --> 00:14:23,250
with all the binaries we update convicts

00:14:20,520 --> 00:14:25,500
run some checks before we commit to

00:14:23,250 --> 00:14:27,360
deployment and we started services and

00:14:25,500 --> 00:14:29,550
magically everything is deployed so in

00:14:27,360 --> 00:14:32,670
this case deploying your your server

00:14:29,550 --> 00:14:37,010
your app is fab deploy and some options

00:14:32,670 --> 00:14:40,590
to say where and do some cleanup later

00:14:37,010 --> 00:14:42,900
or have more details about how this is

00:14:40,590 --> 00:14:45,660
done so building a source package is

00:14:42,900 --> 00:14:48,270
running a command which in this case is

00:14:45,660 --> 00:14:50,340
we're using bazaars a version control

00:14:48,270 --> 00:14:52,140
system and has a plugin which called

00:14:50,340 --> 00:14:54,600
daily dip you deposit a branch and

00:14:52,140 --> 00:14:59,820
creates the necessary method metadata

00:14:54,600 --> 00:15:02,280
for building a debian package then using

00:14:59,820 --> 00:15:05,970
that metadata you create the debian

00:15:02,280 --> 00:15:07,320
package using p builder so it's

00:15:05,970 --> 00:15:09,660
everything as you can see here you have

00:15:07,320 --> 00:15:13,440
a local function which runs locally on

00:15:09,660 --> 00:15:15,180
your development box us and this is not

00:15:13,440 --> 00:15:16,920
using the virtual because we don't care

00:15:15,180 --> 00:15:20,250
the virtual and for building a package

00:15:16,920 --> 00:15:22,110
that should be a system level installing

00:15:20,250 --> 00:15:25,890
the binary package is just putting that

00:15:22,110 --> 00:15:27,690
Debian file onto the server and then

00:15:25,890 --> 00:15:29,010
running the package and installing that

00:15:27,690 --> 00:15:31,910
Debian file

00:15:29,010 --> 00:15:34,260
setup this configuration branch is I

00:15:31,910 --> 00:15:36,750
it's not important really you just push

00:15:34,260 --> 00:15:39,720
a branch do some symlink Inge do some

00:15:36,750 --> 00:15:43,139
backing app you can get this from the

00:15:39,720 --> 00:15:45,510
slides later migrating the debate

00:15:43,139 --> 00:15:47,430
database is essentially just this in

00:15:45,510 --> 00:15:50,370
this case we're using run which runs

00:15:47,430 --> 00:15:53,269
this command managed to PI sync DB on

00:15:50,370 --> 00:15:55,889
the remote server notice we can't use

00:15:53,269 --> 00:15:58,769
manage the function because the function

00:15:55,889 --> 00:16:00,480
we defined previously is intended to be

00:15:58,769 --> 00:16:03,209
run locally and we don't have fabric on

00:16:00,480 --> 00:16:07,260
the room remote server so we have to do

00:16:03,209 --> 00:16:09,510
be explicit about path and so on you

00:16:07,260 --> 00:16:12,720
could include here my South migrations

00:16:09,510 --> 00:16:15,060
nashvegas whatever use the prefetch X

00:16:12,720 --> 00:16:17,370
we're using a django app called django

00:16:15,060 --> 00:16:19,440
pre-flight which is basically you run it

00:16:17,370 --> 00:16:21,720
it does some checks which you can code

00:16:19,440 --> 00:16:24,209
as Python functions and if everything is

00:16:21,720 --> 00:16:27,750
green you're good to go everything you

00:16:24,209 --> 00:16:29,490
can check database access cache access

00:16:27,750 --> 00:16:31,440
file system access whatever you want

00:16:29,490 --> 00:16:34,190
it's you coded it's a few Python

00:16:31,440 --> 00:16:37,050
functions and then we finally do sudo

00:16:34,190 --> 00:16:39,540
you fabric allows you to invoke a

00:16:37,050 --> 00:16:42,690
command that's rude so we restored up

00:16:39,540 --> 00:16:47,850
our team and we're live that's basically

00:16:42,690 --> 00:16:50,180
the deployment script so that's it any

00:16:47,850 --> 00:16:50,180
questions

00:17:03,079 --> 00:17:06,410
yeah okay

00:17:06,639 --> 00:17:14,209
thank you for the presentation I'm

00:17:11,480 --> 00:17:18,529
working as a Python developer and also a

00:17:14,209 --> 00:17:21,439
configuration manager so fabrics is very

00:17:18,529 --> 00:17:24,079
interesting for me my question is is it

00:17:21,439 --> 00:17:26,000
that I am able to install pretty much in

00:17:24,079 --> 00:17:30,860
configure pretty much everything with

00:17:26,000 --> 00:17:33,710
fabric like Oracle well so the question

00:17:30,860 --> 00:17:36,289
is if they got to write if you can

00:17:33,710 --> 00:17:39,470
install anything with fabric like for

00:17:36,289 --> 00:17:41,509
example Oracle and the answer is if you

00:17:39,470 --> 00:17:43,940
can do it in a terminal i console you

00:17:41,509 --> 00:17:45,500
can do it with fabric because the only

00:17:43,940 --> 00:17:48,080
thing you would be doing in fabric is

00:17:45,500 --> 00:17:54,250
wrapping that command as a Python

00:17:48,080 --> 00:17:54,250
function okay so yes perfect thank you

00:17:57,340 --> 00:18:03,160
I have a one question and one comment

00:17:59,830 --> 00:18:04,870
the comment is be wary of using print in

00:18:03,160 --> 00:18:07,270
these methods when you start writing

00:18:04,870 --> 00:18:10,080
fabric when you get to the point of

00:18:07,270 --> 00:18:11,920
scale and you have your your fabric

00:18:10,080 --> 00:18:13,330
orchestration layer running on some

00:18:11,920 --> 00:18:14,410
machine automatically and you're using

00:18:13,330 --> 00:18:16,330
print if you're not capturing

00:18:14,410 --> 00:18:17,650
standardout you're screwed

00:18:16,330 --> 00:18:20,230
we've gone through and replaced all of

00:18:17,650 --> 00:18:21,640
our prints with logger so now anytime in

00:18:20,230 --> 00:18:24,220
fabric we tell ourselves we're doing

00:18:21,640 --> 00:18:25,960
something in addition to logging ssh

00:18:24,220 --> 00:18:28,240
output from fabric we're also logging

00:18:25,960 --> 00:18:30,400
whatever whatever statements were making

00:18:28,240 --> 00:18:31,840
in fabric the second question is a lot

00:18:30,400 --> 00:18:34,270
of your examples look like they're based

00:18:31,840 --> 00:18:36,880
on one one one two can you explain the

00:18:34,270 --> 00:18:37,960
difference we would experience moving to

00:18:36,880 --> 00:18:43,900
one three if you know what the

00:18:37,960 --> 00:18:45,940
difference is right so thank you for the

00:18:43,900 --> 00:18:47,920
comment I mean one of the things we

00:18:45,940 --> 00:18:51,760
experience with fabric is when things go

00:18:47,920 --> 00:18:54,580
wrong because they do it's hard to tell

00:18:51,760 --> 00:18:56,080
why you have to manually run the command

00:18:54,580 --> 00:18:57,820
that fabric was running unless you log

00:18:56,080 --> 00:19:01,120
it's like suggested which is a nice

00:18:57,820 --> 00:19:03,600
suggestion thank you so and the other

00:19:01,120 --> 00:19:08,560
difference is this is old fabric style

00:19:03,600 --> 00:19:11,800
this is actually 31.0 or roughly went

00:19:08,560 --> 00:19:15,100
from zero and a lot has changed in this

00:19:11,800 --> 00:19:17,320
style fabric we'll take any top level

00:19:15,100 --> 00:19:21,220
function you use and expose it as a task

00:19:17,320 --> 00:19:22,960
for you to run as we saw if you run -

00:19:21,220 --> 00:19:25,840
owl you get a list of tasks you can

00:19:22,960 --> 00:19:27,910
execute in in the newer fabric versions

00:19:25,840 --> 00:19:30,160
they have a few improvements which are

00:19:27,910 --> 00:19:32,260
quite nice if your deck you decorate

00:19:30,160 --> 00:19:33,730
your functions with a task decorator and

00:19:32,260 --> 00:19:36,790
only those decorative functions get

00:19:33,730 --> 00:19:38,230
exposed so you have much less noise on

00:19:36,790 --> 00:19:39,880
the command line so you just see what

00:19:38,230 --> 00:19:42,250
you want you won't see and you're not

00:19:39,880 --> 00:19:45,220
forced to make private functions so that

00:19:42,250 --> 00:19:50,620
they're not exposed another very nice

00:19:45,220 --> 00:19:54,340
feature is those tasks so if you deploy

00:19:50,620 --> 00:19:56,140
in the old fabric you specify five

00:19:54,340 --> 00:19:58,090
servers they get deployed serially but

00:19:56,140 --> 00:20:04,360
if in the new fabric you can deploy them

00:19:58,090 --> 00:20:06,280
in parallel which is quite nice just a

00:20:04,360 --> 00:20:10,980
comment can you go back to the slide

00:20:06,280 --> 00:20:10,980
where they activate via toe lamp sure is

00:20:12,220 --> 00:20:17,869
because I'm I worked also with I also

00:20:15,619 --> 00:20:20,629
needed to create vehicle Enzo activate

00:20:17,869 --> 00:20:22,249
them and all that scrip does is to

00:20:20,629 --> 00:20:26,149
change the past

00:20:22,249 --> 00:20:28,190
luckily is to just OS environment so you

00:20:26,149 --> 00:20:31,399
can accomplish the same thing just

00:20:28,190 --> 00:20:35,590
calling the PIP installer with the path

00:20:31,399 --> 00:20:38,869
of the with the absolute path and yeah

00:20:35,590 --> 00:20:39,440
ok yeah because that's what I'm doing at

00:20:38,869 --> 00:20:42,470
the moment

00:20:39,440 --> 00:20:45,169
I just find out where this that if it

00:20:42,470 --> 00:20:47,389
exists and then I spawn my Python

00:20:45,169 --> 00:20:51,320
process within with the virtual

00:20:47,389 --> 00:20:53,029
environment Python executable okay yeah

00:20:51,320 --> 00:20:56,029
sure I mean there are probably several

00:20:53,029 --> 00:20:59,389
ways of doing this to be honest again

00:20:56,029 --> 00:21:01,369
this is just work so I'm lazy it works

00:20:59,389 --> 00:21:02,779
now move on here because I asked them

00:21:01,369 --> 00:21:05,210
they on the mailing list and they told

00:21:02,779 --> 00:21:08,240
me that you can do this simply and

00:21:05,210 --> 00:21:11,210
another thing it looks like all the

00:21:08,240 --> 00:21:14,289
examples are very tight to one platform

00:21:11,210 --> 00:21:16,269
with our coded paths and semiotics is

00:21:14,289 --> 00:21:19,039
there a way to make it more

00:21:16,269 --> 00:21:20,509
multi-platform or more well it's true

00:21:19,039 --> 00:21:22,759
this is very tied to one platform

00:21:20,509 --> 00:21:24,559
because I mean I'm working at canonical

00:21:22,759 --> 00:21:27,950
so we use a pontoon we deploy to a bun

00:21:24,559 --> 00:21:30,950
to so it's very tied to that making

00:21:27,950 --> 00:21:33,980
multiple platform I guess yes the answer

00:21:30,950 --> 00:21:37,460
is meaning as long as your platform is

00:21:33,980 --> 00:21:39,970
supported by Python everything is free

00:21:37,460 --> 00:21:39,970
for you to do

00:21:43,010 --> 00:21:50,700
while the broth and calls between fabric

00:21:46,650 --> 00:21:54,420
and bash scripts pros and cons between

00:21:50,700 --> 00:21:56,610
fabric and bash scripts well as I

00:21:54,420 --> 00:21:58,020
originally said they're really

00:21:56,610 --> 00:22:01,260
equivalent I mean there are different

00:21:58,020 --> 00:22:03,450
ways build-out makefile bash scripts

00:22:01,260 --> 00:22:06,510
they're fabric they're all the different

00:22:03,450 --> 00:22:09,360
ways of doing the same in this case for

00:22:06,510 --> 00:22:12,980
us the the pros were we already know

00:22:09,360 --> 00:22:17,100
Python we already had a library which

00:22:12,980 --> 00:22:19,530
does deployments to ec2 so the pros was

00:22:17,100 --> 00:22:21,780
we have just one tool and we use that

00:22:19,530 --> 00:22:26,010
everywhere for all the other developers

00:22:21,780 --> 00:22:28,490
so the time it gets a new developer to

00:22:26,010 --> 00:22:33,330
know everything is less that's the pro

00:22:28,490 --> 00:22:36,450
icon I'm not sure to be honest I mean it

00:22:33,330 --> 00:22:39,560
works well you have sometimes it's

00:22:36,450 --> 00:22:42,150
easier to to just write the bash but

00:22:39,560 --> 00:22:45,840
with fabric you can deploy in parallel

00:22:42,150 --> 00:22:47,100
at several servers which is not what I

00:22:45,840 --> 00:22:49,080
want to talk because I want to talk

00:22:47,100 --> 00:22:51,930
about local development but I mean you

00:22:49,080 --> 00:22:54,630
have one too so the count of using bash

00:22:51,930 --> 00:22:57,650
bash scripts would be you have more than

00:22:54,630 --> 00:22:57,650
one chill to cope with

00:23:04,070 --> 00:23:08,820
hi thanks again for giving this talk

00:23:06,630 --> 00:23:10,950
I've got a couple colleagues that really

00:23:08,820 --> 00:23:13,350
like Capistrano but we're really just

00:23:10,950 --> 00:23:15,810
programming in Python and so do you are

00:23:13,350 --> 00:23:18,180
you familiar with Capistrano and it

00:23:15,810 --> 00:23:21,090
doesn't seems to have a lot more built

00:23:18,180 --> 00:23:22,950
in stuff than fabric and I'm trying to

00:23:21,090 --> 00:23:26,160
find some clear arguments we should use

00:23:22,950 --> 00:23:29,250
a fabric instead well I know

00:23:26,160 --> 00:23:31,710
Capistrano was why fabric exists

00:23:29,250 --> 00:23:33,840
basically because Capistrano is Andrew

00:23:31,710 --> 00:23:35,760
Lee and when fabric was created was

00:23:33,840 --> 00:23:39,510
greater saw that we have something like

00:23:35,760 --> 00:23:41,960
that in Python I don't know the

00:23:39,510 --> 00:23:45,570
differences between the feature set I

00:23:41,960 --> 00:23:47,400
would venture capitals around but longer

00:23:45,570 --> 00:23:53,210
so it has more maturity of more feature

00:23:47,400 --> 00:23:57,750
sets but that's just a guess so also so

00:23:53,210 --> 00:24:00,600
also I'm using extremely basic stuff I'm

00:23:57,750 --> 00:24:06,140
not using anything that's new asset I'm

00:24:00,600 --> 00:24:09,620
using 31.0 features a lot of to change

00:24:06,140 --> 00:24:11,820
but I don't need it so I don't use it

00:24:09,620 --> 00:24:17,190
maybe there are features that you need a

00:24:11,820 --> 00:24:18,630
newer version I don't know I'll just ask

00:24:17,190 --> 00:24:22,170
another question since no one else is

00:24:18,630 --> 00:24:24,240
here the the ability to rollback

00:24:22,170 --> 00:24:26,970
do you have an example of were you

00:24:24,240 --> 00:24:30,090
rolling back from a like when you fail

00:24:26,970 --> 00:24:33,240
some tests and then it rolls back right

00:24:30,090 --> 00:24:35,340
now I don't have examples do you use it

00:24:33,240 --> 00:24:38,610
in that way I give the honest we don't

00:24:35,340 --> 00:24:40,590
use fabric to deploy um the only reason

00:24:38,610 --> 00:24:42,900
we have these deployment scripts and the

00:24:40,590 --> 00:24:45,210
only place we use fabric to deploy was

00:24:42,900 --> 00:24:47,850
against the VPS so for conditional

00:24:45,210 --> 00:24:49,830
equation for demoing just have a single

00:24:47,850 --> 00:24:51,990
command a simple command to deploy

00:24:49,830 --> 00:24:53,040
everything and have it launch obviously

00:24:51,990 --> 00:24:55,380
there's a lot of missing like

00:24:53,040 --> 00:24:57,390
configuring Apache what you could do

00:24:55,380 --> 00:24:58,830
we're not doing it you could have a

00:24:57,390 --> 00:25:01,200
robot procedure where you should have

00:24:58,830 --> 00:25:03,510
those robot procedures but we don't have

00:25:01,200 --> 00:25:07,900
one for these cases because it's not

00:25:03,510 --> 00:25:13,059
production so it's not not necessary

00:25:07,900 --> 00:25:15,820
I was just wondering your thoughts on

00:25:13,059 --> 00:25:18,040
some of the other types of configuration

00:25:15,820 --> 00:25:19,630
management tools like say puppet where

00:25:18,040 --> 00:25:22,570
it's more like declaring a state rather

00:25:19,630 --> 00:25:24,640
than actions like you're having fabric

00:25:22,570 --> 00:25:27,100
do actions and I know we use both and if

00:25:24,640 --> 00:25:28,570
try to find the where the line where one

00:25:27,100 --> 00:25:30,790
is good to use and where the other one

00:25:28,570 --> 00:25:31,960
becomes more useful is really blurry so

00:25:30,790 --> 00:25:34,750
just wondering if you had any experience

00:25:31,960 --> 00:25:37,990
or thoughts on that so the question is

00:25:34,750 --> 00:25:41,650
about what relationship there is between

00:25:37,990 --> 00:25:44,500
chef or puppet and fabric and as I

00:25:41,650 --> 00:25:46,650
understand it so fabric is chef are

00:25:44,500 --> 00:25:49,030
aimed at a different level of

00:25:46,650 --> 00:25:51,910
configuration management usually you

00:25:49,030 --> 00:25:55,120
have there is a taxonomy of three levels

00:25:51,910 --> 00:25:58,000
or use something like fabric and sari

00:25:55,120 --> 00:26:00,700
habit of chef to get your system into a

00:25:58,000 --> 00:26:04,210
state where you can start operating on

00:26:00,700 --> 00:26:06,640
and because chef and pop you are made to

00:26:04,210 --> 00:26:09,700
keep your system at the defined

00:26:06,640 --> 00:26:13,600
configuration while so the declarative

00:26:09,700 --> 00:26:15,910
and they're reactive well fabric is

00:26:13,600 --> 00:26:18,520
imperative and it's its aim to do

00:26:15,910 --> 00:26:20,890
something like a set of statements so

00:26:18,520 --> 00:26:22,300
they're different beasts really and as

00:26:20,890 --> 00:26:25,270
far as I understand they're used in

00:26:22,300 --> 00:26:27,700
different contexts you usually do share

00:26:25,270 --> 00:26:29,770
puppet to get your system bootstrap to

00:26:27,700 --> 00:26:32,590
the level and then eventually use fabric

00:26:29,770 --> 00:26:35,020
to do more command like pavement like

00:26:32,590 --> 00:26:41,800
we're starting your servers that kind of

00:26:35,020 --> 00:26:43,630
stuff thanks I wanted to chime in again

00:26:41,800 --> 00:26:45,520
so from what I've read fabrics moving in

00:26:43,630 --> 00:26:47,970
the direction of becoming another puppet

00:26:45,520 --> 00:26:50,860
or chef where it's going to handle the

00:26:47,970 --> 00:26:53,620
the the details of provisioning all the

00:26:50,860 --> 00:26:55,600
way through if you're still pensive

00:26:53,620 --> 00:26:58,000
about the use case for fabric here's

00:26:55,600 --> 00:27:00,340
here's what we use it for we use fabric

00:26:58,000 --> 00:27:02,980
we use boto to fire up an AWS instance

00:27:00,340 --> 00:27:06,100
once the AWS instance is up we use

00:27:02,980 --> 00:27:08,170
fabric to SSH in and install chef when

00:27:06,100 --> 00:27:10,179
chef is installed we use pie chef to

00:27:08,170 --> 00:27:12,100
change the role of the machine to

00:27:10,179 --> 00:27:14,500
provision on provision web server

00:27:12,100 --> 00:27:16,540
database whatever we need it for ongoing

00:27:14,500 --> 00:27:18,340
we use fabric for maintenance like

00:27:16,540 --> 00:27:20,120
stopping services starting services

00:27:18,340 --> 00:27:22,880
running remote

00:27:20,120 --> 00:27:26,810
and ad-hoc on machine so it's replaced

00:27:22,880 --> 00:27:30,830
SSH like manual SSH for us completely

00:27:26,810 --> 00:27:32,480
if we can't serialize the steps and

00:27:30,830 --> 00:27:34,100
create a fabric method and then test

00:27:32,480 --> 00:27:36,590
that fabric method we're not going to do

00:27:34,100 --> 00:27:38,900
it so that's that's worth fits in for us

00:27:36,590 --> 00:27:40,130
if you're still pensive and you're still

00:27:38,900 --> 00:27:43,040
wondering where it's gonna fit in for

00:27:40,130 --> 00:27:44,780
you like bash scripts know like what

00:27:43,040 --> 00:27:46,910
wouldn't crazy like how are you gonna

00:27:44,780 --> 00:27:47,900
test that did I mean no offense but

00:27:46,910 --> 00:27:50,840
really how you're gonna test that here

00:27:47,900 --> 00:27:52,220
you mock this call you test it out you

00:27:50,840 --> 00:27:54,050
test it a couple of times and then you

00:27:52,220 --> 00:27:56,060
deploy it and then even then you test it

00:27:54,050 --> 00:27:58,010
some more so that's where it fits in for

00:27:56,060 --> 00:28:00,230
us it's it fits as a former assistant

00:27:58,010 --> 00:28:04,040
man this is very nice for me well thank

00:28:00,230 --> 00:28:06,230
you for your comment yeah again I mean I

00:28:04,040 --> 00:28:09,220
don't want to avoid questions I'm very

00:28:06,230 --> 00:28:11,090
glad you asked questions but I

00:28:09,220 --> 00:28:12,980
deliberately didn't want to talk about

00:28:11,090 --> 00:28:15,890
deployment because there are a lot of

00:28:12,980 --> 00:28:20,360
nuances and issues and the legacies with

00:28:15,890 --> 00:28:22,160
deployments and the fact was you can use

00:28:20,360 --> 00:28:26,480
fabric also for stuff that it wasn't

00:28:22,160 --> 00:28:29,510
designed for like replacing make or

00:28:26,480 --> 00:28:33,470
build out which is what we use it for

00:28:29,510 --> 00:28:36,730
and that's what I want to show ok great

00:28:33,470 --> 00:28:36,730

YouTube URL: https://www.youtube.com/watch?v=bTXert2uRco


