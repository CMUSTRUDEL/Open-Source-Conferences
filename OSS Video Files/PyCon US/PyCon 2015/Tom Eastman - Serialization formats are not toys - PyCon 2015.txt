Title: Tom Eastman - Serialization formats are not toys - PyCon 2015
Publication date: 2015-04-12
Playlist: PyCon 2015
Description: 
	"Speaker: Tom Eastman

It’s not in the OWASP Top 10, but you don’t have to look far to hear stories of security vulnerabilities involving deserialization of user input. In this talk I’ll go over what the threat is and how you might be making yourself vulnerable. I’ll cover the features (not bugs: features) of XML, YAML, and JSON that make them surprisingly dangerous, and how to protect your code from them.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:20,029 --> 00:00:36,300
FORMATS. ALWAYS LOUDER THAN YOU THINK IT'S GOING TO

00:00:36,300 --> 00:00:37,750
BE. HI.

00:00:37,750 --> 00:00:39,890
SO BEFORE I EVEN START, I NEED TO EXPRESS MY

00:00:39,890 --> 00:00:44,511
PROFOUND GRATITUDE TO THE PYTHON SOFTWARE FOUNDATION, BECAUSE WITHOUT THEM, I COULD

00:00:44,511 --> 00:00:46,329
NOT HAVE GOTTEN HERE, I COULD NOT HAVE BEEN HERE,

00:00:46,329 --> 00:00:50,969
COULD NOT HAVE MET ALL YOU AMAZING PEOPLE. WHO'S HERE BECAUSE I MET YOU DURING THE WEEK

00:00:50,969 --> 00:00:53,710
AND I BROWBEAT YOU INTO COMING TO MY TALK.

00:00:53,710 --> 00:01:00,530
YES, PASSIVE AGGRESSION WORKS. I CAME A LONG WAY TO GET HERE.

00:01:00,530 --> 00:01:05,030
I SPENT 38 HOURS ON -- NO, NOT 38 HOURS ON PLANES

00:01:05,030 --> 00:01:07,781
BUT SATURDAY WAS 38 HOURS LONG AND THAT'S A

00:01:07,781 --> 00:01:11,100
REALLY LONG DAY, WHEN YOU CROSS THE -- SEE THAT

00:01:11,100 --> 00:01:14,289
BLUE SPOT IN THE MIDDLE. THAT LITTLE BLUE -- THAT'S REALLY BIG.

00:01:14,289 --> 00:01:17,770
PACIFIC OCEAN IS REALLY BIG. TAKES A LONG TIME.

00:01:17,770 --> 00:01:26,200
SO I'M TOM EASTMAN, A DEVELOPER FROM WELLINGTON, NEW ZEALAND, WE'RE OPEN SOURCE SPECIALISTS,

00:01:26,200 --> 00:01:29,040
OPEN SOURCE IDEALISTS AND ZEALOTS AND FUN AND A

00:01:29,040 --> 00:01:30,340
GREAT CROWD OF PEOPLE.

00:01:30,340 --> 00:01:33,579
IT'S A PYTHON DEVELOPER, NOT A SECURITY GUY, NOT

00:01:33,579 --> 00:01:39,430
A PENETRATION TESTER. BUT ALL OF MY DRINKING BUDDIES ARE SO I'VE

00:01:39,430 --> 00:01:41,770
DEVELOPED A REALLY HEALTHY PARANOID WORLD VIEW

00:01:41,770 --> 00:01:45,960
BECAUSE I DON'T LIKE IT WHEN THEY BREAK MY TOYS.

00:01:45,960 --> 00:01:53,140
SO WHO HERE TODAY WORKS IN THE SECURITY INDUSTRY IN SOME FORM OR ANOTHER?

00:01:53,140 --> 00:01:56,770
EVERYONE ELSE, KEEP AN EYE ON THESE GUYS BECAUSE THEY KNOW EVERYTHING I'M GOING TO TALK ABOUT

00:01:56,770 --> 00:02:03,170
TODAY AND THEY'LL BE SMILING SMUGLY TO THEMSELVES AS I GO THROUGH THIS.

00:02:03,170 --> 00:02:08,369
AND WHO HERE IS A WEB DEV OR PYTHON DEVELOPER? YEAH.

00:02:08,369 --> 00:02:13,160
IF YOU'RE A DEVELOPER, IT'S ABOUT BEING AWARE THAT WHAT I'M TALKING ABOUT TODAY IS EVEN

00:02:13,160 --> 00:02:16,370
A THING THAT CAN BE DONE.

00:02:16,370 --> 00:02:19,660
SOME OF YOU MIGHT FIND WHAT I'M GOING TO TALK ABOUT SORT OF REMEDIAL, YOU MIGHT ALREADY

00:02:19,660 --> 00:02:22,170
KNOW IT, BUT IT'S STUFF THAT EVERYONE NEEDS TO

00:02:22,170 --> 00:02:25,410
KNOW AND IT'S STILL CATCHES PEOPLE BY SURPRISE

00:02:25,410 --> 00:02:27,500
SO THAT'S WHY I KEEP TALKING ABOUT IT.

00:02:27,500 --> 00:02:30,480
SO, IF YOU KNOW THIS STUFF, AND YOU'RE NOT ONE OF

00:02:30,480 --> 00:02:35,480
THESE MEAN SECURITY GUYS, SPREAD THE WORD. RUIN THEIR DAY, MAKE THEIR LIVES HARDER.

00:02:35,480 --> 00:02:39,430
SO I'M GOING TO TALK ABOUT SERIALIZATION FORMATS OR MARK-UP LANGUAGES OR WHATEVER YOU WANT

00:02:39,430 --> 00:02:40,430
TO CALL THEM.

00:02:40,430 --> 00:02:43,580
I MEAN FORMATS THAT HAVE STRUCTURED DATA THAT YOU

00:02:43,580 --> 00:02:46,190
FEED IN SO THAT YOU DON'T HAVE TO INVENT YOUR OWN

00:02:46,190 --> 00:02:50,500
DOT-DOC OR FILE FORMAT, WHATEVER. THERE ARE A BILLION OF THEM IN ALL KINDS OF

00:02:50,500 --> 00:02:54,989
LANGUAGES AND USES, AND ALL OF THEM HAVE LITTLE SURPRISES TUCKED AWAY, ALL OF THEM ARE JUST

00:02:54,989 --> 00:02:58,020
A LITTLE TOO SMART FOR THEIR OWN GOOD SOMETIME.

00:02:58,020 --> 00:03:01,060
FOR THIS TALK, I'M JUST TALKING ABOUT YAML, XML

00:03:01,060 --> 00:03:07,959
AND JSON, BUT THOSE ARE EXAMPLES OF MY LARGER POINT THAT I'LL BE MAKING.

00:03:07,959 --> 00:03:10,200
WHO IN THIS ROOM IS FAMILIAR WITH THE OWASP TOP

00:03:10,200 --> 00:03:17,069
10? THANKS GREAT.

00:03:17,069 --> 00:03:24,090
THE OWASP TOP 10 IS A REPORT BY ANALYST OF SECURITIES PUBLISHED BY THE OWASP GROUP, IT'S

00:03:24,090 --> 00:03:37,080
OPEN WEB SECURITY -- AND -- HANG ON A SEC.

00:03:37,080 --> 00:03:41,569
SO, IF YOU ARE UNFAMILIAR WITH THE OWASP TOP 10,

00:03:41,569 --> 00:03:44,640
GOOGLE IT AND READ IT BECAUSE THIS MIGHT SOUND A

00:03:44,640 --> 00:03:46,599
LITTLE HARSH BUT IF YOU'RE A WEB DEVELOPER AND

00:03:46,599 --> 00:03:53,600
NOT FARM WITNESS, YOU'RE A LIABILITY TO YOUR PROJECT AND YOU'RE A LIABILITY TO YOUR COMPANY.

00:03:53,600 --> 00:03:56,430
THAT SOUNDS HARSH BUT THE POINT IS THAT THAT'S FIXABLE.

00:03:56,430 --> 00:04:01,550
GOOGLE IT AND READ IT ALL AND MAKE SURE THAT YOU'RE FAMILIAR WITH THESE THINGS.

00:04:01,550 --> 00:04:03,799
I WAS WORKING ON A PROJECT WHERE MITIGATING THE

00:04:03,799 --> 00:04:07,980
OWASP TOP 10 VULNERABILITIES WAS A NON-FUNCTIONAL REQUIREMENT WHICH IS A SMART ANYONE FOR ALL

00:04:07,980 --> 00:04:10,180
PRONGS, AS A CHECKLIST TO MAKE SURE YOU'VE GONE

00:04:10,180 --> 00:04:12,689
THROUGH. AND THEN I ATTENDED A TALK BY A COLLEAGUE

00:04:12,689 --> 00:04:16,860
OF MINE, MIKE, AND HE SHOWED ME SOME TRICKS IN

00:04:16,860 --> 00:04:20,500
XML THAT SCARED THE CRAP OUT OF ME AND THEY WERE

00:04:20,500 --> 00:04:23,330
NOT IN THE OWASP TOP 10 AND AFTER THAT TALK, WHICH

00:04:23,330 --> 00:04:25,870
WAS AT A PUB AT THE SECURITY INTEREST GROUP IN

00:04:25,870 --> 00:04:28,410
WELLINGTON, I WENT BACK TO WORK, TRIED THAT STUFF

00:04:28,410 --> 00:04:30,020
OUT ON THE PROJECT THAT I HAD BEEN WORKING ON FOR

00:04:30,020 --> 00:04:32,740
TWO YEARS. THE WHOLE THING BLEW UP AND DIED AND I GOT

00:04:32,740 --> 00:04:35,409
SCARED AND THAT'S WHY I STARTED COMPLAINING ABOUT

00:04:35,409 --> 00:04:37,600
IT A LOT.

00:04:37,600 --> 00:04:41,620
THE PRINCIPLE THAT SECURITY PEOPLE GO UNDER IS

00:04:41,620 --> 00:04:44,140
THEY ONLY NEED TO KNOW ONE THING YOU DON'T, RIGHT?

00:04:44,140 --> 00:04:48,170
IF YOU'RE A DEVELOPER, YOU HAVE TO KNOW EVERY POSSIBLE WAY A SECURITY OR A HACKER OR A BAD

00:04:48,170 --> 00:04:53,759
PERSON CAN DO MEAN THINGS TO YOU. BUT THE SECURITY GUY JUST HAS TO KNOW ONE

00:04:53,759 --> 00:04:58,660
THING THAT YOU DIDN'T KNOW WAS A PROBLEM.

00:04:58,660 --> 00:05:02,509
AND SO WHAT I'M TACKING ABOUT TODAY, LIKE IF

00:05:02,509 --> 00:05:05,550
YOU'VE GOT A BUGGY XML LIBRARY, YOU HAVE A PROBLEM.

00:05:05,550 --> 00:05:11,860
IF YOU'VE GOT BUFFER OVERRUNS IN THE C-IMPLEMENTATION OF THE JSON PARSER IN THE

00:05:11,860 --> 00:05:14,190
PYTHON JSON LIBRARY, THAT'S UNIVERSITY A LIBRARY,

00:05:14,190 --> 00:05:18,460
THAT'S WHY JACOB IS PUZZLING IT RIGHT NOW.

00:05:18,460 --> 00:05:21,400
I'M NOT TALKING ABOUT FEATURES, I'M TALKING ABOUT

00:05:21,400 --> 00:05:24,020
STUFF YAML CAN DO BECAUSE SOMEONE THOUGHT IT WAS

00:05:24,020 --> 00:05:26,889
A GREAT IDEA FOR YAML TO DO IT, STUFF THAT XML

00:05:26,889 --> 00:05:29,900
CAN DO BECAUSE THEY WERE SURE IT WAS A GREAT IDEA

00:05:29,900 --> 00:05:34,139
AT THE TIME. CAN EVERYBODY READ THAT CODE?

00:05:34,139 --> 00:05:38,270
REASONABLY CLEARLY? HANDS UP IF YOU CAN'T.

00:05:38,270 --> 00:05:41,580
OKAY. SO IT'S PRETTY SIMPLE.

00:05:41,580 --> 00:05:44,120
IT'S A BOTTLE WEB APP, THIS IS THE HULL WEB APP

00:05:44,120 --> 00:05:46,330
AND JUST DEMONSTRATING SOME REALLY SIMPLE DATA

00:05:46,330 --> 00:05:49,569
LOADING STUFF. THIS IS NOT GOOD CODE THAT YOU SHOULD DO IN

00:05:49,569 --> 00:05:52,819
YOUR APPLICATIONS, YOU'LL SEE WHY SOON, BUT THAT

00:05:52,819 --> 00:05:55,199
FIRST FUNCTION IS BASICALLY JUST A YAML END POINT.

00:05:55,199 --> 00:05:57,289
YOU POST SOME YAML TO IT AND IT PARSES OUT WHAT

00:05:57,289 --> 00:06:00,740
IT PARSED. THE NICKS ONE IS AN XML ENDS POINT.

00:06:00,740 --> 00:06:04,210
YOU POST XML TO IT AND IT TELLS YOU WHAT IT PARSED.

00:06:04,210 --> 00:06:08,120
THAT'S USING THE XML LIBRARY WHICH IS THE ONE YOU

00:06:08,120 --> 00:06:10,080
OUGHT TO BE USING THE THE THIRD ONE IS THE SAME

00:06:10,080 --> 00:06:15,980
THING USING PYTHON STANDARD LIBRARY STUFF. I JUST USED THIS AS AN EXAMPLE WHEN I WAS

00:06:15,980 --> 00:06:19,720
PLAYING AROUND WITH SOME OF THESE FEATURES.

00:06:19,720 --> 00:06:22,509
BUT THE POINT -- ONE POINT THAT I REALLY WANT TO

00:06:22,509 --> 00:06:24,580
GET ACROSS HERE IS IF YOU HAVE A LOOK AT THAT TOP

00:06:24,580 --> 00:06:26,830
ONE, I'M IMPORTING THE YAML MODULE AND THEN JUST

00:06:26,830 --> 00:06:33,630
GOING YAML.LOAD AND THE THING I'M LOADING. SO LOADING DATA INTO YOUR APPLICATION IS THE

00:06:33,630 --> 00:06:36,891
LEAST INTERESTING PART OF YOUR DAY. YOU WANT TO DO STUFF WITH THAT DATA, YOU WANT

00:06:36,891 --> 00:06:38,980
TO DO DATA ANALYSIS PROBLEMS SESSION YOUR FORM,

00:06:38,980 --> 00:06:42,960
RUN YOUR WEB APP, SATISFY YOUR CUSTOMERS.

00:06:42,960 --> 00:06:47,479
AND SO YOU'RE USING AN IDE AND YOU GO I NEED TO

00:06:47,479 --> 00:06:49,550
LOADS A YAML FILE,AL.TAB, AUTO COMPLETE, THERE IS

00:06:49,550 --> 00:06:56,860
A THING CALLED LOAD, DOES IT DO WHAT I WANT? IT DOES, I'M DONE, I'LL MOVE ON.

00:06:56,860 --> 00:06:58,990
AND SO YOU DON'T THINK ABOUT THIS STUFF, YOU JUST

00:06:58,990 --> 00:07:02,360
WANT TO GET FROM OUTSIDE TO INSIDE AS QUICKLY AS

00:07:02,360 --> 00:07:05,169
POSSIBLE. SO I'M GOING TO TALK ABOUT YAML FIRST BECAUSE

00:07:05,169 --> 00:07:08,870
THERE'S BEEN SOME HILARIOUS RECENT ISSUES WITH

00:07:08,870 --> 00:07:12,160
IT. WHO USES YAML?

00:07:12,160 --> 00:07:18,560
EVERYBODY, BRILLIANT. I HAVE A LOT OF SLIDES THAT LOOK LIKE THIS.

00:07:18,560 --> 00:07:21,509
SO BASICALLY I'VE JUST POSTED A SNIPPET OF TEXT

00:07:21,509 --> 00:07:24,759
TO MY LITTLE SERVICE AND THEN IT'S PARSING IT

00:07:24,759 --> 00:07:27,620
USING THE PYTHON THING AND I'M GETTING A PYTHON DICTIONARY BACK.

00:07:27,620 --> 00:07:29,669
SO EVERYONE IS WITH ME SO FAR, YOU HAVE A DATA

00:07:29,669 --> 00:07:33,130
FILE IN AND A PYTHON DATA STRUCTURE COMING OUT.

00:07:33,130 --> 00:07:36,009
AND THIS IS A VERY SIMPLE YAML FILE, JUST KEY

00:07:36,009 --> 00:07:37,810
VALUE, LIKE THE DICTIONARY YOU GETS OUT OF PYTHON

00:07:37,810 --> 00:07:41,449
LOOKS ALMOST EXACTLY THE SAME BECAUSE YAML IS

00:07:41,449 --> 00:07:45,490
THAT STRAIGHTFORWARD, OR TRIES TO BE. YOU KNOW HOW THEY TRY TO MAKE HUMAN READABLE

00:07:45,490 --> 00:07:48,580
MARK-UP LANGUAGES AND IT NEVER IS? YEAH.

00:07:48,580 --> 00:07:55,919
IT GETS UGLIER LATER BUT... SO THE THING ABOUT YAML IS THAT IT'S NOT ACTUALLY

00:07:55,919 --> 00:07:59,129
JUST BASIC DATA TYPES. YOU CAN DO SOME PRETTY NEAT STUFF WITH IT,

00:07:59,129 --> 00:08:02,230
SO THIS IS THE SAME DICTIONARY, BUT THIS TIME

00:08:02,230 --> 00:08:06,860
IT HAS MY BIRTHDAY ENCODED, AND THAT LITTLE EXTRA

00:08:06,860 --> 00:08:08,419
TAG, THERE I THINK THE TECHNICAL TERM FOR IT IS

00:08:08,419 --> 00:08:11,629
A YAML TAG OR OBJECT TAG OR SOMETHING BUT THE EX

00:08:11,629 --> 00:08:17,520
EXTRAMATION POINT, PROJECT APPLY, DATE TIME.DATE AND THE ARGUMENTS THAT YOU WANT TO PASS INTO

00:08:17,520 --> 00:08:21,000
THAT THING, AND SO WHAT YOU GET OUT OF IT IS A

00:08:21,000 --> 00:08:24,449
DATE-TIME OBJECT WHICH IS REALLY, REALLY HANDY, GOOD FOR CONFIGURATION FILES, GOOD FOR ALL

00:08:24,449 --> 00:08:27,319
KINDS OF STUFF, RIGHT?

00:08:27,319 --> 00:08:28,930
WHO'S HAD A SHIVER GO DOWN THEIR SPINE SO FAR

00:08:28,930 --> 00:08:33,240
YET? ONE FUN THING ABOUT THIS IS IF YOU HAVEN'T

00:08:33,240 --> 00:08:35,159
LOADED THE DATE TIME MODULE, IT WILL HAPPILY LOAD

00:08:35,159 --> 00:08:39,580
IT FOR YOU SO YOU CAN THE DATE TIME.DATE AND IT WILL

00:08:39,580 --> 00:08:42,120
GO, OKAY, I DON'T KNOW WHAT THAT IS, SO I'LL IMPORT

00:08:42,120 --> 00:08:49,260
THE IT FROM STANDARD LIBRARY AND IT WILL SUBSTANTIATE THE THING.

00:08:49,260 --> 00:08:57,819
SO THIS CAN GO DOWNHILL REALLY FAST. YAML.LOAD IS VERY, VERY HANDY.

00:08:57,819 --> 00:09:03,980
SO PYTHON.OBJECT.APPLY IS A MISNOMER BECAUSE CHECKOUT IS A FUNCTION, PYTHON IS DUCK-TYPE',

00:09:03,980 --> 00:09:09,670
IT'S FINE WITH THIS. PROCESS CHECK OUT, OH, I'VE SHELLED OUT AND

00:09:09,670 --> 00:09:14,439
LISTED THE CONTENTS OF MY HOME DIRECTORY. OR, RATHER, IF YOU HAVE A YAML END POINT THAT

00:09:14,439 --> 00:09:17,850
SOMEONE IS UPLOADING FILES TO, OR ANY KIND OF

00:09:17,850 --> 00:09:23,400
USER INPUT THAT IS A PARSED YAML CONFIGURATION FILE THAT THEY CAN PROVIDE OR A -- I DON'T

00:09:23,400 --> 00:09:29,540
KNOW, A TASTY PIE END POINT OR SOMETHING LIKE THAT,

00:09:29,540 --> 00:09:34,630
YOU CAN POST YAML TO IT.

00:09:34,630 --> 00:09:41,750
SO TAKING IT TO ITS LOGICAL EXTREME, RIGHT? SO PYTHON OBJECT APPLY OS.SYSTEM, IT WILL

00:09:41,750 --> 00:09:44,860
LOAD THE S MODULE FOR YOU, IT SHOULD SHELL OUT

00:09:44,860 --> 00:09:47,970
AND I DO THE LISTING THING AGAIN AND ALL MY FILES

00:09:47,970 --> 00:09:51,480
GONE AND, TRUE STORY, I HAD TO RESTART WORKING

00:09:51,480 --> 00:09:55,580
ON MY TALK.

00:09:55,580 --> 00:10:03,540
[ Laughter ] SO YAML IS EFFECTIVELY -- YAML.LOAD IS

00:10:03,540 --> 00:10:10,080
EFFECTIVELY IMMEDIATE SHELL EXECUTION OR SCRIPTING OR YOU COULD RUN PERL IF YOU WANTED

00:10:10,080 --> 00:10:12,329
YOUR CUSTOMERS TO BE ABLE TO INTEGRATE PERL INTO

00:10:12,329 --> 00:10:14,449
YOUR APP WHICH YOU PROBABLY DON'T WANT THEM TO

00:10:14,449 --> 00:10:19,000
DO. SURELY THIS DOESN'T HAPPEN IN REAL LIFE.

00:10:19,000 --> 00:10:23,520
OKAY IN NOVEMBER, 2011, THIS HIT TASTY PIE AND

00:10:23,520 --> 00:10:29,079
PISTON, THEY WERE USING YAML LOAD. AND THAT MEANT THAT EVERYONE WHO WAS USING

00:10:29,079 --> 00:10:31,350
IT WAS EXPOSED SO, THAT WAS NOVEMBER, 2011, A LITTLE

00:10:31,350 --> 00:10:33,760
WHILE AGO. RUBY ON RAILS THIS WAS FAMOUS.

00:10:33,760 --> 00:10:36,079
YOU PROBABLY HEARD ABOUT THIS IN THE NEWS BECAUSE

00:10:36,079 --> 00:10:37,819
IF YOU'RE A PYTHON DEVELOPER AND IF YOU'RE A

00:10:37,819 --> 00:10:40,280
LITTLE BIT MEAN, YOU WERE PROBABLY LAUGHING AT

00:10:40,280 --> 00:10:44,439
THE RUBY COMMUNITY FOR WHAT HAPPENED TO THEM BECAUSE NOT ONLY DID THEY HAVE A REALLY

00:10:44,439 --> 00:10:51,189
EMBARRASSING YAML DESERIALIZATION VULNERABILITY BUT THEN THEY HAD ONE AGAIN FIVE WEEKS LATER.

00:10:51,189 --> 00:10:56,720
SO -- AND THEN IT HAPPENED TO PUPPET AND I REALLY

00:10:56,720 --> 00:10:59,900
TRUSTED THOSE GUYS. I WAS REALLY, REALLY, REALLY SAD AND THAT

00:10:59,900 --> 00:11:02,350
WAS THE THING THAT MADE ME START YELLING ABOUT THIS.

00:11:02,350 --> 00:11:05,350
SO, YEAH, AND THEN -- AND THEN IT HAPPENED TO

00:11:05,350 --> 00:11:11,560
NODE AND NOBODY CARED. [ Laughter ]

00:11:11,560 --> 00:11:16,579
INTERESTINGLY ENOUGH, THE NODE ONE IS FUNNY BECAUSE THERE WAS NO SECURE OPTION UNTIL THEY

00:11:16,579 --> 00:11:18,730
REALIZED THAT THIS WAS A BAD IDEA, SO THEY HAD

00:11:18,730 --> 00:11:22,170
TO -- THAT THING IN THE CORNER THERE WHICH SAYS,

00:11:22,170 --> 00:11:24,439
UPGRADED AND SHOULD STRONGLY CONSIDER -- I CAN'T

00:11:24,439 --> 00:11:26,740
REALLY READ IT VERY WELL, I'LL READ IT OUT, MAKE

00:11:26,740 --> 00:11:29,810
SURE THEY HAVE UPGRADED AND SHOULD STRONGLY CONSIDER PORTING THEIR CODES TO USE THE NEW

00:11:29,810 --> 00:11:32,680
SAFE LOAD METHOD -- NEW SAFE LOAD METHOD.

00:11:32,680 --> 00:11:36,750
THERE WAS NO SAFE LOAD METHOD UNTIL JUNE, 2013.

00:11:36,750 --> 00:11:39,110
WITH YAML, HOW DO YOU PROTECT YOURSELF FROM THIS

00:11:39,110 --> 00:11:43,390
STUFF? YOU MAKE YOUR PARSERS STUPIDER.

00:11:43,390 --> 00:11:48,600
THESE ARE NOT FEATURES THAT YOU NEED IN SOMETHING THAT A USER IS SUPPLYING TO YOU, RIGHT?

00:11:48,600 --> 00:11:50,750
DO YOU? NO.

00:11:50,750 --> 00:11:53,480
YOU DON'T. IF SOMEONE WAS GOING TO SAY YES, YOU'RE

00:11:53,480 --> 00:11:58,650
PROBABLY -- YEAH, DON'T. AND IN PYTHON, THAT'S REALLY, REALLY EASY.

00:11:58,650 --> 00:12:04,490
SO THANKFULLY, THE YAML LIBRARY, THEY'RE NOT COMPLETELY SILLILY, THEY HAVE YAML.LOAD, WHICH

00:12:04,490 --> 00:12:06,830
IS THE DANGEROUS ONE AND THEN THEY HAVE YAML.SAFE

00:12:06,830 --> 00:12:10,080
LOAD. BUT THIS IS A KEY POINT THAT I WANT TO GET

00:12:10,080 --> 00:12:14,270
ACROSS TO YOU WHICH IS WHY WAS IT THAT WAY AROUND?

00:12:14,270 --> 00:12:17,720
RIGHT? LIKE I SAID, IF YOU'RE -- LOADING DATA IS

00:12:17,720 --> 00:12:19,101
THE LEAST INTERESTING PART OF YOUR DAY, YOU'RE

00:12:19,101 --> 00:12:22,890
GOING TO GO YAML.-- I DON'T KNOW, IS IT CALLED LOAD,

00:12:22,890 --> 00:12:28,990
PARSE, I'LL USE LOAD. IF YOUR AUTO COMPLETE IS IN ALPHABETICAL ORDER,

00:12:28,990 --> 00:12:32,189
YOU WON'T HAVE SEEN DOWN IN THE S A THING CALLED

00:12:32,189 --> 00:12:37,050
RECEIVE LOAD. RUBY'S ANSWER IS A LITTLE BIT MORE ANNOYING,

00:12:37,050 --> 00:12:40,480
YOU HAVE TO GET AN EXTERNAL GEM, DOWNLOAD THAT,

00:12:40,480 --> 00:12:43,300
INTEGRATE IT INTO RUBY AND THAT GOES IN A MONKEY

00:12:43,300 --> 00:12:47,180
PATCHES THE ACTUAL YAML LIBRARY TO MAKE IT SAFER,

00:12:47,180 --> 00:12:50,089
WHICH REALLY SURPRISED ME UNTIL I WAS TALKING TO

00:12:50,089 --> 00:12:55,110
A RUBY DEVELOPER AND THEY TOLD ME THAT'S HOW EVERYTHING WORKS IN RUBY.

00:12:55,110 --> 00:12:59,200
THE RUBY YAML LIBRARY IS A LITTLE BIT SAFER BECAUSE IT WON'T GO OUT AND LOAD THE MODULE

00:12:59,200 --> 00:13:03,760
FOR YOU, THE WAY PYTHON'S WILL, THE RUBY ON RAILS

00:13:03,760 --> 00:13:10,309
VULNERABILITY, THEY FOUND THE UNSAFE DESERIALIZER AND THE ATTACKER HAD TO POUR THROUGH THE DATABASE

00:13:10,309 --> 00:13:16,540
TO FIND A MODULE THAT WAS ALREADY LOADED INTO MEMORY THAT HAD AN EVAL FROM IT AND FROM THERE,

00:13:16,540 --> 00:13:19,459
THEY WERE IN. BUT THE PYTHON ONE WILL HAPPILY LOAD WHATEVER

00:13:19,459 --> 00:13:28,240
MODULE YOU WANT. WHO WORKS WITH XML?

00:13:28,240 --> 00:13:33,740
WHO ALREADY KNOWS NOT TO TRUST XML? EVERYBODY IS GOING TO -- EVEN IF YOU DON'T

00:13:33,740 --> 00:13:35,980
WORK WITH XML, YOU ALREADY KNOW THAT, BUT YOU MIGHT

00:13:35,980 --> 00:13:38,950
NOT KNOW WHY, YOU MIGHT THINK IT'S ANNOYING SYNTAX OR WHATEVER.

00:13:38,950 --> 00:13:42,430
I WANTED TO PUT SOMETHING LIKE O, NO, XML OR

00:13:42,430 --> 00:13:43,959
SOMETHING IN THIS SLIDE BUT I THOUGHT HAVING A

00:13:43,959 --> 00:13:49,890
BIG FONT THERE WOULD BE SCARY ENOUGH. SO IF YOU'VE WORKED WITH XML AT ALL, THIS

00:13:49,890 --> 00:13:50,890
SHOULD BE FAMILIAR.

00:13:50,890 --> 00:13:56,280
THIS IS A SIMPLE XML FILE AND THE ONLY INTERESTING THING IN THERE IS IT'S GOT AN

00:13:56,280 --> 00:13:58,949
ENTITY FOR A UNCOULD I HE HAD CHARACTER WHICH IS

00:13:58,949 --> 00:13:59,949
A SMILEY FACE.

00:13:59,949 --> 00:14:01,189
I DON'T KNOW IF THEY HAVE THE FULL EMOJI SET BUT

00:14:01,189 --> 00:14:06,380
THAT WOULD BE COOL. THAT'S AN AMPERSAND ENTITY JUST LIKE YOU'VE

00:14:06,380 --> 00:14:14,310
ALWAYS SEEN IN HTML OR ANY OF THE SGML DERIVED MARK-UP LANGUAGES.

00:14:14,310 --> 00:14:19,230
BUT XML IS A DOCUMENT LANGUAGE AND WHAT DOES THE

00:14:19,230 --> 00:14:22,960
X STAND FOR AGAIN? [ Audio Indiscernible ]

00:14:22,960 --> 00:14:27,230
>> WENT TOO FAR. IT'S EXTENSIBLE.

00:14:27,230 --> 00:14:29,290
SO YOU CAN DEFINE YOUR OWN DOCUMENT TYPES AND

00:14:29,290 --> 00:14:32,880
DEFINE YOUR OWN ENTITIES. THAT'S PRETTY COOL, HANDY AT TIMES.

00:14:32,880 --> 00:14:40,449
SO I'VE CREATED AN ENTITY HERE, THAT'S A DOC-TYPE DEFINITION AT THE TOP OF MY XML FILE, AND

00:14:40,449 --> 00:14:43,600
RATHER THAN HAVING TO REMEMBER THE NUMBER 9876, I'VE

00:14:43,600 --> 00:14:46,001
CREATED AN ENTITY CALLED SMILEY AND YOU CAN GO

00:14:46,001 --> 00:14:52,170
AMPERSAND SMILEY AND MOVE ON FROM THERE AND THAT'S -- YOU CAN DO THAT WITH A LOT OF DIFFERENT

00:14:52,170 --> 00:14:58,920
THINGS. YOU CAN DEFINE AN ENTITY THAT'S MADE OUT OF

00:14:58,920 --> 00:15:01,380
OTHER ENTITIES.

00:15:01,380 --> 00:15:04,570
SO I'VE DEFINED AN ENTITIES CALLED S-TOWER, WHICH

00:15:04,570 --> 00:15:06,640
IS A BUNCH OF ENTITIES CALLED S-3, AND THEN I'VE

00:15:06,640 --> 00:15:08,460
DEFINED AN CENTER CALLED S-3 WHICH IS A BUNCH OF

00:15:08,460 --> 00:15:12,980
S-AND I'VE DEFINED -- SO FORTH, UNTIL I HAVE A

00:15:12,980 --> 00:15:20,660
LOTT WHOLE LOT OF SMILEYS. SO MY XML PARSER WILL REBUILD ALL OF THAT,

00:15:20,660 --> 00:15:23,130
AND THAT'S SUPER CONVENIENT.

00:15:23,130 --> 00:15:30,600
YOU CAN DO STRING INTERPOLATION IF YOU REALLY WANT TO BUT YOU DON'T BECAUSE WHO KNOWS THE

00:15:30,600 --> 00:15:32,360
NAME OF THIS?

00:15:32,360 --> 00:15:36,689
WHO'S HEARD OF THIS? SOMEONE YELL IT OUT.

00:15:36,689 --> 00:15:41,140
WRONG. THIS IS THE 168 MILLION LAUGHS ATTACK BECAUSE

00:15:41,140 --> 00:15:43,120
I -- IN ORDER TO FIT IT ON THE PAGE, I WOULD HAVE

00:15:43,120 --> 00:15:49,939
TO CHOP ONE LULL OFF THE END OF EACH LINE. SO THIS IS -- YES, SO THIS IS THE BILLION

00:15:49,939 --> 00:15:51,990
LAPS ATTACKS, BEEN AROUND FOR A LONG TIME, HAS

00:15:51,990 --> 00:15:58,069
ITS OWN WIKIPEDIA PAGE AND JUST AN EXAMPLE OF YOU

00:15:58,069 --> 00:16:01,970
THROW THIS AT A PARSER, YOUR PARSER FALLS OVER AND

00:16:01,970 --> 00:16:05,390
DIES. A MEMORY ATTACK, SO IF YOU WERE TO -- WHO

00:16:05,390 --> 00:16:11,000
HERE WHEN THEY WERE A RAMBUNCTIOUS YOUNG CHILD

00:16:11,000 --> 00:16:14,160
MADE A ZIP FILE OF TEN GIGABYTES OF ZEROS AND THEN

00:16:14,160 --> 00:16:18,820
EMAILED IT TO THEIR FRIENDS? SO MEAN.

00:16:18,820 --> 00:16:23,180
WHO DID THAT LAST WEEK? YES!!

00:16:23,180 --> 00:16:25,870
[ Laughter ] BUT THIS IS THAT, RIGHT?

00:16:25,870 --> 00:16:28,360
THIS IS A MEMORY BLOW-OUT. YOUR PARSERS WILL TRY TO BUILD THIS AND IT

00:16:28,360 --> 00:16:29,550
WILL FALL OVER AND DIE.

00:16:29,550 --> 00:16:35,830
FUNNY STORY, MY LITTLE PARSING AS A SERVICE PIECE

00:16:35,830 --> 00:16:37,900
OF CODE, I WAS GOING TO TEST THIS OUT ON THAT AND

00:16:37,900 --> 00:16:41,360
SEE WHAT HAPPENED, RIGHT? SO I COPIED IT FROM THE WIKIPEDIA PAGE AND

00:16:41,360 --> 00:16:45,470
I WAS ABOUT TO PASTE IT INTO MY WEB SERVICE, INTO

00:16:45,470 --> 00:16:48,290
CURL AND THEN MY COMPUTER EXPLODED AND DIED, SOME

00:16:48,290 --> 00:16:54,190
PASTED IT INTO MY EDITOR AND MY EDITOR WAS REALLY

00:16:54,190 --> 00:16:56,200
FRIENDLY AND WAS LIKE, OH, YOU'VE PASTED XML IN

00:16:56,200 --> 00:16:59,370
HERE, LET'S MAKE SURE IT'S WALD. [ Laughter ]

00:16:59,370 --> 00:17:05,610
SO WHO USES E-MAX? E-MAX IS REALLY HELPFUL LIKE THAT.

00:17:05,610 --> 00:17:08,490
[ Laughter ] SO THIS NEVER MADE IT AS FAR AS MY LITTLE

00:17:08,490 --> 00:17:10,910
TEST SERVICE.

00:17:10,910 --> 00:17:15,160
OKAY. SO THAT'S JUST -- THAT'S JUST LIKE BEATING

00:17:15,160 --> 00:17:16,589
YOUR PARSERS WITH A CLUB, RIGHT?

00:17:16,589 --> 00:17:20,180
THAT'S A DENIAL OF SERVICE ATTACK, IT'S BORING. LET'S DO SOMETHING MORE INTERESTING.

00:17:20,180 --> 00:17:25,870
YOU CAN DEFINE AN ENTITIES TO BE A FILE. AND IT WILL JUST BE DEFINE THIS ENTITY TO

00:17:25,870 --> 00:17:30,460
BE THE CONTENTS OF ETSY PASSWORDS.

00:17:30,460 --> 00:17:36,700
NOW, IF THAT'S A WEB SERVICE, AND THEN THERE'S SOMETHING ELSE WRONG WITH THE XML FILE AND

00:17:36,700 --> 00:17:38,960
SO YOUR WEB SERVICE, LIKE SOAP SERVICE OR WHATEVER,

00:17:38,960 --> 00:17:40,780
SAYS, HEY, THERE WAS SOMETHING WRONG WITH YOUR

00:17:40,780 --> 00:17:46,580
XML FILE, HERE'S -- AND IF IT SHOWS YOUR XML FILE, IT WILL HAVE THE CONTENT OF THAT FILE

00:17:46,580 --> 00:17:49,470
EMBEDDED IN IT. IT WILL ALREADY BE EXPANDED, RIGHT?

00:17:49,470 --> 00:17:52,820
SO IF YOU SEND INVALID XML TO A WEB SERVICE AND

00:17:52,820 --> 00:17:54,680
IT FOR WHATEVER REASON DECIDES TO GIVE YOU YOUR

00:17:54,680 --> 00:17:58,070
XML BACK, IT MIGHT HAVE THE CONTENTS OF THE STYLE

00:17:58,070 --> 00:18:00,380
IN IT. AND OF COURSE WE'RE TALKING ABOUT YOUR APP

00:18:00,380 --> 00:18:02,800
SERVER. THAT HAS ACCESS TO POSSIBLY NOT EVERY FILE

00:18:02,800 --> 00:18:04,730
ON YOUR SYSTEM BUT HAS TO HAVE ACCESS TO ITS

00:18:04,730 --> 00:18:06,820
OWN CONFIGURATION FILE AND THAT WILL HAVE THE

00:18:06,820 --> 00:18:11,740
DATABASE PASS WORTH. ETSY PASSWORD IS BORING, SHADOW IS PROTECTED

00:18:11,740 --> 00:18:14,480
BUT YOU CAN LOOK AROUND AND FIND YOUR THING AND

00:18:14,480 --> 00:18:23,270
BECAUSE XML IS OFTEN USED IN ENTERPRISE, AND BECAUSE ENTERPRISE OFTEN USES JAVA, I HAVE

00:18:23,270 --> 00:18:27,400
TROUBLE BELIEVING THIS BUT MY FRIENDS IN THE SECURITY INDUSTRY ASSURE ME THAT OFTEN THEY

00:18:27,400 --> 00:18:30,260
FIND XML PARSE RUNNING AS ROOT SO THEY CAN READ

00:18:30,260 --> 00:18:33,790
WHATEVER FILE THEY WANT OFF THE SYSTEM LIKE THIS.

00:18:33,790 --> 00:18:38,850
YEAH. BUT YOU SEE HOW THAT'S LIKE A URI, A URI SPACE

00:18:38,850 --> 00:18:43,110
THING RIGHT THERE SO YOU DON'T HAVE TO STOP THERE, YOU CAN JUST USE HTTP.

00:18:43,110 --> 00:18:47,370
WHAT'S FUNNY ABOUT THAT IS THE PARSER IS BEHIND THE NETWORK, BEHIND THE FIREWALL BECAUSE IT'S

00:18:47,370 --> 00:18:52,310
PART OF YOUR WEB APP, RIGHT? SO, HAVE A LITTLE BIT OF FUN AND START LOOKING

00:18:52,310 --> 00:18:55,670
AROUND BEHIND -- SORRY, LET ME REPHRASE, UNDER NO

00:18:55,670 --> 00:19:02,060
CIRCUMSTANCES, UNDER NO CIRCUMSTANCES DO THIS AND

00:19:02,060 --> 00:19:03,890
LOOK AROUND AT SOMEONE'S INTERNAL NETWORK BEHIND

00:19:03,890 --> 00:19:07,810
THEIR DMZ. LITERALLY, DON'T DO THAT BECAUSE I WANT TO

00:19:07,810 --> 00:19:09,400
BE ALLOWED BACK HOME.

00:19:09,400 --> 00:19:14,240
I AM NOT CONDONING ANY OF THIS STUFF OF THE PEOPLE WHO DO THIS ARE PENETRATION TESTERS

00:19:14,240 --> 00:19:17,170
WHO HAVE BEEN SIGNED UP TO DO IT.

00:19:17,170 --> 00:19:25,930
DISCLAIMER, DISCLAIMER, DISCLAIMER. NO WARRANTIES EXPRESSED OR IMPLIED.

00:19:25,930 --> 00:19:28,820
YOU DON'T HAVE TO SETTLE FOR AN HTTP PORT, IT'S.

00:19:28,820 --> 00:19:35,450
IF YOU'RE USING HTTP AS URI SPACE, YOU WOULD HAPPILY GO COLON 110 AND SEE HOW LONG IT TAKES

00:19:35,450 --> 00:19:38,790
FOR AN ERROR TO HAPPEN. AND THAT WAY YOU COULD PROBABLY TELL -- YOU

00:19:38,790 --> 00:19:41,420
WON'T BE ABLE TO GET ACCESS TO THEIR POP SERVER

00:19:41,420 --> 00:19:46,060
OR SMPT SERVER BUT YOU'LL KNOW IF ONE IS LISTENING

00:19:46,060 --> 00:19:47,790
THERE AND YOU CAN BASICALLY MAP UP THEIR INTERNAL

00:19:47,790 --> 00:19:51,470
NETWORK. SO YOU CAN USE SOMEONE'S XML PARSER TO PORT-SCAN

00:19:51,470 --> 00:19:56,570
THEIR OWN INTERNAL NETWORK AND UNDER NO CIRCUMSTANCES DO SUCH A THING.

00:19:56,570 --> 00:20:03,170
SURELY THIS DOESN'T HAPPEN IN REAL LIFE, RIGHT? I'M NOT GOING TO GIVE YOU A MONTAGE BUT IT

00:20:03,170 --> 00:20:08,190
HAPPENS ALL THE TIME. I'M TOO SCARED THAT I'LL FIND OUT IT HAPPENS

00:20:08,190 --> 00:20:11,320
MORE OFTEN THAN IT NOT HAPPENS AND IT'S JUST AN

00:20:11,320 --> 00:20:15,300
EDUCATION PROBLEM, RIGHT? PEOPLE JUST XML AND THEY MIGHT NOT REALIZE

00:20:15,300 --> 00:20:17,400
THAT THIS STUFF COMES PART AND PARCEL WITH XML.

00:20:17,400 --> 00:20:20,620
A FULLY COMPLIANT XML PARSER HAS TO DO THIS STUFF

00:20:20,620 --> 00:20:26,110
BECAUSE IT'S FULLY COMPLIANT AND IF YOU MARKET THE PARSER, YOU WON'T MARK IT AS SAYING OUR

00:20:26,110 --> 00:20:30,400
XML PARSER DOESN'T DO LOTS OF THINGS.

00:20:30,400 --> 00:20:37,230
SO HOW DO YOU PROTECT YOURSELF FROM THIS ONE? UNFORTUNATELY, UNLIKE THE YAML ONE, XML IS

00:20:37,230 --> 00:20:40,790
KIND OF COMPLICATED AND SO THIS -- I USED TO HAVE

00:20:40,790 --> 00:20:43,611
SPACE ON THIS SLIDE FOR THE LINK TO IT BUT I CAN

00:20:43,611 --> 00:20:48,480
POST THE LINK TO THE DOCUMENT THAT THIS CAME FROM, BUT THESE ARE ALL THE STEPS THAT YOU

00:20:48,480 --> 00:20:51,550
WOULD HAVE TO TAKE TO PROTECT YOURSELF FROM BAD

00:20:51,550 --> 00:20:56,950
XML AND THERE'S A LOT OF SCOPE FOR ANNOYING THINGS

00:20:56,950 --> 00:20:59,250
TO HAPPEN.

00:20:59,250 --> 00:21:03,310
DON'T USE X-PATH EXPRESSIONS FROM UNTRUSTED SOURCES, THAT'S BECAUSE X-PATH EXPRESSIONS

00:21:03,310 --> 00:21:08,930
ARE ACTUALLY JUST AS USEFUL AS XQL SNIPPETS FOR

00:21:08,930 --> 00:21:11,470
DOING INJECTION ATTACKS, YOU CAN USE THE X-PATH

00:21:11,470 --> 00:21:16,030
INJECTION ATTACKS, WHICH YOU DON'T HEAR IN THE

00:21:16,030 --> 00:21:24,990
OWASP TOP 10 BECAUSE THE TOP 10 ARE MORE IMPORTANT BUT THERE'S MORE THAN TEN WAYS OF

00:21:24,990 --> 00:21:27,030
DOING BAD THINGS.

00:21:27,030 --> 00:21:32,470
BUT THE ANSWER COMES DOWN TO THE SAME THING, YOU'VE JUST GOT TO MAKE YOUR PARSER STUPIDER.

00:21:32,470 --> 00:21:34,660
AND IN PYTHON, YOU DO ACTUALLY HAVE A SOLUTION TO

00:21:34,660 --> 00:21:39,040
THIS. IT'S CALLED DIFFUSED XML, AND THINGS LIKE

00:21:39,040 --> 00:21:42,430
TASTY PIE AND THE DJANGO REST FRAMEWORK AND I THINK

00:21:42,430 --> 00:21:46,560
OTHER THINGS RUN EVERYTHING THROUGH DIFFUSED XML

00:21:46,560 --> 00:21:55,970
NOW AND THAT'S A REASONABLY GOOD FILTER FOR GETTING GOOD OF THE WORST STUFF WITH XML THAT'S

00:21:55,970 --> 00:22:02,130
COMING IN BECAUSE -- THERE SHOULD BE NO CIRCUMSTANCES UNDER WHICH YOU CAN ACCEPT

00:22:02,130 --> 00:22:06,610
UNTRUSTED DDSS FROM XML, SO YOU SHOULD BE ABLE TO

00:22:06,610 --> 00:22:13,230
REMOVE THAT OUTRIGHT. ONE THING THAT I SHOULD MENTION IS THE TWO

00:22:13,230 --> 00:22:18,300
DIFFERENT XML LIBRARIES ARE A LITTLE BIT VULNERABLE TO DIFFERENT THINGS, LIKE THE STANDARD

00:22:18,300 --> 00:22:24,370
LIBRARY ONE WILL HAPPILY DO THAT FILE EXPANSION STUFF BUT IT DOESN'T DO THE EXTERNAL HTTP

00:22:24,370 --> 00:22:28,690
EXPANSION STUFF BECAUSE IT'S NOT QUITE CONFORMANT ENOUGH BUT THAT'S BESIDES THE POINT BECAUSE

00:22:28,690 --> 00:22:33,410
THE POINT I'M TRYING TO MAKE IS USE DIFFUSED XML.

00:22:33,410 --> 00:22:41,210
FINALLY I'LL TALK ABOUT JSON. IS THAT FINALLY A SIMPLE ENOUGH SERIALIZATION

00:22:41,210 --> 00:22:49,710
FORMAT THAT YOU'RE SAFE? HANDS UP IF YOU THINK IT IS.

00:22:49,710 --> 00:22:55,180
ALL THE WAY IN THE BACK I HAVE ONE HAND. ACTUALLY, IT ALMOST IS.

00:22:55,180 --> 00:22:58,310
IT'S DUMB ENOUGH THAT YOU CAN GENERALLY TRUST IT.

00:22:58,310 --> 00:23:00,851
LIKE THERE MIGHT BE BUGS IN THE PARSER BUT IT

00:23:00,851 --> 00:23:06,780
DOESN'T HAVE ANY OF THIS CLEVER OBJECT DESERIALIZATION STUFF UNLESS YOU ASK IT TOO,

00:23:06,780 --> 00:23:08,950
LIKE THE PYTHON JSON PARSER WILL LIT YOU DO THAT

00:23:08,950 --> 00:23:10,850
BUT YOU HAVE TO ADD IT TO IT AND IT WON'T GO LOADING

00:23:10,850 --> 00:23:15,360
MODULES FOR YOU AND STUFF LIKE THAT. BUT, AGAIN, ONLY IF YOU USE A STUPID ENOUGH

00:23:15,360 --> 00:23:21,810
PARSER. [ Laughter ]

00:23:21,810 --> 00:23:27,390
SO IF YOU'RE WRITING JAVASCRIPT, EVAL IS ONE WAY

00:23:27,390 --> 00:23:30,690
OF PARSING YOUR JSON AND IN FACT, IF YOU GO TO

00:23:30,690 --> 00:23:35,060
DOUBLE 3 SCHOOLS.COM, THEIR INTRODUCTION TO JSON

00:23:35,060 --> 00:23:42,110
SAYS IT RIGHT, THERE THESE ARE HARD TO READ, SINCE THIS IS A SUBSET OF JAVA SCRIPT, THE

00:23:42,110 --> 00:23:46,350
EVAL... [ Audio Indiscernible ]

00:23:46,350 --> 00:23:52,620
SO RIGHT THERE AT THE TOP OF THE PAGE. BUT NOBODY LISTENS TO W3 SCHOOLS, RIGHT?

00:23:52,620 --> 00:23:56,360
SO JSON.ORG, THE TOP PAGE OF THEIR JAVASCRIPT ONE.

00:23:56,360 --> 00:23:58,600
TO CONVERT JSON TEXT INTO AN OBJECT, YOU CAN USE

00:23:58,600 --> 00:24:02,000
THE EVAL FUNCTION. THAT INVOKES THE COMPILER.

00:24:02,000 --> 00:24:07,350
SINCE THAT'S AN -- THE COMPILER WILL PROPERLY PRODUCE THE TEXT.

00:24:07,350 --> 00:24:12,300
BUT WHAT ELSE WILL EVAL DO? EVERYTHING.

00:24:12,300 --> 00:24:14,940
I'M BEING A LITTLE UNFAIR SO IF WE GO BACK TO

00:24:14,940 --> 00:24:19,559
THIS SLIDE, RIGHT DOWN AT THE -- WHERE THE BOTTOM

00:24:19,559 --> 00:24:21,430
OF THE CURRENT TAKEN IS, THERE IS A LITTLE LINE

00:24:21,430 --> 00:24:25,580
THAT SAYS, OH, BY THE WAY, MAYBE YOU SHOULDN'T USE EVAL BUT FURTHER DOWN THE PAGE, NOBODY

00:24:25,580 --> 00:24:27,070
IS READING DOWN THAT FAR, THEY'VE WORKED OUTS

00:24:27,070 --> 00:24:28,760
THE ANSWER TO THEIR QUESTION, HOW DO YOU PARSE

00:24:28,760 --> 00:24:34,670
JAVASCRIPT AND THIS ONE I'M BEING MORE UNFAIR BECAUSE IT SAYS IT'S ABOUT OPEN SOURCE

00:24:34,670 --> 00:24:39,210
TECHNOLOGISTS ON THAT FAR. SO FARTHER DOWN IT SAYS...

00:24:39,210 --> 00:24:43,050
[ READING ] BUT THEY'VE ALREADY GIVEN AWAY THE GAME, ALREADY

00:24:43,050 --> 00:24:49,830
SAID THE HORRIBLE DANGEROUS THING. IF YOU'RE A DOCUMENTATION WRITER, DON'T DO

00:24:49,830 --> 00:24:52,840
THAT. DON'T TEACH PEOPLE THE REALLY, REALLY BAD

00:24:52,840 --> 00:24:56,350
IDEA FIRST.

00:24:56,350 --> 00:24:58,480
SO THE LESSON THAT I'M TRYING TO GET ACROSS TO

00:24:58,480 --> 00:25:02,270
YOU IS THAT FIRST OF ALL, NONE OF THIS STUFF IS

00:25:02,270 --> 00:25:04,580
SECRET, NONE OF THIS STUFF IS A BUG, THIS IS ALL

00:25:04,580 --> 00:25:08,960
JUST FEATURES OF THESE MARKUPS THAT YOU USE AND

00:25:08,960 --> 00:25:12,600
THAT'S COOL, IF YOU WANTED TO USE THEM. AND THAT'S COOL IF YOU DIDN'T WANT TO USE

00:25:12,600 --> 00:25:15,870
THEM AND THEY WERE TURNED OFF BUT THEY'RE ON BY

00:25:15,870 --> 00:25:19,510
DEFAULT, RIGHT? AND YOU DON'T WANT THEM TO BE.

00:25:19,510 --> 00:25:26,980
SO WATCH OUT FOR FLEXIBLE INPUT THINGS. WATCH OUT FOR OUR MARK-UP LANGUAGE IS SUPER

00:25:26,980 --> 00:25:28,480
FLEXIBLE AND YOU CAN DO ALL KINDS OF STUFF WITH

00:25:28,480 --> 00:25:30,580
IT BECAUSE THAT PROBABLY INCLUDES STUFF THAT YOU

00:25:30,580 --> 00:25:35,990
DID NOT WANT TO DO. DISABLE ABSOLUTELY EVERYTHING YOU POSSIBLY

00:25:35,990 --> 00:25:39,351
CAN THAT YOUR CUSTOMERS OR CLIENTS OR SYSTEM THAT

00:25:39,351 --> 00:25:42,170
YOU'RE INTEGRATING WITH DOESN'T REQUIRE TO GET

00:25:42,170 --> 00:25:48,290
ITS JOB DONE. JUST, YEP, KEEP IT SIMPLE.

00:25:48,290 --> 00:25:58,840
THANK YOU SO MUCH FOR YOUR TIME. [ Applause ]

00:25:58,840 --> 00:26:07,130
AND YOU SHOULD COME TO KIWI PYCON THIS SUMMER, IT'S REALLY COOL.

00:26:07,130 --> 00:26:09,800
THERE'S MORE DIRECT FLIGHTS, IF YOU BOOK FAR ENOUGH OUT.

00:26:09,800 --> 00:26:13,970
>> AUDIENCE: THANK YOU, TOM. THAT WAS A REALLY GREAT PRESENTATION.

00:26:13,970 --> 00:26:16,920
WE HAVE A FEW MINUTES FOR ONE OR TWO, MAYBE THREE

00:26:16,920 --> 00:26:24,090
QUESTIONS, IF ANYBODY WOULD LIKE TO COME UP? AND JUST A REMINDER TO ASK A QUESTION AND

00:26:24,090 --> 00:26:27,450
TRY TO BE RELATIVELY CONCISE.

00:26:27,450 --> 00:26:34,920
>> AUDIENCE: DO YOU KNOW IF BINARY SERIALIZATION FORMATS LIKE BSON AND MESSAGEPAC HAVE SIMILAR

00:26:34,920 --> 00:26:38,309
PROBLEMS? >> I DO NOT.

00:26:38,309 --> 00:26:44,600
I DO -- LIKE I'VE LEFT OUT SOME OF MORE SIMPLE THINGS LIKE MARSHAL AND PICKLE, EVERYBODY

00:26:44,600 --> 00:26:47,950
ALREADY KNOWS THAT THOSE ARE DIRECT DESERIALIZATIONS

00:26:47,950 --> 00:26:51,890
OF PYTHON OBJECTS AND ARE CODE EXEC IF YOU DO

00:26:51,890 --> 00:26:55,000
THEM. AS IMPLICIT TO THIS TALK IS THINGS LIKE PICKLE

00:26:55,000 --> 00:27:00,280
AND C-PICKLE AND MARSHAL MUST NEVER BE USER INPUT.

00:27:00,280 --> 00:27:05,980
BUT I THINK -- BUT, YEAH, PEOPLE DON'T REALIZE THAT ABOUT SOME OF THESE MORE HUMAN READABLE

00:27:05,980 --> 00:27:10,430
ONES AND SO THE BINARY ONES, BASICALLY, NO, I DON'T

00:27:10,430 --> 00:27:12,710
KNOW BUT THE QUESTION JUST COMES DOWN TO, DO THEY

00:27:12,710 --> 00:27:17,130
LET YOU DESERIALIZE OBJECTS AND WHAT ARE THE SAFEGUARDS THERE.

00:27:17,130 --> 00:27:18,680
IF THEY LET YOU DO THAT BUT YOU HAVE TO TURN IT

00:27:18,680 --> 00:27:23,300
ON, I'M HAPPY WITH THAT. IF IT'S ON BY DEFAULT THEN LET'S INSTANTIATE

00:27:23,300 --> 00:27:25,600
A DATE POINT, THAT'S WHAT YOU NEED TO LOOK OUT

00:27:25,600 --> 00:27:30,590
FOR. >> AUDIENCE: THANKS FOR THE TALK.

00:27:30,590 --> 00:27:32,809
BROWSERS THE IMPLEMENTATIONS OF ALL THESE OF XML

00:27:32,809 --> 00:27:35,990
AND JSON, IS THERE ANYTHING WE SHOULD BE AWARE OF

00:27:35,990 --> 00:27:41,310
THOSE IMPLEMENTATIONS, LIKE JSON THE CLOSING SCRIPT TAG INSIDE OF IT CAN BREAK WINDOWS

00:27:41,310 --> 00:27:44,400
IN THE BROWSER, SO ANYTHING ELSE FOR XML THAT WE

00:27:44,400 --> 00:27:46,450
SHOULD BE AWARE OF?

00:27:46,450 --> 00:27:52,260
>> I DON'T -- I GUESS IF YOU'RE IN A BROWSER CONTEXT, XML AND YAML AT LEAST ARE A LITTLE

00:27:52,260 --> 00:27:54,390
LESS RELEVANT.

00:27:54,390 --> 00:28:04,620
BUT, YEAH, I'M NOT SURE. SO THE JSON THING THAT YOU'RE REFERRING TO,

00:28:04,620 --> 00:28:07,380
IS THAT ACTUALLY LIKE A BUG THAT MAKES IT CRASH

00:28:07,380 --> 00:28:09,210
OR IS IT JUST IT DOESN'T PARSE CORRECTLY?

00:28:09,210 --> 00:28:11,000
>> AUDIENCE: SO IF YOU DO AN AJACKS CALL AND IT

00:28:11,000 --> 00:28:15,179
HAS A CLOSING SCRIPT TAG, THE BROWSER WILL FINISH

00:28:15,179 --> 00:28:18,380
THE SCRIPT SO YOU HAVE TO ESCAPE THE SLASH WITH A

00:28:18,380 --> 00:28:20,370
BACK SLASH, SO THAT'S ONE VULNERABILITY BUT I WAS

00:28:20,370 --> 00:28:24,640
JUST WONDERING IF THERE'S OTHERS FOR XML SPECIFICALLY.

00:28:24,640 --> 00:28:27,910
>> I COULDN'T TELL YOU. SORRY.

00:28:27,910 --> 00:28:31,160
>> AUDIENCE: SO AS PERSON NUMBER TWO OF THE TWO

00:28:31,160 --> 00:28:33,390
PEOPLE WHO RAISED THEIR HANDS AND SAID JSON IS

00:28:33,390 --> 00:28:41,540
STUPID ENOUGH, I JUST WANTED TO CLARIFY, IF YOU'RE NOT USING JAVASCRIPT OR NOT USING

00:28:41,540 --> 00:28:47,340
JAVASCRIPT'S EVAL, LIKE YOUR API WRITTEN IN PYTHON AND YOU'RE USING JSON.LOADS, JSON IS

00:28:47,340 --> 00:28:49,250
REALLY STUPID ENOUGH AS LONG AS YOU HAVEN'T GONE

00:28:49,250 --> 00:28:54,929
OUT OF YOUR WAY TO ENABLE SOMETHING SMARTS. >> THE JSON PARSER WILL ALLOW TO YOU ADD MORE

00:28:54,929 --> 00:28:57,980
-- LIKE WHEN YOU INSTANTIATE A PARSERS IN YAML,

00:28:57,980 --> 00:29:00,320
YOU CAN ADD A DATE-TIME FEATURE TO IT WHICH WILL

00:29:00,320 --> 00:29:05,670
LOOK FOR A STRING OF A CERTAIN CONSTRUCTION AND

00:29:05,670 --> 00:29:07,950
GO I KNOW THAT'S A DATE TIME AND IT WILL DO IT

00:29:07,950 --> 00:29:09,650
BUT YOU HAVE TO ADD THOSE TO IT.

00:29:09,650 --> 00:29:12,670
THEY'RE NOT THERE BY DEFAULT. I THINK I HAVE THAT RIGHT?

00:29:12,670 --> 00:29:19,059
DO I? SO JSON IN PYTHON IS A PRETTY GOOD OPTION

00:29:19,059 --> 00:29:20,650
EXCEPT FOR THE FACT THAT IT CLAIMS TO BE HUMAN READABLE

00:29:20,650 --> 00:29:24,230
AND IT'S REALLY NOT. LIKE, I THINK OF ALL THE HUMAN READABLE PARTS

00:29:24,230 --> 00:29:26,510
OF IT, YAML IS PROBABLY THE BEST BUT MAKE SURE

00:29:26,510 --> 00:29:27,740
YOU USE SAFE LOAD.

00:29:27,740 --> 00:29:29,850
>> AUDIENCE: AN EXCELLENT TALK. THANK YOU.

00:29:29,850 --> 00:29:30,470

YouTube URL: https://www.youtube.com/watch?v=kjZHjvrAS74


