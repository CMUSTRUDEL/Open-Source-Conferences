Title: Greg Ward - How to Write Reusable Code - PyCon 2015
Publication date: 2015-04-11
Playlist: PyCon 2015
Description: 
	"Speaker: Greg Ward

Learning to write high-quality, reusable code takes years of dedicated work. Or you can take a shortcut: attend this talk and learn some of the tricks I've figured out over a couple of decades of programming.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:04,819 --> 00:00:13,559
thank you Mike okay good mike is working

00:00:08,780 --> 00:00:18,630
so I don't have a title slide I don't

00:00:13,559 --> 00:00:22,130
have any slides there we go okay

00:00:18,630 --> 00:00:24,990
excellent so I've been a programmer for

00:00:22,130 --> 00:00:26,640
about thirty years now and I've been I

00:00:24,990 --> 00:00:28,560
have written a lot of code in that time

00:00:26,640 --> 00:00:31,320
I'm not super prodigious or anything

00:00:28,560 --> 00:00:33,450
it's just you can do a lot in 30 years

00:00:31,320 --> 00:00:36,450
and some of the code that I've written

00:00:33,450 --> 00:00:37,829
is crappy not very good and some of the

00:00:36,450 --> 00:00:40,710
code that I've written is is really

00:00:37,829 --> 00:00:42,320
quite nice if I do say so myself but and

00:00:40,710 --> 00:00:45,920
a lot of the code everything is just

00:00:42,320 --> 00:00:48,930
ordinary mundane mediocre boring code

00:00:45,920 --> 00:00:51,030
but the code that I'm proudest of the

00:00:48,930 --> 00:00:53,760
stuff that I really love is the stuff

00:00:51,030 --> 00:00:56,699
that I've sweated bullets over or

00:00:53,760 --> 00:00:59,969
sweated blood over and it's it's the

00:00:56,699 --> 00:01:02,070
code that is not merely or not

00:00:59,969 --> 00:01:04,739
necessarily usable to end users but

00:01:02,070 --> 00:01:07,590
reusable by my peers my fellow

00:01:04,739 --> 00:01:10,770
programmers you folks I don't know why I

00:01:07,590 --> 00:01:13,200
just I'm that that's something that that

00:01:10,770 --> 00:01:14,670
that's what motivates me some people are

00:01:13,200 --> 00:01:17,009
at love writing an amazing user

00:01:14,670 --> 00:01:19,799
interface some people love incredible

00:01:17,009 --> 00:01:22,650
mathematical abstractions I just like

00:01:19,799 --> 00:01:26,549
writing good libraries that can be

00:01:22,650 --> 00:01:29,939
reused by my peers and over the course

00:01:26,549 --> 00:01:32,220
of a couple of good ones and a lot of ok

00:01:29,939 --> 00:01:35,509
ones I've learned a few tricks I've

00:01:32,220 --> 00:01:38,490
learned things not to do things to do I

00:01:35,509 --> 00:01:40,860
some of these I've probably been taught

00:01:38,490 --> 00:01:42,720
to me on mailing lists or in classes

00:01:40,860 --> 00:01:44,340
some of them I've read in books and some

00:01:42,720 --> 00:01:45,899
of them I've just figured out by

00:01:44,340 --> 00:01:48,570
repeatedly doing things wrong and

00:01:45,899 --> 00:01:51,240
eventually figuring out oh it works

00:01:48,570 --> 00:01:52,740
better if I do it this way so um I

00:01:51,240 --> 00:01:54,659
thought I would distill some of that

00:01:52,740 --> 00:01:57,930
experience down and and share it with

00:01:54,659 --> 00:01:59,640
with the rest of you um but before I get

00:01:57,930 --> 00:02:03,229
to that I want to take you back in time

00:01:59,640 --> 00:02:05,969
to a distant vanished age in earlier era

00:02:03,229 --> 00:02:07,920
who remembers the early 90s oh sorry

00:02:05,969 --> 00:02:13,590
that's the the wrong 90s I'm talking

00:02:07,920 --> 00:02:16,810
about this 90s when when Agnew

00:02:13,590 --> 00:02:19,780
golden era was upon us our new golden

00:02:16,810 --> 00:02:21,549
age was upon us this amazing Wonder

00:02:19,780 --> 00:02:23,709
technology called object-oriented

00:02:21,549 --> 00:02:25,599
programming that was going to save the

00:02:23,709 --> 00:02:30,340
world change everything

00:02:25,599 --> 00:02:32,709
uh sure in a an amazing new way of

00:02:30,340 --> 00:02:35,230
thinking about software making software

00:02:32,709 --> 00:02:39,030
where everything would just be magically

00:02:35,230 --> 00:02:43,840
reusable and extensible because objects

00:02:39,030 --> 00:02:46,989
well this was mostly not really true it

00:02:43,840 --> 00:02:49,750
was just people making stuff up and

00:02:46,989 --> 00:02:51,669
writing magazine articles and books

00:02:49,750 --> 00:02:53,709
without really being very informed

00:02:51,669 --> 00:02:55,569
because it was a new technology and gia

00:02:53,709 --> 00:02:57,480
looked good on paper but we didn't

00:02:55,569 --> 00:03:04,389
really have the experience to see that

00:02:57,480 --> 00:03:05,829
well no it's not magic so anyway um a

00:03:04,389 --> 00:03:08,349
lot of people drank the kool-aid

00:03:05,829 --> 00:03:09,879
I admit I drank the kool-aid myself for

00:03:08,349 --> 00:03:12,970
a couple of years before I figured out

00:03:09,879 --> 00:03:15,609
oh it's not magic it's hard work to

00:03:12,970 --> 00:03:17,409
write reusable software some people

00:03:15,609 --> 00:03:21,519
actually drank the kool-aid continuously

00:03:17,409 --> 00:03:23,349
for 15 years and that resulted in a

00:03:21,519 --> 00:03:26,379
thing there's a Java library that

00:03:23,349 --> 00:03:28,959
contains a class called an abstract

00:03:26,379 --> 00:03:30,639
singleton proxy Factory mean if you

00:03:28,959 --> 00:03:32,440
don't understand what that means that's

00:03:30,639 --> 00:03:34,419
okay it's clearly explained in the

00:03:32,440 --> 00:03:37,150
documentation as a convenient proxy

00:03:34,419 --> 00:03:39,280
Factory mean superclass for proxy

00:03:37,150 --> 00:03:40,900
factory beans that create only

00:03:39,280 --> 00:03:43,209
Singleton's and that clears it right up

00:03:40,900 --> 00:03:45,010
so that's what happens when you you

00:03:43,209 --> 00:03:46,720
drink the kool-aid of object-oriented

00:03:45,010 --> 00:03:49,000
programming for too long but it turns

00:03:46,720 --> 00:03:52,389
out there are no silver bullets this was

00:03:49,000 --> 00:03:54,549
an article published in 1986 five or six

00:03:52,389 --> 00:03:57,340
years before the whole object-oriented

00:03:54,549 --> 00:04:02,079
craze took off in which Fred Brooks

00:03:57,340 --> 00:04:04,569
observed that there's no one single

00:04:02,079 --> 00:04:06,639
magic wonder technology that's going to

00:04:04,569 --> 00:04:07,979
solve all the problems with with

00:04:06,639 --> 00:04:11,889
software development

00:04:07,979 --> 00:04:13,870
he made an analogy or comparison to

00:04:11,889 --> 00:04:16,419
hardware engineering where movers law

00:04:13,870 --> 00:04:18,220
just sweeps problems away every 18

00:04:16,419 --> 00:04:21,700
months it doesn't work that way in

00:04:18,220 --> 00:04:24,930
software unfortunately and Fred Brooks

00:04:21,700 --> 00:04:24,930
was right there is no silver bullet

00:04:26,650 --> 00:04:30,170
functional programming is not a silver

00:04:28,580 --> 00:04:31,460
bullet co-routines are not a silver

00:04:30,170 --> 00:04:35,120
bullet what are the other flavors of the

00:04:31,460 --> 00:04:37,370
week pick whatever you like it's not a

00:04:35,120 --> 00:04:38,960
silver bullet nothing is going to change

00:04:37,370 --> 00:04:40,940
the world dramatically object-oriented

00:04:38,960 --> 00:04:42,380
programming didn't do it today's flavor

00:04:40,940 --> 00:04:46,130
of the month won't do it next year's

00:04:42,380 --> 00:04:48,290
flavor of the month won't do it instead

00:04:46,130 --> 00:04:52,520
the way that you write your usable code

00:04:48,290 --> 00:04:54,590
is through hard work it's not free but

00:04:52,520 --> 00:04:56,750
it's not magic it's hard work it

00:04:54,590 --> 00:05:01,670
requires forethought and attention to

00:04:56,750 --> 00:05:03,500
detail I'm not a super genius programmer

00:05:01,670 --> 00:05:06,500
like I said I have written some nice

00:05:03,500 --> 00:05:08,510
software in my time I sweated bullets to

00:05:06,500 --> 00:05:11,150
write that softer it took really hard

00:05:08,510 --> 00:05:13,370
work which is probably why I'm a little

00:05:11,150 --> 00:05:15,500
inordinately proud of it because it

00:05:13,370 --> 00:05:18,440
didn't come easily but if I can do it

00:05:15,500 --> 00:05:20,210
you can do it and you can learn from my

00:05:18,440 --> 00:05:23,260
failures maybe even learn from my

00:05:20,210 --> 00:05:25,880
successes so before I present my

00:05:23,260 --> 00:05:29,240
wonderful list of principles of writing

00:05:25,880 --> 00:05:32,270
reusable code it's not always necessary

00:05:29,240 --> 00:05:34,010
it's not always desirable do not fall

00:05:32,270 --> 00:05:36,800
into the trap of thinking everything

00:05:34,010 --> 00:05:39,470
must be a library this is something that

00:05:36,800 --> 00:05:42,380
happens in languages like Python Java

00:05:39,470 --> 00:05:44,600
c-sharp where that there's less of a

00:05:42,380 --> 00:05:46,460
distinction between library and

00:05:44,600 --> 00:05:48,169
applications so much of your application

00:05:46,460 --> 00:05:49,850
code just goes into source files that

00:05:48,169 --> 00:05:51,950
look like library code it's very

00:05:49,850 --> 00:05:53,450
tempting to make everything a library or

00:05:51,950 --> 00:05:56,419
to think that everything has to be

00:05:53,450 --> 00:05:59,120
reusable it doesn't there is absolutely

00:05:56,419 --> 00:06:01,040
nothing wrong with writing one piece of

00:05:59,120 --> 00:06:03,169
code that solves one problem that you

00:06:01,040 --> 00:06:06,230
need to solve today for this application

00:06:03,169 --> 00:06:08,510
that's absolutely fine now if you do

00:06:06,230 --> 00:06:11,210
that six times over the next four weeks

00:06:08,510 --> 00:06:13,520
and all those pieces of code look really

00:06:11,210 --> 00:06:15,650
the same maybe you need to step back and

00:06:13,520 --> 00:06:18,080
think about a reusable solution but

00:06:15,650 --> 00:06:22,810
don't fall into the trap of thinking you

00:06:18,080 --> 00:06:26,780
always have to write beautiful wonderful

00:06:22,810 --> 00:06:28,370
textbook reusable code however when you

00:06:26,780 --> 00:06:30,169
do need to do that when you have

00:06:28,370 --> 00:06:31,700
discovered a repeated pattern in your

00:06:30,169 --> 00:06:33,740
code and you want to write reusable

00:06:31,700 --> 00:06:37,490
software here are some principles I have

00:06:33,740 --> 00:06:39,470
discovered 9 is not a special magic

00:06:37,490 --> 00:06:43,160
number it fits nicely on this slide

00:06:39,470 --> 00:06:44,960
I it fits nicely in a 25-minute talk I

00:06:43,160 --> 00:06:46,790
could probably come up with 90

00:06:44,960 --> 00:06:48,380
principles if I wanted to but that would

00:06:46,790 --> 00:06:50,210
be a bit excessive I could probably come

00:06:48,380 --> 00:06:51,920
up with 15 I could probably trim it down

00:06:50,210 --> 00:06:53,750
to five if I only had a 10-minute talk

00:06:51,920 --> 00:06:57,140
anyway this is what fits into a

00:06:53,750 --> 00:06:59,210
25-minute talk so I'm not going to

00:06:57,140 --> 00:07:01,130
insult your intelligence by reading the

00:06:59,210 --> 00:07:02,510
list of principals at you instead I'm

00:07:01,130 --> 00:07:03,980
going to insult your intelligence by

00:07:02,510 --> 00:07:07,850
reading the bullet points on the slides

00:07:03,980 --> 00:07:11,630
about each princess I'm just kidding so

00:07:07,850 --> 00:07:13,400
number one it's nothing to do I mean one

00:07:11,630 --> 00:07:15,590
good way to write reusable code is to

00:07:13,400 --> 00:07:18,980
write better code be a better programmer

00:07:15,590 --> 00:07:21,260
and the way there are a lot of ways to

00:07:18,980 --> 00:07:23,780
become a better programmer something

00:07:21,260 --> 00:07:27,130
that we don't really emphasize very much

00:07:23,780 --> 00:07:29,660
in our education system or in our

00:07:27,130 --> 00:07:32,360
culture of at least in industry or

00:07:29,660 --> 00:07:34,940
academia or anywhere really is read more

00:07:32,360 --> 00:07:37,130
code this is something that Greg Wilson

00:07:34,940 --> 00:07:39,230
has been on a kick about for many years

00:07:37,130 --> 00:07:42,200
now and it resulted in the third book

00:07:39,230 --> 00:07:43,550
here beautiful code which is I have to

00:07:42,200 --> 00:07:45,620
confess I'm only halfway through it

00:07:43,550 --> 00:07:47,210
because I'm not a super genius and

00:07:45,620 --> 00:07:52,700
reading stuff like this takes me a long

00:07:47,210 --> 00:07:56,120
time it's hard work it's worth it it's a

00:07:52,700 --> 00:08:00,050
really good delve into some real-world

00:07:56,120 --> 00:08:01,070
systems how they work and and how

00:08:00,050 --> 00:08:03,229
they're written and how they're designed

00:08:01,070 --> 00:08:06,320
and why they work this way what are the

00:08:03,229 --> 00:08:08,960
competing forces in real actual live

00:08:06,320 --> 00:08:13,510
software not some academic textbook

00:08:08,960 --> 00:08:17,360
exercise the other two are older and

00:08:13,510 --> 00:08:19,490
timeless a good book about software is

00:08:17,360 --> 00:08:21,080
not about the programming language of

00:08:19,490 --> 00:08:23,210
the month or the library of the week

00:08:21,080 --> 00:08:25,220
it's about general principles and all

00:08:23,210 --> 00:08:28,160
three of these fit that bill they are

00:08:25,220 --> 00:08:31,010
timeless classics highly recommended

00:08:28,160 --> 00:08:33,260
write more code yes if you do something

00:08:31,010 --> 00:08:34,630
a lot you will get better at it but

00:08:33,260 --> 00:08:38,990
something about writing software

00:08:34,630 --> 00:08:39,940
requires you to write code and revisit

00:08:38,990 --> 00:08:42,890
it make it better

00:08:39,940 --> 00:08:45,050
critique your own code mercilessly

00:08:42,890 --> 00:08:47,240
refactor your own code ruthlessly

00:08:45,050 --> 00:08:48,860
because if you don't somebody else will

00:08:47,240 --> 00:08:51,020
and it

00:08:48,860 --> 00:08:52,730
it generally hurts less if you're a

00:08:51,020 --> 00:08:56,839
little merciless to your own code

00:08:52,730 --> 00:08:58,490
first before somebody else's I kind of

00:08:56,839 --> 00:08:59,959
sorry conflated the two bullet points

00:08:58,490 --> 00:09:02,000
about reading more code and reading more

00:08:59,959 --> 00:09:03,980
books whatever you get it finally do not

00:09:02,000 --> 00:09:05,750
please please please do not try to learn

00:09:03,980 --> 00:09:07,370
to program from Google it's a lot of

00:09:05,750 --> 00:09:09,529
good stuff out there on the internet but

00:09:07,370 --> 00:09:12,589
it's really not the way to learn how to

00:09:09,529 --> 00:09:16,240
program if that's what you're here for

00:09:12,589 --> 00:09:19,760
okay so a little more concrete useful

00:09:16,240 --> 00:09:23,170
advice everyday advice I think is don't

00:09:19,760 --> 00:09:25,730
write a class when a function will do

00:09:23,170 --> 00:09:28,010
people coming from our people still

00:09:25,730 --> 00:09:29,570
trapped in languages that only have

00:09:28,010 --> 00:09:31,459
classes often fall into this trap

00:09:29,570 --> 00:09:32,630
everything must be part of a class

00:09:31,459 --> 00:09:35,600
therefore orbitting must be

00:09:32,630 --> 00:09:36,889
object-oriented must be a class no no

00:09:35,600 --> 00:09:38,480
there's nothing wrong with functions and

00:09:36,889 --> 00:09:41,360
subroutines they're an extremely useful

00:09:38,480 --> 00:09:43,940
tool people wrote lots of really handy

00:09:41,360 --> 00:09:48,320
good reusable software before we had

00:09:43,940 --> 00:09:50,690
classes and objects however don't go

00:09:48,320 --> 00:09:52,610
overboard don't this is not a rant

00:09:50,690 --> 00:09:55,250
against object-oriented programming it's

00:09:52,610 --> 00:09:57,560
a great technique to have in the toolbox

00:09:55,250 --> 00:09:59,420
to use when it's appropriate so when you

00:09:57,560 --> 00:10:02,120
need a class write a class when you

00:09:59,420 --> 00:10:03,470
don't need a class don't write one so I

00:10:02,120 --> 00:10:06,199
want to show you an anti-pattern or

00:10:03,470 --> 00:10:08,569
maybe a code smell code smell is just

00:10:06,199 --> 00:10:10,760
something that maybe needs attention an

00:10:08,569 --> 00:10:14,990
anti-pattern oh we have a problem here

00:10:10,760 --> 00:10:18,649
so this is a class that does one thing

00:10:14,990 --> 00:10:23,480
it loads things from a a source of

00:10:18,649 --> 00:10:24,829
things and this so the code smell is

00:10:23,480 --> 00:10:26,899
when you when you have a class with only

00:10:24,829 --> 00:10:28,850
a single public method and it's a

00:10:26,899 --> 00:10:30,800
downright anti-pattern when that single

00:10:28,850 --> 00:10:33,500
public method is the only thing there if

00:10:30,800 --> 00:10:35,899
this if this thing loader had 600 lines

00:10:33,500 --> 00:10:39,350
of tricky interent intricate code buried

00:10:35,899 --> 00:10:41,089
in 17 private methods I'd say ok yeah

00:10:39,350 --> 00:10:42,529
that can be a class it smells a little

00:10:41,089 --> 00:10:44,810
bit funny because of the single public

00:10:42,529 --> 00:10:46,579
method but if it's one public method

00:10:44,810 --> 00:10:48,050
called load it's ten lines along and

00:10:46,579 --> 00:10:50,389
that's all it there is no reason for

00:10:48,050 --> 00:10:53,209
this to be a class just make a function

00:10:50,389 --> 00:10:55,579
but that's my 60 second version of a

00:10:53,209 --> 00:10:57,709
great talk Jackie direct Dietrich gave

00:10:55,579 --> 00:10:59,899
at PyCon a couple years ago highly

00:10:57,709 --> 00:11:04,250
recommended it's both informative and

00:10:59,899 --> 00:11:05,860
entertaining I would dig that up now the

00:11:04,250 --> 00:11:08,920
flip side of that

00:11:05,860 --> 00:11:10,750
somebody might walk watch Jax talk about

00:11:08,920 --> 00:11:12,460
stop writing classes and decide oh we

00:11:10,750 --> 00:11:16,300
should never write classes ever again

00:11:12,460 --> 00:11:19,120
no because a class is just a bunch of

00:11:16,300 --> 00:11:21,730
functions with some shared state that

00:11:19,120 --> 00:11:23,080
all operate on that state together that

00:11:21,730 --> 00:11:24,760
happens all the time in programming

00:11:23,080 --> 00:11:26,680
that's why object-oriented programming

00:11:24,760 --> 00:11:28,960
that was invented so if you have a bunch

00:11:26,680 --> 00:11:33,150
of functions that all have a connection

00:11:28,960 --> 00:11:35,770
and load and save and make queries about

00:11:33,150 --> 00:11:38,410
articles or things or foo bars or

00:11:35,770 --> 00:11:41,440
whatever well that's a class make it one

00:11:38,410 --> 00:11:42,700
so it's just a small syntactic change

00:11:41,440 --> 00:11:45,550
when you're using a language that

00:11:42,700 --> 00:11:46,750
supports classes so do it take advantage

00:11:45,550 --> 00:11:51,340
of the features the language provides

00:11:46,750 --> 00:11:52,930
don't be dogmatic all right I'm old

00:11:51,340 --> 00:11:56,890
enough that when I was in high school

00:11:52,930 --> 00:11:58,270
and early undergraduate career Pascal

00:11:56,890 --> 00:12:00,820
was the teaching language of the day

00:11:58,270 --> 00:12:02,800
things have moved on we have better

00:12:00,820 --> 00:12:06,610
teaching languages than Pascal nowadays

00:12:02,800 --> 00:12:09,820
thank goodness but Pascal had a really

00:12:06,610 --> 00:12:12,540
interesting feature I think we've lost

00:12:09,820 --> 00:12:15,010
salutely those of us in the mainstream

00:12:12,540 --> 00:12:17,920
imperative programming community have

00:12:15,010 --> 00:12:20,620
lost sight of this the distinction

00:12:17,920 --> 00:12:22,900
between functions and procedures in a

00:12:20,620 --> 00:12:26,230
nutshell functions compute stuff

00:12:22,900 --> 00:12:28,780
procedures do stuff procedures have side

00:12:26,230 --> 00:12:32,890
effects functions don't or really

00:12:28,780 --> 00:12:34,750
shouldn't so your mainstream imperative

00:12:32,890 --> 00:12:36,820
programming languages including Python

00:12:34,750 --> 00:12:39,370
do not care about this distinction which

00:12:36,820 --> 00:12:43,020
is unfortunate you should care even if

00:12:39,370 --> 00:12:45,070
your language doesn't and the way I

00:12:43,020 --> 00:12:46,510
remember this the way I keep this in my

00:12:45,070 --> 00:12:49,780
head is a very simple rule of thumb

00:12:46,510 --> 00:12:53,020
every function should either return a

00:12:49,780 --> 00:12:57,220
value or have side-effects do not

00:12:53,020 --> 00:12:59,290
combine both I am NOT anti side-effect

00:12:57,220 --> 00:13:01,150
you cannot write software without side

00:12:59,290 --> 00:13:03,190
effects just don't combine them in the

00:13:01,150 --> 00:13:05,530
same function some things have side

00:13:03,190 --> 00:13:07,510
effects because they do stuff some

00:13:05,530 --> 00:13:09,310
things have return values because they

00:13:07,510 --> 00:13:11,020
compute stuff just draw a nice clear

00:13:09,310 --> 00:13:11,790
line between those two and we'll all get

00:13:11,020 --> 00:13:14,260
along fine

00:13:11,790 --> 00:13:17,410
so here's an anti-pattern that you often

00:13:14,260 --> 00:13:18,529
see in C code I've deliberately not

00:13:17,410 --> 00:13:21,289
written this as C

00:13:18,529 --> 00:13:23,059
because you'll see in a second the

00:13:21,289 --> 00:13:24,799
solution to this can't be done in C

00:13:23,059 --> 00:13:26,569
unfortunately C programmers are

00:13:24,799 --> 00:13:30,199
notorious for this sort of thing it's a

00:13:26,569 --> 00:13:31,759
performance hack because really the main

00:13:30,199 --> 00:13:33,799
reason to program and C is that you're

00:13:31,759 --> 00:13:35,089
obsessed with performance so of course

00:13:33,799 --> 00:13:36,829
you're going to have performance hacks

00:13:35,089 --> 00:13:39,589
everywhere you have a function that

00:13:36,829 --> 00:13:41,959
operates modifies mutates something

00:13:39,589 --> 00:13:45,799
while returning a value that is derived

00:13:41,959 --> 00:13:47,839
from that computation this function is

00:13:45,799 --> 00:13:53,989
not as reusable as it could be because

00:13:47,839 --> 00:13:57,739
of that mixture of side effects and and

00:13:53,989 --> 00:14:00,619
return value computation it's not just C

00:13:57,739 --> 00:14:03,289
programmers that do this three-four days

00:14:00,619 --> 00:14:06,469
ago at work I was reviewing the work

00:14:03,289 --> 00:14:09,229
some code from a colleague and spotted

00:14:06,469 --> 00:14:11,839
this or something very much like it

00:14:09,229 --> 00:14:13,459
it's a query function that returns a

00:14:11,839 --> 00:14:15,049
dictionary unless you pass in a

00:14:13,459 --> 00:14:17,539
dictionary in which case it mutates that

00:14:15,049 --> 00:14:18,889
dictionary and then returns it which is

00:14:17,539 --> 00:14:20,389
the sort of thing that C programmers do

00:14:18,889 --> 00:14:22,579
a lot too you don't often see it in

00:14:20,389 --> 00:14:25,039
Python code because it's a performance

00:14:22,579 --> 00:14:27,639
hack I suspect it was written this way

00:14:25,039 --> 00:14:29,989
to avoid the terrible expense of

00:14:27,639 --> 00:14:32,269
updating an existing dictionary from the

00:14:29,989 --> 00:14:34,789
return value of this one I'm sure it

00:14:32,269 --> 00:14:36,649
saves microseconds at runtime and if you

00:14:34,789 --> 00:14:37,789
care about those microseconds I'm afraid

00:14:36,649 --> 00:14:39,889
you're using the wrong programming

00:14:37,789 --> 00:14:41,599
language yet they're they're damn yes

00:14:39,889 --> 00:14:43,309
there are times in places in Python

00:14:41,599 --> 00:14:45,409
where you should care about the overhead

00:14:43,309 --> 00:14:47,929
of creating a dictionary this is

00:14:45,409 --> 00:14:52,399
probably not one of them so a better way

00:14:47,929 --> 00:14:54,199
in both of these cases is just have a

00:14:52,399 --> 00:14:57,409
return value or just have a side-effect

00:14:54,199 --> 00:14:59,389
so the string lungeing example you don't

00:14:57,409 --> 00:15:01,129
modify don't mutate the existing string

00:14:59,389 --> 00:15:03,589
you return a new one with the change

00:15:01,129 --> 00:15:04,819
that you want yes that's more expensive

00:15:03,589 --> 00:15:07,339
you have to allocate a new string and

00:15:04,819 --> 00:15:09,949
copy it I'm sorry it's also reusable if

00:15:07,339 --> 00:15:13,039
you value sometimes you do value

00:15:09,949 --> 00:15:15,559
performance over reusability so screw

00:15:13,039 --> 00:15:17,569
reusability and go for performance but

00:15:15,559 --> 00:15:20,059
if you want reusable code sometimes you

00:15:17,569 --> 00:15:21,619
have to sacrifice performance and the

00:15:20,059 --> 00:15:23,929
Python example it just gets so much

00:15:21,619 --> 00:15:26,409
simpler in every way if you just return

00:15:23,929 --> 00:15:26,409
the new deck

00:15:26,560 --> 00:15:32,959
frameworks are nice but generally

00:15:29,779 --> 00:15:35,329
libraries are nicer and the difference

00:15:32,959 --> 00:15:37,880
is that it with the library you the

00:15:35,329 --> 00:15:39,529
programmer using the library is in

00:15:37,880 --> 00:15:41,510
control with a framework the framework

00:15:39,529 --> 00:15:44,300
is in control and you're merely

00:15:41,510 --> 00:15:46,250
supplying code that you really hope the

00:15:44,300 --> 00:15:49,070
framework will run just in the right way

00:15:46,250 --> 00:15:51,440
you want it to and using a framework is

00:15:49,070 --> 00:15:53,810
typically an all-or-nothing proposal you

00:15:51,440 --> 00:15:56,180
can't just say oh there's this nice

00:15:53,810 --> 00:15:57,949
little bit of request parsing code in

00:15:56,180 --> 00:16:00,260
Django that I need I'll just call that

00:15:57,949 --> 00:16:02,180
function because you can't it's very

00:16:00,260 --> 00:16:05,240
deep in a framework and if you don't

00:16:02,180 --> 00:16:08,300
swallow the framework hole too bad you

00:16:05,240 --> 00:16:10,100
can't reuse that code so code that just

00:16:08,300 --> 00:16:11,389
if you just want have it somebody you

00:16:10,100 --> 00:16:15,290
know why doesn't somebody just write a

00:16:11,389 --> 00:16:19,100
library of requests HTTP header parsing

00:16:15,290 --> 00:16:20,720
because that's nice and reusable don't

00:16:19,100 --> 00:16:22,940
go overboard with these ideas I'm not

00:16:20,720 --> 00:16:26,329
anti object-oriented programming despite

00:16:22,940 --> 00:16:28,790
the jokes in this talk classes are not

00:16:26,329 --> 00:16:30,560
evil neither our side effects side

00:16:28,790 --> 00:16:32,329
effects are inevitable you cannot write

00:16:30,560 --> 00:16:36,350
software without side effects whatever

00:16:32,329 --> 00:16:40,370
the Haskell people tell you and find

00:16:36,350 --> 00:16:42,709
certain problem domains really scream

00:16:40,370 --> 00:16:44,209
out to constrain the application

00:16:42,709 --> 00:16:45,860
developer I'm looking at you web

00:16:44,209 --> 00:16:47,420
development why do you think there are

00:16:45,860 --> 00:16:49,220
so many web frameworks because web

00:16:47,420 --> 00:16:52,430
development really benefits from

00:16:49,220 --> 00:16:54,829
following a carefully controlled garden

00:16:52,430 --> 00:16:57,140
path frameworks are not evil they're

00:16:54,829 --> 00:17:00,769
just less reusable than libraries

00:16:57,140 --> 00:17:03,320
there's still a good thing to have so

00:17:00,769 --> 00:17:07,130
when you're writing this library I hope

00:17:03,320 --> 00:17:09,410
or maybe framework one thing one

00:17:07,130 --> 00:17:12,799
temptation you must avoid is the

00:17:09,410 --> 00:17:14,540
temptation to solve everything if your

00:17:12,799 --> 00:17:17,720
library is popular even if it's only

00:17:14,540 --> 00:17:19,040
popular among your your co-workers six

00:17:17,720 --> 00:17:21,020
or eight or ten or fifty other

00:17:19,040 --> 00:17:22,880
programmers or if it's popular with

00:17:21,020 --> 00:17:24,740
hundreds or thousands of people all over

00:17:22,880 --> 00:17:27,620
the internet you are going to get

00:17:24,740 --> 00:17:32,030
requests to add features enhancements

00:17:27,620 --> 00:17:34,490
change things avoid the temptation to

00:17:32,030 --> 00:17:36,290
handle every single case because there's

00:17:34,490 --> 00:17:38,600
the risk that you will get something

00:17:36,290 --> 00:17:40,220
wrong and when you get something wrong

00:17:38,600 --> 00:17:43,259
in a library

00:17:40,220 --> 00:17:46,649
who can remove that bit of ill-advised

00:17:43,259 --> 00:17:47,989
code well in the general case nobody

00:17:46,649 --> 00:17:50,159
because of backwards compatibility

00:17:47,989 --> 00:17:52,950
constraints you stuck with that wrong

00:17:50,159 --> 00:17:55,399
code forever and so are all of your

00:17:52,950 --> 00:17:57,899
users whereas if you leave something out

00:17:55,399 --> 00:18:00,029
who are the users of your library it's

00:17:57,899 --> 00:18:02,399
your fellow programmers who can write a

00:18:00,029 --> 00:18:04,200
little bit of code to do what your

00:18:02,399 --> 00:18:06,210
library doesn't do it's your fellow

00:18:04,200 --> 00:18:08,399
programmers writing a library is not

00:18:06,210 --> 00:18:10,799
like writing an application the users of

00:18:08,399 --> 00:18:13,049
an application generally can't extend it

00:18:10,799 --> 00:18:17,369
the users of a library are the best

00:18:13,049 --> 00:18:21,559
people in the world to extend it testing

00:18:17,369 --> 00:18:24,389
is not optional testing is not some

00:18:21,559 --> 00:18:27,450
flavor of the week crazy new idea

00:18:24,389 --> 00:18:31,080
automated testing I should say it is

00:18:27,450 --> 00:18:34,529
absolutely mandatory for any sort of

00:18:31,080 --> 00:18:36,299
reusable code if you if you claim to

00:18:34,529 --> 00:18:38,340
provide a library that I can use in my

00:18:36,299 --> 00:18:41,129
application and there are no automated

00:18:38,340 --> 00:18:42,869
tests that I can run I'm sorry that is

00:18:41,129 --> 00:18:47,009
not a library that is not reusable

00:18:42,869 --> 00:18:49,470
please return to the starting point

00:18:47,009 --> 00:18:52,409
collect $200 go around the board again

00:18:49,470 --> 00:18:55,409
and write some unit tests then maybe I

00:18:52,409 --> 00:18:57,149
can reuse your library automated tests

00:18:55,409 --> 00:19:01,739
are not sufficient but they are

00:18:57,149 --> 00:19:03,529
necessary documentation take that

00:19:01,739 --> 00:19:06,690
previous slide and repeat with

00:19:03,529 --> 00:19:10,049
substitute tests for documentation it is

00:19:06,690 --> 00:19:12,119
not it's just you can't supply a library

00:19:10,049 --> 00:19:14,669
without documentation the absolute bare

00:19:12,119 --> 00:19:16,799
minimum is the inline reference

00:19:14,669 --> 00:19:18,299
documentation docstrings that every

00:19:16,799 --> 00:19:20,309
modern programming language gives you

00:19:18,299 --> 00:19:21,960
it's a bit a little bit on every public

00:19:20,309 --> 00:19:23,820
function every public module every

00:19:21,960 --> 00:19:26,369
public class what to do what's it for

00:19:23,820 --> 00:19:29,609
what's it return but that is the bare

00:19:26,369 --> 00:19:31,200
minimum please please please take the

00:19:29,609 --> 00:19:33,330
time to supply some narrative

00:19:31,200 --> 00:19:36,749
documentation a code walkthrough how do

00:19:33,330 --> 00:19:38,190
I do X if it's a small library you can

00:19:36,749 --> 00:19:39,899
probably do that in your readme file

00:19:38,190 --> 00:19:41,970
it'll probably take you 10 minutes to

00:19:39,899 --> 00:19:43,529
write and the users of your library will

00:19:41,970 --> 00:19:45,649
be saved many hours of head-scratching

00:19:43,529 --> 00:19:48,090
and confusion and frustration and

00:19:45,649 --> 00:19:49,230
realizing oh I guess I should have used

00:19:48,090 --> 00:19:53,100
a different library one with

00:19:49,230 --> 00:19:55,860
documentation finally

00:19:53,100 --> 00:19:59,220
extensibility and reusability are not to

00:19:55,860 --> 00:20:00,660
say oh sorry I'm into so these these the

00:19:59,220 --> 00:20:03,000
two points about documentation and

00:20:00,660 --> 00:20:07,830
testing actually feedback really nicely

00:20:03,000 --> 00:20:11,429
on the point about this

00:20:07,830 --> 00:20:15,330
lunging arm conflating return values and

00:20:11,429 --> 00:20:17,580
side effects when you document every

00:20:15,330 --> 00:20:21,539
public method or function scrupulously

00:20:17,580 --> 00:20:24,570
you discover the weird strange corners

00:20:21,539 --> 00:20:26,340
of your API like there's this optional

00:20:24,570 --> 00:20:28,650
foo if you pass it in it will be

00:20:26,340 --> 00:20:31,530
populated and returned instead of a new

00:20:28,650 --> 00:20:33,299
dick it's actually it takes longer to

00:20:31,530 --> 00:20:35,460
explain that in English than to

00:20:33,299 --> 00:20:36,600
implement it in Python but I must

00:20:35,460 --> 00:20:38,730
explain it in English

00:20:36,600 --> 00:20:40,950
because that is what documentation is

00:20:38,730 --> 00:20:42,870
written in if documentation was written

00:20:40,950 --> 00:20:47,549
in Python we wouldn't need documentation

00:20:42,870 --> 00:20:49,380
and we'd all be interpreters when it

00:20:47,549 --> 00:20:51,059
takes longer to express something in

00:20:49,380 --> 00:20:53,429
natural language than it took you to

00:20:51,059 --> 00:20:56,100
express in code it's probably too

00:20:53,429 --> 00:20:57,630
complicated for the API the other thing

00:20:56,100 --> 00:20:59,820
is when you have a feature like this

00:20:57,630 --> 00:21:02,549
you've just doubled the size of your

00:20:59,820 --> 00:21:04,140
unit tests there's more features you

00:21:02,549 --> 00:21:05,760
have to test okay what happens if I pass

00:21:04,140 --> 00:21:08,580
in food what happens if I pass in a

00:21:05,760 --> 00:21:10,320
string a list something bogus for foo

00:21:08,580 --> 00:21:11,909
what happens if I pass in a dictionary

00:21:10,320 --> 00:21:14,309
that's empty a dictionary that's not

00:21:11,909 --> 00:21:15,900
empty what are conflicts like oh my god

00:21:14,309 --> 00:21:17,940
okay so I probably just increase the

00:21:15,900 --> 00:21:20,970
size of the unit test by a factor of 10

00:21:17,940 --> 00:21:22,890
whereas this version if you're a

00:21:20,970 --> 00:21:24,720
function that just takes some inputs and

00:21:22,890 --> 00:21:25,409
returned some outputs that's dead easy

00:21:24,720 --> 00:21:27,750
to test

00:21:25,409 --> 00:21:32,039
oh it's also really easy to document one

00:21:27,750 --> 00:21:35,549
sentence and it's reusable win-win-win

00:21:32,039 --> 00:21:38,070
um so writing documentation and writing

00:21:35,549 --> 00:21:40,380
tests is a really good way to find a the

00:21:38,070 --> 00:21:42,150
ugly nasty hairy bits of your library

00:21:40,380 --> 00:21:44,520
that you probably didn't think hard

00:21:42,150 --> 00:21:46,380
enough about when it was just code

00:21:44,520 --> 00:21:51,409
written for that one application and it

00:21:46,380 --> 00:21:53,490
wasn't yet reusable code finally

00:21:51,409 --> 00:21:55,890
extensibility this is not a talk about

00:21:53,490 --> 00:21:57,299
how to write extensively code because I

00:21:55,890 --> 00:21:58,919
don't actually know how to write

00:21:57,299 --> 00:22:01,020
extensible code I've never really done

00:21:58,919 --> 00:22:03,390
very much of it um if you know how to

00:22:01,020 --> 00:22:04,950
write extensible code please come up

00:22:03,390 --> 00:22:06,090
here and give a talk on it I'll be first

00:22:04,950 --> 00:22:09,900
in line to see it

00:22:06,090 --> 00:22:11,429
to learn your tricks so this is another

00:22:09,900 --> 00:22:13,890
one of those things that the snake oil

00:22:11,429 --> 00:22:15,419
salesman from the 90s promised promised

00:22:13,890 --> 00:22:18,000
about object-oriented programming that

00:22:15,419 --> 00:22:21,299
if we all started using Fortran 95 and

00:22:18,000 --> 00:22:25,289
Visual Basic 6 extensibility reusability

00:22:21,299 --> 00:22:28,140
we just magically now it didn't happen I

00:22:25,289 --> 00:22:31,919
fell for that you can actually see the

00:22:28,140 --> 00:22:35,090
results of my tomfoolery in the Python

00:22:31,919 --> 00:22:37,289
standard library I apologize for that

00:22:35,090 --> 00:22:39,690
but it's not true it doesn't work that

00:22:37,289 --> 00:22:42,809
way I suspect the writing extensible

00:22:39,690 --> 00:22:44,640
code is also hard work and difficult but

00:22:42,809 --> 00:22:46,260
not magic but I don't know I'd love to

00:22:44,640 --> 00:22:47,880
have somebody come and give a talk on

00:22:46,260 --> 00:22:50,149
that because it is a different property

00:22:47,880 --> 00:22:54,809
of software independent orthogonal to

00:22:50,149 --> 00:22:57,240
reusability so um no such thing as a

00:22:54,809 --> 00:22:59,730
free lunch I'm afraid there's no magic

00:22:57,240 --> 00:23:01,470
pixie dust there's no wonder technology

00:22:59,730 --> 00:23:03,750
that's going to solve all the world's

00:23:01,470 --> 00:23:06,090
problems 20 years ago it wasn't

00:23:03,750 --> 00:23:09,029
object-oriented programming and today

00:23:06,090 --> 00:23:10,380
it's not functional programming or

00:23:09,029 --> 00:23:13,440
asynchronous programming they're all

00:23:10,380 --> 00:23:15,360
useful absolutely good tricks to know

00:23:13,440 --> 00:23:18,240
about good tools to have in the toolbox

00:23:15,360 --> 00:23:20,640
they're not magic pixie dust good any

00:23:18,240 --> 00:23:23,789
good anything good software requires

00:23:20,640 --> 00:23:25,679
hard work and that applies to reusable

00:23:23,789 --> 00:23:28,580
code I strongly suspect it applies to

00:23:25,679 --> 00:23:31,110
extensible code and finally beware of

00:23:28,580 --> 00:23:31,529
clueless pontificate errs pompous

00:23:31,110 --> 00:23:33,990
windbag

00:23:31,529 --> 00:23:37,260
snake oil salesmen and people who give

00:23:33,990 --> 00:23:39,980
talks at conferences thank you we have

00:23:37,260 --> 00:23:39,980
time for questions

00:23:44,180 --> 00:23:48,180
all right so we have a few minutes for

00:23:46,890 --> 00:23:58,230
questions if you want to pick Greg's

00:23:48,180 --> 00:24:00,780
brain what you were saying about

00:23:58,230 --> 00:24:02,940
returning a value versus side effecting

00:24:00,780 --> 00:24:05,310
I completely agree I was just wondering

00:24:02,940 --> 00:24:06,780
about the kind of an edge case I see a

00:24:05,310 --> 00:24:10,080
lot of functions that return a boolean

00:24:06,780 --> 00:24:12,360
that's basically did you do the thing or

00:24:10,080 --> 00:24:15,540
not and it's not really like an

00:24:12,360 --> 00:24:16,770
exception exactly it's just it's fine if

00:24:15,540 --> 00:24:19,680
you didn't do it I would just like to

00:24:16,770 --> 00:24:22,860
know yeah I've done that myself that's a

00:24:19,680 --> 00:24:25,200
pattern I use myself but you know it's a

00:24:22,860 --> 00:24:29,880
pattern I it's a pattern I tend to use

00:24:25,200 --> 00:24:31,530
in non-reusable application code ah I

00:24:29,880 --> 00:24:33,090
think I'd rather not do that in a

00:24:31,530 --> 00:24:35,700
library I'd rather not see that in a

00:24:33,090 --> 00:24:37,320
library there's nothing wrong with it in

00:24:35,700 --> 00:24:39,920
single purpose application code though

00:24:37,320 --> 00:24:42,870
so would you rather throw an exception

00:24:39,920 --> 00:24:45,960
it depends on circumstances I mean I

00:24:42,870 --> 00:24:47,520
suppose iterators do throw exceptions at

00:24:45,960 --> 00:24:51,090
the end right even though they're always

00:24:47,520 --> 00:24:52,860
going to do that yeah stop iteration is

00:24:51,090 --> 00:24:54,840
a little bit of an abuse of exceptions

00:24:52,860 --> 00:24:56,370
too for control flow and that's the sort

00:24:54,840 --> 00:24:58,380
of thing that makes an T exception

00:24:56,370 --> 00:25:00,390
people really makes their skin crawl

00:24:58,380 --> 00:25:04,080
so it's probably not a good

00:25:00,390 --> 00:25:05,880
justification for exceptions okay so no

00:25:04,080 --> 00:25:08,760
magical solution there I don't have a

00:25:05,880 --> 00:25:14,150
magical solution now I'm all out of

00:25:08,760 --> 00:25:16,550
magic pixie dust hey thanks for the talk

00:25:14,150 --> 00:25:19,050
there's a lot of buzz right now about

00:25:16,550 --> 00:25:21,240
what it used to be SOA now it's

00:25:19,050 --> 00:25:23,220
microservices so specifically for

00:25:21,240 --> 00:25:25,710
sharing code between applications that

00:25:23,220 --> 00:25:27,540
may or may not be related but have you

00:25:25,710 --> 00:25:29,940
know common use cases do you have any

00:25:27,540 --> 00:25:35,700
guidelines or pitfalls or anything like

00:25:29,940 --> 00:25:37,410
that um well you didn't I I don't think

00:25:35,700 --> 00:25:39,240
everything can be a microservice I

00:25:37,410 --> 00:25:41,370
suspect at some point you have to write

00:25:39,240 --> 00:25:43,290
a library like if all your services are

00:25:41,370 --> 00:25:45,030
written in the same language you're

00:25:43,290 --> 00:25:49,050
going to have some common code and a

00:25:45,030 --> 00:25:50,550
library makes a lot of sense just have

00:25:49,050 --> 00:25:52,200
some shared code it's not the end of the

00:25:50,550 --> 00:25:52,860
world just extract the library and

00:25:52,200 --> 00:25:58,470
absolutely

00:25:52,860 --> 00:26:01,260
absolutely hi I just want to say awesome

00:25:58,470 --> 00:26:03,179
talk I love this light about functions

00:26:01,260 --> 00:26:05,299
versus procedures thank you so much for

00:26:03,179 --> 00:26:07,620
bringing that out it's it's amazing and

00:26:05,299 --> 00:26:07,980
not everything has to be a class great

00:26:07,620 --> 00:26:13,679
work

00:26:07,980 --> 00:26:16,919
thanks a lot also thanks great talk

00:26:13,679 --> 00:26:18,870
loved all the stuff how can I convince

00:26:16,919 --> 00:26:24,480
other people that it is actually

00:26:18,870 --> 00:26:26,580
valuable stuff well I think have you

00:26:24,480 --> 00:26:30,389
convinced them that reusing code is a

00:26:26,580 --> 00:26:35,250
good thing working on it okay me too um

00:26:30,389 --> 00:26:37,200
yeah you're not suffering alone yeah I

00:26:35,250 --> 00:26:38,610
think I think convincing people step one

00:26:37,200 --> 00:26:40,320
is convince people to factor out common

00:26:38,610 --> 00:26:46,169
libraries instead of constantly

00:26:40,320 --> 00:26:48,120
duplicating code and step two

00:26:46,169 --> 00:26:50,190
probably concurrent with step one is say

00:26:48,120 --> 00:26:52,769
oh look if you make this little change

00:26:50,190 --> 00:26:54,840
to your library the tests are smaller

00:26:52,769 --> 00:27:02,070
the documentation is shorter oh and it's

00:26:54,840 --> 00:27:04,649
more reusable I'm literally through this

00:27:02,070 --> 00:27:06,330
process at work in the last week I wait

00:27:04,649 --> 00:27:07,919
I wasn't the one who suggested factoring

00:27:06,330 --> 00:27:10,220
out the library but I was the one who

00:27:07,919 --> 00:27:15,720
spotted some of the flaws in the API so

00:27:10,220 --> 00:27:20,880
um it's hard work do it keep at it

00:27:15,720 --> 00:27:23,010
don't give up all right thanks hi I'm

00:27:20,880 --> 00:27:25,200
wondering where can learn more so what

00:27:23,010 --> 00:27:30,210
I'd love to see is an example of say a

00:27:25,200 --> 00:27:31,799
tool that doesn't work that that can be

00:27:30,210 --> 00:27:33,389
changed I see the initial code that I

00:27:31,799 --> 00:27:34,289
see that changes that I made I see how

00:27:33,389 --> 00:27:38,370
it's used

00:27:34,289 --> 00:27:40,049
do you have examples like that um so the

00:27:38,370 --> 00:27:43,470
three books that I referenced are pretty

00:27:40,049 --> 00:27:44,669
good they're test-driven development

00:27:43,470 --> 00:27:48,720
I think somebody wrote a book on this

00:27:44,669 --> 00:27:52,230
like ten years ago it was popular in the

00:27:48,720 --> 00:27:54,210
Java community um I can't remember who

00:27:52,230 --> 00:27:55,769
wrote it just search for books called

00:27:54,210 --> 00:27:58,980
test-driven development I'm pretty sure

00:27:55,769 --> 00:28:03,559
they're out there sorry it was Kent Beck

00:27:58,980 --> 00:28:03,559
okay great Thanks yeah

00:28:03,650 --> 00:28:08,820
hi thanks for the talk I especially

00:28:06,270 --> 00:28:10,140
appreciated the articulation that if you

00:28:08,820 --> 00:28:12,630
have a bunch of related functions with

00:28:10,140 --> 00:28:16,529
shared state than a class is good for

00:28:12,630 --> 00:28:19,110
that I was wondering I remember in last

00:28:16,529 --> 00:28:21,029
year at Eric roses talked about among

00:28:19,110 --> 00:28:24,210
other things API design library design

00:28:21,029 --> 00:28:26,279
he talked about start with a use case

00:28:24,210 --> 00:28:27,659
like instead of trying to write you know

00:28:26,279 --> 00:28:30,240
frameworks and libraries from scratch

00:28:27,659 --> 00:28:33,320
start with the use case of what you

00:28:30,240 --> 00:28:35,490
wanted to accomplish and then pull

00:28:33,320 --> 00:28:37,830
abstractions from that can you speak a

00:28:35,490 --> 00:28:39,570
little about that absolutely I think it

00:28:37,830 --> 00:28:42,870
was the the people behind Ruby on Rails

00:28:39,570 --> 00:28:46,320
who coined the phrase don't don't create

00:28:42,870 --> 00:28:47,870
frameworks extract them yes I did

00:28:46,320 --> 00:28:50,429
another way of saying the same thing

00:28:47,870 --> 00:28:51,630
start with and yeah and yes libraries

00:28:50,429 --> 00:28:54,090
should have use cases just like

00:28:51,630 --> 00:28:55,770
applications should and so when you're

00:28:54,090 --> 00:28:58,679
writing reusable code I mean does that

00:28:55,770 --> 00:29:01,919
mean that the implication should be that

00:28:58,679 --> 00:29:05,010
maybe at first it's okay that sort of my

00:29:01,919 --> 00:29:08,070
first draft is not quote reusable until

00:29:05,010 --> 00:29:09,990
after I've sort of used it in the wilder

00:29:08,070 --> 00:29:11,970
and production enough then sure yeah

00:29:09,990 --> 00:29:14,399
yeah absolutely especially if you're

00:29:11,970 --> 00:29:16,470
writing a library like within your

00:29:14,399 --> 00:29:20,250
company you have a lot more freedom to

00:29:16,470 --> 00:29:23,029
make incompatible changes and and by all

00:29:20,250 --> 00:29:25,230
means embrace that freedom I've done it

00:29:23,029 --> 00:29:27,210
what was the other thing oh yeah

00:29:25,230 --> 00:29:29,789
something I have done occasionally not

00:29:27,210 --> 00:29:33,029
enough I should do it more write the

00:29:29,789 --> 00:29:35,760
documentation for your library first the

00:29:33,029 --> 00:29:37,380
narrative here's how you do stuff and it

00:29:35,760 --> 00:29:39,480
forces you to think about what's the use

00:29:37,380 --> 00:29:40,830
case for this library I think it's a

00:29:39,480 --> 00:29:45,120
good take it's similar to writing the

00:29:40,830 --> 00:29:47,640
tests first but it's more chatty thank

00:29:45,120 --> 00:29:51,140
you yep all right thank you very much

00:29:47,640 --> 00:29:51,140

YouTube URL: https://www.youtube.com/watch?v=r9cnHO15YgU


