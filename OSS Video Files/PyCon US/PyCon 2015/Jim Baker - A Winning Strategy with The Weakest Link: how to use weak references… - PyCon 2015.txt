Title: Jim Baker - A Winning Strategy with The Weakest Link: how to use weak referencesâ€¦ - PyCon 2015
Publication date: 2015-04-12
Playlist: PyCon 2015
Description: 
	"Speaker: Jim Baker

Working with weak references should not just be for Python wizards. Whether you have a cache, memoizing a function, tracking objects, or various other bookkeeping needs, you definitely do not want code leaking memory or resources. In this talk, we will look at illuminating examples drawn from a variety of sources on how to use weak references to prevent such bugs.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:06,310 --> 00:00:11,280
SOUNDS LIKE YOU CAN HEAR ME.

00:00:11,280 --> 00:00:16,940
TODAY I HAVE THE PLEASURE OF INTRODUCING JIM BAKER FROM THE SUNNY STATE OF COLORADO.

00:00:16,940 --> 00:00:20,750
HE'S AN AVID SKIER, A RACKSPACE EMPLOYEE AND A

00:00:20,750 --> 00:00:29,970
CORE JTHON DEVELOPER AND TODAY HE WILL BE SPEAKING ON HOW TO MAKE YOUR CODE MORE ROBUST.

00:00:29,970 --> 00:00:34,610
TAKE IT AWAY, JIM.

00:00:34,610 --> 00:00:35,770
>> THANKS.

00:00:35,770 --> 00:00:41,430
[ Applause ] >> I THINK THERE ARE PEOPLE OUT THERE, I CAN'T

00:00:41,430 --> 00:00:46,480
QUITE SEE YOU BUT I'M GLAD TO HEAR THE CLAPS SO

00:00:46,480 --> 00:00:49,690
ANY EVENT, SOME POSSIBLE QUESTIONS THAT YOU MIGHT

00:00:49,690 --> 00:00:52,210
HAVE COMING INTO THIS TALK ARE, WHAT EXACTLY ARE

00:00:52,210 --> 00:00:54,960
WEAK REFERENCES, ANYWAY?

00:00:54,960 --> 00:00:58,400
HOW DO THEY DIFFER FROM STRONG REFERENCES?

00:00:58,400 --> 00:01:01,600
WHEN WOULD I USE THEM?

00:01:01,600 --> 00:01:05,170
MENTION CORE DOLOR JTHON, I ALSO WROTE A BOOK.

00:01:05,170 --> 00:01:08,860
I DO LOTS OF COOL THING AT RACKSPACE INCLUDING WORK ON JTHON.

00:01:08,860 --> 00:01:11,520
I TEACH PRINCIPALS OF PROGRAMMING LANGUAGE AT THE

00:01:11,520 --> 00:01:15,549
UNIVERSITY OF COLORADO-BOULDER, SO LOVE ALL THE

00:01:15,549 --> 00:01:17,479
SORT OF FUN THINGS I GET TO DO.

00:01:17,479 --> 00:01:23,409
FOR INSTANCE, IN THAT PARTICULAR CLASS I TEACH THE FUNCTIONAL IDIOM WHILE WE'RE GOING THROUGH

00:01:23,409 --> 00:01:27,810
FORMAL OPERATIONAL SEMANTICS, THAT SORT OF THING.

00:01:27,810 --> 00:01:29,829
SO, YOU KNOW, YOU CAN READ THIS.

00:01:29,829 --> 00:01:34,690
THIS COMES FROM OUR DOCUMENTATION, WEAK REFERENCE TO AN OBJECT IS NOT ENOUGH TO KEEP THE OBJECT

00:01:34,690 --> 00:01:35,799
ALIVE.

00:01:35,799 --> 00:01:39,810
WHEN THE ONLY REMAINING REFERENCES TO A REFERENCE ARE WEAK REFERENCES, GARBAGE COLLECTION IS

00:01:39,810 --> 00:01:43,109
FREE TO DESTROY THE REFERENT RENT AND REUSE THE

00:01:43,109 --> 00:01:44,969
MEMORY FOR SOMETHING ELSE.

00:01:44,969 --> 00:01:50,259
HOWEVER, UNTIL THE OBJECT IS ACTUALLY DESTROYED, THE WEAK REFERENCE MAY RETURN THE OBJECT EVEN

00:01:50,259 --> 00:01:52,320
IF THERE ARE NO STRONG REFERENCES TO IT.

00:01:52,320 --> 00:01:56,040
SO YOU -- IF YOU LOOKED AT THIS OR LOOKED AT THE

00:01:56,040 --> 00:02:04,090
DEFINING PIP ON THIS THIS MIGHT NOT BE SATISFYING IN TERMS OF UNDERSTANDING WHAT A WEAK REFERENCE

00:02:04,090 --> 00:02:05,090
IS.

00:02:05,090 --> 00:02:09,080
IT WAS INITIALLY PROPOSED IN PIP 205, IT WAS 'EM

00:02:09,080 --> 00:02:13,580
MEANTED IN PIP 2.1, WHICH WAS RELEASED 14 YEARS

00:02:13,580 --> 00:02:18,060
AGO SO THAT'S THE FLIP SIDE OF THIS, SHOULD WE BE

00:02:18,060 --> 00:02:21,620
USING THIS IF IT'S SUCH A POWERFUL STRATEGY AS I

00:02:21,620 --> 00:02:25,739
TRY TO CONVINCE YOU FOR THE TITLE OF THIS TALK.

00:02:25,739 --> 00:02:31,129
SO I'M GOING TO SUGGEST PUT TOGETHER A LITTLE...

00:02:31,129 --> 00:02:38,030
I'M GOING TO GO OVER TO A CONSOLE, SOME LIVE DEMO -- LOOKS LIKE I'VE ALREADY STARTED SOMETHING

00:02:38,030 --> 00:02:39,030
HERE.

00:02:39,030 --> 00:02:42,069
SO I'LL JUST CLEAR IT OUT.

00:02:42,069 --> 00:02:47,480
USING PYTHON 3.4 BECAUSE IT HAS BUILT-IN TAB COMPLETION, WHICH IS SUPER HANDY.

00:02:47,480 --> 00:02:51,329
SO LET'S SAY I WANTED TO FIND SOME CLASS THAT I'M

00:02:51,329 --> 00:02:52,329
GOING TO REFERENT TO.

00:02:52,329 --> 00:03:01,590
I'M JUST GOING TO DO A STRING...

00:03:01,590 --> 00:03:02,970
SCROLL IT UP.

00:03:02,970 --> 00:03:06,640
LET'S SEE HERE.

00:03:06,640 --> 00:03:11,379
NO, THAT DOESN'T DO WHAT WE WANT.

00:03:11,379 --> 00:03:15,690
HOLD ON.

00:03:15,690 --> 00:03:17,400
WE'LL START FROM THE TOP.

00:03:17,400 --> 00:03:18,579
BETTER?

00:03:18,579 --> 00:03:19,760
OKAY.

00:03:19,760 --> 00:03:22,959
SO WE'LL HAVE A CLASS LIKE THIS.

00:03:22,959 --> 00:03:28,489
THIS IS BECAUSE STRINGS IN CPYTHON CANNOT BE JUST

00:03:28,489 --> 00:03:30,019
WEAK-REFERENCED.

00:03:30,019 --> 00:03:36,049
WE MADE IMPORT FROM WEAK REFERENCE -- LET'S JUST

00:03:36,049 --> 00:03:41,370
DO IT THE EASY WAY. AND WE'LL SAY THAT WE HAVE A WEAK REFERENCE

00:03:41,370 --> 00:03:44,120
SET.

00:03:44,120 --> 00:03:46,870
OKAY.

00:03:46,870 --> 00:03:49,400
SO WE'VE CREATED THIS COLLECTION.

00:03:49,400 --> 00:03:51,319
BY THIS NATURE, YOU'RE GOING TO THINK I'M GOING

00:03:51,319 --> 00:03:56,510
TO HAVE A WEAK REFERENCE TO ANY OF ITS ELEMENTS, ANY OF ITS MEMBERS.

00:03:56,510 --> 00:03:58,510
OKAY, SO WHAT DOES THAT MEAN?

00:03:58,510 --> 00:04:03,290
I'M GOING TO JUST CREATE ONE, CREATE A FOO OBJECT.

00:04:03,290 --> 00:04:05,450
I WAS ABLE TO ADD IT.

00:04:05,450 --> 00:04:08,010
I HAVE THIS SET, LET'S LIST IT.

00:04:08,010 --> 00:04:13,299
WAIT, WHERE DID IT GO?

00:04:13,299 --> 00:04:18,780
SO IMPORTANT THING TO KNOW IS THAT, THAT GC IS

00:04:18,780 --> 00:04:23,690
NOW POSSIBLY GOING TO JUST -- I'M SORRY, YOU MAY

00:04:23,690 --> 00:04:27,389
SEE THIS THING JUST IMMEDIATELY GO AWAY.

00:04:27,389 --> 00:04:35,860
BECAUSE THE REFERENCE COUNTING FOR THAT FOO OBJECT, THAT MY STREAMFOO OBJECT WENT TO ZERO,

00:04:35,860 --> 00:04:38,470
THE WEAK REFERENCE WAS CLEARED OUT AND IT MOVED

00:04:38,470 --> 00:04:40,500
OUT OF THAT SET.

00:04:40,500 --> 00:04:45,250
IN SOMETHING LIKE JTHON IT WOULD ACT DIFFERENTLY, HAVE TO WAIT FOR THE GARBAGE COLLECTOR TO

00:04:45,250 --> 00:04:48,000
CLEAR THAT UP BUT IN CPYTHON IT COULD BE ALMOST

00:04:48,000 --> 00:04:51,970
IMMEDIATE, DEPENDING UPON THE WAY REFERENCES ARE

00:04:51,970 --> 00:04:54,020
HELD.

00:04:54,020 --> 00:04:57,390
SO IN ORDER TO ACTUALLY HOLD ON TO THIS, MAYBE IT

00:04:57,390 --> 00:05:05,560
TO HAVE TO GO AND CREATE SOME -- A -- SO I HAVE

00:05:05,560 --> 00:05:08,210
THIS A OBJECT.

00:05:08,210 --> 00:05:13,789
I COULD IMPORT SYS, DO A ROUGH COUNT ON THAT.

00:05:13,789 --> 00:05:17,900
I WOULD SEE THAT'S ACTUALLY THREE, WHICH IS GOING

00:05:17,900 --> 00:05:20,699
TO BE ONE MORE THAN IT ACTUALLY IS.

00:05:20,699 --> 00:05:26,280
IT'S POSSIBLE THAT ACTUALLY THERE IS A FOOM THAT'S ALREADY OUT THERE THAT'S ALREADY BEEN

00:05:26,280 --> 00:05:31,169
IMPORTED, AND HOLDING THAT ADDITIONAL REFERENCE -- IF YOU ACTUALLY -- YOU CAN DO

00:05:31,169 --> 00:05:34,360
THINGS LIKE THIS, LIKE HOW MANY REFERENCES ARE THERE

00:05:34,360 --> 00:05:35,930
TO ONE?

00:05:35,930 --> 00:05:38,180
715 REFERENCES TO ONE.

00:05:38,180 --> 00:05:39,980
HOW ABOUT ZERO?

00:05:39,980 --> 00:05:43,770
579, EVEN 42 HAS A LOT OF REFERENCES TO IT.

00:05:43,770 --> 00:05:46,470
IT'S ONLY WHEN YOU GO UP TO, LIKE, SOMETHING LIKE

00:05:46,470 --> 00:05:54,360
THIS, THAT YOU WOULD ACTUALLY SEE, OH, THERE'S JUST THIS ONE REFERENCE APPARENTLY OUTSTANDING

00:05:54,360 --> 00:05:56,560
THAT'S REAL.

00:05:56,560 --> 00:06:06,800
SO IF I DIDN'T ADD THAT TO MY SET -- SORRY, PEOPLE, WHO ARE GOING TO NOT SEE THAT.

00:06:06,800 --> 00:06:09,250
OOPS, LOOKS LIKE I...

00:06:09,250 --> 00:06:10,250
OOPS.

00:06:10,250 --> 00:06:17,810
HELPS IF I DO IT THE RIGHT WAY. AND I DID LIST S, OBVIOUSLY IT'S GOING TO

00:06:17,810 --> 00:06:20,620
HOLD IT BECAUSE THERE IS SOMETHING THAT IS HOLDING

00:06:20,620 --> 00:06:21,620
THAT REFERENCE.

00:06:21,620 --> 00:06:26,990
IF I DELETE A FROM THE -- MYNAME SPACE AND I LIST

00:06:26,990 --> 00:06:31,280
S AGAIN, WELL, LOOKS LIKE IT POSSIBLY IS STILL THERE.

00:06:31,280 --> 00:06:40,600
LET'S DO IMPORT GC. AND DO THAT AGAIN, AND IT'S GONE.

00:06:40,600 --> 00:06:42,440
ALL RIGHT?

00:06:42,440 --> 00:06:45,759
SO JUST SOME SIMPLE THINGS THAT WE'RE ADDING INTUITION TOO.

00:06:45,759 --> 00:06:49,190
STRONG REFERENCES, INCLUDING SOMETHING, A NAME

00:06:49,190 --> 00:06:53,650
LIKE THAT A DO HOLD THAT OBJECT AND PREVENT IT

00:06:53,650 --> 00:06:58,430
FROM, REMOVED FROM THAT WEAK SET.

00:06:58,430 --> 00:07:03,110
BUT IF WE JUST ADDED IT WITHOUT ANY STRONG REFERENCE WHATSOEVER, IT COULD JUST BE

00:07:03,110 --> 00:07:09,330
IMMEDIATELY CLEARED OUT.

00:07:09,330 --> 00:07:14,860
OKAY.

00:07:14,860 --> 00:07:18,500
SO S WILL BE EVENTUALLY EMPTY IN THE CONTEXT OF

00:07:18,500 --> 00:07:21,800
POTENTIALLY SOME GARBAGE COLLECTION.

00:07:21,800 --> 00:07:24,550
SO WE'VE BUILT SOME INTUITION AND THE THING THAT

00:07:24,550 --> 00:07:28,319
I WANT YOU TO JUST THINK ABOUT IS WHAT DO WE DO

00:07:28,319 --> 00:07:30,150
WITH WEAK REFERENCES IN GENERAL?

00:07:30,150 --> 00:07:32,669
IT'S TO PREVENT MEMORY AND RESOURCE LEAKS.

00:07:32,669 --> 00:07:36,850
WE DON'T WANT TO BE HOLDING ON TO OBJECTS UNNECESSARILY.

00:07:36,850 --> 00:07:42,949
AND OF COURSE WE KNOW ABOUT THIS IN OTHER CONTEXTS, SO, FOR EXAMPLE, IF I JUST WRITE

00:07:42,949 --> 00:07:47,750
CODE LIKE THIS, YOU KNOW, I OPEN UP SOME FILE,

00:07:47,750 --> 00:07:51,500
AND I DON'T EXPLICITLY CLOSE IT, DOES IT GET CLOSED?

00:07:51,500 --> 00:07:57,050
WELL, AT SYSTEM SHUTDOWN IT WOULD BUT NOT NECESSARILY WITHOUT GOING AND CAUSING RESOURCE

00:07:57,050 --> 00:07:59,889
EXHAUSTION.

00:07:59,889 --> 00:08:01,419
SO GARBAGE COLLECTION IS NOT MAGICAL, IT'S NOT

00:08:01,419 --> 00:08:06,680
GOING TO JUST SAY, OH, THIS IS -- I KNOW YOU DON'T NEED THIS.

00:08:06,680 --> 00:08:11,430
INSTEAD IT'S GOING TO WORK ON SOME PRINCIPLES AROUND HOW REFERENCES WORK.

00:08:11,430 --> 00:08:13,669
SO DOESN'T MATTER IF IT'S REFERENCE COUNTING OR

00:08:13,669 --> 00:08:18,699
SOME VARIANT OF MARK AND SWEEP, LIKE YOU SEE IN,

00:08:18,699 --> 00:08:26,080
SAY, JAVA-BASED JTHON OR IN PYPY, OR SOME COMBINATION AS WE CPYTHON WHICH ACTUALLY DOES

00:08:26,080 --> 00:08:30,289
DO A FULL MARK AND SWEEP OCCASIONALLY.

00:08:30,289 --> 00:08:35,060
SO GK CANNOT READ YOUR MIND.

00:08:35,060 --> 00:08:37,289
YOU MAY BE A DEVELOPER, IT CANNOT DO THAT.

00:08:37,289 --> 00:08:39,829
IT'S NOT SUFFICIENT.

00:08:39,829 --> 00:08:43,079
NOW, YOU CAN GO AND DO MANUAL CLEARANCES, THIS IS

00:08:43,079 --> 00:08:45,140
VERY MUCH LIKE IF YOU WERE WRITING C-CODE.

00:08:45,140 --> 00:08:51,950
YOU COULD USE TRY FINALLY, THIS SORT OF PATTERN, RIGHT?

00:08:51,950 --> 00:08:55,050
YOU CAN APPLY SOME DEEPER KNOWLEDGE OF YOUR CODE,

00:08:55,050 --> 00:08:59,530
OR YOU CAN DO SOME CLEAN-UP BY SOME OTHER SCHEME.

00:08:59,530 --> 00:09:06,380
SO YOU MAY GO AND USE DUNDER DEL AS A FINALIZER.

00:09:06,380 --> 00:09:14,530
SO, FOR EXAMPLE, SOCKET MAKE FILE DOES DO THIS.

00:09:14,530 --> 00:09:18,899
SO IF YOU ARE GOING AND CREATING WHAT APPEARS TO

00:09:18,899 --> 00:09:26,000
BE A FILE OBJECT ON A SOCKET, SOCKET MAKE FILE

00:09:26,000 --> 00:09:28,180
WILL DO THIS FOR YOU AND ALLOW TO YOU RETURN SOME

00:09:28,180 --> 00:09:29,180
NUMBER OF OBJECTS.

00:09:29,180 --> 00:09:33,800
IT'S USED BY A NUMBER OF PRIMITIVES IN THE SOCKET

00:09:33,800 --> 00:09:36,050
LIBRARY.

00:09:36,050 --> 00:09:40,190
AS WELL AS TOOLS OUT THERE LIAR URL LIB IF I

00:09:40,190 --> 00:09:41,240
REMEMBER PROPERLY.

00:09:41,240 --> 00:09:46,440
BUT THE PROBLEM IS, IF IT DOESN'T LINE UP, AS I

00:09:46,440 --> 00:09:51,130
MENTIONED EARLIER, WHO HAS SEEN TOO MANY OPEN FILES?

00:09:51,130 --> 00:09:52,130
OKAY.

00:09:52,130 --> 00:09:54,970
THAT'S WHY YOU CAME TO THIS TALK.

00:09:54,970 --> 00:09:59,000
YOU WANTED TO SOLVE YOUR PROBLEM.

00:09:59,000 --> 00:10:03,970
SO THIS IMPLEMENTATION IS DONE THROUGH A SEPARATE COUNTING THEME SO SOCKET MAKE FILE IS TRYING

00:10:03,970 --> 00:10:06,460
TO DO THE RIGHT THING FOR YOU AND IF YOU LOOK

00:10:06,460 --> 00:10:10,160
AT IT, IT'S GOING AND PREVENTING RESOURCE LEAKS ALONG

00:10:10,160 --> 00:10:11,970
THESE LINES.

00:10:11,970 --> 00:10:15,700
I THINK WE'VE PROBABLY SEEN DUNDER DEL BEFORE.

00:10:15,700 --> 00:10:20,139
I HAVEN'T MENTIONED WEAK REFERENCES YET AFTER THAT QUICK DEMO.

00:10:20,139 --> 00:10:24,339
YOU MIGHT USE THE WIF STATEMENT WITH AUTOMATIC RESOURCE MANAGEMENT.

00:10:24,339 --> 00:10:25,750
YOU SHOULD BE DOING THIS.

00:10:25,750 --> 00:10:28,339
SO, AGAIN, NO WEAK REFERENCES YET.

00:10:28,339 --> 00:10:30,620
WE'RE KEEPING IT SIMPLE.

00:10:30,620 --> 00:10:34,060
YOU DON'T HAVE TO BE IN THIS TALK BUT WHAT IF AN

00:10:34,060 --> 00:10:38,160
OBJECT IS A CHILD IN A PARENT-CHILD RELATION, YOU

00:10:38,160 --> 00:10:40,740
HAVE SOME SORT OF TREE.

00:10:40,740 --> 00:10:45,870
YOU NEED TO TRACK ITS PARENT AND THE PARTICIPATE WANTS TO TRACK ITS CHILD.

00:10:45,870 --> 00:10:49,770
YOU MIGHT BE DOING IN FOR AN XPAT READER, NO,

00:10:49,770 --> 00:10:51,840
YOU'RE NOT DOING AN XPAT READER BECAUSE YOU NO

00:10:51,840 --> 00:10:55,760
LONGER USE THAT OLD LEGACY STUFF.

00:10:55,760 --> 00:10:59,890
BUT I THINK YOU SEE THE POINT, IT DOES HAPPEN.

00:10:59,890 --> 00:11:03,519
I'M GOING TO MAKE THAT EXAMPLE EVEN SIMPLER.

00:11:03,519 --> 00:11:06,610
LET'S IMPLEMENT A DOUBLY LINGED LIST.

00:11:06,610 --> 00:11:08,690
MAKE SOME PREFERENCE REFERENCES.

00:11:08,690 --> 00:11:14,970
WE'LL ALSO ADD DUNDER DEL TO CLEAN UP SOME RESOURCES, SOUNDS LIKE A GOOD COME THANKS.

00:11:14,970 --> 00:11:17,201
AND WE MIGHT SEE THIS IN ORDERICT, WHICH IS A

00:11:17,201 --> 00:11:21,570
GREAT COLLECTION IN THE COLLECTIONS LIBRARY.

00:11:21,570 --> 00:11:25,510
SO PRESERVES THE WORD OF INSERTION.

00:11:25,510 --> 00:11:29,579
YOU CAN GET THAT OUT WHEN YOU ITERATE IT OR INDEX.

00:11:29,579 --> 00:11:36,829
IT HAS GREAT PERFORMANCE WITH THE PERFORMANCE BEING THE SAME AS RELEVANT DIX.

00:11:36,829 --> 00:11:41,240
AND USES THIS DOUBLY LINKED LIST TO PROVE INSERTION ORDER.

00:11:41,240 --> 00:11:45,410
SO WHY IS AVOIDING STRONG REFERENCE CYCLES SO

00:11:45,410 --> 00:11:46,410
IMPORTANT?

00:11:46,410 --> 00:11:53,430
AGAIN, I'M TRYING TO MOTIVATE THIS WEAK REFERENCE HAVE THE AGAIN, CPYTHON CG DOES BREATH COUNTING

00:11:53,430 --> 00:11:57,850
BUT IT CANNOT GO TO ZERO IN THE PRESENCE OF THAT

00:11:57,850 --> 00:12:02,220
CYCLE -- SORRY, A CYCLE CANNOT GO TO ZERO.

00:12:02,220 --> 00:12:15,450
SO THE -- IN CONTRAST, WHAT WE CAN DO WITH CPYTHON IS USE ITS SUPPORT FOR WEAK REFERENCES,

00:12:15,450 --> 00:12:19,720
AND IN THAT CASE, IT STORES A LIST OF CONTAINERS TO BE CLEARED OUT INCLUDING PROXIES.

00:12:19,720 --> 00:12:24,529
THAT'S PERFORM WHEN THE PREFERRED OBJECT IS DEALLOCATED WHICH OCCURS WHEN THAT REF COUNT

00:12:24,529 --> 00:12:25,800
GOES TO ZERO.

00:12:25,800 --> 00:12:27,990
NO WAITING ON THE GARBAGE COLLECTOR AND WE CAN

00:12:27,990 --> 00:12:29,829
SEE THAT IN THIS CODE HERE.

00:12:29,829 --> 00:12:34,270
FOR INSTANCE, IF I'M DEALLOCATING A SET, FOR EXAMPLE, I ALWAYS ENCOURAGE IF YOU REALLY

00:12:34,270 --> 00:12:37,910
WANTS TO SEE WHAT'S GOING ON, LOOK AT THE SOURCE,

00:12:37,910 --> 00:12:40,600
LUKE, USE THE SOURCE.

00:12:40,600 --> 00:12:42,670
SO IF THERE IS A WEAK REFERENCE LIST, THERE IS A

00:12:42,670 --> 00:12:49,040
LIST OF REFERENCES THAT ARE REFERRING TO THIS OBJECT.

00:12:49,040 --> 00:12:50,630
THIS WILL BE FILLED IN.

00:12:50,630 --> 00:12:53,959
WHEN THIS IS SEEN AS BEING DEALLOCATED, WHEN ITS

00:12:53,959 --> 00:12:58,070
REF COUNT GOES TO ZERO, THIS WILL CLEAR IT OUT.

00:12:58,070 --> 00:13:01,639
ONE THING I DIDN'T TELL YOU IS WHEN YOU ADD A

00:13:01,639 --> 00:13:07,089
WEAK REFERENCE TO SOMETHING, WE DID SEE IT IN

00:13:07,089 --> 00:13:11,240
THAT ONE EXAMPLE WHEN I ADDED THAT AS A MEMBER.

00:13:11,240 --> 00:13:16,779
THE REF COUNT FOR THAT OBJECT IS NOT INCREMENTED.

00:13:16,779 --> 00:13:18,540
ANOTHER THING THAT'S A LITTLE TAKE-AWAY HERE IS

00:13:18,540 --> 00:13:22,820
THAT THERE ARE A LOT OF OBJECTS IN CPYTHON THAT

00:13:22,820 --> 00:13:29,990
ARE NOT WEAK REFERENCABLE, AND THIS IS BECAUSE THIS DOES ADD SOME OVERHEAD IN TERMS OF ADDING

00:13:29,990 --> 00:13:33,410
POTENTIALLY THIS EXTRA LIST.

00:13:33,410 --> 00:13:35,899
OKAY.

00:13:35,899 --> 00:13:40,699
SO WHY DO YOU WANT TO AVOID THOSE STRONG REFERENCE CYCLES?

00:13:40,699 --> 00:13:44,220
WELL, THEY HAVE TO WAIT FOR MORE -- CGC.

00:13:44,220 --> 00:13:48,790
CPYTHON'S CG IS UNFORTUNATELY STOP THE WORLD AND

00:13:48,790 --> 00:13:52,100
IF YOU LOOK AT THE DECISION CRITERIA IN GC SET

00:13:52,100 --> 00:13:54,240
THRESHOLD, EVEN THOUGHT IT'S GENERATIONAL, YOU

00:13:54,240 --> 00:13:58,510
CAN SEE IT'S SOMEWHAT PROBLEMATIC TO RELY ON NOT

00:13:58,510 --> 00:14:04,700
EXHAUSTING, SAY, FILES, OR OTHER EXPENSIVE RESOURCES OR EVEN MEMORY.

00:14:04,700 --> 00:14:07,880
YOU KNOW, MY EXPERIENCE WITH GARBAGE COLLECTOR IS

00:14:07,880 --> 00:14:14,430
THAT THEY WORK WELL EXCEPT WHEN THEY DON'T. THAT MAY BE YOUR EXPERIENCE, TOO.

00:14:14,430 --> 00:14:17,880
ESPECIALLY AROUND SOME SMALL OBJECT THAT LAPSE TO

00:14:17,880 --> 00:14:21,540
BE POINTING TO SOME EXPENSIVE EXTERNAL RESOURCE.

00:14:21,540 --> 00:14:24,259
ESPECIALLY, AGAIN, WITH SOMETHING WHERE YOU MIGHT

00:14:24,259 --> 00:14:27,910
RUN OUT OF FILES.

00:14:27,910 --> 00:14:34,940
ANY EVENT, THERE WAS A BUG IN ORDER DICT AROUND THIS VERY ISSUE.

00:14:34,940 --> 00:14:38,899
NOW, FOR 2.7 THEY REMOVED THE DUNDER DEL.

00:14:38,899 --> 00:14:41,699
I'LL EXPLAIN WHY IN JUST A MOMENT.

00:14:41,699 --> 00:14:56,199
FOR 3.2, THEY REPLACED DEL WITH WEAK REFERENCES, AND FOR 3.4, USING DUNDER DEL, THIS FINAL

00:14:56,199 --> 00:14:58,720
EASIER NO LONGER MEANS REF CYCLES OR UNCOLLECTIBLE

00:14:58,720 --> 00:15:02,680
GARBAGE, WHICH IS WHY THEY HAD TO DO THIS.

00:15:02,680 --> 00:15:12,829
SO WE SEE IN ISSUE 9.25, AND AGAIN MAYBE IT'S JUST MY -- AS A DEVELOPER HERE OF PYTHON,

00:15:12,829 --> 00:15:14,050
BUT I LIKE TO READ THE BUGS.

00:15:14,050 --> 00:15:24,630
I LIKE TO SEE WHAT'S GOING ON. AND WE SEE THIS ISSUE 9.825, THE REASON WHY.

00:15:24,630 --> 00:15:29,360
WE HAD TO REMOVE DUNDER DEL FROM THE DEFINITION OF ORDEREDDICT BECAUSE THIS PRESENTS USER

00:15:29,360 --> 00:15:37,690
CREATE-SELF-REFERENCING DICTIONARIES FROM BECOMING PERMANENTLY UNCOLLECTIBLE GC GARBAGE.

00:15:37,690 --> 00:15:41,389
AND POTENTIALLY ALSO HAVING STRONG REFERENCES TO

00:15:41,389 --> 00:15:44,870
OTHER THINGS WHICH COULD BE PROBLEMATIC.

00:15:44,870 --> 00:15:48,339
DON'T WANT UNCOLLECTIBLE GARBAGE.

00:15:48,339 --> 00:15:53,699
SO THE OTHER THING IN 3.2, WE REPLACED DEL WITH

00:15:53,699 --> 00:15:58,209
WEAK REFS, AND AGAIN THERE IS THIS FURTHER POINT

00:15:58,209 --> 00:16:01,870
THAT WE NO LONGER HAVE TO WORRY ABOUT UNCOLLECTIBLE GARBAGE.

00:16:01,870 --> 00:16:06,399
SO LET'S LOOK AT THE IMPLEMENTATION OF ORDER DICT.

00:16:06,399 --> 00:16:11,140
SO, WHAT I FIND INTERESTING ABOUT STUFF LIKE THIS

00:16:11,140 --> 00:16:14,910
IS, AGAIN, YOU CAN -- YOU CAN LOOK INTO THE CODE.

00:16:14,910 --> 00:16:24,170
THIS IS ACTUALLY HOW YOU MIGHT, YOU KNOW -- YOU WOULD SEE, FOR EXAMPLE, THIS ONE USE OF THE

00:16:24,170 --> 00:16:28,140
PROXY MECHANISM, THOUGH WHAT'S NICE WITH WEAK REFERENCE

00:16:28,140 --> 00:16:36,819
PROXY, IS IT BASICALLY CREATES A WEAK REFERENCE AND DOES ALL THE WORK IN TERMS OF MAKING IT

00:16:36,819 --> 00:16:39,410
LOOK LIKE THE OBJECT THAT'S REFERENCING.

00:16:39,410 --> 00:16:43,940
SO YOU DON'T HAVE TO GO AND DO ADDITIONAL STEP,

00:16:43,940 --> 00:16:50,889
ADDITIONAL FUNCTION CALL IN ORDER TO GO AND DE-REFERENCE THAT WEAK REFERENCE.

00:16:50,889 --> 00:16:59,310
IT SETS UP PREVIOUS, TO POINT TO THIS, BECAUSE NOW WE'RE GOING AND ADDING THIS TO THAT LIST

00:16:59,310 --> 00:17:02,579
AND THE WAY THIS IS DONE IS DOUBLY LINKED LIST

00:17:02,579 --> 00:17:04,710
WITH THE ROOT POINTING TO THE END.

00:17:04,710 --> 00:17:07,910
AFTER THAT POINT, OUR PREVIOUS ALWAYS HAS A

00:17:07,910 --> 00:17:14,190
WEAK -- IS ALWAYS WEAK-REFERENCING THE PREVIOUS ITEM.

00:17:14,190 --> 00:17:17,440
OUR FORWARD LINK IS JUST A STANDARD LINK, A

00:17:17,440 --> 00:17:19,180
STANDARD STRONG REFERENCE.

00:17:19,180 --> 00:17:20,290
WHY WOULD WE WANT TO DO THAT?

00:17:20,290 --> 00:17:23,220
BECAUSE IF WE HAVE WEAK REFERENCES ON BOTH SIDES,

00:17:23,220 --> 00:17:25,990
AND NOTHING ELSE IS REFERENCING IT, WE'LL SEE

00:17:25,990 --> 00:17:28,990
WHAT WE SAW WITH THAT INITIAL EXAMPLE WITH WEAK

00:17:28,990 --> 00:17:39,560
SET, THE OBJECT IS SIMPLY POTENTIALLY IS JUST GOING TO GO AWAY AT ANY TIME.

00:17:39,560 --> 00:17:41,550
NOW HERE ARE SOME OTHER INTERESTING THINGS.

00:17:41,550 --> 00:17:44,570
YOU SEE THERE IS THE USE OF SLOTS TO MINIMIZE OVERHEAD.

00:17:44,570 --> 00:17:47,680
BECAUSE YOU'RE USING SLOTS, YOU HAVE TO GO AND

00:17:47,680 --> 00:17:51,080
ACTUALLY PUT WEAK REF IN IT AS ONE OF THE SLOT

00:17:51,080 --> 00:17:52,080
NAMES.

00:17:52,080 --> 00:17:56,940
BY THE WAY, THESE ARE NO-OPS AND IMPLEMENTATIONS LIKE JTHON.

00:17:56,940 --> 00:18:00,180
I DON'T KNOW WHAT THE CASE IS IN PYPY, PROBABLY SIMILAR.

00:18:00,180 --> 00:18:08,800
SO THE CRUX OF THIS CODE IS SIMPLY GOING AND DOING THIS WEAK REFERENCE PROXY.

00:18:08,800 --> 00:18:11,970
AND THAT'S REALLY IT.

00:18:11,970 --> 00:18:19,470
I -- WE WENT THROUGH SO FAST THERE, I'M NOT CERTAIN THAT REGISTERED.

00:18:19,470 --> 00:18:22,870
THERE WASN'T A LOT OF WORK NECESSARY IN ORDER TO

00:18:22,870 --> 00:18:27,010
GET THIS WITH THE DESIRED BEHAVIOR.

00:18:27,010 --> 00:18:29,090
OKAY?

00:18:29,090 --> 00:18:35,680
ALL WE HAD TO DO WAS COME UP WITH THIS SCHEME WHERE WE RECOGNIZED THAT ONE SIDE OF THE

00:18:35,680 --> 00:18:38,910
RELATIONSHIP WE WERE GOING TO GO AND USE A STRONG

00:18:38,910 --> 00:18:40,300
REFERENCE.

00:18:40,300 --> 00:18:48,690
ARBITRARILY WE JUST SIMPLY USED THE NEXT REFERENCE AS A STRONG REFERENCE.

00:18:48,690 --> 00:18:53,210
ON THE FLIP SIDE, WE WANTED TO GO AND MAKE CERTAIN THAT THERE WASN'T A REFERENCE CYCLE.

00:18:53,210 --> 00:18:55,690
WELL, THAT WAS EASY ENOUGH TO DO.

00:18:55,690 --> 00:19:00,000
THE PREVIOUS WOULD BE A WEAK REFERENCE.

00:19:00,000 --> 00:19:03,910
YOU LINE THOSE TWO TOGETHER AND NOW WE DON'T HAVE

00:19:03,910 --> 00:19:09,290
THE SCENARIO WHERE THIS -- REMOVING AN ITEM FROM

00:19:09,290 --> 00:19:13,820
THIS ORDERED DICTIONARY MIGHT TAKE SOME TIME FOR

00:19:13,820 --> 00:19:19,350
IT TO BE REMOVED JUST BECAUSE THE -- WE HAVE THIS

00:19:19,350 --> 00:19:22,270
GARBAGE OR EVEN WORSE, UNCOLLECTIBLE GARBAGE.

00:19:22,270 --> 00:19:24,260
ALL RIGHT.

00:19:24,260 --> 00:19:27,500
SO THAT'S SOME MOTIVATION BUT THE REALITY IS

00:19:27,500 --> 00:19:31,410
WE'RE NOT NORMALLY WRITING ORDEREDDICT.

00:19:31,410 --> 00:19:34,760
WE'RE GOING TO BE DOING THINGS LIKE A LOOK-UP TABLE, WHERE WE'RE GOING TO WANT TO PROVIDE

00:19:34,760 --> 00:19:38,460
MORE INFORMATION ABOUT SOME OBJECT.

00:19:38,460 --> 00:19:41,910
WE DON'T WANT TO EXTEND OR MUCKY PATCH IT SO FOR

00:19:41,910 --> 00:19:48,640
THOSE OF YOU WHO LIKE DOING THIS AND I UNDERSTAND WHY, YOU'RE LIKE, HEY, THERE IS THIS FANTASTIC

00:19:48,640 --> 00:19:51,410
DID YOU UNDERSTANDER DICT AROUND FOR THIS OBJECT

00:19:51,410 --> 00:19:55,900
AND I'LL JUST NAME SOMETHING WITH -- PUT IT IN

00:19:55,900 --> 00:19:58,320
THERE AND THERE WON'T BE ANY COLLISION OR WE'LL

00:19:58,320 --> 00:20:01,100
EVEN ADD IT TO THE CLASS AND THERE WON'T BE ANY

00:20:01,100 --> 00:20:04,140
COLLISION BECAUSE I'M JUST ADDING METHODS TO IT,

00:20:04,140 --> 00:20:05,880
SO WHO HAS DONE THAT?

00:20:05,880 --> 00:20:08,970
WHO'S MONKEY PATCHED OR USED DUNDER DICT IN INTH

00:20:08,970 --> 00:20:09,970
WAY?

00:20:09,970 --> 00:20:11,500
NO ONE, REALLY?

00:20:11,500 --> 00:20:13,330
YOU'RE NOT FESSING UP.

00:20:13,330 --> 00:20:19,090
NO, YOU ALREADY ARE USING THIS MECHANISM, RIGHT?

00:20:19,090 --> 00:20:26,560
SO YOU COULD USE A DICTIONARY AS THE LOOK-UP TABLE, WHERE YOU USE THE OBJECT AS A KEY,

00:20:26,560 --> 00:20:29,570
BUT NOW YOU NEED TO MANUALLY CLEAN UP THAT DICT WHEN

00:20:29,570 --> 00:20:33,610
THE OBJECT IS NO LONGER NEEDED.

00:20:33,610 --> 00:20:35,930
AND MAYBE YOU KNOW WHEN IT NEEDS TO BE CLEANED UP

00:20:35,930 --> 00:20:37,710
OR MAYBE YOU DON'T BECAUSE YOU'RE DOING IT IN THE

00:20:37,710 --> 00:20:40,280
CONTEXT OF SOME LIBRARY.

00:20:40,280 --> 00:20:43,780
SO IT'S ESPECIALLY USEFUL FOR LIBRARIES.

00:20:43,780 --> 00:20:46,830
WE CAN USE A WEAK KEY DICTIONARY.

00:20:46,830 --> 00:20:49,730
VERY SIMILAR SORT OF IDEA THAT WE SAW WITH THE

00:20:49,730 --> 00:20:55,180
ORDER DICTONE SIDE IS GOING TO BE WEAK AND THE

00:20:55,180 --> 00:20:59,120
OTHER HAS A STRONG REFERENCE.

00:20:59,120 --> 00:21:01,340
IN THIS PARTICULAR CASE, IT'S THE KEY THAT IS

00:21:01,340 --> 00:21:02,390
WEAK.

00:21:02,390 --> 00:21:05,060
WE INSERT THE OBJECT AS THE KEY.

00:21:05,060 --> 00:21:07,950
WE CAN ASSOCIATE ANYTHING WE WANT AS THE VALUE.

00:21:07,950 --> 00:21:11,420
A LIST OF PROPERTIES, SOME OTHER OBJECT, SO ON,

00:21:11,420 --> 00:21:13,830
SO FORTH.

00:21:13,830 --> 00:21:20,180
WHEN THE OBJECT IS REMOVED, I MEAN, IT'S -- IT GOES AWAY BECAUSE IT'S NO LONGER IN USE SOMEWHERE

00:21:20,180 --> 00:21:21,810
ELSE.

00:21:21,810 --> 00:21:25,780
NOTHING ELSE IS HOLDING A STRONG REFERENCE TO IT.

00:21:25,780 --> 00:21:30,590
NOW, THE CLEAN-UP OF THAT DICTIONARY WILL OCCUR.

00:21:30,590 --> 00:21:35,530
OKAY, SO THAT KEY, THE ITEM FOR THAT KEY WILL BE

00:21:35,530 --> 00:21:40,000
REMOVED AND IF THERE'S NOTHING HOLDING ON TO

00:21:40,000 --> 00:21:46,190
THOSE ASSOCIATIVE VALUES IN, SAY, THAT LOOK-UP TABLE, THAT WILL ALSO BE CLEANED UP.

00:21:46,190 --> 00:21:48,020
SO WE HAVE A LOOK-UP TABLE THAT WORKS THE WAY WE

00:21:48,020 --> 00:21:49,020
WANT IT.

00:21:49,020 --> 00:21:53,110
THE OBJECT IS GONE, THIS -- THESE INTERESTING ADDITIONAL PROPERTIES THAT WE WERE ASSOCIATING

00:21:53,110 --> 00:21:58,880
WITH IT ARE GONE NOW, AS WELL, BECAUSE NOTHING ELSE IS HOLDING ON TO IT.

00:21:58,880 --> 00:22:00,380
SO LET'S LOOK AT ONE EXAMPLE.

00:22:00,380 --> 00:22:03,090
DJANGO SIGNALS.

00:22:03,090 --> 00:22:06,360
SO DJANGO INCLUDES THE SIGNAL DISPATCHER, ALLOWS

00:22:06,360 --> 00:22:08,790
FOR DE-COUPLED APPLICATIONS.

00:22:08,790 --> 00:22:11,430
TO GET NOTIFIED WHEN ACTIONS OCCUR ELSEWHERE IN

00:22:11,430 --> 00:22:12,430
THE FRAMEWORK.

00:22:12,430 --> 00:22:15,230
THIS IS EXACTLY THE SORT OF THING WHERE YOU DON'T

00:22:15,230 --> 00:22:21,170
KNOW IN ADVANCE NECESSARILY WHO'S TALKING TO YOU.

00:22:21,170 --> 00:22:25,080
THE REALITY LOOKS LIKE I GOT A LITTLE BIT CUT OFF

00:22:25,080 --> 00:22:31,400
HERE IS THAT IT'S REALLY JUST A COUPLE LINES TO

00:22:31,400 --> 00:22:32,930
DO THIS SET-UP.

00:22:32,930 --> 00:22:36,230
YOU HAVE TO STILL SET UP WHAT THAT CACHE IS BUT

00:22:36,230 --> 00:22:40,210
THE CHOICE OF USING A WEAK KEY DICTIONARY HERE IS

00:22:40,210 --> 00:22:44,310
JUST A COUPLE LINES WHERE, REALLY, THE ONLY EXTRA

00:22:44,310 --> 00:22:48,020
LINE HERE IS ARE WE USING CACHING OR NOT, AND IF

00:22:48,020 --> 00:22:54,110
WE'RE NOT USING CACHING, WE'LL JUST HAVE THIS EMPTY DICTIONARY THAT WE WON'T USE AT ALL.

00:22:54,110 --> 00:22:57,640
JUST TO HAVE SOMETHING AS A PLACEHOLDER.

00:22:57,640 --> 00:23:00,260
SO THAT'S PRETTY USEFUL.

00:23:00,260 --> 00:23:03,340
BUT THEN YOU LOOK AT THE WEAK REF -- WEAK VALUE

00:23:03,340 --> 00:23:07,010
DICTIONARY AND YOU WONDER, WELL, WHAT IS THAT GOOD FOR?

00:23:07,010 --> 00:23:08,700
WHY IS THAT THERE?

00:23:08,700 --> 00:23:17,560
SO IF YOU GO AND DO SOME TECH SEARCH IN THE CENTERED -- STANDARD LIBRARY OR GO OUT TO

00:23:17,560 --> 00:23:20,250
PYPY, DO SOMETHING SIMILAR, YOU'LL SEE IT BEING

00:23:20,250 --> 00:23:21,920
USED IN A NUMBER OF PLACES.

00:23:21,920 --> 00:23:27,900
BEING USED BY MULTI-PROCESSING, BY THE LOGGING MODULE, SO ON, SO FORTH, BUT, AGAIN, WHY WEAK

00:23:27,900 --> 00:23:28,900
VALUES?

00:23:28,900 --> 00:23:36,670
WELL, IT'S USEFUL WHEN YOU WANT TO TRACK THE OBJECT BY SOME I.D., ITS NAME, A NUMBER AND

00:23:36,670 --> 00:23:39,860
SOME TABLE, IT'S PROCESS I.D.

00:23:39,860 --> 00:23:41,700
OKAY?

00:23:41,700 --> 00:23:45,100
BUT YOU DON'T WANT THE FACT THAT IT'S -- THAT YOU

00:23:45,100 --> 00:23:47,330
HAVE A PROCESS I.D.

00:23:47,330 --> 00:23:54,970
TO A PROCESS MAPPING TO NOT SUPPORT GARBAGE COLLECTING THAT PROCESS.

00:23:54,970 --> 00:23:57,800
I MEAN, YES, IT IS EXPENSIVE RESOURCE IS GOING TO

00:23:57,800 --> 00:23:59,630
GO AWAY IN THE CASE OF A PROCESS BUT YOU'RE STILL

00:23:59,630 --> 00:24:04,860
HOLDING ON TO IT UNNECESSARILY.

00:24:04,860 --> 00:24:10,920
SO MAYBE THERE IS SOME OPERATING SYSTEM CLEAN-UP THAT YOU CAN DO OR EXPECT BUT, AGAIN, NOT

00:24:10,920 --> 00:24:11,920
ALWAYS.

00:24:11,920 --> 00:24:13,270
ALL RIGHT.

00:24:13,270 --> 00:24:20,100
SO ONCE THAT OBJECT IS GONE, ONCE WE NO LONGER NEED TO HOLD ON TO THAT WEAK VALUE, IT'S GOING

00:24:20,100 --> 00:24:21,100
TO GO AWAY.

00:24:21,100 --> 00:24:23,640
NOW, INTERESTINGLY ENOUGH, WHILE THAT OBJECT IS

00:24:23,640 --> 00:24:29,080
AROUND, YOU'RE GOING TO BE HOLDING ON TO THAT SMALL INTEGER OR STRING BUT GENERALLY WE DISCOUNT

00:24:29,080 --> 00:24:30,270
THAT.

00:24:30,270 --> 00:24:32,400
ONE PLACE THAT MIGHT HAPPEN IS YOU START UP LOTS

00:24:32,400 --> 00:24:36,180
AND LOTS OF THREADS.

00:24:36,180 --> 00:24:41,210
AND YOU MAY JUST SEE THAT, YOU KNOW, THIS -- I'M

00:24:41,210 --> 00:24:48,100
NOT GOING TO SEE THOSE THREADS' I.D.s GO AWAY UNTIL THAT PARTICULAR THREAD ITSELF IS NO

00:24:48,100 --> 00:24:53,150
LONGER DE-REFERENCED -- NO LONGER REFERENCED, RATHER.

00:24:53,150 --> 00:24:54,150
OKAY.

00:24:54,150 --> 00:24:56,550
SO HERE'S A LITTLE BIT OF GUIDANCE IN TERMS OF

00:24:56,550 --> 00:25:03,590
THINKING ABOUT WHY YOU MIGHT GO AND USE A WEAK

00:25:03,590 --> 00:25:06,040
REFERENCE IN ONE PLACE OR ANOTHER.

00:25:06,040 --> 00:25:09,290
AND IT'S REALLY THE CONSIDERATION OF WHAT IS THE

00:25:09,290 --> 00:25:11,780
OBJECT LIFE CYCLE INDEPENDENCE?

00:25:11,780 --> 00:25:14,550
SO ONE SIDE MAY DEPEND ON THE OTHER BUT NOT VICE

00:25:14,550 --> 00:25:15,550
VERSA.

00:25:15,550 --> 00:25:17,610
SO YOU'RE DOING TO USE WEAK REFERENCES FOR THE

00:25:17,610 --> 00:25:19,400
INDEPENDENT SIDE.

00:25:19,400 --> 00:25:21,400
THE PROCESS IS TERMINATED.

00:25:21,400 --> 00:25:24,710
WELL, YOU NO LONGER NEED TO LOOK IT UP BY PROCESS

00:25:24,710 --> 00:25:28,140
I.D., NO LONGER MATTERS, RIGHTS?

00:25:28,140 --> 00:25:33,770
JUST LIKE THE WEAK VALUE DICTIONARY, ALL RIGHT?

00:25:33,770 --> 00:25:36,740
COULD YOU COMBINE BOTH IDEAS TOGETHER?

00:25:36,740 --> 00:25:42,260
WELL, YEAH, BOTH SIDES COULD BE INDEPENDENT.

00:25:42,260 --> 00:25:47,881
SO GYTHON IMPLEMENTS THIS INTO THE HINDER PATTERN, YOU MAY WANT TO WRAP THE JTHON CLASS

00:25:47,881 --> 00:25:53,080
TO ITS PYTHON WRAPPERS, INCLUDING FOR SUPPORT

00:25:53,080 --> 00:25:56,970
FOR SUBCLASSING THAT JAVA CLASS.

00:25:56,970 --> 00:26:03,480
YOU MAY BE THAT PYTHON CLASS MAY BE USED BY JAVA

00:26:03,480 --> 00:26:08,360
CLASSES SO, AGAIN, THERE WILL BE -- I'M SORRY, PYTHON CLASSES USING JAVA CLASS SO THERE WILL

00:26:08,360 --> 00:26:10,950
BE SOME STRONG REFERENCE FROM THAT PYTHON CODE

00:26:10,950 --> 00:26:14,100
SO IN BOTH CASES, YOU MAY HAVE STRONG REFERENCES

00:26:14,100 --> 00:26:16,950
BUT THE FACT THAT THERE IS THIS MAPPING, THIS

00:26:16,950 --> 00:26:24,030
ONE-TO-ONE MAPPING, YOU JUST WANTS TO ENSURE THERE CAN ONLY BE ONE AND WHEN EITHER SIDE

00:26:24,030 --> 00:26:30,590
GOES AWAY, IT SHOULD ALSO GO AT THAT POINT.

00:26:30,590 --> 00:26:38,870
SO YOU DON'T UNNECESSARILY HOLD ON TO SOME RESOURCE AND LEAK.

00:26:38,870 --> 00:26:41,340
SO EITHER MIGHT GO AWAY.

00:26:41,340 --> 00:26:44,300
THE JAVA CLASSES IN THIS PARTICULAR CASE WILL BE

00:26:44,300 --> 00:26:50,320
GARBAGE COLLECTED IF NO CLASS LOADER OR THE OBJECTS OF THAT CLASS EXIST.

00:26:50,320 --> 00:26:56,520
BUT THE PYTHON USAGE OF THIS CLASS -- IF THERE'S NO USAGE ON THE PYTHON SIDE, SO YOU DON'T

00:26:56,520 --> 00:26:59,900
WANT THAT MAPPING TO UNNECESSARILY HOLD THINGS.

00:26:59,900 --> 00:27:04,620
IF THEY ARE STILL IN USE, YOU WANT IT TO BE HELD

00:27:04,620 --> 00:27:09,230
BUT IF THEY GO AWAY, THEN THERE'S NO POINT FOR

00:27:09,230 --> 00:27:11,480
THIS MAPPING AT THAT POINT.

00:27:11,480 --> 00:27:15,250
THERE IS A PURE PYTHON RECIPE AVAILABLE FOR THIS.

00:27:15,250 --> 00:27:17,280
I HAVEN'T REALLY EVALUATED THIS.

00:27:17,280 --> 00:27:21,290
THERE IS AN EASY JTHON VERSION BECAUSE I LIKE TO

00:27:21,290 --> 00:27:25,600
SHOW OFF GYTHON OCCASIONALLY, AND HERE WE HAVE

00:27:25,600 --> 00:27:33,120
IT, A WEAK KEYED VALUE DICTIONARY, IT'S SUBCLASS IS DICT SO WE CAN GET ITS CAPABILITIES.

00:27:33,120 --> 00:27:35,390
WE USE A BUILDER, OH, GOSH, I DIDN'T CHECK THIS

00:27:35,390 --> 00:27:38,340
ONE PIECE BUT IT REALLY IS JUST ARG S AND KEYWORD

00:27:38,340 --> 00:27:40,250
ARGS.

00:27:40,250 --> 00:27:47,150
FOR COMPLETENESS, YOU NEED TO ADD THESE METHODS BUT THESE ARE TRIVIAL AND THERE IS A THING

00:27:47,150 --> 00:27:51,030
IN THE GYTHON LIB MODULE THAT YOU CAN IMPORT THAT

00:27:51,030 --> 00:27:55,320
ALLOWS TO YOU BUILD DICTIONARIES WITHOUT ANY JAVA

00:27:55,320 --> 00:27:59,870
COMPATIBLE CONCURRENT MAP THAT YOU WANT.

00:27:59,870 --> 00:28:05,090
AND ASSIGN IT TO BEING OF A CERTAIN CLASS, THIS

00:28:05,090 --> 00:28:06,780
WOULD KEY VALUE DICTIONARY AND YOU'RE DONE AND

00:28:06,780 --> 00:28:10,830
NOW YOU HAVE A WEAK KEY VALUE DICTIONARY FOR REAL.

00:28:10,830 --> 00:28:13,820
THAT IS CONCURRENT AND SAFE.

00:28:13,820 --> 00:28:16,290
AND I AM DONE.

00:28:16,290 --> 00:28:19,650
ANY QUESTIONS?

00:28:19,650 --> 00:28:27,900
[ Applause ] >> AUDIENCE: IF THERE ARE ANY QUESTIONS FOR

00:28:27,900 --> 00:28:29,700
JIM, THERE IS A MICROPHONE RIGHT THERE.

00:28:29,700 --> 00:28:36,100
WE HAVE TIME FOR ONE QUESTION, PROBABLY.

00:28:36,100 --> 00:28:37,590
OTHERWISE I'M SURE YOU'LL BE ABLE TO GRAB HIM IN

00:28:37,590 --> 00:28:39,039
THE HALL AFTERWARDS.

00:28:39,039 --> 00:28:40,039
>> GREAT.

00:28:40,039 --> 00:28:41,039
ALL RIGHT.

00:28:41,039 --> 00:28:42,140

YouTube URL: https://www.youtube.com/watch?v=NknSssmLk4w


