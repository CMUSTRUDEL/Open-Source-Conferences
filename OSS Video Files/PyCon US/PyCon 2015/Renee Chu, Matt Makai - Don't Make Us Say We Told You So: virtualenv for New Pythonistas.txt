Title: Renee Chu, Matt Makai - Don't Make Us Say We Told You So: virtualenv for New Pythonistas
Publication date: 2015-04-11
Playlist: PyCon 2015
Description: 
	"Speakers: Renee Chu, Matt Makai

Even though itâ€™s possible to program without using virtual environments, you can shoot yourself in the foot without them. This talk will start with an illustration of how not using virtual environments can mess you up as a programmer, and will walk you through a simple way to get started with good habits using virtualenv.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:00,000 --> 00:00:06,420
going on okay perfect so here we have on

00:00:03,600 --> 00:00:07,560
the screen up here we have and I'll just

00:00:06,420 --> 00:00:09,480
make that a little bit larger for

00:00:07,560 --> 00:00:12,210
everyone in the room what we have is

00:00:09,480 --> 00:00:14,280
Django admin pie and we can see that the

00:00:12,210 --> 00:00:16,920
version that we are using is one dot six

00:00:14,280 --> 00:00:19,590
and so if we go into our work project

00:00:16,920 --> 00:00:21,119
and we have our Django project let's say

00:00:19,590 --> 00:00:23,519
this is a simple Django project we are

00:00:21,119 --> 00:00:25,410
working on this is a 1 dot 6 project

00:00:23,519 --> 00:00:27,330
again using south so if we were to take

00:00:25,410 --> 00:00:29,279
a look at the installed apps we would

00:00:27,330 --> 00:00:31,230
see South is in there for database

00:00:29,279 --> 00:00:34,559
migrations so let's say we're at our day

00:00:31,230 --> 00:00:36,390
job and we're doing our code right

00:00:34,559 --> 00:00:39,329
writing some new code we add a new

00:00:36,390 --> 00:00:43,410
column to one of the database models and

00:00:39,329 --> 00:00:46,200
then we run our django python managed by

00:00:43,410 --> 00:00:48,420
my grade which goes through South we do

00:00:46,200 --> 00:00:50,910
our migrate everything looks good we

00:00:48,420 --> 00:00:54,000
check in our code it is Friday afternoon

00:00:50,910 --> 00:00:59,309
and we say I'm out of here like I'm done

00:00:54,000 --> 00:01:01,590
for the week now one dot six a perfectly

00:00:59,309 --> 00:01:04,140
stable version of Django but we want to

00:01:01,590 --> 00:01:06,000
use on our side project we want to we're

00:01:04,140 --> 00:01:08,310
sorting to think of what side project

00:01:06,000 --> 00:01:09,869
could i create in order to keep my

00:01:08,310 --> 00:01:11,880
skills up so that when we eventually

00:01:09,869 --> 00:01:14,400
upgrade our work project from one dot

00:01:11,880 --> 00:01:17,280
621 date we're ready for it so there's

00:01:14,400 --> 00:01:20,790
some changes to django for example South

00:01:17,280 --> 00:01:23,430
was for one dot six and prior versions

00:01:20,790 --> 00:01:25,530
to do migrations but inden go 17

00:01:23,430 --> 00:01:28,140
migrations were introduced into the core

00:01:25,530 --> 00:01:30,479
framework so this is a switch now when

00:01:28,140 --> 00:01:32,280
we go to django 18 for our side project

00:01:30,479 --> 00:01:34,439
we don't have to worry about using south

00:01:32,280 --> 00:01:37,259
so we're going to go ahead and install

00:01:34,439 --> 00:01:40,049
let's say we're in this is for the art

00:01:37,259 --> 00:01:41,549
we're at home on the weekend and we say

00:01:40,049 --> 00:01:44,700
okay I'm going to start a side project

00:01:41,549 --> 00:01:48,030
with Django one dotty so we do sudo pip

00:01:44,700 --> 00:01:50,310
install and we say Django equals 18 and

00:01:48,030 --> 00:01:53,159
we just say okay let's go ahead and

00:01:50,310 --> 00:01:55,380
download one dotty and this is going to

00:01:53,159 --> 00:01:57,180
install as a Python package into our

00:01:55,380 --> 00:01:59,280
environment now while we're waiting for

00:01:57,180 --> 00:02:00,500
that to install let's say let's come up

00:01:59,280 --> 00:02:04,280
with the IDF for our

00:02:00,500 --> 00:02:05,900
our side project so we want our side

00:02:04,280 --> 00:02:08,240
project if we're going to spend our own

00:02:05,900 --> 00:02:09,970
personal time working on it we want to

00:02:08,240 --> 00:02:12,650
make sure it goes viral so we combine

00:02:09,970 --> 00:02:15,830
pets cats and dogs which of course

00:02:12,650 --> 00:02:18,620
always go viral with tinder which is you

00:02:15,830 --> 00:02:20,180
know one of the great apps of the last

00:02:18,620 --> 00:02:22,100
couple years so we can we have this idea

00:02:20,180 --> 00:02:24,200
we're going to create tinder for pets so

00:02:22,100 --> 00:02:25,850
pets can decide whether they want to how

00:02:24,200 --> 00:02:27,560
they can rate other pets do I like this

00:02:25,850 --> 00:02:29,060
other pet so this is our side project

00:02:27,560 --> 00:02:31,310
like this is definitely going viral and

00:02:29,060 --> 00:02:33,800
I'm creating a django app and one that

00:02:31,310 --> 00:02:35,420
is going to implement tender for pets so

00:02:33,800 --> 00:02:37,670
now when we take a look at our Django

00:02:35,420 --> 00:02:40,280
admin da pie we've installed Django 18

00:02:37,670 --> 00:02:43,070
and we can say what version do we have

00:02:40,280 --> 00:02:45,590
here okay we've got 128 up on the screen

00:02:43,070 --> 00:02:47,270
and it's a little bit cut off there so i

00:02:45,590 --> 00:02:49,489
will just make sure that i move it over

00:02:47,270 --> 00:02:54,020
so we can we can see all the output that

00:02:49,489 --> 00:02:58,610
is on the screen here okay so Python or

00:02:54,020 --> 00:03:00,560
Django admin pie and we will start our

00:02:58,610 --> 00:03:03,410
project and we'll just call this thing

00:03:00,560 --> 00:03:05,170
up now we are in our work project

00:03:03,410 --> 00:03:07,220
directory so we need to go up one level

00:03:05,170 --> 00:03:08,450
so we have our work project that's

00:03:07,220 --> 00:03:12,680
separate and we're going to create our

00:03:08,450 --> 00:03:15,580
side project so Django admin py start

00:03:12,680 --> 00:03:19,700
project side proj call it sighs Roger

00:03:15,580 --> 00:03:22,970
okay go into side proj and we'll do

00:03:19,700 --> 00:03:25,700
Python manage pi start app tinder for

00:03:22,970 --> 00:03:28,070
pets okay we work on our tinder for pets

00:03:25,700 --> 00:03:29,450
application and we unfortunately don't

00:03:28,070 --> 00:03:31,130
have time to finish it over the weekend

00:03:29,450 --> 00:03:33,110
so it's the end of the weekend we're

00:03:31,130 --> 00:03:36,980
like all right I'll finish it next

00:03:33,110 --> 00:03:39,769
weekend and we go to bed next morning

00:03:36,980 --> 00:03:41,989
wake up go to work start working on our

00:03:39,769 --> 00:03:44,810
work project add a new column to a

00:03:41,989 --> 00:03:46,610
database table we do Python managed by

00:03:44,810 --> 00:03:50,390
my great so we can apply the migrations

00:03:46,610 --> 00:03:53,120
and what happens we get an error this is

00:03:50,390 --> 00:03:56,450
not the expected behavior what's

00:03:53,120 --> 00:03:59,150
happening here is that South that that

00:03:56,450 --> 00:04:01,040
sequel light does not work with Django

00:03:59,150 --> 00:04:03,739
198 migrations and we suddenly realize

00:04:01,040 --> 00:04:05,750
oh right i'm on django one that eid i

00:04:03,739 --> 00:04:08,540
should be using django one dot 64 work

00:04:05,750 --> 00:04:10,580
should i uninstall shy reinstall which

00:04:08,540 --> 00:04:11,160
point release we're reusing for Django I

00:04:10,580 --> 00:04:14,550
don't remember

00:04:11,160 --> 00:04:18,000
so this is what is called the

00:04:14,550 --> 00:04:19,950
dependencies problem that we run into so

00:04:18,000 --> 00:04:22,350
the dependencies problem is we add may

00:04:19,950 --> 00:04:24,510
have multiple work projects multiple

00:04:22,350 --> 00:04:26,700
side projects and what we see is our

00:04:24,510 --> 00:04:29,460
work project may be running one version

00:04:26,700 --> 00:04:32,250
of Python one version of Django many

00:04:29,460 --> 00:04:34,650
different dependencies different point

00:04:32,250 --> 00:04:36,840
releases even and our side project we

00:04:34,650 --> 00:04:39,090
don't have the legacy code so we can use

00:04:36,840 --> 00:04:40,800
the latest and greatest what happens if

00:04:39,090 --> 00:04:43,050
we multiply the work projects some of us

00:04:40,800 --> 00:04:45,060
are working on on five or ten projects

00:04:43,050 --> 00:04:46,950
at a time or what if we're working on

00:04:45,060 --> 00:04:50,190
multiple side projects suddenly the

00:04:46,950 --> 00:04:52,200
dependencies multiply and we have so

00:04:50,190 --> 00:04:56,010
many of them and that's the dependencies

00:04:52,200 --> 00:04:58,380
problem so to describe a little bit more

00:04:56,010 --> 00:05:00,030
about what happened here what how we got

00:04:58,380 --> 00:05:02,250
ourselves into this situation and how we

00:05:00,030 --> 00:05:04,290
solve it with virtual m ranae's gonna

00:05:02,250 --> 00:05:07,590
take over thanks Matt can you guys hear

00:05:04,290 --> 00:05:10,200
me great all right so what was going on

00:05:07,590 --> 00:05:12,540
when we installed Django 18 over the

00:05:10,200 --> 00:05:14,760
weekend was we have our system wide

00:05:12,540 --> 00:05:16,590
Python interpreter and our system wide

00:05:14,760 --> 00:05:20,010
site packages that stores all the

00:05:16,590 --> 00:05:22,950
libraries our computer uses and when we

00:05:20,010 --> 00:05:25,200
installed one dot 64 work we had that

00:05:22,950 --> 00:05:27,140
installed in our system wide Python then

00:05:25,200 --> 00:05:31,020
over the weekend we did pip install

00:05:27,140 --> 00:05:34,200
Django 18 and that over Road what we had

00:05:31,020 --> 00:05:36,419
in 16 and we were using 18 so that when

00:05:34,200 --> 00:05:38,640
we went back to work on Monday we had

00:05:36,419 --> 00:05:40,890
overridden 1 dot 6 and we couldn't use

00:05:38,640 --> 00:05:43,050
any of our old one dot sick syntax to

00:05:40,890 --> 00:05:45,270
manage our schema migration so this is

00:05:43,050 --> 00:05:47,400
bad it entails that every time we switch

00:05:45,270 --> 00:05:50,280
projects we have to override our system

00:05:47,400 --> 00:05:51,660
Python better to start from the

00:05:50,280 --> 00:05:53,490
beginning with two separate virtual

00:05:51,660 --> 00:05:56,160
environment so that when you're at work

00:05:53,490 --> 00:05:58,440
you can always be using 16 until you

00:05:56,160 --> 00:05:59,940
need to upgrade that version and then

00:05:58,440 --> 00:06:01,650
when you're at home you can always be

00:05:59,940 --> 00:06:04,740
using one dotting until you're ready to

00:06:01,650 --> 00:06:06,240
change that so to keep them separate we

00:06:04,740 --> 00:06:08,250
would start to separate virtual

00:06:06,240 --> 00:06:11,880
environments which matt is going to do

00:06:08,250 --> 00:06:14,669
now live so he's got his two directories

00:06:11,880 --> 00:06:16,440
for work and side projects and he's

00:06:14,669 --> 00:06:18,690
going to make a separate directory for

00:06:16,440 --> 00:06:20,910
his virtual environments these are the

00:06:18,690 --> 00:06:22,180
environments that will store this the

00:06:20,910 --> 00:06:24,580
environments

00:06:22,180 --> 00:06:27,370
civic the project specific versions of

00:06:24,580 --> 00:06:30,190
Django so he makes one first for his

00:06:27,370 --> 00:06:33,639
work projects and it installs everything

00:06:30,190 --> 00:06:36,550
and he does the the familiar syntax

00:06:33,639 --> 00:06:38,710
source bin activate which activates the

00:06:36,550 --> 00:06:40,240
virtual environment and you know that

00:06:38,710 --> 00:06:41,889
you're in your work virtual environment

00:06:40,240 --> 00:06:44,530
because work project shows up at the

00:06:41,889 --> 00:06:46,870
cursor so he's in his new work project

00:06:44,530 --> 00:06:49,780
virtual environment and he starts up

00:06:46,870 --> 00:06:52,449
Python and imports Django to get start

00:06:49,780 --> 00:06:54,699
on its work project and we can see that

00:06:52,449 --> 00:06:56,889
Django is suddenly not installed in the

00:06:54,699 --> 00:06:58,599
work project virtual environment we have

00:06:56,889 --> 00:07:00,789
a clean slate as far as Django is

00:06:58,599 --> 00:07:05,380
concerned so we're free to install

00:07:00,789 --> 00:07:08,380
Django one dot six so well that's

00:07:05,380 --> 00:07:11,349
installing it goes ahead and installed

00:07:08,380 --> 00:07:13,360
successfully and so now this time when

00:07:11,349 --> 00:07:16,330
we start up Python and try to import

00:07:13,360 --> 00:07:18,009
Django we see that we have it and when

00:07:16,330 --> 00:07:20,410
we check the version of Django we have

00:07:18,009 --> 00:07:23,259
we see that we have the right one which

00:07:20,410 --> 00:07:25,300
is Django 16 great so we can have a

00:07:23,259 --> 00:07:27,760
productive week at work we can work on

00:07:25,300 --> 00:07:29,889
django 16 and we're not messing with

00:07:27,760 --> 00:07:32,680
anything outside of our work virtual

00:07:29,889 --> 00:07:34,449
environment so Friday comes along we can

00:07:32,680 --> 00:07:36,760
go ahead and deactivate this virtual

00:07:34,449 --> 00:07:39,400
environment and go and start working on

00:07:36,760 --> 00:07:41,380
our side project so so Friday night

00:07:39,400 --> 00:07:43,510
Saturday morning we can create a new

00:07:41,380 --> 00:07:45,310
virtual environment this one exclusively

00:07:43,510 --> 00:07:48,039
for our side project and all the

00:07:45,310 --> 00:07:49,930
libraries that it will need we activate

00:07:48,039 --> 00:07:52,479
our side project would source been

00:07:49,930 --> 00:07:54,610
activate on our side project virtual

00:07:52,479 --> 00:07:56,909
environment and when we start up Python

00:07:54,610 --> 00:08:00,580
here you can go ahead and try to import

00:07:56,909 --> 00:08:02,620
Django and again we don't have Django

00:08:00,580 --> 00:08:04,330
installed on this virtual environment we

00:08:02,620 --> 00:08:06,639
have a clean slate within our side

00:08:04,330 --> 00:08:09,610
project virtual environment so we are

00:08:06,639 --> 00:08:11,860
free to install Django 18 far side

00:08:09,610 --> 00:08:14,289
projects so that we can use one date for

00:08:11,860 --> 00:08:16,690
all of our side project needs so we go

00:08:14,289 --> 00:08:18,699
ahead and install it a fire up Python

00:08:16,690 --> 00:08:20,590
again we know that we have Django

00:08:18,699 --> 00:08:24,759
installed and when we see which version

00:08:20,590 --> 00:08:26,560
we have fortunately we have Django 18 so

00:08:24,759 --> 00:08:28,419
now we have two completely separate

00:08:26,560 --> 00:08:30,159
installations of Django they can work

00:08:28,419 --> 00:08:31,690
completely separate from each other and

00:08:30,159 --> 00:08:33,700
we can flip between our work and our

00:08:31,690 --> 00:08:34,370
side projects without getting into a

00:08:33,700 --> 00:08:37,940
dependency

00:08:34,370 --> 00:08:39,710
mess great so what exactly happened here

00:08:37,940 --> 00:08:41,599
how is it that we were able to keep

00:08:39,710 --> 00:08:44,120
these two versions of Django separate

00:08:41,599 --> 00:08:45,830
whereas before we're installing it they

00:08:44,120 --> 00:08:49,160
were getting overridden with each other

00:08:45,830 --> 00:08:50,540
well what happens when you create two

00:08:49,160 --> 00:08:53,270
separate virtual environments this

00:08:50,540 --> 00:08:55,670
actually creates two directories a work

00:08:53,270 --> 00:08:58,040
project and directory and a side project

00:08:55,670 --> 00:09:00,680
and directory so instead of installing

00:08:58,040 --> 00:09:03,500
into your live site packages on your

00:09:00,680 --> 00:09:05,990
system wide Python it creates a new lib

00:09:03,500 --> 00:09:08,420
site packages in the work project

00:09:05,990 --> 00:09:10,520
virtual environment directory and a site

00:09:08,420 --> 00:09:12,980
packages in the side project virtual end

00:09:10,520 --> 00:09:15,200
directory and doesn't just create two

00:09:12,980 --> 00:09:17,960
separate lib site packages folders it

00:09:15,200 --> 00:09:20,420
creates to bin executables folders we're

00:09:17,960 --> 00:09:22,610
two completely separate versions of the

00:09:20,420 --> 00:09:24,170
Python executable get downloaded that's

00:09:22,610 --> 00:09:25,520
how you can use Python three in one

00:09:24,170 --> 00:09:29,870
project and Python two in another

00:09:25,520 --> 00:09:31,450
project when you evoke Python it will

00:09:29,870 --> 00:09:34,940
instead of running the system-wide

00:09:31,450 --> 00:09:37,339
Python that you have it will run the

00:09:34,940 --> 00:09:39,170
specific Python version that it's in the

00:09:37,339 --> 00:09:41,360
virtual environment you're in so if

00:09:39,170 --> 00:09:43,730
you're activated the work projects I'd

00:09:41,360 --> 00:09:45,470
prot the work project virtual

00:09:43,730 --> 00:09:47,839
environment and we'll use that version

00:09:45,470 --> 00:09:50,630
of Python that's installed in the bin

00:09:47,839 --> 00:09:52,370
executables for work project and then

00:09:50,630 --> 00:09:54,589
when trying to decide which version of

00:09:52,370 --> 00:09:57,050
django to use if you import django in

00:09:54,589 --> 00:10:00,380
your work virtual environment python

00:09:57,050 --> 00:10:02,060
looks for the relative lib site packages

00:10:00,380 --> 00:10:03,380
folder the one that's relative to the

00:10:02,060 --> 00:10:05,420
version of python that you're running

00:10:03,380 --> 00:10:07,250
and it will use that version of the

00:10:05,420 --> 00:10:09,230
library if it doesn't find something

00:10:07,250 --> 00:10:12,560
there then we'll say there's no module

00:10:09,230 --> 00:10:14,630
named Jango so that's what virtual n

00:10:12,560 --> 00:10:16,459
visits not two completely separate

00:10:14,630 --> 00:10:18,380
environments at all actually it's just a

00:10:16,459 --> 00:10:20,690
filesystem helper that keeps your

00:10:18,380 --> 00:10:23,990
projects organized so now the question

00:10:20,690 --> 00:10:26,690
is how does virtual and no to only use

00:10:23,990 --> 00:10:29,270
one folder in one project and use

00:10:26,690 --> 00:10:30,800
another folder another project and to

00:10:29,270 --> 00:10:33,709
know that you just have to understand

00:10:30,800 --> 00:10:35,839
the path variable so if you do echo path

00:10:33,709 --> 00:10:37,970
in your terminal that'll just output all

00:10:35,839 --> 00:10:39,620
the places where your system will look

00:10:37,970 --> 00:10:42,320
when you're trying to execute something

00:10:39,620 --> 00:10:44,480
so for example if you said Python do

00:10:42,320 --> 00:10:46,670
something for me in this example with

00:10:44,480 --> 00:10:47,329
echo path this is without any virtual

00:10:46,670 --> 00:10:49,549
environment

00:10:47,329 --> 00:10:52,189
debated it'll first look under user

00:10:49,549 --> 00:10:54,439
local bin and say oh do I have Python

00:10:52,189 --> 00:10:56,720
installed in this directory and if it

00:10:54,439 --> 00:10:59,509
doesn't then we'll go look in user bin

00:10:56,720 --> 00:11:02,149
and say hey do I have the Python do I of

00:10:59,509 --> 00:11:04,579
Python downloaded here and so on and so

00:11:02,149 --> 00:11:07,129
forth so that's how path works in a

00:11:04,579 --> 00:11:09,499
normal condition when you run source

00:11:07,129 --> 00:11:11,959
been activate the command to activate a

00:11:09,499 --> 00:11:13,910
virtual environment all that happens is

00:11:11,959 --> 00:11:16,249
it grabs the path to your virtual

00:11:13,910 --> 00:11:18,920
environment all the way down to the end

00:11:16,249 --> 00:11:22,279
folder where bin is and all it does is

00:11:18,920 --> 00:11:24,529
it it copies that on to the beginning of

00:11:22,279 --> 00:11:26,149
your path environment variable so if you

00:11:24,529 --> 00:11:28,369
did echo path while your virtual

00:11:26,149 --> 00:11:30,319
environment is was activated you'd see

00:11:28,369 --> 00:11:32,689
something like this it'd be all the same

00:11:30,319 --> 00:11:34,999
paths but at the very top you'd see the

00:11:32,689 --> 00:11:37,309
path to your virtual environment that

00:11:34,999 --> 00:11:39,559
means that when you say now Python do

00:11:37,309 --> 00:11:41,600
something for me it'll first look under

00:11:39,559 --> 00:11:43,519
the virtual environment we created and

00:11:41,600 --> 00:11:46,610
say do I have a version of Python there

00:11:43,519 --> 00:11:47,989
and if it does which should then it'll

00:11:46,610 --> 00:11:49,790
say okay great i'm going to use this

00:11:47,989 --> 00:11:52,009
version of python and when you say

00:11:49,790 --> 00:11:54,889
import django it'll it'll look in the

00:11:52,009 --> 00:11:56,779
relative site packages directory and say

00:11:54,889 --> 00:11:58,759
do i have a version of django installed

00:11:56,779 --> 00:12:00,860
and if it does then we'll go ahead and

00:11:58,759 --> 00:12:02,720
use that version of django it won't look

00:12:00,860 --> 00:12:04,339
under the system packages at all unless

00:12:02,720 --> 00:12:07,160
you don't have something installed in

00:12:04,339 --> 00:12:09,860
your virtual and python so that's how

00:12:07,160 --> 00:12:12,019
virtual and works again it's not two

00:12:09,860 --> 00:12:14,059
completely separate environments at all

00:12:12,019 --> 00:12:16,850
it's just a file system convenience and

00:12:14,059 --> 00:12:19,309
a script that modifies your path

00:12:16,850 --> 00:12:21,319
variable so now that you know a little

00:12:19,309 --> 00:12:23,059
bit about how it works Matt's going to

00:12:21,319 --> 00:12:25,879
tell you about how to use it and how to

00:12:23,059 --> 00:12:27,949
make it a little bit easier to use sure

00:12:25,879 --> 00:12:30,559
thanks your name so I'm going to go into

00:12:27,949 --> 00:12:32,600
some tips and trips tips and tricks but

00:12:30,559 --> 00:12:34,429
before I do that I will say we're very

00:12:32,600 --> 00:12:36,709
fortunate in the Python community that

00:12:34,429 --> 00:12:39,980
the majority of the code that we use is

00:12:36,709 --> 00:12:41,809
open source and so we've shown what the

00:12:39,980 --> 00:12:44,149
dependencies problem is we've shown how

00:12:41,809 --> 00:12:46,939
vertuoline can solve that it's shown the

00:12:44,149 --> 00:12:49,819
virtual M is not magic under the covers

00:12:46,939 --> 00:12:52,309
we sometimes use tools without thinking

00:12:49,819 --> 00:12:54,529
about what's actually happening but we

00:12:52,309 --> 00:12:57,319
can actually take a look at the code

00:12:54,529 --> 00:12:58,999
behind it and so as you use virtual

00:12:57,319 --> 00:13:00,670
anvil on a daily basis with your Python

00:12:58,999 --> 00:13:03,310
projects I recommend

00:13:00,670 --> 00:13:06,460
going to get hub there's a single Python

00:13:03,310 --> 00:13:08,320
file virtual m pi you can see how this

00:13:06,460 --> 00:13:09,850
was put together it's a good learning

00:13:08,320 --> 00:13:11,800
opportunity if you're still new to

00:13:09,850 --> 00:13:13,660
python just trying to figure out well

00:13:11,800 --> 00:13:15,760
what is this virtual own thing I've been

00:13:13,660 --> 00:13:17,500
using it every day I get that it creates

00:13:15,760 --> 00:13:20,050
a separate directory every time I invoke

00:13:17,500 --> 00:13:21,940
it but what's actually happening under

00:13:20,050 --> 00:13:25,240
the cover so take a look at the source

00:13:21,940 --> 00:13:27,490
code behind it all right so we need some

00:13:25,240 --> 00:13:30,850
convenience functions what happens when

00:13:27,490 --> 00:13:32,320
we have 50 virtual virtual MS this can

00:13:30,850 --> 00:13:36,010
be a pain in the butt to remember which

00:13:32,320 --> 00:13:37,690
ones do I have available and what about

00:13:36,010 --> 00:13:39,760
switching back and forth between them

00:13:37,690 --> 00:13:43,900
and there's also one other component

00:13:39,760 --> 00:13:46,930
that is really important virtual ms are

00:13:43,900 --> 00:13:49,180
for dependency isolation they don't

00:13:46,930 --> 00:13:52,330
handle something that is also critical

00:13:49,180 --> 00:13:55,150
to using different projects which is

00:13:52,330 --> 00:13:57,190
called environment variables so in one

00:13:55,150 --> 00:13:59,560
project we may have set debug to true

00:13:57,190 --> 00:14:01,660
and in another project we set debug to

00:13:59,560 --> 00:14:03,550
false and we may have 40 or 50

00:14:01,660 --> 00:14:05,950
environment variables what database are

00:14:03,550 --> 00:14:07,930
reconnecting to different things like

00:14:05,950 --> 00:14:09,250
that what installed apps do we have and

00:14:07,930 --> 00:14:11,920
we want to pull those environment

00:14:09,250 --> 00:14:13,540
variables for our system so the way that

00:14:11,920 --> 00:14:14,920
I handle this personally and there's a

00:14:13,540 --> 00:14:16,600
few different ways we can do this we'll

00:14:14,920 --> 00:14:19,860
take a look at them I handle this with

00:14:16,600 --> 00:14:22,810
shell aliases and what this does is in

00:14:19,860 --> 00:14:26,080
the batch in my batch profile on Mac OS

00:14:22,810 --> 00:14:28,900
10 I have an alias set up for work proj

00:14:26,080 --> 00:14:32,080
what this does is it whenever I type

00:14:28,900 --> 00:14:35,170
work proj it will do a source then

00:14:32,080 --> 00:14:37,240
activate on my work work proj virtual

00:14:35,170 --> 00:14:39,460
level it will change me into the

00:14:37,240 --> 00:14:41,680
directory of work projects or code is

00:14:39,460 --> 00:14:46,510
and then it will invoke a shell script

00:14:41,680 --> 00:14:47,830
which is set EMV SSH it will set my

00:14:46,510 --> 00:14:49,870
environment variables that are specified

00:14:47,830 --> 00:14:51,820
in there and we haven't written that set

00:14:49,870 --> 00:14:53,320
EMDs yet so we'll write that in just a

00:14:51,820 --> 00:14:56,610
moment but I wanted to show you what

00:14:53,320 --> 00:15:00,280
that looks like so if we type work proj

00:14:56,610 --> 00:15:02,110
it will activate the virtual m so we can

00:15:00,280 --> 00:15:05,140
see here that we've changed from side

00:15:02,110 --> 00:15:07,090
proj to work proj and i will bring this

00:15:05,140 --> 00:15:09,790
up again and then the second thing is it

00:15:07,090 --> 00:15:12,130
moved us into the work proj source code

00:15:09,790 --> 00:15:13,540
directory but we don't have that set in

00:15:12,130 --> 00:15:17,139
these files so we'll say

00:15:13,540 --> 00:15:19,899
that MV is SH and we'll say export debug

00:15:17,139 --> 00:15:21,759
is equal to true now before we run this

00:15:19,899 --> 00:15:24,610
let's take a look at what debug is set

00:15:21,759 --> 00:15:27,459
to right now it's blank but if we do

00:15:24,610 --> 00:15:31,870
work proj it's running that shell script

00:15:27,459 --> 00:15:34,569
and then we can say echo debug set to

00:15:31,870 --> 00:15:36,730
true now we can do this for whatever

00:15:34,569 --> 00:15:38,380
environment that whatever project that

00:15:36,730 --> 00:15:39,730
we're working on we can invoke a shell

00:15:38,380 --> 00:15:42,040
script that will set the environment

00:15:39,730 --> 00:15:44,949
variables that we need so for example if

00:15:42,040 --> 00:15:46,240
we had to do this on side proj so if we

00:15:44,949 --> 00:15:49,329
just copy this real quick and we say

00:15:46,240 --> 00:15:51,639
side project and we change work proj to

00:15:49,329 --> 00:15:53,380
side proj and then we say i don't want

00:15:51,639 --> 00:15:55,300
to switch into work projects which into

00:15:53,380 --> 00:15:57,310
my side project and then we could evoke

00:15:55,300 --> 00:15:59,889
the shell script there now one thing to

00:15:57,310 --> 00:16:02,290
note is that we need to reload our bash

00:15:59,889 --> 00:16:05,949
profile so we would do a source bash

00:16:02,290 --> 00:16:07,750
profile and now this is reloaded so the

00:16:05,949 --> 00:16:11,110
command that I just wrote in there is

00:16:07,750 --> 00:16:13,420
now active so we can say side proj it

00:16:11,110 --> 00:16:15,490
will activate the side proj virtual em

00:16:13,420 --> 00:16:17,470
switch mean to the side proj directory

00:16:15,490 --> 00:16:18,819
and it tried to invoke the shell script

00:16:17,470 --> 00:16:21,160
with my environment variables what that

00:16:18,819 --> 00:16:22,810
didn't exist so we could write that but

00:16:21,160 --> 00:16:24,130
we're not going to worry about that so

00:16:22,810 --> 00:16:25,930
there's one way that's actually how I

00:16:24,130 --> 00:16:28,180
handle switching between environments I

00:16:25,930 --> 00:16:29,980
just type in work projects I proj or

00:16:28,180 --> 00:16:33,010
whatever I just usually have an acronym

00:16:29,980 --> 00:16:35,290
for whatever projects I'm working on one

00:16:33,010 --> 00:16:38,170
way to handle it now just to note if you

00:16:35,290 --> 00:16:40,089
are on Mac OS 10 that would be the bash

00:16:38,170 --> 00:16:42,370
profile that is the second one there if

00:16:40,089 --> 00:16:45,100
you're on Linux it's the dot a char C

00:16:42,370 --> 00:16:46,660
file so depending on which operating

00:16:45,100 --> 00:16:49,389
system you're on that's where you would

00:16:46,660 --> 00:16:50,709
add your shell aliases now there's

00:16:49,389 --> 00:16:54,250
another way we can handle this there's a

00:16:50,709 --> 00:16:55,930
Python or really just a library that we

00:16:54,250 --> 00:16:58,870
could use in general it's not a thon

00:16:55,930 --> 00:17:01,149
specific but it's called Auto mm when

00:16:58,870 --> 00:17:04,480
Otto m does essentially does the same

00:17:01,149 --> 00:17:08,110
thing but it looks for a specific file

00:17:04,480 --> 00:17:10,209
it's looking for a dot env file so if we

00:17:08,110 --> 00:17:11,620
were to use auto am so I've already gone

00:17:10,209 --> 00:17:14,500
ahead and installed this for the sake of

00:17:11,620 --> 00:17:16,750
time and we have that bash profile we

00:17:14,500 --> 00:17:18,880
take a look down here at the bottom two

00:17:16,750 --> 00:17:20,380
lines we have a source and we activate

00:17:18,880 --> 00:17:22,750
the shell script what it's doing is its

00:17:20,380 --> 00:17:24,760
I wouldn't say hijacking hijackings

00:17:22,750 --> 00:17:26,689
probably a negative connotation but it's

00:17:24,760 --> 00:17:29,419
it is adding some additional funk

00:17:26,689 --> 00:17:31,610
nality to the change directory command

00:17:29,419 --> 00:17:33,740
so when we change into a directory if

00:17:31,610 --> 00:17:35,840
there is a dot env file in that

00:17:33,740 --> 00:17:38,870
directory it will attempt to run that

00:17:35,840 --> 00:17:41,240
shell script so if we have an hour sci

00:17:38,870 --> 00:17:44,720
proj we don't have a set IAM vs in our

00:17:41,240 --> 00:17:47,179
side project we could do a dot EMV so we

00:17:44,720 --> 00:17:48,769
could say export debug is equal to false

00:17:47,179 --> 00:17:51,559
in this project we want debug to be

00:17:48,769 --> 00:17:53,360
equal to false so what would happen here

00:17:51,559 --> 00:17:56,330
is let's say let's just take a look at

00:17:53,360 --> 00:17:58,250
echo debug is equal to true if we go up

00:17:56,330 --> 00:18:01,039
a level and then we go into our side

00:17:58,250 --> 00:18:03,559
proj what's happening here is auto amp

00:18:01,039 --> 00:18:05,120
is saying this is the first time you've

00:18:03,559 --> 00:18:07,639
entered this directory and this is the

00:18:05,120 --> 00:18:09,860
first time that you're about to run this

00:18:07,639 --> 00:18:10,909
dot env file are you sure you want to do

00:18:09,860 --> 00:18:13,100
this because here's here's what's going

00:18:10,909 --> 00:18:16,759
to happen it's going to export debug

00:18:13,100 --> 00:18:18,289
equal to false so you know if we have we

00:18:16,759 --> 00:18:19,519
didn't realize there was an EMV file in

00:18:18,289 --> 00:18:21,860
there we don't want to do it sort of a

00:18:19,519 --> 00:18:24,289
safe to go safeguard on it so we say do

00:18:21,860 --> 00:18:27,559
you want to allow this sure so now if we

00:18:24,289 --> 00:18:29,750
echo debug it's false what we expected

00:18:27,559 --> 00:18:31,669
because we used auto am so that's

00:18:29,750 --> 00:18:33,799
another way to handle environment

00:18:31,669 --> 00:18:36,889
variables and you would do you use auto

00:18:33,799 --> 00:18:39,259
end for that one thing to note again is

00:18:36,889 --> 00:18:41,389
that it's looking for a dot env file if

00:18:39,259 --> 00:18:42,740
you have any other name file doesn't

00:18:41,389 --> 00:18:44,720
work with that it's looking for a

00:18:42,740 --> 00:18:48,049
specific file name that's how it knows

00:18:44,720 --> 00:18:50,210
what to pick up there's one other helper

00:18:48,049 --> 00:18:52,700
library that combines a lot of these

00:18:50,210 --> 00:18:55,250
different pieces shell aliasing auto em

00:18:52,700 --> 00:18:57,230
and it's called virtual em wrapper and

00:18:55,250 --> 00:19:00,049
this is often mentioned in the same

00:18:57,230 --> 00:19:03,769
breath as virtual em what it does is it

00:19:00,049 --> 00:19:06,820
adds different hooks to be able to set

00:19:03,769 --> 00:19:10,129
environment variables or to be able to

00:19:06,820 --> 00:19:12,649
change between different projects so

00:19:10,129 --> 00:19:15,230
real quick demo of this is let's say

00:19:12,649 --> 00:19:18,740
we're done with our work proj 1 and sci

00:19:15,230 --> 00:19:23,720
proj to our side proj one and we say

00:19:18,740 --> 00:19:26,330
make virtual em side proj to creates a

00:19:23,720 --> 00:19:30,950
new virtual own activates it make

00:19:26,330 --> 00:19:32,779
virtual em work proj two and now great

00:19:30,950 --> 00:19:36,320
helper function here is called work on

00:19:32,779 --> 00:19:39,919
now we can just say work on side proj to

00:19:36,320 --> 00:19:40,410
work on work proj to so it allows us to

00:19:39,919 --> 00:19:43,140
very quick

00:19:40,410 --> 00:19:45,210
swap between environments so that's

00:19:43,140 --> 00:19:47,820
virtual improper now one other thing

00:19:45,210 --> 00:19:50,700
that I will note is there is a project

00:19:47,820 --> 00:19:53,250
an open source project is probably have

00:19:50,700 --> 00:19:55,950
heard about it now it has a lot of

00:19:53,250 --> 00:19:59,460
momentum behind it and it's called dr.

00:19:55,950 --> 00:20:01,770
docker is often described as virtual

00:19:59,460 --> 00:20:04,350
ambon steroids it's language and

00:20:01,770 --> 00:20:06,570
ecosystem agnostic and it's beyond the

00:20:04,350 --> 00:20:09,240
scope of virtual I'm you can use virtual

00:20:06,570 --> 00:20:12,330
em happily with virtual em rapper or

00:20:09,240 --> 00:20:14,310
shell aliasing or Auto am without ever

00:20:12,330 --> 00:20:15,570
having to touch docker but if you are

00:20:14,310 --> 00:20:19,080
interested in this there is a

00:20:15,570 --> 00:20:21,240
demystifying docker talk tomorrow that

00:20:19,080 --> 00:20:23,490
is at 12 10 and you can take a look at

00:20:21,240 --> 00:20:25,620
what that provides so just to wrap it up

00:20:23,490 --> 00:20:28,410
we'll turn it back to Renee thanks

00:20:25,620 --> 00:20:30,570
thanks you guys so we started off today

00:20:28,410 --> 00:20:33,000
in our little journey into virtual n

00:20:30,570 --> 00:20:34,560
with illustrating just why you'd want to

00:20:33,000 --> 00:20:36,630
use it maybe some of you guys are

00:20:34,560 --> 00:20:38,970
familiar with that awful feeling of

00:20:36,630 --> 00:20:41,730
realizing that the library views and

00:20:38,970 --> 00:20:43,650
export are clashing with each other we

00:20:41,730 --> 00:20:45,930
showed you how to use virtual

00:20:43,650 --> 00:20:48,690
environments to separate out your

00:20:45,930 --> 00:20:50,580
versions of a library and we also showed

00:20:48,690 --> 00:20:53,310
you under the hood how that works how

00:20:50,580 --> 00:20:55,200
they just set up separate directories

00:20:53,310 --> 00:20:58,350
and separate executables and library

00:20:55,200 --> 00:21:00,330
files and that all they do is when you

00:20:58,350 --> 00:21:02,040
activate a virtual environment your path

00:21:00,330 --> 00:21:04,560
points to one or the other of the

00:21:02,040 --> 00:21:06,180
directories and finally Matt showed you

00:21:04,560 --> 00:21:08,130
some convenience methods to handle

00:21:06,180 --> 00:21:10,470
things besides the dependencies problem

00:21:08,130 --> 00:21:12,180
such as environment variables and gave

00:21:10,470 --> 00:21:14,880
you clue as to using docker which

00:21:12,180 --> 00:21:17,250
handles dependencies problems beyond the

00:21:14,880 --> 00:21:18,780
scope of Python so thank you so much for

00:21:17,250 --> 00:21:22,100
coming and I think we have time for

00:21:18,780 --> 00:21:22,100
questions thank you all

00:21:35,389 --> 00:21:43,369
I'm I'm almost afraid to ask this does

00:21:38,879 --> 00:21:45,720
this work on windows yes yes so I

00:21:43,369 --> 00:21:47,249
unfortunately do not use windows as a

00:21:45,720 --> 00:21:50,039
development ironmen I used to though and

00:21:47,249 --> 00:21:52,940
I used to use cygwin so all the Python

00:21:50,039 --> 00:21:55,220
development i did was with cygwin and I

00:21:52,940 --> 00:21:57,659
can't remember it's been a few years

00:21:55,220 --> 00:22:00,179
what I did was eventually I switched to

00:21:57,659 --> 00:22:02,989
a virtual box with a ubuntu installation

00:22:00,179 --> 00:22:05,429
and you can also use something like

00:22:02,989 --> 00:22:08,549
nitrous io to have a cloud-based

00:22:05,429 --> 00:22:10,859
environment what i recommend to new

00:22:08,549 --> 00:22:12,179
developers is every tutorial for python

00:22:10,859 --> 00:22:14,419
you're going to read is probably going

00:22:12,179 --> 00:22:16,649
to be some sort of unix based

00:22:14,419 --> 00:22:18,649
interaction and that's why i say use a

00:22:16,649 --> 00:22:20,909
cloud-based system install VirtualBox

00:22:18,649 --> 00:22:23,309
you probably could get away with cygwin

00:22:20,909 --> 00:22:24,899
but it's it's going to be a little bit

00:22:23,309 --> 00:22:26,700
more about cognitive dissidence when

00:22:24,899 --> 00:22:32,580
you're reading some of the tutorials

00:22:26,700 --> 00:22:34,200
okay thank you did you talk about some

00:22:32,580 --> 00:22:35,609
of the challenges of relocating our

00:22:34,200 --> 00:22:39,119
virtual environments for one machine to

00:22:35,609 --> 00:22:41,909
say another machine sure you have

00:22:39,119 --> 00:22:43,950
anything particularly well it's just a

00:22:41,909 --> 00:22:45,779
file system helper so as long as you

00:22:43,950 --> 00:22:48,749
export all the libraries you have where

00:22:45,779 --> 00:22:50,249
you're able to replicate them moving

00:22:48,749 --> 00:22:53,970
them across machines shouldn't be a

00:22:50,249 --> 00:22:57,570
problem yeah that being said I generally

00:22:53,970 --> 00:22:59,220
create new virtual m's by moving from

00:22:57,570 --> 00:23:00,989
one machine to another so let's say I'm

00:22:59,220 --> 00:23:02,609
in my development of iron man and I go

00:23:00,989 --> 00:23:05,460
to a test machine there will be a new

00:23:02,609 --> 00:23:07,619
virtual em there and it will do pip

00:23:05,460 --> 00:23:10,889
install of all the dependencies and it's

00:23:07,619 --> 00:23:12,389
a fresh copy that's often how I I will

00:23:10,889 --> 00:23:14,460
approach it but there you probably could

00:23:12,389 --> 00:23:15,929
get away with copying some of it I just

00:23:14,460 --> 00:23:17,399
worry about some of the side effects

00:23:15,929 --> 00:23:18,899
that could happen with that I think

00:23:17,399 --> 00:23:20,340
you're exactly the person that should be

00:23:18,899 --> 00:23:21,539
going to the doctor talk tomorrow

00:23:20,340 --> 00:23:26,239
because I think it's a lot of what

00:23:21,539 --> 00:23:26,239
Dockers meant to solve thanks

00:23:28,149 --> 00:23:35,779
can you use the virtual em for Python

00:23:32,749 --> 00:23:41,840
deployment for easy installation on host

00:23:35,779 --> 00:23:44,690
computers so I do I use a virtual on a

00:23:41,840 --> 00:23:46,399
test or production machine that's often

00:23:44,690 --> 00:23:48,740
because I'm deploying multiple web

00:23:46,399 --> 00:23:50,029
applications running on separate ports

00:23:48,740 --> 00:23:52,879
and so there'll be different virtual

00:23:50,029 --> 00:23:54,259
labs for them to keep it isolated as a

00:23:52,879 --> 00:23:56,389
large-scale deployment if you're just

00:23:54,259 --> 00:23:59,779
putting one Python application out there

00:23:56,389 --> 00:24:04,730
it you may not necessarily need it but i

00:23:59,779 --> 00:24:06,980
would i would use virtual m always for

00:24:04,730 --> 00:24:10,129
development and occasionally for

00:24:06,980 --> 00:24:11,419
production if that it depends on what

00:24:10,129 --> 00:24:17,749
your production deployment looks like in

00:24:11,419 --> 00:24:19,480
that case i have a question to what what

00:24:17,749 --> 00:24:23,210
are your thoughts on the fact that

00:24:19,480 --> 00:24:25,100
virtual in wrapper and virtually store

00:24:23,210 --> 00:24:27,019
the files that they use in different

00:24:25,100 --> 00:24:29,440
locations because virtually and rapper

00:24:27,019 --> 00:24:32,929
keeps all the bin and library files off

00:24:29,440 --> 00:24:35,090
somewhere that's predefined whereas when

00:24:32,929 --> 00:24:36,669
you just use virtually and it kind of i

00:24:35,090 --> 00:24:38,690
mean you want to say pollutes your

00:24:36,669 --> 00:24:40,249
project but it puts all of the

00:24:38,690 --> 00:24:41,960
directories in where your project is

00:24:40,249 --> 00:24:44,779
what are your thoughts and advice on

00:24:41,960 --> 00:24:47,059
that you can you can specify with

00:24:44,779 --> 00:24:49,909
virtual improper the location of e and

00:24:47,059 --> 00:24:51,759
like the m's that you want so if you

00:24:49,909 --> 00:24:53,749
prefer to have it like i often have a

00:24:51,759 --> 00:24:56,600
directory some people prefer to have a

00:24:53,749 --> 00:24:58,549
dot ends directory um so you can specify

00:24:56,600 --> 00:25:00,889
when you recommend using virtual in

00:24:58,549 --> 00:25:02,809
wrapper over just a virtual end or do

00:25:00,889 --> 00:25:06,049
you think that there are benefits to not

00:25:02,809 --> 00:25:07,999
using virtual in broker I don't use

00:25:06,049 --> 00:25:10,610
virtual rapper because I come from a

00:25:07,999 --> 00:25:13,940
background of Linux where I use a lot of

00:25:10,610 --> 00:25:14,899
shell scripting but it this is really

00:25:13,940 --> 00:25:16,039
where it gets into the personal

00:25:14,899 --> 00:25:17,960
preference and that's why I showed

00:25:16,039 --> 00:25:19,940
different options some people are happy

00:25:17,960 --> 00:25:21,820
using virtual em rapper other people

00:25:19,940 --> 00:25:26,149
would prefer to just use a more

00:25:21,820 --> 00:25:28,639
linux-based shell scripting or auto end

00:25:26,149 --> 00:25:31,779
something like that thank you very much

00:25:28,639 --> 00:25:31,779
anyone else have any questions

00:25:32,210 --> 00:25:37,920
thanks for your talk probably have to

00:25:34,680 --> 00:25:39,809
look go see the darker tomorrow but I've

00:25:37,920 --> 00:25:42,450
been started playing with a vagrant

00:25:39,809 --> 00:25:44,880
lately and the question I ask is why

00:25:42,450 --> 00:25:46,650
bother with with virtual environment at

00:25:44,880 --> 00:25:48,630
all if you can just run a new virtual

00:25:46,650 --> 00:25:51,510
machine and get everything you need

00:25:48,630 --> 00:25:54,740
there and that's your project and is is

00:25:51,510 --> 00:25:57,000
is this a good way of setting up or

00:25:54,740 --> 00:25:59,580
what's your comment on that approach

00:25:57,000 --> 00:26:01,320
where well the nice thing about this is

00:25:59,580 --> 00:26:03,630
that it's faster you're not running a

00:26:01,320 --> 00:26:06,330
machine on your own machine when i first

00:26:03,630 --> 00:26:08,130
started developing I i was using vagrant

00:26:06,330 --> 00:26:10,080
but it slowed my development down quite

00:26:08,130 --> 00:26:12,929
a bit this is nice and convenient you

00:26:10,080 --> 00:26:15,000
can easily throw them away yeah the idea

00:26:12,929 --> 00:26:18,300
here is this is very lightweight it's

00:26:15,000 --> 00:26:19,500
not the name can be misleading because

00:26:18,300 --> 00:26:22,530
you're not actually creating a

00:26:19,500 --> 00:26:24,840
virtualized system on on top of

00:26:22,530 --> 00:26:26,670
something else it is an isolated

00:26:24,840 --> 00:26:30,210
installation of Python with separate

00:26:26,670 --> 00:26:31,770
site packages so I have 40 or 50

00:26:30,210 --> 00:26:33,960
projects I've been working on over the

00:26:31,770 --> 00:26:37,080
last few years I can just type work on

00:26:33,960 --> 00:26:38,850
that project switch over to it rather

00:26:37,080 --> 00:26:40,830
than having vagrant bring up a new

00:26:38,850 --> 00:26:43,440
virtual machine if you have something

00:26:40,830 --> 00:26:45,900
that absolutely has to be isolated and

00:26:43,440 --> 00:26:49,200
contained vagrant can be good for that

00:26:45,900 --> 00:26:51,450
or potentially docker but for

00:26:49,200 --> 00:26:55,940
development purposes that's why I really

00:26:51,450 --> 00:26:55,940
prefer virtual lab alright thanks

00:26:56,909 --> 00:27:02,599
we have time for thank you very much to

00:26:59,669 --> 00:27:02,599

YouTube URL: https://www.youtube.com/watch?v=Xdv7vwIIThY


