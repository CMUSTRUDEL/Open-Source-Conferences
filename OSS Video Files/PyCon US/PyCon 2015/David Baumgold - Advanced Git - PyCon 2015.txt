Title: David Baumgold - Advanced Git - PyCon 2015
Publication date: 2015-04-11
Playlist: PyCon 2015
Description: 
	Speaker: David Baumgold

You know clone, commit, push, and pull. Now you're ready for the fun stuff. This talk will give you the advanced knowledge you need to take control of your git repository: rebase, cherry-pick, bisect, blame, squashing, and the reflog. You'll also get a better conceptual understanding of how git works, allowing you to chain these tools together to accomplish whatever task you need.

Slides can be found at: https://speakerdeck.com/singingwolfboy/advanced-git
Captions: 
	00:00:01,079 --> 00:00:06,072
(clapping)

00:00:06,251 --> 00:00:07,091
Hi everyone, my name's David Baumgold,

00:00:08,150 --> 00:00:09,567
I work for edX,

00:00:09,567 --> 00:00:11,076
I'm really excited about Python,

00:00:11,076 --> 00:00:13,585
I'm really excited about a lot of other things with web development

00:00:13,585 --> 00:00:16,605
and with software in general including git.

00:00:16,605 --> 00:00:18,330
I have my slides online,

00:00:18,330 --> 00:00:19,145
you can see them at

00:00:19,145 --> 00:00:21,720
bit.ly/git-pycon-2015

00:00:21,720 --> 00:00:23,173
I have a lot of stuff to go over

00:00:23,173 --> 00:00:24,853
so I might be talking slightly fast

00:00:24,853 --> 00:00:26,534
so you can use this as a reference.

00:00:26,534 --> 00:00:27,866
So I'm assuming that if you're here

00:00:28,433 --> 00:00:30,870
then you know the very basics about

00:00:30,870 --> 00:00:33,210
how to use git, or really any version control system.

00:00:33,210 --> 00:00:34,760
You know how to clone a repository,

00:00:34,760 --> 00:00:36,008
you know how to switch branches,

00:00:36,008 --> 00:00:37,907
after you've edited files you can commit,

00:00:37,907 --> 00:00:39,385
and you know how to push and pull

00:00:39,385 --> 00:00:41,713
to whatever you're using as your central repo

00:00:41,713 --> 00:00:43,554
which, for most of you, is probably GitHub.

00:00:43,554 --> 00:00:46,463
I'm also going to be using some visual terminology in this talk,

00:00:46,463 --> 00:00:49,859
so what I have here is an example of a git repository

00:00:49,859 --> 00:00:51,491
and you can see that there are a bunch of commits

00:00:51,491 --> 00:00:53,168
and there are two different branches:

00:00:53,168 --> 00:00:53,975
there's the master branch

00:00:53,975 --> 00:00:55,702
and there's the feature branch.

00:00:55,702 --> 00:00:58,469
Now, one thing to note about this

00:00:58,469 --> 00:00:59,734
is that you can see in this diagram

00:00:59,734 --> 00:01:03,669
that in git, there's actually no such thing as a branch object.

00:01:03,669 --> 00:01:05,721
Branches are actually labels

00:01:05,721 --> 00:01:07,648
that merely point to commits.

00:01:07,648 --> 00:01:10,661
And over time, using various different git commands

00:01:10,661 --> 00:01:12,507
you can change where those labels point to

00:01:12,507 --> 00:01:14,930
in order to change how those branches are structured,

00:01:14,930 --> 00:01:16,034
and we're gonna come back to that later.

00:01:16,034 --> 00:01:17,508
Another thing I want to point out here

00:01:17,508 --> 00:01:19,124
is that it's typically easier

00:01:19,124 --> 00:01:21,646
to display a git repository with arrows

00:01:21,646 --> 00:01:24,542
pointing upwards, to represent the branches.

00:01:24,542 --> 00:01:25,775
That's not technically true,

00:01:25,775 --> 00:01:30,407
the commits in git actually have arrows going backwards

00:01:30,407 --> 00:01:32,448
so each commit knows what its parent is

00:01:32,448 --> 00:01:34,392
and that parent knows its parent

00:01:34,392 --> 00:01:34,944
and so on.

00:01:34,944 --> 00:01:37,370
So once you've pointed to a specific commit,

00:01:37,370 --> 00:01:39,276
you can find all the commits in the branch

00:01:39,276 --> 00:01:41,161
just by traversing that path

00:01:41,161 --> 00:01:42,152
one step at a time

00:01:42,152 --> 00:01:43,514
to go back in time.

00:01:43,514 --> 00:01:46,611
So as I said we've got a lot to cover

00:01:46,611 --> 00:01:48,959
so let's just get started with the preface.

00:01:48,959 --> 00:01:50,584
So this is git status.

00:01:50,584 --> 00:01:52,872
This is probably one of my favorite commands.

00:01:52,872 --> 00:01:54,158
If you've used git on the command line

00:01:54,158 --> 00:01:55,136
you're probably very familiar with it.

00:01:55,136 --> 00:01:57,377
If you've used git with a GUI client

00:01:57,377 --> 00:01:58,588
you might not be.

00:01:58,588 --> 00:02:00,341
Status is something that simply

00:02:00,341 --> 00:02:02,369
shows you the current state of your repository

00:02:02,369 --> 00:02:04,006
and your files on there.

00:02:04,006 --> 00:02:05,875
It's something that you can always run,

00:02:05,875 --> 00:02:08,083
it never changes anything about your repo,

00:02:08,083 --> 00:02:09,446
it never screws anything up,

00:02:09,446 --> 00:02:10,668
it just gives you more information

00:02:10,668 --> 00:02:11,585
and as a result I run it

00:02:11,585 --> 00:02:12,755
all the time.

00:02:12,755 --> 00:02:15,217
So this is git status when there's nothing interesting going on.

00:02:15,217 --> 00:02:18,101
Here's git status when there is something interesting going on.

00:02:18,101 --> 00:02:19,713
So this will tell me that there's

00:02:19,713 --> 00:02:22,499
a file that I've deleted but haven't yet committed,

00:02:22,499 --> 00:02:24,015
there's a file that I've modified,

00:02:24,015 --> 00:02:25,614
and there's an untracked file that I've added.

00:02:25,614 --> 00:02:26,611
So as I've said,

00:02:26,611 --> 00:02:29,362
this just gives you some information about the situation here.

00:02:29,362 --> 00:02:31,910
Another really useful command is git show.

00:02:31,910 --> 00:02:33,972
Now when you run git show, what that does

00:02:33,972 --> 00:02:36,910
is it shows you information about a specific commit.

00:02:36,910 --> 00:02:39,231
If you run it without any arguments,

00:02:39,231 --> 00:02:39,981
it's going to show you information about

00:02:39,981 --> 00:02:42,679
the commit that you are currently sitting on.

00:02:42,679 --> 00:02:44,450
So there are a couple of things I want to point out here.

00:02:44,450 --> 00:02:47,791
The first is that really long string of letters and numbers

00:02:47,791 --> 00:02:48,968
right at the top.

00:02:48,968 --> 00:02:50,766
That is called the commit hash.

00:02:50,766 --> 00:02:52,887
Git assigns a unique ID,

00:02:52,887 --> 00:02:53,245
or a hash,

00:02:53,245 --> 00:02:55,084
to every single commit

00:02:55,084 --> 00:02:55,903
in your repository.

00:02:55,903 --> 00:02:58,002
And what's really interesting about that

00:02:58,002 --> 00:03:00,136
is that the hash is calculated based on

00:03:00,136 --> 00:03:01,110
the parents,

00:03:01,110 --> 00:03:02,409
it's based on the contents,

00:03:02,409 --> 00:03:03,697
it's based on the commit message,

00:03:03,697 --> 00:03:05,771
and it's structured such that,

00:03:05,771 --> 00:03:07,304
realistically,

00:03:07,304 --> 00:03:08,902
no two commits,

00:03:08,902 --> 00:03:10,383
even across repositories,

00:03:10,383 --> 00:03:11,205
even across the world,

00:03:11,205 --> 00:03:13,144
are going to share the same hash.

00:03:13,144 --> 00:03:15,719
They use enough distinct pieces of information

00:03:15,719 --> 00:03:16,993
that you can reasonably be certain

00:03:16,993 --> 00:03:18,844
that a full commit hash

00:03:18,844 --> 00:03:20,378
is completely unique

00:03:20,378 --> 00:03:21,445
across all repos,

00:03:21,445 --> 00:03:22,924
across everything.

00:03:22,924 --> 00:03:25,224
So it is truly a unique identifier

00:03:25,224 --> 00:03:27,005
for any given commit.

00:03:27,005 --> 00:03:29,577
You can also see using git show information

00:03:29,577 --> 00:03:31,590
about the commit message,

00:03:31,590 --> 00:03:32,039
and you can actually see

00:03:32,039 --> 00:03:33,504
the full diff of the commit,

00:03:33,504 --> 00:03:34,272
as well.

00:03:34,272 --> 00:03:35,205
So you can see everything

00:03:35,205 --> 00:03:36,754
that happened in that commit.

00:03:36,754 --> 00:03:39,250
So that's status and show.

00:03:39,250 --> 00:03:41,478
Now I'm going to show you some more interesting things.

00:03:41,478 --> 00:03:44,038
How many of you have ever been in this situation?

00:03:44,038 --> 00:03:45,071
Where you're trying to figure out

00:03:45,071 --> 00:03:47,998
what the heck is going on here.

00:03:47,998 --> 00:03:49,992
So git blame is gonna help you

00:03:49,992 --> 00:03:51,051
to figure out what was going on

00:03:51,051 --> 00:03:52,768
in that crazy piece of code

00:03:52,768 --> 00:03:54,092
that you're seeing in front of you.

00:03:54,092 --> 00:03:55,831
What git blame does,

00:03:55,831 --> 00:03:58,120
is it's going to look for every line of a file

00:03:58,120 --> 00:03:58,913
that you pass it to,

00:03:58,913 --> 00:03:59,949
and it's going to find

00:03:59,949 --> 00:04:02,904
the last commit that touched that line

00:04:02,904 --> 00:04:04,111
and it's going to tell you what it is.

00:04:04,111 --> 00:04:05,611
It's gonna show you the commit hash,

00:04:05,611 --> 00:04:07,204
it's gonna show you the name of the person

00:04:07,204 --> 00:04:07,591
who committed it,

00:04:07,591 --> 00:04:08,792
and the date.

00:04:08,792 --> 00:04:10,056
And remember,

00:04:10,056 --> 00:04:10,984
once you have the commit hash,

00:04:10,984 --> 00:04:12,169
you can also pass that to git show,

00:04:12,169 --> 00:04:14,061
to figure out more information

00:04:14,061 --> 00:04:15,556
such as the commit message.

00:04:15,556 --> 00:04:18,387
So, if you write good commit messages,

00:04:18,387 --> 00:04:20,352
then people down the line,

00:04:20,352 --> 00:04:20,911
including yourself,

00:04:20,911 --> 00:04:23,733
can understand just what you were thinking

00:04:23,733 --> 00:04:25,284
when you ended up with this code

00:04:25,284 --> 00:04:26,528
in this crazy state.

00:04:26,528 --> 00:04:28,696
So the output of blame is a little bit overwhelming,

00:04:28,696 --> 00:04:32,571
and you don't have to understand everything about how this works,

00:04:32,571 --> 00:04:33,092
I just want to show you the structure of this.

00:04:33,092 --> 00:04:35,658
So here's the first five lines,

00:04:35,658 --> 00:04:37,373
that I've broken up for clarity.

00:04:37,373 --> 00:04:38,858
You can see the first section is

00:04:38,858 --> 00:04:40,671
the commit hash, as a

00:04:40,671 --> 00:04:42,111
shortened version,

00:04:42,111 --> 00:04:43,814
followed by the name of the file,

00:04:43,814 --> 00:04:45,478
followed by the person who committed it,

00:04:45,478 --> 00:04:46,733
and then you can see the date,

00:04:46,733 --> 00:04:47,475
the line number,

00:04:47,475 --> 00:04:49,739
and the actual contents of the file.

00:04:49,739 --> 00:04:50,429
And so as a result,

00:04:50,429 --> 00:04:52,243
you can see the full structure of the file

00:04:52,243 --> 00:04:54,174
and you can see how things changed,

00:04:54,174 --> 00:04:56,526
and which lines worked together.

00:04:56,526 --> 00:04:57,378
So in this case, you can see

00:04:57,378 --> 00:04:59,839
the last two lines in this section of five

00:04:59,839 --> 00:05:01,441
actually came from the same commit.

00:05:01,441 --> 00:05:02,695
So that will help you to understand

00:05:02,695 --> 00:05:03,854
which lines are sort of hunks

00:05:03,854 --> 00:05:05,656
that came together.

00:05:05,656 --> 00:05:07,488
So that's blame.

00:05:07,488 --> 00:05:08,990
Next up, cherry-pick.

00:05:08,990 --> 00:05:10,355
Now we're gonna start changing things.

00:05:10,355 --> 00:05:12,506
So how many of you have been in this situation?

00:05:12,506 --> 00:05:14,387
I committed to master

00:05:14,387 --> 00:05:15,891
when I mean to commit to my feature branch,

00:05:15,891 --> 00:05:17,066
and I need to move my commit

00:05:17,066 --> 00:05:17,981
to a different branch.

00:05:17,981 --> 00:05:19,733
Happens to me all the time.

00:05:19,733 --> 00:05:21,291
So in this case, we have this commit "J",

00:05:21,291 --> 00:05:22,277
which is on master,

00:05:22,277 --> 00:05:24,718
and we want to move it to the feature branch.

00:05:24,718 --> 00:05:25,870
So how do we do that?

00:05:25,870 --> 00:05:28,358
We can use cherry-pick to do that.

00:05:28,358 --> 00:05:29,868
So in this case,

00:05:29,868 --> 00:05:30,304
what I'm gonna do,

00:05:30,304 --> 00:05:31,239
is I'm gonna use git show

00:05:31,239 --> 00:05:33,172
to get that commit hash,

00:05:33,172 --> 00:05:35,381
and then I'm going to check out the feature branch

00:05:35,381 --> 00:05:37,359
and I'm going to use

00:05:37,359 --> 00:05:37,609
git cherry-pick

00:05:37,609 --> 00:05:39,482
in order to move that commit,

00:05:39,482 --> 00:05:39,975
or actually to make a copy.

00:05:39,975 --> 00:05:42,586
Another thing that I want to point out here,

00:05:42,586 --> 00:05:44,330
Is you can see that the commit hash

00:05:44,330 --> 00:05:45,934
is very very long,

00:05:45,934 --> 00:05:47,981
but when I called git cherry-pick,

00:05:47,981 --> 00:05:48,755
I'm only passing it

00:05:48,755 --> 00:05:51,546
the first few characters of that commit hash.

00:05:51,546 --> 00:05:52,930
Now the reason I'm doing that,

00:05:52,930 --> 00:05:55,239
is because git is actually pretty smart

00:05:55,239 --> 00:05:57,276
when it comes to references to commits.

00:05:57,276 --> 00:05:58,226
And if you provide

00:05:58,226 --> 00:05:59,700
the first few characters of a commit hash,

00:05:59,700 --> 00:06:01,075
but not the full thing,

00:06:01,075 --> 00:06:01,802
what it does is

00:06:01,802 --> 00:06:03,948
it looks up all the commits

00:06:03,948 --> 00:06:05,657
in that repository that it knows about,

00:06:05,657 --> 00:06:07,116
and it checks to see

00:06:07,116 --> 00:06:08,873
how many of those commits

00:06:08,873 --> 00:06:11,454
use those small number of letters and characters

00:06:11,454 --> 00:06:12,355
as a prefix.

00:06:12,355 --> 00:06:14,903
If there's only one commit

00:06:14,903 --> 00:06:15,620
in the entire repo

00:06:15,620 --> 00:06:17,251
that has that particular prefix,

00:06:17,251 --> 00:06:18,557
it'll just use that commit.

00:06:18,557 --> 00:06:20,357
And realistically,

00:06:20,357 --> 00:06:21,272
these things are so long,

00:06:21,272 --> 00:06:22,235
and so random,

00:06:22,235 --> 00:06:23,777
that generally,

00:06:23,777 --> 00:06:25,720
if you provide the first six or seven characters

00:06:25,720 --> 00:06:26,905
of a commit hash,

00:06:26,905 --> 00:06:28,848
that's enough to uniquely identify it.

00:06:28,848 --> 00:06:29,735
So that's why you often see hashes

00:06:29,735 --> 00:06:31,809
that are only six or seven characters long.

00:06:31,809 --> 00:06:32,510
It's just a shortcut.

00:06:32,510 --> 00:06:35,076
So what cherry-pick actually does

00:06:35,076 --> 00:06:35,814
when you run this,

00:06:35,814 --> 00:06:39,561
is it's going to create an entirely new commit,

00:06:39,561 --> 00:06:41,332
which is based off the original,

00:06:41,332 --> 00:06:42,107
with the same diff,

00:06:42,107 --> 00:06:43,860
and the same commit message.

00:06:43,860 --> 00:06:45,328
And it's going to add it

00:06:45,328 --> 00:06:46,714
to the branch that you specify.

00:06:46,714 --> 00:06:49,452
It does not delete the original commit.

00:06:49,452 --> 00:06:50,827
It keeps the original one around,

00:06:50,827 --> 00:06:53,489
because cherry-picking just makes copies.

00:06:53,489 --> 00:06:55,749
So the obvious next question is,

00:06:55,749 --> 00:06:56,229
alright,

00:06:56,229 --> 00:06:57,091
so now I've got this thing

00:06:57,091 --> 00:06:58,257
where I want it to be,

00:06:58,257 --> 00:07:00,397
how do I remove "J" from master

00:07:00,397 --> 00:07:01,837
so that it was like I never committed it

00:07:01,837 --> 00:07:02,345
in the first place?

00:07:02,345 --> 00:07:04,507
'Cause I don't want it there.

00:07:04,507 --> 00:07:05,428
So for that, we're going to

00:07:05,428 --> 00:07:06,850
use a command called reset.

00:07:06,850 --> 00:07:08,385
So what reset does,

00:07:08,385 --> 00:07:10,476
is it resets the branch pointer,

00:07:10,476 --> 00:07:12,342
to point to a different commit

00:07:12,342 --> 00:07:13,668
in your repository.

00:07:13,668 --> 00:07:16,415
So here's an example where what I'm doing,

00:07:16,415 --> 00:07:17,526
is I'm going to check out the master branch,

00:07:17,526 --> 00:07:19,128
and then I'm going to call

00:07:19,128 --> 00:07:22,738
git reset dash dash hard HEAD caret.

00:07:22,738 --> 00:07:25,698
So HEAD is another reference,

00:07:25,698 --> 00:07:27,240
and that reference just means

00:07:27,240 --> 00:07:29,535
whatever commit I'm currently sitting on.

00:07:29,535 --> 00:07:31,837
So if you're on the master branch

00:07:31,837 --> 00:07:32,601
and you reference HEAD

00:07:32,601 --> 00:07:32,851
then that just means

00:07:32,851 --> 00:07:35,663
the latest commit on the master branch.

00:07:35,663 --> 00:07:37,274
You can also use carets

00:07:37,274 --> 00:07:39,465
to climb that ancestor tree,

00:07:39,465 --> 00:07:41,464
and find the parent of the commit

00:07:41,464 --> 00:07:42,266
that you're looking for.

00:07:42,266 --> 00:07:43,489
So HEAD caret means that commit's parent,

00:07:43,489 --> 00:07:45,799
HEAD caret caret means the grandparent,

00:07:45,799 --> 00:07:48,714
HEAD caret caret caret means the great-grandparent,

00:07:48,714 --> 00:07:49,357
and so on.

00:07:49,357 --> 00:07:51,393
You can just keep on adding more carets on there,

00:07:51,393 --> 00:07:52,389
and it'll keep on climbing back up.

00:07:52,389 --> 00:07:56,044
So, after I've done this

00:07:56,044 --> 00:07:57,525
git reset dash dash hard,

00:07:57,525 --> 00:07:59,413
the repository's gonna look like this.

00:07:59,413 --> 00:08:02,233
The master point is now pointing back at "F",

00:08:02,233 --> 00:08:04,194
which is where it was before.

00:08:04,194 --> 00:08:07,363
And "J" is still in the repository.

00:08:07,363 --> 00:08:09,281
It's kinda just hanging out

00:08:09,281 --> 00:08:10,203
in the ether there,

00:08:10,203 --> 00:08:12,119
and if you find that

00:08:12,119 --> 00:08:13,789
you've done something wrong with reset,

00:08:13,789 --> 00:08:16,753
or if you've accidentally lost a commit,

00:08:16,753 --> 00:08:18,180
it's still there.

00:08:18,180 --> 00:08:19,542
It's not actually gone.

00:08:19,542 --> 00:08:20,309
And I'll show you in a little bit

00:08:20,309 --> 00:08:22,271
how to actually get that commit back.

00:08:22,271 --> 00:08:24,268
One of the fun things about git

00:08:24,268 --> 00:08:25,648
is that although it gives you

00:08:25,648 --> 00:08:26,687
the freedom and the flexibility

00:08:26,687 --> 00:08:27,987
to change history,

00:08:27,987 --> 00:08:29,356
and to muck about with

00:08:29,356 --> 00:08:30,469
the way that your branches are structured,

00:08:30,469 --> 00:08:33,840
you never actually lose information

00:08:33,840 --> 00:08:36,377
until the garbage collector runs.

00:08:36,377 --> 00:08:37,837
So yes, git has its own

00:08:37,837 --> 00:08:39,264
integrated garbage collector.

00:08:39,264 --> 00:08:40,732
And until that thing runs,

00:08:40,732 --> 00:08:42,565
which is fairly infrequently,

00:08:42,565 --> 00:08:45,818
all of the commits that you've ever created and touched

00:08:45,818 --> 00:08:47,053
are still hanging out

00:08:47,053 --> 00:08:48,316
somewhere in the ether,

00:08:48,316 --> 00:08:50,381
and you can get them back.

00:08:50,381 --> 00:08:52,201
So you can change history,

00:08:52,201 --> 00:08:52,749
and you can do these things

00:08:52,749 --> 00:08:53,571
to modify commits

00:08:53,571 --> 00:08:55,696
without being afraid of losing it,

00:08:55,696 --> 00:08:57,200
cause it's still there for you.

00:08:57,200 --> 00:08:59,567
So that's reset.

00:08:59,567 --> 00:09:01,012
Next up is rebase,

00:09:01,012 --> 00:09:02,574
which is the command that probably

00:09:02,574 --> 00:09:03,463
a lot of you have heard about,

00:09:03,463 --> 00:09:05,562
and are very curious about.

00:09:05,562 --> 00:09:08,799
So rebase is the command for changing history.

00:09:08,799 --> 00:09:11,117
And I have to put up a warning here.

00:09:11,117 --> 00:09:14,743
Rebase is something that gives you a lot of power,

00:09:14,743 --> 00:09:17,569
and you have to use that power responsibly.

00:09:17,569 --> 00:09:19,567
As we've learned from Doctor Who,

00:09:19,567 --> 00:09:21,029
when you go around changing history,

00:09:21,029 --> 00:09:22,239
there's a high probability that

00:09:22,239 --> 00:09:23,390
you're gonna encounter some monsters.

00:09:23,390 --> 00:09:26,776
So I'm gonna give you some pro tips

00:09:26,776 --> 00:09:27,620
about how to do this

00:09:27,620 --> 00:09:29,024
and how not to do this.

00:09:29,024 --> 00:09:29,849
So in general,

00:09:29,849 --> 00:09:31,441
never change history when

00:09:31,441 --> 00:09:33,510
other people might be using your branch,

00:09:33,510 --> 00:09:35,774
unless they know that you're doing so.

00:09:35,774 --> 00:09:37,085
So an example of that is,

00:09:37,085 --> 00:09:38,513
if you've got a team of maybe

00:09:38,513 --> 00:09:39,410
three or four people.

00:09:39,410 --> 00:09:40,623
all working on a feature together,

00:09:40,623 --> 00:09:41,764
and you've got a feature branch,

00:09:41,764 --> 00:09:43,459
and you're not expecting anybody else

00:09:43,459 --> 00:09:44,003
in the whole world

00:09:44,003 --> 00:09:45,565
to be looking at that branch

00:09:45,565 --> 00:09:46,492
except for you and your team,

00:09:46,492 --> 00:09:48,298
then rebasing is fine,

00:09:48,298 --> 00:09:51,252
just let the other people on your team know when you do so,

00:09:51,252 --> 00:09:53,315
so that they can update their branch pointers

00:09:53,315 --> 00:09:54,423
to get the new history.

00:09:54,423 --> 00:09:57,732
You also never want to change history on master,

00:09:57,732 --> 00:09:58,599
or more specifically,

00:09:58,599 --> 00:10:00,216
never want to change history on master

00:10:00,216 --> 00:10:01,639
once it's public.

00:10:01,639 --> 00:10:03,158
Once it's published on GitHub

00:10:03,158 --> 00:10:03,858
or Bitbucket,

00:10:03,858 --> 00:10:05,275
or wherever you're hosting your code.

00:10:05,275 --> 00:10:07,271
Because people generally rely on master,

00:10:07,271 --> 00:10:08,572
and it's just very confusing when that changes.

00:10:08,572 --> 00:10:11,695
Generally, you only want to change history

00:10:11,695 --> 00:10:13,936
for commits that haven't yet been pushed.

00:10:13,936 --> 00:10:15,063
That's the best practice.

00:10:15,063 --> 00:10:15,858
There's always a trade-off

00:10:15,858 --> 00:10:16,478
between when you want to do this,

00:10:16,478 --> 00:10:18,034
and when you don't want to do this,

00:10:18,034 --> 00:10:19,636
if you've pushed something ten seconds ago

00:10:19,636 --> 00:10:21,540
and you want to hastily make a change,

00:10:21,540 --> 00:10:22,527
maybe that's OK?

00:10:22,527 --> 00:10:23,862
That's kind of up to you.

00:10:23,862 --> 00:10:24,810
It depends on the situation.

00:10:24,810 --> 00:10:26,655
So how do we actually do this?

00:10:26,655 --> 00:10:29,898
Here's an example of when we would want to use rebase.

00:10:29,898 --> 00:10:31,230
How do we do that?

00:10:31,230 --> 00:10:32,661
When you have a branch that is,

00:10:32,661 --> 00:10:34,439
you've created it awhile ago,

00:10:34,439 --> 00:10:35,338
and master has changed,

00:10:35,338 --> 00:10:36,272
and you want to get those updates.

00:10:36,272 --> 00:10:37,841
A lot of people use merge

00:10:37,841 --> 00:10:39,648
to bring those updates into the branch,

00:10:39,648 --> 00:10:40,771
but the problem with doing that

00:10:40,771 --> 00:10:43,045
is then you get these weird merge commits

00:10:43,045 --> 00:10:45,387
and you get the commits from master

00:10:45,387 --> 00:10:46,017
in your branch,

00:10:46,017 --> 00:10:48,437
and when you try to get somebody else to code review it,

00:10:48,437 --> 00:10:50,534
those changes show up in the code review,

00:10:50,534 --> 00:10:52,236
and it's just generally very confusing

00:10:52,236 --> 00:10:52,895
to try to explain,

00:10:52,895 --> 00:10:53,642
no no no,

00:10:53,642 --> 00:10:55,111
those changes aren't actually mine,

00:10:55,111 --> 00:10:55,717
they were there before.

00:10:55,717 --> 00:10:57,705
So you can get around this whole situation

00:10:57,705 --> 00:10:58,582
by using rebase.

00:10:58,582 --> 00:11:00,677
So what rebase actually does,

00:11:00,677 --> 00:11:02,718
is it finds the merge base,

00:11:02,718 --> 00:11:03,638
which is basically the commit

00:11:03,638 --> 00:11:06,092
that you originally branched off of,

00:11:06,092 --> 00:11:07,281
in this case, it's commit "C",

00:11:07,281 --> 00:11:10,342
and it cherry-picks all of the commits

00:11:10,342 --> 00:11:11,444
since that point,

00:11:11,444 --> 00:11:14,021
to where you want them to be.

00:11:14,021 --> 00:11:15,675
And it reassigns the branch pointer.

00:11:15,675 --> 00:11:18,096
So the branch that you were working on

00:11:18,096 --> 00:11:21,055
now has a new base off of master.

00:11:21,055 --> 00:11:22,401
That's where the term rebase comes from.

00:11:22,401 --> 00:11:24,095
The branch has been re-based.

00:11:24,095 --> 00:11:25,996
And that's really all it does.

00:11:25,996 --> 00:11:26,683
It's just a series of cherry-picks.

00:11:26,683 --> 00:11:28,499
So when you understand

00:11:28,499 --> 00:11:29,728
the architecture behind git,

00:11:29,728 --> 00:11:31,931
these things become much less scary,

00:11:31,931 --> 00:11:33,534
and much more understandable.

00:11:33,534 --> 00:11:34,860
So let me show you how you would

00:11:34,860 --> 00:11:36,134
actually execute that.

00:11:36,134 --> 00:11:37,540
So I've got this feature branch,

00:11:37,540 --> 00:11:39,606
I'm going to check it out,

00:11:39,606 --> 00:11:40,737
and then I'm going to say

00:11:40,737 --> 00:11:42,173
git rebase master

00:11:42,173 --> 00:11:43,516
to say I want to take this branch,

00:11:43,516 --> 00:11:45,175
and I want to rebase it

00:11:45,175 --> 00:11:46,707
on top of the latest version

00:11:46,707 --> 00:11:47,524
of the master branch.

00:11:47,524 --> 00:11:49,103
And it's going to rewind

00:11:49,103 --> 00:11:51,259
back to that merge base, as I was saying,

00:11:51,259 --> 00:11:52,319
it's gonna find the commits

00:11:52,319 --> 00:11:53,248
that were on your branch,

00:11:53,248 --> 00:11:54,803
and it's going to apply them,

00:11:54,803 --> 00:11:55,303
one after another,

00:11:55,303 --> 00:11:57,643
onto the latest version of master.

00:11:57,643 --> 00:11:59,541
So after you've done this,

00:11:59,541 --> 00:12:00,124
as I said,

00:12:00,124 --> 00:12:01,507
you have changed history.

00:12:01,507 --> 00:12:03,303
And because you've done that,

00:12:03,303 --> 00:12:06,269
git is going to show you some interesting warnings and output

00:12:06,269 --> 00:12:07,942
which might be kind of scary at first.

00:12:07,942 --> 00:12:09,247
So if you run git status,

00:12:09,247 --> 00:12:10,402
you might see a message like this.

00:12:10,402 --> 00:12:12,933
Which says that your branch and the origin

00:12:12,933 --> 00:12:13,971
have diverged.

00:12:13,971 --> 00:12:15,875
So what does that actually mean?

00:12:15,875 --> 00:12:16,769
If you were to take a look

00:12:16,769 --> 00:12:18,691
at what these two different repositories

00:12:18,691 --> 00:12:19,776
look like right now,

00:12:19,776 --> 00:12:21,602
it makes a lot more sense.

00:12:21,602 --> 00:12:24,304
Your local version has a completely different version

00:12:24,304 --> 00:12:25,782
of feature branch,

00:12:25,782 --> 00:12:27,301
than the remote version does.

00:12:27,301 --> 00:12:28,060
And in effect,

00:12:28,060 --> 00:12:29,610
there's no way to get directly

00:12:29,610 --> 00:12:33,441
from I, which is the commit on the remote,

00:12:33,441 --> 00:12:36,379
to I-prime, which is the one that we've rebased.

00:12:36,379 --> 00:12:39,276
You have to sort of go back in order to go forward.

00:12:39,276 --> 00:12:39,819
And as a result,

00:12:39,819 --> 00:12:42,735
git treats that as the branches being diverged.

00:12:42,735 --> 00:12:44,270
So what do we do?

00:12:44,270 --> 00:12:46,158
If you try to push,

00:12:46,158 --> 00:12:47,733
it's also going to --

00:12:47,733 --> 00:12:48,946
at first, it's just going to say no.

00:12:48,946 --> 00:12:50,995
So it's going to say,

00:12:50,995 --> 00:12:53,695
there's a change of history here,

00:12:53,695 --> 00:12:56,298
I'm not sure that this is actually what you want me to do.

00:12:56,298 --> 00:12:57,529
And so it's going to reject the push,

00:12:57,529 --> 00:12:58,825
unless you tell it that you

00:12:58,825 --> 00:13:00,815
really, really want to do this.

00:13:00,815 --> 00:13:03,023
And in order to do this, you need to use

00:13:03,023 --> 00:13:04,929
git push dash f

00:13:04,929 --> 00:13:06,916
And the "f" just stands for "force".

00:13:06,916 --> 00:13:09,002
And it's going to do what you tell it to,

00:13:09,002 --> 00:13:10,133
but it's going to let you know,

00:13:10,133 --> 00:13:11,603
hey, this was a forced update,

00:13:11,603 --> 00:13:13,040
I'm doing this sorta-kinda

00:13:13,040 --> 00:13:14,151
under duress.

00:13:14,151 --> 00:13:16,479
So just be aware, history has changed.

00:13:16,479 --> 00:13:18,639
So git will allow you to change history,

00:13:18,639 --> 00:13:21,100
but it's very careful about letting you do so,

00:13:21,100 --> 00:13:23,201
and it wants you to be sure that you know what you're doing.

00:13:23,201 --> 00:13:24,572
Which is smart.

00:13:24,572 --> 00:13:26,303
In addition, when you rebase,

00:13:26,303 --> 00:13:27,155
sometimes you get conflicts,

00:13:27,155 --> 00:13:29,132
which, you'll get this sort of

00:13:29,132 --> 00:13:30,780
big scary error message,

00:13:30,780 --> 00:13:32,918
but the thing to note is this line that says conflict.

00:13:32,918 --> 00:13:36,972
And those conflicts can actually be resolved

00:13:36,972 --> 00:13:38,648
just like merge conflicts.

00:13:38,648 --> 00:13:39,586
If you know how to resolve a merge conflict,

00:13:39,586 --> 00:13:41,773
you know how to resolve a rebase conflict.

00:13:41,773 --> 00:13:42,776
So the first thing to do,

00:13:42,776 --> 00:13:43,896
always the first thing to do,

00:13:43,896 --> 00:13:45,109
is to run git status,

00:13:45,109 --> 00:13:47,164
and that will tell you what the situation is,

00:13:47,164 --> 00:13:48,665
it will never muck anything up,

00:13:48,665 --> 00:13:49,869
and in this case,

00:13:49,869 --> 00:13:51,915
it'll tell you that you're in the middle of a rebase,

00:13:51,915 --> 00:13:53,004
and there's this thing,

00:13:53,004 --> 00:13:53,898
there's this file that has a conflict.

00:13:53,898 --> 00:13:56,336
If you take a look at the file,

00:13:56,336 --> 00:13:58,231
you can see that inside the file,

00:13:58,231 --> 00:14:00,761
it looks exactly like a merge conflict.

00:14:00,761 --> 00:14:03,709
And you can resolve it with your normal tools.

00:14:03,709 --> 00:14:05,875
And then once you've done that,

00:14:05,875 --> 00:14:07,237
the next thing is to resolve it,

00:14:07,237 --> 00:14:09,179
and tell the rebase to move on.

00:14:09,179 --> 00:14:10,628
But it's slightly different from merge.

00:14:10,628 --> 00:14:11,831
With a merge, you'd create a new commit,

00:14:11,831 --> 00:14:13,771
and just say, let's go.

00:14:13,771 --> 00:14:16,329
But with this, you can see with git status

00:14:16,329 --> 00:14:18,046
it says you want to fix the conflicts,

00:14:18,046 --> 00:14:18,559
and then run

00:14:18,559 --> 00:14:20,740
git rebase dash dash continue

00:14:20,740 --> 00:14:22,505
If you're in the middle of a rebase,

00:14:22,505 --> 00:14:23,701
and you get these conflicts,

00:14:23,701 --> 00:14:25,734
and you're having some problems

00:14:25,734 --> 00:14:26,540
and you want to start over,

00:14:26,540 --> 00:14:27,407
then you can just use

00:14:27,407 --> 00:14:29,063
git rebase dash dash abort

00:14:29,063 --> 00:14:30,675
and it'll put you right back where you started,

00:14:30,675 --> 00:14:31,776
no worries,

00:14:31,776 --> 00:14:32,847
everything's fine again,

00:14:32,847 --> 00:14:34,498
and you can retry the rebase later,

00:14:34,498 --> 00:14:35,604
if you want to.

00:14:35,604 --> 00:14:37,909
And you can also get cherry-picks

00:14:37,909 --> 00:14:38,565
when you're doing,

00:14:38,565 --> 00:14:39,663
you can also get conflicts when you're doing a cherry-pick.

00:14:39,663 --> 00:14:42,695
So you'll get a message like this,

00:14:42,695 --> 00:14:44,422
and again, git status is your friend.

00:14:44,422 --> 00:14:46,549
It'll tell you what the conflicts are,

00:14:46,549 --> 00:14:48,380
and then once you're done resolving them,

00:14:48,380 --> 00:14:48,861
you want to run

00:14:48,861 --> 00:14:50,307
git cherry-pick dash dash continue

00:14:50,307 --> 00:14:52,268
If you decide it's not worth it,

00:14:52,268 --> 00:14:53,434
then you can run

00:14:53,434 --> 00:14:54,985
git cherry-pick dash dash abort

00:14:54,985 --> 00:14:56,257
and you're all set.

00:14:56,257 --> 00:14:58,942
Alright, so that was rebase,

00:14:58,942 --> 00:15:00,439
with a quick throwback to cherry-pick.

00:15:00,439 --> 00:15:02,149
Next up is the ref log.

00:15:02,149 --> 00:15:04,251
So if you're changing history,

00:15:04,251 --> 00:15:05,590
the ref log is going to be

00:15:05,590 --> 00:15:07,203
your best friend.

00:15:07,203 --> 00:15:10,663
Because the ref log is going to save your ass, I guarantee it.

00:15:10,663 --> 00:15:13,334
So when you run git log,

00:15:13,334 --> 00:15:15,541
it shows you the commits on your branch

00:15:15,541 --> 00:15:16,925
in ancestor order,

00:15:16,925 --> 00:15:17,615
which means you're going back

00:15:17,615 --> 00:15:18,320
from parent to parent to parent.

00:15:18,320 --> 00:15:20,290
When you're running reflog,

00:15:20,290 --> 00:15:21,472
it's the same basic concept,

00:15:21,472 --> 00:15:23,076
but it's going to show you the commits

00:15:23,076 --> 00:15:25,965
in the order that you last referenced them.

00:15:25,965 --> 00:15:27,946
So you see all these crazy arrows on the diagram,

00:15:27,946 --> 00:15:28,369
and you're wondering,

00:15:28,369 --> 00:15:29,007
what does that mean.

00:15:29,007 --> 00:15:31,106
Let me give you a concrete example.

00:15:31,106 --> 00:15:33,023
So I screwed up,

00:15:33,023 --> 00:15:35,146
I did some kind of a rebase or a cherry-pick

00:15:35,146 --> 00:15:35,651
or something,

00:15:35,651 --> 00:15:36,774
or I did a reset,

00:15:36,774 --> 00:15:38,423
and I lost the commit that I was looking for,

00:15:38,423 --> 00:15:40,658
and now everything is kinda, just, wonky.

00:15:40,658 --> 00:15:42,283
So I want to get back to the way that things were.

00:15:42,283 --> 00:15:44,247
But I didn't write down the commit hash.

00:15:44,247 --> 00:15:45,508
So what do I do?

00:15:45,508 --> 00:15:47,107
reflog will help you out.

00:15:47,107 --> 00:15:48,589
So if you run reflog,

00:15:48,589 --> 00:15:49,266
what it's gonna do,

00:15:49,266 --> 00:15:50,161
is it's gonna show you

00:15:50,161 --> 00:15:53,752
the last few commits that you've been touching lately.

00:15:53,752 --> 00:15:56,291
And it'll show them to you in order,

00:15:56,291 --> 00:15:58,415
with the action that you've been doing.

00:15:58,415 --> 00:15:59,774
So you can see with this history,

00:15:59,774 --> 00:16:00,807
you can see that the last thing that I did

00:16:00,807 --> 00:16:02,363
was I tried to do a rebase,

00:16:02,363 --> 00:16:03,001
and I aborted it.

00:16:03,001 --> 00:16:05,013
And before that, I made a commit.

00:16:05,013 --> 00:16:07,337
And before that, I did some checking out

00:16:07,337 --> 00:16:08,845
to switch between various different branches.

00:16:08,845 --> 00:16:11,082
And before that, I did another rebase,

00:16:11,082 --> 00:16:12,979
but this one I finished successfully.

00:16:12,979 --> 00:16:14,798
And you can see that each one of these lines

00:16:14,798 --> 00:16:16,837
has a commit hash next to it.

00:16:16,837 --> 00:16:18,939
So I can find the commit hash that represents

00:16:18,939 --> 00:16:20,123
the state of the repository

00:16:20,123 --> 00:16:23,051
from before things went wonky,

00:16:23,051 --> 00:16:25,212
and I can just go back to that.

00:16:25,212 --> 00:16:27,494
So once you find the commit hash that you think is what you want,

00:16:27,494 --> 00:16:29,439
you want to check out that commit hash,

00:16:29,439 --> 00:16:31,004
take a look around at the files,

00:16:31,004 --> 00:16:32,967
make sure that everything works the way that you want,

00:16:32,967 --> 00:16:34,396
this is just sort of checking it,

00:16:34,396 --> 00:16:36,132
and then you want to reset the branch pointer

00:16:36,132 --> 00:16:37,189
back to that commit.

00:16:37,189 --> 00:16:39,271
And you can use reset dash dash hard

00:16:39,271 --> 00:16:39,521
to do that.

00:16:39,521 --> 00:16:41,086
And poof, just like that,

00:16:41,086 --> 00:16:43,299
nothing's wonky anymore.

00:16:43,299 --> 00:16:43,549
It's back to the way it was.

00:16:43,549 --> 00:16:45,981
Alright, so that's the ref log.

00:16:45,981 --> 00:16:48,228
Now I'm gonna show you

00:16:48,228 --> 00:16:48,641
some more cool things that you can do,

00:16:48,641 --> 00:16:49,228
now that you know how to change history,

00:16:49,228 --> 00:16:50,498
squashing and splitting.

00:16:50,498 --> 00:16:53,034
How many have been in this situation?

00:16:53,034 --> 00:16:55,481
I just made a commit, and ugh,

00:16:55,481 --> 00:16:56,718
I forgot to include that file

00:16:56,718 --> 00:16:58,232
that actually has some really important changes.

00:16:58,232 --> 00:16:59,356
So you can use

00:16:59,356 --> 00:17:01,116
git commit dash dash amend

00:17:01,116 --> 00:17:03,963
to actually amend the commit that you just made,

00:17:03,963 --> 00:17:07,297
to roll in any other changes that you need to make.

00:17:07,297 --> 00:17:09,176
So this is going to make a new commit

00:17:09,176 --> 00:17:11,466
based off of your most recent commit,

00:17:11,466 --> 00:17:13,482
but with the addition of any other changes

00:17:13,482 --> 00:17:13,834
that you've just used

00:17:13,834 --> 00:17:15,908
git add or git rm

00:17:15,908 --> 00:17:17,629
to add into your situation,

00:17:17,629 --> 00:17:20,005
and it's going to replace the topmost commit

00:17:20,005 --> 00:17:21,043
with that new commit

00:17:21,043 --> 00:17:22,158
that has everything all rolled up into it.

00:17:22,158 --> 00:17:24,364
So you never have to have any more

00:17:24,364 --> 00:17:26,256
"adding a missing file"

00:17:26,256 --> 00:17:27,029
or "fixed a typo" messages.

00:17:27,029 --> 00:17:28,823
You can just amend your commits.

00:17:28,823 --> 00:17:32,652
You also can do this with situations where

00:17:32,652 --> 00:17:33,756
you have a bunch of these commits

00:17:33,756 --> 00:17:34,453
back in history,

00:17:34,453 --> 00:17:35,645
it doesn't have to be the latest one,

00:17:35,645 --> 00:17:36,730
but for this we're going to use

00:17:36,730 --> 00:17:38,218
interactive rebase.

00:17:38,218 --> 00:17:41,373
So for this, you need some place to start.

00:17:41,373 --> 00:17:42,034
So in this case,

00:17:42,034 --> 00:17:43,992
we're gonna look at the last five commits,

00:17:43,992 --> 00:17:44,553
and we're going to use

00:17:44,553 --> 00:17:46,040
HEAD tilde five.

00:17:46,040 --> 00:17:47,839
which is exactly the same thing as doing

00:17:47,839 --> 00:17:49,960
HEAD caret caret caret caret caret,

00:17:49,960 --> 00:17:50,613
it's just shorter.

00:17:50,613 --> 00:17:53,239
It just refers to five commits back.

00:17:53,239 --> 00:17:55,471
Git is then going to open a file

00:17:55,471 --> 00:17:56,407
in your text editor

00:17:56,407 --> 00:17:58,108
and ask for further instructions.

00:17:58,108 --> 00:17:59,919
So this is what that file looks like.

00:17:59,919 --> 00:18:01,435
It's actually not really a file,

00:18:01,435 --> 00:18:02,445
it's more like a user interface.

00:18:02,445 --> 00:18:04,782
So you can see over here,

00:18:04,782 --> 00:18:06,550
there are the commits that you've requested,

00:18:06,550 --> 00:18:08,610
down at the bottom there's a list of instructions,

00:18:08,610 --> 00:18:10,355
and on the left side there's a list of actions

00:18:10,355 --> 00:18:11,129
that you can take on

00:18:11,129 --> 00:18:12,267
each of those commits.

00:18:12,267 --> 00:18:13,602
So in this case,

00:18:13,602 --> 00:18:15,460
you can see there are these two commits

00:18:15,460 --> 00:18:17,271
after the "added a widget" commit

00:18:17,271 --> 00:18:19,136
that were basically just "oops" commits

00:18:19,136 --> 00:18:20,870
and we basically want to roll those in,

00:18:20,870 --> 00:18:23,203
so it looks like we never made a mistake.

00:18:23,203 --> 00:18:24,547
You can be a perfect coder

00:18:24,547 --> 00:18:25,595
when you can change history.

00:18:25,595 --> 00:18:27,098
So what we're gonna do

00:18:27,098 --> 00:18:28,877
is we're just gonna change those two "pick"s

00:18:28,877 --> 00:18:29,757
to the word "squash"

00:18:29,757 --> 00:18:31,963
which allows us to meld this commit

00:18:31,963 --> 00:18:34,393
into the previous commit in the list.

00:18:34,393 --> 00:18:36,507
And then you're going to save and quit your editor,

00:18:36,507 --> 00:18:37,611
and it's going to immediately re-open

00:18:37,611 --> 00:18:39,226
asking you for a new commit message.

00:18:39,226 --> 00:18:40,096
And it's going to provide you with

00:18:40,096 --> 00:18:43,345
the commit messages from the last few commits

00:18:43,345 --> 00:18:44,453
that you were squashing together

00:18:44,453 --> 00:18:45,367
that you can use as a template,

00:18:45,367 --> 00:18:47,312
but you can put in whatever you want.

00:18:47,312 --> 00:18:49,205
So you put together your commit message,

00:18:49,205 --> 00:18:50,281
you save and quit,

00:18:50,281 --> 00:18:53,414
and then git will apply the changes that you requested,

00:18:53,414 --> 00:18:54,817
it'll squash those commits together,

00:18:54,817 --> 00:18:56,210
and everything will be great.

00:18:56,210 --> 00:18:58,293
And as a reminder,

00:18:58,293 --> 00:18:59,899
doing this does change history.

00:18:59,899 --> 00:19:02,967
Even doing the commit dash dash amend,

00:19:02,967 --> 00:19:04,369
that changes history as well.

00:19:04,369 --> 00:19:06,903
So all the previous warnings about doing that apply.

00:19:06,903 --> 00:19:07,559
Be careful.

00:19:07,559 --> 00:19:10,694
I also want to go over splitting commits.

00:19:10,694 --> 00:19:14,261
So when you have a commit that is really too big,

00:19:14,261 --> 00:19:16,533
and you want to split it into lots of smaller ones,

00:19:16,533 --> 00:19:18,623
you can use rebase interactive for that, as well.

00:19:18,623 --> 00:19:21,816
So let's say we have this commit here,

00:19:21,816 --> 00:19:22,613
that middle one,

00:19:22,613 --> 00:19:23,808
where we did a bunch of things,

00:19:23,808 --> 00:19:27,441
which is not really a great, useful commit message,

00:19:27,441 --> 00:19:29,285
and probably has too much stuff in it.

00:19:29,285 --> 00:19:30,536
So what we're gonna do is

00:19:30,536 --> 00:19:33,244
we're gonna change from "pick" to "edit",

00:19:33,244 --> 00:19:35,401
which allows us to use this commit,

00:19:35,401 --> 00:19:36,968
but change it around a little bit

00:19:36,968 --> 00:19:39,074
before it's actually rebased.

00:19:39,074 --> 00:19:41,843
So once we've saved that file,

00:19:41,843 --> 00:19:45,858
then it's going to rebase all the commits up until then,

00:19:45,858 --> 00:19:46,777
and then it's going to stop.

00:19:46,777 --> 00:19:48,008
And it's going to say,

00:19:48,008 --> 00:19:48,657
alright, you've got

00:19:48,657 --> 00:19:49,635
as much time as you need

00:19:49,635 --> 00:19:51,641
to make any sort of edits that you want

00:19:51,641 --> 00:19:52,608
to this commit.

00:19:52,608 --> 00:19:53,867
So once we're there,

00:19:53,867 --> 00:19:56,029
we can pop off that big commit,

00:19:56,029 --> 00:19:56,768
which has already been rebased,

00:19:56,768 --> 00:19:58,983
so we can just say reset HEAD up,

00:19:58,983 --> 00:20:01,425
and I'm not using dash dash hard

00:20:01,425 --> 00:20:02,082
because when you leave that off,

00:20:02,082 --> 00:20:04,476
it leaves the changes in that commit

00:20:04,476 --> 00:20:06,573
actually applied on your file system.

00:20:06,573 --> 00:20:08,684
So all those changes are there,

00:20:08,684 --> 00:20:09,621
and if you run git status,

00:20:09,621 --> 00:20:11,310
you'll see all of those unchanged files,

00:20:11,310 --> 00:20:13,697
untracked files, modified files,

00:20:13,697 --> 00:20:15,129
all ready to be committed.

00:20:15,129 --> 00:20:16,331
And now that you have that,

00:20:16,331 --> 00:20:18,107
you can just add them one at a time,

00:20:18,107 --> 00:20:18,641
or use

00:20:18,641 --> 00:20:20,055
git add dash p

00:20:20,055 --> 00:20:22,078
to do a sort of add by patch,

00:20:22,078 --> 00:20:24,987
and craft the commit messages that you want to.

00:20:24,987 --> 00:20:26,234
So you can turn one big commit

00:20:26,234 --> 00:20:28,142
into several smaller ones.

00:20:28,142 --> 00:20:28,904
And you can write commit messages

00:20:28,904 --> 00:20:29,845
for each one,

00:20:29,845 --> 00:20:30,839
that are more descriptive.

00:20:30,839 --> 00:20:32,996
And then once you've done that,

00:20:32,996 --> 00:20:34,437
then we just want to continue the rebase.

00:20:34,437 --> 00:20:35,292
We want to tell git,

00:20:35,292 --> 00:20:37,165
OK, I'm done editing this commit,

00:20:37,165 --> 00:20:38,385
and now we can just move on

00:20:38,385 --> 00:20:39,821
with all the things that we were doing before.

00:20:39,821 --> 00:20:43,676
And then it's going to apply any other commits that are necessary,

00:20:43,676 --> 00:20:44,388
and then it's gonna be done.

00:20:44,388 --> 00:20:45,777
And you can take a look at git log,

00:20:45,777 --> 00:20:47,779
and admire your freshly cleaned-up history.

00:20:47,779 --> 00:20:49,848
Alright, so I'm almost out of time,

00:20:49,848 --> 00:20:50,905
but there's one more command that I want to go over,

00:20:50,905 --> 00:20:53,485
which is called bisect.

00:20:53,485 --> 00:20:55,460
Git bisect is really cool

00:20:55,460 --> 00:20:59,048
because it helps you to discover what caused things to break.

00:20:59,048 --> 00:20:59,738
And in particular,

00:20:59,738 --> 00:21:03,040
which commit caused this breakage to happen.

00:21:03,040 --> 00:21:03,832
So if you've been,

00:21:03,832 --> 00:21:05,452
if you've suddenly discovered

00:21:05,452 --> 00:21:07,865
that something is broken on your production site,

00:21:07,865 --> 00:21:10,167
and you're not sure how long it's been broken,

00:21:10,167 --> 00:21:12,333
and you're not sure what's causing it to break,

00:21:12,333 --> 00:21:14,360
bisect is gonna be your best friend.

00:21:14,360 --> 00:21:15,577
Because what bisect does,

00:21:15,577 --> 00:21:17,899
is it helps you to find the commit where that changed.

00:21:17,899 --> 00:21:20,337
So to use this, you need three things:

00:21:20,337 --> 00:21:22,391
you need a test

00:21:22,391 --> 00:21:23,808
to determine if it's broken or not,

00:21:23,808 --> 00:21:26,128
you need a commit where things were working,

00:21:26,128 --> 00:21:26,968
in the past,

00:21:26,968 --> 00:21:29,754
and you need a commit where things are broken,

00:21:29,754 --> 00:21:30,761
which is usually going to be,

00:21:30,761 --> 00:21:32,040
you know,

00:21:32,040 --> 00:21:32,736
the tip of master,

00:21:32,736 --> 00:21:33,954
if you discover suddenly,

00:21:33,954 --> 00:21:34,812
oh, this is broken,

00:21:34,812 --> 00:21:36,090
and we don't know how long.

00:21:36,090 --> 00:21:38,279
So what bisect will do,

00:21:38,279 --> 00:21:38,901
is it will actually use binary search,

00:21:38,901 --> 00:21:40,854
to search back through time,

00:21:40,854 --> 00:21:42,306
and find the commit

00:21:42,306 --> 00:21:43,665
where things went from good to bad,

00:21:43,665 --> 00:21:45,242
and it'll do that very efficiently.

00:21:45,242 --> 00:21:47,145
So the way you actually use this,

00:21:47,145 --> 00:21:49,299
is you run git bisect start,

00:21:49,299 --> 00:21:49,723
to tell git,

00:21:49,723 --> 00:21:51,597
OK, with going into bisect mode now.

00:21:51,597 --> 00:21:53,472
You want to find the broken commit,

00:21:53,472 --> 00:21:54,298
and you want to tell git,

00:21:54,298 --> 00:21:56,233
OK, this is the bad one.

00:21:56,233 --> 00:21:57,457
And then you find the working commit,

00:21:57,457 --> 00:21:57,989
and you tell it,

00:21:57,989 --> 00:21:59,207
OK, this is the good one.

00:21:59,207 --> 00:22:00,813
And now, once you've done that,

00:22:00,813 --> 00:22:04,711
git is going to find a commit in between those two,

00:22:04,711 --> 00:22:06,121
and it's going to check it out for you,

00:22:06,121 --> 00:22:07,526
and it's going to ask you to determine

00:22:07,526 --> 00:22:10,041
if that particular commit is broken,

00:22:10,041 --> 00:22:10,736
or if it's working.

00:22:10,736 --> 00:22:13,293
If it's working, you just run

00:22:13,293 --> 00:22:14,555
git bisect good,

00:22:14,555 --> 00:22:15,789
If it's broken, you run

00:22:15,789 --> 00:22:16,750
git bisect bad.

00:22:16,750 --> 00:22:17,570
Either way,

00:22:17,570 --> 00:22:18,770
you're gonna have more information

00:22:18,770 --> 00:22:21,207
about where it changed from good to bad.

00:22:21,207 --> 00:22:23,089
So for example,

00:22:23,089 --> 00:22:25,020
if you have a continuum of commits,

00:22:25,020 --> 00:22:25,701
where you have a broken one,

00:22:25,701 --> 00:22:26,835
and you have a working one,

00:22:26,835 --> 00:22:27,709
git's gonna ask you

00:22:27,709 --> 00:22:29,103
to identify one in the middle.

00:22:29,103 --> 00:22:30,460
Is it good, or bad?

00:22:30,460 --> 00:22:31,686
If it's broken,

00:22:31,686 --> 00:22:35,639
then we can cross off half of the commits in that history,

00:22:35,639 --> 00:22:37,601
and test next on the other side.

00:22:37,601 --> 00:22:39,099
And if it's working, then you just cross off the other half.

00:22:39,099 --> 00:22:42,222
And you just keep on going recursively,

00:22:42,222 --> 00:22:44,080
until you find that particular commit

00:22:44,080 --> 00:22:45,804
where things actually changed.

00:22:45,804 --> 00:22:46,555
It's really fast,

00:22:46,555 --> 00:22:49,235
and it helps when you have a lot of history going on,

00:22:49,235 --> 00:22:50,523
and you need to find, you know,

00:22:50,523 --> 00:22:51,779
what actually caused this thing to break?

00:22:51,779 --> 00:22:54,845
If you have an automated test,

00:22:54,845 --> 00:22:55,875
it works even better.

00:22:55,875 --> 00:22:58,096
There's some documentation that you can find

00:22:58,096 --> 00:22:59,366
to determine exactly how to write a script

00:22:59,366 --> 00:23:00,659
that git will understand

00:23:00,659 --> 00:23:02,831
that uses UNIX exit codes

00:23:02,831 --> 00:23:04,669
to determine if it's working or broken,

00:23:04,669 --> 00:23:07,497
and then you can just pass that script to git.

00:23:07,497 --> 00:23:08,927
And git is going to

00:23:08,927 --> 00:23:09,819
test commit,

00:23:09,819 --> 00:23:10,690
check out a new one,

00:23:10,690 --> 00:23:11,640
test that commit,

00:23:11,640 --> 00:23:12,594
check out a new one,

00:23:12,594 --> 00:23:13,476
and keep on going

00:23:13,476 --> 00:23:14,765
until it finds the one that we're on.

00:23:14,765 --> 00:23:17,883
And that's gonna be a really quick way

00:23:17,883 --> 00:23:19,731
to find where things broke.

00:23:19,731 --> 00:23:20,674
Alright, so we're about done,

00:23:20,674 --> 00:23:24,309
but there is so much more stuff about git that you can learn,

00:23:24,309 --> 00:23:26,558
git has an integrated help system,

00:23:26,558 --> 00:23:28,344
the git website has some great documentation,

00:23:28,344 --> 00:23:30,353
and, any questions?

00:23:30,353 --> 00:23:36,032
clapping

00:23:36,032 --> 00:23:39,540
ASST: So if you have any questions for David,

00:23:39,540 --> 00:23:41,235
you can line up at the microphone

00:23:41,235 --> 00:23:42,422
that's in the middle of the room here

00:23:42,422 --> 00:23:43,000
down the back,

00:23:43,000 --> 00:23:44,819
we'll just wait a moment

00:23:44,819 --> 00:23:46,471
to see if there is anyone.

00:23:46,471 --> 00:23:48,350
DAVID: I just want to add,

00:23:48,350 --> 00:23:50,576
as I said, there's so much more in git,

00:23:50,576 --> 00:23:53,359
if you just want to talk about your favorite particular git command,

00:23:53,359 --> 00:23:55,000
I request that you not,

00:23:55,000 --> 00:23:57,825
and just let the people who have actual questions about what I went over

00:23:57,825 --> 00:24:00,044
ask them instead.

00:24:00,044 --> 00:24:01,583
Q1: So that was an amazing talk, thank you.

00:24:01,583 --> 00:24:02,262
I just wanted to ask,

00:24:02,262 --> 00:24:04,503
is there anywhere we can get a copy of these slides?

00:24:04,503 --> 00:24:06,367
DAVID: They are actually posted online

00:24:06,367 --> 00:24:07,961
and I have that that on the very first slide,

00:24:07,961 --> 00:24:11,363
it's bit.ly/git-pycon-2015.

00:24:11,363 --> 00:24:13,757
Q1: OK, thank you.

00:24:13,757 --> 00:24:17,233
Q2: I have a question if you have a suggestion

00:24:17,233 --> 00:24:21,522
on how to manage multiple repos within git itself,

00:24:21,522 --> 00:24:22,235
cause if you start nesting them,

00:24:22,235 --> 00:24:23,403
you run into other problems.

00:24:23,403 --> 00:24:26,270
DAVID: Can you describe more what you mean?

00:24:26,270 --> 00:24:28,140
Q2: So if I have multiple projects in git,

00:24:28,140 --> 00:24:28,836
and they're all being managed,

00:24:28,836 --> 00:24:33,030
is there a good way to manage all of them?

00:24:33,030 --> 00:24:35,082
I've heard people say,

00:24:35,082 --> 00:24:37,602
start doing set modules, or other things.

00:24:37,602 --> 00:24:40,771
DAVID: Oh, so you're talking about submodules and stuff.

00:24:40,771 --> 00:24:41,434
Q2: Yes.

00:24:41,434 --> 00:24:44,103
DAVID: Yeah, git unfortunately does not have great support

00:24:44,103 --> 00:24:46,829
for embedding one project inside of another.

00:24:46,829 --> 00:24:48,492
Submodules work, kind of.

00:24:48,492 --> 00:24:49,258
Q2: Kind of, so.

00:24:49,258 --> 00:24:51,569
DAVID: Other people have put together other projects

00:24:51,569 --> 00:24:53,078
to make that work better,

00:24:53,078 --> 00:24:53,917
I've heard of git subtree,

00:24:53,917 --> 00:24:56,234
which apparently is really good.

00:24:56,234 --> 00:24:57,571
I've never used it.

00:24:57,571 --> 00:24:59,418
Unfortunately, I can't really give you more information, sorry.

00:24:59,418 --> 00:25:00,661
Q2: Alright, thanks.

00:25:00,661 --> 00:25:04,049
Q3: Do you have any advice if you're in an organization

00:25:04,049 --> 00:25:06,104
where you're the only one who does rebasing?

00:25:06,104 --> 00:25:08,744
(audience laughs)

00:25:08,744 --> 00:25:09,390
DAVID: Documentation.

00:25:09,390 --> 00:25:11,783
Q3: (laughs) OK.

00:25:11,783 --> 00:25:13,145
DAVID: Describe to people what you're doing,

00:25:13,145 --> 00:25:15,700
write it down someplace where other people can see,

00:25:15,700 --> 00:25:19,040
give them directions on how they can rebase if they want to,

00:25:19,040 --> 00:25:20,694
and when you do do a rebase,

00:25:20,694 --> 00:25:24,161
be sure that nobody else is going to be screwed up by it.

00:25:24,161 --> 00:25:25,161
If they do get screwed up by it,

00:25:25,161 --> 00:25:27,142
make sure that you can point them to that documentation,

00:25:27,142 --> 00:25:29,190
and say, see, this is what you need to know.

00:25:29,190 --> 00:25:32,795
Q3: I've seen that I've gotten messed up by their merging.

00:25:32,795 --> 00:25:35,005
So develop gets merged into a branch,

00:25:35,005 --> 00:25:36,337
the branch gets merged into develop,

00:25:36,337 --> 00:25:37,335
and then somehow when I rebase,

00:25:37,335 --> 00:25:40,449
things get weird, in ways that are hard to explain.

00:25:40,449 --> 00:25:42,769
DAVID: Yeah, rebasing merge commits does work weirdly.

00:25:42,769 --> 00:25:44,459
I haven't figured out a good way to do that.

00:25:44,459 --> 00:25:47,757
I would say just, you know,

00:25:47,757 --> 00:25:49,915
do the best you can with educating your coworkers,

00:25:49,915 --> 00:25:51,302
your friends, whoever you're working with,

00:25:51,302 --> 00:25:53,618
and if they do introduce merge commits,

00:25:53,618 --> 00:25:56,793
then maybe rebasing is not the situation that you want to go with.

00:25:56,793 --> 00:25:58,939
Q3: Tear. OK, cool.

00:25:58,939 --> 00:26:01,397
ASST: Can you please make sure you get

00:26:01,397 --> 00:26:02,970
nice and close to the microphone,

00:26:02,970 --> 00:26:04,874
so that everyone in the audience can hear you please,

00:26:04,874 --> 00:26:06,450
so, even closer than that.

00:26:06,450 --> 00:26:08,485
Q4: Hi, what's the difference between

00:26:08,485 --> 00:26:11,487
git pull and git fetch?

00:26:11,487 --> 00:26:14,195
DAVID: git pull and git fetch?

00:26:14,195 --> 00:26:14,985
Q4: Yes.

00:26:14,985 --> 00:26:16,282
DAVID: It's actually pretty simple.

00:26:16,282 --> 00:26:19,100
Git fetch is the operation where

00:26:19,100 --> 00:26:22,056
git contacts another remote,

00:26:22,056 --> 00:26:23,398
like going out to GitHub,

00:26:23,398 --> 00:26:26,477
and downloading information from that remote.

00:26:26,477 --> 00:26:27,331
It's just a way of saying,

00:26:27,331 --> 00:26:28,848
hey, tell me what's going on.

00:26:28,848 --> 00:26:31,078
But git fetch does not change anything.

00:26:31,078 --> 00:26:32,781
All it does is request information.

00:26:32,781 --> 00:26:34,468
When you do a do a pull,

00:26:34,468 --> 00:26:36,752
it does a fetch, followed by

00:26:36,752 --> 00:26:38,032
either a merge or a rebase,

00:26:38,032 --> 00:26:39,704
depending on how you've set it up.

00:26:39,704 --> 00:26:41,384
That's all it does.

00:26:41,384 --> 00:26:42,585
Pull just does fetch,

00:26:42,585 --> 00:26:44,898
followed by merge or rebase.

00:26:44,898 --> 00:26:51,128
That's all.

00:26:51,128 --> 00:26:52,814
Q5: I was wondering,

00:26:52,814 --> 00:26:55,190
when you are rebasing onto master,

00:26:55,190 --> 00:26:56,273
and let's say, you have

00:26:56,273 --> 00:26:58,942
a lot of commits that you're trying to rebase,

00:26:58,942 --> 00:27:01,924
sometimes if there's a merge conflict somewhere,

00:27:01,924 --> 00:27:04,980
I've had a situation where I have to go through every commit

00:27:04,980 --> 00:27:08,427
and fix every single merge conflict.

00:27:08,427 --> 00:27:11,789
Is there a faster way to deal with that situation?

00:27:11,789 --> 00:27:13,811
DAVID: So there are two things that I can suggest.

00:27:13,811 --> 00:27:16,681
The first one is the sort of simplistic thing,

00:27:16,681 --> 00:27:17,367
which is,

00:27:17,367 --> 00:27:20,224
if you're having to resolve it with every single commit,

00:27:20,224 --> 00:27:22,479
then you can just squash your commits first,

00:27:22,479 --> 00:27:23,671
so that you only have one commit,

00:27:23,671 --> 00:27:25,901
in order to resolve it only once.

00:27:25,901 --> 00:27:29,476
And that works, as long as you're OK with squashing it down.

00:27:29,476 --> 00:27:30,581
If you're not OK with that,

00:27:30,581 --> 00:27:32,693
I know that git actually has a tool built in

00:27:32,693 --> 00:27:34,589
called rerere,

00:27:34,589 --> 00:27:36,001
and I believe that stands for

00:27:36,001 --> 00:27:38,706
reuse rebase resolution.

00:27:38,706 --> 00:27:41,199
So you can use that tool

00:27:41,199 --> 00:27:42,727
to tell git,

00:27:42,727 --> 00:27:44,639
alright, this is how I want to define this resolution,

00:27:44,639 --> 00:27:45,335
and it will apply it

00:27:45,335 --> 00:27:47,228
for the rest of the commits in that rebase.

00:27:47,228 --> 00:27:49,538
I've actually never used it before,

00:27:49,538 --> 00:27:50,564
just cause for me,

00:27:50,564 --> 00:27:51,755
squashing commits works fine,

00:27:51,755 --> 00:27:53,404
but you can look up the documentation

00:27:53,404 --> 00:27:54,412
on how to use rerere.

00:27:54,412 --> 00:27:56,325
And it's kinda fun to say.

00:27:56,325 --> 00:27:56,737
Q5: Thank you.

00:27:56,737 --> 00:27:59,476
Q6: Hey, great talk, thank you.

00:27:59,476 --> 00:28:01,334
You kinda dove in and went straight

00:28:01,334 --> 00:28:04,480
to using git reset dash dash hard.

00:28:04,480 --> 00:28:06,250
Can you just detail what the difference is

00:28:06,250 --> 00:28:08,581
between a regular git reset

00:28:08,581 --> 00:28:10,549
and what the dash dash hard is actually doing?

00:28:10,549 --> 00:28:11,040
DAVID: Sure.

00:28:11,040 --> 00:28:13,561
So when you do git reset

00:28:13,561 --> 00:28:14,476
without any arguments,

00:28:14,476 --> 00:28:17,353
it's going to pop off the commit,

00:28:17,353 --> 00:28:20,436
but it's going to leave the changes on your disk,

00:28:20,436 --> 00:28:22,336
so that you can create a new commit

00:28:22,336 --> 00:28:24,557
with those same changes, if you want to,

00:28:24,557 --> 00:28:26,272
or break them up into several smaller commits

00:28:26,272 --> 00:28:27,684
if you want to.

00:28:27,684 --> 00:28:28,769
Basically, just reset

00:28:28,769 --> 00:28:30,170
will simply remove the commit,

00:28:30,170 --> 00:28:32,529
without actually changing the files on your filesystem.

00:28:32,529 --> 00:28:34,481
Git reset dash dash hard

00:28:34,481 --> 00:28:35,917
will also change the files

00:28:35,917 --> 00:28:36,898
on your filesystem

00:28:36,898 --> 00:28:38,311
to make them exactly match

00:28:38,311 --> 00:28:40,007
that commit that you're pointing to.

00:28:40,007 --> 00:28:41,527
There's also dash dash soft,

00:28:41,527 --> 00:28:44,119
which is very similar to without any arguments,

00:28:44,119 --> 00:28:45,476
but what that will do is,

00:28:45,476 --> 00:28:48,413
I believe it has the changes not yet added

00:28:48,413 --> 00:28:49,736
to your staging system,

00:28:49,736 --> 00:28:52,171
so that you have to add them first or something.

00:28:52,171 --> 00:28:55,169
I'm not clear on exactly the details there.

00:28:55,169 --> 00:28:57,238
Q6: Yeah, it's always confusing. OK, thank you.

00:28:57,238 --> 00:28:59,535
ASST: Unfortunately, we don't have time for any more questions.

00:28:59,535 --> 00:29:01,399
If you do have more questions for David,

00:29:01,399 --> 00:29:02,438
come up and ask him,

00:29:02,438 --> 00:29:04,573
he'll be here for another five or so minutes.

00:29:04,573 --> 00:29:05,789
DAVID: Yep, I'll also hang out in the hallway,

00:29:05,789 --> 00:29:06,466
if people want to come up.

00:29:06,466 --> 00:29:08,997
ASST: Great. OK, so everybody please thank David Baumgold.

00:29:08,997 --> 00:29:14,163
(applause)

00:29:14,163 --> 00:29:16,083

YouTube URL: https://www.youtube.com/watch?v=4EOZvow1mk4


