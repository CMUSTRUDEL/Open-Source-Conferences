Title: Ian Cordasco - Cutting Off the Internet: Testing Applications that Use Requests - PyCon 2015
Publication date: 2015-04-12
Playlist: PyCon 2015
Description: 
	"Speaker: Ian Cordasco

A brief and opinionated view of testing applications and libraries that use requests by a core-developer of requests. You will receive an overview of testing with responses, vcr, httpretty, mock, and betamax.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:02,090 --> 00:00:07,950
this is i'll be up here for all of like

00:00:04,920 --> 00:00:09,690
30 seconds and then if somebody gets a

00:00:07,950 --> 00:00:10,980
microphone and starts pontificating than

00:00:09,690 --> 00:00:14,540
I have to shut them down real quick

00:00:10,980 --> 00:00:14,540
that's about as also that's about it

00:00:15,830 --> 00:00:20,490
tarina to see if I thought talk I had

00:00:18,690 --> 00:00:23,010
someone tying off away and I was like

00:00:20,490 --> 00:00:25,140
about to be very rude to them because

00:00:23,010 --> 00:00:28,109
I've been rereading Elena sounds like a

00:00:25,140 --> 00:00:30,330
project it's all yours yeah but they

00:00:28,109 --> 00:00:31,529
gave us a like they'd be gentle but if

00:00:30,330 --> 00:00:33,899
somebody's making a comment not a

00:00:31,529 --> 00:00:45,480
question you need to like calm down a

00:00:33,899 --> 00:00:46,980
little bit I don't I don't yesterday and

00:00:45,480 --> 00:00:56,570
there's a lot of feelings came out oh

00:00:46,980 --> 00:00:56,570
yes yeah I can definitely hear something

00:00:57,640 --> 00:01:02,950
I would meet with Miguel yeah so that

00:01:01,899 --> 00:01:04,180
was the other I would do in Section

00:01:02,950 --> 00:01:07,110
cheering yesterday as well it's miguel

00:01:04,180 --> 00:01:07,110
and Jeff were

00:01:23,260 --> 00:01:33,700
dawn are we good even if she's with the

00:01:29,830 --> 00:01:34,930
UH with the lie they were that it so I'm

00:01:33,700 --> 00:01:37,900
seeing the name of your talk on there

00:01:34,930 --> 00:01:41,190
and I'm seeing test test test okay well

00:01:37,900 --> 00:01:41,190
let's uh let's get cracking then

00:01:50,020 --> 00:01:56,630
good afternoon everybody thank you all

00:01:53,869 --> 00:01:58,970
for coming out to this chat straight

00:01:56,630 --> 00:02:00,920
after lunch we got a great talk for you

00:01:58,970 --> 00:02:01,909
today in court ASCO an engineer at

00:02:00,920 --> 00:02:03,950
Rackspace and one of the core

00:02:01,909 --> 00:02:05,750
contributors to the request library has

00:02:03,950 --> 00:02:08,750
got a really really awesome talk plan

00:02:05,750 --> 00:02:10,190
for you all about testing testing when

00:02:08,750 --> 00:02:12,470
you don't have access to the Internet so

00:02:10,190 --> 00:02:20,870
I'll let Ian take it from there thank

00:02:12,470 --> 00:02:23,330
you Joe hi everyone so play for get

00:02:20,870 --> 00:02:27,470
started a couple quick questions show of

00:02:23,330 --> 00:02:31,640
hands who here uses requests keep your

00:02:27,470 --> 00:02:36,670
hands up of you who tests their code

00:02:31,640 --> 00:02:38,720
that uses requests and now finally

00:02:36,670 --> 00:02:40,730
evolved you that our selves your hands

00:02:38,720 --> 00:02:43,459
up who is satisfied with how they

00:02:40,730 --> 00:02:49,400
actually test that code that's kind of

00:02:43,459 --> 00:02:53,690
what I thought so I mean Kroy desk 02 /

00:02:49,400 --> 00:02:58,519
Rackspace and also a core contributor to

00:02:53,690 --> 00:02:59,780
requests sequel object twine I wrote the

00:02:58,519 --> 00:03:02,329
request tool belt so you may be using

00:02:59,780 --> 00:03:05,390
that already I'm 18 flake 8 i altered

00:03:02,329 --> 00:03:08,959
get up 3 pi a bunch of other stuff not

00:03:05,390 --> 00:03:10,519
really that important like I like to

00:03:08,959 --> 00:03:11,989
have the claim to fame no one knows my

00:03:10,519 --> 00:03:13,639
face until they see me in person and

00:03:11,989 --> 00:03:16,609
most people don't know that I work on

00:03:13,639 --> 00:03:18,590
any these projects until now I guess if

00:03:16,609 --> 00:03:22,190
you've worked on any of these projects

00:03:18,590 --> 00:03:24,260
with me you might have a like a rough

00:03:22,190 --> 00:03:27,590
visual image of my face and it probably

00:03:24,260 --> 00:03:29,329
looks like this I'm the person this is

00:03:27,590 --> 00:03:30,560
know a lot people come in asking for a

00:03:29,329 --> 00:03:33,709
feature and it's like it doesn't really

00:03:30,560 --> 00:03:37,160
belong here so no so why am i giving

00:03:33,709 --> 00:03:39,380
this talk I have a lot of content in

00:03:37,160 --> 00:03:41,480
this talk hopefully for you but i also

00:03:39,380 --> 00:03:43,970
have a lot of work to do one when i'm

00:03:41,480 --> 00:03:45,470
done with this talk but i've been a

00:03:43,970 --> 00:03:47,750
maintainer request for about two or

00:03:45,470 --> 00:03:48,709
three years now corey is the other he

00:03:47,750 --> 00:03:50,840
gave a great talk yesterday about

00:03:48,709 --> 00:03:53,900
hyperactive you should go watch that

00:03:50,840 --> 00:03:55,430
later but i've been using request since

00:03:53,900 --> 00:03:57,530
long before I became a maintainer and

00:03:55,430 --> 00:03:59,860
I've been through many iterations of

00:03:57,530 --> 00:04:01,420
testing my own code that uses requests

00:03:59,860 --> 00:04:03,640
I've seen how other people test their

00:04:01,420 --> 00:04:06,280
code that uses requests and do so in odd

00:04:03,640 --> 00:04:08,800
ways and I've seen most code that just

00:04:06,280 --> 00:04:12,160
doesn't test the parts of requests at

00:04:08,800 --> 00:04:16,900
all quite frankly I've come to a very

00:04:12,160 --> 00:04:18,310
happy approach of how to test my code

00:04:16,900 --> 00:04:19,630
that uses requests I like to share it

00:04:18,310 --> 00:04:20,739
with you because I'd like to see more

00:04:19,630 --> 00:04:23,530
people testing their code that uses

00:04:20,739 --> 00:04:28,240
request and be happy with it but first

00:04:23,530 --> 00:04:30,370
let's review some concepts so assuming

00:04:28,240 --> 00:04:32,169
the code base is well factored we can

00:04:30,370 --> 00:04:34,390
all just assume that a unit of code is a

00:04:32,169 --> 00:04:36,730
function of module or a method on a

00:04:34,390 --> 00:04:39,370
class and we can argue what makes the

00:04:36,730 --> 00:04:40,419
code well factored but just for the sake

00:04:39,370 --> 00:04:42,550
of argument will say that it's something

00:04:40,419 --> 00:04:43,660
that isn't very complex and it doesn't

00:04:42,550 --> 00:04:45,490
hold all of the logic of your

00:04:43,660 --> 00:04:49,570
application it's not just one gigantic

00:04:45,490 --> 00:04:51,310
view in your django app right and to be

00:04:49,570 --> 00:04:53,890
very lazy we could say that a unit test

00:04:51,310 --> 00:04:55,780
is a something that tests the unit of

00:04:53,890 --> 00:04:58,120
code right it's a very terrible

00:04:55,780 --> 00:04:59,650
description but more accurately might

00:04:58,120 --> 00:05:01,600
not so humble opinion a unit test should

00:04:59,650 --> 00:05:03,850
exercise exactly one path through the

00:05:01,600 --> 00:05:05,890
unit of code it's testing that path can

00:05:03,850 --> 00:05:08,380
be happy unhappy to scrum to whatever

00:05:05,890 --> 00:05:10,630
you want to call it but that you test

00:05:08,380 --> 00:05:12,490
name and it's doctoring should really

00:05:10,630 --> 00:05:13,810
describe what it's testing and the test

00:05:12,490 --> 00:05:15,250
itself should be very clear as to what

00:05:13,810 --> 00:05:19,000
it's testing and what it expects to

00:05:15,250 --> 00:05:23,380
happen a unit of code will have many

00:05:19,000 --> 00:05:24,940
unit tests so when you have two objects

00:05:23,380 --> 00:05:27,640
that work with each other they're called

00:05:24,940 --> 00:05:30,250
collaborators and when you are testing

00:05:27,640 --> 00:05:31,990
one of those objects the object that is

00:05:30,250 --> 00:05:33,570
not currently being tested is the

00:05:31,990 --> 00:05:35,650
collaborator in the sense of the test

00:05:33,570 --> 00:05:38,530
and you might be saying why are these

00:05:35,650 --> 00:05:41,650
important well when you're writing tests

00:05:38,530 --> 00:05:44,320
you want isolation when you're testing a

00:05:41,650 --> 00:05:46,030
method on class a you really shouldn't

00:05:44,320 --> 00:05:48,729
be testing the logic that's in the

00:05:46,030 --> 00:05:50,320
method in class b that it uses in fact

00:05:48,729 --> 00:05:52,660
you should definitely be either stubbing

00:05:50,320 --> 00:05:55,180
out that method from class b or totally

00:05:52,660 --> 00:05:56,380
mocking outclass be entirely and to give

00:05:55,180 --> 00:05:59,200
you a concrete example instead of saying

00:05:56,380 --> 00:06:00,850
Class A Class B let's say this is the

00:05:59,200 --> 00:06:03,340
object we're testing and we're testing

00:06:00,850 --> 00:06:05,110
the baz method here we should either be

00:06:03,340 --> 00:06:07,270
studying out the fizz method on the foo

00:06:05,110 --> 00:06:10,840
instance or totally studying out

00:06:07,270 --> 00:06:12,820
knocking out the foo class that way when

00:06:10,840 --> 00:06:13,540
we test bez we can say very concisely

00:06:12,820 --> 00:06:16,780
what we're testing

00:06:13,540 --> 00:06:18,940
and now you're probably saying but what

00:06:16,780 --> 00:06:21,940
happens when food changes and fizzes and

00:06:18,940 --> 00:06:25,380
it breaks the logic in bez I'm glad you

00:06:21,940 --> 00:06:27,910
asked for that we have integration tests

00:06:25,380 --> 00:06:29,950
this tests how two classes will interact

00:06:27,910 --> 00:06:32,080
with each other in a more abstract sense

00:06:29,950 --> 00:06:33,820
as anything that the class depends on is

00:06:32,080 --> 00:06:37,030
what you're testing so if you have a

00:06:33,820 --> 00:06:39,000
third-party dependency like requests you

00:06:37,030 --> 00:06:41,830
can test it with an integration test

00:06:39,000 --> 00:06:43,930
they are usually less exhaustive than a

00:06:41,830 --> 00:06:45,490
functional test but depending on what

00:06:43,930 --> 00:06:47,170
application you're writing it could be a

00:06:45,490 --> 00:06:50,700
library could be something else it may

00:06:47,170 --> 00:06:53,490
actually be the exact same thing so

00:06:50,700 --> 00:06:56,790
let's actually look at some code to test

00:06:53,490 --> 00:07:01,870
as i mentioned i am the github 3pi

00:06:56,790 --> 00:07:03,970
author and so I use the API a lot I'm

00:07:01,870 --> 00:07:05,680
going to use that as an example when I

00:07:03,970 --> 00:07:07,960
was first starting to write get on 3 pi

00:07:05,680 --> 00:07:09,850
I had a functioning that kind of looked

00:07:07,960 --> 00:07:12,580
like this and it was used to get

00:07:09,850 --> 00:07:14,620
relatively any resource I wanted to take

00:07:12,580 --> 00:07:16,120
advantage of sessions because sessions

00:07:14,620 --> 00:07:18,550
in requests gave us a lot of performance

00:07:16,120 --> 00:07:20,140
benefits they provide us with connection

00:07:18,550 --> 00:07:22,840
pooling and connection pooling makes

00:07:20,140 --> 00:07:26,680
repeated requests within a small period

00:07:22,840 --> 00:07:28,360
of time very very very fast I wanted to

00:07:26,680 --> 00:07:29,620
give a short name to the resource that

00:07:28,360 --> 00:07:31,870
where I was going to be requesting and

00:07:29,620 --> 00:07:34,450
other than that I only ever needed to

00:07:31,870 --> 00:07:37,900
use the params and header keyword

00:07:34,450 --> 00:07:41,530
arguments to the session yet so I just

00:07:37,900 --> 00:07:43,840
made a little function around this the

00:07:41,530 --> 00:07:46,240
functions body will take the resource

00:07:43,840 --> 00:07:48,250
name and turn it to a URL make their

00:07:46,240 --> 00:07:50,950
request and if it's okay it'll actually

00:07:48,250 --> 00:07:53,260
turn the response if it's not okay it'll

00:07:50,950 --> 00:07:55,780
just raise an exception and this is all

00:07:53,260 --> 00:07:57,640
just very simple right I mean you might

00:07:55,780 --> 00:07:59,800
be even saying it's too simple to be

00:07:57,640 --> 00:08:02,230
testing it's a very very short function

00:07:59,800 --> 00:08:04,000
if it weren't on slides and aren't doing

00:08:02,230 --> 00:08:06,280
some convoluted stuff to make it fit on

00:08:04,000 --> 00:08:10,300
the slides it be maybe five lines of

00:08:06,280 --> 00:08:12,220
code at most but let's just imagine that

00:08:10,300 --> 00:08:13,870
we're using this in maybe fifty percent

00:08:12,220 --> 00:08:15,370
of the methods that we write in our

00:08:13,870 --> 00:08:17,080
little application so it's kind of

00:08:15,370 --> 00:08:19,090
important we need it to work and we need

00:08:17,080 --> 00:08:22,630
its logic to be consistent and well

00:08:19,090 --> 00:08:25,390
tested so we absolutely should be

00:08:22,630 --> 00:08:27,170
testing it so now how do we test it this

00:08:25,390 --> 00:08:31,290
is kind of the

00:08:27,170 --> 00:08:34,140
Neverending question so this is the

00:08:31,290 --> 00:08:35,850
first approach you might reach for you

00:08:34,140 --> 00:08:38,190
might say oh we'll just run the test

00:08:35,850 --> 00:08:39,690
against github API directly they they're

00:08:38,190 --> 00:08:44,070
a big company they can handle it doesn't

00:08:39,690 --> 00:08:48,210
matter so if you did that your test

00:08:44,070 --> 00:08:49,650
would be just this create a session get

00:08:48,210 --> 00:08:51,810
the resource in this case we're asking

00:08:49,650 --> 00:08:54,570
for the users resource and a cert that

00:08:51,810 --> 00:08:56,730
it came back ok that last assertion is

00:08:54,570 --> 00:08:58,590
kind of pathological because of the fact

00:08:56,730 --> 00:09:02,940
that we have the check inside the

00:08:58,590 --> 00:09:04,350
function but really if you're testing us

00:09:02,940 --> 00:09:09,030
you just want to make sure that you get

00:09:04,350 --> 00:09:12,660
back what you expect so this works well

00:09:09,030 --> 00:09:15,270
especially for one test with writing it

00:09:12,660 --> 00:09:18,950
up through pie though I was doing that

00:09:15,270 --> 00:09:23,490
upwards of 400 times especially early

00:09:18,950 --> 00:09:25,200
early beginnings of the project so at

00:09:23,490 --> 00:09:27,990
that point the tests were taking 15

00:09:25,200 --> 00:09:29,340
minutes to run and how many people here

00:09:27,990 --> 00:09:34,350
think that your test should take more

00:09:29,340 --> 00:09:38,600
than like a minute to run exactly no one

00:09:34,350 --> 00:09:41,070
in case anyone also wasn't looking so I

00:09:38,600 --> 00:09:42,300
did some finagling I got some I got to

00:09:41,070 --> 00:09:44,280
my test down to two minutes which was

00:09:42,300 --> 00:09:46,410
acceptable at the time that was

00:09:44,280 --> 00:09:49,650
successful right like tester fast

00:09:46,410 --> 00:09:50,880
they're accurate but then I ran into

00:09:49,650 --> 00:09:54,510
this wonderful thing that github has

00:09:50,880 --> 00:09:56,580
called rate limits and at the time they

00:09:54,510 --> 00:09:58,020
had it that without authenticating you

00:09:56,580 --> 00:10:00,720
had five thousand requests that you can

00:09:58,020 --> 00:10:02,880
make per hour and shortly after I made

00:10:00,720 --> 00:10:06,450
the test faster they drop that 260

00:10:02,880 --> 00:10:10,140
requests per hour so this is what my

00:10:06,450 --> 00:10:12,810
test suite look like there's a gigantic

00:10:10,140 --> 00:10:14,460
bucket of fail but some of them passed

00:10:12,810 --> 00:10:16,140
right like we can just kind of keep

00:10:14,460 --> 00:10:18,780
rerunning them until they all pass or

00:10:16,140 --> 00:10:22,110
some in some order they all pass not

00:10:18,780 --> 00:10:24,990
really please please please never test

00:10:22,110 --> 00:10:26,850
alive and you might be saying oh but i

00:10:24,990 --> 00:10:28,370
can write something in flask that mimics

00:10:26,850 --> 00:10:31,560
the service that I'm talking to no

00:10:28,370 --> 00:10:32,880
because then you're testing that as well

00:10:31,560 --> 00:10:34,200
as testing the thing that you're writing

00:10:32,880 --> 00:10:37,650
and you're ready more code than you have

00:10:34,200 --> 00:10:39,780
to it's usually a very hard thing to do

00:10:37,650 --> 00:10:40,290
to completely copy what you're testing

00:10:39,780 --> 00:10:44,070
ends

00:10:40,290 --> 00:10:45,899
and when that changes you then have to

00:10:44,070 --> 00:10:47,880
do double the work to both fixed thing

00:10:45,899 --> 00:10:50,370
that's talking to it and you're mocked

00:10:47,880 --> 00:10:54,089
out service it's a really really large

00:10:50,370 --> 00:10:56,250
amount of work so the second thing you

00:10:54,089 --> 00:10:58,889
might reach for in which I assume most

00:10:56,250 --> 00:11:01,220
people here already do is either sub out

00:10:58,889 --> 00:11:04,380
parts of requests that you use or

00:11:01,220 --> 00:11:06,389
totally mock it out in some way there's

00:11:04,380 --> 00:11:07,649
three libraries that do this really well

00:11:06,389 --> 00:11:10,589
and there's a fourth that people

00:11:07,649 --> 00:11:12,509
sometimes use so the first three here

00:11:10,589 --> 00:11:15,029
are the three better known libraries for

00:11:12,509 --> 00:11:18,060
doing this responses and requests mock

00:11:15,029 --> 00:11:20,940
our kind of obviously very very tied to

00:11:18,060 --> 00:11:23,670
request the library itself HTTP pretty

00:11:20,940 --> 00:11:27,000
will handle monkey head out for requests

00:11:23,670 --> 00:11:28,980
your lib to HTTP Live and probably a

00:11:27,000 --> 00:11:31,139
couple other libraries but the one

00:11:28,980 --> 00:11:33,029
people I think have stopped reaching for

00:11:31,139 --> 00:11:35,459
his mock and I'm a little bit worried

00:11:33,029 --> 00:11:38,550
about that personally mock is my

00:11:35,459 --> 00:11:40,170
favorite way of doing this responses I'm

00:11:38,550 --> 00:11:42,029
not sure if it's even still maintained

00:11:40,170 --> 00:11:43,620
it hasn't seen a release in a long time

00:11:42,029 --> 00:11:46,500
and hasn't seen any activity on github

00:11:43,620 --> 00:11:48,660
for a long time but it has a very nice

00:11:46,500 --> 00:11:51,600
and similar API to both HT to be pretty

00:11:48,660 --> 00:11:53,760
in a request amok and a disclaimer since

00:11:51,600 --> 00:11:55,920
I forgot at the beginning I'm telling

00:11:53,760 --> 00:11:57,120
you my personal preferences but when

00:11:55,920 --> 00:11:58,800
you're doing this for your own projects

00:11:57,120 --> 00:11:59,819
if you're already using one of these or

00:11:58,800 --> 00:12:02,069
if you're using something different and

00:11:59,819 --> 00:12:03,149
you like it better continue using it

00:12:02,069 --> 00:12:06,360
because it'll probably work really well

00:12:03,149 --> 00:12:09,720
for you use your judgement to do what's

00:12:06,360 --> 00:12:10,800
best for your project so since I like

00:12:09,720 --> 00:12:14,399
mock best i'm going to show you an

00:12:10,800 --> 00:12:18,060
example with it so here we create a fake

00:12:14,399 --> 00:12:19,800
session entirely and we call our get

00:12:18,060 --> 00:12:23,550
resource function with that fake session

00:12:19,800 --> 00:12:26,160
and with the users resource and then we

00:12:23,550 --> 00:12:29,040
can do something nice we can say we are

00:12:26,160 --> 00:12:32,699
expecting the sessions get method to be

00:12:29,040 --> 00:12:35,370
called with a URL and which case this is

00:12:32,699 --> 00:12:39,060
the actual URL you would look for all of

00:12:35,370 --> 00:12:40,680
the users on github and to be passed in

00:12:39,060 --> 00:12:45,149
keyword parameters for headers and

00:12:40,680 --> 00:12:46,829
params both equal to none and it's very

00:12:45,149 --> 00:12:49,019
explicit very short test if it weren't

00:12:46,829 --> 00:12:52,260
on a slide I could probably have fit it

00:12:49,019 --> 00:12:53,690
into three lines maybe four if we

00:12:52,260 --> 00:12:56,940
actually run our tests

00:12:53,690 --> 00:13:01,110
they all pass we only have one test oh

00:12:56,940 --> 00:13:02,610
so it's okay so let's actually I mean

00:13:01,110 --> 00:13:04,350
that look like a unit test right there's

00:13:02,610 --> 00:13:06,750
nothing talking to the network there's

00:13:04,350 --> 00:13:08,880
no other objects involved you could

00:13:06,750 --> 00:13:10,320
probably knock out the URL from function

00:13:08,880 --> 00:13:11,990
that we have but that's not talking to

00:13:10,320 --> 00:13:14,459
the network it's not that big of a deal

00:13:11,990 --> 00:13:17,519
so let's test an unhappy path through

00:13:14,459 --> 00:13:18,630
our code what happens if the service

00:13:17,519 --> 00:13:21,240
that we're talking to you in this case

00:13:18,630 --> 00:13:24,060
github returns like a four oh four or

00:13:21,240 --> 00:13:26,040
five hundred since we don't actually

00:13:24,060 --> 00:13:28,200
check the status code we're just using

00:13:26,040 --> 00:13:30,510
an attribute that does that for us we

00:13:28,200 --> 00:13:34,410
can actually lock out the response set

00:13:30,510 --> 00:13:36,060
the attribute that we check and then set

00:13:34,410 --> 00:13:38,279
the return value on the get method on

00:13:36,060 --> 00:13:41,579
the faked out session to be that new

00:13:38,279 --> 00:13:44,370
response we would then call our get

00:13:41,579 --> 00:13:46,800
resource function and we will assert

00:13:44,370 --> 00:13:48,810
that raised for status on our faked out

00:13:46,800 --> 00:13:50,070
response object is called because that's

00:13:48,810 --> 00:13:53,220
what we want to happen in the case that

00:13:50,070 --> 00:13:55,500
a 400 or 500 class status code comes

00:13:53,220 --> 00:13:56,640
back from github and that's kind of the

00:13:55,500 --> 00:13:59,220
important thing in these tests right

00:13:56,640 --> 00:14:00,690
there unit test so you want to exercise

00:13:59,220 --> 00:14:02,160
what happens inside that function and

00:14:00,690 --> 00:14:03,660
only what's inside the function not

00:14:02,160 --> 00:14:06,870
what's happening outside that what's on

00:14:03,660 --> 00:14:08,880
the network so all these tests are on

00:14:06,870 --> 00:14:11,730
and if you go on a bike camping trip

00:14:08,880 --> 00:14:14,370
like I head in my first slide like me

00:14:11,730 --> 00:14:16,500
and my friends do a lot you'd be able to

00:14:14,370 --> 00:14:18,390
hack on this while you're in your tent

00:14:16,500 --> 00:14:19,410
at night staying up way too late because

00:14:18,390 --> 00:14:24,180
you don't sleep like a normal human

00:14:19,410 --> 00:14:25,440
being so here we're totally removing our

00:14:24,180 --> 00:14:28,800
collaborator object which is the session

00:14:25,440 --> 00:14:30,839
right going back to the why I introduce

00:14:28,800 --> 00:14:32,399
those terms we're removing our

00:14:30,839 --> 00:14:34,440
collaborator object removing that the

00:14:32,399 --> 00:14:35,610
the network and by mocking out entirely

00:14:34,440 --> 00:14:38,339
we can make assertions about what

00:14:35,610 --> 00:14:39,510
happens inside that function alone and

00:14:38,339 --> 00:14:41,610
the test here I wrote were kind of

00:14:39,510 --> 00:14:46,170
minimal they could be much more verbose

00:14:41,610 --> 00:14:48,449
and that's the problem that's why people

00:14:46,170 --> 00:14:49,920
don't use mock that much mock itself can

00:14:48,449 --> 00:14:54,149
become very verbose when setting up a

00:14:49,920 --> 00:14:55,680
test you can probably pick size patterns

00:14:54,149 --> 00:14:57,449
from your tests to make them a little

00:14:55,680 --> 00:15:00,149
bit less or both at what is actually

00:14:57,449 --> 00:15:02,970
being tested is very clear but that

00:15:00,149 --> 00:15:04,529
takes time and it takes time to both

00:15:02,970 --> 00:15:06,190
write all the tests first and then find

00:15:04,529 --> 00:15:10,070
the patterns to exercise them

00:15:06,190 --> 00:15:11,570
so let's be honest so getresource really

00:15:10,070 --> 00:15:12,800
isn't that complicated right i mean we

00:15:11,570 --> 00:15:15,430
could just use request maka to take

00:15:12,800 --> 00:15:17,779
maybe in a couple lines to mock it out

00:15:15,430 --> 00:15:19,820
but then you're actually having to mock

00:15:17,779 --> 00:15:22,339
out a response object to just the same

00:15:19,820 --> 00:15:24,560
as h to be pretty and responses and when

00:15:22,339 --> 00:15:27,110
you do that you yourself have to carry

00:15:24,560 --> 00:15:28,790
around some kind of faked out body or

00:15:27,110 --> 00:15:30,680
something else some set of fake out

00:15:28,790 --> 00:15:32,389
headers which can change and then you

00:15:30,680 --> 00:15:34,579
have to go back and edit it in every

00:15:32,389 --> 00:15:36,019
place that you wrote it or you could

00:15:34,579 --> 00:15:37,610
just kind of keep a file with them in

00:15:36,019 --> 00:15:39,709
their right and then you have to go and

00:15:37,610 --> 00:15:41,720
edit that file but file i/o and test is

00:15:39,709 --> 00:15:45,050
kind of a not great ideas especially

00:15:41,720 --> 00:15:46,430
when you have like 600 it can take a

00:15:45,050 --> 00:15:49,670
while and especially when you're opening

00:15:46,430 --> 00:15:54,649
and closing them all up so choose your

00:15:49,670 --> 00:15:56,860
choose your own resources very well so

00:15:54,649 --> 00:16:02,480
this is the last one that I'll cover

00:15:56,860 --> 00:16:03,620
it's personally my favorite but it's

00:16:02,480 --> 00:16:07,279
personal my favorite stylet riddled

00:16:03,620 --> 00:16:11,470
library for it so this is the case where

00:16:07,279 --> 00:16:13,190
you would use an integration test and

00:16:11,470 --> 00:16:15,740
some cases you might call it a

00:16:13,190 --> 00:16:18,529
functional test so there's two libraries

00:16:15,740 --> 00:16:21,500
for doing this one is vcr pie and one is

00:16:18,529 --> 00:16:23,829
Betamax both libraries are inspired by

00:16:21,500 --> 00:16:27,199
the same librarian true be called VCR

00:16:23,829 --> 00:16:29,779
they use very very similar techniques

00:16:27,199 --> 00:16:34,310
inside of Python and try to carry the

00:16:29,779 --> 00:16:36,380
same API over from the Ruby library the

00:16:34,310 --> 00:16:37,730
author of the Ruby library is actually a

00:16:36,380 --> 00:16:41,329
pretty awesome person but that's a

00:16:37,730 --> 00:16:42,860
little bit besides the point so VCR

00:16:41,329 --> 00:16:44,779
probably like H to be pretty that we

00:16:42,860 --> 00:16:46,490
talked about earlier we'll work on

00:16:44,779 --> 00:16:49,760
something like five or six libraries

00:16:46,490 --> 00:16:53,360
it'll work on a HP lib Bureau lib to

00:16:49,760 --> 00:16:55,760
requests and handful of others beta max

00:16:53,360 --> 00:16:57,470
which is the library that I wrote is

00:16:55,760 --> 00:16:59,839
specialized to requests for a couple of

00:16:57,470 --> 00:17:01,910
reasons but I'm going to start with an

00:16:59,839 --> 00:17:06,380
example from VCR pie because it's

00:17:01,910 --> 00:17:11,510
actually a really good library so in our

00:17:06,380 --> 00:17:13,189
tests we will create a session we're

00:17:11,510 --> 00:17:17,030
going to name a cassette because both

00:17:13,189 --> 00:17:19,079
VCR and VCR pie VCR and betamax all call

00:17:17,030 --> 00:17:22,350
the files that it saves things too

00:17:19,079 --> 00:17:27,839
that's kind of surprising right like VCR

00:17:22,350 --> 00:17:29,700
cassette now and we're going to import

00:17:27,839 --> 00:17:31,380
the VCR module which I don't show here

00:17:29,700 --> 00:17:33,630
and then call a function on it called

00:17:31,380 --> 00:17:35,789
use cassette with a cassette name and

00:17:33,630 --> 00:17:38,580
inside the context manager we're going

00:17:35,789 --> 00:17:40,769
to make our actual request what's going

00:17:38,580 --> 00:17:42,809
to happen here is that since we're using

00:17:40,769 --> 00:17:45,330
a real session it's going to actually

00:17:42,809 --> 00:17:47,070
talk to the network it's going to record

00:17:45,330 --> 00:17:49,289
the request it's going to record the

00:17:47,070 --> 00:17:51,210
response that comes back and then it's

00:17:49,289 --> 00:17:53,580
going to save it when you exit the

00:17:51,210 --> 00:17:54,870
context and so now you can make

00:17:53,580 --> 00:17:57,240
assertions about the response you can

00:17:54,870 --> 00:17:59,850
say it came back okay you can check the

00:17:57,240 --> 00:18:00,960
body of the response in this case we

00:17:59,850 --> 00:18:02,610
want to make sure that give actually

00:18:00,960 --> 00:18:04,710
gave us a list of users there will only

00:18:02,610 --> 00:18:09,090
be about 30 or so there but anything

00:18:04,710 --> 00:18:10,799
more than 0 is appropriate and we're

00:18:09,090 --> 00:18:12,889
kind of done like it's a pretty good

00:18:10,799 --> 00:18:15,750
little example for our little function

00:18:12,889 --> 00:18:17,700
and you might be saying but what happens

00:18:15,750 --> 00:18:19,409
the next time you're on this test well

00:18:17,700 --> 00:18:21,149
the next time we run this test since we

00:18:19,409 --> 00:18:24,929
have that everything recorded into a

00:18:21,149 --> 00:18:27,000
file or cassette VCR we'll look at the

00:18:24,929 --> 00:18:29,010
request that's being sent match it

00:18:27,000 --> 00:18:31,230
against one that's in the file and then

00:18:29,010 --> 00:18:32,340
return the pre-recorded response so the

00:18:31,230 --> 00:18:34,799
next time you're on that test it should

00:18:32,340 --> 00:18:38,659
be near instantaneous except for you

00:18:34,799 --> 00:18:38,659
know the costs of doing file i/o

00:18:44,530 --> 00:18:49,580
the interesting thing is that vcr has a

00:18:47,900 --> 00:18:52,460
way of figuring out what library are

00:18:49,580 --> 00:18:54,800
using so it will only monkey patch what

00:18:52,460 --> 00:18:57,500
it eats too and yes it is monkey

00:18:54,800 --> 00:19:02,150
patching it will monkey patch a lot in

00:18:57,500 --> 00:19:03,680
some cases so the other thing to note

00:19:02,150 --> 00:19:06,170
which is not really shown in this

00:19:03,680 --> 00:19:07,670
example is that inside that context

00:19:06,170 --> 00:19:10,430
manager you can make multiple requests

00:19:07,670 --> 00:19:12,050
that have multiple responses since

00:19:10,430 --> 00:19:14,030
requests as some of you might know

00:19:12,050 --> 00:19:15,650
handles redirects for you if there is a

00:19:14,030 --> 00:19:18,470
redirect even in just one of them all

00:19:15,650 --> 00:19:21,530
those will be handled and it'll be

00:19:18,470 --> 00:19:23,240
behave exactly the same way request will

00:19:21,530 --> 00:19:25,160
receive the first response see that's a

00:19:23,240 --> 00:19:27,020
redirect go the next one find that

00:19:25,160 --> 00:19:29,900
response and keep handling it as it

00:19:27,020 --> 00:19:32,120
should and so we're just kind of spying

00:19:29,900 --> 00:19:34,130
in on our connection and when we run the

00:19:32,120 --> 00:19:35,420
tests we can run them repeatedly and we

00:19:34,130 --> 00:19:39,530
can go on a bike camping trip and they

00:19:35,420 --> 00:19:43,010
will always pass another quick example

00:19:39,530 --> 00:19:44,300
with Betamax is to just show you that

00:19:43,010 --> 00:19:46,370
they're very very similar but they have

00:19:44,300 --> 00:19:48,920
some different benefits Betamax

00:19:46,370 --> 00:19:50,690
specifically makes you use a session it

00:19:48,920 --> 00:19:51,650
makes you use a session because I want

00:19:50,690 --> 00:19:54,860
everyone in the world to be using

00:19:51,650 --> 00:19:56,290
sessions from requests if you can like I

00:19:54,860 --> 00:19:58,910
said they give you a lot of benefits

00:19:56,290 --> 00:20:02,420
probably more than i can give you on one

00:19:58,910 --> 00:20:04,820
talk if i had a separate talk we can

00:20:02,420 --> 00:20:07,460
also with by creating a recorder object

00:20:04,820 --> 00:20:09,020
which just a Betamax class i want to

00:20:07,460 --> 00:20:11,080
specify a directory without having to

00:20:09,020 --> 00:20:13,250
give it the full file name every time

00:20:11,080 --> 00:20:16,940
which is a little bit truer to the ruby

00:20:13,250 --> 00:20:19,430
library we then called the use cassette

00:20:16,940 --> 00:20:21,680
method on that recorder object give it a

00:20:19,430 --> 00:20:23,690
nice short name because Betamax will

00:20:21,680 --> 00:20:25,250
handle the extension name for you you

00:20:23,690 --> 00:20:26,480
can again just make all of your requests

00:20:25,250 --> 00:20:30,320
inside of that context and then make

00:20:26,480 --> 00:20:33,650
assertions about the response and again

00:20:30,320 --> 00:20:35,060
the tests are passing but I said before

00:20:33,650 --> 00:20:37,730
that your test should be concise it

00:20:35,060 --> 00:20:39,890
should be very very clear and you should

00:20:37,730 --> 00:20:41,570
have should be able to convey directly

00:20:39,890 --> 00:20:44,750
to the person who's reading it and maybe

00:20:41,570 --> 00:20:47,840
updating it that what it is actually

00:20:44,750 --> 00:20:49,220
testing so by creating a recorder object

00:20:47,840 --> 00:20:52,160
and creating a session inside of there

00:20:49,220 --> 00:20:53,830
it it's not very clear I mean you're

00:20:52,160 --> 00:20:56,030
doing a lot of things a lot of times

00:20:53,830 --> 00:20:57,710
since we're using pi test we can use

00:20:56,030 --> 00:21:00,960
fixtures take care of

00:20:57,710 --> 00:21:03,570
we can if we're using like a test case

00:21:00,960 --> 00:21:05,760
class from the unit test library in our

00:21:03,570 --> 00:21:07,860
setup method we would just create a

00:21:05,760 --> 00:21:09,779
session create the recorder object with

00:21:07,860 --> 00:21:12,590
the session and the cassette library

00:21:09,779 --> 00:21:15,090
directory which I forgot apparently and

00:21:12,590 --> 00:21:17,610
we could even auto generate the cassette

00:21:15,090 --> 00:21:20,789
name for that test that way we know

00:21:17,610 --> 00:21:22,799
exactly how it's generated from the test

00:21:20,789 --> 00:21:24,330
same that's being run and then we would

00:21:22,799 --> 00:21:26,700
just call recorder not start and that

00:21:24,330 --> 00:21:29,880
will eliminate the need for using a

00:21:26,700 --> 00:21:31,380
complex manager inside of our test we

00:21:29,880 --> 00:21:34,289
would then just call get resource with

00:21:31,380 --> 00:21:35,730
self dot session with the users resource

00:21:34,289 --> 00:21:37,350
and make assertions and that's the

00:21:35,730 --> 00:21:39,299
entirety of our test on one slide as

00:21:37,350 --> 00:21:42,600
opposed to three slides like it was

00:21:39,299 --> 00:21:45,480
before and then in our teardown function

00:21:42,600 --> 00:21:47,549
or method whatever your fixtures is in

00:21:45,480 --> 00:21:49,470
reality you just call stop and it's done

00:21:47,549 --> 00:21:50,970
and you can actually call stopping your

00:21:49,470 --> 00:21:54,769
test if you need to make requests out of

00:21:50,970 --> 00:21:57,750
band but that's not really important so

00:21:54,769 --> 00:21:59,909
now you're probably wondering but what

00:21:57,750 --> 00:22:00,990
happens if the surface changes well

00:21:59,909 --> 00:22:03,360
instead of having to edit anything

00:22:00,990 --> 00:22:07,289
manually you just go and you find those

00:22:03,360 --> 00:22:10,260
files and you delete them just RM space

00:22:07,289 --> 00:22:12,120
filename done and then you run the test

00:22:10,260 --> 00:22:13,740
again it will record a brand new one to

00:22:12,120 --> 00:22:16,049
the same exact file name with brand new

00:22:13,740 --> 00:22:19,590
data you can commit that or whatever

00:22:16,049 --> 00:22:21,510
else and you're done and if your test

00:22:19,590 --> 00:22:27,269
fails you can just fix your test or fix

00:22:21,510 --> 00:22:30,179
your code and be on your way and so just

00:22:27,269 --> 00:22:31,769
to recapitulate clearly from the API is

00:22:30,179 --> 00:22:34,080
the library to do very very similar

00:22:31,769 --> 00:22:35,880
things with very similar code they're

00:22:34,080 --> 00:22:39,870
both very robust very well tested and

00:22:35,880 --> 00:22:43,169
both actively maintained in my opinion

00:22:39,870 --> 00:22:47,240
it's not so humble though betamax forces

00:22:43,169 --> 00:22:52,320
you to use better two patterns so I

00:22:47,240 --> 00:22:56,370
obviously use Betamax so finally the

00:22:52,320 --> 00:22:57,990
reality you probably want to use both

00:22:56,370 --> 00:23:00,960
unit tests and integration tests in your

00:22:57,990 --> 00:23:02,519
application some things need to be

00:23:00,960 --> 00:23:03,809
tested as unit tests some things make

00:23:02,519 --> 00:23:06,600
more sense that way and some things make

00:23:03,809 --> 00:23:07,799
more sense as integration tests if you

00:23:06,600 --> 00:23:09,809
have a little bit more complicated

00:23:07,799 --> 00:23:11,700
function than getresource in this case

00:23:09,809 --> 00:23:13,559
you might want to be

00:23:11,700 --> 00:23:15,870
testing the internals that function as a

00:23:13,559 --> 00:23:18,360
unit test but also making sure that it

00:23:15,870 --> 00:23:20,220
actually works because sometimes if

00:23:18,360 --> 00:23:22,139
you're like me you brought your unit

00:23:20,220 --> 00:23:24,360
test in your actual code at the same

00:23:22,139 --> 00:23:25,799
time and so you might have them open in

00:23:24,360 --> 00:23:27,149
separate pains and be looking at both of

00:23:25,799 --> 00:23:29,250
them and just be writing your tests

00:23:27,149 --> 00:23:30,929
because you're so tired to be doing a

00:23:29,250 --> 00:23:32,789
certain exactly what's happening in the

00:23:30,929 --> 00:23:34,289
code has to be asserting instead of

00:23:32,789 --> 00:23:36,269
asserting what should be happening in

00:23:34,289 --> 00:23:38,250
the code and so integration tests will

00:23:36,269 --> 00:23:43,110
catch that for you and then you can go

00:23:38,250 --> 00:23:44,730
back and fix your unit tests so it's a

00:23:43,110 --> 00:23:47,610
two-part solution right testing with

00:23:44,730 --> 00:23:51,570
requests unfortunately there's no silver

00:23:47,610 --> 00:23:52,950
bullet it takes a lot more work but the

00:23:51,570 --> 00:23:54,419
combination of unit integration tests

00:23:52,950 --> 00:23:57,510
have really helped me improve code

00:23:54,419 --> 00:24:00,480
quality of github 3 pi and will help us

00:23:57,510 --> 00:24:02,549
improve the quality of twine since we're

00:24:00,480 --> 00:24:05,159
not doing it yet oh you can help us with

00:24:02,549 --> 00:24:09,630
that to some things that need to be

00:24:05,159 --> 00:24:15,500
tested more are pretty much anything at

00:24:09,630 --> 00:24:19,049
usage requests so just to recapitulate

00:24:15,500 --> 00:24:20,309
you can mock anything with requests you

00:24:19,049 --> 00:24:22,350
can use any of these libraries they

00:24:20,309 --> 00:24:26,429
might be more but these are the four

00:24:22,350 --> 00:24:28,289
that I know have I know of and the other

00:24:26,429 --> 00:24:29,700
three have very similar API is just to

00:24:28,289 --> 00:24:31,769
reinforce that so if you're already

00:24:29,700 --> 00:24:33,240
using H to be pretty and the recent

00:24:31,769 --> 00:24:35,789
releases have broken you like they broke

00:24:33,240 --> 00:24:39,779
an OpenStack you might try and work with

00:24:35,789 --> 00:24:42,090
responses or requests mock and there's a

00:24:39,779 --> 00:24:43,649
lot less boilerplate in those but you

00:24:42,090 --> 00:24:45,840
also have to again create your own

00:24:43,649 --> 00:24:49,139
fixtures and maintain them and keep them

00:24:45,840 --> 00:24:51,090
up to date which is not real ideal on

00:24:49,139 --> 00:24:52,950
the other hand I should have mentioned

00:24:51,090 --> 00:24:54,990
this earlier if you're using those

00:24:52,950 --> 00:24:57,179
libraries and you have a very specific

00:24:54,990 --> 00:24:59,490
test case that you can't reproduce with

00:24:57,179 --> 00:25:01,230
integration tests those are perfect you

00:24:59,490 --> 00:25:02,490
mock out the response you put in the

00:25:01,230 --> 00:25:04,409
weird data that's causing your

00:25:02,490 --> 00:25:06,720
application to crash and you've used

00:25:04,409 --> 00:25:08,429
that as a regression test but using it

00:25:06,720 --> 00:25:12,299
for every kind of test is not really

00:25:08,429 --> 00:25:14,130
tenable for me and again integration

00:25:12,299 --> 00:25:15,480
tests there also may be more libraries

00:25:14,130 --> 00:25:19,370
than these two but these are the two

00:25:15,480 --> 00:25:19,370
that I'm very very very familiar with

00:25:19,429 --> 00:25:23,809
yeah thank you

00:25:27,850 --> 00:25:32,240
all right folks we got about five

00:25:29,960 --> 00:25:34,010
minutes left for questions so we had a

00:25:32,240 --> 00:25:35,840
microphone here and then one in the back

00:25:34,010 --> 00:25:41,150
over here so if you have a question

00:25:35,840 --> 00:25:44,210
please feel free to come on up uh hi

00:25:41,150 --> 00:25:45,860
could you clarify which Betamax library

00:25:44,210 --> 00:25:49,580
is yours since there's another one out

00:25:45,860 --> 00:25:51,290
there on github that has a higher google

00:25:49,580 --> 00:25:53,240
pagerank than yours it should be pretty

00:25:51,290 --> 00:25:55,669
obvious but I thought it might be

00:25:53,240 --> 00:25:58,370
important um that's a good question

00:25:55,669 --> 00:26:02,840
actually I were so the other one is Java

00:25:58,370 --> 00:26:06,410
bow okay yum if you go to if you hit

00:26:02,840 --> 00:26:08,809
your name up there and github that's the

00:26:06,410 --> 00:26:10,850
one that's that's the one written for

00:26:08,809 --> 00:26:12,650
groovy and I didn't realize it at the

00:26:10,850 --> 00:26:14,750
exact same name as mine before I chose

00:26:12,650 --> 00:26:16,429
the name and then I headed on pi PI and

00:26:14,750 --> 00:26:17,900
I was like I feel bad for camping for

00:26:16,429 --> 00:26:23,210
camping packaging him so I'm not going

00:26:17,900 --> 00:26:25,760
to change it yes hey um you're talking

00:26:23,210 --> 00:26:27,950
about blowing away the previously

00:26:25,760 --> 00:26:29,660
recorded responses every once in a while

00:26:27,950 --> 00:26:31,610
to make sure that you're up to date with

00:26:29,660 --> 00:26:33,290
what's actually being returned do you

00:26:31,610 --> 00:26:36,400
have any kind of policy for how long you

00:26:33,290 --> 00:26:38,419
wait before you do that or do you um

00:26:36,400 --> 00:26:40,220
whenever you feel comfortable there's

00:26:38,419 --> 00:26:42,169
also a way to automate it with Betamax

00:26:40,220 --> 00:26:45,950
okay there's actually a parameter that

00:26:42,169 --> 00:26:47,450
says rerecord interval and so you can

00:26:45,950 --> 00:26:50,210
give it a period of time I figure out

00:26:47,450 --> 00:26:51,140
what the unit of time measure is off the

00:26:50,210 --> 00:26:52,880
top my headaches I don't use it that

00:26:51,140 --> 00:26:53,929
often but that'll do it for you

00:26:52,880 --> 00:26:55,250
automatically you can just leave that in

00:26:53,929 --> 00:26:56,870
your test and every so often over he

00:26:55,250 --> 00:26:59,330
recorded d and what do you personally

00:26:56,870 --> 00:27:02,059
set that too um I would set that to

00:26:59,330 --> 00:27:07,250
probably a month 30 days awesome thank

00:27:02,059 --> 00:27:09,470
you hi thanks for the talk just one

00:27:07,250 --> 00:27:11,059
comment in one question I'm not the

00:27:09,470 --> 00:27:12,440
mention of response but I think it still

00:27:11,059 --> 00:27:15,559
kind of up to date he was updated a few

00:27:12,440 --> 00:27:17,600
weeks ago oh okay I and I have a

00:27:15,559 --> 00:27:19,940
question which is so response I don't

00:27:17,600 --> 00:27:22,640
know about VCR and betamax but response

00:27:19,940 --> 00:27:25,070
HTTP pretty cetera so nice two tests

00:27:22,640 --> 00:27:26,419
HTTP level it's something that is a bit

00:27:25,070 --> 00:27:29,330
hard to test at least in my experience

00:27:26,419 --> 00:27:30,770
is fabric is what happens when genius

00:27:29,330 --> 00:27:32,840
doesn't work what happens when you have

00:27:30,770 --> 00:27:35,100
some weird error connection it's not

00:27:32,840 --> 00:27:36,929
exactly HTTP but I still handled by

00:27:35,100 --> 00:27:38,880
based on all those libraries so do you

00:27:36,929 --> 00:27:41,130
have any like experience recommendation

00:27:38,880 --> 00:27:42,539
on how to do research on so if you're

00:27:41,130 --> 00:27:44,520
having problems with connection errors

00:27:42,539 --> 00:27:46,049
that's usually not something that's

00:27:44,520 --> 00:27:47,340
going to be normal right I mean if

00:27:46,049 --> 00:27:49,620
you're having connection errors or any

00:27:47,340 --> 00:27:51,539
kind of other socket problem that's

00:27:49,620 --> 00:27:52,620
going to be intermediate and if you want

00:27:51,539 --> 00:27:54,960
to test how your application handles

00:27:52,620 --> 00:27:56,580
that you can either mock it out with

00:27:54,960 --> 00:27:59,580
marquez like a side effect of calling

00:27:56,580 --> 00:28:03,450
the get method just say raise connection

00:27:59,580 --> 00:28:04,850
error out of requests or raise the

00:28:03,450 --> 00:28:06,570
socket error or something else like that

00:28:04,850 --> 00:28:07,679
actually can I talk to you afterwards

00:28:06,570 --> 00:28:09,960
about some bugs that I found in

00:28:07,679 --> 00:28:11,250
responses that I mean I wrote this a

00:28:09,960 --> 00:28:13,380
couple weeks ago and it didn't seem like

00:28:11,250 --> 00:28:15,179
there was any activity so I didn't so

00:28:13,380 --> 00:28:16,710
I'm not do I mean I'm happy to talk but

00:28:15,179 --> 00:28:19,020
I'm not an intern or eat or anything I

00:28:16,710 --> 00:28:24,539
just but you're not the maintainer I'm

00:28:19,020 --> 00:28:26,370
sorry okay thanks thanks for the talk

00:28:24,539 --> 00:28:29,159
Ian are you gonna be tweeting out these

00:28:26,370 --> 00:28:30,240
slides at some point yes great and I'm

00:28:29,159 --> 00:28:32,190
probably gonna read a blog post too

00:28:30,240 --> 00:28:33,870
because there's some stuff that's not in

00:28:32,190 --> 00:28:35,970
the slides that probably would be better

00:28:33,870 --> 00:28:41,130
as a blog post sure I'd like to

00:28:35,970 --> 00:28:45,390
subscribe to your newsletter thanks hi

00:28:41,130 --> 00:28:48,000
um so either with VCR or Betamax how

00:28:45,390 --> 00:28:51,299
does it cope if for example you got test

00:28:48,000 --> 00:28:52,830
which says getresource process that

00:28:51,299 --> 00:28:54,299
resource get a slightly different

00:28:52,830 --> 00:28:56,820
resource based on that response if you

00:28:54,299 --> 00:28:59,340
change your test to say get that page

00:28:56,820 --> 00:29:01,409
maybe wait a second get another pet get

00:28:59,340 --> 00:29:03,299
the same resource to see whether a

00:29:01,409 --> 00:29:05,039
certain header changed it's the same

00:29:03,299 --> 00:29:07,230
resource and the same request but you're

00:29:05,039 --> 00:29:08,070
doing it twice that's actually one of

00:29:07,230 --> 00:29:10,980
the problems that's one of the

00:29:08,070 --> 00:29:13,710
limitations they if you send different

00:29:10,980 --> 00:29:15,720
headers and you have it configured

00:29:13,710 --> 00:29:16,980
properly it will allow a second one

00:29:15,720 --> 00:29:19,020
through and match on the headers as well

00:29:16,980 --> 00:29:22,020
but if you're just setting the same

00:29:19,020 --> 00:29:23,460
response twice it'll sound request twice

00:29:22,020 --> 00:29:26,460
now let's name requests trace yes sorry

00:29:23,460 --> 00:29:28,799
um it it will just keep using the one

00:29:26,460 --> 00:29:32,909
that it's already recorded thanks

00:29:28,799 --> 00:29:34,679
problem wow so you mentioned in passing

00:29:32,909 --> 00:29:36,690
we shall be using the session thing and

00:29:34,679 --> 00:29:37,799
requests yes and you said icon grains

00:29:36,690 --> 00:29:39,750
that's going to take way too long and

00:29:37,799 --> 00:29:43,290
but maybe you should go into it very

00:29:39,750 --> 00:29:46,200
briefly so sessions give you a lot more

00:29:43,290 --> 00:29:47,520
control over what you can do if you ever

00:29:46,200 --> 00:29:49,590
need to prepare

00:29:47,520 --> 00:29:51,380
then we're through requests like change

00:29:49,590 --> 00:29:53,550
the URL after we prepared it for you

00:29:51,380 --> 00:29:55,680
using a session makes it a lot simpler

00:29:53,550 --> 00:29:57,420
just using the functional API gives you

00:29:55,680 --> 00:30:00,480
a very limited control over your request

00:29:57,420 --> 00:30:01,590
and what happens with it the session

00:30:00,480 --> 00:30:03,570
will also store cookies for you

00:30:01,590 --> 00:30:05,820
permanently so if you are repeatedly

00:30:03,570 --> 00:30:07,800
going to a website and using cookies to

00:30:05,820 --> 00:30:09,420
login it's not going to work with the

00:30:07,800 --> 00:30:11,240
request get you have to use the session

00:30:09,420 --> 00:30:13,680
connection pooling makes it much faster

00:30:11,240 --> 00:30:15,150
you can swap out adapters if you need to

00:30:13,680 --> 00:30:17,490
change the what SSL protocol you're

00:30:15,150 --> 00:30:19,950
talking to I can you just set specific

00:30:17,490 --> 00:30:21,210
socket options on the connection you can

00:30:19,950 --> 00:30:24,120
do that with a session but not with the

00:30:21,210 --> 00:30:25,590
functional UVI there's again there's

00:30:24,120 --> 00:30:26,700
lots of things you can do with sessions

00:30:25,590 --> 00:30:29,370
that you can't do with the functional

00:30:26,700 --> 00:30:30,870
API but all of those like you know that

00:30:29,370 --> 00:30:32,310
feels like an 8020 thing there's some

00:30:30,870 --> 00:30:33,900
specialized cases or it's deafening in a

00:30:32,310 --> 00:30:35,310
win are there some things were like

00:30:33,900 --> 00:30:36,390
every single time you use requests

00:30:35,310 --> 00:30:37,590
actually you should be doing a session

00:30:36,390 --> 00:30:39,210
because this and so you mention

00:30:37,590 --> 00:30:41,040
connection pooling do we not get

00:30:39,210 --> 00:30:42,450
connection pooling with no regular

00:30:41,040 --> 00:30:44,430
request again there's no session that's

00:30:42,450 --> 00:30:46,530
stored at the module level for that to

00:30:44,430 --> 00:30:48,090
happen for the functional API okay in

00:30:46,530 --> 00:30:49,710
fact we close every session after we use

00:30:48,090 --> 00:30:51,120
it for each each time you call requests

00:30:49,710 --> 00:30:52,410
like that we create a session yeah we

00:30:51,120 --> 00:30:55,320
make the request and we close it and

00:30:52,410 --> 00:30:56,490
it's always discarded the other thing

00:30:55,320 --> 00:30:58,320
you can do is if you have headers that

00:30:56,490 --> 00:31:00,660
like a common thing is the Sun headers

00:30:58,320 --> 00:31:01,980
frequently right you might send the same

00:31:00,660 --> 00:31:03,720
one header like a user agent or

00:31:01,980 --> 00:31:04,770
something else you can send that every

00:31:03,720 --> 00:31:06,180
time of the headers perimeter but if you

00:31:04,770 --> 00:31:09,570
said it once on the session it'll always

00:31:06,180 --> 00:31:11,070
gets it oh I have specialized use cases

00:31:09,570 --> 00:31:13,380
so I'm more used to the transport

00:31:11,070 --> 00:31:17,160
adapters and everything else but it's a

00:31:13,380 --> 00:31:19,380
much more powerful api thanks thank you

00:31:17,160 --> 00:31:21,420
all for coming out thank you ian for for

00:31:19,380 --> 00:31:23,870
the talk and he'll be around here at

00:31:21,420 --> 00:31:23,870

YouTube URL: https://www.youtube.com/watch?v=YHbKxFcDltM


